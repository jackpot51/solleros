     1                                  [map symbols build/kernel.map]
     2                                  %include "config.asm"
     3                              <1> ;These flags are used to configure options as on, put a simicolon in front of it to not configure it
     4                              <1> 
     5                              <1> %define gui.included
     6                              <1> ;Turn on the gui
     7                              <1> 
     8                              <1> ;%define gui.alphablending
     9                              <1> ;Make the terminal in the GUI 25% transparent
    10                              <1> 
    11                              <1> ;%define gui.background
    12                              <1> ;Make the GUI have a loadable background
    13                              <1> 
    14                              <1> ;%define gui.time
    15                              <1> ;Show time in top right corner of screen
    16                              <1> 
    17                              <1> ;%define io.serial "1"
    18                              <1> ;Use the specified serial port for input and output instead of the keyboard and screen
    19                              <1> ;If the gui is included this should not be enabled
    20                              <1> 
    21                              <1> ;%define terminal.vsync
    22                              <1> ;Uses the RTC to automatically update the terminal at ~64Hz
    23                              <1> 	;WARNING:
    24                              <1> 	;This may cause problems on systems with non-standard RTC's
    25                              <1> 	;It is therefore recommended that you do not enable it even
    26                              <1> 	;though it gives a large speed improvement for character output
    27                              <1> 
    28                              <1> %define font.unicode
    29                              <1> ;Include a unicode font. Disable to use an ascii font
    30                              <1> 	
    31                              <1> %define hardware.automatic
    32                              <1> ;Automatically load the sound and network drivers.
    33                              <1> 
    34                              <1> %define threads.included
    35                              <1> ;Include the thread testing stuff-this uses a relatively large amount of memory
    36                              <1> 
    37                              <1> %define exceptions.included
    38                              <1> ;Display debugging information should crashes occur-also uses quite a bit of memory
    39                              <1> 
    40                              <1> ;%define disk.protected
    41                              <1> ;Use protected mode instead of real mode for disk access-this allows for multitasking with disk reads
    42                              <1> 
    43                              <1> %define disk.real
    44                              <1> ;Use real mode for disk access-this gives greater compatibility
    45                              <1> 
    46                              <1> %define sound.included
    47                              <1> ;This includes the sound drivers
    48                              <1> 
    49                              <1> %define network.included
    50                              <1> ;This includes the network stack
    51                              <1> 
    52                              <1> ;%define rtl8169.included
    53                              <1> ;This includes the RTL8169 drivers
    54                              <1> 
    55                              <1> ;%define rtl8139.included
    56                              <1> ;This includes the RTL8139 drivers
    57                              <1> 
    58                              <1> %define ne2000.included
    59                              <1> ;This includes the ne2000 drivers
    60                              <1> 
    61                              <1> ;%define i8254x.included
    62                              <1> ;This includes the Intel 8254x drivers
    63                              <1> 
    64                              <1> ;%define sector.debug
    65                              <1> ;Dump the contents of the first sector of SollerOS
    66                              <1> 
    67                              <1> ;%define dos.compatible
    68                              <1> ;Make the kernel loadable by dos.
    69                              <1> 
    70                              <1> ;%define system.simple
    71                              <1> ;The smallest possible system, overrides all options
    72                              <1> 
    73                              <1> ;FIX DEPENDANCIES
    74                              <1> %ifdef system.simple
    75                              <1> 	%undef dos.compatible	;overides all including dos.compatible
    76                              <1> 	%define UNDEFALL
    77                              <1> %endif
    78                              <1> %ifdef dos.compatible
    79                              <1> 	%define UNDEFALL
    80                              <1> %endif
    81                              <1> %ifdef UNDEFALL
    82                              <1> 	%undef io.serial
    83                              <1> 	%undef disk.real
    84                              <1> 	%undef gui.included
    85                              <1> 	%undef gui.alphablending
    86                              <1> 	%undef gui.background
    87                              <1> 	%undef terminal.vsync
    88                              <1> 	%undef font.unicode
    89                              <1> 	%undef hardware.automatic
    90                              <1> 	%undef threads.included
    91                              <1> 	%undef exceptions.included
    92                              <1> 	%undef disk.protected
    93                              <1> 	%undef sound.included
    94                              <1> 	%undef network.included
    95                              <1> 	%undef rtl8139.included
    96                              <1> 	%undef rtl8169.included
    97                              <1> 	%undef ne2000.included
    98                              <1> 	%undef i8254x.included
    99                              <1> 	%undef sector.debug
   100                              <1> 	%undef UNDEFALL
   101                              <1> %endif
   102                              <1> %ifdef system.simple
   103                              <1> 	%define io.serial "1"
   104                              <1> 	%define disk.real
   105                              <1> %endif
   106                              <1> %ifdef gui.included
   107                              <1> 	%undef io.serial
   108                              <1> %else
   109                              <1> 	%undef gui.alphablending
   110                              <1> 	%undef gui.background
   111                              <1> %endif
   112                              <1> %ifdef network.included
   113                              <1> %else
   114                              <1> 	%undef i8254x.included
   115                              <1> 	%undef ne2000.included
   116                              <1> 	%undef rtl8139.included
   117                              <1> 	%undef rtl8169.included
   118                              <1> %endif
   119                              <1> %ifdef disk.protected
   120                              <1> 	%undef disk.real
   121                              <1> %else
   122                              <1> 	%ifdef disk.real
   123                              <1> 	%else
   124                              <1> 		%define disk.none
   125                              <1> 	%endif
   126                              <1> %endif
   127                                  [ORG 0x100]
   128                                  	%include "source/signature.asm"
   129                              <1> header:
   130 00000000 EB12                <1> 	jmp short boot
   131                              <1> signature:
   132 00000002 536F6C6C65724F5320- <1> db "SollerOS ",0 ;Operating system name
   133 0000000B 00                  <1>
   134 0000000C 18010000            <1> dd 280	;version number
   135                              <1> signatureend:
   136 00000010 00940300                	dd bsscopy - header ;size of kernel data on disk
   137                                  [BITS 16]
   138                                      %include "source/boot.asm"
   139                              <1> boot:
   140 00000014 8CC8                <1> 	mov ax, cs
   141 00000016 8ED8                <1> 	mov ds, ax
   142 00000018 8EC0                <1> 	mov es, ax
   143 0000001A 8ED0                <1> 	mov ss, ax
   144 0000001C 0F31                <1> 	rdtsc
   145 0000001E 66A3[F58E]          <1> 	mov [initialtsc], eax
   146 00000022 668916[F98E]        <1> 	mov [initialtsc + 4], edx
   147 00000027 66A3[FD8E]          <1> 	mov [lasttsc], eax
   148 0000002B 668916[018F]        <1> 	mov [lasttsc + 4], edx
   149 00000030 880E[F08E]          <1> 	mov [DriveNumber], cl
   150 00000034 66891E[F18E]        <1> 	mov [lbaad], ebx
   151                              <1> %ifdef io.serial
   152                              <1> 	call getmemorysize
   153                              <1> 	mov si, serialmsg
   154                              <1> 	call printrm
   155                              <1> 	jmp pmode
   156                              <1> serialmsg: db 10,13,"SollerOS: Using serial port ",io.serial," for I/O.",0
   157                              <1> %else
   158 00000039 E80300              <1> 	call vgaset	;make users switch using a command-this leads to very fast boots
   159 0000003C E95300              <1> 	jmp pmode
   160                              <1> %endif
   161                              <1> 	
   162                              <1> vgaset:
   163 0000003F B81200              <1> 	mov ax, 12h
   164 00000042 31DB                <1> 	xor bx, bx
   165 00000044 CD10                <1> 	int 10h
   166 00000046 C606[EF8E]00        <1> 	mov byte [guion], 0
   167 0000004B E80100              <1> 	call getmemorysize;get the memory map after the video is initialized
   168 0000004E C3                  <1> 	ret
   169                              <1> 
   170                              <1> getmemorysize:
   171 0000004F BF[058F]            <1> 	mov di, memlistbuf
   172 00000052 6631DB              <1> 	xor ebx, ebx
   173                              <1> getmemsizeloop:
   174 00000055 66B820E80000        <1> 	mov eax, 0xE820
   175 0000005B 66BA50414D53        <1> 	mov edx, 0x0534D4150
   176 00000061 66B918000000        <1> 	mov ecx, 24
   177 00000067 CD15                <1> 	int 0x15
   178 00000069 81C71800            <1> 	add di, 24
   179 0000006D 81FF[4591]          <1> 	cmp di, memlistend
   180 00000071 7305                <1> 	jae nomoregetmemsize
   181 00000073 6685DB              <1> 	test ebx, ebx
   182 00000076 75DD                <1> 	jnz getmemsizeloop
   183                              <1> nomoregetmemsize:
   184 00000078 81EF[058F]          <1> 	sub di, memlistbuf
   185 0000007C 893E[4591]          <1> 	mov [memlistend], di
   186 00000080 C3                  <1> 	ret
   187                              <1> 	
   188                              <1> printrm:			; 'si' comes in with string address
   189 00000081 BB0700              <1>     mov bx,07		; write to display
   190 00000084 B40E                <1>     mov ah,0Eh		; screen function
   191 00000086 8A04                <1>    .lp:    mov al,[si]         ; get next character
   192 00000088 84C0                <1>     test al,al		; look for terminator 
   193 0000008A 7405                <1>     jz .done	; zero byte at end of string
   194 0000008C CD10                <1>     int 10h		; write character to screen.    
   195 0000008E 46                  <1> 	inc si	     	; move to next character
   196 0000008F EBF5                <1>     jmp .lp		; loop
   197 00000091 C3                  <1> .done: ret
   198                                      %include "source/pmode.asm"
   199                              <1> [BITS 16]
   200                              <1> 
   201                              <1> pmode:
   202 00000092 6631C0              <1> 	xor eax, eax
   203 00000095 6631DB              <1> 	xor ebx, ebx
   204 00000098 6631C9              <1> 	xor ecx, ecx
   205 0000009B 6631D2              <1> 	xor edx, edx
   206 0000009E 6631F6              <1> 	xor esi, esi
   207 000000A1 6631FF              <1> 	xor edi, edi
   208 000000A4 BA9200              <1> 	mov dx, 0x92
   209 000000A7 EC                  <1> 	in al, dx	;A20
   210 000000A8 0C02                <1> 	or al, 2
   211 000000AA EE                  <1> 	out dx, al
   212 000000AB 8CCB                <1> 	mov bx,cs		; EBX=segment
   213 000000AD 66C1E304            <1> 	shl ebx,4		;	<< 4
   214 000000B1 6689D8              <1> 	mov eax, ebx		; EAX=linear address of segment base
   215 000000B4 A3[A303]            <1> 	mov [gdt2 + 2],ax
   216 000000B7 A3[AB03]            <1> 	mov [gdt3 + 2],ax
   217 000000BA 66C1E810            <1> 	shr eax,16
   218 000000BE A2[A503]            <1> 	mov [gdt2 + 4],al
   219 000000C1 A2[AD03]            <1> 	mov [gdt3 + 4],al
   220 000000C4 8826[A803]          <1> 	mov [gdt2 + 7],ah
   221 000000C8 8826[B003]          <1> 	mov [gdt3 + 7],ah
   222                              <1> 
   223 000000CC 66B8[00940300]      <1> 	mov eax, initialstack
   224 000000D2 660306[4B02]        <1> 	add eax, [newcodecache]
   225 000000D7 A3[9B03]            <1> 	mov [gdts + 2],ax
   226 000000DA 66C1E810            <1> 	shr eax, 16
   227 000000DE A2[9D03]            <1> 	mov [gdts + 4],al
   228 000000E1 8826[A003]          <1> 	mov [gdts + 7], ah
   229                              <1> 	
   230 000000E5 66A1[4B02]          <1> 	mov eax, [newcodecache]
   231 000000E9 A3[B303]            <1> 	mov [gdt4 + 2],ax
   232 000000EC A3[BB03]            <1> 	mov [gdt5 + 2],ax
   233 000000EF A3[C303]            <1> 	mov [gdtv8086 + 2], ax
   234 000000F2 A3[CB03]            <1> 	mov [gdtv80862 + 2], ax
   235 000000F5 66C1E810            <1> 	shr eax,16
   236 000000F9 A2[B503]            <1> 	mov [gdt4 + 4],al
   237 000000FC A2[BD03]            <1> 	mov [gdt5 + 4],al
   238 000000FF A2[C503]            <1> 	mov [gdtv8086 + 4],al
   239 00000102 A2[CD03]            <1> 	mov [gdtv80862 + 4],al
   240 00000105 8826[B803]          <1> 	mov [gdt4 + 7],ah
   241 00000109 8826[C003]          <1> 	mov [gdt5 + 7],ah
   242 0000010D 8826[C803]          <1> 	mov [gdtv8086 + 7],ah
   243 00000111 8826[D003]          <1> 	mov [gdtv80862 + 7],ah
   244                              <1> 	
   245 00000115 66B800004000        <1> 	mov eax, dosprogloc
   246 0000011B 660306[4B02]        <1> 	add eax, [newcodecache]
   247 00000120 A3[D303]            <1> 	mov [gdtdos + 2],ax
   248 00000123 A3[DB03]            <1> 	mov [gdtdos2 + 2],ax
   249 00000126 66C1E810            <1> 	shr eax,16
   250 0000012A A2[D503]            <1> 	mov [gdtdos + 4],al
   251 0000012D A2[DD03]            <1> 	mov [gdtdos2 + 4],al
   252 00000130 8826[D803]          <1> 	mov [gdtdos + 7],ah
   253 00000134 8826[E003]          <1> 	mov [gdtdos2 + 7],ah
   254                              <1> 	
   255                              <1> ; fix up gdt and idt
   256 00000138 67668D83[89030000]  <1> 	lea eax,[ebx + gdt]	; EAX=linear address of gdt
   257 00000140 66A3[7F03]          <1> 	mov [gdtr + 2],eax
   258 00000144 67668D83[E1030000]  <1> 	lea eax,[ebx + idt]	; EAX=linear address of idt
   259 0000014C 66A3[8503]          <1> 	mov [idtr + 2],eax
   260 00000150 FA                  <1> 	cli
   261 00000151 0F0116[7D03]        <1> 	lgdt [gdtr]
   262 00000156 0F011E[8303]        <1> 	lidt [idtr]
   263 0000015B 6631DB              <1> 	xor ebx, ebx
   264 0000015E 8CDB                <1> 	mov bx, ds
   265 00000160 66891E[4702]        <1> 	mov [basecache], ebx
   266 00000165 0F20C0              <1> 	mov eax,cr0
   267 00000168 0C01                <1> 	or al,1
   268 0000016A 0F22C0              <1> 	mov cr0,eax
   269 0000016D EA[7201]1800        <1> 	jmp SYS_CODE_SEL:do_pm
   270                              <1> [BITS 32]
   271                              <1> do_pm:
   272 00000172 31C0                <1> 	xor eax, eax
   273 00000174 66B82000            <1> 	mov ax, SYS_DATA_SEL
   274 00000178 8ED8                <1> 	mov ds, ax
   275 0000017A 8EC0                <1> 	mov es, ax
   276 0000017C 8EE0                <1> 	mov fs, ax
   277 0000017E 66B83000            <1> 	mov ax, NEW_DATA_SEL
   278 00000182 8EE8                <1> 	mov gs, ax
   279                              <1> 	
   280                              <1> copykernel:
   281 00000184 648B06              <1> 	mov eax, [fs:esi]
   282 00000187 658906              <1> 	mov [gs:esi], eax
   283 0000018A 81C604000000        <1> 	add esi, 4
   284 00000190 81FE[00940300]      <1> 	cmp esi, bsscopy
   285 00000196 72EC                <1> 	jb copykernel
   286 00000198 EA[9F010000]2800    <1> 	jmp NEW_CODE_SEL:done_copy
   287                              <1> 	
   288                              <1> done_copy:
   289 0000019F 66B83000            <1> 	mov ax, NEW_DATA_SEL	;these MUST be setup AFTER the kernel switches places!!!
   290 000001A3 8ED8                <1> 	mov ds, ax
   291 000001A5 8EC0                <1> 	mov es, ax
   292 000001A7 8EE0                <1> 	mov fs, ax
   293                              <1> 	;mov ax, STACK_SEL
   294 000001A9 8ED0                <1> 	mov ss, ax
   295 000001AB BC[00B40300]        <1> 	mov esp, stackend
   296 000001B0 66B82000            <1> 	mov ax, SYS_DATA_SEL
   297 000001B4 8EE8                <1> 	mov gs, ax
   298                              <1> 	
   299 000001B6 E80D650000          <1> 	call initialize	;initialize drivers
   300                              <1> 	
   301 000001BB A1[4B020000]        <1> 	mov eax, [newcodecache]
   302 000001C0 C1E804              <1> 	shr eax, 4
   303 000001C3 A3[47020000]        <1> 	mov [basecache], eax
   304                              <1> 	
   305 000001C8 BE[52C82500]        <1> 	mov esi, bssend
   306 000001CD 31C0                <1> 	xor eax, eax
   307                              <1> clearkernelbuffers:
   308 000001CF 8906                <1> 	mov [esi], eax
   309 000001D1 81EE04000000        <1> 	sub esi, 4
   310 000001D7 81FE[00940300]      <1> 	cmp esi, bsscopy
   311 000001DD 77F0                <1> 	ja clearkernelbuffers
   312 000001DF FB                  <1> 	sti
   313                              <1> 
   314                              <1> getmemoryspace:
   315 000001E0 BE[058F0000]        <1> 	mov esi, memlistbuf
   316 000001E5 31FF                <1> 	xor edi, edi
   317 000001E7 668B3D[45910000]    <1> 	mov di, [memlistend]
   318 000001EE 01F7                <1> 	add edi, esi
   319 000001F0 31C0                <1> 	xor eax, eax
   320                              <1> memoryspaceaddition:
   321 000001F2 39FE                <1> 	cmp esi, edi
   322 000001F4 7322                <1> 	jae finishedmemspacecalc
   323 000001F6 81C608000000        <1> 	add esi, 8
   324 000001FC 8B0E                <1> 	mov ecx, [esi]
   325 000001FE 81C608000000        <1> 	add esi, 8
   326 00000204 8B1E                <1> 	mov ebx, [esi]
   327 00000206 81C608000000        <1> 	add esi, 8
   328 0000020C 81FB01000000        <1> 	cmp ebx, 1
   329 00000212 75DE                <1> 	jne memoryspaceaddition
   330 00000214 01C8                <1> 	add eax, ecx
   331 00000216 EBDA                <1> 	jmp memoryspaceaddition
   332                              <1> finishedmemspacecalc:
   333 00000218 A3[5C020000]        <1> 	mov [memoryspace], eax
   334                              <1> %ifdef gui.included
   335 0000021D 803D[EF8E0000]00    <1> 	cmp byte [guion], 0
   336 00000224 741C                <1> 	je normalstartup
   337 00000226 8B1D[47020000]      <1> 	mov ebx, [basecache]
   338 0000022C C1E304              <1> 	shl ebx, 4
   339 0000022F 8B3D[705A0000]      <1> 	mov edi, [physbaseptr]
   340 00000235 29DF                <1> 	sub edi, ebx
   341 00000237 893D[705A0000]      <1> 	mov [physbaseptr], edi
   342 0000023D E98B6A0000          <1> 	jmp guiboot
   343                              <1> %endif
   344                              <1> normalstartup:
   345 00000242 E9EE280000          <1> 	jmp os
   346                              <1> 	
   347 00000247 00000000            <1> basecache dd 0
   348 0000024B 00001000            <1> newcodecache dd 0x100000
   349                              <1> 
   350 0000024F 00                  <1> testingcpuspeed db 0
   351 00000250 00000000            <1> cpuspeedperint dd 0
   352 00000254 0000000000000000    <1> cpuclocksperint dd 0,0
   353 0000025C 00000000            <1> memoryspace dd 0
   354 00000260 7D0A                <1> pitdiv dw 2685
   355 00000262 2E562200            <1> timeinterval dd 2250286
   356                              <1> ;if using the rtc, the default frequency yeilds a period of 976562.5ns
   357                              <1> ;for the pit, note that div=1 gives 838.09ns, the clock runs at 1.193182 MHz
   358                              <1> ;div=451 is 377981.0004, div=902 is 755962.0008,
   359                              <1> ;div=2685 is 2250286.00004ns, div=5370 is 4500572.00007ns
   360                              <1> ;div=55483 is 46500044.000006ns
   361                              <1> ;use one of those values for the minimum error
   362                              <1> 
   363 00000266 00                  <1> ticks db 0
   364 00000267 00000000            <1> timeseconds dd 0
   365 0000026B 00000000            <1> timenanoseconds dd 0
   366 0000026F 00                  <1> soundon db 0
   367 00000270 0000                <1> soundrepititions dw 0
   368 00000272 00000000            <1> soundpos dd 0
   369 00000276 00000000            <1> soundendpos dd 0
   370                              <1> 
   371                              <1> cpuspeedend:
   372 0000027A C605[4F020000]00    <1> 	mov byte [testingcpuspeed], 0
   373 00000281 A3[50020000]        <1> 	mov [cpuspeedperint], eax
   374 00000286 B8[DF530000]        <1> 	mov eax, cpuspeedloopend
   375 0000028B 890424              <1> 	mov [esp], eax
   376 0000028E E9DA000000          <1> 	jmp handled
   377                              <1> 
   378                              <1> pitinterrupt: ;this controls threading
   379 00000293 803D[4F020000]01    <1> 	cmp byte [testingcpuspeed], 1	;check to see if the cpu speed test is running
   380 0000029A 74DE                <1> 	je cpuspeedend
   381                              <1> 
   382 0000029C E8A6000000          <1> 	call timekeeper ;this updates the internal time
   383                              <1> 	
   384 000002A1 803D[6F020000]01    <1> 	cmp byte [soundon], 1
   385 000002A8 0F84A65B0000        <1> 	je near PCSpeakerRAW
   386                              <1> timerinterrupt:	;put this into the interrupt handler that controls threading
   387                              <1> %ifdef threads.included
   388 000002AE 803D[C86C0000]01    <1> 	cmp byte [threadson], 1
   389 000002B5 0F84AF690000        <1> 	je near threadswitch
   390                              <1> %endif
   391                              <1> keyinterrupt:		;checks for escape, if pressed, it quits the program currently running
   392 000002BB 803D[C86C0000]00    <1> 	cmp byte [threadson], 0
   393 000002C2 0F84A5000000        <1> 	je near handled
   394                              <1> %ifdef io.serial
   395                              <1> 	jmp handled
   396                              <1> %else
   397 000002C8 FE05[66020000]      <1> 	inc byte [ticks] ;every 256 ticks, check for keys
   398 000002CE 0F8599000000        <1> 	jnz near handled
   399                              <1> 	
   400 000002D4 60                  <1> 	pusha
   401 000002D5 E464                <1> 	in al, 64h
   402 000002D7 A820                <1> 	test al, 20h
   403 000002D9 0F858D000000        <1> 	jnz near handled2
   404 000002DF E460                <1> 	in al, 60h
   405 000002E1 3C01                <1> 	cmp al, 1		;escape
   406 000002E3 7405                <1> 	je userint
   407 000002E5 E982000000          <1> 	jmp handled2
   408                              <1> ;	cmp al, 0x57
   409                              <1> ;	jne near handled2
   410                              <1> ;pauseint:	;F11 pauses
   411                              <1> ;	in al, 64h
   412                              <1> ;	test al, 20h
   413                              <1> ;	jnz pauseint
   414                              <1> ;	in al, 60h
   415                              <1> ;	cmp al, 0xD7
   416                              <1> ;	jne pauseint
   417                              <1> ;	mov esi, pausemsg
   418                              <1> ;	call print
   419                              <1> ;pauselp:
   420                              <1> ;	in al, 64h
   421                              <1> ;	test al, 20h
   422                              <1> ;	jnz pauselp
   423                              <1> ;	in al, 60h
   424                              <1> ;	cmp al, 0x57
   425                              <1> ;	je near handled2
   426                              <1> ;	jmp pauselp
   427                              <1> ;pausemsg db "Paused",10,0
   428                              <1> userint:
   429 000002EA 31C0                <1> 	xor eax, eax
   430 000002EC 3905[04B40300]      <1> 	cmp [sigtable], eax
   431 000002F2 7410                <1> 	je .nosighook
   432 000002F4 8B1D[04B40300]      <1> 	mov ebx, [sigtable]
   433 000002FA 895C2420            <1> 	mov [esp + 32], ebx
   434                              <1> ;	mov [sigtable], eax
   435 000002FE B020                <1> 	mov al, 0x20
   436 00000300 E620                <1> 	out 0x20, al
   437 00000302 61                  <1> 	popa
   438 00000303 CF                  <1> 	iret
   439                              <1> .nosighook:
   440                              <1> 		;UNMASK ALL INTS
   441 00000304 E621                <1> 	out 0x21, al
   442 00000306 E6A1                <1> 	out 0xA1, al
   443 00000308 B020                <1> 	mov al, 0x20
   444 0000030A E6A0                <1> 	out 0xA0, al
   445 0000030C E620                <1> 	out 0x20, al
   446                              <1> 		;RESET PIT DIVISOR
   447 0000030E 66A1[60020000]      <1> 	mov ax, [pitdiv]
   448 00000314 E640                <1> 	out 0x40, al
   449 00000316 66C1C008            <1> 	rol ax, 8
   450 0000031A E640                <1> 	out 0x40, al
   451                              <1> 		;RESET PIC
   452 0000031C B020                <1> 	mov al, 0x20
   453 0000031E E620                <1> 	out 0x20, al
   454 00000320 61                  <1> 	popa
   455 00000321 5D                  <1> 	pop ebp
   456 00000322 5D                  <1> 	pop ebp
   457 00000323 9D                  <1> 	popf
   458 00000324 BC[00B40300]        <1> 	mov esp, stackend ;reset stack
   459 00000329 E95B290000          <1> 	jmp returnfromexp
   460                              <1> %endif
   461 0000032E 0A                  <1> rtcrate db 10
   462                              <1> rtcint:	;this runs at 64Hz which is perfect for 60Hz displays
   463                              <1> %ifdef io.serial
   464                              <1> %else
   465                              <1> %ifdef terminal.vsync
   466                              <1> 	cmp byte [termcopyneeded], 0
   467                              <1> 	je .nocopy
   468                              <1> 	call newtermcopy
   469                              <1> .nocopy
   470                              <1> 	push eax
   471                              <1> 	mov al, 0xC
   472                              <1> 	out 0x70, al
   473                              <1> 	in al, 0x71
   474                              <1> 	pop eax
   475                              <1> %endif
   476                              <1> %endif
   477 0000032F E940000000          <1> 	jmp handledboth
   478                              <1> %ifdef rtl8139.included
   479                              <1> rtl8139.irq:
   480                              <1> 	push edx
   481                              <1> 	push eax
   482                              <1> 	mov edx, [rtl8139.basenicaddr]
   483                              <1> 	add edx, rtl8139.ISR
   484                              <1> 	xor eax, eax
   485                              <1> 	in ax, dx
   486                              <1> 	out dx, ax
   487                              <1> 	pop eax
   488                              <1> 	pop edx
   489                              <1> 	jmp handledboth
   490                              <1> %endif
   491                              <1> %ifdef sound.included
   492                              <1> sblaster.irq:
   493 00000334 60                  <1> 	pusha
   494 00000335 803D[44610000]01    <1> 	cmp byte [SoundBlaster], 1
   495 0000033C 0F84FC5B0000        <1> 	je near sblaster.cont
   496 00000342 E925000000          <1> 	jmp handled2
   497                              <1> %endif
   498                              <1> 	
   499                              <1> timekeeper:
   500 00000347 50                  <1> 	push eax
   501 00000348 A1[6B020000]        <1> 	mov eax, [timenanoseconds]
   502 0000034D 0305[62020000]      <1> 	add eax, [timeinterval]
   503 00000353 3D00CA9A3B          <1> 	cmp eax, 1000000000
   504 00000358 720B                <1> 	jb nonanosecondrollover
   505 0000035A FF05[67020000]      <1> 	inc dword [timeseconds]
   506 00000360 2D00CA9A3B          <1> 	sub eax, 1000000000
   507                              <1> 	%ifdef gui.time
   508                              <1> 		;REMOVE THIS IT IS NOT EFFICIENT
   509                              <1> 		cmp byte [guion], 1
   510                              <1> 		jne nonanosecondrollover
   511                              <1> 		cmp dword [dragging], 0
   512                              <1> 		jne nonanosecondrollover
   513                              <1> 		pusha
   514                              <1> 		call guitime
   515                              <1> 		popa
   516                              <1> 	%endif
   517                              <1> nonanosecondrollover:
   518 00000365 A3[6B020000]        <1> 	mov [timenanoseconds], eax
   519 0000036A 58                  <1> 	pop eax
   520 0000036B C3                  <1> 	ret
   521                              <1> 	
   522                              <1> handled2:
   523 0000036C 61                  <1> 	popa
   524                              <1> handled:
   525 0000036D 50                  <1> 	push eax
   526 0000036E B020                <1> 	mov al, 0x20
   527 00000370 E620                <1> 	out 0x20, al
   528 00000372 58                  <1> 	pop eax
   529 00000373 CF                  <1> 	iret
   530                              <1> handledboth:
   531 00000374 50                  <1> 	push eax
   532 00000375 B020                <1> 	mov al, 0x20
   533 00000377 E6A0                <1> 	out 0xA0, al
   534 00000379 E620                <1> 	out 0x20, al
   535 0000037B 58                  <1> 	pop eax
   536 0000037C CF                  <1> 	iret
   537                              <1> 	
   538                              <1> ;	16-bit limit/32-bit linear base address of GDT and IDT
   539 0000037D 5700                <1> gdtr:	dw gdt_end - gdt - 1	; GDT limit
   540 0000037F 00000000            <1> 	dd 0    		; filled with linear, physical address of GDT
   541                              <1> 
   542 00000383 FF07                <1> idtr:	dw idt_end - idt - 1	; IDT limit
   543 00000385 00000000            <1> 	dd 0			; filled with linear, physical address of IDT
   544                              <1> 
   545                              <1> 
   546 00000389 0000                <1> gdt:	dw 0			; limit 15:0
   547 0000038B 0000                <1> 	dw 0			; base 15:0
   548 0000038D 00                  <1> 	db 0			; base 23:16
   549 0000038E 00                  <1> 	db 0			; type
   550 0000038F 00                  <1> 	db 0			; limit 19:16, flags
   551 00000390 00                  <1> 	db 0			; base 31:24
   552                              <1> ; linear data segment descriptor
   553                              <1> LINEAR_SEL	equ	$-gdt
   554 00000391 FFFF                <1> 	dw 0xFFFF		; limit 0xFFFFF
   555 00000393 0000                <1> 	dw 0			; base for this one is always 0
   556 00000395 00                  <1> 	db 0
   557 00000396 92                  <1> 	db 0x92			; present, ring 0, data, expand-up, writable
   558 00000397 CF                  <1> 	db 0xCF			; page-granular, 32-bit
   559 00000398 00                  <1> 	db 0
   560                              <1> STACK_SEL	equ $-gdt
   561 00000399 0200                <1> gdts:	dw 2;(stackend)/4096
   562 0000039B 0000                <1> 	dw 0
   563 0000039D 00                  <1> 	db 0
   564 0000039E 92                  <1> 	db 0x92
   565 0000039F CF                  <1> 	db 0xCF
   566 000003A0 00                  <1> 	db 0
   567                              <1> ; code segment descriptor
   568                              <1> SYS_CODE_SEL	equ	$-gdt
   569 000003A1 FFFF                <1> gdt2:	dw 0xFFFF
   570 000003A3 0000                <1> 	dw 0			; (base gets set above)
   571 000003A5 00                  <1> 	db 0
   572 000003A6 9A                  <1> 	db 0x9A			; present, ring 0, code, non-conforming, readable
   573 000003A7 CF                  <1> 	db 0xCF
   574 000003A8 00                  <1> 	db 0
   575                              <1> ; data segment descriptor
   576                              <1> SYS_DATA_SEL	equ	$-gdt
   577 000003A9 FFFF                <1> gdt3:	dw 0xFFFF
   578 000003AB 0000                <1> 	dw 0			; (base gets set above)
   579 000003AD 00                  <1> 	db 0
   580 000003AE 92                  <1> 	db 0x92			; present, ring 0, data, expand-up, writable
   581 000003AF CF                  <1> 	db 0xCF
   582 000003B0 00                  <1> 	db 0
   583                              <1> NEW_CODE_SEL	equ	$-gdt
   584 000003B1 FFFF                <1> gdt4:	dw 0xFFFF
   585 000003B3 0000                <1> 	dw 0			; (base gets set above)
   586 000003B5 00                  <1> 	db 0
   587 000003B6 9A                  <1> 	db 0x9A			; present, ring 0, code, non-conforming, readable
   588 000003B7 CF                  <1> 	db 0xCF
   589 000003B8 00                  <1> 	db 0
   590                              <1> ; data segment descriptor
   591                              <1> NEW_DATA_SEL	equ	$-gdt
   592 000003B9 FFFF                <1> gdt5:	dw 0xFFFF
   593 000003BB 0000                <1> 	dw 0			; (base gets set above)
   594 000003BD 00                  <1> 	db 0
   595 000003BE 92                  <1> 	db 0x92			; present, ring 0, data, expand-up, writable
   596 000003BF CF                  <1> 	db 0xCF
   597 000003C0 00                  <1> 	db 0
   598                              <1> V8086_CODE_SEL	equ $-gdt
   599 000003C1 FFFF                <1> gdtv8086: dw 0xFFFF
   600 000003C3 0000                <1> 	dw 0
   601 000003C5 00                  <1> 	db 0
   602 000003C6 9A                  <1> 	db 0x9A
   603 000003C7 8F                  <1> 	db 0x8F
   604 000003C8 00                  <1> 	db 0
   605                              <1> V8086_DATA_SEL	equ $-gdt
   606 000003C9 FFFF                <1> gdtv80862: dw 0xFFFF
   607 000003CB 0000                <1> 	dw 0
   608 000003CD 00                  <1> 	db 0
   609 000003CE 92                  <1> 	db 0x92
   610 000003CF 8F                  <1> 	db 0x8F
   611 000003D0 00                  <1> 	db 0
   612                              <1> DOS_CODE_SEL	equ $-gdt	;this gives dos programs complete access to one megabyte at the beginning of memory
   613 000003D1 0001                <1> gdtdos:	dw 256	;give it 1 MB
   614 000003D3 0000                <1> 	dw 0
   615 000003D5 00                  <1> 	db 0
   616 000003D6 9A                  <1> 	db 0x9A
   617 000003D7 8F                  <1> 	db 0x8F ;16 bit
   618 000003D8 00                  <1> 	db 0
   619                              <1> DOS_DATA_SEL 	equ $-gdt
   620 000003D9 0001                <1> gdtdos2:	dw 256
   621 000003DB 0000                <1> 	dw 0
   622 000003DD 00                  <1> 	db 0
   623 000003DE 92                  <1> 	db 0x92
   624 000003DF 8F                  <1> 	db 0x8F ;16 bit
   625 000003E0 00                  <1> 	db 0
   626                              <1> gdt_end:
   627                              <1> 
   628                              <1> ;	interrupt descriptor table (IDT)
   629                              <1> ; 32 reserved interrupts:
   630                              <1> idt:	
   631                              <1> %assign i 0
   632                              <1> %rep    8
   633                              <1> 		dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   634                              <1> %assign i i+1
   635                              <1> %endrep
   636 000003E1 [F90C]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   637                              <2> %assign i i+1
   638 000003E9 [050D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   639                              <2> %assign i i+1
   640 000003F1 [110D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   641                              <2> %assign i i+1
   642 000003F9 [1D0D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   643                              <2> %assign i i+1
   644 00000401 [290D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   645                              <2> %assign i i+1
   646 00000409 [350D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   647                              <2> %assign i i+1
   648 00000411 [410D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   649                              <2> %assign i i+1
   650 00000419 [4D0D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   651                              <2> %assign i i+1
   652 00000421 [590D]1800008E0000  <1> 		dw unhand + 8*12,SYS_CODE_SEL,0x8E00,0	;double fault handler in original memory
   653                              <1> %assign i 9
   654                              <1> %rep    23
   655                              <1> 		dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   656                              <1> %assign i i+1
   657                              <1> %endrep
   658 00000429 [650D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   659                              <2> %assign i i+1
   660 00000431 [710D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   661                              <2> %assign i i+1
   662 00000439 [7D0D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   663                              <2> %assign i i+1
   664 00000441 [890D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   665                              <2> %assign i i+1
   666 00000449 [950D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   667                              <2> %assign i i+1
   668 00000451 [A10D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   669                              <2> %assign i i+1
   670 00000459 [AD0D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   671                              <2> %assign i i+1
   672 00000461 [B90D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   673                              <2> %assign i i+1
   674 00000469 [C50D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   675                              <2> %assign i i+1
   676 00000471 [D10D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   677                              <2> %assign i i+1
   678 00000479 [DD0D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   679                              <2> %assign i i+1
   680 00000481 [E90D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   681                              <2> %assign i i+1
   682 00000489 [F50D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   683                              <2> %assign i i+1
   684 00000491 [010E]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   685                              <2> %assign i i+1
   686 00000499 [0D0E]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   687                              <2> %assign i i+1
   688 000004A1 [190E]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   689                              <2> %assign i i+1
   690 000004A9 [250E]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   691                              <2> %assign i i+1
   692 000004B1 [310E]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   693                              <2> %assign i i+1
   694 000004B9 [3D0E]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   695                              <2> %assign i i+1
   696 000004C1 [490E]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   697                              <2> %assign i i+1
   698 000004C9 [550E]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   699                              <2> %assign i i+1
   700 000004D1 [610E]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   701                              <2> %assign i i+1
   702 000004D9 [6D0E]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   703                              <2> %assign i i+1
   704 000004E1 [F729]2800008E0000  <1> 		dw int20h,NEW_CODE_SEL,0x8E00,0 ;dos ints
   705 000004E9 [FB29]2800008E0000  <1> 		dw int21h,NEW_CODE_SEL,0x8E00,0
   706                              <1> %assign i 0x22
   707                              <1> %rep 14
   708                              <1> 		dw handled,NEW_CODE_SEL,0x8E00,0
   709                              <1> %assign i +1
   710                              <1> %endrep
   711 000004F1 [6D03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   712                              <2> %assign i +1
   713 000004F9 [6D03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   714                              <2> %assign i +1
   715 00000501 [6D03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   716                              <2> %assign i +1
   717 00000509 [6D03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   718                              <2> %assign i +1
   719 00000511 [6D03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   720                              <2> %assign i +1
   721 00000519 [6D03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   722                              <2> %assign i +1
   723 00000521 [6D03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   724                              <2> %assign i +1
   725 00000529 [6D03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   726                              <2> %assign i +1
   727 00000531 [6D03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   728                              <2> %assign i +1
   729 00000539 [6D03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   730                              <2> %assign i +1
   731 00000541 [6D03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   732                              <2> %assign i +1
   733 00000549 [6D03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   734                              <2> %assign i +1
   735 00000551 [6D03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   736                              <2> %assign i +1
   737 00000559 [6D03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   738                              <2> %assign i +1
   739                              <1> ;INT 30h for os use and 3rd party use:
   740 00000561 [F81B]2800008E0000  <1> 		dw int30h,NEW_CODE_SEL,0x8E00,0
   741                              <1> %assign i 0x31
   742                              <1> %rep 15
   743                              <1> 		dw handled,NEW_CODE_SEL,0x8E00,0
   744                              <1> %assign i +1
   745                              <1> %endrep
   746 00000569 [6D03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   747                              <2> %assign i +1
   748 00000571 [6D03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   749                              <2> %assign i +1
   750 00000579 [6D03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   751                              <2> %assign i +1
   752 00000581 [6D03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   753                              <2> %assign i +1
   754 00000589 [6D03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   755                              <2> %assign i +1
   756 00000591 [6D03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   757                              <2> %assign i +1
   758 00000599 [6D03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   759                              <2> %assign i +1
   760 000005A1 [6D03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   761                              <2> %assign i +1
   762 000005A9 [6D03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   763                              <2> %assign i +1
   764 000005B1 [6D03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   765                              <2> %assign i +1
   766 000005B9 [6D03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   767                              <2> %assign i +1
   768 000005C1 [6D03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   769                              <2> %assign i +1
   770 000005C9 [6D03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   771                              <2> %assign i +1
   772 000005D1 [6D03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   773                              <2> %assign i +1
   774 000005D9 [6D03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   775                              <2> %assign i +1
   776                              <1> ;and here we are at 0x40
   777                              <1> ;here are all the irq's
   778 000005E1 [9302]2800008E0000  <1> 		dw pitinterrupt,NEW_CODE_SEL,0x8E00,0 ;IRQ 0 = PIT
   779 000005E9 [6D03]2800008E0000  <1> 		dw handled,NEW_CODE_SEL,0x8E00,0 ;IRQ 1 = keyboard
   780 000005F1 [6D03]2800008E0000  <1> 		dw handled,NEW_CODE_SEL,0x8E00,0 ;IRQ 2
   781 000005F9 [6D03]2800008E0000  <1> 		dw handled,NEW_CODE_SEL,0x8E00,0 ;IRQ 3
   782 00000601 [6D03]2800008E0000  <1> 		dw handled,NEW_CODE_SEL,0x8E00,0 ;IRQ 4
   783                              <1> 	%ifdef sound.included
   784 00000609 [3403]2800008E0000  <1> 		dw sblaster.irq,NEW_CODE_SEL,0x8E00,0 ;IRQ 5 = default SoundBlaster
   785                              <1> 	%else
   786                              <1> 		dw handled,NEW_CODE_SEL,0x8E00,0 ;IRQ 5
   787                              <1> 	%endif
   788 00000611 [6D03]2800008E0000  <1> 		dw handled,NEW_CODE_SEL,0x8E00,0 ;IRQ 6
   789 00000619 [6D03]2800008E0000  <1> 		dw handled,NEW_CODE_SEL,0x8E00,0 ;IRQ 7
   790 00000621 [2F03]2800008E0000  <1> 		dw rtcint,NEW_CODE_SEL,0x8E00,0 ;IRQ 8 = RTC
   791 00000629 [7403]2800008E0000  <1> 		dw handledboth,NEW_CODE_SEL,0x8E00,0 ;IRQ 9 = default NE2000
   792 00000631 [7403]2800008E0000  <1> 		dw handledboth,NEW_CODE_SEL,0x8E00,0 ;IRQ 10
   793                              <1> 	%ifdef rtl8139.included
   794                              <1> 		dw rtl8139.irq,NEW_CODE_SEL,0x8E00,0 ;IRQ 11 = default RTL8139
   795                              <1> 	%else
   796 00000639 [7403]2800008E0000  <1> 		dw handledboth,NEW_CODE_SEL,0x8E00,0 ;IRQ 11
   797                              <1> 	%endif
   798 00000641 [7403]2800008E0000  <1> 		dw handledboth,NEW_CODE_SEL,0x8E00,0 ;IRQ 12
   799 00000649 [7403]2800008E0000  <1> 		dw handledboth,NEW_CODE_SEL,0x8E00,0 ;IRQ 13
   800 00000651 [7403]2800008E0000  <1> 		dw handledboth,NEW_CODE_SEL,0x8E00,0 ;IRQ 14
   801 00000659 [7403]2800008E0000  <1> 		dw handledboth,NEW_CODE_SEL,0x8E00,0 ;IRQ 15
   802                              <1> ;This brings me up to 0x50
   803                              <1> %assign i 0x50
   804                              <1> %rep 176
   805                              <1> 		dw handled, NEW_CODE_SEL,0x8E00,0
   806                              <1> 		;dw unhand + i*12, NEW_CODE_SEL,0x8E00,0
   807                              <1> %assign i +1
   808                              <1> %endrep
   809 00000661 [6D03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   810                              <2> 
   811                              <2> %assign i +1
   812 00000669 [6D03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   813                              <2> 
   814                              <2> %assign i +1
   815 00000671 [6D03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   816                              <2> 
   817                              <2> %assign i +1
   818 00000679 [6D03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   819                              <2> 
   820                              <2> %assign i +1
   821 00000681 [6D03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   822                              <2> 
   823                              <2> %assign i +1
   824 00000689 [6D03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   825                              <2> 
   826                              <2> %assign i +1
   827 00000691 [6D03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   828                              <2> 
   829                              <2> %assign i +1
   830 00000699 [6D03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   831                              <2> 
   832                              <2> %assign i +1
   833 000006A1 [6D03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   834                              <2> 
   835                              <2> %assign i +1
   836 000006A9 [6D03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   837                              <2> 
   838                              <2> %assign i +1
   839 000006B1 [6D03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   840                              <2> 
   841                              <2> %assign i +1
   842 000006B9 [6D03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   843                              <2> 
   844                              <2> %assign i +1
   845 000006C1 [6D03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   846                              <2> 
   847                              <2> %assign i +1
   848 000006C9 [6D03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   849                              <2> 
   850                              <2> %assign i +1
   851 000006D1 [6D03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   852                              <2> 
   853                              <2> %assign i +1
   854 000006D9 [6D03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   855                              <2> 
   856                              <2> %assign i +1
   857 000006E1 [6D03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   858                              <2> 
   859                              <2> %assign i +1
   860 000006E9 [6D03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   861                              <2> 
   862                              <2> %assign i +1
   863 000006F1 [6D03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   864                              <2> 
   865                              <2> %assign i +1
   866 000006F9 [6D03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   867                              <2> 
   868                              <2> %assign i +1
   869 00000701 [6D03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   870                              <2> 
   871                              <2> %assign i +1
   872 00000709 [6D03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   873                              <2> 
   874                              <2> %assign i +1
   875 00000711 [6D03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   876                              <2> 
   877                              <2> %assign i +1
   878 00000719 [6D03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   879                              <2> 
   880                              <2> %assign i +1
   881 00000721 [6D03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   882                              <2> 
   883                              <2> %assign i +1
   884 00000729 [6D03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   885                              <2> 
   886                              <2> %assign i +1
   887 00000731 [6D03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   888                              <2> 
   889                              <2> %assign i +1
   890 00000739 [6D03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   891                              <2> 
   892                              <2> %assign i +1
   893 00000741 [6D03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   894                              <2> 
   895                              <2> %assign i +1
   896 00000749 [6D03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   897                              <2> 
   898                              <2> %assign i +1
   899 00000751 [6D03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   900                              <2> 
   901                              <2> %assign i +1
   902 00000759 [6D03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   903                              <2> 
   904                              <2> %assign i +1
   905 00000761 [6D03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   906                              <2> 
   907                              <2> %assign i +1
   908 00000769 [6D03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   909                              <2> 
   910                              <2> %assign i +1
   911 00000771 [6D03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   912                              <2> 
   913                              <2> %assign i +1
   914 00000779 [6D03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   915                              <2> 
   916                              <2> %assign i +1
   917 00000781 [6D03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   918                              <2> 
   919                              <2> %assign i +1
   920 00000789 [6D03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   921                              <2> 
   922                              <2> %assign i +1
   923 00000791 [6D03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   924                              <2> 
   925                              <2> %assign i +1
   926 00000799 [6D03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   927                              <2> 
   928                              <2> %assign i +1
   929 000007A1 [6D03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   930                              <2> 
   931                              <2> %assign i +1
   932 000007A9 [6D03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   933                              <2> 
   934                              <2> %assign i +1
   935 000007B1 [6D03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   936                              <2> 
   937                              <2> %assign i +1
   938 000007B9 [6D03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   939                              <2> 
   940                              <2> %assign i +1
   941 000007C1 [6D03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   942                              <2> 
   943                              <2> %assign i +1
   944 000007C9 [6D03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   945                              <2> 
   946                              <2> %assign i +1
   947 000007D1 [6D03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   948                              <2> 
   949                              <2> %assign i +1
   950 000007D9 [6D03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   951                              <2> 
   952                              <2> %assign i +1
   953 000007E1 [6D03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   954                              <2> 
   955                              <2> %assign i +1
   956 000007E9 [6D03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   957                              <2> 
   958                              <2> %assign i +1
   959 000007F1 [6D03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   960                              <2> 
   961                              <2> %assign i +1
   962 000007F9 [6D03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   963                              <2> 
   964                              <2> %assign i +1
   965 00000801 [6D03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   966                              <2> 
   967                              <2> %assign i +1
   968 00000809 [6D03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   969                              <2> 
   970                              <2> %assign i +1
   971 00000811 [6D03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   972                              <2> 
   973                              <2> %assign i +1
   974 00000819 [6D03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   975                              <2> 
   976                              <2> %assign i +1
   977 00000821 [6D03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   978                              <2> 
   979                              <2> %assign i +1
   980 00000829 [6D03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   981                              <2> 
   982                              <2> %assign i +1
   983 00000831 [6D03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   984                              <2> 
   985                              <2> %assign i +1
   986 00000839 [6D03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   987                              <2> 
   988                              <2> %assign i +1
   989 00000841 [6D03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   990                              <2> 
   991                              <2> %assign i +1
   992 00000849 [6D03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   993                              <2> 
   994                              <2> %assign i +1
   995 00000851 [6D03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   996                              <2> 
   997                              <2> %assign i +1
   998 00000859 [6D03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   999                              <2> 
  1000                              <2> %assign i +1
  1001 00000861 [6D03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1002                              <2> 
  1003                              <2> %assign i +1
  1004 00000869 [6D03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1005                              <2> 
  1006                              <2> %assign i +1
  1007 00000871 [6D03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1008                              <2> 
  1009                              <2> %assign i +1
  1010 00000879 [6D03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1011                              <2> 
  1012                              <2> %assign i +1
  1013 00000881 [6D03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1014                              <2> 
  1015                              <2> %assign i +1
  1016 00000889 [6D03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1017                              <2> 
  1018                              <2> %assign i +1
  1019 00000891 [6D03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1020                              <2> 
  1021                              <2> %assign i +1
  1022 00000899 [6D03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1023                              <2> 
  1024                              <2> %assign i +1
  1025 000008A1 [6D03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1026                              <2> 
  1027                              <2> %assign i +1
  1028 000008A9 [6D03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1029                              <2> 
  1030                              <2> %assign i +1
  1031 000008B1 [6D03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1032                              <2> 
  1033                              <2> %assign i +1
  1034 000008B9 [6D03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1035                              <2> 
  1036                              <2> %assign i +1
  1037 000008C1 [6D03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1038                              <2> 
  1039                              <2> %assign i +1
  1040 000008C9 [6D03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1041                              <2> 
  1042                              <2> %assign i +1
  1043 000008D1 [6D03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1044                              <2> 
  1045                              <2> %assign i +1
  1046 000008D9 [6D03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1047                              <2> 
  1048                              <2> %assign i +1
  1049 000008E1 [6D03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1050                              <2> 
  1051                              <2> %assign i +1
  1052 000008E9 [6D03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1053                              <2> 
  1054                              <2> %assign i +1
  1055 000008F1 [6D03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1056                              <2> 
  1057                              <2> %assign i +1
  1058 000008F9 [6D03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1059                              <2> 
  1060                              <2> %assign i +1
  1061 00000901 [6D03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1062                              <2> 
  1063                              <2> %assign i +1
  1064 00000909 [6D03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1065                              <2> 
  1066                              <2> %assign i +1
  1067 00000911 [6D03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1068                              <2> 
  1069                              <2> %assign i +1
  1070 00000919 [6D03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1071                              <2> 
  1072                              <2> %assign i +1
  1073 00000921 [6D03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1074                              <2> 
  1075                              <2> %assign i +1
  1076 00000929 [6D03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1077                              <2> 
  1078                              <2> %assign i +1
  1079 00000931 [6D03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1080                              <2> 
  1081                              <2> %assign i +1
  1082 00000939 [6D03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1083                              <2> 
  1084                              <2> %assign i +1
  1085 00000941 [6D03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1086                              <2> 
  1087                              <2> %assign i +1
  1088 00000949 [6D03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1089                              <2> 
  1090                              <2> %assign i +1
  1091 00000951 [6D03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1092                              <2> 
  1093                              <2> %assign i +1
  1094 00000959 [6D03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1095                              <2> 
  1096                              <2> %assign i +1
  1097 00000961 [6D03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1098                              <2> 
  1099                              <2> %assign i +1
  1100 00000969 [6D03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1101                              <2> 
  1102                              <2> %assign i +1
  1103 00000971 [6D03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1104                              <2> 
  1105                              <2> %assign i +1
  1106 00000979 [6D03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1107                              <2> 
  1108                              <2> %assign i +1
  1109 00000981 [6D03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1110                              <2> 
  1111                              <2> %assign i +1
  1112 00000989 [6D03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1113                              <2> 
  1114                              <2> %assign i +1
  1115 00000991 [6D03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1116                              <2> 
  1117                              <2> %assign i +1
  1118 00000999 [6D03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1119                              <2> 
  1120                              <2> %assign i +1
  1121 000009A1 [6D03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1122                              <2> 
  1123                              <2> %assign i +1
  1124 000009A9 [6D03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1125                              <2> 
  1126                              <2> %assign i +1
  1127 000009B1 [6D03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1128                              <2> 
  1129                              <2> %assign i +1
  1130 000009B9 [6D03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1131                              <2> 
  1132                              <2> %assign i +1
  1133 000009C1 [6D03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1134                              <2> 
  1135                              <2> %assign i +1
  1136 000009C9 [6D03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1137                              <2> 
  1138                              <2> %assign i +1
  1139 000009D1 [6D03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1140                              <2> 
  1141                              <2> %assign i +1
  1142 000009D9 [6D03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1143                              <2> 
  1144                              <2> %assign i +1
  1145 000009E1 [6D03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1146                              <2> 
  1147                              <2> %assign i +1
  1148 000009E9 [6D03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1149                              <2> 
  1150                              <2> %assign i +1
  1151 000009F1 [6D03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1152                              <2> 
  1153                              <2> %assign i +1
  1154 000009F9 [6D03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1155                              <2> 
  1156                              <2> %assign i +1
  1157 00000A01 [6D03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1158                              <2> 
  1159                              <2> %assign i +1
  1160 00000A09 [6D03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1161                              <2> 
  1162                              <2> %assign i +1
  1163 00000A11 [6D03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1164                              <2> 
  1165                              <2> %assign i +1
  1166 00000A19 [6D03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1167                              <2> 
  1168                              <2> %assign i +1
  1169 00000A21 [6D03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1170                              <2> 
  1171                              <2> %assign i +1
  1172 00000A29 [6D03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1173                              <2> 
  1174                              <2> %assign i +1
  1175 00000A31 [6D03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1176                              <2> 
  1177                              <2> %assign i +1
  1178 00000A39 [6D03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1179                              <2> 
  1180                              <2> %assign i +1
  1181 00000A41 [6D03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1182                              <2> 
  1183                              <2> %assign i +1
  1184 00000A49 [6D03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1185                              <2> 
  1186                              <2> %assign i +1
  1187 00000A51 [6D03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1188                              <2> 
  1189                              <2> %assign i +1
  1190 00000A59 [6D03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1191                              <2> 
  1192                              <2> %assign i +1
  1193 00000A61 [6D03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1194                              <2> 
  1195                              <2> %assign i +1
  1196 00000A69 [6D03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1197                              <2> 
  1198                              <2> %assign i +1
  1199 00000A71 [6D03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1200                              <2> 
  1201                              <2> %assign i +1
  1202 00000A79 [6D03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1203                              <2> 
  1204                              <2> %assign i +1
  1205 00000A81 [6D03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1206                              <2> 
  1207                              <2> %assign i +1
  1208 00000A89 [6D03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1209                              <2> 
  1210                              <2> %assign i +1
  1211 00000A91 [6D03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1212                              <2> 
  1213                              <2> %assign i +1
  1214 00000A99 [6D03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1215                              <2> 
  1216                              <2> %assign i +1
  1217 00000AA1 [6D03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1218                              <2> 
  1219                              <2> %assign i +1
  1220 00000AA9 [6D03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1221                              <2> 
  1222                              <2> %assign i +1
  1223 00000AB1 [6D03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1224                              <2> 
  1225                              <2> %assign i +1
  1226 00000AB9 [6D03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1227                              <2> 
  1228                              <2> %assign i +1
  1229 00000AC1 [6D03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1230                              <2> 
  1231                              <2> %assign i +1
  1232 00000AC9 [6D03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1233                              <2> 
  1234                              <2> %assign i +1
  1235 00000AD1 [6D03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1236                              <2> 
  1237                              <2> %assign i +1
  1238 00000AD9 [6D03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1239                              <2> 
  1240                              <2> %assign i +1
  1241 00000AE1 [6D03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1242                              <2> 
  1243                              <2> %assign i +1
  1244 00000AE9 [6D03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1245                              <2> 
  1246                              <2> %assign i +1
  1247 00000AF1 [6D03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1248                              <2> 
  1249                              <2> %assign i +1
  1250 00000AF9 [6D03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1251                              <2> 
  1252                              <2> %assign i +1
  1253 00000B01 [6D03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1254                              <2> 
  1255                              <2> %assign i +1
  1256 00000B09 [6D03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1257                              <2> 
  1258                              <2> %assign i +1
  1259 00000B11 [6D03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1260                              <2> 
  1261                              <2> %assign i +1
  1262 00000B19 [6D03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1263                              <2> 
  1264                              <2> %assign i +1
  1265 00000B21 [6D03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1266                              <2> 
  1267                              <2> %assign i +1
  1268 00000B29 [6D03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1269                              <2> 
  1270                              <2> %assign i +1
  1271 00000B31 [6D03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1272                              <2> 
  1273                              <2> %assign i +1
  1274 00000B39 [6D03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1275                              <2> 
  1276                              <2> %assign i +1
  1277 00000B41 [6D03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1278                              <2> 
  1279                              <2> %assign i +1
  1280 00000B49 [6D03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1281                              <2> 
  1282                              <2> %assign i +1
  1283 00000B51 [6D03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1284                              <2> 
  1285                              <2> %assign i +1
  1286 00000B59 [6D03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1287                              <2> 
  1288                              <2> %assign i +1
  1289 00000B61 [6D03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1290                              <2> 
  1291                              <2> %assign i +1
  1292 00000B69 [6D03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1293                              <2> 
  1294                              <2> %assign i +1
  1295 00000B71 [6D03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1296                              <2> 
  1297                              <2> %assign i +1
  1298 00000B79 [6D03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1299                              <2> 
  1300                              <2> %assign i +1
  1301 00000B81 [6D03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1302                              <2> 
  1303                              <2> %assign i +1
  1304 00000B89 [6D03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1305                              <2> 
  1306                              <2> %assign i +1
  1307 00000B91 [6D03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1308                              <2> 
  1309                              <2> %assign i +1
  1310 00000B99 [6D03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1311                              <2> 
  1312                              <2> %assign i +1
  1313 00000BA1 [6D03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1314                              <2> 
  1315                              <2> %assign i +1
  1316 00000BA9 [6D03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1317                              <2> 
  1318                              <2> %assign i +1
  1319 00000BB1 [6D03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1320                              <2> 
  1321                              <2> %assign i +1
  1322 00000BB9 [6D03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1323                              <2> 
  1324                              <2> %assign i +1
  1325 00000BC1 [6D03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1326                              <2> 
  1327                              <2> %assign i +1
  1328 00000BC9 [6D03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1329                              <2> 
  1330                              <2> %assign i +1
  1331 00000BD1 [6D03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1332                              <2> 
  1333                              <2> %assign i +1
  1334 00000BD9 [6D03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1335                              <2> 
  1336                              <2> %assign i +1
  1337                              <1> idt_end:
  1338                                  	%include "source/realmode.asm"
  1339                              <1> realmode:	;make sure the real mode program's address is in realmodeptr
  1340                              <1> 
  1341 00000BE1 FA                  <1> 	cli
  1342 00000BE2 A3[EF0C0000]        <1> 	mov [realmodeeax], eax
  1343 00000BE7 891D[EB0C0000]      <1> 	mov [realmodeebx], ebx
  1344 00000BED 8925[DD0C0000]      <1> 	mov [pmodeesp], esp
  1345                              <1> 
  1346 00000BF3 BB[E70C0000]        <1> 	mov ebx, cr0old
  1347                              <1> rmcopytofirstmbyte:
  1348 00000BF8 8B03                <1> 	mov eax, [ebx]
  1349 00000BFA 658903              <1> 	mov [gs:ebx], eax
  1350 00000BFD 81C304000000        <1> 	add ebx, 4
  1351 00000C03 81FB[F30C0000]      <1> 	cmp ebx, realmodeptr
  1352 00000C09 76ED                <1> 	jbe rmcopytofirstmbyte
  1353                              <1> 
  1354 00000C0B EA[120C0000]3800    <1> 	jmp V8086_CODE_SEL:protected16bit
  1355                              <1> 
  1356                              <1> [BITS 16]
  1357                              <1> protected16bit:
  1358 00000C12 B84000              <1> 	mov ax, V8086_DATA_SEL
  1359 00000C15 8ED8                <1> 	mov ds, ax
  1360 00000C17 8EC0                <1> 	mov es, ax
  1361 00000C19 8EE0                <1> 	mov fs, ax
  1362 00000C1B 8EE8                <1> 	mov gs, ax
  1363 00000C1D 8ED0                <1> 	mov ss, ax
  1364 00000C1F 66BC[00B40300]      <1> 	mov esp, stackend
  1365 00000C25 0F20C0              <1> 	mov eax, cr0
  1366 00000C28 66A3[E70C]          <1> 	mov [cr0old], eax
  1367 00000C2C 6625FEFFFF7F        <1> 	and eax, 0x7FFFFFFE
  1368 00000C32 0F22C0              <1> 	mov cr0, eax	;now in real mode
  1369 00000C35 EA[3A0C]0010        <1> 	jmp 0x1000:inrealmode
  1370                              <1> 
  1371                              <1> inrealmode:
  1372 00000C3A 8CC8                <1> 	mov ax, cs
  1373 00000C3C 8ED8                <1> 	mov ds, ax
  1374 00000C3E 8EC0                <1> 	mov es, ax
  1375 00000C40 8EE0                <1> 	mov fs, ax
  1376 00000C42 8EE8                <1> 	mov gs, ax
  1377 00000C44 8ED0                <1> 	mov ss, ax
  1378 00000C46 BC[00B4]            <1> 	mov sp, stackend ;because this is at 0x1000: and not 0x10000: it works
  1379                              <1> 	
  1380 00000C49 B011                <1> 	mov al, 0x11
  1381 00000C4B E620                <1> 	out 0x20, al
  1382 00000C4D E6A0                <1> 	out 0xA0, al
  1383 00000C4F B008                <1> 	mov al, 0x8		;interrupt for master
  1384 00000C51 E621                <1> 	out 0x21, al
  1385 00000C53 B070                <1> 	mov al, 0x70	;interrupt for slave
  1386 00000C55 E6A1                <1> 	out 0xA1, al
  1387 00000C57 B004                <1> 	mov al, 4
  1388 00000C59 E621                <1> 	out 0x21, al
  1389 00000C5B B002                <1> 	mov al, 2
  1390 00000C5D E6A1                <1> 	out 0xA1, al
  1391 00000C5F B001                <1> 	mov al, 0x1
  1392 00000C61 E621                <1> 	out 0x21, al
  1393 00000C63 B001                <1> 	mov al, 0x1
  1394 00000C65 E6A1                <1> 	out 0xA1, al
  1395                              <1> 	
  1396 00000C67 0F011E[E10C]        <1> 	lidt [idt_real]
  1397 00000C6C FB                  <1> 	sti
  1398                              <1> 
  1399 00000C6D 66A1[EF0C]          <1> 	mov eax, [realmodeeax]
  1400 00000C71 668B1E[EB0C]        <1> 	mov ebx, [realmodeebx]
  1401                              <1> 
  1402 00000C76 FF16[F30C]          <1> 	call word [realmodeptr] ;call the real mode program here
  1403                              <1> 
  1404 00000C7A 66A3[EF0C]          <1> 	mov [realmodeeax], eax
  1405 00000C7E 66891E[EB0C]        <1> 	mov [realmodeebx], ebx
  1406                              <1> 
  1407 00000C83 FA                  <1> 	cli
  1408 00000C84 0F0116[7D03]        <1> 	lgdt [gdtr]
  1409 00000C89 0F011E[8303]        <1> 	lidt [idtr]
  1410 00000C8E 0F20C0              <1> 	mov eax, cr0
  1411 00000C91 0C01                <1> 	or al, 1
  1412 00000C93 0F22C0              <1> 	mov cr0,eax
  1413 00000C96 EA[9B0C]2800        <1> 	jmp NEW_CODE_SEL:returntopmode
  1414                              <1> 
  1415                              <1> [BITS 32]
  1416                              <1> returntopmode:
  1417 00000C9B 66B83000            <1> 	mov ax, NEW_DATA_SEL
  1418 00000C9F 8ED8                <1> 	mov ds, ax
  1419 00000CA1 8EC0                <1> 	mov es, ax
  1420 00000CA3 8EE0                <1> 	mov fs, ax
  1421 00000CA5 8ED0                <1> 	mov ss, ax
  1422 00000CA7 8B25[DD0C0000]      <1> 	mov esp, [pmodeesp]
  1423 00000CAD 66B82000            <1> 	mov ax, SYS_DATA_SEL
  1424 00000CB1 8EE8                <1> 	mov gs, ax
  1425                              <1> 
  1426 00000CB3 BB[E70C0000]        <1> 	mov ebx, cr0old
  1427                              <1> rmcopyfromfirstmbyte:
  1428 00000CB8 658B03              <1> 	mov eax, [gs:ebx]
  1429 00000CBB 8903                <1> 	mov [ebx], eax
  1430 00000CBD 81C304000000        <1> 	add ebx, 4
  1431 00000CC3 81FB[F30C0000]      <1> 	cmp ebx, realmodeptr
  1432 00000CC9 76ED                <1> 	jbe rmcopyfromfirstmbyte
  1433                              <1> 
  1434 00000CCB E8365A0000          <1> 	call initialize.pic ;reset irq's and masks
  1435 00000CD0 FB                  <1> 	sti
  1436 00000CD1 A1[EF0C0000]        <1> 	mov eax, [realmodeeax]
  1437 00000CD6 8B1D[EB0C0000]      <1> 	mov ebx, [realmodeebx]
  1438 00000CDC C3                  <1> 	ret
  1439                              <1> 	
  1440 00000CDD 00000000            <1> pmodeesp dd 0
  1441                              <1> idt_real:
  1442 00000CE1 FF03                <1> 	dw 0x3FF
  1443 00000CE3 00000000            <1> 	dd 0
  1444 00000CE7 00000000            <1> cr0old dd 0
  1445 00000CEB 00000000            <1> realmodeebx dd 0
  1446 00000CEF 00000000            <1> realmodeeax dd 0
  1447 00000CF3 0000                <1> realmodeptr dw 0
  1448 00000CF5 00000000            <1> dd 0 ;make sure the copy thing doesnt overflow
  1449                                  [BITS 32]
  1450                                      %include "source/exception.asm"
  1451                              <1> %ifdef exceptions.included
  1452                              <1> unhand:	
  1453                              <1> 	%assign i 0
  1454                              <1> 	%rep 32
  1455                              <1> 	mov byte [intprob], i
  1456                              <1> 	jmp unhand2
  1457                              <1> 	%assign i i+1
  1458                              <1> 	%endrep
  1459 00000CF9 C605[B1110000]00    <2>  mov byte [intprob], i
  1460 00000D00 E974010000          <2>  jmp unhand2
  1461                              <2>  %assign i i+1
  1462 00000D05 C605[B1110000]01    <2>  mov byte [intprob], i
  1463 00000D0C E968010000          <2>  jmp unhand2
  1464                              <2>  %assign i i+1
  1465 00000D11 C605[B1110000]02    <2>  mov byte [intprob], i
  1466 00000D18 E95C010000          <2>  jmp unhand2
  1467                              <2>  %assign i i+1
  1468 00000D1D C605[B1110000]03    <2>  mov byte [intprob], i
  1469 00000D24 E950010000          <2>  jmp unhand2
  1470                              <2>  %assign i i+1
  1471 00000D29 C605[B1110000]04    <2>  mov byte [intprob], i
  1472 00000D30 E944010000          <2>  jmp unhand2
  1473                              <2>  %assign i i+1
  1474 00000D35 C605[B1110000]05    <2>  mov byte [intprob], i
  1475 00000D3C E938010000          <2>  jmp unhand2
  1476                              <2>  %assign i i+1
  1477 00000D41 C605[B1110000]06    <2>  mov byte [intprob], i
  1478 00000D48 E92C010000          <2>  jmp unhand2
  1479                              <2>  %assign i i+1
  1480 00000D4D C605[B1110000]07    <2>  mov byte [intprob], i
  1481 00000D54 E920010000          <2>  jmp unhand2
  1482                              <2>  %assign i i+1
  1483 00000D59 C605[B1110000]08    <2>  mov byte [intprob], i
  1484 00000D60 E914010000          <2>  jmp unhand2
  1485                              <2>  %assign i i+1
  1486 00000D65 C605[B1110000]09    <2>  mov byte [intprob], i
  1487 00000D6C E908010000          <2>  jmp unhand2
  1488                              <2>  %assign i i+1
  1489 00000D71 C605[B1110000]0A    <2>  mov byte [intprob], i
  1490 00000D78 E9FC000000          <2>  jmp unhand2
  1491                              <2>  %assign i i+1
  1492 00000D7D C605[B1110000]0B    <2>  mov byte [intprob], i
  1493 00000D84 E9F0000000          <2>  jmp unhand2
  1494                              <2>  %assign i i+1
  1495 00000D89 C605[B1110000]0C    <2>  mov byte [intprob], i
  1496 00000D90 E9E4000000          <2>  jmp unhand2
  1497                              <2>  %assign i i+1
  1498 00000D95 C605[B1110000]0D    <2>  mov byte [intprob], i
  1499 00000D9C E9D8000000          <2>  jmp unhand2
  1500                              <2>  %assign i i+1
  1501 00000DA1 C605[B1110000]0E    <2>  mov byte [intprob], i
  1502 00000DA8 E9CC000000          <2>  jmp unhand2
  1503                              <2>  %assign i i+1
  1504 00000DAD C605[B1110000]0F    <2>  mov byte [intprob], i
  1505 00000DB4 E9C0000000          <2>  jmp unhand2
  1506                              <2>  %assign i i+1
  1507 00000DB9 C605[B1110000]10    <2>  mov byte [intprob], i
  1508 00000DC0 E9B4000000          <2>  jmp unhand2
  1509                              <2>  %assign i i+1
  1510 00000DC5 C605[B1110000]11    <2>  mov byte [intprob], i
  1511 00000DCC E9A8000000          <2>  jmp unhand2
  1512                              <2>  %assign i i+1
  1513 00000DD1 C605[B1110000]12    <2>  mov byte [intprob], i
  1514 00000DD8 E99C000000          <2>  jmp unhand2
  1515                              <2>  %assign i i+1
  1516 00000DDD C605[B1110000]13    <2>  mov byte [intprob], i
  1517 00000DE4 E990000000          <2>  jmp unhand2
  1518                              <2>  %assign i i+1
  1519 00000DE9 C605[B1110000]14    <2>  mov byte [intprob], i
  1520 00000DF0 E984000000          <2>  jmp unhand2
  1521                              <2>  %assign i i+1
  1522 00000DF5 C605[B1110000]15    <2>  mov byte [intprob], i
  1523 00000DFC E978000000          <2>  jmp unhand2
  1524                              <2>  %assign i i+1
  1525 00000E01 C605[B1110000]16    <2>  mov byte [intprob], i
  1526 00000E08 E96C000000          <2>  jmp unhand2
  1527                              <2>  %assign i i+1
  1528 00000E0D C605[B1110000]17    <2>  mov byte [intprob], i
  1529 00000E14 E960000000          <2>  jmp unhand2
  1530                              <2>  %assign i i+1
  1531 00000E19 C605[B1110000]18    <2>  mov byte [intprob], i
  1532 00000E20 E954000000          <2>  jmp unhand2
  1533                              <2>  %assign i i+1
  1534 00000E25 C605[B1110000]19    <2>  mov byte [intprob], i
  1535 00000E2C E948000000          <2>  jmp unhand2
  1536                              <2>  %assign i i+1
  1537 00000E31 C605[B1110000]1A    <2>  mov byte [intprob], i
  1538 00000E38 E93C000000          <2>  jmp unhand2
  1539                              <2>  %assign i i+1
  1540 00000E3D C605[B1110000]1B    <2>  mov byte [intprob], i
  1541 00000E44 E930000000          <2>  jmp unhand2
  1542                              <2>  %assign i i+1
  1543 00000E49 C605[B1110000]1C    <2>  mov byte [intprob], i
  1544 00000E50 E924000000          <2>  jmp unhand2
  1545                              <2>  %assign i i+1
  1546 00000E55 C605[B1110000]1D    <2>  mov byte [intprob], i
  1547 00000E5C E918000000          <2>  jmp unhand2
  1548                              <2>  %assign i i+1
  1549 00000E61 C605[B1110000]1E    <2>  mov byte [intprob], i
  1550 00000E68 E90C000000          <2>  jmp unhand2
  1551                              <2>  %assign i i+1
  1552 00000E6D C605[B1110000]1F    <2>  mov byte [intprob], i
  1553 00000E74 E900000000          <2>  jmp unhand2
  1554                              <2>  %assign i i+1
  1555                              <1> unhand2:
  1556 00000E79 FA                  <1> 	cli
  1557 00000E7A 1E                  <1> 	push ds
  1558 00000E7B 06                  <1> 	push es
  1559 00000E7C 0FA0                <1> 	push fs
  1560 00000E7E 0FA8                <1> 	push gs
  1561 00000E80 16                  <1> 	push ss
  1562 00000E81 60                  <1> 	pushad
  1563                              <1> %ifdef gui.included
  1564 00000E82 803D[EF8E0000]00    <1> 	cmp byte [guion], 0
  1565 00000E89 0F8432000000        <1> 	je near noguiunhandstuff
  1566 00000E8F 66C705[AB110000]08- <1> 	mov word [locunhandy], 8
  1567 00000E97 00                  <1>
  1568 00000E98 66C705[AD110000]08- <1> 	mov word [locunhandx], 8
  1569 00000EA0 00                  <1>
  1570 00000EA1 668B1D[AE730000]    <1> 	mov bx, [background]
  1571 00000EA8 66891D[AF110000]    <1> 	mov [backgroundcache], bx
  1572 00000EAF C605[4C5B0000]01    <1> 	mov byte [mousedisabled],1
  1573 00000EB6 66BB00F8            <1> 	mov bx, 1111100000000000b
  1574 00000EBA 66891D[AE730000]    <1> 	mov [background], bx
  1575                              <1> noguiunhandstuff:
  1576                              <1> %endif
  1577 00000EC1 89E6                <1> 	mov esi, esp
  1578 00000EC3 8935[9F110000]      <1> 	mov [espfirst], esi
  1579 00000EC9 81C6BC000000        <1> 	add esi, ((unhndrgend - unhndrg)/15)*4
  1580 00000ECF 8935[9B110000]      <1> 	mov [esploc], esi
  1581 00000ED5 BE[C0110000]        <1> 	mov esi, unhandmsg
  1582 00000EDA 8935[A3110000]      <1> 	mov [esiloc], esi
  1583 00000EE0 31C9                <1> 	xor ecx, ecx
  1584 00000EE2 8A0D[B1110000]      <1> 	mov cl, [intprob]
  1585 00000EE8 BB[8F150000]        <1> 	mov ebx, errortypes
  1586 00000EED C1E102              <1> 	shl ecx, 2
  1587 00000EF0 01CB                <1> 	add ebx, ecx
  1588 00000EF2 81FB[CF150000]      <1> 	cmp ebx, errortypesend
  1589 00000EF8 7205                <1> 	jb gooderrortype
  1590 00000EFA BB[CF150000]        <1> 	mov ebx, errortypesend
  1591                              <1> gooderrortype:
  1592 00000EFF 8B33                <1> 	mov esi, [ebx]
  1593                              <1> %ifdef gui.included
  1594 00000F01 803D[EF8E0000]00    <1> 	cmp byte [guion], 0
  1595 00000F08 0F842D000000        <1> 	je near errortext
  1596 00000F0E 668B0D[AB110000]    <1> 	mov cx, [locunhandy]
  1597 00000F15 668B15[AD110000]    <1> 	mov dx, [locunhandx]
  1598 00000F1C 66B80100            <1> 	mov ax, 1
  1599 00000F20 6631DB              <1> 	xor bx, bx
  1600 00000F23 E8DB6A0000          <1> 	call showstring2
  1601 00000F28 66890D[AB110000]    <1> 	mov [locunhandy], cx
  1602 00000F2F 668915[AD110000]    <1> 	mov [locunhandx], dx
  1603 00000F36 E905000000          <1> 	jmp errortextdone
  1604                              <1> %endif
  1605                              <1> errortext:
  1606 00000F3B E81C0E0000          <1> 	call print		;get the error message and print it
  1607                              <1> errortextdone:
  1608 00000F40 31C9                <1> 	xor ecx, ecx
  1609 00000F42 8A0D[B1110000]      <1> 	mov cl, [intprob]
  1610 00000F48 E8E7010000          <1> 	call expdump
  1611                              <1> dumpstack:
  1612 00000F4D 8B35[9B110000]      <1> 	mov esi, [esploc]
  1613 00000F53 39E6                <1> 	cmp esi, esp
  1614 00000F55 7216                <1> 	jb donedump
  1615 00000F57 368B0E              <1> 	mov ecx, [ss:esi]
  1616 00000F5A 81EE04000000        <1> 	sub esi, 4
  1617 00000F60 8935[9B110000]      <1> 	mov [esploc], esi
  1618 00000F66 E8C9010000          <1> 	call expdump
  1619 00000F6B EBE0                <1> 	jmp dumpstack
  1620                              <1> donedump:
  1621 00000F6D 0F20C1              <1> 	mov ecx, cr0
  1622 00000F70 E8BF010000          <1> 	call expdump
  1623 00000F75 0F20D1              <1> 	mov ecx, cr2
  1624 00000F78 E8B7010000          <1> 	call expdump
  1625 00000F7D 0F20D9              <1> 	mov ecx, cr3
  1626 00000F80 E8AF010000          <1> 	call expdump
  1627 00000F85 0F20E1              <1> 	mov ecx, cr4
  1628 00000F88 E8A7010000          <1> 	call expdump
  1629 00000F8D 0F00C9              <1> 	str ecx
  1630 00000F90 E89F010000          <1> 	call expdump
  1631 00000F95 0F010D[BA110000]    <1> 	sidt [igdtcache]
  1632 00000F9C 8B0D[BC110000]      <1> 	mov ecx, [igdtcache + 2]
  1633 00000FA2 E88D010000          <1> 	call expdump
  1634 00000FA7 0F0105[BA110000]    <1> 	sgdt [igdtcache]
  1635 00000FAE 8B0D[BC110000]      <1> 	mov ecx, [igdtcache + 2]
  1636 00000FB4 E87B010000          <1> 	call expdump
  1637 00000FB9 0F00C1              <1> 	sldt ecx
  1638 00000FBC E873010000          <1> 	call expdump
  1639 00000FC1 8B35[9B110000]      <1> 	mov esi, [esploc]
  1640 00000FC7 368B7C2434          <1> 	mov edi, [ss:esp + 52]
  1641 00000FCC 81C710000000        <1> 	add edi, 16
  1642 00000FD2 893D[B6110000]      <1> 	mov [codelocend], edi
  1643 00000FD8 81EF20000000        <1> 	sub edi, 32
  1644                              <1> dumpcodeloop:
  1645 00000FDE 893D[B2110000]      <1> 	mov [codeloc], edi
  1646 00000FE4 8B0F                <1> 	mov ecx, [edi]
  1647 00000FE6 E849010000          <1> 	call expdump
  1648 00000FEB 8B3D[B2110000]      <1> 	mov edi, [codeloc]
  1649 00000FF1 81C704000000        <1> 	add edi, 4
  1650 00000FF7 3B3D[B6110000]      <1> 	cmp edi, [codelocend]
  1651 00000FFD 72DF                <1> 	jb dumpcodeloop
  1652 00000FFF BE[C5100000]        <1> 	mov esi, backtoosmsg
  1653                              <1> %ifdef gui.included
  1654 00001004 803D[EF8E0000]00    <1> 	cmp byte [guion], 0
  1655 0000100B 741F                <1> 	je backtomsg
  1656                              <1> guibacktomsg:
  1657 0000100D 668B15[AD110000]    <1> 	mov dx, [locunhandx]
  1658 00001014 668B0D[AB110000]    <1> 	mov cx, [locunhandy]
  1659 0000101B 66B80100            <1> 	mov ax, 1
  1660 0000101F 6631DB              <1> 	xor bx, bx
  1661 00001022 E8DC690000          <1> 	call showstring2
  1662 00001027 E905000000          <1> 	jmp backtomsgdone
  1663                              <1> backtomsg:
  1664                              <1> %endif
  1665 0000102C E82B0D0000          <1> 	call print
  1666                              <1> backtomsgdone:
  1667 00001031 30C0                <1> 	xor al, al
  1668 00001033 E81E130000          <1> 	call rdcharint
  1669 00001038 803D[B1110000]03    <1> 	cmp byte [intprob], 3
  1670 0000103F 7541                <1> 	jne nodebugint
  1671                              <1> %ifdef gui.included
  1672 00001041 803D[EF8E0000]00    <1> 	cmp byte [guion], 0
  1673 00001048 7427                <1> 	je nodebuggui
  1674 0000104A 668B1D[AF110000]    <1> 	mov bx, [backgroundcache]
  1675 00001051 66891D[AE730000]    <1> 	mov [background], bx
  1676 00001058 6631DB              <1> 	xor bx, bx
  1677 0000105B C605[4C5B0000]00    <1> 	mov byte [mousedisabled], 0
  1678 00001062 E8FB620000          <1> 	call guiclear
  1679 00001067 E846630000          <1> 	call reloadallgraphics
  1680 0000106C E841180000          <1> 	call termcopy
  1681                              <1> nodebuggui:
  1682                              <1> %endif
  1683 00001071 8B35[9F110000]      <1> 	mov esi, [espfirst]
  1684 00001077 89F4                <1> 	mov esp, esi
  1685 00001079 61                  <1> 	popad
  1686 0000107A 17                  <1> 	pop ss
  1687 0000107B 0FA9                <1> 	pop gs
  1688 0000107D 0FA1                <1> 	pop fs
  1689 0000107F 07                  <1> 	pop es
  1690 00001080 1F                  <1> 	pop ds
  1691 00001081 CF                  <1> 	iret
  1692                              <1> nodebugint:
  1693 00001082 61                  <1> 	popad
  1694 00001083 17                  <1> 	pop ss
  1695 00001084 0FA9                <1> 	pop gs
  1696 00001086 0FA1                <1> 	pop fs
  1697 00001088 07                  <1> 	pop es
  1698 00001089 1F                  <1> 	pop ds
  1699 0000108A 81C408000000        <1> 	add esp, 8
  1700                              <1> ;	popf ;pop the cs segment selector into eflags
  1701                              <1> ;	popf ;then pop the flags
  1702                              <1> %ifdef gui.included
  1703 00001090 803D[EF8E0000]00    <1> 	cmp byte [guion], 0
  1704 00001097 7427                <1> 	je returnunhandgui
  1705 00001099 668B1D[AF110000]    <1> 	mov bx, [backgroundcache]
  1706 000010A0 66891D[AE730000]    <1> 	mov [background], bx
  1707 000010A7 6631DB              <1> 	xor bx, bx
  1708 000010AA C605[4C5B0000]00    <1> 	mov byte [mousedisabled], 0
  1709 000010B1 E8AC620000          <1> 	call guiclear
  1710 000010B6 E8F7620000          <1> 	call reloadallgraphics
  1711 000010BB E8F2170000          <1> 	call termcopy
  1712                              <1> %endif
  1713                              <1> returnunhandgui:
  1714 000010C0 E9301C0000          <1> 	jmp nwcmd
  1715 000010C5 506C6561736520706F- <1> backtoosmsg db "Please post any problems in the Issues section at solleros.googlecode.com",10
  1716 000010CE 737420616E79207072- <1>
  1717 000010D7 6F626C656D7320696E- <1>
  1718 000010E0 207468652049737375- <1>
  1719 000010E9 65732073656374696F- <1>
  1720 000010F2 6E20617420736F6C6C- <1>
  1721 000010FB 65726F732E676F6F67- <1>
  1722 00001104 6C65636F64652E636F- <1>
  1723 0000110D 6D0A                <1>
  1724 0000110F 507265737320616E79- <1> 			db "Press any key to return to SollerOS",10,0
  1725 00001118 206B657920746F2072- <1>
  1726 00001121 657475726E20746F20- <1>
  1727 0000112A 536F6C6C65724F530A- <1>
  1728 00001133 00                  <1>
  1729                              <1> expdump:
  1730 00001134 8B35[A3110000]      <1> 	mov esi, [esiloc]
  1731 0000113A 89F7                <1> 	mov edi, esi
  1732 0000113C 81C70F000000        <1> 	add edi, 15
  1733 00001142 81C604000000        <1> 	add esi, 4
  1734 00001148 893D[A3110000]      <1> 	mov [esiloc], edi
  1735 0000114E 81EF03000000        <1> 	sub edi, 3
  1736 00001154 E8FE1F0000          <1> 	call converthex
  1737 00001159 81EE04000000        <1> 	sub esi, 4
  1738                              <1> %ifdef gui.included
  1739 0000115F 803D[EF8E0000]00    <1> 	cmp byte [guion], 0
  1740 00001166 0F8429000000        <1> 	je near expdumptext
  1741 0000116C 668B0D[AB110000]    <1> 	mov cx, [locunhandy]
  1742 00001173 668B15[AD110000]    <1> 	mov dx, [locunhandx]
  1743 0000117A 66B80100            <1> 	mov ax, 1
  1744 0000117E 6631DB              <1> 	xor bx, bx
  1745 00001181 E87D680000          <1> 	call showstring2
  1746 00001186 66890D[AB110000]    <1> 	mov [locunhandy], cx
  1747 0000118D 668915[AD110000]    <1> 	mov [locunhandx], dx
  1748 00001194 C3                  <1> 	ret
  1749                              <1> %endif
  1750                              <1> expdumptext:
  1751 00001195 E8C20B0000          <1> 	call print
  1752 0000119A C3                  <1> 	ret
  1753 0000119B 00000000            <1> esploc dd 0
  1754 0000119F 00000000            <1> espfirst dd 0
  1755 000011A3 00000000            <1> esiloc dd 0
  1756 000011A7 00000000            <1> esiregbuf dd 0
  1757 000011AB 0100                <1> locunhandy dw 1
  1758 000011AD 0100                <1> locunhandx dw 1
  1759 000011AF 0000                <1> backgroundcache dw 0
  1760 000011B1 00                  <1> intprob db 0
  1761 000011B2 00000000            <1> codeloc dd 0
  1762 000011B6 00000000            <1> codelocend dd 0
  1763 000011BA 000000000000        <1> igdtcache dw 0,0,0
  1764                              <1> 	unhandmsg:	
  1765 000011C0 494E543D3030303030- <1> 			db "INT=00000000",255,10,0
  1766 000011C9 303030FF0A00        <1>
  1767                              <1> unhndrg:
  1768 000011CF FFFFFFFF3030303030- <1> 	times 7 db 255,255,255,255,"00000000  ",0	;this dumps the stack before the stack frame in question
  1769 000011D8 303030202000<rept>  <1>
  1770 00001238 FFFFFFFF3030303030- <1> 			db 255,255,255,255,"00000000",255,10,0
  1771 00001241 303030FF0A00        <1>
  1772 00001247 FFFFFFFF3030303030- <1> 	times 7 db 255,255,255,255,"00000000  ",0
  1773 00001250 303030202000<rept>  <1>
  1774 000012B0 FFFFFFFF3030303030- <1> 			db 255,255,255,255,"00000000",255,10,0
  1775 000012B9 303030FF0A00        <1>
  1776 000012BF FFFFFFFF3030303030- <1> 	times 7 db 255,255,255,255,"00000000  ",0
  1777 000012C8 303030202000<rept>  <1>
  1778 00001328 FFFFFFFF3030303030- <1> 			db 255,255,255,255,"00000000",255,10,0
  1779 00001331 303030FF0A00        <1>
  1780 00001337 FFFFFFFF3030303030- <1> 	times 7 db 255,255,255,255,"00000000  ",0
  1781 00001340 303030202000<rept>  <1>
  1782 000013A0 FFFFFFFF3030303030- <1> 			db 255,255,255,255,"00000000",255,10,0
  1783 000013A9 303030FF0A00        <1>
  1784                              <1> unhandregs:
  1785 000013AF 45464C3D3030303030- <1> 			db "EFL=00000000  ",0
  1786 000013B8 303030202000        <1>
  1787 000013BE 43533A3D3030303030- <1> 			db "CS:=00000000  ",0
  1788 000013C7 303030202000        <1>
  1789 000013CD 4549503D3030303030- <1> 			db "EIP=00000000",255,10,0
  1790 000013D6 303030FF0A00        <1>
  1791 000013DC 44533A3D3030303030- <1> 			db "DS:=00000000  ",0
  1792 000013E5 303030202000        <1>
  1793 000013EB 45533A3D3030303030- <1> 			db "ES:=00000000  ",0
  1794 000013F4 303030202000        <1>
  1795 000013FA 46533A3D3030303030- <1> 			db "FS:=00000000  ",0
  1796 00001403 303030202000        <1>
  1797 00001409 47533A3D3030303030- <1> 			db "GS:=00000000  ",0
  1798 00001412 303030202000        <1>
  1799 00001418 53533A3D3030303030- <1> 			db "SS:=00000000",255,10,0
  1800 00001421 303030FF0A00        <1>
  1801 00001427 4541583D3030303030- <1> 			db "EAX=00000000  ",0
  1802 00001430 303030202000        <1>
  1803 00001436 4543583D3030303030- <1> 			db "ECX=00000000  ",0
  1804 0000143F 303030202000        <1>
  1805 00001445 4544583D3030303030- <1> 			db "EDX=00000000  ",0
  1806 0000144E 303030202000        <1>
  1807 00001454 4542583D3030303030- <1> 			db "EBX=00000000",255,10,0
  1808 0000145D 303030FF0A00        <1>
  1809 00001463 4553503D3030303030- <1> 			db "ESP=00000000  ",0
  1810 0000146C 303030202000        <1>
  1811 00001472 4542503D3030303030- <1> 			db "EBP=00000000  ",0
  1812 0000147B 303030202000        <1>
  1813 00001481 4553493D3030303030- <1> 			db "ESI=00000000  ",0
  1814 0000148A 303030202000        <1>
  1815 00001490 4544493D3030303030- <1> unhndrgend:	db "EDI=00000000",255,10,0
  1816 00001499 303030FF0A00        <1>
  1817 0000149F 4352303D3030303030- <1> 			db "CR0=00000000  ",0
  1818 000014A8 303030202000        <1>
  1819 000014AE 4352323D3030303030- <1> 			db "CR2=00000000  ",0
  1820 000014B7 303030202000        <1>
  1821 000014BD 4352333D3030303030- <1> 			db "CR3=00000000  ",0
  1822 000014C6 303030202000        <1>
  1823 000014CC 4352343D3030303030- <1> 			db "CR4=00000000",255,10,0
  1824 000014D5 303030FF0A00        <1>
  1825 000014DB 54523A3D3030303030- <1> 			db "TR:=00000000  ",0
  1826 000014E4 303030202000        <1>
  1827 000014EA 4944543D3030303030- <1> 			db "IDT=00000000  ",0
  1828 000014F3 303030202000        <1>
  1829 000014F9 4744543D3030303030- <1> 			db "GDT=00000000  ",0
  1830 00001502 303030202000        <1>
  1831 00001508 4C44543D3030303030- <1> 			db "LDT=00000000",255,10,0
  1832 00001511 303030FF0A00        <1>
  1833 00001517 FFFFFFFF3030303030- <1> unhandcode: times 2 db 255,255,255,255,"00000000  ",0	;this dumps the code before and after the interrupt in question
  1834 00001520 303030202000<rept>  <1>
  1835 00001535 FFFFFFFF3030303030- <1> 			db 255,255,255,255,"00000000 ",255,0
  1836 0000153E 30303020FF00        <1>
  1837 00001544 FFFFFF5B3030303030- <1> 			db 255,255,255,"[00000000] ",0
  1838 0000154D 3030305D2000        <1>
  1839 00001553 FFFFFFFF3030303030- <1> 			times 3 db 255,255,255,255,"00000000  ",0
  1840 0000155C 303030202000<rept>  <1>
  1841 00001580 FFFFFFFF3030303030- <1> 			db 255,255,255,255,"00000000",255,10,0
  1842 00001589 303030FF0A00        <1>
  1843                              <1> unhandmsgend:
  1844                              <1> 
  1845                              <1> errortypes:
  1846 0000158F [D3150000]          <1> 			dd err0
  1847 00001593 [3C160000]          <1> 			dd err1
  1848 00001597 [9D160000]          <1> 			dd err2
  1849 0000159B [F2160000]          <1> 			dd err3
  1850 0000159F [56170000]          <1> 			dd err4
  1851 000015A3 [A8170000]          <1> 			dd err5
  1852 000015A7 [12180000]          <1> 			dd err6
  1853 000015AB [7A180000]          <1> 			dd err7
  1854 000015AF [C4180000]          <1> 			dd err8
  1855 000015B3 [21190000]          <1> 			dd err9
  1856 000015B7 [7A190000]          <1> 			dd err10
  1857 000015BB [C5190000]          <1> 			dd err11
  1858 000015BF [151A0000]          <1> 			dd err12
  1859 000015C3 [6E1A0000]          <1> 			dd err13
  1860 000015C7 [D11A0000]          <1> 			dd err14
  1861 000015CB [0D1B0000]          <1> 			dd err15
  1862                              <1> errortypesend:
  1863 000015CF [991B0000]          <1> 			dd unknownerror
  1864                              <1> 			
  1865 000015D3 4469766973696F6E20- <1> err0	db "Division by zero:",10
  1866 000015DC 6279207A65726F3A0A  <1>
  1867 000015E5 546563686E6963616C- <1> 		db "Technically lim a÷x = ∞ when a is any real number. Happy Easter!",10
  1868 000015EE 6C79206C696D2061C3- <1>
  1869 000015F7 B778203D20E2889E20- <1>
  1870 00001600 7768656E2061206973- <1>
  1871 00001609 20616E79207265616C- <1>
  1872 00001612 206E756D6265722E20- <1>
  1873 0000161B 486170707920456173- <1>
  1874 00001624 746572210A          <1>
  1875 00001629 202020202020202020- <1> 		db "            x→0",10,0
  1876 00001632 20202078E28692300A- <1>
  1877 0000163B 00                  <1>
  1878                              <1> 		
  1879 0000163C 53696E676C652D7374- <1> err1	db "Single-step/Breakpoint:",10
  1880 00001645 65702F427265616B70- <1>
  1881 0000164E 6F696E743A0A        <1>
  1882 00001654 4120627265616B706F- <1> 		db "A breakpoint fault, breakpoint trap, or single-step trap was triggered.",10,0
  1883 0000165D 696E74206661756C74- <1>
  1884 00001666 2C20627265616B706F- <1>
  1885 0000166F 696E7420747261702C- <1>
  1886 00001678 206F722073696E676C- <1>
  1887 00001681 652D73746570207472- <1>
  1888 0000168A 617020776173207472- <1>
  1889 00001693 696767657265642E0A- <1>
  1890 0000169C 00                  <1>
  1891                              <1> 		
  1892 0000169D 4E6F6E6D61736B6162- <1> err2	db "Nonmaskable interrupt:",10
  1893 000016A6 6C6520696E74657272- <1>
  1894 000016AF 7570743A0A          <1>
  1895 000016B4 412068617264776172- <1> 		db "A hardware interrupt was triggered that could not be masked.",10,0
  1896 000016BD 6520696E7465727275- <1>
  1897 000016C6 707420776173207472- <1>
  1898 000016CF 696767657265642074- <1>
  1899 000016D8 68617420636F756C64- <1>
  1900 000016E1 206E6F74206265206D- <1>
  1901 000016EA 61736B65642E0A00    <1>
  1902                              <1> 		
  1903 000016F2 427265616B706F696E- <1> err3	db "Breakpoint:",10
  1904 000016FB 743A0A              <1>
  1905 000016FE 5468697320696E7465- <1> 		db "This interrupt is used in programs to show the stack and registers and can be",10
  1906 00001707 727275707420697320- <1>
  1907 00001710 7573656420696E2070- <1>
  1908 00001719 726F6772616D732074- <1>
  1909 00001722 6F2073686F77207468- <1>
  1910 0000172B 6520737461636B2061- <1>
  1911 00001734 6E6420726567697374- <1>
  1912 0000173D 65727320616E642063- <1>
  1913 00001746 616E2062650A        <1>
  1914 0000174C 69676E6F7265642E0A- <1> 		db "ignored.",10,0
  1915 00001755 00                  <1>
  1916                              <1> 		
  1917 00001756 4F766572666C6F773A- <1> err4	db "Overflow:",10
  1918 0000175F 0A                  <1>
  1919 00001760 5468652070726F6365- <1> 		db "The processor ran into an INTO instruction with the overflow flag set.",10,0
  1920 00001769 73736F722072616E20- <1>
  1921 00001772 696E746F20616E2049- <1>
  1922 0000177B 4E544F20696E737472- <1>
  1923 00001784 756374696F6E207769- <1>
  1924 0000178D 746820746865206F76- <1>
  1925 00001796 6572666C6F7720666C- <1>
  1926 0000179F 6167207365742E0A00  <1>
  1927                              <1> 		
  1928 000017A8 426F756E6473206368- <1> err5	db "Bounds check:",10
  1929 000017B1 65636B3A0A          <1>
  1930 000017B6 5468652070726F6365- <1> 		db "The processor rebounded from a BOUND instruction run on an operand that was out",10
  1931 000017BF 73736F72207265626F- <1>
  1932 000017C8 756E6465642066726F- <1>
  1933 000017D1 6D206120424F554E44- <1>
  1934 000017DA 20696E737472756374- <1>
  1935 000017E3 696F6E2072756E206F- <1>
  1936 000017EC 6E20616E206F706572- <1>
  1937 000017F5 616E64207468617420- <1>
  1938 000017FE 776173206F75740A    <1>
  1939 00001806 6F6620626F756E6473- <1> 		db "of bounds.",10,0
  1940 0000180F 2E0A00              <1>
  1941                              <1> 		
  1942 00001812 496E76616C6964206F- <1> err6	db "Invalid opcode:",10
  1943 0000181B 70636F64653A0A      <1>
  1944 00001822 5468652070726F6365- <1> 		db "The processor has no idea what it was trying to execute. Don't run SSE4 code",10
  1945 0000182B 73736F722068617320- <1>
  1946 00001834 6E6F20696465612077- <1>
  1947 0000183D 686174206974207761- <1>
  1948 00001846 7320747279696E6720- <1>
  1949 0000184F 746F20657865637574- <1>
  1950 00001858 652E20446F6E277420- <1>
  1951 00001861 72756E205353453420- <1>
  1952 0000186A 636F64650A          <1>
  1953 0000186F 6F6E20343836277321- <1> 		db "on 486's!",10,0
  1954 00001878 0A00                <1>
  1955                              <1> 		
  1956 0000187A 436F70726F63657373- <1> err7	db "Coprocessor not available:",10
  1957 00001883 6F72206E6F74206176- <1>
  1958 0000188C 61696C61626C653A0A  <1>
  1959 00001895 446F6E277420796F75- <1> 		db "Don't you know they don't make those anymore!",10,0
  1960 0000189E 206B6E6F7720746865- <1>
  1961 000018A7 7920646F6E2774206D- <1>
  1962 000018B0 616B652074686F7365- <1>
  1963 000018B9 20616E796D6F726521- <1>
  1964 000018C2 0A00                <1>
  1965                              <1> 		
  1966 000018C4 446F75626C65206661- <1> err8	db "Double fault:",10
  1967 000018CD 756C743A0A          <1>
  1968 000018D2 546865206578636570- <1> 		db "The exception handler could not handle that it could not handle an exception.",10,0
  1969 000018DB 74696F6E2068616E64- <1>
  1970 000018E4 6C657220636F756C64- <1>
  1971 000018ED 206E6F742068616E64- <1>
  1972 000018F6 6C6520746861742069- <1>
  1973 000018FF 7420636F756C64206E- <1>
  1974 00001908 6F742068616E646C65- <1>
  1975 00001911 20616E206578636570- <1>
  1976 0000191A 74696F6E2E0A00      <1>
  1977                              <1> 		
  1978 00001921 436F70726F63657373- <1> err9	db "Coprocessor segment overrun:",10,0
  1979 0000192A 6F72207365676D656E- <1>
  1980 00001933 74206F76657272756E- <1>
  1981 0000193C 3A0A00              <1>
  1982 0000193F 54686973206E657665- <1> 		db "This never happens in modern computers, and never should.",10,0
  1983 00001948 722068617070656E73- <1>
  1984 00001951 20696E206D6F646572- <1>
  1985 0000195A 6E20636F6D70757465- <1>
  1986 00001963 72732C20616E64206E- <1>
  1987 0000196C 657665722073686F75- <1>
  1988 00001975 6C642E0A00          <1>
  1989                              <1> 
  1990 0000197A 496E76616C69642054- <1> err10	db "Invalid TSS:",10
  1991 00001983 53533A0A            <1>
  1992 00001987 546865205453532074- <1> 		db "The TSS that was switched to is invalid. Nothing funny here.",10,0
  1993 00001990 686174207761732073- <1>
  1994 00001999 776974636865642074- <1>
  1995 000019A2 6F20697320696E7661- <1>
  1996 000019AB 6C69642E204E6F7468- <1>
  1997 000019B4 696E672066756E6E79- <1>
  1998 000019BD 20686572652E0A00    <1>
  1999                              <1> 		
  2000 000019C5 5365676D656E74206E- <1> err11	db "Segment not present:",10
  2001 000019CE 6F742070726573656E- <1>
  2002 000019D7 743A0A              <1>
  2003 000019DA 546865207072657365- <1> 		db "The present bit of the segment descriptor is set to zero.",10,0
  2004 000019E3 6E7420626974206F66- <1>
  2005 000019EC 20746865207365676D- <1>
  2006 000019F5 656E74206465736372- <1>
  2007 000019FE 6970746F7220697320- <1>
  2008 00001A07 73657420746F207A65- <1>
  2009 00001A10 726F2E0A00          <1>
  2010                              <1> 		
  2011 00001A15 537461636B20657863- <1> err12	db "Stack exception:",10
  2012 00001A1E 657074696F6E3A0A    <1>
  2013 00001A26 546865205353206465- <1> 		db "The SS descriptor is invalid or not present or its limit is too small.",10,0
  2014 00001A2F 7363726970746F7220- <1>
  2015 00001A38 697320696E76616C69- <1>
  2016 00001A41 64206F72206E6F7420- <1>
  2017 00001A4A 70726573656E74206F- <1>
  2018 00001A53 7220697473206C696D- <1>
  2019 00001A5C 697420697320746F6F- <1>
  2020 00001A65 20736D616C6C2E0A00  <1>
  2021                              <1> 		
  2022 00001A6E 47656E6572616C2070- <1> err13	db "General protection violation:",10
  2023 00001A77 726F74656374696F6E- <1>
  2024 00001A80 2076696F6C6174696F- <1>
  2025 00001A89 6E3A0A              <1>
  2026 00001A8C 596F752076696F6C61- <1> 		db "You violated the computer. Step away slowly. The FBI is on its way.",10,0
  2027 00001A95 746564207468652063- <1>
  2028 00001A9E 6F6D70757465722E20- <1>
  2029 00001AA7 537465702061776179- <1>
  2030 00001AB0 20736C6F776C792E20- <1>
  2031 00001AB9 546865204642492069- <1>
  2032 00001AC2 73206F6E2069747320- <1>
  2033 00001ACB 7761792E0A00        <1>
  2034                              <1> 		
  2035 00001AD1 50616765206661756C- <1> err14	db "Page fault:",10
  2036 00001ADA 743A0A              <1>
  2037 00001ADD 546865207061676520- <1> 		db "The page that was requested was not available.",10,0
  2038 00001AE6 746861742077617320- <1>
  2039 00001AEF 726571756573746564- <1>
  2040 00001AF8 20776173206E6F7420- <1>
  2041 00001B01 617661696C61626C65- <1>
  2042 00001B0A 2E0A00              <1>
  2043                              <1> 		
  2044 00001B0D 526573657276656420- <1> err15	db "Reserved for Plan R:",10
  2045 00001B16 666F7220506C616E20- <1>
  2046 00001B1F 523A0A              <1>
  2047 00001B22 5468697320696E7465- <1> 		db "This interrupt is reserved for usage only by the military when it is necessary",10
  2048 00001B2B 727275707420697320- <1>
  2049 00001B34 726573657276656420- <1>
  2050 00001B3D 666F72207573616765- <1>
  2051 00001B46 206F6E6C7920627920- <1>
  2052 00001B4F 746865206D696C6974- <1>
  2053 00001B58 617279207768656E20- <1>
  2054 00001B61 6974206973206E6563- <1>
  2055 00001B6A 6573736172790A      <1>
  2056 00001B71 746F20696E69746961- <1> 		db "to initiate a full-scale coup d'état.",10,0
  2057 00001B7A 746520612066756C6C- <1>
  2058 00001B83 2D7363616C6520636F- <1>
  2059 00001B8C 7570206427C3A97461- <1>
  2060 00001B95 742E0A00            <1>
  2061                              <1> 		
  2062 00001B99 576861742074686520- <1> unknownerror db "What the hell just happened? Is everyone okay? Hard drive? Video card?",10
  2063 00001BA2 68656C6C206A757374- <1>
  2064 00001BAB 2068617070656E6564- <1>
  2065 00001BB4 3F2049732065766572- <1>
  2066 00001BBD 796F6E65206F6B6179- <1>
  2067 00001BC6 3F2048617264206472- <1>
  2068 00001BCF 6976653F2056696465- <1>
  2069 00001BD8 6F20636172643F0A    <1>
  2070 00001BE0 4D656D6F72793F2041- <1> 			db	"Memory? Are you there?",10,0
  2071 00001BE9 726520796F75207468- <1>
  2072 00001BF2 6572653F0A00        <1>
  2073                              <1> %else
  2074                              <1> unhand:	
  2075                              <1> 	%assign i 0
  2076                              <1> 	%rep 32
  2077                              <1> 	mov byte [intprob], i
  2078                              <1> 	jmp unhand2
  2079                              <1> 	%assign i i+1
  2080                              <1> 	%endrep
  2081                              <1> unhand2:
  2082                              <1> 	cmp byte [intprob], 3
  2083                              <1> 	je handled	;if it is a debug interrupt, it is auto handled
  2084                              <1> 	mov ebx, 0xDEADCD00 ;this shows that an exception occured even though more detailed info cannot be shown
  2085                              <1> 						;CD stands for the interrupt code, DEAD shows that the program died because of the int
  2086                              <1> 	mov bl, [intprob]
  2087                              <1> 	jmp exitprog
  2088                              <1> intprob db 0
  2089                              <1> %endif
  2090                                      %include "source/ints.asm"
  2091                              <1> int30h:	;for great justice
  2092 00001BF8 80FC00              <1> 	cmp ah, 0
  2093 00001BFB 0F84A3000000        <1> 	je near exitprog   ;kills app
  2094 00001C01 80FC01              <1> 	cmp ah, 1
  2095 00001C04 0F8422010000        <1> 	je near prntstr  ;print string
  2096 00001C0A 80FC02              <1> 	cmp ah, 2
  2097 00001C0D 0F84C2010000        <1> 	je near readstr	;read string
  2098 00001C13 80FC03              <1> 	cmp ah, 3
  2099 00001C16 0F84E2010000        <1> 	je near clearscrn	;clear screen
  2100 00001C1C 80FC04              <1> 	cmp ah, 4
  2101 00001C1F 0F8457020000        <1> 	je near prntreadstr	;read and print string
  2102 00001C25 80FC05              <1> 	cmp ah, 5
  2103 00001C28 0F841C070000        <1> 	je near readchar	;get char
  2104 00001C2E 80FC06              <1> 	cmp ah, 6
  2105 00001C31 0F8483070000        <1> 	je near prntchar	;print char
  2106 00001C37 80FC07              <1> 	cmp ah, 7
  2107 00001C3A 0F84A0090000        <1> 	je near openfile	;read file
  2108                              <1> ;	cmp ah, 8
  2109                              <1> ;	je near closefile	;close file
  2110 00001C40 80FC09              <1> 	cmp ah, 9
  2111 00001C43 0F84A1090000        <1> 	je near num2str	;convert number to string
  2112 00001C49 80FC0A              <1> 	cmp ah, 10
  2113 00001C4C 0F84B0090000        <1> 	je near str2num	;convert string to number
  2114                              <1> %ifdef threads.included
  2115 00001C52 80FC0B              <1> 	cmp ah, 11
  2116 00001C55 0F84B3090000        <1> 	je near forkthread	;create thread
  2117                              <1> %endif
  2118 00001C5B 80FC0C              <1> 	cmp ah, 12
  2119 00001C5E 0F84810A0000        <1> 	je near gettime	;get time
  2120 00001C64 80FC0D              <1> 	cmp ah, 13
  2121 00001C67 0F848D0A0000        <1> 	je near settime	;set time
  2122 00001C6D 80FC0E              <1> 	cmp ah, 14
  2123 00001C70 0F84940A0000        <1> 	je near runcmd	;run program
  2124 00001C76 80FC0F              <1> 	cmp ah, 15
  2125 00001C79 0F84A00A0000        <1> 	je near proginfo ;get program info-location of name/options/number of options/environmental vars
  2126 00001C7F 80FC10              <1> 	cmp ah, 16
  2127 00001C82 0F84C20A0000        <1> 	je near hooksig	;hook code to a signal
  2128                              <1> %ifdef gui.included
  2129 00001C88 80FC11              <1> 	cmp ah, 17
  2130 00001C8B 0F84C90A0000        <1> 	je near guiint	;GUI operations
  2131                              <1> %endif
  2132                              <1> %ifdef sound.included
  2133 00001C91 80FC12              <1> 	cmp ah, 18
  2134 00001C94 0F840E0C0000        <1> 	je near soundint	;sound operations
  2135                              <1> %endif
  2136                              <1> %ifdef network.included
  2137 00001C9A 80FC13              <1> 	cmp ah, 19
  2138 00001C9D 0F840A0C0000        <1> 	je near netint	;networking operations
  2139                              <1> %endif
  2140 00001CA3 CF                  <1> 	iret
  2141                              <1> 
  2142                              <1> 	%include 'source/interrupts/0_exitprog.asm'
  2143                              <2> exitprog:
  2144 00001CA4 66B83000            <2> 	mov ax, NEW_DATA_SEL
  2145 00001CA8 8ED8                <2> 	mov ds, ax
  2146 00001CAA 8EC0                <2> 	mov es, ax
  2147 00001CAC 8EE0                <2> 	mov fs, ax
  2148 00001CAE 66B82000            <2> 	mov ax, SYS_DATA_SEL
  2149 00001CB2 8EE8                <2> 	mov gs, ax
  2150 00001CB4 C705[C96C0000]0000- <2> 	mov dword [currentthread], 0
  2151 00001CBC 0000                <2>
  2152 00001CBE C705[C46C0000]0400- <2> 	mov dword [lastthread], 4
  2153 00001CC6 0000                <2>
  2154 00001CC8 C605[C86C0000]00    <2> 	mov byte [threadson], 0 ;for now i need to use this
  2155 00001CCF 8B25[08B80300]      <2> 	mov esp, [previousstack] ;and this
  2156 00001CD5 81FB00000000        <2> 	cmp ebx, 0
  2157 00001CDB 0F8501000000        <2> 	jne near .error
  2158 00001CE1 C3                  <2> 	ret
  2159                              <2> .error:
  2160 00001CE2 89D9                <2> 	mov ecx, ebx
  2161 00001CE4 B006                <2> 	mov al, 6
  2162 00001CE6 A2[B5310000]        <2> 	mov [firsthexshown], al
  2163 00001CEB 51                  <2> 	push ecx
  2164 00001CEC BE[071D0000]        <2> 	mov esi, .msg1
  2165 00001CF1 E855000000          <2> 	call printhighlight
  2166 00001CF6 59                  <2> 	pop ecx
  2167 00001CF7 E8CE140000          <2> 	call showhex
  2168 00001CFC BE[1C1D0000]        <2> 	mov esi, .msg2
  2169 00001D01 E845000000          <2> 	call printhighlight
  2170 00001D06 C3                  <2> 	ret
  2171                              <2> 	
  2172 00001D07 416E20657869742073- <2> .msg1 db "An exit status of 0x",0
  2173 00001D10 7461747573206F6620- <2>
  2174 00001D19 307800              <2>
  2175 00001D1C 087761732072657475- <2> .msg2 db 8,"was returned.",10,0
  2176 00001D25 726E65642E0A00      <2>
  2177                              <1> 	%include 'source/interrupts/1_prntstr.asm'
  2178                              <2> prntstr:
  2179 00001D2C 30E4                <2> xor ah, ah
  2180 00001D2E E830000000          <2> call printint
  2181 00001D33 E976E5FFFF          <2> jmp timerinterrupt
  2182                              <2> 
  2183                              <2> 	printquiet:
  2184 00001D38 6631C0              <2> 		xor ax, ax
  2185 00001D3B 66A3[D31D0000]      <2> 		mov [endkeyprint], ax
  2186 00001D41 66BB0700            <2> 		mov bx, 7
  2187 00001D45 E832000000          <2> 		call printint.b
  2188 00001D4A C3                  <2> 		ret
  2189                              <2> 
  2190                              <2> 	printhighlight:
  2191 00001D4B 6631C0              <2> 		xor ax, ax
  2192 00001D4E 66BBF000            <2> 		mov bx, 0xF0
  2193 00001D52 E90C000000          <2> 		jmp printint
  2194                              <2> 
  2195                              <2> 	printline:
  2196 00001D57 BE[CA8E0000]        <2> 		mov esi, line
  2197                              <2>     print:
  2198 00001D5C 6631C0              <2> 		xor ax, ax
  2199 00001D5F 66BB0700            <2> 		mov bx, 7
  2200                              <2> 	printint:	;print line, ax=last key,bx=modifier, esi=buffer
  2201 00001D63 56                  <2> 		push esi
  2202 00001D64 66A3[D31D0000]      <2> 		mov [endkeyprint], ax
  2203 00001D6A E80D000000          <2> 		call .b
  2204 00001D6F 89F1                <2> 		mov ecx, esi
  2205 00001D71 5F                  <2> 		pop edi
  2206 00001D72 29F9                <2> 		sub ecx, edi
  2207 00001D74 51                  <2> 		push ecx
  2208 00001D75 E8380B0000          <2> 		call termcopy
  2209 00001D7A 59                  <2> 		pop ecx
  2210 00001D7B C3                  <2> 		ret
  2211                              <2> 	.b:	
  2212 00001D7C 53                  <2> 		push ebx
  2213 00001D7D 31C0                <2> 		xor eax, eax
  2214 00001D7F 8A06                <2> 		mov al, [esi]
  2215 00001D81 3CFF                <2> 		cmp al, 0xFF
  2216 00001D83 7435                <2> 		je .doneutf
  2217 00001D85 3CC0                <2> 		cmp al, 0xC0
  2218 00001D87 7231                <2> 		jb .doneutf
  2219 00001D89 3CE0                <2> 		cmp al, 0xE0
  2220 00001D8B 721A                <2> 		jb .two
  2221 00001D8D 46                  <2> 		inc esi
  2222 00001D8E 8A2E                <2> 		mov ch, [esi]
  2223 00001D90 46                  <2> 		inc esi
  2224 00001D91 8A0E                <2> 		mov cl, [esi]
  2225 00001D93 C0E004              <2> 		shl al, 4
  2226 00001D96 C0E102              <2> 		shl cl, 2
  2227 00001D99 66C1E902            <2> 		shr cx, 2
  2228 00001D9D 08C5                <2> 		or ch, al
  2229 00001D9F 6689C8              <2> 		mov ax, cx
  2230 00001DA2 E913000000          <2> 		jmp .doneutf
  2231                              <2> 	.two:
  2232 00001DA7 8A2E                <2> 		mov ch, [esi]
  2233 00001DA9 46                  <2> 		inc esi
  2234 00001DAA 8A0E                <2> 		mov cl, [esi]
  2235 00001DAC 66C1E102            <2> 		shl cx, 2
  2236 00001DB0 C0ED02              <2> 		shr ch, 2
  2237 00001DB3 66C1E902            <2> 		shr cx, 2
  2238 00001DB7 6689C8              <2> 		mov ax, cx
  2239                              <2> 	.doneutf:
  2240 00001DBA 5B                  <2> 		pop ebx
  2241 00001DBB 663B05[D31D0000]    <2> 		cmp ax, [endkeyprint]
  2242 00001DC2 740E                <2> 		je .done
  2243 00001DC4 663DFFFE            <2> 		cmp ax, 0xFEFF
  2244 00001DC8 7405                <2> 		je .noprint
  2245 00001DCA E818060000          <2> 		call prcharq
  2246                              <2> 	.noprint:
  2247 00001DCF 46                  <2> 		inc esi
  2248 00001DD0 EBAA                <2> 		jmp .b
  2249                              <2> 	.done:
  2250 00001DD2 C3                  <2> 		ret
  2251                              <2> 
  2252 00001DD3 0000                <2> endkeyprint dw 0
  2253                              <1> 	%include 'source/interrupts/2_readstr.asm'
  2254                              <2> readstr:
  2255 00001DD5 E805000000          <2> call readint
  2256 00001DDA E9CFE4FFFF          <2> jmp timerinterrupt
  2257                              <2> 
  2258                              <2> 	readint:	;;get line, al=last key, esi = buffer, edi = endbuffer	
  2259 00001DDF 89C3                <2> 		mov ebx, eax
  2260                              <2> 	.b:
  2261 00001DE1 53                  <2> 		push ebx
  2262 00001DE2 57                  <2> 		push edi
  2263 00001DE3 56                  <2> 		push esi
  2264 00001DE4 30C0                <2> 		xor al, al
  2265 00001DE6 E86B050000          <2> 		call rdcharint
  2266 00001DEB 5E                  <2> 		pop esi
  2267 00001DEC 8806                <2> 		mov [esi], al
  2268 00001DEE 46                  <2> 		inc esi
  2269 00001DEF 5F                  <2> 		pop edi
  2270 00001DF0 5B                  <2> 		pop ebx
  2271 00001DF1 39FE                <2> 		cmp esi, edi
  2272 00001DF3 7304                <2> 		jae .done
  2273 00001DF5 38D8                <2> 		cmp al, bl
  2274 00001DF7 75E8                <2> 		jne .b
  2275                              <2> 	.done:
  2276 00001DF9 4E                  <2> 		dec esi
  2277 00001DFA C60600              <2> 		mov byte [esi], 0
  2278 00001DFD C3                  <2> 		ret
  2279                              <1> 	%include 'source/interrupts/3_clearscrn.asm'
  2280                              <2> clearscrn:
  2281 00001DFE E805000000          <2> call clear
  2282 00001E03 E9A6E4FFFF          <2> jmp timerinterrupt
  2283                              <2> %ifdef io.serial
  2284                              <2> clear:
  2285                              <2> 	mov esi, .str
  2286                              <2> 	call print
  2287                              <2> 	ret
  2288                              <2> .str db 27,"[2J",27,"[f",0
  2289                              <2> %else
  2290                              <2> clear:
  2291 00001E08 668B0D[DA250000]    <2> 		mov cx, [charxy]
  2292 00001E0F BF[9ED50300]        <2> 		mov edi, videobuf
  2293 00001E14 31C0                <2> 		xor eax, eax
  2294 00001E16 A3[D0250000]        <2> 		mov [linebeginpos], eax
  2295 00001E1B A3[D4250000]        <2> 		mov [videobufpos], eax
  2296 00001E20 6631D2              <2> 		xor dx, dx
  2297 00001E23 66A3[D8250000]      <2> 		mov [charpos], ax
  2298 00001E29 66B80700            <2> 		mov ax, 7
  2299 00001E2D C1E010              <2> 		shl eax, 16
  2300                              <2> 	clearb:
  2301 00001E30 8907                <2> 		mov [edi], eax
  2302 00001E32 81C704000000        <2> 		add edi, 4
  2303 00001E38 FEC9                <2> 		dec cl
  2304 00001E3A 80F900              <2> 		cmp cl, 0
  2305 00001E3D 75F1                <2> 		jne clearb
  2306 00001E3F 8A0D[DA250000]      <2> 		mov cl, [charxy]
  2307 00001E45 FECD                <2> 		dec ch
  2308 00001E47 80FD00              <2> 		cmp ch, 0
  2309 00001E4A 75E4                <2> 		jne clearb
  2310                              <2> 	cleardouble:
  2311 00001E4C BF[E6AA0400]        <2> 		mov edi, videobuf2
  2312 00001E51 668B0D[DA250000]    <2> 		mov cx, [charxy]
  2313 00001E58 31C0                <2> 		xor eax, eax
  2314                              <2> 	clearc:
  2315 00001E5A 8907                <2> 		mov [edi], eax
  2316 00001E5C 81C704000000        <2> 		add edi, 4
  2317 00001E62 FEC9                <2> 		dec cl
  2318 00001E64 80F900              <2> 		cmp cl, 0
  2319 00001E67 75F1                <2> 		jne clearc
  2320 00001E69 8A0D[DA250000]      <2> 		mov cl, [charxy]
  2321 00001E6F FECD                <2> 		dec ch
  2322 00001E71 80FD00              <2> 		cmp ch, 0
  2323 00001E74 75E4                <2> 		jne clearc
  2324 00001E76 E8370A0000          <2> 		call termcopy
  2325 00001E7B C3                  <2> 		ret
  2326                              <2> %endif
  2327                              <2> 		
  2328                              <1> 	%include 'source/interrupts/4_prntreadstr.asm'
  2329                              <2> prntreadstr:
  2330 00001E7C E80B000000          <2> call rdprint
  2331 00001E81 E928E4FFFF          <2> jmp timerinterrupt
  2332                              <2> 
  2333                              <2> readline:
  2334 00001E86 B00A                <2>   mov al, 10
  2335 00001E88 66BB0700            <2>   mov bx, 7
  2336                              <2> rdprint:	;print and get line, al=last key, bx=modifier, esi=buffer, edi=bufferend
  2337 00001E8C E80F000000          <2> 	call rdprintdos
  2338 00001E91 50                  <2> 	push eax
  2339 00001E92 A0[35230000]        <2> 	mov al, [endkeyrdpr]
  2340 00001E97 30E4                <2> 	xor ah, ah
  2341 00001E99 E832050000          <2> 	call prcharint
  2342 00001E9E 58                  <2> 	pop eax
  2343 00001E9F C3                  <2> 	ret
  2344                              <2> 
  2345                              <2> 	rdprintdos: ;allows dos compatibility with read function
  2346 00001EA0 8935[3F230000]      <2> 		mov [buftxtloc], esi
  2347 00001EA6 A2[35230000]        <2> 		mov [endkeyrdpr], al
  2348 00001EAB 66891D[37230000]    <2> 		mov [modkeyrdpr], bx
  2349 00001EB2 8935[39230000]      <2> 		mov [firstesirdpr], esi
  2350 00001EB8 893D[43230000]      <2> 		mov [endbufferrdpr], edi
  2351 00001EBE 8B3D[3A800500]      <2> 		mov edi, [commandsentered]
  2352 00001EC4 893D[36800500]      <2> 		mov [commandlistentries], edi
  2353                              <2> 	rdprintb:
  2354 00001ECA 56                  <2> 		push esi
  2355 00001ECB B001                <2> 		mov al, 1
  2356 00001ECD E884040000          <2> 		call rdcharint
  2357 00001ED2 8A25[B6230000]      <2> 		mov ah, [lastkey + 2]
  2358 00001ED8 88E1                <2> 		mov cl, ah
  2359 00001EDA 5E                  <2> 		pop esi
  2360                              <2> %ifdef io.serial
  2361                              <2> 		cmp ah, 0x41
  2362                              <2> 		je near rdprup
  2363                              <2> 		cmp ah, 0x42
  2364                              <2> 		je near rdprdown
  2365                              <2> 		cmp ah, 0x43
  2366                              <2> 		je near rdprright
  2367                              <2> 		cmp ah, 0x44
  2368                              <2> 		je near rdprleft
  2369                              <2> 		cmp ah, 0x31
  2370                              <2> 		je near rdprhome
  2371                              <2> 		cmp ah, 0x48
  2372                              <2> 		je near rdprhome
  2373                              <2> 		cmp ah, 0x46
  2374                              <2> 		je near rdprend
  2375                              <2> 		cmp ah, 0x33
  2376                              <2> 		je near rdprdel
  2377                              <2> 		cmp ah, 0x34
  2378                              <2> 		je near rdprend
  2379                              <2> %else
  2380 00001EDB 803D[45610000]E0    <2> 		cmp byte [specialkey], 0xE0
  2381 00001EE2 753F                <2> 		jne notspecialrdprnt
  2382 00001EE4 80FC53              <2> 		cmp ah, 0x53
  2383 00001EE7 0F84B1030000        <2> 		je near rdprdel
  2384 00001EED 80FC47              <2> 		cmp ah, 0x47
  2385 00001EF0 0F847E010000        <2> 		je near rdprhome
  2386 00001EF6 80FC4F              <2> 		cmp ah, 0x4F
  2387 00001EF9 0F8494010000        <2> 		je near rdprend
  2388 00001EFF 80FC50              <2> 		cmp ah, 0x50
  2389 00001F02 0F8424020000        <2> 		je near rdprdown
  2390 00001F08 80FC4D              <2> 		cmp ah, 0x4D
  2391 00001F0B 0F84C1010000        <2> 		je near rdprright
  2392 00001F11 80FC4B              <2> 		cmp ah, 0x4B
  2393 00001F14 0F8496010000        <2> 		je near rdprleft
  2394 00001F1A 80FC48              <2> 		cmp ah, 0x48
  2395 00001F1D 0F844C020000        <2> 		je near rdprup
  2396                              <2> 	notspecialrdprnt:
  2397                              <2> %endif
  2398 00001F23 66A1[B4230000]      <2> 		mov ax, [lastkey]
  2399 00001F29 663D0800            <2> 		cmp ax, 8
  2400 00001F2D 0F84A0030000        <2> 		je near rdprbscheck
  2401 00001F33 663D0000            <2> 		cmp ax, 0
  2402 00001F37 7491                <2> 		je rdprintb
  2403 00001F39 80F900              <2> 		cmp cl, 0
  2404 00001F3C 748C                <2> 		je rdprintb
  2405 00001F3E 663D8000            <2> 		cmp ax, 0x80
  2406 00001F42 7257                <2> 		jb .normal
  2407 00001F44 663D0008            <2> 		cmp ax, 0x800
  2408 00001F48 7321                <2> 		jae .three
  2409 00001F4A 46                  <2> 		inc esi
  2410 00001F4B 3B35[43230000]      <2> 		cmp esi, [endbufferrdpr]
  2411 00001F51 0F83DA000000        <2> 		jae near donerdprinc
  2412 00001F57 66C1E002            <2> 		shl ax, 2
  2413 00001F5B C0E802              <2> 		shr al, 2
  2414 00001F5E 0C80                <2> 		or al, 10000000b
  2415 00001F60 80CCC0              <2> 		or ah, 11000000b
  2416 00001F63 8866FF              <2> 		mov [esi - 1], ah
  2417 00001F66 E930000000          <2> 		jmp .normal
  2418                              <2> .three:	
  2419 00001F6B 81C602000000        <2> 		add esi, 2
  2420 00001F71 3B35[43230000]      <2> 		cmp esi, [endbufferrdpr]
  2421 00001F77 0F83B4000000        <2> 		jae near donerdprinc
  2422 00001F7D 88E1                <2> 		mov cl, ah
  2423 00001F7F C0E904              <2> 		shr cl, 4
  2424 00001F82 80C9E0              <2> 		or cl, 11100000b
  2425 00001F85 884EFE              <2> 		mov [esi - 2], cl
  2426 00001F88 66C1E004            <2> 		shl ax, 4
  2427 00001F8C 66C1E802            <2> 		shr ax, 2
  2428 00001F90 80CC80              <2> 		or ah, 10000000b
  2429 00001F93 C0E802              <2> 		shr al, 2
  2430 00001F96 0C80                <2> 		or al, 10000000b
  2431 00001F98 8866FF              <2> 		mov [esi - 1], ah
  2432                              <2> .normal:
  2433 00001F9B 8806                <2> 		mov [esi], al
  2434 00001F9D 46                  <2> 		inc esi
  2435 00001F9E 66A1[B4230000]      <2> 		mov ax, [lastkey]
  2436                              <2> 	bscheckequal:
  2437 00001FA4 668B1D[37230000]    <2> 		mov bx, [modkeyrdpr]
  2438 00001FAB 803D[3E230000]00    <2> 		cmp byte [txtmask], 0
  2439 00001FB2 7407                <2> 		je nomasktxt
  2440 00001FB4 30E4                <2> 		xor ah, ah
  2441 00001FB6 A0[3E230000]        <2> 		mov al, [txtmask]
  2442                              <2> 	nomasktxt:
  2443 00001FBB 56                  <2> 		push esi
  2444 00001FBC 66A3[33230000]      <2> 		mov [axcache], ax
  2445 00001FC2 668B1D[35230000]    <2> 		mov bx, [endkeyrdpr]
  2446 00001FC9 6639D8              <2> 		cmp ax, bx
  2447 00001FCC 7432                <2> 		je nobackprintbuftxt2
  2448 00001FCE E8FD030000          <2> 		call prcharint
  2449 00001FD3 BE[88CA0300]        <2> 		mov esi, buftxt2
  2450 00001FD8 E85BFDFFFF          <2> 		call printquiet
  2451 00001FDD 66B82000            <2> 		mov ax, " "
  2452 00001FE1 E801040000          <2> 		call prcharq
  2453 00001FE6 66B80800            <2> 		mov ax, 8
  2454 00001FEA 81FE[88CA0300]      <2> 		cmp esi, buftxt2
  2455 00001FF0 740E                <2> 		je nobackprintbuftxt2
  2456                              <2> 	backprintbuftxt2:
  2457 00001FF2 E8F0030000          <2> 		call prcharq
  2458 00001FF7 4E                  <2> 		dec esi
  2459 00001FF8 81FE[88CA0300]      <2> 		cmp esi, buftxt2
  2460 00001FFE 77F2                <2> 		ja backprintbuftxt2
  2461                              <2> 	nobackprintbuftxt2:
  2462 00002000 663D0A00            <2> 		cmp ax, 10
  2463 00002004 7405                <2> 		je nonobackprint
  2464 00002006 E8C5030000          <2> 		call prcharint
  2465                              <2> 	nonobackprint:
  2466 0000200B 5E                  <2> 		pop esi
  2467 0000200C 3B35[43230000]      <2> 		cmp esi, [endbufferrdpr]
  2468 00002012 0F8319000000        <2> 		jae near donerdprinc
  2469 00002018 66A1[33230000]      <2> 		mov ax, [axcache]
  2470 0000201E 8A25[35230000]      <2> 		mov ah, [endkeyrdpr]
  2471 00002024 38E0                <2> 		cmp al, ah
  2472 00002026 0F859EFEFFFF        <2> 		jne rdprintb
  2473 0000202C E901000000          <2> 		jmp donerdprint
  2474                              <2> 	donerdprinc:
  2475 00002031 46                  <2> 		inc esi
  2476                              <2> 	donerdprint:
  2477 00002032 4E                  <2> 		dec esi
  2478 00002033 BF[88CA0300]        <2> 		mov edi, buftxt2
  2479                              <2> 	copylaterstuff:
  2480 00002038 8A07                <2> 		mov al, [edi]
  2481 0000203A 3C00                <2> 		cmp al, 0
  2482 0000203C 7406                <2> 		je nocopylaterstuff
  2483 0000203E 8806                <2> 		mov [esi], al
  2484 00002040 47                  <2> 		inc edi
  2485 00002041 46                  <2> 		inc esi
  2486 00002042 EBF4                <2> 		jmp copylaterstuff
  2487                              <2> 	nocopylaterstuff:
  2488 00002044 C60600              <2> 		mov byte [esi], 0
  2489 00002047 E80B000000          <2> 		call clearbuftxt2
  2490 0000204C 89F1                <2> 		mov ecx, esi
  2491 0000204E 8B3D[39230000]      <2> 		mov edi, [firstesirdpr]
  2492 00002054 29F9                <2> 		sub ecx, edi
  2493 00002056 C3                  <2> 		ret
  2494                              <2> 	
  2495                              <2> 	clearbuftxt2:
  2496 00002057 30C0                <2> 		xor al, al
  2497 00002059 BF[88CA0300]        <2> 		mov edi, buftxt2
  2498                              <2> 	clearbuftxt2lp:
  2499 0000205E 8807                <2> 		mov [edi], al
  2500 00002060 47                  <2> 		inc edi
  2501 00002061 81FF[88CE0300]      <2> 		cmp edi, buftxt
  2502 00002067 75F5                <2> 		jne clearbuftxt2lp
  2503 00002069 C3                  <2> 		ret
  2504                              <2> 	
  2505                              <2> 	rdprintb2:
  2506 0000206A E843080000          <2> 		call termcopy
  2507 0000206F E956FEFFFF          <2> 		jmp rdprintb
  2508                              <2> 	
  2509                              <2> 	rdprhome:
  2510 00002074 3B35[3F230000]      <2> 		cmp esi, [buftxtloc]
  2511 0000207A 0F84EAFFFFFF        <2> 		je near rdprintb2
  2512 00002080 BF[88CA0300]        <2> 		mov edi, buftxt2
  2513 00002085 8A07                <2> 		mov al, [edi]
  2514 00002087 E879020000          <2> 		call shiftbuftxt2
  2515 0000208C E856030000          <2> 		call prcharq
  2516 00002091 EBE1                <2> 		jmp rdprhome
  2517                              <2> 		
  2518                              <2> 	rdprend:
  2519 00002093 BF[88CA0300]        <2> 		mov edi, buftxt2
  2520 00002098 8A07                <2> 		mov al, [edi]
  2521 0000209A 3C00                <2> 		cmp al, 0
  2522 0000209C 0F84C8FFFFFF        <2> 		je near rdprintb2
  2523 000020A2 8806                <2> 		mov [esi], al
  2524 000020A4 E849000000          <2> 		call shiftbuftxt2lft
  2525 000020A9 E839030000          <2> 		call prcharq
  2526 000020AE EBE3                <2> 		jmp rdprend
  2527                              <2> 	
  2528                              <2> 	rdprleft:
  2529 000020B0 3B35[3F230000]      <2> 		cmp esi, [buftxtloc]
  2530 000020B6 0F840EFEFFFF        <2> 		je near rdprintb
  2531 000020BC BF[88CA0300]        <2> 		mov edi, buftxt2
  2532 000020C1 8A07                <2> 		mov al, [edi]
  2533 000020C3 E83D020000          <2> 		call shiftbuftxt2
  2534 000020C8 E803030000          <2> 		call prcharint
  2535 000020CD E9F8FDFFFF          <2> 		jmp rdprintb
  2536                              <2> 		
  2537                              <2> 	rdprright:
  2538 000020D2 BF[88CA0300]        <2> 		mov edi, buftxt2
  2539 000020D7 8A07                <2> 		mov al, [edi]
  2540 000020D9 3C00                <2> 		cmp al, 0
  2541 000020DB 0F84E9FDFFFF        <2> 		je near rdprintb
  2542 000020E1 8806                <2> 		mov [esi], al
  2543 000020E3 E80A000000          <2> 		call shiftbuftxt2lft
  2544 000020E8 E8E3020000          <2> 		call prcharint
  2545 000020ED E9D8FDFFFF          <2> 		jmp rdprintb
  2546                              <2> 		
  2547                              <2> 	shiftbuftxt2lft:
  2548 000020F2 55                  <2> 		push ebp
  2549 000020F3 89FD                <2> 		mov ebp, edi
  2550                              <2> 	.lp:
  2551 000020F5 3C00                <2> 		cmp al, 0
  2552 000020F7 7408                <2> 		je noshiftbuftxt2lft
  2553 000020F9 47                  <2> 		inc edi
  2554 000020FA 8A07                <2> 		mov al, [edi]
  2555 000020FC 8847FF              <2> 		mov [edi - 1], al
  2556 000020FF EBF4                <2> 		jmp .lp
  2557                              <2> 	noshiftbuftxt2lft:
  2558 00002101 8A4500              <2> 		mov al, [ebp]
  2559 00002104 5D                  <2> 		pop ebp
  2560 00002105 3CC0                <2> 		cmp al, 0xC0
  2561 00002107 7304                <2> 		jae .nofix
  2562 00002109 3C80                <2> 		cmp al, 0x80
  2563 0000210B 73E5                <2> 		jae shiftbuftxt2lft
  2564                              <2> 	.nofix:
  2565 0000210D 8A06                <2> 		mov al, [esi]
  2566 0000210F 30E4                <2> 		xor ah, ah
  2567 00002111 46                  <2> 		inc esi
  2568 00002112 668B1D[37230000]    <2> 		mov bx, [modkeyrdpr]
  2569 00002119 C3                  <2> 		ret
  2570                              <2> 		
  2571                              <2> 	rdprdownbck:
  2572 0000211A FECC                <2> 		dec ah
  2573 0000211C 8825[3D230000]      <2> 		mov [commandedit], ah
  2574 00002122 E88D000000          <2> 		call rdprbckspc
  2575 00002127 E99EFDFFFF          <2> 		jmp rdprintb
  2576                              <2> 	
  2577                              <2> 	rdprdown:
  2578 0000212C 8A25[3D230000]      <2> 		mov ah, [commandedit]
  2579 00002132 80FC01              <2> 		cmp ah, 1
  2580 00002135 0F868FFDFFFF        <2> 		jbe near rdprintb
  2581 0000213B 8B3D[3A800500]      <2> 		mov edi, [commandsentered]
  2582 00002141 3B3D[36800500]      <2> 		cmp edi, [commandlistentries]
  2583 00002147 7618                <2> 		jbe .nofix
  2584 00002149 8105[36800500]0200- <2> 		add dword [commandlistentries], 2
  2585 00002151 0000                <2>
  2586 00002153 3B3D[36800500]      <2> 		cmp edi, [commandlistentries]
  2587 00002159 7706                <2> 		ja .nofix
  2588 0000215B 893D[36800500]      <2> 		mov [commandlistentries], edi
  2589                              <2> 	.nofix:
  2590 00002161 80FC02              <2> 		cmp ah, 2
  2591 00002164 74B4                <2> 		je rdprdownbck
  2592 00002166 80EC02              <2> 		sub ah, 2
  2593 00002169 8825[3D230000]      <2> 		mov [commandedit], ah
  2594                              <2> 		
  2595                              <2> 	rdprup:
  2596 0000216F 3805[3D230000]      <2> 		cmp [commandedit], al
  2597 00002175 0F844FFDFFFF        <2> 		je near rdprintb
  2598 0000217B 813D[36800500]0000- <2> 		cmp dword [commandlistentries], 0
  2599 00002183 0000                <2>
  2600 00002185 0F843FFDFFFF        <2> 		je near rdprintb
  2601 0000218B FF0D[36800500]      <2> 		dec dword [commandlistentries]
  2602                              <2> 	.lp:
  2603 00002191 BF[88CA0300]        <2> 		mov edi, buftxt2
  2604 00002196 8A07                <2> 		mov al, [edi]
  2605 00002198 3C00                <2> 		cmp al, 0
  2606 0000219A 740E                <2> 		je .start
  2607 0000219C 8806                <2> 		mov [esi], al
  2608 0000219E E84FFFFFFF          <2> 		call shiftbuftxt2lft
  2609 000021A3 E83F020000          <2> 		call prcharq
  2610 000021A8 EBE7                <2> 		jmp .lp
  2611                              <2> 	.start:
  2612 000021AA E805000000          <2> 		call rdprbckspc
  2613 000021AF E948000000          <2> 		jmp getcurrentcommandstr
  2614                              <2> 	rdprbckspc:
  2615 000021B4 3B35[3F230000]      <2> 		cmp esi, [buftxtloc]
  2616 000021BA 7432                <2> 		je nordprupbck
  2617                              <2> 	rdprupbckspclp:
  2618 000021BC 66B80800            <2> 		mov ax, 8
  2619 000021C0 668B1D[37230000]    <2> 		mov bx, [modkeyrdpr]
  2620 000021C7 E81B020000          <2> 		call prcharq
  2621 000021CC 66B82000            <2> 		mov ax, ' '
  2622 000021D0 E812020000          <2> 		call prcharq
  2623 000021D5 66B80800            <2> 		mov ax, 8
  2624 000021D9 E809020000          <2> 		call prcharq
  2625 000021DE 4E                  <2> 		dec esi
  2626 000021DF 3B35[3F230000]      <2> 		cmp esi, [buftxtloc]
  2627 000021E5 7402                <2> 		je nordprupbck2
  2628 000021E7 EBD3                <2> 		jmp rdprupbckspclp
  2629                              <2> 	nordprupbck2:
  2630 000021E9 E8C4060000          <2> 		call termcopy
  2631                              <2> 	nordprupbck:
  2632 000021EE 8B3D[32800500]      <2> 		mov edi, [commandbufpos]
  2633 000021F4 81C7[3E800500]      <2> 		add edi, commandbuf
  2634 000021FA 4F                  <2> 		dec edi
  2635 000021FB C3                  <2> 		ret
  2636                              <2> 	getcurrentcommandstr:
  2637 000021FC 8A25[3D230000]      <2> 		mov ah, [commandedit]
  2638 00002202 FE05[3D230000]      <2> 		inc byte [commandedit]
  2639                              <2> 	getccmdlp:
  2640 00002208 4F                  <2> 		dec edi
  2641 00002209 8A07                <2> 		mov al, [edi]
  2642 0000220B 81FF[3E800500]      <2> 		cmp edi, commandbuf
  2643 00002211 7231                <2> 		jb getcmdresetcommandbuf
  2644 00002213 81EF[3E800500]      <2> 		sub edi, commandbuf
  2645 00002219 3B3D[32800500]      <2> 		cmp edi, [commandbufpos]
  2646 0000221F 0F84A5FCFFFF        <2> 		je near rdprintb
  2647 00002225 81C7[3E800500]      <2> 		add edi, commandbuf
  2648 0000222B 3C00                <2> 		cmp al, 0
  2649 0000222D 75D9                <2> 		jne getccmdlp
  2650 0000222F FECC                <2> 		dec ah
  2651 00002231 80FC00              <2> 		cmp ah, 0
  2652 00002234 77D2                <2> 		ja getccmdlp
  2653 00002236 47                  <2> 		inc edi
  2654 00002237 81FF[3E900500]      <2> 		cmp edi, commandbufend
  2655 0000223D 770D                <2> 		ja fixcmdbufb4morerdpr
  2656 0000223F E915000000          <2> 		jmp morerdprup
  2657                              <2> 	getcmdresetcommandbuf:
  2658 00002244 BF[3E900500]        <2> 		mov edi, commandbufend
  2659 00002249 47                  <2> 		inc edi
  2660 0000224A EBBC                <2> 		jmp getccmdlp
  2661                              <2> 	fixcmdbufb4morerdpr:
  2662 0000224C 4F                  <2> 		dec edi
  2663 0000224D 81EF[3E900500]      <2> 		sub edi, commandbufend
  2664 00002253 81C7[3E800500]      <2> 		add edi, commandbuf
  2665                              <2> 	morerdprup:
  2666 00002259 8A07                <2> 		mov al, [edi]
  2667 0000225B 47                  <2> 		inc edi
  2668 0000225C 81EF[3E800500]      <2> 		sub edi, commandbuf
  2669 00002262 3C00                <2> 		cmp al, 0
  2670 00002264 0F8400FEFFFF        <2> 		je near rdprintb2
  2671 0000226A 3B3D[32800500]      <2> 		cmp edi, [commandbufpos]
  2672 00002270 0F83F4FDFFFF        <2> 		jae near rdprintb2
  2673 00002276 81C7[3E800500]      <2> 		add edi, commandbuf
  2674 0000227C 8806                <2> 		mov [esi], al
  2675 0000227E 46                  <2> 		inc esi
  2676 0000227F 57                  <2> 		push edi
  2677 00002280 668B1D[37230000]    <2> 		mov bx, [modkeyrdpr]
  2678 00002287 30E4                <2> 		xor ah, ah
  2679 00002289 E859010000          <2> 		call prcharq
  2680 0000228E 5F                  <2> 		pop edi
  2681 0000228F 81FF[3E900500]      <2> 		cmp edi, commandbufend
  2682 00002295 76C2                <2> 		jbe morerdprup
  2683 00002297 BF[3E800500]        <2> 		mov edi, commandbuf
  2684 0000229C EBBB                <2> 		jmp morerdprup
  2685                              <2> 
  2686                              <2> 	rdprdel:
  2687 0000229E BF[88CA0300]        <2> 		mov edi, buftxt2
  2688 000022A3 8A07                <2> 		mov al, [edi]
  2689 000022A5 3C00                <2> 		cmp al, 0
  2690 000022A7 0F841DFCFFFF        <2> 		je near rdprintb
  2691 000022AD 8806                <2> 		mov [esi], al
  2692 000022AF 3C80                <2> 		cmp al, 0x80
  2693 000022B1 7216                <2> 		jb .fn
  2694                              <2> 	.lp:
  2695 000022B3 46                  <2> 		inc esi
  2696 000022B4 47                  <2> 		inc edi
  2697 000022B5 8A07                <2> 		mov al, [edi]
  2698 000022B7 3C00                <2> 		cmp al, 0
  2699 000022B9 0F840BFCFFFF        <2> 		je near rdprintb
  2700 000022BF 8806                <2> 		mov [esi], al
  2701 000022C1 3C80                <2> 		cmp al, 0x80
  2702 000022C3 7204                <2> 		jb .fn
  2703 000022C5 3CC0                <2> 		cmp al, 0xC0
  2704 000022C7 72EA                <2> 		jb .lp
  2705                              <2> 	.fn:
  2706 000022C9 E824FEFFFF          <2> 		call shiftbuftxt2lft
  2707 000022CE E814010000          <2> 		call prcharq
  2708                              <2> 		
  2709                              <2> 	rdprbscheck:
  2710 000022D3 3B35[39230000]      <2> 		cmp esi, [firstesirdpr]
  2711 000022D9 0F86EBFBFFFF        <2> 		jbe near rdprintb
  2712                              <2> 	goodbscheck:
  2713 000022DF 4E                  <2> 		dec esi
  2714 000022E0 8A46FF              <2> 		mov al, [esi - 1]
  2715 000022E3 C60600              <2> 		mov byte [esi], 0
  2716 000022E6 3CC0                <2> 		cmp al, 0xC0
  2717 000022E8 7309                <2> 		jae .onemore
  2718 000022EA 3C80                <2> 		cmp al, 0x80
  2719 000022EC 73F1                <2> 		jae goodbscheck
  2720 000022EE E904000000          <2> 		jmp .nomore
  2721                              <2> 	.onemore:
  2722 000022F3 4E                  <2> 		dec esi
  2723 000022F4 C60600              <2> 		mov byte [esi], 0		
  2724                              <2> 	.nomore:
  2725 000022F7 668B1D[37230000]    <2> 		mov bx, [modkeyrdpr]
  2726 000022FE B008                <2> 		mov al, 8
  2727 00002300 E99FFCFFFF          <2> 		jmp bscheckequal
  2728                              <2> 		
  2729                              <2> 	shiftbuftxt2:
  2730 00002305 55                  <2> 		push ebp
  2731 00002306 89FD                <2> 		mov ebp, edi
  2732                              <2> 	.lp:
  2733 00002308 3C00                <2> 		cmp al, 0
  2734 0000230A 7409                <2> 		je noshiftbuftxt2
  2735 0000230C 47                  <2> 		inc edi
  2736 0000230D 8A27                <2> 		mov ah, [edi]
  2737 0000230F 8807                <2> 		mov [edi], al
  2738 00002311 88E0                <2> 		mov al, ah
  2739 00002313 EBF3                <2> 		jmp .lp
  2740                              <2> 	noshiftbuftxt2:
  2741 00002315 8A4500              <2> 		mov al, [ebp]
  2742 00002318 5D                  <2> 		pop ebp
  2743 00002319 3CC0                <2> 		cmp al, 0xC0
  2744 0000231B 7304                <2> 		jae .nofix
  2745 0000231D 3C80                <2> 		cmp al, 0x80
  2746 0000231F 73E4                <2> 		jae shiftbuftxt2
  2747                              <2> 	.nofix:
  2748 00002321 BF[88CA0300]        <2> 		mov edi, buftxt2
  2749 00002326 4E                  <2> 		dec esi
  2750 00002327 8A06                <2> 		mov al, [esi]
  2751 00002329 8807                <2> 		mov [edi], al
  2752 0000232B C60600              <2> 		mov byte [esi], 0
  2753 0000232E 66B80800            <2> 		mov ax, 8
  2754 00002332 C3                  <2> 		ret
  2755                              <2> 		
  2756 00002333 0000                <2> axcache dw 0
  2757 00002335 0000                <2> endkeyrdpr dw 0
  2758 00002337 0000                <2> modkeyrdpr dw 0
  2759 00002339 00000000            <2> firstesirdpr dd 0
  2760 0000233D 00                  <2> commandedit db 0
  2761 0000233E 00                  <2> txtmask db 0
  2762 0000233F 00000000            <2> buftxtloc dd 0
  2763 00002343 00000000            <2> endbufferrdpr dd 0
  2764 00002347 082000              <2> backcursor db 8," ",0
  2765                              <1> 	%include 'source/interrupts/5_readchar.asm'
  2766                              <2> readchar:
  2767 0000234A E807000000          <2> 	call rdcharint
  2768 0000234F E95ADFFFFF          <2> 	jmp timerinterrupt
  2769                              <2> getchar:
  2770 00002354 30C0                <2> 	xor al, al
  2771                              <2> 	rdcharint:		;get char, if al is 0, wait for key
  2772 00002356 66C705[B8230000]01- <2> 		mov word [trans], 1
  2773 0000235E 00                  <2>
  2774 0000235F 3C00                <2> 		cmp al, 0
  2775 00002361 7509                <2> 		jne transcheck
  2776 00002363 66C705[B8230000]00- <2> 		mov word [trans], 0
  2777 0000236B 00                  <2>
  2778                              <2> 	transcheck:
  2779                              <2> 	%ifdef io.serial
  2780                              <2> 		call serial.receive
  2781                              <2> 		xor ah, ah
  2782                              <2> 		cmp al, 13
  2783                              <2> 		je rdenter
  2784                              <2> 	%else
  2785 0000236C E8F63D0000          <2> 		call getkey
  2786 00002371 66A1[B6230000]      <2> 		mov ax, [lastkey + 2]
  2787 00002377 663D1C00            <2> 		cmp ax, 0x1C
  2788 0000237B 7425                <2> 		je rdenter
  2789                              <2> 	%endif
  2790 0000237D 66A1[B4230000]      <2> 		mov ax, [lastkey]
  2791 00002383 668B1D[B8230000]    <2> 		mov bx, [trans]
  2792 0000238A 803D[45610000]E0    <2> 		cmp byte [specialkey], 0xE0
  2793 00002391 7500                <2> 		jne nospecialtrans
  2794                              <2> 	nospecialtrans:
  2795 00002393 6609C3              <2> 		or bx, ax
  2796 00002396 6681FB0000          <2> 		cmp bx, 0
  2797 0000239B 74CF                <2> 		je transcheck
  2798 0000239D E90C000000          <2> 		jmp rdend
  2799                              <2> 	rdenter:
  2800 000023A2 C1E010              <2> 		shl eax, 16
  2801 000023A5 66B80A00            <2> 		mov ax, 10
  2802 000023A9 A3[B4230000]        <2> 		mov [lastkey], eax
  2803                              <2> 	rdend:
  2804 000023AE A1[B4230000]        <2> 		mov eax, [lastkey]
  2805 000023B3 C3                  <2> 		ret
  2806                              <2> 		
  2807 000023B4 00000000            <2> lastkey dd 0
  2808 000023B8 0000                <2> trans dw 0
  2809                              <1> 	%include 'source/interrupts/6_prntchar.asm'
  2810                              <2> prntchar:
  2811 000023BA 30E4                <2> 	xor ah, ah ;this kills unicode from the outside unfortunately
  2812                              <2> %ifdef io.serial
  2813                              <2> 	call prcharint
  2814                              <2> 	jmp timerinterrupt
  2815                              <2> prcharint:	
  2816                              <2> prcharq:
  2817                              <2> 	call serial.send
  2818                              <2> 	ret
  2819                              <2> %else
  2820 000023BC 38FB                <2> cmp bl, bh
  2821 000023BE 740A                <2> je prchar.notimer
  2822 000023C0 E80B000000          <2> call prcharint
  2823 000023C5 E9E4DEFFFF          <2> jmp timerinterrupt
  2824                              <2> prchar.notimer:
  2825 000023CA E818000000          <2> 	call prcharq
  2826 000023CF CF                  <2> 	iret
  2827                              <2> 	
  2828                              <2> prcharint:	;print char, char in ax, modifier in bx, if ecx is eax then termcopy will not happen, will run termcopy if called as is
  2829 000023D0 663DFFFE            <2> 	cmp ax, 0xFEFF
  2830 000023D4 740E                <2> 	je .ret
  2831 000023D6 39C1                <2> 	cmp ecx, eax
  2832 000023D8 740D                <2> 	je prcharq
  2833 000023DA E808000000          <2> 	call prcharq
  2834 000023DF E8CE040000          <2> 	call termcopy
  2835                              <2> .ret:
  2836 000023E4 C3                  <2> 	ret
  2837 000023E5 00                  <2> termguion db 0
  2838 000023E6 00                  <2> termcopyon db 0
  2839                              <2> prcharq:
  2840 000023E7 C1E310              <2> 	shl ebx, 16
  2841 000023EA 6689C3              <2> 	mov bx, ax
  2842 000023ED 89D8                <2> 	mov eax, ebx
  2843 000023EF A3[DC250000]        <2> 	mov [charbuf], eax
  2844 000023F4 8B1D[D4250000]      <2> 	mov ebx, [videobufpos]
  2845 000023FA BF[9ED50300]        <2> 	mov edi, videobuf
  2846 000023FF 01DF                <2> 	add edi, ebx
  2847 00002401 A1[BD280000]        <2> 	mov eax, [removedvideo]
  2848 00002406 8907                <2> 	mov [edi], eax
  2849 00002408 A1[DC250000]        <2> 	mov eax, [charbuf]
  2850 0000240D 31D2                <2> 	xor edx, edx
  2851 0000240F 668B15[D8250000]    <2> 	mov dx, [charpos]
  2852 00002416 31C9                <2> 	xor ecx, ecx
  2853 00002418 668B0D[DA250000]    <2> 	mov cx, [charxy]
  2854 0000241F 663D0900            <2> 	cmp ax, 9
  2855 00002423 0F8479000000        <2> 	je near prtab
  2856 00002429 663D0D00            <2> 	cmp ax, 13		;I am phasing this out-it is used by windows but not unix based systems
  2857 0000242D 0F849C000000        <2> 	je near prcr
  2858 00002433 663D0A00            <2> 	cmp ax, 10
  2859 00002437 0F84E5000000        <2> 	je near prnlcr
  2860 0000243D 663D0800            <2> 	cmp ax, 8
  2861 00002441 0F8499000000        <2> 	je near prbs
  2862 00002447 663DFF00            <2> 	cmp ax, 255		;null character
  2863 0000244B 0F8424000000        <2> 	je near donescr
  2864 00002451 663D0030            <2> 	cmp ax, (fontend - fonts)/16
  2865 00002455 0F8341000000        <2> 	jae near prnofont
  2866                              <2> donepr:
  2867 0000245B 8907                <2> 	mov [edi], eax
  2868 0000245D 81C704000000        <2> 	add edi, 4
  2869 00002463 FEC2                <2> 	inc dl
  2870                              <2> donecrnl:
  2871 00002465 38CA                <2> 	cmp dl, cl
  2872 00002467 0F83D9000000        <2> 	jae near preol
  2873                              <2> doneeol:
  2874 0000246D 38EE                <2> 	cmp dh, ch
  2875 0000246F 0F83EE000000        <2> 	jae near prscr	
  2876                              <2> donescr:
  2877 00002475 89FB                <2> 	mov ebx, edi
  2878 00002477 8B07                <2> 	mov eax, [edi]
  2879 00002479 A3[BD280000]        <2> 	mov [removedvideo], eax
  2880 0000247E 81EB[9ED50300]      <2> 	sub ebx, videobuf
  2881 00002484 891D[D4250000]      <2> 	mov [videobufpos], ebx
  2882 0000248A 668915[D8250000]    <2> 	mov [charpos], dx
  2883 00002491 A1[DC250000]        <2> 	mov eax, [charbuf]
  2884 00002496 89C3                <2> 	mov ebx, eax
  2885 00002498 C1EB10              <2> 	shr ebx, 16
  2886 0000249B C3                  <2> 	ret
  2887                              <2> 	
  2888                              <2> 	prnofont:
  2889 0000249C 66B80200            <2> 		mov ax, 2
  2890 000024A0 EBB9                <2> 		jmp donepr
  2891                              <2> 	prtab:
  2892 000024A2 8B1D[D0250000]      <2> 		mov ebx, [linebeginpos]
  2893 000024A8 81EF[9ED50300]      <2> 		sub edi, videobuf
  2894 000024AE 29DF                <2> 		sub edi, ebx
  2895 000024B0 C1EF05              <2> 		shr edi, 5
  2896 000024B3 C1E705              <2> 		shl edi, 5
  2897 000024B6 81C720000000        <2> 		add edi, 32
  2898 000024BC C0EA03              <2> 		shr dl, 3
  2899 000024BF C0E203              <2> 		shl dl, 3
  2900 000024C2 80C208              <2> 		add dl, 8
  2901 000024C5 81C7[9ED50300]      <2> 		add edi, videobuf
  2902 000024CB 01DF                <2> 		add edi, ebx
  2903 000024CD EB96                <2> 		jmp donecrnl
  2904                              <2> 	
  2905                              <2> 	prcr:
  2906 000024CF 30D2                <2> 		xor dl, dl
  2907 000024D1 BF[9ED50300]        <2> 		mov edi, videobuf
  2908 000024D6 8B1D[D0250000]      <2> 		mov ebx, [linebeginpos]
  2909 000024DC 01DF                <2> 		add edi, ebx
  2910 000024DE EB85                <2> 		jmp donecrnl
  2911                              <2> 			
  2912                              <2> 	prbs:
  2913 000024E0 8B1D[D0250000]      <2> 		mov ebx, [linebeginpos]
  2914 000024E6 80FA00              <2> 		cmp dl, 0
  2915 000024E9 7415                <2> 		je prbackline
  2916                              <2> 	prnobmr:
  2917 000024EB 891D[D0250000]      <2> 		mov [linebeginpos], ebx
  2918 000024F1 FECA                <2> 		dec dl
  2919 000024F3 31C0                <2> 		xor eax, eax
  2920 000024F5 81EF04000000        <2> 		sub edi, 4
  2921 000024FB E965FFFFFF          <2> 		jmp donecrnl
  2922                              <2> 	prbackline:
  2923 00002500 6631DB              <2> 		xor bx, bx
  2924 00002503 88CA                <2> 		mov dl, cl
  2925 00002505 80FE00              <2> 		cmp dh, 0
  2926 00002508 74E1                <2> 		je prnobmr
  2927 0000250A 8B1D[D0250000]      <2> 		mov ebx, [linebeginpos]
  2928 00002510 6651                <2> 		push cx
  2929 00002512 31C9                <2> 		xor ecx, ecx
  2930 00002514 8A0C24              <2> 		mov cl, [esp]
  2931 00002517 C1E102              <2> 		shl ecx, 2
  2932 0000251A 29CB                <2> 		sub ebx, ecx
  2933 0000251C 6659                <2> 		pop cx
  2934 0000251E FECE                <2> 		dec dh
  2935 00002520 EBC9                <2> 		jmp prnobmr
  2936                              <2> 		
  2937                              <2> 	prnlcr:
  2938 00002522 FEC6                <2> 		inc dh
  2939 00002524 31DB                <2> 		xor ebx, ebx
  2940 00002526 30D2                <2> 		xor dl, dl
  2941 00002528 88CB                <2> 		mov bl, cl
  2942 0000252A 66C1E302            <2> 		shl bx, 2
  2943 0000252E BF[9ED50300]        <2> 		mov edi, videobuf
  2944 00002533 031D[D0250000]      <2> 		add ebx, [linebeginpos]
  2945 00002539 891D[D0250000]      <2> 		mov [linebeginpos], ebx
  2946 0000253F 01DF                <2> 		add edi, ebx
  2947 00002541 E91FFFFFFF          <2> 		jmp donecrnl
  2948                              <2> 		
  2949                              <2> 	preol:
  2950 00002546 30D2                <2> 		xor dl, dl
  2951 00002548 FEC6                <2> 		inc dh
  2952 0000254A 31DB                <2> 		xor ebx, ebx
  2953 0000254C 88CB                <2> 		mov bl, cl
  2954 0000254E 66C1E302            <2> 		shl bx, 2
  2955 00002552 031D[D0250000]      <2> 		add ebx, [linebeginpos]
  2956 00002558 891D[D0250000]      <2> 		mov [linebeginpos], ebx
  2957 0000255E E90AFFFFFF          <2> 		jmp doneeol
  2958                              <2> 	prscr:
  2959 00002563 FECE                <2> 		dec dh
  2960 00002565 BF[9ED50300]        <2> 		mov edi, videobuf
  2961 0000256A 31DB                <2> 		xor ebx, ebx
  2962 0000256C 88CB                <2> 		mov bl, cl
  2963 0000256E 66C1E302            <2> 		shl bx, 2
  2964 00002572 01FB                <2> 		add ebx, edi
  2965                              <2> 	intscrollloop:
  2966 00002574 8B03                <2> 		mov eax, [ebx]
  2967 00002576 8907                <2> 		mov [edi], eax
  2968 00002578 81C704000000        <2> 		add edi, 4
  2969 0000257E 81C304000000        <2> 		add ebx, 4
  2970 00002584 FEC9                <2> 		dec cl
  2971 00002586 80F900              <2> 		cmp cl, 0
  2972 00002589 75E9                <2> 		jne intscrollloop
  2973 0000258B 8A0D[DA250000]      <2> 		mov cl, [charxy]
  2974 00002591 FECD                <2> 		dec ch
  2975 00002593 80FD01              <2> 		cmp ch, 1
  2976 00002596 77DC                <2> 		ja intscrollloop
  2977 00002598 31C0                <2> 		xor eax, eax
  2978 0000259A 81EF[9ED50300]      <2> 		sub edi, videobuf
  2979 000025A0 893D[D0250000]      <2> 		mov [linebeginpos], edi
  2980 000025A6 81C7[9ED50300]      <2> 		add edi, videobuf
  2981 000025AC 89FB                <2> 		mov ebx, edi
  2982                              <2> 	intloopclear:
  2983 000025AE 8903                <2> 		mov [ebx], eax
  2984 000025B0 81C304000000        <2> 		add ebx, 4
  2985 000025B6 FEC9                <2> 		dec cl
  2986 000025B8 80F900              <2> 		cmp cl, 0
  2987 000025BB 75F1                <2> 		jne intloopclear
  2988 000025BD FECD                <2> 		dec ch
  2989 000025BF 80FD00              <2> 		cmp ch, 0
  2990 000025C2 75EA                <2> 		jne intloopclear
  2991 000025C4 668B0D[DA250000]    <2> 		mov cx, [charxy]
  2992 000025CB E9A5FEFFFF          <2> 		jmp donescr
  2993                              <2> 		
  2994 000025D0 00000000            <2> linebeginpos dd 0
  2995 000025D4 00000000            <2> videobufpos: dd 0
  2996 000025D8 0000                <2> charpos db 0,0
  2997 000025DA 501E                <2> charxy db 80,30
  2998 000025DC 00000000            <2> charbuf dd 0
  2999                              <2> %endif
  3000                              <1> 	%include 'source/interrupts/7_openfile.asm'
  3001                              <2> openfile:
  3002 000025E0 E829450000          <2> 	call loadfile
  3003 000025E5 E9C4DCFFFF          <2> 	jmp timerinterrupt
  3004                              <1> 	%include 'source/interrupts/9_num2str.asm'
  3005                              <2> num2str:
  3006 000025EA 3C00                <2> 	cmp al, 0
  3007 000025EC 750A                <2> 	jne num2strb
  3008 000025EE E8920C0000          <2> 	call showdec
  3009 000025F3 E9B6DCFFFF          <2> 	jmp timerinterrupt
  3010                              <2> num2strb:
  3011 000025F8 E8CD0B0000          <2> 	call showhex
  3012 000025FD E9ACDCFFFF          <2> 	jmp timerinterrupt
  3013                              <1> 	%include 'source/interrupts/10_str2num.asm'
  3014                              <2> str2num:
  3015 00002602 89F7                <2> 	mov edi, esi
  3016 00002604 E8570D0000          <2> 	call cnvrttxt	;the string goes into esi, number into ecx
  3017 00002609 E9A0DCFFFF          <2> 	jmp timerinterrupt
  3018                              <2> 	
  3019                              <1> %ifdef threads.included
  3020                              <1> 	%include 'source/interrupts/11_forkthread.asm'
  3021                              <2> forkthread:
  3022                              <2> 			 ;esi is next thread's start address, if 0, fork current thread
  3023                              <2> 			;returns the PID of the new fork in ebx
  3024                              <2> ;WARNING:THIS WILL NOT WORK IN C UNTIL IT COPIES THE ENTIRE STACK
  3025 0000260E FA                  <2> 	cli
  3026 0000260F 60                  <2> 	pushad
  3027 00002610 8925[DD260000]      <2> 	mov [.espold], esp
  3028 00002616 C605[C86C0000]01    <2> 	mov byte [threadson], 1
  3029 0000261D 8B1D[C96C0000]      <2> 	mov ebx, [currentthread]
  3030 00002623 C1E302              <2> 	shl ebx, 2
  3031 00002626 89A3[52B00500]      <2> 	mov [threadlist + ebx], esp
  3032 0000262C C1EB02              <2> 	shr ebx, 2
  3033 0000262F 81FB00000000        <2> 	cmp ebx, 0
  3034 00002635 750C                <2> 	jne .simplestack
  3035 00002637 BB[00B40300]        <2> 	mov ebx, stackend
  3036 0000263C 29E3                <2> 	sub ebx, esp
  3037 0000263E E90B000000          <2> 	jmp .stackcalcdone
  3038                              <2> .simplestack:
  3039 00002643 C1E30A              <2> 	shl ebx, 10
  3040 00002646 81C3[52C80500]      <2> 	add ebx, stack1
  3041 0000264C 29E3                <2> 	sub ebx, esp
  3042                              <2> .stackcalcdone:
  3043 0000264E 29DC                <2> 	sub esp, ebx
  3044 00002650 81C4[52C80500]      <2> 	add esp, stack1
  3045 00002656 8B1D[C46C0000]      <2> 	mov ebx, [lastthread]
  3046 0000265C C1E308              <2> 	shl ebx, 8
  3047 0000265F 01DC                <2> 	add esp, ebx
  3048 00002661 891D[E1260000]      <2> 	mov [.stackend], ebx
  3049                              <2> 
  3050 00002667 89E5                <2> 	mov ebp, esp
  3051 00002669 8B25[DD260000]      <2> 	mov esp, [.espold]
  3052                              <2> 
  3053 0000266F C1EB0A              <2> 	shr ebx, 10 ;get pid then push it
  3054 00002672 895C2410            <2> 	mov [esp + 16], ebx ;set the old ebx to the new PID
  3055                              <2> 
  3056 00002676 31DB                <2> 	xor ebx, ebx
  3057                              <2> .stackcopy:
  3058 00002678 668B041C            <2> 	mov ax, [esp + ebx]
  3059 0000267C 6689441D00          <2> 	mov [ebp + ebx], ax
  3060 00002681 81C302000000        <2> 	add ebx, 2
  3061 00002687 3B1D[E1260000]      <2> 	cmp ebx, [.stackend]
  3062 0000268D 72E9                <2> 	jb .stackcopy
  3063                              <2> 
  3064 0000268F 31C0                <2> 	xor eax, eax
  3065 00002691 668CC8              <2> 	mov ax, cs
  3066 00002694 89C2                <2> 	mov edx, eax
  3067 00002696 8B4C2428            <2> 	mov ecx, [esp + 40]
  3068 0000269A 81C900020000        <2> 	or ecx, 0x200
  3069                              <2> 	
  3070 000026A0 81FE00000000        <2> 	cmp esi, 0
  3071 000026A6 7504                <2> 	jne .nochangestack
  3072 000026A8 8B742420            <2> 	mov esi, [esp + 32]
  3073                              <2> .nochangestack:
  3074 000026AC 89F0                <2> 	mov eax, esi
  3075 000026AE 89EC                <2> 	mov esp, ebp
  3076                              <2> 
  3077 000026B0 89442420            <2> 	mov [esp + 32], eax
  3078 000026B4 89542424            <2> 	mov [esp + 36], edx
  3079 000026B8 894C2428            <2> 	mov [esp + 40], ecx
  3080                              <2> 
  3081 000026BC 8B1D[C46C0000]      <2> 	mov ebx, [lastthread]
  3082 000026C2 89A3[52B00500]      <2> 	mov [threadlist + ebx], esp
  3083 000026C8 81C304000000        <2> 	add ebx, 4
  3084 000026CE 891D[C46C0000]      <2> 	mov [lastthread], ebx
  3085 000026D4 8B25[DD260000]      <2> 	mov esp, [.espold]
  3086 000026DA 61                  <2> 	popad
  3087 000026DB FB                  <2> 	sti
  3088 000026DC CF                  <2> 	iret
  3089                              <2> 
  3090 000026DD 00000000            <2> .espold dd 0
  3091 000026E1 00000000            <2> .stackend dd 0
  3092                              <1> %endif
  3093                              <1> 	%include 'source/interrupts/12_gettime.asm'
  3094                              <2> gettime:
  3095 000026E5 A1[67020000]        <2> 	mov eax, [timeseconds]
  3096 000026EA 8B1D[6B020000]      <2> 	mov ebx, [timenanoseconds]
  3097 000026F0 89D9                <2> 	mov ecx, ebx
  3098 000026F2 C1E90A              <2> 	shr ecx, 10	;this is in microseconds
  3099 000026F5 E9B4DBFFFF          <2> 	jmp timerinterrupt
  3100                              <1> 	%include 'source/interrupts/13_settime.asm'
  3101                              <2> settime:
  3102 000026FA A3[67020000]        <2> 	mov [timeseconds], eax
  3103 000026FF 891D[6B020000]      <2> 	mov [timenanoseconds], ebx
  3104 00002705 E9A4DBFFFF          <2> 	jmp timerinterrupt
  3105                              <2> 	
  3106                              <1> 	%include 'source/interrupts/14_runcmd.asm'
  3107                              <2> runcmd:
  3108 0000270A BF[88CE0300]        <2> 	mov edi, buftxt
  3109                              <2> cpcmd:
  3110 0000270F 8A06                <2> 	mov al, [esi]
  3111 00002711 8807                <2> 	mov [edi], al
  3112 00002713 46                  <2> 	inc esi
  3113 00002714 47                  <2> 	inc edi
  3114 00002715 3C00                <2> 	cmp al, 0
  3115 00002717 75F6                <2> 	jne cpcmd
  3116 00002719 E8B4070000          <2> 	call run
  3117 0000271E CF                  <2> 	iret
  3118                              <1> 	%include 'source/interrupts/15_proginfo.asm'
  3119                              <2> proginfo:
  3120                              <2> 	;mov ebx, variables
  3121 0000271F 8B35[A82F0000]      <2> 	mov esi, [currentcommandloc]
  3122 00002725 89F7                <2> 	mov edi, esi
  3123 00002727 31C9                <2> 	xor ecx, ecx
  3124                              <2> getcommandzeroes:
  3125 00002729 8A07                <2> 	mov al, [edi]
  3126 0000272B 47                  <2> 	inc edi
  3127 0000272C 3C3B                <2> 	cmp al, ';'
  3128 0000272E 740B                <2> 	je nomorezeroes
  3129 00002730 3C00                <2> 	cmp al, 0
  3130 00002732 7407                <2> 	je nomorezeroes
  3131 00002734 3C20                <2> 	cmp al, ' '
  3132 00002736 75F1                <2> 	jne getcommandzeroes
  3133 00002738 41                  <2> 	inc ecx
  3134 00002739 EBEE                <2> 	jmp getcommandzeroes
  3135                              <2> nomorezeroes:
  3136 0000273B 41                  <2> 	inc ecx
  3137 0000273C 4F                  <2> 	dec edi
  3138 0000273D 8B1D[14BA0300]      <2> 	mov ebx, [uid]
  3139 00002743 8B15[C96C0000]      <2> 	mov edx, [currentthread]
  3140 00002749 CF                  <2> 	iret
  3141                              <2> 	
  3142                              <1> 	%include 'source/interrupts/16_hooksig.asm'
  3143                              <2> hooksig: ;hook code in ESI to signal in AL
  3144 0000274A 3C00                <2> 	cmp al, 0
  3145 0000274C 7507                <2> 	jne .quit	;only sig 0, the escape key, is handled, and only for one app
  3146                              <2> ;	xor ebx, ebx
  3147                              <2> ;	mov bl, al
  3148                              <2> ;	shl bl, 2
  3149 0000274E BF[04B40300]        <2> 	mov edi, sigtable
  3150 00002753 8937                <2> 	mov [edi], esi
  3151                              <2> .quit:
  3152 00002755 E954DBFFFF          <2> 	jmp timerinterrupt
  3153                              <1> %ifdef gui.included
  3154                              <1> 	%include 'source/interrupts/17_guiint.asm'
  3155                              <2> guiint:
  3156 0000275A 3CFD                <2> 	cmp al, 253
  3157 0000275C 0F8473000000        <2> 	je near .getinfo
  3158 00002762 803D[EF8E0000]01    <2> 	cmp byte [guion], 1
  3159 00002769 0F8550000000        <2> 	jne near .nogui
  3160 0000276F 3C00                <2> 	cmp al, 0
  3161 00002771 0F844D000000        <2> 	je near .clear
  3162 00002777 3C01                <2> 	cmp al, 1
  3163 00002779 0F84A8000000        <2> 	je near .putpixel
  3164 0000277F 3C02                <2> 	cmp al, 2
  3165 00002781 0F84AD000000        <2> 	je near .drawtext
  3166 00002787 3C03                <2> 	cmp al, 3
  3167 00002789 0F84C0000000        <2> 	je near .drawline
  3168 0000278F 3C04                <2> 	cmp al, 4
  3169 00002791 0F84CB000000        <2> 	je near .drawcircle
  3170 00002797 3C05                <2> 	cmp al, 5
  3171 00002799 0F84D3000000        <2> 	je near .fillcircle
  3172 0000279F 3C06                <2> 	cmp al, 6
  3173 000027A1 0F84DB000000        <2> 	je near .drawsquare
  3174 000027A7 3C07                <2> 	cmp al, 7
  3175 000027A9 0F84E6000000        <2> 	je near .fillsquare
  3176 000027AF 3CFE                <2> 	cmp al, 254
  3177 000027B1 0F8446000000        <2> 	je near .setinfo
  3178 000027B7 3CFF                <2> 	cmp al, 255
  3179 000027B9 0F8443000000        <2> 	je near .reset
  3180                              <2> .nogui:
  3181 000027BF E9EADAFFFF          <2> 	jmp timerinterrupt
  3182                              <2> 
  3183                              <2> .clear:		;color in bx
  3184 000027C4 66891D[AE730000]    <2> 	mov [background], bx
  3185                              <2> %ifdef gui.background
  3186                              <2> 	mov ebx, [backgroundimage]
  3187                              <2> 	cmp ebx, 0
  3188                              <2> 	je .clearit
  3189                              <2> 	mov dword [backgroundimage], 0
  3190                              <2> 	mov [.bgi], ebx
  3191                              <2> .clearit:
  3192                              <2> %endif
  3193 000027CB E8924B0000          <2> 	call guiclear
  3194 000027D0 E9D9DAFFFF          <2> 	jmp timerinterrupt
  3195                              <2> 	
  3196                              <2> .getinfo:	;puts screen size in (dx, cx), background color in bx, and will put other stuff in other places
  3197 000027D5 31DB                <2> 	xor ebx, ebx
  3198 000027D7 31C9                <2> 	xor ecx, ecx
  3199 000027D9 31D2                <2> 	xor edx, edx
  3200 000027DB 381D[EF8E0000]      <2> 	cmp [guion], bl
  3201 000027E1 74DC                <2> 	je .nogui
  3202 000027E3 668B1D[AE730000]    <2> 	mov bx, [background]
  3203 000027EA 668B15[5A5A0000]    <2> 	mov dx, [resolutionx]
  3204 000027F1 668B0D[5C5A0000]    <2> 	mov cx, [resolutiony]
  3205 000027F8 E9B1DAFFFF          <2> 	jmp timerinterrupt
  3206                              <2> 	
  3207                              <2> .setinfo:	;does nothing yet. will get screen size in (dx, cx), background color in bx, and will put other stuff in other places
  3208 000027FD E9ACDAFFFF          <2> 	jmp timerinterrupt
  3209                              <2> .reset:		;resets the screen to the original settings
  3210 00002802 66BBCF7B            <2> 	mov bx, background.original
  3211 00002806 66891D[AE730000]    <2> 	mov [background], bx
  3212 0000280D 66BBFFFF            <2> 	mov bx, 0xFFFF
  3213 00002811 66891D[6B7A0000]    <2> 	mov [colorfont2], bx
  3214                              <2> %ifdef gui.background
  3215                              <2> 	mov ebx, [backgroundimage]
  3216                              <2> 	cmp ebx, 0
  3217                              <2> 	jne .resetit
  3218                              <2> 	mov ebx, [.bgi]
  3219                              <2> 	mov [backgroundimage], ebx
  3220                              <2> .resetit:
  3221                              <2> %endif
  3222 00002818 E8454B0000          <2> 	call guiclear
  3223 0000281D E8904B0000          <2> 	call reloadallgraphics
  3224 00002822 E987DAFFFF          <2> 	jmp timerinterrupt
  3225                              <2> 
  3226                              <2> %ifdef gui.background
  3227                              <2> 	.bgi dd 0
  3228                              <2> %endif
  3229                              <2> 	
  3230                              <2> .putpixel:	;pixel location in (dx, cx), color in bx
  3231 00002827 6689DE              <2> 	mov si, bx
  3232 0000282A E892610000          <2> 	call putpixel
  3233 0000282F E97ADAFFFF          <2> 	jmp timerinterrupt
  3234                              <2> 
  3235                              <2> .drawtext:	;background in di, foreground in bx, location in (dx,cx), string in esi
  3236 00002834 66D1E2              <2> 	shl dx, 1
  3237 00002837 66891D[6B7A0000]    <2> 	mov [colorfont2], bx
  3238 0000283E 66893D[AE730000]    <2> 	mov [background], di
  3239 00002845 E8B9510000          <2> 	call showstring2
  3240 0000284A E95FDAFFFF          <2> 	jmp timerinterrupt
  3241                              <2> 
  3242                              <2> .drawline:	;color in bx, start in (dx,cx), end in (di,si)
  3243 0000284F 6689F0              <2> 	mov ax, si
  3244 00002852 6689DE              <2> 	mov si, bx
  3245 00002855 6689FB              <2> 	mov bx, di
  3246 00002858 E8D9490000          <2> 	call drawline
  3247 0000285D E94CDAFFFF          <2> 	jmp timerinterrupt
  3248                              <2> 
  3249                              <2> .drawcircle: ;color in bx, radius in si, center in (dx,cx)
  3250 00002862 6689F0              <2> 	mov ax, si
  3251 00002865 6689DE              <2> 	mov si, bx
  3252 00002868 E852450000          <2> 	call drawcircle
  3253 0000286D E93CDAFFFF          <2> 	jmp timerinterrupt
  3254                              <2> 
  3255                              <2> .fillcircle: ;color in bx, radius in si, center in (dx,cx)
  3256 00002872 6689F0              <2> 	mov ax, si
  3257 00002875 6689DE              <2> 	mov si, bx
  3258 00002878 E854460000          <2> 	call fillcircle
  3259 0000287D E92CDAFFFF          <2> 	jmp timerinterrupt
  3260                              <2> 	
  3261                              <2> .drawsquare: ;color in bx, start in (dx, cx), end in (di, si)
  3262 00002882 6689F0              <2> 	mov ax, si
  3263 00002885 6689DE              <2> 	mov si, bx
  3264 00002888 6689FB              <2> 	mov bx, di
  3265 0000288B E8F24B0000          <2> 	call drawsquare
  3266 00002890 E919DAFFFF          <2> 	jmp timerinterrupt
  3267                              <2> 
  3268                              <2> .fillsquare: ;color in bx, start in (dx, cx), end in (di, si)
  3269 00002895 6689F0              <2> 	mov ax, si
  3270 00002898 6689DE              <2> 	mov si, bx
  3271 0000289B 6689FB              <2> 	mov bx, di
  3272 0000289E E8544C0000          <2> 	call fillsquare
  3273 000028A3 E906DAFFFF          <2> 	jmp timerinterrupt
  3274                              <1> %endif
  3275                              <1> %ifdef sound.included
  3276                              <1> 	%include 'source/interrupts/18_soundint.asm'
  3277                              <2> soundint:
  3278 000028A8 E901DAFFFF          <2> 	jmp timerinterrupt
  3279                              <1> %endif
  3280                              <1> %ifdef network.included
  3281                              <1> 	%include 'source/interrupts/19_netint.asm'
  3282                              <2> netint:
  3283 000028AD E9FCD9FFFF          <2> 	jmp timerinterrupt
  3284                              <1> %endif
  3285                              <1> 
  3286                              <1> termcopy:
  3287                              <1> %ifdef io.serial
  3288                              <1> 	ret
  3289                              <1> %else
  3290                              <1> %ifdef terminal.vsync
  3291                              <1> 	mov byte [termcopyneeded], 1
  3292                              <1> 	ret
  3293                              <1> %else
  3294 000028B2 E80A000000          <1> 	call newtermcopy
  3295 000028B7 C3                  <1> 	ret
  3296                              <1> %endif
  3297 000028B8 00                  <1> 	termcopyneeded db 0
  3298 000028B9 00000000            <1> 	termcursorpos dd 0
  3299 000028BD 00000000            <1> 	removedvideo dd 0
  3300                              <1> newtermcopy:
  3301 000028C1 60                  <1> 	pusha
  3302 000028C2 BF[9ED50300]        <1> 	mov edi, videobuf
  3303 000028C7 31DB                <1> 	xor ebx, ebx
  3304 000028C9 881D[B8280000]      <1> 	mov [termcopyneeded], bl
  3305 000028CF 8B1D[D4250000]      <1> 	mov ebx, [videobufpos]
  3306 000028D5 01DF                <1> 	add edi, ebx
  3307 000028D7 893D[B9280000]      <1> 	mov [termcursorpos], edi
  3308 000028DD E8E2000000          <1> 	call switchtermcursor
  3309 000028E2 803D[EF8E0000]00    <1> 	cmp byte [guion], 0
  3310 000028E9 0F8420000000        <1> 	je near nowincopy
  3311                              <1> %ifdef gui.included
  3312 000028EF C605[D2810000]00    <1> 	mov byte [mouseselecton], 0
  3313 000028F6 C605[E6230000]01    <1> 	mov byte [termcopyon], 1
  3314 000028FD 803D[E5230000]01    <1> 	cmp byte [termguion], 1
  3315 00002904 0F8452560000        <1> 	je near windowvideocopy
  3316                              <1> %endif
  3317 0000290A E9AE000000          <1> 	jmp nocopytermatall
  3318                              <1> nowincopy:
  3319 0000290F BE00000A00          <1> 	mov esi, 0xA0000
  3320 00002914 A1[47020000]        <1> 	mov eax, [basecache]
  3321 00002919 C1E004              <1> 	shl eax, 4
  3322 0000291C 29C6                <1> 	sub esi, eax
  3323 0000291E BF[9ED50300]        <1> 	mov edi, videobuf
  3324 00002923 31C9                <1> 	xor ecx, ecx
  3325 00002925 668B0D[DA250000]    <1> 	mov cx, [charxy]
  3326                              <1> nowincopy2:
  3327 0000292C 8B07                <1> 	mov eax, [edi]
  3328 0000292E 81C748D50000        <1> 	add edi, (videobuf2 - videobuf)
  3329 00002934 8B1F                <1> 	mov ebx, [edi]
  3330 00002936 8907                <1> 	mov [edi], eax
  3331 00002938 81EF48D50000        <1> 	sub edi, (videobuf2 - videobuf)
  3332 0000293E 81C702000000        <1> 	add edi, 2
  3333 00002944 39D8                <1> 	cmp eax, ebx
  3334 00002946 744B                <1> 	je nopresentwinfont
  3335 00002948 81EF02000000        <1> 	sub edi, 2
  3336 0000294E BD[49910000]        <1> 	mov ebp, fonts
  3337 00002953 31C0                <1> 	xor eax, eax
  3338 00002955 668B07              <1> 	mov ax, [edi]
  3339 00002958 C1E004              <1> 	shl eax, 4
  3340 0000295B 01C5                <1> 	add ebp, eax
  3341 0000295D 81C702000000        <1> 	add edi, 2
  3342 00002963 668B1F              <1> 	mov bx, [edi]
  3343 00002966 31D2                <1> 	xor edx, edx
  3344 00002968 8A15[DA250000]      <1> 	mov dl, [charxy]
  3345 0000296E C1C110              <1> 	rol ecx, 16
  3346 00002971 B110                <1> 	mov cl, 16
  3347                              <1> nowinfont:
  3348 00002973 8A4500              <1> 	mov al, [ebp]
  3349 00002976 D0C8                <1> 	ror al, 1
  3350 00002978 80FB80              <1> 	cmp bl, 0x80
  3351 0000297B 7202                <1> 	jb notnotfont
  3352 0000297D F6D0                <1> 	not al
  3353                              <1> notnotfont:
  3354 0000297F 8806                <1> 	mov [esi], al
  3355 00002981 01D6                <1> 	add esi, edx
  3356 00002983 45                  <1> 	inc ebp
  3357 00002984 FEC9                <1> 	dec cl
  3358 00002986 80F900              <1> 	cmp cl, 0
  3359 00002989 75E8                <1> 	jne nowinfont
  3360 0000298B C1E204              <1> 	shl edx, 4
  3361 0000298E 29D6                <1> 	sub esi, edx
  3362 00002990 C1C110              <1> 	rol ecx, 16
  3363                              <1> nopresentwinfont:
  3364 00002993 81C702000000        <1> 	add edi, 2
  3365 00002999 46                  <1> 	inc esi
  3366 0000299A FEC9                <1> 	dec cl
  3367 0000299C 80F900              <1> 	cmp cl, 0
  3368 0000299F 758B                <1> 	jne nowincopy2
  3369 000029A1 8A0D[DA250000]      <1> 	mov cl, [charxy]
  3370 000029A7 31D2                <1> 	xor edx, edx
  3371 000029A9 88CA                <1> 	mov dl, cl
  3372 000029AB 29D6                <1> 	sub esi, edx
  3373 000029AD C1E204              <1> 	shl edx, 4
  3374 000029B0 01D6                <1> 	add esi, edx
  3375 000029B2 FECD                <1> 	dec ch
  3376 000029B4 80FD00              <1> 	cmp ch, 0
  3377 000029B7 0F856FFFFFFF        <1> 	jne nowincopy2
  3378                              <1> nocopytermatall:
  3379 000029BD E802000000          <1> 	call switchtermcursor
  3380 000029C2 61                  <1> 	popa
  3381 000029C3 C3                  <1> 	ret
  3382                              <1> 	
  3383                              <1> switchtermcursor:
  3384 000029C4 8B3D[B9280000]      <1> 	mov edi, [termcursorpos]
  3385 000029CA 668B4702            <1> 	mov ax, [edi + 2]
  3386 000029CE 668B1F              <1> 	mov bx, [edi]
  3387 000029D1 663D8000            <1> 	cmp ax, 0x80
  3388 000029D5 7209                <1> 	jb movlargecursorterm
  3389 000029D7 66B80700            <1> 	mov ax, 7
  3390 000029DB E904000000          <1> 	jmp movedcursorterm
  3391                              <1> movlargecursorterm:
  3392 000029E0 66B8F000            <1> 	mov ax, 0xF0
  3393                              <1> movedcursorterm:
  3394 000029E4 66894702            <1> 	mov [edi + 2], ax
  3395 000029E8 6681FB0000          <1> 	cmp bx, 0
  3396 000029ED 7507                <1> 	jne fixednocursorterm
  3397 000029EF 66BB2000            <1> 	mov bx, ' '
  3398 000029F3 66891F              <1> 	mov [edi], bx
  3399                              <1> fixednocursorterm:
  3400 000029F6 C3                  <1> 	ret
  3401                              <1> %endif
  3402                                      %include "source/dosints.asm"
  3403                              <1> int20h:
  3404 000029F7 66B8004C            <1> mov ax, 0x4C00
  3405                              <1> int21h:
  3406                              <1> dostosolleros:
  3407 000029FB 6650                <1> 	push ax
  3408 000029FD 66B83000            <1> 	mov ax, NEW_DATA_SEL
  3409 00002A01 8ED8                <1> 	mov ds, ax
  3410 00002A03 8EC0                <1> 	mov es, ax
  3411 00002A05 8EE0                <1> 	mov fs, ax
  3412 00002A07 66B82000            <1> 	mov ax, SYS_DATA_SEL
  3413 00002A0B 8EE8                <1> 	mov gs, ax
  3414 00002A0D 6658                <1> 	pop ax
  3415 00002A0F 9C                  <1> 	pushf
  3416 00002A10 60                  <1> 	pusha
  3417 00002A11 80FC01              <1> 	cmp ah, 1
  3418 00002A14 0F8449000000        <1> 	je near dosgchar
  3419 00002A1A 80FC02              <1> 	cmp ah, 2
  3420 00002A1D 0F8447000000        <1> 	je near doswchar
  3421 00002A23 80FC09              <1> 	cmp ah, 9
  3422 00002A26 0F844B000000        <1> 	je near dosprintstr
  3423 00002A2C 80FC0A              <1> 	cmp ah, 0xA
  3424 00002A2F 0F845A000000        <1> 	je near dosgetstr
  3425 00002A35 80FC2B              <1> 	cmp ah, 0x2B
  3426 00002A38 0F8496000000        <1> 	je near dosgetdate
  3427 00002A3E 80FC2C              <1> 	cmp ah, 0x2C
  3428 00002A41 0F84B0000000        <1> 	je near dosgettime
  3429 00002A47 80FC4C              <1> 	cmp ah, 0x4C
  3430 00002A4A 0F84C5000000        <1> 	je near dosexit
  3431                              <1> backtodos:
  3432 00002A50 61                  <1> 	popa
  3433 00002A51 9D                  <1> 	popf
  3434 00002A52 6650                <1> 	push ax
  3435 00002A54 66B85000            <1> 	mov ax, DOS_DATA_SEL
  3436 00002A58 8ED8                <1> 	mov ds, ax
  3437 00002A5A 8EC0                <1> 	mov es, ax
  3438 00002A5C 8EE0                <1> 	mov fs, ax
  3439 00002A5E 8EE8                <1> 	mov gs, ax
  3440 00002A60 6658                <1> 	pop ax
  3441 00002A62 CF                  <1> 	iret
  3442                              <1> 
  3443                              <1> dosgchar:
  3444 00002A63 E8ECF8FFFF          <1> 	call getchar
  3445 00002A68 EBE6                <1> 	jmp backtodos
  3446                              <1> 	
  3447                              <1> doswchar:
  3448 00002A6A 88D0                <1> 	mov al, dl
  3449 00002A6C 30E4                <1> 	xor ah, ah
  3450 00002A6E B307                <1> 	mov bl, 7
  3451 00002A70 E85BF9FFFF          <1> 	call prcharint
  3452 00002A75 EBD9                <1> 	jmp backtodos
  3453                              <1> 	
  3454                              <1> dosprintstr:
  3455 00002A77 31F6                <1> 	xor esi, esi
  3456 00002A79 6689D6              <1> 	mov si, dx
  3457 00002A7C 81C600004000        <1> 	add esi, dosprogloc
  3458 00002A82 66B82400            <1> 	mov ax, "$"
  3459 00002A86 B307                <1> 	mov bl, 7
  3460 00002A88 E8D6F2FFFF          <1> 	call printint
  3461 00002A8D EBC1                <1> 	jmp backtodos
  3462                              <1> 	
  3463                              <1> dosgetstr:
  3464 00002A8F 31F6                <1> 	xor esi, esi
  3465 00002A91 6689D6              <1> 	mov si, dx
  3466 00002A94 81C600004000        <1> 	add esi, dosprogloc
  3467 00002A9A B900000000          <1> 	mov ecx, 0
  3468 00002A9F 8A0E                <1> 	mov cl, [esi]
  3469 00002AA1 81C602000000        <1> 	add esi, 2
  3470 00002AA7 89F7                <1> 	mov edi, esi
  3471 00002AA9 8935[D02A0000]      <1> 	mov [stringstart], esi
  3472 00002AAF 01CF                <1> 	add edi, ecx
  3473 00002AB1 B00A                <1> 	mov al, 10
  3474 00002AB3 B307                <1> 	mov bl, 7
  3475 00002AB5 E8E6F3FFFF          <1> 	call rdprintdos
  3476 00002ABA 89F1                <1> 	mov ecx, esi
  3477 00002ABC 2B0D[D02A0000]      <1> 	sub ecx, [stringstart]
  3478 00002AC2 8B35[D02A0000]      <1> 	mov esi, [stringstart]
  3479 00002AC8 884EFF              <1> 	mov [esi - 1], cl
  3480 00002ACB 884EFE              <1> 	mov [esi - 2], cl
  3481 00002ACE EB80                <1> 	jmp backtodos
  3482 00002AD0 00000000            <1> stringstart dd 0
  3483                              <1> 
  3484                              <1> dosgetdate:
  3485 00002AD4 E86D160000          <1> 	call time
  3486 00002AD9 8A0D[5A440000]      <1> 	mov cl, [RTCtimeYear]
  3487 00002ADF B500                <1> 	mov ch, 0
  3488 00002AE1 6681C1D007          <1> 	add cx, 2000
  3489 00002AE6 8A35[59440000]      <1> 	mov dh, [RTCtimeMonth]
  3490 00002AEC 8A15[58440000]      <1> 	mov dl, [RTCtimeDay]
  3491 00002AF2 E959FFFFFF          <1> 	jmp backtodos
  3492                              <1> 
  3493                              <1> dosgettime:
  3494 00002AF7 E84A160000          <1> 	call time
  3495 00002AFC 8A2D[57440000]      <1> 	mov ch, [RTCtimeHour]
  3496 00002B02 8A0D[56440000]      <1> 	mov cl, [RTCtimeMinute]
  3497 00002B08 8A35[55440000]      <1> 	mov dh, [RTCtimeSecond]
  3498 00002B0E B200                <1> 	mov dl, 0
  3499 00002B10 E93BFFFFFF          <1> 	jmp backtodos
  3500                              <1> 	
  3501                              <1> dosexit:
  3502 00002B15 BE[CA8E0000]        <1> 	mov esi, line
  3503 00002B1A E83DF2FFFF          <1> 	call print
  3504 00002B1F 61                  <1> 	popa
  3505 00002B20 9D                  <1> 	popf
  3506 00002B21 8B25[08B80300]      <1> 	mov esp, [previousstack]
  3507 00002B27 31DB                <1> 	xor ebx, ebx
  3508 00002B29 88C3                <1> 	mov bl, al
  3509 00002B2B 80FB00              <1> 	cmp bl, 0
  3510 00002B2E 0F85AEF1FFFF        <1> 	jne near exitprog.error
  3511 00002B34 C3                  <1> 	ret
  3512                                      %include "source/shush.asm"
  3513                              <1> os:
  3514                              <1> setdefenv:
  3515 00002B35 C605[14B80300]2F    <1> 	mov byte [currentfolder], '/'
  3516 00002B3C C705[10B80300]0100- <1> 	mov dword [currentfolderloc], 1
  3517 00002B44 0000                <1>
  3518 00002B46 E8BDF2FFFF          <1> 	call clear
  3519                              <1> 	
  3520                              <1> bootfilecheck:
  3521 00002B4B 803D[18BA0300]01    <1> 	cmp byte [ranboot], 1
  3522 00002B52 0F8421000000        <1> 	je near nobootfile
  3523                              <1> 	%ifdef hardware.automatic
  3524 00002B58 E8603B0000          <1> 		call initializelater ;Initialize components that have debug messages
  3525                              <1> 	%endif
  3526                              <1> 	%ifdef disk.none
  3527                              <1> 	%else
  3528 00002B5D BF[898E0000]        <1> 		mov edi, bootfilename
  3529 00002B62 BE00004000          <1> 		mov esi, 0x400000
  3530 00002B67 E8A23F0000          <1> 		call loadfile
  3531 00002B6C 81FA00000000        <1> 		cmp edx, 0
  3532 00002B72 7505                <1> 		jne nobootfile
  3533 00002B74 E8BA0D0000          <1> 		call progbatchfound
  3534                              <1> 	%endif
  3535                              <1> nobootfile:	
  3536 00002B79 C605[18BA0300]01    <1> 	mov byte [ranboot], 1
  3537                              <1> 
  3538 00002B80 BE[02000000]        <1> 	mov esi, signature
  3539                              <1> .sigcopyloop:	;this prevents an odd error
  3540 00002B85 658A06              <1> 	mov al, [gs:esi]
  3541 00002B88 8806                <1> 	mov [esi], al
  3542 00002B8A 46                  <1> 	inc esi
  3543 00002B8B 81FE[10000000]      <1> 	cmp esi, signatureend
  3544 00002B91 72F2                <1> 	jb .sigcopyloop
  3545                              <1> 	
  3546 00002B93 BE[02000000]        <1> 	mov esi, signature
  3547 00002B98 E8BFF1FFFF          <1> 	call print
  3548 00002B9D 8B0D[0C000000]      <1> 	mov ecx, [signatureend - 4]
  3549 00002BA3 E8DD060000          <1> 	call showdec
  3550 00002BA8 E8AAF1FFFF          <1> 	call printline
  3551 00002BAD BE[A68E0000]        <1> 	mov esi, userask
  3552 00002BB2 E8A5F1FFFF          <1> 	call print
  3553                              <1> 
  3554                              <1> usercheck:
  3555 00002BB7 BE[88CE0300]        <1> 	mov esi, buftxt
  3556 00002BBC BF[88D20300]        <1> 	mov edi, buftxtend
  3557 00002BC1 B00A                <1> 	mov al, 10
  3558 00002BC3 E8C4F2FFFF          <1> 	call rdprint
  3559 00002BC8 56                  <1> 	push esi
  3560 00002BC9 BE[B08E0000]        <1> 	mov esi, pwdask
  3561 00002BCE E889F1FFFF          <1> 	call print
  3562 00002BD3 5E                  <1> 	pop esi
  3563 00002BD4 46                  <1> 	inc esi
  3564 00002BD5 8935[CA2C0000]      <1> 	mov [esipass], esi
  3565                              <1> passcheck:
  3566 00002BDB E874F7FFFF          <1> 	call getchar
  3567 00002BE0 3C0A                <1> 	cmp al, 10
  3568 00002BE2 0F8438000000        <1> 	je near gotpass
  3569 00002BE8 3C08                <1> 	cmp al, 8
  3570 00002BEA 0F8412000000        <1> 	je near backpass
  3571 00002BF0 8806                <1> 	mov [esi], al
  3572 00002BF2 46                  <1> 	inc esi
  3573 00002BF3 30E4                <1> 	xor ah, ah
  3574 00002BF5 B02A                <1> 	mov al, "*"
  3575 00002BF7 E8D4F7FFFF          <1> 	call prcharint
  3576 00002BFC EBDD                <1> 	jmp passcheck
  3577 00002BFE 08200800            <1> backcursor2 db 8," ",8,0
  3578                              <1> backpass:
  3579 00002C02 3B35[CA2C0000]      <1> 	cmp esi, [esipass]
  3580 00002C08 0F84CDFFFFFF        <1> 	je near passcheck
  3581 00002C0E 4E                  <1> 	dec esi
  3582 00002C0F C60600              <1> 	mov byte [esi], 0
  3583 00002C12 56                  <1> 	push esi
  3584 00002C13 BE[FE2B0000]        <1> 	mov esi, backcursor2
  3585 00002C18 E83FF1FFFF          <1> 	call print
  3586 00002C1D 5E                  <1> 	pop esi
  3587 00002C1E EBBB                <1> 	jmp passcheck
  3588                              <1> gotpass:
  3589 00002C20 B00A                <1> 	mov al, 10
  3590 00002C22 E8A9F7FFFF          <1> 	call prcharint
  3591 00002C27 30C0                <1> 	xor al, al
  3592 00002C29 31C9                <1> 	xor ecx, ecx
  3593 00002C2B 8806                <1> 	mov [esi], al
  3594 00002C2D BB[CC8E0000]        <1> 	mov ebx, userlst
  3595                              <1> userfind:
  3596 00002C32 BE[88CE0300]        <1> 	mov esi, buftxt
  3597 00002C37 8A06                <1> 	mov al, [esi]
  3598 00002C39 3C00                <1> 	cmp al, 0
  3599 00002C3B 0F84F4FEFFFF        <1> 	je near os
  3600 00002C41 891D[CE2C0000]      <1> 	mov [usercache], ebx
  3601 00002C47 E860030000          <1> 	call tester
  3602 00002C4C 3C01                <1> 	cmp al, 1
  3603 00002C4E 7416                <1> 	je pwdtest
  3604 00002C50 41                  <1> 	inc ecx
  3605                              <1> nxtuser:
  3606 00002C51 8A03                <1> 	mov al, [ebx]
  3607 00002C53 43                  <1> 	inc ebx
  3608 00002C54 3C00                <1> 	cmp al, 0
  3609 00002C56 75F9                <1> 	jne nxtuser
  3610 00002C58 81FB[EF8E0000]      <1> 	cmp ebx, userlstend
  3611 00002C5E 0F83D1FEFFFF        <1> 	jae near os
  3612 00002C64 EBCC                <1> 	jmp userfind
  3613                              <1> pwdtest:
  3614 00002C66 46                  <1> 	inc esi
  3615 00002C67 43                  <1> 	inc ebx
  3616 00002C68 E83F030000          <1> 	call tester
  3617 00002C6D 3C01                <1> 	cmp al, 1
  3618 00002C6F 7402                <1> 	je pwdrgt
  3619 00002C71 EBDE                <1> 	jmp nxtuser
  3620                              <1> pwdrgt:
  3621 00002C73 D1E9                <1> 	shr ecx, 1
  3622 00002C75 890D[14BA0300]      <1> 	mov [uid], ecx
  3623 00002C7B E888F1FFFF          <1> 	call clear
  3624 00002C80 31C9                <1> 	xor ecx, ecx
  3625 00002C82 41                  <1> 	inc ecx
  3626 00002C83 890D[32800500]      <1> 	mov [commandbufpos], ecx
  3627                              <1> returnfromexp:
  3628 00002C89 66B90002            <1> 	mov cx, 200h
  3629 00002C8D BE[88CE0300]        <1> 	mov esi, buftxt
  3630 00002C92 8935[A82F0000]      <1> 	mov [currentcommandloc], esi
  3631 00002C98 E825000000          <1> 	call bufclr
  3632                              <1> clearolddata:
  3633 00002C9D 31C0                <1> 	xor eax, eax
  3634 00002C9F A2[19BA0300]        <1> 	mov [IFON], al
  3635 00002CA4 A2[1ABA0300]        <1> 	mov [IFTRUE], al
  3636 00002CA9 A2[82BA0300]        <1> 	mov [BATCHISON], al
  3637 00002CAE A3[7EBA0300]        <1> 	mov [BATCHPOS], eax
  3638 00002CB3 A2[83BA0300]        <1> 	mov [LOOPON], al
  3639 00002CB8 A3[84BA0300]        <1> 	mov [LOOPPOS], eax
  3640 00002CBD E933000000          <1> 	jmp nwcmd
  3641                              <1> bufclr:	
  3642 00002CC2 30C0                <1> 	xor al, al
  3643 00002CC4 8806                <1> 	mov [esi], al
  3644 00002CC6 46                  <1> 	inc esi
  3645 00002CC7 E2F9                <1> 	loop bufclr
  3646 00002CC9 C3                  <1> 	ret
  3647                              <1> 
  3648 00002CCA 00000000            <1> esipass dd 0
  3649 00002CCE [CC8E0000]          <1> usercache dd userlst
  3650                              <1> 	
  3651                              <1> buftxtclear:
  3652 00002CD2 30C0                <1> 	xor al, al
  3653 00002CD4 BE[88CE0300]        <1> 	mov esi, buftxt
  3654 00002CD9 81FE[88D20300]      <1> clearbuftxt: cmp esi, buf2
  3655 00002CDF 730E                <1> 	jae retbufclr
  3656 00002CE1 8806                <1> 	mov [esi], al
  3657 00002CE3 46                  <1> 	inc esi
  3658 00002CE4 EBF3                <1> 	jmp clearbuftxt
  3659                              <1> 
  3660 00002CE6 39DE                <1> clearitbuf: cmp esi, ebx
  3661 00002CE8 7305                <1> 	jae retbufclr
  3662 00002CEA 8806                <1> 	mov [esi], al
  3663 00002CEC 46                  <1> 	inc esi
  3664 00002CED EBF7                <1> 	jmp clearitbuf
  3665 00002CEF C3                  <1> retbufclr: ret
  3666                              <1> 
  3667 00002CF0 E900000000          <1> full:	jmp nwcmd
  3668                              <1> 
  3669                              <1> shush:	;SollerOS Hardly Unix-compatible Shell
  3670                              <1> nwcmd:
  3671 00002CF5 FB                  <1> 	sti
  3672 00002CF6 31C0                <1> 	xor eax, eax
  3673 00002CF8 3905[CA2E0000]      <1> 	cmp [nextcommandloc], eax
  3674 00002CFE 7413                <1> 	je nomultiplecommand
  3675 00002D00 8B35[CA2E0000]      <1> 	mov esi, [nextcommandloc]
  3676 00002D06 8935[CE2E0000]      <1> 	mov [thiscommandloc], esi
  3677 00002D0C E8C6010000          <1> 	call fixvariables
  3678 00002D11 EBE2                <1> 	jmp nwcmd
  3679                              <1> nomultiplecommand:
  3680 00002D13 A3[CE2E0000]        <1> 	mov [thiscommandloc], eax
  3681 00002D18 3805[C86C0000]      <1> 	cmp [threadson], al
  3682 00002D1E 7405                <1> 	je noclinwcmd
  3683 00002D20 A2[C86C0000]        <1> 	mov [threadson], al
  3684                              <1> noclinwcmd:
  3685 00002D25 B001                <1> 	mov al, 1
  3686 00002D27 3805[82BA0300]      <1> 	cmp [BATCHISON], al
  3687 00002D2D 7501                <1> 	jne cancel
  3688 00002D2F C3                  <1> 	ret
  3689 00002D30 30C0                <1> cancel:	xor al, al
  3690 00002D32 A2[19BA0300]        <1> 	mov [IFON], al
  3691 00002D37 A2[82BA0300]        <1> 	mov [BATCHISON], al
  3692 00002D3C B05B                <1> 	mov al, '['
  3693 00002D3E 66BB0700            <1> 	mov bx, 7
  3694 00002D42 E8A0F6FFFF          <1> 	call prcharq
  3695 00002D47 8B35[CE2C0000]      <1> 	mov esi, [usercache]
  3696 00002D4D E8E6EFFFFF          <1> 	call printquiet
  3697 00002D52 BE[BA8E0000]        <1> 	mov esi, computer
  3698 00002D57 E8DCEFFFFF          <1> 	call printquiet
  3699 00002D5C BE[14B80300]        <1> 	mov esi, currentfolder
  3700 00002D61 0335[0CB80300]      <1> 	add esi, [lastfolderloc]
  3701 00002D67 E8CCEFFFFF          <1> 	call printquiet
  3702 00002D6C BE[C58E0000]        <1> 	mov esi, endprompt
  3703 00002D71 E8E6EFFFFF          <1> 	call print
  3704 00002D76 E857FFFFFF          <1> 	call buftxtclear
  3705 00002D7B BE[88CE0300]        <1> 	mov esi, buftxt
  3706 00002D80 C605[3D230000]01    <1> 	mov byte [commandedit], 1
  3707 00002D87 B00A                <1> 	mov al, 10
  3708 00002D89 66BB0700            <1> 	mov bx, 7
  3709 00002D8D BF[88D20300]        <1> 	mov edi, buftxtend
  3710 00002D92 E8F5F0FFFF          <1> 	call rdprint
  3711 00002D97 C605[3D230000]00    <1> 	mov byte [commandedit], 0
  3712 00002D9E 803D[88CE0300]00    <1> 	cmp byte [buftxt], 0
  3713 00002DA5 0F844AFFFFFF        <1> 	je near nwcmd
  3714 00002DAB 8B35[32800500]      <1> gotcmd:	mov esi, [commandbufpos]
  3715 00002DB1 8935[2E800500]      <1> 	mov [lastcommandpos], esi
  3716 00002DB7 FF05[3A800500]      <1> 	inc dword [commandsentered]
  3717 00002DBD BF[88CE0300]        <1> 	mov edi, buftxt
  3718 00002DC2 81C6[3E800500]      <1> 	add esi, commandbuf
  3719 00002DC8 81FE[3E900500]      <1> 	cmp esi, commandbufend
  3720 00002DCE 7605                <1> 	jbe copycommand
  3721 00002DD0 BE[3E800500]        <1> 	mov esi, commandbuf
  3722                              <1> copycommand:
  3723 00002DD5 8A07                <1> 	mov al, [edi]
  3724 00002DD7 8806                <1> 	mov [esi], al
  3725 00002DD9 47                  <1> 	inc edi
  3726 00002DDA 46                  <1> 	inc esi
  3727 00002DDB 3C00                <1> 	cmp al, 0
  3728 00002DDD 740F                <1> 	je donecopy
  3729 00002DDF 81FE[3E900500]      <1> 	cmp esi, commandbufend
  3730 00002DE5 76EE                <1> 	jbe copycommand
  3731 00002DE7 BE[3E800500]        <1> 	mov esi, commandbuf
  3732 00002DEC EBE7                <1> 	jmp copycommand
  3733                              <1> donecopy:
  3734 00002DEE 81EE[3E800500]      <1> 	sub esi, commandbuf
  3735 00002DF4 8935[32800500]      <1> 	mov [commandbufpos], esi
  3736 00002DFA E8D3000000          <1> 	call run
  3737 00002DFF E9F1FEFFFF          <1> 	jmp nwcmd
  3738                              <1> 
  3739 00002E04 E8C9FEFFFF          <1> input:	call buftxtclear
  3740 00002E09 BE[88CE0300]        <1> 	mov esi, buftxt		;puts input into buftxt AND onto screen
  3741 00002E0E BF[88D20300]        <1> 	mov edi, buftxtend
  3742 00002E13 B00A                <1> stdin:	mov al, 10
  3743 00002E15 B307                <1> 	mov bl, 7
  3744 00002E17 E870F0FFFF          <1> 	call rdprint
  3745 00002E1C C3                  <1> 	ret
  3746                              <1> 
  3747                              <1> replacevariable:
  3748 00002E1D 8A4601              <1> 	mov al, [esi + 1]
  3749 00002E20 C64601FF            <1> 	mov byte [esi + 1], 255
  3750 00002E24 3C24                <1> 	cmp al, "$"
  3751 00002E26 0F84AB000000        <1> 	je near fixvariables
  3752 00002E2C 884601              <1> 	mov [esi + 1], al
  3753 00002E2F 56                  <1> 	push esi
  3754 00002E30 81EE[88CE0300]      <1> 	sub esi, buftxt
  3755 00002E36 89F7                <1> 	mov edi, esi
  3756 00002E38 81C6[88CE0300]      <1> 	add esi, buftxt
  3757 00002E3E 47                  <1> 	inc edi
  3758 00002E3F BB[88BA0300]        <1> 	mov ebx, variables
  3759 00002E44 E8E2190000          <1> 	call nxtvrech
  3760 00002E49 89F7                <1> 	mov edi, esi
  3761 00002E4B 31DB                <1> 	xor ebx, ebx
  3762 00002E4D 4E                  <1> 	dec esi
  3763                              <1> findvarname:
  3764 00002E4E 4E                  <1> 	dec esi
  3765 00002E4F 8A06                <1> 	mov al, [esi]
  3766 00002E51 43                  <1> 	inc ebx
  3767 00002E52 3C04                <1> 	cmp al, 4
  3768 00002E54 75F8                <1> 	jne findvarname
  3769 00002E56 5E                  <1> 	pop esi
  3770                              <1> replacevarloop:
  3771 00002E57 8A07                <1> 	mov al, [edi]
  3772 00002E59 3C00                <1> 	cmp al, 0
  3773 00002E5B 0F8413000000        <1> 	je near compressbuftxt
  3774 00002E61 81FB00000000        <1> 	cmp ebx, 0
  3775 00002E67 0F8416000000        <1> 	je near expandbuftxt
  3776 00002E6D 8806                <1> 	mov [esi], al
  3777 00002E6F 4B                  <1> 	dec ebx
  3778 00002E70 46                  <1> 	inc esi
  3779 00002E71 47                  <1> 	inc edi
  3780 00002E72 EBE3                <1> 	jmp replacevarloop
  3781                              <1> compressbuftxt:
  3782 00002E74 8A041E              <1> 	mov al, [esi + ebx]
  3783 00002E77 8806                <1> 	mov [esi], al
  3784 00002E79 46                  <1> 	inc esi
  3785 00002E7A 3C00                <1> 	cmp al, 0
  3786 00002E7C 75F6                <1> 	jne compressbuftxt
  3787 00002E7E E954000000          <1> 	jmp fixvariables
  3788                              <1> expandbuftxt:
  3789 00002E83 89F1                <1> 	mov ecx, esi
  3790 00002E85 8A26                <1> 	mov ah, [esi]
  3791                              <1> expandbuftxtlp:
  3792 00002E87 8A1E                <1> 	mov bl, [esi]
  3793 00002E89 46                  <1> 	inc esi
  3794 00002E8A 8A3E                <1> 	mov bh, [esi]
  3795 00002E8C 8826                <1> 	mov [esi], ah
  3796 00002E8E 88FC                <1> 	mov ah, bh
  3797 00002E90 80FB00              <1> 	cmp bl, 0
  3798 00002E93 75F2                <1> 	jne expandbuftxtlp
  3799 00002E95 89CE                <1> 	mov esi, ecx
  3800 00002E97 8806                <1> 	mov [esi], al
  3801 00002E99 47                  <1> 	inc edi
  3802 00002E9A 8A07                <1> 	mov al, [edi]
  3803 00002E9C 3C00                <1> 	cmp al, 0
  3804 00002E9E 0F8433000000        <1> 	je near fixvariables
  3805 00002EA4 46                  <1> 	inc esi
  3806 00002EA5 EBDC                <1> 	jmp expandbuftxt
  3807                              <1> multipleprogline:
  3808 00002EA7 30E4                <1> 	xor ah, ah
  3809 00002EA9 8826                <1> 	mov [esi], ah
  3810 00002EAB 46                  <1> 	inc esi
  3811 00002EAC 8935[CA2E0000]      <1> 	mov [nextcommandloc], esi
  3812 00002EB2 E93E000000          <1> 	jmp donefixvariables
  3813                              <1> inlinecomment:	;if the following char is #, include a #, otherwise end the line
  3814 00002EB7 46                  <1> 	inc esi
  3815 00002EB8 8A06                <1> 	mov al, [esi]
  3816 00002EBA C606FF              <1> 	mov byte [esi], 255
  3817 00002EBD 3C23                <1> 	cmp al, '#'
  3818 00002EBF 7416                <1> 	je fixvariables
  3819 00002EC1 4E                  <1> 	dec esi
  3820 00002EC2 C60600              <1> 	mov byte [esi], 0
  3821 00002EC5 E90D000000          <1> 	jmp fixvariables
  3822                              <1> 	
  3823 00002ECA 00000000            <1> nextcommandloc dd 0
  3824 00002ECE 00000000            <1> thiscommandloc dd 0	
  3825                              <1> run:
  3826 00002ED2 BE[88CE0300]        <1> 	mov esi, buftxt
  3827                              <1> fixvariables:
  3828 00002ED7 46                  <1> 	inc esi
  3829 00002ED8 8A06                <1> 	mov al, [esi]
  3830 00002EDA 3C23                <1> 	cmp al, '#'	;inline comment
  3831 00002EDC 74D9                <1> 	je inlinecomment
  3832 00002EDE 3C24                <1> 	cmp al, '$' ;variable
  3833 00002EE0 0F8437FFFFFF        <1> 	je near replacevariable
  3834 00002EE6 3C3B                <1> 	cmp al, ';' ;program list
  3835 00002EE8 74BD                <1> 	je multipleprogline
  3836 00002EEA 3C00                <1> 	cmp al, 0
  3837 00002EEC 75E9                <1> 	jne fixvariables
  3838 00002EEE 31C0                <1> 	xor eax, eax
  3839 00002EF0 A3[CA2E0000]        <1> 	mov [nextcommandloc], eax
  3840                              <1> donefixvariables:
  3841 00002EF5 803D[B2340000]00    <1> 	cmp byte [indexdone], 0
  3842 00002EFC 7505                <1> 	jne progtest
  3843 00002EFE E81A050000          <1> 	call indexfiles
  3844                              <1> progtest:
  3845 00002F03 31C0                <1> 	xor eax, eax
  3846 00002F05 BB[08B40300]        <1> 	mov ebx, fileindex
  3847 00002F0A 668B03              <1> prgnxt:	mov ax, [ebx]
  3848 00002F0D B1FF                <1> 	mov cl, 255
  3849 00002F0F B52C                <1> 	mov ch, 44
  3850 00002F11 6639C8              <1> 	cmp ax, cx
  3851 00002F14 740B                <1> 	je fndprg
  3852 00002F16 43                  <1> 	inc ebx
  3853 00002F17 81FB[08B80300]      <1> 	cmp ebx, fileindexend
  3854 00002F1D 735D                <1> 	jae prgnf
  3855 00002F1F EBE9                <1> 	jmp prgnxt
  3856 00002F21 81C302000000        <1> fndprg: add ebx, 2
  3857 00002F27 31C9                <1> 	xor ecx, ecx
  3858 00002F29 BE[88CE0300]        <1> 	mov esi, buftxt
  3859 00002F2E 390D[CE2E0000]      <1> 	cmp [thiscommandloc], ecx
  3860 00002F34 7406                <1> 	je noprgtstmultiple
  3861 00002F36 8B35[CE2E0000]      <1> 	mov esi, [thiscommandloc]
  3862                              <1> noprgtstmultiple:
  3863 00002F3C E8A6000000          <1> 	call cndtest
  3864 00002F41 3C01                <1> 	cmp al, 1
  3865 00002F43 7302                <1> 	jae prggood
  3866 00002F45 EBC3                <1> 	jmp prgnxt
  3867 00002F47 81FB[08B80300]      <1> prggood: cmp ebx, fileindexend
  3868 00002F4D 7358                <1> 	jae prgdn
  3869 00002F4F 31C0                <1> 	xor eax, eax
  3870 00002F51 BE[88CE0300]        <1> 	mov esi, buftxt
  3871 00002F56 3905[CE2E0000]      <1> 	cmp [thiscommandloc], eax
  3872 00002F5C 7406                <1> 	je noprggoodmul
  3873 00002F5E 8B35[CE2E0000]      <1> 	mov esi, [thiscommandloc]
  3874                              <1> noprggoodmul:
  3875 00002F64 8935[A82F0000]      <1> 	mov [currentcommandloc], esi
  3876 00002F6A 81C303000000        <1> 	add ebx, 3
  3877 00002F70 8B3B                <1> 	mov edi, [ebx]
  3878 00002F72 C605[C86C0000]02    <1> 	mov byte [threadson], 2
  3879 00002F79 FFD7                <1> 	call edi
  3880 00002F7B C3                  <1> 	ret
  3881                              <1> prgnf:	
  3882 00002F7C 8B35[A82F0000]      <1> 	mov esi, [currentcommandloc]
  3883 00002F82 8A06                <1> 	mov al, [esi]
  3884 00002F84 3C00                <1> 	cmp al, 0
  3885 00002F86 741F                <1> 	je prgdn
  3886 00002F88 BE[918E0000]        <1> 	mov esi, notfound1
  3887 00002F8D E8CAEDFFFF          <1> 	call print
  3888 00002F92 8B35[A82F0000]      <1> 	mov esi, [currentcommandloc]
  3889 00002F98 E8BFEDFFFF          <1> 	call print
  3890 00002F9D BE[998E0000]        <1> 	mov esi, notfound2
  3891 00002FA2 E8B5EDFFFF          <1> 	call print
  3892 00002FA7 C3                  <1> prgdn:	ret
  3893                              <1> 
  3894 00002FA8 00000000            <1> currentcommandloc dd 0
  3895                              <1> 
  3896                              <1> tester:			;si=user bx=prog returns 1 in al if true
  3897 00002FAC 6631C0              <1> 	xor ax, ax
  3898 00002FAF 8A06                <1> retest:	mov al, [esi]
  3899 00002FB1 8A23                <1> 	mov ah, [ebx]
  3900 00002FB3 3C00                <1> 	cmp al, 0
  3901 00002FB5 7408                <1> 	je testtrue
  3902 00002FB7 38E0                <1> 	cmp al, ah
  3903 00002FB9 750C                <1> 	jne testfalse
  3904 00002FBB 43                  <1> 	inc ebx
  3905 00002FBC 46                  <1> 	inc esi
  3906 00002FBD EBF0                <1> 	jmp retest
  3907                              <1> testtrue:
  3908 00002FBF 80FC00              <1> 	cmp ah, 0
  3909 00002FC2 7503                <1> 	jne testfalse
  3910 00002FC4 B001                <1> 	mov al, 1
  3911 00002FC6 C3                  <1> 	ret
  3912                              <1> testfalse:
  3913 00002FC7 30C0                <1> 	xor al, al
  3914 00002FC9 C3                  <1> 	ret
  3915                              <1> 
  3916                              <1> optest:			;si=user bx=prog returns 1 in al if true
  3917 00002FCA 30C0                <1> 	xor al, al
  3918                              <1> opretest:
  3919 00002FCC 8A06                <1> 	mov al, [esi]
  3920 00002FCE 8A23                <1> 	mov ah, [ebx]
  3921 00002FD0 38E0                <1> 	cmp al, ah
  3922 00002FD2 7510                <1> 	jne optestfalse
  3923 00002FD4 80FC00              <1> 	cmp ah, 0
  3924 00002FD7 7404                <1> 	je optesttrue
  3925 00002FD9 43                  <1> 	inc ebx
  3926 00002FDA 46                  <1> 	inc esi
  3927 00002FDB EBEF                <1> 	jmp opretest
  3928                              <1> optesttrue:
  3929 00002FDD 3C00                <1> 	cmp al, 0
  3930 00002FDF 7503                <1> 	jne optestfalse
  3931 00002FE1 B001                <1> 	mov al, 1
  3932 00002FE3 C3                  <1> 	ret
  3933                              <1> optestfalse:
  3934 00002FE4 30C0                <1> 	xor al, al
  3935 00002FE6 C3                  <1> 	ret
  3936                              <1> 
  3937                              <1> cndtest:			;si=user bx=prog cl=endchar returns 1 in al if true
  3938 00002FE7 30C0                <1> 	xor al, al
  3939 00002FE9 8A06                <1> cndretest:	mov al, [esi]
  3940 00002FEB 8A23                <1> 	mov ah, [ebx]
  3941 00002FED 38CC                <1> 	cmp ah, cl
  3942 00002FEF 7408                <1> 	je cndtesttrue
  3943 00002FF1 38E0                <1> 	cmp al, ah
  3944 00002FF3 750B                <1> 	jne cndtestfalse
  3945 00002FF5 43                  <1> 	inc ebx
  3946 00002FF6 46                  <1> 	inc esi
  3947 00002FF7 EBF0                <1> 	jmp cndretest
  3948                              <1> cndtesttrue:
  3949 00002FF9 38C8                <1> 	cmp al, cl
  3950 00002FFB 7506                <1> 	jne cndtestalmost
  3951 00002FFD B001                <1> 	mov al, 1
  3952 00002FFF C3                  <1> 	ret
  3953                              <1> cndtestfalse:
  3954 00003000 30C0                <1> 	xor al, al
  3955 00003002 C3                  <1> 	ret
  3956                              <1> cndtestalmost:
  3957 00003003 B002                <1> 	mov al, 2
  3958 00003005 C3                  <1> 	ret
  3959                              <1> 	
  3960                              <1> array:				;arraystart in si, arrayend in bx, arrayseperator in cx
  3961                              <1> 		                ;ends if array seperator is found backwards after 0
  3962                              <1> 	arnxt:	      
  3963 00003006 88E8                <1> 		mov al, ch
  3964 00003008 88CC                <1> 		mov ah, cl        
  3965 0000300A 663906              <1> 		cmp [esi], ax
  3966 0000300D 7448                <1> 		je ardn
  3967 0000300F 66390E              <1> 		cmp [esi], cx
  3968 00003012 7407                <1> 		je arfnd
  3969 00003014 46                  <1> 		inc esi
  3970 00003015 39DE                <1> 		cmp esi, ebx
  3971 00003017 733E                <1> 		jae ardn
  3972 00003019 EBEB                <1> 		jmp arnxt
  3973 0000301B 81C602000000        <1> 	arfnd: add esi, 2
  3974 00003021 891D[58300000]      <1> 		mov [arbx], ebx
  3975 00003027 890D[5C300000]      <1> 		mov [arcx], ecx
  3976 0000302D E82AEDFFFF          <1> 		call print
  3977 00003032 8935[5E300000]      <1> 		mov [arsi], esi
  3978 00003038 E81AEDFFFF          <1> 		call printline
  3979 0000303D 8B1D[58300000]      <1> 		mov ebx, [arbx]
  3980 00003043 668B0D[5C300000]    <1> 		mov cx, [arcx]
  3981 0000304A 8B35[5E300000]      <1> 		mov esi, [arsi]
  3982 00003050 46                  <1> 		inc esi
  3983 00003051 39DE                <1> 		cmp esi, ebx
  3984 00003053 7302                <1> 		jae ardn
  3985 00003055 EBAF                <1> 		jmp arnxt
  3986 00003057 C3                  <1> 	ardn:	ret
  3987 00003058 00000000            <1> arbx:	dw 0,0
  3988 0000305C 0000                <1> arcx:	db 0,0
  3989 0000305E 00000000            <1> arsi:	dw 0,0
  3990                              <1> 
  3991                              <1> clearbuffer:
  3992 00003062 BE[88D20300]        <1> 	mov esi, buf2
  3993 00003067 B030                <1> 	mov al, '0'
  3994 00003069 81FE[9CD20300]      <1> clearbuf: cmp esi, numbuf
  3995 0000306F 7305                <1> 	jae doneclearbuff
  3996 00003071 8806                <1> 	mov [esi], al
  3997 00003073 46                  <1> 	inc esi
  3998 00003074 EBF3                <1> 	jmp clearbuf
  3999                              <1> doneclearbuff: 
  4000 00003076 C3                  <1> 		ret
  4001                              <1> 
  4002                              <1> convert:
  4003 00003077 4E                  <1> 	dec esi
  4004 00003078 89F3                <1> 	mov ebx, esi		;place to convert into must be in esi, number to convert must be in ecx
  4005                              <1> .lp:
  4006 0000307A 89DE                <1> 	mov esi, ebx
  4007 0000307C 81EE09000000        <1> 	sub esi, 9
  4008 00003082 81F900CA9A3B        <1> 	cmp ecx, 1000000000
  4009 00003088 720A                <1> 	jb .8
  4010 0000308A 81E900CA9A3B        <1> 	sub ecx, 1000000000
  4011 00003090 FE06                <1> 	inc byte [esi]
  4012 00003092 EBE6                <1> 	jmp .lp
  4013 00003094 46                  <1> .8:	inc esi
  4014 00003095 81F900E1F505        <1> 	cmp ecx, 100000000
  4015 0000309B 720A                <1> 	jb .7
  4016 0000309D 81E900E1F505        <1> 	sub ecx, 100000000
  4017 000030A3 FE06                <1> 	inc byte [esi]
  4018 000030A5 EBD3                <1> 	jmp .lp
  4019 000030A7 46                  <1> .7:	inc esi
  4020 000030A8 81F980969800        <1> 	cmp ecx, 10000000
  4021 000030AE 720A                <1> 	jb .6
  4022 000030B0 81E980969800        <1> 	sub ecx, 10000000
  4023 000030B6 FE06                <1> 	inc byte [esi]
  4024 000030B8 EBC0                <1> 	jmp .lp
  4025 000030BA 46                  <1> .6:	inc esi
  4026 000030BB 81F940420F00        <1> 	cmp ecx, 1000000
  4027 000030C1 720A                <1> 	jb .5
  4028 000030C3 81E940420F00        <1> 	sub ecx, 1000000
  4029 000030C9 FE06                <1> 	inc byte [esi]
  4030 000030CB EBAD                <1> 	jmp .lp
  4031 000030CD 46                  <1> .5:	inc esi
  4032 000030CE 81F9A0860100        <1> 	cmp ecx, 100000
  4033 000030D4 720A                <1> 	jb .4
  4034 000030D6 81E9A0860100        <1> 	sub ecx, 100000
  4035 000030DC FE06                <1> 	inc byte [esi]
  4036 000030DE EB9A                <1> 	jmp .lp
  4037 000030E0 46                  <1> .4:	inc esi
  4038 000030E1 81F910270000        <1> 	cmp ecx, 10000
  4039 000030E7 720A                <1> 	jb .3
  4040 000030E9 81E910270000        <1> 	sub ecx, 10000
  4041 000030EF FE06                <1> 	inc byte [esi]
  4042 000030F1 EB87                <1> 	jmp .lp
  4043 000030F3 46                  <1> .3:	inc esi
  4044 000030F4 81F9E8030000        <1> 	cmp ecx, 1000
  4045 000030FA 720D                <1> 	jb .2
  4046 000030FC 81E9E8030000        <1> 	sub ecx, 1000
  4047 00003102 FE06                <1> 	inc byte [esi]
  4048 00003104 E971FFFFFF          <1> 	jmp .lp
  4049 00003109 46                  <1> .2:	inc esi
  4050 0000310A 81F964000000        <1> 	cmp ecx, 100
  4051 00003110 720D                <1> 	jb .1
  4052 00003112 81E964000000        <1> 	sub ecx, 100
  4053 00003118 FE06                <1> 	inc byte [esi]
  4054 0000311A E95BFFFFFF          <1> 	jmp .lp
  4055 0000311F 46                  <1> .1:	inc esi
  4056 00003120 81F90A000000        <1> 	cmp ecx, 10
  4057 00003126 720D                <1> 	jb .0
  4058 00003128 81E90A000000        <1> 	sub ecx, 10
  4059 0000312E FE06                <1> 	inc byte [esi]
  4060 00003130 E945FFFFFF          <1> 	jmp .lp
  4061 00003135 46                  <1> .0:	inc esi
  4062 00003136 81F901000000        <1> 	cmp ecx, 1
  4063 0000313C 720D                <1> 	jb .dn
  4064 0000313E 81E901000000        <1> 	sub ecx, 1
  4065 00003144 FE06                <1> 	inc byte [esi]
  4066 00003146 E92FFFFFFF          <1> 	jmp .lp
  4067                              <1> .dn:
  4068 0000314B C3                  <1> 	ret
  4069                              <1> 
  4070                              <1> 	
  4071                              <1> 
  4072 0000314C 00<rept>            <1> hexnumber times 8 db 0
  4073 00003154 202000              <1> hexnumberend db "  ",0
  4074                              <1> 
  4075                              <1> converthex:
  4076                              <1> .clear:	;place to convert to in esi, end of buffer in edi number in ecx
  4077 00003157 56                  <1> 	push esi
  4078 00003158 B030                <1> 	mov al, "0"
  4079 0000315A 39FE                <1> .clearlp: cmp esi, edi
  4080 0000315C 7305                <1> 	jae .doneclear
  4081 0000315E 8806                <1> 	mov [esi], al
  4082 00003160 46                  <1> 	inc esi
  4083 00003161 EBF7                <1> 	jmp .clearlp
  4084                              <1> .doneclear:
  4085 00003163 81EE02000000        <1> 	sub esi, 2
  4086 00003169 89C8                <1> 	mov eax, ecx
  4087                              <1> .loop:
  4088 0000316B 30FF                <1> 	xor bh, bh
  4089 0000316D 88C3                <1> 	mov bl, al
  4090 0000316F 66C1E304            <1> 	shl bx, 4
  4091 00003173 C0EB04              <1> 	shr bl, 4
  4092 00003176 86DF                <1> 	xchg bl, bh ;they are backwards
  4093 00003178 80C330              <1> 	add bl, 48
  4094 0000317B 80FB39              <1> 	cmp bl, "9"
  4095 0000317E 7609                <1> 	jbe .goodbl
  4096 00003180 80EB30              <1> 	sub bl, 48
  4097 00003183 80EB0A              <1> 	sub bl, 0xA
  4098 00003186 80C341              <1> 	add bl, "A"
  4099                              <1> .goodbl:
  4100 00003189 80C730              <1> 	add bh, 48
  4101 0000318C 80FF39              <1> 	cmp bh, "9"
  4102 0000318F 7609                <1> 	jbe .goodbh
  4103 00003191 80EF30              <1> 	sub bh, 48
  4104 00003194 80EF0A              <1> 	sub bh, 0xA
  4105 00003197 80C741              <1> 	add bh, "A"
  4106                              <1> .goodbh:
  4107 0000319A C1E808              <1> 	shr eax, 8
  4108 0000319D 66891E              <1> 	mov [esi], bx
  4109 000031A0 81EE02000000        <1> 	sub esi, 2
  4110 000031A6 3B3424              <1> 	cmp esi, [esp]
  4111 000031A9 7207                <1> 	jb .done
  4112 000031AB 3D00000000          <1> 	cmp eax, 0
  4113 000031B0 75B9                <1> 	jne .loop
  4114                              <1> .done:
  4115 000031B2 5E                  <1> 	pop esi
  4116 000031B3 C3                  <1> 	ret
  4117                              <1> 	
  4118                              <1> 	
  4119 000031B4 00                  <1> smallhex db 0
  4120 000031B5 01                  <1> firsthexshown db 1
  4121                              <1> showhexsmall:
  4122 000031B6 C605[B4310000]01    <1> 	mov byte [smallhex], 1
  4123 000031BD E808000000          <1> 	call showhex
  4124 000031C2 C605[B4310000]00    <1> 	mov byte [smallhex], 0
  4125 000031C9 C3                  <1> 	ret
  4126                              <1> showhex:
  4127 000031CA 60                  <1> 	pusha
  4128 000031CB BE[4C310000]        <1> 	mov esi, hexnumber
  4129 000031D0 BF[54310000]        <1> 	mov edi, hexnumberend
  4130 000031D5 E87DFFFFFF          <1> 	call converthex
  4131 000031DA 803D[B5310000]01    <1> 	cmp byte [firsthexshown], 1
  4132 000031E1 7503                <1> 	jne .show
  4133 000031E3 6631D2              <1> 	xor dx, dx
  4134                              <1> .show:
  4135 000031E6 803D[B5310000]03    <1> 	cmp byte [firsthexshown], 3
  4136 000031ED 7505                <1> 	jne .nonewhexline
  4137 000031EF E863EBFFFF          <1> 	call printline
  4138                              <1> .nonewhexline:
  4139 000031F4 803D[B5310000]04    <1> 	cmp byte [firsthexshown], 4
  4140 000031FB 7522                <1> 	jne .notab
  4141 000031FD B1A0                <1> 	mov cl, 160
  4142 000031FF 28D1                <1> 	sub cl, dl
  4143 00003201 C0E905              <1> 	shr cl, 5
  4144 00003204 C0E105              <1> 	shl cl, 5
  4145 00003207 80F900              <1> 	cmp cl, 0
  4146 0000320A 750A                <1> 	jne .nonewline
  4147 0000320C E846EBFFFF          <1> 	call printline
  4148 00003211 E909000000          <1> 	jmp .notab
  4149                              <1> .nonewline:
  4150 00003216 80C20F              <1> 	add dl, 15
  4151 00003219 C0EA04              <1> 	shr dl, 4
  4152 0000321C C0E204              <1> 	shl dl, 4
  4153                              <1> .notab:
  4154 0000321F BE[4C310000]        <1> 	mov esi, hexnumber
  4155 00003224 803D[B4310000]01    <1> 	cmp byte [smallhex],1
  4156 0000322B 7506                <1> 	jne .nosmall
  4157 0000322D 81C606000000        <1> 	add esi, 6
  4158                              <1> .nosmall:
  4159 00003233 803D[B5310000]05    <1> 	cmp byte [firsthexshown], 5
  4160 0000323A 750A                <1> 	jne .noquiet
  4161 0000323C E8F7EAFFFF          <1> 	call printquiet
  4162 00003241 E918000000          <1> 	jmp .donequiet
  4163                              <1> .noquiet:
  4164 00003246 803D[B5310000]06    <1> 	cmp byte [firsthexshown], 6
  4165 0000324D 750A                <1> 	jne .normal
  4166 0000324F E8F7EAFFFF          <1> 	call printhighlight
  4167 00003254 E905000000          <1> 	jmp .donequiet
  4168                              <1> .normal:
  4169 00003259 E8FEEAFFFF          <1> 	call print
  4170                              <1> .donequiet:
  4171 0000325E 803D[B5310000]02    <1> 	cmp byte [firsthexshown], 2
  4172 00003265 7505                <1> 	jne .shown
  4173 00003267 E8EBEAFFFF          <1> 	call printline
  4174                              <1> .shown:
  4175 0000326C C605[B5310000]00    <1> 	mov byte [firsthexshown], 0
  4176 00003273 61                  <1> 	popa
  4177 00003274 C3                  <1> 	ret
  4178                              <1> 
  4179                              <1> 
  4180 00003275 303030303030303030- <1> decnumber db "00000000000000"
  4181 0000327E 3030303030          <1>
  4182 00003283 2000                <1> decnumberend: db " ",0
  4183                              <1> 
  4184                              <1> showdec: ;same as showhex, just uses decimal conversion
  4185 00003285 60                  <1> 	pusha
  4186 00003286 BF[75320000]        <1> 	mov edi, decnumber
  4187 0000328B BE[83320000]        <1> 	mov esi, decnumberend
  4188                              <1> .clear:
  4189 00003290 C60730              <1> 	mov byte [edi], '0'
  4190 00003293 47                  <1> 	inc edi
  4191 00003294 39F7                <1> 	cmp edi, esi
  4192 00003296 72F8                <1> 	jb .clear
  4193 00003298 BF[75320000]        <1> 	mov edi, decnumber
  4194 0000329D E8D5FDFFFF          <1> 	call convert
  4195 000032A2 803D[B5310000]01    <1> 	cmp byte [firsthexshown], 1
  4196 000032A9 7503                <1> 	jne .show
  4197 000032AB 6631D2              <1> 	xor dx, dx
  4198                              <1> .show:
  4199 000032AE 803D[B5310000]03    <1> 	cmp byte [firsthexshown], 3
  4200 000032B5 7505                <1> 	jne .nonewdecline
  4201 000032B7 E89BEAFFFF          <1> 	call printline
  4202                              <1> .nonewdecline:
  4203 000032BC 803D[B5310000]04    <1> 	cmp byte [firsthexshown], 4
  4204 000032C3 7522                <1> 	jne .notab
  4205 000032C5 B1A0                <1> 	mov cl, 160
  4206 000032C7 28D1                <1> 	sub cl, dl
  4207 000032C9 C0E905              <1> 	shr cl, 5
  4208 000032CC C0E105              <1> 	shl cl, 5
  4209 000032CF 80F900              <1> 	cmp cl, 0
  4210 000032D2 750A                <1> 	jne .nonewline
  4211 000032D4 E87EEAFFFF          <1> 	call printline
  4212 000032D9 E909000000          <1> 	jmp .notab
  4213                              <1> .nonewline:
  4214 000032DE 80C20F              <1> 	add dl, 15
  4215 000032E1 C0EA04              <1> 	shr dl, 4
  4216 000032E4 C0E204              <1> 	shl dl, 4
  4217                              <1> .notab:
  4218 000032E7 BE[75320000]        <1> 	mov esi, decnumber
  4219 000032EC 4E                  <1> 	dec esi
  4220                              <1> .sifind:
  4221 000032ED 46                  <1> 	inc esi
  4222 000032EE 81FE[82320000]      <1> 	cmp esi, decnumberend - 1
  4223 000032F4 7305                <1> 	jae .nosifind
  4224 000032F6 803E30              <1> 	cmp byte [esi], '0'
  4225 000032F9 74F2                <1> 	je .sifind
  4226                              <1> .nosifind:
  4227 000032FB E85CEAFFFF          <1> 	call print
  4228 00003300 803D[B5310000]02    <1> 	cmp byte [firsthexshown], 2
  4229 00003307 7505                <1> 	jne .shown
  4230 00003309 E849EAFFFF          <1> 	call printline
  4231                              <1> .shown:
  4232 0000330E C605[B5310000]00    <1> 	mov byte [firsthexshown], 0
  4233 00003315 61                  <1> 	popa
  4234 00003316 C3                  <1> 	ret
  4235                              <1> 	
  4236                              <1> cnvrthextxt:
  4237 00003317 31C9                <1> 	xor ecx, ecx
  4238 00003319 31C0                <1> 	xor eax, eax
  4239 0000331B 31D2                <1> 	xor edx, edx
  4240 0000331D 31DB                <1> 	xor ebx, ebx
  4241 0000331F 4E                  <1> 	dec esi
  4242                              <1> .end:
  4243 00003320 46                  <1> 	inc esi
  4244 00003321 8A06                <1> 	mov al, [esi]
  4245 00003323 3C00                <1> 	cmp al, 0
  4246 00003325 75F9                <1> 	jne .end
  4247                              <1> .loop:
  4248 00003327 4E                  <1> 	dec esi
  4249 00003328 8A06                <1> 	mov al, [esi]
  4250 0000332A 3C41                <1> 	cmp al, "A"
  4251 0000332C 7328                <1> 	jae .char
  4252 0000332E 2C30                <1> 	sub al, 48
  4253 00003330 3C10                <1> 	cmp al, 16
  4254 00003332 7721                <1> 	ja .done
  4255                              <1> .donechar:
  4256 00003334 81FA00000000        <1> 	cmp edx, 0
  4257 0000333A 740E                <1> 	je .noshl
  4258 0000333C 89D3                <1> 	mov ebx, edx
  4259                              <1> .shl:
  4260 0000333E C1E004              <1> 	shl eax, 4
  4261 00003341 4B                  <1> 	dec ebx
  4262 00003342 81FB00000000        <1> 	cmp ebx, 0
  4263 00003348 75F4                <1> 	jne .shl
  4264                              <1> .noshl:
  4265 0000334A 42                  <1> 	inc edx
  4266 0000334B 01C1                <1> 	add ecx, eax
  4267 0000334D 81FA08000000        <1> 	cmp edx, 8
  4268 00003353 72D2                <1> 	jb .loop
  4269                              <1> .done:
  4270 00003355 C3                  <1> 	ret
  4271                              <1> .char:
  4272 00003356 3C46                <1> 	cmp al, "F"
  4273 00003358 77FB                <1> 	ja .done
  4274 0000335A 2C41                <1> 	sub al, "A"
  4275 0000335C 040A                <1> 	add al, 0xA
  4276 0000335E EBD4                <1> 	jmp .donechar
  4277                              <1> 	
  4278                              <1> 	
  4279                              <1> cnvrttxt: ;text to convert in esi, first part or 0 in edi
  4280 00003360 31C9                <1> 	xor ecx, ecx
  4281 00003362 31C0                <1> 	xor eax, eax
  4282 00003364 31D2                <1> 	xor edx, edx
  4283 00003366 31DB                <1> 	xor ebx, ebx
  4284 00003368 4E                  <1> 	dec esi
  4285                              <1> .lp:
  4286 00003369 46                  <1> 	inc esi
  4287 0000336A 8A06                <1> 	mov al, [esi]
  4288 0000336C 3C00                <1> 	cmp al, 0
  4289 0000336E 75F9                <1> 	jne .lp
  4290 00003370 4E                  <1> 	dec esi
  4291 00003371 8A06                <1> 	mov al, [esi]
  4292 00003373 3C2E                <1> 	cmp al, '.'
  4293 00003375 7503                <1> 	jne .dot
  4294 00003377 46                  <1> 	inc esi
  4295 00003378 EBEF                <1> 	jmp .lp
  4296                              <1> .dot:
  4297 0000337A 3C20                <1> 	cmp al, ' '
  4298 0000337C 7404                <1> 	je .zero
  4299 0000337E 3C30                <1> 	cmp al, '0'
  4300 00003380 7504                <1> 	jne .txtlp
  4301                              <1> .zero: 
  4302 00003382 39FE                <1> 		cmp esi, edi
  4303 00003384 7441                <1> 		je .done
  4304                              <1> .txtlp:
  4305 00003386 31C0                <1> 	xor eax, eax
  4306 00003388 8A06                <1> 	mov al, [esi]
  4307 0000338A 3C3D                <1> 	cmp al, '='
  4308 0000338C 7439                <1> 	je .done
  4309 0000338E 3C30                <1> 	cmp al, 48
  4310 00003390 7235                <1> 	jb .done
  4311 00003392 3C23                <1> 	cmp al, '#'
  4312 00003394 7431                <1> 	je .done
  4313 00003396 39FE                <1> 	cmp esi, edi
  4314 00003398 722D                <1> 	jb .done
  4315 0000339A 81F900000000        <1> 	cmp ecx, 0
  4316 000033A0 7708                <1> 	ja .exp
  4317 000033A2 2C30                <1> .noexp:	sub al, 48
  4318 000033A4 01C2                <1> 	add edx, eax
  4319 000033A6 4E                  <1> 	dec esi
  4320 000033A7 41                  <1> 	inc ecx
  4321 000033A8 EBDC                <1> 	jmp .txtlp
  4322 000033AA 81F900000000        <1> .exp:	cmp ecx, 0
  4323 000033B0 74F0                <1> 	je .noexp
  4324 000033B2 2C30                <1> 	sub al, 48
  4325 000033B4 51                  <1> 	push ecx
  4326                              <1> .expmul:
  4327 000033B5 89C3                <1> 	mov ebx, eax
  4328 000033B7 01D8                <1> 	add eax, ebx
  4329 000033B9 C1E303              <1> 	shl ebx, 3
  4330 000033BC 01D8                <1> 	add eax, ebx
  4331 000033BE E2F5                <1> 	loop .expmul
  4332 000033C0 01C2                <1> 	add edx, eax
  4333 000033C2 59                  <1> 	pop ecx
  4334 000033C3 4E                  <1> 	dec esi
  4335 000033C4 41                  <1> 	inc ecx
  4336 000033C5 EBBF                <1> 	jmp .txtlp
  4337 000033C7 89D1                <1> .done: mov ecx, edx
  4338 000033C9 C3                  <1> 	ret
  4339                              <1> 
  4340                              <1> benchmarki: ;output number of clocks since initial value
  4341 000033CA 0F31                <1> 	rdtsc
  4342 000033CC 8B1D[F58E0000]      <1> 	mov ebx, [initialtsc]
  4343 000033D2 8B0D[F98E0000]      <1> 	mov ecx, [initialtsc + 4]
  4344 000033D8 E90E000000          <1> 	jmp benchmarkl.calc
  4345                              <1> 
  4346                              <1> benchmarkl: ;output number of clocks since last benchmark
  4347 000033DD 0F31                <1> 	rdtsc
  4348 000033DF 8B1D[FD8E0000]      <1> 	mov ebx, [lasttsc]
  4349 000033E5 8B0D[018F0000]      <1> 	mov ecx, [lasttsc + 4]
  4350                              <1> .calc:
  4351 000033EB 29D8                <1> 	sub eax, ebx
  4352 000033ED 7701                <1> 	ja .noover
  4353 000033EF 4A                  <1> 	dec edx
  4354                              <1> .noover:
  4355 000033F0 29CA                <1> 	sub edx, ecx
  4356 000033F2 8B0C24              <1> 	mov ecx, [esp]
  4357 000033F5 E8D0FDFFFF          <1> 	call showhex
  4358 000033FA 89D1                <1> 	mov ecx, edx
  4359 000033FC E8C9FDFFFF          <1> 	call showhex
  4360 00003401 89C1                <1> 	mov ecx, eax
  4361 00003403 E8C2FDFFFF          <1> 	call showhex
  4362 00003408 E84AE9FFFF          <1> 	call printline
  4363 0000340D 0F31                <1> 	rdtsc
  4364 0000340F A3[FD8E0000]        <1> 	mov [lasttsc], eax
  4365 00003414 8915[018F0000]      <1> 	mov [lasttsc + 4], edx
  4366 0000341A C3                  <1> 	ret
  4367                                      %include "source/programs.asm"
  4368 0000341B FF2C                <1> filetypes db 255,44
  4369                              <1> progstart:		;programs start here
  4370                              <1> indexfiles:
  4371 0000341D BE[1D340000]        <1> 	mov esi, progstart
  4372 00003422 BB[08B40300]        <1> 	mov ebx, fileindex
  4373 00003427 BF[1D340000]        <1> 	mov edi, progstart
  4374 0000342C 81EF02000000        <1> 	sub edi, 2
  4375                              <1> indexloop:
  4376 00003432 668B0E              <1> 	mov cx, [esi]
  4377                              <1> 	indexloop2:
  4378 00003435 663B0F              <1> 		cmp cx, [edi]
  4379 00003438 7424                <1> 		je indexloop2done
  4380 0000343A 81EF02000000        <1> 		sub edi, 2
  4381 00003440 81FF[1B340000]      <1> 		cmp edi, filetypes
  4382 00003446 73ED                <1> 		jae indexloop2
  4383 00003448 BF[1D340000]        <1> 	mov edi, progstart
  4384 0000344D 81EF02000000        <1> 	sub edi, 2
  4385 00003453 46                  <1> 	inc esi
  4386 00003454 81FE[5C560000]      <1> 	cmp esi, batchprogend
  4387 0000345A 734E                <1> 	jae indexloopdone
  4388 0000345C EBD4                <1> 	jmp indexloop
  4389                              <1> indexloop2done:
  4390 0000345E 66890B              <1> 	mov [ebx], cx
  4391 00003461 81C302000000        <1> 	add ebx, 2
  4392 00003467 81C602000000        <1> 	add esi, 2
  4393                              <1> 	nameindex:
  4394 0000346D 8A0E                <1> 		mov cl, [esi]
  4395 0000346F 80F900              <1> 		cmp cl, 0
  4396 00003472 7406                <1> 		je nameindexdone
  4397 00003474 880B                <1> 		mov [ebx], cl
  4398 00003476 46                  <1> 		inc esi
  4399 00003477 43                  <1> 		inc ebx
  4400 00003478 EBF3                <1> 		jmp nameindex
  4401                              <1> 	nameindexdone:
  4402 0000347A 43                  <1> 		inc ebx
  4403 0000347B 66C7030000          <1> 		mov word [ebx], 0
  4404 00003480 81C302000000        <1> 		add ebx, 2
  4405 00003486 46                  <1> 		inc esi
  4406 00003487 8933                <1> 		mov [ebx], esi
  4407 00003489 81C304000000        <1> 		add ebx, 4
  4408 0000348F 66C7030000          <1> 		mov word [ebx], 0
  4409 00003494 81C302000000        <1> 		add ebx, 2
  4410 0000349A 81FB[08B80300]      <1> 		cmp ebx, fileindexend
  4411 000034A0 7308                <1> 		jae indexloopdone
  4412 000034A2 81C601000000        <1> 		add esi, 1
  4413 000034A8 EB88                <1> 		jmp indexloop
  4414 000034AA C605[B2340000]01    <1> indexloopdone: 	mov byte [indexdone], 1
  4415 000034B1 C3                  <1> 		ret
  4416 000034B2 00                  <1> indexdone db 0
  4417                              <1> %include 'source/programs/_comment.asm' ;#
  4418 000034B3 FF2C2300            <2> 	db 255,44,"#",0	;this lets you rem stuff
  4419 000034B7 C3                  <2> 	ret 
  4420                              <1> %include 'source/programs/_math.asm' ;!
  4421 000034B8 FF2C2100            <2> db 255,44,"!",0
  4422                              <2> 	num:	
  4423 000034BC E8A1FBFFFF          <2> 		call clearbuffer
  4424 000034C1 C605[30370000]00    <2> 		mov byte [decimal], 0
  4425 000034C8 C605[31370000]00    <2> 		mov byte [decimal2], 0
  4426 000034CF 8B35[A82F0000]      <2> 		mov esi, [currentcommandloc]
  4427 000034D5 31C0                <2> 		xor eax, eax
  4428 000034D7 31C9                <2> 		xor ecx, ecx
  4429 000034D9 31DB                <2> 		xor ebx, ebx
  4430 000034DB 8A06                <2> 	num2:	mov al, [esi]
  4431 000034DD 3C2B                <2> 		cmp al, '+'
  4432 000034DF 7416                <2> 		je operatorfound
  4433 000034E1 3C2D                <2> 		cmp al, '-'
  4434 000034E3 7412                <2> 		je operatorfound
  4435 000034E5 3C2A                <2> 		cmp al, '*'
  4436 000034E7 740E                <2> 		je operatorfound
  4437 000034E9 3C2F                <2> 		cmp al, '/'
  4438 000034EB 740A                <2> 		je operatorfound
  4439 000034ED 3C5E                <2> 		cmp al, '^'
  4440 000034EF 7406                <2> 		je operatorfound
  4441 000034F1 46                  <2> 		inc esi
  4442 000034F2 84C0                <2> 		test al, al
  4443 000034F4 75E5                <2> 		jnz num2
  4444 000034F6 C3                  <2> 		ret
  4445 000034F7 50                  <2> 	operatorfound: push eax
  4446 000034F8 30E4                <2> 		xor ah, ah
  4447 000034FA 8826                <2> 		mov [esi], ah
  4448 000034FC 89F7                <2> 		mov edi, esi
  4449 000034FE 46                  <2> 		inc esi
  4450 000034FF 8A06                <2> 		mov al, [esi]
  4451 00003501 3C25                <2> 		cmp al, '%'
  4452 00003503 0F845E000000        <2> 		je near resultnum1
  4453                              <2> 	varnum2: 
  4454 00003509 57                  <2> 		push edi
  4455 0000350A E8A0000000          <2> 		call checkdecimal
  4456 0000350F 5F                  <2> 		pop edi
  4457 00003510 E84BFEFFFF          <2> 		call cnvrttxt
  4458                              <2> 	vrnm2:
  4459 00003515 89CB                <2> 		mov ebx, ecx
  4460 00003517 53                  <2> 		push ebx
  4461 00003518 E845FBFFFF          <2> 		call clearbuffer
  4462 0000351D 8B35[A82F0000]      <2> 		mov esi, [currentcommandloc]
  4463 00003523 89F7                <2> 		mov edi, esi
  4464 00003525 46                  <2> 		inc esi
  4465 00003526 8A06                <2> 		mov al, [esi]
  4466 00003528 3C25                <2> 		cmp al, '%'
  4467 0000352A 0F844B000000        <2> 		je near resultnum2
  4468                              <2> 	varnum4: 
  4469 00003530 57                  <2> 		push edi
  4470 00003531 E865000000          <2> 		call checkdecimal2
  4471 00003536 5F                  <2> 		pop edi
  4472 00003537 E824FEFFFF          <2> 		call cnvrttxt
  4473                              <2> 	vrnm4:
  4474 0000353C 5B                  <2> 		pop ebx
  4475 0000353D 58                  <2> 		pop eax
  4476 0000353E 3C2B                <2> 		cmp al, '+'
  4477 00003540 0F8497000000        <2> 		je near plusnum
  4478 00003546 3C2D                <2> 		cmp al, '-'
  4479 00003548 0F849B000000        <2> 		je near subnum
  4480 0000354E 3C2A                <2> 		cmp al, '*'
  4481 00003550 0F849F000000        <2> 		je near mulnum
  4482 00003556 3C2F                <2> 		cmp al, '/'
  4483 00003558 0F84AD000000        <2> 		je near divnum
  4484 0000355E 3C5E                <2> 		cmp al, '^'
  4485 00003560 0F84CA000000        <2> 		je near expnum
  4486 00003566 C3                  <2> 		ret
  4487                              <2> 	resultnum1:
  4488 00003567 8A0D[32370000]      <2> 		mov cl, [decimalresult]
  4489 0000356D 880D[30370000]      <2> 		mov [decimal], cl
  4490 00003573 8B0D[33370000]      <2> 		mov ecx, [result]
  4491 00003579 EB9A                <2> 		jmp vrnm2
  4492                              <2> 	resultnum2:
  4493 0000357B 8A0D[30370000]      <2> 		mov cl, [decimal]
  4494 00003581 880D[31370000]      <2> 		mov [decimal2], cl
  4495 00003587 8A0D[32370000]      <2> 		mov cl, [decimalresult]
  4496 0000358D 880D[30370000]      <2> 		mov [decimal], cl
  4497 00003593 8B0D[33370000]      <2> 		mov ecx, [result]
  4498 00003599 EBA1                <2> 		jmp vrnm4
  4499                              <2> 	checkdecimal2:
  4500 0000359B 8A25[30370000]      <2> 		mov ah, [decimal]
  4501 000035A1 8825[31370000]      <2> 		mov [decimal2], ah
  4502 000035A7 30E4                <2> 		xor ah, ah
  4503 000035A9 8825[30370000]      <2> 		mov [decimal], ah
  4504                              <2> 	checkdecimal:
  4505 000035AF 89F7                <2> 		mov edi, esi
  4506                              <2> 	chkdec1:
  4507 000035B1 8A07                <2> 		mov al, [edi]
  4508 000035B3 3C2E                <2> 		cmp al, '.'
  4509 000035B5 0F840B000000        <2> 		je near fnddec
  4510 000035BB 3C00                <2> 		cmp al, 0
  4511 000035BD 0F8419000000        <2> 		je near nodecimal
  4512 000035C3 47                  <2> 		inc edi
  4513 000035C4 EBEB                <2> 		jmp chkdec1
  4514                              <2> 	fnddec:
  4515 000035C6 8A4701              <2> 		mov al, [edi + 1]
  4516 000035C9 8807                <2> 		mov [edi], al
  4517 000035CB 3C00                <2> 		cmp al, 0
  4518 000035CD 0F8409000000        <2> 		je near nodecimal
  4519 000035D3 FE05[30370000]      <2> 		inc byte [decimal]
  4520 000035D9 47                  <2> 		inc edi
  4521 000035DA EBEA                <2> 		jmp fnddec
  4522                              <2> 	nodecimal:
  4523 000035DC C3                  <2> 		ret
  4524                              <2> 	plusnum:
  4525 000035DD E80C010000          <2> 		call decaddfix
  4526 000035E2 01D9                <2> 		add ecx, ebx
  4527 000035E4 E98A000000          <2> 		jmp retnum
  4528                              <2> 	subnum:
  4529 000035E9 E800010000          <2> 		call decaddfix
  4530 000035EE 29D9                <2> 		sub ecx, ebx
  4531 000035F0 E97E000000          <2> 		jmp retnum
  4532                              <2> 	mulnum:
  4533 000035F5 A0[31370000]        <2> 		mov al, [decimal2]
  4534 000035FA 0005[30370000]      <2> 		add [decimal], al
  4535 00003600 89C8                <2> 		mov eax, ecx
  4536 00003602 F7E3                <2> 		mul ebx
  4537 00003604 89C1                <2> 		mov ecx, eax
  4538 00003606 E968000000          <2> 		jmp retnum
  4539                              <2> 	divnum:
  4540 0000360B E8DE000000          <2> 		call decaddfix
  4541 00003610 30C0                <2> 		xor al, al
  4542 00003612 A2[30370000]        <2> 		mov [decimal], al
  4543 00003617 31D2                <2> 		xor edx, edx
  4544 00003619 89C8                <2> 		mov eax, ecx
  4545 0000361B 81FB00000000        <2> 		cmp ebx, 0
  4546 00003621 0F844C000000        <2> 		je near retnum
  4547 00003627 F7F3                <2> 		div ebx
  4548 00003629 89C1                <2> 		mov ecx, eax
  4549 0000362B E943000000          <2> 		jmp retnum
  4550                              <2> 	expnum:
  4551 00003630 8A15[30370000]      <2> 		mov dl, [decimal]
  4552 00003636 8815[31370000]      <2> 		mov [decimal2], dl
  4553 0000363C 31D2                <2> 		xor edx, edx
  4554 0000363E 89C8                <2> 		mov eax, ecx
  4555 00003640 89D9                <2> 		mov ecx, ebx
  4556 00003642 89C3                <2> 		mov ebx, eax
  4557 00003644 81F900000000        <2> 		cmp ecx, 0
  4558 0000364A 7422                <2> 		je noexpnum
  4559 0000364C 49                  <2> 		dec ecx
  4560 0000364D 81F900000000        <2> 		cmp ecx, 0
  4561 00003653 7412                <2> 		je noexpnumlp
  4562 00003655 F7E3                <2> 	expnumlp: mul ebx
  4563 00003657 8A15[31370000]      <2> 		mov dl, [decimal2]
  4564 0000365D 0015[30370000]      <2> 		add [decimal], dl
  4565 00003663 31D2                <2> 		xor edx, edx
  4566 00003665 E2EE                <2> 		loop expnumlp
  4567                              <2> 	noexpnumlp:
  4568 00003667 89C1                <2> 		mov ecx, eax
  4569 00003669 E905000000          <2> 		jmp retnum
  4570                              <2> 	noexpnum:
  4571 0000366E B901000000          <2> 		mov ecx, 1
  4572                              <2> 	retnum: 
  4573 00003673 BE[9CD20300]        <2> 		mov esi, numbuf
  4574 00003678 890D[33370000]      <2> 		mov [result], ecx
  4575 0000367E E8F4F9FFFF          <2> 		call convert
  4576 00003683 BE[9CD20300]        <2> 		mov esi, numbuf
  4577 00003688 8A25[30370000]      <2> 		mov ah, [decimal]
  4578 0000368E 8825[32370000]      <2> 		mov [decimalresult], ah
  4579 00003694 80FC00              <2> 		cmp ah, 0
  4580 00003697 0F8425000000        <2> 		je near noputdecimal
  4581                              <2> 	putdecimal:
  4582 0000369D 4E                  <2> 		dec esi
  4583 0000369E FECC                <2> 		dec ah
  4584 000036A0 80FC00              <2> 		cmp ah, 0
  4585 000036A3 0F87F4FFFFFF        <2> 		ja near putdecimal
  4586 000036A9 4E                  <2> 		dec esi
  4587 000036AA 8A06                <2> 		mov al, [esi]
  4588 000036AC C6062E              <2> 		mov byte [esi], '.'
  4589                              <2> 	decputloop:
  4590 000036AF 4E                  <2> 		dec esi
  4591 000036B0 8A26                <2> 		mov ah, [esi]
  4592 000036B2 8806                <2> 		mov [esi], al
  4593 000036B4 88E0                <2> 		mov al, ah
  4594 000036B6 81FE[88D20300]      <2> 		cmp esi, buf2
  4595 000036BC 0F87EDFFFFFF        <2> 		ja near decputloop
  4596                              <2> 	noputdecimal:
  4597 000036C2 BE[88D20300]        <2> 		mov esi, buf2
  4598 000036C7 E805000000          <2> 		call chkadd
  4599 000036CC C3                  <2> 		ret
  4600 000036CD 00000000            <2> edxnumbuf dw 0,0
  4601 000036D1 8A06                <2> 	chkadd: mov al, [esi]
  4602 000036D3 3C30                <2> 		cmp al, '0'
  4603 000036D5 750C                <2> 		jne dnadd
  4604 000036D7 46                  <2> 		inc esi
  4605 000036D8 81FE[9CD20300]      <2> 		cmp esi, numbuf
  4606 000036DE 7402                <2> 		je dnaddm1
  4607 000036E0 EBEF                <2> 		jmp chkadd
  4608 000036E2 4E                  <2> 	dnaddm1: dec esi
  4609 000036E3 E874E6FFFF          <2> 	dnadd:	call print
  4610 000036E8 E86AE6FFFF          <2> 		call printline
  4611 000036ED C3                  <2> 		ret
  4612                              <2> 		
  4613                              <2> 	decaddfix:
  4614 000036EE A0[31370000]        <2> 		mov al, [decimal2]
  4615 000036F3 8A25[30370000]      <2> 		mov ah, [decimal]
  4616 000036F9 38E0                <2> 		cmp al, ah
  4617 000036FB 7432                <2> 		je gooddecadd
  4618 000036FD 38E0                <2> 		cmp al, ah
  4619 000036FF 721A                <2> 		jb lowdecadd
  4620                              <2> 	highdecadd:
  4621 00003701 FEC4                <2> 		inc ah
  4622 00003703 89CA                <2> 		mov edx, ecx
  4623 00003705 C1E103              <2> 		shl ecx, 3
  4624 00003708 01D1                <2> 		add ecx, edx
  4625 0000370A 01D1                <2> 		add ecx, edx
  4626 0000370C 38E0                <2> 		cmp al, ah
  4627 0000370E 77F1                <2> 		ja highdecadd
  4628 00003710 8825[30370000]      <2> 		mov [decimal], ah
  4629 00003716 E914000000          <2> 		jmp gooddecadd
  4630                              <2> 	lowdecadd:
  4631 0000371B FEC0                <2> 		inc al
  4632 0000371D 89DA                <2> 		mov edx, ebx
  4633 0000371F C1E303              <2> 		shl ebx, 3
  4634 00003722 01D3                <2> 		add ebx, edx
  4635 00003724 01D3                <2> 		add ebx, edx
  4636 00003726 38E0                <2> 		cmp al, ah
  4637 00003728 72F1                <2> 		jb lowdecadd
  4638 0000372A A2[30370000]        <2> 		mov [decimal], al
  4639                              <2> 	gooddecadd:
  4640 0000372F C3                  <2> 		ret
  4641                              <2> 		
  4642 00003730 00                  <2> decimal db 0
  4643 00003731 00                  <2> decimal2 db 0
  4644 00003732 00                  <2> decimalresult db 0
  4645 00003733 00000000            <2> result dd 0
  4646                              <1> %include 'source/programs/_variables.asm' ;% and $
  4647 00003737 FF2C2500            <2> db 255,44,"%",0
  4648                              <2> 	ans:
  4649 0000373B BE[88D20300]        <2> 		mov esi, buf2
  4650 00003740 E88CFFFFFF          <2> 		call chkadd
  4651 00003745 C3                  <2> 		ret
  4652                              <2> 		
  4653 00003746 FF2C2400            <2> db 255,44,"$",0
  4654 0000374A 8B35[A82F0000]      <2> var: mov esi, [currentcommandloc]
  4655 00003750 BB[88BA0300]        <2> 	mov ebx, variables
  4656 00003755 8A06                <2> lkeq:	mov al, [esi]
  4657 00003757 3C3D                <2> 	cmp al, '='
  4658 00003759 741B                <2> 	je eqfnd	;is there an '=' sign?
  4659 0000375B 3C00                <2> 	cmp al, 0
  4660 0000375D 7403                <2> 	je echovars
  4661 0000375F 46                  <2> 	inc esi
  4662 00003760 EBF3                <2> 	jmp lkeq
  4663 00003762 BE[88BA0300]        <2> echovars: mov esi, variables
  4664 00003767 BB[88CA0300]        <2> 	mov ebx, varend
  4665 0000376C B105                <2> 	mov cl, 5
  4666 0000376E B504                <2> 	mov ch, 4
  4667 00003770 E891F8FFFF          <2> 	call array
  4668 00003775 C3                  <2> 	ret
  4669 00003776 46                  <2> eqfnd:	inc esi
  4670 00003777 8A06                <2> 	mov al, [esi]
  4671 00003779 3C00                <2> 	cmp al, 0
  4672 0000377B 7410                <2> 	je readvar
  4673 0000377D 8B35[A82F0000]      <2> 	mov esi, [currentcommandloc]
  4674 00003783 BB[88BA0300]        <2> 	mov ebx, variables
  4675 00003788 E919000000          <2> 	jmp seek
  4676                              <2> readvar:
  4677 0000378D B00A                <2> 	mov al, 10
  4678 0000378F 66BB0700            <2> 	mov bx, 7
  4679 00003793 C605[3D230000]00    <2> 	mov byte [commandedit], 0
  4680 0000379A BF[88D20300]        <2> 	mov edi, buftxtend
  4681 0000379F E8E8E6FFFF          <2> 	call rdprint
  4682 000037A4 EBA4                <2> 	jmp var
  4683 000037A6 668B03              <2> seek:	mov ax, [ebx]
  4684 000037A9 B105                <2> 	mov cl, 5
  4685 000037AB B504                <2> 	mov ch, 4
  4686 000037AD 663D0000            <2> 	cmp ax, 0
  4687 000037B1 0F845B000000        <2> 	je near save
  4688 000037B7 6639C8              <2> 	cmp ax, cx
  4689 000037BA 7403                <2> 	je skfnd
  4690 000037BC 43                  <2> 	inc ebx
  4691 000037BD EBE7                <2> 	jmp seek
  4692 000037BF 8B35[A82F0000]      <2> skfnd:	mov esi, [currentcommandloc]
  4693 000037C5 46                  <2> 	inc esi
  4694 000037C6 81C302000000        <2> 	add ebx, 2
  4695 000037CC 89DF                <2> 	mov edi, ebx
  4696 000037CE B13D                <2> 	mov cl, '='
  4697 000037D0 E812F8FFFF          <2> 	call cndtest
  4698 000037D5 3C01                <2> 	cmp al, 1	
  4699 000037D7 7418                <2> 	je varfnd
  4700 000037D9 89FB                <2> 	mov ebx, edi
  4701 000037DB 8B35[A82F0000]      <2> 	mov esi, [currentcommandloc]
  4702 000037E1 668B03              <2> 	mov ax, [ebx]
  4703 000037E4 663D0000            <2> 	cmp ax, 0
  4704 000037E8 0F8424000000        <2> 	je near save
  4705 000037EE 43                  <2> 	inc ebx
  4706 000037EF EBB5                <2> 	jmp seek
  4707 000037F1 8A03                <2> varfnd:	mov al, [ebx]
  4708 000037F3 3C04                <2> 	cmp al, 4
  4709 000037F5 7404                <2> 	je save2
  4710 000037F7 4B                  <2> 	dec ebx
  4711 000037F8 4E                  <2> 	dec esi
  4712 000037F9 EBF6                <2> 	jmp varfnd
  4713 000037FB 4B                  <2> save2:	dec ebx
  4714 000037FC 4E                  <2> 	dec esi
  4715 000037FD 8A03                <2> 	mov al, [ebx]
  4716 000037FF 3C05                <2> 	cmp al, 5
  4717 00003801 7402                <2> 	je remove
  4718 00003803 EBEC                <2> 	jmp varfnd
  4719 00003805 8A03                <2> remove: mov al, [ebx]
  4720 00003807 3C00                <2> 	cmp al, 0
  4721 00003809 749B                <2> 	je seek
  4722 0000380B 30C0                <2> 	xor al, al
  4723 0000380D 8803                <2> 	mov [ebx], al
  4724 0000380F 43                  <2> 	inc ebx
  4725 00003810 EBF3                <2> 	jmp remove	;do not need for now-need defragmentation
  4726 00003812 8B35[A82F0000]      <2> save:	mov esi, [currentcommandloc]
  4727 00003818 43                  <2> 	inc ebx
  4728 00003819 B005                <2> 	mov al, 5
  4729 0000381B B404                <2> 	mov ah, 4
  4730 0000381D 668903              <2> 	mov [ebx], ax
  4731 00003820 43                  <2> 	inc ebx
  4732 00003821 43                  <2> svhere:	inc ebx
  4733 00003822 46                  <2> 	inc esi
  4734 00003823 8A06                <2> 	mov al, [esi]
  4735 00003825 3C00                <2> 	cmp al, 0
  4736 00003827 0F844A000000        <2> 	je near svdone
  4737 0000382D 3C25                <2> 	cmp al, '%'
  4738 0000382F 7404                <2> 	je ans2
  4739 00003831 8803                <2> 	mov [ebx], al	
  4740 00003833 EBEC                <2> 	jmp svhere
  4741 00003835 56                  <2> ans2:	push esi
  4742 00003836 BE[88D20300]        <2> 	mov esi, buf2
  4743 0000383B E823000000          <2> 	call ansfnd
  4744 00003840 E803000000          <2> 	call anscp
  4745 00003845 5E                  <2> 	pop esi
  4746 00003846 EBD9                <2> 	jmp svhere
  4747 00003848 8A06                <2> anscp:	mov al, [esi]
  4748 0000384A 8803                <2> 	mov [ebx], al
  4749 0000384C 81FE[9CD20300]      <2> 	cmp esi, numbuf
  4750 00003852 74CD                <2> 	je svhere
  4751 00003854 3C00                <2> 	cmp al, 0
  4752 00003856 74C9                <2> 	je svhere
  4753 00003858 43                  <2> 	inc ebx
  4754 00003859 46                  <2> 	inc esi
  4755 0000385A EBEC                <2> 	jmp anscp
  4756 0000385C 5E                  <2> ansnf:	pop esi
  4757 0000385D 8A06                <2> 	mov al, [esi]
  4758 0000385F 8803                <2> 	mov [ebx], al
  4759 00003861 EBBE                <2> 	jmp svhere
  4760 00003863 46                  <2> ansfnd:	inc esi
  4761 00003864 81FE[9BD20300]      <2> 	cmp esi, numbuf - 1
  4762 0000386A 740A                <2> 	je fndans
  4763 0000386C 8A06                <2> 	mov al, [esi]
  4764 0000386E 3C00                <2> 	cmp al, 0
  4765 00003870 74EA                <2> 	je ansnf
  4766 00003872 3C30                <2> 	cmp al, '0'
  4767 00003874 74ED                <2> 	je ansfnd
  4768                              <2> fndans:
  4769 00003876 C3                  <2> 	ret
  4770 00003877 30C0                <2> svdone:	xor al, al
  4771 00003879 8803                <2> 	mov [ebx], al
  4772 0000387B C3                  <2> 	ret
  4773                              <1> %include 'source/programs/_run.asm' ;./
  4774                              <2> 
  4775 0000387C 7F454C46            <2> 	elfstart db 0x7F,"ELF"
  4776 00003880 FF2C2E2F00          <2> 	db 255,44,"./",0
  4777                              <2> rundiskprog:
  4778 00003885 8B3D[A82F0000]      <2> 	mov edi, [currentcommandloc]
  4779 0000388B 81C702000000        <2> 	add edi, 2
  4780 00003891 BE00004000          <2> 	mov esi, 0x400000
  4781 00003896 E873320000          <2> 	call loadfile
  4782 0000389B 81FA94010000        <2> 	cmp edx, 404
  4783 000038A1 746A                <2> 	je noprogfound
  4784 000038A3 BB00004000          <2> 	mov ebx, 0x400000
  4785 000038A8 A1[7C380000]        <2> 	mov eax, [elfstart]
  4786 000038AD 3903                <2> 	cmp [ebx], eax
  4787 000038AF 0F8437000000        <2> 	je near runelf
  4788 000038B5 66813B4558          <2> 	cmp word [ebx], "EX"
  4789 000038BA 7577                <2> 	jne progbatchfound
  4790 000038BC 81C302000000        <2> 	add ebx, 2
  4791 000038C2 8B3D[A82F0000]      <2> 	mov edi, [currentcommandloc]
  4792 000038C8 81C702000000        <2> 	add edi, 2
  4793                              <2> findspaceprog:
  4794 000038CE 8A07                <2> 	mov al, [edi]
  4795 000038D0 47                  <2> 	inc edi
  4796 000038D1 3C20                <2> 	cmp al, " "
  4797 000038D3 75F9                <2> 	jne findspaceprog
  4798                              <2> findnonspaceprog:
  4799 000038D5 8A07                <2> 	mov al, [edi]
  4800 000038D7 47                  <2> 	inc edi
  4801 000038D8 3C20                <2> 	cmp al, " "
  4802 000038DA 74F9                <2> 	je findnonspaceprog
  4803 000038DC 4F                  <2> 	dec edi
  4804 000038DD 8925[08B80300]      <2> 	mov [previousstack], esp
  4805 000038E3 FFD3                <2> 	call ebx
  4806 000038E5 8B25[08B80300]      <2> 	mov esp, [previousstack]
  4807 000038EB C3                  <2> 	ret
  4808                              <2> runelf:
  4809 000038EC 8B3D[A82F0000]      <2> 	mov edi, [currentcommandloc]
  4810 000038F2 81C702000000        <2> 	add edi, 2
  4811 000038F8 81C380000000        <2> 	add ebx, 0x80
  4812 000038FE 8925[08B80300]      <2> 	mov [previousstack], esp
  4813 00003904 FFD3                <2> 	call ebx
  4814 00003906 8B25[08B80300]      <2> 	mov esp, [previousstack]
  4815 0000390C C3                  <2> 	ret
  4816                              <2> noprogfound:
  4817 0000390D BE[918E0000]        <2> 	mov esi, notfound1
  4818 00003912 E845E4FFFF          <2> 	call print
  4819 00003917 8B35[A82F0000]      <2> 	mov esi, [currentcommandloc]
  4820 0000391D 81C602000000        <2> 	add esi, 2
  4821 00003923 E834E4FFFF          <2> 	call print
  4822 00003928 BE[998E0000]        <2> 	mov esi, notfound2
  4823 0000392D E82AE4FFFF          <2> 	call print
  4824 00003932 C3                  <2> 	ret
  4825                              <2> progbatchfound:
  4826 00003933 BF00004000          <2> 		mov edi, 0x400000
  4827 00003938 C605[82BA0300]01    <2> 		mov byte [BATCHISON], 1
  4828                              <2> 	batchrunloop:
  4829 0000393F E88EF3FFFF          <2> 		call buftxtclear
  4830 00003944 BE[88CE0300]        <2> 		mov esi, buftxt
  4831 00003949 8935[A82F0000]      <2> 		mov [currentcommandloc], esi
  4832                              <2> 	batchrunloop2:
  4833 0000394F B10A                <2> 		mov cl, 10
  4834 00003951 B50D                <2> 		mov ch, 13
  4835 00003953 380F                <2> 		cmp [edi], cl
  4836 00003955 0F8419000000        <2> 		je near nxtbatchrunline
  4837 0000395B 382F                <2> 		cmp [edi], ch
  4838 0000395D 0F8411000000        <2> 		je near nxtbatchrunline
  4839 00003963 803F00              <2> 		cmp byte [edi], 0
  4840 00003966 0F8408000000        <2> 		je near nxtbatchrunline
  4841 0000396C 8A07                <2> 		mov al, [edi]
  4842 0000396E 8806                <2> 		mov [esi], al
  4843 00003970 46                  <2> 		inc esi
  4844 00003971 47                  <2> 		inc edi
  4845 00003972 EBDB                <2> 		jmp batchrunloop2
  4846                              <2> 	nxtbatchrunline:
  4847 00003974 47                  <2> 		inc edi
  4848 00003975 380F                <2> 		cmp [edi], cl
  4849 00003977 74FB                <2> 		je nxtbatchrunline
  4850 00003979 382F                <2> 		cmp [edi], ch
  4851 0000397B 74F7                <2> 		je nxtbatchrunline
  4852 0000397D 893D[DB390000]      <2> 		mov [batchedi], edi
  4853 00003983 893D[7EBA0300]      <2> 		mov [BATCHPOS], edi
  4854 00003989 C60600              <2> 		mov byte [esi], 0
  4855 0000398C BE[88CE0300]        <2> 		mov esi, buftxt
  4856 00003991 803E00              <2> 		cmp byte [esi], 0
  4857 00003994 0F8439000000        <2> 		je near nobatchfoundrun
  4858 0000399A 31DB                <2> 		xor ebx, ebx
  4859 0000399C 8A1D[19BA0300]      <2> 		mov bl, [IFON]
  4860 000039A2 80FB00              <2> 		cmp bl, 0
  4861 000039A5 0F8534000000        <2> 		jne near iftestbatch
  4862                              <2> 	doneiftest:
  4863 000039AB 803D[B13A0000]00    <2> 		cmp byte [runnextline], 0
  4864 000039B2 0F8405000000        <2> 		je near noruniftest
  4865 000039B8 E815F5FFFF          <2> 		call run
  4866                              <2> 	noruniftest:
  4867 000039BD C605[B13A0000]01    <2> 		mov byte [runnextline], 1
  4868 000039C4 8B3D[DB390000]      <2> 		mov edi, [batchedi]
  4869 000039CA 803F00              <2> 		cmp byte [edi], 0
  4870 000039CD 0F856CFFFFFF        <2> 		jne near batchrunloop
  4871                              <2> 	nobatchfoundrun:
  4872 000039D3 C605[82BA0300]00    <2> 		mov byte [BATCHISON], 0
  4873 000039DA C3                  <2> 		ret
  4874                              <2> 	
  4875 000039DB 00000000            <2> batchedi dd 0	
  4876                              <2> 	
  4877                              <2> 	iftestbatch:
  4878 000039DF BE[1ABA0300]        <2> 		mov esi, IFTRUE
  4879 000039E4 01DE                <2> 		add esi, ebx
  4880 000039E6 803E00              <2> 		cmp byte [esi], 0
  4881 000039E9 0F85BCFFFFFF        <2> 		jne near doneiftest
  4882 000039EF 881D[B23A0000]      <2> 		mov [iffalsebuf], bl
  4883 000039F5 803D[83BA0300]01    <2> 		cmp byte [LOOPON], 1
  4884 000039FC 0F8513000000        <2> 		jne near fifindbatch
  4885 00003A02 E938FFFFFF          <2> 		jmp batchrunloop
  4886                              <2> 	elsetestbatch:
  4887 00003A07 C60601              <2> 		mov byte [esi], 1
  4888 00003A0A 81C705000000        <2> 		add edi, 5
  4889 00003A10 E92AFFFFFF          <2> 		jmp batchrunloop
  4890                              <2> 	fifindbatch:
  4891 00003A15 66B96966            <2> 		mov cx, "if"
  4892 00003A19 66B86669            <2> 		mov ax, "fi"
  4893 00003A1D 663907              <2> 		cmp [edi], ax
  4894 00003A20 0F8424000000        <2> 		je near fifoundbatch
  4895 00003A26 66390F              <2> 		cmp [edi], cx
  4896 00003A29 0F8465000000        <2> 		je near iffoundbatch
  4897 00003A2F 803F00              <2> 		cmp byte [edi], 0
  4898 00003A32 0F8412000000        <2> 		je near fifoundbatch
  4899 00003A38 B8656C7365          <2> 		mov eax, "else"
  4900 00003A3D 3907                <2> 		cmp [edi], eax
  4901 00003A3F 0F84C2FFFFFF        <2> 		je near elsetestbatch
  4902 00003A45 E973FFFFFF          <2> 		jmp noruniftest
  4903                              <2> 	fifoundbatch:
  4904 00003A4A 81C702000000        <2> 		add edi, 2
  4905 00003A50 B00A                <2> 		mov al, 10
  4906 00003A52 3807                <2> 		cmp [edi], al
  4907 00003A54 0F840B000000        <2> 		je near goodfibatch
  4908 00003A5A 803F00              <2> 		cmp byte [edi], 0
  4909 00003A5D 0F8470FFFFFF        <2> 		je near nobatchfoundrun
  4910 00003A63 EBB0                <2> 		jmp fifindbatch
  4911                              <2> 	goodfibatch:
  4912 00003A65 B001                <2> 		mov al, 1
  4913 00003A67 2805[19BA0300]      <2> 		sub [IFON], al 
  4914 00003A6D A0[19BA0300]        <2> 		mov al, [IFON]
  4915 00003A72 8A1D[B23A0000]      <2> 		mov bl, [iffalsebuf]
  4916 00003A78 38D8                <2> 		cmp al, bl
  4917 00003A7A 7799                <2> 		ja fifindbatch
  4918 00003A7C 8B35[A82F0000]      <2> 		mov esi, [currentcommandloc]
  4919 00003A82 81EF02000000        <2> 		sub edi, 2
  4920 00003A88 C605[B13A0000]00    <2> 		mov byte [runnextline], 0
  4921 00003A8F E9ABFEFFFF          <2> 		jmp batchrunloop
  4922                              <2> 	iffoundbatch:
  4923 00003A94 B020                <2> 		mov al, ' '
  4924 00003A96 81C702000000        <2> 		add edi, 2
  4925 00003A9C 3807                <2> 		cmp [edi], al
  4926 00003A9E 0F8571FFFFFF        <2> 		jne near fifindbatch
  4927 00003AA4 B001                <2> 		mov al, 1
  4928 00003AA6 0005[19BA0300]      <2> 		add [IFON], al
  4929 00003AAC E964FFFFFF          <2> 		jmp fifindbatch
  4930                              <2> 		
  4931                              <2> 		
  4932 00003AB1 01                  <2> runnextline db 1
  4933 00003AB2 00                  <2> iffalsebuf db 0
  4934 00003AB3 C3                  <2> notbatch: ret 
  4935                              <1> %ifdef network.included
  4936                              <1> 	%include 'source/programs/arp.asm'
  4937 00003AB4 FF2C61727000        <2> db 255,44,"arp",0
  4938                              <2> 	;ARP TESTING
  4939                              <2> arptest:
  4940 00003ABA 8B35[A82F0000]      <2> 	mov esi, [currentcommandloc]
  4941 00003AC0 81C604000000        <2> 	add esi, 4
  4942 00003AC6 E8DA520000          <2> 	call strtoip
  4943 00003ACB 890D[723B0000]      <2> 	mov [arptargetinfo + 6], ecx ;move to next ip
  4944 00003AD1 E815530000          <2> 	call showip
  4945 00003AD6 803D[763B0000]01    <2> 	cmp byte [arpconfig], 1
  4946 00003ADD 7405                <2> 	je arptest2
  4947 00003ADF E841000000          <2> 	call arpinit
  4948                              <2> arptest2:	;try to reach 192.168.0.1
  4949 00003AE4 8B0D[838E0000]      <2> 	mov ecx, [sysmac]
  4950 00003AEA 668B1D[878E0000]    <2> 	mov bx, [sysmac + 4]
  4951 00003AF1 890D[523B0000]      <2> 	mov [sourcemac], ecx
  4952 00003AF7 66891D[563B0000]    <2> 	mov [sourcemac + 4],bx
  4953 00003AFE 890D[623B0000]      <2> 	mov [arpsenderinfo], ecx
  4954 00003B04 66891D[663B0000]    <2> 	mov [arpsenderinfo + 4], bx
  4955 00003B0B BF[4C3B0000]        <2> 	mov edi, frame
  4956 00003B10 BE[763B0000]        <2> 	mov esi, framend
  4957 00003B15 E859520000          <2> 	call sendpacket
  4958 00003B1A BE[CA8E0000]        <2> 	mov esi, line
  4959 00003B1F E838E2FFFF          <2> 	call print
  4960 00003B24 C3                  <2> 	ret
  4961                              <2> 	
  4962                              <2> arpinit:
  4963 00003B25 BE[773B0000]        <2> 	mov esi, arptable
  4964 00003B2A BF[838E0000]        <2> 	mov edi, sysmac
  4965 00003B2F BB[7F8E0000]        <2> 	mov ebx, sysip
  4966 00003B34 8B0F                <2> 	mov ecx, [edi]
  4967 00003B36 890E                <2> 	mov [esi], ecx
  4968 00003B38 668B4F04            <2> 	mov cx, [edi + 4]
  4969 00003B3C 894E04              <2> 	mov [esi + 4], ecx
  4970 00003B3F 8B0B                <2> 	mov ecx, [ebx]
  4971 00003B41 894E06              <2> 	mov [esi + 6], ecx
  4972 00003B44 C605[763B0000]01    <2> 	mov byte [arpconfig], 1
  4973 00003B4B C3                  <2> 	ret
  4974                              <2> 	
  4975                              <2> ;example frame
  4976                              <2> frame:
  4977 00003B4C FFFFFFFFFFFF        <2> destinationmac:	db 0xFF,0xFF,0xFF,0xFF,0xFF,0xFF
  4978 00003B52 000000000000        <2> sourcemac:		db 0,0,0,0,0,0
  4979 00003B58 0806                <2> ethertype:		db 8,6			;arp is 0x806
  4980                              <2> 	;example packet
  4981 00003B5A 0100                <2> 	arppacket: 		dw 1			;ethernet is 1
  4982 00003B5C 0800                <2> 	arpprotocol: 	db 8,0			;ip is 0x800
  4983 00003B5E 0604                <2> 					db 6,4			;length of mac, length of ip
  4984 00003B60 0001                <2> 	arpoperation: 	db 0,1			;one for arp request
  4985 00003B62 000000000000        <2> 	arpsenderinfo:	db 0x00,0x00,0x00,0x00,0x00,0x00	;mac
  4986 00003B68 C0A80073            <2> 					db 192,168,0,115		;ip
  4987 00003B6C 000000000000        <2> 	arptargetinfo:	db 0x00,0x00,0x00,0x00,0x00,0x00	;ignored in requests
  4988 00003B72 C0A80000            <2> 					db 192,168,0,0			;ip
  4989                              <2> framend:
  4990                              <2> 
  4991 00003B76 00                  <2> arpconfig db 0
  4992                              <2> arptable:	;mac,ip
  4993 00003B77 000000000000000000- <2> 	times 10 db 0,0,0,0,0,0,0,0,0,0
  4994 00003B80 00<rept>            <2>
  4995                              <2> arptableend:	
  4996                              <1> %endif
  4997                              <1> %include 'source/programs/batch.asm'
  4998 00003BDB FF2C626174636800    <2> db 255,44,"batch",0
  4999                              <2> 	batchst: 
  5000 00003BE3 8B3D[A82F0000]      <2> 		mov edi, [currentcommandloc]
  5001 00003BE9 81C706000000        <2> 		add edi, 6
  5002 00003BEF 803F00              <2> 		cmp byte [edi], 0
  5003 00003BF2 0F846D000000        <2> 		je near nonamefound
  5004 00003BF8 BE00004000          <2> 		mov esi, 0x400000
  5005 00003BFD E80C2F0000          <2> 		call loadfile
  5006 00003C02 89D0                <2> 		mov eax, edx
  5007 00003C04 3D94010000          <2> 		cmp eax, 404
  5008 00003C09 7465                <2> 		je goodbatchname
  5009 00003C0B BE[163C0000]        <2> 		mov esi, badbatchname
  5010 00003C10 E847E1FFFF          <2> 		call print
  5011 00003C15 C3                  <2> 		ret
  5012 00003C16 546869732066696C65- <2> 		badbatchname db "This file already exists!",10,0
  5013 00003C1F 20616C726561647920- <2>
  5014 00003C28 657869737473210A00  <2>
  5015 00003C31 596F75206861766520- <2> 		namenotfoundbatch db "You have to type a name after the command.",10,0
  5016 00003C3A 746F20747970652061- <2>
  5017 00003C43 206E616D6520616674- <2>
  5018 00003C4C 65722074686520636F- <2>
  5019 00003C55 6D6D616E642E0A00    <2>
  5020 00003C5D 00000000            <2> 		esicache3 dd 0
  5021 00003C61 00000000            <2> 		esicache2 dd 0
  5022                              <2> 	nonamefound:
  5023 00003C65 BE[313C0000]        <2> 		mov esi, namenotfoundbatch
  5024 00003C6A E8EDE0FFFF          <2> 		call print
  5025 00003C6F C3                  <2> 		ret
  5026                              <2> 	goodbatchname:
  5027 00003C70 BE00004000          <2> 		mov esi, 0x400000
  5028                              <2> 	batchcreate:
  5029 00003C75 8935[5D3C0000]      <2> 		mov [esicache3], esi
  5030 00003C7B BF00008000          <2> 		mov edi, 0x800000
  5031 00003C80 B00A                <2> 		mov al, 10
  5032 00003C82 B307                <2> 		mov bl, 7
  5033 00003C84 B404                <2> 		mov ah, 4
  5034 00003C86 CD30                <2> 		int 30h
  5035 00003C88 8935[613C0000]      <2> 		mov [esicache2], esi
  5036 00003C8E 8A0E                <2> 		mov cl, [esi]
  5037 00003C90 8B35[5D3C0000]      <2> 		mov esi, [esicache3]
  5038 00003C96 BB[CA3C0000]        <2> 		mov ebx, exitword
  5039 00003C9B E847F3FFFF          <2> 		call cndtest
  5040 00003CA0 3C01                <2> 		cmp al, 1
  5041 00003CA2 7411                <2> 		je endbatchcreate
  5042 00003CA4 3C02                <2> 		cmp al, 2
  5043 00003CA6 740D                <2> 		je endbatchcreate
  5044 00003CA8 8B35[613C0000]      <2> 		mov esi, [esicache2]
  5045 00003CAE B00A                <2> 		mov al, 10
  5046 00003CB0 8806                <2> 		mov [esi], al
  5047 00003CB2 46                  <2> 		inc esi
  5048 00003CB3 EBC0                <2> 		jmp batchcreate
  5049                              <2> 	endbatchcreate:
  5050 00003CB5 8B35[5D3C0000]      <2> 		mov esi, [esicache3]
  5051 00003CBB 31C0                <2> 		xor eax, eax
  5052 00003CBD 8806                <2> 		mov [esi], al
  5053 00003CBF BE00004000          <2> 		mov esi, 0x400000
  5054 00003CC4 E893E0FFFF          <2> 		call print
  5055 00003CC9 C3                  <2> 		ret
  5056                              <2> 	
  5057 00003CCA 5C7800              <2> 	exitword db "\x",0
  5058 00003CCD 54797065205C782074- <2> 	wordmsg db "Type \x to exit.",10,0
  5059 00003CD6 6F20657869742E0A00  <2>
  5060                              <1> %ifdef gui.background
  5061                              <1> 	%include 'source/programs/background.asm'
  5062                              <1> %endif
  5063                              <1> %include 'source/programs/beep.asm'
  5064 00003CDF FF2C6265657000      <2> 	db 255,44,"beep",0
  5065                              <2> beep:
  5066 00003CE6 B8[0B3D0000]        <2> 	mov eax, beepstart
  5067 00003CEB A3[72020000]        <2> 	mov [soundpos], eax
  5068 00003CF0 B8[0F3D0000]        <2> 	mov eax, beepend
  5069 00003CF5 A3[76020000]        <2> 	mov [soundendpos], eax
  5070 00003CFA C605[6F020000]01    <2> 	mov byte [soundon], 1
  5071                              <2> waitforsoundendbeep:
  5072 00003D01 A0[6F020000]        <2> 	mov al, [soundon]
  5073 00003D06 3C00                <2> 	cmp al, 0
  5074 00003D08 75F7                <2> 	jne waitforsoundendbeep
  5075 00003D0A C3                  <2> 	ret
  5076                              <2> 	
  5077                              <2> beepstart:
  5078 00003D0B 3200D111            <2> 	dw 50, 4561
  5079                              <2> beepend:
  5080                              <1> %ifdef dos.compatible
  5081                              <1> %else
  5082                              <1> 	%include 'source/programs/boot.asm'
  5083 00003D0F FF2C626F6F7400      <2> db 255,44,"boot",0
  5084                              <2> quickboot:
  5085                              <2> 	;load and jump to the bootloader
  5086                              <2> 	; mov ecx, 1
  5087                              <2> 	; xor ebx, ebx
  5088                              <2> 	; mov esi, 0x400000
  5089                              <2> 	; call diskr
  5090                              <2> 	; mov ax, LINEAR_SEL
  5091                              <2> 	; mov fs, ax
  5092                              <2> 	; mov esi, 0x400000
  5093                              <2> 	; mov edi, 0x7C00
  5094                              <2> 	; xor ebx, ebx
  5095                              <2> ; .lp:
  5096                              <2> 	; mov ecx, [esi+ebx]
  5097                              <2> 	; mov [fs:edi+ebx], ecx
  5098                              <2> 	; add ebx, 4
  5099                              <2> 	; cmp ebx, 512
  5100                              <2> 	; jb .lp
  5101 00003D16 66BB[263D]          <2> 	mov bx, bootload
  5102 00003D1A 66891D[F30C0000]    <2> 	mov [realmodeptr], bx
  5103 00003D21 E9BBCEFFFF          <2> 	jmp realmode
  5104                              <2> [BITS 16]
  5105                              <2> bootload:
  5106 00003D26 B80300              <2> 	mov ax, 3
  5107 00003D29 31DB                <2> 	xor bx, bx
  5108 00003D2B CD10                <2> 	int 10h
  5109 00003D2D EA007C0000          <2> 	jmp 0:0x7C00
  5110                              <2> [BITS 32]
  5111                              <1> %endif
  5112                              <1> %include 'source/programs/cd.asm'
  5113 00003D32 FF2C636400          <2> db 255,44,"cd",0
  5114                              <2> cd:
  5115 00003D37 8B35[A82F0000]      <2> 	mov esi, [currentcommandloc]
  5116 00003D3D 81C603000000        <2> 	add esi, 3
  5117 00003D43 8B3D[10B80300]      <2> 	mov edi, [currentfolderloc]
  5118 00003D49 893D[0CB80300]      <2> 	mov [lastfolderloc], edi
  5119 00003D4F 81C7[14B80300]      <2> 	add edi, currentfolder
  5120 00003D55 4F                  <2> 	dec edi
  5121 00003D56 66813E2E2E          <2> 	cmp word [esi], ".."
  5122 00003D5B 742A                <2> 	je .moveup
  5123 00003D5D 47                  <2> 	inc edi
  5124                              <2> .movedown:
  5125 00003D5E 8A06                <2> 	mov al, [esi]
  5126 00003D60 8807                <2> 	mov [edi], al
  5127 00003D62 47                  <2> 	inc edi
  5128 00003D63 46                  <2> 	inc esi
  5129 00003D64 3C00                <2> 	cmp al, 0
  5130 00003D66 740A                <2> 	je .donecd
  5131 00003D68 81FF[14BA0300]      <2> 	cmp edi, currentfolderend
  5132 00003D6E 72EE                <2> 	jb .movedown
  5133 00003D70 30C0                <2> 	xor al, al
  5134                              <2> .donecd:
  5135 00003D72 4F                  <2> 	dec edi
  5136 00003D73 C6072F              <2> 	mov byte [edi], '/'
  5137 00003D76 47                  <2> 	inc edi
  5138 00003D77 C60700              <2> 	mov byte [edi], 0
  5139 00003D7A 81EF[14B80300]      <2> 	sub edi, currentfolder
  5140 00003D80 893D[10B80300]      <2> 	mov [currentfolderloc], edi
  5141 00003D86 C3                  <2> 	ret
  5142                              <2> .moveup:
  5143 00003D87 31C0                <2> 	xor eax, eax
  5144 00003D89 A3[0CB80300]        <2> 	mov [lastfolderloc], eax
  5145                              <2> .moveuploop:
  5146 00003D8E 4F                  <2> 	dec edi
  5147 00003D8F 8A07                <2> 	mov al, [edi]
  5148 00003D91 81FF[14B80300]      <2> 	cmp edi, currentfolder
  5149 00003D97 763B                <2> 	jbe .moveupover
  5150 00003D99 3C2F                <2> 	cmp al, '/'
  5151 00003D9B 75F1                <2> 	jne .moveuploop
  5152 00003D9D C6072F              <2> 	mov byte [edi], '/'
  5153 00003DA0 47                  <2> 	inc edi
  5154 00003DA1 C60700              <2> 	mov byte [edi], 0
  5155 00003DA4 81EF[14B80300]      <2> 	sub edi, currentfolder
  5156 00003DAA 893D[10B80300]      <2> 	mov [currentfolderloc], edi
  5157 00003DB0 81C7[14B80300]      <2> 	add edi, currentfolder
  5158 00003DB6 4F                  <2> 	dec edi
  5159                              <2> .lastfolder:
  5160 00003DB7 4F                  <2> 	dec edi
  5161 00003DB8 8A07                <2> 	mov al, [edi]
  5162 00003DBA 81FF[14B80300]      <2> 	cmp edi, currentfolder
  5163 00003DC0 7604                <2> 	jbe .donemoveup
  5164 00003DC2 3C2F                <2> 	cmp al, '/'
  5165 00003DC4 75F1                <2> 	jne .lastfolder
  5166                              <2> .donemoveup:
  5167 00003DC6 47                  <2> 	inc edi
  5168 00003DC7 81EF[14B80300]      <2> 	sub edi, currentfolder
  5169 00003DCD 893D[0CB80300]      <2> 	mov [lastfolderloc], edi
  5170 00003DD3 C3                  <2> 	ret
  5171                              <2> .moveupover:
  5172 00003DD4 BF[14B80300]        <2> 	mov edi, currentfolder
  5173 00003DD9 C6072F              <2> 	mov byte [edi], '/'
  5174 00003DDC 47                  <2> 	inc edi
  5175 00003DDD C60700              <2> 	mov byte [edi], 0
  5176 00003DE0 31C0                <2> 	xor eax, eax
  5177 00003DE2 A3[0CB80300]        <2> 	mov [lastfolderloc], eax
  5178 00003DE7 40                  <2> 	inc eax
  5179 00003DE8 A3[10B80300]        <2> 	mov [currentfolderloc], eax
  5180 00003DED C3                  <2> 	ret
  5181                              <1> %include 'source/programs/charmap.asm'
  5182 00003DEE 00                  <2> charmapnum db 0
  5183 00003DEF FF2C636861726D6170- <2> db 255,44,"charmap",0
  5184 00003DF8 00                  <2>
  5185 00003DF9 8B35[A82F0000]      <2> 	mov esi, [currentcommandloc]
  5186 00003DFF 81C608000000        <2> 	add esi, 8
  5187 00003E05 803E00              <2> 	cmp byte [esi], 0
  5188 00003E08 7412                <2> 	je .nospecific
  5189 00003E0A E808F5FFFF          <2> 	call cnvrthextxt
  5190 00003E0F 6689C8              <2> 	mov ax, cx
  5191 00003E12 66BB0700            <2> 	mov bx, 7
  5192 00003E16 E8CCE5FFFF          <2> 	call prcharq
  5193 00003E1B C3                  <2> 	ret
  5194                              <2> .nospecific:
  5195 00003E1C 66BB0700            <2> 	mov bx, 7
  5196 00003E20 66B82000            <2> 	mov ax, " "
  5197 00003E24 C605[EE3D0000]00    <2> 	mov byte [charmapnum], 0
  5198 00003E2B E8B7E5FFFF          <2> 	call prcharq
  5199 00003E30 E8B2E5FFFF          <2> 	call prcharq
  5200 00003E35 E8ADE5FFFF          <2> 	call prcharq
  5201 00003E3A E8A8E5FFFF          <2> 	call prcharq
  5202 00003E3F 66B83000            <2> 	mov ax, "0"
  5203                              <2> charmapnumprnt:
  5204 00003E43 E89FE5FFFF          <2> 	call prcharq
  5205 00003E48 6640                <2> 	inc ax
  5206 00003E4A 6650                <2> 	push ax
  5207 00003E4C 66B82000            <2> 	mov ax, " "
  5208 00003E50 E892E5FFFF          <2> 	call prcharq
  5209 00003E55 6658                <2> 	pop ax
  5210 00003E57 663D3900            <2> 	cmp ax, "9"
  5211 00003E5B 76E6                <2> 	jbe charmapnumprnt
  5212 00003E5D 66B84100            <2> 	mov ax, "A"
  5213                              <2> charmapnumprnt2:
  5214 00003E61 E881E5FFFF          <2> 	call prcharq
  5215 00003E66 6640                <2> 	inc ax
  5216 00003E68 6650                <2> 	push ax
  5217 00003E6A 66B82000            <2> 	mov ax, " "
  5218 00003E6E E874E5FFFF          <2> 	call prcharq
  5219 00003E73 6658                <2> 	pop ax
  5220 00003E75 663D4700            <2> 	cmp ax, "G"
  5221 00003E79 72E6                <2> 	jb charmapnumprnt2
  5222                              <2> 	
  5223 00003E7B BE[CA8E0000]        <2> 	mov esi, line
  5224 00003E80 E8B3DEFFFF          <2> 	call printquiet
  5225 00003E85 6631C0              <2> 	xor ax, ax
  5226 00003E88 6689C1              <2> 	mov cx, ax
  5227 00003E8B E826F3FFFF          <2> 	call showhexsmall
  5228 00003E90 E96C000000          <2> 	jmp charmapnocopy ;the first char is 0 which is unprintable
  5229                              <2> charmapcopy:
  5230 00003E95 6640                <2> 	inc ax
  5231 00003E97 663D0800            <2> 	cmp ax, 8
  5232 00003E9B 7464                <2> 	je charmapnocopy
  5233 00003E9D 663D0900            <2> 	cmp ax, 9
  5234 00003EA1 745E                <2> 	je charmapnocopy
  5235 00003EA3 663D0A00            <2> 	cmp ax, 10
  5236 00003EA7 7458                <2> 	je charmapnocopy
  5237 00003EA9 663D0D00            <2> 	cmp ax, 13
  5238 00003EAD 7452                <2> 	je charmapnocopy
  5239 00003EAF 663DFF00            <2> 	cmp ax, 255
  5240 00003EB3 744C                <2> 	je charmapnocopy
  5241 00003EB5 663D0001            <2> 	cmp ax, 256
  5242 00003EB9 7445                <2> 	je nomorecharmap
  5243 00003EBB 6650                <2> 	push ax
  5244 00003EBD E825E5FFFF          <2> 	call prcharq
  5245 00003EC2 66B82000            <2> 	mov ax, " "
  5246 00003EC6 E81CE5FFFF          <2> 	call prcharq
  5247 00003ECB 6658                <2> 	pop ax
  5248                              <2> charmapcopycheck:
  5249 00003ECD FE05[EE3D0000]      <2> 	inc byte [charmapnum]
  5250 00003ED3 803D[EE3D0000]10    <2> 	cmp byte [charmapnum], 16
  5251 00003EDA 72B9                <2> 	jb charmapcopy
  5252 00003EDC 6650                <2> 	push ax
  5253 00003EDE BE[CA8E0000]        <2> 	mov esi, line
  5254 00003EE3 E850DEFFFF          <2> 	call printquiet
  5255 00003EE8 6658                <2> 	pop ax
  5256 00003EEA 3CFF                <2> 	cmp al, 255
  5257 00003EEC 7412                <2> 	je nomorecharmap
  5258 00003EEE 88C1                <2> 	mov cl, al
  5259 00003EF0 FEC1                <2> 	inc cl
  5260 00003EF2 E8BFF2FFFF          <2> 	call showhexsmall
  5261 00003EF7 C605[EE3D0000]00    <2> 	mov byte [charmapnum], 0
  5262 00003EFE EB95                <2> 	jmp charmapcopy
  5263                              <2> nomorecharmap:
  5264 00003F00 C3                  <2> 	ret
  5265                              <2> charmapnocopy:
  5266 00003F01 6650                <2> 	push ax
  5267 00003F03 66B82000            <2> 	mov ax, " "
  5268 00003F07 E8DBE4FFFF          <2> 	call prcharq
  5269 00003F0C E8D6E4FFFF          <2> 	call prcharq
  5270 00003F11 6658                <2> 	pop ax
  5271 00003F13 EBB8                <2> 	jmp charmapcopycheck
  5272                              <1> %ifdef gui.included
  5273                              <1> 	%include 'source/programs/circle.asm'
  5274 00003F15 FF2C636972636C6500  <2> db 255,44,"circle",0
  5275                              <2> circle:
  5276 00003F1E 8B35[A82F0000]      <2> 	mov esi, [currentcommandloc]
  5277 00003F24 81C607000000        <2> 	add esi, 7
  5278 00003F2A 66B91000            <2> 	mov cx, 16
  5279 00003F2E 30C0                <2> 	xor al, al
  5280 00003F30 3806                <2> 	cmp [esi], al
  5281 00003F32 7405                <2> 	je .nocmdline
  5282 00003F34 E827F4FFFF          <2> 	call cnvrttxt
  5283                              <2> .nocmdline:
  5284 00003F39 E80D0D0000          <2> 	call linetester.stime
  5285 00003F3E E857000000          <2> 	call fcircle.nocmdline
  5286 00003F43 E81B0D0000          <2> 	call linetester.etime
  5287 00003F48 53                  <2> 	push ebx
  5288 00003F49 57                  <2> 	push edi
  5289 00003F4A E805E4FFFF          <2> 	call getchar
  5290 00003F4F 59                  <2> 	pop ecx
  5291 00003F50 E830F3FFFF          <2> 	call showdec
  5292 00003F55 BE[F14C0000]        <2> 	mov esi, linetester.msgcircle
  5293 00003F5A E8D9DDFFFF          <2> 	call printquiet
  5294 00003F5F 59                  <2> 	pop ecx
  5295 00003F60 E820F3FFFF          <2> 	call showdec
  5296 00003F65 BE[084D0000]        <2> 	mov esi, linetester.msgtime
  5297 00003F6A E8C9DDFFFF          <2> 	call printquiet
  5298 00003F6F E83E340000          <2> 	call reloadallgraphics
  5299 00003F74 C3                  <2> 	ret
  5300                              <2> 	
  5301 00003F75 FF2C66636972636C65- <2> db 255,44,"fcircle",0	;attempts to draw many circles without refreshing screen or showing time
  5302 00003F7E 00                  <2>
  5303                              <2> fcircle:	
  5304 00003F7F 8B35[A82F0000]      <2> 	mov esi, [currentcommandloc]
  5305 00003F85 81C608000000        <2> 	add esi, 8
  5306 00003F8B 66B91000            <2> 	mov cx, 16
  5307 00003F8F 30C0                <2> 	xor al, al
  5308 00003F91 3806                <2> 	cmp [esi], al
  5309 00003F93 7405                <2> 	je .nocmdline
  5310 00003F95 E8C6F3FFFF          <2> 	call cnvrttxt
  5311                              <2> .nocmdline:
  5312 00003F9A 6689C8              <2> 	mov ax, cx
  5313 00003F9D 66D1E1              <2> 	shl cx, 1
  5314 00003FA0 6689CA              <2> 	mov dx, cx
  5315 00003FA3 663B15[5A5A0000]    <2> 	cmp dx, [resolutionx]
  5316 00003FAA 731B                <2> 	jae .done
  5317 00003FAC 663B0D[5C5A0000]    <2> 	cmp cx, [resolutiony]
  5318 00003FB3 7312                <2> 	jae .done
  5319 00003FB5 668B35[6D020000]    <2> 	mov si, [timenanoseconds + 2]
  5320 00003FBC 31FF                <2> 	xor edi, edi
  5321 00003FBE 803D[EF8E0000]01    <2> 	cmp byte [guion], 1
  5322 00003FC5 7401                <2> 	je .lp
  5323 00003FC7 C3                  <2> .done ret
  5324                              <2> .lp:
  5325 00003FC8 6629C2              <2> 	sub dx, ax
  5326 00003FCB 6629C1              <2> 	sub cx, ax
  5327 00003FCE 60                  <2> 	pusha
  5328 00003FCF E8FD2E0000          <2> 	call fillcircle
  5329 00003FD4 61                  <2> 	popa
  5330 00003FD5 47                  <2> 	inc edi
  5331 00003FD6 660335[6B020000]    <2> 	add si, [timenanoseconds]
  5332 00003FDD 6601C2              <2> 	add dx, ax
  5333 00003FE0 6601C2              <2> 	add dx, ax
  5334 00003FE3 6601C2              <2> 	add dx, ax
  5335 00003FE6 6601C1              <2> 	add cx, ax
  5336 00003FE9 663B15[5A5A0000]    <2> 	cmp dx, [resolutionx]
  5337 00003FF0 72D6                <2> 	jb .lp
  5338 00003FF2 6689C2              <2> 	mov dx, ax
  5339 00003FF5 6601C2              <2> 	add dx, ax
  5340 00003FF8 6601C1              <2> 	add cx, ax
  5341 00003FFB 6601C1              <2> 	add cx, ax
  5342 00003FFE 663B0D[5C5A0000]    <2> 	cmp cx, [resolutiony]
  5343 00004005 72C1                <2> 	jb .lp
  5344 00004007 C3                  <2> 	ret
  5345                              <1> %endif
  5346                              <1> %include 'source/programs/clear.asm'
  5347 00004008 FF2C636C65617200    <2> db 255,44,"clear",0
  5348 00004010 E8F3DDFFFF          <2> 		call clear
  5349 00004015 C3                  <2> 		ret 
  5350                              <1> %include 'source/programs/cpuid.asm'
  5351 00004016 FF2C637075696400    <2> db 255,44,"cpuid",0
  5352 0000401E 31C0                <2> 	xor eax, eax
  5353 00004020 0FA2                <2> 	cpuid
  5354 00004022 891D[73400000]      <2> 	mov [cpuidbuf], ebx
  5355 00004028 8915[77400000]      <2> 	mov [cpuidbuf + 4], edx
  5356 0000402E 890D[7B400000]      <2> 	mov [cpuidbuf + 8], ecx
  5357 00004034 BE[73400000]        <2> 	mov esi, cpuidbuf
  5358 00004039 E81EDDFFFF          <2> 	call print
  5359 0000403E BE[CA8E0000]        <2> 	mov esi, line
  5360 00004043 E814DDFFFF          <2> 	call print
  5361 00004048 B801000000          <2> 	mov eax, 1
  5362 0000404D 0FA2                <2> 	cpuid
  5363 0000404F 89C1                <2> 	mov ecx, eax
  5364 00004051 C605[B5310000]02    <2> 	mov byte [firsthexshown], 2
  5365 00004058 E86DF1FFFF          <2> 	call showhex
  5366 0000405D B808000080          <2> 	mov eax, 0x80000008
  5367 00004062 0FA2                <2> 	cpuid
  5368 00004064 89C1                <2> 	mov ecx, eax
  5369 00004066 C605[B5310000]02    <2> 	mov byte [firsthexshown], 2
  5370 0000406D E858F1FFFF          <2> 	call showhex
  5371 00004072 C3                  <2> 	ret
  5372                              <2> 	
  5373 00004073 00<rept>            <2> cpuidbuf times 13 db 0
  5374                              <2> cpuidvendorend:
  5375                              <1> %include 'source/programs/date.asm'
  5376 00004080 082E30303030303030- <2> timenscache db 8,".000000000"
  5377 00004089 3030                <2>
  5378 0000408B 200A00              <2> timenscacheend: db " ",10,0
  5379 0000408E 00                  <2> istimeset db 0
  5380 0000408F 456E74657220746865- <2> settimemsg db "Enter the current UNIX time:",10,0
  5381 00004098 2063757272656E7420- <2>
  5382 000040A1 554E49582074696D65- <2>
  5383 000040AA 3A0A00              <2>
  5384 000040AD 00<rept>            <2> timeinputbuffer times 12 db 0
  5385 000040B9 00                  <2> timeinputbend: db 0
  5386                              <2> 
  5387 000040BA FF2C6461746500      <2> db 255,44,"date",0
  5388                              <2> 	;cmp byte [istimeset], 0
  5389                              <2> 	;jne timeisset
  5390 000040C1 E880000000          <2> 	call time
  5391 000040C6 E828020000          <2> 	call timeconvert	
  5392                              <2> 	; mov esi, settimemsg
  5393                              <2> 	; call print
  5394                              <2> 	; mov esi, timeinputbuffer
  5395                              <2> 	; mov edi, timeinputbend
  5396                              <2> 	; call readline
  5397                              <2> 	; mov esi, timeinputbuffer
  5398                              <2> 	; xor edi, edi
  5399                              <2> 	; call cnvrttxt
  5400 000040CB 890D[67020000]      <2> 	mov [timeseconds], ecx
  5401                              <2> 	;xor ecx, ecx
  5402                              <2> 	;mov [timenanoseconds], ecx
  5403 000040D1 C605[8E400000]01    <2> 	mov byte [istimeset], 1
  5404                              <2> timeisset:
  5405 000040D8 8B0D[67020000]      <2> 	mov ecx, [timeseconds]
  5406 000040DE E8A2F1FFFF          <2> 	call showdec
  5407                              <2> 	
  5408 000040E3 8B0D[6B020000]      <2> 	mov ecx, [timenanoseconds]
  5409 000040E9 BE[80400000]        <2> 	mov esi, timenscache
  5410 000040EE C7460230303030      <2> 	mov dword [esi+ 2], "0000"
  5411 000040F5 C7460630303030      <2> 	mov dword [esi + 6], "0000"
  5412 000040FC C6460A30            <2> 	mov byte [esi + 10], "0"
  5413 00004100 BE[8B400000]        <2> 	mov esi, timenscacheend
  5414 00004105 E86DEFFFFF          <2> 	call convert
  5415 0000410A BE[80400000]        <2> 	mov esi, timenscache
  5416 0000410F E824DCFFFF          <2> 	call printquiet
  5417                              <2> 	
  5418 00004114 E82D000000          <2> 	call time
  5419 00004119 BE[5E440000]        <2> 	mov esi, timeshow
  5420 0000411E E815DCFFFF          <2> 	call printquiet
  5421 00004123 BE[CA8E0000]        <2> 	mov esi, line
  5422 00004128 E80BDCFFFF          <2> 	call printquiet
  5423 0000412D BE[67440000]        <2> 	mov esi, dateshow
  5424 00004132 E801DCFFFF          <2> 	call printquiet
  5425 00004137 BE[CA8E0000]        <2> 	mov esi, line
  5426 0000413C E8F7DBFFFF          <2> 	call printquiet
  5427 00004141 E9BE000000          <2> 	jmp findday
  5428                              <2> time:
  5429 00004146 E851010000          <2> 	call tstackput1
  5430 0000414B B00A                <2> 	mov al,10			;Get RTC register A
  5431 0000414D E87B010000          <2> 	call tget1
  5432 00004152 A880                <2> 	test al,0x80			;Is update in progress?
  5433 00004154 75F0                <2> 	jne time				; yes, wait
  5434                              <2> 
  5435 00004156 B000                <2> 	mov al,0			;Get seconds (00 to 59)
  5436 00004158 E870010000          <2> 	call tget1
  5437 0000415D A2[55440000]        <2> 	mov [RTCtimeSecond],al
  5438                              <2> 
  5439 00004162 B002                <2> 	mov al,0x02			;Get minutes (00 to 59)
  5440 00004164 E864010000          <2> 	call tget1
  5441 00004169 A2[56440000]        <2> 	mov [RTCtimeMinute],al
  5442                              <2> 
  5443 0000416E B004                <2> 	mov al,0x04			;Get hours (see notes)
  5444 00004170 E858010000          <2> 	call tget1
  5445 00004175 A2[57440000]        <2> 	mov [RTCtimeHour],al
  5446                              <2> 
  5447 0000417A B007                <2> 	mov al,0x07			;Get day of month (01 to 31)
  5448 0000417C E84C010000          <2> 	call tget1
  5449 00004181 A2[58440000]        <2> 	mov [RTCtimeDay],al
  5450                              <2> 
  5451 00004186 B008                <2> 	mov al,0x08			;Get month (01 to 12)
  5452 00004188 E840010000          <2> 	call tget1
  5453 0000418D 241F                <2> 	and al, 11111b
  5454 0000418F A2[59440000]        <2> 	mov [RTCtimeMonth],al
  5455                              <2> 
  5456 00004194 B009                <2> 	mov al,0x09			;Get year (00 to 99)
  5457 00004196 E832010000          <2> 	call tget1
  5458 0000419B A2[5A440000]        <2> 	mov [RTCtimeYear],al
  5459                              <2> 	
  5460 000041A0 BE[5E440000]        <2> 	mov esi, timeshow
  5461 000041A5 8A2D[57440000]      <2> 	mov ch, [RTCtimeHour]
  5462 000041AB E828010000          <2> 	call tput1
  5463 000041B0 8A2D[56440000]      <2> 	mov ch, [RTCtimeMinute]
  5464 000041B6 E81D010000          <2> 	call tput1
  5465 000041BB 8A2D[55440000]      <2> 	mov ch, [RTCtimeSecond]
  5466 000041C1 E812010000          <2> 	call tput1
  5467 000041C6 BE[67440000]        <2> 	mov esi, dateshow
  5468 000041CB 8A2D[59440000]      <2> 	mov ch, [RTCtimeMonth]
  5469 000041D1 E802010000          <2> 	call tput1
  5470 000041D6 8A2D[58440000]      <2> 	mov ch, [RTCtimeDay]
  5471 000041DC E8F7000000          <2> 	call tput1
  5472 000041E1 B520                <2> 	mov ch, 0x20
  5473 000041E3 E8F0000000          <2> 	call tput1
  5474 000041E8 4E                  <2> 	dec esi
  5475 000041E9 8A2D[5A440000]      <2> 	mov ch, [RTCtimeYear]
  5476 000041EF E8E4000000          <2> 	call tput1
  5477 000041F4 E8BD000000          <2> 	call tstackget1
  5478 000041F9 C3                  <2> 	ret
  5479 000041FA BE[5E440000]        <2> 	mov esi, timeshow
  5480 000041FF E858DBFFFF          <2> 	call print
  5481                              <2> ;get day of week
  5482                              <2> ;add these:
  5483                              <2> ;century value
  5484                              <2> ;last 2 digits of year
  5485                              <2> ;last 2 digits of year right shifted twice
  5486                              <2> ;month table value
  5487                              <2> ;day of the month
  5488                              <2> ;divide these by 7
  5489                              <2> ;the remainder is the day
  5490                              <2> findday:
  5491 00004204 31C0                <2> 	xor eax, eax
  5492                              <2> ;first convert the values from BCD to hex
  5493 00004206 A0[58440000]        <2> 	mov al, [RTCtimeDay]
  5494 0000420B E873000000          <2> 	call converttohex
  5495 00004210 8825[5B440000]      <2> 	mov [dayhex], ah
  5496 00004216 A0[59440000]        <2> 	mov al, [RTCtimeMonth]
  5497 0000421B E863000000          <2> 	call converttohex
  5498 00004220 8825[5C440000]      <2> 	mov [monthhex], ah
  5499 00004226 A0[5A440000]        <2> 	mov al, [RTCtimeYear]
  5500 0000422B E853000000          <2> 	call converttohex
  5501 00004230 8825[5D440000]      <2> 	mov [yearhex], ah
  5502 00004236 31C0                <2> 	xor eax, eax
  5503 00004238 A0[5D440000]        <2> 	mov al, [yearhex]
  5504 0000423D C0E802              <2> 	shr al, 2
  5505 00004240 0205[5D440000]      <2> 	add al, [yearhex]
  5506 00004246 0506000000          <2> 	add eax, 6
  5507 0000424B 31DB                <2> 	xor ebx, ebx
  5508 0000424D 8A1D[5C440000]      <2> 	mov bl, [monthhex]
  5509 00004253 FECB                <2> 	dec bl
  5510 00004255 81C3[7C440000]      <2> 	add ebx, month
  5511 0000425B 31C9                <2> 	xor ecx, ecx
  5512 0000425D 8A0B                <2> 	mov cl, [ebx]
  5513 0000425F 01C8                <2> 	add eax, ecx
  5514 00004261 8A0D[5B440000]      <2> 	mov cl, [dayhex]
  5515 00004267 01C8                <2> 	add eax, ecx
  5516 00004269 66BB0700            <2> 	mov bx, 7
  5517 0000426D 31D2                <2> 	xor edx, edx
  5518 0000426F 66F7F3              <2> 	div bx
  5519 00004272 C1E202              <2> 	shl edx, 2
  5520 00004275 81C2[88440000]      <2> 	add edx, day
  5521 0000427B 8B32                <2> 	mov esi, [edx]
  5522 0000427D E8DADAFFFF          <2> 	call print
  5523 00004282 C3                  <2> 	ret
  5524                              <2> 	
  5525                              <2> converttohex:
  5526 00004283 88C4                <2> 	mov ah, al
  5527 00004285 C0E804              <2> 	shr al, 4
  5528 00004288 C0E404              <2> 	shl ah, 4
  5529 0000428B C0EC04              <2> 	shr ah, 4
  5530 0000428E 3C00                <2> 	cmp al, 0
  5531 00004290 7409                <2> 	je noconverttohex
  5532                              <2> converttohexlp:
  5533 00004292 80C40A              <2> 	add ah, 10
  5534 00004295 FEC8                <2> 	dec al
  5535 00004297 3C00                <2> 	cmp al, 0
  5536 00004299 75F7                <2> 	jne converttohexlp
  5537                              <2> noconverttohex:
  5538 0000429B C3                  <2> 	ret
  5539                              <2> 	
  5540                              <2> tstackput1:
  5541 0000429C 8935[51440000]      <2> 	mov [tstack + 20], esi
  5542 000042A2 BE[3D440000]        <2> 	mov esi, tstack
  5543 000042A7 8906                <2> 	mov [esi], eax
  5544 000042A9 895E04              <2> 	mov [esi + 4], ebx
  5545 000042AC 894E08              <2> 	mov [esi + 8], ecx
  5546 000042AF 89560C              <2> 	mov [esi + 12], edx
  5547 000042B2 897E10              <2> 	mov [esi + 16], edi
  5548 000042B5 C3                  <2> 	ret
  5549                              <2> 	
  5550                              <2> tstackget1:
  5551 000042B6 BE[3D440000]        <2> 	mov esi, tstack
  5552 000042BB 8B06                <2> 	mov eax, [esi]
  5553 000042BD 8B5E04              <2> 	mov ebx, [esi + 4]
  5554 000042C0 8B4E08              <2> 	mov ecx, [esi + 8]
  5555 000042C3 8B560C              <2> 	mov edx, [esi + 12]
  5556 000042C6 8B7E10              <2> 	mov edi, [esi + 16]
  5557 000042C9 8B7614              <2> 	mov esi, [esi + 20]
  5558 000042CC C3                  <2> 	ret
  5559                              <2> 	
  5560                              <2> tget1:
  5561 000042CD 66BA7000            <2> 	mov dx, 0x70
  5562 000042D1 EE                  <2> 	out dx, al
  5563 000042D2 6642                <2> 	inc dx
  5564 000042D4 EC                  <2> 	in al, dx
  5565 000042D5 664A                <2> 	dec dx
  5566 000042D7 C3                  <2> 	ret
  5567                              <2> 	
  5568                              <2> tput1:
  5569 000042D8 66C1E904            <2> 	shr cx, 4
  5570 000042DC B030                <2> 	mov al, 48
  5571 000042DE 00E8                <2> 	add al, ch
  5572 000042E0 8806                <2> 	mov [esi], al
  5573 000042E2 46                  <2> 	inc esi
  5574 000042E3 B030                <2> 	mov al, 48
  5575 000042E5 C0E904              <2> 	shr cl, 4
  5576 000042E8 00C8                <2> 	add al, cl
  5577 000042EA 8806                <2> 	mov [esi], al
  5578 000042EC 81C602000000        <2> 	add esi, 2
  5579 000042F2 C3                  <2> 	ret
  5580                              <2> 	
  5581                              <2> timeconvert: ;return time in the RTCtime stuff in ecx
  5582 000042F3 31DB                <2> 	xor ebx, ebx
  5583 000042F5 31C9                <2> 	xor ecx, ecx
  5584 000042F7 31FF                <2> 	xor edi, edi
  5585 000042F9 31F6                <2> 	xor esi, esi
  5586                              <2> 	
  5587 000042FB A0[55440000]        <2> 	mov al, [RTCtimeSecond]
  5588 00004300 E87EFFFFFF          <2> 	call converttohex
  5589 00004305 88E1                <2> 	mov cl, ah
  5590                              <2> 	
  5591 00004307 A0[56440000]        <2> 	mov al, [RTCtimeMinute]
  5592 0000430C E872FFFFFF          <2> 	call converttohex
  5593 00004311 88E3                <2> 	mov bl, ah
  5594 00004313 B83C000000          <2> 	mov eax, 60
  5595 00004318 31D2                <2> 	xor edx, edx
  5596 0000431A F7E3                <2> 	mul ebx
  5597 0000431C 01C1                <2> 	add ecx, eax
  5598                              <2> 	
  5599 0000431E A0[57440000]        <2> 	mov al, [RTCtimeHour]
  5600 00004323 E85BFFFFFF          <2> 	call converttohex
  5601 00004328 88E3                <2> 	mov bl, ah
  5602 0000432A B8100E0000          <2> 	mov eax, 3600
  5603 0000432F 31D2                <2> 	xor edx, edx
  5604 00004331 F7E3                <2> 	mul ebx
  5605 00004333 01C1                <2> 	add ecx, eax
  5606                              <2> 		
  5607 00004335 31C0                <2> 	xor eax, eax
  5608 00004337 A0[5A440000]        <2> 	mov al, [RTCtimeYear]
  5609 0000433C E842FFFFFF          <2> 	call converttohex
  5610 00004341 6689C6              <2> 	mov si, ax
  5611 00004344 66C1EE08            <2> 	shr si, 8
  5612 00004348 6681FE4600          <2> 	cmp si, 70
  5613 0000434D 7705                <2> 	ja .no100
  5614 0000434F 6681C66400          <2> 	add si, 100
  5615                              <2> .no100:
  5616 00004354 6681C66C07          <2> 	add si, 1900
  5617                              <2> 	
  5618 00004359 BB[2F440000]        <2> 	mov ebx, .month
  5619 0000435E A0[58440000]        <2> 	mov al, [RTCtimeDay]
  5620 00004363 E81BFFFFFF          <2> 	call converttohex
  5621 00004368 88E0                <2> 	mov al, ah
  5622 0000436A FEC8                <2> 	dec al
  5623 0000436C 31D2                <2> 	xor edx, edx
  5624 0000436E 88C2                <2> 	mov dl, al
  5625 00004370 A0[59440000]        <2> 	mov al, [RTCtimeMonth]
  5626 00004375 E809FFFFFF          <2> 	call converttohex
  5627 0000437A 88D0                <2> 	mov al, dl
  5628 0000437C 88E2                <2> 	mov dl, ah
  5629 0000437E 30E4                <2> 	xor ah, ah
  5630 00004380 6689D5              <2> 	mov bp, dx
  5631                              <2> 	
  5632 00004383 6689F7              <2> 	mov di, si
  5633 00004386 66C1EF02            <2> 	shr di, 2
  5634 0000438A 66C1E702            <2> 	shl di, 2
  5635 0000438E C605[30440000]1C    <2> 	mov byte [.month + 1], 28
  5636 00004395 6639F7              <2> 	cmp di, si
  5637 00004398 7506                <2> 	jne .nofebmod
  5638 0000439A FE05[30440000]      <2> 	inc byte [.month + 1]
  5639                              <2> .nofebmod:
  5640 000043A0 664D                <2> 	dec bp
  5641 000043A2 6681FD0000          <2> 	cmp bp, 0
  5642 000043A7 7407                <2> 	je .ylp
  5643 000043A9 8A13                <2> 	mov dl, [ebx]
  5644 000043AB 01D0                <2> 	add eax, edx
  5645 000043AD 43                  <2> 	inc ebx
  5646 000043AE EBF0                <2> 	jmp .nofebmod
  5647                              <2> 	
  5648                              <2> .ylp:
  5649 000043B0 6689F7              <2> 	mov di, si
  5650 000043B3 66C1EF02            <2> 	shr di, 2
  5651 000043B7 66C1E702            <2> 	shl di, 2
  5652 000043BB 81C18033E101        <2> 	add ecx, 31536000
  5653 000043C1 6639F7              <2> 	cmp di, si
  5654 000043C4 7506                <2> 	jne .noymod
  5655 000043C6 81C180510100        <2> 	add ecx, 86400
  5656                              <2> .noymod:
  5657 000043CC 664E                <2> 	dec si
  5658 000043CE 6681FEB207          <2> 	cmp si, 1970
  5659 000043D3 77DB                <2> 	ja .ylp
  5660                              <2> 	
  5661 000043D5 BB80510100          <2> 	mov ebx, 86400
  5662 000043DA 31D2                <2> 	xor edx, edx
  5663 000043DC F7E3                <2> 	mul ebx
  5664 000043DE 01C1                <2> 	add ecx, eax
  5665                              <2> 	
  5666 000043E0 31DB                <2> 	xor ebx, ebx
  5667 000043E2 31D2                <2> 	xor edx, edx
  5668 000043E4 B8100E0000          <2> 	mov eax, 3600
  5669 000043E9 8A3D[3B440000]      <2> 	mov bh, [timezoneh]
  5670 000043EF 80FF80              <2> 	cmp bh, 128
  5671 000043F2 720D                <2> 	jb .posh
  5672 000043F4 28FB                <2> 	sub bl, bh
  5673 000043F6 30FF                <2> 	xor bh, bh
  5674 000043F8 F7E3                <2> 	mul ebx
  5675 000043FA 01C1                <2> 	add ecx, eax
  5676 000043FC E906000000          <2> 	jmp .doneth
  5677                              <2> .posh:
  5678 00004401 86DF                <2> 	xchg bl, bh
  5679 00004403 F7E3                <2> 	mul ebx
  5680 00004405 29C1                <2> 	sub ecx, eax
  5681                              <2> .doneth:
  5682                              <2> 
  5683 00004407 31DB                <2> 	xor ebx, ebx	
  5684 00004409 31D2                <2> 	xor edx, edx
  5685 0000440B B83C000000          <2> 	mov eax, 60
  5686 00004410 8A3D[3C440000]      <2> 	mov bh, [timezonem]
  5687 00004416 80FF80              <2> 	cmp bh, 128
  5688 00004419 720D                <2> 	jb .posm
  5689 0000441B 28FB                <2> 	sub bl, bh
  5690 0000441D 30FF                <2> 	xor bh, bh
  5691 0000441F F7E3                <2> 	mul ebx
  5692 00004421 01C1                <2> 	add ecx, eax
  5693 00004423 E906000000          <2> 	jmp .donetm
  5694                              <2> .posm:
  5695 00004428 86DF                <2> 	xchg bl, bh
  5696 0000442A F7E3                <2> 	mul ebx
  5697 0000442C 29C1                <2> 	sub ecx, eax
  5698                              <2> .donetm:
  5699                              <2> 
  5700 0000442E C3                  <2> 	ret
  5701                              <2> 	
  5702                              <2> 
  5703 0000442F 1F1C1F1E1F1E1F1F1E- <2> .month db 31,28,31,30,31,30,31,31,30,31,30,31
  5704 00004438 1F1E1F              <2>
  5705                              <2> 
  5706 0000443B FA                  <2> 	timezoneh db -6
  5707 0000443C 00                  <2> 	timezonem db 0
  5708 0000443D 000000000000000000- <2> 	tstack dd 0,0,0,0,0,0
  5709 00004446 000000000000000000- <2>
  5710 0000444F 000000000000        <2>
  5711 00004455 00                  <2> 	RTCtimeSecond db 0
  5712 00004456 00                  <2> 	RTCtimeMinute db 0
  5713 00004457 00                  <2> 	RTCtimeHour db 0
  5714 00004458 00                  <2> 	RTCtimeDay db 0
  5715 00004459 00                  <2> 	RTCtimeMonth db 0
  5716 0000445A 00                  <2> 	RTCtimeYear db 0
  5717 0000445B 00                  <2> 	dayhex db 0
  5718 0000445C 00                  <2> 	monthhex db 0
  5719 0000445D 00                  <2> 	yearhex db 0
  5720 0000445E 30303A30303A303000  <2> 	timeshow db "00:00:00",0
  5721 00004467 30302D30302D303030- <2> 	dateshow db "00-00-0000 ",0
  5722 00004470 302000              <2>
  5723                              <2> 	oldcentury:	;from 1700 to 1900
  5724 00004473 040200              <2> 	db 4,2,0
  5725                              <2> 	century:	;from 2000 to 2500
  5726 00004476 060402000604        <2> 	db 6,4,2,0,6,4
  5727                              <2> 	month:
  5728 0000447C 000303060104060205- <2> 	db 0,3,3,6,1,4,6,2,5,0,3,5
  5729 00004485 000305              <2>
  5730                              <2> 	day:
  5731 00004488 [A4440000]          <2> 	dd sunday
  5732 0000448C [AC440000]          <2> 	dd monday
  5733 00004490 [B4440000]          <2> 	dd tuesday
  5734 00004494 [BD440000]          <2> 	dd wednesday
  5735 00004498 [C8440000]          <2> 	dd thursday
  5736 0000449C [D2440000]          <2> 	dd friday
  5737 000044A0 [DA440000]          <2> 	dd saturday
  5738                              <2> sunday:
  5739 000044A4 53756E6461790A00    <2> 	db "Sunday",10,0
  5740                              <2> monday:
  5741 000044AC 4D6F6E6461790A00    <2> 	db "Monday",10,0
  5742                              <2> tuesday:
  5743 000044B4 547565736461790A00  <2> 	db "Tuesday",10,0
  5744                              <2> wednesday:
  5745 000044BD 5765646E6573646179- <2> 	db "Wednesday",10,0
  5746 000044C6 0A00                <2>
  5747                              <2> thursday:
  5748 000044C8 54687572736461790A- <2> 	db "Thursday",10,0
  5749 000044D1 00                  <2>
  5750                              <2> friday:
  5751 000044D2 4672696461790A00    <2> 	db "Friday",10,0
  5752                              <2> saturday:
  5753 000044DA 53617475726461790A- <2> 	db "Saturday",10,0
  5754 000044E3 00                  <2>
  5755                              <1> %ifdef network.included
  5756                              <1> 	%include 'source/programs/dhcp.asm'
  5757 000044E4 FF2C6468637000      <2> db 255,44,"dhcp",0
  5758                              <2> dhcp:
  5759 000044EB BE[AB450000]        <2> 	mov esi, .dhcp.mac
  5760 000044F0 BB[8B460000]        <2> 	mov ebx, .dhcp.option.mac
  5761 000044F5 BF[6B450000]        <2> 	mov edi, .mac
  5762 000044FA 31C9                <2> 	xor ecx, ecx
  5763 000044FC 66890D[7D450000]    <2> 	mov [.ip.checksum], cx
  5764 00004503 66890D[8D450000]    <2> 	mov [.udp.checksum], cx
  5765 0000450A 8B0D[838E0000]      <2> 	mov ecx, [sysmac]
  5766 00004510 890B                <2> 	mov [ebx], ecx
  5767 00004512 890F                <2> 	mov [edi], ecx
  5768 00004514 890E                <2> 	mov [esi], ecx
  5769 00004516 668B0D[878E0000]    <2> 	mov cx, [sysmac + 4]
  5770 0000451D 66894B04            <2> 	mov [ebx + 4], cx
  5771 00004521 66894E04            <2> 	mov [esi + 4], cx
  5772 00004525 66894F04            <2> 	mov [edi + 4], cx
  5773 00004529 BF[73450000]        <2> 	mov edi, .ip.header
  5774 0000452E BE[87450000]        <2> 	mov esi, .ip.headerend
  5775 00004533 E845480000          <2> 	call getchecksum
  5776 00004538 66890D[7D450000]    <2> 	mov [.ip.checksum], cx
  5777 0000453F BF[87450000]        <2> 	mov edi, .udp.header
  5778 00004544 BE[A2460000]        <2> 	mov esi, .udp.end
  5779 00004549 E82F480000          <2> 	call getchecksum
  5780 0000454E 66890D[8D450000]    <2> 	mov [.udp.checksum], cx
  5781 00004555 BF[65450000]        <2> 	mov edi, .frame
  5782 0000455A BE[A2460000]        <2> 	mov esi, .udp.end
  5783 0000455F E80F480000          <2> 	call sendpacket
  5784 00004564 C3                  <2> 	ret
  5785                              <2> .frame:
  5786 00004565 FFFFFFFFFFFF        <2> 	.destmac db 0xFF,0xFF,0xFF,0xFF,0xFF,0xFF
  5787 0000456B 000000000000        <2> 	.mac db 0,0,0,0,0,0
  5788 00004571 0800                <2> 	db 8,0
  5789                              <2> .ip.header:
  5790 00004573 45                  <2> 	db (0x40 | (.ip.headerend - .ip.header)/4)
  5791 00004574 00                  <2> 	db 0
  5792 00004575 012F                <2> 	db (.udp.end - .ip.header)/256, (.udp.end - .ip.header)
  5793 00004577 0000                <2> 	dw 0
  5794 00004579 0000                <2> 	dw 0
  5795 0000457B 80                  <2> 	db 0x80
  5796 0000457C 11                  <2> 	db 17
  5797 0000457D 0000                <2> .ip.checksum dw 0
  5798 0000457F 00000000            <2> 	db 0,0,0,0
  5799 00004583 FFFFFFFF            <2> 	db 255,255,255,255	
  5800                              <2> .ip.headerend:
  5801                              <2> .udp.header:
  5802 00004587 0044                <2> 	db 0,68	;source port
  5803 00004589 0043                <2> 	db 0,67 ;destination port
  5804 0000458B 011B                <2> 	db (.udp.end - .udp.header)/256, (.udp.end - .udp.header)
  5805 0000458D 0000                <2> .udp.checksum dw 0
  5806                              <2> .udp.headerend:
  5807                              <2> .dhcp.data:
  5808 0000458F 01                  <2> 	db 1	;message type
  5809 00004590 01                  <2> 	db 1	;hardware type
  5810 00004591 06                  <2> 	db 6	;hardware address length
  5811 00004592 00                  <2> 	db 0	;hops
  5812 00004593 EC2B2369            <2> 	db 0xEC,0x2B,0x23,0x69	;transaction ID
  5813 00004597 0000                <2> 	db 0,0	;seconds elapsed
  5814 00004599 0000                <2> 	db 0,0	;flags
  5815 0000459B 00000000            <2> 	db 0,0,0,0	;client ip address
  5816 0000459F 00000000            <2> 	db 0,0,0,0	;your ip address
  5817 000045A3 00000000            <2> 	db 0,0,0,0	;server ip address
  5818 000045A7 00000000            <2> 	db 0,0,0,0	;relay agent ip address
  5819 000045AB 000000000000        <2> .dhcp.mac db 0,0,0,0,0,0	;client hardware address
  5820 000045B1 00<rept>            <2> 	times 10 db 0	;padding
  5821 000045BB 00<rept>            <2> 	times 64 db 0	;server host name
  5822 000045FB 00<rept>            <2> 	times 128 db 0	;boot file name
  5823 0000467B 63825363            <2> 	db 0x63,0x82,0x53,0x63	;magic cookie
  5824                              <2> .dhcp.option.type:
  5825 0000467F 350103              <2> 	db 53,1,3	;DHCP Request
  5826 00004682 3204C0A80002        <2> 	db 50,4,192,168,0,2	;requested IP
  5827 00004688 3D07                <2> 	db 61,7 ;client id(mac)
  5828 0000468A 01                  <2> 	db 1	;Type=Ethernet
  5829 0000468B 000000000000        <2> .dhcp.option.mac:	db 0,0,0,0,0,0
  5830 00004691 0C08                <2> 	db 12,8 ;host name
  5831 00004693 536F6C6C65724F53    <2> .dhcp.option.name 	db "SollerOS"
  5832 0000469B 370401030F06        <2> 	db 55,4,1,3,15,6	;request subnet, router, domain name, name server
  5833 000046A1 FF                  <2> 	db 0xFF	;end DHCP options
  5834                              <2> .dhcp.end:
  5835                              <2> .udp.end:
  5836                              <2> 	
  5837                              <1> %endif
  5838                              <1> %ifdef disk.none
  5839                              <1> %else
  5840                              <1> 	%include 'source/programs/dos.asm'
  5841 000046A2 FF2C646F7300        <2> db 255,44,"dos",0
  5842                              <2> dosrunner:
  5843 000046A8 8925[08B80300]      <2> 	mov [previousstack], esp
  5844 000046AE 8B3D[A82F0000]      <2> 	mov edi, [currentcommandloc]
  5845 000046B4 81C704000000        <2> 	add edi, 4
  5846 000046BA BE00014000          <2> 	mov esi,  0x100 + dosprogloc	;this should be the beginning of memory
  5847 000046BF E84A240000          <2> 	call loadfile
  5848 000046C4 8B3D[A82F0000]      <2> 	mov edi, [currentcommandloc]
  5849 000046CA 81C704000000        <2> 	add edi, 4
  5850 000046D0 81FA94010000        <2> 	cmp edx, 404
  5851 000046D6 0F845E000000        <2> 	je near .noprogfound
  5852 000046DC BB81004000          <2> 	mov ebx, 0x81 + dosprogloc
  5853 000046E1 31C9                <2> 	xor ecx, ecx
  5854                              <2> .findparams:
  5855 000046E3 47                  <2> 	inc edi
  5856 000046E4 8A07                <2> 	mov al, [edi]
  5857 000046E6 3C20                <2> 	cmp al, " "
  5858 000046E8 75F9                <2> 	jne .findparams
  5859                              <2> .copyparams:
  5860 000046EA 8A07                <2> 	mov al, [edi]
  5861 000046EC 8803                <2> 	mov [ebx], al
  5862 000046EE 43                  <2> 	inc ebx
  5863 000046EF 47                  <2> 	inc edi
  5864 000046F0 41                  <2> 	inc ecx
  5865 000046F1 81FB00014000        <2> 	cmp ebx, 0x100 + dosprogloc
  5866 000046F7 7304                <2> 	jae .nomoreparams
  5867 000046F9 3C00                <2> 	cmp al, 0
  5868 000046FB 75ED                <2> 	jne .copyparams
  5869                              <2> .nomoreparams:
  5870 000046FD 880D80004000        <2> 	mov [0x80 + dosprogloc], cl
  5871 00004703 66B85000            <2> 	mov ax, DOS_DATA_SEL
  5872 00004707 8ED8                <2> 	mov ds, ax
  5873 00004709 8EC0                <2> 	mov es, ax
  5874 0000470B 8EE0                <2> 	mov fs, ax
  5875 0000470D 8EE8                <2> 	mov gs, ax
  5876 0000470F 31C0                <2> 	xor eax, eax
  5877 00004711 31DB                <2> 	xor ebx, ebx
  5878 00004713 31C9                <2> 	xor ecx, ecx
  5879 00004715 31D2                <2> 	xor edx, edx
  5880 00004717 31FF                <2> 	xor edi, edi
  5881 00004719 31F6                <2> 	xor esi, esi
  5882 0000471B 9A000100004800      <2> 	call DOS_CODE_SEL:0x100
  5883 00004722 66BB3000            <2> 	mov bx, NEW_DATA_SEL
  5884 00004726 6689DA              <2> 	mov dx, bx
  5885 00004729 8EC3                <2> 	mov es, bx
  5886 0000472B 8EE3                <2> 	mov fs, bx
  5887 0000472D 66BB2000            <2> 	mov bx, SYS_DATA_SEL
  5888 00004731 8EEB                <2> 	mov gs, bx
  5889 00004733 8B25[08B80300]      <2> 	mov esp, [previousstack]
  5890 00004739 C3                  <2> 	ret
  5891                              <2> .noprogfound:
  5892 0000473A BE[918E0000]        <2> 	mov esi, notfound1
  5893 0000473F E818D6FFFF          <2> 	call print
  5894 00004744 8B35[A82F0000]      <2> 	mov esi, [currentcommandloc]
  5895 0000474A 81C604000000        <2> 	add esi, 4
  5896 00004750 E807D6FFFF          <2> 	call print
  5897 00004755 BE[998E0000]        <2> 	mov esi, notfound2
  5898 0000475A E8FDD5FFFF          <2> 	call print
  5899 0000475F C3                  <2> 	ret
  5900                              <2> 	
  5901                              <1> %endif
  5902                              <1> %include 'source/programs/dump.asm'
  5903 00004760 FF2C64756D7000      <2> db 255,44,"dump",0
  5904 00004767 8B35[A82F0000]      <2> 	mov esi, [currentcommandloc]
  5905 0000476D 81C605000000        <2> 	add esi, 5
  5906 00004773 31C9                <2> 	xor ecx, ecx
  5907 00004775 66B83078            <2> 	mov ax, "0x"
  5908 00004779 663906              <2> 	cmp [esi], ax
  5909 0000477C 740A                <2> 	je dumphexin
  5910 0000477E E8DDEBFFFF          <2> 	call cnvrttxt
  5911 00004783 E910000000          <2> 	jmp dumphexnow
  5912                              <2> dumphexin:
  5913 00004788 81C602000000        <2> 	add esi, 2
  5914 0000478E E884EBFFFF          <2> 	call cnvrthextxt
  5915 00004793 E900000000          <2> 	jmp dumphexnow
  5916                              <2> dumphexnow:
  5917 00004798 89CF                <2> 	mov edi, ecx
  5918 0000479A 89FE                <2> 	mov esi, edi
  5919 0000479C 81C680030000        <2> 	add esi, 896
  5920                              <2> dumphexloop:
  5921 000047A2 8B0F                <2> 	mov ecx, [edi]
  5922 000047A4 C605[B5310000]05    <2> 	mov byte [firsthexshown],5
  5923 000047AB E81AEAFFFF          <2> 	call showhex
  5924 000047B0 81C704000000        <2> 	add edi, 4
  5925 000047B6 39F7                <2> 	cmp edi, esi
  5926 000047B8 72E8                <2> 	jb dumphexloop
  5927 000047BA E8F3E0FFFF          <2> 	call termcopy
  5928 000047BF C3                  <2> 	ret 
  5929                              <1> %include 'source/programs/echo.asm'
  5930                              <2> 
  5931 000047C0 FF2C6563686F00      <2> db 255,44,"echo",0
  5932                              <2> 	echoprog:
  5933 000047C7 8B35[A82F0000]      <2> 		mov esi, [currentcommandloc]
  5934 000047CD 81C605000000        <2> 		add esi, 5
  5935 000047D3 8A06                <2> 		mov al, [esi]
  5936 000047D5 E85ED5FFFF          <2> 		call printquiet
  5937 000047DA E878D5FFFF          <2> 		call printline
  5938 000047DF C3                  <2> 		ret
  5939 000047E0 BB[88BA0300]        <2> 	echovr:	mov ebx, variables
  5940 000047E5 BF06000000          <2> 		mov edi, 6
  5941 000047EA E83C000000          <2> 		call nxtvrech
  5942 000047EF E954000000          <2> 		jmp prntvr2
  5943 000047F4 B13D                <2> 	echvar:	mov cl, '='
  5944 000047F6 43                  <2> 		inc ebx
  5945 000047F7 8A03                <2> 		mov al, [ebx]
  5946 000047F9 3C00                <2> 		cmp al, 0
  5947 000047FB 742E                <2> 		je nxtvrech
  5948 000047FD 3C3D                <2> 		cmp al, '='
  5949 000047FF 7422                <2> 		je nxtvrechb1
  5950 00004801 8B35[A82F0000]      <2> 		mov esi, [currentcommandloc]
  5951 00004807 01FE                <2> 		add esi, edi
  5952 00004809 E8D9E7FFFF          <2> 		call cndtest
  5953 0000480E 3C02                <2> 		cmp al, 2
  5954 00004810 7432                <2> 		je prntvr
  5955 00004812 3C01                <2> 		cmp al, 1
  5956 00004814 742E                <2> 		je prntvr
  5957 00004816 8B35[A82F0000]      <2> 		mov esi, [currentcommandloc]
  5958 0000481C 01FE                <2> 		add esi, edi
  5959 0000481E E908000000          <2> 		jmp nxtvrech
  5960                              <2> 	nxtvrechb1:
  5961 00004823 81EB02000000        <2> 		sub ebx, 2
  5962 00004829 EBC9                <2> 		jmp echvar
  5963 0000482B 8A03                <2> 	nxtvrech: mov al, [ebx]
  5964 0000482D 3C05                <2> 		cmp al, 5
  5965 0000482F 740A                <2> 		je nxtvrec2
  5966 00004831 43                  <2> 		inc ebx
  5967 00004832 81FB[88CA0300]      <2> 		cmp ebx, varend
  5968 00004838 72F1                <2> 		jb nxtvrech
  5969 0000483A C3                  <2> 		ret
  5970 0000483B 43                  <2> 	nxtvrec2: inc ebx
  5971 0000483C 8A03                <2> 		mov al, [ebx]
  5972 0000483E 3C04                <2> 		cmp al, 4
  5973 00004840 74B2                <2> 		je echvar
  5974 00004842 EBE7                <2> 		jmp nxtvrech
  5975 00004844 43                  <2> 	prntvr: inc ebx
  5976 00004845 89DE                <2> 		mov esi, ebx
  5977 00004847 C3                  <2> 		ret
  5978 00004848 E80FD5FFFF          <2> 	prntvr2: call print
  5979 0000484D BE[CA8E0000]        <2> 		mov esi, line
  5980 00004852 E805D5FFFF          <2> 		call print
  5981 00004857 C3                  <2> 		ret 
  5982                              <1> %include 'source/programs/else.asm'
  5983 00004858 FF2C656C736500      <2> 	db 255,44,"else",0
  5984 0000485F 31C0                <2> elsecmd:	xor eax, eax
  5985 00004861 3805[82BA0300]      <2> 	cmp [BATCHISON], al
  5986 00004867 0F8446F2FFFF        <2> 	je near notbatch
  5987 0000486D A0[19BA0300]        <2> 	mov al, [IFON]
  5988 00004872 BE[1ABA0300]        <2> 	mov esi, IFTRUE
  5989 00004877 01C6                <2> 	add esi, eax
  5990 00004879 8A06                <2> 	mov al, [esi]
  5991 0000487B 3401                <2> 	xor al, 1
  5992 0000487D 8806                <2> 	mov [esi], al
  5993 0000487F C3                  <2> 	ret 
  5994                              <1> %include 'source/programs/exit.asm'
  5995 00004880 FF2C6578697400      <2> db 255,44,"exit",0
  5996 00004887 803D[18BA0300]01    <2> 	cmp byte [ranboot], 1
  5997 0000488E 0F84F5E3FFFF        <2> 	je near returnfromexp
  5998 00004894 E9E0E2FFFF          <2> 	jmp nobootfile
  5999                              <1> %include 'source/programs/fi.asm'
  6000 00004899 FF2C666900          <2> 	db 255,44,"fi",0
  6001 0000489E 30C0                <2> 	xor al, al
  6002 000048A0 3805[82BA0300]      <2> 	cmp [BATCHISON], al
  6003 000048A6 0F8407F2FFFF        <2> 	je near notbatch
  6004 000048AC B001                <2> fi:	mov al, 1
  6005 000048AE 2805[19BA0300]      <2> 	sub [IFON],al
  6006 000048B4 C3                  <2> 	ret 
  6007                              <1> %ifdef gui.included
  6008                              <1> 	%include 'source/programs/gui.asm'
  6009 000048B5 FF2C67756900        <2> db 255,44,"gui",0
  6010                              <2> guiswitcher:
  6011 000048BB 8B35[A82F0000]      <2> 	mov esi, [currentcommandloc]
  6012 000048C1 81C604000000        <2> 	add esi, 4
  6013 000048C7 31C9                <2> 	xor ecx, ecx
  6014 000048C9 803E00              <2> 	cmp byte [esi], 0
  6015 000048CC 740A                <2> 	je .nomodepref
  6016 000048CE E844EAFFFF          <2> 	call cnvrthextxt ;switches arg on cline to vesa mode in ecx
  6017 000048D3 E907000000          <2> 	jmp .modepref
  6018                              <2> .nomodepref:
  6019 000048D8 51                  <2> 	push ecx
  6020 000048D9 E82AD5FFFF          <2> 	call clear
  6021 000048DE 59                  <2> 	pop ecx
  6022                              <2> .modepref:
  6023 000048DF 66C705[F30C0000]-   <2> 	mov word [realmodeptr], guiswitch
  6024 000048E6 [5C56]              <2>
  6025 000048E8 E8F4C2FFFF          <2> 	call realmode
  6026                              <2> guiswitchret:
  6027 000048ED 65803D[EF8E0000]01  <2> 	cmp byte [gs:guion], 1
  6028 000048F5 7401                <2> 	je .cont
  6029 000048F7 C3                  <2> 	ret
  6030                              <2> .cont:
  6031 000048F8 BF[48580000]        <2> 	mov edi, VBEMODEBLOCK
  6032                              <2> .loop:
  6033 000048FD 658B07              <2> 	mov eax, [gs:edi]
  6034 00004900 8907                <2> 	mov [edi], eax
  6035 00004902 47                  <2> 	inc edi
  6036 00004903 81FF[4C5B0000]      <2> 	cmp edi, VBEEND
  6037 00004909 72F2                <2> 	jb .loop
  6038 0000490B A1[705A0000]        <2> 	mov eax, [physbaseptr]
  6039 00004910 8B1D[47020000]      <2> 	mov ebx, [basecache]
  6040 00004916 C1E304              <2> 	shl ebx, 4
  6041 00004919 29D8                <2> 	sub eax, ebx
  6042 0000491B A3[705A0000]        <2> 	mov [physbaseptr], eax
  6043 00004920 C605[E5230000]00    <2> 	mov byte [termguion], 0
  6044 00004927 BE[9DD20300]        <2> 	mov esi, graphicstable
  6045 0000492C 30C0                <2> 	xor al, al
  6046                              <2> .clear:
  6047 0000492E 8806                <2> 	mov [esi], al
  6048 00004930 46                  <2> 	inc esi
  6049 00004931 81FE[9DD40300]      <2> 	cmp esi, graphicstableend
  6050 00004937 72F5                <2> 	jb .clear
  6051 00004939 E80D2C0000          <2> 	call guisetup
  6052                              <2> 	;The next few lines center a window that is 3/4ths of the full screen
  6053 0000493E 668B15[5A5A0000]    <2> 	mov dx, [resolutionx]
  6054 00004945 668B0D[5C5A0000]    <2> 	mov cx, [resolutiony]
  6055 0000494C 6689D3              <2> 	mov bx, dx
  6056 0000494F 6689C8              <2> 	mov ax, cx
  6057 00004952 66D1EB              <2> 	shr bx, 1
  6058 00004955 66D1E8              <2> 	shr ax, 1
  6059 00004958 6689DA              <2> 	mov dx, bx
  6060 0000495B 66D1EA              <2> 	shr dx, 1
  6061 0000495E 6689C1              <2> 	mov cx, ax
  6062 00004961 66D1E9              <2> 	shr cx, 1
  6063 00004964 6601D3              <2> 	add bx, dx
  6064 00004967 6601C8              <2> 	add ax, cx
  6065 0000496A 66D1E9              <2> 	shr cx, 1
  6066 0000496D 66C1EB03            <2> 	shr bx, 3
  6067 00004971 66C1E303            <2> 	shl bx, 3
  6068 00004975 66C1E804            <2> 	shr ax, 4
  6069 00004979 66C1E004            <2> 	shl ax, 4
  6070 0000497D 66891D[50770000]    <2> 	mov [termwindow], bx
  6071 00004984 66A3[52770000]      <2> 	mov [termwindow + 2], ax	;the previous lines of code make a large terminal window that is 4 characters smaller than the screen
  6072 0000498A BE[50770000]        <2> 	mov esi, termwindow
  6073 0000498F 31DB                <2> 	xor ebx, ebx
  6074 00004991 6631C0              <2> 	xor ax, ax
  6075 00004994 E8E4320000          <2> 	call showwindow
  6076 00004999 E8AF110000          <2> 	call cursorgui
  6077 0000499E E865D4FFFF          <2> 	call clear
  6078 000049A3 C3                  <2> 	ret
  6079                              <2> 	
  6080                              <1> %endif
  6081                              <1> %include 'source/programs/help.asm'
  6082 000049A4 FF2C68656C7000      <2> db 255,44,"help",0
  6083                              <2> lscmd:	
  6084 000049AB B00D                <2> 		mov al, 13
  6085 000049AD E835DAFFFF          <2> 		call prcharq
  6086 000049B2 BE[1D340000]        <2> 		mov esi, progstart
  6087 000049B7 BB[5C560000]        <2> 		mov ebx, progend
  6088 000049BC BE[08B40300]        <2> dir:	mov esi, fileindex
  6089 000049C1 8A06                <2> 	dirnxt:	mov al, [esi]
  6090 000049C3 30E4                <2> 		xor ah, ah
  6091 000049C5 3CFF                <2> 		cmp al, 255
  6092 000049C7 7415                <2> 		je dirfnd
  6093 000049C9 46                  <2> 		inc esi
  6094 000049CA 81FE[08B80300]      <2> 		cmp esi,  fileindexend
  6095 000049D0 7339                <2> 		jae dirdn
  6096 000049D2 EBED                <2> 		jmp dirnxt
  6097                              <2> 	dirfnd3:
  6098 000049D4 46                  <2> 		inc esi
  6099 000049D5 81FE[08B80300]      <2> 		cmp esi, fileindexend
  6100 000049DB 76E4                <2> 		jbe dirnxt
  6101 000049DD 4E                  <2> 		dec esi
  6102 000049DE 46                  <2> 	dirfnd:	inc esi
  6103 000049DF 8A06                <2> 		mov al, [esi]
  6104 000049E1 30E4                <2> 		xor ah, ah
  6105 000049E3 3C2C                <2> 		cmp al, 44
  6106 000049E5 740B                <2> 		je dirfnd2
  6107 000049E7 46                  <2> 		inc esi
  6108 000049E8 81FE[08B80300]      <2> 		cmp esi,  fileindexend
  6109 000049EE 731B                <2> 		jae dirdn
  6110 000049F0 EBCF                <2> 		jmp dirnxt
  6111 000049F2 46                  <2> 	dirfnd2: inc esi
  6112 000049F3 E840D3FFFF          <2> 		call printquiet
  6113 000049F8 56                  <2> 		push esi
  6114 000049F9 B009                <2> 		mov al, 9
  6115 000049FB E8E7D9FFFF          <2> 		call prcharq
  6116 00004A00 5E                  <2> 		pop esi
  6117 00004A01 81FE[08B80300]      <2> 		cmp esi,  fileindexend
  6118 00004A07 7302                <2> 		jae dirdn
  6119 00004A09 EBB6                <2> 		jmp dirnxt
  6120 00004A0B BE[CA8E0000]        <2> 	dirdn:	mov esi, line
  6121 00004A10 E847D3FFFF          <2> 			call print
  6122 00004A15 C3                  <2> 			ret
  6123 00004A16 00                  <2> currentdir db 0
  6124                              <1> %include 'source/programs/if.asm'
  6125 00004A17 FF2C696600          <2> 	db 255,44,"if",0
  6126 00004A1C 30C0                <2> ifcmd:	xor al, al
  6127 00004A1E 3805[82BA0300]      <2> 	cmp [BATCHISON], al
  6128 00004A24 0F8489F0FFFF        <2> 	je near notbatch
  6129 00004A2A 8B1D[A82F0000]      <2> 	mov ebx, [currentcommandloc]
  6130 00004A30 81C303000000        <2> 	add ebx, 3
  6131 00004A36 89DE                <2> 	mov esi, ebx
  6132 00004A38 8A06                <2> chkeqsn: mov al, [esi]
  6133 00004A3A 3C00                <2> 	cmp al, 0
  6134 00004A3C 0F8471F0FFFF        <2> 	je near notbatch
  6135 00004A42 3C3D                <2> 	cmp al, '='
  6136 00004A44 0F8403000000        <2> 	je near chkeqdn
  6137 00004A4A 46                  <2> 	inc esi
  6138 00004A4B EBEB                <2> 	jmp chkeqsn
  6139 00004A4D B000                <2> chkeqdn: mov al, 0 
  6140 00004A4F 8806                <2> 	mov [esi], al
  6141 00004A51 46                  <2> 	inc esi
  6142 00004A52 E855E5FFFF          <2> 	call tester
  6143 00004A57 3C01                <2> 	cmp al, 1
  6144 00004A59 0F8405000000        <2> 	je near trueif
  6145 00004A5F E91C000000          <2> 	jmp falseif
  6146 00004A64 31C0                <2> trueif:	xor eax, eax
  6147 00004A66 A0[19BA0300]        <2> 	mov al, [IFON]
  6148 00004A6B FEC0                <2> 	inc al
  6149 00004A6D A2[19BA0300]        <2> 	mov [IFON], al
  6150 00004A72 30E4                <2> 	xor ah, ah
  6151 00004A74 BE[1ABA0300]        <2> 	mov esi, IFTRUE
  6152 00004A79 01C6                <2> 	add esi, eax
  6153 00004A7B B401                <2> 	mov ah, 1
  6154 00004A7D 8826                <2> 	mov [esi], ah
  6155 00004A7F C3                  <2> 	ret 
  6156 00004A80 31C0                <2> falseif: xor eax, eax
  6157 00004A82 A0[19BA0300]        <2> 	mov al, [IFON]
  6158 00004A87 FEC0                <2> 	inc al
  6159 00004A89 A2[19BA0300]        <2> 	mov [IFON], al
  6160 00004A8E 30E4                <2> 	xor ah, ah
  6161 00004A90 BE[1ABA0300]        <2> 	mov esi, IFTRUE
  6162 00004A95 01C6                <2> 	add esi, eax
  6163 00004A97 30E4                <2> 	xor ah, ah
  6164 00004A99 8826                <2> 	mov [esi], ah
  6165 00004A9B C3                  <2> 	ret 
  6166                              <1> %ifdef network.included
  6167                              <1> 	%include 'source/programs/ipconfig.asm'
  6168 00004A9C FF2C6970636F6E6669- <2> db 255,44,"ipconfig",0
  6169 00004AA5 6700                <2>
  6170                              <2> ifconfig:
  6171 00004AA7 8B35[A82F0000]      <2> 	mov esi, [currentcommandloc]
  6172 00004AAD 81C609000000        <2> 	add esi, 9
  6173 00004AB3 803E00              <2> 	cmp byte [esi], 0
  6174 00004AB6 740B                <2> 	je .noip
  6175 00004AB8 E8E8420000          <2> 	call strtoip
  6176 00004ABD 890D[7F8E0000]      <2> 	mov [sysip], ecx
  6177                              <2> .noip:
  6178                              <2> %ifdef ne2000.included
  6179 00004AC3 803D[388D0000]01    <2> 	cmp byte [ne2000.nicconfig], 1
  6180 00004ACA 7519                <2> 	jne .none2000
  6181 00004ACC BE[398D0000]        <2> 	mov esi, ne2000.name
  6182 00004AD1 E886D2FFFF          <2> 	call print
  6183 00004AD6 B9[5C8D0000]        <2> 	mov ecx, ne2000.mac
  6184 00004ADB E838430000          <2> 	call showmac
  6185 00004AE0 E872D2FFFF          <2> 	call printline
  6186                              <2> .none2000:
  6187                              <2> %endif
  6188                              <2> %ifdef rtl8139.included
  6189                              <2> 	cmp byte [rtl8139.nicconfig], 1
  6190                              <2> 	jne .nortl8139
  6191                              <2> 	mov esi, rtl8139.name
  6192                              <2> 	call print
  6193                              <2> 	mov ecx, rtl8139.mac
  6194                              <2> 	call showmac
  6195                              <2> 	call printline
  6196                              <2> .nortl8139:
  6197                              <2> %endif
  6198                              <2> %ifdef rtl8169.included
  6199                              <2> 	cmp byte [rtl8169.nicconfig], 1
  6200                              <2> 	jne .nortl8169
  6201                              <2> 	mov esi, rtl8169.name
  6202                              <2> 	call print
  6203                              <2> 	mov ecx, rtl8169.mac
  6204                              <2> 	call showmac
  6205                              <2> 	call printline
  6206                              <2> .nortl8169:
  6207                              <2> %endif
  6208                              <2> %ifdef i8254x.included
  6209                              <2> 	cmp byte [i8254x.nicconfig], 1
  6210                              <2> 	jne .noi8254x
  6211                              <2> 	mov esi, i8254x.name
  6212                              <2> 	call print
  6213                              <2> 	mov ecx, i8254x.mac
  6214                              <2> 	call showmac
  6215                              <2> 	call printline
  6216                              <2> .noi8254x:
  6217                              <2> %endif
  6218 00004AE5 8B0D[7F8E0000]      <2> 	mov ecx, [sysip]
  6219 00004AEB E8FB420000          <2> 	call showip
  6220 00004AF0 E862D2FFFF          <2> 	call printline
  6221 00004AF5 C3                  <2> 	ret
  6222                              <2> 	
  6223                              <1> %endif
  6224                              <1> %include 'source/programs/keycode.asm'
  6225 00004AF6 FF2C6B6579636F6465- <2> db 255,44,"keycode",0
  6226 00004AFF 00                  <2>
  6227                              <2> keycode:
  6228 00004B00 66C705[B8230000]00- <2> 	mov word [trans], 0
  6229 00004B08 00                  <2>
  6230 00004B09 C605[C86C0000]00    <2> 	mov byte [threadson], 0
  6231                              <2> %ifdef io.serial
  6232                              <2> .noserial:
  6233                              <2> 	hlt
  6234                              <2> 	mov dx, [serial.address]
  6235                              <2> 	in al, dx
  6236                              <2> 	cmp al, 0
  6237                              <2> 	je .noserial
  6238                              <2> 	mov cl, al
  6239                              <2> 	call showhexsmall
  6240                              <2> 	cmp al, 0x1B
  6241                              <2> 	jne .noserial
  6242                              <2> 	in al, dx
  6243                              <2> 	mov cl, al
  6244                              <2> 	call showhexsmall
  6245                              <2> 	cmp cl, 0x5B
  6246                              <2> 	je .noserial
  6247                              <2> 	ret
  6248                              <2> %else
  6249 00004B10 E852160000          <2> 	call getkey
  6250 00004B15 31C0                <2> 	xor eax, eax
  6251 00004B17 31C9                <2> 	xor ecx, ecx
  6252 00004B19 8A0D[45610000]      <2> 	mov cl, [specialkey]
  6253 00004B1F 80F900              <2> 	cmp cl, 0
  6254 00004B22 0F8405000000        <2> 	je near .nospecialkeycode
  6255 00004B28 E889E6FFFF          <2> 	call showhexsmall
  6256                              <2> .nospecialkeycode:
  6257 00004B2D 668B0D[B6230000]    <2> 	mov cx, [lastkey + 2]
  6258 00004B34 E87DE6FFFF          <2> 	call showhexsmall
  6259 00004B39 80F901              <2> 	cmp cl, 1
  6260 00004B3C 75C2                <2> 	jne keycode
  6261 00004B3E C3                  <2> 	ret
  6262                              <2> %endif
  6263                              <1> %ifdef gui.included
  6264                              <1> 	%include 'source/programs/line.asm'
  6265 00004B3F FF2C6C696E6500      <2> db 255,44,"line",0
  6266                              <2> linetester:
  6267 00004B46 803D[EF8E0000]00    <2> 	cmp byte [guion], 0
  6268 00004B4D 0F841B000000        <2> 	je near .done
  6269 00004B53 668B35[6D020000]    <2> 	mov si, [timenanoseconds + 2];essentially load a random value
  6270 00004B5A BB38000000          <2> 	mov ebx, 28*2;the line test draws ~28/6 times more lines in a 4:3 display mode than circles
  6271 00004B5F E868000000          <2> 	call .circletest
  6272 00004B64 BB0C000000          <2> 	mov ebx, 6*2 ;this makes them draw the same amount of lines as circles
  6273 00004B69 E801000000          <2> 	call .linetest
  6274                              <2> .done:
  6275 00004B6E C3                  <2> 	ret
  6276                              <2> 
  6277                              <2> .linetest:
  6278 00004B6F 53                  <2> 	push ebx
  6279 00004B70 E8D6000000          <2> 	call .stime
  6280 00004B75 5B                  <2> 	pop ebx
  6281 00004B76 31FF                <2> 	xor edi, edi
  6282                              <2> .ltlp:
  6283 00004B78 53                  <2> 	push ebx
  6284 00004B79 E81C010000          <2> 	call .st
  6285 00004B7E 66F7D6              <2> 	not si
  6286 00004B81 E814010000          <2> 	call .st
  6287 00004B86 5B                  <2> 	pop ebx
  6288 00004B87 66F7D6              <2> 	not si
  6289 00004B8A 660335[6B020000]    <2> 	add si, [timenanoseconds]
  6290 00004B91 4B                  <2> 	dec ebx
  6291 00004B92 81FB00000000        <2> 	cmp ebx, 0
  6292 00004B98 77DE                <2> 	ja .ltlp
  6293 00004B9A E8C4000000          <2> 	call .etime
  6294 00004B9F 53                  <2> 	push ebx	
  6295 00004BA0 57                  <2> 	push edi
  6296 00004BA1 E8BC270000          <2> 	call guiclear
  6297 00004BA6 E807280000          <2> 	call reloadallgraphics
  6298 00004BAB 59                  <2> 	pop ecx
  6299 00004BAC E8D4E6FFFF          <2> 	call showdec
  6300 00004BB1 BE[DC4C0000]        <2> 	mov esi, .msg
  6301 00004BB6 E8A1D1FFFF          <2> 	call print
  6302 00004BBB 59                  <2> 	pop ecx
  6303 00004BBC E8C4E6FFFF          <2> 	call showdec
  6304 00004BC1 BE[084D0000]        <2> 	mov esi, .msgtime
  6305 00004BC6 E891D1FFFF          <2> 	call print
  6306 00004BCB C3                  <2> 	ret
  6307                              <2> 	
  6308                              <2> .circletest:
  6309 00004BCC 53                  <2> 	push ebx
  6310 00004BCD E879000000          <2> 	call .stime
  6311 00004BD2 5B                  <2> 	pop ebx
  6312 00004BD3 31FF                <2> 	xor edi, edi
  6313                              <2> .ctlp:
  6314 00004BD5 53                  <2> 	push ebx
  6315 00004BD6 668B0D[5C5A0000]    <2> 	mov cx, [resolutiony]
  6316 00004BDD 66D1E9              <2> 	shr cx, 1
  6317 00004BE0 668B15[5A5A0000]    <2> 	mov dx, [resolutionx]
  6318 00004BE7 66D1EA              <2> 	shr dx, 1
  6319 00004BEA 6689C8              <2> 	mov ax, cx
  6320                              <2> .circle:
  6321 00004BED 60                  <2> 	pusha
  6322 00004BEE E8CC210000          <2> 	call drawcircle
  6323 00004BF3 61                  <2> 	popa
  6324 00004BF4 6648                <2> 	dec ax
  6325 00004BF6 47                  <2> 	inc edi
  6326 00004BF7 663D0100            <2> 	cmp ax, 1
  6327 00004BFB 77F0                <2> 	ja .circle
  6328 00004BFD 66F7D6              <2> 	not si
  6329                              <2> .circle2:
  6330 00004C00 60                  <2> 	pusha
  6331 00004C01 E8B9210000          <2> 	call drawcircle
  6332 00004C06 61                  <2> 	popa
  6333 00004C07 47                  <2> 	inc edi
  6334 00004C08 6640                <2> 	inc ax
  6335 00004C0A 6639C8              <2> 	cmp ax, cx
  6336 00004C0D 76F1                <2> 	jbe .circle2
  6337 00004C0F 5B                  <2> 	pop ebx
  6338 00004C10 66F7D6              <2> 	not si
  6339 00004C13 660335[6B020000]    <2> 	add si, [timenanoseconds]
  6340 00004C1A 4B                  <2> 	dec ebx
  6341 00004C1B 81FB00000000        <2> 	cmp ebx, 0
  6342 00004C21 77B2                <2> 	ja .ctlp
  6343 00004C23 E83B000000          <2> 	call .etime
  6344 00004C28 53                  <2> 	push ebx
  6345 00004C29 57                  <2> 	push edi
  6346 00004C2A 59                  <2> 	pop ecx
  6347 00004C2B E855E6FFFF          <2> 	call showdec
  6348 00004C30 BE[F14C0000]        <2> 	mov esi, .msgcircle
  6349 00004C35 E822D1FFFF          <2> 	call print
  6350 00004C3A 59                  <2> 	pop ecx
  6351 00004C3B E845E6FFFF          <2> 	call showdec
  6352 00004C40 BE[084D0000]        <2> 	mov esi, .msgtime
  6353 00004C45 E812D1FFFF          <2> 	call print
  6354 00004C4A C3                  <2> 	ret
  6355                              <2> 	
  6356                              <2> .stime:
  6357 00004C4B F4                  <2> 	hlt
  6358 00004C4C A1[67020000]        <2> 	mov eax, [timeseconds]
  6359 00004C51 8B1D[6B020000]      <2> 	mov ebx, [timenanoseconds]
  6360 00004C57 A3[174D0000]        <2> 	mov [.time], eax
  6361 00004C5C 891D[1B4D0000]      <2> 	mov [.time + 4], ebx
  6362 00004C62 C3                  <2> 	ret
  6363                              <2> 	
  6364                              <2> .etime:
  6365 00004C63 A1[67020000]        <2> 	mov eax, [timeseconds]
  6366 00004C68 8B1D[6B020000]      <2> 	mov ebx, [timenanoseconds]
  6367 00004C6E 8B0D[174D0000]      <2> 	mov ecx, [.time]
  6368 00004C74 8B15[1B4D0000]      <2> 	mov edx, [.time + 4]
  6369 00004C7A C1EA0A              <2> 	shr edx, 10
  6370 00004C7D C1EB0A              <2> 	shr ebx, 10
  6371 00004C80 29C8                <2> 	sub eax, ecx
  6372 00004C82 3D00000000          <2> 	cmp eax, 0
  6373 00004C87 740E                <2> 	je .notclp
  6374                              <2> .tclp:
  6375 00004C89 81C340420F00        <2> 	add ebx, 1000000
  6376 00004C8F 48                  <2> 	dec eax
  6377 00004C90 3D00000000          <2> 	cmp eax, 0
  6378 00004C95 75F2                <2> 	jne .tclp
  6379                              <2> .notclp:
  6380 00004C97 29D3                <2> 	sub ebx, edx
  6381 00004C99 C3                  <2> 	ret
  6382                              <2> 	
  6383                              <2> .st:
  6384 00004C9A 6631C0              <2> 	xor ax, ax
  6385 00004C9D 6631DB              <2> 	xor bx, bx
  6386 00004CA0 668B0D[5C5A0000]    <2> 	mov cx, [resolutiony]
  6387 00004CA7 668B15[5A5A0000]    <2> 	mov dx, [resolutionx]
  6388                              <2> .lp:
  6389 00004CAE 60                  <2> 	pusha
  6390 00004CAF E882250000          <2> 	call drawline
  6391 00004CB4 61                  <2> 	popa
  6392                              <2> .noswitch:
  6393 00004CB5 47                  <2> 	inc edi
  6394 00004CB6 6643                <2> 	inc bx
  6395 00004CB8 664A                <2> 	dec dx
  6396 00004CBA 6681FB0000          <2> 	cmp bx, 0
  6397 00004CBF 74ED                <2> 	je .lp
  6398 00004CC1 6681FA0000          <2> 	cmp dx, 0
  6399 00004CC6 75E6                <2> 	jne .lp
  6400                              <2> .lp2:
  6401 00004CC8 60                  <2> 	pusha
  6402 00004CC9 E868250000          <2> 	call drawline
  6403 00004CCE 61                  <2> 	popa
  6404 00004CCF 47                  <2> 	inc edi
  6405 00004CD0 6640                <2> 	inc ax
  6406 00004CD2 6649                <2> 	dec cx
  6407 00004CD4 6681F90000          <2> 	cmp cx, 0
  6408 00004CD9 75ED                <2> 	jne .lp2
  6409 00004CDB C3                  <2> 	ret
  6410                              <2> 	
  6411 00004CDC 6C696E657320776572- <2> .msg db "lines were drawn in ",0
  6412 00004CE5 6520647261776E2069- <2>
  6413 00004CEE 6E2000              <2>
  6414 00004CF1 636972636C65732077- <2> .msgcircle db "circles were drawn in ",0
  6415 00004CFA 65726520647261776E- <2>
  6416 00004D03 20696E2000          <2>
  6417 00004D08 6D6963726F7365636F- <2> .msgtime db "microseconds.",10,0
  6418 00004D11 6E64732E0A00        <2>
  6419 00004D17 0000000000000000    <2> .time dd 0,0	
  6420                              <1> %endif
  6421                              <1> %include 'source/programs/logout.asm'
  6422 00004D1F FF2C6C6F676F757400  <2> 	db 255,44,"logout",0
  6423 00004D28 E908DEFFFF          <2> 	jmp os
  6424                              <1> %include 'source/programs/loop.asm'
  6425 00004D2D FF2C6C6F6F7000      <2> 	db 255,44,"loop",0
  6426 00004D34 803D[83BA0300]00    <2> 	cmp byte [LOOPON], 0
  6427 00004D3B 0F8501000000        <2> 	jne near filoop
  6428 00004D41 C3                  <2> 	ret
  6429 00004D42 8B35[84BA0300]      <2> filoop: mov esi, [LOOPPOS]
  6430 00004D48 FE0D[19BA0300]      <2> 	dec byte [IFON]
  6431 00004D4E C605[83BA0300]00    <2> 	mov byte [LOOPON], 0
  6432 00004D55 8935[7EBA0300]      <2> 	mov [BATCHPOS], esi
  6433 00004D5B 8935[DB390000]      <2> 	mov [batchedi], esi
  6434 00004D61 C3                  <2> 	ret 
  6435                              <1> %ifdef disk.none
  6436                              <1> %else
  6437                              <1> 	%include 'source/programs/ls.asm'
  6438 00004D62 FF2C6C7300          <2> db 255,44,"ls",0
  6439 00004D67 BE[49910300]        <2> 		mov esi, diskfileindex
  6440                              <2> 	diskindexdir:
  6441 00004D6C 803E5F              <2> 		cmp byte [esi], '_'
  6442 00004D6F 7440                <2> 		je nextdiskindexdir
  6443 00004D71 E8C2CFFFFF          <2> 		call printquiet
  6444 00004D76 56                  <2> 		push esi
  6445 00004D77 BE[D14D0000]        <2> 		mov esi, disktab
  6446 00004D7C E8B7CFFFFF          <2> 		call printquiet
  6447 00004D81 5E                  <2> 		pop esi
  6448 00004D82 8B4E05              <2> 		mov ecx, [esi + 5]
  6449 00004D85 C605[B5310000]05    <2> 		mov byte [firsthexshown], 5
  6450 00004D8C E8F4E4FFFF          <2> 		call showdec
  6451 00004D91 56                  <2> 		push esi
  6452 00004D92 BE[CA8E0000]        <2> 		mov esi, line
  6453 00004D97 E89CCFFFFF          <2> 		call printquiet
  6454 00004D9C 5E                  <2> 		pop esi
  6455 00004D9D 81C609000000        <2> 		add esi, 9
  6456 00004DA3 81FE[2B920300]      <2> 		cmp esi, enddiskfileindex
  6457 00004DA9 72C1                <2> 		jb diskindexdir
  6458 00004DAB E802DBFFFF          <2> 		call termcopy
  6459 00004DB0 C3                  <2> 		ret
  6460                              <2> 	nextdiskindexdir:
  6461 00004DB1 46                  <2> 		inc esi
  6462 00004DB2 803E00              <2> 		cmp byte [esi], 0
  6463 00004DB5 75FA                <2> 		jne nextdiskindexdir
  6464 00004DB7 81C609000000        <2> 		add esi, 9
  6465 00004DBD 81FE[2B920300]      <2> 		cmp esi, enddiskfileindex
  6466 00004DC3 72A7                <2> 		jb diskindexdir
  6467 00004DC5 E8E8DAFFFF          <2> 		call termcopy
  6468 00004DCA C3                  <2> 		ret
  6469                              <2> 		
  6470 00004DCB 4469736B2000        <2> 		diskmsg db "Disk ",0
  6471 00004DD1 0D09090900          <2> 		disktab db 13,9,9,9,0
  6472                              <1> %endif
  6473                              <1> %include 'source/programs/memory.asm'
  6474 00004DD6 FF2C6D656D6F727900  <2> db 255,44,"memory",0
  6475 00004DDF BE[058F0000]        <2> 	mov esi, memlistbuf
  6476 00004DE4 31FF                <2> 	xor edi, edi
  6477 00004DE6 668B3D[45910000]    <2> 	mov di, [memlistend]
  6478 00004DED 01F7                <2> 	add edi, esi
  6479                              <2> printmemmap:
  6480 00004DEF 8B0E                <2> 	mov ecx, [esi]
  6481 00004DF1 E8D4E3FFFF          <2> 	call showhex
  6482 00004DF6 81C608000000        <2> 	add esi, 8
  6483 00004DFC 8B0E                <2> 	mov ecx, [esi]
  6484 00004DFE E8C7E3FFFF          <2> 	call showhex
  6485 00004E03 81C608000000        <2> 	add esi, 8
  6486 00004E09 8B0E                <2> 	mov ecx, [esi]
  6487 00004E0B E8BAE3FFFF          <2> 	call showhex
  6488 00004E10 81C608000000        <2> 	add esi, 8
  6489 00004E16 57                  <2> 	push edi
  6490 00004E17 56                  <2> 	push esi
  6491 00004E18 E83ACFFFFF          <2> 	call printline
  6492 00004E1D 5E                  <2> 	pop esi
  6493 00004E1E 5F                  <2> 	pop edi
  6494 00004E1F 39FE                <2> 	cmp esi, edi
  6495 00004E21 72CC                <2> 	jb printmemmap
  6496 00004E23 C3                  <2> 	ret
  6497                              <2> 	
  6498                              <1> %include 'source/programs/pci.asm'
  6499 00004E24 FF2C70636900        <2> db 255,44,"pci",0
  6500 00004E2A E8B0190000          <2> 	call pcidump
  6501 00004E2F C3                  <2> 	ret 
  6502                              <1> %ifdef network.included
  6503                              <1> 	%include 'source/programs/ping.asm'
  6504 00004E30 FF2C70696E6700      <2> db 255,44,"ping",0
  6505                              <2> ping:
  6506 00004E37 8B35[A82F0000]      <2> 	mov esi, [currentcommandloc]
  6507 00004E3D 81C605000000        <2> 	add esi, 5
  6508 00004E43 E85D3F0000          <2> 	call strtoip
  6509 00004E48 890D[CE4E0000]      <2> 	mov [.destip], ecx
  6510 00004E4E E8983F0000          <2> 	call showip
  6511 00004E53 8B0D[7F8E0000]      <2> 	mov ecx, [sysip]
  6512 00004E59 890D[CA4E0000]      <2> 	mov [.sourceip]. ecx
  6513 00004E5F 31C0                <2> 	xor eax, eax
  6514 00004E61 31DB                <2> 	xor ebx, ebx
  6515 00004E63 66A3[C84E0000]      <2> 	mov [.checksum], ax
  6516 00004E69 66A3[D44E0000]      <2> 	mov [.icmpchecksum], ax
  6517 00004E6F BF[BE4E0000]        <2> 	mov edi, .header
  6518 00004E74 BE[D24E0000]        <2> 	mov esi, .headerend
  6519 00004E79 E8FF3E0000          <2> 	call getchecksum
  6520 00004E7E 66890D[C84E0000]    <2> 	mov [.checksum], cx
  6521 00004E85 BF[D24E0000]        <2> 	mov edi, .icmp
  6522 00004E8A BE[FA4E0000]        <2> 	mov esi, .packetend
  6523 00004E8F E8E93E0000          <2> 	call getchecksum
  6524 00004E94 66890D[D44E0000]    <2> 	mov [.icmpchecksum], cx
  6525 00004E9B BF[B04E0000]        <2> 	mov edi, .packet
  6526 00004EA0 BE[FA4E0000]        <2> 	mov esi, .packetend
  6527 00004EA5 E8C93E0000          <2> 	call sendpacket
  6528 00004EAA E8A8CEFFFF          <2> 	call printline
  6529 00004EAF C3                  <2> 	ret
  6530                              <2> 	
  6531                              <2> 	
  6532                              <2> 	
  6533                              <2> .packet:
  6534 00004EB0 FFFFFFFFFFFF        <2> .destinationmac db 0xFF,0xFF,0xFF,0xFF,0xFF,0xFF
  6535 00004EB6 000000000000        <2> .sourcemac	db 0,0,0,0,0,0
  6536 00004EBC 0800                <2> .ethertype	db 8,0	;ip is 0x800
  6537                              <2> .header:
  6538 00004EBE 45                  <2> .version	db 0x45
  6539 00004EBF 00                  <2> .services	db 0
  6540 00004EC0 003C                <2> .length	db 0,0x3C
  6541 00004EC2 0000                <2> .id		dw 0
  6542 00004EC4 00                  <2> .flags	db 0
  6543 00004EC5 00                  <2> .fragment db 0
  6544 00004EC6 80                  <2> .ttl	db 128
  6545 00004EC7 01                  <2> .protocol db 1 ;ICMP
  6546 00004EC8 0000                <2> .checksum dw 0
  6547 00004ECA 00000000            <2> .sourceip dd 0
  6548 00004ECE 00000000            <2> .destip dd 0
  6549                              <2> .headerend:
  6550                              <2> .icmp:
  6551 00004ED2 08                  <2> .icmptype db 8 ;Ping request
  6552 00004ED3 00                  <2> .icmpcode db 0
  6553 00004ED4 0000                <2> .icmpchecksum dw 0
  6554 00004ED6 0001                <2> .icmpid db 0,1
  6555 00004ED8 0000                <2> .sequence dw 0
  6556 00004EDA 616263646566676869- <2> db "abcdefghijklmnopqrstuvwabcdefghi" ;this is what microsoft includes
  6557 00004EE3 6A6B6C6D6E6F707172- <2>
  6558 00004EEC 737475767761626364- <2>
  6559 00004EF5 6566676869          <2>
  6560                              <2> .packetend:
  6561                              <1> %endif
  6562                              <1> %ifdef disk.none
  6563                              <1> %else
  6564                              <1> 	%include 'source/programs/play.asm'
  6565 00004EFA FF2C706C61796100    <2> db 255,44,"playa",0
  6566 00004F02 8B3D[A82F0000]      <2> 	mov edi, [currentcommandloc]
  6567 00004F08 81C706000000        <2> 	add edi, 6
  6568 00004F0E E834000000          <2> 	call playasync
  6569 00004F13 C3                  <2> 	ret
  6570 00004F14 FF2C706C617900      <2> db 255,44,"play",0
  6571                              <2> play:
  6572 00004F1B 8B3D[A82F0000]      <2> 	mov edi, [currentcommandloc]
  6573 00004F21 81C705000000        <2> 	add edi, 5
  6574 00004F27 E81B000000          <2> 	call playasync
  6575                              <2> .waitforsound:
  6576 00004F2C F4                  <2> 	hlt
  6577                              <2> %ifdef sound.included
  6578 00004F2D A1[2F610000]        <2> 	mov eax, [Length0]
  6579 00004F32 660B05[33610000]    <2> 	or ax, [Length1]
  6580                              <2> %endif
  6581 00004F39 0A05[6F020000]      <2> 	or al, [soundon]
  6582 00004F3F 3D00000000          <2> 	cmp eax, 0
  6583 00004F44 75E6                <2> 	jne .waitforsound
  6584 00004F46 C3                  <2> 	ret
  6585                              <2> playasync:
  6586 00004F47 BE0000C000          <2> 	mov esi, 0xC00000
  6587 00004F4C E8BD1B0000          <2> 	call loadfile
  6588 00004F51 81FA94010000        <2> 	cmp edx, 404
  6589 00004F57 743F                <2> 	je nosoundfound
  6590 00004F59 BB0000C000          <2> 	mov ebx, 0xC00000
  6591 00004F5E 817B0857415645      <2> 	cmp dword [ebx + 8], "WAVE"
  6592 00004F65 0F843F010000        <2> 	je near wave_player
  6593 00004F6B 66813B534E          <2> 	cmp word [ebx], "SN"
  6594 00004F70 7526                <2> 	jne nosoundfound
  6595 00004F72 81C306000000        <2> 	add ebx, 6
  6596 00004F78 891D[72020000]      <2> 	mov [soundpos], ebx
  6597 00004F7E 035BFC              <2> 	add ebx, [ebx - 4]
  6598 00004F81 891D[76020000]      <2> 	mov [soundendpos], ebx
  6599 00004F87 66C705[70020000]00- <2> 	mov word [soundrepititions], 0
  6600 00004F8F 00                  <2>
  6601 00004F90 C605[6F020000]01    <2> 	mov byte [soundon], 1
  6602 00004F97 C3                  <2> 	ret
  6603                              <2> nosoundfound:
  6604 00004F98 BE[BE4F0000]        <2> 	mov esi, notfoundsound
  6605 00004F9D E8BACDFFFF          <2> 	call print
  6606 00004FA2 8B35[A82F0000]      <2> 	mov esi, [currentcommandloc]
  6607 00004FA8 81C605000000        <2> 	add esi, 5
  6608 00004FAE E8A9CDFFFF          <2> 	call print
  6609 00004FB3 BE[998E0000]        <2> 	mov esi, notfound2
  6610 00004FB8 E89FCDFFFF          <2> 	call print
  6611 00004FBD C3                  <2> 	ret
  6612 00004FBE 706C61793A2000      <2> notfoundsound db "play: ",0
  6613                              <2> 
  6614                              <2> %ifdef sound.included
  6615                              <2> sbplay:
  6616 00004FC5 BE0000C000          <2> 		mov esi, 0xC00000
  6617 00004FCA 89F3                <2> 		mov ebx, esi
  6618 00004FCC 81C62C000000        <2> 		add esi, WAVSTART
  6619 00004FD2 29F7                <2> 		sub edi, esi
  6620 00004FD4 66893D[33610000]    <2> 		mov [Length1], di
  6621 00004FDB C1EF0F              <2> 		shr edi, 15
  6622 00004FDE 893D[2F610000]      <2> 		mov [Length0], edi
  6623 00004FE4 8B4B18              <2> 		mov ecx, [ebx + 24]
  6624 00004FE7 890D[40610000]      <2> 		mov [Freq], ecx
  6625 00004FED 31C0                <2> 		xor eax, eax
  6626 00004FEF BA0000C000          <2> 		mov	edx, 0xC00000 ;physical location of sound
  6627 00004FF4 81C22C000000        <2> 		add edx, WAVSTART
  6628 00004FFA 01D0                <2> 		add	eax, edx
  6629 00004FFC 89C6                <2> 		mov esi, eax
  6630 00004FFE 31C9                <2> 		xor ecx, ecx
  6631 00005000 31DB                <2> 		xor ebx, ebx
  6632 00005002 66891D[3D610000]    <2> 		mov [SegLoc], bx
  6633 00005009 81C300000800        <2> 		add ebx, 0x80000
  6634 0000500F 66B9FFFF            <2> 		mov cx, 0xFFFF
  6635 00005013 6681FF0000          <2> 		cmp di, 0
  6636 00005018 7520                <2> 		jne .autoinit
  6637 0000501A 668B0D[33610000]    <2> 		mov cx, [Length1]
  6638 00005021 C605[2E610000]01    <2> 		mov byte [OddLength], 1
  6639 00005028 6681F90080          <2> 		cmp cx, 32768
  6640 0000502D 730B                <2> 		jae .autoinit
  6641 0000502F C605[2E610000]00    <2> 		mov byte [OddLength], 0
  6642 00005036 66D1E1              <2> 		shl cx, 1
  6643 00005039 47                  <2> 		inc edi
  6644                              <2> .autoinit:
  6645 0000503A 4F                  <2> 		dec edi
  6646 0000503B 893D[2F610000]      <2> 		mov [Length0], edi
  6647 00005041 66890D[33610000]    <2> 		mov [Length1], cx
  6648 00005048 66D1E9              <2> 		shr cx, 1
  6649 0000504B 6641                <2> 		inc cx
  6650 0000504D 01C8                <2> 		add eax, ecx
  6651 0000504F A3[35610000]        <2> 		mov [NextMemLoc], eax
  6652 00005054 8935[39610000]      <2> 		mov	[MemLoc], esi
  6653 0000505A E8750F0000          <2> 		call DMACopy
  6654 0000505F 31DB                <2> 		xor ebx, ebx
  6655 00005061 668B1D[3D610000]    <2> 		mov bx, [SegLoc]
  6656 00005068 31C9                <2> 		xor ecx, ecx
  6657 0000506A 668B0D[33610000]    <2> 		mov cx, [Length1]
  6658 00005071 66D1E9              <2> 		shr cx, 1
  6659 00005074 6641                <2> 		inc cx
  6660 00005076 01CB                <2> 		add ebx, ecx
  6661 00005078 66891D[3D610000]    <2> 		mov [SegLoc], bx
  6662 0000507F 81C300000800        <2> 		add ebx, 0x80000
  6663 00005085 8B35[35610000]      <2> 		mov esi, [NextMemLoc]
  6664 0000508B 89F0                <2> 		mov eax, esi
  6665 0000508D 01C8                <2> 		add eax, ecx
  6666 0000508F A3[35610000]        <2> 		mov [NextMemLoc], eax
  6667 00005094 8935[39610000]      <2> 		mov	[MemLoc], esi
  6668 0000509A E8350F0000          <2> 		call DMACopy
  6669 0000509F E8530F0000          <2> 		call DMAPlay
  6670 000050A4 E8DD0F0000          <2> 		call PlayDSP
  6671 000050A9 C3                  <2> 		ret
  6672                              <2> WAVSTART equ 44
  6673                              <2> wave_player:
  6674 000050AA 803D[44610000]01    <2> 	cmp byte [SoundBlaster], 1
  6675 000050B1 0F840EFFFFFF        <2> 	je near sbplay
  6676 000050B7 BE[C2500000]        <2> 	mov esi, nosoundblaster
  6677 000050BC E89BCCFFFF          <2> 	call print
  6678 000050C1 C3                  <2> 	ret
  6679                              <2> %else
  6680                              <2> 	wave_player:
  6681                              <2> 		mov esi, nosoundblaster
  6682                              <2> 		call print
  6683                              <2> 		ret
  6684                              <2> %endif
  6685 000050C2 4E6F20536F756E6420- <2> nosoundblaster db "No Sound Blaster detected.",10,0
  6686 000050CB 426C61737465722064- <2>
  6687 000050D4 657465637465642E0A- <2>
  6688 000050DD 00                  <2>
  6689                              <1> %endif
  6690                              <1> %include 'source/programs/pwd.asm'
  6691 000050DE FF2C70776400        <2> db 255,44,"pwd",0
  6692 000050E4 BE[14B80300]        <2> 	mov esi, currentfolder
  6693 000050E9 E84ACCFFFF          <2> 	call printquiet
  6694 000050EE E864CCFFFF          <2> 	call printline
  6695 000050F3 C3                  <2> 	ret
  6696                              <2> 	
  6697                              <1> %include 'source/programs/reboot.asm'
  6698 000050F4 FF2C7265626F6F7400  <2> 	db 255,44,"reboot",0
  6699 000050FD 0F011D[07510000]    <2> 		lidt [idtreboot]
  6700 00005104 CD00                <2> 		int 0
  6701 00005106 F4                  <2> 		hlt
  6702                              <2> 	
  6703 00005107 0000                <2> 	idtreboot dw 0
  6704 00005109 00000000            <2> 			  dd 0
  6705                              <2> 
  6706                              <2> 	coldboot:
  6707 0000510D 66B84000            <2> 		MOV AX, 0040h
  6708 00005111 8EC0                <2> 		MOV ES, AX
  6709 00005113 2666C7057200000000- <2> 		MOV WORD [ES:00072h], 0h
  6710 0000511C 00                  <2>
  6711 0000511D EA00000000FFFF      <2> 		JMP 0FFFFh:0000h
  6712 00005124 CF                  <2> 		IRET
  6713                              <2> 
  6714                              <2> 	warmboot:
  6715 00005125 66B84000            <2> 		MOV AX, 0040h
  6716 00005129 8EC0                <2> 		MOV ES, AX
  6717 0000512B 2666C7057200000034- <2> 		MOV WORD [ES:00072h], 01234h
  6718 00005134 12                  <2>
  6719 00005135 EA00000000FFFF      <2> 		JMP 0FFFFh:0000h
  6720 0000513C CF                  <2> 		IRET
  6721                              <2> 		
  6722                              <1> %include 'source/programs/reg.asm'
  6723 0000513D FF2C72656700        <2> db 255,44,"reg",0
  6724 00005143 CD03                <2> 	int 3
  6725 00005145 C3                  <2> 	ret 
  6726                              <1> %ifdef disk.none
  6727                              <1> %else
  6728                              <1> 	%include 'source/programs/show.asm'
  6729 00005146 FF2C73686F7700      <2> db 255,44,"show",0
  6730                              <2> showprog:
  6731 0000514D 8B3D[A82F0000]      <2> 		mov edi, [currentcommandloc]
  6732 00005153 81C705000000        <2> 		add edi, 5
  6733 00005159 BE00004000          <2> 		mov esi, 0x400000
  6734 0000515E 803F26              <2> 		cmp byte [edi], '&'
  6735 00005161 741B                <2> 		je .nullfile
  6736 00005163 BE00008000          <2> 		mov esi, 0x800000
  6737 00005168 E8A1190000          <2> 		call loadfile
  6738 0000516D 81FA94010000        <2> 		cmp edx, 404
  6739 00005173 0F847E000000        <2> 		je near filenotfound
  6740 00005179 BE00008000          <2> 		mov esi, 0x800000
  6741                              <2> .nullfile:
  6742                              <2> %ifdef gui.included
  6743 0000517E 66813E424D          <2> 		cmp word [esi], "BM"
  6744 00005183 740B                <2> 		je bmpfound
  6745                              <2> %endif
  6746 00005185 E8D2CBFFFF          <2> 		call print
  6747 0000518A E8C8CBFFFF          <2> 		call printline
  6748 0000518F C3                  <2> 		ret
  6749                              <2> %ifdef gui.included
  6750                              <2> bmpfound:
  6751 00005190 803D[EF8E0000]00    <2> 		cmp byte [guion], 0
  6752 00005197 0F8428000000        <2> 		je near noguibmp
  6753 0000519D BE00008000          <2> 		mov esi, 0x800000
  6754 000051A2 31C9                <2> 		xor ecx, ecx
  6755 000051A4 31D2                <2> 		xor edx, edx
  6756 000051A6 31C0                <2> 		xor eax, eax
  6757 000051A8 31DB                <2> 		xor ebx, ebx
  6758 000051AA E83E1B0000          <2> 		call showbmp
  6759 000051AF 30C0                <2> 		xor al, al
  6760 000051B1 B405                <2> 		mov ah, 5
  6761 000051B3 CD30                <2> 		int 30h
  6762 000051B5 E8A8210000          <2> 		call guiclear
  6763 000051BA E8871E0000          <2> 		call clearmousecursor
  6764 000051BF E8EE210000          <2> 		call reloadallgraphics
  6765 000051C4 C3                  <2> 		ret
  6766                              <2> noguibmp:
  6767 000051C5 BE[D0510000]        <2> 		mov esi, warnguimsg
  6768 000051CA E88DCBFFFF          <2> 		call print
  6769 000051CF C3                  <2> 		ret
  6770 000051D0 546869732063616E20- <2> warnguimsg db "This can not be done without the GUI.",10,0
  6771 000051D9 6E6F7420626520646F- <2>
  6772 000051E2 6E6520776974686F75- <2>
  6773 000051EB 742074686520475549- <2>
  6774 000051F4 2E0A00              <2>
  6775                              <2> %endif
  6776                              <2> 
  6777                              <2> filenotfound:
  6778 000051F7 BE[2A520000]        <2> 		mov esi, filenf
  6779 000051FC E85BCBFFFF          <2> 		call print
  6780 00005201 8B35[A82F0000]      <2> 		mov esi, [currentcommandloc]
  6781                              <2> findfilenotfoundzero:
  6782 00005207 8A06                <2> 		mov al, [esi]
  6783 00005209 46                  <2> 		inc esi
  6784 0000520A 3C00                <2> 		cmp al, 0
  6785 0000520C 7411                <2> 		je nofilenamenotfound
  6786 0000520E 81FE[88D20300]      <2> 		cmp esi, buftxtend
  6787 00005214 7309                <2> 		jae nofilenamenotfound
  6788 00005216 3C20                <2> 		cmp al, " "
  6789 00005218 75ED                <2> 		jne findfilenotfoundzero
  6790 0000521A E83DCBFFFF          <2> 		call print
  6791                              <2> nofilenamenotfound:
  6792 0000521F BE[35520000]        <2> 		mov esi, filenf2
  6793 00005224 E833CBFFFF          <2> 		call print
  6794 00005229 C3                  <2> 		ret
  6795 0000522A 5468652066696C6520- <2> filenf db "The file ",34,0
  6796 00005233 2200                <2>
  6797 00005235 2220636F756C64206E- <2> filenf2 db 34," could not be found.",10,0
  6798 0000523E 6F7420626520666F75- <2>
  6799 00005247 6E642E0A00          <2>
  6800                              <1> %endif
  6801                              <1> %include 'source/programs/shush.asm'
  6802 0000524C FF2C736875736800    <2> db 255,44,"shush",0	;if you add 2 values it will switch size using the first as X in chars and the second as Y in chars
  6803                              <2> shushprog:
  6804                              <2> %ifdef gui.included
  6805 00005254 803D[EF8E0000]00    <2> 	cmp byte [guion], 0
  6806 0000525B 0F84B9000000        <2> 	je near .noswitchsize
  6807 00005261 8B35[A82F0000]      <2> 	mov esi, [currentcommandloc]
  6808 00005267 81C606000000        <2> 	add esi, 6
  6809 0000526D 56                  <2> 	push esi
  6810 0000526E 4E                  <2> 	dec esi
  6811                              <2> .findspace:
  6812 0000526F 46                  <2> 	inc esi
  6813 00005270 8A06                <2> 	mov al, [esi]
  6814 00005272 3C00                <2> 	cmp al, 0
  6815 00005274 0F84A0000000        <2> 	je near .noswitchsize
  6816 0000527A 3C58                <2> 	cmp al, "X"
  6817 0000527C 7408                <2> 	je .donefind
  6818 0000527E 3C78                <2> 	cmp al, "x"
  6819 00005280 7404                <2> 	je .donefind
  6820 00005282 3C20                <2> 	cmp al, " "
  6821 00005284 75E9                <2> 	jne .findspace
  6822                              <2> .donefind:
  6823 00005286 30C0                <2> 	xor al, al
  6824 00005288 8806                <2> 	mov [esi], al
  6825 0000528A 46                  <2> 	inc esi
  6826 0000528B 89F7                <2> 	mov edi, esi
  6827 0000528D E8CEE0FFFF          <2> 	call cnvrttxt
  6828 00005292 89C8                <2> 	mov eax, ecx
  6829 00005294 5E                  <2> 	pop esi
  6830 00005295 50                  <2> 	push eax
  6831 00005296 89F7                <2> 	mov edi, esi
  6832 00005298 E8C3E0FFFF          <2> 	call cnvrttxt
  6833 0000529D 89CB                <2> 	mov ebx, ecx
  6834 0000529F 58                  <2> 	pop eax	
  6835 000052A0 6681FB0000          <2> 	cmp bx, 0
  6836 000052A5 0F846F000000        <2> 	je near .noswitchsize
  6837 000052AB 663D0000            <2> 	cmp ax, 0
  6838 000052AF 0F8465000000        <2> 	je near .noswitchsize
  6839 000052B5 66C1E303            <2> 	shl bx, 3
  6840 000052B9 66C1E004            <2> 	shl ax, 4
  6841 000052BD 663B1D[5A5A0000]    <2> 	cmp bx, [resolutionx]
  6842 000052C4 7607                <2> 	jbe .nofixx
  6843 000052C6 668B1D[5A5A0000]    <2> 	mov bx, [resolutionx]
  6844                              <2> .nofixx:
  6845 000052CD 66051000            <2> 	add ax, 16
  6846 000052D1 663B05[5C5A0000]    <2> 	cmp ax, [resolutiony]
  6847 000052D8 7606                <2> 	jbe .nofixy
  6848 000052DA 66A1[5C5A0000]      <2> 	mov ax, [resolutiony]
  6849                              <2> .nofixy:
  6850 000052E0 662D1000            <2> 	sub ax, 16
  6851 000052E4 6631C9              <2> 	xor cx, cx
  6852 000052E7 6631D2              <2> 	xor dx, dx
  6853 000052EA 66891D[50770000]    <2> 	mov [termwindow], bx
  6854 000052F1 66A3[52770000]      <2> 	mov [termwindow + 2], ax	;the previous lines of code make a large terminal window that is 4 characters smaller than the screen
  6855 000052F7 BE[50770000]        <2> 	mov esi, termwindow
  6856 000052FC 31DB                <2> 	xor ebx, ebx
  6857 000052FE 6631C0              <2> 	xor ax, ax
  6858 00005301 E877290000          <2> 	call showwindow
  6859 00005306 E857200000          <2> 	call guiclear
  6860 0000530B E8F8CAFFFF          <2> 	call clear
  6861 00005310 E89D200000          <2> 	call reloadallgraphics
  6862 00005315 E8E41D0000          <2> 	call switchmousepos2
  6863                              <2> .noswitchsize:
  6864                              <2> %endif
  6865 0000531A BE[25530000]        <2> 	mov esi, shushmsg
  6866 0000531F E838CAFFFF          <2> 	call print
  6867 00005324 C3                  <2> 	ret
  6868 00005325 57656C636F6D652074- <2> 	shushmsg db "Welcome to the SollerOS Hardly Unix-Compatible Shell!",10,0
  6869 0000532E 6F2074686520536F6C- <2>
  6870 00005337 6C65724F5320486172- <2>
  6871 00005340 646C7920556E69782D- <2>
  6872 00005349 436F6D70617469626C- <2>
  6873 00005352 65205368656C6C210A- <2>
  6874 0000535B 00                  <2>
  6875                              <1> %include 'source/programs/system.asm'
  6876 0000535C FF2C73797374656D00  <2> 	db 255,44,"system",0
  6877 00005365 BE[75540000]        <2> 	mov esi, kernelinfomsg
  6878 0000536A E8C9C9FFFF          <2> 	call printquiet
  6879 0000536F B9[49910300]        <2> 	mov ecx, osend
  6880 00005374 E80CDFFFFF          <2> 	call showdec
  6881 00005379 BE[8A540000]        <2> 	mov esi, diskbytemsg
  6882 0000537E E8B5C9FFFF          <2> 	call printquiet
  6883 00005383 B9[49910300]        <2> 	mov ecx, osend
  6884 00005388 81C1[3E900500]      <2> 	add ecx, commandbufend
  6885 0000538E 81E9[00940300]      <2> 	sub ecx, bssstart	;add the extra buffer space
  6886 00005394 E8ECDEFFFF          <2> 	call showdec
  6887 00005399 BE[A1540000]        <2> 	mov esi, membytemsg
  6888 0000539E E895C9FFFF          <2> 	call printquiet
  6889 000053A3 BE[04550000]        <2> 	mov esi, endofmemmsg
  6890 000053A8 E88BC9FFFF          <2> 	call printquiet
  6891 000053AD B9[52C82500]        <2> 	mov ecx, bssend
  6892 000053B2 E813DEFFFF          <2> 	call showhex
  6893 000053B7 BE[BA540000]        <2> 	mov esi, systeminfomsg
  6894 000053BC E877C9FFFF          <2> 	call printquiet
  6895                              <2> getcpuspeed:
  6896 000053C1 B8FE000000          <2> 	mov eax, 0xFE
  6897 000053C6 E621                <2> 	out 0x21, al ;mask off all but timer interrupt
  6898 000053C8 B020                <2> 	mov al, 0x20
  6899 000053CA E620                <2> 	out 0x20, al
  6900 000053CC F4                  <2> 	hlt
  6901 000053CD 0F31                <2> 	rdtsc
  6902 000053CF 89D6                <2> 	mov esi, edx
  6903 000053D1 89C7                <2> 	mov edi, eax
  6904 000053D3 31C0                <2> 	xor eax, eax
  6905 000053D5 C605[4F020000]01    <2> 	mov byte [testingcpuspeed], 1
  6906                              <2> cpuspeedloop:	;wait until next timer interrupt, then inc eax until the next
  6907 000053DC 40                  <2> 	inc eax
  6908 000053DD EBFD                <2> 	jmp cpuspeedloop
  6909                              <2> cpuspeedloopend:
  6910 000053DF 0F31                <2> 	rdtsc
  6911 000053E1 29F8                <2> 	sub eax, edi
  6912 000053E3 29F2                <2> 	sub edx, esi
  6913 000053E5 8915[58020000]      <2> 	mov [cpuclocksperint + 4], edx
  6914 000053EB A3[54020000]        <2> 	mov [cpuclocksperint], eax
  6915 000053F0 31C0                <2> 	xor eax, eax
  6916 000053F2 E621                <2> 	out 0x21, al
  6917 000053F4 B020                <2> 	mov al, 0x20
  6918 000053F6 E620                <2> 	out 0x20, al
  6919 000053F8 31D2                <2> 	xor edx, edx
  6920 000053FA 31C0                <2> 	xor eax, eax
  6921 000053FC A1[50020000]        <2> 	mov eax, [cpuspeedperint]
  6922 00005401 D1E0                <2> 	shl eax, 1	;the cpu speed loop actually contains 2 commands so multiply the
  6923                              <2> 				;result by 2
  6924 00005403 8B1D[62020000]      <2> 	mov ebx, [timeinterval]
  6925 00005409 C1EB0A              <2> 	shr ebx, 10 ;divide the interval by 1024
  6926 0000540C F7F3                <2> 	div ebx	;quotient in eax, remainder in edx
  6927 0000540E 89C1                <2> 	mov ecx, eax
  6928 00005410 E870DEFFFF          <2> 	call showdec
  6929 00005415 BE[E8540000]        <2> 	mov esi, cpuspeedmsg
  6930 0000541A E819C9FFFF          <2> 	call printquiet
  6931 0000541F 31D2                <2> 	xor edx, edx
  6932 00005421 A1[54020000]        <2> 	mov eax, [cpuclocksperint]
  6933 00005426 8B15[58020000]      <2> 	mov edx, [cpuclocksperint + 4]
  6934 0000542C 8B1D[62020000]      <2> 	mov ebx, [timeinterval]
  6935 00005432 C1EB0A              <2> 	shr ebx, 10
  6936 00005435 F7F3                <2> 	div ebx
  6937 00005437 89C1                <2> 	mov ecx, eax
  6938 00005439 E847DEFFFF          <2> 	call showdec
  6939 0000543E BE[EE540000]        <2> 	mov esi, cpuclockmsg
  6940 00005443 E8F0C8FFFF          <2> 	call printquiet
  6941 00005448 8B0D[5C020000]      <2> 	mov ecx, [memoryspace]
  6942 0000544E C1E914              <2> 	shr ecx, 20
  6943 00005451 41                  <2> 	inc ecx	;the reading is one MB behind
  6944 00005452 E82EDEFFFF          <2> 	call showdec
  6945 00005457 BE[F3540000]        <2> 	mov esi, memoryspacemsg
  6946 0000545C E8FBC8FFFF          <2> 	call print
  6947                              <2> %ifdef sound.included
  6948 00005461 803D[44610000]00    <2> 	cmp byte [SoundBlaster], 0
  6949 00005468 740A                <2> 	je .nosb
  6950 0000546A BE[D0540000]        <2> 	mov esi, soundblastermsg
  6951 0000546F E8E8C8FFFF          <2> 	call print
  6952                              <2> .nosb:
  6953                              <2> %endif
  6954 00005474 C3                  <2> 	ret
  6955                              <2> 
  6956 00005475 4B65726E656C20496E- <2> kernelinfomsg db "Kernel Information:",10,0
  6957 0000547E 666F726D6174696F6E- <2>
  6958 00005487 3A0A00              <2>
  6959 0000548A 427974657320446973- <2> diskbytemsg db "Bytes Disk Space Used",10,0
  6960 00005493 6B2053706163652055- <2>
  6961 0000549C 7365640A00          <2>
  6962 000054A1 4279746573204D656D- <2> membytemsg db "Bytes Memory Space Used",10,0
  6963 000054AA 6F7279205370616365- <2>
  6964 000054B3 20557365640A00      <2>
  6965 000054BA 0A53797374656D2049- <2> systeminfomsg db 10,"System Information:",10,0
  6966 000054C3 6E666F726D6174696F- <2>
  6967 000054CC 6E3A0A00            <2>
  6968                              <2> %ifdef sound.included
  6969 000054D0 536F756E64626C6173- <2> 	soundblastermsg db "Soundblaster Detected.",10,0
  6970 000054D9 746572204465746563- <2>
  6971 000054E2 7465642E0A00        <2>
  6972                              <2> %endif
  6973 000054E8 4D4950530A00        <2> cpuspeedmsg db "MIPS",10,0
  6974 000054EE 4D487A0A00          <2> cpuclockmsg db "MHz",10,0
  6975 000054F3 4D42204D656D6F7279- <2> memoryspacemsg db "MB Memory Space",10,0
  6976 000054FC 2053706163650A00    <2>
  6977 00005504 456E64206F66204D65- <2> endofmemmsg: db "End of Memory Space: 0x",0
  6978 0000550D 6D6F72792053706163- <2>
  6979 00005516 653A20307800        <2>
  6980                              <1> %include 'source/programs/time.asm'
  6981 0000551C FF2C74696D6500      <2> db 255,44,"time",0	
  6982                              <2> timer:
  6983 00005523 8B35[A82F0000]      <2> 	mov esi, [currentcommandloc]
  6984 00005529 81C604000000        <2> 	add esi, 4
  6985 0000552F 803E00              <2> 	cmp byte [esi], 0
  6986 00005532 7477                <2> 	je .norun
  6987 00005534 46                  <2> 	inc esi
  6988 00005535 8B0D[67020000]      <2> 	mov ecx, [timeseconds]
  6989 0000553B 51                  <2> 	push ecx
  6990 0000553C 8B0D[6B020000]      <2> 	mov ecx, [timenanoseconds]
  6991 00005542 51                  <2> 	push ecx
  6992 00005543 BF[88CE0300]        <2> 	mov edi, buftxt
  6993                              <2> .cpcmd:
  6994 00005548 8A06                <2> 	mov al, [esi]
  6995 0000554A 8807                <2> 	mov [edi], al
  6996 0000554C 46                  <2> 	inc esi
  6997 0000554D 47                  <2> 	inc edi
  6998 0000554E 3C00                <2> 	cmp al, 0
  6999 00005550 75F6                <2> 	jne .cpcmd
  7000 00005552 E87BD9FFFF          <2> 	call run
  7001 00005557 5A                  <2> 	pop edx
  7002 00005558 58                  <2> 	pop eax
  7003                              <2> 
  7004 00005559 8B0D[67020000]      <2> 	mov ecx, [timeseconds]
  7005 0000555F 29C1                <2> 	sub ecx, eax
  7006 00005561 8B1D[6B020000]      <2> 	mov ebx, [timenanoseconds]
  7007 00005567 29D3                <2> 	sub ebx, edx
  7008 00005569 7307                <2> 	jae .nosign
  7009 0000556B 81C300CA9A3B        <2> 	add ebx, 1000000000
  7010 00005571 49                  <2> 	dec ecx
  7011                              <2> .nosign:
  7012 00005572 E80EDDFFFF          <2> 	call showdec
  7013                              <2> 	
  7014 00005577 89D9                <2> 	mov ecx, ebx
  7015 00005579 BE[80400000]        <2> 	mov esi, timenscache
  7016 0000557E C7460230303030      <2> 	mov dword [esi+ 2], "0000"
  7017 00005585 C7460630303030      <2> 	mov dword [esi + 6], "0000"
  7018 0000558C C6460A30            <2> 	mov byte [esi + 10], "0"
  7019 00005590 BE[8B400000]        <2> 	mov esi, timenscacheend
  7020 00005595 E8DDDAFFFF          <2> 	call convert
  7021 0000559A BE[80400000]        <2> 	mov esi, timenscache
  7022 0000559F E8B8C7FFFF          <2> 	call print
  7023 000055A4 C605[80400000]08    <2> 	mov byte [timenscache], 8
  7024                              <2> .norun:
  7025 000055AB C3                  <2> 	ret
  7026                              <2> 	
  7027                              <1> %include 'source/programs/turnoff.asm'
  7028 000055AC FF2C7475726E6F6666- <2> 	db 255,44,"turnoff",0
  7029 000055B5 00                  <2>
  7030                              <2> 	turnoff:
  7031 000055B6 66C705[F30C0000]-   <2> 			mov word [realmodeptr], shutdown
  7032 000055BD [C955]              <2>
  7033 000055BF BB[F3550000]        <2> 			mov ebx, halt
  7034 000055C4 E818B6FFFF          <2> 			call realmode
  7035                              <2> 
  7036                              <2> [BITS 16]
  7037                              <2> 		shutdown:
  7038 000055C9 B453                <2> 			mov ah, 0x53
  7039 000055CB B004                <2> 			mov al, 4
  7040 000055CD 31DB                <2> 			xor bx, bx
  7041 000055CF CD15                <2> 			int 0x15
  7042                              <2> 			
  7043 000055D1 B453                <2> 			mov ah, 0x53
  7044 000055D3 B001                <2> 			mov al, 1
  7045 000055D5 31DB                <2> 			xor bx, bx
  7046 000055D7 CD15                <2> 			int 0x15
  7047                              <2> 			
  7048 000055D9 B453                <2> 			mov ah, 0x53
  7049 000055DB B008                <2> 			mov al, 8
  7050 000055DD BB0100              <2> 			mov bx, 1
  7051 000055E0 B90100              <2> 			mov cx, 1
  7052 000055E3 CD15                <2> 			int 0x15
  7053                              <2> 			
  7054 000055E5 B453                <2> 			mov ah, 0x53
  7055 000055E7 B007                <2> 			mov al, 7
  7056 000055E9 BB0100              <2> 			mov bx, 1
  7057 000055EC B90300              <2> 			mov cx, 3
  7058 000055EF CD15                <2> 			int 0x15
  7059 000055F1 EBFE                <2> 			jmp $
  7060                              <2> 			[BITS 32]
  7061 000055F3 EBFE                <2> halt: jmp $
  7062                              <1> %include 'source/programs/wait.asm'
  7063 000055F5 FF2C7761697400      <2> db 255,44,"wait",0
  7064                              <2> waitkey:
  7065 000055FC E853CDFFFF          <2> 		call getchar
  7066 00005601 C3                  <2> 		ret
  7067                              <1> %include 'source/programs/while.asm'
  7068 00005602 FF2C7768696C6500    <2> db 255,44,"while",0
  7069 0000560A 30C0                <2> whilecmd:  xor al, al
  7070 0000560C 3805[82BA0300]      <2> 	cmp [BATCHISON], al
  7071 00005612 0F849BE4FFFF        <2> 	je near notbatch
  7072 00005618 8B35[7EBA0300]      <2> 	mov esi, [BATCHPOS]
  7073 0000561E 81EE02000000        <2> 	sub esi, 2
  7074 00005624 4E                  <2> whilefnd: dec esi
  7075 00005625 8A06                <2> 	mov al, [esi]
  7076 00005627 3C0A                <2> 	cmp al, 10
  7077 00005629 0F840A000000        <2> 	je near whilefnd2
  7078 0000562F 3C00                <2> 	cmp al, 0
  7079 00005631 0F8402000000        <2> 	je near whilefnd2
  7080 00005637 EBEB                <2> 	jmp whilefnd
  7081                              <2> whilefnd2:
  7082 00005639 46                  <2> 	inc esi
  7083 0000563A 8935[84BA0300]      <2> 	mov [LOOPPOS], esi
  7084 00005640 C605[83BA0300]01    <2> 	mov BYTE [LOOPON], 1
  7085 00005647 BE[88CE0300]        <2> 	mov esi, buftxt
  7086 0000564C BB[88CE0300]        <2> 	mov ebx, buftxt
  7087 00005651 81C306000000        <2> 	add ebx, 6
  7088 00005657 E9DCF3FFFF          <2> 	jmp chkeqsn
  7089                              <1> progend:		;programs end here	
  7090                              <1> batchprogend:
  7091                                  	%include "source/hardware.asm"
  7092                              <1> %ifdef gui.included
  7093                              <1> 	%include "source/drivers/video/vesa.asm"
  7094                              <2> [BITS 16]
  7095                              <2> guiswitch:
  7096 0000565C 81F90000            <2> 	cmp cx, 0
  7097 00005660 750B                <2> 	jne guiswitchdefnum
  7098 00005662 B81200              <2> 	mov ax, 12h
  7099 00005665 31DB                <2> 	xor bx, bx
  7100 00005667 CD10                <2> 	int 10h
  7101 00005669 E85100              <2> 	call guiloadagain
  7102                              <2> guiswitchnocando:
  7103 0000566C C3                  <2> 	ret	;return without switching as mode number is bad
  7104                              <2> guiswitchdefnum:	;switch to a defined mode number
  7105 0000566D B8004F              <2> 	mov ax, 0x4F00
  7106 00005670 BF[4858]            <2> 	mov di, VBEMODEBLOCK
  7107 00005673 CD10                <2> 	int 10h
  7108 00005675 BE[6A58]            <2> 	mov si, reserved
  7109 00005678 81EE0200            <2> 	sub si, 2
  7110                              <2> .loop:
  7111 0000567C 81C60200            <2> 	add si, 2
  7112 00005680 81FE[4859]          <2> 	cmp si, oemdata
  7113 00005684 74E6                <2> 	je guiswitchnocando
  7114 00005686 813CFFFF            <2> 	cmp word [si], 0xFFFF
  7115 0000568A 74E0                <2> 	je guiswitchnocando
  7116 0000568C 390C                <2> 	cmp [si], cx
  7117 0000568E 75EC                <2> 	jne .loop
  7118 00005690 8936[A257]          <2> 	mov [videomodecache], si
  7119 00005694 81C90040            <2> 	or cx, 0x4000	;make sure linear frame buffer is selected
  7120 00005698 B8014F              <2> 	mov ax, 0x4F01
  7121 0000569B BF[485A]            <2> 	mov di, VBEMODEINFOBLOCK
  7122 0000569E 890E[A057]          <2> 	mov [vesamode], cx
  7123 000056A2 CD10                <2> 	int 10h
  7124 000056A4 E9D900              <2> 	jmp selectedvesa
  7125                              <2> guiload:
  7126 000056A7 BE[2058]            <2> 	mov si, bootmsg
  7127 000056AA E8D4A9              <2> 	call printrm
  7128 000056AD 31C0                <2> 	xor ax, ax
  7129 000056AF CD16                <2> 	int 16h
  7130 000056B1 3C79                <2> 	cmp al, "y"
  7131 000056B3 0F8588A9            <2> 	jne near vgaset
  7132 000056B7 BE[C98E]            <2> 	mov si, crlf
  7133 000056BA E8C4A9              <2> 	call printrm
  7134                              <2> guiloadagain:
  7135 000056BD B8004F              <2> 	mov ax, 04F00h
  7136 000056C0 BF[4858]            <2> 	mov di, VBEMODEBLOCK
  7137 000056C3 CD10                <2> 	int 10h
  7138 000056C5 BE[6A58]            <2> 	mov si, reserved
  7139 000056C8 81EE0200            <2> 	sub si, 2
  7140                              <2> findvideomodes:
  7141 000056CC 81C60200            <2> 	add si, 2
  7142 000056D0 8B0C                <2> 	mov cx, [si]
  7143 000056D2 81F9FFFF            <2> 	cmp cx, 0xFFFF
  7144 000056D6 0F840A00            <2> 	je near nextvmode
  7145 000056DA 81FE[4859]          <2> 	cmp si, oemdata
  7146 000056DE 0F835DA9            <2> 	jae near vgaset	;kill if no valid list is found
  7147 000056E2 EBE8                <2> 	jmp findvideomodes 	
  7148                              <2> ;debug,shows vmodes available
  7149                              <2> nextvmode:
  7150 000056E4 81EE0200            <2> 	sub si, 2
  7151 000056E8 81FE[6A58]          <2> 	cmp si, reserved
  7152 000056EC 0F82CDFF            <2> 	jb near guiloadagain
  7153 000056F0 8B0C                <2> 	mov cx, [si]
  7154 000056F2 81F9FFFF            <2> 	cmp cx, 0xFFFF
  7155 000056F6 0F84EAFF            <2> 	je near nextvmode
  7156 000056FA 81C90040            <2> 	or cx, 0x4000 		;Linear Frame Buffer
  7157 000056FE B8014F              <2> 	mov ax, 04F01h
  7158 00005701 BF[485A]            <2> 	mov di, VBEMODEINFOBLOCK
  7159 00005704 890E[A057]          <2> 	mov [vesamode], cx
  7160 00005708 CD10                <2> 	int 10h
  7161 0000570A A0[615A]            <2> 	mov al, [bitsperpixel]
  7162 0000570D 3C10                <2> 	cmp al, 16
  7163 0000570F 75D3                <2> 	jne nextvmode
  7164 00005711 8936[A257]          <2> 	mov [videomodecache], si
  7165 00005715 84E4                <2> 	test ah, ah
  7166 00005717 0F842200            <2> 	jz near setvesamode
  7167 0000571B EBC7                <2> 	jmp nextvmode
  7168 0000571D 0A0D49732074686973- <2> isthisvideook db 10,13,"Is this video mode OK?(y/n)",13,10,0
  7169 00005726 20766964656F206D6F- <2>
  7170 0000572F 6465204F4B3F28792F- <2>
  7171 00005738 6E290D0A00          <2>
  7172                              <2> setvesamode:
  7173 0000573D 8B36[A257]          <2> 	mov si, [videomodecache]
  7174 00005741 8B0C                <2> 	mov cx, [si]
  7175 00005743 E86500              <2> 	call decshow
  7176 00005746 B03A                <2> 	mov al, ':'
  7177 00005748 E8CD00              <2> 	call char
  7178 0000574B 8B0E[5A5A]          <2> 	mov cx, [resolutionx]
  7179 0000574F E85900              <2> 	call decshow
  7180 00005752 B078                <2> 	mov al, "x"
  7181 00005754 E8C100              <2> 	call char
  7182 00005757 8B0E[5C5A]          <2> 	mov cx, [resolutiony]
  7183 0000575B E84D00              <2> 	call decshow
  7184 0000575E B040                <2> 	mov al, "@"
  7185 00005760 E8B500              <2> 	call char
  7186 00005763 31C9                <2> 	xor cx, cx
  7187 00005765 8A0E[615A]          <2> 	mov cl, [bitsperpixel]
  7188 00005769 E83F00              <2> 	call decshow
  7189 0000576C BE[1D57]            <2> 	mov si, isthisvideook
  7190 0000576F E80FA9              <2> 	call printrm
  7191 00005772 31C0                <2> 	xor ax, ax
  7192 00005774 CD16                <2> 	int 16h
  7193 00005776 8B36[A257]          <2> 	mov si, [videomodecache]
  7194 0000577A 3C79                <2> 	cmp al, "y"
  7195 0000577C 0F8564FF            <2> 	jne near nextvmode
  7196                              <2> selectedvesa:
  7197 00005780 8B16[5A5A]          <2> 	mov dx, [resolutionx]
  7198 00005784 01D2                <2> 	add dx, dx
  7199 00005786 8916[485B]          <2> 	mov [resolutionx2], dx
  7200 0000578A 31D2                <2> 	xor dx, dx
  7201 0000578C 31C9                <2> 	xor cx, cx
  7202 0000578E B8024F              <2> 	mov ax, 04F02h
  7203 00005791 8B1E[A057]          <2> 	mov bx, [vesamode]
  7204 00005795 CD10                <2> 	int 10h		;enter VESA mode
  7205 00005797 C606[EF8E]01        <2> 	mov byte [guion], 1
  7206 0000579C E8B0A8              <2> 	call getmemorysize;get the memory map after the video is initialized
  7207 0000579F C3                  <2> 	ret
  7208                              <2> 	
  7209 000057A0 0000                <2> vesamode dw 0
  7210 000057A2 0000                <2> videomodecache dw 0
  7211                              <2> 
  7212 000057A4 0000000000          <2> dcnm db 0,0,0,0,0
  7213 000057A9 0000                <2> dcnmend db 0,0
  7214                              <2> 
  7215                              <2> 
  7216                              <2> decshow:
  7217 000057AB BE[A457]            <2> 	mov si, dcnm
  7218                              <2> decclear:
  7219 000057AE B030                <2> 	mov al, "0"
  7220 000057B0 8804                <2> 	mov [si], al
  7221 000057B2 46                  <2> 	inc si
  7222 000057B3 81FE[A957]          <2> 	cmp si, dcnmend
  7223 000057B7 76F5                <2> 	jbe decclear
  7224 000057B9 4E                  <2> 	dec si
  7225 000057BA E81500              <2> 	call convertrm
  7226 000057BD BE[A457]            <2> 	mov si, dcnm
  7227                              <2> dectst:
  7228 000057C0 8A04                <2> 	mov al, [si]
  7229 000057C2 46                  <2> 	inc si
  7230 000057C3 81FE[A957]          <2> 	cmp si, dcnmend
  7231 000057C7 7704                <2> 	ja dectstend
  7232 000057C9 3C30                <2> 	cmp al, "0"
  7233 000057CB 76F3                <2> 	jbe dectst
  7234                              <2> dectstend:
  7235 000057CD 4E                  <2> 	dec si
  7236 000057CE E8B0A8              <2> 	call printrm
  7237 000057D1 C3                  <2> 	ret
  7238                              <2> 	
  7239                              <2> 	
  7240                              <2> convertrm:
  7241 000057D2 4E                  <2> 	dec si
  7242 000057D3 89F3                <2> 	mov bx, si		;place to convert into must be in si, number to convert must be in cx
  7243                              <2> cnvrtrm:
  7244 000057D5 89DE                <2> 	mov si, bx
  7245 000057D7 81EE0300            <2> 	sub si, 3
  7246 000057DB 46                  <2> ten3rm:	inc si
  7247 000057DC 81F9E803            <2> 	cmp cx, 1000
  7248 000057E0 7208                <2> 	jb ten2rm
  7249 000057E2 81E9E803            <2> 	sub cx, 1000
  7250 000057E6 FE04                <2> 	inc byte [si]
  7251 000057E8 EBEB                <2> 	jmp cnvrtrm
  7252 000057EA 46                  <2> ten2rm:	inc si
  7253 000057EB 81F96400            <2> 	cmp cx, 100
  7254 000057EF 7208                <2> 	jb ten1rm
  7255 000057F1 81E96400            <2> 	sub cx, 100
  7256 000057F5 FE04                <2> 	inc byte [si]
  7257 000057F7 EBDC                <2> 	jmp cnvrtrm
  7258 000057F9 46                  <2> ten1rm:	inc si
  7259 000057FA 81F90A00            <2> 	cmp cx, 10
  7260 000057FE 7208                <2> 	jb ten0rm
  7261 00005800 81E90A00            <2> 	sub cx, 10
  7262 00005804 FE04                <2> 	inc byte [si]
  7263 00005806 EBCD                <2> 	jmp cnvrtrm
  7264 00005808 46                  <2> ten0rm:	inc si
  7265 00005809 81F90100            <2> 	cmp cx, 1
  7266 0000580D 7208                <2> 	jb tendnrm
  7267 0000580F 81E90100            <2> 	sub cx, 1
  7268 00005813 FE04                <2> 	inc byte [si]
  7269 00005815 EBBE                <2> 	jmp cnvrtrm
  7270                              <2> tendnrm:
  7271 00005817 C3                  <2> 	ret
  7272                              <2> 
  7273                              <2>     char: 		    ;char must be in al
  7274 00005818 BB0700              <2>        mov bx, 07
  7275 0000581B B40E                <2> 	   mov ah, 0Eh
  7276 0000581D CD10                <2> 	   int 10h
  7277 0000581F C3                  <2> 	   ret
  7278                              <2> 
  7279 00005820 426F6F7420696E746F- <2> bootmsg:	db "Boot into the GUI?(y/n)",0
  7280 00005829 20746865204755493F- <2>
  7281 00005832 28792F6E2900        <2>
  7282                              <2> 
  7283                              <2> 
  7284                              <2> mcursor:
  7285 00005838 01                  <2> 	db	00000001b
  7286 00005839 81                  <2> 	db	10000001b
  7287 0000583A C1                  <2> 	db	11000001b
  7288 0000583B E1                  <2> 	db	11100001b
  7289 0000583C F1                  <2> 	db	11110001b
  7290 0000583D F9                  <2> 	db	11111001b
  7291 0000583E FD                  <2> 	db	11111101b
  7292 0000583F FF                  <2> 	db	11111111b
  7293 00005840 F9                  <2> 	db	11111001b
  7294 00005841 B9                  <2> 	db	10111001b
  7295 00005842 39                  <2> 	db	00111001b
  7296 00005843 1C                  <2> 	db	00011100b
  7297 00005844 1C                  <2> 	db	00011100b
  7298 00005845 0E                  <2> 	db	00001110b
  7299 00005846 0E                  <2> 	db	00001110b
  7300 00005847 0C                  <2> 	db	00001100b
  7301                              <2> mcursorend:
  7302                              <2> 
  7303                              <2> 
  7304                              <2> VBEMODEBLOCK:
  7305 00005848 00<rept>            <2> vbesignature 		times  4 db 0 	;VBE Signature
  7306 0000584C 00<rept>            <2> vbeversion  		times  2 db 0	;VBE Version
  7307 0000584E 00<rept>            <2> oemstringptr  		times  4 db 0	;Pointer to OEM String
  7308 00005852 00<rept>            <2> capabilities 		times  4 db 0	;Capabilities of graphics cont.
  7309 00005856 00<rept>            <2> videomodeptr 		times  4 db 0	;Pointer to Video Mode List
  7310 0000585A 00<rept>            <2> totalmemory   		times  2 db 0	;number of 64Kb memory blocks
  7311 0000585C 00<rept>            <2> oemsoftwarerev  	times  2 db 0	;VBE implementation Software revision
  7312 0000585E 00<rept>            <2> oemvendornameptr 	times  4 db 0	;Pointer to Vendor Name String
  7313 00005862 00<rept>            <2> oemproductnameptr 	times  4 db 0	;Pointer to Product Name String
  7314 00005866 00<rept>            <2> oemproductrevptr 	times  4 db 0	;Pointer to Product Revision String
  7315 0000586A 00<rept>            <2> reserved			times  222 db 0	;Reserved for VBE implementation scratch area
  7316 00005948 00<rept>            <2> oemdata 			times  256 db 0	;Data Area for OEM Strings
  7317                              <2> 
  7318                              <2> VBEMODEINFOBLOCK:
  7319                              <2> ;Mandatory information for all VBE revision
  7320 00005A48 00<rept>            <2> modeattributes   	times  2 db 0	;Mode attributes
  7321 00005A4A 00                  <2> winaattributes   	times  1 db 0	;Window A attributes
  7322 00005A4B 00                  <2> winbattributes   	times  1 db 0	;Window B attributes
  7323 00005A4C 00<rept>            <2> wingranularity   	times  2 db 0	;Window granularity
  7324 00005A4E 00<rept>            <2> winsize          	times  2 db 0	;Window size
  7325 00005A50 00<rept>            <2> winasegment      	times  2 db 0	;Window A start segment
  7326 00005A52 00<rept>            <2> winbsegment      	times  2 db 0	;Window B start segment
  7327 00005A54 00<rept>            <2> winfuncptr       	times  4 db 0	;pointer to window function
  7328 00005A58 00<rept>            <2> bytesperscanline 	times  2 db 0	;Bytes per scan line
  7329                              <2> 
  7330                              <2> ;Mandatory information for VBE 1.2 and above
  7331 00005A5A 00<rept>            <2> resolutionx     	times  2 db 0	;Horizontal resolution in pixel or chars
  7332 00005A5C 00<rept>            <2> resolutiony	    	times  2 db 0	;Vertical resolution in pixel or chars
  7333 00005A5E 00                  <2> xcharsize       	times  1 db 0	;Character cell width in pixel
  7334 00005A5F 00                  <2> ycharsize       	times  1 db 0	;Character cell height in pixel
  7335 00005A60 00                  <2> numberofplanes  	times  1 db 0	;Number of memory planes
  7336 00005A61 00                  <2> bitsperpixel    	times  1 db 0	;Bits per pixel
  7337 00005A62 00                  <2> numberofbanks   	times  1 db 0	;Number of banks
  7338 00005A63 00                  <2> memorymodel     	times  1 db 0	;Memory model type
  7339 00005A64 00                  <2> banksize        	times  1 db 0	;Bank size in KB
  7340 00005A65 00                  <2> numberofimagepages	times  1 db 0	;Number of images
  7341 00005A66 00                  <2> reserved1       	times  1 db 0	;Reserved for page function
  7342                              <2> 
  7343                              <2> ;Direct Color fields (required for direct/6 and YUV/7 memory models)
  7344 00005A67 00                  <2> redmasksize			times  1 db 0	;Size of direct color red mask in bits
  7345 00005A68 00                  <2> redfieldposition	times  1 db 0	;Bit position of lsb of red bask
  7346 00005A69 00                  <2> greenmasksize   	times  1 db 0	;Size of direct color green mask in bits
  7347 00005A6A 00                  <2> greenfieldposition	times  1 db 0	;Bit position of lsb of green bask
  7348 00005A6B 00                  <2> bluemasksize		times  1 db 0	;Size of direct color blue mask in bits
  7349 00005A6C 00                  <2> bluefieldposition	times  1 db 0	;Bit position of lsb of blue bask
  7350 00005A6D 00                  <2> rsvdmasksize        times  1 db 0		;Size of direct color reserved mask in bits
  7351 00005A6E 00                  <2> rsvdfieldposition	times  1 db 0		;Bit position of lsb of reserved bask
  7352 00005A6F 00                  <2> directcolormodeinfo	times  1 db 0	;Direct color mode attributes
  7353                              <2> 
  7354                              <2> ;Mandatory information for VBE 2.0 and above
  7355 00005A70 00<rept>            <2> physbaseptr 		times  4 db 0	;Physical address for flat frame buffer
  7356 00005A74 00<rept>            <2> offscreenmemoffset 	times  4 db 0	;Pointer to start of off screen memory
  7357 00005A78 00<rept>            <2> offscreenmemsize 	times  2 db 0    ;Amount of off screen memory in 1Kb units
  7358 00005A7A 00<rept>            <2> reserved2 			times  206 db 0  ;Remainder of ModeInfoBlock
  7359                              <2> 
  7360 00005B48 00000000            <2> resolutionx2 dd 0	;this is not part of the VBE but is necessary GUI info
  7361                              <2> VBEEND:
  7362                              <2> [BITS 32]
  7363                              <1> 	%include "source/drivers/input/mouse.asm"
  7364 00005B4C 00                  <2> mousedisabled db 0
  7365                              <2> 	
  7366                              <2> 	cursorgui:
  7367 00005B4D 803D[238A0000]01    <2> 		cmp byte [mouseon], 1
  7368 00005B54 0F8432000000        <2> 		je near mousedaemon
  7369 00005B5A 803D[EF8E0000]00    <2> 		cmp byte [guion], 0
  7370 00005B61 0F8413070000        <2> 		je near entdown
  7371                              <2> 	initmouse:
  7372 00005B67 803D[EF8E0000]00    <2> 		cmp byte [guion], 0
  7373 00005B6E 7405                <2> 		je noswmsposinit
  7374 00005B70 E889150000          <2> 		call switchmousepos2
  7375                              <2> 	noswmsposinit:
  7376 00005B75 E85D020000          <2> 	  	call PS2SET
  7377 00005B7A E886020000          <2> 		call ACTMOUS
  7378 00005B7F C605[238A0000]01    <2> 		mov byte [mouseon],1
  7379 00005B86 E89F020000          <2> 		call GETB 	;Get the responce byte of the mouse (like: Hey i am active)
  7380                              <2> 		;call GETB
  7381                              <2> 				;if the bytes are mixed up,
  7382                              <2> 				;remove this line or add another of this line.
  7383                              <2> 	nomouse:
  7384 00005B8B C3                  <2> 		ret
  7385                              <2> 		
  7386                              <2> 	mousedaemon:
  7387 00005B8C 803D[238A0000]01    <2> 		cmp byte [mouseon], 1
  7388 00005B93 75D2                <2> 		jne initmouse
  7389 00005B95 E464                <2> 		in al, 64h ; Status
  7390 00005B97 A820                <2> 		test al, 20h ; PS2-Mouse?
  7391 00005B99 0F8502000000        <2> 		jnz near moused
  7392 00005B9F F4                  <2> 		hlt
  7393 00005BA0 C3                  <2> 		ret
  7394                              <2> 	moused:
  7395 00005BA1 803D[4C5B0000]01    <2> 		cmp byte [mousedisabled], 1
  7396 00005BA8 74E1                <2> 		je nomouse
  7397 00005BAA E87B020000          <2> 		  call GETB
  7398 00005BAF 88C3                <2> 		  mov  bl, al
  7399 00005BB1 80E301              <2> 		  and  bl, 1
  7400 00005BB4 881D[4F5E0000]      <2> 		  mov  BYTE [LBUTTON], bl
  7401 00005BBA 88C3                <2> 		  mov  bl, al
  7402 00005BBC 80E302              <2> 		  and  bl, 2
  7403 00005BBF D0EB                <2> 		  shr  bl, 1
  7404 00005BC1 881D[505E0000]      <2> 		  mov  BYTE [RBUTTON], bl
  7405 00005BC7 88C3                <2> 		  mov  bl, al
  7406 00005BC9 80E304              <2> 		  and  bl, 4
  7407 00005BCC C0EB02              <2> 		  shr  bl, 2
  7408 00005BCF 881D[515E0000]      <2> 		  mov  BYTE [MBUTTON], bl
  7409 00005BD5 E850020000          <2> 		  call GETB
  7410 00005BDA A2[525E0000]        <2> 		  mov  BYTE [XCOORD], al
  7411 00005BDF E846020000          <2> 		  call GETB
  7412 00005BE4 A2[535E0000]        <2> 		  mov  BYTE [YCOORD], al
  7413                              <2> 
  7414                              <2> 	showpixelcursor:
  7415 00005BE9 668B15[3E5D0000]    <2> 		mov dx, [mousecursorposition]
  7416 00005BF0 668B0D[405D0000]    <2> 		mov cx, [mousecursorposition + 2]
  7417 00005BF7 668915[3A5D0000]    <2> 		mov [lastmouseposition], dx
  7418 00005BFE 66890D[3C5D0000]    <2> 		mov [lastmouseposition + 2], cx
  7419 00005C05 A0[525E0000]        <2> 		mov al, [XCOORD]
  7420 00005C0A 3C80                <2> 		cmp al, 128
  7421 00005C0C 730C                <2> 		jae subxcoord
  7422 00005C0E 00C0                <2> 		add al, al
  7423 00005C10 30E4                <2> 		xor ah, ah
  7424 00005C12 6601C2              <2> 		add dx, ax
  7425 00005C15 E90B000000          <2> 		jmp subxcoorddn
  7426                              <2> 	subxcoord:
  7427 00005C1A 00C0                <2> 		add al, al
  7428 00005C1C 30DB                <2> 		xor bl, bl
  7429 00005C1E 28C3                <2> 		sub bl, al
  7430 00005C20 30FF                <2> 		xor bh, bh
  7431 00005C22 6629DA              <2> 		sub dx, bx
  7432                              <2> 	subxcoorddn:
  7433 00005C25 8A1D[535E0000]      <2> 		mov bl, [YCOORD]
  7434 00005C2B 30C0                <2> 		xor al, al
  7435 00005C2D 28D8                <2> 		sub al, bl
  7436 00005C2F 3C80                <2> 		cmp al, 128
  7437 00005C31 730A                <2> 		jae subycoord
  7438 00005C33 30E4                <2> 		xor ah, ah
  7439 00005C35 6601C1              <2> 		add cx, ax
  7440 00005C38 E909000000          <2> 		jmp subycoorddn
  7441                              <2> 	subycoord:
  7442 00005C3D 30DB                <2> 		xor bl, bl
  7443 00005C3F 28C3                <2> 		sub bl, al
  7444 00005C41 30FF                <2> 		xor bh, bh
  7445 00005C43 6629D9              <2> 		sub cx, bx
  7446                              <2> 	subycoorddn:
  7447 00005C46 6681FA204E          <2> 		cmp dx, 20000
  7448 00005C4B 7603                <2> 		jbe nooriginx2
  7449 00005C4D 6631D2              <2> 		xor dx, dx
  7450                              <2> 	nooriginx2:
  7451 00005C50 6681F9204E          <2> 		cmp cx, 20000
  7452 00005C55 7603                <2> 		jbe nooriginy2
  7453 00005C57 6631C9              <2> 		xor cx, cx
  7454                              <2> 	nooriginy2:
  7455 00005C5A 6681FA0000          <2> 		cmp dx, 0
  7456 00005C5F 7415                <2> 		je nofixxcolumn2
  7457 00005C61 663B15[485B0000]    <2> 		cmp dx, [resolutionx2]
  7458 00005C68 720C                <2> 		jb nofixxcolumn2
  7459 00005C6A 668B15[485B0000]    <2> 		mov dx, [resolutionx2]
  7460 00005C71 6681EA0200          <2> 		sub dx, 2
  7461                              <2> 	nofixxcolumn2:
  7462 00005C76 6681F90000          <2> 		cmp cx, 0
  7463 00005C7B 7415                <2> 		je nofixyrow2
  7464 00005C7D 663B0D[5C5A0000]    <2> 		cmp cx, [resolutiony]
  7465 00005C84 720C                <2> 		jb nofixyrow2
  7466 00005C86 668B0D[5C5A0000]    <2> 		mov cx, [resolutiony]
  7467 00005C8D 6681E90100          <2> 		sub cx, 1
  7468                              <2> 	nofixyrow2:
  7469 00005C92 668915[3E5D0000]    <2> 		mov [mousecursorposition], dx
  7470 00005C99 66890D[405D0000]    <2> 		mov [mousecursorposition + 2], cx
  7471 00005CA0 803D[EF8E0000]00    <2> 		cmp byte [guion], 0
  7472 00005CA7 0F8495000000        <2> 		je near termmouse
  7473 00005CAD E8EC130000          <2> 		call switchmousepos ;use dragging code to ensure proper icon drag
  7474 00005CB2 803D[4F5E0000]01    <2> 		cmp byte [LBUTTON], 1
  7475 00005CB9 0F8427250000        <2> 		je near clickicon
  7476 00005CBF 803D[505E0000]01    <2> 		cmp byte [RBUTTON], 1
  7477 00005CC6 0F841A250000        <2> 		je near clickicon
  7478 00005CCC A0[D3810000]        <2> 		mov al, [pbutton]
  7479 00005CD1 C705[D6810000]0000- <2> 		mov dword [dragging], 0
  7480 00005CD9 0000                <2>
  7481 00005CDB 3C00                <2> 		cmp al, 0
  7482 00005CDD 740F                <2> 		je nopreviousbutton
  7483 00005CDF E862130000          <2> 		call clearmousecursor
  7484 00005CE4 E8C9160000          <2> 		call reloadallgraphics
  7485                              <2> 	windowtermcopyend:
  7486 00005CE9 E810140000          <2> 		call switchmousepos2
  7487                              <2> 	nopreviousbutton:
  7488 00005CEE 30C0                <2> 		xor al, al
  7489 00005CF0 A2[D3810000]        <2> 		mov [pbutton], al
  7490 00005CF5 A2[3A870000]        <2> 		mov [windrag], al
  7491 00005CFA A0[4F5E0000]        <2> 		mov al, [LBUTTON]
  7492 00005CFF A2[D4810000]        <2> 		mov [pLBUTTON], al
  7493 00005D04 A0[505E0000]        <2> 		mov al, [RBUTTON]
  7494 00005D09 A2[D5810000]        <2> 		mov [pRBUTTON], al
  7495 00005D0E 31D2                <2> 		xor edx, edx
  7496 00005D10 668B15[3E5D0000]    <2> 		mov dx, [mousecursorposition]
  7497 00005D17 668B0D[405D0000]    <2> 		mov cx, [mousecursorposition + 2]
  7498 00005D1E 66BB18C7            <2> 		mov bx, 1100011100011000b
  7499 00005D22 66B80100            <2> 		mov ax, 1
  7500 00005D26 C605[D0810000]01    <2> 		mov byte [showcursorfonton], 1
  7501 00005D2D E84A1D0000          <2> 		call showfontvesa
  7502 00005D32 C605[D0810000]00    <2> 		mov byte [showcursorfonton], 0
  7503 00005D39 C3                  <2> 		ret
  7504                              <2> 
  7505 00005D3A 00000000            <2> lastmouseposition dw 0,0
  7506 00005D3E 00000000            <2> mousecursorposition dw 0,0	
  7507                              <2> 
  7508                              <2> termmouse:
  7509 00005D42 BE[9ED50300]        <2> 		mov esi, videobuf
  7510 00005D47 31D2                <2> 		xor edx, edx
  7511 00005D49 668B15[3A5D0000]    <2> 		mov dx, [lastmouseposition]
  7512 00005D50 668B0D[3C5D0000]    <2> 		mov cx, [lastmouseposition + 2]
  7513 00005D57 66A1[D55D0000]      <2> 		mov ax, [cursorcache]
  7514 00005D5D 663D0000            <2> 		cmp ax, 0
  7515 00005D61 7425                <2> 		je nocopycursorcache
  7516 00005D63 66C1E104            <2> 		shl cx, 4
  7517 00005D67 66C1E203            <2> 		shl dx, 3
  7518 00005D6B 01D6                <2> 		add esi, edx
  7519 00005D6D 6631D2              <2> 		xor dx, dx
  7520 00005D70 8A15[DA250000]      <2> 		mov dl, [charxy]
  7521 00005D76 6641                <2> 		inc cx
  7522                              <2> termmousecplp1:
  7523 00005D78 01D6                <2> 		add esi, edx
  7524 00005D7A 6649                <2> 		dec cx
  7525 00005D7C 6681F90000          <2> 		cmp cx, 0
  7526 00005D81 75F5                <2> 		jne termmousecplp1
  7527 00005D83 29D6                <2> 		sub esi, edx
  7528 00005D85 668906              <2> 		mov [esi], ax
  7529                              <2> nocopycursorcache:
  7530 00005D88 BE[9ED50300]        <2> 		mov esi, videobuf
  7531 00005D8D 31D2                <2> 		xor edx, edx
  7532 00005D8F 668B15[3E5D0000]    <2> 		mov dx, [mousecursorposition]
  7533 00005D96 668B0D[405D0000]    <2> 		mov cx, [mousecursorposition + 2]
  7534 00005D9D 66C1E104            <2> 		shl cx, 4
  7535 00005DA1 66C1E203            <2> 		shl dx, 3
  7536 00005DA5 01D6                <2> 		add esi, edx
  7537 00005DA7 6631D2              <2> 		xor dx, dx
  7538 00005DAA 8A15[DA250000]      <2> 		mov dl, [charxy]
  7539 00005DB0 6641                <2> 		inc cx
  7540                              <2> termmousecplp2:
  7541 00005DB2 01D6                <2> 		add esi, edx
  7542 00005DB4 6649                <2> 		dec cx
  7543 00005DB6 6681F90000          <2> 		cmp cx, 0
  7544 00005DBB 75F5                <2> 		jne termmousecplp2
  7545 00005DBD 29D6                <2> 		sub esi, edx
  7546 00005DBF 668B06              <2> 		mov ax, [esi]
  7547 00005DC2 66A3[D55D0000]      <2> 		mov [cursorcache], ax
  7548 00005DC8 B080                <2> 		mov al, 128
  7549 00005DCA B407                <2> 		mov ah, 7
  7550 00005DCC 668906              <2> 		mov [esi], ax
  7551 00005DCF E8DECAFFFF          <2> 		call termcopy
  7552 00005DD4 C3                  <2> 		ret
  7553 00005DD5 0000                <2> cursorcache db 0,0
  7554                              <2> 
  7555                              <2> PS2SET:
  7556 00005DD7 B0A8                <2>   mov  al, 0xa8		; enable mouse port
  7557 00005DD9 E664                <2>   out  0x64, al		; write to keyboardcontroller
  7558 00005DDB E801000000          <2>   call CHKPRT		; check if command is progressed (demand!)
  7559 00005DE0 C3                  <2> ret
  7560                              <2> 
  7561                              <2> CHKPRT:
  7562 00005DE1 66B96400            <2>   mov  cx, 100
  7563                              <2>  .again:
  7564 00005DE5 E464                <2>   in   al, 0x64		; read from keyboardcontroller
  7565 00005DE7 A802                <2>   test al, 2		; Check if input buffer is empty
  7566 00005DE9 7402                <2>   je .go
  7567 00005DEB E2F8                <2>   loop .again
  7568                              <2>  .go:
  7569 00005DED C3                  <2> ret
  7570                              <2> 
  7571                              <2> WMOUS:
  7572 00005DEE B0D4                <2>   mov  al, 0xd4		; write to mouse device instead of to keyboard
  7573 00005DF0 E664                <2>   out  0x64, al		; write to keyboardcontroller
  7574 00005DF2 E8EAFFFFFF          <2>   call CHKPRT		; check if command is progressed (demand!)
  7575 00005DF7 C3                  <2> ret
  7576                              <2> 
  7577                              <2> MBUFFUL:
  7578 00005DF8 66B96400            <2>   mov cx, 100
  7579                              <2>  .mn:
  7580 00005DFC E464                <2>   in   al, 0x64		; read from keyboardcontroller
  7581 00005DFE A820                <2>   test al, 0x20		; check if mouse output buffer is full
  7582 00005E00 7402                <2>   jz  .mnn
  7583 00005E02 E2F8                <2>   loop .mn
  7584                              <2>  .mnn:
  7585 00005E04 C3                  <2> ret
  7586                              <2> 
  7587                              <2> 
  7588                              <2> ACTMOUS:
  7589 00005E05 E8E4FFFFFF          <2>   call WMOUS
  7590 00005E0A B0F4                <2>   mov  al, 0xf4 	; Command to activate mouse itselve (Stream mode)
  7591 00005E0C E660                <2>   out  0x60, al		; write ps/2 controller output port (activate mouse)
  7592 00005E0E E8CEFFFFFF          <2>   call CHKPRT		; check if command is progressed (demand!)
  7593 00005E13 E801000000          <2>   call CHKMOUS		; check if a byte is available
  7594 00005E18 C3                  <2> ret
  7595                              <2> 
  7596                              <2> CHKMOUS:
  7597 00005E19 B300                <2>   mov  bl, 0
  7598 00005E1B 66B96400            <2>   mov cx, 100
  7599                              <2>  .vrd:
  7600 00005E1F E464                <2>   in   al, 0x64		; read from keyboardcontroller
  7601 00005E21 A801                <2>   test al, 1		; check if controller buffer (60h) has data
  7602 00005E23 7504                <2>   jnz .yy
  7603 00005E25 E2F8                <2>   loop .vrd
  7604 00005E27 B301                <2>   mov  bl, 1
  7605                              <2>  .yy:
  7606 00005E29 C3                  <2> ret
  7607                              <2> 
  7608                              <2> GETB:
  7609                              <2>  .cagain:
  7610 00005E2A E8EAFFFFFF          <2>   call CHKMOUS		; check if a byte is available
  7611 00005E2F 08DB                <2>   or bl, bl
  7612 00005E31 75F7                <2>   jnz .cagain
  7613 00005E33 B0AD                <2>   mov  al, 0xad		; Disable Keyboard
  7614 00005E35 E664                <2>   out  0x64, al		; write to keyboardcontroller
  7615 00005E37 E8A5FFFFFF          <2>   call CHKPRT		; check if command is progressed (demand!)
  7616 00005E3C 6631C0              <2>   xor  ax, ax
  7617 00005E3F E460                <2>   in   al, 0x60		; read ps/2 controller output port (mousebyte)
  7618 00005E41 88C2                <2>   mov  dl, al
  7619 00005E43 B0AE                <2>   mov  al, 0xae		; Enable Keyboard
  7620 00005E45 E664                <2>   out  0x64, al		; write to keyboardcontroller
  7621 00005E47 E895FFFFFF          <2>   call CHKPRT		; check if command is progressed (demand!)
  7622 00005E4C 88D0                <2>   mov  al, dl
  7623 00005E4E C3                  <2> ret
  7624                              <2> 
  7625 00005E4F 00                  <2> LBUTTON db 0x00	;	Left   button status 1=PRESSED 0=RELEASED
  7626 00005E50 00                  <2> RBUTTON db 0x00	;	Right  button status 1=PRESSED 0=RELEASED
  7627 00005E51 00                  <2> MBUTTON db 0x00	;	Middle button status 1=PRESSED 0=RELEASED
  7628 00005E52 00                  <2> XCOORD  db 0x00	;	the moved distance  (horizontal)
  7629 00005E53 00                  <2> YCOORD  db 0x00	;	the moved distance  (vertical)
  7630                              <1> %endif
  7631                              <1> %include "source/drivers/sound/pcspkr.asm"
  7632                              <2> ;PC Speaker Drivers
  7633                              <2> PCSpeakerRAW:
  7634 00005E54 60                  <2> 	pusha
  7635                              <2> nosoundrep:
  7636 00005E55 8B35[72020000]      <2> 	mov esi, [soundpos]
  7637 00005E5B 31C9                <2> 	xor ecx, ecx
  7638 00005E5D 668B0D[70020000]    <2> 	mov cx, [soundrepititions]
  7639 00005E64 6681F90000          <2> 	cmp cx, 0
  7640 00005E69 0F8548000000        <2> 	jne near donesetpitch
  7641 00005E6F 668B0E              <2> 	mov cx, [esi]
  7642 00005E72 668B5E02            <2> 	mov bx, [esi + 2]
  7643 00005E76 66890D[70020000]    <2> 	mov [soundrepititions], cx
  7644 00005E7D 81C604000000        <2> 	add esi, 4
  7645 00005E83 8935[72020000]      <2> 	mov [soundpos], esi
  7646 00005E89 3B35[76020000]      <2> 	cmp esi, [soundendpos]
  7647 00005E8F 7735                <2> 	ja stopsound
  7648 00005E91 66813D[70020000]00- <2> 	cmp word [soundrepititions], 0
  7649 00005E99 00                  <2>
  7650 00005E9A 74B9                <2> 	je nosoundrep
  7651 00005E9C 6681FB0000          <2> 	cmp bx, 0
  7652 00005EA1 740F                <2> 	je nosoundplay
  7653 00005EA3 E840000000          <2> 	call setpitch
  7654 00005EA8 E849000000          <2> 	call startsound
  7655 00005EAD E905000000          <2> 	jmp donesetpitch
  7656                              <2> nosoundplay:
  7657 00005EB2 E846000000          <2> 	call killsound
  7658                              <2> donesetpitch:
  7659 00005EB7 6649                <2> 	dec cx
  7660 00005EB9 66890D[70020000]    <2> 	mov [soundrepititions], cx
  7661 00005EC0 61                  <2> 	popa
  7662 00005EC1 E9E8A3FFFF          <2> 	jmp timerinterrupt
  7663                              <2> stopsound:
  7664 00005EC6 31C0                <2> 	xor eax, eax
  7665 00005EC8 66A3[70020000]      <2> 	mov [soundrepititions], ax
  7666 00005ECE A2[6F020000]        <2> 	mov [soundon], al
  7667 00005ED3 A3[72020000]        <2> 	mov [soundpos], eax
  7668 00005ED8 A3[76020000]        <2> 	mov [soundendpos], eax
  7669 00005EDD E81B000000          <2> 	call killsound
  7670 00005EE2 61                  <2> 	popa
  7671 00005EE3 E9C6A3FFFF          <2> 	jmp timerinterrupt
  7672                              <2> 
  7673                              <2> 
  7674                              <2> setpitch:
  7675 00005EE8 B0B6                <2> 	mov al, 0xB6
  7676 00005EEA E643                <2> 	out 0x43, al
  7677 00005EEC 6689D8              <2> 	mov ax, bx
  7678 00005EEF E642                <2> 	out 0x42, al
  7679 00005EF1 88E0                <2> 	mov al, ah
  7680 00005EF3 E642                <2> 	out 0x42, al
  7681 00005EF5 C3                  <2> 	ret
  7682                              <2> startsound:
  7683 00005EF6 E461                <2> 	in al, 0x61
  7684 00005EF8 0C03                <2> 	or al, 3
  7685 00005EFA E661                <2> 	out 0x61, al
  7686 00005EFC C3                  <2> 	ret
  7687                              <2> killsound:
  7688 00005EFD E461                <2> 	in al, 0x61
  7689 00005EFF 24FC                <2> 	and al, 0xFC
  7690 00005F01 E661                <2> 	out 0x61, al
  7691 00005F03 C3                  <2> 	ret
  7692                              <2> 	
  7693                              <1> %ifdef sound.included
  7694                              <1> 	%include "source/drivers/sound/sblaster.asm"
  7695                              <2> ;Sound Blaster Drivers
  7696                              <2> sblaster:
  7697                              <2> .init:
  7698 00005F04 E8E1010000          <2> 		call ResetDSP			;If the system is Sound Blaster 16 compatible, reset the DSP
  7699 00005F09 A2[44610000]        <2> 		mov [SoundBlaster], al	;if the reset worked, show an available card
  7700 00005F0E 3C00                <2> 		cmp al, 0
  7701 00005F10 7418                <2> 		je .noinit
  7702 00005F12 B0D1                <2> 		mov	al,0D1h 		; turn speaker(s) on
  7703 00005F14 E805020000          <2> 		call WriteDSP
  7704 00005F19 B088                <2> 		mov	al,088h 		; Left = 8, Right = 8 (15-highest)
  7705 00005F1B E8BB010000          <2> 		call MstrVol 		; L = Hi Nibble, R = Lo Nibble
  7706 00005F20 BE[2B5F0000]        <2> 		mov esi, .initmsg
  7707 00005F25 E832BEFFFF          <2> 		call print
  7708                              <2> .noinit:
  7709 00005F2A C3                  <2> 		ret
  7710 00005F2B 5342313620496E6974- <2> .initmsg db "SB16 Initialized.",10,0
  7711 00005F34 69616C697A65642E0A- <2>
  7712 00005F3D 00                  <2>
  7713                              <2> sblaster.cont: ;this function goes to the next available portion of a sound, if necessary
  7714 00005F3E 813D[2F610000]0000- <2> 	cmp dword [Length0], 0
  7715 00005F46 0000                <2>
  7716 00005F48 0F8462000000        <2> 	je near .done
  7717 00005F4E FF0D[2F610000]      <2> 	dec dword [Length0]
  7718 00005F54 E908000000          <2> 	jmp .notodd
  7719                              <2> .oddlength:
  7720 00005F59 31C9                <2> 	xor ecx, ecx
  7721 00005F5B 880D[2E610000]      <2> 	mov [OddLength], cl
  7722                              <2> .notodd:
  7723 00005F61 8B35[35610000]      <2> 	mov esi, [NextMemLoc]
  7724 00005F67 31C9                <2> 	xor ecx, ecx
  7725 00005F69 668B0D[33610000]    <2> 	mov cx, [Length1]
  7726 00005F70 D1E9                <2> 	shr ecx, 1
  7727 00005F72 6641                <2> 	inc cx
  7728 00005F74 31DB                <2> 	xor ebx, ebx
  7729 00005F76 668B1D[3D610000]    <2> 	mov bx, [SegLoc]
  7730 00005F7D 6601CB              <2> 	add bx, cx
  7731 00005F80 66891D[3D610000]    <2> 	mov [SegLoc], bx
  7732 00005F87 81C300000800        <2> 	add ebx, 0x80000 ;linear address of sb buffer
  7733 00005F8D 8935[39610000]      <2> 	mov [MemLoc], esi
  7734 00005F93 89C8                <2> 	mov eax, ecx
  7735 00005F95 01F0                <2> 	add eax, esi
  7736 00005F97 A3[35610000]        <2> 	mov [NextMemLoc], eax
  7737 00005F9C E833000000          <2> 	call DMACopy
  7738                              <2> 	;call DMAPlay
  7739 00005FA1 E8E0000000          <2> 	call PlayDSP
  7740 00005FA6 66BA2E02            <2> 	mov dx, (BasePort+0xE)
  7741 00005FAA EC                  <2> 	in al, dx ;acknowledge the interrupt 
  7742 00005FAB E9BCA3FFFF          <2> 	jmp handled2 ;it is part of an interrupt routine
  7743                              <2> .done:
  7744 00005FB0 803D[2E610000]01    <2> 	cmp byte [OddLength], 1
  7745 00005FB7 74A0                <2> 	je .oddlength
  7746 00005FB9 31C0                <2> 	xor eax, eax
  7747 00005FBB 66A3[33610000]      <2> 	mov [Length1], ax
  7748 00005FC1 66B8D000            <2> 	mov ax, 0xD0
  7749 00005FC5 E854010000          <2> 	call WriteDSP
  7750 00005FCA 66BA2E02            <2> 	mov dx, (BasePort+0xE)
  7751 00005FCE EC                  <2> 	in al, dx ;acknowledge the interrupt 
  7752 00005FCF E998A3FFFF          <2> 	jmp handled2
  7753                              <2> 	
  7754                              <2> DMACopy:
  7755 00005FD4 66B80800            <2> 		mov ax, LINEAR_SEL
  7756 00005FD8 8EE0                <2> 		mov fs, ax
  7757 00005FDA C1E902              <2> 		shr ecx, 2
  7758                              <2> .loop:
  7759 00005FDD 8B06                <2> 		mov eax, [esi]
  7760 00005FDF 648903              <2> 		mov [fs:ebx], eax
  7761 00005FE2 81C604000000        <2> 		add esi, 4
  7762 00005FE8 81C304000000        <2> 		add ebx, 4
  7763 00005FEE E2ED                <2> 		loop .loop
  7764 00005FF0 66B83000            <2> 		mov ax, NEW_DATA_SEL
  7765 00005FF4 8EE0                <2> 		mov fs, ax
  7766 00005FF6 C3                  <2> 		ret
  7767                              <2> 		
  7768                              <2> 
  7769                              <2> DMAPlay:    ;uses eax ebx edx
  7770 00005FF7 C605[3F610000]00    <2> 		mov	byte [Page1],00h
  7771                              <2> 
  7772 00005FFE B005                <2> 		mov	al,(Channel+4)
  7773 00006000 66BA0A00            <2> 		mov	dx,0Ah
  7774 00006004 EE                  <2> 		out	dx,al
  7775 00006005 30C0                <2> 		xor	al,al
  7776 00006007 66BA0C00            <2> 		mov	dx,0Ch
  7777 0000600B EE                  <2> 		out	dx,al
  7778 0000600C B059                <2> 		mov	al,ModeReg
  7779 0000600E 66BA0B00            <2> 		mov	dx,0Bh
  7780 00006012 EE                  <2> 		out	dx,al
  7781 00006013 B800000800          <2> 		mov	eax,0x80000
  7782 00006018 66BA0200            <2> 		mov	dx,AddPort
  7783 0000601C EE                  <2> 		out	dx,al
  7784 0000601D 86C4                <2> 		xchg al,ah
  7785 0000601F EE                  <2> 		out	dx,al
  7786 00006020 B800000800          <2> 		mov	eax,0x80000
  7787 00006025 89C2                <2> 		mov	edx,eax
  7788 00006027 2500000100          <2> 		and	eax,65536
  7789 0000602C 7406                <2> 		jz	MemLocN1
  7790 0000602E FE05[3F610000]      <2> 		inc	byte [Page1]
  7791                              <2> MemLocN1:
  7792 00006034 89D0                <2> 		mov	eax,edx
  7793 00006036 2500000200          <2> 		and	eax,131072
  7794 0000603B 7407                <2> 		jz	MemLocN2
  7795 0000603D 8005[3F610000]02    <2> 		add	byte [Page1],02
  7796                              <2> MemLocN2:
  7797 00006044 89D0                <2> 		mov	eax,edx
  7798 00006046 2500000400          <2> 		and	eax,262144
  7799 0000604B 7407                <2> 		jz	MemLocN3
  7800 0000604D 8005[3F610000]04    <2> 		add	byte [Page1],04
  7801                              <2> MemLocN3:
  7802 00006054 89D0                <2> 		mov	eax,edx
  7803 00006056 2500000800          <2> 		and	eax,524288
  7804 0000605B 7407                <2> 		jz	MemLocN4
  7805 0000605D 8005[3F610000]08    <2> 		add	byte [Page1],08
  7806                              <2> MemLocN4:
  7807 00006064 66BA8300            <2> 		mov	dx,PgPort
  7808 00006068 A0[3F610000]        <2> 		mov	al,[Page1]
  7809 0000606D EE                  <2> 		out	dx,al
  7810 0000606E 66BA0300            <2> 		mov	dx,LenPort
  7811 00006072 66A1[33610000]      <2> 		mov	ax,[Length1]
  7812 00006078 6648                <2> 		dec ax
  7813 0000607A EE                  <2> 		out	dx,al
  7814 0000607B 86C4                <2> 		xchg al,ah
  7815 0000607D EE                  <2> 		out	dx,al
  7816 0000607E 66BA0A00            <2> 		mov	dx,0Ah
  7817 00006082 B001                <2> 		mov	al,Channel
  7818 00006084 EE                  <2> 		out	dx,al
  7819 00006085 C3                  <2> 		ret
  7820                              <2> 		
  7821                              <2> PlayDSP:
  7822 00006086 B040                <2> 		mov	al,40h
  7823 00006088 E891000000          <2> 		call WriteDSP
  7824 0000608D 31D2                <2> 		xor	edx,edx
  7825 0000608F B840420F00          <2> 		mov	eax,1000000
  7826 00006094 8B1D[40610000]      <2> 		mov	ebx,[Freq]
  7827 0000609A 803D[2D610000]00    <2> 		cmp byte [Stereo], 0
  7828 000060A1 7402                <2> 		je .nost
  7829 000060A3 D1E3                <2> 		shl ebx, 1
  7830                              <2> .nost:
  7831 000060A5 F7F3                <2> 		div	ebx
  7832 000060A7 89C3                <2> 		mov	ebx,eax
  7833 000060A9 B800010000          <2> 		mov	eax,256
  7834 000060AE 29D8                <2> 		sub	eax,ebx
  7835 000060B0 E869000000          <2> 		call WriteDSP
  7836 000060B5 B014                <2> 		mov	al,14h	;write the mode
  7837 000060B7 803D[2D610000]00    <2> 		cmp byte [Stereo], 0
  7838 000060BE 7400                <2> 		je .nost2
  7839                              <2> 		
  7840                              <2> .nost2:
  7841 000060C0 E859000000          <2> 		call WriteDSP
  7842 000060C5 66A1[33610000]      <2> 		mov	ax,[Length1]
  7843 000060CB 66D1E8              <2> 		shr ax, 1
  7844 000060CE E84B000000          <2> 		call WriteDSP
  7845 000060D3 86C4                <2> 		xchg al,ah
  7846 000060D5 E844000000          <2> 		call WriteDSP
  7847 000060DA C3                  <2> 		ret
  7848                              <2> 
  7849                              <2> MstrVol:    ;uses ax dx
  7850 000060DB 6650                <2> 	   push ax
  7851 000060DD 66BA2402            <2> 	   mov	dx,(BasePort+4)
  7852 000060E1 B022                <2> 	   mov	al,22h
  7853 000060E3 EE                  <2> 	   out	dx,al
  7854 000060E4 6658                <2> 	   pop	ax
  7855 000060E6 6642                <2> 	   inc	dx
  7856 000060E8 EE                  <2> 	   out	dx,al
  7857 000060E9 C3                  <2> 	   ret
  7858                              <2> 	   
  7859                              <2> ResetDSP:   ; uses cx dx
  7860 000060EA 66BA2602            <2> 			mov	dx,(BasePort+6)
  7861 000060EE B001                <2> 			mov	al,01
  7862 000060F0 EE                  <2> 			out	dx,al
  7863 000060F1 66B93200            <2> 			mov	cx,50
  7864 000060F5 EC                  <2> WaitIt1:	in	al,dx
  7865 000060F6 E2FD                <2> 			loop WaitIt1
  7866 000060F8 30C0                <2> 			xor	al,al
  7867 000060FA EE                  <2> 			out	dx,al
  7868 000060FB 66B93200            <2> 			mov	cx,50
  7869 000060FF EC                  <2> WaitIt2:	in	al,dx
  7870 00006100 E2FD                <2> 			loop WaitIt2
  7871 00006102 B4FF                <2> 			mov	ah,0FFh 		; part of Return Code
  7872 00006104 66BA2E02            <2> 			mov	dx,(BasePort+14)
  7873 00006108 EC                  <2> 			in	al,dx
  7874 00006109 2480                <2> 			and	al,80h
  7875 0000610B 3C80                <2> 			cmp	al,80h
  7876 0000610D 750C                <2> 			jne	ResetErr
  7877 0000610F 66BA2A02            <2> 			mov	dx,(BasePort+10)
  7878 00006113 EC                  <2> 			in	al,dx
  7879 00006114 3CAA                <2> 			cmp	al,0AAh
  7880 00006116 7503                <2> 			jne	ResetErr
  7881 00006118 B001                <2> ResetOK:	mov al, 1		; return ax = 0 if reset ok
  7882 0000611A C3                  <2> 			ret
  7883 0000611B 30C0                <2> ResetErr:	xor al, al
  7884 0000611D C3                  <2> 			ret
  7885                              <2> 
  7886                              <2> WriteDSP:   ;uses ax dx
  7887 0000611E 6650                <2> 		push ax
  7888 00006120 66BA2C02            <2> 		mov	dx,(BasePort+12)
  7889 00006124 EC                  <2> WaitIt:	in	al,dx
  7890 00006125 2480                <2> 		and	al,80h
  7891 00006127 75FB                <2> 		jnz	WaitIt
  7892 00006129 6658                <2> 		pop	ax
  7893 0000612B EE                  <2> 		out	dx,al
  7894 0000612C C3                  <2> 		ret
  7895                              <2> 
  7896 0000612D 00                  <2> Stereo db 0
  7897 0000612E 00                  <2> OddLength db 0
  7898 0000612F 00000000            <2> Length0 dd	0
  7899 00006133 0000                <2> Length1	dw  0
  7900 00006135 00000000            <2> NextMemLoc dd 0
  7901 00006139 00000000            <2> MemLoc	dd  0
  7902 0000613D 0000                <2> SegLoc  dw 0
  7903 0000613F 00                  <2> Page1	db  0
  7904 00006140 00000000            <2> Freq	dd	0
  7905                              <2> PgPort	equ 83h
  7906                              <2> AddPort	equ 02h
  7907                              <2> LenPort	equ 03h
  7908                              <2> ModeReg	equ 59h
  7909                              <2> Channel	equ 01h
  7910                              <2> BasePort	equ 220h
  7911 00006144 00                  <2> SoundBlaster	db 0
  7912                              <1> %endif
  7913                              <1> %ifdef io.serial
  7914                              <1> 	%include "source/drivers/input/serial.asm"
  7915                              <1> %else
  7916                              <1> 	%include "source/drivers/input/keyboard.asm"
  7917 00006145 00                  <2> specialkey db 0
  7918                              <2> ;charregion db 0
  7919                              <2> waitforinput:		;this is basically the idle process
  7920                              <2> 					;this halts the cpu for a small amount of time and then sees if there was a keypress
  7921                              <2> 					;this lets the cpu stay at close to 0% instead of 100%
  7922 00006146 6631C0              <2> 	xor ax, ax
  7923 00006149 A0[C86C0000]        <2> 	mov al, [threadson]
  7924 0000614E 8825[C86C0000]      <2> 	mov [threadson], ah
  7925 00006154 FB                  <2> 	sti
  7926 00006155 F4                  <2> 	hlt
  7927 00006156 A2[C86C0000]        <2> 	mov [threadson], al
  7928 0000615B 66813D[B8230000]00- <2> 	cmp word [trans], 0
  7929 00006163 00                  <2>
  7930 00006164 7401                <2> 	je getkey
  7931 00006166 C3                  <2> 	ret
  7932                              <2> getkey:
  7933 00006167 31C0                <2> 		xor eax, eax
  7934 00006169 A2[45610000]        <2> 		mov [specialkey], al
  7935 0000616E A3[B4230000]        <2> 		mov [lastkey], eax
  7936 00006173 E464                <2> 		in al, 64h ; Status
  7937                              <2> 	%ifdef gui.included
  7938 00006175 A820                <2> 		test al, 20h ; PS2-Mouse?
  7939 00006177 0F8524FAFFFF        <2> 		jnz near moused
  7940                              <2> 	%endif
  7941 0000617D A801                <2> 		test al, 1 
  7942 0000617F 74C5                <2> 		jz waitforinput ; if output buffer full or no keypress, jump to idle process
  7943                              <2> 	calckey:
  7944 00006181 E460                <2> 		in al, 60h
  7945 00006183 30E4                <2> 		xor ah, ah
  7946 00006185 6689C3              <2> 		mov bx, ax
  7947 00006188 66A3[B6230000]      <2> 		mov [lastkey + 2], ax
  7948 0000618E BF[1D630000]        <2> 		mov edi, scancode
  7949                              <2> 	searchscan: 
  7950 00006193 80FB3A              <2> 		cmp bl, 3Ah
  7951 00006196 7314                <2> 		jae scanother
  7952 00006198 C1E004              <2> 		shl eax, 4
  7953 0000619B 01C7                <2> 		add edi, eax
  7954 0000619D 668B07              <2> 		mov ax, [edi]
  7955 000061A0 663D0000            <2> 		cmp ax, 0
  7956 000061A4 7406                <2> 		je scanother
  7957 000061A6 E9D0000000          <2> 		jmp scanfound
  7958 000061AB 00                  <2> uppercase db 0
  7959                              <2> scanother:
  7960 000061AC 6631C0              <2> 		xor ax, ax
  7961 000061AF 66A3[B4230000]      <2> 		mov [lastkey], ax
  7962 000061B5 80FBE0              <2> 		cmp bl, 0E0h
  7963 000061B8 0F8477000000        <2> 		je near getkeyspecial
  7964 000061BE 803D[45610000]E0    <2> 		cmp byte [specialkey], 0xE0
  7965 000061C5 7525                <2> 		jne nospecialkey
  7966 000061C7 80FB38              <2> 		cmp bl, 38h
  7967 000061CA 0F849A000000        <2> 		je near alton
  7968 000061D0 80FBB8              <2> 		cmp bl, 0B8h
  7969 000061D3 0F8499000000        <2> 		je near altoff
  7970 000061D9 80FB1D              <2> 		cmp bl, 1Dh
  7971 000061DC 0F8478000000        <2> 		je near ctron
  7972 000061E2 80FB9D              <2> 		cmp bl, 9Dh
  7973 000061E5 0F8477000000        <2> 		je near ctroff
  7974 000061EB C3                  <2> 		ret
  7975                              <2> nospecialkey:
  7976 000061EC 80FB2A              <2> 		cmp bl, 2Ah
  7977 000061EF 0F8455000000        <2> 		je near shifton
  7978 000061F5 80FB36              <2> 		cmp bl, 36h
  7979 000061F8 0F844C000000        <2> 		je near shifton
  7980 000061FE 80FB1C              <2> 		cmp bl, 1Ch
  7981 00006201 0F8473000000        <2> 		je near entdown
  7982 00006207 80FBAA              <2> 		cmp bl, 0AAh
  7983 0000620A 0F8442000000        <2> 		je near shiftoff
  7984 00006210 80FBB6              <2> 		cmp bl, 0B6h
  7985 00006213 0F8439000000        <2> 		je near shiftoff
  7986 00006219 80FB3A              <2> 		cmp bl, 3Ah
  7987 0000621C 0F84A7000000        <2> 		je near capslock
  7988 00006222 80FB45              <2> 		cmp bl, 0x45
  7989 00006225 0F84AF000000        <2> 		je near numlock
  7990 0000622B 80FB46              <2> 		cmp bl, 0x46
  7991 0000622E 0F84BE000000        <2> 		je near scrolllock
  7992 00006234 C3                  <2> 		ret
  7993                              <2> 	getkeyspecial:
  7994 00006235 C605[45610000]E0    <2> 		mov byte [specialkey], 0xE0
  7995 0000623C E940FFFFFF          <2> 		jmp calckey
  7996                              <2> 	shift:
  7997 00006241 A0[AB610000]        <2> 		mov al, [uppercase]
  7998 00006246 3C01                <2> 		cmp al, 1
  7999 00006248 7308                <2> 		jae shiftoff
  8000                              <2> 	shifton:
  8001 0000624A C605[AB610000]01    <2> 		mov byte [uppercase], 1
  8002 00006251 C3                  <2> 		ret
  8003                              <2> 	shiftoff:
  8004 00006252 C605[AB610000]00    <2> 		mov byte [uppercase], 0
  8005 00006259 C3                  <2> 		ret
  8006                              <2> 	ctron:
  8007 0000625A C605[C8620000]01    <2> 		mov byte [ctrkey], 1
  8008 00006261 C3                  <2> 		ret
  8009                              <2> 	ctroff:
  8010 00006262 C605[C8620000]00    <2> 		mov byte [ctrkey], 0
  8011 00006269 C3                  <2> 		ret
  8012                              <2> 	alton:
  8013 0000626A C605[C7620000]01    <2> 		mov byte [altkey], 1
  8014 00006271 C3                  <2> 		ret
  8015                              <2> 	altoff:
  8016 00006272 C605[C7620000]00    <2> 		mov byte [altkey], 0
  8017 00006279 C3                  <2> 		ret
  8018                              <2> 	entdown:
  8019 0000627A C3                  <2> 		ret
  8020                              <2> scanfound:
  8021 0000627B 81C708000000        <2> 		add edi, 8
  8022 00006281 803D[C8620000]01    <2> 		cmp byte [ctrkey], 1
  8023 00006288 7306                <2> 		jae ctrlin
  8024 0000628A 81EF08000000        <2> 		sub edi, 8
  8025                              <2> 	ctrlin:
  8026 00006290 81C704000000        <2> 		add edi, 4
  8027 00006296 803D[C7620000]01    <2> 		cmp byte [altkey], 1
  8028 0000629D 7306                <2> 		jae altin
  8029 0000629F 81EF04000000        <2> 		sub edi, 4
  8030                              <2> 	altin:
  8031 000062A5 81C702000000        <2> 		add edi, 2
  8032 000062AB 803D[AB610000]01    <2> 		cmp byte [uppercase], 1
  8033 000062B2 7306                <2> 		jae uppercaseon
  8034 000062B4 81EF02000000        <2> 		sub edi, 2
  8035                              <2> 	uppercaseon:
  8036 000062BA 668B07              <2> 		mov ax,[edi]
  8037 000062BD 66A3[B4230000]      <2> 		mov [lastkey], ax
  8038 000062C3 C3                  <2> 		ret
  8039                              <2> 		
  8040 000062C4 00                  <2> keyboardstatus db 0
  8041 000062C5 00                  <2> numlockstatus db 0
  8042 000062C6 00                  <2> scrolllockstatus db 0
  8043 000062C7 00                  <2> altkey db 0
  8044 000062C8 00                  <2> ctrkey db 0
  8045                              <2> 	capslock:
  8046 000062C9 8035[C4620000]04    <2> 		xor byte [keyboardstatus], 00000100b
  8047 000062D0 E835000000          <2> 		call updatekblights
  8048 000062D5 E967FFFFFF          <2> 		jmp shift
  8049                              <2> 		
  8050                              <2> 	numlock:
  8051 000062DA 8035[C4620000]02    <2> 		xor byte [keyboardstatus], 00000010b
  8052 000062E1 8035[C5620000]01    <2> 		xor byte [numlockstatus], 1
  8053 000062E8 E81D000000          <2> 		call updatekblights
  8054 000062ED E975FEFFFF          <2> 		jmp getkey
  8055                              <2> 	
  8056                              <2> 	scrolllock:
  8057 000062F2 8035[C4620000]01    <2> 		xor byte [keyboardstatus], 00000001b
  8058 000062F9 8035[C6620000]01    <2> 		xor byte [scrolllockstatus], 1
  8059 00006300 E805000000          <2> 		call updatekblights
  8060 00006305 E95DFEFFFF          <2> 		jmp getkey
  8061                              <2> 		
  8062                              <2> 	updatekblights:
  8063 0000630A B0ED                <2> 		mov al, 0xED
  8064 0000630C 66BA6000            <2> 		mov dx, 0x60
  8065 00006310 EE                  <2> 		out dx, al
  8066                              <2> 	chkkbdack:
  8067 00006311 EC                  <2> 		in al, dx
  8068 00006312 3CFA                <2> 		cmp al, 0xFA
  8069 00006314 75FB                <2> 		jne chkkbdack
  8070 00006316 A0[C4620000]        <2> 		mov al, [keyboardstatus]
  8071 0000631B EE                  <2> 		out dx, al
  8072 0000631C C3                  <2> 		ret
  8073                              <2> 		
  8074                              <2> scancode:
  8075                              <2> 	;key, KEY, alt key, ALT KEY, ctrl key, CTRL KEY, ctrl-alt, CTRL-ALT
  8076 0000631D 000000000000000000- <2> 	dw 0,0,0,0,0,0,0,0
  8077 00006326 00000000000000      <2>
  8078 0000632D 000000000000000000- <2> 	dw 0,0,0,0,0,0,0,0
  8079 00006336 00000000000000      <2>
  8080 0000633D 31002100A1003C2000- <2> 	dw '1','!',0xA1,0x203C,0,0,0,0
  8081 00006346 00000000000000      <2>
  8082 0000634D 32004000B2001A2200- <2> 	dw '2','@',0xB2,0x221A,0,0,0,0
  8083 00006356 00000000000000      <2>
  8084 0000635D 33002300B3002B2200- <2> 	dw '3','#',0xB3,0x222B,0,0,0,0
  8085 00006366 00000000000000      <2>
  8086 0000636D 34002400A300A20000- <2> 	dw '4','$',0xA3,0xA2,0,0,0,0
  8087 00006376 00000000000000      <2>
  8088 0000637D 35002500AC20000000- <2> 	dw '5','%',0x20AC,0,0,0,0,0
  8089 00006386 00000000000000      <2>
  8090 0000638D 36005E00BC007F2000- <2> 	dw '6','^',0xBC,0x207F,0,0,0,0
  8091 00006396 00000000000000      <2>
  8092 0000639D 37002600BD00000000- <2> 	dw '7','&',0xBD,0,0,0,0,0
  8093 000063A6 00000000000000      <2>
  8094 000063AD 38002A001E22950000- <2> 	dw '8','*',0x221E,0x95,0,0,0,0
  8095 000063B6 00000000000000      <2>
  8096 000063BD 39002800AE00990000- <2> 	dw '9','(',0xAE,0x99,0,0,0,0
  8097 000063C6 00000000000000      <2>
  8098 000063CD 30002900A900000000- <2> 	dw '0',')',0xA9,0,0,0,0,0
  8099 000063D6 00000000000000      <2>
  8100 000063DD 2D005F00A500B10000- <2> 	dw '-','_',0xA5,0xB1,0,0,0,0
  8101 000063E6 00000000000000      <2>
  8102 000063ED 3D002B00F700482200- <2> 	dw '=','+',0xF7,0x2248,0,0,0,0
  8103 000063F6 00000000000000      <2>
  8104 000063FD 080008000000000000- <2> 	dw 8,8,0,0,0,0,0,0
  8105 00006406 00000000000000      <2>
  8106 0000640D 000000000000000000- <2> 	dw 0,0,0,0,0,0,0,0
  8107 00006416 00000000000000      <2>
  8108 0000641D 71005100E400C4003B- <2> 	dw 'q','Q',0xE4,0xC4,';',':',0x439,0x419
  8109 00006425 003A0039041904      <2>
  8110 0000642D 77005700E500C500C2- <2> 	dw 'w','W',0xE5,0xC5,0x3C2,0,0x446,0x426
  8111 00006436 03000046042604      <2>
  8112 0000643D 65004500E900C900B5- <2> 	dw 'e','E',0xE9,0xC9,0x3B5,0x395,0x443,0x423
  8113 00006446 03950343042304      <2>
  8114 0000644D 72005200EB00E800C1- <2> 	dw 'r','R',0xEB,0xE8,0x3C1,0x3A1,0x43A,0x41A
  8115 00006456 03A1033A041A04      <2>
  8116 0000645D 74005400FC00DC00C4- <2> 	dw 't','T',0xFC,0xDC,0x3C4,0x3A4,0x435,0x415
  8117 00006466 03A40335041504      <2>
  8118 0000646D 79005900FF009F00C5- <2> 	dw 'y','Y',0xFF,0x9F,0x3C5,0x3A5,0x43D,0x41D
  8119 00006476 03A5033D041D04      <2>
  8120 0000647D 75005500FA00F900B8- <2> 	dw 'u','U',0xFA,0xF9,0x3B8,0x398,0x433,0x413
  8121 00006486 03980333041304      <2>
  8122 0000648D 69004900ED00EC00B9- <2> 	dw 'i','I',0xED,0xEC,0x3B9,0x399,0x448,0x428
  8123 00006496 03990348042804      <2>
  8124 0000649D 6F004F00F300F200BF- <2> 	dw 'o','O',0xF3,0xF2,0x3BF,0x39F,0x449,0x429
  8125 000064A6 039F0349042904      <2>
  8126 000064AD 70005000F600D600C0- <2> 	dw 'p','P',0xF6,0xD6,0x3C0,0x3A0,0x437,0x417
  8127 000064B6 03A00337041704      <2>
  8128 000064BD 5B007B00AB00000000- <2> 	dw '[','{',0xAB,0,0,0,0x445,0x425
  8129 000064C6 00000045042504      <2>
  8130 000064CD 5D007D00BB00000000- <2> 	dw ']','}',0xBB,0,0,0,0x44A,0x42A
  8131 000064D6 0000004A042A04      <2>
  8132 000064DD 000000000000000000- <2> 	dw 0,0,0,0,0,0,0,0
  8133 000064E6 00000000000000      <2>
  8134 000064ED 000000000000000000- <2> 	dw 0,0,0,0,0,0,0,0
  8135 000064F6 00000000000000      <2>
  8136 000064FD 61004100E100E000B1- <2> 	dw 'a','A',0xE1,0xE0,0x3B1,0x391,0x444,0x424
  8137 00006506 03910344042404      <2>
  8138 0000650D 73005300A7000000C3- <2> 	dw 's','S',0xA7,0,0x3C3,0x3A3,0x44B,0x42B
  8139 00006516 03A3034B042B04      <2>
  8140 0000651D 64004400B0000000B4- <2> 	dw 'd','D',0xB0,0,0x3B4,0x394,0x432,0x412
  8141 00006526 03940332041204      <2>
  8142 0000652D 6600460083004026C6- <2> 	dw 'f','F',0x83,0x2640,0x3C6,0x3A6,0x430,0x410
  8143 00006536 03A60330041004      <2>
  8144 0000653D 6700470000000000B3- <2> 	dw 'g','G',0,0,0x3B3,0x393,0x43F,0x41F
  8145 00006546 0393033F041F04      <2>
  8146 0000654D 6800480000000000B7- <2> 	dw 'h','H',0,0,0x3B7,0x397,0x440,0x420
  8147 00006556 03970340042004      <2>
  8148 0000655D 6A004A0000000000BE- <2> 	dw 'j','J',0,0,0x3BE,0x39E,0x43E,0x41E
  8149 00006566 039E033E041E04      <2>
  8150 0000656D 6B004B0000000000BA- <2> 	dw 'k','K',0,0,0x3BA,0x39A,0x43B,0x41B
  8151 00006576 039A033B041B04      <2>
  8152 0000657D 6C004C0000000000BB- <2> 	dw 'l','L',0,0,0x3BB,0x39B,0x434,0x414
  8153 00006586 039B0334041404      <2>
  8154 0000658D 3B003A00B6000E2200- <2> 	dw ';',':',0xB6,0x220E,0,0,0x436,0x416
  8155 00006596 00000036041604      <2>
  8156 0000659D 270022000000000000- <2> 	dw "'",'"',0,0,0,0,0x44D,0x42D
  8157 000065A6 0000004D042D04      <2>
  8158 000065AD 60007E000000000000- <2> 	dw '`','~',0,0,0,0,0x451,0x401
  8159 000065B6 00000051040104      <2>
  8160 000065BD 000000000000000000- <2> 	dw 0,0,0,0,0,0,0,0
  8161 000065C6 00000000000000      <2>
  8162 000065CD 5C007C00AC00A60000- <2> 	dw "\",'|',0xAC,0xA6,0,0,"/","\"
  8163 000065D6 0000002F005C00      <2>
  8164 000065DD 7A005A00E600C600B6- <2> 	dw 'z','Z',0xE6,0xC6,0x3B6,0x396,0x44F,0x42F
  8165 000065E6 0396034F042F04      <2>
  8166 000065ED 7800580000000000C7- <2> 	dw 'x','X',0,0,0x3C7,0x3A7,0x447,0x427
  8167 000065F6 03A70347042704      <2>
  8168 000065FD 63004300E700C700C8- <2> 	dw 'c','C',0xE7,0xC7,0x3C8,0x3A8,0x441,0x421
  8169 00006606 03A80341042104      <2>
  8170 0000660D 7600560000000000C9- <2> 	dw 'v','V',0,0,0x3C9,0x3A9,0x43C,0x41C
  8171 00006616 03A9033C041C04      <2>
  8172 0000661D 6200420000000000B2- <2> 	dw 'b','B',0,0,0x3B2,0x392,0x438,0x418
  8173 00006626 03920338041804      <2>
  8174 0000662D 6E004E00F100D100BD- <2> 	dw 'n','N',0xF1,0xD1,0x3BD,0x39D,0x442,0x422
  8175 00006636 039D0342042204      <2>
  8176 0000663D 6D004D006C264226BC- <2> 	dw 'm','M',0x266C,0x2642,0x3BC,0x39C,0x44C,0x42C
  8177 00006646 039C034C042C04      <2>
  8178 0000664D 2C003C006422000000- <2> 	dw ',','<',0x2264,0,0,0,0x431,0x411
  8179 00006656 00000031041104      <2>
  8180 0000665D 2E003E006522000000- <2> 	dw '.','>',0x2265,0,0,0,0x44E,0x42E
  8181 00006666 0000004E042E04      <2>
  8182 0000666D 2F003F00BF00000000- <2> 	dw '/','?',0xBF,0,0,0,'.',','
  8183 00006676 0000002E002C00      <2>
  8184 0000667D 000000000000000000- <2> 	dw 0,0,0,0,0,0,0,0
  8185 00006686 00000000000000      <2>
  8186 0000668D 000000000000000000- <2> 	dw 0,0,0,0,0,0,0,0
  8187 00006696 00000000000000      <2>
  8188 0000669D 000000000000000000- <2> 	dw 0,0,0,0,0,0,0,0
  8189 000066A6 00000000000000      <2>
  8190 000066AD 200020000000000000- <2> 	dw ' ',' ',0,0,0,0,0,0
  8191 000066B6 00000000000000      <2>
  8192                              <2> noscan:
  8193                              <2> 
  8194                              <1> %endif
  8195                              <1> ;drivers will soon be handled intelligently
  8196                              <1> ;every driver's source will be scanned for a .init function
  8197                              <1> ;that will be called and if it returns 0
  8198                              <1> ;the hardware was found and the driver initialized properly
  8199                              <1> initializelater: ;these have debugging messages and should be initialized after the screen
  8200                              <1> 	%ifdef sound.included
  8201 000066BD E842F8FFFF          <1> 		call sblaster.init
  8202                              <1> 	%endif
  8203                              <1> 	%ifdef network.included
  8204 000066C2 E864230000          <1> 		call network.init
  8205                              <1> 	%endif
  8206 000066C7 C3                  <1> 	ret
  8207                              <1> initialize:
  8208                              <1> ;Now I will initialise the interrupt controllers and remap irq's
  8209 000066C8 E839000000          <1> 	call .pic
  8210                              <1> %ifdef terminal.vsync
  8211                              <1> 	call .rtc
  8212                              <1> %endif
  8213 000066CD E896000000          <1> 	call .pit
  8214 000066D2 E8B8000000          <1> 	call .fpu
  8215 000066D7 E8C9000000          <1> 	call .sse
  8216 000066DC 31C0                <1> 	xor eax, eax
  8217 000066DE 31C9                <1> 	xor ecx, ecx
  8218                              <1> %ifdef io.serial
  8219                              <1> 	call serial.init
  8220                              <1> %endif
  8221 000066E0 E801000000          <1> 	call .time
  8222 000066E5 C3                  <1> 	ret
  8223                              <1> 	
  8224                              <1> .time:
  8225 000066E6 E85BDAFFFF          <1> 	call time
  8226 000066EB E803DCFFFF          <1> 	call timeconvert
  8227 000066F0 890D[67020000]      <1> 	mov [timeseconds], ecx
  8228 000066F6 31C9                <1> 	xor ecx, ecx
  8229 000066F8 890D[6B020000]      <1> 	mov [timenanoseconds], ecx
  8230 000066FE C605[8E400000]01    <1> 	mov byte [istimeset], 1
  8231 00006705 C3                  <1> 	ret
  8232                              <1> 	
  8233                              <1> .pic:
  8234 00006706 B011                <1> 	mov al, 0x11
  8235 00006708 E620                <1> 	out 0x20, al
  8236 0000670A E6A0                <1> 	out 0xA0, al
  8237 0000670C B040                <1> 	mov al, 0x40	;interrupt for master
  8238 0000670E E621                <1> 	out 0x21, al
  8239 00006710 B048                <1> 	mov al, 0x48	;interrupt for slave
  8240 00006712 E6A1                <1> 	out 0xA1, al
  8241 00006714 B004                <1> 	mov al, 4
  8242 00006716 E621                <1> 	out 0x21, al
  8243 00006718 B002                <1> 	mov al, 2
  8244 0000671A E6A1                <1> 	out 0xA1, al
  8245 0000671C B001                <1> 	mov al, 0x1
  8246 0000671E E621                <1> 	out 0x21, al
  8247 00006720 B001                <1> 	mov al, 0x1
  8248 00006722 E6A1                <1> 	out 0xA1, al
  8249                              <1> 	;masks are set to zero so as not to mask
  8250 00006724 30C0                <1> 	xor al, al
  8251 00006726 E621                <1> 	out 0x21, al
  8252 00006728 30C0                <1> 	xor al, al
  8253 0000672A E6A1                <1> 	out 0xA1, al
  8254 0000672C B020                <1> 	mov al, 0x20
  8255 0000672E E6A0                <1> 	out 0xA0, al
  8256 00006730 E620                <1> 	out 0x20, al
  8257 00006732 C3                  <1> 	ret
  8258                              <1> .rtc:
  8259 00006733 B008                <1> 	mov al, 0x8
  8260 00006735 88C4                <1> 	mov ah, al
  8261 00006737 66BA7000            <1> 	mov dx, 0x70
  8262 0000673B EE                  <1> 	out dx, al
  8263 0000673C 6642                <1> 	inc dx
  8264 0000673E EC                  <1> 	in al, dx
  8265 0000673F 86C4                <1> 	xchg al, ah
  8266 00006741 664A                <1> 	dec dx
  8267 00006743 EE                  <1> 	out dx, al
  8268 00006744 6642                <1> 	inc dx
  8269 00006746 86C4                <1> 	xchg al, ah
  8270 00006748 0C40                <1> 	or al, 0x40
  8271 0000674A EE                  <1> 	out dx, al
  8272                              <1> 	
  8273 0000674B B00A                <1> 	mov al, 0xA
  8274 0000674D 664A                <1> 	dec dx
  8275 0000674F EE                  <1> 	out dx, al
  8276 00006750 86C4                <1> 	xchg al, ah
  8277 00006752 6642                <1> 	inc dx
  8278 00006754 EC                  <1> 	in al, dx
  8279 00006755 24F0                <1> 	and al, 0xF0
  8280 00006757 0A05[2E030000]      <1> 	or al, [rtcrate]
  8281 0000675D 86C4                <1> 	xchg al, ah
  8282 0000675F 664A                <1> 	dec dx
  8283 00006761 EE                  <1> 	out dx, al
  8284 00006762 6642                <1> 	inc dx
  8285 00006764 86C4                <1> 	xchg al, ah
  8286 00006766 EE                  <1> 	out dx, al
  8287 00006767 C3                  <1> 	ret
  8288                              <1> 	
  8289                              <1> .pit:
  8290                              <1> 	;initialize the PIT
  8291 00006768 66A1[60020000]      <1> 	mov ax, [pitdiv] ;this is the divider for the PIT
  8292 0000676E E640                <1> 	out 0x40, al
  8293 00006770 66C1C008            <1> 	rol ax, 8
  8294 00006774 E640                <1> 	out 0x40, al
  8295                              <1> 	;enable rtc interrupt
  8296 00006776 B00B                <1> 	mov al, 0xB
  8297 00006778 E670                <1> 	out 0x70, al
  8298 0000677A 66C1C008            <1> 	rol ax, 8
  8299 0000677E E471                <1> 	in al, 0x71
  8300 00006780 66C1C008            <1> 	rol ax, 8
  8301 00006784 E670                <1> 	out 0x70, al
  8302 00006786 66C1C008            <1> 	rol ax, 8
  8303 0000678A 0C40                <1> 	or al, 0x40
  8304 0000678C E671                <1> 	out 0x71, al
  8305 0000678E C3                  <1> 	ret
  8306                              <1> .fpu:
  8307                              <1> 	;And now to initialize the fpu
  8308 0000678F 0F20E0              <1> 	mov eax, cr4
  8309 00006792 0D00020000          <1> 	or eax, 0x200
  8310 00006797 0F22E0              <1> 	mov cr4, eax
  8311 0000679A B87F0B0000          <1> 	mov eax, 0xB7F
  8312 0000679F 50                  <1> 	push eax
  8313 000067A0 D92C24              <1> 	fldcw [esp]
  8314 000067A3 58                  <1> 	pop eax
  8315 000067A4 C3                  <1> 	ret
  8316                              <1> 	
  8317                              <1> .sse:
  8318 000067A5 0F20C0              <1> 	mov eax, cr0
  8319 000067A8 24FB                <1> 	and al, 11111011b
  8320 000067AA 0C02                <1> 	or al, 00000010b
  8321 000067AC 0F22C0              <1> 	mov cr0, eax
  8322 000067AF 0F20E0              <1> 	mov eax, cr4
  8323 000067B2 660D0006            <1> 	or ax, 0000011000000000b
  8324 000067B6 0F22E0              <1> 	mov cr4, eax
  8325 000067B9 C3                  <1> 	ret
  8326                                      %include "source/pci.asm"
  8327 000067BA 00                  <1> pcibus		db 0
  8328 000067BB 00                  <1> pcidevice	db 0
  8329 000067BC 00                  <1> pcifunction	db 0
  8330 000067BD 00                  <1> pciregister	db 0
  8331 000067BE 00                  <1> pcireqtype	db 0
  8332 000067BF 00000000            <1> pcidevid	dd 0
  8333 000067C3 FFFFFFFF            <1> pcidevidmask dd 0xFFFFFFFF
  8334                              <1> getpcimem:
  8335 000067C7 B002                <1> 	mov al, 2
  8336 000067C9 A2[BE670000]        <1> 	mov [pcireqtype], al
  8337 000067CE E922000000          <1> 	jmp searchpci
  8338                              <1> getpciport:
  8339 000067D3 B001                <1> 	mov al, 1
  8340 000067D5 A2[BE670000]        <1> 	mov [pcireqtype], al
  8341 000067DA E916000000          <1> 	jmp searchpci
  8342                              <1> pcidump:
  8343 000067DF 31C0                <1> 	xor eax, eax
  8344 000067E1 A2[BC670000]        <1> 	mov [pcifunction], al
  8345 000067E6 A2[BA670000]        <1> 	mov [pcibus], al
  8346 000067EB A2[BB670000]        <1> 	mov [pcidevice], al
  8347 000067F0 A2[BE670000]        <1> 	mov [pcireqtype], al
  8348                              <1> searchpci:		;return in ebx, start X in pciX
  8349 000067F5 30C0                <1> 	xor al, al
  8350 000067F7 A2[BD670000]        <1> 	mov [pciregister], al
  8351 000067FC E81D020000          <1> 	call getpciaddr
  8352 00006801 BAF80C0000          <1> 	mov edx, 0xCF8
  8353 00006806 EF                  <1> 	out dx, eax	;request pci config
  8354 00006807 BAFC0C0000          <1> 	mov edx, 0xCFC
  8355 0000680C ED                  <1> 	in eax, dx 	;read in pci config
  8356 0000680D 3D0000FFFF          <1> 	cmp eax, 0xFFFF0000
  8357 00006812 0F8237000000        <1> 	jb near checkpcidevice
  8358                              <1> searchpciret:
  8359                              <1> nextpcidevice:
  8360 00006818 30C0                <1> 	xor al, al
  8361 0000681A A2[BC670000]        <1> 	mov [pcifunction], al
  8362 0000681F A0[BB670000]        <1> 	mov al, [pcidevice]
  8363 00006824 3C1F                <1> 	cmp al, 11111b
  8364 00006826 0F8300010000        <1> 	jae near nextpcibus
  8365 0000682C FEC0                <1> 	inc al
  8366 0000682E A2[BB670000]        <1> 	mov [pcidevice], al
  8367 00006833 EBC0                <1> 	jmp searchpci
  8368 00006835 A0[BC670000]        <1> 	mov al, [pcifunction]
  8369 0000683A 3C07                <1> 	cmp al, 111b
  8370 0000683C 0F83D6FFFFFF        <1> 	jae near nextpcidevice
  8371 00006842 FEC0                <1> 	inc al
  8372 00006844 A2[BC670000]        <1> 	mov [pcifunction], al
  8373 00006849 EBAA                <1> 	jmp searchpci
  8374 0000684B 00000000            <1> pcitype: db 0,0,0,0
  8375                              <1> checkpcidevice:
  8376 0000684F 31C0                <1> 	xor eax, eax
  8377 00006851 3905[BF670000]      <1> 	cmp [pcidevid], eax
  8378 00006857 0F8430000000        <1> 	je near .good
  8379 0000685D A2[BD670000]        <1> 	mov [pciregister], al	;device id, vendor id
  8380 00006862 E8B7010000          <1> 	call getpciaddr
  8381 00006867 BAF80C0000          <1> 	mov edx, 0xCF8
  8382 0000686C EF                  <1> 	out dx, eax
  8383 0000686D BAFC0C0000          <1> 	mov edx, 0xCFC
  8384 00006872 ED                  <1> 	in eax, dx
  8385 00006873 2305[C3670000]      <1> 	and eax, [pcidevidmask]
  8386 00006879 8B1D[BF670000]      <1> 	mov ebx, [pcidevid]
  8387 0000687F 231D[C3670000]      <1> 	and ebx, [pcidevidmask]
  8388 00006885 39D8                <1> 	cmp eax, ebx
  8389 00006887 0F858BFFFFFF        <1> 	jne near searchpciret
  8390                              <1> .good:
  8391 0000688D 30C0                <1> 	xor al, al
  8392 0000688F 3805[BE670000]      <1> 	cmp [pcireqtype], al
  8393 00006895 0F842C000000        <1> 	je near dumppcidevice
  8394 0000689B B008                <1> 	mov al, 0x08
  8395 0000689D A2[BD670000]        <1> 	mov [pciregister], al	;class code, subclass, revision id
  8396 000068A2 E877010000          <1> 	call getpciaddr
  8397 000068A7 BAF80C0000          <1> 	mov edx, 0xCF8
  8398 000068AC EF                  <1> 	out dx, eax
  8399 000068AD BAFC0C0000          <1> 	mov edx, 0xCFC
  8400 000068B2 ED                  <1> 	in eax, dx
  8401 000068B3 C1C008              <1> 	rol eax, 8
  8402 000068B6 3A05[4B680000]      <1> 	cmp al, [pcitype]
  8403 000068BC 0F84A0000000        <1> 	je near foundpciaddr
  8404 000068C2 E951FFFFFF          <1> 	jmp searchpciret
  8405                              <1> dumppcidevice:
  8406 000068C7 30C0                <1> 	xor al, al
  8407 000068C9 A2[BD670000]        <1> 	mov [pciregister], al
  8408 000068CE E84B010000          <1> 	call getpciaddr
  8409 000068D3 89C1                <1> 	mov ecx, eax
  8410 000068D5 C605[B5310000]05    <1> 	mov byte [firsthexshown], 5
  8411 000068DC E8E9C8FFFF          <1> 	call showhex
  8412                              <1> dumppcidevicelp:
  8413 000068E1 A2[BD670000]        <1> 	mov [pciregister], al
  8414 000068E6 E833010000          <1> 	call getpciaddr
  8415 000068EB BAF80C0000          <1> 	mov edx, 0xCF8
  8416 000068F0 EF                  <1> 	out dx, eax
  8417 000068F1 BAFC0C0000          <1> 	mov edx, 0xCFC
  8418 000068F6 ED                  <1> 	in eax, dx
  8419 000068F7 89C1                <1> 	mov ecx, eax
  8420 000068F9 A0[BD670000]        <1> 	mov al, [pciregister]
  8421 000068FE 0404                <1> 	add al, 4
  8422 00006900 C605[B5310000]05    <1> 	mov byte [firsthexshown], 5
  8423 00006907 E8BEC8FFFF          <1> 	call showhex
  8424 0000690C 3C3C                <1> 	cmp al, 0x3C
  8425 0000690E 72D1                <1> 	jb dumppcidevicelp
  8426                              <1> dumppcidn:
  8427                              <1> %ifdef io.serial
  8428                              <1> 	mov esi, line
  8429                              <1> 	call print
  8430                              <1> %else
  8431 00006910 803D[D8250000]00    <1> 	cmp byte [charpos], 0
  8432 00006917 0F84FBFEFFFF        <1> 	je near searchpciret
  8433 0000691D BE[CA8E0000]        <1> 	mov esi, line
  8434 00006922 E835B4FFFF          <1> 	call print
  8435                              <1> %endif
  8436 00006927 E9ECFEFFFF          <1> 	jmp searchpciret
  8437                              <1> nextpcibus:
  8438 0000692C 30C0                <1> 	xor al, al
  8439 0000692E A2[BB670000]        <1> 	mov [pcidevice], al
  8440 00006933 A0[BA670000]        <1> 	mov al, [pcibus]
  8441 00006938 3C7F                <1> 	cmp al, 1111111b
  8442 0000693A 730C                <1> 	jae donesearchpci
  8443 0000693C FEC0                <1> 	inc al
  8444 0000693E A2[BA670000]        <1> 	mov [pcibus], al
  8445 00006943 E9ADFEFFFF          <1> 	jmp searchpci
  8446                              <1> donesearchpci:
  8447 00006948 BBFFFFFFFF          <1> 	mov ebx, 0xFFFFFFFF
  8448 0000694D 31D2                <1> 	xor edx, edx
  8449 0000694F 8815[4B680000]      <1> 	mov [pcitype], dl
  8450 00006955 8915[BF670000]      <1> 	mov [pcidevid], edx
  8451 0000695B 891D[C3670000]      <1> 	mov [pcidevidmask], ebx
  8452 00006961 C3                  <1> 	ret
  8453                              <1> foundpciaddr:
  8454 00006962 B010                <1> 	mov al, 0x10
  8455 00006964 A2[BD670000]        <1> 	mov [pciregister], al
  8456 00006969 803D[BE670000]02    <1> 	cmp byte [pcireqtype], 2
  8457 00006970 7443                <1> 	je findpcimemaddr
  8458                              <1> findpciioaddr:
  8459 00006972 E8A7000000          <1> 	call getpciaddr
  8460 00006977 BAF80C0000          <1> 	mov edx, 0xCF8
  8461 0000697C EF                  <1> 	out dx, eax
  8462 0000697D BAFC0C0000          <1> 	mov edx, 0xCFC
  8463 00006982 ED                  <1> 	in eax, dx
  8464 00006983 89C3                <1> 	mov ebx, eax
  8465 00006985 81E301000000        <1> 	and ebx, 1
  8466 0000698B 81FB00000000        <1> 	cmp ebx, 0
  8467 00006991 0F846E000000        <1> 	je near notpciioaddr
  8468 00006997 2D01000000          <1> 	sub eax, 1
  8469 0000699C 89C2                <1> 	mov edx, eax
  8470 0000699E 31DB                <1> 	xor ebx, ebx
  8471 000069A0 4B                  <1> 	dec ebx
  8472 000069A1 891D[C3670000]      <1> 	mov [pcidevidmask], ebx
  8473 000069A7 43                  <1> 	inc ebx
  8474 000069A8 881D[4B680000]      <1> 	mov [pcitype], bl
  8475 000069AE 891D[BF670000]      <1> 	mov [pcidevid], ebx
  8476 000069B4 C3                  <1> 	ret
  8477                              <1> findpcimemaddr:
  8478 000069B5 E864000000          <1> 	call getpciaddr
  8479 000069BA BAF80C0000          <1> 	mov edx, 0xCF8
  8480 000069BF EF                  <1> 	out dx, eax
  8481 000069C0 BAFC0C0000          <1> 	mov edx, 0xCFC
  8482 000069C5 ED                  <1> 	in eax, dx
  8483 000069C6 89C3                <1> 	mov ebx, eax
  8484 000069C8 81E301000000        <1> 	and ebx, 1
  8485 000069CE 81FB01000000        <1> 	cmp ebx, 1
  8486 000069D4 0F842B000000        <1> 	je near notpciioaddr
  8487 000069DA C1E804              <1> 	shr eax, 4
  8488 000069DD C1E004              <1> 	shl eax, 4	;remove prefetch and type
  8489 000069E0 89C2                <1> 	mov edx, eax
  8490 000069E2 50                  <1> 	push eax
  8491 000069E3 A1[47020000]        <1> 	mov eax, [basecache]
  8492 000069E8 C1E004              <1> 	shl eax, 4
  8493 000069EB 29C2                <1> 	sub edx, eax
  8494 000069ED 58                  <1> 	pop eax
  8495 000069EE 31DB                <1> 	xor ebx, ebx
  8496 000069F0 4B                  <1> 	dec ebx
  8497 000069F1 891D[C3670000]      <1> 	mov [pcidevidmask], ebx
  8498 000069F7 43                  <1> 	inc ebx
  8499 000069F8 881D[4B680000]      <1> 	mov [pcitype], bl
  8500 000069FE 891D[BF670000]      <1> 	mov [pcidevid], ebx
  8501 00006A04 C3                  <1> 	ret
  8502                              <1> notpciioaddr:
  8503 00006A05 A0[BD670000]        <1> 	mov al, [pciregister]
  8504 00006A0A 0404                <1> 	add al, 4
  8505 00006A0C 3C28                <1> 	cmp al, 0x28
  8506 00006A0E 0F8704FEFFFF        <1> 	ja near searchpciret
  8507 00006A14 A2[BD670000]        <1> 	mov [pciregister], al
  8508 00006A19 E954FFFFFF          <1> 	jmp findpciioaddr
  8509                              <1> getpciaddr:		;puts it in eax and ebx
  8510 00006A1E 31C0                <1> 			xor eax, eax
  8511 00006A20 BB00000080          <1> 			mov ebx, 0x80000000
  8512 00006A25 A0[BA670000]        <1> 			mov al, [pcibus]
  8513 00006A2A C1E010              <1> 			shl eax, 16
  8514 00006A2D 01C3                <1> 			add ebx, eax
  8515 00006A2F 31C0                <1> 			xor eax, eax
  8516 00006A31 A0[BB670000]        <1> 			mov al, [pcidevice]
  8517 00006A36 C1E00B              <1> 			shl eax, 11
  8518 00006A39 01C3                <1> 			add ebx, eax
  8519 00006A3B 31C0                <1> 			xor eax, eax
  8520 00006A3D A0[BC670000]        <1> 			mov al, [pcifunction]
  8521 00006A42 C1E008              <1> 			shl eax, 8
  8522 00006A45 01C3                <1> 			add ebx, eax
  8523 00006A47 31C0                <1> 			xor eax, eax
  8524 00006A49 A0[BD670000]        <1> 			mov al, [pciregister]
  8525 00006A4E 01C3                <1> 			add ebx, eax
  8526 00006A50 89D8                <1> 			mov eax, ebx
  8527 00006A52 C3                  <1> 			ret
  8528                                      %include "source/disk.asm"
  8529                              <1> %ifdef disk.real
  8530                              <1> 	%include "source/drivers/disk/realmode.asm"
  8531                              <2> diskr:
  8532                              <2> 			;sector count in cl
  8533                              <2> 			;disk number in ch
  8534                              <2> 			;48 bit address with last 32 bits in ebx
  8535                              <2> 			;buffer in esi
  8536                              <2> 			;puts end of buffer in edi and end lba address in edx
  8537 00006A53 880D[7A6A0000]      <2> 	mov [sdlength], cl
  8538 00006A59 891D[7B6A0000]      <2> 	mov [sdaddress], ebx
  8539 00006A5F 8935[F66B0000]      <2> 	mov [oldesireal], esi
  8540 00006A65 66BE[7F6A]          <2> 	mov si, readdiskreal
  8541 00006A69 668935[F30C0000]    <2> 	mov [realmodeptr], si
  8542 00006A70 E86CA1FFFF          <2> 	call realmode
  8543 00006A75 E941000000          <2> 	jmp backfromrealread
  8544 00006A7A 00                  <2> sdlength db 0
  8545 00006A7B 00000000            <2> sdaddress dd 0
  8546                              <2> 
  8547                              <2> [BITS 16]
  8548                              <2> readdiskreal:
  8549 00006A7F C706[AB6A]1000      <2> 	mov word [dlen], 0x10
  8550 00006A85 C706[AF6A]0000      <2> 	mov word [daddress], 0
  8551 00006A8B C706[B16A]0001      <2> 	mov word [dsegm], 0x100
  8552 00006A91 66891E[B36A]        <2> 	mov [dlbaad], ebx
  8553 00006A96 880E[AD6A]          <2> 	mov [dreadlen], cl
  8554                              <2> ReadHardDisk:
  8555 00006A9A BE[AB6A]            <2> 	mov si, diskaddresspacket
  8556 00006A9D 31C0                <2> 	xor ax, ax
  8557 00006A9F B442                <2> 	mov ah, 0x42
  8558 00006AA1 8A16[AA6A]          <2> 	mov dl, [dnumber]
  8559 00006AA5 CD13                <2> 	int 0x13
  8560 00006AA7 72F1                <2> 	jc ReadHardDisk
  8561 00006AA9 C3                  <2> 	ret
  8562                              <2> 
  8563 00006AAA 80                  <2> dnumber db 0x80
  8564                              <2> diskaddresspacket:
  8565 00006AAB 10                  <2> dlen:	db 0x10 ;size of packet
  8566 00006AAC 00                  <2> 		db 0
  8567 00006AAD 7F00                <2> dreadlen:	dw 0x7F	;blocks to read=maximum
  8568 00006AAF 0000                <2> daddress:	dw 0	;address 0
  8569 00006AB1 0001                <2> dsegm:		dw 0x100	;segment
  8570                              <2> 		;start with known value for hd
  8571                              <2> dlbaad:
  8572 00006AB3 00000000            <2> 	dd 0	;lba address
  8573 00006AB7 00000000            <2> 	dd 0
  8574                              <2> [BITS 32]
  8575                              <2> backfromrealread:
  8576 00006ABB 8B35[F66B0000]      <2> 	mov esi, [oldesireal]
  8577 00006AC1 8B1D[7B6A0000]      <2> 	mov ebx, [sdaddress]
  8578 00006AC7 31C9                <2> 	xor ecx, ecx
  8579 00006AC9 8A0D[7A6A0000]      <2> 	mov cl, [sdlength]
  8580 00006ACF 01CB                <2> 	add ebx, ecx
  8581 00006AD1 66B80800            <2> 	mov ax, LINEAR_SEL
  8582 00006AD5 8EE0                <2> 	mov fs, ax
  8583 00006AD7 BF00100000          <2> 	mov edi, 0x1000
  8584 00006ADC B200                <2> 	mov dl, 0
  8585 00006ADE D0E1                <2> 	shl cl, 1
  8586                              <2> copyfromrmodedisk:
  8587 00006AE0 648A07              <2> 	mov al, [fs:edi]
  8588 00006AE3 8806                <2> 	mov [esi], al
  8589 00006AE5 47                  <2> 	inc edi
  8590 00006AE6 46                  <2> 	inc esi
  8591 00006AE7 FECA                <2> 	dec dl
  8592 00006AE9 80FA00              <2> 	cmp dl, 0
  8593 00006AEC 75F2                <2> 	jne copyfromrmodedisk
  8594 00006AEE FEC9                <2> 	dec cl
  8595 00006AF0 B200                <2> 	mov dl, 0
  8596 00006AF2 80F900              <2> 	cmp cl, 0
  8597 00006AF5 75E9                <2> 	jne copyfromrmodedisk
  8598 00006AF7 66B83000            <2> 	mov ax, NEW_DATA_SEL
  8599 00006AFB 8EE0                <2> 	mov fs, ax
  8600 00006AFD 89F7                <2> 	mov edi, esi
  8601 00006AFF 8B35[F66B0000]      <2> 	mov esi, [oldesireal]
  8602 00006B05 89DA                <2> 	mov edx, ebx
  8603 00006B07 8B1D[7B6A0000]      <2> 	mov ebx, [sdaddress]
  8604 00006B0D C3                  <2> 	ret
  8605                              <2> 	
  8606                              <1> %else
  8607                              <1> 	%ifdef disk.protected
  8608                              <1> 		%include "source/drivers/disk/pata.asm"
  8609                              <1> 	%endif
  8610                              <1> %endif
  8611                              <1> %ifdef disk.none
  8612                              <1> loadfile:	xor edx, edx
  8613                              <1> 			cmp byte [edi], '&'
  8614                              <1> 			je .ret
  8615                              <1> 			mov edx, 404	;no files are found except &
  8616                              <1> 		.ret:
  8617                              <1> 			ret
  8618                              <1> %else
  8619                              <1> ;This loads files using the methods in the loaded driver
  8620                              <1> loadfile:	;loads a file with the name buffer's location in edi into location in esi
  8621                              <1> 			;returns with err code in edx and file end in edi
  8622 00006B0E 803F00              <1> 	cmp byte [edi], 0
  8623 00006B11 0F8448000000        <1> 	je near nofileload
  8624 00006B17 89FA                <1> 	mov edx, edi
  8625 00006B19 BB[49910300]        <1> 	mov ebx, diskfileindex
  8626                              <1> nextnamechar:
  8627 00006B1E 8A07                <1> 	mov al, [edi]
  8628 00006B20 3C26                <1> 	cmp al, '&'
  8629 00006B22 7440                <1> 	je nullfile
  8630 00006B24 8A23                <1> 	mov ah, [ebx]
  8631 00006B26 47                  <1> 	inc edi
  8632 00006B27 43                  <1> 	inc ebx
  8633 00006B28 88C1                <1> 	mov cl, al
  8634 00006B2A 08E1                <1> 	or cl, ah
  8635 00006B2C 80F900              <1> 	cmp cl, 0
  8636 00006B2F 746B                <1> 	je equalfilenames
  8637 00006B31 80F920              <1> 	cmp cl, ' '
  8638 00006B34 7466                <1> 	je equalfilenames
  8639 00006B36 3C2A                <1> 	cmp al, '*'
  8640 00006B38 742B                <1> 	je asteriskcheck
  8641 00006B3A 80FC00              <1> 	cmp ah, 0
  8642 00006B3D 7410                <1> 	je nextfilename
  8643 00006B3F 3C00                <1> 	cmp al, 0
  8644 00006B41 7404                <1> 	je getebxzero
  8645 00006B43 38E0                <1> 	cmp al, ah
  8646 00006B45 74D7                <1> 	je nextnamechar
  8647                              <1> getebxzero:
  8648 00006B47 8A23                <1> 	mov ah, [ebx]
  8649 00006B49 43                  <1> 	inc ebx
  8650 00006B4A 80FC00              <1> 	cmp ah, 0
  8651 00006B4D 75F8                <1> 	jne getebxzero
  8652                              <1> nextfilename:
  8653 00006B4F 81C308000000        <1> 	add ebx, 8		;next descriptor
  8654 00006B55 89D7                <1> 	mov edi, edx
  8655 00006B57 81FB[2B920300]      <1> 	cmp ebx, enddiskfileindex
  8656 00006B5D 72BF                <1> 	jb nextnamechar
  8657                              <1> nofileload:
  8658 00006B5F BA94010000          <1> 	mov edx, 404	;indicate not found error
  8659                              <1> nullfile:
  8660 00006B64 C3                  <1> 	ret
  8661                              <1> asteriskcheck:
  8662 00006B65 4B                  <1> 	dec ebx
  8663 00006B66 8A07                <1> 	mov al, [edi]
  8664 00006B68 3C2A                <1> 	cmp al, '*'
  8665 00006B6A 74F9                <1> 	je asteriskcheck ;remove multiple asterisks
  8666 00006B6C 3C20                <1> 	cmp al, ' '
  8667 00006B6E 7412                <1> 	je equalfilenames2
  8668 00006B70 3C00                <1> 	cmp al, 0
  8669 00006B72 740E                <1> 	je equalfilenames2
  8670                              <1> .lp:
  8671 00006B74 8A23                <1> 	mov ah, [ebx]
  8672 00006B76 80FC00              <1> 	cmp ah, 0
  8673 00006B79 74D4                <1> 	je nextfilename
  8674 00006B7B 38E0                <1> 	cmp al, ah
  8675 00006B7D 749F                <1> 	je nextnamechar
  8676 00006B7F 43                  <1> 	inc ebx
  8677 00006B80 EBF2                <1> 	jmp .lp
  8678                              <1> equalfilenames2:
  8679 00006B82 81EB02000000        <1> 	sub ebx, 2
  8680                              <1> eqfilefind:
  8681 00006B88 43                  <1> 	inc ebx
  8682 00006B89 81FB[2B920300]      <1> 	cmp ebx, enddiskfileindex
  8683 00006B8F 0F83CAFFFFFF        <1> 	jae near nofileload
  8684 00006B95 8A03                <1> 	mov al, [ebx]
  8685 00006B97 3C00                <1> 	cmp al, 0
  8686 00006B99 75ED                <1> 	jne eqfilefind
  8687 00006B9B 43                  <1> 	inc ebx
  8688                              <1> equalfilenames:
  8689 00006B9C 8B4304              <1> 	mov eax, [ebx + 4] 	;put file size in eax
  8690 00006B9F 8B1B                <1> 	mov ebx, [ebx]		;put file beginning in ebx
  8691 00006BA1 031D[F18E0000]      <1> 	add ebx, [lbaad]	;add offset to solleros start
  8692 00006BA7 31C9                <1> 	xor ecx, ecx
  8693 00006BA9 88C1                <1> 	mov cl, al			;get excess number of sectors
  8694 00006BAB C0E102              <1> 	shl cl, 2
  8695 00006BAE C0E902              <1> 	shr cl, 2			;cut off at 64
  8696 00006BB1 29C8                <1> 	sub eax, ecx		;get rid of excess sectors
  8697 00006BB3 B500                <1> 	mov ch, 0			;drive 0
  8698 00006BB5 C1E806              <1> 	shr eax, 6			;get number of 64 sector tracks
  8699                              <1> loaddiskfile:			;tracks in eax, excess sectors in cl, drive in ch, buffer in esi, address in ebx
  8700 00006BB8 A3[FA6B0000]        <1> 	mov [filetracks], eax
  8701 00006BBD 89F7                <1> 	mov edi, esi		;just in case cl is 0
  8702 00006BBF 89DA                <1> 	mov edx, ebx
  8703 00006BC1 80F900              <1> 	cmp cl, 0
  8704 00006BC4 7405                <1> 	je copytracksforfile
  8705 00006BC6 E888FEFFFF          <1> 	call diskr	;take care of excess sectors
  8706                              <1> copytracksforfile:
  8707 00006BCB A1[FA6B0000]        <1> 	mov eax, [filetracks]
  8708 00006BD0 3D00000000          <1> 	cmp eax, 0
  8709 00006BD5 7419                <1> 	je donecopyfile
  8710 00006BD7 48                  <1> 	dec eax
  8711 00006BD8 A3[FA6B0000]        <1> 	mov [filetracks], eax
  8712 00006BDD 89D3                <1> 	mov ebx, edx	;get end lba
  8713 00006BDF B140                <1> 	mov cl, 0x40 ;for compatability with BIOS it uses 64 instead of 128
  8714 00006BE1 8A2D[F08E0000]      <1> 	mov ch, [DriveNumber]
  8715 00006BE7 89FE                <1> 	mov esi, edi	;reset buffer
  8716 00006BE9 E865FEFFFF          <1> 	call diskr
  8717 00006BEE EBDB                <1> 	jmp copytracksforfile
  8718                              <1> donecopyfile:
  8719 00006BF0 BA00000000          <1> 	mov edx, 0	;no error
  8720 00006BF5 C3                  <1> 	ret
  8721                              <1> 
  8722 00006BF6 00000000            <1> oldesireal dd 0
  8723 00006BFA 00000000            <1> filetracks dd 0
  8724 00006BFE 00                  <1> lbad1 db 0
  8725 00006BFF 00                  <1> lbad2 db 0
  8726 00006C00 00                  <1> lbad3 db 0
  8727 00006C01 00                  <1> lbad4 db 0
  8728 00006C02 00                  <1> lbad5 db 0
  8729 00006C03 00                  <1> lbad6 db 0
  8730 00006C04 6400                <1> segments dw 100
  8731                              <1> %endif
  8732                                      %include "source/threads.asm"
  8733                              <1> %ifdef threads.included	
  8734                              <1> nwcmdst:
  8735 00006C06 31C0                <1> 	xor eax, eax
  8736 00006C08 BC[00B40300]        <1> 	mov esp, stackend
  8737 00006C0D A2[C86C0000]        <1> 	mov [threadson], al
  8738 00006C12 A3[C96C0000]        <1> 	mov [currentthread], eax
  8739 00006C17 0504000000          <1> 	add eax, 4
  8740 00006C1C A3[C46C0000]        <1> 	mov [lastthread], eax
  8741 00006C21 FB                  <1> 	sti
  8742 00006C22 E9CEC0FFFF          <1> 	jmp nwcmd
  8743                              <1> 
  8744                              <1> nomorethreadspace:
  8745 00006C27 BE[3D6C0000]        <1> 	mov esi, nmts
  8746 00006C2C E82BB1FFFF          <1> 	call print
  8747 00006C31 C605[C86C0000]00    <1> 	mov byte [threadson], 0
  8748 00006C38 E9B8C0FFFF          <1> 	jmp nwcmd
  8749 00006C3D 546872656164204F76- <1> nmts	db "Thread Overflow",10,0
  8750 00006C46 6572666C6F770A00    <1>
  8751                              <1> 
  8752                              <1> nomorestackspace:
  8753 00006C4E BE[5A6C0000]        <1> 	mov esi, nmss
  8754 00006C53 E804B1FFFF          <1> 	call print
  8755 00006C58 EBAC                <1> 	jmp nwcmdst
  8756 00006C5A 537461636B204F7665- <1> nmss	db "Stack Overflow",10,0
  8757 00006C63 72666C6F770A00      <1>
  8758                              <1> 	
  8759                              <1> threadswitch:
  8760 00006C6A 60                  <1> 	pushad 
  8761 00006C6B BF[52B00500]        <1> 	mov edi, threadlist
  8762 00006C70 A1[C96C0000]        <1> 	mov eax, [currentthread]
  8763 00006C75 40                  <1> 	inc eax
  8764 00006C76 A3[C96C0000]        <1> 	mov [currentthread], eax
  8765 00006C7B 6648                <1> 	dec ax
  8766 00006C7D C1E002              <1> 	shl eax, 2
  8767 00006C80 01C7                <1> 	add edi, eax
  8768 00006C82 8927                <1> 	mov [edi], esp
  8769 00006C84 81C704000000        <1> 	add edi, 4
  8770 00006C8A 81FF[52C00500]      <1> 	cmp edi, threadlistend
  8771 00006C90 0F830D000000        <1> 	jae near nookespthread
  8772 00006C96 8B07                <1> 	mov eax, [edi]
  8773 00006C98 3D00000000          <1> 	cmp eax, 0
  8774 00006C9D 0F8519000000        <1> 	jne near okespthread
  8775                              <1> nookespthread:
  8776 00006CA3 BF[52B00500]        <1> 	mov edi, threadlist
  8777 00006CA8 31C0                <1> 	xor eax, eax
  8778 00006CAA A3[C96C0000]        <1> 	mov [currentthread], eax
  8779 00006CAF 8B07                <1> 	mov eax, [edi]
  8780 00006CB1 3D00000000          <1> 	cmp eax, 0
  8781 00006CB6 0F844AFFFFFF        <1> 	je near nwcmdst
  8782                              <1> okespthread:
  8783 00006CBC 89C4                <1> 	mov esp, eax
  8784 00006CBE B020                <1> 	mov al, 0x20
  8785 00006CC0 E620                <1> 	out 0x20, al
  8786 00006CC2 61                  <1> 	popad
  8787 00006CC3 CF                  <1> 	iret
  8788                              <1> 
  8789                              <1> %endif
  8790 00006CC4 04000000            <1> 	lastthread dd 4
  8791 00006CC8 00                  <1> 	threadson db 0
  8792 00006CC9 00000000            <1> 	currentthread dd 0
  8793                                  %ifdef gui.included
  8794                                      %include "source/gui/gui.asm"
  8795                              <1> guiboot:	;Let's see what I can do, I am going to try to make this as freestanding as possible
  8796 00006CCD 31C0                <1> 	xor eax, eax
  8797 00006CCF 31DB                <1> 	xor ebx, ebx
  8798 00006CD1 31C9                <1> 	xor ecx, ecx
  8799 00006CD3 31D2                <1> 	xor edx, edx
  8800 00006CD5 E871080000          <1> 	call guisetup
  8801                              <1> guiloop:
  8802 00006CDA E86EEEFFFF          <1> 	call cursorgui
  8803                              <1> guistart:
  8804 00006CDF E883F4FFFF          <1> 	call getkey
  8805 00006CE4 C605[CC810000]00    <1> 	mov byte [copygui], 0
  8806 00006CEB EBF2                <1> 	jmp guistart
  8807                              <1> 
  8808                              <1> %include "source/gui/bmp.asm"
  8809                              <2> showbmp:
  8810 00006CED 668B06              <2> 	mov ax, [esi]
  8811 00006CF0 663D424D            <2> 	cmp ax, "BM"
  8812 00006CF4 0F85BB000000        <2> 	jne near endedbmp
  8813 00006CFA 8B3D[705A0000]      <2> 	mov edi, [physbaseptr]
  8814 00006D00 6689D0              <2> 	mov ax, dx
  8815 00006D03 6689CB              <2> 	mov bx, cx
  8816 00006D06 31C9                <2> 	xor ecx, ecx
  8817 00006D08 31D2                <2> 	xor edx, edx
  8818 00006D0A 6689D9              <2> 	mov cx, bx
  8819 00006D0D 6689C2              <2> 	mov dx, ax
  8820 00006D10 01D7                <2> 	add edi, edx
  8821 00006D12 01D7                <2> 	add edi, edx
  8822 00006D14 31D2                <2> 	xor edx, edx
  8823 00006D16 668B15[485B0000]    <2> 	mov dx, [resolutionx2]
  8824 00006D1D 034E16              <2> 	add ecx, [esi + 22]
  8825                              <2> bmplocloop:
  8826 00006D20 52                  <2> 	push edx
  8827 00006D21 31C0                <2> 	xor eax, eax
  8828 00006D23 6689D0              <2> 	mov ax, dx
  8829 00006D26 F7E1                <2> 	mul ecx
  8830 00006D28 5A                  <2> 	pop edx
  8831 00006D29 663B0D[5C5A0000]    <2> 	cmp cx, [resolutiony]
  8832 00006D30 7609                <2> 	jbe .nofixy
  8833 00006D32 31C9                <2> 	xor ecx, ecx
  8834 00006D34 668B0D[5C5A0000]    <2> 	mov cx, [resolutiony]
  8835                              <2> .nofixy:
  8836 00006D3B 01C7                <2> 	add edi, eax
  8837 00006D3D 8B5612              <2> 	mov edx, [esi + 18]
  8838 00006D40 8B4E16              <2> 	mov ecx, [esi + 22]
  8839 00006D43 8B460A              <2> 	mov eax, [esi + 10]
  8840 00006D46 8B5E02              <2> 	mov ebx, [esi + 2]
  8841 00006D49 01F3                <2> 	add ebx, esi
  8842 00006D4B 891D[BB6D0000]      <2> 	mov [bmpend], ebx
  8843 00006D51 89D3                <2> 	mov ebx, edx
  8844 00006D53 01C6                <2> 	add esi, eax
  8845                              <2> ldxbmp2:
  8846 00006D55 31D2                <2> 	xor edx, edx
  8847 00006D57 668B15[5A5A0000]    <2> 	mov dx, [resolutionx]
  8848 00006D5E 39D3                <2> 	cmp ebx, edx
  8849 00006D60 7702                <2> 	ja ldxbmp
  8850 00006D62 89DA                <2> 	mov edx, ebx
  8851                              <2> ldxbmp:
  8852 00006D64 668B06              <2> 	mov ax, [esi]
  8853 00006D67 668907              <2> 	mov [edi], ax
  8854 00006D6A 81C702000000        <2> 	add edi, 2
  8855 00006D70 81C602000000        <2> 	add esi, 2
  8856 00006D76 3B35[BB6D0000]      <2> 	cmp esi, [bmpend]
  8857 00006D7C 7737                <2> 	ja endedbmp
  8858 00006D7E 4A                  <2> 	dec edx
  8859 00006D7F 81FA00000000        <2> 	cmp edx, 0
  8860 00006D85 77DD                <2> 	ja ldxbmp
  8861 00006D87 31D2                <2> 	xor edx, edx
  8862 00006D89 668B15[5A5A0000]    <2> 	mov dx, [resolutionx]
  8863 00006D90 39D3                <2> 	cmp ebx, edx
  8864 00006D92 7610                <2> 	jbe .notover
  8865                              <2> .over:
  8866 00006D94 01DE                <2> 	add esi, ebx
  8867 00006D96 01DE                <2> 	add esi, ebx
  8868 00006D98 29D6                <2> 	sub esi, edx
  8869 00006D9A 29D6                <2> 	sub esi, edx
  8870 00006D9C 01DF                <2> 	add edi, ebx
  8871 00006D9E 01DF                <2> 	add edi, ebx
  8872 00006DA0 29D7                <2> 	sub edi, edx
  8873 00006DA2 29D7                <2> 	sub edi, edx
  8874                              <2> .notover:
  8875 00006DA4 29DF                <2> 	sub edi, ebx
  8876 00006DA6 29DF                <2> 	sub edi, ebx
  8877 00006DA8 29D7                <2> 	sub edi, edx
  8878 00006DAA 29D7                <2> 	sub edi, edx
  8879 00006DAC 49                  <2> 	dec ecx
  8880 00006DAD 81F900000000        <2> 	cmp ecx, 0
  8881 00006DB3 77A0                <2> 	ja ldxbmp2
  8882                              <2> endedbmp:
  8883 00006DB5 E844030000          <2> 	call switchmousepos2
  8884 00006DBA C3                  <2> 	ret
  8885                              <2> 	
  8886 00006DBB 00000000            <2> 	bmpend dd 0
  8887                              <1> %include "source/gui/circle.asm"
  8888                              <2> drawcircle:	;center in (dx,cx), color in si, radius in ax
  8889 00006DBF 55                  <2> 	push ebp
  8890 00006DC0 663D0000            <2> 	cmp ax, 0
  8891 00006DC4 770A                <2> 	ja .nozerocircle
  8892 00006DC6 E8F61B0000          <2> 	call putpixel	;the easiest circle ever
  8893 00006DCB E9F7000000          <2> 	jmp .done
  8894                              <2> .nozerocircle:
  8895 00006DD0 6689F5              <2> 	mov bp, si
  8896 00006DD3 6650                <2> 	push ax
  8897 00006DD5 E8281C0000          <2> 	call getpixelmem
  8898 00006DDA 31C0                <2> 	xor eax, eax
  8899 00006DDC 6658                <2> 	pop ax
  8900 00006DDE BE01000000          <2> 	mov esi, 1
  8901 00006DE3 29C6                <2> 	sub esi, eax
  8902 00006DE5 89C1                <2> 	mov ecx, eax
  8903 00006DE7 31C0                <2> 	xor eax, eax
  8904 00006DE9 66A1[485B0000]      <2> 	mov ax, [resolutionx2]
  8905 00006DEF F7E1                <2> 	mul ecx
  8906 00006DF1 50                  <2> 	push eax
  8907 00006DF2 31D2                <2> 	xor edx, edx
  8908 00006DF4 01C7                <2> 	add edi, eax
  8909 00006DF6 66892F              <2> 	mov [edi], bp
  8910 00006DF9 29C7                <2> 	sub edi, eax
  8911 00006DFB 29C7                <2> 	sub edi, eax
  8912 00006DFD 66892F              <2> 	mov [edi], bp
  8913 00006E00 01C7                <2> 	add edi, eax
  8914 00006E02 D1E1                <2> 	shl ecx, 1
  8915 00006E04 01CF                <2> 	add edi, ecx
  8916 00006E06 66892F              <2> 	mov [edi], bp
  8917 00006E09 D1E1                <2> 	shl ecx, 1
  8918 00006E0B 29CF                <2> 	sub edi, ecx
  8919 00006E0D 66892F              <2> 	mov [edi], bp
  8920 00006E10 D1E9                <2> 	shr ecx, 1
  8921 00006E12 01CF                <2> 	add edi, ecx
  8922 00006E14 D1E9                <2> 	shr ecx, 1
  8923 00006E16 B802000000          <2> 	mov eax, 2
  8924 00006E1B F7E1                <2> 	mul ecx
  8925 00006E1D 48                  <2> 	dec eax
  8926 00006E1E F7D0                <2> 	not eax ;make it negative
  8927 00006E20 A3[CD6E0000]        <2> 	mov [.ddF_y], eax
  8928 00006E25 58                  <2> 	pop eax
  8929 00006E26 BB01000000          <2> 	mov ebx, 1
  8930 00006E2B 891D[C96E0000]      <2> 	mov [.ddF_x], ebx
  8931 00006E31 4B                  <2> 	dec ebx
  8932 00006E32 31D2                <2> 	xor edx, edx
  8933 00006E34 E904000000          <2> 	jmp .lp
  8934                              <2> .lpb:
  8935 00006E39 D1EA                <2> 	shr edx, 1
  8936 00006E3B D1E9                <2> 	shr ecx, 1
  8937                              <2> .lp:	;it starts this with the center in edi
  8938                              <2> 		;color in bp
  8939                              <2> 		;ddF_x in memory
  8940                              <2> 		;x*resolutionx2 in ebx
  8941                              <2> 		;x in edx
  8942                              <2> 		;ddF_y in memory
  8943                              <2> 		;y*resolutionx2 in eax
  8944                              <2> 		;f in esi
  8945                              <2> 		;y in ecx
  8946 00006E3D 81FE00000080        <2> 	cmp esi, 0x80000000 ;this means it is not negative
  8947 00006E43 7717                <2> 	ja	.noddF_y
  8948 00006E45 49                  <2> 	dec ecx
  8949 00006E46 2B05[485B0000]      <2> 	sub eax, [resolutionx2]
  8950 00006E4C 8105[CD6E0000]0200- <2> 	add dword [.ddF_y], 2
  8951 00006E54 0000                <2>
  8952 00006E56 0335[CD6E0000]      <2> 	add esi, [.ddF_y]
  8953                              <2> .noddF_y:
  8954 00006E5C 42                  <2> 	inc edx
  8955 00006E5D 031D[485B0000]      <2> 	add ebx, [resolutionx2]
  8956 00006E63 8105[C96E0000]0200- <2> 	add dword [.ddF_x], 2
  8957 00006E6B 0000                <2>
  8958 00006E6D 0335[C96E0000]      <2> 	add esi, [.ddF_x]
  8959                              <2> 
  8960 00006E73 D1E2                <2> 	shl edx, 1
  8961 00006E75 D1E1                <2> 	shl ecx, 1
  8962 00006E77 01D7                <2> 	add edi, edx
  8963 00006E79 01C7                <2> 	add edi, eax
  8964 00006E7B 66892F              <2> 	mov [edi], bp	;(cx+x,cy+y)
  8965 00006E7E D1E2                <2> 	shl edx, 1
  8966 00006E80 29D7                <2> 	sub edi, edx
  8967 00006E82 66892F              <2> 	mov [edi], bp	;(cx-x,cy+y)
  8968 00006E85 D1E0                <2> 	shl eax, 1
  8969 00006E87 29C7                <2> 	sub edi, eax
  8970 00006E89 66892F              <2> 	mov [edi], bp	;(cx-x,cy-y)
  8971 00006E8C 01D7                <2> 	add edi, edx
  8972 00006E8E 66892F              <2> 	mov [edi], bp	;(cx+x,cy-y)
  8973 00006E91 D1E8                <2> 	shr eax, 1
  8974 00006E93 D1EA                <2> 	shr edx, 1
  8975 00006E95 01C7                <2> 	add edi, eax
  8976 00006E97 29D7                <2> 	sub edi, edx
  8977                              <2> 
  8978 00006E99 39D1                <2> 	cmp ecx, edx
  8979 00006E9B 749C                <2> 	je .lpb
  8980                              <2> 
  8981 00006E9D 01DF                <2> 	add edi, ebx
  8982 00006E9F 01CF                <2> 	add edi, ecx
  8983 00006EA1 66892F              <2> 	mov [edi], bp	;(cx+y,cy+x)
  8984 00006EA4 D1E1                <2> 	shl ecx, 1
  8985 00006EA6 29CF                <2> 	sub edi, ecx
  8986 00006EA8 66892F              <2> 	mov [edi], bp	;(cx-y,cy+x)
  8987 00006EAB D1E3                <2> 	shl ebx, 1
  8988 00006EAD 29DF                <2> 	sub edi, ebx
  8989 00006EAF 66892F              <2> 	mov [edi], bp	;(cx-y,cy-x)
  8990 00006EB2 01CF                <2> 	add edi, ecx
  8991 00006EB4 66892F              <2> 	mov [edi], bp	;(cx+y,cy-x)
  8992 00006EB7 D1EB                <2> 	shr ebx, 1
  8993 00006EB9 D1E9                <2> 	shr ecx, 1
  8994 00006EBB 01DF                <2> 	add edi, ebx
  8995 00006EBD 29CF                <2> 	sub edi, ecx
  8996 00006EBF 39CA                <2> 	cmp edx, ecx
  8997 00006EC1 0F8272FFFFFF        <2> 	jb .lpb
  8998                              <2> .done:
  8999 00006EC7 5D                  <2> 	pop ebp
  9000 00006EC8 C3                  <2> 	ret
  9001                              <2> 	
  9002 00006EC9 00000000            <2> .ddF_x dd 0
  9003 00006ECD 00000000            <2> .ddF_y dd 0
  9004                              <2> 
  9005                              <2> fillcircle:	;center in (dx,cx), color in si, radius in ax
  9006 00006ED1 55                  <2> 	push ebp
  9007 00006ED2 663D0000            <2> 	cmp ax, 0
  9008 00006ED6 770A                <2> 	ja .nozerocircle
  9009 00006ED8 E8E41A0000          <2> 	call putpixel	;the easiest circle ever
  9010 00006EDD E95A010000          <2> 	jmp .done
  9011                              <2> .nozerocircle:
  9012 00006EE2 6689F5              <2> 	mov bp, si
  9013 00006EE5 6650                <2> 	push ax
  9014 00006EE7 E8161B0000          <2> 	call getpixelmem
  9015 00006EEC 31C0                <2> 	xor eax, eax
  9016 00006EEE 6658                <2> 	pop ax
  9017 00006EF0 BE01000000          <2> 	mov esi, 1
  9018 00006EF5 29C6                <2> 	sub esi, eax
  9019 00006EF7 89C1                <2> 	mov ecx, eax
  9020 00006EF9 31C0                <2> 	xor eax, eax
  9021 00006EFB 66A1[485B0000]      <2> 	mov ax, [resolutionx2]
  9022 00006F01 F7E1                <2> 	mul ecx
  9023 00006F03 50                  <2> 	push eax
  9024 00006F04 31D2                <2> 	xor edx, edx
  9025 00006F06 01C7                <2> 	add edi, eax
  9026 00006F08 66892F              <2> 	mov [edi], bp
  9027 00006F0B 29C7                <2> 	sub edi, eax
  9028 00006F0D 29C7                <2> 	sub edi, eax
  9029 00006F0F 66892F              <2> 	mov [edi], bp
  9030 00006F12 01C7                <2> 	add edi, eax
  9031 00006F14 D1E1                <2> 	shl ecx, 1
  9032 00006F16 01CF                <2> 	add edi, ecx
  9033 00006F18 51                  <2> 	push ecx
  9034                              <2> .s0:
  9035 00006F19 66892F              <2> 	mov [edi], bp
  9036 00006F1C 81EF02000000        <2> 	sub edi, 2
  9037 00006F22 49                  <2> 	dec ecx
  9038 00006F23 81F900000000        <2> 	cmp ecx, 0
  9039 00006F29 75EE                <2> 	jne .s0
  9040 00006F2B 66892F              <2> 	mov [edi], bp
  9041 00006F2E 59                  <2> 	pop ecx
  9042 00006F2F 01CF                <2> 	add edi, ecx
  9043 00006F31 D1E9                <2> 	shr ecx, 1
  9044 00006F33 B802000000          <2> 	mov eax, 2
  9045 00006F38 F7E1                <2> 	mul ecx
  9046 00006F3A 48                  <2> 	dec eax
  9047 00006F3B F7D0                <2> 	not eax ;make it negative
  9048 00006F3D A3[42700000]        <2> 	mov [.ddF_y], eax
  9049 00006F42 58                  <2> 	pop eax
  9050 00006F43 BB01000000          <2> 	mov ebx, 1
  9051 00006F48 891D[3E700000]      <2> 	mov [.ddF_x], ebx
  9052 00006F4E 4B                  <2> 	dec ebx
  9053 00006F4F 31D2                <2> 	xor edx, edx
  9054 00006F51 E904000000          <2> 	jmp .lp
  9055                              <2> .lpb:
  9056 00006F56 D1EA                <2> 	shr edx, 1
  9057 00006F58 D1E9                <2> 	shr ecx, 1
  9058                              <2> .lp:	;it starts this with the center in edi
  9059                              <2> 		;color in bp
  9060                              <2> 		;ddF_x in memory
  9061                              <2> 		;x*resolutionx2 in ebx
  9062                              <2> 		;x in edx
  9063                              <2> 		;ddF_y in memory
  9064                              <2> 		;y*resolutionx2 in eax
  9065                              <2> 		;f in esi
  9066                              <2> 		;y in ecx
  9067 00006F5A 81FE00000080        <2> 	cmp esi, 0x80000000 ;this means it is not negative
  9068 00006F60 7717                <2> 	ja	.noddF_y
  9069 00006F62 49                  <2> 	dec ecx
  9070 00006F63 2B05[485B0000]      <2> 	sub eax, [resolutionx2]
  9071 00006F69 8105[42700000]0200- <2> 	add dword [.ddF_y], 2
  9072 00006F71 0000                <2>
  9073 00006F73 0335[42700000]      <2> 	add esi, [.ddF_y]
  9074                              <2> .noddF_y:
  9075 00006F79 42                  <2> 	inc edx
  9076 00006F7A 031D[485B0000]      <2> 	add ebx, [resolutionx2]
  9077 00006F80 8105[3E700000]0200- <2> 	add dword [.ddF_x], 2
  9078 00006F88 0000                <2>
  9079 00006F8A 0335[3E700000]      <2> 	add esi, [.ddF_x]
  9080                              <2> 
  9081 00006F90 D1E2                <2> 	shl edx, 1
  9082 00006F92 D1E1                <2> 	shl ecx, 1
  9083 00006F94 52                  <2> 	push edx
  9084 00006F95 29D7                <2> 	sub edi, edx
  9085 00006F97 01C7                <2> 	add edi, eax
  9086 00006F99 81FA00000000        <2> 	cmp edx, 0
  9087 00006F9F 7412                <2> 	je .nos1
  9088                              <2> .s1:
  9089 00006FA1 66892F              <2> 	mov [edi], bp	;(cx-x,cy+y)
  9090 00006FA4 81C702000000        <2> 	add edi, 2
  9091 00006FAA 4A                  <2> 	dec edx
  9092 00006FAB 81FA00000000        <2> 	cmp edx, 0
  9093 00006FB1 75EE                <2> 	jne .s1
  9094                              <2> .nos1:
  9095 00006FB3 66892F              <2> 	mov [edi], bp
  9096 00006FB6 5A                  <2> 	pop edx
  9097 00006FB7 52                  <2> 	push edx
  9098 00006FB8 29C7                <2> 	sub edi, eax
  9099 00006FBA 29C7                <2> 	sub edi, eax
  9100 00006FBC 81FA00000000        <2> 	cmp edx, 0
  9101 00006FC2 7412                <2> 	je .nos2
  9102                              <2> .s2:
  9103 00006FC4 66892F              <2> 	mov [edi], bp	;(cx+x,cy-y)
  9104 00006FC7 81EF02000000        <2> 	sub edi, 2
  9105 00006FCD 4A                  <2> 	dec edx
  9106 00006FCE 81FA00000000        <2> 	cmp edx, 0
  9107 00006FD4 75EE                <2> 	jne .s2
  9108                              <2> .nos2:
  9109 00006FD6 66892F              <2> 	mov [edi], bp
  9110 00006FD9 5A                  <2> 	pop edx
  9111 00006FDA 01C7                <2> 	add edi, eax	;(cx-x,cy-y)
  9112 00006FDC 01D7                <2> 	add edi, edx
  9113                              <2> 
  9114 00006FDE 39D1                <2> 	cmp ecx, edx
  9115 00006FE0 0F8470FFFFFF        <2> 	je .lpb
  9116                              <2> 
  9117 00006FE6 51                  <2> 	push ecx
  9118 00006FE7 01DF                <2> 	add edi, ebx
  9119 00006FE9 29CF                <2> 	sub edi, ecx
  9120 00006FEB 81F900000000        <2> 	cmp ecx, 0
  9121 00006FF1 7412                <2> 	je .nos3
  9122                              <2> .s3:
  9123 00006FF3 66892F              <2> 	mov [edi], bp	;(cx-y,cy+x)
  9124 00006FF6 81C702000000        <2> 	add edi, 2
  9125 00006FFC 49                  <2> 	dec ecx
  9126 00006FFD 81F900000000        <2> 	cmp ecx, 0
  9127 00007003 75EE                <2> 	jne .s3
  9128                              <2> .nos3:
  9129 00007005 66892F              <2> 	mov [edi], bp
  9130 00007008 59                  <2> 	pop ecx
  9131 00007009 51                  <2> 	push ecx
  9132 0000700A 29DF                <2> 	sub edi, ebx
  9133 0000700C 29DF                <2> 	sub edi, ebx
  9134 0000700E 81F900000000        <2> 	cmp ecx, 0
  9135 00007014 7412                <2> 	je .nos4
  9136                              <2> .s4:
  9137 00007016 66892F              <2> 	mov [edi], bp	;(cx+y,cy-x)
  9138 00007019 81EF02000000        <2> 	sub edi, 2
  9139 0000701F 49                  <2> 	dec ecx
  9140 00007020 81F900000000        <2> 	cmp ecx, 0
  9141 00007026 75EE                <2> 	jne .s4
  9142                              <2> .nos4:
  9143 00007028 66892F              <2> 	mov [edi], bp
  9144 0000702B 59                  <2> 	pop ecx
  9145 0000702C 01DF                <2> 	add edi, ebx	;(cx-y,cy-x)
  9146 0000702E 01CF                <2> 	add edi, ecx
  9147                              <2> 
  9148 00007030 D1EA                <2> 	shr edx, 1
  9149 00007032 D1E9                <2> 	shr ecx, 1
  9150 00007034 39CA                <2> 	cmp edx, ecx
  9151 00007036 0F821EFFFFFF        <2> 	jb .lp
  9152                              <2> .done:
  9153 0000703C 5D                  <2> 	pop ebp
  9154 0000703D C3                  <2> 	ret
  9155                              <2> 	
  9156 0000703E 00000000            <2> .ddF_x dd 0
  9157 00007042 00000000            <2> .ddF_y dd 0
  9158                              <1> %include "source/gui/cursor.asm"
  9159                              <2> clearmousecursor:
  9160 00007046 BE[AE730000]        <2> 		mov esi, background
  9161 0000704B 8B3D[705A0000]      <2> 		mov edi, [physbaseptr]
  9162 00007051 31D2                <2> 		xor edx, edx
  9163 00007053 31C9                <2> 		xor ecx, ecx
  9164 00007055 668B15[3A5D0000]    <2> 		mov dx, [lastmouseposition]
  9165 0000705C 668B0D[3C5D0000]    <2> 		mov cx, [lastmouseposition + 2]
  9166 00007063 01D7                <2> 		add edi, edx
  9167 00007065 31D2                <2> 		xor edx, edx
  9168 00007067 668B15[485B0000]    <2> 		mov dx, [resolutionx2]
  9169 0000706E 81F900000000        <2> 		cmp ecx, 0
  9170 00007074 7408                <2> 		je .nomul
  9171 00007076 52                  <2> 		push edx
  9172 00007077 89D0                <2> 		mov eax, edx
  9173 00007079 F7E1                <2> 		mul ecx
  9174 0000707B 01C7                <2> 		add edi, eax
  9175 0000707D 5A                  <2> 		pop edx
  9176                              <2> .nomul:
  9177                              <2> %ifdef 	gui.background
  9178                              <2> 		cmp dword [backgroundimage], 0
  9179                              <2> 		je .noyclr
  9180                              <2> 		mov esi, [backgroundimage]
  9181                              <2> 		sub edi, [physbaseptr]
  9182                              <2> 		add esi, edi
  9183                              <2> 		add edi, [physbaseptr]
  9184                              <2> .backlp:
  9185                              <2> 		xor ebx, ebx
  9186                              <2> .noyback:
  9187                              <2> 		mov eax, [esi + ebx]
  9188                              <2> 		mov [edi + ebx], eax
  9189                              <2> 		add ebx, 4
  9190                              <2> 		cmp ebx, 16
  9191                              <2> 		jne .noyback
  9192                              <2> 		add edi, edx
  9193                              <2> 		add esi, edx
  9194                              <2> 		inc cx
  9195                              <2> 		cmp cx, 16
  9196                              <2> 		jb .backlp
  9197                              <2> 		ret
  9198                              <2> %endif
  9199                              <2> .noyclr:
  9200 0000707E 668B06              <2> 		mov ax, [esi]
  9201 00007081 C1C010              <2> 		rol eax, 16
  9202 00007084 668B06              <2> 		mov ax, [esi]
  9203 00007087 8907                <2> 		mov [edi], eax
  9204 00007089 894704              <2> 		mov [edi + 4], eax
  9205 0000708C 894708              <2> 		mov [edi + 8], eax
  9206 0000708F 89470C              <2> 		mov [edi + 12], eax
  9207 00007092 01D7                <2> 		add edi, edx
  9208 00007094 6641                <2> 		inc cx
  9209 00007096 6681F91000          <2> 		cmp cx, 16
  9210 0000709B 72E1                <2> 		jb .noyclr
  9211 0000709D C3                  <2> 		ret
  9212                              <2> 
  9213                              <2> switchmousepos:		;;switch were the mouse is located
  9214 0000709E BE[9DD40300]        <2> 		mov esi, mousecolorbuf
  9215 000070A3 8B3D[705A0000]      <2> 		mov edi, [physbaseptr]
  9216 000070A9 31D2                <2> 		xor edx, edx
  9217 000070AB 31C9                <2> 		xor ecx, ecx
  9218 000070AD 668B15[3A5D0000]    <2> 		mov dx, [lastmouseposition]
  9219 000070B4 668B0D[3C5D0000]    <2> 		mov cx, [lastmouseposition + 2]
  9220 000070BB 01D7                <2> 		add edi, edx
  9221 000070BD 31D2                <2> 		xor edx, edx
  9222 000070BF 668B15[485B0000]    <2> 		mov dx, [resolutionx2]
  9223 000070C6 6681F90000          <2> 		cmp cx, 0
  9224 000070CB 740B                <2> 		je noswmsy
  9225 000070CD 01D7                <2> swmsy:		add edi, edx
  9226 000070CF 6649                <2> 		dec cx
  9227 000070D1 6681F90000          <2> 		cmp cx, 0
  9228 000070D6 75F5                <2> 		jne swmsy
  9229 000070D8 8B06                <2> noswmsy:	mov eax, [esi]
  9230 000070DA 8B5E04              <2> 		mov ebx, [esi + 4]
  9231 000070DD 8907                <2> 		mov [edi], eax
  9232 000070DF 895F04              <2> 		mov [edi + 4], ebx
  9233 000070E2 8B4608              <2> 		mov eax, [esi + 8]
  9234 000070E5 8B5E0C              <2> 		mov ebx, [esi + 12]
  9235 000070E8 894708              <2> 		mov [edi + 8], eax
  9236 000070EB 895F0C              <2> 		mov [edi + 12], ebx
  9237 000070EE 01D7                <2> 		add edi, edx
  9238 000070F0 81C610000000        <2> 		add esi, 16
  9239 000070F6 81FE[9DD50300]      <2> 		cmp esi, mcolorend
  9240 000070FC 72DA                <2> 		jb noswmsy
  9241                              <2> 		
  9242                              <2> switchmousepos2:
  9243 000070FE BE[9DD40300]        <2> 		mov esi, mousecolorbuf
  9244 00007103 8B3D[705A0000]      <2> 		mov edi, [physbaseptr]
  9245 00007109 31D2                <2> 		xor edx, edx
  9246 0000710B 31C9                <2> 		xor ecx, ecx
  9247 0000710D 668B15[3E5D0000]    <2> 		mov dx, [mousecursorposition]
  9248 00007114 668B0D[405D0000]    <2> 		mov cx, [mousecursorposition + 2]
  9249 0000711B 01D7                <2> 		add edi, edx
  9250 0000711D 31D2                <2> 		xor edx, edx
  9251 0000711F 668B15[485B0000]    <2> 		mov dx, [resolutionx2]
  9252 00007126 6681F90000          <2> 		cmp cx, 0
  9253 0000712B 740B                <2> 		je noswmsy2
  9254 0000712D 01D7                <2> swmsy2:		add edi, edx
  9255 0000712F 6649                <2> 		dec cx
  9256 00007131 6681F90000          <2> 		cmp cx, 0
  9257 00007136 75F5                <2> 		jne swmsy2
  9258 00007138 8B07                <2> noswmsy2:	mov eax, [edi]
  9259 0000713A 8B5F04              <2> 		mov ebx, [edi + 4]
  9260 0000713D 8906                <2> 		mov [esi], eax
  9261 0000713F 895E04              <2> 		mov [esi + 4], ebx
  9262 00007142 8B4708              <2> 		mov eax, [edi + 8]
  9263 00007145 8B5F0C              <2> 		mov ebx, [edi + 12]
  9264 00007148 894608              <2> 		mov [esi + 8], eax
  9265 0000714B 895E0C              <2> 		mov [esi + 12], ebx
  9266 0000714E 01D7                <2> 		add edi, edx
  9267 00007150 81C610000000        <2> 		add esi, 16
  9268 00007156 81FE[9DD50300]      <2> 		cmp esi, mcolorend
  9269 0000715C 72DA                <2> 		jb noswmsy2
  9270 0000715E C3                  <2> 		ret
  9271                              <2> 		
  9272                              <1> %include "source/gui/icon.asm"
  9273 0000715F 0000                <2> iconcolor dw 0
  9274                              <2> 	showicon:	;;icon in si, position in (dx,cx), selected in ax, code in bx
  9275 00007161 A2[2A8A0000]        <2> 		mov [iconselected], al
  9276 00007166 8025[2A8A0000]01    <2> 		and byte [iconselected], 1
  9277 0000716D B401                <2> 		mov ah, 1
  9278 0000716F E8DF150000          <2> 		call graphicsadd
  9279                              <2> 	showicon2:
  9280 00007174 8B3D[705A0000]      <2> 		mov edi, [physbaseptr]
  9281 0000717A 6601D2              <2> 		add dx, dx
  9282 0000717D 663B15[485B0000]    <2> 		cmp dx, [resolutionx2]
  9283 00007184 720C                <2> 		jb screenxgood
  9284 00007186 668B15[485B0000]    <2> 		mov dx, [resolutionx2]
  9285 0000718D 6681EA4000          <2> 		sub dx, 64
  9286                              <2> 	screenxgood:
  9287 00007192 6681F90000          <2> 		cmp cx, 0
  9288 00007197 742B                <2> 		je noscreenygoodchk
  9289 00007199 663B0D[5C5A0000]    <2> 		cmp cx, [resolutiony]
  9290 000071A0 720C                <2> 		jb screenygood
  9291 000071A2 668B0D[5C5A0000]    <2> 		mov cx, [resolutiony]
  9292 000071A9 6681E92000          <2> 		sub cx, 32
  9293                              <2> 	screenygood:
  9294 000071AE 50                  <2> 		push eax
  9295 000071AF 52                  <2> 		push edx
  9296 000071B0 31C0                <2> 		xor eax, eax
  9297 000071B2 31DB                <2> 		xor ebx, ebx
  9298 000071B4 668B1D[485B0000]    <2> 		mov bx, [resolutionx2]
  9299 000071BB 6689C8              <2> 		mov ax, cx
  9300 000071BE F7E3                <2> 		mul ebx
  9301 000071C0 01C7                <2> 		add edi, eax
  9302 000071C2 5A                  <2> 		pop edx
  9303 000071C3 58                  <2> 		pop eax
  9304                              <2> 	noscreenygoodchk:
  9305 000071C4 31DB                <2> 		xor ebx, ebx
  9306 000071C6 6689D3              <2> 		mov bx, dx
  9307 000071C9 01DF                <2> 		add edi, ebx
  9308 000071CB 6631C9              <2> 		xor cx, cx
  9309 000071CE 668B06              <2> 		mov ax, [esi]
  9310 000071D1 81C602000000        <2> 		add esi, 2
  9311 000071D7 66A3[5F710000]      <2> 		mov [iconcolor], ax
  9312                              <2> 	writeicon:
  9313 000071DD 8B06                <2> 		mov eax, [esi]
  9314 000071DF D1C0                <2> 		rol eax, 1
  9315 000071E1 30C9                <2> 		xor cl, cl
  9316                              <2> 	writeiconline:
  9317 000071E3 B201                <2> 		mov dl, 1
  9318 000071E5 20C2                <2> 		and dl, al
  9319 000071E7 3215[2A8A0000]      <2> 		xor dl, [iconselected]
  9320 000071ED 668B1D[AE730000]    <2> 		mov bx, [background]
  9321 000071F4 66891F              <2> 		mov [edi], bx
  9322 000071F7 80FA00              <2> 		cmp dl, 0
  9323 000071FA 740A                <2> 		je noiconline
  9324 000071FC 668B15[5F710000]    <2> 		mov dx, [iconcolor]
  9325 00007203 668917              <2> 		mov [edi], dx
  9326                              <2> 	noiconline:
  9327 00007206 81C702000000        <2> 		add edi, 2
  9328 0000720C D1C0                <2> 		rol eax, 1
  9329 0000720E FEC1                <2> 		inc cl
  9330 00007210 80F920              <2> 		cmp cl, 32
  9331 00007213 72CE                <2> 		jb writeiconline
  9332 00007215 81C604000000        <2> 		add esi, 4
  9333 0000721B FEC5                <2> 		inc ch
  9334 0000721D 31D2                <2> 		xor edx, edx
  9335 0000721F 668B15[485B0000]    <2> 		mov dx, [resolutionx2]
  9336 00007226 01D7                <2> 		add edi, edx
  9337 00007228 81EF40000000        <2> 		sub edi, 64
  9338 0000722E 80FD20              <2> 		cmp ch, 32
  9339 00007231 72AA                <2> 		jb writeicon
  9340 00007233 31C0                <2> 		xor eax, eax
  9341 00007235 C3                  <2> 		ret
  9342                              <1> %include "source/gui/line.asm"
  9343                              <2> drawline:	;from (bx,ax) to (dx,cx), color in si
  9344 00007236 668935[58730000]    <2> 	mov [.color], si
  9345 0000723D C605[5A730000]00    <2> 	mov byte [.steep], 0
  9346 00007244 C605[5B730000]00    <2> 	mov byte [.yreversed], 0
  9347 0000724B E907000000          <2> 	jmp .notsteep
  9348                              <2> .steeploop:
  9349 00007250 C605[5A730000]01    <2> 	mov byte [.steep], 1
  9350                              <2> .notsteep:
  9351 00007257 31FF                <2> 	xor edi, edi
  9352 00007259 31F6                <2> 	xor esi, esi
  9353 0000725B 6639DA              <2> 	cmp dx, bx
  9354 0000725E 7705                <2> 	ja .noreversex
  9355 00007260 6687D3              <2> 	xchg dx, bx
  9356 00007263 6691                <2> 	xchg cx, ax
  9357                              <2> .noreversex:
  9358 00007265 6689D7              <2> 	mov di, dx
  9359 00007268 6629DF              <2> 	sub di, bx
  9360                              <2> 	
  9361 0000726B 6639C1              <2> 	cmp cx, ax
  9362 0000726E 720B                <2> 	jb .reversey
  9363 00007270 6689CE              <2> 	mov si, cx
  9364 00007273 6629C6              <2> 	sub si, ax
  9365 00007276 E90D000000          <2> 	jmp .normal
  9366                              <2> .reversey:
  9367 0000727B C605[5B730000]02    <2> 	mov byte [.yreversed], 2
  9368 00007282 6689C6              <2> 	mov si, ax
  9369 00007285 6629CE              <2> 	sub si, cx	
  9370                              <2> .normal:
  9371 00007288 6687CA              <2> 	xchg cx, dx
  9372 0000728B 6693                <2> 	xchg ax, bx
  9373 0000728D 6639FE              <2> 	cmp si, di
  9374 00007290 77BE                <2> 	ja .steeploop
  9375 00007292 6687CA              <2> 	xchg cx, dx
  9376 00007295 6693                <2> 	xchg ax, bx
  9377                              <2> 	
  9378 00007297 6691                <2> 	xchg ax, cx
  9379 00007299 6687DA              <2> 	xchg bx, dx
  9380 0000729C 66893D[5E730000]    <2> 	mov [.xdelta], di
  9381 000072A3 668935[60730000]    <2> 	mov [.ydelta], si
  9382 000072AA 668B35[58730000]    <2> 	mov si, [.color]
  9383 000072B1 66891D[5C730000]    <2> 	mov [.endline], bx
  9384 000072B8 6652                <2> 	push dx
  9385 000072BA 6651                <2> 	push cx
  9386 000072BC 6687CA              <2> 	xchg cx, dx
  9387 000072BF 803D[5A730000]01    <2> 	cmp byte [.steep], 1
  9388 000072C6 7403                <2> 	je .xchg
  9389 000072C8 6687D1              <2> 	xchg dx, cx
  9390                              <2> .xchg:
  9391 000072CB E832170000          <2> 	call getpixelmem	;get pointer to pixel in edi from (dx,cx)
  9392 000072D0 6659                <2> 	pop cx
  9393 000072D2 665A                <2> 	pop dx
  9394 000072D4 31C0                <2> 	xor eax, eax
  9395 000072D6 66A1[5E730000]      <2> 	mov ax, [.xdelta]
  9396 000072DC 66D1E8              <2> 	shr ax, 1
  9397 000072DF 8A0D[5A730000]      <2> 	mov cl, [.steep]
  9398 000072E5 0A0D[5B730000]      <2> 	or cl, [.yreversed]
  9399 000072EB 55                  <2> 	push ebp
  9400 000072EC 668B2D[5C730000]    <2> 	mov bp, [.endline]
  9401 000072F3 6629D5              <2> 	sub bp, dx
  9402 000072F6 668B15[60730000]    <2> 	mov dx, [.ydelta]
  9403                              <2> .lp:
  9404 000072FD 668937              <2> 	mov [edi], si
  9405 00007300 6639D0              <2> 	cmp ax, dx
  9406 00007303 7332                <2> 	jae .noaddx
  9407 00007305 F6C102              <2> 	test cl, 2
  9408 00007308 7414                <2> 	jz .nodecy
  9409 0000730A F6C101              <2> 	test cl, 1
  9410 0000730D 7509                <2> 	jnz .steepy
  9411 0000730F 29DF                <2> 	sub edi, ebx
  9412 00007311 29DF                <2> 	sub edi, ebx
  9413 00007313 E906000000          <2> 	jmp .nodecy
  9414                              <2> .steepy:
  9415 00007318 81EF04000000        <2> 	sub edi, 4
  9416                              <2> .nodecy:
  9417 0000731E 660305[5E730000]    <2> 	add ax, [.xdelta]
  9418 00007325 F6C101              <2> 	test cl, 1
  9419 00007328 7507                <2> 	jnz .steepx
  9420 0000732A 01DF                <2> 	add edi, ebx
  9421 0000732C E906000000          <2> 	jmp .noaddx
  9422                              <2> .steepx:
  9423 00007331 81C702000000        <2> 	add edi, 2
  9424                              <2> .noaddx:
  9425 00007337 6629D0              <2> 	sub ax, dx
  9426 0000733A 664D                <2> 	dec bp
  9427 0000733C 81C702000000        <2> 	add edi, 2
  9428 00007342 F6C101              <2> 	test cl, 1
  9429 00007345 7408                <2> 	jz .nosteepx
  9430 00007347 81EF02000000        <2> 	sub edi, 2
  9431 0000734D 01DF                <2> 	add edi, ebx
  9432                              <2> .nosteepx:
  9433 0000734F 6681FD0000          <2> 	cmp bp, 0
  9434 00007354 75A7                <2> 	jne .lp
  9435                              <2> .done:
  9436 00007356 5D                  <2> 	pop ebp
  9437 00007357 C3                  <2> 	ret
  9438                              <2> 	
  9439 00007358 0000                <2> .color dw 0
  9440 0000735A 00                  <2> .steep db 0
  9441 0000735B 00                  <2> .yreversed db 0
  9442 0000735C 0000                <2> .endline dw 0
  9443 0000735E 0000                <2> .xdelta dw 0
  9444 00007360 0000                <2> .ydelta dw 0
  9445                              <1> %include "source/gui/refresh.asm"
  9446                              <2> guiclear:
  9447 00007362 8B3D[705A0000]      <2> 	mov edi, [physbaseptr]
  9448 00007368 668B15[5A5A0000]    <2> 	mov dx, [resolutionx]
  9449 0000736F 668B0D[5C5A0000]    <2> 	mov cx, [resolutiony]
  9450 00007376 668B1D[AE730000]    <2> 	mov bx, [background]
  9451 0000737D 66891D[B0730000]    <2> 	mov [background + 2], bx
  9452                              <2> %ifdef gui.background
  9453                              <2> 	cmp dword [backgroundimage], 0
  9454                              <2> 	je guiclear.noback
  9455                              <2> 		mov esi, [backgroundimage]
  9456                              <2> 	.lp:
  9457                              <2> 		;movdqa xmm0, [esi]	;the next 4 lines are for SSE
  9458                              <2> 		;movdqa [edi], xmm0
  9459                              <2> 		;add esi, 16
  9460                              <2> 		;add edi, 16
  9461                              <2> 		;sub dx, 8
  9462                              <2> 		mov eax, [esi]
  9463                              <2> 		mov [edi], eax
  9464                              <2> 		add esi, 4
  9465                              <2> 		add edi, 4
  9466                              <2> 		sub dx, 2
  9467                              <2> 		cmp dx, 0
  9468                              <2> 		ja .lp
  9469                              <2> 		dec cx
  9470                              <2> 		mov dx, [resolutionx]
  9471                              <2> 		cmp cx, 0
  9472                              <2> 		ja .lp
  9473                              <2> 		ret
  9474                              <2> 	backgroundimage dd 0
  9475                              <2> %endif
  9476                              <2> guiclear.noback:
  9477 00007384 A1[AE730000]        <2> 	mov eax, [background]
  9478                              <2> guiclearloop:
  9479 00007389 8907                <2> 	mov [edi], eax
  9480 0000738B 81C704000000        <2> 	add edi, 4
  9481 00007391 6681EA0200          <2> 	sub dx, 2
  9482 00007396 6681FA0000          <2> 	cmp dx, 0
  9483 0000739B 77EC                <2> 	ja guiclearloop
  9484 0000739D 6649                <2> 	dec cx
  9485 0000739F 668B15[5A5A0000]    <2> 	mov dx, [resolutionx]
  9486 000073A6 6681F90000          <2> 	cmp cx, 0
  9487 000073AB 77DC                <2> 	ja guiclearloop
  9488 000073AD C3                  <2> 	ret
  9489                              <2> 
  9490 000073AE CF7B<rept>          <2> background times 2 dw 0111101111001111b
  9491                              <2> 	.original equ 0111101111001111b
  9492                              <2> 
  9493                              <2> reloadallgraphics:
  9494 000073B2 BF[9DD20300]        <2> 		mov edi, graphicstable
  9495                              <2> reloadgraphicsloop:
  9496 000073B7 8B7702              <2> 		mov esi, [edi + 2]
  9497 000073BA 668B5706            <2> 		mov dx, [edi + 6]
  9498 000073BE 668B4F08            <2> 		mov cx, [edi + 8]
  9499 000073C2 668B07              <2> 		mov ax, [edi]
  9500 000073C5 668B5F0A            <2> 		mov bx, [edi + 10]
  9501 000073C9 893D[3F870000]      <2> 		mov [grpctblpos], edi
  9502 000073CF 3B3D[D6810000]      <2> 		cmp edi, [dragging]
  9503 000073D5 741E                <2> 		je loadedgraphic
  9504 000073D7 663D0100            <2> 		cmp ax, 1
  9505 000073DB 0F8436000000        <2> 		je near icongraphic
  9506 000073E1 663D0200            <2> 		cmp ax, 2
  9507 000073E5 0F843C000000        <2> 		je near stringgraphic
  9508 000073EB 663D0300            <2> 		cmp ax, 3
  9509 000073EF 0F8416000000        <2> 		je near windowgraphic
  9510 000073F5 8B3D[3F870000]      <2> loadedgraphic:  mov edi, [grpctblpos]
  9511 000073FB 81C710000000        <2> 		add edi, 16
  9512 00007401 81FF[9DD40300]      <2> 		cmp edi, graphicstableend
  9513 00007407 732E                <2> 		jae donereloadgraphics
  9514 00007409 EBAC                <2> 		jmp reloadgraphicsloop
  9515                              <2> windowgraphic:
  9516 0000740B E827090000          <2> 		call showwindow2
  9517 00007410 E837AAFFFF          <2> 		call cleardouble
  9518 00007415 EBDE                <2> 		jmp loadedgraphic
  9519 00007417 80E301              <2> icongraphic:	and bl, 1
  9520 0000741A 881D[2A8A0000]      <2> 		mov [iconselected], bl
  9521 00007420 E84FFDFFFF          <2> 		call showicon2
  9522 00007425 EBCE                <2> 		jmp loadedgraphic
  9523 00007427 80E301              <2> stringgraphic:  and bl, 1
  9524 0000742A 881D[D2810000]      <2> 		mov [mouseselecton], bl
  9525 00007430 E8CE050000          <2> 		call showstring2
  9526 00007435 EBBE                <2> 		jmp loadedgraphic
  9527                              <2> donereloadgraphics:
  9528 00007437 8B3D[D6810000]      <2> 		mov edi, [dragging]
  9529 0000743D 81FF[9DD20300]      <2> 		cmp edi, graphicstable
  9530 00007443 7226                <2> 		jb notcorrectdrag
  9531 00007445 668B07              <2> 		mov ax, [edi]
  9532 00007448 8B7702              <2> 		mov esi, [edi + 2]
  9533 0000744B 668B5706            <2> 		mov dx, [edi + 6]
  9534 0000744F 668B4F08            <2> 		mov cx, [edi + 8]
  9535 00007453 668B5F0A            <2> 		mov bx, [edi + 10]
  9536 00007457 663D0100            <2> 		cmp ax, 1
  9537 0000745B 750F                <2> 		jne noticondragging
  9538 0000745D 80E301              <2> 		and bl, 1
  9539 00007460 881D[2A8A0000]      <2> 		mov [iconselected], bl
  9540 00007466 E809FDFFFF          <2> 		call showicon2
  9541                              <2> notcorrectdrag:
  9542 0000746B C3                  <2> 		ret
  9543                              <2> 
  9544                              <2> 	noticondragging:
  9545 0000746C 663D0200            <2> 		cmp ax, 2
  9546 00007470 75F9                <2> 		jne notcorrectdrag
  9547 00007472 80E301              <2> 		and bl, 1
  9548 00007475 881D[D2810000]      <2> 		mov [mouseselecton], bl
  9549 0000747B E883050000          <2> 		call showstring2
  9550 00007480 EBE9                <2> 		jmp notcorrectdrag
  9551                              <1> %include "source/gui/square.asm"
  9552                              <2> drawsquare:	;from (bx,ax) to (dx,cx), color in si
  9553 00007482 6639D3              <2> 	cmp bx, dx
  9554 00007485 7303                <2> 	jae .noxchgx
  9555 00007487 6687DA              <2> 	xchg bx, dx
  9556                              <2> .noxchgx:
  9557 0000748A 6639C8              <2> 	cmp ax, cx
  9558 0000748D 7302                <2> 	jae .noxchgy
  9559 0000748F 6691                <2> 	xchg ax, cx
  9560                              <2> .noxchgy:
  9561 00007491 6650                <2> 	push ax
  9562 00007493 6653                <2> 	push bx
  9563 00007495 6652                <2> 	push dx
  9564 00007497 E866150000          <2> 	call getpixelmem	;get pointer to pixel in edi from (dx,cx)
  9565 0000749C 31D2                <2> 	xor edx, edx
  9566 0000749E 665A                <2> 	pop dx
  9567 000074A0 31DB                <2> 	xor ebx, ebx
  9568 000074A2 665B                <2> 	pop bx
  9569 000074A4 6658                <2> 	pop ax
  9570                              <2> .lp0:
  9571 000074A6 6652                <2> 	push dx
  9572                              <2> .lp:
  9573 000074A8 668937              <2> 	mov [edi], si
  9574 000074AB 81C702000000        <2> 	add edi, 2
  9575 000074B1 6642                <2> 	inc dx
  9576 000074B3 6639DA              <2> 	cmp dx, bx
  9577 000074B6 76F0                <2> 	jbe .lp
  9578 000074B8 665A                <2> 	pop dx
  9579 000074BA 81EF02000000        <2> 	sub edi, 2
  9580 000074C0 29DF                <2> 	sub edi, ebx
  9581 000074C2 29DF                <2> 	sub edi, ebx
  9582 000074C4 01D7                <2> 	add edi, edx
  9583 000074C6 01D7                <2> 	add edi, edx
  9584 000074C8 033D[485B0000]      <2> 	add edi, [resolutionx2]
  9585 000074CE 6641                <2> 	inc cx
  9586 000074D0 6639C1              <2> 	cmp cx, ax
  9587 000074D3 7203                <2> 	jb .lp2
  9588 000074D5 74CF                <2> 	je .lp0
  9589 000074D7 C3                  <2> 	ret
  9590                              <2> .lp2:
  9591 000074D8 57                  <2> 	push edi
  9592 000074D9 668937              <2> 	mov [edi], si
  9593 000074DC 29D7                <2> 	sub edi, edx
  9594 000074DE 29D7                <2> 	sub edi, edx
  9595 000074E0 01DF                <2> 	add edi, ebx
  9596 000074E2 01DF                <2> 	add edi, ebx
  9597 000074E4 668937              <2> 	mov [edi], si
  9598 000074E7 5F                  <2> 	pop edi
  9599 000074E8 033D[485B0000]      <2> 	add edi, [resolutionx2]
  9600 000074EE 6641                <2> 	inc cx
  9601 000074F0 6639C1              <2> 	cmp cx, ax
  9602 000074F3 72E3                <2> 	jb .lp2
  9603 000074F5 EBAF                <2> 	jmp .lp0
  9604                              <2> 
  9605                              <2> fillsquare:	;from (bx,ax) to (dx,cx), color in si
  9606 000074F7 6639D3              <2> 	cmp bx, dx
  9607 000074FA 7303                <2> 	jae .noxchgx
  9608 000074FC 6687DA              <2> 	xchg bx, dx
  9609                              <2> .noxchgx:
  9610 000074FF 6639C8              <2> 	cmp ax, cx
  9611 00007502 7302                <2> 	jae .noxchgy
  9612 00007504 6691                <2> 	xchg ax, cx
  9613                              <2> .noxchgy:
  9614 00007506 6650                <2> 	push ax
  9615 00007508 6653                <2> 	push bx
  9616 0000750A 6652                <2> 	push dx
  9617 0000750C E8F1140000          <2> 	call getpixelmem	;get pointer to pixel in edi from (dx,cx)
  9618 00007511 31D2                <2> 	xor edx, edx
  9619 00007513 665A                <2> 	pop dx
  9620 00007515 31DB                <2> 	xor ebx, ebx
  9621 00007517 665B                <2> 	pop bx
  9622 00007519 6658                <2> 	pop ax
  9623                              <2> .lp2:
  9624 0000751B 6652                <2> 	push dx
  9625                              <2> .lp:
  9626 0000751D 668937              <2> 	mov [edi], si
  9627 00007520 81C702000000        <2> 	add edi, 2
  9628 00007526 6642                <2> 	inc dx
  9629 00007528 6639DA              <2> 	cmp dx, bx
  9630 0000752B 76F0                <2> 	jbe .lp
  9631 0000752D 665A                <2> 	pop dx
  9632 0000752F 81EF02000000        <2> 	sub edi, 2
  9633 00007535 29DF                <2> 	sub edi, ebx
  9634 00007537 29DF                <2> 	sub edi, ebx
  9635 00007539 01D7                <2> 	add edi, edx
  9636 0000753B 01D7                <2> 	add edi, edx
  9637 0000753D 033D[485B0000]      <2> 	add edi, [resolutionx2]
  9638 00007543 6641                <2> 	inc cx
  9639 00007545 6639C1              <2> 	cmp cx, ax
  9640 00007548 76D1                <2> 	jbe .lp2
  9641 0000754A C3                  <2> 	ret
  9642                              <1> %include "source/gui/startup.asm"
  9643                              <2> guisetup:
  9644                              <2> 	%ifdef gui.background
  9645                              <2> 	xor ebx, ebx
  9646                              <2> 	mov [backgroundimage], ebx
  9647                              <2> 	%endif
  9648 0000754B E812FEFFFF          <2> 	call guiclear
  9649 00007550 C605[EF8E0000]01    <2> 	mov byte [guion], 1
  9650 00007557 C605[D2810000]00    <2> 	mov byte [mouseselecton], 0
  9651 0000755E 31C0                <2> 	xor eax, eax
  9652 00007560 31DB                <2> 	xor ebx, ebx
  9653 00007562 31C9                <2> 	xor ecx, ecx
  9654 00007564 31D2                <2> 	xor edx, edx
  9655                              <2> 	
  9656 00007566 BE[28770000]        <2> 	mov esi, pacmsg
  9657 0000756B 30E4                <2> 	xor ah, ah
  9658 0000756D B010                <2> 	mov al, 00010000b
  9659 0000756F 31DB                <2> 	xor ebx, ebx
  9660 00007571 66B99000            <2> 	mov cx, 144
  9661 00007575 66BA0400            <2> 	mov dx, 4
  9662 00007579 E872040000          <2> 	call showstring
  9663                              <2> 	
  9664 0000757E BE[66770000]        <2> 	mov esi, interneticon
  9665 00007583 30E4                <2> 	xor ah, ah
  9666 00007585 B010                <2> 	mov al, 00010000b
  9667 00007587 BB[51760000]        <2> 	mov ebx, noie
  9668 0000758C 66B91800            <2> 	mov cx, 24
  9669 00007590 66BA0400            <2> 	mov dx, 4
  9670 00007594 E8C8FBFFFF          <2> 	call showicon
  9671                              <2> 	
  9672 00007599 BE[E8770000]        <2> 	mov esi, wordicon
  9673 0000759E 30E4                <2> 	xor ah, ah
  9674 000075A0 B010                <2> 	mov al, 00010000b
  9675 000075A2 31DB                <2> 	xor ebx, ebx
  9676 000075A4 66B91800            <2> 	mov cx, 24
  9677 000075A8 66BA3000            <2> 	mov dx, 48
  9678 000075AC E8B0FBFFFF          <2> 	call showicon
  9679                              <2> 	
  9680 000075B1 BE[6A780000]        <2> 	mov esi, pacmanpellet
  9681 000075B6 30E4                <2> 	xor ah, ah
  9682 000075B8 B010                <2> 	mov al, 00010000b
  9683 000075BA 31DB                <2> 	xor ebx, ebx
  9684 000075BC 66B94000            <2> 	mov cx, 64
  9685 000075C0 66BA0400            <2> 	mov dx, 4
  9686 000075C4 E898FBFFFF          <2> 	call showicon
  9687                              <2> 	
  9688 000075C9 BE[6E790000]        <2> 	mov esi, pacman
  9689 000075CE 30E4                <2> 	xor ah, ah
  9690 000075D0 B010                <2> 	mov al, 00010000b
  9691 000075D2 BB[3A760000]        <2> 	mov ebx, pacmannomnom
  9692 000075D7 66B94000            <2> 	mov cx, 64
  9693 000075DB 66BA3000            <2> 	mov dx, 48
  9694 000075DF E87DFBFFFF          <2> 	call showicon
  9695                              <2> 	
  9696 000075E4 BE[EC780000]        <2> 	mov esi, ghostie
  9697 000075E9 30E4                <2> 	xor ah, ah
  9698 000075EB B010                <2> 	mov al, 00010000b
  9699 000075ED BB[23760000]        <2> 	mov ebx, boo
  9700 000075F2 66B96C00            <2> 	mov cx, 108
  9701 000075F6 66BA0400            <2> 	mov dx, 4
  9702 000075FA E862FBFFFF          <2> 	call showicon
  9703                              <2> 	
  9704 000075FF BE[0A770000]        <2> 	mov esi, start
  9705 00007604 668B0D[5C5A0000]    <2> 	mov cx, [resolutiony]
  9706 0000760B 6681E91000          <2> 	sub cx, 16
  9707 00007610 66BA0200            <2> 	mov dx, 2
  9708 00007614 30E4                <2> 	xor ah, ah
  9709 00007616 B010                <2> 	mov al, 00010000b
  9710 00007618 BB[C6760000]        <2> 	mov ebx, winblows
  9711 0000761D E8CE030000          <2> 	call showstring
  9712                              <2> 
  9713                              <2> %ifdef gui.time	
  9714                              <2> 	call guitime	;load time into timeshow/dateshow and show it
  9715                              <2> %endif
  9716 00007622 C3                  <2> 	ret
  9717                              <2> 
  9718                              <2> 	boo:
  9719 00007623 BE[23770000]        <2> 		mov esi, boomsg
  9720 00007628 66BA6400            <2> 		mov dx, 100
  9721 0000762C 66B94001            <2> 		mov cx, 320
  9722 00007630 31DB                <2> 		xor ebx, ebx
  9723 00007632 6631C0              <2> 		xor ax, ax
  9724 00007635 E9B6030000          <2> 		jmp showstring
  9725                              <2> 
  9726                              <2> 	pacmannomnom:
  9727 0000763A BE[41770000]        <2> 		mov esi, pacnom
  9728 0000763F 66BA8200            <2> 		mov dx, 130
  9729 00007643 66B93C00            <2> 		mov cx, 60
  9730 00007647 31DB                <2> 		xor ebx, ebx
  9731 00007649 6631C0              <2> 		xor ax, ax
  9732 0000764C E99F030000          <2> 		jmp showstring	
  9733                              <2> 	
  9734                              <2> 	noie:
  9735 00007651 66C705[50770000]80- <2> 		mov word [termwindow], 640
  9736 00007659 02                  <2>
  9737 0000765A 66C705[52770000]E0- <2> 		mov word [termwindow + 2], 480	;the previous lines of code make a large terminal window that is 4 characters smaller than the screen
  9738 00007662 01                  <2>
  9739 00007663 BE[50770000]        <2> 		mov esi, termwindow
  9740 00007668 66BA1000            <2> 		mov dx, 16
  9741 0000766C 66B91000            <2> 		mov cx, 16
  9742 00007670 31DB                <2> 		xor ebx, ebx
  9743 00007672 6631C0              <2> 		xor ax, ax
  9744 00007675 E803060000          <2> 		call showwindow
  9745 0000767A E9B6B4FFFF          <2> 		jmp os
  9746                              <2> 
  9747                              <2> 	gotomenuboot:
  9748 0000767F 31D2                <2> 		xor edx, edx
  9749 00007681 31C9                <2> 		xor ecx, ecx
  9750 00007683 668B15[5A5A0000]    <2> 		mov dx, [resolutionx]
  9751 0000768A 668B0D[5C5A0000]    <2> 		mov cx, [resolutiony]
  9752 00007691 66C1E904            <2> 		shr cx, 4
  9753 00007695 6681E90100          <2> 		sub cx, 1
  9754 0000769A 66C1E104            <2> 		shl cx, 4
  9755 0000769E 668915[50770000]    <2> 		mov [termwindow], dx
  9756 000076A5 66890D[52770000]    <2> 		mov [termwindow + 2], cx	;the previous lines of code make a large terminal window that is fullscreen
  9757 000076AC BE[50770000]        <2> 		mov esi, termwindow
  9758 000076B1 6631D2              <2> 		xor dx, dx
  9759 000076B4 6631C9              <2> 		xor cx, cx
  9760 000076B7 31DB                <2> 		xor ebx, ebx
  9761 000076B9 6631C0              <2> 		xor ax, ax
  9762 000076BC E8BC050000          <2> 		call showwindow
  9763 000076C1 E96FB4FFFF          <2> 		jmp os
  9764                              <2> 
  9765                              <2> 	winblows:
  9766 000076C6 BE[19770000]        <2> 		mov esi, turnoffmsg
  9767 000076CB BB[B6550000]        <2> 		mov ebx, turnoff
  9768 000076D0 668B0D[5C5A0000]    <2> 		mov cx, [resolutiony]
  9769 000076D7 6681E92000          <2> 		sub cx, 32
  9770 000076DC 6631D2              <2> 		xor dx, dx
  9771 000076DF 30E4                <2> 		xor ah, ah
  9772 000076E1 B010                <2> 		mov al, 00010000b
  9773 000076E3 E808030000          <2> 		call showstring
  9774 000076E8 BE[10770000]        <2> 		mov esi, gotomenu
  9775 000076ED 668B0D[5C5A0000]    <2> 		mov cx, [resolutiony]
  9776 000076F4 6681E93000          <2> 		sub cx, 48
  9777 000076F9 6631D2              <2> 		xor dx, dx
  9778 000076FC 30E4                <2> 		xor ah, ah
  9779 000076FE B010                <2> 		mov al, 00010000b
  9780 00007700 BB[7F760000]        <2> 		mov ebx, gotomenuboot
  9781 00007705 E9E6020000          <2> 		jmp showstring
  9782                              <2> 		
  9783                              <2> 
  9784 0000770A 737461727400        <2> 	start	db "start",0
  9785 00007710 536F6C6C65724F5300  <2> 	gotomenu db "SollerOS",0
  9786 00007719 506F776572204F6666- <2> 	turnoffmsg db "Power Off",0
  9787 00007722 00                  <2>
  9788 00007723 426F6F2100          <2> 	boomsg db "Boo!",0
  9789 00007728 5061636D616E207761- <2> 	pacmsg	db "Pacman was easy to draw.",0
  9790 00007731 73206561737920746F- <2>
  9791 0000773A 20647261772E00      <2>
  9792 00007741 4F6D206E6F6D206E6F- <2> 	pacnom  db "Om nom nom nom",0
  9793 0000774A 6D206E6F6D00        <2>
  9794                              <2> 
  9795 00007750 20035802            <2> 	termwindow:	dw 800,600	;window size
  9796 00007754 FFFF0000            <2> 				dw 0xFFFF,0	;colors(FG,BG)
  9797 00007758 [9ED50300]-         <2> 				dd videobuf,videobuf2 ;location of buffers
  9798 0000775C [E6AA0400]          <2>
  9799 00007760 534855536800        <2> 	termmsg:	db "SHUSh",0	;window title
  9800                              <2> 	
  9801 00007760 <incbin>            <2> interneticon: 	incbin 'source/gui/icons/internet'
  9802 00007760 <incbin>            <2> wordicon: 	incbin 'source/gui/icons/word'
  9803 00007760 <incbin>            <2> pacmanpellet: incbin 'source/gui/icons/pellet'
  9804 00007760 <incbin>            <2> ghostie	incbin 'source/gui/icons/ghostie'
  9805 00007760 <incbin>            <2> pacman	incbin 'source/gui/icons/pacman'
  9806                              <2> 
  9807                              <2> %ifdef gui.time
  9808                              <2> guitime:
  9809                              <2> 		call time	;get rtc in timeshow & dateshow
  9810                              <2> 		xor ebx, ebx
  9811                              <2> 		mov dx, [resolutionx2]
  9812                              <2> 		xor cx, cx
  9813                              <2> 		sub dx, 304
  9814                              <2> 		mov esi, dateshow
  9815                              <2> 		mov al, 00010001b
  9816                              <2> 		call showstring
  9817                              <2> 		mov esi, timeshow
  9818                              <2> 		xor ebx, ebx
  9819                              <2> 		mov al, 00010001b
  9820                              <2> 		call showstring
  9821                              <2> 		ret
  9822                              <2> %endif
  9823                              <1> %include "source/gui/text.asm"
  9824                              <2> 	showstring:
  9825 000079F0 A2[D2810000]        <2> 		mov [mouseselecton], al
  9826 000079F5 8025[D2810000]01    <2> 		and byte [mouseselecton], 1
  9827 000079FC B402                <2> 		mov ah, 2
  9828 000079FE E8500D0000          <2> 		call graphicsadd
  9829                              <2> 	showstring2:	;location in (dx,cx), color in [colorfont2] and [background]
  9830 00007A03 30E4                <2> 		xor ah, ah
  9831 00007A05 8A06                <2> 		mov al, [esi]
  9832 00007A07 3CC0                <2> 		cmp al, 0xC0
  9833 00007A09 7234                <2> 		jb .doneutf
  9834 00007A0B 3CE0                <2> 		cmp al, 0xE0
  9835 00007A0D 721D                <2> 		jb .two
  9836 00007A0F 46                  <2> 		inc esi
  9837 00007A10 668B1E              <2> 		mov bx, [esi]
  9838 00007A13 46                  <2> 		inc esi
  9839 00007A14 C0E004              <2> 		shl al, 4
  9840 00007A17 66C1E302            <2> 		shl bx, 2
  9841 00007A1B C0EF02              <2> 		shr bh, 2
  9842 00007A1E 66C1EB02            <2> 		shr bx, 2
  9843 00007A22 08C7                <2> 		or bh, al
  9844 00007A24 6689D8              <2> 		mov ax, bx
  9845 00007A27 E913000000          <2> 		jmp .doneutf
  9846                              <2> 	.two:
  9847 00007A2C 8A3E                <2> 		mov bh, [esi]
  9848 00007A2E 46                  <2> 		inc esi
  9849 00007A2F 8A1E                <2> 		mov bl, [esi]
  9850 00007A31 66C1E302            <2> 		shl bx, 2
  9851 00007A35 C0EF02              <2> 		shr bh, 2
  9852 00007A38 66C1EB02            <2> 		shr bx, 2
  9853 00007A3C 6689D8              <2> 		mov ax, bx
  9854                              <2> 	.doneutf:
  9855 00007A3F 3C00                <2> 		cmp al, 0
  9856 00007A41 7420                <2> 		je doneshowstring
  9857 00007A43 46                  <2> 		inc esi
  9858 00007A44 3CFF                <2> 		cmp al, 255
  9859 00007A46 74BB                <2> 		je showstring2
  9860 00007A48 56                  <2> 		push esi
  9861 00007A49 668B1D[6B7A0000]    <2> 		mov bx, [colorfont2]
  9862 00007A50 E827000000          <2> 		call showfontvesa
  9863 00007A55 663D0A00            <2> 		cmp ax, 10
  9864 00007A59 7405                <2> 		je noproceedshst
  9865 00007A5B 6681C20800          <2> 		add dx, 8
  9866                              <2> 	noproceedshst:
  9867 00007A60 5E                  <2> 		pop esi
  9868 00007A61 EBA0                <2> 		jmp showstring2
  9869                              <2> 	doneshowstring:
  9870 00007A63 C605[D2810000]00    <2> 		mov byte [mouseselecton], 0
  9871 00007A6A C3                  <2> 		ret
  9872                              <2> 
  9873 00007A6B FFFF                <2> colorfont2 dw 0xFFFF
  9874 00007A6D 00                  <2> colorcache db 0
  9875                              <2> 
  9876 00007A6E 02                  <2> resolutionbytes db 2
  9877 00007A6F 0000                <2> posxvesa dw 0
  9878 00007A71 0000                <2> posyvesa dw 0
  9879 00007A73 FFFF                <2> colorfont dw 0xFFFF
  9880                              <2> savefontvesa:		;same rules as showfontvesa
  9881 00007A75 C605[D1810000]01    <2> 	mov byte [savefonton], 1
  9882                              <2> showfontvesa:		;position in (dx,cx), color in bx, char in ax
  9883 00007A7C 663DFF00            <2> 	cmp ax, 255
  9884 00007A80 7501                <2> 	jne nostopshowfont
  9885 00007A82 C3                  <2> 	ret
  9886                              <2> nostopshowfont:
  9887 00007A83 55                  <2> 	push ebp
  9888 00007A84 66890D[717A0000]    <2> 	mov [posyvesa], cx
  9889 00007A8B 663D0A00            <2> 	cmp ax, 10
  9890 00007A8F 0F8424000000        <2> 	je near goodvesafontx
  9891 00007A95 31C9                <2> 	xor ecx, ecx
  9892 00007A97 668B0D[485B0000]    <2> 	mov cx, [resolutionx2]
  9893 00007A9E 6639CA              <2> 	cmp dx, cx
  9894 00007AA1 7616                <2> 	jbe goodvesafontx
  9895 00007AA3 6631D2              <2> 	xor dx, dx
  9896 00007AA6 668B0D[717A0000]    <2> 	mov cx, [posyvesa]
  9897 00007AAD 6681C11000          <2> 	add cx, 16
  9898 00007AB2 66890D[717A0000]    <2> 	mov [posyvesa], cx
  9899                              <2> goodvesafontx:
  9900 00007AB9 668B0D[717A0000]    <2> 	mov cx, [posyvesa]
  9901 00007AC0 668915[6F7A0000]    <2> 	mov [posxvesa], dx
  9902 00007AC7 8B3D[705A0000]      <2> 	mov edi, [physbaseptr]
  9903 00007ACD 66891D[737A0000]    <2> 	mov [colorfont], bx
  9904 00007AD4 668B2D[737A0000]    <2> 	mov bp, [colorfont]
  9905 00007ADB 31DB                <2> 	xor ebx, ebx
  9906 00007ADD 6689C3              <2> 	mov bx, ax
  9907 00007AE0 31C0                <2> 	xor eax, eax
  9908 00007AE2 6689D8              <2> 	mov ax, bx
  9909 00007AE5 6689D3              <2> 	mov bx, dx
  9910 00007AE8 89DA                <2> 	mov edx, ebx
  9911 00007AEA 31DB                <2> 	xor ebx, ebx
  9912 00007AEC 6681F90000          <2> 	cmp cx, 0
  9913 00007AF1 7414                <2> 	je vesaposloopdn
  9914 00007AF3 668B1D[485B0000]    <2> 	mov bx, [resolutionx2]
  9915                              <2> vesaposloop:
  9916 00007AFA 52                  <2> 	push edx
  9917 00007AFB 50                  <2> 	push eax
  9918 00007AFC 31C0                <2> 	xor eax, eax
  9919 00007AFE 6689C8              <2> 	mov ax, cx
  9920 00007B01 F7E3                <2> 	mul ebx
  9921 00007B03 01C7                <2> 	add edi, eax
  9922 00007B05 58                  <2> 	pop eax
  9923 00007B06 5A                  <2> 	pop edx
  9924                              <2> vesaposloopdn:
  9925 00007B07 01D7                <2> 	add edi, edx
  9926 00007B09 BE[49910000]        <2> 	mov esi, fonts
  9927                              <2> findfontvesa:
  9928 00007B0E 663D0A00            <2> 	cmp ax, 10
  9929 00007B12 0F84EB000000        <2> 	je near nwlinevesa
  9930 00007B18 C1E004              <2> 	shl eax, 4
  9931 00007B1B 01C6                <2> 	add esi, eax
  9932 00007B1D C1E804              <2> 	shr eax, 4
  9933 00007B20 81FE[49910300]      <2> 	cmp esi, fontend
  9934 00007B26 0F83AB000000        <2> 	jae near donefontvesa
  9935 00007B2C 4E                  <2> 	dec esi
  9936                              <2> foundfontvesa:
  9937 00007B2D 46                  <2> 	inc esi
  9938 00007B2E 803D[D1810000]01    <2> 	cmp byte [savefonton], 1
  9939 00007B35 0F84E7000000        <2> 	je near vesafontsaver
  9940 00007B3B 30C9                <2> 	xor cl, cl
  9941 00007B3D 8A06                <2> 	mov al, [esi]
  9942 00007B3F 668B15[485B0000]    <2> 	mov dx, [resolutionx2]
  9943 00007B46 662B15[6F7A0000]    <2> 	sub dx, [posxvesa]
  9944 00007B4D 6681FA1000          <2> 	cmp dx, 16
  9945 00007B52 7708                <2> 	ja paintfontvesa
  9946 00007B54 D0EA                <2> 	shr dl, 1
  9947 00007B56 8815[027C0000]      <2> 	mov [charwidth], dl
  9948                              <2> paintfontvesa:
  9949 00007B5C B201                <2> 	mov dl, 1
  9950 00007B5E 20C2                <2> 	and dl, al
  9951 00007B60 803D[D0810000]01    <2> 	cmp byte [showcursorfonton], 1
  9952 00007B67 0F842E000000        <2> 	je near nodelpaintedfont
  9953 00007B6D 803D[D0810000]02    <2> 	cmp byte [showcursorfonton], 2
  9954 00007B74 0F8511000000        <2> 	jne near noswitchcursorfonton
  9955 00007B7A 80FA00              <2> 	cmp dl, 0
  9956 00007B7D 0F8420000000        <2> 	je near nopixelset
  9957 00007B83 66892F              <2> 	mov [edi], bp
  9958 00007B86 E918000000          <2> 	jmp nopixelset
  9959                              <2> noswitchcursorfonton:
  9960 00007B8B 3215[D2810000]      <2> 	xor dl, [mouseselecton]
  9961 00007B91 668B1D[AE730000]    <2> 	mov bx, [background]
  9962 00007B98 66891F              <2> 	mov [edi], bx
  9963                              <2> nodelpaintedfont:
  9964 00007B9B 80FA00              <2> 	cmp dl, 0
  9965 00007B9E 7403                <2> 	je nopixelset
  9966 00007BA0 66892F              <2> 	mov [edi], bp
  9967                              <2> nopixelset:
  9968 00007BA3 81C702000000        <2> 	add edi, 2
  9969 00007BA9 D0C0                <2> 	rol al, 1
  9970 00007BAB FEC1                <2> 	inc cl
  9971 00007BAD 3A0D[027C0000]      <2> 	cmp cl, [charwidth]
  9972 00007BB3 72A7                <2> 	jb paintfontvesa
  9973 00007BB5 FEC5                <2> 	inc ch
  9974 00007BB7 31D2                <2> 	xor edx, edx
  9975 00007BB9 668B15[485B0000]    <2> 	mov dx, [resolutionx2]
  9976 00007BC0 01D7                <2> 	add edi, edx
  9977 00007BC2 31D2                <2> 	xor edx, edx
  9978 00007BC4 8A15[027C0000]      <2> 	mov dl, [charwidth]
  9979 00007BCA 00D2                <2> 	add dl, dl
  9980 00007BCC 29D7                <2> 	sub edi, edx
  9981 00007BCE 80FD10              <2> 	cmp ch, 16
  9982 00007BD1 0F8256FFFFFF        <2> 	jb foundfontvesa
  9983                              <2> donefontvesa:
  9984 00007BD7 C605[027C0000]08    <2> 	mov byte [charwidth], 8
  9985 00007BDE 668B15[6F7A0000]    <2> 	mov dx, [posxvesa]
  9986 00007BE5 8A1D[027C0000]      <2> 	mov bl, [charwidth]
  9987 00007BEB 30FF                <2> 	xor bh, bh
  9988 00007BED 6601DA              <2> 	add dx, bx
  9989 00007BF0 6689EB              <2> 	mov bx, bp
  9990 00007BF3 668B0D[717A0000]    <2> 	mov cx, [posyvesa]
  9991 00007BFA 883D[D1810000]      <2> 	mov [savefonton], bh
  9992 00007C00 5D                  <2> 	pop ebp
  9993 00007C01 C3                  <2> 	ret
  9994 00007C02 08                  <2> charwidth db 8
  9995                              <2> nwlinevesa:
  9996 00007C03 6631D2              <2> 	xor dx, dx
  9997 00007C06 668915[6F7A0000]    <2> 	mov [posxvesa], dx
  9998 00007C0D 668B0D[717A0000]    <2> 	mov cx, [posyvesa]
  9999 00007C14 6681C11000          <2> 	add cx, 16
 10000 00007C19 66890D[717A0000]    <2> 	mov [posyvesa], cx
 10001 00007C20 EBB5                <2> 	jmp donefontvesa
 10002                              <2> vesafontsaver:
 10003 00007C22 30C0                <2> 	xor al, al
 10004 00007C24 30C9                <2> 	xor cl, cl
 10005                              <2> vesafontsaver2:
 10006 00007C26 66392F              <2> 	cmp [edi], bp
 10007 00007C29 742C                <2> 	je colorfontmatch
 10008                              <2> donecolormatch:
 10009 00007C2B 81C702000000        <2> 	add edi, 2
 10010 00007C31 D0C0                <2> 	rol al, 1
 10011 00007C33 FEC1                <2> 	inc cl
 10012 00007C35 80F908              <2> 	cmp cl, 8
 10013 00007C38 72EC                <2> 	jb vesafontsaver2
 10014 00007C3A 8806                <2> 	mov [esi], al
 10015 00007C3C 46                  <2> 	inc esi
 10016 00007C3D FEC5                <2> 	inc ch
 10017 00007C3F 31D2                <2> 	xor edx, edx
 10018 00007C41 668B15[485B0000]    <2> 	mov dx, [resolutionx2]
 10019 00007C48 01D7                <2> 	add edi, edx
 10020 00007C4A 81EF10000000        <2> 	sub edi, 16
 10021 00007C50 80FD10              <2> 	cmp ch, 16
 10022 00007C53 72CD                <2> 	jb vesafontsaver
 10023 00007C55 EB80                <2> 	jmp donefontvesa
 10024                              <2> colorfontmatch:
 10025 00007C57 0401                <2> 	add al, 1
 10026 00007C59 EBD0                <2> 	jmp donecolormatch
 10027                              <1> %include "source/gui/window.asm"
 10028 00007C5B 0000                <2> winvcopystx dw 0
 10029 00007C5D 0000                <2> winvcopysty dw 0
 10030 00007C5F 0000                <2> winvcopydx dw 0
 10031 00007C61 0000                <2> winvcopycx dw 0
 10032 00007C63 FFFF0000            <2> windowcolor dw 0xFFFF,0
 10033 00007C67 00000000            <2> windowbufloc: dd 0
 10034 00007C6B 00000000            <2> windowvideobuf dd 0
 10035 00007C6F 00000000            <2> windowvideobuf2 dd 0
 10036 00007C73 00000000            <2> windowinfobuf dd 0
 10037 00007C77 0000                <2> termcol dw 0
 10038 00007C79 00000000            <2> wincopyendpos dd 0
 10039                              <2> 
 10040                              <2> 	showwindow:	;windowstuff in esi, position in (dx, cx), nothing in ax, code in ebx
 10041 00007C7D C605[E5230000]01    <2> 		mov byte [termguion], 1
 10042 00007C84 6681C11000          <2> 		add cx, 16
 10043 00007C89 668915[5B7C0000]    <2> 		mov [winvcopystx], dx
 10044 00007C90 66890D[5D7C0000]    <2> 		mov [winvcopysty], cx
 10045 00007C97 8935[737C0000]      <2> 		mov [windowinfobuf], esi
 10046 00007C9D 668B16              <2> 		mov dx, [esi]
 10047 00007CA0 668B4E02            <2> 		mov cx, [esi + 2]
 10048 00007CA4 31C0                <2> 		xor eax, eax
 10049 00007CA6 31DB                <2> 		xor ebx, ebx
 10050 00007CA8 6689D0              <2> 		mov ax, dx
 10051 00007CAB 6689CB              <2> 		mov bx, cx
 10052 00007CAE 66C1E803            <2> 		shr ax, 3
 10053 00007CB2 66C1EB04            <2> 		shr bx, 4
 10054 00007CB6 66A3[777C0000]      <2> 		mov [termcol], ax
 10055 00007CBC A2[DA250000]        <2> 		mov [charxy], al
 10056 00007CC1 881D[DB250000]      <2> 		mov [charxy + 1], bl
 10057 00007CC7 8B7E04              <2> 		mov edi, [esi + 4]
 10058 00007CCA 893D[637C0000]      <2> 		mov [windowcolor], edi
 10059 00007CD0 8B7E0C              <2> 		mov edi, [esi + 12]
 10060 00007CD3 893D[6F7C0000]      <2> 		mov [windowvideobuf2], edi
 10061 00007CD9 8B7E08              <2> 		mov edi, [esi + 8]
 10062 00007CDC 893D[6B7C0000]      <2> 		mov [windowvideobuf], edi
 10063 00007CE2 81FB00000000        <2> 		cmp ebx, 0
 10064 00007CE8 0F84C1040000        <2> 		je near donewincopynow
 10065                              <2> 	findendposwin:
 10066 00007CEE C1E002              <2> 		shl eax, 2
 10067 00007CF1 31D2                <2> 		xor edx, edx
 10068 00007CF3 F7E3                <2> 		mul ebx
 10069 00007CF5 01C7                <2> 		add edi, eax
 10070 00007CF7 893D[797C0000]      <2> 		mov [wincopyendpos], edi
 10071 00007CFD 31FF                <2> 		xor edi, edi
 10072 00007CFF 6631C0              <2> 		xor ax, ax
 10073 00007D02 6631DB              <2> 		xor bx, bx
 10074 00007D05 6601D2              <2> 		add dx, dx
 10075 00007D08 668915[5F7C0000]    <2> 		mov [winvcopydx], dx
 10076 00007D0F 66890D[617C0000]    <2> 		mov [winvcopycx], cx
 10077 00007D16 668B0D[5D7C0000]    <2> 		mov cx, [winvcopysty]
 10078 00007D1D 6681E91000          <2> 		sub cx, 16
 10079 00007D22 668B15[5B7C0000]    <2> 		mov dx, [winvcopystx]
 10080 00007D29 C605[E6230000]00    <2> 		mov byte [termcopyon], 0
 10081 00007D30 B403                <2> 		mov ah, 3
 10082 00007D32 E81C0A0000          <2> 		call graphicsadd
 10083                              <2> 	showwindow2:
 10084 00007D37 6681C11000          <2> 		add cx, 16
 10085 00007D3C 668915[5B7C0000]    <2> 		mov [winvcopystx], dx
 10086 00007D43 66890D[5D7C0000]    <2> 		mov [winvcopysty], cx
 10087 00007D4A 668B16              <2> 		mov dx, [esi]
 10088 00007D4D 668B4E02            <2> 		mov cx, [esi + 2]
 10089 00007D51 6601D2              <2> 		add dx, dx
 10090 00007D54 668915[5F7C0000]    <2> 		mov [winvcopydx], dx
 10091 00007D5B 66890D[617C0000]    <2> 		mov [winvcopycx], cx
 10092 00007D62 E818000000          <2> 		call reloadwindowtitle
 10093 00007D67 803D[3A870000]01    <2> 		cmp byte [windrag], 1
 10094 00007D6E 0F834A040000        <2> 		jae near forgetresetstuff
 10095 00007D74 8B3D[677C0000]      <2> 		mov edi, [windowbufloc]
 10096 00007D7A E96E020000          <2> 		jmp windowvideocopyset
 10097                              <2> 		
 10098                              <2> 	reloadwindowtitle:
 10099 00007D7F 8B3D[677C0000]      <2> 		mov edi, [windowbufloc]
 10100 00007D85 31D2                <2> 		xor edx, edx
 10101 00007D87 668B15[485B0000]    <2> 		mov dx, [resolutionx2]
 10102 00007D8E C1E204              <2> 		shl edx, 4
 10103 00007D91 29D7                <2> 		sub edi, edx
 10104 00007D93 803D[E6230000]00    <2> 		cmp byte [termcopyon], 0
 10105 00007D9A 7532                <2> 		jne nocleartitlebarpos
 10106 00007D9C 8B3D[705A0000]      <2> 		mov edi, [physbaseptr]
 10107 00007DA2 31D2                <2> 		xor edx, edx
 10108 00007DA4 668B15[5B7C0000]    <2> 		mov dx, [winvcopystx]
 10109 00007DAB 01D7                <2> 		add edi, edx
 10110 00007DAD 31C9                <2> 		xor ecx, ecx
 10111 00007DAF 668B0D[5D7C0000]    <2> 		mov cx, [winvcopysty]
 10112 00007DB6 6681E91000          <2> 		sub cx, 16
 10113 00007DBB 6681F90000          <2> 		cmp cx, 0
 10114 00007DC0 740C                <2> 		je nocleartitlebarpos
 10115                              <2> 	cleartitlebarpos:
 10116 00007DC2 31C0                <2> 		xor eax, eax
 10117 00007DC4 66A1[485B0000]      <2> 		mov ax, [resolutionx2]
 10118 00007DCA F7E1                <2> 		mul ecx
 10119 00007DCC 01C7                <2> 		add edi, eax
 10120                              <2> 	nocleartitlebarpos:
 10121 00007DCE 66B91000            <2> 		mov cx, 16
 10122 00007DD2 668B15[5F7C0000]    <2> 		mov dx, [winvcopydx]
 10123 00007DD9 6681F90000          <2> 		cmp cx, 0
 10124 00007DDE 0F8448000000        <2> 		je near canceltitlebarput
 10125 00007DE4 6681FA0000          <2> 		cmp dx, 0
 10126 00007DE9 0F843D000000        <2> 		je near canceltitlebarput
 10127                              <2> 	titlebarput:
 10128 00007DEF 66A1[637C0000]      <2> 		mov ax, [windowcolor]
 10129 00007DF5 668907              <2> 		mov [edi], ax
 10130 00007DF8 6681EA0200          <2> 		sub dx, 2
 10131 00007DFD 81C702000000        <2> 		add edi, 2
 10132 00007E03 6681FA0000          <2> 		cmp dx, 0
 10133 00007E08 75E5                <2> 		jne titlebarput
 10134 00007E0A 31D2                <2> 		xor edx, edx
 10135 00007E0C 668B15[485B0000]    <2> 		mov dx, [resolutionx2]
 10136 00007E13 6649                <2> 		dec cx
 10137 00007E15 662B15[5F7C0000]    <2> 		sub dx, [winvcopydx]
 10138 00007E1C 01D7                <2> 		add edi, edx
 10139 00007E1E 668B15[5F7C0000]    <2> 		mov dx, [winvcopydx]
 10140 00007E25 6681F90000          <2> 		cmp cx, 0
 10141 00007E2A 75C3                <2> 		jne titlebarput
 10142                              <2> 	canceltitlebarput:
 10143 00007E2C 893D[677C0000]      <2> 		mov [windowbufloc], edi
 10144 00007E32 803D[E6230000]02    <2> 		cmp byte [termcopyon], 2
 10145 00007E39 0F841C010000        <2> 		je near winvcpst
 10146 00007E3F 668B1D[AE730000]    <2> 		mov bx, [background]
 10147 00007E46 6653                <2> 		push bx
 10148 00007E48 6631DB              <2> 		xor bx, bx
 10149 00007E4B 66891D[AE730000]    <2> 		mov [background], bx
 10150 00007E52 6631C0              <2> 		xor ax, ax
 10151 00007E55 81C610000000        <2> 		add esi, 16
 10152 00007E5B 668B15[5B7C0000]    <2> 		mov dx, [winvcopystx]
 10153 00007E62 668B0D[5D7C0000]    <2> 		mov cx, [winvcopysty]
 10154 00007E69 6681E91000          <2> 		sub cx, 16
 10155 00007E6E 668B1D[637C0000]    <2> 		mov bx, [windowcolor]
 10156 00007E75 C605[D2810000]01    <2> 		mov byte [mouseselecton], 1
 10157 00007E7C E882FBFFFF          <2> 		call showstring2	;Show window title
 10158 00007E81 8B35[CE2C0000]      <2> 		mov esi, [usercache]
 10159 00007E87 6681C21000          <2> 		add dx, 16
 10160 00007E8C C605[D2810000]01    <2> 		mov byte [mouseselecton], 1
 10161 00007E93 E86BFBFFFF          <2> 		call showstring2	;Show user name
 10162 00007E98 BE[BA8E0000]        <2> 		mov esi, computer
 10163 00007E9D C605[D2810000]01    <2> 		mov byte [mouseselecton], 1
 10164 00007EA4 E85AFBFFFF          <2> 		call showstring2	;Show computer name
 10165 00007EA9 66B85800            <2> 		mov ax, "X"
 10166 00007EAD 66BB00F8            <2> 		mov bx, 1111100000000000b
 10167 00007EB1 668B15[5B7C0000]    <2> 		mov dx, [winvcopystx]
 10168 00007EB8 668B0D[5D7C0000]    <2> 		mov cx, [winvcopysty]
 10169 00007EBF 6681E91000          <2> 		sub cx, 16
 10170 00007EC4 6681EA1000          <2> 		sub dx, 16
 10171 00007EC9 660315[5F7C0000]    <2> 		add dx, [winvcopydx]
 10172 00007ED0 C605[D2810000]01    <2> 		mov byte [mouseselecton], 1
 10173 00007ED7 663B15[485B0000]    <2> 		cmp dx, [resolutionx2]
 10174 00007EDE 7305                <2> 		jae .nox
 10175 00007EE0 E897FBFFFF          <2> 		call showfontvesa
 10176                              <2> .nox:
 10177 00007EE5 668B1D[AE730000]    <2> 		mov bx, [background]
 10178 00007EEC 6681EA1800          <2> 		sub dx, 24
 10179 00007EF1 66B82B00            <2> 		mov ax, "+"
 10180 00007EF5 66BBE007            <2> 		mov bx, 0000011111100000b
 10181 00007EF9 C605[D2810000]01    <2> 		mov byte [mouseselecton], 1
 10182 00007F00 663B15[485B0000]    <2> 		cmp dx, [resolutionx2]
 10183 00007F07 7305                <2> 		jae .noplus
 10184 00007F09 E86EFBFFFF          <2> 		call showfontvesa
 10185                              <2> .noplus:
 10186 00007F0E 6681EA1800          <2> 		sub dx, 24
 10187 00007F13 66B82D00            <2> 		mov ax, "-"
 10188 00007F17 66BBE0FF            <2> 		mov bx, 1111111111100000b
 10189 00007F1B C605[D2810000]01    <2> 		mov byte [mouseselecton], 1
 10190 00007F22 663B15[485B0000]    <2> 		cmp dx, [resolutionx2]
 10191 00007F29 7305                <2> 		jae .nominus
 10192 00007F2B E84CFBFFFF          <2> 		call showfontvesa
 10193                              <2> .nominus:
 10194 00007F30 6681EA1800          <2> 		sub dx, 24
 10195 00007F35 66B83F00            <2> 		mov ax, "?"
 10196 00007F39 66BB1F00            <2> 		mov bx, 0000000000011111b
 10197 00007F3D C605[D2810000]01    <2> 		mov byte [mouseselecton], 1
 10198 00007F44 663B15[485B0000]    <2> 		cmp dx, [resolutionx2]
 10199 00007F4B 7305                <2> 		jae .noquestion
 10200 00007F4D E82AFBFFFF          <2> 		call showfontvesa
 10201                              <2> .noquestion:
 10202 00007F52 665B                <2> 		pop bx
 10203 00007F54 66891D[AE730000]    <2> 		mov [background], bx
 10204                              <2> 	winvcpst:
 10205 00007F5B C3                  <2> 		ret
 10206                              <2> 
 10207                              <2> 	windowvideocopy:
 10208 00007F5C 8B35[737C0000]      <2> 		mov esi, [windowinfobuf]
 10209 00007F62 668B16              <2> 		mov dx, [esi]
 10210 00007F65 668B4E02            <2> 		mov cx, [esi + 2]
 10211 00007F69 8B7E04              <2> 		mov edi, [esi + 4]
 10212 00007F6C 893D[637C0000]      <2> 		mov [windowcolor], edi
 10213 00007F72 8B7E08              <2> 		mov edi, [esi + 8]
 10214 00007F75 8B5E0C              <2> 		mov ebx, [esi + 12]
 10215 00007F78 893D[6B7C0000]      <2> 		mov [windowvideobuf], edi
 10216 00007F7E 891D[6F7C0000]      <2> 		mov [windowvideobuf2], ebx
 10217 00007F84 31C0                <2> 		xor eax, eax
 10218 00007F86 31DB                <2> 		xor ebx, ebx
 10219 00007F88 6689D0              <2> 		mov ax, dx
 10220 00007F8B 6689CB              <2> 		mov bx, cx
 10221 00007F8E 66C1E803            <2> 		shr ax, 3
 10222 00007F92 66C1EB04            <2> 		shr bx, 4
 10223 00007F96 66A3[777C0000]      <2> 		mov [termcol], ax
 10224 00007F9C A2[DA250000]        <2> 		mov [charxy], al
 10225 00007FA1 881D[DB250000]      <2> 		mov [charxy + 1], bl
 10226 00007FA7 8B3D[677C0000]      <2> 		mov edi, [windowbufloc]
 10227 00007FAD 3B3D[705A0000]      <2> 		cmp edi, [physbaseptr]
 10228 00007FB3 0F8334000000        <2> 		jae near windowvideocopyset
 10229 00007FB9 31C9                <2> 		xor ecx, ecx
 10230 00007FBB 31D2                <2> 		xor edx, edx
 10231 00007FBD 668B15[5B7C0000]    <2> 		mov dx, [winvcopystx]
 10232 00007FC4 668B0D[5D7C0000]    <2> 		mov cx, [winvcopysty]
 10233 00007FCB 8B3D[705A0000]      <2> 		mov edi, [physbaseptr]
 10234 00007FD1 01D7                <2> 		add edi, edx
 10235 00007FD3 81F900000000        <2> 		cmp ecx, 0
 10236 00007FD9 7412                <2> 		je windowvideocopyset
 10237                              <2> 	yrescopylp:
 10238 00007FDB 31C0                <2> 		xor eax, eax
 10239 00007FDD 66A1[485B0000]      <2> 		mov ax, [resolutionx2]
 10240 00007FE3 F7E1                <2> 		mul ecx
 10241 00007FE5 01C7                <2> 		add edi, eax
 10242 00007FE7 893D[677C0000]      <2> 		mov [windowbufloc], edi
 10243                              <2> 	windowvideocopyset:
 10244 00007FED 6631C9              <2> 		xor cx, cx
 10245 00007FF0 6649                <2> 		dec cx
 10246 00007FF2 66890D[C6810000]    <2> 		mov [charposline], cx
 10247 00007FF9 89FE                <2> 		mov esi, edi
 10248 00007FFB 81EE10000000        <2> 		sub esi, 16
 10249 00008001 31D2                <2> 		xor edx, edx
 10250 00008003 668B15[485B0000]    <2> 		mov dx, [resolutionx2]
 10251 0000800A C1E204              <2> 		shl edx, 4
 10252 0000800D 01D6                <2> 		add esi, edx
 10253 0000800F 8B3D[6B7C0000]      <2> 		mov edi, [windowvideobuf]
 10254 00008015 81EF04000000        <2> 		sub edi, 4
 10255 0000801B 893D[C8810000]      <2> 		mov [charposvbuf], edi
 10256 00008021 E97C000000          <2> 		jmp nextcharwin
 10257                              <2> 	win.write:	;adjusted this to use alpha
 10258                              <2> 				;5R, 6G, 5B
 10259                              <2> %ifdef gui.alphablending
 10260                              <2> 		push esi
 10261                              <2> 		push bx
 10262                              <2> 		push cx
 10263                              <2> 		push dx
 10264                              <2> %ifdef gui.background
 10265                              <2> 		mov esi, edi
 10266                              <2> 		sub esi, [physbaseptr]
 10267                              <2> 		add esi, [backgroundimage]
 10268                              <2> 		cmp dword [backgroundimage], 0
 10269                              <2> 		jne .red
 10270                              <2> %endif
 10271                              <2> 		mov esi, background
 10272                              <2> 	.red:
 10273                              <2> 		mov cx, [esi]
 10274                              <2> 		shr cx, 11
 10275                              <2> 		mov bx, ax
 10276                              <2> 		shr bx, 11
 10277                              <2> 		add cx, bx
 10278                              <2> 		add cx, bx
 10279                              <2> 		add cx, bx
 10280                              <2> 		shr cx, 2
 10281                              <2> 		shl cx, 11
 10282                              <2> 		mov dx, cx
 10283                              <2> 	.green:
 10284                              <2> 		mov cx, [esi]
 10285                              <2> 		shl cx, 5
 10286                              <2> 		shr cx, 10
 10287                              <2> 		mov bx, ax
 10288                              <2> 		shl bx, 5
 10289                              <2> 		shr bx, 10
 10290                              <2> 		add cx, bx
 10291                              <2> 		add cx, bx
 10292                              <2> 		add cx, bx
 10293                              <2> 		shr cx, 2
 10294                              <2> 		shl cx, 5
 10295                              <2> 		add dx, cx
 10296                              <2> 	.blue:
 10297                              <2> 		mov cx, [esi]
 10298                              <2> 		shl cx, 11
 10299                              <2> 		shr cx, 11
 10300                              <2> 		mov bx, ax
 10301                              <2> 		shl bx, 11
 10302                              <2> 		shr bx, 11
 10303                              <2> 		add cx, bx
 10304                              <2> 		add cx, bx
 10305                              <2> 		add cx, bx
 10306                              <2> 		shr cx, 2
 10307                              <2> 		add dx, cx
 10308                              <2> 		mov [edi], dx
 10309                              <2> 		pop dx
 10310                              <2> 		pop cx
 10311                              <2> 		pop bx
 10312                              <2> 		pop esi
 10313                              <2> %else
 10314 00008026 668907              <2> 		mov [edi], ax
 10315                              <2> %endif
 10316 00008029 C3                  <2> 		ret
 10317                              <2> 	copywindow:
 10318 0000802A B201                <2> 		mov dl, 1
 10319 0000802C D0C6                <2> 		rol dh, 1
 10320 0000802E 20F2                <2> 		and dl, dh
 10321 00008030 66813D[6D7A0000]80- <2> 		cmp word [colorcache], 0x80
 10322 00008038 00                  <2>
 10323 00008039 7320                <2> 		jae switchwincolors
 10324 0000803B 66A1[657C0000]      <2> 		mov ax, [windowcolor + 2]
 10325 00008041 E8E0FFFFFF          <2> 		call win.write
 10326 00008046 80FA00              <2> 		cmp dl, 0
 10327 00008049 742B                <2> 		je nowritewin
 10328 0000804B 66A1[637C0000]      <2> 		mov ax, [windowcolor]
 10329 00008051 E8D0FFFFFF          <2> 		call win.write
 10330 00008056 E91B000000          <2> 		jmp nowritewin
 10331                              <2> 	switchwincolors:
 10332 0000805B 66A1[637C0000]      <2> 		mov ax, [windowcolor]
 10333 00008061 E8C0FFFFFF          <2> 		call win.write
 10334 00008066 80FA00              <2> 		cmp dl, 0
 10335 00008069 740B                <2> 		je nowritewin
 10336 0000806B 66A1[657C0000]      <2> 		mov ax, [windowcolor + 2]
 10337 00008071 E8B0FFFFFF          <2> 		call win.write
 10338                              <2> 	nowritewin:
 10339 00008076 81C702000000        <2> 		add edi, 2
 10340 0000807C FEC1                <2> 		inc cl
 10341 0000807E 80F908              <2> 		cmp cl, 8
 10342 00008081 75A7                <2> 		jne copywindow
 10343 00008083 43                  <2> 		inc ebx
 10344 00008084 30C9                <2> 		xor cl, cl
 10345 00008086 31D2                <2> 		xor edx, edx
 10346 00008088 668B15[485B0000]    <2> 		mov dx, [resolutionx2]
 10347 0000808F 01D6                <2> 		add esi, edx
 10348 00008091 89F7                <2> 		mov edi, esi
 10349 00008093 8AB3[49910000]      <2> 		mov dh, [fonts + ebx]
 10350 00008099 D0CE                <2> 		ror dh, 1
 10351 0000809B FEC5                <2> 		inc ch
 10352 0000809D 80FD10              <2> 		cmp ch, 16
 10353 000080A0 7588                <2> 		jne copywindow
 10354                              <2> 	nextcharwin:
 10355 000080A2 6631C9              <2> 		xor cx, cx
 10356 000080A5 8B3D[C8810000]      <2> 		mov edi, [charposvbuf]
 10357 000080AB 81C704000000        <2> 		add edi, 4
 10358 000080B1 3B3D[797C0000]      <2> 		cmp edi, [wincopyendpos]
 10359 000080B7 0F83F2000000        <2> 		jae near donewincopynow
 10360 000080BD 668B5F02            <2> 		mov bx, [edi + 2]
 10361 000080C1 6681FB0000          <2> 		cmp bx, 0
 10362 000080C6 7508                <2> 		jne nofixcolorwin
 10363 000080C8 66BB0700            <2> 		mov bx, 7
 10364 000080CC 66895F02            <2> 		mov [edi + 2], bx
 10365                              <2> 	nofixcolorwin:
 10366 000080D0 66891D[6D7A0000]    <2> 		mov [colorcache], bx
 10367 000080D7 8B1F                <2> 		mov ebx, [edi]
 10368 000080D9 893D[C8810000]      <2> 		mov [charposvbuf], edi
 10369 000080DF 813D[6F7C0000]0000- <2> 		cmp dword [windowvideobuf2], 0
 10370 000080E7 0000                <2>
 10371 000080E9 7455                <2> 		je noskipcharcopy
 10372 000080EB 2B3D[6B7C0000]      <2> 		sub edi, [windowvideobuf]
 10373 000080F1 033D[6F7C0000]      <2> 		add edi, [windowvideobuf2]
 10374 000080F7 8B07                <2> 		mov eax, [edi]
 10375 000080F9 39D8                <2> 		cmp eax, ebx
 10376 000080FB 7543                <2> 		jne noskipcharcopy
 10377                              <2> 	skipcharcopy:
 10378 000080FD 81C610000000        <2> 		add esi, 16
 10379 00008103 668B0D[C6810000]    <2> 		mov cx, [charposline]
 10380 0000810A 6641                <2> 		inc cx
 10381 0000810C 66890D[C6810000]    <2> 		mov [charposline], cx
 10382 00008113 663B0D[777C0000]    <2> 		cmp cx, [termcol]
 10383 0000811A 7286                <2> 		jb nextcharwin
 10384 0000811C 6631C9              <2> 		xor cx, cx
 10385 0000811F 66890D[C6810000]    <2> 		mov [charposline], cx
 10386 00008126 31D2                <2> 		xor edx, edx
 10387 00008128 668B15[485B0000]    <2> 		mov dx, [resolutionx2]
 10388 0000812F C1E204              <2> 		shl edx, 4
 10389 00008132 662B15[5F7C0000]    <2> 		sub dx, [winvcopydx]
 10390 00008139 01D6                <2> 		add esi, edx
 10391 0000813B E962FFFFFF          <2> 		jmp nextcharwin
 10392                              <2> 	noskipcharcopy:
 10393 00008140 891F                <2> 		mov [edi], ebx
 10394 00008142 8B3D[C8810000]      <2> 		mov edi, [charposvbuf]
 10395 00008148 C1E310              <2> 		shl ebx, 16
 10396 0000814B C1EB0C              <2> 		shr ebx, 12
 10397 0000814E 31D2                <2> 		xor edx, edx
 10398 00008150 668B15[485B0000]    <2> 		mov dx, [resolutionx2]
 10399 00008157 C1E204              <2> 		shl edx, 4
 10400 0000815A 29D6                <2> 		sub esi, edx
 10401 0000815C 81C610000000        <2> 		add esi, 16
 10402 00008162 89F7                <2> 		mov edi, esi
 10403 00008164 668B0D[C6810000]    <2> 		mov cx, [charposline]
 10404 0000816B 6641                <2> 		inc cx
 10405 0000816D 663B0D[777C0000]    <2> 		cmp cx, [termcol]
 10406 00008174 7317                <2> 		jae fixwindowcopy
 10407 00008176 66890D[C6810000]    <2> 		mov [charposline], cx
 10408 0000817D 6631C9              <2> 		xor cx, cx
 10409 00008180 8AB3[49910000]      <2> 		mov dh, [fonts + ebx]
 10410 00008186 D0CE                <2> 		ror dh, 1
 10411 00008188 E99DFEFFFF          <2> 		jmp copywindow
 10412                              <2> fixwindowcopy:
 10413 0000818D 6631C9              <2> 		xor cx, cx
 10414 00008190 66890D[C6810000]    <2> 		mov [charposline], cx
 10415 00008197 662B15[5F7C0000]    <2> 		sub dx, [winvcopydx]
 10416 0000819E 01D6                <2> 		add esi, edx
 10417 000081A0 89F7                <2> 		mov edi, esi
 10418 000081A2 8AB3[49910000]      <2> 		mov dh, [fonts + ebx]
 10419 000081A8 D0CE                <2> 		ror dh, 1
 10420 000081AA E97BFEFFFF          <2> 		jmp copywindow
 10421                              <2> donewincopynow:
 10422 000081AF 803D[E6230000]01    <2> 		cmp byte [termcopyon], 1
 10423 000081B6 7506                <2> 		jne forgetresetstuff
 10424 000081B8 E807A8FFFF          <2> 		call switchtermcursor
 10425 000081BD 61                  <2> 		popa
 10426                              <2> forgetresetstuff:
 10427 000081BE C605[E6230000]00    <2> 		mov byte [termcopyon], 0
 10428 000081C5 C3                  <2> 		ret
 10429                              <2> 		
 10430 000081C6 0000                <2> charposline dw 0
 10431 000081C8 00000000            <2> charposvbuf dw 0,0
 10432                              <1> 				
 10433 000081CC 00                  <1> copygui db 0
 10434 000081CD 00                  <1> graphicsset db 0
 10435 000081CE 0000                <1> graphicspos db 0,0
 10436 000081D0 00                  <1> showcursorfonton db 0
 10437 000081D1 00                  <1> savefonton db 0
 10438 000081D2 00                  <1> mouseselecton db 0
 10439                              <1> 
 10440 000081D3 00                  <1> pbutton db 0
 10441 000081D4 00                  <1> pLBUTTON db 0
 10442 000081D5 00                  <1> pRBUTTON db 0
 10443 000081D6 00000000            <1> dragging dw 0,0
 10444 000081DA 0000000000000000    <1> lastpos dw 0,0,0,0
 10445 000081E2 00000000            <1> colorbuf dw 0,0
 10446                              <1> 	
 10447                              <1> 	clickicon:
 10448 000081E6 B001                <1> 		mov al, 1
 10449 000081E8 A2[D3810000]        <1> 		mov [pbutton], al
 10450 000081ED A0[D4810000]        <1> 		mov al, [pLBUTTON]
 10451 000081F2 2205[4F5E0000]      <1> 		and al, [LBUTTON]
 10452 000081F8 8A25[D5810000]      <1> 		mov ah, [pRBUTTON]
 10453 000081FE 2225[505E0000]      <1> 		and ah, [RBUTTON]
 10454 00008204 08E0                <1> 		or al, ah
 10455 00008206 3C00                <1> 		cmp al, 0
 10456 00008208 741B                <1> 		je nodragclick
 10457 0000820A 813D[D6810000]0100- <1> 		cmp dword [dragging], 1
 10458 00008212 0000                <1>
 10459 00008214 732F                <1> 		jae dragclick
 10460 00008216 C705[D6810000]0100- <1> 		mov dword [dragging], 1
 10461 0000821E 0000                <1>
 10462 00008220 E920000000          <1> 		jmp dragclick
 10463                              <1> 	nodragclick:
 10464 00008225 31C0                <1> 		xor eax, eax
 10465 00008227 A3[D6810000]        <1> 		mov dword [dragging], eax
 10466 0000822C A2[D3810000]        <1> 		mov [pbutton], al
 10467 00008231 A0[4F5E0000]        <1> 		mov al, [LBUTTON]
 10468 00008236 A2[D4810000]        <1> 		mov [pLBUTTON], al
 10469 0000823B A0[505E0000]        <1> 		mov al, [RBUTTON]
 10470 00008240 A2[D5810000]        <1> 		mov [pRBUTTON], al
 10471                              <1> 	dragclick:
 10472 00008245 6631C0              <1> 		xor ax, ax
 10473 00008248 BE[9DD20300]        <1> 		mov esi, graphicstable
 10474 0000824D C705[268A0000]0000- <1> 		mov dword [codepointer], 0
 10475 00008255 0000                <1>
 10476                              <1> 	clicon2:
 10477 00008257 31D2                <1> 		xor edx, edx
 10478 00008259 31C9                <1> 		xor ecx, ecx
 10479 0000825B 66813E0100          <1> 		cmp word [esi], 1
 10480 00008260 0F841B000000        <1> 		je near iconselect
 10481 00008266 66813E0200          <1> 		cmp word [esi], 2
 10482 0000826B 0F8472010000        <1> 		je near textselected
 10483 00008271 66813E0300          <1> 		cmp word [esi], 3
 10484 00008276 0F84C7020000        <1> 		je near windowselect
 10485 0000827C E910040000          <1> 		jmp nexticonsel
 10486                              <1> 	iconselect:
 10487 00008281 668B5606            <1> 		mov dx, [esi + 6]
 10488 00008285 6689D0              <1> 		mov ax, dx
 10489 00008288 668B4E08            <1> 		mov cx, [esi + 8]
 10490 0000828C 6689CB              <1> 		mov bx, cx
 10491 0000828F 6681C32000          <1> 		add bx, 32
 10492 00008294 6601D0              <1> 		add ax, dx
 10493 00008297 813D[D6810000]0100- <1> 		cmp dword [dragging], 1
 10494 0000829F 0000                <1>
 10495 000082A1 746F                <1> 		je dragicon
 10496 000082A3 813D[D6810000]0000- <1> 		cmp dword [dragging], 0
 10497 000082AB 0000                <1>
 10498 000082AD 7411                <1> 		je nodragiconcheck
 10499 000082AF 3935[D6810000]      <1> 		cmp dword [dragging], esi
 10500 000082B5 0F85D6030000        <1> 		jne near nexticonsel
 10501 000082BB E952000000          <1> 		jmp dragicon
 10502                              <1> 	nodragiconcheck:
 10503 000082C0 663905[3E5D0000]    <1> 		cmp [mousecursorposition], ax
 10504 000082C7 0F82C4030000        <1> 		jb near nexticonsel
 10505 000082CD 66054000            <1> 		add ax, 64
 10506 000082D1 663905[3E5D0000]    <1> 		cmp [mousecursorposition], ax
 10507 000082D8 0F87B3030000        <1> 		ja near nexticonsel
 10508 000082DE 6629D0              <1> 		sub ax, dx
 10509 000082E1 66390D[405D0000]    <1> 		cmp [mousecursorposition + 2], cx
 10510 000082E8 0F82A3030000        <1> 		jb near nexticonsel
 10511 000082EE 66391D[405D0000]    <1> 		cmp [mousecursorposition + 2], bx
 10512 000082F5 0F8796030000        <1> 		ja near nexticonsel
 10513 000082FB 668B460A            <1> 		mov ax, [esi + 10]
 10514 000082FF 66250100            <1> 		and ax, 1
 10515 00008303 663D0100            <1> 		cmp ax, 1
 10516 00008307 0F84B6000000        <1> 		je near unselecticon
 10517 0000830D E98D000000          <1> 		jmp nodragicon
 10518                              <1> 	dragicon:
 10519 00008312 663905[3A5D0000]    <1> 		cmp [lastmouseposition], ax
 10520 00008319 0F8272030000        <1> 		jb near nexticonsel
 10521 0000831F 66054000            <1> 		add ax, 64
 10522 00008323 663905[3A5D0000]    <1> 		cmp [lastmouseposition], ax
 10523 0000832A 0F8761030000        <1> 		ja near nexticonsel
 10524 00008330 6629D0              <1> 		sub ax, dx
 10525 00008333 66390D[3C5D0000]    <1> 		cmp [lastmouseposition + 2], cx
 10526 0000833A 0F8251030000        <1> 		jb near nexticonsel
 10527 00008340 66391D[3C5D0000]    <1> 		cmp [lastmouseposition + 2], bx
 10528 00008347 0F8744030000        <1> 		ja near nexticonsel
 10529 0000834D 668B460A            <1> 		mov ax, [esi + 10]
 10530 00008351 2410                <1> 		and al, 00010000b
 10531 00008353 3C10                <1> 		cmp al, 00010000b
 10532 00008355 7448                <1> 		je nodragicon
 10533 00008357 8935[D6810000]      <1> 		mov [dragging], esi
 10534 0000835D 66D1E2              <1> 		shl dx, 1
 10535 00008360 662B15[3A5D0000]    <1> 		sub dx, [lastmouseposition]
 10536 00008367 660315[3E5D0000]    <1> 		add dx, [mousecursorposition]
 10537 0000836E 66D1EA              <1> 		shr dx, 1
 10538 00008371 66030D[405D0000]    <1> 		add cx, [mousecursorposition + 2]
 10539 00008378 662B0D[3C5D0000]    <1> 		sub cx, [lastmouseposition + 2]
 10540 0000837F 663B15[485B0000]    <1> 		cmp dx, [resolutionx2]
 10541 00008386 7607                <1> 		jbe chkyresdrgicn
 10542 00008388 668B15[3E5D0000]    <1> 		mov dx, [mousecursorposition]
 10543                              <1> 	chkyresdrgicn:
 10544 0000838F 663B0D[5C5A0000]    <1> 		cmp cx, [resolutiony]
 10545 00008396 7607                <1> 		jbe nodragicon
 10546 00008398 668B0D[405D0000]    <1> 		mov cx, [mousecursorposition + 2]
 10547                              <1> 	nodragicon:
 10548 0000839F 66814E0A0100        <1> 		or word [esi + 10], 1
 10549 000083A5 8B5E0C              <1> 		mov ebx, [esi + 12]
 10550 000083A8 668B460A            <1> 		mov ax, [esi + 10]
 10551 000083AC 8B7602              <1> 		mov esi, [esi + 2]
 10552 000083AF C705[268A0000]0000- <1> 		mov dword [codepointer], 0
 10553 000083B7 0000                <1>
 10554 000083B9 E8A3EDFFFF          <1> 		call showicon
 10555 000083BE E9E7020000          <1> 		jmp doneiconsel
 10556                              <1> 	unselecticon:
 10557 000083C3 6681660AFEFF        <1> 		and word [esi + 10], 0xFFFE
 10558 000083C9 8B5E0C              <1> 		mov ebx, [esi + 12]
 10559 000083CC 668B460A            <1> 		mov ax, [esi + 10]
 10560 000083D0 8B7602              <1> 		mov esi, [esi + 2]
 10561 000083D3 891D[268A0000]      <1> 		mov [codepointer], ebx
 10562 000083D9 E883EDFFFF          <1> 		call showicon
 10563 000083DE E9C7020000          <1> 		jmp doneiconsel
 10564                              <1> 	textselected:
 10565 000083E3 8B5E02              <1> 		mov ebx, [esi + 2]
 10566 000083E6 668B5606            <1> 		mov dx, [esi + 6]
 10567 000083EA 6689D0              <1> 		mov ax, dx
 10568 000083ED 668B4E08            <1> 		mov cx, [esi + 8]
 10569                              <1> 	lengthtesttext:
 10570 000083F1 803B00              <1> 		cmp byte [ebx], 0
 10571 000083F4 7407                <1> 		je donetesttextlength
 10572 000083F6 43                  <1> 		inc ebx
 10573 000083F7 66051000            <1> 		add ax, 16
 10574 000083FB EBF4                <1> 		jmp lengthtesttext
 10575                              <1> 	donetesttextlength:
 10576 000083FD 6689CB              <1> 		mov bx, cx
 10577 00008400 6681C30F00          <1> 		add bx, 15
 10578 00008405 813D[D6810000]0100- <1> 		cmp dword [dragging], 1
 10579 0000840D 0000                <1>
 10580 0000840F 7468                <1> 		je dragtext
 10581 00008411 813D[D6810000]0000- <1> 		cmp dword [dragging], 0
 10582 00008419 0000                <1>
 10583 0000841B 7411                <1> 		je nodragtextcheck
 10584 0000841D 3935[D6810000]      <1> 		cmp dword [dragging], esi
 10585 00008423 0F8568020000        <1> 		jne near nexticonsel
 10586 00008429 E94B000000          <1> 		jmp dragtext
 10587                              <1> 	nodragtextcheck:
 10588 0000842E 663915[3E5D0000]    <1> 		cmp [mousecursorposition], dx
 10589 00008435 0F8256020000        <1> 		jb near nexticonsel
 10590 0000843B 663905[3E5D0000]    <1> 		cmp [mousecursorposition], ax
 10591 00008442 0F8749020000        <1> 		ja near nexticonsel
 10592 00008448 66390D[405D0000]    <1> 		cmp [mousecursorposition + 2], cx
 10593 0000844F 0F823C020000        <1> 		jb near nexticonsel
 10594 00008455 66391D[405D0000]    <1> 		cmp [mousecursorposition + 2], bx
 10595 0000845C 0F872F020000        <1> 		ja near nexticonsel
 10596 00008462 668B460A            <1> 		mov ax, [esi + 10]
 10597 00008466 66250100            <1> 		and ax, 1
 10598 0000846A 663D0100            <1> 		cmp ax, 1
 10599 0000846E 0F84AB000000        <1> 		je near unselecttext
 10600 00008474 E986000000          <1> 		jmp nodragtext
 10601                              <1> 	dragtext:
 10602 00008479 663915[3A5D0000]    <1> 		cmp [lastmouseposition], dx
 10603 00008480 0F820B020000        <1> 		jb near nexticonsel
 10604 00008486 663905[3A5D0000]    <1> 		cmp [lastmouseposition], ax
 10605 0000848D 0F87FE010000        <1> 		ja near nexticonsel
 10606 00008493 66390D[3C5D0000]    <1> 		cmp [lastmouseposition + 2], cx
 10607 0000849A 0F82F1010000        <1> 		jb near nexticonsel
 10608 000084A0 66391D[3C5D0000]    <1> 		cmp [lastmouseposition + 2], bx
 10609 000084A7 0F87E4010000        <1> 		ja near nexticonsel
 10610 000084AD 668B460A            <1> 		mov ax, [esi + 10]
 10611 000084B1 2410                <1> 		and al, 00010000b
 10612 000084B3 663D1000            <1> 		cmp ax, 00010000b
 10613 000084B7 0F8442000000        <1> 		je near nodragtext
 10614 000084BD 8935[D6810000]      <1> 		mov [dragging], esi
 10615 000084C3 662B15[3A5D0000]    <1> 		sub dx, [lastmouseposition]
 10616 000084CA 660315[3E5D0000]    <1> 		add dx, [mousecursorposition]
 10617 000084D1 66030D[405D0000]    <1> 		add cx, [mousecursorposition + 2]
 10618 000084D8 662B0D[3C5D0000]    <1> 		sub cx, [lastmouseposition + 2]
 10619 000084DF 663B15[485B0000]    <1> 		cmp dx, [resolutionx2]
 10620 000084E6 7607                <1> 		jbe chkyresdrgtxt
 10621 000084E8 668B15[3E5D0000]    <1> 		mov dx, [mousecursorposition]
 10622                              <1> 	chkyresdrgtxt:
 10623 000084EF 663B0D[5C5A0000]    <1> 		cmp cx, [resolutiony]
 10624 000084F6 7607                <1> 		jbe nodragtext
 10625 000084F8 668B0D[405D0000]    <1> 		mov cx, [mousecursorposition + 2]
 10626                              <1> 	nodragtext:
 10627 000084FF 66814E0A0100        <1> 		or word [esi + 10], 1
 10628 00008505 8B5E0C              <1> 		mov ebx, [esi + 12]
 10629 00008508 891D[268A0000]      <1> 		mov [codepointer], ebx
 10630 0000850E 668B460A            <1> 		mov ax, [esi + 10]
 10631 00008512 8B7602              <1> 		mov esi, [esi + 2]
 10632 00008515 E8D6F4FFFF          <1> 		call showstring
 10633 0000851A E98B010000          <1> 		jmp doneiconsel
 10634                              <1> 	unselecttext:
 10635 0000851F 6681660AFEFF        <1> 		and word [esi + 10], 0xFFFE
 10636 00008525 8B5E0C              <1> 		mov ebx, [esi + 12]
 10637 00008528 668B460A            <1> 		mov ax, [esi + 10]
 10638 0000852C 8B7602              <1> 		mov esi, [esi + 2]
 10639 0000852F C705[268A0000]0000- <1> 		mov dword [codepointer], 0
 10640 00008537 0000                <1>
 10641 00008539 E8B2F4FFFF          <1> 		call showstring
 10642 0000853E E967010000          <1> 		jmp doneiconsel
 10643                              <1> windowselect:
 10644 00008543 8B7E02              <1> 		mov edi, [esi + 2]
 10645 00008546 668B5606            <1> 		mov dx, [esi + 6]
 10646 0000854A 6689D0              <1> 		mov ax, dx
 10647 0000854D 668B4E08            <1> 		mov cx, [esi + 8]
 10648 00008551 6689CB              <1> 		mov bx, cx
 10649 00008554 6681C31000          <1> 		add bx, 16
 10650 00008559 813D[D6810000]0100- <1> 		cmp dword [dragging], 1
 10651 00008561 0000                <1>
 10652 00008563 746D                <1> 		je dragwin
 10653 00008565 813D[D6810000]0000- <1> 		cmp dword [dragging], 0
 10654 0000856D 0000                <1>
 10655 0000856F 7411                <1> 		je nodragwincheck
 10656 00008571 3935[D6810000]      <1> 		cmp dword [dragging], esi
 10657 00008577 0F8514010000        <1> 		jne near nexticonsel
 10658 0000857D E950000000          <1> 		jmp dragwin
 10659                              <1> 	nodragwincheck:
 10660 00008582 663905[3E5D0000]    <1> 		cmp [mousecursorposition], ax
 10661 00008589 0F8202010000        <1> 		jb near nexticonsel
 10662 0000858F 660307              <1> 		add ax, [edi]
 10663 00008592 660307              <1> 		add ax, [edi]
 10664 00008595 663905[3E5D0000]    <1> 		cmp [mousecursorposition], ax
 10665 0000859C 0F87EF000000        <1> 		ja near nexticonsel
 10666 000085A2 66390D[405D0000]    <1> 		cmp [mousecursorposition + 2], cx
 10667 000085A9 0F82E2000000        <1> 		jb near nexticonsel
 10668 000085AF 66391D[405D0000]    <1> 		cmp [mousecursorposition + 2], bx
 10669 000085B6 0F87D5000000        <1> 		ja near nexticonsel
 10670 000085BC 662D1400            <1> 		sub ax, 20
 10671 000085C0 663905[3E5D0000]    <1> 		cmp [mousecursorposition], ax
 10672 000085C7 0F87A4000000        <1> 		ja near killwin
 10673 000085CD E98B000000          <1> 		jmp nodragwin
 10674                              <1> 	dragwin:
 10675 000085D2 663905[3A5D0000]    <1> 		cmp [lastmouseposition], ax
 10676 000085D9 0F82B2000000        <1> 		jb near nexticonsel
 10677 000085DF 660307              <1> 		add ax, [edi]
 10678 000085E2 660307              <1> 		add ax, [edi]
 10679 000085E5 663905[3A5D0000]    <1> 		cmp [lastmouseposition], ax
 10680 000085EC 0F879F000000        <1> 		ja near nexticonsel
 10681 000085F2 66390D[3C5D0000]    <1> 		cmp [lastmouseposition + 2], cx
 10682 000085F9 0F8292000000        <1> 		jb near nexticonsel
 10683 000085FF 66391D[3C5D0000]    <1> 		cmp [lastmouseposition + 2], bx
 10684 00008606 0F8785000000        <1> 		ja near nexticonsel
 10685 0000860C 8935[D6810000]      <1> 		mov [dragging], esi
 10686 00008612 803D[3A870000]01    <1> 		cmp byte [windrag], 1
 10687 00008619 7706                <1> 		ja .nochangewindrag
 10688 0000861B FE05[3A870000]      <1> 		inc byte [windrag]
 10689                              <1> 	.nochangewindrag:
 10690 00008621 662B15[3A5D0000]    <1> 		sub dx, [lastmouseposition]
 10691 00008628 660315[3E5D0000]    <1> 		add dx, [mousecursorposition]
 10692 0000862F 66030D[405D0000]    <1> 		add cx, [mousecursorposition + 2]
 10693 00008636 662B0D[3C5D0000]    <1> 		sub cx, [lastmouseposition + 2]
 10694 0000863D 663B15[485B0000]    <1> 		cmp dx, [resolutionx2]
 10695 00008644 7607                <1> 		jbe chkyresdrgwin
 10696 00008646 668B15[3E5D0000]    <1> 		mov dx, [mousecursorposition]
 10697                              <1> 	chkyresdrgwin:
 10698 0000864D 663B0D[5C5A0000]    <1> 		cmp cx, [resolutiony]
 10699 00008654 7607                <1> 		jbe nodragwin
 10700 00008656 668B0D[405D0000]    <1> 		mov cx, [mousecursorposition + 2]
 10701                              <1> 	nodragwin:
 10702 0000865D 8B5E0C              <1> 		mov ebx, [esi + 12]
 10703 00008660 668B460A            <1> 		mov ax, [esi + 10]
 10704 00008664 8B7602              <1> 		mov esi, [esi + 2]
 10705 00008667 E811F6FFFF          <1> 		call showwindow
 10706 0000866C E939000000          <1> 		jmp doneiconsel
 10707                              <1> 	killwin:
 10708 00008671 66C7060000          <1> 		mov word [esi], 0
 10709 00008676 C605[E5230000]00    <1> 		mov byte [termguion], 0
 10710 0000867D E8E0ECFFFF          <1> 		call guiclear
 10711 00008682 E82BEDFFFF          <1> 		call reloadallgraphics
 10712 00008687 E872EAFFFF          <1> 		call switchmousepos2 ;Copy what is now under the mouse
 10713 0000868C E94EE6FFFF          <1> 		jmp guistart
 10714                              <1> 	nexticonsel:
 10715 00008691 6681660AFEFF        <1> 		and word [esi + 10], 0xFFFE
 10716 00008697 81C610000000        <1> 		add esi, 16
 10717 0000869D 81FE[9DD40300]      <1> 		cmp esi, graphicstableend
 10718 000086A3 7305                <1> 		jae doneiconsel
 10719 000086A5 E9ADFBFFFF          <1> 		jmp clicon2
 10720                              <1> 	doneiconsel:
 10721 000086AA 813D[D6810000]0100- <1> 		cmp dword [dragging], 1
 10722 000086B2 0000                <1>
 10723 000086B4 731A                <1> 		jae doneiconsel2
 10724 000086B6 A2[3A870000]        <1> 		mov [windrag], al
 10725 000086BB 813D[268A0000]0000- <1> 		cmp dword [codepointer], 0
 10726 000086C3 0000                <1>
 10727 000086C5 7409                <1> 		je doneiconsel2
 10728 000086C7 8B1D[268A0000]      <1> 		mov ebx, [codepointer]
 10729 000086CD FFD3                <1> 		call ebx
 10730 000086CF C3                  <1> 		ret
 10731                              <1> 	doneiconsel2:
 10732 000086D0 A0[4F5E0000]        <1> 		mov al, [LBUTTON]
 10733 000086D5 A2[D4810000]        <1> 		mov [pLBUTTON], al
 10734 000086DA A0[505E0000]        <1> 		mov al, [RBUTTON]
 10735 000086DF A2[D5810000]        <1> 		mov [pRBUTTON], al
 10736 000086E4 813D[D6810000]0100- <1> 		cmp dword [dragging], 1
 10737 000086EC 0000                <1>
 10738 000086EE 0F8618000000        <1> 		jbe near noreloadgraphicsclick
 10739 000086F4 E805EAFFFF          <1> 		call switchmousepos2
 10740 000086F9 803D[3A870000]01    <1> 		cmp byte [windrag], 1
 10741 00008700 7305                <1> 		jae noclearcursorcl
 10742 00008702 E83FE9FFFF          <1> 		call clearmousecursor
 10743                              <1> noclearcursorcl:
 10744 00008707 E8A6ECFFFF          <1> 		call reloadallgraphics
 10745                              <1> noreloadgraphicsclick:
 10746 0000870C 30E4                <1> 		xor ah, ah
 10747 0000870E 31C9                <1> 		xor ecx, ecx
 10748 00008710 31D2                <1> 		xor edx, edx
 10749 00008712 B001                <1> 		mov al, 1
 10750 00008714 668B15[3E5D0000]    <1> 		mov dx, [mousecursorposition]
 10751 0000871B 668B0D[405D0000]    <1> 		mov cx, [mousecursorposition + 2]
 10752 00008722 66BBE738            <1> 		mov bx, 0011100011100111b
 10753 00008726 C605[D0810000]01    <1> 		mov byte [showcursorfonton], 1
 10754 0000872D E84AF3FFFF          <1> 		call showfontvesa
 10755 00008732 C605[D0810000]00    <1> 		mov byte [showcursorfonton], 0
 10756 00008739 C3                  <1> 		ret
 10757 0000873A 00                  <1> windrag db 0
 10758 0000873B 00000000            <1> lastdrag dw 0,0
 10759 0000873F 00000000            <1> grpctblpos dw 0,0
 10760                              <1> 
 10761                              <1> 
 10762                              <1> 
 10763 00008743 00<rept>            <1> grphbuf times 16 db 0
 10764                              <1> 	graphicsadd:
 10765 00008753 BF[9DD20300]        <1> 		mov edi, graphicstable
 10766                              <1> 	shwgrph1:
 10767 00008758 397702              <1> 		cmp dword [edi + 2], esi
 10768 0000875B 7414                <1> 		je showgraphicsreplace2
 10769 0000875D 81C710000000        <1> 		add edi, 16
 10770 00008763 81FF[9DD40300]      <1> 		cmp edi, graphicstableend
 10771 00008769 0F8337020000        <1> 		jae near showgraphicsnew
 10772 0000876F EBE7                <1> 		jmp shwgrph1
 10773                              <1> 	showgraphicsreplace2:
 10774 00008771 8935[45870000]      <1> 		mov [grphbuf + 2], esi
 10775 00008777 668915[49870000]    <1> 		mov [grphbuf + 6], dx
 10776 0000877E 66890D[4B870000]    <1> 		mov [grphbuf + 8], cx
 10777 00008785 891D[4F870000]      <1> 		mov [grphbuf + 12], ebx
 10778 0000878B 30FF                <1> 		xor bh, bh
 10779 0000878D 88E3                <1> 		mov bl, ah
 10780 0000878F 30E4                <1> 		xor ah, ah
 10781 00008791 66A3[4D870000]      <1> 		mov [grphbuf + 10], ax	
 10782 00008797 66891D[43870000]    <1> 		mov [grphbuf], bx
 10783 0000879E 66A1[43870000]      <1> 		mov ax, [grphbuf]
 10784 000087A4 663D0100            <1> 		cmp ax, 1
 10785 000087A8 0F8419000000        <1> 		je near replaceicon
 10786 000087AE 663D0200            <1> 		cmp ax, 2
 10787 000087B2 0F8493000000        <1> 		je near replacestring
 10788 000087B8 663D0300            <1> 		cmp ax, 3
 10789 000087BC 0F840F010000        <1> 		je near replacewindow
 10790 000087C2 E9BC010000          <1> 		jmp showgraphicsreplace
 10791                              <1> 	replaceicon:
 10792 000087C7 893D[DA810000]      <1> 		mov [lastpos], edi
 10793 000087CD 8935[DE810000]      <1> 		mov [lastpos + 4], esi
 10794 000087D3 8B7702              <1> 		mov esi, [edi + 2]
 10795 000087D6 668B5F0C            <1> 		mov bx, [edi + 12]
 10796 000087DA 668B5706            <1> 		mov dx, [edi + 6]
 10797 000087DE 668B4F08            <1> 		mov cx, [edi + 8]
 10798 000087E2 668B06              <1> 		mov ax, [esi]
 10799 000087E5 66A3[E2810000]      <1> 		mov [colorbuf], ax
 10800 000087EB 66A1[AE730000]      <1> 		mov ax, [background]
 10801 000087F1 668906              <1> 		mov [esi], ax
 10802 000087F4 8B5F0C              <1> 		mov ebx, [edi + 12]
 10803 000087F7 668B470A            <1> 		mov ax, [edi + 10]
 10804 000087FB 2401                <1> 		and al, 1
 10805 000087FD A2[2A8A0000]        <1> 		mov [iconselected], al
 10806 00008802 668B470A            <1> 		mov ax, [edi + 10]
 10807 00008806 E869E9FFFF          <1> 		call showicon2
 10808 0000880B 8B3D[DA810000]      <1> 		mov edi, [lastpos]
 10809 00008811 8B7702              <1> 		mov esi, [edi + 2]
 10810 00008814 66A1[E2810000]      <1> 		mov ax, [colorbuf]
 10811 0000881A 668906              <1> 		mov [esi], ax
 10812 0000881D 8B35[DE810000]      <1> 		mov esi, [lastpos + 4]
 10813 00008823 668B15[49870000]    <1> 		mov dx, [grphbuf + 6]
 10814 0000882A 668B0D[4B870000]    <1> 		mov cx, [grphbuf + 8]
 10815 00008831 668B1D[43870000]    <1> 		mov bx, [grphbuf]
 10816 00008838 66A1[4D870000]      <1> 		mov ax, [grphbuf + 10]
 10817 0000883E 88DC                <1> 		mov ah, bl
 10818 00008840 8B1D[4F870000]      <1> 		mov ebx, [grphbuf + 12]
 10819 00008846 E938010000          <1> 		jmp showgraphicsreplace
 10820                              <1> 	replacestring:
 10821 0000884B 893D[DA810000]      <1> 		mov [lastpos], edi
 10822 00008851 8935[DE810000]      <1> 		mov [lastpos + 4], esi
 10823 00008857 8B5F0C              <1> 		mov ebx, [edi + 12]
 10824 0000885A 8B7702              <1> 		mov esi, [edi + 2]
 10825 0000885D 668B5706            <1> 		mov dx, [edi + 6]
 10826 00008861 668B4F08            <1> 		mov cx, [edi + 8]
 10827 00008865 66A1[6B7A0000]      <1> 		mov ax, [colorfont2]
 10828 0000886B 66A3[E2810000]      <1> 		mov [colorbuf], ax
 10829 00008871 66A1[AE730000]      <1> 		mov ax, [background]
 10830 00008877 66A3[6B7A0000]      <1> 		mov [colorfont2], ax		
 10831 0000887D 8B5F0C              <1> 		mov ebx, [edi + 12]
 10832 00008880 668B470A            <1> 		mov ax, [edi + 10]
 10833 00008884 2401                <1> 		and al, 1
 10834 00008886 A2[D2810000]        <1> 		mov [mouseselecton], al
 10835 0000888B 668B470A            <1> 		mov ax, [edi + 10]
 10836 0000888F E86FF1FFFF          <1> 		call showstring2
 10837 00008894 66A1[E2810000]      <1> 		mov ax, [colorbuf]
 10838 0000889A 66A3[6B7A0000]      <1> 		mov [colorfont2], ax
 10839 000088A0 8B3D[DA810000]      <1> 		mov edi, [lastpos]
 10840 000088A6 8B7702              <1> 		mov esi, [edi + 2]
 10841 000088A9 668B15[49870000]    <1> 		mov dx, [grphbuf + 6]
 10842 000088B0 668B0D[4B870000]    <1> 		mov cx, [grphbuf + 8]
 10843 000088B7 668B1D[43870000]    <1> 		mov bx, [grphbuf]
 10844 000088BE 66A1[4D870000]      <1> 		mov ax, [grphbuf + 10]
 10845 000088C4 88DC                <1> 		mov ah, bl
 10846 000088C6 8B1D[4F870000]      <1> 		mov ebx, [grphbuf + 12]
 10847 000088CC E9B2000000          <1> 		jmp showgraphicsreplace
 10848                              <1> 	replacewindow:
 10849 000088D1 893D[DA810000]      <1> 		mov [lastpos], edi
 10850 000088D7 8935[DE810000]      <1> 		mov [lastpos + 4], esi
 10851 000088DD 8B7702              <1> 		mov esi, [edi + 2]
 10852 000088E0 8B3D[677C0000]      <1> 		mov edi, [windowbufloc]
 10853 000088E6 31D2                <1> 		xor edx, edx
 10854 000088E8 668B15[485B0000]    <1> 		mov dx, [resolutionx2]
 10855 000088EF C1E204              <1> 		shl edx, 4
 10856 000088F2 29D7                <1> 		sub edi, edx
 10857 000088F4 31D2                <1> 		xor edx, edx
 10858 000088F6 668B16              <1> 		mov dx, [esi]
 10859 000088F9 660316              <1> 		add dx, [esi]
 10860 000088FC 668B4E02            <1> 		mov cx, [esi + 2]
 10861 00008900 6681C11000          <1> 		add cx, 16
 10862 00008905 66A1[AE730000]      <1> 		mov ax, [background]
 10863 0000890B 803D[3A870000]01    <1> 		cmp byte [windrag], 1
 10864 00008912 7604                <1> 		jbe clearwindow
 10865 00008914 662B4E02            <1> 		sub cx, [esi + 2]
 10866                              <1> 	clearwindow:
 10867                              <1> 		%ifdef gui.background
 10868                              <1> 			cmp dword [backgroundimage], 0
 10869                              <1> 			je .noback
 10870                              <1> 			push esi
 10871                              <1> 			mov esi, [backgroundimage]
 10872                              <1> 			sub edi, [physbaseptr]
 10873                              <1> 			add esi, edi
 10874                              <1> 			add edi, [physbaseptr]
 10875                              <1> 			mov ax, [esi]
 10876                              <1> 			pop esi
 10877                              <1> 		.noback:
 10878                              <1> 		%endif
 10879 00008918 668907              <1> 		mov [edi], ax
 10880 0000891B 81C702000000        <1> 		add edi, 2
 10881 00008921 81EA02000000        <1> 		sub edx, 2
 10882 00008927 81FA00000000        <1> 		cmp edx, 0
 10883 0000892D 75E9                <1> 		jne clearwindow
 10884 0000892F 6649                <1> 		dec cx
 10885 00008931 668B15[485B0000]    <1> 		mov dx, [resolutionx2]
 10886 00008938 662B16              <1> 		sub dx, [esi]
 10887 0000893B 662B16              <1> 		sub dx, [esi]
 10888 0000893E 01D7                <1> 		add edi, edx
 10889 00008940 668B16              <1> 		mov dx, [esi]
 10890 00008943 660316              <1> 		add dx, [esi]
 10891 00008946 6681F90000          <1> 		cmp cx, 0
 10892 0000894B 75CB                <1> 		jne clearwindow
 10893                              <1> 	endwindowclear:
 10894 0000894D C605[E6230000]00    <1> 		mov byte [termcopyon], 0
 10895 00008954 8B3D[DA810000]      <1> 		mov edi, [lastpos]
 10896 0000895A 8B35[45870000]      <1> 		mov esi, [grphbuf + 2]
 10897 00008960 668B15[49870000]    <1> 		mov dx, [grphbuf + 6]
 10898 00008967 668B0D[4B870000]    <1> 		mov cx, [grphbuf + 8]
 10899 0000896E 668B1D[43870000]    <1> 		mov bx, [grphbuf]
 10900 00008975 66A1[4D870000]      <1> 		mov ax, [grphbuf + 10]
 10901 0000897B 88DC                <1> 		mov ah, bl
 10902 0000897D 8B1D[4F870000]      <1> 		mov ebx, [grphbuf + 12]
 10903                              <1> 	showgraphicsreplace:
 10904 00008983 897702              <1> 		mov [edi + 2], esi
 10905 00008986 66895706            <1> 		mov [edi + 6], dx
 10906 0000898A 66894F08            <1> 		mov [edi + 8], cx
 10907 0000898E 895F0C              <1> 		mov [edi + 12], ebx
 10908 00008991 30FF                <1> 		xor bh, bh
 10909 00008993 88E3                <1> 		mov bl, ah
 10910 00008995 30E4                <1> 		xor ah, ah
 10911 00008997 6689470A            <1> 		mov [edi + 10], ax
 10912 0000899B 66891F              <1> 		mov [edi], bx
 10913 0000899E 8B5F0C              <1> 		mov ebx, [edi + 12]
 10914 000089A1 668B470A            <1> 		mov ax, [edi + 10]
 10915 000089A5 C3                  <1> 		ret
 10916                              <1> 	showgraphicsnew:
 10917 000089A6 BF[9DD20300]        <1> 		mov edi, graphicstable
 10918                              <1> 	shwgrph2:
 10919 000089AB 66813F0000          <1> 		cmp word [edi], 0
 10920 000089B0 74D1                <1> 		je showgraphicsreplace
 10921 000089B2 81C710000000        <1> 		add edi, 16
 10922 000089B8 81FF[9DD40300]      <1> 		cmp edi, graphicstableend
 10923 000089BE 72EB                <1> 		jb shwgrph2
 10924                              <1> 	showgraphicsdone:
 10925 000089C0 C3                  <1> 		ret
 10926                              <1> 	
 10927                              <1> putpixel: ;color in si, point is (dx,cx)
 10928                              <1> 		;destroys edi, ebx, eax
 10929 000089C1 6650                <1> 	push ax
 10930 000089C3 6653                <1> 	push bx
 10931 000089C5 31C0                <1> 	xor eax, eax
 10932 000089C7 31DB                <1> 	xor ebx, ebx
 10933 000089C9 31FF                <1> 	xor edi, edi
 10934 000089CB 668B1D[5C5A0000]    <1> 	mov bx, [resolutiony]
 10935 000089D2 66A1[5A5A0000]      <1> 	mov ax, [resolutionx]
 10936 000089D8 6639C2              <1> 	cmp dx, ax
 10937 000089DB 7720                <1> 	ja .doneput
 10938 000089DD 66D1E0              <1> 	shl ax, 1
 10939 000089E0 6639D9              <1> 	cmp cx, bx
 10940 000089E3 7718                <1> 	ja .doneput
 10941 000089E5 6689CB              <1> 	mov bx, cx
 10942 000089E8 52                  <1> 	push edx
 10943 000089E9 F7E3                <1> 	mul ebx
 10944 000089EB 5A                  <1> 	pop edx
 10945 000089EC 6601D7              <1> 	add di, dx
 10946 000089EF 6601D7              <1> 	add di, dx
 10947 000089F2 01C7                <1> 	add edi, eax
 10948 000089F4 033D[705A0000]      <1> 	add edi, [physbaseptr]
 10949 000089FA 668937              <1> 	mov [edi], si
 10950                              <1> .doneput:
 10951 000089FD 665B                <1> 	pop bx
 10952 000089FF 6658                <1> 	pop ax
 10953 00008A01 C3                  <1> 	ret
 10954                              <1> 	
 10955                              <1> getpixelmem:	;pixel in (dx, cx), outputs memory location in edi
 10956 00008A02 31FF                <1> 	xor edi, edi
 10957 00008A04 31C0                <1> 	xor eax, eax
 10958 00008A06 31DB                <1> 	xor ebx, ebx
 10959 00008A08 668B1D[485B0000]    <1> 	mov bx, [resolutionx2]
 10960 00008A0F 6689D7              <1> 	mov di, dx
 10961 00008A12 6601D7              <1> 	add di, dx
 10962 00008A15 6689C8              <1> 	mov ax, cx
 10963 00008A18 F7E3                <1> 	mul ebx
 10964 00008A1A 01C7                <1> 	add edi, eax
 10965 00008A1C 033D[705A0000]      <1> 	add edi, [physbaseptr]
 10966 00008A22 C3                  <1> 	ret
 10967                              <1> 
 10968 00008A23 00                  <1> 	mouseon db 0
 10969 00008A24 0000                <1> 	icon dw 0	;pointer to icon
 10970 00008A26 00000000            <1> 	codepointer dd 0 ;pointer to code
 10971 00008A2A 00                  <1> 	iconselected db 0
 10972                                  %endif
 10973                                  %ifdef network.included
 10974                                  	%include "source/network.asm"
 10975                              <1> network.init:
 10976                              <1> %ifdef rtl8139.included
 10977                              <1> 	%include "source/drivers/network/rtl8139.asm"
 10978                              <1> %endif
 10979                              <1> %ifdef rtl8169.included
 10980                              <1> 	%include "source/drivers/network/rtl8169.asm"
 10981                              <1> %endif
 10982                              <1> %ifdef ne2000.included
 10983                              <1> 	%include "source/drivers/network/ne2000.asm"
 10984                              <2> ne2000:
 10985 00008A2B E805000000          <2> 	call .init
 10986 00008A30 E93D030000          <2> 	jmp .end
 10987                              <2> 
 10988                              <2> ;	PAGE0			PAGE 1			PAGE 2
 10989                              <2> ;	READ	WRITE	READ	WRITE	READ	WRITE
 10990                              <2> ;0	CR		CR		CR		CR		CR		CR
 10991                              <2> ;1	CLDA0 	PSTART	PAR0	PAR0	PSTART	CLDA0
 10992                              <2> ;2	CLDA1	PSTOP	PAR1	PAR1	PSTOP	CLDA1
 10993                              <2> ;3	BNRY	BNRY	PAR2	PAR2	RNPP	RNPP
 10994                              <2> ;4	TSR		TPSR	PAR3	PAR3	TPSR	N/A
 10995                              <2> ;5	NCR		TBCR0	PAR4	PAR4	LNPP	LNPP
 10996                              <2> ;6	FIFO	TCBR1	PAR5	PAR5	ACU		ACU
 10997                              <2> ;7	ISR		ISR		CURR	CURR	ACL		ACL
 10998                              <2> ;8	CRDA0	RSAR0	MAR0	MAR0	N/A		N/A
 10999                              <2> ;9	CRDA1	RSAR1	MAR1	MAR1	N/A		N/A
 11000                              <2> ;A	N/A		RBCR0	MAR2	MAR2	N/A		N/A
 11001                              <2> ;B	N/A		RBCR1	MAR3	MAR3	N/A		N/A
 11002                              <2> ;C	RSR		RCR		MAR4	MAR4	RCR		N/A
 11003                              <2> ;D	CNTR0	TCR		MAR5	MAR5	TCR		N/A
 11004                              <2> ;E	CNTR1	DCR		MAR6	MAR6	DCR		N/A
 11005                              <2> ;F	CNTR2	IMR		MAR7	MAR7	IMR		N/A
 11006                              <2> .CR equ 0
 11007                              <2> 	.CR.STP	equ 1		;Stop
 11008                              <2> 	.CR.STA equ 2		;Start
 11009                              <2> 	.CR.TXP equ 4		;Transmit
 11010                              <2> 	.CR.RD0 equ 8		;Remote DMA 0
 11011                              <2> 	.CR.RD1 equ 0x10	;Remote DMA 1
 11012                              <2> 	.CR.RD2 equ 0x20	;Remote DMA 2
 11013                              <2> 	.CR.PS0 equ 0x40	;Page Select 0
 11014                              <2> 	.CR.PS1 equ 0x80	;Page Select 1
 11015                              <2> .PSTART equ 1
 11016                              <2> .PSTOP equ 2
 11017                              <2> .BNRY equ 3
 11018                              <2> .ISR equ 7
 11019                              <2> 	.ISR.PRX equ 1		;Packet Received
 11020                              <2> 	.ISR.PTX equ 2		;Packet Transmitted
 11021                              <2> 	.ISR.RXE equ 4		;Receive Error
 11022                              <2> 	.ISR.TXE equ 8		;Transmission Error
 11023                              <2> 	.ISR.OVW equ 0x10	;Overwrite
 11024                              <2> 	.ISR.CNT equ 0x20	;Counter Overflow
 11025                              <2> 	.ISR.RDC equ 0x40	;Remote Data Complete
 11026                              <2> 	.ISR.RST equ 0x80	;Reset status
 11027                              <2> .RSAR0 equ 8
 11028                              <2> .RSAR1 equ 9
 11029                              <2> .RBCR0 equ 0xA
 11030                              <2> .RBCR1 equ 0xB
 11031                              <2> .RCR equ 0xC
 11032                              <2> 	.RCR.SEP equ 1		;Save Errored Packets
 11033                              <2> 	.RCR.AR equ 2		;Accept Runt packet
 11034                              <2> 	.RCR.AB equ 4		;Accept Broadcast
 11035                              <2> 	.RCR.AM equ 8		;Accept Multicast
 11036                              <2> 	.RCR.PRO equ 0x10	;Promiscuous Physical
 11037                              <2> 	.RCR.MON equ 0x20	;Monitor Mode
 11038                              <2> .DCR equ 0xE
 11039                              <2> 	.DCR.WTS equ 1		;Word Transfer Select
 11040                              <2> 	.DCR.BOS equ 2		;Byte Order Select
 11041                              <2> 	.DCR.LAS equ 4		;Long Address Select
 11042                              <2> 	.DCR.LS equ 8		;Loopback Select
 11043                              <2> 	.DCR.AR equ 0x10	;Auto-initialize Remote
 11044                              <2> 	.DCR.FT0 equ 0x20	;FIFO Threshold Select 0
 11045                              <2> 	.DCR.FT1 equ 0x40	;FIFO Threshold Select 1
 11046                              <2> .ASIC equ 0x10
 11047                              <2> .RESET equ 0x1F
 11048                              <2> 
 11049                              <2> .init:
 11050 00008A35 BBFFFFFFFF          <2> 	mov ebx, 0xFFFFFFFF
 11051 00008A3A 31C0                <2> 	xor eax, eax
 11052 00008A3C A2[BC670000]        <2> 	mov [pcifunction], al
 11053 00008A41 A2[BA670000]        <2> 	mov [pcibus], al
 11054 00008A46 A2[BB670000]        <2> 	mov [pcidevice], al
 11055 00008A4B B002                <2> 	mov al, 2 ;type code
 11056 00008A4D A2[4B680000]        <2> 	mov [pcitype], al
 11057 00008A52 B8EC102980          <2> 	mov eax, 0x802910EC
 11058 00008A57 A3[BF670000]        <2> 	mov [pcidevid], eax
 11059 00008A5C E872DDFFFF          <2> 	call getpciport
 11060 00008A61 81FBFFFFFFFF        <2> 	cmp ebx, 0xFFFFFFFF
 11061 00008A67 7501                <2> 	jne .good0
 11062 00008A69 C3                  <2> 	ret
 11063                              <2> .good0:
 11064 00008A6A 8915[348D0000]      <2> 	mov [.basenicaddr], edx
 11065 00008A70 89D1                <2> 	mov ecx, edx
 11066                              <2> .test:
 11067 00008A72 E854000000          <2> 	call .reset
 11068 00008A77 E87B000000          <2> 	call .stop
 11069 00008A7C 89CA                <2> 	mov edx, ecx
 11070 00008A7E B9FF000000          <2> 	mov ecx, 0xFF
 11071 00008A83 E2FE                <2> 	loop $ ;wait for ~100 us
 11072 00008A85 89D1                <2> 	mov ecx, edx
 11073 00008A87 EC                  <2> 	in al, dx
 11074 00008A88 2427                <2> 	and al, (.CR.RD2 | .CR.TXP | .CR.STA | .CR.STP)
 11075 00008A8A 3C21                <2> 	cmp al, (.CR.RD2 | .CR.STP)
 11076 00008A8C 7410                <2> 	je .good1
 11077 00008A8E 89CA                <2> 	mov edx, ecx
 11078 00008A90 81C207000000        <2> 	add edx, .ISR
 11079 00008A96 EC                  <2> 	in al, dx
 11080 00008A97 2480                <2> 	and al, .ISR.RST
 11081 00008A99 3C80                <2> 	cmp al, .ISR.RST
 11082 00008A9B 7401                <2> 	je .good1
 11083 00008A9D C3                  <2> 	ret
 11084                              <2> .good1:
 11085 00008A9E E827A7FFFF          <2> call showhex	;for debugging, please remove
 11086 00008AA3 E85B000000          <2> 	call .setup
 11087 00008AA8 E86B030000          <2> call showmac
 11088 00008AAD BE[398D0000]        <2> mov esi, .name
 11089 00008AB2 E8A592FFFF          <2> call print
 11090 00008AB7 BE[418D0000]        <2> mov esi, .initmsg
 11091 00008ABC E89B92FFFF          <2> call print
 11092 00008AC1 C605[388D0000]01    <2> 	mov byte [.nicconfig], 1
 11093 00008AC8 31DB                <2> 	xor ebx, ebx
 11094 00008ACA C3                  <2> 	ret
 11095                              <2> .reset:
 11096 00008ACB 8B15[348D0000]      <2> 	mov edx, [.basenicaddr]
 11097 00008AD1 81C21F000000        <2> 	add edx, .RESET
 11098 00008AD7 EC                  <2> 	in al, dx
 11099 00008AD8 EE                  <2> 	out dx, al ;write its contents to itself
 11100 00008AD9 C3                  <2> 	ret
 11101                              <2> .page:
 11102 00008ADA 66C1E00E            <2> 	shl ax, 14
 11103 00008ADE 8B15[348D0000]      <2> 	mov edx, [.basenicaddr]
 11104 00008AE4 EC                  <2> 	in al, dx
 11105 00008AE5 243F                <2> 	and al, 00111111b
 11106 00008AE7 08E0                <2> 	or al, ah
 11107 00008AE9 EE                  <2> 	out dx, al
 11108 00008AEA C3                  <2> 	ret
 11109                              <2> .start:
 11110 00008AEB 8B15[348D0000]      <2> 	mov edx, [.basenicaddr]
 11111 00008AF1 B020                <2> 	mov al, .CR.RD2
 11112 00008AF3 B002                <2> 	mov al, .CR.STA
 11113 00008AF5 EE                  <2> 	out dx, al
 11114 00008AF6 C3                  <2> 	ret
 11115                              <2> .stop:
 11116 00008AF7 8B15[348D0000]      <2> 	mov edx, [.basenicaddr]
 11117 00008AFD B020                <2> 	mov al, .CR.RD2
 11118 00008AFF 0C01                <2> 	or al, .CR.STP
 11119 00008B01 EE                  <2> 	out dx, al
 11120 00008B02 C3                  <2> 	ret
 11121                              <2> .setup:
 11122 00008B03 E8EFFFFFFF          <2> 	call .stop
 11123 00008B08 8B15[348D0000]      <2> 	mov edx, [.basenicaddr]
 11124 00008B0E 81C20E000000        <2> 	add edx, .DCR
 11125 00008B14 B040                <2> 	mov al, .DCR.FT1
 11126 00008B16 0C01                <2> 	or al, .DCR.WTS
 11127 00008B18 0C08                <2> 	or al, .DCR.LS
 11128 00008B1A EE                  <2> 	out dx, al ;Set FIFO threshold, byte order, word-wide DMA
 11129 00008B1B E8B9000000          <2> 	call .getmac
 11130 00008B20 E8D2FFFFFF          <2> 	call .stop
 11131 00008B25 30C0                <2> 	xor al, al
 11132 00008B27 8B15[348D0000]      <2> 	mov edx, [.basenicaddr]
 11133 00008B2D 81C20A000000        <2> 	add edx, .RBCR0
 11134 00008B33 EE                  <2> 	out dx, al
 11135 00008B34 6642                <2> 	inc dx
 11136 00008B36 EE                  <2> 	out dx, al ;Clear byte count
 11137 00008B37 B800400000          <2> 	mov eax, 16*1024
 11138 00008B3C A3[548D0000]        <2> 	mov [.ringstart], eax
 11139 00008B41 C1E808              <2> 	shr eax, 8
 11140 00008B44 66A3[508D0000]      <2> 	mov [.pagestart], ax
 11141 00008B4A 0534000000          <2> 	add eax, 64-2*6
 11142 00008B4F A3[528D0000]        <2> 	mov [.pageend], eax
 11143 00008B54 C1E008              <2> 	shl eax, 8
 11144 00008B57 66A3[588D0000]      <2> 	mov [.ringend], ax ;set page and ring starts and ends
 11145 00008B5D 8B15[348D0000]      <2> 	mov edx, [.basenicaddr]
 11146 00008B63 81C201000000        <2> 	add edx, .PSTART
 11147 00008B69 A0[508D0000]        <2> 	mov al, [.pagestart]
 11148 00008B6E EE                  <2> 	out dx, al
 11149 00008B6F A0[528D0000]        <2> 	mov al, [.pageend]
 11150 00008B74 6642                <2> 	inc dx
 11151 00008B76 EE                  <2> 	out dx, al
 11152 00008B77 A0[508D0000]        <2> 	mov al, [.pagestart]
 11153 00008B7C 6642                <2> 	inc dx
 11154 00008B7E EE                  <2> 	out dx, al
 11155 00008B7F E873FFFFFF          <2> 	call .stop
 11156                              <2> ;INSERT INTERRUPT ENABLE HERE
 11157 00008B84 B001                <2> 	mov al, 1
 11158 00008B86 E84FFFFFFF          <2> 	call .page
 11159 00008B8B 8B15[348D0000]      <2> 	mov edx, [.basenicaddr]
 11160 00008B91 BF[628D0000]        <2> 	mov edi, .rom
 11161                              <2> .copymactocard:
 11162 00008B96 42                  <2> 	inc edx
 11163 00008B97 6E                  <2> 	outsb
 11164 00008B98 81C702000000        <2> 	add edi, 2
 11165 00008B9E 81FA06000000        <2> 	cmp edx, 6
 11166 00008BA4 76F0                <2> 	jbe .copymactocard
 11167 00008BA6 8B15[348D0000]      <2> 	mov edx, [.basenicaddr]
 11168 00008BAC 81C207000000        <2> 	add edx, 7
 11169 00008BB2 A0[508D0000]        <2> 	mov al, [.pagestart]
 11170 00008BB7 FEC0                <2> 	inc al
 11171 00008BB9 EE                  <2> 	out dx, al ;set page in CURR register
 11172                              <2> ;INSERT MULTICAST INIT HERE
 11173 00008BBA E838FFFFFF          <2> 	call .stop
 11174 00008BBF 8B15[348D0000]      <2> 	mov edx, [.basenicaddr]
 11175 00008BC5 81C20C000000        <2> 	add edx, .RCR
 11176 00008BCB B004                <2> 	mov al, .RCR.AB
 11177 00008BCD EE                  <2> 	out dx, al ;accept broadcast
 11178 00008BCE 6642                <2> 	inc dx
 11179 00008BD0 30C0                <2> 	xor al, al
 11180 00008BD2 EE                  <2> 	out dx, al ;stop loopback
 11181 00008BD3 E813FFFFFF          <2> 	call .start
 11182 00008BD8 C3                  <2> 	ret
 11183                              <2> .getmac:
 11184 00008BD9 8B15[348D0000]      <2> 	mov edx, [.basenicaddr]
 11185 00008BDF B020                <2> 	mov al, 0x20
 11186 00008BE1 0C02                <2> 	or al, 2
 11187 00008BE3 EE                  <2> 	out dx, al	;set STA and RD2 bits
 11188 00008BE4 6681C20A00          <2> 	add dx, .RBCR0
 11189 00008BE9 B010                <2> 	mov al, 16
 11190 00008BEB EE                  <2> 	out dx, al
 11191 00008BEC 6642                <2> 	inc dx
 11192 00008BEE 30C0                <2> 	xor al, al
 11193 00008BF0 EE                  <2> 	out dx, al
 11194 00008BF1 8B15[348D0000]      <2> 	mov edx, [.basenicaddr]
 11195 00008BF7 6681C20800          <2> 	add dx, .RSAR0
 11196 00008BFC EE                  <2> 	out dx, al
 11197 00008BFD 6642                <2> 	inc dx
 11198 00008BFF EE                  <2> 	out dx, al
 11199 00008C00 668B15[348D0000]    <2> 	mov dx, [.basenicaddr]
 11200 00008C07 B008                <2> 	mov al, 8
 11201 00008C09 0C02                <2> 	or al, 2
 11202 00008C0B EE                  <2> 	out dx, al
 11203 00008C0C 668B15[348D0000]    <2> 	mov dx, [.basenicaddr]
 11204 00008C13 6681C21000          <2> 	add dx, .ASIC
 11205 00008C18 B908000000          <2> 	mov ecx, 8
 11206 00008C1D BF[628D0000]        <2> 	mov edi, .rom
 11207 00008C22 F3666D              <2> 	rep insw
 11208                              <2> .copymac:
 11209 00008C25 BF[628D0000]        <2> 	mov edi, .rom
 11210 00008C2A BE[5C8D0000]        <2> 	mov esi, .mac
 11211 00008C2F B906000000          <2> 	mov ecx, 6
 11212                              <2> .lpmac:
 11213 00008C34 8A07                <2> 	mov al, [edi]
 11214 00008C36 8806                <2> 	mov [esi], al
 11215 00008C38 81C702000000        <2> 	add edi, 2
 11216 00008C3E 46                  <2> 	inc esi
 11217 00008C3F E2F3                <2> 	loop .lpmac
 11218 00008C41 B9[5C8D0000]        <2> 	mov ecx, .mac
 11219 00008C46 C3                  <2> 	ret
 11220                              <2> .sendpacket:
 11221 00008C47 803D[388D0000]00    <2> 	cmp byte [.nicconfig], 0
 11222 00008C4E 7512                <2> 	jne .sendit
 11223 00008C50 56                  <2> 	push esi
 11224 00008C51 57                  <2> 	push edi
 11225 00008C52 E8DEFDFFFF          <2> 	call .init
 11226 00008C57 5F                  <2> 	pop edi
 11227 00008C58 5E                  <2> 	pop esi
 11228 00008C59 81FB00000000        <2> 	cmp ebx, 0
 11229 00008C5F 7401                <2> 	je .sendit
 11230 00008C61 C3                  <2> 	ret
 11231                              <2> .sendit: ;packet start in edi, end in esi
 11232 00008C62 87F7                <2> 	xchg esi, edi ;this helps with the outsw
 11233                              <2> 	;now the packet start is in esi, end in edi
 11234 00008C64 8B0D[5C8D0000]      <2> 	mov ecx, [.mac]
 11235 00008C6A 894E06              <2> 	mov [esi + 6], ecx
 11236 00008C6D 668B0D[608D0000]    <2> 	mov cx, [.mac + 4]
 11237 00008C74 66894E0A            <2> 	mov [esi + 10], cx	;copy the correct mac
 11238 00008C78 8B15[348D0000]      <2> 	mov edx, [.basenicaddr]
 11239 00008C7E B020                <2> 	mov al, .CR.RD2
 11240 00008C80 0C02                <2> 	or al, .CR.STA
 11241 00008C82 EE                  <2> 	out dx, al ;set RD2 and STA
 11242 00008C83 81C207000000        <2> 	add edx, .ISR ; ISR
 11243 00008C89 B040                <2> 	mov al, .ISR.RDC
 11244 00008C8B EE                  <2> 	out dx, al ;set RDC flag
 11245 00008C8C 8B15[348D0000]      <2> 	mov edx, [.basenicaddr]
 11246 00008C92 6681C20A00          <2> 	add dx, .RBCR0
 11247 00008C97 89F8                <2> 	mov eax, edi
 11248 00008C99 29F0                <2> 	sub eax, esi
 11249 00008C9B BB01000000          <2> 	mov ebx, 1
 11250 00008CA0 21C3                <2> 	and ebx, eax
 11251 00008CA2 81FB01000000        <2> 	cmp ebx, 1
 11252 00008CA8 7501                <2> 	jne .nofixword
 11253 00008CAA 40                  <2> 	inc eax
 11254                              <2> .nofixword:
 11255 00008CAB 89C1                <2> 	mov ecx, eax ;save length in ecx
 11256 00008CAD EE                  <2> 	out dx, al
 11257 00008CAE 86C4                <2> 	xchg al, ah
 11258 00008CB0 6642                <2> 	inc dx
 11259 00008CB2 EE                  <2> 	out dx, al ;send size
 11260 00008CB3 8B15[348D0000]      <2> 	mov edx, [.basenicaddr]
 11261 00008CB9 6681C20800          <2> 	add dx, .RSAR0
 11262 00008CBE 66A1[508D0000]      <2> 	mov ax, [.pagestart]
 11263 00008CC4 C1E008              <2> 	shl eax, 8
 11264 00008CC7 EE                  <2> 	out dx, al
 11265 00008CC8 86C4                <2> 	xchg al, ah
 11266 00008CCA 6642                <2> 	inc dx
 11267 00008CCC EE                  <2> 	out dx, al ;send address in NIC memory
 11268 00008CCD 8B15[348D0000]      <2> 	mov edx, [.basenicaddr]
 11269 00008CD3 B010                <2> 	mov al, .CR.RD1
 11270 00008CD5 0C02                <2> 	or al, .CR.STA
 11271 00008CD7 EE                  <2> 	out dx, al ;set RD and STA
 11272 00008CD8 89CB                <2> 	mov ebx, ecx ;save length in ebx
 11273 00008CDA D1E9                <2> 	shr ecx, 1
 11274 00008CDC 8B15[348D0000]      <2> 	mov edx, [.basenicaddr]
 11275 00008CE2 6681C21000          <2> 	add dx, 0x10
 11276 00008CE7 F3666F              <2> 	rep outsw ;Send the packet data
 11277 00008CEA 8B15[348D0000]      <2> 	mov edx, [.basenicaddr]
 11278 00008CF0 6681C20700          <2> 	add dx, .ISR
 11279                              <2> .chkcopylp:
 11280 00008CF5 B440                <2> 	mov ah, .ISR.RDC
 11281 00008CF7 EC                  <2> 	in al, dx
 11282 00008CF8 20C4                <2> 	and ah, al
 11283 00008CFA 80FC40              <2> 	cmp ah, 0x40
 11284 00008CFD 75F6                <2> 	jne .chkcopylp	
 11285 00008CFF 8B15[348D0000]      <2> 	mov edx, [.basenicaddr]
 11286 00008D05 6681C20400          <2> 	add dx, 4
 11287 00008D0A A0[508D0000]        <2> 	mov al, [.pagestart]
 11288 00008D0F EE                  <2> 	out dx, al ;send start address in pages
 11289 00008D10 8B15[348D0000]      <2> 	mov edx, [.basenicaddr]
 11290 00008D16 81C205000000        <2> 	add edx, 0x5
 11291 00008D1C 89D8                <2> 	mov eax, ebx
 11292 00008D1E EE                  <2> 	out dx, al
 11293 00008D1F 86C4                <2> 	xchg al, ah
 11294 00008D21 6642                <2> 	inc dx
 11295 00008D23 EE                  <2> 	out dx, al ;send length
 11296 00008D24 8B15[348D0000]      <2> 	mov edx, [.basenicaddr]
 11297 00008D2A B020                <2> 	mov al, 0x20
 11298 00008D2C 0C04                <2> 	or al, 4
 11299 00008D2E 0C02                <2> 	or al, 2
 11300 00008D30 EE                  <2> 	out dx, al ;set RD2, TXP, and STA
 11301 00008D31 31DB                <2> 	xor ebx, ebx
 11302 00008D33 C3                  <2> 	ret
 11303 00008D34 00000000            <2> .basenicaddr dd 0
 11304 00008D38 00                  <2> .nicconfig db 0
 11305 00008D39 4E45323030302000    <2> .name db "NE2000 ",0
 11306 00008D41 496E697469616C697A- <2> .initmsg db "Initialized.",10,0
 11307 00008D4A 65642E0A00          <2>
 11308 00008D4F 90                  <2> align 2, nop
 11309 00008D50 0000                <2> .pagestart dw 0
 11310 00008D52 0000                <2> .pageend dw 0
 11311 00008D54 00000000            <2> .ringstart dd 0
 11312 00008D58 00000000            <2> .ringend dd 0
 11313 00008D5C 000000000000        <2> .mac db 0,0,0,0,0,0
 11314 00008D62 00<rept>            <2> .rom times 16 db 0
 11315                              <2> 
 11316                              <2> .end:
 11317                              <1> %endif
 11318                              <1> %ifdef i8254x.included
 11319                              <1> 	%include "source/drivers/network/i8254x.asm"
 11320                              <1> %endif
 11321 00008D72 C3                  <1> 	ret
 11322                              <1> 
 11323                              <1> sendpacket: ;packet start in edi, end in esi
 11324                              <1> 	%ifdef rtl8139.included
 11325                              <1> 		push edi
 11326                              <1> 		push esi
 11327                              <1> 		call rtl8139.sendpacket
 11328                              <1> 		pop esi
 11329                              <1> 		pop edi
 11330                              <1> 	%endif
 11331                              <1> 	%ifdef rtl8169.included
 11332                              <1> 		push edi
 11333                              <1> 		push esi
 11334                              <1> 		call rtl8169.sendpacket
 11335                              <1> 		pop esi
 11336                              <1> 		pop edi
 11337                              <1> 	%endif
 11338                              <1> 	%ifdef ne2000.included
 11339 00008D73 57                  <1> 		push edi
 11340 00008D74 56                  <1> 		push esi
 11341 00008D75 E8CDFEFFFF          <1> 		call ne2000.sendpacket
 11342 00008D7A 5E                  <1> 		pop esi
 11343 00008D7B 5F                  <1> 		pop edi
 11344                              <1> 	%endif
 11345                              <1> 	%ifdef i8254x.included
 11346                              <1> 		call i8254x.sendpacket
 11347                              <1> 	%endif
 11348 00008D7C C3                  <1> 	ret
 11349                              <1> 
 11350                              <1> getchecksum: ;start in edi, end in esi, checksum put in ecx
 11351 00008D7D 31C0                <1> 	xor eax, eax
 11352 00008D7F 31DB                <1> 	xor ebx, ebx
 11353 00008D81 31C9                <1> 	xor ecx, ecx
 11354                              <1> .lp:
 11355 00008D83 8A07                <1> 	mov al, [edi]
 11356 00008D85 8A6701              <1> 	mov ah, [edi + 1]
 11357 00008D88 01C3                <1> 	add ebx, eax
 11358 00008D8A 81C702000000        <1> 	add edi, 2
 11359 00008D90 39F7                <1> 	cmp edi, esi
 11360 00008D92 72EF                <1> 	jb .lp
 11361 00008D94 66B9FFFF            <1> 	mov cx, 0xFFFF
 11362 00008D98 6689D8              <1> 	mov ax, bx
 11363 00008D9B C1EB10              <1> 	shr ebx, 16
 11364 00008D9E 6601D8              <1> 	add ax, bx
 11365 00008DA1 6629C1              <1> 	sub cx, ax
 11366 00008DA4 C3                  <1> 	ret
 11367                              <1> 	
 11368                              <1> strtoip:	;string in esi with format X.X.X.X converted to number in ecx
 11369 00008DA5 31DB                <1> 	xor ebx, ebx
 11370 00008DA7 31C9                <1> 	xor ecx, ecx
 11371 00008DA9 31D2                <1> 	xor edx, edx
 11372                              <1> .mlp:
 11373 00008DAB 89F7                <1> 	mov edi, esi
 11374 00008DAD 4F                  <1> 	dec edi
 11375                              <1> .lp:
 11376 00008DAE 47                  <1> 	inc edi
 11377 00008DAF 8A07                <1> 	mov al, [edi]
 11378 00008DB1 3C20                <1> 	cmp al, " "
 11379 00008DB3 7408                <1> 	je .dnlp
 11380 00008DB5 3C00                <1> 	cmp al, 0
 11381 00008DB7 7404                <1> 	je .dnlp
 11382 00008DB9 3C2E                <1> 	cmp al, "."
 11383 00008DBB 75F1                <1> 	jne .lp
 11384                              <1> .dnlp:
 11385 00008DBD 30C0                <1> 	xor al, al
 11386 00008DBF 8807                <1> 	mov [edi], al
 11387 00008DC1 53                  <1> 	push ebx
 11388 00008DC2 56                  <1> 	push esi
 11389 00008DC3 57                  <1> 	push edi
 11390 00008DC4 31FF                <1> 	xor edi, edi
 11391 00008DC6 E895A5FFFF          <1> 	call cnvrttxt
 11392 00008DCB 5E                  <1> 	pop esi
 11393 00008DCC 5F                  <1> 	pop edi ;i intentionally switch them
 11394 00008DCD 5B                  <1> 	pop ebx
 11395 00008DCE 46                  <1> 	inc esi
 11396 00008DCF BF[E78D0000]        <1> 	mov edi, ipstr
 11397 00008DD4 880C1F              <1> 	mov [edi + ebx], cl
 11398 00008DD7 43                  <1> 	inc ebx
 11399 00008DD8 81FB04000000        <1> 	cmp ebx, 4
 11400 00008DDE 72CB                <1> 	jb .mlp
 11401 00008DE0 8B0D[E78D0000]      <1> 	mov ecx, [ipstr]
 11402 00008DE6 C3                  <1> 	ret
 11403 00008DE7 00000000            <1> ipstr dd 0
 11404                              <1> showip: 	;put the ip address in ecx
 11405 00008DEB 89C8                <1> 	mov eax, ecx
 11406 00008DED 30DB                <1> 	xor bl, bl
 11407                              <1> .lp:
 11408 00008DEF 31C9                <1> 	xor ecx, ecx
 11409 00008DF1 88C1                <1> 	mov cl, al
 11410 00008DF3 E88DA4FFFF          <1> 	call showdec
 11411 00008DF8 C1E808              <1> 	shr eax, 8
 11412 00008DFB FEC3                <1> 	inc bl
 11413 00008DFD 80FB04              <1> 	cmp bl, 4
 11414 00008E00 7312                <1> 	jae .done
 11415 00008E02 50                  <1> 	push eax
 11416 00008E03 6653                <1> 	push bx
 11417 00008E05 BE[158E0000]        <1> 	mov esi, .dot
 11418 00008E0A E84D8FFFFF          <1> 	call print
 11419 00008E0F 665B                <1> 	pop bx
 11420 00008E11 58                  <1> 	pop eax
 11421 00008E12 EBDB                <1> 	jmp .lp
 11422                              <1> .done:
 11423 00008E14 C3                  <1> 	ret
 11424 00008E15 082E00              <1> .dot db 8,".",0
 11425                              <1> showmac:	;mac begins in [ecx]
 11426 00008E18 BE[688E0000]        <1> 	mov esi, macprint
 11427 00008E1D 89CF                <1> 	mov edi, ecx
 11428 00008E1F 81C106000000        <1> 	add ecx, 6
 11429                              <1> showmacloop:
 11430 00008E25 8A07                <1> 	mov al, [edi]
 11431 00008E27 8A27                <1> 	mov ah, [edi]
 11432 00008E29 C0E804              <1> 	shr al, 4
 11433 00008E2C C0E404              <1> 	shl ah, 4
 11434 00008E2F C0EC04              <1> 	shr ah, 4
 11435 00008E32 0430                <1> 	add al, 48
 11436 00008E34 3C39                <1> 	cmp al, "9"
 11437 00008E36 7606                <1> 	jbe .goodal
 11438 00008E38 2C30                <1> 	sub al, 48
 11439 00008E3A 2C0A                <1> 	sub al, 0xA
 11440 00008E3C 0441                <1> 	add al, "A"
 11441                              <1> .goodal:
 11442 00008E3E 80C430              <1> 	add ah, 48
 11443 00008E41 80FC39              <1> 	cmp ah, "9"
 11444 00008E44 7609                <1> 	jbe .goodah
 11445 00008E46 80EC30              <1> 	sub ah, 48
 11446 00008E49 80EC0A              <1> 	sub ah, 0xA
 11447 00008E4C 80C441              <1> 	add ah, "A"
 11448                              <1> .goodah:
 11449 00008E4F 668906              <1> 	mov [esi], ax
 11450 00008E52 81C603000000        <1> 	add esi, 3
 11451 00008E58 47                  <1> 	inc edi
 11452 00008E59 39CF                <1> 	cmp edi, ecx
 11453 00008E5B 72C8                <1> 	jb showmacloop
 11454 00008E5D BE[688E0000]        <1> 	mov esi, macprint
 11455 00008E62 E8F58EFFFF          <1> 	call print
 11456 00008E67 C3                  <1> 	ret
 11457                              <1> 	
 11458 00008E68 30303A30303A30303A- <1> macprint db "00:00:00:00:00:00 ",0
 11459 00008E71 30303A30303A303020- <1>
 11460 00008E7A 00                  <1>
 11461 00008E7B 00000000            <1> ethernetend dw 0,0
 11462 00008E7F C0A80002            <1> sysip db 192,168,0,2
 11463 00008E83 000000000000        <1> sysmac	db 0,0,0,0,0,0		;my mac address
 11464                                  %endif
 11465                                      %include "source/data.asm"
 11466 00008E89 626F6F742E736800    <1> 	bootfilename db	"boot.sh",0
 11467 00008E91 73687573683A2000    <1> 	notfound1 db	"shush: ",0
 11468 00008E99 3A206E6F7420666F75- <1> 	notfound2 db	": not found",10,0
 11469 00008EA2 6E640A00            <1>
 11470 00008EA6 757365726E616D653A- <1> 	userask db	"username:",0
 11471 00008EAF 00                  <1>
 11472 00008EB0 70617373776F72643A- <1> 	pwdask	db	"password:",0
 11473 00008EB9 00                  <1>
 11474 00008EBA 40                  <1> 	computer db	"@"
 11475                              <1> %ifdef io.serial
 11476                              <1> 	computername db	"SollerOS.",io.serial," ",0
 11477                              <1> %else
 11478 00008EBB 536F6C6C65724F5320- <1> 	computername db	"SollerOS ",0
 11479 00008EC4 00                  <1>
 11480                              <1> %endif
 11481 00008EC5 5D242000            <1> 	endprompt db "]$ ",0
 11482 00008EC9 0D                  <1> 	crlf 	db	13
 11483 00008ECA 0A00                <1> 	line	db	10,0
 11484                              <1> 	userlst:
 11485 00008ECC 726F6F7400          <1> 			db "root",0
 11486 00008ED1 617765736F6D65706F- <1> 			db "awesomepower",0
 11487 00008EDA 77657200            <1>
 11488 00008EDE 7573657200          <1> 			db "user",0
 11489 00008EE3 70617373776F726400  <1> 			db "password",0
 11490 00008EEC 6E00                <1> 			db "n",0	;abuse for quick entry-a quick double n followed by a double enter will get you in
 11491 00008EEE 00                  <1> 			db 0
 11492                              <1> 	userlstend:
 11493                              <1> 	
 11494 00008EEF 00                  <1> 	guion db 0
 11495 00008EF0 00                  <1> 	DriveNumber db 0
 11496 00008EF1 00000000            <1> 	lbaad dd 0
 11497 00008EF5 0000000000000000    <1> 	initialtsc dd 0,0
 11498 00008EFD 0000000000000000    <1> 	lasttsc dd 0,0
 11499 00008F05 00<rept>            <1> 	memlistbuf times 576 db 0
 11500 00009145 00000000            <1> 	memlistend: dd 0
 11501                              <1> %ifdef io.serial
 11502                              <1> %else
 11503                              <1> fonts:
 11504                              <1> %ifdef font.unicode
 11505 00009145 <incbin>            <1> 	incbin "source/fonts/fonts-unicode.pak"
 11506                              <1> %else
 11507                              <1> 	incbin "source/fonts/fonts-ascii.pak"
 11508                              <1> %endif
 11509                              <1> fontend:
 11510                              <1> %endif
 11511                              <1> osend:	;this is the end of the operating system's space on disk
 11512                                  %ifdef disk.none
 11513                                  	diskfileindex:
 11514                                  	enddiskfileindex:
 11515                                      %include "source/bss.asm"
 11516                                  %else
 11517                                      %include "build/fileindex.asm"
 11518                              <1> diskfileindex:
 11519 00039149 626F6F742E736800    <1> db "boot.sh",0
 11520 00039151 CA010000            <1> dd (f0-$$)/512
 11521 00039155 01000000            <1> dd (f1-f0)/512
 11522 00039159 646F73746573742E63- <1> db "dostest.com",0
 11523 00039162 6F6D00              <1>
 11524 00039165 CB010000            <1> dd (f1-$$)/512
 11525 00039169 01000000            <1> dd (f2-f1)/512
 11526 0003916D 6578656300          <1> db "exec",0
 11527 00039172 CC010000            <1> dd (f2-$$)/512
 11528 00039176 01000000            <1> dd (f3-f2)/512
 11529 0003917A 66696E616C636F756E- <1> db "finalcount.sn",0
 11530 00039183 742E736E00          <1>
 11531 00039188 CD010000            <1> dd (f3-$$)/512
 11532 0003918C 01000000            <1> dd (f4-f3)/512
 11533 00039190 666F726B00          <1> db "fork",0
 11534 00039195 CE010000            <1> dd (f4-$$)/512
 11535 00039199 01000000            <1> dd (f5-f4)/512
 11536 0003919D 6775697465737400    <1> db "guitest",0
 11537 000391A5 CF010000            <1> dd (f5-$$)/512
 11538 000391A9 03000000            <1> dd (f6-f5)/512
 11539 000391AD 696E7400            <1> db "int",0
 11540 000391B1 D2010000            <1> dd (f6-$$)/512
 11541 000391B5 01000000            <1> dd (f7-f6)/512
 11542 000391B9 6C6F7374776F6F6473- <1> db "lostwoods.sn",0
 11543 000391C2 2E736E00            <1>
 11544 000391C6 D3010000            <1> dd (f7-$$)/512
 11545 000391CA 01000000            <1> dd (f8-f7)/512
 11546 000391CE 6D6172696F2E736E00  <1> db "mario.sn",0
 11547 000391D7 D4010000            <1> dd (f8-$$)/512
 11548 000391DB 01000000            <1> dd (f9-f8)/512
 11549 000391DF 736F6E676F74696D65- <1> db "songotime.sn",0
 11550 000391E8 2E736E00            <1>
 11551 000391EC D5010000            <1> dd (f9-$$)/512
 11552 000391F0 01000000            <1> dd (f10-f9)/512
 11553 000391F4 73736500            <1> db "sse",0
 11554 000391F8 D6010000            <1> dd (f10-$$)/512
 11555 000391FC 02000000            <1> dd (f11-f10)/512
 11556 00039200 74656C7900          <1> db "tely",0
 11557 00039205 D8010000            <1> dd (f11-$$)/512
 11558 00039209 01000000            <1> dd (f12-f11)/512
 11559 0003920D 756E667300          <1> db "unfs",0
 11560 00039212 D9010000            <1> dd (f12-$$)/512
 11561 00039216 02000000            <1> dd (f13-f12)/512
 11562 0003921A 5F696D672E62696E00  <1> db "_img.bin",0
 11563 00039223 DB010000            <1> dd (f13-$$)/512
 11564 00039227 0C000000            <1> dd (f14-f13)/512
 11565                              <1> enddiskfileindex:
 11566                              <1> 
 11567                                      %include "source/bss.asm"
 11568 0003922B 00<rept>            <1> align 512, db 0
 11569                              <1> bssstart equ $
 11570                              <1> bsscopy equ $
 11571                              <1> initialstack equ bsscopy
 11572                              <1> stackend equ initialstack + 8192
 11573                              <1> sigtable equ stackend + 4
 11574                              <1> fileindex equ sigtable + 4
 11575                              <1> fileindexend equ fileindex + 1024
 11576                              <1> previousstack equ fileindexend
 11577                              <1> lastfolderloc equ previousstack + 4
 11578                              <1> currentfolderloc equ lastfolderloc + 4
 11579                              <1> currentfolder equ currentfolderloc + 4
 11580                              <1> currentfolderend equ currentfolder + 512
 11581                              <1> uid equ currentfolderend
 11582                              <1> ranboot equ uid + 4
 11583                              <1> IFON equ ranboot + 1
 11584                              <1> IFTRUE equ IFON + 1
 11585                              <1> BATCHPOS equ IFTRUE + 100
 11586                              <1> BATCHISON equ BATCHPOS + 4
 11587                              <1> LOOPON equ BATCHISON + 1
 11588                              <1> LOOPPOS	equ LOOPON + 1
 11589                              <1> variables equ LOOPPOS + 4
 11590                              <1> varend equ variables + 4096
 11591                              <1> buftxt2 equ varend
 11592                              <1> buftxt equ buftxt2 + 1024
 11593                              <1> buftxtend equ buftxt + 1024
 11594                              <1> buf2 equ buftxtend
 11595                              <1> numbuf equ buf2 + 20
 11596                              <1> %ifdef io.serial
 11597                              <1> 	lastcommandpos equ numbuf + 1
 11598                              <1> %else
 11599                              <1> 	%ifdef gui.included
 11600                              <1> 		graphicstable equ numbuf + 1 ;w type, dw datalocation, w locationx, w locationy, w selected, dw code
 11601                              <1> 		graphicstableend equ graphicstable + 200h
 11602                              <1> 		%ifdef gui.background
 11603                              <1> 			backgroundbuffer equ graphicstableend
 11604                              <1> 			backgroundbufferend equ backgroundbuffer + 1280*1026*2
 11605                              <1> 			mousecolorbuf equ backgroundbufferend
 11606                              <1> 		%else
 11607                              <1> 			mousecolorbuf equ graphicstableend ;where the gui under the mouse is stored
 11608                              <1> 		%endif
 11609                              <1> 		mcolorend equ mousecolorbuf + 256
 11610                              <1> 		videobuf equ mcolorend + 1	;1680x1050 pixels in characters
 11611                              <1> 		videobufend	equ videobuf + 210*65*4;2
 11612                              <1> 		videobuf2 equ videobufend
 11613                              <1> 		videobuf2end equ videobuf2 + 210*65*4;2
 11614                              <1> 	%else
 11615                              <1> 		videobuf equ numbuf + 1
 11616                              <1> 		videobufend equ videobuf + 80*30*4
 11617                              <1> 		videobuf2 equ videobufend
 11618                              <1> 		videobuf2end equ videobuf2 + 80*30*4
 11619                              <1> 	%endif
 11620                              <1> 	lastcommandpos: equ videobuf2end
 11621                              <1> %endif
 11622                              <1> 	commandbufpos: equ lastcommandpos + 4
 11623                              <1> 	commandlistentries: equ commandbufpos + 4
 11624                              <1> 	commandsentered: equ commandlistentries + 4
 11625                              <1> 	commandbuf: equ commandsentered + 4
 11626                              <1> 	commandbufend: equ commandbuf + 4096 ;this is where kernel space only ends, the rest is for threading
 11627                              <1> %ifdef network.included
 11628                              <1> 	rbuffstart: equ commandbufend ;for use with networking
 11629                              <1> 	rbuffend equ rbuffstart + 8212
 11630                              <1> %else
 11631                              <1> 	rbuffstart equ commandbufend
 11632                              <1> 	rbuffend equ commandbufend
 11633                              <1> %endif
 11634                              <1> %ifdef threads.included
 11635                              <1> 	threadlist: equ rbuffend ;this buffer will hold the stack locations of all of the threads, up to 2048
 11636                              <1> 	threadlistend: equ threadlist + 1024*4
 11637                              <1> 	stacks:	equ threadlistend ;NOT TRUE:i use SS now for proper stack management. This makes sure stacks never screw with other memory
 11638                              <1> 	stack1: equ stacks + 2048  ;woah, thats a lot of space for stacks
 11639                              <1> 	bssend equ stack1 + 1024*2048
 11640                              <1> %else
 11641                              <1> 	bssend equ rbuffend
 11642                              <1> %endif
 11643                              <1> dosprogloc equ 0x400000 ;from here on, it is not kernel space so apps can be loaded here.
 11644                                      %include "build/files.asm"
 11645                              <1> align 512,db 0
 11646                              <1> f0:
 11647 0003922B <incbin>            <1> incbin "included/boot.sh"
 11648 00039518 00<rept>            <1> align 512,db 0
 11649                              <1> f1:
 11650 00039518 <incbin>            <1> incbin "included/dostest.com"
 11651 00039731 00<rept>            <1> align 512,db 0
 11652                              <1> f2:
 11653 00039731 <incbin>            <1> incbin "included/exec"
 11654 000398E1 00<rept>            <1> align 512,db 0
 11655                              <1> f3:
 11656 000398E1 <incbin>            <1> incbin "included/finalcount.sn"
 11657 00039B02 00<rept>            <1> align 512,db 0
 11658                              <1> f4:
 11659 00039B02 <incbin>            <1> incbin "included/fork"
 11660 00039D58 00<rept>            <1> align 512,db 0
 11661                              <1> f5:
 11662 00039D58 <incbin>            <1> incbin "included/guitest"
 11663 0003A23A 00<rept>            <1> align 512,db 0
 11664                              <1> f6:
 11665 0003A23A <incbin>            <1> incbin "included/int"
 11666 0003A5AF 00<rept>            <1> align 512,db 0
 11667                              <1> f7:
 11668 0003A5AF <incbin>            <1> incbin "included/lostwoods.sn"
 11669 0003A6AE 00<rept>            <1> align 512,db 0
 11670                              <1> f8:
 11671 0003A6AE <incbin>            <1> incbin "included/mario.sn"
 11672 0003A83A 00<rept>            <1> align 512,db 0
 11673                              <1> f9:
 11674 0003A83A <incbin>            <1> incbin "included/songotime.sn"
 11675 0003AA4A 00<rept>            <1> align 512,db 0
 11676                              <1> f10:
 11677 0003AA4A <incbin>            <1> incbin "included/sse"
 11678 0003AE9A 00<rept>            <1> align 512,db 0
 11679                              <1> f11:
 11680 0003AE9A <incbin>            <1> incbin "included/tely"
 11681 0003B1BA 00<rept>            <1> align 512,db 0
 11682                              <1> f12:
 11683 0003B1BA <incbin>            <1> incbin "included/unfs"
 11684                              <1> align 512,db 0
 11685                              <1> f13:
 11686 0003B1BA <incbin>            <1> incbin "included/_img.bin"
 11687                              <1> align 512,db 0
 11688                              <1> f14:
 11689                                  %endif
