     1                                  [map symbols build/kernel.map]
     2                                  %include "config.asm"
     3                              <1> ;These flags are used to configure options as on, put a simicolon in front of it to not configure it
     4                              <1> 
     5                              <1> %define gui.included
     6                              <1> ;Turn on the gui
     7                              <1> 
     8                              <1> %define gui.alphablending
     9                              <1> ;Make the terminal in the GUI 25% transparent
    10                              <1> 
    11                              <1> %define gui.background
    12                              <1> ;Make the GUI have a loadable background
    13                              <1> 
    14                              <1> ;%define io.serial "1"
    15                              <1> ;Use the specified serial port for input and output instead of the keyboard and screen
    16                              <1> ;If the gui is included this should not be enabled
    17                              <1> 
    18                              <1> %define terminal.vsync
    19                              <1> ;Uses the RTC to automatically update the terminal at ~64Hz
    20                              <1> 
    21                              <1> %define hardware.automatic
    22                              <1> ;Automatically load the sound and network drivers.
    23                              <1> 
    24                              <1> %define threads.included
    25                              <1> ;Include the thread testing stuff-this uses a relatively large amount of memory
    26                              <1> 
    27                              <1> %define exceptions.included
    28                              <1> ;Display debugging information should crashes occur-also uses quite a bit of memory
    29                              <1> 
    30                              <1> ;%define disk.protected
    31                              <1> ;Use protected mode instead of real mode for disk access-this allows for multitasking
    32                              <1> 
    33                              <1> %define disk.real
    34                              <1> ;Use real mode for disk access-this gives greater compatibility
    35                              <1> 
    36                              <1> %define sound.included
    37                              <1> ;This includes the sound drivers
    38                              <1> 
    39                              <1> %define network.included
    40                              <1> ;This includes the network stack
    41                              <1> ;%define rtl8169.included
    42                              <1> ;This includes the RTL8169 drivers
    43                              <1> 
    44                              <1> %define rtl8139.included
    45                              <1> ;This includes the RTL8139 drivers
    46                              <1> 
    47                              <1> %define ne2000.included
    48                              <1> ;This includes the ne2000 drivers
    49                              <1> 
    50                              <1> ;%define sector.debug
    51                              <1> ;Dump the contents of the first sector of SollerOS
    52                              <1> 
    53                              <1> ;%define system.simple 
    54                              <1> ;The smallest possible system, overrides all options
    55                              <1> 
    56                              <1> ;FIX DEPENDANCIES
    57                              <1> %ifdef gui.included
    58                              <1> 	%undef io.serial
    59                              <1> %else
    60                              <1> 	%undef gui.alphablending
    61                              <1> 	%undef gui.background
    62                              <1> %endif
    63                              <1> %ifdef disk.protected
    64                              <1> 	%undef disk.real
    65                              <1> %endif
    66                              <1> %ifdef network.included
    67                              <1> %else
    68                              <1> 	%undef ne2000.included
    69                              <1> 	%undef rtl8139.included
    70                              <1> 	%undef rtl8169.included
    71                              <1> %endif
    72                              <1> %ifdef system.simple
    73                              <1> 	%define io.serial "1"
    74                              <1> 	%define disk.real
    75                              <1> 	%undef gui.included
    76                              <1> 	%undef gui.alphablending
    77                              <1> 	%undef gui.background
    78                              <1> 	%undef terminal.vsync
    79                              <1> 	%undef hardware.automatic
    80                              <1> 	%undef threads.included
    81                              <1> 	%undef exceptions.included
    82                              <1> 	%undef disk.protected
    83                              <1> 	%undef sound.included
    84                              <1> 	%undef network.included
    85                              <1> 	%undef rtl8139.included
    86                              <1> 	%undef rtl8169.included
    87                              <1> 	%undef ne2000.included
    88                              <1> 	%undef sector.debug
    89                              <1> %endif
    90                                  [BITS 16]
    91                                      %include "source/boot.asm"
    92                              <1>     ; MENU.ASM
    93                              <1> %include 'source/signature.asm'
    94                              <2> signature:
    95 00000000 536F6C6C65724F53    <2> db "SollerOS" ;Operating system name
    96 00000008 20416C706861204275- <2> db " Alpha Build ",0	;Soller OS development level
    97 00000011 696C642000          <2>
    98 00000016 E2000000            <2> dd 226	;version number
    99                              <2> signatureend:
   100                              <1> menustart:	
   101 0000001A 8CC8                <1> 	mov ax, cs
   102 0000001C 8ED8                <1> 	mov ds, ax
   103 0000001E 8EC0                <1> 	mov es, ax
   104 00000020 8ED0                <1> 	mov ss, ax
   105 00000022 880E[B998]          <1> 	mov [DriveNumber], cl
   106 00000026 668916[BA98]        <1> 	mov [lbaad], edx
   107                              <1> %ifdef io.serial
   108                              <1> 	call getmemorysize
   109                              <1> 	mov si, serialmsg
   110                              <1> 	call printrm
   111                              <1> 	jmp pmode
   112                              <1> serialmsg: db "SollerOS: Using serial port ",io.serial," for I/O.",0
   113                              <1> %else
   114 0000002B E80300              <1> 	call vgaset	;make users switch using a command-this leads to very fast boots
   115 0000002E E95800              <1> 	jmp pmode
   116                              <1> %endif
   117                              <1> 	
   118                              <1> vgaset:
   119 00000031 B81200              <1> 	mov ax, 12h
   120 00000034 31DB                <1> 	xor bx, bx
   121 00000036 CD10                <1> 	int 10h
   122 00000038 C606[B898]00        <1> 	mov byte [guion], 0
   123 0000003D E80100              <1> 	call getmemorysize;get the memory map after the video is initialized
   124 00000040 C3                  <1> 	ret
   125                              <1> 
   126                              <1> getmemorysize:
   127 00000041 BF[BE98]            <1> 	mov di, memlistbuf
   128 00000044 6631DB              <1> 	xor ebx, ebx
   129                              <1> getmemsizeloop:
   130 00000047 66B820E80000        <1> 	mov eax, 0xE820
   131 0000004D 66BA50414D53        <1> 	mov edx, 0x0534D4150
   132 00000053 66B918000000        <1> 	mov ecx, 24
   133 00000059 CD15                <1> 	int 0x15
   134 0000005B 81C71800            <1> 	add di, 24
   135 0000005F 81FF[FE9A]          <1> 	cmp di, memlistend
   136 00000063 7309                <1> 	jae nomoregetmemsize
   137 00000065 6681FB00000000      <1> 	cmp ebx, 0
   138 0000006C 75D9                <1> 	jne getmemsizeloop
   139                              <1> nomoregetmemsize:
   140 0000006E 81EF[BE98]          <1> 	sub di, memlistbuf
   141 00000072 893E[FE9A]          <1> 	mov [memlistend], di
   142 00000076 C3                  <1> 	ret
   143                              <1> 	
   144                              <1> printrm:			; 'si' comes in with string address
   145 00000077 BB0700              <1>     mov bx,07		; write to display
   146 0000007A B40E                <1>     mov ah,0Eh		; screen function
   147 0000007C 8A04                <1>    .lp:    mov al,[si]         ; get next character
   148 0000007E 3C00                <1>     cmp al,0		; look for terminator 
   149 00000080 7406                <1>     je .done		; zero byte at end of string
   150 00000082 CD10                <1>     int 10h		; write character to screen.    
   151 00000084 46                  <1> 	inc si	     	; move to next character
   152 00000085 E9F4FF              <1>     jmp .lp		; loop
   153 00000088 C3                  <1> .done: ret
   154                                      %include "source/pmode.asm"
   155                              <1> [BITS 16]
   156                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   157                              <1> ;	16-bit real mode
   158                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   159                              <1> 
   160                              <1> pmode:
   161 00000089 6631C0              <1> 	xor eax, eax
   162 0000008C 6631DB              <1> 	xor ebx, ebx
   163 0000008F 6631C9              <1> 	xor ecx, ecx
   164 00000092 6631D2              <1> 	xor edx, edx
   165 00000095 6631F6              <1> 	xor esi, esi
   166 00000098 6631FF              <1> 	xor edi, edi
   167 0000009B BA9200              <1> 	mov dx, 0x92
   168 0000009E EC                  <1> 	in al, dx	;;A20
   169 0000009F 0C02                <1> 	or al, 2
   170 000000A1 EE                  <1> 	out dx, al
   171 000000A2 8CCB                <1> 	mov bx,cs		; EBX=segment
   172 000000A4 66C1E304            <1> 	shl ebx,4		;	<< 4
   173 000000A8 67668D03            <1> 	lea eax,[ebx]		; EAX=linear address of segment base
   174 000000AC A3[B103]            <1> 	mov [gdt2 + 2],ax
   175 000000AF A3[B903]            <1> 	mov [gdt3 + 2],ax
   176 000000B2 66C1E810            <1> 	shr eax,16
   177 000000B6 A2[B303]            <1> 	mov [gdt2 + 4],al
   178 000000B9 A2[BB03]            <1> 	mov [gdt3 + 4],al
   179 000000BC 8826[B603]          <1> 	mov [gdt2 + 7],ah
   180 000000C0 8826[BE03]          <1> 	mov [gdt3 + 7],ah
   181                              <1> 
   182 000000C4 66B8[FE9A0000]      <1> 	mov eax, initialstack
   183 000000CA 660306[4602]        <1> 	add eax, [newcodecache]
   184 000000CF A3[A903]            <1> 	mov [gdts + 2],ax
   185 000000D2 66C1E810            <1> 	shr eax, 16
   186 000000D6 A2[AB03]            <1> 	mov [gdts + 4],al
   187 000000D9 8826[AE03]          <1> 	mov [gdts + 7], ah
   188                              <1> 	
   189 000000DD 66A1[4602]          <1> 	mov eax, [newcodecache]
   190 000000E1 A3[C103]            <1> 	mov [gdt4 + 2],ax
   191 000000E4 A3[C903]            <1> 	mov [gdt5 + 2],ax
   192 000000E7 A3[D103]            <1> 	mov [gdtv8086 + 2], ax
   193 000000EA A3[D903]            <1> 	mov [gdtv80862 + 2], ax
   194 000000ED 66C1E810            <1> 	shr eax,16
   195 000000F1 A2[C303]            <1> 	mov [gdt4 + 4],al
   196 000000F4 A2[CB03]            <1> 	mov [gdt5 + 4],al
   197 000000F7 A2[D303]            <1> 	mov [gdtv8086 + 4],al
   198 000000FA A2[DB03]            <1> 	mov [gdtv80862 + 4],al
   199 000000FD 8826[C603]          <1> 	mov [gdt4 + 7],ah
   200 00000101 8826[CE03]          <1> 	mov [gdt5 + 7],ah
   201 00000105 8826[D603]          <1> 	mov [gdtv8086 + 7],ah
   202 00000109 8826[DE03]          <1> 	mov [gdtv80862 + 7],ah
   203                              <1> 	
   204 0000010D 66B800004000        <1> 	mov eax, dosprogloc
   205 00000113 660306[4602]        <1> 	add eax, [newcodecache]
   206 00000118 A3[E103]            <1> 	mov [gdtdos + 2],ax
   207 0000011B A3[E903]            <1> 	mov [gdtdos2 + 2],ax
   208 0000011E 66C1E810            <1> 	shr eax,16
   209 00000122 A2[E303]            <1> 	mov [gdtdos + 4],al
   210 00000125 A2[EB03]            <1> 	mov [gdtdos2 + 4],al
   211 00000128 8826[E603]          <1> 	mov [gdtdos + 7],ah
   212 0000012C 8826[EE03]          <1> 	mov [gdtdos2 + 7],ah
   213                              <1> 	
   214                              <1> ; fix up gdt and idt
   215 00000130 67668D83[97030000]  <1> 	lea eax,[ebx + gdt]	; EAX=linear address of gdt
   216 00000138 66A3[8D03]          <1> 	mov [gdtr + 2],eax
   217 0000013C 67668D83[EF030000]  <1> 	lea eax,[ebx + idt]	; EAX=linear address of idt
   218 00000144 66A3[9303]          <1> 	mov [idtr + 2],eax
   219 00000148 FA                  <1> 	cli
   220 00000149 0F0116[8B03]        <1> 	lgdt [gdtr]
   221 0000014E 0F011E[9103]        <1> 	lidt [idtr]
   222 00000153 6631DB              <1> 	xor ebx, ebx
   223 00000156 8CDB                <1> 	mov bx, ds
   224 00000158 66891E[4202]        <1> 	mov [basecache], ebx
   225 0000015D 0F20C0              <1> 	mov eax,cr0
   226 00000160 0C01                <1> 	or al,1
   227 00000162 0F22C0              <1> 	mov cr0,eax
   228 00000165 EA[6A01]1800        <1> 	jmp SYS_CODE_SEL:do_pm
   229                              <1> [BITS 32]
   230                              <1> do_pm:
   231 0000016A 31C0                <1> 	xor eax, eax
   232 0000016C 66B82000            <1> 	mov ax, SYS_DATA_SEL
   233 00000170 8ED8                <1> 	mov ds, ax
   234 00000172 8EC0                <1> 	mov es, ax
   235 00000174 8EE0                <1> 	mov fs, ax
   236 00000176 66B83000            <1> 	mov ax, NEW_DATA_SEL
   237 0000017A 8EE8                <1> 	mov gs, ax
   238                              <1> 	
   239                              <1> copykernel:
   240 0000017C 648B06              <1> 	mov eax, [fs:esi]
   241 0000017F 658906              <1> 	mov [gs:esi], eax
   242 00000182 81C604000000        <1> 	add esi, 4
   243 00000188 81FE[FE9A0000]      <1> 	cmp esi, bsscopy
   244 0000018E 72EC                <1> 	jb copykernel
   245 00000190 EA[97010000]2800    <1> 	jmp NEW_CODE_SEL:done_copy
   246                              <1> 	
   247                              <1> done_copy:
   248 00000197 66B83000            <1> 	mov ax, NEW_DATA_SEL	;;these MUST be setup AFTER the kernel switches places!!!
   249 0000019B 8ED8                <1> 	mov ds, ax
   250 0000019D 8EC0                <1> 	mov es, ax
   251 0000019F 8EE0                <1> 	mov fs, ax
   252                              <1> 	;mov ax, STACK_SEL
   253 000001A1 8ED0                <1> 	mov ss, ax
   254 000001A3 BC[9EAA0000]        <1> 	mov esp, stackend
   255 000001A8 66B82000            <1> 	mov ax, SYS_DATA_SEL
   256 000001AC 8EE8                <1> 	mov gs, ax
   257                              <1> 	
   258 000001AE E8A95D0000          <1> 	call initialize	;initialize drivers
   259                              <1> 	
   260 000001B3 A1[46020000]        <1> 	mov eax, [newcodecache]
   261 000001B8 C1E804              <1> 	shr eax, 4
   262 000001BB A3[42020000]        <1> 	mov [basecache], eax
   263                              <1> 	
   264 000001C0 BE[00FA3900]        <1> 	mov esi, bssend
   265 000001C5 31C0                <1> 	xor eax, eax
   266                              <1> clearkernelbuffers:
   267 000001C7 8906                <1> 	mov [esi], eax
   268 000001C9 81EE04000000        <1> 	sub esi, 4
   269 000001CF 81FE[FE9A0000]      <1> 	cmp esi, bsscopy
   270 000001D5 77F0                <1> 	ja clearkernelbuffers
   271 000001D7 FB                  <1> 	sti
   272                              <1> 
   273                              <1> getmemoryspace:
   274 000001D8 BE[BE980000]        <1> 	mov esi, memlistbuf
   275 000001DD 31FF                <1> 	xor edi, edi
   276 000001DF 668B3D[FE9A0000]    <1> 	mov di, [memlistend]
   277 000001E6 01F7                <1> 	add edi, esi
   278 000001E8 31C0                <1> 	xor eax, eax
   279                              <1> memoryspaceaddition:
   280 000001EA 39FE                <1> 	cmp esi, edi
   281 000001EC 7325                <1> 	jae finishedmemspacecalc
   282 000001EE 81C608000000        <1> 	add esi, 8
   283 000001F4 8B0E                <1> 	mov ecx, [esi]
   284 000001F6 81C608000000        <1> 	add esi, 8
   285 000001FC 8B1E                <1> 	mov ebx, [esi]
   286 000001FE 81C608000000        <1> 	add esi, 8
   287 00000204 81FB01000000        <1> 	cmp ebx, 1
   288 0000020A 75DE                <1> 	jne memoryspaceaddition
   289 0000020C 01C8                <1> 	add eax, ecx
   290 0000020E E9D7FFFFFF          <1> 	jmp memoryspaceaddition
   291                              <1> finishedmemspacecalc:
   292 00000213 A3[57020000]        <1> 	mov [memoryspace], eax
   293                              <1> %ifdef gui.included
   294 00000218 803D[B8980000]00    <1> 	cmp byte [guion], 0
   295 0000021F 741C                <1> 	je normalstartup
   296 00000221 8B1D[42020000]      <1> 	mov ebx, [basecache]
   297 00000227 C1E304              <1> 	shl ebx, 4
   298 0000022A 8B3D[4B550000]      <1> 	mov edi, [physbaseptr]
   299 00000230 29DF                <1> 	sub edi, ebx
   300 00000232 893D[4B550000]      <1> 	mov [physbaseptr], edi
   301 00000238 E996620000          <1> 	jmp guiboot
   302                              <1> %endif
   303                              <1> normalstartup:
   304 0000023D E9EA250000          <1> 	jmp os
   305                              <1> 	
   306 00000242 00000000            <1> basecache dd 0
   307 00000246 00001000            <1> newcodecache dd 0x100000
   308                              <1> 
   309 0000024A 00                  <1> testingcpuspeed db 0
   310 0000024B 00000000            <1> cpuspeedperint dd 0
   311 0000024F 0000000000000000    <1> cpuclocksperint dd 0,0
   312 00000257 00000000            <1> memoryspace dd 0
   313 0000025B 7D0A                <1> pitdiv dw 2685
   314 0000025D 2E562200            <1> timeinterval dd 2250286
   315 00000261 00000000            <1> timeseconds dd 0
   316 00000265 00000000            <1> timenanoseconds dd 0
   317 00000269 00                  <1> soundon db 0
   318 0000026A 0000                <1> soundrepititions dw 0
   319 0000026C 00000000            <1> soundpos dd 0
   320 00000270 00000000            <1> soundendpos dd 0
   321                              <1> 
   322                              <1> cpuspeedend:
   323 00000274 C605[4A020000]00    <1> 	mov byte [testingcpuspeed], 0
   324 0000027B A3[4B020000]        <1> 	mov [cpuspeedperint], eax
   325 00000280 B8[1D4C0000]        <1> 	mov eax, cpuspeedloopend
   326 00000285 890424              <1> 	mov [esp], eax
   327 00000288 E9EE000000          <1> 	jmp handled
   328                              <1> 
   329                              <1> ;if using the rtc, the default frequency yeilds a period of 976562.5ns
   330                              <1> ;if using the pit, div=451 is 377981.0004, div=5370 is 4500572.00007ns
   331                              <1> ;div=55483 is 46500044.000006ns, div=2685 is 2250286.00004ns, div=902 is 755962.0008
   332                              <1> 
   333                              <1> pitinterrupt: ;this controls threading
   334 0000028D FA                  <1> 	cli
   335 0000028E 803D[4A020000]01    <1> 	cmp byte [testingcpuspeed], 1	;check to see if the cpu speed test is running
   336 00000295 74DD                <1> 	je cpuspeedend
   337                              <1> 		
   338 00000297 E8B8000000          <1> 	call timekeeper ;this updates the internal time
   339                              <1> 	
   340 0000029C 803D[69020000]01    <1> 	cmp byte [soundon], 1
   341 000002A3 0F8483560000        <1> 	je near PCSpeakerRAW
   342                              <1> timerinterrupt:	;put this into the interrupt handler that controls threading
   343                              <1> %ifdef threads.included
   344 000002A9 803D[CE640000]01    <1> 	cmp byte [threadson], 1
   345 000002B0 0F84B8610000        <1> 	je near threadswitch
   346                              <1> %endif
   347                              <1> keyinterrupt:		;checks for escape, if pressed, it quits the program currently running
   348 000002B6 803D[CE640000]00    <1> 	cmp byte [threadson], 0
   349 000002BD 0F84B8000000        <1> 	je near handled
   350                              <1> %ifdef io.serial
   351                              <1> 	jmp handled
   352                              <1> %else
   353 000002C3 60                  <1> 	pusha
   354 000002C4 E464                <1> 	in al, 64h
   355 000002C6 A820                <1> 	test al, 20h
   356 000002C8 0F85AB000000        <1> 	jnz near handled2
   357 000002CE E460                <1> 	in al, 60h
   358 000002D0 3C01                <1> 	cmp al, 1		;escape
   359 000002D2 7405                <1> 	je userint
   360 000002D4 E9A0000000          <1> 	jmp handled2
   361                              <1> userint:
   362                              <1> 	;UNMASK ALL INTS
   363 000002D9 30C0                <1> 	xor al, al
   364 000002DB E621                <1> 	out 0x21, al
   365 000002DD 30C0                <1> 	xor al, al
   366 000002DF E6A1                <1> 	out 0xA1, al
   367 000002E1 B020                <1> 	mov al, 0x20
   368 000002E3 E6A0                <1> 	out 0xA0, al
   369 000002E5 E620                <1> 	out 0x20, al
   370                              <1> 	;RESET PIT DIVISOR
   371 000002E7 66A1[5B020000]      <1> 	mov ax, [pitdiv]
   372 000002ED E640                <1> 	out 0x40, al
   373 000002EF 66C1C008            <1> 	rol ax, 8
   374 000002F3 E640                <1> 	out 0x40, al
   375                              <1> 	;RESET PIC
   376 000002F5 B020                <1> 	mov al, 0x20
   377 000002F7 E620                <1> 	out 0x20, al
   378 000002F9 61                  <1> 	popa
   379 000002FA FB                  <1> 	sti
   380 000002FB BC[9EAA0000]        <1> 	mov esp, stackend ;reset stack
   381 00000300 E98E260000          <1> 	jmp returnfromexp
   382                              <1> %endif
   383 00000305 0A                  <1> rtcrate db 10
   384                              <1> rtcint:	;this runs at 64Hz which is perfect for 60Hz displays
   385                              <1> %ifdef io.serial
   386                              <1> %else
   387                              <1> %ifdef terminal.vsync
   388 00000306 FA                  <1> 	cli
   389 00000307 803D[D8250000]00    <1> 	cmp byte [termcopyneeded], 0
   390 0000030E 7405                <1> 	je .nocopy
   391 00000310 E8CA220000          <1> 	call newtermcopy
   392                              <1> .nocopy
   393 00000315 50                  <1> 	push eax
   394 00000316 B00C                <1> 	mov al, 0xC
   395 00000318 E670                <1> 	out 0x70, al
   396 0000031A E471                <1> 	in al, 0x71
   397 0000031C 58                  <1> 	pop eax
   398 0000031D FB                  <1> 	sti
   399                              <1> %endif
   400                              <1> %endif
   401 0000031E E95F000000          <1> 	jmp handled4
   402                              <1> %ifdef rtl8139.included
   403                              <1> rtl8139.irq:
   404 00000323 FA                  <1> 	cli
   405 00000324 52                  <1> 	push edx
   406 00000325 50                  <1> 	push eax
   407 00000326 8B15[07820000]      <1> 	mov edx, [rtl8139.basenicaddr]
   408 0000032C 81C23E000000        <1> 	add edx, rtl8139.ISR
   409 00000332 31C0                <1> 	xor eax, eax
   410 00000334 66ED                <1> 	in ax, dx
   411 00000336 66EF                <1> 	out dx, ax
   412 00000338 58                  <1> 	pop eax
   413 00000339 5A                  <1> 	pop edx
   414 0000033A FB                  <1> 	sti
   415 0000033B E942000000          <1> 	jmp handled4
   416                              <1> %endif
   417                              <1> %ifdef sound.included
   418                              <1> sblaster.irq:
   419 00000340 FA                  <1> 	cli
   420 00000341 60                  <1> 	pusha
   421 00000342 803D[125C0000]01    <1> 	cmp byte [SoundBlaster], 1
   422 00000349 0F84CE560000        <1> 	je near sblaster.cont
   423 0000034F E925000000          <1> 	jmp handled2
   424                              <1> %endif
   425                              <1> 	
   426                              <1> timekeeper:
   427 00000354 50                  <1> 	push eax
   428 00000355 A1[65020000]        <1> 	mov eax, [timenanoseconds]
   429 0000035A 0305[5D020000]      <1> 	add eax, [timeinterval]
   430 00000360 3D00CA9A3B          <1> 	cmp eax, 1000000000
   431 00000365 720B                <1> 	jb nonanosecondrollover
   432 00000367 FF05[61020000]      <1> 	inc dword [timeseconds]
   433 0000036D 2D00CA9A3B          <1> 	sub eax, 1000000000
   434                              <1> nonanosecondrollover:
   435 00000372 A3[65020000]        <1> 	mov [timenanoseconds], eax
   436 00000377 58                  <1> 	pop eax
   437 00000378 C3                  <1> 	ret
   438                              <1> 	
   439                              <1> handled2:
   440 00000379 61                  <1> 	popa
   441                              <1> handled3:
   442 0000037A FB                  <1> 	sti
   443                              <1> handled:
   444 0000037B 50                  <1> 	push eax
   445 0000037C B020                <1> 	mov al, 0x20
   446 0000037E E620                <1> 	out 0x20, al
   447 00000380 58                  <1> 	pop eax
   448 00000381 CF                  <1> 	iret
   449                              <1> handled4:
   450 00000382 50                  <1> 	push eax
   451 00000383 B020                <1> 	mov al, 0x20
   452 00000385 E6A0                <1> 	out 0xA0, al
   453 00000387 E620                <1> 	out 0x20, al
   454 00000389 58                  <1> 	pop eax
   455 0000038A CF                  <1> 	iret
   456                              <1> [BITS 16]
   457                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   458                              <1> ;	16-bit limit/32-bit linear base address of GDT and IDT
   459                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   460 0000038B 5700                <1> gdtr:	dw gdt_end - gdt - 1	; GDT limit
   461 0000038D 00000000            <1> 	dd 0    		; filled with linear, physical address of GDT
   462                              <1> 
   463 00000391 FF07                <1> idtr:	dw idt_end - idt - 1	; IDT limit
   464 00000393 00000000            <1> 	dd 0			; filled with linear, physical address of IDT
   465                              <1> 
   466                              <1> 
   467 00000397 0000                <1> gdt:	dw 0			; limit 15:0
   468 00000399 0000                <1> 	dw 0			; base 15:0
   469 0000039B 00                  <1> 	db 0			; base 23:16
   470 0000039C 00                  <1> 	db 0			; type
   471 0000039D 00                  <1> 	db 0			; limit 19:16, flags
   472 0000039E 00                  <1> 	db 0			; base 31:24
   473                              <1> ; linear data segment descriptor
   474                              <1> LINEAR_SEL	equ	$-gdt
   475 0000039F FFFF                <1> 	dw 0xFFFF		; limit 0xFFFFF
   476 000003A1 0000                <1> 	dw 0			; base for this one is always 0
   477 000003A3 00                  <1> 	db 0
   478 000003A4 92                  <1> 	db 0x92			; present, ring 0, data, expand-up, writable
   479 000003A5 CF                  <1> 	db 0xCF			; page-granular, 32-bit
   480 000003A6 00                  <1> 	db 0
   481                              <1> STACK_SEL	equ $-gdt
   482 000003A7 0200                <1> gdts:	dw 2;(stackend)/4096
   483 000003A9 0000                <1> 	dw 0
   484 000003AB 00                  <1> 	db 0
   485 000003AC 92                  <1> 	db 0x92
   486 000003AD CF                  <1> 	db 0xCF
   487 000003AE 00                  <1> 	db 0
   488                              <1> ; code segment descriptor
   489                              <1> SYS_CODE_SEL	equ	$-gdt
   490 000003AF FFFF                <1> gdt2:	dw 0xFFFF
   491 000003B1 0000                <1> 	dw 0			; (base gets set above)
   492 000003B3 00                  <1> 	db 0
   493 000003B4 9A                  <1> 	db 0x9A			; present, ring 0, code, non-conforming, readable
   494 000003B5 CF                  <1> 	db 0xCF
   495 000003B6 00                  <1> 	db 0
   496                              <1> ; data segment descriptor
   497                              <1> SYS_DATA_SEL	equ	$-gdt
   498 000003B7 FFFF                <1> gdt3:	dw 0xFFFF
   499 000003B9 0000                <1> 	dw 0			; (base gets set above)
   500 000003BB 00                  <1> 	db 0
   501 000003BC 92                  <1> 	db 0x92			; present, ring 0, data, expand-up, writable
   502 000003BD CF                  <1> 	db 0xCF
   503 000003BE 00                  <1> 	db 0
   504                              <1> NEW_CODE_SEL	equ	$-gdt
   505 000003BF FFFF                <1> gdt4:	dw 0xFFFF
   506 000003C1 0000                <1> 	dw 0			; (base gets set above)
   507 000003C3 00                  <1> 	db 0
   508 000003C4 9A                  <1> 	db 0x9A			; present, ring 0, code, non-conforming, readable
   509 000003C5 CF                  <1> 	db 0xCF
   510 000003C6 00                  <1> 	db 0
   511                              <1> ; data segment descriptor
   512                              <1> NEW_DATA_SEL	equ	$-gdt
   513 000003C7 FFFF                <1> gdt5:	dw 0xFFFF
   514 000003C9 0000                <1> 	dw 0			; (base gets set above)
   515 000003CB 00                  <1> 	db 0
   516 000003CC 92                  <1> 	db 0x92			; present, ring 0, data, expand-up, writable
   517 000003CD CF                  <1> 	db 0xCF
   518 000003CE 00                  <1> 	db 0
   519                              <1> V8086_CODE_SEL	equ $-gdt
   520 000003CF FFFF                <1> gdtv8086: dw 0xFFFF
   521 000003D1 0000                <1> 	dw 0
   522 000003D3 00                  <1> 	db 0
   523 000003D4 9A                  <1> 	db 0x9A
   524 000003D5 8F                  <1> 	db 0x8F
   525 000003D6 00                  <1> 	db 0
   526                              <1> V8086_DATA_SEL	equ $-gdt
   527 000003D7 FFFF                <1> gdtv80862: dw 0xFFFF
   528 000003D9 0000                <1> 	dw 0
   529 000003DB 00                  <1> 	db 0
   530 000003DC 92                  <1> 	db 0x92
   531 000003DD 8F                  <1> 	db 0x8F
   532 000003DE 00                  <1> 	db 0
   533                              <1> DOS_CODE_SEL	equ $-gdt	;this gives dos programs complete access to one megabyte at the beginning of memory
   534 000003DF 0001                <1> gdtdos:	dw 256	;give it 1 MB
   535 000003E1 0000                <1> 	dw 0
   536 000003E3 00                  <1> 	db 0
   537 000003E4 9A                  <1> 	db 0x9A
   538 000003E5 8F                  <1> 	db 0x8F ;16 bit
   539 000003E6 00                  <1> 	db 0
   540                              <1> DOS_DATA_SEL 	equ $-gdt
   541 000003E7 0001                <1> gdtdos2:	dw 256
   542 000003E9 0000                <1> 	dw 0
   543 000003EB 00                  <1> 	db 0
   544 000003EC 92                  <1> 	db 0x92
   545 000003ED 8F                  <1> 	db 0x8F ;16 bit
   546 000003EE 00                  <1> 	db 0
   547                              <1> gdt_end:
   548                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   549                              <1> ;	interrupt descriptor table (IDT)
   550                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   551                              <1> ; 32 reserved interrupts:
   552                              <1> idt:	
   553                              <1> %assign i 0
   554                              <1> %rep    8
   555                              <1> 		dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   556                              <1> %assign i i+1
   557                              <1> %endrep
   558 000003EF [100D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   559                              <2> %assign i i+1
   560 000003F7 [1C0D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   561                              <2> %assign i i+1
   562 000003FF [280D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   563                              <2> %assign i i+1
   564 00000407 [340D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   565                              <2> %assign i i+1
   566 0000040F [400D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   567                              <2> %assign i i+1
   568 00000417 [4C0D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   569                              <2> %assign i i+1
   570 0000041F [580D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   571                              <2> %assign i i+1
   572 00000427 [640D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   573                              <2> %assign i i+1
   574 0000042F [700D]1800008E0000  <1> 		dw unhand + 8*12,SYS_CODE_SEL,0x8E00,0	;double fault handler in original memory
   575                              <1> %assign i 9
   576                              <1> %rep    23
   577                              <1> 		dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   578                              <1> %assign i i+1
   579                              <1> %endrep
   580 00000437 [7C0D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   581                              <2> %assign i i+1
   582 0000043F [880D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   583                              <2> %assign i i+1
   584 00000447 [940D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   585                              <2> %assign i i+1
   586 0000044F [A00D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   587                              <2> %assign i i+1
   588 00000457 [AC0D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   589                              <2> %assign i i+1
   590 0000045F [B80D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   591                              <2> %assign i i+1
   592 00000467 [C40D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   593                              <2> %assign i i+1
   594 0000046F [D00D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   595                              <2> %assign i i+1
   596 00000477 [DC0D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   597                              <2> %assign i i+1
   598 0000047F [E80D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   599                              <2> %assign i i+1
   600 00000487 [F40D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   601                              <2> %assign i i+1
   602 0000048F [000E]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   603                              <2> %assign i i+1
   604 00000497 [0C0E]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   605                              <2> %assign i i+1
   606 0000049F [180E]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   607                              <2> %assign i i+1
   608 000004A7 [240E]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   609                              <2> %assign i i+1
   610 000004AF [300E]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   611                              <2> %assign i i+1
   612 000004B7 [3C0E]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   613                              <2> %assign i i+1
   614 000004BF [480E]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   615                              <2> %assign i i+1
   616 000004C7 [540E]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   617                              <2> %assign i i+1
   618 000004CF [600E]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   619                              <2> %assign i i+1
   620 000004D7 [6C0E]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   621                              <2> %assign i i+1
   622 000004DF [780E]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   623                              <2> %assign i i+1
   624 000004E7 [840E]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   625                              <2> %assign i i+1
   626 000004EF [F126]2800008E0000  <1> 		dw int20h,NEW_CODE_SEL,0x8E00,0
   627 000004F7 [F526]2800008E0000  <1> 		dw int21h,NEW_CODE_SEL,0x8E00,0
   628                              <1> %assign i 0x22
   629                              <1> %rep 14
   630                              <1> 		dw handled,NEW_CODE_SEL,0x8E00,0
   631                              <1> %assign i +1
   632                              <1> %endrep
   633 000004FF [7B03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   634                              <2> %assign i +1
   635 00000507 [7B03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   636                              <2> %assign i +1
   637 0000050F [7B03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   638                              <2> %assign i +1
   639 00000517 [7B03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   640                              <2> %assign i +1
   641 0000051F [7B03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   642                              <2> %assign i +1
   643 00000527 [7B03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   644                              <2> %assign i +1
   645 0000052F [7B03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   646                              <2> %assign i +1
   647 00000537 [7B03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   648                              <2> %assign i +1
   649 0000053F [7B03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   650                              <2> %assign i +1
   651 00000547 [7B03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   652                              <2> %assign i +1
   653 0000054F [7B03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   654                              <2> %assign i +1
   655 00000557 [7B03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   656                              <2> %assign i +1
   657 0000055F [7B03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   658                              <2> %assign i +1
   659 00000567 [7B03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   660                              <2> %assign i +1
   661                              <1> ;INT 30h for os use and 3rd party use:
   662 0000056F [061C]2800008E0000  <1> 		dw newints,NEW_CODE_SEL,0x8E00,0
   663                              <1> %assign i 0x31
   664                              <1> %rep 15
   665                              <1> 		dw handled,NEW_CODE_SEL,0x8E00,0
   666                              <1> %assign i +1
   667                              <1> %endrep
   668 00000577 [7B03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   669                              <2> %assign i +1
   670 0000057F [7B03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   671                              <2> %assign i +1
   672 00000587 [7B03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   673                              <2> %assign i +1
   674 0000058F [7B03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   675                              <2> %assign i +1
   676 00000597 [7B03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   677                              <2> %assign i +1
   678 0000059F [7B03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   679                              <2> %assign i +1
   680 000005A7 [7B03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   681                              <2> %assign i +1
   682 000005AF [7B03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   683                              <2> %assign i +1
   684 000005B7 [7B03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   685                              <2> %assign i +1
   686 000005BF [7B03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   687                              <2> %assign i +1
   688 000005C7 [7B03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   689                              <2> %assign i +1
   690 000005CF [7B03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   691                              <2> %assign i +1
   692 000005D7 [7B03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   693                              <2> %assign i +1
   694 000005DF [7B03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   695                              <2> %assign i +1
   696 000005E7 [7B03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   697                              <2> %assign i +1
   698                              <1> ;and here we are at 0x40
   699                              <1> ;here are all the irq's
   700 000005EF [8D02]2800008E0000  <1> 		dw pitinterrupt,NEW_CODE_SEL,0x8E00,0 ;IRQ 0 = PIT
   701 000005F7 [7B03]2800008E0000  <1> 		dw handled,NEW_CODE_SEL,0x8E00,0 ;IRQ 1 = keyboard
   702 000005FF [7B03]2800008E0000  <1> 		dw handled,NEW_CODE_SEL,0x8E00,0 ;IRQ 2
   703 00000607 [7B03]2800008E0000  <1> 		dw handled,NEW_CODE_SEL,0x8E00,0 ;IRQ 3
   704 0000060F [7B03]2800008E0000  <1> 		dw handled,NEW_CODE_SEL,0x8E00,0 ;IRQ 4
   705                              <1> 	%ifdef sound.included
   706 00000617 [4003]2800008E0000  <1> 		dw sblaster.irq,NEW_CODE_SEL,0x8E00,0 ;IRQ 5 = default SoundBlaster
   707                              <1> 	%else
   708                              <1> 		dw handled,NEW_CODE_SEL,0x8E00,0 ;IRQ 5
   709                              <1> 	%endif
   710 0000061F [7B03]2800008E0000  <1> 		dw handled,NEW_CODE_SEL,0x8E00,0 ;IRQ 6
   711 00000627 [7B03]2800008E0000  <1> 		dw handled,NEW_CODE_SEL,0x8E00,0 ;IRQ 7
   712 0000062F [0603]2800008E0000  <1> 		dw rtcint,NEW_CODE_SEL,0x8E00,0 ;IRQ 8 = RTC
   713 00000637 [8203]2800008E0000  <1> 		dw handled4,NEW_CODE_SEL,0x8E00,0 ;IRQ 9 = default NE2000
   714 0000063F [8203]2800008E0000  <1> 		dw handled4,NEW_CODE_SEL,0x8E00,0 ;IRQ 10
   715                              <1> 	%ifdef rtl8139.included
   716 00000647 [2303]2800008E0000  <1> 		dw rtl8139.irq,NEW_CODE_SEL,0x8E00,0 ;IRQ 11 = default RTL8139
   717                              <1> 	%else
   718                              <1> 		dw handled4,NEW_CODE_SEL,0x8E00,0 ;IRQ 11
   719                              <1> 	%endif
   720 0000064F [8203]2800008E0000  <1> 		dw handled4,NEW_CODE_SEL,0x8E00,0 ;IRQ 12
   721 00000657 [8203]2800008E0000  <1> 		dw handled4,NEW_CODE_SEL,0x8E00,0 ;IRQ 13
   722 0000065F [8203]2800008E0000  <1> 		dw handled4,NEW_CODE_SEL,0x8E00,0 ;IRQ 14
   723 00000667 [8203]2800008E0000  <1> 		dw handled4,NEW_CODE_SEL,0x8E00,0 ;IRQ 15
   724                              <1> ;This brings me up to 0x50
   725                              <1> %assign i 0x50
   726                              <1> %rep 176
   727                              <1> 		dw handled, NEW_CODE_SEL,0x8E00,0
   728                              <1> 		;dw unhand + i*12, NEW_CODE_SEL,0x8E00,0
   729                              <1> %assign i +1
   730                              <1> %endrep
   731 0000066F [7B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   732                              <2> 
   733                              <2> %assign i +1
   734 00000677 [7B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   735                              <2> 
   736                              <2> %assign i +1
   737 0000067F [7B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   738                              <2> 
   739                              <2> %assign i +1
   740 00000687 [7B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   741                              <2> 
   742                              <2> %assign i +1
   743 0000068F [7B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   744                              <2> 
   745                              <2> %assign i +1
   746 00000697 [7B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   747                              <2> 
   748                              <2> %assign i +1
   749 0000069F [7B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   750                              <2> 
   751                              <2> %assign i +1
   752 000006A7 [7B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   753                              <2> 
   754                              <2> %assign i +1
   755 000006AF [7B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   756                              <2> 
   757                              <2> %assign i +1
   758 000006B7 [7B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   759                              <2> 
   760                              <2> %assign i +1
   761 000006BF [7B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   762                              <2> 
   763                              <2> %assign i +1
   764 000006C7 [7B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   765                              <2> 
   766                              <2> %assign i +1
   767 000006CF [7B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   768                              <2> 
   769                              <2> %assign i +1
   770 000006D7 [7B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   771                              <2> 
   772                              <2> %assign i +1
   773 000006DF [7B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   774                              <2> 
   775                              <2> %assign i +1
   776 000006E7 [7B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   777                              <2> 
   778                              <2> %assign i +1
   779 000006EF [7B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   780                              <2> 
   781                              <2> %assign i +1
   782 000006F7 [7B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   783                              <2> 
   784                              <2> %assign i +1
   785 000006FF [7B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   786                              <2> 
   787                              <2> %assign i +1
   788 00000707 [7B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   789                              <2> 
   790                              <2> %assign i +1
   791 0000070F [7B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   792                              <2> 
   793                              <2> %assign i +1
   794 00000717 [7B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   795                              <2> 
   796                              <2> %assign i +1
   797 0000071F [7B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   798                              <2> 
   799                              <2> %assign i +1
   800 00000727 [7B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   801                              <2> 
   802                              <2> %assign i +1
   803 0000072F [7B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   804                              <2> 
   805                              <2> %assign i +1
   806 00000737 [7B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   807                              <2> 
   808                              <2> %assign i +1
   809 0000073F [7B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   810                              <2> 
   811                              <2> %assign i +1
   812 00000747 [7B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   813                              <2> 
   814                              <2> %assign i +1
   815 0000074F [7B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   816                              <2> 
   817                              <2> %assign i +1
   818 00000757 [7B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   819                              <2> 
   820                              <2> %assign i +1
   821 0000075F [7B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   822                              <2> 
   823                              <2> %assign i +1
   824 00000767 [7B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   825                              <2> 
   826                              <2> %assign i +1
   827 0000076F [7B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   828                              <2> 
   829                              <2> %assign i +1
   830 00000777 [7B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   831                              <2> 
   832                              <2> %assign i +1
   833 0000077F [7B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   834                              <2> 
   835                              <2> %assign i +1
   836 00000787 [7B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   837                              <2> 
   838                              <2> %assign i +1
   839 0000078F [7B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   840                              <2> 
   841                              <2> %assign i +1
   842 00000797 [7B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   843                              <2> 
   844                              <2> %assign i +1
   845 0000079F [7B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   846                              <2> 
   847                              <2> %assign i +1
   848 000007A7 [7B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   849                              <2> 
   850                              <2> %assign i +1
   851 000007AF [7B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   852                              <2> 
   853                              <2> %assign i +1
   854 000007B7 [7B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   855                              <2> 
   856                              <2> %assign i +1
   857 000007BF [7B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   858                              <2> 
   859                              <2> %assign i +1
   860 000007C7 [7B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   861                              <2> 
   862                              <2> %assign i +1
   863 000007CF [7B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   864                              <2> 
   865                              <2> %assign i +1
   866 000007D7 [7B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   867                              <2> 
   868                              <2> %assign i +1
   869 000007DF [7B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   870                              <2> 
   871                              <2> %assign i +1
   872 000007E7 [7B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   873                              <2> 
   874                              <2> %assign i +1
   875 000007EF [7B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   876                              <2> 
   877                              <2> %assign i +1
   878 000007F7 [7B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   879                              <2> 
   880                              <2> %assign i +1
   881 000007FF [7B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   882                              <2> 
   883                              <2> %assign i +1
   884 00000807 [7B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   885                              <2> 
   886                              <2> %assign i +1
   887 0000080F [7B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   888                              <2> 
   889                              <2> %assign i +1
   890 00000817 [7B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   891                              <2> 
   892                              <2> %assign i +1
   893 0000081F [7B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   894                              <2> 
   895                              <2> %assign i +1
   896 00000827 [7B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   897                              <2> 
   898                              <2> %assign i +1
   899 0000082F [7B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   900                              <2> 
   901                              <2> %assign i +1
   902 00000837 [7B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   903                              <2> 
   904                              <2> %assign i +1
   905 0000083F [7B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   906                              <2> 
   907                              <2> %assign i +1
   908 00000847 [7B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   909                              <2> 
   910                              <2> %assign i +1
   911 0000084F [7B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   912                              <2> 
   913                              <2> %assign i +1
   914 00000857 [7B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   915                              <2> 
   916                              <2> %assign i +1
   917 0000085F [7B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   918                              <2> 
   919                              <2> %assign i +1
   920 00000867 [7B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   921                              <2> 
   922                              <2> %assign i +1
   923 0000086F [7B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   924                              <2> 
   925                              <2> %assign i +1
   926 00000877 [7B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   927                              <2> 
   928                              <2> %assign i +1
   929 0000087F [7B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   930                              <2> 
   931                              <2> %assign i +1
   932 00000887 [7B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   933                              <2> 
   934                              <2> %assign i +1
   935 0000088F [7B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   936                              <2> 
   937                              <2> %assign i +1
   938 00000897 [7B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   939                              <2> 
   940                              <2> %assign i +1
   941 0000089F [7B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   942                              <2> 
   943                              <2> %assign i +1
   944 000008A7 [7B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   945                              <2> 
   946                              <2> %assign i +1
   947 000008AF [7B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   948                              <2> 
   949                              <2> %assign i +1
   950 000008B7 [7B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   951                              <2> 
   952                              <2> %assign i +1
   953 000008BF [7B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   954                              <2> 
   955                              <2> %assign i +1
   956 000008C7 [7B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   957                              <2> 
   958                              <2> %assign i +1
   959 000008CF [7B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   960                              <2> 
   961                              <2> %assign i +1
   962 000008D7 [7B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   963                              <2> 
   964                              <2> %assign i +1
   965 000008DF [7B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   966                              <2> 
   967                              <2> %assign i +1
   968 000008E7 [7B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   969                              <2> 
   970                              <2> %assign i +1
   971 000008EF [7B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   972                              <2> 
   973                              <2> %assign i +1
   974 000008F7 [7B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   975                              <2> 
   976                              <2> %assign i +1
   977 000008FF [7B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   978                              <2> 
   979                              <2> %assign i +1
   980 00000907 [7B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   981                              <2> 
   982                              <2> %assign i +1
   983 0000090F [7B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   984                              <2> 
   985                              <2> %assign i +1
   986 00000917 [7B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   987                              <2> 
   988                              <2> %assign i +1
   989 0000091F [7B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   990                              <2> 
   991                              <2> %assign i +1
   992 00000927 [7B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   993                              <2> 
   994                              <2> %assign i +1
   995 0000092F [7B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   996                              <2> 
   997                              <2> %assign i +1
   998 00000937 [7B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   999                              <2> 
  1000                              <2> %assign i +1
  1001 0000093F [7B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1002                              <2> 
  1003                              <2> %assign i +1
  1004 00000947 [7B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1005                              <2> 
  1006                              <2> %assign i +1
  1007 0000094F [7B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1008                              <2> 
  1009                              <2> %assign i +1
  1010 00000957 [7B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1011                              <2> 
  1012                              <2> %assign i +1
  1013 0000095F [7B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1014                              <2> 
  1015                              <2> %assign i +1
  1016 00000967 [7B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1017                              <2> 
  1018                              <2> %assign i +1
  1019 0000096F [7B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1020                              <2> 
  1021                              <2> %assign i +1
  1022 00000977 [7B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1023                              <2> 
  1024                              <2> %assign i +1
  1025 0000097F [7B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1026                              <2> 
  1027                              <2> %assign i +1
  1028 00000987 [7B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1029                              <2> 
  1030                              <2> %assign i +1
  1031 0000098F [7B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1032                              <2> 
  1033                              <2> %assign i +1
  1034 00000997 [7B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1035                              <2> 
  1036                              <2> %assign i +1
  1037 0000099F [7B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1038                              <2> 
  1039                              <2> %assign i +1
  1040 000009A7 [7B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1041                              <2> 
  1042                              <2> %assign i +1
  1043 000009AF [7B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1044                              <2> 
  1045                              <2> %assign i +1
  1046 000009B7 [7B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1047                              <2> 
  1048                              <2> %assign i +1
  1049 000009BF [7B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1050                              <2> 
  1051                              <2> %assign i +1
  1052 000009C7 [7B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1053                              <2> 
  1054                              <2> %assign i +1
  1055 000009CF [7B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1056                              <2> 
  1057                              <2> %assign i +1
  1058 000009D7 [7B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1059                              <2> 
  1060                              <2> %assign i +1
  1061 000009DF [7B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1062                              <2> 
  1063                              <2> %assign i +1
  1064 000009E7 [7B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1065                              <2> 
  1066                              <2> %assign i +1
  1067 000009EF [7B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1068                              <2> 
  1069                              <2> %assign i +1
  1070 000009F7 [7B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1071                              <2> 
  1072                              <2> %assign i +1
  1073 000009FF [7B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1074                              <2> 
  1075                              <2> %assign i +1
  1076 00000A07 [7B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1077                              <2> 
  1078                              <2> %assign i +1
  1079 00000A0F [7B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1080                              <2> 
  1081                              <2> %assign i +1
  1082 00000A17 [7B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1083                              <2> 
  1084                              <2> %assign i +1
  1085 00000A1F [7B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1086                              <2> 
  1087                              <2> %assign i +1
  1088 00000A27 [7B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1089                              <2> 
  1090                              <2> %assign i +1
  1091 00000A2F [7B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1092                              <2> 
  1093                              <2> %assign i +1
  1094 00000A37 [7B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1095                              <2> 
  1096                              <2> %assign i +1
  1097 00000A3F [7B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1098                              <2> 
  1099                              <2> %assign i +1
  1100 00000A47 [7B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1101                              <2> 
  1102                              <2> %assign i +1
  1103 00000A4F [7B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1104                              <2> 
  1105                              <2> %assign i +1
  1106 00000A57 [7B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1107                              <2> 
  1108                              <2> %assign i +1
  1109 00000A5F [7B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1110                              <2> 
  1111                              <2> %assign i +1
  1112 00000A67 [7B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1113                              <2> 
  1114                              <2> %assign i +1
  1115 00000A6F [7B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1116                              <2> 
  1117                              <2> %assign i +1
  1118 00000A77 [7B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1119                              <2> 
  1120                              <2> %assign i +1
  1121 00000A7F [7B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1122                              <2> 
  1123                              <2> %assign i +1
  1124 00000A87 [7B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1125                              <2> 
  1126                              <2> %assign i +1
  1127 00000A8F [7B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1128                              <2> 
  1129                              <2> %assign i +1
  1130 00000A97 [7B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1131                              <2> 
  1132                              <2> %assign i +1
  1133 00000A9F [7B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1134                              <2> 
  1135                              <2> %assign i +1
  1136 00000AA7 [7B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1137                              <2> 
  1138                              <2> %assign i +1
  1139 00000AAF [7B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1140                              <2> 
  1141                              <2> %assign i +1
  1142 00000AB7 [7B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1143                              <2> 
  1144                              <2> %assign i +1
  1145 00000ABF [7B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1146                              <2> 
  1147                              <2> %assign i +1
  1148 00000AC7 [7B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1149                              <2> 
  1150                              <2> %assign i +1
  1151 00000ACF [7B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1152                              <2> 
  1153                              <2> %assign i +1
  1154 00000AD7 [7B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1155                              <2> 
  1156                              <2> %assign i +1
  1157 00000ADF [7B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1158                              <2> 
  1159                              <2> %assign i +1
  1160 00000AE7 [7B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1161                              <2> 
  1162                              <2> %assign i +1
  1163 00000AEF [7B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1164                              <2> 
  1165                              <2> %assign i +1
  1166 00000AF7 [7B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1167                              <2> 
  1168                              <2> %assign i +1
  1169 00000AFF [7B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1170                              <2> 
  1171                              <2> %assign i +1
  1172 00000B07 [7B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1173                              <2> 
  1174                              <2> %assign i +1
  1175 00000B0F [7B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1176                              <2> 
  1177                              <2> %assign i +1
  1178 00000B17 [7B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1179                              <2> 
  1180                              <2> %assign i +1
  1181 00000B1F [7B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1182                              <2> 
  1183                              <2> %assign i +1
  1184 00000B27 [7B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1185                              <2> 
  1186                              <2> %assign i +1
  1187 00000B2F [7B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1188                              <2> 
  1189                              <2> %assign i +1
  1190 00000B37 [7B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1191                              <2> 
  1192                              <2> %assign i +1
  1193 00000B3F [7B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1194                              <2> 
  1195                              <2> %assign i +1
  1196 00000B47 [7B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1197                              <2> 
  1198                              <2> %assign i +1
  1199 00000B4F [7B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1200                              <2> 
  1201                              <2> %assign i +1
  1202 00000B57 [7B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1203                              <2> 
  1204                              <2> %assign i +1
  1205 00000B5F [7B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1206                              <2> 
  1207                              <2> %assign i +1
  1208 00000B67 [7B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1209                              <2> 
  1210                              <2> %assign i +1
  1211 00000B6F [7B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1212                              <2> 
  1213                              <2> %assign i +1
  1214 00000B77 [7B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1215                              <2> 
  1216                              <2> %assign i +1
  1217 00000B7F [7B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1218                              <2> 
  1219                              <2> %assign i +1
  1220 00000B87 [7B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1221                              <2> 
  1222                              <2> %assign i +1
  1223 00000B8F [7B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1224                              <2> 
  1225                              <2> %assign i +1
  1226 00000B97 [7B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1227                              <2> 
  1228                              <2> %assign i +1
  1229 00000B9F [7B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1230                              <2> 
  1231                              <2> %assign i +1
  1232 00000BA7 [7B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1233                              <2> 
  1234                              <2> %assign i +1
  1235 00000BAF [7B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1236                              <2> 
  1237                              <2> %assign i +1
  1238 00000BB7 [7B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1239                              <2> 
  1240                              <2> %assign i +1
  1241 00000BBF [7B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1242                              <2> 
  1243                              <2> %assign i +1
  1244 00000BC7 [7B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1245                              <2> 
  1246                              <2> %assign i +1
  1247 00000BCF [7B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1248                              <2> 
  1249                              <2> %assign i +1
  1250 00000BD7 [7B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1251                              <2> 
  1252                              <2> %assign i +1
  1253 00000BDF [7B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1254                              <2> 
  1255                              <2> %assign i +1
  1256 00000BE7 [7B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1257                              <2> 
  1258                              <2> %assign i +1
  1259                              <1> idt_end:
  1260                              <1> [BITS 32]
  1261                                  	%include "source/realmode.asm"
  1262                              <1> realmode:	;make sure the real mode program's address is in realmodeptr 
  1263                              <1> 			;and the return address is in realmodereturn
  1264 00000BEF FA                  <1> 	cli
  1265 00000BF0 A3[020D0000]        <1> 	mov [realmodeeax], eax
  1266 00000BF5 891D[FE0C0000]      <1> 	mov [realmodeebx], ebx
  1267 00000BFB 8925[F00C0000]      <1> 	mov [pmodeesp], esp
  1268                              <1> 
  1269 00000C01 BB[FA0C0000]        <1> 	mov ebx, cr0old
  1270                              <1> rmcopytofirstmbyte:
  1271 00000C06 8B03                <1> 	mov eax, [ebx]
  1272 00000C08 658903              <1> 	mov [gs:ebx], eax
  1273 00000C0B 81C304000000        <1> 	add ebx, 4
  1274 00000C11 81FB[0A0D0000]      <1> 	cmp ebx, realmodeptr
  1275 00000C17 76ED                <1> 	jbe rmcopytofirstmbyte
  1276                              <1> 
  1277 00000C19 EA[200C0000]3800    <1> 	jmp V8086_CODE_SEL:protected16bit
  1278                              <1> 
  1279                              <1> [BITS 16]
  1280                              <1> protected16bit:
  1281 00000C20 B84000              <1> 	mov ax, V8086_DATA_SEL
  1282 00000C23 8ED8                <1> 	mov ds, ax
  1283 00000C25 8EC0                <1> 	mov es, ax
  1284 00000C27 8EE0                <1> 	mov fs, ax
  1285 00000C29 8EE8                <1> 	mov gs, ax
  1286 00000C2B 8ED0                <1> 	mov ss, ax
  1287 00000C2D 66BC[9EAA0000]      <1> 	mov esp, stackend
  1288 00000C33 0F20C0              <1> 	mov eax, cr0
  1289 00000C36 66A3[FA0C]          <1> 	mov [cr0old], eax
  1290 00000C3A 6625FEFFFF7F        <1> 	and eax, 0x7FFFFFFE
  1291 00000C40 0F22C0              <1> 	mov cr0, eax	;now in real mode
  1292 00000C43 EA[480C]0010        <1> 	jmp 0x1000:inrealmode
  1293                              <1> 
  1294                              <1> inrealmode:
  1295 00000C48 8CC8                <1> 	mov ax, cs
  1296 00000C4A 8ED8                <1> 	mov ds, ax
  1297 00000C4C 8EC0                <1> 	mov es, ax
  1298 00000C4E 8EE0                <1> 	mov fs, ax
  1299 00000C50 8EE8                <1> 	mov gs, ax
  1300 00000C52 8ED0                <1> 	mov ss, ax
  1301 00000C54 BC[9EAA]            <1> 	mov sp, stackend ;because this is at 0x1000: and not 0x10000: it works
  1302                              <1> 	
  1303 00000C57 B011                <1> 	mov al, 0x11
  1304 00000C59 E620                <1> 	out 0x20, al
  1305 00000C5B E6A0                <1> 	out 0xA0, al
  1306 00000C5D B008                <1> 	mov al, 0x8		;interrupt for master
  1307 00000C5F E621                <1> 	out 0x21, al
  1308 00000C61 B070                <1> 	mov al, 0x70	;interrupt for slave
  1309 00000C63 E6A1                <1> 	out 0xA1, al
  1310 00000C65 B004                <1> 	mov al, 4
  1311 00000C67 E621                <1> 	out 0x21, al
  1312 00000C69 B002                <1> 	mov al, 2
  1313 00000C6B E6A1                <1> 	out 0xA1, al
  1314 00000C6D B001                <1> 	mov al, 0x1
  1315 00000C6F E621                <1> 	out 0x21, al
  1316 00000C71 B001                <1> 	mov al, 0x1
  1317 00000C73 E6A1                <1> 	out 0xA1, al
  1318                              <1> 	
  1319 00000C75 0F011E[F40C]        <1> 	lidt [idt_real]
  1320 00000C7A FB                  <1> 	sti
  1321                              <1> 
  1322 00000C7B 66A1[020D]          <1> 	mov eax, [realmodeeax]
  1323 00000C7F 668B1E[FE0C]        <1> 	mov ebx, [realmodeebx]
  1324                              <1> 
  1325 00000C84 FF16[0A0D]          <1> 	call word [realmodeptr] ;call the real mode program here
  1326                              <1> 
  1327 00000C88 66A3[020D]          <1> 	mov [realmodeeax], eax
  1328 00000C8C 66891E[FE0C]        <1> 	mov [realmodeebx], ebx
  1329                              <1> 
  1330 00000C91 FA                  <1> 	cli
  1331 00000C92 0F0116[8B03]        <1> 	lgdt [gdtr]
  1332 00000C97 0F011E[9103]        <1> 	lidt [idtr]
  1333 00000C9C 0F20C0              <1> 	mov eax, cr0
  1334 00000C9F 0C01                <1> 	or al, 1
  1335 00000CA1 0F22C0              <1> 	mov cr0,eax
  1336 00000CA4 EA[A90C]2800        <1> 	jmp NEW_CODE_SEL:returntopmode
  1337                              <1> 
  1338                              <1> [BITS 32]
  1339                              <1> returntopmode:
  1340 00000CA9 66B83000            <1> 	mov ax, NEW_DATA_SEL
  1341 00000CAD 8ED8                <1> 	mov ds, ax
  1342 00000CAF 8EC0                <1> 	mov es, ax
  1343 00000CB1 8EE0                <1> 	mov fs, ax
  1344 00000CB3 8ED0                <1> 	mov ss, ax
  1345 00000CB5 8B25[F00C0000]      <1> 	mov esp, [pmodeesp]
  1346 00000CBB 66B82000            <1> 	mov ax, SYS_DATA_SEL
  1347 00000CBF 8EE8                <1> 	mov gs, ax
  1348                              <1> 
  1349 00000CC1 BB[FA0C0000]        <1> 	mov ebx, cr0old
  1350                              <1> rmcopyfromfirstmbyte:
  1351 00000CC6 658B03              <1> 	mov eax, [gs:ebx]
  1352 00000CC9 8903                <1> 	mov [ebx], eax
  1353 00000CCB 81C304000000        <1> 	add ebx, 4
  1354 00000CD1 81FB[0A0D0000]      <1> 	cmp ebx, realmodeptr
  1355 00000CD7 76ED                <1> 	jbe rmcopyfromfirstmbyte
  1356                              <1> 
  1357 00000CD9 E89C520000          <1> 	call initialize.pic ;reset irq's and masks
  1358 00000CDE FB                  <1> 	sti
  1359 00000CDF A1[020D0000]        <1> 	mov eax, [realmodeeax]
  1360 00000CE4 8B1D[FE0C0000]      <1> 	mov ebx, [realmodeebx]
  1361 00000CEA FF25[060D0000]      <1> 	jmp dword [realmodereturn]
  1362                              <1> 	
  1363 00000CF0 00000000            <1> pmodeesp dd 0
  1364                              <1> idt_real:
  1365 00000CF4 FF03                <1> 	dw 0x3FF
  1366 00000CF6 00000000            <1> 	dd 0
  1367 00000CFA 00000000            <1> cr0old dd 0
  1368 00000CFE 00000000            <1> realmodeebx dd 0
  1369 00000D02 00000000            <1> realmodeeax dd 0
  1370 00000D06 00000000            <1> realmodereturn dd 0
  1371 00000D0A 0000                <1> realmodeptr dw 0
  1372 00000D0C 00000000            <1> dd 0 ;make sure the copy thing doesnt overflow
  1373                                  [BITS 32]
  1374                                      %include "source/exception.asm"
  1375                              <1> %ifdef exceptions.included
  1376                              <1> unhand:	
  1377                              <1> 	%assign i 0
  1378                              <1> 	%rep 32
  1379                              <1> 	mov byte [intprob], i
  1380                              <1> 	jmp unhand2
  1381                              <1> 	%assign i i+1
  1382                              <1> 	%endrep
  1383 00000D10 C605[C5110000]00    <2>  mov byte [intprob], i
  1384 00000D17 E974010000          <2>  jmp unhand2
  1385                              <2>  %assign i i+1
  1386 00000D1C C605[C5110000]01    <2>  mov byte [intprob], i
  1387 00000D23 E968010000          <2>  jmp unhand2
  1388                              <2>  %assign i i+1
  1389 00000D28 C605[C5110000]02    <2>  mov byte [intprob], i
  1390 00000D2F E95C010000          <2>  jmp unhand2
  1391                              <2>  %assign i i+1
  1392 00000D34 C605[C5110000]03    <2>  mov byte [intprob], i
  1393 00000D3B E950010000          <2>  jmp unhand2
  1394                              <2>  %assign i i+1
  1395 00000D40 C605[C5110000]04    <2>  mov byte [intprob], i
  1396 00000D47 E944010000          <2>  jmp unhand2
  1397                              <2>  %assign i i+1
  1398 00000D4C C605[C5110000]05    <2>  mov byte [intprob], i
  1399 00000D53 E938010000          <2>  jmp unhand2
  1400                              <2>  %assign i i+1
  1401 00000D58 C605[C5110000]06    <2>  mov byte [intprob], i
  1402 00000D5F E92C010000          <2>  jmp unhand2
  1403                              <2>  %assign i i+1
  1404 00000D64 C605[C5110000]07    <2>  mov byte [intprob], i
  1405 00000D6B E920010000          <2>  jmp unhand2
  1406                              <2>  %assign i i+1
  1407 00000D70 C605[C5110000]08    <2>  mov byte [intprob], i
  1408 00000D77 E914010000          <2>  jmp unhand2
  1409                              <2>  %assign i i+1
  1410 00000D7C C605[C5110000]09    <2>  mov byte [intprob], i
  1411 00000D83 E908010000          <2>  jmp unhand2
  1412                              <2>  %assign i i+1
  1413 00000D88 C605[C5110000]0A    <2>  mov byte [intprob], i
  1414 00000D8F E9FC000000          <2>  jmp unhand2
  1415                              <2>  %assign i i+1
  1416 00000D94 C605[C5110000]0B    <2>  mov byte [intprob], i
  1417 00000D9B E9F0000000          <2>  jmp unhand2
  1418                              <2>  %assign i i+1
  1419 00000DA0 C605[C5110000]0C    <2>  mov byte [intprob], i
  1420 00000DA7 E9E4000000          <2>  jmp unhand2
  1421                              <2>  %assign i i+1
  1422 00000DAC C605[C5110000]0D    <2>  mov byte [intprob], i
  1423 00000DB3 E9D8000000          <2>  jmp unhand2
  1424                              <2>  %assign i i+1
  1425 00000DB8 C605[C5110000]0E    <2>  mov byte [intprob], i
  1426 00000DBF E9CC000000          <2>  jmp unhand2
  1427                              <2>  %assign i i+1
  1428 00000DC4 C605[C5110000]0F    <2>  mov byte [intprob], i
  1429 00000DCB E9C0000000          <2>  jmp unhand2
  1430                              <2>  %assign i i+1
  1431 00000DD0 C605[C5110000]10    <2>  mov byte [intprob], i
  1432 00000DD7 E9B4000000          <2>  jmp unhand2
  1433                              <2>  %assign i i+1
  1434 00000DDC C605[C5110000]11    <2>  mov byte [intprob], i
  1435 00000DE3 E9A8000000          <2>  jmp unhand2
  1436                              <2>  %assign i i+1
  1437 00000DE8 C605[C5110000]12    <2>  mov byte [intprob], i
  1438 00000DEF E99C000000          <2>  jmp unhand2
  1439                              <2>  %assign i i+1
  1440 00000DF4 C605[C5110000]13    <2>  mov byte [intprob], i
  1441 00000DFB E990000000          <2>  jmp unhand2
  1442                              <2>  %assign i i+1
  1443 00000E00 C605[C5110000]14    <2>  mov byte [intprob], i
  1444 00000E07 E984000000          <2>  jmp unhand2
  1445                              <2>  %assign i i+1
  1446 00000E0C C605[C5110000]15    <2>  mov byte [intprob], i
  1447 00000E13 E978000000          <2>  jmp unhand2
  1448                              <2>  %assign i i+1
  1449 00000E18 C605[C5110000]16    <2>  mov byte [intprob], i
  1450 00000E1F E96C000000          <2>  jmp unhand2
  1451                              <2>  %assign i i+1
  1452 00000E24 C605[C5110000]17    <2>  mov byte [intprob], i
  1453 00000E2B E960000000          <2>  jmp unhand2
  1454                              <2>  %assign i i+1
  1455 00000E30 C605[C5110000]18    <2>  mov byte [intprob], i
  1456 00000E37 E954000000          <2>  jmp unhand2
  1457                              <2>  %assign i i+1
  1458 00000E3C C605[C5110000]19    <2>  mov byte [intprob], i
  1459 00000E43 E948000000          <2>  jmp unhand2
  1460                              <2>  %assign i i+1
  1461 00000E48 C605[C5110000]1A    <2>  mov byte [intprob], i
  1462 00000E4F E93C000000          <2>  jmp unhand2
  1463                              <2>  %assign i i+1
  1464 00000E54 C605[C5110000]1B    <2>  mov byte [intprob], i
  1465 00000E5B E930000000          <2>  jmp unhand2
  1466                              <2>  %assign i i+1
  1467 00000E60 C605[C5110000]1C    <2>  mov byte [intprob], i
  1468 00000E67 E924000000          <2>  jmp unhand2
  1469                              <2>  %assign i i+1
  1470 00000E6C C605[C5110000]1D    <2>  mov byte [intprob], i
  1471 00000E73 E918000000          <2>  jmp unhand2
  1472                              <2>  %assign i i+1
  1473 00000E78 C605[C5110000]1E    <2>  mov byte [intprob], i
  1474 00000E7F E90C000000          <2>  jmp unhand2
  1475                              <2>  %assign i i+1
  1476 00000E84 C605[C5110000]1F    <2>  mov byte [intprob], i
  1477 00000E8B E900000000          <2>  jmp unhand2
  1478                              <2>  %assign i i+1
  1479                              <1> unhand2:
  1480 00000E90 FA                  <1> 	cli
  1481 00000E91 1E                  <1> 	push ds
  1482 00000E92 06                  <1> 	push es
  1483 00000E93 0FA0                <1> 	push fs
  1484 00000E95 0FA8                <1> 	push gs
  1485 00000E97 16                  <1> 	push ss
  1486 00000E98 60                  <1> 	pushad
  1487                              <1> %ifdef gui.included
  1488 00000E99 803D[B8980000]00    <1> 	cmp byte [guion], 0
  1489 00000EA0 0F8432000000        <1> 	je near noguiunhandstuff
  1490 00000EA6 66C705[BF110000]08- <1> 	mov word [locunhandy], 8
  1491 00000EAE 00                  <1>
  1492 00000EAF 66C705[C1110000]08- <1> 	mov word [locunhandx], 8
  1493 00000EB7 00                  <1>
  1494 00000EB8 668B1D[B66A0000]    <1> 	mov bx, [background]
  1495 00000EBF 66891D[C3110000]    <1> 	mov [backgroundcache], bx
  1496 00000EC6 C605[27560000]01    <1> 	mov byte [mousedisabled],1
  1497 00000ECD 66BB00F8            <1> 	mov bx, 1111100000000000b
  1498 00000ED1 66891D[B66A0000]    <1> 	mov [background], bx
  1499                              <1> noguiunhandstuff:
  1500                              <1> %endif
  1501 00000ED8 89E6                <1> 	mov esi, esp
  1502 00000EDA 8935[B3110000]      <1> 	mov [espfirst], esi
  1503 00000EE0 81C6BC000000        <1> 	add esi, ((unhndrgend - unhndrg)/15)*4
  1504 00000EE6 8935[AF110000]      <1> 	mov [esploc], esi
  1505 00000EEC BE[D4110000]        <1> 	mov esi, unhandmsg
  1506 00000EF1 8935[B7110000]      <1> 	mov [esiloc], esi
  1507 00000EF7 31C9                <1> 	xor ecx, ecx
  1508 00000EF9 8A0D[C5110000]      <1> 	mov cl, [intprob]
  1509 00000EFF BB[A3150000]        <1> 	mov ebx, errortypes
  1510 00000F04 C1E102              <1> 	shl ecx, 2
  1511 00000F07 01CB                <1> 	add ebx, ecx
  1512 00000F09 81FB[E3150000]      <1> 	cmp ebx, errortypesend
  1513 00000F0F 7205                <1> 	jb gooderrortype
  1514 00000F11 BB[E3150000]        <1> 	mov ebx, errortypesend
  1515                              <1> gooderrortype:
  1516 00000F16 8B33                <1> 	mov esi, [ebx]
  1517                              <1> %ifdef gui.included
  1518 00000F18 803D[B8980000]00    <1> 	cmp byte [guion], 0
  1519 00000F1F 0F842D000000        <1> 	je near errortext
  1520 00000F25 668B0D[BF110000]    <1> 	mov cx, [locunhandy]
  1521 00000F2C 668B15[C1110000]    <1> 	mov dx, [locunhandx]
  1522 00000F33 66B80100            <1> 	mov ax, 1
  1523 00000F37 6631DB              <1> 	xor bx, bx
  1524 00000F3A E81A610000          <1> 	call showstring2
  1525 00000F3F 66890D[BF110000]    <1> 	mov [locunhandy], cx
  1526 00000F46 668915[C1110000]    <1> 	mov [locunhandx], dx
  1527 00000F4D E905000000          <1> 	jmp errortextdone
  1528                              <1> %endif
  1529                              <1> errortext:
  1530 00000F52 E8E70D0000          <1> 	call print		;;get the error message and print it
  1531                              <1> errortextdone:
  1532 00000F57 31C9                <1> 	xor ecx, ecx
  1533 00000F59 8A0D[C5110000]      <1> 	mov cl, [intprob]
  1534 00000F5F E8E4010000          <1> 	call expdump
  1535                              <1> dumpstack:
  1536 00000F64 8B35[AF110000]      <1> 	mov esi, [esploc]
  1537 00000F6A 39E6                <1> 	cmp esi, esp
  1538 00000F6C 7219                <1> 	jb donedump
  1539 00000F6E 368B0E              <1> 	mov ecx, [ss:esi]
  1540 00000F71 81EE04000000        <1> 	sub esi, 4
  1541 00000F77 8935[AF110000]      <1> 	mov [esploc], esi
  1542 00000F7D E8C6010000          <1> 	call expdump
  1543 00000F82 E9DDFFFFFF          <1> 	jmp dumpstack
  1544                              <1> donedump:
  1545 00000F87 0F20C1              <1> 	mov ecx, cr0
  1546 00000F8A E8B9010000          <1> 	call expdump
  1547 00000F8F 0F20D1              <1> 	mov ecx, cr2
  1548 00000F92 E8B1010000          <1> 	call expdump
  1549 00000F97 0F20D9              <1> 	mov ecx, cr3
  1550 00000F9A E8A9010000          <1> 	call expdump
  1551 00000F9F 0F20E1              <1> 	mov ecx, cr4
  1552 00000FA2 E8A1010000          <1> 	call expdump
  1553 00000FA7 0F00C9              <1> 	str ecx
  1554 00000FAA E899010000          <1> 	call expdump
  1555 00000FAF 0F010D[CE110000]    <1> 	sidt [igdtcache]
  1556 00000FB6 8B0D[D0110000]      <1> 	mov ecx, [igdtcache + 2]
  1557 00000FBC E887010000          <1> 	call expdump
  1558 00000FC1 0F0105[CE110000]    <1> 	sgdt [igdtcache]
  1559 00000FC8 8B0D[D0110000]      <1> 	mov ecx, [igdtcache + 2]
  1560 00000FCE E875010000          <1> 	call expdump
  1561 00000FD3 0F00C1              <1> 	sldt ecx
  1562 00000FD6 E86D010000          <1> 	call expdump
  1563 00000FDB 8B35[AF110000]      <1> 	mov esi, [esploc]
  1564 00000FE1 368B7C2434          <1> 	mov edi, [ss:esp + 52]
  1565 00000FE6 81C710000000        <1> 	add edi, 16
  1566 00000FEC 893D[CA110000]      <1> 	mov [codelocend], edi
  1567 00000FF2 81EF20000000        <1> 	sub edi, 32
  1568                              <1> dumpcodeloop:
  1569 00000FF8 893D[C6110000]      <1> 	mov [codeloc], edi
  1570 00000FFE 8B0F                <1> 	mov ecx, [edi]
  1571 00001000 E843010000          <1> 	call expdump
  1572 00001005 8B3D[C6110000]      <1> 	mov edi, [codeloc]
  1573 0000100B 81C704000000        <1> 	add edi, 4
  1574 00001011 3B3D[CA110000]      <1> 	cmp edi, [codelocend]
  1575 00001017 72DF                <1> 	jb dumpcodeloop
  1576 00001019 BE[D9100000]        <1> 	mov esi, backtoosmsg
  1577                              <1> %ifdef gui.included
  1578 0000101E 803D[B8980000]00    <1> 	cmp byte [guion], 0
  1579 00001025 741F                <1> 	je backtomsg
  1580                              <1> guibacktomsg:
  1581 00001027 668B15[C1110000]    <1> 	mov dx, [locunhandx]
  1582 0000102E 668B0D[BF110000]    <1> 	mov cx, [locunhandy]
  1583 00001035 66B80100            <1> 	mov ax, 1
  1584 00001039 6631DB              <1> 	xor bx, bx
  1585 0000103C E818600000          <1> 	call showstring2
  1586 00001041 E905000000          <1> 	jmp backtomsgdone
  1587                              <1> backtomsg:
  1588                              <1> %endif
  1589 00001046 E8F30C0000          <1> 	call print
  1590                              <1> backtomsgdone:
  1591 0000104B 30C0                <1> 	xor al, al
  1592 0000104D E8CB110000          <1> 	call rdcharint
  1593 00001052 803D[C5110000]03    <1> 	cmp byte [intprob], 3
  1594 00001059 7541                <1> 	jne nodebugint
  1595                              <1> %ifdef gui.included
  1596 0000105B 803D[B8980000]00    <1> 	cmp byte [guion], 0
  1597 00001062 7427                <1> 	je nodebuggui
  1598 00001064 668B1D[C3110000]    <1> 	mov bx, [backgroundcache]
  1599 0000106B 66891D[B66A0000]    <1> 	mov [background], bx
  1600 00001072 6631DB              <1> 	xor bx, bx
  1601 00001075 C605[27560000]00    <1> 	mov byte [mousedisabled], 0
  1602 0000107C E8B4590000          <1> 	call guiclear
  1603 00001081 E8345A0000          <1> 	call reloadallgraphics
  1604 00001086 E845150000          <1> 	call termcopy
  1605                              <1> nodebuggui:
  1606                              <1> %endif
  1607 0000108B 8B35[B3110000]      <1> 	mov esi, [espfirst]
  1608 00001091 89F4                <1> 	mov esp, esi
  1609 00001093 61                  <1> 	popad
  1610 00001094 17                  <1> 	pop ss
  1611 00001095 0FA9                <1> 	pop gs
  1612 00001097 0FA1                <1> 	pop fs
  1613 00001099 07                  <1> 	pop es
  1614 0000109A 1F                  <1> 	pop ds
  1615 0000109B CF                  <1> 	iret
  1616                              <1> nodebugint:
  1617 0000109C 61                  <1> 	popad
  1618 0000109D 17                  <1> 	pop ss
  1619 0000109E 0FA9                <1> 	pop gs
  1620 000010A0 0FA1                <1> 	pop fs
  1621 000010A2 07                  <1> 	pop es
  1622 000010A3 1F                  <1> 	pop ds
  1623                              <1> %ifdef gui.included
  1624 000010A4 803D[B8980000]00    <1> 	cmp byte [guion], 0
  1625 000010AB 7427                <1> 	je returnunhandgui
  1626 000010AD 668B1D[C3110000]    <1> 	mov bx, [backgroundcache]
  1627 000010B4 66891D[B66A0000]    <1> 	mov [background], bx
  1628 000010BB 6631DB              <1> 	xor bx, bx
  1629 000010BE C605[27560000]00    <1> 	mov byte [mousedisabled], 0
  1630 000010C5 E86B590000          <1> 	call guiclear
  1631 000010CA E8EB590000          <1> 	call reloadallgraphics
  1632 000010CF E8FC140000          <1> 	call termcopy
  1633                              <1> %endif
  1634                              <1> returnunhandgui:
  1635 000010D4 E92C190000          <1> 	jmp nwcmd
  1636 000010D9 506C6561736520706F- <1> backtoosmsg db "Please post any problems in the Issues section at solleros.googlecode.com",10
  1637 000010E2 737420616E79207072- <1>
  1638 000010EB 6F626C656D7320696E- <1>
  1639 000010F4 207468652049737375- <1>
  1640 000010FD 65732073656374696F- <1>
  1641 00001106 6E20617420736F6C6C- <1>
  1642 0000110F 65726F732E676F6F67- <1>
  1643 00001118 6C65636F64652E636F- <1>
  1644 00001121 6D0A                <1>
  1645 00001123 507265737320616E79- <1> 			db "Press any key to return to SollerOS",10,0
  1646 0000112C 206B657920746F2072- <1>
  1647 00001135 657475726E20746F20- <1>
  1648 0000113E 536F6C6C65724F530A- <1>
  1649 00001147 00                  <1>
  1650                              <1> expdump:
  1651 00001148 8B35[B7110000]      <1> 	mov esi, [esiloc]
  1652 0000114E 89F7                <1> 	mov edi, esi
  1653 00001150 81C70F000000        <1> 	add edi, 15
  1654 00001156 81C604000000        <1> 	add esi, 4
  1655 0000115C 893D[B7110000]      <1> 	mov [esiloc], edi
  1656 00001162 81EF03000000        <1> 	sub edi, 3
  1657 00001168 E8351D0000          <1> 	call converthex
  1658 0000116D 81EE04000000        <1> 	sub esi, 4
  1659                              <1> %ifdef gui.included
  1660 00001173 803D[B8980000]00    <1> 	cmp byte [guion], 0
  1661 0000117A 0F8429000000        <1> 	je near expdumptext
  1662 00001180 668B0D[BF110000]    <1> 	mov cx, [locunhandy]
  1663 00001187 668B15[C1110000]    <1> 	mov dx, [locunhandx]
  1664 0000118E 66B80100            <1> 	mov ax, 1
  1665 00001192 6631DB              <1> 	xor bx, bx
  1666 00001195 E8BF5E0000          <1> 	call showstring2
  1667 0000119A 66890D[BF110000]    <1> 	mov [locunhandy], cx
  1668 000011A1 668915[C1110000]    <1> 	mov [locunhandx], dx
  1669 000011A8 C3                  <1> 	ret
  1670                              <1> %endif
  1671                              <1> expdumptext:
  1672 000011A9 E8900B0000          <1> 	call print
  1673 000011AE C3                  <1> 	ret
  1674 000011AF 00000000            <1> esploc dd 0
  1675 000011B3 00000000            <1> espfirst dd 0
  1676 000011B7 00000000            <1> esiloc dd 0
  1677 000011BB 00000000            <1> esiregbuf dd 0
  1678 000011BF 0100                <1> locunhandy dw 1
  1679 000011C1 0100                <1> locunhandx dw 1
  1680 000011C3 0000                <1> backgroundcache dw 0
  1681 000011C5 00                  <1> intprob db 0
  1682 000011C6 00000000            <1> codeloc dd 0
  1683 000011CA 00000000            <1> codelocend dd 0
  1684 000011CE 000000000000        <1> igdtcache dw 0,0,0
  1685                              <1> 	unhandmsg:	
  1686 000011D4 494E543D3030303030- <1> 			db "INT=00000000",255,10,0
  1687 000011DD 303030FF0A00        <1>
  1688                              <1> unhndrg:
  1689 000011E3 FFFFFFFF3030303030- <1> 	times 7 db 255,255,255,255,"00000000  ",0	;;this dumps the stack before the stack frame in question
  1690 000011EC 303030202000<rept>  <1>
  1691 0000124C FFFFFFFF3030303030- <1> 			db 255,255,255,255,"00000000",255,10,0
  1692 00001255 303030FF0A00        <1>
  1693 0000125B FFFFFFFF3030303030- <1> 	times 7 db 255,255,255,255,"00000000  ",0	;;this dumps the stack before the stack frame in question
  1694 00001264 303030202000<rept>  <1>
  1695 000012C4 FFFFFFFF3030303030- <1> 			db 255,255,255,255,"00000000",255,10,0
  1696 000012CD 303030FF0A00        <1>
  1697 000012D3 FFFFFFFF3030303030- <1> 	times 7 db 255,255,255,255,"00000000  ",0	;;this dumps the stack before the stack frame in question
  1698 000012DC 303030202000<rept>  <1>
  1699 0000133C FFFFFFFF3030303030- <1> 			db 255,255,255,255,"00000000",255,10,0
  1700 00001345 303030FF0A00        <1>
  1701 0000134B FFFFFFFF3030303030- <1> 	times 7 db 255,255,255,255,"00000000  ",0	;;this dumps the stack before the stack frame in question
  1702 00001354 303030202000<rept>  <1>
  1703 000013B4 FFFFFFFF3030303030- <1> 			db 255,255,255,255,"00000000",255,10,0
  1704 000013BD 303030FF0A00        <1>
  1705                              <1> unhandregs:
  1706 000013C3 45464C3D3030303030- <1> 			db "EFL=00000000  ",0
  1707 000013CC 303030202000        <1>
  1708 000013D2 43533A3D3030303030- <1> 			db "CS:=00000000  ",0
  1709 000013DB 303030202000        <1>
  1710 000013E1 4549503D3030303030- <1> 			db "EIP=00000000",255,10,0
  1711 000013EA 303030FF0A00        <1>
  1712 000013F0 44533A3D3030303030- <1> 			db "DS:=00000000  ",0
  1713 000013F9 303030202000        <1>
  1714 000013FF 45533A3D3030303030- <1> 			db "ES:=00000000  ",0
  1715 00001408 303030202000        <1>
  1716 0000140E 46533A3D3030303030- <1> 			db "FS:=00000000  ",0
  1717 00001417 303030202000        <1>
  1718 0000141D 47533A3D3030303030- <1> 			db "GS:=00000000  ",0
  1719 00001426 303030202000        <1>
  1720 0000142C 53533A3D3030303030- <1> 			db "SS:=00000000",255,10,0
  1721 00001435 303030FF0A00        <1>
  1722 0000143B 4541583D3030303030- <1> 			db "EAX=00000000  ",0
  1723 00001444 303030202000        <1>
  1724 0000144A 4543583D3030303030- <1> 			db "ECX=00000000  ",0
  1725 00001453 303030202000        <1>
  1726 00001459 4544583D3030303030- <1> 			db "EDX=00000000  ",0
  1727 00001462 303030202000        <1>
  1728 00001468 4542583D3030303030- <1> 			db "EBX=00000000",255,10,0
  1729 00001471 303030FF0A00        <1>
  1730 00001477 4553503D3030303030- <1> 			db "ESP=00000000  ",0
  1731 00001480 303030202000        <1>
  1732 00001486 4542503D3030303030- <1> 			db "EBP=00000000  ",0
  1733 0000148F 303030202000        <1>
  1734 00001495 4553493D3030303030- <1> 			db "ESI=00000000  ",0
  1735 0000149E 303030202000        <1>
  1736 000014A4 4544493D3030303030- <1> unhndrgend:	db "EDI=00000000",255,10,0
  1737 000014AD 303030FF0A00        <1>
  1738 000014B3 4352303D3030303030- <1> 			db "CR0=00000000  ",0
  1739 000014BC 303030202000        <1>
  1740 000014C2 4352323D3030303030- <1> 			db "CR2=00000000  ",0
  1741 000014CB 303030202000        <1>
  1742 000014D1 4352333D3030303030- <1> 			db "CR3=00000000  ",0
  1743 000014DA 303030202000        <1>
  1744 000014E0 4352343D3030303030- <1> 			db "CR4=00000000",255,10,0
  1745 000014E9 303030FF0A00        <1>
  1746 000014EF 54523A3D3030303030- <1> 			db "TR:=00000000  ",0
  1747 000014F8 303030202000        <1>
  1748 000014FE 4944543D3030303030- <1> 			db "IDT=00000000  ",0
  1749 00001507 303030202000        <1>
  1750 0000150D 4744543D3030303030- <1> 			db "GDT=00000000  ",0
  1751 00001516 303030202000        <1>
  1752 0000151C 4C44543D3030303030- <1> 			db "LDT=00000000",255,10,0
  1753 00001525 303030FF0A00        <1>
  1754 0000152B FFFFFFFF3030303030- <1> unhandcode: times 2 db 255,255,255,255,"00000000  ",0	;;this dumps the code before and after the interrupt in question
  1755 00001534 303030202000<rept>  <1>
  1756 00001549 FFFFFFFF3030303030- <1> 			db 255,255,255,255,"00000000 ",255,0
  1757 00001552 30303020FF00        <1>
  1758 00001558 FFFFFF5B3030303030- <1> 			db 255,255,255,"[00000000] ",0
  1759 00001561 3030305D2000        <1>
  1760 00001567 FFFFFFFF3030303030- <1> 			times 3 db 255,255,255,255,"00000000  ",0
  1761 00001570 303030202000<rept>  <1>
  1762 00001594 FFFFFFFF3030303030- <1> 			db 255,255,255,255,"00000000",255,10,0
  1763 0000159D 303030FF0A00        <1>
  1764                              <1> unhandmsgend:
  1765                              <1> 
  1766                              <1> errortypes:
  1767 000015A3 [E7150000]          <1> 			dd err0
  1768 000015A7 [4B160000]          <1> 			dd err1
  1769 000015AB [AC160000]          <1> 			dd err2
  1770 000015AF [01170000]          <1> 			dd err3
  1771 000015B3 [65170000]          <1> 			dd err4
  1772 000015B7 [B7170000]          <1> 			dd err5
  1773 000015BB [21180000]          <1> 			dd err6
  1774 000015BF [89180000]          <1> 			dd err7
  1775 000015C3 [D3180000]          <1> 			dd err8
  1776 000015C7 [30190000]          <1> 			dd err9
  1777 000015CB [89190000]          <1> 			dd err10
  1778 000015CF [D4190000]          <1> 			dd err11
  1779 000015D3 [241A0000]          <1> 			dd err12
  1780 000015D7 [7D1A0000]          <1> 			dd err13
  1781 000015DB [E01A0000]          <1> 			dd err14
  1782 000015DF [1C1B0000]          <1> 			dd err15
  1783                              <1> errortypesend:
  1784 000015E3 [A71B0000]          <1> 			dd unknownerror
  1785                              <1> 			
  1786 000015E7 4469766973696F6E20- <1> err0	db "Division by zero:",10
  1787 000015F0 6279207A65726F3A0A  <1>
  1788 000015F9 546563686E6963616C- <1> 		db "Technically lim a",246,"x = ",236," when a is any real number. Happy Easter!",10
  1789 00001602 6C79206C696D2061F6- <1>
  1790 0000160B 78203D20EC20776865- <1>
  1791 00001614 6E206120697320616E- <1>
  1792 0000161D 79207265616C206E75- <1>
  1793 00001626 6D6265722E20486170- <1>
  1794 0000162F 707920456173746572- <1>
  1795 00001638 210A                <1>
  1796 0000163A 202020202020202020- <1> 		db "            x",26,"0",10,0
  1797 00001643 202020781A300A00    <1>
  1798                              <1> 		
  1799 0000164B 53696E676C652D7374- <1> err1	db "Single-step/Breakpoint:",10
  1800 00001654 65702F427265616B70- <1>
  1801 0000165D 6F696E743A0A        <1>
  1802 00001663 4120627265616B706F- <1> 		db "A breakpoint fault, breakpoint trap, or single-step trap was triggered.",10,0
  1803 0000166C 696E74206661756C74- <1>
  1804 00001675 2C20627265616B706F- <1>
  1805 0000167E 696E7420747261702C- <1>
  1806 00001687 206F722073696E676C- <1>
  1807 00001690 652D73746570207472- <1>
  1808 00001699 617020776173207472- <1>
  1809 000016A2 696767657265642E0A- <1>
  1810 000016AB 00                  <1>
  1811                              <1> 		
  1812 000016AC 4E6F6E6D61736B6162- <1> err2	db "Nonmaskable interrupt:",10
  1813 000016B5 6C6520696E74657272- <1>
  1814 000016BE 7570743A0A          <1>
  1815 000016C3 412068617264776172- <1> 		db "A hardware interrupt was triggered that could not be masked.",10,0
  1816 000016CC 6520696E7465727275- <1>
  1817 000016D5 707420776173207472- <1>
  1818 000016DE 696767657265642074- <1>
  1819 000016E7 68617420636F756C64- <1>
  1820 000016F0 206E6F74206265206D- <1>
  1821 000016F9 61736B65642E0A00    <1>
  1822                              <1> 		
  1823 00001701 427265616B706F696E- <1> err3	db "Breakpoint:",10
  1824 0000170A 743A0A              <1>
  1825 0000170D 5468697320696E7465- <1> 		db "This interrupt is used in programs to show the stack and registers and can be",10
  1826 00001716 727275707420697320- <1>
  1827 0000171F 7573656420696E2070- <1>
  1828 00001728 726F6772616D732074- <1>
  1829 00001731 6F2073686F77207468- <1>
  1830 0000173A 6520737461636B2061- <1>
  1831 00001743 6E6420726567697374- <1>
  1832 0000174C 65727320616E642063- <1>
  1833 00001755 616E2062650A        <1>
  1834 0000175B 69676E6F7265642E0A- <1> 		db "ignored.",10,0
  1835 00001764 00                  <1>
  1836                              <1> 		
  1837 00001765 4F766572666C6F773A- <1> err4	db "Overflow:",10
  1838 0000176E 0A                  <1>
  1839 0000176F 5468652070726F6365- <1> 		db "The processor ran into an INTO instruction with the overflow flag set.",10,0
  1840 00001778 73736F722072616E20- <1>
  1841 00001781 696E746F20616E2049- <1>
  1842 0000178A 4E544F20696E737472- <1>
  1843 00001793 756374696F6E207769- <1>
  1844 0000179C 746820746865206F76- <1>
  1845 000017A5 6572666C6F7720666C- <1>
  1846 000017AE 6167207365742E0A00  <1>
  1847                              <1> 		
  1848 000017B7 426F756E6473206368- <1> err5	db "Bounds check:",10
  1849 000017C0 65636B3A0A          <1>
  1850 000017C5 5468652070726F6365- <1> 		db "The processor rebounded from a BOUND instruction run on an operand that was out",10
  1851 000017CE 73736F72207265626F- <1>
  1852 000017D7 756E6465642066726F- <1>
  1853 000017E0 6D206120424F554E44- <1>
  1854 000017E9 20696E737472756374- <1>
  1855 000017F2 696F6E2072756E206F- <1>
  1856 000017FB 6E20616E206F706572- <1>
  1857 00001804 616E64207468617420- <1>
  1858 0000180D 776173206F75740A    <1>
  1859 00001815 6F6620626F756E6473- <1> 		db "of bounds.",10,0
  1860 0000181E 2E0A00              <1>
  1861                              <1> 		
  1862 00001821 496E76616C6964206F- <1> err6	db "Invalid opcode:",10
  1863 0000182A 70636F64653A0A      <1>
  1864 00001831 5468652070726F6365- <1> 		db "The processor has no idea what it was trying to execute. Don't run SSE4 code",10
  1865 0000183A 73736F722068617320- <1>
  1866 00001843 6E6F20696465612077- <1>
  1867 0000184C 686174206974207761- <1>
  1868 00001855 7320747279696E6720- <1>
  1869 0000185E 746F20657865637574- <1>
  1870 00001867 652E20446F6E277420- <1>
  1871 00001870 72756E205353453420- <1>
  1872 00001879 636F64650A          <1>
  1873 0000187E 6F6E20343836277321- <1> 		db "on 486's!",10,0
  1874 00001887 0A00                <1>
  1875                              <1> 		
  1876 00001889 436F70726F63657373- <1> err7	db "Coprocessor not available:",10
  1877 00001892 6F72206E6F74206176- <1>
  1878 0000189B 61696C61626C653A0A  <1>
  1879 000018A4 446F6E277420796F75- <1> 		db "Don't you know they don't make those anymore!",10,0
  1880 000018AD 206B6E6F7720746865- <1>
  1881 000018B6 7920646F6E2774206D- <1>
  1882 000018BF 616B652074686F7365- <1>
  1883 000018C8 20616E796D6F726521- <1>
  1884 000018D1 0A00                <1>
  1885                              <1> 		
  1886 000018D3 446F75626C65206661- <1> err8	db "Double fault:",10
  1887 000018DC 756C743A0A          <1>
  1888 000018E1 546865206578636570- <1> 		db "The exception handler could not handle that it could not handle an exception.",10,0
  1889 000018EA 74696F6E2068616E64- <1>
  1890 000018F3 6C657220636F756C64- <1>
  1891 000018FC 206E6F742068616E64- <1>
  1892 00001905 6C6520746861742069- <1>
  1893 0000190E 7420636F756C64206E- <1>
  1894 00001917 6F742068616E646C65- <1>
  1895 00001920 20616E206578636570- <1>
  1896 00001929 74696F6E2E0A00      <1>
  1897                              <1> 		
  1898 00001930 436F70726F63657373- <1> err9	db "Coprocessor segment overrun:",10,0
  1899 00001939 6F72207365676D656E- <1>
  1900 00001942 74206F76657272756E- <1>
  1901 0000194B 3A0A00              <1>
  1902 0000194E 54686973206E657665- <1> 		db "This never happens in modern computers, and never should.",10,0
  1903 00001957 722068617070656E73- <1>
  1904 00001960 20696E206D6F646572- <1>
  1905 00001969 6E20636F6D70757465- <1>
  1906 00001972 72732C20616E64206E- <1>
  1907 0000197B 657665722073686F75- <1>
  1908 00001984 6C642E0A00          <1>
  1909                              <1> 
  1910 00001989 496E76616C69642054- <1> err10	db "Invalid TSS:",10
  1911 00001992 53533A0A            <1>
  1912 00001996 546865205453532074- <1> 		db "The TSS that was switched to is invalid. Nothing funny here.",10,0
  1913 0000199F 686174207761732073- <1>
  1914 000019A8 776974636865642074- <1>
  1915 000019B1 6F20697320696E7661- <1>
  1916 000019BA 6C69642E204E6F7468- <1>
  1917 000019C3 696E672066756E6E79- <1>
  1918 000019CC 20686572652E0A00    <1>
  1919                              <1> 		
  1920 000019D4 5365676D656E74206E- <1> err11	db "Segment not present:",10
  1921 000019DD 6F742070726573656E- <1>
  1922 000019E6 743A0A              <1>
  1923 000019E9 546865207072657365- <1> 		db "The present bit of the segment descriptor is set to zero.",10,0
  1924 000019F2 6E7420626974206F66- <1>
  1925 000019FB 20746865207365676D- <1>
  1926 00001A04 656E74206465736372- <1>
  1927 00001A0D 6970746F7220697320- <1>
  1928 00001A16 73657420746F207A65- <1>
  1929 00001A1F 726F2E0A00          <1>
  1930                              <1> 		
  1931 00001A24 537461636B20657863- <1> err12	db "Stack exception:",10
  1932 00001A2D 657074696F6E3A0A    <1>
  1933 00001A35 546865205353206465- <1> 		db "The SS descriptor is invalid or not present or its limit is too small.",10,0
  1934 00001A3E 7363726970746F7220- <1>
  1935 00001A47 697320696E76616C69- <1>
  1936 00001A50 64206F72206E6F7420- <1>
  1937 00001A59 70726573656E74206F- <1>
  1938 00001A62 7220697473206C696D- <1>
  1939 00001A6B 697420697320746F6F- <1>
  1940 00001A74 20736D616C6C2E0A00  <1>
  1941                              <1> 		
  1942 00001A7D 47656E6572616C2070- <1> err13	db "General protection violation:",10
  1943 00001A86 726F74656374696F6E- <1>
  1944 00001A8F 2076696F6C6174696F- <1>
  1945 00001A98 6E3A0A              <1>
  1946 00001A9B 596F752076696F6C61- <1> 		db "You violated the computer. Step away slowly. The FBI is on its way.",10,0
  1947 00001AA4 746564207468652063- <1>
  1948 00001AAD 6F6D70757465722E20- <1>
  1949 00001AB6 537465702061776179- <1>
  1950 00001ABF 20736C6F776C792E20- <1>
  1951 00001AC8 546865204642492069- <1>
  1952 00001AD1 73206F6E2069747320- <1>
  1953 00001ADA 7761792E0A00        <1>
  1954                              <1> 		
  1955 00001AE0 50616765206661756C- <1> err14	db "Page fault:",10
  1956 00001AE9 743A0A              <1>
  1957 00001AEC 546865207061676520- <1> 		db "The page that was requested was not available.",10,0
  1958 00001AF5 746861742077617320- <1>
  1959 00001AFE 726571756573746564- <1>
  1960 00001B07 20776173206E6F7420- <1>
  1961 00001B10 617661696C61626C65- <1>
  1962 00001B19 2E0A00              <1>
  1963                              <1> 		
  1964 00001B1C 526573657276656420- <1> err15	db "Reserved for Plan R:",10
  1965 00001B25 666F7220506C616E20- <1>
  1966 00001B2E 523A0A              <1>
  1967 00001B31 5468697320696E7465- <1> 		db "This interrupt is reserved for usage only by the military when it is necessary",10
  1968 00001B3A 727275707420697320- <1>
  1969 00001B43 726573657276656420- <1>
  1970 00001B4C 666F72207573616765- <1>
  1971 00001B55 206F6E6C7920627920- <1>
  1972 00001B5E 746865206D696C6974- <1>
  1973 00001B67 617279207768656E20- <1>
  1974 00001B70 6974206973206E6563- <1>
  1975 00001B79 6573736172790A      <1>
  1976 00001B80 746F20696E69746961- <1> 		db "to initiate a full-scale coup d'",130,"tat.",10,0
  1977 00001B89 746520612066756C6C- <1>
  1978 00001B92 2D7363616C6520636F- <1>
  1979 00001B9B 757020642782746174- <1>
  1980 00001BA4 2E0A00              <1>
  1981                              <1> 		
  1982 00001BA7 576861742074686520- <1> unknownerror db "What the hell just happened? Is everyone okay? Hard drive? Video card?",10
  1983 00001BB0 68656C6C206A757374- <1>
  1984 00001BB9 2068617070656E6564- <1>
  1985 00001BC2 3F2049732065766572- <1>
  1986 00001BCB 796F6E65206F6B6179- <1>
  1987 00001BD4 3F2048617264206472- <1>
  1988 00001BDD 6976653F2056696465- <1>
  1989 00001BE6 6F20636172643F0A    <1>
  1990 00001BEE 4D656D6F72793F2041- <1> 			db	"Memory? Are you there?",10,0
  1991 00001BF7 726520796F75207468- <1>
  1992 00001C00 6572653F0A00        <1>
  1993                              <1> %else
  1994                              <1> unhand:	
  1995                              <1> 	%assign i 0
  1996                              <1> 	%rep 32
  1997                              <1> 	mov byte [intprob], i
  1998                              <1> 	jmp unhand2
  1999                              <1> 	%assign i i+1
  2000                              <1> 	%endrep
  2001                              <1> unhand2:
  2002                              <1> 	cmp byte [intprob], 3
  2003                              <1> 	je handled	;if it is a debug interrupt, it is auto handled
  2004                              <1> 	mov ebx, 0xDEADCD00 ;this shows that an exception occured even though more detailed info cannot be shown
  2005                              <1> 						;CD stands for the interrupt code, DEAD shows that the program died because of the int
  2006                              <1> 	mov bl, [intprob]
  2007                              <1> 	jmp exitprog
  2008                              <1> intprob db 0
  2009                              <1> %endif
  2010                                      %include "source/ints.asm"
  2011                              <1> newints:	;for great justice
  2012 00001C06 80FC00              <1> 	cmp ah, 0
  2013 00001C09 0F847F000000        <1> 	je near intx0   ;kills app
  2014 00001C0F 80FC01              <1> 	cmp ah, 1
  2015 00001C12 0F84FE000000        <1> 	je near intx1   ;print string
  2016 00001C18 80FC02              <1> 	cmp ah, 2
  2017 00001C1B 0F8453010000        <1> 	je near intx2	;read string
  2018 00001C21 80FC03              <1> 	cmp ah, 3
  2019 00001C24 0F8473010000        <1> 	je near intx3	;clear screen
  2020 00001C2A 80FC04              <1> 	cmp ah, 4
  2021 00001C2D 0F84E8010000        <1> 	je near intx4	;read and print string
  2022 00001C33 80FC05              <1> 	cmp ah, 5
  2023 00001C36 0F84D5050000        <1> 	je near intx5	;get char
  2024 00001C3C 80FC06              <1> 	cmp ah, 6
  2025 00001C3F 0F8427060000        <1> 	je near intx6	;print char
  2026 00001C45 80FC07              <1> 	cmp ah, 7
  2027 00001C48 0F8412080000        <1> 	je near intx7	;read file
  2028                              <1> ;	cmp ah, 8
  2029                              <1> ;	je near intx8	;write file
  2030 00001C4E 80FC09              <1> 	cmp ah, 9
  2031 00001C51 0F8413080000        <1> 	je near intx9	;convert number to string
  2032 00001C57 80FC0A              <1> 	cmp ah, 10
  2033 00001C5A 0F8422080000        <1> 	je near intx10	;convert string to number
  2034                              <1> %ifdef threads.included
  2035 00001C60 80FC0B              <1> 	cmp ah, 11
  2036 00001C63 0F8423080000        <1> 	je near intx11	;create thread
  2037                              <1> %endif
  2038 00001C69 80FC0C              <1> 	cmp ah, 12
  2039 00001C6C 0F84F1080000        <1> 	je near intx12	;get time
  2040 00001C72 80FC0D              <1> 	cmp ah, 13
  2041 00001C75 0F84FD080000        <1> 	je near intx13	;set time
  2042 00001C7B 80FC0E              <1> 	cmp ah, 14
  2043 00001C7E 0F8404090000        <1> 	je near intx14	;run program
  2044 00001C84 80FC0F              <1> 	cmp ah, 15
  2045 00001C87 0F8410090000        <1> 	je near intx15	;get program info-location of name/options/number of options/environmental vars
  2046 00001C8D C3                  <1> 	ret
  2047                              <1> 	
  2048                              <1> ;;the jmp timerinterrupt's ensure that task switches occur
  2049                              <1> intx0:
  2050                              <1> 	%include 'source/interrupts/0_exit.asm'
  2051                              <2> exitprog:
  2052 00001C8E 66B83000            <2> 	mov ax, NEW_DATA_SEL
  2053 00001C92 8ED8                <2> 	mov ds, ax
  2054 00001C94 8EC0                <2> 	mov es, ax
  2055 00001C96 8EE0                <2> 	mov fs, ax
  2056 00001C98 66B82000            <2> 	mov ax, SYS_DATA_SEL
  2057 00001C9C 8EE8                <2> 	mov gs, ax
  2058 00001C9E C705[CF640000]0000- <2> 	mov dword [currentthread], 0
  2059 00001CA6 0000                <2>
  2060 00001CA8 C705[CA640000]0400- <2> 	mov dword [lastthread], 4
  2061 00001CB0 0000                <2>
  2062 00001CB2 C605[CE640000]00    <2> 	mov byte [threadson], 0 ;for now i need to use this
  2063 00001CB9 8B25[FEAE0000]      <2> 	mov esp, [previousstack] ;and this
  2064 00001CBF 81FB00000000        <2> 	cmp ebx, 0
  2065 00001CC5 0F8501000000        <2> 	jne near .error
  2066 00001CCB C3                  <2> 	ret
  2067                              <2> .error:
  2068 00001CCC 89D9                <2> 	mov ecx, ebx
  2069 00001CCE B006                <2> 	mov al, 6
  2070 00001CD0 A2[032F0000]        <2> 	mov [firsthexshown], al
  2071 00001CD5 51                  <2> 	push ecx
  2072 00001CD6 BE[F11C0000]        <2> 	mov esi, .msg1
  2073 00001CDB E840000000          <2> 	call printhighlight
  2074 00001CE0 59                  <2> 	pop ecx
  2075 00001CE1 E832120000          <2> 	call showhex
  2076 00001CE6 BE[061D0000]        <2> 	mov esi, .msg2
  2077 00001CEB E830000000          <2> 	call printhighlight
  2078 00001CF0 C3                  <2> 	ret
  2079                              <2> 	
  2080 00001CF1 416E20657869742073- <2> .msg1 db "An exit status of 0x",0
  2081 00001CFA 7461747573206F6620- <2>
  2082 00001D03 307800              <2>
  2083 00001D06 087761732072657475- <2> .msg2 db 8,"was returned.",10,0
  2084 00001D0F 726E65642E0A00      <2>
  2085                              <1> intx1:
  2086                              <1> 	%include 'source/interrupts/1_prntstr.asm'
  2087 00001D16 E82A000000          <2> call printint
  2088 00001D1B E989E5FFFF          <2> jmp timerinterrupt
  2089                              <2> 
  2090                              <2> 	printhighlight:
  2091 00001D20 6631C0              <2> 		xor ax, ax
  2092 00001D23 66BBF000            <2> 		mov bx, 0xF0
  2093 00001D27 E919000000          <2> 		jmp printint
  2094                              <2> 	printquiet:
  2095 00001D2C 6631C0              <2> 		xor ax, ax
  2096 00001D2F A2[731D0000]        <2> 		mov [endkeyprint], al
  2097 00001D34 66BB0700            <2> 		mov bx, 7
  2098 00001D38 E820000000          <2> 		call printint.b
  2099 00001D3D C3                  <2> 		ret
  2100                              <2>     print:
  2101 00001D3E 6631C0              <2> 		xor ax, ax
  2102 00001D41 66BB0700            <2> 		mov bx, 7
  2103                              <2> 	printint:	;;print line, al=last key,bl=modifier, esi=buffer
  2104 00001D45 56                  <2> 		push esi
  2105 00001D46 A2[731D0000]        <2> 		mov [endkeyprint], al
  2106 00001D4B E80D000000          <2> 		call .b
  2107 00001D50 89F1                <2> 		mov ecx, esi
  2108 00001D52 5F                  <2> 		pop edi
  2109 00001D53 29F9                <2> 		sub ecx, edi
  2110 00001D55 51                  <2> 		push ecx
  2111 00001D56 E875080000          <2> 		call termcopy
  2112 00001D5B 59                  <2> 		pop ecx
  2113 00001D5C C3                  <2> 		ret
  2114                              <2> 	.b:
  2115 00001D5D 8A06                <2> 		mov al, [esi]
  2116 00001D5F 3A05[731D0000]      <2> 		cmp al, [endkeyprint]
  2117 00001D65 740B                <2> 		je .done
  2118 00001D67 E825050000          <2> 		call prcharq
  2119 00001D6C 46                  <2> 		inc esi
  2120 00001D6D E9EBFFFFFF          <2> 		jmp .b
  2121                              <2> 	.done:
  2122 00001D72 C3                  <2> 		ret
  2123                              <2> 
  2124 00001D73 00                  <2> endkeyprint db 0
  2125                              <1> intx2:
  2126                              <1> 	%include 'source/interrupts/2_readstr.asm'
  2127 00001D74 E805000000          <2> call readint
  2128 00001D79 E92BE5FFFF          <2> jmp timerinterrupt
  2129                              <2> 
  2130                              <2> 	readint:	;;get line, al=last key, esi = buffer, edi = endbuffer	
  2131 00001D7E 89C3                <2> 		mov ebx, eax
  2132                              <2> 	.b:
  2133 00001D80 53                  <2> 		push ebx
  2134 00001D81 57                  <2> 		push edi
  2135 00001D82 56                  <2> 		push esi
  2136 00001D83 30C0                <2> 		xor al, al
  2137 00001D85 E893040000          <2> 		call rdcharint
  2138 00001D8A 5E                  <2> 		pop esi
  2139 00001D8B 8806                <2> 		mov [esi], al
  2140 00001D8D 46                  <2> 		inc esi
  2141 00001D8E 5F                  <2> 		pop edi
  2142 00001D8F 5B                  <2> 		pop ebx
  2143 00001D90 39FE                <2> 		cmp esi, edi
  2144 00001D92 7304                <2> 		jae .done
  2145 00001D94 38D8                <2> 		cmp al, bl
  2146 00001D96 75E8                <2> 		jne .b
  2147                              <2> 	.done:
  2148 00001D98 4E                  <2> 		dec esi
  2149 00001D99 C60600              <2> 		mov byte [esi], 0
  2150 00001D9C C3                  <2> 		ret
  2151                              <1> intx3:
  2152                              <1> 	%include 'source/interrupts/3_clearscrn.asm'
  2153 00001D9D E805000000          <2> call clear
  2154 00001DA2 E902E5FFFF          <2> jmp timerinterrupt
  2155                              <2> %ifdef io.serial
  2156                              <2> clear:
  2157                              <2> 	ret
  2158                              <2> %else
  2159                              <2> clear:		
  2160 00001DA7 668B0D[5C240000]    <2> 		mov cx, [charxy]
  2161 00001DAE BF[94E02800]        <2> 		mov edi, videobuf
  2162 00001DB3 6631C0              <2> 		xor ax, ax
  2163 00001DB6 66A3[56240000]      <2> 		mov [linebeginpos], ax
  2164 00001DBC 66A3[58240000]      <2> 		mov [videobufpos], ax
  2165 00001DC2 6631D2              <2> 		xor dx, dx
  2166 00001DC5 66A3[5A240000]      <2> 		mov [charpos], ax
  2167 00001DCB B407                <2> 		mov ah, 7
  2168                              <2> 	clearb:
  2169 00001DCD 668907              <2> 		mov [edi], ax
  2170 00001DD0 81C702000000        <2> 		add edi, 2
  2171 00001DD6 FEC9                <2> 		dec cl
  2172 00001DD8 80F900              <2> 		cmp cl, 0
  2173 00001DDB 75F0                <2> 		jne clearb
  2174 00001DDD 8A0D[5C240000]      <2> 		mov cl, [charxy]
  2175 00001DE3 FECD                <2> 		dec ch
  2176 00001DE5 80FD00              <2> 		cmp ch, 0
  2177 00001DE8 75E3                <2> 		jne clearb
  2178                              <2> 	cleardouble:
  2179 00001DEA BF[384B2900]        <2> 		mov edi, videobuf2
  2180 00001DEF 668B0D[5C240000]    <2> 		mov cx, [charxy]
  2181 00001DF6 31C0                <2> 		xor eax, eax
  2182                              <2> 	clearc:
  2183 00001DF8 668907              <2> 		mov [edi], ax
  2184 00001DFB 81C702000000        <2> 		add edi, 2
  2185 00001E01 FEC9                <2> 		dec cl
  2186 00001E03 80F900              <2> 		cmp cl, 0
  2187 00001E06 75F0                <2> 		jne clearc
  2188 00001E08 8A0D[5C240000]      <2> 		mov cl, [charxy]
  2189 00001E0E FECD                <2> 		dec ch
  2190 00001E10 80FD00              <2> 		cmp ch, 0
  2191 00001E13 75E3                <2> 		jne clearc
  2192 00001E15 E8B6070000          <2> 		call termcopy
  2193 00001E1A C3                  <2> 		ret
  2194                              <2> %endif
  2195                              <2> 		
  2196                              <1> intx4:
  2197                              <1> 	%include 'source/interrupts/4_prntreadstr.asm'
  2198 00001E1B E809000000          <2> call rdprint
  2199 00001E20 E984E4FFFF          <2> jmp timerinterrupt
  2200                              <2> 
  2201                              <2> readline:
  2202 00001E25 B00A                <2>   mov al, 10
  2203 00001E27 B307                <2>   mov bl, 7
  2204                              <2> 	rdprint:	;;print and get line, al=last key, bl=modifier, esi=buffer, edi=bufferend
  2205 00001E29 8935[06220000]      <2> 		mov [buftxtloc], esi
  2206 00001E2F A2[FE210000]        <2> 		mov [endkeyrdpr], al
  2207 00001E34 881D[FF210000]      <2> 		mov [modkeyrdpr], bl
  2208 00001E3A 8935[00220000]      <2> 		mov [firstesirdpr], esi
  2209 00001E40 893D[0A220000]      <2> 		mov [endbufferrdpr], edi
  2210 00001E46 8B3D[E8B52900]      <2> 		mov edi, [commandsentered]
  2211 00001E4C 893D[E4B52900]      <2> 		mov [commandlistentries], edi
  2212                              <2> 	rdprintb:
  2213 00001E52 56                  <2> 		push esi
  2214 00001E53 B001                <2> 		mov al, 1
  2215 00001E55 E8C3030000          <2> 		call rdcharint
  2216 00001E5A 5E                  <2> 		pop esi
  2217                              <2> %ifdef io.serial
  2218                              <2> 		cmp ah, 0x41
  2219                              <2> 		je near rdprup
  2220                              <2> 		cmp ah, 0x42
  2221                              <2> 		je near rdprdown
  2222                              <2> 		cmp ah, 0x43
  2223                              <2> 		je near rdprright
  2224                              <2> 		cmp ah, 0x44
  2225                              <2> 		je near rdprleft
  2226                              <2> 		cmp ah, 0x31
  2227                              <2> 		je near rdprhome
  2228                              <2> 		cmp ah, 0x48
  2229                              <2> 		je near rdprhome
  2230                              <2> 		cmp ah, 0x46
  2231                              <2> 		je near rdprend
  2232                              <2> 		cmp ah, 0x33
  2233                              <2> 		je near rdprdel
  2234                              <2> 		cmp ah, 0x34
  2235                              <2> 		je near rdprend
  2236                              <2> %else
  2237 00001E5B 803D[135C0000]E0    <2> 		cmp byte [specialkey], 0xE0
  2238 00001E62 751B                <2> 		jne notspecialrdprnt
  2239 00001E64 80FC53              <2> 		cmp ah, 0x53
  2240 00001E67 0F8456030000        <2> 		je near rdprdel
  2241 00001E6D 80FC47              <2> 		cmp ah, 0x47
  2242 00001E70 0F840A010000        <2> 		je near rdprhome
  2243 00001E76 80FC4F              <2> 		cmp ah, 0x4F
  2244 00001E79 0F8423010000        <2> 		je near rdprend
  2245                              <2> 	notspecialrdprnt:
  2246 00001E7F 80FC50              <2> 		cmp ah, 0x50
  2247 00001E82 0F84C7010000        <2> 		je near rdprdown
  2248 00001E88 80FC4D              <2> 		cmp ah, 0x4D
  2249 00001E8B 0F8473010000        <2> 		je near rdprright
  2250 00001E91 80FC4B              <2> 		cmp ah, 0x4B
  2251 00001E94 0F8428010000        <2> 		je near rdprleft
  2252 00001E9A 80FC48              <2> 		cmp ah, 0x48
  2253 00001E9D 0F84EF010000        <2> 		je near rdprup
  2254                              <2> %endif
  2255 00001EA3 3C08                <2> 		cmp al, 8
  2256 00001EA5 0F8433030000        <2> 		je near rdprbscheck
  2257 00001EAB 3C00                <2> 		cmp al, 0
  2258 00001EAD 74A3                <2> 		je rdprintb
  2259 00001EAF 80FC00              <2> 		cmp ah, 0
  2260 00001EB2 749E                <2> 		je rdprintb
  2261 00001EB4 8806                <2> 		mov [esi], al
  2262 00001EB6 46                  <2> 		inc esi
  2263                              <2> 	bscheckequal:
  2264 00001EB7 8A1D[FF210000]      <2> 		mov bl, [modkeyrdpr]
  2265 00001EBD 8A3D[05220000]      <2> 		mov bh, [txtmask]
  2266 00001EC3 80FF00              <2> 		cmp bh, 0
  2267 00001EC6 7404                <2> 		je nomasktxt
  2268 00001EC8 88F8                <2> 		mov al, bh
  2269 00001ECA 30FF                <2> 		xor bh, bh
  2270                              <2> 	nomasktxt:
  2271 00001ECC E8AF030000          <2> 		call prcharint
  2272 00001ED1 56                  <2> 		push esi
  2273 00001ED2 66A3[FC210000]      <2> 		mov [axcache], ax
  2274 00001ED8 8A25[FE210000]      <2> 		mov ah, [endkeyrdpr]
  2275 00001EDE 38E0                <2> 		cmp al, ah
  2276 00001EE0 7429                <2> 		je nobackprintbuftxt2
  2277 00001EE2 BE[7EC10000]        <2> 		mov esi, buftxt2
  2278 00001EE7 E840FEFFFF          <2> 		call printquiet
  2279 00001EEC B020                <2> 		mov al, " "
  2280 00001EEE E89E030000          <2> 		call prcharq
  2281 00001EF3 B008                <2> 		mov al, 8
  2282 00001EF5 81FE[7EC10000]      <2> 		cmp esi, buftxt2
  2283 00001EFB 740E                <2> 		je nobackprintbuftxt2
  2284                              <2> 	backprintbuftxt2:
  2285 00001EFD E88F030000          <2> 		call prcharq
  2286 00001F02 4E                  <2> 		dec esi
  2287 00001F03 81FE[7EC10000]      <2> 		cmp esi, buftxt2
  2288 00001F09 77F2                <2> 		ja backprintbuftxt2
  2289                              <2> 	nobackprintbuftxt2:
  2290 00001F0B 3C0A                <2> 		cmp al, 10
  2291 00001F0D 7405                <2> 		je nonobackprint
  2292 00001F0F E86C030000          <2> 		call prcharint
  2293                              <2> 	nonobackprint:
  2294 00001F14 5E                  <2> 		pop esi
  2295 00001F15 3B35[0A220000]      <2> 		cmp esi, [endbufferrdpr]
  2296 00001F1B 0F8319000000        <2> 		jae near donerdprinc
  2297 00001F21 66A1[FC210000]      <2> 		mov ax, [axcache]
  2298 00001F27 8A25[FE210000]      <2> 		mov ah, [endkeyrdpr]
  2299 00001F2D 38E0                <2> 		cmp al, ah
  2300 00001F2F 0F851DFFFFFF        <2> 		jne rdprintb
  2301 00001F35 E901000000          <2> 		jmp donerdprint
  2302                              <2> 	donerdprinc:
  2303 00001F3A 46                  <2> 		inc esi
  2304                              <2> 	donerdprint:
  2305 00001F3B 4E                  <2> 		dec esi
  2306 00001F3C BF[7EC10000]        <2> 		mov edi, buftxt2
  2307                              <2> 	copylaterstuff:
  2308 00001F41 8A07                <2> 		mov al, [edi]
  2309 00001F43 3C00                <2> 		cmp al, 0
  2310 00001F45 7409                <2> 		je nocopylaterstuff
  2311 00001F47 8806                <2> 		mov [esi], al
  2312 00001F49 47                  <2> 		inc edi
  2313 00001F4A 46                  <2> 		inc esi
  2314 00001F4B E9F1FFFFFF          <2> 		jmp copylaterstuff
  2315                              <2> 	nocopylaterstuff:
  2316 00001F50 C60600              <2> 		mov byte [esi], 0
  2317 00001F53 E80B000000          <2> 		call clearbuftxt2
  2318 00001F58 89F1                <2> 		mov ecx, esi
  2319 00001F5A 8B3D[00220000]      <2> 		mov edi, [firstesirdpr]
  2320 00001F60 29F9                <2> 		sub ecx, edi
  2321 00001F62 C3                  <2> 		ret
  2322                              <2> 	
  2323                              <2> 	clearbuftxt2:
  2324 00001F63 30C0                <2> 		xor al, al
  2325 00001F65 BF[7EC10000]        <2> 		mov edi, buftxt2
  2326                              <2> 	clearbuftxt2lp:
  2327 00001F6A 8807                <2> 		mov [edi], al
  2328 00001F6C 47                  <2> 		inc edi
  2329 00001F6D 81FF[7EC50000]      <2> 		cmp edi, buftxt
  2330 00001F73 75F5                <2> 		jne clearbuftxt2lp
  2331 00001F75 C3                  <2> 		ret
  2332                              <2> 	
  2333                              <2> 	rdprintb2:
  2334 00001F76 E855060000          <2> 		call termcopy
  2335 00001F7B E9D2FEFFFF          <2> 		jmp rdprintb
  2336                              <2> 	
  2337                              <2> 	rdprhome:
  2338 00001F80 3B35[06220000]      <2> 		cmp esi, [buftxtloc]
  2339 00001F86 0F84EAFFFFFF        <2> 		je near rdprintb2
  2340 00001F8C BF[7EC10000]        <2> 		mov edi, buftxt2
  2341 00001F91 8A07                <2> 		mov al, [edi]
  2342 00001F93 E84C000000          <2> 		call shiftbuftxt2
  2343 00001F98 E8F4020000          <2> 		call prcharq
  2344 00001F9D E9DEFFFFFF          <2> 		jmp rdprhome
  2345                              <2> 		
  2346                              <2> 	rdprend:
  2347 00001FA2 BF[7EC10000]        <2> 		mov edi, buftxt2
  2348 00001FA7 8A07                <2> 		mov al, [edi]
  2349 00001FA9 3C00                <2> 		cmp al, 0
  2350 00001FAB 0F84C5FFFFFF        <2> 		je near rdprintb2
  2351 00001FB1 8806                <2> 		mov [esi], al
  2352 00001FB3 E86C000000          <2> 		call shiftbuftxt2lft
  2353 00001FB8 E8D4020000          <2> 		call prcharq
  2354 00001FBD E9E0FFFFFF          <2> 		jmp rdprend
  2355                              <2> 	
  2356                              <2> 	rdprleft:
  2357 00001FC2 3B35[06220000]      <2> 		cmp esi, [buftxtloc]
  2358 00001FC8 0F8484FEFFFF        <2> 		je near rdprintb
  2359 00001FCE BF[7EC10000]        <2> 		mov edi, buftxt2
  2360 00001FD3 8A07                <2> 		mov al, [edi]
  2361 00001FD5 E80A000000          <2> 		call shiftbuftxt2
  2362 00001FDA E8A1020000          <2> 		call prcharint
  2363 00001FDF E96EFEFFFF          <2> 		jmp rdprintb
  2364                              <2> 	shiftbuftxt2:
  2365 00001FE4 3C00                <2> 		cmp al, 0
  2366 00001FE6 740C                <2> 		je noshiftbuftxt2
  2367 00001FE8 47                  <2> 		inc edi
  2368 00001FE9 8A27                <2> 		mov ah, [edi]
  2369 00001FEB 8807                <2> 		mov [edi], al
  2370 00001FED 88E0                <2> 		mov al, ah
  2371 00001FEF E9F0FFFFFF          <2> 		jmp shiftbuftxt2
  2372                              <2> 	noshiftbuftxt2:
  2373 00001FF4 BF[7EC10000]        <2> 		mov edi, buftxt2
  2374 00001FF9 4E                  <2> 		dec esi
  2375 00001FFA 8A06                <2> 		mov al, [esi]
  2376 00001FFC 8807                <2> 		mov [edi], al
  2377 00001FFE C60600              <2> 		mov byte [esi], 0
  2378 00002001 B008                <2> 		mov al, 8
  2379 00002003 C3                  <2> 		ret
  2380                              <2> 		
  2381                              <2> 	rdprright:
  2382 00002004 BF[7EC10000]        <2> 		mov edi, buftxt2
  2383 00002009 8A07                <2> 		mov al, [edi]
  2384 0000200B 3C00                <2> 		cmp al, 0
  2385 0000200D 0F843FFEFFFF        <2> 		je near rdprintb
  2386 00002013 8806                <2> 		mov [esi], al
  2387 00002015 E80A000000          <2> 		call shiftbuftxt2lft
  2388 0000201A E861020000          <2> 		call prcharint
  2389 0000201F E92EFEFFFF          <2> 		jmp rdprintb
  2390                              <2> 	shiftbuftxt2lft:
  2391 00002024 3C00                <2> 		cmp al, 0
  2392 00002026 740B                <2> 		je noshiftbuftxt2lft
  2393 00002028 47                  <2> 		inc edi
  2394 00002029 8A07                <2> 		mov al, [edi]
  2395 0000202B 8847FF              <2> 		mov [edi - 1], al
  2396 0000202E E9F1FFFFFF          <2> 		jmp shiftbuftxt2lft
  2397                              <2> 	noshiftbuftxt2lft:
  2398 00002033 8A06                <2> 		mov al, [esi]
  2399 00002035 46                  <2> 		inc esi
  2400 00002036 8A1D[FF210000]      <2> 		mov bl, [modkeyrdpr]
  2401 0000203C C3                  <2> 		ret
  2402                              <2> 		
  2403                              <2> 	rdprdownbck:
  2404 0000203D FECC                <2> 		dec ah
  2405 0000203F 8825[04220000]      <2> 		mov [commandedit], ah
  2406 00002045 E890000000          <2> 		call rdprbckspc
  2407 0000204A E903FEFFFF          <2> 		jmp rdprintb
  2408                              <2> 	
  2409                              <2> 	rdprdown:
  2410 0000204F 8A25[04220000]      <2> 		mov ah, [commandedit]
  2411 00002055 80FC01              <2> 		cmp ah, 1
  2412 00002058 0F86F4FDFFFF        <2> 		jbe near rdprintb
  2413 0000205E 8B3D[E8B52900]      <2> 		mov edi, [commandsentered]
  2414 00002064 3B3D[E4B52900]      <2> 		cmp edi, [commandlistentries]
  2415 0000206A 7618                <2> 		jbe .nofix
  2416 0000206C 8105[E4B52900]0200- <2> 		add dword [commandlistentries], 2
  2417 00002074 0000                <2>
  2418 00002076 3B3D[E4B52900]      <2> 		cmp edi, [commandlistentries]
  2419 0000207C 7706                <2> 		ja .nofix
  2420 0000207E 893D[E4B52900]      <2> 		mov [commandlistentries], edi
  2421                              <2> 	.nofix
  2422 00002084 80FC02              <2> 		cmp ah, 2
  2423 00002087 74B4                <2> 		je rdprdownbck
  2424 00002089 80EC02              <2> 		sub ah, 2
  2425 0000208C 8825[04220000]      <2> 		mov [commandedit], ah
  2426                              <2> 		
  2427                              <2> 	rdprup:
  2428 00002092 3805[04220000]      <2> 		cmp [commandedit], al
  2429 00002098 0F84B4FDFFFF        <2> 		je near rdprintb
  2430 0000209E 813D[E4B52900]0000- <2> 		cmp dword [commandlistentries], 0
  2431 000020A6 0000                <2>
  2432 000020A8 0F84A4FDFFFF        <2> 		je near rdprintb
  2433 000020AE FF0D[E4B52900]      <2> 		dec dword [commandlistentries]
  2434                              <2> 	.lp:
  2435 000020B4 BF[7EC10000]        <2> 		mov edi, buftxt2
  2436 000020B9 8A07                <2> 		mov al, [edi]
  2437 000020BB 3C00                <2> 		cmp al, 0
  2438 000020BD 7411                <2> 		je .start
  2439 000020BF 8806                <2> 		mov [esi], al
  2440 000020C1 E85EFFFFFF          <2> 		call shiftbuftxt2lft
  2441 000020C6 E8C6010000          <2> 		call prcharq
  2442 000020CB E9E4FFFFFF          <2> 		jmp .lp
  2443                              <2> 	.start:
  2444 000020D0 E805000000          <2> 		call rdprbckspc
  2445 000020D5 E944000000          <2> 		jmp getcurrentcommandstr
  2446                              <2> 	rdprbckspc:
  2447 000020DA 3B35[06220000]      <2> 		cmp esi, [buftxtloc]
  2448 000020E0 742E                <2> 		je nordprupbck
  2449                              <2> 	rdprupbckspclp:
  2450 000020E2 B008                <2> 		mov al, 8
  2451 000020E4 8A1D[FF210000]      <2> 		mov bl, [modkeyrdpr]
  2452 000020EA E8A2010000          <2> 		call prcharq
  2453 000020EF B020                <2> 		mov al, ' '
  2454 000020F1 E89B010000          <2> 		call prcharq
  2455 000020F6 B008                <2> 		mov al, 8
  2456 000020F8 E894010000          <2> 		call prcharq
  2457 000020FD 4E                  <2> 		dec esi
  2458 000020FE 3B35[06220000]      <2> 		cmp esi, [buftxtloc]
  2459 00002104 7405                <2> 		je nordprupbck2
  2460 00002106 E9D7FFFFFF          <2> 		jmp rdprupbckspclp
  2461                              <2> 	nordprupbck2:
  2462 0000210B E8C0040000          <2> 		call termcopy
  2463                              <2> 	nordprupbck:
  2464 00002110 8B3D[E0B52900]      <2> 		mov edi, [commandbufpos]
  2465 00002116 81C7[ECB52900]      <2> 		add edi, commandbuf
  2466 0000211C 4F                  <2> 		dec edi
  2467 0000211D C3                  <2> 		ret
  2468                              <2> 	getcurrentcommandstr:
  2469 0000211E 8A25[04220000]      <2> 		mov ah, [commandedit]
  2470 00002124 FE05[04220000]      <2> 		inc byte [commandedit]
  2471                              <2> 	getccmdlp:
  2472 0000212A 4F                  <2> 		dec edi
  2473 0000212B 8A07                <2> 		mov al, [edi]
  2474 0000212D 81FF[ECB52900]      <2> 		cmp edi, commandbuf
  2475 00002133 7231                <2> 		jb getcmdresetcommandbuf
  2476 00002135 81EF[ECB52900]      <2> 		sub edi, commandbuf
  2477 0000213B 3B3D[E0B52900]      <2> 		cmp edi, [commandbufpos]
  2478 00002141 0F840BFDFFFF        <2> 		je near rdprintb
  2479 00002147 81C7[ECB52900]      <2> 		add edi, commandbuf
  2480 0000214D 3C00                <2> 		cmp al, 0
  2481 0000214F 75D9                <2> 		jne getccmdlp
  2482 00002151 FECC                <2> 		dec ah
  2483 00002153 80FC00              <2> 		cmp ah, 0
  2484 00002156 77D2                <2> 		ja getccmdlp
  2485 00002158 47                  <2> 		inc edi
  2486 00002159 81FF[ECC52900]      <2> 		cmp edi, commandbufend
  2487 0000215F 7710                <2> 		ja fixcmdbufb4morerdpr
  2488 00002161 E918000000          <2> 		jmp morerdprup
  2489                              <2> 	getcmdresetcommandbuf:
  2490 00002166 BF[ECC52900]        <2> 		mov edi, commandbufend
  2491 0000216B 47                  <2> 		inc edi
  2492 0000216C E9B9FFFFFF          <2> 		jmp getccmdlp
  2493                              <2> 	fixcmdbufb4morerdpr:
  2494 00002171 4F                  <2> 		dec edi
  2495 00002172 81EF[ECC52900]      <2> 		sub edi, commandbufend
  2496 00002178 81C7[ECB52900]      <2> 		add edi, commandbuf
  2497                              <2> 	morerdprup:
  2498 0000217E 8A07                <2> 		mov al, [edi]
  2499 00002180 47                  <2> 		inc edi
  2500 00002181 81EF[ECB52900]      <2> 		sub edi, commandbuf
  2501 00002187 3C00                <2> 		cmp al, 0
  2502 00002189 0F84E7FDFFFF        <2> 		je near rdprintb2
  2503 0000218F 3B3D[E0B52900]      <2> 		cmp edi, [commandbufpos]
  2504 00002195 0F83DBFDFFFF        <2> 		jae near rdprintb2
  2505 0000219B 81C7[ECB52900]      <2> 		add edi, commandbuf
  2506 000021A1 8806                <2> 		mov [esi], al
  2507 000021A3 46                  <2> 		inc esi
  2508 000021A4 57                  <2> 		push edi
  2509 000021A5 8A1D[FF210000]      <2> 		mov bl, [modkeyrdpr]
  2510 000021AB E8E1000000          <2> 		call prcharq
  2511 000021B0 5F                  <2> 		pop edi
  2512 000021B1 81FF[ECC52900]      <2> 		cmp edi, commandbufend
  2513 000021B7 76C5                <2> 		jbe morerdprup
  2514 000021B9 BF[ECB52900]        <2> 		mov edi, commandbuf
  2515 000021BE E9BBFFFFFF          <2> 		jmp morerdprup
  2516                              <2> 		
  2517                              <2> 	rdprdel:
  2518 000021C3 BF[7EC10000]        <2> 		mov edi, buftxt2
  2519 000021C8 8A07                <2> 		mov al, [edi]
  2520 000021CA 3C00                <2> 		cmp al, 0
  2521 000021CC 0F8480FCFFFF        <2> 		je near rdprintb
  2522 000021D2 8806                <2> 		mov [esi], al
  2523 000021D4 E84BFEFFFF          <2> 		call shiftbuftxt2lft
  2524 000021D9 E8B3000000          <2> 		call prcharq
  2525                              <2> 		
  2526                              <2> 	rdprbscheck:
  2527 000021DE 3B35[00220000]      <2> 		cmp esi, [firstesirdpr]
  2528 000021E4 7705                <2> 		ja goodbscheck
  2529 000021E6 E967FCFFFF          <2> 		jmp rdprintb
  2530                              <2> 	goodbscheck:
  2531 000021EB 4E                  <2> 		dec esi
  2532 000021EC C60600              <2> 		mov byte [esi], 0
  2533 000021EF 8A1D[FF210000]      <2> 		mov bl, [modkeyrdpr]
  2534 000021F5 B008                <2> 		mov al, 8
  2535 000021F7 E9BBFCFFFF          <2> 		jmp bscheckequal
  2536                              <2> 		
  2537 000021FC 0000                <2> axcache dw 0
  2538 000021FE 00                  <2> endkeyrdpr db 0
  2539 000021FF 00                  <2> modkeyrdpr db 0
  2540 00002200 00000000            <2> firstesirdpr dd 0
  2541 00002204 00                  <2> commandedit db 0
  2542 00002205 00                  <2> txtmask db 0
  2543 00002206 00000000            <2> buftxtloc dd 0
  2544 0000220A 00000000            <2> endbufferrdpr dd 0
  2545 0000220E 082000              <2> backcursor db 8," ",0
  2546                              <1> intx5:
  2547                              <1> 	%include 'source/interrupts/5_readchar.asm'
  2548 00002211 E807000000          <2> 	call rdcharint
  2549 00002216 E98EE0FFFF          <2> 	jmp timerinterrupt
  2550                              <2> getchar:
  2551 0000221B 30C0                <2> 	xor al, al
  2552                              <2> 	rdcharint:		;;get char, if al is 0, wait for key
  2553 0000221D C605[6B220000]01    <2> 		mov byte [trans], 1
  2554 00002224 3C00                <2> 		cmp al, 0
  2555 00002226 7507                <2> 		jne transcheck
  2556 00002228 C605[6B220000]00    <2> 		mov byte [trans], 0
  2557                              <2> 	transcheck:
  2558                              <2> 	%ifdef io.serial
  2559                              <2> 		call serial.receive
  2560                              <2> 		cmp al, 13
  2561                              <2> 		je rdenter
  2562                              <2> 	%else
  2563 0000222F E8FF390000          <2> 		call getkey
  2564 00002234 66A1[69220000]      <2> 		mov ax, [lastkey]
  2565 0000223A 80FC1C              <2> 		cmp ah, 0x1C
  2566 0000223D 741F                <2> 		je rdenter
  2567                              <2> 	%endif
  2568 0000223F 8A3D[6B220000]      <2> 		mov bh, [trans]
  2569 00002245 803D[135C0000]E0    <2> 		cmp byte [specialkey], 0xE0
  2570 0000224C 7504                <2> 		jne nospecialtrans
  2571 0000224E 88C3                <2> 		mov bl, al
  2572 00002250 30C0                <2> 		xor al, al
  2573                              <2> 	nospecialtrans:
  2574 00002252 08C7                <2> 		or bh, al
  2575 00002254 80FF00              <2> 		cmp bh, 0
  2576 00002257 74D6                <2> 		je transcheck
  2577 00002259 E90A000000          <2> 		jmp rdend
  2578                              <2> 	rdenter:
  2579 0000225E B41C                <2> 		mov ah, 0x1C
  2580 00002260 B00A                <2> 		mov al, 10
  2581 00002262 66A3[69220000]      <2> 		mov [lastkey], ax
  2582                              <2> 	rdend:
  2583 00002268 C3                  <2> 		ret
  2584                              <2> 		
  2585 00002269 0000                <2> lastkey db 0,0
  2586 0000226B 00                  <2> trans db 0
  2587                              <1> intx6:
  2588                              <1> 	%include 'source/interrupts/6_prntchar.asm'
  2589                              <2> %ifdef io.serial
  2590                              <2> 	cmp bl, bh
  2591                              <2> 	call prcharint
  2592                              <2> 	jmp timerinterrupt
  2593                              <2> prcharint:	
  2594                              <2> prcharq:
  2595                              <2> 	call serial.send
  2596                              <2> 	ret
  2597                              <2> %else
  2598 0000226C 38FB                <2> cmp bl, bh
  2599 0000226E 740A                <2> je prchar.notimer
  2600 00002270 E80B000000          <2> call prcharint
  2601 00002275 E92FE0FFFF          <2> jmp timerinterrupt
  2602                              <2> prchar.notimer:
  2603 0000227A E812000000          <2> 	call prcharq
  2604 0000227F CF                  <2> 	iret
  2605                              <2> 	
  2606                              <2> prcharint:	;;print char, char in al, modifier in bl, if bh = bl then termcopy will not happen, will run termcopy if called as is
  2607 00002280 38FB                <2> 	cmp bl, bh
  2608 00002282 740D                <2> 	je prcharq
  2609 00002284 E808000000          <2> 	call prcharq
  2610 00002289 E842030000          <2> 	call termcopy
  2611 0000228E C3                  <2> 	ret
  2612 0000228F 00                  <2> termguion db 0
  2613 00002290 00                  <2> termcopyon db 0
  2614                              <2> prcharq:
  2615 00002291 88DC                <2> 	mov ah, bl
  2616 00002293 66A3[5E240000]      <2> 	mov [charbuf], ax
  2617 00002299 31DB                <2> 	xor ebx, ebx
  2618 0000229B 668B1D[58240000]    <2> 	mov bx, [videobufpos]
  2619 000022A2 BF[94E02800]        <2> 	mov edi, videobuf
  2620 000022A7 01DF                <2> 	add edi, ebx
  2621 000022A9 66A1[DD250000]      <2> 	mov ax, [removedvideo]
  2622 000022AF 668907              <2> 	mov [edi], ax
  2623 000022B2 66A1[5E240000]      <2> 	mov ax, [charbuf]
  2624 000022B8 31D2                <2> 	xor edx, edx
  2625 000022BA 668B15[5A240000]    <2> 	mov dx, [charpos]
  2626 000022C1 31C9                <2> 	xor ecx, ecx
  2627 000022C3 668B0D[5C240000]    <2> 	mov cx, [charxy]
  2628 000022CA 3C09                <2> 	cmp al, 9
  2629 000022CC 0F8463000000        <2> 	je near prtab
  2630 000022D2 3C0D                <2> 	cmp al, 13		;I am phasing this out-it is used by windows but not unix based systems
  2631 000022D4 0F848E000000        <2> 	je near prcr
  2632 000022DA 3C0A                <2> 	cmp al, 10
  2633 000022DC 0F84C0000000        <2> 	je near prnlcr
  2634 000022E2 3C08                <2> 	cmp al, 8
  2635 000022E4 0F8495000000        <2> 	je near prbs
  2636 000022EA 3CFF                <2> 	cmp al, 255		;;null character
  2637 000022EC 0F841B000000        <2> 	je near donescr
  2638 000022F2 668907              <2> 	mov [edi], ax
  2639 000022F5 81C702000000        <2> 	add edi, 2
  2640 000022FB FEC2                <2> 	inc dl
  2641                              <2> donecrnl:
  2642 000022FD 38CA                <2> 	cmp dl, cl
  2643 000022FF 0F83C2000000        <2> 	jae near preol
  2644                              <2> doneeol:
  2645 00002305 38EE                <2> 	cmp dh, ch
  2646 00002307 0F83D8000000        <2> 	jae near prscr	
  2647                              <2> donescr:
  2648 0000230D 89FB                <2> 	mov ebx, edi
  2649 0000230F 668B07              <2> 	mov ax, [edi]
  2650 00002312 66A3[DD250000]      <2> 	mov [removedvideo], ax
  2651 00002318 81EB[94E02800]      <2> 	sub ebx, videobuf
  2652 0000231E 66891D[58240000]    <2> 	mov [videobufpos], bx
  2653 00002325 668915[5A240000]    <2> 	mov [charpos], dx
  2654 0000232C 66A1[5E240000]      <2> 	mov ax, [charbuf]
  2655 00002332 88E3                <2> 	mov bl, ah
  2656 00002334 C3                  <2> 	ret
  2657                              <2> 	
  2658                              <2> 	prtab:
  2659 00002335 31DB                <2> 		xor ebx, ebx
  2660 00002337 668B1D[56240000]    <2> 		mov bx, [linebeginpos]
  2661 0000233E 81EF[94E02800]      <2> 		sub edi, videobuf
  2662 00002344 29DF                <2> 		sub edi, ebx
  2663 00002346 C1EF04              <2> 		shr edi, 4
  2664 00002349 C1E704              <2> 		shl edi, 4
  2665 0000234C 81C710000000        <2> 		add edi, 16
  2666 00002352 C0EA03              <2> 		shr dl, 3
  2667 00002355 C0E203              <2> 		shl dl, 3
  2668 00002358 80C208              <2> 		add dl, 8
  2669 0000235B 81C7[94E02800]      <2> 		add edi, videobuf
  2670 00002361 01DF                <2> 		add edi, ebx
  2671 00002363 E995FFFFFF          <2> 		jmp donecrnl
  2672                              <2> 	
  2673                              <2> 	prcr:
  2674 00002368 30D2                <2> 		xor dl, dl
  2675 0000236A 31DB                <2> 		xor ebx, ebx
  2676 0000236C BF[94E02800]        <2> 		mov edi, videobuf
  2677 00002371 668B1D[56240000]    <2> 		mov bx, [linebeginpos]
  2678 00002378 01DF                <2> 		add edi, ebx
  2679 0000237A E97EFFFFFF          <2> 		jmp donecrnl
  2680                              <2> 			
  2681                              <2> 	prbs:
  2682 0000237F 80FA00              <2> 		cmp dl, 0
  2683 00002382 7410                <2> 		je prbackline
  2684                              <2> 	prnobmr:
  2685 00002384 FECA                <2> 		dec dl
  2686 00002386 6631C0              <2> 		xor ax, ax
  2687 00002389 81EF02000000        <2> 		sub edi, 2
  2688 0000238F E969FFFFFF          <2> 		jmp donecrnl
  2689                              <2> 	prbackline:
  2690 00002394 88CA                <2> 		mov dl, cl
  2691 00002396 80FE00              <2> 		cmp dh, 0
  2692 00002399 74E9                <2> 		je prnobmr
  2693 0000239B FECE                <2> 		dec dh
  2694 0000239D E9E2FFFFFF          <2> 		jmp prnobmr
  2695                              <2> 		
  2696                              <2> 	prnlcr:
  2697 000023A2 FEC6                <2> 		inc dh
  2698 000023A4 31DB                <2> 		xor ebx, ebx
  2699 000023A6 30D2                <2> 		xor dl, dl
  2700 000023A8 88CB                <2> 		mov bl, cl
  2701 000023AA 66D1E3              <2> 		shl bx, 1
  2702 000023AD BF[94E02800]        <2> 		mov edi, videobuf
  2703 000023B2 66031D[56240000]    <2> 		add bx, [linebeginpos]
  2704 000023B9 66891D[56240000]    <2> 		mov [linebeginpos], bx
  2705 000023C0 01DF                <2> 		add edi, ebx
  2706 000023C2 E936FFFFFF          <2> 		jmp donecrnl
  2707                              <2> 		
  2708                              <2> 	preol:
  2709 000023C7 30D2                <2> 		xor dl, dl
  2710 000023C9 FEC6                <2> 		inc dh
  2711 000023CB 31DB                <2> 		xor ebx, ebx
  2712 000023CD 88CB                <2> 		mov bl, cl
  2713 000023CF 66D1E3              <2> 		shl bx, 1
  2714 000023D2 66031D[56240000]    <2> 		add bx, [linebeginpos]
  2715 000023D9 66891D[56240000]    <2> 		mov [linebeginpos], bx
  2716 000023E0 E920FFFFFF          <2> 		jmp doneeol
  2717                              <2> 	prscr:
  2718 000023E5 FECE                <2> 		dec dh
  2719 000023E7 BF[94E02800]        <2> 		mov edi, videobuf
  2720 000023EC 31DB                <2> 		xor ebx, ebx
  2721 000023EE 88CB                <2> 		mov bl, cl
  2722 000023F0 66D1E3              <2> 		shl bx, 1
  2723 000023F3 01FB                <2> 		add ebx, edi
  2724                              <2> 	intscrollloop:
  2725 000023F5 668B03              <2> 		mov ax, [ebx]
  2726 000023F8 668907              <2> 		mov [edi], ax
  2727 000023FB 81C702000000        <2> 		add edi, 2
  2728 00002401 81C302000000        <2> 		add ebx, 2
  2729 00002407 FEC9                <2> 		dec cl
  2730 00002409 80F900              <2> 		cmp cl, 0
  2731 0000240C 75E7                <2> 		jne intscrollloop
  2732 0000240E 8A0D[5C240000]      <2> 		mov cl, [charxy]
  2733 00002414 FECD                <2> 		dec ch
  2734 00002416 80FD01              <2> 		cmp ch, 1
  2735 00002419 77DA                <2> 		ja intscrollloop
  2736 0000241B 6631C0              <2> 		xor ax, ax
  2737 0000241E 81EF[94E02800]      <2> 		sub edi, videobuf
  2738 00002424 66893D[56240000]    <2> 		mov [linebeginpos], di
  2739 0000242B 81C7[94E02800]      <2> 		add edi, videobuf
  2740 00002431 89FB                <2> 		mov ebx, edi
  2741                              <2> 	intloopclear:
  2742 00002433 668903              <2> 		mov [ebx], ax
  2743 00002436 81C302000000        <2> 		add ebx, 2
  2744 0000243C FEC9                <2> 		dec cl
  2745 0000243E 80F900              <2> 		cmp cl, 0
  2746 00002441 75F0                <2> 		jne intloopclear
  2747 00002443 FECD                <2> 		dec ch
  2748 00002445 80FD00              <2> 		cmp ch, 0
  2749 00002448 75E9                <2> 		jne intloopclear
  2750 0000244A 668B0D[5C240000]    <2> 		mov cx, [charxy]
  2751 00002451 E9B7FEFFFF          <2> 		jmp donescr
  2752                              <2> 		
  2753 00002456 0000                <2> linebeginpos dw 0
  2754 00002458 0000                <2> videobufpos: dw 0
  2755 0000245A 0000                <2> charpos db 0,0
  2756 0000245C 501E                <2> charxy db 80,30
  2757 0000245E 0000                <2> charbuf dw 0
  2758                              <2> %endif
  2759                              <1> intx7:
  2760                              <1> 	%include 'source/interrupts/7_openfile.asm'
  2761 00002460 E8C43E0000          <2> 	call loadfile
  2762 00002465 E93FDEFFFF          <2> 	jmp timerinterrupt
  2763                              <1> intx9:
  2764                              <1> 	%include 'source/interrupts/9_num2str.asm'
  2765 0000246A 3C00                <2> 	cmp al, 0
  2766 0000246C 750A                <2> 	jne num2strb
  2767 0000246E E86F0B0000          <2> 	call showdec
  2768 00002473 E931DEFFFF          <2> 	jmp timerinterrupt
  2769                              <2> num2strb:
  2770 00002478 E89B0A0000          <2> 	call showhex
  2771 0000247D E927DEFFFF          <2> 	jmp timerinterrupt
  2772                              <1> intx10:
  2773                              <1> 	%include 'source/interrupts/10_str2num.asm'
  2774 00002482 E8400C0000          <2> 	call cnvrttxt	;the string goes into esi, number into ecx
  2775 00002487 E91DDEFFFF          <2> 	jmp timerinterrupt
  2776                              <2> 	
  2777                              <1> %ifdef threads.included
  2778                              <1> intx11:
  2779                              <1> 	%include 'source/interrupts/11_forkthread.asm'
  2780                              <2> threadfork: ;esi is next thread's start address, if 0, fork current thread
  2781                              <2> 			;returns the PID of the new fork in ebx
  2782                              <2> ;WARNING:THIS WILL NOT WORK IN C UNTIL IT COPIES THE ENTIRE STACK
  2783 0000248C FA                  <2> 	cli
  2784 0000248D 60                  <2> 	pushad
  2785 0000248E 8925[5B250000]      <2> 	mov [.espold], esp
  2786 00002494 C605[CE640000]01    <2> 	mov byte [threadson], 1
  2787 0000249B 8B1D[CF640000]      <2> 	mov ebx, [currentthread]
  2788 000024A1 C1E302              <2> 	shl ebx, 2
  2789 000024A4 89A3[00E62900]      <2> 	mov [threadlist + ebx], esp
  2790 000024AA C1EB02              <2> 	shr ebx, 2
  2791 000024AD 81FB00000000        <2> 	cmp ebx, 0
  2792 000024B3 750C                <2> 	jne .simplestack
  2793 000024B5 BB[9EAA0000]        <2> 	mov ebx, stackend
  2794 000024BA 29E3                <2> 	sub ebx, esp
  2795 000024BC E90B000000          <2> 	jmp .stackcalcdone
  2796                              <2> .simplestack:
  2797 000024C1 C1E30A              <2> 	shl ebx, 10
  2798 000024C4 81C3[00FA2900]      <2> 	add ebx, stack1
  2799 000024CA 29E3                <2> 	sub ebx, esp
  2800                              <2> .stackcalcdone:
  2801 000024CC 29DC                <2> 	sub esp, ebx
  2802 000024CE 81C4[00FA2900]      <2> 	add esp, stack1
  2803 000024D4 8B1D[CA640000]      <2> 	mov ebx, [lastthread]
  2804 000024DA C1E308              <2> 	shl ebx, 8
  2805 000024DD 01DC                <2> 	add esp, ebx
  2806 000024DF 891D[5F250000]      <2> 	mov [.stackend], ebx
  2807                              <2> 
  2808 000024E5 89E5                <2> 	mov ebp, esp
  2809 000024E7 8B25[5B250000]      <2> 	mov esp, [.espold]
  2810                              <2> 
  2811 000024ED C1EB0A              <2> 	shr ebx, 10 ;get pid then push it
  2812 000024F0 895C2410            <2> 	mov [esp + 16], ebx ;set the old ebx to the new PID
  2813                              <2> 
  2814 000024F4 31DB                <2> 	xor ebx, ebx
  2815                              <2> .stackcopy:
  2816 000024F6 668B041C            <2> 	mov ax, [esp + ebx]
  2817 000024FA 6689441D00          <2> 	mov [ebp + ebx], ax
  2818 000024FF 81C302000000        <2> 	add ebx, 2
  2819 00002505 3B1D[5F250000]      <2> 	cmp ebx, [.stackend]
  2820 0000250B 72E9                <2> 	jb .stackcopy
  2821                              <2> 
  2822 0000250D 31C0                <2> 	xor eax, eax
  2823 0000250F 668CC8              <2> 	mov ax, cs
  2824 00002512 89C2                <2> 	mov edx, eax
  2825 00002514 8B4C2428            <2> 	mov ecx, [esp + 40]
  2826 00002518 81C900020000        <2> 	or ecx, 0x200
  2827                              <2> 	
  2828 0000251E 81FE00000000        <2> 	cmp esi, 0
  2829 00002524 7504                <2> 	jne .nochangestack
  2830 00002526 8B742420            <2> 	mov esi, [esp + 32]
  2831                              <2> .nochangestack:
  2832 0000252A 89F0                <2> 	mov eax, esi
  2833 0000252C 89EC                <2> 	mov esp, ebp
  2834                              <2> 
  2835 0000252E 89442420            <2> 	mov [esp + 32], eax
  2836 00002532 89542424            <2> 	mov [esp + 36], edx
  2837 00002536 894C2428            <2> 	mov [esp + 40], ecx
  2838                              <2> 
  2839 0000253A 8B1D[CA640000]      <2> 	mov ebx, [lastthread]
  2840 00002540 89A3[00E62900]      <2> 	mov [threadlist + ebx], esp
  2841 00002546 81C304000000        <2> 	add ebx, 4
  2842 0000254C 891D[CA640000]      <2> 	mov [lastthread], ebx
  2843 00002552 8B25[5B250000]      <2> 	mov esp, [.espold]
  2844 00002558 61                  <2> 	popad
  2845 00002559 FB                  <2> 	sti
  2846 0000255A CF                  <2> 	iret
  2847                              <2> 
  2848 0000255B 00000000            <2> .espold dd 0
  2849 0000255F 00000000            <2> .stackend dd 0
  2850                              <1> %endif
  2851                              <1> intx12:
  2852                              <1> 	%include 'source/interrupts/12_gettime.asm'
  2853 00002563 A1[61020000]        <2> 	mov eax, [timeseconds]
  2854 00002568 8B1D[65020000]      <2> 	mov ebx, [timenanoseconds]
  2855 0000256E 89D9                <2> 	mov ecx, ebx
  2856 00002570 C1E90A              <2> 	shr ecx, 10	;this is in microseconds
  2857 00002573 E931DDFFFF          <2> 	jmp timerinterrupt
  2858                              <1> intx13:
  2859                              <1> 	%include 'source/interrupts/13_settime.asm'
  2860 00002578 A3[61020000]        <2> 	mov [timeseconds], eax
  2861 0000257D 891D[65020000]      <2> 	mov [timenanoseconds], ebx
  2862 00002583 E921DDFFFF          <2> 	jmp timerinterrupt
  2863                              <2> 	
  2864                              <1> intx14:
  2865                              <1> 	%include 'source/interrupts/14_runcmd.asm'
  2866 00002588 BF[7EC50000]        <2> 	mov edi, buftxt
  2867                              <2> cpcmd:
  2868 0000258D 8A06                <2> 	mov al, [esi]
  2869 0000258F 8807                <2> 	mov [edi], al
  2870 00002591 46                  <2> 	inc esi
  2871 00002592 47                  <2> 	inc edi
  2872 00002593 3C00                <2> 	cmp al, 0
  2873 00002595 75F6                <2> 	jne cpcmd
  2874 00002597 E852060000          <2> 	call run
  2875 0000259C CF                  <2> 	iret
  2876                              <1> intx15:
  2877                              <1> 	%include 'source/interrupts/15_proginfo.asm'
  2878 0000259D BB[7EB10000]        <2> 	mov ebx, variables
  2879 000025A2 8B35[CA2C0000]      <2> 	mov esi, [currentcommandloc]
  2880 000025A8 89F7                <2> 	mov edi, esi
  2881 000025AA 31C9                <2> 	xor ecx, ecx
  2882                              <2> getcommandzeroes:
  2883 000025AC 8A07                <2> 	mov al, [edi]
  2884 000025AE 47                  <2> 	inc edi
  2885 000025AF 3C3B                <2> 	cmp al, ';'
  2886 000025B1 740E                <2> 	je nomorezeroes
  2887 000025B3 3C00                <2> 	cmp al, 0
  2888 000025B5 740A                <2> 	je nomorezeroes
  2889 000025B7 3C20                <2> 	cmp al, ' '
  2890 000025B9 75F1                <2> 	jne getcommandzeroes
  2891 000025BB 41                  <2> 	inc ecx
  2892 000025BC E9EBFFFFFF          <2> 	jmp getcommandzeroes
  2893                              <2> nomorezeroes:
  2894 000025C1 41                  <2> 	inc ecx
  2895 000025C2 4F                  <2> 	dec edi
  2896 000025C3 8B1D[0AB10000]      <2> 	mov ebx, [uid]
  2897 000025C9 8B15[CF640000]      <2> 	mov edx, [currentthread]
  2898 000025CF CF                  <2> 	iret
  2899                              <2> 	
  2900                              <1> termcopy:
  2901                              <1> %ifdef io.serial
  2902                              <1> 	ret
  2903                              <1> %else
  2904                              <1> %ifdef terminal.vsync
  2905 000025D0 C605[D8250000]01    <1> 	mov byte [termcopyneeded], 1
  2906 000025D7 C3                  <1> 	ret
  2907                              <1> %else
  2908                              <1> 	call newtermcopy
  2909                              <1> 	ret
  2910                              <1> %endif
  2911 000025D8 00                  <1> 	termcopyneeded db 0
  2912 000025D9 00000000            <1> 	termcursorpos dd 0
  2913 000025DD 0000                <1> 	removedvideo dw 0
  2914                              <1> newtermcopy:
  2915 000025DF 60                  <1> 	pusha
  2916 000025E0 BF[94E02800]        <1> 	mov edi, videobuf
  2917 000025E5 31DB                <1> 	xor ebx, ebx
  2918 000025E7 881D[D8250000]      <1> 	mov [termcopyneeded], bl
  2919 000025ED 668B1D[58240000]    <1> 	mov bx, [videobufpos]
  2920 000025F4 01DF                <1> 	add edi, ebx
  2921 000025F6 893D[D9250000]      <1> 	mov [termcursorpos], edi
  2922 000025FC E8CB000000          <1> 	call switchtermcursor
  2923 00002601 803D[B8980000]00    <1> 	cmp byte [guion], 0
  2924 00002608 0F8420000000        <1> 	je near nowincopy
  2925                              <1> %ifdef gui.included
  2926 0000260E C605[F5770000]00    <1> 	mov byte [mouseselecton], 0
  2927 00002615 C605[90220000]01    <1> 	mov byte [termcopyon], 1
  2928 0000261C 803D[8F220000]01    <1> 	cmp byte [termguion], 1
  2929 00002623 0F84BB4E0000        <1> 	je near windowvideocopy
  2930                              <1> %endif
  2931 00002629 E997000000          <1> 	jmp nocopytermatall
  2932                              <1> nowincopy:
  2933 0000262E BE00000A00          <1> 	mov esi, 0xA0000
  2934 00002633 A1[42020000]        <1> 	mov eax, [basecache]
  2935 00002638 C1E004              <1> 	shl eax, 4
  2936 0000263B 29C6                <1> 	sub esi, eax
  2937 0000263D BF[94E02800]        <1> 	mov edi, videobuf
  2938 00002642 31C9                <1> 	xor ecx, ecx
  2939 00002644 668B0D[5C240000]    <1> 	mov cx, [charxy]
  2940                              <1> nowincopy2:
  2941 0000264B 668B07              <1> 	mov ax, [edi]
  2942 0000264E 81C7A46A0000        <1> 	add edi, (videobuf2 - videobuf)
  2943 00002654 668B1F              <1> 	mov bx, [edi]
  2944 00002657 668907              <1> 	mov [edi], ax
  2945 0000265A 81EFA46A0000        <1> 	sub edi, (videobuf2 - videobuf)
  2946 00002660 47                  <1> 	inc edi
  2947 00002661 6639D8              <1> 	cmp ax, bx
  2948 00002664 743E                <1> 	je nopresentwinfont
  2949 00002666 4F                  <1> 	dec edi
  2950 00002667 BB[02870000]        <1> 	mov ebx, fonts
  2951 0000266C 31C0                <1> 	xor eax, eax
  2952 0000266E 8A07                <1> 	mov al, [edi]
  2953 00002670 C1E004              <1> 	shl eax, 4
  2954 00002673 01C3                <1> 	add ebx, eax
  2955 00002675 47                  <1> 	inc edi
  2956 00002676 8A27                <1> 	mov ah, [edi]
  2957 00002678 31D2                <1> 	xor edx, edx
  2958 0000267A 8A15[5C240000]      <1> 	mov dl, [charxy]
  2959 00002680 C1C110              <1> 	rol ecx, 16
  2960 00002683 B110                <1> 	mov cl, 16
  2961                              <1> nowinfont:
  2962 00002685 8A03                <1> 	mov al, [ebx]
  2963 00002687 D0C8                <1> 	ror al, 1
  2964 00002689 80FC07              <1> 	cmp ah, 7
  2965 0000268C 7602                <1> 	jbe notnotfont
  2966 0000268E F6D0                <1> 	not al
  2967                              <1> notnotfont:
  2968 00002690 8806                <1> 	mov [esi], al
  2969 00002692 01D6                <1> 	add esi, edx
  2970 00002694 43                  <1> 	inc ebx
  2971 00002695 FEC9                <1> 	dec cl
  2972 00002697 80F900              <1> 	cmp cl, 0
  2973 0000269A 75E9                <1> 	jne nowinfont
  2974 0000269C C1E204              <1> 	shl edx, 4
  2975 0000269F 29D6                <1> 	sub esi, edx
  2976 000026A1 C1C110              <1> 	rol ecx, 16
  2977                              <1> nopresentwinfont:
  2978 000026A4 47                  <1> 	inc edi
  2979 000026A5 46                  <1> 	inc esi
  2980 000026A6 FEC9                <1> 	dec cl
  2981 000026A8 80F900              <1> 	cmp cl, 0
  2982 000026AB 759E                <1> 	jne nowincopy2
  2983 000026AD 8A0D[5C240000]      <1> 	mov cl, [charxy]
  2984 000026B3 31D2                <1> 	xor edx, edx
  2985 000026B5 88CA                <1> 	mov dl, cl
  2986 000026B7 29D6                <1> 	sub esi, edx
  2987 000026B9 C1E204              <1> 	shl edx, 4
  2988 000026BC 01D6                <1> 	add esi, edx
  2989 000026BE FECD                <1> 	dec ch
  2990 000026C0 80FD00              <1> 	cmp ch, 0
  2991 000026C3 7586                <1> 	jne nowincopy2
  2992                              <1> nocopytermatall:
  2993 000026C5 E802000000          <1> 	call switchtermcursor
  2994 000026CA 61                  <1> 	popa
  2995 000026CB C3                  <1> 	ret
  2996                              <1> 	
  2997                              <1> switchtermcursor:
  2998 000026CC 8B3D[D9250000]      <1> 	mov edi, [termcursorpos]
  2999 000026D2 8A4701              <1> 	mov al, [edi + 1]
  3000 000026D5 8A27                <1> 	mov ah, [edi]
  3001 000026D7 3C07                <1> 	cmp al, 7
  3002 000026D9 7607                <1> 	jbe movlargecursorterm
  3003 000026DB B007                <1> 	mov al, 7
  3004 000026DD E902000000          <1> 	jmp movedcursorterm
  3005                              <1> movlargecursorterm:
  3006 000026E2 B0F0                <1> 	mov al, 0xF0
  3007                              <1> movedcursorterm:
  3008 000026E4 884701              <1> 	mov [edi + 1], al
  3009 000026E7 80FC00              <1> 	cmp ah, 0
  3010 000026EA 7504                <1> 	jne fixednocursorterm
  3011 000026EC B420                <1> 	mov ah, " "
  3012 000026EE 8827                <1> 	mov [edi], ah
  3013                              <1> fixednocursorterm:
  3014 000026F0 C3                  <1> 	ret
  3015                              <1> %endif
  3016                                      %include "source/dosints.asm"
  3017                              <1> int20h:
  3018 000026F1 66B8004C            <1> mov ax, 0x4C00
  3019                              <1> int21h:
  3020                              <1> dostosolleros:
  3021 000026F5 6650                <1> 	push ax
  3022 000026F7 66B83000            <1> 	mov ax, NEW_DATA_SEL
  3023 000026FB 8ED8                <1> 	mov ds, ax
  3024 000026FD 8EC0                <1> 	mov es, ax
  3025 000026FF 8EE0                <1> 	mov fs, ax
  3026 00002701 66B82000            <1> 	mov ax, SYS_DATA_SEL
  3027 00002705 8EE8                <1> 	mov gs, ax
  3028 00002707 6658                <1> 	pop ax
  3029 00002709 9C                  <1> 	pushf
  3030 0000270A 60                  <1> 	pusha
  3031 0000270B 80FC01              <1> 	cmp ah, 1
  3032 0000270E 0F8449000000        <1> 	je near dosgchar
  3033 00002714 80FC02              <1> 	cmp ah, 2
  3034 00002717 0F844A000000        <1> 	je near doswchar
  3035 0000271D 80FC09              <1> 	cmp ah, 9
  3036 00002720 0F844F000000        <1> 	je near dosprintstr
  3037 00002726 80FC0A              <1> 	cmp ah, 0xA
  3038 00002729 0F845F000000        <1> 	je near dosgetstr
  3039 0000272F 80FC2B              <1> 	cmp ah, 0x2B
  3040 00002732 0F849E000000        <1> 	je near dosgetdate
  3041 00002738 80FC2C              <1> 	cmp ah, 0x2C
  3042 0000273B 0F84B8000000        <1> 	je near dosgettime
  3043 00002741 80FC4C              <1> 	cmp ah, 0x4C
  3044 00002744 0F84CD000000        <1> 	je near dosexit
  3045                              <1> backtodos:
  3046 0000274A 61                  <1> 	popa
  3047 0000274B 9D                  <1> 	popf
  3048 0000274C 6650                <1> 	push ax
  3049 0000274E 66B85000            <1> 	mov ax, DOS_DATA_SEL
  3050 00002752 8ED8                <1> 	mov ds, ax
  3051 00002754 8EC0                <1> 	mov es, ax
  3052 00002756 8EE0                <1> 	mov fs, ax
  3053 00002758 8EE8                <1> 	mov gs, ax
  3054 0000275A 6658                <1> 	pop ax
  3055 0000275C CF                  <1> 	iret
  3056                              <1> 
  3057                              <1> dosgchar:
  3058 0000275D E8B9FAFFFF          <1> 	call getchar
  3059 00002762 E9E3FFFFFF          <1> 	jmp backtodos
  3060                              <1> 	
  3061                              <1> doswchar:
  3062 00002767 88D0                <1> 	mov al, dl
  3063 00002769 B307                <1> 	mov bl, 7
  3064 0000276B E810FBFFFF          <1> 	call prcharint
  3065 00002770 E9D5FFFFFF          <1> 	jmp backtodos
  3066                              <1> 	
  3067                              <1> dosprintstr:
  3068 00002775 31F6                <1> 	xor esi, esi
  3069 00002777 6689D6              <1> 	mov si, dx
  3070 0000277A 81C600004000        <1> 	add esi, dosprogloc
  3071 00002780 B024                <1> 	mov al, "$"
  3072 00002782 B307                <1> 	mov bl, 7
  3073 00002784 E8BCF5FFFF          <1> 	call printint
  3074 00002789 E9BCFFFFFF          <1> 	jmp backtodos
  3075                              <1> 	
  3076                              <1> dosgetstr:
  3077 0000278E 31F6                <1> 	xor esi, esi
  3078 00002790 6689D6              <1> 	mov si, dx
  3079 00002793 81C600004000        <1> 	add esi, dosprogloc
  3080 00002799 B900000000          <1> 	mov ecx, 0
  3081 0000279E 8A0E                <1> 	mov cl, [esi]
  3082 000027A0 81C603000000        <1> 	add esi, 3
  3083 000027A6 89F7                <1> 	mov edi, esi
  3084 000027A8 8935[D2270000]      <1> 	mov [stringstart], esi
  3085 000027AE 01CF                <1> 	add edi, ecx
  3086 000027B0 B00A                <1> 	mov al, 10
  3087 000027B2 B307                <1> 	mov bl, 7
  3088 000027B4 E870F6FFFF          <1> 	call rdprint
  3089 000027B9 89F1                <1> 	mov ecx, esi
  3090 000027BB 2B0D[D2270000]      <1> 	sub ecx, [stringstart]
  3091 000027C1 8B35[D2270000]      <1> 	mov esi, [stringstart]
  3092 000027C7 884EFF              <1> 	mov [esi - 1], cl
  3093 000027CA 884EFE              <1> 	mov [esi - 2], cl
  3094 000027CD E978FFFFFF          <1> 	jmp backtodos
  3095 000027D2 00000000            <1> stringstart dd 0
  3096                              <1> 
  3097                              <1> dosgetdate:
  3098 000027D6 E853260000          <1> 	call time
  3099 000027DB 8A0D[F64F0000]      <1> 	mov cl, [RTCtimeYear]
  3100 000027E1 B500                <1> 	mov ch, 0
  3101 000027E3 6681C1D007          <1> 	add cx, 2000
  3102 000027E8 8A35[F54F0000]      <1> 	mov dh, [RTCtimeMonth]
  3103 000027EE 8A15[F44F0000]      <1> 	mov dl, [RTCtimeDay]
  3104 000027F4 E951FFFFFF          <1> 	jmp backtodos
  3105                              <1> 
  3106                              <1> dosgettime:
  3107 000027F9 E830260000          <1> 	call time
  3108 000027FE 8A2D[F34F0000]      <1> 	mov ch, [RTCtimeHour]
  3109 00002804 8A0D[F24F0000]      <1> 	mov cl, [RTCtimeMinute]
  3110 0000280A 8A35[F14F0000]      <1> 	mov dh, [RTCtimeSecond]
  3111 00002810 B200                <1> 	mov dl, 0
  3112 00002812 E933FFFFFF          <1> 	jmp backtodos
  3113                              <1> 	
  3114                              <1> dosexit:
  3115 00002817 61                  <1> 	popa
  3116 00002818 8B25[FEAE0000]      <1> 	mov esp, [previousstack]
  3117 0000281E 31DB                <1> 	xor ebx, ebx
  3118 00002820 88C3                <1> 	mov bl, al
  3119 00002822 80FB00              <1> 	cmp bl, 0
  3120 00002825 0F85A1F4FFFF        <1> 	jne near exitprog.error
  3121 0000282B C3                  <1> 	ret
  3122                                      %include "source/solleros.asm"
  3123                              <1> 	;SOLLEROS.ASM
  3124                              <1> os:
  3125                              <1> setdefenv:
  3126 0000282C B02F                <1> 	mov al, '/'
  3127 0000282E A2[0AAF0000]        <1> 	mov [currentfolder], al
  3128 00002833 B801000000          <1> 	mov eax, 1
  3129 00002838 A3[06AF0000]        <1> 	mov [currentfolderloc], eax
  3130 0000283D E865F5FFFF          <1> 	call clear
  3131                              <1> 	
  3132                              <1> bootfilecheck:
  3133 00002842 803D[0EB10000]01    <1> 	cmp byte [ranboot], 1
  3134 00002849 0F8425000000        <1> 	je near nobootfile
  3135                              <1> 	%ifdef hardware.automatic
  3136 0000284F E8FD360000          <1> 		call initializelater ;Initialize components that have debug messages
  3137                              <1> 	%endif
  3138 00002854 BF[9C860000]        <1> 	mov edi, bootfilename
  3139 00002859 BE00004000          <1> 	mov esi, 0x400000
  3140 0000285E E8C63A0000          <1> 	call loadfile
  3141 00002863 81FA94010000        <1> 	cmp edx, 404
  3142 00002869 0F8405000000        <1> 	je near nobootfile
  3143 0000286F E8430E0000          <1> 	call progbatchfound
  3144                              <1> nobootfile:	
  3145 00002874 C605[0EB10000]01    <1> 	mov byte [ranboot], 1
  3146                              <1> 
  3147 0000287B BE[00000000]        <1> 	mov esi, signature
  3148                              <1> .sigcopyloop:	;this prevents an odd error
  3149 00002880 658A06              <1> 	mov al, [gs:esi]
  3150 00002883 8806                <1> 	mov [esi], al
  3151 00002885 46                  <1> 	inc esi
  3152 00002886 81FE[1A000000]      <1> 	cmp esi, signatureend
  3153 0000288C 72F2                <1> 	jb .sigcopyloop
  3154                              <1> 	
  3155 0000288E BE[00000000]        <1> 	mov esi, signature
  3156 00002893 E8A6F4FFFF          <1> 	call print
  3157 00002898 8B0D[16000000]      <1> 	mov ecx, [signatureend - 4]
  3158 0000289E E83F070000          <1> 	call showdec
  3159 000028A3 BE[DD860000]        <1> 	mov esi, line
  3160 000028A8 E891F4FFFF          <1> 	call print
  3161 000028AD BE[B9860000]        <1> 	mov esi, userask
  3162 000028B2 E887F4FFFF          <1> 	call print
  3163                              <1> usercheck:
  3164 000028B7 BE[7EC50000]        <1> 	mov esi, buftxt
  3165 000028BC BF[7EC90000]        <1> 	mov edi, buftxtend
  3166 000028C1 B00A                <1> 	mov al, 10
  3167 000028C3 E861F5FFFF          <1> 	call rdprint
  3168 000028C8 56                  <1> 	push esi
  3169 000028C9 BE[C3860000]        <1> 	mov esi, pwdask
  3170 000028CE E86BF4FFFF          <1> 	call print
  3171 000028D3 5E                  <1> 	pop esi
  3172 000028D4 46                  <1> 	inc esi
  3173 000028D5 8935[D4290000]      <1> 	mov [esipass], esi
  3174                              <1> passcheck:
  3175 000028DB E83BF9FFFF          <1> 	call getchar
  3176 000028E0 3C0A                <1> 	cmp al, 10
  3177 000028E2 0F843C000000        <1> 	je near gotpass
  3178 000028E8 3C08                <1> 	cmp al, 8
  3179 000028EA 0F8413000000        <1> 	je near backpass
  3180 000028F0 8806                <1> 	mov [esi], al
  3181 000028F2 46                  <1> 	inc esi
  3182 000028F3 B02A                <1> 	mov al, '*'
  3183 000028F5 E886F9FFFF          <1> 	call prcharint
  3184 000028FA E9DCFFFFFF          <1> 	jmp passcheck
  3185 000028FF 08200800            <1> backcursor2 db 8," ",8,0
  3186                              <1> backpass:
  3187 00002903 3B35[D4290000]      <1> 	cmp esi, [esipass]
  3188 00002909 0F84CCFFFFFF        <1> 	je near passcheck
  3189 0000290F 4E                  <1> 	dec esi
  3190 00002910 C60600              <1> 	mov byte [esi], 0
  3191 00002913 56                  <1> 	push esi
  3192 00002914 BE[FF280000]        <1> 	mov esi, backcursor2
  3193 00002919 E820F4FFFF          <1> 	call print
  3194 0000291E 5E                  <1> 	pop esi
  3195 0000291F E9B7FFFFFF          <1> 	jmp passcheck
  3196                              <1> gotpass:
  3197 00002924 B00A                <1> 	mov al, 10
  3198 00002926 E855F9FFFF          <1> 	call prcharint
  3199 0000292B 30C0                <1> 	xor al, al
  3200 0000292D 31C9                <1> 	xor ecx, ecx
  3201 0000292F 8806                <1> 	mov [esi], al
  3202 00002931 BB[DF860000]        <1> 	mov ebx, userlst
  3203                              <1> userfind:
  3204 00002936 BE[7EC50000]        <1> 	mov esi, buftxt
  3205 0000293B 8A06                <1> 	mov al, [esi]
  3206 0000293D 3C00                <1> 	cmp al, 0
  3207 0000293F 0F84E7FEFFFF        <1> 	je near os
  3208 00002945 891D[D8290000]      <1> 	mov [usercache], ebx
  3209 0000294B E87E030000          <1> 	call tester
  3210 00002950 3C01                <1> 	cmp al, 1
  3211 00002952 7419                <1> 	je pwdtest
  3212 00002954 41                  <1> 	inc ecx
  3213                              <1> nxtuser:
  3214 00002955 8A03                <1> 	mov al, [ebx]
  3215 00002957 43                  <1> 	inc ebx
  3216 00002958 3C00                <1> 	cmp al, 0
  3217 0000295A 75F9                <1> 	jne nxtuser
  3218 0000295C 81FB[02870000]      <1> 	cmp ebx, userlstend
  3219 00002962 0F83C4FEFFFF        <1> 	jae near os
  3220 00002968 E9C9FFFFFF          <1> 	jmp userfind
  3221                              <1> pwdtest:
  3222 0000296D 46                  <1> 	inc esi
  3223 0000296E 43                  <1> 	inc ebx
  3224 0000296F E85A030000          <1> 	call tester
  3225 00002974 3C01                <1> 	cmp al, 1
  3226 00002976 7405                <1> 	je pwdrgt
  3227 00002978 E9D8FFFFFF          <1> 	jmp nxtuser
  3228                              <1> pwdrgt:
  3229 0000297D D1E9                <1> 	shr ecx, 1
  3230 0000297F 890D[0AB10000]      <1> 	mov [uid], ecx
  3231 00002985 E81DF4FFFF          <1> 	call clear
  3232 0000298A 31C9                <1> 	xor ecx, ecx
  3233 0000298C 41                  <1> 	inc ecx
  3234 0000298D 890D[E0B52900]      <1> 	mov [commandbufpos], ecx
  3235                              <1> returnfromexp:
  3236 00002993 66B90002            <1> 	mov cx, 200h
  3237 00002997 BE[7EC50000]        <1> 	mov esi, buftxt
  3238 0000299C 8935[CA2C0000]      <1> 	mov [currentcommandloc], esi
  3239 000029A2 E825000000          <1> 	call bufclr
  3240                              <1> clearolddata:
  3241 000029A7 31C0                <1> 	xor eax, eax
  3242 000029A9 A2[0FB10000]        <1> 	mov [IFON], al
  3243 000029AE A2[10B10000]        <1> 	mov [IFTRUE], al
  3244 000029B3 A2[78B10000]        <1> 	mov [BATCHISON], al
  3245 000029B8 A3[74B10000]        <1> 	mov [BATCHPOS], eax
  3246 000029BD A2[79B10000]        <1> 	mov [LOOPON], al
  3247 000029C2 A3[7AB10000]        <1> 	mov [LOOPPOS], eax
  3248 000029C7 E939000000          <1> 	jmp nwcmd
  3249                              <1> bufclr:	
  3250 000029CC 30C0                <1> 	xor al, al
  3251 000029CE 8806                <1> 	mov [esi], al
  3252 000029D0 46                  <1> 	inc esi
  3253 000029D1 E2F9                <1> 	loop bufclr
  3254 000029D3 C3                  <1> 	ret
  3255                              <1> 
  3256 000029D4 00000000            <1> esipass dd 0
  3257 000029D8 [DF860000]          <1> usercache dd userlst
  3258                              <1> 	
  3259                              <1> buftxtclear:
  3260 000029DC 30C0                <1> 	xor al, al
  3261 000029DE BE[7EC50000]        <1> 	mov esi, buftxt
  3262 000029E3 81FE[7EC90000]      <1> clearbuftxt: cmp esi, buf2
  3263 000029E9 7314                <1> 	jae retbufclr
  3264 000029EB 8806                <1> 	mov [esi], al
  3265 000029ED 46                  <1> 	inc esi
  3266 000029EE E9F0FFFFFF          <1> 	jmp clearbuftxt
  3267                              <1> 
  3268 000029F3 39DE                <1> clearitbuf: cmp esi, ebx
  3269 000029F5 7308                <1> 	jae retbufclr
  3270 000029F7 8806                <1> 	mov [esi], al
  3271 000029F9 46                  <1> 	inc esi
  3272 000029FA E9F4FFFFFF          <1> 	jmp clearitbuf
  3273 000029FF C3                  <1> retbufclr: ret
  3274                              <1> 
  3275 00002A00 E900000000          <1> full:	jmp nwcmd
  3276                              <1> 
  3277                              <1> shush:	;SollerOS Hardly Unix-compatible Shell
  3278                              <1> nwcmd:
  3279 00002A05 FB                  <1> 	sti
  3280 00002A06 31C0                <1> 	xor eax, eax
  3281 00002A08 3905[E62B0000]      <1> 	cmp [nextcommandloc], eax
  3282 00002A0E 7416                <1> 	je nomultiplecommand
  3283 00002A10 8B35[E62B0000]      <1> 	mov esi, [nextcommandloc]
  3284 00002A16 8935[EA2B0000]      <1> 	mov [thiscommandloc], esi
  3285 00002A1C E8D2010000          <1> 	call fixvariables
  3286 00002A21 E9DFFFFFFF          <1> 	jmp nwcmd
  3287                              <1> nomultiplecommand:
  3288 00002A26 A3[EA2B0000]        <1> 	mov [thiscommandloc], eax
  3289 00002A2B 3805[CE640000]      <1> 	cmp [threadson], al
  3290 00002A31 7405                <1> 	je noclinwcmd
  3291 00002A33 A2[CE640000]        <1> 	mov [threadson], al
  3292                              <1> noclinwcmd:
  3293 00002A38 B001                <1> 	mov al, 1
  3294 00002A3A 3805[78B10000]      <1> 	cmp [BATCHISON], al
  3295 00002A40 7501                <1> 	jne cancel
  3296 00002A42 C3                  <1> 	ret
  3297 00002A43 30C0                <1> cancel:	xor al, al
  3298 00002A45 A2[0FB10000]        <1> 	mov [IFON], al
  3299 00002A4A A2[78B10000]        <1> 	mov [BATCHISON], al
  3300 00002A4F B05B                <1> 	mov al, '['
  3301 00002A51 66BB0700            <1> 	mov bx, 7
  3302 00002A55 E837F8FFFF          <1> 	call prcharq
  3303 00002A5A 8B35[D8290000]      <1> 	mov esi, [usercache]
  3304 00002A60 E8C7F2FFFF          <1> 	call printquiet
  3305 00002A65 BE[CD860000]        <1> 	mov esi, computer
  3306 00002A6A E8BDF2FFFF          <1> 	call printquiet
  3307 00002A6F BE[0AAF0000]        <1> 	mov esi, currentfolder
  3308 00002A74 0335[02AF0000]      <1> 	add esi, [lastfolderloc]
  3309 00002A7A E8ADF2FFFF          <1> 	call printquiet
  3310 00002A7F BE[D8860000]        <1> 	mov esi, endprompt
  3311 00002A84 E8B5F2FFFF          <1> 	call print
  3312 00002A89 E84EFFFFFF          <1> 	call buftxtclear
  3313 00002A8E BE[7EC50000]        <1> 	mov esi, buftxt
  3314 00002A93 C605[04220000]01    <1> 	mov byte [commandedit], 1
  3315 00002A9A B00A                <1> 	mov al, 10
  3316 00002A9C 66BB0700            <1> 	mov bx, 7
  3317 00002AA0 BF[7EC90000]        <1> 	mov edi, buftxtend
  3318 00002AA5 E87FF3FFFF          <1> 	call rdprint
  3319 00002AAA C605[04220000]00    <1> 	mov byte [commandedit], 0
  3320 00002AB1 803D[7EC50000]00    <1> 	cmp byte [buftxt], 0
  3321 00002AB8 0F8447FFFFFF        <1> 	je near nwcmd
  3322 00002ABE 8B35[E0B52900]      <1> gotcmd:	mov esi, [commandbufpos]
  3323 00002AC4 8935[DCB52900]      <1> 	mov [lastcommandpos], esi
  3324 00002ACA FF05[E8B52900]      <1> 	inc dword [commandsentered]
  3325 00002AD0 BF[7EC50000]        <1> 	mov edi, buftxt
  3326 00002AD5 81C6[ECB52900]      <1> 	add esi, commandbuf
  3327 00002ADB 81FE[ECC52900]      <1> 	cmp esi, commandbufend
  3328 00002AE1 7605                <1> 	jbe copycommand
  3329 00002AE3 BE[ECB52900]        <1> 	mov esi, commandbuf
  3330                              <1> copycommand:
  3331 00002AE8 8A07                <1> 	mov al, [edi]
  3332 00002AEA 8806                <1> 	mov [esi], al
  3333 00002AEC 47                  <1> 	inc edi
  3334 00002AED 46                  <1> 	inc esi
  3335 00002AEE 3C00                <1> 	cmp al, 0
  3336 00002AF0 7412                <1> 	je donecopy
  3337 00002AF2 81FE[ECC52900]      <1> 	cmp esi, commandbufend
  3338 00002AF8 76EE                <1> 	jbe copycommand
  3339 00002AFA BE[ECB52900]        <1> 	mov esi, commandbuf
  3340 00002AFF E9E4FFFFFF          <1> 	jmp copycommand
  3341                              <1> donecopy:
  3342 00002B04 81EE[ECB52900]      <1> 	sub esi, commandbuf
  3343 00002B0A 8935[E0B52900]      <1> 	mov [commandbufpos], esi
  3344 00002B10 E8D9000000          <1> 	call run
  3345 00002B15 E9EBFEFFFF          <1> 	jmp nwcmd
  3346                              <1> 
  3347 00002B1A E8BDFEFFFF          <1> input:	call buftxtclear
  3348 00002B1F BE[7EC50000]        <1> 	mov esi, buftxt		;puts input into buftxt AND onto screen
  3349 00002B24 BF[7EC90000]        <1> 	mov edi, buftxtend
  3350 00002B29 B00A                <1> stdin:	mov al, 10
  3351 00002B2B B307                <1> 	mov bl, 7
  3352 00002B2D E8F7F2FFFF          <1> 	call rdprint
  3353 00002B32 C3                  <1> 	ret
  3354                              <1> 
  3355                              <1> replacevariable:
  3356 00002B33 8A4601              <1> 	mov al, [esi + 1]
  3357 00002B36 C64601FF            <1> 	mov byte [esi + 1], 255
  3358 00002B3A 3C24                <1> 	cmp al, "$"
  3359 00002B3C 0F84B1000000        <1> 	je near fixvariables
  3360 00002B42 884601              <1> 	mov [esi + 1], al
  3361 00002B45 56                  <1> 	push esi
  3362 00002B46 81EE[7EC50000]      <1> 	sub esi, buftxt
  3363 00002B4C 89F7                <1> 	mov edi, esi
  3364 00002B4E 81C6[7EC50000]      <1> 	add esi, buftxt
  3365 00002B54 47                  <1> 	inc edi
  3366 00002B55 BB[7EB10000]        <1> 	mov ebx, variables
  3367 00002B5A E8BD140000          <1> 	call nxtvrech
  3368 00002B5F 89F7                <1> 	mov edi, esi
  3369 00002B61 31DB                <1> 	xor ebx, ebx
  3370 00002B63 4E                  <1> 	dec esi
  3371                              <1> findvarname:
  3372 00002B64 4E                  <1> 	dec esi
  3373 00002B65 8A06                <1> 	mov al, [esi]
  3374 00002B67 43                  <1> 	inc ebx
  3375 00002B68 3C04                <1> 	cmp al, 4
  3376 00002B6A 75F8                <1> 	jne findvarname
  3377 00002B6C 5E                  <1> 	pop esi
  3378                              <1> replacevarloop:
  3379 00002B6D 8A07                <1> 	mov al, [edi]
  3380 00002B6F 3C00                <1> 	cmp al, 0
  3381 00002B71 0F8416000000        <1> 	je near compressbuftxt
  3382 00002B77 81FB00000000        <1> 	cmp ebx, 0
  3383 00002B7D 0F8419000000        <1> 	je near expandbuftxt
  3384 00002B83 8806                <1> 	mov [esi], al
  3385 00002B85 4B                  <1> 	dec ebx
  3386 00002B86 46                  <1> 	inc esi
  3387 00002B87 47                  <1> 	inc edi
  3388 00002B88 E9E0FFFFFF          <1> 	jmp replacevarloop
  3389                              <1> compressbuftxt:
  3390 00002B8D 8A041E              <1> 	mov al, [esi + ebx]
  3391 00002B90 8806                <1> 	mov [esi], al
  3392 00002B92 46                  <1> 	inc esi
  3393 00002B93 3C00                <1> 	cmp al, 0
  3394 00002B95 75F6                <1> 	jne compressbuftxt
  3395 00002B97 E957000000          <1> 	jmp fixvariables
  3396                              <1> expandbuftxt:
  3397 00002B9C 89F1                <1> 	mov ecx, esi
  3398 00002B9E 8A26                <1> 	mov ah, [esi]
  3399                              <1> expandbuftxtlp:
  3400 00002BA0 8A1E                <1> 	mov bl, [esi]
  3401 00002BA2 46                  <1> 	inc esi
  3402 00002BA3 8A3E                <1> 	mov bh, [esi]
  3403 00002BA5 8826                <1> 	mov [esi], ah
  3404 00002BA7 88FC                <1> 	mov ah, bh
  3405 00002BA9 80FB00              <1> 	cmp bl, 0
  3406 00002BAC 75F2                <1> 	jne expandbuftxtlp
  3407 00002BAE 89CE                <1> 	mov esi, ecx
  3408 00002BB0 8806                <1> 	mov [esi], al
  3409 00002BB2 47                  <1> 	inc edi
  3410 00002BB3 8A07                <1> 	mov al, [edi]
  3411 00002BB5 3C00                <1> 	cmp al, 0
  3412 00002BB7 0F8436000000        <1> 	je near fixvariables
  3413 00002BBD 46                  <1> 	inc esi
  3414 00002BBE E9D9FFFFFF          <1> 	jmp expandbuftxt
  3415                              <1> multipleprogline:
  3416 00002BC3 30E4                <1> 	xor ah, ah
  3417 00002BC5 8826                <1> 	mov [esi], ah
  3418 00002BC7 46                  <1> 	inc esi
  3419 00002BC8 8935[E62B0000]      <1> 	mov [nextcommandloc], esi
  3420 00002BCE E93E000000          <1> 	jmp donefixvariables
  3421                              <1> inlinecomment:	;if the following char is #, include a #, otherwise end the line
  3422 00002BD3 46                  <1> 	inc esi
  3423 00002BD4 8A06                <1> 	mov al, [esi]
  3424 00002BD6 C606FF              <1> 	mov byte [esi], 255
  3425 00002BD9 3C23                <1> 	cmp al, '#'
  3426 00002BDB 7416                <1> 	je fixvariables
  3427 00002BDD 4E                  <1> 	dec esi
  3428 00002BDE C60600              <1> 	mov byte [esi], 0
  3429 00002BE1 E90D000000          <1> 	jmp fixvariables
  3430                              <1> 	
  3431 00002BE6 00000000            <1> nextcommandloc dd 0
  3432 00002BEA 00000000            <1> thiscommandloc dd 0	
  3433                              <1> run:
  3434 00002BEE BE[7EC50000]        <1> 	mov esi, buftxt
  3435                              <1> fixvariables:
  3436 00002BF3 46                  <1> 	inc esi
  3437 00002BF4 8A06                <1> 	mov al, [esi]
  3438 00002BF6 3C23                <1> 	cmp al, '#'	;inline comment
  3439 00002BF8 74D9                <1> 	je inlinecomment
  3440 00002BFA 3C24                <1> 	cmp al, '$' ;variable
  3441 00002BFC 0F8431FFFFFF        <1> 	je near replacevariable
  3442 00002C02 3C3B                <1> 	cmp al, ';' ;program list
  3443 00002C04 74BD                <1> 	je multipleprogline
  3444 00002C06 3C00                <1> 	cmp al, 0
  3445 00002C08 75E9                <1> 	jne fixvariables
  3446 00002C0A 31C0                <1> 	xor eax, eax
  3447 00002C0C A3[E62B0000]        <1> 	mov [nextcommandloc], eax
  3448                              <1> donefixvariables:
  3449 00002C11 803D[F1310000]00    <1> 	cmp byte [indexdone], 0
  3450 00002C18 7505                <1> 	jne progtest
  3451 00002C1A E834050000          <1> 	call indexfiles
  3452                              <1> progtest:
  3453 00002C1F 31C0                <1> 	xor eax, eax
  3454 00002C21 BB[FEAA0000]        <1> 	mov ebx, fileindex
  3455 00002C26 668B03              <1> prgnxt:	mov ax, [ebx]
  3456 00002C29 B1FF                <1> 	mov cl, 255
  3457 00002C2B B52C                <1> 	mov ch, 44
  3458 00002C2D 6639C8              <1> 	cmp ax, cx
  3459 00002C30 740E                <1> 	je fndprg
  3460 00002C32 43                  <1> 	inc ebx
  3461 00002C33 81FB[FEAE0000]      <1> 	cmp ebx, fileindexend
  3462 00002C39 7363                <1> 	jae prgnf
  3463 00002C3B E9E6FFFFFF          <1> 	jmp prgnxt
  3464 00002C40 81C302000000        <1> fndprg: add ebx, 2
  3465 00002C46 31C9                <1> 	xor ecx, ecx
  3466 00002C48 BE[7EC50000]        <1> 	mov esi, buftxt
  3467 00002C4D 390D[EA2B0000]      <1> 	cmp [thiscommandloc], ecx
  3468 00002C53 7406                <1> 	je noprgtstmultiple
  3469 00002C55 8B35[EA2B0000]      <1> 	mov esi, [thiscommandloc]
  3470                              <1> noprgtstmultiple:
  3471 00002C5B E8AF000000          <1> 	call cndtest
  3472 00002C60 3C01                <1> 	cmp al, 1
  3473 00002C62 7305                <1> 	jae prggood
  3474 00002C64 E9BDFFFFFF          <1> 	jmp prgnxt
  3475 00002C69 81FB[FEAE0000]      <1> prggood: cmp ebx, fileindexend
  3476 00002C6F 7358                <1> 	jae prgdn
  3477 00002C71 31C0                <1> 	xor eax, eax
  3478 00002C73 BE[7EC50000]        <1> 	mov esi, buftxt
  3479 00002C78 3905[EA2B0000]      <1> 	cmp [thiscommandloc], eax
  3480 00002C7E 7406                <1> 	je noprggoodmul
  3481 00002C80 8B35[EA2B0000]      <1> 	mov esi, [thiscommandloc]
  3482                              <1> noprggoodmul:
  3483 00002C86 8935[CA2C0000]      <1> 	mov [currentcommandloc], esi
  3484 00002C8C 81C303000000        <1> 	add ebx, 3
  3485 00002C92 8B3B                <1> 	mov edi, [ebx]
  3486 00002C94 C605[CE640000]02    <1> 	mov byte [threadson], 2
  3487 00002C9B FFD7                <1> 	call edi
  3488 00002C9D C3                  <1> 	ret
  3489                              <1> prgnf:	
  3490 00002C9E 8B35[CA2C0000]      <1> 	mov esi, [currentcommandloc]
  3491 00002CA4 8A06                <1> 	mov al, [esi]
  3492 00002CA6 3C00                <1> 	cmp al, 0
  3493 00002CA8 741F                <1> 	je prgdn
  3494 00002CAA BE[A4860000]        <1> 	mov esi, notfound1
  3495 00002CAF E88AF0FFFF          <1> 	call print
  3496 00002CB4 8B35[CA2C0000]      <1> 	mov esi, [currentcommandloc]
  3497 00002CBA E87FF0FFFF          <1> 	call print
  3498 00002CBF BE[AC860000]        <1> 	mov esi, notfound2
  3499 00002CC4 E875F0FFFF          <1> 	call print
  3500 00002CC9 C3                  <1> prgdn:	ret
  3501                              <1> 
  3502 00002CCA 00000000            <1> currentcommandloc dd 0
  3503                              <1> 
  3504                              <1> tester:			;si=user bx=prog returns 1 in al if true
  3505 00002CCE 6631C0              <1> 	xor ax, ax
  3506 00002CD1 8A06                <1> retest:	mov al, [esi]
  3507 00002CD3 8A23                <1> 	mov ah, [ebx]
  3508 00002CD5 3C00                <1> 	cmp al, 0
  3509 00002CD7 740B                <1> 	je testtrue
  3510 00002CD9 38E0                <1> 	cmp al, ah
  3511 00002CDB 750F                <1> 	jne testfalse
  3512 00002CDD 43                  <1> 	inc ebx
  3513 00002CDE 46                  <1> 	inc esi
  3514 00002CDF E9EDFFFFFF          <1> 	jmp retest
  3515                              <1> testtrue:
  3516 00002CE4 80FC00              <1> 	cmp ah, 0
  3517 00002CE7 7503                <1> 	jne testfalse
  3518 00002CE9 B001                <1> 	mov al, 1
  3519 00002CEB C3                  <1> 	ret
  3520                              <1> testfalse:
  3521 00002CEC 30C0                <1> 	xor al, al
  3522 00002CEE C3                  <1> 	ret
  3523                              <1> 
  3524                              <1> optest:			;si=user bx=prog returns 1 in al if true
  3525 00002CEF 30C0                <1> 	xor al, al
  3526                              <1> opretest:
  3527 00002CF1 8A06                <1> 	mov al, [esi]
  3528 00002CF3 8A23                <1> 	mov ah, [ebx]
  3529 00002CF5 38E0                <1> 	cmp al, ah
  3530 00002CF7 7513                <1> 	jne optestfalse
  3531 00002CF9 80FC00              <1> 	cmp ah, 0
  3532 00002CFC 7407                <1> 	je optesttrue
  3533 00002CFE 43                  <1> 	inc ebx
  3534 00002CFF 46                  <1> 	inc esi
  3535 00002D00 E9ECFFFFFF          <1> 	jmp opretest
  3536                              <1> optesttrue:
  3537 00002D05 3C00                <1> 	cmp al, 0
  3538 00002D07 7503                <1> 	jne optestfalse
  3539 00002D09 B001                <1> 	mov al, 1
  3540 00002D0B C3                  <1> 	ret
  3541                              <1> optestfalse:
  3542 00002D0C 30C0                <1> 	xor al, al
  3543 00002D0E C3                  <1> 	ret
  3544                              <1> 
  3545                              <1> cndtest:			;si=user bx=prog cl=endchar returns 1 in al if true
  3546 00002D0F 30C0                <1> 	xor al, al
  3547 00002D11 8A06                <1> cndretest:	mov al, [esi]
  3548 00002D13 8A23                <1> 	mov ah, [ebx]
  3549 00002D15 38CC                <1> 	cmp ah, cl
  3550 00002D17 740B                <1> 	je cndtesttrue
  3551 00002D19 38E0                <1> 	cmp al, ah
  3552 00002D1B 750E                <1> 	jne cndtestfalse
  3553 00002D1D 43                  <1> 	inc ebx
  3554 00002D1E 46                  <1> 	inc esi
  3555 00002D1F E9EDFFFFFF          <1> 	jmp cndretest
  3556                              <1> cndtesttrue:
  3557 00002D24 38C8                <1> 	cmp al, cl
  3558 00002D26 7506                <1> 	jne cndtestalmost
  3559 00002D28 B001                <1> 	mov al, 1
  3560 00002D2A C3                  <1> 	ret
  3561                              <1> cndtestfalse:
  3562 00002D2B 30C0                <1> 	xor al, al
  3563 00002D2D C3                  <1> 	ret
  3564                              <1> cndtestalmost:
  3565 00002D2E B002                <1> 	mov al, 2
  3566 00002D30 C3                  <1> 	ret
  3567                              <1> 	
  3568                              <1> array:				;arraystart in si, arrayend in bx, arrayseperator in cx
  3569                              <1> 		                ;ends if array seperator is found backwards after 0
  3570                              <1> 	arnxt:	      
  3571 00002D31 88E8                <1> 		mov al, ch
  3572 00002D33 88CC                <1> 		mov ah, cl        
  3573 00002D35 663906              <1> 		cmp [esi], ax
  3574 00002D38 7453                <1> 		je ardn
  3575 00002D3A 66390E              <1> 		cmp [esi], cx
  3576 00002D3D 740A                <1> 		je arfnd
  3577 00002D3F 46                  <1> 		inc esi
  3578 00002D40 39DE                <1> 		cmp esi, ebx
  3579 00002D42 7349                <1> 		jae ardn
  3580 00002D44 E9E8FFFFFF          <1> 		jmp arnxt
  3581 00002D49 81C602000000        <1> 	arfnd: add esi, 2
  3582 00002D4F 891D[8E2D0000]      <1> 		mov [arbx], ebx
  3583 00002D55 890D[922D0000]      <1> 		mov [arcx], ecx
  3584 00002D5B E8DEEFFFFF          <1> 		call print
  3585 00002D60 8935[942D0000]      <1> 		mov [arsi], esi
  3586 00002D66 BE[DD860000]        <1> 		mov esi, line
  3587 00002D6B E8CEEFFFFF          <1> 		call print
  3588 00002D70 8B1D[8E2D0000]      <1> 		mov ebx, [arbx]
  3589 00002D76 668B0D[922D0000]    <1> 		mov cx, [arcx]
  3590 00002D7D 8B35[942D0000]      <1> 		mov esi, [arsi]
  3591 00002D83 46                  <1> 		inc esi
  3592 00002D84 39DE                <1> 		cmp esi, ebx
  3593 00002D86 7305                <1> 		jae ardn
  3594 00002D88 E9A4FFFFFF          <1> 		jmp arnxt
  3595 00002D8D C3                  <1> 	ardn:	ret
  3596 00002D8E 00000000            <1> arbx:	dw 0,0
  3597 00002D92 0000                <1> arcx:	db 0,0
  3598 00002D94 00000000            <1> arsi:	dw 0,0
  3599                              <1> 
  3600                              <1> clearbuffer:
  3601 00002D98 BE[7EC90000]        <1> 	mov esi, buf2
  3602 00002D9D B030                <1> 	mov al, '0'
  3603 00002D9F 81FE[92C90000]      <1> clearbuf: cmp esi, numbuf
  3604 00002DA5 7308                <1> 	jae doneclearbuff
  3605 00002DA7 8806                <1> 	mov [esi], al
  3606 00002DA9 46                  <1> 	inc esi
  3607 00002DAA E9F0FFFFFF          <1> 	jmp clearbuf
  3608                              <1> doneclearbuff: 
  3609 00002DAF C3                  <1> 		ret
  3610                              <1> 
  3611                              <1> convert:
  3612 00002DB0 4E                  <1> 	dec esi
  3613 00002DB1 89F3                <1> 	mov ebx, esi		;place to convert into must be in esi, number to convert must be in ecx
  3614                              <1> .lp:
  3615 00002DB3 89DE                <1> 	mov esi, ebx
  3616 00002DB5 81EE09000000        <1> 	sub esi, 9
  3617 00002DBB 81F900CA9A3B        <1> 	cmp ecx, 1000000000
  3618 00002DC1 720D                <1> 	jb .8
  3619 00002DC3 81E900CA9A3B        <1> 	sub ecx, 1000000000
  3620 00002DC9 FE06                <1> 	inc byte [esi]
  3621 00002DCB E9E3FFFFFF          <1> 	jmp .lp
  3622 00002DD0 46                  <1> .8:	inc esi
  3623 00002DD1 81F900E1F505        <1> 	cmp ecx, 100000000
  3624 00002DD7 720D                <1> 	jb .7
  3625 00002DD9 81E900E1F505        <1> 	sub ecx, 100000000
  3626 00002DDF FE06                <1> 	inc byte [esi]
  3627 00002DE1 E9CDFFFFFF          <1> 	jmp .lp
  3628 00002DE6 46                  <1> .7:	inc esi
  3629 00002DE7 81F980969800        <1> 	cmp ecx, 10000000
  3630 00002DED 720D                <1> 	jb .6
  3631 00002DEF 81E980969800        <1> 	sub ecx, 10000000
  3632 00002DF5 FE06                <1> 	inc byte [esi]
  3633 00002DF7 E9B7FFFFFF          <1> 	jmp .lp
  3634 00002DFC 46                  <1> .6:	inc esi
  3635 00002DFD 81F940420F00        <1> 	cmp ecx, 1000000
  3636 00002E03 720D                <1> 	jb .5
  3637 00002E05 81E940420F00        <1> 	sub ecx, 1000000
  3638 00002E0B FE06                <1> 	inc byte [esi]
  3639 00002E0D E9A1FFFFFF          <1> 	jmp .lp
  3640 00002E12 46                  <1> .5:	inc esi
  3641 00002E13 81F9A0860100        <1> 	cmp ecx, 100000
  3642 00002E19 720D                <1> 	jb .4
  3643 00002E1B 81E9A0860100        <1> 	sub ecx, 100000
  3644 00002E21 FE06                <1> 	inc byte [esi]
  3645 00002E23 E98BFFFFFF          <1> 	jmp .lp
  3646 00002E28 46                  <1> .4:	inc esi
  3647 00002E29 81F910270000        <1> 	cmp ecx, 10000
  3648 00002E2F 720D                <1> 	jb .3
  3649 00002E31 81E910270000        <1> 	sub ecx, 10000
  3650 00002E37 FE06                <1> 	inc byte [esi]
  3651 00002E39 E975FFFFFF          <1> 	jmp .lp
  3652 00002E3E 46                  <1> .3:	inc esi
  3653 00002E3F 81F9E8030000        <1> 	cmp ecx, 1000
  3654 00002E45 720D                <1> 	jb .2
  3655 00002E47 81E9E8030000        <1> 	sub ecx, 1000
  3656 00002E4D FE06                <1> 	inc byte [esi]
  3657 00002E4F E95FFFFFFF          <1> 	jmp .lp
  3658 00002E54 46                  <1> .2:	inc esi
  3659 00002E55 81F964000000        <1> 	cmp ecx, 100
  3660 00002E5B 720D                <1> 	jb .1
  3661 00002E5D 81E964000000        <1> 	sub ecx, 100
  3662 00002E63 FE06                <1> 	inc byte [esi]
  3663 00002E65 E949FFFFFF          <1> 	jmp .lp
  3664 00002E6A 46                  <1> .1:	inc esi
  3665 00002E6B 81F90A000000        <1> 	cmp ecx, 10
  3666 00002E71 720D                <1> 	jb .0
  3667 00002E73 81E90A000000        <1> 	sub ecx, 10
  3668 00002E79 FE06                <1> 	inc byte [esi]
  3669 00002E7B E933FFFFFF          <1> 	jmp .lp
  3670 00002E80 46                  <1> .0:	inc esi
  3671 00002E81 81F901000000        <1> 	cmp ecx, 1
  3672 00002E87 720D                <1> 	jb .dn
  3673 00002E89 81E901000000        <1> 	sub ecx, 1
  3674 00002E8F FE06                <1> 	inc byte [esi]
  3675 00002E91 E91DFFFFFF          <1> 	jmp .lp
  3676                              <1> .dn:
  3677 00002E96 C3                  <1> 	ret
  3678                              <1> 
  3679                              <1> 	
  3680                              <1> 
  3681 00002E97 00<rept>            <1> hexnumber times 8 db 0
  3682 00002E9F 202000              <1> hexnumberend db "  ",0
  3683                              <1> 
  3684                              <1> converthex:
  3685                              <1> .clear:	;place to convert to in esi, end of buffer in edi number in ecx
  3686 00002EA2 56                  <1> 	push esi
  3687 00002EA3 B030                <1> 	mov al, "0"
  3688 00002EA5 39FE                <1> .clearlp: cmp esi, edi
  3689 00002EA7 7308                <1> 	jae .doneclear
  3690 00002EA9 8806                <1> 	mov [esi], al
  3691 00002EAB 46                  <1> 	inc esi
  3692 00002EAC E9F4FFFFFF          <1> 	jmp .clearlp
  3693                              <1> .doneclear:
  3694 00002EB1 81EE02000000        <1> 	sub esi, 2
  3695 00002EB7 89C8                <1> 	mov eax, ecx
  3696                              <1> .loop:
  3697 00002EB9 30FF                <1> 	xor bh, bh
  3698 00002EBB 88C3                <1> 	mov bl, al
  3699 00002EBD 66C1E304            <1> 	shl bx, 4
  3700 00002EC1 C0EB04              <1> 	shr bl, 4
  3701 00002EC4 86DF                <1> 	xchg bl, bh ;they are backwards
  3702 00002EC6 80C330              <1> 	add bl, 48
  3703 00002EC9 80FB39              <1> 	cmp bl, "9"
  3704 00002ECC 7609                <1> 	jbe .goodbl
  3705 00002ECE 80EB30              <1> 	sub bl, 48
  3706 00002ED1 80EB0A              <1> 	sub bl, 0xA
  3707 00002ED4 80C341              <1> 	add bl, "A"
  3708                              <1> .goodbl:
  3709 00002ED7 80C730              <1> 	add bh, 48
  3710 00002EDA 80FF39              <1> 	cmp bh, "9"
  3711 00002EDD 7609                <1> 	jbe .goodbh
  3712 00002EDF 80EF30              <1> 	sub bh, 48
  3713 00002EE2 80EF0A              <1> 	sub bh, 0xA
  3714 00002EE5 80C741              <1> 	add bh, "A"
  3715                              <1> .goodbh:
  3716 00002EE8 C1E808              <1> 	shr eax, 8
  3717 00002EEB 66891E              <1> 	mov [esi], bx
  3718 00002EEE 81EE02000000        <1> 	sub esi, 2
  3719 00002EF4 3B3424              <1> 	cmp esi, [esp]
  3720 00002EF7 7207                <1> 	jb .done
  3721 00002EF9 3D00000000          <1> 	cmp eax, 0
  3722 00002EFE 75B9                <1> 	jne .loop
  3723                              <1> .done:
  3724 00002F00 5E                  <1> 	pop esi
  3725 00002F01 C3                  <1> 	ret
  3726                              <1> 	
  3727                              <1> 	
  3728 00002F02 00                  <1> smallhex db 0
  3729 00002F03 01                  <1> firsthexshown db 1
  3730                              <1> showhexsmall:
  3731 00002F04 C605[022F0000]01    <1> 	mov byte [smallhex], 1
  3732 00002F0B E808000000          <1> 	call showhex
  3733 00002F10 C605[022F0000]00    <1> 	mov byte [smallhex], 0
  3734 00002F17 C3                  <1> 	ret
  3735                              <1> showhex:
  3736 00002F18 60                  <1> 	pusha
  3737 00002F19 BE[972E0000]        <1> 	mov esi, hexnumber
  3738 00002F1E BF[9F2E0000]        <1> 	mov edi, hexnumberend
  3739 00002F23 E87AFFFFFF          <1> 	call converthex
  3740 00002F28 803D[032F0000]01    <1> 	cmp byte [firsthexshown], 1
  3741 00002F2F 7503                <1> 	jne .show
  3742 00002F31 6631D2              <1> 	xor dx, dx
  3743                              <1> .show:
  3744 00002F34 803D[032F0000]03    <1> 	cmp byte [firsthexshown], 3
  3745 00002F3B 750A                <1> 	jne .nonewhexline
  3746 00002F3D BE[DD860000]        <1> 	mov esi, line
  3747 00002F42 E8F7EDFFFF          <1> 	call print
  3748                              <1> .nonewhexline:
  3749 00002F47 803D[032F0000]04    <1> 	cmp byte [firsthexshown], 4
  3750 00002F4E 7527                <1> 	jne .notab
  3751 00002F50 B1A0                <1> 	mov cl, 160
  3752 00002F52 28D1                <1> 	sub cl, dl
  3753 00002F54 C0E905              <1> 	shr cl, 5
  3754 00002F57 C0E105              <1> 	shl cl, 5
  3755 00002F5A 80F900              <1> 	cmp cl, 0
  3756 00002F5D 750F                <1> 	jne .nonewline
  3757 00002F5F BE[DD860000]        <1> 	mov esi, line
  3758 00002F64 E8D5EDFFFF          <1> 	call print
  3759 00002F69 E909000000          <1> 	jmp .notab
  3760                              <1> .nonewline:
  3761 00002F6E 80C20F              <1> 	add dl, 15
  3762 00002F71 C0EA04              <1> 	shr dl, 4
  3763 00002F74 C0E204              <1> 	shl dl, 4
  3764                              <1> .notab:
  3765 00002F77 BE[972E0000]        <1> 	mov esi, hexnumber
  3766 00002F7C 803D[022F0000]01    <1> 	cmp byte [smallhex],1
  3767 00002F83 7506                <1> 	jne .nosmall
  3768 00002F85 81C606000000        <1> 	add esi, 6
  3769                              <1> .nosmall:
  3770 00002F8B 803D[032F0000]05    <1> 	cmp byte [firsthexshown], 5
  3771 00002F92 750A                <1> 	jne .noquiet
  3772 00002F94 E893EDFFFF          <1> 	call printquiet
  3773 00002F99 E918000000          <1> 	jmp .donequiet
  3774                              <1> .noquiet:
  3775 00002F9E 803D[032F0000]06    <1> 	cmp byte [firsthexshown], 6
  3776 00002FA5 750A                <1> 	jne .normal
  3777 00002FA7 E874EDFFFF          <1> 	call printhighlight
  3778 00002FAC E905000000          <1> 	jmp .donequiet
  3779                              <1> .normal:
  3780 00002FB1 E888EDFFFF          <1> 	call print
  3781                              <1> .donequiet:
  3782 00002FB6 803D[032F0000]02    <1> 	cmp byte [firsthexshown], 2
  3783 00002FBD 750A                <1> 	jne .shown
  3784 00002FBF BE[DD860000]        <1> 	mov esi, line
  3785 00002FC4 E875EDFFFF          <1> 	call print
  3786                              <1> .shown:
  3787 00002FC9 C605[032F0000]00    <1> 	mov byte [firsthexshown], 0
  3788 00002FD0 61                  <1> 	popa
  3789 00002FD1 C3                  <1> 	ret
  3790                              <1> 
  3791                              <1> 
  3792 00002FD2 303030303030303030- <1> decnumber db "00000000000000"
  3793 00002FDB 3030303030          <1>
  3794 00002FE0 2000                <1> decnumberend: db " ",0
  3795                              <1> 
  3796                              <1> showdec: ;;same as showhex, just uses decimal conversion
  3797 00002FE2 60                  <1> 	pusha
  3798 00002FE3 BF[D22F0000]        <1> 	mov edi, decnumber
  3799 00002FE8 BE[E02F0000]        <1> 	mov esi, decnumberend
  3800                              <1> .clear:
  3801 00002FED C60730              <1> 	mov byte [edi], '0'
  3802 00002FF0 47                  <1> 	inc edi
  3803 00002FF1 39F7                <1> 	cmp edi, esi
  3804 00002FF3 72F8                <1> 	jb .clear
  3805 00002FF5 BF[D22F0000]        <1> 	mov edi, decnumber
  3806 00002FFA E8B1FDFFFF          <1> 	call convert
  3807 00002FFF 803D[032F0000]01    <1> 	cmp byte [firsthexshown], 1
  3808 00003006 7503                <1> 	jne .show
  3809 00003008 6631D2              <1> 	xor dx, dx
  3810                              <1> .show:
  3811 0000300B 803D[032F0000]03    <1> 	cmp byte [firsthexshown], 3
  3812 00003012 750A                <1> 	jne .nonewdecline
  3813 00003014 BE[DD860000]        <1> 	mov esi, line
  3814 00003019 E820EDFFFF          <1> 	call print
  3815                              <1> .nonewdecline:
  3816 0000301E 803D[032F0000]04    <1> 	cmp byte [firsthexshown], 4
  3817 00003025 7527                <1> 	jne .notab
  3818 00003027 B1A0                <1> 	mov cl, 160
  3819 00003029 28D1                <1> 	sub cl, dl
  3820 0000302B C0E905              <1> 	shr cl, 5
  3821 0000302E C0E105              <1> 	shl cl, 5
  3822 00003031 80F900              <1> 	cmp cl, 0
  3823 00003034 750F                <1> 	jne .nonewline
  3824 00003036 BE[DD860000]        <1> 	mov esi, line
  3825 0000303B E8FEECFFFF          <1> 	call print
  3826 00003040 E909000000          <1> 	jmp .notab
  3827                              <1> .nonewline:
  3828 00003045 80C20F              <1> 	add dl, 15
  3829 00003048 C0EA04              <1> 	shr dl, 4
  3830 0000304B C0E204              <1> 	shl dl, 4
  3831                              <1> .notab:
  3832 0000304E BE[D22F0000]        <1> 	mov esi, decnumber
  3833 00003053 4E                  <1> 	dec esi
  3834                              <1> .sifind:
  3835 00003054 46                  <1> 	inc esi
  3836 00003055 803E30              <1> 	cmp byte [esi], '0'
  3837 00003058 74FA                <1> 	je .sifind
  3838 0000305A E8DFECFFFF          <1> 	call print
  3839 0000305F 803D[032F0000]02    <1> 	cmp byte [firsthexshown], 2
  3840 00003066 750A                <1> 	jne .shown
  3841 00003068 BE[DD860000]        <1> 	mov esi, line
  3842 0000306D E8CCECFFFF          <1> 	call print
  3843                              <1> .shown:
  3844 00003072 C605[032F0000]00    <1> 	mov byte [firsthexshown], 0
  3845 00003079 61                  <1> 	popa
  3846 0000307A C3                  <1> 	ret
  3847                              <1> 	
  3848                              <1> cnvrthextxt:
  3849 0000307B 31C9                <1> 	xor ecx, ecx
  3850 0000307D 31C0                <1> 	xor eax, eax
  3851 0000307F 31D2                <1> 	xor edx, edx
  3852 00003081 31DB                <1> 	xor ebx, ebx
  3853 00003083 4E                  <1> 	dec esi
  3854                              <1> .end:
  3855 00003084 46                  <1> 	inc esi
  3856 00003085 8A06                <1> 	mov al, [esi]
  3857 00003087 3C00                <1> 	cmp al, 0
  3858 00003089 75F9                <1> 	jne .end
  3859                              <1> .loop:
  3860 0000308B 4E                  <1> 	dec esi
  3861 0000308C 8A06                <1> 	mov al, [esi]
  3862 0000308E 3C41                <1> 	cmp al, "A"
  3863 00003090 7328                <1> 	jae .char
  3864 00003092 2C30                <1> 	sub al, 48
  3865 00003094 3C10                <1> 	cmp al, 16
  3866 00003096 7721                <1> 	ja .done
  3867                              <1> .donechar:
  3868 00003098 81FA00000000        <1> 	cmp edx, 0
  3869 0000309E 740E                <1> 	je .noshl
  3870 000030A0 89D3                <1> 	mov ebx, edx
  3871                              <1> .shl:
  3872 000030A2 C1E004              <1> 	shl eax, 4
  3873 000030A5 4B                  <1> 	dec ebx
  3874 000030A6 81FB00000000        <1> 	cmp ebx, 0
  3875 000030AC 75F4                <1> 	jne .shl
  3876                              <1> .noshl:
  3877 000030AE 42                  <1> 	inc edx
  3878 000030AF 01C1                <1> 	add ecx, eax
  3879 000030B1 81FA08000000        <1> 	cmp edx, 8
  3880 000030B7 72D2                <1> 	jb .loop
  3881                              <1> .done:
  3882 000030B9 C3                  <1> 	ret
  3883                              <1> .char:
  3884 000030BA 3C46                <1> 	cmp al, "F"
  3885 000030BC 77FB                <1> 	ja .done
  3886 000030BE 2C41                <1> 	sub al, "A"
  3887 000030C0 040A                <1> 	add al, 0xA
  3888 000030C2 E9D1FFFFFF          <1> 	jmp .donechar
  3889                              <1> 	
  3890                              <1> 	
  3891                              <1> cnvrttxt: ;text to convert in esi, first part or 0 in edi
  3892 000030C7 31C9                <1> 	xor ecx, ecx
  3893 000030C9 31C0                <1> 	xor eax, eax
  3894 000030CB 31D2                <1> 	xor edx, edx
  3895 000030CD 31DB                <1> 	xor ebx, ebx
  3896 000030CF 4E                  <1> 	dec esi
  3897                              <1> .lp:
  3898 000030D0 46                  <1> 	inc esi
  3899 000030D1 8A06                <1> 	mov al, [esi]
  3900 000030D3 3C00                <1> 	cmp al, 0
  3901 000030D5 75F9                <1> 	jne .lp
  3902 000030D7 4E                  <1> 	dec esi
  3903 000030D8 8A06                <1> 	mov al, [esi]
  3904 000030DA 3C2E                <1> 	cmp al, '.'
  3905 000030DC 7506                <1> 	jne .dot
  3906 000030DE 46                  <1> 	inc esi
  3907 000030DF E9ECFFFFFF          <1> 	jmp .lp
  3908                              <1> .dot:
  3909 000030E4 3C20                <1> 	cmp al, ' '
  3910 000030E6 7404                <1> 	je .zero
  3911 000030E8 3C30                <1> 	cmp al, '0'
  3912 000030EA 7504                <1> 	jne .txtlp
  3913                              <1> .zero: 
  3914 000030EC 39FE                <1> 		cmp esi, edi
  3915 000030EE 745E                <1> 		je .done
  3916                              <1> .txtlp:
  3917 000030F0 31C0                <1> 	xor eax, eax
  3918 000030F2 8A06                <1> 	mov al, [esi]
  3919 000030F4 3C3D                <1> 	cmp al, '='
  3920 000030F6 7456                <1> 	je .done
  3921 000030F8 3C30                <1> 	cmp al, 48
  3922 000030FA 7252                <1> 	jb .done
  3923 000030FC 3C23                <1> 	cmp al, '#'
  3924 000030FE 744E                <1> 	je .done
  3925 00003100 39FE                <1> 	cmp esi, edi
  3926 00003102 724A                <1> 	jb .done
  3927 00003104 81F900000000        <1> 	cmp ecx, 0
  3928 0000310A 770B                <1> 	ja .exp
  3929 0000310C 2C30                <1> .noexp:	sub al, 48
  3930 0000310E 01C2                <1> 	add edx, eax
  3931 00003110 4E                  <1> 	dec esi
  3932 00003111 41                  <1> 	inc ecx
  3933 00003112 E9D9FFFFFF          <1> 	jmp .txtlp
  3934 00003117 81F900000000        <1> .exp:	cmp ecx, 0
  3935 0000311D 74ED                <1> 	je .noexp
  3936 0000311F 2C30                <1> 	sub al, 48
  3937 00003121 51                  <1> 	push ecx
  3938 00003122 89C3                <1> .expmul:	mov ebx, eax
  3939 00003124 01D8                <1> 	add eax, ebx
  3940 00003126 01D8                <1> 	add eax, ebx
  3941 00003128 01D8                <1> 	add eax, ebx
  3942 0000312A 01D8                <1> 	add eax, ebx
  3943 0000312C 01D8                <1> 	add eax, ebx
  3944 0000312E 01D8                <1> 	add eax, ebx
  3945 00003130 01D8                <1> 	add eax, ebx
  3946 00003132 01D8                <1> 	add eax, ebx
  3947 00003134 01D8                <1> 	add eax, ebx
  3948 00003136 81E901000000        <1> 	sub ecx, 1
  3949 0000313C 81F900000000        <1> 	cmp ecx, 0
  3950 00003142 77DE                <1> 	ja .expmul
  3951 00003144 01C2                <1> 	add edx, eax
  3952 00003146 59                  <1> 	pop ecx
  3953 00003147 4E                  <1> 	dec esi
  3954 00003148 41                  <1> 	inc ecx
  3955 00003149 E9A2FFFFFF          <1> 	jmp .txtlp
  3956 0000314E 89D1                <1> .done: mov ecx, edx
  3957 00003150 C3                  <1> 	ret
  3958                                      %include "source/programs.asm"
  3959 00003151 FF2C                <1> filetypes db 255,44
  3960                              <1> progstart:		;programs start here
  3961                              <1> indexfiles:
  3962 00003153 BE[53310000]        <1> 	mov esi, progstart
  3963 00003158 BB[FEAA0000]        <1> 	mov ebx, fileindex
  3964 0000315D BF[53310000]        <1> 	mov edi, progstart
  3965 00003162 81EF02000000        <1> 	sub edi, 2
  3966                              <1> indexloop:
  3967 00003168 668B0E              <1> 	mov cx, [esi]
  3968                              <1> 	indexloop2:
  3969 0000316B 663B0F              <1> 		cmp cx, [edi]
  3970 0000316E 7427                <1> 		je indexloop2done
  3971 00003170 81EF02000000        <1> 		sub edi, 2
  3972 00003176 81FF[51310000]      <1> 		cmp edi, filetypes
  3973 0000317C 73ED                <1> 		jae indexloop2
  3974 0000317E BF[53310000]        <1> 	mov edi, progstart
  3975 00003183 81EF02000000        <1> 	sub edi, 2
  3976 00003189 46                  <1> 	inc esi
  3977 0000318A 81FE[3F510000]      <1> 	cmp esi, batchprogend
  3978 00003190 7357                <1> 	jae indexloopdone
  3979 00003192 E9D1FFFFFF          <1> 	jmp indexloop
  3980                              <1> indexloop2done:
  3981 00003197 66890B              <1> 	mov [ebx], cx
  3982 0000319A 81C302000000        <1> 	add ebx, 2
  3983 000031A0 81C602000000        <1> 	add esi, 2
  3984                              <1> 	nameindex:
  3985 000031A6 8A0E                <1> 		mov cl, [esi]
  3986 000031A8 80F900              <1> 		cmp cl, 0
  3987 000031AB 7409                <1> 		je nameindexdone
  3988 000031AD 880B                <1> 		mov [ebx], cl
  3989 000031AF 46                  <1> 		inc esi
  3990 000031B0 43                  <1> 		inc ebx
  3991 000031B1 E9F0FFFFFF          <1> 		jmp nameindex
  3992                              <1> 	nameindexdone:
  3993 000031B6 43                  <1> 		inc ebx
  3994 000031B7 66C7030000          <1> 		mov word [ebx], 0
  3995 000031BC 81C302000000        <1> 		add ebx, 2
  3996 000031C2 46                  <1> 		inc esi
  3997 000031C3 8933                <1> 		mov [ebx], esi
  3998 000031C5 81C304000000        <1> 		add ebx, 4
  3999 000031CB 66C7030000          <1> 		mov word [ebx], 0
  4000 000031D0 81C302000000        <1> 		add ebx, 2
  4001 000031D6 81FB[FEAE0000]      <1> 		cmp ebx, fileindexend
  4002 000031DC 730B                <1> 		jae indexloopdone
  4003 000031DE 81C601000000        <1> 		add esi, 1
  4004 000031E4 E97FFFFFFF          <1> 		jmp indexloop
  4005 000031E9 C605[F1310000]01    <1> indexloopdone: 	mov byte [indexdone], 1
  4006 000031F0 C3                  <1> 		ret
  4007 000031F1 00                  <1> indexdone db 0
  4008                              <1> %include 'source/programs/_comment.asm' ;#
  4009 000031F2 FF2C2300            <2> 	db 255,44,"#",0	;this lets you rem stuff
  4010 000031F6 C3                  <2> 	ret 
  4011                              <1> %include 'source/programs/_math.asm' ;!
  4012 000031F7 FF2C2100            <2> db 255,44,"!",0
  4013                              <2> 	num:	
  4014 000031FB E898FBFFFF          <2> 		call clearbuffer
  4015 00003200 C605[93340000]00    <2> 		mov byte [decimal], 0
  4016 00003207 C605[94340000]00    <2> 		mov byte [decimal2], 0
  4017 0000320E 8B35[CA2C0000]      <2> 		mov esi, [currentcommandloc]
  4018 00003214 31C0                <2> 		xor eax, eax
  4019 00003216 31C9                <2> 		xor ecx, ecx
  4020 00003218 31DB                <2> 		xor ebx, ebx
  4021 0000321A 8A06                <2> 	num2:	mov al, [esi]
  4022 0000321C 3C2B                <2> 		cmp al, '+'
  4023 0000321E 741E                <2> 		je operatorfound
  4024 00003220 3C2D                <2> 		cmp al, '-'
  4025 00003222 741A                <2> 		je operatorfound
  4026 00003224 3C2A                <2> 		cmp al, '*'
  4027 00003226 7416                <2> 		je operatorfound
  4028 00003228 3C2F                <2> 		cmp al, '/'
  4029 0000322A 7412                <2> 		je operatorfound
  4030 0000322C 3C5E                <2> 		cmp al, '^'
  4031 0000322E 740E                <2> 		je operatorfound
  4032 00003230 46                  <2> 		inc esi
  4033 00003231 3C00                <2> 		cmp al, 0
  4034 00003233 0F84CCF7FFFF        <2> 		je near nwcmd
  4035 00003239 E9DCFFFFFF          <2> 		jmp num2
  4036 0000323E 50                  <2> 	operatorfound: push eax
  4037 0000323F 30E4                <2> 		xor ah, ah
  4038 00003241 8826                <2> 		mov [esi], ah
  4039 00003243 89F7                <2> 		mov edi, esi
  4040 00003245 46                  <2> 		inc esi
  4041 00003246 8A06                <2> 		mov al, [esi]
  4042 00003248 3C25                <2> 		cmp al, '%'
  4043 0000324A 0F8462000000        <2> 		je near resultnum1
  4044                              <2> 	varnum2: 
  4045 00003250 57                  <2> 		push edi
  4046 00003251 E8AA000000          <2> 		call checkdecimal
  4047 00003256 5F                  <2> 		pop edi
  4048 00003257 E86BFEFFFF          <2> 		call cnvrttxt
  4049                              <2> 	vrnm2:
  4050 0000325C 89CB                <2> 		mov ebx, ecx
  4051 0000325E 53                  <2> 		push ebx
  4052 0000325F E834FBFFFF          <2> 		call clearbuffer
  4053 00003264 8B35[CA2C0000]      <2> 		mov esi, [currentcommandloc]
  4054 0000326A 89F7                <2> 		mov edi, esi
  4055 0000326C 46                  <2> 		inc esi
  4056 0000326D 8A06                <2> 		mov al, [esi]
  4057 0000326F 3C25                <2> 		cmp al, '%'
  4058 00003271 0F8452000000        <2> 		je near resultnum2
  4059                              <2> 	varnum4: 
  4060 00003277 57                  <2> 		push edi
  4061 00003278 E86F000000          <2> 		call checkdecimal2
  4062 0000327D 5F                  <2> 		pop edi
  4063 0000327E E844FEFFFF          <2> 		call cnvrttxt
  4064                              <2> 	vrnm4:
  4065 00003283 5B                  <2> 		pop ebx
  4066 00003284 58                  <2> 		pop eax
  4067 00003285 3C2B                <2> 		cmp al, '+'
  4068 00003287 0F84A7000000        <2> 		je near plusnum
  4069 0000328D 3C2D                <2> 		cmp al, '-'
  4070 0000328F 0F84AB000000        <2> 		je near subnum
  4071 00003295 3C2A                <2> 		cmp al, '*'
  4072 00003297 0F84AF000000        <2> 		je near mulnum
  4073 0000329D 3C2F                <2> 		cmp al, '/'
  4074 0000329F 0F84BD000000        <2> 		je near divnum
  4075 000032A5 3C5E                <2> 		cmp al, '^'
  4076 000032A7 0F84DA000000        <2> 		je near expnum
  4077 000032AD E953F7FFFF          <2> 		jmp nwcmd
  4078                              <2> 	resultnum1:
  4079 000032B2 8A0D[95340000]      <2> 		mov cl, [decimalresult]
  4080 000032B8 880D[93340000]      <2> 		mov [decimal], cl
  4081 000032BE 8B0D[96340000]      <2> 		mov ecx, [result]
  4082 000032C4 E993FFFFFF          <2> 		jmp vrnm2
  4083                              <2> 	resultnum2:
  4084 000032C9 8A0D[93340000]      <2> 		mov cl, [decimal]
  4085 000032CF 880D[94340000]      <2> 		mov [decimal2], cl
  4086 000032D5 8A0D[95340000]      <2> 		mov cl, [decimalresult]
  4087 000032DB 880D[93340000]      <2> 		mov [decimal], cl
  4088 000032E1 8B0D[96340000]      <2> 		mov ecx, [result]
  4089 000032E7 E997FFFFFF          <2> 		jmp vrnm4
  4090                              <2> 	checkdecimal2:
  4091 000032EC 8A25[93340000]      <2> 		mov ah, [decimal]
  4092 000032F2 8825[94340000]      <2> 		mov [decimal2], ah
  4093 000032F8 30E4                <2> 		xor ah, ah
  4094 000032FA 8825[93340000]      <2> 		mov [decimal], ah
  4095                              <2> 	checkdecimal:
  4096 00003300 89F7                <2> 		mov edi, esi
  4097                              <2> 	chkdec1:
  4098 00003302 8A07                <2> 		mov al, [edi]
  4099 00003304 3C2E                <2> 		cmp al, '.'
  4100 00003306 0F840E000000        <2> 		je near fnddec
  4101 0000330C 3C00                <2> 		cmp al, 0
  4102 0000330E 0F841F000000        <2> 		je near nodecimal
  4103 00003314 47                  <2> 		inc edi
  4104 00003315 E9E8FFFFFF          <2> 		jmp chkdec1
  4105                              <2> 	fnddec:
  4106 0000331A 8A4701              <2> 		mov al, [edi + 1]
  4107 0000331D 8807                <2> 		mov [edi], al
  4108 0000331F 3C00                <2> 		cmp al, 0
  4109 00003321 0F840C000000        <2> 		je near nodecimal
  4110 00003327 FE05[93340000]      <2> 		inc byte [decimal]
  4111 0000332D 47                  <2> 		inc edi
  4112 0000332E E9E7FFFFFF          <2> 		jmp fnddec
  4113                              <2> 	nodecimal:
  4114 00003333 C3                  <2> 		ret
  4115                              <2> 	plusnum:
  4116 00003334 E818010000          <2> 		call decaddfix
  4117 00003339 01D9                <2> 		add ecx, ebx
  4118 0000333B E98A000000          <2> 		jmp retnum
  4119                              <2> 	subnum:
  4120 00003340 E80C010000          <2> 		call decaddfix
  4121 00003345 29D9                <2> 		sub ecx, ebx
  4122 00003347 E97E000000          <2> 		jmp retnum
  4123                              <2> 	mulnum:
  4124 0000334C A0[94340000]        <2> 		mov al, [decimal2]
  4125 00003351 0005[93340000]      <2> 		add [decimal], al
  4126 00003357 89C8                <2> 		mov eax, ecx
  4127 00003359 F7E3                <2> 		mul ebx
  4128 0000335B 89C1                <2> 		mov ecx, eax
  4129 0000335D E968000000          <2> 		jmp retnum
  4130                              <2> 	divnum:
  4131 00003362 E8EA000000          <2> 		call decaddfix
  4132 00003367 30C0                <2> 		xor al, al
  4133 00003369 A2[93340000]        <2> 		mov [decimal], al
  4134 0000336E 31D2                <2> 		xor edx, edx
  4135 00003370 89C8                <2> 		mov eax, ecx
  4136 00003372 81FB00000000        <2> 		cmp ebx, 0
  4137 00003378 0F844C000000        <2> 		je near retnum
  4138 0000337E F7F3                <2> 		div ebx
  4139 00003380 89C1                <2> 		mov ecx, eax
  4140 00003382 E943000000          <2> 		jmp retnum
  4141                              <2> 	expnum:
  4142 00003387 8A15[93340000]      <2> 		mov dl, [decimal]
  4143 0000338D 8815[94340000]      <2> 		mov [decimal2], dl
  4144 00003393 31D2                <2> 		xor edx, edx
  4145 00003395 89C8                <2> 		mov eax, ecx
  4146 00003397 89D9                <2> 		mov ecx, ebx
  4147 00003399 89C3                <2> 		mov ebx, eax
  4148 0000339B 81F900000000        <2> 		cmp ecx, 0
  4149 000033A1 7422                <2> 		je noexpnum
  4150 000033A3 49                  <2> 		dec ecx
  4151 000033A4 81F900000000        <2> 		cmp ecx, 0
  4152 000033AA 7412                <2> 		je noexpnumlp
  4153 000033AC F7E3                <2> 	expnumlp: mul ebx
  4154 000033AE 8A15[94340000]      <2> 		mov dl, [decimal2]
  4155 000033B4 0015[93340000]      <2> 		add [decimal], dl
  4156 000033BA 31D2                <2> 		xor edx, edx
  4157 000033BC E2EE                <2> 		loop expnumlp
  4158                              <2> 	noexpnumlp:
  4159 000033BE 89C1                <2> 		mov ecx, eax
  4160 000033C0 E905000000          <2> 		jmp retnum
  4161                              <2> 	noexpnum:
  4162 000033C5 B901000000          <2> 		mov ecx, 1
  4163                              <2> 	retnum: 
  4164 000033CA BE[92C90000]        <2> 		mov esi, numbuf
  4165 000033CF 890D[96340000]      <2> 		mov [result], ecx
  4166 000033D5 E8D6F9FFFF          <2> 		call convert
  4167 000033DA BE[92C90000]        <2> 		mov esi, numbuf
  4168 000033DF 8A25[93340000]      <2> 		mov ah, [decimal]
  4169 000033E5 8825[95340000]      <2> 		mov [decimalresult], ah
  4170 000033EB 80FC00              <2> 		cmp ah, 0
  4171 000033EE 0F8425000000        <2> 		je near noputdecimal
  4172                              <2> 	putdecimal:
  4173 000033F4 4E                  <2> 		dec esi
  4174 000033F5 FECC                <2> 		dec ah
  4175 000033F7 80FC00              <2> 		cmp ah, 0
  4176 000033FA 0F87F4FFFFFF        <2> 		ja near putdecimal
  4177 00003400 4E                  <2> 		dec esi
  4178 00003401 8A06                <2> 		mov al, [esi]
  4179 00003403 C6062E              <2> 		mov byte [esi], '.'
  4180                              <2> 	decputloop:
  4181 00003406 4E                  <2> 		dec esi
  4182 00003407 8A26                <2> 		mov ah, [esi]
  4183 00003409 8806                <2> 		mov [esi], al
  4184 0000340B 88E0                <2> 		mov al, ah
  4185 0000340D 81FE[7EC90000]      <2> 		cmp esi, buf2
  4186 00003413 0F87EDFFFFFF        <2> 		ja near decputloop
  4187                              <2> 	noputdecimal:
  4188 00003419 BE[7EC90000]        <2> 		mov esi, buf2
  4189 0000341E E809000000          <2> 		call chkadd
  4190 00003423 E9DDF5FFFF          <2> 		jmp nwcmd
  4191 00003428 00000000            <2> edxnumbuf dw 0,0
  4192 0000342C 8A06                <2> 	chkadd: mov al, [esi]
  4193 0000342E 3C30                <2> 		cmp al, '0'
  4194 00003430 750F                <2> 		jne dnadd
  4195 00003432 46                  <2> 		inc esi
  4196 00003433 81FE[92C90000]      <2> 		cmp esi, numbuf
  4197 00003439 7405                <2> 		je dnaddm1
  4198 0000343B E9ECFFFFFF          <2> 		jmp chkadd
  4199 00003440 4E                  <2> 	dnaddm1: dec esi
  4200 00003441 E8F8E8FFFF          <2> 	dnadd:	call print
  4201 00003446 BE[DD860000]        <2> 		mov esi, line
  4202 0000344B E8EEE8FFFF          <2> 		call print
  4203 00003450 C3                  <2> 		ret
  4204                              <2> 		
  4205                              <2> 	decaddfix:
  4206 00003451 A0[94340000]        <2> 		mov al, [decimal2]
  4207 00003456 8A25[93340000]      <2> 		mov ah, [decimal]
  4208 0000345C 38E0                <2> 		cmp al, ah
  4209 0000345E 7432                <2> 		je gooddecadd
  4210 00003460 38E0                <2> 		cmp al, ah
  4211 00003462 721A                <2> 		jb lowdecadd
  4212                              <2> 	highdecadd:
  4213 00003464 FEC4                <2> 		inc ah
  4214 00003466 89CA                <2> 		mov edx, ecx
  4215 00003468 C1E103              <2> 		shl ecx, 3
  4216 0000346B 01D1                <2> 		add ecx, edx
  4217 0000346D 01D1                <2> 		add ecx, edx
  4218 0000346F 38E0                <2> 		cmp al, ah
  4219 00003471 77F1                <2> 		ja highdecadd
  4220 00003473 8825[93340000]      <2> 		mov [decimal], ah
  4221 00003479 E914000000          <2> 		jmp gooddecadd
  4222                              <2> 	lowdecadd:
  4223 0000347E FEC0                <2> 		inc al
  4224 00003480 89DA                <2> 		mov edx, ebx
  4225 00003482 C1E303              <2> 		shl ebx, 3
  4226 00003485 01D3                <2> 		add ebx, edx
  4227 00003487 01D3                <2> 		add ebx, edx
  4228 00003489 38E0                <2> 		cmp al, ah
  4229 0000348B 72F1                <2> 		jb lowdecadd
  4230 0000348D A2[93340000]        <2> 		mov [decimal], al
  4231                              <2> 	gooddecadd:
  4232 00003492 C3                  <2> 		ret
  4233                              <2> 		
  4234 00003493 00                  <2> decimal db 0
  4235 00003494 00                  <2> decimal2 db 0
  4236 00003495 00                  <2> decimalresult db 0
  4237 00003496 00000000            <2> result dd 0
  4238                              <1> %include 'source/programs/_variables.asm' ;% and $
  4239 0000349A FF2C2500            <2> db 255,44,"%",0
  4240                              <2> 	ans:
  4241 0000349E BE[7EC90000]        <2> 		mov esi, buf2
  4242 000034A3 E884FFFFFF          <2> 		call chkadd
  4243 000034A8 C3                  <2> 		ret
  4244                              <2> 		
  4245 000034A9 FF2C2400            <2> db 255,44,"$",0
  4246 000034AD 8B35[CA2C0000]      <2> var: mov esi, [currentcommandloc]
  4247 000034B3 BB[7EB10000]        <2> 	mov ebx, variables
  4248 000034B8 8A06                <2> lkeq:	mov al, [esi]
  4249 000034BA 3C3D                <2> 	cmp al, '='
  4250 000034BC 741E                <2> 	je eqfnd	;is there an '=' sign?
  4251 000034BE 3C00                <2> 	cmp al, 0
  4252 000034C0 7406                <2> 	je echovars
  4253 000034C2 46                  <2> 	inc esi
  4254 000034C3 E9F0FFFFFF          <2> 	jmp lkeq
  4255 000034C8 BE[7EB10000]        <2> echovars: mov esi, variables
  4256 000034CD BB[7EC10000]        <2> 	mov ebx, varend
  4257 000034D2 B105                <2> 	mov cl, 5
  4258 000034D4 B504                <2> 	mov ch, 4
  4259 000034D6 E856F8FFFF          <2> 	call array
  4260 000034DB C3                  <2> 	ret
  4261 000034DC 46                  <2> eqfnd:	inc esi
  4262 000034DD 8A06                <2> 	mov al, [esi]
  4263 000034DF 3C00                <2> 	cmp al, 0
  4264 000034E1 7410                <2> 	je readvar
  4265 000034E3 8B35[CA2C0000]      <2> 	mov esi, [currentcommandloc]
  4266 000034E9 BB[7EB10000]        <2> 	mov ebx, variables
  4267 000034EE E91C000000          <2> 	jmp seek
  4268                              <2> readvar:
  4269 000034F3 B00A                <2> 	mov al, 10
  4270 000034F5 66BB0700            <2> 	mov bx, 7
  4271 000034F9 C605[04220000]00    <2> 	mov byte [commandedit], 0
  4272 00003500 BF[7EC90000]        <2> 	mov edi, buftxtend
  4273 00003505 E81FE9FFFF          <2> 	call rdprint
  4274 0000350A E99EFFFFFF          <2> 	jmp var
  4275 0000350F 668B03              <2> seek:	mov ax, [ebx]
  4276 00003512 B105                <2> 	mov cl, 5
  4277 00003514 B504                <2> 	mov ch, 4
  4278 00003516 663D0000            <2> 	cmp ax, 0
  4279 0000351A 0F846A000000        <2> 	je near save
  4280 00003520 6639C8              <2> 	cmp ax, cx
  4281 00003523 7406                <2> 	je skfnd
  4282 00003525 43                  <2> 	inc ebx
  4283 00003526 E9E4FFFFFF          <2> 	jmp seek
  4284 0000352B 8B35[CA2C0000]      <2> skfnd:	mov esi, [currentcommandloc]
  4285 00003531 46                  <2> 	inc esi
  4286 00003532 81C302000000        <2> 	add ebx, 2
  4287 00003538 89DF                <2> 	mov edi, ebx
  4288 0000353A B13D                <2> 	mov cl, '='
  4289 0000353C E8CEF7FFFF          <2> 	call cndtest
  4290 00003541 3C01                <2> 	cmp al, 1	
  4291 00003543 741B                <2> 	je varfnd
  4292 00003545 89FB                <2> 	mov ebx, edi
  4293 00003547 8B35[CA2C0000]      <2> 	mov esi, [currentcommandloc]
  4294 0000354D 668B03              <2> 	mov ax, [ebx]
  4295 00003550 663D0000            <2> 	cmp ax, 0
  4296 00003554 0F8430000000        <2> 	je near save
  4297 0000355A 43                  <2> 	inc ebx
  4298 0000355B E9AFFFFFFF          <2> 	jmp seek
  4299 00003560 8A03                <2> varfnd:	mov al, [ebx]
  4300 00003562 3C04                <2> 	cmp al, 4
  4301 00003564 7407                <2> 	je save2
  4302 00003566 4B                  <2> 	dec ebx
  4303 00003567 4E                  <2> 	dec esi
  4304 00003568 E9F3FFFFFF          <2> 	jmp varfnd
  4305 0000356D 4B                  <2> save2:	dec ebx
  4306 0000356E 4E                  <2> 	dec esi
  4307 0000356F 8A03                <2> 	mov al, [ebx]
  4308 00003571 3C05                <2> 	cmp al, 5
  4309 00003573 7405                <2> 	je remove
  4310 00003575 E9E6FFFFFF          <2> 	jmp varfnd
  4311 0000357A 8A03                <2> remove: mov al, [ebx]
  4312 0000357C 3C00                <2> 	cmp al, 0
  4313 0000357E 748F                <2> 	je seek
  4314 00003580 30C0                <2> 	xor al, al
  4315 00003582 8803                <2> 	mov [ebx], al
  4316 00003584 43                  <2> 	inc ebx
  4317 00003585 E9F0FFFFFF          <2> 	jmp remove	;do not need for now-need defragmentation
  4318 0000358A 8B35[CA2C0000]      <2> save:	mov esi, [currentcommandloc]
  4319 00003590 43                  <2> 	inc ebx
  4320 00003591 B005                <2> 	mov al, 5
  4321 00003593 B404                <2> 	mov ah, 4
  4322 00003595 668903              <2> 	mov [ebx], ax
  4323 00003598 43                  <2> 	inc ebx
  4324 00003599 43                  <2> svhere:	inc ebx
  4325 0000359A 46                  <2> 	inc esi
  4326 0000359B 8A06                <2> 	mov al, [esi]
  4327 0000359D 3C00                <2> 	cmp al, 0
  4328 0000359F 0F8456000000        <2> 	je near svdone
  4329 000035A5 3C25                <2> 	cmp al, '%'
  4330 000035A7 7407                <2> 	je ans2
  4331 000035A9 8803                <2> 	mov [ebx], al	
  4332 000035AB E9E9FFFFFF          <2> 	jmp svhere
  4333 000035B0 56                  <2> ans2:	push esi
  4334 000035B1 BE[7EC90000]        <2> 	mov esi, buf2
  4335 000035B6 E82C000000          <2> 	call ansfnd
  4336 000035BB E806000000          <2> 	call anscp
  4337 000035C0 5E                  <2> 	pop esi
  4338 000035C1 E9D3FFFFFF          <2> 	jmp svhere
  4339 000035C6 8A06                <2> anscp:	mov al, [esi]
  4340 000035C8 8803                <2> 	mov [ebx], al
  4341 000035CA 81FE[92C90000]      <2> 	cmp esi, numbuf
  4342 000035D0 74C7                <2> 	je svhere
  4343 000035D2 3C00                <2> 	cmp al, 0
  4344 000035D4 74C3                <2> 	je svhere
  4345 000035D6 43                  <2> 	inc ebx
  4346 000035D7 46                  <2> 	inc esi
  4347 000035D8 E9E9FFFFFF          <2> 	jmp anscp
  4348 000035DD 5E                  <2> ansnf:	pop esi
  4349 000035DE 8A06                <2> 	mov al, [esi]
  4350 000035E0 8803                <2> 	mov [ebx], al
  4351 000035E2 E9B2FFFFFF          <2> 	jmp svhere
  4352 000035E7 46                  <2> ansfnd:	inc esi
  4353 000035E8 81FE[91C90000]      <2> 	cmp esi, numbuf - 1
  4354 000035EE 740A                <2> 	je fndans
  4355 000035F0 8A06                <2> 	mov al, [esi]
  4356 000035F2 3C00                <2> 	cmp al, 0
  4357 000035F4 74E7                <2> 	je ansnf
  4358 000035F6 3C30                <2> 	cmp al, '0'
  4359 000035F8 74ED                <2> 	je ansfnd
  4360                              <2> fndans:
  4361 000035FA C3                  <2> 	ret
  4362 000035FB 30C0                <2> svdone:	xor al, al
  4363 000035FD 8803                <2> 	mov [ebx], al
  4364 000035FF C3                  <2> 	ret
  4365                              <1> %include 'source/programs/_run.asm' ;./
  4366                              <2> 
  4367 00003600 7F454C46            <2> 	elfstart db 0x7F,"ELF"
  4368 00003604 FF2C2E2F00          <2> 	db 255,44,"./",0
  4369                              <2> rundiskprog:
  4370 00003609 8B3D[CA2C0000]      <2> 	mov edi, [currentcommandloc]
  4371 0000360F 81C702000000        <2> 	add edi, 2
  4372 00003615 BE00004000          <2> 	mov esi, 0x400000
  4373 0000361A E80A2D0000          <2> 	call loadfile
  4374 0000361F 81FA94010000        <2> 	cmp edx, 404
  4375 00003625 746A                <2> 	je noprogfound
  4376 00003627 BB00004000          <2> 	mov ebx, 0x400000
  4377 0000362C A1[00360000]        <2> 	mov eax, [elfstart]
  4378 00003631 3903                <2> 	cmp [ebx], eax
  4379 00003633 0F8437000000        <2> 	je near runelf
  4380 00003639 66813B4558          <2> 	cmp word [ebx], "EX"
  4381 0000363E 7577                <2> 	jne progbatchfound
  4382 00003640 81C302000000        <2> 	add ebx, 2
  4383 00003646 8B3D[CA2C0000]      <2> 	mov edi, [currentcommandloc]
  4384 0000364C 81C702000000        <2> 	add edi, 2
  4385                              <2> findspaceprog:
  4386 00003652 8A07                <2> 	mov al, [edi]
  4387 00003654 47                  <2> 	inc edi
  4388 00003655 3C20                <2> 	cmp al, " "
  4389 00003657 75F9                <2> 	jne findspaceprog
  4390                              <2> findnonspaceprog:
  4391 00003659 8A07                <2> 	mov al, [edi]
  4392 0000365B 47                  <2> 	inc edi
  4393 0000365C 3C20                <2> 	cmp al, " "
  4394 0000365E 74F9                <2> 	je findnonspaceprog
  4395 00003660 4F                  <2> 	dec edi
  4396 00003661 8925[FEAE0000]      <2> 	mov [previousstack], esp
  4397 00003667 FFD3                <2> 	call ebx
  4398 00003669 8B25[FEAE0000]      <2> 	mov esp, [previousstack]
  4399 0000366F C3                  <2> 	ret
  4400                              <2> runelf:
  4401 00003670 8B3D[CA2C0000]      <2> 	mov edi, [currentcommandloc]
  4402 00003676 81C702000000        <2> 	add edi, 2
  4403 0000367C 81C380000000        <2> 	add ebx, 0x80
  4404 00003682 8925[FEAE0000]      <2> 	mov [previousstack], esp
  4405 00003688 FFD3                <2> 	call ebx
  4406 0000368A 8B25[FEAE0000]      <2> 	mov esp, [previousstack]
  4407 00003690 C3                  <2> 	ret
  4408                              <2> noprogfound:
  4409 00003691 BE[A4860000]        <2> 	mov esi, notfound1
  4410 00003696 E8A3E6FFFF          <2> 	call print
  4411 0000369B 8B35[CA2C0000]      <2> 	mov esi, [currentcommandloc]
  4412 000036A1 81C602000000        <2> 	add esi, 2
  4413 000036A7 E892E6FFFF          <2> 	call print
  4414 000036AC BE[AC860000]        <2> 	mov esi, notfound2
  4415 000036B1 E888E6FFFF          <2> 	call print
  4416 000036B6 C3                  <2> 	ret
  4417                              <2> progbatchfound:
  4418 000036B7 BF00004000          <2> 		mov edi, 0x400000
  4419 000036BC C605[78B10000]01    <2> 		mov byte [BATCHISON], 1
  4420                              <2> 	batchrunloop:
  4421 000036C3 E814F3FFFF          <2> 		call buftxtclear
  4422 000036C8 BE[7EC50000]        <2> 		mov esi, buftxt
  4423 000036CD 8935[CA2C0000]      <2> 		mov [currentcommandloc], esi
  4424                              <2> 	batchrunloop2:
  4425 000036D3 B10A                <2> 		mov cl, 10
  4426 000036D5 B50D                <2> 		mov ch, 13
  4427 000036D7 380F                <2> 		cmp [edi], cl
  4428 000036D9 0F841C000000        <2> 		je near nxtbatchrunline
  4429 000036DF 382F                <2> 		cmp [edi], ch
  4430 000036E1 0F8414000000        <2> 		je near nxtbatchrunline
  4431 000036E7 803F00              <2> 		cmp byte [edi], 0
  4432 000036EA 0F840B000000        <2> 		je near nxtbatchrunline
  4433 000036F0 8A07                <2> 		mov al, [edi]
  4434 000036F2 8806                <2> 		mov [esi], al
  4435 000036F4 46                  <2> 		inc esi
  4436 000036F5 47                  <2> 		inc edi
  4437 000036F6 E9D8FFFFFF          <2> 		jmp batchrunloop2
  4438                              <2> 	nxtbatchrunline:
  4439 000036FB 47                  <2> 		inc edi
  4440 000036FC 380F                <2> 		cmp [edi], cl
  4441 000036FE 74FB                <2> 		je nxtbatchrunline
  4442 00003700 382F                <2> 		cmp [edi], ch
  4443 00003702 74F7                <2> 		je nxtbatchrunline
  4444 00003704 893D[62370000]      <2> 		mov [batchedi], edi
  4445 0000370A 893D[74B10000]      <2> 		mov [BATCHPOS], edi
  4446 00003710 C60600              <2> 		mov byte [esi], 0
  4447 00003713 BE[7EC50000]        <2> 		mov esi, buftxt
  4448 00003718 803E00              <2> 		cmp byte [esi], 0
  4449 0000371B 0F8439000000        <2> 		je near nobatchfoundrun
  4450 00003721 31DB                <2> 		xor ebx, ebx
  4451 00003723 8A1D[0FB10000]      <2> 		mov bl, [IFON]
  4452 00003729 80FB00              <2> 		cmp bl, 0
  4453 0000372C 0F8534000000        <2> 		jne near iftestbatch
  4454                              <2> 	doneiftest:
  4455 00003732 803D[3B380000]00    <2> 		cmp byte [runnextline], 0
  4456 00003739 0F8405000000        <2> 		je near noruniftest
  4457 0000373F E8AAF4FFFF          <2> 		call run
  4458                              <2> 	noruniftest:
  4459 00003744 C605[3B380000]01    <2> 		mov byte [runnextline], 1
  4460 0000374B 8B3D[62370000]      <2> 		mov edi, [batchedi]
  4461 00003751 803F00              <2> 		cmp byte [edi], 0
  4462 00003754 0F8569FFFFFF        <2> 		jne near batchrunloop
  4463                              <2> 	nobatchfoundrun:
  4464 0000375A C605[78B10000]00    <2> 		mov byte [BATCHISON], 0
  4465 00003761 C3                  <2> 		ret
  4466                              <2> 	
  4467 00003762 00000000            <2> batchedi dd 0	
  4468                              <2> 	
  4469                              <2> 	iftestbatch:
  4470 00003766 BE[10B10000]        <2> 		mov esi, IFTRUE
  4471 0000376B 01DE                <2> 		add esi, ebx
  4472 0000376D 803E00              <2> 		cmp byte [esi], 0
  4473 00003770 0F85BCFFFFFF        <2> 		jne near doneiftest
  4474 00003776 881D[3C380000]      <2> 		mov [iffalsebuf], bl
  4475 0000377C 803D[79B10000]01    <2> 		cmp byte [LOOPON], 1
  4476 00003783 0F8513000000        <2> 		jne near fifindbatch
  4477 00003789 E935FFFFFF          <2> 		jmp batchrunloop
  4478                              <2> 	elsetestbatch:
  4479 0000378E C60601              <2> 		mov byte [esi], 1
  4480 00003791 81C705000000        <2> 		add edi, 5
  4481 00003797 E927FFFFFF          <2> 		jmp batchrunloop
  4482                              <2> 	fifindbatch:
  4483 0000379C 66B96966            <2> 		mov cx, "if"
  4484 000037A0 66B86669            <2> 		mov ax, "fi"
  4485 000037A4 663907              <2> 		cmp [edi], ax
  4486 000037A7 0F8424000000        <2> 		je near fifoundbatch
  4487 000037AD 66390F              <2> 		cmp [edi], cx
  4488 000037B0 0F8468000000        <2> 		je near iffoundbatch
  4489 000037B6 803F00              <2> 		cmp byte [edi], 0
  4490 000037B9 0F8412000000        <2> 		je near fifoundbatch
  4491 000037BF B8656C7365          <2> 		mov eax, "else"
  4492 000037C4 3907                <2> 		cmp [edi], eax
  4493 000037C6 0F84C2FFFFFF        <2> 		je near elsetestbatch
  4494 000037CC E973FFFFFF          <2> 		jmp noruniftest
  4495                              <2> 	fifoundbatch:
  4496 000037D1 81C702000000        <2> 		add edi, 2
  4497 000037D7 B00A                <2> 		mov al, 10
  4498 000037D9 3807                <2> 		cmp [edi], al
  4499 000037DB 0F840E000000        <2> 		je near goodfibatch
  4500 000037E1 803F00              <2> 		cmp byte [edi], 0
  4501 000037E4 0F8470FFFFFF        <2> 		je near nobatchfoundrun
  4502 000037EA E9ADFFFFFF          <2> 		jmp fifindbatch
  4503                              <2> 	goodfibatch:
  4504 000037EF B001                <2> 		mov al, 1
  4505 000037F1 2805[0FB10000]      <2> 		sub [IFON], al 
  4506 000037F7 A0[0FB10000]        <2> 		mov al, [IFON]
  4507 000037FC 8A1D[3C380000]      <2> 		mov bl, [iffalsebuf]
  4508 00003802 38D8                <2> 		cmp al, bl
  4509 00003804 7796                <2> 		ja fifindbatch
  4510 00003806 8B35[CA2C0000]      <2> 		mov esi, [currentcommandloc]
  4511 0000380C 81EF02000000        <2> 		sub edi, 2
  4512 00003812 C605[3B380000]00    <2> 		mov byte [runnextline], 0
  4513 00003819 E9A5FEFFFF          <2> 		jmp batchrunloop
  4514                              <2> 	iffoundbatch:
  4515 0000381E B020                <2> 		mov al, ' '
  4516 00003820 81C702000000        <2> 		add edi, 2
  4517 00003826 3807                <2> 		cmp [edi], al
  4518 00003828 0F856EFFFFFF        <2> 		jne near fifindbatch
  4519 0000382E B001                <2> 		mov al, 1
  4520 00003830 0005[0FB10000]      <2> 		add [IFON], al
  4521 00003836 E961FFFFFF          <2> 		jmp fifindbatch
  4522                              <2> 		
  4523                              <2> 		
  4524 0000383B 01                  <2> runnextline db 1
  4525 0000383C 00                  <2> iffalsebuf db 0
  4526                              <2> 
  4527 0000383D C3                  <2> notbatch: ret 
  4528                              <1> %ifdef network.included
  4529                              <1> 	%include 'source/programs/arp.asm'
  4530 0000383E FF2C61727000        <2> db 255,44,"arp",0
  4531                              <2> 	;ARP TESTING
  4532                              <2> arptest:
  4533 00003844 8B35[CA2C0000]      <2> 	mov esi, [currentcommandloc]
  4534 0000384A 81C604000000        <2> 	add esi, 4
  4535 00003850 E8514D0000          <2> 	call strtoip
  4536 00003855 890D[FC380000]      <2> 	mov [arptargetinfo + 6], ecx ;move to next ip
  4537 0000385B E88C4D0000          <2> 	call showip
  4538 00003860 803D[00390000]01    <2> 	cmp byte [arpconfig], 1
  4539 00003867 7405                <2> 	je arptest2
  4540 00003869 E841000000          <2> 	call arpinit
  4541                              <2> arptest2:	;try to reach 192.168.0.1
  4542 0000386E 8B0D[96860000]      <2> 	mov ecx, [sysmac]
  4543 00003874 668B1D[9A860000]    <2> 	mov bx, [sysmac + 4]
  4544 0000387B 890D[DC380000]      <2> 	mov [sourcemac], ecx
  4545 00003881 66891D[E0380000]    <2> 	mov [sourcemac + 4],bx
  4546 00003888 890D[EC380000]      <2> 	mov [arpsenderinfo], ecx
  4547 0000388E 66891D[F0380000]    <2> 	mov [arpsenderinfo + 4], bx
  4548 00003895 BF[D6380000]        <2> 	mov edi, frame
  4549 0000389A BE[00390000]        <2> 	mov esi, framend
  4550 0000389F E8CB4C0000          <2> 	call sendpacket
  4551 000038A4 BE[DD860000]        <2> 	mov esi, line
  4552 000038A9 E890E4FFFF          <2> 	call print
  4553 000038AE C3                  <2> 	ret
  4554                              <2> 	
  4555                              <2> arpinit:
  4556 000038AF BE[01390000]        <2> 	mov esi, arptable
  4557 000038B4 BF[96860000]        <2> 	mov edi, sysmac
  4558 000038B9 BB[92860000]        <2> 	mov ebx, sysip
  4559 000038BE 8B0F                <2> 	mov ecx, [edi]
  4560 000038C0 890E                <2> 	mov [esi], ecx
  4561 000038C2 668B4F04            <2> 	mov cx, [edi + 4]
  4562 000038C6 894E04              <2> 	mov [esi + 4], ecx
  4563 000038C9 8B0B                <2> 	mov ecx, [ebx]
  4564 000038CB 894E06              <2> 	mov [esi + 6], ecx
  4565 000038CE C605[00390000]01    <2> 	mov byte [arpconfig], 1
  4566 000038D5 C3                  <2> 	ret
  4567                              <2> 	
  4568                              <2> ;example frame
  4569                              <2> frame:
  4570 000038D6 FFFFFFFFFFFF        <2> destinationmac:	db 0xFF,0xFF,0xFF,0xFF,0xFF,0xFF
  4571 000038DC 000000000000        <2> sourcemac:		db 0,0,0,0,0,0
  4572 000038E2 0806                <2> ethertype:		db 8,6			;arp is 0x806
  4573                              <2> 	;;example packet
  4574 000038E4 0100                <2> 	arppacket: 		dw 1			;ethernet is 1
  4575 000038E6 0800                <2> 	arpprotocol: 	db 8,0			;ip is 0x800
  4576 000038E8 0604                <2> 					db 6,4			;length of mac, length of ip
  4577 000038EA 0001                <2> 	arpoperation: 	db 0,1			;one for arp request
  4578 000038EC 000000000000        <2> 	arpsenderinfo:	db 0x00,0x00,0x00,0x00,0x00,0x00	;mac
  4579 000038F2 C0A80073            <2> 					db 192,168,0,115		;ip
  4580 000038F6 000000000000        <2> 	arptargetinfo:	db 0x00,0x00,0x00,0x00,0x00,0x00	;ignored in requests
  4581 000038FC C0A80000            <2> 					db 192,168,0,0			;ip
  4582                              <2> framend:
  4583                              <2> 
  4584 00003900 00                  <2> arpconfig db 0
  4585                              <2> arptable:	;;mac,ip
  4586 00003901 000000000000000000- <2> 	times 10 db 0,0,0,0,0,0,0,0,0,0
  4587 0000390A 00<rept>            <2>
  4588                              <2> arptableend:	
  4589                              <1> %endif
  4590                              <1> %include 'source/programs/batch.asm'
  4591 00003965 FF2C626174636800    <2> db 255,44,"batch",0
  4592                              <2> 	batchst: 
  4593 0000396D 8B3D[CA2C0000]      <2> 		mov edi, [currentcommandloc]
  4594 00003973 81C706000000        <2> 		add edi, 6
  4595 00003979 803F00              <2> 		cmp byte [edi], 0
  4596 0000397C 0F846D000000        <2> 		je near nonamefound
  4597 00003982 BE00004000          <2> 		mov esi, 0x400000
  4598 00003987 E89D290000          <2> 		call loadfile
  4599 0000398C 89D0                <2> 		mov eax, edx
  4600 0000398E 3D94010000          <2> 		cmp eax, 404
  4601 00003993 7465                <2> 		je goodbatchname
  4602 00003995 BE[A0390000]        <2> 		mov esi, badbatchname
  4603 0000399A E89FE3FFFF          <2> 		call print
  4604 0000399F C3                  <2> 		ret
  4605 000039A0 546869732066696C65- <2> 		badbatchname db "This file already exists!",10,0
  4606 000039A9 20616C726561647920- <2>
  4607 000039B2 657869737473210A00  <2>
  4608 000039BB 596F75206861766520- <2> 		namenotfoundbatch db "You have to type a name after the command.",10,0
  4609 000039C4 746F20747970652061- <2>
  4610 000039CD 206E616D6520616674- <2>
  4611 000039D6 65722074686520636F- <2>
  4612 000039DF 6D6D616E642E0A00    <2>
  4613 000039E7 00000000            <2> 		esicache3 dd 0
  4614 000039EB 00000000            <2> 		esicache2 dd 0
  4615                              <2> 	nonamefound:
  4616 000039EF BE[BB390000]        <2> 		mov esi, namenotfoundbatch
  4617 000039F4 E845E3FFFF          <2> 		call print
  4618 000039F9 C3                  <2> 		ret
  4619                              <2> 	goodbatchname:
  4620 000039FA BE00004000          <2> 		mov esi, 0x400000
  4621                              <2> 	batchcreate:
  4622 000039FF 8935[E7390000]      <2> 		mov [esicache3], esi
  4623 00003A05 BF00008000          <2> 		mov edi, 0x800000
  4624 00003A0A B00A                <2> 		mov al, 10
  4625 00003A0C B307                <2> 		mov bl, 7
  4626 00003A0E B404                <2> 		mov ah, 4
  4627 00003A10 CD30                <2> 		int 30h
  4628 00003A12 8935[EB390000]      <2> 		mov [esicache2], esi
  4629 00003A18 8A0E                <2> 		mov cl, [esi]
  4630 00003A1A 8B35[E7390000]      <2> 		mov esi, [esicache3]
  4631 00003A20 BB[573A0000]        <2> 		mov ebx, exitword
  4632 00003A25 E8E5F2FFFF          <2> 		call cndtest
  4633 00003A2A 3C01                <2> 		cmp al, 1
  4634 00003A2C 7414                <2> 		je endbatchcreate
  4635 00003A2E 3C02                <2> 		cmp al, 2
  4636 00003A30 7410                <2> 		je endbatchcreate
  4637 00003A32 8B35[EB390000]      <2> 		mov esi, [esicache2]
  4638 00003A38 B00A                <2> 		mov al, 10
  4639 00003A3A 8806                <2> 		mov [esi], al
  4640 00003A3C 46                  <2> 		inc esi
  4641 00003A3D E9BDFFFFFF          <2> 		jmp batchcreate
  4642                              <2> 	endbatchcreate:
  4643 00003A42 8B35[E7390000]      <2> 		mov esi, [esicache3]
  4644 00003A48 31C0                <2> 		xor eax, eax
  4645 00003A4A 8806                <2> 		mov [esi], al
  4646 00003A4C BE00004000          <2> 		mov esi, 0x400000
  4647 00003A51 E8E8E2FFFF          <2> 		call print
  4648 00003A56 C3                  <2> 		ret
  4649                              <2> 	
  4650 00003A57 5C7800              <2> 	exitword db "\x",0
  4651 00003A5A 54797065205C782074- <2> 	wordmsg db "Type \x to exit.",10,0
  4652 00003A63 6F20657869742E0A00  <2>
  4653                              <1> %ifdef gui.background
  4654                              <1> 	%include 'source/programs/background.asm'
  4655 00003A6C FF2C6261636B67726F- <2> db 255,44,"background",0
  4656 00003A75 756E6400            <2>
  4657 00003A79 8B3D[CA2C0000]      <2> 		mov edi, [currentcommandloc]
  4658 00003A7F 81C70B000000        <2> 		add edi, 11
  4659 00003A85 BE00008000          <2> 		mov esi, 0x800000
  4660 00003A8A E89A280000          <2> 		call loadfile
  4661 00003A8F 81FA94010000        <2> 		cmp edx, 404
  4662 00003A95 0F849C0F0000        <2> 		je near filenotfound
  4663 00003A9B BE00008000          <2> 		mov esi, 0x800000
  4664 00003AA0 66813E424D          <2> 		cmp word [esi], "BM"
  4665 00003AA5 7401                <2> 		je .bmpfound
  4666 00003AA7 C3                  <2> 		ret
  4667                              <2> .bmpfound:
  4668 00003AA8 8B3D[4B550000]      <2> 		mov edi, [physbaseptr]
  4669 00003AAE 57                  <2> 		push edi
  4670 00003AAF BE[93CB0000]        <2> 		mov esi, backgroundbuffer
  4671 00003AB4 8935[886A0000]      <2> 		mov [backgroundimage], esi
  4672 00003ABA 8935[4B550000]      <2> 		mov [physbaseptr], esi
  4673 00003AC0 31C0                <2> 		xor eax, eax
  4674                              <2> .clearlp:
  4675 00003AC2 8906                <2> 		mov [esi], eax
  4676 00003AC4 81C604000000        <2> 		add esi, 4
  4677 00003ACA 81FE[93DF2800]      <2> 		cmp esi, backgroundbufferend
  4678 00003AD0 72F0                <2> 		jb .clearlp
  4679 00003AD2 BE00008000          <2> 		mov esi, 0x800000
  4680 00003AD7 31C9                <2> 		xor ecx, ecx
  4681 00003AD9 31D2                <2> 		xor edx, edx
  4682 00003ADB 31DB                <2> 		xor ebx, ebx
  4683 00003ADD E8142A0000          <2> 		call showbmp
  4684 00003AE2 5F                  <2> 		pop edi
  4685 00003AE3 893D[4B550000]      <2> 		mov [physbaseptr], edi
  4686 00003AE9 803D[B8980000]00    <2> 		cmp byte [guion], 0
  4687 00003AF0 740F                <2> 		je .noclear
  4688 00003AF2 E83E2F0000          <2> 		call guiclear
  4689 00003AF7 E8D92B0000          <2> 		call clearmousecursor
  4690 00003AFC E8B92F0000          <2> 		call reloadallgraphics
  4691                              <2> .noclear:
  4692 00003B01 C3                  <2> 		ret
  4693                              <1> %endif
  4694                              <1> %include 'source/programs/beep.asm'
  4695 00003B02 FF2C6265657000      <2> 	db 255,44,"beep",0
  4696                              <2> beep:
  4697 00003B09 B8[2E3B0000]        <2> 	mov eax, beepstart
  4698 00003B0E A3[6C020000]        <2> 	mov [soundpos], eax
  4699 00003B13 B8[323B0000]        <2> 	mov eax, beepend
  4700 00003B18 A3[70020000]        <2> 	mov [soundendpos], eax
  4701 00003B1D C605[69020000]01    <2> 	mov byte [soundon], 1
  4702                              <2> waitforsoundendbeep:
  4703 00003B24 A0[69020000]        <2> 	mov al, [soundon]
  4704 00003B29 3C00                <2> 	cmp al, 0
  4705 00003B2B 75F7                <2> 	jne waitforsoundendbeep
  4706 00003B2D C3                  <2> 	ret
  4707                              <2> 	
  4708                              <2> beepstart:
  4709 00003B2E 3200D111            <2> 	dw 50, 4561
  4710                              <2> beepend:
  4711                              <1> %include 'source/programs/cd.asm'
  4712 00003B32 FF2C636400          <2> db 255,44,"cd",0
  4713                              <2> cd:
  4714 00003B37 8B35[CA2C0000]      <2> 	mov esi, [currentcommandloc]
  4715 00003B3D 81C603000000        <2> 	add esi, 3
  4716 00003B43 8B3D[06AF0000]      <2> 	mov edi, [currentfolderloc]
  4717 00003B49 893D[02AF0000]      <2> 	mov [lastfolderloc], edi
  4718 00003B4F 81C7[0AAF0000]      <2> 	add edi, currentfolder
  4719                              <2> 	;cmp word [esi], ".."
  4720                              <2> 	;je .moveup
  4721                              <2> .movedown:
  4722 00003B55 8A06                <2> 	mov al, [esi]
  4723 00003B57 8807                <2> 	mov [edi], al
  4724 00003B59 47                  <2> 	inc edi
  4725 00003B5A 46                  <2> 	inc esi
  4726 00003B5B 3C00                <2> 	cmp al, 0
  4727 00003B5D 740A                <2> 	je .donecd
  4728 00003B5F 81FF[0AB10000]      <2> 	cmp edi, currentfolderend
  4729 00003B65 72EE                <2> 	jb .movedown
  4730 00003B67 30C0                <2> 	xor al, al
  4731                              <2> .donecd:
  4732 00003B69 4F                  <2> 	dec edi
  4733 00003B6A C6072F              <2> 	mov byte [edi], '/'
  4734 00003B6D 47                  <2> 	inc edi
  4735 00003B6E 81EF[0AAF0000]      <2> 	sub edi, currentfolder
  4736 00003B74 893D[06AF0000]      <2> 	mov [currentfolderloc], edi
  4737 00003B7A C3                  <2> 	ret
  4738                              <2> ;.moveup:
  4739                              <2> ;	ret
  4740                              <1> %include 'source/programs/charmap.asm'
  4741 00003B7B FF2C636861726D6170- <2> db 255,44,"charmap",0
  4742 00003B84 00                  <2>
  4743 00003B85 66BB0700            <2> 	mov bx, 7
  4744 00003B89 B020                <2> 	mov al, " "
  4745 00003B8B E801E7FFFF          <2> 	call prcharq
  4746 00003B90 E8FCE6FFFF          <2> 	call prcharq
  4747 00003B95 E8F7E6FFFF          <2> 	call prcharq
  4748 00003B9A E8F2E6FFFF          <2> 	call prcharq
  4749 00003B9F B030                <2> 	mov al, "0"
  4750                              <2> charmapnumprnt:
  4751 00003BA1 E8EBE6FFFF          <2> 	call prcharq
  4752 00003BA6 FEC0                <2> 	inc al
  4753 00003BA8 6650                <2> 	push ax
  4754 00003BAA B020                <2> 	mov al, " "
  4755 00003BAC E8E0E6FFFF          <2> 	call prcharq
  4756 00003BB1 6658                <2> 	pop ax
  4757 00003BB3 3C39                <2> 	cmp al, "9"
  4758 00003BB5 76EA                <2> 	jbe charmapnumprnt
  4759 00003BB7 B041                <2> 	mov al, "A"
  4760                              <2> charmapnumprnt2:
  4761 00003BB9 E8D3E6FFFF          <2> 	call prcharq
  4762 00003BBE FEC0                <2> 	inc al
  4763 00003BC0 6650                <2> 	push ax
  4764 00003BC2 B020                <2> 	mov al, " "
  4765 00003BC4 E8C8E6FFFF          <2> 	call prcharq
  4766 00003BC9 6658                <2> 	pop ax
  4767 00003BCB 3C47                <2> 	cmp al, "G"
  4768 00003BCD 72EA                <2> 	jb charmapnumprnt2
  4769                              <2> 	
  4770 00003BCF BE[DD860000]        <2> 	mov esi, line
  4771 00003BD4 E853E1FFFF          <2> 	call printquiet
  4772 00003BD9 6631C0              <2> 	xor ax, ax
  4773 00003BDC 88C1                <2> 	mov cl, al
  4774 00003BDE E821F3FFFF          <2> 	call showhexsmall
  4775 00003BE3 E958000000          <2> 	jmp charmapnocopy ;the first char is 0 which is unprintable
  4776                              <2> charmapcopy:
  4777 00003BE8 FEC0                <2> 	inc al
  4778 00003BEA 6650                <2> 	push ax
  4779 00003BEC 3C08                <2> 	cmp al, 8
  4780 00003BEE 7450                <2> 	je charmapnocopy
  4781 00003BF0 3C09                <2> 	cmp al, 9
  4782 00003BF2 744C                <2> 	je charmapnocopy
  4783 00003BF4 3C0A                <2> 	cmp al, 10
  4784 00003BF6 7448                <2> 	je charmapnocopy
  4785 00003BF8 3C0D                <2> 	cmp al, 13
  4786 00003BFA 7444                <2> 	je charmapnocopy
  4787 00003BFC 3CFF                <2> 	cmp al, 255
  4788 00003BFE 7440                <2> 	je charmapnocopy
  4789 00003C00 3C00                <2> 	cmp al, 0
  4790 00003C02 7437                <2> 	je nomorecharmap
  4791 00003C04 E888E6FFFF          <2> 	call prcharq
  4792 00003C09 B020                <2> 	mov al, " "
  4793 00003C0B E881E6FFFF          <2> 	call prcharq
  4794 00003C10 6658                <2> 	pop ax
  4795                              <2> charmapcopycheck:
  4796 00003C12 FEC4                <2> 	inc ah
  4797 00003C14 80FC10              <2> 	cmp ah, 16
  4798 00003C17 72CF                <2> 	jb charmapcopy
  4799 00003C19 6650                <2> 	push ax
  4800 00003C1B BE[DD860000]        <2> 	mov esi, line
  4801 00003C20 E807E1FFFF          <2> 	call printquiet
  4802 00003C25 6658                <2> 	pop ax
  4803 00003C27 3CFF                <2> 	cmp al, 255
  4804 00003C29 7410                <2> 	je nomorecharmap
  4805 00003C2B 88C1                <2> 	mov cl, al
  4806 00003C2D FEC1                <2> 	inc cl
  4807 00003C2F E8D0F2FFFF          <2> 	call showhexsmall
  4808 00003C34 30E4                <2> 	xor ah, ah
  4809 00003C36 E9ADFFFFFF          <2> 	jmp charmapcopy
  4810                              <2> nomorecharmap:
  4811 00003C3B E9C5EDFFFF          <2> 	jmp nwcmd
  4812                              <2> charmapnocopy:
  4813 00003C40 6650                <2> 	push ax
  4814 00003C42 B020                <2> 	mov al, " "
  4815 00003C44 E848E6FFFF          <2> 	call prcharq
  4816 00003C49 E843E6FFFF          <2> 	call prcharq
  4817 00003C4E 6658                <2> 	pop ax
  4818 00003C50 E9BDFFFFFF          <2> 	jmp charmapcopycheck
  4819                              <1> %include 'source/programs/clear.asm'
  4820 00003C55 FF2C636C65617200    <2> db 255,44,"clear",0
  4821 00003C5D E845E1FFFF          <2> 		call clear
  4822 00003C62 C3                  <2> 		ret 
  4823                              <1> %include 'source/programs/cpuid.asm'
  4824 00003C63 FF2C637075696400    <2> db 255,44,"cpuid",0
  4825 00003C6B 31C0                <2> 	xor eax, eax
  4826 00003C6D 0FA2                <2> 	cpuid
  4827 00003C6F 891D[C03C0000]      <2> 	mov [cpuidbuf], ebx
  4828 00003C75 8915[C43C0000]      <2> 	mov [cpuidbuf + 4], edx
  4829 00003C7B 890D[C83C0000]      <2> 	mov [cpuidbuf + 8], ecx
  4830 00003C81 BE[C03C0000]        <2> 	mov esi, cpuidbuf
  4831 00003C86 E8B3E0FFFF          <2> 	call print
  4832 00003C8B BE[DD860000]        <2> 	mov esi, line
  4833 00003C90 E8A9E0FFFF          <2> 	call print
  4834 00003C95 B801000000          <2> 	mov eax, 1
  4835 00003C9A 0FA2                <2> 	cpuid
  4836 00003C9C 89C1                <2> 	mov ecx, eax
  4837 00003C9E C605[032F0000]02    <2> 	mov byte [firsthexshown], 2
  4838 00003CA5 E86EF2FFFF          <2> 	call showhex
  4839 00003CAA B808000080          <2> 	mov eax, 0x80000008
  4840 00003CAF 0FA2                <2> 	cpuid
  4841 00003CB1 89C1                <2> 	mov ecx, eax
  4842 00003CB3 C605[032F0000]02    <2> 	mov byte [firsthexshown], 2
  4843 00003CBA E859F2FFFF          <2> 	call showhex
  4844 00003CBF C3                  <2> 	ret
  4845                              <2> 	
  4846 00003CC0 00<rept>            <2> cpuidbuf times 13 db 0
  4847                              <2> cpuidvendorend:
  4848                              <1> %ifdef network.included
  4849                              <1> 	%include 'source/programs/dhcp.asm'
  4850 00003CCD FF2C6468637000      <2> db 255,44,"dhcp",0
  4851                              <2> dhcp:
  4852 00003CD4 BE[943D0000]        <2> 	mov esi, .dhcp.mac
  4853 00003CD9 BB[743E0000]        <2> 	mov ebx, .dhcp.option.mac
  4854 00003CDE BF[543D0000]        <2> 	mov edi, .mac
  4855 00003CE3 31C9                <2> 	xor ecx, ecx
  4856 00003CE5 66890D[663D0000]    <2> 	mov [.ip.checksum], cx
  4857 00003CEC 66890D[763D0000]    <2> 	mov [.udp.checksum], cx
  4858 00003CF3 8B0D[96860000]      <2> 	mov ecx, [sysmac]
  4859 00003CF9 890B                <2> 	mov [ebx], ecx
  4860 00003CFB 890F                <2> 	mov [edi], ecx
  4861 00003CFD 890E                <2> 	mov [esi], ecx
  4862 00003CFF 668B0D[9A860000]    <2> 	mov cx, [sysmac + 4]
  4863 00003D06 66894B04            <2> 	mov [ebx + 4], cx
  4864 00003D0A 66894E04            <2> 	mov [esi + 4], cx
  4865 00003D0E 66894F04            <2> 	mov [edi + 4], cx
  4866 00003D12 BF[5C3D0000]        <2> 	mov edi, .ip.header
  4867 00003D17 BE[703D0000]        <2> 	mov esi, .ip.headerend
  4868 00003D1C E85D480000          <2> 	call getchecksum
  4869 00003D21 66890D[663D0000]    <2> 	mov [.ip.checksum], cx
  4870 00003D28 BF[703D0000]        <2> 	mov edi, .udp.header
  4871 00003D2D BE[8B3E0000]        <2> 	mov esi, .udp.end
  4872 00003D32 E847480000          <2> 	call getchecksum
  4873 00003D37 66890D[763D0000]    <2> 	mov [.udp.checksum], cx
  4874 00003D3E BF[4E3D0000]        <2> 	mov edi, .frame
  4875 00003D43 BE[8B3E0000]        <2> 	mov esi, .udp.end
  4876 00003D48 E822480000          <2> 	call sendpacket
  4877 00003D4D C3                  <2> 	ret
  4878                              <2> .frame:
  4879 00003D4E FFFFFFFFFFFF        <2> 	.destmac db 0xFF,0xFF,0xFF,0xFF,0xFF,0xFF
  4880 00003D54 000000000000        <2> 	.mac db 0,0,0,0,0,0
  4881 00003D5A 0800                <2> 	db 8,0
  4882                              <2> .ip.header:
  4883 00003D5C 45                  <2> 	db (0x40 | (.ip.headerend - .ip.header)/4)
  4884 00003D5D 00                  <2> 	db 0
  4885 00003D5E 012F                <2> 	db (.udp.end - .ip.header)/256, (.udp.end - .ip.header)
  4886 00003D60 0000                <2> 	dw 0
  4887 00003D62 0000                <2> 	dw 0
  4888 00003D64 80                  <2> 	db 0x80
  4889 00003D65 11                  <2> 	db 17
  4890 00003D66 0000                <2> .ip.checksum dw 0
  4891 00003D68 00000000            <2> 	db 0,0,0,0
  4892 00003D6C FFFFFFFF            <2> 	db 255,255,255,255	
  4893                              <2> .ip.headerend:
  4894                              <2> .udp.header:
  4895 00003D70 0044                <2> 	db 0,68	;source port
  4896 00003D72 0043                <2> 	db 0,67 ;destination port
  4897 00003D74 011B                <2> 	db (.udp.end - .udp.header)/256, (.udp.end - .udp.header)
  4898 00003D76 0000                <2> .udp.checksum dw 0
  4899                              <2> .udp.headerend:
  4900                              <2> .dhcp.data:
  4901 00003D78 01                  <2> 	db 1	;message type
  4902 00003D79 01                  <2> 	db 1	;hardware type
  4903 00003D7A 06                  <2> 	db 6	;hardware address length
  4904 00003D7B 00                  <2> 	db 0	;hops
  4905 00003D7C EC2B2369            <2> 	db 0xEC,0x2B,0x23,0x69	;transaction ID
  4906 00003D80 0000                <2> 	db 0,0	;seconds elapsed
  4907 00003D82 0000                <2> 	db 0,0	;flags
  4908 00003D84 00000000            <2> 	db 0,0,0,0	;client ip address
  4909 00003D88 00000000            <2> 	db 0,0,0,0	;your ip address
  4910 00003D8C 00000000            <2> 	db 0,0,0,0	;server ip address
  4911 00003D90 00000000            <2> 	db 0,0,0,0	;relay agent ip address
  4912 00003D94 000000000000        <2> .dhcp.mac db 0,0,0,0,0,0	;client hardware address
  4913 00003D9A 00<rept>            <2> 	times 10 db 0	;padding
  4914 00003DA4 00<rept>            <2> 	times 64 db 0	;server host name
  4915 00003DE4 00<rept>            <2> 	times 128 db 0	;boot file name
  4916 00003E64 63825363            <2> 	db 0x63,0x82,0x53,0x63	;magic cookie
  4917                              <2> .dhcp.option.type:
  4918 00003E68 350103              <2> 	db 53,1,3	;DHCP Request
  4919 00003E6B 3204C0A80002        <2> 	db 50,4,192,168,0,2	;requested IP
  4920 00003E71 3D07                <2> 	db 61,7 ;client id(mac)
  4921 00003E73 01                  <2> 	db 1	;Type=Ethernet
  4922 00003E74 000000000000        <2> .dhcp.option.mac:	db 0,0,0,0,0,0
  4923 00003E7A 0C08                <2> 	db 12,8 ;host name
  4924 00003E7C 536F6C6C65724F53    <2> .dhcp.option.name 	db "SollerOS"
  4925 00003E84 370401030F06        <2> 	db 55,4,1,3,15,6	;request subnet, router, domain name, name server
  4926 00003E8A FF                  <2> 	db 0xFF	;end DHCP options
  4927                              <2> .dhcp.end
  4928                              <2> .udp.end
  4929                              <2> 	
  4930                              <1> %endif
  4931                              <1> %include 'source/programs/dos.asm'
  4932 00003E8B FF2C646F7300        <2> db 255,44,"dos",0
  4933                              <2> dosrunner:
  4934 00003E91 8925[FEAE0000]      <2> 	mov [previousstack], esp
  4935 00003E97 8B3D[CA2C0000]      <2> 	mov edi, [currentcommandloc]
  4936 00003E9D 81C704000000        <2> 	add edi, 4
  4937 00003EA3 BE00014000          <2> 	mov esi,  0x100 + dosprogloc	;this should be the beginning of memory
  4938 00003EA8 E87C240000          <2> 	call loadfile
  4939 00003EAD 8B3D[CA2C0000]      <2> 	mov edi, [currentcommandloc]
  4940 00003EB3 81C704000000        <2> 	add edi, 4
  4941 00003EB9 81FA94010000        <2> 	cmp edx, 404
  4942 00003EBF 0F845E000000        <2> 	je near .noprogfound
  4943 00003EC5 BB81004000          <2> 	mov ebx, 0x81 + dosprogloc
  4944 00003ECA 31C9                <2> 	xor ecx, ecx
  4945                              <2> .findparams:
  4946 00003ECC 47                  <2> 	inc edi
  4947 00003ECD 8A07                <2> 	mov al, [edi]
  4948 00003ECF 3C20                <2> 	cmp al, " "
  4949 00003ED1 75F9                <2> 	jne .findparams
  4950                              <2> .copyparams:
  4951 00003ED3 8A07                <2> 	mov al, [edi]
  4952 00003ED5 8803                <2> 	mov [ebx], al
  4953 00003ED7 43                  <2> 	inc ebx
  4954 00003ED8 47                  <2> 	inc edi
  4955 00003ED9 41                  <2> 	inc ecx
  4956 00003EDA 81FB00014000        <2> 	cmp ebx, 0x100 + dosprogloc
  4957 00003EE0 7304                <2> 	jae .nomoreparams
  4958 00003EE2 3C00                <2> 	cmp al, 0
  4959 00003EE4 75ED                <2> 	jne .copyparams
  4960                              <2> .nomoreparams:
  4961 00003EE6 880D80004000        <2> 	mov [0x80 + dosprogloc], cl
  4962 00003EEC 66B85000            <2> 	mov ax, DOS_DATA_SEL
  4963 00003EF0 8ED8                <2> 	mov ds, ax
  4964 00003EF2 8EC0                <2> 	mov es, ax
  4965 00003EF4 8EE0                <2> 	mov fs, ax
  4966 00003EF6 8EE8                <2> 	mov gs, ax
  4967 00003EF8 31C0                <2> 	xor eax, eax
  4968 00003EFA 31DB                <2> 	xor ebx, ebx
  4969 00003EFC 31C9                <2> 	xor ecx, ecx
  4970 00003EFE 31D2                <2> 	xor edx, edx
  4971 00003F00 31FF                <2> 	xor edi, edi
  4972 00003F02 31F6                <2> 	xor esi, esi
  4973 00003F04 9A000100004800      <2> 	call DOS_CODE_SEL:0x100
  4974 00003F0B 66BB3000            <2> 	mov bx, NEW_DATA_SEL
  4975 00003F0F 6689DA              <2> 	mov dx, bx
  4976 00003F12 8EC3                <2> 	mov es, bx
  4977 00003F14 8EE3                <2> 	mov fs, bx
  4978 00003F16 66BB2000            <2> 	mov bx, SYS_DATA_SEL
  4979 00003F1A 8EEB                <2> 	mov gs, bx
  4980 00003F1C 8B25[FEAE0000]      <2> 	mov esp, [previousstack]
  4981 00003F22 C3                  <2> 	ret
  4982                              <2> .noprogfound:
  4983 00003F23 BE[A4860000]        <2> 	mov esi, notfound1
  4984 00003F28 E811DEFFFF          <2> 	call print
  4985 00003F2D 8B35[CA2C0000]      <2> 	mov esi, [currentcommandloc]
  4986 00003F33 81C604000000        <2> 	add esi, 4
  4987 00003F39 E800DEFFFF          <2> 	call print
  4988 00003F3E BE[AC860000]        <2> 	mov esi, notfound2
  4989 00003F43 E8F6DDFFFF          <2> 	call print
  4990 00003F48 C3                  <2> 	ret
  4991                              <2> 	
  4992                              <1> %include 'source/programs/dump.asm'
  4993 00003F49 FF2C64756D7000      <2> db 255,44,"dump",0
  4994 00003F50 8B35[CA2C0000]      <2> 	mov esi, [currentcommandloc]
  4995 00003F56 81C605000000        <2> 	add esi, 5
  4996 00003F5C 31C9                <2> 	xor ecx, ecx
  4997 00003F5E 66B83078            <2> 	mov ax, "0x"
  4998 00003F62 663906              <2> 	cmp [esi], ax
  4999 00003F65 740A                <2> 	je dumphexin
  5000 00003F67 E85BF1FFFF          <2> 	call cnvrttxt
  5001 00003F6C E910000000          <2> 	jmp dumphexnow
  5002                              <2> dumphexin:
  5003 00003F71 81C602000000        <2> 	add esi, 2
  5004 00003F77 E8FFF0FFFF          <2> 	call cnvrthextxt
  5005 00003F7C E900000000          <2> 	jmp dumphexnow
  5006                              <2> dumphexnow:
  5007 00003F81 89CF                <2> 	mov edi, ecx
  5008 00003F83 89FE                <2> 	mov esi, edi
  5009 00003F85 81C680030000        <2> 	add esi, 896
  5010                              <2> dumphexloop:
  5011 00003F8B 8B0F                <2> 	mov ecx, [edi]
  5012 00003F8D C605[032F0000]05    <2> 	mov byte [firsthexshown],5
  5013 00003F94 E87FEFFFFF          <2> 	call showhex
  5014 00003F99 81C704000000        <2> 	add edi, 4
  5015 00003F9F 39F7                <2> 	cmp edi, esi
  5016 00003FA1 72E8                <2> 	jb dumphexloop
  5017 00003FA3 E828E6FFFF          <2> 	call termcopy
  5018 00003FA8 C3                  <2> 	ret 
  5019                              <1> %include 'source/programs/echo.asm'
  5020                              <2> 
  5021 00003FA9 FF2C6563686F00      <2> db 255,44,"echo",0
  5022                              <2> 	echoprog:
  5023 00003FB0 8B35[CA2C0000]      <2> 		mov esi, [currentcommandloc]
  5024 00003FB6 81C605000000        <2> 		add esi, 5
  5025 00003FBC 8A06                <2> 		mov al, [esi]
  5026 00003FBE E87BDDFFFF          <2> 		call print
  5027 00003FC3 BE[DD860000]        <2> 		mov esi, line
  5028 00003FC8 E871DDFFFF          <2> 		call print
  5029 00003FCD C3                  <2> 		ret
  5030 00003FCE BB[7EB10000]        <2> 	echovr:	mov ebx, variables
  5031 00003FD3 BF06000000          <2> 		mov edi, 6
  5032 00003FD8 E83F000000          <2> 		call nxtvrech
  5033 00003FDD E95A000000          <2> 		jmp prntvr2
  5034 00003FE2 B13D                <2> 	echvar:	mov cl, '='
  5035 00003FE4 43                  <2> 		inc ebx
  5036 00003FE5 8A03                <2> 		mov al, [ebx]
  5037 00003FE7 3C00                <2> 		cmp al, 0
  5038 00003FE9 7431                <2> 		je nxtvrech
  5039 00003FEB 3C3D                <2> 		cmp al, '='
  5040 00003FED 7422                <2> 		je nxtvrechb1
  5041 00003FEF 8B35[CA2C0000]      <2> 		mov esi, [currentcommandloc]
  5042 00003FF5 01FE                <2> 		add esi, edi
  5043 00003FF7 E813EDFFFF          <2> 		call cndtest
  5044 00003FFC 3C02                <2> 		cmp al, 2
  5045 00003FFE 7438                <2> 		je prntvr
  5046 00004000 3C01                <2> 		cmp al, 1
  5047 00004002 7434                <2> 		je prntvr
  5048 00004004 8B35[CA2C0000]      <2> 		mov esi, [currentcommandloc]
  5049 0000400A 01FE                <2> 		add esi, edi
  5050 0000400C E90B000000          <2> 		jmp nxtvrech
  5051                              <2> 	nxtvrechb1:
  5052 00004011 81EB02000000        <2> 		sub ebx, 2
  5053 00004017 E9C6FFFFFF          <2> 		jmp echvar
  5054 0000401C 8A03                <2> 	nxtvrech: mov al, [ebx]
  5055 0000401E 3C05                <2> 		cmp al, 5
  5056 00004020 740A                <2> 		je nxtvrec2
  5057 00004022 43                  <2> 		inc ebx
  5058 00004023 81FB[7EC10000]      <2> 		cmp ebx, varend
  5059 00004029 72F1                <2> 		jb nxtvrech
  5060 0000402B C3                  <2> 		ret
  5061 0000402C 43                  <2> 	nxtvrec2: inc ebx
  5062 0000402D 8A03                <2> 		mov al, [ebx]
  5063 0000402F 3C04                <2> 		cmp al, 4
  5064 00004031 74AF                <2> 		je echvar
  5065 00004033 E9E4FFFFFF          <2> 		jmp nxtvrech
  5066 00004038 43                  <2> 	prntvr: inc ebx
  5067 00004039 89DE                <2> 		mov esi, ebx
  5068 0000403B C3                  <2> 		ret
  5069 0000403C E8FDDCFFFF          <2> 	prntvr2: call print
  5070 00004041 BE[DD860000]        <2> 		mov esi, line
  5071 00004046 E8F3DCFFFF          <2> 		call print
  5072 0000404B C3                  <2> 		ret 
  5073                              <1> %include 'source/programs/else.asm'
  5074 0000404C FF2C656C736500      <2> 	db 255,44,"else",0
  5075 00004053 31C0                <2> elsecmd:	xor eax, eax
  5076 00004055 3805[78B10000]      <2> 	cmp [BATCHISON], al
  5077 0000405B 0F84DCF7FFFF        <2> 	je near notbatch
  5078 00004061 A0[0FB10000]        <2> 	mov al, [IFON]
  5079 00004066 BE[10B10000]        <2> 	mov esi, IFTRUE
  5080 0000406B 01C6                <2> 	add esi, eax
  5081 0000406D 8A06                <2> 	mov al, [esi]
  5082 0000406F 3401                <2> 	xor al, 1
  5083 00004071 8806                <2> 	mov [esi], al
  5084 00004073 C3                  <2> 	ret 
  5085                              <1> %include 'source/programs/exit.asm'
  5086 00004074 FF2C6578697400      <2> db 255,44,"exit",0
  5087 0000407B 803D[0EB10000]01    <2> 	cmp byte [ranboot], 1
  5088 00004082 0F840BE9FFFF        <2> 	je near returnfromexp
  5089 00004088 E9E7E7FFFF          <2> 	jmp nobootfile
  5090                              <1> %include 'source/programs/fi.asm'
  5091 0000408D FF2C666900          <2> 	db 255,44,"fi",0
  5092 00004092 30C0                <2> 	xor al, al
  5093 00004094 3805[78B10000]      <2> 	cmp [BATCHISON], al
  5094 0000409A 0F849DF7FFFF        <2> 	je near notbatch
  5095 000040A0 B001                <2> fi:	mov al, 1
  5096 000040A2 2805[0FB10000]      <2> 	sub [IFON],al
  5097 000040A8 C3                  <2> 	ret 
  5098                              <1> %ifdef gui.included
  5099                              <1> 	%include 'source/programs/gui.asm'
  5100 000040A9 FF2C67756900        <2> db 255,44,"gui",0
  5101                              <2> guiswitcher:
  5102 000040AF 8B35[CA2C0000]      <2> 	mov esi, [currentcommandloc]
  5103 000040B5 81C604000000        <2> 	add esi, 4
  5104 000040BB 31C9                <2> 	xor ecx, ecx
  5105 000040BD 803E00              <2> 	cmp byte [esi], 0
  5106 000040C0 740A                <2> 	je .nomodepref
  5107 000040C2 E8B4EFFFFF          <2> 	call cnvrthextxt ;switches arg on cline to vesa mode in ecx
  5108 000040C7 E907000000          <2> 	jmp .modepref
  5109                              <2> .nomodepref:
  5110 000040CC 51                  <2> 	push ecx
  5111 000040CD E8D5DCFFFF          <2> 	call clear
  5112 000040D2 59                  <2> 	pop ecx
  5113                              <2> .modepref:
  5114 000040D3 66BB[3F51]          <2> 	mov bx, guiswitch
  5115 000040D7 66891D[0A0D0000]    <2> 	mov [realmodeptr], bx
  5116 000040DE BB[EE400000]        <2> 	mov ebx, guiswitchret
  5117 000040E3 891D[060D0000]      <2> 	mov [realmodereturn], ebx
  5118 000040E9 E901CBFFFF          <2> 	jmp realmode
  5119                              <2> guiswitchret:
  5120 000040EE 65803D[B8980000]01  <2> 	cmp byte [gs:guion], 1
  5121 000040F6 7401                <2> 	je .cont
  5122 000040F8 C3                  <2> 	ret
  5123                              <2> .cont:
  5124 000040F9 BF[23530000]        <2> 	mov edi, VBEMODEBLOCK
  5125                              <2> .loop:
  5126 000040FE 658B07              <2> 	mov eax, [gs:edi]
  5127 00004101 8907                <2> 	mov [edi], eax
  5128 00004103 47                  <2> 	inc edi
  5129 00004104 81FF[27560000]      <2> 	cmp edi, VBEEND
  5130 0000410A 72F2                <2> 	jb .loop
  5131 0000410C A1[4B550000]        <2> 	mov eax, [physbaseptr]
  5132 00004111 2D00001000          <2> 	sub eax, 0x100000
  5133 00004116 A3[4B550000]        <2> 	mov [physbaseptr], eax
  5134 0000411B C605[8F220000]00    <2> 	mov byte [termguion], 0
  5135 00004122 BE[93C90000]        <2> 	mov esi, graphicstable
  5136 00004127 30C0                <2> 	xor al, al
  5137                              <2> .clear:
  5138 00004129 8806                <2> 	mov [esi], al
  5139 0000412B 46                  <2> 	inc esi
  5140 0000412C 81FE[93CB0000]      <2> 	cmp esi, graphicstableend
  5141 00004132 72F5                <2> 	jb .clear
  5142 00004134 E8602A0000          <2> 	call guisetup
  5143                              <2> 	;The next few lines center a window that is 3/4ths of the full screen
  5144 00004139 668B15[35550000]    <2> 	mov dx, [resolutionx]
  5145 00004140 668B0D[37550000]    <2> 	mov cx, [resolutiony]
  5146 00004147 6689D3              <2> 	mov bx, dx
  5147 0000414A 6689C8              <2> 	mov ax, cx
  5148 0000414D 66D1EB              <2> 	shr bx, 1
  5149 00004150 66D1E8              <2> 	shr ax, 1
  5150 00004153 6689DA              <2> 	mov dx, bx
  5151 00004156 66D1EA              <2> 	shr dx, 1
  5152 00004159 6689C1              <2> 	mov cx, ax
  5153 0000415C 66D1E9              <2> 	shr cx, 1
  5154 0000415F 6601D3              <2> 	add bx, dx
  5155 00004162 6601C8              <2> 	add ax, cx
  5156 00004165 66D1E9              <2> 	shr cx, 1
  5157 00004168 66C1EB03            <2> 	shr bx, 3
  5158 0000416C 66C1E303            <2> 	shl bx, 3
  5159 00004170 66C1E804            <2> 	shr ax, 4
  5160 00004174 66C1E004            <2> 	shl ax, 4
  5161 00004178 66891D[A66D0000]    <2> 	mov [termwindow], bx
  5162 0000417F 66A3[A86D0000]      <2> 	mov [termwindow + 2], ax	;the previous lines of code make a large terminal window that is 4 characters smaller than the screen
  5163 00004185 BE[A66D0000]        <2> 	mov esi, termwindow
  5164 0000418A 31DB                <2> 	xor ebx, ebx
  5165 0000418C 6631C0              <2> 	xor ax, ax
  5166 0000418F E824310000          <2> 	call showwindow
  5167 00004194 E88F140000          <2> 	call cursorgui
  5168 00004199 E809DCFFFF          <2> 	call clear
  5169 0000419E C3                  <2> 	ret
  5170                              <2> 	
  5171                              <1> %endif
  5172                              <1> %include 'source/programs/help.asm'
  5173 0000419F FF2C68656C7000      <2> db 255,44,"help",0
  5174                              <2> lscmd:	
  5175 000041A6 B00D                <2> 		mov al, 13
  5176 000041A8 E8E4E0FFFF          <2> 		call prcharq
  5177 000041AD BE[53310000]        <2> 		mov esi, progstart
  5178 000041B2 BB[3F510000]        <2> 		mov ebx, progend
  5179 000041B7 BE[FEAA0000]        <2> dir:	mov esi, fileindex
  5180 000041BC 8A06                <2> 	dirnxt:	mov al, [esi]
  5181 000041BE 30E4                <2> 		xor ah, ah
  5182 000041C0 3CFF                <2> 		cmp al, 255
  5183 000041C2 7418                <2> 		je dirfnd
  5184 000041C4 46                  <2> 		inc esi
  5185 000041C5 81FE[FEAE0000]      <2> 		cmp esi,  fileindexend
  5186 000041CB 7342                <2> 		jae dirdn
  5187 000041CD E9EAFFFFFF          <2> 		jmp dirnxt
  5188                              <2> 	dirfnd3:
  5189 000041D2 46                  <2> 		inc esi
  5190 000041D3 81FE[FEAE0000]      <2> 		cmp esi, fileindexend
  5191 000041D9 76E1                <2> 		jbe dirnxt
  5192 000041DB 4E                  <2> 		dec esi
  5193 000041DC 46                  <2> 	dirfnd:	inc esi
  5194 000041DD 8A06                <2> 		mov al, [esi]
  5195 000041DF 30E4                <2> 		xor ah, ah
  5196 000041E1 3C2C                <2> 		cmp al, 44
  5197 000041E3 740E                <2> 		je dirfnd2
  5198 000041E5 46                  <2> 		inc esi
  5199 000041E6 81FE[FEAE0000]      <2> 		cmp esi,  fileindexend
  5200 000041EC 7321                <2> 		jae dirdn
  5201 000041EE E9C9FFFFFF          <2> 		jmp dirnxt
  5202 000041F3 46                  <2> 	dirfnd2: inc esi
  5203 000041F4 E833DBFFFF          <2> 		call printquiet
  5204 000041F9 56                  <2> 		push esi
  5205 000041FA B009                <2> 		mov al, 9
  5206 000041FC E890E0FFFF          <2> 		call prcharq
  5207 00004201 5E                  <2> 		pop esi
  5208 00004202 81FE[FEAE0000]      <2> 		cmp esi,  fileindexend
  5209 00004208 7305                <2> 		jae dirdn
  5210 0000420A E9ADFFFFFF          <2> 		jmp dirnxt
  5211 0000420F BE[DD860000]        <2> 	dirdn:	mov esi, line
  5212 00004214 E825DBFFFF          <2> 			call print
  5213 00004219 C3                  <2> 			ret
  5214 0000421A 00                  <2> currentdir db 0
  5215                              <1> %include 'source/programs/if.asm'
  5216 0000421B FF2C696600          <2> 	db 255,44,"if",0
  5217 00004220 30C0                <2> ifcmd:	xor al, al
  5218 00004222 3805[78B10000]      <2> 	cmp [BATCHISON], al
  5219 00004228 0F840FF6FFFF        <2> 	je near notbatch
  5220 0000422E 8B1D[CA2C0000]      <2> 	mov ebx, [currentcommandloc]
  5221 00004234 81C303000000        <2> 	add ebx, 3
  5222 0000423A 89DE                <2> 	mov esi, ebx
  5223 0000423C 8A06                <2> chkeqsn: mov al, [esi]
  5224 0000423E 3C00                <2> 	cmp al, 0
  5225 00004240 0F84F7F5FFFF        <2> 	je near notbatch
  5226 00004246 3C3D                <2> 	cmp al, '='
  5227 00004248 0F8406000000        <2> 	je near chkeqdn
  5228 0000424E 46                  <2> 	inc esi
  5229 0000424F E9E8FFFFFF          <2> 	jmp chkeqsn
  5230 00004254 B000                <2> chkeqdn: mov al, 0 
  5231 00004256 8806                <2> 	mov [esi], al
  5232 00004258 46                  <2> 	inc esi
  5233 00004259 E870EAFFFF          <2> 	call tester
  5234 0000425E 3C01                <2> 	cmp al, 1
  5235 00004260 0F8405000000        <2> 	je near trueif
  5236 00004266 E91C000000          <2> 	jmp falseif
  5237 0000426B 31C0                <2> trueif:	xor eax, eax
  5238 0000426D A0[0FB10000]        <2> 	mov al, [IFON]
  5239 00004272 FEC0                <2> 	inc al
  5240 00004274 A2[0FB10000]        <2> 	mov [IFON], al
  5241 00004279 30E4                <2> 	xor ah, ah
  5242 0000427B BE[10B10000]        <2> 	mov esi, IFTRUE
  5243 00004280 01C6                <2> 	add esi, eax
  5244 00004282 B401                <2> 	mov ah, 1
  5245 00004284 8826                <2> 	mov [esi], ah
  5246 00004286 C3                  <2> 	ret 
  5247 00004287 31C0                <2> falseif: xor eax, eax
  5248 00004289 A0[0FB10000]        <2> 	mov al, [IFON]
  5249 0000428E FEC0                <2> 	inc al
  5250 00004290 A2[0FB10000]        <2> 	mov [IFON], al
  5251 00004295 30E4                <2> 	xor ah, ah
  5252 00004297 BE[10B10000]        <2> 	mov esi, IFTRUE
  5253 0000429C 01C6                <2> 	add esi, eax
  5254 0000429E 30E4                <2> 	xor ah, ah
  5255 000042A0 8826                <2> 	mov [esi], ah
  5256 000042A2 C3                  <2> 	ret 
  5257                              <1> %ifdef network.included
  5258                              <1> 	%include 'source/programs/ipconfig.asm'
  5259 000042A3 FF2C6970636F6E6669- <2> db 255,44,"ipconfig",0
  5260 000042AC 6700                <2>
  5261                              <2> ifconfig:
  5262 000042AE 8B35[CA2C0000]      <2> 	mov esi, [currentcommandloc]
  5263 000042B4 81C609000000        <2> 	add esi, 9
  5264 000042BA 803E00              <2> 	cmp byte [esi], 0
  5265 000042BD 740B                <2> 	je .noip
  5266 000042BF E8E2420000          <2> 	call strtoip
  5267 000042C4 890D[92860000]      <2> 	mov [sysip], ecx
  5268                              <2> .noip:
  5269                              <2> %ifdef ne2000.included
  5270 000042CA 803D[2B850000]01    <2> 	cmp byte [ne2000.nicconfig], 1
  5271 000042D1 751E                <2> 	jne .none2000
  5272 000042D3 BE[2C850000]        <2> 	mov esi, ne2000.name
  5273 000042D8 E861DAFFFF          <2> 	call print
  5274 000042DD B9[4E850000]        <2> 	mov ecx, ne2000.mac
  5275 000042E2 E844430000          <2> 	call showmac
  5276 000042E7 BE[DD860000]        <2> 	mov esi, line
  5277 000042EC E84DDAFFFF          <2> 	call print
  5278                              <2> .none2000:
  5279                              <2> %endif
  5280                              <2> %ifdef rtl8139.included
  5281 000042F1 803D[0B820000]01    <2> 	cmp byte [rtl8139.nicconfig], 1
  5282 000042F8 751E                <2> 	jne .nortl8139
  5283 000042FA BE[12820000]        <2> 	mov esi, rtl8139.name
  5284 000042FF E83ADAFFFF          <2> 	call print
  5285 00004304 B9[0C820000]        <2> 	mov ecx, rtl8139.mac
  5286 00004309 E81D430000          <2> 	call showmac
  5287 0000430E BE[DD860000]        <2> 	mov esi, line
  5288 00004313 E826DAFFFF          <2> 	call print
  5289                              <2> .nortl8139:
  5290                              <2> %endif
  5291                              <2> %ifdef rtl8169.included
  5292                              <2> 	cmp byte [rtl8169.nicconfig], 1
  5293                              <2> 	jne .nortl8169
  5294                              <2> 	mov esi, rtl8169.name
  5295                              <2> 	call print
  5296                              <2> 	mov ecx, rtl8169.mac
  5297                              <2> 	call showmac
  5298                              <2> 	mov esi, line
  5299                              <2> 	call print
  5300                              <2> .nortl8169:
  5301                              <2> %endif
  5302 00004318 8B0D[92860000]      <2> 	mov ecx, [sysip]
  5303 0000431E E8C9420000          <2> 	call showip
  5304 00004323 BE[DD860000]        <2> 	mov esi, line
  5305 00004328 E811DAFFFF          <2> 	call print
  5306 0000432D C3                  <2> 	ret
  5307                              <2> 	
  5308                              <1> %endif
  5309                              <1> %include 'source/programs/keycode.asm'
  5310 0000432E FF2C6B6579636F6465- <2> db 255,44,"keycode",0
  5311 00004337 00                  <2>
  5312                              <2> keycode:
  5313 00004338 C605[6B220000]00    <2> 	mov byte [trans], 0
  5314 0000433F C605[CE640000]00    <2> 	mov byte [threadson], 0
  5315                              <2> %ifdef io.serial
  5316                              <2> .noserial:
  5317                              <2> 	hlt
  5318                              <2> 	mov dx, [serial.address]
  5319                              <2> 	in al, dx
  5320                              <2> 	cmp al, 0
  5321                              <2> 	je .noserial
  5322                              <2> 	mov cl, al
  5323                              <2> 	call showhexsmall
  5324                              <2> 	cmp al, 0x1B
  5325                              <2> 	jne .noserial
  5326                              <2> 	in al, dx
  5327                              <2> 	mov cl, al
  5328                              <2> 	call showhexsmall
  5329                              <2> 	cmp cl, 0x5B
  5330                              <2> 	je .noserial
  5331                              <2> 	ret
  5332                              <2> %else
  5333 00004346 E8E8180000          <2> 	call getkey
  5334 0000434B 31C0                <2> 	xor eax, eax
  5335 0000434D 31C9                <2> 	xor ecx, ecx
  5336 0000434F 8A0D[135C0000]      <2> 	mov cl, [specialkey]
  5337 00004355 80F900              <2> 	cmp cl, 0
  5338 00004358 0F8405000000        <2> 	je near .nospecialkeycode
  5339 0000435E E8A1EBFFFF          <2> 	call showhexsmall
  5340                              <2> .nospecialkeycode:
  5341 00004363 66A1[69220000]      <2> 	mov ax, [lastkey]
  5342 00004369 88E1                <2> 	mov cl, ah
  5343 0000436B E894EBFFFF          <2> 	call showhexsmall
  5344 00004370 80FC01              <2> 	cmp ah, 1
  5345 00004373 75C3                <2> 	jne keycode
  5346 00004375 C3                  <2> 	ret
  5347                              <2> %endif
  5348                              <1> %ifdef gui.included
  5349                              <1> 	%include 'source/programs/line.asm'
  5350 00004376 FF2C6C696E6500      <2> db 255,44,"line",0
  5351                              <2> linetester:
  5352 0000437D 803D[B8980000]00    <2> 	cmp byte [guion], 0
  5353 00004384 0F841B000000        <2> 	je near .done
  5354 0000438A 668B35[67020000]    <2> 	mov si, [timenanoseconds + 2];essentially load a random value
  5355 00004391 BB38000000          <2> 	mov ebx, 28*2;the line test draws ~28/6 times more lines in a 4:3 display mode
  5356 00004396 E868000000          <2> 	call .circletest
  5357 0000439B BB0C000000          <2> 	mov ebx, 6*2 ;this makes them draw the same amount of lines
  5358 000043A0 E801000000          <2> 	call .linetest
  5359                              <2> .done:
  5360 000043A5 C3                  <2> 	ret
  5361                              <2> 
  5362                              <2> .linetest:
  5363 000043A6 53                  <2> 	push ebx
  5364 000043A7 E8D6000000          <2> 	call .stime
  5365 000043AC 5B                  <2> 	pop ebx
  5366 000043AD 31FF                <2> 	xor edi, edi
  5367                              <2> .ltlp
  5368 000043AF 53                  <2> 	push ebx
  5369 000043B0 E81C010000          <2> 	call .st
  5370 000043B5 66F7D6              <2> 	not si
  5371 000043B8 E814010000          <2> 	call .st
  5372 000043BD 5B                  <2> 	pop ebx
  5373 000043BE 66F7D6              <2> 	not si
  5374 000043C1 660335[65020000]    <2> 	add si, [timenanoseconds]
  5375 000043C8 4B                  <2> 	dec ebx
  5376 000043C9 81FB00000000        <2> 	cmp ebx, 0
  5377 000043CF 77DE                <2> 	ja .ltlp
  5378 000043D1 E8C4000000          <2> 	call .etime
  5379 000043D6 53                  <2> 	push ebx	
  5380 000043D7 57                  <2> 	push edi
  5381 000043D8 E858260000          <2> 	call guiclear
  5382 000043DD E8D8260000          <2> 	call reloadallgraphics
  5383 000043E2 59                  <2> 	pop ecx
  5384 000043E3 E8FAEBFFFF          <2> 	call showdec
  5385 000043E8 BE[13450000]        <2> 	mov esi, .msg
  5386 000043ED E84CD9FFFF          <2> 	call print
  5387 000043F2 59                  <2> 	pop ecx
  5388 000043F3 E8EAEBFFFF          <2> 	call showdec
  5389 000043F8 BE[3F450000]        <2> 	mov esi, .msgtime
  5390 000043FD E83CD9FFFF          <2> 	call print
  5391 00004402 C3                  <2> 	ret
  5392                              <2> 	
  5393                              <2> .circletest:
  5394 00004403 53                  <2> 	push ebx
  5395 00004404 E879000000          <2> 	call .stime
  5396 00004409 5B                  <2> 	pop ebx
  5397 0000440A 31FF                <2> 	xor edi, edi
  5398                              <2> .ctlp:
  5399 0000440C 53                  <2> 	push ebx
  5400 0000440D 668B0D[37550000]    <2> 	mov cx, [resolutiony]
  5401 00004414 66D1E9              <2> 	shr cx, 1
  5402 00004417 668B15[35550000]    <2> 	mov dx, [resolutionx]
  5403 0000441E 66D1EA              <2> 	shr dx, 1
  5404 00004421 6689C8              <2> 	mov ax, cx
  5405                              <2> .circle:
  5406 00004424 60                  <2> 	pusha
  5407 00004425 E89E210000          <2> 	call drawcircle
  5408 0000442A 61                  <2> 	popa
  5409 0000442B 6648                <2> 	dec ax
  5410 0000442D 47                  <2> 	inc edi
  5411 0000442E 663D0100            <2> 	cmp ax, 1
  5412 00004432 77F0                <2> 	ja .circle
  5413 00004434 66F7D6              <2> 	not si
  5414                              <2> .circle2:
  5415 00004437 60                  <2> 	pusha
  5416 00004438 E88B210000          <2> 	call drawcircle
  5417 0000443D 61                  <2> 	popa
  5418 0000443E 47                  <2> 	inc edi
  5419 0000443F 6640                <2> 	inc ax
  5420 00004441 6639C8              <2> 	cmp ax, cx
  5421 00004444 76F1                <2> 	jbe .circle2
  5422 00004446 5B                  <2> 	pop ebx
  5423 00004447 66F7D6              <2> 	not si
  5424 0000444A 660335[65020000]    <2> 	add si, [timenanoseconds]
  5425 00004451 4B                  <2> 	dec ebx
  5426 00004452 81FB00000000        <2> 	cmp ebx, 0
  5427 00004458 77B2                <2> 	ja .ctlp
  5428 0000445A E83B000000          <2> 	call .etime
  5429 0000445F 53                  <2> 	push ebx
  5430 00004460 57                  <2> 	push edi
  5431 00004461 59                  <2> 	pop ecx
  5432 00004462 E87BEBFFFF          <2> 	call showdec
  5433 00004467 BE[28450000]        <2> 	mov esi, .msgcircle
  5434 0000446C E8CDD8FFFF          <2> 	call print
  5435 00004471 59                  <2> 	pop ecx
  5436 00004472 E86BEBFFFF          <2> 	call showdec
  5437 00004477 BE[3F450000]        <2> 	mov esi, .msgtime
  5438 0000447C E8BDD8FFFF          <2> 	call print
  5439 00004481 C3                  <2> 	ret
  5440                              <2> 	
  5441                              <2> .stime:
  5442 00004482 F4                  <2> 	hlt
  5443 00004483 A1[61020000]        <2> 	mov eax, [timeseconds]
  5444 00004488 8B1D[65020000]      <2> 	mov ebx, [timenanoseconds]
  5445 0000448E A3[4E450000]        <2> 	mov [.time], eax
  5446 00004493 891D[52450000]      <2> 	mov [.time + 4], ebx
  5447 00004499 C3                  <2> 	ret
  5448                              <2> 	
  5449                              <2> .etime:
  5450 0000449A A1[61020000]        <2> 	mov eax, [timeseconds]
  5451 0000449F 8B1D[65020000]      <2> 	mov ebx, [timenanoseconds]
  5452 000044A5 8B0D[4E450000]      <2> 	mov ecx, [.time]
  5453 000044AB 8B15[52450000]      <2> 	mov edx, [.time + 4]
  5454 000044B1 C1EA0A              <2> 	shr edx, 10
  5455 000044B4 C1EB0A              <2> 	shr ebx, 10
  5456 000044B7 29C8                <2> 	sub eax, ecx
  5457 000044B9 3D00000000          <2> 	cmp eax, 0
  5458 000044BE 740E                <2> 	je .notclp
  5459                              <2> .tclp:
  5460 000044C0 81C340420F00        <2> 	add ebx, 1000000
  5461 000044C6 48                  <2> 	dec eax
  5462 000044C7 3D00000000          <2> 	cmp eax, 0
  5463 000044CC 75F2                <2> 	jne .tclp
  5464                              <2> .notclp:
  5465 000044CE 29D3                <2> 	sub ebx, edx
  5466 000044D0 C3                  <2> 	ret
  5467                              <2> 	
  5468                              <2> .st:
  5469 000044D1 6631C0              <2> 	xor ax, ax
  5470 000044D4 6631DB              <2> 	xor bx, bx
  5471 000044D7 668B0D[37550000]    <2> 	mov cx, [resolutiony]
  5472 000044DE 668B15[35550000]    <2> 	mov dx, [resolutionx]
  5473                              <2> .lp:
  5474 000044E5 60                  <2> 	pusha
  5475 000044E6 E81E240000          <2> 	call drawline
  5476 000044EB 61                  <2> 	popa
  5477                              <2> .noswitch
  5478 000044EC 47                  <2> 	inc edi
  5479 000044ED 6643                <2> 	inc bx
  5480 000044EF 664A                <2> 	dec dx
  5481 000044F1 6681FB0000          <2> 	cmp bx, 0
  5482 000044F6 74ED                <2> 	je .lp
  5483 000044F8 6681FA0000          <2> 	cmp dx, 0
  5484 000044FD 75E6                <2> 	jne .lp
  5485                              <2> .lp2:
  5486 000044FF 60                  <2> 	pusha
  5487 00004500 E804240000          <2> 	call drawline
  5488 00004505 61                  <2> 	popa
  5489 00004506 47                  <2> 	inc edi
  5490 00004507 6640                <2> 	inc ax
  5491 00004509 6649                <2> 	dec cx
  5492 0000450B 6681F90000          <2> 	cmp cx, 0
  5493 00004510 75ED                <2> 	jne .lp2
  5494 00004512 C3                  <2> 	ret
  5495                              <2> 	
  5496 00004513 6C696E657320776572- <2> .msg db "lines were drawn in ",0
  5497 0000451C 6520647261776E2069- <2>
  5498 00004525 6E2000              <2>
  5499 00004528 636972636C65732077- <2> .msgcircle db "circles were drawn in ",0
  5500 00004531 65726520647261776E- <2>
  5501 0000453A 20696E2000          <2>
  5502 0000453F 6D6963726F7365636F- <2> .msgtime db "microseconds.",10,0
  5503 00004548 6E64732E0A00        <2>
  5504 0000454E 0000000000000000    <2> .time dd 0,0	
  5505                              <1> %endif
  5506                              <1> %include 'source/programs/logout.asm'
  5507 00004556 FF2C6C6F676F757400  <2> 	db 255,44,"logout",0
  5508 0000455F E9C8E2FFFF          <2> 	jmp os
  5509                              <1> %include 'source/programs/loop.asm'
  5510 00004564 FF2C6C6F6F7000      <2> 	db 255,44,"loop",0
  5511 0000456B 803D[79B10000]00    <2> 	cmp byte [LOOPON], 0
  5512 00004572 0F8501000000        <2> 	jne near filoop
  5513 00004578 C3                  <2> 	ret
  5514 00004579 8B35[7AB10000]      <2> filoop: mov esi, [LOOPPOS]
  5515 0000457F FE0D[0FB10000]      <2> 	dec byte [IFON]
  5516 00004585 C605[79B10000]00    <2> 	mov byte [LOOPON], 0
  5517 0000458C 8935[74B10000]      <2> 	mov [BATCHPOS], esi
  5518 00004592 8935[62370000]      <2> 	mov [batchedi], esi
  5519 00004598 C3                  <2> 	ret 
  5520                              <1> %include 'source/programs/ls.asm'
  5521 00004599 FF2C6C7300          <2> db 255,44,"ls",0
  5522 0000459E BE[02970000]        <2> 		mov esi, diskfileindex
  5523                              <2> 	diskindexdir:
  5524 000045A3 803E5F              <2> 		cmp byte [esi], '_'
  5525 000045A6 7440                <2> 		je nextdiskindexdir
  5526 000045A8 E87FD7FFFF          <2> 		call printquiet
  5527 000045AD 56                  <2> 		push esi
  5528 000045AE BE[08460000]        <2> 		mov esi, disktab
  5529 000045B3 E874D7FFFF          <2> 		call printquiet
  5530 000045B8 5E                  <2> 		pop esi
  5531 000045B9 8B4E05              <2> 		mov ecx, [esi + 5]
  5532 000045BC C605[032F0000]05    <2> 		mov byte [firsthexshown], 5
  5533 000045C3 E81AEAFFFF          <2> 		call showdec
  5534 000045C8 56                  <2> 		push esi
  5535 000045C9 BE[DD860000]        <2> 		mov esi, line
  5536 000045CE E859D7FFFF          <2> 		call printquiet
  5537 000045D3 5E                  <2> 		pop esi
  5538 000045D4 81C609000000        <2> 		add esi, 9
  5539 000045DA 81FE[B7980000]      <2> 		cmp esi, enddiskfileindex
  5540 000045E0 72C1                <2> 		jb diskindexdir
  5541 000045E2 E8E9DFFFFF          <2> 		call termcopy
  5542 000045E7 C3                  <2> 		ret
  5543                              <2> 	nextdiskindexdir:
  5544 000045E8 46                  <2> 		inc esi
  5545 000045E9 803E00              <2> 		cmp byte [esi], 0
  5546 000045EC 75FA                <2> 		jne nextdiskindexdir
  5547 000045EE 81C609000000        <2> 		add esi, 9
  5548 000045F4 81FE[B7980000]      <2> 		cmp esi, enddiskfileindex
  5549 000045FA 72A7                <2> 		jb diskindexdir
  5550 000045FC E8CFDFFFFF          <2> 		call termcopy
  5551 00004601 C3                  <2> 		ret
  5552                              <2> 		
  5553 00004602 4469736B2000        <2> 		diskmsg db "Disk ",0
  5554 00004608 0D09090900          <2> 		disktab db 13,9,9,9,0
  5555                              <1> %include 'source/programs/memory.asm'
  5556 0000460D FF2C6D656D6F727900  <2> db 255,44,"memory",0
  5557 00004616 BE[BE980000]        <2> 	mov esi, memlistbuf
  5558 0000461B 31FF                <2> 	xor edi, edi
  5559 0000461D 668B3D[FE9A0000]    <2> 	mov di, [memlistend]
  5560 00004624 01F7                <2> 	add edi, esi
  5561                              <2> printmemmap:
  5562 00004626 8B0E                <2> 	mov ecx, [esi]
  5563 00004628 E8EBE8FFFF          <2> 	call showhex
  5564 0000462D 81C608000000        <2> 	add esi, 8
  5565 00004633 8B0E                <2> 	mov ecx, [esi]
  5566 00004635 E8DEE8FFFF          <2> 	call showhex
  5567 0000463A 81C608000000        <2> 	add esi, 8
  5568 00004640 8B0E                <2> 	mov ecx, [esi]
  5569 00004642 E8D1E8FFFF          <2> 	call showhex
  5570 00004647 81C608000000        <2> 	add esi, 8
  5571 0000464D 57                  <2> 	push edi
  5572 0000464E 56                  <2> 	push esi
  5573 0000464F BE[DD860000]        <2> 	mov esi, line
  5574 00004654 E8E5D6FFFF          <2> 	call print
  5575 00004659 5E                  <2> 	pop esi
  5576 0000465A 5F                  <2> 	pop edi
  5577 0000465B 39FE                <2> 	cmp esi, edi
  5578 0000465D 72C7                <2> 	jb printmemmap
  5579 0000465F C3                  <2> 	ret
  5580                              <2> 	
  5581                              <1> %include 'source/programs/pci.asm'
  5582 00004660 FF2C70636900        <2> db 255,44,"pci",0
  5583 00004666 E8DC190000          <2> 	call pcidump
  5584 0000466B C3                  <2> 	ret 
  5585                              <1> %ifdef network.included
  5586                              <1> 	%include 'source/programs/ping.asm'
  5587 0000466C FF2C70696E6700      <2> db 255,44,"ping",0
  5588                              <2> ping:
  5589 00004673 8B35[CA2C0000]      <2> 	mov esi, [currentcommandloc]
  5590 00004679 81C605000000        <2> 	add esi, 5
  5591 0000467F E8223F0000          <2> 	call strtoip
  5592 00004684 890D[0F470000]      <2> 	mov [.destip], ecx
  5593 0000468A E85D3F0000          <2> 	call showip
  5594 0000468F 8B0D[92860000]      <2> 	mov ecx, [sysip]
  5595 00004695 890D[0B470000]      <2> 	mov [.sourceip]. ecx
  5596 0000469B 31C0                <2> 	xor eax, eax
  5597 0000469D 31DB                <2> 	xor ebx, ebx
  5598 0000469F 66A3[09470000]      <2> 	mov [.checksum], ax
  5599 000046A5 66A3[15470000]      <2> 	mov [.icmpchecksum], ax
  5600 000046AB BF[FF460000]        <2> 	mov edi, .header
  5601 000046B0 BE[13470000]        <2> 	mov esi, .headerend
  5602 000046B5 E8C43E0000          <2> 	call getchecksum
  5603 000046BA 66890D[09470000]    <2> 	mov [.checksum], cx
  5604 000046C1 BF[13470000]        <2> 	mov edi, .icmp
  5605 000046C6 BE[3B470000]        <2> 	mov esi, .packetend
  5606 000046CB E8AE3E0000          <2> 	call getchecksum
  5607 000046D0 66890D[15470000]    <2> 	mov [.icmpchecksum], cx
  5608 000046D7 BF[F1460000]        <2> 	mov edi, .packet
  5609 000046DC BE[3B470000]        <2> 	mov esi, .packetend
  5610 000046E1 E8893E0000          <2> 	call sendpacket
  5611 000046E6 BE[DD860000]        <2> 	mov esi, line
  5612 000046EB E84ED6FFFF          <2> 	call print
  5613 000046F0 C3                  <2> 	ret
  5614                              <2> 	
  5615                              <2> 	
  5616                              <2> 	
  5617                              <2> .packet:
  5618 000046F1 FFFFFFFFFFFF        <2> .destinationmac db 0xFF,0xFF,0xFF,0xFF,0xFF,0xFF
  5619 000046F7 000000000000        <2> .sourcemac	db 0,0,0,0,0,0
  5620 000046FD 0800                <2> .ethertype	db 8,0	;ip is 0x800
  5621                              <2> .header:
  5622 000046FF 45                  <2> .version	db 0x45
  5623 00004700 00                  <2> .services	db 0
  5624 00004701 003C                <2> .length	db 0,0x3C
  5625 00004703 0000                <2> .id		dw 0
  5626 00004705 00                  <2> .flags	db 0
  5627 00004706 00                  <2> .fragment db 0
  5628 00004707 80                  <2> .ttl	db 128
  5629 00004708 01                  <2> .protocol db 1 ;ICMP
  5630 00004709 0000                <2> .checksum dw 0
  5631 0000470B 00000000            <2> .sourceip dd 0
  5632 0000470F 00000000            <2> .destip dd 0
  5633                              <2> .headerend:
  5634                              <2> .icmp:
  5635 00004713 08                  <2> .icmptype db 8 ;Ping request
  5636 00004714 00                  <2> .icmpcode db 0
  5637 00004715 0000                <2> .icmpchecksum dw 0
  5638 00004717 0001                <2> .icmpid db 0,1
  5639 00004719 0000                <2> .sequence dw 0
  5640 0000471B 616263646566676869- <2> db "abcdefghijklmnopqrstuvwabcdefghi" ;this is what microsoft includes
  5641 00004724 6A6B6C6D6E6F707172- <2>
  5642 0000472D 737475767761626364- <2>
  5643 00004736 6566676869          <2>
  5644                              <2> .packetend
  5645                              <1> %endif
  5646                              <1> %include 'source/programs/play.asm'
  5647 0000473B FF2C706C61796100    <2> db 255,44,"playa",0
  5648 00004743 8B3D[CA2C0000]      <2> 	mov edi, [currentcommandloc]
  5649 00004749 81C706000000        <2> 	add edi, 6
  5650 0000474F E833000000          <2> 	call playasync
  5651 00004754 C3                  <2> 	ret
  5652 00004755 FF2C706C617900      <2> db 255,44,"play",0
  5653                              <2> play:
  5654 0000475C 8B3D[CA2C0000]      <2> 	mov edi, [currentcommandloc]
  5655 00004762 81C705000000        <2> 	add edi, 5
  5656 00004768 E81A000000          <2> 	call playasync
  5657                              <2> .waitforsound:
  5658                              <2> %ifdef sound.included
  5659 0000476D A1[FC5B0000]        <2> 	mov eax, [Length0]
  5660 00004772 660B05[005C0000]    <2> 	or ax, [Length1]
  5661                              <2> %endif
  5662 00004779 0A05[69020000]      <2> 	or al, [soundon]
  5663 0000477F 3D00000000          <2> 	cmp eax, 0
  5664 00004784 75E7                <2> 	jne .waitforsound
  5665 00004786 C3                  <2> 	ret
  5666                              <2> playasync:
  5667 00004787 BE0000C000          <2> 	mov esi, 0xC00000
  5668 0000478C E8981B0000          <2> 	call loadfile
  5669 00004791 81FA94010000        <2> 	cmp edx, 404
  5670 00004797 743F                <2> 	je nosoundfound
  5671 00004799 BB0000C000          <2> 	mov ebx, 0xC00000
  5672 0000479E 817B0857415645      <2> 	cmp dword [ebx + 8], "WAVE"
  5673 000047A5 0F843F010000        <2> 	je near wave_player
  5674 000047AB 66813B534E          <2> 	cmp word [ebx], "SN"
  5675 000047B0 7526                <2> 	jne nosoundfound
  5676 000047B2 81C306000000        <2> 	add ebx, 6
  5677 000047B8 891D[6C020000]      <2> 	mov [soundpos], ebx
  5678 000047BE 035BFC              <2> 	add ebx, [ebx - 4]
  5679 000047C1 891D[70020000]      <2> 	mov [soundendpos], ebx
  5680 000047C7 66C705[6A020000]00- <2> 	mov word [soundrepititions], 0
  5681 000047CF 00                  <2>
  5682 000047D0 C605[69020000]01    <2> 	mov byte [soundon], 1
  5683 000047D7 C3                  <2> 	ret
  5684                              <2> nosoundfound:
  5685 000047D8 BE[FE470000]        <2> 	mov esi, notfoundsound
  5686 000047DD E85CD5FFFF          <2> 	call print
  5687 000047E2 8B35[CA2C0000]      <2> 	mov esi, [currentcommandloc]
  5688 000047E8 81C605000000        <2> 	add esi, 5
  5689 000047EE E84BD5FFFF          <2> 	call print
  5690 000047F3 BE[AC860000]        <2> 	mov esi, notfound2
  5691 000047F8 E841D5FFFF          <2> 	call print
  5692 000047FD C3                  <2> 	ret
  5693 000047FE 706C61793A2000      <2> notfoundsound db "play: ",0
  5694                              <2> 
  5695                              <2> %ifdef sound.included
  5696                              <2> sbplay:
  5697 00004805 BE0000C000          <2> 		mov esi, 0xC00000
  5698 0000480A 89F3                <2> 		mov ebx, esi
  5699 0000480C 81C640000000        <2> 		add esi, WAVSTART
  5700 00004812 29F7                <2> 		sub edi, esi
  5701 00004814 66893D[005C0000]    <2> 		mov [Length1], di
  5702 0000481B C1EF0F              <2> 		shr edi, 15
  5703 0000481E 893D[FC5B0000]      <2> 		mov [Length0], edi
  5704 00004824 8B4B18              <2> 		mov ecx, [ebx + 24]
  5705 00004827 890D[0D5C0000]      <2> 		mov [Freq], ecx
  5706 0000482D 31C0                <2> 		xor eax, eax
  5707 0000482F BA0000C000          <2> 		mov	edx, 0xC00000 ;physical location of sound
  5708 00004834 81C240000000        <2> 		add edx, WAVSTART
  5709 0000483A 01D0                <2> 		add	eax, edx
  5710 0000483C 89C6                <2> 		mov esi, eax
  5711 0000483E 31C9                <2> 		xor ecx, ecx
  5712 00004840 31DB                <2> 		xor ebx, ebx
  5713 00004842 66891D[0A5C0000]    <2> 		mov [SegLoc], bx
  5714 00004849 81C300000800        <2> 		add ebx, 0x80000
  5715 0000484F 66B9FFFF            <2> 		mov cx, 0xFFFF
  5716 00004853 6681FF0000          <2> 		cmp di, 0
  5717 00004858 7520                <2> 		jne .autoinit
  5718 0000485A 668B0D[005C0000]    <2> 		mov cx, [Length1]
  5719 00004861 C605[FB5B0000]01    <2> 		mov byte [OddLength], 1
  5720 00004868 6681F90080          <2> 		cmp cx, 32768
  5721 0000486D 730B                <2> 		jae .autoinit
  5722 0000486F C605[FB5B0000]00    <2> 		mov byte [OddLength], 0
  5723 00004876 66D1E1              <2> 		shl cx, 1
  5724 00004879 47                  <2> 		inc edi
  5725                              <2> .autoinit:
  5726 0000487A 4F                  <2> 		dec edi
  5727 0000487B 893D[FC5B0000]      <2> 		mov [Length0], edi
  5728 00004881 66890D[005C0000]    <2> 		mov [Length1], cx
  5729 00004888 66D1E9              <2> 		shr cx, 1
  5730 0000488B 6641                <2> 		inc cx
  5731 0000488D 01C8                <2> 		add eax, ecx
  5732 0000488F A3[025C0000]        <2> 		mov [NextMemLoc], eax
  5733 00004894 8935[065C0000]      <2> 		mov	[MemLoc], esi
  5734 0000489A E814120000          <2> 		call DMACopy
  5735 0000489F 31DB                <2> 		xor ebx, ebx
  5736 000048A1 668B1D[0A5C0000]    <2> 		mov bx, [SegLoc]
  5737 000048A8 31C9                <2> 		xor ecx, ecx
  5738 000048AA 668B0D[005C0000]    <2> 		mov cx, [Length1]
  5739 000048B1 66D1E9              <2> 		shr cx, 1
  5740 000048B4 6641                <2> 		inc cx
  5741 000048B6 01CB                <2> 		add ebx, ecx
  5742 000048B8 66891D[0A5C0000]    <2> 		mov [SegLoc], bx
  5743 000048BF 81C300000800        <2> 		add ebx, 0x80000
  5744 000048C5 8B35[025C0000]      <2> 		mov esi, [NextMemLoc]
  5745 000048CB 89F0                <2> 		mov eax, esi
  5746 000048CD 01C8                <2> 		add eax, ecx
  5747 000048CF A3[025C0000]        <2> 		mov [NextMemLoc], eax
  5748 000048D4 8935[065C0000]      <2> 		mov	[MemLoc], esi
  5749 000048DA E8D4110000          <2> 		call DMACopy
  5750 000048DF E8F2110000          <2> 		call DMAPlay
  5751 000048E4 E87C120000          <2> 		call PlayDSP
  5752 000048E9 C3                  <2> 		ret
  5753                              <2> WAVSTART equ 64;44
  5754                              <2> wave_player:
  5755 000048EA 803D[125C0000]01    <2> 	cmp byte [SoundBlaster], 1
  5756 000048F1 0F840EFFFFFF        <2> 	je near sbplay
  5757 000048F7 BE[02490000]        <2> 	mov esi, nosoundblaster
  5758 000048FC E83DD4FFFF          <2> 	call print
  5759 00004901 C3                  <2> 	ret
  5760                              <2> %else
  5761                              <2> 	wave_player:
  5762                              <2> 		mov esi, nosoundblaster
  5763                              <2> 		call print
  5764                              <2> 		ret
  5765                              <2> %endif
  5766 00004902 4E6F20536F756E6420- <2> nosoundblaster db "No Sound Blaster detected.",10,0
  5767 0000490B 426C61737465722064- <2>
  5768 00004914 657465637465642E0A- <2>
  5769 0000491D 00                  <2>
  5770                              <1> %include 'source/programs/pwd.asm'
  5771 0000491E FF2C70776400        <2> db 255,44,"pwd",0
  5772 00004924 BE[0AAF0000]        <2> 	mov esi, currentfolder
  5773 00004929 E8FED3FFFF          <2> 	call printquiet
  5774 0000492E BE[DD860000]        <2> 	mov esi, line
  5775 00004933 E806D4FFFF          <2> 	call print
  5776 00004938 C3                  <2> 	ret
  5777                              <2> 	
  5778                              <1> %include 'source/programs/reboot.asm'
  5779 00004939 FF2C7265626F6F7400  <2> 	db 255,44,"reboot",0
  5780 00004942 0F011D[4C490000]    <2> 		lidt [idtreboot]
  5781 00004949 CD00                <2> 		int 0
  5782 0000494B F4                  <2> 		hlt
  5783                              <2> 	
  5784 0000494C 0000                <2> 	idtreboot dw 0
  5785 0000494E 00000000            <2> 			  dd 0
  5786                              <2> 
  5787                              <2> 	coldboot:
  5788 00004952 66B84000            <2> 		MOV AX, 0040h
  5789 00004956 8EC0                <2> 		MOV ES, AX
  5790 00004958 2666C7057200000000- <2> 		MOV WORD [ES:00072h], 0h
  5791 00004961 00                  <2>
  5792 00004962 EA00000000FFFF      <2> 		JMP 0FFFFh:0000h
  5793 00004969 CF                  <2> 		IRET
  5794                              <2> 
  5795                              <2> 	warmboot:
  5796 0000496A 66B84000            <2> 		MOV AX, 0040h
  5797 0000496E 8EC0                <2> 		MOV ES, AX
  5798 00004970 2666C7057200000034- <2> 		MOV WORD [ES:00072h], 01234h
  5799 00004979 12                  <2>
  5800 0000497A EA00000000FFFF      <2> 		JMP 0FFFFh:0000h
  5801 00004981 CF                  <2> 		IRET
  5802                              <2> 		
  5803                              <1> %include 'source/programs/reg.asm'
  5804 00004982 FF2C72656700        <2> db 255,44,"reg",0
  5805 00004988 CD03                <2> 	int 3
  5806 0000498A C3                  <2> 	ret 
  5807                              <1> %include 'source/programs/show.asm'
  5808 0000498B FF2C73686F7700      <2> db 255,44,"show",0
  5809 00004992 8B3D[CA2C0000]      <2> 		mov edi, [currentcommandloc]
  5810 00004998 81C705000000        <2> 		add edi, 5
  5811 0000499E BE00008000          <2> 		mov esi, 0x800000
  5812 000049A3 E881190000          <2> 		call loadfile
  5813 000049A8 81FA94010000        <2> 		cmp edx, 404
  5814 000049AE 0F8483000000        <2> 		je near filenotfound
  5815 000049B4 BE00008000          <2> 		mov esi, 0x800000
  5816                              <2> %ifdef gui.included
  5817 000049B9 66813E424D          <2> 		cmp word [esi], "BM"
  5818 000049BE 7410                <2> 		je bmpfound
  5819                              <2> %endif
  5820 000049C0 E879D3FFFF          <2> 		call print
  5821 000049C5 BE[DD860000]        <2> 		mov esi, line
  5822 000049CA E86FD3FFFF          <2> 		call print
  5823 000049CF C3                  <2> 		ret
  5824                              <2> %ifdef gui.included
  5825                              <2> bmpfound:
  5826 000049D0 803D[B8980000]00    <2> 		cmp byte [guion], 0
  5827 000049D7 0F8428000000        <2> 		je near noguibmp
  5828 000049DD BE00008000          <2> 		mov esi, 0x800000
  5829 000049E2 31C9                <2> 		xor ecx, ecx
  5830 000049E4 31D2                <2> 		xor edx, edx
  5831 000049E6 31C0                <2> 		xor eax, eax
  5832 000049E8 31DB                <2> 		xor ebx, ebx
  5833 000049EA E8071B0000          <2> 		call showbmp
  5834 000049EF 30C0                <2> 		xor al, al
  5835 000049F1 B405                <2> 		mov ah, 5
  5836 000049F3 CD30                <2> 		int 30h
  5837 000049F5 E83B200000          <2> 		call guiclear
  5838 000049FA E8D61C0000          <2> 		call clearmousecursor
  5839 000049FF E8B6200000          <2> 		call reloadallgraphics
  5840 00004A04 C3                  <2> 		ret
  5841                              <2> noguibmp:
  5842 00004A05 BE[104A0000]        <2> 		mov esi, warnguimsg
  5843 00004A0A E82FD3FFFF          <2> 		call print
  5844 00004A0F C3                  <2> 		ret
  5845 00004A10 546869732063616E20- <2> warnguimsg db "This can not be done without the GUI.",10,0
  5846 00004A19 6E6F7420626520646F- <2>
  5847 00004A22 6E6520776974686F75- <2>
  5848 00004A2B 742074686520475549- <2>
  5849 00004A34 2E0A00              <2>
  5850                              <2> %endif
  5851                              <2> 
  5852                              <2> filenotfound:
  5853 00004A37 BE[6A4A0000]        <2> 		mov esi, filenf
  5854 00004A3C E8FDD2FFFF          <2> 		call print
  5855 00004A41 8B35[CA2C0000]      <2> 		mov esi, [currentcommandloc]
  5856                              <2> findfilenotfoundzero:
  5857 00004A47 8A06                <2> 		mov al, [esi]
  5858 00004A49 46                  <2> 		inc esi
  5859 00004A4A 3C00                <2> 		cmp al, 0
  5860 00004A4C 7411                <2> 		je nofilenamenotfound
  5861 00004A4E 81FE[7EC90000]      <2> 		cmp esi, buftxtend
  5862 00004A54 7309                <2> 		jae nofilenamenotfound
  5863 00004A56 3C20                <2> 		cmp al, " "
  5864 00004A58 75ED                <2> 		jne findfilenotfoundzero
  5865 00004A5A E8DFD2FFFF          <2> 		call print
  5866                              <2> nofilenamenotfound:
  5867 00004A5F BE[754A0000]        <2> 		mov esi, filenf2
  5868 00004A64 E8D5D2FFFF          <2> 		call print
  5869 00004A69 C3                  <2> 		ret
  5870 00004A6A 5468652066696C6520- <2> filenf db "The file ",34,0
  5871 00004A73 2200                <2>
  5872 00004A75 2220636F756C64206E- <2> filenf2 db 34," could not be found.",10,0
  5873 00004A7E 6F7420626520666F75- <2>
  5874 00004A87 6E642E0A00          <2>
  5875                              <1> %include 'source/programs/shush.asm'
  5876 00004A8C FF2C736875736800    <2> db 255,44,"shush",0	;if you add 2 values it will switch size using the first as X in chars and the second as Y in chars
  5877                              <2> shushprog:
  5878                              <2> %ifdef gui.included
  5879 00004A94 803D[B8980000]00    <2> 	cmp byte [guion], 0
  5880 00004A9B 0F84B4000000        <2> 	je near .noswitchsize
  5881 00004AA1 8B35[CA2C0000]      <2> 	mov esi, [currentcommandloc]
  5882 00004AA7 81C606000000        <2> 	add esi, 6
  5883 00004AAD 56                  <2> 	push esi
  5884 00004AAE 4E                  <2> 	dec esi
  5885                              <2> .findspace:
  5886 00004AAF 46                  <2> 	inc esi
  5887 00004AB0 8A06                <2> 	mov al, [esi]
  5888 00004AB2 3C00                <2> 	cmp al, 0
  5889 00004AB4 0F849B000000        <2> 	je near .noswitchsize
  5890 00004ABA 3C58                <2> 	cmp al, "X"
  5891 00004ABC 7408                <2> 	je .donefind
  5892 00004ABE 3C78                <2> 	cmp al, "x"
  5893 00004AC0 7404                <2> 	je .donefind
  5894 00004AC2 3C20                <2> 	cmp al, " "
  5895 00004AC4 75E9                <2> 	jne .findspace
  5896                              <2> .donefind:
  5897 00004AC6 30C0                <2> 	xor al, al
  5898 00004AC8 8806                <2> 	mov [esi], al
  5899 00004ACA 46                  <2> 	inc esi
  5900 00004ACB 89F7                <2> 	mov edi, esi
  5901 00004ACD E8F5E5FFFF          <2> 	call cnvrttxt
  5902 00004AD2 89C8                <2> 	mov eax, ecx
  5903 00004AD4 5E                  <2> 	pop esi
  5904 00004AD5 50                  <2> 	push eax
  5905 00004AD6 89F7                <2> 	mov edi, esi
  5906 00004AD8 E8EAE5FFFF          <2> 	call cnvrttxt
  5907 00004ADD 89CB                <2> 	mov ebx, ecx
  5908 00004ADF 58                  <2> 	pop eax	
  5909 00004AE0 6681FB0000          <2> 	cmp bx, 0
  5910 00004AE5 0F846A000000        <2> 	je near .noswitchsize
  5911 00004AEB 663D0000            <2> 	cmp ax, 0
  5912 00004AEF 0F8460000000        <2> 	je near .noswitchsize
  5913 00004AF5 66C1E303            <2> 	shl bx, 3
  5914 00004AF9 66C1E004            <2> 	shl ax, 4
  5915 00004AFD 663B1D[35550000]    <2> 	cmp bx, [resolutionx]
  5916 00004B04 7607                <2> 	jbe .nofixx
  5917 00004B06 668B1D[35550000]    <2> 	mov bx, [resolutionx]
  5918                              <2> .nofixx:
  5919 00004B0D 66051000            <2> 	add ax, 16
  5920 00004B11 663B05[37550000]    <2> 	cmp ax, [resolutiony]
  5921 00004B18 7606                <2> 	jbe .nofixy
  5922 00004B1A 66A1[37550000]      <2> 	mov ax, [resolutiony]
  5923                              <2> .nofixy:
  5924 00004B20 662D1000            <2> 	sub ax, 16
  5925 00004B24 6631C9              <2> 	xor cx, cx
  5926 00004B27 6631D2              <2> 	xor dx, dx
  5927 00004B2A 66891D[A66D0000]    <2> 	mov [termwindow], bx
  5928 00004B31 66A3[A86D0000]      <2> 	mov [termwindow + 2], ax	;the previous lines of code make a large terminal window that is 4 characters smaller than the screen
  5929 00004B37 BE[A66D0000]        <2> 	mov esi, termwindow
  5930 00004B3C 31DB                <2> 	xor ebx, ebx
  5931 00004B3E 6631C0              <2> 	xor ax, ax
  5932 00004B41 E872270000          <2> 	call showwindow
  5933 00004B46 E8EA1E0000          <2> 	call guiclear
  5934 00004B4B E857D2FFFF          <2> 	call clear
  5935 00004B50 E8651F0000          <2> 	call reloadallgraphics
  5936                              <2> .noswitchsize:
  5937                              <2> %endif
  5938 00004B55 BE[604B0000]        <2> 	mov esi, shushmsg
  5939 00004B5A E8DFD1FFFF          <2> 	call print
  5940 00004B5F C3                  <2> 	ret
  5941 00004B60 57656C636F6D652074- <2> 	shushmsg db "Welcome to the SollerOS Hardly Unix-Compatible Shell!",10,0
  5942 00004B69 6F2074686520536F6C- <2>
  5943 00004B72 6C65724F5320486172- <2>
  5944 00004B7B 646C7920556E69782D- <2>
  5945 00004B84 436F6D70617469626C- <2>
  5946 00004B8D 65205368656C6C210A- <2>
  5947 00004B96 00                  <2>
  5948                              <1> %include 'source/programs/system.asm'
  5949 00004B97 FF2C73797374656D00  <2> 	db 255,44,"system",0
  5950 00004BA0 BE[B34C0000]        <2> 	mov esi, kernelinfomsg
  5951 00004BA5 E882D1FFFF          <2> 	call printquiet
  5952 00004BAA B9[02970000]        <2> 	mov ecx, osend
  5953 00004BAF E82EE4FFFF          <2> 	call showdec
  5954 00004BB4 BE[C84C0000]        <2> 	mov esi, diskbytemsg
  5955 00004BB9 E86ED1FFFF          <2> 	call printquiet
  5956 00004BBE B9[02970000]        <2> 	mov ecx, osend
  5957 00004BC3 81C1[ECC52900]      <2> 	add ecx, commandbufend
  5958 00004BC9 81E9[B8980000]      <2> 	sub ecx, bssstart	;add the extra buffer space
  5959 00004BCF E80EE4FFFF          <2> 	call showdec
  5960 00004BD4 BE[DF4C0000]        <2> 	mov esi, membytemsg
  5961 00004BD9 E84ED1FFFF          <2> 	call printquiet
  5962 00004BDE BE[424D0000]        <2> 	mov esi, endofmemmsg
  5963 00004BE3 E844D1FFFF          <2> 	call printquiet
  5964 00004BE8 B9[00FA3900]        <2> 	mov ecx, bssend
  5965 00004BED E826E3FFFF          <2> 	call showhex
  5966 00004BF2 BE[F84C0000]        <2> 	mov esi, systeminfomsg
  5967 00004BF7 E830D1FFFF          <2> 	call printquiet
  5968                              <2> getcpuspeed:
  5969 00004BFC B8FE000000          <2> 	mov eax, 0xFE
  5970 00004C01 E621                <2> 	out 0x21, al ;mask off all but timer interrupt
  5971 00004C03 B020                <2> 	mov al, 0x20
  5972 00004C05 E620                <2> 	out 0x20, al
  5973 00004C07 F4                  <2> 	hlt
  5974 00004C08 0F31                <2> 	rdtsc
  5975 00004C0A 89D6                <2> 	mov esi, edx
  5976 00004C0C 89C7                <2> 	mov edi, eax
  5977 00004C0E 31C0                <2> 	xor eax, eax
  5978 00004C10 C605[4A020000]01    <2> 	mov byte [testingcpuspeed], 1
  5979                              <2> cpuspeedloop:	;wait until next timer interrupt, then inc eax until the next
  5980 00004C17 40                  <2> 	inc eax
  5981 00004C18 E9FAFFFFFF          <2> 	jmp cpuspeedloop
  5982                              <2> cpuspeedloopend:
  5983 00004C1D 0F31                <2> 	rdtsc
  5984 00004C1F 29F8                <2> 	sub eax, edi
  5985 00004C21 29F2                <2> 	sub edx, esi
  5986 00004C23 8915[53020000]      <2> 	mov [cpuclocksperint + 4], edx
  5987 00004C29 A3[4F020000]        <2> 	mov [cpuclocksperint], eax
  5988 00004C2E 31C0                <2> 	xor eax, eax
  5989 00004C30 E621                <2> 	out 0x21, al
  5990 00004C32 B020                <2> 	mov al, 0x20
  5991 00004C34 E620                <2> 	out 0x20, al
  5992 00004C36 31D2                <2> 	xor edx, edx
  5993 00004C38 31C0                <2> 	xor eax, eax
  5994 00004C3A A1[4B020000]        <2> 	mov eax, [cpuspeedperint]
  5995 00004C3F D1E0                <2> 	shl eax, 1	;the cpu speed loop actually contains 2 commands so multiply the
  5996                              <2> 				;result by 2
  5997 00004C41 8B1D[5D020000]      <2> 	mov ebx, [timeinterval]
  5998 00004C47 C1EB0A              <2> 	shr ebx, 10 ;divide the interval by 1024
  5999 00004C4A F7F3                <2> 	div ebx	;quotient in eax, remainder in edx
  6000 00004C4C 89C1                <2> 	mov ecx, eax
  6001 00004C4E E88FE3FFFF          <2> 	call showdec
  6002 00004C53 BE[264D0000]        <2> 	mov esi, cpuspeedmsg
  6003 00004C58 E8CFD0FFFF          <2> 	call printquiet
  6004 00004C5D 31D2                <2> 	xor edx, edx
  6005 00004C5F A1[4F020000]        <2> 	mov eax, [cpuclocksperint]
  6006 00004C64 8B15[53020000]      <2> 	mov edx, [cpuclocksperint + 4]
  6007 00004C6A 8B1D[5D020000]      <2> 	mov ebx, [timeinterval]
  6008 00004C70 C1EB0A              <2> 	shr ebx, 10
  6009 00004C73 F7F3                <2> 	div ebx
  6010 00004C75 89C1                <2> 	mov ecx, eax
  6011 00004C77 E866E3FFFF          <2> 	call showdec
  6012 00004C7C BE[2C4D0000]        <2> 	mov esi, cpuclockmsg
  6013 00004C81 E8A6D0FFFF          <2> 	call printquiet
  6014 00004C86 8B0D[57020000]      <2> 	mov ecx, [memoryspace]
  6015 00004C8C C1E914              <2> 	shr ecx, 20
  6016 00004C8F 41                  <2> 	inc ecx	;the reading is one MB behind
  6017 00004C90 E84DE3FFFF          <2> 	call showdec
  6018 00004C95 BE[314D0000]        <2> 	mov esi, memoryspacemsg
  6019 00004C9A E89FD0FFFF          <2> 	call print
  6020                              <2> %ifdef sound.included
  6021 00004C9F 803D[125C0000]00    <2> 	cmp byte [SoundBlaster], 0
  6022 00004CA6 740A                <2> 	je .nosb
  6023 00004CA8 BE[0E4D0000]        <2> 	mov esi, soundblastermsg
  6024 00004CAD E88CD0FFFF          <2> 	call print
  6025                              <2> .nosb:
  6026                              <2> %endif
  6027 00004CB2 C3                  <2> 	ret
  6028                              <2> 
  6029 00004CB3 4B65726E656C20496E- <2> kernelinfomsg db "Kernel Information:",10,0
  6030 00004CBC 666F726D6174696F6E- <2>
  6031 00004CC5 3A0A00              <2>
  6032 00004CC8 427974657320446973- <2> diskbytemsg db "Bytes Disk Space Used",10,0
  6033 00004CD1 6B2053706163652055- <2>
  6034 00004CDA 7365640A00          <2>
  6035 00004CDF 4279746573204D656D- <2> membytemsg db "Bytes Memory Space Used",10,0
  6036 00004CE8 6F7279205370616365- <2>
  6037 00004CF1 20557365640A00      <2>
  6038 00004CF8 0A53797374656D2049- <2> systeminfomsg db 10,"System Information:",10,0
  6039 00004D01 6E666F726D6174696F- <2>
  6040 00004D0A 6E3A0A00            <2>
  6041                              <2> %ifdef sound.included
  6042 00004D0E 536F756E64626C6173- <2> 	soundblastermsg db "Soundblaster Detected.",10,0
  6043 00004D17 746572204465746563- <2>
  6044 00004D20 7465642E0A00        <2>
  6045                              <2> %endif
  6046 00004D26 4D4950530A00        <2> cpuspeedmsg db "MIPS",10,0
  6047 00004D2C 4D487A0A00          <2> cpuclockmsg db "MHz",10,0
  6048 00004D31 4D42204D656D6F7279- <2> memoryspacemsg db "MB Memory Space",10,0
  6049 00004D3A 2053706163650A00    <2>
  6050 00004D42 456E64206F66204D65- <2> endofmemmsg: db "End of Memory Space: 0x",0
  6051 00004D4B 6D6F72792053706163- <2>
  6052 00004D54 653A20307800        <2>
  6053                              <1> %include 'source/programs/time.asm'
  6054 00004D5A 082E30303030303030- <2> timenscache db 8,".000000000"
  6055 00004D63 3030                <2>
  6056 00004D65 200A00              <2> timenscacheend: db " ",10,0
  6057 00004D68 00                  <2> istimeset db 0
  6058 00004D69 456E74657220746865- <2> settimemsg db "Enter the current UNIX time:",10,0
  6059 00004D72 2063757272656E7420- <2>
  6060 00004D7B 554E49582074696D65- <2>
  6061 00004D84 3A0A00              <2>
  6062 00004D87 00<rept>            <2> timeinputbuffer times 12 db 0
  6063 00004D93 00                  <2> timeinputbend: db 0
  6064                              <2> 
  6065 00004D94 FF2C74696D6500      <2> db 255,44,"time",0
  6066 00004D9B 803D[684D0000]00    <2> 	cmp byte [istimeset], 0
  6067 00004DA2 753A                <2> 	jne timeisset
  6068 00004DA4 BE[694D0000]        <2> 	mov esi, settimemsg
  6069 00004DA9 E890CFFFFF          <2> 	call print
  6070 00004DAE BE[874D0000]        <2> 	mov esi, timeinputbuffer
  6071 00004DB3 BF[934D0000]        <2> 	mov edi, timeinputbend
  6072 00004DB8 E868D0FFFF          <2> 	call readline
  6073 00004DBD BE[874D0000]        <2> 	mov esi, timeinputbuffer
  6074 00004DC2 31FF                <2> 	xor edi, edi
  6075 00004DC4 E8FEE2FFFF          <2> 	call cnvrttxt
  6076 00004DC9 890D[61020000]      <2> 	mov [timeseconds], ecx
  6077 00004DCF 31C9                <2> 	xor ecx, ecx
  6078 00004DD1 890D[65020000]      <2> 	mov [timenanoseconds], ecx
  6079 00004DD7 C605[684D0000]01    <2> 	mov byte [istimeset], 1
  6080                              <2> timeisset:
  6081 00004DDE 8B0D[61020000]      <2> 	mov ecx, [timeseconds]
  6082 00004DE4 E8F9E1FFFF          <2> 	call showdec
  6083                              <2> 	
  6084 00004DE9 8B0D[65020000]      <2> 	mov ecx, [timenanoseconds]
  6085 00004DEF BE[5A4D0000]        <2> 	mov esi, timenscache
  6086 00004DF4 C7460230303030      <2> 	mov dword [esi+ 2], "0000"
  6087 00004DFB C7460630303030      <2> 	mov dword [esi + 6], "0000"
  6088 00004E02 C6460A30            <2> 	mov byte [esi + 10], "0"
  6089 00004E06 BE[654D0000]        <2> 	mov esi, timenscacheend
  6090 00004E0B E8A0DFFFFF          <2> 	call convert
  6091 00004E10 BE[5A4D0000]        <2> 	mov esi, timenscache
  6092 00004E15 E824CFFFFF          <2> 	call print
  6093                              <2> 	
  6094 00004E1A E80F000000          <2> 	call time
  6095 00004E1F BE[FA4F0000]        <2> 	mov esi, timeshow
  6096 00004E24 E815CFFFFF          <2> 	call print
  6097 00004E29 E9BC000000          <2> 	jmp findday
  6098                              <2> time:
  6099 00004E2E E84F010000          <2> 	call tstackput1
  6100 00004E33 B00A                <2> 	mov al,10			;Get RTC register A
  6101 00004E35 E879010000          <2> 	call tget1
  6102 00004E3A A880                <2> 	test al,0x80			;Is update in progress?
  6103 00004E3C 75F0                <2> 	jne time				; yes, wait
  6104                              <2> 
  6105 00004E3E B000                <2> 	mov al,0			;Get seconds (00 to 59)
  6106 00004E40 E86E010000          <2> 	call tget1
  6107 00004E45 A2[F14F0000]        <2> 	mov [RTCtimeSecond],al
  6108                              <2> 
  6109 00004E4A B002                <2> 	mov al,0x02			;Get minutes (00 to 59)
  6110 00004E4C E862010000          <2> 	call tget1
  6111 00004E51 A2[F24F0000]        <2> 	mov [RTCtimeMinute],al
  6112                              <2> 
  6113 00004E56 B004                <2> 	mov al,0x04			;Get hours (see notes)
  6114 00004E58 E856010000          <2> 	call tget1
  6115 00004E5D A2[F34F0000]        <2> 	mov [RTCtimeHour],al
  6116                              <2> 
  6117 00004E62 B007                <2> 	mov al,0x07			;Get day of month (01 to 31)
  6118 00004E64 E84A010000          <2> 	call tget1
  6119 00004E69 A2[F44F0000]        <2> 	mov [RTCtimeDay],al
  6120                              <2> 
  6121 00004E6E B008                <2> 	mov al,0x08			;Get month (01 to 12)
  6122 00004E70 E83E010000          <2> 	call tget1
  6123 00004E75 A2[F54F0000]        <2> 	mov [RTCtimeMonth],al
  6124                              <2> 
  6125 00004E7A B009                <2> 	mov al,0x09			;Get year (00 to 99)
  6126 00004E7C E832010000          <2> 	call tget1
  6127 00004E81 A2[F64F0000]        <2> 	mov [RTCtimeYear],al
  6128                              <2> 	
  6129 00004E86 BE[FA4F0000]        <2> 	mov esi, timeshow
  6130 00004E8B 8A2D[F34F0000]      <2> 	mov ch, [RTCtimeHour]
  6131 00004E91 E828010000          <2> 	call tput1
  6132 00004E96 8A2D[F24F0000]      <2> 	mov ch, [RTCtimeMinute]
  6133 00004E9C E81D010000          <2> 	call tput1
  6134 00004EA1 8A2D[F14F0000]      <2> 	mov ch, [RTCtimeSecond]
  6135 00004EA7 E812010000          <2> 	call tput1
  6136 00004EAC BE[03500000]        <2> 	mov esi, dateshow
  6137 00004EB1 8A2D[F54F0000]      <2> 	mov ch, [RTCtimeMonth]
  6138 00004EB7 E802010000          <2> 	call tput1
  6139 00004EBC 8A2D[F44F0000]      <2> 	mov ch, [RTCtimeDay]
  6140 00004EC2 E8F7000000          <2> 	call tput1
  6141 00004EC7 B520                <2> 	mov ch, 0x20
  6142 00004EC9 E8F0000000          <2> 	call tput1
  6143 00004ECE 4E                  <2> 	dec esi
  6144 00004ECF 8A2D[F64F0000]      <2> 	mov ch, [RTCtimeYear]
  6145 00004ED5 E8E4000000          <2> 	call tput1
  6146 00004EDA E8BD000000          <2> 	call tstackget1
  6147 00004EDF C3                  <2> 	ret
  6148 00004EE0 BE[FA4F0000]        <2> 	mov esi, timeshow
  6149 00004EE5 E854CEFFFF          <2> 	call print
  6150                              <2> ;;get day of week
  6151                              <2> ;;add these:
  6152                              <2> ;;century value
  6153                              <2> ;;last 2 digits of year
  6154                              <2> ;;last 2 digits of year right shifted twice
  6155                              <2> ;;month table value
  6156                              <2> ;;day of the month
  6157                              <2> ;;divide these by 7
  6158                              <2> ;;the remainder is the day
  6159                              <2> findday:
  6160 00004EEA 31C0                <2> 	xor eax, eax
  6161                              <2> ;;first convert the values from BCD to hex
  6162 00004EEC A0[F44F0000]        <2> 	mov al, [RTCtimeDay]
  6163 00004EF1 E873000000          <2> 	call converttohex
  6164 00004EF6 8825[F74F0000]      <2> 	mov [dayhex], ah
  6165 00004EFC A0[F54F0000]        <2> 	mov al, [RTCtimeMonth]
  6166 00004F01 E863000000          <2> 	call converttohex
  6167 00004F06 8825[F84F0000]      <2> 	mov [monthhex], ah
  6168 00004F0C A0[F64F0000]        <2> 	mov al, [RTCtimeYear]
  6169 00004F11 E853000000          <2> 	call converttohex
  6170 00004F16 8825[F94F0000]      <2> 	mov [yearhex], ah
  6171 00004F1C 31C0                <2> 	xor eax, eax
  6172 00004F1E A0[F94F0000]        <2> 	mov al, [yearhex]
  6173 00004F23 C0E802              <2> 	shr al, 2
  6174 00004F26 0205[F94F0000]      <2> 	add al, [yearhex]
  6175 00004F2C 0506000000          <2> 	add eax, 6
  6176 00004F31 31DB                <2> 	xor ebx, ebx
  6177 00004F33 8A1D[F84F0000]      <2> 	mov bl, [monthhex]
  6178 00004F39 FECB                <2> 	dec bl
  6179 00004F3B 81C3[18500000]      <2> 	add ebx, month
  6180 00004F41 31C9                <2> 	xor ecx, ecx
  6181 00004F43 8A0B                <2> 	mov cl, [ebx]
  6182 00004F45 01C8                <2> 	add eax, ecx
  6183 00004F47 8A0D[F74F0000]      <2> 	mov cl, [dayhex]
  6184 00004F4D 01C8                <2> 	add eax, ecx
  6185 00004F4F 66BB0700            <2> 	mov bx, 7
  6186 00004F53 31D2                <2> 	xor edx, edx
  6187 00004F55 66F7F3              <2> 	div bx
  6188 00004F58 C1E202              <2> 	shl edx, 2
  6189 00004F5B 81C2[24500000]      <2> 	add edx, day
  6190 00004F61 8B32                <2> 	mov esi, [edx]
  6191 00004F63 E8D6CDFFFF          <2> 	call print
  6192 00004F68 C3                  <2> 	ret
  6193                              <2> 	
  6194                              <2> converttohex:
  6195 00004F69 88C4                <2> 	mov ah, al
  6196 00004F6B C0E804              <2> 	shr al, 4
  6197 00004F6E C0E404              <2> 	shl ah, 4
  6198 00004F71 C0EC04              <2> 	shr ah, 4
  6199 00004F74 3C00                <2> 	cmp al, 0
  6200 00004F76 7409                <2> 	je noconverttohex
  6201                              <2> converttohexlp:
  6202 00004F78 80C40A              <2> 	add ah, 10
  6203 00004F7B FEC8                <2> 	dec al
  6204 00004F7D 3C00                <2> 	cmp al, 0
  6205 00004F7F 75F7                <2> 	jne converttohexlp
  6206                              <2> noconverttohex:
  6207 00004F81 C3                  <2> 	ret
  6208                              <2> 	
  6209                              <2> tstackput1:
  6210 00004F82 8935[ED4F0000]      <2> 	mov [tstack + 20], esi
  6211 00004F88 BE[D94F0000]        <2> 	mov esi, tstack
  6212 00004F8D 8906                <2> 	mov [esi], eax
  6213 00004F8F 895E04              <2> 	mov [esi + 4], ebx
  6214 00004F92 894E08              <2> 	mov [esi + 8], ecx
  6215 00004F95 89560C              <2> 	mov [esi + 12], edx
  6216 00004F98 897E10              <2> 	mov [esi + 16], edi
  6217 00004F9B C3                  <2> 	ret
  6218                              <2> 	
  6219                              <2> tstackget1:
  6220 00004F9C BE[D94F0000]        <2> 	mov esi, tstack
  6221 00004FA1 8B06                <2> 	mov eax, [esi]
  6222 00004FA3 8B5E04              <2> 	mov ebx, [esi + 4]
  6223 00004FA6 8B4E08              <2> 	mov ecx, [esi + 8]
  6224 00004FA9 8B560C              <2> 	mov edx, [esi + 12]
  6225 00004FAC 8B7E10              <2> 	mov edi, [esi + 16]
  6226 00004FAF 8B7614              <2> 	mov esi, [esi + 20]
  6227 00004FB2 C3                  <2> 	ret
  6228                              <2> 	
  6229                              <2> tget1:
  6230 00004FB3 66BA7000            <2> 	mov dx, 0x70
  6231 00004FB7 EE                  <2> 	out dx, al
  6232 00004FB8 6642                <2> 	inc dx
  6233 00004FBA EC                  <2> 	in al, dx
  6234 00004FBB 664A                <2> 	dec dx
  6235 00004FBD C3                  <2> 	ret
  6236                              <2> 	
  6237                              <2> tput1:
  6238 00004FBE 66C1E904            <2> 	shr cx, 4
  6239 00004FC2 B030                <2> 	mov al, 48
  6240 00004FC4 00E8                <2> 	add al, ch
  6241 00004FC6 8806                <2> 	mov [esi], al
  6242 00004FC8 46                  <2> 	inc esi
  6243 00004FC9 B030                <2> 	mov al, 48
  6244 00004FCB C0E904              <2> 	shr cl, 4
  6245 00004FCE 00C8                <2> 	add al, cl
  6246 00004FD0 8806                <2> 	mov [esi], al
  6247 00004FD2 81C602000000        <2> 	add esi, 2
  6248 00004FD8 C3                  <2> 	ret
  6249                              <2> 		
  6250 00004FD9 000000000000000000- <2> 	tstack dd 0,0,0,0,0,0
  6251 00004FE2 000000000000000000- <2>
  6252 00004FEB 000000000000        <2>
  6253 00004FF1 00                  <2> 	RTCtimeSecond db 0
  6254 00004FF2 00                  <2> 	RTCtimeMinute db 0
  6255 00004FF3 00                  <2> 	RTCtimeHour db 0
  6256 00004FF4 00                  <2> 	RTCtimeDay db 0
  6257 00004FF5 00                  <2> 	RTCtimeMonth db 0
  6258 00004FF6 00                  <2> 	RTCtimeYear db 0
  6259 00004FF7 00                  <2> 	dayhex db 0
  6260 00004FF8 00                  <2> 	monthhex db 0
  6261 00004FF9 00                  <2> 	yearhex db 0
  6262 00004FFA 30303A30303A30300A  <2> 	timeshow db "00:00:00",10
  6263 00005003 30302D30302D303030- <2> 	dateshow db "00-00-0000",10,0
  6264 0000500C 300A00              <2>
  6265                              <2> 	oldcentury:	;;from 1700 to 1900
  6266 0000500F 040200              <2> 	db 4,2,0
  6267                              <2> 	century:	;;from 2000 to 2500
  6268 00005012 060402000604        <2> 	db 6,4,2,0,6,4
  6269                              <2> 	month:
  6270 00005018 000303060104060205- <2> 	db 0,3,3,6,1,4,6,2,5,0,3,5
  6271 00005021 000305              <2>
  6272                              <2> 	day:
  6273 00005024 [40500000]          <2> 	dd sunday
  6274 00005028 [48500000]          <2> 	dd monday
  6275 0000502C [50500000]          <2> 	dd tuesday
  6276 00005030 [59500000]          <2> 	dd wednesday
  6277 00005034 [64500000]          <2> 	dd thursday
  6278 00005038 [6E500000]          <2> 	dd friday
  6279 0000503C [76500000]          <2> 	dd saturday
  6280                              <2> sunday:
  6281 00005040 53756E6461790A00    <2> 	db "Sunday",10,0
  6282                              <2> monday:
  6283 00005048 4D6F6E6461790A00    <2> 	db "Monday",10,0
  6284                              <2> tuesday:
  6285 00005050 547565736461790A00  <2> 	db "Tuesday",10,0
  6286                              <2> wednesday:
  6287 00005059 5765646E6573646179- <2> 	db "Wednesday",10,0
  6288 00005062 0A00                <2>
  6289                              <2> thursday:
  6290 00005064 54687572736461790A- <2> 	db "Thursday",10,0
  6291 0000506D 00                  <2>
  6292                              <2> friday:
  6293 0000506E 4672696461790A00    <2> 	db "Friday",10,0
  6294                              <2> saturday:
  6295 00005076 53617475726461790A- <2> 	db "Saturday",10,0
  6296 0000507F 00                  <2>
  6297                              <1> %include 'source/programs/turnoff.asm'
  6298 00005080 FF2C7475726E6F6666- <2> 	db 255,44,"turnoff",0
  6299 00005089 00                  <2>
  6300                              <2> 	turnoff:
  6301 0000508A 66BB[A550]          <2> 			mov bx, shutdown
  6302 0000508E 66891D[0A0D0000]    <2> 			mov [realmodeptr], bx
  6303 00005095 BB[D0500000]        <2> 			mov ebx, halt
  6304 0000509A 891D[060D0000]      <2> 			mov [realmodereturn], ebx
  6305 000050A0 E94ABBFFFF          <2> 			jmp realmode
  6306                              <2> 
  6307                              <2> [BITS 16]
  6308                              <2> 		shutdown:
  6309 000050A5 B453                <2> 			mov ah, 0x53
  6310 000050A7 B004                <2> 			mov al, 4
  6311 000050A9 31DB                <2> 			xor bx, bx
  6312 000050AB CD15                <2> 			int 0x15
  6313                              <2> 			
  6314 000050AD B453                <2> 			mov ah, 0x53
  6315 000050AF B001                <2> 			mov al, 1
  6316 000050B1 31DB                <2> 			xor bx, bx
  6317 000050B3 CD15                <2> 			int 0x15
  6318                              <2> 			
  6319 000050B5 B453                <2> 			mov ah, 0x53
  6320 000050B7 B008                <2> 			mov al, 8
  6321 000050B9 BB0100              <2> 			mov bx, 1
  6322 000050BC B90100              <2> 			mov cx, 1
  6323 000050BF CD15                <2> 			int 0x15
  6324                              <2> 			
  6325 000050C1 B453                <2> 			mov ah, 0x53
  6326 000050C3 B007                <2> 			mov al, 7
  6327 000050C5 BB0100              <2> 			mov bx, 1
  6328 000050C8 B90300              <2> 			mov cx, 3
  6329 000050CB CD15                <2> 			int 0x15
  6330 000050CD E9FDFF              <2> 			jmp $
  6331                              <2> 			[BITS 32]
  6332 000050D0 E9FBFFFFFF          <2> halt: jmp $
  6333                              <1> %include 'source/programs/wait.asm'
  6334 000050D5 FF2C7761697400      <2> db 255,44,"wait",0
  6335                              <2> waitkey:
  6336 000050DC E83AD1FFFF          <2> 		call getchar
  6337 000050E1 C3                  <2> 		ret
  6338                              <1> %include 'source/programs/while.asm'
  6339 000050E2 FF2C7768696C6500    <2> db 255,44,"while",0
  6340 000050EA 30C0                <2> whilecmd:  xor al, al
  6341 000050EC 3805[78B10000]      <2> 	cmp [BATCHISON], al
  6342 000050F2 0F8445E7FFFF        <2> 	je near notbatch
  6343 000050F8 8B35[74B10000]      <2> 	mov esi, [BATCHPOS]
  6344 000050FE 81EE02000000        <2> 	sub esi, 2
  6345 00005104 4E                  <2> whilefnd: dec esi
  6346 00005105 8A06                <2> 	mov al, [esi]
  6347 00005107 3C0A                <2> 	cmp al, 10
  6348 00005109 0F840D000000        <2> 	je near whilefnd2
  6349 0000510F 3C00                <2> 	cmp al, 0
  6350 00005111 0F8405000000        <2> 	je near whilefnd2
  6351 00005117 E9E8FFFFFF          <2> 	jmp whilefnd
  6352                              <2> whilefnd2:
  6353 0000511C 46                  <2> 	inc esi
  6354 0000511D 8935[7AB10000]      <2> 	mov [LOOPPOS], esi
  6355 00005123 C605[79B10000]01    <2> 	mov BYTE [LOOPON], 1
  6356 0000512A BE[7EC50000]        <2> 	mov esi, buftxt
  6357 0000512F BB[7EC50000]        <2> 	mov ebx, buftxt
  6358 00005134 81C306000000        <2> 	add ebx, 6
  6359 0000513A E9FDF0FFFF          <2> 	jmp chkeqsn
  6360                              <1> progend:		;programs end here	
  6361                              <1> batchprogend:
  6362                                  	%include "source/hardware.asm"
  6363                              <1> %ifdef gui.included
  6364                              <1> 	%include "source/drivers/video/vesa.asm"
  6365                              <2> [BITS 16]
  6366                              <2> guiswitch:
  6367 0000513F 81F90000            <2> 	cmp cx, 0
  6368 00005143 750B                <2> 	jne guiswitchdefnum
  6369 00005145 B81200              <2> 	mov ax, 12h
  6370 00005148 31DB                <2> 	xor bx, bx
  6371 0000514A CD10                <2> 	int 10h
  6372 0000514C E85100              <2> 	call guiloadagain
  6373                              <2> guiswitchnocando:
  6374 0000514F C3                  <2> 	ret	;return without switching as mode number is bad
  6375                              <2> guiswitchdefnum:	;switch to a defined mode number
  6376 00005150 B8004F              <2> 	mov ax, 0x4F00
  6377 00005153 BF[2353]            <2> 	mov di, VBEMODEBLOCK
  6378 00005156 CD10                <2> 	int 10h
  6379 00005158 BE[4553]            <2> 	mov si, reserved
  6380 0000515B 81EE0200            <2> 	sub si, 2
  6381                              <2> .loop:
  6382 0000515F 81C60200            <2> 	add si, 2
  6383 00005163 81FE[2354]          <2> 	cmp si, oemdata
  6384 00005167 74E6                <2> 	je guiswitchnocando
  6385 00005169 813CFFFF            <2> 	cmp word [si], 0xFFFF
  6386 0000516D 74E0                <2> 	je guiswitchnocando
  6387 0000516F 390C                <2> 	cmp [si], cx
  6388 00005171 75EC                <2> 	jne .loop
  6389 00005173 8936[7952]          <2> 	mov [videomodecache], si
  6390 00005177 81C90040            <2> 	or cx, 0x4000	;make sure linear frame buffer is selected
  6391 0000517B B8014F              <2> 	mov ax, 0x4F01
  6392 0000517E BF[2355]            <2> 	mov di, VBEMODEINFOBLOCK
  6393 00005181 890E[7752]          <2> 	mov [vesamode], cx
  6394 00005185 CD10                <2> 	int 10h
  6395 00005187 E9CD00              <2> 	jmp selectedvesa
  6396                              <2> guiload:
  6397 0000518A BE[FB52]            <2> 	mov si, bootmsg
  6398 0000518D E8E7AE              <2> 	call printrm
  6399 00005190 31C0                <2> 	xor ax, ax
  6400 00005192 CD16                <2> 	int 16h
  6401 00005194 3C79                <2> 	cmp al, "y"
  6402 00005196 0F8597AE            <2> 	jne near vgaset
  6403 0000519A BE[DC86]            <2> 	mov si, crlf
  6404 0000519D E8D7AE              <2> 	call printrm
  6405                              <2> guiloadagain:
  6406 000051A0 B8004F              <2> 	mov ax, 04F00h
  6407 000051A3 BF[2353]            <2> 	mov di, VBEMODEBLOCK
  6408 000051A6 CD10                <2> 	int 10h
  6409 000051A8 BE[4553]            <2> 	mov si, reserved
  6410 000051AB 81EE0200            <2> 	sub si, 2
  6411                              <2> findvideomodes:
  6412 000051AF 81C60200            <2> 	add si, 2
  6413 000051B3 8B0C                <2> 	mov cx, [si]
  6414 000051B5 81F9FFFF            <2> 	cmp cx, 0xFFFF
  6415 000051B9 0F840B00            <2> 	je near nextvmode
  6416 000051BD 81FE[2354]          <2> 	cmp si, oemdata
  6417 000051C1 0F836CAE            <2> 	jae near vgaset	;;kill if no valid list is found
  6418 000051C5 E9E7FF              <2> 	jmp findvideomodes 	
  6419                              <2> ;;debug,shows vmodes available
  6420                              <2> nextvmode:
  6421 000051C8 81EE0200            <2> 	sub si, 2
  6422 000051CC 81FE[4553]          <2> 	cmp si, reserved
  6423 000051D0 0F82CCFF            <2> 	jb near guiloadagain
  6424 000051D4 8B0C                <2> 	mov cx, [si]
  6425 000051D6 81F9FFFF            <2> 	cmp cx, 0xFFFF
  6426 000051DA 0F84EAFF            <2> 	je near nextvmode
  6427 000051DE 81C90040            <2> 	or cx, 0x4000 		;;Linear Frame Buffer
  6428 000051E2 B8014F              <2> 	mov ax, 04F01h
  6429 000051E5 BF[2355]            <2> 	mov di, VBEMODEINFOBLOCK
  6430 000051E8 890E[7752]          <2> 	mov [vesamode], cx
  6431 000051EC CD10                <2> 	int 10h
  6432 000051EE A0[3C55]            <2> 	mov al, [bitsperpixel]
  6433 000051F1 3C10                <2> 	cmp al, 16
  6434 000051F3 75D3                <2> 	jne nextvmode
  6435 000051F5 8936[7952]          <2> 	mov [videomodecache], si
  6436 000051F9 84E4                <2> 	test ah, ah
  6437 000051FB 0F842300            <2> 	jz near setvesamode
  6438 000051FF E9C6FF              <2> 	jmp nextvmode
  6439 00005202 0A0D49732074686973- <2> isthisvideook db 10,13,"Is this video mode OK?(y/n)",13,10,0
  6440 0000520B 20766964656F206D6F- <2>
  6441 00005214 6465204F4B3F28792F- <2>
  6442 0000521D 6E290D0A00          <2>
  6443                              <2> setvesamode:
  6444 00005222 8B0E[3555]          <2> 	mov cx, [resolutionx]
  6445 00005226 E85900              <2> 	call decshow
  6446 00005229 B078                <2> 	mov al, "x"
  6447 0000522B E8C500              <2> 	call char
  6448 0000522E 8B0E[3755]          <2> 	mov cx, [resolutiony]
  6449 00005232 E84D00              <2> 	call decshow
  6450 00005235 B040                <2> 	mov al, "@"
  6451 00005237 E8B900              <2> 	call char
  6452 0000523A 31C9                <2> 	xor cx, cx
  6453 0000523C 8A0E[3C55]          <2> 	mov cl, [bitsperpixel]
  6454 00005240 E83F00              <2> 	call decshow
  6455 00005243 BE[0252]            <2> 	mov si, isthisvideook
  6456 00005246 E82EAE              <2> 	call printrm
  6457 00005249 31C0                <2> 	xor ax, ax
  6458 0000524B CD16                <2> 	int 16h
  6459 0000524D 8B36[7952]          <2> 	mov si, [videomodecache]
  6460 00005251 3C79                <2> 	cmp al, "y"
  6461 00005253 0F8571FF            <2> 	jne near nextvmode
  6462                              <2> selectedvesa:
  6463 00005257 8B16[3555]          <2> 	mov dx, [resolutionx]
  6464 0000525B 01D2                <2> 	add dx, dx
  6465 0000525D 8916[2356]          <2> 	mov [resolutionx2], dx
  6466 00005261 31D2                <2> 	xor dx, dx
  6467 00005263 31C9                <2> 	xor cx, cx
  6468 00005265 B8024F              <2> 	mov ax, 04F02h
  6469 00005268 8B1E[7752]          <2> 	mov bx, [vesamode]
  6470 0000526C CD10                <2> 	int 10h		;;enter VESA mode
  6471 0000526E C606[B898]01        <2> 	mov byte [guion], 1
  6472 00005273 E8CBAD              <2> 	call getmemorysize;get the memory map after the video is initialized
  6473 00005276 C3                  <2> 	ret
  6474                              <2> 	
  6475 00005277 0000                <2> vesamode dw 0
  6476 00005279 0000                <2> videomodecache dw 0
  6477                              <2> 
  6478 0000527B 0000000000          <2> dcnm db 0,0,0,0,0
  6479 00005280 0000                <2> dcnmend db 0,0
  6480                              <2> 
  6481                              <2> 
  6482                              <2> decshow:
  6483 00005282 BE[7B52]            <2> 	mov si, dcnm
  6484                              <2> decclear:
  6485 00005285 B030                <2> 	mov al, "0"
  6486 00005287 8804                <2> 	mov [si], al
  6487 00005289 46                  <2> 	inc si
  6488 0000528A 81FE[8052]          <2> 	cmp si, dcnmend
  6489 0000528E 76F5                <2> 	jbe decclear
  6490 00005290 4E                  <2> 	dec si
  6491 00005291 E81500              <2> 	call convertrm
  6492 00005294 BE[7B52]            <2> 	mov si, dcnm
  6493                              <2> dectst:
  6494 00005297 8A04                <2> 	mov al, [si]
  6495 00005299 46                  <2> 	inc si
  6496 0000529A 81FE[8052]          <2> 	cmp si, dcnmend
  6497 0000529E 7704                <2> 	ja dectstend
  6498 000052A0 3C30                <2> 	cmp al, "0"
  6499 000052A2 76F3                <2> 	jbe dectst
  6500                              <2> dectstend:
  6501 000052A4 4E                  <2> 	dec si
  6502 000052A5 E8CFAD              <2> 	call printrm
  6503 000052A8 C3                  <2> 	ret
  6504                              <2> 	
  6505                              <2> 	
  6506                              <2> convertrm:
  6507 000052A9 4E                  <2> 	dec si
  6508 000052AA 89F3                <2> 	mov bx, si		;place to convert into must be in si, number to convert must be in cx
  6509                              <2> cnvrtrm:
  6510 000052AC 89DE                <2> 	mov si, bx
  6511 000052AE 81EE0300            <2> 	sub si, 3
  6512 000052B2 46                  <2> ten3rm:	inc si
  6513 000052B3 81F9E803            <2> 	cmp cx, 1000
  6514 000052B7 7209                <2> 	jb ten2rm
  6515 000052B9 81E9E803            <2> 	sub cx, 1000
  6516 000052BD FE04                <2> 	inc byte [si]
  6517 000052BF E9EAFF              <2> 	jmp cnvrtrm
  6518 000052C2 46                  <2> ten2rm:	inc si
  6519 000052C3 81F96400            <2> 	cmp cx, 100
  6520 000052C7 7209                <2> 	jb ten1rm
  6521 000052C9 81E96400            <2> 	sub cx, 100
  6522 000052CD FE04                <2> 	inc byte [si]
  6523 000052CF E9DAFF              <2> 	jmp cnvrtrm
  6524 000052D2 46                  <2> ten1rm:	inc si
  6525 000052D3 81F90A00            <2> 	cmp cx, 10
  6526 000052D7 7209                <2> 	jb ten0rm
  6527 000052D9 81E90A00            <2> 	sub cx, 10
  6528 000052DD FE04                <2> 	inc byte [si]
  6529 000052DF E9CAFF              <2> 	jmp cnvrtrm
  6530 000052E2 46                  <2> ten0rm:	inc si
  6531 000052E3 81F90100            <2> 	cmp cx, 1
  6532 000052E7 7209                <2> 	jb tendnrm
  6533 000052E9 81E90100            <2> 	sub cx, 1
  6534 000052ED FE04                <2> 	inc byte [si]
  6535 000052EF E9BAFF              <2> 	jmp cnvrtrm
  6536                              <2> tendnrm:
  6537 000052F2 C3                  <2> 	ret
  6538                              <2> 
  6539                              <2>     char: 		    ;char must be in al
  6540 000052F3 BB0700              <2>        mov bx, 07
  6541 000052F6 B40E                <2> 	   mov ah, 0Eh
  6542 000052F8 CD10                <2> 	   int 10h
  6543 000052FA C3                  <2> 	   ret
  6544                              <2> 
  6545 000052FB 426F6F7420696E746F- <2> bootmsg:	db "Boot into the GUI?(y/n)",0
  6546 00005304 20746865204755493F- <2>
  6547 0000530D 28792F6E2900        <2>
  6548                              <2> 
  6549                              <2> 
  6550                              <2> mcursor:
  6551 00005313 01                  <2> 	db	00000001b
  6552 00005314 81                  <2> 	db	10000001b
  6553 00005315 C1                  <2> 	db	11000001b
  6554 00005316 E1                  <2> 	db	11100001b
  6555 00005317 F1                  <2> 	db	11110001b
  6556 00005318 F9                  <2> 	db	11111001b
  6557 00005319 FD                  <2> 	db	11111101b
  6558 0000531A FF                  <2> 	db	11111111b
  6559 0000531B F9                  <2> 	db	11111001b
  6560 0000531C B9                  <2> 	db	10111001b
  6561 0000531D 39                  <2> 	db	00111001b
  6562 0000531E 1C                  <2> 	db	00011100b
  6563 0000531F 1C                  <2> 	db	00011100b
  6564 00005320 0E                  <2> 	db	00001110b
  6565 00005321 0E                  <2> 	db	00001110b
  6566 00005322 0C                  <2> 	db	00001100b
  6567                              <2> mcursorend:
  6568                              <2> 
  6569                              <2> 
  6570                              <2> VBEMODEBLOCK:
  6571 00005323 00<rept>            <2> vbesignature 		times  4 db 0 	;VBE Signature
  6572 00005327 00<rept>            <2> vbeversion  		times  2 db 0	;VBE Version
  6573 00005329 00<rept>            <2> oemstringptr  		times  4 db 0	;Pointer to OEM String
  6574 0000532D 00<rept>            <2> capabilities 		times  4 db 0	;Capabilities of graphics cont.
  6575 00005331 00<rept>            <2> videomodeptr 		times  4 db 0	;Pointer to Video Mode List
  6576 00005335 00<rept>            <2> totalmemory   		times  2 db 0	;number of 64Kb memory blocks
  6577 00005337 00<rept>            <2> oemsoftwarerev  	times  2 db 0	;VBE implementation Software revision
  6578 00005339 00<rept>            <2> oemvendornameptr 	times  4 db 0	;Pointer to Vendor Name String
  6579 0000533D 00<rept>            <2> oemproductnameptr 	times  4 db 0	;Pointer to Product Name String
  6580 00005341 00<rept>            <2> oemproductrevptr 	times  4 db 0	;Pointer to Product Revision String
  6581 00005345 00<rept>            <2> reserved			times  222 db 0	;Reserved for VBE implementation scratch area
  6582 00005423 00<rept>            <2> oemdata 			times  256 db 0	;Data Area for OEM Strings
  6583                              <2> 
  6584                              <2> VBEMODEINFOBLOCK:
  6585                              <2> ;Mandatory information for all VBE revision
  6586 00005523 00<rept>            <2> modeattributes   	times  2 db 0	;Mode attributes
  6587 00005525 00                  <2> winaattributes   	times  1 db 0	;Window A attributes
  6588 00005526 00                  <2> winbattributes   	times  1 db 0	;Window B attributes
  6589 00005527 00<rept>            <2> wingranularity   	times  2 db 0	;Window granularity
  6590 00005529 00<rept>            <2> winsize          	times  2 db 0	;Window size
  6591 0000552B 00<rept>            <2> winasegment      	times  2 db 0	;Window A start segment
  6592 0000552D 00<rept>            <2> winbsegment      	times  2 db 0	;Window B start segment
  6593 0000552F 00<rept>            <2> winfuncptr       	times  4 db 0	;pointer to window function
  6594 00005533 00<rept>            <2> bytesperscanline 	times  2 db 0	;Bytes per scan line
  6595                              <2> 
  6596                              <2> ;Mandatory information for VBE 1.2 and above
  6597 00005535 00<rept>            <2> resolutionx     	times  2 db 0	;Horizontal resolution in pixel or chars
  6598 00005537 00<rept>            <2> resolutiony	    	times  2 db 0	;Vertical resolution in pixel or chars
  6599 00005539 00                  <2> xcharsize       	times  1 db 0	;Character cell width in pixel
  6600 0000553A 00                  <2> ycharsize       	times  1 db 0	;Character cell height in pixel
  6601 0000553B 00                  <2> numberofplanes  	times  1 db 0	;Number of memory planes
  6602 0000553C 00                  <2> bitsperpixel    	times  1 db 0	;Bits per pixel
  6603 0000553D 00                  <2> numberofbanks   	times  1 db 0	;Number of banks
  6604 0000553E 00                  <2> memorymodel     	times  1 db 0	;Memory model type
  6605 0000553F 00                  <2> banksize        	times  1 db 0	;Bank size in KB
  6606 00005540 00                  <2> numberofimagepages	times  1 db 0	;Number of images
  6607 00005541 00                  <2> reserved1       	times  1 db 0	;Reserved for page function
  6608                              <2> 
  6609                              <2> ;Direct Color fields (required for direct/6 and YUV/7 memory models)
  6610 00005542 00                  <2> redmasksize			times  1 db 0	;Size of direct color red mask in bits
  6611 00005543 00                  <2> redfieldposition	times  1 db 0	;Bit position of lsb of red bask
  6612 00005544 00                  <2> greenmasksize   	times  1 db 0	;Size of direct color green mask in bits
  6613 00005545 00                  <2> greenfieldposition	times  1 db 0	;Bit position of lsb of green bask
  6614 00005546 00                  <2> bluemasksize		times  1 db 0	;Size of direct color blue mask in bits
  6615 00005547 00                  <2> bluefieldposition	times  1 db 0	;Bit position of lsb of blue bask
  6616 00005548 00                  <2> rsvdmasksize        times  1 db 0		;Size of direct color reserved mask in bits
  6617 00005549 00                  <2> rsvdfieldposition	times  1 db 0		;Bit position of lsb of reserved bask
  6618 0000554A 00                  <2> directcolormodeinfo	times  1 db 0	;Direct color mode attributes
  6619                              <2> 
  6620                              <2> ;Mandatory information for VBE 2.0 and above
  6621 0000554B 00<rept>            <2> physbaseptr 		times  4 db 0	;Physical address for flat frame buffer
  6622 0000554F 00<rept>            <2> offscreenmemoffset 	times  4 db 0	;Pointer to start of off screen memory
  6623 00005553 00<rept>            <2> offscreenmemsize 	times  2 db 0    ;Amount of off screen memory in 1Kb units
  6624 00005555 00<rept>            <2> reserved2 			times  206 db 0  ;Remainder of ModeInfoBlock
  6625                              <2> 
  6626 00005623 00000000            <2> resolutionx2 dd 0	;this is not part of the VBE but is necessary GUI info
  6627                              <2> VBEEND:
  6628                              <2> [BITS 32]
  6629                              <1> 	%include "source/drivers/input/mouse.asm"
  6630 00005627 00                  <2> mousedisabled db 0
  6631                              <2> 	
  6632                              <2> 	cursorgui:
  6633 00005628 803D[55800000]01    <2> 		cmp byte [mouseon], 1
  6634 0000562F 0F8432000000        <2> 		je near mousedaemon
  6635 00005635 803D[B8980000]00    <2> 		cmp byte [guion], 0
  6636 0000563C 0F8412070000        <2> 		je near entdown
  6637                              <2> 	initmouse:
  6638 00005642 803D[B8980000]00    <2> 		cmp byte [guion], 0
  6639 00005649 7405                <2> 		je noswmsposinit
  6640 0000564B E881110000          <2> 		call switchmousepos2
  6641                              <2> 	noswmsposinit:
  6642 00005650 E85A020000          <2> 	  	call PS2SET
  6643 00005655 E883020000          <2> 		call ACTMOUS
  6644 0000565A C605[55800000]01    <2> 		mov byte [mouseon],1
  6645 00005661 E89C020000          <2> 		call GETB 	;;Get the responce byte of the mouse (like: Hey i am active)
  6646                              <2> 		;call GETB
  6647                              <2> 				;;If the bytes are mixed up,
  6648                              <2> 				;;remove this line or add another of this line.
  6649                              <2> 	nomouse:
  6650 00005666 C3                  <2> 		ret
  6651                              <2> 		
  6652                              <2> 	mousedaemon:
  6653 00005667 803D[55800000]01    <2> 		cmp byte [mouseon], 1
  6654 0000566E 75D2                <2> 		jne initmouse
  6655 00005670 E464                <2> 		in al, 64h ; Status
  6656 00005672 A820                <2> 		test al, 20h ; PS2-Mouse?
  6657 00005674 0F8502000000        <2> 		jnz near moused
  6658 0000567A F4                  <2> 		hlt
  6659 0000567B C3                  <2> 		ret
  6660                              <2> 	moused:
  6661 0000567C 803D[27560000]01    <2> 		cmp byte [mousedisabled], 1
  6662 00005683 74E1                <2> 		je nomouse
  6663 00005685 E878020000          <2> 		  call GETB
  6664 0000568A 88C3                <2> 		  mov  bl, al
  6665 0000568C 80E301              <2> 		  and  bl, 1
  6666 0000568F 881D[27590000]      <2> 		  mov  BYTE [LBUTTON], bl
  6667 00005695 88C3                <2> 		  mov  bl, al
  6668 00005697 80E302              <2> 		  and  bl, 2
  6669 0000569A D0EB                <2> 		  shr  bl, 1
  6670 0000569C 881D[28590000]      <2> 		  mov  BYTE [RBUTTON], bl
  6671 000056A2 88C3                <2> 		  mov  bl, al
  6672 000056A4 80E304              <2> 		  and  bl, 4
  6673 000056A7 C0EB02              <2> 		  shr  bl, 2
  6674 000056AA 881D[29590000]      <2> 		  mov  BYTE [MBUTTON], bl
  6675 000056B0 E84D020000          <2> 		  call GETB
  6676 000056B5 A2[2A590000]        <2> 		  mov  BYTE [XCOORD], al
  6677 000056BA E843020000          <2> 		  call GETB
  6678 000056BF A2[2B590000]        <2> 		  mov  BYTE [YCOORD], al
  6679                              <2> 
  6680                              <2> 	showpixelcursor:
  6681 000056C4 668B15[16580000]    <2> 		mov dx, [mousecursorposition]
  6682 000056CB 668B0D[18580000]    <2> 		mov cx, [mousecursorposition + 2]
  6683 000056D2 668915[12580000]    <2> 		mov [lastmouseposition], dx
  6684 000056D9 66890D[14580000]    <2> 		mov [lastmouseposition + 2], cx
  6685 000056E0 A0[2A590000]        <2> 		mov al, [XCOORD]
  6686 000056E5 3C80                <2> 		cmp al, 128
  6687 000056E7 730C                <2> 		jae subxcoord
  6688 000056E9 00C0                <2> 		add al, al
  6689 000056EB 30E4                <2> 		xor ah, ah
  6690 000056ED 6601C2              <2> 		add dx, ax
  6691 000056F0 E90B000000          <2> 		jmp subxcoorddn
  6692                              <2> 	subxcoord:
  6693 000056F5 00C0                <2> 		add al, al
  6694 000056F7 30DB                <2> 		xor bl, bl
  6695 000056F9 28C3                <2> 		sub bl, al
  6696 000056FB 30FF                <2> 		xor bh, bh
  6697 000056FD 6629DA              <2> 		sub dx, bx
  6698                              <2> 	subxcoorddn:
  6699 00005700 8A1D[2B590000]      <2> 		mov bl, [YCOORD]
  6700 00005706 30C0                <2> 		xor al, al
  6701 00005708 28D8                <2> 		sub al, bl
  6702 0000570A 3C80                <2> 		cmp al, 128
  6703 0000570C 730A                <2> 		jae subycoord
  6704 0000570E 30E4                <2> 		xor ah, ah
  6705 00005710 6601C1              <2> 		add cx, ax
  6706 00005713 E909000000          <2> 		jmp subycoorddn
  6707                              <2> 	subycoord:
  6708 00005718 30DB                <2> 		xor bl, bl
  6709 0000571A 28C3                <2> 		sub bl, al
  6710 0000571C 30FF                <2> 		xor bh, bh
  6711 0000571E 6629D9              <2> 		sub cx, bx
  6712                              <2> 	subycoorddn:
  6713 00005721 6681FA204E          <2> 		cmp dx, 20000
  6714 00005726 7603                <2> 		jbe nooriginx2
  6715 00005728 6631D2              <2> 		xor dx, dx
  6716                              <2> 	nooriginx2:
  6717 0000572B 6681F9204E          <2> 		cmp cx, 20000
  6718 00005730 7603                <2> 		jbe nooriginy2
  6719 00005732 6631C9              <2> 		xor cx, cx
  6720                              <2> 	nooriginy2:
  6721 00005735 6681FA0000          <2> 		cmp dx, 0
  6722 0000573A 7415                <2> 		je nofixxcolumn2
  6723 0000573C 663B15[23560000]    <2> 		cmp dx, [resolutionx2]
  6724 00005743 720C                <2> 		jb nofixxcolumn2
  6725 00005745 668B15[23560000]    <2> 		mov dx, [resolutionx2]
  6726 0000574C 6681EA0200          <2> 		sub dx, 2
  6727                              <2> 	nofixxcolumn2:
  6728 00005751 6681F90000          <2> 		cmp cx, 0
  6729 00005756 7415                <2> 		je nofixyrow2
  6730 00005758 663B0D[37550000]    <2> 		cmp cx, [resolutiony]
  6731 0000575F 720C                <2> 		jb nofixyrow2
  6732 00005761 668B0D[37550000]    <2> 		mov cx, [resolutiony]
  6733 00005768 6681E90100          <2> 		sub cx, 1
  6734                              <2> 	nofixyrow2:
  6735 0000576D 668915[16580000]    <2> 		mov [mousecursorposition], dx
  6736 00005774 66890D[18580000]    <2> 		mov [mousecursorposition + 2], cx
  6737 0000577B 803D[B8980000]00    <2> 		cmp byte [guion], 0
  6738 00005782 0F8492000000        <2> 		je near termmouse
  6739 00005788 E8E40F0000          <2> 		call switchmousepos ;;use dragging code to ensure proper icon drag
  6740 0000578D 803D[27590000]01    <2> 		cmp byte [LBUTTON], 1
  6741 00005794 0F846F200000        <2> 		je near clickicon
  6742 0000579A 803D[28590000]01    <2> 		cmp byte [RBUTTON], 1
  6743 000057A1 0F8462200000        <2> 		je near clickicon
  6744 000057A7 A0[F6770000]        <2> 		mov al, [pbutton]
  6745 000057AC C705[F9770000]0000- <2> 		mov dword [dragging], 0
  6746 000057B4 0000                <2>
  6747 000057B6 3C00                <2> 		cmp al, 0
  6748 000057B8 740F                <2> 		je nopreviousbutton
  6749 000057BA E8160F0000          <2> 		call clearmousecursor
  6750 000057BF E8F6120000          <2> 		call reloadallgraphics
  6751                              <2> 	windowtermcopyend:
  6752 000057C4 E808100000          <2> 		call switchmousepos2
  6753                              <2> 	nopreviousbutton:
  6754 000057C9 30C0                <2> 		xor al, al
  6755 000057CB A2[F6770000]        <2> 		mov [pbutton], al
  6756 000057D0 A0[27590000]        <2> 		mov al, [LBUTTON]
  6757 000057D5 A2[F7770000]        <2> 		mov [pLBUTTON], al
  6758 000057DA A0[28590000]        <2> 		mov al, [RBUTTON]
  6759 000057DF A2[F8770000]        <2> 		mov [pRBUTTON], al
  6760 000057E4 31C9                <2> 		xor ecx, ecx
  6761 000057E6 31D2                <2> 		xor edx, edx
  6762 000057E8 668B15[16580000]    <2> 		mov dx, [mousecursorposition]
  6763 000057EF 668B0D[18580000]    <2> 		mov cx, [mousecursorposition + 2]
  6764 000057F6 66BB18C7            <2> 		mov bx, 1100011100011000b
  6765 000057FA 30E4                <2> 		xor ah, ah
  6766 000057FC B0FE                <2> 		mov al, 254
  6767 000057FE C605[F3770000]01    <2> 		mov byte [showcursorfonton], 1
  6768 00005805 E891180000          <2> 		call showfontvesa
  6769 0000580A C605[F3770000]00    <2> 		mov byte [showcursorfonton], 0
  6770 00005811 C3                  <2> 		ret
  6771                              <2> 
  6772 00005812 00000000            <2> lastmouseposition dw 0,0
  6773 00005816 00000000            <2> mousecursorposition dw 0,0	
  6774                              <2> 
  6775                              <2> termmouse:
  6776 0000581A BE[94E02800]        <2> 		mov esi, videobuf
  6777 0000581F 31D2                <2> 		xor edx, edx
  6778 00005821 668B15[12580000]    <2> 		mov dx, [lastmouseposition]
  6779 00005828 668B0D[14580000]    <2> 		mov cx, [lastmouseposition + 2]
  6780 0000582F 66A1[AD580000]      <2> 		mov ax, [cursorcache]
  6781 00005835 663D0000            <2> 		cmp ax, 0
  6782 00005839 7425                <2> 		je nocopycursorcache
  6783 0000583B 66C1E104            <2> 		shl cx, 4
  6784 0000583F 66C1E203            <2> 		shl dx, 3
  6785 00005843 01D6                <2> 		add esi, edx
  6786 00005845 6631D2              <2> 		xor dx, dx
  6787 00005848 8A15[5C240000]      <2> 		mov dl, [charxy]
  6788 0000584E 6641                <2> 		inc cx
  6789                              <2> termmousecplp1:
  6790 00005850 01D6                <2> 		add esi, edx
  6791 00005852 6649                <2> 		dec cx
  6792 00005854 6681F90000          <2> 		cmp cx, 0
  6793 00005859 75F5                <2> 		jne termmousecplp1
  6794 0000585B 29D6                <2> 		sub esi, edx
  6795 0000585D 668906              <2> 		mov [esi], ax
  6796                              <2> nocopycursorcache:
  6797 00005860 BE[94E02800]        <2> 		mov esi, videobuf
  6798 00005865 31D2                <2> 		xor edx, edx
  6799 00005867 668B15[16580000]    <2> 		mov dx, [mousecursorposition]
  6800 0000586E 668B0D[18580000]    <2> 		mov cx, [mousecursorposition + 2]
  6801 00005875 66C1E104            <2> 		shl cx, 4
  6802 00005879 66C1E203            <2> 		shl dx, 3
  6803 0000587D 01D6                <2> 		add esi, edx
  6804 0000587F 6631D2              <2> 		xor dx, dx
  6805 00005882 8A15[5C240000]      <2> 		mov dl, [charxy]
  6806 00005888 6641                <2> 		inc cx
  6807                              <2> termmousecplp2:
  6808 0000588A 01D6                <2> 		add esi, edx
  6809 0000588C 6649                <2> 		dec cx
  6810 0000588E 6681F90000          <2> 		cmp cx, 0
  6811 00005893 75F5                <2> 		jne termmousecplp2
  6812 00005895 29D6                <2> 		sub esi, edx
  6813 00005897 668B06              <2> 		mov ax, [esi]
  6814 0000589A 66A3[AD580000]      <2> 		mov [cursorcache], ax
  6815 000058A0 B080                <2> 		mov al, 128
  6816 000058A2 B407                <2> 		mov ah, 7
  6817 000058A4 668906              <2> 		mov [esi], ax
  6818 000058A7 E824CDFFFF          <2> 		call termcopy
  6819 000058AC C3                  <2> 		ret
  6820 000058AD 0000                <2> cursorcache db 0,0
  6821                              <2> 
  6822                              <2> PS2SET:
  6823 000058AF B0A8                <2>   mov  al, 0xa8		; enable mouse port
  6824 000058B1 E664                <2>   out  0x64, al		; write to keyboardcontroller
  6825 000058B3 E801000000          <2>   call CHKPRT		; check if command is progressed (demand!)
  6826 000058B8 C3                  <2> ret
  6827                              <2> 
  6828                              <2> CHKPRT:
  6829 000058B9 66B96400            <2>   mov  cx, 100
  6830                              <2>  .again:
  6831 000058BD E464                <2>   in   al, 0x64		; read from keyboardcontroller
  6832 000058BF A802                <2>   test al, 2		; Check if input buffer is empty
  6833 000058C1 7402                <2>   je .go
  6834 000058C3 E2F8                <2>   loop .again
  6835                              <2>  .go:
  6836 000058C5 C3                  <2> ret
  6837                              <2> 
  6838                              <2> WMOUS:
  6839 000058C6 B0D4                <2>   mov  al, 0xd4		; write to mouse device instead of to keyboard
  6840 000058C8 E664                <2>   out  0x64, al		; write to keyboardcontroller
  6841 000058CA E8EAFFFFFF          <2>   call CHKPRT		; check if command is progressed (demand!)
  6842 000058CF C3                  <2> ret
  6843                              <2> 
  6844                              <2> MBUFFUL:
  6845 000058D0 66B96400            <2>   mov cx, 100
  6846                              <2>  .mn:
  6847 000058D4 E464                <2>   in   al, 0x64		; read from keyboardcontroller
  6848 000058D6 A820                <2>   test al, 0x20		; check if mouse output buffer is full
  6849 000058D8 7402                <2>   jz  .mnn
  6850 000058DA E2F8                <2>   loop .mn
  6851                              <2>  .mnn:
  6852 000058DC C3                  <2> ret
  6853                              <2> 
  6854                              <2> 
  6855                              <2> ACTMOUS:
  6856 000058DD E8E4FFFFFF          <2>   call WMOUS
  6857 000058E2 B0F4                <2>   mov  al, 0xf4 	; Command to activate mouse itselve (Stream mode)
  6858 000058E4 E660                <2>   out  0x60, al		; write ps/2 controller output port (activate mouse)
  6859 000058E6 E8CEFFFFFF          <2>   call CHKPRT		; check if command is progressed (demand!)
  6860 000058EB E801000000          <2>   call CHKMOUS		; check if a byte is available
  6861 000058F0 C3                  <2> ret
  6862                              <2> 
  6863                              <2> CHKMOUS:
  6864 000058F1 B300                <2>   mov  bl, 0
  6865 000058F3 66B96400            <2>   mov cx, 100
  6866                              <2>  .vrd:
  6867 000058F7 E464                <2>   in   al, 0x64		; read from keyboardcontroller
  6868 000058F9 A801                <2>   test al, 1		; check if controller buffer (60h) has data
  6869 000058FB 7504                <2>   jnz .yy
  6870 000058FD E2F8                <2>   loop .vrd
  6871 000058FF B301                <2>   mov  bl, 1
  6872                              <2>  .yy:
  6873 00005901 C3                  <2> ret
  6874                              <2> 
  6875                              <2> GETB:
  6876                              <2>  .cagain:
  6877 00005902 E8EAFFFFFF          <2>   call CHKMOUS		; check if a byte is available
  6878 00005907 08DB                <2>   or bl, bl
  6879 00005909 75F7                <2>   jnz .cagain
  6880 0000590B B0AD                <2>   mov  al, 0xad		; Disable Keyboard
  6881 0000590D E664                <2>   out  0x64, al		; write to keyboardcontroller
  6882 0000590F E8A5FFFFFF          <2>   call CHKPRT		; check if command is progressed (demand!)
  6883 00005914 6631C0              <2>   xor  ax, ax
  6884 00005917 E460                <2>   in   al, 0x60		; read ps/2 controller output port (mousebyte)
  6885 00005919 88C2                <2>   mov  dl, al
  6886 0000591B B0AE                <2>   mov  al, 0xae		; Enable Keyboard
  6887 0000591D E664                <2>   out  0x64, al		; write to keyboardcontroller
  6888 0000591F E895FFFFFF          <2>   call CHKPRT		; check if command is progressed (demand!)
  6889 00005924 88D0                <2>   mov  al, dl
  6890 00005926 C3                  <2> ret
  6891                              <2> 
  6892 00005927 00                  <2> LBUTTON db 0x00	;	Left   button status 1=PRESSED 0=RELEASED
  6893 00005928 00                  <2> RBUTTON db 0x00	;	Right  button status 1=PRESSED 0=RELEASED
  6894 00005929 00                  <2> MBUTTON db 0x00	;	Middle button status 1=PRESSED 0=RELEASED
  6895 0000592A 00                  <2> XCOORD  db 0x00	;	the moved distance  (horizontal)
  6896 0000592B 00                  <2> YCOORD  db 0x00	;	the moved distance  (vertical)
  6897                              <1> %endif
  6898                              <1> %include "source/drivers/sound/pcspkr.asm"
  6899                              <2> ;PC Speaker Drivers
  6900                              <2> PCSpeakerRAW:
  6901 0000592C 60                  <2> 	pusha
  6902                              <2> nosoundrep:
  6903 0000592D 8B35[6C020000]      <2> 	mov esi, [soundpos]
  6904 00005933 31C9                <2> 	xor ecx, ecx
  6905 00005935 668B0D[6A020000]    <2> 	mov cx, [soundrepititions]
  6906 0000593C 6681F90000          <2> 	cmp cx, 0
  6907 00005941 0F8548000000        <2> 	jne near donesetpitch
  6908 00005947 668B0E              <2> 	mov cx, [esi]
  6909 0000594A 668B5E02            <2> 	mov bx, [esi + 2]
  6910 0000594E 66890D[6A020000]    <2> 	mov [soundrepititions], cx
  6911 00005955 81C604000000        <2> 	add esi, 4
  6912 0000595B 8935[6C020000]      <2> 	mov [soundpos], esi
  6913 00005961 3B35[70020000]      <2> 	cmp esi, [soundendpos]
  6914 00005967 7735                <2> 	ja stopsound
  6915 00005969 66813D[6A020000]00- <2> 	cmp word [soundrepititions], 0
  6916 00005971 00                  <2>
  6917 00005972 74B9                <2> 	je nosoundrep
  6918 00005974 6681FB0000          <2> 	cmp bx, 0
  6919 00005979 740F                <2> 	je nosoundplay
  6920 0000597B E840000000          <2> 	call setpitch
  6921 00005980 E849000000          <2> 	call startsound
  6922 00005985 E905000000          <2> 	jmp donesetpitch
  6923                              <2> nosoundplay:
  6924 0000598A E846000000          <2> 	call killsound
  6925                              <2> donesetpitch:
  6926 0000598F 6649                <2> 	dec cx
  6927 00005991 66890D[6A020000]    <2> 	mov [soundrepititions], cx
  6928 00005998 61                  <2> 	popa
  6929 00005999 E90BA9FFFF          <2> 	jmp timerinterrupt
  6930                              <2> stopsound:
  6931 0000599E 31C0                <2> 	xor eax, eax
  6932 000059A0 66A3[6A020000]      <2> 	mov [soundrepititions], ax
  6933 000059A6 A2[69020000]        <2> 	mov [soundon], al
  6934 000059AB A3[6C020000]        <2> 	mov [soundpos], eax
  6935 000059B0 A3[70020000]        <2> 	mov [soundendpos], eax
  6936 000059B5 E81B000000          <2> 	call killsound
  6937 000059BA 61                  <2> 	popa
  6938 000059BB E9E9A8FFFF          <2> 	jmp timerinterrupt
  6939                              <2> 
  6940                              <2> 
  6941                              <2> setpitch:
  6942 000059C0 B0B6                <2> 	mov al, 0xB6
  6943 000059C2 E643                <2> 	out 0x43, al
  6944 000059C4 6689D8              <2> 	mov ax, bx
  6945 000059C7 E642                <2> 	out 0x42, al
  6946 000059C9 88E0                <2> 	mov al, ah
  6947 000059CB E642                <2> 	out 0x42, al
  6948 000059CD C3                  <2> 	ret
  6949                              <2> startsound:
  6950 000059CE E461                <2> 	in al, 0x61
  6951 000059D0 0C03                <2> 	or al, 3
  6952 000059D2 E661                <2> 	out 0x61, al
  6953 000059D4 C3                  <2> 	ret
  6954                              <2> killsound:
  6955 000059D5 E461                <2> 	in al, 0x61
  6956 000059D7 24FC                <2> 	and al, 0xFC
  6957 000059D9 E661                <2> 	out 0x61, al
  6958 000059DB C3                  <2> 	ret
  6959                              <2> 	
  6960                              <1> %ifdef sound.included
  6961                              <1> 	%include "source/drivers/sound/sblaster.asm"
  6962                              <2> ;Sound Blaster Drivers
  6963                              <2> sblaster:
  6964                              <2> .init:
  6965 000059DC E8D7010000          <2> 		call ResetDSP			;If the system is Sound Blaster 16 compatible, reset the DSP
  6966 000059E1 A2[125C0000]        <2> 		mov [SoundBlaster], al	;if the reset worked, show an available card
  6967 000059E6 3C00                <2> 		cmp al, 0
  6968 000059E8 7418                <2> 		je .noinit
  6969 000059EA B0D1                <2> 		mov	al,0D1h 		; turn speaker(s) on
  6970 000059EC E8FB010000          <2> 		call WriteDSP
  6971 000059F1 B088                <2> 		mov	al,088h 		; Left = 8, Right = 8 (15-highest)
  6972 000059F3 E8B1010000          <2> 		call MstrVol 		; L = Hi Nibble, R = Lo Nibble
  6973 000059F8 BE[035A0000]        <2> 		mov esi, .initmsg
  6974 000059FD E83CC3FFFF          <2> 		call print
  6975                              <2> .noinit:
  6976 00005A02 C3                  <2> 		ret
  6977 00005A03 536F756E64626C6173- <2> .initmsg db "Soundblaster Initialized",10,0
  6978 00005A0C 74657220496E697469- <2>
  6979 00005A15 616C697A65640A00    <2>
  6980                              <2> sblaster.cont: ;this function goes to the next available portion of a sound, if necessary
  6981 00005A1D 813D[FC5B0000]0000- <2> 	cmp dword [Length0], 0
  6982 00005A25 0000                <2>
  6983 00005A27 0F8462000000        <2> 	je near .done
  6984 00005A2D FF0D[FC5B0000]      <2> 	dec dword [Length0]
  6985 00005A33 E908000000          <2> 	jmp .notodd
  6986                              <2> .oddlength:
  6987 00005A38 31C9                <2> 	xor ecx, ecx
  6988 00005A3A 880D[FB5B0000]      <2> 	mov [OddLength], cl
  6989                              <2> .notodd:
  6990 00005A40 8B35[025C0000]      <2> 	mov esi, [NextMemLoc]
  6991 00005A46 31C9                <2> 	xor ecx, ecx
  6992 00005A48 668B0D[005C0000]    <2> 	mov cx, [Length1]
  6993 00005A4F D1E9                <2> 	shr ecx, 1
  6994 00005A51 6641                <2> 	inc cx
  6995 00005A53 31DB                <2> 	xor ebx, ebx
  6996 00005A55 668B1D[0A5C0000]    <2> 	mov bx, [SegLoc]
  6997 00005A5C 6601CB              <2> 	add bx, cx
  6998 00005A5F 66891D[0A5C0000]    <2> 	mov [SegLoc], bx
  6999 00005A66 81C300000800        <2> 	add ebx, 0x80000 ;linear address of sb buffer
  7000 00005A6C 8935[065C0000]      <2> 	mov [MemLoc], esi
  7001 00005A72 89C8                <2> 	mov eax, ecx
  7002 00005A74 01F0                <2> 	add eax, esi
  7003 00005A76 A3[025C0000]        <2> 	mov [NextMemLoc], eax
  7004 00005A7B E833000000          <2> 	call DMACopy
  7005                              <2> 	;call DMAPlay
  7006 00005A80 E8E0000000          <2> 	call PlayDSP
  7007 00005A85 66BA2E02            <2> 	mov dx, (BasePort+0xE)
  7008 00005A89 EC                  <2> 	in al, dx ;acknowledge the interrupt 
  7009 00005A8A E9EAA8FFFF          <2> 	jmp handled2 ;it is part of an interrupt routine
  7010                              <2> .done:
  7011 00005A8F 803D[FB5B0000]01    <2> 	cmp byte [OddLength], 1
  7012 00005A96 74A0                <2> 	je .oddlength
  7013 00005A98 31C0                <2> 	xor eax, eax
  7014 00005A9A 66A3[005C0000]      <2> 	mov [Length1], ax
  7015 00005AA0 66B8D000            <2> 	mov ax, 0xD0
  7016 00005AA4 E843010000          <2> 	call WriteDSP
  7017 00005AA9 66BA2E02            <2> 	mov dx, (BasePort+0xE)
  7018 00005AAD EC                  <2> 	in al, dx ;acknowledge the interrupt 
  7019 00005AAE E9C6A8FFFF          <2> 	jmp handled2
  7020                              <2> 	
  7021                              <2> DMACopy:
  7022 00005AB3 66B80800            <2> 		mov ax, LINEAR_SEL
  7023 00005AB7 8EE0                <2> 		mov fs, ax
  7024 00005AB9 C1E902              <2> 		shr ecx, 2
  7025                              <2> .loop:
  7026 00005ABC 8B06                <2> 		mov eax, [esi]
  7027 00005ABE 648903              <2> 		mov [fs:ebx], eax
  7028 00005AC1 81C604000000        <2> 		add esi, 4
  7029 00005AC7 81C304000000        <2> 		add ebx, 4
  7030 00005ACD E2ED                <2> 		loop .loop
  7031 00005ACF 66B83000            <2> 		mov ax, NEW_DATA_SEL
  7032 00005AD3 8EE0                <2> 		mov fs, ax
  7033 00005AD5 C3                  <2> 		ret
  7034                              <2> 		
  7035                              <2> 
  7036                              <2> DMAPlay:    ;uses eax ebx edx
  7037 00005AD6 C605[0C5C0000]00    <2> 		mov	byte [Page1],00h
  7038                              <2> 
  7039 00005ADD B005                <2> 		mov	al,(Channel+4)
  7040 00005ADF 66BA0A00            <2> 		mov	dx,0Ah
  7041 00005AE3 EE                  <2> 		out	dx,al
  7042 00005AE4 30C0                <2> 		xor	al,al
  7043 00005AE6 66BA0C00            <2> 		mov	dx,0Ch
  7044 00005AEA EE                  <2> 		out	dx,al
  7045 00005AEB B059                <2> 		mov	al,ModeReg
  7046 00005AED 66BA0B00            <2> 		mov	dx,0Bh
  7047 00005AF1 EE                  <2> 		out	dx,al
  7048 00005AF2 B800000800          <2> 		mov	eax,0x80000
  7049 00005AF7 66BA0200            <2> 		mov	dx,AddPort
  7050 00005AFB EE                  <2> 		out	dx,al
  7051 00005AFC 86C4                <2> 		xchg al,ah
  7052 00005AFE EE                  <2> 		out	dx,al
  7053 00005AFF B800000800          <2> 		mov	eax,0x80000
  7054 00005B04 89C2                <2> 		mov	edx,eax
  7055 00005B06 2500000100          <2> 		and	eax,65536
  7056 00005B0B 7406                <2> 		jz	MemLocN1
  7057 00005B0D FE05[0C5C0000]      <2> 		inc	byte [Page1]
  7058                              <2> MemLocN1:
  7059 00005B13 89D0                <2> 		mov	eax,edx
  7060 00005B15 2500000200          <2> 		and	eax,131072
  7061 00005B1A 7407                <2> 		jz	MemLocN2
  7062 00005B1C 8005[0C5C0000]02    <2> 		add	byte [Page1],02
  7063                              <2> MemLocN2:
  7064 00005B23 89D0                <2> 		mov	eax,edx
  7065 00005B25 2500000400          <2> 		and	eax,262144
  7066 00005B2A 7407                <2> 		jz	MemLocN3
  7067 00005B2C 8005[0C5C0000]04    <2> 		add	byte [Page1],04
  7068                              <2> MemLocN3:
  7069 00005B33 89D0                <2> 		mov	eax,edx
  7070 00005B35 2500000800          <2> 		and	eax,524288
  7071 00005B3A 7407                <2> 		jz	MemLocN4
  7072 00005B3C 8005[0C5C0000]08    <2> 		add	byte [Page1],08
  7073                              <2> MemLocN4:
  7074 00005B43 66BA8300            <2> 		mov	dx,PgPort
  7075 00005B47 A0[0C5C0000]        <2> 		mov	al,[Page1]
  7076 00005B4C EE                  <2> 		out	dx,al
  7077 00005B4D 66BA0300            <2> 		mov	dx,LenPort
  7078 00005B51 66A1[005C0000]      <2> 		mov	ax,[Length1]
  7079 00005B57 6648                <2> 		dec ax
  7080 00005B59 EE                  <2> 		out	dx,al
  7081 00005B5A 86C4                <2> 		xchg al,ah
  7082 00005B5C EE                  <2> 		out	dx,al
  7083 00005B5D 66BA0A00            <2> 		mov	dx,0Ah
  7084 00005B61 B001                <2> 		mov	al,Channel
  7085 00005B63 EE                  <2> 		out	dx,al
  7086 00005B64 C3                  <2> 		ret
  7087                              <2> 		
  7088                              <2> PlayDSP:
  7089 00005B65 B040                <2> 		mov	al,40h
  7090 00005B67 E880000000          <2> 		call WriteDSP
  7091 00005B6C 31D2                <2> 		xor	edx,edx
  7092 00005B6E B840420F00          <2> 		mov	eax,1000000
  7093 00005B73 8B1D[0D5C0000]      <2> 		mov	ebx,[Freq]
  7094 00005B79 F7F3                <2> 		div	ebx
  7095 00005B7B 89C3                <2> 		mov	ebx,eax
  7096 00005B7D B800010000          <2> 		mov	eax,256
  7097 00005B82 29D8                <2> 		sub	eax,ebx
  7098 00005B84 E863000000          <2> 		call WriteDSP
  7099 00005B89 A0[115C0000]        <2> 		mov	al,[WAVEMode]	;write the mode
  7100 00005B8E E859000000          <2> 		call WriteDSP
  7101 00005B93 66A1[005C0000]      <2> 		mov	ax,[Length1]
  7102 00005B99 66D1E8              <2> 		shr ax, 1
  7103 00005B9C E84B000000          <2> 		call WriteDSP
  7104 00005BA1 86C4                <2> 		xchg al,ah
  7105 00005BA3 E844000000          <2> 		call WriteDSP
  7106 00005BA8 C3                  <2> 		ret
  7107                              <2> 
  7108                              <2> MstrVol:    ;uses ax dx
  7109 00005BA9 6650                <2> 	   push ax
  7110 00005BAB 66BA2402            <2> 	   mov	dx,(BasePort+4)
  7111 00005BAF B022                <2> 	   mov	al,22h
  7112 00005BB1 EE                  <2> 	   out	dx,al
  7113 00005BB2 6658                <2> 	   pop	ax
  7114 00005BB4 6642                <2> 	   inc	dx
  7115 00005BB6 EE                  <2> 	   out	dx,al
  7116 00005BB7 C3                  <2> 	   ret
  7117                              <2> 	   
  7118                              <2> ResetDSP:   ; uses cx dx
  7119 00005BB8 66BA2602            <2> 			mov	dx,(BasePort+6)
  7120 00005BBC B001                <2> 			mov	al,01
  7121 00005BBE EE                  <2> 			out	dx,al
  7122 00005BBF 66B93200            <2> 			mov	cx,50
  7123 00005BC3 EC                  <2> WaitIt1:	in	al,dx
  7124 00005BC4 E2FD                <2> 			loop WaitIt1
  7125 00005BC6 30C0                <2> 			xor	al,al
  7126 00005BC8 EE                  <2> 			out	dx,al
  7127 00005BC9 66B93200            <2> 			mov	cx,50
  7128 00005BCD EC                  <2> WaitIt2:	in	al,dx
  7129 00005BCE E2FD                <2> 			loop WaitIt2
  7130 00005BD0 B4FF                <2> 			mov	ah,0FFh 		; part of Return Code
  7131 00005BD2 66BA2E02            <2> 			mov	dx,(BasePort+14)
  7132 00005BD6 EC                  <2> 			in	al,dx
  7133 00005BD7 2480                <2> 			and	al,80h
  7134 00005BD9 3C80                <2> 			cmp	al,80h
  7135 00005BDB 750C                <2> 			jne	ResetErr
  7136 00005BDD 66BA2A02            <2> 			mov	dx,(BasePort+10)
  7137 00005BE1 EC                  <2> 			in	al,dx
  7138 00005BE2 3CAA                <2> 			cmp	al,0AAh
  7139 00005BE4 7503                <2> 			jne	ResetErr
  7140 00005BE6 B001                <2> ResetOK:	mov al, 1		; return ax = 0 if reset ok
  7141 00005BE8 C3                  <2> 			ret
  7142 00005BE9 30C0                <2> ResetErr:	xor al, al
  7143 00005BEB C3                  <2> 			ret
  7144                              <2> 
  7145                              <2> WriteDSP:   ;uses ax dx
  7146 00005BEC 6650                <2> 		push ax
  7147 00005BEE 66BA2C02            <2> 		mov	dx,(BasePort+12)
  7148 00005BF2 EC                  <2> WaitIt:	in	al,dx
  7149 00005BF3 2480                <2> 		and	al,80h
  7150 00005BF5 75FB                <2> 		jnz	WaitIt
  7151 00005BF7 6658                <2> 		pop	ax
  7152 00005BF9 EE                  <2> 		out	dx,al
  7153 00005BFA C3                  <2> 		ret
  7154                              <2> 
  7155 00005BFB 00                  <2> OddLength db 0
  7156 00005BFC 00000000            <2> Length0 dd	0
  7157 00005C00 0000                <2> Length1	dw  0
  7158 00005C02 00000000            <2> NextMemLoc dd 0
  7159 00005C06 00000000            <2> MemLoc	dd  0
  7160 00005C0A 0000                <2> SegLoc  dw 0
  7161 00005C0C 00                  <2> Page1	db  0
  7162 00005C0D 00000000            <2> Freq	dd	0
  7163 00005C11 14                  <2> WAVEMode db 14h
  7164                              <2> PgPort	equ 83h
  7165                              <2> AddPort	equ 02h
  7166                              <2> LenPort	equ 03h
  7167                              <2> ModeReg	equ 59h
  7168                              <2> Channel	equ 01h
  7169                              <2> BasePort	equ 220h
  7170 00005C12 00                  <2> SoundBlaster	db 0
  7171                              <1> %endif
  7172                              <1> %ifdef io.serial
  7173                              <1> 	%include "source/drivers/input/serial.asm"
  7174                              <1> %else
  7175                              <1> 	%include "source/drivers/input/keyboard.asm"
  7176 00005C13 00                  <2> specialkey db 0
  7177 00005C14 00                  <2> charregion db 0
  7178                              <2> waitforinput:		;;this is basically the idle process
  7179                              <2> 					;;this halts the cpu for a small amount of time and then sees if there was a keypress
  7180                              <2> 					;;this lets the cpu stay at close to 0% instead of 100%
  7181 00005C15 6631C0              <2> 	xor ax, ax
  7182 00005C18 A0[CE640000]        <2> 	mov al, [threadson]
  7183 00005C1D 8825[CE640000]      <2> 	mov [threadson], ah
  7184 00005C23 FB                  <2> 	sti
  7185 00005C24 F4                  <2> 	hlt
  7186 00005C25 A2[CE640000]        <2> 	mov [threadson], al
  7187 00005C2A 3A25[6B220000]      <2> 	cmp ah, [trans]
  7188 00005C30 7401                <2> 	je getkey
  7189 00005C32 C3                  <2> 	ret
  7190                              <2> getkey:
  7191 00005C33 31C0                <2> 		xor eax, eax
  7192 00005C35 A2[135C0000]        <2> 		mov [specialkey], al
  7193 00005C3A 66A3[69220000]      <2> 		mov [lastkey], ax
  7194 00005C40 E464                <2> 		in al, 64h ; Status
  7195                              <2> 	%ifdef gui.included
  7196 00005C42 A820                <2> 		test al, 20h ; PS2-Mouse?
  7197 00005C44 0F8532FAFFFF        <2> 		jnz near moused
  7198                              <2> 	%endif
  7199 00005C4A A801                <2> 		test al, 1 
  7200 00005C4C 74C7                <2> 		jz waitforinput ; if output buffer full or no keypress, jump to idle process
  7201                              <2> 	calckey:
  7202 00005C4E E460                <2> 		in al, 60h
  7203 00005C50 88C4                <2> 		mov ah, al
  7204 00005C52 30C0                <2> 		xor al, al
  7205 00005C54 8825[6A220000]      <2> 		mov [lastkey + 1], ah
  7206 00005C5A 88E0                <2> 		mov al, ah
  7207 00005C5C BF[F55D0000]        <2> 		mov edi, scancode
  7208                              <2> 	searchscan: 
  7209 00005C61 3C3A                <2> 		cmp al, 3Ah
  7210 00005C63 731A                <2> 		jae scanother
  7211 00005C65 30E4                <2> 		xor ah, ah
  7212 00005C67 C0E002              <2> 		shl al, 2
  7213 00005C6A 01C7                <2> 		add edi, eax
  7214 00005C6C D0E8                <2> 		shr al, 1
  7215 00005C6E 01C7                <2> 		add edi, eax
  7216 00005C70 D0E8                <2> 		shr al, 1
  7217 00005C72 8A27                <2> 		mov ah, [edi]
  7218 00005C74 80FC00              <2> 		cmp ah, 0
  7219 00005C77 7406                <2> 		je scanother
  7220 00005C79 E9D7000000          <2> 		jmp scanfound
  7221 00005C7E 00                  <2> uppercase db 0
  7222                              <2> scanother:
  7223 00005C7F 88C4                <2> 		mov ah, al
  7224 00005C81 30C0                <2> 		xor al, al
  7225 00005C83 66A3[69220000]      <2> 		mov [lastkey], ax
  7226 00005C89 80FCE0              <2> 		cmp ah, 0E0h
  7227 00005C8C 0F847D000000        <2> 		je near getkeyspecial
  7228 00005C92 803D[135C0000]E0    <2> 		cmp byte [specialkey], 0xE0
  7229 00005C99 752B                <2> 		jne nospecialkey
  7230 00005C9B 80FC38              <2> 		cmp ah, 38h
  7231 00005C9E 0F84A0000000        <2> 		je near alton
  7232 00005CA4 80FCB8              <2> 		cmp ah, 0B8h
  7233 00005CA7 0F849F000000        <2> 		je near altoff
  7234 00005CAD 80FC1D              <2> 		cmp ah, 1Dh
  7235 00005CB0 0F847E000000        <2> 		je near ctron
  7236 00005CB6 80FC9D              <2> 		cmp ah, 9Dh
  7237 00005CB9 0F847D000000        <2> 		je near ctroff
  7238 00005CBF 66A3[69220000]      <2> 		mov [lastkey], ax
  7239 00005CC5 C3                  <2> 		ret
  7240                              <2> nospecialkey:
  7241 00005CC6 80FC2A              <2> 		cmp ah, 2Ah
  7242 00005CC9 0F8455000000        <2> 		je near shifton
  7243 00005CCF 80FC36              <2> 		cmp ah, 36h
  7244 00005CD2 0F844C000000        <2> 		je near shifton
  7245 00005CD8 80FC1C              <2> 		cmp ah, 1Ch
  7246 00005CDB 0F8473000000        <2> 		je near entdown
  7247 00005CE1 80FCAA              <2> 		cmp ah, 0AAh
  7248 00005CE4 0F8442000000        <2> 		je near shiftoff
  7249 00005CEA 80FCB6              <2> 		cmp ah, 0B6h
  7250 00005CED 0F8439000000        <2> 		je near shiftoff
  7251 00005CF3 80FC3A              <2> 		cmp ah, 3Ah
  7252 00005CF6 0F84A5000000        <2> 		je near capslock
  7253 00005CFC 80FC45              <2> 		cmp ah, 0x45
  7254 00005CFF 0F84AD000000        <2> 		je near numlock
  7255 00005D05 80FC46              <2> 		cmp ah, 0x46
  7256 00005D08 0F84BC000000        <2> 		je near scrolllock
  7257 00005D0E C3                  <2> 		ret
  7258                              <2> 	getkeyspecial:
  7259 00005D0F C605[135C0000]E0    <2> 		mov byte [specialkey], 0xE0
  7260 00005D16 E933FFFFFF          <2> 		jmp calckey
  7261                              <2> 	shift:
  7262 00005D1B A0[7E5C0000]        <2> 		mov al, [uppercase]
  7263 00005D20 3C01                <2> 		cmp al, 1
  7264 00005D22 7308                <2> 		jae shiftoff
  7265                              <2> 	shifton:
  7266 00005D24 C605[7E5C0000]01    <2> 		mov byte [uppercase], 1
  7267 00005D2B C3                  <2> 		ret
  7268                              <2> 	shiftoff:
  7269 00005D2C C605[7E5C0000]00    <2> 		mov byte [uppercase], 0
  7270 00005D33 C3                  <2> 		ret
  7271                              <2> 	ctron:
  7272 00005D34 C605[A05D0000]01    <2> 		mov byte [ctrkey], 1
  7273 00005D3B C3                  <2> 		ret
  7274                              <2> 	ctroff:
  7275 00005D3C C605[A05D0000]00    <2> 		mov byte [ctrkey], 0
  7276 00005D43 C3                  <2> 		ret
  7277                              <2> 	alton:
  7278 00005D44 C605[9F5D0000]01    <2> 		mov byte [altkey], 1
  7279 00005D4B C3                  <2> 		ret
  7280                              <2> 	altoff:
  7281 00005D4C C605[9F5D0000]00    <2> 		mov byte [altkey], 0
  7282 00005D53 C3                  <2> 		ret
  7283                              <2> 	entdown:
  7284 00005D54 C3                  <2> 		ret
  7285                              <2> 	scanfound:
  7286 00005D55 81C704000000        <2> 		add edi, 4
  7287 00005D5B 803D[A05D0000]01    <2> 		cmp byte [ctrkey], 1
  7288 00005D62 731B                <2> 		jae altin
  7289 00005D64 81EF04000000        <2> 		sub edi, 4
  7290 00005D6A 81C702000000        <2> 		add edi, 2
  7291 00005D70 803D[9F5D0000]01    <2> 		cmp byte [altkey], 1
  7292 00005D77 7306                <2> 		jae altin
  7293 00005D79 81EF02000000        <2> 		sub edi, 2
  7294                              <2> altin:
  7295 00005D7F 81C701000000        <2> 		add edi, 1
  7296 00005D85 803D[7E5C0000]01    <2> 		cmp byte [uppercase], 1
  7297 00005D8C 7306                <2> 		jae uppercaseon
  7298 00005D8E 81EF01000000        <2> 		sub edi, 1
  7299                              <2> uppercaseon:
  7300 00005D94 8A07                <2> 		mov al,[edi]
  7301 00005D96 A2[69220000]        <2> 		mov [lastkey], al
  7302 00005D9B C3                  <2> 		ret
  7303                              <2> 		
  7304 00005D9C 00                  <2> keyboardstatus db 0
  7305 00005D9D 00                  <2> numlockstatus db 0
  7306 00005D9E 00                  <2> scrolllockstatus db 0
  7307 00005D9F 00                  <2> altkey db 0
  7308 00005DA0 00                  <2> ctrkey db 0
  7309                              <2> 	capslock:
  7310 00005DA1 8035[9C5D0000]04    <2> 		xor byte [keyboardstatus], 00000100b
  7311 00005DA8 E835000000          <2> 		call updatekblights
  7312 00005DAD E969FFFFFF          <2> 		jmp shift
  7313                              <2> 		
  7314                              <2> 	numlock:
  7315 00005DB2 8035[9C5D0000]02    <2> 		xor byte [keyboardstatus], 00000010b
  7316 00005DB9 8035[9D5D0000]01    <2> 		xor byte [numlockstatus], 1
  7317 00005DC0 E81D000000          <2> 		call updatekblights
  7318 00005DC5 E969FEFFFF          <2> 		jmp getkey
  7319                              <2> 	
  7320                              <2> 	scrolllock:
  7321 00005DCA 8035[9C5D0000]01    <2> 		xor byte [keyboardstatus], 00000001b
  7322 00005DD1 8035[9E5D0000]01    <2> 		xor byte [scrolllockstatus], 1
  7323 00005DD8 E805000000          <2> 		call updatekblights
  7324 00005DDD E951FEFFFF          <2> 		jmp getkey
  7325                              <2> 		
  7326                              <2> 	updatekblights:
  7327 00005DE2 B0ED                <2> 		mov al, 0xED
  7328 00005DE4 66BA6000            <2> 		mov dx, 0x60
  7329 00005DE8 EE                  <2> 		out dx, al
  7330                              <2> 	chkkbdack:
  7331 00005DE9 EC                  <2> 		in al, dx
  7332 00005DEA 3CFA                <2> 		cmp al, 0xFA
  7333 00005DEC 75FB                <2> 		jne chkkbdack
  7334 00005DEE A0[9C5D0000]        <2> 		mov al, [keyboardstatus]
  7335 00005DF3 EE                  <2> 		out dx, al
  7336 00005DF4 C3                  <2> 		ret
  7337                              <2> 		
  7338                              <2> scancode:
  7339 00005DF5 000000000000        <2> 	db 0,0,0,0,0,0				;0h
  7340 00005DFB 000000000000        <2> 	db 0,0,0,0,0,0				;1h
  7341 00005E01 3121AD000000        <2> 	db '1','!',0xAD,0,0,0		;2h
  7342 00005E07 3240FDFB0000        <2> 	db '2','@',0xFD,0xFB,0,0	;3h
  7343 00005E0D 332300000000        <2> 	db '3','#',0,0,0,0			;4h
  7344 00005E13 34249B9C0000        <2> 	db '4','$',0x9B,0x9C,0,0	;5h
  7345 00005E19 3525EE000000        <2> 	db '5','%',0xEE,0,0,0		;6h
  7346 00005E1F 365EAC000000        <2> 	db '6','^',0xAC,0,0,0		;7h
  7347 00005E25 3726AB000000        <2> 	db '7','&',0xAB,0,0,0		;8h
  7348 00005E2B 382AEC000000        <2> 	db '8','*',0xEC,0,0,0		;9h
  7349 00005E31 392800000000        <2> 	db '9','(',0,0,0,0			;0Ah
  7350 00005E37 302900000000        <2> 	db '0',')',0,0,0,0			;0Bh
  7351 00005E3D 2D5F9DF10000        <2> 	db '-','_',0x9D,0xF1,0,0	;0Ch
  7352 00005E43 3D2BF7F60000        <2> 	db '=','+',0xF7,0xF6,0,0	;0Dh
  7353 00005E49 080800000000        <2> 	db 8,8,0,0,0,0				;0Eh
  7354 00005E4F 000000000000        <2> 	db 0,0,0,0,0,0				;0Fh
  7355 00005E55 7151848E0000        <2> 	db 'q','Q',0x84,0x8E,0,0	;10h
  7356 00005E5B 7757868F0000        <2> 	db 'w','W',0x86,0x8F,0,0	;11h
  7357 00005E61 65458290EE45        <2> 	db 'e','E',0x82,0x90,0xEE,'E'	;12h
  7358 00005E67 7252898A7050        <2> 	db 'r','R',0x89,0x8A,'p','P'	;13h
  7359 00005E6D 7454819AE754        <2> 	db 't','T',0x81,0x9A,0xE7,'T'	;14h
  7360 00005E73 795998007559        <2> 	db 'y','Y',0x98,0,'u','Y'	;15h
  7361 00005E79 7555A3970000        <2> 	db 'u','U',0xA3,0x97,0,0		;16h
  7362 00005E7F 6949A18D6949        <2> 	db 'i','I',0xA1,0x8D,'i','I'	;17h
  7363 00005E85 6F4FA29577EA        <2> 	db 'o','O',0xA2,0x95,'w',0xEA	;18h
  7364 00005E8B 70509499E3EF        <2> 	db 'p','P',0x94,0x99,0xE3,0xEF	;19h
  7365 00005E91 5B7BF4000000        <2> 	db '[','{',0xF4,0,0,0		;1Ah
  7366 00005E97 5D7DF5000000        <2> 	db ']','}',0xF5,0,0,0		;1Bh
  7367 00005E9D 000000000000        <2> 	db 0,0,0,0,0,0				;1Ch
  7368 00005EA3 000000000000        <2> 	db 0,0,0,0,0,0				;1Dh
  7369 00005EA9 6141A085E041        <2> 	db 'a','A',0xA0,133,224,'A'	;1Eh
  7370 00005EAF 73531500E5E4        <2> 	db 's','S',21,0,229,228		;1Fh
  7371 00005EB5 6444F800EB7F        <2> 	db 'd','D',0xF8,0,235,127	;20h
  7372 00005EBB 66469F00EDE8        <2> 	db 'f','F',159,0,237,232	;21h
  7373 00005EC1 6747000079E2        <2> 	db 'g','G',0,0,'y',226		;22h
  7374 00005EC7 684800006E48        <2> 	db 'h','H',0,0,'n','H'		;23h
  7375 00005ECD 6A4A00000000        <2> 	db 'j','J',0,0,0,0			;24h
  7376 00005ED3 6B4B00006B4B        <2> 	db 'k','K',0,0,'k','K'		;25h
  7377 00005ED9 6C4C0000E9E9        <2> 	db 'l','L',0,0,233,233		;26h
  7378 00005EDF 3B3A14000000        <2> 	db ';',':',20,0,0,0			;27h
  7379 00005EE5 272200000000        <2> 	db 27h,22h,0,0,0,0			;28h
  7380 00005EEB 607E00000000        <2> 	db '`','~',0,0,0,0			;29h
  7381 00005EF1 000000000000        <2> 	db 0,0,0,0,0,0				;2Ah
  7382 00005EF7 5C7CAAB30000        <2> 	db 92,'|',170,179,0,0		;2Bh
  7383 00005EFD 7A5A91927A5A        <2> 	db 'z','Z',145,146,'z','Z'	;2Ch
  7384 00005F03 7858000000F0        <2> 	db 'x','X',0,0,0,240		;2Dh
  7385 00005F09 634387800000        <2> 	db 'c','C',135,128,0,0		;2Eh
  7386 00005F0F 765600000000        <2> 	db 'v','V',0,0,0,0			;2Fh
  7387 00005F15 62420000E142        <2> 	db 'b','B',0,0,225,'B'		;30h
  7388 00005F1B 6E4EA4A5764E        <2> 	db 'n','N',0xA4,0xA5,'v','N'	;31h
  7389 00005F21 6D4D0000E64D        <2> 	db 'm','M',0,0,230,'M'		;32h
  7390 00005F27 2C3CF3AE0000        <2> 	db ',','<',0xF3,174,0,0		;33h
  7391 00005F2D 2E3EF2AF0000        <2> 	db '.','>',0xF2,175,0,0		;34h
  7392 00005F33 2F3FA8000000        <2> 	db '/','?',0xA8,0,0,0		;35h
  7393 00005F39 000000000000        <2> 	db 0,0,0,0,0,0				;36h
  7394 00005F3F 000000000000        <2> 	db 0,0,0,0,0,0				;37h
  7395 00005F45 000000000000        <2> 	db 0,0,0,0,0,0				;38h
  7396 00005F4B 202000000000        <2> 	db ' ',' ',0,0,0,0			;39h
  7397                              <2> noscan:
  7398                              <2> 
  7399                              <1> %endif
  7400                              <1> ;drivers will soon be handled intelligently
  7401                              <1> ;every driver's source will be scanned for a .init function
  7402                              <1> ;that will be called and if it returns 0
  7403                              <1> ;the hardware was found and the driver initialized properly
  7404                              <1> initializelater: ;these have debugging messages and should be initialized after the screen
  7405                              <1> 	%ifdef sound.included
  7406 00005F51 E886FAFFFF          <1> 		call sblaster.init
  7407                              <1> 	%endif
  7408                              <1> 	%ifdef network.included
  7409 00005F56 E809260000          <1> 		call network.init
  7410                              <1> 	%endif
  7411 00005F5B C3                  <1> 	ret
  7412                              <1> initialize:
  7413                              <1> ;Now I will initialise the interrupt controllers and remap irq's
  7414 00005F5C E819000000          <1> 	call .pic
  7415                              <1> %ifdef terminal.vsync
  7416 00005F61 E841000000          <1> 	call .rtc
  7417                              <1> %endif
  7418 00005F66 E871000000          <1> 	call .pit
  7419 00005F6B E893000000          <1> 	call .fpu
  7420 00005F70 E8A4000000          <1> 	call .sse
  7421 00005F75 31C0                <1> 	xor eax, eax
  7422 00005F77 31C9                <1> 	xor ecx, ecx
  7423                              <1> %ifdef io.serial
  7424                              <1> 	call serial.init
  7425                              <1> %endif
  7426 00005F79 C3                  <1> 	ret
  7427                              <1> 	
  7428                              <1> .pic:
  7429 00005F7A B011                <1> 	mov al, 0x11
  7430 00005F7C E620                <1> 	out 0x20, al
  7431 00005F7E E6A0                <1> 	out 0xA0, al
  7432 00005F80 B040                <1> 	mov al, 0x40	;interrupt for master
  7433 00005F82 E621                <1> 	out 0x21, al
  7434 00005F84 B048                <1> 	mov al, 0x48	;interrupt for slave
  7435 00005F86 E6A1                <1> 	out 0xA1, al
  7436 00005F88 B004                <1> 	mov al, 4
  7437 00005F8A E621                <1> 	out 0x21, al
  7438 00005F8C B002                <1> 	mov al, 2
  7439 00005F8E E6A1                <1> 	out 0xA1, al
  7440 00005F90 B001                <1> 	mov al, 0x1
  7441 00005F92 E621                <1> 	out 0x21, al
  7442 00005F94 B001                <1> 	mov al, 0x1
  7443 00005F96 E6A1                <1> 	out 0xA1, al
  7444                              <1> 	;masks are set to zero so as not to mask
  7445 00005F98 30C0                <1> 	xor al, al
  7446 00005F9A E621                <1> 	out 0x21, al
  7447 00005F9C 30C0                <1> 	xor al, al
  7448 00005F9E E6A1                <1> 	out 0xA1, al
  7449 00005FA0 B020                <1> 	mov al, 0x20
  7450 00005FA2 E6A0                <1> 	out 0xA0, al
  7451 00005FA4 E620                <1> 	out 0x20, al
  7452 00005FA6 C3                  <1> 	ret
  7453                              <1> .rtc:
  7454 00005FA7 B008                <1> 	mov al, 0x8
  7455 00005FA9 88C4                <1> 	mov ah, al
  7456 00005FAB 66BA7000            <1> 	mov dx, 0x70
  7457 00005FAF EE                  <1> 	out dx, al
  7458 00005FB0 6642                <1> 	inc dx
  7459 00005FB2 EC                  <1> 	in al, dx
  7460 00005FB3 86C4                <1> 	xchg al, ah
  7461 00005FB5 664A                <1> 	dec dx
  7462 00005FB7 EE                  <1> 	out dx, al
  7463 00005FB8 6642                <1> 	inc dx
  7464 00005FBA 86C4                <1> 	xchg al, ah
  7465 00005FBC 0C40                <1> 	or al, 0x40
  7466 00005FBE EE                  <1> 	out dx, al
  7467                              <1> 	
  7468 00005FBF B00A                <1> 	mov al, 0xA
  7469 00005FC1 664A                <1> 	dec dx
  7470 00005FC3 EE                  <1> 	out dx, al
  7471 00005FC4 86C4                <1> 	xchg al, ah
  7472 00005FC6 6642                <1> 	inc dx
  7473 00005FC8 EC                  <1> 	in al, dx
  7474 00005FC9 24F0                <1> 	and al, 0xF0
  7475 00005FCB 0A05[05030000]      <1> 	or al, [rtcrate]
  7476 00005FD1 86C4                <1> 	xchg al, ah
  7477 00005FD3 664A                <1> 	dec dx
  7478 00005FD5 EE                  <1> 	out dx, al
  7479 00005FD6 6642                <1> 	inc dx
  7480 00005FD8 86C4                <1> 	xchg al, ah
  7481 00005FDA EE                  <1> 	out dx, al
  7482 00005FDB C3                  <1> 	ret
  7483                              <1> 	
  7484                              <1> .pit:
  7485                              <1> 	;initialize the PIT
  7486 00005FDC 66A1[5B020000]      <1> 	mov ax, [pitdiv] ;this is the divider for the PIT
  7487 00005FE2 E640                <1> 	out 0x40, al
  7488 00005FE4 66C1C008            <1> 	rol ax, 8
  7489 00005FE8 E640                <1> 	out 0x40, al
  7490                              <1> 	;enable rtc interrupt
  7491 00005FEA B00B                <1> 	mov al, 0xB
  7492 00005FEC E670                <1> 	out 0x70, al
  7493 00005FEE 66C1C008            <1> 	rol ax, 8
  7494 00005FF2 E471                <1> 	in al, 0x71
  7495 00005FF4 66C1C008            <1> 	rol ax, 8
  7496 00005FF8 E670                <1> 	out 0x70, al
  7497 00005FFA 66C1C008            <1> 	rol ax, 8
  7498 00005FFE 0C40                <1> 	or al, 0x40
  7499 00006000 E671                <1> 	out 0x71, al
  7500 00006002 C3                  <1> 	ret
  7501                              <1> .fpu:
  7502                              <1> 	;And now to initialize the fpu
  7503 00006003 0F20E0              <1> 	mov eax, cr4
  7504 00006006 0D00020000          <1> 	or eax, 0x200
  7505 0000600B 0F22E0              <1> 	mov cr4, eax
  7506 0000600E B87F0B0000          <1> 	mov eax, 0xB7F
  7507 00006013 50                  <1> 	push eax
  7508 00006014 D92C24              <1> 	fldcw [esp]
  7509 00006017 58                  <1> 	pop eax
  7510 00006018 C3                  <1> 	ret
  7511                              <1> 	
  7512                              <1> .sse:
  7513 00006019 0F20C0              <1> 	mov eax, cr0
  7514 0000601C 24FB                <1> 	and al, 11111011b
  7515 0000601E 0C02                <1> 	or al, 00000010b
  7516 00006020 0F22C0              <1> 	mov cr0, eax
  7517 00006023 0F20E0              <1> 	mov eax, cr4
  7518 00006026 660D0006            <1> 	or ax, 0000011000000000b
  7519 0000602A 0F22E0              <1> 	mov cr4, eax
  7520 0000602D C3                  <1> 	ret
  7521                                      %include "source/pci.asm"
  7522 0000602E 00                  <1> pcibus		db 0
  7523 0000602F 00                  <1> pcidevice	db 0
  7524 00006030 00                  <1> pcifunction	db 0
  7525 00006031 00                  <1> pciregister	db 0
  7526 00006032 00                  <1> pcireqtype	db 0
  7527 00006033 00000000            <1> pcidevid	dd 0
  7528 00006037 FFFFFFFF            <1> pcidevidmask dd 0xFFFFFFFF
  7529                              <1> 
  7530                              <1> getpciport:
  7531 0000603B B001                <1> 	mov al, 1
  7532 0000603D A2[32600000]        <1> 	mov [pcireqtype], al
  7533 00006042 E916000000          <1> 	jmp searchpci
  7534                              <1> pcidump:
  7535 00006047 31C0                <1> 	xor eax, eax
  7536 00006049 A2[30600000]        <1> 	mov [pcifunction], al
  7537 0000604E A2[2E600000]        <1> 	mov [pcibus], al
  7538 00006053 A2[2F600000]        <1> 	mov [pcidevice], al
  7539 00006058 A2[32600000]        <1> 	mov [pcireqtype], al
  7540                              <1> searchpci:		;;return in ebx, start X in pciX
  7541 0000605D 30C0                <1> 	xor al, al
  7542 0000605F A2[31600000]        <1> 	mov [pciregister], al
  7543 00006064 E8CA010000          <1> 	call getpciaddr
  7544 00006069 BAF80C0000          <1> 	mov edx, 0xCF8
  7545 0000606E EF                  <1> 	out dx, eax	;;request pci config
  7546 0000606F BAFC0C0000          <1> 	mov edx, 0xCFC
  7547 00006074 ED                  <1> 	in eax, dx 	;;read in pci config
  7548 00006075 3D0000FFFF          <1> 	cmp eax, 0xFFFF0000
  7549 0000607A 0F823D000000        <1> 	jb near checkpcidevice
  7550                              <1> searchpciret:
  7551                              <1> nextpcidevice:
  7552 00006080 30C0                <1> 	xor al, al
  7553 00006082 A2[30600000]        <1> 	mov [pcifunction], al
  7554 00006087 A0[2F600000]        <1> 	mov al, [pcidevice]
  7555 0000608C 3C1F                <1> 	cmp al, 11111b
  7556 0000608E 0F8306010000        <1> 	jae near nextpcibus
  7557 00006094 FEC0                <1> 	inc al
  7558 00006096 A2[2F600000]        <1> 	mov [pcidevice], al
  7559 0000609B E9BDFFFFFF          <1> 	jmp searchpci
  7560 000060A0 A0[30600000]        <1> 	mov al, [pcifunction]
  7561 000060A5 3C07                <1> 	cmp al, 111b
  7562 000060A7 0F83D3FFFFFF        <1> 	jae near nextpcidevice
  7563 000060AD FEC0                <1> 	inc al
  7564 000060AF A2[30600000]        <1> 	mov [pcifunction], al
  7565 000060B4 E9A4FFFFFF          <1> 	jmp searchpci
  7566 000060B9 00000000            <1> pcitype: db 0,0,0,0
  7567                              <1> checkpcidevice:
  7568 000060BD 31C0                <1> 	xor eax, eax
  7569 000060BF 3905[33600000]      <1> 	cmp [pcidevid], eax
  7570 000060C5 0F8430000000        <1> 	je near .good
  7571 000060CB A2[31600000]        <1> 	mov [pciregister], al	;device id, vendor id
  7572 000060D0 E85E010000          <1> 	call getpciaddr
  7573 000060D5 BAF80C0000          <1> 	mov edx, 0xCF8
  7574 000060DA EF                  <1> 	out dx, eax
  7575 000060DB BAFC0C0000          <1> 	mov edx, 0xCFC
  7576 000060E0 ED                  <1> 	in eax, dx
  7577 000060E1 2305[37600000]      <1> 	and eax, [pcidevidmask]
  7578 000060E7 8B1D[33600000]      <1> 	mov ebx, [pcidevid]
  7579 000060ED 231D[37600000]      <1> 	and ebx, [pcidevidmask]
  7580 000060F3 39D8                <1> 	cmp eax, ebx
  7581 000060F5 0F8585FFFFFF        <1> 	jne near searchpciret
  7582                              <1> .good:
  7583 000060FB 30C0                <1> 	xor al, al
  7584 000060FD 3805[32600000]      <1> 	cmp [pcireqtype], al
  7585 00006103 0F842C000000        <1> 	je near dumppcidevice
  7586 00006109 B008                <1> 	mov al, 0x08
  7587 0000610B A2[31600000]        <1> 	mov [pciregister], al	;;class code, subclass, revision id
  7588 00006110 E81E010000          <1> 	call getpciaddr
  7589 00006115 BAF80C0000          <1> 	mov edx, 0xCF8
  7590 0000611A EF                  <1> 	out dx, eax
  7591 0000611B BAFC0C0000          <1> 	mov edx, 0xCFC
  7592 00006120 ED                  <1> 	in eax, dx
  7593 00006121 C1C008              <1> 	rol eax, 8
  7594 00006124 3A05[B9600000]      <1> 	cmp al, [pcitype]
  7595 0000612A 0F84A0000000        <1> 	je near foundpciaddr
  7596 00006130 E94BFFFFFF          <1> 	jmp searchpciret
  7597                              <1> dumppcidevice:
  7598 00006135 30C0                <1> 	xor al, al
  7599 00006137 A2[31600000]        <1> 	mov [pciregister], al
  7600 0000613C E8F2000000          <1> 	call getpciaddr
  7601 00006141 89C1                <1> 	mov ecx, eax
  7602 00006143 C605[032F0000]05    <1> 	mov byte [firsthexshown], 5
  7603 0000614A E8C9CDFFFF          <1> 	call showhex
  7604                              <1> dumppcidevicelp:
  7605 0000614F A2[31600000]        <1> 	mov [pciregister], al
  7606 00006154 E8DA000000          <1> 	call getpciaddr
  7607 00006159 BAF80C0000          <1> 	mov edx, 0xCF8
  7608 0000615E EF                  <1> 	out dx, eax
  7609 0000615F BAFC0C0000          <1> 	mov edx, 0xCFC
  7610 00006164 ED                  <1> 	in eax, dx
  7611 00006165 89C1                <1> 	mov ecx, eax
  7612 00006167 A0[31600000]        <1> 	mov al, [pciregister]
  7613 0000616C 0404                <1> 	add al, 4
  7614 0000616E C605[032F0000]05    <1> 	mov byte [firsthexshown], 5
  7615 00006175 E89ECDFFFF          <1> 	call showhex
  7616 0000617A 3C3C                <1> 	cmp al, 0x3C
  7617 0000617C 72D1                <1> 	jb dumppcidevicelp
  7618                              <1> dumppcidn:
  7619                              <1> %ifdef io.serial
  7620                              <1> 	mov esi, line
  7621                              <1> 	call print
  7622                              <1> %else
  7623 0000617E 803D[5A240000]00    <1> 	cmp byte [charpos], 0
  7624 00006185 0F84F5FEFFFF        <1> 	je near searchpciret
  7625 0000618B BE[DD860000]        <1> 	mov esi, line
  7626 00006190 E8A9BBFFFF          <1> 	call print
  7627                              <1> %endif
  7628 00006195 E9E6FEFFFF          <1> 	jmp searchpciret
  7629                              <1> nextpcibus:
  7630 0000619A 30C0                <1> 	xor al, al
  7631 0000619C A2[2F600000]        <1> 	mov [pcidevice], al
  7632 000061A1 A0[2E600000]        <1> 	mov al, [pcibus]
  7633 000061A6 3C7F                <1> 	cmp al, 1111111b
  7634 000061A8 730C                <1> 	jae donesearchpci
  7635 000061AA FEC0                <1> 	inc al
  7636 000061AC A2[2E600000]        <1> 	mov [pcibus], al
  7637 000061B1 E9A7FEFFFF          <1> 	jmp searchpci
  7638                              <1> donesearchpci:
  7639 000061B6 BBFFFFFFFF          <1> 	mov ebx, 0xFFFFFFFF
  7640 000061BB 31D2                <1> 	xor edx, edx
  7641 000061BD 8815[B9600000]      <1> 	mov [pcitype], dl
  7642 000061C3 8915[33600000]      <1> 	mov [pcidevid], edx
  7643 000061C9 891D[37600000]      <1> 	mov [pcidevidmask], ebx
  7644 000061CF C3                  <1> 	ret
  7645                              <1> foundpciaddr:
  7646 000061D0 B010                <1> 	mov al, 0x10
  7647 000061D2 A2[31600000]        <1> 	mov [pciregister], al
  7648                              <1> findpciioaddr:
  7649 000061D7 E857000000          <1> 	call getpciaddr
  7650 000061DC BAF80C0000          <1> 	mov edx, 0xCF8
  7651 000061E1 EF                  <1> 	out dx, eax
  7652 000061E2 BAFC0C0000          <1> 	mov edx, 0xCFC
  7653 000061E7 ED                  <1> 	in eax, dx
  7654 000061E8 89C3                <1> 	mov ebx, eax
  7655 000061EA 81E301000000        <1> 	and ebx, 1
  7656 000061F0 81FB00000000        <1> 	cmp ebx, 0
  7657 000061F6 0F841E000000        <1> 	je near notpciioaddr
  7658 000061FC 2D01000000          <1> 	sub eax, 1
  7659 00006201 89C2                <1> 	mov edx, eax
  7660 00006203 31DB                <1> 	xor ebx, ebx
  7661 00006205 4B                  <1> 	dec ebx
  7662 00006206 891D[37600000]      <1> 	mov [pcidevidmask], ebx
  7663 0000620C 43                  <1> 	inc ebx
  7664 0000620D 881D[B9600000]      <1> 	mov [pcitype], bl
  7665 00006213 891D[33600000]      <1> 	mov [pcidevid], ebx
  7666 00006219 C3                  <1> 	ret
  7667                              <1> notpciioaddr:
  7668 0000621A A0[31600000]        <1> 	mov al, [pciregister]
  7669 0000621F 0404                <1> 	add al, 4
  7670 00006221 3C28                <1> 	cmp al, 0x28
  7671 00006223 0F8757FEFFFF        <1> 	ja near searchpciret
  7672 00006229 A2[31600000]        <1> 	mov [pciregister], al
  7673 0000622E E9A4FFFFFF          <1> 	jmp findpciioaddr
  7674                              <1> getpciaddr:		;;puts it in eax and ebx
  7675 00006233 31C0                <1> 			xor eax, eax
  7676 00006235 BB00000080          <1> 			mov ebx, 0x80000000
  7677 0000623A A0[2E600000]        <1> 			mov al, [pcibus]
  7678 0000623F C1E010              <1> 			shl eax, 16
  7679 00006242 01C3                <1> 			add ebx, eax
  7680 00006244 31C0                <1> 			xor eax, eax
  7681 00006246 A0[2F600000]        <1> 			mov al, [pcidevice]
  7682 0000624B C1E00B              <1> 			shl eax, 11
  7683 0000624E 01C3                <1> 			add ebx, eax
  7684 00006250 31C0                <1> 			xor eax, eax
  7685 00006252 A0[30600000]        <1> 			mov al, [pcifunction]
  7686 00006257 C1E008              <1> 			shl eax, 8
  7687 0000625A 01C3                <1> 			add ebx, eax
  7688 0000625C 31C0                <1> 			xor eax, eax
  7689 0000625E A0[31600000]        <1> 			mov al, [pciregister]
  7690 00006263 01C3                <1> 			add ebx, eax
  7691 00006265 89D8                <1> 			mov eax, ebx
  7692 00006267 C3                  <1> 			ret
  7693                                      %include "source/disk.asm"
  7694                              <1> ;This loads files using the methods in the loaded driver
  7695                              <1> %ifdef disk.real
  7696                              <1> %include "source/drivers/disk/realmode.asm"
  7697                              <2> diskr:
  7698                              <2> 			;read from disk using real mode-it does not work with large files
  7699                              <2> 			;sector count in cl
  7700                              <2> 			;disk number in ch
  7701                              <2> 			;48 bit address with last 32 bits in ebx
  7702                              <2> 			;buffer in esi
  7703                              <2> 			;puts end of buffer in edi and end lba address in edx
  7704 00006268 880D[95620000]      <2> 	mov [sdlength], cl
  7705 0000626E 891D[96620000]      <2> 	mov [sdaddress], ebx
  7706 00006274 8935[F7630000]      <2> 	mov [oldesireal], esi
  7707 0000627A 66BE[9A62]          <2> 	mov si, readdiskreal
  7708 0000627E 668935[0A0D0000]    <2> 	mov [realmodeptr], si
  7709 00006285 BE[D6620000]        <2> 	mov esi, backfromrealread
  7710 0000628A 8935[060D0000]      <2> 	mov [realmodereturn], esi
  7711 00006290 E95AA9FFFF          <2> 	jmp realmode
  7712 00006295 00                  <2> sdlength db 0
  7713 00006296 00000000            <2> sdaddress dd 0
  7714                              <2> 
  7715                              <2> [BITS 16]
  7716                              <2> readdiskreal:
  7717 0000629A C706[C662]1000      <2> 	mov word [dlen], 0x10
  7718 000062A0 C706[CA62]0000      <2> 	mov word [daddress], 0
  7719 000062A6 C706[CC62]0001      <2> 	mov word [dsegm], 0x100
  7720 000062AC 66891E[CE62]        <2> 	mov [dlbaad], ebx
  7721 000062B1 880E[C862]          <2> 	mov [dreadlen], cl
  7722                              <2> ReadHardDisk:
  7723 000062B5 BE[C662]            <2> 	mov si, diskaddresspacket
  7724 000062B8 31C0                <2> 	xor ax, ax
  7725 000062BA B442                <2> 	mov ah, 0x42
  7726 000062BC 8A16[C562]          <2> 	mov dl, [dnumber]
  7727 000062C0 CD13                <2> 	int 0x13
  7728 000062C2 72F1                <2> 	jc ReadHardDisk
  7729 000062C4 C3                  <2> 	ret
  7730                              <2> 
  7731 000062C5 80                  <2> dnumber db 0x80
  7732                              <2> diskaddresspacket:
  7733 000062C6 10                  <2> dlen:	db 0x10 ;size of packet
  7734 000062C7 00                  <2> 		db 0
  7735 000062C8 7F00                <2> dreadlen:	dw 0x7F	;blocks to read=maximum
  7736 000062CA 0000                <2> daddress:	dw 0x0	;address 0
  7737 000062CC 0001                <2> dsegm:		dw 0x100	;segment
  7738                              <2> 		;start with known value for hd
  7739                              <2> dlbaad:
  7740 000062CE 00000000            <2> 	dd 0	;lba address
  7741 000062D2 00000000            <2> 	dd 0
  7742                              <2> [BITS 32]
  7743                              <2> backfromrealread:
  7744 000062D6 8B35[F7630000]      <2> 	mov esi, [oldesireal]
  7745 000062DC 8B1D[96620000]      <2> 	mov ebx, [sdaddress]
  7746 000062E2 31C9                <2> 	xor ecx, ecx
  7747 000062E4 8A0D[95620000]      <2> 	mov cl, [sdlength]
  7748 000062EA 01CB                <2> 	add ebx, ecx
  7749 000062EC 66B80800            <2> 	mov ax, LINEAR_SEL
  7750 000062F0 8EE0                <2> 	mov fs, ax
  7751 000062F2 BF00100000          <2> 	mov edi, 0x1000
  7752 000062F7 B200                <2> 	mov dl, 0
  7753 000062F9 D0E1                <2> 	shl cl, 1
  7754                              <2> copyfromrmodedisk:
  7755 000062FB 648A07              <2> 	mov al, [fs:edi]
  7756 000062FE 8806                <2> 	mov [esi], al
  7757 00006300 47                  <2> 	inc edi
  7758 00006301 46                  <2> 	inc esi
  7759 00006302 FECA                <2> 	dec dl
  7760 00006304 80FA00              <2> 	cmp dl, 0
  7761 00006307 75F2                <2> 	jne copyfromrmodedisk
  7762 00006309 FEC9                <2> 	dec cl
  7763 0000630B B200                <2> 	mov dl, 0
  7764 0000630D 80F900              <2> 	cmp cl, 0
  7765 00006310 75E9                <2> 	jne copyfromrmodedisk
  7766 00006312 66B83000            <2> 	mov ax, NEW_DATA_SEL
  7767 00006316 8EE0                <2> 	mov fs, ax
  7768 00006318 89F7                <2> 	mov edi, esi
  7769 0000631A 8B35[F7630000]      <2> 	mov esi, [oldesireal]
  7770 00006320 89DA                <2> 	mov edx, ebx
  7771 00006322 8B1D[96620000]      <2> 	mov ebx, [sdaddress]
  7772 00006328 C3                  <2> 	ret
  7773                              <2> 	
  7774                              <1> %else
  7775                              <1> 	%ifdef disk.protected
  7776                              <1> 	%include "source/drivers/disk/pata.asm"
  7777                              <1> 	%endif
  7778                              <1> %endif
  7779                              <1> loadfile:	;loads a file with the name buffer's location in edi into location in esi
  7780                              <1> 			;returns with err code in edx and file end in edi
  7781 00006329 803F00              <1> 	cmp byte [edi], 0
  7782 0000632C 0F8448000000        <1> 	je near nofileload
  7783 00006332 89FA                <1> 	mov edx, edi
  7784 00006334 BB[02970000]        <1> 	mov ebx, diskfileindex
  7785                              <1> nextnamechar:
  7786 00006339 8A07                <1> 	mov al, [edi]
  7787 0000633B 3C26                <1> 	cmp al, '&'
  7788 0000633D 7440                <1> 	je nullfile
  7789 0000633F 8A23                <1> 	mov ah, [ebx]
  7790 00006341 47                  <1> 	inc edi
  7791 00006342 43                  <1> 	inc ebx
  7792 00006343 88C1                <1> 	mov cl, al
  7793 00006345 08E1                <1> 	or cl, ah
  7794 00006347 80F900              <1> 	cmp cl, 0
  7795 0000634A 744E                <1> 	je equalfilenames
  7796 0000634C 80F920              <1> 	cmp cl, ' '
  7797 0000634F 7449                <1> 	je equalfilenames
  7798 00006351 3C2A                <1> 	cmp al, '*'
  7799 00006353 742B                <1> 	je equalfilenames2
  7800 00006355 80FC00              <1> 	cmp ah, 0
  7801 00006358 7410                <1> 	je nextfilename
  7802 0000635A 3C00                <1> 	cmp al, 0
  7803 0000635C 7404                <1> 	je getebxzero
  7804 0000635E 38E0                <1> 	cmp al, ah
  7805 00006360 74D7                <1> 	je nextnamechar
  7806                              <1> getebxzero:
  7807 00006362 8A23                <1> 	mov ah, [ebx]
  7808 00006364 43                  <1> 	inc ebx
  7809 00006365 80FC00              <1> 	cmp ah, 0
  7810 00006368 75F8                <1> 	jne getebxzero
  7811                              <1> nextfilename:
  7812 0000636A 81C308000000        <1> 	add ebx, 8		;next descriptor
  7813 00006370 89D7                <1> 	mov edi, edx
  7814 00006372 81FB[B7980000]      <1> 	cmp ebx, enddiskfileindex
  7815 00006378 72BF                <1> 	jb nextnamechar
  7816                              <1> nofileload:
  7817 0000637A BA94010000          <1> 	mov edx, 404	;indicate not found error
  7818                              <1> nullfile:
  7819 0000637F C3                  <1> 	ret
  7820                              <1> equalfilenames2:
  7821 00006380 81EB02000000        <1> 	sub ebx, 2
  7822                              <1> eqfilefind:
  7823 00006386 43                  <1> 	inc ebx
  7824 00006387 81FB[B7980000]      <1> 	cmp ebx, enddiskfileindex
  7825 0000638D 0F83E7FFFFFF        <1> 	jae near nofileload
  7826 00006393 8A03                <1> 	mov al, [ebx]
  7827 00006395 3C00                <1> 	cmp al, 0
  7828 00006397 75ED                <1> 	jne eqfilefind
  7829 00006399 43                  <1> 	inc ebx
  7830                              <1> equalfilenames:
  7831 0000639A 8B4304              <1> 	mov eax, [ebx + 4] 	;put file size in eax
  7832 0000639D 8B1B                <1> 	mov ebx, [ebx]		;put file beginning in ebx
  7833 0000639F 031D[BA980000]      <1> 	add ebx, [lbaad]	;add offset to solleros
  7834 000063A5 31C9                <1> 	xor ecx, ecx
  7835 000063A7 88C1                <1> 	mov cl, al			;get excess number of sectors
  7836 000063A9 C0E102              <1> 	shl cl, 2
  7837 000063AC C0E902              <1> 	shr cl, 2			;cut off at 64
  7838 000063AF 29C8                <1> 	sub eax, ecx		;get rid of excess sectors
  7839 000063B1 B500                <1> 	mov ch, 0			;drive 0
  7840 000063B3 C1E806              <1> 	shr eax, 6			;get number of 64 sector tracks
  7841                              <1> loaddiskfile:			;tracks in eax, excess sectors in cl, drive in ch, buffer in esi, address in ebx
  7842 000063B6 A3[FB630000]        <1> 	mov [filetracks], eax
  7843 000063BB 89F7                <1> 	mov edi, esi		;just in case cl is 0
  7844 000063BD 89DA                <1> 	mov edx, ebx
  7845 000063BF 80F900              <1> 	cmp cl, 0
  7846 000063C2 7405                <1> 	je copytracksforfile
  7847 000063C4 E89FFEFFFF          <1> 	call diskr	;take care of excess sectors
  7848                              <1> copytracksforfile:
  7849 000063C9 A1[FB630000]        <1> 	mov eax, [filetracks]
  7850 000063CE 3D00000000          <1> 	cmp eax, 0
  7851 000063D3 741C                <1> 	je donecopyfile
  7852 000063D5 48                  <1> 	dec eax
  7853 000063D6 A3[FB630000]        <1> 	mov [filetracks], eax
  7854 000063DB 89D3                <1> 	mov ebx, edx	;get end lba
  7855 000063DD B140                <1> 	mov cl, 0x40 ;for compatability with BIOS it uses 64 instead of 128
  7856 000063DF 8A2D[B9980000]      <1> 	mov ch, [DriveNumber]
  7857 000063E5 89FE                <1> 	mov esi, edi	;reset buffer
  7858 000063E7 E87CFEFFFF          <1> 	call diskr
  7859 000063EC E9D8FFFFFF          <1> 	jmp copytracksforfile
  7860                              <1> donecopyfile:
  7861 000063F1 BA00000000          <1> 	mov edx, 0	;no error
  7862 000063F6 C3                  <1> 	ret
  7863                              <1> 
  7864 000063F7 00000000            <1> oldesireal dd 0
  7865 000063FB 00000000            <1> filetracks dd 0
  7866 000063FF 00                  <1> lbad1 db 0
  7867 00006400 00                  <1> lbad2 db 0
  7868 00006401 00                  <1> lbad3 db 0
  7869 00006402 00                  <1> lbad4 db 0
  7870 00006403 00                  <1> lbad5 db 0
  7871 00006404 00                  <1> lbad6 db 0
  7872 00006405 6400                <1> segments dw 100
  7873                              <1> 
  7874                              <1> 
  7875                              <1> 	
  7876                                      %include "source/threads.asm"
  7877                              <1> %ifdef threads.included	
  7878                              <1> nwcmdst:
  7879 00006407 31C0                <1> 	xor eax, eax
  7880 00006409 BC[9EAA0000]        <1> 	mov esp, stackend
  7881 0000640E A2[CE640000]        <1> 	mov [threadson], al
  7882 00006413 A3[CF640000]        <1> 	mov [currentthread], eax
  7883 00006418 0504000000          <1> 	add eax, 4
  7884 0000641D A3[CA640000]        <1> 	mov [lastthread], eax
  7885 00006422 FB                  <1> 	sti
  7886 00006423 E9DDC5FFFF          <1> 	jmp nwcmd
  7887                              <1> 
  7888                              <1> nomorethreadspace:
  7889 00006428 BE[3E640000]        <1> 	mov esi, nmts
  7890 0000642D E80CB9FFFF          <1> 	call print
  7891 00006432 C605[CE640000]00    <1> 	mov byte [threadson], 0
  7892 00006439 E9C7C5FFFF          <1> 	jmp nwcmd
  7893 0000643E 546872656164204F76- <1> nmts	db "Thread Overflow",10,0
  7894 00006447 6572666C6F770A00    <1>
  7895                              <1> 
  7896                              <1> nomorestackspace:
  7897 0000644F BE[5E640000]        <1> 	mov esi, nmss
  7898 00006454 E8E5B8FFFF          <1> 	call print
  7899 00006459 E9A9FFFFFF          <1> 	jmp nwcmdst
  7900 0000645E 537461636B204F7665- <1> nmss	db "Stack Overflow",10,0
  7901 00006467 72666C6F770A00      <1>
  7902                              <1> 	
  7903                              <1> threadswitch:
  7904 0000646E FA                  <1> 	cli
  7905 0000646F 60                  <1> 	pushad
  7906 00006470 BF[00E62900]        <1> 	mov edi, threadlist
  7907 00006475 A1[CF640000]        <1> 	mov eax, [currentthread]
  7908 0000647A 40                  <1> 	inc eax
  7909 0000647B A3[CF640000]        <1> 	mov [currentthread], eax
  7910 00006480 6648                <1> 	dec ax
  7911 00006482 C1E002              <1> 	shl eax, 2
  7912 00006485 01C7                <1> 	add edi, eax
  7913 00006487 8927                <1> 	mov [edi], esp
  7914 00006489 81C704000000        <1> 	add edi, 4
  7915 0000648F 81FF[00F62900]      <1> 	cmp edi, threadlistend
  7916 00006495 0F830D000000        <1> 	jae near nookespthread
  7917 0000649B 8B07                <1> 	mov eax, [edi]
  7918 0000649D 3D00000000          <1> 	cmp eax, 0
  7919 000064A2 0F8519000000        <1> 	jne near okespthread
  7920                              <1> nookespthread:
  7921 000064A8 BF[00E62900]        <1> 	mov edi, threadlist
  7922 000064AD 31C0                <1> 	xor eax, eax
  7923 000064AF A3[CF640000]        <1> 	mov [currentthread], eax
  7924 000064B4 8B07                <1> 	mov eax, [edi]
  7925 000064B6 3D00000000          <1> 	cmp eax, 0
  7926 000064BB 0F8446FFFFFF        <1> 	je near nwcmdst
  7927                              <1> okespthread:
  7928 000064C1 89C4                <1> 	mov esp, eax
  7929 000064C3 B020                <1> 	mov al, 0x20
  7930 000064C5 E620                <1> 	out 0x20, al
  7931 000064C7 61                  <1> 	popad
  7932 000064C8 FB                  <1> 	sti
  7933 000064C9 CF                  <1> 	iret
  7934                              <1> 
  7935                              <1> %endif
  7936 000064CA 04000000            <1> 	lastthread dd 4
  7937 000064CE 00                  <1> 	threadson db 0
  7938 000064CF 00000000            <1> 	currentthread dd 0
  7939                                  %ifdef gui.included
  7940                                      %include "source/gui/gui.asm"
  7941                              <1> guiboot:	;Let's see what I can do, I am going to try to make this as freestanding as possible
  7942 000064D3 31C0                <1> 	xor eax, eax
  7943 000064D5 31DB                <1> 	xor ebx, ebx
  7944 000064D7 31C9                <1> 	xor ecx, ecx
  7945 000064D9 31D2                <1> 	xor edx, edx
  7946 000064DB E8B9060000          <1> 	call guisetup
  7947                              <1> guiloop:
  7948 000064E0 E843F1FFFF          <1> 	call cursorgui
  7949                              <1> guistart:
  7950 000064E5 E849F7FFFF          <1> 	call getkey
  7951 000064EA C605[EF770000]00    <1> 	mov byte [copygui], 0
  7952 000064F1 E9EFFFFFFF          <1> 	jmp guistart
  7953                              <1> 	
  7954                              <1> %include "source/gui/bmp.asm"
  7955                              <2> 
  7956                              <2> showbmp:
  7957 000064F6 668B06              <2> 	mov ax, [esi]
  7958 000064F9 663D424D            <2> 	cmp ax, "BM"
  7959 000064FD 0F85BB000000        <2> 	jne near endedbmp
  7960 00006503 8B3D[4B550000]      <2> 	mov edi, [physbaseptr]
  7961 00006509 6689D0              <2> 	mov ax, dx
  7962 0000650C 6689CB              <2> 	mov bx, cx
  7963 0000650F 31C9                <2> 	xor ecx, ecx
  7964 00006511 31D2                <2> 	xor edx, edx
  7965 00006513 6689D9              <2> 	mov cx, bx
  7966 00006516 6689C2              <2> 	mov dx, ax
  7967 00006519 01D7                <2> 	add edi, edx
  7968 0000651B 01D7                <2> 	add edi, edx
  7969 0000651D 31D2                <2> 	xor edx, edx
  7970 0000651F 668B15[23560000]    <2> 	mov dx, [resolutionx2]
  7971 00006526 034E16              <2> 	add ecx, [esi + 22]
  7972                              <2> bmplocloop:
  7973 00006529 52                  <2> 	push edx
  7974 0000652A 31C0                <2> 	xor eax, eax
  7975 0000652C 6689D0              <2> 	mov ax, dx
  7976 0000652F F7E1                <2> 	mul ecx
  7977 00006531 5A                  <2> 	pop edx
  7978 00006532 663B0D[37550000]    <2> 	cmp cx, [resolutiony]
  7979 00006539 7609                <2> 	jbe .nofixy
  7980 0000653B 31C9                <2> 	xor ecx, ecx
  7981 0000653D 668B0D[37550000]    <2> 	mov cx, [resolutiony]
  7982                              <2> .nofixy:
  7983 00006544 01C7                <2> 	add edi, eax
  7984 00006546 8B5612              <2> 	mov edx, [esi + 18]
  7985 00006549 8B4E16              <2> 	mov ecx, [esi + 22]
  7986 0000654C 8B460A              <2> 	mov eax, [esi + 10]
  7987 0000654F 8B5E02              <2> 	mov ebx, [esi + 2]
  7988 00006552 01F3                <2> 	add ebx, esi
  7989 00006554 891D[C4650000]      <2> 	mov [bmpend], ebx
  7990 0000655A 89D3                <2> 	mov ebx, edx
  7991 0000655C 01C6                <2> 	add esi, eax
  7992                              <2> ldxbmp2:
  7993 0000655E 31D2                <2> 	xor edx, edx
  7994 00006560 668B15[35550000]    <2> 	mov dx, [resolutionx]
  7995 00006567 39D3                <2> 	cmp ebx, edx
  7996 00006569 7702                <2> 	ja ldxbmp
  7997 0000656B 89DA                <2> 	mov edx, ebx
  7998                              <2> ldxbmp:
  7999 0000656D 668B06              <2> 	mov ax, [esi]
  8000 00006570 668907              <2> 	mov [edi], ax
  8001 00006573 81C702000000        <2> 	add edi, 2
  8002 00006579 81C602000000        <2> 	add esi, 2
  8003 0000657F 3B35[C4650000]      <2> 	cmp esi, [bmpend]
  8004 00006585 7737                <2> 	ja endedbmp
  8005 00006587 4A                  <2> 	dec edx
  8006 00006588 81FA00000000        <2> 	cmp edx, 0
  8007 0000658E 77DD                <2> 	ja ldxbmp
  8008 00006590 31D2                <2> 	xor edx, edx
  8009 00006592 668B15[35550000]    <2> 	mov dx, [resolutionx]
  8010 00006599 39D3                <2> 	cmp ebx, edx
  8011 0000659B 7610                <2> 	jbe .notover
  8012                              <2> .over:
  8013 0000659D 01DE                <2> 	add esi, ebx
  8014 0000659F 01DE                <2> 	add esi, ebx
  8015 000065A1 29D6                <2> 	sub esi, edx
  8016 000065A3 29D6                <2> 	sub esi, edx
  8017 000065A5 01DF                <2> 	add edi, ebx
  8018 000065A7 01DF                <2> 	add edi, ebx
  8019 000065A9 29D7                <2> 	sub edi, edx
  8020 000065AB 29D7                <2> 	sub edi, edx
  8021                              <2> .notover:
  8022 000065AD 29DF                <2> 	sub edi, ebx
  8023 000065AF 29DF                <2> 	sub edi, ebx
  8024 000065B1 29D7                <2> 	sub edi, edx
  8025 000065B3 29D7                <2> 	sub edi, edx
  8026 000065B5 49                  <2> 	dec ecx
  8027 000065B6 81F900000000        <2> 	cmp ecx, 0
  8028 000065BC 77A0                <2> 	ja ldxbmp2
  8029                              <2> endedbmp:
  8030 000065BE E80E020000          <2> 	call switchmousepos2
  8031 000065C3 C3                  <2> 	ret
  8032                              <2> 	
  8033 000065C4 00000000            <2> 	bmpend dd 0
  8034                              <1> %include "source/gui/circle.asm"
  8035                              <2> drawcircle:	;center in (dx,cx), color in si, radius in ax
  8036 000065C8 663D0000            <2> 	cmp ax, 0
  8037 000065CC 770A                <2> 	ja .nozerocircle
  8038 000065CE E8201A0000          <2> 	call putpixel	;the easiest circle ever
  8039 000065D3 E9F4000000          <2> 	jmp .done
  8040                              <2> .nozerocircle
  8041 000065D8 55                  <2> 	push ebp
  8042 000065D9 6689F5              <2> 	mov bp, si
  8043 000065DC 6650                <2> 	push ax
  8044 000065DE E8511A0000          <2> 	call getpixelmem
  8045 000065E3 31C0                <2> 	xor eax, eax
  8046 000065E5 6658                <2> 	pop ax
  8047 000065E7 BE01000000          <2> 	mov esi, 1
  8048 000065EC 29C6                <2> 	sub esi, eax
  8049 000065EE 89C1                <2> 	mov ecx, eax
  8050 000065F0 31C0                <2> 	xor eax, eax
  8051 000065F2 66A1[23560000]      <2> 	mov ax, [resolutionx2]
  8052 000065F8 F7E1                <2> 	mul ecx
  8053 000065FA 50                  <2> 	push eax
  8054 000065FB 31D2                <2> 	xor edx, edx
  8055 000065FD 01C7                <2> 	add edi, eax
  8056 000065FF 66892F              <2> 	mov [edi], bp
  8057 00006602 29C7                <2> 	sub edi, eax
  8058 00006604 29C7                <2> 	sub edi, eax
  8059 00006606 66892F              <2> 	mov [edi], bp
  8060 00006609 01C7                <2> 	add edi, eax
  8061 0000660B D1E1                <2> 	shl ecx, 1
  8062 0000660D 01CF                <2> 	add edi, ecx
  8063 0000660F 66892F              <2> 	mov [edi], bp
  8064 00006612 D1E1                <2> 	shl ecx, 1
  8065 00006614 29CF                <2> 	sub edi, ecx
  8066 00006616 66892F              <2> 	mov [edi], bp
  8067 00006619 D1E9                <2> 	shr ecx, 1
  8068 0000661B 01CF                <2> 	add edi, ecx
  8069 0000661D D1E9                <2> 	shr ecx, 1
  8070 0000661F B802000000          <2> 	mov eax, 2
  8071 00006624 F7E1                <2> 	mul ecx
  8072 00006626 48                  <2> 	dec eax
  8073 00006627 F7D0                <2> 	not eax ;make it negative
  8074 00006629 A3[D1660000]        <2> 	mov [.ddF_y], eax
  8075 0000662E 58                  <2> 	pop eax
  8076 0000662F BB01000000          <2> 	mov ebx, 1
  8077 00006634 891D[CD660000]      <2> 	mov [.ddF_x], ebx
  8078 0000663A 4B                  <2> 	dec ebx
  8079 0000663B 31D2                <2> 	xor edx, edx
  8080                              <2> .lp:	;it starts this with the center in edi
  8081                              <2> 		;color in bp
  8082                              <2> 		;ddF_x in memor
  8083                              <2> 		;x*resolutionx2 in ebx
  8084                              <2> 		;x in edx
  8085                              <2> 		;ddF_y in memory
  8086                              <2> 		;y*resolutionx2 in eax
  8087                              <2> 		;f in esi
  8088                              <2> 		;y in ecx
  8089 0000663D 81FE00000080        <2> 	cmp esi, 0x80000000 ;this means it is not negative
  8090 00006643 7717                <2> 	ja	.noddF_y
  8091 00006645 49                  <2> 	dec ecx
  8092 00006646 2B05[23560000]      <2> 	sub eax, [resolutionx2]
  8093 0000664C 8105[D1660000]0200- <2> 	add dword [.ddF_y], 2
  8094 00006654 0000                <2>
  8095 00006656 0335[D1660000]      <2> 	add esi, [.ddF_y]
  8096                              <2> .noddF_y:
  8097 0000665C 42                  <2> 	inc edx
  8098 0000665D 031D[23560000]      <2> 	add ebx, [resolutionx2]
  8099 00006663 8105[CD660000]0200- <2> 	add dword [.ddF_x], 2
  8100 0000666B 0000                <2>
  8101 0000666D 0335[CD660000]      <2> 	add esi, [.ddF_x]
  8102                              <2> 
  8103 00006673 D1E2                <2> 	shl edx, 1
  8104 00006675 D1E1                <2> 	shl ecx, 1
  8105 00006677 01D7                <2> 	add edi, edx
  8106 00006679 01C7                <2> 	add edi, eax
  8107 0000667B 66892F              <2> 	mov [edi], bp
  8108 0000667E D1E2                <2> 	shl edx, 1
  8109 00006680 29D7                <2> 	sub edi, edx
  8110 00006682 66892F              <2> 	mov [edi], bp
  8111 00006685 01D7                <2> 	add edi, edx
  8112 00006687 D1E0                <2> 	shl eax, 1
  8113 00006689 29C7                <2> 	sub edi, eax
  8114 0000668B 66892F              <2> 	mov [edi], bp
  8115 0000668E 29D7                <2> 	sub edi, edx
  8116 00006690 66892F              <2> 	mov [edi], bp
  8117 00006693 D1EA                <2> 	shr edx, 1
  8118 00006695 D1E8                <2> 	shr eax, 1
  8119 00006697 01C7                <2> 	add edi, eax
  8120 00006699 01D7                <2> 	add edi, edx
  8121                              <2> 	
  8122 0000669B 01DF                <2> 	add edi, ebx
  8123 0000669D 01CF                <2> 	add edi, ecx
  8124 0000669F 66892F              <2> 	mov [edi], bp
  8125 000066A2 D1E1                <2> 	shl ecx, 1
  8126 000066A4 29CF                <2> 	sub edi, ecx
  8127 000066A6 66892F              <2> 	mov [edi], bp
  8128 000066A9 D1E3                <2> 	shl ebx, 1
  8129 000066AB 29DF                <2> 	sub edi, ebx
  8130 000066AD 01CF                <2> 	add edi, ecx
  8131 000066AF 66892F              <2> 	mov [edi], bp
  8132 000066B2 29CF                <2> 	sub edi, ecx
  8133 000066B4 66892F              <2> 	mov [edi], bp
  8134 000066B7 D1EB                <2> 	shr ebx, 1
  8135 000066B9 D1E9                <2> 	shr ecx, 1
  8136 000066BB 01DF                <2> 	add edi, ebx
  8137 000066BD 01CF                <2> 	add edi, ecx
  8138 000066BF D1EA                <2> 	shr edx, 1
  8139 000066C1 D1E9                <2> 	shr ecx, 1
  8140 000066C3 39CA                <2> 	cmp edx, ecx
  8141 000066C5 0F8272FFFFFF        <2> 	jb .lp
  8142 000066CB 5D                  <2> 	pop ebp
  8143                              <2> .done:
  8144 000066CC C3                  <2> 	ret
  8145                              <2> 	
  8146 000066CD 00000000            <2> .ddF_x dd 0
  8147 000066D1 00000000            <2> .ddF_y dd 0
  8148                              <1> %include "source/gui/cursor.asm"
  8149                              <2> clearmousecursor:
  8150 000066D5 BE[B66A0000]        <2> 		mov esi, background
  8151 000066DA 8B3D[4B550000]      <2> 		mov edi, [physbaseptr]
  8152 000066E0 31D2                <2> 		xor edx, edx
  8153 000066E2 31C9                <2> 		xor ecx, ecx
  8154 000066E4 668B15[12580000]    <2> 		mov dx, [lastmouseposition]
  8155 000066EB 668B0D[14580000]    <2> 		mov cx, [lastmouseposition + 2]
  8156 000066F2 01D7                <2> 		add edi, edx
  8157 000066F4 31D2                <2> 		xor edx, edx
  8158 000066F6 668B15[23560000]    <2> 		mov dx, [resolutionx2]
  8159 000066FD 81F900000000        <2> 		cmp ecx, 0
  8160 00006703 7408                <2> 		je .nomul
  8161 00006705 52                  <2> 		push edx
  8162 00006706 89D0                <2> 		mov eax, edx
  8163 00006708 F7E1                <2> 		mul ecx
  8164 0000670A 01C7                <2> 		add edi, eax
  8165 0000670C 5A                  <2> 		pop edx
  8166                              <2> .nomul:
  8167                              <2> %ifdef 	gui.background
  8168 0000670D 813D[886A0000]0000- <2> 		cmp dword [backgroundimage], 0
  8169 00006715 0000                <2>
  8170 00006717 7438                <2> 		je .noyclr
  8171 00006719 8B35[886A0000]      <2> 		mov esi, [backgroundimage]
  8172 0000671F 2B3D[4B550000]      <2> 		sub edi, [physbaseptr]
  8173 00006725 01FE                <2> 		add esi, edi
  8174 00006727 033D[4B550000]      <2> 		add edi, [physbaseptr]
  8175                              <2> .backlp:
  8176 0000672D 31DB                <2> 		xor ebx, ebx
  8177                              <2> .noyback:
  8178 0000672F 8B041E              <2> 		mov eax, [esi + ebx]
  8179 00006732 89041F              <2> 		mov [edi + ebx], eax
  8180 00006735 81C304000000        <2> 		add ebx, 4
  8181 0000673B 81FB10000000        <2> 		cmp ebx, 16
  8182 00006741 75EC                <2> 		jne .noyback
  8183 00006743 01D7                <2> 		add edi, edx
  8184 00006745 01D6                <2> 		add esi, edx
  8185 00006747 6641                <2> 		inc cx
  8186 00006749 6681F91000          <2> 		cmp cx, 16
  8187 0000674E 72DD                <2> 		jb .backlp
  8188 00006750 C3                  <2> 		ret
  8189                              <2> %endif
  8190                              <2> .noyclr:
  8191 00006751 668B06              <2> 		mov ax, [esi]
  8192 00006754 C1C010              <2> 		rol eax, 16
  8193 00006757 668B06              <2> 		mov ax, [esi]
  8194 0000675A 8907                <2> 		mov [edi], eax
  8195 0000675C 894704              <2> 		mov [edi + 4], eax
  8196 0000675F 894708              <2> 		mov [edi + 8], eax
  8197 00006762 89470C              <2> 		mov [edi + 12], eax
  8198 00006765 01D7                <2> 		add edi, edx
  8199 00006767 6641                <2> 		inc cx
  8200 00006769 6681F91000          <2> 		cmp cx, 16
  8201 0000676E 72E1                <2> 		jb .noyclr
  8202 00006770 C3                  <2> 		ret
  8203                              <2> 
  8204                              <2> switchmousepos:		;;switch were the mouse is located
  8205 00006771 BE[93DF2800]        <2> 		mov esi, mousecolorbuf
  8206 00006776 8B3D[4B550000]      <2> 		mov edi, [physbaseptr]
  8207 0000677C 31D2                <2> 		xor edx, edx
  8208 0000677E 31C9                <2> 		xor ecx, ecx
  8209 00006780 668B15[12580000]    <2> 		mov dx, [lastmouseposition]
  8210 00006787 668B0D[14580000]    <2> 		mov cx, [lastmouseposition + 2]
  8211 0000678E 01D7                <2> 		add edi, edx
  8212 00006790 31D2                <2> 		xor edx, edx
  8213 00006792 668B15[23560000]    <2> 		mov dx, [resolutionx2]
  8214 00006799 6681F90000          <2> 		cmp cx, 0
  8215 0000679E 740B                <2> 		je noswmsy
  8216 000067A0 01D7                <2> swmsy:		add edi, edx
  8217 000067A2 6649                <2> 		dec cx
  8218 000067A4 6681F90000          <2> 		cmp cx, 0
  8219 000067A9 75F5                <2> 		jne swmsy
  8220 000067AB 8B06                <2> noswmsy:	mov eax, [esi]
  8221 000067AD 8B5E04              <2> 		mov ebx, [esi + 4]
  8222 000067B0 8907                <2> 		mov [edi], eax
  8223 000067B2 895F04              <2> 		mov [edi + 4], ebx
  8224 000067B5 8B4608              <2> 		mov eax, [esi + 8]
  8225 000067B8 8B5E0C              <2> 		mov ebx, [esi + 12]
  8226 000067BB 894708              <2> 		mov [edi + 8], eax
  8227 000067BE 895F0C              <2> 		mov [edi + 12], ebx
  8228 000067C1 01D7                <2> 		add edi, edx
  8229 000067C3 81C610000000        <2> 		add esi, 16
  8230 000067C9 81FE[93E02800]      <2> 		cmp esi, mcolorend
  8231 000067CF 72DA                <2> 		jb noswmsy
  8232                              <2> 		
  8233                              <2> switchmousepos2:
  8234 000067D1 BE[93DF2800]        <2> 		mov esi, mousecolorbuf
  8235 000067D6 8B3D[4B550000]      <2> 		mov edi, [physbaseptr]
  8236 000067DC 31D2                <2> 		xor edx, edx
  8237 000067DE 31C9                <2> 		xor ecx, ecx
  8238 000067E0 668B15[16580000]    <2> 		mov dx, [mousecursorposition]
  8239 000067E7 668B0D[18580000]    <2> 		mov cx, [mousecursorposition + 2]
  8240 000067EE 01D7                <2> 		add edi, edx
  8241 000067F0 31D2                <2> 		xor edx, edx
  8242 000067F2 668B15[23560000]    <2> 		mov dx, [resolutionx2]
  8243 000067F9 6681F90000          <2> 		cmp cx, 0
  8244 000067FE 740B                <2> 		je noswmsy2
  8245 00006800 01D7                <2> swmsy2:		add edi, edx
  8246 00006802 6649                <2> 		dec cx
  8247 00006804 6681F90000          <2> 		cmp cx, 0
  8248 00006809 75F5                <2> 		jne swmsy2
  8249 0000680B 8B07                <2> noswmsy2:	mov eax, [edi]
  8250 0000680D 8B5F04              <2> 		mov ebx, [edi + 4]
  8251 00006810 8906                <2> 		mov [esi], eax
  8252 00006812 895E04              <2> 		mov [esi + 4], ebx
  8253 00006815 8B4708              <2> 		mov eax, [edi + 8]
  8254 00006818 8B5F0C              <2> 		mov ebx, [edi + 12]
  8255 0000681B 894608              <2> 		mov [esi + 8], eax
  8256 0000681E 895E0C              <2> 		mov [esi + 12], ebx
  8257 00006821 01D7                <2> 		add edi, edx
  8258 00006823 81C610000000        <2> 		add esi, 16
  8259 00006829 81FE[93E02800]      <2> 		cmp esi, mcolorend
  8260 0000682F 72DA                <2> 		jb noswmsy2
  8261 00006831 C3                  <2> 		ret
  8262                              <2> 		
  8263                              <1> %include "source/gui/icon.asm"
  8264 00006832 0000                <2> iconcolor dw 0
  8265                              <2> 	showicon:	;;icon in si, position in (dx,cx), selected in ax, code in bx
  8266 00006834 A2[5C800000]        <2> 		mov [iconselected], al
  8267 00006839 8025[5C800000]01    <2> 		and byte [iconselected], 1
  8268 00006840 B401                <2> 		mov ah, 1
  8269 00006842 E823150000          <2> 		call graphicsadd
  8270                              <2> 	showicon2:
  8271 00006847 8B3D[4B550000]      <2> 		mov edi, [physbaseptr]
  8272 0000684D 6601D2              <2> 		add dx, dx
  8273 00006850 663B15[23560000]    <2> 		cmp dx, [resolutionx2]
  8274 00006857 720C                <2> 		jb screenxgood
  8275 00006859 668B15[23560000]    <2> 		mov dx, [resolutionx2]
  8276 00006860 6681EA4000          <2> 		sub dx, 64
  8277                              <2> 	screenxgood:
  8278 00006865 6681F90000          <2> 		cmp cx, 0
  8279 0000686A 742B                <2> 		je noscreenygoodchk
  8280 0000686C 663B0D[37550000]    <2> 		cmp cx, [resolutiony]
  8281 00006873 720C                <2> 		jb screenygood
  8282 00006875 668B0D[37550000]    <2> 		mov cx, [resolutiony]
  8283 0000687C 6681E92000          <2> 		sub cx, 32
  8284                              <2> 	screenygood:
  8285 00006881 50                  <2> 		push eax
  8286 00006882 52                  <2> 		push edx
  8287 00006883 31C0                <2> 		xor eax, eax
  8288 00006885 31DB                <2> 		xor ebx, ebx
  8289 00006887 668B1D[23560000]    <2> 		mov bx, [resolutionx2]
  8290 0000688E 6689C8              <2> 		mov ax, cx
  8291 00006891 F7E3                <2> 		mul ebx
  8292 00006893 01C7                <2> 		add edi, eax
  8293 00006895 5A                  <2> 		pop edx
  8294 00006896 58                  <2> 		pop eax
  8295                              <2> 	noscreenygoodchk:
  8296 00006897 31DB                <2> 		xor ebx, ebx
  8297 00006899 6689D3              <2> 		mov bx, dx
  8298 0000689C 01DF                <2> 		add edi, ebx
  8299 0000689E 6631C9              <2> 		xor cx, cx
  8300 000068A1 668B06              <2> 		mov ax, [esi]
  8301 000068A4 81C602000000        <2> 		add esi, 2
  8302 000068AA 66A3[32680000]      <2> 		mov [iconcolor], ax
  8303                              <2> 	writeicon:
  8304 000068B0 8B06                <2> 		mov eax, [esi]
  8305 000068B2 D1C0                <2> 		rol eax, 1
  8306 000068B4 30C9                <2> 		xor cl, cl
  8307                              <2> 	writeiconline:
  8308 000068B6 B201                <2> 		mov dl, 1
  8309 000068B8 20C2                <2> 		and dl, al
  8310 000068BA 3215[5C800000]      <2> 		xor dl, [iconselected]
  8311 000068C0 668B1D[B66A0000]    <2> 		mov bx, [background]
  8312 000068C7 66891F              <2> 		mov [edi], bx
  8313 000068CA 80FA00              <2> 		cmp dl, 0
  8314 000068CD 740A                <2> 		je noiconline
  8315 000068CF 668B15[32680000]    <2> 		mov dx, [iconcolor]
  8316 000068D6 668917              <2> 		mov [edi], dx
  8317                              <2> 	noiconline:
  8318 000068D9 81C702000000        <2> 		add edi, 2
  8319 000068DF D1C0                <2> 		rol eax, 1
  8320 000068E1 FEC1                <2> 		inc cl
  8321 000068E3 80F920              <2> 		cmp cl, 32
  8322 000068E6 72CE                <2> 		jb writeiconline
  8323 000068E8 81C604000000        <2> 		add esi, 4
  8324 000068EE FEC5                <2> 		inc ch
  8325 000068F0 31D2                <2> 		xor edx, edx
  8326 000068F2 668B15[23560000]    <2> 		mov dx, [resolutionx2]
  8327 000068F9 01D7                <2> 		add edi, edx
  8328 000068FB 81EF40000000        <2> 		sub edi, 64
  8329 00006901 80FD20              <2> 		cmp ch, 32
  8330 00006904 72AA                <2> 		jb writeicon
  8331 00006906 31C0                <2> 		xor eax, eax
  8332 00006908 C3                  <2> 		ret
  8333                              <1> %include "source/gui/line.asm"
  8334                              <2> drawline:	;from (bx,ax) to (dx,cx), color in si
  8335 00006909 668935[2B6A0000]    <2> 	mov [.color], si
  8336 00006910 C605[2D6A0000]00    <2> 	mov byte [.steep], 0
  8337 00006917 C605[2E6A0000]00    <2> 	mov byte [.yreversed], 0
  8338 0000691E E907000000          <2> 	jmp .notsteep
  8339                              <2> .steeploop:
  8340 00006923 C605[2D6A0000]01    <2> 	mov byte [.steep], 1
  8341                              <2> .notsteep:
  8342 0000692A 31FF                <2> 	xor edi, edi
  8343 0000692C 31F6                <2> 	xor esi, esi
  8344 0000692E 6639DA              <2> 	cmp dx, bx
  8345 00006931 7705                <2> 	ja .noreversex
  8346 00006933 6687D3              <2> 	xchg dx, bx
  8347 00006936 6691                <2> 	xchg cx, ax
  8348                              <2> .noreversex:
  8349 00006938 6689D7              <2> 	mov di, dx
  8350 0000693B 6629DF              <2> 	sub di, bx
  8351                              <2> 	
  8352 0000693E 6639C1              <2> 	cmp cx, ax
  8353 00006941 720B                <2> 	jb .reversey
  8354 00006943 6689CE              <2> 	mov si, cx
  8355 00006946 6629C6              <2> 	sub si, ax
  8356 00006949 E90D000000          <2> 	jmp .normal
  8357                              <2> .reversey:
  8358 0000694E C605[2E6A0000]02    <2> 	mov byte [.yreversed], 2
  8359 00006955 6689C6              <2> 	mov si, ax
  8360 00006958 6629CE              <2> 	sub si, cx	
  8361                              <2> .normal:
  8362 0000695B 6687CA              <2> 	xchg cx, dx
  8363 0000695E 6693                <2> 	xchg ax, bx
  8364 00006960 6639FE              <2> 	cmp si, di
  8365 00006963 77BE                <2> 	ja .steeploop
  8366 00006965 6687CA              <2> 	xchg cx, dx
  8367 00006968 6693                <2> 	xchg ax, bx
  8368                              <2> 	
  8369 0000696A 6691                <2> 	xchg ax, cx
  8370 0000696C 6687DA              <2> 	xchg bx, dx
  8371 0000696F 66893D[316A0000]    <2> 	mov [.xdelta], di
  8372 00006976 668935[336A0000]    <2> 	mov [.ydelta], si
  8373 0000697D 668B35[2B6A0000]    <2> 	mov si, [.color]
  8374 00006984 66891D[2F6A0000]    <2> 	mov [.endline], bx
  8375 0000698B 6652                <2> 	push dx
  8376 0000698D 6651                <2> 	push cx
  8377 0000698F 6687CA              <2> 	xchg cx, dx
  8378 00006992 803D[2D6A0000]01    <2> 	cmp byte [.steep], 1
  8379 00006999 7403                <2> 	je .xchg
  8380 0000699B 6687D1              <2> 	xchg dx, cx
  8381                              <2> .xchg:
  8382 0000699E E891160000          <2> 	call getpixelmem	;get pointer to pixel in edi from (dx,cx)
  8383 000069A3 6659                <2> 	pop cx
  8384 000069A5 665A                <2> 	pop dx
  8385 000069A7 31C0                <2> 	xor eax, eax
  8386 000069A9 66A1[316A0000]      <2> 	mov ax, [.xdelta]
  8387 000069AF 66D1E8              <2> 	shr ax, 1
  8388 000069B2 8A0D[2D6A0000]      <2> 	mov cl, [.steep]
  8389 000069B8 0A0D[2E6A0000]      <2> 	or cl, [.yreversed]
  8390 000069BE 55                  <2> 	push ebp
  8391 000069BF 668B2D[2F6A0000]    <2> 	mov bp, [.endline]
  8392 000069C6 6629D5              <2> 	sub bp, dx
  8393 000069C9 668B15[336A0000]    <2> 	mov dx, [.ydelta]
  8394                              <2> .lp:
  8395 000069D0 668937              <2> 	mov [edi], si
  8396 000069D3 6639D0              <2> 	cmp ax, dx
  8397 000069D6 7332                <2> 	jae .noaddx
  8398 000069D8 F6C102              <2> 	test cl, 2
  8399 000069DB 7414                <2> 	jz .nodecy
  8400 000069DD F6C101              <2> 	test cl, 1
  8401 000069E0 7509                <2> 	jnz .steepy
  8402 000069E2 29DF                <2> 	sub edi, ebx
  8403 000069E4 29DF                <2> 	sub edi, ebx
  8404 000069E6 E906000000          <2> 	jmp .nodecy
  8405                              <2> .steepy:
  8406 000069EB 81EF04000000        <2> 	sub edi, 4
  8407                              <2> .nodecy:
  8408 000069F1 660305[316A0000]    <2> 	add ax, [.xdelta]
  8409 000069F8 F6C101              <2> 	test cl, 1
  8410 000069FB 7507                <2> 	jnz .steepx
  8411 000069FD 01DF                <2> 	add edi, ebx
  8412 000069FF E906000000          <2> 	jmp .noaddx
  8413                              <2> .steepx:
  8414 00006A04 81C702000000        <2> 	add edi, 2
  8415                              <2> .noaddx:
  8416 00006A0A 6629D0              <2> 	sub ax, dx
  8417 00006A0D 664D                <2> 	dec bp
  8418 00006A0F 81C702000000        <2> 	add edi, 2
  8419 00006A15 F6C101              <2> 	test cl, 1
  8420 00006A18 7408                <2> 	jz .nosteepx
  8421 00006A1A 81EF02000000        <2> 	sub edi, 2
  8422 00006A20 01DF                <2> 	add edi, ebx
  8423                              <2> .nosteepx:
  8424 00006A22 6681FD0000          <2> 	cmp bp, 0
  8425 00006A27 75A7                <2> 	jne .lp
  8426                              <2> .done:
  8427 00006A29 5D                  <2> 	pop ebp
  8428 00006A2A C3                  <2> 	ret
  8429                              <2> 	
  8430 00006A2B 0000                <2> .color dw 0
  8431 00006A2D 00                  <2> .steep db 0
  8432 00006A2E 00                  <2> .yreversed db 0
  8433 00006A2F 0000                <2> .endline dw 0
  8434 00006A31 0000                <2> .xdelta dw 0
  8435 00006A33 0000                <2> .ydelta dw 0
  8436                              <1> %include "source/gui/refresh.asm"
  8437                              <2> guiclear:
  8438 00006A35 8B3D[4B550000]      <2> 	mov edi, [physbaseptr]
  8439 00006A3B 668B15[35550000]    <2> 	mov dx, [resolutionx]
  8440 00006A42 668B0D[37550000]    <2> 	mov cx, [resolutiony]
  8441                              <2> %ifdef gui.background
  8442 00006A49 813D[886A0000]0000- <2> 	cmp dword [backgroundimage], 0
  8443 00006A51 0000                <2>
  8444 00006A53 7437                <2> 	je guiclear.noback
  8445 00006A55 8B35[886A0000]      <2> 		mov esi, [backgroundimage]
  8446                              <2> 	.lp:
  8447                              <2> 		;movdqa xmm0, [esi]	;the next 4 lines are for SSE
  8448                              <2> 		;movdqa [edi], xmm0
  8449                              <2> 		;add esi, 16
  8450                              <2> 		;add edi, 16
  8451                              <2> 		;sub dx, 8
  8452 00006A5B 8B06                <2> 		mov eax, [esi]
  8453 00006A5D 8907                <2> 		mov [edi], eax
  8454 00006A5F 81C604000000        <2> 		add esi, 4
  8455 00006A65 81C704000000        <2> 		add edi, 4
  8456 00006A6B 6681EA0200          <2> 		sub dx, 2
  8457 00006A70 6681FA0000          <2> 		cmp dx, 0
  8458 00006A75 77E4                <2> 		ja .lp
  8459 00006A77 6649                <2> 		dec cx
  8460 00006A79 668B15[35550000]    <2> 		mov dx, [resolutionx]
  8461 00006A80 6681F90000          <2> 		cmp cx, 0
  8462 00006A85 77D4                <2> 		ja .lp
  8463 00006A87 C3                  <2> 		ret
  8464 00006A88 00000000            <2> 	backgroundimage dd 0
  8465                              <2> %endif
  8466                              <2> guiclear.noback:
  8467 00006A8C A1[B66A0000]        <2> 	mov eax, [background]
  8468                              <2> guiclearloop:
  8469 00006A91 8907                <2> 	mov [edi], eax
  8470 00006A93 81C704000000        <2> 	add edi, 4
  8471 00006A99 6681EA0200          <2> 	sub dx, 2
  8472 00006A9E 6681FA0000          <2> 	cmp dx, 0
  8473 00006AA3 77EC                <2> 	ja guiclearloop
  8474 00006AA5 6649                <2> 	dec cx
  8475 00006AA7 668B15[35550000]    <2> 	mov dx, [resolutionx]
  8476 00006AAE 6681F90000          <2> 	cmp cx, 0
  8477 00006AB3 77DC                <2> 	ja guiclearloop
  8478 00006AB5 C3                  <2> 	ret
  8479                              <2> 
  8480 00006AB6 CF7B<rept>          <2> background times 2 dw 0111101111001111b
  8481                              <2> 
  8482                              <2> reloadallgraphics:
  8483 00006ABA BF[93C90000]        <2> 		mov edi, graphicstable
  8484                              <2> reloadgraphicsloop:
  8485 00006ABF 8B7702              <2> 		mov esi, [edi + 2]
  8486 00006AC2 668B5706            <2> 		mov dx, [edi + 6]
  8487 00006AC6 668B4F08            <2> 		mov cx, [edi + 8]
  8488 00006ACA 668B07              <2> 		mov ax, [edi]
  8489 00006ACD 668B5F0A            <2> 		mov bx, [edi + 10]
  8490 00006AD1 893D[567D0000]      <2> 		mov [grpctblpos], edi
  8491 00006AD7 3B3D[F9770000]      <2> 		cmp edi, [dragging]
  8492 00006ADD 741E                <2> 		je loadedgraphic
  8493 00006ADF 663D0100            <2> 		cmp ax, 1
  8494 00006AE3 0F843C000000        <2> 		je near icongraphic
  8495 00006AE9 663D0200            <2> 		cmp ax, 2
  8496 00006AED 0F8445000000        <2> 		je near stringgraphic
  8497 00006AF3 663D0300            <2> 		cmp ax, 3
  8498 00006AF7 0F8419000000        <2> 		je near windowgraphic
  8499 00006AFD 8B3D[567D0000]      <2> loadedgraphic:  mov edi, [grpctblpos]
  8500 00006B03 81C710000000        <2> 		add edi, 16
  8501 00006B09 81FF[93CB0000]      <2> 		cmp edi, graphicstableend
  8502 00006B0F 733A                <2> 		jae donereloadgraphics
  8503 00006B11 E9A9FFFFFF          <2> 		jmp reloadgraphicsloop
  8504                              <2> windowgraphic:
  8505 00006B16 E85B080000          <2> 		call showwindow2
  8506 00006B1B E8CAB2FFFF          <2> 		call cleardouble
  8507 00006B20 E9D8FFFFFF          <2> 		jmp loadedgraphic
  8508 00006B25 80E301              <2> icongraphic:	and bl, 1
  8509 00006B28 881D[5C800000]      <2> 		mov [iconselected], bl
  8510 00006B2E E814FDFFFF          <2> 		call showicon2
  8511 00006B33 E9C5FFFFFF          <2> 		jmp loadedgraphic
  8512 00006B38 80E301              <2> stringgraphic:  and bl, 1
  8513 00006B3B 881D[F5770000]      <2> 		mov [mouseselecton], bl
  8514 00006B41 E813050000          <2> 		call showstring2
  8515 00006B46 E9B2FFFFFF          <2> 		jmp loadedgraphic
  8516                              <2> donereloadgraphics:
  8517 00006B4B 8B3D[F9770000]      <2> 		mov edi, [dragging]
  8518 00006B51 81FF[93C90000]      <2> 		cmp edi, graphicstable
  8519 00006B57 7226                <2> 		jb notcorrectdrag
  8520 00006B59 668B07              <2> 		mov ax, [edi]
  8521 00006B5C 8B7702              <2> 		mov esi, [edi + 2]
  8522 00006B5F 668B5706            <2> 		mov dx, [edi + 6]
  8523 00006B63 668B4F08            <2> 		mov cx, [edi + 8]
  8524 00006B67 668B5F0A            <2> 		mov bx, [edi + 10]
  8525 00006B6B 663D0100            <2> 		cmp ax, 1
  8526 00006B6F 750F                <2> 		jne noticondragging
  8527 00006B71 80E301              <2> 		and bl, 1
  8528 00006B74 881D[5C800000]      <2> 		mov [iconselected], bl
  8529 00006B7A E8C8FCFFFF          <2> 		call showicon2
  8530                              <2> notcorrectdrag:
  8531 00006B7F C3                  <2> 		ret
  8532                              <2> 
  8533                              <2> 	noticondragging:
  8534 00006B80 663D0200            <2> 		cmp ax, 2
  8535 00006B84 75F9                <2> 		jne notcorrectdrag
  8536 00006B86 80E301              <2> 		and bl, 1
  8537 00006B89 881D[F5770000]      <2> 		mov [mouseselecton], bl
  8538 00006B8F E8C5040000          <2> 		call showstring2
  8539 00006B94 E9E6FFFFFF          <2> 		jmp notcorrectdrag
  8540                              <1> %include "source/gui/startup.asm"
  8541                              <2> guisetup:
  8542                              <2> 	%ifdef gui.background
  8543 00006B99 31DB                <2> 	xor ebx, ebx
  8544 00006B9B 891D[886A0000]      <2> 	mov [backgroundimage], ebx
  8545                              <2> 	%endif
  8546 00006BA1 E88FFEFFFF          <2> 	call guiclear
  8547 00006BA6 C605[B8980000]01    <2> 	mov byte [guion], 1
  8548 00006BAD C605[F5770000]00    <2> 	mov byte [mouseselecton], 0
  8549 00006BB4 31C0                <2> 	xor eax, eax
  8550 00006BB6 31DB                <2> 	xor ebx, ebx
  8551 00006BB8 31C9                <2> 	xor ecx, ecx
  8552 00006BBA 31D2                <2> 	xor edx, edx
  8553                              <2> 	
  8554 00006BBC BE[7E6D0000]        <2> 	mov esi, pacmsg
  8555 00006BC1 30E4                <2> 	xor ah, ah
  8556 00006BC3 B010                <2> 	mov al, 00010000b
  8557 00006BC5 31DB                <2> 	xor ebx, ebx
  8558 00006BC7 66B99000            <2> 	mov cx, 144
  8559 00006BCB 66BA0400            <2> 	mov dx, 4
  8560 00006BCF E872040000          <2> 	call showstring
  8561                              <2> 	
  8562 00006BD4 BE[BC6D0000]        <2> 	mov esi, interneticon
  8563 00006BD9 30E4                <2> 	xor ah, ah
  8564 00006BDB B010                <2> 	mov al, 00010000b
  8565 00006BDD BB[A76C0000]        <2> 	mov ebx, noie
  8566 00006BE2 66B91800            <2> 	mov cx, 24
  8567 00006BE6 66BA0400            <2> 	mov dx, 4
  8568 00006BEA E845FCFFFF          <2> 	call showicon
  8569                              <2> 	
  8570 00006BEF BE[3E6E0000]        <2> 	mov esi, wordicon
  8571 00006BF4 30E4                <2> 	xor ah, ah
  8572 00006BF6 B010                <2> 	mov al, 00010000b
  8573 00006BF8 31DB                <2> 	xor ebx, ebx
  8574 00006BFA 66B91800            <2> 	mov cx, 24
  8575 00006BFE 66BA3000            <2> 	mov dx, 48
  8576 00006C02 E82DFCFFFF          <2> 	call showicon
  8577                              <2> 	
  8578 00006C07 BE[C06E0000]        <2> 	mov esi, pacmanpellet
  8579 00006C0C 30E4                <2> 	xor ah, ah
  8580 00006C0E B010                <2> 	mov al, 00010000b
  8581 00006C10 31DB                <2> 	xor ebx, ebx
  8582 00006C12 66B94000            <2> 	mov cx, 64
  8583 00006C16 66BA0400            <2> 	mov dx, 4
  8584 00006C1A E815FCFFFF          <2> 	call showicon
  8585                              <2> 	
  8586 00006C1F BE[C46F0000]        <2> 	mov esi, pacman
  8587 00006C24 30E4                <2> 	xor ah, ah
  8588 00006C26 B010                <2> 	mov al, 00010000b
  8589 00006C28 BB[906C0000]        <2> 	mov ebx, pacmannomnom
  8590 00006C2D 66B94000            <2> 	mov cx, 64
  8591 00006C31 66BA3000            <2> 	mov dx, 48
  8592 00006C35 E8FAFBFFFF          <2> 	call showicon
  8593                              <2> 	
  8594 00006C3A BE[426F0000]        <2> 	mov esi, ghostie
  8595 00006C3F 30E4                <2> 	xor ah, ah
  8596 00006C41 B010                <2> 	mov al, 00010000b
  8597 00006C43 BB[796C0000]        <2> 	mov ebx, boo
  8598 00006C48 66B96C00            <2> 	mov cx, 108
  8599 00006C4C 66BA0400            <2> 	mov dx, 4
  8600 00006C50 E8DFFBFFFF          <2> 	call showicon
  8601                              <2> 	
  8602 00006C55 BE[606D0000]        <2> 	mov esi, start
  8603 00006C5A 668B0D[37550000]    <2> 	mov cx, [resolutiony]
  8604 00006C61 6681E91000          <2> 	sub cx, 16
  8605 00006C66 66BA0200            <2> 	mov dx, 2
  8606 00006C6A 30E4                <2> 	xor ah, ah
  8607 00006C6C B010                <2> 	mov al, 00010000b
  8608 00006C6E BB[1C6D0000]        <2> 	mov ebx, winblows
  8609 00006C73 E8CE030000          <2> 	call showstring
  8610 00006C78 C3                  <2> 	ret
  8611                              <2> 
  8612                              <2> 	boo:
  8613 00006C79 BE[796D0000]        <2> 		mov esi, boomsg
  8614 00006C7E 66BA6400            <2> 		mov dx, 100
  8615 00006C82 66B94001            <2> 		mov cx, 320
  8616 00006C86 31DB                <2> 		xor ebx, ebx
  8617 00006C88 6631C0              <2> 		xor ax, ax
  8618 00006C8B E9B6030000          <2> 		jmp showstring
  8619                              <2> 
  8620                              <2> 	pacmannomnom:
  8621 00006C90 BE[976D0000]        <2> 		mov esi, pacnom
  8622 00006C95 66BA8200            <2> 		mov dx, 130
  8623 00006C99 66B93C00            <2> 		mov cx, 60
  8624 00006C9D 31DB                <2> 		xor ebx, ebx
  8625 00006C9F 6631C0              <2> 		xor ax, ax
  8626 00006CA2 E99F030000          <2> 		jmp showstring	
  8627                              <2> 	
  8628                              <2> 	noie:
  8629 00006CA7 66C705[A66D0000]80- <2> 		mov word [termwindow], 640
  8630 00006CAF 02                  <2>
  8631 00006CB0 66C705[A86D0000]E0- <2> 		mov word [termwindow + 2], 480	;the previous lines of code make a large terminal window that is 4 characters smaller than the screen
  8632 00006CB8 01                  <2>
  8633 00006CB9 BE[A66D0000]        <2> 		mov esi, termwindow
  8634 00006CBE 66BA1000            <2> 		mov dx, 16
  8635 00006CC2 66B91000            <2> 		mov cx, 16
  8636 00006CC6 31DB                <2> 		xor ebx, ebx
  8637 00006CC8 6631C0              <2> 		xor ax, ax
  8638 00006CCB E8E8050000          <2> 		call showwindow
  8639 00006CD0 E957BBFFFF          <2> 		jmp os
  8640                              <2> 
  8641                              <2> 	gotomenuboot:
  8642 00006CD5 31D2                <2> 		xor edx, edx
  8643 00006CD7 31C9                <2> 		xor ecx, ecx
  8644 00006CD9 668B15[35550000]    <2> 		mov dx, [resolutionx]
  8645 00006CE0 668B0D[37550000]    <2> 		mov cx, [resolutiony]
  8646 00006CE7 66C1E904            <2> 		shr cx, 4
  8647 00006CEB 6681E90100          <2> 		sub cx, 1
  8648 00006CF0 66C1E104            <2> 		shl cx, 4
  8649 00006CF4 668915[A66D0000]    <2> 		mov [termwindow], dx
  8650 00006CFB 66890D[A86D0000]    <2> 		mov [termwindow + 2], cx	;the previous lines of code make a large terminal window that is fullscreen
  8651 00006D02 BE[A66D0000]        <2> 		mov esi, termwindow
  8652 00006D07 6631D2              <2> 		xor dx, dx
  8653 00006D0A 6631C9              <2> 		xor cx, cx
  8654 00006D0D 31DB                <2> 		xor ebx, ebx
  8655 00006D0F 6631C0              <2> 		xor ax, ax
  8656 00006D12 E8A1050000          <2> 		call showwindow
  8657 00006D17 E910BBFFFF          <2> 		jmp os
  8658                              <2> 
  8659                              <2> 	winblows:
  8660 00006D1C BE[6F6D0000]        <2> 		mov esi, turnoffmsg
  8661 00006D21 BB[8A500000]        <2> 		mov ebx, turnoff
  8662 00006D26 668B0D[37550000]    <2> 		mov cx, [resolutiony]
  8663 00006D2D 6681E92000          <2> 		sub cx, 32
  8664 00006D32 6631D2              <2> 		xor dx, dx
  8665 00006D35 30E4                <2> 		xor ah, ah
  8666 00006D37 B010                <2> 		mov al, 00010000b
  8667 00006D39 E808030000          <2> 		call showstring
  8668 00006D3E BE[666D0000]        <2> 		mov esi, gotomenu
  8669 00006D43 668B0D[37550000]    <2> 		mov cx, [resolutiony]
  8670 00006D4A 6681E93000          <2> 		sub cx, 48
  8671 00006D4F 6631D2              <2> 		xor dx, dx
  8672 00006D52 30E4                <2> 		xor ah, ah
  8673 00006D54 B010                <2> 		mov al, 00010000b
  8674 00006D56 BB[D56C0000]        <2> 		mov ebx, gotomenuboot
  8675 00006D5B E9E6020000          <2> 		jmp showstring
  8676                              <2> 		
  8677                              <2> 
  8678 00006D60 737461727400        <2> 	start	db "start",0
  8679 00006D66 536F6C6C65724F5300  <2> 	gotomenu db "SollerOS",0
  8680 00006D6F 506F776572204F6666- <2> 	turnoffmsg db "Power Off",0
  8681 00006D78 00                  <2>
  8682 00006D79 426F6F2100          <2> 	boomsg db "Boo!",0
  8683 00006D7E 5061636D616E207761- <2> 	pacmsg	db "Pacman was easy to draw.",0
  8684 00006D87 73206561737920746F- <2>
  8685 00006D90 20647261772E00      <2>
  8686 00006D97 4F6D206E6F6D206E6F- <2> 	pacnom  db "Om nom nom nom",0
  8687 00006DA0 6D206E6F6D00        <2>
  8688                              <2> 
  8689 00006DA6 20035802            <2> 	termwindow:	dw 800,600	;window size
  8690 00006DAA FFFF0000            <2> 				dw 0xFFFF,0	;colors(FG,BG)
  8691 00006DAE [94E02800]-         <2> 				dd videobuf,videobuf2 ;location of buffers
  8692 00006DB2 [384B2900]          <2>
  8693 00006DB6 534855536800        <2> 	termmsg:	db "SHUSh",0	;;window title
  8694                              <2> 	
  8695 00006DBC <incbin>            <2> interneticon: 	incbin 'source/gui/icons/internet'
  8696 00006E3E <incbin>            <2> wordicon: 	incbin 'source/gui/icons/word'
  8697 00006EC0 <incbin>            <2> pacmanpellet: incbin 'source/gui/icons/pellet'
  8698 00006F42 <incbin>            <2> ghostie	incbin 'source/gui/icons/ghostie'
  8699 00006FC4 <incbin>            <2> pacman	incbin 'source/gui/icons/pacman'
  8700                              <1> %include "source/gui/text.asm"
  8701                              <2> 	showstring:
  8702 00007046 A2[F5770000]        <2> 		mov [mouseselecton], al
  8703 0000704B 8025[F5770000]01    <2> 		and byte [mouseselecton], 1
  8704 00007052 B402                <2> 		mov ah, 2
  8705 00007054 E8110D0000          <2> 		call graphicsadd
  8706                              <2> 	showstring2:
  8707 00007059 30E4                <2> 		xor ah, ah
  8708 0000705B 8A06                <2> 		mov al, [esi]
  8709 0000705D 3C00                <2> 		cmp al, 0
  8710 0000705F 7421                <2> 		je doneshowstring
  8711 00007061 46                  <2> 		inc esi
  8712 00007062 3CFF                <2> 		cmp al, 255
  8713 00007064 74F3                <2> 		je showstring2
  8714 00007066 56                  <2> 		push esi
  8715 00007067 668B1D[8A700000]    <2> 		mov bx, [colorfont2]
  8716 0000706E E828000000          <2> 		call showfontvesa
  8717 00007073 3C0A                <2> 		cmp al, 10
  8718 00007075 7405                <2> 		je noproceedshst
  8719 00007077 6681C20800          <2> 		add dx, 8
  8720                              <2> 	noproceedshst:
  8721 0000707C 5E                  <2> 		pop esi
  8722 0000707D E9D7FFFFFF          <2> 		jmp showstring2
  8723                              <2> 	doneshowstring:
  8724 00007082 C605[F5770000]00    <2> 		mov byte [mouseselecton], 0
  8725 00007089 C3                  <2> 		ret
  8726                              <2> 
  8727 0000708A FFFF                <2> colorfont2 dw 0xFFFF
  8728 0000708C 00                  <2> colorcache db 0
  8729                              <2> 
  8730 0000708D 02                  <2> resolutionbytes db 2
  8731 0000708E 0000                <2> posxvesa dw 0
  8732 00007090 0000                <2> posyvesa dw 0
  8733 00007092 FFFF                <2> colorfont dw 0xFFFF
  8734                              <2> savefontvesa:		;;same rules as showfontvesa
  8735 00007094 C605[F4770000]01    <2> 	mov byte [savefonton], 1
  8736                              <2> showfontvesa:		;;position in (dx,cx), color in bx, char in al
  8737 0000709B 3CFF                <2> 	cmp al, 255
  8738 0000709D 7501                <2> 	jne nostopshowfont
  8739 0000709F C3                  <2> 	ret
  8740                              <2> nostopshowfont:
  8741 000070A0 66890D[90700000]    <2> 	mov [posyvesa], cx
  8742 000070A7 3C0A                <2> 	cmp al, 10
  8743 000070A9 0F8424000000        <2> 	je near goodvesafontx
  8744 000070AF 31C9                <2> 	xor ecx, ecx
  8745 000070B1 668B0D[23560000]    <2> 	mov cx, [resolutionx2]
  8746 000070B8 6639CA              <2> 	cmp dx, cx
  8747 000070BB 7616                <2> 	jbe goodvesafontx
  8748 000070BD 6631D2              <2> 	xor dx, dx
  8749 000070C0 668B0D[90700000]    <2> 	mov cx, [posyvesa]
  8750 000070C7 6681C11000          <2> 	add cx, 16
  8751 000070CC 66890D[90700000]    <2> 	mov [posyvesa], cx
  8752                              <2> goodvesafontx:
  8753 000070D3 668B0D[90700000]    <2> 	mov cx, [posyvesa]
  8754 000070DA 668915[8E700000]    <2> 	mov [posxvesa], dx
  8755 000070E1 8B3D[4B550000]      <2> 	mov edi, [physbaseptr]
  8756 000070E7 66891D[92700000]    <2> 	mov [colorfont], bx
  8757 000070EE 31DB                <2> 	xor ebx, ebx
  8758 000070F0 88C3                <2> 	mov bl, al
  8759 000070F2 31C0                <2> 	xor eax, eax
  8760 000070F4 88D8                <2> 	mov al, bl
  8761 000070F6 6689D3              <2> 	mov bx, dx
  8762 000070F9 89DA                <2> 	mov edx, ebx
  8763 000070FB 31DB                <2> 	xor ebx, ebx
  8764 000070FD 6681F90000          <2> 	cmp cx, 0
  8765 00007102 7414                <2> 	je vesaposloopdn
  8766 00007104 668B1D[23560000]    <2> 	mov bx, [resolutionx2]
  8767                              <2> vesaposloop:
  8768 0000710B 52                  <2> 	push edx
  8769 0000710C 50                  <2> 	push eax
  8770 0000710D 31C0                <2> 	xor eax, eax
  8771 0000710F 6689C8              <2> 	mov ax, cx
  8772 00007112 F7E3                <2> 	mul ebx
  8773 00007114 01C7                <2> 	add edi, eax
  8774 00007116 58                  <2> 	pop eax
  8775 00007117 5A                  <2> 	pop edx
  8776                              <2> vesaposloopdn:
  8777 00007118 01D7                <2> 	add edi, edx
  8778 0000711A BE[02870000]        <2> 	mov esi, fonts
  8779                              <2> findfontvesa:
  8780 0000711F 30E4                <2> 	xor ah, ah
  8781 00007121 3C0A                <2> 	cmp al, 10
  8782 00007123 0F84FE000000        <2> 	je near nwlinevesa
  8783 00007129 C1E004              <2> 	shl eax, 4
  8784 0000712C 01C6                <2> 	add esi, eax
  8785 0000712E C1E804              <2> 	shr eax, 4
  8786 00007131 81FE[02970000]      <2> 	cmp esi, fontend
  8787 00007137 0F83B9000000        <2> 	jae near donefontvesa
  8788 0000713D 4E                  <2> 	dec esi
  8789                              <2> foundfontvesa:
  8790 0000713E 46                  <2> 	inc esi
  8791 0000713F 803D[F4770000]01    <2> 	cmp byte [savefonton], 1
  8792 00007146 0F8404010000        <2> 	je near vesafontsaver
  8793 0000714C 30C9                <2> 	xor cl, cl
  8794 0000714E 8A06                <2> 	mov al, [esi]
  8795 00007150 668B15[23560000]    <2> 	mov dx, [resolutionx2]
  8796 00007157 662B15[8E700000]    <2> 	sub dx, [posxvesa]
  8797 0000715E 6681FA1000          <2> 	cmp dx, 16
  8798 00007163 7708                <2> 	ja paintfontvesa
  8799 00007165 D0EA                <2> 	shr dl, 1
  8800 00007167 8815[26720000]      <2> 	mov [charwidth], dl
  8801                              <2> paintfontvesa:
  8802 0000716D B201                <2> 	mov dl, 1
  8803 0000716F 20C2                <2> 	and dl, al
  8804 00007171 803D[F3770000]01    <2> 	cmp byte [showcursorfonton], 1
  8805 00007178 0F8435000000        <2> 	je near nodelpaintedfont
  8806 0000717E 803D[F3770000]02    <2> 	cmp byte [showcursorfonton], 2
  8807 00007185 0F8518000000        <2> 	jne near noswitchcursorfonton
  8808 0000718B 80FA00              <2> 	cmp dl, 0
  8809 0000718E 0F842E000000        <2> 	je near nopixelset
  8810 00007194 668B1D[92700000]    <2> 	mov bx, [colorfont]
  8811 0000719B 66891F              <2> 	mov [edi], bx
  8812 0000719E E91F000000          <2> 	jmp nopixelset
  8813                              <2> noswitchcursorfonton:
  8814 000071A3 3215[F5770000]      <2> 	xor dl, [mouseselecton]
  8815 000071A9 668B1D[B66A0000]    <2> 	mov bx, [background]
  8816 000071B0 66891F              <2> 	mov [edi], bx
  8817                              <2> nodelpaintedfont:
  8818 000071B3 80FA00              <2> 	cmp dl, 0
  8819 000071B6 740A                <2> 	je nopixelset
  8820 000071B8 668B15[92700000]    <2> 	mov dx, [colorfont]
  8821 000071BF 668917              <2> 	mov [edi], dx
  8822                              <2> nopixelset:
  8823 000071C2 81C702000000        <2> 	add edi, 2
  8824 000071C8 D0C0                <2> 	rol al, 1
  8825 000071CA FEC1                <2> 	inc cl
  8826 000071CC 3A0D[26720000]      <2> 	cmp cl, [charwidth]
  8827 000071D2 7299                <2> 	jb paintfontvesa
  8828 000071D4 FEC5                <2> 	inc ch
  8829 000071D6 31D2                <2> 	xor edx, edx
  8830 000071D8 668B15[23560000]    <2> 	mov dx, [resolutionx2]
  8831 000071DF 01D7                <2> 	add edi, edx
  8832 000071E1 31D2                <2> 	xor edx, edx
  8833 000071E3 8A15[26720000]      <2> 	mov dl, [charwidth]
  8834 000071E9 00D2                <2> 	add dl, dl
  8835 000071EB 29D7                <2> 	sub edi, edx
  8836 000071ED 80FD10              <2> 	cmp ch, 16
  8837 000071F0 0F8248FFFFFF        <2> 	jb foundfontvesa
  8838                              <2> donefontvesa:
  8839 000071F6 B208                <2> 	mov dl, 8
  8840 000071F8 8815[26720000]      <2> 	mov [charwidth], dl
  8841 000071FE 668B15[8E700000]    <2> 	mov dx, [posxvesa]
  8842 00007205 8A1D[26720000]      <2> 	mov bl, [charwidth]
  8843 0000720B 30FF                <2> 	xor bh, bh
  8844 0000720D 6601DA              <2> 	add dx, bx
  8845 00007210 668B1D[92700000]    <2> 	mov bx, [colorfont]
  8846 00007217 668B0D[90700000]    <2> 	mov cx, [posyvesa]
  8847 0000721E C605[F4770000]00    <2> 	mov byte [savefonton], 0
  8848 00007225 C3                  <2> 	ret
  8849 00007226 08                  <2> charwidth db 8
  8850                              <2> nwlinevesa:
  8851 00007227 668B15[8E700000]    <2> 	mov dx, [posxvesa]
  8852 0000722E 6631D2              <2> 	xor dx, dx
  8853 00007231 668915[8E700000]    <2> 	mov [posxvesa], dx
  8854 00007238 668B0D[90700000]    <2> 	mov cx, [posyvesa]
  8855 0000723F 6681C11000          <2> 	add cx, 16
  8856 00007244 66890D[90700000]    <2> 	mov [posyvesa], cx
  8857 0000724B E9A6FFFFFF          <2> 	jmp donefontvesa
  8858                              <2> vesafontsaver:
  8859 00007250 30C0                <2> 	xor al, al
  8860 00007252 30C9                <2> 	xor cl, cl
  8861                              <2> vesafontsaver2:
  8862 00007254 668B17              <2> 	mov dx, [edi]
  8863 00007257 663B15[92700000]    <2> 	cmp dx, [colorfont]
  8864 0000725E 742F                <2> 	je colorfontmatch
  8865                              <2> donecolormatch:
  8866 00007260 81C702000000        <2> 	add edi, 2
  8867 00007266 D0C0                <2> 	rol al, 1
  8868 00007268 FEC1                <2> 	inc cl
  8869 0000726A 80F908              <2> 	cmp cl, 8
  8870 0000726D 72E5                <2> 	jb vesafontsaver2
  8871 0000726F 8806                <2> 	mov [esi], al
  8872 00007271 46                  <2> 	inc esi
  8873 00007272 FEC5                <2> 	inc ch
  8874 00007274 31D2                <2> 	xor edx, edx
  8875 00007276 668B15[23560000]    <2> 	mov dx, [resolutionx2]
  8876 0000727D 01D7                <2> 	add edi, edx
  8877 0000727F 81EF10000000        <2> 	sub edi, 16
  8878 00007285 80FD10              <2> 	cmp ch, 16
  8879 00007288 72C6                <2> 	jb vesafontsaver
  8880 0000728A E967FFFFFF          <2> 	jmp donefontvesa
  8881                              <2> colorfontmatch:
  8882 0000728F 0401                <2> 	add al, 1
  8883 00007291 E9CAFFFFFF          <2> 	jmp donecolormatch
  8884                              <1> %include "source/gui/window.asm"
  8885 00007296 0000                <2> winvcopystx dw 0
  8886 00007298 0000                <2> winvcopysty dw 0
  8887 0000729A 0000                <2> winvcopydx dw 0
  8888 0000729C 0000                <2> winvcopycx dw 0
  8889 0000729E FFFF0000            <2> windowcolor dw 0xFFFF,0
  8890 000072A2 00000000            <2> windowbufloc: dd 0
  8891 000072A6 00000000            <2> windowvideobuf dd 0
  8892 000072AA 00000000            <2> windowvideobuf2 dd 0
  8893 000072AE 00000000            <2> windowinfobuf dd 0
  8894 000072B2 0000                <2> termcol dw 0
  8895 000072B4 00000000            <2> wincopyendpos dd 0
  8896                              <2> 
  8897                              <2> 	showwindow:	;windowstuff in esi, position in (dx, cx), nothing in ax, code in ebx
  8898 000072B8 C605[8F220000]01    <2> 		mov byte [termguion], 1
  8899 000072BF 6681C11000          <2> 		add cx, 16
  8900 000072C4 668915[96720000]    <2> 		mov [winvcopystx], dx
  8901 000072CB 66890D[98720000]    <2> 		mov [winvcopysty], cx
  8902 000072D2 8935[AE720000]      <2> 		mov [windowinfobuf], esi
  8903 000072D8 668B16              <2> 		mov dx, [esi]
  8904 000072DB 668B4E02            <2> 		mov cx, [esi + 2]
  8905 000072DF 31C0                <2> 		xor eax, eax
  8906 000072E1 31DB                <2> 		xor ebx, ebx
  8907 000072E3 6689D0              <2> 		mov ax, dx
  8908 000072E6 6689CB              <2> 		mov bx, cx
  8909 000072E9 66C1E803            <2> 		shr ax, 3
  8910 000072ED 66C1EB04            <2> 		shr bx, 4
  8911 000072F1 66A3[B2720000]      <2> 		mov [termcol], ax
  8912 000072F7 A2[5C240000]        <2> 		mov [charxy], al
  8913 000072FC 881D[5D240000]      <2> 		mov [charxy + 1], bl
  8914 00007302 8B7E04              <2> 		mov edi, [esi + 4]
  8915 00007305 893D[9E720000]      <2> 		mov [windowcolor], edi
  8916 0000730B 8B7E0C              <2> 		mov edi, [esi + 12]
  8917 0000730E 893D[AA720000]      <2> 		mov [windowvideobuf2], edi
  8918 00007314 8B7E08              <2> 		mov edi, [esi + 8]
  8919 00007317 893D[A6720000]      <2> 		mov [windowvideobuf], edi
  8920 0000731D 81FB00000000        <2> 		cmp ebx, 0
  8921 00007323 0F84A9040000        <2> 		je near donewincopynow	;AAAAAAAAA!!!!!
  8922                              <2> 	findendposwin:
  8923 00007329 01C7                <2> 		add edi, eax
  8924 0000732B 01C7                <2> 		add edi, eax
  8925 0000732D 4B                  <2> 		dec ebx
  8926 0000732E 81FB00000000        <2> 		cmp ebx, 0
  8927 00007334 77F3                <2> 		ja findendposwin
  8928 00007336 893D[B4720000]      <2> 		mov [wincopyendpos], edi
  8929 0000733C 31FF                <2> 		xor edi, edi
  8930 0000733E 6631C0              <2> 		xor ax, ax
  8931 00007341 6631DB              <2> 		xor bx, bx
  8932 00007344 6601D2              <2> 		add dx, dx
  8933 00007347 668915[9A720000]    <2> 		mov [winvcopydx], dx
  8934 0000734E 66890D[9C720000]    <2> 		mov [winvcopycx], cx
  8935 00007355 668B0D[98720000]    <2> 		mov cx, [winvcopysty]
  8936 0000735C 6681E91000          <2> 		sub cx, 16
  8937 00007361 668B15[96720000]    <2> 		mov dx, [winvcopystx]
  8938 00007368 C605[90220000]00    <2> 		mov byte [termcopyon], 0
  8939 0000736F B403                <2> 		mov ah, 3
  8940 00007371 E8F4090000          <2> 		call graphicsadd
  8941                              <2> 	showwindow2:
  8942 00007376 6681C11000          <2> 		add cx, 16
  8943 0000737B 668915[96720000]    <2> 		mov [winvcopystx], dx
  8944 00007382 66890D[98720000]    <2> 		mov [winvcopysty], cx
  8945 00007389 668B16              <2> 		mov dx, [esi]
  8946 0000738C 668B4E02            <2> 		mov cx, [esi + 2]
  8947 00007390 6601D2              <2> 		add dx, dx
  8948 00007393 668915[9A720000]    <2> 		mov [winvcopydx], dx
  8949 0000739A 66890D[9C720000]    <2> 		mov [winvcopycx], cx
  8950 000073A1 8B3D[A2720000]      <2> 		mov edi, [windowbufloc]
  8951 000073A7 31D2                <2> 		xor edx, edx
  8952 000073A9 668B15[23560000]    <2> 		mov dx, [resolutionx2]
  8953 000073B0 C1E204              <2> 		shl edx, 4
  8954 000073B3 29D7                <2> 		sub edi, edx
  8955 000073B5 803D[90220000]00    <2> 		cmp byte [termcopyon], 0
  8956 000073BC 7538                <2> 		jne nocleartitlebarpos
  8957 000073BE 8B3D[4B550000]      <2> 		mov edi, [physbaseptr]
  8958 000073C4 31D2                <2> 		xor edx, edx
  8959 000073C6 668B15[96720000]    <2> 		mov dx, [winvcopystx]
  8960 000073CD 01D7                <2> 		add edi, edx
  8961 000073CF 668B0D[98720000]    <2> 		mov cx, [winvcopysty]
  8962 000073D6 6681E91000          <2> 		sub cx, 16
  8963 000073DB 6681F90000          <2> 		cmp cx, 0
  8964 000073E0 7414                <2> 		je nocleartitlebarpos
  8965                              <2> 	cleartitlebarpos:
  8966 000073E2 31D2                <2> 		xor edx, edx
  8967 000073E4 668B15[23560000]    <2> 		mov dx, [resolutionx2]
  8968 000073EB 01D7                <2> 		add edi, edx
  8969 000073ED 6649                <2> 		dec cx
  8970 000073EF 6681F90000          <2> 		cmp cx, 0
  8971 000073F4 75EC                <2> 		jne cleartitlebarpos
  8972                              <2> 	nocleartitlebarpos:
  8973 000073F6 66B91000            <2> 		mov cx, 16
  8974 000073FA 668B15[9A720000]    <2> 		mov dx, [winvcopydx]
  8975 00007401 6681F90000          <2> 		cmp cx, 0
  8976 00007406 0F8448000000        <2> 		je near canceltitlebarput
  8977 0000740C 6681FA0000          <2> 		cmp dx, 0
  8978 00007411 0F843D000000        <2> 		je near canceltitlebarput
  8979                              <2> 	titlebarput:
  8980 00007417 66A1[9E720000]      <2> 		mov ax, [windowcolor]
  8981 0000741D 668907              <2> 		mov [edi], ax
  8982 00007420 6681EA0200          <2> 		sub dx, 2
  8983 00007425 81C702000000        <2> 		add edi, 2
  8984 0000742B 6681FA0000          <2> 		cmp dx, 0
  8985 00007430 75E5                <2> 		jne titlebarput
  8986 00007432 31D2                <2> 		xor edx, edx
  8987 00007434 668B15[23560000]    <2> 		mov dx, [resolutionx2]
  8988 0000743B 6649                <2> 		dec cx
  8989 0000743D 662B15[9A720000]    <2> 		sub dx, [winvcopydx]
  8990 00007444 01D7                <2> 		add edi, edx
  8991 00007446 668B15[9A720000]    <2> 		mov dx, [winvcopydx]
  8992 0000744D 6681F90000          <2> 		cmp cx, 0
  8993 00007452 75C3                <2> 		jne titlebarput
  8994                              <2> 	canceltitlebarput:
  8995 00007454 893D[A2720000]      <2> 		mov [windowbufloc], edi
  8996 0000745A 803D[90220000]02    <2> 		cmp byte [termcopyon], 2
  8997 00007461 0F8465000000        <2> 		je near winvcpst
  8998 00007467 6631C0              <2> 		xor ax, ax
  8999 0000746A 81C610000000        <2> 		add esi, 16
  9000 00007470 668B15[96720000]    <2> 		mov dx, [winvcopystx]
  9001 00007477 668B0D[98720000]    <2> 		mov cx, [winvcopysty]
  9002 0000747E 6681E91000          <2> 		sub cx, 16
  9003 00007483 668B1D[9E720000]    <2> 		mov bx, [windowcolor]
  9004 0000748A C605[F5770000]01    <2> 		mov byte [mouseselecton], 1
  9005 00007491 E8C3FBFFFF          <2> 		call showstring2
  9006 00007496 B058                <2> 		mov al, "X"
  9007 00007498 30E4                <2> 		xor ah, ah
  9008 0000749A 668B1D[9E720000]    <2> 		mov bx, [windowcolor]
  9009 000074A1 668B15[96720000]    <2> 		mov dx, [winvcopystx]
  9010 000074A8 668B0D[98720000]    <2> 		mov cx, [winvcopysty]
  9011 000074AF 6681E91000          <2> 		sub cx, 16
  9012 000074B4 6681EA1400          <2> 		sub dx, 20
  9013 000074B9 660315[9A720000]    <2> 		add dx, [winvcopydx]
  9014 000074C0 C605[F5770000]01    <2> 		mov byte [mouseselecton], 1
  9015 000074C7 E8CFFBFFFF          <2> 		call showfontvesa
  9016                              <2> 	winvcpst:
  9017 000074CC 803D[517D0000]01    <2> 		cmp byte [windrag], 1
  9018 000074D3 0F8408030000        <2> 		je near forgetresetstuff
  9019 000074D9 8B3D[A2720000]      <2> 		mov edi, [windowbufloc]
  9020 000074DF E991000000          <2> 		jmp windowvideocopyset
  9021                              <2> 
  9022                              <2> 	windowvideocopy:
  9023 000074E4 8B35[AE720000]      <2> 		mov esi, [windowinfobuf]
  9024 000074EA 668B16              <2> 		mov dx, [esi]
  9025 000074ED 668B4E02            <2> 		mov cx, [esi + 2]
  9026 000074F1 8B7E04              <2> 		mov edi, [esi + 4]
  9027 000074F4 893D[9E720000]      <2> 		mov [windowcolor], edi
  9028 000074FA 8B7E08              <2> 		mov edi, [esi + 8]
  9029 000074FD 8B5E0C              <2> 		mov ebx, [esi + 12]
  9030 00007500 893D[A6720000]      <2> 		mov [windowvideobuf], edi
  9031 00007506 891D[AA720000]      <2> 		mov [windowvideobuf2], ebx
  9032 0000750C 31C0                <2> 		xor eax, eax
  9033 0000750E 31DB                <2> 		xor ebx, ebx
  9034 00007510 6689D0              <2> 		mov ax, dx
  9035 00007513 6689CB              <2> 		mov bx, cx
  9036 00007516 66C1E803            <2> 		shr ax, 3
  9037 0000751A 66C1EB04            <2> 		shr bx, 4
  9038 0000751E 66A3[B2720000]      <2> 		mov [termcol], ax
  9039 00007524 A2[5C240000]        <2> 		mov [charxy], al
  9040 00007529 881D[5D240000]      <2> 		mov [charxy + 1], bl
  9041 0000752F 8B3D[A2720000]      <2> 		mov edi, [windowbufloc]
  9042 00007535 3B3D[4B550000]      <2> 		cmp edi, [physbaseptr]
  9043 0000753B 0F8334000000        <2> 		jae near windowvideocopyset
  9044 00007541 31C9                <2> 		xor ecx, ecx
  9045 00007543 31D2                <2> 		xor edx, edx
  9046 00007545 668B15[96720000]    <2> 		mov dx, [winvcopystx]
  9047 0000754C 668B0D[98720000]    <2> 		mov cx, [winvcopysty]
  9048 00007553 8B3D[4B550000]      <2> 		mov edi, [physbaseptr]
  9049 00007559 01D7                <2> 		add edi, edx
  9050 0000755B 81F900000000        <2> 		cmp ecx, 0
  9051 00007561 7412                <2> 		je windowvideocopyset
  9052                              <2> 	yrescopylp:
  9053 00007563 31C0                <2> 		xor eax, eax
  9054 00007565 66A1[23560000]      <2> 		mov ax, [resolutionx2]
  9055 0000756B F7E1                <2> 		mul ecx
  9056 0000756D 01C7                <2> 		add edi, eax
  9057 0000756F 893D[A2720000]      <2> 		mov [windowbufloc], edi
  9058                              <2> 	windowvideocopyset:
  9059 00007575 6631C9              <2> 		xor cx, cx
  9060 00007578 6649                <2> 		dec cx
  9061 0000757A 66890D[E9770000]    <2> 		mov [charposline], cx
  9062 00007581 89FE                <2> 		mov esi, edi
  9063 00007583 81EE10000000        <2> 		sub esi, 16
  9064 00007589 31D2                <2> 		xor edx, edx
  9065 0000758B 668B15[23560000]    <2> 		mov dx, [resolutionx2]
  9066 00007592 C1E204              <2> 		shl edx, 4
  9067 00007595 01D6                <2> 		add esi, edx
  9068 00007597 8B3D[A6720000]      <2> 		mov edi, [windowvideobuf]
  9069 0000759D 81EF02000000        <2> 		sub edi, 2
  9070 000075A3 893D[EB770000]      <2> 		mov [charposvbuf], edi
  9071 000075A9 E919010000          <2> 		jmp nextcharwin
  9072                              <2> 	win.write:	;adjusted this to use alpha
  9073                              <2> 				;5R, 6G, 5B
  9074                              <2> %ifdef gui.alphablending
  9075 000075AE 56                  <2> 		push esi
  9076 000075AF 6653                <2> 		push bx
  9077 000075B1 6651                <2> 		push cx
  9078 000075B3 6652                <2> 		push dx
  9079                              <2> %ifdef gui.background
  9080 000075B5 89FE                <2> 		mov esi, edi
  9081 000075B7 2B35[4B550000]      <2> 		sub esi, [physbaseptr]
  9082 000075BD 0335[886A0000]      <2> 		add esi, [backgroundimage]
  9083 000075C3 813D[886A0000]0000- <2> 		cmp dword [backgroundimage], 0
  9084 000075CB 0000                <2>
  9085 000075CD 7505                <2> 		jne .red
  9086                              <2> %endif
  9087 000075CF BE[B66A0000]        <2> 		mov esi, background
  9088                              <2> 	.red:
  9089 000075D4 668B0E              <2> 		mov cx, [esi]
  9090 000075D7 66C1E90B            <2> 		shr cx, 11
  9091 000075DB 6689C3              <2> 		mov bx, ax
  9092 000075DE 66C1EB0B            <2> 		shr bx, 11
  9093 000075E2 6601D9              <2> 		add cx, bx
  9094 000075E5 6601D9              <2> 		add cx, bx
  9095 000075E8 6601D9              <2> 		add cx, bx
  9096 000075EB 66C1E902            <2> 		shr cx, 2
  9097 000075EF 66C1E10B            <2> 		shl cx, 11
  9098 000075F3 6689CA              <2> 		mov dx, cx
  9099                              <2> 	.green:
  9100 000075F6 668B0E              <2> 		mov cx, [esi]
  9101 000075F9 66C1E105            <2> 		shl cx, 5
  9102 000075FD 66C1E90A            <2> 		shr cx, 10
  9103 00007601 6689C3              <2> 		mov bx, ax
  9104 00007604 66C1E305            <2> 		shl bx, 5
  9105 00007608 66C1EB0A            <2> 		shr bx, 10
  9106 0000760C 6601D9              <2> 		add cx, bx
  9107 0000760F 6601D9              <2> 		add cx, bx
  9108 00007612 6601D9              <2> 		add cx, bx
  9109 00007615 66C1E902            <2> 		shr cx, 2
  9110 00007619 66C1E105            <2> 		shl cx, 5
  9111 0000761D 6601CA              <2> 		add dx, cx
  9112                              <2> 	.blue:
  9113 00007620 668B0E              <2> 		mov cx, [esi]
  9114 00007623 66C1E10B            <2> 		shl cx, 11
  9115 00007627 66C1E90B            <2> 		shr cx, 11
  9116 0000762B 6689C3              <2> 		mov bx, ax
  9117 0000762E 66C1E30B            <2> 		shl bx, 11
  9118 00007632 66C1EB0B            <2> 		shr bx, 11
  9119 00007636 6601D9              <2> 		add cx, bx
  9120 00007639 6601D9              <2> 		add cx, bx
  9121 0000763C 6601D9              <2> 		add cx, bx
  9122 0000763F 66C1E902            <2> 		shr cx, 2
  9123 00007643 6601CA              <2> 		add dx, cx
  9124 00007646 668917              <2> 		mov [edi], dx
  9125 00007649 665A                <2> 		pop dx
  9126 0000764B 6659                <2> 		pop cx
  9127 0000764D 665B                <2> 		pop bx
  9128 0000764F 5E                  <2> 		pop esi
  9129                              <2> %else
  9130                              <2> 		mov [edi], ax
  9131                              <2> %endif
  9132 00007650 C3                  <2> 		ret
  9133                              <2> 	copywindow:
  9134 00007651 B201                <2> 		mov dl, 1
  9135 00007653 D0C6                <2> 		rol dh, 1
  9136 00007655 20F2                <2> 		and dl, dh
  9137 00007657 803D[8C700000]10    <2> 		cmp byte [colorcache], 0x10
  9138 0000765E 7320                <2> 		jae switchwincolors
  9139 00007660 66A1[A0720000]      <2> 		mov ax, [windowcolor + 2]
  9140 00007666 E843FFFFFF          <2> 		call win.write
  9141 0000766B 80FA00              <2> 		cmp dl, 0
  9142 0000766E 742B                <2> 		je nowritewin
  9143 00007670 66A1[9E720000]      <2> 		mov ax, [windowcolor]
  9144 00007676 E833FFFFFF          <2> 		call win.write
  9145 0000767B E91B000000          <2> 		jmp nowritewin
  9146                              <2> 	switchwincolors:
  9147 00007680 66A1[9E720000]      <2> 		mov ax, [windowcolor]
  9148 00007686 E823FFFFFF          <2> 		call win.write
  9149 0000768B 80FA00              <2> 		cmp dl, 0
  9150 0000768E 740B                <2> 		je nowritewin
  9151 00007690 66A1[A0720000]      <2> 		mov ax, [windowcolor + 2]
  9152 00007696 E813FFFFFF          <2> 		call win.write
  9153                              <2> 	nowritewin:
  9154 0000769B 81C702000000        <2> 		add edi, 2
  9155 000076A1 FEC1                <2> 		inc cl
  9156 000076A3 80F908              <2> 		cmp cl, 8
  9157 000076A6 75A9                <2> 		jne copywindow
  9158 000076A8 6643                <2> 		inc bx
  9159 000076AA 30C9                <2> 		xor cl, cl
  9160 000076AC 31D2                <2> 		xor edx, edx
  9161 000076AE 668B15[23560000]    <2> 		mov dx, [resolutionx2]
  9162 000076B5 01D6                <2> 		add esi, edx
  9163 000076B7 89F7                <2> 		mov edi, esi
  9164 000076B9 678AB7[0287]        <2> 		mov dh, [fonts + bx]
  9165 000076BE D0CE                <2> 		ror dh, 1
  9166 000076C0 FEC5                <2> 		inc ch
  9167 000076C2 80FD10              <2> 		cmp ch, 16
  9168 000076C5 758A                <2> 		jne copywindow
  9169                              <2> 	nextcharwin:
  9170 000076C7 6631C9              <2> 		xor cx, cx
  9171 000076CA 8B3D[EB770000]      <2> 		mov edi, [charposvbuf]
  9172 000076D0 81C702000000        <2> 		add edi, 2
  9173 000076D6 3B3D[B4720000]      <2> 		cmp edi, [wincopyendpos]
  9174 000076DC 0F83F0000000        <2> 		jae near donewincopynow
  9175 000076E2 8A7F01              <2> 		mov bh, [edi + 1]
  9176 000076E5 80FF00              <2> 		cmp bh, 0
  9177 000076E8 7505                <2> 		jne nofixcolorwin
  9178 000076EA B707                <2> 		mov bh, 7
  9179 000076EC 887F01              <2> 		mov [edi + 1], bh
  9180                              <2> 	nofixcolorwin:
  9181 000076EF 883D[8C700000]      <2> 		mov [colorcache], bh
  9182 000076F5 8A1F                <2> 		mov bl, [edi]
  9183 000076F7 893D[EB770000]      <2> 		mov [charposvbuf], edi
  9184 000076FD 813D[AA720000]0000- <2> 		cmp dword [windowvideobuf2], 0
  9185 00007705 0000                <2>
  9186 00007707 7459                <2> 		je noskipcharcopy
  9187 00007709 2B3D[A6720000]      <2> 		sub edi, [windowvideobuf]
  9188 0000770F 033D[AA720000]      <2> 		add edi, [windowvideobuf2]
  9189 00007715 8A6701              <2> 		mov ah, [edi + 1]
  9190 00007718 8A07                <2> 		mov al, [edi]
  9191 0000771A 6639D8              <2> 		cmp ax, bx
  9192 0000771D 7543                <2> 		jne noskipcharcopy
  9193                              <2> 	skipcharcopy:
  9194 0000771F 81C610000000        <2> 		add esi, 16
  9195 00007725 668B0D[E9770000]    <2> 		mov cx, [charposline]
  9196 0000772C 6641                <2> 		inc cx
  9197 0000772E 66890D[E9770000]    <2> 		mov [charposline], cx
  9198 00007735 663B0D[B2720000]    <2> 		cmp cx, [termcol]
  9199 0000773C 7289                <2> 		jb nextcharwin
  9200 0000773E 6631C9              <2> 		xor cx, cx
  9201 00007741 66890D[E9770000]    <2> 		mov [charposline], cx
  9202 00007748 31D2                <2> 		xor edx, edx
  9203 0000774A 668B15[23560000]    <2> 		mov dx, [resolutionx2]
  9204 00007751 C1E204              <2> 		shl edx, 4
  9205 00007754 662B15[9A720000]    <2> 		sub dx, [winvcopydx]
  9206 0000775B 01D6                <2> 		add esi, edx
  9207 0000775D E965FFFFFF          <2> 		jmp nextcharwin
  9208                              <2> 	noskipcharcopy:
  9209 00007762 881F                <2> 		mov [edi], bl
  9210 00007764 887F01              <2> 		mov [edi + 1], bh
  9211 00007767 8B3D[EB770000]      <2> 		mov edi, [charposvbuf]
  9212 0000776D 30FF                <2> 		xor bh, bh
  9213 0000776F 66C1E304            <2> 		shl bx, 4
  9214 00007773 31D2                <2> 		xor edx, edx
  9215 00007775 668B15[23560000]    <2> 		mov dx, [resolutionx2]
  9216 0000777C C1E204              <2> 		shl edx, 4
  9217 0000777F 29D6                <2> 		sub esi, edx
  9218 00007781 81C610000000        <2> 		add esi, 16
  9219 00007787 89F7                <2> 		mov edi, esi
  9220 00007789 668B0D[E9770000]    <2> 		mov cx, [charposline]
  9221 00007790 6641                <2> 		inc cx
  9222 00007792 663B0D[B2720000]    <2> 		cmp cx, [termcol]
  9223 00007799 7316                <2> 		jae fixwindowcopy
  9224 0000779B 66890D[E9770000]    <2> 		mov [charposline], cx
  9225 000077A2 6631C9              <2> 		xor cx, cx
  9226 000077A5 678AB7[0287]        <2> 		mov dh, [fonts + bx]
  9227 000077AA D0CE                <2> 		ror dh, 1
  9228 000077AC E9A0FEFFFF          <2> 		jmp copywindow
  9229                              <2> fixwindowcopy:
  9230 000077B1 6631C9              <2> 		xor cx, cx
  9231 000077B4 66890D[E9770000]    <2> 		mov [charposline], cx
  9232 000077BB 662B15[9A720000]    <2> 		sub dx, [winvcopydx]
  9233 000077C2 01D6                <2> 		add esi, edx
  9234 000077C4 89F7                <2> 		mov edi, esi
  9235 000077C6 678AB7[0287]        <2> 		mov dh, [fonts + bx]
  9236 000077CB D0CE                <2> 		ror dh, 1
  9237 000077CD E97FFEFFFF          <2> 		jmp copywindow
  9238                              <2> donewincopynow:
  9239 000077D2 803D[90220000]01    <2> 		cmp byte [termcopyon], 1
  9240 000077D9 7506                <2> 		jne forgetresetstuff
  9241 000077DB E8ECAEFFFF          <2> 		call switchtermcursor
  9242 000077E0 61                  <2> 		popa
  9243                              <2> forgetresetstuff:
  9244 000077E1 C605[90220000]00    <2> 		mov byte [termcopyon], 0
  9245 000077E8 C3                  <2> 		ret
  9246                              <2> 		
  9247 000077E9 0000                <2> charposline dw 0
  9248 000077EB 00000000            <2> charposvbuf dw 0,0
  9249                              <1> 				
  9250 000077EF 00                  <1> copygui db 0
  9251 000077F0 00                  <1> graphicsset db 0
  9252 000077F1 0000                <1> graphicspos db 0,0
  9253 000077F3 00                  <1> showcursorfonton db 0
  9254 000077F4 00                  <1> savefonton db 0
  9255 000077F5 00                  <1> mouseselecton db 0
  9256                              <1> 
  9257 000077F6 00                  <1> pbutton db 0
  9258 000077F7 00                  <1> pLBUTTON db 0
  9259 000077F8 00                  <1> pRBUTTON db 0
  9260 000077F9 00000000            <1> dragging dw 0,0
  9261 000077FD 0000000000000000    <1> lastpos dw 0,0,0,0
  9262 00007805 00000000            <1> colorbuf dw 0,0
  9263                              <1> 	
  9264                              <1> 	clickicon:
  9265 00007809 B001                <1> 		mov al, 1
  9266 0000780B A2[F6770000]        <1> 		mov [pbutton], al
  9267 00007810 A0[F7770000]        <1> 		mov al, [pLBUTTON]
  9268 00007815 2205[27590000]      <1> 		and al, [LBUTTON]
  9269 0000781B 8A25[F8770000]      <1> 		mov ah, [pRBUTTON]
  9270 00007821 2225[28590000]      <1> 		and ah, [RBUTTON]
  9271 00007827 08E0                <1> 		or al, ah
  9272 00007829 3C00                <1> 		cmp al, 0
  9273 0000782B 741B                <1> 		je nodragclick
  9274 0000782D 813D[F9770000]0100- <1> 		cmp dword [dragging], 1
  9275 00007835 0000                <1>
  9276 00007837 732D                <1> 		jae dragclick
  9277 00007839 C705[F9770000]0100- <1> 		mov dword [dragging], 1
  9278 00007841 0000                <1>
  9279 00007843 E91E000000          <1> 		jmp dragclick
  9280                              <1> 	nodragclick:
  9281 00007848 C705[F9770000]0000- <1> 		mov dword [dragging], 0
  9282 00007850 0000                <1>
  9283 00007852 A0[27590000]        <1> 		mov al, [LBUTTON]
  9284 00007857 A2[F7770000]        <1> 		mov [pLBUTTON], al
  9285 0000785C A0[28590000]        <1> 		mov al, [RBUTTON]
  9286 00007861 A2[F8770000]        <1> 		mov [pRBUTTON], al
  9287                              <1> 	dragclick:
  9288 00007866 6631C0              <1> 		xor ax, ax
  9289 00007869 BE[93C90000]        <1> 		mov esi, graphicstable
  9290 0000786E C705[58800000]0000- <1> 		mov dword [codepointer], 0
  9291 00007876 0000                <1>
  9292                              <1> 	clicon2:
  9293 00007878 31D2                <1> 		xor edx, edx
  9294 0000787A 31C9                <1> 		xor ecx, ecx
  9295 0000787C 66813E0100          <1> 		cmp word [esi], 1
  9296 00007881 0F841B000000        <1> 		je near iconselect
  9297 00007887 66813E0200          <1> 		cmp word [esi], 2
  9298 0000788C 0F8472010000        <1> 		je near textselected
  9299 00007892 66813E0300          <1> 		cmp word [esi], 3
  9300 00007897 0F84CA020000        <1> 		je near windowselect
  9301 0000789D E90B040000          <1> 		jmp nexticonsel
  9302                              <1> 	iconselect:
  9303 000078A2 668B5606            <1> 		mov dx, [esi + 6]
  9304 000078A6 6689D0              <1> 		mov ax, dx
  9305 000078A9 668B4E08            <1> 		mov cx, [esi + 8]
  9306 000078AD 6689CB              <1> 		mov bx, cx
  9307 000078B0 6681C32000          <1> 		add bx, 32
  9308 000078B5 6601D0              <1> 		add ax, dx
  9309 000078B8 813D[F9770000]0100- <1> 		cmp dword [dragging], 1
  9310 000078C0 0000                <1>
  9311 000078C2 746F                <1> 		je dragicon
  9312 000078C4 813D[F9770000]0000- <1> 		cmp dword [dragging], 0
  9313 000078CC 0000                <1>
  9314 000078CE 7411                <1> 		je nodragiconcheck
  9315 000078D0 3935[F9770000]      <1> 		cmp dword [dragging], esi
  9316 000078D6 0F85D1030000        <1> 		jne near nexticonsel
  9317 000078DC E952000000          <1> 		jmp dragicon
  9318                              <1> 	nodragiconcheck:
  9319 000078E1 663905[16580000]    <1> 		cmp [mousecursorposition], ax
  9320 000078E8 0F82BF030000        <1> 		jb near nexticonsel
  9321 000078EE 66054000            <1> 		add ax, 64
  9322 000078F2 663905[16580000]    <1> 		cmp [mousecursorposition], ax
  9323 000078F9 0F87AE030000        <1> 		ja near nexticonsel
  9324 000078FF 6629D0              <1> 		sub ax, dx
  9325 00007902 66390D[18580000]    <1> 		cmp [mousecursorposition + 2], cx
  9326 00007909 0F829E030000        <1> 		jb near nexticonsel
  9327 0000790F 66391D[18580000]    <1> 		cmp [mousecursorposition + 2], bx
  9328 00007916 0F8791030000        <1> 		ja near nexticonsel
  9329 0000791C 668B460A            <1> 		mov ax, [esi + 10]
  9330 00007920 66250100            <1> 		and ax, 1
  9331 00007924 663D0100            <1> 		cmp ax, 1
  9332 00007928 0F84B6000000        <1> 		je near unselecticon
  9333 0000792E E98D000000          <1> 		jmp nodragicon
  9334                              <1> 	dragicon:
  9335 00007933 663905[12580000]    <1> 		cmp [lastmouseposition], ax
  9336 0000793A 0F826D030000        <1> 		jb near nexticonsel
  9337 00007940 66054000            <1> 		add ax, 64
  9338 00007944 663905[12580000]    <1> 		cmp [lastmouseposition], ax
  9339 0000794B 0F875C030000        <1> 		ja near nexticonsel
  9340 00007951 6629D0              <1> 		sub ax, dx
  9341 00007954 66390D[14580000]    <1> 		cmp [lastmouseposition + 2], cx
  9342 0000795B 0F824C030000        <1> 		jb near nexticonsel
  9343 00007961 66391D[14580000]    <1> 		cmp [lastmouseposition + 2], bx
  9344 00007968 0F873F030000        <1> 		ja near nexticonsel
  9345 0000796E 668B460A            <1> 		mov ax, [esi + 10]
  9346 00007972 2410                <1> 		and al, 00010000b
  9347 00007974 3C10                <1> 		cmp al, 00010000b
  9348 00007976 7448                <1> 		je nodragicon
  9349 00007978 8935[F9770000]      <1> 		mov [dragging], esi
  9350 0000797E 66D1E2              <1> 		shl dx, 1
  9351 00007981 662B15[12580000]    <1> 		sub dx, [lastmouseposition]
  9352 00007988 660315[16580000]    <1> 		add dx, [mousecursorposition]
  9353 0000798F 66D1EA              <1> 		shr dx, 1
  9354 00007992 66030D[18580000]    <1> 		add cx, [mousecursorposition + 2]
  9355 00007999 662B0D[14580000]    <1> 		sub cx, [lastmouseposition + 2]
  9356 000079A0 663B15[23560000]    <1> 		cmp dx, [resolutionx2]
  9357 000079A7 7607                <1> 		jbe chkyresdrgicn
  9358 000079A9 668B15[16580000]    <1> 		mov dx, [mousecursorposition]
  9359                              <1> 	chkyresdrgicn:
  9360 000079B0 663B0D[37550000]    <1> 		cmp cx, [resolutiony]
  9361 000079B7 7607                <1> 		jbe nodragicon
  9362 000079B9 668B0D[18580000]    <1> 		mov cx, [mousecursorposition + 2]
  9363                              <1> 	nodragicon:
  9364 000079C0 66814E0A0100        <1> 		or word [esi + 10], 1
  9365 000079C6 8B5E0C              <1> 		mov ebx, [esi + 12]
  9366 000079C9 668B460A            <1> 		mov ax, [esi + 10]
  9367 000079CD 8B7602              <1> 		mov esi, [esi + 2]
  9368 000079D0 C705[58800000]0000- <1> 		mov dword [codepointer], 0
  9369 000079D8 0000                <1>
  9370 000079DA E855EEFFFF          <1> 		call showicon
  9371 000079DF E9E2020000          <1> 		jmp doneiconsel
  9372                              <1> 	unselecticon:
  9373 000079E4 6681660AFEFF        <1> 		and word [esi + 10], 0xFFFE
  9374 000079EA 8B5E0C              <1> 		mov ebx, [esi + 12]
  9375 000079ED 668B460A            <1> 		mov ax, [esi + 10]
  9376 000079F1 8B7602              <1> 		mov esi, [esi + 2]
  9377 000079F4 891D[58800000]      <1> 		mov [codepointer], ebx
  9378 000079FA E835EEFFFF          <1> 		call showicon
  9379 000079FF E9C2020000          <1> 		jmp doneiconsel
  9380                              <1> 	textselected:
  9381 00007A04 8B5E02              <1> 		mov ebx, [esi + 2]
  9382 00007A07 668B5606            <1> 		mov dx, [esi + 6]
  9383 00007A0B 6689D0              <1> 		mov ax, dx
  9384 00007A0E 668B4E08            <1> 		mov cx, [esi + 8]
  9385                              <1> 	lengthtesttext:
  9386 00007A12 803B00              <1> 		cmp byte [ebx], 0
  9387 00007A15 740A                <1> 		je donetesttextlength
  9388 00007A17 43                  <1> 		inc ebx
  9389 00007A18 66051000            <1> 		add ax, 16
  9390 00007A1C E9F1FFFFFF          <1> 		jmp lengthtesttext
  9391                              <1> 	donetesttextlength:
  9392 00007A21 6689CB              <1> 		mov bx, cx
  9393 00007A24 6681C30F00          <1> 		add bx, 15
  9394 00007A29 813D[F9770000]0100- <1> 		cmp dword [dragging], 1
  9395 00007A31 0000                <1>
  9396 00007A33 7468                <1> 		je dragtext
  9397 00007A35 813D[F9770000]0000- <1> 		cmp dword [dragging], 0
  9398 00007A3D 0000                <1>
  9399 00007A3F 7411                <1> 		je nodragtextcheck
  9400 00007A41 3935[F9770000]      <1> 		cmp dword [dragging], esi
  9401 00007A47 0F8560020000        <1> 		jne near nexticonsel
  9402 00007A4D E94B000000          <1> 		jmp dragtext
  9403                              <1> 	nodragtextcheck:
  9404 00007A52 663915[16580000]    <1> 		cmp [mousecursorposition], dx
  9405 00007A59 0F824E020000        <1> 		jb near nexticonsel
  9406 00007A5F 663905[16580000]    <1> 		cmp [mousecursorposition], ax
  9407 00007A66 0F8741020000        <1> 		ja near nexticonsel
  9408 00007A6C 66390D[18580000]    <1> 		cmp [mousecursorposition + 2], cx
  9409 00007A73 0F8234020000        <1> 		jb near nexticonsel
  9410 00007A79 66391D[18580000]    <1> 		cmp [mousecursorposition + 2], bx
  9411 00007A80 0F8727020000        <1> 		ja near nexticonsel
  9412 00007A86 668B460A            <1> 		mov ax, [esi + 10]
  9413 00007A8A 66250100            <1> 		and ax, 1
  9414 00007A8E 663D0100            <1> 		cmp ax, 1
  9415 00007A92 0F84AB000000        <1> 		je near unselecttext
  9416 00007A98 E986000000          <1> 		jmp nodragtext
  9417                              <1> 	dragtext:
  9418 00007A9D 663915[12580000]    <1> 		cmp [lastmouseposition], dx
  9419 00007AA4 0F8203020000        <1> 		jb near nexticonsel
  9420 00007AAA 663905[12580000]    <1> 		cmp [lastmouseposition], ax
  9421 00007AB1 0F87F6010000        <1> 		ja near nexticonsel
  9422 00007AB7 66390D[14580000]    <1> 		cmp [lastmouseposition + 2], cx
  9423 00007ABE 0F82E9010000        <1> 		jb near nexticonsel
  9424 00007AC4 66391D[14580000]    <1> 		cmp [lastmouseposition + 2], bx
  9425 00007ACB 0F87DC010000        <1> 		ja near nexticonsel
  9426 00007AD1 668B460A            <1> 		mov ax, [esi + 10]
  9427 00007AD5 2410                <1> 		and al, 00010000b
  9428 00007AD7 663D1000            <1> 		cmp ax, 00010000b
  9429 00007ADB 0F8442000000        <1> 		je near nodragtext
  9430 00007AE1 8935[F9770000]      <1> 		mov [dragging], esi
  9431 00007AE7 662B15[12580000]    <1> 		sub dx, [lastmouseposition]
  9432 00007AEE 660315[16580000]    <1> 		add dx, [mousecursorposition]
  9433 00007AF5 66030D[18580000]    <1> 		add cx, [mousecursorposition + 2]
  9434 00007AFC 662B0D[14580000]    <1> 		sub cx, [lastmouseposition + 2]
  9435 00007B03 663B15[23560000]    <1> 		cmp dx, [resolutionx2]
  9436 00007B0A 7607                <1> 		jbe chkyresdrgtxt
  9437 00007B0C 668B15[16580000]    <1> 		mov dx, [mousecursorposition]
  9438                              <1> 	chkyresdrgtxt:
  9439 00007B13 663B0D[37550000]    <1> 		cmp cx, [resolutiony]
  9440 00007B1A 7607                <1> 		jbe nodragtext
  9441 00007B1C 668B0D[18580000]    <1> 		mov cx, [mousecursorposition + 2]
  9442                              <1> 	nodragtext:
  9443 00007B23 66814E0A0100        <1> 		or word [esi + 10], 1
  9444 00007B29 8B5E0C              <1> 		mov ebx, [esi + 12]
  9445 00007B2C 891D[58800000]      <1> 		mov [codepointer], ebx
  9446 00007B32 668B460A            <1> 		mov ax, [esi + 10]
  9447 00007B36 8B7602              <1> 		mov esi, [esi + 2]
  9448 00007B39 E808F5FFFF          <1> 		call showstring
  9449 00007B3E E983010000          <1> 		jmp doneiconsel
  9450                              <1> 	unselecttext:
  9451 00007B43 6681660AFEFF        <1> 		and word [esi + 10], 0xFFFE
  9452 00007B49 8B5E0C              <1> 		mov ebx, [esi + 12]
  9453 00007B4C 668B460A            <1> 		mov ax, [esi + 10]
  9454 00007B50 8B7602              <1> 		mov esi, [esi + 2]
  9455 00007B53 C705[58800000]0000- <1> 		mov dword [codepointer], 0
  9456 00007B5B 0000                <1>
  9457 00007B5D E8E4F4FFFF          <1> 		call showstring
  9458 00007B62 E95F010000          <1> 		jmp doneiconsel
  9459                              <1> windowselect:
  9460 00007B67 8B7E02              <1> 		mov edi, [esi + 2]
  9461 00007B6A 668B5606            <1> 		mov dx, [esi + 6]
  9462 00007B6E 6689D0              <1> 		mov ax, dx
  9463 00007B71 668B4E08            <1> 		mov cx, [esi + 8]
  9464 00007B75 6689CB              <1> 		mov bx, cx
  9465 00007B78 6681C31000          <1> 		add bx, 16
  9466 00007B7D 813D[F9770000]0100- <1> 		cmp dword [dragging], 1
  9467 00007B85 0000                <1>
  9468 00007B87 746D                <1> 		je dragwin
  9469 00007B89 813D[F9770000]0000- <1> 		cmp dword [dragging], 0
  9470 00007B91 0000                <1>
  9471 00007B93 7411                <1> 		je nodragwincheck
  9472 00007B95 3935[F9770000]      <1> 		cmp dword [dragging], esi
  9473 00007B9B 0F850C010000        <1> 		jne near nexticonsel
  9474 00007BA1 E950000000          <1> 		jmp dragwin
  9475                              <1> 	nodragwincheck:
  9476 00007BA6 663905[16580000]    <1> 		cmp [mousecursorposition], ax
  9477 00007BAD 0F82FA000000        <1> 		jb near nexticonsel
  9478 00007BB3 660307              <1> 		add ax, [edi]
  9479 00007BB6 660307              <1> 		add ax, [edi]
  9480 00007BB9 663905[16580000]    <1> 		cmp [mousecursorposition], ax
  9481 00007BC0 0F87E7000000        <1> 		ja near nexticonsel
  9482 00007BC6 66390D[18580000]    <1> 		cmp [mousecursorposition + 2], cx
  9483 00007BCD 0F82DA000000        <1> 		jb near nexticonsel
  9484 00007BD3 66391D[18580000]    <1> 		cmp [mousecursorposition + 2], bx
  9485 00007BDA 0F87CD000000        <1> 		ja near nexticonsel
  9486 00007BE0 662D1400            <1> 		sub ax, 20
  9487 00007BE4 663905[16580000]    <1> 		cmp [mousecursorposition], ax
  9488 00007BEB 0F879C000000        <1> 		ja near killwin
  9489 00007BF1 E983000000          <1> 		jmp nodragwin
  9490                              <1> 	dragwin:
  9491 00007BF6 C605[517D0000]01    <1> 		mov byte [windrag], 1
  9492 00007BFD 663905[12580000]    <1> 		cmp [lastmouseposition], ax
  9493 00007C04 0F82A3000000        <1> 		jb near nexticonsel
  9494 00007C0A 660307              <1> 		add ax, [edi]
  9495 00007C0D 660307              <1> 		add ax, [edi]
  9496 00007C10 663905[12580000]    <1> 		cmp [lastmouseposition], ax
  9497 00007C17 0F8790000000        <1> 		ja near nexticonsel
  9498 00007C1D 66390D[14580000]    <1> 		cmp [lastmouseposition + 2], cx
  9499 00007C24 0F8283000000        <1> 		jb near nexticonsel
  9500 00007C2A 66391D[14580000]    <1> 		cmp [lastmouseposition + 2], bx
  9501 00007C31 0F8776000000        <1> 		ja near nexticonsel
  9502 00007C37 8935[F9770000]      <1> 		mov [dragging], esi
  9503 00007C3D 662B15[12580000]    <1> 		sub dx, [lastmouseposition]
  9504 00007C44 660315[16580000]    <1> 		add dx, [mousecursorposition]
  9505 00007C4B 66030D[18580000]    <1> 		add cx, [mousecursorposition + 2]
  9506 00007C52 662B0D[14580000]    <1> 		sub cx, [lastmouseposition + 2]
  9507 00007C59 663B15[23560000]    <1> 		cmp dx, [resolutionx2]
  9508 00007C60 7607                <1> 		jbe chkyresdrgwin
  9509 00007C62 668B15[16580000]    <1> 		mov dx, [mousecursorposition]
  9510                              <1> 	chkyresdrgwin:
  9511 00007C69 663B0D[37550000]    <1> 		cmp cx, [resolutiony]
  9512 00007C70 7607                <1> 		jbe nodragwin
  9513 00007C72 668B0D[18580000]    <1> 		mov cx, [mousecursorposition + 2]
  9514                              <1> 	nodragwin:
  9515 00007C79 8B5E0C              <1> 		mov ebx, [esi + 12]
  9516 00007C7C 668B460A            <1> 		mov ax, [esi + 10]
  9517 00007C80 8B7602              <1> 		mov esi, [esi + 2]
  9518 00007C83 E830F6FFFF          <1> 		call showwindow
  9519 00007C88 E939000000          <1> 		jmp doneiconsel
  9520                              <1> 	killwin:
  9521 00007C8D 66C7060000          <1> 		mov word [esi], 0
  9522 00007C92 C605[8F220000]00    <1> 		mov byte [termguion], 0
  9523 00007C99 E897EDFFFF          <1> 		call guiclear
  9524 00007C9E E817EEFFFF          <1> 		call reloadallgraphics
  9525 00007CA3 E93DE8FFFF          <1> 		jmp guistart
  9526 00007CA8 E93A000000          <1> 		jmp doneiconsel2
  9527                              <1> 	nexticonsel:
  9528 00007CAD 6681660AFEFF        <1> 		and word [esi + 10], 0xFFFE
  9529 00007CB3 81C610000000        <1> 		add esi, 16
  9530 00007CB9 81FE[93CB0000]      <1> 		cmp esi, graphicstableend
  9531 00007CBF 7305                <1> 		jae doneiconsel
  9532 00007CC1 E9B2FBFFFF          <1> 		jmp clicon2
  9533                              <1> 	doneiconsel:
  9534 00007CC6 813D[F9770000]0100- <1> 		cmp dword [dragging], 1
  9535 00007CCE 0000                <1>
  9536 00007CD0 7315                <1> 		jae doneiconsel2
  9537 00007CD2 813D[58800000]0000- <1> 		cmp dword [codepointer], 0
  9538 00007CDA 0000                <1>
  9539 00007CDC 7409                <1> 		je doneiconsel2
  9540 00007CDE 8B1D[58800000]      <1> 		mov ebx, [codepointer]
  9541 00007CE4 FFD3                <1> 		call ebx
  9542 00007CE6 C3                  <1> 		ret
  9543                              <1> 	doneiconsel2:
  9544 00007CE7 A0[27590000]        <1> 		mov al, [LBUTTON]
  9545 00007CEC A2[F7770000]        <1> 		mov [pLBUTTON], al
  9546 00007CF1 A0[28590000]        <1> 		mov al, [RBUTTON]
  9547 00007CF6 A2[F8770000]        <1> 		mov [pRBUTTON], al
  9548 00007CFB 66813D[F9770000]01- <1> 		cmp word [dragging], 1
  9549 00007D03 00                  <1>
  9550 00007D04 0F8613000000        <1> 		jbe near noreloadgraphicsclick
  9551 00007D0A 803D[517D0000]01    <1> 		cmp byte [windrag], 1
  9552 00007D11 7405                <1> 		je noclearcursorcl
  9553 00007D13 E8BDE9FFFF          <1> 		call clearmousecursor
  9554                              <1> noclearcursorcl:
  9555 00007D18 E89DEDFFFF          <1> 		call reloadallgraphics
  9556                              <1> noreloadgraphicsclick:
  9557 00007D1D 31C9                <1> 		xor ecx, ecx
  9558 00007D1F 31D2                <1> 		xor edx, edx
  9559 00007D21 30E4                <1> 		xor ah, ah
  9560 00007D23 8825[517D0000]      <1> 		mov [windrag], ah
  9561 00007D29 B0FE                <1> 		mov al, 254
  9562 00007D2B 668B15[16580000]    <1> 		mov dx, [mousecursorposition]
  9563 00007D32 668B0D[18580000]    <1> 		mov cx, [mousecursorposition + 2]
  9564 00007D39 66BBE738            <1> 		mov bx, 0011100011100111b
  9565 00007D3D C605[F3770000]01    <1> 		mov byte [showcursorfonton], 1
  9566 00007D44 E852F3FFFF          <1> 		call showfontvesa
  9567 00007D49 C605[F3770000]00    <1> 		mov byte [showcursorfonton], 0
  9568 00007D50 C3                  <1> 		ret
  9569 00007D51 00                  <1> windrag db 0
  9570 00007D52 00000000            <1> lastdrag dw 0,0
  9571 00007D56 00000000            <1> grpctblpos dw 0,0
  9572                              <1> 
  9573                              <1> 
  9574                              <1> 
  9575 00007D5A 00<rept>            <1> grphbuf times 16 db 0
  9576                              <1> 	graphicsadd:
  9577 00007D6A BF[93C90000]        <1> 		mov edi, graphicstable
  9578                              <1> 	shwgrph1:
  9579 00007D6F 397702              <1> 		cmp dword [edi + 2], esi
  9580 00007D72 7417                <1> 		je showgraphicsreplace2
  9581 00007D74 81C710000000        <1> 		add edi, 16
  9582 00007D7A 81FF[93CB0000]      <1> 		cmp edi, graphicstableend
  9583 00007D80 0F8352020000        <1> 		jae near showgraphicsnew
  9584 00007D86 E9E4FFFFFF          <1> 		jmp shwgrph1
  9585                              <1> 	showgraphicsreplace2:
  9586 00007D8B 8935[5C7D0000]      <1> 		mov [grphbuf + 2], esi
  9587 00007D91 668915[607D0000]    <1> 		mov [grphbuf + 6], dx
  9588 00007D98 66890D[627D0000]    <1> 		mov [grphbuf + 8], cx
  9589 00007D9F 891D[667D0000]      <1> 		mov [grphbuf + 12], ebx
  9590 00007DA5 30FF                <1> 		xor bh, bh
  9591 00007DA7 88E3                <1> 		mov bl, ah
  9592 00007DA9 30E4                <1> 		xor ah, ah
  9593 00007DAB 66A3[647D0000]      <1> 		mov [grphbuf + 10], ax	
  9594 00007DB1 66891D[5A7D0000]    <1> 		mov [grphbuf], bx
  9595 00007DB8 66A1[5A7D0000]      <1> 		mov ax, [grphbuf]
  9596 00007DBE 663D0100            <1> 		cmp ax, 1
  9597 00007DC2 0F8419000000        <1> 		je near replaceicon
  9598 00007DC8 663D0200            <1> 		cmp ax, 2
  9599 00007DCC 0F8493000000        <1> 		je near replacestring
  9600 00007DD2 663D0300            <1> 		cmp ax, 3
  9601 00007DD6 0F840F010000        <1> 		je near replacewindow
  9602 00007DDC E9D4010000          <1> 		jmp showgraphicsreplace
  9603                              <1> 	replaceicon:
  9604 00007DE1 893D[FD770000]      <1> 		mov [lastpos], edi
  9605 00007DE7 8935[01780000]      <1> 		mov [lastpos + 4], esi
  9606 00007DED 8B7702              <1> 		mov esi, [edi + 2]
  9607 00007DF0 668B5F0C            <1> 		mov bx, [edi + 12]
  9608 00007DF4 668B5706            <1> 		mov dx, [edi + 6]
  9609 00007DF8 668B4F08            <1> 		mov cx, [edi + 8]
  9610 00007DFC 668B06              <1> 		mov ax, [esi]
  9611 00007DFF 66A3[05780000]      <1> 		mov [colorbuf], ax
  9612 00007E05 66A1[B66A0000]      <1> 		mov ax, [background]
  9613 00007E0B 668906              <1> 		mov [esi], ax
  9614 00007E0E 8B5F0C              <1> 		mov ebx, [edi + 12]
  9615 00007E11 668B470A            <1> 		mov ax, [edi + 10]
  9616 00007E15 2401                <1> 		and al, 1
  9617 00007E17 A2[5C800000]        <1> 		mov [iconselected], al
  9618 00007E1C 668B470A            <1> 		mov ax, [edi + 10]
  9619 00007E20 E822EAFFFF          <1> 		call showicon2
  9620 00007E25 8B3D[FD770000]      <1> 		mov edi, [lastpos]
  9621 00007E2B 8B7702              <1> 		mov esi, [edi + 2]
  9622 00007E2E 66A1[05780000]      <1> 		mov ax, [colorbuf]
  9623 00007E34 668906              <1> 		mov [esi], ax
  9624 00007E37 8B35[01780000]      <1> 		mov esi, [lastpos + 4]
  9625 00007E3D 668B15[607D0000]    <1> 		mov dx, [grphbuf + 6]
  9626 00007E44 668B0D[627D0000]    <1> 		mov cx, [grphbuf + 8]
  9627 00007E4B 668B1D[5A7D0000]    <1> 		mov bx, [grphbuf]
  9628 00007E52 66A1[647D0000]      <1> 		mov ax, [grphbuf + 10]
  9629 00007E58 88DC                <1> 		mov ah, bl
  9630 00007E5A 8B1D[667D0000]      <1> 		mov ebx, [grphbuf + 12]
  9631 00007E60 E950010000          <1> 		jmp showgraphicsreplace
  9632                              <1> 	replacestring:
  9633 00007E65 893D[FD770000]      <1> 		mov [lastpos], edi
  9634 00007E6B 8935[01780000]      <1> 		mov [lastpos + 4], esi
  9635 00007E71 8B5F0C              <1> 		mov ebx, [edi + 12]
  9636 00007E74 8B7702              <1> 		mov esi, [edi + 2]
  9637 00007E77 668B5706            <1> 		mov dx, [edi + 6]
  9638 00007E7B 668B4F08            <1> 		mov cx, [edi + 8]
  9639 00007E7F 66A1[8A700000]      <1> 		mov ax, [colorfont2]
  9640 00007E85 66A3[05780000]      <1> 		mov [colorbuf], ax
  9641 00007E8B 66A1[B66A0000]      <1> 		mov ax, [background]
  9642 00007E91 66A3[8A700000]      <1> 		mov [colorfont2], ax		
  9643 00007E97 8B5F0C              <1> 		mov ebx, [edi + 12]
  9644 00007E9A 668B470A            <1> 		mov ax, [edi + 10]
  9645 00007E9E 2401                <1> 		and al, 1
  9646 00007EA0 A2[F5770000]        <1> 		mov [mouseselecton], al
  9647 00007EA5 668B470A            <1> 		mov ax, [edi + 10]
  9648 00007EA9 E8ABF1FFFF          <1> 		call showstring2
  9649 00007EAE 66A1[05780000]      <1> 		mov ax, [colorbuf]
  9650 00007EB4 66A3[8A700000]      <1> 		mov [colorfont2], ax
  9651 00007EBA 8B3D[FD770000]      <1> 		mov edi, [lastpos]
  9652 00007EC0 8B7702              <1> 		mov esi, [edi + 2]
  9653 00007EC3 668B15[607D0000]    <1> 		mov dx, [grphbuf + 6]
  9654 00007ECA 668B0D[627D0000]    <1> 		mov cx, [grphbuf + 8]
  9655 00007ED1 668B1D[5A7D0000]    <1> 		mov bx, [grphbuf]
  9656 00007ED8 66A1[647D0000]      <1> 		mov ax, [grphbuf + 10]
  9657 00007EDE 88DC                <1> 		mov ah, bl
  9658 00007EE0 8B1D[667D0000]      <1> 		mov ebx, [grphbuf + 12]
  9659 00007EE6 E9CA000000          <1> 		jmp showgraphicsreplace
  9660                              <1> 	replacewindow:
  9661 00007EEB 893D[FD770000]      <1> 		mov [lastpos], edi
  9662 00007EF1 8935[01780000]      <1> 		mov [lastpos + 4], esi
  9663 00007EF7 8B7702              <1> 		mov esi, [edi + 2]
  9664 00007EFA 8B3D[A2720000]      <1> 		mov edi, [windowbufloc]
  9665 00007F00 31D2                <1> 		xor edx, edx
  9666 00007F02 668B15[23560000]    <1> 		mov dx, [resolutionx2]
  9667 00007F09 C1E204              <1> 		shl edx, 4
  9668 00007F0C 29D7                <1> 		sub edi, edx
  9669 00007F0E 31D2                <1> 		xor edx, edx
  9670 00007F10 668B16              <1> 		mov dx, [esi]
  9671 00007F13 660316              <1> 		add dx, [esi]
  9672 00007F16 668B4E02            <1> 		mov cx, [esi + 2]
  9673 00007F1A 6681C11000          <1> 		add cx, 16
  9674 00007F1F 66A1[B66A0000]      <1> 		mov ax, [background]
  9675                              <1> 	clearwindow:
  9676                              <1> 		%ifdef gui.background
  9677 00007F25 813D[886A0000]0000- <1> 			cmp dword [backgroundimage], 0
  9678 00007F2D 0000                <1>
  9679 00007F2F 7419                <1> 			je .noback
  9680 00007F31 56                  <1> 			push esi
  9681 00007F32 8B35[886A0000]      <1> 			mov esi, [backgroundimage]
  9682 00007F38 2B3D[4B550000]      <1> 			sub edi, [physbaseptr]
  9683 00007F3E 01FE                <1> 			add esi, edi
  9684 00007F40 033D[4B550000]      <1> 			add edi, [physbaseptr]
  9685 00007F46 668B06              <1> 			mov ax, [esi]
  9686 00007F49 5E                  <1> 			pop esi
  9687                              <1> 		.noback:
  9688                              <1> 		%endif
  9689 00007F4A 668907              <1> 		mov [edi], ax
  9690 00007F4D 81C702000000        <1> 		add edi, 2
  9691 00007F53 81EA02000000        <1> 		sub edx, 2
  9692 00007F59 81FA00000000        <1> 		cmp edx, 0
  9693 00007F5F 75C4                <1> 		jne clearwindow
  9694 00007F61 6649                <1> 		dec cx
  9695 00007F63 668B15[23560000]    <1> 		mov dx, [resolutionx2]
  9696 00007F6A 662B16              <1> 		sub dx, [esi]
  9697 00007F6D 662B16              <1> 		sub dx, [esi]
  9698 00007F70 01D7                <1> 		add edi, edx
  9699 00007F72 668B16              <1> 		mov dx, [esi]
  9700 00007F75 660316              <1> 		add dx, [esi]
  9701 00007F78 6681F90000          <1> 		cmp cx, 0
  9702 00007F7D 75A6                <1> 		jne clearwindow
  9703 00007F7F C605[90220000]00    <1> 		mov byte [termcopyon], 0
  9704 00007F86 8B3D[FD770000]      <1> 		mov edi, [lastpos]
  9705 00007F8C 8B35[5C7D0000]      <1> 		mov esi, [grphbuf + 2]
  9706 00007F92 668B15[607D0000]    <1> 		mov dx, [grphbuf + 6]
  9707 00007F99 668B0D[627D0000]    <1> 		mov cx, [grphbuf + 8]
  9708 00007FA0 668B1D[5A7D0000]    <1> 		mov bx, [grphbuf]
  9709 00007FA7 66A1[647D0000]      <1> 		mov ax, [grphbuf + 10]
  9710 00007FAD 88DC                <1> 		mov ah, bl
  9711 00007FAF 8B1D[667D0000]      <1> 		mov ebx, [grphbuf + 12]
  9712                              <1> 	showgraphicsreplace:
  9713 00007FB5 897702              <1> 		mov [edi + 2], esi
  9714 00007FB8 66895706            <1> 		mov [edi + 6], dx
  9715 00007FBC 66894F08            <1> 		mov [edi + 8], cx
  9716 00007FC0 895F0C              <1> 		mov [edi + 12], ebx
  9717 00007FC3 30FF                <1> 		xor bh, bh
  9718 00007FC5 88E3                <1> 		mov bl, ah
  9719 00007FC7 30E4                <1> 		xor ah, ah
  9720 00007FC9 6689470A            <1> 		mov [edi + 10], ax
  9721 00007FCD 66891F              <1> 		mov [edi], bx
  9722 00007FD0 8B5F0C              <1> 		mov ebx, [edi + 12]
  9723 00007FD3 668B470A            <1> 		mov ax, [edi + 10]
  9724 00007FD7 C3                  <1> 		ret
  9725                              <1> 	showgraphicsnew:
  9726 00007FD8 BF[93C90000]        <1> 		mov edi, graphicstable
  9727                              <1> 	shwgrph2:
  9728 00007FDD 66813F0000          <1> 		cmp word [edi], 0
  9729 00007FE2 74D1                <1> 		je showgraphicsreplace
  9730 00007FE4 81C710000000        <1> 		add edi, 16
  9731 00007FEA 81FF[93CB0000]      <1> 		cmp edi, graphicstableend
  9732 00007FF0 72EB                <1> 		jb shwgrph2
  9733                              <1> 	showgraphicsdone:
  9734 00007FF2 C3                  <1> 		ret
  9735                              <1> 	
  9736                              <1> putpixel: ;color in si, point is (dx,cx)
  9737                              <1> 		;destroys edi, ebx, eax
  9738 00007FF3 6650                <1> 	push ax
  9739 00007FF5 6653                <1> 	push bx
  9740 00007FF7 31C0                <1> 	xor eax, eax
  9741 00007FF9 31DB                <1> 	xor ebx, ebx
  9742 00007FFB 31FF                <1> 	xor edi, edi
  9743 00007FFD 668B1D[37550000]    <1> 	mov bx, [resolutiony]
  9744 00008004 66A1[35550000]      <1> 	mov ax, [resolutionx]
  9745 0000800A 6639C2              <1> 	cmp dx, ax
  9746 0000800D 7720                <1> 	ja .doneput
  9747 0000800F 66D1E0              <1> 	shl ax, 1
  9748 00008012 6639D9              <1> 	cmp cx, bx
  9749 00008015 7718                <1> 	ja .doneput
  9750 00008017 6689CB              <1> 	mov bx, cx
  9751 0000801A 52                  <1> 	push edx
  9752 0000801B F7E3                <1> 	mul ebx
  9753 0000801D 5A                  <1> 	pop edx
  9754 0000801E 6601D7              <1> 	add di, dx
  9755 00008021 6601D7              <1> 	add di, dx
  9756 00008024 01C7                <1> 	add edi, eax
  9757 00008026 033D[4B550000]      <1> 	add edi, [physbaseptr]
  9758 0000802C 668937              <1> 	mov [edi], si
  9759                              <1> .doneput:
  9760 0000802F 665B                <1> 	pop bx
  9761 00008031 6658                <1> 	pop ax
  9762 00008033 C3                  <1> 	ret
  9763                              <1> 	
  9764                              <1> getpixelmem:	;pixel in (dx, cx), outputs memory location in edi
  9765 00008034 31FF                <1> 	xor edi, edi
  9766 00008036 31C0                <1> 	xor eax, eax
  9767 00008038 31DB                <1> 	xor ebx, ebx
  9768 0000803A 668B1D[23560000]    <1> 	mov bx, [resolutionx2]
  9769 00008041 6689D7              <1> 	mov di, dx
  9770 00008044 6601D7              <1> 	add di, dx
  9771 00008047 6689C8              <1> 	mov ax, cx
  9772 0000804A F7E3                <1> 	mul ebx
  9773 0000804C 01C7                <1> 	add edi, eax
  9774 0000804E 033D[4B550000]      <1> 	add edi, [physbaseptr]
  9775 00008054 C3                  <1> 	ret
  9776                              <1> 
  9777 00008055 00                  <1> 	mouseon db 0
  9778 00008056 0000                <1> 	icon dw 0	;pointer to icon
  9779 00008058 00000000            <1> 	codepointer dd 0 ;pointer to code
  9780 0000805C 00                  <1> 	iconselected db 0
  9781                                  %endif
  9782                                  %ifdef network.included
  9783                                  	%include "source/network.asm"
  9784                              <1> %ifdef rtl8139.included
  9785                              <1> 	%include "source/drivers/network/rtl8139.asm"
  9786                              <2> ;RTL8139 NIC DRIVER
  9787                              <2> rtl8139:
  9788                              <2> .RBSTART equ 0x30
  9789                              <2> .IMR equ 0x3C
  9790                              <2> .ISR equ 0x3E
  9791                              <2> .CMD equ 0x37
  9792                              <2> .RCR equ 0x44
  9793                              <2> .CONFIG1 equ 0x52
  9794                              <2> .TSD0 equ 0x10
  9795                              <2> .TSAD0 equ 0x20
  9796                              <2> .init:	;should find card, get mac, and initialize card
  9797 0000805D 31C0                <2> 	xor eax, eax
  9798 0000805F A2[30600000]        <2> 	mov [pcifunction], al
  9799 00008064 A2[2E600000]        <2> 	mov [pcibus], al
  9800 00008069 A2[2F600000]        <2> 	mov [pcidevice], al
  9801 0000806E B002                <2> 	mov al, 0x02 ;type code
  9802 00008070 A2[B9600000]        <2> 	mov [pcitype], al
  9803 00008075 B8EC103981          <2> 	mov eax, 0x813910EC
  9804 0000807A A3[33600000]        <2> 	mov [pcidevid], eax
  9805 0000807F E8B7DFFFFF          <2> 	call getpciport
  9806 00008084 81FBFFFFFFFF        <2> 	cmp ebx, 0xFFFFFFFF
  9807 0000808A 7501                <2> 	jne .initnic
  9808 0000808C C3                  <2> 	ret
  9809                              <2> .initnic:
  9810 0000808D 8915[07820000]      <2> 	mov [.basenicaddr], edx
  9811 00008093 89D1                <2> 	mov ecx, edx
  9812 00008095 E87EAEFFFF          <2> 	call showhex	;for debugging, please remove
  9813 0000809A BE[ECC52900]        <2> 	mov esi, rbuffstart
  9814 0000809F B900200000          <2> 	mov ecx, 8192
  9815 000080A4 31C0                <2> 	xor eax, eax
  9816                              <2> .clearrbuff:		;clear receive buffer which starts at rbuffstart
  9817 000080A6 8806                <2> 	mov [esi], al
  9818 000080A8 46                  <2> 	inc esi
  9819 000080A9 6649                <2> 	dec cx
  9820 000080AB 6681F90000          <2> 	cmp cx, 0
  9821 000080B0 75F4                <2> 	jne .clearrbuff
  9822                              <2> .findmac:
  9823 000080B2 8B15[07820000]      <2> 	mov edx, [.basenicaddr]
  9824 000080B8 BF[0C820000]        <2> 	mov edi, .mac
  9825 000080BD B906000000          <2> 	mov ecx, 6
  9826                              <2> .macputloop:
  9827 000080C2 EC                  <2> 	in al, dx
  9828 000080C3 8807                <2> 	mov [edi], al
  9829 000080C5 47                  <2> 	inc edi
  9830 000080C6 42                  <2> 	inc edx
  9831 000080C7 49                  <2> 	dec ecx
  9832 000080C8 75F8                <2> 	jnz .macputloop
  9833 000080CA B9[0C820000]        <2> 	mov ecx, .mac
  9834 000080CF E857050000          <2> 	call showmac
  9835 000080D4 E817000000          <2> 	call .resetnic
  9836 000080D9 BE[12820000]        <2> 	mov esi, .name
  9837 000080DE E85B9CFFFF          <2> 	call print
  9838 000080E3 BE[1B820000]        <2> 	mov esi, .initmsg
  9839 000080E8 E8519CFFFF          <2> 	call print
  9840 000080ED 31DB                <2> 	xor ebx, ebx
  9841 000080EF C3                  <2> 	ret
  9842                              <2> .resetnic:
  9843 000080F0 8B15[07820000]      <2> 	mov edx, [.basenicaddr]
  9844 000080F6 81C252000000        <2> 	add edx, .CONFIG1
  9845 000080FC 30C0                <2> 	xor al, al
  9846 000080FE EE                  <2> 	out dx, al	;WAKE UP!!!!
  9847 000080FF 8B15[07820000]      <2> 	mov edx, [.basenicaddr]
  9848 00008105 81C237000000        <2> 	add edx, .CMD
  9849 0000810B B010                <2> 	mov al, 0x10
  9850 0000810D EE                  <2> 	out dx, al	;Reset
  9851                              <2> .resetnicwait:
  9852 0000810E EC                  <2> 	in al, dx
  9853 0000810F A810                <2> 	test al, 0x10
  9854 00008111 0F85F7FFFFFF        <2> 	jnz near .resetnicwait
  9855 00008117 8B15[07820000]      <2> 	mov edx, [.basenicaddr]
  9856 0000811D 81C230000000        <2> 	add edx, .RBSTART
  9857 00008123 B8[ECC52900]        <2> 	mov eax, rbuffstart
  9858 00008128 0500001000          <2> 	add eax, 0x100000 ;change virtual to physical address
  9859 0000812D EF                  <2> 	out dx, eax	;give nic receive buffer location
  9860 0000812E 8B15[07820000]      <2> 	mov edx, [.basenicaddr]
  9861 00008134 81C23C000000        <2> 	add edx, .IMR
  9862                              <2> 	;in ax, dx
  9863 0000813A 66B80500            <2> 	mov ax, 5
  9864 0000813E 66EF                <2> 	out dx, ax	;set both TOK and ROK interrupts
  9865 00008140 8B15[07820000]      <2> 	mov edx, [.basenicaddr]
  9866 00008146 81C244000000        <2> 	add edx, .RCR
  9867 0000814C B802000000          <2> 	mov eax, 000010b ;receive only physical matches
  9868 00008151 0580000000          <2> 	add eax, 128 ;enable wrap option
  9869 00008156 EF                  <2> 	out dx, eax	;recieve packets from all matches
  9870 00008157 8B15[07820000]      <2> 	mov edx, [.basenicaddr]
  9871 0000815D 81C237000000        <2> 	add edx, .CMD
  9872 00008163 B00C                <2> 	mov al, 0x0C
  9873 00008165 EE                  <2> 	out dx, al	;use transmit and receive
  9874 00008166 C605[0B820000]01    <2> 	mov byte [.nicconfig], 1
  9875 0000816D C3                  <2> 	ret
  9876                              <2> 	
  9877                              <2> .sendpacket:	;packet with beginning in edi and end in esi
  9878 0000816E 56                  <2> 	push esi
  9879 0000816F 57                  <2> 	push edi
  9880 00008170 803D[0B820000]01    <2> 	cmp byte [.nicconfig], 1
  9881 00008177 7410                <2> 	je .sendcachedata
  9882 00008179 E8DFFEFFFF          <2> 	call .init
  9883 0000817E 5F                  <2> 	pop edi
  9884 0000817F 5E                  <2> 	pop esi
  9885 00008180 81FBFFFFFFFF        <2> 	cmp ebx, 0xFFFFFFFF
  9886 00008186 75E6                <2> 	jne .sendpacket
  9887 00008188 C3                  <2> 	ret
  9888                              <2> .sendcachedata:
  9889 00008189 E862FFFFFF          <2> 	call .resetnic
  9890 0000818E 8B15[07820000]      <2> 	mov edx, [.basenicaddr]
  9891 00008194 81C220000000        <2> 	add edx, .TSAD0
  9892 0000819A 5F                  <2> 	pop edi
  9893 0000819B 8B0D[0C820000]      <2> 	mov ecx, [.mac]
  9894 000081A1 894F06              <2> 	mov [edi + 6], ecx
  9895 000081A4 668B0D[10820000]    <2> 	mov cx, [.mac + 4]
  9896 000081AB 66894F0A            <2> 	mov [edi + 10], cx	;copy the correct mac
  9897 000081AF 89F8                <2> 	mov eax, edi
  9898 000081B1 0500001000          <2> 	add eax, 0x100000 ;base address
  9899 000081B6 EF                  <2> 	out dx, eax	;here's Johnny!
  9900 000081B7 5E                  <2> 	pop esi
  9901 000081B8 29FE                <2> 	sub esi, edi
  9902 000081BA 8B15[07820000]      <2> 	mov edx, [.basenicaddr]
  9903 000081C0 81C210000000        <2> 	add edx, .TSD0
  9904 000081C6 ED                  <2> 	in eax, dx ;get tsd
  9905 000081C7 2500E0FFFF          <2> 	and eax, 0xFFFFE000 ;clear off thirteen bits
  9906 000081CC 01F0                <2> 	add eax, esi ;add length to tsd
  9907 000081CE 25FFDFFFFF          <2> 	and eax, 0xFFFFDFFF ;clear own bit
  9908 000081D3 EF                  <2> 	out dx, eax
  9909                              <2> .checknicownbit:
  9910 000081D4 8B15[07820000]      <2> 	mov edx, [.basenicaddr]
  9911 000081DA 81C210000000        <2> 	add edx, .TSD0
  9912 000081E0 ED                  <2> 	in eax, dx
  9913 000081E1 2500200000          <2> 	and eax, 0x2000 ;check own bit
  9914 000081E6 3D00200000          <2> 	cmp eax, 0x2000
  9915 000081EB 75E7                <2> 	jne .checknicownbit
  9916                              <2> .checknictokbit:
  9917 000081ED 8B15[07820000]      <2> 	mov edx, [.basenicaddr]
  9918 000081F3 81C210000000        <2> 	add edx, .TSD0
  9919 000081F9 ED                  <2> 	in eax, dx
  9920 000081FA 2500800000          <2> 	and eax, 0x8000	;check tok bit
  9921 000081FF 3D00800000          <2> 	cmp eax, 0x8000
  9922 00008204 75E7                <2> 	jne .checknictokbit
  9923 00008206 C3                  <2> 	ret
  9924 00008207 00000000            <2> .basenicaddr dd 0
  9925 0000820B 00                  <2> .nicconfig db 0
  9926 0000820C 000000000000        <2> .mac db 0,0,0,0,0,0
  9927 00008212 52544C383133392000  <2> .name db "RTL8139 ",0
  9928 0000821B 496E697469616C697A- <2> .initmsg db "Initialized",10,0
  9929 00008224 65640A00            <2>
  9930                              <1> %endif
  9931                              <1> %ifdef rtl8169.included
  9932                              <1> 	%include "source/drivers/network/rtl8169.asm"
  9933                              <1> %endif
  9934                              <1> %ifdef ne2000.included
  9935                              <1> 	%include "source/drivers/network/ne2000.asm"
  9936                              <2> ne2000:
  9937                              <2> ;	PAGE0			PAGE 1			PAGE 2
  9938                              <2> ;	READ	WRITE	READ	WRITE	READ	WRITE
  9939                              <2> ;0	CR		CR		CR		CR		CR		CR
  9940                              <2> ;1	CLDA0 	PSTART	PAR0	PAR0	PSTART	CLDA0
  9941                              <2> ;2	CLDA1	PSTOP	PAR1	PAR1	PSTOP	CLDA1
  9942                              <2> ;3	BNRY	BNRY	PAR2	PAR2	RNPP	RNPP
  9943                              <2> ;4	TSR		TPSR	PAR3	PAR3	TPSR	N/A
  9944                              <2> ;5	NCR		TBCR0	PAR4	PAR4	LNPP	LNPP
  9945                              <2> ;6	FIFO	TCBR1	PAR5	PAR5	ACU		ACU
  9946                              <2> ;7	ISR		ISR		CURR	CURR	ACL		ACL
  9947                              <2> ;8	CRDA0	RSAR0	MAR0	MAR0	N/A		N/A
  9948                              <2> ;9	CRDA1	RSAR1	MAR1	MAR1	N/A		N/A
  9949                              <2> ;A	N/A		RBCR0	MAR2	MAR2	N/A		N/A
  9950                              <2> ;B	N/A		RBCR1	MAR3	MAR3	N/A		N/A
  9951                              <2> ;C	RSR		RCR		MAR4	MAR4	RCR		N/A
  9952                              <2> ;D	CNTR0	TCR		MAR5	MAR5	TCR		N/A
  9953                              <2> ;E	CNTR1	DCR		MAR6	MAR6	DCR		N/A
  9954                              <2> ;F	CNTR2	IMR		MAR7	MAR7	IMR		N/A
  9955                              <2> .CR equ 0
  9956                              <2> 	.CR.STP	equ 1		;Stop
  9957                              <2> 	.CR.STA equ 2		;Start
  9958                              <2> 	.CR.TXP equ 4		;Transmit
  9959                              <2> 	.CR.RD0 equ 8		;Remote DMA 0
  9960                              <2> 	.CR.RD1 equ 0x10	;Remote DMA 1
  9961                              <2> 	.CR.RD2 equ 0x20	;Remote DMA 2
  9962                              <2> 	.CR.PS0 equ 0x40	;Page Select 0
  9963                              <2> 	.CR.PS1 equ 0x80	;Page Select 1
  9964                              <2> .PSTART equ 1
  9965                              <2> .PSTOP equ 2
  9966                              <2> .BNRY equ 3
  9967                              <2> .ISR equ 7
  9968                              <2> 	.ISR.PRX equ 1		;Packet Received
  9969                              <2> 	.ISR.PTX equ 2		;Packet Transmitted
  9970                              <2> 	.ISR.RXE equ 4		;Receive Error
  9971                              <2> 	.ISR.TXE equ 8		;Transmission Error
  9972                              <2> 	.ISR.OVW equ 0x10	;Overwrite
  9973                              <2> 	.ISR.CNT equ 0x20	;Counter Overflow
  9974                              <2> 	.ISR.RDC equ 0x40	;Remote Data Complete
  9975                              <2> 	.ISR.RST equ 0x80	;Reset status
  9976                              <2> .RSAR0 equ 8
  9977                              <2> .RSAR1 equ 9
  9978                              <2> .RBCR0 equ 0xA
  9979                              <2> .RBCR1 equ 0xB
  9980                              <2> .RCR equ 0xC
  9981                              <2> 	.RCR.SEP equ 1		;Save Errored Packets
  9982                              <2> 	.RCR.AR equ 2		;Accept Runt packet
  9983                              <2> 	.RCR.AB equ 4		;Accept Broadcast
  9984                              <2> 	.RCR.AM equ 8		;Accept Multicast
  9985                              <2> 	.RCR.PRO equ 0x10	;Promiscuous Physical
  9986                              <2> 	.RCR.MON equ 0x20	;Monitor Mode
  9987                              <2> .DCR equ 0xE
  9988                              <2> 	.DCR.WTS equ 1		;Word Transfer Select
  9989                              <2> 	.DCR.BOS equ 2		;Byte Order Select
  9990                              <2> 	.DCR.LAS equ 4		;Long Address Select
  9991                              <2> 	.DCR.LS equ 8		;Loopback Select
  9992                              <2> 	.DCR.AR equ 0x10	;Auto-initialize Remote
  9993                              <2> 	.DCR.FT0 equ 0x20	;FIFO Threshold Select 0
  9994                              <2> 	.DCR.FT1 equ 0x40	;FIFO Threshold Select 1
  9995                              <2> .ASIC equ 0x10
  9996                              <2> .RESET equ 0x1F
  9997                              <2> 
  9998                              <2> .init:
  9999 00008228 BBFFFFFFFF          <2> 	mov ebx, 0xFFFFFFFF
 10000 0000822D 31C0                <2> 	xor eax, eax
 10001 0000822F A2[30600000]        <2> 	mov [pcifunction], al
 10002 00008234 A2[2E600000]        <2> 	mov [pcibus], al
 10003 00008239 A2[2F600000]        <2> 	mov [pcidevice], al
 10004 0000823E B002                <2> 	mov al, 2 ;type code
 10005 00008240 A2[B9600000]        <2> 	mov [pcitype], al
 10006 00008245 B8EC102980          <2> 	mov eax, 0x802910EC
 10007 0000824A A3[33600000]        <2> 	mov [pcidevid], eax
 10008 0000824F E8E7DDFFFF          <2> 	call getpciport
 10009 00008254 81FBFFFFFFFF        <2> 	cmp ebx, 0xFFFFFFFF
 10010 0000825A 7501                <2> 	jne .good0
 10011 0000825C C3                  <2> 	ret
 10012                              <2> .good0:
 10013 0000825D 8915[27850000]      <2> 	mov [.basenicaddr], edx
 10014 00008263 89D1                <2> 	mov ecx, edx
 10015                              <2> .test:
 10016 00008265 E854000000          <2> 	call .reset
 10017 0000826A E87B000000          <2> 	call .stop
 10018 0000826F 89CA                <2> 	mov edx, ecx
 10019 00008271 B9FF000000          <2> 	mov ecx, 0xFF
 10020 00008276 E2FE                <2> 	loop $ ;wait for ~100 us
 10021 00008278 89D1                <2> 	mov ecx, edx
 10022 0000827A EC                  <2> 	in al, dx
 10023 0000827B 2427                <2> 	and al, (.CR.RD2 | .CR.TXP | .CR.STA | .CR.STP)
 10024 0000827D 3C21                <2> 	cmp al, (.CR.RD2 | .CR.STP)
 10025 0000827F 7410                <2> 	je .good1
 10026 00008281 89CA                <2> 	mov edx, ecx
 10027 00008283 81C207000000        <2> 	add edx, .ISR
 10028 00008289 EC                  <2> 	in al, dx
 10029 0000828A 2480                <2> 	and al, .ISR.RST
 10030 0000828C 3C80                <2> 	cmp al, .ISR.RST
 10031 0000828E 7401                <2> 	je .good1
 10032 00008290 C3                  <2> 	ret
 10033                              <2> .good1:
 10034 00008291 E882ACFFFF          <2> call showhex	;for debugging, please remove
 10035 00008296 E85B000000          <2> 	call .setup
 10036 0000829B E88B030000          <2> call showmac
 10037 000082A0 BE[2C850000]        <2> mov esi, .name
 10038 000082A5 E8949AFFFF          <2> call print
 10039 000082AA BE[34850000]        <2> mov esi, .initmsg
 10040 000082AF E88A9AFFFF          <2> call print
 10041 000082B4 C605[2B850000]01    <2> 	mov byte [.nicconfig], 1
 10042 000082BB 31DB                <2> 	xor ebx, ebx
 10043 000082BD C3                  <2> 	ret
 10044                              <2> .reset:
 10045 000082BE 8B15[27850000]      <2> 	mov edx, [.basenicaddr]
 10046 000082C4 81C21F000000        <2> 	add edx, .RESET
 10047 000082CA EC                  <2> 	in al, dx
 10048 000082CB EE                  <2> 	out dx, al ;write its contents to itself
 10049 000082CC C3                  <2> 	ret
 10050                              <2> .page:
 10051 000082CD 66C1E00E            <2> 	shl ax, 14
 10052 000082D1 8B15[27850000]      <2> 	mov edx, [.basenicaddr]
 10053 000082D7 EC                  <2> 	in al, dx
 10054 000082D8 243F                <2> 	and al, 00111111b
 10055 000082DA 08E0                <2> 	or al, ah
 10056 000082DC EE                  <2> 	out dx, al
 10057 000082DD C3                  <2> 	ret
 10058                              <2> .start:
 10059 000082DE 8B15[27850000]      <2> 	mov edx, [.basenicaddr]
 10060 000082E4 B020                <2> 	mov al, .CR.RD2
 10061 000082E6 B002                <2> 	mov al, .CR.STA
 10062 000082E8 EE                  <2> 	out dx, al
 10063 000082E9 C3                  <2> 	ret
 10064                              <2> .stop:
 10065 000082EA 8B15[27850000]      <2> 	mov edx, [.basenicaddr]
 10066 000082F0 B020                <2> 	mov al, .CR.RD2
 10067 000082F2 0C01                <2> 	or al, .CR.STP
 10068 000082F4 EE                  <2> 	out dx, al
 10069 000082F5 C3                  <2> 	ret
 10070                              <2> .setup:
 10071 000082F6 E8EFFFFFFF          <2> 	call .stop
 10072 000082FB 8B15[27850000]      <2> 	mov edx, [.basenicaddr]
 10073 00008301 81C20E000000        <2> 	add edx, .DCR
 10074 00008307 B040                <2> 	mov al, .DCR.FT1
 10075 00008309 0C01                <2> 	or al, .DCR.WTS
 10076 0000830B 0C08                <2> 	or al, .DCR.LS
 10077 0000830D EE                  <2> 	out dx, al ;Set FIFO threshold, byte order, word-wide DMA
 10078 0000830E E8B9000000          <2> 	call .getmac
 10079 00008313 E8D2FFFFFF          <2> 	call .stop
 10080 00008318 30C0                <2> 	xor al, al
 10081 0000831A 8B15[27850000]      <2> 	mov edx, [.basenicaddr]
 10082 00008320 81C20A000000        <2> 	add edx, .RBCR0
 10083 00008326 EE                  <2> 	out dx, al
 10084 00008327 6642                <2> 	inc dx
 10085 00008329 EE                  <2> 	out dx, al ;Clear byte count
 10086 0000832A B800400000          <2> 	mov eax, 16*1024
 10087 0000832F A3[46850000]        <2> 	mov [.ringstart], eax
 10088 00008334 C1E808              <2> 	shr eax, 8
 10089 00008337 66A3[42850000]      <2> 	mov [.pagestart], ax
 10090 0000833D 0534000000          <2> 	add eax, 64-2*6
 10091 00008342 A3[44850000]        <2> 	mov [.pageend], eax
 10092 00008347 C1E008              <2> 	shl eax, 8
 10093 0000834A 66A3[4A850000]      <2> 	mov [.ringend], ax ;set page and ring starts and ends
 10094 00008350 8B15[27850000]      <2> 	mov edx, [.basenicaddr]
 10095 00008356 81C201000000        <2> 	add edx, .PSTART
 10096 0000835C A0[42850000]        <2> 	mov al, [.pagestart]
 10097 00008361 EE                  <2> 	out dx, al
 10098 00008362 A0[44850000]        <2> 	mov al, [.pageend]
 10099 00008367 6642                <2> 	inc dx
 10100 00008369 EE                  <2> 	out dx, al
 10101 0000836A A0[42850000]        <2> 	mov al, [.pagestart]
 10102 0000836F 6642                <2> 	inc dx
 10103 00008371 EE                  <2> 	out dx, al
 10104 00008372 E873FFFFFF          <2> 	call .stop
 10105                              <2> ;INSERT INTERRUPT ENABLE HERE
 10106 00008377 B001                <2> 	mov al, 1
 10107 00008379 E84FFFFFFF          <2> 	call .page
 10108 0000837E 8B15[27850000]      <2> 	mov edx, [.basenicaddr]
 10109 00008384 BF[54850000]        <2> 	mov edi, .rom
 10110                              <2> .copymactocard:
 10111 00008389 42                  <2> 	inc edx
 10112 0000838A 6E                  <2> 	outsb
 10113 0000838B 81C702000000        <2> 	add edi, 2
 10114 00008391 81FA06000000        <2> 	cmp edx, 6
 10115 00008397 76F0                <2> 	jbe .copymactocard
 10116 00008399 8B15[27850000]      <2> 	mov edx, [.basenicaddr]
 10117 0000839F 81C207000000        <2> 	add edx, 7
 10118 000083A5 A0[42850000]        <2> 	mov al, [.pagestart]
 10119 000083AA FEC0                <2> 	inc al
 10120 000083AC EE                  <2> 	out dx, al ;set page in CURR register
 10121                              <2> ;INSERT MULTICAST INIT HERE
 10122 000083AD E838FFFFFF          <2> 	call .stop
 10123 000083B2 8B15[27850000]      <2> 	mov edx, [.basenicaddr]
 10124 000083B8 81C20C000000        <2> 	add edx, .RCR
 10125 000083BE B004                <2> 	mov al, .RCR.AB
 10126 000083C0 EE                  <2> 	out dx, al ;accept broadcast
 10127 000083C1 6642                <2> 	inc dx
 10128 000083C3 30C0                <2> 	xor al, al
 10129 000083C5 EE                  <2> 	out dx, al ;stop loopback
 10130 000083C6 E813FFFFFF          <2> 	call .start
 10131 000083CB C3                  <2> 	ret
 10132                              <2> .getmac:
 10133 000083CC 8B15[27850000]      <2> 	mov edx, [.basenicaddr]
 10134 000083D2 B020                <2> 	mov al, 0x20
 10135 000083D4 0C02                <2> 	or al, 2
 10136 000083D6 EE                  <2> 	out dx, al	;set STA and RD2 bits
 10137 000083D7 6681C20A00          <2> 	add dx, .RBCR0
 10138 000083DC B010                <2> 	mov al, 16
 10139 000083DE EE                  <2> 	out dx, al
 10140 000083DF 6642                <2> 	inc dx
 10141 000083E1 30C0                <2> 	xor al, al
 10142 000083E3 EE                  <2> 	out dx, al
 10143 000083E4 8B15[27850000]      <2> 	mov edx, [.basenicaddr]
 10144 000083EA 6681C20800          <2> 	add dx, .RSAR0
 10145 000083EF EE                  <2> 	out dx, al
 10146 000083F0 6642                <2> 	inc dx
 10147 000083F2 EE                  <2> 	out dx, al
 10148 000083F3 668B15[27850000]    <2> 	mov dx, [.basenicaddr]
 10149 000083FA B008                <2> 	mov al, 8
 10150 000083FC 0C02                <2> 	or al, 2
 10151 000083FE EE                  <2> 	out dx, al
 10152 000083FF 668B15[27850000]    <2> 	mov dx, [.basenicaddr]
 10153 00008406 6681C21000          <2> 	add dx, .ASIC
 10154 0000840B B908000000          <2> 	mov ecx, 8
 10155 00008410 BF[54850000]        <2> 	mov edi, .rom
 10156 00008415 F3666D              <2> 	rep insw
 10157                              <2> .copymac:
 10158 00008418 BF[54850000]        <2> 	mov edi, .rom
 10159 0000841D BE[4E850000]        <2> 	mov esi, .mac
 10160 00008422 B906000000          <2> 	mov ecx, 6
 10161                              <2> .lpmac:
 10162 00008427 8A07                <2> 	mov al, [edi]
 10163 00008429 8806                <2> 	mov [esi], al
 10164 0000842B 81C702000000        <2> 	add edi, 2
 10165 00008431 46                  <2> 	inc esi
 10166 00008432 E2F3                <2> 	loop .lpmac
 10167 00008434 B9[4E850000]        <2> 	mov ecx, .mac
 10168 00008439 C3                  <2> 	ret
 10169                              <2> .sendpacket:
 10170 0000843A 803D[2B850000]00    <2> 	cmp byte [.nicconfig], 0
 10171 00008441 7512                <2> 	jne .sendit
 10172 00008443 56                  <2> 	push esi
 10173 00008444 57                  <2> 	push edi
 10174 00008445 E8DEFDFFFF          <2> 	call .init
 10175 0000844A 5F                  <2> 	pop edi
 10176 0000844B 5E                  <2> 	pop esi
 10177 0000844C 81FB00000000        <2> 	cmp ebx, 0
 10178 00008452 7401                <2> 	je .sendit
 10179 00008454 C3                  <2> 	ret
 10180                              <2> .sendit: ;packet start in edi, end in esi
 10181 00008455 87F7                <2> 	xchg esi, edi ;this helps with the outsw
 10182                              <2> 	;now the packet start is in esi, end in edi
 10183 00008457 8B0D[4E850000]      <2> 	mov ecx, [.mac]
 10184 0000845D 894E06              <2> 	mov [esi + 6], ecx
 10185 00008460 668B0D[52850000]    <2> 	mov cx, [.mac + 4]
 10186 00008467 66894E0A            <2> 	mov [esi + 10], cx	;copy the correct mac
 10187 0000846B 8B15[27850000]      <2> 	mov edx, [.basenicaddr]
 10188 00008471 B020                <2> 	mov al, .CR.RD2
 10189 00008473 0C02                <2> 	or al, .CR.STA
 10190 00008475 EE                  <2> 	out dx, al ;set RD2 and STA
 10191 00008476 81C207000000        <2> 	add edx, .ISR ; ISR
 10192 0000847C B040                <2> 	mov al, .ISR.RDC
 10193 0000847E EE                  <2> 	out dx, al ;set RDC flag
 10194 0000847F 8B15[27850000]      <2> 	mov edx, [.basenicaddr]
 10195 00008485 6681C20A00          <2> 	add dx, .RBCR0
 10196 0000848A 89F8                <2> 	mov eax, edi
 10197 0000848C 29F0                <2> 	sub eax, esi
 10198 0000848E BB01000000          <2> 	mov ebx, 1
 10199 00008493 21C3                <2> 	and ebx, eax
 10200 00008495 81FB01000000        <2> 	cmp ebx, 1
 10201 0000849B 7501                <2> 	jne .nofixword
 10202 0000849D 40                  <2> 	inc eax
 10203                              <2> .nofixword:
 10204 0000849E 89C1                <2> 	mov ecx, eax ;save length in ecx
 10205 000084A0 EE                  <2> 	out dx, al
 10206 000084A1 86C4                <2> 	xchg al, ah
 10207 000084A3 6642                <2> 	inc dx
 10208 000084A5 EE                  <2> 	out dx, al ;send size
 10209 000084A6 8B15[27850000]      <2> 	mov edx, [.basenicaddr]
 10210 000084AC 6681C20800          <2> 	add dx, .RSAR0
 10211 000084B1 66A1[42850000]      <2> 	mov ax, [.pagestart]
 10212 000084B7 C1E008              <2> 	shl eax, 8
 10213 000084BA EE                  <2> 	out dx, al
 10214 000084BB 86C4                <2> 	xchg al, ah
 10215 000084BD 6642                <2> 	inc dx
 10216 000084BF EE                  <2> 	out dx, al ;send address in NIC memory
 10217 000084C0 8B15[27850000]      <2> 	mov edx, [.basenicaddr]
 10218 000084C6 B010                <2> 	mov al, .CR.RD1
 10219 000084C8 0C02                <2> 	or al, .CR.STA
 10220 000084CA EE                  <2> 	out dx, al ;set RD and STA
 10221 000084CB 89CB                <2> 	mov ebx, ecx ;save length in ebx
 10222 000084CD D1E9                <2> 	shr ecx, 1
 10223 000084CF 8B15[27850000]      <2> 	mov edx, [.basenicaddr]
 10224 000084D5 6681C21000          <2> 	add dx, 0x10
 10225 000084DA F3666F              <2> 	rep outsw ;Send the packet data
 10226 000084DD 8B15[27850000]      <2> 	mov edx, [.basenicaddr]
 10227 000084E3 6681C20700          <2> 	add dx, .ISR
 10228                              <2> .chkcopylp:
 10229 000084E8 B440                <2> 	mov ah, .ISR.RDC
 10230 000084EA EC                  <2> 	in al, dx
 10231 000084EB 20C4                <2> 	and ah, al
 10232 000084ED 80FC40              <2> 	cmp ah, 0x40
 10233 000084F0 75F6                <2> 	jne .chkcopylp	
 10234 000084F2 8B15[27850000]      <2> 	mov edx, [.basenicaddr]
 10235 000084F8 6681C20400          <2> 	add dx, 4
 10236 000084FD A0[42850000]        <2> 	mov al, [.pagestart]
 10237 00008502 EE                  <2> 	out dx, al ;send start address in pages
 10238 00008503 8B15[27850000]      <2> 	mov edx, [.basenicaddr]
 10239 00008509 81C205000000        <2> 	add edx, 0x5
 10240 0000850F 89D8                <2> 	mov eax, ebx
 10241 00008511 EE                  <2> 	out dx, al
 10242 00008512 86C4                <2> 	xchg al, ah
 10243 00008514 6642                <2> 	inc dx
 10244 00008516 EE                  <2> 	out dx, al ;send length
 10245 00008517 8B15[27850000]      <2> 	mov edx, [.basenicaddr]
 10246 0000851D B020                <2> 	mov al, 0x20
 10247 0000851F 0C04                <2> 	or al, 4
 10248 00008521 0C02                <2> 	or al, 2
 10249 00008523 EE                  <2> 	out dx, al ;set RD2, TXP, and STA
 10250 00008524 31DB                <2> 	xor ebx, ebx
 10251 00008526 C3                  <2> 	ret
 10252 00008527 00000000            <2> .basenicaddr dd 0
 10253 0000852B 00                  <2> .nicconfig db 0
 10254 0000852C 4E45323030302000    <2> .name db "NE2000 ",0
 10255 00008534 496E697469616C697A- <2> .initmsg db "Initialized.",10,0
 10256 0000853D 65642E0A00          <2>
 10257                              <2> align 2, nop
 10258 00008542 0000                <2> .pagestart dw 0
 10259 00008544 0000                <2> .pageend dw 0
 10260 00008546 00000000            <2> .ringstart dd 0
 10261 0000854A 00000000            <2> .ringend dd 0
 10262 0000854E 000000000000        <2> .mac db 0,0,0,0,0,0
 10263 00008554 00<rept>            <2> .rom times 16 db 0
 10264                              <1> %endif
 10265                              <1> network.init:
 10266                              <1> 	%ifdef rtl8139.included
 10267 00008564 E8F4FAFFFF          <1> 		call rtl8139.init
 10268                              <1> 	%endif
 10269                              <1> 	%ifdef rtl8169.included
 10270                              <1> 		call rtl8169.init
 10271                              <1> 	%endif
 10272                              <1> 	%ifdef ne2000.included
 10273 00008569 E8BAFCFFFF          <1> 		call ne2000.init
 10274                              <1> 	%endif
 10275 0000856E C3                  <1> 	ret
 10276                              <1> 
 10277                              <1> sendpacket: ;packet start in edi, end in esi
 10278                              <1> 	%ifdef rtl8139.included
 10279 0000856F 57                  <1> 		push edi
 10280 00008570 56                  <1> 		push esi
 10281 00008571 E8F8FBFFFF          <1> 		call rtl8139.sendpacket
 10282 00008576 5E                  <1> 		pop esi
 10283 00008577 5F                  <1> 		pop edi
 10284                              <1> 	%endif
 10285                              <1> 	%ifdef rtl8169.included
 10286                              <1> 		push edi
 10287                              <1> 		push esi
 10288                              <1> 		call rtl8169.sendpacket
 10289                              <1> 		pop esi
 10290                              <1> 		pop edi
 10291                              <1> 	%endif
 10292                              <1> 	%ifdef ne2000.included
 10293 00008578 E8BDFEFFFF          <1> 		call ne2000.sendpacket
 10294                              <1> 	%endif
 10295 0000857D C3                  <1> 	ret
 10296                              <1> 
 10297                              <1> getchecksum: ;start in edi, end in esi, checksum put in ecx
 10298 0000857E 31C0                <1> 	xor eax, eax
 10299 00008580 31DB                <1> 	xor ebx, ebx
 10300 00008582 31C9                <1> 	xor ecx, ecx
 10301                              <1> .lp:
 10302 00008584 8A07                <1> 	mov al, [edi]
 10303 00008586 8A6701              <1> 	mov ah, [edi + 1]
 10304 00008589 01C3                <1> 	add ebx, eax
 10305 0000858B 81C702000000        <1> 	add edi, 2
 10306 00008591 39F7                <1> 	cmp edi, esi
 10307 00008593 72EF                <1> 	jb .lp
 10308 00008595 66B9FFFF            <1> 	mov cx, 0xFFFF
 10309 00008599 6689D8              <1> 	mov ax, bx
 10310 0000859C C1EB10              <1> 	shr ebx, 16
 10311 0000859F 6601D8              <1> 	add ax, bx
 10312 000085A2 6629C1              <1> 	sub cx, ax
 10313 000085A5 C3                  <1> 	ret
 10314                              <1> 	
 10315                              <1> strtoip:	;string in esi with format X.X.X.X converted to number in ecx
 10316 000085A6 31DB                <1> 	xor ebx, ebx
 10317 000085A8 31C9                <1> 	xor ecx, ecx
 10318 000085AA 31D2                <1> 	xor edx, edx
 10319                              <1> .mlp:
 10320 000085AC 89F7                <1> 	mov edi, esi
 10321 000085AE 4F                  <1> 	dec edi
 10322                              <1> .lp:
 10323 000085AF 47                  <1> 	inc edi
 10324 000085B0 8A07                <1> 	mov al, [edi]
 10325 000085B2 3C20                <1> 	cmp al, " "
 10326 000085B4 7408                <1> 	je .dnlp
 10327 000085B6 3C00                <1> 	cmp al, 0
 10328 000085B8 7404                <1> 	je .dnlp
 10329 000085BA 3C2E                <1> 	cmp al, "."
 10330 000085BC 75F1                <1> 	jne .lp
 10331                              <1> .dnlp:
 10332 000085BE 30C0                <1> 	xor al, al
 10333 000085C0 8807                <1> 	mov [edi], al
 10334 000085C2 53                  <1> 	push ebx
 10335 000085C3 56                  <1> 	push esi
 10336 000085C4 57                  <1> 	push edi
 10337 000085C5 31FF                <1> 	xor edi, edi
 10338 000085C7 E8FBAAFFFF          <1> 	call cnvrttxt
 10339 000085CC 5E                  <1> 	pop esi
 10340 000085CD 5F                  <1> 	pop edi ;i intentionally switch them
 10341 000085CE 5B                  <1> 	pop ebx
 10342 000085CF 46                  <1> 	inc esi
 10343 000085D0 BF[E8850000]        <1> 	mov edi, ipstr
 10344 000085D5 880C1F              <1> 	mov [edi + ebx], cl
 10345 000085D8 43                  <1> 	inc ebx
 10346 000085D9 81FB04000000        <1> 	cmp ebx, 4
 10347 000085DF 72CB                <1> 	jb .mlp
 10348 000085E1 8B0D[E8850000]      <1> 	mov ecx, [ipstr]
 10349 000085E7 C3                  <1> 	ret
 10350 000085E8 00000000            <1> ipstr dd 0
 10351                              <1> showip: 	;put the ip address in ecx
 10352 000085EC 89C8                <1> 	mov eax, ecx
 10353 000085EE 30DB                <1> 	xor bl, bl
 10354                              <1> .lp
 10355 000085F0 3C00                <1> 	cmp al, 0
 10356 000085F2 750B                <1> 	jne .nozeroprint
 10357 000085F4 B030                <1> 	mov al, "0"
 10358 000085F6 50                  <1> 	push eax
 10359 000085F7 E8959CFFFF          <1> 	call prcharq
 10360 000085FC 58                  <1> 	pop eax
 10361 000085FD 30C0                <1> 	xor al, al
 10362                              <1> .nozeroprint:
 10363 000085FF 31C9                <1> 	xor ecx, ecx
 10364 00008601 88C1                <1> 	mov cl, al
 10365 00008603 E8DAA9FFFF          <1> 	call showdec
 10366 00008608 C1E808              <1> 	shr eax, 8
 10367 0000860B FEC3                <1> 	inc bl
 10368 0000860D 80FB04              <1> 	cmp bl, 4
 10369 00008610 7315                <1> 	jae .done
 10370 00008612 50                  <1> 	push eax
 10371 00008613 6653                <1> 	push bx
 10372 00008615 BE[28860000]        <1> 	mov esi, .dot
 10373 0000861A E81F97FFFF          <1> 	call print
 10374 0000861F 665B                <1> 	pop bx
 10375 00008621 58                  <1> 	pop eax
 10376 00008622 E9C9FFFFFF          <1> 	jmp .lp
 10377                              <1> .done:
 10378 00008627 C3                  <1> 	ret
 10379 00008628 082E00              <1> .dot db 8,".",0
 10380                              <1> showmac:	;mac begins in [ecx]
 10381 0000862B BE[7B860000]        <1> 	mov esi, macprint
 10382 00008630 89CF                <1> 	mov edi, ecx
 10383 00008632 81C106000000        <1> 	add ecx, 6
 10384                              <1> showmacloop:
 10385 00008638 8A07                <1> 	mov al, [edi]
 10386 0000863A 8A27                <1> 	mov ah, [edi]
 10387 0000863C C0E804              <1> 	shr al, 4
 10388 0000863F C0E404              <1> 	shl ah, 4
 10389 00008642 C0EC04              <1> 	shr ah, 4
 10390 00008645 0430                <1> 	add al, 48
 10391 00008647 3C39                <1> 	cmp al, "9"
 10392 00008649 7606                <1> 	jbe .goodal
 10393 0000864B 2C30                <1> 	sub al, 48
 10394 0000864D 2C0A                <1> 	sub al, 0xA
 10395 0000864F 0441                <1> 	add al, "A"
 10396                              <1> .goodal:
 10397 00008651 80C430              <1> 	add ah, 48
 10398 00008654 80FC39              <1> 	cmp ah, "9"
 10399 00008657 7609                <1> 	jbe .goodah
 10400 00008659 80EC30              <1> 	sub ah, 48
 10401 0000865C 80EC0A              <1> 	sub ah, 0xA
 10402 0000865F 80C441              <1> 	add ah, "A"
 10403                              <1> .goodah:
 10404 00008662 668906              <1> 	mov [esi], ax
 10405 00008665 81C603000000        <1> 	add esi, 3
 10406 0000866B 47                  <1> 	inc edi
 10407 0000866C 39CF                <1> 	cmp edi, ecx
 10408 0000866E 72C8                <1> 	jb showmacloop
 10409 00008670 BE[7B860000]        <1> 	mov esi, macprint
 10410 00008675 E8C496FFFF          <1> 	call print
 10411 0000867A C3                  <1> 	ret
 10412                              <1> 	
 10413 0000867B 30303A30303A30303A- <1> macprint db "00:00:00:00:00:00 ",0
 10414 00008684 30303A30303A303020- <1>
 10415 0000868D 00                  <1>
 10416 0000868E 00000000            <1> ethernetend dw 0,0
 10417 00008692 C0A80002            <1> sysip db 192,168,0,2
 10418 00008696 000000000000        <1> sysmac	db 0,0,0,0,0,0		;my mac address
 10419                                  %endif
 10420                                      %include "source/data.asm"
 10421 0000869C 626F6F742E736800    <1> 	bootfilename db "boot.sh",0
 10422 000086A4 73687573683A2000    <1> 	notfound1 db "shush: ",0
 10423 000086AC 3A206E6F7420666F75- <1> 	notfound2 db  ": not found",10,0
 10424 000086B5 6E640A00            <1>
 10425 000086B9 757365726E616D653A- <1> 	userask db "username:",0
 10426 000086C2 00                  <1>
 10427 000086C3 70617373776F72643A- <1> 	pwdask	db	"password:",0
 10428 000086CC 00                  <1>
 10429 000086CD 40                  <1> 	computer db "@"
 10430                              <1> %ifdef io.serial
 10431                              <1> 	computername	db	"SollerOS.",io.serial," ",0
 10432                              <1> %else
 10433 000086CE 536F6C6C65724F5320- <1> 	computername	db	"SollerOS ",0
 10434 000086D7 00                  <1>
 10435                              <1> %endif
 10436 000086D8 5D242000            <1> 	endprompt db "]$ ",0
 10437 000086DC 0D                  <1> 	crlf 	db  13
 10438 000086DD 0A00                <1> 	line	db	10,0
 10439                              <1> 	userlst:
 10440 000086DF 726F6F7400          <1> 			db "root",0
 10441 000086E4 617765736F6D65706F- <1> 			db "awesomepower",0
 10442 000086ED 77657200            <1>
 10443 000086F1 7573657200          <1> 			db "user",0
 10444 000086F6 70617373776F726400  <1> 			db "password",0
 10445 000086FF 6E00                <1> 			db "n",0	;;abuse for quick entry-a quick double n followed by a double enter will get you in
 10446 00008701 00                  <1> 			db 0
 10447                              <1> 	userlstend:
 10448                              <1> 	
 10449                              <1> %ifdef io.serial
 10450                              <1> %else
 10451 00008702 <incbin>            <1> fonts:	incbin "source/precompiled/fonts.pak"
 10452                              <1> fontend:
 10453                              <1> %endif
 10454                              <1> osend:	;this is the end of the operating system's space on disk
 10455                                      %include "build/fileindex.asm"
 10456                              <1> diskfileindex:
 10457 00009702 617267746573742E65- <1> db "argtest.elf",0
 10458 0000970B 6C6600              <1>
 10459 0000970E 4D000000            <1> dd (f0-$$)/512
 10460 00009712 06010000            <1> dd (f1-f0)/512
 10461 00009716 6261636B67726F756E- <1> db "background.bmp",0
 10462 0000971F 642E626D7000        <1>
 10463 00009725 53010000            <1> dd (f1-$$)/512
 10464 00009729 01140000            <1> dd (f2-f1)/512
 10465 0000972D 626F6F742E736800    <1> db "boot.sh",0
 10466 00009735 54150000            <1> dd (f2-$$)/512
 10467 00009739 01000000            <1> dd (f3-f2)/512
 10468 0000973D 63686172746573742E- <1> db "chartest.elf",0
 10469 00009746 656C6600            <1>
 10470 0000974A 55150000            <1> dd (f3-$$)/512
 10471 0000974E 26010000            <1> dd (f4-f3)/512
 10472 00009752 646F73746573742E63- <1> db "dostest.com",0
 10473 0000975B 6F6D00              <1>
 10474 0000975E 7B160000            <1> dd (f4-$$)/512
 10475 00009762 01000000            <1> dd (f5-f4)/512
 10476 00009766 6578656300          <1> db "exec",0
 10477 0000976B 7C160000            <1> dd (f5-$$)/512
 10478 0000976F 01000000            <1> dd (f6-f5)/512
 10479 00009773 66696E616C636F756E- <1> db "finalcount.sn",0
 10480 0000977C 742E736E00          <1>
 10481 00009781 7D160000            <1> dd (f6-$$)/512
 10482 00009785 01000000            <1> dd (f7-f6)/512
 10483 00009789 666F726B00          <1> db "fork",0
 10484 0000978E 7E160000            <1> dd (f7-$$)/512
 10485 00009792 01000000            <1> dd (f8-f7)/512
 10486 00009796 68656C6C6F776F726C- <1> db "helloworld.elf",0
 10487 0000979F 642E656C6600        <1>
 10488 000097A5 7F160000            <1> dd (f8-$$)/512
 10489 000097A9 D6010000            <1> dd (f9-f8)/512
 10490 000097AD 696E7400            <1> db "int",0
 10491 000097B1 55180000            <1> dd (f9-$$)/512
 10492 000097B5 01000000            <1> dd (f10-f9)/512
 10493 000097B9 6C6F7374776F6F6473- <1> db "lostwoods.sn",0
 10494 000097C2 2E736E00            <1>
 10495 000097C6 56180000            <1> dd (f10-$$)/512
 10496 000097CA 01000000            <1> dd (f11-f10)/512
 10497 000097CE 6D6172696F2E736E00  <1> db "mario.sn",0
 10498 000097D7 57180000            <1> dd (f11-$$)/512
 10499 000097DB 01000000            <1> dd (f12-f11)/512
 10500 000097DF 70692E656C6600      <1> db "pi.elf",0
 10501 000097E6 58180000            <1> dd (f12-$$)/512
 10502 000097EA 1F010000            <1> dd (f13-f12)/512
 10503 000097EE 736F6C6C65726F732E- <1> db "solleros.bmp",0
 10504 000097F7 626D7000            <1>
 10505 000097FB 77190000            <1> dd (f13-$$)/512
 10506 000097FF B0020000            <1> dd (f14-f13)/512
 10507 00009803 736F6C6C65726F732E- <1> db "solleros.txt",0
 10508 0000980C 74787400            <1>
 10509 00009810 271C0000            <1> dd (f14-$$)/512
 10510 00009814 01000000            <1> dd (f15-f14)/512
 10511 00009818 736F6E676F74696D65- <1> db "songotime.sn",0
 10512 00009821 2E736E00            <1>
 10513 00009825 281C0000            <1> dd (f15-$$)/512
 10514 00009829 01000000            <1> dd (f16-f15)/512
 10515 0000982D 73736500            <1> db "sse",0
 10516 00009831 291C0000            <1> dd (f16-$$)/512
 10517 00009835 02000000            <1> dd (f17-f16)/512
 10518 00009839 737464696F74657374- <1> db "stdiotest.elf",0
 10519 00009842 2E656C6600          <1>
 10520 00009847 2B1C0000            <1> dd (f17-$$)/512
 10521 0000984B 27010000            <1> dd (f18-f17)/512
 10522 0000984F 74656C7900          <1> db "tely",0
 10523 00009854 521D0000            <1> dd (f18-$$)/512
 10524 00009858 01000000            <1> dd (f19-f18)/512
 10525 0000985C 74696D65746573742E- <1> db "timetest.elf",0
 10526 00009865 656C6600            <1>
 10527 00009869 531D0000            <1> dd (f19-$$)/512
 10528 0000986D 04010000            <1> dd (f20-f19)/512
 10529 00009871 7475746F7269616C2E- <1> db "tutorial.sh",0
 10530 0000987A 736800              <1>
 10531 0000987D 571E0000            <1> dd (f20-$$)/512
 10532 00009881 03000000            <1> dd (f21-f20)/512
 10533 00009885 756E667300          <1> db "unfs",0
 10534 0000988A 5A1E0000            <1> dd (f21-$$)/512
 10535 0000988E 02000000            <1> dd (f22-f21)/512
 10536 00009892 766963746F72792E77- <1> db "victory.wav",0
 10537 0000989B 617600              <1>
 10538 0000989E 5C1E0000            <1> dd (f22-$$)/512
 10539 000098A2 16000000            <1> dd (f23-f22)/512
 10540 000098A6 5F696D672E62696E00  <1> db "_img.bin",0
 10541 000098AF 721E0000            <1> dd (f23-$$)/512
 10542 000098B3 D7020000            <1> dd (f24-f23)/512
 10543                              <1> enddiskfileindex:
 10544                              <1> 
 10545                                      %include "source/bss.asm"
 10546 000098B7 90                  <1> align 4, nop
 10547                              <1> bssstart: equ $
 10548                              <1> guion equ bssstart
 10549                              <1> DriveNumber equ guion + 1
 10550                              <1> lbaad equ DriveNumber + 1
 10551                              <1> memlistbuf equ lbaad + 4
 10552                              <1> memlistend equ memlistbuf + 576
 10553                              <1> bsscopy equ memlistend
 10554                              <1> initialstack equ bsscopy
 10555                              <1> stackend equ initialstack + 4000
 10556                              <1> fileindex: equ stackend + 96
 10557                              <1> fileindexend: equ fileindex + 1024
 10558                              <1> previousstack equ fileindexend
 10559                              <1> lastfolderloc equ previousstack + 4
 10560                              <1> currentfolderloc equ lastfolderloc + 4
 10561                              <1> currentfolder equ currentfolderloc + 4
 10562                              <1> currentfolderend equ currentfolder + 512
 10563                              <1> uid equ currentfolderend
 10564                              <1> ranboot equ uid + 4
 10565                              <1> IFON equ ranboot + 1
 10566                              <1> IFTRUE equ IFON + 1
 10567                              <1> BATCHPOS equ IFTRUE + 100
 10568                              <1> BATCHISON equ BATCHPOS + 4
 10569                              <1> LOOPON equ BATCHISON + 1
 10570                              <1> LOOPPOS	equ LOOPON + 1
 10571                              <1> variables: equ LOOPPOS + 4
 10572                              <1> varend: equ variables + 4096
 10573                              <1> buftxt2: equ varend
 10574                              <1> buftxt: equ buftxt2 + 1024
 10575                              <1> buftxtend: equ buftxt + 1024
 10576                              <1> buf2: equ buftxtend
 10577                              <1> numbuf: equ buf2 + 20
 10578                              <1> %ifdef io.serial
 10579                              <1> 	lastcommandpos equ numbuf + 1
 10580                              <1> %else
 10581                              <1> 	%ifdef gui.included
 10582                              <1> 		graphicstable equ numbuf + 1 ;w type, dw datalocation, w locationx, w locationy, w selected, dw code
 10583                              <1> 		graphicstableend equ graphicstable + 200h
 10584                              <1> 		%ifdef gui.background
 10585                              <1> 			backgroundbuffer equ graphicstableend
 10586                              <1> 			backgroundbufferend equ backgroundbuffer + 1280*1026*2
 10587                              <1> 			mousecolorbuf equ backgroundbufferend
 10588                              <1> 		%else
 10589                              <1> 			mousecolorbuf equ graphicstableend ;where the gui under the mouse is stored
 10590                              <1> 		%endif
 10591                              <1> 		mcolorend equ mousecolorbuf + 256
 10592                              <1> 		videobuf equ mcolorend + 1	;1680x1050 pixels in characters
 10593                              <1> 		videobufend	equ videobuf + 210*65*2
 10594                              <1> 		videobuf2 equ videobufend
 10595                              <1> 		videobuf2end equ videobuf2 + 210*65*2
 10596                              <1> 	%else
 10597                              <1> 		videobuf equ numbuf + 1
 10598                              <1> 		videobufend equ videobuf + 80*30*2
 10599                              <1> 		videobuf2 equ videobufend
 10600                              <1> 		videobuf2end equ videobuf2 + 160*64*2
 10601                              <1> 	%endif
 10602                              <1> 	lastcommandpos: equ videobuf2end
 10603                              <1> %endif
 10604                              <1> 	commandbufpos: equ lastcommandpos + 4
 10605                              <1> 	commandlistentries: equ commandbufpos + 4
 10606                              <1> 	commandsentered: equ commandlistentries + 4
 10607                              <1> 	commandbuf: equ commandsentered + 4
 10608                              <1> 	commandbufend: equ commandbuf + 4096 ;this is where kernel space only ends, the rest is for threading
 10609                              <1> %ifdef network.included
 10610                              <1> 	rbuffstart: equ commandbufend ;for use with networking
 10611                              <1> 	rbuffend equ rbuffstart + 8212
 10612                              <1> %else
 10613                              <1> 	rbuffstart equ commandbufend
 10614                              <1> 	rbuffend equ commandbufend
 10615                              <1> %endif
 10616                              <1> %ifdef threads.included
 10617                              <1> 	threadlist: equ rbuffend ;this buffer will hold the stack locations of all of the threads, up to 2048
 10618                              <1> 	threadlistend: equ threadlist + 1024*4
 10619                              <1> 	stacks:	equ threadlistend ;i use SS now for proper stack management. This makes sure stacks never screw with other memory
 10620                              <1> 	stack1: equ stacks + 1024  ;woah, thats a lot of space for stacks
 10621                              <1> 	bssend equ stack1 + 1024*1024
 10622                              <1> %else
 10623                              <1> 	bssend equ rbuffend
 10624                              <1> %endif
 10625                              <1> dosprogloc equ 0x400000 ;from here on, it is not kernel space so apps can be loaded here.
 10626                                      %include "build/files.asm"
 10627 000098B8 00<rept>            <1> align 512,db 0
 10628                              <1> f0:
 10629 00009A00 <incbin>            <1> incbin "included/argtest.elf"
 10630 0002A50B 00<rept>            <1> align 512,db 0
 10631                              <1> f1:
 10632 0002A600 <incbin>            <1> incbin "included/background.bmp"
 10633 002AA646 00<rept>            <1> align 512,db 0
 10634                              <1> f2:
 10635 002AA800 <incbin>            <1> incbin "included/boot.sh"
 10636 002AA905 00<rept>            <1> align 512,db 0
 10637                              <1> f3:
 10638 002AAA00 <incbin>            <1> incbin "included/chartest.elf"
 10639 002CF4E4 00<rept>            <1> align 512,db 0
 10640                              <1> f4:
 10641 002CF600 <incbin>            <1> incbin "included/dostest.com"
 10642 002CF72B 00<rept>            <1> align 512,db 0
 10643                              <1> f5:
 10644 002CF800 <incbin>            <1> incbin "included/exec"
 10645 002CF8E9 00<rept>            <1> align 512,db 0
 10646                              <1> f6:
 10647 002CFA00 <incbin>            <1> incbin "included/finalcount.sn"
 10648 002CFB02 00<rept>            <1> align 512,db 0
 10649                              <1> f7:
 10650 002CFC00 <incbin>            <1> incbin "included/fork"
 10651 002CFD62 00<rept>            <1> align 512,db 0
 10652                              <1> f8:
 10653 002CFE00 <incbin>            <1> incbin "included/helloworld.elf"
 10654                              <1> align 512,db 0
 10655                              <1> f9:
 10656 0030AA00 <incbin>            <1> incbin "included/int"
 10657 0030ABA9 00<rept>            <1> align 512,db 0
 10658                              <1> f10:
 10659 0030AC00 <incbin>            <1> incbin "included/lostwoods.sn"
 10660 0030AC56 00<rept>            <1> align 512,db 0
 10661                              <1> f11:
 10662 0030AE00 <incbin>            <1> incbin "included/mario.sn"
 10663 0030AE3A 00<rept>            <1> align 512,db 0
 10664                              <1> f12:
 10665 0030B000 <incbin>            <1> incbin "included/pi.elf"
 10666 0032ED4E 00<rept>            <1> align 512,db 0
 10667                              <1> f13:
 10668 0032EE00 <incbin>            <1> incbin "included/solleros.bmp"
 10669 00384DE6 00<rept>            <1> align 512,db 0
 10670                              <1> f14:
 10671 00384E00 <incbin>            <1> incbin "included/solleros.txt"
 10672 00384F74 00<rept>            <1> align 512,db 0
 10673                              <1> f15:
 10674 00385000 <incbin>            <1> incbin "included/songotime.sn"
 10675 0038504A 00<rept>            <1> align 512,db 0
 10676                              <1> f16:
 10677 00385200 <incbin>            <1> incbin "included/sse"
 10678 003854A8 00<rept>            <1> align 512,db 0
 10679                              <1> f17:
 10680 00385600 <incbin>            <1> incbin "included/stdiotest.elf"
 10681 003AA25C 00<rept>            <1> align 512,db 0
 10682                              <1> f18:
 10683 003AA400 <incbin>            <1> incbin "included/tely"
 10684 003AA5C7 00<rept>            <1> align 512,db 0
 10685                              <1> f19:
 10686 003AA600 <incbin>            <1> incbin "included/timetest.elf"
 10687 003CAC56 00<rept>            <1> align 512,db 0
 10688                              <1> f20:
 10689 003CAE00 <incbin>            <1> incbin "included/tutorial.sh"
 10690 003CB352 00<rept>            <1> align 512,db 0
 10691                              <1> f21:
 10692 003CB400 <incbin>            <1> incbin "included/unfs"
 10693                              <1> align 512,db 0
 10694                              <1> f22:
 10695 003CB800 <incbin>            <1> incbin "included/victory.wav"
 10696 003CE348 00<rept>            <1> align 512,db 0
 10697                              <1> f23:
 10698 003CE400 <incbin>            <1> incbin "included/_img.bin"
 10699                              <1> align 512,db 0
 10700                              <1> f24:
