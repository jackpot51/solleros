     1                                  [map symbols build/kernel.map]
     2                                  %include "config.asm"
     3                              <1> ;These flags are used to configure options as on, put a simicolon in front of it to not configure it
     4                              <1> 
     5                              <1> %define gui.included
     6                              <1> ;Turn on the gui
     7                              <1> 
     8                              <1> %define gui.alphablending
     9                              <1> ;Make the terminal in the GUI 25% transparent
    10                              <1> 
    11                              <1> %define gui.background
    12                              <1> ;Make the GUI have a loadable background
    13                              <1> 
    14                              <1> ;%define io.serial "1"
    15                              <1> ;Use the specified serial port for input and output instead of the keyboard and screen
    16                              <1> ;If the gui is included this should not be enabled
    17                              <1> 
    18                              <1> ;%define terminal.vsync
    19                              <1> ;Uses the RTC to automatically update the terminal at ~64Hz
    20                              <1> 
    21                              <1> %define hardware.automatic
    22                              <1> ;Automatically load the sound and network drivers.
    23                              <1> 
    24                              <1> %define threads.included
    25                              <1> ;Include the thread testing stuff-this uses a relatively large amount of memory
    26                              <1> 
    27                              <1> %define exceptions.included
    28                              <1> ;Display debugging information should crashes occur-also uses quite a bit of memory
    29                              <1> 
    30                              <1> ;%define disk.protected
    31                              <1> ;Use protected mode instead of real mode for disk access-this allows for multitasking
    32                              <1> 
    33                              <1> %define disk.real
    34                              <1> ;Use real mode for disk access-this gives greater compatibility
    35                              <1> 
    36                              <1> %define sound.included
    37                              <1> ;This includes the sound drivers
    38                              <1> 
    39                              <1> %define network.included
    40                              <1> ;This includes the network stack
    41                              <1> 
    42                              <1> ;%define rtl8139.included
    43                              <1> ;This includes the RTL8139 drivers
    44                              <1> 
    45                              <1> %define ne2000.included
    46                              <1> ;This includes the ne2000 drivers
    47                              <1> 
    48                              <1> ;%define sector.debug
    49                              <1> ;Dump the contents of the first sector of SollerOS
    50                              <1> 
    51                              <1> ;%define system.simple 
    52                              <1> ;The smallest possible system, overrides all options
    53                              <1> 
    54                              <1> ;FIX DEPENDANCIES
    55                              <1> %ifdef gui.included
    56                              <1> 	%undef io.serial
    57                              <1> %else
    58                              <1> 	%undef gui.alphablending
    59                              <1> 	%undef gui.background
    60                              <1> %endif
    61                              <1> %ifdef disk.protected
    62                              <1> 	%undef disk.real
    63                              <1> %endif
    64                              <1> %ifdef network.included
    65                              <1> %else
    66                              <1> 	%undef ne2000.included
    67                              <1> 	%undef rtl8139.included
    68                              <1> %endif
    69                              <1> %ifdef system.simple
    70                              <1> 	%define io.serial "1"
    71                              <1> 	%define disk.real
    72                              <1> 	%undef gui.included
    73                              <1> 	%undef gui.alphablending
    74                              <1> 	%undef gui.background
    75                              <1> 	%undef terminal.vsync
    76                              <1> 	%undef hardware.automatic
    77                              <1> 	%undef threads.included
    78                              <1> 	%undef exceptions.included
    79                              <1> 	%undef disk.protected
    80                              <1> 	%undef sound.included
    81                              <1> 	%undef network.included
    82                              <1> 	%undef rtl8139.included
    83                              <1> 	%undef ne2000.included
    84                              <1> 	%undef sector.debug
    85                              <1> %endif
    86                                  [BITS 16]
    87                                      %include "source/boot.asm"
    88                              <1>     ; MENU.ASM
    89                              <1> %include 'source/signature.asm'
    90                              <2> signature:
    91 00000000 536F6C6C65724F53    <2> db "SollerOS" ;Operating system name
    92 00000008 20416C706861204275- <2> db " Alpha Build ",0	;Soller OS development level
    93 00000011 696C642000          <2>
    94 00000016 DE000000            <2> dd 222	;version number
    95                              <2> signatureend:
    96                              <1> menustart:	
    97 0000001A 8CC8                <1> 	mov ax, cs
    98 0000001C 8ED8                <1> 	mov ds, ax
    99 0000001E 8EC0                <1> 	mov es, ax
   100 00000020 8ED0                <1> 	mov ss, ax
   101 00000022 880E[5195]          <1> 	mov [DriveNumber], cl
   102 00000026 668916[5295]        <1> 	mov [lbaad], edx
   103                              <1> %ifdef io.serial
   104                              <1> 	call getmemorysize
   105                              <1> 	mov si, serialmsg
   106                              <1> 	call printrm
   107                              <1> 	jmp pmode
   108                              <1> serialmsg: db "SollerOS: Using serial port ",io.serial," for I/O.",0
   109                              <1> %else
   110 0000002B E80300              <1> 	call vgaset	;make users switch using a command-this leads to very fast boots
   111 0000002E E95700              <1> 	jmp pmode
   112                              <1> %endif
   113                              <1> 	
   114                              <1> vgaset:
   115 00000031 B81200              <1> 	mov ax, 12h
   116 00000034 31DB                <1> 	xor bx, bx
   117 00000036 CD10                <1> 	int 10h
   118 00000038 C606[5095]00        <1> 	mov byte [guion], 0
   119 0000003D E80100              <1> 	call getmemorysize;get the memory map after the video is initialized
   120 00000040 C3                  <1> 	ret
   121                              <1> 
   122                              <1> getmemorysize:
   123 00000041 BF[5695]            <1> 	mov di, memlistbuf
   124 00000044 6631DB              <1> 	xor ebx, ebx
   125                              <1> getmemsizeloop:
   126 00000047 66B820E80000        <1> 	mov eax, 0xE820
   127 0000004D 66BA50414D53        <1> 	mov edx, 0x0534D4150
   128 00000053 66B918000000        <1> 	mov ecx, 24
   129 00000059 CD15                <1> 	int 0x15
   130 0000005B 81C71800            <1> 	add di, 24
   131 0000005F 81FF[9697]          <1> 	cmp di, memlistend
   132 00000063 7309                <1> 	jae nomoregetmemsize
   133 00000065 6681FB00000000      <1> 	cmp ebx, 0
   134 0000006C 75D9                <1> 	jne getmemsizeloop
   135                              <1> nomoregetmemsize:
   136 0000006E 81EF[5695]          <1> 	sub di, memlistbuf
   137 00000072 893E[9697]          <1> 	mov [memlistend], di
   138 00000076 C3                  <1> 	ret
   139                              <1> 	
   140                              <1> printrm:			; 'si' comes in with string address
   141 00000077 BB0700              <1>     mov bx,07		; write to display
   142 0000007A B40E                <1>     mov ah,0Eh		; screen function
   143 0000007C 8A04                <1>    .lp:    mov al,[si]         ; get next character
   144 0000007E 3C00                <1>     cmp al,0		; look for terminator 
   145 00000080 7405                <1>     je .done		; zero byte at end of string
   146 00000082 CD10                <1>     int 10h		; write character to screen.    
   147 00000084 46                  <1> 	inc si	     	; move to next character
   148 00000085 EBF5                <1>     jmp .lp		; loop
   149 00000087 C3                  <1> .done: ret
   150                                      %include "source/pmode.asm"
   151                              <1> [BITS 16]
   152                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   153                              <1> ;	16-bit real mode
   154                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   155                              <1> 
   156                              <1> pmode:
   157 00000088 6631C0              <1> 	xor eax, eax
   158 0000008B 6631DB              <1> 	xor ebx, ebx
   159 0000008E 6631C9              <1> 	xor ecx, ecx
   160 00000091 6631D2              <1> 	xor edx, edx
   161 00000094 6631F6              <1> 	xor esi, esi
   162 00000097 6631FF              <1> 	xor edi, edi
   163 0000009A BA9200              <1> 	mov dx, 0x92
   164 0000009D EC                  <1> 	in al, dx	;;A20
   165 0000009E 0C02                <1> 	or al, 2
   166 000000A0 EE                  <1> 	out dx, al
   167 000000A1 8CCB                <1> 	mov bx,cs		; EBX=segment
   168 000000A3 66C1E304            <1> 	shl ebx,4		;	<< 4
   169 000000A7 67668D03            <1> 	lea eax,[ebx]		; EAX=linear address of segment base
   170 000000AB A3[7803]            <1> 	mov [gdt2 + 2],ax
   171 000000AE A3[8003]            <1> 	mov [gdt3 + 2],ax
   172 000000B1 66C1E810            <1> 	shr eax,16
   173 000000B5 A2[7A03]            <1> 	mov [gdt2 + 4],al
   174 000000B8 A2[8203]            <1> 	mov [gdt3 + 4],al
   175 000000BB 8826[7D03]          <1> 	mov [gdt2 + 7],ah
   176 000000BF 8826[8503]          <1> 	mov [gdt3 + 7],ah
   177                              <1> 
   178 000000C3 66B8[96970000]      <1> 	mov eax, initialstack
   179 000000C9 660306[4202]        <1> 	add eax, [newcodecache]
   180 000000CE A3[7003]            <1> 	mov [gdts + 2],ax
   181 000000D1 66C1E810            <1> 	shr eax, 16
   182 000000D5 A2[7203]            <1> 	mov [gdts + 4],al
   183 000000D8 8826[7503]          <1> 	mov [gdts + 7], ah
   184                              <1> 	
   185 000000DC 66A1[4202]          <1> 	mov eax, [newcodecache]
   186 000000E0 A3[8803]            <1> 	mov [gdt4 + 2],ax
   187 000000E3 A3[9003]            <1> 	mov [gdt5 + 2],ax
   188 000000E6 A3[9803]            <1> 	mov [gdtv8086 + 2], ax
   189 000000E9 A3[A003]            <1> 	mov [gdtv80862 + 2], ax
   190 000000EC 66C1E810            <1> 	shr eax,16
   191 000000F0 A2[8A03]            <1> 	mov [gdt4 + 4],al
   192 000000F3 A2[9203]            <1> 	mov [gdt5 + 4],al
   193 000000F6 A2[9A03]            <1> 	mov [gdtv8086 + 4],al
   194 000000F9 A2[A203]            <1> 	mov [gdtv80862 + 4],al
   195 000000FC 8826[8D03]          <1> 	mov [gdt4 + 7],ah
   196 00000100 8826[9503]          <1> 	mov [gdt5 + 7],ah
   197 00000104 8826[9D03]          <1> 	mov [gdtv8086 + 7],ah
   198 00000108 8826[A503]          <1> 	mov [gdtv80862 + 7],ah
   199                              <1> 	
   200 0000010C 66B800004000        <1> 	mov eax, dosprogloc
   201 00000112 660306[4202]        <1> 	add eax, [newcodecache]
   202 00000117 A3[A803]            <1> 	mov [gdtdos + 2],ax
   203 0000011A A3[B003]            <1> 	mov [gdtdos2 + 2],ax
   204 0000011D 66C1E810            <1> 	shr eax,16
   205 00000121 A2[AA03]            <1> 	mov [gdtdos + 4],al
   206 00000124 A2[B203]            <1> 	mov [gdtdos2 + 4],al
   207 00000127 8826[AD03]          <1> 	mov [gdtdos + 7],ah
   208 0000012B 8826[B503]          <1> 	mov [gdtdos2 + 7],ah
   209                              <1> 	
   210                              <1> ; fix up gdt and idt
   211 0000012F 67668D83[5E030000]  <1> 	lea eax,[ebx + gdt]	; EAX=linear address of gdt
   212 00000137 66A3[5403]          <1> 	mov [gdtr + 2],eax
   213 0000013B 67668D83[B6030000]  <1> 	lea eax,[ebx + idt]	; EAX=linear address of idt
   214 00000143 66A3[5A03]          <1> 	mov [idtr + 2],eax
   215 00000147 FA                  <1> 	cli
   216 00000148 0F0116[5203]        <1> 	lgdt [gdtr]
   217 0000014D 0F011E[5803]        <1> 	lidt [idtr]
   218 00000152 6631DB              <1> 	xor ebx, ebx
   219 00000155 8CDB                <1> 	mov bx, ds
   220 00000157 66891E[3E02]        <1> 	mov [basecache], ebx
   221 0000015C 0F20C0              <1> 	mov eax,cr0
   222 0000015F 0C01                <1> 	or al,1
   223 00000161 0F22C0              <1> 	mov cr0,eax
   224 00000164 EA[6901]1800        <1> 	jmp SYS_CODE_SEL:do_pm
   225                              <1> [BITS 32]
   226                              <1> do_pm:
   227 00000169 31C0                <1> 	xor eax, eax
   228 0000016B 66B82000            <1> 	mov ax, SYS_DATA_SEL
   229 0000016F 8ED8                <1> 	mov ds, ax
   230 00000171 8EC0                <1> 	mov es, ax
   231 00000173 8EE0                <1> 	mov fs, ax
   232 00000175 66B83000            <1> 	mov ax, NEW_DATA_SEL
   233 00000179 8EE8                <1> 	mov gs, ax
   234                              <1> 	
   235                              <1> copykernel:
   236 0000017B 648B06              <1> 	mov eax, [fs:esi]
   237 0000017E 658906              <1> 	mov [gs:esi], eax
   238 00000181 81C604000000        <1> 	add esi, 4
   239 00000187 81FE[96970000]      <1> 	cmp esi, bsscopy
   240 0000018D 72EC                <1> 	jb copykernel
   241 0000018F EA[96010000]2800    <1> 	jmp NEW_CODE_SEL:done_copy
   242                              <1> 	
   243                              <1> done_copy:
   244 00000196 66B83000            <1> 	mov ax, NEW_DATA_SEL	;;these MUST be setup AFTER the kernel switches places!!!
   245 0000019A 8ED8                <1> 	mov ds, ax
   246 0000019C 8EC0                <1> 	mov es, ax
   247 0000019E 8EE0                <1> 	mov fs, ax
   248                              <1> 	;mov ax, STACK_SEL
   249 000001A0 8ED0                <1> 	mov ss, ax
   250 000001A2 BC[36A70000]        <1> 	mov esp, stackend
   251 000001A7 66B82000            <1> 	mov ax, SYS_DATA_SEL
   252 000001AB 8EE8                <1> 	mov gs, ax
   253                              <1> 	
   254 000001AD E89F5F0000          <1> 	call initialize	;initialize drivers
   255                              <1> 	
   256 000001B2 A1[42020000]        <1> 	mov eax, [newcodecache]
   257 000001B7 C1E804              <1> 	shr eax, 4
   258 000001BA A3[3E020000]        <1> 	mov [basecache], eax
   259                              <1> 	
   260 000001BF BE[84D63900]        <1> 	mov esi, bssend
   261 000001C4 31C0                <1> 	xor eax, eax
   262                              <1> clearkernelbuffers:
   263 000001C6 8906                <1> 	mov [esi], eax
   264 000001C8 81EE04000000        <1> 	sub esi, 4
   265 000001CE 81FE[96970000]      <1> 	cmp esi, bsscopy
   266 000001D4 77F0                <1> 	ja clearkernelbuffers
   267 000001D6 FB                  <1> 	sti
   268                              <1> 
   269                              <1> getmemoryspace:
   270 000001D7 BE[56950000]        <1> 	mov esi, memlistbuf
   271 000001DC 31FF                <1> 	xor edi, edi
   272 000001DE 668B3D[96970000]    <1> 	mov di, [memlistend]
   273 000001E5 01F7                <1> 	add edi, esi
   274 000001E7 31C0                <1> 	xor eax, eax
   275                              <1> memoryspaceaddition:
   276 000001E9 39FE                <1> 	cmp esi, edi
   277 000001EB 7322                <1> 	jae finishedmemspacecalc
   278 000001ED 81C608000000        <1> 	add esi, 8
   279 000001F3 8B0E                <1> 	mov ecx, [esi]
   280 000001F5 81C608000000        <1> 	add esi, 8
   281 000001FB 8B1E                <1> 	mov ebx, [esi]
   282 000001FD 81C608000000        <1> 	add esi, 8
   283 00000203 81FB01000000        <1> 	cmp ebx, 1
   284 00000209 75DE                <1> 	jne memoryspaceaddition
   285 0000020B 01C8                <1> 	add eax, ecx
   286 0000020D EBDA                <1> 	jmp memoryspaceaddition
   287                              <1> finishedmemspacecalc:
   288 0000020F A3[53020000]        <1> 	mov [memoryspace], eax
   289                              <1> %ifdef gui.included
   290 00000214 803D[50950000]00    <1> 	cmp byte [guion], 0
   291 0000021B 741C                <1> 	je normalstartup
   292 0000021D 8B1D[3E020000]      <1> 	mov ebx, [basecache]
   293 00000223 C1E304              <1> 	shl ebx, 4
   294 00000226 8B3D[04540000]      <1> 	mov edi, [physbaseptr]
   295 0000022C 29DF                <1> 	sub edi, ebx
   296 0000022E 893D[04540000]      <1> 	mov [physbaseptr], edi
   297 00000234 E97B640000          <1> 	jmp guiboot
   298                              <1> %endif
   299                              <1> normalstartup:
   300 00000239 E97C250000          <1> 	jmp os
   301                              <1> 	
   302 0000023E 00000000            <1> basecache dd 0
   303 00000242 00001000            <1> newcodecache dd 0x100000
   304                              <1> 
   305 00000246 00                  <1> testingcpuspeed db 0
   306 00000247 00000000            <1> cpuspeedperint dd 0
   307 0000024B 0000000000000000    <1> cpuclocksperint dd 0,0
   308 00000253 00000000            <1> memoryspace dd 0
   309 00000257 7D0A                <1> pitdiv dw 2685
   310 00000259 2E562200            <1> timeinterval dd 2250286
   311 0000025D 00000000            <1> timeseconds dd 0
   312 00000261 00000000            <1> timenanoseconds dd 0
   313 00000265 00                  <1> soundon db 0
   314 00000266 0000                <1> soundrepititions dw 0
   315 00000268 00000000            <1> soundpos dd 0
   316 0000026C 00000000            <1> soundendpos dd 0
   317                              <1> 
   318                              <1> cpuspeedend:
   319 00000270 C605[46020000]00    <1> 	mov byte [testingcpuspeed], 0
   320 00000277 A3[47020000]        <1> 	mov [cpuspeedperint], eax
   321 0000027C B8[E34A0000]        <1> 	mov eax, cpuspeedloopend
   322 00000281 890424              <1> 	mov [esp], eax
   323 00000284 E9B9000000          <1> 	jmp handled
   324                              <1> 
   325                              <1> ;if using the rtc, the default frequency yeilds a period of 976562.5ns
   326                              <1> ;if using the pit, div=451 is 377981.0004, div=5370 is 4500572.00007ns
   327                              <1> ;div=55483 is 46500044.000006ns, div=2685 is 2250286.00004ns, div=902 is 755962.0008
   328                              <1> 
   329                              <1> pitinterrupt: ;this controls threading
   330 00000289 FA                  <1> 	cli
   331 0000028A 803D[46020000]01    <1> 	cmp byte [testingcpuspeed], 1	;check to see if the cpu speed test is running
   332 00000291 74DD                <1> 	je cpuspeedend
   333                              <1> 		
   334 00000293 E883000000          <1> 	call timekeeper ;this updates the internal time
   335                              <1> 	
   336 00000298 803D[65020000]01    <1> 	cmp byte [soundon], 1
   337 0000029F 0F8440550000        <1> 	je near PCSpeakerRAW
   338                              <1> timerinterrupt:	;put this into the interrupt handler that controls threading
   339                              <1> %ifdef threads.included
   340 000002A5 803D[AF660000]01    <1> 	cmp byte [threadson], 1
   341 000002AC 0F849D630000        <1> 	je near threadswitch
   342                              <1> %endif
   343                              <1> keyinterrupt:		;checks for escape, if pressed, it quits the program currently running
   344 000002B2 803D[AF660000]00    <1> 	cmp byte [threadson], 0
   345 000002B9 0F8483000000        <1> 	je near handled
   346                              <1> %ifdef io.serial
   347                              <1> 	jmp handled
   348                              <1> %else
   349 000002BF 60                  <1> 	pusha
   350 000002C0 E464                <1> 	in al, 64h
   351 000002C2 A820                <1> 	test al, 20h
   352 000002C4 0F8576000000        <1> 	jnz near handled2
   353 000002CA E460                <1> 	in al, 60h
   354 000002CC 3C01                <1> 	cmp al, 1		;escape
   355 000002CE 7405                <1> 	je userint
   356 000002D0 E96B000000          <1> 	jmp handled2
   357                              <1> userint:
   358                              <1> 	;UNMASK ALL INTS
   359 000002D5 30C0                <1> 	xor al, al
   360 000002D7 E621                <1> 	out 0x21, al
   361 000002D9 30C0                <1> 	xor al, al
   362 000002DB E6A1                <1> 	out 0xA1, al
   363 000002DD B020                <1> 	mov al, 0x20
   364 000002DF E6A0                <1> 	out 0xA0, al
   365 000002E1 E620                <1> 	out 0x20, al
   366                              <1> 	;RESET PIT DIVISOR
   367 000002E3 66A1[57020000]      <1> 	mov ax, [pitdiv]
   368 000002E9 E640                <1> 	out 0x40, al
   369 000002EB 66C1C008            <1> 	rol ax, 8
   370 000002EF E640                <1> 	out 0x40, al
   371                              <1> 	;RESET PIC
   372 000002F1 B020                <1> 	mov al, 0x20
   373 000002F3 E620                <1> 	out 0x20, al
   374 000002F5 61                  <1> 	popa
   375 000002F6 FB                  <1> 	sti
   376 000002F7 BC[36A70000]        <1> 	mov esp, stackend ;reset stack
   377 000002FC E914260000          <1> 	jmp returnfromexp
   378                              <1> %endif
   379 00000301 0A                  <1> rtcrate db 10
   380                              <1> rtcint:	;this runs at 64Hz which is perfect for 60Hz displays
   381                              <1> %ifdef io.serial
   382                              <1> %else
   383                              <1> %ifdef terminal.vsync
   384                              <1> 	cli
   385                              <1> 	cmp byte [termcopyneeded], 0
   386                              <1> 	je .nocopy
   387                              <1> 	call newtermcopy
   388                              <1> .nocopy
   389                              <1> 	push eax
   390                              <1> 	mov al, 0xC
   391                              <1> 	out 0x70, al
   392                              <1> 	in al, 0x71
   393                              <1> 	pop eax
   394                              <1> 	sti
   395                              <1> %endif
   396                              <1> %endif
   397 00000302 E942000000          <1> 	jmp handled4
   398                              <1> %ifdef rtl8139.included
   399                              <1> rtl8139.irq:
   400                              <1> 	cli
   401                              <1> 	push edx
   402                              <1> 	push eax
   403                              <1> 	mov edx, [rtl8139.basenicaddr]
   404                              <1> 	add edx, rtl8139.ISR
   405                              <1> 	xor eax, eax
   406                              <1> 	in ax, dx
   407                              <1> 	out dx, ax
   408                              <1> 	pop eax
   409                              <1> 	pop edx
   410                              <1> 	sti
   411                              <1> 	jmp handled4
   412                              <1> %endif
   413                              <1> %ifdef sound.included
   414                              <1> sblaster.irq:
   415 00000307 FA                  <1> 	cli
   416 00000308 60                  <1> 	pusha
   417 00000309 803D[CB5A0000]01    <1> 	cmp byte [SoundBlaster], 1
   418 00000310 0F84C0550000        <1> 	je near sblaster.cont
   419 00000316 E925000000          <1> 	jmp handled2
   420                              <1> %endif
   421                              <1> 	
   422                              <1> timekeeper:
   423 0000031B 50                  <1> 	push eax
   424 0000031C A1[61020000]        <1> 	mov eax, [timenanoseconds]
   425 00000321 0305[59020000]      <1> 	add eax, [timeinterval]
   426 00000327 3D00CA9A3B          <1> 	cmp eax, 1000000000
   427 0000032C 720B                <1> 	jb nonanosecondrollover
   428 0000032E FF05[5D020000]      <1> 	inc dword [timeseconds]
   429 00000334 2D00CA9A3B          <1> 	sub eax, 1000000000
   430                              <1> nonanosecondrollover:
   431 00000339 A3[61020000]        <1> 	mov [timenanoseconds], eax
   432 0000033E 58                  <1> 	pop eax
   433 0000033F C3                  <1> 	ret
   434                              <1> 	
   435                              <1> handled2:
   436 00000340 61                  <1> 	popa
   437                              <1> handled3:
   438 00000341 FB                  <1> 	sti
   439                              <1> handled:
   440 00000342 50                  <1> 	push eax
   441 00000343 B020                <1> 	mov al, 0x20
   442 00000345 E620                <1> 	out 0x20, al
   443 00000347 58                  <1> 	pop eax
   444 00000348 CF                  <1> 	iret
   445                              <1> handled4:
   446 00000349 50                  <1> 	push eax
   447 0000034A B020                <1> 	mov al, 0x20
   448 0000034C E6A0                <1> 	out 0xA0, al
   449 0000034E E620                <1> 	out 0x20, al
   450 00000350 58                  <1> 	pop eax
   451 00000351 CF                  <1> 	iret
   452                              <1> [BITS 16]
   453                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   454                              <1> ;	16-bit limit/32-bit linear base address of GDT and IDT
   455                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   456 00000352 5700                <1> gdtr:	dw gdt_end - gdt - 1	; GDT limit
   457 00000354 00000000            <1> 	dd 0    		; filled with linear, physical address of GDT
   458                              <1> 
   459 00000358 FF07                <1> idtr:	dw idt_end - idt - 1	; IDT limit
   460 0000035A 00000000            <1> 	dd 0			; filled with linear, physical address of IDT
   461                              <1> 
   462                              <1> 
   463 0000035E 0000                <1> gdt:	dw 0			; limit 15:0
   464 00000360 0000                <1> 	dw 0			; base 15:0
   465 00000362 00                  <1> 	db 0			; base 23:16
   466 00000363 00                  <1> 	db 0			; type
   467 00000364 00                  <1> 	db 0			; limit 19:16, flags
   468 00000365 00                  <1> 	db 0			; base 31:24
   469                              <1> ; linear data segment descriptor
   470                              <1> LINEAR_SEL	equ	$-gdt
   471 00000366 FFFF                <1> 	dw 0xFFFF		; limit 0xFFFFF
   472 00000368 0000                <1> 	dw 0			; base for this one is always 0
   473 0000036A 00                  <1> 	db 0
   474 0000036B 92                  <1> 	db 0x92			; present, ring 0, data, expand-up, writable
   475 0000036C CF                  <1> 	db 0xCF			; page-granular, 32-bit
   476 0000036D 00                  <1> 	db 0
   477                              <1> STACK_SEL	equ $-gdt
   478 0000036E 0200                <1> gdts:	dw 2;(stackend)/4096
   479 00000370 0000                <1> 	dw 0
   480 00000372 00                  <1> 	db 0
   481 00000373 92                  <1> 	db 0x92
   482 00000374 CF                  <1> 	db 0xCF
   483 00000375 00                  <1> 	db 0
   484                              <1> ; code segment descriptor
   485                              <1> SYS_CODE_SEL	equ	$-gdt
   486 00000376 FFFF                <1> gdt2:	dw 0xFFFF
   487 00000378 0000                <1> 	dw 0			; (base gets set above)
   488 0000037A 00                  <1> 	db 0
   489 0000037B 9A                  <1> 	db 0x9A			; present, ring 0, code, non-conforming, readable
   490 0000037C CF                  <1> 	db 0xCF
   491 0000037D 00                  <1> 	db 0
   492                              <1> ; data segment descriptor
   493                              <1> SYS_DATA_SEL	equ	$-gdt
   494 0000037E FFFF                <1> gdt3:	dw 0xFFFF
   495 00000380 0000                <1> 	dw 0			; (base gets set above)
   496 00000382 00                  <1> 	db 0
   497 00000383 92                  <1> 	db 0x92			; present, ring 0, data, expand-up, writable
   498 00000384 CF                  <1> 	db 0xCF
   499 00000385 00                  <1> 	db 0
   500                              <1> NEW_CODE_SEL	equ	$-gdt
   501 00000386 FFFF                <1> gdt4:	dw 0xFFFF
   502 00000388 0000                <1> 	dw 0			; (base gets set above)
   503 0000038A 00                  <1> 	db 0
   504 0000038B 9A                  <1> 	db 0x9A			; present, ring 0, code, non-conforming, readable
   505 0000038C CF                  <1> 	db 0xCF
   506 0000038D 00                  <1> 	db 0
   507                              <1> ; data segment descriptor
   508                              <1> NEW_DATA_SEL	equ	$-gdt
   509 0000038E FFFF                <1> gdt5:	dw 0xFFFF
   510 00000390 0000                <1> 	dw 0			; (base gets set above)
   511 00000392 00                  <1> 	db 0
   512 00000393 92                  <1> 	db 0x92			; present, ring 0, data, expand-up, writable
   513 00000394 CF                  <1> 	db 0xCF
   514 00000395 00                  <1> 	db 0
   515                              <1> V8086_CODE_SEL	equ $-gdt
   516 00000396 FFFF                <1> gdtv8086: dw 0xFFFF
   517 00000398 0000                <1> 	dw 0
   518 0000039A 00                  <1> 	db 0
   519 0000039B 9A                  <1> 	db 0x9A
   520 0000039C 8F                  <1> 	db 0x8F
   521 0000039D 00                  <1> 	db 0
   522                              <1> V8086_DATA_SEL	equ $-gdt
   523 0000039E FFFF                <1> gdtv80862: dw 0xFFFF
   524 000003A0 0000                <1> 	dw 0
   525 000003A2 00                  <1> 	db 0
   526 000003A3 92                  <1> 	db 0x92
   527 000003A4 8F                  <1> 	db 0x8F
   528 000003A5 00                  <1> 	db 0
   529                              <1> DOS_CODE_SEL	equ $-gdt	;this gives dos programs complete access to one megabyte at the beginning of memory
   530 000003A6 0001                <1> gdtdos:	dw 256	;give it 1 MB
   531 000003A8 0000                <1> 	dw 0
   532 000003AA 00                  <1> 	db 0
   533 000003AB 9A                  <1> 	db 0x9A
   534 000003AC 8F                  <1> 	db 0x8F ;16 bit
   535 000003AD 00                  <1> 	db 0
   536                              <1> DOS_DATA_SEL 	equ $-gdt
   537 000003AE 0001                <1> gdtdos2:	dw 256
   538 000003B0 0000                <1> 	dw 0
   539 000003B2 00                  <1> 	db 0
   540 000003B3 92                  <1> 	db 0x92
   541 000003B4 8F                  <1> 	db 0x8F ;16 bit
   542 000003B5 00                  <1> 	db 0
   543                              <1> gdt_end:
   544                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   545                              <1> ;	interrupt descriptor table (IDT)
   546                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   547                              <1> ; 32 reserved interrupts:
   548                              <1> idt:	
   549                              <1> %assign i 0
   550                              <1> %rep    32
   551                              <1> 		dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   552                              <1> %assign i i+1
   553                              <1> %endrep
   554 000003B6 [D70C]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   555                              <2> %assign i i+1
   556 000003BE [E30C]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   557                              <2> %assign i i+1
   558 000003C6 [EF0C]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   559                              <2> %assign i i+1
   560 000003CE [FB0C]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   561                              <2> %assign i i+1
   562 000003D6 [070D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   563                              <2> %assign i i+1
   564 000003DE [130D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   565                              <2> %assign i i+1
   566 000003E6 [1F0D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   567                              <2> %assign i i+1
   568 000003EE [2B0D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   569                              <2> %assign i i+1
   570 000003F6 [370D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   571                              <2> %assign i i+1
   572 000003FE [430D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   573                              <2> %assign i i+1
   574 00000406 [4F0D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   575                              <2> %assign i i+1
   576 0000040E [5B0D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   577                              <2> %assign i i+1
   578 00000416 [670D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   579                              <2> %assign i i+1
   580 0000041E [730D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   581                              <2> %assign i i+1
   582 00000426 [7F0D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   583                              <2> %assign i i+1
   584 0000042E [8B0D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   585                              <2> %assign i i+1
   586 00000436 [970D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   587                              <2> %assign i i+1
   588 0000043E [A30D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   589                              <2> %assign i i+1
   590 00000446 [AF0D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   591                              <2> %assign i i+1
   592 0000044E [BB0D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   593                              <2> %assign i i+1
   594 00000456 [C70D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   595                              <2> %assign i i+1
   596 0000045E [D30D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   597                              <2> %assign i i+1
   598 00000466 [DF0D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   599                              <2> %assign i i+1
   600 0000046E [EB0D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   601                              <2> %assign i i+1
   602 00000476 [F70D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   603                              <2> %assign i i+1
   604 0000047E [030E]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   605                              <2> %assign i i+1
   606 00000486 [0F0E]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   607                              <2> %assign i i+1
   608 0000048E [1B0E]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   609                              <2> %assign i i+1
   610 00000496 [270E]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   611                              <2> %assign i i+1
   612 0000049E [330E]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   613                              <2> %assign i i+1
   614 000004A6 [3F0E]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   615                              <2> %assign i i+1
   616 000004AE [4B0E]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   617                              <2> %assign i i+1
   618 000004B6 [8B26]2800008E0000  <1> 		dw int20h,NEW_CODE_SEL,0x8E00,0
   619 000004BE [8F26]2800008E0000  <1> 		dw int21h,NEW_CODE_SEL,0x8E00,0
   620                              <1> %assign i 0x22
   621                              <1> %rep 14
   622                              <1> 		dw handled,NEW_CODE_SEL,0x8E00,0
   623                              <1> %assign i +1
   624                              <1> %endrep
   625 000004C6 [4203]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   626                              <2> %assign i +1
   627 000004CE [4203]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   628                              <2> %assign i +1
   629 000004D6 [4203]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   630                              <2> %assign i +1
   631 000004DE [4203]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   632                              <2> %assign i +1
   633 000004E6 [4203]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   634                              <2> %assign i +1
   635 000004EE [4203]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   636                              <2> %assign i +1
   637 000004F6 [4203]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   638                              <2> %assign i +1
   639 000004FE [4203]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   640                              <2> %assign i +1
   641 00000506 [4203]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   642                              <2> %assign i +1
   643 0000050E [4203]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   644                              <2> %assign i +1
   645 00000516 [4203]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   646                              <2> %assign i +1
   647 0000051E [4203]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   648                              <2> %assign i +1
   649 00000526 [4203]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   650                              <2> %assign i +1
   651 0000052E [4203]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   652                              <2> %assign i +1
   653                              <1> ;INT 30h for os use and 3rd party use:
   654 00000536 [CA1B]2800008E0000  <1> 		dw newints,NEW_CODE_SEL,0x8E00,0
   655                              <1> %assign i 0x31
   656                              <1> %rep 15
   657                              <1> 		dw handled,NEW_CODE_SEL,0x8E00,0
   658                              <1> %assign i +1
   659                              <1> %endrep
   660 0000053E [4203]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   661                              <2> %assign i +1
   662 00000546 [4203]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   663                              <2> %assign i +1
   664 0000054E [4203]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   665                              <2> %assign i +1
   666 00000556 [4203]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   667                              <2> %assign i +1
   668 0000055E [4203]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   669                              <2> %assign i +1
   670 00000566 [4203]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   671                              <2> %assign i +1
   672 0000056E [4203]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   673                              <2> %assign i +1
   674 00000576 [4203]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   675                              <2> %assign i +1
   676 0000057E [4203]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   677                              <2> %assign i +1
   678 00000586 [4203]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   679                              <2> %assign i +1
   680 0000058E [4203]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   681                              <2> %assign i +1
   682 00000596 [4203]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   683                              <2> %assign i +1
   684 0000059E [4203]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   685                              <2> %assign i +1
   686 000005A6 [4203]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   687                              <2> %assign i +1
   688 000005AE [4203]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   689                              <2> %assign i +1
   690                              <1> ;and here we are at 0x40
   691                              <1> ;here are all the irq's
   692 000005B6 [8902]2800008E0000  <1> 		dw pitinterrupt,NEW_CODE_SEL,0x8E00,0 ;IRQ 0 = PIT
   693 000005BE [4203]2800008E0000  <1> 		dw handled,NEW_CODE_SEL,0x8E00,0 ;IRQ 1 = keyboard
   694 000005C6 [4203]2800008E0000  <1> 		dw handled,NEW_CODE_SEL,0x8E00,0 ;IRQ 2
   695 000005CE [4203]2800008E0000  <1> 		dw handled,NEW_CODE_SEL,0x8E00,0 ;IRQ 3
   696 000005D6 [4203]2800008E0000  <1> 		dw handled,NEW_CODE_SEL,0x8E00,0 ;IRQ 4
   697                              <1> 	%ifdef sound.included
   698 000005DE [0703]2800008E0000  <1> 		dw sblaster.irq,NEW_CODE_SEL,0x8E00,0 ;IRQ 5 = default SoundBlaster
   699                              <1> 	%else
   700                              <1> 		dw handled,NEW_CODE_SEL,0x8E00,0 ;IRQ 5
   701                              <1> 	%endif
   702 000005E6 [4203]2800008E0000  <1> 		dw handled,NEW_CODE_SEL,0x8E00,0 ;IRQ 6
   703 000005EE [4203]2800008E0000  <1> 		dw handled,NEW_CODE_SEL,0x8E00,0 ;IRQ 7
   704 000005F6 [0203]2800008E0000  <1> 		dw rtcint,NEW_CODE_SEL,0x8E00,0 ;IRQ 8 = RTC
   705 000005FE [4903]2800008E0000  <1> 		dw handled4,NEW_CODE_SEL,0x8E00,0 ;IRQ 9 = default NE2000
   706 00000606 [4903]2800008E0000  <1> 		dw handled4,NEW_CODE_SEL,0x8E00,0 ;IRQ 10
   707                              <1> 	%ifdef rtl8139.included
   708                              <1> 		dw rtl8139.irq,NEW_CODE_SEL,0x8E00,0 ;IRQ 11 = default RTL8139
   709                              <1> 	%else
   710 0000060E [4903]2800008E0000  <1> 		dw handled4,NEW_CODE_SEL,0x8E00,0 ;IRQ 11
   711                              <1> 	%endif
   712 00000616 [4903]2800008E0000  <1> 		dw handled4,NEW_CODE_SEL,0x8E00,0 ;IRQ 12
   713 0000061E [4903]2800008E0000  <1> 		dw handled4,NEW_CODE_SEL,0x8E00,0 ;IRQ 13
   714 00000626 [4903]2800008E0000  <1> 		dw handled4,NEW_CODE_SEL,0x8E00,0 ;IRQ 14
   715 0000062E [4903]2800008E0000  <1> 		dw handled4,NEW_CODE_SEL,0x8E00,0 ;IRQ 15
   716                              <1> ;This brings me up to 0x50
   717                              <1> %assign i 0x50
   718                              <1> %rep 176
   719                              <1> 		dw handled, NEW_CODE_SEL,0x8E00,0
   720                              <1> 		;dw unhand + i*12, NEW_CODE_SEL,0x8E00,0
   721                              <1> %assign i +1
   722                              <1> %endrep
   723 00000636 [4203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   724                              <2> 
   725                              <2> %assign i +1
   726 0000063E [4203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   727                              <2> 
   728                              <2> %assign i +1
   729 00000646 [4203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   730                              <2> 
   731                              <2> %assign i +1
   732 0000064E [4203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   733                              <2> 
   734                              <2> %assign i +1
   735 00000656 [4203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   736                              <2> 
   737                              <2> %assign i +1
   738 0000065E [4203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   739                              <2> 
   740                              <2> %assign i +1
   741 00000666 [4203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   742                              <2> 
   743                              <2> %assign i +1
   744 0000066E [4203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   745                              <2> 
   746                              <2> %assign i +1
   747 00000676 [4203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   748                              <2> 
   749                              <2> %assign i +1
   750 0000067E [4203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   751                              <2> 
   752                              <2> %assign i +1
   753 00000686 [4203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   754                              <2> 
   755                              <2> %assign i +1
   756 0000068E [4203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   757                              <2> 
   758                              <2> %assign i +1
   759 00000696 [4203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   760                              <2> 
   761                              <2> %assign i +1
   762 0000069E [4203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   763                              <2> 
   764                              <2> %assign i +1
   765 000006A6 [4203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   766                              <2> 
   767                              <2> %assign i +1
   768 000006AE [4203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   769                              <2> 
   770                              <2> %assign i +1
   771 000006B6 [4203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   772                              <2> 
   773                              <2> %assign i +1
   774 000006BE [4203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   775                              <2> 
   776                              <2> %assign i +1
   777 000006C6 [4203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   778                              <2> 
   779                              <2> %assign i +1
   780 000006CE [4203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   781                              <2> 
   782                              <2> %assign i +1
   783 000006D6 [4203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   784                              <2> 
   785                              <2> %assign i +1
   786 000006DE [4203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   787                              <2> 
   788                              <2> %assign i +1
   789 000006E6 [4203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   790                              <2> 
   791                              <2> %assign i +1
   792 000006EE [4203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   793                              <2> 
   794                              <2> %assign i +1
   795 000006F6 [4203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   796                              <2> 
   797                              <2> %assign i +1
   798 000006FE [4203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   799                              <2> 
   800                              <2> %assign i +1
   801 00000706 [4203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   802                              <2> 
   803                              <2> %assign i +1
   804 0000070E [4203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   805                              <2> 
   806                              <2> %assign i +1
   807 00000716 [4203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   808                              <2> 
   809                              <2> %assign i +1
   810 0000071E [4203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   811                              <2> 
   812                              <2> %assign i +1
   813 00000726 [4203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   814                              <2> 
   815                              <2> %assign i +1
   816 0000072E [4203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   817                              <2> 
   818                              <2> %assign i +1
   819 00000736 [4203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   820                              <2> 
   821                              <2> %assign i +1
   822 0000073E [4203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   823                              <2> 
   824                              <2> %assign i +1
   825 00000746 [4203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   826                              <2> 
   827                              <2> %assign i +1
   828 0000074E [4203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   829                              <2> 
   830                              <2> %assign i +1
   831 00000756 [4203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   832                              <2> 
   833                              <2> %assign i +1
   834 0000075E [4203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   835                              <2> 
   836                              <2> %assign i +1
   837 00000766 [4203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   838                              <2> 
   839                              <2> %assign i +1
   840 0000076E [4203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   841                              <2> 
   842                              <2> %assign i +1
   843 00000776 [4203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   844                              <2> 
   845                              <2> %assign i +1
   846 0000077E [4203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   847                              <2> 
   848                              <2> %assign i +1
   849 00000786 [4203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   850                              <2> 
   851                              <2> %assign i +1
   852 0000078E [4203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   853                              <2> 
   854                              <2> %assign i +1
   855 00000796 [4203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   856                              <2> 
   857                              <2> %assign i +1
   858 0000079E [4203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   859                              <2> 
   860                              <2> %assign i +1
   861 000007A6 [4203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   862                              <2> 
   863                              <2> %assign i +1
   864 000007AE [4203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   865                              <2> 
   866                              <2> %assign i +1
   867 000007B6 [4203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   868                              <2> 
   869                              <2> %assign i +1
   870 000007BE [4203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   871                              <2> 
   872                              <2> %assign i +1
   873 000007C6 [4203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   874                              <2> 
   875                              <2> %assign i +1
   876 000007CE [4203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   877                              <2> 
   878                              <2> %assign i +1
   879 000007D6 [4203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   880                              <2> 
   881                              <2> %assign i +1
   882 000007DE [4203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   883                              <2> 
   884                              <2> %assign i +1
   885 000007E6 [4203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   886                              <2> 
   887                              <2> %assign i +1
   888 000007EE [4203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   889                              <2> 
   890                              <2> %assign i +1
   891 000007F6 [4203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   892                              <2> 
   893                              <2> %assign i +1
   894 000007FE [4203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   895                              <2> 
   896                              <2> %assign i +1
   897 00000806 [4203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   898                              <2> 
   899                              <2> %assign i +1
   900 0000080E [4203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   901                              <2> 
   902                              <2> %assign i +1
   903 00000816 [4203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   904                              <2> 
   905                              <2> %assign i +1
   906 0000081E [4203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   907                              <2> 
   908                              <2> %assign i +1
   909 00000826 [4203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   910                              <2> 
   911                              <2> %assign i +1
   912 0000082E [4203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   913                              <2> 
   914                              <2> %assign i +1
   915 00000836 [4203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   916                              <2> 
   917                              <2> %assign i +1
   918 0000083E [4203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   919                              <2> 
   920                              <2> %assign i +1
   921 00000846 [4203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   922                              <2> 
   923                              <2> %assign i +1
   924 0000084E [4203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   925                              <2> 
   926                              <2> %assign i +1
   927 00000856 [4203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   928                              <2> 
   929                              <2> %assign i +1
   930 0000085E [4203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   931                              <2> 
   932                              <2> %assign i +1
   933 00000866 [4203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   934                              <2> 
   935                              <2> %assign i +1
   936 0000086E [4203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   937                              <2> 
   938                              <2> %assign i +1
   939 00000876 [4203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   940                              <2> 
   941                              <2> %assign i +1
   942 0000087E [4203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   943                              <2> 
   944                              <2> %assign i +1
   945 00000886 [4203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   946                              <2> 
   947                              <2> %assign i +1
   948 0000088E [4203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   949                              <2> 
   950                              <2> %assign i +1
   951 00000896 [4203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   952                              <2> 
   953                              <2> %assign i +1
   954 0000089E [4203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   955                              <2> 
   956                              <2> %assign i +1
   957 000008A6 [4203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   958                              <2> 
   959                              <2> %assign i +1
   960 000008AE [4203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   961                              <2> 
   962                              <2> %assign i +1
   963 000008B6 [4203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   964                              <2> 
   965                              <2> %assign i +1
   966 000008BE [4203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   967                              <2> 
   968                              <2> %assign i +1
   969 000008C6 [4203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   970                              <2> 
   971                              <2> %assign i +1
   972 000008CE [4203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   973                              <2> 
   974                              <2> %assign i +1
   975 000008D6 [4203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   976                              <2> 
   977                              <2> %assign i +1
   978 000008DE [4203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   979                              <2> 
   980                              <2> %assign i +1
   981 000008E6 [4203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   982                              <2> 
   983                              <2> %assign i +1
   984 000008EE [4203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   985                              <2> 
   986                              <2> %assign i +1
   987 000008F6 [4203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   988                              <2> 
   989                              <2> %assign i +1
   990 000008FE [4203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   991                              <2> 
   992                              <2> %assign i +1
   993 00000906 [4203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   994                              <2> 
   995                              <2> %assign i +1
   996 0000090E [4203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   997                              <2> 
   998                              <2> %assign i +1
   999 00000916 [4203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1000                              <2> 
  1001                              <2> %assign i +1
  1002 0000091E [4203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1003                              <2> 
  1004                              <2> %assign i +1
  1005 00000926 [4203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1006                              <2> 
  1007                              <2> %assign i +1
  1008 0000092E [4203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1009                              <2> 
  1010                              <2> %assign i +1
  1011 00000936 [4203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1012                              <2> 
  1013                              <2> %assign i +1
  1014 0000093E [4203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1015                              <2> 
  1016                              <2> %assign i +1
  1017 00000946 [4203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1018                              <2> 
  1019                              <2> %assign i +1
  1020 0000094E [4203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1021                              <2> 
  1022                              <2> %assign i +1
  1023 00000956 [4203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1024                              <2> 
  1025                              <2> %assign i +1
  1026 0000095E [4203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1027                              <2> 
  1028                              <2> %assign i +1
  1029 00000966 [4203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1030                              <2> 
  1031                              <2> %assign i +1
  1032 0000096E [4203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1033                              <2> 
  1034                              <2> %assign i +1
  1035 00000976 [4203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1036                              <2> 
  1037                              <2> %assign i +1
  1038 0000097E [4203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1039                              <2> 
  1040                              <2> %assign i +1
  1041 00000986 [4203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1042                              <2> 
  1043                              <2> %assign i +1
  1044 0000098E [4203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1045                              <2> 
  1046                              <2> %assign i +1
  1047 00000996 [4203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1048                              <2> 
  1049                              <2> %assign i +1
  1050 0000099E [4203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1051                              <2> 
  1052                              <2> %assign i +1
  1053 000009A6 [4203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1054                              <2> 
  1055                              <2> %assign i +1
  1056 000009AE [4203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1057                              <2> 
  1058                              <2> %assign i +1
  1059 000009B6 [4203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1060                              <2> 
  1061                              <2> %assign i +1
  1062 000009BE [4203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1063                              <2> 
  1064                              <2> %assign i +1
  1065 000009C6 [4203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1066                              <2> 
  1067                              <2> %assign i +1
  1068 000009CE [4203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1069                              <2> 
  1070                              <2> %assign i +1
  1071 000009D6 [4203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1072                              <2> 
  1073                              <2> %assign i +1
  1074 000009DE [4203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1075                              <2> 
  1076                              <2> %assign i +1
  1077 000009E6 [4203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1078                              <2> 
  1079                              <2> %assign i +1
  1080 000009EE [4203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1081                              <2> 
  1082                              <2> %assign i +1
  1083 000009F6 [4203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1084                              <2> 
  1085                              <2> %assign i +1
  1086 000009FE [4203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1087                              <2> 
  1088                              <2> %assign i +1
  1089 00000A06 [4203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1090                              <2> 
  1091                              <2> %assign i +1
  1092 00000A0E [4203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1093                              <2> 
  1094                              <2> %assign i +1
  1095 00000A16 [4203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1096                              <2> 
  1097                              <2> %assign i +1
  1098 00000A1E [4203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1099                              <2> 
  1100                              <2> %assign i +1
  1101 00000A26 [4203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1102                              <2> 
  1103                              <2> %assign i +1
  1104 00000A2E [4203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1105                              <2> 
  1106                              <2> %assign i +1
  1107 00000A36 [4203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1108                              <2> 
  1109                              <2> %assign i +1
  1110 00000A3E [4203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1111                              <2> 
  1112                              <2> %assign i +1
  1113 00000A46 [4203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1114                              <2> 
  1115                              <2> %assign i +1
  1116 00000A4E [4203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1117                              <2> 
  1118                              <2> %assign i +1
  1119 00000A56 [4203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1120                              <2> 
  1121                              <2> %assign i +1
  1122 00000A5E [4203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1123                              <2> 
  1124                              <2> %assign i +1
  1125 00000A66 [4203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1126                              <2> 
  1127                              <2> %assign i +1
  1128 00000A6E [4203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1129                              <2> 
  1130                              <2> %assign i +1
  1131 00000A76 [4203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1132                              <2> 
  1133                              <2> %assign i +1
  1134 00000A7E [4203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1135                              <2> 
  1136                              <2> %assign i +1
  1137 00000A86 [4203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1138                              <2> 
  1139                              <2> %assign i +1
  1140 00000A8E [4203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1141                              <2> 
  1142                              <2> %assign i +1
  1143 00000A96 [4203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1144                              <2> 
  1145                              <2> %assign i +1
  1146 00000A9E [4203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1147                              <2> 
  1148                              <2> %assign i +1
  1149 00000AA6 [4203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1150                              <2> 
  1151                              <2> %assign i +1
  1152 00000AAE [4203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1153                              <2> 
  1154                              <2> %assign i +1
  1155 00000AB6 [4203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1156                              <2> 
  1157                              <2> %assign i +1
  1158 00000ABE [4203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1159                              <2> 
  1160                              <2> %assign i +1
  1161 00000AC6 [4203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1162                              <2> 
  1163                              <2> %assign i +1
  1164 00000ACE [4203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1165                              <2> 
  1166                              <2> %assign i +1
  1167 00000AD6 [4203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1168                              <2> 
  1169                              <2> %assign i +1
  1170 00000ADE [4203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1171                              <2> 
  1172                              <2> %assign i +1
  1173 00000AE6 [4203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1174                              <2> 
  1175                              <2> %assign i +1
  1176 00000AEE [4203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1177                              <2> 
  1178                              <2> %assign i +1
  1179 00000AF6 [4203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1180                              <2> 
  1181                              <2> %assign i +1
  1182 00000AFE [4203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1183                              <2> 
  1184                              <2> %assign i +1
  1185 00000B06 [4203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1186                              <2> 
  1187                              <2> %assign i +1
  1188 00000B0E [4203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1189                              <2> 
  1190                              <2> %assign i +1
  1191 00000B16 [4203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1192                              <2> 
  1193                              <2> %assign i +1
  1194 00000B1E [4203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1195                              <2> 
  1196                              <2> %assign i +1
  1197 00000B26 [4203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1198                              <2> 
  1199                              <2> %assign i +1
  1200 00000B2E [4203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1201                              <2> 
  1202                              <2> %assign i +1
  1203 00000B36 [4203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1204                              <2> 
  1205                              <2> %assign i +1
  1206 00000B3E [4203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1207                              <2> 
  1208                              <2> %assign i +1
  1209 00000B46 [4203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1210                              <2> 
  1211                              <2> %assign i +1
  1212 00000B4E [4203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1213                              <2> 
  1214                              <2> %assign i +1
  1215 00000B56 [4203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1216                              <2> 
  1217                              <2> %assign i +1
  1218 00000B5E [4203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1219                              <2> 
  1220                              <2> %assign i +1
  1221 00000B66 [4203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1222                              <2> 
  1223                              <2> %assign i +1
  1224 00000B6E [4203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1225                              <2> 
  1226                              <2> %assign i +1
  1227 00000B76 [4203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1228                              <2> 
  1229                              <2> %assign i +1
  1230 00000B7E [4203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1231                              <2> 
  1232                              <2> %assign i +1
  1233 00000B86 [4203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1234                              <2> 
  1235                              <2> %assign i +1
  1236 00000B8E [4203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1237                              <2> 
  1238                              <2> %assign i +1
  1239 00000B96 [4203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1240                              <2> 
  1241                              <2> %assign i +1
  1242 00000B9E [4203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1243                              <2> 
  1244                              <2> %assign i +1
  1245 00000BA6 [4203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1246                              <2> 
  1247                              <2> %assign i +1
  1248 00000BAE [4203]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1249                              <2> 
  1250                              <2> %assign i +1
  1251                              <1> idt_end:
  1252                              <1> [BITS 32]
  1253                                  	%include "source/realmode.asm"
  1254                              <1> realmode:	;make sure the real mode program's address is in realmodeptr 
  1255                              <1> 			;and the return address is in realmodereturn
  1256 00000BB6 FA                  <1> 	cli
  1257 00000BB7 A3[C90C0000]        <1> 	mov [realmodeeax], eax
  1258 00000BBC 891D[C50C0000]      <1> 	mov [realmodeebx], ebx
  1259 00000BC2 8925[B70C0000]      <1> 	mov [pmodeesp], esp
  1260                              <1> 
  1261 00000BC8 BB[C10C0000]        <1> 	mov ebx, cr0old
  1262                              <1> rmcopytofirstmbyte:
  1263 00000BCD 8B03                <1> 	mov eax, [ebx]
  1264 00000BCF 658903              <1> 	mov [gs:ebx], eax
  1265 00000BD2 81C304000000        <1> 	add ebx, 4
  1266 00000BD8 81FB[D10C0000]      <1> 	cmp ebx, realmodeptr
  1267 00000BDE 76ED                <1> 	jbe rmcopytofirstmbyte
  1268                              <1> 
  1269 00000BE0 EA[E70B0000]3800    <1> 	jmp V8086_CODE_SEL:protected16bit
  1270                              <1> 
  1271                              <1> [BITS 16]
  1272                              <1> protected16bit:
  1273 00000BE7 B84000              <1> 	mov ax, V8086_DATA_SEL
  1274 00000BEA 8ED8                <1> 	mov ds, ax
  1275 00000BEC 8EC0                <1> 	mov es, ax
  1276 00000BEE 8EE0                <1> 	mov fs, ax
  1277 00000BF0 8EE8                <1> 	mov gs, ax
  1278 00000BF2 8ED0                <1> 	mov ss, ax
  1279 00000BF4 66BC[36A70000]      <1> 	mov esp, stackend
  1280 00000BFA 0F20C0              <1> 	mov eax, cr0
  1281 00000BFD 66A3[C10C]          <1> 	mov [cr0old], eax
  1282 00000C01 6625FEFFFF7F        <1> 	and eax, 0x7FFFFFFE
  1283 00000C07 0F22C0              <1> 	mov cr0, eax	;now in real mode
  1284 00000C0A EA[0F0C]0010        <1> 	jmp 0x1000:inrealmode
  1285                              <1> 
  1286                              <1> inrealmode:
  1287 00000C0F 8CC8                <1> 	mov ax, cs
  1288 00000C11 8ED8                <1> 	mov ds, ax
  1289 00000C13 8EC0                <1> 	mov es, ax
  1290 00000C15 8EE0                <1> 	mov fs, ax
  1291 00000C17 8EE8                <1> 	mov gs, ax
  1292 00000C19 8ED0                <1> 	mov ss, ax
  1293 00000C1B BC[36A7]            <1> 	mov sp, stackend ;because this is at 0x1000: and not 0x10000: it works
  1294                              <1> 	
  1295 00000C1E B011                <1> 	mov al, 0x11
  1296 00000C20 E620                <1> 	out 0x20, al
  1297 00000C22 E6A0                <1> 	out 0xA0, al
  1298 00000C24 B008                <1> 	mov al, 0x8		;interrupt for master
  1299 00000C26 E621                <1> 	out 0x21, al
  1300 00000C28 B070                <1> 	mov al, 0x70	;interrupt for slave
  1301 00000C2A E6A1                <1> 	out 0xA1, al
  1302 00000C2C B004                <1> 	mov al, 4
  1303 00000C2E E621                <1> 	out 0x21, al
  1304 00000C30 B002                <1> 	mov al, 2
  1305 00000C32 E6A1                <1> 	out 0xA1, al
  1306 00000C34 B001                <1> 	mov al, 0x1
  1307 00000C36 E621                <1> 	out 0x21, al
  1308 00000C38 B001                <1> 	mov al, 0x1
  1309 00000C3A E6A1                <1> 	out 0xA1, al
  1310                              <1> 	
  1311 00000C3C 0F011E[BB0C]        <1> 	lidt [idt_real]
  1312 00000C41 FB                  <1> 	sti
  1313                              <1> 
  1314 00000C42 66A1[C90C]          <1> 	mov eax, [realmodeeax]
  1315 00000C46 668B1E[C50C]        <1> 	mov ebx, [realmodeebx]
  1316                              <1> 
  1317 00000C4B FF16[D10C]          <1> 	call word [realmodeptr] ;call the real mode program here
  1318                              <1> 
  1319 00000C4F 66A3[C90C]          <1> 	mov [realmodeeax], eax
  1320 00000C53 66891E[C50C]        <1> 	mov [realmodeebx], ebx
  1321                              <1> 
  1322 00000C58 FA                  <1> 	cli
  1323 00000C59 0F0116[5203]        <1> 	lgdt [gdtr]
  1324 00000C5E 0F011E[5803]        <1> 	lidt [idtr]
  1325 00000C63 0F20C0              <1> 	mov eax, cr0
  1326 00000C66 0C01                <1> 	or al, 1
  1327 00000C68 0F22C0              <1> 	mov cr0,eax
  1328 00000C6B EA[700C]2800        <1> 	jmp NEW_CODE_SEL:returntopmode
  1329                              <1> 
  1330                              <1> [BITS 32]
  1331                              <1> returntopmode:
  1332 00000C70 66B83000            <1> 	mov ax, NEW_DATA_SEL
  1333 00000C74 8ED8                <1> 	mov ds, ax
  1334 00000C76 8EC0                <1> 	mov es, ax
  1335 00000C78 8EE0                <1> 	mov fs, ax
  1336 00000C7A 8ED0                <1> 	mov ss, ax
  1337 00000C7C 8B25[B70C0000]      <1> 	mov esp, [pmodeesp]
  1338 00000C82 66B82000            <1> 	mov ax, SYS_DATA_SEL
  1339 00000C86 8EE8                <1> 	mov gs, ax
  1340                              <1> 
  1341 00000C88 BB[C10C0000]        <1> 	mov ebx, cr0old
  1342                              <1> rmcopyfromfirstmbyte:
  1343 00000C8D 658B03              <1> 	mov eax, [gs:ebx]
  1344 00000C90 8903                <1> 	mov [ebx], eax
  1345 00000C92 81C304000000        <1> 	add ebx, 4
  1346 00000C98 81FB[D10C0000]      <1> 	cmp ebx, realmodeptr
  1347 00000C9E 76ED                <1> 	jbe rmcopyfromfirstmbyte
  1348                              <1> 
  1349 00000CA0 E8C5540000          <1> 	call initialize.pic ;reset irq's and masks
  1350 00000CA5 FB                  <1> 	sti
  1351 00000CA6 A1[C90C0000]        <1> 	mov eax, [realmodeeax]
  1352 00000CAB 8B1D[C50C0000]      <1> 	mov ebx, [realmodeebx]
  1353 00000CB1 FF25[CD0C0000]      <1> 	jmp dword [realmodereturn]
  1354                              <1> 	
  1355 00000CB7 00000000            <1> pmodeesp dd 0
  1356                              <1> idt_real:
  1357 00000CBB FF03                <1> 	dw 0x3FF
  1358 00000CBD 00000000            <1> 	dd 0
  1359 00000CC1 00000000            <1> cr0old dd 0
  1360 00000CC5 00000000            <1> realmodeebx dd 0
  1361 00000CC9 00000000            <1> realmodeeax dd 0
  1362 00000CCD 00000000            <1> realmodereturn dd 0
  1363 00000CD1 0000                <1> realmodeptr dw 0
  1364 00000CD3 00000000            <1> dd 0 ;make sure the copy thing doesnt overflow
  1365                                  [BITS 32]
  1366                                      %include "source/exception.asm"
  1367                              <1> %ifdef exceptions.included
  1368                              <1> unhand:	
  1369                              <1> 	%assign i 0
  1370                              <1> 	%rep 32
  1371                              <1> 	mov byte [intprob], i
  1372                              <1> 	jmp unhand2
  1373                              <1> 	%assign i i+1
  1374                              <1> 	%endrep
  1375 00000CD7 C605[89110000]00    <2>  mov byte [intprob], i
  1376 00000CDE E974010000          <2>  jmp unhand2
  1377                              <2>  %assign i i+1
  1378 00000CE3 C605[89110000]01    <2>  mov byte [intprob], i
  1379 00000CEA E968010000          <2>  jmp unhand2
  1380                              <2>  %assign i i+1
  1381 00000CEF C605[89110000]02    <2>  mov byte [intprob], i
  1382 00000CF6 E95C010000          <2>  jmp unhand2
  1383                              <2>  %assign i i+1
  1384 00000CFB C605[89110000]03    <2>  mov byte [intprob], i
  1385 00000D02 E950010000          <2>  jmp unhand2
  1386                              <2>  %assign i i+1
  1387 00000D07 C605[89110000]04    <2>  mov byte [intprob], i
  1388 00000D0E E944010000          <2>  jmp unhand2
  1389                              <2>  %assign i i+1
  1390 00000D13 C605[89110000]05    <2>  mov byte [intprob], i
  1391 00000D1A E938010000          <2>  jmp unhand2
  1392                              <2>  %assign i i+1
  1393 00000D1F C605[89110000]06    <2>  mov byte [intprob], i
  1394 00000D26 E92C010000          <2>  jmp unhand2
  1395                              <2>  %assign i i+1
  1396 00000D2B C605[89110000]07    <2>  mov byte [intprob], i
  1397 00000D32 E920010000          <2>  jmp unhand2
  1398                              <2>  %assign i i+1
  1399 00000D37 C605[89110000]08    <2>  mov byte [intprob], i
  1400 00000D3E E914010000          <2>  jmp unhand2
  1401                              <2>  %assign i i+1
  1402 00000D43 C605[89110000]09    <2>  mov byte [intprob], i
  1403 00000D4A E908010000          <2>  jmp unhand2
  1404                              <2>  %assign i i+1
  1405 00000D4F C605[89110000]0A    <2>  mov byte [intprob], i
  1406 00000D56 E9FC000000          <2>  jmp unhand2
  1407                              <2>  %assign i i+1
  1408 00000D5B C605[89110000]0B    <2>  mov byte [intprob], i
  1409 00000D62 E9F0000000          <2>  jmp unhand2
  1410                              <2>  %assign i i+1
  1411 00000D67 C605[89110000]0C    <2>  mov byte [intprob], i
  1412 00000D6E E9E4000000          <2>  jmp unhand2
  1413                              <2>  %assign i i+1
  1414 00000D73 C605[89110000]0D    <2>  mov byte [intprob], i
  1415 00000D7A E9D8000000          <2>  jmp unhand2
  1416                              <2>  %assign i i+1
  1417 00000D7F C605[89110000]0E    <2>  mov byte [intprob], i
  1418 00000D86 E9CC000000          <2>  jmp unhand2
  1419                              <2>  %assign i i+1
  1420 00000D8B C605[89110000]0F    <2>  mov byte [intprob], i
  1421 00000D92 E9C0000000          <2>  jmp unhand2
  1422                              <2>  %assign i i+1
  1423 00000D97 C605[89110000]10    <2>  mov byte [intprob], i
  1424 00000D9E E9B4000000          <2>  jmp unhand2
  1425                              <2>  %assign i i+1
  1426 00000DA3 C605[89110000]11    <2>  mov byte [intprob], i
  1427 00000DAA E9A8000000          <2>  jmp unhand2
  1428                              <2>  %assign i i+1
  1429 00000DAF C605[89110000]12    <2>  mov byte [intprob], i
  1430 00000DB6 E99C000000          <2>  jmp unhand2
  1431                              <2>  %assign i i+1
  1432 00000DBB C605[89110000]13    <2>  mov byte [intprob], i
  1433 00000DC2 E990000000          <2>  jmp unhand2
  1434                              <2>  %assign i i+1
  1435 00000DC7 C605[89110000]14    <2>  mov byte [intprob], i
  1436 00000DCE E984000000          <2>  jmp unhand2
  1437                              <2>  %assign i i+1
  1438 00000DD3 C605[89110000]15    <2>  mov byte [intprob], i
  1439 00000DDA E978000000          <2>  jmp unhand2
  1440                              <2>  %assign i i+1
  1441 00000DDF C605[89110000]16    <2>  mov byte [intprob], i
  1442 00000DE6 E96C000000          <2>  jmp unhand2
  1443                              <2>  %assign i i+1
  1444 00000DEB C605[89110000]17    <2>  mov byte [intprob], i
  1445 00000DF2 E960000000          <2>  jmp unhand2
  1446                              <2>  %assign i i+1
  1447 00000DF7 C605[89110000]18    <2>  mov byte [intprob], i
  1448 00000DFE E954000000          <2>  jmp unhand2
  1449                              <2>  %assign i i+1
  1450 00000E03 C605[89110000]19    <2>  mov byte [intprob], i
  1451 00000E0A E948000000          <2>  jmp unhand2
  1452                              <2>  %assign i i+1
  1453 00000E0F C605[89110000]1A    <2>  mov byte [intprob], i
  1454 00000E16 E93C000000          <2>  jmp unhand2
  1455                              <2>  %assign i i+1
  1456 00000E1B C605[89110000]1B    <2>  mov byte [intprob], i
  1457 00000E22 E930000000          <2>  jmp unhand2
  1458                              <2>  %assign i i+1
  1459 00000E27 C605[89110000]1C    <2>  mov byte [intprob], i
  1460 00000E2E E924000000          <2>  jmp unhand2
  1461                              <2>  %assign i i+1
  1462 00000E33 C605[89110000]1D    <2>  mov byte [intprob], i
  1463 00000E3A E918000000          <2>  jmp unhand2
  1464                              <2>  %assign i i+1
  1465 00000E3F C605[89110000]1E    <2>  mov byte [intprob], i
  1466 00000E46 E90C000000          <2>  jmp unhand2
  1467                              <2>  %assign i i+1
  1468 00000E4B C605[89110000]1F    <2>  mov byte [intprob], i
  1469 00000E52 E900000000          <2>  jmp unhand2
  1470                              <2>  %assign i i+1
  1471                              <1> unhand2:
  1472 00000E57 FA                  <1> 	cli
  1473 00000E58 1E                  <1> 	push ds
  1474 00000E59 06                  <1> 	push es
  1475 00000E5A 0FA0                <1> 	push fs
  1476 00000E5C 0FA8                <1> 	push gs
  1477 00000E5E 16                  <1> 	push ss
  1478 00000E5F 60                  <1> 	pushad
  1479                              <1> %ifdef gui.included
  1480 00000E60 803D[50950000]00    <1> 	cmp byte [guion], 0
  1481 00000E67 0F8432000000        <1> 	je near noguiunhandstuff
  1482 00000E6D 66C705[83110000]08- <1> 	mov word [locunhandy], 8
  1483 00000E75 00                  <1>
  1484 00000E76 66C705[85110000]08- <1> 	mov word [locunhandx], 8
  1485 00000E7E 00                  <1>
  1486 00000E7F 668B1D[946C0000]    <1> 	mov bx, [background]
  1487 00000E86 66891D[87110000]    <1> 	mov [backgroundcache], bx
  1488 00000E8D C605[E0540000]01    <1> 	mov byte [mousedisabled],1
  1489 00000E94 66BB00F8            <1> 	mov bx, 1111100000000000b
  1490 00000E98 66891D[946C0000]    <1> 	mov [background], bx
  1491                              <1> noguiunhandstuff:
  1492                              <1> %endif
  1493 00000E9F 89E6                <1> 	mov esi, esp
  1494 00000EA1 8935[77110000]      <1> 	mov [espfirst], esi
  1495 00000EA7 81C6BC000000        <1> 	add esi, ((unhndrgend - unhndrg)/15)*4
  1496 00000EAD 8935[73110000]      <1> 	mov [esploc], esi
  1497 00000EB3 BE[98110000]        <1> 	mov esi, unhandmsg
  1498 00000EB8 8935[7B110000]      <1> 	mov [esiloc], esi
  1499 00000EBE 31C9                <1> 	xor ecx, ecx
  1500 00000EC0 8A0D[89110000]      <1> 	mov cl, [intprob]
  1501 00000EC6 BB[67150000]        <1> 	mov ebx, errortypes
  1502 00000ECB C1E102              <1> 	shl ecx, 2
  1503 00000ECE 01CB                <1> 	add ebx, ecx
  1504 00000ED0 81FB[A7150000]      <1> 	cmp ebx, errortypesend
  1505 00000ED6 7205                <1> 	jb gooderrortype
  1506 00000ED8 BB[A7150000]        <1> 	mov ebx, errortypesend
  1507                              <1> gooderrortype:
  1508 00000EDD 8B33                <1> 	mov esi, [ebx]
  1509                              <1> %ifdef gui.included
  1510 00000EDF 803D[50950000]00    <1> 	cmp byte [guion], 0
  1511 00000EE6 0F842D000000        <1> 	je near errortext
  1512 00000EEC 668B0D[83110000]    <1> 	mov cx, [locunhandy]
  1513 00000EF3 668B15[85110000]    <1> 	mov dx, [locunhandx]
  1514 00000EFA 66B80100            <1> 	mov ax, 1
  1515 00000EFE 6631DB              <1> 	xor bx, bx
  1516 00000F01 E822630000          <1> 	call showstring2
  1517 00000F06 66890D[83110000]    <1> 	mov [locunhandy], cx
  1518 00000F0D 668915[85110000]    <1> 	mov [locunhandx], dx
  1519 00000F14 E905000000          <1> 	jmp errortextdone
  1520                              <1> %endif
  1521                              <1> errortext:
  1522 00000F19 E8E40D0000          <1> 	call print		;;get the error message and print it
  1523                              <1> errortextdone:
  1524 00000F1E 31C9                <1> 	xor ecx, ecx
  1525 00000F20 8A0D[89110000]      <1> 	mov cl, [intprob]
  1526 00000F26 E8E1010000          <1> 	call expdump
  1527                              <1> dumpstack:
  1528 00000F2B 8B35[73110000]      <1> 	mov esi, [esploc]
  1529 00000F31 39E6                <1> 	cmp esi, esp
  1530 00000F33 7216                <1> 	jb donedump
  1531 00000F35 368B0E              <1> 	mov ecx, [ss:esi]
  1532 00000F38 81EE04000000        <1> 	sub esi, 4
  1533 00000F3E 8935[73110000]      <1> 	mov [esploc], esi
  1534 00000F44 E8C3010000          <1> 	call expdump
  1535 00000F49 EBE0                <1> 	jmp dumpstack
  1536                              <1> donedump:
  1537 00000F4B 0F20C1              <1> 	mov ecx, cr0
  1538 00000F4E E8B9010000          <1> 	call expdump
  1539 00000F53 0F20D1              <1> 	mov ecx, cr2
  1540 00000F56 E8B1010000          <1> 	call expdump
  1541 00000F5B 0F20D9              <1> 	mov ecx, cr3
  1542 00000F5E E8A9010000          <1> 	call expdump
  1543 00000F63 0F20E1              <1> 	mov ecx, cr4
  1544 00000F66 E8A1010000          <1> 	call expdump
  1545 00000F6B 0F00C9              <1> 	str ecx
  1546 00000F6E E899010000          <1> 	call expdump
  1547 00000F73 0F010D[92110000]    <1> 	sidt [igdtcache]
  1548 00000F7A 8B0D[94110000]      <1> 	mov ecx, [igdtcache + 2]
  1549 00000F80 E887010000          <1> 	call expdump
  1550 00000F85 0F0105[92110000]    <1> 	sgdt [igdtcache]
  1551 00000F8C 8B0D[94110000]      <1> 	mov ecx, [igdtcache + 2]
  1552 00000F92 E875010000          <1> 	call expdump
  1553 00000F97 0F00C1              <1> 	sldt ecx
  1554 00000F9A E86D010000          <1> 	call expdump
  1555 00000F9F 8B35[73110000]      <1> 	mov esi, [esploc]
  1556 00000FA5 368B7C2434          <1> 	mov edi, [ss:esp + 52]
  1557 00000FAA 81C710000000        <1> 	add edi, 16
  1558 00000FB0 893D[8E110000]      <1> 	mov [codelocend], edi
  1559 00000FB6 81EF20000000        <1> 	sub edi, 32
  1560                              <1> dumpcodeloop:
  1561 00000FBC 893D[8A110000]      <1> 	mov [codeloc], edi
  1562 00000FC2 8B0F                <1> 	mov ecx, [edi]
  1563 00000FC4 E843010000          <1> 	call expdump
  1564 00000FC9 8B3D[8A110000]      <1> 	mov edi, [codeloc]
  1565 00000FCF 81C704000000        <1> 	add edi, 4
  1566 00000FD5 3B3D[8E110000]      <1> 	cmp edi, [codelocend]
  1567 00000FDB 72DF                <1> 	jb dumpcodeloop
  1568 00000FDD BE[9D100000]        <1> 	mov esi, backtoosmsg
  1569                              <1> %ifdef gui.included
  1570 00000FE2 803D[50950000]00    <1> 	cmp byte [guion], 0
  1571 00000FE9 741F                <1> 	je backtomsg
  1572                              <1> guibacktomsg:
  1573 00000FEB 668B15[85110000]    <1> 	mov dx, [locunhandx]
  1574 00000FF2 668B0D[83110000]    <1> 	mov cx, [locunhandy]
  1575 00000FF9 66B80100            <1> 	mov ax, 1
  1576 00000FFD 6631DB              <1> 	xor bx, bx
  1577 00001000 E823620000          <1> 	call showstring2
  1578 00001005 E905000000          <1> 	jmp backtomsgdone
  1579                              <1> backtomsg:
  1580                              <1> %endif
  1581 0000100A E8F30C0000          <1> 	call print
  1582                              <1> backtomsgdone:
  1583 0000100F 30C0                <1> 	xor al, al
  1584 00001011 E8AF110000          <1> 	call rdcharint
  1585 00001016 803D[89110000]03    <1> 	cmp byte [intprob], 3
  1586 0000101D 7541                <1> 	jne nodebugint
  1587                              <1> %ifdef gui.included
  1588 0000101F 803D[50950000]00    <1> 	cmp byte [guion], 0
  1589 00001026 7427                <1> 	je nodebuggui
  1590 00001028 668B1D[87110000]    <1> 	mov bx, [backgroundcache]
  1591 0000102F 66891D[946C0000]    <1> 	mov [background], bx
  1592 00001036 6631DB              <1> 	xor bx, bx
  1593 00001039 C605[E0540000]00    <1> 	mov byte [mousedisabled], 0
  1594 00001040 E8CE5B0000          <1> 	call guiclear
  1595 00001045 E84E5C0000          <1> 	call reloadallgraphics
  1596 0000104A E81D150000          <1> 	call termcopy
  1597                              <1> nodebuggui:
  1598                              <1> %endif
  1599 0000104F 8B35[77110000]      <1> 	mov esi, [espfirst]
  1600 00001055 89F4                <1> 	mov esp, esi
  1601 00001057 61                  <1> 	popad
  1602 00001058 17                  <1> 	pop ss
  1603 00001059 0FA9                <1> 	pop gs
  1604 0000105B 0FA1                <1> 	pop fs
  1605 0000105D 07                  <1> 	pop es
  1606 0000105E 1F                  <1> 	pop ds
  1607 0000105F CF                  <1> 	iret
  1608                              <1> nodebugint:
  1609 00001060 61                  <1> 	popad
  1610 00001061 17                  <1> 	pop ss
  1611 00001062 0FA9                <1> 	pop gs
  1612 00001064 0FA1                <1> 	pop fs
  1613 00001066 07                  <1> 	pop es
  1614 00001067 1F                  <1> 	pop ds
  1615                              <1> %ifdef gui.included
  1616 00001068 803D[50950000]00    <1> 	cmp byte [guion], 0
  1617 0000106F 7427                <1> 	je returnunhandgui
  1618 00001071 668B1D[87110000]    <1> 	mov bx, [backgroundcache]
  1619 00001078 66891D[946C0000]    <1> 	mov [background], bx
  1620 0000107F 6631DB              <1> 	xor bx, bx
  1621 00001082 C605[E0540000]00    <1> 	mov byte [mousedisabled], 0
  1622 00001089 E8855B0000          <1> 	call guiclear
  1623 0000108E E8055C0000          <1> 	call reloadallgraphics
  1624 00001093 E8D4140000          <1> 	call termcopy
  1625                              <1> %endif
  1626                              <1> returnunhandgui:
  1627 00001098 E9E4180000          <1> 	jmp nwcmd
  1628 0000109D 506C6561736520706F- <1> backtoosmsg db "Please post any problems in the Issues section at solleros.googlecode.com",10
  1629 000010A6 737420616E79207072- <1>
  1630 000010AF 6F626C656D7320696E- <1>
  1631 000010B8 207468652049737375- <1>
  1632 000010C1 65732073656374696F- <1>
  1633 000010CA 6E20617420736F6C6C- <1>
  1634 000010D3 65726F732E676F6F67- <1>
  1635 000010DC 6C65636F64652E636F- <1>
  1636 000010E5 6D0A                <1>
  1637 000010E7 507265737320616E79- <1> 			db "Press any key to return to SollerOS",10,0
  1638 000010F0 206B657920746F2072- <1>
  1639 000010F9 657475726E20746F20- <1>
  1640 00001102 536F6C6C65724F530A- <1>
  1641 0000110B 00                  <1>
  1642                              <1> expdump:
  1643 0000110C 8B35[7B110000]      <1> 	mov esi, [esiloc]
  1644 00001112 89F7                <1> 	mov edi, esi
  1645 00001114 81C70F000000        <1> 	add edi, 15
  1646 0000111A 81C604000000        <1> 	add esi, 4
  1647 00001120 893D[7B110000]      <1> 	mov [esiloc], edi
  1648 00001126 81EF03000000        <1> 	sub edi, 3
  1649 0000112C E8B71C0000          <1> 	call converthex
  1650 00001131 81EE04000000        <1> 	sub esi, 4
  1651                              <1> %ifdef gui.included
  1652 00001137 803D[50950000]00    <1> 	cmp byte [guion], 0
  1653 0000113E 0F8429000000        <1> 	je near expdumptext
  1654 00001144 668B0D[83110000]    <1> 	mov cx, [locunhandy]
  1655 0000114B 668B15[85110000]    <1> 	mov dx, [locunhandx]
  1656 00001152 66B80100            <1> 	mov ax, 1
  1657 00001156 6631DB              <1> 	xor bx, bx
  1658 00001159 E8CA600000          <1> 	call showstring2
  1659 0000115E 66890D[83110000]    <1> 	mov [locunhandy], cx
  1660 00001165 668915[85110000]    <1> 	mov [locunhandx], dx
  1661 0000116C C3                  <1> 	ret
  1662                              <1> %endif
  1663                              <1> expdumptext:
  1664 0000116D E8900B0000          <1> 	call print
  1665 00001172 C3                  <1> 	ret
  1666 00001173 00000000            <1> esploc dd 0
  1667 00001177 00000000            <1> espfirst dd 0
  1668 0000117B 00000000            <1> esiloc dd 0
  1669 0000117F 00000000            <1> esiregbuf dd 0
  1670 00001183 0100                <1> locunhandy dw 1
  1671 00001185 0100                <1> locunhandx dw 1
  1672 00001187 0000                <1> backgroundcache dw 0
  1673 00001189 00                  <1> intprob db 0
  1674 0000118A 00000000            <1> codeloc dd 0
  1675 0000118E 00000000            <1> codelocend dd 0
  1676 00001192 000000000000        <1> igdtcache dw 0,0,0
  1677                              <1> 	unhandmsg:	
  1678 00001198 494E543D3030303030- <1> 			db "INT=00000000",255,10,0
  1679 000011A1 303030FF0A00        <1>
  1680                              <1> unhndrg:
  1681 000011A7 FFFFFFFF3030303030- <1> 	times 7 db 255,255,255,255,"00000000  ",0	;;this dumps the stack before the stack frame in question
  1682 000011B0 303030202000<rept>  <1>
  1683 00001210 FFFFFFFF3030303030- <1> 			db 255,255,255,255,"00000000",255,10,0
  1684 00001219 303030FF0A00        <1>
  1685 0000121F FFFFFFFF3030303030- <1> 	times 7 db 255,255,255,255,"00000000  ",0	;;this dumps the stack before the stack frame in question
  1686 00001228 303030202000<rept>  <1>
  1687 00001288 FFFFFFFF3030303030- <1> 			db 255,255,255,255,"00000000",255,10,0
  1688 00001291 303030FF0A00        <1>
  1689 00001297 FFFFFFFF3030303030- <1> 	times 7 db 255,255,255,255,"00000000  ",0	;;this dumps the stack before the stack frame in question
  1690 000012A0 303030202000<rept>  <1>
  1691 00001300 FFFFFFFF3030303030- <1> 			db 255,255,255,255,"00000000",255,10,0
  1692 00001309 303030FF0A00        <1>
  1693 0000130F FFFFFFFF3030303030- <1> 	times 7 db 255,255,255,255,"00000000  ",0	;;this dumps the stack before the stack frame in question
  1694 00001318 303030202000<rept>  <1>
  1695 00001378 FFFFFFFF3030303030- <1> 			db 255,255,255,255,"00000000",255,10,0
  1696 00001381 303030FF0A00        <1>
  1697                              <1> unhandregs:
  1698 00001387 45464C3D3030303030- <1> 			db "EFL=00000000  ",0
  1699 00001390 303030202000        <1>
  1700 00001396 43533A3D3030303030- <1> 			db "CS:=00000000  ",0
  1701 0000139F 303030202000        <1>
  1702 000013A5 4549503D3030303030- <1> 			db "EIP=00000000",255,10,0
  1703 000013AE 303030FF0A00        <1>
  1704 000013B4 44533A3D3030303030- <1> 			db "DS:=00000000  ",0
  1705 000013BD 303030202000        <1>
  1706 000013C3 45533A3D3030303030- <1> 			db "ES:=00000000  ",0
  1707 000013CC 303030202000        <1>
  1708 000013D2 46533A3D3030303030- <1> 			db "FS:=00000000  ",0
  1709 000013DB 303030202000        <1>
  1710 000013E1 47533A3D3030303030- <1> 			db "GS:=00000000  ",0
  1711 000013EA 303030202000        <1>
  1712 000013F0 53533A3D3030303030- <1> 			db "SS:=00000000",255,10,0
  1713 000013F9 303030FF0A00        <1>
  1714 000013FF 4541583D3030303030- <1> 			db "EAX=00000000  ",0
  1715 00001408 303030202000        <1>
  1716 0000140E 4543583D3030303030- <1> 			db "ECX=00000000  ",0
  1717 00001417 303030202000        <1>
  1718 0000141D 4544583D3030303030- <1> 			db "EDX=00000000  ",0
  1719 00001426 303030202000        <1>
  1720 0000142C 4542583D3030303030- <1> 			db "EBX=00000000",255,10,0
  1721 00001435 303030FF0A00        <1>
  1722 0000143B 4553503D3030303030- <1> 			db "ESP=00000000  ",0
  1723 00001444 303030202000        <1>
  1724 0000144A 4542503D3030303030- <1> 			db "EBP=00000000  ",0
  1725 00001453 303030202000        <1>
  1726 00001459 4553493D3030303030- <1> 			db "ESI=00000000  ",0
  1727 00001462 303030202000        <1>
  1728 00001468 4544493D3030303030- <1> unhndrgend:	db "EDI=00000000",255,10,0
  1729 00001471 303030FF0A00        <1>
  1730 00001477 4352303D3030303030- <1> 			db "CR0=00000000  ",0
  1731 00001480 303030202000        <1>
  1732 00001486 4352323D3030303030- <1> 			db "CR2=00000000  ",0
  1733 0000148F 303030202000        <1>
  1734 00001495 4352333D3030303030- <1> 			db "CR3=00000000  ",0
  1735 0000149E 303030202000        <1>
  1736 000014A4 4352343D3030303030- <1> 			db "CR4=00000000",255,10,0
  1737 000014AD 303030FF0A00        <1>
  1738 000014B3 54523A3D3030303030- <1> 			db "TR:=00000000  ",0
  1739 000014BC 303030202000        <1>
  1740 000014C2 4944543D3030303030- <1> 			db "IDT=00000000  ",0
  1741 000014CB 303030202000        <1>
  1742 000014D1 4744543D3030303030- <1> 			db "GDT=00000000  ",0
  1743 000014DA 303030202000        <1>
  1744 000014E0 4C44543D3030303030- <1> 			db "LDT=00000000",255,10,0
  1745 000014E9 303030FF0A00        <1>
  1746 000014EF FFFFFFFF3030303030- <1> unhandcode: times 2 db 255,255,255,255,"00000000  ",0	;;this dumps the code before and after the interrupt in question
  1747 000014F8 303030202000<rept>  <1>
  1748 0000150D FFFFFFFF3030303030- <1> 			db 255,255,255,255,"00000000 ",255,0
  1749 00001516 30303020FF00        <1>
  1750 0000151C FFFFFF5B3030303030- <1> 			db 255,255,255,"[00000000] ",0
  1751 00001525 3030305D2000        <1>
  1752 0000152B FFFFFFFF3030303030- <1> 			times 3 db 255,255,255,255,"00000000  ",0
  1753 00001534 303030202000<rept>  <1>
  1754 00001558 FFFFFFFF3030303030- <1> 			db 255,255,255,255,"00000000",255,10,0
  1755 00001561 303030FF0A00        <1>
  1756                              <1> unhandmsgend:
  1757                              <1> 
  1758                              <1> errortypes:
  1759 00001567 [AB150000]          <1> 			dd err0
  1760 0000156B [0F160000]          <1> 			dd err1
  1761 0000156F [70160000]          <1> 			dd err2
  1762 00001573 [C5160000]          <1> 			dd err3
  1763 00001577 [29170000]          <1> 			dd err4
  1764 0000157B [7B170000]          <1> 			dd err5
  1765 0000157F [E5170000]          <1> 			dd err6
  1766 00001583 [4D180000]          <1> 			dd err7
  1767 00001587 [97180000]          <1> 			dd err8
  1768 0000158B [F4180000]          <1> 			dd err9
  1769 0000158F [4D190000]          <1> 			dd err10
  1770 00001593 [98190000]          <1> 			dd err11
  1771 00001597 [E8190000]          <1> 			dd err12
  1772 0000159B [411A0000]          <1> 			dd err13
  1773 0000159F [A41A0000]          <1> 			dd err14
  1774 000015A3 [E01A0000]          <1> 			dd err15
  1775                              <1> errortypesend:
  1776 000015A7 [6B1B0000]          <1> 			dd unknownerror
  1777                              <1> 			
  1778 000015AB 4469766973696F6E20- <1> err0	db "Division by zero:",10
  1779 000015B4 6279207A65726F3A0A  <1>
  1780 000015BD 546563686E6963616C- <1> 		db "Technically lim a",246,"x = ",236," when a is any real number. Happy Easter!",10
  1781 000015C6 6C79206C696D2061F6- <1>
  1782 000015CF 78203D20EC20776865- <1>
  1783 000015D8 6E206120697320616E- <1>
  1784 000015E1 79207265616C206E75- <1>
  1785 000015EA 6D6265722E20486170- <1>
  1786 000015F3 707920456173746572- <1>
  1787 000015FC 210A                <1>
  1788 000015FE 202020202020202020- <1> 		db "            x",26,"0",10,0
  1789 00001607 202020781A300A00    <1>
  1790                              <1> 		
  1791 0000160F 53696E676C652D7374- <1> err1	db "Single-step/Breakpoint:",10
  1792 00001618 65702F427265616B70- <1>
  1793 00001621 6F696E743A0A        <1>
  1794 00001627 4120627265616B706F- <1> 		db "A breakpoint fault, breakpoint trap, or single-step trap was triggered.",10,0
  1795 00001630 696E74206661756C74- <1>
  1796 00001639 2C20627265616B706F- <1>
  1797 00001642 696E7420747261702C- <1>
  1798 0000164B 206F722073696E676C- <1>
  1799 00001654 652D73746570207472- <1>
  1800 0000165D 617020776173207472- <1>
  1801 00001666 696767657265642E0A- <1>
  1802 0000166F 00                  <1>
  1803                              <1> 		
  1804 00001670 4E6F6E6D61736B6162- <1> err2	db "Nonmaskable interrupt:",10
  1805 00001679 6C6520696E74657272- <1>
  1806 00001682 7570743A0A          <1>
  1807 00001687 412068617264776172- <1> 		db "A hardware interrupt was triggered that could not be masked.",10,0
  1808 00001690 6520696E7465727275- <1>
  1809 00001699 707420776173207472- <1>
  1810 000016A2 696767657265642074- <1>
  1811 000016AB 68617420636F756C64- <1>
  1812 000016B4 206E6F74206265206D- <1>
  1813 000016BD 61736B65642E0A00    <1>
  1814                              <1> 		
  1815 000016C5 427265616B706F696E- <1> err3	db "Breakpoint:",10
  1816 000016CE 743A0A              <1>
  1817 000016D1 5468697320696E7465- <1> 		db "This interrupt is used in programs to show the stack and registers and can be",10
  1818 000016DA 727275707420697320- <1>
  1819 000016E3 7573656420696E2070- <1>
  1820 000016EC 726F6772616D732074- <1>
  1821 000016F5 6F2073686F77207468- <1>
  1822 000016FE 6520737461636B2061- <1>
  1823 00001707 6E6420726567697374- <1>
  1824 00001710 65727320616E642063- <1>
  1825 00001719 616E2062650A        <1>
  1826 0000171F 69676E6F7265642E0A- <1> 		db "ignored.",10,0
  1827 00001728 00                  <1>
  1828                              <1> 		
  1829 00001729 4F766572666C6F773A- <1> err4	db "Overflow:",10
  1830 00001732 0A                  <1>
  1831 00001733 5468652070726F6365- <1> 		db "The processor ran into an INTO instruction with the overflow flag set.",10,0
  1832 0000173C 73736F722072616E20- <1>
  1833 00001745 696E746F20616E2049- <1>
  1834 0000174E 4E544F20696E737472- <1>
  1835 00001757 756374696F6E207769- <1>
  1836 00001760 746820746865206F76- <1>
  1837 00001769 6572666C6F7720666C- <1>
  1838 00001772 6167207365742E0A00  <1>
  1839                              <1> 		
  1840 0000177B 426F756E6473206368- <1> err5	db "Bounds check:",10
  1841 00001784 65636B3A0A          <1>
  1842 00001789 5468652070726F6365- <1> 		db "The processor rebounded from a BOUND instruction run on an operand that was out",10
  1843 00001792 73736F72207265626F- <1>
  1844 0000179B 756E6465642066726F- <1>
  1845 000017A4 6D206120424F554E44- <1>
  1846 000017AD 20696E737472756374- <1>
  1847 000017B6 696F6E2072756E206F- <1>
  1848 000017BF 6E20616E206F706572- <1>
  1849 000017C8 616E64207468617420- <1>
  1850 000017D1 776173206F75740A    <1>
  1851 000017D9 6F6620626F756E6473- <1> 		db "of bounds.",10,0
  1852 000017E2 2E0A00              <1>
  1853                              <1> 		
  1854 000017E5 496E76616C6964206F- <1> err6	db "Invalid opcode:",10
  1855 000017EE 70636F64653A0A      <1>
  1856 000017F5 5468652070726F6365- <1> 		db "The processor has no idea what it was trying to execute. Don't run SSE4 code",10
  1857 000017FE 73736F722068617320- <1>
  1858 00001807 6E6F20696465612077- <1>
  1859 00001810 686174206974207761- <1>
  1860 00001819 7320747279696E6720- <1>
  1861 00001822 746F20657865637574- <1>
  1862 0000182B 652E20446F6E277420- <1>
  1863 00001834 72756E205353453420- <1>
  1864 0000183D 636F64650A          <1>
  1865 00001842 6F6E20343836277321- <1> 		db "on 486's!",10,0
  1866 0000184B 0A00                <1>
  1867                              <1> 		
  1868 0000184D 436F70726F63657373- <1> err7	db "Coprocessor not available:",10
  1869 00001856 6F72206E6F74206176- <1>
  1870 0000185F 61696C61626C653A0A  <1>
  1871 00001868 446F6E277420796F75- <1> 		db "Don't you know they don't make those anymore!",10,0
  1872 00001871 206B6E6F7720746865- <1>
  1873 0000187A 7920646F6E2774206D- <1>
  1874 00001883 616B652074686F7365- <1>
  1875 0000188C 20616E796D6F726521- <1>
  1876 00001895 0A00                <1>
  1877                              <1> 		
  1878 00001897 446F75626C65206661- <1> err8	db "Double fault:",10
  1879 000018A0 756C743A0A          <1>
  1880 000018A5 546865206578636570- <1> 		db "The exception handler could not handle that it could not handle an exception.",10,0
  1881 000018AE 74696F6E2068616E64- <1>
  1882 000018B7 6C657220636F756C64- <1>
  1883 000018C0 206E6F742068616E64- <1>
  1884 000018C9 6C6520746861742069- <1>
  1885 000018D2 7420636F756C64206E- <1>
  1886 000018DB 6F742068616E646C65- <1>
  1887 000018E4 20616E206578636570- <1>
  1888 000018ED 74696F6E2E0A00      <1>
  1889                              <1> 		
  1890 000018F4 436F70726F63657373- <1> err9	db "Coprocessor segment overrun:",10,0
  1891 000018FD 6F72207365676D656E- <1>
  1892 00001906 74206F76657272756E- <1>
  1893 0000190F 3A0A00              <1>
  1894 00001912 54686973206E657665- <1> 		db "This never happens in modern computers, and never should.",10,0
  1895 0000191B 722068617070656E73- <1>
  1896 00001924 20696E206D6F646572- <1>
  1897 0000192D 6E20636F6D70757465- <1>
  1898 00001936 72732C20616E64206E- <1>
  1899 0000193F 657665722073686F75- <1>
  1900 00001948 6C642E0A00          <1>
  1901                              <1> 
  1902 0000194D 496E76616C69642054- <1> err10	db "Invalid TSS:",10
  1903 00001956 53533A0A            <1>
  1904 0000195A 546865205453532074- <1> 		db "The TSS that was switched to is invalid. Nothing funny here.",10,0
  1905 00001963 686174207761732073- <1>
  1906 0000196C 776974636865642074- <1>
  1907 00001975 6F20697320696E7661- <1>
  1908 0000197E 6C69642E204E6F7468- <1>
  1909 00001987 696E672066756E6E79- <1>
  1910 00001990 20686572652E0A00    <1>
  1911                              <1> 		
  1912 00001998 5365676D656E74206E- <1> err11	db "Segment not present:",10
  1913 000019A1 6F742070726573656E- <1>
  1914 000019AA 743A0A              <1>
  1915 000019AD 546865207072657365- <1> 		db "The present bit of the segment descriptor is set to zero.",10,0
  1916 000019B6 6E7420626974206F66- <1>
  1917 000019BF 20746865207365676D- <1>
  1918 000019C8 656E74206465736372- <1>
  1919 000019D1 6970746F7220697320- <1>
  1920 000019DA 73657420746F207A65- <1>
  1921 000019E3 726F2E0A00          <1>
  1922                              <1> 		
  1923 000019E8 537461636B20657863- <1> err12	db "Stack exception:",10
  1924 000019F1 657074696F6E3A0A    <1>
  1925 000019F9 546865205353206465- <1> 		db "The SS descriptor is invalid or not present or its limit is too small.",10,0
  1926 00001A02 7363726970746F7220- <1>
  1927 00001A0B 697320696E76616C69- <1>
  1928 00001A14 64206F72206E6F7420- <1>
  1929 00001A1D 70726573656E74206F- <1>
  1930 00001A26 7220697473206C696D- <1>
  1931 00001A2F 697420697320746F6F- <1>
  1932 00001A38 20736D616C6C2E0A00  <1>
  1933                              <1> 		
  1934 00001A41 47656E6572616C2070- <1> err13	db "General protection violation:",10
  1935 00001A4A 726F74656374696F6E- <1>
  1936 00001A53 2076696F6C6174696F- <1>
  1937 00001A5C 6E3A0A              <1>
  1938 00001A5F 596F752076696F6C61- <1> 		db "You violated the computer. Step away slowly. The FBI is on its way.",10,0
  1939 00001A68 746564207468652063- <1>
  1940 00001A71 6F6D70757465722E20- <1>
  1941 00001A7A 537465702061776179- <1>
  1942 00001A83 20736C6F776C792E20- <1>
  1943 00001A8C 546865204642492069- <1>
  1944 00001A95 73206F6E2069747320- <1>
  1945 00001A9E 7761792E0A00        <1>
  1946                              <1> 		
  1947 00001AA4 50616765206661756C- <1> err14	db "Page fault:",10
  1948 00001AAD 743A0A              <1>
  1949 00001AB0 546865207061676520- <1> 		db "The page that was requested was not available.",10,0
  1950 00001AB9 746861742077617320- <1>
  1951 00001AC2 726571756573746564- <1>
  1952 00001ACB 20776173206E6F7420- <1>
  1953 00001AD4 617661696C61626C65- <1>
  1954 00001ADD 2E0A00              <1>
  1955                              <1> 		
  1956 00001AE0 526573657276656420- <1> err15	db "Reserved for Plan R:",10
  1957 00001AE9 666F7220506C616E20- <1>
  1958 00001AF2 523A0A              <1>
  1959 00001AF5 5468697320696E7465- <1> 		db "This interrupt is reserved for usage only by the military when it is necessary",10
  1960 00001AFE 727275707420697320- <1>
  1961 00001B07 726573657276656420- <1>
  1962 00001B10 666F72207573616765- <1>
  1963 00001B19 206F6E6C7920627920- <1>
  1964 00001B22 746865206D696C6974- <1>
  1965 00001B2B 617279207768656E20- <1>
  1966 00001B34 6974206973206E6563- <1>
  1967 00001B3D 6573736172790A      <1>
  1968 00001B44 746F20696E69746961- <1> 		db "to initiate a full-scale coup d'",130,"tat.",10,0
  1969 00001B4D 746520612066756C6C- <1>
  1970 00001B56 2D7363616C6520636F- <1>
  1971 00001B5F 757020642782746174- <1>
  1972 00001B68 2E0A00              <1>
  1973                              <1> 		
  1974 00001B6B 576861742074686520- <1> unknownerror db "What the hell just happened? Is everyone okay? Hard drive? Video card?",10
  1975 00001B74 68656C6C206A757374- <1>
  1976 00001B7D 2068617070656E6564- <1>
  1977 00001B86 3F2049732065766572- <1>
  1978 00001B8F 796F6E65206F6B6179- <1>
  1979 00001B98 3F2048617264206472- <1>
  1980 00001BA1 6976653F2056696465- <1>
  1981 00001BAA 6F20636172643F0A    <1>
  1982 00001BB2 4D656D6F72793F2041- <1> 			db	"Memory? Are you there?",10,0
  1983 00001BBB 726520796F75207468- <1>
  1984 00001BC4 6572653F0A00        <1>
  1985                              <1> %else
  1986                              <1> unhand:	
  1987                              <1> 	%assign i 0
  1988                              <1> 	%rep 32
  1989                              <1> 	mov byte [intprob], i
  1990                              <1> 	jmp unhand2
  1991                              <1> 	%assign i i+1
  1992                              <1> 	%endrep
  1993                              <1> unhand2:
  1994                              <1> 	cmp byte [intprob], 3
  1995                              <1> 	je handled	;if it is a debug interrupt, it is auto handled
  1996                              <1> 	mov ebx, 0xDEADCD00 ;this shows that an exception occured even though more detailed info cannot be shown
  1997                              <1> 						;CD stands for the interrupt code, DEAD shows that the program died because of the int
  1998                              <1> 	mov bl, [intprob]
  1999                              <1> 	jmp exitprog
  2000                              <1> intprob db 0
  2001                              <1> %endif
  2002                                      %include "source/ints.asm"
  2003                              <1> newints:	;for great justice
  2004 00001BCA 80FC00              <1> 	cmp ah, 0
  2005 00001BCD 0F847F000000        <1> 	je near intx0   ;kills app
  2006 00001BD3 80FC01              <1> 	cmp ah, 1
  2007 00001BD6 0F84FE000000        <1> 	je near intx1   ;print string
  2008 00001BDC 80FC02              <1> 	cmp ah, 2
  2009 00001BDF 0F8450010000        <1> 	je near intx2	;read string
  2010 00001BE5 80FC03              <1> 	cmp ah, 3
  2011 00001BE8 0F8470010000        <1> 	je near intx3	;clear screen
  2012 00001BEE 80FC04              <1> 	cmp ah, 4
  2013 00001BF1 0F84E5010000        <1> 	je near intx4	;read and print string
  2014 00001BF7 80FC05              <1> 	cmp ah, 5
  2015 00001BFA 0F84B9050000        <1> 	je near intx5	;get char
  2016 00001C00 80FC06              <1> 	cmp ah, 6
  2017 00001C03 0F840B060000        <1> 	je near intx6	;print char
  2018 00001C09 80FC07              <1> 	cmp ah, 7
  2019 00001C0C 0F84ED070000        <1> 	je near intx7	;read file
  2020                              <1> ;	cmp ah, 8
  2021                              <1> ;	je near intx8	;write file
  2022 00001C12 80FC09              <1> 	cmp ah, 9
  2023 00001C15 0F84EE070000        <1> 	je near intx9	;convert number to string
  2024 00001C1B 80FC0A              <1> 	cmp ah, 10
  2025 00001C1E 0F84FD070000        <1> 	je near intx10	;convert string to number
  2026                              <1> %ifdef threads.included
  2027 00001C24 80FC0B              <1> 	cmp ah, 11
  2028 00001C27 0F84FE070000        <1> 	je near intx11	;create thread
  2029                              <1> %endif
  2030 00001C2D 80FC0C              <1> 	cmp ah, 12
  2031 00001C30 0F84CC080000        <1> 	je near intx12	;get time
  2032 00001C36 80FC0D              <1> 	cmp ah, 13
  2033 00001C39 0F84D8080000        <1> 	je near intx13	;set time
  2034 00001C3F 80FC0E              <1> 	cmp ah, 14
  2035 00001C42 0F84DF080000        <1> 	je near intx14	;run program
  2036 00001C48 80FC0F              <1> 	cmp ah, 15
  2037 00001C4B 0F84EB080000        <1> 	je near intx15	;get program info-location of name/options/number of options/environmental vars
  2038 00001C51 C3                  <1> 	ret
  2039                              <1> 	
  2040                              <1> ;;the jmp timerinterrupt's ensure that task switches occur
  2041                              <1> intx0:
  2042                              <1> 	%include 'source/interrupts/0_exit.asm'
  2043                              <2> exitprog:
  2044 00001C52 66B83000            <2> 	mov ax, NEW_DATA_SEL
  2045 00001C56 8ED8                <2> 	mov ds, ax
  2046 00001C58 8EC0                <2> 	mov es, ax
  2047 00001C5A 8EE0                <2> 	mov fs, ax
  2048 00001C5C 66B82000            <2> 	mov ax, SYS_DATA_SEL
  2049 00001C60 8EE8                <2> 	mov gs, ax
  2050 00001C62 C705[B0660000]0000- <2> 	mov dword [currentthread], 0
  2051 00001C6A 0000                <2>
  2052 00001C6C C705[AB660000]0400- <2> 	mov dword [lastthread], 4
  2053 00001C74 0000                <2>
  2054 00001C76 C605[AF660000]00    <2> 	mov byte [threadson], 0 ;for now i need to use this
  2055 00001C7D 8B25[96AB0000]      <2> 	mov esp, [previousstack] ;and this
  2056 00001C83 81FB00000000        <2> 	cmp ebx, 0
  2057 00001C89 0F8501000000        <2> 	jne near .error
  2058 00001C8F C3                  <2> 	ret
  2059                              <2> .error:
  2060 00001C90 89D9                <2> 	mov ecx, ebx
  2061 00001C92 B006                <2> 	mov al, 6
  2062 00001C94 A2[462E0000]        <2> 	mov [firsthexshown], al
  2063 00001C99 51                  <2> 	push ecx
  2064 00001C9A BE[B51C0000]        <2> 	mov esi, .msg1
  2065 00001C9F E840000000          <2> 	call printhighlight
  2066 00001CA4 59                  <2> 	pop ecx
  2067 00001CA5 E8B1110000          <2> 	call showhex
  2068 00001CAA BE[CA1C0000]        <2> 	mov esi, .msg2
  2069 00001CAF E830000000          <2> 	call printhighlight
  2070 00001CB4 C3                  <2> 	ret
  2071                              <2> 	
  2072 00001CB5 416E20657869742073- <2> .msg1 db "An exit status of 0x",0
  2073 00001CBE 7461747573206F6620- <2>
  2074 00001CC7 307800              <2>
  2075 00001CCA 087761732072657475- <2> .msg2 db 8,"was returned.",10,0
  2076 00001CD3 726E65642E0A00      <2>
  2077                              <1> intx1:
  2078                              <1> 	%include 'source/interrupts/1_prntstr.asm'
  2079 00001CDA E82A000000          <2> call printint
  2080 00001CDF E9C1E5FFFF          <2> jmp timerinterrupt
  2081                              <2> 
  2082                              <2> 	printhighlight:
  2083 00001CE4 6631C0              <2> 		xor ax, ax
  2084 00001CE7 66BBF000            <2> 		mov bx, 0xF0
  2085 00001CEB E919000000          <2> 		jmp printint
  2086                              <2> 	printquiet:
  2087 00001CF0 6631C0              <2> 		xor ax, ax
  2088 00001CF3 A2[341D0000]        <2> 		mov [endkeyprint], al
  2089 00001CF8 66BB0700            <2> 		mov bx, 7
  2090 00001CFC E820000000          <2> 		call printint.b
  2091 00001D01 C3                  <2> 		ret
  2092                              <2>     print:
  2093 00001D02 6631C0              <2> 		xor ax, ax
  2094 00001D05 66BB0700            <2> 		mov bx, 7
  2095                              <2> 	printint:	;;print line, al=last key,bl=modifier, esi=buffer
  2096 00001D09 56                  <2> 		push esi
  2097 00001D0A A2[341D0000]        <2> 		mov [endkeyprint], al
  2098 00001D0F E80D000000          <2> 		call .b
  2099 00001D14 89F1                <2> 		mov ecx, esi
  2100 00001D16 5F                  <2> 		pop edi
  2101 00001D17 29F9                <2> 		sub ecx, edi
  2102 00001D19 51                  <2> 		push ecx
  2103 00001D1A E84D080000          <2> 		call termcopy
  2104 00001D1F 59                  <2> 		pop ecx
  2105 00001D20 C3                  <2> 		ret
  2106                              <2> 	.b:
  2107 00001D21 8A06                <2> 		mov al, [esi]
  2108 00001D23 3A05[341D0000]      <2> 		cmp al, [endkeyprint]
  2109 00001D29 7408                <2> 		je .done
  2110 00001D2B E809050000          <2> 		call prcharq
  2111 00001D30 46                  <2> 		inc esi
  2112 00001D31 EBEE                <2> 		jmp .b
  2113                              <2> 	.done:
  2114 00001D33 C3                  <2> 		ret
  2115                              <2> 
  2116 00001D34 00                  <2> endkeyprint db 0
  2117                              <1> intx2:
  2118                              <1> 	%include 'source/interrupts/2_readstr.asm'
  2119 00001D35 E805000000          <2> call readint
  2120 00001D3A E966E5FFFF          <2> jmp timerinterrupt
  2121                              <2> 
  2122                              <2> 	readint:	;;get line, al=last key, esi = buffer, edi = endbuffer	
  2123 00001D3F 89C3                <2> 		mov ebx, eax
  2124                              <2> 	.b:
  2125 00001D41 53                  <2> 		push ebx
  2126 00001D42 57                  <2> 		push edi
  2127 00001D43 56                  <2> 		push esi
  2128 00001D44 30C0                <2> 		xor al, al
  2129 00001D46 E87A040000          <2> 		call rdcharint
  2130 00001D4B 5E                  <2> 		pop esi
  2131 00001D4C 8806                <2> 		mov [esi], al
  2132 00001D4E 46                  <2> 		inc esi
  2133 00001D4F 5F                  <2> 		pop edi
  2134 00001D50 5B                  <2> 		pop ebx
  2135 00001D51 39FE                <2> 		cmp esi, edi
  2136 00001D53 7304                <2> 		jae .done
  2137 00001D55 38D8                <2> 		cmp al, bl
  2138 00001D57 75E8                <2> 		jne .b
  2139                              <2> 	.done:
  2140 00001D59 4E                  <2> 		dec esi
  2141 00001D5A C60600              <2> 		mov byte [esi], 0
  2142 00001D5D C3                  <2> 		ret
  2143                              <1> intx3:
  2144                              <1> 	%include 'source/interrupts/3_clearscrn.asm'
  2145 00001D5E E805000000          <2> call clear
  2146 00001D63 E93DE5FFFF          <2> jmp timerinterrupt
  2147                              <2> %ifdef io.serial
  2148                              <2> clear:
  2149                              <2> 	ret
  2150                              <2> %else
  2151                              <2> clear:		
  2152 00001D68 668B0D[FB230000]    <2> 		mov cx, [charxy]
  2153 00001D6F BF[2CDD2800]        <2> 		mov edi, videobuf
  2154 00001D74 6631C0              <2> 		xor ax, ax
  2155 00001D77 66A3[F5230000]      <2> 		mov [linebeginpos], ax
  2156 00001D7D 66A3[F7230000]      <2> 		mov [videobufpos], ax
  2157 00001D83 6631D2              <2> 		xor dx, dx
  2158 00001D86 66A3[F9230000]      <2> 		mov [charpos], ax
  2159 00001D8C B407                <2> 		mov ah, 7
  2160                              <2> 	clearb:
  2161 00001D8E 668907              <2> 		mov [edi], ax
  2162 00001D91 81C702000000        <2> 		add edi, 2
  2163 00001D97 FEC9                <2> 		dec cl
  2164 00001D99 80F900              <2> 		cmp cl, 0
  2165 00001D9C 75F0                <2> 		jne clearb
  2166 00001D9E 8A0D[FB230000]      <2> 		mov cl, [charxy]
  2167 00001DA4 FECD                <2> 		dec ch
  2168 00001DA6 80FD00              <2> 		cmp ch, 0
  2169 00001DA9 75E3                <2> 		jne clearb
  2170                              <2> 	cleardouble:
  2171 00001DAB BF[D0472900]        <2> 		mov edi, videobuf2
  2172 00001DB0 668B0D[FB230000]    <2> 		mov cx, [charxy]
  2173 00001DB7 31C0                <2> 		xor eax, eax
  2174                              <2> 	clearc:
  2175 00001DB9 668907              <2> 		mov [edi], ax
  2176 00001DBC 81C702000000        <2> 		add edi, 2
  2177 00001DC2 FEC9                <2> 		dec cl
  2178 00001DC4 80F900              <2> 		cmp cl, 0
  2179 00001DC7 75F0                <2> 		jne clearc
  2180 00001DC9 8A0D[FB230000]      <2> 		mov cl, [charxy]
  2181 00001DCF FECD                <2> 		dec ch
  2182 00001DD1 80FD00              <2> 		cmp ch, 0
  2183 00001DD4 75E3                <2> 		jne clearc
  2184 00001DD6 E891070000          <2> 		call termcopy
  2185 00001DDB C3                  <2> 		ret
  2186                              <2> %endif
  2187                              <2> 		
  2188                              <1> intx4:
  2189                              <1> 	%include 'source/interrupts/4_prntreadstr.asm'
  2190 00001DDC E809000000          <2> call rdprint
  2191 00001DE1 E9BFE4FFFF          <2> jmp timerinterrupt
  2192                              <2> 
  2193                              <2> readline:
  2194 00001DE6 B00A                <2>   mov al, 10
  2195 00001DE8 B307                <2>   mov bl, 7
  2196                              <2> 	rdprint:	;;print and get line, al=last key, bl=modifier, esi=buffer, edi=bufferend
  2197 00001DEA 8935[AE210000]      <2> 		mov [buftxtloc], esi
  2198 00001DF0 A2[A6210000]        <2> 		mov [endkeyrdpr], al
  2199 00001DF5 881D[A7210000]      <2> 		mov [modkeyrdpr], bl
  2200 00001DFB 8935[A8210000]      <2> 		mov [firstesirdpr], esi
  2201 00001E01 893D[B2210000]      <2> 		mov [endbufferrdpr], edi
  2202 00001E07 8B3D[80B22900]      <2> 		mov edi, [commandsentered]
  2203 00001E0D 893D[7CB22900]      <2> 		mov [commandlistentries], edi
  2204                              <2> 	rdprintb:
  2205 00001E13 56                  <2> 		push esi
  2206 00001E14 B001                <2> 		mov al, 1
  2207 00001E16 E8AA030000          <2> 		call rdcharint
  2208 00001E1B 5E                  <2> 		pop esi
  2209                              <2> %ifdef io.serial
  2210                              <2> 		cmp ah, 0x41
  2211                              <2> 		je near rdprup
  2212                              <2> 		cmp ah, 0x42
  2213                              <2> 		je near rdprdown
  2214                              <2> 		cmp ah, 0x43
  2215                              <2> 		je near rdprright
  2216                              <2> 		cmp ah, 0x44
  2217                              <2> 		je near rdprleft
  2218                              <2> 		cmp ah, 0x31
  2219                              <2> 		je near rdprhome
  2220                              <2> 		cmp ah, 0x48
  2221                              <2> 		je near rdprhome
  2222                              <2> 		cmp ah, 0x46
  2223                              <2> 		je near rdprend
  2224                              <2> 		cmp ah, 0x33
  2225                              <2> 		je near rdprdel
  2226                              <2> 		cmp ah, 0x34
  2227                              <2> 		je near rdprend
  2228                              <2> %else
  2229 00001E1C 803D[085E0000]E0    <2> 		cmp byte [specialkey], 0xE0
  2230 00001E23 751B                <2> 		jne notspecialrdprnt
  2231 00001E25 80FC53              <2> 		cmp ah, 0x53
  2232 00001E28 0F843D030000        <2> 		je near rdprdel
  2233 00001E2E 80FC47              <2> 		cmp ah, 0x47
  2234 00001E31 0F8407010000        <2> 		je near rdprhome
  2235 00001E37 80FC4F              <2> 		cmp ah, 0x4F
  2236 00001E3A 0F841D010000        <2> 		je near rdprend
  2237                              <2> 	notspecialrdprnt:
  2238 00001E40 80FC48              <2> 		cmp ah, 0x48
  2239 00001E43 0F84FB010000        <2> 		je near rdprup
  2240 00001E49 80FC50              <2> 		cmp ah, 0x50
  2241 00001E4C 0F84AF010000        <2> 		je near rdprdown
  2242 00001E52 80FC4D              <2> 		cmp ah, 0x4D
  2243 00001E55 0F845E010000        <2> 		je near rdprright
  2244 00001E5B 80FC4B              <2> 		cmp ah, 0x4B
  2245 00001E5E 0F8416010000        <2> 		je near rdprleft
  2246                              <2> %endif
  2247 00001E64 3C08                <2> 		cmp al, 8
  2248 00001E66 0F841A030000        <2> 		je near rdprbscheck
  2249 00001E6C 3C00                <2> 		cmp al, 0
  2250 00001E6E 74A3                <2> 		je rdprintb
  2251 00001E70 80FC00              <2> 		cmp ah, 0
  2252 00001E73 749E                <2> 		je rdprintb
  2253 00001E75 8806                <2> 		mov [esi], al
  2254 00001E77 46                  <2> 		inc esi
  2255                              <2> 	bscheckequal:
  2256 00001E78 8A1D[A7210000]      <2> 		mov bl, [modkeyrdpr]
  2257 00001E7E 8A3D[AD210000]      <2> 		mov bh, [txtmask]
  2258 00001E84 80FF00              <2> 		cmp bh, 0
  2259 00001E87 7404                <2> 		je nomasktxt
  2260 00001E89 88F8                <2> 		mov al, bh
  2261 00001E8B 30FF                <2> 		xor bh, bh
  2262                              <2> 	nomasktxt:
  2263 00001E8D E896030000          <2> 		call prcharint
  2264 00001E92 56                  <2> 		push esi
  2265 00001E93 66A3[A4210000]      <2> 		mov [axcache], ax
  2266 00001E99 8A25[A6210000]      <2> 		mov ah, [endkeyrdpr]
  2267 00001E9F 38E0                <2> 		cmp al, ah
  2268 00001EA1 7429                <2> 		je nobackprintbuftxt2
  2269 00001EA3 BE[16BE0000]        <2> 		mov esi, buftxt2
  2270 00001EA8 E843FEFFFF          <2> 		call printquiet
  2271 00001EAD B020                <2> 		mov al, " "
  2272 00001EAF E885030000          <2> 		call prcharq
  2273 00001EB4 B008                <2> 		mov al, 8
  2274 00001EB6 81FE[16BE0000]      <2> 		cmp esi, buftxt2
  2275 00001EBC 740E                <2> 		je nobackprintbuftxt2
  2276                              <2> 	backprintbuftxt2:
  2277 00001EBE E876030000          <2> 		call prcharq
  2278 00001EC3 4E                  <2> 		dec esi
  2279 00001EC4 81FE[16BE0000]      <2> 		cmp esi, buftxt2
  2280 00001ECA 77F2                <2> 		ja backprintbuftxt2
  2281                              <2> 	nobackprintbuftxt2:
  2282 00001ECC 3C0A                <2> 		cmp al, 10
  2283 00001ECE 7405                <2> 		je nonobackprint
  2284 00001ED0 E853030000          <2> 		call prcharint
  2285                              <2> 	nonobackprint:
  2286 00001ED5 5E                  <2> 		pop esi
  2287 00001ED6 3B35[B2210000]      <2> 		cmp esi, [endbufferrdpr]
  2288 00001EDC 0F8319000000        <2> 		jae near donerdprinc
  2289 00001EE2 66A1[A4210000]      <2> 		mov ax, [axcache]
  2290 00001EE8 8A25[A6210000]      <2> 		mov ah, [endkeyrdpr]
  2291 00001EEE 38E0                <2> 		cmp al, ah
  2292 00001EF0 0F851DFFFFFF        <2> 		jne rdprintb
  2293 00001EF6 E901000000          <2> 		jmp donerdprint
  2294                              <2> 	donerdprinc:
  2295 00001EFB 46                  <2> 		inc esi
  2296                              <2> 	donerdprint:
  2297 00001EFC 4E                  <2> 		dec esi
  2298 00001EFD BF[16BE0000]        <2> 		mov edi, buftxt2
  2299                              <2> 	copylaterstuff:
  2300 00001F02 8A07                <2> 		mov al, [edi]
  2301 00001F04 3C00                <2> 		cmp al, 0
  2302 00001F06 7406                <2> 		je nocopylaterstuff
  2303 00001F08 8806                <2> 		mov [esi], al
  2304 00001F0A 47                  <2> 		inc edi
  2305 00001F0B 46                  <2> 		inc esi
  2306 00001F0C EBF4                <2> 		jmp copylaterstuff
  2307                              <2> 	nocopylaterstuff:
  2308 00001F0E C60600              <2> 		mov byte [esi], 0
  2309 00001F11 E80B000000          <2> 		call clearbuftxt2
  2310 00001F16 89F1                <2> 		mov ecx, esi
  2311 00001F18 8B3D[A8210000]      <2> 		mov edi, [firstesirdpr]
  2312 00001F1E 29F9                <2> 		sub ecx, edi
  2313 00001F20 C3                  <2> 		ret
  2314                              <2> 	
  2315                              <2> 	clearbuftxt2:
  2316 00001F21 30C0                <2> 		xor al, al
  2317 00001F23 BF[16BE0000]        <2> 		mov edi, buftxt2
  2318                              <2> 	clearbuftxt2lp:
  2319 00001F28 8807                <2> 		mov [edi], al
  2320 00001F2A 47                  <2> 		inc edi
  2321 00001F2B 81FF[16C20000]      <2> 		cmp edi, buftxt
  2322 00001F31 75F5                <2> 		jne clearbuftxt2lp
  2323 00001F33 C3                  <2> 		ret
  2324                              <2> 	
  2325                              <2> 	rdprintb2:
  2326 00001F34 E833060000          <2> 		call termcopy
  2327 00001F39 E9D5FEFFFF          <2> 		jmp rdprintb
  2328                              <2> 	
  2329                              <2> 	rdprhome:
  2330 00001F3E 3B35[AE210000]      <2> 		cmp esi, [buftxtloc]
  2331 00001F44 0F84EAFFFFFF        <2> 		je near rdprintb2
  2332 00001F4A BF[16BE0000]        <2> 		mov edi, buftxt2
  2333 00001F4F 8A07                <2> 		mov al, [edi]
  2334 00001F51 E846000000          <2> 		call shiftbuftxt2
  2335 00001F56 E8DE020000          <2> 		call prcharq
  2336 00001F5B EBE1                <2> 		jmp rdprhome
  2337                              <2> 		
  2338                              <2> 	rdprend:
  2339 00001F5D BF[16BE0000]        <2> 		mov edi, buftxt2
  2340 00001F62 8A07                <2> 		mov al, [edi]
  2341 00001F64 3C00                <2> 		cmp al, 0
  2342 00001F66 0F84C8FFFFFF        <2> 		je near rdprintb2
  2343 00001F6C 8806                <2> 		mov [esi], al
  2344 00001F6E E866000000          <2> 		call shiftbuftxt2lft
  2345 00001F73 E8C1020000          <2> 		call prcharq
  2346 00001F78 EBE3                <2> 		jmp rdprend
  2347                              <2> 	
  2348                              <2> 	rdprleft:
  2349 00001F7A 3B35[AE210000]      <2> 		cmp esi, [buftxtloc]
  2350 00001F80 0F848DFEFFFF        <2> 		je near rdprintb
  2351 00001F86 BF[16BE0000]        <2> 		mov edi, buftxt2
  2352 00001F8B 8A07                <2> 		mov al, [edi]
  2353 00001F8D E80A000000          <2> 		call shiftbuftxt2
  2354 00001F92 E891020000          <2> 		call prcharint
  2355 00001F97 E977FEFFFF          <2> 		jmp rdprintb
  2356                              <2> 	shiftbuftxt2:
  2357 00001F9C 3C00                <2> 		cmp al, 0
  2358 00001F9E 7409                <2> 		je noshiftbuftxt2
  2359 00001FA0 47                  <2> 		inc edi
  2360 00001FA1 8A27                <2> 		mov ah, [edi]
  2361 00001FA3 8807                <2> 		mov [edi], al
  2362 00001FA5 88E0                <2> 		mov al, ah
  2363 00001FA7 EBF3                <2> 		jmp shiftbuftxt2
  2364                              <2> 	noshiftbuftxt2:
  2365 00001FA9 BF[16BE0000]        <2> 		mov edi, buftxt2
  2366 00001FAE 4E                  <2> 		dec esi
  2367 00001FAF 8A06                <2> 		mov al, [esi]
  2368 00001FB1 8807                <2> 		mov [edi], al
  2369 00001FB3 C60600              <2> 		mov byte [esi], 0
  2370 00001FB6 B008                <2> 		mov al, 8
  2371 00001FB8 C3                  <2> 		ret
  2372                              <2> 		
  2373                              <2> 	rdprright:
  2374 00001FB9 BF[16BE0000]        <2> 		mov edi, buftxt2
  2375 00001FBE 8A07                <2> 		mov al, [edi]
  2376 00001FC0 3C00                <2> 		cmp al, 0
  2377 00001FC2 0F844BFEFFFF        <2> 		je near rdprintb
  2378 00001FC8 8806                <2> 		mov [esi], al
  2379 00001FCA E80A000000          <2> 		call shiftbuftxt2lft
  2380 00001FCF E854020000          <2> 		call prcharint
  2381 00001FD4 E93AFEFFFF          <2> 		jmp rdprintb
  2382                              <2> 	shiftbuftxt2lft:
  2383 00001FD9 3C00                <2> 		cmp al, 0
  2384 00001FDB 7408                <2> 		je noshiftbuftxt2lft
  2385 00001FDD 47                  <2> 		inc edi
  2386 00001FDE 8A07                <2> 		mov al, [edi]
  2387 00001FE0 8847FF              <2> 		mov [edi - 1], al
  2388 00001FE3 EBF4                <2> 		jmp shiftbuftxt2lft
  2389                              <2> 	noshiftbuftxt2lft:
  2390 00001FE5 8A06                <2> 		mov al, [esi]
  2391 00001FE7 46                  <2> 		inc esi
  2392 00001FE8 8A1D[A7210000]      <2> 		mov bl, [modkeyrdpr]
  2393 00001FEE C3                  <2> 		ret
  2394                              <2> 		
  2395                              <2> 	rdprdownbck:
  2396 00001FEF FECC                <2> 		dec ah
  2397 00001FF1 8825[AC210000]      <2> 		mov [commandedit], ah
  2398 00001FF7 E88F000000          <2> 		call rdprbckspc
  2399 00001FFC E912FEFFFF          <2> 		jmp rdprintb
  2400                              <2> 	
  2401                              <2> 	rdprdown:
  2402 00002001 8A25[AC210000]      <2> 		mov ah, [commandedit]
  2403 00002007 80FC01              <2> 		cmp ah, 1
  2404 0000200A 0F8603FEFFFF        <2> 		jbe near rdprintb
  2405 00002010 8B3D[80B22900]      <2> 		mov edi, [commandsentered]
  2406 00002016 3B3D[7CB22900]      <2> 		cmp edi, [commandlistentries]
  2407 0000201C 7618                <2> 		jbe .nofix
  2408 0000201E 8105[7CB22900]0200- <2> 		add dword [commandlistentries], 2
  2409 00002026 0000                <2>
  2410 00002028 3B3D[7CB22900]      <2> 		cmp edi, [commandlistentries]
  2411 0000202E 7706                <2> 		ja .nofix
  2412 00002030 893D[7CB22900]      <2> 		mov [commandlistentries], edi
  2413                              <2> 	.nofix
  2414 00002036 80FC02              <2> 		cmp ah, 2
  2415 00002039 74B4                <2> 		je rdprdownbck
  2416 0000203B 80EC02              <2> 		sub ah, 2
  2417 0000203E 8825[AC210000]      <2> 		mov [commandedit], ah
  2418                              <2> 		
  2419                              <2> 	rdprup:
  2420 00002044 30C0                <2> 		xor al, al
  2421 00002046 3805[AC210000]      <2> 		cmp [commandedit], al
  2422 0000204C 0F84C1FDFFFF        <2> 		je near rdprintb
  2423 00002052 813D[7CB22900]0000- <2> 		cmp dword [commandlistentries], 0
  2424 0000205A 0000                <2>
  2425 0000205C 0F84B1FDFFFF        <2> 		je near rdprintb
  2426 00002062 FF0D[7CB22900]      <2> 		dec dword [commandlistentries]
  2427                              <2> 	.lp:
  2428 00002068 BF[16BE0000]        <2> 		mov edi, buftxt2
  2429 0000206D 8A07                <2> 		mov al, [edi]
  2430 0000206F 3C00                <2> 		cmp al, 0
  2431 00002071 740E                <2> 		je .start
  2432 00002073 8806                <2> 		mov [esi], al
  2433 00002075 E85FFFFFFF          <2> 		call shiftbuftxt2lft
  2434 0000207A E8BA010000          <2> 		call prcharq
  2435 0000207F EBE7                <2> 		jmp .lp
  2436                              <2> 	.start:
  2437 00002081 E805000000          <2> 		call rdprbckspc
  2438 00002086 E941000000          <2> 		jmp getcurrentcommandstr
  2439                              <2> 	rdprbckspc:
  2440 0000208B 3B35[AE210000]      <2> 		cmp esi, [buftxtloc]
  2441 00002091 742B                <2> 		je nordprupbck
  2442                              <2> 	rdprupbckspclp:
  2443 00002093 B008                <2> 		mov al, 8
  2444 00002095 8A1D[A7210000]      <2> 		mov bl, [modkeyrdpr]
  2445 0000209B E899010000          <2> 		call prcharq
  2446 000020A0 B020                <2> 		mov al, ' '
  2447 000020A2 E892010000          <2> 		call prcharq
  2448 000020A7 B008                <2> 		mov al, 8
  2449 000020A9 E88B010000          <2> 		call prcharq
  2450 000020AE 4E                  <2> 		dec esi
  2451 000020AF 3B35[AE210000]      <2> 		cmp esi, [buftxtloc]
  2452 000020B5 7402                <2> 		je nordprupbck2
  2453 000020B7 EBDA                <2> 		jmp rdprupbckspclp
  2454                              <2> 	nordprupbck2:
  2455 000020B9 E8AE040000          <2> 		call termcopy
  2456                              <2> 	nordprupbck:
  2457 000020BE 8B3D[78B22900]      <2> 		mov edi, [commandbufpos]
  2458 000020C4 81C7[84B22900]      <2> 		add edi, commandbuf
  2459 000020CA 4F                  <2> 		dec edi
  2460 000020CB C3                  <2> 		ret
  2461                              <2> 	getcurrentcommandstr:
  2462 000020CC 8A25[AC210000]      <2> 		mov ah, [commandedit]
  2463 000020D2 FE05[AC210000]      <2> 		inc byte [commandedit]
  2464                              <2> 	getccmdlp:
  2465 000020D8 4F                  <2> 		dec edi
  2466 000020D9 8A07                <2> 		mov al, [edi]
  2467 000020DB 81FF[84B22900]      <2> 		cmp edi, commandbuf
  2468 000020E1 7231                <2> 		jb getcmdresetcommandbuf
  2469 000020E3 81EF[84B22900]      <2> 		sub edi, commandbuf
  2470 000020E9 3B3D[78B22900]      <2> 		cmp edi, [commandbufpos]
  2471 000020EF 0F841EFDFFFF        <2> 		je near rdprintb
  2472 000020F5 81C7[84B22900]      <2> 		add edi, commandbuf
  2473 000020FB 3C00                <2> 		cmp al, 0
  2474 000020FD 75D9                <2> 		jne getccmdlp
  2475 000020FF FECC                <2> 		dec ah
  2476 00002101 80FC00              <2> 		cmp ah, 0
  2477 00002104 77D2                <2> 		ja getccmdlp
  2478 00002106 47                  <2> 		inc edi
  2479 00002107 81FF[84C22900]      <2> 		cmp edi, commandbufend
  2480 0000210D 770D                <2> 		ja fixcmdbufb4morerdpr
  2481 0000210F E915000000          <2> 		jmp morerdprup
  2482                              <2> 	getcmdresetcommandbuf:
  2483 00002114 BF[84C22900]        <2> 		mov edi, commandbufend
  2484 00002119 47                  <2> 		inc edi
  2485 0000211A EBBC                <2> 		jmp getccmdlp
  2486                              <2> 	fixcmdbufb4morerdpr:
  2487 0000211C 4F                  <2> 		dec edi
  2488 0000211D 81EF[84C22900]      <2> 		sub edi, commandbufend
  2489 00002123 81C7[84B22900]      <2> 		add edi, commandbuf
  2490                              <2> 	morerdprup:
  2491 00002129 8A07                <2> 		mov al, [edi]
  2492 0000212B 47                  <2> 		inc edi
  2493 0000212C 81EF[84B22900]      <2> 		sub edi, commandbuf
  2494 00002132 3C00                <2> 		cmp al, 0
  2495 00002134 0F84FAFDFFFF        <2> 		je near rdprintb2
  2496 0000213A 3B3D[78B22900]      <2> 		cmp edi, [commandbufpos]
  2497 00002140 0F83EEFDFFFF        <2> 		jae near rdprintb2
  2498 00002146 81C7[84B22900]      <2> 		add edi, commandbuf
  2499 0000214C 8806                <2> 		mov [esi], al
  2500 0000214E 46                  <2> 		inc esi
  2501 0000214F 57                  <2> 		push edi
  2502 00002150 8A1D[A7210000]      <2> 		mov bl, [modkeyrdpr]
  2503 00002156 E8DE000000          <2> 		call prcharq
  2504 0000215B 5F                  <2> 		pop edi
  2505 0000215C 81FF[84C22900]      <2> 		cmp edi, commandbufend
  2506 00002162 76C5                <2> 		jbe morerdprup
  2507 00002164 BF[84B22900]        <2> 		mov edi, commandbuf
  2508 00002169 EBBE                <2> 		jmp morerdprup
  2509                              <2> 		
  2510                              <2> 	rdprdel:
  2511 0000216B BF[16BE0000]        <2> 		mov edi, buftxt2
  2512 00002170 8A07                <2> 		mov al, [edi]
  2513 00002172 3C00                <2> 		cmp al, 0
  2514 00002174 0F8499FCFFFF        <2> 		je near rdprintb
  2515 0000217A 8806                <2> 		mov [esi], al
  2516 0000217C E858FEFFFF          <2> 		call shiftbuftxt2lft
  2517 00002181 E8B3000000          <2> 		call prcharq
  2518                              <2> 		
  2519                              <2> 	rdprbscheck:
  2520 00002186 3B35[A8210000]      <2> 		cmp esi, [firstesirdpr]
  2521 0000218C 7705                <2> 		ja goodbscheck
  2522 0000218E E980FCFFFF          <2> 		jmp rdprintb
  2523                              <2> 	goodbscheck:
  2524 00002193 4E                  <2> 		dec esi
  2525 00002194 C60600              <2> 		mov byte [esi], 0
  2526 00002197 8A1D[A7210000]      <2> 		mov bl, [modkeyrdpr]
  2527 0000219D B008                <2> 		mov al, 8
  2528 0000219F E9D4FCFFFF          <2> 		jmp bscheckequal
  2529                              <2> 		
  2530 000021A4 0000                <2> axcache dw 0
  2531 000021A6 00                  <2> endkeyrdpr db 0
  2532 000021A7 00                  <2> modkeyrdpr db 0
  2533 000021A8 00000000            <2> firstesirdpr dd 0
  2534 000021AC 00                  <2> commandedit db 0
  2535 000021AD 00                  <2> txtmask db 0
  2536 000021AE 00000000            <2> buftxtloc dd 0
  2537 000021B2 00000000            <2> endbufferrdpr dd 0
  2538 000021B6 082000              <2> backcursor db 8," ",0
  2539                              <1> intx5:
  2540                              <1> 	%include 'source/interrupts/5_readchar.asm'
  2541 000021B9 E807000000          <2> 	call rdcharint
  2542 000021BE E9E2E0FFFF          <2> 	jmp timerinterrupt
  2543                              <2> getchar:
  2544 000021C3 30C0                <2> 	xor al, al
  2545                              <2> 	rdcharint:		;;get char, if al is 0, wait for key
  2546 000021C5 C605[13220000]01    <2> 		mov byte [trans], 1
  2547 000021CC 3C00                <2> 		cmp al, 0
  2548 000021CE 7507                <2> 		jne transcheck
  2549 000021D0 C605[13220000]00    <2> 		mov byte [trans], 0
  2550                              <2> 	transcheck:
  2551                              <2> 	%ifdef io.serial
  2552                              <2> 		call serial.receive
  2553                              <2> 		cmp al, 13
  2554                              <2> 		je rdenter
  2555                              <2> 	%else
  2556 000021D7 E84C3C0000          <2> 		call getkey
  2557 000021DC 66A1[11220000]      <2> 		mov ax, [lastkey]
  2558 000021E2 80FC1C              <2> 		cmp ah, 0x1C
  2559 000021E5 741F                <2> 		je rdenter
  2560                              <2> 	%endif
  2561 000021E7 8A3D[13220000]      <2> 		mov bh, [trans]
  2562 000021ED 803D[085E0000]E0    <2> 		cmp byte [specialkey], 0xE0
  2563 000021F4 7504                <2> 		jne nospecialtrans
  2564 000021F6 88C3                <2> 		mov bl, al
  2565 000021F8 30C0                <2> 		xor al, al
  2566                              <2> 	nospecialtrans:
  2567 000021FA 08C7                <2> 		or bh, al
  2568 000021FC 80FF00              <2> 		cmp bh, 0
  2569 000021FF 74D6                <2> 		je transcheck
  2570 00002201 E90A000000          <2> 		jmp rdend
  2571                              <2> 	rdenter:
  2572 00002206 B41C                <2> 		mov ah, 0x1C
  2573 00002208 B00A                <2> 		mov al, 10
  2574 0000220A 66A3[11220000]      <2> 		mov [lastkey], ax
  2575                              <2> 	rdend:
  2576 00002210 C3                  <2> 		ret
  2577                              <2> 		
  2578 00002211 0000                <2> lastkey db 0,0
  2579 00002213 00                  <2> trans db 0
  2580                              <1> intx6:
  2581                              <1> 	%include 'source/interrupts/6_prntchar.asm'
  2582                              <2> %ifdef io.serial
  2583                              <2> 	cmp bl, bh
  2584                              <2> 	call prcharint
  2585                              <2> 	jmp timerinterrupt
  2586                              <2> prcharint:	
  2587                              <2> prcharq:
  2588                              <2> 	call serial.send
  2589                              <2> 	ret
  2590                              <2> %else
  2591 00002214 38FB                <2> cmp bl, bh
  2592 00002216 740A                <2> je prchar.notimer
  2593 00002218 E80B000000          <2> call prcharint
  2594 0000221D E983E0FFFF          <2> jmp timerinterrupt
  2595                              <2> prchar.notimer:
  2596 00002222 E812000000          <2> 	call prcharq
  2597 00002227 CF                  <2> 	iret
  2598                              <2> 	
  2599                              <2> prcharint:	;;print char, char in al, modifier in bl, if bh = bl then termcopy will not happen, will run termcopy if called as is
  2600 00002228 38FB                <2> 	cmp bl, bh
  2601 0000222A 740D                <2> 	je prcharq
  2602 0000222C E808000000          <2> 	call prcharq
  2603 00002231 E836030000          <2> 	call termcopy
  2604 00002236 C3                  <2> 	ret
  2605 00002237 00                  <2> termguion db 0
  2606 00002238 00                  <2> termcopyon db 0
  2607                              <2> prcharq:
  2608 00002239 88DC                <2> 	mov ah, bl
  2609 0000223B 66A3[FD230000]      <2> 	mov [charbuf], ax
  2610 00002241 31DB                <2> 	xor ebx, ebx
  2611 00002243 668B1D[F7230000]    <2> 	mov bx, [videobufpos]
  2612 0000224A BF[2CDD2800]        <2> 	mov edi, videobuf
  2613 0000224F 01DF                <2> 	add edi, ebx
  2614 00002251 66A1[77250000]      <2> 	mov ax, [removedvideo]
  2615 00002257 668907              <2> 	mov [edi], ax
  2616 0000225A 66A1[FD230000]      <2> 	mov ax, [charbuf]
  2617 00002260 31D2                <2> 	xor edx, edx
  2618 00002262 668B15[F9230000]    <2> 	mov dx, [charpos]
  2619 00002269 31C9                <2> 	xor ecx, ecx
  2620 0000226B 668B0D[FB230000]    <2> 	mov cx, [charxy]
  2621 00002272 3C09                <2> 	cmp al, 9
  2622 00002274 0F8463000000        <2> 	je near prtab
  2623 0000227A 3C0D                <2> 	cmp al, 13		;I am phasing this out-it is used by windows but not unix based systems
  2624 0000227C 0F848B000000        <2> 	je near prcr
  2625 00002282 3C0A                <2> 	cmp al, 10
  2626 00002284 0F84B7000000        <2> 	je near prnlcr
  2627 0000228A 3C08                <2> 	cmp al, 8
  2628 0000228C 0F848F000000        <2> 	je near prbs
  2629 00002292 3CFF                <2> 	cmp al, 255		;;null character
  2630 00002294 0F841B000000        <2> 	je near donescr
  2631 0000229A 668907              <2> 	mov [edi], ax
  2632 0000229D 81C702000000        <2> 	add edi, 2
  2633 000022A3 FEC2                <2> 	inc dl
  2634                              <2> donecrnl:
  2635 000022A5 38CA                <2> 	cmp dl, cl
  2636 000022A7 0F83B9000000        <2> 	jae near preol
  2637                              <2> doneeol:
  2638 000022AD 38EE                <2> 	cmp dh, ch
  2639 000022AF 0F83CF000000        <2> 	jae near prscr	
  2640                              <2> donescr:
  2641 000022B5 89FB                <2> 	mov ebx, edi
  2642 000022B7 668B07              <2> 	mov ax, [edi]
  2643 000022BA 66A3[77250000]      <2> 	mov [removedvideo], ax
  2644 000022C0 81EB[2CDD2800]      <2> 	sub ebx, videobuf
  2645 000022C6 66891D[F7230000]    <2> 	mov [videobufpos], bx
  2646 000022CD 668915[F9230000]    <2> 	mov [charpos], dx
  2647 000022D4 66A1[FD230000]      <2> 	mov ax, [charbuf]
  2648 000022DA 88E3                <2> 	mov bl, ah
  2649 000022DC C3                  <2> 	ret
  2650                              <2> 	
  2651                              <2> 	prtab:
  2652 000022DD 31DB                <2> 		xor ebx, ebx
  2653 000022DF 668B1D[F5230000]    <2> 		mov bx, [linebeginpos]
  2654 000022E6 81EF[2CDD2800]      <2> 		sub edi, videobuf
  2655 000022EC 29DF                <2> 		sub edi, ebx
  2656 000022EE C1EF04              <2> 		shr edi, 4
  2657 000022F1 C1E704              <2> 		shl edi, 4
  2658 000022F4 81C710000000        <2> 		add edi, 16
  2659 000022FA C0EA03              <2> 		shr dl, 3
  2660 000022FD C0E203              <2> 		shl dl, 3
  2661 00002300 80C208              <2> 		add dl, 8
  2662 00002303 81C7[2CDD2800]      <2> 		add edi, videobuf
  2663 00002309 01DF                <2> 		add edi, ebx
  2664 0000230B EB98                <2> 		jmp donecrnl
  2665                              <2> 	
  2666                              <2> 	prcr:
  2667 0000230D 30D2                <2> 		xor dl, dl
  2668 0000230F 31DB                <2> 		xor ebx, ebx
  2669 00002311 BF[2CDD2800]        <2> 		mov edi, videobuf
  2670 00002316 668B1D[F5230000]    <2> 		mov bx, [linebeginpos]
  2671 0000231D 01DF                <2> 		add edi, ebx
  2672 0000231F EB84                <2> 		jmp donecrnl
  2673                              <2> 			
  2674                              <2> 	prbs:
  2675 00002321 80FA00              <2> 		cmp dl, 0
  2676 00002324 7410                <2> 		je prbackline
  2677                              <2> 	prnobmr:
  2678 00002326 FECA                <2> 		dec dl
  2679 00002328 6631C0              <2> 		xor ax, ax
  2680 0000232B 81EF02000000        <2> 		sub edi, 2
  2681 00002331 E96FFFFFFF          <2> 		jmp donecrnl
  2682                              <2> 	prbackline:
  2683 00002336 88CA                <2> 		mov dl, cl
  2684 00002338 80FE00              <2> 		cmp dh, 0
  2685 0000233B 74E9                <2> 		je prnobmr
  2686 0000233D FECE                <2> 		dec dh
  2687 0000233F EBE5                <2> 		jmp prnobmr
  2688                              <2> 		
  2689                              <2> 	prnlcr:
  2690 00002341 FEC6                <2> 		inc dh
  2691 00002343 31DB                <2> 		xor ebx, ebx
  2692 00002345 30D2                <2> 		xor dl, dl
  2693 00002347 88CB                <2> 		mov bl, cl
  2694 00002349 66D1E3              <2> 		shl bx, 1
  2695 0000234C BF[2CDD2800]        <2> 		mov edi, videobuf
  2696 00002351 66031D[F5230000]    <2> 		add bx, [linebeginpos]
  2697 00002358 66891D[F5230000]    <2> 		mov [linebeginpos], bx
  2698 0000235F 01DF                <2> 		add edi, ebx
  2699 00002361 E93FFFFFFF          <2> 		jmp donecrnl
  2700                              <2> 		
  2701                              <2> 	preol:
  2702 00002366 30D2                <2> 		xor dl, dl
  2703 00002368 FEC6                <2> 		inc dh
  2704 0000236A 31DB                <2> 		xor ebx, ebx
  2705 0000236C 88CB                <2> 		mov bl, cl
  2706 0000236E 66D1E3              <2> 		shl bx, 1
  2707 00002371 66031D[F5230000]    <2> 		add bx, [linebeginpos]
  2708 00002378 66891D[F5230000]    <2> 		mov [linebeginpos], bx
  2709 0000237F E929FFFFFF          <2> 		jmp doneeol
  2710                              <2> 	prscr:
  2711 00002384 FECE                <2> 		dec dh
  2712 00002386 BF[2CDD2800]        <2> 		mov edi, videobuf
  2713 0000238B 31DB                <2> 		xor ebx, ebx
  2714 0000238D 88CB                <2> 		mov bl, cl
  2715 0000238F 66D1E3              <2> 		shl bx, 1
  2716 00002392 01FB                <2> 		add ebx, edi
  2717                              <2> 	intscrollloop:
  2718 00002394 668B03              <2> 		mov ax, [ebx]
  2719 00002397 668907              <2> 		mov [edi], ax
  2720 0000239A 81C702000000        <2> 		add edi, 2
  2721 000023A0 81C302000000        <2> 		add ebx, 2
  2722 000023A6 FEC9                <2> 		dec cl
  2723 000023A8 80F900              <2> 		cmp cl, 0
  2724 000023AB 75E7                <2> 		jne intscrollloop
  2725 000023AD 8A0D[FB230000]      <2> 		mov cl, [charxy]
  2726 000023B3 FECD                <2> 		dec ch
  2727 000023B5 80FD01              <2> 		cmp ch, 1
  2728 000023B8 77DA                <2> 		ja intscrollloop
  2729 000023BA 6631C0              <2> 		xor ax, ax
  2730 000023BD 81EF[2CDD2800]      <2> 		sub edi, videobuf
  2731 000023C3 66893D[F5230000]    <2> 		mov [linebeginpos], di
  2732 000023CA 81C7[2CDD2800]      <2> 		add edi, videobuf
  2733 000023D0 89FB                <2> 		mov ebx, edi
  2734                              <2> 	intloopclear:
  2735 000023D2 668903              <2> 		mov [ebx], ax
  2736 000023D5 81C302000000        <2> 		add ebx, 2
  2737 000023DB FEC9                <2> 		dec cl
  2738 000023DD 80F900              <2> 		cmp cl, 0
  2739 000023E0 75F0                <2> 		jne intloopclear
  2740 000023E2 FECD                <2> 		dec ch
  2741 000023E4 80FD00              <2> 		cmp ch, 0
  2742 000023E7 75E9                <2> 		jne intloopclear
  2743 000023E9 668B0D[FB230000]    <2> 		mov cx, [charxy]
  2744 000023F0 E9C0FEFFFF          <2> 		jmp donescr
  2745                              <2> 		
  2746 000023F5 0000                <2> linebeginpos dw 0
  2747 000023F7 0000                <2> videobufpos: dw 0
  2748 000023F9 0000                <2> charpos db 0,0
  2749 000023FB 501E                <2> charxy db 80,30
  2750 000023FD 0000                <2> charbuf dw 0
  2751                              <2> %endif
  2752                              <1> intx7:
  2753                              <1> 	%include 'source/interrupts/7_openfile.asm'
  2754 000023FF E80C410000          <2> 	call loadfile
  2755 00002404 E99CDEFFFF          <2> 	jmp timerinterrupt
  2756                              <1> intx9:
  2757                              <1> 	%include 'source/interrupts/9_num2str.asm'
  2758 00002409 3C00                <2> 	cmp al, 0
  2759 0000240B 750A                <2> 	jne num2strb
  2760 0000240D E8130B0000          <2> 	call showdec
  2761 00002412 E98EDEFFFF          <2> 	jmp timerinterrupt
  2762                              <2> num2strb:
  2763 00002417 E83F0A0000          <2> 	call showhex
  2764 0000241C E984DEFFFF          <2> 	jmp timerinterrupt
  2765                              <1> intx10:
  2766                              <1> 	%include 'source/interrupts/10_str2num.asm'
  2767 00002421 E8E10B0000          <2> 	call cnvrttxt	;the string goes into esi, number into ecx
  2768 00002426 E97ADEFFFF          <2> 	jmp timerinterrupt
  2769                              <2> 	
  2770                              <1> %ifdef threads.included
  2771                              <1> intx11:
  2772                              <1> 	%include 'source/interrupts/11_forkthread.asm'
  2773                              <2> threadfork: ;esi is next thread's start address, if 0, fork current thread
  2774                              <2> 			;returns the PID of the new fork in ebx
  2775                              <2> ;WARNING:THIS WILL NOT WORK IN C UNTIL IT COPIES THE ENTIRE STACK
  2776 0000242B FA                  <2> 	cli
  2777 0000242C 60                  <2> 	pushad
  2778 0000242D 8925[FA240000]      <2> 	mov [.espold], esp
  2779 00002433 C605[AF660000]01    <2> 	mov byte [threadson], 1
  2780 0000243A 8B1D[B0660000]      <2> 	mov ebx, [currentthread]
  2781 00002440 C1E302              <2> 	shl ebx, 2
  2782 00002443 89A3[84C22900]      <2> 	mov [threadlist + ebx], esp
  2783 00002449 C1EB02              <2> 	shr ebx, 2
  2784 0000244C 81FB00000000        <2> 	cmp ebx, 0
  2785 00002452 750C                <2> 	jne .simplestack
  2786 00002454 BB[36A70000]        <2> 	mov ebx, stackend
  2787 00002459 29E3                <2> 	sub ebx, esp
  2788 0000245B E90B000000          <2> 	jmp .stackcalcdone
  2789                              <2> .simplestack:
  2790 00002460 C1E30A              <2> 	shl ebx, 10
  2791 00002463 81C3[84D62900]      <2> 	add ebx, stack1
  2792 00002469 29E3                <2> 	sub ebx, esp
  2793                              <2> .stackcalcdone:
  2794 0000246B 29DC                <2> 	sub esp, ebx
  2795 0000246D 81C4[84D62900]      <2> 	add esp, stack1
  2796 00002473 8B1D[AB660000]      <2> 	mov ebx, [lastthread]
  2797 00002479 C1E308              <2> 	shl ebx, 8
  2798 0000247C 01DC                <2> 	add esp, ebx
  2799 0000247E 891D[FE240000]      <2> 	mov [.stackend], ebx
  2800                              <2> 
  2801 00002484 89E5                <2> 	mov ebp, esp
  2802 00002486 8B25[FA240000]      <2> 	mov esp, [.espold]
  2803                              <2> 
  2804 0000248C C1EB0A              <2> 	shr ebx, 10 ;get pid then push it
  2805 0000248F 895C2410            <2> 	mov [esp + 16], ebx ;set the old ebx to the new PID
  2806                              <2> 
  2807 00002493 31DB                <2> 	xor ebx, ebx
  2808                              <2> .stackcopy:
  2809 00002495 668B041C            <2> 	mov ax, [esp + ebx]
  2810 00002499 6689441D00          <2> 	mov [ebp + ebx], ax
  2811 0000249E 81C302000000        <2> 	add ebx, 2
  2812 000024A4 3B1D[FE240000]      <2> 	cmp ebx, [.stackend]
  2813 000024AA 72E9                <2> 	jb .stackcopy
  2814                              <2> 
  2815 000024AC 31C0                <2> 	xor eax, eax
  2816 000024AE 668CC8              <2> 	mov ax, cs
  2817 000024B1 89C2                <2> 	mov edx, eax
  2818 000024B3 8B4C2428            <2> 	mov ecx, [esp + 40]
  2819 000024B7 81C900020000        <2> 	or ecx, 0x200
  2820                              <2> 	
  2821 000024BD 81FE00000000        <2> 	cmp esi, 0
  2822 000024C3 7504                <2> 	jne .nochangestack
  2823 000024C5 8B742420            <2> 	mov esi, [esp + 32]
  2824                              <2> .nochangestack:
  2825 000024C9 89F0                <2> 	mov eax, esi
  2826 000024CB 89EC                <2> 	mov esp, ebp
  2827                              <2> 
  2828 000024CD 89442420            <2> 	mov [esp + 32], eax
  2829 000024D1 89542424            <2> 	mov [esp + 36], edx
  2830 000024D5 894C2428            <2> 	mov [esp + 40], ecx
  2831                              <2> 
  2832 000024D9 8B1D[AB660000]      <2> 	mov ebx, [lastthread]
  2833 000024DF 89A3[84C22900]      <2> 	mov [threadlist + ebx], esp
  2834 000024E5 81C304000000        <2> 	add ebx, 4
  2835 000024EB 891D[AB660000]      <2> 	mov [lastthread], ebx
  2836 000024F1 8B25[FA240000]      <2> 	mov esp, [.espold]
  2837 000024F7 61                  <2> 	popad
  2838 000024F8 FB                  <2> 	sti
  2839 000024F9 CF                  <2> 	iret
  2840                              <2> 
  2841 000024FA 00000000            <2> .espold dd 0
  2842 000024FE 00000000            <2> .stackend dd 0
  2843                              <1> %endif
  2844                              <1> intx12:
  2845                              <1> 	%include 'source/interrupts/12_gettime.asm'
  2846 00002502 A1[5D020000]        <2> 	mov eax, [timeseconds]
  2847 00002507 8B1D[61020000]      <2> 	mov ebx, [timenanoseconds]
  2848 0000250D 89D9                <2> 	mov ecx, ebx
  2849 0000250F C1E90A              <2> 	shr ecx, 10	;this is in microseconds
  2850 00002512 E98EDDFFFF          <2> 	jmp timerinterrupt
  2851                              <1> intx13:
  2852                              <1> 	%include 'source/interrupts/13_settime.asm'
  2853 00002517 A3[5D020000]        <2> 	mov [timeseconds], eax
  2854 0000251C 891D[61020000]      <2> 	mov [timenanoseconds], ebx
  2855 00002522 E97EDDFFFF          <2> 	jmp timerinterrupt
  2856                              <2> 	
  2857                              <1> intx14:
  2858                              <1> 	%include 'source/interrupts/14_runcmd.asm'
  2859 00002527 BF[16C20000]        <2> 	mov edi, buftxt
  2860                              <2> cpcmd:
  2861 0000252C 8A06                <2> 	mov al, [esi]
  2862 0000252E 8807                <2> 	mov [edi], al
  2863 00002530 46                  <2> 	inc esi
  2864 00002531 47                  <2> 	inc edi
  2865 00002532 3C00                <2> 	cmp al, 0
  2866 00002534 75F6                <2> 	jne cpcmd
  2867 00002536 E823060000          <2> 	call run
  2868 0000253B CF                  <2> 	iret
  2869                              <1> intx15:
  2870                              <1> 	%include 'source/interrupts/15_proginfo.asm'
  2871 0000253C BB[16AE0000]        <2> 	mov ebx, variables
  2872 00002541 8B35[342C0000]      <2> 	mov esi, [currentcommandloc]
  2873 00002547 89F7                <2> 	mov edi, esi
  2874 00002549 31C9                <2> 	xor ecx, ecx
  2875                              <2> getcommandzeroes:
  2876 0000254B 8A07                <2> 	mov al, [edi]
  2877 0000254D 47                  <2> 	inc edi
  2878 0000254E 3C3B                <2> 	cmp al, ';'
  2879 00002550 740B                <2> 	je nomorezeroes
  2880 00002552 3C00                <2> 	cmp al, 0
  2881 00002554 7407                <2> 	je nomorezeroes
  2882 00002556 3C20                <2> 	cmp al, ' '
  2883 00002558 75F1                <2> 	jne getcommandzeroes
  2884 0000255A 41                  <2> 	inc ecx
  2885 0000255B EBEE                <2> 	jmp getcommandzeroes
  2886                              <2> nomorezeroes:
  2887 0000255D 41                  <2> 	inc ecx
  2888 0000255E 4F                  <2> 	dec edi
  2889 0000255F 8B1D[A2AD0000]      <2> 	mov ebx, [uid]
  2890 00002565 8B15[B0660000]      <2> 	mov edx, [currentthread]
  2891 0000256B CF                  <2> 	iret
  2892                              <2> 	
  2893                              <1> termcopy:
  2894                              <1> %ifdef io.serial
  2895                              <1> 	ret
  2896                              <1> %else
  2897                              <1> %ifdef terminal.vsync
  2898                              <1> 	mov byte [termcopyneeded], 1
  2899                              <1> 	ret
  2900                              <1> %else
  2901 0000256C E808000000          <1> 	call newtermcopy
  2902 00002571 C3                  <1> 	ret
  2903                              <1> %endif
  2904 00002572 00                  <1> 	termcopyneeded db 0
  2905 00002573 00000000            <1> 	termcursorpos dd 0
  2906 00002577 0000                <1> 	removedvideo dw 0
  2907                              <1> newtermcopy:
  2908 00002579 60                  <1> 	pusha
  2909 0000257A BF[2CDD2800]        <1> 	mov edi, videobuf
  2910 0000257F 31DB                <1> 	xor ebx, ebx
  2911 00002581 881D[72250000]      <1> 	mov [termcopyneeded], bl
  2912 00002587 668B1D[F7230000]    <1> 	mov bx, [videobufpos]
  2913 0000258E 01DF                <1> 	add edi, ebx
  2914 00002590 893D[73250000]      <1> 	mov [termcursorpos], edi
  2915 00002596 E8CB000000          <1> 	call switchtermcursor
  2916 0000259B 803D[50950000]00    <1> 	cmp byte [guion], 0
  2917 000025A2 0F8420000000        <1> 	je near nowincopy
  2918                              <1> %ifdef gui.included
  2919 000025A8 C605[BB790000]00    <1> 	mov byte [mouseselecton], 0
  2920 000025AF C605[38220000]01    <1> 	mov byte [termcopyon], 1
  2921 000025B6 803D[37220000]01    <1> 	cmp byte [termguion], 1
  2922 000025BD 0F84E7500000        <1> 	je near windowvideocopy
  2923                              <1> %endif
  2924 000025C3 E997000000          <1> 	jmp nocopytermatall
  2925                              <1> nowincopy:
  2926 000025C8 BE00000A00          <1> 	mov esi, 0xA0000
  2927 000025CD A1[3E020000]        <1> 	mov eax, [basecache]
  2928 000025D2 C1E004              <1> 	shl eax, 4
  2929 000025D5 29C6                <1> 	sub esi, eax
  2930 000025D7 BF[2CDD2800]        <1> 	mov edi, videobuf
  2931 000025DC 31C9                <1> 	xor ecx, ecx
  2932 000025DE 668B0D[FB230000]    <1> 	mov cx, [charxy]
  2933                              <1> nowincopy2:
  2934 000025E5 668B07              <1> 	mov ax, [edi]
  2935 000025E8 81C7A46A0000        <1> 	add edi, (videobuf2 - videobuf)
  2936 000025EE 668B1F              <1> 	mov bx, [edi]
  2937 000025F1 668907              <1> 	mov [edi], ax
  2938 000025F4 81EFA46A0000        <1> 	sub edi, (videobuf2 - videobuf)
  2939 000025FA 47                  <1> 	inc edi
  2940 000025FB 6639D8              <1> 	cmp ax, bx
  2941 000025FE 743E                <1> 	je nopresentwinfont
  2942 00002600 4F                  <1> 	dec edi
  2943 00002601 BB[A4830000]        <1> 	mov ebx, fonts
  2944 00002606 31C0                <1> 	xor eax, eax
  2945 00002608 8A07                <1> 	mov al, [edi]
  2946 0000260A C1E004              <1> 	shl eax, 4
  2947 0000260D 01C3                <1> 	add ebx, eax
  2948 0000260F 47                  <1> 	inc edi
  2949 00002610 8A27                <1> 	mov ah, [edi]
  2950 00002612 31D2                <1> 	xor edx, edx
  2951 00002614 8A15[FB230000]      <1> 	mov dl, [charxy]
  2952 0000261A C1C110              <1> 	rol ecx, 16
  2953 0000261D B110                <1> 	mov cl, 16
  2954                              <1> nowinfont:
  2955 0000261F 8A03                <1> 	mov al, [ebx]
  2956 00002621 D0C8                <1> 	ror al, 1
  2957 00002623 80FC07              <1> 	cmp ah, 7
  2958 00002626 7602                <1> 	jbe notnotfont
  2959 00002628 F6D0                <1> 	not al
  2960                              <1> notnotfont:
  2961 0000262A 8806                <1> 	mov [esi], al
  2962 0000262C 01D6                <1> 	add esi, edx
  2963 0000262E 43                  <1> 	inc ebx
  2964 0000262F FEC9                <1> 	dec cl
  2965 00002631 80F900              <1> 	cmp cl, 0
  2966 00002634 75E9                <1> 	jne nowinfont
  2967 00002636 C1E204              <1> 	shl edx, 4
  2968 00002639 29D6                <1> 	sub esi, edx
  2969 0000263B C1C110              <1> 	rol ecx, 16
  2970                              <1> nopresentwinfont:
  2971 0000263E 47                  <1> 	inc edi
  2972 0000263F 46                  <1> 	inc esi
  2973 00002640 FEC9                <1> 	dec cl
  2974 00002642 80F900              <1> 	cmp cl, 0
  2975 00002645 759E                <1> 	jne nowincopy2
  2976 00002647 8A0D[FB230000]      <1> 	mov cl, [charxy]
  2977 0000264D 31D2                <1> 	xor edx, edx
  2978 0000264F 88CA                <1> 	mov dl, cl
  2979 00002651 29D6                <1> 	sub esi, edx
  2980 00002653 C1E204              <1> 	shl edx, 4
  2981 00002656 01D6                <1> 	add esi, edx
  2982 00002658 FECD                <1> 	dec ch
  2983 0000265A 80FD00              <1> 	cmp ch, 0
  2984 0000265D 7586                <1> 	jne nowincopy2
  2985                              <1> nocopytermatall:
  2986 0000265F E802000000          <1> 	call switchtermcursor
  2987 00002664 61                  <1> 	popa
  2988 00002665 C3                  <1> 	ret
  2989                              <1> 	
  2990                              <1> switchtermcursor:
  2991 00002666 8B3D[73250000]      <1> 	mov edi, [termcursorpos]
  2992 0000266C 8A4701              <1> 	mov al, [edi + 1]
  2993 0000266F 8A27                <1> 	mov ah, [edi]
  2994 00002671 3C07                <1> 	cmp al, 7
  2995 00002673 7607                <1> 	jbe movlargecursorterm
  2996 00002675 B007                <1> 	mov al, 7
  2997 00002677 E902000000          <1> 	jmp movedcursorterm
  2998                              <1> movlargecursorterm:
  2999 0000267C B0F0                <1> 	mov al, 0xF0
  3000                              <1> movedcursorterm:
  3001 0000267E 884701              <1> 	mov [edi + 1], al
  3002 00002681 80FC00              <1> 	cmp ah, 0
  3003 00002684 7504                <1> 	jne fixednocursorterm
  3004 00002686 B420                <1> 	mov ah, " "
  3005 00002688 8827                <1> 	mov [edi], ah
  3006                              <1> fixednocursorterm:
  3007 0000268A C3                  <1> 	ret
  3008                              <1> %endif
  3009                                      %include "source/dosints.asm"
  3010                              <1> int20h:
  3011 0000268B 66B8004C            <1> mov ax, 0x4C00
  3012                              <1> int21h:
  3013                              <1> dostosolleros:
  3014 0000268F 6650                <1> 	push ax
  3015 00002691 66B83000            <1> 	mov ax, NEW_DATA_SEL
  3016 00002695 8ED8                <1> 	mov ds, ax
  3017 00002697 8EC0                <1> 	mov es, ax
  3018 00002699 8EE0                <1> 	mov fs, ax
  3019 0000269B 66B82000            <1> 	mov ax, SYS_DATA_SEL
  3020 0000269F 8EE8                <1> 	mov gs, ax
  3021 000026A1 6658                <1> 	pop ax
  3022 000026A3 9C                  <1> 	pushf
  3023 000026A4 60                  <1> 	pusha
  3024 000026A5 80FC01              <1> 	cmp ah, 1
  3025 000026A8 0F8449000000        <1> 	je near dosgchar
  3026 000026AE 80FC02              <1> 	cmp ah, 2
  3027 000026B1 0F8447000000        <1> 	je near doswchar
  3028 000026B7 80FC09              <1> 	cmp ah, 9
  3029 000026BA 0F8449000000        <1> 	je near dosprintstr
  3030 000026C0 80FC0A              <1> 	cmp ah, 0xA
  3031 000026C3 0F8456000000        <1> 	je near dosgetstr
  3032 000026C9 80FC2B              <1> 	cmp ah, 0x2B
  3033 000026CC 0F8492000000        <1> 	je near dosgetdate
  3034 000026D2 80FC2C              <1> 	cmp ah, 0x2C
  3035 000026D5 0F84AC000000        <1> 	je near dosgettime
  3036 000026DB 80FC4C              <1> 	cmp ah, 0x4C
  3037 000026DE 0F84C1000000        <1> 	je near dosexit
  3038                              <1> backtodos:
  3039 000026E4 61                  <1> 	popa
  3040 000026E5 9D                  <1> 	popf
  3041 000026E6 6650                <1> 	push ax
  3042 000026E8 66B85000            <1> 	mov ax, DOS_DATA_SEL
  3043 000026EC 8ED8                <1> 	mov ds, ax
  3044 000026EE 8EC0                <1> 	mov es, ax
  3045 000026F0 8EE0                <1> 	mov fs, ax
  3046 000026F2 8EE8                <1> 	mov gs, ax
  3047 000026F4 6658                <1> 	pop ax
  3048 000026F6 CF                  <1> 	iret
  3049                              <1> 
  3050                              <1> dosgchar:
  3051 000026F7 E8C7FAFFFF          <1> 	call getchar
  3052 000026FC EBE6                <1> 	jmp backtodos
  3053                              <1> 	
  3054                              <1> doswchar:
  3055 000026FE 88D0                <1> 	mov al, dl
  3056 00002700 B307                <1> 	mov bl, 7
  3057 00002702 E821FBFFFF          <1> 	call prcharint
  3058 00002707 EBDB                <1> 	jmp backtodos
  3059                              <1> 	
  3060                              <1> dosprintstr:
  3061 00002709 31F6                <1> 	xor esi, esi
  3062 0000270B 6689D6              <1> 	mov si, dx
  3063 0000270E 81C600004000        <1> 	add esi, dosprogloc
  3064 00002714 B024                <1> 	mov al, "$"
  3065 00002716 B307                <1> 	mov bl, 7
  3066 00002718 E8ECF5FFFF          <1> 	call printint
  3067 0000271D EBC5                <1> 	jmp backtodos
  3068                              <1> 	
  3069                              <1> dosgetstr:
  3070 0000271F 31F6                <1> 	xor esi, esi
  3071 00002721 6689D6              <1> 	mov si, dx
  3072 00002724 81C600004000        <1> 	add esi, dosprogloc
  3073 0000272A B900000000          <1> 	mov ecx, 0
  3074 0000272F 8A0E                <1> 	mov cl, [esi]
  3075 00002731 81C603000000        <1> 	add esi, 3
  3076 00002737 89F7                <1> 	mov edi, esi
  3077 00002739 8935[60270000]      <1> 	mov [stringstart], esi
  3078 0000273F 01CF                <1> 	add edi, ecx
  3079 00002741 B00A                <1> 	mov al, 10
  3080 00002743 B307                <1> 	mov bl, 7
  3081 00002745 E8A0F6FFFF          <1> 	call rdprint
  3082 0000274A 89F1                <1> 	mov ecx, esi
  3083 0000274C 2B0D[60270000]      <1> 	sub ecx, [stringstart]
  3084 00002752 8B35[60270000]      <1> 	mov esi, [stringstart]
  3085 00002758 884EFF              <1> 	mov [esi - 1], cl
  3086 0000275B 884EFE              <1> 	mov [esi - 2], cl
  3087 0000275E EB84                <1> 	jmp backtodos
  3088 00002760 00000000            <1> stringstart dd 0
  3089                              <1> 
  3090                              <1> dosgetdate:
  3091 00002764 E88B250000          <1> 	call time
  3092 00002769 8A0D[BC4E0000]      <1> 	mov cl, [RTCtimeYear]
  3093 0000276F B500                <1> 	mov ch, 0
  3094 00002771 6681C1D007          <1> 	add cx, 2000
  3095 00002776 8A35[BB4E0000]      <1> 	mov dh, [RTCtimeMonth]
  3096 0000277C 8A15[BA4E0000]      <1> 	mov dl, [RTCtimeDay]
  3097 00002782 E95DFFFFFF          <1> 	jmp backtodos
  3098                              <1> 
  3099                              <1> dosgettime:
  3100 00002787 E868250000          <1> 	call time
  3101 0000278C 8A2D[B94E0000]      <1> 	mov ch, [RTCtimeHour]
  3102 00002792 8A0D[B84E0000]      <1> 	mov cl, [RTCtimeMinute]
  3103 00002798 8A35[B74E0000]      <1> 	mov dh, [RTCtimeSecond]
  3104 0000279E B200                <1> 	mov dl, 0
  3105 000027A0 E93FFFFFFF          <1> 	jmp backtodos
  3106                              <1> 	
  3107                              <1> dosexit:
  3108 000027A5 61                  <1> 	popa
  3109 000027A6 8B25[96AB0000]      <1> 	mov esp, [previousstack]
  3110 000027AC 31DB                <1> 	xor ebx, ebx
  3111 000027AE 88C3                <1> 	mov bl, al
  3112 000027B0 80FB00              <1> 	cmp bl, 0
  3113 000027B3 0F85D7F4FFFF        <1> 	jne near exitprog.error
  3114 000027B9 C3                  <1> 	ret
  3115                                      %include "source/solleros.asm"
  3116                              <1> 	;SOLLEROS.ASM
  3117                              <1> os:
  3118                              <1> setdefenv:
  3119 000027BA B02F                <1> 	mov al, '/'
  3120 000027BC A2[A2AB0000]        <1> 	mov [currentfolder], al
  3121 000027C1 B801000000          <1> 	mov eax, 1
  3122 000027C6 A3[9EAB0000]        <1> 	mov [currentfolderloc], eax
  3123 000027CB E898F5FFFF          <1> 	call clear
  3124                              <1> 	
  3125                              <1> bootfilecheck:
  3126 000027D0 803D[A6AD0000]01    <1> 	cmp byte [ranboot], 1
  3127 000027D7 0F8425000000        <1> 	je near nobootfile
  3128                              <1> 	%ifdef hardware.automatic
  3129 000027DD E864390000          <1> 		call initializelater ;Initialize components that have debug messages
  3130                              <1> 	%endif
  3131 000027E2 BF[3E830000]        <1> 	mov edi, bootfilename
  3132 000027E7 BE00004000          <1> 	mov esi, 0x400000
  3133 000027EC E81F3D0000          <1> 	call loadfile
  3134 000027F1 81FA94010000        <1> 	cmp edx, 404
  3135 000027F7 0F8405000000        <1> 	je near nobootfile
  3136 000027FD E8B00D0000          <1> 	call progbatchfound
  3137                              <1> nobootfile:	
  3138 00002802 C605[A6AD0000]01    <1> 	mov byte [ranboot], 1
  3139                              <1> 
  3140 00002809 BE[00000000]        <1> 	mov esi, signature
  3141                              <1> .sigcopyloop:	;this prevents an odd error
  3142 0000280E 658A06              <1> 	mov al, [gs:esi]
  3143 00002811 8806                <1> 	mov [esi], al
  3144 00002813 46                  <1> 	inc esi
  3145 00002814 81FE[1A000000]      <1> 	cmp esi, signatureend
  3146 0000281A 72F2                <1> 	jb .sigcopyloop
  3147                              <1> 	
  3148 0000281C BE[00000000]        <1> 	mov esi, signature
  3149 00002821 E8DCF4FFFF          <1> 	call print
  3150 00002826 8B0D[16000000]      <1> 	mov ecx, [signatureend - 4]
  3151 0000282C E8F4060000          <1> 	call showdec
  3152 00002831 BE[7F830000]        <1> 	mov esi, line
  3153 00002836 E8C7F4FFFF          <1> 	call print
  3154 0000283B BE[5B830000]        <1> 	mov esi, userask
  3155 00002840 E8BDF4FFFF          <1> 	call print
  3156                              <1> usercheck:
  3157 00002845 BE[16C20000]        <1> 	mov esi, buftxt
  3158 0000284A BF[16C60000]        <1> 	mov edi, buftxtend
  3159 0000284F B00A                <1> 	mov al, 10
  3160 00002851 E894F5FFFF          <1> 	call rdprint
  3161 00002856 56                  <1> 	push esi
  3162 00002857 BE[65830000]        <1> 	mov esi, pwdask
  3163 0000285C E8A1F4FFFF          <1> 	call print
  3164 00002861 5E                  <1> 	pop esi
  3165 00002862 46                  <1> 	inc esi
  3166 00002863 8935[56290000]      <1> 	mov [esipass], esi
  3167                              <1> passcheck:
  3168 00002869 E855F9FFFF          <1> 	call getchar
  3169 0000286E 3C0A                <1> 	cmp al, 10
  3170 00002870 0F8436000000        <1> 	je near gotpass
  3171 00002876 3C08                <1> 	cmp al, 8
  3172 00002878 0F8410000000        <1> 	je near backpass
  3173 0000287E 8806                <1> 	mov [esi], al
  3174 00002880 46                  <1> 	inc esi
  3175 00002881 B02A                <1> 	mov al, '*'
  3176 00002883 E8A0F9FFFF          <1> 	call prcharint
  3177 00002888 EBDF                <1> 	jmp passcheck
  3178 0000288A 08200800            <1> backcursor2 db 8," ",8,0
  3179                              <1> backpass:
  3180 0000288E 3B35[56290000]      <1> 	cmp esi, [esipass]
  3181 00002894 0F84CFFFFFFF        <1> 	je near passcheck
  3182 0000289A 4E                  <1> 	dec esi
  3183 0000289B C60600              <1> 	mov byte [esi], 0
  3184 0000289E 56                  <1> 	push esi
  3185 0000289F BE[8A280000]        <1> 	mov esi, backcursor2
  3186 000028A4 E859F4FFFF          <1> 	call print
  3187 000028A9 5E                  <1> 	pop esi
  3188 000028AA EBBD                <1> 	jmp passcheck
  3189                              <1> gotpass:
  3190 000028AC B00A                <1> 	mov al, 10
  3191 000028AE E875F9FFFF          <1> 	call prcharint
  3192 000028B3 30C0                <1> 	xor al, al
  3193 000028B5 31C9                <1> 	xor ecx, ecx
  3194 000028B7 8806                <1> 	mov [esi], al
  3195 000028B9 BB[81830000]        <1> 	mov ebx, userlst
  3196                              <1> userfind:
  3197 000028BE BE[16C20000]        <1> 	mov esi, buftxt
  3198 000028C3 8A06                <1> 	mov al, [esi]
  3199 000028C5 3C00                <1> 	cmp al, 0
  3200 000028C7 0F84EDFEFFFF        <1> 	je near os
  3201 000028CD 891D[5A290000]      <1> 	mov [usercache], ebx
  3202 000028D3 E860030000          <1> 	call tester
  3203 000028D8 3C01                <1> 	cmp al, 1
  3204 000028DA 7416                <1> 	je pwdtest
  3205 000028DC 41                  <1> 	inc ecx
  3206                              <1> nxtuser:
  3207 000028DD 8A03                <1> 	mov al, [ebx]
  3208 000028DF 43                  <1> 	inc ebx
  3209 000028E0 3C00                <1> 	cmp al, 0
  3210 000028E2 75F9                <1> 	jne nxtuser
  3211 000028E4 81FB[A4830000]      <1> 	cmp ebx, userlstend
  3212 000028EA 0F83CAFEFFFF        <1> 	jae near os
  3213 000028F0 EBCC                <1> 	jmp userfind
  3214                              <1> pwdtest:
  3215 000028F2 46                  <1> 	inc esi
  3216 000028F3 43                  <1> 	inc ebx
  3217 000028F4 E83F030000          <1> 	call tester
  3218 000028F9 3C01                <1> 	cmp al, 1
  3219 000028FB 7402                <1> 	je pwdrgt
  3220 000028FD EBDE                <1> 	jmp nxtuser
  3221                              <1> pwdrgt:
  3222 000028FF D1E9                <1> 	shr ecx, 1
  3223 00002901 890D[A2AD0000]      <1> 	mov [uid], ecx
  3224 00002907 E85CF4FFFF          <1> 	call clear
  3225 0000290C 31C9                <1> 	xor ecx, ecx
  3226 0000290E 41                  <1> 	inc ecx
  3227 0000290F 890D[78B22900]      <1> 	mov [commandbufpos], ecx
  3228                              <1> returnfromexp:
  3229 00002915 66B90002            <1> 	mov cx, 200h
  3230 00002919 BE[16C20000]        <1> 	mov esi, buftxt
  3231 0000291E 8935[342C0000]      <1> 	mov [currentcommandloc], esi
  3232 00002924 E825000000          <1> 	call bufclr
  3233                              <1> clearolddata:
  3234 00002929 31C0                <1> 	xor eax, eax
  3235 0000292B A2[A7AD0000]        <1> 	mov [IFON], al
  3236 00002930 A2[A8AD0000]        <1> 	mov [IFTRUE], al
  3237 00002935 A2[10AE0000]        <1> 	mov [BATCHISON], al
  3238 0000293A A3[0CAE0000]        <1> 	mov [BATCHPOS], eax
  3239 0000293F A2[11AE0000]        <1> 	mov [LOOPON], al
  3240 00002944 A3[12AE0000]        <1> 	mov [LOOPPOS], eax
  3241 00002949 E933000000          <1> 	jmp nwcmd
  3242                              <1> bufclr:	
  3243 0000294E 30C0                <1> 	xor al, al
  3244 00002950 8806                <1> 	mov [esi], al
  3245 00002952 46                  <1> 	inc esi
  3246 00002953 E2F9                <1> 	loop bufclr
  3247 00002955 C3                  <1> 	ret
  3248                              <1> 
  3249 00002956 00000000            <1> esipass dd 0
  3250 0000295A [81830000]          <1> usercache dd userlst
  3251                              <1> 	
  3252                              <1> buftxtclear:
  3253 0000295E 30C0                <1> 	xor al, al
  3254 00002960 BE[16C20000]        <1> 	mov esi, buftxt
  3255 00002965 81FE[16C60000]      <1> clearbuftxt: cmp esi, buf2
  3256 0000296B 730E                <1> 	jae retbufclr
  3257 0000296D 8806                <1> 	mov [esi], al
  3258 0000296F 46                  <1> 	inc esi
  3259 00002970 EBF3                <1> 	jmp clearbuftxt
  3260                              <1> 
  3261 00002972 39DE                <1> clearitbuf: cmp esi, ebx
  3262 00002974 7305                <1> 	jae retbufclr
  3263 00002976 8806                <1> 	mov [esi], al
  3264 00002978 46                  <1> 	inc esi
  3265 00002979 EBF7                <1> 	jmp clearitbuf
  3266 0000297B C3                  <1> retbufclr: ret
  3267                              <1> 
  3268 0000297C E900000000          <1> full:	jmp nwcmd
  3269                              <1> 
  3270                              <1> shush:	;SollerOS Hardly Unix-compatible Shell
  3271                              <1> nwcmd:
  3272 00002981 FB                  <1> 	sti
  3273 00002982 31C0                <1> 	xor eax, eax
  3274 00002984 3905[562B0000]      <1> 	cmp [nextcommandloc], eax
  3275 0000298A 7413                <1> 	je nomultiplecommand
  3276 0000298C 8B35[562B0000]      <1> 	mov esi, [nextcommandloc]
  3277 00002992 8935[5A2B0000]      <1> 	mov [thiscommandloc], esi
  3278 00002998 E8C6010000          <1> 	call fixvariables
  3279 0000299D EBE2                <1> 	jmp nwcmd
  3280                              <1> nomultiplecommand:
  3281 0000299F A3[5A2B0000]        <1> 	mov [thiscommandloc], eax
  3282 000029A4 3805[AF660000]      <1> 	cmp [threadson], al
  3283 000029AA 7405                <1> 	je noclinwcmd
  3284 000029AC A2[AF660000]        <1> 	mov [threadson], al
  3285                              <1> noclinwcmd:
  3286 000029B1 B001                <1> 	mov al, 1
  3287 000029B3 3805[10AE0000]      <1> 	cmp [BATCHISON], al
  3288 000029B9 7501                <1> 	jne cancel
  3289 000029BB C3                  <1> 	ret
  3290 000029BC 30C0                <1> cancel:	xor al, al
  3291 000029BE A2[A7AD0000]        <1> 	mov [IFON], al
  3292 000029C3 A2[10AE0000]        <1> 	mov [BATCHISON], al
  3293 000029C8 B05B                <1> 	mov al, '['
  3294 000029CA 66BB0700            <1> 	mov bx, 7
  3295 000029CE E866F8FFFF          <1> 	call prcharq
  3296 000029D3 8B35[5A290000]      <1> 	mov esi, [usercache]
  3297 000029D9 E812F3FFFF          <1> 	call printquiet
  3298 000029DE BE[6F830000]        <1> 	mov esi, computer
  3299 000029E3 E808F3FFFF          <1> 	call printquiet
  3300 000029E8 BE[A2AB0000]        <1> 	mov esi, currentfolder
  3301 000029ED 0335[9AAB0000]      <1> 	add esi, [lastfolderloc]
  3302 000029F3 E8F8F2FFFF          <1> 	call printquiet
  3303 000029F8 BE[7A830000]        <1> 	mov esi, endprompt
  3304 000029FD E800F3FFFF          <1> 	call print
  3305 00002A02 E857FFFFFF          <1> 	call buftxtclear
  3306 00002A07 BE[16C20000]        <1> 	mov esi, buftxt
  3307 00002A0C C605[AC210000]01    <1> 	mov byte [commandedit], 1
  3308 00002A13 B00A                <1> 	mov al, 10
  3309 00002A15 66BB0700            <1> 	mov bx, 7
  3310 00002A19 BF[16C60000]        <1> 	mov edi, buftxtend
  3311 00002A1E E8C7F3FFFF          <1> 	call rdprint
  3312 00002A23 C605[AC210000]00    <1> 	mov byte [commandedit], 0
  3313 00002A2A 803D[16C20000]00    <1> 	cmp byte [buftxt], 0
  3314 00002A31 0F844AFFFFFF        <1> 	je near nwcmd
  3315 00002A37 8B35[78B22900]      <1> gotcmd:	mov esi, [commandbufpos]
  3316 00002A3D 8935[74B22900]      <1> 	mov [lastcommandpos], esi
  3317 00002A43 FF05[80B22900]      <1> 	inc dword [commandsentered]
  3318 00002A49 BF[16C20000]        <1> 	mov edi, buftxt
  3319 00002A4E 81C6[84B22900]      <1> 	add esi, commandbuf
  3320 00002A54 81FE[84C22900]      <1> 	cmp esi, commandbufend
  3321 00002A5A 7605                <1> 	jbe copycommand
  3322 00002A5C BE[84B22900]        <1> 	mov esi, commandbuf
  3323                              <1> copycommand:
  3324 00002A61 8A07                <1> 	mov al, [edi]
  3325 00002A63 8806                <1> 	mov [esi], al
  3326 00002A65 47                  <1> 	inc edi
  3327 00002A66 46                  <1> 	inc esi
  3328 00002A67 3C00                <1> 	cmp al, 0
  3329 00002A69 740F                <1> 	je donecopy
  3330 00002A6B 81FE[84C22900]      <1> 	cmp esi, commandbufend
  3331 00002A71 76EE                <1> 	jbe copycommand
  3332 00002A73 BE[84B22900]        <1> 	mov esi, commandbuf
  3333 00002A78 EBE7                <1> 	jmp copycommand
  3334                              <1> donecopy:
  3335 00002A7A 81EE[84B22900]      <1> 	sub esi, commandbuf
  3336 00002A80 8935[78B22900]      <1> 	mov [commandbufpos], esi
  3337 00002A86 E8D3000000          <1> 	call run
  3338 00002A8B E9F1FEFFFF          <1> 	jmp nwcmd
  3339                              <1> 
  3340 00002A90 E8C9FEFFFF          <1> input:	call buftxtclear
  3341 00002A95 BE[16C20000]        <1> 	mov esi, buftxt		;puts input into buftxt AND onto screen
  3342 00002A9A BF[16C60000]        <1> 	mov edi, buftxtend
  3343 00002A9F B00A                <1> stdin:	mov al, 10
  3344 00002AA1 B307                <1> 	mov bl, 7
  3345 00002AA3 E842F3FFFF          <1> 	call rdprint
  3346 00002AA8 C3                  <1> 	ret
  3347                              <1> 
  3348                              <1> replacevariable:
  3349 00002AA9 8A4601              <1> 	mov al, [esi + 1]
  3350 00002AAC C64601FF            <1> 	mov byte [esi + 1], 255
  3351 00002AB0 3C24                <1> 	cmp al, "$"
  3352 00002AB2 0F84AB000000        <1> 	je near fixvariables
  3353 00002AB8 884601              <1> 	mov [esi + 1], al
  3354 00002ABB 56                  <1> 	push esi
  3355 00002ABC 81EE[16C20000]      <1> 	sub esi, buftxt
  3356 00002AC2 89F7                <1> 	mov edi, esi
  3357 00002AC4 81C6[16C20000]      <1> 	add esi, buftxt
  3358 00002ACA 47                  <1> 	inc edi
  3359 00002ACB BB[16AE0000]        <1> 	mov ebx, variables
  3360 00002AD0 E863150000          <1> 	call nxtvrech
  3361 00002AD5 89F7                <1> 	mov edi, esi
  3362 00002AD7 31DB                <1> 	xor ebx, ebx
  3363 00002AD9 4E                  <1> 	dec esi
  3364                              <1> findvarname:
  3365 00002ADA 4E                  <1> 	dec esi
  3366 00002ADB 8A06                <1> 	mov al, [esi]
  3367 00002ADD 43                  <1> 	inc ebx
  3368 00002ADE 3C04                <1> 	cmp al, 4
  3369 00002AE0 75F8                <1> 	jne findvarname
  3370 00002AE2 5E                  <1> 	pop esi
  3371                              <1> replacevarloop:
  3372 00002AE3 8A07                <1> 	mov al, [edi]
  3373 00002AE5 3C00                <1> 	cmp al, 0
  3374 00002AE7 0F8413000000        <1> 	je near compressbuftxt
  3375 00002AED 81FB00000000        <1> 	cmp ebx, 0
  3376 00002AF3 0F8416000000        <1> 	je near expandbuftxt
  3377 00002AF9 8806                <1> 	mov [esi], al
  3378 00002AFB 4B                  <1> 	dec ebx
  3379 00002AFC 46                  <1> 	inc esi
  3380 00002AFD 47                  <1> 	inc edi
  3381 00002AFE EBE3                <1> 	jmp replacevarloop
  3382                              <1> compressbuftxt:
  3383 00002B00 8A041E              <1> 	mov al, [esi + ebx]
  3384 00002B03 8806                <1> 	mov [esi], al
  3385 00002B05 46                  <1> 	inc esi
  3386 00002B06 3C00                <1> 	cmp al, 0
  3387 00002B08 75F6                <1> 	jne compressbuftxt
  3388 00002B0A E954000000          <1> 	jmp fixvariables
  3389                              <1> expandbuftxt:
  3390 00002B0F 89F1                <1> 	mov ecx, esi
  3391 00002B11 8A26                <1> 	mov ah, [esi]
  3392                              <1> expandbuftxtlp:
  3393 00002B13 8A1E                <1> 	mov bl, [esi]
  3394 00002B15 46                  <1> 	inc esi
  3395 00002B16 8A3E                <1> 	mov bh, [esi]
  3396 00002B18 8826                <1> 	mov [esi], ah
  3397 00002B1A 88FC                <1> 	mov ah, bh
  3398 00002B1C 80FB00              <1> 	cmp bl, 0
  3399 00002B1F 75F2                <1> 	jne expandbuftxtlp
  3400 00002B21 89CE                <1> 	mov esi, ecx
  3401 00002B23 8806                <1> 	mov [esi], al
  3402 00002B25 47                  <1> 	inc edi
  3403 00002B26 8A07                <1> 	mov al, [edi]
  3404 00002B28 3C00                <1> 	cmp al, 0
  3405 00002B2A 0F8433000000        <1> 	je near fixvariables
  3406 00002B30 46                  <1> 	inc esi
  3407 00002B31 EBDC                <1> 	jmp expandbuftxt
  3408                              <1> multipleprogline:
  3409 00002B33 30E4                <1> 	xor ah, ah
  3410 00002B35 8826                <1> 	mov [esi], ah
  3411 00002B37 46                  <1> 	inc esi
  3412 00002B38 8935[562B0000]      <1> 	mov [nextcommandloc], esi
  3413 00002B3E E93E000000          <1> 	jmp donefixvariables
  3414                              <1> inlinecomment:	;if the following char is #, include a #, otherwise end the line
  3415 00002B43 46                  <1> 	inc esi
  3416 00002B44 8A06                <1> 	mov al, [esi]
  3417 00002B46 C606FF              <1> 	mov byte [esi], 255
  3418 00002B49 3C23                <1> 	cmp al, '#'
  3419 00002B4B 7416                <1> 	je fixvariables
  3420 00002B4D 4E                  <1> 	dec esi
  3421 00002B4E C60600              <1> 	mov byte [esi], 0
  3422 00002B51 E90D000000          <1> 	jmp fixvariables
  3423                              <1> 	
  3424 00002B56 00000000            <1> nextcommandloc dd 0
  3425 00002B5A 00000000            <1> thiscommandloc dd 0	
  3426                              <1> run:
  3427 00002B5E BE[16C20000]        <1> 	mov esi, buftxt
  3428                              <1> fixvariables:
  3429 00002B63 46                  <1> 	inc esi
  3430 00002B64 8A06                <1> 	mov al, [esi]
  3431 00002B66 3C23                <1> 	cmp al, '#'	;inline comment
  3432 00002B68 74D9                <1> 	je inlinecomment
  3433 00002B6A 3C24                <1> 	cmp al, '$' ;variable
  3434 00002B6C 0F8437FFFFFF        <1> 	je near replacevariable
  3435 00002B72 3C3B                <1> 	cmp al, ';' ;program list
  3436 00002B74 74BD                <1> 	je multipleprogline
  3437 00002B76 3C00                <1> 	cmp al, 0
  3438 00002B78 75E9                <1> 	jne fixvariables
  3439 00002B7A 31C0                <1> 	xor eax, eax
  3440 00002B7C A3[562B0000]        <1> 	mov [nextcommandloc], eax
  3441                              <1> donefixvariables:
  3442 00002B81 803D[1F310000]00    <1> 	cmp byte [indexdone], 0
  3443 00002B88 7505                <1> 	jne progtest
  3444 00002B8A E8FB040000          <1> 	call indexfiles
  3445                              <1> progtest:
  3446 00002B8F 31C0                <1> 	xor eax, eax
  3447 00002B91 BB[96A70000]        <1> 	mov ebx, fileindex
  3448 00002B96 668B03              <1> prgnxt:	mov ax, [ebx]
  3449 00002B99 B1FF                <1> 	mov cl, 255
  3450 00002B9B B52C                <1> 	mov ch, 44
  3451 00002B9D 6639C8              <1> 	cmp ax, cx
  3452 00002BA0 740B                <1> 	je fndprg
  3453 00002BA2 43                  <1> 	inc ebx
  3454 00002BA3 81FB[96AB0000]      <1> 	cmp ebx, fileindexend
  3455 00002BA9 735D                <1> 	jae prgnf
  3456 00002BAB EBE9                <1> 	jmp prgnxt
  3457 00002BAD 81C302000000        <1> fndprg: add ebx, 2
  3458 00002BB3 31C9                <1> 	xor ecx, ecx
  3459 00002BB5 BE[16C20000]        <1> 	mov esi, buftxt
  3460 00002BBA 390D[5A2B0000]      <1> 	cmp [thiscommandloc], ecx
  3461 00002BC0 7406                <1> 	je noprgtstmultiple
  3462 00002BC2 8B35[5A2B0000]      <1> 	mov esi, [thiscommandloc]
  3463                              <1> noprgtstmultiple:
  3464 00002BC8 E8A6000000          <1> 	call cndtest
  3465 00002BCD 3C01                <1> 	cmp al, 1
  3466 00002BCF 7302                <1> 	jae prggood
  3467 00002BD1 EBC3                <1> 	jmp prgnxt
  3468 00002BD3 81FB[96AB0000]      <1> prggood: cmp ebx, fileindexend
  3469 00002BD9 7358                <1> 	jae prgdn
  3470 00002BDB 31C0                <1> 	xor eax, eax
  3471 00002BDD BE[16C20000]        <1> 	mov esi, buftxt
  3472 00002BE2 3905[5A2B0000]      <1> 	cmp [thiscommandloc], eax
  3473 00002BE8 7406                <1> 	je noprggoodmul
  3474 00002BEA 8B35[5A2B0000]      <1> 	mov esi, [thiscommandloc]
  3475                              <1> noprggoodmul:
  3476 00002BF0 8935[342C0000]      <1> 	mov [currentcommandloc], esi
  3477 00002BF6 81C303000000        <1> 	add ebx, 3
  3478 00002BFC 8B3B                <1> 	mov edi, [ebx]
  3479 00002BFE C605[AF660000]02    <1> 	mov byte [threadson], 2
  3480 00002C05 FFD7                <1> 	call edi
  3481 00002C07 C3                  <1> 	ret
  3482                              <1> prgnf:	
  3483 00002C08 8B35[342C0000]      <1> 	mov esi, [currentcommandloc]
  3484 00002C0E 8A06                <1> 	mov al, [esi]
  3485 00002C10 3C00                <1> 	cmp al, 0
  3486 00002C12 741F                <1> 	je prgdn
  3487 00002C14 BE[46830000]        <1> 	mov esi, notfound1
  3488 00002C19 E8E4F0FFFF          <1> 	call print
  3489 00002C1E 8B35[342C0000]      <1> 	mov esi, [currentcommandloc]
  3490 00002C24 E8D9F0FFFF          <1> 	call print
  3491 00002C29 BE[4E830000]        <1> 	mov esi, notfound2
  3492 00002C2E E8CFF0FFFF          <1> 	call print
  3493 00002C33 C3                  <1> prgdn:	ret
  3494                              <1> 
  3495 00002C34 00000000            <1> currentcommandloc dd 0
  3496                              <1> 
  3497                              <1> tester:			;si=user bx=prog returns 1 in al if true
  3498 00002C38 6631C0              <1> 	xor ax, ax
  3499 00002C3B 8A06                <1> retest:	mov al, [esi]
  3500 00002C3D 8A23                <1> 	mov ah, [ebx]
  3501 00002C3F 3C00                <1> 	cmp al, 0
  3502 00002C41 7408                <1> 	je testtrue
  3503 00002C43 38E0                <1> 	cmp al, ah
  3504 00002C45 750C                <1> 	jne testfalse
  3505 00002C47 43                  <1> 	inc ebx
  3506 00002C48 46                  <1> 	inc esi
  3507 00002C49 EBF0                <1> 	jmp retest
  3508                              <1> testtrue:
  3509 00002C4B 80FC00              <1> 	cmp ah, 0
  3510 00002C4E 7503                <1> 	jne testfalse
  3511 00002C50 B001                <1> 	mov al, 1
  3512 00002C52 C3                  <1> 	ret
  3513                              <1> testfalse:
  3514 00002C53 30C0                <1> 	xor al, al
  3515 00002C55 C3                  <1> 	ret
  3516                              <1> 
  3517                              <1> optest:			;si=user bx=prog returns 1 in al if true
  3518 00002C56 30C0                <1> 	xor al, al
  3519                              <1> opretest:
  3520 00002C58 8A06                <1> 	mov al, [esi]
  3521 00002C5A 8A23                <1> 	mov ah, [ebx]
  3522 00002C5C 38E0                <1> 	cmp al, ah
  3523 00002C5E 7510                <1> 	jne optestfalse
  3524 00002C60 80FC00              <1> 	cmp ah, 0
  3525 00002C63 7404                <1> 	je optesttrue
  3526 00002C65 43                  <1> 	inc ebx
  3527 00002C66 46                  <1> 	inc esi
  3528 00002C67 EBEF                <1> 	jmp opretest
  3529                              <1> optesttrue:
  3530 00002C69 3C00                <1> 	cmp al, 0
  3531 00002C6B 7503                <1> 	jne optestfalse
  3532 00002C6D B001                <1> 	mov al, 1
  3533 00002C6F C3                  <1> 	ret
  3534                              <1> optestfalse:
  3535 00002C70 30C0                <1> 	xor al, al
  3536 00002C72 C3                  <1> 	ret
  3537                              <1> 
  3538                              <1> cndtest:			;si=user bx=prog cl=endchar returns 1 in al if true
  3539 00002C73 30C0                <1> 	xor al, al
  3540 00002C75 8A06                <1> cndretest:	mov al, [esi]
  3541 00002C77 8A23                <1> 	mov ah, [ebx]
  3542 00002C79 38CC                <1> 	cmp ah, cl
  3543 00002C7B 7408                <1> 	je cndtesttrue
  3544 00002C7D 38E0                <1> 	cmp al, ah
  3545 00002C7F 750B                <1> 	jne cndtestfalse
  3546 00002C81 43                  <1> 	inc ebx
  3547 00002C82 46                  <1> 	inc esi
  3548 00002C83 EBF0                <1> 	jmp cndretest
  3549                              <1> cndtesttrue:
  3550 00002C85 38C8                <1> 	cmp al, cl
  3551 00002C87 7506                <1> 	jne cndtestalmost
  3552 00002C89 B001                <1> 	mov al, 1
  3553 00002C8B C3                  <1> 	ret
  3554                              <1> cndtestfalse:
  3555 00002C8C 30C0                <1> 	xor al, al
  3556 00002C8E C3                  <1> 	ret
  3557                              <1> cndtestalmost:
  3558 00002C8F B002                <1> 	mov al, 2
  3559 00002C91 C3                  <1> 	ret
  3560                              <1> 	
  3561                              <1> array:				;arraystart in si, arrayend in bx, arrayseperator in cx
  3562                              <1> 		                ;ends if array seperator is found backwards after 0
  3563                              <1> 	arnxt:	      
  3564 00002C92 88E8                <1> 		mov al, ch
  3565 00002C94 88CC                <1> 		mov ah, cl        
  3566 00002C96 663906              <1> 		cmp [esi], ax
  3567 00002C99 744D                <1> 		je ardn
  3568 00002C9B 66390E              <1> 		cmp [esi], cx
  3569 00002C9E 7407                <1> 		je arfnd
  3570 00002CA0 46                  <1> 		inc esi
  3571 00002CA1 39DE                <1> 		cmp esi, ebx
  3572 00002CA3 7343                <1> 		jae ardn
  3573 00002CA5 EBEB                <1> 		jmp arnxt
  3574 00002CA7 81C602000000        <1> 	arfnd: add esi, 2
  3575 00002CAD 891D[E92C0000]      <1> 		mov [arbx], ebx
  3576 00002CB3 890D[ED2C0000]      <1> 		mov [arcx], ecx
  3577 00002CB9 E844F0FFFF          <1> 		call print
  3578 00002CBE 8935[EF2C0000]      <1> 		mov [arsi], esi
  3579 00002CC4 BE[7F830000]        <1> 		mov esi, line
  3580 00002CC9 E834F0FFFF          <1> 		call print
  3581 00002CCE 8B1D[E92C0000]      <1> 		mov ebx, [arbx]
  3582 00002CD4 668B0D[ED2C0000]    <1> 		mov cx, [arcx]
  3583 00002CDB 8B35[EF2C0000]      <1> 		mov esi, [arsi]
  3584 00002CE1 46                  <1> 		inc esi
  3585 00002CE2 39DE                <1> 		cmp esi, ebx
  3586 00002CE4 7302                <1> 		jae ardn
  3587 00002CE6 EBAA                <1> 		jmp arnxt
  3588 00002CE8 C3                  <1> 	ardn:	ret
  3589 00002CE9 00000000            <1> arbx:	dw 0,0
  3590 00002CED 0000                <1> arcx:	db 0,0
  3591 00002CEF 00000000            <1> arsi:	dw 0,0
  3592                              <1> 
  3593                              <1> clearbuffer:
  3594 00002CF3 BE[16C60000]        <1> 	mov esi, buf2
  3595 00002CF8 B030                <1> 	mov al, '0'
  3596 00002CFA 81FE[2AC60000]      <1> clearbuf: cmp esi, numbuf
  3597 00002D00 7305                <1> 	jae doneclearbuff
  3598 00002D02 8806                <1> 	mov [esi], al
  3599 00002D04 46                  <1> 	inc esi
  3600 00002D05 EBF3                <1> 	jmp clearbuf
  3601                              <1> doneclearbuff: 
  3602 00002D07 C3                  <1> 		ret
  3603                              <1> 
  3604                              <1> convert:
  3605 00002D08 4E                  <1> 	dec esi
  3606 00002D09 89F3                <1> 	mov ebx, esi		;place to convert into must be in esi, number to convert must be in ecx
  3607                              <1> .lp:
  3608 00002D0B 89DE                <1> 	mov esi, ebx
  3609 00002D0D 81EE09000000        <1> 	sub esi, 9
  3610 00002D13 81F900CA9A3B        <1> 	cmp ecx, 1000000000
  3611 00002D19 720A                <1> 	jb .8
  3612 00002D1B 81E900CA9A3B        <1> 	sub ecx, 1000000000
  3613 00002D21 FE06                <1> 	inc byte [esi]
  3614 00002D23 EBE6                <1> 	jmp .lp
  3615 00002D25 46                  <1> .8:	inc esi
  3616 00002D26 81F900E1F505        <1> 	cmp ecx, 100000000
  3617 00002D2C 720A                <1> 	jb .7
  3618 00002D2E 81E900E1F505        <1> 	sub ecx, 100000000
  3619 00002D34 FE06                <1> 	inc byte [esi]
  3620 00002D36 EBD3                <1> 	jmp .lp
  3621 00002D38 46                  <1> .7:	inc esi
  3622 00002D39 81F980969800        <1> 	cmp ecx, 10000000
  3623 00002D3F 720A                <1> 	jb .6
  3624 00002D41 81E980969800        <1> 	sub ecx, 10000000
  3625 00002D47 FE06                <1> 	inc byte [esi]
  3626 00002D49 EBC0                <1> 	jmp .lp
  3627 00002D4B 46                  <1> .6:	inc esi
  3628 00002D4C 81F940420F00        <1> 	cmp ecx, 1000000
  3629 00002D52 720A                <1> 	jb .5
  3630 00002D54 81E940420F00        <1> 	sub ecx, 1000000
  3631 00002D5A FE06                <1> 	inc byte [esi]
  3632 00002D5C EBAD                <1> 	jmp .lp
  3633 00002D5E 46                  <1> .5:	inc esi
  3634 00002D5F 81F9A0860100        <1> 	cmp ecx, 100000
  3635 00002D65 720A                <1> 	jb .4
  3636 00002D67 81E9A0860100        <1> 	sub ecx, 100000
  3637 00002D6D FE06                <1> 	inc byte [esi]
  3638 00002D6F EB9A                <1> 	jmp .lp
  3639 00002D71 46                  <1> .4:	inc esi
  3640 00002D72 81F910270000        <1> 	cmp ecx, 10000
  3641 00002D78 720A                <1> 	jb .3
  3642 00002D7A 81E910270000        <1> 	sub ecx, 10000
  3643 00002D80 FE06                <1> 	inc byte [esi]
  3644 00002D82 EB87                <1> 	jmp .lp
  3645 00002D84 46                  <1> .3:	inc esi
  3646 00002D85 81F9E8030000        <1> 	cmp ecx, 1000
  3647 00002D8B 720D                <1> 	jb .2
  3648 00002D8D 81E9E8030000        <1> 	sub ecx, 1000
  3649 00002D93 FE06                <1> 	inc byte [esi]
  3650 00002D95 E971FFFFFF          <1> 	jmp .lp
  3651 00002D9A 46                  <1> .2:	inc esi
  3652 00002D9B 81F964000000        <1> 	cmp ecx, 100
  3653 00002DA1 720D                <1> 	jb .1
  3654 00002DA3 81E964000000        <1> 	sub ecx, 100
  3655 00002DA9 FE06                <1> 	inc byte [esi]
  3656 00002DAB E95BFFFFFF          <1> 	jmp .lp
  3657 00002DB0 46                  <1> .1:	inc esi
  3658 00002DB1 81F90A000000        <1> 	cmp ecx, 10
  3659 00002DB7 720D                <1> 	jb .0
  3660 00002DB9 81E90A000000        <1> 	sub ecx, 10
  3661 00002DBF FE06                <1> 	inc byte [esi]
  3662 00002DC1 E945FFFFFF          <1> 	jmp .lp
  3663 00002DC6 46                  <1> .0:	inc esi
  3664 00002DC7 81F901000000        <1> 	cmp ecx, 1
  3665 00002DCD 720D                <1> 	jb .dn
  3666 00002DCF 81E901000000        <1> 	sub ecx, 1
  3667 00002DD5 FE06                <1> 	inc byte [esi]
  3668 00002DD7 E92FFFFFFF          <1> 	jmp .lp
  3669                              <1> .dn:
  3670 00002DDC C3                  <1> 	ret
  3671                              <1> 
  3672                              <1> 	
  3673                              <1> 
  3674 00002DDD 00<rept>            <1> hexnumber times 8 db 0
  3675 00002DE5 202000              <1> hexnumberend db "  ",0
  3676                              <1> 
  3677                              <1> converthex:
  3678                              <1> .clear:	;place to convert to in esi, end of buffer in edi number in ecx
  3679 00002DE8 56                  <1> 	push esi
  3680 00002DE9 B030                <1> 	mov al, "0"
  3681 00002DEB 39FE                <1> .clearlp: cmp esi, edi
  3682 00002DED 7305                <1> 	jae .doneclear
  3683 00002DEF 8806                <1> 	mov [esi], al
  3684 00002DF1 46                  <1> 	inc esi
  3685 00002DF2 EBF7                <1> 	jmp .clearlp
  3686                              <1> .doneclear:
  3687 00002DF4 81EE02000000        <1> 	sub esi, 2
  3688 00002DFA 89C8                <1> 	mov eax, ecx
  3689                              <1> .loop:
  3690 00002DFC 30FF                <1> 	xor bh, bh
  3691 00002DFE 88C3                <1> 	mov bl, al
  3692 00002E00 66C1E304            <1> 	shl bx, 4
  3693 00002E04 C0EB04              <1> 	shr bl, 4
  3694 00002E07 86DF                <1> 	xchg bl, bh ;they are backwards
  3695 00002E09 80C330              <1> 	add bl, 48
  3696 00002E0C 80FB39              <1> 	cmp bl, "9"
  3697 00002E0F 7609                <1> 	jbe .goodbl
  3698 00002E11 80EB30              <1> 	sub bl, 48
  3699 00002E14 80EB0A              <1> 	sub bl, 0xA
  3700 00002E17 80C341              <1> 	add bl, "A"
  3701                              <1> .goodbl:
  3702 00002E1A 80C730              <1> 	add bh, 48
  3703 00002E1D 80FF39              <1> 	cmp bh, "9"
  3704 00002E20 7609                <1> 	jbe .goodbh
  3705 00002E22 80EF30              <1> 	sub bh, 48
  3706 00002E25 80EF0A              <1> 	sub bh, 0xA
  3707 00002E28 80C741              <1> 	add bh, "A"
  3708                              <1> .goodbh:
  3709 00002E2B C1E808              <1> 	shr eax, 8
  3710 00002E2E 66891E              <1> 	mov [esi], bx
  3711 00002E31 81EE02000000        <1> 	sub esi, 2
  3712 00002E37 3B3424              <1> 	cmp esi, [esp]
  3713 00002E3A 7207                <1> 	jb .done
  3714 00002E3C 3D00000000          <1> 	cmp eax, 0
  3715 00002E41 75B9                <1> 	jne .loop
  3716                              <1> .done:
  3717 00002E43 5E                  <1> 	pop esi
  3718 00002E44 C3                  <1> 	ret
  3719                              <1> 	
  3720                              <1> 	
  3721 00002E45 00                  <1> smallhex db 0
  3722 00002E46 01                  <1> firsthexshown db 1
  3723                              <1> showhexsmall:
  3724 00002E47 C605[452E0000]01    <1> 	mov byte [smallhex], 1
  3725 00002E4E E808000000          <1> 	call showhex
  3726 00002E53 C605[452E0000]00    <1> 	mov byte [smallhex], 0
  3727 00002E5A C3                  <1> 	ret
  3728                              <1> showhex:
  3729 00002E5B 60                  <1> 	pusha
  3730 00002E5C BE[DD2D0000]        <1> 	mov esi, hexnumber
  3731 00002E61 BF[E52D0000]        <1> 	mov edi, hexnumberend
  3732 00002E66 E87DFFFFFF          <1> 	call converthex
  3733 00002E6B 803D[462E0000]01    <1> 	cmp byte [firsthexshown], 1
  3734 00002E72 7503                <1> 	jne .show
  3735 00002E74 6631D2              <1> 	xor dx, dx
  3736                              <1> .show:
  3737 00002E77 803D[462E0000]03    <1> 	cmp byte [firsthexshown], 3
  3738 00002E7E 750A                <1> 	jne .nonewhexline
  3739 00002E80 BE[7F830000]        <1> 	mov esi, line
  3740 00002E85 E878EEFFFF          <1> 	call print
  3741                              <1> .nonewhexline:
  3742 00002E8A 803D[462E0000]04    <1> 	cmp byte [firsthexshown], 4
  3743 00002E91 7527                <1> 	jne .notab
  3744 00002E93 B1A0                <1> 	mov cl, 160
  3745 00002E95 28D1                <1> 	sub cl, dl
  3746 00002E97 C0E905              <1> 	shr cl, 5
  3747 00002E9A C0E105              <1> 	shl cl, 5
  3748 00002E9D 80F900              <1> 	cmp cl, 0
  3749 00002EA0 750F                <1> 	jne .nonewline
  3750 00002EA2 BE[7F830000]        <1> 	mov esi, line
  3751 00002EA7 E856EEFFFF          <1> 	call print
  3752 00002EAC E909000000          <1> 	jmp .notab
  3753                              <1> .nonewline:
  3754 00002EB1 80C20F              <1> 	add dl, 15
  3755 00002EB4 C0EA04              <1> 	shr dl, 4
  3756 00002EB7 C0E204              <1> 	shl dl, 4
  3757                              <1> .notab:
  3758 00002EBA BE[DD2D0000]        <1> 	mov esi, hexnumber
  3759 00002EBF 803D[452E0000]01    <1> 	cmp byte [smallhex],1
  3760 00002EC6 7506                <1> 	jne .nosmall
  3761 00002EC8 81C606000000        <1> 	add esi, 6
  3762                              <1> .nosmall:
  3763 00002ECE 803D[462E0000]05    <1> 	cmp byte [firsthexshown], 5
  3764 00002ED5 750A                <1> 	jne .noquiet
  3765 00002ED7 E814EEFFFF          <1> 	call printquiet
  3766 00002EDC E918000000          <1> 	jmp .donequiet
  3767                              <1> .noquiet:
  3768 00002EE1 803D[462E0000]06    <1> 	cmp byte [firsthexshown], 6
  3769 00002EE8 750A                <1> 	jne .normal
  3770 00002EEA E8F5EDFFFF          <1> 	call printhighlight
  3771 00002EEF E905000000          <1> 	jmp .donequiet
  3772                              <1> .normal:
  3773 00002EF4 E809EEFFFF          <1> 	call print
  3774                              <1> .donequiet:
  3775 00002EF9 803D[462E0000]02    <1> 	cmp byte [firsthexshown], 2
  3776 00002F00 750A                <1> 	jne .shown
  3777 00002F02 BE[7F830000]        <1> 	mov esi, line
  3778 00002F07 E8F6EDFFFF          <1> 	call print
  3779                              <1> .shown:
  3780 00002F0C C605[462E0000]00    <1> 	mov byte [firsthexshown], 0
  3781 00002F13 61                  <1> 	popa
  3782 00002F14 C3                  <1> 	ret
  3783                              <1> 
  3784                              <1> 
  3785 00002F15 303030303030303030- <1> decnumber db "00000000000000"
  3786 00002F1E 3030303030          <1>
  3787 00002F23 2000                <1> decnumberend: db " ",0
  3788                              <1> 
  3789                              <1> showdec: ;;same as showhex, just uses decimal conversion
  3790 00002F25 60                  <1> 	pusha
  3791 00002F26 BF[152F0000]        <1> 	mov edi, decnumber
  3792 00002F2B BE[232F0000]        <1> 	mov esi, decnumberend
  3793                              <1> .clear:
  3794 00002F30 C60730              <1> 	mov byte [edi], '0'
  3795 00002F33 47                  <1> 	inc edi
  3796 00002F34 39F7                <1> 	cmp edi, esi
  3797 00002F36 72F8                <1> 	jb .clear
  3798 00002F38 BF[152F0000]        <1> 	mov edi, decnumber
  3799 00002F3D E8C6FDFFFF          <1> 	call convert
  3800 00002F42 803D[462E0000]01    <1> 	cmp byte [firsthexshown], 1
  3801 00002F49 7503                <1> 	jne .show
  3802 00002F4B 6631D2              <1> 	xor dx, dx
  3803                              <1> .show:
  3804 00002F4E 803D[462E0000]03    <1> 	cmp byte [firsthexshown], 3
  3805 00002F55 750A                <1> 	jne .nonewdecline
  3806 00002F57 BE[7F830000]        <1> 	mov esi, line
  3807 00002F5C E8A1EDFFFF          <1> 	call print
  3808                              <1> .nonewdecline:
  3809 00002F61 803D[462E0000]04    <1> 	cmp byte [firsthexshown], 4
  3810 00002F68 7527                <1> 	jne .notab
  3811 00002F6A B1A0                <1> 	mov cl, 160
  3812 00002F6C 28D1                <1> 	sub cl, dl
  3813 00002F6E C0E905              <1> 	shr cl, 5
  3814 00002F71 C0E105              <1> 	shl cl, 5
  3815 00002F74 80F900              <1> 	cmp cl, 0
  3816 00002F77 750F                <1> 	jne .nonewline
  3817 00002F79 BE[7F830000]        <1> 	mov esi, line
  3818 00002F7E E87FEDFFFF          <1> 	call print
  3819 00002F83 E909000000          <1> 	jmp .notab
  3820                              <1> .nonewline:
  3821 00002F88 80C20F              <1> 	add dl, 15
  3822 00002F8B C0EA04              <1> 	shr dl, 4
  3823 00002F8E C0E204              <1> 	shl dl, 4
  3824                              <1> .notab:
  3825 00002F91 BE[152F0000]        <1> 	mov esi, decnumber
  3826 00002F96 4E                  <1> 	dec esi
  3827                              <1> .sifind:
  3828 00002F97 46                  <1> 	inc esi
  3829 00002F98 803E30              <1> 	cmp byte [esi], '0'
  3830 00002F9B 74FA                <1> 	je .sifind
  3831 00002F9D E860EDFFFF          <1> 	call print
  3832 00002FA2 803D[462E0000]02    <1> 	cmp byte [firsthexshown], 2
  3833 00002FA9 750A                <1> 	jne .shown
  3834 00002FAB BE[7F830000]        <1> 	mov esi, line
  3835 00002FB0 E84DEDFFFF          <1> 	call print
  3836                              <1> .shown:
  3837 00002FB5 C605[462E0000]00    <1> 	mov byte [firsthexshown], 0
  3838 00002FBC 61                  <1> 	popa
  3839 00002FBD C3                  <1> 	ret
  3840                              <1> 	
  3841                              <1> cnvrthextxt:
  3842 00002FBE 31C9                <1> 	xor ecx, ecx
  3843 00002FC0 31C0                <1> 	xor eax, eax
  3844 00002FC2 31D2                <1> 	xor edx, edx
  3845 00002FC4 31DB                <1> 	xor ebx, ebx
  3846 00002FC6 4E                  <1> 	dec esi
  3847                              <1> .end:
  3848 00002FC7 46                  <1> 	inc esi
  3849 00002FC8 8A06                <1> 	mov al, [esi]
  3850 00002FCA 3C00                <1> 	cmp al, 0
  3851 00002FCC 75F9                <1> 	jne .end
  3852                              <1> .loop:
  3853 00002FCE 4E                  <1> 	dec esi
  3854 00002FCF 8A06                <1> 	mov al, [esi]
  3855 00002FD1 3C41                <1> 	cmp al, "A"
  3856 00002FD3 7328                <1> 	jae .char
  3857 00002FD5 2C30                <1> 	sub al, 48
  3858 00002FD7 3C10                <1> 	cmp al, 16
  3859 00002FD9 7721                <1> 	ja .done
  3860                              <1> .donechar:
  3861 00002FDB 81FA00000000        <1> 	cmp edx, 0
  3862 00002FE1 740E                <1> 	je .noshl
  3863 00002FE3 89D3                <1> 	mov ebx, edx
  3864                              <1> .shl:
  3865 00002FE5 C1E004              <1> 	shl eax, 4
  3866 00002FE8 4B                  <1> 	dec ebx
  3867 00002FE9 81FB00000000        <1> 	cmp ebx, 0
  3868 00002FEF 75F4                <1> 	jne .shl
  3869                              <1> .noshl:
  3870 00002FF1 42                  <1> 	inc edx
  3871 00002FF2 01C1                <1> 	add ecx, eax
  3872 00002FF4 81FA08000000        <1> 	cmp edx, 8
  3873 00002FFA 72D2                <1> 	jb .loop
  3874                              <1> .done:
  3875 00002FFC C3                  <1> 	ret
  3876                              <1> .char:
  3877 00002FFD 3C46                <1> 	cmp al, "F"
  3878 00002FFF 77FB                <1> 	ja .done
  3879 00003001 2C41                <1> 	sub al, "A"
  3880 00003003 040A                <1> 	add al, 0xA
  3881 00003005 EBD4                <1> 	jmp .donechar
  3882                              <1> 	
  3883                              <1> 	
  3884                              <1> cnvrttxt: ;text to convert in esi, first part or 0 in edi
  3885 00003007 31C9                <1> 	xor ecx, ecx
  3886 00003009 31C0                <1> 	xor eax, eax
  3887 0000300B 31D2                <1> 	xor edx, edx
  3888 0000300D 31DB                <1> 	xor ebx, ebx
  3889 0000300F 4E                  <1> 	dec esi
  3890                              <1> .lp:
  3891 00003010 46                  <1> 	inc esi
  3892 00003011 8A06                <1> 	mov al, [esi]
  3893 00003013 3C00                <1> 	cmp al, 0
  3894 00003015 75F9                <1> 	jne .lp
  3895 00003017 4E                  <1> 	dec esi
  3896 00003018 8A06                <1> 	mov al, [esi]
  3897 0000301A 3C2E                <1> 	cmp al, '.'
  3898 0000301C 7503                <1> 	jne .dot
  3899 0000301E 46                  <1> 	inc esi
  3900 0000301F EBEF                <1> 	jmp .lp
  3901                              <1> .dot:
  3902 00003021 3C20                <1> 	cmp al, ' '
  3903 00003023 7404                <1> 	je .zero
  3904 00003025 3C30                <1> 	cmp al, '0'
  3905 00003027 7504                <1> 	jne .txtlp
  3906                              <1> .zero: 
  3907 00003029 39FE                <1> 		cmp esi, edi
  3908 0000302B 7458                <1> 		je .done
  3909                              <1> .txtlp:
  3910 0000302D 31C0                <1> 	xor eax, eax
  3911 0000302F 8A06                <1> 	mov al, [esi]
  3912 00003031 3C3D                <1> 	cmp al, '='
  3913 00003033 7450                <1> 	je .done
  3914 00003035 3C30                <1> 	cmp al, 48
  3915 00003037 724C                <1> 	jb .done
  3916 00003039 3C23                <1> 	cmp al, '#'
  3917 0000303B 7448                <1> 	je .done
  3918 0000303D 39FE                <1> 	cmp esi, edi
  3919 0000303F 7244                <1> 	jb .done
  3920 00003041 81F900000000        <1> 	cmp ecx, 0
  3921 00003047 7708                <1> 	ja .exp
  3922 00003049 2C30                <1> .noexp:	sub al, 48
  3923 0000304B 01C2                <1> 	add edx, eax
  3924 0000304D 4E                  <1> 	dec esi
  3925 0000304E 41                  <1> 	inc ecx
  3926 0000304F EBDC                <1> 	jmp .txtlp
  3927 00003051 81F900000000        <1> .exp:	cmp ecx, 0
  3928 00003057 74F0                <1> 	je .noexp
  3929 00003059 2C30                <1> 	sub al, 48
  3930 0000305B 51                  <1> 	push ecx
  3931 0000305C 89C3                <1> .expmul:	mov ebx, eax
  3932 0000305E 01D8                <1> 	add eax, ebx
  3933 00003060 01D8                <1> 	add eax, ebx
  3934 00003062 01D8                <1> 	add eax, ebx
  3935 00003064 01D8                <1> 	add eax, ebx
  3936 00003066 01D8                <1> 	add eax, ebx
  3937 00003068 01D8                <1> 	add eax, ebx
  3938 0000306A 01D8                <1> 	add eax, ebx
  3939 0000306C 01D8                <1> 	add eax, ebx
  3940 0000306E 01D8                <1> 	add eax, ebx
  3941 00003070 81E901000000        <1> 	sub ecx, 1
  3942 00003076 81F900000000        <1> 	cmp ecx, 0
  3943 0000307C 77DE                <1> 	ja .expmul
  3944 0000307E 01C2                <1> 	add edx, eax
  3945 00003080 59                  <1> 	pop ecx
  3946 00003081 4E                  <1> 	dec esi
  3947 00003082 41                  <1> 	inc ecx
  3948 00003083 EBA8                <1> 	jmp .txtlp
  3949 00003085 89D1                <1> .done: mov ecx, edx
  3950 00003087 C3                  <1> 	ret
  3951                                      %include "source/programs.asm"
  3952 00003088 FF2C                <1> filetypes db 255,44
  3953                              <1> progstart:		;programs start here
  3954                              <1> indexfiles:
  3955 0000308A BE[8A300000]        <1> 	mov esi, progstart
  3956 0000308F BB[96A70000]        <1> 	mov ebx, fileindex
  3957 00003094 BF[8A300000]        <1> 	mov edi, progstart
  3958 00003099 81EF02000000        <1> 	sub edi, 2
  3959                              <1> indexloop:
  3960 0000309F 668B0E              <1> 	mov cx, [esi]
  3961                              <1> 	indexloop2:
  3962 000030A2 663B0F              <1> 		cmp cx, [edi]
  3963 000030A5 7424                <1> 		je indexloop2done
  3964 000030A7 81EF02000000        <1> 		sub edi, 2
  3965 000030AD 81FF[88300000]      <1> 		cmp edi, filetypes
  3966 000030B3 73ED                <1> 		jae indexloop2
  3967 000030B5 BF[8A300000]        <1> 	mov edi, progstart
  3968 000030BA 81EF02000000        <1> 	sub edi, 2
  3969 000030C0 46                  <1> 	inc esi
  3970 000030C1 81FE[FE4F0000]      <1> 	cmp esi, batchprogend
  3971 000030C7 734E                <1> 	jae indexloopdone
  3972 000030C9 EBD4                <1> 	jmp indexloop
  3973                              <1> indexloop2done:
  3974 000030CB 66890B              <1> 	mov [ebx], cx
  3975 000030CE 81C302000000        <1> 	add ebx, 2
  3976 000030D4 81C602000000        <1> 	add esi, 2
  3977                              <1> 	nameindex:
  3978 000030DA 8A0E                <1> 		mov cl, [esi]
  3979 000030DC 80F900              <1> 		cmp cl, 0
  3980 000030DF 7406                <1> 		je nameindexdone
  3981 000030E1 880B                <1> 		mov [ebx], cl
  3982 000030E3 46                  <1> 		inc esi
  3983 000030E4 43                  <1> 		inc ebx
  3984 000030E5 EBF3                <1> 		jmp nameindex
  3985                              <1> 	nameindexdone:
  3986 000030E7 43                  <1> 		inc ebx
  3987 000030E8 66C7030000          <1> 		mov word [ebx], 0
  3988 000030ED 81C302000000        <1> 		add ebx, 2
  3989 000030F3 46                  <1> 		inc esi
  3990 000030F4 8933                <1> 		mov [ebx], esi
  3991 000030F6 81C304000000        <1> 		add ebx, 4
  3992 000030FC 66C7030000          <1> 		mov word [ebx], 0
  3993 00003101 81C302000000        <1> 		add ebx, 2
  3994 00003107 81FB[96AB0000]      <1> 		cmp ebx, fileindexend
  3995 0000310D 7308                <1> 		jae indexloopdone
  3996 0000310F 81C601000000        <1> 		add esi, 1
  3997 00003115 EB88                <1> 		jmp indexloop
  3998 00003117 C605[1F310000]01    <1> indexloopdone: 	mov byte [indexdone], 1
  3999 0000311E C3                  <1> 		ret
  4000                              <1> 
  4001 0000311F 00                  <1> indexdone db 0
  4002                              <1> %include 'source/programs/_comment.asm' ;#
  4003 00003120 FF2C2300            <2> 	db 255,44,"#",0	;this lets you rem stuff
  4004 00003124 C3                  <2> 	ret 
  4005                              <1> %include 'source/programs/_math.asm' ;!
  4006 00003125 FF2C2100            <2> db 255,44,"!",0
  4007                              <2> 	num:	
  4008 00003129 E8C5FBFFFF          <2> 		call clearbuffer
  4009 0000312E C605[AF330000]00    <2> 		mov byte [decimal], 0
  4010 00003135 C605[B0330000]00    <2> 		mov byte [decimal2], 0
  4011 0000313C 8B35[342C0000]      <2> 		mov esi, [currentcommandloc]
  4012 00003142 31C0                <2> 		xor eax, eax
  4013 00003144 31C9                <2> 		xor ecx, ecx
  4014 00003146 31DB                <2> 		xor ebx, ebx
  4015 00003148 8A06                <2> 	num2:	mov al, [esi]
  4016 0000314A 3C2B                <2> 		cmp al, '+'
  4017 0000314C 741B                <2> 		je operatorfound
  4018 0000314E 3C2D                <2> 		cmp al, '-'
  4019 00003150 7417                <2> 		je operatorfound
  4020 00003152 3C2A                <2> 		cmp al, '*'
  4021 00003154 7413                <2> 		je operatorfound
  4022 00003156 3C2F                <2> 		cmp al, '/'
  4023 00003158 740F                <2> 		je operatorfound
  4024 0000315A 3C5E                <2> 		cmp al, '^'
  4025 0000315C 740B                <2> 		je operatorfound
  4026 0000315E 46                  <2> 		inc esi
  4027 0000315F 3C00                <2> 		cmp al, 0
  4028 00003161 0F841AF8FFFF        <2> 		je near nwcmd
  4029 00003167 EBDF                <2> 		jmp num2
  4030 00003169 50                  <2> 	operatorfound: push eax
  4031 0000316A 30E4                <2> 		xor ah, ah
  4032 0000316C 8826                <2> 		mov [esi], ah
  4033 0000316E 89F7                <2> 		mov edi, esi
  4034 00003170 46                  <2> 		inc esi
  4035 00003171 8A06                <2> 		mov al, [esi]
  4036 00003173 3C25                <2> 		cmp al, '%'
  4037 00003175 0F8462000000        <2> 		je near resultnum1
  4038                              <2> 	varnum2: 
  4039 0000317B 57                  <2> 		push edi
  4040 0000317C E8A4000000          <2> 		call checkdecimal
  4041 00003181 5F                  <2> 		pop edi
  4042 00003182 E880FEFFFF          <2> 		call cnvrttxt
  4043                              <2> 	vrnm2:
  4044 00003187 89CB                <2> 		mov ebx, ecx
  4045 00003189 53                  <2> 		push ebx
  4046 0000318A E864FBFFFF          <2> 		call clearbuffer
  4047 0000318F 8B35[342C0000]      <2> 		mov esi, [currentcommandloc]
  4048 00003195 89F7                <2> 		mov edi, esi
  4049 00003197 46                  <2> 		inc esi
  4050 00003198 8A06                <2> 		mov al, [esi]
  4051 0000319A 3C25                <2> 		cmp al, '%'
  4052 0000319C 0F844F000000        <2> 		je near resultnum2
  4053                              <2> 	varnum4: 
  4054 000031A2 57                  <2> 		push edi
  4055 000031A3 E869000000          <2> 		call checkdecimal2
  4056 000031A8 5F                  <2> 		pop edi
  4057 000031A9 E859FEFFFF          <2> 		call cnvrttxt
  4058                              <2> 	vrnm4:
  4059 000031AE 5B                  <2> 		pop ebx
  4060 000031AF 58                  <2> 		pop eax
  4061 000031B0 3C2B                <2> 		cmp al, '+'
  4062 000031B2 0F849B000000        <2> 		je near plusnum
  4063 000031B8 3C2D                <2> 		cmp al, '-'
  4064 000031BA 0F849F000000        <2> 		je near subnum
  4065 000031C0 3C2A                <2> 		cmp al, '*'
  4066 000031C2 0F84A3000000        <2> 		je near mulnum
  4067 000031C8 3C2F                <2> 		cmp al, '/'
  4068 000031CA 0F84B1000000        <2> 		je near divnum
  4069 000031D0 3C5E                <2> 		cmp al, '^'
  4070 000031D2 0F84CE000000        <2> 		je near expnum
  4071 000031D8 E9A4F7FFFF          <2> 		jmp nwcmd
  4072                              <2> 	resultnum1:
  4073 000031DD 8A0D[B1330000]      <2> 		mov cl, [decimalresult]
  4074 000031E3 880D[AF330000]      <2> 		mov [decimal], cl
  4075 000031E9 8B0D[B2330000]      <2> 		mov ecx, [result]
  4076 000031EF EB96                <2> 		jmp vrnm2
  4077                              <2> 	resultnum2:
  4078 000031F1 8A0D[AF330000]      <2> 		mov cl, [decimal]
  4079 000031F7 880D[B0330000]      <2> 		mov [decimal2], cl
  4080 000031FD 8A0D[B1330000]      <2> 		mov cl, [decimalresult]
  4081 00003203 880D[AF330000]      <2> 		mov [decimal], cl
  4082 00003209 8B0D[B2330000]      <2> 		mov ecx, [result]
  4083 0000320F EB9D                <2> 		jmp vrnm4
  4084                              <2> 	checkdecimal2:
  4085 00003211 8A25[AF330000]      <2> 		mov ah, [decimal]
  4086 00003217 8825[B0330000]      <2> 		mov [decimal2], ah
  4087 0000321D 30E4                <2> 		xor ah, ah
  4088 0000321F 8825[AF330000]      <2> 		mov [decimal], ah
  4089                              <2> 	checkdecimal:
  4090 00003225 89F7                <2> 		mov edi, esi
  4091                              <2> 	chkdec1:
  4092 00003227 8A07                <2> 		mov al, [edi]
  4093 00003229 3C2E                <2> 		cmp al, '.'
  4094 0000322B 0F840B000000        <2> 		je near fnddec
  4095 00003231 3C00                <2> 		cmp al, 0
  4096 00003233 0F8419000000        <2> 		je near nodecimal
  4097 00003239 47                  <2> 		inc edi
  4098 0000323A EBEB                <2> 		jmp chkdec1
  4099                              <2> 	fnddec:
  4100 0000323C 8A4701              <2> 		mov al, [edi + 1]
  4101 0000323F 8807                <2> 		mov [edi], al
  4102 00003241 3C00                <2> 		cmp al, 0
  4103 00003243 0F8409000000        <2> 		je near nodecimal
  4104 00003249 FE05[AF330000]      <2> 		inc byte [decimal]
  4105 0000324F 47                  <2> 		inc edi
  4106 00003250 EBEA                <2> 		jmp fnddec
  4107                              <2> 	nodecimal:
  4108 00003252 C3                  <2> 		ret
  4109                              <2> 	plusnum:
  4110 00003253 E815010000          <2> 		call decaddfix
  4111 00003258 01D9                <2> 		add ecx, ebx
  4112 0000325A E98A000000          <2> 		jmp retnum
  4113                              <2> 	subnum:
  4114 0000325F E809010000          <2> 		call decaddfix
  4115 00003264 29D9                <2> 		sub ecx, ebx
  4116 00003266 E97E000000          <2> 		jmp retnum
  4117                              <2> 	mulnum:
  4118 0000326B A0[B0330000]        <2> 		mov al, [decimal2]
  4119 00003270 0005[AF330000]      <2> 		add [decimal], al
  4120 00003276 89C8                <2> 		mov eax, ecx
  4121 00003278 F7E3                <2> 		mul ebx
  4122 0000327A 89C1                <2> 		mov ecx, eax
  4123 0000327C E968000000          <2> 		jmp retnum
  4124                              <2> 	divnum:
  4125 00003281 E8E7000000          <2> 		call decaddfix
  4126 00003286 30C0                <2> 		xor al, al
  4127 00003288 A2[AF330000]        <2> 		mov [decimal], al
  4128 0000328D 31D2                <2> 		xor edx, edx
  4129 0000328F 89C8                <2> 		mov eax, ecx
  4130 00003291 81FB00000000        <2> 		cmp ebx, 0
  4131 00003297 0F844C000000        <2> 		je near retnum
  4132 0000329D F7F3                <2> 		div ebx
  4133 0000329F 89C1                <2> 		mov ecx, eax
  4134 000032A1 E943000000          <2> 		jmp retnum
  4135                              <2> 	expnum:
  4136 000032A6 8A15[AF330000]      <2> 		mov dl, [decimal]
  4137 000032AC 8815[B0330000]      <2> 		mov [decimal2], dl
  4138 000032B2 31D2                <2> 		xor edx, edx
  4139 000032B4 89C8                <2> 		mov eax, ecx
  4140 000032B6 89D9                <2> 		mov ecx, ebx
  4141 000032B8 89C3                <2> 		mov ebx, eax
  4142 000032BA 81F900000000        <2> 		cmp ecx, 0
  4143 000032C0 7422                <2> 		je noexpnum
  4144 000032C2 49                  <2> 		dec ecx
  4145 000032C3 81F900000000        <2> 		cmp ecx, 0
  4146 000032C9 7412                <2> 		je noexpnumlp
  4147 000032CB F7E3                <2> 	expnumlp: mul ebx
  4148 000032CD 8A15[B0330000]      <2> 		mov dl, [decimal2]
  4149 000032D3 0015[AF330000]      <2> 		add [decimal], dl
  4150 000032D9 31D2                <2> 		xor edx, edx
  4151 000032DB E2EE                <2> 		loop expnumlp
  4152                              <2> 	noexpnumlp:
  4153 000032DD 89C1                <2> 		mov ecx, eax
  4154 000032DF E905000000          <2> 		jmp retnum
  4155                              <2> 	noexpnum:
  4156 000032E4 B901000000          <2> 		mov ecx, 1
  4157                              <2> 	retnum: 
  4158 000032E9 BE[2AC60000]        <2> 		mov esi, numbuf
  4159 000032EE 890D[B2330000]      <2> 		mov [result], ecx
  4160 000032F4 E80FFAFFFF          <2> 		call convert
  4161 000032F9 BE[2AC60000]        <2> 		mov esi, numbuf
  4162 000032FE 8A25[AF330000]      <2> 		mov ah, [decimal]
  4163 00003304 8825[B1330000]      <2> 		mov [decimalresult], ah
  4164 0000330A 80FC00              <2> 		cmp ah, 0
  4165 0000330D 0F8425000000        <2> 		je near noputdecimal
  4166                              <2> 	putdecimal:
  4167 00003313 4E                  <2> 		dec esi
  4168 00003314 FECC                <2> 		dec ah
  4169 00003316 80FC00              <2> 		cmp ah, 0
  4170 00003319 0F87F4FFFFFF        <2> 		ja near putdecimal
  4171 0000331F 4E                  <2> 		dec esi
  4172 00003320 8A06                <2> 		mov al, [esi]
  4173 00003322 C6062E              <2> 		mov byte [esi], '.'
  4174                              <2> 	decputloop:
  4175 00003325 4E                  <2> 		dec esi
  4176 00003326 8A26                <2> 		mov ah, [esi]
  4177 00003328 8806                <2> 		mov [esi], al
  4178 0000332A 88E0                <2> 		mov al, ah
  4179 0000332C 81FE[16C60000]      <2> 		cmp esi, buf2
  4180 00003332 0F87EDFFFFFF        <2> 		ja near decputloop
  4181                              <2> 	noputdecimal:
  4182 00003338 BE[16C60000]        <2> 		mov esi, buf2
  4183 0000333D E809000000          <2> 		call chkadd
  4184 00003342 E93AF6FFFF          <2> 		jmp nwcmd
  4185 00003347 00000000            <2> edxnumbuf dw 0,0
  4186 0000334B 8A06                <2> 	chkadd: mov al, [esi]
  4187 0000334D 3C30                <2> 		cmp al, '0'
  4188 0000334F 750C                <2> 		jne dnadd
  4189 00003351 46                  <2> 		inc esi
  4190 00003352 81FE[2AC60000]      <2> 		cmp esi, numbuf
  4191 00003358 7402                <2> 		je dnaddm1
  4192 0000335A EBEF                <2> 		jmp chkadd
  4193 0000335C 4E                  <2> 	dnaddm1: dec esi
  4194 0000335D E8A0E9FFFF          <2> 	dnadd:	call print
  4195 00003362 BE[7F830000]        <2> 		mov esi, line
  4196 00003367 E896E9FFFF          <2> 		call print
  4197 0000336C C3                  <2> 		ret
  4198                              <2> 		
  4199                              <2> 	decaddfix:
  4200 0000336D A0[B0330000]        <2> 		mov al, [decimal2]
  4201 00003372 8A25[AF330000]      <2> 		mov ah, [decimal]
  4202 00003378 38E0                <2> 		cmp al, ah
  4203 0000337A 7432                <2> 		je gooddecadd
  4204 0000337C 38E0                <2> 		cmp al, ah
  4205 0000337E 721A                <2> 		jb lowdecadd
  4206                              <2> 	highdecadd:
  4207 00003380 FEC4                <2> 		inc ah
  4208 00003382 89CA                <2> 		mov edx, ecx
  4209 00003384 C1E103              <2> 		shl ecx, 3
  4210 00003387 01D1                <2> 		add ecx, edx
  4211 00003389 01D1                <2> 		add ecx, edx
  4212 0000338B 38E0                <2> 		cmp al, ah
  4213 0000338D 77F1                <2> 		ja highdecadd
  4214 0000338F 8825[AF330000]      <2> 		mov [decimal], ah
  4215 00003395 E914000000          <2> 		jmp gooddecadd
  4216                              <2> 	lowdecadd:
  4217 0000339A FEC0                <2> 		inc al
  4218 0000339C 89DA                <2> 		mov edx, ebx
  4219 0000339E C1E303              <2> 		shl ebx, 3
  4220 000033A1 01D3                <2> 		add ebx, edx
  4221 000033A3 01D3                <2> 		add ebx, edx
  4222 000033A5 38E0                <2> 		cmp al, ah
  4223 000033A7 72F1                <2> 		jb lowdecadd
  4224 000033A9 A2[AF330000]        <2> 		mov [decimal], al
  4225                              <2> 	gooddecadd:
  4226 000033AE C3                  <2> 		ret
  4227                              <2> 		
  4228 000033AF 00                  <2> decimal db 0
  4229 000033B0 00                  <2> decimal2 db 0
  4230 000033B1 00                  <2> decimalresult db 0
  4231 000033B2 00000000            <2> result dd 0
  4232                              <1> %include 'source/programs/_variables.asm' ;% and $
  4233 000033B6 FF2C2500            <2> db 255,44,"%",0
  4234                              <2> 	ans:
  4235 000033BA BE[16C60000]        <2> 		mov esi, buf2
  4236 000033BF E887FFFFFF          <2> 		call chkadd
  4237 000033C4 C3                  <2> 		ret
  4238                              <2> 		
  4239 000033C5 FF2C2400            <2> db 255,44,"$",0
  4240 000033C9 8B35[342C0000]      <2> var: mov esi, [currentcommandloc]
  4241 000033CF BB[16AE0000]        <2> 	mov ebx, variables
  4242 000033D4 8A06                <2> lkeq:	mov al, [esi]
  4243 000033D6 3C3D                <2> 	cmp al, '='
  4244 000033D8 741B                <2> 	je eqfnd	;is there an '=' sign?
  4245 000033DA 3C00                <2> 	cmp al, 0
  4246 000033DC 7403                <2> 	je echovars
  4247 000033DE 46                  <2> 	inc esi
  4248 000033DF EBF3                <2> 	jmp lkeq
  4249 000033E1 BE[16AE0000]        <2> echovars: mov esi, variables
  4250 000033E6 BB[16BE0000]        <2> 	mov ebx, varend
  4251 000033EB B105                <2> 	mov cl, 5
  4252 000033ED B504                <2> 	mov ch, 4
  4253 000033EF E89EF8FFFF          <2> 	call array
  4254 000033F4 C3                  <2> 	ret
  4255 000033F5 46                  <2> eqfnd:	inc esi
  4256 000033F6 8A06                <2> 	mov al, [esi]
  4257 000033F8 3C00                <2> 	cmp al, 0
  4258 000033FA 7410                <2> 	je readvar
  4259 000033FC 8B35[342C0000]      <2> 	mov esi, [currentcommandloc]
  4260 00003402 BB[16AE0000]        <2> 	mov ebx, variables
  4261 00003407 E919000000          <2> 	jmp seek
  4262                              <2> readvar:
  4263 0000340C B00A                <2> 	mov al, 10
  4264 0000340E 66BB0700            <2> 	mov bx, 7
  4265 00003412 C605[AC210000]00    <2> 	mov byte [commandedit], 0
  4266 00003419 BF[16C60000]        <2> 	mov edi, buftxtend
  4267 0000341E E8C7E9FFFF          <2> 	call rdprint
  4268 00003423 EBA4                <2> 	jmp var
  4269 00003425 668B03              <2> seek:	mov ax, [ebx]
  4270 00003428 B105                <2> 	mov cl, 5
  4271 0000342A B504                <2> 	mov ch, 4
  4272 0000342C 663D0000            <2> 	cmp ax, 0
  4273 00003430 0F845B000000        <2> 	je near save
  4274 00003436 6639C8              <2> 	cmp ax, cx
  4275 00003439 7403                <2> 	je skfnd
  4276 0000343B 43                  <2> 	inc ebx
  4277 0000343C EBE7                <2> 	jmp seek
  4278 0000343E 8B35[342C0000]      <2> skfnd:	mov esi, [currentcommandloc]
  4279 00003444 46                  <2> 	inc esi
  4280 00003445 81C302000000        <2> 	add ebx, 2
  4281 0000344B 89DF                <2> 	mov edi, ebx
  4282 0000344D B13D                <2> 	mov cl, '='
  4283 0000344F E81FF8FFFF          <2> 	call cndtest
  4284 00003454 3C01                <2> 	cmp al, 1	
  4285 00003456 7418                <2> 	je varfnd
  4286 00003458 89FB                <2> 	mov ebx, edi
  4287 0000345A 8B35[342C0000]      <2> 	mov esi, [currentcommandloc]
  4288 00003460 668B03              <2> 	mov ax, [ebx]
  4289 00003463 663D0000            <2> 	cmp ax, 0
  4290 00003467 0F8424000000        <2> 	je near save
  4291 0000346D 43                  <2> 	inc ebx
  4292 0000346E EBB5                <2> 	jmp seek
  4293 00003470 8A03                <2> varfnd:	mov al, [ebx]
  4294 00003472 3C04                <2> 	cmp al, 4
  4295 00003474 7404                <2> 	je save2
  4296 00003476 4B                  <2> 	dec ebx
  4297 00003477 4E                  <2> 	dec esi
  4298 00003478 EBF6                <2> 	jmp varfnd
  4299 0000347A 4B                  <2> save2:	dec ebx
  4300 0000347B 4E                  <2> 	dec esi
  4301 0000347C 8A03                <2> 	mov al, [ebx]
  4302 0000347E 3C05                <2> 	cmp al, 5
  4303 00003480 7402                <2> 	je remove
  4304 00003482 EBEC                <2> 	jmp varfnd
  4305 00003484 8A03                <2> remove: mov al, [ebx]
  4306 00003486 3C00                <2> 	cmp al, 0
  4307 00003488 749B                <2> 	je seek
  4308 0000348A 30C0                <2> 	xor al, al
  4309 0000348C 8803                <2> 	mov [ebx], al
  4310 0000348E 43                  <2> 	inc ebx
  4311 0000348F EBF3                <2> 	jmp remove	;do not need for now-need defragmentation
  4312 00003491 8B35[342C0000]      <2> save:	mov esi, [currentcommandloc]
  4313 00003497 43                  <2> 	inc ebx
  4314 00003498 B005                <2> 	mov al, 5
  4315 0000349A B404                <2> 	mov ah, 4
  4316 0000349C 668903              <2> 	mov [ebx], ax
  4317 0000349F 43                  <2> 	inc ebx
  4318 000034A0 43                  <2> svhere:	inc ebx
  4319 000034A1 46                  <2> 	inc esi
  4320 000034A2 8A06                <2> 	mov al, [esi]
  4321 000034A4 3C00                <2> 	cmp al, 0
  4322 000034A6 0F844A000000        <2> 	je near svdone
  4323 000034AC 3C25                <2> 	cmp al, '%'
  4324 000034AE 7404                <2> 	je ans2
  4325 000034B0 8803                <2> 	mov [ebx], al	
  4326 000034B2 EBEC                <2> 	jmp svhere
  4327 000034B4 56                  <2> ans2:	push esi
  4328 000034B5 BE[16C60000]        <2> 	mov esi, buf2
  4329 000034BA E823000000          <2> 	call ansfnd
  4330 000034BF E803000000          <2> 	call anscp
  4331 000034C4 5E                  <2> 	pop esi
  4332 000034C5 EBD9                <2> 	jmp svhere
  4333 000034C7 8A06                <2> anscp:	mov al, [esi]
  4334 000034C9 8803                <2> 	mov [ebx], al
  4335 000034CB 81FE[2AC60000]      <2> 	cmp esi, numbuf
  4336 000034D1 74CD                <2> 	je svhere
  4337 000034D3 3C00                <2> 	cmp al, 0
  4338 000034D5 74C9                <2> 	je svhere
  4339 000034D7 43                  <2> 	inc ebx
  4340 000034D8 46                  <2> 	inc esi
  4341 000034D9 EBEC                <2> 	jmp anscp
  4342 000034DB 5E                  <2> ansnf:	pop esi
  4343 000034DC 8A06                <2> 	mov al, [esi]
  4344 000034DE 8803                <2> 	mov [ebx], al
  4345 000034E0 EBBE                <2> 	jmp svhere
  4346 000034E2 46                  <2> ansfnd:	inc esi
  4347 000034E3 81FE[29C60000]      <2> 	cmp esi, numbuf - 1
  4348 000034E9 740A                <2> 	je fndans
  4349 000034EB 8A06                <2> 	mov al, [esi]
  4350 000034ED 3C00                <2> 	cmp al, 0
  4351 000034EF 74EA                <2> 	je ansnf
  4352 000034F1 3C30                <2> 	cmp al, '0'
  4353 000034F3 74ED                <2> 	je ansfnd
  4354                              <2> fndans:
  4355 000034F5 C3                  <2> 	ret
  4356 000034F6 30C0                <2> svdone:	xor al, al
  4357 000034F8 8803                <2> 	mov [ebx], al
  4358 000034FA C3                  <2> 	ret
  4359                              <1> %include 'source/programs/_run.asm' ;./
  4360                              <2> 
  4361 000034FB 7F454C46            <2> 	elfstart db 0x7F,"ELF"
  4362 000034FF FF2C2E2F00          <2> 	db 255,44,"./",0
  4363                              <2> rundiskprog:
  4364 00003504 8B3D[342C0000]      <2> 	mov edi, [currentcommandloc]
  4365 0000350A 81C702000000        <2> 	add edi, 2
  4366 00003510 BE00004000          <2> 	mov esi, 0x400000
  4367 00003515 E8F62F0000          <2> 	call loadfile
  4368 0000351A 81FA94010000        <2> 	cmp edx, 404
  4369 00003520 746A                <2> 	je noprogfound
  4370 00003522 BB00004000          <2> 	mov ebx, 0x400000
  4371 00003527 A1[FB340000]        <2> 	mov eax, [elfstart]
  4372 0000352C 3903                <2> 	cmp [ebx], eax
  4373 0000352E 0F8437000000        <2> 	je near runelf
  4374 00003534 66813B4558          <2> 	cmp word [ebx], "EX"
  4375 00003539 7577                <2> 	jne progbatchfound
  4376 0000353B 81C302000000        <2> 	add ebx, 2
  4377 00003541 8B3D[342C0000]      <2> 	mov edi, [currentcommandloc]
  4378 00003547 81C702000000        <2> 	add edi, 2
  4379                              <2> findspaceprog:
  4380 0000354D 8A07                <2> 	mov al, [edi]
  4381 0000354F 47                  <2> 	inc edi
  4382 00003550 3C20                <2> 	cmp al, " "
  4383 00003552 75F9                <2> 	jne findspaceprog
  4384                              <2> findnonspaceprog:
  4385 00003554 8A07                <2> 	mov al, [edi]
  4386 00003556 47                  <2> 	inc edi
  4387 00003557 3C20                <2> 	cmp al, " "
  4388 00003559 74F9                <2> 	je findnonspaceprog
  4389 0000355B 4F                  <2> 	dec edi
  4390 0000355C 8925[96AB0000]      <2> 	mov [previousstack], esp
  4391 00003562 FFD3                <2> 	call ebx
  4392 00003564 8B25[96AB0000]      <2> 	mov esp, [previousstack]
  4393 0000356A C3                  <2> 	ret
  4394                              <2> runelf:
  4395 0000356B 8B3D[342C0000]      <2> 	mov edi, [currentcommandloc]
  4396 00003571 81C702000000        <2> 	add edi, 2
  4397 00003577 81C380000000        <2> 	add ebx, 0x80
  4398 0000357D 8925[96AB0000]      <2> 	mov [previousstack], esp
  4399 00003583 FFD3                <2> 	call ebx
  4400 00003585 8B25[96AB0000]      <2> 	mov esp, [previousstack]
  4401 0000358B C3                  <2> 	ret
  4402                              <2> noprogfound:
  4403 0000358C BE[46830000]        <2> 	mov esi, notfound1
  4404 00003591 E86CE7FFFF          <2> 	call print
  4405 00003596 8B35[342C0000]      <2> 	mov esi, [currentcommandloc]
  4406 0000359C 81C602000000        <2> 	add esi, 2
  4407 000035A2 E85BE7FFFF          <2> 	call print
  4408 000035A7 BE[4E830000]        <2> 	mov esi, notfound2
  4409 000035AC E851E7FFFF          <2> 	call print
  4410 000035B1 C3                  <2> 	ret
  4411                              <2> progbatchfound:
  4412 000035B2 BF00004000          <2> 		mov edi, 0x400000
  4413 000035B7 C605[10AE0000]01    <2> 		mov byte [BATCHISON], 1
  4414                              <2> 	batchrunloop:
  4415 000035BE E89BF3FFFF          <2> 		call buftxtclear
  4416 000035C3 BE[16C20000]        <2> 		mov esi, buftxt
  4417 000035C8 8935[342C0000]      <2> 		mov [currentcommandloc], esi
  4418                              <2> 	batchrunloop2:
  4419 000035CE B10A                <2> 		mov cl, 10
  4420 000035D0 B50D                <2> 		mov ch, 13
  4421 000035D2 380F                <2> 		cmp [edi], cl
  4422 000035D4 0F8419000000        <2> 		je near nxtbatchrunline
  4423 000035DA 382F                <2> 		cmp [edi], ch
  4424 000035DC 0F8411000000        <2> 		je near nxtbatchrunline
  4425 000035E2 803F00              <2> 		cmp byte [edi], 0
  4426 000035E5 0F8408000000        <2> 		je near nxtbatchrunline
  4427 000035EB 8A07                <2> 		mov al, [edi]
  4428 000035ED 8806                <2> 		mov [esi], al
  4429 000035EF 46                  <2> 		inc esi
  4430 000035F0 47                  <2> 		inc edi
  4431 000035F1 EBDB                <2> 		jmp batchrunloop2
  4432                              <2> 	nxtbatchrunline:
  4433 000035F3 47                  <2> 		inc edi
  4434 000035F4 380F                <2> 		cmp [edi], cl
  4435 000035F6 74FB                <2> 		je nxtbatchrunline
  4436 000035F8 382F                <2> 		cmp [edi], ch
  4437 000035FA 74F7                <2> 		je nxtbatchrunline
  4438 000035FC 893D[5A360000]      <2> 		mov [batchedi], edi
  4439 00003602 893D[0CAE0000]      <2> 		mov [BATCHPOS], edi
  4440 00003608 C60600              <2> 		mov byte [esi], 0
  4441 0000360B BE[16C20000]        <2> 		mov esi, buftxt
  4442 00003610 803E00              <2> 		cmp byte [esi], 0
  4443 00003613 0F8439000000        <2> 		je near nobatchfoundrun
  4444 00003619 31DB                <2> 		xor ebx, ebx
  4445 0000361B 8A1D[A7AD0000]      <2> 		mov bl, [IFON]
  4446 00003621 80FB00              <2> 		cmp bl, 0
  4447 00003624 0F8534000000        <2> 		jne near iftestbatch
  4448                              <2> 	doneiftest:
  4449 0000362A 803D[30370000]00    <2> 		cmp byte [runnextline], 0
  4450 00003631 0F8405000000        <2> 		je near noruniftest
  4451 00003637 E822F5FFFF          <2> 		call run
  4452                              <2> 	noruniftest:
  4453 0000363C C605[30370000]01    <2> 		mov byte [runnextline], 1
  4454 00003643 8B3D[5A360000]      <2> 		mov edi, [batchedi]
  4455 00003649 803F00              <2> 		cmp byte [edi], 0
  4456 0000364C 0F856CFFFFFF        <2> 		jne near batchrunloop
  4457                              <2> 	nobatchfoundrun:
  4458 00003652 C605[10AE0000]00    <2> 		mov byte [BATCHISON], 0
  4459 00003659 C3                  <2> 		ret
  4460                              <2> 	
  4461 0000365A 00000000            <2> batchedi dd 0	
  4462                              <2> 	
  4463                              <2> 	iftestbatch:
  4464 0000365E BE[A8AD0000]        <2> 		mov esi, IFTRUE
  4465 00003663 01DE                <2> 		add esi, ebx
  4466 00003665 803E00              <2> 		cmp byte [esi], 0
  4467 00003668 0F85BCFFFFFF        <2> 		jne near doneiftest
  4468 0000366E 881D[31370000]      <2> 		mov [iffalsebuf], bl
  4469 00003674 803D[11AE0000]01    <2> 		cmp byte [LOOPON], 1
  4470 0000367B 0F8513000000        <2> 		jne near fifindbatch
  4471 00003681 E938FFFFFF          <2> 		jmp batchrunloop
  4472                              <2> 	elsetestbatch:
  4473 00003686 C60601              <2> 		mov byte [esi], 1
  4474 00003689 81C705000000        <2> 		add edi, 5
  4475 0000368F E92AFFFFFF          <2> 		jmp batchrunloop
  4476                              <2> 	fifindbatch:
  4477 00003694 66B96966            <2> 		mov cx, "if"
  4478 00003698 66B86669            <2> 		mov ax, "fi"
  4479 0000369C 663907              <2> 		cmp [edi], ax
  4480 0000369F 0F8424000000        <2> 		je near fifoundbatch
  4481 000036A5 66390F              <2> 		cmp [edi], cx
  4482 000036A8 0F8465000000        <2> 		je near iffoundbatch
  4483 000036AE 803F00              <2> 		cmp byte [edi], 0
  4484 000036B1 0F8412000000        <2> 		je near fifoundbatch
  4485 000036B7 B8656C7365          <2> 		mov eax, "else"
  4486 000036BC 3907                <2> 		cmp [edi], eax
  4487 000036BE 0F84C2FFFFFF        <2> 		je near elsetestbatch
  4488 000036C4 E973FFFFFF          <2> 		jmp noruniftest
  4489                              <2> 	fifoundbatch:
  4490 000036C9 81C702000000        <2> 		add edi, 2
  4491 000036CF B00A                <2> 		mov al, 10
  4492 000036D1 3807                <2> 		cmp [edi], al
  4493 000036D3 0F840B000000        <2> 		je near goodfibatch
  4494 000036D9 803F00              <2> 		cmp byte [edi], 0
  4495 000036DC 0F8470FFFFFF        <2> 		je near nobatchfoundrun
  4496 000036E2 EBB0                <2> 		jmp fifindbatch
  4497                              <2> 	goodfibatch:
  4498 000036E4 B001                <2> 		mov al, 1
  4499 000036E6 2805[A7AD0000]      <2> 		sub [IFON], al 
  4500 000036EC A0[A7AD0000]        <2> 		mov al, [IFON]
  4501 000036F1 8A1D[31370000]      <2> 		mov bl, [iffalsebuf]
  4502 000036F7 38D8                <2> 		cmp al, bl
  4503 000036F9 7799                <2> 		ja fifindbatch
  4504 000036FB 8B35[342C0000]      <2> 		mov esi, [currentcommandloc]
  4505 00003701 81EF02000000        <2> 		sub edi, 2
  4506 00003707 C605[30370000]00    <2> 		mov byte [runnextline], 0
  4507 0000370E E9ABFEFFFF          <2> 		jmp batchrunloop
  4508                              <2> 	iffoundbatch:
  4509 00003713 B020                <2> 		mov al, ' '
  4510 00003715 81C702000000        <2> 		add edi, 2
  4511 0000371B 3807                <2> 		cmp [edi], al
  4512 0000371D 0F8571FFFFFF        <2> 		jne near fifindbatch
  4513 00003723 B001                <2> 		mov al, 1
  4514 00003725 0005[A7AD0000]      <2> 		add [IFON], al
  4515 0000372B E964FFFFFF          <2> 		jmp fifindbatch
  4516                              <2> 		
  4517                              <2> 		
  4518 00003730 01                  <2> runnextline db 1
  4519 00003731 00                  <2> iffalsebuf db 0
  4520                              <2> 
  4521 00003732 C3                  <2> notbatch: ret 
  4522                              <1> %ifdef network.included
  4523                              <1> 	%include 'source/programs/arp.asm'
  4524 00003733 FF2C61727000        <2> db 255,44,"arp",0
  4525                              <2> 	;ARP TESTING
  4526                              <2> arptest:
  4527 00003739 8B35[342C0000]      <2> 	mov esi, [currentcommandloc]
  4528 0000373F 81C604000000        <2> 	add esi, 4
  4529 00003745 E8014B0000          <2> 	call strtoip
  4530 0000374A 890D[F1370000]      <2> 	mov [arptargetinfo + 6], ecx ;move to next ip
  4531 00003750 E83C4B0000          <2> 	call showip
  4532 00003755 803D[F5370000]01    <2> 	cmp byte [arpconfig], 1
  4533 0000375C 7405                <2> 	je arptest2
  4534 0000375E E841000000          <2> 	call arpinit
  4535                              <2> arptest2:	;try to reach 192.168.0.1
  4536 00003763 8B0D[38830000]      <2> 	mov ecx, [sysmac]
  4537 00003769 668B1D[3C830000]    <2> 	mov bx, [sysmac + 4]
  4538 00003770 890D[D1370000]      <2> 	mov [sourcemac], ecx
  4539 00003776 66891D[D5370000]    <2> 	mov [sourcemac + 4],bx
  4540 0000377D 890D[E1370000]      <2> 	mov [arpsenderinfo], ecx
  4541 00003783 66891D[E5370000]    <2> 	mov [arpsenderinfo + 4], bx
  4542 0000378A BF[CB370000]        <2> 	mov edi, frame
  4543 0000378F BE[F5370000]        <2> 	mov esi, framend
  4544 00003794 E8844A0000          <2> 	call sendpacket
  4545 00003799 BE[7F830000]        <2> 	mov esi, line
  4546 0000379E E85FE5FFFF          <2> 	call print
  4547 000037A3 C3                  <2> 	ret
  4548                              <2> 	
  4549                              <2> arpinit:
  4550 000037A4 BE[F6370000]        <2> 	mov esi, arptable
  4551 000037A9 BF[38830000]        <2> 	mov edi, sysmac
  4552 000037AE BB[34830000]        <2> 	mov ebx, sysip
  4553 000037B3 8B0F                <2> 	mov ecx, [edi]
  4554 000037B5 890E                <2> 	mov [esi], ecx
  4555 000037B7 668B4F04            <2> 	mov cx, [edi + 4]
  4556 000037BB 894E04              <2> 	mov [esi + 4], ecx
  4557 000037BE 8B0B                <2> 	mov ecx, [ebx]
  4558 000037C0 894E06              <2> 	mov [esi + 6], ecx
  4559 000037C3 C605[F5370000]01    <2> 	mov byte [arpconfig], 1
  4560 000037CA C3                  <2> 	ret
  4561                              <2> 	
  4562                              <2> ;example frame
  4563                              <2> frame:
  4564 000037CB FFFFFFFFFFFF        <2> destinationmac:	db 0xFF,0xFF,0xFF,0xFF,0xFF,0xFF
  4565 000037D1 000000000000        <2> sourcemac:		db 0,0,0,0,0,0
  4566 000037D7 0806                <2> ethertype:		db 8,6			;arp is 0x806
  4567                              <2> 	;;example packet
  4568 000037D9 0100                <2> 	arppacket: 		dw 1			;ethernet is 1
  4569 000037DB 0800                <2> 	arpprotocol: 	db 8,0			;ip is 0x800
  4570 000037DD 0604                <2> 					db 6,4			;length of mac, length of ip
  4571 000037DF 0001                <2> 	arpoperation: 	db 0,1			;one for arp request
  4572 000037E1 000000000000        <2> 	arpsenderinfo:	db 0x00,0x00,0x00,0x00,0x00,0x00	;mac
  4573 000037E7 C0A80073            <2> 					db 192,168,0,115		;ip
  4574 000037EB 000000000000        <2> 	arptargetinfo:	db 0x00,0x00,0x00,0x00,0x00,0x00	;ignored in requests
  4575 000037F1 C0A80000            <2> 					db 192,168,0,0			;ip
  4576                              <2> framend:
  4577                              <2> 
  4578 000037F5 00                  <2> arpconfig db 0
  4579                              <2> arptable:	;;mac,ip
  4580 000037F6 000000000000000000- <2> 	times 10 db 0,0,0,0,0,0,0,0,0,0
  4581 000037FF 00<rept>            <2>
  4582                              <2> arptableend:	
  4583                              <1> 	%include 'source/programs/dhcp.asm'
  4584 0000385A FF2C6468637000      <2> db 255,44,"dhcp",0
  4585                              <2> dhcp:
  4586 00003861 BE[21390000]        <2> 	mov esi, .dhcp.mac
  4587 00003866 BB[013A0000]        <2> 	mov ebx, .dhcp.option.mac
  4588 0000386B BF[E1380000]        <2> 	mov edi, .mac
  4589 00003870 31C9                <2> 	xor ecx, ecx
  4590 00003872 66890D[F3380000]    <2> 	mov [.ip.checksum], cx
  4591 00003879 66890D[03390000]    <2> 	mov [.udp.checksum], cx
  4592 00003880 8B0D[38830000]      <2> 	mov ecx, [sysmac]
  4593 00003886 890B                <2> 	mov [ebx], ecx
  4594 00003888 890F                <2> 	mov [edi], ecx
  4595 0000388A 890E                <2> 	mov [esi], ecx
  4596 0000388C 668B0D[3C830000]    <2> 	mov cx, [sysmac + 4]
  4597 00003893 66894B04            <2> 	mov [ebx + 4], cx
  4598 00003897 66894E04            <2> 	mov [esi + 4], cx
  4599 0000389B 66894F04            <2> 	mov [edi + 4], cx
  4600 0000389F BF[E9380000]        <2> 	mov edi, .ip.header
  4601 000038A4 BE[FD380000]        <2> 	mov esi, .ip.headerend
  4602 000038A9 E875490000          <2> 	call getchecksum
  4603 000038AE 66890D[F3380000]    <2> 	mov [.ip.checksum], cx
  4604 000038B5 BF[FD380000]        <2> 	mov edi, .udp.header
  4605 000038BA BE[183A0000]        <2> 	mov esi, .udp.end
  4606 000038BF E85F490000          <2> 	call getchecksum
  4607 000038C4 66890D[03390000]    <2> 	mov [.udp.checksum], cx
  4608 000038CB BF[DB380000]        <2> 	mov edi, .frame
  4609 000038D0 BE[183A0000]        <2> 	mov esi, .udp.end
  4610 000038D5 E843490000          <2> 	call sendpacket
  4611 000038DA C3                  <2> 	ret
  4612                              <2> .frame:
  4613 000038DB FFFFFFFFFFFF        <2> 	.destmac db 0xFF,0xFF,0xFF,0xFF,0xFF,0xFF
  4614 000038E1 000000000000        <2> 	.mac db 0,0,0,0,0,0
  4615 000038E7 0800                <2> 	db 8,0
  4616                              <2> .ip.header:
  4617 000038E9 45                  <2> 	db (0x40 | (.ip.headerend - .ip.header)/4)
  4618 000038EA 00                  <2> 	db 0
  4619 000038EB 012F                <2> 	db (.udp.end - .ip.header)/256, (.udp.end - .ip.header)
  4620 000038ED 0000                <2> 	dw 0
  4621 000038EF 0000                <2> 	dw 0
  4622 000038F1 80                  <2> 	db 0x80
  4623 000038F2 11                  <2> 	db 17
  4624 000038F3 0000                <2> .ip.checksum dw 0
  4625 000038F5 00000000            <2> 	db 0,0,0,0
  4626 000038F9 FFFFFFFF            <2> 	db 255,255,255,255	
  4627                              <2> .ip.headerend
  4628                              <2> .udp.header
  4629 000038FD 0044                <2> 	db 0,68	;source port
  4630 000038FF 0043                <2> 	db 0,67 ;destination port
  4631 00003901 011B                <2> 	db (.udp.end - .udp.header)/256, (.udp.end - .udp.header)
  4632 00003903 0000                <2> .udp.checksum dw 0
  4633                              <2> .udp.headerend
  4634                              <2> .dhcp.data
  4635 00003905 01                  <2> 	db 1	;message type
  4636 00003906 01                  <2> 	db 1	;hardware type
  4637 00003907 06                  <2> 	db 6	;hardware address length
  4638 00003908 00                  <2> 	db 0	;hops
  4639 00003909 EC2B2369            <2> 	db 0xEC,0x2B,0x23,0x69	;transaction ID
  4640 0000390D 0000                <2> 	db 0,0	;seconds elapsed
  4641 0000390F 0000                <2> 	db 0,0	;flags
  4642 00003911 00000000            <2> 	db 0,0,0,0	;client ip address
  4643 00003915 00000000            <2> 	db 0,0,0,0	;your ip address
  4644 00003919 00000000            <2> 	db 0,0,0,0	;server ip address
  4645 0000391D 00000000            <2> 	db 0,0,0,0	;relay agent ip address
  4646 00003921 000000000000        <2> .dhcp.mac db 0,0,0,0,0,0	;client hardware address
  4647 00003927 00<rept>            <2> 	times 10 db 0	;padding
  4648 00003931 00<rept>            <2> 	times 64 db 0	;server host name
  4649 00003971 00<rept>            <2> 	times 128 db 0	;boot file name
  4650 000039F1 63825363            <2> 	db 0x63,0x82,0x53,0x63	;magic cookie
  4651                              <2> .dhcp.option.type:
  4652 000039F5 350103              <2> 	db 53,1,3	;DHCP Request
  4653 000039F8 3204C0A80002        <2> 	db 50,4,192,168,0,2	;requested IP
  4654 000039FE 3D07                <2> 	db 61,7 ;client id(mac)
  4655 00003A00 01                  <2> 	db 1	;Type=Ethernet
  4656 00003A01 000000000000        <2> .dhcp.option.mac:	db 0,0,0,0,0,0
  4657 00003A07 0C08                <2> 	db 12,8 ;host name
  4658 00003A09 536F6C6C65724F53    <2> .dhcp.option.name 	db "SollerOS"
  4659 00003A11 370401030F06        <2> 	db 55,4,1,3,15,6	;request subnet, router, domain name, name server
  4660 00003A17 FF                  <2> 	db 0xFF	;end DHCP options
  4661                              <2> .dhcp.end
  4662                              <2> .udp.end
  4663                              <2> 	
  4664                              <1> 	%include 'source/programs/ifconfig.asm'
  4665 00003A18 FF2C6966636F6E6669- <2> db 255,44,"ifconfig",0
  4666 00003A21 6700                <2>
  4667                              <2> ifconfig:
  4668 00003A23 8B35[342C0000]      <2> 	mov esi, [currentcommandloc]
  4669 00003A29 81C609000000        <2> 	add esi, 9
  4670 00003A2F 803E00              <2> 	cmp byte [esi], 0
  4671 00003A32 740B                <2> 	je .noip
  4672 00003A34 E812480000          <2> 	call strtoip
  4673 00003A39 890D[34830000]      <2> 	mov [sysip], ecx
  4674                              <2> .noip:
  4675                              <2> %ifdef ne2000.included
  4676 00003A3F 803D[CF5D0000]01    <2> 	cmp byte [ne2000.nicconfig], 1
  4677 00003A46 751E                <2> 	jne .none2000
  4678 00003A48 BE[D05D0000]        <2> 	mov esi, ne2000.name
  4679 00003A4D E8B0E2FFFF          <2> 	call print
  4680 00003A52 B9[F25D0000]        <2> 	mov ecx, ne2000.mac
  4681 00003A57 E871480000          <2> 	call showmac
  4682 00003A5C BE[7F830000]        <2> 	mov esi, line
  4683 00003A61 E89CE2FFFF          <2> 	call print
  4684                              <2> .none2000:
  4685                              <2> %endif
  4686                              <2> %ifdef rtl8139.included
  4687                              <2> 	cmp byte [rtl8139.nicconfig], 1
  4688                              <2> 	jne .nortl8139
  4689                              <2> 	mov esi, rtl8139.name
  4690                              <2> 	call print
  4691                              <2> 	mov ecx, rtl8139.mac
  4692                              <2> 	call showmac
  4693                              <2> 	mov esi, line
  4694                              <2> 	call print
  4695                              <2> .nortl8139:
  4696                              <2> %endif
  4697 00003A66 8B0D[34830000]      <2> 	mov ecx, [sysip]
  4698 00003A6C E820480000          <2> 	call showip
  4699 00003A71 BE[7F830000]        <2> 	mov esi, line
  4700 00003A76 E887E2FFFF          <2> 	call print
  4701 00003A7B C3                  <2> 	ret
  4702                              <2> 	
  4703                              <1> 	%include 'source/programs/ping.asm'
  4704 00003A7C FF2C70696E6700      <2> db 255,44,"ping",0
  4705                              <2> ping:
  4706 00003A83 8B35[342C0000]      <2> 	mov esi, [currentcommandloc]
  4707 00003A89 81C605000000        <2> 	add esi, 5
  4708 00003A8F E8B7470000          <2> 	call strtoip
  4709 00003A94 890D[1F3B0000]      <2> 	mov [.destip], ecx
  4710 00003A9A E8F2470000          <2> 	call showip
  4711 00003A9F 8B0D[34830000]      <2> 	mov ecx, [sysip]
  4712 00003AA5 890D[1B3B0000]      <2> 	mov [.sourceip]. ecx
  4713 00003AAB 31C0                <2> 	xor eax, eax
  4714 00003AAD 31DB                <2> 	xor ebx, ebx
  4715 00003AAF 66A3[193B0000]      <2> 	mov [.checksum], ax
  4716 00003AB5 66A3[253B0000]      <2> 	mov [.icmpchecksum], ax
  4717 00003ABB BF[0F3B0000]        <2> 	mov edi, .header
  4718 00003AC0 BE[233B0000]        <2> 	mov esi, .headerend
  4719 00003AC5 E859470000          <2> 	call getchecksum
  4720 00003ACA 66890D[193B0000]    <2> 	mov [.checksum], cx
  4721 00003AD1 BF[233B0000]        <2> 	mov edi, .icmp
  4722 00003AD6 BE[4B3B0000]        <2> 	mov esi, .packetend
  4723 00003ADB E843470000          <2> 	call getchecksum
  4724 00003AE0 66890D[253B0000]    <2> 	mov [.icmpchecksum], cx
  4725 00003AE7 BF[013B0000]        <2> 	mov edi, .packet
  4726 00003AEC BE[4B3B0000]        <2> 	mov esi, .packetend
  4727 00003AF1 E827470000          <2> 	call sendpacket
  4728 00003AF6 BE[7F830000]        <2> 	mov esi, line
  4729 00003AFB E802E2FFFF          <2> 	call print
  4730 00003B00 C3                  <2> 	ret
  4731                              <2> 	
  4732                              <2> 	
  4733                              <2> 	
  4734                              <2> .packet:
  4735 00003B01 FFFFFFFFFFFF        <2> .destinationmac db 0xFF,0xFF,0xFF,0xFF,0xFF,0xFF
  4736 00003B07 000000000000        <2> .sourcemac	db 0,0,0,0,0,0
  4737 00003B0D 0800                <2> .ethertype	db 8,0	;ip is 0x800
  4738                              <2> .header:
  4739 00003B0F 45                  <2> .version	db 0x45
  4740 00003B10 00                  <2> .services	db 0
  4741 00003B11 003C                <2> .length	db 0,0x3C
  4742 00003B13 0000                <2> .id		dw 0
  4743 00003B15 00                  <2> .flags	db 0
  4744 00003B16 00                  <2> .fragment db 0
  4745 00003B17 80                  <2> .ttl	db 128
  4746 00003B18 01                  <2> .protocol db 1 ;ICMP
  4747 00003B19 0000                <2> .checksum dw 0
  4748 00003B1B 00000000            <2> .sourceip dd 0
  4749 00003B1F 00000000            <2> .destip dd 0
  4750                              <2> .headerend:
  4751                              <2> .icmp:
  4752 00003B23 08                  <2> .icmptype db 8 ;Ping request
  4753 00003B24 00                  <2> .icmpcode db 0
  4754 00003B25 0000                <2> .icmpchecksum dw 0
  4755 00003B27 0001                <2> .icmpid db 0,1
  4756 00003B29 0000                <2> .sequence dw 0
  4757 00003B2B 616263646566676869- <2> db "abcdefghijklmnopqrstuvwabcdefghi" ;this is what microsoft includes
  4758 00003B34 6A6B6C6D6E6F707172- <2>
  4759 00003B3D 737475767761626364- <2>
  4760 00003B46 6566676869          <2>
  4761                              <2> .packetend
  4762                              <1> %endif
  4763                              <1> %include 'source/programs/batch.asm'
  4764 00003B4B FF2C626174636800    <2> db 255,44,"batch",0
  4765                              <2> 	batchst: 
  4766 00003B53 8B3D[342C0000]      <2> 		mov edi, [currentcommandloc]
  4767 00003B59 81C706000000        <2> 		add edi, 6
  4768 00003B5F 803F00              <2> 		cmp byte [edi], 0
  4769 00003B62 0F846D000000        <2> 		je near nonamefound
  4770 00003B68 BE00004000          <2> 		mov esi, 0x400000
  4771 00003B6D E89E290000          <2> 		call loadfile
  4772 00003B72 89D0                <2> 		mov eax, edx
  4773 00003B74 3D94010000          <2> 		cmp eax, 404
  4774 00003B79 7465                <2> 		je goodbatchname
  4775 00003B7B BE[863B0000]        <2> 		mov esi, badbatchname
  4776 00003B80 E87DE1FFFF          <2> 		call print
  4777 00003B85 C3                  <2> 		ret
  4778 00003B86 546869732066696C65- <2> 		badbatchname db "This file already exists!",10,0
  4779 00003B8F 20616C726561647920- <2>
  4780 00003B98 657869737473210A00  <2>
  4781 00003BA1 596F75206861766520- <2> 		namenotfoundbatch db "You have to type a name after the command.",10,0
  4782 00003BAA 746F20747970652061- <2>
  4783 00003BB3 206E616D6520616674- <2>
  4784 00003BBC 65722074686520636F- <2>
  4785 00003BC5 6D6D616E642E0A00    <2>
  4786 00003BCD 00000000            <2> 		esicache3 dd 0
  4787 00003BD1 00000000            <2> 		esicache2 dd 0
  4788                              <2> 	nonamefound:
  4789 00003BD5 BE[A13B0000]        <2> 		mov esi, namenotfoundbatch
  4790 00003BDA E823E1FFFF          <2> 		call print
  4791 00003BDF C3                  <2> 		ret
  4792                              <2> 	goodbatchname:
  4793 00003BE0 BE00004000          <2> 		mov esi, 0x400000
  4794                              <2> 	batchcreate:
  4795 00003BE5 8935[CD3B0000]      <2> 		mov [esicache3], esi
  4796 00003BEB BF00008000          <2> 		mov edi, 0x800000
  4797 00003BF0 B00A                <2> 		mov al, 10
  4798 00003BF2 B307                <2> 		mov bl, 7
  4799 00003BF4 B404                <2> 		mov ah, 4
  4800 00003BF6 CD30                <2> 		int 30h
  4801 00003BF8 8935[D13B0000]      <2> 		mov [esicache2], esi
  4802 00003BFE 8A0E                <2> 		mov cl, [esi]
  4803 00003C00 8B35[CD3B0000]      <2> 		mov esi, [esicache3]
  4804 00003C06 BB[3A3C0000]        <2> 		mov ebx, exitword
  4805 00003C0B E863F0FFFF          <2> 		call cndtest
  4806 00003C10 3C01                <2> 		cmp al, 1
  4807 00003C12 7411                <2> 		je endbatchcreate
  4808 00003C14 3C02                <2> 		cmp al, 2
  4809 00003C16 740D                <2> 		je endbatchcreate
  4810 00003C18 8B35[D13B0000]      <2> 		mov esi, [esicache2]
  4811 00003C1E B00A                <2> 		mov al, 10
  4812 00003C20 8806                <2> 		mov [esi], al
  4813 00003C22 46                  <2> 		inc esi
  4814 00003C23 EBC0                <2> 		jmp batchcreate
  4815                              <2> 	endbatchcreate:
  4816 00003C25 8B35[CD3B0000]      <2> 		mov esi, [esicache3]
  4817 00003C2B 31C0                <2> 		xor eax, eax
  4818 00003C2D 8806                <2> 		mov [esi], al
  4819 00003C2F BE00004000          <2> 		mov esi, 0x400000
  4820 00003C34 E8C9E0FFFF          <2> 		call print
  4821 00003C39 C3                  <2> 		ret
  4822                              <2> 	
  4823 00003C3A 5C7800              <2> 	exitword db "\x",0
  4824 00003C3D 54797065205C782074- <2> 	wordmsg db "Type \x to exit.",10,0
  4825 00003C46 6F20657869742E0A00  <2>
  4826                              <1> %ifdef gui.background
  4827                              <1> 	%include 'source/programs/background.asm'
  4828 00003C4F FF2C6261636B67726F- <2> db 255,44,"background",0
  4829 00003C58 756E6400            <2>
  4830 00003C5C 8B3D[342C0000]      <2> 		mov edi, [currentcommandloc]
  4831 00003C62 81C70B000000        <2> 		add edi, 11
  4832 00003C68 BE00008000          <2> 		mov esi, 0x800000
  4833 00003C6D E89E280000          <2> 		call loadfile
  4834 00003C72 81FA94010000        <2> 		cmp edx, 404
  4835 00003C78 0F846C0C0000        <2> 		je near filenotfound
  4836 00003C7E BE00008000          <2> 		mov esi, 0x800000
  4837 00003C83 66813E424D          <2> 		cmp word [esi], "BM"
  4838 00003C88 7401                <2> 		je .bmpfound
  4839 00003C8A C3                  <2> 		ret
  4840                              <2> .bmpfound:
  4841 00003C8B 8B3D[04540000]      <2> 		mov edi, [physbaseptr]
  4842 00003C91 57                  <2> 		push edi
  4843 00003C92 BE[2BC80000]        <2> 		mov esi, backgroundbuffer
  4844 00003C97 8935[666C0000]      <2> 		mov [backgroundimage], esi
  4845 00003C9D 8935[04540000]      <2> 		mov [physbaseptr], esi
  4846 00003CA3 31C0                <2> 		xor eax, eax
  4847                              <2> .clearlp:
  4848 00003CA5 8906                <2> 		mov [esi], eax
  4849 00003CA7 81C604000000        <2> 		add esi, 4
  4850 00003CAD 81FE[2BDC2800]      <2> 		cmp esi, backgroundbufferend
  4851 00003CB3 72F0                <2> 		jb .clearlp
  4852 00003CB5 BE00008000          <2> 		mov esi, 0x800000
  4853 00003CBA 31C9                <2> 		xor ecx, ecx
  4854 00003CBC 31D2                <2> 		xor edx, edx
  4855 00003CBE 31DB                <2> 		xor ebx, ebx
  4856 00003CC0 E80F2A0000          <2> 		call showbmp
  4857 00003CC5 5F                  <2> 		pop edi
  4858 00003CC6 893D[04540000]      <2> 		mov [physbaseptr], edi
  4859 00003CCC 803D[50950000]00    <2> 		cmp byte [guion], 0
  4860 00003CD3 740F                <2> 		je .noclear
  4861 00003CD5 E8392F0000          <2> 		call guiclear
  4862 00003CDA E8D42B0000          <2> 		call clearmousecursor
  4863 00003CDF E8B42F0000          <2> 		call reloadallgraphics
  4864                              <2> .noclear:
  4865 00003CE4 C3                  <2> 		ret
  4866                              <1> %endif
  4867                              <1> %include 'source/programs/beep.asm'
  4868 00003CE5 FF2C6265657000      <2> 	db 255,44,"beep",0
  4869                              <2> beep:
  4870 00003CEC B8[113D0000]        <2> 	mov eax, beepstart
  4871 00003CF1 A3[68020000]        <2> 	mov [soundpos], eax
  4872 00003CF6 B8[153D0000]        <2> 	mov eax, beepend
  4873 00003CFB A3[6C020000]        <2> 	mov [soundendpos], eax
  4874 00003D00 C605[65020000]01    <2> 	mov byte [soundon], 1
  4875                              <2> waitforsoundendbeep:
  4876 00003D07 A0[65020000]        <2> 	mov al, [soundon]
  4877 00003D0C 3C00                <2> 	cmp al, 0
  4878 00003D0E 75F7                <2> 	jne waitforsoundendbeep
  4879 00003D10 C3                  <2> 	ret
  4880                              <2> 	
  4881                              <2> beepstart:
  4882 00003D11 3200D111            <2> 	dw 50, 4561
  4883                              <2> beepend:
  4884                              <1> %include 'source/programs/cd.asm'
  4885 00003D15 FF2C636400          <2> db 255,44,"cd",0
  4886                              <2> cd:
  4887 00003D1A 8B35[342C0000]      <2> 	mov esi, [currentcommandloc]
  4888 00003D20 81C603000000        <2> 	add esi, 3
  4889 00003D26 8B3D[9EAB0000]      <2> 	mov edi, [currentfolderloc]
  4890 00003D2C 893D[9AAB0000]      <2> 	mov [lastfolderloc], edi
  4891 00003D32 81C7[A2AB0000]      <2> 	add edi, currentfolder
  4892                              <2> 	;cmp word [esi], ".."
  4893                              <2> 	;je .moveup
  4894                              <2> .movedown:
  4895 00003D38 8A06                <2> 	mov al, [esi]
  4896 00003D3A 8807                <2> 	mov [edi], al
  4897 00003D3C 47                  <2> 	inc edi
  4898 00003D3D 46                  <2> 	inc esi
  4899 00003D3E 3C00                <2> 	cmp al, 0
  4900 00003D40 740A                <2> 	je .donecd
  4901 00003D42 81FF[A2AD0000]      <2> 	cmp edi, currentfolderend
  4902 00003D48 72EE                <2> 	jb .movedown
  4903 00003D4A 30C0                <2> 	xor al, al
  4904                              <2> .donecd:
  4905 00003D4C 4F                  <2> 	dec edi
  4906 00003D4D C6072F              <2> 	mov byte [edi], '/'
  4907 00003D50 47                  <2> 	inc edi
  4908 00003D51 81EF[A2AB0000]      <2> 	sub edi, currentfolder
  4909 00003D57 893D[9EAB0000]      <2> 	mov [currentfolderloc], edi
  4910 00003D5D C3                  <2> 	ret
  4911                              <2> ;.moveup:
  4912                              <2> ;	ret
  4913                              <1> %include 'source/programs/charmap.asm'
  4914 00003D5E FF2C636861726D6170- <2> db 255,44,"charmap",0
  4915 00003D67 00                  <2>
  4916 00003D68 66BB0700            <2> 	mov bx, 7
  4917 00003D6C B020                <2> 	mov al, " "
  4918 00003D6E E8C6E4FFFF          <2> 	call prcharq
  4919 00003D73 E8C1E4FFFF          <2> 	call prcharq
  4920 00003D78 E8BCE4FFFF          <2> 	call prcharq
  4921 00003D7D E8B7E4FFFF          <2> 	call prcharq
  4922 00003D82 B030                <2> 	mov al, "0"
  4923                              <2> charmapnumprnt:
  4924 00003D84 E8B0E4FFFF          <2> 	call prcharq
  4925 00003D89 FEC0                <2> 	inc al
  4926 00003D8B 6650                <2> 	push ax
  4927 00003D8D B020                <2> 	mov al, " "
  4928 00003D8F E8A5E4FFFF          <2> 	call prcharq
  4929 00003D94 6658                <2> 	pop ax
  4930 00003D96 3C39                <2> 	cmp al, "9"
  4931 00003D98 76EA                <2> 	jbe charmapnumprnt
  4932 00003D9A B041                <2> 	mov al, "A"
  4933                              <2> charmapnumprnt2:
  4934 00003D9C E898E4FFFF          <2> 	call prcharq
  4935 00003DA1 FEC0                <2> 	inc al
  4936 00003DA3 6650                <2> 	push ax
  4937 00003DA5 B020                <2> 	mov al, " "
  4938 00003DA7 E88DE4FFFF          <2> 	call prcharq
  4939 00003DAC 6658                <2> 	pop ax
  4940 00003DAE 3C47                <2> 	cmp al, "G"
  4941 00003DB0 72EA                <2> 	jb charmapnumprnt2
  4942                              <2> 	
  4943 00003DB2 BE[7F830000]        <2> 	mov esi, line
  4944 00003DB7 E834DFFFFF          <2> 	call printquiet
  4945 00003DBC 6631C0              <2> 	xor ax, ax
  4946 00003DBF 88C1                <2> 	mov cl, al
  4947 00003DC1 E881F0FFFF          <2> 	call showhexsmall
  4948 00003DC6 E955000000          <2> 	jmp charmapnocopy ;the first char is 0 which is unprintable
  4949                              <2> charmapcopy:
  4950 00003DCB FEC0                <2> 	inc al
  4951 00003DCD 6650                <2> 	push ax
  4952 00003DCF 3C08                <2> 	cmp al, 8
  4953 00003DD1 744D                <2> 	je charmapnocopy
  4954 00003DD3 3C09                <2> 	cmp al, 9
  4955 00003DD5 7449                <2> 	je charmapnocopy
  4956 00003DD7 3C0A                <2> 	cmp al, 10
  4957 00003DD9 7445                <2> 	je charmapnocopy
  4958 00003DDB 3C0D                <2> 	cmp al, 13
  4959 00003DDD 7441                <2> 	je charmapnocopy
  4960 00003DDF 3CFF                <2> 	cmp al, 255
  4961 00003DE1 743D                <2> 	je charmapnocopy
  4962 00003DE3 3C00                <2> 	cmp al, 0
  4963 00003DE5 7434                <2> 	je nomorecharmap
  4964 00003DE7 E84DE4FFFF          <2> 	call prcharq
  4965 00003DEC B020                <2> 	mov al, " "
  4966 00003DEE E846E4FFFF          <2> 	call prcharq
  4967 00003DF3 6658                <2> 	pop ax
  4968                              <2> charmapcopycheck:
  4969 00003DF5 FEC4                <2> 	inc ah
  4970 00003DF7 80FC10              <2> 	cmp ah, 16
  4971 00003DFA 72CF                <2> 	jb charmapcopy
  4972 00003DFC 6650                <2> 	push ax
  4973 00003DFE BE[7F830000]        <2> 	mov esi, line
  4974 00003E03 E8E8DEFFFF          <2> 	call printquiet
  4975 00003E08 6658                <2> 	pop ax
  4976 00003E0A 3CFF                <2> 	cmp al, 255
  4977 00003E0C 740D                <2> 	je nomorecharmap
  4978 00003E0E 88C1                <2> 	mov cl, al
  4979 00003E10 FEC1                <2> 	inc cl
  4980 00003E12 E830F0FFFF          <2> 	call showhexsmall
  4981 00003E17 30E4                <2> 	xor ah, ah
  4982 00003E19 EBB0                <2> 	jmp charmapcopy
  4983                              <2> nomorecharmap:
  4984 00003E1B E961EBFFFF          <2> 	jmp nwcmd
  4985                              <2> charmapnocopy:
  4986 00003E20 6650                <2> 	push ax
  4987 00003E22 B020                <2> 	mov al, " "
  4988 00003E24 E810E4FFFF          <2> 	call prcharq
  4989 00003E29 E80BE4FFFF          <2> 	call prcharq
  4990 00003E2E 6658                <2> 	pop ax
  4991 00003E30 EBC3                <2> 	jmp charmapcopycheck
  4992                              <1> %include 'source/programs/clear.asm'
  4993 00003E32 FF2C636C65617200    <2> db 255,44,"clear",0
  4994 00003E3A E829DFFFFF          <2> 		call clear
  4995 00003E3F C3                  <2> 		ret 
  4996                              <1> %include 'source/programs/cpuid.asm'
  4997 00003E40 FF2C637075696400    <2> db 255,44,"cpuid",0
  4998 00003E48 31C0                <2> 	xor eax, eax
  4999 00003E4A 0FA2                <2> 	cpuid
  5000 00003E4C 891D[9D3E0000]      <2> 	mov [cpuidbuf], ebx
  5001 00003E52 8915[A13E0000]      <2> 	mov [cpuidbuf + 4], edx
  5002 00003E58 890D[A53E0000]      <2> 	mov [cpuidbuf + 8], ecx
  5003 00003E5E BE[9D3E0000]        <2> 	mov esi, cpuidbuf
  5004 00003E63 E89ADEFFFF          <2> 	call print
  5005 00003E68 BE[7F830000]        <2> 	mov esi, line
  5006 00003E6D E890DEFFFF          <2> 	call print
  5007 00003E72 B801000000          <2> 	mov eax, 1
  5008 00003E77 0FA2                <2> 	cpuid
  5009 00003E79 89C1                <2> 	mov ecx, eax
  5010 00003E7B C605[462E0000]02    <2> 	mov byte [firsthexshown], 2
  5011 00003E82 E8D4EFFFFF          <2> 	call showhex
  5012 00003E87 B808000080          <2> 	mov eax, 0x80000008
  5013 00003E8C 0FA2                <2> 	cpuid
  5014 00003E8E 89C1                <2> 	mov ecx, eax
  5015 00003E90 C605[462E0000]02    <2> 	mov byte [firsthexshown], 2
  5016 00003E97 E8BFEFFFFF          <2> 	call showhex
  5017 00003E9C C3                  <2> 	ret
  5018                              <2> 	
  5019 00003E9D 00<rept>            <2> cpuidbuf times 13 db 0
  5020                              <2> cpuidvendorend:
  5021                              <1> %include 'source/programs/dos.asm'
  5022 00003EAA FF2C646F7300        <2> db 255,44,"dos",0
  5023                              <2> dosrunner:
  5024 00003EB0 8925[96AB0000]      <2> 	mov [previousstack], esp
  5025 00003EB6 8B3D[342C0000]      <2> 	mov edi, [currentcommandloc]
  5026 00003EBC 81C704000000        <2> 	add edi, 4
  5027 00003EC2 BE00014000          <2> 	mov esi,  0x100 + dosprogloc	;this should be the beginning of memory
  5028 00003EC7 E844260000          <2> 	call loadfile
  5029 00003ECC 8B3D[342C0000]      <2> 	mov edi, [currentcommandloc]
  5030 00003ED2 81C704000000        <2> 	add edi, 4
  5031 00003ED8 81FA94010000        <2> 	cmp edx, 404
  5032 00003EDE 0F845E000000        <2> 	je near .noprogfound
  5033 00003EE4 BB81004000          <2> 	mov ebx, 0x81 + dosprogloc
  5034 00003EE9 31C9                <2> 	xor ecx, ecx
  5035                              <2> .findparams:
  5036 00003EEB 47                  <2> 	inc edi
  5037 00003EEC 8A07                <2> 	mov al, [edi]
  5038 00003EEE 3C20                <2> 	cmp al, " "
  5039 00003EF0 75F9                <2> 	jne .findparams
  5040                              <2> .copyparams:
  5041 00003EF2 8A07                <2> 	mov al, [edi]
  5042 00003EF4 8803                <2> 	mov [ebx], al
  5043 00003EF6 43                  <2> 	inc ebx
  5044 00003EF7 47                  <2> 	inc edi
  5045 00003EF8 41                  <2> 	inc ecx
  5046 00003EF9 81FB00014000        <2> 	cmp ebx, 0x100 + dosprogloc
  5047 00003EFF 7304                <2> 	jae .nomoreparams
  5048 00003F01 3C00                <2> 	cmp al, 0
  5049 00003F03 75ED                <2> 	jne .copyparams
  5050                              <2> .nomoreparams:
  5051 00003F05 880D80004000        <2> 	mov [0x80 + dosprogloc], cl
  5052 00003F0B 66B85000            <2> 	mov ax, DOS_DATA_SEL
  5053 00003F0F 8ED8                <2> 	mov ds, ax
  5054 00003F11 8EC0                <2> 	mov es, ax
  5055 00003F13 8EE0                <2> 	mov fs, ax
  5056 00003F15 8EE8                <2> 	mov gs, ax
  5057 00003F17 31C0                <2> 	xor eax, eax
  5058 00003F19 31DB                <2> 	xor ebx, ebx
  5059 00003F1B 31C9                <2> 	xor ecx, ecx
  5060 00003F1D 31D2                <2> 	xor edx, edx
  5061 00003F1F 31FF                <2> 	xor edi, edi
  5062 00003F21 31F6                <2> 	xor esi, esi
  5063 00003F23 9A000100004800      <2> 	call DOS_CODE_SEL:0x100
  5064 00003F2A 66BB3000            <2> 	mov bx, NEW_DATA_SEL
  5065 00003F2E 6689DA              <2> 	mov dx, bx
  5066 00003F31 8EC3                <2> 	mov es, bx
  5067 00003F33 8EE3                <2> 	mov fs, bx
  5068 00003F35 66BB2000            <2> 	mov bx, SYS_DATA_SEL
  5069 00003F39 8EEB                <2> 	mov gs, bx
  5070 00003F3B 8B25[96AB0000]      <2> 	mov esp, [previousstack]
  5071 00003F41 C3                  <2> 	ret
  5072                              <2> .noprogfound:
  5073 00003F42 BE[46830000]        <2> 	mov esi, notfound1
  5074 00003F47 E8B6DDFFFF          <2> 	call print
  5075 00003F4C 8B35[342C0000]      <2> 	mov esi, [currentcommandloc]
  5076 00003F52 81C604000000        <2> 	add esi, 4
  5077 00003F58 E8A5DDFFFF          <2> 	call print
  5078 00003F5D BE[4E830000]        <2> 	mov esi, notfound2
  5079 00003F62 E89BDDFFFF          <2> 	call print
  5080 00003F67 C3                  <2> 	ret
  5081                              <2> 	
  5082                              <1> %include 'source/programs/dump.asm'
  5083 00003F68 FF2C64756D7000      <2> db 255,44,"dump",0
  5084 00003F6F 8B35[342C0000]      <2> 	mov esi, [currentcommandloc]
  5085 00003F75 81C605000000        <2> 	add esi, 5
  5086 00003F7B 31C9                <2> 	xor ecx, ecx
  5087 00003F7D 66B83078            <2> 	mov ax, "0x"
  5088 00003F81 663906              <2> 	cmp [esi], ax
  5089 00003F84 740A                <2> 	je dumphexin
  5090 00003F86 E87CF0FFFF          <2> 	call cnvrttxt
  5091 00003F8B E910000000          <2> 	jmp dumphexnow
  5092                              <2> dumphexin:
  5093 00003F90 81C602000000        <2> 	add esi, 2
  5094 00003F96 E823F0FFFF          <2> 	call cnvrthextxt
  5095 00003F9B E900000000          <2> 	jmp dumphexnow
  5096                              <2> dumphexnow:
  5097 00003FA0 89CF                <2> 	mov edi, ecx
  5098 00003FA2 89FE                <2> 	mov esi, edi
  5099 00003FA4 81C680030000        <2> 	add esi, 896
  5100                              <2> dumphexloop:
  5101 00003FAA 8B0F                <2> 	mov ecx, [edi]
  5102 00003FAC C605[462E0000]05    <2> 	mov byte [firsthexshown],5
  5103 00003FB3 E8A3EEFFFF          <2> 	call showhex
  5104 00003FB8 81C704000000        <2> 	add edi, 4
  5105 00003FBE 39F7                <2> 	cmp edi, esi
  5106 00003FC0 72E8                <2> 	jb dumphexloop
  5107 00003FC2 E8A5E5FFFF          <2> 	call termcopy
  5108 00003FC7 C3                  <2> 	ret 
  5109                              <1> %include 'source/programs/echo.asm'
  5110                              <2> 
  5111 00003FC8 FF2C6563686F00      <2> db 255,44,"echo",0
  5112                              <2> 	echoprog:
  5113 00003FCF 8B35[342C0000]      <2> 		mov esi, [currentcommandloc]
  5114 00003FD5 81C605000000        <2> 		add esi, 5
  5115 00003FDB 8A06                <2> 		mov al, [esi]
  5116 00003FDD E820DDFFFF          <2> 		call print
  5117 00003FE2 BE[7F830000]        <2> 		mov esi, line
  5118 00003FE7 E816DDFFFF          <2> 		call print
  5119 00003FEC C3                  <2> 		ret
  5120 00003FED BB[16AE0000]        <2> 	echovr:	mov ebx, variables
  5121 00003FF2 BF06000000          <2> 		mov edi, 6
  5122 00003FF7 E83C000000          <2> 		call nxtvrech
  5123 00003FFC E954000000          <2> 		jmp prntvr2
  5124 00004001 B13D                <2> 	echvar:	mov cl, '='
  5125 00004003 43                  <2> 		inc ebx
  5126 00004004 8A03                <2> 		mov al, [ebx]
  5127 00004006 3C00                <2> 		cmp al, 0
  5128 00004008 742E                <2> 		je nxtvrech
  5129 0000400A 3C3D                <2> 		cmp al, '='
  5130 0000400C 7422                <2> 		je nxtvrechb1
  5131 0000400E 8B35[342C0000]      <2> 		mov esi, [currentcommandloc]
  5132 00004014 01FE                <2> 		add esi, edi
  5133 00004016 E858ECFFFF          <2> 		call cndtest
  5134 0000401B 3C02                <2> 		cmp al, 2
  5135 0000401D 7432                <2> 		je prntvr
  5136 0000401F 3C01                <2> 		cmp al, 1
  5137 00004021 742E                <2> 		je prntvr
  5138 00004023 8B35[342C0000]      <2> 		mov esi, [currentcommandloc]
  5139 00004029 01FE                <2> 		add esi, edi
  5140 0000402B E908000000          <2> 		jmp nxtvrech
  5141                              <2> 	nxtvrechb1:
  5142 00004030 81EB02000000        <2> 		sub ebx, 2
  5143 00004036 EBC9                <2> 		jmp echvar
  5144 00004038 8A03                <2> 	nxtvrech: mov al, [ebx]
  5145 0000403A 3C05                <2> 		cmp al, 5
  5146 0000403C 740A                <2> 		je nxtvrec2
  5147 0000403E 43                  <2> 		inc ebx
  5148 0000403F 81FB[16BE0000]      <2> 		cmp ebx, varend
  5149 00004045 72F1                <2> 		jb nxtvrech
  5150 00004047 C3                  <2> 		ret
  5151 00004048 43                  <2> 	nxtvrec2: inc ebx
  5152 00004049 8A03                <2> 		mov al, [ebx]
  5153 0000404B 3C04                <2> 		cmp al, 4
  5154 0000404D 74B2                <2> 		je echvar
  5155 0000404F EBE7                <2> 		jmp nxtvrech
  5156 00004051 43                  <2> 	prntvr: inc ebx
  5157 00004052 89DE                <2> 		mov esi, ebx
  5158 00004054 C3                  <2> 		ret
  5159 00004055 E8A8DCFFFF          <2> 	prntvr2: call print
  5160 0000405A BE[7F830000]        <2> 		mov esi, line
  5161 0000405F E89EDCFFFF          <2> 		call print
  5162 00004064 C3                  <2> 		ret 
  5163                              <1> %include 'source/programs/else.asm'
  5164 00004065 FF2C656C736500      <2> 	db 255,44,"else",0
  5165 0000406C 31C0                <2> elsecmd:	xor eax, eax
  5166 0000406E 3805[10AE0000]      <2> 	cmp [BATCHISON], al
  5167 00004074 0F84B8F6FFFF        <2> 	je near notbatch
  5168 0000407A A0[A7AD0000]        <2> 	mov al, [IFON]
  5169 0000407F BE[A8AD0000]        <2> 	mov esi, IFTRUE
  5170 00004084 01C6                <2> 	add esi, eax
  5171 00004086 8A06                <2> 	mov al, [esi]
  5172 00004088 3401                <2> 	xor al, 1
  5173 0000408A 8806                <2> 	mov [esi], al
  5174 0000408C C3                  <2> 	ret 
  5175                              <1> %include 'source/programs/exit.asm'
  5176 0000408D FF2C6578697400      <2> db 255,44,"exit",0
  5177 00004094 803D[A6AD0000]01    <2> 	cmp byte [ranboot], 1
  5178 0000409B 0F8474E8FFFF        <2> 	je near returnfromexp
  5179 000040A1 E95CE7FFFF          <2> 	jmp nobootfile
  5180                              <1> %include 'source/programs/fi.asm'
  5181 000040A6 FF2C666900          <2> 	db 255,44,"fi",0
  5182 000040AB 30C0                <2> 	xor al, al
  5183 000040AD 3805[10AE0000]      <2> 	cmp [BATCHISON], al
  5184 000040B3 0F8479F6FFFF        <2> 	je near notbatch
  5185 000040B9 B001                <2> fi:	mov al, 1
  5186 000040BB 2805[A7AD0000]      <2> 	sub [IFON],al
  5187 000040C1 C3                  <2> 	ret 
  5188                              <1> %ifdef gui.included
  5189                              <1> 	%include 'source/programs/gui.asm'
  5190 000040C2 FF2C67756900        <2> db 255,44,"gui",0
  5191                              <2> guiswitcher:
  5192 000040C8 8B35[342C0000]      <2> 	mov esi, [currentcommandloc]
  5193 000040CE 81C604000000        <2> 	add esi, 4
  5194 000040D4 31C9                <2> 	xor ecx, ecx
  5195 000040D6 803E00              <2> 	cmp byte [esi], 0
  5196 000040D9 740A                <2> 	je .nomodepref
  5197 000040DB E8DEEEFFFF          <2> 	call cnvrthextxt ;switches arg on cline to vesa mode in ecx
  5198 000040E0 E907000000          <2> 	jmp .modepref
  5199                              <2> .nomodepref:
  5200 000040E5 51                  <2> 	push ecx
  5201 000040E6 E87DDCFFFF          <2> 	call clear
  5202 000040EB 59                  <2> 	pop ecx
  5203                              <2> .modepref:
  5204 000040EC 66BB[FE4F]          <2> 	mov bx, guiswitch
  5205 000040F0 66891D[D10C0000]    <2> 	mov [realmodeptr], bx
  5206 000040F7 BB[07410000]        <2> 	mov ebx, guiswitchret
  5207 000040FC 891D[CD0C0000]      <2> 	mov [realmodereturn], ebx
  5208 00004102 E9AFCAFFFF          <2> 	jmp realmode
  5209                              <2> guiswitchret:
  5210 00004107 65803D[50950000]01  <2> 	cmp byte [gs:guion], 1
  5211 0000410F 7401                <2> 	je .cont
  5212 00004111 C3                  <2> 	ret
  5213                              <2> .cont:
  5214 00004112 BF[DC510000]        <2> 	mov edi, VBEMODEBLOCK
  5215                              <2> .loop:
  5216 00004117 658B07              <2> 	mov eax, [gs:edi]
  5217 0000411A 8907                <2> 	mov [edi], eax
  5218 0000411C 47                  <2> 	inc edi
  5219 0000411D 81FF[E0540000]      <2> 	cmp edi, VBEEND
  5220 00004123 72F2                <2> 	jb .loop
  5221 00004125 A1[04540000]        <2> 	mov eax, [physbaseptr]
  5222 0000412A 2D00001000          <2> 	sub eax, 0x100000
  5223 0000412F A3[04540000]        <2> 	mov [physbaseptr], eax
  5224 00004134 C605[37220000]00    <2> 	mov byte [termguion], 0
  5225 0000413B BE[2BC60000]        <2> 	mov esi, graphicstable
  5226 00004140 30C0                <2> 	xor al, al
  5227                              <2> .clear:
  5228 00004142 8806                <2> 	mov [esi], al
  5229 00004144 46                  <2> 	inc esi
  5230 00004145 81FE[2BC80000]      <2> 	cmp esi, graphicstableend
  5231 0000414B 72F5                <2> 	jb .clear
  5232 0000414D E8162C0000          <2> 	call guisetup
  5233                              <2> 	;The next few lines center a window that is 3/4ths of the full screen
  5234 00004152 668B15[EE530000]    <2> 	mov dx, [resolutionx]
  5235 00004159 668B0D[F0530000]    <2> 	mov cx, [resolutiony]
  5236 00004160 6689D3              <2> 	mov bx, dx
  5237 00004163 6689C8              <2> 	mov ax, cx
  5238 00004166 66D1EB              <2> 	shr bx, 1
  5239 00004169 66D1E8              <2> 	shr ax, 1
  5240 0000416C 6689DA              <2> 	mov dx, bx
  5241 0000416F 66D1EA              <2> 	shr dx, 1
  5242 00004172 6689C1              <2> 	mov cx, ax
  5243 00004175 66D1E9              <2> 	shr cx, 1
  5244 00004178 6601D3              <2> 	add bx, dx
  5245 0000417B 6601C8              <2> 	add ax, cx
  5246 0000417E 66D1E9              <2> 	shr cx, 1
  5247 00004181 66C1EB03            <2> 	shr bx, 3
  5248 00004185 66C1E303            <2> 	shl bx, 3
  5249 00004189 66C1E804            <2> 	shr ax, 4
  5250 0000418D 66C1E004            <2> 	shl ax, 4
  5251 00004191 66891D[756F0000]    <2> 	mov [termwindow], bx
  5252 00004198 66A3[776F0000]      <2> 	mov [termwindow + 2], ax	;the previous lines of code make a large terminal window that is 4 characters smaller than the screen
  5253 0000419E BE[756F0000]        <2> 	mov esi, termwindow
  5254 000041A3 31DB                <2> 	xor ebx, ebx
  5255 000041A5 6631C0              <2> 	xor ax, ax
  5256 000041A8 E8D1320000          <2> 	call showwindow
  5257 000041AD E82F130000          <2> 	call cursorgui
  5258 000041B2 E8B1DBFFFF          <2> 	call clear
  5259 000041B7 C3                  <2> 	ret
  5260                              <2> 	
  5261                              <1> 	%include 'source/programs/line.asm'
  5262 000041B8 FF2C6C696E6500      <2> db 255,44,"line",0
  5263                              <2> linetester:
  5264 000041BF 803D[50950000]00    <2> 	cmp byte [guion], 0
  5265 000041C6 0F841B000000        <2> 	je near .done
  5266                              <2> 	;mov esi, [currentcommandloc]
  5267                              <2> 	;add esi, 5
  5268                              <2> 	;xor edi, edi
  5269                              <2> 	;xor ecx, ecx
  5270                              <2> 	;call cnvrthextxt
  5271                              <2> 	;mov esi, ecx
  5272 000041CC 668B35[63020000]    <2> 	mov si, [timenanoseconds + 2];essentially load a random value
  5273 000041D3 BB1C000000          <2> 	mov ebx, 28
  5274 000041D8 E868000000          <2> 	call .circletest
  5275 000041DD BB06000000          <2> 	mov ebx, 6
  5276 000041E2 E801000000          <2> 	call .linetest
  5277                              <2> .done:
  5278 000041E7 C3                  <2> 	ret
  5279                              <2> 
  5280                              <2> .linetest:
  5281 000041E8 53                  <2> 	push ebx
  5282 000041E9 E8D6000000          <2> 	call .stime
  5283 000041EE 5B                  <2> 	pop ebx
  5284 000041EF 31FF                <2> 	xor edi, edi
  5285                              <2> .ltlp
  5286 000041F1 53                  <2> 	push ebx
  5287 000041F2 E81C010000          <2> 	call .st
  5288 000041F7 66F7D6              <2> 	not si
  5289 000041FA E814010000          <2> 	call .st
  5290 000041FF 5B                  <2> 	pop ebx
  5291 00004200 66F7D6              <2> 	not si
  5292 00004203 660335[61020000]    <2> 	add si, [timenanoseconds]
  5293 0000420A 4B                  <2> 	dec ebx
  5294 0000420B 81FB00000000        <2> 	cmp ebx, 0
  5295 00004211 77DE                <2> 	ja .ltlp
  5296 00004213 E8C4000000          <2> 	call .etime
  5297 00004218 53                  <2> 	push ebx	
  5298 00004219 57                  <2> 	push edi
  5299 0000421A E8F4290000          <2> 	call guiclear
  5300 0000421F E8742A0000          <2> 	call reloadallgraphics
  5301 00004224 59                  <2> 	pop ecx
  5302 00004225 E8FBECFFFF          <2> 	call showdec
  5303 0000422A BE[55430000]        <2> 	mov esi, .msg
  5304 0000422F E8CEDAFFFF          <2> 	call print
  5305 00004234 59                  <2> 	pop ecx
  5306 00004235 E8EBECFFFF          <2> 	call showdec
  5307 0000423A BE[81430000]        <2> 	mov esi, .msgtime
  5308 0000423F E8BEDAFFFF          <2> 	call print
  5309 00004244 C3                  <2> 	ret
  5310                              <2> 	
  5311                              <2> .circletest:
  5312 00004245 53                  <2> 	push ebx
  5313 00004246 E879000000          <2> 	call .stime
  5314 0000424B 5B                  <2> 	pop ebx
  5315 0000424C 31FF                <2> 	xor edi, edi
  5316                              <2> .ctlp:
  5317 0000424E 53                  <2> 	push ebx
  5318 0000424F 668B0D[F0530000]    <2> 	mov cx, [resolutiony]
  5319 00004256 66D1E9              <2> 	shr cx, 1
  5320 00004259 668B15[EE530000]    <2> 	mov dx, [resolutionx]
  5321 00004260 66D1EA              <2> 	shr dx, 1
  5322 00004263 6689C8              <2> 	mov ax, cx
  5323                              <2> .circle:
  5324 00004266 60                  <2> 	pusha
  5325 00004267 E83A250000          <2> 	call drawcircle
  5326 0000426C 61                  <2> 	popa
  5327 0000426D 6648                <2> 	dec ax
  5328 0000426F 47                  <2> 	inc edi
  5329 00004270 663D0100            <2> 	cmp ax, 1
  5330 00004274 77F0                <2> 	ja .circle
  5331 00004276 66F7D6              <2> 	not si
  5332                              <2> .circle2:
  5333 00004279 60                  <2> 	pusha
  5334 0000427A E827250000          <2> 	call drawcircle
  5335 0000427F 61                  <2> 	popa
  5336 00004280 47                  <2> 	inc edi
  5337 00004281 6640                <2> 	inc ax
  5338 00004283 6639C8              <2> 	cmp ax, cx
  5339 00004286 76F1                <2> 	jbe .circle2
  5340 00004288 5B                  <2> 	pop ebx
  5341 00004289 66F7D6              <2> 	not si
  5342 0000428C 660335[61020000]    <2> 	add si, [timenanoseconds]
  5343 00004293 4B                  <2> 	dec ebx
  5344 00004294 81FB00000000        <2> 	cmp ebx, 0
  5345 0000429A 77B2                <2> 	ja .ctlp
  5346 0000429C E83B000000          <2> 	call .etime
  5347 000042A1 53                  <2> 	push ebx
  5348 000042A2 57                  <2> 	push edi
  5349 000042A3 59                  <2> 	pop ecx
  5350 000042A4 E87CECFFFF          <2> 	call showdec
  5351 000042A9 BE[6A430000]        <2> 	mov esi, .msgcircle
  5352 000042AE E84FDAFFFF          <2> 	call print
  5353 000042B3 59                  <2> 	pop ecx
  5354 000042B4 E86CECFFFF          <2> 	call showdec
  5355 000042B9 BE[81430000]        <2> 	mov esi, .msgtime
  5356 000042BE E83FDAFFFF          <2> 	call print
  5357 000042C3 C3                  <2> 	ret
  5358                              <2> 	
  5359                              <2> .stime:
  5360 000042C4 F4                  <2> 	hlt
  5361 000042C5 A1[5D020000]        <2> 	mov eax, [timeseconds]
  5362 000042CA 8B1D[61020000]      <2> 	mov ebx, [timenanoseconds]
  5363 000042D0 A3[90430000]        <2> 	mov [.time], eax
  5364 000042D5 891D[94430000]      <2> 	mov [.time + 4], ebx
  5365 000042DB C3                  <2> 	ret
  5366                              <2> 	
  5367                              <2> .etime:
  5368 000042DC A1[5D020000]        <2> 	mov eax, [timeseconds]
  5369 000042E1 8B1D[61020000]      <2> 	mov ebx, [timenanoseconds]
  5370 000042E7 8B0D[90430000]      <2> 	mov ecx, [.time]
  5371 000042ED 8B15[94430000]      <2> 	mov edx, [.time + 4]
  5372 000042F3 C1EA0A              <2> 	shr edx, 10
  5373 000042F6 C1EB0A              <2> 	shr ebx, 10
  5374 000042F9 29C8                <2> 	sub eax, ecx
  5375 000042FB 3D00000000          <2> 	cmp eax, 0
  5376 00004300 740E                <2> 	je .notclp
  5377                              <2> .tclp:
  5378 00004302 81C340420F00        <2> 	add ebx, 1000000
  5379 00004308 48                  <2> 	dec eax
  5380 00004309 3D00000000          <2> 	cmp eax, 0
  5381 0000430E 75F2                <2> 	jne .tclp
  5382                              <2> .notclp:
  5383 00004310 29D3                <2> 	sub ebx, edx
  5384 00004312 C3                  <2> 	ret
  5385                              <2> 	
  5386                              <2> .st:
  5387 00004313 6631C0              <2> 	xor ax, ax
  5388 00004316 6631DB              <2> 	xor bx, bx
  5389 00004319 668B0D[F0530000]    <2> 	mov cx, [resolutiony]
  5390 00004320 668B15[EE530000]    <2> 	mov dx, [resolutionx]
  5391                              <2> .lp:
  5392 00004327 60                  <2> 	pusha
  5393 00004328 E8BA270000          <2> 	call drawline
  5394 0000432D 61                  <2> 	popa
  5395                              <2> .noswitch
  5396 0000432E 47                  <2> 	inc edi
  5397 0000432F 6643                <2> 	inc bx
  5398 00004331 664A                <2> 	dec dx
  5399 00004333 6681FB0000          <2> 	cmp bx, 0
  5400 00004338 74ED                <2> 	je .lp
  5401 0000433A 6681FA0000          <2> 	cmp dx, 0
  5402 0000433F 75E6                <2> 	jne .lp
  5403                              <2> .lp2:
  5404 00004341 60                  <2> 	pusha
  5405 00004342 E8A0270000          <2> 	call drawline
  5406 00004347 61                  <2> 	popa
  5407 00004348 47                  <2> 	inc edi
  5408 00004349 6640                <2> 	inc ax
  5409 0000434B 6649                <2> 	dec cx
  5410 0000434D 6681F90000          <2> 	cmp cx, 0
  5411 00004352 75ED                <2> 	jne .lp2
  5412 00004354 C3                  <2> 	ret
  5413                              <2> 	
  5414 00004355 6C696E657320776572- <2> .msg db "lines were drawn in ",0
  5415 0000435E 6520647261776E2069- <2>
  5416 00004367 6E2000              <2>
  5417 0000436A 636972636C65732077- <2> .msgcircle db "circles were drawn in ",0
  5418 00004373 65726520647261776E- <2>
  5419 0000437C 20696E2000          <2>
  5420 00004381 6D6963726F7365636F- <2> .msgtime db "microseconds.",10,0
  5421 0000438A 6E64732E0A00        <2>
  5422 00004390 0000000000000000    <2> .time dd 0,0	
  5423                              <1> %endif
  5424                              <1> %include 'source/programs/help.asm'
  5425 00004398 FF2C68656C7000      <2> db 255,44,"help",0
  5426                              <2> lscmd:	
  5427 0000439F B00D                <2> 		mov al, 13
  5428 000043A1 E893DEFFFF          <2> 		call prcharq
  5429 000043A6 BE[8A300000]        <2> 		mov esi, progstart
  5430 000043AB BB[FE4F0000]        <2> 		mov ebx, progend
  5431 000043B0 BE[96A70000]        <2> dir:	mov esi, fileindex
  5432 000043B5 8A06                <2> 	dirnxt:	mov al, [esi]
  5433 000043B7 30E4                <2> 		xor ah, ah
  5434 000043B9 3CFF                <2> 		cmp al, 255
  5435 000043BB 7415                <2> 		je dirfnd
  5436 000043BD 46                  <2> 		inc esi
  5437 000043BE 81FE[96AB0000]      <2> 		cmp esi,  fileindexend
  5438 000043C4 7339                <2> 		jae dirdn
  5439 000043C6 EBED                <2> 		jmp dirnxt
  5440                              <2> 	dirfnd3:
  5441 000043C8 46                  <2> 		inc esi
  5442 000043C9 81FE[96AB0000]      <2> 		cmp esi, fileindexend
  5443 000043CF 76E4                <2> 		jbe dirnxt
  5444 000043D1 4E                  <2> 		dec esi
  5445 000043D2 46                  <2> 	dirfnd:	inc esi
  5446 000043D3 8A06                <2> 		mov al, [esi]
  5447 000043D5 30E4                <2> 		xor ah, ah
  5448 000043D7 3C2C                <2> 		cmp al, 44
  5449 000043D9 740B                <2> 		je dirfnd2
  5450 000043DB 46                  <2> 		inc esi
  5451 000043DC 81FE[96AB0000]      <2> 		cmp esi,  fileindexend
  5452 000043E2 731B                <2> 		jae dirdn
  5453 000043E4 EBCF                <2> 		jmp dirnxt
  5454 000043E6 46                  <2> 	dirfnd2: inc esi
  5455 000043E7 E804D9FFFF          <2> 		call printquiet
  5456 000043EC 56                  <2> 		push esi
  5457 000043ED B009                <2> 		mov al, 9
  5458 000043EF E845DEFFFF          <2> 		call prcharq
  5459 000043F4 5E                  <2> 		pop esi
  5460 000043F5 81FE[96AB0000]      <2> 		cmp esi,  fileindexend
  5461 000043FB 7302                <2> 		jae dirdn
  5462 000043FD EBB6                <2> 		jmp dirnxt
  5463 000043FF BE[7F830000]        <2> 	dirdn:	mov esi, line
  5464 00004404 E8F9D8FFFF          <2> 			call print
  5465 00004409 C3                  <2> 			ret
  5466 0000440A 00                  <2> currentdir db 0
  5467                              <1> %include 'source/programs/if.asm'
  5468 0000440B FF2C696600          <2> 	db 255,44,"if",0
  5469 00004410 30C0                <2> ifcmd:	xor al, al
  5470 00004412 3805[10AE0000]      <2> 	cmp [BATCHISON], al
  5471 00004418 0F8414F3FFFF        <2> 	je near notbatch
  5472 0000441E 8B1D[342C0000]      <2> 	mov ebx, [currentcommandloc]
  5473 00004424 81C303000000        <2> 	add ebx, 3
  5474 0000442A 89DE                <2> 	mov esi, ebx
  5475 0000442C 8A06                <2> chkeqsn: mov al, [esi]
  5476 0000442E 3C00                <2> 	cmp al, 0
  5477 00004430 0F84FCF2FFFF        <2> 	je near notbatch
  5478 00004436 3C3D                <2> 	cmp al, '='
  5479 00004438 0F8403000000        <2> 	je near chkeqdn
  5480 0000443E 46                  <2> 	inc esi
  5481 0000443F EBEB                <2> 	jmp chkeqsn
  5482 00004441 B000                <2> chkeqdn: mov al, 0 
  5483 00004443 8806                <2> 	mov [esi], al
  5484 00004445 46                  <2> 	inc esi
  5485 00004446 E8EDE7FFFF          <2> 	call tester
  5486 0000444B 3C01                <2> 	cmp al, 1
  5487 0000444D 0F8405000000        <2> 	je near trueif
  5488 00004453 E91C000000          <2> 	jmp falseif
  5489 00004458 31C0                <2> trueif:	xor eax, eax
  5490 0000445A A0[A7AD0000]        <2> 	mov al, [IFON]
  5491 0000445F FEC0                <2> 	inc al
  5492 00004461 A2[A7AD0000]        <2> 	mov [IFON], al
  5493 00004466 30E4                <2> 	xor ah, ah
  5494 00004468 BE[A8AD0000]        <2> 	mov esi, IFTRUE
  5495 0000446D 01C6                <2> 	add esi, eax
  5496 0000446F B401                <2> 	mov ah, 1
  5497 00004471 8826                <2> 	mov [esi], ah
  5498 00004473 C3                  <2> 	ret 
  5499 00004474 31C0                <2> falseif: xor eax, eax
  5500 00004476 A0[A7AD0000]        <2> 	mov al, [IFON]
  5501 0000447B FEC0                <2> 	inc al
  5502 0000447D A2[A7AD0000]        <2> 	mov [IFON], al
  5503 00004482 30E4                <2> 	xor ah, ah
  5504 00004484 BE[A8AD0000]        <2> 	mov esi, IFTRUE
  5505 00004489 01C6                <2> 	add esi, eax
  5506 0000448B 30E4                <2> 	xor ah, ah
  5507 0000448D 8826                <2> 	mov [esi], ah
  5508 0000448F C3                  <2> 	ret 
  5509                              <1> %include 'source/programs/keycode.asm'
  5510 00004490 FF2C6B6579636F6465- <2> db 255,44,"keycode",0
  5511 00004499 00                  <2>
  5512                              <2> keycode:
  5513 0000449A C605[13220000]00    <2> 	mov byte [trans], 0
  5514 000044A1 C605[AF660000]00    <2> 	mov byte [threadson], 0
  5515                              <2> %ifdef io.serial
  5516                              <2> .noserial:
  5517                              <2> 	hlt
  5518                              <2> 	mov dx, [serial.address]
  5519                              <2> 	in al, dx
  5520                              <2> 	cmp al, 0
  5521                              <2> 	je .noserial
  5522                              <2> 	mov cl, al
  5523                              <2> 	call showhexsmall
  5524                              <2> 	cmp al, 0x1B
  5525                              <2> 	jne .noserial
  5526                              <2> 	in al, dx
  5527                              <2> 	mov cl, al
  5528                              <2> 	call showhexsmall
  5529                              <2> 	cmp cl, 0x5B
  5530                              <2> 	je .noserial
  5531                              <2> 	ret
  5532                              <2> %else
  5533 000044A8 E87B190000          <2> 	call getkey
  5534 000044AD 31C0                <2> 	xor eax, eax
  5535 000044AF 31C9                <2> 	xor ecx, ecx
  5536 000044B1 8A0D[085E0000]      <2> 	mov cl, [specialkey]
  5537 000044B7 80F900              <2> 	cmp cl, 0
  5538 000044BA 0F8405000000        <2> 	je near .nospecialkeycode
  5539 000044C0 E882E9FFFF          <2> 	call showhexsmall
  5540                              <2> .nospecialkeycode:
  5541 000044C5 66A1[11220000]      <2> 	mov ax, [lastkey]
  5542 000044CB 88E1                <2> 	mov cl, ah
  5543 000044CD E875E9FFFF          <2> 	call showhexsmall
  5544 000044D2 80FC01              <2> 	cmp ah, 1
  5545 000044D5 75C3                <2> 	jne keycode
  5546 000044D7 C3                  <2> 	ret
  5547                              <2> %endif
  5548                              <1> %include 'source/programs/logout.asm'
  5549 000044D8 FF2C6C6F676F757400  <2> 	db 255,44,"logout",0
  5550 000044E1 E9D4E2FFFF          <2> 	jmp os
  5551                              <1> %include 'source/programs/loop.asm'
  5552 000044E6 FF2C6C6F6F7000      <2> 	db 255,44,"loop",0
  5553 000044ED 803D[11AE0000]00    <2> 	cmp byte [LOOPON], 0
  5554 000044F4 0F8501000000        <2> 	jne near filoop
  5555 000044FA C3                  <2> 	ret
  5556 000044FB 8B35[12AE0000]      <2> filoop: mov esi, [LOOPPOS]
  5557 00004501 FE0D[A7AD0000]      <2> 	dec byte [IFON]
  5558 00004507 C605[11AE0000]00    <2> 	mov byte [LOOPON], 0
  5559 0000450E 8935[0CAE0000]      <2> 	mov [BATCHPOS], esi
  5560 00004514 8935[5A360000]      <2> 	mov [batchedi], esi
  5561 0000451A C3                  <2> 	ret 
  5562                              <1> %include 'source/programs/ls.asm'
  5563 0000451B FF2C6C7300          <2> db 255,44,"ls",0
  5564 00004520 BE[A4930000]        <2> 		mov esi, diskfileindex
  5565                              <2> 	diskindexdir:
  5566 00004525 803E5F              <2> 		cmp byte [esi], '_'
  5567 00004528 7440                <2> 		je nextdiskindexdir
  5568 0000452A E8C1D7FFFF          <2> 		call printquiet
  5569 0000452F 56                  <2> 		push esi
  5570 00004530 BE[8A450000]        <2> 		mov esi, disktab
  5571 00004535 E8B6D7FFFF          <2> 		call printquiet
  5572 0000453A 5E                  <2> 		pop esi
  5573 0000453B 8B4E05              <2> 		mov ecx, [esi + 5]
  5574 0000453E C605[462E0000]05    <2> 		mov byte [firsthexshown], 5
  5575 00004545 E8DBE9FFFF          <2> 		call showdec
  5576 0000454A 56                  <2> 		push esi
  5577 0000454B BE[7F830000]        <2> 		mov esi, line
  5578 00004550 E89BD7FFFF          <2> 		call printquiet
  5579 00004555 5E                  <2> 		pop esi
  5580 00004556 81C609000000        <2> 		add esi, 9
  5581 0000455C 81FE[4E950000]      <2> 		cmp esi, enddiskfileindex
  5582 00004562 72C1                <2> 		jb diskindexdir
  5583 00004564 E803E0FFFF          <2> 		call termcopy
  5584 00004569 C3                  <2> 		ret
  5585                              <2> 	nextdiskindexdir:
  5586 0000456A 46                  <2> 		inc esi
  5587 0000456B 803E00              <2> 		cmp byte [esi], 0
  5588 0000456E 75FA                <2> 		jne nextdiskindexdir
  5589 00004570 81C609000000        <2> 		add esi, 9
  5590 00004576 81FE[4E950000]      <2> 		cmp esi, enddiskfileindex
  5591 0000457C 72A7                <2> 		jb diskindexdir
  5592 0000457E E8E9DFFFFF          <2> 		call termcopy
  5593 00004583 C3                  <2> 		ret
  5594                              <2> 		
  5595 00004584 4469736B2000        <2> 		diskmsg db "Disk ",0
  5596 0000458A 0D09090900          <2> 		disktab db 13,9,9,9,0
  5597                              <1> %include 'source/programs/memory.asm'
  5598 0000458F FF2C6D656D6F727900  <2> db 255,44,"memory",0
  5599 00004598 BE[56950000]        <2> 	mov esi, memlistbuf
  5600 0000459D 31FF                <2> 	xor edi, edi
  5601 0000459F 668B3D[96970000]    <2> 	mov di, [memlistend]
  5602 000045A6 01F7                <2> 	add edi, esi
  5603                              <2> printmemmap:
  5604 000045A8 8B0E                <2> 	mov ecx, [esi]
  5605 000045AA E8ACE8FFFF          <2> 	call showhex
  5606 000045AF 81C608000000        <2> 	add esi, 8
  5607 000045B5 8B0E                <2> 	mov ecx, [esi]
  5608 000045B7 E89FE8FFFF          <2> 	call showhex
  5609 000045BC 81C608000000        <2> 	add esi, 8
  5610 000045C2 8B0E                <2> 	mov ecx, [esi]
  5611 000045C4 E892E8FFFF          <2> 	call showhex
  5612 000045C9 81C608000000        <2> 	add esi, 8
  5613 000045CF 57                  <2> 	push edi
  5614 000045D0 56                  <2> 	push esi
  5615 000045D1 BE[7F830000]        <2> 	mov esi, line
  5616 000045D6 E827D7FFFF          <2> 	call print
  5617 000045DB 5E                  <2> 	pop esi
  5618 000045DC 5F                  <2> 	pop edi
  5619 000045DD 39FE                <2> 	cmp esi, edi
  5620 000045DF 72C7                <2> 	jb printmemmap
  5621 000045E1 C3                  <2> 	ret
  5622                              <2> 	
  5623                              <1> %include 'source/programs/pci.asm'
  5624 000045E2 FF2C70636900        <2> db 255,44,"pci",0
  5625 000045E8 E84A1C0000          <2> 	call pcidump
  5626 000045ED C3                  <2> 	ret 
  5627                              <1> %include 'source/programs/play.asm'
  5628 000045EE FF2C706C61796100    <2> db 255,44,"playa",0
  5629 000045F6 8B3D[342C0000]      <2> 	mov edi, [currentcommandloc]
  5630 000045FC 81C706000000        <2> 	add edi, 6
  5631 00004602 E833000000          <2> 	call playasync
  5632 00004607 C3                  <2> 	ret
  5633 00004608 FF2C706C617900      <2> db 255,44,"play",0
  5634                              <2> play:
  5635 0000460F 8B3D[342C0000]      <2> 	mov edi, [currentcommandloc]
  5636 00004615 81C705000000        <2> 	add edi, 5
  5637 0000461B E81A000000          <2> 	call playasync
  5638                              <2> .waitforsound:
  5639                              <2> %ifdef sound.included
  5640 00004620 A1[B55A0000]        <2> 	mov eax, [Length0]
  5641 00004625 660B05[B95A0000]    <2> 	or ax, [Length1]
  5642                              <2> %endif
  5643 0000462C 0A05[65020000]      <2> 	or al, [soundon]
  5644 00004632 3D00000000          <2> 	cmp eax, 0
  5645 00004637 75E7                <2> 	jne .waitforsound
  5646 00004639 C3                  <2> 	ret
  5647                              <2> playasync:
  5648 0000463A BE0000C000          <2> 	mov esi, 0xC00000
  5649 0000463F E8CC1E0000          <2> 	call loadfile
  5650 00004644 81FA94010000        <2> 	cmp edx, 404
  5651 0000464A 743F                <2> 	je nosoundfound
  5652 0000464C BB0000C000          <2> 	mov ebx, 0xC00000
  5653 00004651 817B0857415645      <2> 	cmp dword [ebx + 8], "WAVE"
  5654 00004658 0F843F010000        <2> 	je near wave_player
  5655 0000465E 66813B534E          <2> 	cmp word [ebx], "SN"
  5656 00004663 7526                <2> 	jne nosoundfound
  5657 00004665 81C306000000        <2> 	add ebx, 6
  5658 0000466B 891D[68020000]      <2> 	mov [soundpos], ebx
  5659 00004671 035BFC              <2> 	add ebx, [ebx - 4]
  5660 00004674 891D[6C020000]      <2> 	mov [soundendpos], ebx
  5661 0000467A 66C705[66020000]00- <2> 	mov word [soundrepititions], 0
  5662 00004682 00                  <2>
  5663 00004683 C605[65020000]01    <2> 	mov byte [soundon], 1
  5664 0000468A C3                  <2> 	ret
  5665                              <2> nosoundfound:
  5666 0000468B BE[B1460000]        <2> 	mov esi, notfoundsound
  5667 00004690 E86DD6FFFF          <2> 	call print
  5668 00004695 8B35[342C0000]      <2> 	mov esi, [currentcommandloc]
  5669 0000469B 81C605000000        <2> 	add esi, 5
  5670 000046A1 E85CD6FFFF          <2> 	call print
  5671 000046A6 BE[4E830000]        <2> 	mov esi, notfound2
  5672 000046AB E852D6FFFF          <2> 	call print
  5673 000046B0 C3                  <2> 	ret
  5674 000046B1 706C61793A2000      <2> notfoundsound db "play: ",0
  5675                              <2> 
  5676                              <2> %ifdef sound.included
  5677                              <2> sbplay:
  5678 000046B8 BE0000C000          <2> 		mov esi, 0xC00000
  5679 000046BD 89F3                <2> 		mov ebx, esi
  5680 000046BF 81C62C000000        <2> 		add esi, 44
  5681 000046C5 29F7                <2> 		sub edi, esi
  5682 000046C7 66893D[B95A0000]    <2> 		mov [Length1], di
  5683 000046CE C1EF0F              <2> 		shr edi, 15
  5684 000046D1 893D[B55A0000]      <2> 		mov [Length0], edi
  5685 000046D7 8B4B18              <2> 		mov ecx, [ebx + 24]
  5686 000046DA 890D[C65A0000]      <2> 		mov [Freq], ecx
  5687 000046E0 31C0                <2> 		xor eax, eax
  5688 000046E2 BA0000C000          <2> 		mov	edx, 0xC00000 ;physical location of sound
  5689 000046E7 81C22C000000        <2> 		add edx, 44
  5690 000046ED 01D0                <2> 		add	eax, edx
  5691 000046EF 89C6                <2> 		mov esi, eax
  5692 000046F1 31C9                <2> 		xor ecx, ecx
  5693 000046F3 31DB                <2> 		xor ebx, ebx
  5694 000046F5 66891D[C35A0000]    <2> 		mov [SegLoc], bx
  5695 000046FC 81C300000800        <2> 		add ebx, 0x80000
  5696 00004702 66B9FFFF            <2> 		mov cx, 0xFFFF
  5697 00004706 6681FF0000          <2> 		cmp di, 0
  5698 0000470B 7520                <2> 		jne .autoinit
  5699 0000470D 668B0D[B95A0000]    <2> 		mov cx, [Length1]
  5700 00004714 C605[B45A0000]01    <2> 		mov byte [OddLength], 1
  5701 0000471B 6681F90080          <2> 		cmp cx, 32768
  5702 00004720 730B                <2> 		jae .autoinit
  5703 00004722 C605[B45A0000]00    <2> 		mov byte [OddLength], 0
  5704 00004729 66D1E1              <2> 		shl cx, 1
  5705 0000472C 47                  <2> 		inc edi
  5706                              <2> .autoinit:
  5707 0000472D 4F                  <2> 		dec edi
  5708 0000472E 893D[B55A0000]      <2> 		mov [Length0], edi
  5709 00004734 66890D[B95A0000]    <2> 		mov [Length1], cx
  5710 0000473B 66D1E9              <2> 		shr cx, 1
  5711 0000473E 6641                <2> 		inc cx
  5712 00004740 01C8                <2> 		add eax, ecx
  5713 00004742 A3[BB5A0000]        <2> 		mov [NextMemLoc], eax
  5714 00004747 8935[BF5A0000]      <2> 		mov	[MemLoc], esi
  5715 0000474D E81A120000          <2> 		call DMACopy
  5716 00004752 31DB                <2> 		xor ebx, ebx
  5717 00004754 668B1D[C35A0000]    <2> 		mov bx, [SegLoc]
  5718 0000475B 31C9                <2> 		xor ecx, ecx
  5719 0000475D 668B0D[B95A0000]    <2> 		mov cx, [Length1]
  5720 00004764 66D1E9              <2> 		shr cx, 1
  5721 00004767 6641                <2> 		inc cx
  5722 00004769 01CB                <2> 		add ebx, ecx
  5723 0000476B 66891D[C35A0000]    <2> 		mov [SegLoc], bx
  5724 00004772 81C300000800        <2> 		add ebx, 0x80000
  5725 00004778 8B35[BB5A0000]      <2> 		mov esi, [NextMemLoc]
  5726 0000477E 89F0                <2> 		mov eax, esi
  5727 00004780 01C8                <2> 		add eax, ecx
  5728 00004782 A3[BB5A0000]        <2> 		mov [NextMemLoc], eax
  5729 00004787 8935[BF5A0000]      <2> 		mov	[MemLoc], esi
  5730 0000478D E8DA110000          <2> 		call DMACopy
  5731 00004792 E8F8110000          <2> 		call DMAPlay
  5732 00004797 E882120000          <2> 		call PlayDSP
  5733 0000479C C3                  <2> 		ret
  5734                              <2> 
  5735                              <2> wave_player:
  5736 0000479D 803D[CB5A0000]01    <2> 	cmp byte [SoundBlaster], 1
  5737 000047A4 0F840EFFFFFF        <2> 	je near sbplay
  5738 000047AA BE[B5470000]        <2> 	mov esi, nosoundblaster
  5739 000047AF E84ED5FFFF          <2> 	call print
  5740 000047B4 C3                  <2> 	ret
  5741                              <2> %else
  5742                              <2> 	wave_player:
  5743                              <2> 		mov esi, nosoundblaster
  5744                              <2> 		call print
  5745                              <2> 		ret
  5746                              <2> %endif
  5747 000047B5 4E6F20536F756E6420- <2> nosoundblaster db "No Sound Blaster detected.",10,0
  5748 000047BE 426C61737465722064- <2>
  5749 000047C7 657465637465642E0A- <2>
  5750 000047D0 00                  <2>
  5751                              <1> %include 'source/programs/pwd.asm'
  5752 000047D1 FF2C70776400        <2> db 255,44,"pwd",0
  5753 000047D7 BE[A2AB0000]        <2> 	mov esi, currentfolder
  5754 000047DC E80FD5FFFF          <2> 	call printquiet
  5755 000047E1 BE[7F830000]        <2> 	mov esi, line
  5756 000047E6 E817D5FFFF          <2> 	call print
  5757 000047EB C3                  <2> 	ret
  5758                              <2> 	
  5759                              <1> %include 'source/programs/reboot.asm'
  5760 000047EC FF2C7265626F6F7400  <2> 	db 255,44,"reboot",0
  5761 000047F5 0F011D[FF470000]    <2> 		lidt [idtreboot]
  5762 000047FC CD00                <2> 		int 0
  5763 000047FE F4                  <2> 		hlt
  5764                              <2> 	
  5765 000047FF 0000                <2> 	idtreboot dw 0
  5766 00004801 00000000            <2> 			  dd 0
  5767                              <2> 
  5768                              <2> 	coldboot:
  5769 00004805 66B84000            <2> 		MOV AX, 0040h
  5770 00004809 8EC0                <2> 		MOV ES, AX
  5771 0000480B 2666C7057200000000- <2> 		MOV WORD [ES:00072h], 0h
  5772 00004814 00                  <2>
  5773 00004815 EA00000000FFFF      <2> 		JMP 0FFFFh:0000h
  5774 0000481C CF                  <2> 		IRET
  5775                              <2> 
  5776                              <2> 	warmboot:
  5777 0000481D 66B84000            <2> 		MOV AX, 0040h
  5778 00004821 8EC0                <2> 		MOV ES, AX
  5779 00004823 2666C7057200000034- <2> 		MOV WORD [ES:00072h], 01234h
  5780 0000482C 12                  <2>
  5781 0000482D EA00000000FFFF      <2> 		JMP 0FFFFh:0000h
  5782 00004834 CF                  <2> 		IRET
  5783                              <2> 		
  5784                              <1> %include 'source/programs/reg.asm'
  5785 00004835 FF2C72656700        <2> db 255,44,"reg",0
  5786 0000483B CD03                <2> 	int 3
  5787 0000483D C3                  <2> 	ret 
  5788                              <1> %include 'source/programs/show.asm'
  5789 0000483E FF2C73686F7700      <2> db 255,44,"show",0
  5790 00004845 8B3D[342C0000]      <2> 		mov edi, [currentcommandloc]
  5791 0000484B 81C705000000        <2> 		add edi, 5
  5792 00004851 BE00008000          <2> 		mov esi, 0x800000
  5793 00004856 E8B51C0000          <2> 		call loadfile
  5794 0000485B 81FA94010000        <2> 		cmp edx, 404
  5795 00004861 0F8483000000        <2> 		je near filenotfound
  5796 00004867 BE00008000          <2> 		mov esi, 0x800000
  5797                              <2> %ifdef gui.included
  5798 0000486C 66813E424D          <2> 		cmp word [esi], "BM"
  5799 00004871 7410                <2> 		je bmpfound
  5800                              <2> %endif
  5801 00004873 E88AD4FFFF          <2> 		call print
  5802 00004878 BE[7F830000]        <2> 		mov esi, line
  5803 0000487D E880D4FFFF          <2> 		call print
  5804 00004882 C3                  <2> 		ret
  5805                              <2> %ifdef gui.included
  5806                              <2> bmpfound:
  5807 00004883 803D[50950000]00    <2> 		cmp byte [guion], 0
  5808 0000488A 0F8428000000        <2> 		je near noguibmp
  5809 00004890 BE00008000          <2> 		mov esi, 0x800000
  5810 00004895 31C9                <2> 		xor ecx, ecx
  5811 00004897 31D2                <2> 		xor edx, edx
  5812 00004899 31C0                <2> 		xor eax, eax
  5813 0000489B 31DB                <2> 		xor ebx, ebx
  5814 0000489D E8321E0000          <2> 		call showbmp
  5815 000048A2 30C0                <2> 		xor al, al
  5816 000048A4 B405                <2> 		mov ah, 5
  5817 000048A6 CD30                <2> 		int 30h
  5818 000048A8 E866230000          <2> 		call guiclear
  5819 000048AD E801200000          <2> 		call clearmousecursor
  5820 000048B2 E8E1230000          <2> 		call reloadallgraphics
  5821 000048B7 C3                  <2> 		ret
  5822                              <2> noguibmp:
  5823 000048B8 BE[C3480000]        <2> 		mov esi, warnguimsg
  5824 000048BD E840D4FFFF          <2> 		call print
  5825 000048C2 C3                  <2> 		ret
  5826 000048C3 546869732063616E20- <2> warnguimsg db "This can not be done without the GUI.",10,0
  5827 000048CC 6E6F7420626520646F- <2>
  5828 000048D5 6E6520776974686F75- <2>
  5829 000048DE 742074686520475549- <2>
  5830 000048E7 2E0A00              <2>
  5831                              <2> %endif
  5832                              <2> 
  5833                              <2> filenotfound:
  5834 000048EA BE[1D490000]        <2> 		mov esi, filenf
  5835 000048EF E80ED4FFFF          <2> 		call print
  5836 000048F4 8B35[342C0000]      <2> 		mov esi, [currentcommandloc]
  5837                              <2> findfilenotfoundzero:
  5838 000048FA 8A06                <2> 		mov al, [esi]
  5839 000048FC 46                  <2> 		inc esi
  5840 000048FD 3C00                <2> 		cmp al, 0
  5841 000048FF 7411                <2> 		je nofilenamenotfound
  5842 00004901 81FE[16C60000]      <2> 		cmp esi, buftxtend
  5843 00004907 7309                <2> 		jae nofilenamenotfound
  5844 00004909 3C20                <2> 		cmp al, " "
  5845 0000490B 75ED                <2> 		jne findfilenotfoundzero
  5846 0000490D E8F0D3FFFF          <2> 		call print
  5847                              <2> nofilenamenotfound:
  5848 00004912 BE[28490000]        <2> 		mov esi, filenf2
  5849 00004917 E8E6D3FFFF          <2> 		call print
  5850 0000491C C3                  <2> 		ret
  5851 0000491D 5468652066696C6520- <2> filenf db "The file ",34,0
  5852 00004926 2200                <2>
  5853 00004928 2220636F756C64206E- <2> filenf2 db 34," could not be found.",10,0
  5854 00004931 6F7420626520666F75- <2>
  5855 0000493A 6E642E0A00          <2>
  5856                              <1> %include 'source/programs/shush.asm'
  5857 0000493F FF2C736875736800    <2> db 255,44,"shush",0	;if you add 2 values it will switch size using the first as X in chars and the second as Y in chars
  5858                              <2> shushprog:
  5859                              <2> %ifdef gui.included
  5860 00004947 803D[50950000]00    <2> 	cmp byte [guion], 0
  5861 0000494E 0F84AC000000        <2> 	je near .noswitchsize
  5862 00004954 8B35[342C0000]      <2> 	mov esi, [currentcommandloc]
  5863 0000495A 81C606000000        <2> 	add esi, 6
  5864 00004960 56                  <2> 	push esi
  5865 00004961 4E                  <2> 	dec esi
  5866                              <2> .findspace:
  5867 00004962 46                  <2> 	inc esi
  5868 00004963 8A06                <2> 	mov al, [esi]
  5869 00004965 3C00                <2> 	cmp al, 0
  5870 00004967 0F8493000000        <2> 	je near .noswitchsize
  5871 0000496D 3C58                <2> 	cmp al, "X"
  5872 0000496F 7408                <2> 	je .donefind
  5873 00004971 3C78                <2> 	cmp al, "x"
  5874 00004973 7404                <2> 	je .donefind
  5875 00004975 3C20                <2> 	cmp al, " "
  5876 00004977 75E9                <2> 	jne .findspace
  5877                              <2> .donefind:
  5878 00004979 30C0                <2> 	xor al, al
  5879 0000497B 8806                <2> 	mov [esi], al
  5880 0000497D 46                  <2> 	inc esi
  5881 0000497E 89F7                <2> 	mov edi, esi
  5882 00004980 E882E6FFFF          <2> 	call cnvrttxt
  5883 00004985 89C8                <2> 	mov eax, ecx
  5884 00004987 5E                  <2> 	pop esi
  5885 00004988 50                  <2> 	push eax
  5886 00004989 89F7                <2> 	mov edi, esi
  5887 0000498B E877E6FFFF          <2> 	call cnvrttxt
  5888 00004990 89CB                <2> 	mov ebx, ecx
  5889 00004992 58                  <2> 	pop eax	
  5890 00004993 6681FB0000          <2> 	cmp bx, 0
  5891 00004998 0F8462000000        <2> 	je near .noswitchsize
  5892 0000499E 663D0000            <2> 	cmp ax, 0
  5893 000049A2 0F8458000000        <2> 	je near .noswitchsize
  5894 000049A8 66C1E303            <2> 	shl bx, 3
  5895 000049AC 66C1E004            <2> 	shl ax, 4
  5896 000049B0 663B1D[EE530000]    <2> 	cmp bx, [resolutionx]
  5897 000049B7 7607                <2> 	jbe .nofixx
  5898 000049B9 668B1D[EE530000]    <2> 	mov bx, [resolutionx]
  5899                              <2> .nofixx:
  5900 000049C0 663B05[F0530000]    <2> 	cmp ax, [resolutiony]
  5901 000049C7 7606                <2> 	jbe .nofixy
  5902 000049C9 66A1[F0530000]      <2> 	mov ax, [resolutiony]
  5903                              <2> .nofixy:
  5904 000049CF 6631C9              <2> 	xor cx, cx
  5905 000049D2 6631D2              <2> 	xor dx, dx
  5906 000049D5 66891D[756F0000]    <2> 	mov [termwindow], bx
  5907 000049DC 66A3[776F0000]      <2> 	mov [termwindow + 2], ax	;the previous lines of code make a large terminal window that is 4 characters smaller than the screen
  5908 000049E2 BE[756F0000]        <2> 	mov esi, termwindow
  5909 000049E7 31DB                <2> 	xor ebx, ebx
  5910 000049E9 6631C0              <2> 	xor ax, ax
  5911 000049EC E88D2A0000          <2> 	call showwindow
  5912 000049F1 E81D220000          <2> 	call guiclear
  5913 000049F6 E86DD3FFFF          <2> 	call clear
  5914 000049FB E898220000          <2> 	call reloadallgraphics
  5915                              <2> .noswitchsize:
  5916                              <2> %endif
  5917 00004A00 BE[0B4A0000]        <2> 	mov esi, shushmsg
  5918 00004A05 E8F8D2FFFF          <2> 	call print
  5919 00004A0A C3                  <2> 	ret
  5920 00004A0B 57656C636F6D652074- <2> 	shushmsg db "Welcome to the SollerOS Hardly Unix-Compatible Shell!",10,0
  5921 00004A14 6F2074686520536F6C- <2>
  5922 00004A1D 6C65724F5320486172- <2>
  5923 00004A26 646C7920556E69782D- <2>
  5924 00004A2F 436F6D70617469626C- <2>
  5925 00004A38 65205368656C6C210A- <2>
  5926 00004A41 00                  <2>
  5927                              <1> %include 'source/programs/stop.asm'
  5928 00004A42 FF2C73746F7000      <2> 	db 255,44,"stop",0
  5929 00004A49 30C0                <2> stop:	xor al, al
  5930 00004A4B A2[10AE0000]        <2> 	mov [BATCHISON], al
  5931 00004A50 A2[A7AD0000]        <2> 	mov [IFON], al
  5932 00004A55 A2[A8AD0000]        <2> 	mov [IFTRUE], al
  5933 00004A5A A2[11AE0000]        <2> 	mov [LOOPON], al
  5934 00004A5F C3                  <2> 	ret 
  5935                              <1> %include 'source/programs/system.asm'
  5936 00004A60 FF2C73797374656D00  <2> 	db 255,44,"system",0
  5937 00004A69 BE[794B0000]        <2> 	mov esi, kernelinfomsg
  5938 00004A6E E87DD2FFFF          <2> 	call printquiet
  5939 00004A73 B9[A4930000]        <2> 	mov ecx, osend
  5940 00004A78 E8A8E4FFFF          <2> 	call showdec
  5941 00004A7D BE[8E4B0000]        <2> 	mov esi, diskbytemsg
  5942 00004A82 E869D2FFFF          <2> 	call printquiet
  5943 00004A87 B9[A4930000]        <2> 	mov ecx, osend
  5944 00004A8C 81C1[84C22900]      <2> 	add ecx, commandbufend
  5945 00004A92 81E9[50950000]      <2> 	sub ecx, bssstart	;add the extra buffer space
  5946 00004A98 E888E4FFFF          <2> 	call showdec
  5947 00004A9D BE[A54B0000]        <2> 	mov esi, membytemsg
  5948 00004AA2 E849D2FFFF          <2> 	call printquiet
  5949 00004AA7 BE[084C0000]        <2> 	mov esi, endofmemmsg
  5950 00004AAC E83FD2FFFF          <2> 	call printquiet
  5951 00004AB1 B9[84D63900]        <2> 	mov ecx, bssend
  5952 00004AB6 E8A0E3FFFF          <2> 	call showhex
  5953 00004ABB BE[BE4B0000]        <2> 	mov esi, systeminfomsg
  5954 00004AC0 E82BD2FFFF          <2> 	call printquiet
  5955                              <2> getcpuspeed:
  5956 00004AC5 B8FE000000          <2> 	mov eax, 0xFE
  5957 00004ACA E621                <2> 	out 0x21, al ;mask off all but timer interrupt
  5958 00004ACC B020                <2> 	mov al, 0x20
  5959 00004ACE E620                <2> 	out 0x20, al
  5960 00004AD0 F4                  <2> 	hlt
  5961 00004AD1 0F31                <2> 	rdtsc
  5962 00004AD3 89D6                <2> 	mov esi, edx
  5963 00004AD5 89C7                <2> 	mov edi, eax
  5964 00004AD7 31C0                <2> 	xor eax, eax
  5965 00004AD9 C605[46020000]01    <2> 	mov byte [testingcpuspeed], 1
  5966                              <2> cpuspeedloop:	;wait until next timer interrupt, then inc eax until the next
  5967 00004AE0 40                  <2> 	inc eax
  5968 00004AE1 EBFD                <2> 	jmp cpuspeedloop
  5969                              <2> cpuspeedloopend:
  5970 00004AE3 0F31                <2> 	rdtsc
  5971 00004AE5 29F8                <2> 	sub eax, edi
  5972 00004AE7 29F2                <2> 	sub edx, esi
  5973 00004AE9 8915[4F020000]      <2> 	mov [cpuclocksperint + 4], edx
  5974 00004AEF A3[4B020000]        <2> 	mov [cpuclocksperint], eax
  5975 00004AF4 31C0                <2> 	xor eax, eax
  5976 00004AF6 E621                <2> 	out 0x21, al
  5977 00004AF8 B020                <2> 	mov al, 0x20
  5978 00004AFA E620                <2> 	out 0x20, al
  5979 00004AFC 31D2                <2> 	xor edx, edx
  5980 00004AFE 31C0                <2> 	xor eax, eax
  5981 00004B00 A1[47020000]        <2> 	mov eax, [cpuspeedperint]
  5982 00004B05 D1E0                <2> 	shl eax, 1	;the cpu speed loop actually contains 2 commands so multiply the
  5983                              <2> 				;result by 2
  5984 00004B07 8B1D[59020000]      <2> 	mov ebx, [timeinterval]
  5985 00004B0D C1EB0A              <2> 	shr ebx, 10 ;divide the interval by 1024
  5986 00004B10 F7F3                <2> 	div ebx	;quotient in eax, remainder in edx
  5987 00004B12 89C1                <2> 	mov ecx, eax
  5988 00004B14 E80CE4FFFF          <2> 	call showdec
  5989 00004B19 BE[EC4B0000]        <2> 	mov esi, cpuspeedmsg
  5990 00004B1E E8CDD1FFFF          <2> 	call printquiet
  5991 00004B23 31D2                <2> 	xor edx, edx
  5992 00004B25 A1[4B020000]        <2> 	mov eax, [cpuclocksperint]
  5993 00004B2A 8B15[4F020000]      <2> 	mov edx, [cpuclocksperint + 4]
  5994 00004B30 8B1D[59020000]      <2> 	mov ebx, [timeinterval]
  5995 00004B36 C1EB0A              <2> 	shr ebx, 10
  5996 00004B39 F7F3                <2> 	div ebx
  5997 00004B3B 89C1                <2> 	mov ecx, eax
  5998 00004B3D E8E3E3FFFF          <2> 	call showdec
  5999 00004B42 BE[F24B0000]        <2> 	mov esi, cpuclockmsg
  6000 00004B47 E8A4D1FFFF          <2> 	call printquiet
  6001 00004B4C 8B0D[53020000]      <2> 	mov ecx, [memoryspace]
  6002 00004B52 C1E914              <2> 	shr ecx, 20
  6003 00004B55 41                  <2> 	inc ecx	;the reading is one MB behind
  6004 00004B56 E8CAE3FFFF          <2> 	call showdec
  6005 00004B5B BE[F74B0000]        <2> 	mov esi, memoryspacemsg
  6006 00004B60 E89DD1FFFF          <2> 	call print
  6007                              <2> %ifdef sound.included
  6008 00004B65 803D[CB5A0000]00    <2> 	cmp byte [SoundBlaster], 0
  6009 00004B6C 740A                <2> 	je .nosb
  6010 00004B6E BE[D44B0000]        <2> 	mov esi, soundblastermsg
  6011 00004B73 E88AD1FFFF          <2> 	call print
  6012                              <2> .nosb:
  6013                              <2> %endif
  6014 00004B78 C3                  <2> 	ret
  6015                              <2> 
  6016 00004B79 4B65726E656C20496E- <2> kernelinfomsg db "Kernel Information:",10,0
  6017 00004B82 666F726D6174696F6E- <2>
  6018 00004B8B 3A0A00              <2>
  6019 00004B8E 427974657320446973- <2> diskbytemsg db "Bytes Disk Space Used",10,0
  6020 00004B97 6B2053706163652055- <2>
  6021 00004BA0 7365640A00          <2>
  6022 00004BA5 4279746573204D656D- <2> membytemsg db "Bytes Memory Space Used",10,0
  6023 00004BAE 6F7279205370616365- <2>
  6024 00004BB7 20557365640A00      <2>
  6025 00004BBE 0A53797374656D2049- <2> systeminfomsg db 10,"System Information:",10,0
  6026 00004BC7 6E666F726D6174696F- <2>
  6027 00004BD0 6E3A0A00            <2>
  6028                              <2> %ifdef sound.included
  6029 00004BD4 536F756E64626C6173- <2> 	soundblastermsg db "Soundblaster Detected.",10,0
  6030 00004BDD 746572204465746563- <2>
  6031 00004BE6 7465642E0A00        <2>
  6032                              <2> %endif
  6033 00004BEC 4D4950530A00        <2> cpuspeedmsg db "MIPS",10,0
  6034 00004BF2 4D487A0A00          <2> cpuclockmsg db "MHz",10,0
  6035 00004BF7 4D42204D656D6F7279- <2> memoryspacemsg db "MB Memory Space",10,0
  6036 00004C00 2053706163650A00    <2>
  6037 00004C08 456E64206F66204D65- <2> endofmemmsg: db "End of Memory Space: 0x",0
  6038 00004C11 6D6F72792053706163- <2>
  6039 00004C1A 653A20307800        <2>
  6040                              <1> %include 'source/programs/time.asm'
  6041 00004C20 082E30303030303030- <2> timenscache db 8,".000000000"
  6042 00004C29 3030                <2>
  6043 00004C2B 200A00              <2> timenscacheend: db " ",10,0
  6044 00004C2E 00                  <2> istimeset db 0
  6045 00004C2F 456E74657220746865- <2> settimemsg db "Enter the current UNIX time:",10,0
  6046 00004C38 2063757272656E7420- <2>
  6047 00004C41 554E49582074696D65- <2>
  6048 00004C4A 3A0A00              <2>
  6049 00004C4D 00<rept>            <2> timeinputbuffer times 12 db 0
  6050 00004C59 00                  <2> timeinputbend: db 0
  6051                              <2> 
  6052 00004C5A FF2C74696D6500      <2> db 255,44,"time",0
  6053 00004C61 803D[2E4C0000]00    <2> 	cmp byte [istimeset], 0
  6054 00004C68 753A                <2> 	jne timeisset
  6055 00004C6A BE[2F4C0000]        <2> 	mov esi, settimemsg
  6056 00004C6F E88ED0FFFF          <2> 	call print
  6057 00004C74 BE[4D4C0000]        <2> 	mov esi, timeinputbuffer
  6058 00004C79 BF[594C0000]        <2> 	mov edi, timeinputbend
  6059 00004C7E E863D1FFFF          <2> 	call readline
  6060 00004C83 BE[4D4C0000]        <2> 	mov esi, timeinputbuffer
  6061 00004C88 31FF                <2> 	xor edi, edi
  6062 00004C8A E878E3FFFF          <2> 	call cnvrttxt
  6063 00004C8F 890D[5D020000]      <2> 	mov [timeseconds], ecx
  6064 00004C95 31C9                <2> 	xor ecx, ecx
  6065 00004C97 890D[61020000]      <2> 	mov [timenanoseconds], ecx
  6066 00004C9D C605[2E4C0000]01    <2> 	mov byte [istimeset], 1
  6067                              <2> timeisset:
  6068 00004CA4 8B0D[5D020000]      <2> 	mov ecx, [timeseconds]
  6069 00004CAA E876E2FFFF          <2> 	call showdec
  6070                              <2> 	
  6071 00004CAF 8B0D[61020000]      <2> 	mov ecx, [timenanoseconds]
  6072 00004CB5 BE[204C0000]        <2> 	mov esi, timenscache
  6073 00004CBA C7460230303030      <2> 	mov dword [esi+ 2], "0000"
  6074 00004CC1 C7460630303030      <2> 	mov dword [esi + 6], "0000"
  6075 00004CC8 C6460A30            <2> 	mov byte [esi + 10], "0"
  6076 00004CCC BE[2B4C0000]        <2> 	mov esi, timenscacheend
  6077 00004CD1 E832E0FFFF          <2> 	call convert
  6078 00004CD6 BE[204C0000]        <2> 	mov esi, timenscache
  6079 00004CDB E822D0FFFF          <2> 	call print
  6080                              <2> 	
  6081 00004CE0 E80F000000          <2> 	call time
  6082 00004CE5 BE[C04E0000]        <2> 	mov esi, timeshow
  6083 00004CEA E813D0FFFF          <2> 	call print
  6084 00004CEF E9BC000000          <2> 	jmp findday
  6085                              <2> time:
  6086 00004CF4 E84F010000          <2> 	call tstackput1
  6087 00004CF9 B00A                <2> 	mov al,10			;Get RTC register A
  6088 00004CFB E879010000          <2> 	call tget1
  6089 00004D00 A880                <2> 	test al,0x80			;Is update in progress?
  6090 00004D02 75F0                <2> 	jne time				; yes, wait
  6091                              <2> 
  6092 00004D04 B000                <2> 	mov al,0			;Get seconds (00 to 59)
  6093 00004D06 E86E010000          <2> 	call tget1
  6094 00004D0B A2[B74E0000]        <2> 	mov [RTCtimeSecond],al
  6095                              <2> 
  6096 00004D10 B002                <2> 	mov al,0x02			;Get minutes (00 to 59)
  6097 00004D12 E862010000          <2> 	call tget1
  6098 00004D17 A2[B84E0000]        <2> 	mov [RTCtimeMinute],al
  6099                              <2> 
  6100 00004D1C B004                <2> 	mov al,0x04			;Get hours (see notes)
  6101 00004D1E E856010000          <2> 	call tget1
  6102 00004D23 A2[B94E0000]        <2> 	mov [RTCtimeHour],al
  6103                              <2> 
  6104 00004D28 B007                <2> 	mov al,0x07			;Get day of month (01 to 31)
  6105 00004D2A E84A010000          <2> 	call tget1
  6106 00004D2F A2[BA4E0000]        <2> 	mov [RTCtimeDay],al
  6107                              <2> 
  6108 00004D34 B008                <2> 	mov al,0x08			;Get month (01 to 12)
  6109 00004D36 E83E010000          <2> 	call tget1
  6110 00004D3B A2[BB4E0000]        <2> 	mov [RTCtimeMonth],al
  6111                              <2> 
  6112 00004D40 B009                <2> 	mov al,0x09			;Get year (00 to 99)
  6113 00004D42 E832010000          <2> 	call tget1
  6114 00004D47 A2[BC4E0000]        <2> 	mov [RTCtimeYear],al
  6115                              <2> 	
  6116 00004D4C BE[C04E0000]        <2> 	mov esi, timeshow
  6117 00004D51 8A2D[B94E0000]      <2> 	mov ch, [RTCtimeHour]
  6118 00004D57 E828010000          <2> 	call tput1
  6119 00004D5C 8A2D[B84E0000]      <2> 	mov ch, [RTCtimeMinute]
  6120 00004D62 E81D010000          <2> 	call tput1
  6121 00004D67 8A2D[B74E0000]      <2> 	mov ch, [RTCtimeSecond]
  6122 00004D6D E812010000          <2> 	call tput1
  6123 00004D72 BE[C94E0000]        <2> 	mov esi, dateshow
  6124 00004D77 8A2D[BB4E0000]      <2> 	mov ch, [RTCtimeMonth]
  6125 00004D7D E802010000          <2> 	call tput1
  6126 00004D82 8A2D[BA4E0000]      <2> 	mov ch, [RTCtimeDay]
  6127 00004D88 E8F7000000          <2> 	call tput1
  6128 00004D8D B520                <2> 	mov ch, 0x20
  6129 00004D8F E8F0000000          <2> 	call tput1
  6130 00004D94 4E                  <2> 	dec esi
  6131 00004D95 8A2D[BC4E0000]      <2> 	mov ch, [RTCtimeYear]
  6132 00004D9B E8E4000000          <2> 	call tput1
  6133 00004DA0 E8BD000000          <2> 	call tstackget1
  6134 00004DA5 C3                  <2> 	ret
  6135 00004DA6 BE[C04E0000]        <2> 	mov esi, timeshow
  6136 00004DAB E852CFFFFF          <2> 	call print
  6137                              <2> ;;get day of week
  6138                              <2> ;;add these:
  6139                              <2> ;;century value
  6140                              <2> ;;last 2 digits of year
  6141                              <2> ;;last 2 digits of year right shifted twice
  6142                              <2> ;;month table value
  6143                              <2> ;;day of the month
  6144                              <2> ;;divide these by 7
  6145                              <2> ;;the remainder is the day
  6146                              <2> findday:
  6147 00004DB0 31C0                <2> 	xor eax, eax
  6148                              <2> ;;first convert the values from BCD to hex
  6149 00004DB2 A0[BA4E0000]        <2> 	mov al, [RTCtimeDay]
  6150 00004DB7 E873000000          <2> 	call converttohex
  6151 00004DBC 8825[BD4E0000]      <2> 	mov [dayhex], ah
  6152 00004DC2 A0[BB4E0000]        <2> 	mov al, [RTCtimeMonth]
  6153 00004DC7 E863000000          <2> 	call converttohex
  6154 00004DCC 8825[BE4E0000]      <2> 	mov [monthhex], ah
  6155 00004DD2 A0[BC4E0000]        <2> 	mov al, [RTCtimeYear]
  6156 00004DD7 E853000000          <2> 	call converttohex
  6157 00004DDC 8825[BF4E0000]      <2> 	mov [yearhex], ah
  6158 00004DE2 31C0                <2> 	xor eax, eax
  6159 00004DE4 A0[BF4E0000]        <2> 	mov al, [yearhex]
  6160 00004DE9 C0E802              <2> 	shr al, 2
  6161 00004DEC 0205[BF4E0000]      <2> 	add al, [yearhex]
  6162 00004DF2 0506000000          <2> 	add eax, 6
  6163 00004DF7 31DB                <2> 	xor ebx, ebx
  6164 00004DF9 8A1D[BE4E0000]      <2> 	mov bl, [monthhex]
  6165 00004DFF FECB                <2> 	dec bl
  6166 00004E01 81C3[DE4E0000]      <2> 	add ebx, month
  6167 00004E07 31C9                <2> 	xor ecx, ecx
  6168 00004E09 8A0B                <2> 	mov cl, [ebx]
  6169 00004E0B 01C8                <2> 	add eax, ecx
  6170 00004E0D 8A0D[BD4E0000]      <2> 	mov cl, [dayhex]
  6171 00004E13 01C8                <2> 	add eax, ecx
  6172 00004E15 66BB0700            <2> 	mov bx, 7
  6173 00004E19 31D2                <2> 	xor edx, edx
  6174 00004E1B 66F7F3              <2> 	div bx
  6175 00004E1E C1E202              <2> 	shl edx, 2
  6176 00004E21 81C2[EA4E0000]      <2> 	add edx, day
  6177 00004E27 8B32                <2> 	mov esi, [edx]
  6178 00004E29 E8D4CEFFFF          <2> 	call print
  6179 00004E2E C3                  <2> 	ret
  6180                              <2> 	
  6181                              <2> converttohex:
  6182 00004E2F 88C4                <2> 	mov ah, al
  6183 00004E31 C0E804              <2> 	shr al, 4
  6184 00004E34 C0E404              <2> 	shl ah, 4
  6185 00004E37 C0EC04              <2> 	shr ah, 4
  6186 00004E3A 3C00                <2> 	cmp al, 0
  6187 00004E3C 7409                <2> 	je noconverttohex
  6188                              <2> converttohexlp:
  6189 00004E3E 80C40A              <2> 	add ah, 10
  6190 00004E41 FEC8                <2> 	dec al
  6191 00004E43 3C00                <2> 	cmp al, 0
  6192 00004E45 75F7                <2> 	jne converttohexlp
  6193                              <2> noconverttohex:
  6194 00004E47 C3                  <2> 	ret
  6195                              <2> 	
  6196                              <2> tstackput1:
  6197 00004E48 8935[B34E0000]      <2> 	mov [tstack + 20], esi
  6198 00004E4E BE[9F4E0000]        <2> 	mov esi, tstack
  6199 00004E53 8906                <2> 	mov [esi], eax
  6200 00004E55 895E04              <2> 	mov [esi + 4], ebx
  6201 00004E58 894E08              <2> 	mov [esi + 8], ecx
  6202 00004E5B 89560C              <2> 	mov [esi + 12], edx
  6203 00004E5E 897E10              <2> 	mov [esi + 16], edi
  6204 00004E61 C3                  <2> 	ret
  6205                              <2> 	
  6206                              <2> tstackget1:
  6207 00004E62 BE[9F4E0000]        <2> 	mov esi, tstack
  6208 00004E67 8B06                <2> 	mov eax, [esi]
  6209 00004E69 8B5E04              <2> 	mov ebx, [esi + 4]
  6210 00004E6C 8B4E08              <2> 	mov ecx, [esi + 8]
  6211 00004E6F 8B560C              <2> 	mov edx, [esi + 12]
  6212 00004E72 8B7E10              <2> 	mov edi, [esi + 16]
  6213 00004E75 8B7614              <2> 	mov esi, [esi + 20]
  6214 00004E78 C3                  <2> 	ret
  6215                              <2> 	
  6216                              <2> tget1:
  6217 00004E79 66BA7000            <2> 	mov dx, 0x70
  6218 00004E7D EE                  <2> 	out dx, al
  6219 00004E7E 6642                <2> 	inc dx
  6220 00004E80 EC                  <2> 	in al, dx
  6221 00004E81 664A                <2> 	dec dx
  6222 00004E83 C3                  <2> 	ret
  6223                              <2> 	
  6224                              <2> tput1:
  6225 00004E84 66C1E904            <2> 	shr cx, 4
  6226 00004E88 B030                <2> 	mov al, 48
  6227 00004E8A 00E8                <2> 	add al, ch
  6228 00004E8C 8806                <2> 	mov [esi], al
  6229 00004E8E 46                  <2> 	inc esi
  6230 00004E8F B030                <2> 	mov al, 48
  6231 00004E91 C0E904              <2> 	shr cl, 4
  6232 00004E94 00C8                <2> 	add al, cl
  6233 00004E96 8806                <2> 	mov [esi], al
  6234 00004E98 81C602000000        <2> 	add esi, 2
  6235 00004E9E C3                  <2> 	ret
  6236                              <2> 		
  6237 00004E9F 000000000000000000- <2> 	tstack dd 0,0,0,0,0,0
  6238 00004EA8 000000000000000000- <2>
  6239 00004EB1 000000000000        <2>
  6240 00004EB7 00                  <2> 	RTCtimeSecond db 0
  6241 00004EB8 00                  <2> 	RTCtimeMinute db 0
  6242 00004EB9 00                  <2> 	RTCtimeHour db 0
  6243 00004EBA 00                  <2> 	RTCtimeDay db 0
  6244 00004EBB 00                  <2> 	RTCtimeMonth db 0
  6245 00004EBC 00                  <2> 	RTCtimeYear db 0
  6246 00004EBD 00                  <2> 	dayhex db 0
  6247 00004EBE 00                  <2> 	monthhex db 0
  6248 00004EBF 00                  <2> 	yearhex db 0
  6249 00004EC0 30303A30303A30300A  <2> 	timeshow db "00:00:00",10
  6250 00004EC9 30302D30302D303030- <2> 	dateshow db "00-00-0000",10,0
  6251 00004ED2 300A00              <2>
  6252                              <2> 	oldcentury:	;;from 1700 to 1900
  6253 00004ED5 040200              <2> 	db 4,2,0
  6254                              <2> 	century:	;;from 2000 to 2500
  6255 00004ED8 060402000604        <2> 	db 6,4,2,0,6,4
  6256                              <2> 	month:
  6257 00004EDE 000303060104060205- <2> 	db 0,3,3,6,1,4,6,2,5,0,3,5
  6258 00004EE7 000305              <2>
  6259                              <2> 	day:
  6260 00004EEA [064F0000]          <2> 	dd sunday
  6261 00004EEE [0E4F0000]          <2> 	dd monday
  6262 00004EF2 [164F0000]          <2> 	dd tuesday
  6263 00004EF6 [1F4F0000]          <2> 	dd wednesday
  6264 00004EFA [2A4F0000]          <2> 	dd thursday
  6265 00004EFE [344F0000]          <2> 	dd friday
  6266 00004F02 [3C4F0000]          <2> 	dd saturday
  6267                              <2> sunday:
  6268 00004F06 53756E6461790A00    <2> 	db "Sunday",10,0
  6269                              <2> monday:
  6270 00004F0E 4D6F6E6461790A00    <2> 	db "Monday",10,0
  6271                              <2> tuesday:
  6272 00004F16 547565736461790A00  <2> 	db "Tuesday",10,0
  6273                              <2> wednesday:
  6274 00004F1F 5765646E6573646179- <2> 	db "Wednesday",10,0
  6275 00004F28 0A00                <2>
  6276                              <2> thursday:
  6277 00004F2A 54687572736461790A- <2> 	db "Thursday",10,0
  6278 00004F33 00                  <2>
  6279                              <2> friday:
  6280 00004F34 4672696461790A00    <2> 	db "Friday",10,0
  6281                              <2> saturday:
  6282 00004F3C 53617475726461790A- <2> 	db "Saturday",10,0
  6283 00004F45 00                  <2>
  6284                              <1> %include 'source/programs/turnoff.asm'
  6285 00004F46 FF2C7475726E6F6666- <2> 	db 255,44,"turnoff",0
  6286 00004F4F 00                  <2>
  6287                              <2> 	turnoff:
  6288 00004F50 66BB[6B4F]          <2> 			mov bx, shutdown
  6289 00004F54 66891D[D10C0000]    <2> 			mov [realmodeptr], bx
  6290 00004F5B BB[954F0000]        <2> 			mov ebx, halt
  6291 00004F60 891D[CD0C0000]      <2> 			mov [realmodereturn], ebx
  6292 00004F66 E94BBCFFFF          <2> 			jmp realmode
  6293                              <2> 
  6294                              <2> [BITS 16]
  6295                              <2> 		shutdown:
  6296 00004F6B B453                <2> 			mov ah, 0x53
  6297 00004F6D B004                <2> 			mov al, 4
  6298 00004F6F 31DB                <2> 			xor bx, bx
  6299 00004F71 CD15                <2> 			int 0x15
  6300                              <2> 			
  6301 00004F73 B453                <2> 			mov ah, 0x53
  6302 00004F75 B001                <2> 			mov al, 1
  6303 00004F77 31DB                <2> 			xor bx, bx
  6304 00004F79 CD15                <2> 			int 0x15
  6305                              <2> 			
  6306 00004F7B B453                <2> 			mov ah, 0x53
  6307 00004F7D B008                <2> 			mov al, 8
  6308 00004F7F BB0100              <2> 			mov bx, 1
  6309 00004F82 B90100              <2> 			mov cx, 1
  6310 00004F85 CD15                <2> 			int 0x15
  6311                              <2> 			
  6312 00004F87 B453                <2> 			mov ah, 0x53
  6313 00004F89 B007                <2> 			mov al, 7
  6314 00004F8B BB0100              <2> 			mov bx, 1
  6315 00004F8E B90300              <2> 			mov cx, 3
  6316 00004F91 CD15                <2> 			int 0x15
  6317 00004F93 EBFE                <2> 			jmp $
  6318                              <2> 			[BITS 32]
  6319 00004F95 EBFE                <2> halt: jmp $
  6320                              <1> %include 'source/programs/wait.asm'
  6321 00004F97 FF2C7761697400      <2> db 255,44,"wait",0
  6322                              <2> waitkey:
  6323 00004F9E E820D2FFFF          <2> 		call getchar
  6324 00004FA3 C3                  <2> 		ret
  6325                              <1> %include 'source/programs/while.asm'
  6326 00004FA4 FF2C7768696C6500    <2> db 255,44,"while",0
  6327 00004FAC 30C0                <2> whilecmd:  xor al, al
  6328 00004FAE 3805[10AE0000]      <2> 	cmp [BATCHISON], al
  6329 00004FB4 0F8478E7FFFF        <2> 	je near notbatch
  6330 00004FBA 8B35[0CAE0000]      <2> 	mov esi, [BATCHPOS]
  6331 00004FC0 81EE02000000        <2> 	sub esi, 2
  6332 00004FC6 4E                  <2> whilefnd: dec esi
  6333 00004FC7 8A06                <2> 	mov al, [esi]
  6334 00004FC9 3C0A                <2> 	cmp al, 10
  6335 00004FCB 0F840A000000        <2> 	je near whilefnd2
  6336 00004FD1 3C00                <2> 	cmp al, 0
  6337 00004FD3 0F8402000000        <2> 	je near whilefnd2
  6338 00004FD9 EBEB                <2> 	jmp whilefnd
  6339                              <2> whilefnd2:
  6340 00004FDB 46                  <2> 	inc esi
  6341 00004FDC 8935[12AE0000]      <2> 	mov [LOOPPOS], esi
  6342 00004FE2 C605[11AE0000]01    <2> 	mov BYTE [LOOPON], 1
  6343 00004FE9 BE[16C20000]        <2> 	mov esi, buftxt
  6344 00004FEE BB[16C20000]        <2> 	mov ebx, buftxt
  6345 00004FF3 81C306000000        <2> 	add ebx, 6
  6346 00004FF9 E92EF4FFFF          <2> 	jmp chkeqsn
  6347                              <1> progend:		;programs end here	
  6348                              <1> batchprogend:
  6349                                  	%include "source/hardware.asm"
  6350                              <1> %ifdef gui.included
  6351                              <1> 	%include "source/drivers/video/vesa.asm"
  6352                              <2> [BITS 16]
  6353                              <2> guiswitch:
  6354 00004FFE 81F90000            <2> 	cmp cx, 0
  6355 00005002 750B                <2> 	jne guiswitchdefnum
  6356 00005004 B81200              <2> 	mov ax, 12h
  6357 00005007 31DB                <2> 	xor bx, bx
  6358 00005009 CD10                <2> 	int 10h
  6359 0000500B E85100              <2> 	call guiloadagain
  6360                              <2> guiswitchnocando:
  6361 0000500E C3                  <2> 	ret	;return without switching as mode number is bad
  6362                              <2> guiswitchdefnum:	;switch to a defined mode number
  6363 0000500F B8004F              <2> 	mov ax, 0x4F00
  6364 00005012 BF[DC51]            <2> 	mov di, VBEMODEBLOCK
  6365 00005015 CD10                <2> 	int 10h
  6366 00005017 BE[FE51]            <2> 	mov si, reserved
  6367 0000501A 81EE0200            <2> 	sub si, 2
  6368                              <2> .loop:
  6369 0000501E 81C60200            <2> 	add si, 2
  6370 00005022 81FE[DC52]          <2> 	cmp si, oemdata
  6371 00005026 74E6                <2> 	je guiswitchnocando
  6372 00005028 813CFFFF            <2> 	cmp word [si], 0xFFFF
  6373 0000502C 74E0                <2> 	je guiswitchnocando
  6374 0000502E 390C                <2> 	cmp [si], cx
  6375 00005030 75EC                <2> 	jne .loop
  6376 00005032 8936[3651]          <2> 	mov [videomodecache], si
  6377 00005036 81C90040            <2> 	or cx, 0x4000	;make sure linear frame buffer is selected
  6378 0000503A B8014F              <2> 	mov ax, 0x4F01
  6379 0000503D BF[DC53]            <2> 	mov di, VBEMODEINFOBLOCK
  6380 00005040 890E[3451]          <2> 	mov [vesamode], cx
  6381 00005044 CD10                <2> 	int 10h
  6382 00005046 E9CB00              <2> 	jmp selectedvesa
  6383                              <2> guiload:
  6384 00005049 BE[B451]            <2> 	mov si, bootmsg
  6385 0000504C E828B0              <2> 	call printrm
  6386 0000504F 31C0                <2> 	xor ax, ax
  6387 00005051 CD16                <2> 	int 16h
  6388 00005053 3C79                <2> 	cmp al, "y"
  6389 00005055 0F85D8AF            <2> 	jne near vgaset
  6390 00005059 BE[7E83]            <2> 	mov si, crlf
  6391 0000505C E818B0              <2> 	call printrm
  6392                              <2> guiloadagain:
  6393 0000505F B8004F              <2> 	mov ax, 04F00h
  6394 00005062 BF[DC51]            <2> 	mov di, VBEMODEBLOCK
  6395 00005065 CD10                <2> 	int 10h
  6396 00005067 BE[FE51]            <2> 	mov si, reserved
  6397 0000506A 81EE0200            <2> 	sub si, 2
  6398                              <2> findvideomodes:
  6399 0000506E 81C60200            <2> 	add si, 2
  6400 00005072 8B0C                <2> 	mov cx, [si]
  6401 00005074 81F9FFFF            <2> 	cmp cx, 0xFFFF
  6402 00005078 0F840A00            <2> 	je near nextvmode
  6403 0000507C 81FE[DC52]          <2> 	cmp si, oemdata
  6404 00005080 0F83ADAF            <2> 	jae near vgaset	;;kill if no valid list is found
  6405 00005084 EBE8                <2> 	jmp findvideomodes 	
  6406                              <2> ;;debug,shows vmodes available
  6407                              <2> nextvmode:
  6408 00005086 81EE0200            <2> 	sub si, 2
  6409 0000508A 81FE[FE51]          <2> 	cmp si, reserved
  6410 0000508E 0F82CDFF            <2> 	jb near guiloadagain
  6411 00005092 8B0C                <2> 	mov cx, [si]
  6412 00005094 81F9FFFF            <2> 	cmp cx, 0xFFFF
  6413 00005098 0F84EAFF            <2> 	je near nextvmode
  6414 0000509C 81C90040            <2> 	or cx, 0x4000 		;;Linear Frame Buffer
  6415 000050A0 B8014F              <2> 	mov ax, 04F01h
  6416 000050A3 BF[DC53]            <2> 	mov di, VBEMODEINFOBLOCK
  6417 000050A6 890E[3451]          <2> 	mov [vesamode], cx
  6418 000050AA CD10                <2> 	int 10h
  6419 000050AC A0[F553]            <2> 	mov al, [bitsperpixel]
  6420 000050AF 3C10                <2> 	cmp al, 16
  6421 000050B1 75D3                <2> 	jne nextvmode
  6422 000050B3 8936[3651]          <2> 	mov [videomodecache], si
  6423 000050B7 84E4                <2> 	test ah, ah
  6424 000050B9 0F842200            <2> 	jz near setvesamode
  6425 000050BD EBC7                <2> 	jmp nextvmode
  6426 000050BF 0A0D49732074686973- <2> isthisvideook db 10,13,"Is this video mode OK?(y/n)",13,10,0
  6427 000050C8 20766964656F206D6F- <2>
  6428 000050D1 6465204F4B3F28792F- <2>
  6429 000050DA 6E290D0A00          <2>
  6430                              <2> setvesamode:
  6431 000050DF 8B0E[EE53]          <2> 	mov cx, [resolutionx]
  6432 000050E3 E85900              <2> 	call decshow
  6433 000050E6 B078                <2> 	mov al, "x"
  6434 000050E8 E8C100              <2> 	call char
  6435 000050EB 8B0E[F053]          <2> 	mov cx, [resolutiony]
  6436 000050EF E84D00              <2> 	call decshow
  6437 000050F2 B040                <2> 	mov al, "@"
  6438 000050F4 E8B500              <2> 	call char
  6439 000050F7 31C9                <2> 	xor cx, cx
  6440 000050F9 8A0E[F553]          <2> 	mov cl, [bitsperpixel]
  6441 000050FD E83F00              <2> 	call decshow
  6442 00005100 BE[BF50]            <2> 	mov si, isthisvideook
  6443 00005103 E871AF              <2> 	call printrm
  6444 00005106 31C0                <2> 	xor ax, ax
  6445 00005108 CD16                <2> 	int 16h
  6446 0000510A 8B36[3651]          <2> 	mov si, [videomodecache]
  6447 0000510E 3C79                <2> 	cmp al, "y"
  6448 00005110 0F8572FF            <2> 	jne near nextvmode
  6449                              <2> selectedvesa:
  6450 00005114 8B16[EE53]          <2> 	mov dx, [resolutionx]
  6451 00005118 01D2                <2> 	add dx, dx
  6452 0000511A 8916[DC54]          <2> 	mov [resolutionx2], dx
  6453 0000511E 31D2                <2> 	xor dx, dx
  6454 00005120 31C9                <2> 	xor cx, cx
  6455 00005122 B8024F              <2> 	mov ax, 04F02h
  6456 00005125 8B1E[3451]          <2> 	mov bx, [vesamode]
  6457 00005129 CD10                <2> 	int 10h		;;enter VESA mode
  6458 0000512B C606[5095]01        <2> 	mov byte [guion], 1
  6459 00005130 E80EAF              <2> 	call getmemorysize;get the memory map after the video is initialized
  6460 00005133 C3                  <2> 	ret
  6461                              <2> 	
  6462 00005134 0000                <2> vesamode dw 0
  6463 00005136 0000                <2> videomodecache dw 0
  6464                              <2> 
  6465 00005138 0000000000          <2> dcnm db 0,0,0,0,0
  6466 0000513D 0000                <2> dcnmend db 0,0
  6467                              <2> 
  6468                              <2> 
  6469                              <2> decshow:
  6470 0000513F BE[3851]            <2> 	mov si, dcnm
  6471                              <2> decclear:
  6472 00005142 B030                <2> 	mov al, "0"
  6473 00005144 8804                <2> 	mov [si], al
  6474 00005146 46                  <2> 	inc si
  6475 00005147 81FE[3D51]          <2> 	cmp si, dcnmend
  6476 0000514B 76F5                <2> 	jbe decclear
  6477 0000514D 4E                  <2> 	dec si
  6478 0000514E E81500              <2> 	call convertrm
  6479 00005151 BE[3851]            <2> 	mov si, dcnm
  6480                              <2> dectst:
  6481 00005154 8A04                <2> 	mov al, [si]
  6482 00005156 46                  <2> 	inc si
  6483 00005157 81FE[3D51]          <2> 	cmp si, dcnmend
  6484 0000515B 7704                <2> 	ja dectstend
  6485 0000515D 3C30                <2> 	cmp al, "0"
  6486 0000515F 76F3                <2> 	jbe dectst
  6487                              <2> dectstend:
  6488 00005161 4E                  <2> 	dec si
  6489 00005162 E812AF              <2> 	call printrm
  6490 00005165 C3                  <2> 	ret
  6491                              <2> 	
  6492                              <2> 	
  6493                              <2> convertrm:
  6494 00005166 4E                  <2> 	dec si
  6495 00005167 89F3                <2> 	mov bx, si		;place to convert into must be in si, number to convert must be in cx
  6496                              <2> cnvrtrm:
  6497 00005169 89DE                <2> 	mov si, bx
  6498 0000516B 81EE0300            <2> 	sub si, 3
  6499 0000516F 46                  <2> ten3rm:	inc si
  6500 00005170 81F9E803            <2> 	cmp cx, 1000
  6501 00005174 7208                <2> 	jb ten2rm
  6502 00005176 81E9E803            <2> 	sub cx, 1000
  6503 0000517A FE04                <2> 	inc byte [si]
  6504 0000517C EBEB                <2> 	jmp cnvrtrm
  6505 0000517E 46                  <2> ten2rm:	inc si
  6506 0000517F 81F96400            <2> 	cmp cx, 100
  6507 00005183 7208                <2> 	jb ten1rm
  6508 00005185 81E96400            <2> 	sub cx, 100
  6509 00005189 FE04                <2> 	inc byte [si]
  6510 0000518B EBDC                <2> 	jmp cnvrtrm
  6511 0000518D 46                  <2> ten1rm:	inc si
  6512 0000518E 81F90A00            <2> 	cmp cx, 10
  6513 00005192 7208                <2> 	jb ten0rm
  6514 00005194 81E90A00            <2> 	sub cx, 10
  6515 00005198 FE04                <2> 	inc byte [si]
  6516 0000519A EBCD                <2> 	jmp cnvrtrm
  6517 0000519C 46                  <2> ten0rm:	inc si
  6518 0000519D 81F90100            <2> 	cmp cx, 1
  6519 000051A1 7208                <2> 	jb tendnrm
  6520 000051A3 81E90100            <2> 	sub cx, 1
  6521 000051A7 FE04                <2> 	inc byte [si]
  6522 000051A9 EBBE                <2> 	jmp cnvrtrm
  6523                              <2> tendnrm:
  6524 000051AB C3                  <2> 	ret
  6525                              <2> 
  6526                              <2>     char: 		    ;char must be in al
  6527 000051AC BB0700              <2>        mov bx, 07
  6528 000051AF B40E                <2> 	   mov ah, 0Eh
  6529 000051B1 CD10                <2> 	   int 10h
  6530 000051B3 C3                  <2> 	   ret
  6531                              <2> 
  6532 000051B4 426F6F7420696E746F- <2> bootmsg:	db "Boot into the GUI?(y/n)",0
  6533 000051BD 20746865204755493F- <2>
  6534 000051C6 28792F6E2900        <2>
  6535                              <2> 
  6536                              <2> 
  6537                              <2> mcursor:
  6538 000051CC 01                  <2> 	db	00000001b
  6539 000051CD 81                  <2> 	db	10000001b
  6540 000051CE C1                  <2> 	db	11000001b
  6541 000051CF E1                  <2> 	db	11100001b
  6542 000051D0 F1                  <2> 	db	11110001b
  6543 000051D1 F9                  <2> 	db	11111001b
  6544 000051D2 FD                  <2> 	db	11111101b
  6545 000051D3 FF                  <2> 	db	11111111b
  6546 000051D4 F9                  <2> 	db	11111001b
  6547 000051D5 B9                  <2> 	db	10111001b
  6548 000051D6 39                  <2> 	db	00111001b
  6549 000051D7 1C                  <2> 	db	00011100b
  6550 000051D8 1C                  <2> 	db	00011100b
  6551 000051D9 0E                  <2> 	db	00001110b
  6552 000051DA 0E                  <2> 	db	00001110b
  6553 000051DB 0C                  <2> 	db	00001100b
  6554                              <2> mcursorend:
  6555                              <2> 
  6556                              <2> 
  6557                              <2> VBEMODEBLOCK:
  6558 000051DC 00<rept>            <2> vbesignature 		times  4 db 0 	;VBE Signature
  6559 000051E0 00<rept>            <2> vbeversion  		times  2 db 0	;VBE Version
  6560 000051E2 00<rept>            <2> oemstringptr  		times  4 db 0	;Pointer to OEM String
  6561 000051E6 00<rept>            <2> capabilities 		times  4 db 0	;Capabilities of graphics cont.
  6562 000051EA 00<rept>            <2> videomodeptr 		times  4 db 0	;Pointer to Video Mode List
  6563 000051EE 00<rept>            <2> totalmemory   		times  2 db 0	;number of 64Kb memory blocks
  6564 000051F0 00<rept>            <2> oemsoftwarerev  	times  2 db 0	;VBE implementation Software revision
  6565 000051F2 00<rept>            <2> oemvendornameptr 	times  4 db 0	;Pointer to Vendor Name String
  6566 000051F6 00<rept>            <2> oemproductnameptr 	times  4 db 0	;Pointer to Product Name String
  6567 000051FA 00<rept>            <2> oemproductrevptr 	times  4 db 0	;Pointer to Product Revision String
  6568 000051FE 00<rept>            <2> reserved			times  222 db 0	;Reserved for VBE implementation scratch area
  6569 000052DC 00<rept>            <2> oemdata 			times  256 db 0	;Data Area for OEM Strings
  6570                              <2> 
  6571                              <2> VBEMODEINFOBLOCK:
  6572                              <2> ;Mandatory information for all VBE revision
  6573 000053DC 00<rept>            <2> modeattributes   	times  2 db 0	;Mode attributes
  6574 000053DE 00                  <2> winaattributes   	times  1 db 0	;Window A attributes
  6575 000053DF 00                  <2> winbattributes   	times  1 db 0	;Window B attributes
  6576 000053E0 00<rept>            <2> wingranularity   	times  2 db 0	;Window granularity
  6577 000053E2 00<rept>            <2> winsize          	times  2 db 0	;Window size
  6578 000053E4 00<rept>            <2> winasegment      	times  2 db 0	;Window A start segment
  6579 000053E6 00<rept>            <2> winbsegment      	times  2 db 0	;Window B start segment
  6580 000053E8 00<rept>            <2> winfuncptr       	times  4 db 0	;pointer to window function
  6581 000053EC 00<rept>            <2> bytesperscanline 	times  2 db 0	;Bytes per scan line
  6582                              <2> 
  6583                              <2> ;Mandatory information for VBE 1.2 and above
  6584 000053EE 00<rept>            <2> resolutionx     	times  2 db 0	;Horizontal resolution in pixel or chars
  6585 000053F0 00<rept>            <2> resolutiony	    	times  2 db 0	;Vertical resolution in pixel or chars
  6586 000053F2 00                  <2> xcharsize       	times  1 db 0	;Character cell width in pixel
  6587 000053F3 00                  <2> ycharsize       	times  1 db 0	;Character cell height in pixel
  6588 000053F4 00                  <2> numberofplanes  	times  1 db 0	;Number of memory planes
  6589 000053F5 00                  <2> bitsperpixel    	times  1 db 0	;Bits per pixel
  6590 000053F6 00                  <2> numberofbanks   	times  1 db 0	;Number of banks
  6591 000053F7 00                  <2> memorymodel     	times  1 db 0	;Memory model type
  6592 000053F8 00                  <2> banksize        	times  1 db 0	;Bank size in KB
  6593 000053F9 00                  <2> numberofimagepages	times  1 db 0	;Number of images
  6594 000053FA 00                  <2> reserved1       	times  1 db 0	;Reserved for page function
  6595                              <2> 
  6596                              <2> ;Direct Color fields (required for direct/6 and YUV/7 memory models)
  6597 000053FB 00                  <2> redmasksize			times  1 db 0	;Size of direct color red mask in bits
  6598 000053FC 00                  <2> redfieldposition	times  1 db 0	;Bit position of lsb of red bask
  6599 000053FD 00                  <2> greenmasksize   	times  1 db 0	;Size of direct color green mask in bits
  6600 000053FE 00                  <2> greenfieldposition	times  1 db 0	;Bit position of lsb of green bask
  6601 000053FF 00                  <2> bluemasksize		times  1 db 0	;Size of direct color blue mask in bits
  6602 00005400 00                  <2> bluefieldposition	times  1 db 0	;Bit position of lsb of blue bask
  6603 00005401 00                  <2> rsvdmasksize        times  1 db 0		;Size of direct color reserved mask in bits
  6604 00005402 00                  <2> rsvdfieldposition	times  1 db 0		;Bit position of lsb of reserved bask
  6605 00005403 00                  <2> directcolormodeinfo	times  1 db 0	;Direct color mode attributes
  6606                              <2> 
  6607                              <2> ;Mandatory information for VBE 2.0 and above
  6608 00005404 00<rept>            <2> physbaseptr 		times  4 db 0	;Physical address for flat frame buffer
  6609 00005408 00<rept>            <2> offscreenmemoffset 	times  4 db 0	;Pointer to start of off screen memory
  6610 0000540C 00<rept>            <2> offscreenmemsize 	times  2 db 0    ;Amount of off screen memory in 1Kb units
  6611 0000540E 00<rept>            <2> reserved2 			times  206 db 0  ;Remainder of ModeInfoBlock
  6612                              <2> 
  6613 000054DC 00000000            <2> resolutionx2 dd 0	;this is not part of the VBE but is necessary GUI info
  6614                              <2> VBEEND:
  6615                              <2> [BITS 32]
  6616                              <1> 	%include "source/drivers/input/mouse.asm"
  6617 000054E0 00                  <2> mousedisabled db 0
  6618                              <2> 	
  6619                              <2> 	cursorgui:
  6620 000054E1 803D[15820000]01    <2> 		cmp byte [mouseon], 1
  6621 000054E8 0F8432000000        <2> 		je near mousedaemon
  6622 000054EE 803D[50950000]00    <2> 		cmp byte [guion], 0
  6623 000054F5 0F844E0A0000        <2> 		je near entdown
  6624                              <2> 	initmouse:
  6625 000054FB 803D[50950000]00    <2> 		cmp byte [guion], 0
  6626 00005502 7405                <2> 		je noswmsposinit
  6627 00005504 E8A6140000          <2> 		call switchmousepos2
  6628                              <2> 	noswmsposinit:
  6629 00005509 E85A020000          <2> 	  	call PS2SET
  6630 0000550E E883020000          <2> 		call ACTMOUS
  6631 00005513 C605[15820000]01    <2> 		mov byte [mouseon],1
  6632 0000551A E89C020000          <2> 		call GETB 	;;Get the responce byte of the mouse (like: Hey i am active)
  6633                              <2> 		;call GETB
  6634                              <2> 				;;If the bytes are mixed up,
  6635                              <2> 				;;remove this line or add another of this line.
  6636                              <2> 	nomouse:
  6637 0000551F C3                  <2> 		ret
  6638                              <2> 		
  6639                              <2> 	mousedaemon:
  6640 00005520 803D[15820000]01    <2> 		cmp byte [mouseon], 1
  6641 00005527 75D2                <2> 		jne initmouse
  6642 00005529 E464                <2> 		in al, 64h ; Status
  6643 0000552B A820                <2> 		test al, 20h ; PS2-Mouse?
  6644 0000552D 0F8502000000        <2> 		jnz near moused
  6645 00005533 F4                  <2> 		hlt
  6646 00005534 C3                  <2> 		ret
  6647                              <2> 	moused:
  6648 00005535 803D[E0540000]01    <2> 		cmp byte [mousedisabled], 1
  6649 0000553C 74E1                <2> 		je nomouse
  6650 0000553E E878020000          <2> 		  call GETB
  6651 00005543 88C3                <2> 		  mov  bl, al
  6652 00005545 80E301              <2> 		  and  bl, 1
  6653 00005548 881D[E0570000]      <2> 		  mov  BYTE [LBUTTON], bl
  6654 0000554E 88C3                <2> 		  mov  bl, al
  6655 00005550 80E302              <2> 		  and  bl, 2
  6656 00005553 D0EB                <2> 		  shr  bl, 1
  6657 00005555 881D[E1570000]      <2> 		  mov  BYTE [RBUTTON], bl
  6658 0000555B 88C3                <2> 		  mov  bl, al
  6659 0000555D 80E304              <2> 		  and  bl, 4
  6660 00005560 C0EB02              <2> 		  shr  bl, 2
  6661 00005563 881D[E2570000]      <2> 		  mov  BYTE [MBUTTON], bl
  6662 00005569 E84D020000          <2> 		  call GETB
  6663 0000556E A2[E3570000]        <2> 		  mov  BYTE [XCOORD], al
  6664 00005573 E843020000          <2> 		  call GETB
  6665 00005578 A2[E4570000]        <2> 		  mov  BYTE [YCOORD], al
  6666                              <2> 
  6667                              <2> 	showpixelcursor:
  6668 0000557D 668B15[CF560000]    <2> 		mov dx, [mousecursorposition]
  6669 00005584 668B0D[D1560000]    <2> 		mov cx, [mousecursorposition + 2]
  6670 0000558B 668915[CB560000]    <2> 		mov [lastmouseposition], dx
  6671 00005592 66890D[CD560000]    <2> 		mov [lastmouseposition + 2], cx
  6672 00005599 A0[E3570000]        <2> 		mov al, [XCOORD]
  6673 0000559E 3C80                <2> 		cmp al, 128
  6674 000055A0 730C                <2> 		jae subxcoord
  6675 000055A2 00C0                <2> 		add al, al
  6676 000055A4 30E4                <2> 		xor ah, ah
  6677 000055A6 6601C2              <2> 		add dx, ax
  6678 000055A9 E90B000000          <2> 		jmp subxcoorddn
  6679                              <2> 	subxcoord:
  6680 000055AE 00C0                <2> 		add al, al
  6681 000055B0 30DB                <2> 		xor bl, bl
  6682 000055B2 28C3                <2> 		sub bl, al
  6683 000055B4 30FF                <2> 		xor bh, bh
  6684 000055B6 6629DA              <2> 		sub dx, bx
  6685                              <2> 	subxcoorddn:
  6686 000055B9 8A1D[E4570000]      <2> 		mov bl, [YCOORD]
  6687 000055BF 30C0                <2> 		xor al, al
  6688 000055C1 28D8                <2> 		sub al, bl
  6689 000055C3 3C80                <2> 		cmp al, 128
  6690 000055C5 730A                <2> 		jae subycoord
  6691 000055C7 30E4                <2> 		xor ah, ah
  6692 000055C9 6601C1              <2> 		add cx, ax
  6693 000055CC E909000000          <2> 		jmp subycoorddn
  6694                              <2> 	subycoord:
  6695 000055D1 30DB                <2> 		xor bl, bl
  6696 000055D3 28C3                <2> 		sub bl, al
  6697 000055D5 30FF                <2> 		xor bh, bh
  6698 000055D7 6629D9              <2> 		sub cx, bx
  6699                              <2> 	subycoorddn:
  6700 000055DA 6681FA204E          <2> 		cmp dx, 20000
  6701 000055DF 7603                <2> 		jbe nooriginx2
  6702 000055E1 6631D2              <2> 		xor dx, dx
  6703                              <2> 	nooriginx2:
  6704 000055E4 6681F9204E          <2> 		cmp cx, 20000
  6705 000055E9 7603                <2> 		jbe nooriginy2
  6706 000055EB 6631C9              <2> 		xor cx, cx
  6707                              <2> 	nooriginy2:
  6708 000055EE 6681FA0000          <2> 		cmp dx, 0
  6709 000055F3 7415                <2> 		je nofixxcolumn2
  6710 000055F5 663B15[DC540000]    <2> 		cmp dx, [resolutionx2]
  6711 000055FC 720C                <2> 		jb nofixxcolumn2
  6712 000055FE 668B15[DC540000]    <2> 		mov dx, [resolutionx2]
  6713 00005605 6681EA0200          <2> 		sub dx, 2
  6714                              <2> 	nofixxcolumn2:
  6715 0000560A 6681F90000          <2> 		cmp cx, 0
  6716 0000560F 7415                <2> 		je nofixyrow2
  6717 00005611 663B0D[F0530000]    <2> 		cmp cx, [resolutiony]
  6718 00005618 720C                <2> 		jb nofixyrow2
  6719 0000561A 668B0D[F0530000]    <2> 		mov cx, [resolutiony]
  6720 00005621 6681E90100          <2> 		sub cx, 1
  6721                              <2> 	nofixyrow2:
  6722 00005626 668915[CF560000]    <2> 		mov [mousecursorposition], dx
  6723 0000562D 66890D[D1560000]    <2> 		mov [mousecursorposition + 2], cx
  6724 00005634 803D[50950000]00    <2> 		cmp byte [guion], 0
  6725 0000563B 0F8492000000        <2> 		je near termmouse
  6726 00005641 E809130000          <2> 		call switchmousepos ;;use dragging code to ensure proper icon drag
  6727 00005646 803D[E0570000]01    <2> 		cmp byte [LBUTTON], 1
  6728 0000564D 0F847C230000        <2> 		je near clickicon
  6729 00005653 803D[E1570000]01    <2> 		cmp byte [RBUTTON], 1
  6730 0000565A 0F846F230000        <2> 		je near clickicon
  6731 00005660 A0[BC790000]        <2> 		mov al, [pbutton]
  6732 00005665 C705[BF790000]0000- <2> 		mov dword [dragging], 0
  6733 0000566D 0000                <2>
  6734 0000566F 3C00                <2> 		cmp al, 0
  6735 00005671 740F                <2> 		je nopreviousbutton
  6736 00005673 E83B120000          <2> 		call clearmousecursor
  6737 00005678 E81B160000          <2> 		call reloadallgraphics
  6738                              <2> 	windowtermcopyend:
  6739 0000567D E82D130000          <2> 		call switchmousepos2
  6740                              <2> 	nopreviousbutton:
  6741 00005682 30C0                <2> 		xor al, al
  6742 00005684 A2[BC790000]        <2> 		mov [pbutton], al
  6743 00005689 A0[E0570000]        <2> 		mov al, [LBUTTON]
  6744 0000568E A2[BD790000]        <2> 		mov [pLBUTTON], al
  6745 00005693 A0[E1570000]        <2> 		mov al, [RBUTTON]
  6746 00005698 A2[BE790000]        <2> 		mov [pRBUTTON], al
  6747 0000569D 31C9                <2> 		xor ecx, ecx
  6748 0000569F 31D2                <2> 		xor edx, edx
  6749 000056A1 668B15[CF560000]    <2> 		mov dx, [mousecursorposition]
  6750 000056A8 668B0D[D1560000]    <2> 		mov cx, [mousecursorposition + 2]
  6751 000056AF 66BB18C7            <2> 		mov bx, 1100011100011000b
  6752 000056B3 30E4                <2> 		xor ah, ah
  6753 000056B5 B0FE                <2> 		mov al, 254
  6754 000056B7 C605[B9790000]01    <2> 		mov byte [showcursorfonton], 1
  6755 000056BE E8A41B0000          <2> 		call showfontvesa
  6756 000056C3 C605[B9790000]00    <2> 		mov byte [showcursorfonton], 0
  6757 000056CA C3                  <2> 		ret
  6758                              <2> 
  6759 000056CB 00000000            <2> lastmouseposition dw 0,0
  6760 000056CF 00000000            <2> mousecursorposition dw 0,0	
  6761                              <2> 
  6762                              <2> termmouse:
  6763 000056D3 BE[2CDD2800]        <2> 		mov esi, videobuf
  6764 000056D8 31D2                <2> 		xor edx, edx
  6765 000056DA 668B15[CB560000]    <2> 		mov dx, [lastmouseposition]
  6766 000056E1 668B0D[CD560000]    <2> 		mov cx, [lastmouseposition + 2]
  6767 000056E8 66A1[66570000]      <2> 		mov ax, [cursorcache]
  6768 000056EE 663D0000            <2> 		cmp ax, 0
  6769 000056F2 7425                <2> 		je nocopycursorcache
  6770 000056F4 66C1E104            <2> 		shl cx, 4
  6771 000056F8 66C1E203            <2> 		shl dx, 3
  6772 000056FC 01D6                <2> 		add esi, edx
  6773 000056FE 6631D2              <2> 		xor dx, dx
  6774 00005701 8A15[FB230000]      <2> 		mov dl, [charxy]
  6775 00005707 6641                <2> 		inc cx
  6776                              <2> termmousecplp1:
  6777 00005709 01D6                <2> 		add esi, edx
  6778 0000570B 6649                <2> 		dec cx
  6779 0000570D 6681F90000          <2> 		cmp cx, 0
  6780 00005712 75F5                <2> 		jne termmousecplp1
  6781 00005714 29D6                <2> 		sub esi, edx
  6782 00005716 668906              <2> 		mov [esi], ax
  6783                              <2> nocopycursorcache:
  6784 00005719 BE[2CDD2800]        <2> 		mov esi, videobuf
  6785 0000571E 31D2                <2> 		xor edx, edx
  6786 00005720 668B15[CF560000]    <2> 		mov dx, [mousecursorposition]
  6787 00005727 668B0D[D1560000]    <2> 		mov cx, [mousecursorposition + 2]
  6788 0000572E 66C1E104            <2> 		shl cx, 4
  6789 00005732 66C1E203            <2> 		shl dx, 3
  6790 00005736 01D6                <2> 		add esi, edx
  6791 00005738 6631D2              <2> 		xor dx, dx
  6792 0000573B 8A15[FB230000]      <2> 		mov dl, [charxy]
  6793 00005741 6641                <2> 		inc cx
  6794                              <2> termmousecplp2:
  6795 00005743 01D6                <2> 		add esi, edx
  6796 00005745 6649                <2> 		dec cx
  6797 00005747 6681F90000          <2> 		cmp cx, 0
  6798 0000574C 75F5                <2> 		jne termmousecplp2
  6799 0000574E 29D6                <2> 		sub esi, edx
  6800 00005750 668B06              <2> 		mov ax, [esi]
  6801 00005753 66A3[66570000]      <2> 		mov [cursorcache], ax
  6802 00005759 B080                <2> 		mov al, 128
  6803 0000575B B407                <2> 		mov ah, 7
  6804 0000575D 668906              <2> 		mov [esi], ax
  6805 00005760 E807CEFFFF          <2> 		call termcopy
  6806 00005765 C3                  <2> 		ret
  6807 00005766 0000                <2> cursorcache db 0,0
  6808                              <2> 
  6809                              <2> PS2SET:
  6810 00005768 B0A8                <2>   mov  al, 0xa8		; enable mouse port
  6811 0000576A E664                <2>   out  0x64, al		; write to keyboardcontroller
  6812 0000576C E801000000          <2>   call CHKPRT		; check if command is progressed (demand!)
  6813 00005771 C3                  <2> ret
  6814                              <2> 
  6815                              <2> CHKPRT:
  6816 00005772 66B96400            <2>   mov  cx, 100
  6817                              <2>  .again:
  6818 00005776 E464                <2>   in   al, 0x64		; read from keyboardcontroller
  6819 00005778 A802                <2>   test al, 2		; Check if input buffer is empty
  6820 0000577A 7402                <2>   je .go
  6821 0000577C E2F8                <2>   loop .again
  6822                              <2>  .go:
  6823 0000577E C3                  <2> ret
  6824                              <2> 
  6825                              <2> WMOUS:
  6826 0000577F B0D4                <2>   mov  al, 0xd4		; write to mouse device instead of to keyboard
  6827 00005781 E664                <2>   out  0x64, al		; write to keyboardcontroller
  6828 00005783 E8EAFFFFFF          <2>   call CHKPRT		; check if command is progressed (demand!)
  6829 00005788 C3                  <2> ret
  6830                              <2> 
  6831                              <2> MBUFFUL:
  6832 00005789 66B96400            <2>   mov cx, 100
  6833                              <2>  .mn:
  6834 0000578D E464                <2>   in   al, 0x64		; read from keyboardcontroller
  6835 0000578F A820                <2>   test al, 0x20		; check if mouse output buffer is full
  6836 00005791 7402                <2>   jz  .mnn
  6837 00005793 E2F8                <2>   loop .mn
  6838                              <2>  .mnn:
  6839 00005795 C3                  <2> ret
  6840                              <2> 
  6841                              <2> 
  6842                              <2> ACTMOUS:
  6843 00005796 E8E4FFFFFF          <2>   call WMOUS
  6844 0000579B B0F4                <2>   mov  al, 0xf4 	; Command to activate mouse itselve (Stream mode)
  6845 0000579D E660                <2>   out  0x60, al		; write ps/2 controller output port (activate mouse)
  6846 0000579F E8CEFFFFFF          <2>   call CHKPRT		; check if command is progressed (demand!)
  6847 000057A4 E801000000          <2>   call CHKMOUS		; check if a byte is available
  6848 000057A9 C3                  <2> ret
  6849                              <2> 
  6850                              <2> CHKMOUS:
  6851 000057AA B300                <2>   mov  bl, 0
  6852 000057AC 66B96400            <2>   mov cx, 100
  6853                              <2>  .vrd:
  6854 000057B0 E464                <2>   in   al, 0x64		; read from keyboardcontroller
  6855 000057B2 A801                <2>   test al, 1		; check if controller buffer (60h) has data
  6856 000057B4 7504                <2>   jnz .yy
  6857 000057B6 E2F8                <2>   loop .vrd
  6858 000057B8 B301                <2>   mov  bl, 1
  6859                              <2>  .yy:
  6860 000057BA C3                  <2> ret
  6861                              <2> 
  6862                              <2> GETB:
  6863                              <2>  .cagain:
  6864 000057BB E8EAFFFFFF          <2>   call CHKMOUS		; check if a byte is available
  6865 000057C0 08DB                <2>   or bl, bl
  6866 000057C2 75F7                <2>   jnz .cagain
  6867 000057C4 B0AD                <2>   mov  al, 0xad		; Disable Keyboard
  6868 000057C6 E664                <2>   out  0x64, al		; write to keyboardcontroller
  6869 000057C8 E8A5FFFFFF          <2>   call CHKPRT		; check if command is progressed (demand!)
  6870 000057CD 6631C0              <2>   xor  ax, ax
  6871 000057D0 E460                <2>   in   al, 0x60		; read ps/2 controller output port (mousebyte)
  6872 000057D2 88C2                <2>   mov  dl, al
  6873 000057D4 B0AE                <2>   mov  al, 0xae		; Enable Keyboard
  6874 000057D6 E664                <2>   out  0x64, al		; write to keyboardcontroller
  6875 000057D8 E895FFFFFF          <2>   call CHKPRT		; check if command is progressed (demand!)
  6876 000057DD 88D0                <2>   mov  al, dl
  6877 000057DF C3                  <2> ret
  6878                              <2> 
  6879 000057E0 00                  <2> LBUTTON db 0x00	;	Left   button status 1=PRESSED 0=RELEASED
  6880 000057E1 00                  <2> RBUTTON db 0x00	;	Right  button status 1=PRESSED 0=RELEASED
  6881 000057E2 00                  <2> MBUTTON db 0x00	;	Middle button status 1=PRESSED 0=RELEASED
  6882 000057E3 00                  <2> XCOORD  db 0x00	;	the moved distance  (horizontal)
  6883 000057E4 00                  <2> YCOORD  db 0x00	;	the moved distance  (vertical)
  6884                              <1> %endif
  6885                              <1> %include "source/drivers/sound/pcspkr.asm"
  6886                              <2> ;PC Speaker Drivers
  6887                              <2> PCSpeakerRAW:
  6888 000057E5 60                  <2> 	pusha
  6889                              <2> nosoundrep:
  6890 000057E6 8B35[68020000]      <2> 	mov esi, [soundpos]
  6891 000057EC 31C9                <2> 	xor ecx, ecx
  6892 000057EE 668B0D[66020000]    <2> 	mov cx, [soundrepititions]
  6893 000057F5 6681F90000          <2> 	cmp cx, 0
  6894 000057FA 0F8548000000        <2> 	jne near donesetpitch
  6895 00005800 668B0E              <2> 	mov cx, [esi]
  6896 00005803 668B5E02            <2> 	mov bx, [esi + 2]
  6897 00005807 66890D[66020000]    <2> 	mov [soundrepititions], cx
  6898 0000580E 81C604000000        <2> 	add esi, 4
  6899 00005814 8935[68020000]      <2> 	mov [soundpos], esi
  6900 0000581A 3B35[6C020000]      <2> 	cmp esi, [soundendpos]
  6901 00005820 7735                <2> 	ja stopsound
  6902 00005822 66813D[66020000]00- <2> 	cmp word [soundrepititions], 0
  6903 0000582A 00                  <2>
  6904 0000582B 74B9                <2> 	je nosoundrep
  6905 0000582D 6681FB0000          <2> 	cmp bx, 0
  6906 00005832 740F                <2> 	je nosoundplay
  6907 00005834 E840000000          <2> 	call setpitch
  6908 00005839 E849000000          <2> 	call startsound
  6909 0000583E E905000000          <2> 	jmp donesetpitch
  6910                              <2> nosoundplay:
  6911 00005843 E846000000          <2> 	call killsound
  6912                              <2> donesetpitch:
  6913 00005848 6649                <2> 	dec cx
  6914 0000584A 66890D[66020000]    <2> 	mov [soundrepititions], cx
  6915 00005851 61                  <2> 	popa
  6916 00005852 E94EAAFFFF          <2> 	jmp timerinterrupt
  6917                              <2> stopsound:
  6918 00005857 31C0                <2> 	xor eax, eax
  6919 00005859 66A3[66020000]      <2> 	mov [soundrepititions], ax
  6920 0000585F A2[65020000]        <2> 	mov [soundon], al
  6921 00005864 A3[68020000]        <2> 	mov [soundpos], eax
  6922 00005869 A3[6C020000]        <2> 	mov [soundendpos], eax
  6923 0000586E E81B000000          <2> 	call killsound
  6924 00005873 61                  <2> 	popa
  6925 00005874 E92CAAFFFF          <2> 	jmp timerinterrupt
  6926                              <2> 
  6927                              <2> 
  6928                              <2> setpitch:
  6929 00005879 B0B6                <2> 	mov al, 0xB6
  6930 0000587B E643                <2> 	out 0x43, al
  6931 0000587D 6689D8              <2> 	mov ax, bx
  6932 00005880 E642                <2> 	out 0x42, al
  6933 00005882 88E0                <2> 	mov al, ah
  6934 00005884 E642                <2> 	out 0x42, al
  6935 00005886 C3                  <2> 	ret
  6936                              <2> startsound:
  6937 00005887 E461                <2> 	in al, 0x61
  6938 00005889 0C03                <2> 	or al, 3
  6939 0000588B E661                <2> 	out 0x61, al
  6940 0000588D C3                  <2> 	ret
  6941                              <2> killsound:
  6942 0000588E E461                <2> 	in al, 0x61
  6943 00005890 24FC                <2> 	and al, 0xFC
  6944 00005892 E661                <2> 	out 0x61, al
  6945 00005894 C3                  <2> 	ret
  6946                              <2> 	
  6947                              <1> %ifdef sound.included
  6948                              <1> 	%include "source/drivers/sound/sblaster.asm"
  6949                              <2> ;Sound Blaster Drivers
  6950                              <2> sblaster:
  6951                              <2> .init:
  6952 00005895 E8D7010000          <2> 		call ResetDSP			;If the system is Sound Blaster 16 compatible, reset the DSP
  6953 0000589A A2[CB5A0000]        <2> 		mov [SoundBlaster], al	;if the reset worked, show an available card
  6954 0000589F 3C00                <2> 		cmp al, 0
  6955 000058A1 7418                <2> 		je .noinit
  6956 000058A3 B0D1                <2> 		mov	al,0D1h 		; turn speaker(s) on
  6957 000058A5 E8FB010000          <2> 		call WriteDSP
  6958 000058AA B088                <2> 		mov	al,088h 		; Left = 8, Right = 8 (15-highest)
  6959 000058AC E8B1010000          <2> 		call MstrVol 		; L = Hi Nibble, R = Lo Nibble
  6960 000058B1 BE[BC580000]        <2> 		mov esi, .initmsg
  6961 000058B6 E847C4FFFF          <2> 		call print
  6962                              <2> .noinit:
  6963 000058BB C3                  <2> 		ret
  6964 000058BC 536F756E64626C6173- <2> .initmsg db "Soundblaster Initialized",10,0
  6965 000058C5 74657220496E697469- <2>
  6966 000058CE 616C697A65640A00    <2>
  6967                              <2> sblaster.cont: ;this function goes to the next available portion of a sound, if necessary
  6968 000058D6 813D[B55A0000]0000- <2> 	cmp dword [Length0], 0
  6969 000058DE 0000                <2>
  6970 000058E0 0F8462000000        <2> 	je near .done
  6971 000058E6 FF0D[B55A0000]      <2> 	dec dword [Length0]
  6972 000058EC E908000000          <2> 	jmp .notodd
  6973                              <2> .oddlength:
  6974 000058F1 31C9                <2> 	xor ecx, ecx
  6975 000058F3 880D[B45A0000]      <2> 	mov [OddLength], cl
  6976                              <2> .notodd:
  6977 000058F9 8B35[BB5A0000]      <2> 	mov esi, [NextMemLoc]
  6978 000058FF 31C9                <2> 	xor ecx, ecx
  6979 00005901 668B0D[B95A0000]    <2> 	mov cx, [Length1]
  6980 00005908 D1E9                <2> 	shr ecx, 1
  6981 0000590A 6641                <2> 	inc cx
  6982 0000590C 31DB                <2> 	xor ebx, ebx
  6983 0000590E 668B1D[C35A0000]    <2> 	mov bx, [SegLoc]
  6984 00005915 6601CB              <2> 	add bx, cx
  6985 00005918 66891D[C35A0000]    <2> 	mov [SegLoc], bx
  6986 0000591F 81C300000800        <2> 	add ebx, 0x80000 ;linear address of sb buffer
  6987 00005925 8935[BF5A0000]      <2> 	mov [MemLoc], esi
  6988 0000592B 89C8                <2> 	mov eax, ecx
  6989 0000592D 01F0                <2> 	add eax, esi
  6990 0000592F A3[BB5A0000]        <2> 	mov [NextMemLoc], eax
  6991 00005934 E833000000          <2> 	call DMACopy
  6992                              <2> 	;call DMAPlay
  6993 00005939 E8E0000000          <2> 	call PlayDSP
  6994 0000593E 66BA2E02            <2> 	mov dx, (BasePort+0xE)
  6995 00005942 EC                  <2> 	in al, dx ;acknowledge the interrupt 
  6996 00005943 E9F8A9FFFF          <2> 	jmp handled2 ;it is part of an interrupt routine
  6997                              <2> .done:
  6998 00005948 803D[B45A0000]01    <2> 	cmp byte [OddLength], 1
  6999 0000594F 74A0                <2> 	je .oddlength
  7000 00005951 31C0                <2> 	xor eax, eax
  7001 00005953 66A3[B95A0000]      <2> 	mov [Length1], ax
  7002 00005959 66B8D000            <2> 	mov ax, 0xD0
  7003 0000595D E843010000          <2> 	call WriteDSP
  7004 00005962 66BA2E02            <2> 	mov dx, (BasePort+0xE)
  7005 00005966 EC                  <2> 	in al, dx ;acknowledge the interrupt 
  7006 00005967 E9D4A9FFFF          <2> 	jmp handled2
  7007                              <2> 	
  7008                              <2> DMACopy:
  7009 0000596C 66B80800            <2> 		mov ax, LINEAR_SEL
  7010 00005970 8EE0                <2> 		mov fs, ax
  7011 00005972 C1E902              <2> 		shr ecx, 2
  7012                              <2> .loop:
  7013 00005975 8B06                <2> 		mov eax, [esi]
  7014 00005977 648903              <2> 		mov [fs:ebx], eax
  7015 0000597A 81C604000000        <2> 		add esi, 4
  7016 00005980 81C304000000        <2> 		add ebx, 4
  7017 00005986 E2ED                <2> 		loop .loop
  7018 00005988 66B83000            <2> 		mov ax, NEW_DATA_SEL
  7019 0000598C 8EE0                <2> 		mov fs, ax
  7020 0000598E C3                  <2> 		ret
  7021                              <2> 		
  7022                              <2> 
  7023                              <2> DMAPlay:    ;uses eax ebx edx
  7024 0000598F C605[C55A0000]00    <2> 		mov	byte [Page1],00h
  7025                              <2> 
  7026 00005996 B005                <2> 		mov	al,(Channel+4)
  7027 00005998 66BA0A00            <2> 		mov	dx,0Ah
  7028 0000599C EE                  <2> 		out	dx,al
  7029 0000599D 30C0                <2> 		xor	al,al
  7030 0000599F 66BA0C00            <2> 		mov	dx,0Ch
  7031 000059A3 EE                  <2> 		out	dx,al
  7032 000059A4 B059                <2> 		mov	al,ModeReg
  7033 000059A6 66BA0B00            <2> 		mov	dx,0Bh
  7034 000059AA EE                  <2> 		out	dx,al
  7035 000059AB B800000800          <2> 		mov	eax,0x80000
  7036 000059B0 66BA0200            <2> 		mov	dx,AddPort
  7037 000059B4 EE                  <2> 		out	dx,al
  7038 000059B5 86C4                <2> 		xchg al,ah
  7039 000059B7 EE                  <2> 		out	dx,al
  7040 000059B8 B800000800          <2> 		mov	eax,0x80000
  7041 000059BD 89C2                <2> 		mov	edx,eax
  7042 000059BF 2500000100          <2> 		and	eax,65536
  7043 000059C4 7406                <2> 		jz	MemLocN1
  7044 000059C6 FE05[C55A0000]      <2> 		inc	byte [Page1]
  7045                              <2> MemLocN1:
  7046 000059CC 89D0                <2> 		mov	eax,edx
  7047 000059CE 2500000200          <2> 		and	eax,131072
  7048 000059D3 7407                <2> 		jz	MemLocN2
  7049 000059D5 8005[C55A0000]02    <2> 		add	byte [Page1],02
  7050                              <2> MemLocN2:
  7051 000059DC 89D0                <2> 		mov	eax,edx
  7052 000059DE 2500000400          <2> 		and	eax,262144
  7053 000059E3 7407                <2> 		jz	MemLocN3
  7054 000059E5 8005[C55A0000]04    <2> 		add	byte [Page1],04
  7055                              <2> MemLocN3:
  7056 000059EC 89D0                <2> 		mov	eax,edx
  7057 000059EE 2500000800          <2> 		and	eax,524288
  7058 000059F3 7407                <2> 		jz	MemLocN4
  7059 000059F5 8005[C55A0000]08    <2> 		add	byte [Page1],08
  7060                              <2> MemLocN4:
  7061 000059FC 66BA8300            <2> 		mov	dx,PgPort
  7062 00005A00 A0[C55A0000]        <2> 		mov	al,[Page1]
  7063 00005A05 EE                  <2> 		out	dx,al
  7064 00005A06 66BA0300            <2> 		mov	dx,LenPort
  7065 00005A0A 66A1[B95A0000]      <2> 		mov	ax,[Length1]
  7066 00005A10 6648                <2> 		dec ax
  7067 00005A12 EE                  <2> 		out	dx,al
  7068 00005A13 86C4                <2> 		xchg al,ah
  7069 00005A15 EE                  <2> 		out	dx,al
  7070 00005A16 66BA0A00            <2> 		mov	dx,0Ah
  7071 00005A1A B001                <2> 		mov	al,Channel
  7072 00005A1C EE                  <2> 		out	dx,al
  7073 00005A1D C3                  <2> 		ret
  7074                              <2> 		
  7075                              <2> PlayDSP:
  7076 00005A1E B040                <2> 		mov	al,40h
  7077 00005A20 E880000000          <2> 		call WriteDSP
  7078 00005A25 31D2                <2> 		xor	edx,edx
  7079 00005A27 B840420F00          <2> 		mov	eax,1000000
  7080 00005A2C 8B1D[C65A0000]      <2> 		mov	ebx,[Freq]
  7081 00005A32 F7F3                <2> 		div	ebx
  7082 00005A34 89C3                <2> 		mov	ebx,eax
  7083 00005A36 B800010000          <2> 		mov	eax,256
  7084 00005A3B 29D8                <2> 		sub	eax,ebx
  7085 00005A3D E863000000          <2> 		call WriteDSP
  7086 00005A42 A0[CA5A0000]        <2> 		mov	al,[WAVEMode]	;write the mode
  7087 00005A47 E859000000          <2> 		call WriteDSP
  7088 00005A4C 66A1[B95A0000]      <2> 		mov	ax,[Length1]
  7089 00005A52 66D1E8              <2> 		shr ax, 1
  7090 00005A55 E84B000000          <2> 		call WriteDSP
  7091 00005A5A 86C4                <2> 		xchg al,ah
  7092 00005A5C E844000000          <2> 		call WriteDSP
  7093 00005A61 C3                  <2> 		ret
  7094                              <2> 
  7095                              <2> MstrVol:    ;uses ax dx
  7096 00005A62 6650                <2> 	   push ax
  7097 00005A64 66BA2402            <2> 	   mov	dx,(BasePort+4)
  7098 00005A68 B022                <2> 	   mov	al,22h
  7099 00005A6A EE                  <2> 	   out	dx,al
  7100 00005A6B 6658                <2> 	   pop	ax
  7101 00005A6D 6642                <2> 	   inc	dx
  7102 00005A6F EE                  <2> 	   out	dx,al
  7103 00005A70 C3                  <2> 	   ret
  7104                              <2> 	   
  7105                              <2> ResetDSP:   ; uses cx dx
  7106 00005A71 66BA2602            <2> 			mov	dx,(BasePort+6)
  7107 00005A75 B001                <2> 			mov	al,01
  7108 00005A77 EE                  <2> 			out	dx,al
  7109 00005A78 66B93200            <2> 			mov	cx,50
  7110 00005A7C EC                  <2> WaitIt1:	in	al,dx
  7111 00005A7D E2FD                <2> 			loop WaitIt1
  7112 00005A7F 30C0                <2> 			xor	al,al
  7113 00005A81 EE                  <2> 			out	dx,al
  7114 00005A82 66B93200            <2> 			mov	cx,50
  7115 00005A86 EC                  <2> WaitIt2:	in	al,dx
  7116 00005A87 E2FD                <2> 			loop WaitIt2
  7117 00005A89 B4FF                <2> 			mov	ah,0FFh 		; part of Return Code
  7118 00005A8B 66BA2E02            <2> 			mov	dx,(BasePort+14)
  7119 00005A8F EC                  <2> 			in	al,dx
  7120 00005A90 2480                <2> 			and	al,80h
  7121 00005A92 3C80                <2> 			cmp	al,80h
  7122 00005A94 750C                <2> 			jne	ResetErr
  7123 00005A96 66BA2A02            <2> 			mov	dx,(BasePort+10)
  7124 00005A9A EC                  <2> 			in	al,dx
  7125 00005A9B 3CAA                <2> 			cmp	al,0AAh
  7126 00005A9D 7503                <2> 			jne	ResetErr
  7127 00005A9F B001                <2> ResetOK:	mov al, 1		; return ax = 0 if reset ok
  7128 00005AA1 C3                  <2> 			ret
  7129 00005AA2 30C0                <2> ResetErr:	xor al, al
  7130 00005AA4 C3                  <2> 			ret
  7131                              <2> 
  7132                              <2> WriteDSP:   ;uses ax dx
  7133 00005AA5 6650                <2> 		push ax
  7134 00005AA7 66BA2C02            <2> 		mov	dx,(BasePort+12)
  7135 00005AAB EC                  <2> WaitIt:	in	al,dx
  7136 00005AAC 2480                <2> 		and	al,80h
  7137 00005AAE 75FB                <2> 		jnz	WaitIt
  7138 00005AB0 6658                <2> 		pop	ax
  7139 00005AB2 EE                  <2> 		out	dx,al
  7140 00005AB3 C3                  <2> 		ret
  7141                              <2> 
  7142 00005AB4 00                  <2> OddLength db 0
  7143 00005AB5 00000000            <2> Length0 dd	0
  7144 00005AB9 0000                <2> Length1	dw  0
  7145 00005ABB 00000000            <2> NextMemLoc dd 0
  7146 00005ABF 00000000            <2> MemLoc	dd  0
  7147 00005AC3 0000                <2> SegLoc  dw 0
  7148 00005AC5 00                  <2> Page1	db  0
  7149 00005AC6 00000000            <2> Freq	dd	0
  7150 00005ACA 14                  <2> WAVEMode db 14h
  7151                              <2> PgPort	equ 83h
  7152                              <2> AddPort	equ 02h
  7153                              <2> LenPort	equ 03h
  7154                              <2> ModeReg	equ 59h
  7155                              <2> Channel	equ 01h
  7156                              <2> BasePort	equ 220h
  7157 00005ACB 00                  <2> SoundBlaster	db 0
  7158                              <1> %endif
  7159                              <1> %ifdef rtl8139.included
  7160                              <1> 	%include "source/drivers/network/rtl8139.asm"
  7161                              <1> %endif
  7162                              <1> %ifdef ne2000.included
  7163                              <1> 	%include "source/drivers/network/ne2000.asm"
  7164                              <2> ne2000:
  7165                              <2> ;	PAGE0			PAGE 1			PAGE 2
  7166                              <2> ;	READ	WRITE	READ	WRITE	READ	WRITE
  7167                              <2> ;0	CR		CR		CR		CR		CR		CR
  7168                              <2> ;1	CLDA0 	PSTART	PAR0	PAR0	PSTART	CLDA0
  7169                              <2> ;2	CLDA1	PSTOP	PAR1	PAR1	PSTOP	CLDA1
  7170                              <2> ;3	BNRY	BNRY	PAR2	PAR2	RNPP	RNPP
  7171                              <2> ;4	TSR		TPSR	PAR3	PAR3	TPSR	N/A
  7172                              <2> ;5	NCR		TBCR0	PAR4	PAR4	LNPP	LNPP
  7173                              <2> ;6	FIFO	TCBR1	PAR5	PAR5	ACU		ACU
  7174                              <2> ;7	ISR		ISR		CURR	CURR	ACL		ACL
  7175                              <2> ;8	CRDA0	RSAR0	MAR0	MAR0	N/A		N/A
  7176                              <2> ;9	CRDA1	RSAR1	MAR1	MAR1	N/A		N/A
  7177                              <2> ;A	N/A		RBCR0	MAR2	MAR2	N/A		N/A
  7178                              <2> ;B	N/A		RBCR1	MAR3	MAR3	N/A		N/A
  7179                              <2> ;C	RSR		RCR		MAR4	MAR4	RCR		N/A
  7180                              <2> ;D	CNTR0	TCR		MAR5	MAR5	TCR		N/A
  7181                              <2> ;E	CNTR1	DCR		MAR6	MAR6	DCR		N/A
  7182                              <2> ;F	CNTR2	IMR		MAR7	MAR7	IMR		N/A
  7183                              <2> .CR equ 0
  7184                              <2> 	.CR.STP	equ 1		;Stop
  7185                              <2> 	.CR.STA equ 2		;Start
  7186                              <2> 	.CR.TXP equ 4		;Transmit
  7187                              <2> 	.CR.RD0 equ 8		;Remote DMA 0
  7188                              <2> 	.CR.RD1 equ 0x10	;Remote DMA 1
  7189                              <2> 	.CR.RD2 equ 0x20	;Remote DMA 2
  7190                              <2> 	.CR.PS0 equ 0x40	;Page Select 0
  7191                              <2> 	.CR.PS1 equ 0x80	;Page Select 1
  7192                              <2> .PSTART equ 1
  7193                              <2> .PSTOP equ 2
  7194                              <2> .BNRY equ 3
  7195                              <2> .ISR equ 7
  7196                              <2> 	.ISR.PRX equ 1		;Packet Received
  7197                              <2> 	.ISR.PTX equ 2		;Packet Transmitted
  7198                              <2> 	.ISR.RXE equ 4		;Receive Error
  7199                              <2> 	.ISR.TXE equ 8		;Transmission Error
  7200                              <2> 	.ISR.OVW equ 0x10	;Overwrite
  7201                              <2> 	.ISR.CNT equ 0x20	;Counter Overflow
  7202                              <2> 	.ISR.RDC equ 0x40	;Remote Data Complete
  7203                              <2> 	.ISR.RST equ 0x80	;Reset status
  7204                              <2> .RSAR0 equ 8
  7205                              <2> .RSAR1 equ 9
  7206                              <2> .RBCR0 equ 0xA
  7207                              <2> .RBCR1 equ 0xB
  7208                              <2> .RCR equ 0xC
  7209                              <2> 	.RCR.SEP equ 1		;Save Errored Packets
  7210                              <2> 	.RCR.AR equ 2		;Accept Runt packet
  7211                              <2> 	.RCR.AB equ 4		;Accept Broadcast
  7212                              <2> 	.RCR.AM equ 8		;Accept Multicast
  7213                              <2> 	.RCR.PRO equ 0x10	;Promiscuous Physical
  7214                              <2> 	.RCR.MON equ 0x20	;Monitor Mode
  7215                              <2> .DCR equ 0xE
  7216                              <2> 	.DCR.WTS equ 1		;Word Transfer Select
  7217                              <2> 	.DCR.BOS equ 2		;Byte Order Select
  7218                              <2> 	.DCR.LAS equ 4		;Long Address Select
  7219                              <2> 	.DCR.LS equ 8		;Loopback Select
  7220                              <2> 	.DCR.AR equ 0x10	;Auto-initialize Remote
  7221                              <2> 	.DCR.FT0 equ 0x20	;FIFO Threshold Select 0
  7222                              <2> 	.DCR.FT1 equ 0x40	;FIFO Threshold Select 1
  7223                              <2> .ASIC equ 0x10
  7224                              <2> .RESET equ 0x1F
  7225                              <2> 
  7226                              <2> .init:
  7227 00005ACC BBFFFFFFFF          <2> 	mov ebx, 0xFFFFFFFF
  7228 00005AD1 31C0                <2> 	xor eax, eax
  7229 00005AD3 A2[20620000]        <2> 	mov [pcifunction], al
  7230 00005AD8 A2[1E620000]        <2> 	mov [pcibus], al
  7231 00005ADD A2[1F620000]        <2> 	mov [pcidevice], al
  7232 00005AE2 B002                <2> 	mov al, 0x02 ;;type code
  7233 00005AE4 A2[A3620000]        <2> 	mov [pcitype], al
  7234 00005AE9 B8EC102980          <2> 	mov eax, 0x802910EC
  7235 00005AEE A3[23620000]        <2> 	mov [pcidevid], eax
  7236 00005AF3 E833070000          <2> 	call getpciport
  7237 00005AF8 81FBFFFFFFFF        <2> 	cmp ebx, 0xFFFFFFFF
  7238 00005AFE 7501                <2> 	jne .good0
  7239 00005B00 C3                  <2> 	ret
  7240                              <2> .good0:
  7241 00005B01 8915[CB5D0000]      <2> 	mov [.basenicaddr], edx
  7242 00005B07 89D1                <2> 	mov ecx, edx
  7243                              <2> .test:
  7244 00005B09 E854000000          <2> 	call .reset
  7245 00005B0E E87B000000          <2> 	call .stop
  7246 00005B13 89CA                <2> 	mov edx, ecx
  7247 00005B15 B9FF000000          <2> 	mov ecx, 0xFF
  7248 00005B1A E2FE                <2> 	loop $ ;wait for ~100 us
  7249 00005B1C 89D1                <2> 	mov ecx, edx
  7250 00005B1E EC                  <2> 	in al, dx
  7251 00005B1F 2427                <2> 	and al, (.CR.RD2 | .CR.TXP | .CR.STA | .CR.STP)
  7252 00005B21 3C21                <2> 	cmp al, (.CR.RD2 | .CR.STP)
  7253 00005B23 7410                <2> 	je .good1
  7254 00005B25 89CA                <2> 	mov edx, ecx
  7255 00005B27 81C207000000        <2> 	add edx, .ISR
  7256 00005B2D EC                  <2> 	in al, dx
  7257 00005B2E 2480                <2> 	and al, .ISR.RST
  7258 00005B30 3C80                <2> 	cmp al, .ISR.RST
  7259 00005B32 7401                <2> 	je .good1
  7260 00005B34 C3                  <2> 	ret
  7261                              <2> .good1:
  7262 00005B35 E821D3FFFF          <2> call showhex	;for debugging, please remove
  7263 00005B3A E85B000000          <2> 	call .setup
  7264 00005B3F E889270000          <2> call showmac
  7265 00005B44 BE[D05D0000]        <2> mov esi, .name
  7266 00005B49 E8B4C1FFFF          <2> call print
  7267 00005B4E BE[D85D0000]        <2> mov esi, .initmsg
  7268 00005B53 E8AAC1FFFF          <2> call print
  7269 00005B58 C605[CF5D0000]01    <2> 	mov byte [.nicconfig], 1
  7270 00005B5F 31DB                <2> 	xor ebx, ebx
  7271 00005B61 C3                  <2> 	ret
  7272                              <2> .reset:
  7273 00005B62 8B15[CB5D0000]      <2> 	mov edx, [.basenicaddr]
  7274 00005B68 81C21F000000        <2> 	add edx, .RESET
  7275 00005B6E EC                  <2> 	in al, dx
  7276 00005B6F EE                  <2> 	out dx, al ;write its contents to itself
  7277 00005B70 C3                  <2> 	ret
  7278                              <2> .page:
  7279 00005B71 66C1E00E            <2> 	shl ax, 14
  7280 00005B75 8B15[CB5D0000]      <2> 	mov edx, [.basenicaddr]
  7281 00005B7B EC                  <2> 	in al, dx
  7282 00005B7C 243F                <2> 	and al, 00111111b
  7283 00005B7E 08E0                <2> 	or al, ah
  7284 00005B80 EE                  <2> 	out dx, al
  7285 00005B81 C3                  <2> 	ret
  7286                              <2> .start:
  7287 00005B82 8B15[CB5D0000]      <2> 	mov edx, [.basenicaddr]
  7288 00005B88 B020                <2> 	mov al, .CR.RD2
  7289 00005B8A B002                <2> 	mov al, .CR.STA
  7290 00005B8C EE                  <2> 	out dx, al
  7291 00005B8D C3                  <2> 	ret
  7292                              <2> .stop:
  7293 00005B8E 8B15[CB5D0000]      <2> 	mov edx, [.basenicaddr]
  7294 00005B94 B020                <2> 	mov al, .CR.RD2
  7295 00005B96 0C01                <2> 	or al, .CR.STP
  7296 00005B98 EE                  <2> 	out dx, al
  7297 00005B99 C3                  <2> 	ret
  7298                              <2> .setup:
  7299 00005B9A E8EFFFFFFF          <2> 	call .stop
  7300 00005B9F 8B15[CB5D0000]      <2> 	mov edx, [.basenicaddr]
  7301 00005BA5 81C20E000000        <2> 	add edx, .DCR
  7302 00005BAB B040                <2> 	mov al, .DCR.FT1
  7303 00005BAD 0C01                <2> 	or al, .DCR.WTS
  7304 00005BAF 0C08                <2> 	or al, .DCR.LS
  7305 00005BB1 EE                  <2> 	out dx, al ;Set FIFO threshold, byte order, word-wide DMA
  7306 00005BB2 E8B9000000          <2> 	call .getmac
  7307 00005BB7 E8D2FFFFFF          <2> 	call .stop
  7308 00005BBC 30C0                <2> 	xor al, al
  7309 00005BBE 8B15[CB5D0000]      <2> 	mov edx, [.basenicaddr]
  7310 00005BC4 81C20A000000        <2> 	add edx, .RBCR0
  7311 00005BCA EE                  <2> 	out dx, al
  7312 00005BCB 6642                <2> 	inc dx
  7313 00005BCD EE                  <2> 	out dx, al ;Clear byte count
  7314 00005BCE B800400000          <2> 	mov eax, 16*1024
  7315 00005BD3 A3[EA5D0000]        <2> 	mov [.ringstart], eax
  7316 00005BD8 C1E808              <2> 	shr eax, 8
  7317 00005BDB 66A3[E65D0000]      <2> 	mov [.pagestart], ax
  7318 00005BE1 0534000000          <2> 	add eax, 64-2*6
  7319 00005BE6 A3[E85D0000]        <2> 	mov [.pageend], eax
  7320 00005BEB C1E008              <2> 	shl eax, 8
  7321 00005BEE 66A3[EE5D0000]      <2> 	mov [.ringend], ax ;set page and ring starts and ends
  7322 00005BF4 8B15[CB5D0000]      <2> 	mov edx, [.basenicaddr]
  7323 00005BFA 81C201000000        <2> 	add edx, .PSTART
  7324 00005C00 A0[E65D0000]        <2> 	mov al, [.pagestart]
  7325 00005C05 EE                  <2> 	out dx, al
  7326 00005C06 A0[E85D0000]        <2> 	mov al, [.pageend]
  7327 00005C0B 6642                <2> 	inc dx
  7328 00005C0D EE                  <2> 	out dx, al
  7329 00005C0E A0[E65D0000]        <2> 	mov al, [.pagestart]
  7330 00005C13 6642                <2> 	inc dx
  7331 00005C15 EE                  <2> 	out dx, al
  7332 00005C16 E873FFFFFF          <2> 	call .stop
  7333                              <2> ;INSERT INTERRUPT ENABLE HERE
  7334 00005C1B B001                <2> 	mov al, 1
  7335 00005C1D E84FFFFFFF          <2> 	call .page
  7336 00005C22 8B15[CB5D0000]      <2> 	mov edx, [.basenicaddr]
  7337 00005C28 BF[F85D0000]        <2> 	mov edi, .rom
  7338                              <2> .copymactocard:
  7339 00005C2D 42                  <2> 	inc edx
  7340 00005C2E 6E                  <2> 	outsb
  7341 00005C2F 81C702000000        <2> 	add edi, 2
  7342 00005C35 81FA06000000        <2> 	cmp edx, 6
  7343 00005C3B 76F0                <2> 	jbe .copymactocard
  7344 00005C3D 8B15[CB5D0000]      <2> 	mov edx, [.basenicaddr]
  7345 00005C43 81C207000000        <2> 	add edx, 7
  7346 00005C49 A0[E65D0000]        <2> 	mov al, [.pagestart]
  7347 00005C4E FEC0                <2> 	inc al
  7348 00005C50 EE                  <2> 	out dx, al ;set page in CURR register
  7349                              <2> ;INSERT MULTICAST INIT HERE
  7350 00005C51 E838FFFFFF          <2> 	call .stop
  7351 00005C56 8B15[CB5D0000]      <2> 	mov edx, [.basenicaddr]
  7352 00005C5C 81C20C000000        <2> 	add edx, .RCR
  7353 00005C62 B004                <2> 	mov al, .RCR.AB
  7354 00005C64 EE                  <2> 	out dx, al ;accept broadcast
  7355 00005C65 6642                <2> 	inc dx
  7356 00005C67 30C0                <2> 	xor al, al
  7357 00005C69 EE                  <2> 	out dx, al ;stop loopback
  7358 00005C6A E813FFFFFF          <2> 	call .start
  7359 00005C6F C3                  <2> 	ret
  7360                              <2> .getmac:
  7361 00005C70 8B15[CB5D0000]      <2> 	mov edx, [.basenicaddr]
  7362 00005C76 B020                <2> 	mov al, 0x20
  7363 00005C78 0C02                <2> 	or al, 2
  7364 00005C7A EE                  <2> 	out dx, al	;set STA and RD2 bits
  7365 00005C7B 6681C20A00          <2> 	add dx, .RBCR0
  7366 00005C80 B010                <2> 	mov al, 16
  7367 00005C82 EE                  <2> 	out dx, al
  7368 00005C83 6642                <2> 	inc dx
  7369 00005C85 30C0                <2> 	xor al, al
  7370 00005C87 EE                  <2> 	out dx, al
  7371 00005C88 8B15[CB5D0000]      <2> 	mov edx, [.basenicaddr]
  7372 00005C8E 6681C20800          <2> 	add dx, .RSAR0
  7373 00005C93 EE                  <2> 	out dx, al
  7374 00005C94 6642                <2> 	inc dx
  7375 00005C96 EE                  <2> 	out dx, al
  7376 00005C97 668B15[CB5D0000]    <2> 	mov dx, [.basenicaddr]
  7377 00005C9E B008                <2> 	mov al, 8
  7378 00005CA0 0C02                <2> 	or al, 2
  7379 00005CA2 EE                  <2> 	out dx, al
  7380 00005CA3 668B15[CB5D0000]    <2> 	mov dx, [.basenicaddr]
  7381 00005CAA 6681C21000          <2> 	add dx, .ASIC
  7382 00005CAF B908000000          <2> 	mov ecx, 8
  7383 00005CB4 BF[F85D0000]        <2> 	mov edi, .rom
  7384 00005CB9 F3666D              <2> 	rep insw
  7385                              <2> .copymac:
  7386 00005CBC BF[F85D0000]        <2> 	mov edi, .rom
  7387 00005CC1 BE[F25D0000]        <2> 	mov esi, .mac
  7388 00005CC6 B906000000          <2> 	mov ecx, 6
  7389                              <2> .lpmac:
  7390 00005CCB 8A07                <2> 	mov al, [edi]
  7391 00005CCD 8806                <2> 	mov [esi], al
  7392 00005CCF 81C702000000        <2> 	add edi, 2
  7393 00005CD5 46                  <2> 	inc esi
  7394 00005CD6 E2F3                <2> 	loop .lpmac
  7395 00005CD8 B9[F25D0000]        <2> 	mov ecx, .mac
  7396 00005CDD C3                  <2> 	ret
  7397                              <2> .sendpacket:
  7398 00005CDE 803D[CF5D0000]00    <2> 	cmp byte [.nicconfig], 0
  7399 00005CE5 7512                <2> 	jne .sendit
  7400 00005CE7 56                  <2> 	push esi
  7401 00005CE8 57                  <2> 	push edi
  7402 00005CE9 E8DEFDFFFF          <2> 	call .init
  7403 00005CEE 5F                  <2> 	pop edi
  7404 00005CEF 5E                  <2> 	pop esi
  7405 00005CF0 81FB00000000        <2> 	cmp ebx, 0
  7406 00005CF6 7401                <2> 	je .sendit
  7407 00005CF8 C3                  <2> 	ret
  7408                              <2> .sendit: ;packet start in edi, end in esi
  7409 00005CF9 87F7                <2> 	xchg esi, edi ;this helps with the outsw
  7410                              <2> 	;now the packet start is in esi, end in edi
  7411 00005CFB 8B0D[F25D0000]      <2> 	mov ecx, [.mac]
  7412 00005D01 894E06              <2> 	mov [esi + 6], ecx
  7413 00005D04 668B0D[F65D0000]    <2> 	mov cx, [.mac + 4]
  7414 00005D0B 66894E0A            <2> 	mov [esi + 10], cx	;copy the correct mac
  7415 00005D0F 8B15[CB5D0000]      <2> 	mov edx, [.basenicaddr]
  7416 00005D15 B020                <2> 	mov al, .CR.RD2
  7417 00005D17 0C02                <2> 	or al, .CR.STA
  7418 00005D19 EE                  <2> 	out dx, al ;set RD2 and STA
  7419 00005D1A 81C207000000        <2> 	add edx, .ISR ; ISR
  7420 00005D20 B040                <2> 	mov al, .ISR.RDC
  7421 00005D22 EE                  <2> 	out dx, al ;set RDC flag
  7422 00005D23 8B15[CB5D0000]      <2> 	mov edx, [.basenicaddr]
  7423 00005D29 6681C20A00          <2> 	add dx, .RBCR0
  7424 00005D2E 89F8                <2> 	mov eax, edi
  7425 00005D30 29F0                <2> 	sub eax, esi
  7426 00005D32 BB01000000          <2> 	mov ebx, 1
  7427 00005D37 21C3                <2> 	and ebx, eax
  7428 00005D39 81FB01000000        <2> 	cmp ebx, 1
  7429 00005D3F 7501                <2> 	jne .nofixword
  7430 00005D41 40                  <2> 	inc eax
  7431                              <2> .nofixword:
  7432 00005D42 89C1                <2> 	mov ecx, eax ;save length in ecx
  7433 00005D44 EE                  <2> 	out dx, al
  7434 00005D45 86C4                <2> 	xchg al, ah
  7435 00005D47 6642                <2> 	inc dx
  7436 00005D49 EE                  <2> 	out dx, al ;send size
  7437 00005D4A 8B15[CB5D0000]      <2> 	mov edx, [.basenicaddr]
  7438 00005D50 6681C20800          <2> 	add dx, .RSAR0
  7439 00005D55 66A1[E65D0000]      <2> 	mov ax, [.pagestart]
  7440 00005D5B C1E008              <2> 	shl eax, 8
  7441 00005D5E EE                  <2> 	out dx, al
  7442 00005D5F 86C4                <2> 	xchg al, ah
  7443 00005D61 6642                <2> 	inc dx
  7444 00005D63 EE                  <2> 	out dx, al ;send address in NIC memory
  7445 00005D64 8B15[CB5D0000]      <2> 	mov edx, [.basenicaddr]
  7446 00005D6A B010                <2> 	mov al, .CR.RD1
  7447 00005D6C 0C02                <2> 	or al, .CR.STA
  7448 00005D6E EE                  <2> 	out dx, al ;set RD and STA
  7449 00005D6F 89CB                <2> 	mov ebx, ecx ;save length in ebx
  7450 00005D71 D1E9                <2> 	shr ecx, 1
  7451 00005D73 8B15[CB5D0000]      <2> 	mov edx, [.basenicaddr]
  7452 00005D79 6681C21000          <2> 	add dx, 0x10
  7453 00005D7E F3666F              <2> 	rep outsw ;Send the packet data
  7454 00005D81 8B15[CB5D0000]      <2> 	mov edx, [.basenicaddr]
  7455 00005D87 6681C20700          <2> 	add dx, .ISR
  7456                              <2> .chkcopylp:
  7457 00005D8C B440                <2> 	mov ah, .ISR.RDC
  7458 00005D8E EC                  <2> 	in al, dx
  7459 00005D8F 20C4                <2> 	and ah, al
  7460 00005D91 80FC40              <2> 	cmp ah, 0x40
  7461 00005D94 75F6                <2> 	jne .chkcopylp	
  7462 00005D96 8B15[CB5D0000]      <2> 	mov edx, [.basenicaddr]
  7463 00005D9C 6681C20400          <2> 	add dx, 4
  7464 00005DA1 A0[E65D0000]        <2> 	mov al, [.pagestart]
  7465 00005DA6 EE                  <2> 	out dx, al ;send start address in pages
  7466 00005DA7 8B15[CB5D0000]      <2> 	mov edx, [.basenicaddr]
  7467 00005DAD 81C205000000        <2> 	add edx, 0x5
  7468 00005DB3 89D8                <2> 	mov eax, ebx
  7469 00005DB5 EE                  <2> 	out dx, al
  7470 00005DB6 86C4                <2> 	xchg al, ah
  7471 00005DB8 6642                <2> 	inc dx
  7472 00005DBA EE                  <2> 	out dx, al ;send length
  7473 00005DBB 8B15[CB5D0000]      <2> 	mov edx, [.basenicaddr]
  7474 00005DC1 B020                <2> 	mov al, 0x20
  7475 00005DC3 0C04                <2> 	or al, 4
  7476 00005DC5 0C02                <2> 	or al, 2
  7477 00005DC7 EE                  <2> 	out dx, al ;set RD2, TXP, and STA
  7478 00005DC8 31DB                <2> 	xor ebx, ebx
  7479 00005DCA C3                  <2> 	ret
  7480 00005DCB 00000000            <2> .basenicaddr dd 0
  7481 00005DCF 00                  <2> .nicconfig db 0
  7482 00005DD0 4E45323030302000    <2> .name db "NE2000 ",0
  7483 00005DD8 496E697469616C697A- <2> .initmsg db "Initialized.",10,0
  7484 00005DE1 65642E0A00          <2>
  7485                              <2> align 2, nop
  7486 00005DE6 0000                <2> .pagestart dw 0
  7487 00005DE8 0000                <2> .pageend dw 0
  7488 00005DEA 00000000            <2> .ringstart dd 0
  7489 00005DEE 00000000            <2> .ringend dd 0
  7490 00005DF2 000000000000        <2> .mac db 0,0,0,0,0,0
  7491 00005DF8 00<rept>            <2> .rom times 16 db 0
  7492                              <1> %endif
  7493                              <1> %ifdef io.serial
  7494                              <1> 	%include "source/drivers/input/serial.asm"
  7495                              <1> %else
  7496                              <1> 	%include "source/drivers/input/keyboard.asm"
  7497 00005E08 00                  <2> specialkey db 0
  7498 00005E09 00                  <2> charregion db 0
  7499                              <2> waitforinput:		;;this is basically the idle process
  7500                              <2> 					;;this halts the cpu for a small amount of time and then sees if there was a keypress
  7501                              <2> 					;;this lets the cpu stay at close to 0% instead of 100%
  7502 00005E0A 6631C0              <2> 	xor ax, ax
  7503 00005E0D A0[AF660000]        <2> 	mov al, [threadson]
  7504 00005E12 8825[AF660000]      <2> 	mov [threadson], ah
  7505 00005E18 FB                  <2> 	sti
  7506 00005E19 F4                  <2> 	hlt
  7507 00005E1A A2[AF660000]        <2> 	mov [threadson], al
  7508 00005E1F 3A25[13220000]      <2> 	cmp ah, [trans]
  7509 00005E25 7401                <2> 	je getkey
  7510 00005E27 C3                  <2> 	ret
  7511                              <2> getkey:
  7512 00005E28 31C0                <2> 		xor eax, eax
  7513 00005E2A A2[085E0000]        <2> 		mov [specialkey], al
  7514 00005E2F 66A3[11220000]      <2> 		mov [lastkey], ax
  7515 00005E35 E464                <2> 		in al, 64h ; Status
  7516                              <2> 	%ifdef gui.included
  7517 00005E37 A820                <2> 		test al, 20h ; PS2-Mouse?
  7518 00005E39 0F85F6F6FFFF        <2> 		jnz near moused
  7519                              <2> 	%endif
  7520 00005E3F A801                <2> 		test al, 1 
  7521 00005E41 74C7                <2> 		jz waitforinput ; if output buffer full or no keypress, jump to idle process
  7522                              <2> 	calckey:
  7523 00005E43 E460                <2> 		in al, 60h
  7524 00005E45 88C4                <2> 		mov ah, al
  7525 00005E47 30C0                <2> 		xor al, al
  7526 00005E49 8825[12220000]      <2> 		mov [lastkey + 1], ah
  7527 00005E4F 88E0                <2> 		mov al, ah
  7528 00005E51 BF[EA5F0000]        <2> 		mov edi, scancode
  7529                              <2> 	searchscan: 
  7530 00005E56 3C3A                <2> 		cmp al, 3Ah
  7531 00005E58 731A                <2> 		jae scanother
  7532 00005E5A 30E4                <2> 		xor ah, ah
  7533 00005E5C C0E002              <2> 		shl al, 2
  7534 00005E5F 01C7                <2> 		add edi, eax
  7535 00005E61 D0E8                <2> 		shr al, 1
  7536 00005E63 01C7                <2> 		add edi, eax
  7537 00005E65 D0E8                <2> 		shr al, 1
  7538 00005E67 8A27                <2> 		mov ah, [edi]
  7539 00005E69 80FC00              <2> 		cmp ah, 0
  7540 00005E6C 7406                <2> 		je scanother
  7541 00005E6E E9D7000000          <2> 		jmp scanfound
  7542 00005E73 00                  <2> uppercase db 0
  7543                              <2> scanother:
  7544 00005E74 88C4                <2> 		mov ah, al
  7545 00005E76 30C0                <2> 		xor al, al
  7546 00005E78 66A3[11220000]      <2> 		mov [lastkey], ax
  7547 00005E7E 80FCE0              <2> 		cmp ah, 0E0h
  7548 00005E81 0F847D000000        <2> 		je near getkeyspecial
  7549 00005E87 803D[085E0000]E0    <2> 		cmp byte [specialkey], 0xE0
  7550 00005E8E 752B                <2> 		jne nospecialkey
  7551 00005E90 80FC38              <2> 		cmp ah, 38h
  7552 00005E93 0F84A0000000        <2> 		je near alton
  7553 00005E99 80FCB8              <2> 		cmp ah, 0B8h
  7554 00005E9C 0F849F000000        <2> 		je near altoff
  7555 00005EA2 80FC1D              <2> 		cmp ah, 1Dh
  7556 00005EA5 0F847E000000        <2> 		je near ctron
  7557 00005EAB 80FC9D              <2> 		cmp ah, 9Dh
  7558 00005EAE 0F847D000000        <2> 		je near ctroff
  7559 00005EB4 66A3[11220000]      <2> 		mov [lastkey], ax
  7560 00005EBA C3                  <2> 		ret
  7561                              <2> nospecialkey:
  7562 00005EBB 80FC2A              <2> 		cmp ah, 2Ah
  7563 00005EBE 0F8455000000        <2> 		je near shifton
  7564 00005EC4 80FC36              <2> 		cmp ah, 36h
  7565 00005EC7 0F844C000000        <2> 		je near shifton
  7566 00005ECD 80FC1C              <2> 		cmp ah, 1Ch
  7567 00005ED0 0F8473000000        <2> 		je near entdown
  7568 00005ED6 80FCAA              <2> 		cmp ah, 0AAh
  7569 00005ED9 0F8442000000        <2> 		je near shiftoff
  7570 00005EDF 80FCB6              <2> 		cmp ah, 0B6h
  7571 00005EE2 0F8439000000        <2> 		je near shiftoff
  7572 00005EE8 80FC3A              <2> 		cmp ah, 3Ah
  7573 00005EEB 0F84A5000000        <2> 		je near capslock
  7574 00005EF1 80FC45              <2> 		cmp ah, 0x45
  7575 00005EF4 0F84AD000000        <2> 		je near numlock
  7576 00005EFA 80FC46              <2> 		cmp ah, 0x46
  7577 00005EFD 0F84BC000000        <2> 		je near scrolllock
  7578 00005F03 C3                  <2> 		ret
  7579                              <2> 	getkeyspecial:
  7580 00005F04 C605[085E0000]E0    <2> 		mov byte [specialkey], 0xE0
  7581 00005F0B E933FFFFFF          <2> 		jmp calckey
  7582                              <2> 	shift:
  7583 00005F10 A0[735E0000]        <2> 		mov al, [uppercase]
  7584 00005F15 3C01                <2> 		cmp al, 1
  7585 00005F17 7308                <2> 		jae shiftoff
  7586                              <2> 	shifton:
  7587 00005F19 C605[735E0000]01    <2> 		mov byte [uppercase], 1
  7588 00005F20 C3                  <2> 		ret
  7589                              <2> 	shiftoff:
  7590 00005F21 C605[735E0000]00    <2> 		mov byte [uppercase], 0
  7591 00005F28 C3                  <2> 		ret
  7592                              <2> 	ctron:
  7593 00005F29 C605[955F0000]01    <2> 		mov byte [ctrkey], 1
  7594 00005F30 C3                  <2> 		ret
  7595                              <2> 	ctroff:
  7596 00005F31 C605[955F0000]00    <2> 		mov byte [ctrkey], 0
  7597 00005F38 C3                  <2> 		ret
  7598                              <2> 	alton:
  7599 00005F39 C605[945F0000]01    <2> 		mov byte [altkey], 1
  7600 00005F40 C3                  <2> 		ret
  7601                              <2> 	altoff:
  7602 00005F41 C605[945F0000]00    <2> 		mov byte [altkey], 0
  7603 00005F48 C3                  <2> 		ret
  7604                              <2> 	entdown:
  7605 00005F49 C3                  <2> 		ret
  7606                              <2> 	scanfound:
  7607 00005F4A 81C704000000        <2> 		add edi, 4
  7608 00005F50 803D[955F0000]01    <2> 		cmp byte [ctrkey], 1
  7609 00005F57 731B                <2> 		jae altin
  7610 00005F59 81EF04000000        <2> 		sub edi, 4
  7611 00005F5F 81C702000000        <2> 		add edi, 2
  7612 00005F65 803D[945F0000]01    <2> 		cmp byte [altkey], 1
  7613 00005F6C 7306                <2> 		jae altin
  7614 00005F6E 81EF02000000        <2> 		sub edi, 2
  7615                              <2> altin:
  7616 00005F74 81C701000000        <2> 		add edi, 1
  7617 00005F7A 803D[735E0000]01    <2> 		cmp byte [uppercase], 1
  7618 00005F81 7306                <2> 		jae uppercaseon
  7619 00005F83 81EF01000000        <2> 		sub edi, 1
  7620                              <2> uppercaseon:
  7621 00005F89 8A07                <2> 		mov al,[edi]
  7622 00005F8B A2[11220000]        <2> 		mov [lastkey], al
  7623 00005F90 C3                  <2> 		ret
  7624                              <2> 		
  7625 00005F91 00                  <2> keyboardstatus db 0
  7626 00005F92 00                  <2> numlockstatus db 0
  7627 00005F93 00                  <2> scrolllockstatus db 0
  7628 00005F94 00                  <2> altkey db 0
  7629 00005F95 00                  <2> ctrkey db 0
  7630                              <2> 	capslock:
  7631 00005F96 8035[915F0000]04    <2> 		xor byte [keyboardstatus], 00000100b
  7632 00005F9D E835000000          <2> 		call updatekblights
  7633 00005FA2 E969FFFFFF          <2> 		jmp shift
  7634                              <2> 		
  7635                              <2> 	numlock:
  7636 00005FA7 8035[915F0000]02    <2> 		xor byte [keyboardstatus], 00000010b
  7637 00005FAE 8035[925F0000]01    <2> 		xor byte [numlockstatus], 1
  7638 00005FB5 E81D000000          <2> 		call updatekblights
  7639 00005FBA E969FEFFFF          <2> 		jmp getkey
  7640                              <2> 	
  7641                              <2> 	scrolllock:
  7642 00005FBF 8035[915F0000]01    <2> 		xor byte [keyboardstatus], 00000001b
  7643 00005FC6 8035[935F0000]01    <2> 		xor byte [scrolllockstatus], 1
  7644 00005FCD E805000000          <2> 		call updatekblights
  7645 00005FD2 E951FEFFFF          <2> 		jmp getkey
  7646                              <2> 		
  7647                              <2> 	updatekblights:
  7648 00005FD7 B0ED                <2> 		mov al, 0xED
  7649 00005FD9 66BA6000            <2> 		mov dx, 0x60
  7650 00005FDD EE                  <2> 		out dx, al
  7651                              <2> 	chkkbdack:
  7652 00005FDE EC                  <2> 		in al, dx
  7653 00005FDF 3CFA                <2> 		cmp al, 0xFA
  7654 00005FE1 75FB                <2> 		jne chkkbdack
  7655 00005FE3 A0[915F0000]        <2> 		mov al, [keyboardstatus]
  7656 00005FE8 EE                  <2> 		out dx, al
  7657 00005FE9 C3                  <2> 		ret
  7658                              <2> 		
  7659                              <2> scancode:
  7660 00005FEA 000000000000        <2> 	db 0,0,0,0,0,0				;0h
  7661 00005FF0 000000000000        <2> 	db 0,0,0,0,0,0				;1h
  7662 00005FF6 3121AD000000        <2> 	db '1','!',0xAD,0,0,0		;2h
  7663 00005FFC 3240FDFB0000        <2> 	db '2','@',0xFD,0xFB,0,0	;3h
  7664 00006002 332300000000        <2> 	db '3','#',0,0,0,0			;4h
  7665 00006008 34249B9C0000        <2> 	db '4','$',0x9B,0x9C,0,0	;5h
  7666 0000600E 3525EE000000        <2> 	db '5','%',0xEE,0,0,0		;6h
  7667 00006014 365EAC000000        <2> 	db '6','^',0xAC,0,0,0		;7h
  7668 0000601A 3726AB000000        <2> 	db '7','&',0xAB,0,0,0		;8h
  7669 00006020 382AEC000000        <2> 	db '8','*',0xEC,0,0,0		;9h
  7670 00006026 392800000000        <2> 	db '9','(',0,0,0,0			;0Ah
  7671 0000602C 302900000000        <2> 	db '0',')',0,0,0,0			;0Bh
  7672 00006032 2D5F9DF10000        <2> 	db '-','_',0x9D,0xF1,0,0	;0Ch
  7673 00006038 3D2BF7F60000        <2> 	db '=','+',0xF7,0xF6,0,0	;0Dh
  7674 0000603E 080800000000        <2> 	db 8,8,0,0,0,0				;0Eh
  7675 00006044 000000000000        <2> 	db 0,0,0,0,0,0				;0Fh
  7676 0000604A 7151848E0000        <2> 	db 'q','Q',0x84,0x8E,0,0	;10h
  7677 00006050 7757868F0000        <2> 	db 'w','W',0x86,0x8F,0,0	;11h
  7678 00006056 65458290EE45        <2> 	db 'e','E',0x82,0x90,0xEE,'E'	;12h
  7679 0000605C 7252898A7050        <2> 	db 'r','R',0x89,0x8A,'p','P'	;13h
  7680 00006062 7454819AE754        <2> 	db 't','T',0x81,0x9A,0xE7,'T'	;14h
  7681 00006068 795998007559        <2> 	db 'y','Y',0x98,0,'u','Y'	;15h
  7682 0000606E 7555A3970000        <2> 	db 'u','U',0xA3,0x97,0,0		;16h
  7683 00006074 6949A18D6949        <2> 	db 'i','I',0xA1,0x8D,'i','I'	;17h
  7684 0000607A 6F4FA29577EA        <2> 	db 'o','O',0xA2,0x95,'w',0xEA	;18h
  7685 00006080 70509499E3EF        <2> 	db 'p','P',0x94,0x99,0xE3,0xEF	;19h
  7686 00006086 5B7BF4000000        <2> 	db '[','{',0xF4,0,0,0		;1Ah
  7687 0000608C 5D7DF5000000        <2> 	db ']','}',0xF5,0,0,0		;1Bh
  7688 00006092 000000000000        <2> 	db 0,0,0,0,0,0				;1Ch
  7689 00006098 000000000000        <2> 	db 0,0,0,0,0,0				;1Dh
  7690 0000609E 6141A085E041        <2> 	db 'a','A',0xA0,133,224,'A'	;1Eh
  7691 000060A4 73531500E5E4        <2> 	db 's','S',21,0,229,228		;1Fh
  7692 000060AA 6444F800EB7F        <2> 	db 'd','D',0xF8,0,235,127	;20h
  7693 000060B0 66469F00EDE8        <2> 	db 'f','F',159,0,237,232	;21h
  7694 000060B6 6747000079E2        <2> 	db 'g','G',0,0,'y',226		;22h
  7695 000060BC 684800006E48        <2> 	db 'h','H',0,0,'n','H'		;23h
  7696 000060C2 6A4A00000000        <2> 	db 'j','J',0,0,0,0			;24h
  7697 000060C8 6B4B00006B4B        <2> 	db 'k','K',0,0,'k','K'		;25h
  7698 000060CE 6C4C0000E9E9        <2> 	db 'l','L',0,0,233,233		;26h
  7699 000060D4 3B3A14000000        <2> 	db ';',':',20,0,0,0			;27h
  7700 000060DA 272200000000        <2> 	db 27h,22h,0,0,0,0			;28h
  7701 000060E0 607E00000000        <2> 	db '`','~',0,0,0,0			;29h
  7702 000060E6 000000000000        <2> 	db 0,0,0,0,0,0				;2Ah
  7703 000060EC 5C7CAAB30000        <2> 	db 92,'|',170,179,0,0		;2Bh
  7704 000060F2 7A5A91927A5A        <2> 	db 'z','Z',145,146,'z','Z'	;2Ch
  7705 000060F8 7858000000F0        <2> 	db 'x','X',0,0,0,240		;2Dh
  7706 000060FE 634387800000        <2> 	db 'c','C',135,128,0,0		;2Eh
  7707 00006104 765600000000        <2> 	db 'v','V',0,0,0,0			;2Fh
  7708 0000610A 62420000E142        <2> 	db 'b','B',0,0,225,'B'		;30h
  7709 00006110 6E4EA4A5764E        <2> 	db 'n','N',0xA4,0xA5,'v','N'	;31h
  7710 00006116 6D4D0000E64D        <2> 	db 'm','M',0,0,230,'M'		;32h
  7711 0000611C 2C3CF3AE0000        <2> 	db ',','<',0xF3,174,0,0		;33h
  7712 00006122 2E3EF2AF0000        <2> 	db '.','>',0xF2,175,0,0		;34h
  7713 00006128 2F3FA8000000        <2> 	db '/','?',0xA8,0,0,0		;35h
  7714 0000612E 000000000000        <2> 	db 0,0,0,0,0,0				;36h
  7715 00006134 000000000000        <2> 	db 0,0,0,0,0,0				;37h
  7716 0000613A 000000000000        <2> 	db 0,0,0,0,0,0				;38h
  7717 00006140 202000000000        <2> 	db ' ',' ',0,0,0,0			;39h
  7718                              <2> noscan:
  7719                              <2> 
  7720                              <1> %endif
  7721                              <1> ;drivers will soon be handled intelligently
  7722                              <1> ;every driver's source will be scanned for a .init function
  7723                              <1> ;that will be called and if it returns 0
  7724                              <1> ;the hardware was found and the driver initialized properly
  7725                              <1> initializelater: ;these have debugging messages and should be initialized after the screen
  7726                              <1> 	%ifdef sound.included
  7727 00006146 E84AF7FFFF          <1> 		call sblaster.init
  7728                              <1> 	%endif
  7729                              <1> 	%ifdef ne2000.included
  7730 0000614B E87CF9FFFF          <1> 		call ne2000.init
  7731                              <1> 	%endif
  7732                              <1> 	%ifdef rtl8139.included
  7733                              <1> 		call rtl8139.init
  7734                              <1> 	%endif
  7735 00006150 C3                  <1> 	ret
  7736                              <1> initialize:
  7737                              <1> ;Now I will initialise the interrupt controllers and remap irq's
  7738 00006151 E814000000          <1> 	call .pic
  7739                              <1> %ifdef terminal.vsync
  7740                              <1> 	call .rtc
  7741                              <1> %endif
  7742 00006156 E871000000          <1> 	call .pit
  7743 0000615B E893000000          <1> 	call .fpu
  7744 00006160 E8A4000000          <1> 	call .sse
  7745 00006165 31C0                <1> 	xor eax, eax
  7746 00006167 31C9                <1> 	xor ecx, ecx
  7747                              <1> %ifdef io.serial
  7748                              <1> 	call serial.init
  7749                              <1> %endif
  7750 00006169 C3                  <1> 	ret
  7751                              <1> 	
  7752                              <1> .pic:
  7753 0000616A B011                <1> 	mov al, 0x11
  7754 0000616C E620                <1> 	out 0x20, al
  7755 0000616E E6A0                <1> 	out 0xA0, al
  7756 00006170 B040                <1> 	mov al, 0x40	;interrupt for master
  7757 00006172 E621                <1> 	out 0x21, al
  7758 00006174 B048                <1> 	mov al, 0x48	;interrupt for slave
  7759 00006176 E6A1                <1> 	out 0xA1, al
  7760 00006178 B004                <1> 	mov al, 4
  7761 0000617A E621                <1> 	out 0x21, al
  7762 0000617C B002                <1> 	mov al, 2
  7763 0000617E E6A1                <1> 	out 0xA1, al
  7764 00006180 B001                <1> 	mov al, 0x1
  7765 00006182 E621                <1> 	out 0x21, al
  7766 00006184 B001                <1> 	mov al, 0x1
  7767 00006186 E6A1                <1> 	out 0xA1, al
  7768                              <1> 	;masks are set to zero so as not to mask
  7769 00006188 30C0                <1> 	xor al, al
  7770 0000618A E621                <1> 	out 0x21, al
  7771 0000618C 30C0                <1> 	xor al, al
  7772 0000618E E6A1                <1> 	out 0xA1, al
  7773 00006190 B020                <1> 	mov al, 0x20
  7774 00006192 E6A0                <1> 	out 0xA0, al
  7775 00006194 E620                <1> 	out 0x20, al
  7776 00006196 C3                  <1> 	ret
  7777                              <1> .rtc:
  7778 00006197 B008                <1> 	mov al, 0x8
  7779 00006199 88C4                <1> 	mov ah, al
  7780 0000619B 66BA7000            <1> 	mov dx, 0x70
  7781 0000619F EE                  <1> 	out dx, al
  7782 000061A0 6642                <1> 	inc dx
  7783 000061A2 EC                  <1> 	in al, dx
  7784 000061A3 86C4                <1> 	xchg al, ah
  7785 000061A5 664A                <1> 	dec dx
  7786 000061A7 EE                  <1> 	out dx, al
  7787 000061A8 6642                <1> 	inc dx
  7788 000061AA 86C4                <1> 	xchg al, ah
  7789 000061AC 0C40                <1> 	or al, 0x40
  7790 000061AE EE                  <1> 	out dx, al
  7791                              <1> 	
  7792 000061AF B00A                <1> 	mov al, 0xA
  7793 000061B1 664A                <1> 	dec dx
  7794 000061B3 EE                  <1> 	out dx, al
  7795 000061B4 86C4                <1> 	xchg al, ah
  7796 000061B6 6642                <1> 	inc dx
  7797 000061B8 EC                  <1> 	in al, dx
  7798 000061B9 24F0                <1> 	and al, 0xF0
  7799 000061BB 0A05[01030000]      <1> 	or al, [rtcrate]
  7800 000061C1 86C4                <1> 	xchg al, ah
  7801 000061C3 664A                <1> 	dec dx
  7802 000061C5 EE                  <1> 	out dx, al
  7803 000061C6 6642                <1> 	inc dx
  7804 000061C8 86C4                <1> 	xchg al, ah
  7805 000061CA EE                  <1> 	out dx, al
  7806 000061CB C3                  <1> 	ret
  7807                              <1> 	
  7808                              <1> .pit:
  7809                              <1> 	;initialize the PIT
  7810 000061CC 66A1[57020000]      <1> 	mov ax, [pitdiv] ;this is the divider for the PIT
  7811 000061D2 E640                <1> 	out 0x40, al
  7812 000061D4 66C1C008            <1> 	rol ax, 8
  7813 000061D8 E640                <1> 	out 0x40, al
  7814                              <1> 	;enable rtc interrupt
  7815 000061DA B00B                <1> 	mov al, 0xB
  7816 000061DC E670                <1> 	out 0x70, al
  7817 000061DE 66C1C008            <1> 	rol ax, 8
  7818 000061E2 E471                <1> 	in al, 0x71
  7819 000061E4 66C1C008            <1> 	rol ax, 8
  7820 000061E8 E670                <1> 	out 0x70, al
  7821 000061EA 66C1C008            <1> 	rol ax, 8
  7822 000061EE 0C40                <1> 	or al, 0x40
  7823 000061F0 E671                <1> 	out 0x71, al
  7824 000061F2 C3                  <1> 	ret
  7825                              <1> .fpu:
  7826                              <1> 	;And now to initialize the fpu
  7827 000061F3 0F20E0              <1> 	mov eax, cr4
  7828 000061F6 0D00020000          <1> 	or eax, 0x200
  7829 000061FB 0F22E0              <1> 	mov cr4, eax
  7830 000061FE B87F0B0000          <1> 	mov eax, 0xB7F
  7831 00006203 50                  <1> 	push eax
  7832 00006204 D92C24              <1> 	fldcw [esp]
  7833 00006207 58                  <1> 	pop eax
  7834 00006208 C3                  <1> 	ret
  7835                              <1> 	
  7836                              <1> .sse:
  7837 00006209 0F20C0              <1> 	mov eax, cr0
  7838 0000620C 24FB                <1> 	and al, 11111011b
  7839 0000620E 0C02                <1> 	or al, 00000010b
  7840 00006210 0F22C0              <1> 	mov cr0, eax
  7841 00006213 0F20E0              <1> 	mov eax, cr4
  7842 00006216 660D0006            <1> 	or ax, 0000011000000000b
  7843 0000621A 0F22E0              <1> 	mov cr4, eax
  7844 0000621D C3                  <1> 	ret
  7845                                      %include "source/pci.asm"
  7846 0000621E 00                  <1> pcibus		db 0
  7847 0000621F 00                  <1> pcidevice	db 0
  7848 00006220 00                  <1> pcifunction	db 0
  7849 00006221 00                  <1> pciregister	db 0
  7850 00006222 00                  <1> pcireqtype	db 0
  7851 00006223 00000000            <1> pcidevid	dd 0
  7852 00006227 FFFFFFFF            <1> pcidevidmask dd 0xFFFFFFFF
  7853                              <1> 
  7854                              <1> getpciport:
  7855 0000622B B001                <1> 	mov al, 1
  7856 0000622D A2[22620000]        <1> 	mov [pcireqtype], al
  7857 00006232 E916000000          <1> 	jmp searchpci
  7858                              <1> pcidump:
  7859 00006237 31C0                <1> 	xor eax, eax
  7860 00006239 A2[20620000]        <1> 	mov [pcifunction], al
  7861 0000623E A2[1E620000]        <1> 	mov [pcibus], al
  7862 00006243 A2[1F620000]        <1> 	mov [pcidevice], al
  7863 00006248 A2[22620000]        <1> 	mov [pcireqtype], al
  7864                              <1> searchpci:		;;return in ebx, start X in pciX
  7865 0000624D 30C0                <1> 	xor al, al
  7866 0000624F A2[21620000]        <1> 	mov [pciregister], al
  7867 00006254 E8C1010000          <1> 	call getpciaddr
  7868 00006259 BAF80C0000          <1> 	mov edx, 0xCF8
  7869 0000625E EF                  <1> 	out dx, eax	;;request pci config
  7870 0000625F BAFC0C0000          <1> 	mov edx, 0xCFC
  7871 00006264 ED                  <1> 	in eax, dx 	;;read in pci config
  7872 00006265 3D0000FFFF          <1> 	cmp eax, 0xFFFF0000
  7873 0000626A 0F8237000000        <1> 	jb near checkpcidevice
  7874                              <1> searchpciret:
  7875                              <1> nextpcidevice:
  7876 00006270 30C0                <1> 	xor al, al
  7877 00006272 A2[20620000]        <1> 	mov [pcifunction], al
  7878 00006277 A0[1F620000]        <1> 	mov al, [pcidevice]
  7879 0000627C 3C1F                <1> 	cmp al, 11111b
  7880 0000627E 0F8300010000        <1> 	jae near nextpcibus
  7881 00006284 FEC0                <1> 	inc al
  7882 00006286 A2[1F620000]        <1> 	mov [pcidevice], al
  7883 0000628B EBC0                <1> 	jmp searchpci
  7884 0000628D A0[20620000]        <1> 	mov al, [pcifunction]
  7885 00006292 3C07                <1> 	cmp al, 111b
  7886 00006294 0F83D6FFFFFF        <1> 	jae near nextpcidevice
  7887 0000629A FEC0                <1> 	inc al
  7888 0000629C A2[20620000]        <1> 	mov [pcifunction], al
  7889 000062A1 EBAA                <1> 	jmp searchpci
  7890 000062A3 00000000            <1> pcitype: db 0,0,0,0
  7891                              <1> checkpcidevice:
  7892 000062A7 31C0                <1> 	xor eax, eax
  7893 000062A9 3905[23620000]      <1> 	cmp [pcidevid], eax
  7894 000062AF 0F8430000000        <1> 	je near .good
  7895 000062B5 A2[21620000]        <1> 	mov [pciregister], al	;device id, vendor id
  7896 000062BA E85B010000          <1> 	call getpciaddr
  7897 000062BF BAF80C0000          <1> 	mov edx, 0xCF8
  7898 000062C4 EF                  <1> 	out dx, eax
  7899 000062C5 BAFC0C0000          <1> 	mov edx, 0xCFC
  7900 000062CA ED                  <1> 	in eax, dx
  7901 000062CB 2305[27620000]      <1> 	and eax, [pcidevidmask]
  7902 000062D1 8B1D[23620000]      <1> 	mov ebx, [pcidevid]
  7903 000062D7 231D[27620000]      <1> 	and ebx, [pcidevidmask]
  7904 000062DD 39D8                <1> 	cmp eax, ebx
  7905 000062DF 0F858BFFFFFF        <1> 	jne near searchpciret
  7906                              <1> .good:
  7907 000062E5 30C0                <1> 	xor al, al
  7908 000062E7 3805[22620000]      <1> 	cmp [pcireqtype], al
  7909 000062ED 0F842C000000        <1> 	je near dumppcidevice
  7910 000062F3 B008                <1> 	mov al, 0x08
  7911 000062F5 A2[21620000]        <1> 	mov [pciregister], al	;;class code, subclass, revision id
  7912 000062FA E81B010000          <1> 	call getpciaddr
  7913 000062FF BAF80C0000          <1> 	mov edx, 0xCF8
  7914 00006304 EF                  <1> 	out dx, eax
  7915 00006305 BAFC0C0000          <1> 	mov edx, 0xCFC
  7916 0000630A ED                  <1> 	in eax, dx
  7917 0000630B C1C008              <1> 	rol eax, 8
  7918 0000630E 3A05[A3620000]      <1> 	cmp al, [pcitype]
  7919 00006314 0F84A0000000        <1> 	je near foundpciaddr
  7920 0000631A E951FFFFFF          <1> 	jmp searchpciret
  7921                              <1> dumppcidevice:
  7922 0000631F 30C0                <1> 	xor al, al
  7923 00006321 A2[21620000]        <1> 	mov [pciregister], al
  7924 00006326 E8EF000000          <1> 	call getpciaddr
  7925 0000632B 89C1                <1> 	mov ecx, eax
  7926 0000632D C605[462E0000]05    <1> 	mov byte [firsthexshown], 5
  7927 00006334 E822CBFFFF          <1> 	call showhex
  7928                              <1> dumppcidevicelp:
  7929 00006339 A2[21620000]        <1> 	mov [pciregister], al
  7930 0000633E E8D7000000          <1> 	call getpciaddr
  7931 00006343 BAF80C0000          <1> 	mov edx, 0xCF8
  7932 00006348 EF                  <1> 	out dx, eax
  7933 00006349 BAFC0C0000          <1> 	mov edx, 0xCFC
  7934 0000634E ED                  <1> 	in eax, dx
  7935 0000634F 89C1                <1> 	mov ecx, eax
  7936 00006351 A0[21620000]        <1> 	mov al, [pciregister]
  7937 00006356 0404                <1> 	add al, 4
  7938 00006358 C605[462E0000]05    <1> 	mov byte [firsthexshown], 5
  7939 0000635F E8F7CAFFFF          <1> 	call showhex
  7940 00006364 3C3C                <1> 	cmp al, 0x3C
  7941 00006366 72D1                <1> 	jb dumppcidevicelp
  7942                              <1> dumppcidn:
  7943                              <1> %ifdef io.serial
  7944                              <1> 	mov esi, line
  7945                              <1> 	call print
  7946                              <1> %else
  7947 00006368 803D[F9230000]00    <1> 	cmp byte [charpos], 0
  7948 0000636F 0F84FBFEFFFF        <1> 	je near searchpciret
  7949 00006375 BE[7F830000]        <1> 	mov esi, line
  7950 0000637A E883B9FFFF          <1> 	call print
  7951                              <1> %endif
  7952 0000637F E9ECFEFFFF          <1> 	jmp searchpciret
  7953                              <1> nextpcibus:
  7954 00006384 30C0                <1> 	xor al, al
  7955 00006386 A2[1F620000]        <1> 	mov [pcidevice], al
  7956 0000638B A0[1E620000]        <1> 	mov al, [pcibus]
  7957 00006390 3C7F                <1> 	cmp al, 1111111b
  7958 00006392 730C                <1> 	jae donesearchpci
  7959 00006394 FEC0                <1> 	inc al
  7960 00006396 A2[1E620000]        <1> 	mov [pcibus], al
  7961 0000639B E9ADFEFFFF          <1> 	jmp searchpci
  7962                              <1> donesearchpci:
  7963 000063A0 BBFFFFFFFF          <1> 	mov ebx, 0xFFFFFFFF
  7964 000063A5 31D2                <1> 	xor edx, edx
  7965 000063A7 8815[A3620000]      <1> 	mov [pcitype], dl
  7966 000063AD 8915[23620000]      <1> 	mov [pcidevid], edx
  7967 000063B3 891D[27620000]      <1> 	mov [pcidevidmask], ebx
  7968 000063B9 C3                  <1> 	ret
  7969                              <1> foundpciaddr:
  7970 000063BA B010                <1> 	mov al, 0x10
  7971 000063BC A2[21620000]        <1> 	mov [pciregister], al
  7972                              <1> findpciioaddr:
  7973 000063C1 E854000000          <1> 	call getpciaddr
  7974 000063C6 BAF80C0000          <1> 	mov edx, 0xCF8
  7975 000063CB EF                  <1> 	out dx, eax
  7976 000063CC BAFC0C0000          <1> 	mov edx, 0xCFC
  7977 000063D1 ED                  <1> 	in eax, dx
  7978 000063D2 89C3                <1> 	mov ebx, eax
  7979 000063D4 81E301000000        <1> 	and ebx, 1
  7980 000063DA 81FB00000000        <1> 	cmp ebx, 0
  7981 000063E0 0F841E000000        <1> 	je near notpciioaddr
  7982 000063E6 2D01000000          <1> 	sub eax, 1
  7983 000063EB 89C2                <1> 	mov edx, eax
  7984 000063ED 31DB                <1> 	xor ebx, ebx
  7985 000063EF 4B                  <1> 	dec ebx
  7986 000063F0 891D[27620000]      <1> 	mov [pcidevidmask], ebx
  7987 000063F6 43                  <1> 	inc ebx
  7988 000063F7 881D[A3620000]      <1> 	mov [pcitype], bl
  7989 000063FD 891D[23620000]      <1> 	mov [pcidevid], ebx
  7990 00006403 C3                  <1> 	ret
  7991                              <1> notpciioaddr:
  7992 00006404 A0[21620000]        <1> 	mov al, [pciregister]
  7993 00006409 0404                <1> 	add al, 4
  7994 0000640B 3C28                <1> 	cmp al, 0x28
  7995 0000640D 0F875DFEFFFF        <1> 	ja near searchpciret
  7996 00006413 A2[21620000]        <1> 	mov [pciregister], al
  7997 00006418 EBA7                <1> 	jmp findpciioaddr
  7998                              <1> getpciaddr:		;;puts it in eax and ebx
  7999 0000641A 31C0                <1> 			xor eax, eax
  8000 0000641C BB00000080          <1> 			mov ebx, 0x80000000
  8001 00006421 A0[1E620000]        <1> 			mov al, [pcibus]
  8002 00006426 C1E010              <1> 			shl eax, 16
  8003 00006429 01C3                <1> 			add ebx, eax
  8004 0000642B 31C0                <1> 			xor eax, eax
  8005 0000642D A0[1F620000]        <1> 			mov al, [pcidevice]
  8006 00006432 C1E00B              <1> 			shl eax, 11
  8007 00006435 01C3                <1> 			add ebx, eax
  8008 00006437 31C0                <1> 			xor eax, eax
  8009 00006439 A0[20620000]        <1> 			mov al, [pcifunction]
  8010 0000643E C1E008              <1> 			shl eax, 8
  8011 00006441 01C3                <1> 			add ebx, eax
  8012 00006443 31C0                <1> 			xor eax, eax
  8013 00006445 A0[21620000]        <1> 			mov al, [pciregister]
  8014 0000644A 01C3                <1> 			add ebx, eax
  8015 0000644C 89D8                <1> 			mov eax, ebx
  8016 0000644E C3                  <1> 			ret
  8017                                      %include "source/disk.asm"
  8018                              <1> ;This loads files using the methods in the loaded driver
  8019                              <1> %ifdef disk.real
  8020                              <1> %include "source/drivers/disk/realmode.asm"
  8021                              <2> diskr:
  8022                              <2> 			;read from disk using real mode-it does not work with large files
  8023                              <2> 			;sector count in cl
  8024                              <2> 			;disk number in ch
  8025                              <2> 			;48 bit address with last 32 bits in ebx
  8026                              <2> 			;buffer in esi
  8027                              <2> 			;puts end of buffer in edi and end lba address in edx
  8028 0000644F 880D[7C640000]      <2> 	mov [sdlength], cl
  8029 00006455 891D[7D640000]      <2> 	mov [sdaddress], ebx
  8030 0000645B 8935[DB650000]      <2> 	mov [oldesireal], esi
  8031 00006461 66BE[8164]          <2> 	mov si, readdiskreal
  8032 00006465 668935[D10C0000]    <2> 	mov [realmodeptr], si
  8033 0000646C BE[BD640000]        <2> 	mov esi, backfromrealread
  8034 00006471 8935[CD0C0000]      <2> 	mov [realmodereturn], esi
  8035 00006477 E93AA7FFFF          <2> 	jmp realmode
  8036 0000647C 00                  <2> sdlength db 0
  8037 0000647D 00000000            <2> sdaddress dd 0
  8038                              <2> 
  8039                              <2> [BITS 16]
  8040                              <2> readdiskreal:
  8041 00006481 C706[AD64]1000      <2> 	mov word [dlen], 0x10
  8042 00006487 C706[B164]0000      <2> 	mov word [daddress], 0
  8043 0000648D C706[B364]0001      <2> 	mov word [dsegm], 0x100
  8044 00006493 66891E[B564]        <2> 	mov [dlbaad], ebx
  8045 00006498 880E[AF64]          <2> 	mov [dreadlen], cl
  8046                              <2> ReadHardDisk:
  8047 0000649C BE[AD64]            <2> 	mov si, diskaddresspacket
  8048 0000649F 31C0                <2> 	xor ax, ax
  8049 000064A1 B442                <2> 	mov ah, 0x42
  8050 000064A3 8A16[AC64]          <2> 	mov dl, [dnumber]
  8051 000064A7 CD13                <2> 	int 0x13
  8052 000064A9 72F1                <2> 	jc ReadHardDisk
  8053 000064AB C3                  <2> 	ret
  8054                              <2> 
  8055 000064AC 80                  <2> dnumber db 0x80
  8056                              <2> diskaddresspacket:
  8057 000064AD 10                  <2> dlen:	db 0x10 ;size of packet
  8058 000064AE 00                  <2> 		db 0
  8059 000064AF 7F00                <2> dreadlen:	dw 0x7F	;blocks to read=maximum
  8060 000064B1 0000                <2> daddress:	dw 0x0	;address 0
  8061 000064B3 0001                <2> dsegm:		dw 0x100	;segment
  8062                              <2> 		;start with known value for hd
  8063                              <2> dlbaad:
  8064 000064B5 00000000            <2> 	dd 0	;lba address
  8065 000064B9 00000000            <2> 	dd 0
  8066                              <2> [BITS 32]
  8067                              <2> backfromrealread:
  8068 000064BD 8B35[DB650000]      <2> 	mov esi, [oldesireal]
  8069 000064C3 8B1D[7D640000]      <2> 	mov ebx, [sdaddress]
  8070 000064C9 31C9                <2> 	xor ecx, ecx
  8071 000064CB 8A0D[7C640000]      <2> 	mov cl, [sdlength]
  8072 000064D1 01CB                <2> 	add ebx, ecx
  8073 000064D3 66B80800            <2> 	mov ax, LINEAR_SEL
  8074 000064D7 8EE0                <2> 	mov fs, ax
  8075 000064D9 BF00100000          <2> 	mov edi, 0x1000
  8076 000064DE B200                <2> 	mov dl, 0
  8077 000064E0 D0E1                <2> 	shl cl, 1
  8078                              <2> copyfromrmodedisk:
  8079 000064E2 648A07              <2> 	mov al, [fs:edi]
  8080 000064E5 8806                <2> 	mov [esi], al
  8081 000064E7 47                  <2> 	inc edi
  8082 000064E8 46                  <2> 	inc esi
  8083 000064E9 FECA                <2> 	dec dl
  8084 000064EB 80FA00              <2> 	cmp dl, 0
  8085 000064EE 75F2                <2> 	jne copyfromrmodedisk
  8086 000064F0 FEC9                <2> 	dec cl
  8087 000064F2 B200                <2> 	mov dl, 0
  8088 000064F4 80F900              <2> 	cmp cl, 0
  8089 000064F7 75E9                <2> 	jne copyfromrmodedisk
  8090 000064F9 66B83000            <2> 	mov ax, NEW_DATA_SEL
  8091 000064FD 8EE0                <2> 	mov fs, ax
  8092 000064FF 89F7                <2> 	mov edi, esi
  8093 00006501 8B35[DB650000]      <2> 	mov esi, [oldesireal]
  8094 00006507 89DA                <2> 	mov edx, ebx
  8095 00006509 8B1D[7D640000]      <2> 	mov ebx, [sdaddress]
  8096 0000650F C3                  <2> 	ret
  8097                              <2> 	
  8098                              <1> %else
  8099                              <1> 	%ifdef disk.protected
  8100                              <1> 	%include "source/drivers/disk/pata.asm"
  8101                              <1> 	%endif
  8102                              <1> %endif
  8103                              <1> loadfile:	;loads a file with the name buffer's location in edi into location in esi
  8104                              <1> 			;returns with err code in edx and file end in edi
  8105 00006510 803F00              <1> 	cmp byte [edi], 0
  8106 00006513 0F8448000000        <1> 	je near nofileload
  8107 00006519 89FA                <1> 	mov edx, edi
  8108 0000651B BB[A4930000]        <1> 	mov ebx, diskfileindex
  8109                              <1> nextnamechar:
  8110 00006520 8A07                <1> 	mov al, [edi]
  8111 00006522 3C26                <1> 	cmp al, '&'
  8112 00006524 7440                <1> 	je nullfile
  8113 00006526 8A23                <1> 	mov ah, [ebx]
  8114 00006528 47                  <1> 	inc edi
  8115 00006529 43                  <1> 	inc ebx
  8116 0000652A 88C1                <1> 	mov cl, al
  8117 0000652C 08E1                <1> 	or cl, ah
  8118 0000652E 80F900              <1> 	cmp cl, 0
  8119 00006531 744E                <1> 	je equalfilenames
  8120 00006533 80F920              <1> 	cmp cl, ' '
  8121 00006536 7449                <1> 	je equalfilenames
  8122 00006538 3C2A                <1> 	cmp al, '*'
  8123 0000653A 742B                <1> 	je equalfilenames2
  8124 0000653C 80FC00              <1> 	cmp ah, 0
  8125 0000653F 7410                <1> 	je nextfilename
  8126 00006541 3C00                <1> 	cmp al, 0
  8127 00006543 7404                <1> 	je getebxzero
  8128 00006545 38E0                <1> 	cmp al, ah
  8129 00006547 74D7                <1> 	je nextnamechar
  8130                              <1> getebxzero:
  8131 00006549 8A23                <1> 	mov ah, [ebx]
  8132 0000654B 43                  <1> 	inc ebx
  8133 0000654C 80FC00              <1> 	cmp ah, 0
  8134 0000654F 75F8                <1> 	jne getebxzero
  8135                              <1> nextfilename:
  8136 00006551 81C308000000        <1> 	add ebx, 8		;next descriptor
  8137 00006557 89D7                <1> 	mov edi, edx
  8138 00006559 81FB[4E950000]      <1> 	cmp ebx, enddiskfileindex
  8139 0000655F 72BF                <1> 	jb nextnamechar
  8140                              <1> nofileload:
  8141 00006561 BA94010000          <1> 	mov edx, 404	;indicate not found error
  8142                              <1> nullfile:
  8143 00006566 C3                  <1> 	ret
  8144                              <1> equalfilenames2:
  8145 00006567 81EB02000000        <1> 	sub ebx, 2
  8146                              <1> eqfilefind:
  8147 0000656D 43                  <1> 	inc ebx
  8148 0000656E 81FB[4E950000]      <1> 	cmp ebx, enddiskfileindex
  8149 00006574 0F83E7FFFFFF        <1> 	jae near nofileload
  8150 0000657A 8A03                <1> 	mov al, [ebx]
  8151 0000657C 3C00                <1> 	cmp al, 0
  8152 0000657E 75ED                <1> 	jne eqfilefind
  8153 00006580 43                  <1> 	inc ebx
  8154                              <1> equalfilenames:
  8155 00006581 8B4304              <1> 	mov eax, [ebx + 4] 	;put file size in eax
  8156 00006584 8B1B                <1> 	mov ebx, [ebx]		;put file beginning in ebx
  8157 00006586 031D[52950000]      <1> 	add ebx, [lbaad]	;add offset to solleros
  8158 0000658C 31C9                <1> 	xor ecx, ecx
  8159 0000658E 88C1                <1> 	mov cl, al			;get excess number of sectors
  8160 00006590 C0E102              <1> 	shl cl, 2
  8161 00006593 C0E902              <1> 	shr cl, 2			;cut off at 64
  8162 00006596 29C8                <1> 	sub eax, ecx		;get rid of excess sectors
  8163 00006598 B500                <1> 	mov ch, 0			;drive 0
  8164 0000659A C1E806              <1> 	shr eax, 6			;get number of 64 sector tracks
  8165                              <1> loaddiskfile:			;tracks in eax, excess sectors in cl, drive in ch, buffer in esi, address in ebx
  8166 0000659D A3[DF650000]        <1> 	mov [filetracks], eax
  8167 000065A2 89F7                <1> 	mov edi, esi		;just in case cl is 0
  8168 000065A4 89DA                <1> 	mov edx, ebx
  8169 000065A6 80F900              <1> 	cmp cl, 0
  8170 000065A9 7405                <1> 	je copytracksforfile
  8171 000065AB E89FFEFFFF          <1> 	call diskr	;take care of excess sectors
  8172                              <1> copytracksforfile:
  8173 000065B0 A1[DF650000]        <1> 	mov eax, [filetracks]
  8174 000065B5 3D00000000          <1> 	cmp eax, 0
  8175 000065BA 7419                <1> 	je donecopyfile
  8176 000065BC 48                  <1> 	dec eax
  8177 000065BD A3[DF650000]        <1> 	mov [filetracks], eax
  8178 000065C2 89D3                <1> 	mov ebx, edx	;get end lba
  8179 000065C4 B140                <1> 	mov cl, 0x40 ;for compatability with BIOS it uses 64 instead of 128
  8180 000065C6 8A2D[51950000]      <1> 	mov ch, [DriveNumber]
  8181 000065CC 89FE                <1> 	mov esi, edi	;reset buffer
  8182 000065CE E87CFEFFFF          <1> 	call diskr
  8183 000065D3 EBDB                <1> 	jmp copytracksforfile
  8184                              <1> donecopyfile:
  8185 000065D5 BA00000000          <1> 	mov edx, 0	;no error
  8186 000065DA C3                  <1> 	ret
  8187                              <1> 
  8188 000065DB 00000000            <1> oldesireal dd 0
  8189 000065DF 00000000            <1> filetracks dd 0
  8190 000065E3 00                  <1> lbad1 db 0
  8191 000065E4 00                  <1> lbad2 db 0
  8192 000065E5 00                  <1> lbad3 db 0
  8193 000065E6 00                  <1> lbad4 db 0
  8194 000065E7 00                  <1> lbad5 db 0
  8195 000065E8 00                  <1> lbad6 db 0
  8196 000065E9 6400                <1> segments dw 100
  8197                              <1> 
  8198                              <1> 
  8199                              <1> 	
  8200                                      %include "source/threads.asm"
  8201                              <1> %ifdef threads.included	
  8202                              <1> nwcmdst:
  8203 000065EB 31C0                <1> 	xor eax, eax
  8204 000065ED BC[36A70000]        <1> 	mov esp, stackend
  8205 000065F2 A2[AF660000]        <1> 	mov [threadson], al
  8206 000065F7 A3[B0660000]        <1> 	mov [currentthread], eax
  8207 000065FC 0504000000          <1> 	add eax, 4
  8208 00006601 A3[AB660000]        <1> 	mov [lastthread], eax
  8209 00006606 FB                  <1> 	sti
  8210 00006607 E975C3FFFF          <1> 	jmp nwcmd
  8211                              <1> 
  8212                              <1> nomorethreadspace:
  8213 0000660C BE[22660000]        <1> 	mov esi, nmts
  8214 00006611 E8ECB6FFFF          <1> 	call print
  8215 00006616 C605[AF660000]00    <1> 	mov byte [threadson], 0
  8216 0000661D E95FC3FFFF          <1> 	jmp nwcmd
  8217 00006622 546872656164204F76- <1> nmts	db "Thread Overflow",10,0
  8218 0000662B 6572666C6F770A00    <1>
  8219                              <1> 
  8220                              <1> nomorestackspace:
  8221 00006633 BE[3F660000]        <1> 	mov esi, nmss
  8222 00006638 E8C5B6FFFF          <1> 	call print
  8223 0000663D EBAC                <1> 	jmp nwcmdst
  8224 0000663F 537461636B204F7665- <1> nmss	db "Stack Overflow",10,0
  8225 00006648 72666C6F770A00      <1>
  8226                              <1> 	
  8227                              <1> threadswitch:
  8228 0000664F FA                  <1> 	cli
  8229 00006650 60                  <1> 	pushad
  8230 00006651 BF[84C22900]        <1> 	mov edi, threadlist
  8231 00006656 A1[B0660000]        <1> 	mov eax, [currentthread]
  8232 0000665B 40                  <1> 	inc eax
  8233 0000665C A3[B0660000]        <1> 	mov [currentthread], eax
  8234 00006661 6648                <1> 	dec ax
  8235 00006663 C1E002              <1> 	shl eax, 2
  8236 00006666 01C7                <1> 	add edi, eax
  8237 00006668 8927                <1> 	mov [edi], esp
  8238 0000666A 81C704000000        <1> 	add edi, 4
  8239 00006670 81FF[84D22900]      <1> 	cmp edi, threadlistend
  8240 00006676 0F830D000000        <1> 	jae near nookespthread
  8241 0000667C 8B07                <1> 	mov eax, [edi]
  8242 0000667E 3D00000000          <1> 	cmp eax, 0
  8243 00006683 0F8519000000        <1> 	jne near okespthread
  8244                              <1> nookespthread:
  8245 00006689 BF[84C22900]        <1> 	mov edi, threadlist
  8246 0000668E 31C0                <1> 	xor eax, eax
  8247 00006690 A3[B0660000]        <1> 	mov [currentthread], eax
  8248 00006695 8B07                <1> 	mov eax, [edi]
  8249 00006697 3D00000000          <1> 	cmp eax, 0
  8250 0000669C 0F8449FFFFFF        <1> 	je near nwcmdst
  8251                              <1> okespthread:
  8252 000066A2 89C4                <1> 	mov esp, eax
  8253 000066A4 B020                <1> 	mov al, 0x20
  8254 000066A6 E620                <1> 	out 0x20, al
  8255 000066A8 61                  <1> 	popad
  8256 000066A9 FB                  <1> 	sti
  8257 000066AA CF                  <1> 	iret
  8258                              <1> 
  8259                              <1> %endif
  8260 000066AB 04000000            <1> 	lastthread dd 4
  8261 000066AF 00                  <1> 	threadson db 0
  8262 000066B0 00000000            <1> 	currentthread dd 0
  8263                                  %ifdef gui.included
  8264                                      %include "source/gui/gui.asm"
  8265                              <1> guiboot:	;Let's see what I can do, I am going to try to make this as freestanding as possible
  8266 000066B4 31C0                <1> 	xor eax, eax
  8267 000066B6 31DB                <1> 	xor ebx, ebx
  8268 000066B8 31C9                <1> 	xor ecx, ecx
  8269 000066BA 31D2                <1> 	xor edx, edx
  8270 000066BC E8A7060000          <1> 	call guisetup
  8271                              <1> guiloop:
  8272 000066C1 E81BEEFFFF          <1> 	call cursorgui
  8273                              <1> guistart:
  8274 000066C6 E85DF7FFFF          <1> 	call getkey
  8275 000066CB C605[B5790000]00    <1> 	mov byte [copygui], 0
  8276 000066D2 EBF2                <1> 	jmp guistart
  8277                              <1> 	
  8278                              <1> %include "source/gui/bmp.asm"
  8279                              <2> 
  8280                              <2> showbmp:
  8281 000066D4 668B06              <2> 	mov ax, [esi]
  8282 000066D7 663D424D            <2> 	cmp ax, "BM"
  8283 000066DB 0F85BB000000        <2> 	jne near endedbmp
  8284 000066E1 8B3D[04540000]      <2> 	mov edi, [physbaseptr]
  8285 000066E7 6689D0              <2> 	mov ax, dx
  8286 000066EA 6689CB              <2> 	mov bx, cx
  8287 000066ED 31C9                <2> 	xor ecx, ecx
  8288 000066EF 31D2                <2> 	xor edx, edx
  8289 000066F1 6689D9              <2> 	mov cx, bx
  8290 000066F4 6689C2              <2> 	mov dx, ax
  8291 000066F7 01D7                <2> 	add edi, edx
  8292 000066F9 01D7                <2> 	add edi, edx
  8293 000066FB 31D2                <2> 	xor edx, edx
  8294 000066FD 668B15[DC540000]    <2> 	mov dx, [resolutionx2]
  8295 00006704 034E16              <2> 	add ecx, [esi + 22]
  8296                              <2> bmplocloop:
  8297 00006707 52                  <2> 	push edx
  8298 00006708 31C0                <2> 	xor eax, eax
  8299 0000670A 6689D0              <2> 	mov ax, dx
  8300 0000670D F7E1                <2> 	mul ecx
  8301 0000670F 5A                  <2> 	pop edx
  8302 00006710 663B0D[F0530000]    <2> 	cmp cx, [resolutiony]
  8303 00006717 7609                <2> 	jbe .nofixy
  8304 00006719 31C9                <2> 	xor ecx, ecx
  8305 0000671B 668B0D[F0530000]    <2> 	mov cx, [resolutiony]
  8306                              <2> .nofixy:
  8307 00006722 01C7                <2> 	add edi, eax
  8308 00006724 8B5612              <2> 	mov edx, [esi + 18]
  8309 00006727 8B4E16              <2> 	mov ecx, [esi + 22]
  8310 0000672A 8B460A              <2> 	mov eax, [esi + 10]
  8311 0000672D 8B5E02              <2> 	mov ebx, [esi + 2]
  8312 00006730 01F3                <2> 	add ebx, esi
  8313 00006732 891D[A2670000]      <2> 	mov [bmpend], ebx
  8314 00006738 89D3                <2> 	mov ebx, edx
  8315 0000673A 01C6                <2> 	add esi, eax
  8316                              <2> ldxbmp2:
  8317 0000673C 31D2                <2> 	xor edx, edx
  8318 0000673E 668B15[EE530000]    <2> 	mov dx, [resolutionx]
  8319 00006745 39D3                <2> 	cmp ebx, edx
  8320 00006747 7702                <2> 	ja ldxbmp
  8321 00006749 89DA                <2> 	mov edx, ebx
  8322                              <2> ldxbmp:
  8323 0000674B 668B06              <2> 	mov ax, [esi]
  8324 0000674E 668907              <2> 	mov [edi], ax
  8325 00006751 81C702000000        <2> 	add edi, 2
  8326 00006757 81C602000000        <2> 	add esi, 2
  8327 0000675D 3B35[A2670000]      <2> 	cmp esi, [bmpend]
  8328 00006763 7737                <2> 	ja endedbmp
  8329 00006765 4A                  <2> 	dec edx
  8330 00006766 81FA00000000        <2> 	cmp edx, 0
  8331 0000676C 77DD                <2> 	ja ldxbmp
  8332 0000676E 31D2                <2> 	xor edx, edx
  8333 00006770 668B15[EE530000]    <2> 	mov dx, [resolutionx]
  8334 00006777 39D3                <2> 	cmp ebx, edx
  8335 00006779 7610                <2> 	jbe .notover
  8336                              <2> .over:
  8337 0000677B 01DE                <2> 	add esi, ebx
  8338 0000677D 01DE                <2> 	add esi, ebx
  8339 0000677F 29D6                <2> 	sub esi, edx
  8340 00006781 29D6                <2> 	sub esi, edx
  8341 00006783 01DF                <2> 	add edi, ebx
  8342 00006785 01DF                <2> 	add edi, ebx
  8343 00006787 29D7                <2> 	sub edi, edx
  8344 00006789 29D7                <2> 	sub edi, edx
  8345                              <2> .notover:
  8346 0000678B 29DF                <2> 	sub edi, ebx
  8347 0000678D 29DF                <2> 	sub edi, ebx
  8348 0000678F 29D7                <2> 	sub edi, edx
  8349 00006791 29D7                <2> 	sub edi, edx
  8350 00006793 49                  <2> 	dec ecx
  8351 00006794 81F900000000        <2> 	cmp ecx, 0
  8352 0000679A 77A0                <2> 	ja ldxbmp2
  8353                              <2> endedbmp:
  8354 0000679C E80E020000          <2> 	call switchmousepos2
  8355 000067A1 C3                  <2> 	ret
  8356                              <2> 	
  8357 000067A2 00000000            <2> 	bmpend dd 0
  8358                              <1> %include "source/gui/circle.asm"
  8359                              <2> drawcircle:	;center in (dx,cx), color in si, radius in ax
  8360 000067A6 663D0000            <2> 	cmp ax, 0
  8361 000067AA 770A                <2> 	ja .nozerocircle
  8362 000067AC E8021A0000          <2> 	call putpixel	;the easiest circle ever
  8363 000067B1 E9F4000000          <2> 	jmp .done
  8364                              <2> .nozerocircle
  8365 000067B6 55                  <2> 	push ebp
  8366 000067B7 6689F5              <2> 	mov bp, si
  8367 000067BA 6650                <2> 	push ax
  8368 000067BC E8331A0000          <2> 	call getpixelmem
  8369 000067C1 31C0                <2> 	xor eax, eax
  8370 000067C3 6658                <2> 	pop ax
  8371 000067C5 BE01000000          <2> 	mov esi, 1
  8372 000067CA 29C6                <2> 	sub esi, eax
  8373 000067CC 89C1                <2> 	mov ecx, eax
  8374 000067CE 31C0                <2> 	xor eax, eax
  8375 000067D0 66A1[DC540000]      <2> 	mov ax, [resolutionx2]
  8376 000067D6 F7E1                <2> 	mul ecx
  8377 000067D8 50                  <2> 	push eax
  8378 000067D9 31D2                <2> 	xor edx, edx
  8379 000067DB 01C7                <2> 	add edi, eax
  8380 000067DD 66892F              <2> 	mov [edi], bp
  8381 000067E0 29C7                <2> 	sub edi, eax
  8382 000067E2 29C7                <2> 	sub edi, eax
  8383 000067E4 66892F              <2> 	mov [edi], bp
  8384 000067E7 01C7                <2> 	add edi, eax
  8385 000067E9 D1E1                <2> 	shl ecx, 1
  8386 000067EB 01CF                <2> 	add edi, ecx
  8387 000067ED 66892F              <2> 	mov [edi], bp
  8388 000067F0 D1E1                <2> 	shl ecx, 1
  8389 000067F2 29CF                <2> 	sub edi, ecx
  8390 000067F4 66892F              <2> 	mov [edi], bp
  8391 000067F7 D1E9                <2> 	shr ecx, 1
  8392 000067F9 01CF                <2> 	add edi, ecx
  8393 000067FB D1E9                <2> 	shr ecx, 1
  8394 000067FD B802000000          <2> 	mov eax, 2
  8395 00006802 F7E1                <2> 	mul ecx
  8396 00006804 48                  <2> 	dec eax
  8397 00006805 F7D0                <2> 	not eax ;make it negative
  8398 00006807 A3[AF680000]        <2> 	mov [.ddF_y], eax
  8399 0000680C 58                  <2> 	pop eax
  8400 0000680D BB01000000          <2> 	mov ebx, 1
  8401 00006812 891D[AB680000]      <2> 	mov [.ddF_x], ebx
  8402 00006818 4B                  <2> 	dec ebx
  8403 00006819 31D2                <2> 	xor edx, edx
  8404                              <2> .lp:	;it starts this with the center in edi
  8405                              <2> 		;color in bp
  8406                              <2> 		;ddF_x in memor
  8407                              <2> 		;x*resolutionx2 in ebx
  8408                              <2> 		;x in edx
  8409                              <2> 		;ddF_y in memory
  8410                              <2> 		;y*resolutionx2 in eax
  8411                              <2> 		;f in esi
  8412                              <2> 		;y in ecx
  8413 0000681B 81FE00000080        <2> 	cmp esi, 0x80000000 ;this means it is not negative
  8414 00006821 7717                <2> 	ja	.noddF_y
  8415 00006823 49                  <2> 	dec ecx
  8416 00006824 2B05[DC540000]      <2> 	sub eax, [resolutionx2]
  8417 0000682A 8105[AF680000]0200- <2> 	add dword [.ddF_y], 2
  8418 00006832 0000                <2>
  8419 00006834 0335[AF680000]      <2> 	add esi, [.ddF_y]
  8420                              <2> .noddF_y:
  8421 0000683A 42                  <2> 	inc edx
  8422 0000683B 031D[DC540000]      <2> 	add ebx, [resolutionx2]
  8423 00006841 8105[AB680000]0200- <2> 	add dword [.ddF_x], 2
  8424 00006849 0000                <2>
  8425 0000684B 0335[AB680000]      <2> 	add esi, [.ddF_x]
  8426                              <2> 
  8427 00006851 D1E2                <2> 	shl edx, 1
  8428 00006853 D1E1                <2> 	shl ecx, 1
  8429 00006855 01D7                <2> 	add edi, edx
  8430 00006857 01C7                <2> 	add edi, eax
  8431 00006859 66892F              <2> 	mov [edi], bp
  8432 0000685C D1E2                <2> 	shl edx, 1
  8433 0000685E 29D7                <2> 	sub edi, edx
  8434 00006860 66892F              <2> 	mov [edi], bp
  8435 00006863 01D7                <2> 	add edi, edx
  8436 00006865 D1E0                <2> 	shl eax, 1
  8437 00006867 29C7                <2> 	sub edi, eax
  8438 00006869 66892F              <2> 	mov [edi], bp
  8439 0000686C 29D7                <2> 	sub edi, edx
  8440 0000686E 66892F              <2> 	mov [edi], bp
  8441 00006871 D1EA                <2> 	shr edx, 1
  8442 00006873 D1E8                <2> 	shr eax, 1
  8443 00006875 01C7                <2> 	add edi, eax
  8444 00006877 01D7                <2> 	add edi, edx
  8445                              <2> 	
  8446 00006879 01DF                <2> 	add edi, ebx
  8447 0000687B 01CF                <2> 	add edi, ecx
  8448 0000687D 66892F              <2> 	mov [edi], bp
  8449 00006880 D1E1                <2> 	shl ecx, 1
  8450 00006882 29CF                <2> 	sub edi, ecx
  8451 00006884 66892F              <2> 	mov [edi], bp
  8452 00006887 D1E3                <2> 	shl ebx, 1
  8453 00006889 29DF                <2> 	sub edi, ebx
  8454 0000688B 01CF                <2> 	add edi, ecx
  8455 0000688D 66892F              <2> 	mov [edi], bp
  8456 00006890 29CF                <2> 	sub edi, ecx
  8457 00006892 66892F              <2> 	mov [edi], bp
  8458 00006895 D1EB                <2> 	shr ebx, 1
  8459 00006897 D1E9                <2> 	shr ecx, 1
  8460 00006899 01DF                <2> 	add edi, ebx
  8461 0000689B 01CF                <2> 	add edi, ecx
  8462 0000689D D1EA                <2> 	shr edx, 1
  8463 0000689F D1E9                <2> 	shr ecx, 1
  8464 000068A1 39CA                <2> 	cmp edx, ecx
  8465 000068A3 0F8272FFFFFF        <2> 	jb .lp
  8466 000068A9 5D                  <2> 	pop ebp
  8467                              <2> .done:
  8468 000068AA C3                  <2> 	ret
  8469                              <2> 	
  8470 000068AB 00000000            <2> .ddF_x dd 0
  8471 000068AF 00000000            <2> .ddF_y dd 0
  8472                              <1> %include "source/gui/cursor.asm"
  8473                              <2> clearmousecursor:
  8474 000068B3 BE[946C0000]        <2> 		mov esi, background
  8475 000068B8 8B3D[04540000]      <2> 		mov edi, [physbaseptr]
  8476 000068BE 31D2                <2> 		xor edx, edx
  8477 000068C0 31C9                <2> 		xor ecx, ecx
  8478 000068C2 668B15[CB560000]    <2> 		mov dx, [lastmouseposition]
  8479 000068C9 668B0D[CD560000]    <2> 		mov cx, [lastmouseposition + 2]
  8480 000068D0 01D7                <2> 		add edi, edx
  8481 000068D2 31D2                <2> 		xor edx, edx
  8482 000068D4 668B15[DC540000]    <2> 		mov dx, [resolutionx2]
  8483 000068DB 81F900000000        <2> 		cmp ecx, 0
  8484 000068E1 7408                <2> 		je .nomul
  8485 000068E3 52                  <2> 		push edx
  8486 000068E4 89D0                <2> 		mov eax, edx
  8487 000068E6 F7E1                <2> 		mul ecx
  8488 000068E8 01C7                <2> 		add edi, eax
  8489 000068EA 5A                  <2> 		pop edx
  8490                              <2> .nomul:
  8491                              <2> %ifdef 	gui.background
  8492 000068EB 813D[666C0000]0000- <2> 		cmp dword [backgroundimage], 0
  8493 000068F3 0000                <2>
  8494 000068F5 7438                <2> 		je .noyclr
  8495 000068F7 8B35[666C0000]      <2> 		mov esi, [backgroundimage]
  8496 000068FD 2B3D[04540000]      <2> 		sub edi, [physbaseptr]
  8497 00006903 01FE                <2> 		add esi, edi
  8498 00006905 033D[04540000]      <2> 		add edi, [physbaseptr]
  8499                              <2> .backlp:
  8500 0000690B 31DB                <2> 		xor ebx, ebx
  8501                              <2> .noyback:
  8502 0000690D 8B041E              <2> 		mov eax, [esi + ebx]
  8503 00006910 89041F              <2> 		mov [edi + ebx], eax
  8504 00006913 81C304000000        <2> 		add ebx, 4
  8505 00006919 81FB10000000        <2> 		cmp ebx, 16
  8506 0000691F 75EC                <2> 		jne .noyback
  8507 00006921 01D7                <2> 		add edi, edx
  8508 00006923 01D6                <2> 		add esi, edx
  8509 00006925 6641                <2> 		inc cx
  8510 00006927 6681F91000          <2> 		cmp cx, 16
  8511 0000692C 72DD                <2> 		jb .backlp
  8512 0000692E C3                  <2> 		ret
  8513                              <2> %endif
  8514                              <2> .noyclr:
  8515 0000692F 668B06              <2> 		mov ax, [esi]
  8516 00006932 C1C010              <2> 		rol eax, 16
  8517 00006935 668B06              <2> 		mov ax, [esi]
  8518 00006938 8907                <2> 		mov [edi], eax
  8519 0000693A 894704              <2> 		mov [edi + 4], eax
  8520 0000693D 894708              <2> 		mov [edi + 8], eax
  8521 00006940 89470C              <2> 		mov [edi + 12], eax
  8522 00006943 01D7                <2> 		add edi, edx
  8523 00006945 6641                <2> 		inc cx
  8524 00006947 6681F91000          <2> 		cmp cx, 16
  8525 0000694C 72E1                <2> 		jb .noyclr
  8526 0000694E C3                  <2> 		ret
  8527                              <2> 
  8528                              <2> switchmousepos:		;;switch were the mouse is located
  8529 0000694F BE[2BDC2800]        <2> 		mov esi, mousecolorbuf
  8530 00006954 8B3D[04540000]      <2> 		mov edi, [physbaseptr]
  8531 0000695A 31D2                <2> 		xor edx, edx
  8532 0000695C 31C9                <2> 		xor ecx, ecx
  8533 0000695E 668B15[CB560000]    <2> 		mov dx, [lastmouseposition]
  8534 00006965 668B0D[CD560000]    <2> 		mov cx, [lastmouseposition + 2]
  8535 0000696C 01D7                <2> 		add edi, edx
  8536 0000696E 31D2                <2> 		xor edx, edx
  8537 00006970 668B15[DC540000]    <2> 		mov dx, [resolutionx2]
  8538 00006977 6681F90000          <2> 		cmp cx, 0
  8539 0000697C 740B                <2> 		je noswmsy
  8540 0000697E 01D7                <2> swmsy:		add edi, edx
  8541 00006980 6649                <2> 		dec cx
  8542 00006982 6681F90000          <2> 		cmp cx, 0
  8543 00006987 75F5                <2> 		jne swmsy
  8544 00006989 8B06                <2> noswmsy:	mov eax, [esi]
  8545 0000698B 8B5E04              <2> 		mov ebx, [esi + 4]
  8546 0000698E 8907                <2> 		mov [edi], eax
  8547 00006990 895F04              <2> 		mov [edi + 4], ebx
  8548 00006993 8B4608              <2> 		mov eax, [esi + 8]
  8549 00006996 8B5E0C              <2> 		mov ebx, [esi + 12]
  8550 00006999 894708              <2> 		mov [edi + 8], eax
  8551 0000699C 895F0C              <2> 		mov [edi + 12], ebx
  8552 0000699F 01D7                <2> 		add edi, edx
  8553 000069A1 81C610000000        <2> 		add esi, 16
  8554 000069A7 81FE[2BDD2800]      <2> 		cmp esi, mcolorend
  8555 000069AD 72DA                <2> 		jb noswmsy
  8556                              <2> 		
  8557                              <2> switchmousepos2:
  8558 000069AF BE[2BDC2800]        <2> 		mov esi, mousecolorbuf
  8559 000069B4 8B3D[04540000]      <2> 		mov edi, [physbaseptr]
  8560 000069BA 31D2                <2> 		xor edx, edx
  8561 000069BC 31C9                <2> 		xor ecx, ecx
  8562 000069BE 668B15[CF560000]    <2> 		mov dx, [mousecursorposition]
  8563 000069C5 668B0D[D1560000]    <2> 		mov cx, [mousecursorposition + 2]
  8564 000069CC 01D7                <2> 		add edi, edx
  8565 000069CE 31D2                <2> 		xor edx, edx
  8566 000069D0 668B15[DC540000]    <2> 		mov dx, [resolutionx2]
  8567 000069D7 6681F90000          <2> 		cmp cx, 0
  8568 000069DC 740B                <2> 		je noswmsy2
  8569 000069DE 01D7                <2> swmsy2:		add edi, edx
  8570 000069E0 6649                <2> 		dec cx
  8571 000069E2 6681F90000          <2> 		cmp cx, 0
  8572 000069E7 75F5                <2> 		jne swmsy2
  8573 000069E9 8B07                <2> noswmsy2:	mov eax, [edi]
  8574 000069EB 8B5F04              <2> 		mov ebx, [edi + 4]
  8575 000069EE 8906                <2> 		mov [esi], eax
  8576 000069F0 895E04              <2> 		mov [esi + 4], ebx
  8577 000069F3 8B4708              <2> 		mov eax, [edi + 8]
  8578 000069F6 8B5F0C              <2> 		mov ebx, [edi + 12]
  8579 000069F9 894608              <2> 		mov [esi + 8], eax
  8580 000069FC 895E0C              <2> 		mov [esi + 12], ebx
  8581 000069FF 01D7                <2> 		add edi, edx
  8582 00006A01 81C610000000        <2> 		add esi, 16
  8583 00006A07 81FE[2BDD2800]      <2> 		cmp esi, mcolorend
  8584 00006A0D 72DA                <2> 		jb noswmsy2
  8585 00006A0F C3                  <2> 		ret
  8586                              <2> 		
  8587                              <1> %include "source/gui/icon.asm"
  8588 00006A10 0000                <2> iconcolor dw 0
  8589                              <2> 	showicon:	;;icon in si, position in (dx,cx), selected in ax, code in bx
  8590 00006A12 A2[1C820000]        <2> 		mov [iconselected], al
  8591 00006A17 8025[1C820000]01    <2> 		and byte [iconselected], 1
  8592 00006A1E B401                <2> 		mov ah, 1
  8593 00006A20 E808150000          <2> 		call graphicsadd
  8594                              <2> 	showicon2:
  8595 00006A25 8B3D[04540000]      <2> 		mov edi, [physbaseptr]
  8596 00006A2B 6601D2              <2> 		add dx, dx
  8597 00006A2E 663B15[DC540000]    <2> 		cmp dx, [resolutionx2]
  8598 00006A35 720C                <2> 		jb screenxgood
  8599 00006A37 668B15[DC540000]    <2> 		mov dx, [resolutionx2]
  8600 00006A3E 6681EA4000          <2> 		sub dx, 64
  8601                              <2> 	screenxgood:
  8602 00006A43 6681F90000          <2> 		cmp cx, 0
  8603 00006A48 742B                <2> 		je noscreenygoodchk
  8604 00006A4A 663B0D[F0530000]    <2> 		cmp cx, [resolutiony]
  8605 00006A51 720C                <2> 		jb screenygood
  8606 00006A53 668B0D[F0530000]    <2> 		mov cx, [resolutiony]
  8607 00006A5A 6681E92000          <2> 		sub cx, 32
  8608                              <2> 	screenygood:
  8609 00006A5F 50                  <2> 		push eax
  8610 00006A60 52                  <2> 		push edx
  8611 00006A61 31C0                <2> 		xor eax, eax
  8612 00006A63 31DB                <2> 		xor ebx, ebx
  8613 00006A65 668B1D[DC540000]    <2> 		mov bx, [resolutionx2]
  8614 00006A6C 6689C8              <2> 		mov ax, cx
  8615 00006A6F F7E3                <2> 		mul ebx
  8616 00006A71 01C7                <2> 		add edi, eax
  8617 00006A73 5A                  <2> 		pop edx
  8618 00006A74 58                  <2> 		pop eax
  8619                              <2> 	noscreenygoodchk:
  8620 00006A75 31DB                <2> 		xor ebx, ebx
  8621 00006A77 6689D3              <2> 		mov bx, dx
  8622 00006A7A 01DF                <2> 		add edi, ebx
  8623 00006A7C 6631C9              <2> 		xor cx, cx
  8624 00006A7F 668B06              <2> 		mov ax, [esi]
  8625 00006A82 81C602000000        <2> 		add esi, 2
  8626 00006A88 66A3[106A0000]      <2> 		mov [iconcolor], ax
  8627                              <2> 	writeicon:
  8628 00006A8E 8B06                <2> 		mov eax, [esi]
  8629 00006A90 D1C0                <2> 		rol eax, 1
  8630 00006A92 30C9                <2> 		xor cl, cl
  8631                              <2> 	writeiconline:
  8632 00006A94 B201                <2> 		mov dl, 1
  8633 00006A96 20C2                <2> 		and dl, al
  8634 00006A98 3215[1C820000]      <2> 		xor dl, [iconselected]
  8635 00006A9E 668B1D[946C0000]    <2> 		mov bx, [background]
  8636 00006AA5 66891F              <2> 		mov [edi], bx
  8637 00006AA8 80FA00              <2> 		cmp dl, 0
  8638 00006AAB 740A                <2> 		je noiconline
  8639 00006AAD 668B15[106A0000]    <2> 		mov dx, [iconcolor]
  8640 00006AB4 668917              <2> 		mov [edi], dx
  8641                              <2> 	noiconline:
  8642 00006AB7 81C702000000        <2> 		add edi, 2
  8643 00006ABD D1C0                <2> 		rol eax, 1
  8644 00006ABF FEC1                <2> 		inc cl
  8645 00006AC1 80F920              <2> 		cmp cl, 32
  8646 00006AC4 72CE                <2> 		jb writeiconline
  8647 00006AC6 81C604000000        <2> 		add esi, 4
  8648 00006ACC FEC5                <2> 		inc ch
  8649 00006ACE 31D2                <2> 		xor edx, edx
  8650 00006AD0 668B15[DC540000]    <2> 		mov dx, [resolutionx2]
  8651 00006AD7 01D7                <2> 		add edi, edx
  8652 00006AD9 81EF40000000        <2> 		sub edi, 64
  8653 00006ADF 80FD20              <2> 		cmp ch, 32
  8654 00006AE2 72AA                <2> 		jb writeicon
  8655 00006AE4 31C0                <2> 		xor eax, eax
  8656 00006AE6 C3                  <2> 		ret
  8657                              <1> %include "source/gui/line.asm"
  8658                              <2> drawline:	;from (bx,ax) to (dx,cx), color in si
  8659 00006AE7 668935[096C0000]    <2> 	mov [.color], si
  8660 00006AEE C605[0B6C0000]00    <2> 	mov byte [.steep], 0
  8661 00006AF5 C605[0C6C0000]00    <2> 	mov byte [.yreversed], 0
  8662 00006AFC E907000000          <2> 	jmp .notsteep
  8663                              <2> .steeploop:
  8664 00006B01 C605[0B6C0000]01    <2> 	mov byte [.steep], 1
  8665                              <2> .notsteep:
  8666 00006B08 31FF                <2> 	xor edi, edi
  8667 00006B0A 31F6                <2> 	xor esi, esi
  8668 00006B0C 6639DA              <2> 	cmp dx, bx
  8669 00006B0F 7705                <2> 	ja .noreversex
  8670 00006B11 6687D3              <2> 	xchg dx, bx
  8671 00006B14 6691                <2> 	xchg cx, ax
  8672                              <2> .noreversex:
  8673 00006B16 6689D7              <2> 	mov di, dx
  8674 00006B19 6629DF              <2> 	sub di, bx
  8675                              <2> 	
  8676 00006B1C 6639C1              <2> 	cmp cx, ax
  8677 00006B1F 720B                <2> 	jb .reversey
  8678 00006B21 6689CE              <2> 	mov si, cx
  8679 00006B24 6629C6              <2> 	sub si, ax
  8680 00006B27 E90D000000          <2> 	jmp .normal
  8681                              <2> .reversey:
  8682 00006B2C C605[0C6C0000]02    <2> 	mov byte [.yreversed], 2
  8683 00006B33 6689C6              <2> 	mov si, ax
  8684 00006B36 6629CE              <2> 	sub si, cx	
  8685                              <2> .normal:
  8686 00006B39 6687CA              <2> 	xchg cx, dx
  8687 00006B3C 6693                <2> 	xchg ax, bx
  8688 00006B3E 6639FE              <2> 	cmp si, di
  8689 00006B41 77BE                <2> 	ja .steeploop
  8690 00006B43 6687CA              <2> 	xchg cx, dx
  8691 00006B46 6693                <2> 	xchg ax, bx
  8692                              <2> 	
  8693 00006B48 6691                <2> 	xchg ax, cx
  8694 00006B4A 6687DA              <2> 	xchg bx, dx
  8695 00006B4D 66893D[0F6C0000]    <2> 	mov [.xdelta], di
  8696 00006B54 668935[116C0000]    <2> 	mov [.ydelta], si
  8697 00006B5B 668B35[096C0000]    <2> 	mov si, [.color]
  8698 00006B62 66891D[0D6C0000]    <2> 	mov [.endline], bx
  8699 00006B69 6652                <2> 	push dx
  8700 00006B6B 6651                <2> 	push cx
  8701 00006B6D 6687CA              <2> 	xchg cx, dx
  8702 00006B70 803D[0B6C0000]01    <2> 	cmp byte [.steep], 1
  8703 00006B77 7403                <2> 	je .xchg
  8704 00006B79 6687D1              <2> 	xchg dx, cx
  8705                              <2> .xchg:
  8706 00006B7C E873160000          <2> 	call getpixelmem	;get pointer to pixel in edi from (dx,cx)
  8707 00006B81 6659                <2> 	pop cx
  8708 00006B83 665A                <2> 	pop dx
  8709 00006B85 31C0                <2> 	xor eax, eax
  8710 00006B87 66A1[0F6C0000]      <2> 	mov ax, [.xdelta]
  8711 00006B8D 66D1E8              <2> 	shr ax, 1
  8712 00006B90 8A0D[0B6C0000]      <2> 	mov cl, [.steep]
  8713 00006B96 0A0D[0C6C0000]      <2> 	or cl, [.yreversed]
  8714 00006B9C 55                  <2> 	push ebp
  8715 00006B9D 668B2D[0D6C0000]    <2> 	mov bp, [.endline]
  8716 00006BA4 6629D5              <2> 	sub bp, dx
  8717 00006BA7 668B15[116C0000]    <2> 	mov dx, [.ydelta]
  8718                              <2> .lp:
  8719 00006BAE 668937              <2> 	mov [edi], si
  8720 00006BB1 6639D0              <2> 	cmp ax, dx
  8721 00006BB4 7332                <2> 	jae .noaddx
  8722 00006BB6 F6C102              <2> 	test cl, 2
  8723 00006BB9 7414                <2> 	jz .nodecy
  8724 00006BBB F6C101              <2> 	test cl, 1
  8725 00006BBE 7509                <2> 	jnz .steepy
  8726 00006BC0 29DF                <2> 	sub edi, ebx
  8727 00006BC2 29DF                <2> 	sub edi, ebx
  8728 00006BC4 E906000000          <2> 	jmp .nodecy
  8729                              <2> .steepy:
  8730 00006BC9 81EF04000000        <2> 	sub edi, 4
  8731                              <2> .nodecy:
  8732 00006BCF 660305[0F6C0000]    <2> 	add ax, [.xdelta]
  8733 00006BD6 F6C101              <2> 	test cl, 1
  8734 00006BD9 7507                <2> 	jnz .steepx
  8735 00006BDB 01DF                <2> 	add edi, ebx
  8736 00006BDD E906000000          <2> 	jmp .noaddx
  8737                              <2> .steepx:
  8738 00006BE2 81C702000000        <2> 	add edi, 2
  8739                              <2> .noaddx:
  8740 00006BE8 6629D0              <2> 	sub ax, dx
  8741 00006BEB 664D                <2> 	dec bp
  8742 00006BED 81C702000000        <2> 	add edi, 2
  8743 00006BF3 F6C101              <2> 	test cl, 1
  8744 00006BF6 7408                <2> 	jz .nosteepx
  8745 00006BF8 81EF02000000        <2> 	sub edi, 2
  8746 00006BFE 01DF                <2> 	add edi, ebx
  8747                              <2> .nosteepx:
  8748 00006C00 6681FD0000          <2> 	cmp bp, 0
  8749 00006C05 75A7                <2> 	jne .lp
  8750                              <2> .done:
  8751 00006C07 5D                  <2> 	pop ebp
  8752 00006C08 C3                  <2> 	ret
  8753                              <2> 	
  8754 00006C09 0000                <2> .color dw 0
  8755 00006C0B 00                  <2> .steep db 0
  8756 00006C0C 00                  <2> .yreversed db 0
  8757 00006C0D 0000                <2> .endline dw 0
  8758 00006C0F 0000                <2> .xdelta dw 0
  8759 00006C11 0000                <2> .ydelta dw 0
  8760                              <1> %include "source/gui/refresh.asm"
  8761                              <2> guiclear:
  8762 00006C13 8B3D[04540000]      <2> 	mov edi, [physbaseptr]
  8763 00006C19 668B15[EE530000]    <2> 	mov dx, [resolutionx]
  8764 00006C20 668B0D[F0530000]    <2> 	mov cx, [resolutiony]
  8765                              <2> %ifdef gui.background
  8766 00006C27 813D[666C0000]0000- <2> 	cmp dword [backgroundimage], 0
  8767 00006C2F 0000                <2>
  8768 00006C31 7437                <2> 	je guiclear.noback
  8769 00006C33 8B35[666C0000]      <2> 		mov esi, [backgroundimage]
  8770                              <2> 	.lp:
  8771                              <2> 		;movdqa xmm0, [esi]	;the next 4 lines are for SSE
  8772                              <2> 		;movdqa [edi], xmm0
  8773                              <2> 		;add esi, 16
  8774                              <2> 		;add edi, 16
  8775                              <2> 		;sub dx, 8
  8776 00006C39 8B06                <2> 		mov eax, [esi]
  8777 00006C3B 8907                <2> 		mov [edi], eax
  8778 00006C3D 81C604000000        <2> 		add esi, 4
  8779 00006C43 81C704000000        <2> 		add edi, 4
  8780 00006C49 6681EA0200          <2> 		sub dx, 2
  8781 00006C4E 6681FA0000          <2> 		cmp dx, 0
  8782 00006C53 77E4                <2> 		ja .lp
  8783 00006C55 6649                <2> 		dec cx
  8784 00006C57 668B15[EE530000]    <2> 		mov dx, [resolutionx]
  8785 00006C5E 6681F90000          <2> 		cmp cx, 0
  8786 00006C63 77D4                <2> 		ja .lp
  8787 00006C65 C3                  <2> 		ret
  8788 00006C66 00000000            <2> 	backgroundimage dd 0
  8789                              <2> %endif
  8790                              <2> guiclear.noback:
  8791 00006C6A A1[946C0000]        <2> 	mov eax, [background]
  8792                              <2> guiclearloop:
  8793 00006C6F 8907                <2> 	mov [edi], eax
  8794 00006C71 81C704000000        <2> 	add edi, 4
  8795 00006C77 6681EA0200          <2> 	sub dx, 2
  8796 00006C7C 6681FA0000          <2> 	cmp dx, 0
  8797 00006C81 77EC                <2> 	ja guiclearloop
  8798 00006C83 6649                <2> 	dec cx
  8799 00006C85 668B15[EE530000]    <2> 	mov dx, [resolutionx]
  8800 00006C8C 6681F90000          <2> 	cmp cx, 0
  8801 00006C91 77DC                <2> 	ja guiclearloop
  8802 00006C93 C3                  <2> 	ret
  8803                              <2> 
  8804 00006C94 CF7B<rept>          <2> background times 2 dw 0111101111001111b
  8805                              <2> 
  8806                              <2> reloadallgraphics:
  8807 00006C98 BF[2BC60000]        <2> 		mov edi, graphicstable
  8808                              <2> reloadgraphicsloop:
  8809 00006C9D 8B7702              <2> 		mov esi, [edi + 2]
  8810 00006CA0 668B5706            <2> 		mov dx, [edi + 6]
  8811 00006CA4 668B4F08            <2> 		mov cx, [edi + 8]
  8812 00006CA8 668B07              <2> 		mov ax, [edi]
  8813 00006CAB 668B5F0A            <2> 		mov bx, [edi + 10]
  8814 00006CAF 893D[197F0000]      <2> 		mov [grpctblpos], edi
  8815 00006CB5 3B3D[BF790000]      <2> 		cmp edi, [dragging]
  8816 00006CBB 741E                <2> 		je loadedgraphic
  8817 00006CBD 663D0100            <2> 		cmp ax, 1
  8818 00006CC1 0F8436000000        <2> 		je near icongraphic
  8819 00006CC7 663D0200            <2> 		cmp ax, 2
  8820 00006CCB 0F843C000000        <2> 		je near stringgraphic
  8821 00006CD1 663D0300            <2> 		cmp ax, 3
  8822 00006CD5 0F8416000000        <2> 		je near windowgraphic
  8823 00006CDB 8B3D[197F0000]      <2> loadedgraphic:  mov edi, [grpctblpos]
  8824 00006CE1 81C710000000        <2> 		add edi, 16
  8825 00006CE7 81FF[2BC80000]      <2> 		cmp edi, graphicstableend
  8826 00006CED 732E                <2> 		jae donereloadgraphics
  8827 00006CEF EBAC                <2> 		jmp reloadgraphicsloop
  8828                              <2> windowgraphic:
  8829 00006CF1 E846080000          <2> 		call showwindow2
  8830 00006CF6 E8B0B0FFFF          <2> 		call cleardouble
  8831 00006CFB EBDE                <2> 		jmp loadedgraphic
  8832 00006CFD 80E301              <2> icongraphic:	and bl, 1
  8833 00006D00 881D[1C820000]      <2> 		mov [iconselected], bl
  8834 00006D06 E81AFDFFFF          <2> 		call showicon2
  8835 00006D0B EBCE                <2> 		jmp loadedgraphic
  8836 00006D0D 80E301              <2> stringgraphic:  and bl, 1
  8837 00006D10 881D[BB790000]      <2> 		mov [mouseselecton], bl
  8838 00006D16 E80D050000          <2> 		call showstring2
  8839 00006D1B EBBE                <2> 		jmp loadedgraphic
  8840                              <2> donereloadgraphics:
  8841 00006D1D 8B3D[BF790000]      <2> 		mov edi, [dragging]
  8842 00006D23 81FF[2BC60000]      <2> 		cmp edi, graphicstable
  8843 00006D29 7226                <2> 		jb notcorrectdrag
  8844 00006D2B 668B07              <2> 		mov ax, [edi]
  8845 00006D2E 8B7702              <2> 		mov esi, [edi + 2]
  8846 00006D31 668B5706            <2> 		mov dx, [edi + 6]
  8847 00006D35 668B4F08            <2> 		mov cx, [edi + 8]
  8848 00006D39 668B5F0A            <2> 		mov bx, [edi + 10]
  8849 00006D3D 663D0100            <2> 		cmp ax, 1
  8850 00006D41 750F                <2> 		jne noticondragging
  8851 00006D43 80E301              <2> 		and bl, 1
  8852 00006D46 881D[1C820000]      <2> 		mov [iconselected], bl
  8853 00006D4C E8D4FCFFFF          <2> 		call showicon2
  8854                              <2> notcorrectdrag:
  8855 00006D51 C3                  <2> 		ret
  8856                              <2> 
  8857                              <2> 	noticondragging:
  8858 00006D52 663D0200            <2> 		cmp ax, 2
  8859 00006D56 75F9                <2> 		jne notcorrectdrag
  8860 00006D58 80E301              <2> 		and bl, 1
  8861 00006D5B 881D[BB790000]      <2> 		mov [mouseselecton], bl
  8862 00006D61 E8C2040000          <2> 		call showstring2
  8863 00006D66 EBE9                <2> 		jmp notcorrectdrag
  8864                              <1> %include "source/gui/startup.asm"
  8865                              <2> guisetup:
  8866                              <2> 	%ifdef gui.background
  8867 00006D68 31DB                <2> 	xor ebx, ebx
  8868 00006D6A 891D[666C0000]      <2> 	mov [backgroundimage], ebx
  8869                              <2> 	%endif
  8870 00006D70 E89EFEFFFF          <2> 	call guiclear
  8871 00006D75 C605[50950000]01    <2> 	mov byte [guion], 1
  8872 00006D7C C605[BB790000]00    <2> 	mov byte [mouseselecton], 0
  8873 00006D83 31C0                <2> 	xor eax, eax
  8874 00006D85 31DB                <2> 	xor ebx, ebx
  8875 00006D87 31C9                <2> 	xor ecx, ecx
  8876 00006D89 31D2                <2> 	xor edx, edx
  8877                              <2> 	
  8878 00006D8B BE[4D6F0000]        <2> 	mov esi, pacmsg
  8879 00006D90 30E4                <2> 	xor ah, ah
  8880 00006D92 B010                <2> 	mov al, 00010000b
  8881 00006D94 31DB                <2> 	xor ebx, ebx
  8882 00006D96 66B99000            <2> 	mov cx, 144
  8883 00006D9A 66BA0400            <2> 	mov dx, 4
  8884 00006D9E E872040000          <2> 	call showstring
  8885                              <2> 	
  8886 00006DA3 BE[8B6F0000]        <2> 	mov esi, interneticon
  8887 00006DA8 30E4                <2> 	xor ah, ah
  8888 00006DAA B010                <2> 	mov al, 00010000b
  8889 00006DAC BB[766E0000]        <2> 	mov ebx, noie
  8890 00006DB1 66B91800            <2> 	mov cx, 24
  8891 00006DB5 66BA0400            <2> 	mov dx, 4
  8892 00006DB9 E854FCFFFF          <2> 	call showicon
  8893                              <2> 	
  8894 00006DBE BE[0D700000]        <2> 	mov esi, wordicon
  8895 00006DC3 30E4                <2> 	xor ah, ah
  8896 00006DC5 B010                <2> 	mov al, 00010000b
  8897 00006DC7 31DB                <2> 	xor ebx, ebx
  8898 00006DC9 66B91800            <2> 	mov cx, 24
  8899 00006DCD 66BA3000            <2> 	mov dx, 48
  8900 00006DD1 E83CFCFFFF          <2> 	call showicon
  8901                              <2> 	
  8902 00006DD6 BE[8F700000]        <2> 	mov esi, pacmanpellet
  8903 00006DDB 30E4                <2> 	xor ah, ah
  8904 00006DDD B010                <2> 	mov al, 00010000b
  8905 00006DDF 31DB                <2> 	xor ebx, ebx
  8906 00006DE1 66B94000            <2> 	mov cx, 64
  8907 00006DE5 66BA0400            <2> 	mov dx, 4
  8908 00006DE9 E824FCFFFF          <2> 	call showicon
  8909                              <2> 	
  8910 00006DEE BE[93710000]        <2> 	mov esi, pacman
  8911 00006DF3 30E4                <2> 	xor ah, ah
  8912 00006DF5 B010                <2> 	mov al, 00010000b
  8913 00006DF7 BB[5F6E0000]        <2> 	mov ebx, pacmannomnom
  8914 00006DFC 66B94000            <2> 	mov cx, 64
  8915 00006E00 66BA3000            <2> 	mov dx, 48
  8916 00006E04 E809FCFFFF          <2> 	call showicon
  8917                              <2> 	
  8918 00006E09 BE[11710000]        <2> 	mov esi, ghostie
  8919 00006E0E 30E4                <2> 	xor ah, ah
  8920 00006E10 B010                <2> 	mov al, 00010000b
  8921 00006E12 BB[486E0000]        <2> 	mov ebx, boo
  8922 00006E17 66B96C00            <2> 	mov cx, 108
  8923 00006E1B 66BA0400            <2> 	mov dx, 4
  8924 00006E1F E8EEFBFFFF          <2> 	call showicon
  8925                              <2> 	
  8926 00006E24 BE[2F6F0000]        <2> 	mov esi, start
  8927 00006E29 668B0D[F0530000]    <2> 	mov cx, [resolutiony]
  8928 00006E30 6681E91000          <2> 	sub cx, 16
  8929 00006E35 66BA0200            <2> 	mov dx, 2
  8930 00006E39 30E4                <2> 	xor ah, ah
  8931 00006E3B B010                <2> 	mov al, 00010000b
  8932 00006E3D BB[EB6E0000]        <2> 	mov ebx, winblows
  8933 00006E42 E8CE030000          <2> 	call showstring
  8934 00006E47 C3                  <2> 	ret
  8935                              <2> 
  8936                              <2> 	boo:
  8937 00006E48 BE[486F0000]        <2> 		mov esi, boomsg
  8938 00006E4D 66BA6400            <2> 		mov dx, 100
  8939 00006E51 66B94001            <2> 		mov cx, 320
  8940 00006E55 31DB                <2> 		xor ebx, ebx
  8941 00006E57 6631C0              <2> 		xor ax, ax
  8942 00006E5A E9B6030000          <2> 		jmp showstring
  8943                              <2> 
  8944                              <2> 	pacmannomnom:
  8945 00006E5F BE[666F0000]        <2> 		mov esi, pacnom
  8946 00006E64 66BA8200            <2> 		mov dx, 130
  8947 00006E68 66B93C00            <2> 		mov cx, 60
  8948 00006E6C 31DB                <2> 		xor ebx, ebx
  8949 00006E6E 6631C0              <2> 		xor ax, ax
  8950 00006E71 E99F030000          <2> 		jmp showstring	
  8951                              <2> 	
  8952                              <2> 	noie:
  8953 00006E76 66C705[756F0000]80- <2> 		mov word [termwindow], 640
  8954 00006E7E 02                  <2>
  8955 00006E7F 66C705[776F0000]E0- <2> 		mov word [termwindow + 2], 480	;the previous lines of code make a large terminal window that is 4 characters smaller than the screen
  8956 00006E87 01                  <2>
  8957 00006E88 BE[756F0000]        <2> 		mov esi, termwindow
  8958 00006E8D 66BA1000            <2> 		mov dx, 16
  8959 00006E91 66B91000            <2> 		mov cx, 16
  8960 00006E95 31DB                <2> 		xor ebx, ebx
  8961 00006E97 6631C0              <2> 		xor ax, ax
  8962 00006E9A E8DF050000          <2> 		call showwindow
  8963 00006E9F E916B9FFFF          <2> 		jmp os
  8964                              <2> 
  8965                              <2> 	gotomenuboot:
  8966 00006EA4 31D2                <2> 		xor edx, edx
  8967 00006EA6 31C9                <2> 		xor ecx, ecx
  8968 00006EA8 668B15[EE530000]    <2> 		mov dx, [resolutionx]
  8969 00006EAF 668B0D[F0530000]    <2> 		mov cx, [resolutiony]
  8970 00006EB6 66C1E904            <2> 		shr cx, 4
  8971 00006EBA 6681E90100          <2> 		sub cx, 1
  8972 00006EBF 66C1E104            <2> 		shl cx, 4
  8973 00006EC3 668915[756F0000]    <2> 		mov [termwindow], dx
  8974 00006ECA 66890D[776F0000]    <2> 		mov [termwindow + 2], cx	;the previous lines of code make a large terminal window that is fullscreen
  8975 00006ED1 BE[756F0000]        <2> 		mov esi, termwindow
  8976 00006ED6 6631D2              <2> 		xor dx, dx
  8977 00006ED9 6631C9              <2> 		xor cx, cx
  8978 00006EDC 31DB                <2> 		xor ebx, ebx
  8979 00006EDE 6631C0              <2> 		xor ax, ax
  8980 00006EE1 E898050000          <2> 		call showwindow
  8981 00006EE6 E9CFB8FFFF          <2> 		jmp os
  8982                              <2> 
  8983                              <2> 	winblows:
  8984 00006EEB BE[3E6F0000]        <2> 		mov esi, turnoffmsg
  8985 00006EF0 BB[504F0000]        <2> 		mov ebx, turnoff
  8986 00006EF5 668B0D[F0530000]    <2> 		mov cx, [resolutiony]
  8987 00006EFC 6681E92000          <2> 		sub cx, 32
  8988 00006F01 6631D2              <2> 		xor dx, dx
  8989 00006F04 30E4                <2> 		xor ah, ah
  8990 00006F06 B010                <2> 		mov al, 00010000b
  8991 00006F08 E808030000          <2> 		call showstring
  8992 00006F0D BE[356F0000]        <2> 		mov esi, gotomenu
  8993 00006F12 668B0D[F0530000]    <2> 		mov cx, [resolutiony]
  8994 00006F19 6681E93000          <2> 		sub cx, 48
  8995 00006F1E 6631D2              <2> 		xor dx, dx
  8996 00006F21 30E4                <2> 		xor ah, ah
  8997 00006F23 B010                <2> 		mov al, 00010000b
  8998 00006F25 BB[A46E0000]        <2> 		mov ebx, gotomenuboot
  8999 00006F2A E9E6020000          <2> 		jmp showstring
  9000                              <2> 		
  9001                              <2> 
  9002 00006F2F 737461727400        <2> 	start	db "start",0
  9003 00006F35 536F6C6C65724F5300  <2> 	gotomenu db "SollerOS",0
  9004 00006F3E 506F776572204F6666- <2> 	turnoffmsg db "Power Off",0
  9005 00006F47 00                  <2>
  9006 00006F48 426F6F2100          <2> 	boomsg db "Boo!",0
  9007 00006F4D 5061636D616E207761- <2> 	pacmsg	db "Pacman was easy to draw.",0
  9008 00006F56 73206561737920746F- <2>
  9009 00006F5F 20647261772E00      <2>
  9010 00006F66 4F6D206E6F6D206E6F- <2> 	pacnom  db "Om nom nom nom",0
  9011 00006F6F 6D206E6F6D00        <2>
  9012                              <2> 
  9013 00006F75 20035802            <2> 	termwindow:	dw 800,600	;window size
  9014 00006F79 FFFF0000            <2> 				dw 0xFFFF,0	;colors(FG,BG)
  9015 00006F7D [2CDD2800]-         <2> 				dd videobuf,videobuf2 ;location of buffers
  9016 00006F81 [D0472900]          <2>
  9017 00006F85 534855536800        <2> 	termmsg:	db "SHUSh",0	;;window title
  9018                              <2> 	
  9019 00006F85 <incbin>            <2> interneticon: 	incbin 'source/gui/icons/internet'
  9020 00006F85 <incbin>            <2> wordicon: 	incbin 'source/gui/icons/word'
  9021 00006F85 <incbin>            <2> pacmanpellet: incbin 'source/gui/icons/pellet'
  9022 00006F85 <incbin>            <2> ghostie	incbin 'source/gui/icons/ghostie'
  9023 00006F85 <incbin>            <2> pacman	incbin 'source/gui/icons/pacman'
  9024                              <1> %include "source/gui/text.asm"
  9025                              <2> 	showstring:
  9026 00007215 A2[BB790000]        <2> 		mov [mouseselecton], al
  9027 0000721A 8025[BB790000]01    <2> 		and byte [mouseselecton], 1
  9028 00007221 B402                <2> 		mov ah, 2
  9029 00007223 E8050D0000          <2> 		call graphicsadd
  9030                              <2> 	showstring2:
  9031 00007228 30E4                <2> 		xor ah, ah
  9032 0000722A 8A06                <2> 		mov al, [esi]
  9033 0000722C 3C00                <2> 		cmp al, 0
  9034 0000722E 741E                <2> 		je doneshowstring
  9035 00007230 46                  <2> 		inc esi
  9036 00007231 3CFF                <2> 		cmp al, 255
  9037 00007233 74F3                <2> 		je showstring2
  9038 00007235 56                  <2> 		push esi
  9039 00007236 668B1D[56720000]    <2> 		mov bx, [colorfont2]
  9040 0000723D E825000000          <2> 		call showfontvesa
  9041 00007242 3C0A                <2> 		cmp al, 10
  9042 00007244 7405                <2> 		je noproceedshst
  9043 00007246 6681C20800          <2> 		add dx, 8
  9044                              <2> 	noproceedshst:
  9045 0000724B 5E                  <2> 		pop esi
  9046 0000724C EBDA                <2> 		jmp showstring2
  9047                              <2> 	doneshowstring:
  9048 0000724E C605[BB790000]00    <2> 		mov byte [mouseselecton], 0
  9049 00007255 C3                  <2> 		ret
  9050                              <2> 
  9051 00007256 FFFF                <2> colorfont2 dw 0xFFFF
  9052 00007258 00                  <2> colorcache db 0
  9053                              <2> 
  9054 00007259 02                  <2> resolutionbytes db 2
  9055 0000725A 0000                <2> posxvesa dw 0
  9056 0000725C 0000                <2> posyvesa dw 0
  9057 0000725E FFFF                <2> colorfont dw 0xFFFF
  9058                              <2> savefontvesa:		;;same rules as showfontvesa
  9059 00007260 C605[BA790000]01    <2> 	mov byte [savefonton], 1
  9060                              <2> showfontvesa:		;;position in (dx,cx), color in bx, char in al
  9061 00007267 3CFF                <2> 	cmp al, 255
  9062 00007269 7501                <2> 	jne nostopshowfont
  9063 0000726B C3                  <2> 	ret
  9064                              <2> nostopshowfont:
  9065 0000726C 66890D[5C720000]    <2> 	mov [posyvesa], cx
  9066 00007273 3C0A                <2> 	cmp al, 10
  9067 00007275 0F8424000000        <2> 	je near goodvesafontx
  9068 0000727B 31C9                <2> 	xor ecx, ecx
  9069 0000727D 668B0D[DC540000]    <2> 	mov cx, [resolutionx2]
  9070 00007284 6639CA              <2> 	cmp dx, cx
  9071 00007287 7616                <2> 	jbe goodvesafontx
  9072 00007289 6631D2              <2> 	xor dx, dx
  9073 0000728C 668B0D[5C720000]    <2> 	mov cx, [posyvesa]
  9074 00007293 6681C11000          <2> 	add cx, 16
  9075 00007298 66890D[5C720000]    <2> 	mov [posyvesa], cx
  9076                              <2> goodvesafontx:
  9077 0000729F 668B0D[5C720000]    <2> 	mov cx, [posyvesa]
  9078 000072A6 668915[5A720000]    <2> 	mov [posxvesa], dx
  9079 000072AD 8B3D[04540000]      <2> 	mov edi, [physbaseptr]
  9080 000072B3 66891D[5E720000]    <2> 	mov [colorfont], bx
  9081 000072BA 31DB                <2> 	xor ebx, ebx
  9082 000072BC 88C3                <2> 	mov bl, al
  9083 000072BE 31C0                <2> 	xor eax, eax
  9084 000072C0 88D8                <2> 	mov al, bl
  9085 000072C2 6689D3              <2> 	mov bx, dx
  9086 000072C5 89DA                <2> 	mov edx, ebx
  9087 000072C7 31DB                <2> 	xor ebx, ebx
  9088 000072C9 6681F90000          <2> 	cmp cx, 0
  9089 000072CE 7414                <2> 	je vesaposloopdn
  9090 000072D0 668B1D[DC540000]    <2> 	mov bx, [resolutionx2]
  9091                              <2> vesaposloop:
  9092 000072D7 52                  <2> 	push edx
  9093 000072D8 50                  <2> 	push eax
  9094 000072D9 31C0                <2> 	xor eax, eax
  9095 000072DB 6689C8              <2> 	mov ax, cx
  9096 000072DE F7E3                <2> 	mul ebx
  9097 000072E0 01C7                <2> 	add edi, eax
  9098 000072E2 58                  <2> 	pop eax
  9099 000072E3 5A                  <2> 	pop edx
  9100                              <2> vesaposloopdn:
  9101 000072E4 01D7                <2> 	add edi, edx
  9102 000072E6 BE[A4830000]        <2> 	mov esi, fonts
  9103                              <2> findfontvesa:
  9104 000072EB 30E4                <2> 	xor ah, ah
  9105 000072ED 3C0A                <2> 	cmp al, 10
  9106 000072EF 0F84FE000000        <2> 	je near nwlinevesa
  9107 000072F5 C1E004              <2> 	shl eax, 4
  9108 000072F8 01C6                <2> 	add esi, eax
  9109 000072FA C1E804              <2> 	shr eax, 4
  9110 000072FD 81FE[A4930000]      <2> 	cmp esi, fontend
  9111 00007303 0F83B9000000        <2> 	jae near donefontvesa
  9112 00007309 4E                  <2> 	dec esi
  9113                              <2> foundfontvesa:
  9114 0000730A 46                  <2> 	inc esi
  9115 0000730B 803D[BA790000]01    <2> 	cmp byte [savefonton], 1
  9116 00007312 0F8401010000        <2> 	je near vesafontsaver
  9117 00007318 30C9                <2> 	xor cl, cl
  9118 0000731A 8A06                <2> 	mov al, [esi]
  9119 0000731C 668B15[DC540000]    <2> 	mov dx, [resolutionx2]
  9120 00007323 662B15[5A720000]    <2> 	sub dx, [posxvesa]
  9121 0000732A 6681FA1000          <2> 	cmp dx, 16
  9122 0000732F 7708                <2> 	ja paintfontvesa
  9123 00007331 D0EA                <2> 	shr dl, 1
  9124 00007333 8815[F2730000]      <2> 	mov [charwidth], dl
  9125                              <2> paintfontvesa:
  9126 00007339 B201                <2> 	mov dl, 1
  9127 0000733B 20C2                <2> 	and dl, al
  9128 0000733D 803D[B9790000]01    <2> 	cmp byte [showcursorfonton], 1
  9129 00007344 0F8435000000        <2> 	je near nodelpaintedfont
  9130 0000734A 803D[B9790000]02    <2> 	cmp byte [showcursorfonton], 2
  9131 00007351 0F8518000000        <2> 	jne near noswitchcursorfonton
  9132 00007357 80FA00              <2> 	cmp dl, 0
  9133 0000735A 0F842E000000        <2> 	je near nopixelset
  9134 00007360 668B1D[5E720000]    <2> 	mov bx, [colorfont]
  9135 00007367 66891F              <2> 	mov [edi], bx
  9136 0000736A E91F000000          <2> 	jmp nopixelset
  9137                              <2> noswitchcursorfonton:
  9138 0000736F 3215[BB790000]      <2> 	xor dl, [mouseselecton]
  9139 00007375 668B1D[946C0000]    <2> 	mov bx, [background]
  9140 0000737C 66891F              <2> 	mov [edi], bx
  9141                              <2> nodelpaintedfont:
  9142 0000737F 80FA00              <2> 	cmp dl, 0
  9143 00007382 740A                <2> 	je nopixelset
  9144 00007384 668B15[5E720000]    <2> 	mov dx, [colorfont]
  9145 0000738B 668917              <2> 	mov [edi], dx
  9146                              <2> nopixelset:
  9147 0000738E 81C702000000        <2> 	add edi, 2
  9148 00007394 D0C0                <2> 	rol al, 1
  9149 00007396 FEC1                <2> 	inc cl
  9150 00007398 3A0D[F2730000]      <2> 	cmp cl, [charwidth]
  9151 0000739E 7299                <2> 	jb paintfontvesa
  9152 000073A0 FEC5                <2> 	inc ch
  9153 000073A2 31D2                <2> 	xor edx, edx
  9154 000073A4 668B15[DC540000]    <2> 	mov dx, [resolutionx2]
  9155 000073AB 01D7                <2> 	add edi, edx
  9156 000073AD 31D2                <2> 	xor edx, edx
  9157 000073AF 8A15[F2730000]      <2> 	mov dl, [charwidth]
  9158 000073B5 00D2                <2> 	add dl, dl
  9159 000073B7 29D7                <2> 	sub edi, edx
  9160 000073B9 80FD10              <2> 	cmp ch, 16
  9161 000073BC 0F8248FFFFFF        <2> 	jb foundfontvesa
  9162                              <2> donefontvesa:
  9163 000073C2 B208                <2> 	mov dl, 8
  9164 000073C4 8815[F2730000]      <2> 	mov [charwidth], dl
  9165 000073CA 668B15[5A720000]    <2> 	mov dx, [posxvesa]
  9166 000073D1 8A1D[F2730000]      <2> 	mov bl, [charwidth]
  9167 000073D7 30FF                <2> 	xor bh, bh
  9168 000073D9 6601DA              <2> 	add dx, bx
  9169 000073DC 668B1D[5E720000]    <2> 	mov bx, [colorfont]
  9170 000073E3 668B0D[5C720000]    <2> 	mov cx, [posyvesa]
  9171 000073EA C605[BA790000]00    <2> 	mov byte [savefonton], 0
  9172 000073F1 C3                  <2> 	ret
  9173 000073F2 08                  <2> charwidth db 8
  9174                              <2> nwlinevesa:
  9175 000073F3 668B15[5A720000]    <2> 	mov dx, [posxvesa]
  9176 000073FA 6631D2              <2> 	xor dx, dx
  9177 000073FD 668915[5A720000]    <2> 	mov [posxvesa], dx
  9178 00007404 668B0D[5C720000]    <2> 	mov cx, [posyvesa]
  9179 0000740B 6681C11000          <2> 	add cx, 16
  9180 00007410 66890D[5C720000]    <2> 	mov [posyvesa], cx
  9181 00007417 EBA9                <2> 	jmp donefontvesa
  9182                              <2> vesafontsaver:
  9183 00007419 30C0                <2> 	xor al, al
  9184 0000741B 30C9                <2> 	xor cl, cl
  9185                              <2> vesafontsaver2:
  9186 0000741D 668B17              <2> 	mov dx, [edi]
  9187 00007420 663B15[5E720000]    <2> 	cmp dx, [colorfont]
  9188 00007427 742F                <2> 	je colorfontmatch
  9189                              <2> donecolormatch:
  9190 00007429 81C702000000        <2> 	add edi, 2
  9191 0000742F D0C0                <2> 	rol al, 1
  9192 00007431 FEC1                <2> 	inc cl
  9193 00007433 80F908              <2> 	cmp cl, 8
  9194 00007436 72E5                <2> 	jb vesafontsaver2
  9195 00007438 8806                <2> 	mov [esi], al
  9196 0000743A 46                  <2> 	inc esi
  9197 0000743B FEC5                <2> 	inc ch
  9198 0000743D 31D2                <2> 	xor edx, edx
  9199 0000743F 668B15[DC540000]    <2> 	mov dx, [resolutionx2]
  9200 00007446 01D7                <2> 	add edi, edx
  9201 00007448 81EF10000000        <2> 	sub edi, 16
  9202 0000744E 80FD10              <2> 	cmp ch, 16
  9203 00007451 72C6                <2> 	jb vesafontsaver
  9204 00007453 E96AFFFFFF          <2> 	jmp donefontvesa
  9205                              <2> colorfontmatch:
  9206 00007458 0401                <2> 	add al, 1
  9207 0000745A EBCD                <2> 	jmp donecolormatch
  9208                              <1> %include "source/gui/window.asm"
  9209 0000745C 0000                <2> winvcopystx dw 0
  9210 0000745E 0000                <2> winvcopysty dw 0
  9211 00007460 0000                <2> winvcopydx dw 0
  9212 00007462 0000                <2> winvcopycx dw 0
  9213 00007464 FFFF0000            <2> windowcolor dw 0xFFFF,0
  9214 00007468 00000000            <2> windowbufloc: dd 0
  9215 0000746C 00000000            <2> windowvideobuf dd 0
  9216 00007470 00000000            <2> windowvideobuf2 dd 0
  9217 00007474 00000000            <2> windowinfobuf dd 0
  9218 00007478 0000                <2> termcol dw 0
  9219 0000747A 00000000            <2> wincopyendpos dd 0
  9220                              <2> 
  9221                              <2> 	showwindow:	;windowstuff in esi, position in (dx, cx), nothing in ax, code in ebx
  9222 0000747E C605[37220000]01    <2> 		mov byte [termguion], 1
  9223 00007485 6681C11000          <2> 		add cx, 16
  9224 0000748A 668915[5C740000]    <2> 		mov [winvcopystx], dx
  9225 00007491 66890D[5E740000]    <2> 		mov [winvcopysty], cx
  9226 00007498 8935[74740000]      <2> 		mov [windowinfobuf], esi
  9227 0000749E 668B16              <2> 		mov dx, [esi]
  9228 000074A1 668B4E02            <2> 		mov cx, [esi + 2]
  9229 000074A5 31C0                <2> 		xor eax, eax
  9230 000074A7 31DB                <2> 		xor ebx, ebx
  9231 000074A9 6689D0              <2> 		mov ax, dx
  9232 000074AC 6689CB              <2> 		mov bx, cx
  9233 000074AF 66C1E803            <2> 		shr ax, 3
  9234 000074B3 66C1EB04            <2> 		shr bx, 4
  9235 000074B7 66A3[78740000]      <2> 		mov [termcol], ax
  9236 000074BD A2[FB230000]        <2> 		mov [charxy], al
  9237 000074C2 881D[FC230000]      <2> 		mov [charxy + 1], bl
  9238 000074C8 8B7E04              <2> 		mov edi, [esi + 4]
  9239 000074CB 893D[64740000]      <2> 		mov [windowcolor], edi
  9240 000074D1 8B7E0C              <2> 		mov edi, [esi + 12]
  9241 000074D4 893D[70740000]      <2> 		mov [windowvideobuf2], edi
  9242 000074DA 8B7E08              <2> 		mov edi, [esi + 8]
  9243 000074DD 893D[6C740000]      <2> 		mov [windowvideobuf], edi
  9244 000074E3 81FB00000000        <2> 		cmp ebx, 0
  9245 000074E9 0F84A9040000        <2> 		je near donewincopynow	;AAAAAAAAA!!!!!
  9246                              <2> 	findendposwin:
  9247 000074EF 01C7                <2> 		add edi, eax
  9248 000074F1 01C7                <2> 		add edi, eax
  9249 000074F3 4B                  <2> 		dec ebx
  9250 000074F4 81FB00000000        <2> 		cmp ebx, 0
  9251 000074FA 77F3                <2> 		ja findendposwin
  9252 000074FC 893D[7A740000]      <2> 		mov [wincopyendpos], edi
  9253 00007502 31FF                <2> 		xor edi, edi
  9254 00007504 6631C0              <2> 		xor ax, ax
  9255 00007507 6631DB              <2> 		xor bx, bx
  9256 0000750A 6601D2              <2> 		add dx, dx
  9257 0000750D 668915[60740000]    <2> 		mov [winvcopydx], dx
  9258 00007514 66890D[62740000]    <2> 		mov [winvcopycx], cx
  9259 0000751B 668B0D[5E740000]    <2> 		mov cx, [winvcopysty]
  9260 00007522 6681E91000          <2> 		sub cx, 16
  9261 00007527 668B15[5C740000]    <2> 		mov dx, [winvcopystx]
  9262 0000752E C605[38220000]00    <2> 		mov byte [termcopyon], 0
  9263 00007535 B403                <2> 		mov ah, 3
  9264 00007537 E8F1090000          <2> 		call graphicsadd
  9265                              <2> 	showwindow2:
  9266 0000753C 6681C11000          <2> 		add cx, 16
  9267 00007541 668915[5C740000]    <2> 		mov [winvcopystx], dx
  9268 00007548 66890D[5E740000]    <2> 		mov [winvcopysty], cx
  9269 0000754F 668B16              <2> 		mov dx, [esi]
  9270 00007552 668B4E02            <2> 		mov cx, [esi + 2]
  9271 00007556 6601D2              <2> 		add dx, dx
  9272 00007559 668915[60740000]    <2> 		mov [winvcopydx], dx
  9273 00007560 66890D[62740000]    <2> 		mov [winvcopycx], cx
  9274 00007567 8B3D[68740000]      <2> 		mov edi, [windowbufloc]
  9275 0000756D 31D2                <2> 		xor edx, edx
  9276 0000756F 668B15[DC540000]    <2> 		mov dx, [resolutionx2]
  9277 00007576 C1E204              <2> 		shl edx, 4
  9278 00007579 29D7                <2> 		sub edi, edx
  9279 0000757B 803D[38220000]00    <2> 		cmp byte [termcopyon], 0
  9280 00007582 7538                <2> 		jne nocleartitlebarpos
  9281 00007584 8B3D[04540000]      <2> 		mov edi, [physbaseptr]
  9282 0000758A 31D2                <2> 		xor edx, edx
  9283 0000758C 668B15[5C740000]    <2> 		mov dx, [winvcopystx]
  9284 00007593 01D7                <2> 		add edi, edx
  9285 00007595 668B0D[5E740000]    <2> 		mov cx, [winvcopysty]
  9286 0000759C 6681E91000          <2> 		sub cx, 16
  9287 000075A1 6681F90000          <2> 		cmp cx, 0
  9288 000075A6 7414                <2> 		je nocleartitlebarpos
  9289                              <2> 	cleartitlebarpos:
  9290 000075A8 31D2                <2> 		xor edx, edx
  9291 000075AA 668B15[DC540000]    <2> 		mov dx, [resolutionx2]
  9292 000075B1 01D7                <2> 		add edi, edx
  9293 000075B3 6649                <2> 		dec cx
  9294 000075B5 6681F90000          <2> 		cmp cx, 0
  9295 000075BA 75EC                <2> 		jne cleartitlebarpos
  9296                              <2> 	nocleartitlebarpos:
  9297 000075BC 66B91000            <2> 		mov cx, 16
  9298 000075C0 668B15[60740000]    <2> 		mov dx, [winvcopydx]
  9299 000075C7 6681F90000          <2> 		cmp cx, 0
  9300 000075CC 0F8448000000        <2> 		je near canceltitlebarput
  9301 000075D2 6681FA0000          <2> 		cmp dx, 0
  9302 000075D7 0F843D000000        <2> 		je near canceltitlebarput
  9303                              <2> 	titlebarput:
  9304 000075DD 66A1[64740000]      <2> 		mov ax, [windowcolor]
  9305 000075E3 668907              <2> 		mov [edi], ax
  9306 000075E6 6681EA0200          <2> 		sub dx, 2
  9307 000075EB 81C702000000        <2> 		add edi, 2
  9308 000075F1 6681FA0000          <2> 		cmp dx, 0
  9309 000075F6 75E5                <2> 		jne titlebarput
  9310 000075F8 31D2                <2> 		xor edx, edx
  9311 000075FA 668B15[DC540000]    <2> 		mov dx, [resolutionx2]
  9312 00007601 6649                <2> 		dec cx
  9313 00007603 662B15[60740000]    <2> 		sub dx, [winvcopydx]
  9314 0000760A 01D7                <2> 		add edi, edx
  9315 0000760C 668B15[60740000]    <2> 		mov dx, [winvcopydx]
  9316 00007613 6681F90000          <2> 		cmp cx, 0
  9317 00007618 75C3                <2> 		jne titlebarput
  9318                              <2> 	canceltitlebarput:
  9319 0000761A 893D[68740000]      <2> 		mov [windowbufloc], edi
  9320 00007620 803D[38220000]02    <2> 		cmp byte [termcopyon], 2
  9321 00007627 0F8465000000        <2> 		je near winvcpst
  9322 0000762D 6631C0              <2> 		xor ax, ax
  9323 00007630 81C610000000        <2> 		add esi, 16
  9324 00007636 668B15[5C740000]    <2> 		mov dx, [winvcopystx]
  9325 0000763D 668B0D[5E740000]    <2> 		mov cx, [winvcopysty]
  9326 00007644 6681E91000          <2> 		sub cx, 16
  9327 00007649 668B1D[64740000]    <2> 		mov bx, [windowcolor]
  9328 00007650 C605[BB790000]01    <2> 		mov byte [mouseselecton], 1
  9329 00007657 E8CCFBFFFF          <2> 		call showstring2
  9330 0000765C B058                <2> 		mov al, "X"
  9331 0000765E 30E4                <2> 		xor ah, ah
  9332 00007660 668B1D[64740000]    <2> 		mov bx, [windowcolor]
  9333 00007667 668B15[5C740000]    <2> 		mov dx, [winvcopystx]
  9334 0000766E 668B0D[5E740000]    <2> 		mov cx, [winvcopysty]
  9335 00007675 6681E91000          <2> 		sub cx, 16
  9336 0000767A 6681EA1400          <2> 		sub dx, 20
  9337 0000767F 660315[60740000]    <2> 		add dx, [winvcopydx]
  9338 00007686 C605[BB790000]01    <2> 		mov byte [mouseselecton], 1
  9339 0000768D E8D5FBFFFF          <2> 		call showfontvesa
  9340                              <2> 	winvcpst:
  9341 00007692 803D[147F0000]01    <2> 		cmp byte [windrag], 1
  9342 00007699 0F8408030000        <2> 		je near forgetresetstuff
  9343 0000769F 8B3D[68740000]      <2> 		mov edi, [windowbufloc]
  9344 000076A5 E991000000          <2> 		jmp windowvideocopyset
  9345                              <2> 
  9346                              <2> 	windowvideocopy:
  9347 000076AA 8B35[74740000]      <2> 		mov esi, [windowinfobuf]
  9348 000076B0 668B16              <2> 		mov dx, [esi]
  9349 000076B3 668B4E02            <2> 		mov cx, [esi + 2]
  9350 000076B7 8B7E04              <2> 		mov edi, [esi + 4]
  9351 000076BA 893D[64740000]      <2> 		mov [windowcolor], edi
  9352 000076C0 8B7E08              <2> 		mov edi, [esi + 8]
  9353 000076C3 8B5E0C              <2> 		mov ebx, [esi + 12]
  9354 000076C6 893D[6C740000]      <2> 		mov [windowvideobuf], edi
  9355 000076CC 891D[70740000]      <2> 		mov [windowvideobuf2], ebx
  9356 000076D2 31C0                <2> 		xor eax, eax
  9357 000076D4 31DB                <2> 		xor ebx, ebx
  9358 000076D6 6689D0              <2> 		mov ax, dx
  9359 000076D9 6689CB              <2> 		mov bx, cx
  9360 000076DC 66C1E803            <2> 		shr ax, 3
  9361 000076E0 66C1EB04            <2> 		shr bx, 4
  9362 000076E4 66A3[78740000]      <2> 		mov [termcol], ax
  9363 000076EA A2[FB230000]        <2> 		mov [charxy], al
  9364 000076EF 881D[FC230000]      <2> 		mov [charxy + 1], bl
  9365 000076F5 8B3D[68740000]      <2> 		mov edi, [windowbufloc]
  9366 000076FB 3B3D[04540000]      <2> 		cmp edi, [physbaseptr]
  9367 00007701 0F8334000000        <2> 		jae near windowvideocopyset
  9368 00007707 31C9                <2> 		xor ecx, ecx
  9369 00007709 31D2                <2> 		xor edx, edx
  9370 0000770B 668B15[5C740000]    <2> 		mov dx, [winvcopystx]
  9371 00007712 668B0D[5E740000]    <2> 		mov cx, [winvcopysty]
  9372 00007719 8B3D[04540000]      <2> 		mov edi, [physbaseptr]
  9373 0000771F 01D7                <2> 		add edi, edx
  9374 00007721 81F900000000        <2> 		cmp ecx, 0
  9375 00007727 7412                <2> 		je windowvideocopyset
  9376                              <2> 	yrescopylp:
  9377 00007729 31C0                <2> 		xor eax, eax
  9378 0000772B 66A1[DC540000]      <2> 		mov ax, [resolutionx2]
  9379 00007731 F7E1                <2> 		mul ecx
  9380 00007733 01C7                <2> 		add edi, eax
  9381 00007735 893D[68740000]      <2> 		mov [windowbufloc], edi
  9382                              <2> 	windowvideocopyset:
  9383 0000773B 6631C9              <2> 		xor cx, cx
  9384 0000773E 6649                <2> 		dec cx
  9385 00007740 66890D[AF790000]    <2> 		mov [charposline], cx
  9386 00007747 89FE                <2> 		mov esi, edi
  9387 00007749 81EE10000000        <2> 		sub esi, 16
  9388 0000774F 31D2                <2> 		xor edx, edx
  9389 00007751 668B15[DC540000]    <2> 		mov dx, [resolutionx2]
  9390 00007758 C1E204              <2> 		shl edx, 4
  9391 0000775B 01D6                <2> 		add esi, edx
  9392 0000775D 8B3D[6C740000]      <2> 		mov edi, [windowvideobuf]
  9393 00007763 81EF02000000        <2> 		sub edi, 2
  9394 00007769 893D[B1790000]      <2> 		mov [charposvbuf], edi
  9395 0000776F E919010000          <2> 		jmp nextcharwin
  9396                              <2> 	win.write:	;adjusted this to use alpha
  9397                              <2> 				;5R, 6G, 5B
  9398                              <2> %ifdef gui.alphablending
  9399 00007774 56                  <2> 		push esi
  9400 00007775 6653                <2> 		push bx
  9401 00007777 6651                <2> 		push cx
  9402 00007779 6652                <2> 		push dx
  9403                              <2> %ifdef gui.background
  9404 0000777B 89FE                <2> 		mov esi, edi
  9405 0000777D 2B35[04540000]      <2> 		sub esi, [physbaseptr]
  9406 00007783 0335[666C0000]      <2> 		add esi, [backgroundimage]
  9407 00007789 813D[666C0000]0000- <2> 		cmp dword [backgroundimage], 0
  9408 00007791 0000                <2>
  9409 00007793 7505                <2> 		jne .red
  9410                              <2> %endif
  9411 00007795 BE[946C0000]        <2> 		mov esi, background
  9412                              <2> 	.red:
  9413 0000779A 668B0E              <2> 		mov cx, [esi]
  9414 0000779D 66C1E90B            <2> 		shr cx, 11
  9415 000077A1 6689C3              <2> 		mov bx, ax
  9416 000077A4 66C1EB0B            <2> 		shr bx, 11
  9417 000077A8 6601D9              <2> 		add cx, bx
  9418 000077AB 6601D9              <2> 		add cx, bx
  9419 000077AE 6601D9              <2> 		add cx, bx
  9420 000077B1 66C1E902            <2> 		shr cx, 2
  9421 000077B5 66C1E10B            <2> 		shl cx, 11
  9422 000077B9 6689CA              <2> 		mov dx, cx
  9423                              <2> 	.green:
  9424 000077BC 668B0E              <2> 		mov cx, [esi]
  9425 000077BF 66C1E105            <2> 		shl cx, 5
  9426 000077C3 66C1E90A            <2> 		shr cx, 10
  9427 000077C7 6689C3              <2> 		mov bx, ax
  9428 000077CA 66C1E305            <2> 		shl bx, 5
  9429 000077CE 66C1EB0A            <2> 		shr bx, 10
  9430 000077D2 6601D9              <2> 		add cx, bx
  9431 000077D5 6601D9              <2> 		add cx, bx
  9432 000077D8 6601D9              <2> 		add cx, bx
  9433 000077DB 66C1E902            <2> 		shr cx, 2
  9434 000077DF 66C1E105            <2> 		shl cx, 5
  9435 000077E3 6601CA              <2> 		add dx, cx
  9436                              <2> 	.blue:
  9437 000077E6 668B0E              <2> 		mov cx, [esi]
  9438 000077E9 66C1E10B            <2> 		shl cx, 11
  9439 000077ED 66C1E90B            <2> 		shr cx, 11
  9440 000077F1 6689C3              <2> 		mov bx, ax
  9441 000077F4 66C1E30B            <2> 		shl bx, 11
  9442 000077F8 66C1EB0B            <2> 		shr bx, 11
  9443 000077FC 6601D9              <2> 		add cx, bx
  9444 000077FF 6601D9              <2> 		add cx, bx
  9445 00007802 6601D9              <2> 		add cx, bx
  9446 00007805 66C1E902            <2> 		shr cx, 2
  9447 00007809 6601CA              <2> 		add dx, cx
  9448 0000780C 668917              <2> 		mov [edi], dx
  9449 0000780F 665A                <2> 		pop dx
  9450 00007811 6659                <2> 		pop cx
  9451 00007813 665B                <2> 		pop bx
  9452 00007815 5E                  <2> 		pop esi
  9453                              <2> %else
  9454                              <2> 		mov [edi], ax
  9455                              <2> %endif
  9456 00007816 C3                  <2> 		ret
  9457                              <2> 	copywindow:
  9458 00007817 B201                <2> 		mov dl, 1
  9459 00007819 D0C6                <2> 		rol dh, 1
  9460 0000781B 20F2                <2> 		and dl, dh
  9461 0000781D 803D[58720000]10    <2> 		cmp byte [colorcache], 0x10
  9462 00007824 7320                <2> 		jae switchwincolors
  9463 00007826 66A1[66740000]      <2> 		mov ax, [windowcolor + 2]
  9464 0000782C E843FFFFFF          <2> 		call win.write
  9465 00007831 80FA00              <2> 		cmp dl, 0
  9466 00007834 742B                <2> 		je nowritewin
  9467 00007836 66A1[64740000]      <2> 		mov ax, [windowcolor]
  9468 0000783C E833FFFFFF          <2> 		call win.write
  9469 00007841 E91B000000          <2> 		jmp nowritewin
  9470                              <2> 	switchwincolors:
  9471 00007846 66A1[64740000]      <2> 		mov ax, [windowcolor]
  9472 0000784C E823FFFFFF          <2> 		call win.write
  9473 00007851 80FA00              <2> 		cmp dl, 0
  9474 00007854 740B                <2> 		je nowritewin
  9475 00007856 66A1[66740000]      <2> 		mov ax, [windowcolor + 2]
  9476 0000785C E813FFFFFF          <2> 		call win.write
  9477                              <2> 	nowritewin:
  9478 00007861 81C702000000        <2> 		add edi, 2
  9479 00007867 FEC1                <2> 		inc cl
  9480 00007869 80F908              <2> 		cmp cl, 8
  9481 0000786C 75A9                <2> 		jne copywindow
  9482 0000786E 6643                <2> 		inc bx
  9483 00007870 30C9                <2> 		xor cl, cl
  9484 00007872 31D2                <2> 		xor edx, edx
  9485 00007874 668B15[DC540000]    <2> 		mov dx, [resolutionx2]
  9486 0000787B 01D6                <2> 		add esi, edx
  9487 0000787D 89F7                <2> 		mov edi, esi
  9488 0000787F 678AB7[A483]        <2> 		mov dh, [fonts + bx]
  9489 00007884 D0CE                <2> 		ror dh, 1
  9490 00007886 FEC5                <2> 		inc ch
  9491 00007888 80FD10              <2> 		cmp ch, 16
  9492 0000788B 758A                <2> 		jne copywindow
  9493                              <2> 	nextcharwin:
  9494 0000788D 6631C9              <2> 		xor cx, cx
  9495 00007890 8B3D[B1790000]      <2> 		mov edi, [charposvbuf]
  9496 00007896 81C702000000        <2> 		add edi, 2
  9497 0000789C 3B3D[7A740000]      <2> 		cmp edi, [wincopyendpos]
  9498 000078A2 0F83F0000000        <2> 		jae near donewincopynow
  9499 000078A8 8A7F01              <2> 		mov bh, [edi + 1]
  9500 000078AB 80FF00              <2> 		cmp bh, 0
  9501 000078AE 7505                <2> 		jne nofixcolorwin
  9502 000078B0 B707                <2> 		mov bh, 7
  9503 000078B2 887F01              <2> 		mov [edi + 1], bh
  9504                              <2> 	nofixcolorwin:
  9505 000078B5 883D[58720000]      <2> 		mov [colorcache], bh
  9506 000078BB 8A1F                <2> 		mov bl, [edi]
  9507 000078BD 893D[B1790000]      <2> 		mov [charposvbuf], edi
  9508 000078C3 813D[70740000]0000- <2> 		cmp dword [windowvideobuf2], 0
  9509 000078CB 0000                <2>
  9510 000078CD 7459                <2> 		je noskipcharcopy
  9511 000078CF 2B3D[6C740000]      <2> 		sub edi, [windowvideobuf]
  9512 000078D5 033D[70740000]      <2> 		add edi, [windowvideobuf2]
  9513 000078DB 8A6701              <2> 		mov ah, [edi + 1]
  9514 000078DE 8A07                <2> 		mov al, [edi]
  9515 000078E0 6639D8              <2> 		cmp ax, bx
  9516 000078E3 7543                <2> 		jne noskipcharcopy
  9517                              <2> 	skipcharcopy:
  9518 000078E5 81C610000000        <2> 		add esi, 16
  9519 000078EB 668B0D[AF790000]    <2> 		mov cx, [charposline]
  9520 000078F2 6641                <2> 		inc cx
  9521 000078F4 66890D[AF790000]    <2> 		mov [charposline], cx
  9522 000078FB 663B0D[78740000]    <2> 		cmp cx, [termcol]
  9523 00007902 7289                <2> 		jb nextcharwin
  9524 00007904 6631C9              <2> 		xor cx, cx
  9525 00007907 66890D[AF790000]    <2> 		mov [charposline], cx
  9526 0000790E 31D2                <2> 		xor edx, edx
  9527 00007910 668B15[DC540000]    <2> 		mov dx, [resolutionx2]
  9528 00007917 C1E204              <2> 		shl edx, 4
  9529 0000791A 662B15[60740000]    <2> 		sub dx, [winvcopydx]
  9530 00007921 01D6                <2> 		add esi, edx
  9531 00007923 E965FFFFFF          <2> 		jmp nextcharwin
  9532                              <2> 	noskipcharcopy:
  9533 00007928 881F                <2> 		mov [edi], bl
  9534 0000792A 887F01              <2> 		mov [edi + 1], bh
  9535 0000792D 8B3D[B1790000]      <2> 		mov edi, [charposvbuf]
  9536 00007933 30FF                <2> 		xor bh, bh
  9537 00007935 66C1E304            <2> 		shl bx, 4
  9538 00007939 31D2                <2> 		xor edx, edx
  9539 0000793B 668B15[DC540000]    <2> 		mov dx, [resolutionx2]
  9540 00007942 C1E204              <2> 		shl edx, 4
  9541 00007945 29D6                <2> 		sub esi, edx
  9542 00007947 81C610000000        <2> 		add esi, 16
  9543 0000794D 89F7                <2> 		mov edi, esi
  9544 0000794F 668B0D[AF790000]    <2> 		mov cx, [charposline]
  9545 00007956 6641                <2> 		inc cx
  9546 00007958 663B0D[78740000]    <2> 		cmp cx, [termcol]
  9547 0000795F 7316                <2> 		jae fixwindowcopy
  9548 00007961 66890D[AF790000]    <2> 		mov [charposline], cx
  9549 00007968 6631C9              <2> 		xor cx, cx
  9550 0000796B 678AB7[A483]        <2> 		mov dh, [fonts + bx]
  9551 00007970 D0CE                <2> 		ror dh, 1
  9552 00007972 E9A0FEFFFF          <2> 		jmp copywindow
  9553                              <2> fixwindowcopy:
  9554 00007977 6631C9              <2> 		xor cx, cx
  9555 0000797A 66890D[AF790000]    <2> 		mov [charposline], cx
  9556 00007981 662B15[60740000]    <2> 		sub dx, [winvcopydx]
  9557 00007988 01D6                <2> 		add esi, edx
  9558 0000798A 89F7                <2> 		mov edi, esi
  9559 0000798C 678AB7[A483]        <2> 		mov dh, [fonts + bx]
  9560 00007991 D0CE                <2> 		ror dh, 1
  9561 00007993 E97FFEFFFF          <2> 		jmp copywindow
  9562                              <2> donewincopynow:
  9563 00007998 803D[38220000]01    <2> 		cmp byte [termcopyon], 1
  9564 0000799F 7506                <2> 		jne forgetresetstuff
  9565 000079A1 E8C0ACFFFF          <2> 		call switchtermcursor
  9566 000079A6 61                  <2> 		popa
  9567                              <2> forgetresetstuff:
  9568 000079A7 C605[38220000]00    <2> 		mov byte [termcopyon], 0
  9569 000079AE C3                  <2> 		ret
  9570                              <2> 		
  9571 000079AF 0000                <2> charposline dw 0
  9572 000079B1 00000000            <2> charposvbuf dw 0,0
  9573                              <1> 				
  9574 000079B5 00                  <1> copygui db 0
  9575 000079B6 00                  <1> graphicsset db 0
  9576 000079B7 0000                <1> graphicspos db 0,0
  9577 000079B9 00                  <1> showcursorfonton db 0
  9578 000079BA 00                  <1> savefonton db 0
  9579 000079BB 00                  <1> mouseselecton db 0
  9580                              <1> 
  9581 000079BC 00                  <1> pbutton db 0
  9582 000079BD 00                  <1> pLBUTTON db 0
  9583 000079BE 00                  <1> pRBUTTON db 0
  9584 000079BF 00000000            <1> dragging dw 0,0
  9585 000079C3 0000000000000000    <1> lastpos dw 0,0,0,0
  9586 000079CB 00000000            <1> colorbuf dw 0,0
  9587                              <1> 	
  9588                              <1> 	clickicon:
  9589 000079CF B001                <1> 		mov al, 1
  9590 000079D1 A2[BC790000]        <1> 		mov [pbutton], al
  9591 000079D6 A0[BD790000]        <1> 		mov al, [pLBUTTON]
  9592 000079DB 2205[E0570000]      <1> 		and al, [LBUTTON]
  9593 000079E1 8A25[BE790000]      <1> 		mov ah, [pRBUTTON]
  9594 000079E7 2225[E1570000]      <1> 		and ah, [RBUTTON]
  9595 000079ED 08E0                <1> 		or al, ah
  9596 000079EF 3C00                <1> 		cmp al, 0
  9597 000079F1 741B                <1> 		je nodragclick
  9598 000079F3 813D[BF790000]0100- <1> 		cmp dword [dragging], 1
  9599 000079FB 0000                <1>
  9600 000079FD 732D                <1> 		jae dragclick
  9601 000079FF C705[BF790000]0100- <1> 		mov dword [dragging], 1
  9602 00007A07 0000                <1>
  9603 00007A09 E91E000000          <1> 		jmp dragclick
  9604                              <1> 	nodragclick:
  9605 00007A0E C705[BF790000]0000- <1> 		mov dword [dragging], 0
  9606 00007A16 0000                <1>
  9607 00007A18 A0[E0570000]        <1> 		mov al, [LBUTTON]
  9608 00007A1D A2[BD790000]        <1> 		mov [pLBUTTON], al
  9609 00007A22 A0[E1570000]        <1> 		mov al, [RBUTTON]
  9610 00007A27 A2[BE790000]        <1> 		mov [pRBUTTON], al
  9611                              <1> 	dragclick:
  9612 00007A2C 6631C0              <1> 		xor ax, ax
  9613 00007A2F BE[2BC60000]        <1> 		mov esi, graphicstable
  9614 00007A34 C705[18820000]0000- <1> 		mov dword [codepointer], 0
  9615 00007A3C 0000                <1>
  9616                              <1> 	clicon2:
  9617 00007A3E 31D2                <1> 		xor edx, edx
  9618 00007A40 31C9                <1> 		xor ecx, ecx
  9619 00007A42 66813E0100          <1> 		cmp word [esi], 1
  9620 00007A47 0F841B000000        <1> 		je near iconselect
  9621 00007A4D 66813E0200          <1> 		cmp word [esi], 2
  9622 00007A52 0F8472010000        <1> 		je near textselected
  9623 00007A58 66813E0300          <1> 		cmp word [esi], 3
  9624 00007A5D 0F84C7020000        <1> 		je near windowselect
  9625 00007A63 E908040000          <1> 		jmp nexticonsel
  9626                              <1> 	iconselect:
  9627 00007A68 668B5606            <1> 		mov dx, [esi + 6]
  9628 00007A6C 6689D0              <1> 		mov ax, dx
  9629 00007A6F 668B4E08            <1> 		mov cx, [esi + 8]
  9630 00007A73 6689CB              <1> 		mov bx, cx
  9631 00007A76 6681C32000          <1> 		add bx, 32
  9632 00007A7B 6601D0              <1> 		add ax, dx
  9633 00007A7E 813D[BF790000]0100- <1> 		cmp dword [dragging], 1
  9634 00007A86 0000                <1>
  9635 00007A88 746F                <1> 		je dragicon
  9636 00007A8A 813D[BF790000]0000- <1> 		cmp dword [dragging], 0
  9637 00007A92 0000                <1>
  9638 00007A94 7411                <1> 		je nodragiconcheck
  9639 00007A96 3935[BF790000]      <1> 		cmp dword [dragging], esi
  9640 00007A9C 0F85CE030000        <1> 		jne near nexticonsel
  9641 00007AA2 E952000000          <1> 		jmp dragicon
  9642                              <1> 	nodragiconcheck:
  9643 00007AA7 663905[CF560000]    <1> 		cmp [mousecursorposition], ax
  9644 00007AAE 0F82BC030000        <1> 		jb near nexticonsel
  9645 00007AB4 66054000            <1> 		add ax, 64
  9646 00007AB8 663905[CF560000]    <1> 		cmp [mousecursorposition], ax
  9647 00007ABF 0F87AB030000        <1> 		ja near nexticonsel
  9648 00007AC5 6629D0              <1> 		sub ax, dx
  9649 00007AC8 66390D[D1560000]    <1> 		cmp [mousecursorposition + 2], cx
  9650 00007ACF 0F829B030000        <1> 		jb near nexticonsel
  9651 00007AD5 66391D[D1560000]    <1> 		cmp [mousecursorposition + 2], bx
  9652 00007ADC 0F878E030000        <1> 		ja near nexticonsel
  9653 00007AE2 668B460A            <1> 		mov ax, [esi + 10]
  9654 00007AE6 66250100            <1> 		and ax, 1
  9655 00007AEA 663D0100            <1> 		cmp ax, 1
  9656 00007AEE 0F84B6000000        <1> 		je near unselecticon
  9657 00007AF4 E98D000000          <1> 		jmp nodragicon
  9658                              <1> 	dragicon:
  9659 00007AF9 663905[CB560000]    <1> 		cmp [lastmouseposition], ax
  9660 00007B00 0F826A030000        <1> 		jb near nexticonsel
  9661 00007B06 66054000            <1> 		add ax, 64
  9662 00007B0A 663905[CB560000]    <1> 		cmp [lastmouseposition], ax
  9663 00007B11 0F8759030000        <1> 		ja near nexticonsel
  9664 00007B17 6629D0              <1> 		sub ax, dx
  9665 00007B1A 66390D[CD560000]    <1> 		cmp [lastmouseposition + 2], cx
  9666 00007B21 0F8249030000        <1> 		jb near nexticonsel
  9667 00007B27 66391D[CD560000]    <1> 		cmp [lastmouseposition + 2], bx
  9668 00007B2E 0F873C030000        <1> 		ja near nexticonsel
  9669 00007B34 668B460A            <1> 		mov ax, [esi + 10]
  9670 00007B38 2410                <1> 		and al, 00010000b
  9671 00007B3A 3C10                <1> 		cmp al, 00010000b
  9672 00007B3C 7448                <1> 		je nodragicon
  9673 00007B3E 8935[BF790000]      <1> 		mov [dragging], esi
  9674 00007B44 66D1E2              <1> 		shl dx, 1
  9675 00007B47 662B15[CB560000]    <1> 		sub dx, [lastmouseposition]
  9676 00007B4E 660315[CF560000]    <1> 		add dx, [mousecursorposition]
  9677 00007B55 66D1EA              <1> 		shr dx, 1
  9678 00007B58 66030D[D1560000]    <1> 		add cx, [mousecursorposition + 2]
  9679 00007B5F 662B0D[CD560000]    <1> 		sub cx, [lastmouseposition + 2]
  9680 00007B66 663B15[DC540000]    <1> 		cmp dx, [resolutionx2]
  9681 00007B6D 7607                <1> 		jbe chkyresdrgicn
  9682 00007B6F 668B15[CF560000]    <1> 		mov dx, [mousecursorposition]
  9683                              <1> 	chkyresdrgicn:
  9684 00007B76 663B0D[F0530000]    <1> 		cmp cx, [resolutiony]
  9685 00007B7D 7607                <1> 		jbe nodragicon
  9686 00007B7F 668B0D[D1560000]    <1> 		mov cx, [mousecursorposition + 2]
  9687                              <1> 	nodragicon:
  9688 00007B86 66814E0A0100        <1> 		or word [esi + 10], 1
  9689 00007B8C 8B5E0C              <1> 		mov ebx, [esi + 12]
  9690 00007B8F 668B460A            <1> 		mov ax, [esi + 10]
  9691 00007B93 8B7602              <1> 		mov esi, [esi + 2]
  9692 00007B96 C705[18820000]0000- <1> 		mov dword [codepointer], 0
  9693 00007B9E 0000                <1>
  9694 00007BA0 E86DEEFFFF          <1> 		call showicon
  9695 00007BA5 E9DF020000          <1> 		jmp doneiconsel
  9696                              <1> 	unselecticon:
  9697 00007BAA 6681660AFEFF        <1> 		and word [esi + 10], 0xFFFE
  9698 00007BB0 8B5E0C              <1> 		mov ebx, [esi + 12]
  9699 00007BB3 668B460A            <1> 		mov ax, [esi + 10]
  9700 00007BB7 8B7602              <1> 		mov esi, [esi + 2]
  9701 00007BBA 891D[18820000]      <1> 		mov [codepointer], ebx
  9702 00007BC0 E84DEEFFFF          <1> 		call showicon
  9703 00007BC5 E9BF020000          <1> 		jmp doneiconsel
  9704                              <1> 	textselected:
  9705 00007BCA 8B5E02              <1> 		mov ebx, [esi + 2]
  9706 00007BCD 668B5606            <1> 		mov dx, [esi + 6]
  9707 00007BD1 6689D0              <1> 		mov ax, dx
  9708 00007BD4 668B4E08            <1> 		mov cx, [esi + 8]
  9709                              <1> 	lengthtesttext:
  9710 00007BD8 803B00              <1> 		cmp byte [ebx], 0
  9711 00007BDB 7407                <1> 		je donetesttextlength
  9712 00007BDD 43                  <1> 		inc ebx
  9713 00007BDE 66051000            <1> 		add ax, 16
  9714 00007BE2 EBF4                <1> 		jmp lengthtesttext
  9715                              <1> 	donetesttextlength:
  9716 00007BE4 6689CB              <1> 		mov bx, cx
  9717 00007BE7 6681C30F00          <1> 		add bx, 15
  9718 00007BEC 813D[BF790000]0100- <1> 		cmp dword [dragging], 1
  9719 00007BF4 0000                <1>
  9720 00007BF6 7468                <1> 		je dragtext
  9721 00007BF8 813D[BF790000]0000- <1> 		cmp dword [dragging], 0
  9722 00007C00 0000                <1>
  9723 00007C02 7411                <1> 		je nodragtextcheck
  9724 00007C04 3935[BF790000]      <1> 		cmp dword [dragging], esi
  9725 00007C0A 0F8560020000        <1> 		jne near nexticonsel
  9726 00007C10 E94B000000          <1> 		jmp dragtext
  9727                              <1> 	nodragtextcheck:
  9728 00007C15 663915[CF560000]    <1> 		cmp [mousecursorposition], dx
  9729 00007C1C 0F824E020000        <1> 		jb near nexticonsel
  9730 00007C22 663905[CF560000]    <1> 		cmp [mousecursorposition], ax
  9731 00007C29 0F8741020000        <1> 		ja near nexticonsel
  9732 00007C2F 66390D[D1560000]    <1> 		cmp [mousecursorposition + 2], cx
  9733 00007C36 0F8234020000        <1> 		jb near nexticonsel
  9734 00007C3C 66391D[D1560000]    <1> 		cmp [mousecursorposition + 2], bx
  9735 00007C43 0F8727020000        <1> 		ja near nexticonsel
  9736 00007C49 668B460A            <1> 		mov ax, [esi + 10]
  9737 00007C4D 66250100            <1> 		and ax, 1
  9738 00007C51 663D0100            <1> 		cmp ax, 1
  9739 00007C55 0F84AB000000        <1> 		je near unselecttext
  9740 00007C5B E986000000          <1> 		jmp nodragtext
  9741                              <1> 	dragtext:
  9742 00007C60 663915[CB560000]    <1> 		cmp [lastmouseposition], dx
  9743 00007C67 0F8203020000        <1> 		jb near nexticonsel
  9744 00007C6D 663905[CB560000]    <1> 		cmp [lastmouseposition], ax
  9745 00007C74 0F87F6010000        <1> 		ja near nexticonsel
  9746 00007C7A 66390D[CD560000]    <1> 		cmp [lastmouseposition + 2], cx
  9747 00007C81 0F82E9010000        <1> 		jb near nexticonsel
  9748 00007C87 66391D[CD560000]    <1> 		cmp [lastmouseposition + 2], bx
  9749 00007C8E 0F87DC010000        <1> 		ja near nexticonsel
  9750 00007C94 668B460A            <1> 		mov ax, [esi + 10]
  9751 00007C98 2410                <1> 		and al, 00010000b
  9752 00007C9A 663D1000            <1> 		cmp ax, 00010000b
  9753 00007C9E 0F8442000000        <1> 		je near nodragtext
  9754 00007CA4 8935[BF790000]      <1> 		mov [dragging], esi
  9755 00007CAA 662B15[CB560000]    <1> 		sub dx, [lastmouseposition]
  9756 00007CB1 660315[CF560000]    <1> 		add dx, [mousecursorposition]
  9757 00007CB8 66030D[D1560000]    <1> 		add cx, [mousecursorposition + 2]
  9758 00007CBF 662B0D[CD560000]    <1> 		sub cx, [lastmouseposition + 2]
  9759 00007CC6 663B15[DC540000]    <1> 		cmp dx, [resolutionx2]
  9760 00007CCD 7607                <1> 		jbe chkyresdrgtxt
  9761 00007CCF 668B15[CF560000]    <1> 		mov dx, [mousecursorposition]
  9762                              <1> 	chkyresdrgtxt:
  9763 00007CD6 663B0D[F0530000]    <1> 		cmp cx, [resolutiony]
  9764 00007CDD 7607                <1> 		jbe nodragtext
  9765 00007CDF 668B0D[D1560000]    <1> 		mov cx, [mousecursorposition + 2]
  9766                              <1> 	nodragtext:
  9767 00007CE6 66814E0A0100        <1> 		or word [esi + 10], 1
  9768 00007CEC 8B5E0C              <1> 		mov ebx, [esi + 12]
  9769 00007CEF 891D[18820000]      <1> 		mov [codepointer], ebx
  9770 00007CF5 668B460A            <1> 		mov ax, [esi + 10]
  9771 00007CF9 8B7602              <1> 		mov esi, [esi + 2]
  9772 00007CFC E814F5FFFF          <1> 		call showstring
  9773 00007D01 E983010000          <1> 		jmp doneiconsel
  9774                              <1> 	unselecttext:
  9775 00007D06 6681660AFEFF        <1> 		and word [esi + 10], 0xFFFE
  9776 00007D0C 8B5E0C              <1> 		mov ebx, [esi + 12]
  9777 00007D0F 668B460A            <1> 		mov ax, [esi + 10]
  9778 00007D13 8B7602              <1> 		mov esi, [esi + 2]
  9779 00007D16 C705[18820000]0000- <1> 		mov dword [codepointer], 0
  9780 00007D1E 0000                <1>
  9781 00007D20 E8F0F4FFFF          <1> 		call showstring
  9782 00007D25 E95F010000          <1> 		jmp doneiconsel
  9783                              <1> windowselect:
  9784 00007D2A 8B7E02              <1> 		mov edi, [esi + 2]
  9785 00007D2D 668B5606            <1> 		mov dx, [esi + 6]
  9786 00007D31 6689D0              <1> 		mov ax, dx
  9787 00007D34 668B4E08            <1> 		mov cx, [esi + 8]
  9788 00007D38 6689CB              <1> 		mov bx, cx
  9789 00007D3B 6681C31000          <1> 		add bx, 16
  9790 00007D40 813D[BF790000]0100- <1> 		cmp dword [dragging], 1
  9791 00007D48 0000                <1>
  9792 00007D4A 746D                <1> 		je dragwin
  9793 00007D4C 813D[BF790000]0000- <1> 		cmp dword [dragging], 0
  9794 00007D54 0000                <1>
  9795 00007D56 7411                <1> 		je nodragwincheck
  9796 00007D58 3935[BF790000]      <1> 		cmp dword [dragging], esi
  9797 00007D5E 0F850C010000        <1> 		jne near nexticonsel
  9798 00007D64 E950000000          <1> 		jmp dragwin
  9799                              <1> 	nodragwincheck:
  9800 00007D69 663905[CF560000]    <1> 		cmp [mousecursorposition], ax
  9801 00007D70 0F82FA000000        <1> 		jb near nexticonsel
  9802 00007D76 660307              <1> 		add ax, [edi]
  9803 00007D79 660307              <1> 		add ax, [edi]
  9804 00007D7C 663905[CF560000]    <1> 		cmp [mousecursorposition], ax
  9805 00007D83 0F87E7000000        <1> 		ja near nexticonsel
  9806 00007D89 66390D[D1560000]    <1> 		cmp [mousecursorposition + 2], cx
  9807 00007D90 0F82DA000000        <1> 		jb near nexticonsel
  9808 00007D96 66391D[D1560000]    <1> 		cmp [mousecursorposition + 2], bx
  9809 00007D9D 0F87CD000000        <1> 		ja near nexticonsel
  9810 00007DA3 662D1400            <1> 		sub ax, 20
  9811 00007DA7 663905[CF560000]    <1> 		cmp [mousecursorposition], ax
  9812 00007DAE 0F879C000000        <1> 		ja near killwin
  9813 00007DB4 E983000000          <1> 		jmp nodragwin
  9814                              <1> 	dragwin:
  9815 00007DB9 C605[147F0000]01    <1> 		mov byte [windrag], 1
  9816 00007DC0 663905[CB560000]    <1> 		cmp [lastmouseposition], ax
  9817 00007DC7 0F82A3000000        <1> 		jb near nexticonsel
  9818 00007DCD 660307              <1> 		add ax, [edi]
  9819 00007DD0 660307              <1> 		add ax, [edi]
  9820 00007DD3 663905[CB560000]    <1> 		cmp [lastmouseposition], ax
  9821 00007DDA 0F8790000000        <1> 		ja near nexticonsel
  9822 00007DE0 66390D[CD560000]    <1> 		cmp [lastmouseposition + 2], cx
  9823 00007DE7 0F8283000000        <1> 		jb near nexticonsel
  9824 00007DED 66391D[CD560000]    <1> 		cmp [lastmouseposition + 2], bx
  9825 00007DF4 0F8776000000        <1> 		ja near nexticonsel
  9826 00007DFA 8935[BF790000]      <1> 		mov [dragging], esi
  9827 00007E00 662B15[CB560000]    <1> 		sub dx, [lastmouseposition]
  9828 00007E07 660315[CF560000]    <1> 		add dx, [mousecursorposition]
  9829 00007E0E 66030D[D1560000]    <1> 		add cx, [mousecursorposition + 2]
  9830 00007E15 662B0D[CD560000]    <1> 		sub cx, [lastmouseposition + 2]
  9831 00007E1C 663B15[DC540000]    <1> 		cmp dx, [resolutionx2]
  9832 00007E23 7607                <1> 		jbe chkyresdrgwin
  9833 00007E25 668B15[CF560000]    <1> 		mov dx, [mousecursorposition]
  9834                              <1> 	chkyresdrgwin:
  9835 00007E2C 663B0D[F0530000]    <1> 		cmp cx, [resolutiony]
  9836 00007E33 7607                <1> 		jbe nodragwin
  9837 00007E35 668B0D[D1560000]    <1> 		mov cx, [mousecursorposition + 2]
  9838                              <1> 	nodragwin:
  9839 00007E3C 8B5E0C              <1> 		mov ebx, [esi + 12]
  9840 00007E3F 668B460A            <1> 		mov ax, [esi + 10]
  9841 00007E43 8B7602              <1> 		mov esi, [esi + 2]
  9842 00007E46 E833F6FFFF          <1> 		call showwindow
  9843 00007E4B E939000000          <1> 		jmp doneiconsel
  9844                              <1> 	killwin:
  9845 00007E50 66C7060000          <1> 		mov word [esi], 0
  9846 00007E55 C605[37220000]00    <1> 		mov byte [termguion], 0
  9847 00007E5C E8B2EDFFFF          <1> 		call guiclear
  9848 00007E61 E832EEFFFF          <1> 		call reloadallgraphics
  9849 00007E66 E95BE8FFFF          <1> 		jmp guistart
  9850 00007E6B E93A000000          <1> 		jmp doneiconsel2
  9851                              <1> 	nexticonsel:
  9852 00007E70 6681660AFEFF        <1> 		and word [esi + 10], 0xFFFE
  9853 00007E76 81C610000000        <1> 		add esi, 16
  9854 00007E7C 81FE[2BC80000]      <1> 		cmp esi, graphicstableend
  9855 00007E82 7305                <1> 		jae doneiconsel
  9856 00007E84 E9B5FBFFFF          <1> 		jmp clicon2
  9857                              <1> 	doneiconsel:
  9858 00007E89 813D[BF790000]0100- <1> 		cmp dword [dragging], 1
  9859 00007E91 0000                <1>
  9860 00007E93 7315                <1> 		jae doneiconsel2
  9861 00007E95 813D[18820000]0000- <1> 		cmp dword [codepointer], 0
  9862 00007E9D 0000                <1>
  9863 00007E9F 7409                <1> 		je doneiconsel2
  9864 00007EA1 8B1D[18820000]      <1> 		mov ebx, [codepointer]
  9865 00007EA7 FFD3                <1> 		call ebx
  9866 00007EA9 C3                  <1> 		ret
  9867                              <1> 	doneiconsel2:
  9868 00007EAA A0[E0570000]        <1> 		mov al, [LBUTTON]
  9869 00007EAF A2[BD790000]        <1> 		mov [pLBUTTON], al
  9870 00007EB4 A0[E1570000]        <1> 		mov al, [RBUTTON]
  9871 00007EB9 A2[BE790000]        <1> 		mov [pRBUTTON], al
  9872 00007EBE 66813D[BF790000]01- <1> 		cmp word [dragging], 1
  9873 00007EC6 00                  <1>
  9874 00007EC7 0F8613000000        <1> 		jbe near noreloadgraphicsclick
  9875 00007ECD 803D[147F0000]01    <1> 		cmp byte [windrag], 1
  9876 00007ED4 7405                <1> 		je noclearcursorcl
  9877 00007ED6 E8D8E9FFFF          <1> 		call clearmousecursor
  9878                              <1> noclearcursorcl:
  9879 00007EDB E8B8EDFFFF          <1> 		call reloadallgraphics
  9880                              <1> noreloadgraphicsclick:
  9881 00007EE0 31C9                <1> 		xor ecx, ecx
  9882 00007EE2 31D2                <1> 		xor edx, edx
  9883 00007EE4 30E4                <1> 		xor ah, ah
  9884 00007EE6 8825[147F0000]      <1> 		mov [windrag], ah
  9885 00007EEC B0FE                <1> 		mov al, 254
  9886 00007EEE 668B15[CF560000]    <1> 		mov dx, [mousecursorposition]
  9887 00007EF5 668B0D[D1560000]    <1> 		mov cx, [mousecursorposition + 2]
  9888 00007EFC 66BBE738            <1> 		mov bx, 0011100011100111b
  9889 00007F00 C605[B9790000]01    <1> 		mov byte [showcursorfonton], 1
  9890 00007F07 E85BF3FFFF          <1> 		call showfontvesa
  9891 00007F0C C605[B9790000]00    <1> 		mov byte [showcursorfonton], 0
  9892 00007F13 C3                  <1> 		ret
  9893 00007F14 00                  <1> windrag db 0
  9894 00007F15 00000000            <1> lastdrag dw 0,0
  9895 00007F19 00000000            <1> grpctblpos dw 0,0
  9896                              <1> 
  9897                              <1> 
  9898                              <1> 
  9899 00007F1D 00<rept>            <1> grphbuf times 16 db 0
  9900                              <1> 	graphicsadd:
  9901 00007F2D BF[2BC60000]        <1> 		mov edi, graphicstable
  9902                              <1> 	shwgrph1:
  9903 00007F32 397702              <1> 		cmp dword [edi + 2], esi
  9904 00007F35 7414                <1> 		je showgraphicsreplace2
  9905 00007F37 81C710000000        <1> 		add edi, 16
  9906 00007F3D 81FF[2BC80000]      <1> 		cmp edi, graphicstableend
  9907 00007F43 0F834F020000        <1> 		jae near showgraphicsnew
  9908 00007F49 EBE7                <1> 		jmp shwgrph1
  9909                              <1> 	showgraphicsreplace2:
  9910 00007F4B 8935[1F7F0000]      <1> 		mov [grphbuf + 2], esi
  9911 00007F51 668915[237F0000]    <1> 		mov [grphbuf + 6], dx
  9912 00007F58 66890D[257F0000]    <1> 		mov [grphbuf + 8], cx
  9913 00007F5F 891D[297F0000]      <1> 		mov [grphbuf + 12], ebx
  9914 00007F65 30FF                <1> 		xor bh, bh
  9915 00007F67 88E3                <1> 		mov bl, ah
  9916 00007F69 30E4                <1> 		xor ah, ah
  9917 00007F6B 66A3[277F0000]      <1> 		mov [grphbuf + 10], ax	
  9918 00007F71 66891D[1D7F0000]    <1> 		mov [grphbuf], bx
  9919 00007F78 66A1[1D7F0000]      <1> 		mov ax, [grphbuf]
  9920 00007F7E 663D0100            <1> 		cmp ax, 1
  9921 00007F82 0F8419000000        <1> 		je near replaceicon
  9922 00007F88 663D0200            <1> 		cmp ax, 2
  9923 00007F8C 0F8493000000        <1> 		je near replacestring
  9924 00007F92 663D0300            <1> 		cmp ax, 3
  9925 00007F96 0F840F010000        <1> 		je near replacewindow
  9926 00007F9C E9D4010000          <1> 		jmp showgraphicsreplace
  9927                              <1> 	replaceicon:
  9928 00007FA1 893D[C3790000]      <1> 		mov [lastpos], edi
  9929 00007FA7 8935[C7790000]      <1> 		mov [lastpos + 4], esi
  9930 00007FAD 8B7702              <1> 		mov esi, [edi + 2]
  9931 00007FB0 668B5F0C            <1> 		mov bx, [edi + 12]
  9932 00007FB4 668B5706            <1> 		mov dx, [edi + 6]
  9933 00007FB8 668B4F08            <1> 		mov cx, [edi + 8]
  9934 00007FBC 668B06              <1> 		mov ax, [esi]
  9935 00007FBF 66A3[CB790000]      <1> 		mov [colorbuf], ax
  9936 00007FC5 66A1[946C0000]      <1> 		mov ax, [background]
  9937 00007FCB 668906              <1> 		mov [esi], ax
  9938 00007FCE 8B5F0C              <1> 		mov ebx, [edi + 12]
  9939 00007FD1 668B470A            <1> 		mov ax, [edi + 10]
  9940 00007FD5 2401                <1> 		and al, 1
  9941 00007FD7 A2[1C820000]        <1> 		mov [iconselected], al
  9942 00007FDC 668B470A            <1> 		mov ax, [edi + 10]
  9943 00007FE0 E840EAFFFF          <1> 		call showicon2
  9944 00007FE5 8B3D[C3790000]      <1> 		mov edi, [lastpos]
  9945 00007FEB 8B7702              <1> 		mov esi, [edi + 2]
  9946 00007FEE 66A1[CB790000]      <1> 		mov ax, [colorbuf]
  9947 00007FF4 668906              <1> 		mov [esi], ax
  9948 00007FF7 8B35[C7790000]      <1> 		mov esi, [lastpos + 4]
  9949 00007FFD 668B15[237F0000]    <1> 		mov dx, [grphbuf + 6]
  9950 00008004 668B0D[257F0000]    <1> 		mov cx, [grphbuf + 8]
  9951 0000800B 668B1D[1D7F0000]    <1> 		mov bx, [grphbuf]
  9952 00008012 66A1[277F0000]      <1> 		mov ax, [grphbuf + 10]
  9953 00008018 88DC                <1> 		mov ah, bl
  9954 0000801A 8B1D[297F0000]      <1> 		mov ebx, [grphbuf + 12]
  9955 00008020 E950010000          <1> 		jmp showgraphicsreplace
  9956                              <1> 	replacestring:
  9957 00008025 893D[C3790000]      <1> 		mov [lastpos], edi
  9958 0000802B 8935[C7790000]      <1> 		mov [lastpos + 4], esi
  9959 00008031 8B5F0C              <1> 		mov ebx, [edi + 12]
  9960 00008034 8B7702              <1> 		mov esi, [edi + 2]
  9961 00008037 668B5706            <1> 		mov dx, [edi + 6]
  9962 0000803B 668B4F08            <1> 		mov cx, [edi + 8]
  9963 0000803F 66A1[56720000]      <1> 		mov ax, [colorfont2]
  9964 00008045 66A3[CB790000]      <1> 		mov [colorbuf], ax
  9965 0000804B 66A1[946C0000]      <1> 		mov ax, [background]
  9966 00008051 66A3[56720000]      <1> 		mov [colorfont2], ax		
  9967 00008057 8B5F0C              <1> 		mov ebx, [edi + 12]
  9968 0000805A 668B470A            <1> 		mov ax, [edi + 10]
  9969 0000805E 2401                <1> 		and al, 1
  9970 00008060 A2[BB790000]        <1> 		mov [mouseselecton], al
  9971 00008065 668B470A            <1> 		mov ax, [edi + 10]
  9972 00008069 E8BAF1FFFF          <1> 		call showstring2
  9973 0000806E 66A1[CB790000]      <1> 		mov ax, [colorbuf]
  9974 00008074 66A3[56720000]      <1> 		mov [colorfont2], ax
  9975 0000807A 8B3D[C3790000]      <1> 		mov edi, [lastpos]
  9976 00008080 8B7702              <1> 		mov esi, [edi + 2]
  9977 00008083 668B15[237F0000]    <1> 		mov dx, [grphbuf + 6]
  9978 0000808A 668B0D[257F0000]    <1> 		mov cx, [grphbuf + 8]
  9979 00008091 668B1D[1D7F0000]    <1> 		mov bx, [grphbuf]
  9980 00008098 66A1[277F0000]      <1> 		mov ax, [grphbuf + 10]
  9981 0000809E 88DC                <1> 		mov ah, bl
  9982 000080A0 8B1D[297F0000]      <1> 		mov ebx, [grphbuf + 12]
  9983 000080A6 E9CA000000          <1> 		jmp showgraphicsreplace
  9984                              <1> 	replacewindow:
  9985 000080AB 893D[C3790000]      <1> 		mov [lastpos], edi
  9986 000080B1 8935[C7790000]      <1> 		mov [lastpos + 4], esi
  9987 000080B7 8B7702              <1> 		mov esi, [edi + 2]
  9988 000080BA 8B3D[68740000]      <1> 		mov edi, [windowbufloc]
  9989 000080C0 31D2                <1> 		xor edx, edx
  9990 000080C2 668B15[DC540000]    <1> 		mov dx, [resolutionx2]
  9991 000080C9 C1E204              <1> 		shl edx, 4
  9992 000080CC 29D7                <1> 		sub edi, edx
  9993 000080CE 31D2                <1> 		xor edx, edx
  9994 000080D0 668B16              <1> 		mov dx, [esi]
  9995 000080D3 660316              <1> 		add dx, [esi]
  9996 000080D6 668B4E02            <1> 		mov cx, [esi + 2]
  9997 000080DA 6681C11000          <1> 		add cx, 16
  9998 000080DF 66A1[946C0000]      <1> 		mov ax, [background]
  9999                              <1> 	clearwindow:
 10000                              <1> 		%ifdef gui.background
 10001 000080E5 813D[666C0000]0000- <1> 			cmp dword [backgroundimage], 0
 10002 000080ED 0000                <1>
 10003 000080EF 7419                <1> 			je .noback
 10004 000080F1 56                  <1> 			push esi
 10005 000080F2 8B35[666C0000]      <1> 			mov esi, [backgroundimage]
 10006 000080F8 2B3D[04540000]      <1> 			sub edi, [physbaseptr]
 10007 000080FE 01FE                <1> 			add esi, edi
 10008 00008100 033D[04540000]      <1> 			add edi, [physbaseptr]
 10009 00008106 668B06              <1> 			mov ax, [esi]
 10010 00008109 5E                  <1> 			pop esi
 10011                              <1> 		.noback:
 10012                              <1> 		%endif
 10013 0000810A 668907              <1> 		mov [edi], ax
 10014 0000810D 81C702000000        <1> 		add edi, 2
 10015 00008113 81EA02000000        <1> 		sub edx, 2
 10016 00008119 81FA00000000        <1> 		cmp edx, 0
 10017 0000811F 75C4                <1> 		jne clearwindow
 10018 00008121 6649                <1> 		dec cx
 10019 00008123 668B15[DC540000]    <1> 		mov dx, [resolutionx2]
 10020 0000812A 662B16              <1> 		sub dx, [esi]
 10021 0000812D 662B16              <1> 		sub dx, [esi]
 10022 00008130 01D7                <1> 		add edi, edx
 10023 00008132 668B16              <1> 		mov dx, [esi]
 10024 00008135 660316              <1> 		add dx, [esi]
 10025 00008138 6681F90000          <1> 		cmp cx, 0
 10026 0000813D 75A6                <1> 		jne clearwindow
 10027 0000813F C605[38220000]00    <1> 		mov byte [termcopyon], 0
 10028 00008146 8B3D[C3790000]      <1> 		mov edi, [lastpos]
 10029 0000814C 8B35[1F7F0000]      <1> 		mov esi, [grphbuf + 2]
 10030 00008152 668B15[237F0000]    <1> 		mov dx, [grphbuf + 6]
 10031 00008159 668B0D[257F0000]    <1> 		mov cx, [grphbuf + 8]
 10032 00008160 668B1D[1D7F0000]    <1> 		mov bx, [grphbuf]
 10033 00008167 66A1[277F0000]      <1> 		mov ax, [grphbuf + 10]
 10034 0000816D 88DC                <1> 		mov ah, bl
 10035 0000816F 8B1D[297F0000]      <1> 		mov ebx, [grphbuf + 12]
 10036                              <1> 	showgraphicsreplace:
 10037 00008175 897702              <1> 		mov [edi + 2], esi
 10038 00008178 66895706            <1> 		mov [edi + 6], dx
 10039 0000817C 66894F08            <1> 		mov [edi + 8], cx
 10040 00008180 895F0C              <1> 		mov [edi + 12], ebx
 10041 00008183 30FF                <1> 		xor bh, bh
 10042 00008185 88E3                <1> 		mov bl, ah
 10043 00008187 30E4                <1> 		xor ah, ah
 10044 00008189 6689470A            <1> 		mov [edi + 10], ax
 10045 0000818D 66891F              <1> 		mov [edi], bx
 10046 00008190 8B5F0C              <1> 		mov ebx, [edi + 12]
 10047 00008193 668B470A            <1> 		mov ax, [edi + 10]
 10048 00008197 C3                  <1> 		ret
 10049                              <1> 	showgraphicsnew:
 10050 00008198 BF[2BC60000]        <1> 		mov edi, graphicstable
 10051                              <1> 	shwgrph2:
 10052 0000819D 66813F0000          <1> 		cmp word [edi], 0
 10053 000081A2 74D1                <1> 		je showgraphicsreplace
 10054 000081A4 81C710000000        <1> 		add edi, 16
 10055 000081AA 81FF[2BC80000]      <1> 		cmp edi, graphicstableend
 10056 000081B0 72EB                <1> 		jb shwgrph2
 10057                              <1> 	showgraphicsdone:
 10058 000081B2 C3                  <1> 		ret
 10059                              <1> 	
 10060                              <1> putpixel: ;color in si, point is (dx,cx)
 10061                              <1> 		;destroys edi, ebx, eax
 10062 000081B3 6650                <1> 	push ax
 10063 000081B5 6653                <1> 	push bx
 10064 000081B7 31C0                <1> 	xor eax, eax
 10065 000081B9 31DB                <1> 	xor ebx, ebx
 10066 000081BB 31FF                <1> 	xor edi, edi
 10067 000081BD 668B1D[F0530000]    <1> 	mov bx, [resolutiony]
 10068 000081C4 66A1[EE530000]      <1> 	mov ax, [resolutionx]
 10069 000081CA 6639C2              <1> 	cmp dx, ax
 10070 000081CD 7720                <1> 	ja .doneput
 10071 000081CF 66D1E0              <1> 	shl ax, 1
 10072 000081D2 6639D9              <1> 	cmp cx, bx
 10073 000081D5 7718                <1> 	ja .doneput
 10074 000081D7 6689CB              <1> 	mov bx, cx
 10075 000081DA 52                  <1> 	push edx
 10076 000081DB F7E3                <1> 	mul ebx
 10077 000081DD 5A                  <1> 	pop edx
 10078 000081DE 6601D7              <1> 	add di, dx
 10079 000081E1 6601D7              <1> 	add di, dx
 10080 000081E4 01C7                <1> 	add edi, eax
 10081 000081E6 033D[04540000]      <1> 	add edi, [physbaseptr]
 10082 000081EC 668937              <1> 	mov [edi], si
 10083                              <1> .doneput:
 10084 000081EF 665B                <1> 	pop bx
 10085 000081F1 6658                <1> 	pop ax
 10086 000081F3 C3                  <1> 	ret
 10087                              <1> 	
 10088                              <1> getpixelmem:	;pixel in (dx, cx), outputs memory location in edi
 10089 000081F4 31FF                <1> 	xor edi, edi
 10090 000081F6 31C0                <1> 	xor eax, eax
 10091 000081F8 31DB                <1> 	xor ebx, ebx
 10092 000081FA 668B1D[DC540000]    <1> 	mov bx, [resolutionx2]
 10093 00008201 6689D7              <1> 	mov di, dx
 10094 00008204 6601D7              <1> 	add di, dx
 10095 00008207 6689C8              <1> 	mov ax, cx
 10096 0000820A F7E3                <1> 	mul ebx
 10097 0000820C 01C7                <1> 	add edi, eax
 10098 0000820E 033D[04540000]      <1> 	add edi, [physbaseptr]
 10099 00008214 C3                  <1> 	ret
 10100                              <1> 
 10101 00008215 00                  <1> 	mouseon db 0
 10102 00008216 0000                <1> 	icon dw 0	;pointer to icon
 10103 00008218 00000000            <1> 	codepointer dd 0 ;pointer to code
 10104 0000821C 00                  <1> 	iconselected db 0
 10105                                  %endif
 10106                                  %ifdef network.included
 10107                                  	%include "source/network.asm"
 10108                              <1> sendpacket: ;packet start in edi, end in esi
 10109                              <1> 	%ifdef rtl8139.included
 10110                              <1> 		push edi
 10111                              <1> 		push esi
 10112                              <1> 		call rtl8139.sendpacket
 10113                              <1> 		pop esi
 10114                              <1> 		pop edi
 10115                              <1> 		cmp ebx, 0
 10116                              <1> 		jne .error
 10117                              <1> 		ret
 10118                              <1> 	%endif
 10119                              <1> .error:
 10120                              <1> 	%ifdef ne2000.included
 10121 0000821D E8BCDAFFFF          <1> 		call ne2000.sendpacket
 10122                              <1> 	%endif
 10123 00008222 C3                  <1> 	ret
 10124                              <1> 
 10125                              <1> getchecksum: ;start in edi, end in esi, checksum put in ecx
 10126 00008223 31C0                <1> 	xor eax, eax
 10127 00008225 31DB                <1> 	xor ebx, ebx
 10128 00008227 31C9                <1> 	xor ecx, ecx
 10129                              <1> .lp:
 10130 00008229 8A07                <1> 	mov al, [edi]
 10131 0000822B 8A6701              <1> 	mov ah, [edi + 1]
 10132 0000822E 01C3                <1> 	add ebx, eax
 10133 00008230 81C702000000        <1> 	add edi, 2
 10134 00008236 39F7                <1> 	cmp edi, esi
 10135 00008238 72EF                <1> 	jb .lp
 10136 0000823A 66B9FFFF            <1> 	mov cx, 0xFFFF
 10137 0000823E 6689D8              <1> 	mov ax, bx
 10138 00008241 C1EB10              <1> 	shr ebx, 16
 10139 00008244 6601D8              <1> 	add ax, bx
 10140 00008247 6629C1              <1> 	sub cx, ax
 10141 0000824A C3                  <1> 	ret
 10142                              <1> 	
 10143                              <1> strtoip:	;string in esi with format X.X.X.X converted to number in ecx
 10144 0000824B 31DB                <1> 	xor ebx, ebx
 10145 0000824D 31C9                <1> 	xor ecx, ecx
 10146 0000824F 31D2                <1> 	xor edx, edx
 10147                              <1> .mlp:
 10148 00008251 89F7                <1> 	mov edi, esi
 10149 00008253 4F                  <1> 	dec edi
 10150                              <1> .lp:
 10151 00008254 47                  <1> 	inc edi
 10152 00008255 8A07                <1> 	mov al, [edi]
 10153 00008257 3C20                <1> 	cmp al, " "
 10154 00008259 7408                <1> 	je .dnlp
 10155 0000825B 3C00                <1> 	cmp al, 0
 10156 0000825D 7404                <1> 	je .dnlp
 10157 0000825F 3C2E                <1> 	cmp al, "."
 10158 00008261 75F1                <1> 	jne .lp
 10159                              <1> .dnlp:
 10160 00008263 30C0                <1> 	xor al, al
 10161 00008265 8807                <1> 	mov [edi], al
 10162 00008267 53                  <1> 	push ebx
 10163 00008268 56                  <1> 	push esi
 10164 00008269 57                  <1> 	push edi
 10165 0000826A 31FF                <1> 	xor edi, edi
 10166 0000826C E896ADFFFF          <1> 	call cnvrttxt
 10167 00008271 5E                  <1> 	pop esi
 10168 00008272 5F                  <1> 	pop edi ;i intentionally switch them
 10169 00008273 5B                  <1> 	pop ebx
 10170 00008274 46                  <1> 	inc esi
 10171 00008275 BF[8D820000]        <1> 	mov edi, ipstr
 10172 0000827A 880C1F              <1> 	mov [edi + ebx], cl
 10173 0000827D 43                  <1> 	inc ebx
 10174 0000827E 81FB04000000        <1> 	cmp ebx, 4
 10175 00008284 72CB                <1> 	jb .mlp
 10176 00008286 8B0D[8D820000]      <1> 	mov ecx, [ipstr]
 10177 0000828C C3                  <1> 	ret
 10178 0000828D 00000000            <1> ipstr dd 0
 10179                              <1> showip: 	;put the ip address in ecx
 10180 00008291 89C8                <1> 	mov eax, ecx
 10181 00008293 30DB                <1> 	xor bl, bl
 10182                              <1> .lp
 10183 00008295 3C00                <1> 	cmp al, 0
 10184 00008297 750B                <1> 	jne .nozeroprint
 10185 00008299 B030                <1> 	mov al, "0"
 10186 0000829B 50                  <1> 	push eax
 10187 0000829C E8989FFFFF          <1> 	call prcharq
 10188 000082A1 58                  <1> 	pop eax
 10189 000082A2 30C0                <1> 	xor al, al
 10190                              <1> .nozeroprint:
 10191 000082A4 31C9                <1> 	xor ecx, ecx
 10192 000082A6 88C1                <1> 	mov cl, al
 10193 000082A8 E878ACFFFF          <1> 	call showdec
 10194 000082AD C1E808              <1> 	shr eax, 8
 10195 000082B0 FEC3                <1> 	inc bl
 10196 000082B2 80FB04              <1> 	cmp bl, 4
 10197 000082B5 7312                <1> 	jae .done
 10198 000082B7 50                  <1> 	push eax
 10199 000082B8 6653                <1> 	push bx
 10200 000082BA BE[CA820000]        <1> 	mov esi, .dot
 10201 000082BF E83E9AFFFF          <1> 	call print
 10202 000082C4 665B                <1> 	pop bx
 10203 000082C6 58                  <1> 	pop eax
 10204 000082C7 EBCC                <1> 	jmp .lp
 10205                              <1> .done:
 10206 000082C9 C3                  <1> 	ret
 10207 000082CA 082E00              <1> .dot db 8,".",0
 10208                              <1> showmac:	;mac begins in [ecx]
 10209 000082CD BE[1D830000]        <1> 	mov esi, macprint
 10210 000082D2 89CF                <1> 	mov edi, ecx
 10211 000082D4 81C106000000        <1> 	add ecx, 6
 10212                              <1> showmacloop:
 10213 000082DA 8A07                <1> 	mov al, [edi]
 10214 000082DC 8A27                <1> 	mov ah, [edi]
 10215 000082DE C0E804              <1> 	shr al, 4
 10216 000082E1 C0E404              <1> 	shl ah, 4
 10217 000082E4 C0EC04              <1> 	shr ah, 4
 10218 000082E7 0430                <1> 	add al, 48
 10219 000082E9 3C39                <1> 	cmp al, "9"
 10220 000082EB 7606                <1> 	jbe .goodal
 10221 000082ED 2C30                <1> 	sub al, 48
 10222 000082EF 2C0A                <1> 	sub al, 0xA
 10223 000082F1 0441                <1> 	add al, "A"
 10224                              <1> .goodal:
 10225 000082F3 80C430              <1> 	add ah, 48
 10226 000082F6 80FC39              <1> 	cmp ah, "9"
 10227 000082F9 7609                <1> 	jbe .goodah
 10228 000082FB 80EC30              <1> 	sub ah, 48
 10229 000082FE 80EC0A              <1> 	sub ah, 0xA
 10230 00008301 80C441              <1> 	add ah, "A"
 10231                              <1> .goodah:
 10232 00008304 668906              <1> 	mov [esi], ax
 10233 00008307 81C603000000        <1> 	add esi, 3
 10234 0000830D 47                  <1> 	inc edi
 10235 0000830E 39CF                <1> 	cmp edi, ecx
 10236 00008310 72C8                <1> 	jb showmacloop
 10237 00008312 BE[1D830000]        <1> 	mov esi, macprint
 10238 00008317 E8E699FFFF          <1> 	call print
 10239 0000831C C3                  <1> 	ret
 10240                              <1> 	
 10241 0000831D 30303A30303A30303A- <1> macprint db "00:00:00:00:00:00 ",0
 10242 00008326 30303A30303A303020- <1>
 10243 0000832F 00                  <1>
 10244 00008330 00000000            <1> ethernetend dw 0,0
 10245 00008334 C0A80002            <1> sysip db 192,168,0,2
 10246 00008338 000000000000        <1> sysmac	db 0,0,0,0,0,0		;my mac address
 10247                                  %endif
 10248                                      %include "source/data.asm"
 10249 0000833E 626F6F742E736800    <1> 	bootfilename db "boot.sh",0
 10250 00008346 73687573683A2000    <1> 	notfound1 db "shush: ",0
 10251 0000834E 3A206E6F7420666F75- <1> 	notfound2 db  ": not found",10,0
 10252 00008357 6E640A00            <1>
 10253 0000835B 757365726E616D653A- <1> 	userask db "username:",0
 10254 00008364 00                  <1>
 10255 00008365 70617373776F72643A- <1> 	pwdask	db	"password:",0
 10256 0000836E 00                  <1>
 10257 0000836F 40                  <1> 	computer db "@"
 10258                              <1> %ifdef io.serial
 10259                              <1> 	computername	db	"SollerOS.",io.serial," ",0
 10260                              <1> %else
 10261 00008370 536F6C6C65724F5320- <1> 	computername	db	"SollerOS ",0
 10262 00008379 00                  <1>
 10263                              <1> %endif
 10264 0000837A 5D242000            <1> 	endprompt db "]$ ",0
 10265 0000837E 0D                  <1> 	crlf 	db  13
 10266 0000837F 0A00                <1> 	line	db	10,0
 10267                              <1> 	userlst:
 10268 00008381 726F6F7400          <1> 			db "root",0
 10269 00008386 617765736F6D65706F- <1> 			db "awesomepower",0
 10270 0000838F 77657200            <1>
 10271 00008393 7573657200          <1> 			db "user",0
 10272 00008398 70617373776F726400  <1> 			db "password",0
 10273 000083A1 6E00                <1> 			db "n",0	;;abuse for quick entry-a quick double n followed by a double enter will get you in
 10274 000083A3 00                  <1> 			db 0
 10275                              <1> 	userlstend:
 10276                              <1> 	
 10277                              <1> %ifdef io.serial
 10278                              <1> %else
 10279 000083A3 <incbin>            <1> fonts:	incbin "source/precompiled/fonts.pak"
 10280                              <1> fontend:
 10281                              <1> %endif
 10282                              <1> osend:	;this is the end of the operating system's space on disk
 10283                                      %include "build/fileindex.asm"
 10284                              <1> diskfileindex:
 10285 000093A4 617267746573742E65- <1> db "argtest.elf",0
 10286 000093AD 6C6600              <1>
 10287 000093B0 4B000000            <1> dd (f0-$$)/512
 10288 000093B4 06010000            <1> dd (f1-f0)/512
 10289 000093B8 6261636B67726F756E- <1> db "background.bmp",0
 10290 000093C1 642E626D7000        <1>
 10291 000093C7 51010000            <1> dd (f1-$$)/512
 10292 000093CB 01140000            <1> dd (f2-f1)/512
 10293 000093CF 626F6F742E736800    <1> db "boot.sh",0
 10294 000093D7 52150000            <1> dd (f2-$$)/512
 10295 000093DB 01000000            <1> dd (f3-f2)/512
 10296 000093DF 63686172746573742E- <1> db "chartest.elf",0
 10297 000093E8 656C6600            <1>
 10298 000093EC 53150000            <1> dd (f3-$$)/512
 10299 000093F0 26010000            <1> dd (f4-f3)/512
 10300 000093F4 646F73746573742E63- <1> db "dostest.com",0
 10301 000093FD 6F6D00              <1>
 10302 00009400 79160000            <1> dd (f4-$$)/512
 10303 00009404 01000000            <1> dd (f5-f4)/512
 10304 00009408 6578656300          <1> db "exec",0
 10305 0000940D 7A160000            <1> dd (f5-$$)/512
 10306 00009411 01000000            <1> dd (f6-f5)/512
 10307 00009415 66696E616C636F756E- <1> db "finalcount.snd",0
 10308 0000941E 742E736E6400        <1>
 10309 00009424 7B160000            <1> dd (f6-$$)/512
 10310 00009428 01000000            <1> dd (f7-f6)/512
 10311 0000942C 666F726B00          <1> db "fork",0
 10312 00009431 7C160000            <1> dd (f7-$$)/512
 10313 00009435 01000000            <1> dd (f8-f7)/512
 10314 00009439 68656C6C6F776F726C- <1> db "helloworld.elf",0
 10315 00009442 642E656C6600        <1>
 10316 00009448 7D160000            <1> dd (f8-$$)/512
 10317 0000944C D6010000            <1> dd (f9-f8)/512
 10318 00009450 696E7400            <1> db "int",0
 10319 00009454 53180000            <1> dd (f9-$$)/512
 10320 00009458 01000000            <1> dd (f10-f9)/512
 10321 0000945C 6C6F7374776F6F6473- <1> db "lostwoods.snd",0
 10322 00009465 2E736E6400          <1>
 10323 0000946A 54180000            <1> dd (f10-$$)/512
 10324 0000946E 01000000            <1> dd (f11-f10)/512
 10325 00009472 6D6172696F2E736E64- <1> db "mario.snd",0
 10326 0000947B 00                  <1>
 10327 0000947C 55180000            <1> dd (f11-$$)/512
 10328 00009480 01000000            <1> dd (f12-f11)/512
 10329 00009484 736F6C6C65726F732E- <1> db "solleros.bmp",0
 10330 0000948D 626D7000            <1>
 10331 00009491 56180000            <1> dd (f12-$$)/512
 10332 00009495 B0020000            <1> dd (f13-f12)/512
 10333 00009499 736F6C6C65726F732E- <1> db "solleros.txt",0
 10334 000094A2 74787400            <1>
 10335 000094A6 061B0000            <1> dd (f13-$$)/512
 10336 000094AA 01000000            <1> dd (f14-f13)/512
 10337 000094AE 736F6E676F74696D65- <1> db "songotime.snd",0
 10338 000094B7 2E736E6400          <1>
 10339 000094BC 071B0000            <1> dd (f14-$$)/512
 10340 000094C0 01000000            <1> dd (f15-f14)/512
 10341 000094C4 73736500            <1> db "sse",0
 10342 000094C8 081B0000            <1> dd (f15-$$)/512
 10343 000094CC 02000000            <1> dd (f16-f15)/512
 10344 000094D0 737464696F74657374- <1> db "stdiotest.elf",0
 10345 000094D9 2E656C6600          <1>
 10346 000094DE 0A1B0000            <1> dd (f16-$$)/512
 10347 000094E2 27010000            <1> dd (f17-f16)/512
 10348 000094E6 74656C7900          <1> db "tely",0
 10349 000094EB 311C0000            <1> dd (f17-$$)/512
 10350 000094EF 01000000            <1> dd (f18-f17)/512
 10351 000094F3 74696D65746573742E- <1> db "timetest.elf",0
 10352 000094FC 656C6600            <1>
 10353 00009500 321C0000            <1> dd (f18-$$)/512
 10354 00009504 04010000            <1> dd (f19-f18)/512
 10355 00009508 7475746F7269616C2E- <1> db "tutorial.sh",0
 10356 00009511 736800              <1>
 10357 00009514 361D0000            <1> dd (f19-$$)/512
 10358 00009518 03000000            <1> dd (f20-f19)/512
 10359 0000951C 756E667300          <1> db "unfs",0
 10360 00009521 391D0000            <1> dd (f20-$$)/512
 10361 00009525 02000000            <1> dd (f21-f20)/512
 10362 00009529 766963746F72792E77- <1> db "victory.wav",0
 10363 00009532 617600              <1>
 10364 00009535 3B1D0000            <1> dd (f21-$$)/512
 10365 00009539 16000000            <1> dd (f22-f21)/512
 10366 0000953D 5F696D672E62696E00  <1> db "_img.bin",0
 10367 00009546 511D0000            <1> dd (f22-$$)/512
 10368 0000954A D7020000            <1> dd (f23-f22)/512
 10369                              <1> enddiskfileindex:
 10370                              <1> 
 10371                                      %include "source/bss.asm"
 10372 0000954E 90<rept>            <1> align 4, nop
 10373                              <1> bssstart: equ $
 10374                              <1> guion equ bssstart
 10375                              <1> DriveNumber equ guion + 1
 10376                              <1> lbaad equ DriveNumber + 1
 10377                              <1> memlistbuf equ lbaad + 4
 10378                              <1> memlistend equ memlistbuf + 576
 10379                              <1> bsscopy equ memlistend
 10380                              <1> initialstack equ bsscopy
 10381                              <1> stackend equ initialstack + 4000
 10382                              <1> fileindex: equ stackend + 96
 10383                              <1> fileindexend: equ fileindex + 1024
 10384                              <1> previousstack equ fileindexend
 10385                              <1> lastfolderloc equ previousstack + 4
 10386                              <1> currentfolderloc equ lastfolderloc + 4
 10387                              <1> currentfolder equ currentfolderloc + 4
 10388                              <1> currentfolderend equ currentfolder + 512
 10389                              <1> uid equ currentfolderend
 10390                              <1> ranboot equ uid + 4
 10391                              <1> IFON equ ranboot + 1
 10392                              <1> IFTRUE equ IFON + 1
 10393                              <1> BATCHPOS equ IFTRUE + 100
 10394                              <1> BATCHISON equ BATCHPOS + 4
 10395                              <1> LOOPON equ BATCHISON + 1
 10396                              <1> LOOPPOS	equ LOOPON + 1
 10397                              <1> variables: equ LOOPPOS + 4
 10398                              <1> varend: equ variables + 4096
 10399                              <1> buftxt2: equ varend
 10400                              <1> buftxt: equ buftxt2 + 1024
 10401                              <1> buftxtend: equ buftxt + 1024
 10402                              <1> buf2: equ buftxtend
 10403                              <1> numbuf: equ buf2 + 20
 10404                              <1> %ifdef io.serial
 10405                              <1> 	lastcommandpos equ numbuf + 1
 10406                              <1> %else
 10407                              <1> 	%ifdef gui.included
 10408                              <1> 		graphicstable equ numbuf + 1 ;w type, dw datalocation, w locationx, w locationy, w selected, dw code
 10409                              <1> 		graphicstableend equ graphicstable + 200h
 10410                              <1> 		%ifdef gui.background
 10411                              <1> 			backgroundbuffer equ graphicstableend
 10412                              <1> 			backgroundbufferend equ backgroundbuffer + 1280*1026*2
 10413                              <1> 			mousecolorbuf equ backgroundbufferend
 10414                              <1> 		%else
 10415                              <1> 			mousecolorbuf equ graphicstableend ;where the gui under the mouse is stored
 10416                              <1> 		%endif
 10417                              <1> 		mcolorend equ mousecolorbuf + 256
 10418                              <1> 		videobuf equ mcolorend + 1	;1680x1050 pixels in characters
 10419                              <1> 		videobufend	equ videobuf + 210*65*2
 10420                              <1> 		videobuf2 equ videobufend
 10421                              <1> 		videobuf2end equ videobuf2 + 210*65*2
 10422                              <1> 	%else
 10423                              <1> 		videobuf equ numbuf + 1
 10424                              <1> 		videobufend equ videobuf + 80*30*2
 10425                              <1> 		videobuf2 equ videobufend
 10426                              <1> 		videobuf2end equ videobuf2 + 160*64*2
 10427                              <1> 	%endif
 10428                              <1> 	lastcommandpos: equ videobuf2end
 10429                              <1> %endif
 10430                              <1> 	commandbufpos: equ lastcommandpos + 4
 10431                              <1> 	commandlistentries: equ commandbufpos + 4
 10432                              <1> 	commandsentered: equ commandlistentries + 4
 10433                              <1> 	commandbuf: equ commandsentered + 4
 10434                              <1> 	commandbufend: equ commandbuf + 4096 ;this is where kernel space only ends, the rest is for threading
 10435                              <1> %ifdef rtl8139.included
 10436                              <1> 	rbuffstart: equ commandbufend ;for use with networking
 10437                              <1> 	rbuffend equ rbuffstart + 8212
 10438                              <1> %else
 10439                              <1> 	rbuffstart equ commandbufend
 10440                              <1> 	rbuffend equ commandbufend
 10441                              <1> %endif
 10442                              <1> %ifdef threads.included
 10443                              <1> 	threadlist: equ rbuffend ;this buffer will hold the stack locations of all of the threads, up to 2048
 10444                              <1> 	threadlistend: equ threadlist + 1024*4
 10445                              <1> 	stacks:	equ threadlistend ;i use SS now for proper stack management. This makes sure stacks never screw with other memory
 10446                              <1> 	stack1: equ stacks + 1024  ;woah, thats a lot of space for stacks
 10447                              <1> 	bssend equ stack1 + 1024*1024
 10448                              <1> %else
 10449                              <1> 	bssend equ rbuffend
 10450                              <1> %endif
 10451                              <1> dosprogloc equ 0x400000 ;from here on, it is not kernel space so apps can be loaded here.
 10452                                      %include "build/files.asm"
 10453 00009550 00<rept>            <1> align 512,db 0
 10454                              <1> f0:
 10455 00009550 <incbin>            <1> incbin "included/argtest.elf"
 10456 0002A0F2 00<rept>            <1> align 512,db 0
 10457                              <1> f1:
 10458 0002A0F2 <incbin>            <1> incbin "included/background.bmp"
 10459 002AA246 00<rept>            <1> align 512,db 0
 10460                              <1> f2:
 10461 002AA246 <incbin>            <1> incbin "included/boot.sh"
 10462 002AA4C0 00<rept>            <1> align 512,db 0
 10463                              <1> f3:
 10464 002AA4C0 <incbin>            <1> incbin "included/chartest.elf"
 10465 002CF0DB 00<rept>            <1> align 512,db 0
 10466                              <1> f4:
 10467 002CF0DB <incbin>            <1> incbin "included/dostest.com"
 10468 002CF32B 00<rept>            <1> align 512,db 0
 10469                              <1> f5:
 10470 002CF32B <incbin>            <1> incbin "included/exec"
 10471 002CF4E9 00<rept>            <1> align 512,db 0
 10472                              <1> f6:
 10473 002CF4E9 <incbin>            <1> incbin "included/finalcount.snd"
 10474 002CF702 00<rept>            <1> align 512,db 0
 10475                              <1> f7:
 10476 002CF702 <incbin>            <1> incbin "included/fork"
 10477 002CF962 00<rept>            <1> align 512,db 0
 10478                              <1> f8:
 10479 002CF962 <incbin>            <1> incbin "included/helloworld.elf"
 10480 0030A5E3 00<rept>            <1> align 512,db 0
 10481                              <1> f9:
 10482 0030A5E3 <incbin>            <1> incbin "included/int"
 10483 0030A7A9 00<rept>            <1> align 512,db 0
 10484                              <1> f10:
 10485 0030A7A9 <incbin>            <1> incbin "included/lostwoods.snd"
 10486 0030A856 00<rept>            <1> align 512,db 0
 10487                              <1> f11:
 10488 0030A856 <incbin>            <1> incbin "included/mario.snd"
 10489 0030AA3A 00<rept>            <1> align 512,db 0
 10490                              <1> f12:
 10491 0030AA3A <incbin>            <1> incbin "included/solleros.bmp"
 10492 00360BE6 00<rept>            <1> align 512,db 0
 10493                              <1> f13:
 10494 00360BE6 <incbin>            <1> incbin "included/solleros.txt"
 10495 00360D76 00<rept>            <1> align 512,db 0
 10496                              <1> f14:
 10497 00360D76 <incbin>            <1> incbin "included/songotime.snd"
 10498 00360E4A 00<rept>            <1> align 512,db 0
 10499                              <1> f15:
 10500 00360E4A <incbin>            <1> incbin "included/sse"
 10501 003612A8 00<rept>            <1> align 512,db 0
 10502                              <1> f16:
 10503 003612A8 <incbin>            <1> incbin "included/stdiotest.elf"
 10504 00386043 00<rept>            <1> align 512,db 0
 10505                              <1> f17:
 10506 00386043 <incbin>            <1> incbin "included/tely"
 10507 003863C7 00<rept>            <1> align 512,db 0
 10508                              <1> f18:
 10509 003863C7 <incbin>            <1> incbin "included/timetest.elf"
 10510 003A6A3D 00<rept>            <1> align 512,db 0
 10511                              <1> f19:
 10512 003A6A3D <incbin>            <1> incbin "included/tutorial.sh"
 10513 003A7152 00<rept>            <1> align 512,db 0
 10514                              <1> f20:
 10515 003A7152 <incbin>            <1> incbin "included/unfs"
 10516                              <1> align 512,db 0
 10517                              <1> f21:
 10518 003A7152 <incbin>            <1> incbin "included/victory.wav"
 10519 003AA148 00<rept>            <1> align 512,db 0
 10520                              <1> f22:
 10521 003AA148 <incbin>            <1> incbin "included/_img.bin"
 10522                              <1> align 512,db 0
 10523                              <1> f23:
