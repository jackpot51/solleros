     1                                  [map symbols build/kernel.map]
     2                                  %include "config.asm"
     3                              <1> ;These flags are used to configure options as on, put a simicolon in front of it to not configure it
     4                              <1> 
     5                              <1> ;%define gui.included
     6                              <1> ;Turn on the gui
     7                              <1> 
     8                              <1> ;%define gui.alphablending
     9                              <1> ;Make the terminal in the GUI 25% transparent
    10                              <1> 
    11                              <1> ;%define gui.background
    12                              <1> ;Make the GUI have a loadable background
    13                              <1> 
    14                              <1> ;%define gui.time
    15                              <1> ;Show time in top right corner of screen
    16                              <1> 
    17                              <1> ;%define io.serial "1"
    18                              <1> ;Use the specified serial port for input and output instead of the keyboard and screen
    19                              <1> ;If the gui is included this should not be enabled
    20                              <1> 
    21                              <1> ;%define terminal.vsync
    22                              <1> ;Uses the RTC to automatically update the terminal at ~64Hz
    23                              <1> 	;WARNING:
    24                              <1> 	;This may cause problems on systems with non-standard RTC's
    25                              <1> 	;It is therefore recommended that you do not enable it even
    26                              <1> 	;though it gives a large speed improvement for character output
    27                              <1> 
    28                              <1> %define hardware.automatic
    29                              <1> ;Automatically load the sound and network drivers.
    30                              <1> 
    31                              <1> %define threads.included
    32                              <1> ;Include the thread testing stuff-this uses a relatively large amount of memory
    33                              <1> 
    34                              <1> %define exceptions.included
    35                              <1> ;Display debugging information should crashes occur-also uses quite a bit of memory
    36                              <1> 
    37                              <1> ;%define disk.protected
    38                              <1> ;Use protected mode instead of real mode for disk access-this allows for multitasking with disk reads
    39                              <1> 
    40                              <1> %define disk.real
    41                              <1> ;Use real mode for disk access-this gives greater compatibility
    42                              <1> 
    43                              <1> %define sound.included
    44                              <1> ;This includes the sound drivers
    45                              <1> 
    46                              <1> %define network.included
    47                              <1> ;This includes the network stack
    48                              <1> 
    49                              <1> ;%define rtl8169.included
    50                              <1> ;This includes the RTL8169 drivers
    51                              <1> 
    52                              <1> ;%define rtl8139.included
    53                              <1> ;This includes the RTL8139 drivers
    54                              <1> 
    55                              <1> %define ne2000.included
    56                              <1> ;This includes the ne2000 drivers
    57                              <1> 
    58                              <1> ;%define i8254x.included
    59                              <1> ;This includes the Intel 8254x drivers
    60                              <1> 
    61                              <1> ;%define sector.debug
    62                              <1> ;Dump the contents of the first sector of SollerOS
    63                              <1> 
    64                              <1> ;%define dos.compatible
    65                              <1> ;Make the kernel loadable by dos.
    66                              <1> 
    67                              <1> ;%define system.simple
    68                              <1> ;The smallest possible system, overrides all options
    69                              <1> 
    70                              <1> ;FIX DEPENDANCIES
    71                              <1> %ifdef system.simple
    72                              <1> 	%undef dos.compatible	;overides all including dos.compatible
    73                              <1> 	%define UNDEFALL
    74                              <1> %endif
    75                              <1> %ifdef dos.compatible
    76                              <1> 	%define UNDEFALL
    77                              <1> %endif
    78                              <1> %ifdef UNDEFALL
    79                              <1> 	%undef io.serial
    80                              <1> 	%undef disk.real
    81                              <1> 	%undef gui.included
    82                              <1> 	%undef gui.alphablending
    83                              <1> 	%undef gui.background
    84                              <1> 	%undef terminal.vsync
    85                              <1> 	%undef hardware.automatic
    86                              <1> 	%undef threads.included
    87                              <1> 	%undef exceptions.included
    88                              <1> 	%undef disk.protected
    89                              <1> 	%undef sound.included
    90                              <1> 	%undef network.included
    91                              <1> 	%undef rtl8139.included
    92                              <1> 	%undef rtl8169.included
    93                              <1> 	%undef ne2000.included
    94                              <1> 	%undef i8254x.included
    95                              <1> 	%undef sector.debug
    96                              <1> 	%undef UNDEFALL
    97                              <1> %endif
    98                              <1> %ifdef system.simple
    99                              <1> 	%define io.serial "1"
   100                              <1> 	%define disk.real
   101                              <1> %endif
   102                              <1> %ifdef gui.included
   103                              <1> 	%undef io.serial
   104                              <1> %else
   105                              <1> 	%undef gui.alphablending
   106                              <1> 	%undef gui.background
   107                              <1> %endif
   108                              <1> %ifdef network.included
   109                              <1> %else
   110                              <1> 	%undef i8254x.included
   111                              <1> 	%undef ne2000.included
   112                              <1> 	%undef rtl8139.included
   113                              <1> 	%undef rtl8169.included
   114                              <1> %endif
   115                              <1> %ifdef disk.protected
   116                              <1> 	%undef disk.real
   117                              <1> %else
   118                              <1> 	%ifdef disk.real
   119                              <1> 	%else
   120                              <1> 		%define disk.none
   121                              <1> 	%endif
   122                              <1> %endif
   123                                  [ORG 0x100]
   124                                  	%include "source/signature.asm"
   125                              <1> sigjump:
   126 00000000 E90E00              <1> 	jmp signatureend
   127                              <1> signature:
   128 00000003 536F6C6C65724F5320- <1> db "SollerOS ",0 ;Operating system name
   129 0000000C 00                  <1>
   130 0000000D 0F010000            <1> dd 271	;version number
   131                              <1> signatureend:
   132                                  [BITS 16]
   133                                      %include "source/boot.asm"
   134                              <1>     ; MENU.ASM
   135                              <1> boot:
   136 00000011 8CC8                <1> 	mov ax, cs
   137 00000013 8ED8                <1> 	mov ds, ax
   138 00000015 8EC0                <1> 	mov es, ax
   139 00000017 8ED0                <1> 	mov ss, ax
   140 00000019 0F31                <1> 	rdtsc
   141 0000001B 66A3[EE62]          <1> 	mov [initialtsc], eax
   142 0000001F 668916[F262]        <1> 	mov [initialtsc + 4], edx
   143 00000024 66A3[F662]          <1> 	mov [lasttsc], eax
   144 00000028 668916[FA62]        <1> 	mov [lasttsc + 4], edx
   145 0000002D 880E[E962]          <1> 	mov [DriveNumber], cl
   146 00000031 66891E[EA62]        <1> 	mov [lbaad], ebx
   147                              <1> %ifdef io.serial
   148                              <1> 	call getmemorysize
   149                              <1> 	mov si, serialmsg
   150                              <1> 	call printrm
   151                              <1> 	jmp pmode
   152                              <1> serialmsg: db 10,13,"SollerOS: Using serial port ",io.serial," for I/O.",0
   153                              <1> %else
   154 00000036 E80300              <1> 	call vgaset	;make users switch using a command-this leads to very fast boots
   155 00000039 E95400              <1> 	jmp pmode
   156                              <1> %endif
   157                              <1> 	
   158                              <1> vgaset:
   159 0000003C B81200              <1> 	mov ax, 12h
   160 0000003F 31DB                <1> 	xor bx, bx
   161 00000041 CD10                <1> 	int 10h
   162 00000043 C606[E862]00        <1> 	mov byte [guion], 0
   163 00000048 E80100              <1> 	call getmemorysize;get the memory map after the video is initialized
   164 0000004B C3                  <1> 	ret
   165                              <1> 
   166                              <1> getmemorysize:
   167 0000004C BF[FE62]            <1> 	mov di, memlistbuf
   168 0000004F 6631DB              <1> 	xor ebx, ebx
   169                              <1> getmemsizeloop:
   170 00000052 66B820E80000        <1> 	mov eax, 0xE820
   171 00000058 66BA50414D53        <1> 	mov edx, 0x0534D4150
   172 0000005E 66B918000000        <1> 	mov ecx, 24
   173 00000064 CD15                <1> 	int 0x15
   174 00000066 81C71800            <1> 	add di, 24
   175 0000006A 81FF[3E65]          <1> 	cmp di, memlistend
   176 0000006E 7305                <1> 	jae nomoregetmemsize
   177 00000070 6685DB              <1> 	test ebx, ebx
   178 00000073 75DD                <1> 	jnz getmemsizeloop
   179                              <1> nomoregetmemsize:
   180 00000075 81EF[FE62]          <1> 	sub di, memlistbuf
   181 00000079 893E[3E65]          <1> 	mov [memlistend], di
   182 0000007D C3                  <1> 	ret
   183                              <1> 	
   184                              <1> printrm:			; 'si' comes in with string address
   185 0000007E BB0700              <1>     mov bx,07		; write to display
   186 00000081 B40E                <1>     mov ah,0Eh		; screen function
   187 00000083 8A04                <1>    .lp:    mov al,[si]         ; get next character
   188 00000085 84C0                <1>     test al,al		; look for terminator 
   189 00000087 7406                <1>     jz .done	; zero byte at end of string
   190 00000089 CD10                <1>     int 10h		; write character to screen.    
   191 0000008B 46                  <1> 	inc si	     	; move to next character
   192 0000008C E9F4FF              <1>     jmp .lp		; loop
   193 0000008F C3                  <1> .done: ret
   194                                      %include "source/pmode.asm"
   195                              <1> [BITS 16]
   196                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   197                              <1> ;	16-bit real mode
   198                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   199                              <1> 
   200                              <1> pmode:
   201 00000090 6631C0              <1> 	xor eax, eax
   202 00000093 6631DB              <1> 	xor ebx, ebx
   203 00000096 6631C9              <1> 	xor ecx, ecx
   204 00000099 6631D2              <1> 	xor edx, edx
   205 0000009C 6631F6              <1> 	xor esi, esi
   206 0000009F 6631FF              <1> 	xor edi, edi
   207 000000A2 BA9200              <1> 	mov dx, 0x92
   208 000000A5 EC                  <1> 	in al, dx	;;A20
   209 000000A6 0C02                <1> 	or al, 2
   210 000000A8 EE                  <1> 	out dx, al
   211 000000A9 8CCB                <1> 	mov bx,cs		; EBX=segment
   212 000000AB 66C1E304            <1> 	shl ebx,4		;	<< 4
   213 000000AF 6689D8              <1> 	mov eax, ebx		; EAX=linear address of segment base
   214 000000B2 A3[8103]            <1> 	mov [gdt2 + 2],ax
   215 000000B5 A3[8903]            <1> 	mov [gdt3 + 2],ax
   216 000000B8 66C1E810            <1> 	shr eax,16
   217 000000BC A2[8303]            <1> 	mov [gdt2 + 4],al
   218 000000BF A2[8B03]            <1> 	mov [gdt3 + 4],al
   219 000000C2 8826[8603]          <1> 	mov [gdt2 + 7],ah
   220 000000C6 8826[8E03]          <1> 	mov [gdt3 + 7],ah
   221                              <1> 
   222 000000CA 66B8[68670300]      <1> 	mov eax, initialstack
   223 000000D0 660306[2702]        <1> 	add eax, [newcodecache]
   224 000000D5 A3[7903]            <1> 	mov [gdts + 2],ax
   225 000000D8 66C1E810            <1> 	shr eax, 16
   226 000000DC A2[7B03]            <1> 	mov [gdts + 4],al
   227 000000DF 8826[7E03]          <1> 	mov [gdts + 7], ah
   228                              <1> 	
   229 000000E3 66A1[2702]          <1> 	mov eax, [newcodecache]
   230 000000E7 A3[9103]            <1> 	mov [gdt4 + 2],ax
   231 000000EA A3[9903]            <1> 	mov [gdt5 + 2],ax
   232 000000ED A3[A103]            <1> 	mov [gdtv8086 + 2], ax
   233 000000F0 A3[A903]            <1> 	mov [gdtv80862 + 2], ax
   234 000000F3 66C1E810            <1> 	shr eax,16
   235 000000F7 A2[9303]            <1> 	mov [gdt4 + 4],al
   236 000000FA A2[9B03]            <1> 	mov [gdt5 + 4],al
   237 000000FD A2[A303]            <1> 	mov [gdtv8086 + 4],al
   238 00000100 A2[AB03]            <1> 	mov [gdtv80862 + 4],al
   239 00000103 8826[9603]          <1> 	mov [gdt4 + 7],ah
   240 00000107 8826[9E03]          <1> 	mov [gdt5 + 7],ah
   241 0000010B 8826[A603]          <1> 	mov [gdtv8086 + 7],ah
   242 0000010F 8826[AE03]          <1> 	mov [gdtv80862 + 7],ah
   243                              <1> 	
   244 00000113 66B800004000        <1> 	mov eax, dosprogloc
   245 00000119 660306[2702]        <1> 	add eax, [newcodecache]
   246 0000011E A3[B103]            <1> 	mov [gdtdos + 2],ax
   247 00000121 A3[B903]            <1> 	mov [gdtdos2 + 2],ax
   248 00000124 66C1E810            <1> 	shr eax,16
   249 00000128 A2[B303]            <1> 	mov [gdtdos + 4],al
   250 0000012B A2[BB03]            <1> 	mov [gdtdos2 + 4],al
   251 0000012E 8826[B603]          <1> 	mov [gdtdos + 7],ah
   252 00000132 8826[BE03]          <1> 	mov [gdtdos2 + 7],ah
   253                              <1> 	
   254                              <1> ; fix up gdt and idt
   255 00000136 67668D83[67030000]  <1> 	lea eax,[ebx + gdt]	; EAX=linear address of gdt
   256 0000013E 66A3[5D03]          <1> 	mov [gdtr + 2],eax
   257 00000142 67668D83[BF030000]  <1> 	lea eax,[ebx + idt]	; EAX=linear address of idt
   258 0000014A 66A3[6303]          <1> 	mov [idtr + 2],eax
   259 0000014E FA                  <1> 	cli
   260 0000014F 0F0116[5B03]        <1> 	lgdt [gdtr]
   261 00000154 0F011E[6103]        <1> 	lidt [idtr]
   262 00000159 6631DB              <1> 	xor ebx, ebx
   263 0000015C 8CDB                <1> 	mov bx, ds
   264 0000015E 66891E[2302]        <1> 	mov [basecache], ebx
   265 00000163 0F20C0              <1> 	mov eax,cr0
   266 00000166 0C01                <1> 	or al,1
   267 00000168 0F22C0              <1> 	mov cr0,eax
   268 0000016B EA[7001]1800        <1> 	jmp SYS_CODE_SEL:do_pm
   269                              <1> [BITS 32]
   270                              <1> do_pm:
   271 00000170 31C0                <1> 	xor eax, eax
   272 00000172 66B82000            <1> 	mov ax, SYS_DATA_SEL
   273 00000176 8ED8                <1> 	mov ds, ax
   274 00000178 8EC0                <1> 	mov es, ax
   275 0000017A 8EE0                <1> 	mov fs, ax
   276 0000017C 66B83000            <1> 	mov ax, NEW_DATA_SEL
   277 00000180 8EE8                <1> 	mov gs, ax
   278                              <1> 	
   279                              <1> copykernel:
   280 00000182 648B06              <1> 	mov eax, [fs:esi]
   281 00000185 658906              <1> 	mov [gs:esi], eax
   282 00000188 81C604000000        <1> 	add esi, 4
   283 0000018E 81FE[68670300]      <1> 	cmp esi, bsscopy
   284 00000194 72EC                <1> 	jb copykernel
   285 00000196 EA[9D010000]2800    <1> 	jmp NEW_CODE_SEL:done_copy
   286                              <1> 	
   287                              <1> done_copy:
   288 0000019D 66B83000            <1> 	mov ax, NEW_DATA_SEL	;;these MUST be setup AFTER the kernel switches places!!!
   289 000001A1 8ED8                <1> 	mov ds, ax
   290 000001A3 8EC0                <1> 	mov es, ax
   291 000001A5 8EE0                <1> 	mov fs, ax
   292                              <1> 	;mov ax, STACK_SEL
   293 000001A7 8ED0                <1> 	mov ss, ax
   294 000001A9 BC[08770300]        <1> 	mov esp, stackend
   295 000001AE 66B82000            <1> 	mov ax, SYS_DATA_SEL
   296 000001B2 8EE8                <1> 	mov gs, ax
   297                              <1> 	
   298 000001B4 E852560000          <1> 	call initialize	;initialize drivers
   299                              <1> 	
   300 000001B9 A1[27020000]        <1> 	mov eax, [newcodecache]
   301 000001BE C1E804              <1> 	shr eax, 4
   302 000001C1 A3[23020000]        <1> 	mov [basecache], eax
   303                              <1> 	
   304 000001C6 BE[25251400]        <1> 	mov esi, bssend
   305 000001CB 31C0                <1> 	xor eax, eax
   306                              <1> clearkernelbuffers:
   307 000001CD 8906                <1> 	mov [esi], eax
   308 000001CF 81EE04000000        <1> 	sub esi, 4
   309 000001D5 81FE[68670300]      <1> 	cmp esi, bsscopy
   310 000001DB 77F0                <1> 	ja clearkernelbuffers
   311 000001DD FB                  <1> 	sti
   312                              <1> 
   313                              <1> getmemoryspace:
   314 000001DE BE[FE620000]        <1> 	mov esi, memlistbuf
   315 000001E3 31FF                <1> 	xor edi, edi
   316 000001E5 668B3D[3E650000]    <1> 	mov di, [memlistend]
   317 000001EC 01F7                <1> 	add edi, esi
   318 000001EE 31C0                <1> 	xor eax, eax
   319                              <1> memoryspaceaddition:
   320 000001F0 39FE                <1> 	cmp esi, edi
   321 000001F2 7325                <1> 	jae finishedmemspacecalc
   322 000001F4 81C608000000        <1> 	add esi, 8
   323 000001FA 8B0E                <1> 	mov ecx, [esi]
   324 000001FC 81C608000000        <1> 	add esi, 8
   325 00000202 8B1E                <1> 	mov ebx, [esi]
   326 00000204 81C608000000        <1> 	add esi, 8
   327 0000020A 81FB01000000        <1> 	cmp ebx, 1
   328 00000210 75DE                <1> 	jne memoryspaceaddition
   329 00000212 01C8                <1> 	add eax, ecx
   330 00000214 E9D7FFFFFF          <1> 	jmp memoryspaceaddition
   331                              <1> finishedmemspacecalc:
   332 00000219 A3[38020000]        <1> 	mov [memoryspace], eax
   333                              <1> %ifdef gui.included
   334                              <1> 	cmp byte [guion], 0
   335                              <1> 	je normalstartup
   336                              <1> 	mov ebx, [basecache]
   337                              <1> 	shl ebx, 4
   338                              <1> 	mov edi, [physbaseptr]
   339                              <1> 	sub edi, ebx
   340                              <1> 	mov [physbaseptr], edi
   341                              <1> 	jmp guiboot
   342                              <1> %endif
   343                              <1> normalstartup:
   344 0000021E E982260000          <1> 	jmp os
   345                              <1> 	
   346 00000223 00000000            <1> basecache dd 0
   347 00000227 00001000            <1> newcodecache dd 0x100000
   348                              <1> 
   349 0000022B 00                  <1> testingcpuspeed db 0
   350 0000022C 00000000            <1> cpuspeedperint dd 0
   351 00000230 0000000000000000    <1> cpuclocksperint dd 0,0
   352 00000238 00000000            <1> memoryspace dd 0
   353 0000023C C301                <1> pitdiv dw 451;2685 is stable
   354 0000023E 7DC40500            <1> timeinterval dd 377981;2250286
   355                              <1> ;if using the rtc, the default frequency yeilds a period of 976562.5ns
   356                              <1> ;for the pit, note that div=1 gives 838.09ns, the clock runs at 1.193182 MHz
   357                              <1> ;div=451 is 377981.0004, div=902 is 755962.0008,
   358                              <1> ;div=2685 is 2250286.00004ns, div=5370 is 4500572.00007ns
   359                              <1> ;div=55483 is 46500044.000006ns
   360                              <1> ;use one of those values for the minimum error
   361                              <1> 
   362 00000242 00                  <1> ticks db 0
   363 00000243 00000000            <1> timeseconds dd 0
   364 00000247 00000000            <1> timenanoseconds dd 0
   365 0000024B 00                  <1> soundon db 0
   366 0000024C 0000                <1> soundrepititions dw 0
   367 0000024E 00000000            <1> soundpos dd 0
   368 00000252 00000000            <1> soundendpos dd 0
   369                              <1> 
   370                              <1> cpuspeedend:
   371 00000256 C605[2B020000]00    <1> 	mov byte [testingcpuspeed], 0
   372 0000025D A3[2C020000]        <1> 	mov [cpuspeedperint], eax
   373 00000262 B8[144D0000]        <1> 	mov eax, cpuspeedloopend
   374 00000267 890424              <1> 	mov [esp], eax
   375 0000026A E9DC000000          <1> 	jmp handled
   376                              <1> 
   377                              <1> pitinterrupt: ;this controls threading
   378 0000026F 803D[2B020000]01    <1> 	cmp byte [testingcpuspeed], 1	;check to see if the cpu speed test is running
   379 00000276 74DE                <1> 	je cpuspeedend
   380                              <1> 
   381 00000278 FA                  <1> 	cli
   382                              <1> 
   383 00000279 E8A6000000          <1> 	call timekeeper ;this updates the internal time
   384                              <1> 	
   385 0000027E 803D[4B020000]01    <1> 	cmp byte [soundon], 1
   386 00000285 0F840D4D0000        <1> 	je near PCSpeakerRAW
   387                              <1> timerinterrupt:	;put this into the interrupt handler that controls threading
   388                              <1> %ifdef threads.included
   389 0000028B 803D[1C5E0000]01    <1> 	cmp byte [threadson], 1
   390 00000292 0F84245B0000        <1> 	je near threadswitch
   391                              <1> %endif
   392                              <1> keyinterrupt:		;checks for escape, if pressed, it quits the program currently running
   393 00000298 803D[1C5E0000]00    <1> 	cmp byte [threadson], 0
   394 0000029F 0F84A6000000        <1> 	je near handled
   395                              <1> %ifdef io.serial
   396                              <1> 	jmp handled
   397                              <1> %else
   398 000002A5 FE05[42020000]      <1> 	inc byte [ticks] ;every 256 ticks, check for keys
   399 000002AB 0F8599000000        <1> 	jnz handled3
   400                              <1> 	
   401 000002B1 60                  <1> 	pusha
   402 000002B2 E464                <1> 	in al, 64h
   403 000002B4 A820                <1> 	test al, 20h
   404 000002B6 0F858D000000        <1> 	jnz near handled2
   405 000002BC E460                <1> 	in al, 60h
   406 000002BE 3C01                <1> 	cmp al, 1		;escape
   407 000002C0 7405                <1> 	je userint
   408 000002C2 E982000000          <1> 	jmp handled2
   409                              <1> ;	cmp al, 0x57
   410                              <1> ;	jne near handled2
   411                              <1> ;pauseint:	;F11 pauses
   412                              <1> ;	in al, 64h
   413                              <1> ;	test al, 20h
   414                              <1> ;	jnz pauseint
   415                              <1> ;	in al, 60h
   416                              <1> ;	cmp al, 0xD7
   417                              <1> ;	jne pauseint
   418                              <1> ;	mov esi, pausemsg
   419                              <1> ;	call print
   420                              <1> ;	cli
   421                              <1> ;pauselp:
   422                              <1> ;	nop
   423                              <1> ;	in al, 64h
   424                              <1> ;	test al, 20h
   425                              <1> ;	jnz pauselp
   426                              <1> ;	in al, 60h
   427                              <1> ;	cmp al, 0x57
   428                              <1> ;	je near handled2
   429                              <1> ;	jmp pauselp
   430                              <1> ;pausemsg db "Paused",10,0
   431                              <1> userint:
   432 000002C7 31C0                <1> 	xor eax, eax
   433 000002C9 3905[68770300]      <1> 	cmp [sigtable], eax
   434 000002CF 7411                <1> 	je .nosighook
   435 000002D1 8B1D[68770300]      <1> 	mov ebx, [sigtable]
   436 000002D7 895C2420            <1> 	mov [esp + 32], ebx
   437                              <1> ;	mov [sigtable], eax
   438 000002DB B020                <1> 	mov al, 0x20
   439 000002DD E620                <1> 	out 0x20, al
   440 000002DF 61                  <1> 	popa
   441 000002E0 FB                  <1> 	sti
   442 000002E1 CF                  <1> 	iret
   443                              <1> .nosighook:
   444                              <1> 		;UNMASK ALL INTS
   445 000002E2 E621                <1> 	out 0x21, al
   446 000002E4 E6A1                <1> 	out 0xA1, al
   447 000002E6 B020                <1> 	mov al, 0x20
   448 000002E8 E6A0                <1> 	out 0xA0, al
   449 000002EA E620                <1> 	out 0x20, al
   450                              <1> 		;RESET PIT DIVISOR
   451 000002EC 66A1[3C020000]      <1> 	mov ax, [pitdiv]
   452 000002F2 E640                <1> 	out 0x40, al
   453 000002F4 66C1C008            <1> 	rol ax, 8
   454 000002F8 E640                <1> 	out 0x40, al
   455                              <1> 		;RESET PIC
   456 000002FA B020                <1> 	mov al, 0x20
   457 000002FC E620                <1> 	out 0x20, al
   458 000002FE 61                  <1> 	popa
   459 000002FF FB                  <1> 	sti
   460 00000300 BC[08770300]        <1> 	mov esp, stackend ;reset stack
   461 00000305 E9FB260000          <1> 	jmp returnfromexp
   462                              <1> %endif
   463 0000030A 0A                  <1> rtcrate db 10
   464                              <1> rtcint:	;this runs at 64Hz which is perfect for 60Hz displays
   465                              <1> %ifdef io.serial
   466                              <1> %else
   467                              <1> %ifdef terminal.vsync
   468                              <1> 	cli
   469                              <1> 	cmp byte [termcopyneeded], 0
   470                              <1> 	je .nocopy
   471                              <1> 	call newtermcopy
   472                              <1> .nocopy
   473                              <1> 	push eax
   474                              <1> 	mov al, 0xC
   475                              <1> 	out 0x70, al
   476                              <1> 	in al, 0x71
   477                              <1> 	pop eax
   478                              <1> 	sti
   479                              <1> %endif
   480                              <1> %endif
   481 0000030B E942000000          <1> 	jmp handled4
   482                              <1> %ifdef rtl8139.included
   483                              <1> rtl8139.irq:
   484                              <1> 	cli
   485                              <1> 	push edx
   486                              <1> 	push eax
   487                              <1> 	mov edx, [rtl8139.basenicaddr]
   488                              <1> 	add edx, rtl8139.ISR
   489                              <1> 	xor eax, eax
   490                              <1> 	in ax, dx
   491                              <1> 	out dx, ax
   492                              <1> 	pop eax
   493                              <1> 	pop edx
   494                              <1> 	sti
   495                              <1> 	jmp handled4
   496                              <1> %endif
   497                              <1> %ifdef sound.included
   498                              <1> sblaster.irq:
   499 00000310 FA                  <1> 	cli
   500 00000311 60                  <1> 	pusha
   501 00000312 803D[8F520000]01    <1> 	cmp byte [SoundBlaster], 1
   502 00000319 0F846A4D0000        <1> 	je near sblaster.cont
   503 0000031F E925000000          <1> 	jmp handled2
   504                              <1> %endif
   505                              <1> 	
   506                              <1> timekeeper:
   507 00000324 50                  <1> 	push eax
   508 00000325 A1[47020000]        <1> 	mov eax, [timenanoseconds]
   509 0000032A 0305[3E020000]      <1> 	add eax, [timeinterval]
   510 00000330 3D00CA9A3B          <1> 	cmp eax, 1000000000
   511 00000335 720B                <1> 	jb nonanosecondrollover
   512 00000337 FF05[43020000]      <1> 	inc dword [timeseconds]
   513 0000033D 2D00CA9A3B          <1> 	sub eax, 1000000000
   514                              <1> 	%ifdef gui.time
   515                              <1> 		;REMOVE THIS IT IS NOT EFFICIENT
   516                              <1> 		cmp byte [guion], 1
   517                              <1> 		jne nonanosecondrollover
   518                              <1> 		cmp dword [dragging], 0
   519                              <1> 		jne nonanosecondrollover
   520                              <1> 		pusha
   521                              <1> 		call guitime
   522                              <1> 		popa
   523                              <1> 	%endif
   524                              <1> nonanosecondrollover:
   525 00000342 A3[47020000]        <1> 	mov [timenanoseconds], eax
   526 00000347 58                  <1> 	pop eax
   527 00000348 C3                  <1> 	ret
   528                              <1> 	
   529                              <1> handled2:
   530 00000349 61                  <1> 	popa
   531                              <1> handled3:
   532 0000034A FB                  <1> 	sti
   533                              <1> handled:
   534 0000034B 50                  <1> 	push eax
   535 0000034C B020                <1> 	mov al, 0x20
   536 0000034E E620                <1> 	out 0x20, al
   537 00000350 58                  <1> 	pop eax
   538 00000351 CF                  <1> 	iret
   539                              <1> handled4:
   540 00000352 50                  <1> 	push eax
   541 00000353 B020                <1> 	mov al, 0x20
   542 00000355 E6A0                <1> 	out 0xA0, al
   543 00000357 E620                <1> 	out 0x20, al
   544 00000359 58                  <1> 	pop eax
   545 0000035A CF                  <1> 	iret
   546                              <1> [BITS 16]
   547                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   548                              <1> ;	16-bit limit/32-bit linear base address of GDT and IDT
   549                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   550 0000035B 5700                <1> gdtr:	dw gdt_end - gdt - 1	; GDT limit
   551 0000035D 00000000            <1> 	dd 0    		; filled with linear, physical address of GDT
   552                              <1> 
   553 00000361 FF07                <1> idtr:	dw idt_end - idt - 1	; IDT limit
   554 00000363 00000000            <1> 	dd 0			; filled with linear, physical address of IDT
   555                              <1> 
   556                              <1> 
   557 00000367 0000                <1> gdt:	dw 0			; limit 15:0
   558 00000369 0000                <1> 	dw 0			; base 15:0
   559 0000036B 00                  <1> 	db 0			; base 23:16
   560 0000036C 00                  <1> 	db 0			; type
   561 0000036D 00                  <1> 	db 0			; limit 19:16, flags
   562 0000036E 00                  <1> 	db 0			; base 31:24
   563                              <1> ; linear data segment descriptor
   564                              <1> LINEAR_SEL	equ	$-gdt
   565 0000036F FFFF                <1> 	dw 0xFFFF		; limit 0xFFFFF
   566 00000371 0000                <1> 	dw 0			; base for this one is always 0
   567 00000373 00                  <1> 	db 0
   568 00000374 92                  <1> 	db 0x92			; present, ring 0, data, expand-up, writable
   569 00000375 CF                  <1> 	db 0xCF			; page-granular, 32-bit
   570 00000376 00                  <1> 	db 0
   571                              <1> STACK_SEL	equ $-gdt
   572 00000377 0200                <1> gdts:	dw 2;(stackend)/4096
   573 00000379 0000                <1> 	dw 0
   574 0000037B 00                  <1> 	db 0
   575 0000037C 92                  <1> 	db 0x92
   576 0000037D CF                  <1> 	db 0xCF
   577 0000037E 00                  <1> 	db 0
   578                              <1> ; code segment descriptor
   579                              <1> SYS_CODE_SEL	equ	$-gdt
   580 0000037F FFFF                <1> gdt2:	dw 0xFFFF
   581 00000381 0000                <1> 	dw 0			; (base gets set above)
   582 00000383 00                  <1> 	db 0
   583 00000384 9A                  <1> 	db 0x9A			; present, ring 0, code, non-conforming, readable
   584 00000385 CF                  <1> 	db 0xCF
   585 00000386 00                  <1> 	db 0
   586                              <1> ; data segment descriptor
   587                              <1> SYS_DATA_SEL	equ	$-gdt
   588 00000387 FFFF                <1> gdt3:	dw 0xFFFF
   589 00000389 0000                <1> 	dw 0			; (base gets set above)
   590 0000038B 00                  <1> 	db 0
   591 0000038C 92                  <1> 	db 0x92			; present, ring 0, data, expand-up, writable
   592 0000038D CF                  <1> 	db 0xCF
   593 0000038E 00                  <1> 	db 0
   594                              <1> NEW_CODE_SEL	equ	$-gdt
   595 0000038F FFFF                <1> gdt4:	dw 0xFFFF
   596 00000391 0000                <1> 	dw 0			; (base gets set above)
   597 00000393 00                  <1> 	db 0
   598 00000394 9A                  <1> 	db 0x9A			; present, ring 0, code, non-conforming, readable
   599 00000395 CF                  <1> 	db 0xCF
   600 00000396 00                  <1> 	db 0
   601                              <1> ; data segment descriptor
   602                              <1> NEW_DATA_SEL	equ	$-gdt
   603 00000397 FFFF                <1> gdt5:	dw 0xFFFF
   604 00000399 0000                <1> 	dw 0			; (base gets set above)
   605 0000039B 00                  <1> 	db 0
   606 0000039C 92                  <1> 	db 0x92			; present, ring 0, data, expand-up, writable
   607 0000039D CF                  <1> 	db 0xCF
   608 0000039E 00                  <1> 	db 0
   609                              <1> V8086_CODE_SEL	equ $-gdt
   610 0000039F FFFF                <1> gdtv8086: dw 0xFFFF
   611 000003A1 0000                <1> 	dw 0
   612 000003A3 00                  <1> 	db 0
   613 000003A4 9A                  <1> 	db 0x9A
   614 000003A5 8F                  <1> 	db 0x8F
   615 000003A6 00                  <1> 	db 0
   616                              <1> V8086_DATA_SEL	equ $-gdt
   617 000003A7 FFFF                <1> gdtv80862: dw 0xFFFF
   618 000003A9 0000                <1> 	dw 0
   619 000003AB 00                  <1> 	db 0
   620 000003AC 92                  <1> 	db 0x92
   621 000003AD 8F                  <1> 	db 0x8F
   622 000003AE 00                  <1> 	db 0
   623                              <1> DOS_CODE_SEL	equ $-gdt	;this gives dos programs complete access to one megabyte at the beginning of memory
   624 000003AF 0001                <1> gdtdos:	dw 256	;give it 1 MB
   625 000003B1 0000                <1> 	dw 0
   626 000003B3 00                  <1> 	db 0
   627 000003B4 9A                  <1> 	db 0x9A
   628 000003B5 8F                  <1> 	db 0x8F ;16 bit
   629 000003B6 00                  <1> 	db 0
   630                              <1> DOS_DATA_SEL 	equ $-gdt
   631 000003B7 0001                <1> gdtdos2:	dw 256
   632 000003B9 0000                <1> 	dw 0
   633 000003BB 00                  <1> 	db 0
   634 000003BC 92                  <1> 	db 0x92
   635 000003BD 8F                  <1> 	db 0x8F ;16 bit
   636 000003BE 00                  <1> 	db 0
   637                              <1> gdt_end:
   638                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   639                              <1> ;	interrupt descriptor table (IDT)
   640                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   641                              <1> ; 32 reserved interrupts:
   642                              <1> idt:	
   643                              <1> %assign i 0
   644                              <1> %rep    8
   645                              <1> 		dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   646                              <1> %assign i i+1
   647                              <1> %endrep
   648 000003BF [D70C]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   649                              <2> %assign i i+1
   650 000003C7 [E30C]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   651                              <2> %assign i i+1
   652 000003CF [EF0C]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   653                              <2> %assign i i+1
   654 000003D7 [FB0C]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   655                              <2> %assign i i+1
   656 000003DF [070D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   657                              <2> %assign i i+1
   658 000003E7 [130D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   659                              <2> %assign i i+1
   660 000003EF [1F0D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   661                              <2> %assign i i+1
   662 000003F7 [2B0D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   663                              <2> %assign i i+1
   664 000003FF [370D]1800008E0000  <1> 		dw unhand + 8*12,SYS_CODE_SEL,0x8E00,0	;double fault handler in original memory
   665                              <1> %assign i 9
   666                              <1> %rep    23
   667                              <1> 		dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   668                              <1> %assign i i+1
   669                              <1> %endrep
   670 00000407 [430D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   671                              <2> %assign i i+1
   672 0000040F [4F0D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   673                              <2> %assign i i+1
   674 00000417 [5B0D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   675                              <2> %assign i i+1
   676 0000041F [670D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   677                              <2> %assign i i+1
   678 00000427 [730D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   679                              <2> %assign i i+1
   680 0000042F [7F0D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   681                              <2> %assign i i+1
   682 00000437 [8B0D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   683                              <2> %assign i i+1
   684 0000043F [970D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   685                              <2> %assign i i+1
   686 00000447 [A30D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   687                              <2> %assign i i+1
   688 0000044F [AF0D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   689                              <2> %assign i i+1
   690 00000457 [BB0D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   691                              <2> %assign i i+1
   692 0000045F [C70D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   693                              <2> %assign i i+1
   694 00000467 [D30D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   695                              <2> %assign i i+1
   696 0000046F [DF0D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   697                              <2> %assign i i+1
   698 00000477 [EB0D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   699                              <2> %assign i i+1
   700 0000047F [F70D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   701                              <2> %assign i i+1
   702 00000487 [030E]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   703                              <2> %assign i i+1
   704 0000048F [0F0E]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   705                              <2> %assign i i+1
   706 00000497 [1B0E]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   707                              <2> %assign i i+1
   708 0000049F [270E]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   709                              <2> %assign i i+1
   710 000004A7 [330E]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   711                              <2> %assign i i+1
   712 000004AF [3F0E]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   713                              <2> %assign i i+1
   714 000004B7 [4B0E]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   715                              <2> %assign i i+1
   716 000004BF [5B27]2800008E0000  <1> 		dw int20h,NEW_CODE_SEL,0x8E00,0
   717 000004C7 [5F27]2800008E0000  <1> 		dw int21h,NEW_CODE_SEL,0x8E00,0
   718                              <1> %assign i 0x22
   719                              <1> %rep 14
   720                              <1> 		dw handled,NEW_CODE_SEL,0x8E00,0
   721                              <1> %assign i +1
   722                              <1> %endrep
   723 000004CF [4B03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   724                              <2> %assign i +1
   725 000004D7 [4B03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   726                              <2> %assign i +1
   727 000004DF [4B03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   728                              <2> %assign i +1
   729 000004E7 [4B03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   730                              <2> %assign i +1
   731 000004EF [4B03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   732                              <2> %assign i +1
   733 000004F7 [4B03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   734                              <2> %assign i +1
   735 000004FF [4B03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   736                              <2> %assign i +1
   737 00000507 [4B03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   738                              <2> %assign i +1
   739 0000050F [4B03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   740                              <2> %assign i +1
   741 00000517 [4B03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   742                              <2> %assign i +1
   743 0000051F [4B03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   744                              <2> %assign i +1
   745 00000527 [4B03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   746                              <2> %assign i +1
   747 0000052F [4B03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   748                              <2> %assign i +1
   749 00000537 [4B03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   750                              <2> %assign i +1
   751                              <1> ;INT 30h for os use and 3rd party use:
   752 0000053F [A11A]2800008E0000  <1> 		dw newints,NEW_CODE_SEL,0x8E00,0
   753                              <1> %assign i 0x31
   754                              <1> %rep 15
   755                              <1> 		dw handled,NEW_CODE_SEL,0x8E00,0
   756                              <1> %assign i +1
   757                              <1> %endrep
   758 00000547 [4B03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   759                              <2> %assign i +1
   760 0000054F [4B03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   761                              <2> %assign i +1
   762 00000557 [4B03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   763                              <2> %assign i +1
   764 0000055F [4B03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   765                              <2> %assign i +1
   766 00000567 [4B03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   767                              <2> %assign i +1
   768 0000056F [4B03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   769                              <2> %assign i +1
   770 00000577 [4B03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   771                              <2> %assign i +1
   772 0000057F [4B03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   773                              <2> %assign i +1
   774 00000587 [4B03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   775                              <2> %assign i +1
   776 0000058F [4B03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   777                              <2> %assign i +1
   778 00000597 [4B03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   779                              <2> %assign i +1
   780 0000059F [4B03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   781                              <2> %assign i +1
   782 000005A7 [4B03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   783                              <2> %assign i +1
   784 000005AF [4B03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   785                              <2> %assign i +1
   786 000005B7 [4B03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   787                              <2> %assign i +1
   788                              <1> ;and here we are at 0x40
   789                              <1> ;here are all the irq's
   790 000005BF [6F02]2800008E0000  <1> 		dw pitinterrupt,NEW_CODE_SEL,0x8E00,0 ;IRQ 0 = PIT
   791 000005C7 [4B03]2800008E0000  <1> 		dw handled,NEW_CODE_SEL,0x8E00,0 ;IRQ 1 = keyboard
   792 000005CF [4B03]2800008E0000  <1> 		dw handled,NEW_CODE_SEL,0x8E00,0 ;IRQ 2
   793 000005D7 [4B03]2800008E0000  <1> 		dw handled,NEW_CODE_SEL,0x8E00,0 ;IRQ 3
   794 000005DF [4B03]2800008E0000  <1> 		dw handled,NEW_CODE_SEL,0x8E00,0 ;IRQ 4
   795                              <1> 	%ifdef sound.included
   796 000005E7 [1003]2800008E0000  <1> 		dw sblaster.irq,NEW_CODE_SEL,0x8E00,0 ;IRQ 5 = default SoundBlaster
   797                              <1> 	%else
   798                              <1> 		dw handled,NEW_CODE_SEL,0x8E00,0 ;IRQ 5
   799                              <1> 	%endif
   800 000005EF [4B03]2800008E0000  <1> 		dw handled,NEW_CODE_SEL,0x8E00,0 ;IRQ 6
   801 000005F7 [4B03]2800008E0000  <1> 		dw handled,NEW_CODE_SEL,0x8E00,0 ;IRQ 7
   802 000005FF [0B03]2800008E0000  <1> 		dw rtcint,NEW_CODE_SEL,0x8E00,0 ;IRQ 8 = RTC
   803 00000607 [5203]2800008E0000  <1> 		dw handled4,NEW_CODE_SEL,0x8E00,0 ;IRQ 9 = default NE2000
   804 0000060F [5203]2800008E0000  <1> 		dw handled4,NEW_CODE_SEL,0x8E00,0 ;IRQ 10
   805                              <1> 	%ifdef rtl8139.included
   806                              <1> 		dw rtl8139.irq,NEW_CODE_SEL,0x8E00,0 ;IRQ 11 = default RTL8139
   807                              <1> 	%else
   808 00000617 [5203]2800008E0000  <1> 		dw handled4,NEW_CODE_SEL,0x8E00,0 ;IRQ 11
   809                              <1> 	%endif
   810 0000061F [5203]2800008E0000  <1> 		dw handled4,NEW_CODE_SEL,0x8E00,0 ;IRQ 12
   811 00000627 [5203]2800008E0000  <1> 		dw handled4,NEW_CODE_SEL,0x8E00,0 ;IRQ 13
   812 0000062F [5203]2800008E0000  <1> 		dw handled4,NEW_CODE_SEL,0x8E00,0 ;IRQ 14
   813 00000637 [5203]2800008E0000  <1> 		dw handled4,NEW_CODE_SEL,0x8E00,0 ;IRQ 15
   814                              <1> ;This brings me up to 0x50
   815                              <1> %assign i 0x50
   816                              <1> %rep 176
   817                              <1> 		dw handled, NEW_CODE_SEL,0x8E00,0
   818                              <1> 		;dw unhand + i*12, NEW_CODE_SEL,0x8E00,0
   819                              <1> %assign i +1
   820                              <1> %endrep
   821 0000063F [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   822                              <2> 
   823                              <2> %assign i +1
   824 00000647 [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   825                              <2> 
   826                              <2> %assign i +1
   827 0000064F [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   828                              <2> 
   829                              <2> %assign i +1
   830 00000657 [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   831                              <2> 
   832                              <2> %assign i +1
   833 0000065F [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   834                              <2> 
   835                              <2> %assign i +1
   836 00000667 [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   837                              <2> 
   838                              <2> %assign i +1
   839 0000066F [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   840                              <2> 
   841                              <2> %assign i +1
   842 00000677 [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   843                              <2> 
   844                              <2> %assign i +1
   845 0000067F [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   846                              <2> 
   847                              <2> %assign i +1
   848 00000687 [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   849                              <2> 
   850                              <2> %assign i +1
   851 0000068F [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   852                              <2> 
   853                              <2> %assign i +1
   854 00000697 [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   855                              <2> 
   856                              <2> %assign i +1
   857 0000069F [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   858                              <2> 
   859                              <2> %assign i +1
   860 000006A7 [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   861                              <2> 
   862                              <2> %assign i +1
   863 000006AF [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   864                              <2> 
   865                              <2> %assign i +1
   866 000006B7 [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   867                              <2> 
   868                              <2> %assign i +1
   869 000006BF [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   870                              <2> 
   871                              <2> %assign i +1
   872 000006C7 [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   873                              <2> 
   874                              <2> %assign i +1
   875 000006CF [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   876                              <2> 
   877                              <2> %assign i +1
   878 000006D7 [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   879                              <2> 
   880                              <2> %assign i +1
   881 000006DF [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   882                              <2> 
   883                              <2> %assign i +1
   884 000006E7 [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   885                              <2> 
   886                              <2> %assign i +1
   887 000006EF [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   888                              <2> 
   889                              <2> %assign i +1
   890 000006F7 [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   891                              <2> 
   892                              <2> %assign i +1
   893 000006FF [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   894                              <2> 
   895                              <2> %assign i +1
   896 00000707 [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   897                              <2> 
   898                              <2> %assign i +1
   899 0000070F [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   900                              <2> 
   901                              <2> %assign i +1
   902 00000717 [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   903                              <2> 
   904                              <2> %assign i +1
   905 0000071F [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   906                              <2> 
   907                              <2> %assign i +1
   908 00000727 [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   909                              <2> 
   910                              <2> %assign i +1
   911 0000072F [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   912                              <2> 
   913                              <2> %assign i +1
   914 00000737 [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   915                              <2> 
   916                              <2> %assign i +1
   917 0000073F [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   918                              <2> 
   919                              <2> %assign i +1
   920 00000747 [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   921                              <2> 
   922                              <2> %assign i +1
   923 0000074F [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   924                              <2> 
   925                              <2> %assign i +1
   926 00000757 [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   927                              <2> 
   928                              <2> %assign i +1
   929 0000075F [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   930                              <2> 
   931                              <2> %assign i +1
   932 00000767 [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   933                              <2> 
   934                              <2> %assign i +1
   935 0000076F [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   936                              <2> 
   937                              <2> %assign i +1
   938 00000777 [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   939                              <2> 
   940                              <2> %assign i +1
   941 0000077F [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   942                              <2> 
   943                              <2> %assign i +1
   944 00000787 [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   945                              <2> 
   946                              <2> %assign i +1
   947 0000078F [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   948                              <2> 
   949                              <2> %assign i +1
   950 00000797 [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   951                              <2> 
   952                              <2> %assign i +1
   953 0000079F [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   954                              <2> 
   955                              <2> %assign i +1
   956 000007A7 [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   957                              <2> 
   958                              <2> %assign i +1
   959 000007AF [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   960                              <2> 
   961                              <2> %assign i +1
   962 000007B7 [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   963                              <2> 
   964                              <2> %assign i +1
   965 000007BF [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   966                              <2> 
   967                              <2> %assign i +1
   968 000007C7 [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   969                              <2> 
   970                              <2> %assign i +1
   971 000007CF [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   972                              <2> 
   973                              <2> %assign i +1
   974 000007D7 [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   975                              <2> 
   976                              <2> %assign i +1
   977 000007DF [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   978                              <2> 
   979                              <2> %assign i +1
   980 000007E7 [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   981                              <2> 
   982                              <2> %assign i +1
   983 000007EF [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   984                              <2> 
   985                              <2> %assign i +1
   986 000007F7 [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   987                              <2> 
   988                              <2> %assign i +1
   989 000007FF [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   990                              <2> 
   991                              <2> %assign i +1
   992 00000807 [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   993                              <2> 
   994                              <2> %assign i +1
   995 0000080F [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   996                              <2> 
   997                              <2> %assign i +1
   998 00000817 [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   999                              <2> 
  1000                              <2> %assign i +1
  1001 0000081F [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1002                              <2> 
  1003                              <2> %assign i +1
  1004 00000827 [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1005                              <2> 
  1006                              <2> %assign i +1
  1007 0000082F [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1008                              <2> 
  1009                              <2> %assign i +1
  1010 00000837 [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1011                              <2> 
  1012                              <2> %assign i +1
  1013 0000083F [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1014                              <2> 
  1015                              <2> %assign i +1
  1016 00000847 [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1017                              <2> 
  1018                              <2> %assign i +1
  1019 0000084F [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1020                              <2> 
  1021                              <2> %assign i +1
  1022 00000857 [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1023                              <2> 
  1024                              <2> %assign i +1
  1025 0000085F [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1026                              <2> 
  1027                              <2> %assign i +1
  1028 00000867 [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1029                              <2> 
  1030                              <2> %assign i +1
  1031 0000086F [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1032                              <2> 
  1033                              <2> %assign i +1
  1034 00000877 [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1035                              <2> 
  1036                              <2> %assign i +1
  1037 0000087F [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1038                              <2> 
  1039                              <2> %assign i +1
  1040 00000887 [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1041                              <2> 
  1042                              <2> %assign i +1
  1043 0000088F [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1044                              <2> 
  1045                              <2> %assign i +1
  1046 00000897 [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1047                              <2> 
  1048                              <2> %assign i +1
  1049 0000089F [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1050                              <2> 
  1051                              <2> %assign i +1
  1052 000008A7 [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1053                              <2> 
  1054                              <2> %assign i +1
  1055 000008AF [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1056                              <2> 
  1057                              <2> %assign i +1
  1058 000008B7 [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1059                              <2> 
  1060                              <2> %assign i +1
  1061 000008BF [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1062                              <2> 
  1063                              <2> %assign i +1
  1064 000008C7 [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1065                              <2> 
  1066                              <2> %assign i +1
  1067 000008CF [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1068                              <2> 
  1069                              <2> %assign i +1
  1070 000008D7 [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1071                              <2> 
  1072                              <2> %assign i +1
  1073 000008DF [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1074                              <2> 
  1075                              <2> %assign i +1
  1076 000008E7 [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1077                              <2> 
  1078                              <2> %assign i +1
  1079 000008EF [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1080                              <2> 
  1081                              <2> %assign i +1
  1082 000008F7 [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1083                              <2> 
  1084                              <2> %assign i +1
  1085 000008FF [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1086                              <2> 
  1087                              <2> %assign i +1
  1088 00000907 [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1089                              <2> 
  1090                              <2> %assign i +1
  1091 0000090F [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1092                              <2> 
  1093                              <2> %assign i +1
  1094 00000917 [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1095                              <2> 
  1096                              <2> %assign i +1
  1097 0000091F [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1098                              <2> 
  1099                              <2> %assign i +1
  1100 00000927 [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1101                              <2> 
  1102                              <2> %assign i +1
  1103 0000092F [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1104                              <2> 
  1105                              <2> %assign i +1
  1106 00000937 [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1107                              <2> 
  1108                              <2> %assign i +1
  1109 0000093F [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1110                              <2> 
  1111                              <2> %assign i +1
  1112 00000947 [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1113                              <2> 
  1114                              <2> %assign i +1
  1115 0000094F [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1116                              <2> 
  1117                              <2> %assign i +1
  1118 00000957 [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1119                              <2> 
  1120                              <2> %assign i +1
  1121 0000095F [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1122                              <2> 
  1123                              <2> %assign i +1
  1124 00000967 [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1125                              <2> 
  1126                              <2> %assign i +1
  1127 0000096F [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1128                              <2> 
  1129                              <2> %assign i +1
  1130 00000977 [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1131                              <2> 
  1132                              <2> %assign i +1
  1133 0000097F [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1134                              <2> 
  1135                              <2> %assign i +1
  1136 00000987 [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1137                              <2> 
  1138                              <2> %assign i +1
  1139 0000098F [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1140                              <2> 
  1141                              <2> %assign i +1
  1142 00000997 [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1143                              <2> 
  1144                              <2> %assign i +1
  1145 0000099F [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1146                              <2> 
  1147                              <2> %assign i +1
  1148 000009A7 [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1149                              <2> 
  1150                              <2> %assign i +1
  1151 000009AF [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1152                              <2> 
  1153                              <2> %assign i +1
  1154 000009B7 [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1155                              <2> 
  1156                              <2> %assign i +1
  1157 000009BF [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1158                              <2> 
  1159                              <2> %assign i +1
  1160 000009C7 [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1161                              <2> 
  1162                              <2> %assign i +1
  1163 000009CF [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1164                              <2> 
  1165                              <2> %assign i +1
  1166 000009D7 [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1167                              <2> 
  1168                              <2> %assign i +1
  1169 000009DF [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1170                              <2> 
  1171                              <2> %assign i +1
  1172 000009E7 [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1173                              <2> 
  1174                              <2> %assign i +1
  1175 000009EF [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1176                              <2> 
  1177                              <2> %assign i +1
  1178 000009F7 [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1179                              <2> 
  1180                              <2> %assign i +1
  1181 000009FF [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1182                              <2> 
  1183                              <2> %assign i +1
  1184 00000A07 [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1185                              <2> 
  1186                              <2> %assign i +1
  1187 00000A0F [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1188                              <2> 
  1189                              <2> %assign i +1
  1190 00000A17 [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1191                              <2> 
  1192                              <2> %assign i +1
  1193 00000A1F [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1194                              <2> 
  1195                              <2> %assign i +1
  1196 00000A27 [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1197                              <2> 
  1198                              <2> %assign i +1
  1199 00000A2F [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1200                              <2> 
  1201                              <2> %assign i +1
  1202 00000A37 [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1203                              <2> 
  1204                              <2> %assign i +1
  1205 00000A3F [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1206                              <2> 
  1207                              <2> %assign i +1
  1208 00000A47 [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1209                              <2> 
  1210                              <2> %assign i +1
  1211 00000A4F [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1212                              <2> 
  1213                              <2> %assign i +1
  1214 00000A57 [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1215                              <2> 
  1216                              <2> %assign i +1
  1217 00000A5F [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1218                              <2> 
  1219                              <2> %assign i +1
  1220 00000A67 [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1221                              <2> 
  1222                              <2> %assign i +1
  1223 00000A6F [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1224                              <2> 
  1225                              <2> %assign i +1
  1226 00000A77 [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1227                              <2> 
  1228                              <2> %assign i +1
  1229 00000A7F [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1230                              <2> 
  1231                              <2> %assign i +1
  1232 00000A87 [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1233                              <2> 
  1234                              <2> %assign i +1
  1235 00000A8F [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1236                              <2> 
  1237                              <2> %assign i +1
  1238 00000A97 [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1239                              <2> 
  1240                              <2> %assign i +1
  1241 00000A9F [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1242                              <2> 
  1243                              <2> %assign i +1
  1244 00000AA7 [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1245                              <2> 
  1246                              <2> %assign i +1
  1247 00000AAF [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1248                              <2> 
  1249                              <2> %assign i +1
  1250 00000AB7 [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1251                              <2> 
  1252                              <2> %assign i +1
  1253 00000ABF [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1254                              <2> 
  1255                              <2> %assign i +1
  1256 00000AC7 [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1257                              <2> 
  1258                              <2> %assign i +1
  1259 00000ACF [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1260                              <2> 
  1261                              <2> %assign i +1
  1262 00000AD7 [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1263                              <2> 
  1264                              <2> %assign i +1
  1265 00000ADF [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1266                              <2> 
  1267                              <2> %assign i +1
  1268 00000AE7 [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1269                              <2> 
  1270                              <2> %assign i +1
  1271 00000AEF [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1272                              <2> 
  1273                              <2> %assign i +1
  1274 00000AF7 [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1275                              <2> 
  1276                              <2> %assign i +1
  1277 00000AFF [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1278                              <2> 
  1279                              <2> %assign i +1
  1280 00000B07 [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1281                              <2> 
  1282                              <2> %assign i +1
  1283 00000B0F [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1284                              <2> 
  1285                              <2> %assign i +1
  1286 00000B17 [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1287                              <2> 
  1288                              <2> %assign i +1
  1289 00000B1F [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1290                              <2> 
  1291                              <2> %assign i +1
  1292 00000B27 [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1293                              <2> 
  1294                              <2> %assign i +1
  1295 00000B2F [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1296                              <2> 
  1297                              <2> %assign i +1
  1298 00000B37 [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1299                              <2> 
  1300                              <2> %assign i +1
  1301 00000B3F [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1302                              <2> 
  1303                              <2> %assign i +1
  1304 00000B47 [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1305                              <2> 
  1306                              <2> %assign i +1
  1307 00000B4F [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1308                              <2> 
  1309                              <2> %assign i +1
  1310 00000B57 [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1311                              <2> 
  1312                              <2> %assign i +1
  1313 00000B5F [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1314                              <2> 
  1315                              <2> %assign i +1
  1316 00000B67 [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1317                              <2> 
  1318                              <2> %assign i +1
  1319 00000B6F [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1320                              <2> 
  1321                              <2> %assign i +1
  1322 00000B77 [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1323                              <2> 
  1324                              <2> %assign i +1
  1325 00000B7F [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1326                              <2> 
  1327                              <2> %assign i +1
  1328 00000B87 [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1329                              <2> 
  1330                              <2> %assign i +1
  1331 00000B8F [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1332                              <2> 
  1333                              <2> %assign i +1
  1334 00000B97 [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1335                              <2> 
  1336                              <2> %assign i +1
  1337 00000B9F [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1338                              <2> 
  1339                              <2> %assign i +1
  1340 00000BA7 [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1341                              <2> 
  1342                              <2> %assign i +1
  1343 00000BAF [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1344                              <2> 
  1345                              <2> %assign i +1
  1346 00000BB7 [4B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1347                              <2> 
  1348                              <2> %assign i +1
  1349                              <1> idt_end:
  1350                              <1> [BITS 32]
  1351                                  	%include "source/realmode.asm"
  1352                              <1> realmode:	;make sure the real mode program's address is in realmodeptr
  1353                              <1> 
  1354 00000BBF FA                  <1> 	cli
  1355 00000BC0 A3[CD0C0000]        <1> 	mov [realmodeeax], eax
  1356 00000BC5 891D[C90C0000]      <1> 	mov [realmodeebx], ebx
  1357 00000BCB 8925[BB0C0000]      <1> 	mov [pmodeesp], esp
  1358                              <1> 
  1359 00000BD1 BB[C50C0000]        <1> 	mov ebx, cr0old
  1360                              <1> rmcopytofirstmbyte:
  1361 00000BD6 8B03                <1> 	mov eax, [ebx]
  1362 00000BD8 658903              <1> 	mov [gs:ebx], eax
  1363 00000BDB 81C304000000        <1> 	add ebx, 4
  1364 00000BE1 81FB[D10C0000]      <1> 	cmp ebx, realmodeptr
  1365 00000BE7 76ED                <1> 	jbe rmcopytofirstmbyte
  1366                              <1> 
  1367 00000BE9 EA[F00B0000]3800    <1> 	jmp V8086_CODE_SEL:protected16bit
  1368                              <1> 
  1369                              <1> [BITS 16]
  1370                              <1> protected16bit:
  1371 00000BF0 B84000              <1> 	mov ax, V8086_DATA_SEL
  1372 00000BF3 8ED8                <1> 	mov ds, ax
  1373 00000BF5 8EC0                <1> 	mov es, ax
  1374 00000BF7 8EE0                <1> 	mov fs, ax
  1375 00000BF9 8EE8                <1> 	mov gs, ax
  1376 00000BFB 8ED0                <1> 	mov ss, ax
  1377 00000BFD 66BC[08770300]      <1> 	mov esp, stackend
  1378 00000C03 0F20C0              <1> 	mov eax, cr0
  1379 00000C06 66A3[C50C]          <1> 	mov [cr0old], eax
  1380 00000C0A 6625FEFFFF7F        <1> 	and eax, 0x7FFFFFFE
  1381 00000C10 0F22C0              <1> 	mov cr0, eax	;now in real mode
  1382 00000C13 EA[180C]0010        <1> 	jmp 0x1000:inrealmode
  1383                              <1> 
  1384                              <1> inrealmode:
  1385 00000C18 8CC8                <1> 	mov ax, cs
  1386 00000C1A 8ED8                <1> 	mov ds, ax
  1387 00000C1C 8EC0                <1> 	mov es, ax
  1388 00000C1E 8EE0                <1> 	mov fs, ax
  1389 00000C20 8EE8                <1> 	mov gs, ax
  1390 00000C22 8ED0                <1> 	mov ss, ax
  1391 00000C24 BC[0877]            <1> 	mov sp, stackend ;because this is at 0x1000: and not 0x10000: it works
  1392                              <1> 	
  1393 00000C27 B011                <1> 	mov al, 0x11
  1394 00000C29 E620                <1> 	out 0x20, al
  1395 00000C2B E6A0                <1> 	out 0xA0, al
  1396 00000C2D B008                <1> 	mov al, 0x8		;interrupt for master
  1397 00000C2F E621                <1> 	out 0x21, al
  1398 00000C31 B070                <1> 	mov al, 0x70	;interrupt for slave
  1399 00000C33 E6A1                <1> 	out 0xA1, al
  1400 00000C35 B004                <1> 	mov al, 4
  1401 00000C37 E621                <1> 	out 0x21, al
  1402 00000C39 B002                <1> 	mov al, 2
  1403 00000C3B E6A1                <1> 	out 0xA1, al
  1404 00000C3D B001                <1> 	mov al, 0x1
  1405 00000C3F E621                <1> 	out 0x21, al
  1406 00000C41 B001                <1> 	mov al, 0x1
  1407 00000C43 E6A1                <1> 	out 0xA1, al
  1408                              <1> 	
  1409 00000C45 0F011E[BF0C]        <1> 	lidt [idt_real]
  1410 00000C4A FB                  <1> 	sti
  1411                              <1> 
  1412 00000C4B 66A1[CD0C]          <1> 	mov eax, [realmodeeax]
  1413 00000C4F 668B1E[C90C]        <1> 	mov ebx, [realmodeebx]
  1414                              <1> 
  1415 00000C54 FF16[D10C]          <1> 	call word [realmodeptr] ;call the real mode program here
  1416                              <1> 
  1417 00000C58 66A3[CD0C]          <1> 	mov [realmodeeax], eax
  1418 00000C5C 66891E[C90C]        <1> 	mov [realmodeebx], ebx
  1419                              <1> 
  1420 00000C61 FA                  <1> 	cli
  1421 00000C62 0F0116[5B03]        <1> 	lgdt [gdtr]
  1422 00000C67 0F011E[6103]        <1> 	lidt [idtr]
  1423 00000C6C 0F20C0              <1> 	mov eax, cr0
  1424 00000C6F 0C01                <1> 	or al, 1
  1425 00000C71 0F22C0              <1> 	mov cr0,eax
  1426 00000C74 EA[790C]2800        <1> 	jmp NEW_CODE_SEL:returntopmode
  1427                              <1> 
  1428                              <1> [BITS 32]
  1429                              <1> returntopmode:
  1430 00000C79 66B83000            <1> 	mov ax, NEW_DATA_SEL
  1431 00000C7D 8ED8                <1> 	mov ds, ax
  1432 00000C7F 8EC0                <1> 	mov es, ax
  1433 00000C81 8EE0                <1> 	mov fs, ax
  1434 00000C83 8ED0                <1> 	mov ss, ax
  1435 00000C85 8B25[BB0C0000]      <1> 	mov esp, [pmodeesp]
  1436 00000C8B 66B82000            <1> 	mov ax, SYS_DATA_SEL
  1437 00000C8F 8EE8                <1> 	mov gs, ax
  1438                              <1> 
  1439 00000C91 BB[C50C0000]        <1> 	mov ebx, cr0old
  1440                              <1> rmcopyfromfirstmbyte:
  1441 00000C96 658B03              <1> 	mov eax, [gs:ebx]
  1442 00000C99 8903                <1> 	mov [ebx], eax
  1443 00000C9B 81C304000000        <1> 	add ebx, 4
  1444 00000CA1 81FB[D10C0000]      <1> 	cmp ebx, realmodeptr
  1445 00000CA7 76ED                <1> 	jbe rmcopyfromfirstmbyte
  1446                              <1> 
  1447 00000CA9 E89B4B0000          <1> 	call initialize.pic ;reset irq's and masks
  1448 00000CAE FB                  <1> 	sti
  1449 00000CAF A1[CD0C0000]        <1> 	mov eax, [realmodeeax]
  1450 00000CB4 8B1D[C90C0000]      <1> 	mov ebx, [realmodeebx]
  1451 00000CBA C3                  <1> 	ret
  1452                              <1> 	
  1453 00000CBB 00000000            <1> pmodeesp dd 0
  1454                              <1> idt_real:
  1455 00000CBF FF03                <1> 	dw 0x3FF
  1456 00000CC1 00000000            <1> 	dd 0
  1457 00000CC5 00000000            <1> cr0old dd 0
  1458 00000CC9 00000000            <1> realmodeebx dd 0
  1459 00000CCD 00000000            <1> realmodeeax dd 0
  1460 00000CD1 0000                <1> realmodeptr dw 0
  1461 00000CD3 00000000            <1> dd 0 ;make sure the copy thing doesnt overflow
  1462                                  [BITS 32]
  1463                                      %include "source/exception.asm"
  1464                              <1> %ifdef exceptions.included
  1465                              <1> unhand:	
  1466                              <1> 	%assign i 0
  1467                              <1> 	%rep 32
  1468                              <1> 	mov byte [intprob], i
  1469                              <1> 	jmp unhand2
  1470                              <1> 	%assign i i+1
  1471                              <1> 	%endrep
  1472 00000CD7 C605[5B100000]00    <2>  mov byte [intprob], i
  1473 00000CDE E974010000          <2>  jmp unhand2
  1474                              <2>  %assign i i+1
  1475 00000CE3 C605[5B100000]01    <2>  mov byte [intprob], i
  1476 00000CEA E968010000          <2>  jmp unhand2
  1477                              <2>  %assign i i+1
  1478 00000CEF C605[5B100000]02    <2>  mov byte [intprob], i
  1479 00000CF6 E95C010000          <2>  jmp unhand2
  1480                              <2>  %assign i i+1
  1481 00000CFB C605[5B100000]03    <2>  mov byte [intprob], i
  1482 00000D02 E950010000          <2>  jmp unhand2
  1483                              <2>  %assign i i+1
  1484 00000D07 C605[5B100000]04    <2>  mov byte [intprob], i
  1485 00000D0E E944010000          <2>  jmp unhand2
  1486                              <2>  %assign i i+1
  1487 00000D13 C605[5B100000]05    <2>  mov byte [intprob], i
  1488 00000D1A E938010000          <2>  jmp unhand2
  1489                              <2>  %assign i i+1
  1490 00000D1F C605[5B100000]06    <2>  mov byte [intprob], i
  1491 00000D26 E92C010000          <2>  jmp unhand2
  1492                              <2>  %assign i i+1
  1493 00000D2B C605[5B100000]07    <2>  mov byte [intprob], i
  1494 00000D32 E920010000          <2>  jmp unhand2
  1495                              <2>  %assign i i+1
  1496 00000D37 C605[5B100000]08    <2>  mov byte [intprob], i
  1497 00000D3E E914010000          <2>  jmp unhand2
  1498                              <2>  %assign i i+1
  1499 00000D43 C605[5B100000]09    <2>  mov byte [intprob], i
  1500 00000D4A E908010000          <2>  jmp unhand2
  1501                              <2>  %assign i i+1
  1502 00000D4F C605[5B100000]0A    <2>  mov byte [intprob], i
  1503 00000D56 E9FC000000          <2>  jmp unhand2
  1504                              <2>  %assign i i+1
  1505 00000D5B C605[5B100000]0B    <2>  mov byte [intprob], i
  1506 00000D62 E9F0000000          <2>  jmp unhand2
  1507                              <2>  %assign i i+1
  1508 00000D67 C605[5B100000]0C    <2>  mov byte [intprob], i
  1509 00000D6E E9E4000000          <2>  jmp unhand2
  1510                              <2>  %assign i i+1
  1511 00000D73 C605[5B100000]0D    <2>  mov byte [intprob], i
  1512 00000D7A E9D8000000          <2>  jmp unhand2
  1513                              <2>  %assign i i+1
  1514 00000D7F C605[5B100000]0E    <2>  mov byte [intprob], i
  1515 00000D86 E9CC000000          <2>  jmp unhand2
  1516                              <2>  %assign i i+1
  1517 00000D8B C605[5B100000]0F    <2>  mov byte [intprob], i
  1518 00000D92 E9C0000000          <2>  jmp unhand2
  1519                              <2>  %assign i i+1
  1520 00000D97 C605[5B100000]10    <2>  mov byte [intprob], i
  1521 00000D9E E9B4000000          <2>  jmp unhand2
  1522                              <2>  %assign i i+1
  1523 00000DA3 C605[5B100000]11    <2>  mov byte [intprob], i
  1524 00000DAA E9A8000000          <2>  jmp unhand2
  1525                              <2>  %assign i i+1
  1526 00000DAF C605[5B100000]12    <2>  mov byte [intprob], i
  1527 00000DB6 E99C000000          <2>  jmp unhand2
  1528                              <2>  %assign i i+1
  1529 00000DBB C605[5B100000]13    <2>  mov byte [intprob], i
  1530 00000DC2 E990000000          <2>  jmp unhand2
  1531                              <2>  %assign i i+1
  1532 00000DC7 C605[5B100000]14    <2>  mov byte [intprob], i
  1533 00000DCE E984000000          <2>  jmp unhand2
  1534                              <2>  %assign i i+1
  1535 00000DD3 C605[5B100000]15    <2>  mov byte [intprob], i
  1536 00000DDA E978000000          <2>  jmp unhand2
  1537                              <2>  %assign i i+1
  1538 00000DDF C605[5B100000]16    <2>  mov byte [intprob], i
  1539 00000DE6 E96C000000          <2>  jmp unhand2
  1540                              <2>  %assign i i+1
  1541 00000DEB C605[5B100000]17    <2>  mov byte [intprob], i
  1542 00000DF2 E960000000          <2>  jmp unhand2
  1543                              <2>  %assign i i+1
  1544 00000DF7 C605[5B100000]18    <2>  mov byte [intprob], i
  1545 00000DFE E954000000          <2>  jmp unhand2
  1546                              <2>  %assign i i+1
  1547 00000E03 C605[5B100000]19    <2>  mov byte [intprob], i
  1548 00000E0A E948000000          <2>  jmp unhand2
  1549                              <2>  %assign i i+1
  1550 00000E0F C605[5B100000]1A    <2>  mov byte [intprob], i
  1551 00000E16 E93C000000          <2>  jmp unhand2
  1552                              <2>  %assign i i+1
  1553 00000E1B C605[5B100000]1B    <2>  mov byte [intprob], i
  1554 00000E22 E930000000          <2>  jmp unhand2
  1555                              <2>  %assign i i+1
  1556 00000E27 C605[5B100000]1C    <2>  mov byte [intprob], i
  1557 00000E2E E924000000          <2>  jmp unhand2
  1558                              <2>  %assign i i+1
  1559 00000E33 C605[5B100000]1D    <2>  mov byte [intprob], i
  1560 00000E3A E918000000          <2>  jmp unhand2
  1561                              <2>  %assign i i+1
  1562 00000E3F C605[5B100000]1E    <2>  mov byte [intprob], i
  1563 00000E46 E90C000000          <2>  jmp unhand2
  1564                              <2>  %assign i i+1
  1565 00000E4B C605[5B100000]1F    <2>  mov byte [intprob], i
  1566 00000E52 E900000000          <2>  jmp unhand2
  1567                              <2>  %assign i i+1
  1568                              <1> unhand2:
  1569 00000E57 FA                  <1> 	cli
  1570 00000E58 1E                  <1> 	push ds
  1571 00000E59 06                  <1> 	push es
  1572 00000E5A 0FA0                <1> 	push fs
  1573 00000E5C 0FA8                <1> 	push gs
  1574 00000E5E 16                  <1> 	push ss
  1575 00000E5F 60                  <1> 	pushad
  1576                              <1> %ifdef gui.included
  1577                              <1> 	cmp byte [guion], 0
  1578                              <1> 	je near noguiunhandstuff
  1579                              <1> 	mov word [locunhandy], 8
  1580                              <1> 	mov word [locunhandx], 8
  1581                              <1> 	mov bx, [background]
  1582                              <1> 	mov [backgroundcache], bx
  1583                              <1> 	mov byte [mousedisabled],1
  1584                              <1> 	mov bx, 1111100000000000b
  1585                              <1> 	mov [background], bx
  1586                              <1> noguiunhandstuff:
  1587                              <1> %endif
  1588 00000E60 89E6                <1> 	mov esi, esp
  1589 00000E62 8935[49100000]      <1> 	mov [espfirst], esi
  1590 00000E68 81C6BC000000        <1> 	add esi, ((unhndrgend - unhndrg)/15)*4
  1591 00000E6E 8935[45100000]      <1> 	mov [esploc], esi
  1592 00000E74 BE[6A100000]        <1> 	mov esi, unhandmsg
  1593 00000E79 8935[4D100000]      <1> 	mov [esiloc], esi
  1594 00000E7F 31C9                <1> 	xor ecx, ecx
  1595 00000E81 8A0D[5B100000]      <1> 	mov cl, [intprob]
  1596 00000E87 BB[39140000]        <1> 	mov ebx, errortypes
  1597 00000E8C C1E102              <1> 	shl ecx, 2
  1598 00000E8F 01CB                <1> 	add ebx, ecx
  1599 00000E91 81FB[79140000]      <1> 	cmp ebx, errortypesend
  1600 00000E97 7205                <1> 	jb gooderrortype
  1601 00000E99 BB[79140000]        <1> 	mov ebx, errortypesend
  1602                              <1> gooderrortype:
  1603 00000E9E 8B33                <1> 	mov esi, [ebx]
  1604                              <1> %ifdef gui.included
  1605                              <1> 	cmp byte [guion], 0
  1606                              <1> 	je near errortext
  1607                              <1> 	mov cx, [locunhandy]
  1608                              <1> 	mov dx, [locunhandx]
  1609                              <1> 	mov ax, 1
  1610                              <1> 	xor bx, bx
  1611                              <1> 	call showstring2
  1612                              <1> 	mov [locunhandy], cx
  1613                              <1> 	mov [locunhandx], dx
  1614                              <1> 	jmp errortextdone
  1615                              <1> %endif
  1616                              <1> errortext:
  1617 00000EA0 E8570D0000          <1> 	call print		;;get the error message and print it
  1618                              <1> errortextdone:
  1619 00000EA5 31C9                <1> 	xor ecx, ecx
  1620 00000EA7 8A0D[5B100000]      <1> 	mov cl, [intprob]
  1621 00000EAD E862010000          <1> 	call expdump
  1622                              <1> dumpstack:
  1623 00000EB2 8B35[45100000]      <1> 	mov esi, [esploc]
  1624 00000EB8 39E6                <1> 	cmp esi, esp
  1625 00000EBA 7219                <1> 	jb donedump
  1626 00000EBC 368B0E              <1> 	mov ecx, [ss:esi]
  1627 00000EBF 81EE04000000        <1> 	sub esi, 4
  1628 00000EC5 8935[45100000]      <1> 	mov [esploc], esi
  1629 00000ECB E844010000          <1> 	call expdump
  1630 00000ED0 E9DDFFFFFF          <1> 	jmp dumpstack
  1631                              <1> donedump:
  1632 00000ED5 0F20C1              <1> 	mov ecx, cr0
  1633 00000ED8 E837010000          <1> 	call expdump
  1634 00000EDD 0F20D1              <1> 	mov ecx, cr2
  1635 00000EE0 E82F010000          <1> 	call expdump
  1636 00000EE5 0F20D9              <1> 	mov ecx, cr3
  1637 00000EE8 E827010000          <1> 	call expdump
  1638 00000EED 0F20E1              <1> 	mov ecx, cr4
  1639 00000EF0 E81F010000          <1> 	call expdump
  1640 00000EF5 0F00C9              <1> 	str ecx
  1641 00000EF8 E817010000          <1> 	call expdump
  1642 00000EFD 0F010D[64100000]    <1> 	sidt [igdtcache]
  1643 00000F04 8B0D[66100000]      <1> 	mov ecx, [igdtcache + 2]
  1644 00000F0A E805010000          <1> 	call expdump
  1645 00000F0F 0F0105[64100000]    <1> 	sgdt [igdtcache]
  1646 00000F16 8B0D[66100000]      <1> 	mov ecx, [igdtcache + 2]
  1647 00000F1C E8F3000000          <1> 	call expdump
  1648 00000F21 0F00C1              <1> 	sldt ecx
  1649 00000F24 E8EB000000          <1> 	call expdump
  1650 00000F29 8B35[45100000]      <1> 	mov esi, [esploc]
  1651 00000F2F 368B7C2434          <1> 	mov edi, [ss:esp + 52]
  1652 00000F34 81C710000000        <1> 	add edi, 16
  1653 00000F3A 893D[60100000]      <1> 	mov [codelocend], edi
  1654 00000F40 81EF20000000        <1> 	sub edi, 32
  1655                              <1> dumpcodeloop:
  1656 00000F46 893D[5C100000]      <1> 	mov [codeloc], edi
  1657 00000F4C 8B0F                <1> 	mov ecx, [edi]
  1658 00000F4E E8C1000000          <1> 	call expdump
  1659 00000F53 8B3D[5C100000]      <1> 	mov edi, [codeloc]
  1660 00000F59 81C704000000        <1> 	add edi, 4
  1661 00000F5F 3B3D[60100000]      <1> 	cmp edi, [codelocend]
  1662 00000F65 72DF                <1> 	jb dumpcodeloop
  1663 00000F67 BE[A50F0000]        <1> 	mov esi, backtoosmsg
  1664                              <1> %ifdef gui.included
  1665                              <1> 	cmp byte [guion], 0
  1666                              <1> 	je backtomsg
  1667                              <1> guibacktomsg:
  1668                              <1> 	mov dx, [locunhandx]
  1669                              <1> 	mov cx, [locunhandy]
  1670                              <1> 	mov ax, 1
  1671                              <1> 	xor bx, bx
  1672                              <1> 	call showstring2
  1673                              <1> 	jmp backtomsgdone
  1674                              <1> backtomsg:
  1675                              <1> %endif
  1676 00000F6C E88B0C0000          <1> 	call print
  1677                              <1> backtomsgdone:
  1678 00000F71 30C0                <1> 	xor al, al
  1679 00000F73 E89C120000          <1> 	call rdcharint
  1680 00000F78 803D[5B100000]03    <1> 	cmp byte [intprob], 3
  1681 00000F7F 7511                <1> 	jne nodebugint
  1682                              <1> %ifdef gui.included
  1683                              <1> 	cmp byte [guion], 0
  1684                              <1> 	je nodebuggui
  1685                              <1> 	mov bx, [backgroundcache]
  1686                              <1> 	mov [background], bx
  1687                              <1> 	xor bx, bx
  1688                              <1> 	mov byte [mousedisabled], 0
  1689                              <1> 	call guiclear
  1690                              <1> 	call reloadallgraphics
  1691                              <1> 	call termcopy
  1692                              <1> nodebuggui:
  1693                              <1> %endif
  1694 00000F81 8B35[49100000]      <1> 	mov esi, [espfirst]
  1695 00000F87 89F4                <1> 	mov esp, esi
  1696 00000F89 61                  <1> 	popad
  1697 00000F8A 17                  <1> 	pop ss
  1698 00000F8B 0FA9                <1> 	pop gs
  1699 00000F8D 0FA1                <1> 	pop fs
  1700 00000F8F 07                  <1> 	pop es
  1701 00000F90 1F                  <1> 	pop ds
  1702 00000F91 CF                  <1> 	iret
  1703                              <1> nodebugint:
  1704 00000F92 61                  <1> 	popad
  1705 00000F93 17                  <1> 	pop ss
  1706 00000F94 0FA9                <1> 	pop gs
  1707 00000F96 0FA1                <1> 	pop fs
  1708 00000F98 07                  <1> 	pop es
  1709 00000F99 1F                  <1> 	pop ds
  1710 00000F9A 81C408000000        <1> 	add esp, 8
  1711                              <1> ;	popf ;pop the cs segment selector into eflags
  1712                              <1> ;	popf ;then pop the flags
  1713                              <1> %ifdef gui.included
  1714                              <1> 	cmp byte [guion], 0
  1715                              <1> 	je returnunhandgui
  1716                              <1> 	mov bx, [backgroundcache]
  1717                              <1> 	mov [background], bx
  1718                              <1> 	xor bx, bx
  1719                              <1> 	mov byte [mousedisabled], 0
  1720                              <1> 	call guiclear
  1721                              <1> 	call reloadallgraphics
  1722                              <1> 	call termcopy
  1723                              <1> %endif
  1724                              <1> returnunhandgui:
  1725 00000FA0 E9D21A0000          <1> 	jmp nwcmd
  1726 00000FA5 506C6561736520706F- <1> backtoosmsg db "Please post any problems in the Issues section at solleros.googlecode.com",10
  1727 00000FAE 737420616E79207072- <1>
  1728 00000FB7 6F626C656D7320696E- <1>
  1729 00000FC0 207468652049737375- <1>
  1730 00000FC9 65732073656374696F- <1>
  1731 00000FD2 6E20617420736F6C6C- <1>
  1732 00000FDB 65726F732E676F6F67- <1>
  1733 00000FE4 6C65636F64652E636F- <1>
  1734 00000FED 6D0A                <1>
  1735 00000FEF 507265737320616E79- <1> 			db "Press any key to return to SollerOS",10,0
  1736 00000FF8 206B657920746F2072- <1>
  1737 00001001 657475726E20746F20- <1>
  1738 0000100A 536F6C6C65724F530A- <1>
  1739 00001013 00                  <1>
  1740                              <1> expdump:
  1741 00001014 8B35[4D100000]      <1> 	mov esi, [esiloc]
  1742 0000101A 89F7                <1> 	mov edi, esi
  1743 0000101C 81C70F000000        <1> 	add edi, 15
  1744 00001022 81C604000000        <1> 	add esi, 4
  1745 00001028 893D[4D100000]      <1> 	mov [esiloc], edi
  1746 0000102E 81EF03000000        <1> 	sub edi, 3
  1747 00001034 E8D61E0000          <1> 	call converthex
  1748 00001039 81EE04000000        <1> 	sub esi, 4
  1749                              <1> %ifdef gui.included
  1750                              <1> 	cmp byte [guion], 0
  1751                              <1> 	je near expdumptext
  1752                              <1> 	mov cx, [locunhandy]
  1753                              <1> 	mov dx, [locunhandx]
  1754                              <1> 	mov ax, 1
  1755                              <1> 	xor bx, bx
  1756                              <1> 	call showstring2
  1757                              <1> 	mov [locunhandy], cx
  1758                              <1> 	mov [locunhandx], dx
  1759                              <1> 	ret
  1760                              <1> %endif
  1761                              <1> expdumptext:
  1762 0000103F E8B80B0000          <1> 	call print
  1763 00001044 C3                  <1> 	ret
  1764 00001045 00000000            <1> esploc dd 0
  1765 00001049 00000000            <1> espfirst dd 0
  1766 0000104D 00000000            <1> esiloc dd 0
  1767 00001051 00000000            <1> esiregbuf dd 0
  1768 00001055 0100                <1> locunhandy dw 1
  1769 00001057 0100                <1> locunhandx dw 1
  1770 00001059 0000                <1> backgroundcache dw 0
  1771 0000105B 00                  <1> intprob db 0
  1772 0000105C 00000000            <1> codeloc dd 0
  1773 00001060 00000000            <1> codelocend dd 0
  1774 00001064 000000000000        <1> igdtcache dw 0,0,0
  1775                              <1> 	unhandmsg:	
  1776 0000106A 494E543D3030303030- <1> 			db "INT=00000000",255,10,0
  1777 00001073 303030FF0A00        <1>
  1778                              <1> unhndrg:
  1779 00001079 FFFFFFFF3030303030- <1> 	times 7 db 255,255,255,255,"00000000  ",0	;;this dumps the stack before the stack frame in question
  1780 00001082 303030202000<rept>  <1>
  1781 000010E2 FFFFFFFF3030303030- <1> 			db 255,255,255,255,"00000000",255,10,0
  1782 000010EB 303030FF0A00        <1>
  1783 000010F1 FFFFFFFF3030303030- <1> 	times 7 db 255,255,255,255,"00000000  ",0	;;this dumps the stack before the stack frame in question
  1784 000010FA 303030202000<rept>  <1>
  1785 0000115A FFFFFFFF3030303030- <1> 			db 255,255,255,255,"00000000",255,10,0
  1786 00001163 303030FF0A00        <1>
  1787 00001169 FFFFFFFF3030303030- <1> 	times 7 db 255,255,255,255,"00000000  ",0	;;this dumps the stack before the stack frame in question
  1788 00001172 303030202000<rept>  <1>
  1789 000011D2 FFFFFFFF3030303030- <1> 			db 255,255,255,255,"00000000",255,10,0
  1790 000011DB 303030FF0A00        <1>
  1791 000011E1 FFFFFFFF3030303030- <1> 	times 7 db 255,255,255,255,"00000000  ",0	;;this dumps the stack before the stack frame in question
  1792 000011EA 303030202000<rept>  <1>
  1793 0000124A FFFFFFFF3030303030- <1> 			db 255,255,255,255,"00000000",255,10,0
  1794 00001253 303030FF0A00        <1>
  1795                              <1> unhandregs:
  1796 00001259 45464C3D3030303030- <1> 			db "EFL=00000000  ",0
  1797 00001262 303030202000        <1>
  1798 00001268 43533A3D3030303030- <1> 			db "CS:=00000000  ",0
  1799 00001271 303030202000        <1>
  1800 00001277 4549503D3030303030- <1> 			db "EIP=00000000",255,10,0
  1801 00001280 303030FF0A00        <1>
  1802 00001286 44533A3D3030303030- <1> 			db "DS:=00000000  ",0
  1803 0000128F 303030202000        <1>
  1804 00001295 45533A3D3030303030- <1> 			db "ES:=00000000  ",0
  1805 0000129E 303030202000        <1>
  1806 000012A4 46533A3D3030303030- <1> 			db "FS:=00000000  ",0
  1807 000012AD 303030202000        <1>
  1808 000012B3 47533A3D3030303030- <1> 			db "GS:=00000000  ",0
  1809 000012BC 303030202000        <1>
  1810 000012C2 53533A3D3030303030- <1> 			db "SS:=00000000",255,10,0
  1811 000012CB 303030FF0A00        <1>
  1812 000012D1 4541583D3030303030- <1> 			db "EAX=00000000  ",0
  1813 000012DA 303030202000        <1>
  1814 000012E0 4543583D3030303030- <1> 			db "ECX=00000000  ",0
  1815 000012E9 303030202000        <1>
  1816 000012EF 4544583D3030303030- <1> 			db "EDX=00000000  ",0
  1817 000012F8 303030202000        <1>
  1818 000012FE 4542583D3030303030- <1> 			db "EBX=00000000",255,10,0
  1819 00001307 303030FF0A00        <1>
  1820 0000130D 4553503D3030303030- <1> 			db "ESP=00000000  ",0
  1821 00001316 303030202000        <1>
  1822 0000131C 4542503D3030303030- <1> 			db "EBP=00000000  ",0
  1823 00001325 303030202000        <1>
  1824 0000132B 4553493D3030303030- <1> 			db "ESI=00000000  ",0
  1825 00001334 303030202000        <1>
  1826 0000133A 4544493D3030303030- <1> unhndrgend:	db "EDI=00000000",255,10,0
  1827 00001343 303030FF0A00        <1>
  1828 00001349 4352303D3030303030- <1> 			db "CR0=00000000  ",0
  1829 00001352 303030202000        <1>
  1830 00001358 4352323D3030303030- <1> 			db "CR2=00000000  ",0
  1831 00001361 303030202000        <1>
  1832 00001367 4352333D3030303030- <1> 			db "CR3=00000000  ",0
  1833 00001370 303030202000        <1>
  1834 00001376 4352343D3030303030- <1> 			db "CR4=00000000",255,10,0
  1835 0000137F 303030FF0A00        <1>
  1836 00001385 54523A3D3030303030- <1> 			db "TR:=00000000  ",0
  1837 0000138E 303030202000        <1>
  1838 00001394 4944543D3030303030- <1> 			db "IDT=00000000  ",0
  1839 0000139D 303030202000        <1>
  1840 000013A3 4744543D3030303030- <1> 			db "GDT=00000000  ",0
  1841 000013AC 303030202000        <1>
  1842 000013B2 4C44543D3030303030- <1> 			db "LDT=00000000",255,10,0
  1843 000013BB 303030FF0A00        <1>
  1844 000013C1 FFFFFFFF3030303030- <1> unhandcode: times 2 db 255,255,255,255,"00000000  ",0	;;this dumps the code before and after the interrupt in question
  1845 000013CA 303030202000<rept>  <1>
  1846 000013DF FFFFFFFF3030303030- <1> 			db 255,255,255,255,"00000000 ",255,0
  1847 000013E8 30303020FF00        <1>
  1848 000013EE FFFFFF5B3030303030- <1> 			db 255,255,255,"[00000000] ",0
  1849 000013F7 3030305D2000        <1>
  1850 000013FD FFFFFFFF3030303030- <1> 			times 3 db 255,255,255,255,"00000000  ",0
  1851 00001406 303030202000<rept>  <1>
  1852 0000142A FFFFFFFF3030303030- <1> 			db 255,255,255,255,"00000000",255,10,0
  1853 00001433 303030FF0A00        <1>
  1854                              <1> unhandmsgend:
  1855                              <1> 
  1856                              <1> errortypes:
  1857 00001439 [7D140000]          <1> 			dd err0
  1858 0000143D [E6140000]          <1> 			dd err1
  1859 00001441 [47150000]          <1> 			dd err2
  1860 00001445 [9C150000]          <1> 			dd err3
  1861 00001449 [00160000]          <1> 			dd err4
  1862 0000144D [52160000]          <1> 			dd err5
  1863 00001451 [BC160000]          <1> 			dd err6
  1864 00001455 [24170000]          <1> 			dd err7
  1865 00001459 [6E170000]          <1> 			dd err8
  1866 0000145D [CB170000]          <1> 			dd err9
  1867 00001461 [24180000]          <1> 			dd err10
  1868 00001465 [6F180000]          <1> 			dd err11
  1869 00001469 [BF180000]          <1> 			dd err12
  1870 0000146D [18190000]          <1> 			dd err13
  1871 00001471 [7B190000]          <1> 			dd err14
  1872 00001475 [B7190000]          <1> 			dd err15
  1873                              <1> errortypesend:
  1874 00001479 [421A0000]          <1> 			dd unknownerror
  1875                              <1> 			
  1876 0000147D 4469766973696F6E20- <1> err0	db "Division by zero:",10
  1877 00001486 6279207A65726F3A0A  <1>
  1878 0000148F 546563686E6963616C- <1> 		db "Technically lim a÷x = ∞ when a is any real number. Happy Easter!",10
  1879 00001498 6C79206C696D2061C3- <1>
  1880 000014A1 B778203D20E2889E20- <1>
  1881 000014AA 7768656E2061206973- <1>
  1882 000014B3 20616E79207265616C- <1>
  1883 000014BC 206E756D6265722E20- <1>
  1884 000014C5 486170707920456173- <1>
  1885 000014CE 746572210A          <1>
  1886 000014D3 202020202020202020- <1> 		db "            x→0",10,0
  1887 000014DC 20202078E28692300A- <1>
  1888 000014E5 00                  <1>
  1889                              <1> 		
  1890 000014E6 53696E676C652D7374- <1> err1	db "Single-step/Breakpoint:",10
  1891 000014EF 65702F427265616B70- <1>
  1892 000014F8 6F696E743A0A        <1>
  1893 000014FE 4120627265616B706F- <1> 		db "A breakpoint fault, breakpoint trap, or single-step trap was triggered.",10,0
  1894 00001507 696E74206661756C74- <1>
  1895 00001510 2C20627265616B706F- <1>
  1896 00001519 696E7420747261702C- <1>
  1897 00001522 206F722073696E676C- <1>
  1898 0000152B 652D73746570207472- <1>
  1899 00001534 617020776173207472- <1>
  1900 0000153D 696767657265642E0A- <1>
  1901 00001546 00                  <1>
  1902                              <1> 		
  1903 00001547 4E6F6E6D61736B6162- <1> err2	db "Nonmaskable interrupt:",10
  1904 00001550 6C6520696E74657272- <1>
  1905 00001559 7570743A0A          <1>
  1906 0000155E 412068617264776172- <1> 		db "A hardware interrupt was triggered that could not be masked.",10,0
  1907 00001567 6520696E7465727275- <1>
  1908 00001570 707420776173207472- <1>
  1909 00001579 696767657265642074- <1>
  1910 00001582 68617420636F756C64- <1>
  1911 0000158B 206E6F74206265206D- <1>
  1912 00001594 61736B65642E0A00    <1>
  1913                              <1> 		
  1914 0000159C 427265616B706F696E- <1> err3	db "Breakpoint:",10
  1915 000015A5 743A0A              <1>
  1916 000015A8 5468697320696E7465- <1> 		db "This interrupt is used in programs to show the stack and registers and can be",10
  1917 000015B1 727275707420697320- <1>
  1918 000015BA 7573656420696E2070- <1>
  1919 000015C3 726F6772616D732074- <1>
  1920 000015CC 6F2073686F77207468- <1>
  1921 000015D5 6520737461636B2061- <1>
  1922 000015DE 6E6420726567697374- <1>
  1923 000015E7 65727320616E642063- <1>
  1924 000015F0 616E2062650A        <1>
  1925 000015F6 69676E6F7265642E0A- <1> 		db "ignored.",10,0
  1926 000015FF 00                  <1>
  1927                              <1> 		
  1928 00001600 4F766572666C6F773A- <1> err4	db "Overflow:",10
  1929 00001609 0A                  <1>
  1930 0000160A 5468652070726F6365- <1> 		db "The processor ran into an INTO instruction with the overflow flag set.",10,0
  1931 00001613 73736F722072616E20- <1>
  1932 0000161C 696E746F20616E2049- <1>
  1933 00001625 4E544F20696E737472- <1>
  1934 0000162E 756374696F6E207769- <1>
  1935 00001637 746820746865206F76- <1>
  1936 00001640 6572666C6F7720666C- <1>
  1937 00001649 6167207365742E0A00  <1>
  1938                              <1> 		
  1939 00001652 426F756E6473206368- <1> err5	db "Bounds check:",10
  1940 0000165B 65636B3A0A          <1>
  1941 00001660 5468652070726F6365- <1> 		db "The processor rebounded from a BOUND instruction run on an operand that was out",10
  1942 00001669 73736F72207265626F- <1>
  1943 00001672 756E6465642066726F- <1>
  1944 0000167B 6D206120424F554E44- <1>
  1945 00001684 20696E737472756374- <1>
  1946 0000168D 696F6E2072756E206F- <1>
  1947 00001696 6E20616E206F706572- <1>
  1948 0000169F 616E64207468617420- <1>
  1949 000016A8 776173206F75740A    <1>
  1950 000016B0 6F6620626F756E6473- <1> 		db "of bounds.",10,0
  1951 000016B9 2E0A00              <1>
  1952                              <1> 		
  1953 000016BC 496E76616C6964206F- <1> err6	db "Invalid opcode:",10
  1954 000016C5 70636F64653A0A      <1>
  1955 000016CC 5468652070726F6365- <1> 		db "The processor has no idea what it was trying to execute. Don't run SSE4 code",10
  1956 000016D5 73736F722068617320- <1>
  1957 000016DE 6E6F20696465612077- <1>
  1958 000016E7 686174206974207761- <1>
  1959 000016F0 7320747279696E6720- <1>
  1960 000016F9 746F20657865637574- <1>
  1961 00001702 652E20446F6E277420- <1>
  1962 0000170B 72756E205353453420- <1>
  1963 00001714 636F64650A          <1>
  1964 00001719 6F6E20343836277321- <1> 		db "on 486's!",10,0
  1965 00001722 0A00                <1>
  1966                              <1> 		
  1967 00001724 436F70726F63657373- <1> err7	db "Coprocessor not available:",10
  1968 0000172D 6F72206E6F74206176- <1>
  1969 00001736 61696C61626C653A0A  <1>
  1970 0000173F 446F6E277420796F75- <1> 		db "Don't you know they don't make those anymore!",10,0
  1971 00001748 206B6E6F7720746865- <1>
  1972 00001751 7920646F6E2774206D- <1>
  1973 0000175A 616B652074686F7365- <1>
  1974 00001763 20616E796D6F726521- <1>
  1975 0000176C 0A00                <1>
  1976                              <1> 		
  1977 0000176E 446F75626C65206661- <1> err8	db "Double fault:",10
  1978 00001777 756C743A0A          <1>
  1979 0000177C 546865206578636570- <1> 		db "The exception handler could not handle that it could not handle an exception.",10,0
  1980 00001785 74696F6E2068616E64- <1>
  1981 0000178E 6C657220636F756C64- <1>
  1982 00001797 206E6F742068616E64- <1>
  1983 000017A0 6C6520746861742069- <1>
  1984 000017A9 7420636F756C64206E- <1>
  1985 000017B2 6F742068616E646C65- <1>
  1986 000017BB 20616E206578636570- <1>
  1987 000017C4 74696F6E2E0A00      <1>
  1988                              <1> 		
  1989 000017CB 436F70726F63657373- <1> err9	db "Coprocessor segment overrun:",10,0
  1990 000017D4 6F72207365676D656E- <1>
  1991 000017DD 74206F76657272756E- <1>
  1992 000017E6 3A0A00              <1>
  1993 000017E9 54686973206E657665- <1> 		db "This never happens in modern computers, and never should.",10,0
  1994 000017F2 722068617070656E73- <1>
  1995 000017FB 20696E206D6F646572- <1>
  1996 00001804 6E20636F6D70757465- <1>
  1997 0000180D 72732C20616E64206E- <1>
  1998 00001816 657665722073686F75- <1>
  1999 0000181F 6C642E0A00          <1>
  2000                              <1> 
  2001 00001824 496E76616C69642054- <1> err10	db "Invalid TSS:",10
  2002 0000182D 53533A0A            <1>
  2003 00001831 546865205453532074- <1> 		db "The TSS that was switched to is invalid. Nothing funny here.",10,0
  2004 0000183A 686174207761732073- <1>
  2005 00001843 776974636865642074- <1>
  2006 0000184C 6F20697320696E7661- <1>
  2007 00001855 6C69642E204E6F7468- <1>
  2008 0000185E 696E672066756E6E79- <1>
  2009 00001867 20686572652E0A00    <1>
  2010                              <1> 		
  2011 0000186F 5365676D656E74206E- <1> err11	db "Segment not present:",10
  2012 00001878 6F742070726573656E- <1>
  2013 00001881 743A0A              <1>
  2014 00001884 546865207072657365- <1> 		db "The present bit of the segment descriptor is set to zero.",10,0
  2015 0000188D 6E7420626974206F66- <1>
  2016 00001896 20746865207365676D- <1>
  2017 0000189F 656E74206465736372- <1>
  2018 000018A8 6970746F7220697320- <1>
  2019 000018B1 73657420746F207A65- <1>
  2020 000018BA 726F2E0A00          <1>
  2021                              <1> 		
  2022 000018BF 537461636B20657863- <1> err12	db "Stack exception:",10
  2023 000018C8 657074696F6E3A0A    <1>
  2024 000018D0 546865205353206465- <1> 		db "The SS descriptor is invalid or not present or its limit is too small.",10,0
  2025 000018D9 7363726970746F7220- <1>
  2026 000018E2 697320696E76616C69- <1>
  2027 000018EB 64206F72206E6F7420- <1>
  2028 000018F4 70726573656E74206F- <1>
  2029 000018FD 7220697473206C696D- <1>
  2030 00001906 697420697320746F6F- <1>
  2031 0000190F 20736D616C6C2E0A00  <1>
  2032                              <1> 		
  2033 00001918 47656E6572616C2070- <1> err13	db "General protection violation:",10
  2034 00001921 726F74656374696F6E- <1>
  2035 0000192A 2076696F6C6174696F- <1>
  2036 00001933 6E3A0A              <1>
  2037 00001936 596F752076696F6C61- <1> 		db "You violated the computer. Step away slowly. The FBI is on its way.",10,0
  2038 0000193F 746564207468652063- <1>
  2039 00001948 6F6D70757465722E20- <1>
  2040 00001951 537465702061776179- <1>
  2041 0000195A 20736C6F776C792E20- <1>
  2042 00001963 546865204642492069- <1>
  2043 0000196C 73206F6E2069747320- <1>
  2044 00001975 7761792E0A00        <1>
  2045                              <1> 		
  2046 0000197B 50616765206661756C- <1> err14	db "Page fault:",10
  2047 00001984 743A0A              <1>
  2048 00001987 546865207061676520- <1> 		db "The page that was requested was not available.",10,0
  2049 00001990 746861742077617320- <1>
  2050 00001999 726571756573746564- <1>
  2051 000019A2 20776173206E6F7420- <1>
  2052 000019AB 617661696C61626C65- <1>
  2053 000019B4 2E0A00              <1>
  2054                              <1> 		
  2055 000019B7 526573657276656420- <1> err15	db "Reserved for Plan R:",10
  2056 000019C0 666F7220506C616E20- <1>
  2057 000019C9 523A0A              <1>
  2058 000019CC 5468697320696E7465- <1> 		db "This interrupt is reserved for usage only by the military when it is necessary",10
  2059 000019D5 727275707420697320- <1>
  2060 000019DE 726573657276656420- <1>
  2061 000019E7 666F72207573616765- <1>
  2062 000019F0 206F6E6C7920627920- <1>
  2063 000019F9 746865206D696C6974- <1>
  2064 00001A02 617279207768656E20- <1>
  2065 00001A0B 6974206973206E6563- <1>
  2066 00001A14 6573736172790A      <1>
  2067 00001A1B 746F20696E69746961- <1> 		db "to initiate a full-scale coup d'",130,"tat.",10,0
  2068 00001A24 746520612066756C6C- <1>
  2069 00001A2D 2D7363616C6520636F- <1>
  2070 00001A36 757020642782746174- <1>
  2071 00001A3F 2E0A00              <1>
  2072                              <1> 		
  2073 00001A42 576861742074686520- <1> unknownerror db "What the hell just happened? Is everyone okay? Hard drive? Video card?",10
  2074 00001A4B 68656C6C206A757374- <1>
  2075 00001A54 2068617070656E6564- <1>
  2076 00001A5D 3F2049732065766572- <1>
  2077 00001A66 796F6E65206F6B6179- <1>
  2078 00001A6F 3F2048617264206472- <1>
  2079 00001A78 6976653F2056696465- <1>
  2080 00001A81 6F20636172643F0A    <1>
  2081 00001A89 4D656D6F72793F2041- <1> 			db	"Memory? Are you there?",10,0
  2082 00001A92 726520796F75207468- <1>
  2083 00001A9B 6572653F0A00        <1>
  2084                              <1> %else
  2085                              <1> unhand:	
  2086                              <1> 	%assign i 0
  2087                              <1> 	%rep 32
  2088                              <1> 	mov byte [intprob], i
  2089                              <1> 	jmp unhand2
  2090                              <1> 	%assign i i+1
  2091                              <1> 	%endrep
  2092                              <1> unhand2:
  2093                              <1> 	cmp byte [intprob], 3
  2094                              <1> 	je handled	;if it is a debug interrupt, it is auto handled
  2095                              <1> 	mov ebx, 0xDEADCD00 ;this shows that an exception occured even though more detailed info cannot be shown
  2096                              <1> 						;CD stands for the interrupt code, DEAD shows that the program died because of the int
  2097                              <1> 	mov bl, [intprob]
  2098                              <1> 	jmp exitprog
  2099                              <1> intprob db 0
  2100                              <1> %endif
  2101                                      %include "source/ints.asm"
  2102                              <1> newints:	;for great justice
  2103 00001AA1 80FC00              <1> 	cmp ah, 0
  2104 00001AA4 0F849A000000        <1> 	je near exitprog   ;kills app
  2105 00001AAA 80FC01              <1> 	cmp ah, 1
  2106 00001AAD 0F8419010000        <1> 	je near prntstr  ;print string
  2107 00001AB3 80FC02              <1> 	cmp ah, 2
  2108 00001AB6 0F84BC010000        <1> 	je near readstr	;read string
  2109 00001ABC 80FC03              <1> 	cmp ah, 3
  2110 00001ABF 0F84DC010000        <1> 	je near clearscrn	;clear screen
  2111 00001AC5 80FC04              <1> 	cmp ah, 4
  2112 00001AC8 0F8451020000        <1> 	je near prntreadstr	;read and print string
  2113 00001ACE 80FC05              <1> 	cmp ah, 5
  2114 00001AD1 0F8431070000        <1> 	je near readchar	;get char
  2115 00001AD7 80FC06              <1> 	cmp ah, 6
  2116 00001ADA 0F8498070000        <1> 	je near prntchar	;print char
  2117 00001AE0 80FC07              <1> 	cmp ah, 7
  2118 00001AE3 0F84C1090000        <1> 	je near openfile	;read file
  2119                              <1> ;	cmp ah, 8
  2120                              <1> ;	je near closefile	;close file
  2121 00001AE9 80FC09              <1> 	cmp ah, 9
  2122 00001AEC 0F84C2090000        <1> 	je near num2str	;convert number to string
  2123 00001AF2 80FC0A              <1> 	cmp ah, 10
  2124 00001AF5 0F84D1090000        <1> 	je near str2num	;convert string to number
  2125                              <1> %ifdef threads.included
  2126 00001AFB 80FC0B              <1> 	cmp ah, 11
  2127 00001AFE 0F84D4090000        <1> 	je near forkthread	;create thread
  2128                              <1> %endif
  2129 00001B04 80FC0C              <1> 	cmp ah, 12
  2130 00001B07 0F84A20A0000        <1> 	je near gettime	;get time
  2131 00001B0D 80FC0D              <1> 	cmp ah, 13
  2132 00001B10 0F84AE0A0000        <1> 	je near settime	;set time
  2133 00001B16 80FC0E              <1> 	cmp ah, 14
  2134 00001B19 0F84B50A0000        <1> 	je near runcmd	;run program
  2135 00001B1F 80FC0F              <1> 	cmp ah, 15
  2136 00001B22 0F84C10A0000        <1> 	je near proginfo ;get program info-location of name/options/number of options/environmental vars
  2137 00001B28 80FC10              <1> 	cmp ah, 16
  2138 00001B2B 0F84E60A0000        <1> 	je near hooksig	;hook code to a signal
  2139                              <1> %ifdef gui.included
  2140                              <1> 	cmp ah, 17
  2141                              <1> 	je near guiint	;GUI operations
  2142                              <1> %endif
  2143                              <1> %ifdef sound.included
  2144 00001B31 80FC12              <1> 	cmp ah, 18
  2145 00001B34 0F84ED0A0000        <1> 	je near soundint	;sound operations
  2146                              <1> %endif
  2147                              <1> %ifdef network.included
  2148 00001B3A 80FC13              <1> 	cmp ah, 19
  2149 00001B3D 0F84E90A0000        <1> 	je near netint	;networking operations
  2150                              <1> %endif
  2151 00001B43 CF                  <1> 	iret
  2152                              <1> 	%include 'source/interrupts/0_exitprog.asm'
  2153                              <2> exitprog:
  2154 00001B44 66B83000            <2> 	mov ax, NEW_DATA_SEL
  2155 00001B48 8ED8                <2> 	mov ds, ax
  2156 00001B4A 8EC0                <2> 	mov es, ax
  2157 00001B4C 8EE0                <2> 	mov fs, ax
  2158 00001B4E 66B82000            <2> 	mov ax, SYS_DATA_SEL
  2159 00001B52 8EE8                <2> 	mov gs, ax
  2160 00001B54 C705[1D5E0000]0000- <2> 	mov dword [currentthread], 0
  2161 00001B5C 0000                <2>
  2162 00001B5E C705[185E0000]0400- <2> 	mov dword [lastthread], 4
  2163 00001B66 0000                <2>
  2164 00001B68 C605[1C5E0000]00    <2> 	mov byte [threadson], 0 ;for now i need to use this
  2165 00001B6F 8B25[6C7B0300]      <2> 	mov esp, [previousstack] ;and this
  2166 00001B75 81FB00000000        <2> 	cmp ebx, 0
  2167 00001B7B 0F8501000000        <2> 	jne near .error
  2168 00001B81 C3                  <2> 	ret
  2169                              <2> .error:
  2170 00001B82 89D9                <2> 	mov ecx, ebx
  2171 00001B84 B006                <2> 	mov al, 6
  2172 00001B86 A2[702F0000]        <2> 	mov [firsthexshown], al
  2173 00001B8B 51                  <2> 	push ecx
  2174 00001B8C BE[A71B0000]        <2> 	mov esi, .msg1
  2175 00001B91 E855000000          <2> 	call printhighlight
  2176 00001B96 59                  <2> 	pop ecx
  2177 00001B97 E8E9130000          <2> 	call showhex
  2178 00001B9C BE[BC1B0000]        <2> 	mov esi, .msg2
  2179 00001BA1 E845000000          <2> 	call printhighlight
  2180 00001BA6 C3                  <2> 	ret
  2181                              <2> 	
  2182 00001BA7 416E20657869742073- <2> .msg1 db "An exit status of 0x",0
  2183 00001BB0 7461747573206F6620- <2>
  2184 00001BB9 307800              <2>
  2185 00001BBC 087761732072657475- <2> .msg2 db 8,"was returned.",10,0
  2186 00001BC5 726E65642E0A00      <2>
  2187                              <1> 	%include 'source/interrupts/1_prntstr.asm'
  2188                              <2> prntstr:
  2189 00001BCC 30E4                <2> xor ah, ah
  2190 00001BCE E830000000          <2> call printint
  2191 00001BD3 E9B3E6FFFF          <2> jmp timerinterrupt
  2192                              <2> 
  2193                              <2> 	printquiet:
  2194 00001BD8 6631C0              <2> 		xor ax, ax
  2195 00001BDB 66A3[761C0000]      <2> 		mov [endkeyprint], ax
  2196 00001BE1 66BB0700            <2> 		mov bx, 7
  2197 00001BE5 E832000000          <2> 		call printint.b
  2198 00001BEA C3                  <2> 		ret
  2199                              <2> 
  2200                              <2> 	printhighlight:
  2201 00001BEB 6631C0              <2> 		xor ax, ax
  2202 00001BEE 66BBF000            <2> 		mov bx, 0xF0
  2203 00001BF2 E90C000000          <2> 		jmp printint
  2204                              <2> 
  2205                              <2> 	printline:
  2206 00001BF7 BE[C3620000]        <2> 		mov esi, line
  2207                              <2>     print:
  2208 00001BFC 6631C0              <2> 		xor ax, ax
  2209 00001BFF 66BB0700            <2> 		mov bx, 7
  2210                              <2> 	printint:	;print line, ax=last key,bx=modifier, esi=buffer
  2211 00001C03 56                  <2> 		push esi
  2212 00001C04 66A3[761C0000]      <2> 		mov [endkeyprint], ax
  2213 00001C0A E80D000000          <2> 		call .b
  2214 00001C0F 89F1                <2> 		mov ecx, esi
  2215 00001C11 5F                  <2> 		pop edi
  2216 00001C12 29F9                <2> 		sub ecx, edi
  2217 00001C14 51                  <2> 		push ecx
  2218 00001C15 E8170A0000          <2> 		call termcopy
  2219 00001C1A 59                  <2> 		pop ecx
  2220 00001C1B C3                  <2> 		ret
  2221                              <2> 	.b:	
  2222 00001C1C 53                  <2> 		push ebx
  2223 00001C1D 31C0                <2> 		xor eax, eax
  2224 00001C1F 8A06                <2> 		mov al, [esi]
  2225 00001C21 3CFF                <2> 		cmp al, 0xFF
  2226 00001C23 7435                <2> 		je .doneutf
  2227 00001C25 3CC0                <2> 		cmp al, 0xC0
  2228 00001C27 7231                <2> 		jb .doneutf
  2229 00001C29 3CE0                <2> 		cmp al, 0xE0
  2230 00001C2B 721A                <2> 		jb .two
  2231 00001C2D 46                  <2> 		inc esi
  2232 00001C2E 8A2E                <2> 		mov ch, [esi]
  2233 00001C30 46                  <2> 		inc esi
  2234 00001C31 8A0E                <2> 		mov cl, [esi]
  2235 00001C33 C0E004              <2> 		shl al, 4
  2236 00001C36 C0E102              <2> 		shl cl, 2
  2237 00001C39 66C1E902            <2> 		shr cx, 2
  2238 00001C3D 08C5                <2> 		or ch, al
  2239 00001C3F 6689C8              <2> 		mov ax, cx
  2240 00001C42 E913000000          <2> 		jmp .doneutf
  2241                              <2> 	.two:
  2242 00001C47 8A2E                <2> 		mov ch, [esi]
  2243 00001C49 46                  <2> 		inc esi
  2244 00001C4A 8A0E                <2> 		mov cl, [esi]
  2245 00001C4C 66C1E102            <2> 		shl cx, 2
  2246 00001C50 C0ED02              <2> 		shr ch, 2
  2247 00001C53 66C1E902            <2> 		shr cx, 2
  2248 00001C57 6689C8              <2> 		mov ax, cx
  2249                              <2> 	.doneutf:
  2250 00001C5A 5B                  <2> 		pop ebx
  2251 00001C5B 663B05[761C0000]    <2> 		cmp ax, [endkeyprint]
  2252 00001C62 7411                <2> 		je .done
  2253 00001C64 663DFFFE            <2> 		cmp ax, 0xFEFF
  2254 00001C68 7405                <2> 		je .noprint
  2255 00001C6A E836060000          <2> 		call prcharq
  2256                              <2> 	.noprint:
  2257 00001C6F 46                  <2> 		inc esi
  2258 00001C70 E9A7FFFFFF          <2> 		jmp .b
  2259                              <2> 	.done:
  2260 00001C75 C3                  <2> 		ret
  2261                              <2> 
  2262 00001C76 0000                <2> endkeyprint dw 0
  2263                              <1> 	%include 'source/interrupts/2_readstr.asm'
  2264                              <2> readstr:
  2265 00001C78 E805000000          <2> call readint
  2266 00001C7D E909E6FFFF          <2> jmp timerinterrupt
  2267                              <2> 
  2268                              <2> 	readint:	;;get line, al=last key, esi = buffer, edi = endbuffer	
  2269 00001C82 89C3                <2> 		mov ebx, eax
  2270                              <2> 	.b:
  2271 00001C84 53                  <2> 		push ebx
  2272 00001C85 57                  <2> 		push edi
  2273 00001C86 56                  <2> 		push esi
  2274 00001C87 30C0                <2> 		xor al, al
  2275 00001C89 E886050000          <2> 		call rdcharint
  2276 00001C8E 5E                  <2> 		pop esi
  2277 00001C8F 8806                <2> 		mov [esi], al
  2278 00001C91 46                  <2> 		inc esi
  2279 00001C92 5F                  <2> 		pop edi
  2280 00001C93 5B                  <2> 		pop ebx
  2281 00001C94 39FE                <2> 		cmp esi, edi
  2282 00001C96 7304                <2> 		jae .done
  2283 00001C98 38D8                <2> 		cmp al, bl
  2284 00001C9A 75E8                <2> 		jne .b
  2285                              <2> 	.done:
  2286 00001C9C 4E                  <2> 		dec esi
  2287 00001C9D C60600              <2> 		mov byte [esi], 0
  2288 00001CA0 C3                  <2> 		ret
  2289                              <1> 	%include 'source/interrupts/3_clearscrn.asm'
  2290                              <2> clearscrn:
  2291 00001CA1 E805000000          <2> call clear
  2292 00001CA6 E9E0E5FFFF          <2> jmp timerinterrupt
  2293                              <2> %ifdef io.serial
  2294                              <2> clear:
  2295                              <2> 	ret
  2296                              <2> %else
  2297                              <2> clear:
  2298 00001CAB 668B0D[A4240000]    <2> 		mov cx, [charxy]
  2299 00001CB2 BF[01960300]        <2> 		mov edi, videobuf
  2300 00001CB7 31C0                <2> 		xor eax, eax
  2301 00001CB9 A3[9A240000]        <2> 		mov [linebeginpos], eax
  2302 00001CBE A3[9E240000]        <2> 		mov [videobufpos], eax
  2303 00001CC3 6631D2              <2> 		xor dx, dx
  2304 00001CC6 66A3[A2240000]      <2> 		mov [charpos], ax
  2305 00001CCC 66B80700            <2> 		mov ax, 7
  2306 00001CD0 C1E010              <2> 		shl eax, 16
  2307                              <2> 	clearb:
  2308 00001CD3 8907                <2> 		mov [edi], eax
  2309 00001CD5 81C704000000        <2> 		add edi, 4
  2310 00001CDB FEC9                <2> 		dec cl
  2311 00001CDD 80F900              <2> 		cmp cl, 0
  2312 00001CE0 75F1                <2> 		jne clearb
  2313 00001CE2 8A0D[A4240000]      <2> 		mov cl, [charxy]
  2314 00001CE8 FECD                <2> 		dec ch
  2315 00001CEA 80FD00              <2> 		cmp ch, 0
  2316 00001CED 75E4                <2> 		jne clearb
  2317                              <2> 	cleardouble:
  2318 00001CEF BF[81BB0300]        <2> 		mov edi, videobuf2
  2319 00001CF4 668B0D[A4240000]    <2> 		mov cx, [charxy]
  2320 00001CFB 31C0                <2> 		xor eax, eax
  2321                              <2> 	clearc:
  2322 00001CFD 8907                <2> 		mov [edi], eax
  2323 00001CFF 81C704000000        <2> 		add edi, 4
  2324 00001D05 FEC9                <2> 		dec cl
  2325 00001D07 80F900              <2> 		cmp cl, 0
  2326 00001D0A 75F1                <2> 		jne clearc
  2327 00001D0C 8A0D[A4240000]      <2> 		mov cl, [charxy]
  2328 00001D12 FECD                <2> 		dec ch
  2329 00001D14 80FD00              <2> 		cmp ch, 0
  2330 00001D17 75E4                <2> 		jne clearc
  2331 00001D19 E813090000          <2> 		call termcopy
  2332 00001D1E C3                  <2> 		ret
  2333                              <2> %endif
  2334                              <2> 		
  2335                              <1> 	%include 'source/interrupts/4_prntreadstr.asm'
  2336                              <2> prntreadstr:
  2337 00001D1F E80B000000          <2> call rdprint
  2338 00001D24 E962E5FFFF          <2> jmp timerinterrupt
  2339                              <2> 
  2340                              <2> readline:
  2341 00001D29 B00A                <2>   mov al, 10
  2342 00001D2B 66BB0700            <2>   mov bx, 7
  2343                              <2> rdprint:	;print and get line, al=last key, bx=modifier, esi=buffer, edi=bufferend
  2344 00001D2F E80F000000          <2> 	call rdprintdos
  2345 00001D34 50                  <2> 	push eax
  2346 00001D35 A0[F3210000]        <2> 	mov al, [endkeyrdpr]
  2347 00001D3A 30E4                <2> 	xor ah, ah
  2348 00001D3C E84D050000          <2> 	call prcharint
  2349 00001D41 58                  <2> 	pop eax
  2350 00001D42 C3                  <2> 	ret
  2351                              <2> 
  2352                              <2> 	rdprintdos: ;allows dos compatibility with read function
  2353 00001D43 8935[FD210000]      <2> 		mov [buftxtloc], esi
  2354 00001D49 A2[F3210000]        <2> 		mov [endkeyrdpr], al
  2355 00001D4E 66891D[F5210000]    <2> 		mov [modkeyrdpr], bx
  2356 00001D55 8935[F7210000]      <2> 		mov [firstesirdpr], esi
  2357 00001D5B 893D[01220000]      <2> 		mov [endbufferrdpr], edi
  2358 00001D61 8B3D[0DE10300]      <2> 		mov edi, [commandsentered]
  2359 00001D67 893D[09E10300]      <2> 		mov [commandlistentries], edi
  2360                              <2> 	rdprintb:
  2361 00001D6D 56                  <2> 		push esi
  2362 00001D6E B001                <2> 		mov al, 1
  2363 00001D70 E89F040000          <2> 		call rdcharint
  2364 00001D75 8A25[74220000]      <2> 		mov ah, [lastkey + 2]
  2365 00001D7B 88E1                <2> 		mov cl, ah
  2366 00001D7D 5E                  <2> 		pop esi
  2367                              <2> %ifdef io.serial
  2368                              <2> 		cmp ah, 0x41
  2369                              <2> 		je near rdprup
  2370                              <2> 		cmp ah, 0x42
  2371                              <2> 		je near rdprdown
  2372                              <2> 		cmp ah, 0x43
  2373                              <2> 		je near rdprright
  2374                              <2> 		cmp ah, 0x44
  2375                              <2> 		je near rdprleft
  2376                              <2> 		cmp ah, 0x31
  2377                              <2> 		je near rdprhome
  2378                              <2> 		cmp ah, 0x48
  2379                              <2> 		je near rdprhome
  2380                              <2> 		cmp ah, 0x46
  2381                              <2> 		je near rdprend
  2382                              <2> 		cmp ah, 0x33
  2383                              <2> 		je near rdprdel
  2384                              <2> 		cmp ah, 0x34
  2385                              <2> 		je near rdprend
  2386                              <2> %else
  2387 00001D7E 803D[90520000]E0    <2> 		cmp byte [specialkey], 0xE0
  2388 00001D85 753F                <2> 		jne notspecialrdprnt
  2389 00001D87 80FC53              <2> 		cmp ah, 0x53
  2390 00001D8A 0F84C9030000        <2> 		je near rdprdel
  2391 00001D90 80FC47              <2> 		cmp ah, 0x47
  2392 00001D93 0F8481010000        <2> 		je near rdprhome
  2393 00001D99 80FC4F              <2> 		cmp ah, 0x4F
  2394 00001D9C 0F849A010000        <2> 		je near rdprend
  2395 00001DA2 80FC50              <2> 		cmp ah, 0x50
  2396 00001DA5 0F8430020000        <2> 		je near rdprdown
  2397 00001DAB 80FC4D              <2> 		cmp ah, 0x4D
  2398 00001DAE 0F84CA010000        <2> 		je near rdprright
  2399 00001DB4 80FC4B              <2> 		cmp ah, 0x4B
  2400 00001DB7 0F849F010000        <2> 		je near rdprleft
  2401 00001DBD 80FC48              <2> 		cmp ah, 0x48
  2402 00001DC0 0F8458020000        <2> 		je near rdprup
  2403                              <2> 	notspecialrdprnt:
  2404                              <2> %endif
  2405 00001DC6 66A1[72220000]      <2> 		mov ax, [lastkey]
  2406 00001DCC 663D0800            <2> 		cmp ax, 8
  2407 00001DD0 0F84B8030000        <2> 		je near rdprbscheck
  2408 00001DD6 663D0000            <2> 		cmp ax, 0
  2409 00001DDA 7491                <2> 		je rdprintb
  2410 00001DDC 80F900              <2> 		cmp cl, 0
  2411 00001DDF 748C                <2> 		je rdprintb
  2412 00001DE1 663D8000            <2> 		cmp ax, 0x80
  2413 00001DE5 7257                <2> 		jb .normal
  2414 00001DE7 663D0008            <2> 		cmp ax, 0x800
  2415 00001DEB 7321                <2> 		jae .three
  2416 00001DED 46                  <2> 		inc esi
  2417 00001DEE 3B35[01220000]      <2> 		cmp esi, [endbufferrdpr]
  2418 00001DF4 0F83DA000000        <2> 		jae near donerdprinc
  2419 00001DFA 66C1E002            <2> 		shl ax, 2
  2420 00001DFE C0E802              <2> 		shr al, 2
  2421 00001E01 0C80                <2> 		or al, 10000000b
  2422 00001E03 80CCC0              <2> 		or ah, 11000000b
  2423 00001E06 8866FF              <2> 		mov [esi - 1], ah
  2424 00001E09 E930000000          <2> 		jmp .normal
  2425                              <2> .three:	
  2426 00001E0E 81C602000000        <2> 		add esi, 2
  2427 00001E14 3B35[01220000]      <2> 		cmp esi, [endbufferrdpr]
  2428 00001E1A 0F83B4000000        <2> 		jae near donerdprinc
  2429 00001E20 88E1                <2> 		mov cl, ah
  2430 00001E22 C0E904              <2> 		shr cl, 4
  2431 00001E25 80C9E0              <2> 		or cl, 11100000b
  2432 00001E28 884EFE              <2> 		mov [esi - 2], cl
  2433 00001E2B 66C1E004            <2> 		shl ax, 4
  2434 00001E2F 66C1E802            <2> 		shr ax, 2
  2435 00001E33 80CC80              <2> 		or ah, 10000000b
  2436 00001E36 C0E802              <2> 		shr al, 2
  2437 00001E39 0C80                <2> 		or al, 10000000b
  2438 00001E3B 8866FF              <2> 		mov [esi - 1], ah
  2439                              <2> .normal:
  2440 00001E3E 8806                <2> 		mov [esi], al
  2441 00001E40 46                  <2> 		inc esi
  2442 00001E41 66A1[72220000]      <2> 		mov ax, [lastkey]
  2443                              <2> 	bscheckequal:
  2444 00001E47 668B1D[F5210000]    <2> 		mov bx, [modkeyrdpr]
  2445 00001E4E 803D[FC210000]00    <2> 		cmp byte [txtmask], 0
  2446 00001E55 7407                <2> 		je nomasktxt
  2447 00001E57 30E4                <2> 		xor ah, ah
  2448 00001E59 A0[FC210000]        <2> 		mov al, [txtmask]
  2449                              <2> 	nomasktxt:
  2450 00001E5E 56                  <2> 		push esi
  2451 00001E5F 66A3[F1210000]      <2> 		mov [axcache], ax
  2452 00001E65 668B1D[F3210000]    <2> 		mov bx, [endkeyrdpr]
  2453 00001E6C 6639D8              <2> 		cmp ax, bx
  2454 00001E6F 7432                <2> 		je nobackprintbuftxt2
  2455 00001E71 E818040000          <2> 		call prcharint
  2456 00001E76 BE[EC8D0300]        <2> 		mov esi, buftxt2
  2457 00001E7B E858FDFFFF          <2> 		call printquiet
  2458 00001E80 66B82000            <2> 		mov ax, " "
  2459 00001E84 E81C040000          <2> 		call prcharq
  2460 00001E89 66B80800            <2> 		mov ax, 8
  2461 00001E8D 81FE[EC8D0300]      <2> 		cmp esi, buftxt2
  2462 00001E93 740E                <2> 		je nobackprintbuftxt2
  2463                              <2> 	backprintbuftxt2:
  2464 00001E95 E80B040000          <2> 		call prcharq
  2465 00001E9A 4E                  <2> 		dec esi
  2466 00001E9B 81FE[EC8D0300]      <2> 		cmp esi, buftxt2
  2467 00001EA1 77F2                <2> 		ja backprintbuftxt2
  2468                              <2> 	nobackprintbuftxt2:
  2469 00001EA3 663D0A00            <2> 		cmp ax, 10
  2470 00001EA7 7405                <2> 		je nonobackprint
  2471 00001EA9 E8E0030000          <2> 		call prcharint
  2472                              <2> 	nonobackprint:
  2473 00001EAE 5E                  <2> 		pop esi
  2474 00001EAF 3B35[01220000]      <2> 		cmp esi, [endbufferrdpr]
  2475 00001EB5 0F8319000000        <2> 		jae near donerdprinc
  2476 00001EBB 66A1[F1210000]      <2> 		mov ax, [axcache]
  2477 00001EC1 8A25[F3210000]      <2> 		mov ah, [endkeyrdpr]
  2478 00001EC7 38E0                <2> 		cmp al, ah
  2479 00001EC9 0F859EFEFFFF        <2> 		jne rdprintb
  2480 00001ECF E901000000          <2> 		jmp donerdprint
  2481                              <2> 	donerdprinc:
  2482 00001ED4 46                  <2> 		inc esi
  2483                              <2> 	donerdprint:
  2484 00001ED5 4E                  <2> 		dec esi
  2485 00001ED6 BF[EC8D0300]        <2> 		mov edi, buftxt2
  2486                              <2> 	copylaterstuff:
  2487 00001EDB 8A07                <2> 		mov al, [edi]
  2488 00001EDD 3C00                <2> 		cmp al, 0
  2489 00001EDF 7409                <2> 		je nocopylaterstuff
  2490 00001EE1 8806                <2> 		mov [esi], al
  2491 00001EE3 47                  <2> 		inc edi
  2492 00001EE4 46                  <2> 		inc esi
  2493 00001EE5 E9F1FFFFFF          <2> 		jmp copylaterstuff
  2494                              <2> 	nocopylaterstuff:
  2495 00001EEA C60600              <2> 		mov byte [esi], 0
  2496 00001EED E80B000000          <2> 		call clearbuftxt2
  2497 00001EF2 89F1                <2> 		mov ecx, esi
  2498 00001EF4 8B3D[F7210000]      <2> 		mov edi, [firstesirdpr]
  2499 00001EFA 29F9                <2> 		sub ecx, edi
  2500 00001EFC C3                  <2> 		ret
  2501                              <2> 	
  2502                              <2> 	clearbuftxt2:
  2503 00001EFD 30C0                <2> 		xor al, al
  2504 00001EFF BF[EC8D0300]        <2> 		mov edi, buftxt2
  2505                              <2> 	clearbuftxt2lp:
  2506 00001F04 8807                <2> 		mov [edi], al
  2507 00001F06 47                  <2> 		inc edi
  2508 00001F07 81FF[EC910300]      <2> 		cmp edi, buftxt
  2509 00001F0D 75F5                <2> 		jne clearbuftxt2lp
  2510 00001F0F C3                  <2> 		ret
  2511                              <2> 	
  2512                              <2> 	rdprintb2:
  2513 00001F10 E81C070000          <2> 		call termcopy
  2514 00001F15 E953FEFFFF          <2> 		jmp rdprintb
  2515                              <2> 	
  2516                              <2> 	rdprhome:
  2517 00001F1A 3B35[FD210000]      <2> 		cmp esi, [buftxtloc]
  2518 00001F20 0F84EAFFFFFF        <2> 		je near rdprintb2
  2519 00001F26 BF[EC8D0300]        <2> 		mov edi, buftxt2
  2520 00001F2B 8A07                <2> 		mov al, [edi]
  2521 00001F2D E88E020000          <2> 		call shiftbuftxt2
  2522 00001F32 E86E030000          <2> 		call prcharq
  2523 00001F37 E9DEFFFFFF          <2> 		jmp rdprhome
  2524                              <2> 		
  2525                              <2> 	rdprend:
  2526 00001F3C BF[EC8D0300]        <2> 		mov edi, buftxt2
  2527 00001F41 8A07                <2> 		mov al, [edi]
  2528 00001F43 3C00                <2> 		cmp al, 0
  2529 00001F45 0F84C5FFFFFF        <2> 		je near rdprintb2
  2530 00001F4B 8806                <2> 		mov [esi], al
  2531 00001F4D E84C000000          <2> 		call shiftbuftxt2lft
  2532 00001F52 E84E030000          <2> 		call prcharq
  2533 00001F57 E9E0FFFFFF          <2> 		jmp rdprend
  2534                              <2> 	
  2535                              <2> 	rdprleft:
  2536 00001F5C 3B35[FD210000]      <2> 		cmp esi, [buftxtloc]
  2537 00001F62 0F8405FEFFFF        <2> 		je near rdprintb
  2538 00001F68 BF[EC8D0300]        <2> 		mov edi, buftxt2
  2539 00001F6D 8A07                <2> 		mov al, [edi]
  2540 00001F6F E84C020000          <2> 		call shiftbuftxt2
  2541 00001F74 E815030000          <2> 		call prcharint
  2542 00001F79 E9EFFDFFFF          <2> 		jmp rdprintb
  2543                              <2> 		
  2544                              <2> 	rdprright:
  2545 00001F7E BF[EC8D0300]        <2> 		mov edi, buftxt2
  2546 00001F83 8A07                <2> 		mov al, [edi]
  2547 00001F85 3C00                <2> 		cmp al, 0
  2548 00001F87 0F84E0FDFFFF        <2> 		je near rdprintb
  2549 00001F8D 8806                <2> 		mov [esi], al
  2550 00001F8F E80A000000          <2> 		call shiftbuftxt2lft
  2551 00001F94 E8F5020000          <2> 		call prcharint
  2552 00001F99 E9CFFDFFFF          <2> 		jmp rdprintb
  2553                              <2> 		
  2554                              <2> 	shiftbuftxt2lft:
  2555 00001F9E 55                  <2> 		push ebp
  2556 00001F9F 89FD                <2> 		mov ebp, edi
  2557                              <2> 	.lp:
  2558 00001FA1 3C00                <2> 		cmp al, 0
  2559 00001FA3 740B                <2> 		je noshiftbuftxt2lft
  2560 00001FA5 47                  <2> 		inc edi
  2561 00001FA6 8A07                <2> 		mov al, [edi]
  2562 00001FA8 8847FF              <2> 		mov [edi - 1], al
  2563 00001FAB E9F1FFFFFF          <2> 		jmp .lp
  2564                              <2> 	noshiftbuftxt2lft:
  2565 00001FB0 8A4500              <2> 		mov al, [ebp]
  2566 00001FB3 5D                  <2> 		pop ebp
  2567 00001FB4 3CC0                <2> 		cmp al, 0xC0
  2568 00001FB6 7304                <2> 		jae .nofix
  2569 00001FB8 3C80                <2> 		cmp al, 0x80
  2570 00001FBA 73E2                <2> 		jae shiftbuftxt2lft
  2571                              <2> 	.nofix:
  2572 00001FBC 8A06                <2> 		mov al, [esi]
  2573 00001FBE 30E4                <2> 		xor ah, ah
  2574 00001FC0 46                  <2> 		inc esi
  2575 00001FC1 668B1D[F5210000]    <2> 		mov bx, [modkeyrdpr]
  2576 00001FC8 C3                  <2> 		ret
  2577                              <2> 		
  2578                              <2> 	rdprdownbck:
  2579 00001FC9 FECC                <2> 		dec ah
  2580 00001FCB 8825[FB210000]      <2> 		mov [commandedit], ah
  2581 00001FD1 E890000000          <2> 		call rdprbckspc
  2582 00001FD6 E992FDFFFF          <2> 		jmp rdprintb
  2583                              <2> 	
  2584                              <2> 	rdprdown:
  2585 00001FDB 8A25[FB210000]      <2> 		mov ah, [commandedit]
  2586 00001FE1 80FC01              <2> 		cmp ah, 1
  2587 00001FE4 0F8683FDFFFF        <2> 		jbe near rdprintb
  2588 00001FEA 8B3D[0DE10300]      <2> 		mov edi, [commandsentered]
  2589 00001FF0 3B3D[09E10300]      <2> 		cmp edi, [commandlistentries]
  2590 00001FF6 7618                <2> 		jbe .nofix
  2591 00001FF8 8105[09E10300]0200- <2> 		add dword [commandlistentries], 2
  2592 00002000 0000                <2>
  2593 00002002 3B3D[09E10300]      <2> 		cmp edi, [commandlistentries]
  2594 00002008 7706                <2> 		ja .nofix
  2595 0000200A 893D[09E10300]      <2> 		mov [commandlistentries], edi
  2596                              <2> 	.nofix:
  2597 00002010 80FC02              <2> 		cmp ah, 2
  2598 00002013 74B4                <2> 		je rdprdownbck
  2599 00002015 80EC02              <2> 		sub ah, 2
  2600 00002018 8825[FB210000]      <2> 		mov [commandedit], ah
  2601                              <2> 		
  2602                              <2> 	rdprup:
  2603 0000201E 3805[FB210000]      <2> 		cmp [commandedit], al
  2604 00002024 0F8443FDFFFF        <2> 		je near rdprintb
  2605 0000202A 813D[09E10300]0000- <2> 		cmp dword [commandlistentries], 0
  2606 00002032 0000                <2>
  2607 00002034 0F8433FDFFFF        <2> 		je near rdprintb
  2608 0000203A FF0D[09E10300]      <2> 		dec dword [commandlistentries]
  2609                              <2> 	.lp:
  2610 00002040 BF[EC8D0300]        <2> 		mov edi, buftxt2
  2611 00002045 8A07                <2> 		mov al, [edi]
  2612 00002047 3C00                <2> 		cmp al, 0
  2613 00002049 7411                <2> 		je .start
  2614 0000204B 8806                <2> 		mov [esi], al
  2615 0000204D E84CFFFFFF          <2> 		call shiftbuftxt2lft
  2616 00002052 E84E020000          <2> 		call prcharq
  2617 00002057 E9E4FFFFFF          <2> 		jmp .lp
  2618                              <2> 	.start:
  2619 0000205C E805000000          <2> 		call rdprbckspc
  2620 00002061 E94B000000          <2> 		jmp getcurrentcommandstr
  2621                              <2> 	rdprbckspc:
  2622 00002066 3B35[FD210000]      <2> 		cmp esi, [buftxtloc]
  2623 0000206C 7435                <2> 		je nordprupbck
  2624                              <2> 	rdprupbckspclp:
  2625 0000206E 66B80800            <2> 		mov ax, 8
  2626 00002072 668B1D[F5210000]    <2> 		mov bx, [modkeyrdpr]
  2627 00002079 E827020000          <2> 		call prcharq
  2628 0000207E 66B82000            <2> 		mov ax, ' '
  2629 00002082 E81E020000          <2> 		call prcharq
  2630 00002087 66B80800            <2> 		mov ax, 8
  2631 0000208B E815020000          <2> 		call prcharq
  2632 00002090 4E                  <2> 		dec esi
  2633 00002091 3B35[FD210000]      <2> 		cmp esi, [buftxtloc]
  2634 00002097 7405                <2> 		je nordprupbck2
  2635 00002099 E9D0FFFFFF          <2> 		jmp rdprupbckspclp
  2636                              <2> 	nordprupbck2:
  2637 0000209E E88E050000          <2> 		call termcopy
  2638                              <2> 	nordprupbck:
  2639 000020A3 8B3D[05E10300]      <2> 		mov edi, [commandbufpos]
  2640 000020A9 81C7[11E10300]      <2> 		add edi, commandbuf
  2641 000020AF 4F                  <2> 		dec edi
  2642 000020B0 C3                  <2> 		ret
  2643                              <2> 	getcurrentcommandstr:
  2644 000020B1 8A25[FB210000]      <2> 		mov ah, [commandedit]
  2645 000020B7 FE05[FB210000]      <2> 		inc byte [commandedit]
  2646                              <2> 	getccmdlp:
  2647 000020BD 4F                  <2> 		dec edi
  2648 000020BE 8A07                <2> 		mov al, [edi]
  2649 000020C0 81FF[11E10300]      <2> 		cmp edi, commandbuf
  2650 000020C6 7231                <2> 		jb getcmdresetcommandbuf
  2651 000020C8 81EF[11E10300]      <2> 		sub edi, commandbuf
  2652 000020CE 3B3D[05E10300]      <2> 		cmp edi, [commandbufpos]
  2653 000020D4 0F8493FCFFFF        <2> 		je near rdprintb
  2654 000020DA 81C7[11E10300]      <2> 		add edi, commandbuf
  2655 000020E0 3C00                <2> 		cmp al, 0
  2656 000020E2 75D9                <2> 		jne getccmdlp
  2657 000020E4 FECC                <2> 		dec ah
  2658 000020E6 80FC00              <2> 		cmp ah, 0
  2659 000020E9 77D2                <2> 		ja getccmdlp
  2660 000020EB 47                  <2> 		inc edi
  2661 000020EC 81FF[11F10300]      <2> 		cmp edi, commandbufend
  2662 000020F2 7710                <2> 		ja fixcmdbufb4morerdpr
  2663 000020F4 E918000000          <2> 		jmp morerdprup
  2664                              <2> 	getcmdresetcommandbuf:
  2665 000020F9 BF[11F10300]        <2> 		mov edi, commandbufend
  2666 000020FE 47                  <2> 		inc edi
  2667 000020FF E9B9FFFFFF          <2> 		jmp getccmdlp
  2668                              <2> 	fixcmdbufb4morerdpr:
  2669 00002104 4F                  <2> 		dec edi
  2670 00002105 81EF[11F10300]      <2> 		sub edi, commandbufend
  2671 0000210B 81C7[11E10300]      <2> 		add edi, commandbuf
  2672                              <2> 	morerdprup:
  2673 00002111 8A07                <2> 		mov al, [edi]
  2674 00002113 47                  <2> 		inc edi
  2675 00002114 81EF[11E10300]      <2> 		sub edi, commandbuf
  2676 0000211A 3C00                <2> 		cmp al, 0
  2677 0000211C 0F84EEFDFFFF        <2> 		je near rdprintb2
  2678 00002122 3B3D[05E10300]      <2> 		cmp edi, [commandbufpos]
  2679 00002128 0F83E2FDFFFF        <2> 		jae near rdprintb2
  2680 0000212E 81C7[11E10300]      <2> 		add edi, commandbuf
  2681 00002134 8806                <2> 		mov [esi], al
  2682 00002136 46                  <2> 		inc esi
  2683 00002137 57                  <2> 		push edi
  2684 00002138 668B1D[F5210000]    <2> 		mov bx, [modkeyrdpr]
  2685 0000213F 30E4                <2> 		xor ah, ah
  2686 00002141 E85F010000          <2> 		call prcharq
  2687 00002146 5F                  <2> 		pop edi
  2688 00002147 81FF[11F10300]      <2> 		cmp edi, commandbufend
  2689 0000214D 76C2                <2> 		jbe morerdprup
  2690 0000214F BF[11E10300]        <2> 		mov edi, commandbuf
  2691 00002154 E9B8FFFFFF          <2> 		jmp morerdprup
  2692                              <2> 
  2693                              <2> 	rdprdel:
  2694 00002159 BF[EC8D0300]        <2> 		mov edi, buftxt2
  2695 0000215E 8A07                <2> 		mov al, [edi]
  2696 00002160 3C00                <2> 		cmp al, 0
  2697 00002162 0F8405FCFFFF        <2> 		je near rdprintb
  2698 00002168 8806                <2> 		mov [esi], al
  2699 0000216A 3C80                <2> 		cmp al, 0x80
  2700 0000216C 7216                <2> 		jb .fn
  2701                              <2> 	.lp:
  2702 0000216E 46                  <2> 		inc esi
  2703 0000216F 47                  <2> 		inc edi
  2704 00002170 8A07                <2> 		mov al, [edi]
  2705 00002172 3C00                <2> 		cmp al, 0
  2706 00002174 0F84F3FBFFFF        <2> 		je near rdprintb
  2707 0000217A 8806                <2> 		mov [esi], al
  2708 0000217C 3C80                <2> 		cmp al, 0x80
  2709 0000217E 7204                <2> 		jb .fn
  2710 00002180 3CC0                <2> 		cmp al, 0xC0
  2711 00002182 72EA                <2> 		jb .lp
  2712                              <2> 	.fn:
  2713 00002184 E815FEFFFF          <2> 		call shiftbuftxt2lft
  2714 00002189 E817010000          <2> 		call prcharq
  2715                              <2> 		
  2716                              <2> 	rdprbscheck:
  2717 0000218E 3B35[F7210000]      <2> 		cmp esi, [firstesirdpr]
  2718 00002194 0F86D3FBFFFF        <2> 		jbe near rdprintb
  2719                              <2> 	goodbscheck:
  2720 0000219A 4E                  <2> 		dec esi
  2721 0000219B 8A46FF              <2> 		mov al, [esi - 1]
  2722 0000219E C60600              <2> 		mov byte [esi], 0
  2723 000021A1 3CC0                <2> 		cmp al, 0xC0
  2724 000021A3 7309                <2> 		jae .onemore
  2725 000021A5 3C80                <2> 		cmp al, 0x80
  2726 000021A7 73F1                <2> 		jae goodbscheck
  2727 000021A9 E904000000          <2> 		jmp .nomore
  2728                              <2> 	.onemore:
  2729 000021AE 4E                  <2> 		dec esi
  2730 000021AF C60600              <2> 		mov byte [esi], 0		
  2731                              <2> 	.nomore:
  2732 000021B2 668B1D[F5210000]    <2> 		mov bx, [modkeyrdpr]
  2733 000021B9 B008                <2> 		mov al, 8
  2734 000021BB E987FCFFFF          <2> 		jmp bscheckequal
  2735                              <2> 		
  2736                              <2> 	shiftbuftxt2:
  2737 000021C0 55                  <2> 		push ebp
  2738 000021C1 89FD                <2> 		mov ebp, edi
  2739                              <2> 	.lp:
  2740 000021C3 3C00                <2> 		cmp al, 0
  2741 000021C5 740C                <2> 		je noshiftbuftxt2
  2742 000021C7 47                  <2> 		inc edi
  2743 000021C8 8A27                <2> 		mov ah, [edi]
  2744 000021CA 8807                <2> 		mov [edi], al
  2745 000021CC 88E0                <2> 		mov al, ah
  2746 000021CE E9F0FFFFFF          <2> 		jmp .lp
  2747                              <2> 	noshiftbuftxt2:
  2748 000021D3 8A4500              <2> 		mov al, [ebp]
  2749 000021D6 5D                  <2> 		pop ebp
  2750 000021D7 3CC0                <2> 		cmp al, 0xC0
  2751 000021D9 7304                <2> 		jae .nofix
  2752 000021DB 3C80                <2> 		cmp al, 0x80
  2753 000021DD 73E1                <2> 		jae shiftbuftxt2
  2754                              <2> 	.nofix:
  2755 000021DF BF[EC8D0300]        <2> 		mov edi, buftxt2
  2756 000021E4 4E                  <2> 		dec esi
  2757 000021E5 8A06                <2> 		mov al, [esi]
  2758 000021E7 8807                <2> 		mov [edi], al
  2759 000021E9 C60600              <2> 		mov byte [esi], 0
  2760 000021EC 66B80800            <2> 		mov ax, 8
  2761 000021F0 C3                  <2> 		ret
  2762                              <2> 		
  2763 000021F1 0000                <2> axcache dw 0
  2764 000021F3 0000                <2> endkeyrdpr dw 0
  2765 000021F5 0000                <2> modkeyrdpr dw 0
  2766 000021F7 00000000            <2> firstesirdpr dd 0
  2767 000021FB 00                  <2> commandedit db 0
  2768 000021FC 00                  <2> txtmask db 0
  2769 000021FD 00000000            <2> buftxtloc dd 0
  2770 00002201 00000000            <2> endbufferrdpr dd 0
  2771 00002205 082000              <2> backcursor db 8," ",0
  2772                              <1> 	%include 'source/interrupts/5_readchar.asm'
  2773                              <2> readchar:
  2774 00002208 E807000000          <2> 	call rdcharint
  2775 0000220D E979E0FFFF          <2> 	jmp timerinterrupt
  2776                              <2> getchar:
  2777 00002212 30C0                <2> 	xor al, al
  2778                              <2> 	rdcharint:		;get char, if al is 0, wait for key
  2779 00002214 66C705[76220000]01- <2> 		mov word [trans], 1
  2780 0000221C 00                  <2>
  2781 0000221D 3C00                <2> 		cmp al, 0
  2782 0000221F 7509                <2> 		jne transcheck
  2783 00002221 66C705[76220000]00- <2> 		mov word [trans], 0
  2784 00002229 00                  <2>
  2785                              <2> 	transcheck:
  2786                              <2> 	%ifdef io.serial
  2787                              <2> 		call serial.receive
  2788                              <2> 		xor ah, ah
  2789                              <2> 		cmp al, 13
  2790                              <2> 		je rdenter
  2791                              <2> 	%else
  2792 0000222A E883300000          <2> 		call getkey
  2793 0000222F 66A1[74220000]      <2> 		mov ax, [lastkey + 2]
  2794 00002235 663D1C00            <2> 		cmp ax, 0x1C
  2795 00002239 7425                <2> 		je rdenter
  2796                              <2> 	%endif
  2797 0000223B 66A1[72220000]      <2> 		mov ax, [lastkey]
  2798 00002241 668B1D[76220000]    <2> 		mov bx, [trans]
  2799 00002248 803D[90520000]E0    <2> 		cmp byte [specialkey], 0xE0
  2800 0000224F 7500                <2> 		jne nospecialtrans
  2801                              <2> 	nospecialtrans:
  2802 00002251 6609C3              <2> 		or bx, ax
  2803 00002254 6681FB0000          <2> 		cmp bx, 0
  2804 00002259 74CF                <2> 		je transcheck
  2805 0000225B E90C000000          <2> 		jmp rdend
  2806                              <2> 	rdenter:
  2807 00002260 C1E010              <2> 		shl eax, 16
  2808 00002263 66B80A00            <2> 		mov ax, 10
  2809 00002267 A3[72220000]        <2> 		mov [lastkey], eax
  2810                              <2> 	rdend:
  2811 0000226C A1[72220000]        <2> 		mov eax, [lastkey]
  2812 00002271 C3                  <2> 		ret
  2813                              <2> 		
  2814 00002272 00000000            <2> lastkey dd 0
  2815 00002276 0000                <2> trans dw 0
  2816                              <1> 	%include 'source/interrupts/6_prntchar.asm'
  2817                              <2> prntchar:
  2818 00002278 30E4                <2> 	xor ah, ah ;this kills unicode from the outside unfortunately
  2819                              <2> %ifdef io.serial
  2820                              <2> 	call prcharint
  2821                              <2> 	jmp timerinterrupt
  2822                              <2> prcharint:	
  2823                              <2> prcharq:
  2824                              <2> 	call serial.send
  2825                              <2> 	ret
  2826                              <2> %else
  2827 0000227A 38FB                <2> cmp bl, bh
  2828 0000227C 740A                <2> je prchar.notimer
  2829 0000227E E80B000000          <2> call prcharint
  2830 00002283 E903E0FFFF          <2> jmp timerinterrupt
  2831                              <2> prchar.notimer:
  2832 00002288 E818000000          <2> 	call prcharq
  2833 0000228D CF                  <2> 	iret
  2834                              <2> 	
  2835                              <2> prcharint:	;print char, char in ax, modifier in bx, if ecx is eax then termcopy will not happen, will run termcopy if called as is
  2836 0000228E 663DFFFE            <2> 	cmp ax, 0xFEFF
  2837 00002292 740E                <2> 	je .ret
  2838 00002294 39C1                <2> 	cmp ecx, eax
  2839 00002296 740D                <2> 	je prcharq
  2840 00002298 E808000000          <2> 	call prcharq
  2841 0000229D E88F030000          <2> 	call termcopy
  2842                              <2> .ret:
  2843 000022A2 C3                  <2> 	ret
  2844 000022A3 00                  <2> termguion db 0
  2845 000022A4 00                  <2> termcopyon db 0
  2846                              <2> prcharq:
  2847 000022A5 C1E310              <2> 	shl ebx, 16
  2848 000022A8 6689C3              <2> 	mov bx, ax
  2849 000022AB 89D8                <2> 	mov eax, ebx
  2850 000022AD A3[A6240000]        <2> 	mov [charbuf], eax
  2851 000022B2 8B1D[9E240000]      <2> 	mov ebx, [videobufpos]
  2852 000022B8 BF[01960300]        <2> 	mov edi, videobuf
  2853 000022BD 01DF                <2> 	add edi, ebx
  2854 000022BF A1[3C260000]        <2> 	mov eax, [removedvideo]
  2855 000022C4 8907                <2> 	mov [edi], eax
  2856 000022C6 A1[A6240000]        <2> 	mov eax, [charbuf]
  2857 000022CB 31D2                <2> 	xor edx, edx
  2858 000022CD 668B15[A2240000]    <2> 	mov dx, [charpos]
  2859 000022D4 31C9                <2> 	xor ecx, ecx
  2860 000022D6 668B0D[A4240000]    <2> 	mov cx, [charxy]
  2861 000022DD 663D0900            <2> 	cmp ax, 9
  2862 000022E1 0F847C000000        <2> 	je near prtab
  2863 000022E7 663D0D00            <2> 	cmp ax, 13		;I am phasing this out-it is used by windows but not unix based systems
  2864 000022EB 0F84A2000000        <2> 	je near prcr
  2865 000022F1 663D0A00            <2> 	cmp ax, 10
  2866 000022F5 0F84F1000000        <2> 	je near prnlcr
  2867 000022FB 663D0800            <2> 	cmp ax, 8
  2868 000022FF 0F84A2000000        <2> 	je near prbs
  2869 00002305 663DFF00            <2> 	cmp ax, 255		;null character
  2870 00002309 0F8424000000        <2> 	je near donescr
  2871 0000230F 663D0030            <2> 	cmp ax, (fontend - fonts)/16
  2872 00002313 0F8341000000        <2> 	jae near prnofont
  2873                              <2> donepr:
  2874 00002319 8907                <2> 	mov [edi], eax
  2875 0000231B 81C704000000        <2> 	add edi, 4
  2876 00002321 FEC2                <2> 	inc dl
  2877                              <2> donecrnl:
  2878 00002323 38CA                <2> 	cmp dl, cl
  2879 00002325 0F83E5000000        <2> 	jae near preol
  2880                              <2> doneeol:
  2881 0000232B 38EE                <2> 	cmp dh, ch
  2882 0000232D 0F83FA000000        <2> 	jae near prscr	
  2883                              <2> donescr:
  2884 00002333 89FB                <2> 	mov ebx, edi
  2885 00002335 8B07                <2> 	mov eax, [edi]
  2886 00002337 A3[3C260000]        <2> 	mov [removedvideo], eax
  2887 0000233C 81EB[01960300]      <2> 	sub ebx, videobuf
  2888 00002342 891D[9E240000]      <2> 	mov [videobufpos], ebx
  2889 00002348 668915[A2240000]    <2> 	mov [charpos], dx
  2890 0000234F A1[A6240000]        <2> 	mov eax, [charbuf]
  2891 00002354 89C3                <2> 	mov ebx, eax
  2892 00002356 C1EB10              <2> 	shr ebx, 16
  2893 00002359 C3                  <2> 	ret
  2894                              <2> 	
  2895                              <2> 	prnofont:
  2896 0000235A 66B80200            <2> 		mov ax, 2
  2897 0000235E E9B6FFFFFF          <2> 		jmp donepr
  2898                              <2> 	prtab:
  2899 00002363 8B1D[9A240000]      <2> 		mov ebx, [linebeginpos]
  2900 00002369 81EF[01960300]      <2> 		sub edi, videobuf
  2901 0000236F 29DF                <2> 		sub edi, ebx
  2902 00002371 C1EF05              <2> 		shr edi, 5
  2903 00002374 C1E705              <2> 		shl edi, 5
  2904 00002377 81C720000000        <2> 		add edi, 32
  2905 0000237D C0EA03              <2> 		shr dl, 3
  2906 00002380 C0E203              <2> 		shl dl, 3
  2907 00002383 80C208              <2> 		add dl, 8
  2908 00002386 81C7[01960300]      <2> 		add edi, videobuf
  2909 0000238C 01DF                <2> 		add edi, ebx
  2910 0000238E E990FFFFFF          <2> 		jmp donecrnl
  2911                              <2> 	
  2912                              <2> 	prcr:
  2913 00002393 30D2                <2> 		xor dl, dl
  2914 00002395 BF[01960300]        <2> 		mov edi, videobuf
  2915 0000239A 8B1D[9A240000]      <2> 		mov ebx, [linebeginpos]
  2916 000023A0 01DF                <2> 		add edi, ebx
  2917 000023A2 E97CFFFFFF          <2> 		jmp donecrnl
  2918                              <2> 			
  2919                              <2> 	prbs:
  2920 000023A7 8B1D[9A240000]      <2> 		mov ebx, [linebeginpos]
  2921 000023AD 80FA00              <2> 		cmp dl, 0
  2922 000023B0 7415                <2> 		je prbackline
  2923                              <2> 	prnobmr:
  2924 000023B2 891D[9A240000]      <2> 		mov [linebeginpos], ebx
  2925 000023B8 FECA                <2> 		dec dl
  2926 000023BA 31C0                <2> 		xor eax, eax
  2927 000023BC 81EF04000000        <2> 		sub edi, 4
  2928 000023C2 E95CFFFFFF          <2> 		jmp donecrnl
  2929                              <2> 	prbackline:
  2930 000023C7 6631DB              <2> 		xor bx, bx
  2931 000023CA 88CA                <2> 		mov dl, cl
  2932 000023CC 80FE00              <2> 		cmp dh, 0
  2933 000023CF 74E1                <2> 		je prnobmr
  2934 000023D1 8B1D[9A240000]      <2> 		mov ebx, [linebeginpos]
  2935 000023D7 6651                <2> 		push cx
  2936 000023D9 31C9                <2> 		xor ecx, ecx
  2937 000023DB 8A0C24              <2> 		mov cl, [esp]
  2938 000023DE C1E102              <2> 		shl ecx, 2
  2939 000023E1 29CB                <2> 		sub ebx, ecx
  2940 000023E3 6659                <2> 		pop cx
  2941 000023E5 FECE                <2> 		dec dh
  2942 000023E7 E9C6FFFFFF          <2> 		jmp prnobmr
  2943                              <2> 		
  2944                              <2> 	prnlcr:
  2945 000023EC FEC6                <2> 		inc dh
  2946 000023EE 31DB                <2> 		xor ebx, ebx
  2947 000023F0 30D2                <2> 		xor dl, dl
  2948 000023F2 88CB                <2> 		mov bl, cl
  2949 000023F4 66C1E302            <2> 		shl bx, 2
  2950 000023F8 BF[01960300]        <2> 		mov edi, videobuf
  2951 000023FD 031D[9A240000]      <2> 		add ebx, [linebeginpos]
  2952 00002403 891D[9A240000]      <2> 		mov [linebeginpos], ebx
  2953 00002409 01DF                <2> 		add edi, ebx
  2954 0000240B E913FFFFFF          <2> 		jmp donecrnl
  2955                              <2> 		
  2956                              <2> 	preol:
  2957 00002410 30D2                <2> 		xor dl, dl
  2958 00002412 FEC6                <2> 		inc dh
  2959 00002414 31DB                <2> 		xor ebx, ebx
  2960 00002416 88CB                <2> 		mov bl, cl
  2961 00002418 66C1E302            <2> 		shl bx, 2
  2962 0000241C 031D[9A240000]      <2> 		add ebx, [linebeginpos]
  2963 00002422 891D[9A240000]      <2> 		mov [linebeginpos], ebx
  2964 00002428 E9FEFEFFFF          <2> 		jmp doneeol
  2965                              <2> 	prscr:
  2966 0000242D FECE                <2> 		dec dh
  2967 0000242F BF[01960300]        <2> 		mov edi, videobuf
  2968 00002434 31DB                <2> 		xor ebx, ebx
  2969 00002436 88CB                <2> 		mov bl, cl
  2970 00002438 66C1E302            <2> 		shl bx, 2
  2971 0000243C 01FB                <2> 		add ebx, edi
  2972                              <2> 	intscrollloop:
  2973 0000243E 8B03                <2> 		mov eax, [ebx]
  2974 00002440 8907                <2> 		mov [edi], eax
  2975 00002442 81C704000000        <2> 		add edi, 4
  2976 00002448 81C304000000        <2> 		add ebx, 4
  2977 0000244E FEC9                <2> 		dec cl
  2978 00002450 80F900              <2> 		cmp cl, 0
  2979 00002453 75E9                <2> 		jne intscrollloop
  2980 00002455 8A0D[A4240000]      <2> 		mov cl, [charxy]
  2981 0000245B FECD                <2> 		dec ch
  2982 0000245D 80FD01              <2> 		cmp ch, 1
  2983 00002460 77DC                <2> 		ja intscrollloop
  2984 00002462 31C0                <2> 		xor eax, eax
  2985 00002464 81EF[01960300]      <2> 		sub edi, videobuf
  2986 0000246A 893D[9A240000]      <2> 		mov [linebeginpos], edi
  2987 00002470 81C7[01960300]      <2> 		add edi, videobuf
  2988 00002476 89FB                <2> 		mov ebx, edi
  2989                              <2> 	intloopclear:
  2990 00002478 8903                <2> 		mov [ebx], eax
  2991 0000247A 81C304000000        <2> 		add ebx, 4
  2992 00002480 FEC9                <2> 		dec cl
  2993 00002482 80F900              <2> 		cmp cl, 0
  2994 00002485 75F1                <2> 		jne intloopclear
  2995 00002487 FECD                <2> 		dec ch
  2996 00002489 80FD00              <2> 		cmp ch, 0
  2997 0000248C 75EA                <2> 		jne intloopclear
  2998 0000248E 668B0D[A4240000]    <2> 		mov cx, [charxy]
  2999 00002495 E999FEFFFF          <2> 		jmp donescr
  3000                              <2> 		
  3001 0000249A 00000000            <2> linebeginpos dd 0
  3002 0000249E 00000000            <2> videobufpos: dd 0
  3003 000024A2 0000                <2> charpos db 0,0
  3004 000024A4 501E                <2> charxy db 80,30
  3005 000024A6 00000000            <2> charbuf dd 0
  3006                              <2> %endif
  3007                              <1> 	%include 'source/interrupts/7_openfile.asm'
  3008                              <2> openfile:
  3009 000024AA E8A8370000          <2> 	call loadfile
  3010 000024AF E9D7DDFFFF          <2> 	jmp timerinterrupt
  3011                              <1> 	%include 'source/interrupts/9_num2str.asm'
  3012                              <2> num2str:
  3013 000024B4 3C00                <2> 	cmp al, 0
  3014 000024B6 750A                <2> 	jne num2strb
  3015 000024B8 E8830B0000          <2> 	call showdec
  3016 000024BD E9C9DDFFFF          <2> 	jmp timerinterrupt
  3017                              <2> num2strb:
  3018 000024C2 E8BE0A0000          <2> 	call showhex
  3019 000024C7 E9BFDDFFFF          <2> 	jmp timerinterrupt
  3020                              <1> 	%include 'source/interrupts/10_str2num.asm'
  3021                              <2> str2num:
  3022 000024CC 89F7                <2> 	mov edi, esi
  3023 000024CE E84B0C0000          <2> 	call cnvrttxt	;the string goes into esi, number into ecx
  3024 000024D3 E9B3DDFFFF          <2> 	jmp timerinterrupt
  3025                              <2> 	
  3026                              <1> %ifdef threads.included
  3027                              <1> 	%include 'source/interrupts/11_forkthread.asm'
  3028                              <2> forkthread:
  3029                              <2> 			 ;esi is next thread's start address, if 0, fork current thread
  3030                              <2> 			;returns the PID of the new fork in ebx
  3031                              <2> ;WARNING:THIS WILL NOT WORK IN C UNTIL IT COPIES THE ENTIRE STACK
  3032 000024D8 FA                  <2> 	cli
  3033 000024D9 60                  <2> 	pushad
  3034 000024DA 8925[A7250000]      <2> 	mov [.espold], esp
  3035 000024E0 C605[1C5E0000]01    <2> 	mov byte [threadson], 1
  3036 000024E7 8B1D[1D5E0000]      <2> 	mov ebx, [currentthread]
  3037 000024ED C1E302              <2> 	shl ebx, 2
  3038 000024F0 89A3[25110400]      <2> 	mov [threadlist + ebx], esp
  3039 000024F6 C1EB02              <2> 	shr ebx, 2
  3040 000024F9 81FB00000000        <2> 	cmp ebx, 0
  3041 000024FF 750C                <2> 	jne .simplestack
  3042 00002501 BB[08770300]        <2> 	mov ebx, stackend
  3043 00002506 29E3                <2> 	sub ebx, esp
  3044 00002508 E90B000000          <2> 	jmp .stackcalcdone
  3045                              <2> .simplestack:
  3046 0000250D C1E30A              <2> 	shl ebx, 10
  3047 00002510 81C3[25250400]      <2> 	add ebx, stack1
  3048 00002516 29E3                <2> 	sub ebx, esp
  3049                              <2> .stackcalcdone:
  3050 00002518 29DC                <2> 	sub esp, ebx
  3051 0000251A 81C4[25250400]      <2> 	add esp, stack1
  3052 00002520 8B1D[185E0000]      <2> 	mov ebx, [lastthread]
  3053 00002526 C1E308              <2> 	shl ebx, 8
  3054 00002529 01DC                <2> 	add esp, ebx
  3055 0000252B 891D[AB250000]      <2> 	mov [.stackend], ebx
  3056                              <2> 
  3057 00002531 89E5                <2> 	mov ebp, esp
  3058 00002533 8B25[A7250000]      <2> 	mov esp, [.espold]
  3059                              <2> 
  3060 00002539 C1EB0A              <2> 	shr ebx, 10 ;get pid then push it
  3061 0000253C 895C2410            <2> 	mov [esp + 16], ebx ;set the old ebx to the new PID
  3062                              <2> 
  3063 00002540 31DB                <2> 	xor ebx, ebx
  3064                              <2> .stackcopy:
  3065 00002542 668B041C            <2> 	mov ax, [esp + ebx]
  3066 00002546 6689441D00          <2> 	mov [ebp + ebx], ax
  3067 0000254B 81C302000000        <2> 	add ebx, 2
  3068 00002551 3B1D[AB250000]      <2> 	cmp ebx, [.stackend]
  3069 00002557 72E9                <2> 	jb .stackcopy
  3070                              <2> 
  3071 00002559 31C0                <2> 	xor eax, eax
  3072 0000255B 668CC8              <2> 	mov ax, cs
  3073 0000255E 89C2                <2> 	mov edx, eax
  3074 00002560 8B4C2428            <2> 	mov ecx, [esp + 40]
  3075 00002564 81C900020000        <2> 	or ecx, 0x200
  3076                              <2> 	
  3077 0000256A 81FE00000000        <2> 	cmp esi, 0
  3078 00002570 7504                <2> 	jne .nochangestack
  3079 00002572 8B742420            <2> 	mov esi, [esp + 32]
  3080                              <2> .nochangestack:
  3081 00002576 89F0                <2> 	mov eax, esi
  3082 00002578 89EC                <2> 	mov esp, ebp
  3083                              <2> 
  3084 0000257A 89442420            <2> 	mov [esp + 32], eax
  3085 0000257E 89542424            <2> 	mov [esp + 36], edx
  3086 00002582 894C2428            <2> 	mov [esp + 40], ecx
  3087                              <2> 
  3088 00002586 8B1D[185E0000]      <2> 	mov ebx, [lastthread]
  3089 0000258C 89A3[25110400]      <2> 	mov [threadlist + ebx], esp
  3090 00002592 81C304000000        <2> 	add ebx, 4
  3091 00002598 891D[185E0000]      <2> 	mov [lastthread], ebx
  3092 0000259E 8B25[A7250000]      <2> 	mov esp, [.espold]
  3093 000025A4 61                  <2> 	popad
  3094 000025A5 FB                  <2> 	sti
  3095 000025A6 CF                  <2> 	iret
  3096                              <2> 
  3097 000025A7 00000000            <2> .espold dd 0
  3098 000025AB 00000000            <2> .stackend dd 0
  3099                              <1> %endif
  3100                              <1> 	%include 'source/interrupts/12_gettime.asm'
  3101                              <2> gettime:
  3102 000025AF A1[43020000]        <2> 	mov eax, [timeseconds]
  3103 000025B4 8B1D[47020000]      <2> 	mov ebx, [timenanoseconds]
  3104 000025BA 89D9                <2> 	mov ecx, ebx
  3105 000025BC C1E90A              <2> 	shr ecx, 10	;this is in microseconds
  3106 000025BF E9C7DCFFFF          <2> 	jmp timerinterrupt
  3107                              <1> 	%include 'source/interrupts/13_settime.asm'
  3108                              <2> settime:
  3109 000025C4 A3[43020000]        <2> 	mov [timeseconds], eax
  3110 000025C9 891D[47020000]      <2> 	mov [timenanoseconds], ebx
  3111 000025CF E9B7DCFFFF          <2> 	jmp timerinterrupt
  3112                              <2> 	
  3113                              <1> 	%include 'source/interrupts/14_runcmd.asm'
  3114                              <2> runcmd:
  3115 000025D4 BF[EC910300]        <2> 	mov edi, buftxt
  3116                              <2> cpcmd:
  3117 000025D9 8A06                <2> 	mov al, [esi]
  3118 000025DB 8807                <2> 	mov [edi], al
  3119 000025DD 46                  <2> 	inc esi
  3120 000025DE 47                  <2> 	inc edi
  3121 000025DF 3C00                <2> 	cmp al, 0
  3122 000025E1 75F6                <2> 	jne cpcmd
  3123 000025E3 E878060000          <2> 	call run
  3124 000025E8 CF                  <2> 	iret
  3125                              <1> 	%include 'source/interrupts/15_proginfo.asm'
  3126                              <2> proginfo:
  3127                              <2> 	;mov ebx, variables
  3128 000025E9 8B35[3C2D0000]      <2> 	mov esi, [currentcommandloc]
  3129 000025EF 89F7                <2> 	mov edi, esi
  3130 000025F1 31C9                <2> 	xor ecx, ecx
  3131                              <2> getcommandzeroes:
  3132 000025F3 8A07                <2> 	mov al, [edi]
  3133 000025F5 47                  <2> 	inc edi
  3134 000025F6 3C3B                <2> 	cmp al, ';'
  3135 000025F8 740E                <2> 	je nomorezeroes
  3136 000025FA 3C00                <2> 	cmp al, 0
  3137 000025FC 740A                <2> 	je nomorezeroes
  3138 000025FE 3C20                <2> 	cmp al, ' '
  3139 00002600 75F1                <2> 	jne getcommandzeroes
  3140 00002602 41                  <2> 	inc ecx
  3141 00002603 E9EBFFFFFF          <2> 	jmp getcommandzeroes
  3142                              <2> nomorezeroes:
  3143 00002608 41                  <2> 	inc ecx
  3144 00002609 4F                  <2> 	dec edi
  3145 0000260A 8B1D[787D0300]      <2> 	mov ebx, [uid]
  3146 00002610 8B15[1D5E0000]      <2> 	mov edx, [currentthread]
  3147 00002616 CF                  <2> 	iret
  3148                              <2> 	
  3149                              <1> 	%include 'source/interrupts/16_hooksig.asm'
  3150                              <2> hooksig: ;hook code in ESI to signal in AL
  3151 00002617 3C00                <2> 	cmp al, 0
  3152 00002619 7507                <2> 	jne .quit	;only sig 0, the escape key, is handled, and only for one app
  3153                              <2> ;	xor ebx, ebx
  3154                              <2> ;	mov bl, al
  3155                              <2> ;	shl bl, 2
  3156 0000261B BF[68770300]        <2> 	mov edi, sigtable
  3157 00002620 8937                <2> 	mov [edi], esi
  3158                              <2> .quit:
  3159 00002622 E964DCFFFF          <2> 	jmp timerinterrupt
  3160                              <1> %ifdef gui.included
  3161                              <1> 	%include 'source/interrupts/17_guiint.asm'
  3162                              <1> %endif
  3163                              <1> %ifdef sound.included
  3164                              <1> 	%include 'source/interrupts/18_soundint.asm'
  3165                              <2> soundint:
  3166 00002627 E95FDCFFFF          <2> 	jmp timerinterrupt
  3167                              <1> %endif
  3168                              <1> %ifdef network.included
  3169                              <1> 	%include 'source/interrupts/19_netint.asm'
  3170                              <2> netint:
  3171 0000262C E95ADCFFFF          <2> 	jmp timerinterrupt
  3172                              <1> %endif
  3173                              <1> 
  3174                              <1> termcopy:
  3175                              <1> %ifdef io.serial
  3176                              <1> 	ret
  3177                              <1> %else
  3178                              <1> %ifdef terminal.vsync
  3179                              <1> 	mov byte [termcopyneeded], 1
  3180                              <1> 	ret
  3181                              <1> %else
  3182 00002631 E80A000000          <1> 	call newtermcopy
  3183 00002636 C3                  <1> 	ret
  3184                              <1> %endif
  3185 00002637 00                  <1> 	termcopyneeded db 0
  3186 00002638 00000000            <1> 	termcursorpos dd 0
  3187 0000263C 00000000            <1> 	removedvideo dd 0
  3188                              <1> newtermcopy:
  3189 00002640 60                  <1> 	pusha
  3190 00002641 BF[01960300]        <1> 	mov edi, videobuf
  3191 00002646 31DB                <1> 	xor ebx, ebx
  3192 00002648 881D[37260000]      <1> 	mov [termcopyneeded], bl
  3193 0000264E 8B1D[9E240000]      <1> 	mov ebx, [videobufpos]
  3194 00002654 01DF                <1> 	add edi, ebx
  3195 00002656 893D[38260000]      <1> 	mov [termcursorpos], edi
  3196 0000265C E8C7000000          <1> 	call switchtermcursor
  3197 00002661 803D[E8620000]00    <1> 	cmp byte [guion], 0
  3198 00002668 0F8405000000        <1> 	je near nowincopy
  3199                              <1> %ifdef gui.included
  3200                              <1> 	mov byte [mouseselecton], 0
  3201                              <1> 	mov byte [termcopyon], 1
  3202                              <1> 	cmp byte [termguion], 1
  3203                              <1> 	je near windowvideocopy
  3204                              <1> %endif
  3205 0000266E E9AE000000          <1> 	jmp nocopytermatall
  3206                              <1> nowincopy:
  3207 00002673 BE00000A00          <1> 	mov esi, 0xA0000
  3208 00002678 A1[23020000]        <1> 	mov eax, [basecache]
  3209 0000267D C1E004              <1> 	shl eax, 4
  3210 00002680 29C6                <1> 	sub esi, eax
  3211 00002682 BF[01960300]        <1> 	mov edi, videobuf
  3212 00002687 31C9                <1> 	xor ecx, ecx
  3213 00002689 668B0D[A4240000]    <1> 	mov cx, [charxy]
  3214                              <1> nowincopy2:
  3215 00002690 8B07                <1> 	mov eax, [edi]
  3216 00002692 81C780250000        <1> 	add edi, (videobuf2 - videobuf)
  3217 00002698 8B1F                <1> 	mov ebx, [edi]
  3218 0000269A 8907                <1> 	mov [edi], eax
  3219 0000269C 81EF80250000        <1> 	sub edi, (videobuf2 - videobuf)
  3220 000026A2 81C702000000        <1> 	add edi, 2
  3221 000026A8 39D8                <1> 	cmp eax, ebx
  3222 000026AA 744B                <1> 	je nopresentwinfont
  3223 000026AC 81EF02000000        <1> 	sub edi, 2
  3224 000026B2 BD[42650000]        <1> 	mov ebp, fonts
  3225 000026B7 31C0                <1> 	xor eax, eax
  3226 000026B9 668B07              <1> 	mov ax, [edi]
  3227 000026BC C1E004              <1> 	shl eax, 4
  3228 000026BF 01C5                <1> 	add ebp, eax
  3229 000026C1 81C702000000        <1> 	add edi, 2
  3230 000026C7 668B1F              <1> 	mov bx, [edi]
  3231 000026CA 31D2                <1> 	xor edx, edx
  3232 000026CC 8A15[A4240000]      <1> 	mov dl, [charxy]
  3233 000026D2 C1C110              <1> 	rol ecx, 16
  3234 000026D5 B110                <1> 	mov cl, 16
  3235                              <1> nowinfont:
  3236 000026D7 8A4500              <1> 	mov al, [ebp]
  3237 000026DA D0C8                <1> 	ror al, 1
  3238 000026DC 80FB80              <1> 	cmp bl, 0x80
  3239 000026DF 7202                <1> 	jb notnotfont
  3240 000026E1 F6D0                <1> 	not al
  3241                              <1> notnotfont:
  3242 000026E3 8806                <1> 	mov [esi], al
  3243 000026E5 01D6                <1> 	add esi, edx
  3244 000026E7 45                  <1> 	inc ebp
  3245 000026E8 FEC9                <1> 	dec cl
  3246 000026EA 80F900              <1> 	cmp cl, 0
  3247 000026ED 75E8                <1> 	jne nowinfont
  3248 000026EF C1E204              <1> 	shl edx, 4
  3249 000026F2 29D6                <1> 	sub esi, edx
  3250 000026F4 C1C110              <1> 	rol ecx, 16
  3251                              <1> nopresentwinfont:
  3252 000026F7 81C702000000        <1> 	add edi, 2
  3253 000026FD 46                  <1> 	inc esi
  3254 000026FE FEC9                <1> 	dec cl
  3255 00002700 80F900              <1> 	cmp cl, 0
  3256 00002703 758B                <1> 	jne nowincopy2
  3257 00002705 8A0D[A4240000]      <1> 	mov cl, [charxy]
  3258 0000270B 31D2                <1> 	xor edx, edx
  3259 0000270D 88CA                <1> 	mov dl, cl
  3260 0000270F 29D6                <1> 	sub esi, edx
  3261 00002711 C1E204              <1> 	shl edx, 4
  3262 00002714 01D6                <1> 	add esi, edx
  3263 00002716 FECD                <1> 	dec ch
  3264 00002718 80FD00              <1> 	cmp ch, 0
  3265 0000271B 0F856FFFFFFF        <1> 	jne nowincopy2
  3266                              <1> nocopytermatall:
  3267 00002721 E802000000          <1> 	call switchtermcursor
  3268 00002726 61                  <1> 	popa
  3269 00002727 C3                  <1> 	ret
  3270                              <1> 	
  3271                              <1> switchtermcursor:
  3272 00002728 8B3D[38260000]      <1> 	mov edi, [termcursorpos]
  3273 0000272E 668B4702            <1> 	mov ax, [edi + 2]
  3274 00002732 668B1F              <1> 	mov bx, [edi]
  3275 00002735 663D8000            <1> 	cmp ax, 0x80
  3276 00002739 7209                <1> 	jb movlargecursorterm
  3277 0000273B 66B80700            <1> 	mov ax, 7
  3278 0000273F E904000000          <1> 	jmp movedcursorterm
  3279                              <1> movlargecursorterm:
  3280 00002744 66B8F000            <1> 	mov ax, 0xF0
  3281                              <1> movedcursorterm:
  3282 00002748 66894702            <1> 	mov [edi + 2], ax
  3283 0000274C 6681FB0000          <1> 	cmp bx, 0
  3284 00002751 7507                <1> 	jne fixednocursorterm
  3285 00002753 66BB2000            <1> 	mov bx, ' '
  3286 00002757 66891F              <1> 	mov [edi], bx
  3287                              <1> fixednocursorterm:
  3288 0000275A C3                  <1> 	ret
  3289                              <1> %endif
  3290                                      %include "source/dosints.asm"
  3291                              <1> int20h:
  3292 0000275B 66B8004C            <1> mov ax, 0x4C00
  3293                              <1> int21h:
  3294                              <1> dostosolleros:
  3295 0000275F 6650                <1> 	push ax
  3296 00002761 66B83000            <1> 	mov ax, NEW_DATA_SEL
  3297 00002765 8ED8                <1> 	mov ds, ax
  3298 00002767 8EC0                <1> 	mov es, ax
  3299 00002769 8EE0                <1> 	mov fs, ax
  3300 0000276B 66B82000            <1> 	mov ax, SYS_DATA_SEL
  3301 0000276F 8EE8                <1> 	mov gs, ax
  3302 00002771 6658                <1> 	pop ax
  3303 00002773 9C                  <1> 	pushf
  3304 00002774 60                  <1> 	pusha
  3305 00002775 80FC01              <1> 	cmp ah, 1
  3306 00002778 0F8449000000        <1> 	je near dosgchar
  3307 0000277E 80FC02              <1> 	cmp ah, 2
  3308 00002781 0F844A000000        <1> 	je near doswchar
  3309 00002787 80FC09              <1> 	cmp ah, 9
  3310 0000278A 0F8451000000        <1> 	je near dosprintstr
  3311 00002790 80FC0A              <1> 	cmp ah, 0xA
  3312 00002793 0F8463000000        <1> 	je near dosgetstr
  3313 00002799 80FC2B              <1> 	cmp ah, 0x2B
  3314 0000279C 0F84A2000000        <1> 	je near dosgetdate
  3315 000027A2 80FC2C              <1> 	cmp ah, 0x2C
  3316 000027A5 0F84BC000000        <1> 	je near dosgettime
  3317 000027AB 80FC4C              <1> 	cmp ah, 0x4C
  3318 000027AE 0F84D1000000        <1> 	je near dosexit
  3319                              <1> backtodos:
  3320 000027B4 61                  <1> 	popa
  3321 000027B5 9D                  <1> 	popf
  3322 000027B6 6650                <1> 	push ax
  3323 000027B8 66B85000            <1> 	mov ax, DOS_DATA_SEL
  3324 000027BC 8ED8                <1> 	mov ds, ax
  3325 000027BE 8EC0                <1> 	mov es, ax
  3326 000027C0 8EE0                <1> 	mov fs, ax
  3327 000027C2 8EE8                <1> 	mov gs, ax
  3328 000027C4 6658                <1> 	pop ax
  3329 000027C6 CF                  <1> 	iret
  3330                              <1> 
  3331                              <1> dosgchar:
  3332 000027C7 E846FAFFFF          <1> 	call getchar
  3333 000027CC E9E3FFFFFF          <1> 	jmp backtodos
  3334                              <1> 	
  3335                              <1> doswchar:
  3336 000027D1 88D0                <1> 	mov al, dl
  3337 000027D3 30E4                <1> 	xor ah, ah
  3338 000027D5 B307                <1> 	mov bl, 7
  3339 000027D7 E8B2FAFFFF          <1> 	call prcharint
  3340 000027DC E9D3FFFFFF          <1> 	jmp backtodos
  3341                              <1> 	
  3342                              <1> dosprintstr:
  3343 000027E1 31F6                <1> 	xor esi, esi
  3344 000027E3 6689D6              <1> 	mov si, dx
  3345 000027E6 81C600004000        <1> 	add esi, dosprogloc
  3346 000027EC 66B82400            <1> 	mov ax, "$"
  3347 000027F0 B307                <1> 	mov bl, 7
  3348 000027F2 E80CF4FFFF          <1> 	call printint
  3349 000027F7 E9B8FFFFFF          <1> 	jmp backtodos
  3350                              <1> 	
  3351                              <1> dosgetstr:
  3352 000027FC 31F6                <1> 	xor esi, esi
  3353 000027FE 6689D6              <1> 	mov si, dx
  3354 00002801 81C600004000        <1> 	add esi, dosprogloc
  3355 00002807 B900000000          <1> 	mov ecx, 0
  3356 0000280C 8A0E                <1> 	mov cl, [esi]
  3357 0000280E 81C602000000        <1> 	add esi, 2
  3358 00002814 89F7                <1> 	mov edi, esi
  3359 00002816 8935[40280000]      <1> 	mov [stringstart], esi
  3360 0000281C 01CF                <1> 	add edi, ecx
  3361 0000281E B00A                <1> 	mov al, 10
  3362 00002820 B307                <1> 	mov bl, 7
  3363 00002822 E81CF5FFFF          <1> 	call rdprintdos
  3364 00002827 89F1                <1> 	mov ecx, esi
  3365 00002829 2B0D[40280000]      <1> 	sub ecx, [stringstart]
  3366 0000282F 8B35[40280000]      <1> 	mov esi, [stringstart]
  3367 00002835 884EFF              <1> 	mov [esi - 1], cl
  3368 00002838 884EFE              <1> 	mov [esi - 2], cl
  3369 0000283B E974FFFFFF          <1> 	jmp backtodos
  3370 00002840 00000000            <1> stringstart dd 0
  3371                              <1> 
  3372                              <1> dosgetdate:
  3373 00002844 E81D160000          <1> 	call time
  3374 00002849 8A0D[7D410000]      <1> 	mov cl, [RTCtimeYear]
  3375 0000284F B500                <1> 	mov ch, 0
  3376 00002851 6681C1D007          <1> 	add cx, 2000
  3377 00002856 8A35[7C410000]      <1> 	mov dh, [RTCtimeMonth]
  3378 0000285C 8A15[7B410000]      <1> 	mov dl, [RTCtimeDay]
  3379 00002862 E94DFFFFFF          <1> 	jmp backtodos
  3380                              <1> 
  3381                              <1> dosgettime:
  3382 00002867 E8FA150000          <1> 	call time
  3383 0000286C 8A2D[7A410000]      <1> 	mov ch, [RTCtimeHour]
  3384 00002872 8A0D[79410000]      <1> 	mov cl, [RTCtimeMinute]
  3385 00002878 8A35[78410000]      <1> 	mov dh, [RTCtimeSecond]
  3386 0000287E B200                <1> 	mov dl, 0
  3387 00002880 E92FFFFFFF          <1> 	jmp backtodos
  3388                              <1> 	
  3389                              <1> dosexit:
  3390 00002885 BE[C3620000]        <1> 	mov esi, line
  3391 0000288A E86DF3FFFF          <1> 	call print
  3392 0000288F 61                  <1> 	popa
  3393 00002890 9D                  <1> 	popf
  3394 00002891 8B25[6C7B0300]      <1> 	mov esp, [previousstack]
  3395 00002897 31DB                <1> 	xor ebx, ebx
  3396 00002899 88C3                <1> 	mov bl, al
  3397 0000289B 80FB00              <1> 	cmp bl, 0
  3398 0000289E 0F85DEF2FFFF        <1> 	jne near exitprog.error
  3399 000028A4 C3                  <1> 	ret
  3400                                      %include "source/solleros.asm"
  3401                              <1> 	;SOLLEROS.ASM
  3402                              <1> os:
  3403                              <1> setdefenv:
  3404 000028A5 C605[787B0300]2F    <1> 	mov byte [currentfolder], '/'
  3405 000028AC C705[747B0300]0100- <1> 	mov dword [currentfolderloc], 1
  3406 000028B4 0000                <1>
  3407 000028B6 E8F0F3FFFF          <1> 	call clear
  3408                              <1> 	
  3409                              <1> bootfilecheck:
  3410 000028BB 803D[7C7D0300]01    <1> 	cmp byte [ranboot], 1
  3411 000028C2 0F8421000000        <1> 	je near nobootfile
  3412                              <1> 	%ifdef hardware.automatic
  3413 000028C8 E8332F0000          <1> 		call initializelater ;Initialize components that have debug messages
  3414                              <1> 	%endif
  3415                              <1> 	%ifdef disk.none
  3416                              <1> 	%else
  3417 000028CD BF[82620000]        <1> 		mov edi, bootfilename
  3418 000028D2 BE00004000          <1> 		mov esi, 0x400000
  3419 000028D7 E87B330000          <1> 		call loadfile
  3420 000028DC 81FA00000000        <1> 		cmp edx, 0
  3421 000028E2 7505                <1> 		jne nobootfile
  3422 000028E4 E84A0E0000          <1> 		call progbatchfound
  3423                              <1> 	%endif
  3424                              <1> nobootfile:	
  3425 000028E9 C605[7C7D0300]01    <1> 	mov byte [ranboot], 1
  3426                              <1> 
  3427 000028F0 BE[03000000]        <1> 	mov esi, signature
  3428                              <1> .sigcopyloop:	;this prevents an odd error
  3429 000028F5 658A06              <1> 	mov al, [gs:esi]
  3430 000028F8 8806                <1> 	mov [esi], al
  3431 000028FA 46                  <1> 	inc esi
  3432 000028FB 81FE[11000000]      <1> 	cmp esi, signatureend
  3433 00002901 72F2                <1> 	jb .sigcopyloop
  3434                              <1> 	
  3435 00002903 BE[03000000]        <1> 	mov esi, signature
  3436 00002908 E8EFF2FFFF          <1> 	call print
  3437 0000290D 8B0D[0D000000]      <1> 	mov ecx, [signatureend - 4]
  3438 00002913 E828070000          <1> 	call showdec
  3439 00002918 E8DAF2FFFF          <1> 	call printline
  3440 0000291D BE[9F620000]        <1> 	mov esi, userask
  3441 00002922 E8D5F2FFFF          <1> 	call print
  3442                              <1> 
  3443                              <1> usercheck:
  3444 00002927 BE[EC910300]        <1> 	mov esi, buftxt
  3445 0000292C BF[EC950300]        <1> 	mov edi, buftxtend
  3446 00002931 B00A                <1> 	mov al, 10
  3447 00002933 E8F7F3FFFF          <1> 	call rdprint
  3448 00002938 56                  <1> 	push esi
  3449 00002939 BE[A9620000]        <1> 	mov esi, pwdask
  3450 0000293E E8B9F2FFFF          <1> 	call print
  3451 00002943 5E                  <1> 	pop esi
  3452 00002944 46                  <1> 	inc esi
  3453 00002945 8935[462A0000]      <1> 	mov [esipass], esi
  3454                              <1> passcheck:
  3455 0000294B E8C2F8FFFF          <1> 	call getchar
  3456 00002950 3C0A                <1> 	cmp al, 10
  3457 00002952 0F843E000000        <1> 	je near gotpass
  3458 00002958 3C08                <1> 	cmp al, 8
  3459 0000295A 0F8415000000        <1> 	je near backpass
  3460 00002960 8806                <1> 	mov [esi], al
  3461 00002962 46                  <1> 	inc esi
  3462 00002963 30E4                <1> 	xor ah, ah
  3463 00002965 B02A                <1> 	mov al, "*"
  3464 00002967 E822F9FFFF          <1> 	call prcharint
  3465 0000296C E9DAFFFFFF          <1> 	jmp passcheck
  3466 00002971 08200800            <1> backcursor2 db 8," ",8,0
  3467                              <1> backpass:
  3468 00002975 3B35[462A0000]      <1> 	cmp esi, [esipass]
  3469 0000297B 0F84CAFFFFFF        <1> 	je near passcheck
  3470 00002981 4E                  <1> 	dec esi
  3471 00002982 C60600              <1> 	mov byte [esi], 0
  3472 00002985 56                  <1> 	push esi
  3473 00002986 BE[71290000]        <1> 	mov esi, backcursor2
  3474 0000298B E86CF2FFFF          <1> 	call print
  3475 00002990 5E                  <1> 	pop esi
  3476 00002991 E9B5FFFFFF          <1> 	jmp passcheck
  3477                              <1> gotpass:
  3478 00002996 B00A                <1> 	mov al, 10
  3479 00002998 E8F1F8FFFF          <1> 	call prcharint
  3480 0000299D 30C0                <1> 	xor al, al
  3481 0000299F 31C9                <1> 	xor ecx, ecx
  3482 000029A1 8806                <1> 	mov [esi], al
  3483 000029A3 BB[C5620000]        <1> 	mov ebx, userlst
  3484                              <1> userfind:
  3485 000029A8 BE[EC910300]        <1> 	mov esi, buftxt
  3486 000029AD 8A06                <1> 	mov al, [esi]
  3487 000029AF 3C00                <1> 	cmp al, 0
  3488 000029B1 0F84EEFEFFFF        <1> 	je near os
  3489 000029B7 891D[4A2A0000]      <1> 	mov [usercache], ebx
  3490 000029BD E87E030000          <1> 	call tester
  3491 000029C2 3C01                <1> 	cmp al, 1
  3492 000029C4 7419                <1> 	je pwdtest
  3493 000029C6 41                  <1> 	inc ecx
  3494                              <1> nxtuser:
  3495 000029C7 8A03                <1> 	mov al, [ebx]
  3496 000029C9 43                  <1> 	inc ebx
  3497 000029CA 3C00                <1> 	cmp al, 0
  3498 000029CC 75F9                <1> 	jne nxtuser
  3499 000029CE 81FB[E8620000]      <1> 	cmp ebx, userlstend
  3500 000029D4 0F83CBFEFFFF        <1> 	jae near os
  3501 000029DA E9C9FFFFFF          <1> 	jmp userfind
  3502                              <1> pwdtest:
  3503 000029DF 46                  <1> 	inc esi
  3504 000029E0 43                  <1> 	inc ebx
  3505 000029E1 E85A030000          <1> 	call tester
  3506 000029E6 3C01                <1> 	cmp al, 1
  3507 000029E8 7405                <1> 	je pwdrgt
  3508 000029EA E9D8FFFFFF          <1> 	jmp nxtuser
  3509                              <1> pwdrgt:
  3510 000029EF D1E9                <1> 	shr ecx, 1
  3511 000029F1 890D[787D0300]      <1> 	mov [uid], ecx
  3512 000029F7 E8AFF2FFFF          <1> 	call clear
  3513 000029FC 31C9                <1> 	xor ecx, ecx
  3514 000029FE 41                  <1> 	inc ecx
  3515 000029FF 890D[05E10300]      <1> 	mov [commandbufpos], ecx
  3516                              <1> returnfromexp:
  3517 00002A05 66B90002            <1> 	mov cx, 200h
  3518 00002A09 BE[EC910300]        <1> 	mov esi, buftxt
  3519 00002A0E 8935[3C2D0000]      <1> 	mov [currentcommandloc], esi
  3520 00002A14 E825000000          <1> 	call bufclr
  3521                              <1> clearolddata:
  3522 00002A19 31C0                <1> 	xor eax, eax
  3523 00002A1B A2[7D7D0300]        <1> 	mov [IFON], al
  3524 00002A20 A2[7E7D0300]        <1> 	mov [IFTRUE], al
  3525 00002A25 A2[E67D0300]        <1> 	mov [BATCHISON], al
  3526 00002A2A A3[E27D0300]        <1> 	mov [BATCHPOS], eax
  3527 00002A2F A2[E77D0300]        <1> 	mov [LOOPON], al
  3528 00002A34 A3[E87D0300]        <1> 	mov [LOOPPOS], eax
  3529 00002A39 E939000000          <1> 	jmp nwcmd
  3530                              <1> bufclr:	
  3531 00002A3E 30C0                <1> 	xor al, al
  3532 00002A40 8806                <1> 	mov [esi], al
  3533 00002A42 46                  <1> 	inc esi
  3534 00002A43 E2F9                <1> 	loop bufclr
  3535 00002A45 C3                  <1> 	ret
  3536                              <1> 
  3537 00002A46 00000000            <1> esipass dd 0
  3538 00002A4A [C5620000]          <1> usercache dd userlst
  3539                              <1> 	
  3540                              <1> buftxtclear:
  3541 00002A4E 30C0                <1> 	xor al, al
  3542 00002A50 BE[EC910300]        <1> 	mov esi, buftxt
  3543 00002A55 81FE[EC950300]      <1> clearbuftxt: cmp esi, buf2
  3544 00002A5B 7314                <1> 	jae retbufclr
  3545 00002A5D 8806                <1> 	mov [esi], al
  3546 00002A5F 46                  <1> 	inc esi
  3547 00002A60 E9F0FFFFFF          <1> 	jmp clearbuftxt
  3548                              <1> 
  3549 00002A65 39DE                <1> clearitbuf: cmp esi, ebx
  3550 00002A67 7308                <1> 	jae retbufclr
  3551 00002A69 8806                <1> 	mov [esi], al
  3552 00002A6B 46                  <1> 	inc esi
  3553 00002A6C E9F4FFFFFF          <1> 	jmp clearitbuf
  3554 00002A71 C3                  <1> retbufclr: ret
  3555                              <1> 
  3556 00002A72 E900000000          <1> full:	jmp nwcmd
  3557                              <1> 
  3558                              <1> shush:	;SollerOS Hardly Unix-compatible Shell
  3559                              <1> nwcmd:
  3560 00002A77 FB                  <1> 	sti
  3561 00002A78 31C0                <1> 	xor eax, eax
  3562 00002A7A 3905[582C0000]      <1> 	cmp [nextcommandloc], eax
  3563 00002A80 7416                <1> 	je nomultiplecommand
  3564 00002A82 8B35[582C0000]      <1> 	mov esi, [nextcommandloc]
  3565 00002A88 8935[5C2C0000]      <1> 	mov [thiscommandloc], esi
  3566 00002A8E E8D2010000          <1> 	call fixvariables
  3567 00002A93 E9DFFFFFFF          <1> 	jmp nwcmd
  3568                              <1> nomultiplecommand:
  3569 00002A98 A3[5C2C0000]        <1> 	mov [thiscommandloc], eax
  3570 00002A9D 3805[1C5E0000]      <1> 	cmp [threadson], al
  3571 00002AA3 7405                <1> 	je noclinwcmd
  3572 00002AA5 A2[1C5E0000]        <1> 	mov [threadson], al
  3573                              <1> noclinwcmd:
  3574 00002AAA B001                <1> 	mov al, 1
  3575 00002AAC 3805[E67D0300]      <1> 	cmp [BATCHISON], al
  3576 00002AB2 7501                <1> 	jne cancel
  3577 00002AB4 C3                  <1> 	ret
  3578 00002AB5 30C0                <1> cancel:	xor al, al
  3579 00002AB7 A2[7D7D0300]        <1> 	mov [IFON], al
  3580 00002ABC A2[E67D0300]        <1> 	mov [BATCHISON], al
  3581 00002AC1 B05B                <1> 	mov al, '['
  3582 00002AC3 66BB0700            <1> 	mov bx, 7
  3583 00002AC7 E8D9F7FFFF          <1> 	call prcharq
  3584 00002ACC 8B35[4A2A0000]      <1> 	mov esi, [usercache]
  3585 00002AD2 E801F1FFFF          <1> 	call printquiet
  3586 00002AD7 BE[B3620000]        <1> 	mov esi, computer
  3587 00002ADC E8F7F0FFFF          <1> 	call printquiet
  3588 00002AE1 BE[787B0300]        <1> 	mov esi, currentfolder
  3589 00002AE6 0335[707B0300]      <1> 	add esi, [lastfolderloc]
  3590 00002AEC E8E7F0FFFF          <1> 	call printquiet
  3591 00002AF1 BE[BE620000]        <1> 	mov esi, endprompt
  3592 00002AF6 E801F1FFFF          <1> 	call print
  3593 00002AFB E84EFFFFFF          <1> 	call buftxtclear
  3594 00002B00 BE[EC910300]        <1> 	mov esi, buftxt
  3595 00002B05 C605[FB210000]01    <1> 	mov byte [commandedit], 1
  3596 00002B0C B00A                <1> 	mov al, 10
  3597 00002B0E 66BB0700            <1> 	mov bx, 7
  3598 00002B12 BF[EC950300]        <1> 	mov edi, buftxtend
  3599 00002B17 E813F2FFFF          <1> 	call rdprint
  3600 00002B1C C605[FB210000]00    <1> 	mov byte [commandedit], 0
  3601 00002B23 803D[EC910300]00    <1> 	cmp byte [buftxt], 0
  3602 00002B2A 0F8447FFFFFF        <1> 	je near nwcmd
  3603 00002B30 8B35[05E10300]      <1> gotcmd:	mov esi, [commandbufpos]
  3604 00002B36 8935[01E10300]      <1> 	mov [lastcommandpos], esi
  3605 00002B3C FF05[0DE10300]      <1> 	inc dword [commandsentered]
  3606 00002B42 BF[EC910300]        <1> 	mov edi, buftxt
  3607 00002B47 81C6[11E10300]      <1> 	add esi, commandbuf
  3608 00002B4D 81FE[11F10300]      <1> 	cmp esi, commandbufend
  3609 00002B53 7605                <1> 	jbe copycommand
  3610 00002B55 BE[11E10300]        <1> 	mov esi, commandbuf
  3611                              <1> copycommand:
  3612 00002B5A 8A07                <1> 	mov al, [edi]
  3613 00002B5C 8806                <1> 	mov [esi], al
  3614 00002B5E 47                  <1> 	inc edi
  3615 00002B5F 46                  <1> 	inc esi
  3616 00002B60 3C00                <1> 	cmp al, 0
  3617 00002B62 7412                <1> 	je donecopy
  3618 00002B64 81FE[11F10300]      <1> 	cmp esi, commandbufend
  3619 00002B6A 76EE                <1> 	jbe copycommand
  3620 00002B6C BE[11E10300]        <1> 	mov esi, commandbuf
  3621 00002B71 E9E4FFFFFF          <1> 	jmp copycommand
  3622                              <1> donecopy:
  3623 00002B76 81EE[11E10300]      <1> 	sub esi, commandbuf
  3624 00002B7C 8935[05E10300]      <1> 	mov [commandbufpos], esi
  3625 00002B82 E8D9000000          <1> 	call run
  3626 00002B87 E9EBFEFFFF          <1> 	jmp nwcmd
  3627                              <1> 
  3628 00002B8C E8BDFEFFFF          <1> input:	call buftxtclear
  3629 00002B91 BE[EC910300]        <1> 	mov esi, buftxt		;puts input into buftxt AND onto screen
  3630 00002B96 BF[EC950300]        <1> 	mov edi, buftxtend
  3631 00002B9B B00A                <1> stdin:	mov al, 10
  3632 00002B9D B307                <1> 	mov bl, 7
  3633 00002B9F E88BF1FFFF          <1> 	call rdprint
  3634 00002BA4 C3                  <1> 	ret
  3635                              <1> 
  3636                              <1> replacevariable:
  3637 00002BA5 8A4601              <1> 	mov al, [esi + 1]
  3638 00002BA8 C64601FF            <1> 	mov byte [esi + 1], 255
  3639 00002BAC 3C24                <1> 	cmp al, "$"
  3640 00002BAE 0F84B1000000        <1> 	je near fixvariables
  3641 00002BB4 884601              <1> 	mov [esi + 1], al
  3642 00002BB7 56                  <1> 	push esi
  3643 00002BB8 81EE[EC910300]      <1> 	sub esi, buftxt
  3644 00002BBE 89F7                <1> 	mov edi, esi
  3645 00002BC0 81C6[EC910300]      <1> 	add esi, buftxt
  3646 00002BC6 47                  <1> 	inc edi
  3647 00002BC7 BB[EC7D0300]        <1> 	mov ebx, variables
  3648 00002BCC E880190000          <1> 	call nxtvrech
  3649 00002BD1 89F7                <1> 	mov edi, esi
  3650 00002BD3 31DB                <1> 	xor ebx, ebx
  3651 00002BD5 4E                  <1> 	dec esi
  3652                              <1> findvarname:
  3653 00002BD6 4E                  <1> 	dec esi
  3654 00002BD7 8A06                <1> 	mov al, [esi]
  3655 00002BD9 43                  <1> 	inc ebx
  3656 00002BDA 3C04                <1> 	cmp al, 4
  3657 00002BDC 75F8                <1> 	jne findvarname
  3658 00002BDE 5E                  <1> 	pop esi
  3659                              <1> replacevarloop:
  3660 00002BDF 8A07                <1> 	mov al, [edi]
  3661 00002BE1 3C00                <1> 	cmp al, 0
  3662 00002BE3 0F8416000000        <1> 	je near compressbuftxt
  3663 00002BE9 81FB00000000        <1> 	cmp ebx, 0
  3664 00002BEF 0F8419000000        <1> 	je near expandbuftxt
  3665 00002BF5 8806                <1> 	mov [esi], al
  3666 00002BF7 4B                  <1> 	dec ebx
  3667 00002BF8 46                  <1> 	inc esi
  3668 00002BF9 47                  <1> 	inc edi
  3669 00002BFA E9E0FFFFFF          <1> 	jmp replacevarloop
  3670                              <1> compressbuftxt:
  3671 00002BFF 8A041E              <1> 	mov al, [esi + ebx]
  3672 00002C02 8806                <1> 	mov [esi], al
  3673 00002C04 46                  <1> 	inc esi
  3674 00002C05 3C00                <1> 	cmp al, 0
  3675 00002C07 75F6                <1> 	jne compressbuftxt
  3676 00002C09 E957000000          <1> 	jmp fixvariables
  3677                              <1> expandbuftxt:
  3678 00002C0E 89F1                <1> 	mov ecx, esi
  3679 00002C10 8A26                <1> 	mov ah, [esi]
  3680                              <1> expandbuftxtlp:
  3681 00002C12 8A1E                <1> 	mov bl, [esi]
  3682 00002C14 46                  <1> 	inc esi
  3683 00002C15 8A3E                <1> 	mov bh, [esi]
  3684 00002C17 8826                <1> 	mov [esi], ah
  3685 00002C19 88FC                <1> 	mov ah, bh
  3686 00002C1B 80FB00              <1> 	cmp bl, 0
  3687 00002C1E 75F2                <1> 	jne expandbuftxtlp
  3688 00002C20 89CE                <1> 	mov esi, ecx
  3689 00002C22 8806                <1> 	mov [esi], al
  3690 00002C24 47                  <1> 	inc edi
  3691 00002C25 8A07                <1> 	mov al, [edi]
  3692 00002C27 3C00                <1> 	cmp al, 0
  3693 00002C29 0F8436000000        <1> 	je near fixvariables
  3694 00002C2F 46                  <1> 	inc esi
  3695 00002C30 E9D9FFFFFF          <1> 	jmp expandbuftxt
  3696                              <1> multipleprogline:
  3697 00002C35 30E4                <1> 	xor ah, ah
  3698 00002C37 8826                <1> 	mov [esi], ah
  3699 00002C39 46                  <1> 	inc esi
  3700 00002C3A 8935[582C0000]      <1> 	mov [nextcommandloc], esi
  3701 00002C40 E93E000000          <1> 	jmp donefixvariables
  3702                              <1> inlinecomment:	;if the following char is #, include a #, otherwise end the line
  3703 00002C45 46                  <1> 	inc esi
  3704 00002C46 8A06                <1> 	mov al, [esi]
  3705 00002C48 C606FF              <1> 	mov byte [esi], 255
  3706 00002C4B 3C23                <1> 	cmp al, '#'
  3707 00002C4D 7416                <1> 	je fixvariables
  3708 00002C4F 4E                  <1> 	dec esi
  3709 00002C50 C60600              <1> 	mov byte [esi], 0
  3710 00002C53 E90D000000          <1> 	jmp fixvariables
  3711                              <1> 	
  3712 00002C58 00000000            <1> nextcommandloc dd 0
  3713 00002C5C 00000000            <1> thiscommandloc dd 0	
  3714                              <1> run:
  3715 00002C60 BE[EC910300]        <1> 	mov esi, buftxt
  3716                              <1> fixvariables:
  3717 00002C65 46                  <1> 	inc esi
  3718 00002C66 8A06                <1> 	mov al, [esi]
  3719 00002C68 3C23                <1> 	cmp al, '#'	;inline comment
  3720 00002C6A 74D9                <1> 	je inlinecomment
  3721 00002C6C 3C24                <1> 	cmp al, '$' ;variable
  3722 00002C6E 0F8431FFFFFF        <1> 	je near replacevariable
  3723 00002C74 3C3B                <1> 	cmp al, ';' ;program list
  3724 00002C76 74BD                <1> 	je multipleprogline
  3725 00002C78 3C00                <1> 	cmp al, 0
  3726 00002C7A 75E9                <1> 	jne fixvariables
  3727 00002C7C 31C0                <1> 	xor eax, eax
  3728 00002C7E A3[582C0000]        <1> 	mov [nextcommandloc], eax
  3729                              <1> donefixvariables:
  3730 00002C83 803D[82320000]00    <1> 	cmp byte [indexdone], 0
  3731 00002C8A 7505                <1> 	jne progtest
  3732 00002C8C E853050000          <1> 	call indexfiles
  3733                              <1> progtest:
  3734 00002C91 31C0                <1> 	xor eax, eax
  3735 00002C93 BB[6C770300]        <1> 	mov ebx, fileindex
  3736 00002C98 668B03              <1> prgnxt:	mov ax, [ebx]
  3737 00002C9B B1FF                <1> 	mov cl, 255
  3738 00002C9D B52C                <1> 	mov ch, 44
  3739 00002C9F 6639C8              <1> 	cmp ax, cx
  3740 00002CA2 740E                <1> 	je fndprg
  3741 00002CA4 43                  <1> 	inc ebx
  3742 00002CA5 81FB[6C7B0300]      <1> 	cmp ebx, fileindexend
  3743 00002CAB 7363                <1> 	jae prgnf
  3744 00002CAD E9E6FFFFFF          <1> 	jmp prgnxt
  3745 00002CB2 81C302000000        <1> fndprg: add ebx, 2
  3746 00002CB8 31C9                <1> 	xor ecx, ecx
  3747 00002CBA BE[EC910300]        <1> 	mov esi, buftxt
  3748 00002CBF 390D[5C2C0000]      <1> 	cmp [thiscommandloc], ecx
  3749 00002CC5 7406                <1> 	je noprgtstmultiple
  3750 00002CC7 8B35[5C2C0000]      <1> 	mov esi, [thiscommandloc]
  3751                              <1> noprgtstmultiple:
  3752 00002CCD E8AF000000          <1> 	call cndtest
  3753 00002CD2 3C01                <1> 	cmp al, 1
  3754 00002CD4 7305                <1> 	jae prggood
  3755 00002CD6 E9BDFFFFFF          <1> 	jmp prgnxt
  3756 00002CDB 81FB[6C7B0300]      <1> prggood: cmp ebx, fileindexend
  3757 00002CE1 7358                <1> 	jae prgdn
  3758 00002CE3 31C0                <1> 	xor eax, eax
  3759 00002CE5 BE[EC910300]        <1> 	mov esi, buftxt
  3760 00002CEA 3905[5C2C0000]      <1> 	cmp [thiscommandloc], eax
  3761 00002CF0 7406                <1> 	je noprggoodmul
  3762 00002CF2 8B35[5C2C0000]      <1> 	mov esi, [thiscommandloc]
  3763                              <1> noprggoodmul:
  3764 00002CF8 8935[3C2D0000]      <1> 	mov [currentcommandloc], esi
  3765 00002CFE 81C303000000        <1> 	add ebx, 3
  3766 00002D04 8B3B                <1> 	mov edi, [ebx]
  3767 00002D06 C605[1C5E0000]02    <1> 	mov byte [threadson], 2
  3768 00002D0D FFD7                <1> 	call edi
  3769 00002D0F C3                  <1> 	ret
  3770                              <1> prgnf:	
  3771 00002D10 8B35[3C2D0000]      <1> 	mov esi, [currentcommandloc]
  3772 00002D16 8A06                <1> 	mov al, [esi]
  3773 00002D18 3C00                <1> 	cmp al, 0
  3774 00002D1A 741F                <1> 	je prgdn
  3775 00002D1C BE[8A620000]        <1> 	mov esi, notfound1
  3776 00002D21 E8D6EEFFFF          <1> 	call print
  3777 00002D26 8B35[3C2D0000]      <1> 	mov esi, [currentcommandloc]
  3778 00002D2C E8CBEEFFFF          <1> 	call print
  3779 00002D31 BE[92620000]        <1> 	mov esi, notfound2
  3780 00002D36 E8C1EEFFFF          <1> 	call print
  3781 00002D3B C3                  <1> prgdn:	ret
  3782                              <1> 
  3783 00002D3C 00000000            <1> currentcommandloc dd 0
  3784                              <1> 
  3785                              <1> tester:			;si=user bx=prog returns 1 in al if true
  3786 00002D40 6631C0              <1> 	xor ax, ax
  3787 00002D43 8A06                <1> retest:	mov al, [esi]
  3788 00002D45 8A23                <1> 	mov ah, [ebx]
  3789 00002D47 3C00                <1> 	cmp al, 0
  3790 00002D49 740B                <1> 	je testtrue
  3791 00002D4B 38E0                <1> 	cmp al, ah
  3792 00002D4D 750F                <1> 	jne testfalse
  3793 00002D4F 43                  <1> 	inc ebx
  3794 00002D50 46                  <1> 	inc esi
  3795 00002D51 E9EDFFFFFF          <1> 	jmp retest
  3796                              <1> testtrue:
  3797 00002D56 80FC00              <1> 	cmp ah, 0
  3798 00002D59 7503                <1> 	jne testfalse
  3799 00002D5B B001                <1> 	mov al, 1
  3800 00002D5D C3                  <1> 	ret
  3801                              <1> testfalse:
  3802 00002D5E 30C0                <1> 	xor al, al
  3803 00002D60 C3                  <1> 	ret
  3804                              <1> 
  3805                              <1> optest:			;si=user bx=prog returns 1 in al if true
  3806 00002D61 30C0                <1> 	xor al, al
  3807                              <1> opretest:
  3808 00002D63 8A06                <1> 	mov al, [esi]
  3809 00002D65 8A23                <1> 	mov ah, [ebx]
  3810 00002D67 38E0                <1> 	cmp al, ah
  3811 00002D69 7513                <1> 	jne optestfalse
  3812 00002D6B 80FC00              <1> 	cmp ah, 0
  3813 00002D6E 7407                <1> 	je optesttrue
  3814 00002D70 43                  <1> 	inc ebx
  3815 00002D71 46                  <1> 	inc esi
  3816 00002D72 E9ECFFFFFF          <1> 	jmp opretest
  3817                              <1> optesttrue:
  3818 00002D77 3C00                <1> 	cmp al, 0
  3819 00002D79 7503                <1> 	jne optestfalse
  3820 00002D7B B001                <1> 	mov al, 1
  3821 00002D7D C3                  <1> 	ret
  3822                              <1> optestfalse:
  3823 00002D7E 30C0                <1> 	xor al, al
  3824 00002D80 C3                  <1> 	ret
  3825                              <1> 
  3826                              <1> cndtest:			;si=user bx=prog cl=endchar returns 1 in al if true
  3827 00002D81 30C0                <1> 	xor al, al
  3828 00002D83 8A06                <1> cndretest:	mov al, [esi]
  3829 00002D85 8A23                <1> 	mov ah, [ebx]
  3830 00002D87 38CC                <1> 	cmp ah, cl
  3831 00002D89 740B                <1> 	je cndtesttrue
  3832 00002D8B 38E0                <1> 	cmp al, ah
  3833 00002D8D 750E                <1> 	jne cndtestfalse
  3834 00002D8F 43                  <1> 	inc ebx
  3835 00002D90 46                  <1> 	inc esi
  3836 00002D91 E9EDFFFFFF          <1> 	jmp cndretest
  3837                              <1> cndtesttrue:
  3838 00002D96 38C8                <1> 	cmp al, cl
  3839 00002D98 7506                <1> 	jne cndtestalmost
  3840 00002D9A B001                <1> 	mov al, 1
  3841 00002D9C C3                  <1> 	ret
  3842                              <1> cndtestfalse:
  3843 00002D9D 30C0                <1> 	xor al, al
  3844 00002D9F C3                  <1> 	ret
  3845                              <1> cndtestalmost:
  3846 00002DA0 B002                <1> 	mov al, 2
  3847 00002DA2 C3                  <1> 	ret
  3848                              <1> 	
  3849                              <1> array:				;arraystart in si, arrayend in bx, arrayseperator in cx
  3850                              <1> 		                ;ends if array seperator is found backwards after 0
  3851                              <1> 	arnxt:	      
  3852 00002DA3 88E8                <1> 		mov al, ch
  3853 00002DA5 88CC                <1> 		mov ah, cl        
  3854 00002DA7 663906              <1> 		cmp [esi], ax
  3855 00002DAA 744E                <1> 		je ardn
  3856 00002DAC 66390E              <1> 		cmp [esi], cx
  3857 00002DAF 740A                <1> 		je arfnd
  3858 00002DB1 46                  <1> 		inc esi
  3859 00002DB2 39DE                <1> 		cmp esi, ebx
  3860 00002DB4 7344                <1> 		jae ardn
  3861 00002DB6 E9E8FFFFFF          <1> 		jmp arnxt
  3862 00002DBB 81C602000000        <1> 	arfnd: add esi, 2
  3863 00002DC1 891D[FB2D0000]      <1> 		mov [arbx], ebx
  3864 00002DC7 890D[FF2D0000]      <1> 		mov [arcx], ecx
  3865 00002DCD E82AEEFFFF          <1> 		call print
  3866 00002DD2 8935[012E0000]      <1> 		mov [arsi], esi
  3867 00002DD8 E81AEEFFFF          <1> 		call printline
  3868 00002DDD 8B1D[FB2D0000]      <1> 		mov ebx, [arbx]
  3869 00002DE3 668B0D[FF2D0000]    <1> 		mov cx, [arcx]
  3870 00002DEA 8B35[012E0000]      <1> 		mov esi, [arsi]
  3871 00002DF0 46                  <1> 		inc esi
  3872 00002DF1 39DE                <1> 		cmp esi, ebx
  3873 00002DF3 7305                <1> 		jae ardn
  3874 00002DF5 E9A9FFFFFF          <1> 		jmp arnxt
  3875 00002DFA C3                  <1> 	ardn:	ret
  3876 00002DFB 00000000            <1> arbx:	dw 0,0
  3877 00002DFF 0000                <1> arcx:	db 0,0
  3878 00002E01 00000000            <1> arsi:	dw 0,0
  3879                              <1> 
  3880                              <1> clearbuffer:
  3881 00002E05 BE[EC950300]        <1> 	mov esi, buf2
  3882 00002E0A B030                <1> 	mov al, '0'
  3883 00002E0C 81FE[00960300]      <1> clearbuf: cmp esi, numbuf
  3884 00002E12 7308                <1> 	jae doneclearbuff
  3885 00002E14 8806                <1> 	mov [esi], al
  3886 00002E16 46                  <1> 	inc esi
  3887 00002E17 E9F0FFFFFF          <1> 	jmp clearbuf
  3888                              <1> doneclearbuff: 
  3889 00002E1C C3                  <1> 		ret
  3890                              <1> 
  3891                              <1> convert:
  3892 00002E1D 4E                  <1> 	dec esi
  3893 00002E1E 89F3                <1> 	mov ebx, esi		;place to convert into must be in esi, number to convert must be in ecx
  3894                              <1> .lp:
  3895 00002E20 89DE                <1> 	mov esi, ebx
  3896 00002E22 81EE09000000        <1> 	sub esi, 9
  3897 00002E28 81F900CA9A3B        <1> 	cmp ecx, 1000000000
  3898 00002E2E 720D                <1> 	jb .8
  3899 00002E30 81E900CA9A3B        <1> 	sub ecx, 1000000000
  3900 00002E36 FE06                <1> 	inc byte [esi]
  3901 00002E38 E9E3FFFFFF          <1> 	jmp .lp
  3902 00002E3D 46                  <1> .8:	inc esi
  3903 00002E3E 81F900E1F505        <1> 	cmp ecx, 100000000
  3904 00002E44 720D                <1> 	jb .7
  3905 00002E46 81E900E1F505        <1> 	sub ecx, 100000000
  3906 00002E4C FE06                <1> 	inc byte [esi]
  3907 00002E4E E9CDFFFFFF          <1> 	jmp .lp
  3908 00002E53 46                  <1> .7:	inc esi
  3909 00002E54 81F980969800        <1> 	cmp ecx, 10000000
  3910 00002E5A 720D                <1> 	jb .6
  3911 00002E5C 81E980969800        <1> 	sub ecx, 10000000
  3912 00002E62 FE06                <1> 	inc byte [esi]
  3913 00002E64 E9B7FFFFFF          <1> 	jmp .lp
  3914 00002E69 46                  <1> .6:	inc esi
  3915 00002E6A 81F940420F00        <1> 	cmp ecx, 1000000
  3916 00002E70 720D                <1> 	jb .5
  3917 00002E72 81E940420F00        <1> 	sub ecx, 1000000
  3918 00002E78 FE06                <1> 	inc byte [esi]
  3919 00002E7A E9A1FFFFFF          <1> 	jmp .lp
  3920 00002E7F 46                  <1> .5:	inc esi
  3921 00002E80 81F9A0860100        <1> 	cmp ecx, 100000
  3922 00002E86 720D                <1> 	jb .4
  3923 00002E88 81E9A0860100        <1> 	sub ecx, 100000
  3924 00002E8E FE06                <1> 	inc byte [esi]
  3925 00002E90 E98BFFFFFF          <1> 	jmp .lp
  3926 00002E95 46                  <1> .4:	inc esi
  3927 00002E96 81F910270000        <1> 	cmp ecx, 10000
  3928 00002E9C 720D                <1> 	jb .3
  3929 00002E9E 81E910270000        <1> 	sub ecx, 10000
  3930 00002EA4 FE06                <1> 	inc byte [esi]
  3931 00002EA6 E975FFFFFF          <1> 	jmp .lp
  3932 00002EAB 46                  <1> .3:	inc esi
  3933 00002EAC 81F9E8030000        <1> 	cmp ecx, 1000
  3934 00002EB2 720D                <1> 	jb .2
  3935 00002EB4 81E9E8030000        <1> 	sub ecx, 1000
  3936 00002EBA FE06                <1> 	inc byte [esi]
  3937 00002EBC E95FFFFFFF          <1> 	jmp .lp
  3938 00002EC1 46                  <1> .2:	inc esi
  3939 00002EC2 81F964000000        <1> 	cmp ecx, 100
  3940 00002EC8 720D                <1> 	jb .1
  3941 00002ECA 81E964000000        <1> 	sub ecx, 100
  3942 00002ED0 FE06                <1> 	inc byte [esi]
  3943 00002ED2 E949FFFFFF          <1> 	jmp .lp
  3944 00002ED7 46                  <1> .1:	inc esi
  3945 00002ED8 81F90A000000        <1> 	cmp ecx, 10
  3946 00002EDE 720D                <1> 	jb .0
  3947 00002EE0 81E90A000000        <1> 	sub ecx, 10
  3948 00002EE6 FE06                <1> 	inc byte [esi]
  3949 00002EE8 E933FFFFFF          <1> 	jmp .lp
  3950 00002EED 46                  <1> .0:	inc esi
  3951 00002EEE 81F901000000        <1> 	cmp ecx, 1
  3952 00002EF4 720D                <1> 	jb .dn
  3953 00002EF6 81E901000000        <1> 	sub ecx, 1
  3954 00002EFC FE06                <1> 	inc byte [esi]
  3955 00002EFE E91DFFFFFF          <1> 	jmp .lp
  3956                              <1> .dn:
  3957 00002F03 C3                  <1> 	ret
  3958                              <1> 
  3959                              <1> 	
  3960                              <1> 
  3961 00002F04 00<rept>            <1> hexnumber times 8 db 0
  3962 00002F0C 202000              <1> hexnumberend db "  ",0
  3963                              <1> 
  3964                              <1> converthex:
  3965                              <1> .clear:	;place to convert to in esi, end of buffer in edi number in ecx
  3966 00002F0F 56                  <1> 	push esi
  3967 00002F10 B030                <1> 	mov al, "0"
  3968 00002F12 39FE                <1> .clearlp: cmp esi, edi
  3969 00002F14 7308                <1> 	jae .doneclear
  3970 00002F16 8806                <1> 	mov [esi], al
  3971 00002F18 46                  <1> 	inc esi
  3972 00002F19 E9F4FFFFFF          <1> 	jmp .clearlp
  3973                              <1> .doneclear:
  3974 00002F1E 81EE02000000        <1> 	sub esi, 2
  3975 00002F24 89C8                <1> 	mov eax, ecx
  3976                              <1> .loop:
  3977 00002F26 30FF                <1> 	xor bh, bh
  3978 00002F28 88C3                <1> 	mov bl, al
  3979 00002F2A 66C1E304            <1> 	shl bx, 4
  3980 00002F2E C0EB04              <1> 	shr bl, 4
  3981 00002F31 86DF                <1> 	xchg bl, bh ;they are backwards
  3982 00002F33 80C330              <1> 	add bl, 48
  3983 00002F36 80FB39              <1> 	cmp bl, "9"
  3984 00002F39 7609                <1> 	jbe .goodbl
  3985 00002F3B 80EB30              <1> 	sub bl, 48
  3986 00002F3E 80EB0A              <1> 	sub bl, 0xA
  3987 00002F41 80C341              <1> 	add bl, "A"
  3988                              <1> .goodbl:
  3989 00002F44 80C730              <1> 	add bh, 48
  3990 00002F47 80FF39              <1> 	cmp bh, "9"
  3991 00002F4A 7609                <1> 	jbe .goodbh
  3992 00002F4C 80EF30              <1> 	sub bh, 48
  3993 00002F4F 80EF0A              <1> 	sub bh, 0xA
  3994 00002F52 80C741              <1> 	add bh, "A"
  3995                              <1> .goodbh:
  3996 00002F55 C1E808              <1> 	shr eax, 8
  3997 00002F58 66891E              <1> 	mov [esi], bx
  3998 00002F5B 81EE02000000        <1> 	sub esi, 2
  3999 00002F61 3B3424              <1> 	cmp esi, [esp]
  4000 00002F64 7207                <1> 	jb .done
  4001 00002F66 3D00000000          <1> 	cmp eax, 0
  4002 00002F6B 75B9                <1> 	jne .loop
  4003                              <1> .done:
  4004 00002F6D 5E                  <1> 	pop esi
  4005 00002F6E C3                  <1> 	ret
  4006                              <1> 	
  4007                              <1> 	
  4008 00002F6F 00                  <1> smallhex db 0
  4009 00002F70 01                  <1> firsthexshown db 1
  4010                              <1> showhexsmall:
  4011 00002F71 C605[6F2F0000]01    <1> 	mov byte [smallhex], 1
  4012 00002F78 E808000000          <1> 	call showhex
  4013 00002F7D C605[6F2F0000]00    <1> 	mov byte [smallhex], 0
  4014 00002F84 C3                  <1> 	ret
  4015                              <1> showhex:
  4016 00002F85 60                  <1> 	pusha
  4017 00002F86 BE[042F0000]        <1> 	mov esi, hexnumber
  4018 00002F8B BF[0C2F0000]        <1> 	mov edi, hexnumberend
  4019 00002F90 E87AFFFFFF          <1> 	call converthex
  4020 00002F95 803D[702F0000]01    <1> 	cmp byte [firsthexshown], 1
  4021 00002F9C 7503                <1> 	jne .show
  4022 00002F9E 6631D2              <1> 	xor dx, dx
  4023                              <1> .show:
  4024 00002FA1 803D[702F0000]03    <1> 	cmp byte [firsthexshown], 3
  4025 00002FA8 7505                <1> 	jne .nonewhexline
  4026 00002FAA E848ECFFFF          <1> 	call printline
  4027                              <1> .nonewhexline:
  4028 00002FAF 803D[702F0000]04    <1> 	cmp byte [firsthexshown], 4
  4029 00002FB6 7522                <1> 	jne .notab
  4030 00002FB8 B1A0                <1> 	mov cl, 160
  4031 00002FBA 28D1                <1> 	sub cl, dl
  4032 00002FBC C0E905              <1> 	shr cl, 5
  4033 00002FBF C0E105              <1> 	shl cl, 5
  4034 00002FC2 80F900              <1> 	cmp cl, 0
  4035 00002FC5 750A                <1> 	jne .nonewline
  4036 00002FC7 E82BECFFFF          <1> 	call printline
  4037 00002FCC E909000000          <1> 	jmp .notab
  4038                              <1> .nonewline:
  4039 00002FD1 80C20F              <1> 	add dl, 15
  4040 00002FD4 C0EA04              <1> 	shr dl, 4
  4041 00002FD7 C0E204              <1> 	shl dl, 4
  4042                              <1> .notab:
  4043 00002FDA BE[042F0000]        <1> 	mov esi, hexnumber
  4044 00002FDF 803D[6F2F0000]01    <1> 	cmp byte [smallhex],1
  4045 00002FE6 7506                <1> 	jne .nosmall
  4046 00002FE8 81C606000000        <1> 	add esi, 6
  4047                              <1> .nosmall:
  4048 00002FEE 803D[702F0000]05    <1> 	cmp byte [firsthexshown], 5
  4049 00002FF5 750A                <1> 	jne .noquiet
  4050 00002FF7 E8DCEBFFFF          <1> 	call printquiet
  4051 00002FFC E918000000          <1> 	jmp .donequiet
  4052                              <1> .noquiet:
  4053 00003001 803D[702F0000]06    <1> 	cmp byte [firsthexshown], 6
  4054 00003008 750A                <1> 	jne .normal
  4055 0000300A E8DCEBFFFF          <1> 	call printhighlight
  4056 0000300F E905000000          <1> 	jmp .donequiet
  4057                              <1> .normal:
  4058 00003014 E8E3EBFFFF          <1> 	call print
  4059                              <1> .donequiet:
  4060 00003019 803D[702F0000]02    <1> 	cmp byte [firsthexshown], 2
  4061 00003020 7505                <1> 	jne .shown
  4062 00003022 E8D0EBFFFF          <1> 	call printline
  4063                              <1> .shown:
  4064 00003027 C605[702F0000]00    <1> 	mov byte [firsthexshown], 0
  4065 0000302E 61                  <1> 	popa
  4066 0000302F C3                  <1> 	ret
  4067                              <1> 
  4068                              <1> 
  4069 00003030 303030303030303030- <1> decnumber db "00000000000000"
  4070 00003039 3030303030          <1>
  4071 0000303E 2000                <1> decnumberend: db " ",0
  4072                              <1> 
  4073                              <1> showdec: ;;same as showhex, just uses decimal conversion
  4074 00003040 60                  <1> 	pusha
  4075 00003041 BF[30300000]        <1> 	mov edi, decnumber
  4076 00003046 BE[3E300000]        <1> 	mov esi, decnumberend
  4077                              <1> .clear:
  4078 0000304B C60730              <1> 	mov byte [edi], '0'
  4079 0000304E 47                  <1> 	inc edi
  4080 0000304F 39F7                <1> 	cmp edi, esi
  4081 00003051 72F8                <1> 	jb .clear
  4082 00003053 BF[30300000]        <1> 	mov edi, decnumber
  4083 00003058 E8C0FDFFFF          <1> 	call convert
  4084 0000305D 803D[702F0000]01    <1> 	cmp byte [firsthexshown], 1
  4085 00003064 7503                <1> 	jne .show
  4086 00003066 6631D2              <1> 	xor dx, dx
  4087                              <1> .show:
  4088 00003069 803D[702F0000]03    <1> 	cmp byte [firsthexshown], 3
  4089 00003070 7505                <1> 	jne .nonewdecline
  4090 00003072 E880EBFFFF          <1> 	call printline
  4091                              <1> .nonewdecline:
  4092 00003077 803D[702F0000]04    <1> 	cmp byte [firsthexshown], 4
  4093 0000307E 7522                <1> 	jne .notab
  4094 00003080 B1A0                <1> 	mov cl, 160
  4095 00003082 28D1                <1> 	sub cl, dl
  4096 00003084 C0E905              <1> 	shr cl, 5
  4097 00003087 C0E105              <1> 	shl cl, 5
  4098 0000308A 80F900              <1> 	cmp cl, 0
  4099 0000308D 750A                <1> 	jne .nonewline
  4100 0000308F E863EBFFFF          <1> 	call printline
  4101 00003094 E909000000          <1> 	jmp .notab
  4102                              <1> .nonewline:
  4103 00003099 80C20F              <1> 	add dl, 15
  4104 0000309C C0EA04              <1> 	shr dl, 4
  4105 0000309F C0E204              <1> 	shl dl, 4
  4106                              <1> .notab:
  4107 000030A2 BE[30300000]        <1> 	mov esi, decnumber
  4108 000030A7 4E                  <1> 	dec esi
  4109                              <1> .sifind:
  4110 000030A8 46                  <1> 	inc esi
  4111 000030A9 81FE[3D300000]      <1> 	cmp esi, decnumberend - 1
  4112 000030AF 7305                <1> 	jae .nosifind
  4113 000030B1 803E30              <1> 	cmp byte [esi], '0'
  4114 000030B4 74F2                <1> 	je .sifind
  4115                              <1> .nosifind:
  4116 000030B6 E841EBFFFF          <1> 	call print
  4117 000030BB 803D[702F0000]02    <1> 	cmp byte [firsthexshown], 2
  4118 000030C2 7505                <1> 	jne .shown
  4119 000030C4 E82EEBFFFF          <1> 	call printline
  4120                              <1> .shown:
  4121 000030C9 C605[702F0000]00    <1> 	mov byte [firsthexshown], 0
  4122 000030D0 61                  <1> 	popa
  4123 000030D1 C3                  <1> 	ret
  4124                              <1> 	
  4125                              <1> cnvrthextxt:
  4126 000030D2 31C9                <1> 	xor ecx, ecx
  4127 000030D4 31C0                <1> 	xor eax, eax
  4128 000030D6 31D2                <1> 	xor edx, edx
  4129 000030D8 31DB                <1> 	xor ebx, ebx
  4130 000030DA 4E                  <1> 	dec esi
  4131                              <1> .end:
  4132 000030DB 46                  <1> 	inc esi
  4133 000030DC 8A06                <1> 	mov al, [esi]
  4134 000030DE 3C00                <1> 	cmp al, 0
  4135 000030E0 75F9                <1> 	jne .end
  4136                              <1> .loop:
  4137 000030E2 4E                  <1> 	dec esi
  4138 000030E3 8A06                <1> 	mov al, [esi]
  4139 000030E5 3C41                <1> 	cmp al, "A"
  4140 000030E7 7328                <1> 	jae .char
  4141 000030E9 2C30                <1> 	sub al, 48
  4142 000030EB 3C10                <1> 	cmp al, 16
  4143 000030ED 7721                <1> 	ja .done
  4144                              <1> .donechar:
  4145 000030EF 81FA00000000        <1> 	cmp edx, 0
  4146 000030F5 740E                <1> 	je .noshl
  4147 000030F7 89D3                <1> 	mov ebx, edx
  4148                              <1> .shl:
  4149 000030F9 C1E004              <1> 	shl eax, 4
  4150 000030FC 4B                  <1> 	dec ebx
  4151 000030FD 81FB00000000        <1> 	cmp ebx, 0
  4152 00003103 75F4                <1> 	jne .shl
  4153                              <1> .noshl:
  4154 00003105 42                  <1> 	inc edx
  4155 00003106 01C1                <1> 	add ecx, eax
  4156 00003108 81FA08000000        <1> 	cmp edx, 8
  4157 0000310E 72D2                <1> 	jb .loop
  4158                              <1> .done:
  4159 00003110 C3                  <1> 	ret
  4160                              <1> .char:
  4161 00003111 3C46                <1> 	cmp al, "F"
  4162 00003113 77FB                <1> 	ja .done
  4163 00003115 2C41                <1> 	sub al, "A"
  4164 00003117 040A                <1> 	add al, 0xA
  4165 00003119 E9D1FFFFFF          <1> 	jmp .donechar
  4166                              <1> 	
  4167                              <1> 	
  4168                              <1> cnvrttxt: ;text to convert in esi, first part or 0 in edi
  4169 0000311E 31C9                <1> 	xor ecx, ecx
  4170 00003120 31C0                <1> 	xor eax, eax
  4171 00003122 31D2                <1> 	xor edx, edx
  4172 00003124 31DB                <1> 	xor ebx, ebx
  4173 00003126 4E                  <1> 	dec esi
  4174                              <1> .lp:
  4175 00003127 46                  <1> 	inc esi
  4176 00003128 8A06                <1> 	mov al, [esi]
  4177 0000312A 3C00                <1> 	cmp al, 0
  4178 0000312C 75F9                <1> 	jne .lp
  4179 0000312E 4E                  <1> 	dec esi
  4180 0000312F 8A06                <1> 	mov al, [esi]
  4181 00003131 3C2E                <1> 	cmp al, '.'
  4182 00003133 7506                <1> 	jne .dot
  4183 00003135 46                  <1> 	inc esi
  4184 00003136 E9ECFFFFFF          <1> 	jmp .lp
  4185                              <1> .dot:
  4186 0000313B 3C20                <1> 	cmp al, ' '
  4187 0000313D 7404                <1> 	je .zero
  4188 0000313F 3C30                <1> 	cmp al, '0'
  4189 00003141 7504                <1> 	jne .txtlp
  4190                              <1> .zero: 
  4191 00003143 39FE                <1> 		cmp esi, edi
  4192 00003145 7447                <1> 		je .done
  4193                              <1> .txtlp:
  4194 00003147 31C0                <1> 	xor eax, eax
  4195 00003149 8A06                <1> 	mov al, [esi]
  4196 0000314B 3C3D                <1> 	cmp al, '='
  4197 0000314D 743F                <1> 	je .done
  4198 0000314F 3C30                <1> 	cmp al, 48
  4199 00003151 723B                <1> 	jb .done
  4200 00003153 3C23                <1> 	cmp al, '#'
  4201 00003155 7437                <1> 	je .done
  4202 00003157 39FE                <1> 	cmp esi, edi
  4203 00003159 7233                <1> 	jb .done
  4204 0000315B 81F900000000        <1> 	cmp ecx, 0
  4205 00003161 770B                <1> 	ja .exp
  4206 00003163 2C30                <1> .noexp:	sub al, 48
  4207 00003165 01C2                <1> 	add edx, eax
  4208 00003167 4E                  <1> 	dec esi
  4209 00003168 41                  <1> 	inc ecx
  4210 00003169 E9D9FFFFFF          <1> 	jmp .txtlp
  4211 0000316E 81F900000000        <1> .exp:	cmp ecx, 0
  4212 00003174 74ED                <1> 	je .noexp
  4213 00003176 2C30                <1> 	sub al, 48
  4214 00003178 51                  <1> 	push ecx
  4215                              <1> .expmul:
  4216 00003179 89C3                <1> 	mov ebx, eax
  4217 0000317B 01D8                <1> 	add eax, ebx
  4218 0000317D C1E303              <1> 	shl ebx, 3
  4219 00003180 01D8                <1> 	add eax, ebx
  4220 00003182 E2F5                <1> 	loop .expmul
  4221 00003184 01C2                <1> 	add edx, eax
  4222 00003186 59                  <1> 	pop ecx
  4223 00003187 4E                  <1> 	dec esi
  4224 00003188 41                  <1> 	inc ecx
  4225 00003189 E9B9FFFFFF          <1> 	jmp .txtlp
  4226 0000318E 89D1                <1> .done: mov ecx, edx
  4227 00003190 C3                  <1> 	ret
  4228                              <1> 
  4229                              <1> benchmarki: ;output number of clocks since initial value
  4230 00003191 0F31                <1> 	rdtsc
  4231 00003193 8B1D[EE620000]      <1> 	mov ebx, [initialtsc]
  4232 00003199 8B0D[F2620000]      <1> 	mov ecx, [initialtsc + 4]
  4233 0000319F E90E000000          <1> 	jmp benchmarkl.calc
  4234                              <1> 
  4235                              <1> benchmarkl: ;output number of clocks since last benchmark
  4236 000031A4 0F31                <1> 	rdtsc
  4237 000031A6 8B1D[F6620000]      <1> 	mov ebx, [lasttsc]
  4238 000031AC 8B0D[FA620000]      <1> 	mov ecx, [lasttsc + 4]
  4239                              <1> .calc:
  4240 000031B2 29D8                <1> 	sub eax, ebx
  4241 000031B4 7701                <1> 	ja .noover
  4242 000031B6 4A                  <1> 	dec edx
  4243                              <1> .noover:
  4244 000031B7 29CA                <1> 	sub edx, ecx
  4245 000031B9 8B0C24              <1> 	mov ecx, [esp]
  4246 000031BC E8C4FDFFFF          <1> 	call showhex
  4247 000031C1 89D1                <1> 	mov ecx, edx
  4248 000031C3 E8BDFDFFFF          <1> 	call showhex
  4249 000031C8 89C1                <1> 	mov ecx, eax
  4250 000031CA E8B6FDFFFF          <1> 	call showhex
  4251 000031CF E823EAFFFF          <1> 	call printline
  4252 000031D4 0F31                <1> 	rdtsc
  4253 000031D6 A3[F6620000]        <1> 	mov [lasttsc], eax
  4254 000031DB 8915[FA620000]      <1> 	mov [lasttsc + 4], edx
  4255 000031E1 C3                  <1> 	ret
  4256                                      %include "source/programs.asm"
  4257 000031E2 FF2C                <1> filetypes db 255,44
  4258                              <1> progstart:		;programs start here
  4259                              <1> indexfiles:
  4260 000031E4 BE[E4310000]        <1> 	mov esi, progstart
  4261 000031E9 BB[6C770300]        <1> 	mov ebx, fileindex
  4262 000031EE BF[E4310000]        <1> 	mov edi, progstart
  4263 000031F3 81EF02000000        <1> 	sub edi, 2
  4264                              <1> indexloop:
  4265 000031F9 668B0E              <1> 	mov cx, [esi]
  4266                              <1> 	indexloop2:
  4267 000031FC 663B0F              <1> 		cmp cx, [edi]
  4268 000031FF 7427                <1> 		je indexloop2done
  4269 00003201 81EF02000000        <1> 		sub edi, 2
  4270 00003207 81FF[E2310000]      <1> 		cmp edi, filetypes
  4271 0000320D 73ED                <1> 		jae indexloop2
  4272 0000320F BF[E4310000]        <1> 	mov edi, progstart
  4273 00003214 81EF02000000        <1> 	sub edi, 2
  4274 0000321A 46                  <1> 	inc esi
  4275 0000321B 81FE[984F0000]      <1> 	cmp esi, batchprogend
  4276 00003221 7357                <1> 	jae indexloopdone
  4277 00003223 E9D1FFFFFF          <1> 	jmp indexloop
  4278                              <1> indexloop2done:
  4279 00003228 66890B              <1> 	mov [ebx], cx
  4280 0000322B 81C302000000        <1> 	add ebx, 2
  4281 00003231 81C602000000        <1> 	add esi, 2
  4282                              <1> 	nameindex:
  4283 00003237 8A0E                <1> 		mov cl, [esi]
  4284 00003239 80F900              <1> 		cmp cl, 0
  4285 0000323C 7409                <1> 		je nameindexdone
  4286 0000323E 880B                <1> 		mov [ebx], cl
  4287 00003240 46                  <1> 		inc esi
  4288 00003241 43                  <1> 		inc ebx
  4289 00003242 E9F0FFFFFF          <1> 		jmp nameindex
  4290                              <1> 	nameindexdone:
  4291 00003247 43                  <1> 		inc ebx
  4292 00003248 66C7030000          <1> 		mov word [ebx], 0
  4293 0000324D 81C302000000        <1> 		add ebx, 2
  4294 00003253 46                  <1> 		inc esi
  4295 00003254 8933                <1> 		mov [ebx], esi
  4296 00003256 81C304000000        <1> 		add ebx, 4
  4297 0000325C 66C7030000          <1> 		mov word [ebx], 0
  4298 00003261 81C302000000        <1> 		add ebx, 2
  4299 00003267 81FB[6C7B0300]      <1> 		cmp ebx, fileindexend
  4300 0000326D 730B                <1> 		jae indexloopdone
  4301 0000326F 81C601000000        <1> 		add esi, 1
  4302 00003275 E97FFFFFFF          <1> 		jmp indexloop
  4303 0000327A C605[82320000]01    <1> indexloopdone: 	mov byte [indexdone], 1
  4304 00003281 C3                  <1> 		ret
  4305 00003282 00                  <1> indexdone db 0
  4306                              <1> %include 'source/programs/_comment.asm' ;#
  4307 00003283 FF2C2300            <2> 	db 255,44,"#",0	;this lets you rem stuff
  4308 00003287 C3                  <2> 	ret 
  4309                              <1> %include 'source/programs/_math.asm' ;!
  4310 00003288 FF2C2100            <2> db 255,44,"!",0
  4311                              <2> 	num:	
  4312 0000328C E874FBFFFF          <2> 		call clearbuffer
  4313 00003291 C605[0F350000]00    <2> 		mov byte [decimal], 0
  4314 00003298 C605[10350000]00    <2> 		mov byte [decimal2], 0
  4315 0000329F 8B35[3C2D0000]      <2> 		mov esi, [currentcommandloc]
  4316 000032A5 31C0                <2> 		xor eax, eax
  4317 000032A7 31C9                <2> 		xor ecx, ecx
  4318 000032A9 31DB                <2> 		xor ebx, ebx
  4319 000032AB 8A06                <2> 	num2:	mov al, [esi]
  4320 000032AD 3C2B                <2> 		cmp al, '+'
  4321 000032AF 7416                <2> 		je operatorfound
  4322 000032B1 3C2D                <2> 		cmp al, '-'
  4323 000032B3 7412                <2> 		je operatorfound
  4324 000032B5 3C2A                <2> 		cmp al, '*'
  4325 000032B7 740E                <2> 		je operatorfound
  4326 000032B9 3C2F                <2> 		cmp al, '/'
  4327 000032BB 740A                <2> 		je operatorfound
  4328 000032BD 3C5E                <2> 		cmp al, '^'
  4329 000032BF 7406                <2> 		je operatorfound
  4330 000032C1 46                  <2> 		inc esi
  4331 000032C2 84C0                <2> 		test al, al
  4332 000032C4 75E5                <2> 		jnz num2
  4333 000032C6 C3                  <2> 		ret
  4334 000032C7 50                  <2> 	operatorfound: push eax
  4335 000032C8 30E4                <2> 		xor ah, ah
  4336 000032CA 8826                <2> 		mov [esi], ah
  4337 000032CC 89F7                <2> 		mov edi, esi
  4338 000032CE 46                  <2> 		inc esi
  4339 000032CF 8A06                <2> 		mov al, [esi]
  4340 000032D1 3C25                <2> 		cmp al, '%'
  4341 000032D3 0F845E000000        <2> 		je near resultnum1
  4342                              <2> 	varnum2: 
  4343 000032D9 57                  <2> 		push edi
  4344 000032DA E8A6000000          <2> 		call checkdecimal
  4345 000032DF 5F                  <2> 		pop edi
  4346 000032E0 E839FEFFFF          <2> 		call cnvrttxt
  4347                              <2> 	vrnm2:
  4348 000032E5 89CB                <2> 		mov ebx, ecx
  4349 000032E7 53                  <2> 		push ebx
  4350 000032E8 E818FBFFFF          <2> 		call clearbuffer
  4351 000032ED 8B35[3C2D0000]      <2> 		mov esi, [currentcommandloc]
  4352 000032F3 89F7                <2> 		mov edi, esi
  4353 000032F5 46                  <2> 		inc esi
  4354 000032F6 8A06                <2> 		mov al, [esi]
  4355 000032F8 3C25                <2> 		cmp al, '%'
  4356 000032FA 0F844E000000        <2> 		je near resultnum2
  4357                              <2> 	varnum4: 
  4358 00003300 57                  <2> 		push edi
  4359 00003301 E86B000000          <2> 		call checkdecimal2
  4360 00003306 5F                  <2> 		pop edi
  4361 00003307 E812FEFFFF          <2> 		call cnvrttxt
  4362                              <2> 	vrnm4:
  4363 0000330C 5B                  <2> 		pop ebx
  4364 0000330D 58                  <2> 		pop eax
  4365 0000330E 3C2B                <2> 		cmp al, '+'
  4366 00003310 0F84A3000000        <2> 		je near plusnum
  4367 00003316 3C2D                <2> 		cmp al, '-'
  4368 00003318 0F84A7000000        <2> 		je near subnum
  4369 0000331E 3C2A                <2> 		cmp al, '*'
  4370 00003320 0F84AB000000        <2> 		je near mulnum
  4371 00003326 3C2F                <2> 		cmp al, '/'
  4372 00003328 0F84B9000000        <2> 		je near divnum
  4373 0000332E 3C5E                <2> 		cmp al, '^'
  4374 00003330 0F84D6000000        <2> 		je near expnum
  4375 00003336 C3                  <2> 		ret
  4376                              <2> 	resultnum1:
  4377 00003337 8A0D[11350000]      <2> 		mov cl, [decimalresult]
  4378 0000333D 880D[0F350000]      <2> 		mov [decimal], cl
  4379 00003343 8B0D[12350000]      <2> 		mov ecx, [result]
  4380 00003349 E997FFFFFF          <2> 		jmp vrnm2
  4381                              <2> 	resultnum2:
  4382 0000334E 8A0D[0F350000]      <2> 		mov cl, [decimal]
  4383 00003354 880D[10350000]      <2> 		mov [decimal2], cl
  4384 0000335A 8A0D[11350000]      <2> 		mov cl, [decimalresult]
  4385 00003360 880D[0F350000]      <2> 		mov [decimal], cl
  4386 00003366 8B0D[12350000]      <2> 		mov ecx, [result]
  4387 0000336C E99BFFFFFF          <2> 		jmp vrnm4
  4388                              <2> 	checkdecimal2:
  4389 00003371 8A25[0F350000]      <2> 		mov ah, [decimal]
  4390 00003377 8825[10350000]      <2> 		mov [decimal2], ah
  4391 0000337D 30E4                <2> 		xor ah, ah
  4392 0000337F 8825[0F350000]      <2> 		mov [decimal], ah
  4393                              <2> 	checkdecimal:
  4394 00003385 89F7                <2> 		mov edi, esi
  4395                              <2> 	chkdec1:
  4396 00003387 8A07                <2> 		mov al, [edi]
  4397 00003389 3C2E                <2> 		cmp al, '.'
  4398 0000338B 0F840E000000        <2> 		je near fnddec
  4399 00003391 3C00                <2> 		cmp al, 0
  4400 00003393 0F841F000000        <2> 		je near nodecimal
  4401 00003399 47                  <2> 		inc edi
  4402 0000339A E9E8FFFFFF          <2> 		jmp chkdec1
  4403                              <2> 	fnddec:
  4404 0000339F 8A4701              <2> 		mov al, [edi + 1]
  4405 000033A2 8807                <2> 		mov [edi], al
  4406 000033A4 3C00                <2> 		cmp al, 0
  4407 000033A6 0F840C000000        <2> 		je near nodecimal
  4408 000033AC FE05[0F350000]      <2> 		inc byte [decimal]
  4409 000033B2 47                  <2> 		inc edi
  4410 000033B3 E9E7FFFFFF          <2> 		jmp fnddec
  4411                              <2> 	nodecimal:
  4412 000033B8 C3                  <2> 		ret
  4413                              <2> 	plusnum:
  4414 000033B9 E80F010000          <2> 		call decaddfix
  4415 000033BE 01D9                <2> 		add ecx, ebx
  4416 000033C0 E98A000000          <2> 		jmp retnum
  4417                              <2> 	subnum:
  4418 000033C5 E803010000          <2> 		call decaddfix
  4419 000033CA 29D9                <2> 		sub ecx, ebx
  4420 000033CC E97E000000          <2> 		jmp retnum
  4421                              <2> 	mulnum:
  4422 000033D1 A0[10350000]        <2> 		mov al, [decimal2]
  4423 000033D6 0005[0F350000]      <2> 		add [decimal], al
  4424 000033DC 89C8                <2> 		mov eax, ecx
  4425 000033DE F7E3                <2> 		mul ebx
  4426 000033E0 89C1                <2> 		mov ecx, eax
  4427 000033E2 E968000000          <2> 		jmp retnum
  4428                              <2> 	divnum:
  4429 000033E7 E8E1000000          <2> 		call decaddfix
  4430 000033EC 30C0                <2> 		xor al, al
  4431 000033EE A2[0F350000]        <2> 		mov [decimal], al
  4432 000033F3 31D2                <2> 		xor edx, edx
  4433 000033F5 89C8                <2> 		mov eax, ecx
  4434 000033F7 81FB00000000        <2> 		cmp ebx, 0
  4435 000033FD 0F844C000000        <2> 		je near retnum
  4436 00003403 F7F3                <2> 		div ebx
  4437 00003405 89C1                <2> 		mov ecx, eax
  4438 00003407 E943000000          <2> 		jmp retnum
  4439                              <2> 	expnum:
  4440 0000340C 8A15[0F350000]      <2> 		mov dl, [decimal]
  4441 00003412 8815[10350000]      <2> 		mov [decimal2], dl
  4442 00003418 31D2                <2> 		xor edx, edx
  4443 0000341A 89C8                <2> 		mov eax, ecx
  4444 0000341C 89D9                <2> 		mov ecx, ebx
  4445 0000341E 89C3                <2> 		mov ebx, eax
  4446 00003420 81F900000000        <2> 		cmp ecx, 0
  4447 00003426 7422                <2> 		je noexpnum
  4448 00003428 49                  <2> 		dec ecx
  4449 00003429 81F900000000        <2> 		cmp ecx, 0
  4450 0000342F 7412                <2> 		je noexpnumlp
  4451 00003431 F7E3                <2> 	expnumlp: mul ebx
  4452 00003433 8A15[10350000]      <2> 		mov dl, [decimal2]
  4453 00003439 0015[0F350000]      <2> 		add [decimal], dl
  4454 0000343F 31D2                <2> 		xor edx, edx
  4455 00003441 E2EE                <2> 		loop expnumlp
  4456                              <2> 	noexpnumlp:
  4457 00003443 89C1                <2> 		mov ecx, eax
  4458 00003445 E905000000          <2> 		jmp retnum
  4459                              <2> 	noexpnum:
  4460 0000344A B901000000          <2> 		mov ecx, 1
  4461                              <2> 	retnum: 
  4462 0000344F BE[00960300]        <2> 		mov esi, numbuf
  4463 00003454 890D[12350000]      <2> 		mov [result], ecx
  4464 0000345A E8BEF9FFFF          <2> 		call convert
  4465 0000345F BE[00960300]        <2> 		mov esi, numbuf
  4466 00003464 8A25[0F350000]      <2> 		mov ah, [decimal]
  4467 0000346A 8825[11350000]      <2> 		mov [decimalresult], ah
  4468 00003470 80FC00              <2> 		cmp ah, 0
  4469 00003473 0F8425000000        <2> 		je near noputdecimal
  4470                              <2> 	putdecimal:
  4471 00003479 4E                  <2> 		dec esi
  4472 0000347A FECC                <2> 		dec ah
  4473 0000347C 80FC00              <2> 		cmp ah, 0
  4474 0000347F 0F87F4FFFFFF        <2> 		ja near putdecimal
  4475 00003485 4E                  <2> 		dec esi
  4476 00003486 8A06                <2> 		mov al, [esi]
  4477 00003488 C6062E              <2> 		mov byte [esi], '.'
  4478                              <2> 	decputloop:
  4479 0000348B 4E                  <2> 		dec esi
  4480 0000348C 8A26                <2> 		mov ah, [esi]
  4481 0000348E 8806                <2> 		mov [esi], al
  4482 00003490 88E0                <2> 		mov al, ah
  4483 00003492 81FE[EC950300]      <2> 		cmp esi, buf2
  4484 00003498 0F87EDFFFFFF        <2> 		ja near decputloop
  4485                              <2> 	noputdecimal:
  4486 0000349E BE[EC950300]        <2> 		mov esi, buf2
  4487 000034A3 E805000000          <2> 		call chkadd
  4488 000034A8 C3                  <2> 		ret
  4489 000034A9 00000000            <2> edxnumbuf dw 0,0
  4490 000034AD 8A06                <2> 	chkadd: mov al, [esi]
  4491 000034AF 3C30                <2> 		cmp al, '0'
  4492 000034B1 750F                <2> 		jne dnadd
  4493 000034B3 46                  <2> 		inc esi
  4494 000034B4 81FE[00960300]      <2> 		cmp esi, numbuf
  4495 000034BA 7405                <2> 		je dnaddm1
  4496 000034BC E9ECFFFFFF          <2> 		jmp chkadd
  4497 000034C1 4E                  <2> 	dnaddm1: dec esi
  4498 000034C2 E835E7FFFF          <2> 	dnadd:	call print
  4499 000034C7 E82BE7FFFF          <2> 		call printline
  4500 000034CC C3                  <2> 		ret
  4501                              <2> 		
  4502                              <2> 	decaddfix:
  4503 000034CD A0[10350000]        <2> 		mov al, [decimal2]
  4504 000034D2 8A25[0F350000]      <2> 		mov ah, [decimal]
  4505 000034D8 38E0                <2> 		cmp al, ah
  4506 000034DA 7432                <2> 		je gooddecadd
  4507 000034DC 38E0                <2> 		cmp al, ah
  4508 000034DE 721A                <2> 		jb lowdecadd
  4509                              <2> 	highdecadd:
  4510 000034E0 FEC4                <2> 		inc ah
  4511 000034E2 89CA                <2> 		mov edx, ecx
  4512 000034E4 C1E103              <2> 		shl ecx, 3
  4513 000034E7 01D1                <2> 		add ecx, edx
  4514 000034E9 01D1                <2> 		add ecx, edx
  4515 000034EB 38E0                <2> 		cmp al, ah
  4516 000034ED 77F1                <2> 		ja highdecadd
  4517 000034EF 8825[0F350000]      <2> 		mov [decimal], ah
  4518 000034F5 E914000000          <2> 		jmp gooddecadd
  4519                              <2> 	lowdecadd:
  4520 000034FA FEC0                <2> 		inc al
  4521 000034FC 89DA                <2> 		mov edx, ebx
  4522 000034FE C1E303              <2> 		shl ebx, 3
  4523 00003501 01D3                <2> 		add ebx, edx
  4524 00003503 01D3                <2> 		add ebx, edx
  4525 00003505 38E0                <2> 		cmp al, ah
  4526 00003507 72F1                <2> 		jb lowdecadd
  4527 00003509 A2[0F350000]        <2> 		mov [decimal], al
  4528                              <2> 	gooddecadd:
  4529 0000350E C3                  <2> 		ret
  4530                              <2> 		
  4531 0000350F 00                  <2> decimal db 0
  4532 00003510 00                  <2> decimal2 db 0
  4533 00003511 00                  <2> decimalresult db 0
  4534 00003512 00000000            <2> result dd 0
  4535                              <1> %include 'source/programs/_variables.asm' ;% and $
  4536 00003516 FF2C2500            <2> db 255,44,"%",0
  4537                              <2> 	ans:
  4538 0000351A BE[EC950300]        <2> 		mov esi, buf2
  4539 0000351F E889FFFFFF          <2> 		call chkadd
  4540 00003524 C3                  <2> 		ret
  4541                              <2> 		
  4542 00003525 FF2C2400            <2> db 255,44,"$",0
  4543 00003529 8B35[3C2D0000]      <2> var: mov esi, [currentcommandloc]
  4544 0000352F BB[EC7D0300]        <2> 	mov ebx, variables
  4545 00003534 8A06                <2> lkeq:	mov al, [esi]
  4546 00003536 3C3D                <2> 	cmp al, '='
  4547 00003538 741E                <2> 	je eqfnd	;is there an '=' sign?
  4548 0000353A 3C00                <2> 	cmp al, 0
  4549 0000353C 7406                <2> 	je echovars
  4550 0000353E 46                  <2> 	inc esi
  4551 0000353F E9F0FFFFFF          <2> 	jmp lkeq
  4552 00003544 BE[EC7D0300]        <2> echovars: mov esi, variables
  4553 00003549 BB[EC8D0300]        <2> 	mov ebx, varend
  4554 0000354E B105                <2> 	mov cl, 5
  4555 00003550 B504                <2> 	mov ch, 4
  4556 00003552 E84CF8FFFF          <2> 	call array
  4557 00003557 C3                  <2> 	ret
  4558 00003558 46                  <2> eqfnd:	inc esi
  4559 00003559 8A06                <2> 	mov al, [esi]
  4560 0000355B 3C00                <2> 	cmp al, 0
  4561 0000355D 7410                <2> 	je readvar
  4562 0000355F 8B35[3C2D0000]      <2> 	mov esi, [currentcommandloc]
  4563 00003565 BB[EC7D0300]        <2> 	mov ebx, variables
  4564 0000356A E91C000000          <2> 	jmp seek
  4565                              <2> readvar:
  4566 0000356F B00A                <2> 	mov al, 10
  4567 00003571 66BB0700            <2> 	mov bx, 7
  4568 00003575 C605[FB210000]00    <2> 	mov byte [commandedit], 0
  4569 0000357C BF[EC950300]        <2> 	mov edi, buftxtend
  4570 00003581 E8A9E7FFFF          <2> 	call rdprint
  4571 00003586 E99EFFFFFF          <2> 	jmp var
  4572 0000358B 668B03              <2> seek:	mov ax, [ebx]
  4573 0000358E B105                <2> 	mov cl, 5
  4574 00003590 B504                <2> 	mov ch, 4
  4575 00003592 663D0000            <2> 	cmp ax, 0
  4576 00003596 0F846A000000        <2> 	je near save
  4577 0000359C 6639C8              <2> 	cmp ax, cx
  4578 0000359F 7406                <2> 	je skfnd
  4579 000035A1 43                  <2> 	inc ebx
  4580 000035A2 E9E4FFFFFF          <2> 	jmp seek
  4581 000035A7 8B35[3C2D0000]      <2> skfnd:	mov esi, [currentcommandloc]
  4582 000035AD 46                  <2> 	inc esi
  4583 000035AE 81C302000000        <2> 	add ebx, 2
  4584 000035B4 89DF                <2> 	mov edi, ebx
  4585 000035B6 B13D                <2> 	mov cl, '='
  4586 000035B8 E8C4F7FFFF          <2> 	call cndtest
  4587 000035BD 3C01                <2> 	cmp al, 1	
  4588 000035BF 741B                <2> 	je varfnd
  4589 000035C1 89FB                <2> 	mov ebx, edi
  4590 000035C3 8B35[3C2D0000]      <2> 	mov esi, [currentcommandloc]
  4591 000035C9 668B03              <2> 	mov ax, [ebx]
  4592 000035CC 663D0000            <2> 	cmp ax, 0
  4593 000035D0 0F8430000000        <2> 	je near save
  4594 000035D6 43                  <2> 	inc ebx
  4595 000035D7 E9AFFFFFFF          <2> 	jmp seek
  4596 000035DC 8A03                <2> varfnd:	mov al, [ebx]
  4597 000035DE 3C04                <2> 	cmp al, 4
  4598 000035E0 7407                <2> 	je save2
  4599 000035E2 4B                  <2> 	dec ebx
  4600 000035E3 4E                  <2> 	dec esi
  4601 000035E4 E9F3FFFFFF          <2> 	jmp varfnd
  4602 000035E9 4B                  <2> save2:	dec ebx
  4603 000035EA 4E                  <2> 	dec esi
  4604 000035EB 8A03                <2> 	mov al, [ebx]
  4605 000035ED 3C05                <2> 	cmp al, 5
  4606 000035EF 7405                <2> 	je remove
  4607 000035F1 E9E6FFFFFF          <2> 	jmp varfnd
  4608 000035F6 8A03                <2> remove: mov al, [ebx]
  4609 000035F8 3C00                <2> 	cmp al, 0
  4610 000035FA 748F                <2> 	je seek
  4611 000035FC 30C0                <2> 	xor al, al
  4612 000035FE 8803                <2> 	mov [ebx], al
  4613 00003600 43                  <2> 	inc ebx
  4614 00003601 E9F0FFFFFF          <2> 	jmp remove	;do not need for now-need defragmentation
  4615 00003606 8B35[3C2D0000]      <2> save:	mov esi, [currentcommandloc]
  4616 0000360C 43                  <2> 	inc ebx
  4617 0000360D B005                <2> 	mov al, 5
  4618 0000360F B404                <2> 	mov ah, 4
  4619 00003611 668903              <2> 	mov [ebx], ax
  4620 00003614 43                  <2> 	inc ebx
  4621 00003615 43                  <2> svhere:	inc ebx
  4622 00003616 46                  <2> 	inc esi
  4623 00003617 8A06                <2> 	mov al, [esi]
  4624 00003619 3C00                <2> 	cmp al, 0
  4625 0000361B 0F8456000000        <2> 	je near svdone
  4626 00003621 3C25                <2> 	cmp al, '%'
  4627 00003623 7407                <2> 	je ans2
  4628 00003625 8803                <2> 	mov [ebx], al	
  4629 00003627 E9E9FFFFFF          <2> 	jmp svhere
  4630 0000362C 56                  <2> ans2:	push esi
  4631 0000362D BE[EC950300]        <2> 	mov esi, buf2
  4632 00003632 E82C000000          <2> 	call ansfnd
  4633 00003637 E806000000          <2> 	call anscp
  4634 0000363C 5E                  <2> 	pop esi
  4635 0000363D E9D3FFFFFF          <2> 	jmp svhere
  4636 00003642 8A06                <2> anscp:	mov al, [esi]
  4637 00003644 8803                <2> 	mov [ebx], al
  4638 00003646 81FE[00960300]      <2> 	cmp esi, numbuf
  4639 0000364C 74C7                <2> 	je svhere
  4640 0000364E 3C00                <2> 	cmp al, 0
  4641 00003650 74C3                <2> 	je svhere
  4642 00003652 43                  <2> 	inc ebx
  4643 00003653 46                  <2> 	inc esi
  4644 00003654 E9E9FFFFFF          <2> 	jmp anscp
  4645 00003659 5E                  <2> ansnf:	pop esi
  4646 0000365A 8A06                <2> 	mov al, [esi]
  4647 0000365C 8803                <2> 	mov [ebx], al
  4648 0000365E E9B2FFFFFF          <2> 	jmp svhere
  4649 00003663 46                  <2> ansfnd:	inc esi
  4650 00003664 81FE[FF950300]      <2> 	cmp esi, numbuf - 1
  4651 0000366A 740A                <2> 	je fndans
  4652 0000366C 8A06                <2> 	mov al, [esi]
  4653 0000366E 3C00                <2> 	cmp al, 0
  4654 00003670 74E7                <2> 	je ansnf
  4655 00003672 3C30                <2> 	cmp al, '0'
  4656 00003674 74ED                <2> 	je ansfnd
  4657                              <2> fndans:
  4658 00003676 C3                  <2> 	ret
  4659 00003677 30C0                <2> svdone:	xor al, al
  4660 00003679 8803                <2> 	mov [ebx], al
  4661 0000367B C3                  <2> 	ret
  4662                              <1> %include 'source/programs/_run.asm' ;./
  4663                              <2> 
  4664 0000367C 7F454C46            <2> 	elfstart db 0x7F,"ELF"
  4665 00003680 FF2C2E2F00          <2> 	db 255,44,"./",0
  4666                              <2> rundiskprog:
  4667 00003685 8B3D[3C2D0000]      <2> 	mov edi, [currentcommandloc]
  4668 0000368B 81C702000000        <2> 	add edi, 2
  4669 00003691 BE00004000          <2> 	mov esi, 0x400000
  4670 00003696 E8BC250000          <2> 	call loadfile
  4671 0000369B 81FA94010000        <2> 	cmp edx, 404
  4672 000036A1 746A                <2> 	je noprogfound
  4673 000036A3 BB00004000          <2> 	mov ebx, 0x400000
  4674 000036A8 A1[7C360000]        <2> 	mov eax, [elfstart]
  4675 000036AD 3903                <2> 	cmp [ebx], eax
  4676 000036AF 0F8437000000        <2> 	je near runelf
  4677 000036B5 66813B4558          <2> 	cmp word [ebx], "EX"
  4678 000036BA 7577                <2> 	jne progbatchfound
  4679 000036BC 81C302000000        <2> 	add ebx, 2
  4680 000036C2 8B3D[3C2D0000]      <2> 	mov edi, [currentcommandloc]
  4681 000036C8 81C702000000        <2> 	add edi, 2
  4682                              <2> findspaceprog:
  4683 000036CE 8A07                <2> 	mov al, [edi]
  4684 000036D0 47                  <2> 	inc edi
  4685 000036D1 3C20                <2> 	cmp al, " "
  4686 000036D3 75F9                <2> 	jne findspaceprog
  4687                              <2> findnonspaceprog:
  4688 000036D5 8A07                <2> 	mov al, [edi]
  4689 000036D7 47                  <2> 	inc edi
  4690 000036D8 3C20                <2> 	cmp al, " "
  4691 000036DA 74F9                <2> 	je findnonspaceprog
  4692 000036DC 4F                  <2> 	dec edi
  4693 000036DD 8925[6C7B0300]      <2> 	mov [previousstack], esp
  4694 000036E3 FFD3                <2> 	call ebx
  4695 000036E5 8B25[6C7B0300]      <2> 	mov esp, [previousstack]
  4696 000036EB C3                  <2> 	ret
  4697                              <2> runelf:
  4698 000036EC 8B3D[3C2D0000]      <2> 	mov edi, [currentcommandloc]
  4699 000036F2 81C702000000        <2> 	add edi, 2
  4700 000036F8 81C380000000        <2> 	add ebx, 0x80
  4701 000036FE 8925[6C7B0300]      <2> 	mov [previousstack], esp
  4702 00003704 FFD3                <2> 	call ebx
  4703 00003706 8B25[6C7B0300]      <2> 	mov esp, [previousstack]
  4704 0000370C C3                  <2> 	ret
  4705                              <2> noprogfound:
  4706 0000370D BE[8A620000]        <2> 	mov esi, notfound1
  4707 00003712 E8E5E4FFFF          <2> 	call print
  4708 00003717 8B35[3C2D0000]      <2> 	mov esi, [currentcommandloc]
  4709 0000371D 81C602000000        <2> 	add esi, 2
  4710 00003723 E8D4E4FFFF          <2> 	call print
  4711 00003728 BE[92620000]        <2> 	mov esi, notfound2
  4712 0000372D E8CAE4FFFF          <2> 	call print
  4713 00003732 C3                  <2> 	ret
  4714                              <2> progbatchfound:
  4715 00003733 BF00004000          <2> 		mov edi, 0x400000
  4716 00003738 C605[E67D0300]01    <2> 		mov byte [BATCHISON], 1
  4717                              <2> 	batchrunloop:
  4718 0000373F E80AF3FFFF          <2> 		call buftxtclear
  4719 00003744 BE[EC910300]        <2> 		mov esi, buftxt
  4720 00003749 8935[3C2D0000]      <2> 		mov [currentcommandloc], esi
  4721                              <2> 	batchrunloop2:
  4722 0000374F B10A                <2> 		mov cl, 10
  4723 00003751 B50D                <2> 		mov ch, 13
  4724 00003753 380F                <2> 		cmp [edi], cl
  4725 00003755 0F841C000000        <2> 		je near nxtbatchrunline
  4726 0000375B 382F                <2> 		cmp [edi], ch
  4727 0000375D 0F8414000000        <2> 		je near nxtbatchrunline
  4728 00003763 803F00              <2> 		cmp byte [edi], 0
  4729 00003766 0F840B000000        <2> 		je near nxtbatchrunline
  4730 0000376C 8A07                <2> 		mov al, [edi]
  4731 0000376E 8806                <2> 		mov [esi], al
  4732 00003770 46                  <2> 		inc esi
  4733 00003771 47                  <2> 		inc edi
  4734 00003772 E9D8FFFFFF          <2> 		jmp batchrunloop2
  4735                              <2> 	nxtbatchrunline:
  4736 00003777 47                  <2> 		inc edi
  4737 00003778 380F                <2> 		cmp [edi], cl
  4738 0000377A 74FB                <2> 		je nxtbatchrunline
  4739 0000377C 382F                <2> 		cmp [edi], ch
  4740 0000377E 74F7                <2> 		je nxtbatchrunline
  4741 00003780 893D[DE370000]      <2> 		mov [batchedi], edi
  4742 00003786 893D[E27D0300]      <2> 		mov [BATCHPOS], edi
  4743 0000378C C60600              <2> 		mov byte [esi], 0
  4744 0000378F BE[EC910300]        <2> 		mov esi, buftxt
  4745 00003794 803E00              <2> 		cmp byte [esi], 0
  4746 00003797 0F8439000000        <2> 		je near nobatchfoundrun
  4747 0000379D 31DB                <2> 		xor ebx, ebx
  4748 0000379F 8A1D[7D7D0300]      <2> 		mov bl, [IFON]
  4749 000037A5 80FB00              <2> 		cmp bl, 0
  4750 000037A8 0F8534000000        <2> 		jne near iftestbatch
  4751                              <2> 	doneiftest:
  4752 000037AE 803D[B7380000]00    <2> 		cmp byte [runnextline], 0
  4753 000037B5 0F8405000000        <2> 		je near noruniftest
  4754 000037BB E8A0F4FFFF          <2> 		call run
  4755                              <2> 	noruniftest:
  4756 000037C0 C605[B7380000]01    <2> 		mov byte [runnextline], 1
  4757 000037C7 8B3D[DE370000]      <2> 		mov edi, [batchedi]
  4758 000037CD 803F00              <2> 		cmp byte [edi], 0
  4759 000037D0 0F8569FFFFFF        <2> 		jne near batchrunloop
  4760                              <2> 	nobatchfoundrun:
  4761 000037D6 C605[E67D0300]00    <2> 		mov byte [BATCHISON], 0
  4762 000037DD C3                  <2> 		ret
  4763                              <2> 	
  4764 000037DE 00000000            <2> batchedi dd 0	
  4765                              <2> 	
  4766                              <2> 	iftestbatch:
  4767 000037E2 BE[7E7D0300]        <2> 		mov esi, IFTRUE
  4768 000037E7 01DE                <2> 		add esi, ebx
  4769 000037E9 803E00              <2> 		cmp byte [esi], 0
  4770 000037EC 0F85BCFFFFFF        <2> 		jne near doneiftest
  4771 000037F2 881D[B8380000]      <2> 		mov [iffalsebuf], bl
  4772 000037F8 803D[E77D0300]01    <2> 		cmp byte [LOOPON], 1
  4773 000037FF 0F8513000000        <2> 		jne near fifindbatch
  4774 00003805 E935FFFFFF          <2> 		jmp batchrunloop
  4775                              <2> 	elsetestbatch:
  4776 0000380A C60601              <2> 		mov byte [esi], 1
  4777 0000380D 81C705000000        <2> 		add edi, 5
  4778 00003813 E927FFFFFF          <2> 		jmp batchrunloop
  4779                              <2> 	fifindbatch:
  4780 00003818 66B96966            <2> 		mov cx, "if"
  4781 0000381C 66B86669            <2> 		mov ax, "fi"
  4782 00003820 663907              <2> 		cmp [edi], ax
  4783 00003823 0F8424000000        <2> 		je near fifoundbatch
  4784 00003829 66390F              <2> 		cmp [edi], cx
  4785 0000382C 0F8468000000        <2> 		je near iffoundbatch
  4786 00003832 803F00              <2> 		cmp byte [edi], 0
  4787 00003835 0F8412000000        <2> 		je near fifoundbatch
  4788 0000383B B8656C7365          <2> 		mov eax, "else"
  4789 00003840 3907                <2> 		cmp [edi], eax
  4790 00003842 0F84C2FFFFFF        <2> 		je near elsetestbatch
  4791 00003848 E973FFFFFF          <2> 		jmp noruniftest
  4792                              <2> 	fifoundbatch:
  4793 0000384D 81C702000000        <2> 		add edi, 2
  4794 00003853 B00A                <2> 		mov al, 10
  4795 00003855 3807                <2> 		cmp [edi], al
  4796 00003857 0F840E000000        <2> 		je near goodfibatch
  4797 0000385D 803F00              <2> 		cmp byte [edi], 0
  4798 00003860 0F8470FFFFFF        <2> 		je near nobatchfoundrun
  4799 00003866 E9ADFFFFFF          <2> 		jmp fifindbatch
  4800                              <2> 	goodfibatch:
  4801 0000386B B001                <2> 		mov al, 1
  4802 0000386D 2805[7D7D0300]      <2> 		sub [IFON], al 
  4803 00003873 A0[7D7D0300]        <2> 		mov al, [IFON]
  4804 00003878 8A1D[B8380000]      <2> 		mov bl, [iffalsebuf]
  4805 0000387E 38D8                <2> 		cmp al, bl
  4806 00003880 7796                <2> 		ja fifindbatch
  4807 00003882 8B35[3C2D0000]      <2> 		mov esi, [currentcommandloc]
  4808 00003888 81EF02000000        <2> 		sub edi, 2
  4809 0000388E C605[B7380000]00    <2> 		mov byte [runnextline], 0
  4810 00003895 E9A5FEFFFF          <2> 		jmp batchrunloop
  4811                              <2> 	iffoundbatch:
  4812 0000389A B020                <2> 		mov al, ' '
  4813 0000389C 81C702000000        <2> 		add edi, 2
  4814 000038A2 3807                <2> 		cmp [edi], al
  4815 000038A4 0F856EFFFFFF        <2> 		jne near fifindbatch
  4816 000038AA B001                <2> 		mov al, 1
  4817 000038AC 0005[7D7D0300]      <2> 		add [IFON], al
  4818 000038B2 E961FFFFFF          <2> 		jmp fifindbatch
  4819                              <2> 		
  4820                              <2> 		
  4821 000038B7 01                  <2> runnextline db 1
  4822 000038B8 00                  <2> iffalsebuf db 0
  4823 000038B9 C3                  <2> notbatch: ret 
  4824                              <1> %ifdef network.included
  4825                              <1> 	%include 'source/programs/arp.asm'
  4826 000038BA FF2C61727000        <2> db 255,44,"arp",0
  4827                              <2> 	;ARP TESTING
  4828                              <2> arptest:
  4829 000038C0 8B35[3C2D0000]      <2> 	mov esi, [currentcommandloc]
  4830 000038C6 81C604000000        <2> 	add esi, 4
  4831 000038CC E8CA280000          <2> 	call strtoip
  4832 000038D1 890D[78390000]      <2> 	mov [arptargetinfo + 6], ecx ;move to next ip
  4833 000038D7 E805290000          <2> 	call showip
  4834 000038DC 803D[7C390000]01    <2> 	cmp byte [arpconfig], 1
  4835 000038E3 7405                <2> 	je arptest2
  4836 000038E5 E841000000          <2> 	call arpinit
  4837                              <2> arptest2:	;try to reach 192.168.0.1
  4838 000038EA 8B0D[7C620000]      <2> 	mov ecx, [sysmac]
  4839 000038F0 668B1D[80620000]    <2> 	mov bx, [sysmac + 4]
  4840 000038F7 890D[58390000]      <2> 	mov [sourcemac], ecx
  4841 000038FD 66891D[5C390000]    <2> 	mov [sourcemac + 4],bx
  4842 00003904 890D[68390000]      <2> 	mov [arpsenderinfo], ecx
  4843 0000390A 66891D[6C390000]    <2> 	mov [arpsenderinfo + 4], bx
  4844 00003911 BF[52390000]        <2> 	mov edi, frame
  4845 00003916 BE[7C390000]        <2> 	mov esi, framend
  4846 0000391B E849280000          <2> 	call sendpacket
  4847 00003920 BE[C3620000]        <2> 	mov esi, line
  4848 00003925 E8D2E2FFFF          <2> 	call print
  4849 0000392A C3                  <2> 	ret
  4850                              <2> 	
  4851                              <2> arpinit:
  4852 0000392B BE[7D390000]        <2> 	mov esi, arptable
  4853 00003930 BF[7C620000]        <2> 	mov edi, sysmac
  4854 00003935 BB[78620000]        <2> 	mov ebx, sysip
  4855 0000393A 8B0F                <2> 	mov ecx, [edi]
  4856 0000393C 890E                <2> 	mov [esi], ecx
  4857 0000393E 668B4F04            <2> 	mov cx, [edi + 4]
  4858 00003942 894E04              <2> 	mov [esi + 4], ecx
  4859 00003945 8B0B                <2> 	mov ecx, [ebx]
  4860 00003947 894E06              <2> 	mov [esi + 6], ecx
  4861 0000394A C605[7C390000]01    <2> 	mov byte [arpconfig], 1
  4862 00003951 C3                  <2> 	ret
  4863                              <2> 	
  4864                              <2> ;example frame
  4865                              <2> frame:
  4866 00003952 FFFFFFFFFFFF        <2> destinationmac:	db 0xFF,0xFF,0xFF,0xFF,0xFF,0xFF
  4867 00003958 000000000000        <2> sourcemac:		db 0,0,0,0,0,0
  4868 0000395E 0806                <2> ethertype:		db 8,6			;arp is 0x806
  4869                              <2> 	;;example packet
  4870 00003960 0100                <2> 	arppacket: 		dw 1			;ethernet is 1
  4871 00003962 0800                <2> 	arpprotocol: 	db 8,0			;ip is 0x800
  4872 00003964 0604                <2> 					db 6,4			;length of mac, length of ip
  4873 00003966 0001                <2> 	arpoperation: 	db 0,1			;one for arp request
  4874 00003968 000000000000        <2> 	arpsenderinfo:	db 0x00,0x00,0x00,0x00,0x00,0x00	;mac
  4875 0000396E C0A80073            <2> 					db 192,168,0,115		;ip
  4876 00003972 000000000000        <2> 	arptargetinfo:	db 0x00,0x00,0x00,0x00,0x00,0x00	;ignored in requests
  4877 00003978 C0A80000            <2> 					db 192,168,0,0			;ip
  4878                              <2> framend:
  4879                              <2> 
  4880 0000397C 00                  <2> arpconfig db 0
  4881                              <2> arptable:	;;mac,ip
  4882 0000397D 000000000000000000- <2> 	times 10 db 0,0,0,0,0,0,0,0,0,0
  4883 00003986 00<rept>            <2>
  4884                              <2> arptableend:	
  4885                              <1> %endif
  4886                              <1> %include 'source/programs/batch.asm'
  4887 000039E1 FF2C626174636800    <2> db 255,44,"batch",0
  4888                              <2> 	batchst: 
  4889 000039E9 8B3D[3C2D0000]      <2> 		mov edi, [currentcommandloc]
  4890 000039EF 81C706000000        <2> 		add edi, 6
  4891 000039F5 803F00              <2> 		cmp byte [edi], 0
  4892 000039F8 0F846D000000        <2> 		je near nonamefound
  4893 000039FE BE00004000          <2> 		mov esi, 0x400000
  4894 00003A03 E84F220000          <2> 		call loadfile
  4895 00003A08 89D0                <2> 		mov eax, edx
  4896 00003A0A 3D94010000          <2> 		cmp eax, 404
  4897 00003A0F 7465                <2> 		je goodbatchname
  4898 00003A11 BE[1C3A0000]        <2> 		mov esi, badbatchname
  4899 00003A16 E8E1E1FFFF          <2> 		call print
  4900 00003A1B C3                  <2> 		ret
  4901 00003A1C 546869732066696C65- <2> 		badbatchname db "This file already exists!",10,0
  4902 00003A25 20616C726561647920- <2>
  4903 00003A2E 657869737473210A00  <2>
  4904 00003A37 596F75206861766520- <2> 		namenotfoundbatch db "You have to type a name after the command.",10,0
  4905 00003A40 746F20747970652061- <2>
  4906 00003A49 206E616D6520616674- <2>
  4907 00003A52 65722074686520636F- <2>
  4908 00003A5B 6D6D616E642E0A00    <2>
  4909 00003A63 00000000            <2> 		esicache3 dd 0
  4910 00003A67 00000000            <2> 		esicache2 dd 0
  4911                              <2> 	nonamefound:
  4912 00003A6B BE[373A0000]        <2> 		mov esi, namenotfoundbatch
  4913 00003A70 E887E1FFFF          <2> 		call print
  4914 00003A75 C3                  <2> 		ret
  4915                              <2> 	goodbatchname:
  4916 00003A76 BE00004000          <2> 		mov esi, 0x400000
  4917                              <2> 	batchcreate:
  4918 00003A7B 8935[633A0000]      <2> 		mov [esicache3], esi
  4919 00003A81 BF00008000          <2> 		mov edi, 0x800000
  4920 00003A86 B00A                <2> 		mov al, 10
  4921 00003A88 B307                <2> 		mov bl, 7
  4922 00003A8A B404                <2> 		mov ah, 4
  4923 00003A8C CD30                <2> 		int 30h
  4924 00003A8E 8935[673A0000]      <2> 		mov [esicache2], esi
  4925 00003A94 8A0E                <2> 		mov cl, [esi]
  4926 00003A96 8B35[633A0000]      <2> 		mov esi, [esicache3]
  4927 00003A9C BB[D33A0000]        <2> 		mov ebx, exitword
  4928 00003AA1 E8DBF2FFFF          <2> 		call cndtest
  4929 00003AA6 3C01                <2> 		cmp al, 1
  4930 00003AA8 7414                <2> 		je endbatchcreate
  4931 00003AAA 3C02                <2> 		cmp al, 2
  4932 00003AAC 7410                <2> 		je endbatchcreate
  4933 00003AAE 8B35[673A0000]      <2> 		mov esi, [esicache2]
  4934 00003AB4 B00A                <2> 		mov al, 10
  4935 00003AB6 8806                <2> 		mov [esi], al
  4936 00003AB8 46                  <2> 		inc esi
  4937 00003AB9 E9BDFFFFFF          <2> 		jmp batchcreate
  4938                              <2> 	endbatchcreate:
  4939 00003ABE 8B35[633A0000]      <2> 		mov esi, [esicache3]
  4940 00003AC4 31C0                <2> 		xor eax, eax
  4941 00003AC6 8806                <2> 		mov [esi], al
  4942 00003AC8 BE00004000          <2> 		mov esi, 0x400000
  4943 00003ACD E82AE1FFFF          <2> 		call print
  4944 00003AD2 C3                  <2> 		ret
  4945                              <2> 	
  4946 00003AD3 5C7800              <2> 	exitword db "\x",0
  4947 00003AD6 54797065205C782074- <2> 	wordmsg db "Type \x to exit.",10,0
  4948 00003ADF 6F20657869742E0A00  <2>
  4949                              <1> %ifdef gui.background
  4950                              <1> 	%include 'source/programs/background.asm'
  4951                              <1> %endif
  4952                              <1> %include 'source/programs/beep.asm'
  4953 00003AE8 FF2C6265657000      <2> 	db 255,44,"beep",0
  4954                              <2> beep:
  4955 00003AEF B8[143B0000]        <2> 	mov eax, beepstart
  4956 00003AF4 A3[4E020000]        <2> 	mov [soundpos], eax
  4957 00003AF9 B8[183B0000]        <2> 	mov eax, beepend
  4958 00003AFE A3[52020000]        <2> 	mov [soundendpos], eax
  4959 00003B03 C605[4B020000]01    <2> 	mov byte [soundon], 1
  4960                              <2> waitforsoundendbeep:
  4961 00003B0A A0[4B020000]        <2> 	mov al, [soundon]
  4962 00003B0F 3C00                <2> 	cmp al, 0
  4963 00003B11 75F7                <2> 	jne waitforsoundendbeep
  4964 00003B13 C3                  <2> 	ret
  4965                              <2> 	
  4966                              <2> beepstart:
  4967 00003B14 3200D111            <2> 	dw 50, 4561
  4968                              <2> beepend:
  4969                              <1> %ifdef dos.compatible
  4970                              <1> %else
  4971                              <1> 	%include 'source/programs/boot.asm'
  4972 00003B18 FF2C626F6F7400      <2> db 255,44,"boot",0
  4973                              <2> quickboot:
  4974                              <2> 	;load and jump to the bootloader
  4975                              <2> 	; mov ecx, 1
  4976                              <2> 	; xor ebx, ebx
  4977                              <2> 	; mov esi, 0x400000
  4978                              <2> 	; call diskr
  4979                              <2> 	; mov ax, LINEAR_SEL
  4980                              <2> 	; mov fs, ax
  4981                              <2> 	; mov esi, 0x400000
  4982                              <2> 	; mov edi, 0x7C00
  4983                              <2> 	; xor ebx, ebx
  4984                              <2> ; .lp:
  4985                              <2> 	; mov ecx, [esi+ebx]
  4986                              <2> 	; mov [fs:edi+ebx], ecx
  4987                              <2> 	; add ebx, 4
  4988                              <2> 	; cmp ebx, 512
  4989                              <2> 	; jb .lp
  4990 00003B1F 66BB[2F3B]          <2> 	mov bx, bootload
  4991 00003B23 66891D[D10C0000]    <2> 	mov [realmodeptr], bx
  4992 00003B2A E990D0FFFF          <2> 	jmp realmode
  4993                              <2> [BITS 16]
  4994                              <2> bootload:
  4995 00003B2F B80300              <2> 	mov ax, 3
  4996 00003B32 31DB                <2> 	xor bx, bx
  4997 00003B34 CD10                <2> 	int 10h
  4998 00003B36 EA007C0000          <2> 	jmp 0:0x7C00
  4999                              <2> [BITS 32]
  5000                              <1> %endif
  5001                              <1> %include 'source/programs/cd.asm'
  5002 00003B3B FF2C636400          <2> db 255,44,"cd",0
  5003                              <2> cd:
  5004 00003B40 8B35[3C2D0000]      <2> 	mov esi, [currentcommandloc]
  5005 00003B46 81C603000000        <2> 	add esi, 3
  5006 00003B4C 8B3D[747B0300]      <2> 	mov edi, [currentfolderloc]
  5007 00003B52 893D[707B0300]      <2> 	mov [lastfolderloc], edi
  5008 00003B58 81C7[787B0300]      <2> 	add edi, currentfolder
  5009 00003B5E 4F                  <2> 	dec edi
  5010 00003B5F 66813E2E2E          <2> 	cmp word [esi], ".."
  5011 00003B64 742A                <2> 	je .moveup
  5012 00003B66 47                  <2> 	inc edi
  5013                              <2> .movedown:
  5014 00003B67 8A06                <2> 	mov al, [esi]
  5015 00003B69 8807                <2> 	mov [edi], al
  5016 00003B6B 47                  <2> 	inc edi
  5017 00003B6C 46                  <2> 	inc esi
  5018 00003B6D 3C00                <2> 	cmp al, 0
  5019 00003B6F 740A                <2> 	je .donecd
  5020 00003B71 81FF[787D0300]      <2> 	cmp edi, currentfolderend
  5021 00003B77 72EE                <2> 	jb .movedown
  5022 00003B79 30C0                <2> 	xor al, al
  5023                              <2> .donecd:
  5024 00003B7B 4F                  <2> 	dec edi
  5025 00003B7C C6072F              <2> 	mov byte [edi], '/'
  5026 00003B7F 47                  <2> 	inc edi
  5027 00003B80 C60700              <2> 	mov byte [edi], 0
  5028 00003B83 81EF[787B0300]      <2> 	sub edi, currentfolder
  5029 00003B89 893D[747B0300]      <2> 	mov [currentfolderloc], edi
  5030 00003B8F C3                  <2> 	ret
  5031                              <2> .moveup:
  5032 00003B90 31C0                <2> 	xor eax, eax
  5033 00003B92 A3[707B0300]        <2> 	mov [lastfolderloc], eax
  5034                              <2> .moveuploop:
  5035 00003B97 4F                  <2> 	dec edi
  5036 00003B98 8A07                <2> 	mov al, [edi]
  5037 00003B9A 81FF[787B0300]      <2> 	cmp edi, currentfolder
  5038 00003BA0 763B                <2> 	jbe .moveupover
  5039 00003BA2 3C2F                <2> 	cmp al, '/'
  5040 00003BA4 75F1                <2> 	jne .moveuploop
  5041 00003BA6 C6072F              <2> 	mov byte [edi], '/'
  5042 00003BA9 47                  <2> 	inc edi
  5043 00003BAA C60700              <2> 	mov byte [edi], 0
  5044 00003BAD 81EF[787B0300]      <2> 	sub edi, currentfolder
  5045 00003BB3 893D[747B0300]      <2> 	mov [currentfolderloc], edi
  5046 00003BB9 81C7[787B0300]      <2> 	add edi, currentfolder
  5047 00003BBF 4F                  <2> 	dec edi
  5048                              <2> .lastfolder:
  5049 00003BC0 4F                  <2> 	dec edi
  5050 00003BC1 8A07                <2> 	mov al, [edi]
  5051 00003BC3 81FF[787B0300]      <2> 	cmp edi, currentfolder
  5052 00003BC9 7604                <2> 	jbe .donemoveup
  5053 00003BCB 3C2F                <2> 	cmp al, '/'
  5054 00003BCD 75F1                <2> 	jne .lastfolder
  5055                              <2> .donemoveup:
  5056 00003BCF 47                  <2> 	inc edi
  5057 00003BD0 81EF[787B0300]      <2> 	sub edi, currentfolder
  5058 00003BD6 893D[707B0300]      <2> 	mov [lastfolderloc], edi
  5059 00003BDC C3                  <2> 	ret
  5060                              <2> .moveupover:
  5061 00003BDD BF[787B0300]        <2> 	mov edi, currentfolder
  5062 00003BE2 C6072F              <2> 	mov byte [edi], '/'
  5063 00003BE5 47                  <2> 	inc edi
  5064 00003BE6 C60700              <2> 	mov byte [edi], 0
  5065 00003BE9 31C0                <2> 	xor eax, eax
  5066 00003BEB A3[707B0300]        <2> 	mov [lastfolderloc], eax
  5067 00003BF0 40                  <2> 	inc eax
  5068 00003BF1 A3[747B0300]        <2> 	mov [currentfolderloc], eax
  5069 00003BF6 C3                  <2> 	ret
  5070                              <1> %include 'source/programs/charmap.asm'
  5071 00003BF7 00                  <2> charmapnum db 0
  5072 00003BF8 FF2C636861726D6170- <2> db 255,44,"charmap",0
  5073 00003C01 00                  <2>
  5074 00003C02 8B35[3C2D0000]      <2> 	mov esi, [currentcommandloc]
  5075 00003C08 81C609000000        <2> 	add esi, 9
  5076 00003C0E 803E00              <2> 	cmp byte [esi], 0
  5077 00003C11 7412                <2> 	je .nospecific
  5078 00003C13 E8BAF4FFFF          <2> 	call cnvrthextxt
  5079 00003C18 6689C8              <2> 	mov ax, cx
  5080 00003C1B 66BB0700            <2> 	mov bx, 7
  5081 00003C1F E881E6FFFF          <2> 	call prcharq
  5082 00003C24 C3                  <2> 	ret
  5083                              <2> .nospecific:
  5084 00003C25 66BB0700            <2> 	mov bx, 7
  5085 00003C29 66B82000            <2> 	mov ax, " "
  5086 00003C2D C605[F73B0000]00    <2> 	mov byte [charmapnum], 0
  5087 00003C34 E86CE6FFFF          <2> 	call prcharq
  5088 00003C39 E867E6FFFF          <2> 	call prcharq
  5089 00003C3E E862E6FFFF          <2> 	call prcharq
  5090 00003C43 E85DE6FFFF          <2> 	call prcharq
  5091 00003C48 66B83000            <2> 	mov ax, "0"
  5092                              <2> charmapnumprnt:
  5093 00003C4C E854E6FFFF          <2> 	call prcharq
  5094 00003C51 6640                <2> 	inc ax
  5095 00003C53 6650                <2> 	push ax
  5096 00003C55 66B82000            <2> 	mov ax, " "
  5097 00003C59 E847E6FFFF          <2> 	call prcharq
  5098 00003C5E 6658                <2> 	pop ax
  5099 00003C60 663D3900            <2> 	cmp ax, "9"
  5100 00003C64 76E6                <2> 	jbe charmapnumprnt
  5101 00003C66 66B84100            <2> 	mov ax, "A"
  5102                              <2> charmapnumprnt2:
  5103 00003C6A E836E6FFFF          <2> 	call prcharq
  5104 00003C6F 6640                <2> 	inc ax
  5105 00003C71 6650                <2> 	push ax
  5106 00003C73 66B82000            <2> 	mov ax, " "
  5107 00003C77 E829E6FFFF          <2> 	call prcharq
  5108 00003C7C 6658                <2> 	pop ax
  5109 00003C7E 663D4700            <2> 	cmp ax, "G"
  5110 00003C82 72E6                <2> 	jb charmapnumprnt2
  5111                              <2> 	
  5112 00003C84 BE[C3620000]        <2> 	mov esi, line
  5113 00003C89 E84ADFFFFF          <2> 	call printquiet
  5114 00003C8E 6631C0              <2> 	xor ax, ax
  5115 00003C91 6689C1              <2> 	mov cx, ax
  5116 00003C94 E8D8F2FFFF          <2> 	call showhexsmall
  5117 00003C99 E973000000          <2> 	jmp charmapnocopy ;the first char is 0 which is unprintable
  5118                              <2> charmapcopy:
  5119 00003C9E 6640                <2> 	inc ax
  5120 00003CA0 6650                <2> 	push ax
  5121 00003CA2 663D0800            <2> 	cmp ax, 8
  5122 00003CA6 7469                <2> 	je charmapnocopy
  5123 00003CA8 663D0900            <2> 	cmp ax, 9
  5124 00003CAC 7463                <2> 	je charmapnocopy
  5125 00003CAE 663D0A00            <2> 	cmp ax, 10
  5126 00003CB2 745D                <2> 	je charmapnocopy
  5127 00003CB4 663D0D00            <2> 	cmp ax, 13
  5128 00003CB8 7457                <2> 	je charmapnocopy
  5129 00003CBA 663DFF00            <2> 	cmp ax, 255
  5130 00003CBE 7451                <2> 	je charmapnocopy
  5131 00003CC0 663D0001            <2> 	cmp ax, 256
  5132 00003CC4 7446                <2> 	je nomorecharmap
  5133 00003CC6 E8DAE5FFFF          <2> 	call prcharq
  5134 00003CCB 66B82000            <2> 	mov ax, " "
  5135 00003CCF E8D1E5FFFF          <2> 	call prcharq
  5136 00003CD4 6658                <2> 	pop ax
  5137                              <2> charmapcopycheck:
  5138 00003CD6 FE05[F73B0000]      <2> 	inc byte [charmapnum]
  5139 00003CDC 803D[F73B0000]10    <2> 	cmp byte [charmapnum], 16
  5140 00003CE3 72B9                <2> 	jb charmapcopy
  5141 00003CE5 6650                <2> 	push ax
  5142 00003CE7 BE[C3620000]        <2> 	mov esi, line
  5143 00003CEC E8E7DEFFFF          <2> 	call printquiet
  5144 00003CF1 6658                <2> 	pop ax
  5145 00003CF3 3CFF                <2> 	cmp al, 255
  5146 00003CF5 7415                <2> 	je nomorecharmap
  5147 00003CF7 88C1                <2> 	mov cl, al
  5148 00003CF9 FEC1                <2> 	inc cl
  5149 00003CFB E871F2FFFF          <2> 	call showhexsmall
  5150 00003D00 C605[F73B0000]00    <2> 	mov byte [charmapnum], 0
  5151 00003D07 E992FFFFFF          <2> 	jmp charmapcopy
  5152                              <2> nomorecharmap:
  5153 00003D0C E966EDFFFF          <2> 	jmp nwcmd
  5154                              <2> charmapnocopy:
  5155 00003D11 6650                <2> 	push ax
  5156 00003D13 66B82000            <2> 	mov ax, " "
  5157 00003D17 E889E5FFFF          <2> 	call prcharq
  5158 00003D1C E884E5FFFF          <2> 	call prcharq
  5159 00003D21 6658                <2> 	pop ax
  5160 00003D23 E9AEFFFFFF          <2> 	jmp charmapcopycheck
  5161                              <1> %ifdef gui.included
  5162                              <1> 	%include 'source/programs/circle.asm'
  5163                              <1> %endif
  5164                              <1> %include 'source/programs/clear.asm'
  5165 00003D28 FF2C636C65617200    <2> db 255,44,"clear",0
  5166 00003D30 E876DFFFFF          <2> 		call clear
  5167 00003D35 C3                  <2> 		ret 
  5168                              <1> %include 'source/programs/cpuid.asm'
  5169 00003D36 FF2C637075696400    <2> db 255,44,"cpuid",0
  5170 00003D3E 31C0                <2> 	xor eax, eax
  5171 00003D40 0FA2                <2> 	cpuid
  5172 00003D42 891D[933D0000]      <2> 	mov [cpuidbuf], ebx
  5173 00003D48 8915[973D0000]      <2> 	mov [cpuidbuf + 4], edx
  5174 00003D4E 890D[9B3D0000]      <2> 	mov [cpuidbuf + 8], ecx
  5175 00003D54 BE[933D0000]        <2> 	mov esi, cpuidbuf
  5176 00003D59 E89EDEFFFF          <2> 	call print
  5177 00003D5E BE[C3620000]        <2> 	mov esi, line
  5178 00003D63 E894DEFFFF          <2> 	call print
  5179 00003D68 B801000000          <2> 	mov eax, 1
  5180 00003D6D 0FA2                <2> 	cpuid
  5181 00003D6F 89C1                <2> 	mov ecx, eax
  5182 00003D71 C605[702F0000]02    <2> 	mov byte [firsthexshown], 2
  5183 00003D78 E808F2FFFF          <2> 	call showhex
  5184 00003D7D B808000080          <2> 	mov eax, 0x80000008
  5185 00003D82 0FA2                <2> 	cpuid
  5186 00003D84 89C1                <2> 	mov ecx, eax
  5187 00003D86 C605[702F0000]02    <2> 	mov byte [firsthexshown], 2
  5188 00003D8D E8F3F1FFFF          <2> 	call showhex
  5189 00003D92 C3                  <2> 	ret
  5190                              <2> 	
  5191 00003D93 00<rept>            <2> cpuidbuf times 13 db 0
  5192                              <2> cpuidvendorend:
  5193                              <1> %include 'source/programs/date.asm'
  5194 00003DA0 082E30303030303030- <2> timenscache db 8,".000000000"
  5195 00003DA9 3030                <2>
  5196 00003DAB 200A00              <2> timenscacheend: db " ",10,0
  5197 00003DAE 00                  <2> istimeset db 0
  5198 00003DAF 456E74657220746865- <2> settimemsg db "Enter the current UNIX time:",10,0
  5199 00003DB8 2063757272656E7420- <2>
  5200 00003DC1 554E49582074696D65- <2>
  5201 00003DCA 3A0A00              <2>
  5202 00003DCD 00<rept>            <2> timeinputbuffer times 12 db 0
  5203 00003DD9 00                  <2> timeinputbend: db 0
  5204                              <2> 
  5205 00003DDA FF2C6461746500      <2> db 255,44,"date",0
  5206                              <2> 	;cmp byte [istimeset], 0
  5207                              <2> 	;jne timeisset
  5208 00003DE1 E880000000          <2> 	call time
  5209 00003DE6 E828020000          <2> 	call timeconvert	
  5210                              <2> 	; mov esi, settimemsg
  5211                              <2> 	; call print
  5212                              <2> 	; mov esi, timeinputbuffer
  5213                              <2> 	; mov edi, timeinputbend
  5214                              <2> 	; call readline
  5215                              <2> 	; mov esi, timeinputbuffer
  5216                              <2> 	; xor edi, edi
  5217                              <2> 	; call cnvrttxt
  5218 00003DEB 890D[43020000]      <2> 	mov [timeseconds], ecx
  5219                              <2> 	;xor ecx, ecx
  5220                              <2> 	;mov [timenanoseconds], ecx
  5221 00003DF1 C605[AE3D0000]01    <2> 	mov byte [istimeset], 1
  5222                              <2> timeisset:
  5223 00003DF8 8B0D[43020000]      <2> 	mov ecx, [timeseconds]
  5224 00003DFE E83DF2FFFF          <2> 	call showdec
  5225                              <2> 	
  5226 00003E03 8B0D[47020000]      <2> 	mov ecx, [timenanoseconds]
  5227 00003E09 BE[A03D0000]        <2> 	mov esi, timenscache
  5228 00003E0E C7460230303030      <2> 	mov dword [esi+ 2], "0000"
  5229 00003E15 C7460630303030      <2> 	mov dword [esi + 6], "0000"
  5230 00003E1C C6460A30            <2> 	mov byte [esi + 10], "0"
  5231 00003E20 BE[AB3D0000]        <2> 	mov esi, timenscacheend
  5232 00003E25 E8F3EFFFFF          <2> 	call convert
  5233 00003E2A BE[A03D0000]        <2> 	mov esi, timenscache
  5234 00003E2F E8A4DDFFFF          <2> 	call printquiet
  5235                              <2> 	
  5236 00003E34 E82D000000          <2> 	call time
  5237 00003E39 BE[81410000]        <2> 	mov esi, timeshow
  5238 00003E3E E895DDFFFF          <2> 	call printquiet
  5239 00003E43 BE[C3620000]        <2> 	mov esi, line
  5240 00003E48 E88BDDFFFF          <2> 	call printquiet
  5241 00003E4D BE[8A410000]        <2> 	mov esi, dateshow
  5242 00003E52 E881DDFFFF          <2> 	call printquiet
  5243 00003E57 BE[C3620000]        <2> 	mov esi, line
  5244 00003E5C E877DDFFFF          <2> 	call printquiet
  5245 00003E61 E9BE000000          <2> 	jmp findday
  5246                              <2> time:
  5247 00003E66 E851010000          <2> 	call tstackput1
  5248 00003E6B B00A                <2> 	mov al,10			;Get RTC register A
  5249 00003E6D E87B010000          <2> 	call tget1
  5250 00003E72 A880                <2> 	test al,0x80			;Is update in progress?
  5251 00003E74 75F0                <2> 	jne time				; yes, wait
  5252                              <2> 
  5253 00003E76 B000                <2> 	mov al,0			;Get seconds (00 to 59)
  5254 00003E78 E870010000          <2> 	call tget1
  5255 00003E7D A2[78410000]        <2> 	mov [RTCtimeSecond],al
  5256                              <2> 
  5257 00003E82 B002                <2> 	mov al,0x02			;Get minutes (00 to 59)
  5258 00003E84 E864010000          <2> 	call tget1
  5259 00003E89 A2[79410000]        <2> 	mov [RTCtimeMinute],al
  5260                              <2> 
  5261 00003E8E B004                <2> 	mov al,0x04			;Get hours (see notes)
  5262 00003E90 E858010000          <2> 	call tget1
  5263 00003E95 A2[7A410000]        <2> 	mov [RTCtimeHour],al
  5264                              <2> 
  5265 00003E9A B007                <2> 	mov al,0x07			;Get day of month (01 to 31)
  5266 00003E9C E84C010000          <2> 	call tget1
  5267 00003EA1 A2[7B410000]        <2> 	mov [RTCtimeDay],al
  5268                              <2> 
  5269 00003EA6 B008                <2> 	mov al,0x08			;Get month (01 to 12)
  5270 00003EA8 E840010000          <2> 	call tget1
  5271 00003EAD 241F                <2> 	and al, 11111b
  5272 00003EAF A2[7C410000]        <2> 	mov [RTCtimeMonth],al
  5273                              <2> 
  5274 00003EB4 B009                <2> 	mov al,0x09			;Get year (00 to 99)
  5275 00003EB6 E832010000          <2> 	call tget1
  5276 00003EBB A2[7D410000]        <2> 	mov [RTCtimeYear],al
  5277                              <2> 	
  5278 00003EC0 BE[81410000]        <2> 	mov esi, timeshow
  5279 00003EC5 8A2D[7A410000]      <2> 	mov ch, [RTCtimeHour]
  5280 00003ECB E828010000          <2> 	call tput1
  5281 00003ED0 8A2D[79410000]      <2> 	mov ch, [RTCtimeMinute]
  5282 00003ED6 E81D010000          <2> 	call tput1
  5283 00003EDB 8A2D[78410000]      <2> 	mov ch, [RTCtimeSecond]
  5284 00003EE1 E812010000          <2> 	call tput1
  5285 00003EE6 BE[8A410000]        <2> 	mov esi, dateshow
  5286 00003EEB 8A2D[7C410000]      <2> 	mov ch, [RTCtimeMonth]
  5287 00003EF1 E802010000          <2> 	call tput1
  5288 00003EF6 8A2D[7B410000]      <2> 	mov ch, [RTCtimeDay]
  5289 00003EFC E8F7000000          <2> 	call tput1
  5290 00003F01 B520                <2> 	mov ch, 0x20
  5291 00003F03 E8F0000000          <2> 	call tput1
  5292 00003F08 4E                  <2> 	dec esi
  5293 00003F09 8A2D[7D410000]      <2> 	mov ch, [RTCtimeYear]
  5294 00003F0F E8E4000000          <2> 	call tput1
  5295 00003F14 E8BD000000          <2> 	call tstackget1
  5296 00003F19 C3                  <2> 	ret
  5297 00003F1A BE[81410000]        <2> 	mov esi, timeshow
  5298 00003F1F E8D8DCFFFF          <2> 	call print
  5299                              <2> ;;get day of week
  5300                              <2> ;;add these:
  5301                              <2> ;;century value
  5302                              <2> ;;last 2 digits of year
  5303                              <2> ;;last 2 digits of year right shifted twice
  5304                              <2> ;;month table value
  5305                              <2> ;;day of the month
  5306                              <2> ;;divide these by 7
  5307                              <2> ;;the remainder is the day
  5308                              <2> findday:
  5309 00003F24 31C0                <2> 	xor eax, eax
  5310                              <2> ;;first convert the values from BCD to hex
  5311 00003F26 A0[7B410000]        <2> 	mov al, [RTCtimeDay]
  5312 00003F2B E873000000          <2> 	call converttohex
  5313 00003F30 8825[7E410000]      <2> 	mov [dayhex], ah
  5314 00003F36 A0[7C410000]        <2> 	mov al, [RTCtimeMonth]
  5315 00003F3B E863000000          <2> 	call converttohex
  5316 00003F40 8825[7F410000]      <2> 	mov [monthhex], ah
  5317 00003F46 A0[7D410000]        <2> 	mov al, [RTCtimeYear]
  5318 00003F4B E853000000          <2> 	call converttohex
  5319 00003F50 8825[80410000]      <2> 	mov [yearhex], ah
  5320 00003F56 31C0                <2> 	xor eax, eax
  5321 00003F58 A0[80410000]        <2> 	mov al, [yearhex]
  5322 00003F5D C0E802              <2> 	shr al, 2
  5323 00003F60 0205[80410000]      <2> 	add al, [yearhex]
  5324 00003F66 0506000000          <2> 	add eax, 6
  5325 00003F6B 31DB                <2> 	xor ebx, ebx
  5326 00003F6D 8A1D[7F410000]      <2> 	mov bl, [monthhex]
  5327 00003F73 FECB                <2> 	dec bl
  5328 00003F75 81C3[9F410000]      <2> 	add ebx, month
  5329 00003F7B 31C9                <2> 	xor ecx, ecx
  5330 00003F7D 8A0B                <2> 	mov cl, [ebx]
  5331 00003F7F 01C8                <2> 	add eax, ecx
  5332 00003F81 8A0D[7E410000]      <2> 	mov cl, [dayhex]
  5333 00003F87 01C8                <2> 	add eax, ecx
  5334 00003F89 66BB0700            <2> 	mov bx, 7
  5335 00003F8D 31D2                <2> 	xor edx, edx
  5336 00003F8F 66F7F3              <2> 	div bx
  5337 00003F92 C1E202              <2> 	shl edx, 2
  5338 00003F95 81C2[AB410000]      <2> 	add edx, day
  5339 00003F9B 8B32                <2> 	mov esi, [edx]
  5340 00003F9D E85ADCFFFF          <2> 	call print
  5341 00003FA2 C3                  <2> 	ret
  5342                              <2> 	
  5343                              <2> converttohex:
  5344 00003FA3 88C4                <2> 	mov ah, al
  5345 00003FA5 C0E804              <2> 	shr al, 4
  5346 00003FA8 C0E404              <2> 	shl ah, 4
  5347 00003FAB C0EC04              <2> 	shr ah, 4
  5348 00003FAE 3C00                <2> 	cmp al, 0
  5349 00003FB0 7409                <2> 	je noconverttohex
  5350                              <2> converttohexlp:
  5351 00003FB2 80C40A              <2> 	add ah, 10
  5352 00003FB5 FEC8                <2> 	dec al
  5353 00003FB7 3C00                <2> 	cmp al, 0
  5354 00003FB9 75F7                <2> 	jne converttohexlp
  5355                              <2> noconverttohex:
  5356 00003FBB C3                  <2> 	ret
  5357                              <2> 	
  5358                              <2> tstackput1:
  5359 00003FBC 8935[74410000]      <2> 	mov [tstack + 20], esi
  5360 00003FC2 BE[60410000]        <2> 	mov esi, tstack
  5361 00003FC7 8906                <2> 	mov [esi], eax
  5362 00003FC9 895E04              <2> 	mov [esi + 4], ebx
  5363 00003FCC 894E08              <2> 	mov [esi + 8], ecx
  5364 00003FCF 89560C              <2> 	mov [esi + 12], edx
  5365 00003FD2 897E10              <2> 	mov [esi + 16], edi
  5366 00003FD5 C3                  <2> 	ret
  5367                              <2> 	
  5368                              <2> tstackget1:
  5369 00003FD6 BE[60410000]        <2> 	mov esi, tstack
  5370 00003FDB 8B06                <2> 	mov eax, [esi]
  5371 00003FDD 8B5E04              <2> 	mov ebx, [esi + 4]
  5372 00003FE0 8B4E08              <2> 	mov ecx, [esi + 8]
  5373 00003FE3 8B560C              <2> 	mov edx, [esi + 12]
  5374 00003FE6 8B7E10              <2> 	mov edi, [esi + 16]
  5375 00003FE9 8B7614              <2> 	mov esi, [esi + 20]
  5376 00003FEC C3                  <2> 	ret
  5377                              <2> 	
  5378                              <2> tget1:
  5379 00003FED 66BA7000            <2> 	mov dx, 0x70
  5380 00003FF1 EE                  <2> 	out dx, al
  5381 00003FF2 6642                <2> 	inc dx
  5382 00003FF4 EC                  <2> 	in al, dx
  5383 00003FF5 664A                <2> 	dec dx
  5384 00003FF7 C3                  <2> 	ret
  5385                              <2> 	
  5386                              <2> tput1:
  5387 00003FF8 66C1E904            <2> 	shr cx, 4
  5388 00003FFC B030                <2> 	mov al, 48
  5389 00003FFE 00E8                <2> 	add al, ch
  5390 00004000 8806                <2> 	mov [esi], al
  5391 00004002 46                  <2> 	inc esi
  5392 00004003 B030                <2> 	mov al, 48
  5393 00004005 C0E904              <2> 	shr cl, 4
  5394 00004008 00C8                <2> 	add al, cl
  5395 0000400A 8806                <2> 	mov [esi], al
  5396 0000400C 81C602000000        <2> 	add esi, 2
  5397 00004012 C3                  <2> 	ret
  5398                              <2> 	
  5399                              <2> timeconvert: ;return time in the RTCtime stuff in ecx
  5400 00004013 31DB                <2> 	xor ebx, ebx
  5401 00004015 31C9                <2> 	xor ecx, ecx
  5402 00004017 31FF                <2> 	xor edi, edi
  5403 00004019 31F6                <2> 	xor esi, esi
  5404                              <2> 	
  5405 0000401B A0[78410000]        <2> 	mov al, [RTCtimeSecond]
  5406 00004020 E87EFFFFFF          <2> 	call converttohex
  5407 00004025 88E1                <2> 	mov cl, ah
  5408                              <2> 	
  5409 00004027 A0[79410000]        <2> 	mov al, [RTCtimeMinute]
  5410 0000402C E872FFFFFF          <2> 	call converttohex
  5411 00004031 88E3                <2> 	mov bl, ah
  5412 00004033 B83C000000          <2> 	mov eax, 60
  5413 00004038 31D2                <2> 	xor edx, edx
  5414 0000403A F7E3                <2> 	mul ebx
  5415 0000403C 01C1                <2> 	add ecx, eax
  5416                              <2> 	
  5417 0000403E A0[7A410000]        <2> 	mov al, [RTCtimeHour]
  5418 00004043 E85BFFFFFF          <2> 	call converttohex
  5419 00004048 88E3                <2> 	mov bl, ah
  5420 0000404A B8100E0000          <2> 	mov eax, 3600
  5421 0000404F 31D2                <2> 	xor edx, edx
  5422 00004051 F7E3                <2> 	mul ebx
  5423 00004053 01C1                <2> 	add ecx, eax
  5424                              <2> 		
  5425 00004055 31C0                <2> 	xor eax, eax
  5426 00004057 A0[7D410000]        <2> 	mov al, [RTCtimeYear]
  5427 0000405C E842FFFFFF          <2> 	call converttohex
  5428 00004061 6689C6              <2> 	mov si, ax
  5429 00004064 66C1EE08            <2> 	shr si, 8
  5430 00004068 6681FE4600          <2> 	cmp si, 70
  5431 0000406D 7705                <2> 	ja .no100
  5432 0000406F 6681C66400          <2> 	add si, 100
  5433                              <2> .no100:
  5434 00004074 6681C66C07          <2> 	add si, 1900
  5435                              <2> 	
  5436 00004079 BB[52410000]        <2> 	mov ebx, .month
  5437 0000407E A0[7B410000]        <2> 	mov al, [RTCtimeDay]
  5438 00004083 E81BFFFFFF          <2> 	call converttohex
  5439 00004088 88E0                <2> 	mov al, ah
  5440 0000408A FEC8                <2> 	dec al
  5441 0000408C 31D2                <2> 	xor edx, edx
  5442 0000408E 88C2                <2> 	mov dl, al
  5443 00004090 A0[7C410000]        <2> 	mov al, [RTCtimeMonth]
  5444 00004095 E809FFFFFF          <2> 	call converttohex
  5445 0000409A 88D0                <2> 	mov al, dl
  5446 0000409C 88E2                <2> 	mov dl, ah
  5447 0000409E 30E4                <2> 	xor ah, ah
  5448 000040A0 6689D5              <2> 	mov bp, dx
  5449                              <2> 	
  5450 000040A3 6689F7              <2> 	mov di, si
  5451 000040A6 66C1EF02            <2> 	shr di, 2
  5452 000040AA 66C1E702            <2> 	shl di, 2
  5453 000040AE C605[53410000]1C    <2> 	mov byte [.month + 1], 28
  5454 000040B5 6639F7              <2> 	cmp di, si
  5455 000040B8 7506                <2> 	jne .nofebmod
  5456 000040BA FE05[53410000]      <2> 	inc byte [.month + 1]
  5457                              <2> .nofebmod:
  5458 000040C0 664D                <2> 	dec bp
  5459 000040C2 6681FD0000          <2> 	cmp bp, 0
  5460 000040C7 740A                <2> 	je .ylp
  5461 000040C9 8A13                <2> 	mov dl, [ebx]
  5462 000040CB 01D0                <2> 	add eax, edx
  5463 000040CD 43                  <2> 	inc ebx
  5464 000040CE E9EDFFFFFF          <2> 	jmp .nofebmod
  5465                              <2> 	
  5466                              <2> .ylp:
  5467 000040D3 6689F7              <2> 	mov di, si
  5468 000040D6 66C1EF02            <2> 	shr di, 2
  5469 000040DA 66C1E702            <2> 	shl di, 2
  5470 000040DE 81C18033E101        <2> 	add ecx, 31536000
  5471 000040E4 6639F7              <2> 	cmp di, si
  5472 000040E7 7506                <2> 	jne .noymod
  5473 000040E9 81C180510100        <2> 	add ecx, 86400
  5474                              <2> .noymod:
  5475 000040EF 664E                <2> 	dec si
  5476 000040F1 6681FEB207          <2> 	cmp si, 1970
  5477 000040F6 77DB                <2> 	ja .ylp
  5478                              <2> 	
  5479 000040F8 BB80510100          <2> 	mov ebx, 86400
  5480 000040FD 31D2                <2> 	xor edx, edx
  5481 000040FF F7E3                <2> 	mul ebx
  5482 00004101 01C1                <2> 	add ecx, eax
  5483                              <2> 	
  5484 00004103 31DB                <2> 	xor ebx, ebx
  5485 00004105 31D2                <2> 	xor edx, edx
  5486 00004107 B8100E0000          <2> 	mov eax, 3600
  5487 0000410C 8A3D[5E410000]      <2> 	mov bh, [timezoneh]
  5488 00004112 80FF80              <2> 	cmp bh, 128
  5489 00004115 720D                <2> 	jb .posh
  5490 00004117 28FB                <2> 	sub bl, bh
  5491 00004119 30FF                <2> 	xor bh, bh
  5492 0000411B F7E3                <2> 	mul ebx
  5493 0000411D 01C1                <2> 	add ecx, eax
  5494 0000411F E906000000          <2> 	jmp .doneth
  5495                              <2> .posh:
  5496 00004124 86DF                <2> 	xchg bl, bh
  5497 00004126 F7E3                <2> 	mul ebx
  5498 00004128 29C1                <2> 	sub ecx, eax
  5499                              <2> .doneth:
  5500                              <2> 
  5501 0000412A 31DB                <2> 	xor ebx, ebx	
  5502 0000412C 31D2                <2> 	xor edx, edx
  5503 0000412E B83C000000          <2> 	mov eax, 60
  5504 00004133 8A3D[5F410000]      <2> 	mov bh, [timezonem]
  5505 00004139 80FF80              <2> 	cmp bh, 128
  5506 0000413C 720D                <2> 	jb .posm
  5507 0000413E 28FB                <2> 	sub bl, bh
  5508 00004140 30FF                <2> 	xor bh, bh
  5509 00004142 F7E3                <2> 	mul ebx
  5510 00004144 01C1                <2> 	add ecx, eax
  5511 00004146 E906000000          <2> 	jmp .donetm
  5512                              <2> .posm:
  5513 0000414B 86DF                <2> 	xchg bl, bh
  5514 0000414D F7E3                <2> 	mul ebx
  5515 0000414F 29C1                <2> 	sub ecx, eax
  5516                              <2> .donetm:
  5517                              <2> 
  5518 00004151 C3                  <2> 	ret
  5519                              <2> 	
  5520                              <2> 
  5521 00004152 1F1C1F1E1F1E1F1F1E- <2> .month db 31,28,31,30,31,30,31,31,30,31,30,31
  5522 0000415B 1F1E1F              <2>
  5523                              <2> 
  5524 0000415E FA                  <2> 	timezoneh db -6
  5525 0000415F 00                  <2> 	timezonem db 0
  5526 00004160 000000000000000000- <2> 	tstack dd 0,0,0,0,0,0
  5527 00004169 000000000000000000- <2>
  5528 00004172 000000000000        <2>
  5529 00004178 00                  <2> 	RTCtimeSecond db 0
  5530 00004179 00                  <2> 	RTCtimeMinute db 0
  5531 0000417A 00                  <2> 	RTCtimeHour db 0
  5532 0000417B 00                  <2> 	RTCtimeDay db 0
  5533 0000417C 00                  <2> 	RTCtimeMonth db 0
  5534 0000417D 00                  <2> 	RTCtimeYear db 0
  5535 0000417E 00                  <2> 	dayhex db 0
  5536 0000417F 00                  <2> 	monthhex db 0
  5537 00004180 00                  <2> 	yearhex db 0
  5538 00004181 30303A30303A303000  <2> 	timeshow db "00:00:00",0
  5539 0000418A 30302D30302D303030- <2> 	dateshow db "00-00-0000 ",0
  5540 00004193 302000              <2>
  5541                              <2> 	oldcentury:	;;from 1700 to 1900
  5542 00004196 040200              <2> 	db 4,2,0
  5543                              <2> 	century:	;;from 2000 to 2500
  5544 00004199 060402000604        <2> 	db 6,4,2,0,6,4
  5545                              <2> 	month:
  5546 0000419F 000303060104060205- <2> 	db 0,3,3,6,1,4,6,2,5,0,3,5
  5547 000041A8 000305              <2>
  5548                              <2> 	day:
  5549 000041AB [C7410000]          <2> 	dd sunday
  5550 000041AF [CF410000]          <2> 	dd monday
  5551 000041B3 [D7410000]          <2> 	dd tuesday
  5552 000041B7 [E0410000]          <2> 	dd wednesday
  5553 000041BB [EB410000]          <2> 	dd thursday
  5554 000041BF [F5410000]          <2> 	dd friday
  5555 000041C3 [FD410000]          <2> 	dd saturday
  5556                              <2> sunday:
  5557 000041C7 53756E6461790A00    <2> 	db "Sunday",10,0
  5558                              <2> monday:
  5559 000041CF 4D6F6E6461790A00    <2> 	db "Monday",10,0
  5560                              <2> tuesday:
  5561 000041D7 547565736461790A00  <2> 	db "Tuesday",10,0
  5562                              <2> wednesday:
  5563 000041E0 5765646E6573646179- <2> 	db "Wednesday",10,0
  5564 000041E9 0A00                <2>
  5565                              <2> thursday:
  5566 000041EB 54687572736461790A- <2> 	db "Thursday",10,0
  5567 000041F4 00                  <2>
  5568                              <2> friday:
  5569 000041F5 4672696461790A00    <2> 	db "Friday",10,0
  5570                              <2> saturday:
  5571 000041FD 53617475726461790A- <2> 	db "Saturday",10,0
  5572 00004206 00                  <2>
  5573                              <1> %ifdef network.included
  5574                              <1> 	%include 'source/programs/dhcp.asm'
  5575 00004207 FF2C6468637000      <2> db 255,44,"dhcp",0
  5576                              <2> dhcp:
  5577 0000420E BE[CE420000]        <2> 	mov esi, .dhcp.mac
  5578 00004213 BB[AE430000]        <2> 	mov ebx, .dhcp.option.mac
  5579 00004218 BF[8E420000]        <2> 	mov edi, .mac
  5580 0000421D 31C9                <2> 	xor ecx, ecx
  5581 0000421F 66890D[A0420000]    <2> 	mov [.ip.checksum], cx
  5582 00004226 66890D[B0420000]    <2> 	mov [.udp.checksum], cx
  5583 0000422D 8B0D[7C620000]      <2> 	mov ecx, [sysmac]
  5584 00004233 890B                <2> 	mov [ebx], ecx
  5585 00004235 890F                <2> 	mov [edi], ecx
  5586 00004237 890E                <2> 	mov [esi], ecx
  5587 00004239 668B0D[80620000]    <2> 	mov cx, [sysmac + 4]
  5588 00004240 66894B04            <2> 	mov [ebx + 4], cx
  5589 00004244 66894E04            <2> 	mov [esi + 4], cx
  5590 00004248 66894F04            <2> 	mov [edi + 4], cx
  5591 0000424C BF[96420000]        <2> 	mov edi, .ip.header
  5592 00004251 BE[AA420000]        <2> 	mov esi, .ip.headerend
  5593 00004256 E8181F0000          <2> 	call getchecksum
  5594 0000425B 66890D[A0420000]    <2> 	mov [.ip.checksum], cx
  5595 00004262 BF[AA420000]        <2> 	mov edi, .udp.header
  5596 00004267 BE[C5430000]        <2> 	mov esi, .udp.end
  5597 0000426C E8021F0000          <2> 	call getchecksum
  5598 00004271 66890D[B0420000]    <2> 	mov [.udp.checksum], cx
  5599 00004278 BF[88420000]        <2> 	mov edi, .frame
  5600 0000427D BE[C5430000]        <2> 	mov esi, .udp.end
  5601 00004282 E8E21E0000          <2> 	call sendpacket
  5602 00004287 C3                  <2> 	ret
  5603                              <2> .frame:
  5604 00004288 FFFFFFFFFFFF        <2> 	.destmac db 0xFF,0xFF,0xFF,0xFF,0xFF,0xFF
  5605 0000428E 000000000000        <2> 	.mac db 0,0,0,0,0,0
  5606 00004294 0800                <2> 	db 8,0
  5607                              <2> .ip.header:
  5608 00004296 45                  <2> 	db (0x40 | (.ip.headerend - .ip.header)/4)
  5609 00004297 00                  <2> 	db 0
  5610 00004298 012F                <2> 	db (.udp.end - .ip.header)/256, (.udp.end - .ip.header)
  5611 0000429A 0000                <2> 	dw 0
  5612 0000429C 0000                <2> 	dw 0
  5613 0000429E 80                  <2> 	db 0x80
  5614 0000429F 11                  <2> 	db 17
  5615 000042A0 0000                <2> .ip.checksum dw 0
  5616 000042A2 00000000            <2> 	db 0,0,0,0
  5617 000042A6 FFFFFFFF            <2> 	db 255,255,255,255	
  5618                              <2> .ip.headerend:
  5619                              <2> .udp.header:
  5620 000042AA 0044                <2> 	db 0,68	;source port
  5621 000042AC 0043                <2> 	db 0,67 ;destination port
  5622 000042AE 011B                <2> 	db (.udp.end - .udp.header)/256, (.udp.end - .udp.header)
  5623 000042B0 0000                <2> .udp.checksum dw 0
  5624                              <2> .udp.headerend:
  5625                              <2> .dhcp.data:
  5626 000042B2 01                  <2> 	db 1	;message type
  5627 000042B3 01                  <2> 	db 1	;hardware type
  5628 000042B4 06                  <2> 	db 6	;hardware address length
  5629 000042B5 00                  <2> 	db 0	;hops
  5630 000042B6 EC2B2369            <2> 	db 0xEC,0x2B,0x23,0x69	;transaction ID
  5631 000042BA 0000                <2> 	db 0,0	;seconds elapsed
  5632 000042BC 0000                <2> 	db 0,0	;flags
  5633 000042BE 00000000            <2> 	db 0,0,0,0	;client ip address
  5634 000042C2 00000000            <2> 	db 0,0,0,0	;your ip address
  5635 000042C6 00000000            <2> 	db 0,0,0,0	;server ip address
  5636 000042CA 00000000            <2> 	db 0,0,0,0	;relay agent ip address
  5637 000042CE 000000000000        <2> .dhcp.mac db 0,0,0,0,0,0	;client hardware address
  5638 000042D4 00<rept>            <2> 	times 10 db 0	;padding
  5639 000042DE 00<rept>            <2> 	times 64 db 0	;server host name
  5640 0000431E 00<rept>            <2> 	times 128 db 0	;boot file name
  5641 0000439E 63825363            <2> 	db 0x63,0x82,0x53,0x63	;magic cookie
  5642                              <2> .dhcp.option.type:
  5643 000043A2 350103              <2> 	db 53,1,3	;DHCP Request
  5644 000043A5 3204C0A80002        <2> 	db 50,4,192,168,0,2	;requested IP
  5645 000043AB 3D07                <2> 	db 61,7 ;client id(mac)
  5646 000043AD 01                  <2> 	db 1	;Type=Ethernet
  5647 000043AE 000000000000        <2> .dhcp.option.mac:	db 0,0,0,0,0,0
  5648 000043B4 0C08                <2> 	db 12,8 ;host name
  5649 000043B6 536F6C6C65724F53    <2> .dhcp.option.name 	db "SollerOS"
  5650 000043BE 370401030F06        <2> 	db 55,4,1,3,15,6	;request subnet, router, domain name, name server
  5651 000043C4 FF                  <2> 	db 0xFF	;end DHCP options
  5652                              <2> .dhcp.end:
  5653                              <2> .udp.end:
  5654                              <2> 	
  5655                              <1> %endif
  5656                              <1> %ifdef disk.none
  5657                              <1> %else
  5658                              <1> 	%include 'source/programs/dos.asm'
  5659 000043C5 FF2C646F7300        <2> db 255,44,"dos",0
  5660                              <2> dosrunner:
  5661 000043CB 8925[6C7B0300]      <2> 	mov [previousstack], esp
  5662 000043D1 8B3D[3C2D0000]      <2> 	mov edi, [currentcommandloc]
  5663 000043D7 81C704000000        <2> 	add edi, 4
  5664 000043DD BE00014000          <2> 	mov esi,  0x100 + dosprogloc	;this should be the beginning of memory
  5665 000043E2 E870180000          <2> 	call loadfile
  5666 000043E7 8B3D[3C2D0000]      <2> 	mov edi, [currentcommandloc]
  5667 000043ED 81C704000000        <2> 	add edi, 4
  5668 000043F3 81FA94010000        <2> 	cmp edx, 404
  5669 000043F9 0F845E000000        <2> 	je near .noprogfound
  5670 000043FF BB81004000          <2> 	mov ebx, 0x81 + dosprogloc
  5671 00004404 31C9                <2> 	xor ecx, ecx
  5672                              <2> .findparams:
  5673 00004406 47                  <2> 	inc edi
  5674 00004407 8A07                <2> 	mov al, [edi]
  5675 00004409 3C20                <2> 	cmp al, " "
  5676 0000440B 75F9                <2> 	jne .findparams
  5677                              <2> .copyparams:
  5678 0000440D 8A07                <2> 	mov al, [edi]
  5679 0000440F 8803                <2> 	mov [ebx], al
  5680 00004411 43                  <2> 	inc ebx
  5681 00004412 47                  <2> 	inc edi
  5682 00004413 41                  <2> 	inc ecx
  5683 00004414 81FB00014000        <2> 	cmp ebx, 0x100 + dosprogloc
  5684 0000441A 7304                <2> 	jae .nomoreparams
  5685 0000441C 3C00                <2> 	cmp al, 0
  5686 0000441E 75ED                <2> 	jne .copyparams
  5687                              <2> .nomoreparams:
  5688 00004420 880D80004000        <2> 	mov [0x80 + dosprogloc], cl
  5689 00004426 66B85000            <2> 	mov ax, DOS_DATA_SEL
  5690 0000442A 8ED8                <2> 	mov ds, ax
  5691 0000442C 8EC0                <2> 	mov es, ax
  5692 0000442E 8EE0                <2> 	mov fs, ax
  5693 00004430 8EE8                <2> 	mov gs, ax
  5694 00004432 31C0                <2> 	xor eax, eax
  5695 00004434 31DB                <2> 	xor ebx, ebx
  5696 00004436 31C9                <2> 	xor ecx, ecx
  5697 00004438 31D2                <2> 	xor edx, edx
  5698 0000443A 31FF                <2> 	xor edi, edi
  5699 0000443C 31F6                <2> 	xor esi, esi
  5700 0000443E 9A000100004800      <2> 	call DOS_CODE_SEL:0x100
  5701 00004445 66BB3000            <2> 	mov bx, NEW_DATA_SEL
  5702 00004449 6689DA              <2> 	mov dx, bx
  5703 0000444C 8EC3                <2> 	mov es, bx
  5704 0000444E 8EE3                <2> 	mov fs, bx
  5705 00004450 66BB2000            <2> 	mov bx, SYS_DATA_SEL
  5706 00004454 8EEB                <2> 	mov gs, bx
  5707 00004456 8B25[6C7B0300]      <2> 	mov esp, [previousstack]
  5708 0000445C C3                  <2> 	ret
  5709                              <2> .noprogfound:
  5710 0000445D BE[8A620000]        <2> 	mov esi, notfound1
  5711 00004462 E895D7FFFF          <2> 	call print
  5712 00004467 8B35[3C2D0000]      <2> 	mov esi, [currentcommandloc]
  5713 0000446D 81C604000000        <2> 	add esi, 4
  5714 00004473 E884D7FFFF          <2> 	call print
  5715 00004478 BE[92620000]        <2> 	mov esi, notfound2
  5716 0000447D E87AD7FFFF          <2> 	call print
  5717 00004482 C3                  <2> 	ret
  5718                              <2> 	
  5719                              <1> %endif
  5720                              <1> %include 'source/programs/dump.asm'
  5721 00004483 FF2C64756D7000      <2> db 255,44,"dump",0
  5722 0000448A 8B35[3C2D0000]      <2> 	mov esi, [currentcommandloc]
  5723 00004490 81C605000000        <2> 	add esi, 5
  5724 00004496 31C9                <2> 	xor ecx, ecx
  5725 00004498 66B83078            <2> 	mov ax, "0x"
  5726 0000449C 663906              <2> 	cmp [esi], ax
  5727 0000449F 740A                <2> 	je dumphexin
  5728 000044A1 E878ECFFFF          <2> 	call cnvrttxt
  5729 000044A6 E910000000          <2> 	jmp dumphexnow
  5730                              <2> dumphexin:
  5731 000044AB 81C602000000        <2> 	add esi, 2
  5732 000044B1 E81CECFFFF          <2> 	call cnvrthextxt
  5733 000044B6 E900000000          <2> 	jmp dumphexnow
  5734                              <2> dumphexnow:
  5735 000044BB 89CF                <2> 	mov edi, ecx
  5736 000044BD 89FE                <2> 	mov esi, edi
  5737 000044BF 81C680030000        <2> 	add esi, 896
  5738                              <2> dumphexloop:
  5739 000044C5 8B0F                <2> 	mov ecx, [edi]
  5740 000044C7 C605[702F0000]05    <2> 	mov byte [firsthexshown],5
  5741 000044CE E8B2EAFFFF          <2> 	call showhex
  5742 000044D3 81C704000000        <2> 	add edi, 4
  5743 000044D9 39F7                <2> 	cmp edi, esi
  5744 000044DB 72E8                <2> 	jb dumphexloop
  5745 000044DD E84FE1FFFF          <2> 	call termcopy
  5746 000044E2 C3                  <2> 	ret 
  5747                              <1> %include 'source/programs/echo.asm'
  5748                              <2> 
  5749 000044E3 FF2C6563686F00      <2> db 255,44,"echo",0
  5750                              <2> 	echoprog:
  5751 000044EA 8B35[3C2D0000]      <2> 		mov esi, [currentcommandloc]
  5752 000044F0 81C605000000        <2> 		add esi, 5
  5753 000044F6 8A06                <2> 		mov al, [esi]
  5754 000044F8 E8DBD6FFFF          <2> 		call printquiet
  5755 000044FD E8F5D6FFFF          <2> 		call printline
  5756 00004502 C3                  <2> 		ret
  5757 00004503 BB[EC7D0300]        <2> 	echovr:	mov ebx, variables
  5758 00004508 BF06000000          <2> 		mov edi, 6
  5759 0000450D E83F000000          <2> 		call nxtvrech
  5760 00004512 E95A000000          <2> 		jmp prntvr2
  5761 00004517 B13D                <2> 	echvar:	mov cl, '='
  5762 00004519 43                  <2> 		inc ebx
  5763 0000451A 8A03                <2> 		mov al, [ebx]
  5764 0000451C 3C00                <2> 		cmp al, 0
  5765 0000451E 7431                <2> 		je nxtvrech
  5766 00004520 3C3D                <2> 		cmp al, '='
  5767 00004522 7422                <2> 		je nxtvrechb1
  5768 00004524 8B35[3C2D0000]      <2> 		mov esi, [currentcommandloc]
  5769 0000452A 01FE                <2> 		add esi, edi
  5770 0000452C E850E8FFFF          <2> 		call cndtest
  5771 00004531 3C02                <2> 		cmp al, 2
  5772 00004533 7438                <2> 		je prntvr
  5773 00004535 3C01                <2> 		cmp al, 1
  5774 00004537 7434                <2> 		je prntvr
  5775 00004539 8B35[3C2D0000]      <2> 		mov esi, [currentcommandloc]
  5776 0000453F 01FE                <2> 		add esi, edi
  5777 00004541 E90B000000          <2> 		jmp nxtvrech
  5778                              <2> 	nxtvrechb1:
  5779 00004546 81EB02000000        <2> 		sub ebx, 2
  5780 0000454C E9C6FFFFFF          <2> 		jmp echvar
  5781 00004551 8A03                <2> 	nxtvrech: mov al, [ebx]
  5782 00004553 3C05                <2> 		cmp al, 5
  5783 00004555 740A                <2> 		je nxtvrec2
  5784 00004557 43                  <2> 		inc ebx
  5785 00004558 81FB[EC8D0300]      <2> 		cmp ebx, varend
  5786 0000455E 72F1                <2> 		jb nxtvrech
  5787 00004560 C3                  <2> 		ret
  5788 00004561 43                  <2> 	nxtvrec2: inc ebx
  5789 00004562 8A03                <2> 		mov al, [ebx]
  5790 00004564 3C04                <2> 		cmp al, 4
  5791 00004566 74AF                <2> 		je echvar
  5792 00004568 E9E4FFFFFF          <2> 		jmp nxtvrech
  5793 0000456D 43                  <2> 	prntvr: inc ebx
  5794 0000456E 89DE                <2> 		mov esi, ebx
  5795 00004570 C3                  <2> 		ret
  5796 00004571 E886D6FFFF          <2> 	prntvr2: call print
  5797 00004576 BE[C3620000]        <2> 		mov esi, line
  5798 0000457B E87CD6FFFF          <2> 		call print
  5799 00004580 C3                  <2> 		ret 
  5800                              <1> %include 'source/programs/else.asm'
  5801 00004581 FF2C656C736500      <2> 	db 255,44,"else",0
  5802 00004588 31C0                <2> elsecmd:	xor eax, eax
  5803 0000458A 3805[E67D0300]      <2> 	cmp [BATCHISON], al
  5804 00004590 0F8423F3FFFF        <2> 	je near notbatch
  5805 00004596 A0[7D7D0300]        <2> 	mov al, [IFON]
  5806 0000459B BE[7E7D0300]        <2> 	mov esi, IFTRUE
  5807 000045A0 01C6                <2> 	add esi, eax
  5808 000045A2 8A06                <2> 	mov al, [esi]
  5809 000045A4 3401                <2> 	xor al, 1
  5810 000045A6 8806                <2> 	mov [esi], al
  5811 000045A8 C3                  <2> 	ret 
  5812                              <1> %include 'source/programs/exit.asm'
  5813 000045A9 FF2C6578697400      <2> db 255,44,"exit",0
  5814 000045B0 803D[7C7D0300]01    <2> 	cmp byte [ranboot], 1
  5815 000045B7 0F8448E4FFFF        <2> 	je near returnfromexp
  5816 000045BD E927E3FFFF          <2> 	jmp nobootfile
  5817                              <1> %include 'source/programs/fi.asm'
  5818 000045C2 FF2C666900          <2> 	db 255,44,"fi",0
  5819 000045C7 30C0                <2> 	xor al, al
  5820 000045C9 3805[E67D0300]      <2> 	cmp [BATCHISON], al
  5821 000045CF 0F84E4F2FFFF        <2> 	je near notbatch
  5822 000045D5 B001                <2> fi:	mov al, 1
  5823 000045D7 2805[7D7D0300]      <2> 	sub [IFON],al
  5824 000045DD C3                  <2> 	ret 
  5825                              <1> %ifdef gui.included
  5826                              <1> 	%include 'source/programs/gui.asm'
  5827                              <1> %endif
  5828                              <1> %include 'source/programs/help.asm'
  5829 000045DE FF2C68656C7000      <2> db 255,44,"help",0
  5830                              <2> lscmd:	
  5831 000045E5 B00D                <2> 		mov al, 13
  5832 000045E7 E8B9DCFFFF          <2> 		call prcharq
  5833 000045EC BE[E4310000]        <2> 		mov esi, progstart
  5834 000045F1 BB[984F0000]        <2> 		mov ebx, progend
  5835 000045F6 BE[6C770300]        <2> dir:	mov esi, fileindex
  5836 000045FB 8A06                <2> 	dirnxt:	mov al, [esi]
  5837 000045FD 30E4                <2> 		xor ah, ah
  5838 000045FF 3CFF                <2> 		cmp al, 255
  5839 00004601 7418                <2> 		je dirfnd
  5840 00004603 46                  <2> 		inc esi
  5841 00004604 81FE[6C7B0300]      <2> 		cmp esi,  fileindexend
  5842 0000460A 7342                <2> 		jae dirdn
  5843 0000460C E9EAFFFFFF          <2> 		jmp dirnxt
  5844                              <2> 	dirfnd3:
  5845 00004611 46                  <2> 		inc esi
  5846 00004612 81FE[6C7B0300]      <2> 		cmp esi, fileindexend
  5847 00004618 76E1                <2> 		jbe dirnxt
  5848 0000461A 4E                  <2> 		dec esi
  5849 0000461B 46                  <2> 	dirfnd:	inc esi
  5850 0000461C 8A06                <2> 		mov al, [esi]
  5851 0000461E 30E4                <2> 		xor ah, ah
  5852 00004620 3C2C                <2> 		cmp al, 44
  5853 00004622 740E                <2> 		je dirfnd2
  5854 00004624 46                  <2> 		inc esi
  5855 00004625 81FE[6C7B0300]      <2> 		cmp esi,  fileindexend
  5856 0000462B 7321                <2> 		jae dirdn
  5857 0000462D E9C9FFFFFF          <2> 		jmp dirnxt
  5858 00004632 46                  <2> 	dirfnd2: inc esi
  5859 00004633 E8A0D5FFFF          <2> 		call printquiet
  5860 00004638 56                  <2> 		push esi
  5861 00004639 B009                <2> 		mov al, 9
  5862 0000463B E865DCFFFF          <2> 		call prcharq
  5863 00004640 5E                  <2> 		pop esi
  5864 00004641 81FE[6C7B0300]      <2> 		cmp esi,  fileindexend
  5865 00004647 7305                <2> 		jae dirdn
  5866 00004649 E9ADFFFFFF          <2> 		jmp dirnxt
  5867 0000464E BE[C3620000]        <2> 	dirdn:	mov esi, line
  5868 00004653 E8A4D5FFFF          <2> 			call print
  5869 00004658 C3                  <2> 			ret
  5870 00004659 00                  <2> currentdir db 0
  5871                              <1> %include 'source/programs/if.asm'
  5872 0000465A FF2C696600          <2> 	db 255,44,"if",0
  5873 0000465F 30C0                <2> ifcmd:	xor al, al
  5874 00004661 3805[E67D0300]      <2> 	cmp [BATCHISON], al
  5875 00004667 0F844CF2FFFF        <2> 	je near notbatch
  5876 0000466D 8B1D[3C2D0000]      <2> 	mov ebx, [currentcommandloc]
  5877 00004673 81C303000000        <2> 	add ebx, 3
  5878 00004679 89DE                <2> 	mov esi, ebx
  5879 0000467B 8A06                <2> chkeqsn: mov al, [esi]
  5880 0000467D 3C00                <2> 	cmp al, 0
  5881 0000467F 0F8434F2FFFF        <2> 	je near notbatch
  5882 00004685 3C3D                <2> 	cmp al, '='
  5883 00004687 0F8406000000        <2> 	je near chkeqdn
  5884 0000468D 46                  <2> 	inc esi
  5885 0000468E E9E8FFFFFF          <2> 	jmp chkeqsn
  5886 00004693 B000                <2> chkeqdn: mov al, 0 
  5887 00004695 8806                <2> 	mov [esi], al
  5888 00004697 46                  <2> 	inc esi
  5889 00004698 E8A3E6FFFF          <2> 	call tester
  5890 0000469D 3C01                <2> 	cmp al, 1
  5891 0000469F 0F8405000000        <2> 	je near trueif
  5892 000046A5 E91C000000          <2> 	jmp falseif
  5893 000046AA 31C0                <2> trueif:	xor eax, eax
  5894 000046AC A0[7D7D0300]        <2> 	mov al, [IFON]
  5895 000046B1 FEC0                <2> 	inc al
  5896 000046B3 A2[7D7D0300]        <2> 	mov [IFON], al
  5897 000046B8 30E4                <2> 	xor ah, ah
  5898 000046BA BE[7E7D0300]        <2> 	mov esi, IFTRUE
  5899 000046BF 01C6                <2> 	add esi, eax
  5900 000046C1 B401                <2> 	mov ah, 1
  5901 000046C3 8826                <2> 	mov [esi], ah
  5902 000046C5 C3                  <2> 	ret 
  5903 000046C6 31C0                <2> falseif: xor eax, eax
  5904 000046C8 A0[7D7D0300]        <2> 	mov al, [IFON]
  5905 000046CD FEC0                <2> 	inc al
  5906 000046CF A2[7D7D0300]        <2> 	mov [IFON], al
  5907 000046D4 30E4                <2> 	xor ah, ah
  5908 000046D6 BE[7E7D0300]        <2> 	mov esi, IFTRUE
  5909 000046DB 01C6                <2> 	add esi, eax
  5910 000046DD 30E4                <2> 	xor ah, ah
  5911 000046DF 8826                <2> 	mov [esi], ah
  5912 000046E1 C3                  <2> 	ret 
  5913                              <1> %ifdef network.included
  5914                              <1> 	%include 'source/programs/ipconfig.asm'
  5915 000046E2 FF2C6970636F6E6669- <2> db 255,44,"ipconfig",0
  5916 000046EB 6700                <2>
  5917                              <2> ifconfig:
  5918 000046ED 8B35[3C2D0000]      <2> 	mov esi, [currentcommandloc]
  5919 000046F3 81C609000000        <2> 	add esi, 9
  5920 000046F9 803E00              <2> 	cmp byte [esi], 0
  5921 000046FC 740B                <2> 	je .noip
  5922 000046FE E8981A0000          <2> 	call strtoip
  5923 00004703 890D[78620000]      <2> 	mov [sysip], ecx
  5924                              <2> .noip:
  5925                              <2> %ifdef ne2000.included
  5926 00004709 803D[2E610000]01    <2> 	cmp byte [ne2000.nicconfig], 1
  5927 00004710 7519                <2> 	jne .none2000
  5928 00004712 BE[2F610000]        <2> 	mov esi, ne2000.name
  5929 00004717 E8E0D4FFFF          <2> 	call print
  5930 0000471C B9[52610000]        <2> 	mov ecx, ne2000.mac
  5931 00004721 E8EB1A0000          <2> 	call showmac
  5932 00004726 E8CCD4FFFF          <2> 	call printline
  5933                              <2> .none2000:
  5934                              <2> %endif
  5935                              <2> %ifdef rtl8139.included
  5936                              <2> 	cmp byte [rtl8139.nicconfig], 1
  5937                              <2> 	jne .nortl8139
  5938                              <2> 	mov esi, rtl8139.name
  5939                              <2> 	call print
  5940                              <2> 	mov ecx, rtl8139.mac
  5941                              <2> 	call showmac
  5942                              <2> 	call printline
  5943                              <2> .nortl8139:
  5944                              <2> %endif
  5945                              <2> %ifdef rtl8169.included
  5946                              <2> 	cmp byte [rtl8169.nicconfig], 1
  5947                              <2> 	jne .nortl8169
  5948                              <2> 	mov esi, rtl8169.name
  5949                              <2> 	call print
  5950                              <2> 	mov ecx, rtl8169.mac
  5951                              <2> 	call showmac
  5952                              <2> 	call printline
  5953                              <2> .nortl8169:
  5954                              <2> %endif
  5955                              <2> %ifdef i8254x.included
  5956                              <2> 	cmp byte [i8254x.nicconfig], 1
  5957                              <2> 	jne .noi8254x
  5958                              <2> 	mov esi, i8254x.name
  5959                              <2> 	call print
  5960                              <2> 	mov ecx, i8254x.mac
  5961                              <2> 	call showmac
  5962                              <2> 	call printline
  5963                              <2> .noi8254x:
  5964                              <2> %endif
  5965 0000472B 8B0D[78620000]      <2> 	mov ecx, [sysip]
  5966 00004731 E8AB1A0000          <2> 	call showip
  5967 00004736 E8BCD4FFFF          <2> 	call printline
  5968 0000473B C3                  <2> 	ret
  5969                              <2> 	
  5970                              <1> %endif
  5971                              <1> %include 'source/programs/keycode.asm'
  5972 0000473C FF2C6B6579636F6465- <2> db 255,44,"keycode",0
  5973 00004745 00                  <2>
  5974                              <2> keycode:
  5975 00004746 66C705[76220000]00- <2> 	mov word [trans], 0
  5976 0000474E 00                  <2>
  5977 0000474F C605[1C5E0000]00    <2> 	mov byte [threadson], 0
  5978                              <2> %ifdef io.serial
  5979                              <2> .noserial:
  5980                              <2> 	hlt
  5981                              <2> 	mov dx, [serial.address]
  5982                              <2> 	in al, dx
  5983                              <2> 	cmp al, 0
  5984                              <2> 	je .noserial
  5985                              <2> 	mov cl, al
  5986                              <2> 	call showhexsmall
  5987                              <2> 	cmp al, 0x1B
  5988                              <2> 	jne .noserial
  5989                              <2> 	in al, dx
  5990                              <2> 	mov cl, al
  5991                              <2> 	call showhexsmall
  5992                              <2> 	cmp cl, 0x5B
  5993                              <2> 	je .noserial
  5994                              <2> 	ret
  5995                              <2> %else
  5996 00004756 E8570B0000          <2> 	call getkey
  5997 0000475B 31C0                <2> 	xor eax, eax
  5998 0000475D 31C9                <2> 	xor ecx, ecx
  5999 0000475F 8A0D[90520000]      <2> 	mov cl, [specialkey]
  6000 00004765 80F900              <2> 	cmp cl, 0
  6001 00004768 0F8405000000        <2> 	je near .nospecialkeycode
  6002 0000476E E8FEE7FFFF          <2> 	call showhexsmall
  6003                              <2> .nospecialkeycode:
  6004 00004773 668B0D[74220000]    <2> 	mov cx, [lastkey + 2]
  6005 0000477A E8F2E7FFFF          <2> 	call showhexsmall
  6006 0000477F 80F901              <2> 	cmp cl, 1
  6007 00004782 75C2                <2> 	jne keycode
  6008 00004784 C3                  <2> 	ret
  6009                              <2> %endif
  6010                              <1> %ifdef gui.included
  6011                              <1> 	%include 'source/programs/line.asm'
  6012                              <1> %endif
  6013                              <1> %include 'source/programs/logout.asm'
  6014 00004785 FF2C6C6F676F757400  <2> 	db 255,44,"logout",0
  6015 0000478E E912E1FFFF          <2> 	jmp os
  6016                              <1> %include 'source/programs/loop.asm'
  6017 00004793 FF2C6C6F6F7000      <2> 	db 255,44,"loop",0
  6018 0000479A 803D[E77D0300]00    <2> 	cmp byte [LOOPON], 0
  6019 000047A1 0F8501000000        <2> 	jne near filoop
  6020 000047A7 C3                  <2> 	ret
  6021 000047A8 8B35[E87D0300]      <2> filoop: mov esi, [LOOPPOS]
  6022 000047AE FE0D[7D7D0300]      <2> 	dec byte [IFON]
  6023 000047B4 C605[E77D0300]00    <2> 	mov byte [LOOPON], 0
  6024 000047BB 8935[E27D0300]      <2> 	mov [BATCHPOS], esi
  6025 000047C1 8935[DE370000]      <2> 	mov [batchedi], esi
  6026 000047C7 C3                  <2> 	ret 
  6027                              <1> %ifdef disk.none
  6028                              <1> %else
  6029                              <1> 	%include 'source/programs/ls.asm'
  6030 000047C8 FF2C6C7300          <2> db 255,44,"ls",0
  6031 000047CD BE[42650300]        <2> 		mov esi, diskfileindex
  6032                              <2> 	diskindexdir:
  6033 000047D2 803E5F              <2> 		cmp byte [esi], '_'
  6034 000047D5 7440                <2> 		je nextdiskindexdir
  6035 000047D7 E8FCD3FFFF          <2> 		call printquiet
  6036 000047DC 56                  <2> 		push esi
  6037 000047DD BE[37480000]        <2> 		mov esi, disktab
  6038 000047E2 E8F1D3FFFF          <2> 		call printquiet
  6039 000047E7 5E                  <2> 		pop esi
  6040 000047E8 8B4E05              <2> 		mov ecx, [esi + 5]
  6041 000047EB C605[702F0000]05    <2> 		mov byte [firsthexshown], 5
  6042 000047F2 E849E8FFFF          <2> 		call showdec
  6043 000047F7 56                  <2> 		push esi
  6044 000047F8 BE[C3620000]        <2> 		mov esi, line
  6045 000047FD E8D6D3FFFF          <2> 		call printquiet
  6046 00004802 5E                  <2> 		pop esi
  6047 00004803 81C609000000        <2> 		add esi, 9
  6048 00004809 81FE[68670300]      <2> 		cmp esi, enddiskfileindex
  6049 0000480F 72C1                <2> 		jb diskindexdir
  6050 00004811 E81BDEFFFF          <2> 		call termcopy
  6051 00004816 C3                  <2> 		ret
  6052                              <2> 	nextdiskindexdir:
  6053 00004817 46                  <2> 		inc esi
  6054 00004818 803E00              <2> 		cmp byte [esi], 0
  6055 0000481B 75FA                <2> 		jne nextdiskindexdir
  6056 0000481D 81C609000000        <2> 		add esi, 9
  6057 00004823 81FE[68670300]      <2> 		cmp esi, enddiskfileindex
  6058 00004829 72A7                <2> 		jb diskindexdir
  6059 0000482B E801DEFFFF          <2> 		call termcopy
  6060 00004830 C3                  <2> 		ret
  6061                              <2> 		
  6062 00004831 4469736B2000        <2> 		diskmsg db "Disk ",0
  6063 00004837 0D09090900          <2> 		disktab db 13,9,9,9,0
  6064                              <1> %endif
  6065                              <1> %include 'source/programs/memory.asm'
  6066 0000483C FF2C6D656D6F727900  <2> db 255,44,"memory",0
  6067 00004845 BE[FE620000]        <2> 	mov esi, memlistbuf
  6068 0000484A 31FF                <2> 	xor edi, edi
  6069 0000484C 668B3D[3E650000]    <2> 	mov di, [memlistend]
  6070 00004853 01F7                <2> 	add edi, esi
  6071                              <2> printmemmap:
  6072 00004855 8B0E                <2> 	mov ecx, [esi]
  6073 00004857 E829E7FFFF          <2> 	call showhex
  6074 0000485C 81C608000000        <2> 	add esi, 8
  6075 00004862 8B0E                <2> 	mov ecx, [esi]
  6076 00004864 E81CE7FFFF          <2> 	call showhex
  6077 00004869 81C608000000        <2> 	add esi, 8
  6078 0000486F 8B0E                <2> 	mov ecx, [esi]
  6079 00004871 E80FE7FFFF          <2> 	call showhex
  6080 00004876 81C608000000        <2> 	add esi, 8
  6081 0000487C 57                  <2> 	push edi
  6082 0000487D 56                  <2> 	push esi
  6083 0000487E E874D3FFFF          <2> 	call printline
  6084 00004883 5E                  <2> 	pop esi
  6085 00004884 5F                  <2> 	pop edi
  6086 00004885 39FE                <2> 	cmp esi, edi
  6087 00004887 72CC                <2> 	jb printmemmap
  6088 00004889 C3                  <2> 	ret
  6089                              <2> 	
  6090                              <1> %include 'source/programs/pci.asm'
  6091 0000488A FF2C70636900        <2> db 255,44,"pci",0
  6092 00004890 E88D100000          <2> 	call pcidump
  6093 00004895 C3                  <2> 	ret 
  6094                              <1> %ifdef network.included
  6095                              <1> 	%include 'source/programs/ping.asm'
  6096 00004896 FF2C70696E6700      <2> db 255,44,"ping",0
  6097                              <2> ping:
  6098 0000489D 8B35[3C2D0000]      <2> 	mov esi, [currentcommandloc]
  6099 000048A3 81C605000000        <2> 	add esi, 5
  6100 000048A9 E8ED180000          <2> 	call strtoip
  6101 000048AE 890D[34490000]      <2> 	mov [.destip], ecx
  6102 000048B4 E828190000          <2> 	call showip
  6103 000048B9 8B0D[78620000]      <2> 	mov ecx, [sysip]
  6104 000048BF 890D[30490000]      <2> 	mov [.sourceip]. ecx
  6105 000048C5 31C0                <2> 	xor eax, eax
  6106 000048C7 31DB                <2> 	xor ebx, ebx
  6107 000048C9 66A3[2E490000]      <2> 	mov [.checksum], ax
  6108 000048CF 66A3[3A490000]      <2> 	mov [.icmpchecksum], ax
  6109 000048D5 BF[24490000]        <2> 	mov edi, .header
  6110 000048DA BE[38490000]        <2> 	mov esi, .headerend
  6111 000048DF E88F180000          <2> 	call getchecksum
  6112 000048E4 66890D[2E490000]    <2> 	mov [.checksum], cx
  6113 000048EB BF[38490000]        <2> 	mov edi, .icmp
  6114 000048F0 BE[60490000]        <2> 	mov esi, .packetend
  6115 000048F5 E879180000          <2> 	call getchecksum
  6116 000048FA 66890D[3A490000]    <2> 	mov [.icmpchecksum], cx
  6117 00004901 BF[16490000]        <2> 	mov edi, .packet
  6118 00004906 BE[60490000]        <2> 	mov esi, .packetend
  6119 0000490B E859180000          <2> 	call sendpacket
  6120 00004910 E8E2D2FFFF          <2> 	call printline
  6121 00004915 C3                  <2> 	ret
  6122                              <2> 	
  6123                              <2> 	
  6124                              <2> 	
  6125                              <2> .packet:
  6126 00004916 FFFFFFFFFFFF        <2> .destinationmac db 0xFF,0xFF,0xFF,0xFF,0xFF,0xFF
  6127 0000491C 000000000000        <2> .sourcemac	db 0,0,0,0,0,0
  6128 00004922 0800                <2> .ethertype	db 8,0	;ip is 0x800
  6129                              <2> .header:
  6130 00004924 45                  <2> .version	db 0x45
  6131 00004925 00                  <2> .services	db 0
  6132 00004926 003C                <2> .length	db 0,0x3C
  6133 00004928 0000                <2> .id		dw 0
  6134 0000492A 00                  <2> .flags	db 0
  6135 0000492B 00                  <2> .fragment db 0
  6136 0000492C 80                  <2> .ttl	db 128
  6137 0000492D 01                  <2> .protocol db 1 ;ICMP
  6138 0000492E 0000                <2> .checksum dw 0
  6139 00004930 00000000            <2> .sourceip dd 0
  6140 00004934 00000000            <2> .destip dd 0
  6141                              <2> .headerend:
  6142                              <2> .icmp:
  6143 00004938 08                  <2> .icmptype db 8 ;Ping request
  6144 00004939 00                  <2> .icmpcode db 0
  6145 0000493A 0000                <2> .icmpchecksum dw 0
  6146 0000493C 0001                <2> .icmpid db 0,1
  6147 0000493E 0000                <2> .sequence dw 0
  6148 00004940 616263646566676869- <2> db "abcdefghijklmnopqrstuvwabcdefghi" ;this is what microsoft includes
  6149 00004949 6A6B6C6D6E6F707172- <2>
  6150 00004952 737475767761626364- <2>
  6151 0000495B 6566676869          <2>
  6152                              <2> .packetend:
  6153                              <1> %endif
  6154                              <1> %ifdef disk.none
  6155                              <1> %else
  6156                              <1> 	%include 'source/programs/play.asm'
  6157 00004960 FF2C706C61796100    <2> db 255,44,"playa",0
  6158 00004968 8B3D[3C2D0000]      <2> 	mov edi, [currentcommandloc]
  6159 0000496E 81C706000000        <2> 	add edi, 6
  6160 00004974 E834000000          <2> 	call playasync
  6161 00004979 C3                  <2> 	ret
  6162 0000497A FF2C706C617900      <2> db 255,44,"play",0
  6163                              <2> play:
  6164 00004981 8B3D[3C2D0000]      <2> 	mov edi, [currentcommandloc]
  6165 00004987 81C705000000        <2> 	add edi, 5
  6166 0000498D E81B000000          <2> 	call playasync
  6167                              <2> .waitforsound:
  6168 00004992 F4                  <2> 	hlt
  6169                              <2> %ifdef sound.included
  6170 00004993 A1[7A520000]        <2> 	mov eax, [Length0]
  6171 00004998 660B05[7E520000]    <2> 	or ax, [Length1]
  6172                              <2> %endif
  6173 0000499F 0A05[4B020000]      <2> 	or al, [soundon]
  6174 000049A5 3D00000000          <2> 	cmp eax, 0
  6175 000049AA 75E6                <2> 	jne .waitforsound
  6176 000049AC C3                  <2> 	ret
  6177                              <2> playasync:
  6178 000049AD BE0000C000          <2> 	mov esi, 0xC00000
  6179 000049B2 E8A0120000          <2> 	call loadfile
  6180 000049B7 81FA94010000        <2> 	cmp edx, 404
  6181 000049BD 743F                <2> 	je nosoundfound
  6182 000049BF BB0000C000          <2> 	mov ebx, 0xC00000
  6183 000049C4 817B0857415645      <2> 	cmp dword [ebx + 8], "WAVE"
  6184 000049CB 0F843F010000        <2> 	je near wave_player
  6185 000049D1 66813B534E          <2> 	cmp word [ebx], "SN"
  6186 000049D6 7526                <2> 	jne nosoundfound
  6187 000049D8 81C306000000        <2> 	add ebx, 6
  6188 000049DE 891D[4E020000]      <2> 	mov [soundpos], ebx
  6189 000049E4 035BFC              <2> 	add ebx, [ebx - 4]
  6190 000049E7 891D[52020000]      <2> 	mov [soundendpos], ebx
  6191 000049ED 66C705[4C020000]00- <2> 	mov word [soundrepititions], 0
  6192 000049F5 00                  <2>
  6193 000049F6 C605[4B020000]01    <2> 	mov byte [soundon], 1
  6194 000049FD C3                  <2> 	ret
  6195                              <2> nosoundfound:
  6196 000049FE BE[244A0000]        <2> 	mov esi, notfoundsound
  6197 00004A03 E8F4D1FFFF          <2> 	call print
  6198 00004A08 8B35[3C2D0000]      <2> 	mov esi, [currentcommandloc]
  6199 00004A0E 81C605000000        <2> 	add esi, 5
  6200 00004A14 E8E3D1FFFF          <2> 	call print
  6201 00004A19 BE[92620000]        <2> 	mov esi, notfound2
  6202 00004A1E E8D9D1FFFF          <2> 	call print
  6203 00004A23 C3                  <2> 	ret
  6204 00004A24 706C61793A2000      <2> notfoundsound db "play: ",0
  6205                              <2> 
  6206                              <2> %ifdef sound.included
  6207                              <2> sbplay:
  6208 00004A2B BE0000C000          <2> 		mov esi, 0xC00000
  6209 00004A30 89F3                <2> 		mov ebx, esi
  6210 00004A32 81C62C000000        <2> 		add esi, WAVSTART
  6211 00004A38 29F7                <2> 		sub edi, esi
  6212 00004A3A 66893D[7E520000]    <2> 		mov [Length1], di
  6213 00004A41 C1EF0F              <2> 		shr edi, 15
  6214 00004A44 893D[7A520000]      <2> 		mov [Length0], edi
  6215 00004A4A 8B4B18              <2> 		mov ecx, [ebx + 24]
  6216 00004A4D 890D[8B520000]      <2> 		mov [Freq], ecx
  6217 00004A53 31C0                <2> 		xor eax, eax
  6218 00004A55 BA0000C000          <2> 		mov	edx, 0xC00000 ;physical location of sound
  6219 00004A5A 81C22C000000        <2> 		add edx, WAVSTART
  6220 00004A60 01D0                <2> 		add	eax, edx
  6221 00004A62 89C6                <2> 		mov esi, eax
  6222 00004A64 31C9                <2> 		xor ecx, ecx
  6223 00004A66 31DB                <2> 		xor ebx, ebx
  6224 00004A68 66891D[88520000]    <2> 		mov [SegLoc], bx
  6225 00004A6F 81C300000800        <2> 		add ebx, 0x80000
  6226 00004A75 66B9FFFF            <2> 		mov cx, 0xFFFF
  6227 00004A79 6681FF0000          <2> 		cmp di, 0
  6228 00004A7E 7520                <2> 		jne .autoinit
  6229 00004A80 668B0D[7E520000]    <2> 		mov cx, [Length1]
  6230 00004A87 C605[79520000]01    <2> 		mov byte [OddLength], 1
  6231 00004A8E 6681F90080          <2> 		cmp cx, 32768
  6232 00004A93 730B                <2> 		jae .autoinit
  6233 00004A95 C605[79520000]00    <2> 		mov byte [OddLength], 0
  6234 00004A9C 66D1E1              <2> 		shl cx, 1
  6235 00004A9F 47                  <2> 		inc edi
  6236                              <2> .autoinit:
  6237 00004AA0 4F                  <2> 		dec edi
  6238 00004AA1 893D[7A520000]      <2> 		mov [Length0], edi
  6239 00004AA7 66890D[7E520000]    <2> 		mov [Length1], cx
  6240 00004AAE 66D1E9              <2> 		shr cx, 1
  6241 00004AB1 6641                <2> 		inc cx
  6242 00004AB3 01C8                <2> 		add eax, ecx
  6243 00004AB5 A3[80520000]        <2> 		mov [NextMemLoc], eax
  6244 00004ABA 8935[84520000]      <2> 		mov	[MemLoc], esi
  6245 00004AC0 E85A060000          <2> 		call DMACopy
  6246 00004AC5 31DB                <2> 		xor ebx, ebx
  6247 00004AC7 668B1D[88520000]    <2> 		mov bx, [SegLoc]
  6248 00004ACE 31C9                <2> 		xor ecx, ecx
  6249 00004AD0 668B0D[7E520000]    <2> 		mov cx, [Length1]
  6250 00004AD7 66D1E9              <2> 		shr cx, 1
  6251 00004ADA 6641                <2> 		inc cx
  6252 00004ADC 01CB                <2> 		add ebx, ecx
  6253 00004ADE 66891D[88520000]    <2> 		mov [SegLoc], bx
  6254 00004AE5 81C300000800        <2> 		add ebx, 0x80000
  6255 00004AEB 8B35[80520000]      <2> 		mov esi, [NextMemLoc]
  6256 00004AF1 89F0                <2> 		mov eax, esi
  6257 00004AF3 01C8                <2> 		add eax, ecx
  6258 00004AF5 A3[80520000]        <2> 		mov [NextMemLoc], eax
  6259 00004AFA 8935[84520000]      <2> 		mov	[MemLoc], esi
  6260 00004B00 E81A060000          <2> 		call DMACopy
  6261 00004B05 E838060000          <2> 		call DMAPlay
  6262 00004B0A E8C2060000          <2> 		call PlayDSP
  6263 00004B0F C3                  <2> 		ret
  6264                              <2> WAVSTART equ 44
  6265                              <2> wave_player:
  6266 00004B10 803D[8F520000]01    <2> 	cmp byte [SoundBlaster], 1
  6267 00004B17 0F840EFFFFFF        <2> 	je near sbplay
  6268 00004B1D BE[284B0000]        <2> 	mov esi, nosoundblaster
  6269 00004B22 E8D5D0FFFF          <2> 	call print
  6270 00004B27 C3                  <2> 	ret
  6271                              <2> %else
  6272                              <2> 	wave_player:
  6273                              <2> 		mov esi, nosoundblaster
  6274                              <2> 		call print
  6275                              <2> 		ret
  6276                              <2> %endif
  6277 00004B28 4E6F20536F756E6420- <2> nosoundblaster db "No Sound Blaster detected.",10,0
  6278 00004B31 426C61737465722064- <2>
  6279 00004B3A 657465637465642E0A- <2>
  6280 00004B43 00                  <2>
  6281                              <1> %endif
  6282                              <1> %include 'source/programs/pwd.asm'
  6283 00004B44 FF2C70776400        <2> db 255,44,"pwd",0
  6284 00004B4A BE[787B0300]        <2> 	mov esi, currentfolder
  6285 00004B4F E884D0FFFF          <2> 	call printquiet
  6286 00004B54 E89ED0FFFF          <2> 	call printline
  6287 00004B59 C3                  <2> 	ret
  6288                              <2> 	
  6289                              <1> %include 'source/programs/reboot.asm'
  6290 00004B5A FF2C7265626F6F7400  <2> 	db 255,44,"reboot",0
  6291 00004B63 0F011D[6D4B0000]    <2> 		lidt [idtreboot]
  6292 00004B6A CD00                <2> 		int 0
  6293 00004B6C F4                  <2> 		hlt
  6294                              <2> 	
  6295 00004B6D 0000                <2> 	idtreboot dw 0
  6296 00004B6F 00000000            <2> 			  dd 0
  6297                              <2> 
  6298                              <2> 	coldboot:
  6299 00004B73 66B84000            <2> 		MOV AX, 0040h
  6300 00004B77 8EC0                <2> 		MOV ES, AX
  6301 00004B79 2666C7057200000000- <2> 		MOV WORD [ES:00072h], 0h
  6302 00004B82 00                  <2>
  6303 00004B83 EA00000000FFFF      <2> 		JMP 0FFFFh:0000h
  6304 00004B8A CF                  <2> 		IRET
  6305                              <2> 
  6306                              <2> 	warmboot:
  6307 00004B8B 66B84000            <2> 		MOV AX, 0040h
  6308 00004B8F 8EC0                <2> 		MOV ES, AX
  6309 00004B91 2666C7057200000034- <2> 		MOV WORD [ES:00072h], 01234h
  6310 00004B9A 12                  <2>
  6311 00004B9B EA00000000FFFF      <2> 		JMP 0FFFFh:0000h
  6312 00004BA2 CF                  <2> 		IRET
  6313                              <2> 		
  6314                              <1> %include 'source/programs/reg.asm'
  6315 00004BA3 FF2C72656700        <2> db 255,44,"reg",0
  6316 00004BA9 CD03                <2> 	int 3
  6317 00004BAB C3                  <2> 	ret 
  6318                              <1> %ifdef disk.none
  6319                              <1> %else
  6320                              <1> 	%include 'source/programs/show.asm'
  6321 00004BAC FF2C73686F7700      <2> db 255,44,"show",0
  6322                              <2> showprog:
  6323 00004BB3 8B3D[3C2D0000]      <2> 		mov edi, [currentcommandloc]
  6324 00004BB9 81C705000000        <2> 		add edi, 5
  6325 00004BBF BE00004000          <2> 		mov esi, 0x400000
  6326 00004BC4 803F26              <2> 		cmp byte [edi], '&'
  6327 00004BC7 741B                <2> 		je .nullfile
  6328 00004BC9 BE00008000          <2> 		mov esi, 0x800000
  6329 00004BCE E884100000          <2> 		call loadfile
  6330 00004BD3 81FA94010000        <2> 		cmp edx, 404
  6331 00004BD9 0F8410000000        <2> 		je near filenotfound
  6332 00004BDF BE00008000          <2> 		mov esi, 0x800000
  6333                              <2> .nullfile:
  6334                              <2> %ifdef gui.included
  6335                              <2> 		cmp word [esi], "BM"
  6336                              <2> 		je bmpfound
  6337                              <2> %endif
  6338 00004BE4 E813D0FFFF          <2> 		call print
  6339 00004BE9 E809D0FFFF          <2> 		call printline
  6340 00004BEE C3                  <2> 		ret
  6341                              <2> %ifdef gui.included
  6342                              <2> bmpfound:
  6343                              <2> 		cmp byte [guion], 0
  6344                              <2> 		je near noguibmp
  6345                              <2> 		mov esi, 0x800000
  6346                              <2> 		xor ecx, ecx
  6347                              <2> 		xor edx, edx
  6348                              <2> 		xor eax, eax
  6349                              <2> 		xor ebx, ebx
  6350                              <2> 		call showbmp
  6351                              <2> 		xor al, al
  6352                              <2> 		mov ah, 5
  6353                              <2> 		int 30h
  6354                              <2> 		call guiclear
  6355                              <2> 		call clearmousecursor
  6356                              <2> 		call reloadallgraphics
  6357                              <2> 		ret
  6358                              <2> noguibmp:
  6359                              <2> 		mov esi, warnguimsg
  6360                              <2> 		call print
  6361                              <2> 		ret
  6362                              <2> warnguimsg db "This can not be done without the GUI.",10,0
  6363                              <2> %endif
  6364                              <2> 
  6365                              <2> filenotfound:
  6366 00004BEF BE[224C0000]        <2> 		mov esi, filenf
  6367 00004BF4 E803D0FFFF          <2> 		call print
  6368 00004BF9 8B35[3C2D0000]      <2> 		mov esi, [currentcommandloc]
  6369                              <2> findfilenotfoundzero:
  6370 00004BFF 8A06                <2> 		mov al, [esi]
  6371 00004C01 46                  <2> 		inc esi
  6372 00004C02 3C00                <2> 		cmp al, 0
  6373 00004C04 7411                <2> 		je nofilenamenotfound
  6374 00004C06 81FE[EC950300]      <2> 		cmp esi, buftxtend
  6375 00004C0C 7309                <2> 		jae nofilenamenotfound
  6376 00004C0E 3C20                <2> 		cmp al, " "
  6377 00004C10 75ED                <2> 		jne findfilenotfoundzero
  6378 00004C12 E8E5CFFFFF          <2> 		call print
  6379                              <2> nofilenamenotfound:
  6380 00004C17 BE[2D4C0000]        <2> 		mov esi, filenf2
  6381 00004C1C E8DBCFFFFF          <2> 		call print
  6382 00004C21 C3                  <2> 		ret
  6383 00004C22 5468652066696C6520- <2> filenf db "The file ",34,0
  6384 00004C2B 2200                <2>
  6385 00004C2D 2220636F756C64206E- <2> filenf2 db 34," could not be found.",10,0
  6386 00004C36 6F7420626520666F75- <2>
  6387 00004C3F 6E642E0A00          <2>
  6388                              <1> %endif
  6389                              <1> %include 'source/programs/shush.asm'
  6390 00004C44 FF2C736875736800    <2> db 255,44,"shush",0	;if you add 2 values it will switch size using the first as X in chars and the second as Y in chars
  6391                              <2> shushprog:
  6392                              <2> %ifdef gui.included
  6393                              <2> 	cmp byte [guion], 0
  6394                              <2> 	je near .noswitchsize
  6395                              <2> 	mov esi, [currentcommandloc]
  6396                              <2> 	add esi, 6
  6397                              <2> 	push esi
  6398                              <2> 	dec esi
  6399                              <2> .findspace:
  6400                              <2> 	inc esi
  6401                              <2> 	mov al, [esi]
  6402                              <2> 	cmp al, 0
  6403                              <2> 	je near .noswitchsize
  6404                              <2> 	cmp al, "X"
  6405                              <2> 	je .donefind
  6406                              <2> 	cmp al, "x"
  6407                              <2> 	je .donefind
  6408                              <2> 	cmp al, " "
  6409                              <2> 	jne .findspace
  6410                              <2> .donefind:
  6411                              <2> 	xor al, al
  6412                              <2> 	mov [esi], al
  6413                              <2> 	inc esi
  6414                              <2> 	mov edi, esi
  6415                              <2> 	call cnvrttxt
  6416                              <2> 	mov eax, ecx
  6417                              <2> 	pop esi
  6418                              <2> 	push eax
  6419                              <2> 	mov edi, esi
  6420                              <2> 	call cnvrttxt
  6421                              <2> 	mov ebx, ecx
  6422                              <2> 	pop eax	
  6423                              <2> 	cmp bx, 0
  6424                              <2> 	je near .noswitchsize
  6425                              <2> 	cmp ax, 0
  6426                              <2> 	je near .noswitchsize
  6427                              <2> 	shl bx, 3
  6428                              <2> 	shl ax, 4
  6429                              <2> 	cmp bx, [resolutionx]
  6430                              <2> 	jbe .nofixx
  6431                              <2> 	mov bx, [resolutionx]
  6432                              <2> .nofixx:
  6433                              <2> 	add ax, 16
  6434                              <2> 	cmp ax, [resolutiony]
  6435                              <2> 	jbe .nofixy
  6436                              <2> 	mov ax, [resolutiony]
  6437                              <2> .nofixy:
  6438                              <2> 	sub ax, 16
  6439                              <2> 	xor cx, cx
  6440                              <2> 	xor dx, dx
  6441                              <2> 	mov [termwindow], bx
  6442                              <2> 	mov [termwindow + 2], ax	;the previous lines of code make a large terminal window that is 4 characters smaller than the screen
  6443                              <2> 	mov esi, termwindow
  6444                              <2> 	xor ebx, ebx
  6445                              <2> 	xor ax, ax
  6446                              <2> 	call showwindow
  6447                              <2> 	call guiclear
  6448                              <2> 	call clear
  6449                              <2> 	call reloadallgraphics
  6450                              <2> 	call switchmousepos2
  6451                              <2> .noswitchsize:
  6452                              <2> %endif
  6453 00004C4C BE[574C0000]        <2> 	mov esi, shushmsg
  6454 00004C51 E8A6CFFFFF          <2> 	call print
  6455 00004C56 C3                  <2> 	ret
  6456 00004C57 57656C636F6D652074- <2> 	shushmsg db "Welcome to the SollerOS Hardly Unix-Compatible Shell!",10,0
  6457 00004C60 6F2074686520536F6C- <2>
  6458 00004C69 6C65724F5320486172- <2>
  6459 00004C72 646C7920556E69782D- <2>
  6460 00004C7B 436F6D70617469626C- <2>
  6461 00004C84 65205368656C6C210A- <2>
  6462 00004C8D 00                  <2>
  6463                              <1> %include 'source/programs/system.asm'
  6464 00004C8E FF2C73797374656D00  <2> 	db 255,44,"system",0
  6465 00004C97 BE[AA4D0000]        <2> 	mov esi, kernelinfomsg
  6466 00004C9C E837CFFFFF          <2> 	call printquiet
  6467 00004CA1 B9[42650300]        <2> 	mov ecx, osend
  6468 00004CA6 E895E3FFFF          <2> 	call showdec
  6469 00004CAB BE[BF4D0000]        <2> 	mov esi, diskbytemsg
  6470 00004CB0 E823CFFFFF          <2> 	call printquiet
  6471 00004CB5 B9[42650300]        <2> 	mov ecx, osend
  6472 00004CBA 81C1[11F10300]      <2> 	add ecx, commandbufend
  6473 00004CC0 81E9[68670300]      <2> 	sub ecx, bssstart	;add the extra buffer space
  6474 00004CC6 E875E3FFFF          <2> 	call showdec
  6475 00004CCB BE[D64D0000]        <2> 	mov esi, membytemsg
  6476 00004CD0 E803CFFFFF          <2> 	call printquiet
  6477 00004CD5 BE[394E0000]        <2> 	mov esi, endofmemmsg
  6478 00004CDA E8F9CEFFFF          <2> 	call printquiet
  6479 00004CDF B9[25251400]        <2> 	mov ecx, bssend
  6480 00004CE4 E89CE2FFFF          <2> 	call showhex
  6481 00004CE9 BE[EF4D0000]        <2> 	mov esi, systeminfomsg
  6482 00004CEE E8E5CEFFFF          <2> 	call printquiet
  6483                              <2> getcpuspeed:
  6484 00004CF3 B8FE000000          <2> 	mov eax, 0xFE
  6485 00004CF8 E621                <2> 	out 0x21, al ;mask off all but timer interrupt
  6486 00004CFA B020                <2> 	mov al, 0x20
  6487 00004CFC E620                <2> 	out 0x20, al
  6488 00004CFE F4                  <2> 	hlt
  6489 00004CFF 0F31                <2> 	rdtsc
  6490 00004D01 89D6                <2> 	mov esi, edx
  6491 00004D03 89C7                <2> 	mov edi, eax
  6492 00004D05 31C0                <2> 	xor eax, eax
  6493 00004D07 C605[2B020000]01    <2> 	mov byte [testingcpuspeed], 1
  6494                              <2> cpuspeedloop:	;wait until next timer interrupt, then inc eax until the next
  6495 00004D0E 40                  <2> 	inc eax
  6496 00004D0F E9FAFFFFFF          <2> 	jmp cpuspeedloop
  6497                              <2> cpuspeedloopend:
  6498 00004D14 0F31                <2> 	rdtsc
  6499 00004D16 29F8                <2> 	sub eax, edi
  6500 00004D18 29F2                <2> 	sub edx, esi
  6501 00004D1A 8915[34020000]      <2> 	mov [cpuclocksperint + 4], edx
  6502 00004D20 A3[30020000]        <2> 	mov [cpuclocksperint], eax
  6503 00004D25 31C0                <2> 	xor eax, eax
  6504 00004D27 E621                <2> 	out 0x21, al
  6505 00004D29 B020                <2> 	mov al, 0x20
  6506 00004D2B E620                <2> 	out 0x20, al
  6507 00004D2D 31D2                <2> 	xor edx, edx
  6508 00004D2F 31C0                <2> 	xor eax, eax
  6509 00004D31 A1[2C020000]        <2> 	mov eax, [cpuspeedperint]
  6510 00004D36 D1E0                <2> 	shl eax, 1	;the cpu speed loop actually contains 2 commands so multiply the
  6511                              <2> 				;result by 2
  6512 00004D38 8B1D[3E020000]      <2> 	mov ebx, [timeinterval]
  6513 00004D3E C1EB0A              <2> 	shr ebx, 10 ;divide the interval by 1024
  6514 00004D41 F7F3                <2> 	div ebx	;quotient in eax, remainder in edx
  6515 00004D43 89C1                <2> 	mov ecx, eax
  6516 00004D45 E8F6E2FFFF          <2> 	call showdec
  6517 00004D4A BE[1D4E0000]        <2> 	mov esi, cpuspeedmsg
  6518 00004D4F E884CEFFFF          <2> 	call printquiet
  6519 00004D54 31D2                <2> 	xor edx, edx
  6520 00004D56 A1[30020000]        <2> 	mov eax, [cpuclocksperint]
  6521 00004D5B 8B15[34020000]      <2> 	mov edx, [cpuclocksperint + 4]
  6522 00004D61 8B1D[3E020000]      <2> 	mov ebx, [timeinterval]
  6523 00004D67 C1EB0A              <2> 	shr ebx, 10
  6524 00004D6A F7F3                <2> 	div ebx
  6525 00004D6C 89C1                <2> 	mov ecx, eax
  6526 00004D6E E8CDE2FFFF          <2> 	call showdec
  6527 00004D73 BE[234E0000]        <2> 	mov esi, cpuclockmsg
  6528 00004D78 E85BCEFFFF          <2> 	call printquiet
  6529 00004D7D 8B0D[38020000]      <2> 	mov ecx, [memoryspace]
  6530 00004D83 C1E914              <2> 	shr ecx, 20
  6531 00004D86 41                  <2> 	inc ecx	;the reading is one MB behind
  6532 00004D87 E8B4E2FFFF          <2> 	call showdec
  6533 00004D8C BE[284E0000]        <2> 	mov esi, memoryspacemsg
  6534 00004D91 E866CEFFFF          <2> 	call print
  6535                              <2> %ifdef sound.included
  6536 00004D96 803D[8F520000]00    <2> 	cmp byte [SoundBlaster], 0
  6537 00004D9D 740A                <2> 	je .nosb
  6538 00004D9F BE[054E0000]        <2> 	mov esi, soundblastermsg
  6539 00004DA4 E853CEFFFF          <2> 	call print
  6540                              <2> .nosb:
  6541                              <2> %endif
  6542 00004DA9 C3                  <2> 	ret
  6543                              <2> 
  6544 00004DAA 4B65726E656C20496E- <2> kernelinfomsg db "Kernel Information:",10,0
  6545 00004DB3 666F726D6174696F6E- <2>
  6546 00004DBC 3A0A00              <2>
  6547 00004DBF 427974657320446973- <2> diskbytemsg db "Bytes Disk Space Used",10,0
  6548 00004DC8 6B2053706163652055- <2>
  6549 00004DD1 7365640A00          <2>
  6550 00004DD6 4279746573204D656D- <2> membytemsg db "Bytes Memory Space Used",10,0
  6551 00004DDF 6F7279205370616365- <2>
  6552 00004DE8 20557365640A00      <2>
  6553 00004DEF 0A53797374656D2049- <2> systeminfomsg db 10,"System Information:",10,0
  6554 00004DF8 6E666F726D6174696F- <2>
  6555 00004E01 6E3A0A00            <2>
  6556                              <2> %ifdef sound.included
  6557 00004E05 536F756E64626C6173- <2> 	soundblastermsg db "Soundblaster Detected.",10,0
  6558 00004E0E 746572204465746563- <2>
  6559 00004E17 7465642E0A00        <2>
  6560                              <2> %endif
  6561 00004E1D 4D4950530A00        <2> cpuspeedmsg db "MIPS",10,0
  6562 00004E23 4D487A0A00          <2> cpuclockmsg db "MHz",10,0
  6563 00004E28 4D42204D656D6F7279- <2> memoryspacemsg db "MB Memory Space",10,0
  6564 00004E31 2053706163650A00    <2>
  6565 00004E39 456E64206F66204D65- <2> endofmemmsg: db "End of Memory Space: 0x",0
  6566 00004E42 6D6F72792053706163- <2>
  6567 00004E4B 653A20307800        <2>
  6568                              <1> %include 'source/programs/time.asm'
  6569 00004E51 FF2C74696D6500      <2> db 255,44,"time",0	
  6570                              <2> timer:
  6571 00004E58 8B35[3C2D0000]      <2> 	mov esi, [currentcommandloc]
  6572 00004E5E 81C604000000        <2> 	add esi, 4
  6573 00004E64 803E00              <2> 	cmp byte [esi], 0
  6574 00004E67 7477                <2> 	je .norun
  6575 00004E69 46                  <2> 	inc esi
  6576 00004E6A 8B0D[43020000]      <2> 	mov ecx, [timeseconds]
  6577 00004E70 51                  <2> 	push ecx
  6578 00004E71 8B0D[47020000]      <2> 	mov ecx, [timenanoseconds]
  6579 00004E77 51                  <2> 	push ecx
  6580 00004E78 BF[EC910300]        <2> 	mov edi, buftxt
  6581                              <2> .cpcmd:
  6582 00004E7D 8A06                <2> 	mov al, [esi]
  6583 00004E7F 8807                <2> 	mov [edi], al
  6584 00004E81 46                  <2> 	inc esi
  6585 00004E82 47                  <2> 	inc edi
  6586 00004E83 3C00                <2> 	cmp al, 0
  6587 00004E85 75F6                <2> 	jne .cpcmd
  6588 00004E87 E8D4DDFFFF          <2> 	call run
  6589 00004E8C 5A                  <2> 	pop edx
  6590 00004E8D 58                  <2> 	pop eax
  6591                              <2> 
  6592 00004E8E 8B0D[43020000]      <2> 	mov ecx, [timeseconds]
  6593 00004E94 29C1                <2> 	sub ecx, eax
  6594 00004E96 8B1D[47020000]      <2> 	mov ebx, [timenanoseconds]
  6595 00004E9C 29D3                <2> 	sub ebx, edx
  6596 00004E9E 7307                <2> 	jae .nosign
  6597 00004EA0 81C300CA9A3B        <2> 	add ebx, 1000000000
  6598 00004EA6 49                  <2> 	dec ecx
  6599                              <2> .nosign:
  6600 00004EA7 E894E1FFFF          <2> 	call showdec
  6601                              <2> 	
  6602 00004EAC 89D9                <2> 	mov ecx, ebx
  6603 00004EAE BE[A03D0000]        <2> 	mov esi, timenscache
  6604 00004EB3 C7460230303030      <2> 	mov dword [esi+ 2], "0000"
  6605 00004EBA C7460630303030      <2> 	mov dword [esi + 6], "0000"
  6606 00004EC1 C6460A30            <2> 	mov byte [esi + 10], "0"
  6607 00004EC5 BE[AB3D0000]        <2> 	mov esi, timenscacheend
  6608 00004ECA E84EDFFFFF          <2> 	call convert
  6609 00004ECF BE[A03D0000]        <2> 	mov esi, timenscache
  6610 00004ED4 E823CDFFFF          <2> 	call print
  6611 00004ED9 C605[A03D0000]08    <2> 	mov byte [timenscache], 8
  6612                              <2> .norun:
  6613 00004EE0 C3                  <2> 	ret
  6614                              <2> 	
  6615                              <1> %include 'source/programs/turnoff.asm'
  6616 00004EE1 FF2C7475726E6F6666- <2> 	db 255,44,"turnoff",0
  6617 00004EEA 00                  <2>
  6618                              <2> 	turnoff:
  6619 00004EEB 66C705[D10C0000]-   <2> 			mov word [realmodeptr], shutdown
  6620 00004EF2 [FE4E]              <2>
  6621 00004EF4 BB[294F0000]        <2> 			mov ebx, halt
  6622 00004EF9 E8C1BCFFFF          <2> 			call realmode
  6623                              <2> 
  6624                              <2> [BITS 16]
  6625                              <2> 		shutdown:
  6626 00004EFE B453                <2> 			mov ah, 0x53
  6627 00004F00 B004                <2> 			mov al, 4
  6628 00004F02 31DB                <2> 			xor bx, bx
  6629 00004F04 CD15                <2> 			int 0x15
  6630                              <2> 			
  6631 00004F06 B453                <2> 			mov ah, 0x53
  6632 00004F08 B001                <2> 			mov al, 1
  6633 00004F0A 31DB                <2> 			xor bx, bx
  6634 00004F0C CD15                <2> 			int 0x15
  6635                              <2> 			
  6636 00004F0E B453                <2> 			mov ah, 0x53
  6637 00004F10 B008                <2> 			mov al, 8
  6638 00004F12 BB0100              <2> 			mov bx, 1
  6639 00004F15 B90100              <2> 			mov cx, 1
  6640 00004F18 CD15                <2> 			int 0x15
  6641                              <2> 			
  6642 00004F1A B453                <2> 			mov ah, 0x53
  6643 00004F1C B007                <2> 			mov al, 7
  6644 00004F1E BB0100              <2> 			mov bx, 1
  6645 00004F21 B90300              <2> 			mov cx, 3
  6646 00004F24 CD15                <2> 			int 0x15
  6647 00004F26 E9FDFF              <2> 			jmp $
  6648                              <2> 			[BITS 32]
  6649 00004F29 E9FBFFFFFF          <2> halt: jmp $
  6650                              <1> %include 'source/programs/wait.asm'
  6651 00004F2E FF2C7761697400      <2> db 255,44,"wait",0
  6652                              <2> waitkey:
  6653 00004F35 E8D8D2FFFF          <2> 		call getchar
  6654 00004F3A C3                  <2> 		ret
  6655                              <1> %include 'source/programs/while.asm'
  6656 00004F3B FF2C7768696C6500    <2> db 255,44,"while",0
  6657 00004F43 30C0                <2> whilecmd:  xor al, al
  6658 00004F45 3805[E67D0300]      <2> 	cmp [BATCHISON], al
  6659 00004F4B 0F8468E9FFFF        <2> 	je near notbatch
  6660 00004F51 8B35[E27D0300]      <2> 	mov esi, [BATCHPOS]
  6661 00004F57 81EE02000000        <2> 	sub esi, 2
  6662 00004F5D 4E                  <2> whilefnd: dec esi
  6663 00004F5E 8A06                <2> 	mov al, [esi]
  6664 00004F60 3C0A                <2> 	cmp al, 10
  6665 00004F62 0F840D000000        <2> 	je near whilefnd2
  6666 00004F68 3C00                <2> 	cmp al, 0
  6667 00004F6A 0F8405000000        <2> 	je near whilefnd2
  6668 00004F70 E9E8FFFFFF          <2> 	jmp whilefnd
  6669                              <2> whilefnd2:
  6670 00004F75 46                  <2> 	inc esi
  6671 00004F76 8935[E87D0300]      <2> 	mov [LOOPPOS], esi
  6672 00004F7C C605[E77D0300]01    <2> 	mov BYTE [LOOPON], 1
  6673 00004F83 BE[EC910300]        <2> 	mov esi, buftxt
  6674 00004F88 BB[EC910300]        <2> 	mov ebx, buftxt
  6675 00004F8D 81C306000000        <2> 	add ebx, 6
  6676 00004F93 E9E3F6FFFF          <2> 	jmp chkeqsn
  6677                              <1> progend:		;programs end here	
  6678                              <1> batchprogend:
  6679                                  	%include "source/hardware.asm"
  6680                              <1> %ifdef gui.included
  6681                              <1> 	%include "source/drivers/video/vesa.asm"
  6682                              <1> 	%include "source/drivers/input/mouse.asm"
  6683                              <1> %endif
  6684                              <1> %include "source/drivers/sound/pcspkr.asm"
  6685                              <2> ;PC Speaker Drivers
  6686                              <2> PCSpeakerRAW:
  6687 00004F98 60                  <2> 	pusha
  6688                              <2> nosoundrep:
  6689 00004F99 8B35[4E020000]      <2> 	mov esi, [soundpos]
  6690 00004F9F 31C9                <2> 	xor ecx, ecx
  6691 00004FA1 668B0D[4C020000]    <2> 	mov cx, [soundrepititions]
  6692 00004FA8 6681F90000          <2> 	cmp cx, 0
  6693 00004FAD 0F8548000000        <2> 	jne near donesetpitch
  6694 00004FB3 668B0E              <2> 	mov cx, [esi]
  6695 00004FB6 668B5E02            <2> 	mov bx, [esi + 2]
  6696 00004FBA 66890D[4C020000]    <2> 	mov [soundrepititions], cx
  6697 00004FC1 81C604000000        <2> 	add esi, 4
  6698 00004FC7 8935[4E020000]      <2> 	mov [soundpos], esi
  6699 00004FCD 3B35[52020000]      <2> 	cmp esi, [soundendpos]
  6700 00004FD3 7735                <2> 	ja stopsound
  6701 00004FD5 66813D[4C020000]00- <2> 	cmp word [soundrepititions], 0
  6702 00004FDD 00                  <2>
  6703 00004FDE 74B9                <2> 	je nosoundrep
  6704 00004FE0 6681FB0000          <2> 	cmp bx, 0
  6705 00004FE5 740F                <2> 	je nosoundplay
  6706 00004FE7 E840000000          <2> 	call setpitch
  6707 00004FEC E849000000          <2> 	call startsound
  6708 00004FF1 E905000000          <2> 	jmp donesetpitch
  6709                              <2> nosoundplay:
  6710 00004FF6 E846000000          <2> 	call killsound
  6711                              <2> donesetpitch:
  6712 00004FFB 6649                <2> 	dec cx
  6713 00004FFD 66890D[4C020000]    <2> 	mov [soundrepititions], cx
  6714 00005004 61                  <2> 	popa
  6715 00005005 E981B2FFFF          <2> 	jmp timerinterrupt
  6716                              <2> stopsound:
  6717 0000500A 31C0                <2> 	xor eax, eax
  6718 0000500C 66A3[4C020000]      <2> 	mov [soundrepititions], ax
  6719 00005012 A2[4B020000]        <2> 	mov [soundon], al
  6720 00005017 A3[4E020000]        <2> 	mov [soundpos], eax
  6721 0000501C A3[52020000]        <2> 	mov [soundendpos], eax
  6722 00005021 E81B000000          <2> 	call killsound
  6723 00005026 61                  <2> 	popa
  6724 00005027 E95FB2FFFF          <2> 	jmp timerinterrupt
  6725                              <2> 
  6726                              <2> 
  6727                              <2> setpitch:
  6728 0000502C B0B6                <2> 	mov al, 0xB6
  6729 0000502E E643                <2> 	out 0x43, al
  6730 00005030 6689D8              <2> 	mov ax, bx
  6731 00005033 E642                <2> 	out 0x42, al
  6732 00005035 88E0                <2> 	mov al, ah
  6733 00005037 E642                <2> 	out 0x42, al
  6734 00005039 C3                  <2> 	ret
  6735                              <2> startsound:
  6736 0000503A E461                <2> 	in al, 0x61
  6737 0000503C 0C03                <2> 	or al, 3
  6738 0000503E E661                <2> 	out 0x61, al
  6739 00005040 C3                  <2> 	ret
  6740                              <2> killsound:
  6741 00005041 E461                <2> 	in al, 0x61
  6742 00005043 24FC                <2> 	and al, 0xFC
  6743 00005045 E661                <2> 	out 0x61, al
  6744 00005047 C3                  <2> 	ret
  6745                              <2> 	
  6746                              <1> %ifdef sound.included
  6747                              <1> 	%include "source/drivers/sound/sblaster.asm"
  6748                              <2> ;Sound Blaster Drivers
  6749                              <2> sblaster:
  6750                              <2> .init:
  6751 00005048 E8E8010000          <2> 		call ResetDSP			;If the system is Sound Blaster 16 compatible, reset the DSP
  6752 0000504D A2[8F520000]        <2> 		mov [SoundBlaster], al	;if the reset worked, show an available card
  6753 00005052 3C00                <2> 		cmp al, 0
  6754 00005054 7418                <2> 		je .noinit
  6755 00005056 B0D1                <2> 		mov	al,0D1h 		; turn speaker(s) on
  6756 00005058 E80C020000          <2> 		call WriteDSP
  6757 0000505D B088                <2> 		mov	al,088h 		; Left = 8, Right = 8 (15-highest)
  6758 0000505F E8C2010000          <2> 		call MstrVol 		; L = Hi Nibble, R = Lo Nibble
  6759 00005064 BE[6F500000]        <2> 		mov esi, .initmsg
  6760 00005069 E88ECBFFFF          <2> 		call print
  6761                              <2> .noinit:
  6762 0000506E C3                  <2> 		ret
  6763 0000506F 536F756E64626C6173- <2> .initmsg db "Soundblaster Initialized",10,0
  6764 00005078 74657220496E697469- <2>
  6765 00005081 616C697A65640A00    <2>
  6766                              <2> sblaster.cont: ;this function goes to the next available portion of a sound, if necessary
  6767 00005089 813D[7A520000]0000- <2> 	cmp dword [Length0], 0
  6768 00005091 0000                <2>
  6769 00005093 0F8462000000        <2> 	je near .done
  6770 00005099 FF0D[7A520000]      <2> 	dec dword [Length0]
  6771 0000509F E908000000          <2> 	jmp .notodd
  6772                              <2> .oddlength:
  6773 000050A4 31C9                <2> 	xor ecx, ecx
  6774 000050A6 880D[79520000]      <2> 	mov [OddLength], cl
  6775                              <2> .notodd:
  6776 000050AC 8B35[80520000]      <2> 	mov esi, [NextMemLoc]
  6777 000050B2 31C9                <2> 	xor ecx, ecx
  6778 000050B4 668B0D[7E520000]    <2> 	mov cx, [Length1]
  6779 000050BB D1E9                <2> 	shr ecx, 1
  6780 000050BD 6641                <2> 	inc cx
  6781 000050BF 31DB                <2> 	xor ebx, ebx
  6782 000050C1 668B1D[88520000]    <2> 	mov bx, [SegLoc]
  6783 000050C8 6601CB              <2> 	add bx, cx
  6784 000050CB 66891D[88520000]    <2> 	mov [SegLoc], bx
  6785 000050D2 81C300000800        <2> 	add ebx, 0x80000 ;linear address of sb buffer
  6786 000050D8 8935[84520000]      <2> 	mov [MemLoc], esi
  6787 000050DE 89C8                <2> 	mov eax, ecx
  6788 000050E0 01F0                <2> 	add eax, esi
  6789 000050E2 A3[80520000]        <2> 	mov [NextMemLoc], eax
  6790 000050E7 E833000000          <2> 	call DMACopy
  6791                              <2> 	;call DMAPlay
  6792 000050EC E8E0000000          <2> 	call PlayDSP
  6793 000050F1 66BA2E02            <2> 	mov dx, (BasePort+0xE)
  6794 000050F5 EC                  <2> 	in al, dx ;acknowledge the interrupt 
  6795 000050F6 E94EB2FFFF          <2> 	jmp handled2 ;it is part of an interrupt routine
  6796                              <2> .done:
  6797 000050FB 803D[79520000]01    <2> 	cmp byte [OddLength], 1
  6798 00005102 74A0                <2> 	je .oddlength
  6799 00005104 31C0                <2> 	xor eax, eax
  6800 00005106 66A3[7E520000]      <2> 	mov [Length1], ax
  6801 0000510C 66B8D000            <2> 	mov ax, 0xD0
  6802 00005110 E854010000          <2> 	call WriteDSP
  6803 00005115 66BA2E02            <2> 	mov dx, (BasePort+0xE)
  6804 00005119 EC                  <2> 	in al, dx ;acknowledge the interrupt 
  6805 0000511A E92AB2FFFF          <2> 	jmp handled2
  6806                              <2> 	
  6807                              <2> DMACopy:
  6808 0000511F 66B80800            <2> 		mov ax, LINEAR_SEL
  6809 00005123 8EE0                <2> 		mov fs, ax
  6810 00005125 C1E902              <2> 		shr ecx, 2
  6811                              <2> .loop:
  6812 00005128 8B06                <2> 		mov eax, [esi]
  6813 0000512A 648903              <2> 		mov [fs:ebx], eax
  6814 0000512D 81C604000000        <2> 		add esi, 4
  6815 00005133 81C304000000        <2> 		add ebx, 4
  6816 00005139 E2ED                <2> 		loop .loop
  6817 0000513B 66B83000            <2> 		mov ax, NEW_DATA_SEL
  6818 0000513F 8EE0                <2> 		mov fs, ax
  6819 00005141 C3                  <2> 		ret
  6820                              <2> 		
  6821                              <2> 
  6822                              <2> DMAPlay:    ;uses eax ebx edx
  6823 00005142 C605[8A520000]00    <2> 		mov	byte [Page1],00h
  6824                              <2> 
  6825 00005149 B005                <2> 		mov	al,(Channel+4)
  6826 0000514B 66BA0A00            <2> 		mov	dx,0Ah
  6827 0000514F EE                  <2> 		out	dx,al
  6828 00005150 30C0                <2> 		xor	al,al
  6829 00005152 66BA0C00            <2> 		mov	dx,0Ch
  6830 00005156 EE                  <2> 		out	dx,al
  6831 00005157 B059                <2> 		mov	al,ModeReg
  6832 00005159 66BA0B00            <2> 		mov	dx,0Bh
  6833 0000515D EE                  <2> 		out	dx,al
  6834 0000515E B800000800          <2> 		mov	eax,0x80000
  6835 00005163 66BA0200            <2> 		mov	dx,AddPort
  6836 00005167 EE                  <2> 		out	dx,al
  6837 00005168 86C4                <2> 		xchg al,ah
  6838 0000516A EE                  <2> 		out	dx,al
  6839 0000516B B800000800          <2> 		mov	eax,0x80000
  6840 00005170 89C2                <2> 		mov	edx,eax
  6841 00005172 2500000100          <2> 		and	eax,65536
  6842 00005177 7406                <2> 		jz	MemLocN1
  6843 00005179 FE05[8A520000]      <2> 		inc	byte [Page1]
  6844                              <2> MemLocN1:
  6845 0000517F 89D0                <2> 		mov	eax,edx
  6846 00005181 2500000200          <2> 		and	eax,131072
  6847 00005186 7407                <2> 		jz	MemLocN2
  6848 00005188 8005[8A520000]02    <2> 		add	byte [Page1],02
  6849                              <2> MemLocN2:
  6850 0000518F 89D0                <2> 		mov	eax,edx
  6851 00005191 2500000400          <2> 		and	eax,262144
  6852 00005196 7407                <2> 		jz	MemLocN3
  6853 00005198 8005[8A520000]04    <2> 		add	byte [Page1],04
  6854                              <2> MemLocN3:
  6855 0000519F 89D0                <2> 		mov	eax,edx
  6856 000051A1 2500000800          <2> 		and	eax,524288
  6857 000051A6 7407                <2> 		jz	MemLocN4
  6858 000051A8 8005[8A520000]08    <2> 		add	byte [Page1],08
  6859                              <2> MemLocN4:
  6860 000051AF 66BA8300            <2> 		mov	dx,PgPort
  6861 000051B3 A0[8A520000]        <2> 		mov	al,[Page1]
  6862 000051B8 EE                  <2> 		out	dx,al
  6863 000051B9 66BA0300            <2> 		mov	dx,LenPort
  6864 000051BD 66A1[7E520000]      <2> 		mov	ax,[Length1]
  6865 000051C3 6648                <2> 		dec ax
  6866 000051C5 EE                  <2> 		out	dx,al
  6867 000051C6 86C4                <2> 		xchg al,ah
  6868 000051C8 EE                  <2> 		out	dx,al
  6869 000051C9 66BA0A00            <2> 		mov	dx,0Ah
  6870 000051CD B001                <2> 		mov	al,Channel
  6871 000051CF EE                  <2> 		out	dx,al
  6872 000051D0 C3                  <2> 		ret
  6873                              <2> 		
  6874                              <2> PlayDSP:
  6875 000051D1 B040                <2> 		mov	al,40h
  6876 000051D3 E891000000          <2> 		call WriteDSP
  6877 000051D8 31D2                <2> 		xor	edx,edx
  6878 000051DA B840420F00          <2> 		mov	eax,1000000
  6879 000051DF 8B1D[8B520000]      <2> 		mov	ebx,[Freq]
  6880 000051E5 803D[78520000]00    <2> 		cmp byte [Stereo], 0
  6881 000051EC 7402                <2> 		je .nost
  6882 000051EE D1E3                <2> 		shl ebx, 1
  6883                              <2> .nost:
  6884 000051F0 F7F3                <2> 		div	ebx
  6885 000051F2 89C3                <2> 		mov	ebx,eax
  6886 000051F4 B800010000          <2> 		mov	eax,256
  6887 000051F9 29D8                <2> 		sub	eax,ebx
  6888 000051FB E869000000          <2> 		call WriteDSP
  6889 00005200 B014                <2> 		mov	al,14h	;write the mode
  6890 00005202 803D[78520000]00    <2> 		cmp byte [Stereo], 0
  6891 00005209 7400                <2> 		je .nost2
  6892                              <2> 		
  6893                              <2> .nost2:
  6894 0000520B E859000000          <2> 		call WriteDSP
  6895 00005210 66A1[7E520000]      <2> 		mov	ax,[Length1]
  6896 00005216 66D1E8              <2> 		shr ax, 1
  6897 00005219 E84B000000          <2> 		call WriteDSP
  6898 0000521E 86C4                <2> 		xchg al,ah
  6899 00005220 E844000000          <2> 		call WriteDSP
  6900 00005225 C3                  <2> 		ret
  6901                              <2> 
  6902                              <2> MstrVol:    ;uses ax dx
  6903 00005226 6650                <2> 	   push ax
  6904 00005228 66BA2402            <2> 	   mov	dx,(BasePort+4)
  6905 0000522C B022                <2> 	   mov	al,22h
  6906 0000522E EE                  <2> 	   out	dx,al
  6907 0000522F 6658                <2> 	   pop	ax
  6908 00005231 6642                <2> 	   inc	dx
  6909 00005233 EE                  <2> 	   out	dx,al
  6910 00005234 C3                  <2> 	   ret
  6911                              <2> 	   
  6912                              <2> ResetDSP:   ; uses cx dx
  6913 00005235 66BA2602            <2> 			mov	dx,(BasePort+6)
  6914 00005239 B001                <2> 			mov	al,01
  6915 0000523B EE                  <2> 			out	dx,al
  6916 0000523C 66B93200            <2> 			mov	cx,50
  6917 00005240 EC                  <2> WaitIt1:	in	al,dx
  6918 00005241 E2FD                <2> 			loop WaitIt1
  6919 00005243 30C0                <2> 			xor	al,al
  6920 00005245 EE                  <2> 			out	dx,al
  6921 00005246 66B93200            <2> 			mov	cx,50
  6922 0000524A EC                  <2> WaitIt2:	in	al,dx
  6923 0000524B E2FD                <2> 			loop WaitIt2
  6924 0000524D B4FF                <2> 			mov	ah,0FFh 		; part of Return Code
  6925 0000524F 66BA2E02            <2> 			mov	dx,(BasePort+14)
  6926 00005253 EC                  <2> 			in	al,dx
  6927 00005254 2480                <2> 			and	al,80h
  6928 00005256 3C80                <2> 			cmp	al,80h
  6929 00005258 750C                <2> 			jne	ResetErr
  6930 0000525A 66BA2A02            <2> 			mov	dx,(BasePort+10)
  6931 0000525E EC                  <2> 			in	al,dx
  6932 0000525F 3CAA                <2> 			cmp	al,0AAh
  6933 00005261 7503                <2> 			jne	ResetErr
  6934 00005263 B001                <2> ResetOK:	mov al, 1		; return ax = 0 if reset ok
  6935 00005265 C3                  <2> 			ret
  6936 00005266 30C0                <2> ResetErr:	xor al, al
  6937 00005268 C3                  <2> 			ret
  6938                              <2> 
  6939                              <2> WriteDSP:   ;uses ax dx
  6940 00005269 6650                <2> 		push ax
  6941 0000526B 66BA2C02            <2> 		mov	dx,(BasePort+12)
  6942 0000526F EC                  <2> WaitIt:	in	al,dx
  6943 00005270 2480                <2> 		and	al,80h
  6944 00005272 75FB                <2> 		jnz	WaitIt
  6945 00005274 6658                <2> 		pop	ax
  6946 00005276 EE                  <2> 		out	dx,al
  6947 00005277 C3                  <2> 		ret
  6948                              <2> 
  6949 00005278 00                  <2> Stereo db 0
  6950 00005279 00                  <2> OddLength db 0
  6951 0000527A 00000000            <2> Length0 dd	0
  6952 0000527E 0000                <2> Length1	dw  0
  6953 00005280 00000000            <2> NextMemLoc dd 0
  6954 00005284 00000000            <2> MemLoc	dd  0
  6955 00005288 0000                <2> SegLoc  dw 0
  6956 0000528A 00                  <2> Page1	db  0
  6957 0000528B 00000000            <2> Freq	dd	0
  6958                              <2> PgPort	equ 83h
  6959                              <2> AddPort	equ 02h
  6960                              <2> LenPort	equ 03h
  6961                              <2> ModeReg	equ 59h
  6962                              <2> Channel	equ 01h
  6963                              <2> BasePort	equ 220h
  6964 0000528F 00                  <2> SoundBlaster	db 0
  6965                              <1> %endif
  6966                              <1> %ifdef io.serial
  6967                              <1> 	%include "source/drivers/input/serial.asm"
  6968                              <1> %else
  6969                              <1> 	%include "source/drivers/input/keyboard.asm"
  6970 00005290 00                  <2> specialkey db 0
  6971                              <2> ;charregion db 0
  6972                              <2> waitforinput:		;this is basically the idle process
  6973                              <2> 					;this halts the cpu for a small amount of time and then sees if there was a keypress
  6974                              <2> 					;this lets the cpu stay at close to 0% instead of 100%
  6975 00005291 6631C0              <2> 	xor ax, ax
  6976 00005294 A0[1C5E0000]        <2> 	mov al, [threadson]
  6977 00005299 8825[1C5E0000]      <2> 	mov [threadson], ah
  6978 0000529F FB                  <2> 	sti
  6979 000052A0 F4                  <2> 	hlt
  6980 000052A1 A2[1C5E0000]        <2> 	mov [threadson], al
  6981 000052A6 66813D[76220000]00- <2> 	cmp word [trans], 0
  6982 000052AE 00                  <2>
  6983 000052AF 7401                <2> 	je getkey
  6984 000052B1 C3                  <2> 	ret
  6985                              <2> getkey:
  6986 000052B2 31C0                <2> 		xor eax, eax
  6987 000052B4 A2[90520000]        <2> 		mov [specialkey], al
  6988 000052B9 A3[72220000]        <2> 		mov [lastkey], eax
  6989 000052BE E464                <2> 		in al, 64h ; Status
  6990                              <2> 	%ifdef gui.included
  6991                              <2> 		test al, 20h ; PS2-Mouse?
  6992                              <2> 		jnz near moused
  6993                              <2> 	%endif
  6994 000052C0 A801                <2> 		test al, 1 
  6995 000052C2 74CD                <2> 		jz waitforinput ; if output buffer full or no keypress, jump to idle process
  6996                              <2> 	calckey:
  6997 000052C4 E460                <2> 		in al, 60h
  6998 000052C6 30E4                <2> 		xor ah, ah
  6999 000052C8 6689C3              <2> 		mov bx, ax
  7000 000052CB 66A3[74220000]      <2> 		mov [lastkey + 2], ax
  7001 000052D1 BF[60540000]        <2> 		mov edi, scancode
  7002                              <2> 	searchscan: 
  7003 000052D6 80FB3A              <2> 		cmp bl, 3Ah
  7004 000052D9 7314                <2> 		jae scanother
  7005 000052DB C1E004              <2> 		shl eax, 4
  7006 000052DE 01C7                <2> 		add edi, eax
  7007 000052E0 668B07              <2> 		mov ax, [edi]
  7008 000052E3 663D0000            <2> 		cmp ax, 0
  7009 000052E7 7406                <2> 		je scanother
  7010 000052E9 E9D0000000          <2> 		jmp scanfound
  7011 000052EE 00                  <2> uppercase db 0
  7012                              <2> scanother:
  7013 000052EF 6631C0              <2> 		xor ax, ax
  7014 000052F2 66A3[72220000]      <2> 		mov [lastkey], ax
  7015 000052F8 80FBE0              <2> 		cmp bl, 0E0h
  7016 000052FB 0F8477000000        <2> 		je near getkeyspecial
  7017 00005301 803D[90520000]E0    <2> 		cmp byte [specialkey], 0xE0
  7018 00005308 7525                <2> 		jne nospecialkey
  7019 0000530A 80FB38              <2> 		cmp bl, 38h
  7020 0000530D 0F849A000000        <2> 		je near alton
  7021 00005313 80FBB8              <2> 		cmp bl, 0B8h
  7022 00005316 0F8499000000        <2> 		je near altoff
  7023 0000531C 80FB1D              <2> 		cmp bl, 1Dh
  7024 0000531F 0F8478000000        <2> 		je near ctron
  7025 00005325 80FB9D              <2> 		cmp bl, 9Dh
  7026 00005328 0F8477000000        <2> 		je near ctroff
  7027 0000532E C3                  <2> 		ret
  7028                              <2> nospecialkey:
  7029 0000532F 80FB2A              <2> 		cmp bl, 2Ah
  7030 00005332 0F8455000000        <2> 		je near shifton
  7031 00005338 80FB36              <2> 		cmp bl, 36h
  7032 0000533B 0F844C000000        <2> 		je near shifton
  7033 00005341 80FB1C              <2> 		cmp bl, 1Ch
  7034 00005344 0F8473000000        <2> 		je near entdown
  7035 0000534A 80FBAA              <2> 		cmp bl, 0AAh
  7036 0000534D 0F8442000000        <2> 		je near shiftoff
  7037 00005353 80FBB6              <2> 		cmp bl, 0B6h
  7038 00005356 0F8439000000        <2> 		je near shiftoff
  7039 0000535C 80FB3A              <2> 		cmp bl, 3Ah
  7040 0000535F 0F84A7000000        <2> 		je near capslock
  7041 00005365 80FB45              <2> 		cmp bl, 0x45
  7042 00005368 0F84AF000000        <2> 		je near numlock
  7043 0000536E 80FB46              <2> 		cmp bl, 0x46
  7044 00005371 0F84BE000000        <2> 		je near scrolllock
  7045 00005377 C3                  <2> 		ret
  7046                              <2> 	getkeyspecial:
  7047 00005378 C605[90520000]E0    <2> 		mov byte [specialkey], 0xE0
  7048 0000537F E940FFFFFF          <2> 		jmp calckey
  7049                              <2> 	shift:
  7050 00005384 A0[EE520000]        <2> 		mov al, [uppercase]
  7051 00005389 3C01                <2> 		cmp al, 1
  7052 0000538B 7308                <2> 		jae shiftoff
  7053                              <2> 	shifton:
  7054 0000538D C605[EE520000]01    <2> 		mov byte [uppercase], 1
  7055 00005394 C3                  <2> 		ret
  7056                              <2> 	shiftoff:
  7057 00005395 C605[EE520000]00    <2> 		mov byte [uppercase], 0
  7058 0000539C C3                  <2> 		ret
  7059                              <2> 	ctron:
  7060 0000539D C605[0B540000]01    <2> 		mov byte [ctrkey], 1
  7061 000053A4 C3                  <2> 		ret
  7062                              <2> 	ctroff:
  7063 000053A5 C605[0B540000]00    <2> 		mov byte [ctrkey], 0
  7064 000053AC C3                  <2> 		ret
  7065                              <2> 	alton:
  7066 000053AD C605[0A540000]01    <2> 		mov byte [altkey], 1
  7067 000053B4 C3                  <2> 		ret
  7068                              <2> 	altoff:
  7069 000053B5 C605[0A540000]00    <2> 		mov byte [altkey], 0
  7070 000053BC C3                  <2> 		ret
  7071                              <2> 	entdown:
  7072 000053BD C3                  <2> 		ret
  7073                              <2> scanfound:
  7074 000053BE 81C708000000        <2> 		add edi, 8
  7075 000053C4 803D[0B540000]01    <2> 		cmp byte [ctrkey], 1
  7076 000053CB 7306                <2> 		jae ctrlin
  7077 000053CD 81EF08000000        <2> 		sub edi, 8
  7078                              <2> 	ctrlin:
  7079 000053D3 81C704000000        <2> 		add edi, 4
  7080 000053D9 803D[0A540000]01    <2> 		cmp byte [altkey], 1
  7081 000053E0 7306                <2> 		jae altin
  7082 000053E2 81EF04000000        <2> 		sub edi, 4
  7083                              <2> 	altin:
  7084 000053E8 81C702000000        <2> 		add edi, 2
  7085 000053EE 803D[EE520000]01    <2> 		cmp byte [uppercase], 1
  7086 000053F5 7306                <2> 		jae uppercaseon
  7087 000053F7 81EF02000000        <2> 		sub edi, 2
  7088                              <2> 	uppercaseon:
  7089 000053FD 668B07              <2> 		mov ax,[edi]
  7090 00005400 66A3[72220000]      <2> 		mov [lastkey], ax
  7091 00005406 C3                  <2> 		ret
  7092                              <2> 		
  7093 00005407 00                  <2> keyboardstatus db 0
  7094 00005408 00                  <2> numlockstatus db 0
  7095 00005409 00                  <2> scrolllockstatus db 0
  7096 0000540A 00                  <2> altkey db 0
  7097 0000540B 00                  <2> ctrkey db 0
  7098                              <2> 	capslock:
  7099 0000540C 8035[07540000]04    <2> 		xor byte [keyboardstatus], 00000100b
  7100 00005413 E835000000          <2> 		call updatekblights
  7101 00005418 E967FFFFFF          <2> 		jmp shift
  7102                              <2> 		
  7103                              <2> 	numlock:
  7104 0000541D 8035[07540000]02    <2> 		xor byte [keyboardstatus], 00000010b
  7105 00005424 8035[08540000]01    <2> 		xor byte [numlockstatus], 1
  7106 0000542B E81D000000          <2> 		call updatekblights
  7107 00005430 E97DFEFFFF          <2> 		jmp getkey
  7108                              <2> 	
  7109                              <2> 	scrolllock:
  7110 00005435 8035[07540000]01    <2> 		xor byte [keyboardstatus], 00000001b
  7111 0000543C 8035[09540000]01    <2> 		xor byte [scrolllockstatus], 1
  7112 00005443 E805000000          <2> 		call updatekblights
  7113 00005448 E965FEFFFF          <2> 		jmp getkey
  7114                              <2> 		
  7115                              <2> 	updatekblights:
  7116 0000544D B0ED                <2> 		mov al, 0xED
  7117 0000544F 66BA6000            <2> 		mov dx, 0x60
  7118 00005453 EE                  <2> 		out dx, al
  7119                              <2> 	chkkbdack:
  7120 00005454 EC                  <2> 		in al, dx
  7121 00005455 3CFA                <2> 		cmp al, 0xFA
  7122 00005457 75FB                <2> 		jne chkkbdack
  7123 00005459 A0[07540000]        <2> 		mov al, [keyboardstatus]
  7124 0000545E EE                  <2> 		out dx, al
  7125 0000545F C3                  <2> 		ret
  7126                              <2> 		
  7127                              <2> scancode:
  7128                              <2> 	;key, KEY, alt key, ALT KEY, ctrl key, CTRL KEY, ctrl-alt, CTRL-ALT
  7129 00005460 000000000000000000- <2> 	dw 0,0,0,0,0,0,0,0
  7130 00005469 00000000000000      <2>
  7131 00005470 000000000000000000- <2> 	dw 0,0,0,0,0,0,0,0
  7132 00005479 00000000000000      <2>
  7133 00005480 31002100A1003C2000- <2> 	dw '1','!',0xA1,0x203C,0,0,0,0
  7134 00005489 00000000000000      <2>
  7135 00005490 32004000B2001A2200- <2> 	dw '2','@',0xB2,0x221A,0,0,0,0
  7136 00005499 00000000000000      <2>
  7137 000054A0 33002300B3002B2200- <2> 	dw '3','#',0xB3,0x222B,0,0,0,0
  7138 000054A9 00000000000000      <2>
  7139 000054B0 34002400A300A20000- <2> 	dw '4','$',0xA3,0xA2,0,0,0,0
  7140 000054B9 00000000000000      <2>
  7141 000054C0 35002500AC20000000- <2> 	dw '5','%',0x20AC,0,0,0,0,0
  7142 000054C9 00000000000000      <2>
  7143 000054D0 36005E00BC007F2000- <2> 	dw '6','^',0xBC,0x207F,0,0,0,0
  7144 000054D9 00000000000000      <2>
  7145 000054E0 37002600BD00000000- <2> 	dw '7','&',0xBD,0,0,0,0,0
  7146 000054E9 00000000000000      <2>
  7147 000054F0 38002A001E22950000- <2> 	dw '8','*',0x221E,0x95,0,0,0,0
  7148 000054F9 00000000000000      <2>
  7149 00005500 39002800AE00990000- <2> 	dw '9','(',0xAE,0x99,0,0,0,0
  7150 00005509 00000000000000      <2>
  7151 00005510 30002900A900000000- <2> 	dw '0',')',0xA9,0,0,0,0,0
  7152 00005519 00000000000000      <2>
  7153 00005520 2D005F00A500B10000- <2> 	dw '-','_',0xA5,0xB1,0,0,0,0
  7154 00005529 00000000000000      <2>
  7155 00005530 3D002B00F700482200- <2> 	dw '=','+',0xF7,0x2248,0,0,0,0
  7156 00005539 00000000000000      <2>
  7157 00005540 080008000000000000- <2> 	dw 8,8,0,0,0,0,0,0
  7158 00005549 00000000000000      <2>
  7159 00005550 000000000000000000- <2> 	dw 0,0,0,0,0,0,0,0
  7160 00005559 00000000000000      <2>
  7161 00005560 71005100E400C4003B- <2> 	dw 'q','Q',0xE4,0xC4,';',':',0x439,0x419
  7162 00005568 003A0039041904      <2>
  7163 00005570 77005700E500C500C2- <2> 	dw 'w','W',0xE5,0xC5,0x3C2,0,0x446,0x426
  7164 00005579 03000046042604      <2>
  7165 00005580 65004500E900C900B5- <2> 	dw 'e','E',0xE9,0xC9,0x3B5,0x395,0x443,0x423
  7166 00005589 03950343042304      <2>
  7167 00005590 72005200EB00E800C1- <2> 	dw 'r','R',0xEB,0xE8,0x3C1,0x3A1,0x43A,0x41A
  7168 00005599 03A1033A041A04      <2>
  7169 000055A0 74005400FC00DC00C4- <2> 	dw 't','T',0xFC,0xDC,0x3C4,0x3A4,0x435,0x415
  7170 000055A9 03A40335041504      <2>
  7171 000055B0 79005900FF009F00C5- <2> 	dw 'y','Y',0xFF,0x9F,0x3C5,0x3A5,0x43D,0x41D
  7172 000055B9 03A5033D041D04      <2>
  7173 000055C0 75005500FA00F900B8- <2> 	dw 'u','U',0xFA,0xF9,0x3B8,0x398,0x433,0x413
  7174 000055C9 03980333041304      <2>
  7175 000055D0 69004900ED00EC00B9- <2> 	dw 'i','I',0xED,0xEC,0x3B9,0x399,0x448,0x428
  7176 000055D9 03990348042804      <2>
  7177 000055E0 6F004F00F300F200BF- <2> 	dw 'o','O',0xF3,0xF2,0x3BF,0x39F,0x449,0x429
  7178 000055E9 039F0349042904      <2>
  7179 000055F0 70005000F600D600C0- <2> 	dw 'p','P',0xF6,0xD6,0x3C0,0x3A0,0x437,0x417
  7180 000055F9 03A00337041704      <2>
  7181 00005600 5B007B00AB00000000- <2> 	dw '[','{',0xAB,0,0,0,0x445,0x425
  7182 00005609 00000045042504      <2>
  7183 00005610 5D007D00BB00000000- <2> 	dw ']','}',0xBB,0,0,0,0x44A,0x42A
  7184 00005619 0000004A042A04      <2>
  7185 00005620 000000000000000000- <2> 	dw 0,0,0,0,0,0,0,0
  7186 00005629 00000000000000      <2>
  7187 00005630 000000000000000000- <2> 	dw 0,0,0,0,0,0,0,0
  7188 00005639 00000000000000      <2>
  7189 00005640 61004100E100E000B1- <2> 	dw 'a','A',0xE1,0xE0,0x3B1,0x391,0x444,0x424
  7190 00005649 03910344042404      <2>
  7191 00005650 73005300A7000000C3- <2> 	dw 's','S',0xA7,0,0x3C3,0x3A3,0x44B,0x42B
  7192 00005659 03A3034B042B04      <2>
  7193 00005660 64004400B0000000B4- <2> 	dw 'd','D',0xB0,0,0x3B4,0x394,0x432,0x412
  7194 00005669 03940332041204      <2>
  7195 00005670 6600460083004026C6- <2> 	dw 'f','F',0x83,0x2640,0x3C6,0x3A6,0x430,0x410
  7196 00005679 03A60330041004      <2>
  7197 00005680 6700470000000000B3- <2> 	dw 'g','G',0,0,0x3B3,0x393,0x43F,0x41F
  7198 00005689 0393033F041F04      <2>
  7199 00005690 6800480000000000B7- <2> 	dw 'h','H',0,0,0x3B7,0x397,0x440,0x420
  7200 00005699 03970340042004      <2>
  7201 000056A0 6A004A0000000000BE- <2> 	dw 'j','J',0,0,0x3BE,0x39E,0x43E,0x41E
  7202 000056A9 039E033E041E04      <2>
  7203 000056B0 6B004B0000000000BA- <2> 	dw 'k','K',0,0,0x3BA,0x39A,0x43B,0x41B
  7204 000056B9 039A033B041B04      <2>
  7205 000056C0 6C004C0000000000BB- <2> 	dw 'l','L',0,0,0x3BB,0x39B,0x434,0x414
  7206 000056C9 039B0334041404      <2>
  7207 000056D0 3B003A00B6000E2200- <2> 	dw ';',':',0xB6,0x220E,0,0,0x436,0x416
  7208 000056D9 00000036041604      <2>
  7209 000056E0 270022000000000000- <2> 	dw "'",'"',0,0,0,0,0x44D,0x42D
  7210 000056E9 0000004D042D04      <2>
  7211 000056F0 60007E000000000000- <2> 	dw '`','~',0,0,0,0,0x451,0x401
  7212 000056F9 00000051040104      <2>
  7213 00005700 000000000000000000- <2> 	dw 0,0,0,0,0,0,0,0
  7214 00005709 00000000000000      <2>
  7215 00005710 5C007C00AC00A60000- <2> 	dw "\",'|',0xAC,0xA6,0,0,"/","\"
  7216 00005719 0000002F005C00      <2>
  7217 00005720 7A005A00E600C600B6- <2> 	dw 'z','Z',0xE6,0xC6,0x3B6,0x396,0x44F,0x42F
  7218 00005729 0396034F042F04      <2>
  7219 00005730 7800580000000000C7- <2> 	dw 'x','X',0,0,0x3C7,0x3A7,0x447,0x427
  7220 00005739 03A70347042704      <2>
  7221 00005740 63004300E700C700C8- <2> 	dw 'c','C',0xE7,0xC7,0x3C8,0x3A8,0x441,0x421
  7222 00005749 03A80341042104      <2>
  7223 00005750 7600560000000000C9- <2> 	dw 'v','V',0,0,0x3C9,0x3A9,0x43C,0x41C
  7224 00005759 03A9033C041C04      <2>
  7225 00005760 6200420000000000B2- <2> 	dw 'b','B',0,0,0x3B2,0x392,0x438,0x418
  7226 00005769 03920338041804      <2>
  7227 00005770 6E004E00F100D100BD- <2> 	dw 'n','N',0xF1,0xD1,0x3BD,0x39D,0x442,0x422
  7228 00005779 039D0342042204      <2>
  7229 00005780 6D004D006C264226BC- <2> 	dw 'm','M',0x266C,0x2642,0x3BC,0x39C,0x44C,0x42C
  7230 00005789 039C034C042C04      <2>
  7231 00005790 2C003C006422000000- <2> 	dw ',','<',0x2264,0,0,0,0x431,0x411
  7232 00005799 00000031041104      <2>
  7233 000057A0 2E003E006522000000- <2> 	dw '.','>',0x2265,0,0,0,0x44E,0x42E
  7234 000057A9 0000004E042E04      <2>
  7235 000057B0 2F003F00BF00000000- <2> 	dw '/','?',0xBF,0,0,0,'.',','
  7236 000057B9 0000002E002C00      <2>
  7237 000057C0 000000000000000000- <2> 	dw 0,0,0,0,0,0,0,0
  7238 000057C9 00000000000000      <2>
  7239 000057D0 000000000000000000- <2> 	dw 0,0,0,0,0,0,0,0
  7240 000057D9 00000000000000      <2>
  7241 000057E0 000000000000000000- <2> 	dw 0,0,0,0,0,0,0,0
  7242 000057E9 00000000000000      <2>
  7243 000057F0 200020000000000000- <2> 	dw ' ',' ',0,0,0,0,0,0
  7244 000057F9 00000000000000      <2>
  7245                              <2> noscan:
  7246                              <2> 
  7247                              <1> %endif
  7248                              <1> ;drivers will soon be handled intelligently
  7249                              <1> ;every driver's source will be scanned for a .init function
  7250                              <1> ;that will be called and if it returns 0
  7251                              <1> ;the hardware was found and the driver initialized properly
  7252                              <1> initializelater: ;these have debugging messages and should be initialized after the screen
  7253                              <1> 	%ifdef sound.included
  7254 00005800 E843F8FFFF          <1> 		call sblaster.init
  7255                              <1> 	%endif
  7256                              <1> 	%ifdef network.included
  7257 00005805 E817060000          <1> 		call network.init
  7258                              <1> 	%endif
  7259 0000580A C3                  <1> 	ret
  7260                              <1> initialize:
  7261                              <1> ;Now I will initialise the interrupt controllers and remap irq's
  7262 0000580B E839000000          <1> 	call .pic
  7263                              <1> %ifdef terminal.vsync
  7264                              <1> 	call .rtc
  7265                              <1> %endif
  7266 00005810 E896000000          <1> 	call .pit
  7267 00005815 E8B8000000          <1> 	call .fpu
  7268 0000581A E8C9000000          <1> 	call .sse
  7269 0000581F 31C0                <1> 	xor eax, eax
  7270 00005821 31C9                <1> 	xor ecx, ecx
  7271                              <1> %ifdef io.serial
  7272                              <1> 	call serial.init
  7273                              <1> %endif
  7274 00005823 E801000000          <1> 	call .time
  7275 00005828 C3                  <1> 	ret
  7276                              <1> 	
  7277                              <1> .time:
  7278 00005829 E838E6FFFF          <1> 	call time
  7279 0000582E E8E0E7FFFF          <1> 	call timeconvert
  7280 00005833 890D[43020000]      <1> 	mov [timeseconds], ecx
  7281 00005839 31C9                <1> 	xor ecx, ecx
  7282 0000583B 890D[47020000]      <1> 	mov [timenanoseconds], ecx
  7283 00005841 C605[AE3D0000]01    <1> 	mov byte [istimeset], 1
  7284 00005848 C3                  <1> 	ret
  7285                              <1> 	
  7286                              <1> .pic:
  7287 00005849 B011                <1> 	mov al, 0x11
  7288 0000584B E620                <1> 	out 0x20, al
  7289 0000584D E6A0                <1> 	out 0xA0, al
  7290 0000584F B040                <1> 	mov al, 0x40	;interrupt for master
  7291 00005851 E621                <1> 	out 0x21, al
  7292 00005853 B048                <1> 	mov al, 0x48	;interrupt for slave
  7293 00005855 E6A1                <1> 	out 0xA1, al
  7294 00005857 B004                <1> 	mov al, 4
  7295 00005859 E621                <1> 	out 0x21, al
  7296 0000585B B002                <1> 	mov al, 2
  7297 0000585D E6A1                <1> 	out 0xA1, al
  7298 0000585F B001                <1> 	mov al, 0x1
  7299 00005861 E621                <1> 	out 0x21, al
  7300 00005863 B001                <1> 	mov al, 0x1
  7301 00005865 E6A1                <1> 	out 0xA1, al
  7302                              <1> 	;masks are set to zero so as not to mask
  7303 00005867 30C0                <1> 	xor al, al
  7304 00005869 E621                <1> 	out 0x21, al
  7305 0000586B 30C0                <1> 	xor al, al
  7306 0000586D E6A1                <1> 	out 0xA1, al
  7307 0000586F B020                <1> 	mov al, 0x20
  7308 00005871 E6A0                <1> 	out 0xA0, al
  7309 00005873 E620                <1> 	out 0x20, al
  7310 00005875 C3                  <1> 	ret
  7311                              <1> .rtc:
  7312 00005876 B008                <1> 	mov al, 0x8
  7313 00005878 88C4                <1> 	mov ah, al
  7314 0000587A 66BA7000            <1> 	mov dx, 0x70
  7315 0000587E EE                  <1> 	out dx, al
  7316 0000587F 6642                <1> 	inc dx
  7317 00005881 EC                  <1> 	in al, dx
  7318 00005882 86C4                <1> 	xchg al, ah
  7319 00005884 664A                <1> 	dec dx
  7320 00005886 EE                  <1> 	out dx, al
  7321 00005887 6642                <1> 	inc dx
  7322 00005889 86C4                <1> 	xchg al, ah
  7323 0000588B 0C40                <1> 	or al, 0x40
  7324 0000588D EE                  <1> 	out dx, al
  7325                              <1> 	
  7326 0000588E B00A                <1> 	mov al, 0xA
  7327 00005890 664A                <1> 	dec dx
  7328 00005892 EE                  <1> 	out dx, al
  7329 00005893 86C4                <1> 	xchg al, ah
  7330 00005895 6642                <1> 	inc dx
  7331 00005897 EC                  <1> 	in al, dx
  7332 00005898 24F0                <1> 	and al, 0xF0
  7333 0000589A 0A05[0A030000]      <1> 	or al, [rtcrate]
  7334 000058A0 86C4                <1> 	xchg al, ah
  7335 000058A2 664A                <1> 	dec dx
  7336 000058A4 EE                  <1> 	out dx, al
  7337 000058A5 6642                <1> 	inc dx
  7338 000058A7 86C4                <1> 	xchg al, ah
  7339 000058A9 EE                  <1> 	out dx, al
  7340 000058AA C3                  <1> 	ret
  7341                              <1> 	
  7342                              <1> .pit:
  7343                              <1> 	;initialize the PIT
  7344 000058AB 66A1[3C020000]      <1> 	mov ax, [pitdiv] ;this is the divider for the PIT
  7345 000058B1 E640                <1> 	out 0x40, al
  7346 000058B3 66C1C008            <1> 	rol ax, 8
  7347 000058B7 E640                <1> 	out 0x40, al
  7348                              <1> 	;enable rtc interrupt
  7349 000058B9 B00B                <1> 	mov al, 0xB
  7350 000058BB E670                <1> 	out 0x70, al
  7351 000058BD 66C1C008            <1> 	rol ax, 8
  7352 000058C1 E471                <1> 	in al, 0x71
  7353 000058C3 66C1C008            <1> 	rol ax, 8
  7354 000058C7 E670                <1> 	out 0x70, al
  7355 000058C9 66C1C008            <1> 	rol ax, 8
  7356 000058CD 0C40                <1> 	or al, 0x40
  7357 000058CF E671                <1> 	out 0x71, al
  7358 000058D1 C3                  <1> 	ret
  7359                              <1> .fpu:
  7360                              <1> 	;And now to initialize the fpu
  7361 000058D2 0F20E0              <1> 	mov eax, cr4
  7362 000058D5 0D00020000          <1> 	or eax, 0x200
  7363 000058DA 0F22E0              <1> 	mov cr4, eax
  7364 000058DD B87F0B0000          <1> 	mov eax, 0xB7F
  7365 000058E2 50                  <1> 	push eax
  7366 000058E3 D92C24              <1> 	fldcw [esp]
  7367 000058E6 58                  <1> 	pop eax
  7368 000058E7 C3                  <1> 	ret
  7369                              <1> 	
  7370                              <1> .sse:
  7371 000058E8 0F20C0              <1> 	mov eax, cr0
  7372 000058EB 24FB                <1> 	and al, 11111011b
  7373 000058ED 0C02                <1> 	or al, 00000010b
  7374 000058EF 0F22C0              <1> 	mov cr0, eax
  7375 000058F2 0F20E0              <1> 	mov eax, cr4
  7376 000058F5 660D0006            <1> 	or ax, 0000011000000000b
  7377 000058F9 0F22E0              <1> 	mov cr4, eax
  7378 000058FC C3                  <1> 	ret
  7379                                      %include "source/pci.asm"
  7380 000058FD 00                  <1> pcibus		db 0
  7381 000058FE 00                  <1> pcidevice	db 0
  7382 000058FF 00                  <1> pcifunction	db 0
  7383 00005900 00                  <1> pciregister	db 0
  7384 00005901 00                  <1> pcireqtype	db 0
  7385 00005902 00000000            <1> pcidevid	dd 0
  7386 00005906 FFFFFFFF            <1> pcidevidmask dd 0xFFFFFFFF
  7387                              <1> getpcimem:
  7388 0000590A B002                <1> 	mov al, 2
  7389 0000590C A2[01590000]        <1> 	mov [pcireqtype], al
  7390 00005911 E922000000          <1> 	jmp searchpci
  7391                              <1> getpciport:
  7392 00005916 B001                <1> 	mov al, 1
  7393 00005918 A2[01590000]        <1> 	mov [pcireqtype], al
  7394 0000591D E916000000          <1> 	jmp searchpci
  7395                              <1> pcidump:
  7396 00005922 31C0                <1> 	xor eax, eax
  7397 00005924 A2[FF580000]        <1> 	mov [pcifunction], al
  7398 00005929 A2[FD580000]        <1> 	mov [pcibus], al
  7399 0000592E A2[FE580000]        <1> 	mov [pcidevice], al
  7400 00005933 A2[01590000]        <1> 	mov [pcireqtype], al
  7401                              <1> searchpci:		;;return in ebx, start X in pciX
  7402 00005938 30C0                <1> 	xor al, al
  7403 0000593A A2[00590000]        <1> 	mov [pciregister], al
  7404 0000593F E823020000          <1> 	call getpciaddr
  7405 00005944 BAF80C0000          <1> 	mov edx, 0xCF8
  7406 00005949 EF                  <1> 	out dx, eax	;;request pci config
  7407 0000594A BAFC0C0000          <1> 	mov edx, 0xCFC
  7408 0000594F ED                  <1> 	in eax, dx 	;;read in pci config
  7409 00005950 3D0000FFFF          <1> 	cmp eax, 0xFFFF0000
  7410 00005955 0F823D000000        <1> 	jb near checkpcidevice
  7411                              <1> searchpciret:
  7412                              <1> nextpcidevice:
  7413 0000595B 30C0                <1> 	xor al, al
  7414 0000595D A2[FF580000]        <1> 	mov [pcifunction], al
  7415 00005962 A0[FE580000]        <1> 	mov al, [pcidevice]
  7416 00005967 3C1F                <1> 	cmp al, 11111b
  7417 00005969 0F8306010000        <1> 	jae near nextpcibus
  7418 0000596F FEC0                <1> 	inc al
  7419 00005971 A2[FE580000]        <1> 	mov [pcidevice], al
  7420 00005976 E9BDFFFFFF          <1> 	jmp searchpci
  7421 0000597B A0[FF580000]        <1> 	mov al, [pcifunction]
  7422 00005980 3C07                <1> 	cmp al, 111b
  7423 00005982 0F83D3FFFFFF        <1> 	jae near nextpcidevice
  7424 00005988 FEC0                <1> 	inc al
  7425 0000598A A2[FF580000]        <1> 	mov [pcifunction], al
  7426 0000598F E9A4FFFFFF          <1> 	jmp searchpci
  7427 00005994 00000000            <1> pcitype: db 0,0,0,0
  7428                              <1> checkpcidevice:
  7429 00005998 31C0                <1> 	xor eax, eax
  7430 0000599A 3905[02590000]      <1> 	cmp [pcidevid], eax
  7431 000059A0 0F8430000000        <1> 	je near .good
  7432 000059A6 A2[00590000]        <1> 	mov [pciregister], al	;device id, vendor id
  7433 000059AB E8B7010000          <1> 	call getpciaddr
  7434 000059B0 BAF80C0000          <1> 	mov edx, 0xCF8
  7435 000059B5 EF                  <1> 	out dx, eax
  7436 000059B6 BAFC0C0000          <1> 	mov edx, 0xCFC
  7437 000059BB ED                  <1> 	in eax, dx
  7438 000059BC 2305[06590000]      <1> 	and eax, [pcidevidmask]
  7439 000059C2 8B1D[02590000]      <1> 	mov ebx, [pcidevid]
  7440 000059C8 231D[06590000]      <1> 	and ebx, [pcidevidmask]
  7441 000059CE 39D8                <1> 	cmp eax, ebx
  7442 000059D0 0F8585FFFFFF        <1> 	jne near searchpciret
  7443                              <1> .good:
  7444 000059D6 30C0                <1> 	xor al, al
  7445 000059D8 3805[01590000]      <1> 	cmp [pcireqtype], al
  7446 000059DE 0F842C000000        <1> 	je near dumppcidevice
  7447 000059E4 B008                <1> 	mov al, 0x08
  7448 000059E6 A2[00590000]        <1> 	mov [pciregister], al	;;class code, subclass, revision id
  7449 000059EB E877010000          <1> 	call getpciaddr
  7450 000059F0 BAF80C0000          <1> 	mov edx, 0xCF8
  7451 000059F5 EF                  <1> 	out dx, eax
  7452 000059F6 BAFC0C0000          <1> 	mov edx, 0xCFC
  7453 000059FB ED                  <1> 	in eax, dx
  7454 000059FC C1C008              <1> 	rol eax, 8
  7455 000059FF 3A05[94590000]      <1> 	cmp al, [pcitype]
  7456 00005A05 0F84A0000000        <1> 	je near foundpciaddr
  7457 00005A0B E94BFFFFFF          <1> 	jmp searchpciret
  7458                              <1> dumppcidevice:
  7459 00005A10 30C0                <1> 	xor al, al
  7460 00005A12 A2[00590000]        <1> 	mov [pciregister], al
  7461 00005A17 E84B010000          <1> 	call getpciaddr
  7462 00005A1C 89C1                <1> 	mov ecx, eax
  7463 00005A1E C605[702F0000]05    <1> 	mov byte [firsthexshown], 5
  7464 00005A25 E85BD5FFFF          <1> 	call showhex
  7465                              <1> dumppcidevicelp:
  7466 00005A2A A2[00590000]        <1> 	mov [pciregister], al
  7467 00005A2F E833010000          <1> 	call getpciaddr
  7468 00005A34 BAF80C0000          <1> 	mov edx, 0xCF8
  7469 00005A39 EF                  <1> 	out dx, eax
  7470 00005A3A BAFC0C0000          <1> 	mov edx, 0xCFC
  7471 00005A3F ED                  <1> 	in eax, dx
  7472 00005A40 89C1                <1> 	mov ecx, eax
  7473 00005A42 A0[00590000]        <1> 	mov al, [pciregister]
  7474 00005A47 0404                <1> 	add al, 4
  7475 00005A49 C605[702F0000]05    <1> 	mov byte [firsthexshown], 5
  7476 00005A50 E830D5FFFF          <1> 	call showhex
  7477 00005A55 3C3C                <1> 	cmp al, 0x3C
  7478 00005A57 72D1                <1> 	jb dumppcidevicelp
  7479                              <1> dumppcidn:
  7480                              <1> %ifdef io.serial
  7481                              <1> 	mov esi, line
  7482                              <1> 	call print
  7483                              <1> %else
  7484 00005A59 803D[A2240000]00    <1> 	cmp byte [charpos], 0
  7485 00005A60 0F84F5FEFFFF        <1> 	je near searchpciret
  7486 00005A66 BE[C3620000]        <1> 	mov esi, line
  7487 00005A6B E88CC1FFFF          <1> 	call print
  7488                              <1> %endif
  7489 00005A70 E9E6FEFFFF          <1> 	jmp searchpciret
  7490                              <1> nextpcibus:
  7491 00005A75 30C0                <1> 	xor al, al
  7492 00005A77 A2[FE580000]        <1> 	mov [pcidevice], al
  7493 00005A7C A0[FD580000]        <1> 	mov al, [pcibus]
  7494 00005A81 3C7F                <1> 	cmp al, 1111111b
  7495 00005A83 730C                <1> 	jae donesearchpci
  7496 00005A85 FEC0                <1> 	inc al
  7497 00005A87 A2[FD580000]        <1> 	mov [pcibus], al
  7498 00005A8C E9A7FEFFFF          <1> 	jmp searchpci
  7499                              <1> donesearchpci:
  7500 00005A91 BBFFFFFFFF          <1> 	mov ebx, 0xFFFFFFFF
  7501 00005A96 31D2                <1> 	xor edx, edx
  7502 00005A98 8815[94590000]      <1> 	mov [pcitype], dl
  7503 00005A9E 8915[02590000]      <1> 	mov [pcidevid], edx
  7504 00005AA4 891D[06590000]      <1> 	mov [pcidevidmask], ebx
  7505 00005AAA C3                  <1> 	ret
  7506                              <1> foundpciaddr:
  7507 00005AAB B010                <1> 	mov al, 0x10
  7508 00005AAD A2[00590000]        <1> 	mov [pciregister], al
  7509 00005AB2 803D[01590000]02    <1> 	cmp byte [pcireqtype], 2
  7510 00005AB9 7443                <1> 	je findpcimemaddr
  7511                              <1> findpciioaddr:
  7512 00005ABB E8A7000000          <1> 	call getpciaddr
  7513 00005AC0 BAF80C0000          <1> 	mov edx, 0xCF8
  7514 00005AC5 EF                  <1> 	out dx, eax
  7515 00005AC6 BAFC0C0000          <1> 	mov edx, 0xCFC
  7516 00005ACB ED                  <1> 	in eax, dx
  7517 00005ACC 89C3                <1> 	mov ebx, eax
  7518 00005ACE 81E301000000        <1> 	and ebx, 1
  7519 00005AD4 81FB00000000        <1> 	cmp ebx, 0
  7520 00005ADA 0F846E000000        <1> 	je near notpciioaddr
  7521 00005AE0 2D01000000          <1> 	sub eax, 1
  7522 00005AE5 89C2                <1> 	mov edx, eax
  7523 00005AE7 31DB                <1> 	xor ebx, ebx
  7524 00005AE9 4B                  <1> 	dec ebx
  7525 00005AEA 891D[06590000]      <1> 	mov [pcidevidmask], ebx
  7526 00005AF0 43                  <1> 	inc ebx
  7527 00005AF1 881D[94590000]      <1> 	mov [pcitype], bl
  7528 00005AF7 891D[02590000]      <1> 	mov [pcidevid], ebx
  7529 00005AFD C3                  <1> 	ret
  7530                              <1> findpcimemaddr:
  7531 00005AFE E864000000          <1> 	call getpciaddr
  7532 00005B03 BAF80C0000          <1> 	mov edx, 0xCF8
  7533 00005B08 EF                  <1> 	out dx, eax
  7534 00005B09 BAFC0C0000          <1> 	mov edx, 0xCFC
  7535 00005B0E ED                  <1> 	in eax, dx
  7536 00005B0F 89C3                <1> 	mov ebx, eax
  7537 00005B11 81E301000000        <1> 	and ebx, 1
  7538 00005B17 81FB01000000        <1> 	cmp ebx, 1
  7539 00005B1D 0F842B000000        <1> 	je near notpciioaddr
  7540 00005B23 C1E804              <1> 	shr eax, 4
  7541 00005B26 C1E004              <1> 	shl eax, 4	;remove prefetch and type
  7542 00005B29 89C2                <1> 	mov edx, eax
  7543 00005B2B 50                  <1> 	push eax
  7544 00005B2C A1[23020000]        <1> 	mov eax, [basecache]
  7545 00005B31 C1E004              <1> 	shl eax, 4
  7546 00005B34 29C2                <1> 	sub edx, eax
  7547 00005B36 58                  <1> 	pop eax
  7548 00005B37 31DB                <1> 	xor ebx, ebx
  7549 00005B39 4B                  <1> 	dec ebx
  7550 00005B3A 891D[06590000]      <1> 	mov [pcidevidmask], ebx
  7551 00005B40 43                  <1> 	inc ebx
  7552 00005B41 881D[94590000]      <1> 	mov [pcitype], bl
  7553 00005B47 891D[02590000]      <1> 	mov [pcidevid], ebx
  7554 00005B4D C3                  <1> 	ret
  7555                              <1> notpciioaddr:
  7556 00005B4E A0[00590000]        <1> 	mov al, [pciregister]
  7557 00005B53 0404                <1> 	add al, 4
  7558 00005B55 3C28                <1> 	cmp al, 0x28
  7559 00005B57 0F87FEFDFFFF        <1> 	ja near searchpciret
  7560 00005B5D A2[00590000]        <1> 	mov [pciregister], al
  7561 00005B62 E954FFFFFF          <1> 	jmp findpciioaddr
  7562                              <1> getpciaddr:		;;puts it in eax and ebx
  7563 00005B67 31C0                <1> 			xor eax, eax
  7564 00005B69 BB00000080          <1> 			mov ebx, 0x80000000
  7565 00005B6E A0[FD580000]        <1> 			mov al, [pcibus]
  7566 00005B73 C1E010              <1> 			shl eax, 16
  7567 00005B76 01C3                <1> 			add ebx, eax
  7568 00005B78 31C0                <1> 			xor eax, eax
  7569 00005B7A A0[FE580000]        <1> 			mov al, [pcidevice]
  7570 00005B7F C1E00B              <1> 			shl eax, 11
  7571 00005B82 01C3                <1> 			add ebx, eax
  7572 00005B84 31C0                <1> 			xor eax, eax
  7573 00005B86 A0[FF580000]        <1> 			mov al, [pcifunction]
  7574 00005B8B C1E008              <1> 			shl eax, 8
  7575 00005B8E 01C3                <1> 			add ebx, eax
  7576 00005B90 31C0                <1> 			xor eax, eax
  7577 00005B92 A0[00590000]        <1> 			mov al, [pciregister]
  7578 00005B97 01C3                <1> 			add ebx, eax
  7579 00005B99 89D8                <1> 			mov eax, ebx
  7580 00005B9B C3                  <1> 			ret
  7581                                      %include "source/disk.asm"
  7582                              <1> %ifdef disk.real
  7583                              <1> 	%include "source/drivers/disk/realmode.asm"
  7584                              <2> diskr:
  7585                              <2> 			;sector count in cl
  7586                              <2> 			;disk number in ch
  7587                              <2> 			;48 bit address with last 32 bits in ebx
  7588                              <2> 			;buffer in esi
  7589                              <2> 			;puts end of buffer in edi and end lba address in edx
  7590 00005B9C 880D[C35B0000]      <2> 	mov [sdlength], cl
  7591 00005BA2 891D[C45B0000]      <2> 	mov [sdaddress], ebx
  7592 00005BA8 8935[455D0000]      <2> 	mov [oldesireal], esi
  7593 00005BAE 66BE[C85B]          <2> 	mov si, readdiskreal
  7594 00005BB2 668935[D10C0000]    <2> 	mov [realmodeptr], si
  7595 00005BB9 E801B0FFFF          <2> 	call realmode
  7596 00005BBE E941000000          <2> 	jmp backfromrealread
  7597 00005BC3 00                  <2> sdlength db 0
  7598 00005BC4 00000000            <2> sdaddress dd 0
  7599                              <2> 
  7600                              <2> [BITS 16]
  7601                              <2> readdiskreal:
  7602 00005BC8 C706[F45B]1000      <2> 	mov word [dlen], 0x10
  7603 00005BCE C706[F85B]0000      <2> 	mov word [daddress], 0
  7604 00005BD4 C706[FA5B]0001      <2> 	mov word [dsegm], 0x100
  7605 00005BDA 66891E[FC5B]        <2> 	mov [dlbaad], ebx
  7606 00005BDF 880E[F65B]          <2> 	mov [dreadlen], cl
  7607                              <2> ReadHardDisk:
  7608 00005BE3 BE[F45B]            <2> 	mov si, diskaddresspacket
  7609 00005BE6 31C0                <2> 	xor ax, ax
  7610 00005BE8 B442                <2> 	mov ah, 0x42
  7611 00005BEA 8A16[F35B]          <2> 	mov dl, [dnumber]
  7612 00005BEE CD13                <2> 	int 0x13
  7613 00005BF0 72F1                <2> 	jc ReadHardDisk
  7614 00005BF2 C3                  <2> 	ret
  7615                              <2> 
  7616 00005BF3 80                  <2> dnumber db 0x80
  7617                              <2> diskaddresspacket:
  7618 00005BF4 10                  <2> dlen:	db 0x10 ;size of packet
  7619 00005BF5 00                  <2> 		db 0
  7620 00005BF6 7F00                <2> dreadlen:	dw 0x7F	;blocks to read=maximum
  7621 00005BF8 0000                <2> daddress:	dw 0	;address 0
  7622 00005BFA 0001                <2> dsegm:		dw 0x100	;segment
  7623                              <2> 		;start with known value for hd
  7624                              <2> dlbaad:
  7625 00005BFC 00000000            <2> 	dd 0	;lba address
  7626 00005C00 00000000            <2> 	dd 0
  7627                              <2> [BITS 32]
  7628                              <2> backfromrealread:
  7629 00005C04 8B35[455D0000]      <2> 	mov esi, [oldesireal]
  7630 00005C0A 8B1D[C45B0000]      <2> 	mov ebx, [sdaddress]
  7631 00005C10 31C9                <2> 	xor ecx, ecx
  7632 00005C12 8A0D[C35B0000]      <2> 	mov cl, [sdlength]
  7633 00005C18 01CB                <2> 	add ebx, ecx
  7634 00005C1A 66B80800            <2> 	mov ax, LINEAR_SEL
  7635 00005C1E 8EE0                <2> 	mov fs, ax
  7636 00005C20 BF00100000          <2> 	mov edi, 0x1000
  7637 00005C25 B200                <2> 	mov dl, 0
  7638 00005C27 D0E1                <2> 	shl cl, 1
  7639                              <2> copyfromrmodedisk:
  7640 00005C29 648A07              <2> 	mov al, [fs:edi]
  7641 00005C2C 8806                <2> 	mov [esi], al
  7642 00005C2E 47                  <2> 	inc edi
  7643 00005C2F 46                  <2> 	inc esi
  7644 00005C30 FECA                <2> 	dec dl
  7645 00005C32 80FA00              <2> 	cmp dl, 0
  7646 00005C35 75F2                <2> 	jne copyfromrmodedisk
  7647 00005C37 FEC9                <2> 	dec cl
  7648 00005C39 B200                <2> 	mov dl, 0
  7649 00005C3B 80F900              <2> 	cmp cl, 0
  7650 00005C3E 75E9                <2> 	jne copyfromrmodedisk
  7651 00005C40 66B83000            <2> 	mov ax, NEW_DATA_SEL
  7652 00005C44 8EE0                <2> 	mov fs, ax
  7653 00005C46 89F7                <2> 	mov edi, esi
  7654 00005C48 8B35[455D0000]      <2> 	mov esi, [oldesireal]
  7655 00005C4E 89DA                <2> 	mov edx, ebx
  7656 00005C50 8B1D[C45B0000]      <2> 	mov ebx, [sdaddress]
  7657 00005C56 C3                  <2> 	ret
  7658                              <2> 	
  7659                              <1> %else
  7660                              <1> 	%ifdef disk.protected
  7661                              <1> 		%include "source/drivers/disk/pata.asm"
  7662                              <1> 	%endif
  7663                              <1> %endif
  7664                              <1> %ifdef disk.none
  7665                              <1> loadfile:	xor edx, edx
  7666                              <1> 			cmp byte [edi], '&'
  7667                              <1> 			je .ret
  7668                              <1> 			mov edx, 404	;no files are found except &
  7669                              <1> 		.ret:
  7670                              <1> 			ret
  7671                              <1> %else
  7672                              <1> ;This loads files using the methods in the loaded driver
  7673                              <1> loadfile:	;loads a file with the name buffer's location in edi into location in esi
  7674                              <1> 			;returns with err code in edx and file end in edi
  7675 00005C57 803F00              <1> 	cmp byte [edi], 0
  7676 00005C5A 0F8448000000        <1> 	je near nofileload
  7677 00005C60 89FA                <1> 	mov edx, edi
  7678 00005C62 BB[42650300]        <1> 	mov ebx, diskfileindex
  7679                              <1> nextnamechar:
  7680 00005C67 8A07                <1> 	mov al, [edi]
  7681 00005C69 3C26                <1> 	cmp al, '&'
  7682 00005C6B 7440                <1> 	je nullfile
  7683 00005C6D 8A23                <1> 	mov ah, [ebx]
  7684 00005C6F 47                  <1> 	inc edi
  7685 00005C70 43                  <1> 	inc ebx
  7686 00005C71 88C1                <1> 	mov cl, al
  7687 00005C73 08E1                <1> 	or cl, ah
  7688 00005C75 80F900              <1> 	cmp cl, 0
  7689 00005C78 746E                <1> 	je equalfilenames
  7690 00005C7A 80F920              <1> 	cmp cl, ' '
  7691 00005C7D 7469                <1> 	je equalfilenames
  7692 00005C7F 3C2A                <1> 	cmp al, '*'
  7693 00005C81 742B                <1> 	je asteriskcheck
  7694 00005C83 80FC00              <1> 	cmp ah, 0
  7695 00005C86 7410                <1> 	je nextfilename
  7696 00005C88 3C00                <1> 	cmp al, 0
  7697 00005C8A 7404                <1> 	je getebxzero
  7698 00005C8C 38E0                <1> 	cmp al, ah
  7699 00005C8E 74D7                <1> 	je nextnamechar
  7700                              <1> getebxzero:
  7701 00005C90 8A23                <1> 	mov ah, [ebx]
  7702 00005C92 43                  <1> 	inc ebx
  7703 00005C93 80FC00              <1> 	cmp ah, 0
  7704 00005C96 75F8                <1> 	jne getebxzero
  7705                              <1> nextfilename:
  7706 00005C98 81C308000000        <1> 	add ebx, 8		;next descriptor
  7707 00005C9E 89D7                <1> 	mov edi, edx
  7708 00005CA0 81FB[68670300]      <1> 	cmp ebx, enddiskfileindex
  7709 00005CA6 72BF                <1> 	jb nextnamechar
  7710                              <1> nofileload:
  7711 00005CA8 BA94010000          <1> 	mov edx, 404	;indicate not found error
  7712                              <1> nullfile:
  7713 00005CAD C3                  <1> 	ret
  7714                              <1> asteriskcheck:
  7715 00005CAE 4B                  <1> 	dec ebx
  7716 00005CAF 8A07                <1> 	mov al, [edi]
  7717 00005CB1 3C2A                <1> 	cmp al, '*'
  7718 00005CB3 74F9                <1> 	je asteriskcheck ;remove multiple asterisks
  7719 00005CB5 3C20                <1> 	cmp al, ' '
  7720 00005CB7 7415                <1> 	je equalfilenames2
  7721 00005CB9 3C00                <1> 	cmp al, 0
  7722 00005CBB 7411                <1> 	je equalfilenames2
  7723                              <1> .lp:
  7724 00005CBD 8A23                <1> 	mov ah, [ebx]
  7725 00005CBF 80FC00              <1> 	cmp ah, 0
  7726 00005CC2 74D4                <1> 	je nextfilename
  7727 00005CC4 38E0                <1> 	cmp al, ah
  7728 00005CC6 749F                <1> 	je nextnamechar
  7729 00005CC8 43                  <1> 	inc ebx
  7730 00005CC9 E9EFFFFFFF          <1> 	jmp .lp
  7731                              <1> equalfilenames2:
  7732 00005CCE 81EB02000000        <1> 	sub ebx, 2
  7733                              <1> eqfilefind:
  7734 00005CD4 43                  <1> 	inc ebx
  7735 00005CD5 81FB[68670300]      <1> 	cmp ebx, enddiskfileindex
  7736 00005CDB 0F83C7FFFFFF        <1> 	jae near nofileload
  7737 00005CE1 8A03                <1> 	mov al, [ebx]
  7738 00005CE3 3C00                <1> 	cmp al, 0
  7739 00005CE5 75ED                <1> 	jne eqfilefind
  7740 00005CE7 43                  <1> 	inc ebx
  7741                              <1> equalfilenames:
  7742 00005CE8 8B4304              <1> 	mov eax, [ebx + 4] 	;put file size in eax
  7743 00005CEB 8B1B                <1> 	mov ebx, [ebx]		;put file beginning in ebx
  7744 00005CED 031D[EA620000]      <1> 	add ebx, [lbaad]	;add offset to solleros start
  7745 00005CF3 31C9                <1> 	xor ecx, ecx
  7746 00005CF5 88C1                <1> 	mov cl, al			;get excess number of sectors
  7747 00005CF7 C0E102              <1> 	shl cl, 2
  7748 00005CFA C0E902              <1> 	shr cl, 2			;cut off at 64
  7749 00005CFD 29C8                <1> 	sub eax, ecx		;get rid of excess sectors
  7750 00005CFF B500                <1> 	mov ch, 0			;drive 0
  7751 00005D01 C1E806              <1> 	shr eax, 6			;get number of 64 sector tracks
  7752                              <1> loaddiskfile:			;tracks in eax, excess sectors in cl, drive in ch, buffer in esi, address in ebx
  7753 00005D04 A3[495D0000]        <1> 	mov [filetracks], eax
  7754 00005D09 89F7                <1> 	mov edi, esi		;just in case cl is 0
  7755 00005D0B 89DA                <1> 	mov edx, ebx
  7756 00005D0D 80F900              <1> 	cmp cl, 0
  7757 00005D10 7405                <1> 	je copytracksforfile
  7758 00005D12 E885FEFFFF          <1> 	call diskr	;take care of excess sectors
  7759                              <1> copytracksforfile:
  7760 00005D17 A1[495D0000]        <1> 	mov eax, [filetracks]
  7761 00005D1C 3D00000000          <1> 	cmp eax, 0
  7762 00005D21 741C                <1> 	je donecopyfile
  7763 00005D23 48                  <1> 	dec eax
  7764 00005D24 A3[495D0000]        <1> 	mov [filetracks], eax
  7765 00005D29 89D3                <1> 	mov ebx, edx	;get end lba
  7766 00005D2B B140                <1> 	mov cl, 0x40 ;for compatability with BIOS it uses 64 instead of 128
  7767 00005D2D 8A2D[E9620000]      <1> 	mov ch, [DriveNumber]
  7768 00005D33 89FE                <1> 	mov esi, edi	;reset buffer
  7769 00005D35 E862FEFFFF          <1> 	call diskr
  7770 00005D3A E9D8FFFFFF          <1> 	jmp copytracksforfile
  7771                              <1> donecopyfile:
  7772 00005D3F BA00000000          <1> 	mov edx, 0	;no error
  7773 00005D44 C3                  <1> 	ret
  7774                              <1> 
  7775 00005D45 00000000            <1> oldesireal dd 0
  7776 00005D49 00000000            <1> filetracks dd 0
  7777 00005D4D 00                  <1> lbad1 db 0
  7778 00005D4E 00                  <1> lbad2 db 0
  7779 00005D4F 00                  <1> lbad3 db 0
  7780 00005D50 00                  <1> lbad4 db 0
  7781 00005D51 00                  <1> lbad5 db 0
  7782 00005D52 00                  <1> lbad6 db 0
  7783 00005D53 6400                <1> segments dw 100
  7784                              <1> %endif
  7785                                      %include "source/threads.asm"
  7786                              <1> %ifdef threads.included	
  7787                              <1> nwcmdst:
  7788 00005D55 31C0                <1> 	xor eax, eax
  7789 00005D57 BC[08770300]        <1> 	mov esp, stackend
  7790 00005D5C A2[1C5E0000]        <1> 	mov [threadson], al
  7791 00005D61 A3[1D5E0000]        <1> 	mov [currentthread], eax
  7792 00005D66 0504000000          <1> 	add eax, 4
  7793 00005D6B A3[185E0000]        <1> 	mov [lastthread], eax
  7794 00005D70 FB                  <1> 	sti
  7795 00005D71 E901CDFFFF          <1> 	jmp nwcmd
  7796                              <1> 
  7797                              <1> nomorethreadspace:
  7798 00005D76 BE[8C5D0000]        <1> 	mov esi, nmts
  7799 00005D7B E87CBEFFFF          <1> 	call print
  7800 00005D80 C605[1C5E0000]00    <1> 	mov byte [threadson], 0
  7801 00005D87 E9EBCCFFFF          <1> 	jmp nwcmd
  7802 00005D8C 546872656164204F76- <1> nmts	db "Thread Overflow",10,0
  7803 00005D95 6572666C6F770A00    <1>
  7804                              <1> 
  7805                              <1> nomorestackspace:
  7806 00005D9D BE[AC5D0000]        <1> 	mov esi, nmss
  7807 00005DA2 E855BEFFFF          <1> 	call print
  7808 00005DA7 E9A9FFFFFF          <1> 	jmp nwcmdst
  7809 00005DAC 537461636B204F7665- <1> nmss	db "Stack Overflow",10,0
  7810 00005DB5 72666C6F770A00      <1>
  7811                              <1> 	
  7812                              <1> threadswitch:
  7813 00005DBC FA                  <1> 	cli
  7814 00005DBD 60                  <1> 	pushad
  7815 00005DBE BF[25110400]        <1> 	mov edi, threadlist
  7816 00005DC3 A1[1D5E0000]        <1> 	mov eax, [currentthread]
  7817 00005DC8 40                  <1> 	inc eax
  7818 00005DC9 A3[1D5E0000]        <1> 	mov [currentthread], eax
  7819 00005DCE 6648                <1> 	dec ax
  7820 00005DD0 C1E002              <1> 	shl eax, 2
  7821 00005DD3 01C7                <1> 	add edi, eax
  7822 00005DD5 8927                <1> 	mov [edi], esp
  7823 00005DD7 81C704000000        <1> 	add edi, 4
  7824 00005DDD 81FF[25210400]      <1> 	cmp edi, threadlistend
  7825 00005DE3 0F830D000000        <1> 	jae near nookespthread
  7826 00005DE9 8B07                <1> 	mov eax, [edi]
  7827 00005DEB 3D00000000          <1> 	cmp eax, 0
  7828 00005DF0 0F8519000000        <1> 	jne near okespthread
  7829                              <1> nookespthread:
  7830 00005DF6 BF[25110400]        <1> 	mov edi, threadlist
  7831 00005DFB 31C0                <1> 	xor eax, eax
  7832 00005DFD A3[1D5E0000]        <1> 	mov [currentthread], eax
  7833 00005E02 8B07                <1> 	mov eax, [edi]
  7834 00005E04 3D00000000          <1> 	cmp eax, 0
  7835 00005E09 0F8446FFFFFF        <1> 	je near nwcmdst
  7836                              <1> okespthread:
  7837 00005E0F 89C4                <1> 	mov esp, eax
  7838 00005E11 B020                <1> 	mov al, 0x20
  7839 00005E13 E620                <1> 	out 0x20, al
  7840 00005E15 61                  <1> 	popad
  7841 00005E16 FB                  <1> 	sti
  7842 00005E17 CF                  <1> 	iret
  7843                              <1> 
  7844                              <1> %endif
  7845 00005E18 04000000            <1> 	lastthread dd 4
  7846 00005E1C 00                  <1> 	threadson db 0
  7847 00005E1D 00000000            <1> 	currentthread dd 0
  7848                                  %ifdef gui.included
  7849                                      %include "source/gui/gui.asm"
  7850                                  %endif
  7851                                  %ifdef network.included
  7852                                  	%include "source/network.asm"
  7853                              <1> network.init:
  7854                              <1> %ifdef rtl8139.included
  7855                              <1> 	%include "source/drivers/network/rtl8139.asm"
  7856                              <1> %endif
  7857                              <1> %ifdef rtl8169.included
  7858                              <1> 	%include "source/drivers/network/rtl8169.asm"
  7859                              <1> %endif
  7860                              <1> %ifdef ne2000.included
  7861                              <1> 	%include "source/drivers/network/ne2000.asm"
  7862                              <2> ne2000:
  7863 00005E21 E805000000          <2> 	call .init
  7864 00005E26 E93D030000          <2> 	jmp .end
  7865                              <2> 
  7866                              <2> ;	PAGE0			PAGE 1			PAGE 2
  7867                              <2> ;	READ	WRITE	READ	WRITE	READ	WRITE
  7868                              <2> ;0	CR		CR		CR		CR		CR		CR
  7869                              <2> ;1	CLDA0 	PSTART	PAR0	PAR0	PSTART	CLDA0
  7870                              <2> ;2	CLDA1	PSTOP	PAR1	PAR1	PSTOP	CLDA1
  7871                              <2> ;3	BNRY	BNRY	PAR2	PAR2	RNPP	RNPP
  7872                              <2> ;4	TSR		TPSR	PAR3	PAR3	TPSR	N/A
  7873                              <2> ;5	NCR		TBCR0	PAR4	PAR4	LNPP	LNPP
  7874                              <2> ;6	FIFO	TCBR1	PAR5	PAR5	ACU		ACU
  7875                              <2> ;7	ISR		ISR		CURR	CURR	ACL		ACL
  7876                              <2> ;8	CRDA0	RSAR0	MAR0	MAR0	N/A		N/A
  7877                              <2> ;9	CRDA1	RSAR1	MAR1	MAR1	N/A		N/A
  7878                              <2> ;A	N/A		RBCR0	MAR2	MAR2	N/A		N/A
  7879                              <2> ;B	N/A		RBCR1	MAR3	MAR3	N/A		N/A
  7880                              <2> ;C	RSR		RCR		MAR4	MAR4	RCR		N/A
  7881                              <2> ;D	CNTR0	TCR		MAR5	MAR5	TCR		N/A
  7882                              <2> ;E	CNTR1	DCR		MAR6	MAR6	DCR		N/A
  7883                              <2> ;F	CNTR2	IMR		MAR7	MAR7	IMR		N/A
  7884                              <2> .CR equ 0
  7885                              <2> 	.CR.STP	equ 1		;Stop
  7886                              <2> 	.CR.STA equ 2		;Start
  7887                              <2> 	.CR.TXP equ 4		;Transmit
  7888                              <2> 	.CR.RD0 equ 8		;Remote DMA 0
  7889                              <2> 	.CR.RD1 equ 0x10	;Remote DMA 1
  7890                              <2> 	.CR.RD2 equ 0x20	;Remote DMA 2
  7891                              <2> 	.CR.PS0 equ 0x40	;Page Select 0
  7892                              <2> 	.CR.PS1 equ 0x80	;Page Select 1
  7893                              <2> .PSTART equ 1
  7894                              <2> .PSTOP equ 2
  7895                              <2> .BNRY equ 3
  7896                              <2> .ISR equ 7
  7897                              <2> 	.ISR.PRX equ 1		;Packet Received
  7898                              <2> 	.ISR.PTX equ 2		;Packet Transmitted
  7899                              <2> 	.ISR.RXE equ 4		;Receive Error
  7900                              <2> 	.ISR.TXE equ 8		;Transmission Error
  7901                              <2> 	.ISR.OVW equ 0x10	;Overwrite
  7902                              <2> 	.ISR.CNT equ 0x20	;Counter Overflow
  7903                              <2> 	.ISR.RDC equ 0x40	;Remote Data Complete
  7904                              <2> 	.ISR.RST equ 0x80	;Reset status
  7905                              <2> .RSAR0 equ 8
  7906                              <2> .RSAR1 equ 9
  7907                              <2> .RBCR0 equ 0xA
  7908                              <2> .RBCR1 equ 0xB
  7909                              <2> .RCR equ 0xC
  7910                              <2> 	.RCR.SEP equ 1		;Save Errored Packets
  7911                              <2> 	.RCR.AR equ 2		;Accept Runt packet
  7912                              <2> 	.RCR.AB equ 4		;Accept Broadcast
  7913                              <2> 	.RCR.AM equ 8		;Accept Multicast
  7914                              <2> 	.RCR.PRO equ 0x10	;Promiscuous Physical
  7915                              <2> 	.RCR.MON equ 0x20	;Monitor Mode
  7916                              <2> .DCR equ 0xE
  7917                              <2> 	.DCR.WTS equ 1		;Word Transfer Select
  7918                              <2> 	.DCR.BOS equ 2		;Byte Order Select
  7919                              <2> 	.DCR.LAS equ 4		;Long Address Select
  7920                              <2> 	.DCR.LS equ 8		;Loopback Select
  7921                              <2> 	.DCR.AR equ 0x10	;Auto-initialize Remote
  7922                              <2> 	.DCR.FT0 equ 0x20	;FIFO Threshold Select 0
  7923                              <2> 	.DCR.FT1 equ 0x40	;FIFO Threshold Select 1
  7924                              <2> .ASIC equ 0x10
  7925                              <2> .RESET equ 0x1F
  7926                              <2> 
  7927                              <2> .init:
  7928 00005E2B BBFFFFFFFF          <2> 	mov ebx, 0xFFFFFFFF
  7929 00005E30 31C0                <2> 	xor eax, eax
  7930 00005E32 A2[FF580000]        <2> 	mov [pcifunction], al
  7931 00005E37 A2[FD580000]        <2> 	mov [pcibus], al
  7932 00005E3C A2[FE580000]        <2> 	mov [pcidevice], al
  7933 00005E41 B002                <2> 	mov al, 2 ;type code
  7934 00005E43 A2[94590000]        <2> 	mov [pcitype], al
  7935 00005E48 B8EC102980          <2> 	mov eax, 0x802910EC
  7936 00005E4D A3[02590000]        <2> 	mov [pcidevid], eax
  7937 00005E52 E8BFFAFFFF          <2> 	call getpciport
  7938 00005E57 81FBFFFFFFFF        <2> 	cmp ebx, 0xFFFFFFFF
  7939 00005E5D 7501                <2> 	jne .good0
  7940 00005E5F C3                  <2> 	ret
  7941                              <2> .good0:
  7942 00005E60 8915[2A610000]      <2> 	mov [.basenicaddr], edx
  7943 00005E66 89D1                <2> 	mov ecx, edx
  7944                              <2> .test:
  7945 00005E68 E854000000          <2> 	call .reset
  7946 00005E6D E87B000000          <2> 	call .stop
  7947 00005E72 89CA                <2> 	mov edx, ecx
  7948 00005E74 B9FF000000          <2> 	mov ecx, 0xFF
  7949 00005E79 E2FE                <2> 	loop $ ;wait for ~100 us
  7950 00005E7B 89D1                <2> 	mov ecx, edx
  7951 00005E7D EC                  <2> 	in al, dx
  7952 00005E7E 2427                <2> 	and al, (.CR.RD2 | .CR.TXP | .CR.STA | .CR.STP)
  7953 00005E80 3C21                <2> 	cmp al, (.CR.RD2 | .CR.STP)
  7954 00005E82 7410                <2> 	je .good1
  7955 00005E84 89CA                <2> 	mov edx, ecx
  7956 00005E86 81C207000000        <2> 	add edx, .ISR
  7957 00005E8C EC                  <2> 	in al, dx
  7958 00005E8D 2480                <2> 	and al, .ISR.RST
  7959 00005E8F 3C80                <2> 	cmp al, .ISR.RST
  7960 00005E91 7401                <2> 	je .good1
  7961 00005E93 C3                  <2> 	ret
  7962                              <2> .good1:
  7963 00005E94 E8ECD0FFFF          <2> call showhex	;for debugging, please remove
  7964 00005E99 E85B000000          <2> 	call .setup
  7965 00005E9E E86E030000          <2> call showmac
  7966 00005EA3 BE[2F610000]        <2> mov esi, .name
  7967 00005EA8 E84FBDFFFF          <2> call print
  7968 00005EAD BE[37610000]        <2> mov esi, .initmsg
  7969 00005EB2 E845BDFFFF          <2> call print
  7970 00005EB7 C605[2E610000]01    <2> 	mov byte [.nicconfig], 1
  7971 00005EBE 31DB                <2> 	xor ebx, ebx
  7972 00005EC0 C3                  <2> 	ret
  7973                              <2> .reset:
  7974 00005EC1 8B15[2A610000]      <2> 	mov edx, [.basenicaddr]
  7975 00005EC7 81C21F000000        <2> 	add edx, .RESET
  7976 00005ECD EC                  <2> 	in al, dx
  7977 00005ECE EE                  <2> 	out dx, al ;write its contents to itself
  7978 00005ECF C3                  <2> 	ret
  7979                              <2> .page:
  7980 00005ED0 66C1E00E            <2> 	shl ax, 14
  7981 00005ED4 8B15[2A610000]      <2> 	mov edx, [.basenicaddr]
  7982 00005EDA EC                  <2> 	in al, dx
  7983 00005EDB 243F                <2> 	and al, 00111111b
  7984 00005EDD 08E0                <2> 	or al, ah
  7985 00005EDF EE                  <2> 	out dx, al
  7986 00005EE0 C3                  <2> 	ret
  7987                              <2> .start:
  7988 00005EE1 8B15[2A610000]      <2> 	mov edx, [.basenicaddr]
  7989 00005EE7 B020                <2> 	mov al, .CR.RD2
  7990 00005EE9 B002                <2> 	mov al, .CR.STA
  7991 00005EEB EE                  <2> 	out dx, al
  7992 00005EEC C3                  <2> 	ret
  7993                              <2> .stop:
  7994 00005EED 8B15[2A610000]      <2> 	mov edx, [.basenicaddr]
  7995 00005EF3 B020                <2> 	mov al, .CR.RD2
  7996 00005EF5 0C01                <2> 	or al, .CR.STP
  7997 00005EF7 EE                  <2> 	out dx, al
  7998 00005EF8 C3                  <2> 	ret
  7999                              <2> .setup:
  8000 00005EF9 E8EFFFFFFF          <2> 	call .stop
  8001 00005EFE 8B15[2A610000]      <2> 	mov edx, [.basenicaddr]
  8002 00005F04 81C20E000000        <2> 	add edx, .DCR
  8003 00005F0A B040                <2> 	mov al, .DCR.FT1
  8004 00005F0C 0C01                <2> 	or al, .DCR.WTS
  8005 00005F0E 0C08                <2> 	or al, .DCR.LS
  8006 00005F10 EE                  <2> 	out dx, al ;Set FIFO threshold, byte order, word-wide DMA
  8007 00005F11 E8B9000000          <2> 	call .getmac
  8008 00005F16 E8D2FFFFFF          <2> 	call .stop
  8009 00005F1B 30C0                <2> 	xor al, al
  8010 00005F1D 8B15[2A610000]      <2> 	mov edx, [.basenicaddr]
  8011 00005F23 81C20A000000        <2> 	add edx, .RBCR0
  8012 00005F29 EE                  <2> 	out dx, al
  8013 00005F2A 6642                <2> 	inc dx
  8014 00005F2C EE                  <2> 	out dx, al ;Clear byte count
  8015 00005F2D B800400000          <2> 	mov eax, 16*1024
  8016 00005F32 A3[4A610000]        <2> 	mov [.ringstart], eax
  8017 00005F37 C1E808              <2> 	shr eax, 8
  8018 00005F3A 66A3[46610000]      <2> 	mov [.pagestart], ax
  8019 00005F40 0534000000          <2> 	add eax, 64-2*6
  8020 00005F45 A3[48610000]        <2> 	mov [.pageend], eax
  8021 00005F4A C1E008              <2> 	shl eax, 8
  8022 00005F4D 66A3[4E610000]      <2> 	mov [.ringend], ax ;set page and ring starts and ends
  8023 00005F53 8B15[2A610000]      <2> 	mov edx, [.basenicaddr]
  8024 00005F59 81C201000000        <2> 	add edx, .PSTART
  8025 00005F5F A0[46610000]        <2> 	mov al, [.pagestart]
  8026 00005F64 EE                  <2> 	out dx, al
  8027 00005F65 A0[48610000]        <2> 	mov al, [.pageend]
  8028 00005F6A 6642                <2> 	inc dx
  8029 00005F6C EE                  <2> 	out dx, al
  8030 00005F6D A0[46610000]        <2> 	mov al, [.pagestart]
  8031 00005F72 6642                <2> 	inc dx
  8032 00005F74 EE                  <2> 	out dx, al
  8033 00005F75 E873FFFFFF          <2> 	call .stop
  8034                              <2> ;INSERT INTERRUPT ENABLE HERE
  8035 00005F7A B001                <2> 	mov al, 1
  8036 00005F7C E84FFFFFFF          <2> 	call .page
  8037 00005F81 8B15[2A610000]      <2> 	mov edx, [.basenicaddr]
  8038 00005F87 BF[58610000]        <2> 	mov edi, .rom
  8039                              <2> .copymactocard:
  8040 00005F8C 42                  <2> 	inc edx
  8041 00005F8D 6E                  <2> 	outsb
  8042 00005F8E 81C702000000        <2> 	add edi, 2
  8043 00005F94 81FA06000000        <2> 	cmp edx, 6
  8044 00005F9A 76F0                <2> 	jbe .copymactocard
  8045 00005F9C 8B15[2A610000]      <2> 	mov edx, [.basenicaddr]
  8046 00005FA2 81C207000000        <2> 	add edx, 7
  8047 00005FA8 A0[46610000]        <2> 	mov al, [.pagestart]
  8048 00005FAD FEC0                <2> 	inc al
  8049 00005FAF EE                  <2> 	out dx, al ;set page in CURR register
  8050                              <2> ;INSERT MULTICAST INIT HERE
  8051 00005FB0 E838FFFFFF          <2> 	call .stop
  8052 00005FB5 8B15[2A610000]      <2> 	mov edx, [.basenicaddr]
  8053 00005FBB 81C20C000000        <2> 	add edx, .RCR
  8054 00005FC1 B004                <2> 	mov al, .RCR.AB
  8055 00005FC3 EE                  <2> 	out dx, al ;accept broadcast
  8056 00005FC4 6642                <2> 	inc dx
  8057 00005FC6 30C0                <2> 	xor al, al
  8058 00005FC8 EE                  <2> 	out dx, al ;stop loopback
  8059 00005FC9 E813FFFFFF          <2> 	call .start
  8060 00005FCE C3                  <2> 	ret
  8061                              <2> .getmac:
  8062 00005FCF 8B15[2A610000]      <2> 	mov edx, [.basenicaddr]
  8063 00005FD5 B020                <2> 	mov al, 0x20
  8064 00005FD7 0C02                <2> 	or al, 2
  8065 00005FD9 EE                  <2> 	out dx, al	;set STA and RD2 bits
  8066 00005FDA 6681C20A00          <2> 	add dx, .RBCR0
  8067 00005FDF B010                <2> 	mov al, 16
  8068 00005FE1 EE                  <2> 	out dx, al
  8069 00005FE2 6642                <2> 	inc dx
  8070 00005FE4 30C0                <2> 	xor al, al
  8071 00005FE6 EE                  <2> 	out dx, al
  8072 00005FE7 8B15[2A610000]      <2> 	mov edx, [.basenicaddr]
  8073 00005FED 6681C20800          <2> 	add dx, .RSAR0
  8074 00005FF2 EE                  <2> 	out dx, al
  8075 00005FF3 6642                <2> 	inc dx
  8076 00005FF5 EE                  <2> 	out dx, al
  8077 00005FF6 668B15[2A610000]    <2> 	mov dx, [.basenicaddr]
  8078 00005FFD B008                <2> 	mov al, 8
  8079 00005FFF 0C02                <2> 	or al, 2
  8080 00006001 EE                  <2> 	out dx, al
  8081 00006002 668B15[2A610000]    <2> 	mov dx, [.basenicaddr]
  8082 00006009 6681C21000          <2> 	add dx, .ASIC
  8083 0000600E B908000000          <2> 	mov ecx, 8
  8084 00006013 BF[58610000]        <2> 	mov edi, .rom
  8085 00006018 F3666D              <2> 	rep insw
  8086                              <2> .copymac:
  8087 0000601B BF[58610000]        <2> 	mov edi, .rom
  8088 00006020 BE[52610000]        <2> 	mov esi, .mac
  8089 00006025 B906000000          <2> 	mov ecx, 6
  8090                              <2> .lpmac:
  8091 0000602A 8A07                <2> 	mov al, [edi]
  8092 0000602C 8806                <2> 	mov [esi], al
  8093 0000602E 81C702000000        <2> 	add edi, 2
  8094 00006034 46                  <2> 	inc esi
  8095 00006035 E2F3                <2> 	loop .lpmac
  8096 00006037 B9[52610000]        <2> 	mov ecx, .mac
  8097 0000603C C3                  <2> 	ret
  8098                              <2> .sendpacket:
  8099 0000603D 803D[2E610000]00    <2> 	cmp byte [.nicconfig], 0
  8100 00006044 7512                <2> 	jne .sendit
  8101 00006046 56                  <2> 	push esi
  8102 00006047 57                  <2> 	push edi
  8103 00006048 E8DEFDFFFF          <2> 	call .init
  8104 0000604D 5F                  <2> 	pop edi
  8105 0000604E 5E                  <2> 	pop esi
  8106 0000604F 81FB00000000        <2> 	cmp ebx, 0
  8107 00006055 7401                <2> 	je .sendit
  8108 00006057 C3                  <2> 	ret
  8109                              <2> .sendit: ;packet start in edi, end in esi
  8110 00006058 87F7                <2> 	xchg esi, edi ;this helps with the outsw
  8111                              <2> 	;now the packet start is in esi, end in edi
  8112 0000605A 8B0D[52610000]      <2> 	mov ecx, [.mac]
  8113 00006060 894E06              <2> 	mov [esi + 6], ecx
  8114 00006063 668B0D[56610000]    <2> 	mov cx, [.mac + 4]
  8115 0000606A 66894E0A            <2> 	mov [esi + 10], cx	;copy the correct mac
  8116 0000606E 8B15[2A610000]      <2> 	mov edx, [.basenicaddr]
  8117 00006074 B020                <2> 	mov al, .CR.RD2
  8118 00006076 0C02                <2> 	or al, .CR.STA
  8119 00006078 EE                  <2> 	out dx, al ;set RD2 and STA
  8120 00006079 81C207000000        <2> 	add edx, .ISR ; ISR
  8121 0000607F B040                <2> 	mov al, .ISR.RDC
  8122 00006081 EE                  <2> 	out dx, al ;set RDC flag
  8123 00006082 8B15[2A610000]      <2> 	mov edx, [.basenicaddr]
  8124 00006088 6681C20A00          <2> 	add dx, .RBCR0
  8125 0000608D 89F8                <2> 	mov eax, edi
  8126 0000608F 29F0                <2> 	sub eax, esi
  8127 00006091 BB01000000          <2> 	mov ebx, 1
  8128 00006096 21C3                <2> 	and ebx, eax
  8129 00006098 81FB01000000        <2> 	cmp ebx, 1
  8130 0000609E 7501                <2> 	jne .nofixword
  8131 000060A0 40                  <2> 	inc eax
  8132                              <2> .nofixword:
  8133 000060A1 89C1                <2> 	mov ecx, eax ;save length in ecx
  8134 000060A3 EE                  <2> 	out dx, al
  8135 000060A4 86C4                <2> 	xchg al, ah
  8136 000060A6 6642                <2> 	inc dx
  8137 000060A8 EE                  <2> 	out dx, al ;send size
  8138 000060A9 8B15[2A610000]      <2> 	mov edx, [.basenicaddr]
  8139 000060AF 6681C20800          <2> 	add dx, .RSAR0
  8140 000060B4 66A1[46610000]      <2> 	mov ax, [.pagestart]
  8141 000060BA C1E008              <2> 	shl eax, 8
  8142 000060BD EE                  <2> 	out dx, al
  8143 000060BE 86C4                <2> 	xchg al, ah
  8144 000060C0 6642                <2> 	inc dx
  8145 000060C2 EE                  <2> 	out dx, al ;send address in NIC memory
  8146 000060C3 8B15[2A610000]      <2> 	mov edx, [.basenicaddr]
  8147 000060C9 B010                <2> 	mov al, .CR.RD1
  8148 000060CB 0C02                <2> 	or al, .CR.STA
  8149 000060CD EE                  <2> 	out dx, al ;set RD and STA
  8150 000060CE 89CB                <2> 	mov ebx, ecx ;save length in ebx
  8151 000060D0 D1E9                <2> 	shr ecx, 1
  8152 000060D2 8B15[2A610000]      <2> 	mov edx, [.basenicaddr]
  8153 000060D8 6681C21000          <2> 	add dx, 0x10
  8154 000060DD F3666F              <2> 	rep outsw ;Send the packet data
  8155 000060E0 8B15[2A610000]      <2> 	mov edx, [.basenicaddr]
  8156 000060E6 6681C20700          <2> 	add dx, .ISR
  8157                              <2> .chkcopylp:
  8158 000060EB B440                <2> 	mov ah, .ISR.RDC
  8159 000060ED EC                  <2> 	in al, dx
  8160 000060EE 20C4                <2> 	and ah, al
  8161 000060F0 80FC40              <2> 	cmp ah, 0x40
  8162 000060F3 75F6                <2> 	jne .chkcopylp	
  8163 000060F5 8B15[2A610000]      <2> 	mov edx, [.basenicaddr]
  8164 000060FB 6681C20400          <2> 	add dx, 4
  8165 00006100 A0[46610000]        <2> 	mov al, [.pagestart]
  8166 00006105 EE                  <2> 	out dx, al ;send start address in pages
  8167 00006106 8B15[2A610000]      <2> 	mov edx, [.basenicaddr]
  8168 0000610C 81C205000000        <2> 	add edx, 0x5
  8169 00006112 89D8                <2> 	mov eax, ebx
  8170 00006114 EE                  <2> 	out dx, al
  8171 00006115 86C4                <2> 	xchg al, ah
  8172 00006117 6642                <2> 	inc dx
  8173 00006119 EE                  <2> 	out dx, al ;send length
  8174 0000611A 8B15[2A610000]      <2> 	mov edx, [.basenicaddr]
  8175 00006120 B020                <2> 	mov al, 0x20
  8176 00006122 0C04                <2> 	or al, 4
  8177 00006124 0C02                <2> 	or al, 2
  8178 00006126 EE                  <2> 	out dx, al ;set RD2, TXP, and STA
  8179 00006127 31DB                <2> 	xor ebx, ebx
  8180 00006129 C3                  <2> 	ret
  8181 0000612A 00000000            <2> .basenicaddr dd 0
  8182 0000612E 00                  <2> .nicconfig db 0
  8183 0000612F 4E45323030302000    <2> .name db "NE2000 ",0
  8184 00006137 496E697469616C697A- <2> .initmsg db "Initialized.",10,0
  8185 00006140 65642E0A00          <2>
  8186 00006145 90                  <2> align 2, nop
  8187 00006146 0000                <2> .pagestart dw 0
  8188 00006148 0000                <2> .pageend dw 0
  8189 0000614A 00000000            <2> .ringstart dd 0
  8190 0000614E 00000000            <2> .ringend dd 0
  8191 00006152 000000000000        <2> .mac db 0,0,0,0,0,0
  8192 00006158 00<rept>            <2> .rom times 16 db 0
  8193                              <2> 
  8194                              <2> .end:
  8195                              <1> %endif
  8196                              <1> %ifdef i8254x.included
  8197                              <1> 	%include "source/drivers/network/i8254x.asm"
  8198                              <1> %endif
  8199 00006168 C3                  <1> 	ret
  8200                              <1> 
  8201                              <1> sendpacket: ;packet start in edi, end in esi
  8202                              <1> 	%ifdef rtl8139.included
  8203                              <1> 		push edi
  8204                              <1> 		push esi
  8205                              <1> 		call rtl8139.sendpacket
  8206                              <1> 		pop esi
  8207                              <1> 		pop edi
  8208                              <1> 	%endif
  8209                              <1> 	%ifdef rtl8169.included
  8210                              <1> 		push edi
  8211                              <1> 		push esi
  8212                              <1> 		call rtl8169.sendpacket
  8213                              <1> 		pop esi
  8214                              <1> 		pop edi
  8215                              <1> 	%endif
  8216                              <1> 	%ifdef ne2000.included
  8217 00006169 57                  <1> 		push edi
  8218 0000616A 56                  <1> 		push esi
  8219 0000616B E8CDFEFFFF          <1> 		call ne2000.sendpacket
  8220 00006170 5E                  <1> 		pop esi
  8221 00006171 5F                  <1> 		pop edi
  8222                              <1> 	%endif
  8223                              <1> 	%ifdef i8254x.included
  8224                              <1> 		call i8254x.sendpacket
  8225                              <1> 	%endif
  8226 00006172 C3                  <1> 	ret
  8227                              <1> 
  8228                              <1> getchecksum: ;start in edi, end in esi, checksum put in ecx
  8229 00006173 31C0                <1> 	xor eax, eax
  8230 00006175 31DB                <1> 	xor ebx, ebx
  8231 00006177 31C9                <1> 	xor ecx, ecx
  8232                              <1> .lp:
  8233 00006179 8A07                <1> 	mov al, [edi]
  8234 0000617B 8A6701              <1> 	mov ah, [edi + 1]
  8235 0000617E 01C3                <1> 	add ebx, eax
  8236 00006180 81C702000000        <1> 	add edi, 2
  8237 00006186 39F7                <1> 	cmp edi, esi
  8238 00006188 72EF                <1> 	jb .lp
  8239 0000618A 66B9FFFF            <1> 	mov cx, 0xFFFF
  8240 0000618E 6689D8              <1> 	mov ax, bx
  8241 00006191 C1EB10              <1> 	shr ebx, 16
  8242 00006194 6601D8              <1> 	add ax, bx
  8243 00006197 6629C1              <1> 	sub cx, ax
  8244 0000619A C3                  <1> 	ret
  8245                              <1> 	
  8246                              <1> strtoip:	;string in esi with format X.X.X.X converted to number in ecx
  8247 0000619B 31DB                <1> 	xor ebx, ebx
  8248 0000619D 31C9                <1> 	xor ecx, ecx
  8249 0000619F 31D2                <1> 	xor edx, edx
  8250                              <1> .mlp:
  8251 000061A1 89F7                <1> 	mov edi, esi
  8252 000061A3 4F                  <1> 	dec edi
  8253                              <1> .lp:
  8254 000061A4 47                  <1> 	inc edi
  8255 000061A5 8A07                <1> 	mov al, [edi]
  8256 000061A7 3C20                <1> 	cmp al, " "
  8257 000061A9 7408                <1> 	je .dnlp
  8258 000061AB 3C00                <1> 	cmp al, 0
  8259 000061AD 7404                <1> 	je .dnlp
  8260 000061AF 3C2E                <1> 	cmp al, "."
  8261 000061B1 75F1                <1> 	jne .lp
  8262                              <1> .dnlp:
  8263 000061B3 30C0                <1> 	xor al, al
  8264 000061B5 8807                <1> 	mov [edi], al
  8265 000061B7 53                  <1> 	push ebx
  8266 000061B8 56                  <1> 	push esi
  8267 000061B9 57                  <1> 	push edi
  8268 000061BA 31FF                <1> 	xor edi, edi
  8269 000061BC E85DCFFFFF          <1> 	call cnvrttxt
  8270 000061C1 5E                  <1> 	pop esi
  8271 000061C2 5F                  <1> 	pop edi ;i intentionally switch them
  8272 000061C3 5B                  <1> 	pop ebx
  8273 000061C4 46                  <1> 	inc esi
  8274 000061C5 BF[DD610000]        <1> 	mov edi, ipstr
  8275 000061CA 880C1F              <1> 	mov [edi + ebx], cl
  8276 000061CD 43                  <1> 	inc ebx
  8277 000061CE 81FB04000000        <1> 	cmp ebx, 4
  8278 000061D4 72CB                <1> 	jb .mlp
  8279 000061D6 8B0D[DD610000]      <1> 	mov ecx, [ipstr]
  8280 000061DC C3                  <1> 	ret
  8281 000061DD 00000000            <1> ipstr dd 0
  8282                              <1> showip: 	;put the ip address in ecx
  8283 000061E1 89C8                <1> 	mov eax, ecx
  8284 000061E3 30DB                <1> 	xor bl, bl
  8285                              <1> .lp:
  8286 000061E5 31C9                <1> 	xor ecx, ecx
  8287 000061E7 88C1                <1> 	mov cl, al
  8288 000061E9 E852CEFFFF          <1> 	call showdec
  8289 000061EE C1E808              <1> 	shr eax, 8
  8290 000061F1 FEC3                <1> 	inc bl
  8291 000061F3 80FB04              <1> 	cmp bl, 4
  8292 000061F6 7315                <1> 	jae .done
  8293 000061F8 50                  <1> 	push eax
  8294 000061F9 6653                <1> 	push bx
  8295 000061FB BE[0E620000]        <1> 	mov esi, .dot
  8296 00006200 E8F7B9FFFF          <1> 	call print
  8297 00006205 665B                <1> 	pop bx
  8298 00006207 58                  <1> 	pop eax
  8299 00006208 E9D8FFFFFF          <1> 	jmp .lp
  8300                              <1> .done:
  8301 0000620D C3                  <1> 	ret
  8302 0000620E 082E00              <1> .dot db 8,".",0
  8303                              <1> showmac:	;mac begins in [ecx]
  8304 00006211 BE[61620000]        <1> 	mov esi, macprint
  8305 00006216 89CF                <1> 	mov edi, ecx
  8306 00006218 81C106000000        <1> 	add ecx, 6
  8307                              <1> showmacloop:
  8308 0000621E 8A07                <1> 	mov al, [edi]
  8309 00006220 8A27                <1> 	mov ah, [edi]
  8310 00006222 C0E804              <1> 	shr al, 4
  8311 00006225 C0E404              <1> 	shl ah, 4
  8312 00006228 C0EC04              <1> 	shr ah, 4
  8313 0000622B 0430                <1> 	add al, 48
  8314 0000622D 3C39                <1> 	cmp al, "9"
  8315 0000622F 7606                <1> 	jbe .goodal
  8316 00006231 2C30                <1> 	sub al, 48
  8317 00006233 2C0A                <1> 	sub al, 0xA
  8318 00006235 0441                <1> 	add al, "A"
  8319                              <1> .goodal:
  8320 00006237 80C430              <1> 	add ah, 48
  8321 0000623A 80FC39              <1> 	cmp ah, "9"
  8322 0000623D 7609                <1> 	jbe .goodah
  8323 0000623F 80EC30              <1> 	sub ah, 48
  8324 00006242 80EC0A              <1> 	sub ah, 0xA
  8325 00006245 80C441              <1> 	add ah, "A"
  8326                              <1> .goodah:
  8327 00006248 668906              <1> 	mov [esi], ax
  8328 0000624B 81C603000000        <1> 	add esi, 3
  8329 00006251 47                  <1> 	inc edi
  8330 00006252 39CF                <1> 	cmp edi, ecx
  8331 00006254 72C8                <1> 	jb showmacloop
  8332 00006256 BE[61620000]        <1> 	mov esi, macprint
  8333 0000625B E89CB9FFFF          <1> 	call print
  8334 00006260 C3                  <1> 	ret
  8335                              <1> 	
  8336 00006261 30303A30303A30303A- <1> macprint db "00:00:00:00:00:00 ",0
  8337 0000626A 30303A30303A303020- <1>
  8338 00006273 00                  <1>
  8339 00006274 00000000            <1> ethernetend dw 0,0
  8340 00006278 C0A80002            <1> sysip db 192,168,0,2
  8341 0000627C 000000000000        <1> sysmac	db 0,0,0,0,0,0		;my mac address
  8342                                  %endif
  8343                                      %include "source/data.asm"
  8344 00006282 626F6F742E736800    <1> 	bootfilename db "boot.sh",0
  8345 0000628A 73687573683A2000    <1> 	notfound1 db "shush: ",0
  8346 00006292 3A206E6F7420666F75- <1> 	notfound2 db  ": not found",10,0
  8347 0000629B 6E640A00            <1>
  8348 0000629F 757365726E616D653A- <1> 	userask db "username:",0
  8349 000062A8 00                  <1>
  8350 000062A9 70617373776F72643A- <1> 	pwdask	db	"password:",0
  8351 000062B2 00                  <1>
  8352 000062B3 40                  <1> 	computer db "@"
  8353                              <1> %ifdef io.serial
  8354                              <1> 	computername	db	"SollerOS.",io.serial," ",0
  8355                              <1> %else
  8356 000062B4 536F6C6C65724F5320- <1> 	computername	db	"SollerOS ",0
  8357 000062BD 00                  <1>
  8358                              <1> %endif
  8359 000062BE 5D242000            <1> 	endprompt db "]$ ",0
  8360 000062C2 0D                  <1> 	crlf 	db  13
  8361 000062C3 0A00                <1> 	line	db	10,0
  8362                              <1> 	userlst:
  8363 000062C5 726F6F7400          <1> 			db "root",0
  8364 000062CA 617765736F6D65706F- <1> 			db "awesomepower",0
  8365 000062D3 77657200            <1>
  8366 000062D7 7573657200          <1> 			db "user",0
  8367 000062DC 70617373776F726400  <1> 			db "password",0
  8368 000062E5 6E00                <1> 			db "n",0	;;abuse for quick entry-a quick double n followed by a double enter will get you in
  8369 000062E7 00                  <1> 			db 0
  8370                              <1> 	userlstend:
  8371                              <1> 	
  8372 000062E8 00                  <1> 	guion db 0
  8373 000062E9 00                  <1> 	DriveNumber db 0
  8374 000062EA 00000000            <1> 	lbaad dd 0
  8375 000062EE 0000000000000000    <1> 	initialtsc dd 0,0
  8376 000062F6 0000000000000000    <1> 	lasttsc dd 0,0
  8377 000062FE 00<rept>            <1> 	memlistbuf times 576 db 0
  8378 0000653E 00000000            <1> 	memlistend: dd 0
  8379                              <1> %ifdef io.serial
  8380                              <1> %else
  8381 00006542 <incbin>            <1> fonts:	incbin "source/fonts/fonts.pak"
  8382                              <1> fontend:
  8383                              <1> %endif
  8384                              <1> osend:	;this is the end of the operating system's space on disk
  8385                                  %ifdef disk.none
  8386                                  	diskfileindex:
  8387                                  	enddiskfileindex:
  8388                                  	align 512, db 0
  8389                                      %include "source/bss.asm"
  8390                                  %else
  8391                                      %include "build/fileindex.asm"
  8392                              <1> diskfileindex:
  8393 00036542 617267746573742E65- <1> db "argtest.elf",0
  8394 0003654B 6C6600              <1>
  8395 0003654E B4010000            <1> dd (f0-$$)/512
  8396 00036552 46000000            <1> dd (f1-f0)/512
  8397 00036556 6261636B67726F756E- <1> db "background.bmp",0
  8398 0003655F 642E626D7000        <1>
  8399 00036565 FA010000            <1> dd (f1-$$)/512
  8400 00036569 01140000            <1> dd (f2-f1)/512
  8401 0003656D 626F6F742E736800    <1> db "boot.sh",0
  8402 00036575 FB150000            <1> dd (f2-$$)/512
  8403 00036579 01000000            <1> dd (f3-f2)/512
  8404 0003657D 63686172746573742E- <1> db "chartest.elf",0
  8405 00036586 656C6600            <1>
  8406 0003658A FC150000            <1> dd (f3-$$)/512
  8407 0003658E 4E000000            <1> dd (f4-f3)/512
  8408 00036592 646F73746573742E63- <1> db "dostest.com",0
  8409 0003659B 6F6D00              <1>
  8410 0003659E 4A160000            <1> dd (f4-$$)/512
  8411 000365A2 01000000            <1> dd (f5-f4)/512
  8412 000365A6 6578656300          <1> db "exec",0
  8413 000365AB 4B160000            <1> dd (f5-$$)/512
  8414 000365AF 01000000            <1> dd (f6-f5)/512
  8415 000365B3 66696E616C636F756E- <1> db "finalcount.sn",0
  8416 000365BC 742E736E00          <1>
  8417 000365C1 4C160000            <1> dd (f6-$$)/512
  8418 000365C5 01000000            <1> dd (f7-f6)/512
  8419 000365C9 666C6F7070792E7478- <1> db "floppy.txt",0
  8420 000365D2 7400                <1>
  8421 000365D4 4D160000            <1> dd (f7-$$)/512
  8422 000365D8 0A000000            <1> dd (f8-f7)/512
  8423 000365DC 666F726B00          <1> db "fork",0
  8424 000365E1 57160000            <1> dd (f8-$$)/512
  8425 000365E5 01000000            <1> dd (f9-f8)/512
  8426 000365E9 677261766974792E65- <1> db "gravity.elf",0
  8427 000365F2 6C6600              <1>
  8428 000365F5 58160000            <1> dd (f9-$$)/512
  8429 000365F9 4F000000            <1> dd (f10-f9)/512
  8430 000365FD 6775697465737400    <1> db "guitest",0
  8431 00036605 A7160000            <1> dd (f10-$$)/512
  8432 00036609 03000000            <1> dd (f11-f10)/512
  8433 0003660D 68656C6C6F776F726C- <1> db "helloworld.elf",0
  8434 00036616 642E656C6600        <1>
  8435 0003661C AA160000            <1> dd (f11-$$)/512
  8436 00036620 86000000            <1> dd (f12-f11)/512
  8437 00036624 696E7400            <1> db "int",0
  8438 00036628 30170000            <1> dd (f12-$$)/512
  8439 0003662C 01000000            <1> dd (f13-f12)/512
  8440 00036630 6C6F7374776F6F6473- <1> db "lostwoods.sn",0
  8441 00036639 2E736E00            <1>
  8442 0003663D 31170000            <1> dd (f13-$$)/512
  8443 00036641 01000000            <1> dd (f14-f13)/512
  8444 00036645 6D6172696F2E736E00  <1> db "mario.sn",0
  8445 0003664E 32170000            <1> dd (f14-$$)/512
  8446 00036652 01000000            <1> dd (f15-f14)/512
  8447 00036656 6D6F6D656E742E7761- <1> db "moment.wav",0
  8448 0003665F 7600                <1>
  8449 00036661 33170000            <1> dd (f15-$$)/512
  8450 00036665 2C050000            <1> dd (f16-f15)/512
  8451 00036669 70692E656C6600      <1> db "pi.elf",0
  8452 00036670 5F1C0000            <1> dd (f16-$$)/512
  8453 00036674 4E000000            <1> dd (f17-f16)/512
  8454 00036678 72617974726163652E- <1> db "raytrace.elf",0
  8455 00036681 656C6600            <1>
  8456 00036685 AD1C0000            <1> dd (f17-$$)/512
  8457 00036689 1E000000            <1> dd (f18-f17)/512
  8458 0003668D 736F6C6C65726F732E- <1> db "solleros.bmp",0
  8459 00036696 626D7000            <1>
  8460 0003669A CB1C0000            <1> dd (f18-$$)/512
  8461 0003669E B0020000            <1> dd (f19-f18)/512
  8462 000366A2 736F6C6C65726F732E- <1> db "solleros.txt",0
  8463 000366AB 74787400            <1>
  8464 000366AF 7B1F0000            <1> dd (f19-$$)/512
  8465 000366B3 01000000            <1> dd (f20-f19)/512
  8466 000366B7 736F6E676F74696D65- <1> db "songotime.sn",0
  8467 000366C0 2E736E00            <1>
  8468 000366C4 7C1F0000            <1> dd (f20-$$)/512
  8469 000366C8 01000000            <1> dd (f21-f20)/512
  8470 000366CC 73736500            <1> db "sse",0
  8471 000366D0 7D1F0000            <1> dd (f21-$$)/512
  8472 000366D4 02000000            <1> dd (f22-f21)/512
  8473 000366D8 737464696F74657374- <1> db "stdiotest.elf",0
  8474 000366E1 2E656C6600          <1>
  8475 000366E6 7F1F0000            <1> dd (f22-$$)/512
  8476 000366EA 4E000000            <1> dd (f23-f22)/512
  8477 000366EE 74656C7900          <1> db "tely",0
  8478 000366F3 CD1F0000            <1> dd (f23-$$)/512
  8479 000366F7 01000000            <1> dd (f24-f23)/512
  8480 000366FB 74696D65746573742E- <1> db "timetest.elf",0
  8481 00036704 656C6600            <1>
  8482 00036708 CE1F0000            <1> dd (f24-$$)/512
  8483 0003670C 46000000            <1> dd (f25-f24)/512
  8484 00036710 7475746F7269616C2E- <1> db "tutorial.sh",0
  8485 00036719 736800              <1>
  8486 0003671C 14200000            <1> dd (f25-$$)/512
  8487 00036720 03000000            <1> dd (f26-f25)/512
  8488 00036724 756E667300          <1> db "unfs",0
  8489 00036729 17200000            <1> dd (f26-$$)/512
  8490 0003672D 02000000            <1> dd (f27-f26)/512
  8491 00036731 7574662D382E747874- <1> db "utf-8.txt",0
  8492 0003673A 00                  <1>
  8493 0003673B 19200000            <1> dd (f27-$$)/512
  8494 0003673F 02000000            <1> dd (f28-f27)/512
  8495 00036743 766963746F72792E77- <1> db "victory.wav",0
  8496 0003674C 617600              <1>
  8497 0003674F 1B200000            <1> dd (f28-$$)/512
  8498 00036753 16000000            <1> dd (f29-f28)/512
  8499 00036757 5F696D672E62696E00  <1> db "_img.bin",0
  8500 00036760 31200000            <1> dd (f29-$$)/512
  8501 00036764 D7020000            <1> dd (f30-f29)/512
  8502                              <1> enddiskfileindex:
  8503                              <1> 
  8504                                      %include "source/bss.asm"
  8505                              <1> align 4, nop
  8506                              <1> bssstart: equ $
  8507                              <1> bsscopy equ $
  8508                              <1> initialstack equ bsscopy
  8509                              <1> stackend equ initialstack + 4000
  8510                              <1> sigtable equ stackend + 96
  8511                              <1> fileindex: equ sigtable + 4
  8512                              <1> fileindexend: equ fileindex + 1024
  8513                              <1> previousstack equ fileindexend
  8514                              <1> lastfolderloc equ previousstack + 4
  8515                              <1> currentfolderloc equ lastfolderloc + 4
  8516                              <1> currentfolder equ currentfolderloc + 4
  8517                              <1> currentfolderend equ currentfolder + 512
  8518                              <1> uid equ currentfolderend
  8519                              <1> ranboot equ uid + 4
  8520                              <1> IFON equ ranboot + 1
  8521                              <1> IFTRUE equ IFON + 1
  8522                              <1> BATCHPOS equ IFTRUE + 100
  8523                              <1> BATCHISON equ BATCHPOS + 4
  8524                              <1> LOOPON equ BATCHISON + 1
  8525                              <1> LOOPPOS	equ LOOPON + 1
  8526                              <1> variables: equ LOOPPOS + 4
  8527                              <1> varend: equ variables + 4096
  8528                              <1> buftxt2: equ varend
  8529                              <1> buftxt: equ buftxt2 + 1024
  8530                              <1> buftxtend: equ buftxt + 1024
  8531                              <1> buf2: equ buftxtend
  8532                              <1> numbuf: equ buf2 + 20
  8533                              <1> %ifdef io.serial
  8534                              <1> 	lastcommandpos equ numbuf + 1
  8535                              <1> %else
  8536                              <1> 	%ifdef gui.included
  8537                              <1> 		graphicstable equ numbuf + 1 ;w type, dw datalocation, w locationx, w locationy, w selected, dw code
  8538                              <1> 		graphicstableend equ graphicstable + 200h
  8539                              <1> 		%ifdef gui.background
  8540                              <1> 			backgroundbuffer equ graphicstableend
  8541                              <1> 			backgroundbufferend equ backgroundbuffer + 1280*1026*2
  8542                              <1> 			mousecolorbuf equ backgroundbufferend
  8543                              <1> 		%else
  8544                              <1> 			mousecolorbuf equ graphicstableend ;where the gui under the mouse is stored
  8545                              <1> 		%endif
  8546                              <1> 		mcolorend equ mousecolorbuf + 256
  8547                              <1> 		videobuf equ mcolorend + 1	;1680x1050 pixels in characters
  8548                              <1> 		videobufend	equ videobuf + 210*65*4;2
  8549                              <1> 		videobuf2 equ videobufend
  8550                              <1> 		videobuf2end equ videobuf2 + 210*65*4;2
  8551                              <1> 	%else
  8552                              <1> 		videobuf equ numbuf + 1
  8553                              <1> 		videobufend equ videobuf + 80*30*4
  8554                              <1> 		videobuf2 equ videobufend
  8555                              <1> 		videobuf2end equ videobuf2 + 80*30*4
  8556                              <1> 	%endif
  8557                              <1> 	lastcommandpos: equ videobuf2end
  8558                              <1> %endif
  8559                              <1> 	commandbufpos: equ lastcommandpos + 4
  8560                              <1> 	commandlistentries: equ commandbufpos + 4
  8561                              <1> 	commandsentered: equ commandlistentries + 4
  8562                              <1> 	commandbuf: equ commandsentered + 4
  8563                              <1> 	commandbufend: equ commandbuf + 4096 ;this is where kernel space only ends, the rest is for threading
  8564                              <1> %ifdef network.included
  8565                              <1> 	rbuffstart: equ commandbufend ;for use with networking
  8566                              <1> 	rbuffend equ rbuffstart + 8212
  8567                              <1> %else
  8568                              <1> 	rbuffstart equ commandbufend
  8569                              <1> 	rbuffend equ commandbufend
  8570                              <1> %endif
  8571                              <1> %ifdef threads.included
  8572                              <1> 	threadlist: equ rbuffend ;this buffer will hold the stack locations of all of the threads, up to 2048
  8573                              <1> 	threadlistend: equ threadlist + 1024*4
  8574                              <1> 	stacks:	equ threadlistend ;i use SS now for proper stack management. This makes sure stacks never screw with other memory
  8575                              <1> 	stack1: equ stacks + 1024  ;woah, thats a lot of space for stacks
  8576                              <1> 	bssend equ stack1 + 1024*1024
  8577                              <1> %else
  8578                              <1> 	bssend equ rbuffend
  8579                              <1> %endif
  8580                              <1> dosprogloc equ 0x400000 ;from here on, it is not kernel space so apps can be loaded here.
  8581                                      %include "build/files.asm"
  8582 00036768 00<rept>            <1> align 512,db 0
  8583                              <1> f0:
  8584 00036800 <incbin>            <1> incbin "included/argtest.elf"
  8585 0003F320 00<rept>            <1> align 512,db 0
  8586                              <1> f1:
  8587 0003F400 <incbin>            <1> incbin "included/background.bmp"
  8588 002BF446 00<rept>            <1> align 512,db 0
  8589                              <1> f2:
  8590 002BF600 <incbin>            <1> incbin "included/boot.sh"
  8591 002BF704 00<rept>            <1> align 512,db 0
  8592                              <1> f3:
  8593 002BF800 <incbin>            <1> incbin "included/chartest.elf"
  8594 002C9320 00<rept>            <1> align 512,db 0
  8595                              <1> f4:
  8596 002C9400 <incbin>            <1> incbin "included/dostest.com"
  8597 002C9531 00<rept>            <1> align 512,db 0
  8598                              <1> f5:
  8599 002C9600 <incbin>            <1> incbin "included/exec"
  8600 002C96E9 00<rept>            <1> align 512,db 0
  8601                              <1> f6:
  8602 002C9800 <incbin>            <1> incbin "included/finalcount.sn"
  8603 002C9902 00<rept>            <1> align 512,db 0
  8604                              <1> f7:
  8605 002C9A00 <incbin>            <1> incbin "included/floppy.txt"
  8606 002CAC66 00<rept>            <1> align 512,db 0
  8607                              <1> f8:
  8608 002CAE00 <incbin>            <1> incbin "included/fork"
  8609 002CAF61 00<rept>            <1> align 512,db 0
  8610                              <1> f9:
  8611 002CB000 <incbin>            <1> incbin "included/gravity.elf"
  8612 002D4D90 00<rept>            <1> align 512,db 0
  8613                              <1> f10:
  8614 002D4E00 <incbin>            <1> incbin "included/guitest"
  8615 002D522E 00<rept>            <1> align 512,db 0
  8616                              <1> f11:
  8617 002D5400 <incbin>            <1> incbin "included/helloworld.elf"
  8618 002E5FA8 00<rept>            <1> align 512,db 0
  8619                              <1> f12:
  8620 002E6000 <incbin>            <1> incbin "included/int"
  8621 002E61B2 00<rept>            <1> align 512,db 0
  8622                              <1> f13:
  8623 002E6200 <incbin>            <1> incbin "included/lostwoods.sn"
  8624 002E6256 00<rept>            <1> align 512,db 0
  8625                              <1> f14:
  8626 002E6400 <incbin>            <1> incbin "included/mario.sn"
  8627 002E643A 00<rept>            <1> align 512,db 0
  8628                              <1> f15:
  8629 002E6600 <incbin>            <1> incbin "included/moment.wav"
  8630 0038BC2C 00<rept>            <1> align 512,db 0
  8631                              <1> f16:
  8632 0038BE00 <incbin>            <1> incbin "included/pi.elf"
  8633 00395938 00<rept>            <1> align 512,db 0
  8634                              <1> f17:
  8635 00395A00 <incbin>            <1> incbin "included/raytrace.elf"
  8636 00399520 00<rept>            <1> align 512,db 0
  8637                              <1> f18:
  8638 00399600 <incbin>            <1> incbin "included/solleros.bmp"
  8639 003EF5E6 00<rept>            <1> align 512,db 0
  8640                              <1> f19:
  8641 003EF600 <incbin>            <1> incbin "included/solleros.txt"
  8642 003EF774 00<rept>            <1> align 512,db 0
  8643                              <1> f20:
  8644 003EF800 <incbin>            <1> incbin "included/songotime.sn"
  8645 003EF84A 00<rept>            <1> align 512,db 0
  8646                              <1> f21:
  8647 003EFA00 <incbin>            <1> incbin "included/sse"
  8648 003EFCA8 00<rept>            <1> align 512,db 0
  8649                              <1> f22:
  8650 003EFE00 <incbin>            <1> incbin "included/stdiotest.elf"
  8651 003F9920 00<rept>            <1> align 512,db 0
  8652                              <1> f23:
  8653 003F9A00 <incbin>            <1> incbin "included/tely"
  8654 003F9BC6 00<rept>            <1> align 512,db 0
  8655                              <1> f24:
  8656 003F9C00 <incbin>            <1> incbin "included/timetest.elf"
  8657 00402720 00<rept>            <1> align 512,db 0
  8658                              <1> f25:
  8659 00402800 <incbin>            <1> incbin "included/tutorial.sh"
  8660 00402D52 00<rept>            <1> align 512,db 0
  8661                              <1> f26:
  8662 00402E00 <incbin>            <1> incbin "included/unfs"
  8663                              <1> align 512,db 0
  8664                              <1> f27:
  8665 00403200 <incbin>            <1> incbin "included/utf-8.txt"
  8666 004035C0 00<rept>            <1> align 512,db 0
  8667                              <1> f28:
  8668 00403600 <incbin>            <1> incbin "included/victory.wav"
  8669 00406148 00<rept>            <1> align 512,db 0
  8670                              <1> f29:
  8671 00406200 <incbin>            <1> incbin "included/_img.bin"
  8672                              <1> align 512,db 0
  8673                              <1> f30:
  8674                                  %endif
