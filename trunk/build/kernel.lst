     1                                  [map symbols build/kernel.map]
     2                                  %include "config.asm"
     3                              <1> ;These flags are used to configure options as on, put a simicolon in front of it to not configure it
     4                              <1> 
     5                              <1> %define gui.included
     6                              <1> ;Turn on the gui
     7                              <1> 
     8                              <1> %define gui.alphablending
     9                              <1> ;Make the terminal in the GUI 25% transparent
    10                              <1> 
    11                              <1> %define gui.background
    12                              <1> ;Make the GUI have a loadable background
    13                              <1> 
    14                              <1> ;%define gui.time
    15                              <1> ;Show time in top right corner of screen
    16                              <1> 
    17                              <1> ;%define io.serial "1"
    18                              <1> ;Use the specified serial port for input and output instead of the keyboard and screen
    19                              <1> ;If the gui is included this should not be enabled
    20                              <1> 
    21                              <1> %define terminal.vsync
    22                              <1> ;Uses the RTC to automatically update the terminal at ~64Hz
    23                              <1> 	;WARNING:
    24                              <1> 	;This may cause problems on systems with non-standard RTC's
    25                              <1> 	;It is therefore recommended that you do not enable it even
    26                              <1> 	;though it gives a large speed improvement for character output
    27                              <1> 
    28                              <1> %define hardware.automatic
    29                              <1> ;Automatically load the sound and network drivers.
    30                              <1> 
    31                              <1> %define threads.included
    32                              <1> ;Include the thread testing stuff-this uses a relatively large amount of memory
    33                              <1> 
    34                              <1> %define exceptions.included
    35                              <1> ;Display debugging information should crashes occur-also uses quite a bit of memory
    36                              <1> 
    37                              <1> ;%define disk.protected
    38                              <1> ;Use protected mode instead of real mode for disk access-this allows for multitasking with disk reads
    39                              <1> 
    40                              <1> %define disk.real
    41                              <1> ;Use real mode for disk access-this gives greater compatibility
    42                              <1> 
    43                              <1> %define sound.included
    44                              <1> ;This includes the sound drivers
    45                              <1> 
    46                              <1> %define network.included
    47                              <1> ;This includes the network stack
    48                              <1> 
    49                              <1> ;%define rtl8169.included
    50                              <1> ;This includes the RTL8169 drivers
    51                              <1> 
    52                              <1> ;%define rtl8139.included
    53                              <1> ;This includes the RTL8139 drivers
    54                              <1> 
    55                              <1> %define ne2000.included
    56                              <1> ;This includes the ne2000 drivers
    57                              <1> 
    58                              <1> ;%define i8254x.included
    59                              <1> ;This includes the Intel 8254x drivers
    60                              <1> 
    61                              <1> %define sector.debug
    62                              <1> ;Dump the contents of the first sector of SollerOS
    63                              <1> 
    64                              <1> ;%define dos.compatible
    65                              <1> ;Make the kernel loadable by dos.
    66                              <1> 
    67                              <1> ;%define system.simple
    68                              <1> ;The smallest possible system, overrides all options
    69                              <1> 
    70                              <1> ;FIX DEPENDANCIES
    71                              <1> %ifdef system.simple
    72                              <1> 	%undef dos.compatible	;overides all including dos.compatible
    73                              <1> 	%define UNDEFALL
    74                              <1> %endif
    75                              <1> %ifdef dos.compatible
    76                              <1> 	%define UNDEFALL
    77                              <1> %endif
    78                              <1> %ifdef UNDEFALL
    79                              <1> 	%undef io.serial
    80                              <1> 	%undef disk.real
    81                              <1> 	%undef gui.included
    82                              <1> 	%undef gui.alphablending
    83                              <1> 	%undef gui.background
    84                              <1> 	%undef terminal.vsync
    85                              <1> 	%undef hardware.automatic
    86                              <1> 	%undef threads.included
    87                              <1> 	%undef exceptions.included
    88                              <1> 	%undef disk.protected
    89                              <1> 	%undef sound.included
    90                              <1> 	%undef network.included
    91                              <1> 	%undef rtl8139.included
    92                              <1> 	%undef rtl8169.included
    93                              <1> 	%undef ne2000.included
    94                              <1> 	%undef i8254x.included
    95                              <1> 	%undef sector.debug
    96                              <1> 	%undef UNDEFALL
    97                              <1> %endif
    98                              <1> %ifdef system.simple
    99                              <1> 	%define io.serial "1"
   100                              <1> 	%define disk.real
   101                              <1> %endif
   102                              <1> %ifdef gui.included
   103                              <1> 	%undef io.serial
   104                              <1> %else
   105                              <1> 	%undef gui.alphablending
   106                              <1> 	%undef gui.background
   107                              <1> %endif
   108                              <1> %ifdef network.included
   109                              <1> %else
   110                              <1> 	%undef i8254x.included
   111                              <1> 	%undef ne2000.included
   112                              <1> 	%undef rtl8139.included
   113                              <1> 	%undef rtl8169.included
   114                              <1> %endif
   115                              <1> %ifdef disk.protected
   116                              <1> 	%undef disk.real
   117                              <1> %else
   118                              <1> 	%ifdef disk.real
   119                              <1> 	%else
   120                              <1> 		%define disk.none
   121                              <1> 	%endif
   122                              <1> %endif
   123                                  [ORG 0x100]
   124                                  	%include "source/signature.asm"
   125                              <1> sigjump:
   126 00000000 E91A00              <1> 	jmp signatureend
   127                              <1> signature:
   128 00000003 536F6C6C65724F53    <1> db "SollerOS" ;Operating system name
   129 0000000B 20416C706861204275- <1> db " Alpha Build ",0	;Soller OS development level
   130 00000014 696C642000          <1>
   131 00000019 06010000            <1> dd 262	;version number
   132                              <1> signatureend:
   133                                  [BITS 16]
   134                                      %include "source/boot.asm"
   135                              <1>     ; MENU.ASM
   136                              <1> boot:
   137 0000001D 8CC8                <1> 	mov ax, cs
   138 0000001F 8ED8                <1> 	mov ds, ax
   139 00000021 8EC0                <1> 	mov es, ax
   140 00000023 8ED0                <1> 	mov ss, ax
   141 00000025 880E[7D8F]          <1> 	mov [DriveNumber], cl
   142 00000029 668916[7E8F]        <1> 	mov [lbaad], edx
   143                              <1> %ifdef io.serial
   144                              <1> 	call getmemorysize
   145                              <1> 	mov si, serialmsg
   146                              <1> 	call printrm
   147                              <1> 	jmp pmode
   148                              <1> serialmsg: db "SollerOS: Using serial port ",io.serial," for I/O.",0
   149                              <1> %else
   150 0000002E E80300              <1> 	call vgaset	;make users switch using a command-this leads to very fast boots
   151 00000031 E95700              <1> 	jmp pmode
   152                              <1> %endif
   153                              <1> 	
   154                              <1> vgaset:
   155 00000034 B81200              <1> 	mov ax, 12h
   156 00000037 31DB                <1> 	xor bx, bx
   157 00000039 CD10                <1> 	int 10h
   158 0000003B C606[7C8F]00        <1> 	mov byte [guion], 0
   159 00000040 E80100              <1> 	call getmemorysize;get the memory map after the video is initialized
   160 00000043 C3                  <1> 	ret
   161                              <1> 
   162                              <1> getmemorysize:
   163 00000044 BF[828F]            <1> 	mov di, memlistbuf
   164 00000047 6631DB              <1> 	xor ebx, ebx
   165                              <1> getmemsizeloop:
   166 0000004A 66B820E80000        <1> 	mov eax, 0xE820
   167 00000050 66BA50414D53        <1> 	mov edx, 0x0534D4150
   168 00000056 66B918000000        <1> 	mov ecx, 24
   169 0000005C CD15                <1> 	int 0x15
   170 0000005E 81C71800            <1> 	add di, 24
   171 00000062 81FF[C291]          <1> 	cmp di, memlistend
   172 00000066 7309                <1> 	jae nomoregetmemsize
   173 00000068 6681FB00000000      <1> 	cmp ebx, 0
   174 0000006F 75D9                <1> 	jne getmemsizeloop
   175                              <1> nomoregetmemsize:
   176 00000071 81EF[828F]          <1> 	sub di, memlistbuf
   177 00000075 893E[C291]          <1> 	mov [memlistend], di
   178 00000079 C3                  <1> 	ret
   179                              <1> 	
   180                              <1> printrm:			; 'si' comes in with string address
   181 0000007A BB0700              <1>     mov bx,07		; write to display
   182 0000007D B40E                <1>     mov ah,0Eh		; screen function
   183 0000007F 8A04                <1>    .lp:    mov al,[si]         ; get next character
   184 00000081 3C00                <1>     cmp al,0		; look for terminator 
   185 00000083 7405                <1>     je .done		; zero byte at end of string
   186 00000085 CD10                <1>     int 10h		; write character to screen.    
   187 00000087 46                  <1> 	inc si	     	; move to next character
   188 00000088 EBF5                <1>     jmp .lp		; loop
   189 0000008A C3                  <1> .done: ret
   190                                      %include "source/pmode.asm"
   191                              <1> [BITS 16]
   192                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   193                              <1> ;	16-bit real mode
   194                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   195                              <1> 
   196                              <1> pmode:
   197 0000008B 6631C0              <1> 	xor eax, eax
   198 0000008E 6631DB              <1> 	xor ebx, ebx
   199 00000091 6631C9              <1> 	xor ecx, ecx
   200 00000094 6631D2              <1> 	xor edx, edx
   201 00000097 6631F6              <1> 	xor esi, esi
   202 0000009A 6631FF              <1> 	xor edi, edi
   203 0000009D BA9200              <1> 	mov dx, 0x92
   204 000000A0 EC                  <1> 	in al, dx	;;A20
   205 000000A1 0C02                <1> 	or al, 2
   206 000000A3 EE                  <1> 	out dx, al
   207 000000A4 8CCB                <1> 	mov bx,cs		; EBX=segment
   208 000000A6 66C1E304            <1> 	shl ebx,4		;	<< 4
   209 000000AA 67668D03            <1> 	lea eax,[ebx]		; EAX=linear address of segment base
   210 000000AE A3[AA03]            <1> 	mov [gdt2 + 2],ax
   211 000000B1 A3[B203]            <1> 	mov [gdt3 + 2],ax
   212 000000B4 66C1E810            <1> 	shr eax,16
   213 000000B8 A2[AC03]            <1> 	mov [gdt2 + 4],al
   214 000000BB A2[B403]            <1> 	mov [gdt3 + 4],al
   215 000000BE 8826[AF03]          <1> 	mov [gdt2 + 7],ah
   216 000000C2 8826[B703]          <1> 	mov [gdt3 + 7],ah
   217                              <1> 
   218 000000C6 66B8[D8930300]      <1> 	mov eax, initialstack
   219 000000CC 660306[4502]        <1> 	add eax, [newcodecache]
   220 000000D1 A3[A203]            <1> 	mov [gdts + 2],ax
   221 000000D4 66C1E810            <1> 	shr eax, 16
   222 000000D8 A2[A403]            <1> 	mov [gdts + 4],al
   223 000000DB 8826[A703]          <1> 	mov [gdts + 7], ah
   224                              <1> 	
   225 000000DF 66A1[4502]          <1> 	mov eax, [newcodecache]
   226 000000E3 A3[BA03]            <1> 	mov [gdt4 + 2],ax
   227 000000E6 A3[C203]            <1> 	mov [gdt5 + 2],ax
   228 000000E9 A3[CA03]            <1> 	mov [gdtv8086 + 2], ax
   229 000000EC A3[D203]            <1> 	mov [gdtv80862 + 2], ax
   230 000000EF 66C1E810            <1> 	shr eax,16
   231 000000F3 A2[BC03]            <1> 	mov [gdt4 + 4],al
   232 000000F6 A2[C403]            <1> 	mov [gdt5 + 4],al
   233 000000F9 A2[CC03]            <1> 	mov [gdtv8086 + 4],al
   234 000000FC A2[D403]            <1> 	mov [gdtv80862 + 4],al
   235 000000FF 8826[BF03]          <1> 	mov [gdt4 + 7],ah
   236 00000103 8826[C703]          <1> 	mov [gdt5 + 7],ah
   237 00000107 8826[CF03]          <1> 	mov [gdtv8086 + 7],ah
   238 0000010B 8826[D703]          <1> 	mov [gdtv80862 + 7],ah
   239                              <1> 	
   240 0000010F 66B800004000        <1> 	mov eax, dosprogloc
   241 00000115 660306[4502]        <1> 	add eax, [newcodecache]
   242 0000011A A3[DA03]            <1> 	mov [gdtdos + 2],ax
   243 0000011D A3[E203]            <1> 	mov [gdtdos2 + 2],ax
   244 00000120 66C1E810            <1> 	shr eax,16
   245 00000124 A2[DC03]            <1> 	mov [gdtdos + 4],al
   246 00000127 A2[E403]            <1> 	mov [gdtdos2 + 4],al
   247 0000012A 8826[DF03]          <1> 	mov [gdtdos + 7],ah
   248 0000012E 8826[E703]          <1> 	mov [gdtdos2 + 7],ah
   249                              <1> 	
   250                              <1> ; fix up gdt and idt
   251 00000132 67668D83[90030000]  <1> 	lea eax,[ebx + gdt]	; EAX=linear address of gdt
   252 0000013A 66A3[8603]          <1> 	mov [gdtr + 2],eax
   253 0000013E 67668D83[E8030000]  <1> 	lea eax,[ebx + idt]	; EAX=linear address of idt
   254 00000146 66A3[8C03]          <1> 	mov [idtr + 2],eax
   255 0000014A FA                  <1> 	cli
   256 0000014B 0F0116[8403]        <1> 	lgdt [gdtr]
   257 00000150 0F011E[8A03]        <1> 	lidt [idtr]
   258 00000155 6631DB              <1> 	xor ebx, ebx
   259 00000158 8CDB                <1> 	mov bx, ds
   260 0000015A 66891E[4102]        <1> 	mov [basecache], ebx
   261 0000015F 0F20C0              <1> 	mov eax,cr0
   262 00000162 0C01                <1> 	or al,1
   263 00000164 0F22C0              <1> 	mov cr0,eax
   264 00000167 EA[6C01]1800        <1> 	jmp SYS_CODE_SEL:do_pm
   265                              <1> [BITS 32]
   266                              <1> do_pm:
   267 0000016C 31C0                <1> 	xor eax, eax
   268 0000016E 66B82000            <1> 	mov ax, SYS_DATA_SEL
   269 00000172 8ED8                <1> 	mov ds, ax
   270 00000174 8EC0                <1> 	mov es, ax
   271 00000176 8EE0                <1> 	mov fs, ax
   272 00000178 66B83000            <1> 	mov ax, NEW_DATA_SEL
   273 0000017C 8EE8                <1> 	mov gs, ax
   274                              <1> 	
   275                              <1> copykernel:
   276 0000017E 648B06              <1> 	mov eax, [fs:esi]
   277 00000181 658906              <1> 	mov [gs:esi], eax
   278 00000184 81C604000000        <1> 	add esi, 4
   279 0000018A 81FE[D8930300]      <1> 	cmp esi, bsscopy
   280 00000190 72EC                <1> 	jb copykernel
   281 00000192 EA[99010000]2800    <1> 	jmp NEW_CODE_SEL:done_copy
   282                              <1> 	
   283                              <1> done_copy:
   284 00000199 66B83000            <1> 	mov ax, NEW_DATA_SEL	;;these MUST be setup AFTER the kernel switches places!!!
   285 0000019D 8ED8                <1> 	mov ds, ax
   286 0000019F 8EC0                <1> 	mov es, ax
   287 000001A1 8EE0                <1> 	mov fs, ax
   288                              <1> 	;mov ax, STACK_SEL
   289 000001A3 8ED0                <1> 	mov ss, ax
   290 000001A5 BC[78A30300]        <1> 	mov esp, stackend
   291 000001AA 66B82000            <1> 	mov ax, SYS_DATA_SEL
   292 000001AE 8EE8                <1> 	mov gs, ax
   293                              <1> 	
   294 000001B0 E856640000          <1> 	call initialize	;initialize drivers
   295                              <1> 	
   296 000001B5 A1[45020000]        <1> 	mov eax, [newcodecache]
   297 000001BA C1E804              <1> 	shr eax, 4
   298 000001BD A3[41020000]        <1> 	mov [basecache], eax
   299                              <1> 	
   300 000001C2 BE[26C83D00]        <1> 	mov esi, bssend
   301 000001C7 31C0                <1> 	xor eax, eax
   302                              <1> clearkernelbuffers:
   303 000001C9 8906                <1> 	mov [esi], eax
   304 000001CB 81EE04000000        <1> 	sub esi, 4
   305 000001D1 81FE[D8930300]      <1> 	cmp esi, bsscopy
   306 000001D7 77F0                <1> 	ja clearkernelbuffers
   307 000001D9 FB                  <1> 	sti
   308                              <1> 
   309                              <1> getmemoryspace:
   310 000001DA BE[828F0000]        <1> 	mov esi, memlistbuf
   311 000001DF 31FF                <1> 	xor edi, edi
   312 000001E1 668B3D[C2910000]    <1> 	mov di, [memlistend]
   313 000001E8 01F7                <1> 	add edi, esi
   314 000001EA 31C0                <1> 	xor eax, eax
   315                              <1> memoryspaceaddition:
   316 000001EC 39FE                <1> 	cmp esi, edi
   317 000001EE 7322                <1> 	jae finishedmemspacecalc
   318 000001F0 81C608000000        <1> 	add esi, 8
   319 000001F6 8B0E                <1> 	mov ecx, [esi]
   320 000001F8 81C608000000        <1> 	add esi, 8
   321 000001FE 8B1E                <1> 	mov ebx, [esi]
   322 00000200 81C608000000        <1> 	add esi, 8
   323 00000206 81FB01000000        <1> 	cmp ebx, 1
   324 0000020C 75DE                <1> 	jne memoryspaceaddition
   325 0000020E 01C8                <1> 	add eax, ecx
   326 00000210 EBDA                <1> 	jmp memoryspaceaddition
   327                              <1> finishedmemspacecalc:
   328 00000212 A3[56020000]        <1> 	mov [memoryspace], eax
   329                              <1> %ifdef gui.included
   330 00000217 803D[7C8F0000]00    <1> 	cmp byte [guion], 0
   331 0000021E 741C                <1> 	je normalstartup
   332 00000220 8B1D[41020000]      <1> 	mov ebx, [basecache]
   333 00000226 C1E304              <1> 	shl ebx, 4
   334 00000229 8B3D[BD590000]      <1> 	mov edi, [physbaseptr]
   335 0000022F 29DF                <1> 	sub edi, ebx
   336 00000231 893D[BD590000]      <1> 	mov [physbaseptr], edi
   337 00000237 E9BC690000          <1> 	jmp guiboot
   338                              <1> %endif
   339                              <1> normalstartup:
   340 0000023C E935290000          <1> 	jmp os
   341                              <1> 	
   342 00000241 00000000            <1> basecache dd 0
   343 00000245 00001000            <1> newcodecache dd 0x100000
   344                              <1> 
   345 00000249 00                  <1> testingcpuspeed db 0
   346 0000024A 00000000            <1> cpuspeedperint dd 0
   347 0000024E 0000000000000000    <1> cpuclocksperint dd 0,0
   348 00000256 00000000            <1> memoryspace dd 0
   349 0000025A 7D0A                <1> pitdiv dw 2685
   350 0000025C 2E562200            <1> timeinterval dd 2250286
   351 00000260 00000000            <1> timeseconds dd 0
   352 00000264 00000000            <1> timenanoseconds dd 0
   353 00000268 00                  <1> soundon db 0
   354 00000269 0000                <1> soundrepititions dw 0
   355 0000026B 00000000            <1> soundpos dd 0
   356 0000026F 00000000            <1> soundendpos dd 0
   357                              <1> 
   358                              <1> cpuspeedend:
   359 00000273 C605[49020000]00    <1> 	mov byte [testingcpuspeed], 0
   360 0000027A A3[4A020000]        <1> 	mov [cpuspeedperint], eax
   361 0000027F B8[7E500000]        <1> 	mov eax, cpuspeedloopend
   362 00000284 890424              <1> 	mov [esp], eax
   363 00000287 E9E8000000          <1> 	jmp handled
   364                              <1> 
   365                              <1> ;if using the rtc, the default frequency yeilds a period of 976562.5ns
   366                              <1> ;if using the pit, div=451 is 377981.0004, div=5370 is 4500572.00007ns
   367                              <1> ;div=55483 is 46500044.000006ns, div=2685 is 2250286.00004ns, div=902 is 755962.0008
   368                              <1> 
   369                              <1> pitinterrupt: ;this controls threading
   370 0000028C FA                  <1> 	cli
   371 0000028D 803D[49020000]01    <1> 	cmp byte [testingcpuspeed], 1	;check to see if the cpu speed test is running
   372 00000294 74DD                <1> 	je cpuspeedend
   373                              <1> 		
   374 00000296 E8B2000000          <1> 	call timekeeper ;this updates the internal time
   375                              <1> 	
   376 0000029B 803D[68020000]01    <1> 	cmp byte [soundon], 1
   377 000002A2 0F84F95A0000        <1> 	je near PCSpeakerRAW
   378                              <1> timerinterrupt:	;put this into the interrupt handler that controls threading
   379                              <1> %ifdef threads.included
   380 000002A8 803D[F36B0000]01    <1> 	cmp byte [threadson], 1
   381 000002AF 0F84DE680000        <1> 	je near threadswitch
   382                              <1> %endif
   383                              <1> keyinterrupt:		;checks for escape, if pressed, it quits the program currently running
   384 000002B5 803D[F36B0000]00    <1> 	cmp byte [threadson], 0
   385 000002BC 0F84B2000000        <1> 	je near handled
   386                              <1> %ifdef io.serial
   387                              <1> 	jmp handled
   388                              <1> %else
   389 000002C2 60                  <1> 	pusha
   390 000002C3 E464                <1> 	in al, 64h
   391 000002C5 A820                <1> 	test al, 20h
   392 000002C7 0F85A5000000        <1> 	jnz near handled2
   393 000002CD E460                <1> 	in al, 60h
   394 000002CF 3C01                <1> 	cmp al, 1		;escape
   395 000002D1 7405                <1> 	je userint
   396 000002D3 E99A000000          <1> 	jmp handled2
   397                              <1> ;	cmp al, 0x57
   398                              <1> ;	jne near handled2
   399                              <1> ;pauseint:	;F11 pauses
   400                              <1> ;	in al, 64h
   401                              <1> ;	test al, 20h
   402                              <1> ;	jnz pauseint
   403                              <1> ;	in al, 60h
   404                              <1> ;	cmp al, 0xD7
   405                              <1> ;	jne pauseint
   406                              <1> ;	mov esi, pausemsg
   407                              <1> ;	call print
   408                              <1> ;	cli
   409                              <1> ;pauselp:
   410                              <1> ;	nop
   411                              <1> ;	in al, 64h
   412                              <1> ;	test al, 20h
   413                              <1> ;	jnz pauselp
   414                              <1> ;	in al, 60h
   415                              <1> ;	cmp al, 0x57
   416                              <1> ;	je near handled2
   417                              <1> ;	jmp pauselp
   418                              <1> ;pausemsg db "Paused",10,0
   419                              <1> userint:
   420 000002D8 31C0                <1> 	xor eax, eax
   421 000002DA 3905[D8A30300]      <1> 	cmp [sigtable], eax
   422 000002E0 7411                <1> 	je .nosighook
   423 000002E2 8B1D[D8A30300]      <1> 	mov ebx, [sigtable]
   424 000002E8 895C2420            <1> 	mov [esp + 32], ebx
   425                              <1> ;	mov [sigtable], eax
   426 000002EC B020                <1> 	mov al, 0x20
   427 000002EE E620                <1> 	out 0x20, al
   428 000002F0 61                  <1> 	popa
   429 000002F1 FB                  <1> 	sti
   430 000002F2 CF                  <1> 	iret
   431                              <1> .nosighook:
   432                              <1> 		;UNMASK ALL INTS
   433 000002F3 E621                <1> 	out 0x21, al
   434 000002F5 E6A1                <1> 	out 0xA1, al
   435 000002F7 B020                <1> 	mov al, 0x20
   436 000002F9 E6A0                <1> 	out 0xA0, al
   437 000002FB E620                <1> 	out 0x20, al
   438                              <1> 		;RESET PIT DIVISOR
   439 000002FD 66A1[5A020000]      <1> 	mov ax, [pitdiv]
   440 00000303 E640                <1> 	out 0x40, al
   441 00000305 66C1C008            <1> 	rol ax, 8
   442 00000309 E640                <1> 	out 0x40, al
   443                              <1> 		;RESET PIC
   444 0000030B B020                <1> 	mov al, 0x20
   445 0000030D E620                <1> 	out 0x20, al
   446 0000030F 61                  <1> 	popa
   447 00000310 FB                  <1> 	sti
   448 00000311 BC[78A30300]        <1> 	mov esp, stackend ;reset stack
   449 00000316 E9B4290000          <1> 	jmp returnfromexp
   450                              <1> %endif
   451 0000031B 0A                  <1> rtcrate db 10
   452                              <1> rtcint:	;this runs at 64Hz which is perfect for 60Hz displays
   453                              <1> %ifdef io.serial
   454                              <1> %else
   455                              <1> %ifdef terminal.vsync
   456 0000031C FA                  <1> 	cli
   457 0000031D 803D[FD280000]00    <1> 	cmp byte [termcopyneeded], 0
   458 00000324 7405                <1> 	je .nocopy
   459 00000326 E8DB250000          <1> 	call newtermcopy
   460                              <1> .nocopy
   461 0000032B 50                  <1> 	push eax
   462 0000032C B00C                <1> 	mov al, 0xC
   463 0000032E E670                <1> 	out 0x70, al
   464 00000330 E471                <1> 	in al, 0x71
   465 00000332 58                  <1> 	pop eax
   466 00000333 FB                  <1> 	sti
   467                              <1> %endif
   468                              <1> %endif
   469 00000334 E942000000          <1> 	jmp handled4
   470                              <1> %ifdef rtl8139.included
   471                              <1> rtl8139.irq:
   472                              <1> 	cli
   473                              <1> 	push edx
   474                              <1> 	push eax
   475                              <1> 	mov edx, [rtl8139.basenicaddr]
   476                              <1> 	add edx, rtl8139.ISR
   477                              <1> 	xor eax, eax
   478                              <1> 	in ax, dx
   479                              <1> 	out dx, ax
   480                              <1> 	pop eax
   481                              <1> 	pop edx
   482                              <1> 	sti
   483                              <1> 	jmp handled4
   484                              <1> %endif
   485                              <1> %ifdef sound.included
   486                              <1> sblaster.irq:
   487 00000339 FA                  <1> 	cli
   488 0000033A 60                  <1> 	pusha
   489 0000033B 803D[87600000]01    <1> 	cmp byte [SoundBlaster], 1
   490 00000342 0F844A5B0000        <1> 	je near sblaster.cont
   491 00000348 E925000000          <1> 	jmp handled2
   492                              <1> %endif
   493                              <1> 	
   494                              <1> timekeeper:
   495 0000034D 50                  <1> 	push eax
   496 0000034E A1[64020000]        <1> 	mov eax, [timenanoseconds]
   497 00000353 0305[5C020000]      <1> 	add eax, [timeinterval]
   498 00000359 3D00CA9A3B          <1> 	cmp eax, 1000000000
   499 0000035E 720B                <1> 	jb nonanosecondrollover
   500 00000360 FF05[60020000]      <1> 	inc dword [timeseconds]
   501 00000366 2D00CA9A3B          <1> 	sub eax, 1000000000
   502                              <1> 	%ifdef gui.time
   503                              <1> 		;REMOVE THIS IT IS NOT EFFICIENT
   504                              <1> 		cmp byte [guion], 1
   505                              <1> 		jne nonanosecondrollover
   506                              <1> 		cmp dword [dragging], 0
   507                              <1> 		jne nonanosecondrollover
   508                              <1> 		pusha
   509                              <1> 		call guitime
   510                              <1> 		popa
   511                              <1> 	%endif
   512                              <1> nonanosecondrollover:
   513 0000036B A3[64020000]        <1> 	mov [timenanoseconds], eax
   514 00000370 58                  <1> 	pop eax
   515 00000371 C3                  <1> 	ret
   516                              <1> 	
   517                              <1> handled2:
   518 00000372 61                  <1> 	popa
   519                              <1> handled3:
   520 00000373 FB                  <1> 	sti
   521                              <1> handled:
   522 00000374 50                  <1> 	push eax
   523 00000375 B020                <1> 	mov al, 0x20
   524 00000377 E620                <1> 	out 0x20, al
   525 00000379 58                  <1> 	pop eax
   526 0000037A CF                  <1> 	iret
   527                              <1> handled4:
   528 0000037B 50                  <1> 	push eax
   529 0000037C B020                <1> 	mov al, 0x20
   530 0000037E E6A0                <1> 	out 0xA0, al
   531 00000380 E620                <1> 	out 0x20, al
   532 00000382 58                  <1> 	pop eax
   533 00000383 CF                  <1> 	iret
   534                              <1> [BITS 16]
   535                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   536                              <1> ;	16-bit limit/32-bit linear base address of GDT and IDT
   537                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   538 00000384 5700                <1> gdtr:	dw gdt_end - gdt - 1	; GDT limit
   539 00000386 00000000            <1> 	dd 0    		; filled with linear, physical address of GDT
   540                              <1> 
   541 0000038A FF07                <1> idtr:	dw idt_end - idt - 1	; IDT limit
   542 0000038C 00000000            <1> 	dd 0			; filled with linear, physical address of IDT
   543                              <1> 
   544                              <1> 
   545 00000390 0000                <1> gdt:	dw 0			; limit 15:0
   546 00000392 0000                <1> 	dw 0			; base 15:0
   547 00000394 00                  <1> 	db 0			; base 23:16
   548 00000395 00                  <1> 	db 0			; type
   549 00000396 00                  <1> 	db 0			; limit 19:16, flags
   550 00000397 00                  <1> 	db 0			; base 31:24
   551                              <1> ; linear data segment descriptor
   552                              <1> LINEAR_SEL	equ	$-gdt
   553 00000398 FFFF                <1> 	dw 0xFFFF		; limit 0xFFFFF
   554 0000039A 0000                <1> 	dw 0			; base for this one is always 0
   555 0000039C 00                  <1> 	db 0
   556 0000039D 92                  <1> 	db 0x92			; present, ring 0, data, expand-up, writable
   557 0000039E CF                  <1> 	db 0xCF			; page-granular, 32-bit
   558 0000039F 00                  <1> 	db 0
   559                              <1> STACK_SEL	equ $-gdt
   560 000003A0 0200                <1> gdts:	dw 2;(stackend)/4096
   561 000003A2 0000                <1> 	dw 0
   562 000003A4 00                  <1> 	db 0
   563 000003A5 92                  <1> 	db 0x92
   564 000003A6 CF                  <1> 	db 0xCF
   565 000003A7 00                  <1> 	db 0
   566                              <1> ; code segment descriptor
   567                              <1> SYS_CODE_SEL	equ	$-gdt
   568 000003A8 FFFF                <1> gdt2:	dw 0xFFFF
   569 000003AA 0000                <1> 	dw 0			; (base gets set above)
   570 000003AC 00                  <1> 	db 0
   571 000003AD 9A                  <1> 	db 0x9A			; present, ring 0, code, non-conforming, readable
   572 000003AE CF                  <1> 	db 0xCF
   573 000003AF 00                  <1> 	db 0
   574                              <1> ; data segment descriptor
   575                              <1> SYS_DATA_SEL	equ	$-gdt
   576 000003B0 FFFF                <1> gdt3:	dw 0xFFFF
   577 000003B2 0000                <1> 	dw 0			; (base gets set above)
   578 000003B4 00                  <1> 	db 0
   579 000003B5 92                  <1> 	db 0x92			; present, ring 0, data, expand-up, writable
   580 000003B6 CF                  <1> 	db 0xCF
   581 000003B7 00                  <1> 	db 0
   582                              <1> NEW_CODE_SEL	equ	$-gdt
   583 000003B8 FFFF                <1> gdt4:	dw 0xFFFF
   584 000003BA 0000                <1> 	dw 0			; (base gets set above)
   585 000003BC 00                  <1> 	db 0
   586 000003BD 9A                  <1> 	db 0x9A			; present, ring 0, code, non-conforming, readable
   587 000003BE CF                  <1> 	db 0xCF
   588 000003BF 00                  <1> 	db 0
   589                              <1> ; data segment descriptor
   590                              <1> NEW_DATA_SEL	equ	$-gdt
   591 000003C0 FFFF                <1> gdt5:	dw 0xFFFF
   592 000003C2 0000                <1> 	dw 0			; (base gets set above)
   593 000003C4 00                  <1> 	db 0
   594 000003C5 92                  <1> 	db 0x92			; present, ring 0, data, expand-up, writable
   595 000003C6 CF                  <1> 	db 0xCF
   596 000003C7 00                  <1> 	db 0
   597                              <1> V8086_CODE_SEL	equ $-gdt
   598 000003C8 FFFF                <1> gdtv8086: dw 0xFFFF
   599 000003CA 0000                <1> 	dw 0
   600 000003CC 00                  <1> 	db 0
   601 000003CD 9A                  <1> 	db 0x9A
   602 000003CE 8F                  <1> 	db 0x8F
   603 000003CF 00                  <1> 	db 0
   604                              <1> V8086_DATA_SEL	equ $-gdt
   605 000003D0 FFFF                <1> gdtv80862: dw 0xFFFF
   606 000003D2 0000                <1> 	dw 0
   607 000003D4 00                  <1> 	db 0
   608 000003D5 92                  <1> 	db 0x92
   609 000003D6 8F                  <1> 	db 0x8F
   610 000003D7 00                  <1> 	db 0
   611                              <1> DOS_CODE_SEL	equ $-gdt	;this gives dos programs complete access to one megabyte at the beginning of memory
   612 000003D8 0001                <1> gdtdos:	dw 256	;give it 1 MB
   613 000003DA 0000                <1> 	dw 0
   614 000003DC 00                  <1> 	db 0
   615 000003DD 9A                  <1> 	db 0x9A
   616 000003DE 8F                  <1> 	db 0x8F ;16 bit
   617 000003DF 00                  <1> 	db 0
   618                              <1> DOS_DATA_SEL 	equ $-gdt
   619 000003E0 0001                <1> gdtdos2:	dw 256
   620 000003E2 0000                <1> 	dw 0
   621 000003E4 00                  <1> 	db 0
   622 000003E5 92                  <1> 	db 0x92
   623 000003E6 8F                  <1> 	db 0x8F ;16 bit
   624 000003E7 00                  <1> 	db 0
   625                              <1> gdt_end:
   626                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   627                              <1> ;	interrupt descriptor table (IDT)
   628                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   629                              <1> ; 32 reserved interrupts:
   630                              <1> idt:	
   631                              <1> %assign i 0
   632                              <1> %rep    8
   633                              <1> 		dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   634                              <1> %assign i i+1
   635                              <1> %endrep
   636 000003E8 [090D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   637                              <2> %assign i i+1
   638 000003F0 [150D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   639                              <2> %assign i i+1
   640 000003F8 [210D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   641                              <2> %assign i i+1
   642 00000400 [2D0D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   643                              <2> %assign i i+1
   644 00000408 [390D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   645                              <2> %assign i i+1
   646 00000410 [450D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   647                              <2> %assign i i+1
   648 00000418 [510D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   649                              <2> %assign i i+1
   650 00000420 [5D0D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   651                              <2> %assign i i+1
   652 00000428 [690D]1800008E0000  <1> 		dw unhand + 8*12,SYS_CODE_SEL,0x8E00,0	;double fault handler in original memory
   653                              <1> %assign i 9
   654                              <1> %rep    23
   655                              <1> 		dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   656                              <1> %assign i i+1
   657                              <1> %endrep
   658 00000430 [750D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   659                              <2> %assign i i+1
   660 00000438 [810D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   661                              <2> %assign i i+1
   662 00000440 [8D0D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   663                              <2> %assign i i+1
   664 00000448 [990D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   665                              <2> %assign i i+1
   666 00000450 [A50D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   667                              <2> %assign i i+1
   668 00000458 [B10D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   669                              <2> %assign i i+1
   670 00000460 [BD0D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   671                              <2> %assign i i+1
   672 00000468 [C90D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   673                              <2> %assign i i+1
   674 00000470 [D50D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   675                              <2> %assign i i+1
   676 00000478 [E10D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   677                              <2> %assign i i+1
   678 00000480 [ED0D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   679                              <2> %assign i i+1
   680 00000488 [F90D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   681                              <2> %assign i i+1
   682 00000490 [050E]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   683                              <2> %assign i i+1
   684 00000498 [110E]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   685                              <2> %assign i i+1
   686 000004A0 [1D0E]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   687                              <2> %assign i i+1
   688 000004A8 [290E]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   689                              <2> %assign i i+1
   690 000004B0 [350E]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   691                              <2> %assign i i+1
   692 000004B8 [410E]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   693                              <2> %assign i i+1
   694 000004C0 [4D0E]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   695                              <2> %assign i i+1
   696 000004C8 [590E]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   697                              <2> %assign i i+1
   698 000004D0 [650E]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   699                              <2> %assign i i+1
   700 000004D8 [710E]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   701                              <2> %assign i i+1
   702 000004E0 [7D0E]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   703                              <2> %assign i i+1
   704 000004E8 [3C2A]2800008E0000  <1> 		dw int20h,NEW_CODE_SEL,0x8E00,0
   705 000004F0 [402A]2800008E0000  <1> 		dw int21h,NEW_CODE_SEL,0x8E00,0
   706                              <1> %assign i 0x22
   707                              <1> %rep 14
   708                              <1> 		dw handled,NEW_CODE_SEL,0x8E00,0
   709                              <1> %assign i +1
   710                              <1> %endrep
   711 000004F8 [7403]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   712                              <2> %assign i +1
   713 00000500 [7403]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   714                              <2> %assign i +1
   715 00000508 [7403]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   716                              <2> %assign i +1
   717 00000510 [7403]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   718                              <2> %assign i +1
   719 00000518 [7403]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   720                              <2> %assign i +1
   721 00000520 [7403]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   722                              <2> %assign i +1
   723 00000528 [7403]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   724                              <2> %assign i +1
   725 00000530 [7403]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   726                              <2> %assign i +1
   727 00000538 [7403]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   728                              <2> %assign i +1
   729 00000540 [7403]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   730                              <2> %assign i +1
   731 00000548 [7403]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   732                              <2> %assign i +1
   733 00000550 [7403]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   734                              <2> %assign i +1
   735 00000558 [7403]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   736                              <2> %assign i +1
   737 00000560 [7403]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   738                              <2> %assign i +1
   739                              <1> ;INT 30h for os use and 3rd party use:
   740 00000568 [011C]2800008E0000  <1> 		dw newints,NEW_CODE_SEL,0x8E00,0
   741                              <1> %assign i 0x31
   742                              <1> %rep 15
   743                              <1> 		dw handled,NEW_CODE_SEL,0x8E00,0
   744                              <1> %assign i +1
   745                              <1> %endrep
   746 00000570 [7403]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   747                              <2> %assign i +1
   748 00000578 [7403]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   749                              <2> %assign i +1
   750 00000580 [7403]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   751                              <2> %assign i +1
   752 00000588 [7403]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   753                              <2> %assign i +1
   754 00000590 [7403]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   755                              <2> %assign i +1
   756 00000598 [7403]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   757                              <2> %assign i +1
   758 000005A0 [7403]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   759                              <2> %assign i +1
   760 000005A8 [7403]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   761                              <2> %assign i +1
   762 000005B0 [7403]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   763                              <2> %assign i +1
   764 000005B8 [7403]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   765                              <2> %assign i +1
   766 000005C0 [7403]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   767                              <2> %assign i +1
   768 000005C8 [7403]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   769                              <2> %assign i +1
   770 000005D0 [7403]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   771                              <2> %assign i +1
   772 000005D8 [7403]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   773                              <2> %assign i +1
   774 000005E0 [7403]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   775                              <2> %assign i +1
   776                              <1> ;and here we are at 0x40
   777                              <1> ;here are all the irq's
   778 000005E8 [8C02]2800008E0000  <1> 		dw pitinterrupt,NEW_CODE_SEL,0x8E00,0 ;IRQ 0 = PIT
   779 000005F0 [7403]2800008E0000  <1> 		dw handled,NEW_CODE_SEL,0x8E00,0 ;IRQ 1 = keyboard
   780 000005F8 [7403]2800008E0000  <1> 		dw handled,NEW_CODE_SEL,0x8E00,0 ;IRQ 2
   781 00000600 [7403]2800008E0000  <1> 		dw handled,NEW_CODE_SEL,0x8E00,0 ;IRQ 3
   782 00000608 [7403]2800008E0000  <1> 		dw handled,NEW_CODE_SEL,0x8E00,0 ;IRQ 4
   783                              <1> 	%ifdef sound.included
   784 00000610 [3903]2800008E0000  <1> 		dw sblaster.irq,NEW_CODE_SEL,0x8E00,0 ;IRQ 5 = default SoundBlaster
   785                              <1> 	%else
   786                              <1> 		dw handled,NEW_CODE_SEL,0x8E00,0 ;IRQ 5
   787                              <1> 	%endif
   788 00000618 [7403]2800008E0000  <1> 		dw handled,NEW_CODE_SEL,0x8E00,0 ;IRQ 6
   789 00000620 [7403]2800008E0000  <1> 		dw handled,NEW_CODE_SEL,0x8E00,0 ;IRQ 7
   790 00000628 [1C03]2800008E0000  <1> 		dw rtcint,NEW_CODE_SEL,0x8E00,0 ;IRQ 8 = RTC
   791 00000630 [7B03]2800008E0000  <1> 		dw handled4,NEW_CODE_SEL,0x8E00,0 ;IRQ 9 = default NE2000
   792 00000638 [7B03]2800008E0000  <1> 		dw handled4,NEW_CODE_SEL,0x8E00,0 ;IRQ 10
   793                              <1> 	%ifdef rtl8139.included
   794                              <1> 		dw rtl8139.irq,NEW_CODE_SEL,0x8E00,0 ;IRQ 11 = default RTL8139
   795                              <1> 	%else
   796 00000640 [7B03]2800008E0000  <1> 		dw handled4,NEW_CODE_SEL,0x8E00,0 ;IRQ 11
   797                              <1> 	%endif
   798 00000648 [7B03]2800008E0000  <1> 		dw handled4,NEW_CODE_SEL,0x8E00,0 ;IRQ 12
   799 00000650 [7B03]2800008E0000  <1> 		dw handled4,NEW_CODE_SEL,0x8E00,0 ;IRQ 13
   800 00000658 [7B03]2800008E0000  <1> 		dw handled4,NEW_CODE_SEL,0x8E00,0 ;IRQ 14
   801 00000660 [7B03]2800008E0000  <1> 		dw handled4,NEW_CODE_SEL,0x8E00,0 ;IRQ 15
   802                              <1> ;This brings me up to 0x50
   803                              <1> %assign i 0x50
   804                              <1> %rep 176
   805                              <1> 		dw handled, NEW_CODE_SEL,0x8E00,0
   806                              <1> 		;dw unhand + i*12, NEW_CODE_SEL,0x8E00,0
   807                              <1> %assign i +1
   808                              <1> %endrep
   809 00000668 [7403]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   810                              <2> 
   811                              <2> %assign i +1
   812 00000670 [7403]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   813                              <2> 
   814                              <2> %assign i +1
   815 00000678 [7403]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   816                              <2> 
   817                              <2> %assign i +1
   818 00000680 [7403]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   819                              <2> 
   820                              <2> %assign i +1
   821 00000688 [7403]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   822                              <2> 
   823                              <2> %assign i +1
   824 00000690 [7403]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   825                              <2> 
   826                              <2> %assign i +1
   827 00000698 [7403]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   828                              <2> 
   829                              <2> %assign i +1
   830 000006A0 [7403]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   831                              <2> 
   832                              <2> %assign i +1
   833 000006A8 [7403]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   834                              <2> 
   835                              <2> %assign i +1
   836 000006B0 [7403]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   837                              <2> 
   838                              <2> %assign i +1
   839 000006B8 [7403]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   840                              <2> 
   841                              <2> %assign i +1
   842 000006C0 [7403]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   843                              <2> 
   844                              <2> %assign i +1
   845 000006C8 [7403]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   846                              <2> 
   847                              <2> %assign i +1
   848 000006D0 [7403]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   849                              <2> 
   850                              <2> %assign i +1
   851 000006D8 [7403]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   852                              <2> 
   853                              <2> %assign i +1
   854 000006E0 [7403]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   855                              <2> 
   856                              <2> %assign i +1
   857 000006E8 [7403]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   858                              <2> 
   859                              <2> %assign i +1
   860 000006F0 [7403]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   861                              <2> 
   862                              <2> %assign i +1
   863 000006F8 [7403]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   864                              <2> 
   865                              <2> %assign i +1
   866 00000700 [7403]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   867                              <2> 
   868                              <2> %assign i +1
   869 00000708 [7403]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   870                              <2> 
   871                              <2> %assign i +1
   872 00000710 [7403]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   873                              <2> 
   874                              <2> %assign i +1
   875 00000718 [7403]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   876                              <2> 
   877                              <2> %assign i +1
   878 00000720 [7403]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   879                              <2> 
   880                              <2> %assign i +1
   881 00000728 [7403]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   882                              <2> 
   883                              <2> %assign i +1
   884 00000730 [7403]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   885                              <2> 
   886                              <2> %assign i +1
   887 00000738 [7403]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   888                              <2> 
   889                              <2> %assign i +1
   890 00000740 [7403]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   891                              <2> 
   892                              <2> %assign i +1
   893 00000748 [7403]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   894                              <2> 
   895                              <2> %assign i +1
   896 00000750 [7403]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   897                              <2> 
   898                              <2> %assign i +1
   899 00000758 [7403]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   900                              <2> 
   901                              <2> %assign i +1
   902 00000760 [7403]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   903                              <2> 
   904                              <2> %assign i +1
   905 00000768 [7403]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   906                              <2> 
   907                              <2> %assign i +1
   908 00000770 [7403]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   909                              <2> 
   910                              <2> %assign i +1
   911 00000778 [7403]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   912                              <2> 
   913                              <2> %assign i +1
   914 00000780 [7403]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   915                              <2> 
   916                              <2> %assign i +1
   917 00000788 [7403]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   918                              <2> 
   919                              <2> %assign i +1
   920 00000790 [7403]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   921                              <2> 
   922                              <2> %assign i +1
   923 00000798 [7403]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   924                              <2> 
   925                              <2> %assign i +1
   926 000007A0 [7403]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   927                              <2> 
   928                              <2> %assign i +1
   929 000007A8 [7403]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   930                              <2> 
   931                              <2> %assign i +1
   932 000007B0 [7403]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   933                              <2> 
   934                              <2> %assign i +1
   935 000007B8 [7403]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   936                              <2> 
   937                              <2> %assign i +1
   938 000007C0 [7403]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   939                              <2> 
   940                              <2> %assign i +1
   941 000007C8 [7403]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   942                              <2> 
   943                              <2> %assign i +1
   944 000007D0 [7403]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   945                              <2> 
   946                              <2> %assign i +1
   947 000007D8 [7403]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   948                              <2> 
   949                              <2> %assign i +1
   950 000007E0 [7403]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   951                              <2> 
   952                              <2> %assign i +1
   953 000007E8 [7403]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   954                              <2> 
   955                              <2> %assign i +1
   956 000007F0 [7403]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   957                              <2> 
   958                              <2> %assign i +1
   959 000007F8 [7403]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   960                              <2> 
   961                              <2> %assign i +1
   962 00000800 [7403]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   963                              <2> 
   964                              <2> %assign i +1
   965 00000808 [7403]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   966                              <2> 
   967                              <2> %assign i +1
   968 00000810 [7403]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   969                              <2> 
   970                              <2> %assign i +1
   971 00000818 [7403]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   972                              <2> 
   973                              <2> %assign i +1
   974 00000820 [7403]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   975                              <2> 
   976                              <2> %assign i +1
   977 00000828 [7403]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   978                              <2> 
   979                              <2> %assign i +1
   980 00000830 [7403]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   981                              <2> 
   982                              <2> %assign i +1
   983 00000838 [7403]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   984                              <2> 
   985                              <2> %assign i +1
   986 00000840 [7403]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   987                              <2> 
   988                              <2> %assign i +1
   989 00000848 [7403]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   990                              <2> 
   991                              <2> %assign i +1
   992 00000850 [7403]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   993                              <2> 
   994                              <2> %assign i +1
   995 00000858 [7403]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   996                              <2> 
   997                              <2> %assign i +1
   998 00000860 [7403]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   999                              <2> 
  1000                              <2> %assign i +1
  1001 00000868 [7403]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1002                              <2> 
  1003                              <2> %assign i +1
  1004 00000870 [7403]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1005                              <2> 
  1006                              <2> %assign i +1
  1007 00000878 [7403]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1008                              <2> 
  1009                              <2> %assign i +1
  1010 00000880 [7403]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1011                              <2> 
  1012                              <2> %assign i +1
  1013 00000888 [7403]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1014                              <2> 
  1015                              <2> %assign i +1
  1016 00000890 [7403]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1017                              <2> 
  1018                              <2> %assign i +1
  1019 00000898 [7403]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1020                              <2> 
  1021                              <2> %assign i +1
  1022 000008A0 [7403]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1023                              <2> 
  1024                              <2> %assign i +1
  1025 000008A8 [7403]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1026                              <2> 
  1027                              <2> %assign i +1
  1028 000008B0 [7403]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1029                              <2> 
  1030                              <2> %assign i +1
  1031 000008B8 [7403]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1032                              <2> 
  1033                              <2> %assign i +1
  1034 000008C0 [7403]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1035                              <2> 
  1036                              <2> %assign i +1
  1037 000008C8 [7403]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1038                              <2> 
  1039                              <2> %assign i +1
  1040 000008D0 [7403]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1041                              <2> 
  1042                              <2> %assign i +1
  1043 000008D8 [7403]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1044                              <2> 
  1045                              <2> %assign i +1
  1046 000008E0 [7403]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1047                              <2> 
  1048                              <2> %assign i +1
  1049 000008E8 [7403]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1050                              <2> 
  1051                              <2> %assign i +1
  1052 000008F0 [7403]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1053                              <2> 
  1054                              <2> %assign i +1
  1055 000008F8 [7403]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1056                              <2> 
  1057                              <2> %assign i +1
  1058 00000900 [7403]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1059                              <2> 
  1060                              <2> %assign i +1
  1061 00000908 [7403]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1062                              <2> 
  1063                              <2> %assign i +1
  1064 00000910 [7403]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1065                              <2> 
  1066                              <2> %assign i +1
  1067 00000918 [7403]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1068                              <2> 
  1069                              <2> %assign i +1
  1070 00000920 [7403]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1071                              <2> 
  1072                              <2> %assign i +1
  1073 00000928 [7403]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1074                              <2> 
  1075                              <2> %assign i +1
  1076 00000930 [7403]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1077                              <2> 
  1078                              <2> %assign i +1
  1079 00000938 [7403]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1080                              <2> 
  1081                              <2> %assign i +1
  1082 00000940 [7403]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1083                              <2> 
  1084                              <2> %assign i +1
  1085 00000948 [7403]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1086                              <2> 
  1087                              <2> %assign i +1
  1088 00000950 [7403]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1089                              <2> 
  1090                              <2> %assign i +1
  1091 00000958 [7403]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1092                              <2> 
  1093                              <2> %assign i +1
  1094 00000960 [7403]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1095                              <2> 
  1096                              <2> %assign i +1
  1097 00000968 [7403]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1098                              <2> 
  1099                              <2> %assign i +1
  1100 00000970 [7403]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1101                              <2> 
  1102                              <2> %assign i +1
  1103 00000978 [7403]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1104                              <2> 
  1105                              <2> %assign i +1
  1106 00000980 [7403]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1107                              <2> 
  1108                              <2> %assign i +1
  1109 00000988 [7403]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1110                              <2> 
  1111                              <2> %assign i +1
  1112 00000990 [7403]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1113                              <2> 
  1114                              <2> %assign i +1
  1115 00000998 [7403]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1116                              <2> 
  1117                              <2> %assign i +1
  1118 000009A0 [7403]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1119                              <2> 
  1120                              <2> %assign i +1
  1121 000009A8 [7403]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1122                              <2> 
  1123                              <2> %assign i +1
  1124 000009B0 [7403]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1125                              <2> 
  1126                              <2> %assign i +1
  1127 000009B8 [7403]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1128                              <2> 
  1129                              <2> %assign i +1
  1130 000009C0 [7403]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1131                              <2> 
  1132                              <2> %assign i +1
  1133 000009C8 [7403]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1134                              <2> 
  1135                              <2> %assign i +1
  1136 000009D0 [7403]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1137                              <2> 
  1138                              <2> %assign i +1
  1139 000009D8 [7403]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1140                              <2> 
  1141                              <2> %assign i +1
  1142 000009E0 [7403]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1143                              <2> 
  1144                              <2> %assign i +1
  1145 000009E8 [7403]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1146                              <2> 
  1147                              <2> %assign i +1
  1148 000009F0 [7403]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1149                              <2> 
  1150                              <2> %assign i +1
  1151 000009F8 [7403]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1152                              <2> 
  1153                              <2> %assign i +1
  1154 00000A00 [7403]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1155                              <2> 
  1156                              <2> %assign i +1
  1157 00000A08 [7403]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1158                              <2> 
  1159                              <2> %assign i +1
  1160 00000A10 [7403]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1161                              <2> 
  1162                              <2> %assign i +1
  1163 00000A18 [7403]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1164                              <2> 
  1165                              <2> %assign i +1
  1166 00000A20 [7403]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1167                              <2> 
  1168                              <2> %assign i +1
  1169 00000A28 [7403]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1170                              <2> 
  1171                              <2> %assign i +1
  1172 00000A30 [7403]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1173                              <2> 
  1174                              <2> %assign i +1
  1175 00000A38 [7403]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1176                              <2> 
  1177                              <2> %assign i +1
  1178 00000A40 [7403]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1179                              <2> 
  1180                              <2> %assign i +1
  1181 00000A48 [7403]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1182                              <2> 
  1183                              <2> %assign i +1
  1184 00000A50 [7403]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1185                              <2> 
  1186                              <2> %assign i +1
  1187 00000A58 [7403]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1188                              <2> 
  1189                              <2> %assign i +1
  1190 00000A60 [7403]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1191                              <2> 
  1192                              <2> %assign i +1
  1193 00000A68 [7403]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1194                              <2> 
  1195                              <2> %assign i +1
  1196 00000A70 [7403]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1197                              <2> 
  1198                              <2> %assign i +1
  1199 00000A78 [7403]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1200                              <2> 
  1201                              <2> %assign i +1
  1202 00000A80 [7403]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1203                              <2> 
  1204                              <2> %assign i +1
  1205 00000A88 [7403]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1206                              <2> 
  1207                              <2> %assign i +1
  1208 00000A90 [7403]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1209                              <2> 
  1210                              <2> %assign i +1
  1211 00000A98 [7403]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1212                              <2> 
  1213                              <2> %assign i +1
  1214 00000AA0 [7403]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1215                              <2> 
  1216                              <2> %assign i +1
  1217 00000AA8 [7403]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1218                              <2> 
  1219                              <2> %assign i +1
  1220 00000AB0 [7403]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1221                              <2> 
  1222                              <2> %assign i +1
  1223 00000AB8 [7403]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1224                              <2> 
  1225                              <2> %assign i +1
  1226 00000AC0 [7403]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1227                              <2> 
  1228                              <2> %assign i +1
  1229 00000AC8 [7403]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1230                              <2> 
  1231                              <2> %assign i +1
  1232 00000AD0 [7403]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1233                              <2> 
  1234                              <2> %assign i +1
  1235 00000AD8 [7403]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1236                              <2> 
  1237                              <2> %assign i +1
  1238 00000AE0 [7403]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1239                              <2> 
  1240                              <2> %assign i +1
  1241 00000AE8 [7403]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1242                              <2> 
  1243                              <2> %assign i +1
  1244 00000AF0 [7403]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1245                              <2> 
  1246                              <2> %assign i +1
  1247 00000AF8 [7403]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1248                              <2> 
  1249                              <2> %assign i +1
  1250 00000B00 [7403]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1251                              <2> 
  1252                              <2> %assign i +1
  1253 00000B08 [7403]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1254                              <2> 
  1255                              <2> %assign i +1
  1256 00000B10 [7403]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1257                              <2> 
  1258                              <2> %assign i +1
  1259 00000B18 [7403]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1260                              <2> 
  1261                              <2> %assign i +1
  1262 00000B20 [7403]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1263                              <2> 
  1264                              <2> %assign i +1
  1265 00000B28 [7403]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1266                              <2> 
  1267                              <2> %assign i +1
  1268 00000B30 [7403]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1269                              <2> 
  1270                              <2> %assign i +1
  1271 00000B38 [7403]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1272                              <2> 
  1273                              <2> %assign i +1
  1274 00000B40 [7403]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1275                              <2> 
  1276                              <2> %assign i +1
  1277 00000B48 [7403]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1278                              <2> 
  1279                              <2> %assign i +1
  1280 00000B50 [7403]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1281                              <2> 
  1282                              <2> %assign i +1
  1283 00000B58 [7403]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1284                              <2> 
  1285                              <2> %assign i +1
  1286 00000B60 [7403]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1287                              <2> 
  1288                              <2> %assign i +1
  1289 00000B68 [7403]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1290                              <2> 
  1291                              <2> %assign i +1
  1292 00000B70 [7403]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1293                              <2> 
  1294                              <2> %assign i +1
  1295 00000B78 [7403]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1296                              <2> 
  1297                              <2> %assign i +1
  1298 00000B80 [7403]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1299                              <2> 
  1300                              <2> %assign i +1
  1301 00000B88 [7403]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1302                              <2> 
  1303                              <2> %assign i +1
  1304 00000B90 [7403]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1305                              <2> 
  1306                              <2> %assign i +1
  1307 00000B98 [7403]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1308                              <2> 
  1309                              <2> %assign i +1
  1310 00000BA0 [7403]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1311                              <2> 
  1312                              <2> %assign i +1
  1313 00000BA8 [7403]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1314                              <2> 
  1315                              <2> %assign i +1
  1316 00000BB0 [7403]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1317                              <2> 
  1318                              <2> %assign i +1
  1319 00000BB8 [7403]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1320                              <2> 
  1321                              <2> %assign i +1
  1322 00000BC0 [7403]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1323                              <2> 
  1324                              <2> %assign i +1
  1325 00000BC8 [7403]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1326                              <2> 
  1327                              <2> %assign i +1
  1328 00000BD0 [7403]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1329                              <2> 
  1330                              <2> %assign i +1
  1331 00000BD8 [7403]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1332                              <2> 
  1333                              <2> %assign i +1
  1334 00000BE0 [7403]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1335                              <2> 
  1336                              <2> %assign i +1
  1337                              <1> idt_end:
  1338                              <1> [BITS 32]
  1339                                  	%include "source/realmode.asm"
  1340                              <1> realmode:	;make sure the real mode program's address is in realmodeptr 
  1341                              <1> 			;and the return address is in realmodereturn
  1342 00000BE8 FA                  <1> 	cli
  1343 00000BE9 A3[FB0C0000]        <1> 	mov [realmodeeax], eax
  1344 00000BEE 891D[F70C0000]      <1> 	mov [realmodeebx], ebx
  1345 00000BF4 8925[E90C0000]      <1> 	mov [pmodeesp], esp
  1346                              <1> 
  1347 00000BFA BB[F30C0000]        <1> 	mov ebx, cr0old
  1348                              <1> rmcopytofirstmbyte:
  1349 00000BFF 8B03                <1> 	mov eax, [ebx]
  1350 00000C01 658903              <1> 	mov [gs:ebx], eax
  1351 00000C04 81C304000000        <1> 	add ebx, 4
  1352 00000C0A 81FB[030D0000]      <1> 	cmp ebx, realmodeptr
  1353 00000C10 76ED                <1> 	jbe rmcopytofirstmbyte
  1354                              <1> 
  1355 00000C12 EA[190C0000]3800    <1> 	jmp V8086_CODE_SEL:protected16bit
  1356                              <1> 
  1357                              <1> [BITS 16]
  1358                              <1> protected16bit:
  1359 00000C19 B84000              <1> 	mov ax, V8086_DATA_SEL
  1360 00000C1C 8ED8                <1> 	mov ds, ax
  1361 00000C1E 8EC0                <1> 	mov es, ax
  1362 00000C20 8EE0                <1> 	mov fs, ax
  1363 00000C22 8EE8                <1> 	mov gs, ax
  1364 00000C24 8ED0                <1> 	mov ss, ax
  1365 00000C26 66BC[78A30300]      <1> 	mov esp, stackend
  1366 00000C2C 0F20C0              <1> 	mov eax, cr0
  1367 00000C2F 66A3[F30C]          <1> 	mov [cr0old], eax
  1368 00000C33 6625FEFFFF7F        <1> 	and eax, 0x7FFFFFFE
  1369 00000C39 0F22C0              <1> 	mov cr0, eax	;now in real mode
  1370 00000C3C EA[410C]0010        <1> 	jmp 0x1000:inrealmode
  1371                              <1> 
  1372                              <1> inrealmode:
  1373 00000C41 8CC8                <1> 	mov ax, cs
  1374 00000C43 8ED8                <1> 	mov ds, ax
  1375 00000C45 8EC0                <1> 	mov es, ax
  1376 00000C47 8EE0                <1> 	mov fs, ax
  1377 00000C49 8EE8                <1> 	mov gs, ax
  1378 00000C4B 8ED0                <1> 	mov ss, ax
  1379 00000C4D BC[78A3]            <1> 	mov sp, stackend ;because this is at 0x1000: and not 0x10000: it works
  1380                              <1> 	
  1381 00000C50 B011                <1> 	mov al, 0x11
  1382 00000C52 E620                <1> 	out 0x20, al
  1383 00000C54 E6A0                <1> 	out 0xA0, al
  1384 00000C56 B008                <1> 	mov al, 0x8		;interrupt for master
  1385 00000C58 E621                <1> 	out 0x21, al
  1386 00000C5A B070                <1> 	mov al, 0x70	;interrupt for slave
  1387 00000C5C E6A1                <1> 	out 0xA1, al
  1388 00000C5E B004                <1> 	mov al, 4
  1389 00000C60 E621                <1> 	out 0x21, al
  1390 00000C62 B002                <1> 	mov al, 2
  1391 00000C64 E6A1                <1> 	out 0xA1, al
  1392 00000C66 B001                <1> 	mov al, 0x1
  1393 00000C68 E621                <1> 	out 0x21, al
  1394 00000C6A B001                <1> 	mov al, 0x1
  1395 00000C6C E6A1                <1> 	out 0xA1, al
  1396                              <1> 	
  1397 00000C6E 0F011E[ED0C]        <1> 	lidt [idt_real]
  1398 00000C73 FB                  <1> 	sti
  1399                              <1> 
  1400 00000C74 66A1[FB0C]          <1> 	mov eax, [realmodeeax]
  1401 00000C78 668B1E[F70C]        <1> 	mov ebx, [realmodeebx]
  1402                              <1> 
  1403 00000C7D FF16[030D]          <1> 	call word [realmodeptr] ;call the real mode program here
  1404                              <1> 
  1405 00000C81 66A3[FB0C]          <1> 	mov [realmodeeax], eax
  1406 00000C85 66891E[F70C]        <1> 	mov [realmodeebx], ebx
  1407                              <1> 
  1408 00000C8A FA                  <1> 	cli
  1409 00000C8B 0F0116[8403]        <1> 	lgdt [gdtr]
  1410 00000C90 0F011E[8A03]        <1> 	lidt [idtr]
  1411 00000C95 0F20C0              <1> 	mov eax, cr0
  1412 00000C98 0C01                <1> 	or al, 1
  1413 00000C9A 0F22C0              <1> 	mov cr0,eax
  1414 00000C9D EA[A20C]2800        <1> 	jmp NEW_CODE_SEL:returntopmode
  1415                              <1> 
  1416                              <1> [BITS 32]
  1417                              <1> returntopmode:
  1418 00000CA2 66B83000            <1> 	mov ax, NEW_DATA_SEL
  1419 00000CA6 8ED8                <1> 	mov ds, ax
  1420 00000CA8 8EC0                <1> 	mov es, ax
  1421 00000CAA 8EE0                <1> 	mov fs, ax
  1422 00000CAC 8ED0                <1> 	mov ss, ax
  1423 00000CAE 8B25[E90C0000]      <1> 	mov esp, [pmodeesp]
  1424 00000CB4 66B82000            <1> 	mov ax, SYS_DATA_SEL
  1425 00000CB8 8EE8                <1> 	mov gs, ax
  1426                              <1> 
  1427 00000CBA BB[F30C0000]        <1> 	mov ebx, cr0old
  1428                              <1> rmcopyfromfirstmbyte:
  1429 00000CBF 658B03              <1> 	mov eax, [gs:ebx]
  1430 00000CC2 8903                <1> 	mov [ebx], eax
  1431 00000CC4 81C304000000        <1> 	add ebx, 4
  1432 00000CCA 81FB[030D0000]      <1> 	cmp ebx, realmodeptr
  1433 00000CD0 76ED                <1> 	jbe rmcopyfromfirstmbyte
  1434                              <1> 
  1435 00000CD2 E852590000          <1> 	call initialize.pic ;reset irq's and masks
  1436 00000CD7 FB                  <1> 	sti
  1437 00000CD8 A1[FB0C0000]        <1> 	mov eax, [realmodeeax]
  1438 00000CDD 8B1D[F70C0000]      <1> 	mov ebx, [realmodeebx]
  1439 00000CE3 FF25[FF0C0000]      <1> 	jmp dword [realmodereturn]
  1440                              <1> 	
  1441 00000CE9 00000000            <1> pmodeesp dd 0
  1442                              <1> idt_real:
  1443 00000CED FF03                <1> 	dw 0x3FF
  1444 00000CEF 00000000            <1> 	dd 0
  1445 00000CF3 00000000            <1> cr0old dd 0
  1446 00000CF7 00000000            <1> realmodeebx dd 0
  1447 00000CFB 00000000            <1> realmodeeax dd 0
  1448 00000CFF 00000000            <1> realmodereturn dd 0
  1449 00000D03 0000                <1> realmodeptr dw 0
  1450 00000D05 00000000            <1> dd 0 ;make sure the copy thing doesnt overflow
  1451                                  [BITS 32]
  1452                                      %include "source/exception.asm"
  1453                              <1> %ifdef exceptions.included
  1454                              <1> unhand:	
  1455                              <1> 	%assign i 0
  1456                              <1> 	%rep 32
  1457                              <1> 	mov byte [intprob], i
  1458                              <1> 	jmp unhand2
  1459                              <1> 	%assign i i+1
  1460                              <1> 	%endrep
  1461 00000D09 C605[BB110000]00    <2>  mov byte [intprob], i
  1462 00000D10 E974010000          <2>  jmp unhand2
  1463                              <2>  %assign i i+1
  1464 00000D15 C605[BB110000]01    <2>  mov byte [intprob], i
  1465 00000D1C E968010000          <2>  jmp unhand2
  1466                              <2>  %assign i i+1
  1467 00000D21 C605[BB110000]02    <2>  mov byte [intprob], i
  1468 00000D28 E95C010000          <2>  jmp unhand2
  1469                              <2>  %assign i i+1
  1470 00000D2D C605[BB110000]03    <2>  mov byte [intprob], i
  1471 00000D34 E950010000          <2>  jmp unhand2
  1472                              <2>  %assign i i+1
  1473 00000D39 C605[BB110000]04    <2>  mov byte [intprob], i
  1474 00000D40 E944010000          <2>  jmp unhand2
  1475                              <2>  %assign i i+1
  1476 00000D45 C605[BB110000]05    <2>  mov byte [intprob], i
  1477 00000D4C E938010000          <2>  jmp unhand2
  1478                              <2>  %assign i i+1
  1479 00000D51 C605[BB110000]06    <2>  mov byte [intprob], i
  1480 00000D58 E92C010000          <2>  jmp unhand2
  1481                              <2>  %assign i i+1
  1482 00000D5D C605[BB110000]07    <2>  mov byte [intprob], i
  1483 00000D64 E920010000          <2>  jmp unhand2
  1484                              <2>  %assign i i+1
  1485 00000D69 C605[BB110000]08    <2>  mov byte [intprob], i
  1486 00000D70 E914010000          <2>  jmp unhand2
  1487                              <2>  %assign i i+1
  1488 00000D75 C605[BB110000]09    <2>  mov byte [intprob], i
  1489 00000D7C E908010000          <2>  jmp unhand2
  1490                              <2>  %assign i i+1
  1491 00000D81 C605[BB110000]0A    <2>  mov byte [intprob], i
  1492 00000D88 E9FC000000          <2>  jmp unhand2
  1493                              <2>  %assign i i+1
  1494 00000D8D C605[BB110000]0B    <2>  mov byte [intprob], i
  1495 00000D94 E9F0000000          <2>  jmp unhand2
  1496                              <2>  %assign i i+1
  1497 00000D99 C605[BB110000]0C    <2>  mov byte [intprob], i
  1498 00000DA0 E9E4000000          <2>  jmp unhand2
  1499                              <2>  %assign i i+1
  1500 00000DA5 C605[BB110000]0D    <2>  mov byte [intprob], i
  1501 00000DAC E9D8000000          <2>  jmp unhand2
  1502                              <2>  %assign i i+1
  1503 00000DB1 C605[BB110000]0E    <2>  mov byte [intprob], i
  1504 00000DB8 E9CC000000          <2>  jmp unhand2
  1505                              <2>  %assign i i+1
  1506 00000DBD C605[BB110000]0F    <2>  mov byte [intprob], i
  1507 00000DC4 E9C0000000          <2>  jmp unhand2
  1508                              <2>  %assign i i+1
  1509 00000DC9 C605[BB110000]10    <2>  mov byte [intprob], i
  1510 00000DD0 E9B4000000          <2>  jmp unhand2
  1511                              <2>  %assign i i+1
  1512 00000DD5 C605[BB110000]11    <2>  mov byte [intprob], i
  1513 00000DDC E9A8000000          <2>  jmp unhand2
  1514                              <2>  %assign i i+1
  1515 00000DE1 C605[BB110000]12    <2>  mov byte [intprob], i
  1516 00000DE8 E99C000000          <2>  jmp unhand2
  1517                              <2>  %assign i i+1
  1518 00000DED C605[BB110000]13    <2>  mov byte [intprob], i
  1519 00000DF4 E990000000          <2>  jmp unhand2
  1520                              <2>  %assign i i+1
  1521 00000DF9 C605[BB110000]14    <2>  mov byte [intprob], i
  1522 00000E00 E984000000          <2>  jmp unhand2
  1523                              <2>  %assign i i+1
  1524 00000E05 C605[BB110000]15    <2>  mov byte [intprob], i
  1525 00000E0C E978000000          <2>  jmp unhand2
  1526                              <2>  %assign i i+1
  1527 00000E11 C605[BB110000]16    <2>  mov byte [intprob], i
  1528 00000E18 E96C000000          <2>  jmp unhand2
  1529                              <2>  %assign i i+1
  1530 00000E1D C605[BB110000]17    <2>  mov byte [intprob], i
  1531 00000E24 E960000000          <2>  jmp unhand2
  1532                              <2>  %assign i i+1
  1533 00000E29 C605[BB110000]18    <2>  mov byte [intprob], i
  1534 00000E30 E954000000          <2>  jmp unhand2
  1535                              <2>  %assign i i+1
  1536 00000E35 C605[BB110000]19    <2>  mov byte [intprob], i
  1537 00000E3C E948000000          <2>  jmp unhand2
  1538                              <2>  %assign i i+1
  1539 00000E41 C605[BB110000]1A    <2>  mov byte [intprob], i
  1540 00000E48 E93C000000          <2>  jmp unhand2
  1541                              <2>  %assign i i+1
  1542 00000E4D C605[BB110000]1B    <2>  mov byte [intprob], i
  1543 00000E54 E930000000          <2>  jmp unhand2
  1544                              <2>  %assign i i+1
  1545 00000E59 C605[BB110000]1C    <2>  mov byte [intprob], i
  1546 00000E60 E924000000          <2>  jmp unhand2
  1547                              <2>  %assign i i+1
  1548 00000E65 C605[BB110000]1D    <2>  mov byte [intprob], i
  1549 00000E6C E918000000          <2>  jmp unhand2
  1550                              <2>  %assign i i+1
  1551 00000E71 C605[BB110000]1E    <2>  mov byte [intprob], i
  1552 00000E78 E90C000000          <2>  jmp unhand2
  1553                              <2>  %assign i i+1
  1554 00000E7D C605[BB110000]1F    <2>  mov byte [intprob], i
  1555 00000E84 E900000000          <2>  jmp unhand2
  1556                              <2>  %assign i i+1
  1557                              <1> unhand2:
  1558 00000E89 FA                  <1> 	cli
  1559 00000E8A 1E                  <1> 	push ds
  1560 00000E8B 06                  <1> 	push es
  1561 00000E8C 0FA0                <1> 	push fs
  1562 00000E8E 0FA8                <1> 	push gs
  1563 00000E90 16                  <1> 	push ss
  1564 00000E91 60                  <1> 	pushad
  1565                              <1> %ifdef gui.included
  1566 00000E92 803D[7C8F0000]00    <1> 	cmp byte [guion], 0
  1567 00000E99 0F8432000000        <1> 	je near noguiunhandstuff
  1568 00000E9F 66C705[B5110000]08- <1> 	mov word [locunhandy], 8
  1569 00000EA7 00                  <1>
  1570 00000EA8 66C705[B7110000]08- <1> 	mov word [locunhandx], 8
  1571 00000EB0 00                  <1>
  1572 00000EB1 668B1D[60730000]    <1> 	mov bx, [background]
  1573 00000EB8 66891D[B9110000]    <1> 	mov [backgroundcache], bx
  1574 00000EBF C605[995A0000]01    <1> 	mov byte [mousedisabled],1
  1575 00000EC6 66BB00F8            <1> 	mov bx, 1111100000000000b
  1576 00000ECA 66891D[60730000]    <1> 	mov [background], bx
  1577                              <1> noguiunhandstuff:
  1578                              <1> %endif
  1579 00000ED1 89E6                <1> 	mov esi, esp
  1580 00000ED3 8935[A9110000]      <1> 	mov [espfirst], esi
  1581 00000ED9 81C6BC000000        <1> 	add esi, ((unhndrgend - unhndrg)/15)*4
  1582 00000EDF 8935[A5110000]      <1> 	mov [esploc], esi
  1583 00000EE5 BE[CA110000]        <1> 	mov esi, unhandmsg
  1584 00000EEA 8935[AD110000]      <1> 	mov [esiloc], esi
  1585 00000EF0 31C9                <1> 	xor ecx, ecx
  1586 00000EF2 8A0D[BB110000]      <1> 	mov cl, [intprob]
  1587 00000EF8 BB[99150000]        <1> 	mov ebx, errortypes
  1588 00000EFD C1E102              <1> 	shl ecx, 2
  1589 00000F00 01CB                <1> 	add ebx, ecx
  1590 00000F02 81FB[D9150000]      <1> 	cmp ebx, errortypesend
  1591 00000F08 7205                <1> 	jb gooderrortype
  1592 00000F0A BB[D9150000]        <1> 	mov ebx, errortypesend
  1593                              <1> gooderrortype:
  1594 00000F0F 8B33                <1> 	mov esi, [ebx]
  1595                              <1> %ifdef gui.included
  1596 00000F11 803D[7C8F0000]00    <1> 	cmp byte [guion], 0
  1597 00000F18 0F842D000000        <1> 	je near errortext
  1598 00000F1E 668B0D[B5110000]    <1> 	mov cx, [locunhandy]
  1599 00000F25 668B15[B7110000]    <1> 	mov dx, [locunhandx]
  1600 00000F2C 66B80100            <1> 	mov ax, 1
  1601 00000F30 6631DB              <1> 	xor bx, bx
  1602 00000F33 E8856A0000          <1> 	call showstring2
  1603 00000F38 66890D[B5110000]    <1> 	mov [locunhandy], cx
  1604 00000F3F 668915[B7110000]    <1> 	mov [locunhandx], dx
  1605 00000F46 E905000000          <1> 	jmp errortextdone
  1606                              <1> %endif
  1607                              <1> errortext:
  1608 00000F4B E8100E0000          <1> 	call print		;;get the error message and print it
  1609                              <1> errortextdone:
  1610 00000F50 31C9                <1> 	xor ecx, ecx
  1611 00000F52 8A0D[BB110000]      <1> 	mov cl, [intprob]
  1612 00000F58 E8E1010000          <1> 	call expdump
  1613                              <1> dumpstack:
  1614 00000F5D 8B35[A5110000]      <1> 	mov esi, [esploc]
  1615 00000F63 39E6                <1> 	cmp esi, esp
  1616 00000F65 7216                <1> 	jb donedump
  1617 00000F67 368B0E              <1> 	mov ecx, [ss:esi]
  1618 00000F6A 81EE04000000        <1> 	sub esi, 4
  1619 00000F70 8935[A5110000]      <1> 	mov [esploc], esi
  1620 00000F76 E8C3010000          <1> 	call expdump
  1621 00000F7B EBE0                <1> 	jmp dumpstack
  1622                              <1> donedump:
  1623 00000F7D 0F20C1              <1> 	mov ecx, cr0
  1624 00000F80 E8B9010000          <1> 	call expdump
  1625 00000F85 0F20D1              <1> 	mov ecx, cr2
  1626 00000F88 E8B1010000          <1> 	call expdump
  1627 00000F8D 0F20D9              <1> 	mov ecx, cr3
  1628 00000F90 E8A9010000          <1> 	call expdump
  1629 00000F95 0F20E1              <1> 	mov ecx, cr4
  1630 00000F98 E8A1010000          <1> 	call expdump
  1631 00000F9D 0F00C9              <1> 	str ecx
  1632 00000FA0 E899010000          <1> 	call expdump
  1633 00000FA5 0F010D[C4110000]    <1> 	sidt [igdtcache]
  1634 00000FAC 8B0D[C6110000]      <1> 	mov ecx, [igdtcache + 2]
  1635 00000FB2 E887010000          <1> 	call expdump
  1636 00000FB7 0F0105[C4110000]    <1> 	sgdt [igdtcache]
  1637 00000FBE 8B0D[C6110000]      <1> 	mov ecx, [igdtcache + 2]
  1638 00000FC4 E875010000          <1> 	call expdump
  1639 00000FC9 0F00C1              <1> 	sldt ecx
  1640 00000FCC E86D010000          <1> 	call expdump
  1641 00000FD1 8B35[A5110000]      <1> 	mov esi, [esploc]
  1642 00000FD7 368B7C2434          <1> 	mov edi, [ss:esp + 52]
  1643 00000FDC 81C710000000        <1> 	add edi, 16
  1644 00000FE2 893D[C0110000]      <1> 	mov [codelocend], edi
  1645 00000FE8 81EF20000000        <1> 	sub edi, 32
  1646                              <1> dumpcodeloop:
  1647 00000FEE 893D[BC110000]      <1> 	mov [codeloc], edi
  1648 00000FF4 8B0F                <1> 	mov ecx, [edi]
  1649 00000FF6 E843010000          <1> 	call expdump
  1650 00000FFB 8B3D[BC110000]      <1> 	mov edi, [codeloc]
  1651 00001001 81C704000000        <1> 	add edi, 4
  1652 00001007 3B3D[C0110000]      <1> 	cmp edi, [codelocend]
  1653 0000100D 72DF                <1> 	jb dumpcodeloop
  1654 0000100F BE[CF100000]        <1> 	mov esi, backtoosmsg
  1655                              <1> %ifdef gui.included
  1656 00001014 803D[7C8F0000]00    <1> 	cmp byte [guion], 0
  1657 0000101B 741F                <1> 	je backtomsg
  1658                              <1> guibacktomsg:
  1659 0000101D 668B15[B7110000]    <1> 	mov dx, [locunhandx]
  1660 00001024 668B0D[B5110000]    <1> 	mov cx, [locunhandy]
  1661 0000102B 66B80100            <1> 	mov ax, 1
  1662 0000102F 6631DB              <1> 	xor bx, bx
  1663 00001032 E886690000          <1> 	call showstring2
  1664 00001037 E905000000          <1> 	jmp backtomsgdone
  1665                              <1> backtomsg:
  1666                              <1> %endif
  1667 0000103C E81F0D0000          <1> 	call print
  1668                              <1> backtomsgdone:
  1669 00001041 30C0                <1> 	xor al, al
  1670 00001043 E815130000          <1> 	call rdcharint
  1671 00001048 803D[BB110000]03    <1> 	cmp byte [intprob], 3
  1672 0000104F 7541                <1> 	jne nodebugint
  1673                              <1> %ifdef gui.included
  1674 00001051 803D[7C8F0000]00    <1> 	cmp byte [guion], 0
  1675 00001058 7427                <1> 	je nodebuggui
  1676 0000105A 668B1D[B9110000]    <1> 	mov bx, [backgroundcache]
  1677 00001061 66891D[60730000]    <1> 	mov [background], bx
  1678 00001068 6631DB              <1> 	xor bx, bx
  1679 0000106B C605[995A0000]00    <1> 	mov byte [mousedisabled], 0
  1680 00001072 E85A620000          <1> 	call guiclear
  1681 00001077 E8E8620000          <1> 	call reloadallgraphics
  1682 0000107C E874180000          <1> 	call termcopy
  1683                              <1> nodebuggui:
  1684                              <1> %endif
  1685 00001081 8B35[A9110000]      <1> 	mov esi, [espfirst]
  1686 00001087 89F4                <1> 	mov esp, esi
  1687 00001089 61                  <1> 	popad
  1688 0000108A 17                  <1> 	pop ss
  1689 0000108B 0FA9                <1> 	pop gs
  1690 0000108D 0FA1                <1> 	pop fs
  1691 0000108F 07                  <1> 	pop es
  1692 00001090 1F                  <1> 	pop ds
  1693 00001091 CF                  <1> 	iret
  1694                              <1> nodebugint:
  1695 00001092 61                  <1> 	popad
  1696 00001093 17                  <1> 	pop ss
  1697 00001094 0FA9                <1> 	pop gs
  1698 00001096 0FA1                <1> 	pop fs
  1699 00001098 07                  <1> 	pop es
  1700 00001099 1F                  <1> 	pop ds
  1701                              <1> %ifdef gui.included
  1702 0000109A 803D[7C8F0000]00    <1> 	cmp byte [guion], 0
  1703 000010A1 7427                <1> 	je returnunhandgui
  1704 000010A3 668B1D[B9110000]    <1> 	mov bx, [backgroundcache]
  1705 000010AA 66891D[60730000]    <1> 	mov [background], bx
  1706 000010B1 6631DB              <1> 	xor bx, bx
  1707 000010B4 C605[995A0000]00    <1> 	mov byte [mousedisabled], 0
  1708 000010BB E811620000          <1> 	call guiclear
  1709 000010C0 E89F620000          <1> 	call reloadallgraphics
  1710 000010C5 E82B180000          <1> 	call termcopy
  1711                              <1> %endif
  1712                              <1> returnunhandgui:
  1713 000010CA E96C1C0000          <1> 	jmp nwcmd
  1714 000010CF 506C6561736520706F- <1> backtoosmsg db "Please post any problems in the Issues section at solleros.googlecode.com",10
  1715 000010D8 737420616E79207072- <1>
  1716 000010E1 6F626C656D7320696E- <1>
  1717 000010EA 207468652049737375- <1>
  1718 000010F3 65732073656374696F- <1>
  1719 000010FC 6E20617420736F6C6C- <1>
  1720 00001105 65726F732E676F6F67- <1>
  1721 0000110E 6C65636F64652E636F- <1>
  1722 00001117 6D0A                <1>
  1723 00001119 507265737320616E79- <1> 			db "Press any key to return to SollerOS",10,0
  1724 00001122 206B657920746F2072- <1>
  1725 0000112B 657475726E20746F20- <1>
  1726 00001134 536F6C6C65724F530A- <1>
  1727 0000113D 00                  <1>
  1728                              <1> expdump:
  1729 0000113E 8B35[AD110000]      <1> 	mov esi, [esiloc]
  1730 00001144 89F7                <1> 	mov edi, esi
  1731 00001146 81C70F000000        <1> 	add edi, 15
  1732 0000114C 81C604000000        <1> 	add esi, 4
  1733 00001152 893D[AD110000]      <1> 	mov [esiloc], edi
  1734 00001158 81EF03000000        <1> 	sub edi, 3
  1735 0000115E E83F200000          <1> 	call converthex
  1736 00001163 81EE04000000        <1> 	sub esi, 4
  1737                              <1> %ifdef gui.included
  1738 00001169 803D[7C8F0000]00    <1> 	cmp byte [guion], 0
  1739 00001170 0F8429000000        <1> 	je near expdumptext
  1740 00001176 668B0D[B5110000]    <1> 	mov cx, [locunhandy]
  1741 0000117D 668B15[B7110000]    <1> 	mov dx, [locunhandx]
  1742 00001184 66B80100            <1> 	mov ax, 1
  1743 00001188 6631DB              <1> 	xor bx, bx
  1744 0000118B E82D680000          <1> 	call showstring2
  1745 00001190 66890D[B5110000]    <1> 	mov [locunhandy], cx
  1746 00001197 668915[B7110000]    <1> 	mov [locunhandx], dx
  1747 0000119E C3                  <1> 	ret
  1748                              <1> %endif
  1749                              <1> expdumptext:
  1750 0000119F E8BC0B0000          <1> 	call print
  1751 000011A4 C3                  <1> 	ret
  1752 000011A5 00000000            <1> esploc dd 0
  1753 000011A9 00000000            <1> espfirst dd 0
  1754 000011AD 00000000            <1> esiloc dd 0
  1755 000011B1 00000000            <1> esiregbuf dd 0
  1756 000011B5 0100                <1> locunhandy dw 1
  1757 000011B7 0100                <1> locunhandx dw 1
  1758 000011B9 0000                <1> backgroundcache dw 0
  1759 000011BB 00                  <1> intprob db 0
  1760 000011BC 00000000            <1> codeloc dd 0
  1761 000011C0 00000000            <1> codelocend dd 0
  1762 000011C4 000000000000        <1> igdtcache dw 0,0,0
  1763                              <1> 	unhandmsg:	
  1764 000011CA 494E543D3030303030- <1> 			db "INT=00000000",255,10,0
  1765 000011D3 303030FF0A00        <1>
  1766                              <1> unhndrg:
  1767 000011D9 FFFFFFFF3030303030- <1> 	times 7 db 255,255,255,255,"00000000  ",0	;;this dumps the stack before the stack frame in question
  1768 000011E2 303030202000<rept>  <1>
  1769 00001242 FFFFFFFF3030303030- <1> 			db 255,255,255,255,"00000000",255,10,0
  1770 0000124B 303030FF0A00        <1>
  1771 00001251 FFFFFFFF3030303030- <1> 	times 7 db 255,255,255,255,"00000000  ",0	;;this dumps the stack before the stack frame in question
  1772 0000125A 303030202000<rept>  <1>
  1773 000012BA FFFFFFFF3030303030- <1> 			db 255,255,255,255,"00000000",255,10,0
  1774 000012C3 303030FF0A00        <1>
  1775 000012C9 FFFFFFFF3030303030- <1> 	times 7 db 255,255,255,255,"00000000  ",0	;;this dumps the stack before the stack frame in question
  1776 000012D2 303030202000<rept>  <1>
  1777 00001332 FFFFFFFF3030303030- <1> 			db 255,255,255,255,"00000000",255,10,0
  1778 0000133B 303030FF0A00        <1>
  1779 00001341 FFFFFFFF3030303030- <1> 	times 7 db 255,255,255,255,"00000000  ",0	;;this dumps the stack before the stack frame in question
  1780 0000134A 303030202000<rept>  <1>
  1781 000013AA FFFFFFFF3030303030- <1> 			db 255,255,255,255,"00000000",255,10,0
  1782 000013B3 303030FF0A00        <1>
  1783                              <1> unhandregs:
  1784 000013B9 45464C3D3030303030- <1> 			db "EFL=00000000  ",0
  1785 000013C2 303030202000        <1>
  1786 000013C8 43533A3D3030303030- <1> 			db "CS:=00000000  ",0
  1787 000013D1 303030202000        <1>
  1788 000013D7 4549503D3030303030- <1> 			db "EIP=00000000",255,10,0
  1789 000013E0 303030FF0A00        <1>
  1790 000013E6 44533A3D3030303030- <1> 			db "DS:=00000000  ",0
  1791 000013EF 303030202000        <1>
  1792 000013F5 45533A3D3030303030- <1> 			db "ES:=00000000  ",0
  1793 000013FE 303030202000        <1>
  1794 00001404 46533A3D3030303030- <1> 			db "FS:=00000000  ",0
  1795 0000140D 303030202000        <1>
  1796 00001413 47533A3D3030303030- <1> 			db "GS:=00000000  ",0
  1797 0000141C 303030202000        <1>
  1798 00001422 53533A3D3030303030- <1> 			db "SS:=00000000",255,10,0
  1799 0000142B 303030FF0A00        <1>
  1800 00001431 4541583D3030303030- <1> 			db "EAX=00000000  ",0
  1801 0000143A 303030202000        <1>
  1802 00001440 4543583D3030303030- <1> 			db "ECX=00000000  ",0
  1803 00001449 303030202000        <1>
  1804 0000144F 4544583D3030303030- <1> 			db "EDX=00000000  ",0
  1805 00001458 303030202000        <1>
  1806 0000145E 4542583D3030303030- <1> 			db "EBX=00000000",255,10,0
  1807 00001467 303030FF0A00        <1>
  1808 0000146D 4553503D3030303030- <1> 			db "ESP=00000000  ",0
  1809 00001476 303030202000        <1>
  1810 0000147C 4542503D3030303030- <1> 			db "EBP=00000000  ",0
  1811 00001485 303030202000        <1>
  1812 0000148B 4553493D3030303030- <1> 			db "ESI=00000000  ",0
  1813 00001494 303030202000        <1>
  1814 0000149A 4544493D3030303030- <1> unhndrgend:	db "EDI=00000000",255,10,0
  1815 000014A3 303030FF0A00        <1>
  1816 000014A9 4352303D3030303030- <1> 			db "CR0=00000000  ",0
  1817 000014B2 303030202000        <1>
  1818 000014B8 4352323D3030303030- <1> 			db "CR2=00000000  ",0
  1819 000014C1 303030202000        <1>
  1820 000014C7 4352333D3030303030- <1> 			db "CR3=00000000  ",0
  1821 000014D0 303030202000        <1>
  1822 000014D6 4352343D3030303030- <1> 			db "CR4=00000000",255,10,0
  1823 000014DF 303030FF0A00        <1>
  1824 000014E5 54523A3D3030303030- <1> 			db "TR:=00000000  ",0
  1825 000014EE 303030202000        <1>
  1826 000014F4 4944543D3030303030- <1> 			db "IDT=00000000  ",0
  1827 000014FD 303030202000        <1>
  1828 00001503 4744543D3030303030- <1> 			db "GDT=00000000  ",0
  1829 0000150C 303030202000        <1>
  1830 00001512 4C44543D3030303030- <1> 			db "LDT=00000000",255,10,0
  1831 0000151B 303030FF0A00        <1>
  1832 00001521 FFFFFFFF3030303030- <1> unhandcode: times 2 db 255,255,255,255,"00000000  ",0	;;this dumps the code before and after the interrupt in question
  1833 0000152A 303030202000<rept>  <1>
  1834 0000153F FFFFFFFF3030303030- <1> 			db 255,255,255,255,"00000000 ",255,0
  1835 00001548 30303020FF00        <1>
  1836 0000154E FFFFFF5B3030303030- <1> 			db 255,255,255,"[00000000] ",0
  1837 00001557 3030305D2000        <1>
  1838 0000155D FFFFFFFF3030303030- <1> 			times 3 db 255,255,255,255,"00000000  ",0
  1839 00001566 303030202000<rept>  <1>
  1840 0000158A FFFFFFFF3030303030- <1> 			db 255,255,255,255,"00000000",255,10,0
  1841 00001593 303030FF0A00        <1>
  1842                              <1> unhandmsgend:
  1843                              <1> 
  1844                              <1> errortypes:
  1845 00001599 [DD150000]          <1> 			dd err0
  1846 0000159D [46160000]          <1> 			dd err1
  1847 000015A1 [A7160000]          <1> 			dd err2
  1848 000015A5 [FC160000]          <1> 			dd err3
  1849 000015A9 [60170000]          <1> 			dd err4
  1850 000015AD [B2170000]          <1> 			dd err5
  1851 000015B1 [1C180000]          <1> 			dd err6
  1852 000015B5 [84180000]          <1> 			dd err7
  1853 000015B9 [CE180000]          <1> 			dd err8
  1854 000015BD [2B190000]          <1> 			dd err9
  1855 000015C1 [84190000]          <1> 			dd err10
  1856 000015C5 [CF190000]          <1> 			dd err11
  1857 000015C9 [1F1A0000]          <1> 			dd err12
  1858 000015CD [781A0000]          <1> 			dd err13
  1859 000015D1 [DB1A0000]          <1> 			dd err14
  1860 000015D5 [171B0000]          <1> 			dd err15
  1861                              <1> errortypesend:
  1862 000015D9 [A21B0000]          <1> 			dd unknownerror
  1863                              <1> 			
  1864 000015DD 4469766973696F6E20- <1> err0	db "Division by zero:",10
  1865 000015E6 6279207A65726F3A0A  <1>
  1866 000015EF 546563686E6963616C- <1> 		db "Technically lim a÷x = ∞ when a is any real number. Happy Easter!",10
  1867 000015F8 6C79206C696D2061C3- <1>
  1868 00001601 B778203D20E2889E20- <1>
  1869 0000160A 7768656E2061206973- <1>
  1870 00001613 20616E79207265616C- <1>
  1871 0000161C 206E756D6265722E20- <1>
  1872 00001625 486170707920456173- <1>
  1873 0000162E 746572210A          <1>
  1874 00001633 202020202020202020- <1> 		db "            x→0",10,0
  1875 0000163C 20202078E28692300A- <1>
  1876 00001645 00                  <1>
  1877                              <1> 		
  1878 00001646 53696E676C652D7374- <1> err1	db "Single-step/Breakpoint:",10
  1879 0000164F 65702F427265616B70- <1>
  1880 00001658 6F696E743A0A        <1>
  1881 0000165E 4120627265616B706F- <1> 		db "A breakpoint fault, breakpoint trap, or single-step trap was triggered.",10,0
  1882 00001667 696E74206661756C74- <1>
  1883 00001670 2C20627265616B706F- <1>
  1884 00001679 696E7420747261702C- <1>
  1885 00001682 206F722073696E676C- <1>
  1886 0000168B 652D73746570207472- <1>
  1887 00001694 617020776173207472- <1>
  1888 0000169D 696767657265642E0A- <1>
  1889 000016A6 00                  <1>
  1890                              <1> 		
  1891 000016A7 4E6F6E6D61736B6162- <1> err2	db "Nonmaskable interrupt:",10
  1892 000016B0 6C6520696E74657272- <1>
  1893 000016B9 7570743A0A          <1>
  1894 000016BE 412068617264776172- <1> 		db "A hardware interrupt was triggered that could not be masked.",10,0
  1895 000016C7 6520696E7465727275- <1>
  1896 000016D0 707420776173207472- <1>
  1897 000016D9 696767657265642074- <1>
  1898 000016E2 68617420636F756C64- <1>
  1899 000016EB 206E6F74206265206D- <1>
  1900 000016F4 61736B65642E0A00    <1>
  1901                              <1> 		
  1902 000016FC 427265616B706F696E- <1> err3	db "Breakpoint:",10
  1903 00001705 743A0A              <1>
  1904 00001708 5468697320696E7465- <1> 		db "This interrupt is used in programs to show the stack and registers and can be",10
  1905 00001711 727275707420697320- <1>
  1906 0000171A 7573656420696E2070- <1>
  1907 00001723 726F6772616D732074- <1>
  1908 0000172C 6F2073686F77207468- <1>
  1909 00001735 6520737461636B2061- <1>
  1910 0000173E 6E6420726567697374- <1>
  1911 00001747 65727320616E642063- <1>
  1912 00001750 616E2062650A        <1>
  1913 00001756 69676E6F7265642E0A- <1> 		db "ignored.",10,0
  1914 0000175F 00                  <1>
  1915                              <1> 		
  1916 00001760 4F766572666C6F773A- <1> err4	db "Overflow:",10
  1917 00001769 0A                  <1>
  1918 0000176A 5468652070726F6365- <1> 		db "The processor ran into an INTO instruction with the overflow flag set.",10,0
  1919 00001773 73736F722072616E20- <1>
  1920 0000177C 696E746F20616E2049- <1>
  1921 00001785 4E544F20696E737472- <1>
  1922 0000178E 756374696F6E207769- <1>
  1923 00001797 746820746865206F76- <1>
  1924 000017A0 6572666C6F7720666C- <1>
  1925 000017A9 6167207365742E0A00  <1>
  1926                              <1> 		
  1927 000017B2 426F756E6473206368- <1> err5	db "Bounds check:",10
  1928 000017BB 65636B3A0A          <1>
  1929 000017C0 5468652070726F6365- <1> 		db "The processor rebounded from a BOUND instruction run on an operand that was out",10
  1930 000017C9 73736F72207265626F- <1>
  1931 000017D2 756E6465642066726F- <1>
  1932 000017DB 6D206120424F554E44- <1>
  1933 000017E4 20696E737472756374- <1>
  1934 000017ED 696F6E2072756E206F- <1>
  1935 000017F6 6E20616E206F706572- <1>
  1936 000017FF 616E64207468617420- <1>
  1937 00001808 776173206F75740A    <1>
  1938 00001810 6F6620626F756E6473- <1> 		db "of bounds.",10,0
  1939 00001819 2E0A00              <1>
  1940                              <1> 		
  1941 0000181C 496E76616C6964206F- <1> err6	db "Invalid opcode:",10
  1942 00001825 70636F64653A0A      <1>
  1943 0000182C 5468652070726F6365- <1> 		db "The processor has no idea what it was trying to execute. Don't run SSE4 code",10
  1944 00001835 73736F722068617320- <1>
  1945 0000183E 6E6F20696465612077- <1>
  1946 00001847 686174206974207761- <1>
  1947 00001850 7320747279696E6720- <1>
  1948 00001859 746F20657865637574- <1>
  1949 00001862 652E20446F6E277420- <1>
  1950 0000186B 72756E205353453420- <1>
  1951 00001874 636F64650A          <1>
  1952 00001879 6F6E20343836277321- <1> 		db "on 486's!",10,0
  1953 00001882 0A00                <1>
  1954                              <1> 		
  1955 00001884 436F70726F63657373- <1> err7	db "Coprocessor not available:",10
  1956 0000188D 6F72206E6F74206176- <1>
  1957 00001896 61696C61626C653A0A  <1>
  1958 0000189F 446F6E277420796F75- <1> 		db "Don't you know they don't make those anymore!",10,0
  1959 000018A8 206B6E6F7720746865- <1>
  1960 000018B1 7920646F6E2774206D- <1>
  1961 000018BA 616B652074686F7365- <1>
  1962 000018C3 20616E796D6F726521- <1>
  1963 000018CC 0A00                <1>
  1964                              <1> 		
  1965 000018CE 446F75626C65206661- <1> err8	db "Double fault:",10
  1966 000018D7 756C743A0A          <1>
  1967 000018DC 546865206578636570- <1> 		db "The exception handler could not handle that it could not handle an exception.",10,0
  1968 000018E5 74696F6E2068616E64- <1>
  1969 000018EE 6C657220636F756C64- <1>
  1970 000018F7 206E6F742068616E64- <1>
  1971 00001900 6C6520746861742069- <1>
  1972 00001909 7420636F756C64206E- <1>
  1973 00001912 6F742068616E646C65- <1>
  1974 0000191B 20616E206578636570- <1>
  1975 00001924 74696F6E2E0A00      <1>
  1976                              <1> 		
  1977 0000192B 436F70726F63657373- <1> err9	db "Coprocessor segment overrun:",10,0
  1978 00001934 6F72207365676D656E- <1>
  1979 0000193D 74206F76657272756E- <1>
  1980 00001946 3A0A00              <1>
  1981 00001949 54686973206E657665- <1> 		db "This never happens in modern computers, and never should.",10,0
  1982 00001952 722068617070656E73- <1>
  1983 0000195B 20696E206D6F646572- <1>
  1984 00001964 6E20636F6D70757465- <1>
  1985 0000196D 72732C20616E64206E- <1>
  1986 00001976 657665722073686F75- <1>
  1987 0000197F 6C642E0A00          <1>
  1988                              <1> 
  1989 00001984 496E76616C69642054- <1> err10	db "Invalid TSS:",10
  1990 0000198D 53533A0A            <1>
  1991 00001991 546865205453532074- <1> 		db "The TSS that was switched to is invalid. Nothing funny here.",10,0
  1992 0000199A 686174207761732073- <1>
  1993 000019A3 776974636865642074- <1>
  1994 000019AC 6F20697320696E7661- <1>
  1995 000019B5 6C69642E204E6F7468- <1>
  1996 000019BE 696E672066756E6E79- <1>
  1997 000019C7 20686572652E0A00    <1>
  1998                              <1> 		
  1999 000019CF 5365676D656E74206E- <1> err11	db "Segment not present:",10
  2000 000019D8 6F742070726573656E- <1>
  2001 000019E1 743A0A              <1>
  2002 000019E4 546865207072657365- <1> 		db "The present bit of the segment descriptor is set to zero.",10,0
  2003 000019ED 6E7420626974206F66- <1>
  2004 000019F6 20746865207365676D- <1>
  2005 000019FF 656E74206465736372- <1>
  2006 00001A08 6970746F7220697320- <1>
  2007 00001A11 73657420746F207A65- <1>
  2008 00001A1A 726F2E0A00          <1>
  2009                              <1> 		
  2010 00001A1F 537461636B20657863- <1> err12	db "Stack exception:",10
  2011 00001A28 657074696F6E3A0A    <1>
  2012 00001A30 546865205353206465- <1> 		db "The SS descriptor is invalid or not present or its limit is too small.",10,0
  2013 00001A39 7363726970746F7220- <1>
  2014 00001A42 697320696E76616C69- <1>
  2015 00001A4B 64206F72206E6F7420- <1>
  2016 00001A54 70726573656E74206F- <1>
  2017 00001A5D 7220697473206C696D- <1>
  2018 00001A66 697420697320746F6F- <1>
  2019 00001A6F 20736D616C6C2E0A00  <1>
  2020                              <1> 		
  2021 00001A78 47656E6572616C2070- <1> err13	db "General protection violation:",10
  2022 00001A81 726F74656374696F6E- <1>
  2023 00001A8A 2076696F6C6174696F- <1>
  2024 00001A93 6E3A0A              <1>
  2025 00001A96 596F752076696F6C61- <1> 		db "You violated the computer. Step away slowly. The FBI is on its way.",10,0
  2026 00001A9F 746564207468652063- <1>
  2027 00001AA8 6F6D70757465722E20- <1>
  2028 00001AB1 537465702061776179- <1>
  2029 00001ABA 20736C6F776C792E20- <1>
  2030 00001AC3 546865204642492069- <1>
  2031 00001ACC 73206F6E2069747320- <1>
  2032 00001AD5 7761792E0A00        <1>
  2033                              <1> 		
  2034 00001ADB 50616765206661756C- <1> err14	db "Page fault:",10
  2035 00001AE4 743A0A              <1>
  2036 00001AE7 546865207061676520- <1> 		db "The page that was requested was not available.",10,0
  2037 00001AF0 746861742077617320- <1>
  2038 00001AF9 726571756573746564- <1>
  2039 00001B02 20776173206E6F7420- <1>
  2040 00001B0B 617661696C61626C65- <1>
  2041 00001B14 2E0A00              <1>
  2042                              <1> 		
  2043 00001B17 526573657276656420- <1> err15	db "Reserved for Plan R:",10
  2044 00001B20 666F7220506C616E20- <1>
  2045 00001B29 523A0A              <1>
  2046 00001B2C 5468697320696E7465- <1> 		db "This interrupt is reserved for usage only by the military when it is necessary",10
  2047 00001B35 727275707420697320- <1>
  2048 00001B3E 726573657276656420- <1>
  2049 00001B47 666F72207573616765- <1>
  2050 00001B50 206F6E6C7920627920- <1>
  2051 00001B59 746865206D696C6974- <1>
  2052 00001B62 617279207768656E20- <1>
  2053 00001B6B 6974206973206E6563- <1>
  2054 00001B74 6573736172790A      <1>
  2055 00001B7B 746F20696E69746961- <1> 		db "to initiate a full-scale coup d'",130,"tat.",10,0
  2056 00001B84 746520612066756C6C- <1>
  2057 00001B8D 2D7363616C6520636F- <1>
  2058 00001B96 757020642782746174- <1>
  2059 00001B9F 2E0A00              <1>
  2060                              <1> 		
  2061 00001BA2 576861742074686520- <1> unknownerror db "What the hell just happened? Is everyone okay? Hard drive? Video card?",10
  2062 00001BAB 68656C6C206A757374- <1>
  2063 00001BB4 2068617070656E6564- <1>
  2064 00001BBD 3F2049732065766572- <1>
  2065 00001BC6 796F6E65206F6B6179- <1>
  2066 00001BCF 3F2048617264206472- <1>
  2067 00001BD8 6976653F2056696465- <1>
  2068 00001BE1 6F20636172643F0A    <1>
  2069 00001BE9 4D656D6F72793F2041- <1> 			db	"Memory? Are you there?",10,0
  2070 00001BF2 726520796F75207468- <1>
  2071 00001BFB 6572653F0A00        <1>
  2072                              <1> %else
  2073                              <1> unhand:	
  2074                              <1> 	%assign i 0
  2075                              <1> 	%rep 32
  2076                              <1> 	mov byte [intprob], i
  2077                              <1> 	jmp unhand2
  2078                              <1> 	%assign i i+1
  2079                              <1> 	%endrep
  2080                              <1> unhand2:
  2081                              <1> 	cmp byte [intprob], 3
  2082                              <1> 	je handled	;if it is a debug interrupt, it is auto handled
  2083                              <1> 	mov ebx, 0xDEADCD00 ;this shows that an exception occured even though more detailed info cannot be shown
  2084                              <1> 						;CD stands for the interrupt code, DEAD shows that the program died because of the int
  2085                              <1> 	mov bl, [intprob]
  2086                              <1> 	jmp exitprog
  2087                              <1> intprob db 0
  2088                              <1> %endif
  2089                                      %include "source/ints.asm"
  2090                              <1> newints:	;for great justice
  2091 00001C01 80FC00              <1> 	cmp ah, 0
  2092 00001C04 0F84A3000000        <1> 	je near exitprog   ;kills app
  2093 00001C0A 80FC01              <1> 	cmp ah, 1
  2094 00001C0D 0F8422010000        <1> 	je near prntstr  ;print string
  2095 00001C13 80FC02              <1> 	cmp ah, 2
  2096 00001C16 0F84C0010000        <1> 	je near readstr	;read string
  2097 00001C1C 80FC03              <1> 	cmp ah, 3
  2098 00001C1F 0F84E0010000        <1> 	je near clearscrn	;clear screen
  2099 00001C25 80FC04              <1> 	cmp ah, 4
  2100 00001C28 0F8455020000        <1> 	je near prntreadstr	;read and print string
  2101 00001C2E 80FC05              <1> 	cmp ah, 5
  2102 00001C31 0F841A070000        <1> 	je near readchar	;get char
  2103 00001C37 80FC06              <1> 	cmp ah, 6
  2104 00001C3A 0F8481070000        <1> 	je near prntchar	;print char
  2105 00001C40 80FC07              <1> 	cmp ah, 7
  2106 00001C43 0F849E090000        <1> 	je near openfile	;read file
  2107                              <1> ;	cmp ah, 8
  2108                              <1> ;	je near closefile	;close file
  2109 00001C49 80FC09              <1> 	cmp ah, 9
  2110 00001C4C 0F849F090000        <1> 	je near num2str	;convert number to string
  2111 00001C52 80FC0A              <1> 	cmp ah, 10
  2112 00001C55 0F84AE090000        <1> 	je near str2num	;convert string to number
  2113                              <1> %ifdef threads.included
  2114 00001C5B 80FC0B              <1> 	cmp ah, 11
  2115 00001C5E 0F84B1090000        <1> 	je near forkthread	;create thread
  2116                              <1> %endif
  2117 00001C64 80FC0C              <1> 	cmp ah, 12
  2118 00001C67 0F847F0A0000        <1> 	je near gettime	;get time
  2119 00001C6D 80FC0D              <1> 	cmp ah, 13
  2120 00001C70 0F848B0A0000        <1> 	je near settime	;set time
  2121 00001C76 80FC0E              <1> 	cmp ah, 14
  2122 00001C79 0F84920A0000        <1> 	je near runcmd	;run program
  2123 00001C7F 80FC0F              <1> 	cmp ah, 15
  2124 00001C82 0F849E0A0000        <1> 	je near proginfo ;get program info-location of name/options/number of options/environmental vars
  2125 00001C88 80FC10              <1> 	cmp ah, 16
  2126 00001C8B 0F84C00A0000        <1> 	je near hooksig	;hook code to a signal
  2127                              <1> %ifdef gui.included
  2128 00001C91 80FC11              <1> 	cmp ah, 17
  2129 00001C94 0F84C70A0000        <1> 	je near guiint	;GUI operations
  2130                              <1> %endif
  2131                              <1> %ifdef sound.included
  2132 00001C9A 80FC12              <1> 	cmp ah, 18
  2133 00001C9D 0F84480C0000        <1> 	je near soundint	;sound operations
  2134                              <1> %endif
  2135                              <1> %ifdef network.included
  2136 00001CA3 80FC13              <1> 	cmp ah, 19
  2137 00001CA6 0F84440C0000        <1> 	je near netint	;networking operations
  2138                              <1> %endif
  2139 00001CAC CF                  <1> 	iret
  2140                              <1> 	%include 'source/interrupts/0_exitprog.asm'
  2141                              <2> exitprog:
  2142 00001CAD 66B83000            <2> 	mov ax, NEW_DATA_SEL
  2143 00001CB1 8ED8                <2> 	mov ds, ax
  2144 00001CB3 8EC0                <2> 	mov es, ax
  2145 00001CB5 8EE0                <2> 	mov fs, ax
  2146 00001CB7 66B82000            <2> 	mov ax, SYS_DATA_SEL
  2147 00001CBB 8EE8                <2> 	mov gs, ax
  2148 00001CBD C705[F46B0000]0000- <2> 	mov dword [currentthread], 0
  2149 00001CC5 0000                <2>
  2150 00001CC7 C705[EF6B0000]0400- <2> 	mov dword [lastthread], 4
  2151 00001CCF 0000                <2>
  2152 00001CD1 C605[F36B0000]00    <2> 	mov byte [threadson], 0 ;for now i need to use this
  2153 00001CD8 8B25[DCA70300]      <2> 	mov esp, [previousstack] ;and this
  2154 00001CDE 81FB00000000        <2> 	cmp ebx, 0
  2155 00001CE4 0F8501000000        <2> 	jne near .error
  2156 00001CEA C3                  <2> 	ret
  2157                              <2> .error:
  2158 00001CEB 89D9                <2> 	mov ecx, ebx
  2159 00001CED B006                <2> 	mov al, 6
  2160 00001CEF A2[00320000]        <2> 	mov [firsthexshown], al
  2161 00001CF4 51                  <2> 	push ecx
  2162 00001CF5 BE[101D0000]        <2> 	mov esi, .msg1
  2163 00001CFA E855000000          <2> 	call printhighlight
  2164 00001CFF 59                  <2> 	pop ecx
  2165 00001D00 E810150000          <2> 	call showhex
  2166 00001D05 BE[251D0000]        <2> 	mov esi, .msg2
  2167 00001D0A E845000000          <2> 	call printhighlight
  2168 00001D0F C3                  <2> 	ret
  2169                              <2> 	
  2170 00001D10 416E20657869742073- <2> .msg1 db "An exit status of 0x",0
  2171 00001D19 7461747573206F6620- <2>
  2172 00001D22 307800              <2>
  2173 00001D25 087761732072657475- <2> .msg2 db 8,"was returned.",10,0
  2174 00001D2E 726E65642E0A00      <2>
  2175                              <1> 	%include 'source/interrupts/1_prntstr.asm'
  2176                              <2> prntstr:
  2177 00001D35 30E4                <2> xor ah, ah
  2178 00001D37 E82B000000          <2> call printint
  2179 00001D3C E967E5FFFF          <2> jmp timerinterrupt
  2180                              <2> 
  2181                              <2> 	printquiet:
  2182 00001D41 6631C0              <2> 		xor ax, ax
  2183 00001D44 66A3[DA1D0000]      <2> 		mov [endkeyprint], ax
  2184 00001D4A 66BB0700            <2> 		mov bx, 7
  2185 00001D4E E82D000000          <2> 		call printint.b
  2186 00001D53 C3                  <2> 		ret
  2187                              <2> 
  2188                              <2> 	printhighlight:
  2189 00001D54 6631C0              <2> 		xor ax, ax
  2190 00001D57 66BBF000            <2> 		mov bx, 0xF0
  2191 00001D5B E907000000          <2> 		jmp printint
  2192                              <2> 
  2193                              <2>     print:
  2194 00001D60 6631C0              <2> 		xor ax, ax
  2195 00001D63 66BB0700            <2> 		mov bx, 7
  2196                              <2> 	printint:	;print line, ax=last key,bx=modifier, esi=buffer
  2197 00001D67 56                  <2> 		push esi
  2198 00001D68 66A3[DA1D0000]      <2> 		mov [endkeyprint], ax
  2199 00001D6E E80D000000          <2> 		call .b
  2200 00001D73 89F1                <2> 		mov ecx, esi
  2201 00001D75 5F                  <2> 		pop edi
  2202 00001D76 29F9                <2> 		sub ecx, edi
  2203 00001D78 51                  <2> 		push ecx
  2204 00001D79 E8770B0000          <2> 		call termcopy
  2205 00001D7E 59                  <2> 		pop ecx
  2206 00001D7F C3                  <2> 		ret
  2207                              <2> 	.b:	
  2208 00001D80 53                  <2> 		push ebx
  2209 00001D81 31C0                <2> 		xor eax, eax
  2210 00001D83 8A06                <2> 		mov al, [esi]
  2211 00001D85 3CFF                <2> 		cmp al, 0xFF
  2212 00001D87 7438                <2> 		je .doneutf
  2213 00001D89 3CC0                <2> 		cmp al, 0xC0
  2214 00001D8B 7234                <2> 		jb .doneutf
  2215 00001D8D 3CE0                <2> 		cmp al, 0xE0
  2216 00001D8F 721D                <2> 		jb .two
  2217 00001D91 46                  <2> 		inc esi
  2218 00001D92 668B0E              <2> 		mov cx, [esi]
  2219 00001D95 46                  <2> 		inc esi
  2220 00001D96 C0E004              <2> 		shl al, 4
  2221 00001D99 66C1E102            <2> 		shl cx, 2
  2222 00001D9D C0ED02              <2> 		shr ch, 2
  2223 00001DA0 66C1E902            <2> 		shr cx, 2
  2224 00001DA4 08C5                <2> 		or ch, al
  2225 00001DA6 6689C8              <2> 		mov ax, cx
  2226 00001DA9 E913000000          <2> 		jmp .doneutf
  2227                              <2> 	.two:
  2228 00001DAE 8A2E                <2> 		mov ch, [esi]
  2229 00001DB0 46                  <2> 		inc esi
  2230 00001DB1 8A0E                <2> 		mov cl, [esi]
  2231 00001DB3 66C1E102            <2> 		shl cx, 2
  2232 00001DB7 C0ED02              <2> 		shr ch, 2
  2233 00001DBA 66C1E902            <2> 		shr cx, 2
  2234 00001DBE 6689C8              <2> 		mov ax, cx
  2235                              <2> 	.doneutf:
  2236 00001DC1 5B                  <2> 		pop ebx
  2237 00001DC2 663B05[DA1D0000]    <2> 		cmp ax, [endkeyprint]
  2238 00001DC9 740E                <2> 		je .done
  2239 00001DCB 663DFFFE            <2> 		cmp ax, 0xFEFF
  2240 00001DCF 7405                <2> 		je .noprint
  2241 00001DD1 E818060000          <2> 		call prcharq
  2242                              <2> 	.noprint:
  2243 00001DD6 46                  <2> 		inc esi
  2244 00001DD7 EBA7                <2> 		jmp .b
  2245                              <2> 	.done:
  2246 00001DD9 C3                  <2> 		ret
  2247                              <2> 
  2248 00001DDA 0000                <2> endkeyprint dw 0
  2249                              <1> 	%include 'source/interrupts/2_readstr.asm'
  2250                              <2> readstr:
  2251 00001DDC E805000000          <2> call readint
  2252 00001DE1 E9C2E4FFFF          <2> jmp timerinterrupt
  2253                              <2> 
  2254                              <2> 	readint:	;;get line, al=last key, esi = buffer, edi = endbuffer	
  2255 00001DE6 89C3                <2> 		mov ebx, eax
  2256                              <2> 	.b:
  2257 00001DE8 53                  <2> 		push ebx
  2258 00001DE9 57                  <2> 		push edi
  2259 00001DEA 56                  <2> 		push esi
  2260 00001DEB 30C0                <2> 		xor al, al
  2261 00001DED E86B050000          <2> 		call rdcharint
  2262 00001DF2 5E                  <2> 		pop esi
  2263 00001DF3 8806                <2> 		mov [esi], al
  2264 00001DF5 46                  <2> 		inc esi
  2265 00001DF6 5F                  <2> 		pop edi
  2266 00001DF7 5B                  <2> 		pop ebx
  2267 00001DF8 39FE                <2> 		cmp esi, edi
  2268 00001DFA 7304                <2> 		jae .done
  2269 00001DFC 38D8                <2> 		cmp al, bl
  2270 00001DFE 75E8                <2> 		jne .b
  2271                              <2> 	.done:
  2272 00001E00 4E                  <2> 		dec esi
  2273 00001E01 C60600              <2> 		mov byte [esi], 0
  2274 00001E04 C3                  <2> 		ret
  2275                              <1> 	%include 'source/interrupts/3_clearscrn.asm'
  2276                              <2> clearscrn:
  2277 00001E05 E805000000          <2> call clear
  2278 00001E0A E999E4FFFF          <2> jmp timerinterrupt
  2279                              <2> %ifdef io.serial
  2280                              <2> clear:
  2281                              <2> 	ret
  2282                              <2> %else
  2283                              <2> clear:
  2284 00001E0F 668B0D[E1250000]    <2> 		mov cx, [charxy]
  2285 00001E16 BF[72D92B00]        <2> 		mov edi, videobuf
  2286 00001E1B 31C0                <2> 		xor eax, eax
  2287 00001E1D A3[D7250000]        <2> 		mov [linebeginpos], eax
  2288 00001E22 A3[DB250000]        <2> 		mov [videobufpos], eax
  2289 00001E27 6631D2              <2> 		xor dx, dx
  2290 00001E2A 66A3[DF250000]      <2> 		mov [charpos], ax
  2291 00001E30 66B80700            <2> 		mov ax, 7
  2292 00001E34 C1E010              <2> 		shl eax, 16
  2293                              <2> 	clearb:
  2294 00001E37 8907                <2> 		mov [edi], eax
  2295 00001E39 81C704000000        <2> 		add edi, 4
  2296 00001E3F FEC9                <2> 		dec cl
  2297 00001E41 80F900              <2> 		cmp cl, 0
  2298 00001E44 75F1                <2> 		jne clearb
  2299 00001E46 8A0D[E1250000]      <2> 		mov cl, [charxy]
  2300 00001E4C FECD                <2> 		dec ch
  2301 00001E4E 80FD00              <2> 		cmp ch, 0
  2302 00001E51 75E4                <2> 		jne clearb
  2303                              <2> 	cleardouble:
  2304 00001E53 BF[BAAE2C00]        <2> 		mov edi, videobuf2
  2305 00001E58 668B0D[E1250000]    <2> 		mov cx, [charxy]
  2306 00001E5F 31C0                <2> 		xor eax, eax
  2307                              <2> 	clearc:
  2308 00001E61 8907                <2> 		mov [edi], eax
  2309 00001E63 81C704000000        <2> 		add edi, 4
  2310 00001E69 FEC9                <2> 		dec cl
  2311 00001E6B 80F900              <2> 		cmp cl, 0
  2312 00001E6E 75F1                <2> 		jne clearc
  2313 00001E70 8A0D[E1250000]      <2> 		mov cl, [charxy]
  2314 00001E76 FECD                <2> 		dec ch
  2315 00001E78 80FD00              <2> 		cmp ch, 0
  2316 00001E7B 75E4                <2> 		jne clearc
  2317 00001E7D E8730A0000          <2> 		call termcopy
  2318 00001E82 C3                  <2> 		ret
  2319                              <2> %endif
  2320                              <2> 		
  2321                              <1> 	%include 'source/interrupts/4_prntreadstr.asm'
  2322                              <2> prntreadstr:
  2323 00001E83 E80B000000          <2> call rdprint
  2324 00001E88 E91BE4FFFF          <2> jmp timerinterrupt
  2325                              <2> 
  2326                              <2> readline:
  2327 00001E8D B00A                <2>   mov al, 10
  2328 00001E8F 66BB0700            <2>   mov bx, 7
  2329                              <2> rdprint:	;print and get line, al=last key, bx=modifier, esi=buffer, edi=bufferend
  2330 00001E93 E80F000000          <2> 	call rdprintdos
  2331 00001E98 50                  <2> 	push eax
  2332 00001E99 A0[3C230000]        <2> 	mov al, [endkeyrdpr]
  2333 00001E9E 30E4                <2> 	xor ah, ah
  2334 00001EA0 E832050000          <2> 	call prcharint
  2335 00001EA5 58                  <2> 	pop eax
  2336 00001EA6 C3                  <2> 	ret
  2337                              <2> 
  2338                              <2> 	rdprintdos: ;allows dos compatibility with read function
  2339 00001EA7 8935[46230000]      <2> 		mov [buftxtloc], esi
  2340 00001EAD A2[3C230000]        <2> 		mov [endkeyrdpr], al
  2341 00001EB2 66891D[3E230000]    <2> 		mov [modkeyrdpr], bx
  2342 00001EB9 8935[40230000]      <2> 		mov [firstesirdpr], esi
  2343 00001EBF 893D[4A230000]      <2> 		mov [endbufferrdpr], edi
  2344 00001EC5 8B3D[0E842D00]      <2> 		mov edi, [commandsentered]
  2345 00001ECB 893D[0A842D00]      <2> 		mov [commandlistentries], edi
  2346                              <2> 	rdprintb:
  2347 00001ED1 56                  <2> 		push esi
  2348 00001ED2 B001                <2> 		mov al, 1
  2349 00001ED4 E884040000          <2> 		call rdcharint
  2350 00001ED9 8A25[BD230000]      <2> 		mov ah, [lastkey + 2]
  2351 00001EDF 88E1                <2> 		mov cl, ah
  2352 00001EE1 5E                  <2> 		pop esi
  2353                              <2> %ifdef io.serial
  2354                              <2> 		cmp ah, 0x41
  2355                              <2> 		je near rdprup
  2356                              <2> 		cmp ah, 0x42
  2357                              <2> 		je near rdprdown
  2358                              <2> 		cmp ah, 0x43
  2359                              <2> 		je near rdprright
  2360                              <2> 		cmp ah, 0x44
  2361                              <2> 		je near rdprleft
  2362                              <2> 		cmp ah, 0x31
  2363                              <2> 		je near rdprhome
  2364                              <2> 		cmp ah, 0x48
  2365                              <2> 		je near rdprhome
  2366                              <2> 		cmp ah, 0x46
  2367                              <2> 		je near rdprend
  2368                              <2> 		cmp ah, 0x33
  2369                              <2> 		je near rdprdel
  2370                              <2> 		cmp ah, 0x34
  2371                              <2> 		je near rdprend
  2372                              <2> %else
  2373 00001EE2 803D[88600000]E0    <2> 		cmp byte [specialkey], 0xE0
  2374 00001EE9 753F                <2> 		jne notspecialrdprnt
  2375 00001EEB 80FC53              <2> 		cmp ah, 0x53
  2376 00001EEE 0F84B1030000        <2> 		je near rdprdel
  2377 00001EF4 80FC47              <2> 		cmp ah, 0x47
  2378 00001EF7 0F847E010000        <2> 		je near rdprhome
  2379 00001EFD 80FC4F              <2> 		cmp ah, 0x4F
  2380 00001F00 0F8494010000        <2> 		je near rdprend
  2381 00001F06 80FC50              <2> 		cmp ah, 0x50
  2382 00001F09 0F8424020000        <2> 		je near rdprdown
  2383 00001F0F 80FC4D              <2> 		cmp ah, 0x4D
  2384 00001F12 0F84C1010000        <2> 		je near rdprright
  2385 00001F18 80FC4B              <2> 		cmp ah, 0x4B
  2386 00001F1B 0F8496010000        <2> 		je near rdprleft
  2387 00001F21 80FC48              <2> 		cmp ah, 0x48
  2388 00001F24 0F844C020000        <2> 		je near rdprup
  2389                              <2> 	notspecialrdprnt:
  2390                              <2> %endif
  2391 00001F2A 66A1[BB230000]      <2> 		mov ax, [lastkey]
  2392 00001F30 663D0800            <2> 		cmp ax, 8
  2393 00001F34 0F84A0030000        <2> 		je near rdprbscheck
  2394 00001F3A 663D0000            <2> 		cmp ax, 0
  2395 00001F3E 7491                <2> 		je rdprintb
  2396 00001F40 80F900              <2> 		cmp cl, 0
  2397 00001F43 748C                <2> 		je rdprintb
  2398 00001F45 663D8000            <2> 		cmp ax, 0x80
  2399 00001F49 7257                <2> 		jb .normal
  2400 00001F4B 663D0008            <2> 		cmp ax, 0x800
  2401 00001F4F 7321                <2> 		jae .three
  2402 00001F51 46                  <2> 		inc esi
  2403 00001F52 3B35[4A230000]      <2> 		cmp esi, [endbufferrdpr]
  2404 00001F58 0F83DA000000        <2> 		jae near donerdprinc
  2405 00001F5E 66C1E002            <2> 		shl ax, 2
  2406 00001F62 C0E802              <2> 		shr al, 2
  2407 00001F65 0C80                <2> 		or al, 10000000b
  2408 00001F67 80CCC0              <2> 		or ah, 11000000b
  2409 00001F6A 8866FF              <2> 		mov [esi - 1], ah
  2410 00001F6D E930000000          <2> 		jmp .normal
  2411                              <2> .three:	
  2412 00001F72 81C602000000        <2> 		add esi, 2
  2413 00001F78 3B35[4A230000]      <2> 		cmp esi, [endbufferrdpr]
  2414 00001F7E 0F83B4000000        <2> 		jae near donerdprinc
  2415 00001F84 88E1                <2> 		mov cl, ah
  2416 00001F86 C0E904              <2> 		shr cl, 4
  2417 00001F89 80C9E0              <2> 		or cl, 11100000b
  2418 00001F8C 884EFE              <2> 		mov [esi - 2], cl
  2419 00001F8F 66C1E004            <2> 		shl ax, 4
  2420 00001F93 66C1E802            <2> 		shr ax, 2
  2421 00001F97 80CC80              <2> 		or ah, 10000000b
  2422 00001F9A C0E802              <2> 		shr al, 2
  2423 00001F9D 0C80                <2> 		or al, 10000000b
  2424 00001F9F 8866FF              <2> 		mov [esi - 1], ah
  2425                              <2> .normal:
  2426 00001FA2 8806                <2> 		mov [esi], al
  2427 00001FA4 46                  <2> 		inc esi
  2428 00001FA5 66A1[BB230000]      <2> 		mov ax, [lastkey]
  2429                              <2> 	bscheckequal:
  2430 00001FAB 668B1D[3E230000]    <2> 		mov bx, [modkeyrdpr]
  2431 00001FB2 803D[45230000]00    <2> 		cmp byte [txtmask], 0
  2432 00001FB9 7407                <2> 		je nomasktxt
  2433 00001FBB 30E4                <2> 		xor ah, ah
  2434 00001FBD A0[45230000]        <2> 		mov al, [txtmask]
  2435                              <2> 	nomasktxt:
  2436 00001FC2 56                  <2> 		push esi
  2437 00001FC3 66A3[3A230000]      <2> 		mov [axcache], ax
  2438 00001FC9 668B1D[3C230000]    <2> 		mov bx, [endkeyrdpr]
  2439 00001FD0 6639D8              <2> 		cmp ax, bx
  2440 00001FD3 7432                <2> 		je nobackprintbuftxt2
  2441 00001FD5 E8FD030000          <2> 		call prcharint
  2442 00001FDA BE[5CBA0300]        <2> 		mov esi, buftxt2
  2443 00001FDF E85DFDFFFF          <2> 		call printquiet
  2444 00001FE4 66B82000            <2> 		mov ax, " "
  2445 00001FE8 E801040000          <2> 		call prcharq
  2446 00001FED 66B80800            <2> 		mov ax, 8
  2447 00001FF1 81FE[5CBA0300]      <2> 		cmp esi, buftxt2
  2448 00001FF7 740E                <2> 		je nobackprintbuftxt2
  2449                              <2> 	backprintbuftxt2:
  2450 00001FF9 E8F0030000          <2> 		call prcharq
  2451 00001FFE 4E                  <2> 		dec esi
  2452 00001FFF 81FE[5CBA0300]      <2> 		cmp esi, buftxt2
  2453 00002005 77F2                <2> 		ja backprintbuftxt2
  2454                              <2> 	nobackprintbuftxt2:
  2455 00002007 663D0A00            <2> 		cmp ax, 10
  2456 0000200B 7405                <2> 		je nonobackprint
  2457 0000200D E8C5030000          <2> 		call prcharint
  2458                              <2> 	nonobackprint:
  2459 00002012 5E                  <2> 		pop esi
  2460 00002013 3B35[4A230000]      <2> 		cmp esi, [endbufferrdpr]
  2461 00002019 0F8319000000        <2> 		jae near donerdprinc
  2462 0000201F 66A1[3A230000]      <2> 		mov ax, [axcache]
  2463 00002025 8A25[3C230000]      <2> 		mov ah, [endkeyrdpr]
  2464 0000202B 38E0                <2> 		cmp al, ah
  2465 0000202D 0F859EFEFFFF        <2> 		jne rdprintb
  2466 00002033 E901000000          <2> 		jmp donerdprint
  2467                              <2> 	donerdprinc:
  2468 00002038 46                  <2> 		inc esi
  2469                              <2> 	donerdprint:
  2470 00002039 4E                  <2> 		dec esi
  2471 0000203A BF[5CBA0300]        <2> 		mov edi, buftxt2
  2472                              <2> 	copylaterstuff:
  2473 0000203F 8A07                <2> 		mov al, [edi]
  2474 00002041 3C00                <2> 		cmp al, 0
  2475 00002043 7406                <2> 		je nocopylaterstuff
  2476 00002045 8806                <2> 		mov [esi], al
  2477 00002047 47                  <2> 		inc edi
  2478 00002048 46                  <2> 		inc esi
  2479 00002049 EBF4                <2> 		jmp copylaterstuff
  2480                              <2> 	nocopylaterstuff:
  2481 0000204B C60600              <2> 		mov byte [esi], 0
  2482 0000204E E80B000000          <2> 		call clearbuftxt2
  2483 00002053 89F1                <2> 		mov ecx, esi
  2484 00002055 8B3D[40230000]      <2> 		mov edi, [firstesirdpr]
  2485 0000205B 29F9                <2> 		sub ecx, edi
  2486 0000205D C3                  <2> 		ret
  2487                              <2> 	
  2488                              <2> 	clearbuftxt2:
  2489 0000205E 30C0                <2> 		xor al, al
  2490 00002060 BF[5CBA0300]        <2> 		mov edi, buftxt2
  2491                              <2> 	clearbuftxt2lp:
  2492 00002065 8807                <2> 		mov [edi], al
  2493 00002067 47                  <2> 		inc edi
  2494 00002068 81FF[5CBE0300]      <2> 		cmp edi, buftxt
  2495 0000206E 75F5                <2> 		jne clearbuftxt2lp
  2496 00002070 C3                  <2> 		ret
  2497                              <2> 	
  2498                              <2> 	rdprintb2:
  2499 00002071 E87F080000          <2> 		call termcopy
  2500 00002076 E956FEFFFF          <2> 		jmp rdprintb
  2501                              <2> 	
  2502                              <2> 	rdprhome:
  2503 0000207B 3B35[46230000]      <2> 		cmp esi, [buftxtloc]
  2504 00002081 0F84EAFFFFFF        <2> 		je near rdprintb2
  2505 00002087 BF[5CBA0300]        <2> 		mov edi, buftxt2
  2506 0000208C 8A07                <2> 		mov al, [edi]
  2507 0000208E E879020000          <2> 		call shiftbuftxt2
  2508 00002093 E856030000          <2> 		call prcharq
  2509 00002098 EBE1                <2> 		jmp rdprhome
  2510                              <2> 		
  2511                              <2> 	rdprend:
  2512 0000209A BF[5CBA0300]        <2> 		mov edi, buftxt2
  2513 0000209F 8A07                <2> 		mov al, [edi]
  2514 000020A1 3C00                <2> 		cmp al, 0
  2515 000020A3 0F84C8FFFFFF        <2> 		je near rdprintb2
  2516 000020A9 8806                <2> 		mov [esi], al
  2517 000020AB E849000000          <2> 		call shiftbuftxt2lft
  2518 000020B0 E839030000          <2> 		call prcharq
  2519 000020B5 EBE3                <2> 		jmp rdprend
  2520                              <2> 	
  2521                              <2> 	rdprleft:
  2522 000020B7 3B35[46230000]      <2> 		cmp esi, [buftxtloc]
  2523 000020BD 0F840EFEFFFF        <2> 		je near rdprintb
  2524 000020C3 BF[5CBA0300]        <2> 		mov edi, buftxt2
  2525 000020C8 8A07                <2> 		mov al, [edi]
  2526 000020CA E83D020000          <2> 		call shiftbuftxt2
  2527 000020CF E803030000          <2> 		call prcharint
  2528 000020D4 E9F8FDFFFF          <2> 		jmp rdprintb
  2529                              <2> 		
  2530                              <2> 	rdprright:
  2531 000020D9 BF[5CBA0300]        <2> 		mov edi, buftxt2
  2532 000020DE 8A07                <2> 		mov al, [edi]
  2533 000020E0 3C00                <2> 		cmp al, 0
  2534 000020E2 0F84E9FDFFFF        <2> 		je near rdprintb
  2535 000020E8 8806                <2> 		mov [esi], al
  2536 000020EA E80A000000          <2> 		call shiftbuftxt2lft
  2537 000020EF E8E3020000          <2> 		call prcharint
  2538 000020F4 E9D8FDFFFF          <2> 		jmp rdprintb
  2539                              <2> 		
  2540                              <2> 	shiftbuftxt2lft:
  2541 000020F9 55                  <2> 		push ebp
  2542 000020FA 89FD                <2> 		mov ebp, edi
  2543                              <2> 	.lp:
  2544 000020FC 3C00                <2> 		cmp al, 0
  2545 000020FE 7408                <2> 		je noshiftbuftxt2lft
  2546 00002100 47                  <2> 		inc edi
  2547 00002101 8A07                <2> 		mov al, [edi]
  2548 00002103 8847FF              <2> 		mov [edi - 1], al
  2549 00002106 EBF4                <2> 		jmp .lp
  2550                              <2> 	noshiftbuftxt2lft:
  2551 00002108 8A4500              <2> 		mov al, [ebp]
  2552 0000210B 5D                  <2> 		pop ebp
  2553 0000210C 3CC0                <2> 		cmp al, 0xC0
  2554 0000210E 7304                <2> 		jae .nofix
  2555 00002110 3C80                <2> 		cmp al, 0x80
  2556 00002112 73E5                <2> 		jae shiftbuftxt2lft
  2557                              <2> 	.nofix:
  2558 00002114 8A06                <2> 		mov al, [esi]
  2559 00002116 30E4                <2> 		xor ah, ah
  2560 00002118 46                  <2> 		inc esi
  2561 00002119 668B1D[3E230000]    <2> 		mov bx, [modkeyrdpr]
  2562 00002120 C3                  <2> 		ret
  2563                              <2> 		
  2564                              <2> 	rdprdownbck:
  2565 00002121 FECC                <2> 		dec ah
  2566 00002123 8825[44230000]      <2> 		mov [commandedit], ah
  2567 00002129 E88D000000          <2> 		call rdprbckspc
  2568 0000212E E99EFDFFFF          <2> 		jmp rdprintb
  2569                              <2> 	
  2570                              <2> 	rdprdown:
  2571 00002133 8A25[44230000]      <2> 		mov ah, [commandedit]
  2572 00002139 80FC01              <2> 		cmp ah, 1
  2573 0000213C 0F868FFDFFFF        <2> 		jbe near rdprintb
  2574 00002142 8B3D[0E842D00]      <2> 		mov edi, [commandsentered]
  2575 00002148 3B3D[0A842D00]      <2> 		cmp edi, [commandlistentries]
  2576 0000214E 7618                <2> 		jbe .nofix
  2577 00002150 8105[0A842D00]0200- <2> 		add dword [commandlistentries], 2
  2578 00002158 0000                <2>
  2579 0000215A 3B3D[0A842D00]      <2> 		cmp edi, [commandlistentries]
  2580 00002160 7706                <2> 		ja .nofix
  2581 00002162 893D[0A842D00]      <2> 		mov [commandlistentries], edi
  2582                              <2> 	.nofix:
  2583 00002168 80FC02              <2> 		cmp ah, 2
  2584 0000216B 74B4                <2> 		je rdprdownbck
  2585 0000216D 80EC02              <2> 		sub ah, 2
  2586 00002170 8825[44230000]      <2> 		mov [commandedit], ah
  2587                              <2> 		
  2588                              <2> 	rdprup:
  2589 00002176 3805[44230000]      <2> 		cmp [commandedit], al
  2590 0000217C 0F844FFDFFFF        <2> 		je near rdprintb
  2591 00002182 813D[0A842D00]0000- <2> 		cmp dword [commandlistentries], 0
  2592 0000218A 0000                <2>
  2593 0000218C 0F843FFDFFFF        <2> 		je near rdprintb
  2594 00002192 FF0D[0A842D00]      <2> 		dec dword [commandlistentries]
  2595                              <2> 	.lp:
  2596 00002198 BF[5CBA0300]        <2> 		mov edi, buftxt2
  2597 0000219D 8A07                <2> 		mov al, [edi]
  2598 0000219F 3C00                <2> 		cmp al, 0
  2599 000021A1 740E                <2> 		je .start
  2600 000021A3 8806                <2> 		mov [esi], al
  2601 000021A5 E84FFFFFFF          <2> 		call shiftbuftxt2lft
  2602 000021AA E83F020000          <2> 		call prcharq
  2603 000021AF EBE7                <2> 		jmp .lp
  2604                              <2> 	.start:
  2605 000021B1 E805000000          <2> 		call rdprbckspc
  2606 000021B6 E948000000          <2> 		jmp getcurrentcommandstr
  2607                              <2> 	rdprbckspc:
  2608 000021BB 3B35[46230000]      <2> 		cmp esi, [buftxtloc]
  2609 000021C1 7432                <2> 		je nordprupbck
  2610                              <2> 	rdprupbckspclp:
  2611 000021C3 66B80800            <2> 		mov ax, 8
  2612 000021C7 668B1D[3E230000]    <2> 		mov bx, [modkeyrdpr]
  2613 000021CE E81B020000          <2> 		call prcharq
  2614 000021D3 66B82000            <2> 		mov ax, ' '
  2615 000021D7 E812020000          <2> 		call prcharq
  2616 000021DC 66B80800            <2> 		mov ax, 8
  2617 000021E0 E809020000          <2> 		call prcharq
  2618 000021E5 4E                  <2> 		dec esi
  2619 000021E6 3B35[46230000]      <2> 		cmp esi, [buftxtloc]
  2620 000021EC 7402                <2> 		je nordprupbck2
  2621 000021EE EBD3                <2> 		jmp rdprupbckspclp
  2622                              <2> 	nordprupbck2:
  2623 000021F0 E800070000          <2> 		call termcopy
  2624                              <2> 	nordprupbck:
  2625 000021F5 8B3D[06842D00]      <2> 		mov edi, [commandbufpos]
  2626 000021FB 81C7[12842D00]      <2> 		add edi, commandbuf
  2627 00002201 4F                  <2> 		dec edi
  2628 00002202 C3                  <2> 		ret
  2629                              <2> 	getcurrentcommandstr:
  2630 00002203 8A25[44230000]      <2> 		mov ah, [commandedit]
  2631 00002209 FE05[44230000]      <2> 		inc byte [commandedit]
  2632                              <2> 	getccmdlp:
  2633 0000220F 4F                  <2> 		dec edi
  2634 00002210 8A07                <2> 		mov al, [edi]
  2635 00002212 81FF[12842D00]      <2> 		cmp edi, commandbuf
  2636 00002218 7231                <2> 		jb getcmdresetcommandbuf
  2637 0000221A 81EF[12842D00]      <2> 		sub edi, commandbuf
  2638 00002220 3B3D[06842D00]      <2> 		cmp edi, [commandbufpos]
  2639 00002226 0F84A5FCFFFF        <2> 		je near rdprintb
  2640 0000222C 81C7[12842D00]      <2> 		add edi, commandbuf
  2641 00002232 3C00                <2> 		cmp al, 0
  2642 00002234 75D9                <2> 		jne getccmdlp
  2643 00002236 FECC                <2> 		dec ah
  2644 00002238 80FC00              <2> 		cmp ah, 0
  2645 0000223B 77D2                <2> 		ja getccmdlp
  2646 0000223D 47                  <2> 		inc edi
  2647 0000223E 81FF[12942D00]      <2> 		cmp edi, commandbufend
  2648 00002244 770D                <2> 		ja fixcmdbufb4morerdpr
  2649 00002246 E915000000          <2> 		jmp morerdprup
  2650                              <2> 	getcmdresetcommandbuf:
  2651 0000224B BF[12942D00]        <2> 		mov edi, commandbufend
  2652 00002250 47                  <2> 		inc edi
  2653 00002251 EBBC                <2> 		jmp getccmdlp
  2654                              <2> 	fixcmdbufb4morerdpr:
  2655 00002253 4F                  <2> 		dec edi
  2656 00002254 81EF[12942D00]      <2> 		sub edi, commandbufend
  2657 0000225A 81C7[12842D00]      <2> 		add edi, commandbuf
  2658                              <2> 	morerdprup:
  2659 00002260 8A07                <2> 		mov al, [edi]
  2660 00002262 47                  <2> 		inc edi
  2661 00002263 81EF[12842D00]      <2> 		sub edi, commandbuf
  2662 00002269 3C00                <2> 		cmp al, 0
  2663 0000226B 0F8400FEFFFF        <2> 		je near rdprintb2
  2664 00002271 3B3D[06842D00]      <2> 		cmp edi, [commandbufpos]
  2665 00002277 0F83F4FDFFFF        <2> 		jae near rdprintb2
  2666 0000227D 81C7[12842D00]      <2> 		add edi, commandbuf
  2667 00002283 8806                <2> 		mov [esi], al
  2668 00002285 46                  <2> 		inc esi
  2669 00002286 57                  <2> 		push edi
  2670 00002287 668B1D[3E230000]    <2> 		mov bx, [modkeyrdpr]
  2671 0000228E 30E4                <2> 		xor ah, ah
  2672 00002290 E859010000          <2> 		call prcharq
  2673 00002295 5F                  <2> 		pop edi
  2674 00002296 81FF[12942D00]      <2> 		cmp edi, commandbufend
  2675 0000229C 76C2                <2> 		jbe morerdprup
  2676 0000229E BF[12842D00]        <2> 		mov edi, commandbuf
  2677 000022A3 EBBB                <2> 		jmp morerdprup
  2678                              <2> 
  2679                              <2> 	rdprdel:
  2680 000022A5 BF[5CBA0300]        <2> 		mov edi, buftxt2
  2681 000022AA 8A07                <2> 		mov al, [edi]
  2682 000022AC 3C00                <2> 		cmp al, 0
  2683 000022AE 0F841DFCFFFF        <2> 		je near rdprintb
  2684 000022B4 8806                <2> 		mov [esi], al
  2685 000022B6 3C80                <2> 		cmp al, 0x80
  2686 000022B8 7216                <2> 		jb .fn
  2687                              <2> 	.lp:
  2688 000022BA 46                  <2> 		inc esi
  2689 000022BB 47                  <2> 		inc edi
  2690 000022BC 8A07                <2> 		mov al, [edi]
  2691 000022BE 3C00                <2> 		cmp al, 0
  2692 000022C0 0F840BFCFFFF        <2> 		je near rdprintb
  2693 000022C6 8806                <2> 		mov [esi], al
  2694 000022C8 3C80                <2> 		cmp al, 0x80
  2695 000022CA 7204                <2> 		jb .fn
  2696 000022CC 3CC0                <2> 		cmp al, 0xC0
  2697 000022CE 72EA                <2> 		jb .lp
  2698                              <2> 	.fn:
  2699 000022D0 E824FEFFFF          <2> 		call shiftbuftxt2lft
  2700 000022D5 E814010000          <2> 		call prcharq
  2701                              <2> 		
  2702                              <2> 	rdprbscheck:
  2703 000022DA 3B35[40230000]      <2> 		cmp esi, [firstesirdpr]
  2704 000022E0 0F86EBFBFFFF        <2> 		jbe near rdprintb
  2705                              <2> 	goodbscheck:
  2706 000022E6 4E                  <2> 		dec esi
  2707 000022E7 8A46FF              <2> 		mov al, [esi - 1]
  2708 000022EA C60600              <2> 		mov byte [esi], 0
  2709 000022ED 3CC0                <2> 		cmp al, 0xC0
  2710 000022EF 7309                <2> 		jae .onemore
  2711 000022F1 3C80                <2> 		cmp al, 0x80
  2712 000022F3 73F1                <2> 		jae goodbscheck
  2713 000022F5 E904000000          <2> 		jmp .nomore
  2714                              <2> 	.onemore:
  2715 000022FA 4E                  <2> 		dec esi
  2716 000022FB C60600              <2> 		mov byte [esi], 0		
  2717                              <2> 	.nomore:
  2718 000022FE 668B1D[3E230000]    <2> 		mov bx, [modkeyrdpr]
  2719 00002305 B008                <2> 		mov al, 8
  2720 00002307 E99FFCFFFF          <2> 		jmp bscheckequal
  2721                              <2> 		
  2722                              <2> 	shiftbuftxt2:
  2723 0000230C 55                  <2> 		push ebp
  2724 0000230D 89FD                <2> 		mov ebp, edi
  2725                              <2> 	.lp
  2726 0000230F 3C00                <2> 		cmp al, 0
  2727 00002311 7409                <2> 		je noshiftbuftxt2
  2728 00002313 47                  <2> 		inc edi
  2729 00002314 8A27                <2> 		mov ah, [edi]
  2730 00002316 8807                <2> 		mov [edi], al
  2731 00002318 88E0                <2> 		mov al, ah
  2732 0000231A EBF3                <2> 		jmp .lp
  2733                              <2> 	noshiftbuftxt2:
  2734 0000231C 8A4500              <2> 		mov al, [ebp]
  2735 0000231F 5D                  <2> 		pop ebp
  2736 00002320 3CC0                <2> 		cmp al, 0xC0
  2737 00002322 7304                <2> 		jae .nofix
  2738 00002324 3C80                <2> 		cmp al, 0x80
  2739 00002326 73E4                <2> 		jae shiftbuftxt2
  2740                              <2> 	.nofix:
  2741 00002328 BF[5CBA0300]        <2> 		mov edi, buftxt2
  2742 0000232D 4E                  <2> 		dec esi
  2743 0000232E 8A06                <2> 		mov al, [esi]
  2744 00002330 8807                <2> 		mov [edi], al
  2745 00002332 C60600              <2> 		mov byte [esi], 0
  2746 00002335 66B80800            <2> 		mov ax, 8
  2747 00002339 C3                  <2> 		ret
  2748                              <2> 		
  2749 0000233A 0000                <2> axcache dw 0
  2750 0000233C 0000                <2> endkeyrdpr dw 0
  2751 0000233E 0000                <2> modkeyrdpr dw 0
  2752 00002340 00000000            <2> firstesirdpr dd 0
  2753 00002344 00                  <2> commandedit db 0
  2754 00002345 00                  <2> txtmask db 0
  2755 00002346 00000000            <2> buftxtloc dd 0
  2756 0000234A 00000000            <2> endbufferrdpr dd 0
  2757 0000234E 082000              <2> backcursor db 8," ",0
  2758                              <1> 	%include 'source/interrupts/5_readchar.asm'
  2759                              <2> readchar:
  2760 00002351 E807000000          <2> 	call rdcharint
  2761 00002356 E94DDFFFFF          <2> 	jmp timerinterrupt
  2762                              <2> getchar:
  2763 0000235B 30C0                <2> 	xor al, al
  2764                              <2> 	rdcharint:		;get char, if al is 0, wait for key
  2765 0000235D 66C705[BF230000]01- <2> 		mov word [trans], 1
  2766 00002365 00                  <2>
  2767 00002366 3C00                <2> 		cmp al, 0
  2768 00002368 7509                <2> 		jne transcheck
  2769 0000236A 66C705[BF230000]00- <2> 		mov word [trans], 0
  2770 00002372 00                  <2>
  2771                              <2> 	transcheck:
  2772                              <2> 	%ifdef io.serial
  2773                              <2> 		call serial.receive
  2774                              <2> 		xor ah, ah
  2775                              <2> 		cmp al, 13
  2776                              <2> 		je rdenter
  2777                              <2> 	%else
  2778 00002373 E8323D0000          <2> 		call getkey
  2779 00002378 66A1[BD230000]      <2> 		mov ax, [lastkey + 2]
  2780 0000237E 663D1C00            <2> 		cmp ax, 0x1C
  2781 00002382 7425                <2> 		je rdenter
  2782                              <2> 	%endif
  2783 00002384 66A1[BB230000]      <2> 		mov ax, [lastkey]
  2784 0000238A 668B1D[BF230000]    <2> 		mov bx, [trans]
  2785 00002391 803D[88600000]E0    <2> 		cmp byte [specialkey], 0xE0
  2786 00002398 7500                <2> 		jne nospecialtrans
  2787                              <2> 	nospecialtrans:
  2788 0000239A 6609C3              <2> 		or bx, ax
  2789 0000239D 6681FB0000          <2> 		cmp bx, 0
  2790 000023A2 74CF                <2> 		je transcheck
  2791 000023A4 E90C000000          <2> 		jmp rdend
  2792                              <2> 	rdenter:
  2793 000023A9 C1E010              <2> 		shl eax, 16
  2794 000023AC 66B80A00            <2> 		mov ax, 10
  2795 000023B0 A3[BB230000]        <2> 		mov [lastkey], eax
  2796                              <2> 	rdend:
  2797 000023B5 A1[BB230000]        <2> 		mov eax, [lastkey]
  2798 000023BA C3                  <2> 		ret
  2799                              <2> 		
  2800 000023BB 00000000            <2> lastkey dd 0
  2801 000023BF 0000                <2> trans dw 0
  2802                              <1> 	%include 'source/interrupts/6_prntchar.asm'
  2803                              <2> prntchar:
  2804 000023C1 30E4                <2> 	xor ah, ah ;this kills unicode from the outside unfortunately
  2805                              <2> %ifdef io.serial
  2806                              <2> 	call prcharint
  2807                              <2> 	jmp timerinterrupt
  2808                              <2> prcharint:	
  2809                              <2> prcharq:
  2810                              <2> 	call serial.send
  2811                              <2> 	ret
  2812                              <2> %else
  2813 000023C3 38FB                <2> cmp bl, bh
  2814 000023C5 740A                <2> je prchar.notimer
  2815 000023C7 E80B000000          <2> call prcharint
  2816 000023CC E9D7DEFFFF          <2> jmp timerinterrupt
  2817                              <2> prchar.notimer:
  2818 000023D1 E818000000          <2> 	call prcharq
  2819 000023D6 CF                  <2> 	iret
  2820                              <2> 	
  2821                              <2> prcharint:	;print char, char in ax, modifier in bx, if ecx is eax then termcopy will not happen, will run termcopy if called as is
  2822 000023D7 663DFFFE            <2> 	cmp ax, 0xFEFF
  2823 000023DB 740E                <2> 	je .ret
  2824 000023DD 39C1                <2> 	cmp ecx, eax
  2825 000023DF 740D                <2> 	je prcharq
  2826 000023E1 E808000000          <2> 	call prcharq
  2827 000023E6 E80A050000          <2> 	call termcopy
  2828                              <2> .ret:
  2829 000023EB C3                  <2> 	ret
  2830 000023EC 00                  <2> termguion db 0
  2831 000023ED 00                  <2> termcopyon db 0
  2832                              <2> prcharq:
  2833 000023EE C1E310              <2> 	shl ebx, 16
  2834 000023F1 6689C3              <2> 	mov bx, ax
  2835 000023F4 89D8                <2> 	mov eax, ebx
  2836 000023F6 A3[E3250000]        <2> 	mov [charbuf], eax
  2837 000023FB 8B1D[DB250000]      <2> 	mov ebx, [videobufpos]
  2838 00002401 BF[72D92B00]        <2> 	mov edi, videobuf
  2839 00002406 01DF                <2> 	add edi, ebx
  2840 00002408 A1[02290000]        <2> 	mov eax, [removedvideo]
  2841 0000240D 8907                <2> 	mov [edi], eax
  2842 0000240F A1[E3250000]        <2> 	mov eax, [charbuf]
  2843 00002414 31D2                <2> 	xor edx, edx
  2844 00002416 668B15[DF250000]    <2> 	mov dx, [charpos]
  2845 0000241D 31C9                <2> 	xor ecx, ecx
  2846 0000241F 668B0D[E1250000]    <2> 	mov cx, [charxy]
  2847 00002426 663D0900            <2> 	cmp ax, 9
  2848 0000242A 0F8479000000        <2> 	je near prtab
  2849 00002430 663D0D00            <2> 	cmp ax, 13		;I am phasing this out-it is used by windows but not unix based systems
  2850 00002434 0F849C000000        <2> 	je near prcr
  2851 0000243A 663D0A00            <2> 	cmp ax, 10
  2852 0000243E 0F84E5000000        <2> 	je near prnlcr
  2853 00002444 663D0800            <2> 	cmp ax, 8
  2854 00002448 0F8499000000        <2> 	je near prbs
  2855 0000244E 663DFF00            <2> 	cmp ax, 255		;null character
  2856 00002452 0F8424000000        <2> 	je near donescr
  2857 00002458 663D0030            <2> 	cmp ax, (fontend - fonts)/16
  2858 0000245C 0F8341000000        <2> 	jae near prnofont
  2859                              <2> donepr:
  2860 00002462 8907                <2> 	mov [edi], eax
  2861 00002464 81C704000000        <2> 	add edi, 4
  2862 0000246A FEC2                <2> 	inc dl
  2863                              <2> donecrnl:
  2864 0000246C 38CA                <2> 	cmp dl, cl
  2865 0000246E 0F83D9000000        <2> 	jae near preol
  2866                              <2> doneeol:
  2867 00002474 38EE                <2> 	cmp dh, ch
  2868 00002476 0F83EE000000        <2> 	jae near prscr	
  2869                              <2> donescr:
  2870 0000247C 89FB                <2> 	mov ebx, edi
  2871 0000247E 8B07                <2> 	mov eax, [edi]
  2872 00002480 A3[02290000]        <2> 	mov [removedvideo], eax
  2873 00002485 81EB[72D92B00]      <2> 	sub ebx, videobuf
  2874 0000248B 891D[DB250000]      <2> 	mov [videobufpos], ebx
  2875 00002491 668915[DF250000]    <2> 	mov [charpos], dx
  2876 00002498 A1[E3250000]        <2> 	mov eax, [charbuf]
  2877 0000249D 89C3                <2> 	mov ebx, eax
  2878 0000249F C1EB10              <2> 	shr ebx, 16
  2879 000024A2 C3                  <2> 	ret
  2880                              <2> 	
  2881                              <2> 	prnofont:
  2882 000024A3 66B80200            <2> 		mov ax, 2
  2883 000024A7 EBB9                <2> 		jmp donepr
  2884                              <2> 	prtab:
  2885 000024A9 8B1D[D7250000]      <2> 		mov ebx, [linebeginpos]
  2886 000024AF 81EF[72D92B00]      <2> 		sub edi, videobuf
  2887 000024B5 29DF                <2> 		sub edi, ebx
  2888 000024B7 C1EF05              <2> 		shr edi, 5
  2889 000024BA C1E705              <2> 		shl edi, 5
  2890 000024BD 81C720000000        <2> 		add edi, 32
  2891 000024C3 C0EA03              <2> 		shr dl, 3
  2892 000024C6 C0E203              <2> 		shl dl, 3
  2893 000024C9 80C208              <2> 		add dl, 8
  2894 000024CC 81C7[72D92B00]      <2> 		add edi, videobuf
  2895 000024D2 01DF                <2> 		add edi, ebx
  2896 000024D4 EB96                <2> 		jmp donecrnl
  2897                              <2> 	
  2898                              <2> 	prcr:
  2899 000024D6 30D2                <2> 		xor dl, dl
  2900 000024D8 BF[72D92B00]        <2> 		mov edi, videobuf
  2901 000024DD 8B1D[D7250000]      <2> 		mov ebx, [linebeginpos]
  2902 000024E3 01DF                <2> 		add edi, ebx
  2903 000024E5 EB85                <2> 		jmp donecrnl
  2904                              <2> 			
  2905                              <2> 	prbs:
  2906 000024E7 8B1D[D7250000]      <2> 		mov ebx, [linebeginpos]
  2907 000024ED 80FA00              <2> 		cmp dl, 0
  2908 000024F0 7415                <2> 		je prbackline
  2909                              <2> 	prnobmr:
  2910 000024F2 891D[D7250000]      <2> 		mov [linebeginpos], ebx
  2911 000024F8 FECA                <2> 		dec dl
  2912 000024FA 31C0                <2> 		xor eax, eax
  2913 000024FC 81EF04000000        <2> 		sub edi, 4
  2914 00002502 E965FFFFFF          <2> 		jmp donecrnl
  2915                              <2> 	prbackline:
  2916 00002507 6631DB              <2> 		xor bx, bx
  2917 0000250A 88CA                <2> 		mov dl, cl
  2918 0000250C 80FE00              <2> 		cmp dh, 0
  2919 0000250F 74E1                <2> 		je prnobmr
  2920 00002511 8B1D[D7250000]      <2> 		mov ebx, [linebeginpos]
  2921 00002517 6651                <2> 		push cx
  2922 00002519 31C9                <2> 		xor ecx, ecx
  2923 0000251B 8A0C24              <2> 		mov cl, [esp]
  2924 0000251E C1E102              <2> 		shl ecx, 2
  2925 00002521 29CB                <2> 		sub ebx, ecx
  2926 00002523 6659                <2> 		pop cx
  2927 00002525 FECE                <2> 		dec dh
  2928 00002527 EBC9                <2> 		jmp prnobmr
  2929                              <2> 		
  2930                              <2> 	prnlcr:
  2931 00002529 FEC6                <2> 		inc dh
  2932 0000252B 31DB                <2> 		xor ebx, ebx
  2933 0000252D 30D2                <2> 		xor dl, dl
  2934 0000252F 88CB                <2> 		mov bl, cl
  2935 00002531 66C1E302            <2> 		shl bx, 2
  2936 00002535 BF[72D92B00]        <2> 		mov edi, videobuf
  2937 0000253A 031D[D7250000]      <2> 		add ebx, [linebeginpos]
  2938 00002540 891D[D7250000]      <2> 		mov [linebeginpos], ebx
  2939 00002546 01DF                <2> 		add edi, ebx
  2940 00002548 E91FFFFFFF          <2> 		jmp donecrnl
  2941                              <2> 		
  2942                              <2> 	preol:
  2943 0000254D 30D2                <2> 		xor dl, dl
  2944 0000254F FEC6                <2> 		inc dh
  2945 00002551 31DB                <2> 		xor ebx, ebx
  2946 00002553 88CB                <2> 		mov bl, cl
  2947 00002555 66C1E302            <2> 		shl bx, 2
  2948 00002559 031D[D7250000]      <2> 		add ebx, [linebeginpos]
  2949 0000255F 891D[D7250000]      <2> 		mov [linebeginpos], ebx
  2950 00002565 E90AFFFFFF          <2> 		jmp doneeol
  2951                              <2> 	prscr:
  2952 0000256A FECE                <2> 		dec dh
  2953 0000256C BF[72D92B00]        <2> 		mov edi, videobuf
  2954 00002571 31DB                <2> 		xor ebx, ebx
  2955 00002573 88CB                <2> 		mov bl, cl
  2956 00002575 66C1E302            <2> 		shl bx, 2
  2957 00002579 01FB                <2> 		add ebx, edi
  2958                              <2> 	intscrollloop:
  2959 0000257B 8B03                <2> 		mov eax, [ebx]
  2960 0000257D 8907                <2> 		mov [edi], eax
  2961 0000257F 81C704000000        <2> 		add edi, 4
  2962 00002585 81C304000000        <2> 		add ebx, 4
  2963 0000258B FEC9                <2> 		dec cl
  2964 0000258D 80F900              <2> 		cmp cl, 0
  2965 00002590 75E9                <2> 		jne intscrollloop
  2966 00002592 8A0D[E1250000]      <2> 		mov cl, [charxy]
  2967 00002598 FECD                <2> 		dec ch
  2968 0000259A 80FD01              <2> 		cmp ch, 1
  2969 0000259D 77DC                <2> 		ja intscrollloop
  2970 0000259F 31C0                <2> 		xor eax, eax
  2971 000025A1 81EF[72D92B00]      <2> 		sub edi, videobuf
  2972 000025A7 893D[D7250000]      <2> 		mov [linebeginpos], edi
  2973 000025AD 81C7[72D92B00]      <2> 		add edi, videobuf
  2974 000025B3 89FB                <2> 		mov ebx, edi
  2975                              <2> 	intloopclear:
  2976 000025B5 8903                <2> 		mov [ebx], eax
  2977 000025B7 81C304000000        <2> 		add ebx, 4
  2978 000025BD FEC9                <2> 		dec cl
  2979 000025BF 80F900              <2> 		cmp cl, 0
  2980 000025C2 75F1                <2> 		jne intloopclear
  2981 000025C4 FECD                <2> 		dec ch
  2982 000025C6 80FD00              <2> 		cmp ch, 0
  2983 000025C9 75EA                <2> 		jne intloopclear
  2984 000025CB 668B0D[E1250000]    <2> 		mov cx, [charxy]
  2985 000025D2 E9A5FEFFFF          <2> 		jmp donescr
  2986                              <2> 		
  2987 000025D7 00000000            <2> linebeginpos dd 0
  2988 000025DB 00000000            <2> videobufpos: dd 0
  2989 000025DF 0000                <2> charpos db 0,0
  2990 000025E1 501E                <2> charxy db 80,30
  2991 000025E3 00000000            <2> charbuf dd 0
  2992                              <2> %endif
  2993                              <1> 	%include 'source/interrupts/7_openfile.asm'
  2994                              <2> openfile:
  2995 000025E7 E84B440000          <2> 	call loadfile
  2996 000025EC E9B7DCFFFF          <2> 	jmp timerinterrupt
  2997                              <1> 	%include 'source/interrupts/9_num2str.asm'
  2998                              <2> num2str:
  2999 000025F1 3C00                <2> 	cmp al, 0
  3000 000025F3 750A                <2> 	jne num2strb
  3001 000025F5 E8E50C0000          <2> 	call showdec
  3002 000025FA E9A9DCFFFF          <2> 	jmp timerinterrupt
  3003                              <2> num2strb:
  3004 000025FF E8110C0000          <2> 	call showhex
  3005 00002604 E99FDCFFFF          <2> 	jmp timerinterrupt
  3006                              <1> 	%include 'source/interrupts/10_str2num.asm'
  3007                              <2> str2num:
  3008 00002609 89F7                <2> 	mov edi, esi
  3009 0000260B E8B10D0000          <2> 	call cnvrttxt	;the string goes into esi, number into ecx
  3010 00002610 E993DCFFFF          <2> 	jmp timerinterrupt
  3011                              <2> 	
  3012                              <1> %ifdef threads.included
  3013                              <1> 	%include 'source/interrupts/11_forkthread.asm'
  3014                              <2> forkthread:
  3015                              <2> 			 ;esi is next thread's start address, if 0, fork current thread
  3016                              <2> 			;returns the PID of the new fork in ebx
  3017                              <2> ;WARNING:THIS WILL NOT WORK IN C UNTIL IT COPIES THE ENTIRE STACK
  3018 00002615 FA                  <2> 	cli
  3019 00002616 60                  <2> 	pushad
  3020 00002617 8925[E4260000]      <2> 	mov [.espold], esp
  3021 0000261D C605[F36B0000]01    <2> 	mov byte [threadson], 1
  3022 00002624 8B1D[F46B0000]      <2> 	mov ebx, [currentthread]
  3023 0000262A C1E302              <2> 	shl ebx, 2
  3024 0000262D 89A3[26B42D00]      <2> 	mov [threadlist + ebx], esp
  3025 00002633 C1EB02              <2> 	shr ebx, 2
  3026 00002636 81FB00000000        <2> 	cmp ebx, 0
  3027 0000263C 750C                <2> 	jne .simplestack
  3028 0000263E BB[78A30300]        <2> 	mov ebx, stackend
  3029 00002643 29E3                <2> 	sub ebx, esp
  3030 00002645 E90B000000          <2> 	jmp .stackcalcdone
  3031                              <2> .simplestack:
  3032 0000264A C1E30A              <2> 	shl ebx, 10
  3033 0000264D 81C3[26C82D00]      <2> 	add ebx, stack1
  3034 00002653 29E3                <2> 	sub ebx, esp
  3035                              <2> .stackcalcdone:
  3036 00002655 29DC                <2> 	sub esp, ebx
  3037 00002657 81C4[26C82D00]      <2> 	add esp, stack1
  3038 0000265D 8B1D[EF6B0000]      <2> 	mov ebx, [lastthread]
  3039 00002663 C1E308              <2> 	shl ebx, 8
  3040 00002666 01DC                <2> 	add esp, ebx
  3041 00002668 891D[E8260000]      <2> 	mov [.stackend], ebx
  3042                              <2> 
  3043 0000266E 89E5                <2> 	mov ebp, esp
  3044 00002670 8B25[E4260000]      <2> 	mov esp, [.espold]
  3045                              <2> 
  3046 00002676 C1EB0A              <2> 	shr ebx, 10 ;get pid then push it
  3047 00002679 895C2410            <2> 	mov [esp + 16], ebx ;set the old ebx to the new PID
  3048                              <2> 
  3049 0000267D 31DB                <2> 	xor ebx, ebx
  3050                              <2> .stackcopy:
  3051 0000267F 668B041C            <2> 	mov ax, [esp + ebx]
  3052 00002683 6689441D00          <2> 	mov [ebp + ebx], ax
  3053 00002688 81C302000000        <2> 	add ebx, 2
  3054 0000268E 3B1D[E8260000]      <2> 	cmp ebx, [.stackend]
  3055 00002694 72E9                <2> 	jb .stackcopy
  3056                              <2> 
  3057 00002696 31C0                <2> 	xor eax, eax
  3058 00002698 668CC8              <2> 	mov ax, cs
  3059 0000269B 89C2                <2> 	mov edx, eax
  3060 0000269D 8B4C2428            <2> 	mov ecx, [esp + 40]
  3061 000026A1 81C900020000        <2> 	or ecx, 0x200
  3062                              <2> 	
  3063 000026A7 81FE00000000        <2> 	cmp esi, 0
  3064 000026AD 7504                <2> 	jne .nochangestack
  3065 000026AF 8B742420            <2> 	mov esi, [esp + 32]
  3066                              <2> .nochangestack:
  3067 000026B3 89F0                <2> 	mov eax, esi
  3068 000026B5 89EC                <2> 	mov esp, ebp
  3069                              <2> 
  3070 000026B7 89442420            <2> 	mov [esp + 32], eax
  3071 000026BB 89542424            <2> 	mov [esp + 36], edx
  3072 000026BF 894C2428            <2> 	mov [esp + 40], ecx
  3073                              <2> 
  3074 000026C3 8B1D[EF6B0000]      <2> 	mov ebx, [lastthread]
  3075 000026C9 89A3[26B42D00]      <2> 	mov [threadlist + ebx], esp
  3076 000026CF 81C304000000        <2> 	add ebx, 4
  3077 000026D5 891D[EF6B0000]      <2> 	mov [lastthread], ebx
  3078 000026DB 8B25[E4260000]      <2> 	mov esp, [.espold]
  3079 000026E1 61                  <2> 	popad
  3080 000026E2 FB                  <2> 	sti
  3081 000026E3 CF                  <2> 	iret
  3082                              <2> 
  3083 000026E4 00000000            <2> .espold dd 0
  3084 000026E8 00000000            <2> .stackend dd 0
  3085                              <1> %endif
  3086                              <1> 	%include 'source/interrupts/12_gettime.asm'
  3087                              <2> gettime:
  3088 000026EC A1[60020000]        <2> 	mov eax, [timeseconds]
  3089 000026F1 8B1D[64020000]      <2> 	mov ebx, [timenanoseconds]
  3090 000026F7 89D9                <2> 	mov ecx, ebx
  3091 000026F9 C1E90A              <2> 	shr ecx, 10	;this is in microseconds
  3092 000026FC E9A7DBFFFF          <2> 	jmp timerinterrupt
  3093                              <1> 	%include 'source/interrupts/13_settime.asm'
  3094                              <2> settime:
  3095 00002701 A3[60020000]        <2> 	mov [timeseconds], eax
  3096 00002706 891D[64020000]      <2> 	mov [timenanoseconds], ebx
  3097 0000270C E997DBFFFF          <2> 	jmp timerinterrupt
  3098                              <2> 	
  3099                              <1> 	%include 'source/interrupts/14_runcmd.asm'
  3100                              <2> runcmd:
  3101 00002711 BF[5CBE0300]        <2> 	mov edi, buftxt
  3102                              <2> cpcmd:
  3103 00002716 8A06                <2> 	mov al, [esi]
  3104 00002718 8807                <2> 	mov [edi], al
  3105 0000271A 46                  <2> 	inc esi
  3106 0000271B 47                  <2> 	inc edi
  3107 0000271C 3C00                <2> 	cmp al, 0
  3108 0000271E 75F6                <2> 	jne cpcmd
  3109 00002720 E8F3070000          <2> 	call run
  3110 00002725 CF                  <2> 	iret
  3111                              <1> 	%include 'source/interrupts/15_proginfo.asm'
  3112                              <2> proginfo:
  3113                              <2> 	;mov ebx, variables
  3114 00002726 8B35[EE2F0000]      <2> 	mov esi, [currentcommandloc]
  3115 0000272C 89F7                <2> 	mov edi, esi
  3116 0000272E 31C9                <2> 	xor ecx, ecx
  3117                              <2> getcommandzeroes:
  3118 00002730 8A07                <2> 	mov al, [edi]
  3119 00002732 47                  <2> 	inc edi
  3120 00002733 3C3B                <2> 	cmp al, ';'
  3121 00002735 740B                <2> 	je nomorezeroes
  3122 00002737 3C00                <2> 	cmp al, 0
  3123 00002739 7407                <2> 	je nomorezeroes
  3124 0000273B 3C20                <2> 	cmp al, ' '
  3125 0000273D 75F1                <2> 	jne getcommandzeroes
  3126 0000273F 41                  <2> 	inc ecx
  3127 00002740 EBEE                <2> 	jmp getcommandzeroes
  3128                              <2> nomorezeroes:
  3129 00002742 41                  <2> 	inc ecx
  3130 00002743 4F                  <2> 	dec edi
  3131 00002744 8B1D[E8A90300]      <2> 	mov ebx, [uid]
  3132 0000274A 8B15[F46B0000]      <2> 	mov edx, [currentthread]
  3133 00002750 CF                  <2> 	iret
  3134                              <2> 	
  3135                              <1> 	%include 'source/interrupts/16_hooksig.asm'
  3136                              <2> hooksig: ;hook code in ESI to signal in AL
  3137 00002751 3C00                <2> 	cmp al, 0
  3138 00002753 7507                <2> 	jne .quit	;only sig 0, the escape key, is handled, and only for one app
  3139                              <2> ;	xor ebx, ebx
  3140                              <2> ;	mov bl, al
  3141                              <2> ;	shl bl, 2
  3142 00002755 BF[D8A30300]        <2> 	mov edi, sigtable
  3143 0000275A 8937                <2> 	mov [edi], esi
  3144                              <2> .quit:
  3145 0000275C E947DBFFFF          <2> 	jmp timerinterrupt
  3146                              <1> %ifdef gui.included
  3147                              <1> 	%include 'source/interrupts/17_guiint.asm'
  3148                              <2> guiint:
  3149 00002761 3CFD                <2> 	cmp al, 253
  3150 00002763 0F8491000000        <2> 	je near .getinfo
  3151 00002769 803D[7C8F0000]01    <2> 	cmp byte [guion], 1
  3152 00002770 0F8550000000        <2> 	jne near .nogui
  3153 00002776 3C00                <2> 	cmp al, 0
  3154 00002778 0F844D000000        <2> 	je near .clear
  3155 0000277E 3C01                <2> 	cmp al, 1
  3156 00002780 0F84E4000000        <2> 	je near .putpixel
  3157 00002786 3C02                <2> 	cmp al, 2
  3158 00002788 0F84E9000000        <2> 	je near .drawtext
  3159 0000278E 3C03                <2> 	cmp al, 3
  3160 00002790 0F84FC000000        <2> 	je near .drawline
  3161 00002796 3C04                <2> 	cmp al, 4
  3162 00002798 0F8407010000        <2> 	je near .drawcircle
  3163 0000279E 3C05                <2> 	cmp al, 5
  3164 000027A0 0F840F010000        <2> 	je near .fillcircle
  3165 000027A6 3C06                <2> 	cmp al, 6
  3166 000027A8 0F8417010000        <2> 	je near .drawsquare
  3167 000027AE 3C07                <2> 	cmp al, 7
  3168 000027B0 0F8422010000        <2> 	je near .fillsquare
  3169 000027B6 3CFE                <2> 	cmp al, 254
  3170 000027B8 0F8464000000        <2> 	je near .setinfo
  3171 000027BE 3CFF                <2> 	cmp al, 255
  3172 000027C0 0F8461000000        <2> 	je near .reset
  3173                              <2> .nogui:
  3174 000027C6 E9DDDAFFFF          <2> 	jmp timerinterrupt
  3175                              <2> 
  3176                              <2> .clear:		;color in bx
  3177 000027CB 66891D[60730000]    <2> 	mov [background], bx
  3178                              <2> %ifdef gui.background
  3179 000027D2 8B1D[32730000]      <2> 	mov ebx, [backgroundimage]
  3180 000027D8 81FB00000000        <2> 	cmp ebx, 0
  3181 000027DE 7410                <2> 	je .clearit
  3182 000027E0 C705[32730000]0000- <2> 	mov dword [backgroundimage], 0
  3183 000027E8 0000                <2>
  3184 000027EA 891D[66280000]      <2> 	mov [.bgi], ebx
  3185                              <2> .clearit:
  3186                              <2> %endif
  3187 000027F0 E8DC4A0000          <2> 	call guiclear
  3188 000027F5 E9AEDAFFFF          <2> 	jmp timerinterrupt
  3189                              <2> 	
  3190                              <2> .getinfo:	;puts screen size in (dx, cx), background color in bx, and will put other stuff in other places
  3191 000027FA 31DB                <2> 	xor ebx, ebx
  3192 000027FC 31C9                <2> 	xor ecx, ecx
  3193 000027FE 31D2                <2> 	xor edx, edx
  3194 00002800 381D[7C8F0000]      <2> 	cmp [guion], bl
  3195 00002806 74BE                <2> 	je .nogui
  3196 00002808 668B1D[60730000]    <2> 	mov bx, [background]
  3197 0000280F 668B15[A7590000]    <2> 	mov dx, [resolutionx]
  3198 00002816 668B0D[A9590000]    <2> 	mov cx, [resolutiony]
  3199 0000281D E986DAFFFF          <2> 	jmp timerinterrupt
  3200                              <2> 	
  3201                              <2> .setinfo:	;does nothing yet. will get screen size in (dx, cx), background color in bx, and will put other stuff in other places
  3202 00002822 E981DAFFFF          <2> 	jmp timerinterrupt
  3203                              <2> .reset:		;resets the screen to the original settings
  3204 00002827 66BBCF7B            <2> 	mov bx, background.original
  3205 0000282B 66891D[60730000]    <2> 	mov [background], bx
  3206 00002832 66BBFFFF            <2> 	mov bx, 0xFFFF
  3207 00002836 66891D[257A0000]    <2> 	mov [colorfont2], bx
  3208                              <2> %ifdef gui.background
  3209 0000283D 8B1D[32730000]      <2> 	mov ebx, [backgroundimage]
  3210 00002843 81FB00000000        <2> 	cmp ebx, 0
  3211 00002849 750C                <2> 	jne .resetit
  3212 0000284B 8B1D[66280000]      <2> 	mov ebx, [.bgi]
  3213 00002851 891D[32730000]      <2> 	mov [backgroundimage], ebx
  3214                              <2> .resetit:
  3215                              <2> %endif
  3216 00002857 E8754A0000          <2> 	call guiclear
  3217 0000285C E8034B0000          <2> 	call reloadallgraphics
  3218 00002861 E942DAFFFF          <2> 	jmp timerinterrupt
  3219                              <2> 
  3220                              <2> %ifdef gui.background
  3221 00002866 00000000            <2> 	.bgi dd 0
  3222                              <2> %endif
  3223                              <2> 	
  3224                              <2> .putpixel:	;pixel location in (dx, cx), color in bx
  3225 0000286A 6689DE              <2> 	mov si, bx
  3226 0000286D E8CD610000          <2> 	call putpixel
  3227 00002872 E931DAFFFF          <2> 	jmp timerinterrupt
  3228                              <2> 
  3229                              <2> .drawtext:	;background in di, foreground in bx, location in (dx,cx), string in esi
  3230 00002877 66D1E2              <2> 	shl dx, 1
  3231 0000287A 66891D[257A0000]    <2> 	mov [colorfont2], bx
  3232 00002881 66893D[60730000]    <2> 	mov [background], di
  3233 00002888 E830510000          <2> 	call showstring2
  3234 0000288D E916DAFFFF          <2> 	jmp timerinterrupt
  3235                              <2> 
  3236                              <2> .drawline:	;color in bx, start in (dx,cx), end in (di,si)
  3237 00002892 6689F0              <2> 	mov ax, si
  3238 00002895 6689DE              <2> 	mov si, bx
  3239 00002898 6689FB              <2> 	mov bx, di
  3240 0000289B E805490000          <2> 	call drawline
  3241 000028A0 E903DAFFFF          <2> 	jmp timerinterrupt
  3242                              <2> 
  3243                              <2> .drawcircle: ;color in bx, radius in si, center in (dx,cx)
  3244 000028A5 6689F0              <2> 	mov ax, si
  3245 000028A8 6689DE              <2> 	mov si, bx
  3246 000028AB E83A440000          <2> 	call drawcircle
  3247 000028B0 E9F3D9FFFF          <2> 	jmp timerinterrupt
  3248                              <2> 
  3249                              <2> .fillcircle: ;color in bx, radius in si, center in (dx,cx)
  3250 000028B5 6689F0              <2> 	mov ax, si
  3251 000028B8 6689DE              <2> 	mov si, bx
  3252 000028BB E83C450000          <2> 	call fillcircle
  3253 000028C0 E9E3D9FFFF          <2> 	jmp timerinterrupt
  3254                              <2> 	
  3255                              <2> .drawsquare: ;color in bx, start in (dx, cx), end in (di, si)
  3256 000028C5 6689F0              <2> 	mov ax, si
  3257 000028C8 6689DE              <2> 	mov si, bx
  3258 000028CB 6689FB              <2> 	mov bx, di
  3259 000028CE E8614B0000          <2> 	call drawsquare
  3260 000028D3 E9D0D9FFFF          <2> 	jmp timerinterrupt
  3261                              <2> 
  3262                              <2> .fillsquare: ;color in bx, start in (dx, cx), end in (di, si)
  3263 000028D8 6689F0              <2> 	mov ax, si
  3264 000028DB 6689DE              <2> 	mov si, bx
  3265 000028DE 6689FB              <2> 	mov bx, di
  3266 000028E1 E8C34B0000          <2> 	call fillsquare
  3267 000028E6 E9BDD9FFFF          <2> 	jmp timerinterrupt
  3268                              <1> %endif
  3269                              <1> %ifdef sound.included
  3270                              <1> 	%include 'source/interrupts/18_soundint.asm'
  3271                              <2> soundint:
  3272 000028EB E9B8D9FFFF          <2> 	jmp timerinterrupt
  3273                              <1> %endif
  3274                              <1> %ifdef network.included
  3275                              <1> 	%include 'source/interrupts/19_netint.asm'
  3276                              <2> netint:
  3277 000028F0 E9B3D9FFFF          <2> 	jmp timerinterrupt
  3278                              <1> %endif
  3279                              <1> 
  3280                              <1> termcopy:
  3281                              <1> %ifdef io.serial
  3282                              <1> 	ret
  3283                              <1> %else
  3284                              <1> %ifdef terminal.vsync
  3285 000028F5 C605[FD280000]01    <1> 	mov byte [termcopyneeded], 1
  3286 000028FC C3                  <1> 	ret
  3287                              <1> %else
  3288                              <1> 	call newtermcopy
  3289                              <1> 	ret
  3290                              <1> %endif
  3291 000028FD 00                  <1> 	termcopyneeded db 0
  3292 000028FE 00000000            <1> 	termcursorpos dd 0
  3293 00002902 00000000            <1> 	removedvideo dd 0
  3294                              <1> newtermcopy:
  3295 00002906 60                  <1> 	pusha
  3296 00002907 BF[72D92B00]        <1> 	mov edi, videobuf
  3297 0000290C 31DB                <1> 	xor ebx, ebx
  3298 0000290E 881D[FD280000]      <1> 	mov [termcopyneeded], bl
  3299 00002914 8B1D[DB250000]      <1> 	mov ebx, [videobufpos]
  3300 0000291A 01DF                <1> 	add edi, ebx
  3301 0000291C 893D[FE280000]      <1> 	mov [termcursorpos], edi
  3302 00002922 E8E2000000          <1> 	call switchtermcursor
  3303 00002927 803D[7C8F0000]00    <1> 	cmp byte [guion], 0
  3304 0000292E 0F8420000000        <1> 	je near nowincopy
  3305                              <1> %ifdef gui.included
  3306 00002934 C605[2B820000]00    <1> 	mov byte [mouseselecton], 0
  3307 0000293B C605[ED230000]01    <1> 	mov byte [termcopyon], 1
  3308 00002942 803D[EC230000]01    <1> 	cmp byte [termguion], 1
  3309 00002949 0F84C7550000        <1> 	je near windowvideocopy
  3310                              <1> %endif
  3311 0000294F E9AE000000          <1> 	jmp nocopytermatall
  3312                              <1> nowincopy:
  3313 00002954 BE00000A00          <1> 	mov esi, 0xA0000
  3314 00002959 A1[41020000]        <1> 	mov eax, [basecache]
  3315 0000295E C1E004              <1> 	shl eax, 4
  3316 00002961 29C6                <1> 	sub esi, eax
  3317 00002963 BF[72D92B00]        <1> 	mov edi, videobuf
  3318 00002968 31C9                <1> 	xor ecx, ecx
  3319 0000296A 668B0D[E1250000]    <1> 	mov cx, [charxy]
  3320                              <1> nowincopy2:
  3321 00002971 8B07                <1> 	mov eax, [edi]
  3322 00002973 81C748D50000        <1> 	add edi, (videobuf2 - videobuf)
  3323 00002979 8B1F                <1> 	mov ebx, [edi]
  3324 0000297B 8907                <1> 	mov [edi], eax
  3325 0000297D 81EF48D50000        <1> 	sub edi, (videobuf2 - videobuf)
  3326 00002983 81C702000000        <1> 	add edi, 2
  3327 00002989 39D8                <1> 	cmp eax, ebx
  3328 0000298B 744B                <1> 	je nopresentwinfont
  3329 0000298D 81EF02000000        <1> 	sub edi, 2
  3330 00002993 BD[C6910000]        <1> 	mov ebp, fonts
  3331 00002998 31C0                <1> 	xor eax, eax
  3332 0000299A 668B07              <1> 	mov ax, [edi]
  3333 0000299D C1E004              <1> 	shl eax, 4
  3334 000029A0 01C5                <1> 	add ebp, eax
  3335 000029A2 81C702000000        <1> 	add edi, 2
  3336 000029A8 668B1F              <1> 	mov bx, [edi]
  3337 000029AB 31D2                <1> 	xor edx, edx
  3338 000029AD 8A15[E1250000]      <1> 	mov dl, [charxy]
  3339 000029B3 C1C110              <1> 	rol ecx, 16
  3340 000029B6 B110                <1> 	mov cl, 16
  3341                              <1> nowinfont:
  3342 000029B8 8A4500              <1> 	mov al, [ebp]
  3343 000029BB D0C8                <1> 	ror al, 1
  3344 000029BD 80FB80              <1> 	cmp bl, 0x80
  3345 000029C0 7202                <1> 	jb notnotfont
  3346 000029C2 F6D0                <1> 	not al
  3347                              <1> notnotfont:
  3348 000029C4 8806                <1> 	mov [esi], al
  3349 000029C6 01D6                <1> 	add esi, edx
  3350 000029C8 45                  <1> 	inc ebp
  3351 000029C9 FEC9                <1> 	dec cl
  3352 000029CB 80F900              <1> 	cmp cl, 0
  3353 000029CE 75E8                <1> 	jne nowinfont
  3354 000029D0 C1E204              <1> 	shl edx, 4
  3355 000029D3 29D6                <1> 	sub esi, edx
  3356 000029D5 C1C110              <1> 	rol ecx, 16
  3357                              <1> nopresentwinfont:
  3358 000029D8 81C702000000        <1> 	add edi, 2
  3359 000029DE 46                  <1> 	inc esi
  3360 000029DF FEC9                <1> 	dec cl
  3361 000029E1 80F900              <1> 	cmp cl, 0
  3362 000029E4 758B                <1> 	jne nowincopy2
  3363 000029E6 8A0D[E1250000]      <1> 	mov cl, [charxy]
  3364 000029EC 31D2                <1> 	xor edx, edx
  3365 000029EE 88CA                <1> 	mov dl, cl
  3366 000029F0 29D6                <1> 	sub esi, edx
  3367 000029F2 C1E204              <1> 	shl edx, 4
  3368 000029F5 01D6                <1> 	add esi, edx
  3369 000029F7 FECD                <1> 	dec ch
  3370 000029F9 80FD00              <1> 	cmp ch, 0
  3371 000029FC 0F856FFFFFFF        <1> 	jne nowincopy2
  3372                              <1> nocopytermatall:
  3373 00002A02 E802000000          <1> 	call switchtermcursor
  3374 00002A07 61                  <1> 	popa
  3375 00002A08 C3                  <1> 	ret
  3376                              <1> 	
  3377                              <1> switchtermcursor:
  3378 00002A09 8B3D[FE280000]      <1> 	mov edi, [termcursorpos]
  3379 00002A0F 668B4702            <1> 	mov ax, [edi + 2]
  3380 00002A13 668B1F              <1> 	mov bx, [edi]
  3381 00002A16 663D8000            <1> 	cmp ax, 0x80
  3382 00002A1A 7209                <1> 	jb movlargecursorterm
  3383 00002A1C 66B80700            <1> 	mov ax, 7
  3384 00002A20 E904000000          <1> 	jmp movedcursorterm
  3385                              <1> movlargecursorterm:
  3386 00002A25 66B8F000            <1> 	mov ax, 0xF0
  3387                              <1> movedcursorterm:
  3388 00002A29 66894702            <1> 	mov [edi + 2], ax
  3389 00002A2D 6681FB0000          <1> 	cmp bx, 0
  3390 00002A32 7507                <1> 	jne fixednocursorterm
  3391 00002A34 66BB2000            <1> 	mov bx, ' '
  3392 00002A38 66891F              <1> 	mov [edi], bx
  3393                              <1> fixednocursorterm:
  3394 00002A3B C3                  <1> 	ret
  3395                              <1> %endif
  3396                                      %include "source/dosints.asm"
  3397                              <1> int20h:
  3398 00002A3C 66B8004C            <1> mov ax, 0x4C00
  3399                              <1> int21h:
  3400                              <1> dostosolleros:
  3401 00002A40 6650                <1> 	push ax
  3402 00002A42 66B83000            <1> 	mov ax, NEW_DATA_SEL
  3403 00002A46 8ED8                <1> 	mov ds, ax
  3404 00002A48 8EC0                <1> 	mov es, ax
  3405 00002A4A 8EE0                <1> 	mov fs, ax
  3406 00002A4C 66B82000            <1> 	mov ax, SYS_DATA_SEL
  3407 00002A50 8EE8                <1> 	mov gs, ax
  3408 00002A52 6658                <1> 	pop ax
  3409 00002A54 9C                  <1> 	pushf
  3410 00002A55 60                  <1> 	pusha
  3411 00002A56 80FC01              <1> 	cmp ah, 1
  3412 00002A59 0F8449000000        <1> 	je near dosgchar
  3413 00002A5F 80FC02              <1> 	cmp ah, 2
  3414 00002A62 0F8447000000        <1> 	je near doswchar
  3415 00002A68 80FC09              <1> 	cmp ah, 9
  3416 00002A6B 0F8449000000        <1> 	je near dosprintstr
  3417 00002A71 80FC0A              <1> 	cmp ah, 0xA
  3418 00002A74 0F8456000000        <1> 	je near dosgetstr
  3419 00002A7A 80FC2B              <1> 	cmp ah, 0x2B
  3420 00002A7D 0F8492000000        <1> 	je near dosgetdate
  3421 00002A83 80FC2C              <1> 	cmp ah, 0x2C
  3422 00002A86 0F84AC000000        <1> 	je near dosgettime
  3423 00002A8C 80FC4C              <1> 	cmp ah, 0x4C
  3424 00002A8F 0F84C1000000        <1> 	je near dosexit
  3425                              <1> backtodos:
  3426 00002A95 61                  <1> 	popa
  3427 00002A96 9D                  <1> 	popf
  3428 00002A97 6650                <1> 	push ax
  3429 00002A99 66B85000            <1> 	mov ax, DOS_DATA_SEL
  3430 00002A9D 8ED8                <1> 	mov ds, ax
  3431 00002A9F 8EC0                <1> 	mov es, ax
  3432 00002AA1 8EE0                <1> 	mov fs, ax
  3433 00002AA3 8EE8                <1> 	mov gs, ax
  3434 00002AA5 6658                <1> 	pop ax
  3435 00002AA7 CF                  <1> 	iret
  3436                              <1> 
  3437                              <1> dosgchar:
  3438 00002AA8 E8AEF8FFFF          <1> 	call getchar
  3439 00002AAD EBE6                <1> 	jmp backtodos
  3440                              <1> 	
  3441                              <1> doswchar:
  3442 00002AAF 88D0                <1> 	mov al, dl
  3443 00002AB1 B307                <1> 	mov bl, 7
  3444 00002AB3 E81FF9FFFF          <1> 	call prcharint
  3445 00002AB8 EBDB                <1> 	jmp backtodos
  3446                              <1> 	
  3447                              <1> dosprintstr:
  3448 00002ABA 31F6                <1> 	xor esi, esi
  3449 00002ABC 6689D6              <1> 	mov si, dx
  3450 00002ABF 81C600004000        <1> 	add esi, dosprogloc
  3451 00002AC5 B024                <1> 	mov al, "$"
  3452 00002AC7 B307                <1> 	mov bl, 7
  3453 00002AC9 E899F2FFFF          <1> 	call printint
  3454 00002ACE EBC5                <1> 	jmp backtodos
  3455                              <1> 	
  3456                              <1> dosgetstr:
  3457 00002AD0 31F6                <1> 	xor esi, esi
  3458 00002AD2 6689D6              <1> 	mov si, dx
  3459 00002AD5 81C600004000        <1> 	add esi, dosprogloc
  3460 00002ADB B900000000          <1> 	mov ecx, 0
  3461 00002AE0 8A0E                <1> 	mov cl, [esi]
  3462 00002AE2 81C602000000        <1> 	add esi, 2
  3463 00002AE8 89F7                <1> 	mov edi, esi
  3464 00002AEA 8935[112B0000]      <1> 	mov [stringstart], esi
  3465 00002AF0 01CF                <1> 	add edi, ecx
  3466 00002AF2 B00A                <1> 	mov al, 10
  3467 00002AF4 B307                <1> 	mov bl, 7
  3468 00002AF6 E8ACF3FFFF          <1> 	call rdprintdos
  3469 00002AFB 89F1                <1> 	mov ecx, esi
  3470 00002AFD 2B0D[112B0000]      <1> 	sub ecx, [stringstart]
  3471 00002B03 8B35[112B0000]      <1> 	mov esi, [stringstart]
  3472 00002B09 884EFF              <1> 	mov [esi - 1], cl
  3473 00002B0C 884EFE              <1> 	mov [esi - 2], cl
  3474 00002B0F EB84                <1> 	jmp backtodos
  3475 00002B11 00000000            <1> stringstart dd 0
  3476                              <1> 
  3477                              <1> dosgetdate:
  3478 00002B15 E893270000          <1> 	call time
  3479 00002B1A 8A0D[75540000]      <1> 	mov cl, [RTCtimeYear]
  3480 00002B20 B500                <1> 	mov ch, 0
  3481 00002B22 6681C1D007          <1> 	add cx, 2000
  3482 00002B27 8A35[74540000]      <1> 	mov dh, [RTCtimeMonth]
  3483 00002B2D 8A15[73540000]      <1> 	mov dl, [RTCtimeDay]
  3484 00002B33 E95DFFFFFF          <1> 	jmp backtodos
  3485                              <1> 
  3486                              <1> dosgettime:
  3487 00002B38 E870270000          <1> 	call time
  3488 00002B3D 8A2D[72540000]      <1> 	mov ch, [RTCtimeHour]
  3489 00002B43 8A0D[71540000]      <1> 	mov cl, [RTCtimeMinute]
  3490 00002B49 8A35[70540000]      <1> 	mov dh, [RTCtimeSecond]
  3491 00002B4F B200                <1> 	mov dl, 0
  3492 00002B51 E93FFFFFFF          <1> 	jmp backtodos
  3493                              <1> 	
  3494                              <1> dosexit:
  3495 00002B56 BE[578F0000]        <1> 	mov esi, line
  3496 00002B5B E800F2FFFF          <1> 	call print
  3497 00002B60 61                  <1> 	popa
  3498 00002B61 9D                  <1> 	popf
  3499 00002B62 8B25[DCA70300]      <1> 	mov esp, [previousstack]
  3500 00002B68 31DB                <1> 	xor ebx, ebx
  3501 00002B6A 88C3                <1> 	mov bl, al
  3502 00002B6C 80FB00              <1> 	cmp bl, 0
  3503 00002B6F 0F8576F1FFFF        <1> 	jne near exitprog.error
  3504 00002B75 C3                  <1> 	ret
  3505                                      %include "source/solleros.asm"
  3506                              <1> 	;SOLLEROS.ASM
  3507                              <1> os:
  3508                              <1> setdefenv:
  3509 00002B76 B02F                <1> 	mov al, '/'
  3510 00002B78 A2[E8A70300]        <1> 	mov [currentfolder], al
  3511 00002B7D B801000000          <1> 	mov eax, 1
  3512 00002B82 A3[E4A70300]        <1> 	mov [currentfolderloc], eax
  3513 00002B87 E883F2FFFF          <1> 	call clear
  3514                              <1> 	
  3515                              <1> bootfilecheck:
  3516 00002B8C 803D[ECA90300]01    <1> 	cmp byte [ranboot], 1
  3517 00002B93 0F8421000000        <1> 	je near nobootfile
  3518                              <1> 	%ifdef hardware.automatic
  3519 00002B99 E8623A0000          <1> 		call initializelater ;Initialize components that have debug messages
  3520                              <1> 	%endif
  3521 00002B9E BF[168F0000]        <1> 	mov edi, bootfilename
  3522 00002BA3 BE00004000          <1> 	mov esi, 0x400000
  3523 00002BA8 E88A3E0000          <1> 	call loadfile
  3524 00002BAD 81FA00000000        <1> 	cmp edx, 0
  3525 00002BB3 7505                <1> 	jne nobootfile
  3526 00002BB5 E8B20D0000          <1> 	call progbatchfound
  3527                              <1> nobootfile:	
  3528 00002BBA C605[ECA90300]01    <1> 	mov byte [ranboot], 1
  3529                              <1> 
  3530 00002BC1 BE[03000000]        <1> 	mov esi, signature
  3531                              <1> .sigcopyloop:	;this prevents an odd error
  3532 00002BC6 658A06              <1> 	mov al, [gs:esi]
  3533 00002BC9 8806                <1> 	mov [esi], al
  3534 00002BCB 46                  <1> 	inc esi
  3535 00002BCC 81FE[1D000000]      <1> 	cmp esi, signatureend
  3536 00002BD2 72F2                <1> 	jb .sigcopyloop
  3537                              <1> 	
  3538 00002BD4 BE[03000000]        <1> 	mov esi, signature
  3539 00002BD9 E882F1FFFF          <1> 	call print
  3540 00002BDE 8B0D[19000000]      <1> 	mov ecx, [signatureend - 4]
  3541 00002BE4 E8F6060000          <1> 	call showdec
  3542 00002BE9 BE[578F0000]        <1> 	mov esi, line
  3543 00002BEE E86DF1FFFF          <1> 	call print
  3544 00002BF3 BE[338F0000]        <1> 	mov esi, userask
  3545 00002BF8 E863F1FFFF          <1> 	call print
  3546                              <1> usercheck:
  3547 00002BFD BE[5CBE0300]        <1> 	mov esi, buftxt
  3548 00002C02 BF[5CC20300]        <1> 	mov edi, buftxtend
  3549 00002C07 B00A                <1> 	mov al, 10
  3550 00002C09 E885F2FFFF          <1> 	call rdprint
  3551 00002C0E 56                  <1> 	push esi
  3552 00002C0F BE[3D8F0000]        <1> 	mov esi, pwdask
  3553 00002C14 E847F1FFFF          <1> 	call print
  3554 00002C19 5E                  <1> 	pop esi
  3555 00002C1A 46                  <1> 	inc esi
  3556 00002C1B 8935[102D0000]      <1> 	mov [esipass], esi
  3557                              <1> passcheck:
  3558 00002C21 E835F7FFFF          <1> 	call getchar
  3559 00002C26 3C0A                <1> 	cmp al, 10
  3560 00002C28 0F8438000000        <1> 	je near gotpass
  3561 00002C2E 3C08                <1> 	cmp al, 8
  3562 00002C30 0F8412000000        <1> 	je near backpass
  3563 00002C36 8806                <1> 	mov [esi], al
  3564 00002C38 46                  <1> 	inc esi
  3565 00002C39 30E4                <1> 	xor ah, ah
  3566 00002C3B B02A                <1> 	mov al, "*"
  3567 00002C3D E895F7FFFF          <1> 	call prcharint
  3568 00002C42 EBDD                <1> 	jmp passcheck
  3569 00002C44 08200800            <1> backcursor2 db 8," ",8,0
  3570                              <1> backpass:
  3571 00002C48 3B35[102D0000]      <1> 	cmp esi, [esipass]
  3572 00002C4E 0F84CDFFFFFF        <1> 	je near passcheck
  3573 00002C54 4E                  <1> 	dec esi
  3574 00002C55 C60600              <1> 	mov byte [esi], 0
  3575 00002C58 56                  <1> 	push esi
  3576 00002C59 BE[442C0000]        <1> 	mov esi, backcursor2
  3577 00002C5E E8FDF0FFFF          <1> 	call print
  3578 00002C63 5E                  <1> 	pop esi
  3579 00002C64 EBBB                <1> 	jmp passcheck
  3580                              <1> gotpass:
  3581 00002C66 B00A                <1> 	mov al, 10
  3582 00002C68 E86AF7FFFF          <1> 	call prcharint
  3583 00002C6D 30C0                <1> 	xor al, al
  3584 00002C6F 31C9                <1> 	xor ecx, ecx
  3585 00002C71 8806                <1> 	mov [esi], al
  3586 00002C73 BB[598F0000]        <1> 	mov ebx, userlst
  3587                              <1> userfind:
  3588 00002C78 BE[5CBE0300]        <1> 	mov esi, buftxt
  3589 00002C7D 8A06                <1> 	mov al, [esi]
  3590 00002C7F 3C00                <1> 	cmp al, 0
  3591 00002C81 0F84EFFEFFFF        <1> 	je near os
  3592 00002C87 891D[142D0000]      <1> 	mov [usercache], ebx
  3593 00002C8D E860030000          <1> 	call tester
  3594 00002C92 3C01                <1> 	cmp al, 1
  3595 00002C94 7416                <1> 	je pwdtest
  3596 00002C96 41                  <1> 	inc ecx
  3597                              <1> nxtuser:
  3598 00002C97 8A03                <1> 	mov al, [ebx]
  3599 00002C99 43                  <1> 	inc ebx
  3600 00002C9A 3C00                <1> 	cmp al, 0
  3601 00002C9C 75F9                <1> 	jne nxtuser
  3602 00002C9E 81FB[7C8F0000]      <1> 	cmp ebx, userlstend
  3603 00002CA4 0F83CCFEFFFF        <1> 	jae near os
  3604 00002CAA EBCC                <1> 	jmp userfind
  3605                              <1> pwdtest:
  3606 00002CAC 46                  <1> 	inc esi
  3607 00002CAD 43                  <1> 	inc ebx
  3608 00002CAE E83F030000          <1> 	call tester
  3609 00002CB3 3C01                <1> 	cmp al, 1
  3610 00002CB5 7402                <1> 	je pwdrgt
  3611 00002CB7 EBDE                <1> 	jmp nxtuser
  3612                              <1> pwdrgt:
  3613 00002CB9 D1E9                <1> 	shr ecx, 1
  3614 00002CBB 890D[E8A90300]      <1> 	mov [uid], ecx
  3615 00002CC1 E849F1FFFF          <1> 	call clear
  3616 00002CC6 31C9                <1> 	xor ecx, ecx
  3617 00002CC8 41                  <1> 	inc ecx
  3618 00002CC9 890D[06842D00]      <1> 	mov [commandbufpos], ecx
  3619                              <1> returnfromexp:
  3620 00002CCF 66B90002            <1> 	mov cx, 200h
  3621 00002CD3 BE[5CBE0300]        <1> 	mov esi, buftxt
  3622 00002CD8 8935[EE2F0000]      <1> 	mov [currentcommandloc], esi
  3623 00002CDE E825000000          <1> 	call bufclr
  3624                              <1> clearolddata:
  3625 00002CE3 31C0                <1> 	xor eax, eax
  3626 00002CE5 A2[EDA90300]        <1> 	mov [IFON], al
  3627 00002CEA A2[EEA90300]        <1> 	mov [IFTRUE], al
  3628 00002CEF A2[56AA0300]        <1> 	mov [BATCHISON], al
  3629 00002CF4 A3[52AA0300]        <1> 	mov [BATCHPOS], eax
  3630 00002CF9 A2[57AA0300]        <1> 	mov [LOOPON], al
  3631 00002CFE A3[58AA0300]        <1> 	mov [LOOPPOS], eax
  3632 00002D03 E933000000          <1> 	jmp nwcmd
  3633                              <1> bufclr:	
  3634 00002D08 30C0                <1> 	xor al, al
  3635 00002D0A 8806                <1> 	mov [esi], al
  3636 00002D0C 46                  <1> 	inc esi
  3637 00002D0D E2F9                <1> 	loop bufclr
  3638 00002D0F C3                  <1> 	ret
  3639                              <1> 
  3640 00002D10 00000000            <1> esipass dd 0
  3641 00002D14 [598F0000]          <1> usercache dd userlst
  3642                              <1> 	
  3643                              <1> buftxtclear:
  3644 00002D18 30C0                <1> 	xor al, al
  3645 00002D1A BE[5CBE0300]        <1> 	mov esi, buftxt
  3646 00002D1F 81FE[5CC20300]      <1> clearbuftxt: cmp esi, buf2
  3647 00002D25 730E                <1> 	jae retbufclr
  3648 00002D27 8806                <1> 	mov [esi], al
  3649 00002D29 46                  <1> 	inc esi
  3650 00002D2A EBF3                <1> 	jmp clearbuftxt
  3651                              <1> 
  3652 00002D2C 39DE                <1> clearitbuf: cmp esi, ebx
  3653 00002D2E 7305                <1> 	jae retbufclr
  3654 00002D30 8806                <1> 	mov [esi], al
  3655 00002D32 46                  <1> 	inc esi
  3656 00002D33 EBF7                <1> 	jmp clearitbuf
  3657 00002D35 C3                  <1> retbufclr: ret
  3658                              <1> 
  3659 00002D36 E900000000          <1> full:	jmp nwcmd
  3660                              <1> 
  3661                              <1> shush:	;SollerOS Hardly Unix-compatible Shell
  3662                              <1> nwcmd:
  3663 00002D3B FB                  <1> 	sti
  3664 00002D3C 31C0                <1> 	xor eax, eax
  3665 00002D3E 3905[102F0000]      <1> 	cmp [nextcommandloc], eax
  3666 00002D44 7413                <1> 	je nomultiplecommand
  3667 00002D46 8B35[102F0000]      <1> 	mov esi, [nextcommandloc]
  3668 00002D4C 8935[142F0000]      <1> 	mov [thiscommandloc], esi
  3669 00002D52 E8C6010000          <1> 	call fixvariables
  3670 00002D57 EBE2                <1> 	jmp nwcmd
  3671                              <1> nomultiplecommand:
  3672 00002D59 A3[142F0000]        <1> 	mov [thiscommandloc], eax
  3673 00002D5E 3805[F36B0000]      <1> 	cmp [threadson], al
  3674 00002D64 7405                <1> 	je noclinwcmd
  3675 00002D66 A2[F36B0000]        <1> 	mov [threadson], al
  3676                              <1> noclinwcmd:
  3677 00002D6B B001                <1> 	mov al, 1
  3678 00002D6D 3805[56AA0300]      <1> 	cmp [BATCHISON], al
  3679 00002D73 7501                <1> 	jne cancel
  3680 00002D75 C3                  <1> 	ret
  3681 00002D76 30C0                <1> cancel:	xor al, al
  3682 00002D78 A2[EDA90300]        <1> 	mov [IFON], al
  3683 00002D7D A2[56AA0300]        <1> 	mov [BATCHISON], al
  3684 00002D82 B05B                <1> 	mov al, '['
  3685 00002D84 66BB0700            <1> 	mov bx, 7
  3686 00002D88 E861F6FFFF          <1> 	call prcharq
  3687 00002D8D 8B35[142D0000]      <1> 	mov esi, [usercache]
  3688 00002D93 E8A9EFFFFF          <1> 	call printquiet
  3689 00002D98 BE[478F0000]        <1> 	mov esi, computer
  3690 00002D9D E89FEFFFFF          <1> 	call printquiet
  3691 00002DA2 BE[E8A70300]        <1> 	mov esi, currentfolder
  3692 00002DA7 0335[E0A70300]      <1> 	add esi, [lastfolderloc]
  3693 00002DAD E88FEFFFFF          <1> 	call printquiet
  3694 00002DB2 BE[528F0000]        <1> 	mov esi, endprompt
  3695 00002DB7 E8A4EFFFFF          <1> 	call print
  3696 00002DBC E857FFFFFF          <1> 	call buftxtclear
  3697 00002DC1 BE[5CBE0300]        <1> 	mov esi, buftxt
  3698 00002DC6 C605[44230000]01    <1> 	mov byte [commandedit], 1
  3699 00002DCD B00A                <1> 	mov al, 10
  3700 00002DCF 66BB0700            <1> 	mov bx, 7
  3701 00002DD3 BF[5CC20300]        <1> 	mov edi, buftxtend
  3702 00002DD8 E8B6F0FFFF          <1> 	call rdprint
  3703 00002DDD C605[44230000]00    <1> 	mov byte [commandedit], 0
  3704 00002DE4 803D[5CBE0300]00    <1> 	cmp byte [buftxt], 0
  3705 00002DEB 0F844AFFFFFF        <1> 	je near nwcmd
  3706 00002DF1 8B35[06842D00]      <1> gotcmd:	mov esi, [commandbufpos]
  3707 00002DF7 8935[02842D00]      <1> 	mov [lastcommandpos], esi
  3708 00002DFD FF05[0E842D00]      <1> 	inc dword [commandsentered]
  3709 00002E03 BF[5CBE0300]        <1> 	mov edi, buftxt
  3710 00002E08 81C6[12842D00]      <1> 	add esi, commandbuf
  3711 00002E0E 81FE[12942D00]      <1> 	cmp esi, commandbufend
  3712 00002E14 7605                <1> 	jbe copycommand
  3713 00002E16 BE[12842D00]        <1> 	mov esi, commandbuf
  3714                              <1> copycommand:
  3715 00002E1B 8A07                <1> 	mov al, [edi]
  3716 00002E1D 8806                <1> 	mov [esi], al
  3717 00002E1F 47                  <1> 	inc edi
  3718 00002E20 46                  <1> 	inc esi
  3719 00002E21 3C00                <1> 	cmp al, 0
  3720 00002E23 740F                <1> 	je donecopy
  3721 00002E25 81FE[12942D00]      <1> 	cmp esi, commandbufend
  3722 00002E2B 76EE                <1> 	jbe copycommand
  3723 00002E2D BE[12842D00]        <1> 	mov esi, commandbuf
  3724 00002E32 EBE7                <1> 	jmp copycommand
  3725                              <1> donecopy:
  3726 00002E34 81EE[12842D00]      <1> 	sub esi, commandbuf
  3727 00002E3A 8935[06842D00]      <1> 	mov [commandbufpos], esi
  3728 00002E40 E8D3000000          <1> 	call run
  3729 00002E45 E9F1FEFFFF          <1> 	jmp nwcmd
  3730                              <1> 
  3731 00002E4A E8C9FEFFFF          <1> input:	call buftxtclear
  3732 00002E4F BE[5CBE0300]        <1> 	mov esi, buftxt		;puts input into buftxt AND onto screen
  3733 00002E54 BF[5CC20300]        <1> 	mov edi, buftxtend
  3734 00002E59 B00A                <1> stdin:	mov al, 10
  3735 00002E5B B307                <1> 	mov bl, 7
  3736 00002E5D E831F0FFFF          <1> 	call rdprint
  3737 00002E62 C3                  <1> 	ret
  3738                              <1> 
  3739                              <1> replacevariable:
  3740 00002E63 8A4601              <1> 	mov al, [esi + 1]
  3741 00002E66 C64601FF            <1> 	mov byte [esi + 1], 255
  3742 00002E6A 3C24                <1> 	cmp al, "$"
  3743 00002E6C 0F84AB000000        <1> 	je near fixvariables
  3744 00002E72 884601              <1> 	mov [esi + 1], al
  3745 00002E75 56                  <1> 	push esi
  3746 00002E76 81EE[5CBE0300]      <1> 	sub esi, buftxt
  3747 00002E7C 89F7                <1> 	mov edi, esi
  3748 00002E7E 81C6[5CBE0300]      <1> 	add esi, buftxt
  3749 00002E84 47                  <1> 	inc edi
  3750 00002E85 BB[5CAA0300]        <1> 	mov ebx, variables
  3751 00002E8A E810160000          <1> 	call nxtvrech
  3752 00002E8F 89F7                <1> 	mov edi, esi
  3753 00002E91 31DB                <1> 	xor ebx, ebx
  3754 00002E93 4E                  <1> 	dec esi
  3755                              <1> findvarname:
  3756 00002E94 4E                  <1> 	dec esi
  3757 00002E95 8A06                <1> 	mov al, [esi]
  3758 00002E97 43                  <1> 	inc ebx
  3759 00002E98 3C04                <1> 	cmp al, 4
  3760 00002E9A 75F8                <1> 	jne findvarname
  3761 00002E9C 5E                  <1> 	pop esi
  3762                              <1> replacevarloop:
  3763 00002E9D 8A07                <1> 	mov al, [edi]
  3764 00002E9F 3C00                <1> 	cmp al, 0
  3765 00002EA1 0F8413000000        <1> 	je near compressbuftxt
  3766 00002EA7 81FB00000000        <1> 	cmp ebx, 0
  3767 00002EAD 0F8416000000        <1> 	je near expandbuftxt
  3768 00002EB3 8806                <1> 	mov [esi], al
  3769 00002EB5 4B                  <1> 	dec ebx
  3770 00002EB6 46                  <1> 	inc esi
  3771 00002EB7 47                  <1> 	inc edi
  3772 00002EB8 EBE3                <1> 	jmp replacevarloop
  3773                              <1> compressbuftxt:
  3774 00002EBA 8A041E              <1> 	mov al, [esi + ebx]
  3775 00002EBD 8806                <1> 	mov [esi], al
  3776 00002EBF 46                  <1> 	inc esi
  3777 00002EC0 3C00                <1> 	cmp al, 0
  3778 00002EC2 75F6                <1> 	jne compressbuftxt
  3779 00002EC4 E954000000          <1> 	jmp fixvariables
  3780                              <1> expandbuftxt:
  3781 00002EC9 89F1                <1> 	mov ecx, esi
  3782 00002ECB 8A26                <1> 	mov ah, [esi]
  3783                              <1> expandbuftxtlp:
  3784 00002ECD 8A1E                <1> 	mov bl, [esi]
  3785 00002ECF 46                  <1> 	inc esi
  3786 00002ED0 8A3E                <1> 	mov bh, [esi]
  3787 00002ED2 8826                <1> 	mov [esi], ah
  3788 00002ED4 88FC                <1> 	mov ah, bh
  3789 00002ED6 80FB00              <1> 	cmp bl, 0
  3790 00002ED9 75F2                <1> 	jne expandbuftxtlp
  3791 00002EDB 89CE                <1> 	mov esi, ecx
  3792 00002EDD 8806                <1> 	mov [esi], al
  3793 00002EDF 47                  <1> 	inc edi
  3794 00002EE0 8A07                <1> 	mov al, [edi]
  3795 00002EE2 3C00                <1> 	cmp al, 0
  3796 00002EE4 0F8433000000        <1> 	je near fixvariables
  3797 00002EEA 46                  <1> 	inc esi
  3798 00002EEB EBDC                <1> 	jmp expandbuftxt
  3799                              <1> multipleprogline:
  3800 00002EED 30E4                <1> 	xor ah, ah
  3801 00002EEF 8826                <1> 	mov [esi], ah
  3802 00002EF1 46                  <1> 	inc esi
  3803 00002EF2 8935[102F0000]      <1> 	mov [nextcommandloc], esi
  3804 00002EF8 E93E000000          <1> 	jmp donefixvariables
  3805                              <1> inlinecomment:	;if the following char is #, include a #, otherwise end the line
  3806 00002EFD 46                  <1> 	inc esi
  3807 00002EFE 8A06                <1> 	mov al, [esi]
  3808 00002F00 C606FF              <1> 	mov byte [esi], 255
  3809 00002F03 3C23                <1> 	cmp al, '#'
  3810 00002F05 7416                <1> 	je fixvariables
  3811 00002F07 4E                  <1> 	dec esi
  3812 00002F08 C60600              <1> 	mov byte [esi], 0
  3813 00002F0B E90D000000          <1> 	jmp fixvariables
  3814                              <1> 	
  3815 00002F10 00000000            <1> nextcommandloc dd 0
  3816 00002F14 00000000            <1> thiscommandloc dd 0	
  3817                              <1> run:
  3818 00002F18 BE[5CBE0300]        <1> 	mov esi, buftxt
  3819 00002F1D 46                  <1> fixvariables:	inc esi
  3820 00002F1E 8A06                <1> 	mov al, [esi]
  3821 00002F20 3C23                <1> 	cmp al, '#'	;inline comment
  3822 00002F22 74D9                <1> 	je inlinecomment
  3823 00002F24 3C24                <1> 	cmp al, '$' ;variable
  3824 00002F26 0F8437FFFFFF        <1> 	je near replacevariable
  3825 00002F2C 3C3B                <1> 	cmp al, ';' ;program list
  3826 00002F2E 74BD                <1> 	je multipleprogline
  3827 00002F30 3C00                <1> 	cmp al, 0
  3828 00002F32 75E9                <1> 	jne fixvariables
  3829 00002F34 31C0                <1> 	xor eax, eax
  3830 00002F36 A3[102F0000]        <1> 	mov [nextcommandloc], eax
  3831                              <1> donefixvariables:
  3832 00002F3B 803D[D9340000]00    <1> 	cmp byte [indexdone], 0
  3833 00002F42 7505                <1> 	jne progtest
  3834 00002F44 E8FB040000          <1> 	call indexfiles
  3835                              <1> progtest:
  3836 00002F49 31C0                <1> 	xor eax, eax
  3837 00002F4B BB[DCA30300]        <1> 	mov ebx, fileindex
  3838 00002F50 668B03              <1> prgnxt:	mov ax, [ebx]
  3839 00002F53 B1FF                <1> 	mov cl, 255
  3840 00002F55 B52C                <1> 	mov ch, 44
  3841 00002F57 6639C8              <1> 	cmp ax, cx
  3842 00002F5A 740B                <1> 	je fndprg
  3843 00002F5C 43                  <1> 	inc ebx
  3844 00002F5D 81FB[DCA70300]      <1> 	cmp ebx, fileindexend
  3845 00002F63 735D                <1> 	jae prgnf
  3846 00002F65 EBE9                <1> 	jmp prgnxt
  3847 00002F67 81C302000000        <1> fndprg: add ebx, 2
  3848 00002F6D 31C9                <1> 	xor ecx, ecx
  3849 00002F6F BE[5CBE0300]        <1> 	mov esi, buftxt
  3850 00002F74 390D[142F0000]      <1> 	cmp [thiscommandloc], ecx
  3851 00002F7A 7406                <1> 	je noprgtstmultiple
  3852 00002F7C 8B35[142F0000]      <1> 	mov esi, [thiscommandloc]
  3853                              <1> noprgtstmultiple:
  3854 00002F82 E8A6000000          <1> 	call cndtest
  3855 00002F87 3C01                <1> 	cmp al, 1
  3856 00002F89 7302                <1> 	jae prggood
  3857 00002F8B EBC3                <1> 	jmp prgnxt
  3858 00002F8D 81FB[DCA70300]      <1> prggood: cmp ebx, fileindexend
  3859 00002F93 7358                <1> 	jae prgdn
  3860 00002F95 31C0                <1> 	xor eax, eax
  3861 00002F97 BE[5CBE0300]        <1> 	mov esi, buftxt
  3862 00002F9C 3905[142F0000]      <1> 	cmp [thiscommandloc], eax
  3863 00002FA2 7406                <1> 	je noprggoodmul
  3864 00002FA4 8B35[142F0000]      <1> 	mov esi, [thiscommandloc]
  3865                              <1> noprggoodmul:
  3866 00002FAA 8935[EE2F0000]      <1> 	mov [currentcommandloc], esi
  3867 00002FB0 81C303000000        <1> 	add ebx, 3
  3868 00002FB6 8B3B                <1> 	mov edi, [ebx]
  3869 00002FB8 C605[F36B0000]02    <1> 	mov byte [threadson], 2
  3870 00002FBF FFD7                <1> 	call edi
  3871 00002FC1 C3                  <1> 	ret
  3872                              <1> prgnf:	
  3873 00002FC2 8B35[EE2F0000]      <1> 	mov esi, [currentcommandloc]
  3874 00002FC8 8A06                <1> 	mov al, [esi]
  3875 00002FCA 3C00                <1> 	cmp al, 0
  3876 00002FCC 741F                <1> 	je prgdn
  3877 00002FCE BE[1E8F0000]        <1> 	mov esi, notfound1
  3878 00002FD3 E888EDFFFF          <1> 	call print
  3879 00002FD8 8B35[EE2F0000]      <1> 	mov esi, [currentcommandloc]
  3880 00002FDE E87DEDFFFF          <1> 	call print
  3881 00002FE3 BE[268F0000]        <1> 	mov esi, notfound2
  3882 00002FE8 E873EDFFFF          <1> 	call print
  3883 00002FED C3                  <1> prgdn:	ret
  3884                              <1> 
  3885 00002FEE 00000000            <1> currentcommandloc dd 0
  3886                              <1> 
  3887                              <1> tester:			;si=user bx=prog returns 1 in al if true
  3888 00002FF2 6631C0              <1> 	xor ax, ax
  3889 00002FF5 8A06                <1> retest:	mov al, [esi]
  3890 00002FF7 8A23                <1> 	mov ah, [ebx]
  3891 00002FF9 3C00                <1> 	cmp al, 0
  3892 00002FFB 7408                <1> 	je testtrue
  3893 00002FFD 38E0                <1> 	cmp al, ah
  3894 00002FFF 750C                <1> 	jne testfalse
  3895 00003001 43                  <1> 	inc ebx
  3896 00003002 46                  <1> 	inc esi
  3897 00003003 EBF0                <1> 	jmp retest
  3898                              <1> testtrue:
  3899 00003005 80FC00              <1> 	cmp ah, 0
  3900 00003008 7503                <1> 	jne testfalse
  3901 0000300A B001                <1> 	mov al, 1
  3902 0000300C C3                  <1> 	ret
  3903                              <1> testfalse:
  3904 0000300D 30C0                <1> 	xor al, al
  3905 0000300F C3                  <1> 	ret
  3906                              <1> 
  3907                              <1> optest:			;si=user bx=prog returns 1 in al if true
  3908 00003010 30C0                <1> 	xor al, al
  3909                              <1> opretest:
  3910 00003012 8A06                <1> 	mov al, [esi]
  3911 00003014 8A23                <1> 	mov ah, [ebx]
  3912 00003016 38E0                <1> 	cmp al, ah
  3913 00003018 7510                <1> 	jne optestfalse
  3914 0000301A 80FC00              <1> 	cmp ah, 0
  3915 0000301D 7404                <1> 	je optesttrue
  3916 0000301F 43                  <1> 	inc ebx
  3917 00003020 46                  <1> 	inc esi
  3918 00003021 EBEF                <1> 	jmp opretest
  3919                              <1> optesttrue:
  3920 00003023 3C00                <1> 	cmp al, 0
  3921 00003025 7503                <1> 	jne optestfalse
  3922 00003027 B001                <1> 	mov al, 1
  3923 00003029 C3                  <1> 	ret
  3924                              <1> optestfalse:
  3925 0000302A 30C0                <1> 	xor al, al
  3926 0000302C C3                  <1> 	ret
  3927                              <1> 
  3928                              <1> cndtest:			;si=user bx=prog cl=endchar returns 1 in al if true
  3929 0000302D 30C0                <1> 	xor al, al
  3930 0000302F 8A06                <1> cndretest:	mov al, [esi]
  3931 00003031 8A23                <1> 	mov ah, [ebx]
  3932 00003033 38CC                <1> 	cmp ah, cl
  3933 00003035 7408                <1> 	je cndtesttrue
  3934 00003037 38E0                <1> 	cmp al, ah
  3935 00003039 750B                <1> 	jne cndtestfalse
  3936 0000303B 43                  <1> 	inc ebx
  3937 0000303C 46                  <1> 	inc esi
  3938 0000303D EBF0                <1> 	jmp cndretest
  3939                              <1> cndtesttrue:
  3940 0000303F 38C8                <1> 	cmp al, cl
  3941 00003041 7506                <1> 	jne cndtestalmost
  3942 00003043 B001                <1> 	mov al, 1
  3943 00003045 C3                  <1> 	ret
  3944                              <1> cndtestfalse:
  3945 00003046 30C0                <1> 	xor al, al
  3946 00003048 C3                  <1> 	ret
  3947                              <1> cndtestalmost:
  3948 00003049 B002                <1> 	mov al, 2
  3949 0000304B C3                  <1> 	ret
  3950                              <1> 	
  3951                              <1> array:				;arraystart in si, arrayend in bx, arrayseperator in cx
  3952                              <1> 		                ;ends if array seperator is found backwards after 0
  3953                              <1> 	arnxt:	      
  3954 0000304C 88E8                <1> 		mov al, ch
  3955 0000304E 88CC                <1> 		mov ah, cl        
  3956 00003050 663906              <1> 		cmp [esi], ax
  3957 00003053 744D                <1> 		je ardn
  3958 00003055 66390E              <1> 		cmp [esi], cx
  3959 00003058 7407                <1> 		je arfnd
  3960 0000305A 46                  <1> 		inc esi
  3961 0000305B 39DE                <1> 		cmp esi, ebx
  3962 0000305D 7343                <1> 		jae ardn
  3963 0000305F EBEB                <1> 		jmp arnxt
  3964 00003061 81C602000000        <1> 	arfnd: add esi, 2
  3965 00003067 891D[A3300000]      <1> 		mov [arbx], ebx
  3966 0000306D 890D[A7300000]      <1> 		mov [arcx], ecx
  3967 00003073 E8E8ECFFFF          <1> 		call print
  3968 00003078 8935[A9300000]      <1> 		mov [arsi], esi
  3969 0000307E BE[578F0000]        <1> 		mov esi, line
  3970 00003083 E8D8ECFFFF          <1> 		call print
  3971 00003088 8B1D[A3300000]      <1> 		mov ebx, [arbx]
  3972 0000308E 668B0D[A7300000]    <1> 		mov cx, [arcx]
  3973 00003095 8B35[A9300000]      <1> 		mov esi, [arsi]
  3974 0000309B 46                  <1> 		inc esi
  3975 0000309C 39DE                <1> 		cmp esi, ebx
  3976 0000309E 7302                <1> 		jae ardn
  3977 000030A0 EBAA                <1> 		jmp arnxt
  3978 000030A2 C3                  <1> 	ardn:	ret
  3979 000030A3 00000000            <1> arbx:	dw 0,0
  3980 000030A7 0000                <1> arcx:	db 0,0
  3981 000030A9 00000000            <1> arsi:	dw 0,0
  3982                              <1> 
  3983                              <1> clearbuffer:
  3984 000030AD BE[5CC20300]        <1> 	mov esi, buf2
  3985 000030B2 B030                <1> 	mov al, '0'
  3986 000030B4 81FE[70C20300]      <1> clearbuf: cmp esi, numbuf
  3987 000030BA 7305                <1> 	jae doneclearbuff
  3988 000030BC 8806                <1> 	mov [esi], al
  3989 000030BE 46                  <1> 	inc esi
  3990 000030BF EBF3                <1> 	jmp clearbuf
  3991                              <1> doneclearbuff: 
  3992 000030C1 C3                  <1> 		ret
  3993                              <1> 
  3994                              <1> convert:
  3995 000030C2 4E                  <1> 	dec esi
  3996 000030C3 89F3                <1> 	mov ebx, esi		;place to convert into must be in esi, number to convert must be in ecx
  3997                              <1> .lp:
  3998 000030C5 89DE                <1> 	mov esi, ebx
  3999 000030C7 81EE09000000        <1> 	sub esi, 9
  4000 000030CD 81F900CA9A3B        <1> 	cmp ecx, 1000000000
  4001 000030D3 720A                <1> 	jb .8
  4002 000030D5 81E900CA9A3B        <1> 	sub ecx, 1000000000
  4003 000030DB FE06                <1> 	inc byte [esi]
  4004 000030DD EBE6                <1> 	jmp .lp
  4005 000030DF 46                  <1> .8:	inc esi
  4006 000030E0 81F900E1F505        <1> 	cmp ecx, 100000000
  4007 000030E6 720A                <1> 	jb .7
  4008 000030E8 81E900E1F505        <1> 	sub ecx, 100000000
  4009 000030EE FE06                <1> 	inc byte [esi]
  4010 000030F0 EBD3                <1> 	jmp .lp
  4011 000030F2 46                  <1> .7:	inc esi
  4012 000030F3 81F980969800        <1> 	cmp ecx, 10000000
  4013 000030F9 720A                <1> 	jb .6
  4014 000030FB 81E980969800        <1> 	sub ecx, 10000000
  4015 00003101 FE06                <1> 	inc byte [esi]
  4016 00003103 EBC0                <1> 	jmp .lp
  4017 00003105 46                  <1> .6:	inc esi
  4018 00003106 81F940420F00        <1> 	cmp ecx, 1000000
  4019 0000310C 720A                <1> 	jb .5
  4020 0000310E 81E940420F00        <1> 	sub ecx, 1000000
  4021 00003114 FE06                <1> 	inc byte [esi]
  4022 00003116 EBAD                <1> 	jmp .lp
  4023 00003118 46                  <1> .5:	inc esi
  4024 00003119 81F9A0860100        <1> 	cmp ecx, 100000
  4025 0000311F 720A                <1> 	jb .4
  4026 00003121 81E9A0860100        <1> 	sub ecx, 100000
  4027 00003127 FE06                <1> 	inc byte [esi]
  4028 00003129 EB9A                <1> 	jmp .lp
  4029 0000312B 46                  <1> .4:	inc esi
  4030 0000312C 81F910270000        <1> 	cmp ecx, 10000
  4031 00003132 720A                <1> 	jb .3
  4032 00003134 81E910270000        <1> 	sub ecx, 10000
  4033 0000313A FE06                <1> 	inc byte [esi]
  4034 0000313C EB87                <1> 	jmp .lp
  4035 0000313E 46                  <1> .3:	inc esi
  4036 0000313F 81F9E8030000        <1> 	cmp ecx, 1000
  4037 00003145 720D                <1> 	jb .2
  4038 00003147 81E9E8030000        <1> 	sub ecx, 1000
  4039 0000314D FE06                <1> 	inc byte [esi]
  4040 0000314F E971FFFFFF          <1> 	jmp .lp
  4041 00003154 46                  <1> .2:	inc esi
  4042 00003155 81F964000000        <1> 	cmp ecx, 100
  4043 0000315B 720D                <1> 	jb .1
  4044 0000315D 81E964000000        <1> 	sub ecx, 100
  4045 00003163 FE06                <1> 	inc byte [esi]
  4046 00003165 E95BFFFFFF          <1> 	jmp .lp
  4047 0000316A 46                  <1> .1:	inc esi
  4048 0000316B 81F90A000000        <1> 	cmp ecx, 10
  4049 00003171 720D                <1> 	jb .0
  4050 00003173 81E90A000000        <1> 	sub ecx, 10
  4051 00003179 FE06                <1> 	inc byte [esi]
  4052 0000317B E945FFFFFF          <1> 	jmp .lp
  4053 00003180 46                  <1> .0:	inc esi
  4054 00003181 81F901000000        <1> 	cmp ecx, 1
  4055 00003187 720D                <1> 	jb .dn
  4056 00003189 81E901000000        <1> 	sub ecx, 1
  4057 0000318F FE06                <1> 	inc byte [esi]
  4058 00003191 E92FFFFFFF          <1> 	jmp .lp
  4059                              <1> .dn:
  4060 00003196 C3                  <1> 	ret
  4061                              <1> 
  4062                              <1> 	
  4063                              <1> 
  4064 00003197 00<rept>            <1> hexnumber times 8 db 0
  4065 0000319F 202000              <1> hexnumberend db "  ",0
  4066                              <1> 
  4067                              <1> converthex:
  4068                              <1> .clear:	;place to convert to in esi, end of buffer in edi number in ecx
  4069 000031A2 56                  <1> 	push esi
  4070 000031A3 B030                <1> 	mov al, "0"
  4071 000031A5 39FE                <1> .clearlp: cmp esi, edi
  4072 000031A7 7305                <1> 	jae .doneclear
  4073 000031A9 8806                <1> 	mov [esi], al
  4074 000031AB 46                  <1> 	inc esi
  4075 000031AC EBF7                <1> 	jmp .clearlp
  4076                              <1> .doneclear:
  4077 000031AE 81EE02000000        <1> 	sub esi, 2
  4078 000031B4 89C8                <1> 	mov eax, ecx
  4079                              <1> .loop:
  4080 000031B6 30FF                <1> 	xor bh, bh
  4081 000031B8 88C3                <1> 	mov bl, al
  4082 000031BA 66C1E304            <1> 	shl bx, 4
  4083 000031BE C0EB04              <1> 	shr bl, 4
  4084 000031C1 86DF                <1> 	xchg bl, bh ;they are backwards
  4085 000031C3 80C330              <1> 	add bl, 48
  4086 000031C6 80FB39              <1> 	cmp bl, "9"
  4087 000031C9 7609                <1> 	jbe .goodbl
  4088 000031CB 80EB30              <1> 	sub bl, 48
  4089 000031CE 80EB0A              <1> 	sub bl, 0xA
  4090 000031D1 80C341              <1> 	add bl, "A"
  4091                              <1> .goodbl:
  4092 000031D4 80C730              <1> 	add bh, 48
  4093 000031D7 80FF39              <1> 	cmp bh, "9"
  4094 000031DA 7609                <1> 	jbe .goodbh
  4095 000031DC 80EF30              <1> 	sub bh, 48
  4096 000031DF 80EF0A              <1> 	sub bh, 0xA
  4097 000031E2 80C741              <1> 	add bh, "A"
  4098                              <1> .goodbh:
  4099 000031E5 C1E808              <1> 	shr eax, 8
  4100 000031E8 66891E              <1> 	mov [esi], bx
  4101 000031EB 81EE02000000        <1> 	sub esi, 2
  4102 000031F1 3B3424              <1> 	cmp esi, [esp]
  4103 000031F4 7207                <1> 	jb .done
  4104 000031F6 3D00000000          <1> 	cmp eax, 0
  4105 000031FB 75B9                <1> 	jne .loop
  4106                              <1> .done:
  4107 000031FD 5E                  <1> 	pop esi
  4108 000031FE C3                  <1> 	ret
  4109                              <1> 	
  4110                              <1> 	
  4111 000031FF 00                  <1> smallhex db 0
  4112 00003200 01                  <1> firsthexshown db 1
  4113                              <1> showhexsmall:
  4114 00003201 C605[FF310000]01    <1> 	mov byte [smallhex], 1
  4115 00003208 E808000000          <1> 	call showhex
  4116 0000320D C605[FF310000]00    <1> 	mov byte [smallhex], 0
  4117 00003214 C3                  <1> 	ret
  4118                              <1> showhex:
  4119 00003215 60                  <1> 	pusha
  4120 00003216 BE[97310000]        <1> 	mov esi, hexnumber
  4121 0000321B BF[9F310000]        <1> 	mov edi, hexnumberend
  4122 00003220 E87DFFFFFF          <1> 	call converthex
  4123 00003225 803D[00320000]01    <1> 	cmp byte [firsthexshown], 1
  4124 0000322C 7503                <1> 	jne .show
  4125 0000322E 6631D2              <1> 	xor dx, dx
  4126                              <1> .show:
  4127 00003231 803D[00320000]03    <1> 	cmp byte [firsthexshown], 3
  4128 00003238 750A                <1> 	jne .nonewhexline
  4129 0000323A BE[578F0000]        <1> 	mov esi, line
  4130 0000323F E81CEBFFFF          <1> 	call print
  4131                              <1> .nonewhexline:
  4132 00003244 803D[00320000]04    <1> 	cmp byte [firsthexshown], 4
  4133 0000324B 7527                <1> 	jne .notab
  4134 0000324D B1A0                <1> 	mov cl, 160
  4135 0000324F 28D1                <1> 	sub cl, dl
  4136 00003251 C0E905              <1> 	shr cl, 5
  4137 00003254 C0E105              <1> 	shl cl, 5
  4138 00003257 80F900              <1> 	cmp cl, 0
  4139 0000325A 750F                <1> 	jne .nonewline
  4140 0000325C BE[578F0000]        <1> 	mov esi, line
  4141 00003261 E8FAEAFFFF          <1> 	call print
  4142 00003266 E909000000          <1> 	jmp .notab
  4143                              <1> .nonewline:
  4144 0000326B 80C20F              <1> 	add dl, 15
  4145 0000326E C0EA04              <1> 	shr dl, 4
  4146 00003271 C0E204              <1> 	shl dl, 4
  4147                              <1> .notab:
  4148 00003274 BE[97310000]        <1> 	mov esi, hexnumber
  4149 00003279 803D[FF310000]01    <1> 	cmp byte [smallhex],1
  4150 00003280 7506                <1> 	jne .nosmall
  4151 00003282 81C606000000        <1> 	add esi, 6
  4152                              <1> .nosmall:
  4153 00003288 803D[00320000]05    <1> 	cmp byte [firsthexshown], 5
  4154 0000328F 750A                <1> 	jne .noquiet
  4155 00003291 E8ABEAFFFF          <1> 	call printquiet
  4156 00003296 E918000000          <1> 	jmp .donequiet
  4157                              <1> .noquiet:
  4158 0000329B 803D[00320000]06    <1> 	cmp byte [firsthexshown], 6
  4159 000032A2 750A                <1> 	jne .normal
  4160 000032A4 E8ABEAFFFF          <1> 	call printhighlight
  4161 000032A9 E905000000          <1> 	jmp .donequiet
  4162                              <1> .normal:
  4163 000032AE E8ADEAFFFF          <1> 	call print
  4164                              <1> .donequiet:
  4165 000032B3 803D[00320000]02    <1> 	cmp byte [firsthexshown], 2
  4166 000032BA 750A                <1> 	jne .shown
  4167 000032BC BE[578F0000]        <1> 	mov esi, line
  4168 000032C1 E89AEAFFFF          <1> 	call print
  4169                              <1> .shown:
  4170 000032C6 C605[00320000]00    <1> 	mov byte [firsthexshown], 0
  4171 000032CD 61                  <1> 	popa
  4172 000032CE C3                  <1> 	ret
  4173                              <1> 
  4174                              <1> 
  4175 000032CF 303030303030303030- <1> decnumber db "00000000000000"
  4176 000032D8 3030303030          <1>
  4177 000032DD 2000                <1> decnumberend: db " ",0
  4178                              <1> 
  4179                              <1> showdec: ;;same as showhex, just uses decimal conversion
  4180 000032DF 60                  <1> 	pusha
  4181 000032E0 BF[CF320000]        <1> 	mov edi, decnumber
  4182 000032E5 BE[DD320000]        <1> 	mov esi, decnumberend
  4183                              <1> .clear:
  4184 000032EA C60730              <1> 	mov byte [edi], '0'
  4185 000032ED 47                  <1> 	inc edi
  4186 000032EE 39F7                <1> 	cmp edi, esi
  4187 000032F0 72F8                <1> 	jb .clear
  4188 000032F2 BF[CF320000]        <1> 	mov edi, decnumber
  4189 000032F7 E8C6FDFFFF          <1> 	call convert
  4190 000032FC 803D[00320000]01    <1> 	cmp byte [firsthexshown], 1
  4191 00003303 7503                <1> 	jne .show
  4192 00003305 6631D2              <1> 	xor dx, dx
  4193                              <1> .show:
  4194 00003308 803D[00320000]03    <1> 	cmp byte [firsthexshown], 3
  4195 0000330F 750A                <1> 	jne .nonewdecline
  4196 00003311 BE[578F0000]        <1> 	mov esi, line
  4197 00003316 E845EAFFFF          <1> 	call print
  4198                              <1> .nonewdecline:
  4199 0000331B 803D[00320000]04    <1> 	cmp byte [firsthexshown], 4
  4200 00003322 7527                <1> 	jne .notab
  4201 00003324 B1A0                <1> 	mov cl, 160
  4202 00003326 28D1                <1> 	sub cl, dl
  4203 00003328 C0E905              <1> 	shr cl, 5
  4204 0000332B C0E105              <1> 	shl cl, 5
  4205 0000332E 80F900              <1> 	cmp cl, 0
  4206 00003331 750F                <1> 	jne .nonewline
  4207 00003333 BE[578F0000]        <1> 	mov esi, line
  4208 00003338 E823EAFFFF          <1> 	call print
  4209 0000333D E909000000          <1> 	jmp .notab
  4210                              <1> .nonewline:
  4211 00003342 80C20F              <1> 	add dl, 15
  4212 00003345 C0EA04              <1> 	shr dl, 4
  4213 00003348 C0E204              <1> 	shl dl, 4
  4214                              <1> .notab:
  4215 0000334B BE[CF320000]        <1> 	mov esi, decnumber
  4216 00003350 4E                  <1> 	dec esi
  4217                              <1> .sifind:
  4218 00003351 46                  <1> 	inc esi
  4219 00003352 803E30              <1> 	cmp byte [esi], '0'
  4220 00003355 74FA                <1> 	je .sifind
  4221 00003357 E804EAFFFF          <1> 	call print
  4222 0000335C 803D[00320000]02    <1> 	cmp byte [firsthexshown], 2
  4223 00003363 750A                <1> 	jne .shown
  4224 00003365 BE[578F0000]        <1> 	mov esi, line
  4225 0000336A E8F1E9FFFF          <1> 	call print
  4226                              <1> .shown:
  4227 0000336F C605[00320000]00    <1> 	mov byte [firsthexshown], 0
  4228 00003376 61                  <1> 	popa
  4229 00003377 C3                  <1> 	ret
  4230                              <1> 	
  4231                              <1> cnvrthextxt:
  4232 00003378 31C9                <1> 	xor ecx, ecx
  4233 0000337A 31C0                <1> 	xor eax, eax
  4234 0000337C 31D2                <1> 	xor edx, edx
  4235 0000337E 31DB                <1> 	xor ebx, ebx
  4236 00003380 4E                  <1> 	dec esi
  4237                              <1> .end:
  4238 00003381 46                  <1> 	inc esi
  4239 00003382 8A06                <1> 	mov al, [esi]
  4240 00003384 3C00                <1> 	cmp al, 0
  4241 00003386 75F9                <1> 	jne .end
  4242                              <1> .loop:
  4243 00003388 4E                  <1> 	dec esi
  4244 00003389 8A06                <1> 	mov al, [esi]
  4245 0000338B 3C41                <1> 	cmp al, "A"
  4246 0000338D 7328                <1> 	jae .char
  4247 0000338F 2C30                <1> 	sub al, 48
  4248 00003391 3C10                <1> 	cmp al, 16
  4249 00003393 7721                <1> 	ja .done
  4250                              <1> .donechar:
  4251 00003395 81FA00000000        <1> 	cmp edx, 0
  4252 0000339B 740E                <1> 	je .noshl
  4253 0000339D 89D3                <1> 	mov ebx, edx
  4254                              <1> .shl:
  4255 0000339F C1E004              <1> 	shl eax, 4
  4256 000033A2 4B                  <1> 	dec ebx
  4257 000033A3 81FB00000000        <1> 	cmp ebx, 0
  4258 000033A9 75F4                <1> 	jne .shl
  4259                              <1> .noshl:
  4260 000033AB 42                  <1> 	inc edx
  4261 000033AC 01C1                <1> 	add ecx, eax
  4262 000033AE 81FA08000000        <1> 	cmp edx, 8
  4263 000033B4 72D2                <1> 	jb .loop
  4264                              <1> .done:
  4265 000033B6 C3                  <1> 	ret
  4266                              <1> .char:
  4267 000033B7 3C46                <1> 	cmp al, "F"
  4268 000033B9 77FB                <1> 	ja .done
  4269 000033BB 2C41                <1> 	sub al, "A"
  4270 000033BD 040A                <1> 	add al, 0xA
  4271 000033BF EBD4                <1> 	jmp .donechar
  4272                              <1> 	
  4273                              <1> 	
  4274                              <1> cnvrttxt: ;text to convert in esi, first part or 0 in edi
  4275 000033C1 31C9                <1> 	xor ecx, ecx
  4276 000033C3 31C0                <1> 	xor eax, eax
  4277 000033C5 31D2                <1> 	xor edx, edx
  4278 000033C7 31DB                <1> 	xor ebx, ebx
  4279 000033C9 4E                  <1> 	dec esi
  4280                              <1> .lp:
  4281 000033CA 46                  <1> 	inc esi
  4282 000033CB 8A06                <1> 	mov al, [esi]
  4283 000033CD 3C00                <1> 	cmp al, 0
  4284 000033CF 75F9                <1> 	jne .lp
  4285 000033D1 4E                  <1> 	dec esi
  4286 000033D2 8A06                <1> 	mov al, [esi]
  4287 000033D4 3C2E                <1> 	cmp al, '.'
  4288 000033D6 7503                <1> 	jne .dot
  4289 000033D8 46                  <1> 	inc esi
  4290 000033D9 EBEF                <1> 	jmp .lp
  4291                              <1> .dot:
  4292 000033DB 3C20                <1> 	cmp al, ' '
  4293 000033DD 7404                <1> 	je .zero
  4294 000033DF 3C30                <1> 	cmp al, '0'
  4295 000033E1 7504                <1> 	jne .txtlp
  4296                              <1> .zero: 
  4297 000033E3 39FE                <1> 		cmp esi, edi
  4298 000033E5 7458                <1> 		je .done
  4299                              <1> .txtlp:
  4300 000033E7 31C0                <1> 	xor eax, eax
  4301 000033E9 8A06                <1> 	mov al, [esi]
  4302 000033EB 3C3D                <1> 	cmp al, '='
  4303 000033ED 7450                <1> 	je .done
  4304 000033EF 3C30                <1> 	cmp al, 48
  4305 000033F1 724C                <1> 	jb .done
  4306 000033F3 3C23                <1> 	cmp al, '#'
  4307 000033F5 7448                <1> 	je .done
  4308 000033F7 39FE                <1> 	cmp esi, edi
  4309 000033F9 7244                <1> 	jb .done
  4310 000033FB 81F900000000        <1> 	cmp ecx, 0
  4311 00003401 7708                <1> 	ja .exp
  4312 00003403 2C30                <1> .noexp:	sub al, 48
  4313 00003405 01C2                <1> 	add edx, eax
  4314 00003407 4E                  <1> 	dec esi
  4315 00003408 41                  <1> 	inc ecx
  4316 00003409 EBDC                <1> 	jmp .txtlp
  4317 0000340B 81F900000000        <1> .exp:	cmp ecx, 0
  4318 00003411 74F0                <1> 	je .noexp
  4319 00003413 2C30                <1> 	sub al, 48
  4320 00003415 51                  <1> 	push ecx
  4321 00003416 89C3                <1> .expmul:	mov ebx, eax
  4322 00003418 01D8                <1> 	add eax, ebx
  4323 0000341A 01D8                <1> 	add eax, ebx
  4324 0000341C 01D8                <1> 	add eax, ebx
  4325 0000341E 01D8                <1> 	add eax, ebx
  4326 00003420 01D8                <1> 	add eax, ebx
  4327 00003422 01D8                <1> 	add eax, ebx
  4328 00003424 01D8                <1> 	add eax, ebx
  4329 00003426 01D8                <1> 	add eax, ebx
  4330 00003428 01D8                <1> 	add eax, ebx
  4331 0000342A 81E901000000        <1> 	sub ecx, 1
  4332 00003430 81F900000000        <1> 	cmp ecx, 0
  4333 00003436 77DE                <1> 	ja .expmul
  4334 00003438 01C2                <1> 	add edx, eax
  4335 0000343A 59                  <1> 	pop ecx
  4336 0000343B 4E                  <1> 	dec esi
  4337 0000343C 41                  <1> 	inc ecx
  4338 0000343D EBA8                <1> 	jmp .txtlp
  4339 0000343F 89D1                <1> .done: mov ecx, edx
  4340 00003441 C3                  <1> 	ret
  4341                                      %include "source/programs.asm"
  4342 00003442 FF2C                <1> filetypes db 255,44
  4343                              <1> progstart:		;programs start here
  4344                              <1> indexfiles:
  4345 00003444 BE[44340000]        <1> 	mov esi, progstart
  4346 00003449 BB[DCA30300]        <1> 	mov ebx, fileindex
  4347 0000344E BF[44340000]        <1> 	mov edi, progstart
  4348 00003453 81EF02000000        <1> 	sub edi, 2
  4349                              <1> indexloop:
  4350 00003459 668B0E              <1> 	mov cx, [esi]
  4351                              <1> 	indexloop2:
  4352 0000345C 663B0F              <1> 		cmp cx, [edi]
  4353 0000345F 7424                <1> 		je indexloop2done
  4354 00003461 81EF02000000        <1> 		sub edi, 2
  4355 00003467 81FF[42340000]      <1> 		cmp edi, filetypes
  4356 0000346D 73ED                <1> 		jae indexloop2
  4357 0000346F BF[44340000]        <1> 	mov edi, progstart
  4358 00003474 81EF02000000        <1> 	sub edi, 2
  4359 0000347A 46                  <1> 	inc esi
  4360 0000347B 81FE[B7550000]      <1> 	cmp esi, batchprogend
  4361 00003481 734E                <1> 	jae indexloopdone
  4362 00003483 EBD4                <1> 	jmp indexloop
  4363                              <1> indexloop2done:
  4364 00003485 66890B              <1> 	mov [ebx], cx
  4365 00003488 81C302000000        <1> 	add ebx, 2
  4366 0000348E 81C602000000        <1> 	add esi, 2
  4367                              <1> 	nameindex:
  4368 00003494 8A0E                <1> 		mov cl, [esi]
  4369 00003496 80F900              <1> 		cmp cl, 0
  4370 00003499 7406                <1> 		je nameindexdone
  4371 0000349B 880B                <1> 		mov [ebx], cl
  4372 0000349D 46                  <1> 		inc esi
  4373 0000349E 43                  <1> 		inc ebx
  4374 0000349F EBF3                <1> 		jmp nameindex
  4375                              <1> 	nameindexdone:
  4376 000034A1 43                  <1> 		inc ebx
  4377 000034A2 66C7030000          <1> 		mov word [ebx], 0
  4378 000034A7 81C302000000        <1> 		add ebx, 2
  4379 000034AD 46                  <1> 		inc esi
  4380 000034AE 8933                <1> 		mov [ebx], esi
  4381 000034B0 81C304000000        <1> 		add ebx, 4
  4382 000034B6 66C7030000          <1> 		mov word [ebx], 0
  4383 000034BB 81C302000000        <1> 		add ebx, 2
  4384 000034C1 81FB[DCA70300]      <1> 		cmp ebx, fileindexend
  4385 000034C7 7308                <1> 		jae indexloopdone
  4386 000034C9 81C601000000        <1> 		add esi, 1
  4387 000034CF EB88                <1> 		jmp indexloop
  4388 000034D1 C605[D9340000]01    <1> indexloopdone: 	mov byte [indexdone], 1
  4389 000034D8 C3                  <1> 		ret
  4390 000034D9 00                  <1> indexdone db 0
  4391                              <1> %include 'source/programs/_comment.asm' ;#
  4392 000034DA FF2C2300            <2> 	db 255,44,"#",0	;this lets you rem stuff
  4393 000034DE C3                  <2> 	ret 
  4394                              <1> %include 'source/programs/_math.asm' ;!
  4395 000034DF FF2C2100            <2> db 255,44,"!",0
  4396                              <2> 	num:	
  4397 000034E3 E8C5FBFFFF          <2> 		call clearbuffer
  4398 000034E8 C605[69370000]00    <2> 		mov byte [decimal], 0
  4399 000034EF C605[6A370000]00    <2> 		mov byte [decimal2], 0
  4400 000034F6 8B35[EE2F0000]      <2> 		mov esi, [currentcommandloc]
  4401 000034FC 31C0                <2> 		xor eax, eax
  4402 000034FE 31C9                <2> 		xor ecx, ecx
  4403 00003500 31DB                <2> 		xor ebx, ebx
  4404 00003502 8A06                <2> 	num2:	mov al, [esi]
  4405 00003504 3C2B                <2> 		cmp al, '+'
  4406 00003506 741B                <2> 		je operatorfound
  4407 00003508 3C2D                <2> 		cmp al, '-'
  4408 0000350A 7417                <2> 		je operatorfound
  4409 0000350C 3C2A                <2> 		cmp al, '*'
  4410 0000350E 7413                <2> 		je operatorfound
  4411 00003510 3C2F                <2> 		cmp al, '/'
  4412 00003512 740F                <2> 		je operatorfound
  4413 00003514 3C5E                <2> 		cmp al, '^'
  4414 00003516 740B                <2> 		je operatorfound
  4415 00003518 46                  <2> 		inc esi
  4416 00003519 3C00                <2> 		cmp al, 0
  4417 0000351B 0F841AF8FFFF        <2> 		je near nwcmd
  4418 00003521 EBDF                <2> 		jmp num2
  4419 00003523 50                  <2> 	operatorfound: push eax
  4420 00003524 30E4                <2> 		xor ah, ah
  4421 00003526 8826                <2> 		mov [esi], ah
  4422 00003528 89F7                <2> 		mov edi, esi
  4423 0000352A 46                  <2> 		inc esi
  4424 0000352B 8A06                <2> 		mov al, [esi]
  4425 0000352D 3C25                <2> 		cmp al, '%'
  4426 0000352F 0F8462000000        <2> 		je near resultnum1
  4427                              <2> 	varnum2: 
  4428 00003535 57                  <2> 		push edi
  4429 00003536 E8A4000000          <2> 		call checkdecimal
  4430 0000353B 5F                  <2> 		pop edi
  4431 0000353C E880FEFFFF          <2> 		call cnvrttxt
  4432                              <2> 	vrnm2:
  4433 00003541 89CB                <2> 		mov ebx, ecx
  4434 00003543 53                  <2> 		push ebx
  4435 00003544 E864FBFFFF          <2> 		call clearbuffer
  4436 00003549 8B35[EE2F0000]      <2> 		mov esi, [currentcommandloc]
  4437 0000354F 89F7                <2> 		mov edi, esi
  4438 00003551 46                  <2> 		inc esi
  4439 00003552 8A06                <2> 		mov al, [esi]
  4440 00003554 3C25                <2> 		cmp al, '%'
  4441 00003556 0F844F000000        <2> 		je near resultnum2
  4442                              <2> 	varnum4: 
  4443 0000355C 57                  <2> 		push edi
  4444 0000355D E869000000          <2> 		call checkdecimal2
  4445 00003562 5F                  <2> 		pop edi
  4446 00003563 E859FEFFFF          <2> 		call cnvrttxt
  4447                              <2> 	vrnm4:
  4448 00003568 5B                  <2> 		pop ebx
  4449 00003569 58                  <2> 		pop eax
  4450 0000356A 3C2B                <2> 		cmp al, '+'
  4451 0000356C 0F849B000000        <2> 		je near plusnum
  4452 00003572 3C2D                <2> 		cmp al, '-'
  4453 00003574 0F849F000000        <2> 		je near subnum
  4454 0000357A 3C2A                <2> 		cmp al, '*'
  4455 0000357C 0F84A3000000        <2> 		je near mulnum
  4456 00003582 3C2F                <2> 		cmp al, '/'
  4457 00003584 0F84B1000000        <2> 		je near divnum
  4458 0000358A 3C5E                <2> 		cmp al, '^'
  4459 0000358C 0F84CE000000        <2> 		je near expnum
  4460 00003592 E9A4F7FFFF          <2> 		jmp nwcmd
  4461                              <2> 	resultnum1:
  4462 00003597 8A0D[6B370000]      <2> 		mov cl, [decimalresult]
  4463 0000359D 880D[69370000]      <2> 		mov [decimal], cl
  4464 000035A3 8B0D[6C370000]      <2> 		mov ecx, [result]
  4465 000035A9 EB96                <2> 		jmp vrnm2
  4466                              <2> 	resultnum2:
  4467 000035AB 8A0D[69370000]      <2> 		mov cl, [decimal]
  4468 000035B1 880D[6A370000]      <2> 		mov [decimal2], cl
  4469 000035B7 8A0D[6B370000]      <2> 		mov cl, [decimalresult]
  4470 000035BD 880D[69370000]      <2> 		mov [decimal], cl
  4471 000035C3 8B0D[6C370000]      <2> 		mov ecx, [result]
  4472 000035C9 EB9D                <2> 		jmp vrnm4
  4473                              <2> 	checkdecimal2:
  4474 000035CB 8A25[69370000]      <2> 		mov ah, [decimal]
  4475 000035D1 8825[6A370000]      <2> 		mov [decimal2], ah
  4476 000035D7 30E4                <2> 		xor ah, ah
  4477 000035D9 8825[69370000]      <2> 		mov [decimal], ah
  4478                              <2> 	checkdecimal:
  4479 000035DF 89F7                <2> 		mov edi, esi
  4480                              <2> 	chkdec1:
  4481 000035E1 8A07                <2> 		mov al, [edi]
  4482 000035E3 3C2E                <2> 		cmp al, '.'
  4483 000035E5 0F840B000000        <2> 		je near fnddec
  4484 000035EB 3C00                <2> 		cmp al, 0
  4485 000035ED 0F8419000000        <2> 		je near nodecimal
  4486 000035F3 47                  <2> 		inc edi
  4487 000035F4 EBEB                <2> 		jmp chkdec1
  4488                              <2> 	fnddec:
  4489 000035F6 8A4701              <2> 		mov al, [edi + 1]
  4490 000035F9 8807                <2> 		mov [edi], al
  4491 000035FB 3C00                <2> 		cmp al, 0
  4492 000035FD 0F8409000000        <2> 		je near nodecimal
  4493 00003603 FE05[69370000]      <2> 		inc byte [decimal]
  4494 00003609 47                  <2> 		inc edi
  4495 0000360A EBEA                <2> 		jmp fnddec
  4496                              <2> 	nodecimal:
  4497 0000360C C3                  <2> 		ret
  4498                              <2> 	plusnum:
  4499 0000360D E815010000          <2> 		call decaddfix
  4500 00003612 01D9                <2> 		add ecx, ebx
  4501 00003614 E98A000000          <2> 		jmp retnum
  4502                              <2> 	subnum:
  4503 00003619 E809010000          <2> 		call decaddfix
  4504 0000361E 29D9                <2> 		sub ecx, ebx
  4505 00003620 E97E000000          <2> 		jmp retnum
  4506                              <2> 	mulnum:
  4507 00003625 A0[6A370000]        <2> 		mov al, [decimal2]
  4508 0000362A 0005[69370000]      <2> 		add [decimal], al
  4509 00003630 89C8                <2> 		mov eax, ecx
  4510 00003632 F7E3                <2> 		mul ebx
  4511 00003634 89C1                <2> 		mov ecx, eax
  4512 00003636 E968000000          <2> 		jmp retnum
  4513                              <2> 	divnum:
  4514 0000363B E8E7000000          <2> 		call decaddfix
  4515 00003640 30C0                <2> 		xor al, al
  4516 00003642 A2[69370000]        <2> 		mov [decimal], al
  4517 00003647 31D2                <2> 		xor edx, edx
  4518 00003649 89C8                <2> 		mov eax, ecx
  4519 0000364B 81FB00000000        <2> 		cmp ebx, 0
  4520 00003651 0F844C000000        <2> 		je near retnum
  4521 00003657 F7F3                <2> 		div ebx
  4522 00003659 89C1                <2> 		mov ecx, eax
  4523 0000365B E943000000          <2> 		jmp retnum
  4524                              <2> 	expnum:
  4525 00003660 8A15[69370000]      <2> 		mov dl, [decimal]
  4526 00003666 8815[6A370000]      <2> 		mov [decimal2], dl
  4527 0000366C 31D2                <2> 		xor edx, edx
  4528 0000366E 89C8                <2> 		mov eax, ecx
  4529 00003670 89D9                <2> 		mov ecx, ebx
  4530 00003672 89C3                <2> 		mov ebx, eax
  4531 00003674 81F900000000        <2> 		cmp ecx, 0
  4532 0000367A 7422                <2> 		je noexpnum
  4533 0000367C 49                  <2> 		dec ecx
  4534 0000367D 81F900000000        <2> 		cmp ecx, 0
  4535 00003683 7412                <2> 		je noexpnumlp
  4536 00003685 F7E3                <2> 	expnumlp: mul ebx
  4537 00003687 8A15[6A370000]      <2> 		mov dl, [decimal2]
  4538 0000368D 0015[69370000]      <2> 		add [decimal], dl
  4539 00003693 31D2                <2> 		xor edx, edx
  4540 00003695 E2EE                <2> 		loop expnumlp
  4541                              <2> 	noexpnumlp:
  4542 00003697 89C1                <2> 		mov ecx, eax
  4543 00003699 E905000000          <2> 		jmp retnum
  4544                              <2> 	noexpnum:
  4545 0000369E B901000000          <2> 		mov ecx, 1
  4546                              <2> 	retnum: 
  4547 000036A3 BE[70C20300]        <2> 		mov esi, numbuf
  4548 000036A8 890D[6C370000]      <2> 		mov [result], ecx
  4549 000036AE E80FFAFFFF          <2> 		call convert
  4550 000036B3 BE[70C20300]        <2> 		mov esi, numbuf
  4551 000036B8 8A25[69370000]      <2> 		mov ah, [decimal]
  4552 000036BE 8825[6B370000]      <2> 		mov [decimalresult], ah
  4553 000036C4 80FC00              <2> 		cmp ah, 0
  4554 000036C7 0F8425000000        <2> 		je near noputdecimal
  4555                              <2> 	putdecimal:
  4556 000036CD 4E                  <2> 		dec esi
  4557 000036CE FECC                <2> 		dec ah
  4558 000036D0 80FC00              <2> 		cmp ah, 0
  4559 000036D3 0F87F4FFFFFF        <2> 		ja near putdecimal
  4560 000036D9 4E                  <2> 		dec esi
  4561 000036DA 8A06                <2> 		mov al, [esi]
  4562 000036DC C6062E              <2> 		mov byte [esi], '.'
  4563                              <2> 	decputloop:
  4564 000036DF 4E                  <2> 		dec esi
  4565 000036E0 8A26                <2> 		mov ah, [esi]
  4566 000036E2 8806                <2> 		mov [esi], al
  4567 000036E4 88E0                <2> 		mov al, ah
  4568 000036E6 81FE[5CC20300]      <2> 		cmp esi, buf2
  4569 000036EC 0F87EDFFFFFF        <2> 		ja near decputloop
  4570                              <2> 	noputdecimal:
  4571 000036F2 BE[5CC20300]        <2> 		mov esi, buf2
  4572 000036F7 E809000000          <2> 		call chkadd
  4573 000036FC E93AF6FFFF          <2> 		jmp nwcmd
  4574 00003701 00000000            <2> edxnumbuf dw 0,0
  4575 00003705 8A06                <2> 	chkadd: mov al, [esi]
  4576 00003707 3C30                <2> 		cmp al, '0'
  4577 00003709 750C                <2> 		jne dnadd
  4578 0000370B 46                  <2> 		inc esi
  4579 0000370C 81FE[70C20300]      <2> 		cmp esi, numbuf
  4580 00003712 7402                <2> 		je dnaddm1
  4581 00003714 EBEF                <2> 		jmp chkadd
  4582 00003716 4E                  <2> 	dnaddm1: dec esi
  4583 00003717 E844E6FFFF          <2> 	dnadd:	call print
  4584 0000371C BE[578F0000]        <2> 		mov esi, line
  4585 00003721 E83AE6FFFF          <2> 		call print
  4586 00003726 C3                  <2> 		ret
  4587                              <2> 		
  4588                              <2> 	decaddfix:
  4589 00003727 A0[6A370000]        <2> 		mov al, [decimal2]
  4590 0000372C 8A25[69370000]      <2> 		mov ah, [decimal]
  4591 00003732 38E0                <2> 		cmp al, ah
  4592 00003734 7432                <2> 		je gooddecadd
  4593 00003736 38E0                <2> 		cmp al, ah
  4594 00003738 721A                <2> 		jb lowdecadd
  4595                              <2> 	highdecadd:
  4596 0000373A FEC4                <2> 		inc ah
  4597 0000373C 89CA                <2> 		mov edx, ecx
  4598 0000373E C1E103              <2> 		shl ecx, 3
  4599 00003741 01D1                <2> 		add ecx, edx
  4600 00003743 01D1                <2> 		add ecx, edx
  4601 00003745 38E0                <2> 		cmp al, ah
  4602 00003747 77F1                <2> 		ja highdecadd
  4603 00003749 8825[69370000]      <2> 		mov [decimal], ah
  4604 0000374F E914000000          <2> 		jmp gooddecadd
  4605                              <2> 	lowdecadd:
  4606 00003754 FEC0                <2> 		inc al
  4607 00003756 89DA                <2> 		mov edx, ebx
  4608 00003758 C1E303              <2> 		shl ebx, 3
  4609 0000375B 01D3                <2> 		add ebx, edx
  4610 0000375D 01D3                <2> 		add ebx, edx
  4611 0000375F 38E0                <2> 		cmp al, ah
  4612 00003761 72F1                <2> 		jb lowdecadd
  4613 00003763 A2[69370000]        <2> 		mov [decimal], al
  4614                              <2> 	gooddecadd:
  4615 00003768 C3                  <2> 		ret
  4616                              <2> 		
  4617 00003769 00                  <2> decimal db 0
  4618 0000376A 00                  <2> decimal2 db 0
  4619 0000376B 00                  <2> decimalresult db 0
  4620 0000376C 00000000            <2> result dd 0
  4621                              <1> %include 'source/programs/_variables.asm' ;% and $
  4622 00003770 FF2C2500            <2> db 255,44,"%",0
  4623                              <2> 	ans:
  4624 00003774 BE[5CC20300]        <2> 		mov esi, buf2
  4625 00003779 E887FFFFFF          <2> 		call chkadd
  4626 0000377E C3                  <2> 		ret
  4627                              <2> 		
  4628 0000377F FF2C2400            <2> db 255,44,"$",0
  4629 00003783 8B35[EE2F0000]      <2> var: mov esi, [currentcommandloc]
  4630 00003789 BB[5CAA0300]        <2> 	mov ebx, variables
  4631 0000378E 8A06                <2> lkeq:	mov al, [esi]
  4632 00003790 3C3D                <2> 	cmp al, '='
  4633 00003792 741B                <2> 	je eqfnd	;is there an '=' sign?
  4634 00003794 3C00                <2> 	cmp al, 0
  4635 00003796 7403                <2> 	je echovars
  4636 00003798 46                  <2> 	inc esi
  4637 00003799 EBF3                <2> 	jmp lkeq
  4638 0000379B BE[5CAA0300]        <2> echovars: mov esi, variables
  4639 000037A0 BB[5CBA0300]        <2> 	mov ebx, varend
  4640 000037A5 B105                <2> 	mov cl, 5
  4641 000037A7 B504                <2> 	mov ch, 4
  4642 000037A9 E89EF8FFFF          <2> 	call array
  4643 000037AE C3                  <2> 	ret
  4644 000037AF 46                  <2> eqfnd:	inc esi
  4645 000037B0 8A06                <2> 	mov al, [esi]
  4646 000037B2 3C00                <2> 	cmp al, 0
  4647 000037B4 7410                <2> 	je readvar
  4648 000037B6 8B35[EE2F0000]      <2> 	mov esi, [currentcommandloc]
  4649 000037BC BB[5CAA0300]        <2> 	mov ebx, variables
  4650 000037C1 E919000000          <2> 	jmp seek
  4651                              <2> readvar:
  4652 000037C6 B00A                <2> 	mov al, 10
  4653 000037C8 66BB0700            <2> 	mov bx, 7
  4654 000037CC C605[44230000]00    <2> 	mov byte [commandedit], 0
  4655 000037D3 BF[5CC20300]        <2> 	mov edi, buftxtend
  4656 000037D8 E8B6E6FFFF          <2> 	call rdprint
  4657 000037DD EBA4                <2> 	jmp var
  4658 000037DF 668B03              <2> seek:	mov ax, [ebx]
  4659 000037E2 B105                <2> 	mov cl, 5
  4660 000037E4 B504                <2> 	mov ch, 4
  4661 000037E6 663D0000            <2> 	cmp ax, 0
  4662 000037EA 0F845B000000        <2> 	je near save
  4663 000037F0 6639C8              <2> 	cmp ax, cx
  4664 000037F3 7403                <2> 	je skfnd
  4665 000037F5 43                  <2> 	inc ebx
  4666 000037F6 EBE7                <2> 	jmp seek
  4667 000037F8 8B35[EE2F0000]      <2> skfnd:	mov esi, [currentcommandloc]
  4668 000037FE 46                  <2> 	inc esi
  4669 000037FF 81C302000000        <2> 	add ebx, 2
  4670 00003805 89DF                <2> 	mov edi, ebx
  4671 00003807 B13D                <2> 	mov cl, '='
  4672 00003809 E81FF8FFFF          <2> 	call cndtest
  4673 0000380E 3C01                <2> 	cmp al, 1	
  4674 00003810 7418                <2> 	je varfnd
  4675 00003812 89FB                <2> 	mov ebx, edi
  4676 00003814 8B35[EE2F0000]      <2> 	mov esi, [currentcommandloc]
  4677 0000381A 668B03              <2> 	mov ax, [ebx]
  4678 0000381D 663D0000            <2> 	cmp ax, 0
  4679 00003821 0F8424000000        <2> 	je near save
  4680 00003827 43                  <2> 	inc ebx
  4681 00003828 EBB5                <2> 	jmp seek
  4682 0000382A 8A03                <2> varfnd:	mov al, [ebx]
  4683 0000382C 3C04                <2> 	cmp al, 4
  4684 0000382E 7404                <2> 	je save2
  4685 00003830 4B                  <2> 	dec ebx
  4686 00003831 4E                  <2> 	dec esi
  4687 00003832 EBF6                <2> 	jmp varfnd
  4688 00003834 4B                  <2> save2:	dec ebx
  4689 00003835 4E                  <2> 	dec esi
  4690 00003836 8A03                <2> 	mov al, [ebx]
  4691 00003838 3C05                <2> 	cmp al, 5
  4692 0000383A 7402                <2> 	je remove
  4693 0000383C EBEC                <2> 	jmp varfnd
  4694 0000383E 8A03                <2> remove: mov al, [ebx]
  4695 00003840 3C00                <2> 	cmp al, 0
  4696 00003842 749B                <2> 	je seek
  4697 00003844 30C0                <2> 	xor al, al
  4698 00003846 8803                <2> 	mov [ebx], al
  4699 00003848 43                  <2> 	inc ebx
  4700 00003849 EBF3                <2> 	jmp remove	;do not need for now-need defragmentation
  4701 0000384B 8B35[EE2F0000]      <2> save:	mov esi, [currentcommandloc]
  4702 00003851 43                  <2> 	inc ebx
  4703 00003852 B005                <2> 	mov al, 5
  4704 00003854 B404                <2> 	mov ah, 4
  4705 00003856 668903              <2> 	mov [ebx], ax
  4706 00003859 43                  <2> 	inc ebx
  4707 0000385A 43                  <2> svhere:	inc ebx
  4708 0000385B 46                  <2> 	inc esi
  4709 0000385C 8A06                <2> 	mov al, [esi]
  4710 0000385E 3C00                <2> 	cmp al, 0
  4711 00003860 0F844A000000        <2> 	je near svdone
  4712 00003866 3C25                <2> 	cmp al, '%'
  4713 00003868 7404                <2> 	je ans2
  4714 0000386A 8803                <2> 	mov [ebx], al	
  4715 0000386C EBEC                <2> 	jmp svhere
  4716 0000386E 56                  <2> ans2:	push esi
  4717 0000386F BE[5CC20300]        <2> 	mov esi, buf2
  4718 00003874 E823000000          <2> 	call ansfnd
  4719 00003879 E803000000          <2> 	call anscp
  4720 0000387E 5E                  <2> 	pop esi
  4721 0000387F EBD9                <2> 	jmp svhere
  4722 00003881 8A06                <2> anscp:	mov al, [esi]
  4723 00003883 8803                <2> 	mov [ebx], al
  4724 00003885 81FE[70C20300]      <2> 	cmp esi, numbuf
  4725 0000388B 74CD                <2> 	je svhere
  4726 0000388D 3C00                <2> 	cmp al, 0
  4727 0000388F 74C9                <2> 	je svhere
  4728 00003891 43                  <2> 	inc ebx
  4729 00003892 46                  <2> 	inc esi
  4730 00003893 EBEC                <2> 	jmp anscp
  4731 00003895 5E                  <2> ansnf:	pop esi
  4732 00003896 8A06                <2> 	mov al, [esi]
  4733 00003898 8803                <2> 	mov [ebx], al
  4734 0000389A EBBE                <2> 	jmp svhere
  4735 0000389C 46                  <2> ansfnd:	inc esi
  4736 0000389D 81FE[6FC20300]      <2> 	cmp esi, numbuf - 1
  4737 000038A3 740A                <2> 	je fndans
  4738 000038A5 8A06                <2> 	mov al, [esi]
  4739 000038A7 3C00                <2> 	cmp al, 0
  4740 000038A9 74EA                <2> 	je ansnf
  4741 000038AB 3C30                <2> 	cmp al, '0'
  4742 000038AD 74ED                <2> 	je ansfnd
  4743                              <2> fndans:
  4744 000038AF C3                  <2> 	ret
  4745 000038B0 30C0                <2> svdone:	xor al, al
  4746 000038B2 8803                <2> 	mov [ebx], al
  4747 000038B4 C3                  <2> 	ret
  4748                              <1> %include 'source/programs/_run.asm' ;./
  4749                              <2> 
  4750 000038B5 7F454C46            <2> 	elfstart db 0x7F,"ELF"
  4751 000038B9 FF2C2E2F00          <2> 	db 255,44,"./",0
  4752                              <2> rundiskprog:
  4753 000038BE 8B3D[EE2F0000]      <2> 	mov edi, [currentcommandloc]
  4754 000038C4 81C702000000        <2> 	add edi, 2
  4755 000038CA BE00004000          <2> 	mov esi, 0x400000
  4756 000038CF E863310000          <2> 	call loadfile
  4757 000038D4 81FA94010000        <2> 	cmp edx, 404
  4758 000038DA 746A                <2> 	je noprogfound
  4759 000038DC BB00004000          <2> 	mov ebx, 0x400000
  4760 000038E1 A1[B5380000]        <2> 	mov eax, [elfstart]
  4761 000038E6 3903                <2> 	cmp [ebx], eax
  4762 000038E8 0F8437000000        <2> 	je near runelf
  4763 000038EE 66813B4558          <2> 	cmp word [ebx], "EX"
  4764 000038F3 7577                <2> 	jne progbatchfound
  4765 000038F5 81C302000000        <2> 	add ebx, 2
  4766 000038FB 8B3D[EE2F0000]      <2> 	mov edi, [currentcommandloc]
  4767 00003901 81C702000000        <2> 	add edi, 2
  4768                              <2> findspaceprog:
  4769 00003907 8A07                <2> 	mov al, [edi]
  4770 00003909 47                  <2> 	inc edi
  4771 0000390A 3C20                <2> 	cmp al, " "
  4772 0000390C 75F9                <2> 	jne findspaceprog
  4773                              <2> findnonspaceprog:
  4774 0000390E 8A07                <2> 	mov al, [edi]
  4775 00003910 47                  <2> 	inc edi
  4776 00003911 3C20                <2> 	cmp al, " "
  4777 00003913 74F9                <2> 	je findnonspaceprog
  4778 00003915 4F                  <2> 	dec edi
  4779 00003916 8925[DCA70300]      <2> 	mov [previousstack], esp
  4780 0000391C FFD3                <2> 	call ebx
  4781 0000391E 8B25[DCA70300]      <2> 	mov esp, [previousstack]
  4782 00003924 C3                  <2> 	ret
  4783                              <2> runelf:
  4784 00003925 8B3D[EE2F0000]      <2> 	mov edi, [currentcommandloc]
  4785 0000392B 81C702000000        <2> 	add edi, 2
  4786 00003931 81C380000000        <2> 	add ebx, 0x80
  4787 00003937 8925[DCA70300]      <2> 	mov [previousstack], esp
  4788 0000393D FFD3                <2> 	call ebx
  4789 0000393F 8B25[DCA70300]      <2> 	mov esp, [previousstack]
  4790 00003945 C3                  <2> 	ret
  4791                              <2> noprogfound:
  4792 00003946 BE[1E8F0000]        <2> 	mov esi, notfound1
  4793 0000394B E810E4FFFF          <2> 	call print
  4794 00003950 8B35[EE2F0000]      <2> 	mov esi, [currentcommandloc]
  4795 00003956 81C602000000        <2> 	add esi, 2
  4796 0000395C E8FFE3FFFF          <2> 	call print
  4797 00003961 BE[268F0000]        <2> 	mov esi, notfound2
  4798 00003966 E8F5E3FFFF          <2> 	call print
  4799 0000396B C3                  <2> 	ret
  4800                              <2> progbatchfound:
  4801 0000396C BF00004000          <2> 		mov edi, 0x400000
  4802 00003971 C605[56AA0300]01    <2> 		mov byte [BATCHISON], 1
  4803                              <2> 	batchrunloop:
  4804 00003978 E89BF3FFFF          <2> 		call buftxtclear
  4805 0000397D BE[5CBE0300]        <2> 		mov esi, buftxt
  4806 00003982 8935[EE2F0000]      <2> 		mov [currentcommandloc], esi
  4807                              <2> 	batchrunloop2:
  4808 00003988 B10A                <2> 		mov cl, 10
  4809 0000398A B50D                <2> 		mov ch, 13
  4810 0000398C 380F                <2> 		cmp [edi], cl
  4811 0000398E 0F8419000000        <2> 		je near nxtbatchrunline
  4812 00003994 382F                <2> 		cmp [edi], ch
  4813 00003996 0F8411000000        <2> 		je near nxtbatchrunline
  4814 0000399C 803F00              <2> 		cmp byte [edi], 0
  4815 0000399F 0F8408000000        <2> 		je near nxtbatchrunline
  4816 000039A5 8A07                <2> 		mov al, [edi]
  4817 000039A7 8806                <2> 		mov [esi], al
  4818 000039A9 46                  <2> 		inc esi
  4819 000039AA 47                  <2> 		inc edi
  4820 000039AB EBDB                <2> 		jmp batchrunloop2
  4821                              <2> 	nxtbatchrunline:
  4822 000039AD 47                  <2> 		inc edi
  4823 000039AE 380F                <2> 		cmp [edi], cl
  4824 000039B0 74FB                <2> 		je nxtbatchrunline
  4825 000039B2 382F                <2> 		cmp [edi], ch
  4826 000039B4 74F7                <2> 		je nxtbatchrunline
  4827 000039B6 893D[143A0000]      <2> 		mov [batchedi], edi
  4828 000039BC 893D[52AA0300]      <2> 		mov [BATCHPOS], edi
  4829 000039C2 C60600              <2> 		mov byte [esi], 0
  4830 000039C5 BE[5CBE0300]        <2> 		mov esi, buftxt
  4831 000039CA 803E00              <2> 		cmp byte [esi], 0
  4832 000039CD 0F8439000000        <2> 		je near nobatchfoundrun
  4833 000039D3 31DB                <2> 		xor ebx, ebx
  4834 000039D5 8A1D[EDA90300]      <2> 		mov bl, [IFON]
  4835 000039DB 80FB00              <2> 		cmp bl, 0
  4836 000039DE 0F8534000000        <2> 		jne near iftestbatch
  4837                              <2> 	doneiftest:
  4838 000039E4 803D[EA3A0000]00    <2> 		cmp byte [runnextline], 0
  4839 000039EB 0F8405000000        <2> 		je near noruniftest
  4840 000039F1 E822F5FFFF          <2> 		call run
  4841                              <2> 	noruniftest:
  4842 000039F6 C605[EA3A0000]01    <2> 		mov byte [runnextline], 1
  4843 000039FD 8B3D[143A0000]      <2> 		mov edi, [batchedi]
  4844 00003A03 803F00              <2> 		cmp byte [edi], 0
  4845 00003A06 0F856CFFFFFF        <2> 		jne near batchrunloop
  4846                              <2> 	nobatchfoundrun:
  4847 00003A0C C605[56AA0300]00    <2> 		mov byte [BATCHISON], 0
  4848 00003A13 C3                  <2> 		ret
  4849                              <2> 	
  4850 00003A14 00000000            <2> batchedi dd 0	
  4851                              <2> 	
  4852                              <2> 	iftestbatch:
  4853 00003A18 BE[EEA90300]        <2> 		mov esi, IFTRUE
  4854 00003A1D 01DE                <2> 		add esi, ebx
  4855 00003A1F 803E00              <2> 		cmp byte [esi], 0
  4856 00003A22 0F85BCFFFFFF        <2> 		jne near doneiftest
  4857 00003A28 881D[EB3A0000]      <2> 		mov [iffalsebuf], bl
  4858 00003A2E 803D[57AA0300]01    <2> 		cmp byte [LOOPON], 1
  4859 00003A35 0F8513000000        <2> 		jne near fifindbatch
  4860 00003A3B E938FFFFFF          <2> 		jmp batchrunloop
  4861                              <2> 	elsetestbatch:
  4862 00003A40 C60601              <2> 		mov byte [esi], 1
  4863 00003A43 81C705000000        <2> 		add edi, 5
  4864 00003A49 E92AFFFFFF          <2> 		jmp batchrunloop
  4865                              <2> 	fifindbatch:
  4866 00003A4E 66B96966            <2> 		mov cx, "if"
  4867 00003A52 66B86669            <2> 		mov ax, "fi"
  4868 00003A56 663907              <2> 		cmp [edi], ax
  4869 00003A59 0F8424000000        <2> 		je near fifoundbatch
  4870 00003A5F 66390F              <2> 		cmp [edi], cx
  4871 00003A62 0F8465000000        <2> 		je near iffoundbatch
  4872 00003A68 803F00              <2> 		cmp byte [edi], 0
  4873 00003A6B 0F8412000000        <2> 		je near fifoundbatch
  4874 00003A71 B8656C7365          <2> 		mov eax, "else"
  4875 00003A76 3907                <2> 		cmp [edi], eax
  4876 00003A78 0F84C2FFFFFF        <2> 		je near elsetestbatch
  4877 00003A7E E973FFFFFF          <2> 		jmp noruniftest
  4878                              <2> 	fifoundbatch:
  4879 00003A83 81C702000000        <2> 		add edi, 2
  4880 00003A89 B00A                <2> 		mov al, 10
  4881 00003A8B 3807                <2> 		cmp [edi], al
  4882 00003A8D 0F840B000000        <2> 		je near goodfibatch
  4883 00003A93 803F00              <2> 		cmp byte [edi], 0
  4884 00003A96 0F8470FFFFFF        <2> 		je near nobatchfoundrun
  4885 00003A9C EBB0                <2> 		jmp fifindbatch
  4886                              <2> 	goodfibatch:
  4887 00003A9E B001                <2> 		mov al, 1
  4888 00003AA0 2805[EDA90300]      <2> 		sub [IFON], al 
  4889 00003AA6 A0[EDA90300]        <2> 		mov al, [IFON]
  4890 00003AAB 8A1D[EB3A0000]      <2> 		mov bl, [iffalsebuf]
  4891 00003AB1 38D8                <2> 		cmp al, bl
  4892 00003AB3 7799                <2> 		ja fifindbatch
  4893 00003AB5 8B35[EE2F0000]      <2> 		mov esi, [currentcommandloc]
  4894 00003ABB 81EF02000000        <2> 		sub edi, 2
  4895 00003AC1 C605[EA3A0000]00    <2> 		mov byte [runnextline], 0
  4896 00003AC8 E9ABFEFFFF          <2> 		jmp batchrunloop
  4897                              <2> 	iffoundbatch:
  4898 00003ACD B020                <2> 		mov al, ' '
  4899 00003ACF 81C702000000        <2> 		add edi, 2
  4900 00003AD5 3807                <2> 		cmp [edi], al
  4901 00003AD7 0F8571FFFFFF        <2> 		jne near fifindbatch
  4902 00003ADD B001                <2> 		mov al, 1
  4903 00003ADF 0005[EDA90300]      <2> 		add [IFON], al
  4904 00003AE5 E964FFFFFF          <2> 		jmp fifindbatch
  4905                              <2> 		
  4906                              <2> 		
  4907 00003AEA 01                  <2> runnextline db 1
  4908 00003AEB 00                  <2> iffalsebuf db 0
  4909 00003AEC C3                  <2> notbatch: ret 
  4910                              <1> %ifdef network.included
  4911                              <1> 	%include 'source/programs/arp.asm'
  4912 00003AED FF2C61727000        <2> db 255,44,"arp",0
  4913                              <2> 	;ARP TESTING
  4914                              <2> arptest:
  4915 00003AF3 8B35[EE2F0000]      <2> 	mov esi, [currentcommandloc]
  4916 00003AF9 81C604000000        <2> 	add esi, 4
  4917 00003AFF E81F530000          <2> 	call strtoip
  4918 00003B04 890D[AB3B0000]      <2> 	mov [arptargetinfo + 6], ecx ;move to next ip
  4919 00003B0A E85A530000          <2> 	call showip
  4920 00003B0F 803D[AF3B0000]01    <2> 	cmp byte [arpconfig], 1
  4921 00003B16 7405                <2> 	je arptest2
  4922 00003B18 E841000000          <2> 	call arpinit
  4923                              <2> arptest2:	;try to reach 192.168.0.1
  4924 00003B1D 8B0D[108F0000]      <2> 	mov ecx, [sysmac]
  4925 00003B23 668B1D[148F0000]    <2> 	mov bx, [sysmac + 4]
  4926 00003B2A 890D[8B3B0000]      <2> 	mov [sourcemac], ecx
  4927 00003B30 66891D[8F3B0000]    <2> 	mov [sourcemac + 4],bx
  4928 00003B37 890D[9B3B0000]      <2> 	mov [arpsenderinfo], ecx
  4929 00003B3D 66891D[9F3B0000]    <2> 	mov [arpsenderinfo + 4], bx
  4930 00003B44 BF[853B0000]        <2> 	mov edi, frame
  4931 00003B49 BE[AF3B0000]        <2> 	mov esi, framend
  4932 00003B4E E89E520000          <2> 	call sendpacket
  4933 00003B53 BE[578F0000]        <2> 	mov esi, line
  4934 00003B58 E803E2FFFF          <2> 	call print
  4935 00003B5D C3                  <2> 	ret
  4936                              <2> 	
  4937                              <2> arpinit:
  4938 00003B5E BE[B03B0000]        <2> 	mov esi, arptable
  4939 00003B63 BF[108F0000]        <2> 	mov edi, sysmac
  4940 00003B68 BB[0C8F0000]        <2> 	mov ebx, sysip
  4941 00003B6D 8B0F                <2> 	mov ecx, [edi]
  4942 00003B6F 890E                <2> 	mov [esi], ecx
  4943 00003B71 668B4F04            <2> 	mov cx, [edi + 4]
  4944 00003B75 894E04              <2> 	mov [esi + 4], ecx
  4945 00003B78 8B0B                <2> 	mov ecx, [ebx]
  4946 00003B7A 894E06              <2> 	mov [esi + 6], ecx
  4947 00003B7D C605[AF3B0000]01    <2> 	mov byte [arpconfig], 1
  4948 00003B84 C3                  <2> 	ret
  4949                              <2> 	
  4950                              <2> ;example frame
  4951                              <2> frame:
  4952 00003B85 FFFFFFFFFFFF        <2> destinationmac:	db 0xFF,0xFF,0xFF,0xFF,0xFF,0xFF
  4953 00003B8B 000000000000        <2> sourcemac:		db 0,0,0,0,0,0
  4954 00003B91 0806                <2> ethertype:		db 8,6			;arp is 0x806
  4955                              <2> 	;;example packet
  4956 00003B93 0100                <2> 	arppacket: 		dw 1			;ethernet is 1
  4957 00003B95 0800                <2> 	arpprotocol: 	db 8,0			;ip is 0x800
  4958 00003B97 0604                <2> 					db 6,4			;length of mac, length of ip
  4959 00003B99 0001                <2> 	arpoperation: 	db 0,1			;one for arp request
  4960 00003B9B 000000000000        <2> 	arpsenderinfo:	db 0x00,0x00,0x00,0x00,0x00,0x00	;mac
  4961 00003BA1 C0A80073            <2> 					db 192,168,0,115		;ip
  4962 00003BA5 000000000000        <2> 	arptargetinfo:	db 0x00,0x00,0x00,0x00,0x00,0x00	;ignored in requests
  4963 00003BAB C0A80000            <2> 					db 192,168,0,0			;ip
  4964                              <2> framend:
  4965                              <2> 
  4966 00003BAF 00                  <2> arpconfig db 0
  4967                              <2> arptable:	;;mac,ip
  4968 00003BB0 000000000000000000- <2> 	times 10 db 0,0,0,0,0,0,0,0,0,0
  4969 00003BB9 00<rept>            <2>
  4970                              <2> arptableend:	
  4971                              <1> %endif
  4972                              <1> %include 'source/programs/batch.asm'
  4973 00003C14 FF2C626174636800    <2> db 255,44,"batch",0
  4974                              <2> 	batchst: 
  4975 00003C1C 8B3D[EE2F0000]      <2> 		mov edi, [currentcommandloc]
  4976 00003C22 81C706000000        <2> 		add edi, 6
  4977 00003C28 803F00              <2> 		cmp byte [edi], 0
  4978 00003C2B 0F846D000000        <2> 		je near nonamefound
  4979 00003C31 BE00004000          <2> 		mov esi, 0x400000
  4980 00003C36 E8FC2D0000          <2> 		call loadfile
  4981 00003C3B 89D0                <2> 		mov eax, edx
  4982 00003C3D 3D94010000          <2> 		cmp eax, 404
  4983 00003C42 7465                <2> 		je goodbatchname
  4984 00003C44 BE[4F3C0000]        <2> 		mov esi, badbatchname
  4985 00003C49 E812E1FFFF          <2> 		call print
  4986 00003C4E C3                  <2> 		ret
  4987 00003C4F 546869732066696C65- <2> 		badbatchname db "This file already exists!",10,0
  4988 00003C58 20616C726561647920- <2>
  4989 00003C61 657869737473210A00  <2>
  4990 00003C6A 596F75206861766520- <2> 		namenotfoundbatch db "You have to type a name after the command.",10,0
  4991 00003C73 746F20747970652061- <2>
  4992 00003C7C 206E616D6520616674- <2>
  4993 00003C85 65722074686520636F- <2>
  4994 00003C8E 6D6D616E642E0A00    <2>
  4995 00003C96 00000000            <2> 		esicache3 dd 0
  4996 00003C9A 00000000            <2> 		esicache2 dd 0
  4997                              <2> 	nonamefound:
  4998 00003C9E BE[6A3C0000]        <2> 		mov esi, namenotfoundbatch
  4999 00003CA3 E8B8E0FFFF          <2> 		call print
  5000 00003CA8 C3                  <2> 		ret
  5001                              <2> 	goodbatchname:
  5002 00003CA9 BE00004000          <2> 		mov esi, 0x400000
  5003                              <2> 	batchcreate:
  5004 00003CAE 8935[963C0000]      <2> 		mov [esicache3], esi
  5005 00003CB4 BF00008000          <2> 		mov edi, 0x800000
  5006 00003CB9 B00A                <2> 		mov al, 10
  5007 00003CBB B307                <2> 		mov bl, 7
  5008 00003CBD B404                <2> 		mov ah, 4
  5009 00003CBF CD30                <2> 		int 30h
  5010 00003CC1 8935[9A3C0000]      <2> 		mov [esicache2], esi
  5011 00003CC7 8A0E                <2> 		mov cl, [esi]
  5012 00003CC9 8B35[963C0000]      <2> 		mov esi, [esicache3]
  5013 00003CCF BB[033D0000]        <2> 		mov ebx, exitword
  5014 00003CD4 E854F3FFFF          <2> 		call cndtest
  5015 00003CD9 3C01                <2> 		cmp al, 1
  5016 00003CDB 7411                <2> 		je endbatchcreate
  5017 00003CDD 3C02                <2> 		cmp al, 2
  5018 00003CDF 740D                <2> 		je endbatchcreate
  5019 00003CE1 8B35[9A3C0000]      <2> 		mov esi, [esicache2]
  5020 00003CE7 B00A                <2> 		mov al, 10
  5021 00003CE9 8806                <2> 		mov [esi], al
  5022 00003CEB 46                  <2> 		inc esi
  5023 00003CEC EBC0                <2> 		jmp batchcreate
  5024                              <2> 	endbatchcreate:
  5025 00003CEE 8B35[963C0000]      <2> 		mov esi, [esicache3]
  5026 00003CF4 31C0                <2> 		xor eax, eax
  5027 00003CF6 8806                <2> 		mov [esi], al
  5028 00003CF8 BE00004000          <2> 		mov esi, 0x400000
  5029 00003CFD E85EE0FFFF          <2> 		call print
  5030 00003D02 C3                  <2> 		ret
  5031                              <2> 	
  5032 00003D03 5C7800              <2> 	exitword db "\x",0
  5033 00003D06 54797065205C782074- <2> 	wordmsg db "Type \x to exit.",10,0
  5034 00003D0F 6F20657869742E0A00  <2>
  5035                              <1> %ifdef gui.background
  5036                              <1> 	%include 'source/programs/background.asm'
  5037 00003D18 FF2C6261636B67726F- <2> db 255,44,"background",0
  5038 00003D21 756E6400            <2>
  5039 00003D25 8B3D[EE2F0000]      <2> 		mov edi, [currentcommandloc]
  5040 00003D2B 81C70B000000        <2> 		add edi, 11
  5041 00003D31 BE00008000          <2> 		mov esi, 0x800000
  5042 00003D36 E8FC2C0000          <2> 		call loadfile
  5043 00003D3B 81FA94010000        <2> 		cmp edx, 404
  5044 00003D41 0F844F110000        <2> 		je near filenotfound
  5045 00003D47 BE00008000          <2> 		mov esi, 0x800000
  5046 00003D4C 66813E424D          <2> 		cmp word [esi], "BM"
  5047 00003D51 7401                <2> 		je .bmpfound
  5048 00003D53 C3                  <2> 		ret
  5049                              <2> .bmpfound:
  5050 00003D54 8B3D[BD590000]      <2> 		mov edi, [physbaseptr]
  5051 00003D5A 57                  <2> 		push edi
  5052 00003D5B BE[71C40300]        <2> 		mov esi, backgroundbuffer
  5053 00003D60 8935[32730000]      <2> 		mov [backgroundimage], esi
  5054 00003D66 8935[BD590000]      <2> 		mov [physbaseptr], esi
  5055 00003D6C 31C0                <2> 		xor eax, eax
  5056                              <2> .clearlp:
  5057 00003D6E 8906                <2> 		mov [esi], eax
  5058 00003D70 81C604000000        <2> 		add esi, 4
  5059 00003D76 81FE[71D82B00]      <2> 		cmp esi, backgroundbufferend
  5060 00003D7C 72F0                <2> 		jb .clearlp
  5061 00003D7E BE00008000          <2> 		mov esi, 0x800000
  5062 00003D83 31C9                <2> 		xor ecx, ecx
  5063 00003D85 31D2                <2> 		xor edx, edx
  5064 00003D87 31DB                <2> 		xor ebx, ebx
  5065 00003D89 E88A2E0000          <2> 		call showbmp
  5066 00003D8E 5F                  <2> 		pop edi
  5067 00003D8F 893D[BD590000]      <2> 		mov [physbaseptr], edi
  5068 00003D95 803D[7C8F0000]00    <2> 		cmp byte [guion], 0
  5069 00003D9C 740F                <2> 		je .noclear
  5070 00003D9E E82E350000          <2> 		call guiclear
  5071 00003DA3 E8C9310000          <2> 		call clearmousecursor
  5072 00003DA8 E8B7350000          <2> 		call reloadallgraphics
  5073                              <2> .noclear:
  5074 00003DAD C3                  <2> 		ret
  5075                              <1> %endif
  5076                              <1> %include 'source/programs/beep.asm'
  5077 00003DAE FF2C6265657000      <2> 	db 255,44,"beep",0
  5078                              <2> beep:
  5079 00003DB5 B8[DA3D0000]        <2> 	mov eax, beepstart
  5080 00003DBA A3[6B020000]        <2> 	mov [soundpos], eax
  5081 00003DBF B8[DE3D0000]        <2> 	mov eax, beepend
  5082 00003DC4 A3[6F020000]        <2> 	mov [soundendpos], eax
  5083 00003DC9 C605[68020000]01    <2> 	mov byte [soundon], 1
  5084                              <2> waitforsoundendbeep:
  5085 00003DD0 A0[68020000]        <2> 	mov al, [soundon]
  5086 00003DD5 3C00                <2> 	cmp al, 0
  5087 00003DD7 75F7                <2> 	jne waitforsoundendbeep
  5088 00003DD9 C3                  <2> 	ret
  5089                              <2> 	
  5090                              <2> beepstart:
  5091 00003DDA 3200D111            <2> 	dw 50, 4561
  5092                              <2> beepend:
  5093                              <1> %ifdef dos.compatible
  5094                              <1> %else
  5095                              <1> 	%include 'source/programs/boot.asm'
  5096 00003DDE FF2C626F6F7400      <2> db 255,44,"boot",0
  5097                              <2> quickboot:
  5098                              <2> 	;load and jump to the bootloader
  5099                              <2> 	; mov ecx, 1
  5100                              <2> 	; xor ebx, ebx
  5101                              <2> 	; mov esi, 0x400000
  5102                              <2> 	; call diskr
  5103                              <2> 	; mov ax, LINEAR_SEL
  5104                              <2> 	; mov fs, ax
  5105                              <2> 	; mov esi, 0x400000
  5106                              <2> 	; mov edi, 0x7C00
  5107                              <2> 	; xor ebx, ebx
  5108                              <2> ; .lp:
  5109                              <2> 	; mov ecx, [esi+ebx]
  5110                              <2> 	; mov [fs:edi+ebx], ecx
  5111                              <2> 	; add ebx, 4
  5112                              <2> 	; cmp ebx, 512
  5113                              <2> 	; jb .lp
  5114 00003DE5 66BB[F53D]          <2> 	mov bx, bootload
  5115 00003DE9 66891D[030D0000]    <2> 	mov [realmodeptr], bx
  5116 00003DF0 E9F3CDFFFF          <2> 	jmp realmode
  5117                              <2> [BITS 16]
  5118                              <2> bootload:
  5119 00003DF5 B80300              <2> 	mov ax, 3
  5120 00003DF8 31DB                <2> 	xor bx, bx
  5121 00003DFA CD10                <2> 	int 10h
  5122 00003DFC EA007C0000          <2> 	jmp 0:0x7C00
  5123                              <2> [BITS 32]
  5124                              <1> %endif
  5125                              <1> %include 'source/programs/cd.asm'
  5126 00003E01 FF2C636400          <2> db 255,44,"cd",0
  5127                              <2> cd:
  5128 00003E06 8B35[EE2F0000]      <2> 	mov esi, [currentcommandloc]
  5129 00003E0C 81C603000000        <2> 	add esi, 3
  5130 00003E12 8B3D[E4A70300]      <2> 	mov edi, [currentfolderloc]
  5131 00003E18 893D[E0A70300]      <2> 	mov [lastfolderloc], edi
  5132 00003E1E 81C7[E8A70300]      <2> 	add edi, currentfolder
  5133 00003E24 4F                  <2> 	dec edi
  5134 00003E25 66813E2E2E          <2> 	cmp word [esi], ".."
  5135 00003E2A 742A                <2> 	je .moveup
  5136 00003E2C 47                  <2> 	inc edi
  5137                              <2> .movedown:
  5138 00003E2D 8A06                <2> 	mov al, [esi]
  5139 00003E2F 8807                <2> 	mov [edi], al
  5140 00003E31 47                  <2> 	inc edi
  5141 00003E32 46                  <2> 	inc esi
  5142 00003E33 3C00                <2> 	cmp al, 0
  5143 00003E35 740A                <2> 	je .donecd
  5144 00003E37 81FF[E8A90300]      <2> 	cmp edi, currentfolderend
  5145 00003E3D 72EE                <2> 	jb .movedown
  5146 00003E3F 30C0                <2> 	xor al, al
  5147                              <2> .donecd:
  5148 00003E41 4F                  <2> 	dec edi
  5149 00003E42 C6072F              <2> 	mov byte [edi], '/'
  5150 00003E45 47                  <2> 	inc edi
  5151 00003E46 C60700              <2> 	mov byte [edi], 0
  5152 00003E49 81EF[E8A70300]      <2> 	sub edi, currentfolder
  5153 00003E4F 893D[E4A70300]      <2> 	mov [currentfolderloc], edi
  5154 00003E55 C3                  <2> 	ret
  5155                              <2> .moveup:
  5156 00003E56 31C0                <2> 	xor eax, eax
  5157 00003E58 A3[E0A70300]        <2> 	mov [lastfolderloc], eax
  5158                              <2> .moveuploop:
  5159 00003E5D 4F                  <2> 	dec edi
  5160 00003E5E 8A07                <2> 	mov al, [edi]
  5161 00003E60 81FF[E8A70300]      <2> 	cmp edi, currentfolder
  5162 00003E66 763B                <2> 	jbe .moveupover
  5163 00003E68 3C2F                <2> 	cmp al, '/'
  5164 00003E6A 75F1                <2> 	jne .moveuploop
  5165 00003E6C C6072F              <2> 	mov byte [edi], '/'
  5166 00003E6F 47                  <2> 	inc edi
  5167 00003E70 C60700              <2> 	mov byte [edi], 0
  5168 00003E73 81EF[E8A70300]      <2> 	sub edi, currentfolder
  5169 00003E79 893D[E4A70300]      <2> 	mov [currentfolderloc], edi
  5170 00003E7F 81C7[E8A70300]      <2> 	add edi, currentfolder
  5171 00003E85 4F                  <2> 	dec edi
  5172                              <2> .lastfolder:
  5173 00003E86 4F                  <2> 	dec edi
  5174 00003E87 8A07                <2> 	mov al, [edi]
  5175 00003E89 81FF[E8A70300]      <2> 	cmp edi, currentfolder
  5176 00003E8F 7604                <2> 	jbe .donemoveup
  5177 00003E91 3C2F                <2> 	cmp al, '/'
  5178 00003E93 75F1                <2> 	jne .lastfolder
  5179                              <2> .donemoveup:
  5180 00003E95 47                  <2> 	inc edi
  5181 00003E96 81EF[E8A70300]      <2> 	sub edi, currentfolder
  5182 00003E9C 893D[E0A70300]      <2> 	mov [lastfolderloc], edi
  5183 00003EA2 C3                  <2> 	ret
  5184                              <2> .moveupover:
  5185 00003EA3 BF[E8A70300]        <2> 	mov edi, currentfolder
  5186 00003EA8 C6072F              <2> 	mov byte [edi], '/'
  5187 00003EAB 47                  <2> 	inc edi
  5188 00003EAC C60700              <2> 	mov byte [edi], 0
  5189 00003EAF 31C0                <2> 	xor eax, eax
  5190 00003EB1 A3[E0A70300]        <2> 	mov [lastfolderloc], eax
  5191 00003EB6 40                  <2> 	inc eax
  5192 00003EB7 A3[E4A70300]        <2> 	mov [currentfolderloc], eax
  5193 00003EBC C3                  <2> 	ret
  5194                              <1> %include 'source/programs/charmap.asm'
  5195 00003EBD 00                  <2> charmapnum db 0
  5196 00003EBE FF2C636861726D6170- <2> db 255,44,"charmap",0
  5197 00003EC7 00                  <2>
  5198 00003EC8 8B35[EE2F0000]      <2> 	mov esi, [currentcommandloc]
  5199 00003ECE 81C609000000        <2> 	add esi, 9
  5200 00003ED4 803E00              <2> 	cmp byte [esi], 0
  5201 00003ED7 7412                <2> 	je .nospecific
  5202 00003ED9 E89AF4FFFF          <2> 	call cnvrthextxt
  5203 00003EDE 6689C8              <2> 	mov ax, cx
  5204 00003EE1 66BB0700            <2> 	mov bx, 7
  5205 00003EE5 E804E5FFFF          <2> 	call prcharq
  5206 00003EEA C3                  <2> 	ret
  5207                              <2> .nospecific:
  5208 00003EEB 66BB0700            <2> 	mov bx, 7
  5209 00003EEF 66B82000            <2> 	mov ax, " "
  5210 00003EF3 C605[BD3E0000]00    <2> 	mov byte [charmapnum], 0
  5211 00003EFA E8EFE4FFFF          <2> 	call prcharq
  5212 00003EFF E8EAE4FFFF          <2> 	call prcharq
  5213 00003F04 E8E5E4FFFF          <2> 	call prcharq
  5214 00003F09 E8E0E4FFFF          <2> 	call prcharq
  5215 00003F0E 66B83000            <2> 	mov ax, "0"
  5216                              <2> charmapnumprnt:
  5217 00003F12 E8D7E4FFFF          <2> 	call prcharq
  5218 00003F17 6640                <2> 	inc ax
  5219 00003F19 6650                <2> 	push ax
  5220 00003F1B 66B82000            <2> 	mov ax, " "
  5221 00003F1F E8CAE4FFFF          <2> 	call prcharq
  5222 00003F24 6658                <2> 	pop ax
  5223 00003F26 663D3900            <2> 	cmp ax, "9"
  5224 00003F2A 76E6                <2> 	jbe charmapnumprnt
  5225 00003F2C 66B84100            <2> 	mov ax, "A"
  5226                              <2> charmapnumprnt2:
  5227 00003F30 E8B9E4FFFF          <2> 	call prcharq
  5228 00003F35 6640                <2> 	inc ax
  5229 00003F37 6650                <2> 	push ax
  5230 00003F39 66B82000            <2> 	mov ax, " "
  5231 00003F3D E8ACE4FFFF          <2> 	call prcharq
  5232 00003F42 6658                <2> 	pop ax
  5233 00003F44 663D4700            <2> 	cmp ax, "G"
  5234 00003F48 72E6                <2> 	jb charmapnumprnt2
  5235                              <2> 	
  5236 00003F4A BE[578F0000]        <2> 	mov esi, line
  5237 00003F4F E8EDDDFFFF          <2> 	call printquiet
  5238 00003F54 6631C0              <2> 	xor ax, ax
  5239 00003F57 6689C1              <2> 	mov cx, ax
  5240 00003F5A E8A2F2FFFF          <2> 	call showhexsmall
  5241 00003F5F E970000000          <2> 	jmp charmapnocopy ;the first char is 0 which is unprintable
  5242                              <2> charmapcopy:
  5243 00003F64 6640                <2> 	inc ax
  5244 00003F66 6650                <2> 	push ax
  5245 00003F68 663D0800            <2> 	cmp ax, 8
  5246 00003F6C 7466                <2> 	je charmapnocopy
  5247 00003F6E 663D0900            <2> 	cmp ax, 9
  5248 00003F72 7460                <2> 	je charmapnocopy
  5249 00003F74 663D0A00            <2> 	cmp ax, 10
  5250 00003F78 745A                <2> 	je charmapnocopy
  5251 00003F7A 663D0D00            <2> 	cmp ax, 13
  5252 00003F7E 7454                <2> 	je charmapnocopy
  5253 00003F80 663DFF00            <2> 	cmp ax, 255
  5254 00003F84 744E                <2> 	je charmapnocopy
  5255 00003F86 663D0001            <2> 	cmp ax, 256
  5256 00003F8A 7443                <2> 	je nomorecharmap
  5257 00003F8C E85DE4FFFF          <2> 	call prcharq
  5258 00003F91 66B82000            <2> 	mov ax, " "
  5259 00003F95 E854E4FFFF          <2> 	call prcharq
  5260 00003F9A 6658                <2> 	pop ax
  5261                              <2> charmapcopycheck:
  5262 00003F9C FE05[BD3E0000]      <2> 	inc byte [charmapnum]
  5263 00003FA2 803D[BD3E0000]10    <2> 	cmp byte [charmapnum], 16
  5264 00003FA9 72B9                <2> 	jb charmapcopy
  5265 00003FAB 6650                <2> 	push ax
  5266 00003FAD BE[578F0000]        <2> 	mov esi, line
  5267 00003FB2 E88ADDFFFF          <2> 	call printquiet
  5268 00003FB7 6658                <2> 	pop ax
  5269 00003FB9 3CFF                <2> 	cmp al, 255
  5270 00003FBB 7412                <2> 	je nomorecharmap
  5271 00003FBD 88C1                <2> 	mov cl, al
  5272 00003FBF FEC1                <2> 	inc cl
  5273 00003FC1 E83BF2FFFF          <2> 	call showhexsmall
  5274 00003FC6 C605[BD3E0000]00    <2> 	mov byte [charmapnum], 0
  5275 00003FCD EB95                <2> 	jmp charmapcopy
  5276                              <2> nomorecharmap:
  5277 00003FCF E967EDFFFF          <2> 	jmp nwcmd
  5278                              <2> charmapnocopy:
  5279 00003FD4 6650                <2> 	push ax
  5280 00003FD6 66B82000            <2> 	mov ax, " "
  5281 00003FDA E80FE4FFFF          <2> 	call prcharq
  5282 00003FDF E80AE4FFFF          <2> 	call prcharq
  5283 00003FE4 6658                <2> 	pop ax
  5284 00003FE6 EBB4                <2> 	jmp charmapcopycheck
  5285                              <1> %ifdef gui.included
  5286                              <1> 	%include 'source/programs/circle.asm'
  5287 00003FE8 FF2C636972636C6500  <2> db 255,44,"circle",0
  5288                              <2> circle:
  5289 00003FF1 8B35[EE2F0000]      <2> 	mov esi, [currentcommandloc]
  5290 00003FF7 81C607000000        <2> 	add esi, 7
  5291 00003FFD 66B91000            <2> 	mov cx, 16
  5292 00004001 30C0                <2> 	xor al, al
  5293 00004003 3806                <2> 	cmp [esi], al
  5294 00004005 7405                <2> 	je .nocmdline
  5295 00004007 E8B5F3FFFF          <2> 	call cnvrttxt
  5296                              <2> .nocmdline:
  5297 0000400C E8C5080000          <2> 	call linetester.stime
  5298 00004011 E857000000          <2> 	call fcircle.nocmdline
  5299 00004016 E8D3080000          <2> 	call linetester.etime
  5300 0000401B 53                  <2> 	push ebx
  5301 0000401C 57                  <2> 	push edi
  5302 0000401D E839E3FFFF          <2> 	call getchar
  5303 00004022 59                  <2> 	pop ecx
  5304 00004023 E8B7F2FFFF          <2> 	call showdec
  5305 00004028 BE[7C490000]        <2> 	mov esi, linetester.msgcircle
  5306 0000402D E80FDDFFFF          <2> 	call printquiet
  5307 00004032 59                  <2> 	pop ecx
  5308 00004033 E8A7F2FFFF          <2> 	call showdec
  5309 00004038 BE[93490000]        <2> 	mov esi, linetester.msgtime
  5310 0000403D E8FFDCFFFF          <2> 	call printquiet
  5311 00004042 E81D330000          <2> 	call reloadallgraphics
  5312 00004047 C3                  <2> 	ret
  5313                              <2> 	
  5314 00004048 FF2C66636972636C65- <2> db 255,44,"fcircle",0	;attempts to draw many circles without refreshing screen or showing time
  5315 00004051 00                  <2>
  5316                              <2> fcircle:	
  5317 00004052 8B35[EE2F0000]      <2> 	mov esi, [currentcommandloc]
  5318 00004058 81C608000000        <2> 	add esi, 8
  5319 0000405E 66B91000            <2> 	mov cx, 16
  5320 00004062 30C0                <2> 	xor al, al
  5321 00004064 3806                <2> 	cmp [esi], al
  5322 00004066 7405                <2> 	je .nocmdline
  5323 00004068 E854F3FFFF          <2> 	call cnvrttxt
  5324                              <2> .nocmdline:
  5325 0000406D 6689C8              <2> 	mov ax, cx
  5326 00004070 66D1E1              <2> 	shl cx, 1
  5327 00004073 6689CA              <2> 	mov dx, cx
  5328 00004076 663B15[A7590000]    <2> 	cmp dx, [resolutionx]
  5329 0000407D 731B                <2> 	jae .done
  5330 0000407F 663B0D[A9590000]    <2> 	cmp cx, [resolutiony]
  5331 00004086 7312                <2> 	jae .done
  5332 00004088 668B35[66020000]    <2> 	mov si, [timenanoseconds + 2]
  5333 0000408F 31FF                <2> 	xor edi, edi
  5334 00004091 803D[7C8F0000]01    <2> 	cmp byte [guion], 1
  5335 00004098 7401                <2> 	je .lp
  5336 0000409A C3                  <2> .done ret
  5337                              <2> .lp:
  5338 0000409B 6629C2              <2> 	sub dx, ax
  5339 0000409E 6629C1              <2> 	sub cx, ax
  5340 000040A1 60                  <2> 	pusha
  5341 000040A2 E8552D0000          <2> 	call fillcircle
  5342 000040A7 61                  <2> 	popa
  5343 000040A8 47                  <2> 	inc edi
  5344 000040A9 660335[64020000]    <2> 	add si, [timenanoseconds]
  5345 000040B0 6601C2              <2> 	add dx, ax
  5346 000040B3 6601C2              <2> 	add dx, ax
  5347 000040B6 6601C2              <2> 	add dx, ax
  5348 000040B9 6601C1              <2> 	add cx, ax
  5349 000040BC 663B15[A7590000]    <2> 	cmp dx, [resolutionx]
  5350 000040C3 72D6                <2> 	jb .lp
  5351 000040C5 6689C2              <2> 	mov dx, ax
  5352 000040C8 6601C2              <2> 	add dx, ax
  5353 000040CB 6601C1              <2> 	add cx, ax
  5354 000040CE 6601C1              <2> 	add cx, ax
  5355 000040D1 663B0D[A9590000]    <2> 	cmp cx, [resolutiony]
  5356 000040D8 72C1                <2> 	jb .lp
  5357 000040DA C3                  <2> 	ret
  5358                              <1> %endif
  5359                              <1> %include 'source/programs/clear.asm'
  5360 000040DB FF2C636C65617200    <2> db 255,44,"clear",0
  5361 000040E3 E827DDFFFF          <2> 		call clear
  5362 000040E8 C3                  <2> 		ret 
  5363                              <1> %include 'source/programs/cpuid.asm'
  5364 000040E9 FF2C637075696400    <2> db 255,44,"cpuid",0
  5365 000040F1 31C0                <2> 	xor eax, eax
  5366 000040F3 0FA2                <2> 	cpuid
  5367 000040F5 891D[46410000]      <2> 	mov [cpuidbuf], ebx
  5368 000040FB 8915[4A410000]      <2> 	mov [cpuidbuf + 4], edx
  5369 00004101 890D[4E410000]      <2> 	mov [cpuidbuf + 8], ecx
  5370 00004107 BE[46410000]        <2> 	mov esi, cpuidbuf
  5371 0000410C E84FDCFFFF          <2> 	call print
  5372 00004111 BE[578F0000]        <2> 	mov esi, line
  5373 00004116 E845DCFFFF          <2> 	call print
  5374 0000411B B801000000          <2> 	mov eax, 1
  5375 00004120 0FA2                <2> 	cpuid
  5376 00004122 89C1                <2> 	mov ecx, eax
  5377 00004124 C605[00320000]02    <2> 	mov byte [firsthexshown], 2
  5378 0000412B E8E5F0FFFF          <2> 	call showhex
  5379 00004130 B808000080          <2> 	mov eax, 0x80000008
  5380 00004135 0FA2                <2> 	cpuid
  5381 00004137 89C1                <2> 	mov ecx, eax
  5382 00004139 C605[00320000]02    <2> 	mov byte [firsthexshown], 2
  5383 00004140 E8D0F0FFFF          <2> 	call showhex
  5384 00004145 C3                  <2> 	ret
  5385                              <2> 	
  5386 00004146 00<rept>            <2> cpuidbuf times 13 db 0
  5387                              <2> cpuidvendorend:
  5388                              <1> %ifdef network.included
  5389                              <1> 	%include 'source/programs/dhcp.asm'
  5390 00004153 FF2C6468637000      <2> db 255,44,"dhcp",0
  5391                              <2> dhcp:
  5392 0000415A BE[1A420000]        <2> 	mov esi, .dhcp.mac
  5393 0000415F BB[FA420000]        <2> 	mov ebx, .dhcp.option.mac
  5394 00004164 BF[DA410000]        <2> 	mov edi, .mac
  5395 00004169 31C9                <2> 	xor ecx, ecx
  5396 0000416B 66890D[EC410000]    <2> 	mov [.ip.checksum], cx
  5397 00004172 66890D[FC410000]    <2> 	mov [.udp.checksum], cx
  5398 00004179 8B0D[108F0000]      <2> 	mov ecx, [sysmac]
  5399 0000417F 890B                <2> 	mov [ebx], ecx
  5400 00004181 890F                <2> 	mov [edi], ecx
  5401 00004183 890E                <2> 	mov [esi], ecx
  5402 00004185 668B0D[148F0000]    <2> 	mov cx, [sysmac + 4]
  5403 0000418C 66894B04            <2> 	mov [ebx + 4], cx
  5404 00004190 66894E04            <2> 	mov [esi + 4], cx
  5405 00004194 66894F04            <2> 	mov [edi + 4], cx
  5406 00004198 BF[E2410000]        <2> 	mov edi, .ip.header
  5407 0000419D BE[F6410000]        <2> 	mov esi, .ip.headerend
  5408 000041A2 E8544C0000          <2> 	call getchecksum
  5409 000041A7 66890D[EC410000]    <2> 	mov [.ip.checksum], cx
  5410 000041AE BF[F6410000]        <2> 	mov edi, .udp.header
  5411 000041B3 BE[11430000]        <2> 	mov esi, .udp.end
  5412 000041B8 E83E4C0000          <2> 	call getchecksum
  5413 000041BD 66890D[FC410000]    <2> 	mov [.udp.checksum], cx
  5414 000041C4 BF[D4410000]        <2> 	mov edi, .frame
  5415 000041C9 BE[11430000]        <2> 	mov esi, .udp.end
  5416 000041CE E81E4C0000          <2> 	call sendpacket
  5417 000041D3 C3                  <2> 	ret
  5418                              <2> .frame:
  5419 000041D4 FFFFFFFFFFFF        <2> 	.destmac db 0xFF,0xFF,0xFF,0xFF,0xFF,0xFF
  5420 000041DA 000000000000        <2> 	.mac db 0,0,0,0,0,0
  5421 000041E0 0800                <2> 	db 8,0
  5422                              <2> .ip.header:
  5423 000041E2 45                  <2> 	db (0x40 | (.ip.headerend - .ip.header)/4)
  5424 000041E3 00                  <2> 	db 0
  5425 000041E4 012F                <2> 	db (.udp.end - .ip.header)/256, (.udp.end - .ip.header)
  5426 000041E6 0000                <2> 	dw 0
  5427 000041E8 0000                <2> 	dw 0
  5428 000041EA 80                  <2> 	db 0x80
  5429 000041EB 11                  <2> 	db 17
  5430 000041EC 0000                <2> .ip.checksum dw 0
  5431 000041EE 00000000            <2> 	db 0,0,0,0
  5432 000041F2 FFFFFFFF            <2> 	db 255,255,255,255	
  5433                              <2> .ip.headerend:
  5434                              <2> .udp.header:
  5435 000041F6 0044                <2> 	db 0,68	;source port
  5436 000041F8 0043                <2> 	db 0,67 ;destination port
  5437 000041FA 011B                <2> 	db (.udp.end - .udp.header)/256, (.udp.end - .udp.header)
  5438 000041FC 0000                <2> .udp.checksum dw 0
  5439                              <2> .udp.headerend:
  5440                              <2> .dhcp.data:
  5441 000041FE 01                  <2> 	db 1	;message type
  5442 000041FF 01                  <2> 	db 1	;hardware type
  5443 00004200 06                  <2> 	db 6	;hardware address length
  5444 00004201 00                  <2> 	db 0	;hops
  5445 00004202 EC2B2369            <2> 	db 0xEC,0x2B,0x23,0x69	;transaction ID
  5446 00004206 0000                <2> 	db 0,0	;seconds elapsed
  5447 00004208 0000                <2> 	db 0,0	;flags
  5448 0000420A 00000000            <2> 	db 0,0,0,0	;client ip address
  5449 0000420E 00000000            <2> 	db 0,0,0,0	;your ip address
  5450 00004212 00000000            <2> 	db 0,0,0,0	;server ip address
  5451 00004216 00000000            <2> 	db 0,0,0,0	;relay agent ip address
  5452 0000421A 000000000000        <2> .dhcp.mac db 0,0,0,0,0,0	;client hardware address
  5453 00004220 00<rept>            <2> 	times 10 db 0	;padding
  5454 0000422A 00<rept>            <2> 	times 64 db 0	;server host name
  5455 0000426A 00<rept>            <2> 	times 128 db 0	;boot file name
  5456 000042EA 63825363            <2> 	db 0x63,0x82,0x53,0x63	;magic cookie
  5457                              <2> .dhcp.option.type:
  5458 000042EE 350103              <2> 	db 53,1,3	;DHCP Request
  5459 000042F1 3204C0A80002        <2> 	db 50,4,192,168,0,2	;requested IP
  5460 000042F7 3D07                <2> 	db 61,7 ;client id(mac)
  5461 000042F9 01                  <2> 	db 1	;Type=Ethernet
  5462 000042FA 000000000000        <2> .dhcp.option.mac:	db 0,0,0,0,0,0
  5463 00004300 0C08                <2> 	db 12,8 ;host name
  5464 00004302 536F6C6C65724F53    <2> .dhcp.option.name 	db "SollerOS"
  5465 0000430A 370401030F06        <2> 	db 55,4,1,3,15,6	;request subnet, router, domain name, name server
  5466 00004310 FF                  <2> 	db 0xFF	;end DHCP options
  5467                              <2> .dhcp.end:
  5468                              <2> .udp.end:
  5469                              <2> 	
  5470                              <1> %endif
  5471                              <1> %ifdef disk.none
  5472                              <1> %else
  5473                              <1> 	%include 'source/programs/dos.asm'
  5474 00004311 FF2C646F7300        <2> db 255,44,"dos",0
  5475                              <2> dosrunner:
  5476 00004317 8925[DCA70300]      <2> 	mov [previousstack], esp
  5477 0000431D 8B3D[EE2F0000]      <2> 	mov edi, [currentcommandloc]
  5478 00004323 81C704000000        <2> 	add edi, 4
  5479 00004329 BE00014000          <2> 	mov esi,  0x100 + dosprogloc	;this should be the beginning of memory
  5480 0000432E E804270000          <2> 	call loadfile
  5481 00004333 8B3D[EE2F0000]      <2> 	mov edi, [currentcommandloc]
  5482 00004339 81C704000000        <2> 	add edi, 4
  5483 0000433F 81FA94010000        <2> 	cmp edx, 404
  5484 00004345 0F845E000000        <2> 	je near .noprogfound
  5485 0000434B BB81004000          <2> 	mov ebx, 0x81 + dosprogloc
  5486 00004350 31C9                <2> 	xor ecx, ecx
  5487                              <2> .findparams:
  5488 00004352 47                  <2> 	inc edi
  5489 00004353 8A07                <2> 	mov al, [edi]
  5490 00004355 3C20                <2> 	cmp al, " "
  5491 00004357 75F9                <2> 	jne .findparams
  5492                              <2> .copyparams:
  5493 00004359 8A07                <2> 	mov al, [edi]
  5494 0000435B 8803                <2> 	mov [ebx], al
  5495 0000435D 43                  <2> 	inc ebx
  5496 0000435E 47                  <2> 	inc edi
  5497 0000435F 41                  <2> 	inc ecx
  5498 00004360 81FB00014000        <2> 	cmp ebx, 0x100 + dosprogloc
  5499 00004366 7304                <2> 	jae .nomoreparams
  5500 00004368 3C00                <2> 	cmp al, 0
  5501 0000436A 75ED                <2> 	jne .copyparams
  5502                              <2> .nomoreparams:
  5503 0000436C 880D80004000        <2> 	mov [0x80 + dosprogloc], cl
  5504 00004372 66B85000            <2> 	mov ax, DOS_DATA_SEL
  5505 00004376 8ED8                <2> 	mov ds, ax
  5506 00004378 8EC0                <2> 	mov es, ax
  5507 0000437A 8EE0                <2> 	mov fs, ax
  5508 0000437C 8EE8                <2> 	mov gs, ax
  5509 0000437E 31C0                <2> 	xor eax, eax
  5510 00004380 31DB                <2> 	xor ebx, ebx
  5511 00004382 31C9                <2> 	xor ecx, ecx
  5512 00004384 31D2                <2> 	xor edx, edx
  5513 00004386 31FF                <2> 	xor edi, edi
  5514 00004388 31F6                <2> 	xor esi, esi
  5515 0000438A 9A000100004800      <2> 	call DOS_CODE_SEL:0x100
  5516 00004391 66BB3000            <2> 	mov bx, NEW_DATA_SEL
  5517 00004395 6689DA              <2> 	mov dx, bx
  5518 00004398 8EC3                <2> 	mov es, bx
  5519 0000439A 8EE3                <2> 	mov fs, bx
  5520 0000439C 66BB2000            <2> 	mov bx, SYS_DATA_SEL
  5521 000043A0 8EEB                <2> 	mov gs, bx
  5522 000043A2 8B25[DCA70300]      <2> 	mov esp, [previousstack]
  5523 000043A8 C3                  <2> 	ret
  5524                              <2> .noprogfound:
  5525 000043A9 BE[1E8F0000]        <2> 	mov esi, notfound1
  5526 000043AE E8ADD9FFFF          <2> 	call print
  5527 000043B3 8B35[EE2F0000]      <2> 	mov esi, [currentcommandloc]
  5528 000043B9 81C604000000        <2> 	add esi, 4
  5529 000043BF E89CD9FFFF          <2> 	call print
  5530 000043C4 BE[268F0000]        <2> 	mov esi, notfound2
  5531 000043C9 E892D9FFFF          <2> 	call print
  5532 000043CE C3                  <2> 	ret
  5533                              <2> 	
  5534                              <1> %endif
  5535                              <1> %include 'source/programs/dump.asm'
  5536 000043CF FF2C64756D7000      <2> db 255,44,"dump",0
  5537 000043D6 8B35[EE2F0000]      <2> 	mov esi, [currentcommandloc]
  5538 000043DC 81C605000000        <2> 	add esi, 5
  5539 000043E2 31C9                <2> 	xor ecx, ecx
  5540 000043E4 66B83078            <2> 	mov ax, "0x"
  5541 000043E8 663906              <2> 	cmp [esi], ax
  5542 000043EB 740A                <2> 	je dumphexin
  5543 000043ED E8CFEFFFFF          <2> 	call cnvrttxt
  5544 000043F2 E910000000          <2> 	jmp dumphexnow
  5545                              <2> dumphexin:
  5546 000043F7 81C602000000        <2> 	add esi, 2
  5547 000043FD E876EFFFFF          <2> 	call cnvrthextxt
  5548 00004402 E900000000          <2> 	jmp dumphexnow
  5549                              <2> dumphexnow:
  5550 00004407 89CF                <2> 	mov edi, ecx
  5551 00004409 89FE                <2> 	mov esi, edi
  5552 0000440B 81C680030000        <2> 	add esi, 896
  5553                              <2> dumphexloop:
  5554 00004411 8B0F                <2> 	mov ecx, [edi]
  5555 00004413 C605[00320000]05    <2> 	mov byte [firsthexshown],5
  5556 0000441A E8F6EDFFFF          <2> 	call showhex
  5557 0000441F 81C704000000        <2> 	add edi, 4
  5558 00004425 39F7                <2> 	cmp edi, esi
  5559 00004427 72E8                <2> 	jb dumphexloop
  5560 00004429 E8C7E4FFFF          <2> 	call termcopy
  5561 0000442E C3                  <2> 	ret 
  5562                              <1> %include 'source/programs/echo.asm'
  5563                              <2> 
  5564 0000442F FF2C6563686F00      <2> db 255,44,"echo",0
  5565                              <2> 	echoprog:
  5566 00004436 8B35[EE2F0000]      <2> 		mov esi, [currentcommandloc]
  5567 0000443C 81C605000000        <2> 		add esi, 5
  5568 00004442 8A06                <2> 		mov al, [esi]
  5569 00004444 E817D9FFFF          <2> 		call print
  5570 00004449 BE[578F0000]        <2> 		mov esi, line
  5571 0000444E E80DD9FFFF          <2> 		call print
  5572 00004453 C3                  <2> 		ret
  5573 00004454 BB[5CAA0300]        <2> 	echovr:	mov ebx, variables
  5574 00004459 BF06000000          <2> 		mov edi, 6
  5575 0000445E E83C000000          <2> 		call nxtvrech
  5576 00004463 E954000000          <2> 		jmp prntvr2
  5577 00004468 B13D                <2> 	echvar:	mov cl, '='
  5578 0000446A 43                  <2> 		inc ebx
  5579 0000446B 8A03                <2> 		mov al, [ebx]
  5580 0000446D 3C00                <2> 		cmp al, 0
  5581 0000446F 742E                <2> 		je nxtvrech
  5582 00004471 3C3D                <2> 		cmp al, '='
  5583 00004473 7422                <2> 		je nxtvrechb1
  5584 00004475 8B35[EE2F0000]      <2> 		mov esi, [currentcommandloc]
  5585 0000447B 01FE                <2> 		add esi, edi
  5586 0000447D E8ABEBFFFF          <2> 		call cndtest
  5587 00004482 3C02                <2> 		cmp al, 2
  5588 00004484 7432                <2> 		je prntvr
  5589 00004486 3C01                <2> 		cmp al, 1
  5590 00004488 742E                <2> 		je prntvr
  5591 0000448A 8B35[EE2F0000]      <2> 		mov esi, [currentcommandloc]
  5592 00004490 01FE                <2> 		add esi, edi
  5593 00004492 E908000000          <2> 		jmp nxtvrech
  5594                              <2> 	nxtvrechb1:
  5595 00004497 81EB02000000        <2> 		sub ebx, 2
  5596 0000449D EBC9                <2> 		jmp echvar
  5597 0000449F 8A03                <2> 	nxtvrech: mov al, [ebx]
  5598 000044A1 3C05                <2> 		cmp al, 5
  5599 000044A3 740A                <2> 		je nxtvrec2
  5600 000044A5 43                  <2> 		inc ebx
  5601 000044A6 81FB[5CBA0300]      <2> 		cmp ebx, varend
  5602 000044AC 72F1                <2> 		jb nxtvrech
  5603 000044AE C3                  <2> 		ret
  5604 000044AF 43                  <2> 	nxtvrec2: inc ebx
  5605 000044B0 8A03                <2> 		mov al, [ebx]
  5606 000044B2 3C04                <2> 		cmp al, 4
  5607 000044B4 74B2                <2> 		je echvar
  5608 000044B6 EBE7                <2> 		jmp nxtvrech
  5609 000044B8 43                  <2> 	prntvr: inc ebx
  5610 000044B9 89DE                <2> 		mov esi, ebx
  5611 000044BB C3                  <2> 		ret
  5612 000044BC E89FD8FFFF          <2> 	prntvr2: call print
  5613 000044C1 BE[578F0000]        <2> 		mov esi, line
  5614 000044C6 E895D8FFFF          <2> 		call print
  5615 000044CB C3                  <2> 		ret 
  5616                              <1> %include 'source/programs/else.asm'
  5617 000044CC FF2C656C736500      <2> 	db 255,44,"else",0
  5618 000044D3 31C0                <2> elsecmd:	xor eax, eax
  5619 000044D5 3805[56AA0300]      <2> 	cmp [BATCHISON], al
  5620 000044DB 0F840BF6FFFF        <2> 	je near notbatch
  5621 000044E1 A0[EDA90300]        <2> 	mov al, [IFON]
  5622 000044E6 BE[EEA90300]        <2> 	mov esi, IFTRUE
  5623 000044EB 01C6                <2> 	add esi, eax
  5624 000044ED 8A06                <2> 	mov al, [esi]
  5625 000044EF 3401                <2> 	xor al, 1
  5626 000044F1 8806                <2> 	mov [esi], al
  5627 000044F3 C3                  <2> 	ret 
  5628                              <1> %include 'source/programs/exit.asm'
  5629 000044F4 FF2C6578697400      <2> db 255,44,"exit",0
  5630 000044FB 803D[ECA90300]01    <2> 	cmp byte [ranboot], 1
  5631 00004502 0F84C7E7FFFF        <2> 	je near returnfromexp
  5632 00004508 E9ADE6FFFF          <2> 	jmp nobootfile
  5633                              <1> %include 'source/programs/fi.asm'
  5634 0000450D FF2C666900          <2> 	db 255,44,"fi",0
  5635 00004512 30C0                <2> 	xor al, al
  5636 00004514 3805[56AA0300]      <2> 	cmp [BATCHISON], al
  5637 0000451A 0F84CCF5FFFF        <2> 	je near notbatch
  5638 00004520 B001                <2> fi:	mov al, 1
  5639 00004522 2805[EDA90300]      <2> 	sub [IFON],al
  5640 00004528 C3                  <2> 	ret 
  5641                              <1> %ifdef gui.included
  5642                              <1> 	%include 'source/programs/gui.asm'
  5643 00004529 FF2C67756900        <2> db 255,44,"gui",0
  5644                              <2> guiswitcher:
  5645 0000452F 8B35[EE2F0000]      <2> 	mov esi, [currentcommandloc]
  5646 00004535 81C604000000        <2> 	add esi, 4
  5647 0000453B 31C9                <2> 	xor ecx, ecx
  5648 0000453D 803E00              <2> 	cmp byte [esi], 0
  5649 00004540 740A                <2> 	je .nomodepref
  5650 00004542 E831EEFFFF          <2> 	call cnvrthextxt ;switches arg on cline to vesa mode in ecx
  5651 00004547 E907000000          <2> 	jmp .modepref
  5652                              <2> .nomodepref:
  5653 0000454C 51                  <2> 	push ecx
  5654 0000454D E8BDD8FFFF          <2> 	call clear
  5655 00004552 59                  <2> 	pop ecx
  5656                              <2> .modepref:
  5657 00004553 66BB[B755]          <2> 	mov bx, guiswitch
  5658 00004557 66891D[030D0000]    <2> 	mov [realmodeptr], bx
  5659 0000455E BB[6E450000]        <2> 	mov ebx, guiswitchret
  5660 00004563 891D[FF0C0000]      <2> 	mov [realmodereturn], ebx
  5661 00004569 E97AC6FFFF          <2> 	jmp realmode
  5662                              <2> guiswitchret:
  5663 0000456E 65803D[7C8F0000]01  <2> 	cmp byte [gs:guion], 1
  5664 00004576 7401                <2> 	je .cont
  5665 00004578 C3                  <2> 	ret
  5666                              <2> .cont:
  5667 00004579 BF[95570000]        <2> 	mov edi, VBEMODEBLOCK
  5668                              <2> .loop:
  5669 0000457E 658B07              <2> 	mov eax, [gs:edi]
  5670 00004581 8907                <2> 	mov [edi], eax
  5671 00004583 47                  <2> 	inc edi
  5672 00004584 81FF[995A0000]      <2> 	cmp edi, VBEEND
  5673 0000458A 72F2                <2> 	jb .loop
  5674 0000458C A1[BD590000]        <2> 	mov eax, [physbaseptr]
  5675 00004591 8B1D[41020000]      <2> 	mov ebx, [basecache]
  5676 00004597 C1E304              <2> 	shl ebx, 4
  5677 0000459A 29D8                <2> 	sub eax, ebx
  5678 0000459C A3[BD590000]        <2> 	mov [physbaseptr], eax
  5679 000045A1 C605[EC230000]00    <2> 	mov byte [termguion], 0
  5680 000045A8 BE[71C20300]        <2> 	mov esi, graphicstable
  5681 000045AD 30C0                <2> 	xor al, al
  5682                              <2> .clear:
  5683 000045AF 8806                <2> 	mov [esi], al
  5684 000045B1 46                  <2> 	inc esi
  5685 000045B2 81FE[71C40300]      <2> 	cmp esi, graphicstableend
  5686 000045B8 72F5                <2> 	jb .clear
  5687 000045BA E83E2F0000          <2> 	call guisetup
  5688                              <2> 	;The next few lines center a window that is 3/4ths of the full screen
  5689 000045BF 668B15[A7590000]    <2> 	mov dx, [resolutionx]
  5690 000045C6 668B0D[A9590000]    <2> 	mov cx, [resolutiony]
  5691 000045CD 6689D3              <2> 	mov bx, dx
  5692 000045D0 6689C8              <2> 	mov ax, cx
  5693 000045D3 66D1EB              <2> 	shr bx, 1
  5694 000045D6 66D1E8              <2> 	shr ax, 1
  5695 000045D9 6689DA              <2> 	mov dx, bx
  5696 000045DC 66D1EA              <2> 	shr dx, 1
  5697 000045DF 6689C1              <2> 	mov cx, ax
  5698 000045E2 66D1E9              <2> 	shr cx, 1
  5699 000045E5 6601D3              <2> 	add bx, dx
  5700 000045E8 6601C8              <2> 	add ax, cx
  5701 000045EB 66D1E9              <2> 	shr cx, 1
  5702 000045EE 66C1EB03            <2> 	shr bx, 3
  5703 000045F2 66C1E303            <2> 	shl bx, 3
  5704 000045F6 66C1E804            <2> 	shr ax, 4
  5705 000045FA 66C1E004            <2> 	shl ax, 4
  5706 000045FE 66891D[0A770000]    <2> 	mov [termwindow], bx
  5707 00004605 66A3[0C770000]      <2> 	mov [termwindow + 2], ax	;the previous lines of code make a large terminal window that is 4 characters smaller than the screen
  5708 0000460B BE[0A770000]        <2> 	mov esi, termwindow
  5709 00004610 31DB                <2> 	xor ebx, ebx
  5710 00004612 6631C0              <2> 	xor ax, ax
  5711 00004615 E81D360000          <2> 	call showwindow
  5712 0000461A E87B140000          <2> 	call cursorgui
  5713 0000461F E8EBD7FFFF          <2> 	call clear
  5714 00004624 C3                  <2> 	ret
  5715                              <2> 	
  5716                              <1> %endif
  5717                              <1> %include 'source/programs/help.asm'
  5718 00004625 FF2C68656C7000      <2> db 255,44,"help",0
  5719                              <2> lscmd:	
  5720 0000462C B00D                <2> 		mov al, 13
  5721 0000462E E8BBDDFFFF          <2> 		call prcharq
  5722 00004633 BE[44340000]        <2> 		mov esi, progstart
  5723 00004638 BB[B7550000]        <2> 		mov ebx, progend
  5724 0000463D BE[DCA30300]        <2> dir:	mov esi, fileindex
  5725 00004642 8A06                <2> 	dirnxt:	mov al, [esi]
  5726 00004644 30E4                <2> 		xor ah, ah
  5727 00004646 3CFF                <2> 		cmp al, 255
  5728 00004648 7415                <2> 		je dirfnd
  5729 0000464A 46                  <2> 		inc esi
  5730 0000464B 81FE[DCA70300]      <2> 		cmp esi,  fileindexend
  5731 00004651 7339                <2> 		jae dirdn
  5732 00004653 EBED                <2> 		jmp dirnxt
  5733                              <2> 	dirfnd3:
  5734 00004655 46                  <2> 		inc esi
  5735 00004656 81FE[DCA70300]      <2> 		cmp esi, fileindexend
  5736 0000465C 76E4                <2> 		jbe dirnxt
  5737 0000465E 4E                  <2> 		dec esi
  5738 0000465F 46                  <2> 	dirfnd:	inc esi
  5739 00004660 8A06                <2> 		mov al, [esi]
  5740 00004662 30E4                <2> 		xor ah, ah
  5741 00004664 3C2C                <2> 		cmp al, 44
  5742 00004666 740B                <2> 		je dirfnd2
  5743 00004668 46                  <2> 		inc esi
  5744 00004669 81FE[DCA70300]      <2> 		cmp esi,  fileindexend
  5745 0000466F 731B                <2> 		jae dirdn
  5746 00004671 EBCF                <2> 		jmp dirnxt
  5747 00004673 46                  <2> 	dirfnd2: inc esi
  5748 00004674 E8C8D6FFFF          <2> 		call printquiet
  5749 00004679 56                  <2> 		push esi
  5750 0000467A B009                <2> 		mov al, 9
  5751 0000467C E86DDDFFFF          <2> 		call prcharq
  5752 00004681 5E                  <2> 		pop esi
  5753 00004682 81FE[DCA70300]      <2> 		cmp esi,  fileindexend
  5754 00004688 7302                <2> 		jae dirdn
  5755 0000468A EBB6                <2> 		jmp dirnxt
  5756 0000468C BE[578F0000]        <2> 	dirdn:	mov esi, line
  5757 00004691 E8CAD6FFFF          <2> 			call print
  5758 00004696 C3                  <2> 			ret
  5759 00004697 00                  <2> currentdir db 0
  5760                              <1> %include 'source/programs/if.asm'
  5761 00004698 FF2C696600          <2> 	db 255,44,"if",0
  5762 0000469D 30C0                <2> ifcmd:	xor al, al
  5763 0000469F 3805[56AA0300]      <2> 	cmp [BATCHISON], al
  5764 000046A5 0F8441F4FFFF        <2> 	je near notbatch
  5765 000046AB 8B1D[EE2F0000]      <2> 	mov ebx, [currentcommandloc]
  5766 000046B1 81C303000000        <2> 	add ebx, 3
  5767 000046B7 89DE                <2> 	mov esi, ebx
  5768 000046B9 8A06                <2> chkeqsn: mov al, [esi]
  5769 000046BB 3C00                <2> 	cmp al, 0
  5770 000046BD 0F8429F4FFFF        <2> 	je near notbatch
  5771 000046C3 3C3D                <2> 	cmp al, '='
  5772 000046C5 0F8403000000        <2> 	je near chkeqdn
  5773 000046CB 46                  <2> 	inc esi
  5774 000046CC EBEB                <2> 	jmp chkeqsn
  5775 000046CE B000                <2> chkeqdn: mov al, 0 
  5776 000046D0 8806                <2> 	mov [esi], al
  5777 000046D2 46                  <2> 	inc esi
  5778 000046D3 E81AE9FFFF          <2> 	call tester
  5779 000046D8 3C01                <2> 	cmp al, 1
  5780 000046DA 0F8405000000        <2> 	je near trueif
  5781 000046E0 E91C000000          <2> 	jmp falseif
  5782 000046E5 31C0                <2> trueif:	xor eax, eax
  5783 000046E7 A0[EDA90300]        <2> 	mov al, [IFON]
  5784 000046EC FEC0                <2> 	inc al
  5785 000046EE A2[EDA90300]        <2> 	mov [IFON], al
  5786 000046F3 30E4                <2> 	xor ah, ah
  5787 000046F5 BE[EEA90300]        <2> 	mov esi, IFTRUE
  5788 000046FA 01C6                <2> 	add esi, eax
  5789 000046FC B401                <2> 	mov ah, 1
  5790 000046FE 8826                <2> 	mov [esi], ah
  5791 00004700 C3                  <2> 	ret 
  5792 00004701 31C0                <2> falseif: xor eax, eax
  5793 00004703 A0[EDA90300]        <2> 	mov al, [IFON]
  5794 00004708 FEC0                <2> 	inc al
  5795 0000470A A2[EDA90300]        <2> 	mov [IFON], al
  5796 0000470F 30E4                <2> 	xor ah, ah
  5797 00004711 BE[EEA90300]        <2> 	mov esi, IFTRUE
  5798 00004716 01C6                <2> 	add esi, eax
  5799 00004718 30E4                <2> 	xor ah, ah
  5800 0000471A 8826                <2> 	mov [esi], ah
  5801 0000471C C3                  <2> 	ret 
  5802                              <1> %ifdef network.included
  5803                              <1> 	%include 'source/programs/ipconfig.asm'
  5804 0000471D FF2C6970636F6E6669- <2> db 255,44,"ipconfig",0
  5805 00004726 6700                <2>
  5806                              <2> ifconfig:
  5807 00004728 8B35[EE2F0000]      <2> 	mov esi, [currentcommandloc]
  5808 0000472E 81C609000000        <2> 	add esi, 9
  5809 00004734 803E00              <2> 	cmp byte [esi], 0
  5810 00004737 740B                <2> 	je .noip
  5811 00004739 E8E5460000          <2> 	call strtoip
  5812 0000473E 890D[0C8F0000]      <2> 	mov [sysip], ecx
  5813                              <2> .noip:
  5814                              <2> %ifdef ne2000.included
  5815 00004744 803D[B68D0000]01    <2> 	cmp byte [ne2000.nicconfig], 1
  5816 0000474B 751E                <2> 	jne .none2000
  5817 0000474D BE[B78D0000]        <2> 	mov esi, ne2000.name
  5818 00004752 E809D6FFFF          <2> 	call print
  5819 00004757 B9[DA8D0000]        <2> 	mov ecx, ne2000.mac
  5820 0000475C E844470000          <2> 	call showmac
  5821 00004761 BE[578F0000]        <2> 	mov esi, line
  5822 00004766 E8F5D5FFFF          <2> 	call print
  5823                              <2> .none2000:
  5824                              <2> %endif
  5825                              <2> %ifdef rtl8139.included
  5826                              <2> 	cmp byte [rtl8139.nicconfig], 1
  5827                              <2> 	jne .nortl8139
  5828                              <2> 	mov esi, rtl8139.name
  5829                              <2> 	call print
  5830                              <2> 	mov ecx, rtl8139.mac
  5831                              <2> 	call showmac
  5832                              <2> 	mov esi, line
  5833                              <2> 	call print
  5834                              <2> .nortl8139:
  5835                              <2> %endif
  5836                              <2> %ifdef rtl8169.included
  5837                              <2> 	cmp byte [rtl8169.nicconfig], 1
  5838                              <2> 	jne .nortl8169
  5839                              <2> 	mov esi, rtl8169.name
  5840                              <2> 	call print
  5841                              <2> 	mov ecx, rtl8169.mac
  5842                              <2> 	call showmac
  5843                              <2> 	mov esi, line
  5844                              <2> 	call print
  5845                              <2> .nortl8169:
  5846                              <2> %endif
  5847                              <2> %ifdef i8254x.included
  5848                              <2> 	cmp byte [i8254x.nicconfig], 1
  5849                              <2> 	jne .noi8254x
  5850                              <2> 	mov esi, i8254x.name
  5851                              <2> 	call print
  5852                              <2> 	mov ecx, i8254x.mac
  5853                              <2> 	call showmac
  5854                              <2> 	mov esi, line
  5855                              <2> 	call print
  5856                              <2> .noi8254x:
  5857                              <2> %endif
  5858 0000476B 8B0D[0C8F0000]      <2> 	mov ecx, [sysip]
  5859 00004771 E8F3460000          <2> 	call showip
  5860 00004776 BE[578F0000]        <2> 	mov esi, line
  5861 0000477B E8E0D5FFFF          <2> 	call print
  5862 00004780 C3                  <2> 	ret
  5863                              <2> 	
  5864                              <1> %endif
  5865                              <1> %include 'source/programs/keycode.asm'
  5866 00004781 FF2C6B6579636F6465- <2> db 255,44,"keycode",0
  5867 0000478A 00                  <2>
  5868                              <2> keycode:
  5869 0000478B 66C705[BF230000]00- <2> 	mov word [trans], 0
  5870 00004793 00                  <2>
  5871 00004794 C605[F36B0000]00    <2> 	mov byte [threadson], 0
  5872                              <2> %ifdef io.serial
  5873                              <2> .noserial:
  5874                              <2> 	hlt
  5875                              <2> 	mov dx, [serial.address]
  5876                              <2> 	in al, dx
  5877                              <2> 	cmp al, 0
  5878                              <2> 	je .noserial
  5879                              <2> 	mov cl, al
  5880                              <2> 	call showhexsmall
  5881                              <2> 	cmp al, 0x1B
  5882                              <2> 	jne .noserial
  5883                              <2> 	in al, dx
  5884                              <2> 	mov cl, al
  5885                              <2> 	call showhexsmall
  5886                              <2> 	cmp cl, 0x5B
  5887                              <2> 	je .noserial
  5888                              <2> 	ret
  5889                              <2> %else
  5890 0000479B E80A190000          <2> 	call getkey
  5891 000047A0 31C0                <2> 	xor eax, eax
  5892 000047A2 31C9                <2> 	xor ecx, ecx
  5893 000047A4 8A0D[88600000]      <2> 	mov cl, [specialkey]
  5894 000047AA 80F900              <2> 	cmp cl, 0
  5895 000047AD 0F8405000000        <2> 	je near .nospecialkeycode
  5896 000047B3 E849EAFFFF          <2> 	call showhexsmall
  5897                              <2> .nospecialkeycode:
  5898 000047B8 668B0D[BD230000]    <2> 	mov cx, [lastkey + 2]
  5899 000047BF E83DEAFFFF          <2> 	call showhexsmall
  5900 000047C4 80F901              <2> 	cmp cl, 1
  5901 000047C7 75C2                <2> 	jne keycode
  5902 000047C9 C3                  <2> 	ret
  5903                              <2> %endif
  5904                              <1> %ifdef gui.included
  5905                              <1> 	%include 'source/programs/line.asm'
  5906 000047CA FF2C6C696E6500      <2> db 255,44,"line",0
  5907                              <2> linetester:
  5908 000047D1 803D[7C8F0000]00    <2> 	cmp byte [guion], 0
  5909 000047D8 0F841B000000        <2> 	je near .done
  5910 000047DE 668B35[66020000]    <2> 	mov si, [timenanoseconds + 2];essentially load a random value
  5911 000047E5 BB38000000          <2> 	mov ebx, 28*2;the line test draws ~28/6 times more lines in a 4:3 display mode than circles
  5912 000047EA E868000000          <2> 	call .circletest
  5913 000047EF BB0C000000          <2> 	mov ebx, 6*2 ;this makes them draw the same amount of lines as circles
  5914 000047F4 E801000000          <2> 	call .linetest
  5915                              <2> .done:
  5916 000047F9 C3                  <2> 	ret
  5917                              <2> 
  5918                              <2> .linetest:
  5919 000047FA 53                  <2> 	push ebx
  5920 000047FB E8D6000000          <2> 	call .stime
  5921 00004800 5B                  <2> 	pop ebx
  5922 00004801 31FF                <2> 	xor edi, edi
  5923                              <2> .ltlp:
  5924 00004803 53                  <2> 	push ebx
  5925 00004804 E81C010000          <2> 	call .st
  5926 00004809 66F7D6              <2> 	not si
  5927 0000480C E814010000          <2> 	call .st
  5928 00004811 5B                  <2> 	pop ebx
  5929 00004812 66F7D6              <2> 	not si
  5930 00004815 660335[64020000]    <2> 	add si, [timenanoseconds]
  5931 0000481C 4B                  <2> 	dec ebx
  5932 0000481D 81FB00000000        <2> 	cmp ebx, 0
  5933 00004823 77DE                <2> 	ja .ltlp
  5934 00004825 E8C4000000          <2> 	call .etime
  5935 0000482A 53                  <2> 	push ebx	
  5936 0000482B 57                  <2> 	push edi
  5937 0000482C E8A02A0000          <2> 	call guiclear
  5938 00004831 E82E2B0000          <2> 	call reloadallgraphics
  5939 00004836 59                  <2> 	pop ecx
  5940 00004837 E8A3EAFFFF          <2> 	call showdec
  5941 0000483C BE[67490000]        <2> 	mov esi, .msg
  5942 00004841 E81AD5FFFF          <2> 	call print
  5943 00004846 59                  <2> 	pop ecx
  5944 00004847 E893EAFFFF          <2> 	call showdec
  5945 0000484C BE[93490000]        <2> 	mov esi, .msgtime
  5946 00004851 E80AD5FFFF          <2> 	call print
  5947 00004856 C3                  <2> 	ret
  5948                              <2> 	
  5949                              <2> .circletest:
  5950 00004857 53                  <2> 	push ebx
  5951 00004858 E879000000          <2> 	call .stime
  5952 0000485D 5B                  <2> 	pop ebx
  5953 0000485E 31FF                <2> 	xor edi, edi
  5954                              <2> .ctlp:
  5955 00004860 53                  <2> 	push ebx
  5956 00004861 668B0D[A9590000]    <2> 	mov cx, [resolutiony]
  5957 00004868 66D1E9              <2> 	shr cx, 1
  5958 0000486B 668B15[A7590000]    <2> 	mov dx, [resolutionx]
  5959 00004872 66D1EA              <2> 	shr dx, 1
  5960 00004875 6689C8              <2> 	mov ax, cx
  5961                              <2> .circle:
  5962 00004878 60                  <2> 	pusha
  5963 00004879 E86C240000          <2> 	call drawcircle
  5964 0000487E 61                  <2> 	popa
  5965 0000487F 6648                <2> 	dec ax
  5966 00004881 47                  <2> 	inc edi
  5967 00004882 663D0100            <2> 	cmp ax, 1
  5968 00004886 77F0                <2> 	ja .circle
  5969 00004888 66F7D6              <2> 	not si
  5970                              <2> .circle2:
  5971 0000488B 60                  <2> 	pusha
  5972 0000488C E859240000          <2> 	call drawcircle
  5973 00004891 61                  <2> 	popa
  5974 00004892 47                  <2> 	inc edi
  5975 00004893 6640                <2> 	inc ax
  5976 00004895 6639C8              <2> 	cmp ax, cx
  5977 00004898 76F1                <2> 	jbe .circle2
  5978 0000489A 5B                  <2> 	pop ebx
  5979 0000489B 66F7D6              <2> 	not si
  5980 0000489E 660335[64020000]    <2> 	add si, [timenanoseconds]
  5981 000048A5 4B                  <2> 	dec ebx
  5982 000048A6 81FB00000000        <2> 	cmp ebx, 0
  5983 000048AC 77B2                <2> 	ja .ctlp
  5984 000048AE E83B000000          <2> 	call .etime
  5985 000048B3 53                  <2> 	push ebx
  5986 000048B4 57                  <2> 	push edi
  5987 000048B5 59                  <2> 	pop ecx
  5988 000048B6 E824EAFFFF          <2> 	call showdec
  5989 000048BB BE[7C490000]        <2> 	mov esi, .msgcircle
  5990 000048C0 E89BD4FFFF          <2> 	call print
  5991 000048C5 59                  <2> 	pop ecx
  5992 000048C6 E814EAFFFF          <2> 	call showdec
  5993 000048CB BE[93490000]        <2> 	mov esi, .msgtime
  5994 000048D0 E88BD4FFFF          <2> 	call print
  5995 000048D5 C3                  <2> 	ret
  5996                              <2> 	
  5997                              <2> .stime:
  5998 000048D6 F4                  <2> 	hlt
  5999 000048D7 A1[60020000]        <2> 	mov eax, [timeseconds]
  6000 000048DC 8B1D[64020000]      <2> 	mov ebx, [timenanoseconds]
  6001 000048E2 A3[A2490000]        <2> 	mov [.time], eax
  6002 000048E7 891D[A6490000]      <2> 	mov [.time + 4], ebx
  6003 000048ED C3                  <2> 	ret
  6004                              <2> 	
  6005                              <2> .etime:
  6006 000048EE A1[60020000]        <2> 	mov eax, [timeseconds]
  6007 000048F3 8B1D[64020000]      <2> 	mov ebx, [timenanoseconds]
  6008 000048F9 8B0D[A2490000]      <2> 	mov ecx, [.time]
  6009 000048FF 8B15[A6490000]      <2> 	mov edx, [.time + 4]
  6010 00004905 C1EA0A              <2> 	shr edx, 10
  6011 00004908 C1EB0A              <2> 	shr ebx, 10
  6012 0000490B 29C8                <2> 	sub eax, ecx
  6013 0000490D 3D00000000          <2> 	cmp eax, 0
  6014 00004912 740E                <2> 	je .notclp
  6015                              <2> .tclp:
  6016 00004914 81C340420F00        <2> 	add ebx, 1000000
  6017 0000491A 48                  <2> 	dec eax
  6018 0000491B 3D00000000          <2> 	cmp eax, 0
  6019 00004920 75F2                <2> 	jne .tclp
  6020                              <2> .notclp:
  6021 00004922 29D3                <2> 	sub ebx, edx
  6022 00004924 C3                  <2> 	ret
  6023                              <2> 	
  6024                              <2> .st:
  6025 00004925 6631C0              <2> 	xor ax, ax
  6026 00004928 6631DB              <2> 	xor bx, bx
  6027 0000492B 668B0D[A9590000]    <2> 	mov cx, [resolutiony]
  6028 00004932 668B15[A7590000]    <2> 	mov dx, [resolutionx]
  6029                              <2> .lp:
  6030 00004939 60                  <2> 	pusha
  6031 0000493A E866280000          <2> 	call drawline
  6032 0000493F 61                  <2> 	popa
  6033                              <2> .noswitch:
  6034 00004940 47                  <2> 	inc edi
  6035 00004941 6643                <2> 	inc bx
  6036 00004943 664A                <2> 	dec dx
  6037 00004945 6681FB0000          <2> 	cmp bx, 0
  6038 0000494A 74ED                <2> 	je .lp
  6039 0000494C 6681FA0000          <2> 	cmp dx, 0
  6040 00004951 75E6                <2> 	jne .lp
  6041                              <2> .lp2:
  6042 00004953 60                  <2> 	pusha
  6043 00004954 E84C280000          <2> 	call drawline
  6044 00004959 61                  <2> 	popa
  6045 0000495A 47                  <2> 	inc edi
  6046 0000495B 6640                <2> 	inc ax
  6047 0000495D 6649                <2> 	dec cx
  6048 0000495F 6681F90000          <2> 	cmp cx, 0
  6049 00004964 75ED                <2> 	jne .lp2
  6050 00004966 C3                  <2> 	ret
  6051                              <2> 	
  6052 00004967 6C696E657320776572- <2> .msg db "lines were drawn in ",0
  6053 00004970 6520647261776E2069- <2>
  6054 00004979 6E2000              <2>
  6055 0000497C 636972636C65732077- <2> .msgcircle db "circles were drawn in ",0
  6056 00004985 65726520647261776E- <2>
  6057 0000498E 20696E2000          <2>
  6058 00004993 6D6963726F7365636F- <2> .msgtime db "microseconds.",10,0
  6059 0000499C 6E64732E0A00        <2>
  6060 000049A2 0000000000000000    <2> .time dd 0,0	
  6061                              <1> %endif
  6062                              <1> %include 'source/programs/logout.asm'
  6063 000049AA FF2C6C6F676F757400  <2> 	db 255,44,"logout",0
  6064 000049B3 E9BEE1FFFF          <2> 	jmp os
  6065                              <1> %include 'source/programs/loop.asm'
  6066 000049B8 FF2C6C6F6F7000      <2> 	db 255,44,"loop",0
  6067 000049BF 803D[57AA0300]00    <2> 	cmp byte [LOOPON], 0
  6068 000049C6 0F8501000000        <2> 	jne near filoop
  6069 000049CC C3                  <2> 	ret
  6070 000049CD 8B35[58AA0300]      <2> filoop: mov esi, [LOOPPOS]
  6071 000049D3 FE0D[EDA90300]      <2> 	dec byte [IFON]
  6072 000049D9 C605[57AA0300]00    <2> 	mov byte [LOOPON], 0
  6073 000049E0 8935[52AA0300]      <2> 	mov [BATCHPOS], esi
  6074 000049E6 8935[143A0000]      <2> 	mov [batchedi], esi
  6075 000049EC C3                  <2> 	ret 
  6076                              <1> %ifdef disk.none
  6077                              <1> %else
  6078                              <1> 	%include 'source/programs/ls.asm'
  6079 000049ED FF2C6C7300          <2> db 255,44,"ls",0
  6080 000049F2 BE[C6910300]        <2> 		mov esi, diskfileindex
  6081                              <2> 	diskindexdir:
  6082 000049F7 803E5F              <2> 		cmp byte [esi], '_'
  6083 000049FA 7440                <2> 		je nextdiskindexdir
  6084 000049FC E840D3FFFF          <2> 		call printquiet
  6085 00004A01 56                  <2> 		push esi
  6086 00004A02 BE[5C4A0000]        <2> 		mov esi, disktab
  6087 00004A07 E835D3FFFF          <2> 		call printquiet
  6088 00004A0C 5E                  <2> 		pop esi
  6089 00004A0D 8B4E05              <2> 		mov ecx, [esi + 5]
  6090 00004A10 C605[00320000]05    <2> 		mov byte [firsthexshown], 5
  6091 00004A17 E8C3E8FFFF          <2> 		call showdec
  6092 00004A1C 56                  <2> 		push esi
  6093 00004A1D BE[578F0000]        <2> 		mov esi, line
  6094 00004A22 E81AD3FFFF          <2> 		call printquiet
  6095 00004A27 5E                  <2> 		pop esi
  6096 00004A28 81C609000000        <2> 		add esi, 9
  6097 00004A2E 81FE[D7930300]      <2> 		cmp esi, enddiskfileindex
  6098 00004A34 72C1                <2> 		jb diskindexdir
  6099 00004A36 E8BADEFFFF          <2> 		call termcopy
  6100 00004A3B C3                  <2> 		ret
  6101                              <2> 	nextdiskindexdir:
  6102 00004A3C 46                  <2> 		inc esi
  6103 00004A3D 803E00              <2> 		cmp byte [esi], 0
  6104 00004A40 75FA                <2> 		jne nextdiskindexdir
  6105 00004A42 81C609000000        <2> 		add esi, 9
  6106 00004A48 81FE[D7930300]      <2> 		cmp esi, enddiskfileindex
  6107 00004A4E 72A7                <2> 		jb diskindexdir
  6108 00004A50 E8A0DEFFFF          <2> 		call termcopy
  6109 00004A55 C3                  <2> 		ret
  6110                              <2> 		
  6111 00004A56 4469736B2000        <2> 		diskmsg db "Disk ",0
  6112 00004A5C 0D09090900          <2> 		disktab db 13,9,9,9,0
  6113                              <1> %endif
  6114                              <1> %include 'source/programs/memory.asm'
  6115 00004A61 FF2C6D656D6F727900  <2> db 255,44,"memory",0
  6116 00004A6A BE[828F0000]        <2> 	mov esi, memlistbuf
  6117 00004A6F 31FF                <2> 	xor edi, edi
  6118 00004A71 668B3D[C2910000]    <2> 	mov di, [memlistend]
  6119 00004A78 01F7                <2> 	add edi, esi
  6120                              <2> printmemmap:
  6121 00004A7A 8B0E                <2> 	mov ecx, [esi]
  6122 00004A7C E894E7FFFF          <2> 	call showhex
  6123 00004A81 81C608000000        <2> 	add esi, 8
  6124 00004A87 8B0E                <2> 	mov ecx, [esi]
  6125 00004A89 E887E7FFFF          <2> 	call showhex
  6126 00004A8E 81C608000000        <2> 	add esi, 8
  6127 00004A94 8B0E                <2> 	mov ecx, [esi]
  6128 00004A96 E87AE7FFFF          <2> 	call showhex
  6129 00004A9B 81C608000000        <2> 	add esi, 8
  6130 00004AA1 57                  <2> 	push edi
  6131 00004AA2 56                  <2> 	push esi
  6132 00004AA3 BE[578F0000]        <2> 	mov esi, line
  6133 00004AA8 E8B3D2FFFF          <2> 	call print
  6134 00004AAD 5E                  <2> 	pop esi
  6135 00004AAE 5F                  <2> 	pop edi
  6136 00004AAF 39FE                <2> 	cmp esi, edi
  6137 00004AB1 72C7                <2> 	jb printmemmap
  6138 00004AB3 C3                  <2> 	ret
  6139                              <2> 	
  6140                              <1> %include 'source/programs/pci.asm'
  6141 00004AB4 FF2C70636900        <2> db 255,44,"pci",0
  6142 00004ABA E8431C0000          <2> 	call pcidump
  6143 00004ABF C3                  <2> 	ret 
  6144                              <1> %ifdef network.included
  6145                              <1> 	%include 'source/programs/ping.asm'
  6146 00004AC0 FF2C70696E6700      <2> db 255,44,"ping",0
  6147                              <2> ping:
  6148 00004AC7 8B35[EE2F0000]      <2> 	mov esi, [currentcommandloc]
  6149 00004ACD 81C605000000        <2> 	add esi, 5
  6150 00004AD3 E84B430000          <2> 	call strtoip
  6151 00004AD8 890D[634B0000]      <2> 	mov [.destip], ecx
  6152 00004ADE E886430000          <2> 	call showip
  6153 00004AE3 8B0D[0C8F0000]      <2> 	mov ecx, [sysip]
  6154 00004AE9 890D[5F4B0000]      <2> 	mov [.sourceip]. ecx
  6155 00004AEF 31C0                <2> 	xor eax, eax
  6156 00004AF1 31DB                <2> 	xor ebx, ebx
  6157 00004AF3 66A3[5D4B0000]      <2> 	mov [.checksum], ax
  6158 00004AF9 66A3[694B0000]      <2> 	mov [.icmpchecksum], ax
  6159 00004AFF BF[534B0000]        <2> 	mov edi, .header
  6160 00004B04 BE[674B0000]        <2> 	mov esi, .headerend
  6161 00004B09 E8ED420000          <2> 	call getchecksum
  6162 00004B0E 66890D[5D4B0000]    <2> 	mov [.checksum], cx
  6163 00004B15 BF[674B0000]        <2> 	mov edi, .icmp
  6164 00004B1A BE[8F4B0000]        <2> 	mov esi, .packetend
  6165 00004B1F E8D7420000          <2> 	call getchecksum
  6166 00004B24 66890D[694B0000]    <2> 	mov [.icmpchecksum], cx
  6167 00004B2B BF[454B0000]        <2> 	mov edi, .packet
  6168 00004B30 BE[8F4B0000]        <2> 	mov esi, .packetend
  6169 00004B35 E8B7420000          <2> 	call sendpacket
  6170 00004B3A BE[578F0000]        <2> 	mov esi, line
  6171 00004B3F E81CD2FFFF          <2> 	call print
  6172 00004B44 C3                  <2> 	ret
  6173                              <2> 	
  6174                              <2> 	
  6175                              <2> 	
  6176                              <2> .packet:
  6177 00004B45 FFFFFFFFFFFF        <2> .destinationmac db 0xFF,0xFF,0xFF,0xFF,0xFF,0xFF
  6178 00004B4B 000000000000        <2> .sourcemac	db 0,0,0,0,0,0
  6179 00004B51 0800                <2> .ethertype	db 8,0	;ip is 0x800
  6180                              <2> .header:
  6181 00004B53 45                  <2> .version	db 0x45
  6182 00004B54 00                  <2> .services	db 0
  6183 00004B55 003C                <2> .length	db 0,0x3C
  6184 00004B57 0000                <2> .id		dw 0
  6185 00004B59 00                  <2> .flags	db 0
  6186 00004B5A 00                  <2> .fragment db 0
  6187 00004B5B 80                  <2> .ttl	db 128
  6188 00004B5C 01                  <2> .protocol db 1 ;ICMP
  6189 00004B5D 0000                <2> .checksum dw 0
  6190 00004B5F 00000000            <2> .sourceip dd 0
  6191 00004B63 00000000            <2> .destip dd 0
  6192                              <2> .headerend:
  6193                              <2> .icmp:
  6194 00004B67 08                  <2> .icmptype db 8 ;Ping request
  6195 00004B68 00                  <2> .icmpcode db 0
  6196 00004B69 0000                <2> .icmpchecksum dw 0
  6197 00004B6B 0001                <2> .icmpid db 0,1
  6198 00004B6D 0000                <2> .sequence dw 0
  6199 00004B6F 616263646566676869- <2> db "abcdefghijklmnopqrstuvwabcdefghi" ;this is what microsoft includes
  6200 00004B78 6A6B6C6D6E6F707172- <2>
  6201 00004B81 737475767761626364- <2>
  6202 00004B8A 6566676869          <2>
  6203                              <2> .packetend:
  6204                              <1> %endif
  6205                              <1> %ifdef disk.none
  6206                              <1> %else
  6207                              <1> 	%include 'source/programs/play.asm'
  6208 00004B8F FF2C706C61796100    <2> db 255,44,"playa",0
  6209 00004B97 8B3D[EE2F0000]      <2> 	mov edi, [currentcommandloc]
  6210 00004B9D 81C706000000        <2> 	add edi, 6
  6211 00004BA3 E834000000          <2> 	call playasync
  6212 00004BA8 C3                  <2> 	ret
  6213 00004BA9 FF2C706C617900      <2> db 255,44,"play",0
  6214                              <2> play:
  6215 00004BB0 8B3D[EE2F0000]      <2> 	mov edi, [currentcommandloc]
  6216 00004BB6 81C705000000        <2> 	add edi, 5
  6217 00004BBC E81B000000          <2> 	call playasync
  6218                              <2> .waitforsound:
  6219 00004BC1 F4                  <2> 	hlt
  6220                              <2> %ifdef sound.included
  6221 00004BC2 A1[71600000]        <2> 	mov eax, [Length0]
  6222 00004BC7 660B05[75600000]    <2> 	or ax, [Length1]
  6223                              <2> %endif
  6224 00004BCE 0A05[68020000]      <2> 	or al, [soundon]
  6225 00004BD4 3D00000000          <2> 	cmp eax, 0
  6226 00004BD9 75E6                <2> 	jne .waitforsound
  6227 00004BDB C3                  <2> 	ret
  6228                              <2> playasync:
  6229 00004BDC BE0000C000          <2> 	mov esi, 0xC00000
  6230 00004BE1 E8511E0000          <2> 	call loadfile
  6231 00004BE6 81FA94010000        <2> 	cmp edx, 404
  6232 00004BEC 743F                <2> 	je nosoundfound
  6233 00004BEE BB0000C000          <2> 	mov ebx, 0xC00000
  6234 00004BF3 817B0857415645      <2> 	cmp dword [ebx + 8], "WAVE"
  6235 00004BFA 0F843F010000        <2> 	je near wave_player
  6236 00004C00 66813B534E          <2> 	cmp word [ebx], "SN"
  6237 00004C05 7526                <2> 	jne nosoundfound
  6238 00004C07 81C306000000        <2> 	add ebx, 6
  6239 00004C0D 891D[6B020000]      <2> 	mov [soundpos], ebx
  6240 00004C13 035BFC              <2> 	add ebx, [ebx - 4]
  6241 00004C16 891D[6F020000]      <2> 	mov [soundendpos], ebx
  6242 00004C1C 66C705[69020000]00- <2> 	mov word [soundrepititions], 0
  6243 00004C24 00                  <2>
  6244 00004C25 C605[68020000]01    <2> 	mov byte [soundon], 1
  6245 00004C2C C3                  <2> 	ret
  6246                              <2> nosoundfound:
  6247 00004C2D BE[534C0000]        <2> 	mov esi, notfoundsound
  6248 00004C32 E829D1FFFF          <2> 	call print
  6249 00004C37 8B35[EE2F0000]      <2> 	mov esi, [currentcommandloc]
  6250 00004C3D 81C605000000        <2> 	add esi, 5
  6251 00004C43 E818D1FFFF          <2> 	call print
  6252 00004C48 BE[268F0000]        <2> 	mov esi, notfound2
  6253 00004C4D E80ED1FFFF          <2> 	call print
  6254 00004C52 C3                  <2> 	ret
  6255 00004C53 706C61793A2000      <2> notfoundsound db "play: ",0
  6256                              <2> 
  6257                              <2> %ifdef sound.included
  6258                              <2> sbplay:
  6259 00004C5A BE0000C000          <2> 		mov esi, 0xC00000
  6260 00004C5F 89F3                <2> 		mov ebx, esi
  6261 00004C61 81C640000000        <2> 		add esi, WAVSTART
  6262 00004C67 29F7                <2> 		sub edi, esi
  6263 00004C69 66893D[75600000]    <2> 		mov [Length1], di
  6264 00004C70 C1EF0F              <2> 		shr edi, 15
  6265 00004C73 893D[71600000]      <2> 		mov [Length0], edi
  6266 00004C79 8B4B18              <2> 		mov ecx, [ebx + 24]
  6267 00004C7C 890D[82600000]      <2> 		mov [Freq], ecx
  6268 00004C82 31C0                <2> 		xor eax, eax
  6269 00004C84 BA0000C000          <2> 		mov	edx, 0xC00000 ;physical location of sound
  6270 00004C89 81C240000000        <2> 		add edx, WAVSTART
  6271 00004C8F 01D0                <2> 		add	eax, edx
  6272 00004C91 89C6                <2> 		mov esi, eax
  6273 00004C93 31C9                <2> 		xor ecx, ecx
  6274 00004C95 31DB                <2> 		xor ebx, ebx
  6275 00004C97 66891D[7F600000]    <2> 		mov [SegLoc], bx
  6276 00004C9E 81C300000800        <2> 		add ebx, 0x80000
  6277 00004CA4 66B9FFFF            <2> 		mov cx, 0xFFFF
  6278 00004CA8 6681FF0000          <2> 		cmp di, 0
  6279 00004CAD 7520                <2> 		jne .autoinit
  6280 00004CAF 668B0D[75600000]    <2> 		mov cx, [Length1]
  6281 00004CB6 C605[70600000]01    <2> 		mov byte [OddLength], 1
  6282 00004CBD 6681F90080          <2> 		cmp cx, 32768
  6283 00004CC2 730B                <2> 		jae .autoinit
  6284 00004CC4 C605[70600000]00    <2> 		mov byte [OddLength], 0
  6285 00004CCB 66D1E1              <2> 		shl cx, 1
  6286 00004CCE 47                  <2> 		inc edi
  6287                              <2> .autoinit:
  6288 00004CCF 4F                  <2> 		dec edi
  6289 00004CD0 893D[71600000]      <2> 		mov [Length0], edi
  6290 00004CD6 66890D[75600000]    <2> 		mov [Length1], cx
  6291 00004CDD 66D1E9              <2> 		shr cx, 1
  6292 00004CE0 6641                <2> 		inc cx
  6293 00004CE2 01C8                <2> 		add eax, ecx
  6294 00004CE4 A3[77600000]        <2> 		mov [NextMemLoc], eax
  6295 00004CE9 8935[7B600000]      <2> 		mov	[MemLoc], esi
  6296 00004CEF E834120000          <2> 		call DMACopy
  6297 00004CF4 31DB                <2> 		xor ebx, ebx
  6298 00004CF6 668B1D[7F600000]    <2> 		mov bx, [SegLoc]
  6299 00004CFD 31C9                <2> 		xor ecx, ecx
  6300 00004CFF 668B0D[75600000]    <2> 		mov cx, [Length1]
  6301 00004D06 66D1E9              <2> 		shr cx, 1
  6302 00004D09 6641                <2> 		inc cx
  6303 00004D0B 01CB                <2> 		add ebx, ecx
  6304 00004D0D 66891D[7F600000]    <2> 		mov [SegLoc], bx
  6305 00004D14 81C300000800        <2> 		add ebx, 0x80000
  6306 00004D1A 8B35[77600000]      <2> 		mov esi, [NextMemLoc]
  6307 00004D20 89F0                <2> 		mov eax, esi
  6308 00004D22 01C8                <2> 		add eax, ecx
  6309 00004D24 A3[77600000]        <2> 		mov [NextMemLoc], eax
  6310 00004D29 8935[7B600000]      <2> 		mov	[MemLoc], esi
  6311 00004D2F E8F4110000          <2> 		call DMACopy
  6312 00004D34 E812120000          <2> 		call DMAPlay
  6313 00004D39 E89C120000          <2> 		call PlayDSP
  6314 00004D3E C3                  <2> 		ret
  6315                              <2> WAVSTART equ 64;44
  6316                              <2> wave_player:
  6317 00004D3F 803D[87600000]01    <2> 	cmp byte [SoundBlaster], 1
  6318 00004D46 0F840EFFFFFF        <2> 	je near sbplay
  6319 00004D4C BE[574D0000]        <2> 	mov esi, nosoundblaster
  6320 00004D51 E80AD0FFFF          <2> 	call print
  6321 00004D56 C3                  <2> 	ret
  6322                              <2> %else
  6323                              <2> 	wave_player:
  6324                              <2> 		mov esi, nosoundblaster
  6325                              <2> 		call print
  6326                              <2> 		ret
  6327                              <2> %endif
  6328 00004D57 4E6F20536F756E6420- <2> nosoundblaster db "No Sound Blaster detected.",10,0
  6329 00004D60 426C61737465722064- <2>
  6330 00004D69 657465637465642E0A- <2>
  6331 00004D72 00                  <2>
  6332                              <1> %endif
  6333                              <1> %include 'source/programs/pwd.asm'
  6334 00004D73 FF2C70776400        <2> db 255,44,"pwd",0
  6335 00004D79 BE[E8A70300]        <2> 	mov esi, currentfolder
  6336 00004D7E E8BECFFFFF          <2> 	call printquiet
  6337 00004D83 BE[578F0000]        <2> 	mov esi, line
  6338 00004D88 E8D3CFFFFF          <2> 	call print
  6339 00004D8D C3                  <2> 	ret
  6340                              <2> 	
  6341                              <1> %include 'source/programs/reboot.asm'
  6342 00004D8E FF2C7265626F6F7400  <2> 	db 255,44,"reboot",0
  6343 00004D97 0F011D[A14D0000]    <2> 		lidt [idtreboot]
  6344 00004D9E CD00                <2> 		int 0
  6345 00004DA0 F4                  <2> 		hlt
  6346                              <2> 	
  6347 00004DA1 0000                <2> 	idtreboot dw 0
  6348 00004DA3 00000000            <2> 			  dd 0
  6349                              <2> 
  6350                              <2> 	coldboot:
  6351 00004DA7 66B84000            <2> 		MOV AX, 0040h
  6352 00004DAB 8EC0                <2> 		MOV ES, AX
  6353 00004DAD 2666C7057200000000- <2> 		MOV WORD [ES:00072h], 0h
  6354 00004DB6 00                  <2>
  6355 00004DB7 EA00000000FFFF      <2> 		JMP 0FFFFh:0000h
  6356 00004DBE CF                  <2> 		IRET
  6357                              <2> 
  6358                              <2> 	warmboot:
  6359 00004DBF 66B84000            <2> 		MOV AX, 0040h
  6360 00004DC3 8EC0                <2> 		MOV ES, AX
  6361 00004DC5 2666C7057200000034- <2> 		MOV WORD [ES:00072h], 01234h
  6362 00004DCE 12                  <2>
  6363 00004DCF EA00000000FFFF      <2> 		JMP 0FFFFh:0000h
  6364 00004DD6 CF                  <2> 		IRET
  6365                              <2> 		
  6366                              <1> %include 'source/programs/reg.asm'
  6367 00004DD7 FF2C72656700        <2> db 255,44,"reg",0
  6368 00004DDD CD03                <2> 	int 3
  6369 00004DDF C3                  <2> 	ret 
  6370                              <1> %ifdef disk.none
  6371                              <1> %else
  6372                              <1> 	%include 'source/programs/show.asm'
  6373 00004DE0 FF2C73686F7700      <2> db 255,44,"show",0
  6374                              <2> showprog:
  6375 00004DE7 8B3D[EE2F0000]      <2> 		mov edi, [currentcommandloc]
  6376 00004DED 81C705000000        <2> 		add edi, 5
  6377 00004DF3 BE00004000          <2> 		mov esi, 0x400000
  6378 00004DF8 803F26              <2> 		cmp byte [edi], '&'
  6379 00004DFB 741B                <2> 		je .nullfile
  6380 00004DFD BE00008000          <2> 		mov esi, 0x800000
  6381 00004E02 E8301C0000          <2> 		call loadfile
  6382 00004E07 81FA94010000        <2> 		cmp edx, 404
  6383 00004E0D 0F8483000000        <2> 		je near filenotfound
  6384 00004E13 BE00008000          <2> 		mov esi, 0x800000
  6385                              <2> .nullfile:
  6386                              <2> %ifdef gui.included
  6387 00004E18 66813E424D          <2> 		cmp word [esi], "BM"
  6388 00004E1D 7410                <2> 		je bmpfound
  6389                              <2> %endif
  6390 00004E1F E83CCFFFFF          <2> 		call print
  6391 00004E24 BE[578F0000]        <2> 		mov esi, line
  6392 00004E29 E832CFFFFF          <2> 		call print
  6393 00004E2E C3                  <2> 		ret
  6394                              <2> %ifdef gui.included
  6395                              <2> bmpfound:
  6396 00004E2F 803D[7C8F0000]00    <2> 		cmp byte [guion], 0
  6397 00004E36 0F8428000000        <2> 		je near noguibmp
  6398 00004E3C BE00008000          <2> 		mov esi, 0x800000
  6399 00004E41 31C9                <2> 		xor ecx, ecx
  6400 00004E43 31D2                <2> 		xor edx, edx
  6401 00004E45 31C0                <2> 		xor eax, eax
  6402 00004E47 31DB                <2> 		xor ebx, ebx
  6403 00004E49 E8CA1D0000          <2> 		call showbmp
  6404 00004E4E 30C0                <2> 		xor al, al
  6405 00004E50 B405                <2> 		mov ah, 5
  6406 00004E52 CD30                <2> 		int 30h
  6407 00004E54 E878240000          <2> 		call guiclear
  6408 00004E59 E813210000          <2> 		call clearmousecursor
  6409 00004E5E E801250000          <2> 		call reloadallgraphics
  6410 00004E63 C3                  <2> 		ret
  6411                              <2> noguibmp:
  6412 00004E64 BE[6F4E0000]        <2> 		mov esi, warnguimsg
  6413 00004E69 E8F2CEFFFF          <2> 		call print
  6414 00004E6E C3                  <2> 		ret
  6415 00004E6F 546869732063616E20- <2> warnguimsg db "This can not be done without the GUI.",10,0
  6416 00004E78 6E6F7420626520646F- <2>
  6417 00004E81 6E6520776974686F75- <2>
  6418 00004E8A 742074686520475549- <2>
  6419 00004E93 2E0A00              <2>
  6420                              <2> %endif
  6421                              <2> 
  6422                              <2> filenotfound:
  6423 00004E96 BE[C94E0000]        <2> 		mov esi, filenf
  6424 00004E9B E8C0CEFFFF          <2> 		call print
  6425 00004EA0 8B35[EE2F0000]      <2> 		mov esi, [currentcommandloc]
  6426                              <2> findfilenotfoundzero:
  6427 00004EA6 8A06                <2> 		mov al, [esi]
  6428 00004EA8 46                  <2> 		inc esi
  6429 00004EA9 3C00                <2> 		cmp al, 0
  6430 00004EAB 7411                <2> 		je nofilenamenotfound
  6431 00004EAD 81FE[5CC20300]      <2> 		cmp esi, buftxtend
  6432 00004EB3 7309                <2> 		jae nofilenamenotfound
  6433 00004EB5 3C20                <2> 		cmp al, " "
  6434 00004EB7 75ED                <2> 		jne findfilenotfoundzero
  6435 00004EB9 E8A2CEFFFF          <2> 		call print
  6436                              <2> nofilenamenotfound:
  6437 00004EBE BE[D44E0000]        <2> 		mov esi, filenf2
  6438 00004EC3 E898CEFFFF          <2> 		call print
  6439 00004EC8 C3                  <2> 		ret
  6440 00004EC9 5468652066696C6520- <2> filenf db "The file ",34,0
  6441 00004ED2 2200                <2>
  6442 00004ED4 2220636F756C64206E- <2> filenf2 db 34," could not be found.",10,0
  6443 00004EDD 6F7420626520666F75- <2>
  6444 00004EE6 6E642E0A00          <2>
  6445                              <1> %endif
  6446                              <1> %include 'source/programs/shush.asm'
  6447 00004EEB FF2C736875736800    <2> db 255,44,"shush",0	;if you add 2 values it will switch size using the first as X in chars and the second as Y in chars
  6448                              <2> shushprog:
  6449                              <2> %ifdef gui.included
  6450 00004EF3 803D[7C8F0000]00    <2> 	cmp byte [guion], 0
  6451 00004EFA 0F84B9000000        <2> 	je near .noswitchsize
  6452 00004F00 8B35[EE2F0000]      <2> 	mov esi, [currentcommandloc]
  6453 00004F06 81C606000000        <2> 	add esi, 6
  6454 00004F0C 56                  <2> 	push esi
  6455 00004F0D 4E                  <2> 	dec esi
  6456                              <2> .findspace:
  6457 00004F0E 46                  <2> 	inc esi
  6458 00004F0F 8A06                <2> 	mov al, [esi]
  6459 00004F11 3C00                <2> 	cmp al, 0
  6460 00004F13 0F84A0000000        <2> 	je near .noswitchsize
  6461 00004F19 3C58                <2> 	cmp al, "X"
  6462 00004F1B 7408                <2> 	je .donefind
  6463 00004F1D 3C78                <2> 	cmp al, "x"
  6464 00004F1F 7404                <2> 	je .donefind
  6465 00004F21 3C20                <2> 	cmp al, " "
  6466 00004F23 75E9                <2> 	jne .findspace
  6467                              <2> .donefind:
  6468 00004F25 30C0                <2> 	xor al, al
  6469 00004F27 8806                <2> 	mov [esi], al
  6470 00004F29 46                  <2> 	inc esi
  6471 00004F2A 89F7                <2> 	mov edi, esi
  6472 00004F2C E890E4FFFF          <2> 	call cnvrttxt
  6473 00004F31 89C8                <2> 	mov eax, ecx
  6474 00004F33 5E                  <2> 	pop esi
  6475 00004F34 50                  <2> 	push eax
  6476 00004F35 89F7                <2> 	mov edi, esi
  6477 00004F37 E885E4FFFF          <2> 	call cnvrttxt
  6478 00004F3C 89CB                <2> 	mov ebx, ecx
  6479 00004F3E 58                  <2> 	pop eax	
  6480 00004F3F 6681FB0000          <2> 	cmp bx, 0
  6481 00004F44 0F846F000000        <2> 	je near .noswitchsize
  6482 00004F4A 663D0000            <2> 	cmp ax, 0
  6483 00004F4E 0F8465000000        <2> 	je near .noswitchsize
  6484 00004F54 66C1E303            <2> 	shl bx, 3
  6485 00004F58 66C1E004            <2> 	shl ax, 4
  6486 00004F5C 663B1D[A7590000]    <2> 	cmp bx, [resolutionx]
  6487 00004F63 7607                <2> 	jbe .nofixx
  6488 00004F65 668B1D[A7590000]    <2> 	mov bx, [resolutionx]
  6489                              <2> .nofixx:
  6490 00004F6C 66051000            <2> 	add ax, 16
  6491 00004F70 663B05[A9590000]    <2> 	cmp ax, [resolutiony]
  6492 00004F77 7606                <2> 	jbe .nofixy
  6493 00004F79 66A1[A9590000]      <2> 	mov ax, [resolutiony]
  6494                              <2> .nofixy:
  6495 00004F7F 662D1000            <2> 	sub ax, 16
  6496 00004F83 6631C9              <2> 	xor cx, cx
  6497 00004F86 6631D2              <2> 	xor dx, dx
  6498 00004F89 66891D[0A770000]    <2> 	mov [termwindow], bx
  6499 00004F90 66A3[0C770000]      <2> 	mov [termwindow + 2], ax	;the previous lines of code make a large terminal window that is 4 characters smaller than the screen
  6500 00004F96 BE[0A770000]        <2> 	mov esi, termwindow
  6501 00004F9B 31DB                <2> 	xor ebx, ebx
  6502 00004F9D 6631C0              <2> 	xor ax, ax
  6503 00004FA0 E8922C0000          <2> 	call showwindow
  6504 00004FA5 E827230000          <2> 	call guiclear
  6505 00004FAA E860CEFFFF          <2> 	call clear
  6506 00004FAF E8B0230000          <2> 	call reloadallgraphics
  6507 00004FB4 E8B4200000          <2> 	call switchmousepos2
  6508                              <2> .noswitchsize:
  6509                              <2> %endif
  6510 00004FB9 BE[C44F0000]        <2> 	mov esi, shushmsg
  6511 00004FBE E89DCDFFFF          <2> 	call print
  6512 00004FC3 C3                  <2> 	ret
  6513 00004FC4 57656C636F6D652074- <2> 	shushmsg db "Welcome to the SollerOS Hardly Unix-Compatible Shell!",10,0
  6514 00004FCD 6F2074686520536F6C- <2>
  6515 00004FD6 6C65724F5320486172- <2>
  6516 00004FDF 646C7920556E69782D- <2>
  6517 00004FE8 436F6D70617469626C- <2>
  6518 00004FF1 65205368656C6C210A- <2>
  6519 00004FFA 00                  <2>
  6520                              <1> %include 'source/programs/system.asm'
  6521 00004FFB FF2C73797374656D00  <2> 	db 255,44,"system",0
  6522 00005004 BE[14510000]        <2> 	mov esi, kernelinfomsg
  6523 00005009 E833CDFFFF          <2> 	call printquiet
  6524 0000500E B9[C6910300]        <2> 	mov ecx, osend
  6525 00005013 E8C7E2FFFF          <2> 	call showdec
  6526 00005018 BE[29510000]        <2> 	mov esi, diskbytemsg
  6527 0000501D E81FCDFFFF          <2> 	call printquiet
  6528 00005022 B9[C6910300]        <2> 	mov ecx, osend
  6529 00005027 81C1[12942D00]      <2> 	add ecx, commandbufend
  6530 0000502D 81E9[D8930300]      <2> 	sub ecx, bssstart	;add the extra buffer space
  6531 00005033 E8A7E2FFFF          <2> 	call showdec
  6532 00005038 BE[40510000]        <2> 	mov esi, membytemsg
  6533 0000503D E8FFCCFFFF          <2> 	call printquiet
  6534 00005042 BE[A3510000]        <2> 	mov esi, endofmemmsg
  6535 00005047 E8F5CCFFFF          <2> 	call printquiet
  6536 0000504C B9[26C83D00]        <2> 	mov ecx, bssend
  6537 00005051 E8BFE1FFFF          <2> 	call showhex
  6538 00005056 BE[59510000]        <2> 	mov esi, systeminfomsg
  6539 0000505B E8E1CCFFFF          <2> 	call printquiet
  6540                              <2> getcpuspeed:
  6541 00005060 B8FE000000          <2> 	mov eax, 0xFE
  6542 00005065 E621                <2> 	out 0x21, al ;mask off all but timer interrupt
  6543 00005067 B020                <2> 	mov al, 0x20
  6544 00005069 E620                <2> 	out 0x20, al
  6545 0000506B F4                  <2> 	hlt
  6546 0000506C 0F31                <2> 	rdtsc
  6547 0000506E 89D6                <2> 	mov esi, edx
  6548 00005070 89C7                <2> 	mov edi, eax
  6549 00005072 31C0                <2> 	xor eax, eax
  6550 00005074 C605[49020000]01    <2> 	mov byte [testingcpuspeed], 1
  6551                              <2> cpuspeedloop:	;wait until next timer interrupt, then inc eax until the next
  6552 0000507B 40                  <2> 	inc eax
  6553 0000507C EBFD                <2> 	jmp cpuspeedloop
  6554                              <2> cpuspeedloopend:
  6555 0000507E 0F31                <2> 	rdtsc
  6556 00005080 29F8                <2> 	sub eax, edi
  6557 00005082 29F2                <2> 	sub edx, esi
  6558 00005084 8915[52020000]      <2> 	mov [cpuclocksperint + 4], edx
  6559 0000508A A3[4E020000]        <2> 	mov [cpuclocksperint], eax
  6560 0000508F 31C0                <2> 	xor eax, eax
  6561 00005091 E621                <2> 	out 0x21, al
  6562 00005093 B020                <2> 	mov al, 0x20
  6563 00005095 E620                <2> 	out 0x20, al
  6564 00005097 31D2                <2> 	xor edx, edx
  6565 00005099 31C0                <2> 	xor eax, eax
  6566 0000509B A1[4A020000]        <2> 	mov eax, [cpuspeedperint]
  6567 000050A0 D1E0                <2> 	shl eax, 1	;the cpu speed loop actually contains 2 commands so multiply the
  6568                              <2> 				;result by 2
  6569 000050A2 8B1D[5C020000]      <2> 	mov ebx, [timeinterval]
  6570 000050A8 C1EB0A              <2> 	shr ebx, 10 ;divide the interval by 1024
  6571 000050AB F7F3                <2> 	div ebx	;quotient in eax, remainder in edx
  6572 000050AD 89C1                <2> 	mov ecx, eax
  6573 000050AF E82BE2FFFF          <2> 	call showdec
  6574 000050B4 BE[87510000]        <2> 	mov esi, cpuspeedmsg
  6575 000050B9 E883CCFFFF          <2> 	call printquiet
  6576 000050BE 31D2                <2> 	xor edx, edx
  6577 000050C0 A1[4E020000]        <2> 	mov eax, [cpuclocksperint]
  6578 000050C5 8B15[52020000]      <2> 	mov edx, [cpuclocksperint + 4]
  6579 000050CB 8B1D[5C020000]      <2> 	mov ebx, [timeinterval]
  6580 000050D1 C1EB0A              <2> 	shr ebx, 10
  6581 000050D4 F7F3                <2> 	div ebx
  6582 000050D6 89C1                <2> 	mov ecx, eax
  6583 000050D8 E802E2FFFF          <2> 	call showdec
  6584 000050DD BE[8D510000]        <2> 	mov esi, cpuclockmsg
  6585 000050E2 E85ACCFFFF          <2> 	call printquiet
  6586 000050E7 8B0D[56020000]      <2> 	mov ecx, [memoryspace]
  6587 000050ED C1E914              <2> 	shr ecx, 20
  6588 000050F0 41                  <2> 	inc ecx	;the reading is one MB behind
  6589 000050F1 E8E9E1FFFF          <2> 	call showdec
  6590 000050F6 BE[92510000]        <2> 	mov esi, memoryspacemsg
  6591 000050FB E860CCFFFF          <2> 	call print
  6592                              <2> %ifdef sound.included
  6593 00005100 803D[87600000]00    <2> 	cmp byte [SoundBlaster], 0
  6594 00005107 740A                <2> 	je .nosb
  6595 00005109 BE[6F510000]        <2> 	mov esi, soundblastermsg
  6596 0000510E E84DCCFFFF          <2> 	call print
  6597                              <2> .nosb:
  6598                              <2> %endif
  6599 00005113 C3                  <2> 	ret
  6600                              <2> 
  6601 00005114 4B65726E656C20496E- <2> kernelinfomsg db "Kernel Information:",10,0
  6602 0000511D 666F726D6174696F6E- <2>
  6603 00005126 3A0A00              <2>
  6604 00005129 427974657320446973- <2> diskbytemsg db "Bytes Disk Space Used",10,0
  6605 00005132 6B2053706163652055- <2>
  6606 0000513B 7365640A00          <2>
  6607 00005140 4279746573204D656D- <2> membytemsg db "Bytes Memory Space Used",10,0
  6608 00005149 6F7279205370616365- <2>
  6609 00005152 20557365640A00      <2>
  6610 00005159 0A53797374656D2049- <2> systeminfomsg db 10,"System Information:",10,0
  6611 00005162 6E666F726D6174696F- <2>
  6612 0000516B 6E3A0A00            <2>
  6613                              <2> %ifdef sound.included
  6614 0000516F 536F756E64626C6173- <2> 	soundblastermsg db "Soundblaster Detected.",10,0
  6615 00005178 746572204465746563- <2>
  6616 00005181 7465642E0A00        <2>
  6617                              <2> %endif
  6618 00005187 4D4950530A00        <2> cpuspeedmsg db "MIPS",10,0
  6619 0000518D 4D487A0A00          <2> cpuclockmsg db "MHz",10,0
  6620 00005192 4D42204D656D6F7279- <2> memoryspacemsg db "MB Memory Space",10,0
  6621 0000519B 2053706163650A00    <2>
  6622 000051A3 456E64206F66204D65- <2> endofmemmsg: db "End of Memory Space: 0x",0
  6623 000051AC 6D6F72792053706163- <2>
  6624 000051B5 653A20307800        <2>
  6625                              <1> %include 'source/programs/time.asm'
  6626 000051BB 082E30303030303030- <2> timenscache db 8,".000000000"
  6627 000051C4 3030                <2>
  6628 000051C6 200A00              <2> timenscacheend: db " ",10,0
  6629 000051C9 00                  <2> istimeset db 0
  6630 000051CA 456E74657220746865- <2> settimemsg db "Enter the current UNIX time:",10,0
  6631 000051D3 2063757272656E7420- <2>
  6632 000051DC 554E49582074696D65- <2>
  6633 000051E5 3A0A00              <2>
  6634 000051E8 00<rept>            <2> timeinputbuffer times 12 db 0
  6635 000051F4 00                  <2> timeinputbend: db 0
  6636                              <2> 
  6637 000051F5 FF2C74696D6500      <2> db 255,44,"time",0
  6638 000051FC 803D[C9510000]00    <2> 	cmp byte [istimeset], 0
  6639 00005203 753A                <2> 	jne timeisset
  6640 00005205 BE[CA510000]        <2> 	mov esi, settimemsg
  6641 0000520A E851CBFFFF          <2> 	call print
  6642 0000520F BE[E8510000]        <2> 	mov esi, timeinputbuffer
  6643 00005214 BF[F4510000]        <2> 	mov edi, timeinputbend
  6644 00005219 E86FCCFFFF          <2> 	call readline
  6645 0000521E BE[E8510000]        <2> 	mov esi, timeinputbuffer
  6646 00005223 31FF                <2> 	xor edi, edi
  6647 00005225 E897E1FFFF          <2> 	call cnvrttxt
  6648 0000522A 890D[60020000]      <2> 	mov [timeseconds], ecx
  6649 00005230 31C9                <2> 	xor ecx, ecx
  6650 00005232 890D[64020000]      <2> 	mov [timenanoseconds], ecx
  6651 00005238 C605[C9510000]01    <2> 	mov byte [istimeset], 1
  6652                              <2> timeisset:
  6653 0000523F 8B0D[60020000]      <2> 	mov ecx, [timeseconds]
  6654 00005245 E895E0FFFF          <2> 	call showdec
  6655                              <2> 	
  6656 0000524A 8B0D[64020000]      <2> 	mov ecx, [timenanoseconds]
  6657 00005250 BE[BB510000]        <2> 	mov esi, timenscache
  6658 00005255 C7460230303030      <2> 	mov dword [esi+ 2], "0000"
  6659 0000525C C7460630303030      <2> 	mov dword [esi + 6], "0000"
  6660 00005263 C6460A30            <2> 	mov byte [esi + 10], "0"
  6661 00005267 BE[C6510000]        <2> 	mov esi, timenscacheend
  6662 0000526C E851DEFFFF          <2> 	call convert
  6663 00005271 BE[BB510000]        <2> 	mov esi, timenscache
  6664 00005276 E8C6CAFFFF          <2> 	call printquiet
  6665                              <2> 	
  6666 0000527B E82D000000          <2> 	call time
  6667 00005280 BE[79540000]        <2> 	mov esi, timeshow
  6668 00005285 E8B7CAFFFF          <2> 	call printquiet
  6669 0000528A BE[578F0000]        <2> 	mov esi, line
  6670 0000528F E8ADCAFFFF          <2> 	call printquiet
  6671 00005294 BE[82540000]        <2> 	mov esi, dateshow
  6672 00005299 E8A3CAFFFF          <2> 	call printquiet
  6673 0000529E BE[578F0000]        <2> 	mov esi, line
  6674 000052A3 E899CAFFFF          <2> 	call printquiet
  6675 000052A8 E9BC000000          <2> 	jmp findday
  6676                              <2> time:
  6677 000052AD E84F010000          <2> 	call tstackput1
  6678 000052B2 B00A                <2> 	mov al,10			;Get RTC register A
  6679 000052B4 E879010000          <2> 	call tget1
  6680 000052B9 A880                <2> 	test al,0x80			;Is update in progress?
  6681 000052BB 75F0                <2> 	jne time				; yes, wait
  6682                              <2> 
  6683 000052BD B000                <2> 	mov al,0			;Get seconds (00 to 59)
  6684 000052BF E86E010000          <2> 	call tget1
  6685 000052C4 A2[70540000]        <2> 	mov [RTCtimeSecond],al
  6686                              <2> 
  6687 000052C9 B002                <2> 	mov al,0x02			;Get minutes (00 to 59)
  6688 000052CB E862010000          <2> 	call tget1
  6689 000052D0 A2[71540000]        <2> 	mov [RTCtimeMinute],al
  6690                              <2> 
  6691 000052D5 B004                <2> 	mov al,0x04			;Get hours (see notes)
  6692 000052D7 E856010000          <2> 	call tget1
  6693 000052DC A2[72540000]        <2> 	mov [RTCtimeHour],al
  6694                              <2> 
  6695 000052E1 B007                <2> 	mov al,0x07			;Get day of month (01 to 31)
  6696 000052E3 E84A010000          <2> 	call tget1
  6697 000052E8 A2[73540000]        <2> 	mov [RTCtimeDay],al
  6698                              <2> 
  6699 000052ED B008                <2> 	mov al,0x08			;Get month (01 to 12)
  6700 000052EF E83E010000          <2> 	call tget1
  6701 000052F4 A2[74540000]        <2> 	mov [RTCtimeMonth],al
  6702                              <2> 
  6703 000052F9 B009                <2> 	mov al,0x09			;Get year (00 to 99)
  6704 000052FB E832010000          <2> 	call tget1
  6705 00005300 A2[75540000]        <2> 	mov [RTCtimeYear],al
  6706                              <2> 	
  6707 00005305 BE[79540000]        <2> 	mov esi, timeshow
  6708 0000530A 8A2D[72540000]      <2> 	mov ch, [RTCtimeHour]
  6709 00005310 E828010000          <2> 	call tput1
  6710 00005315 8A2D[71540000]      <2> 	mov ch, [RTCtimeMinute]
  6711 0000531B E81D010000          <2> 	call tput1
  6712 00005320 8A2D[70540000]      <2> 	mov ch, [RTCtimeSecond]
  6713 00005326 E812010000          <2> 	call tput1
  6714 0000532B BE[82540000]        <2> 	mov esi, dateshow
  6715 00005330 8A2D[74540000]      <2> 	mov ch, [RTCtimeMonth]
  6716 00005336 E802010000          <2> 	call tput1
  6717 0000533B 8A2D[73540000]      <2> 	mov ch, [RTCtimeDay]
  6718 00005341 E8F7000000          <2> 	call tput1
  6719 00005346 B520                <2> 	mov ch, 0x20
  6720 00005348 E8F0000000          <2> 	call tput1
  6721 0000534D 4E                  <2> 	dec esi
  6722 0000534E 8A2D[75540000]      <2> 	mov ch, [RTCtimeYear]
  6723 00005354 E8E4000000          <2> 	call tput1
  6724 00005359 E8BD000000          <2> 	call tstackget1
  6725 0000535E C3                  <2> 	ret
  6726 0000535F BE[79540000]        <2> 	mov esi, timeshow
  6727 00005364 E8F7C9FFFF          <2> 	call print
  6728                              <2> ;;get day of week
  6729                              <2> ;;add these:
  6730                              <2> ;;century value
  6731                              <2> ;;last 2 digits of year
  6732                              <2> ;;last 2 digits of year right shifted twice
  6733                              <2> ;;month table value
  6734                              <2> ;;day of the month
  6735                              <2> ;;divide these by 7
  6736                              <2> ;;the remainder is the day
  6737                              <2> findday:
  6738 00005369 31C0                <2> 	xor eax, eax
  6739                              <2> ;;first convert the values from BCD to hex
  6740 0000536B A0[73540000]        <2> 	mov al, [RTCtimeDay]
  6741 00005370 E873000000          <2> 	call converttohex
  6742 00005375 8825[76540000]      <2> 	mov [dayhex], ah
  6743 0000537B A0[74540000]        <2> 	mov al, [RTCtimeMonth]
  6744 00005380 E863000000          <2> 	call converttohex
  6745 00005385 8825[77540000]      <2> 	mov [monthhex], ah
  6746 0000538B A0[75540000]        <2> 	mov al, [RTCtimeYear]
  6747 00005390 E853000000          <2> 	call converttohex
  6748 00005395 8825[78540000]      <2> 	mov [yearhex], ah
  6749 0000539B 31C0                <2> 	xor eax, eax
  6750 0000539D A0[78540000]        <2> 	mov al, [yearhex]
  6751 000053A2 C0E802              <2> 	shr al, 2
  6752 000053A5 0205[78540000]      <2> 	add al, [yearhex]
  6753 000053AB 0506000000          <2> 	add eax, 6
  6754 000053B0 31DB                <2> 	xor ebx, ebx
  6755 000053B2 8A1D[77540000]      <2> 	mov bl, [monthhex]
  6756 000053B8 FECB                <2> 	dec bl
  6757 000053BA 81C3[97540000]      <2> 	add ebx, month
  6758 000053C0 31C9                <2> 	xor ecx, ecx
  6759 000053C2 8A0B                <2> 	mov cl, [ebx]
  6760 000053C4 01C8                <2> 	add eax, ecx
  6761 000053C6 8A0D[76540000]      <2> 	mov cl, [dayhex]
  6762 000053CC 01C8                <2> 	add eax, ecx
  6763 000053CE 66BB0700            <2> 	mov bx, 7
  6764 000053D2 31D2                <2> 	xor edx, edx
  6765 000053D4 66F7F3              <2> 	div bx
  6766 000053D7 C1E202              <2> 	shl edx, 2
  6767 000053DA 81C2[A3540000]      <2> 	add edx, day
  6768 000053E0 8B32                <2> 	mov esi, [edx]
  6769 000053E2 E879C9FFFF          <2> 	call print
  6770 000053E7 C3                  <2> 	ret
  6771                              <2> 	
  6772                              <2> converttohex:
  6773 000053E8 88C4                <2> 	mov ah, al
  6774 000053EA C0E804              <2> 	shr al, 4
  6775 000053ED C0E404              <2> 	shl ah, 4
  6776 000053F0 C0EC04              <2> 	shr ah, 4
  6777 000053F3 3C00                <2> 	cmp al, 0
  6778 000053F5 7409                <2> 	je noconverttohex
  6779                              <2> converttohexlp:
  6780 000053F7 80C40A              <2> 	add ah, 10
  6781 000053FA FEC8                <2> 	dec al
  6782 000053FC 3C00                <2> 	cmp al, 0
  6783 000053FE 75F7                <2> 	jne converttohexlp
  6784                              <2> noconverttohex:
  6785 00005400 C3                  <2> 	ret
  6786                              <2> 	
  6787                              <2> tstackput1:
  6788 00005401 8935[6C540000]      <2> 	mov [tstack + 20], esi
  6789 00005407 BE[58540000]        <2> 	mov esi, tstack
  6790 0000540C 8906                <2> 	mov [esi], eax
  6791 0000540E 895E04              <2> 	mov [esi + 4], ebx
  6792 00005411 894E08              <2> 	mov [esi + 8], ecx
  6793 00005414 89560C              <2> 	mov [esi + 12], edx
  6794 00005417 897E10              <2> 	mov [esi + 16], edi
  6795 0000541A C3                  <2> 	ret
  6796                              <2> 	
  6797                              <2> tstackget1:
  6798 0000541B BE[58540000]        <2> 	mov esi, tstack
  6799 00005420 8B06                <2> 	mov eax, [esi]
  6800 00005422 8B5E04              <2> 	mov ebx, [esi + 4]
  6801 00005425 8B4E08              <2> 	mov ecx, [esi + 8]
  6802 00005428 8B560C              <2> 	mov edx, [esi + 12]
  6803 0000542B 8B7E10              <2> 	mov edi, [esi + 16]
  6804 0000542E 8B7614              <2> 	mov esi, [esi + 20]
  6805 00005431 C3                  <2> 	ret
  6806                              <2> 	
  6807                              <2> tget1:
  6808 00005432 66BA7000            <2> 	mov dx, 0x70
  6809 00005436 EE                  <2> 	out dx, al
  6810 00005437 6642                <2> 	inc dx
  6811 00005439 EC                  <2> 	in al, dx
  6812 0000543A 664A                <2> 	dec dx
  6813 0000543C C3                  <2> 	ret
  6814                              <2> 	
  6815                              <2> tput1:
  6816 0000543D 66C1E904            <2> 	shr cx, 4
  6817 00005441 B030                <2> 	mov al, 48
  6818 00005443 00E8                <2> 	add al, ch
  6819 00005445 8806                <2> 	mov [esi], al
  6820 00005447 46                  <2> 	inc esi
  6821 00005448 B030                <2> 	mov al, 48
  6822 0000544A C0E904              <2> 	shr cl, 4
  6823 0000544D 00C8                <2> 	add al, cl
  6824 0000544F 8806                <2> 	mov [esi], al
  6825 00005451 81C602000000        <2> 	add esi, 2
  6826 00005457 C3                  <2> 	ret
  6827                              <2> 		
  6828 00005458 000000000000000000- <2> 	tstack dd 0,0,0,0,0,0
  6829 00005461 000000000000000000- <2>
  6830 0000546A 000000000000        <2>
  6831 00005470 00                  <2> 	RTCtimeSecond db 0
  6832 00005471 00                  <2> 	RTCtimeMinute db 0
  6833 00005472 00                  <2> 	RTCtimeHour db 0
  6834 00005473 00                  <2> 	RTCtimeDay db 0
  6835 00005474 00                  <2> 	RTCtimeMonth db 0
  6836 00005475 00                  <2> 	RTCtimeYear db 0
  6837 00005476 00                  <2> 	dayhex db 0
  6838 00005477 00                  <2> 	monthhex db 0
  6839 00005478 00                  <2> 	yearhex db 0
  6840 00005479 30303A30303A303000  <2> 	timeshow db "00:00:00",0
  6841 00005482 30302D30302D303030- <2> 	dateshow db "00-00-0000 ",0
  6842 0000548B 302000              <2>
  6843                              <2> 	oldcentury:	;;from 1700 to 1900
  6844 0000548E 040200              <2> 	db 4,2,0
  6845                              <2> 	century:	;;from 2000 to 2500
  6846 00005491 060402000604        <2> 	db 6,4,2,0,6,4
  6847                              <2> 	month:
  6848 00005497 000303060104060205- <2> 	db 0,3,3,6,1,4,6,2,5,0,3,5
  6849 000054A0 000305              <2>
  6850                              <2> 	day:
  6851 000054A3 [BF540000]          <2> 	dd sunday
  6852 000054A7 [C7540000]          <2> 	dd monday
  6853 000054AB [CF540000]          <2> 	dd tuesday
  6854 000054AF [D8540000]          <2> 	dd wednesday
  6855 000054B3 [E3540000]          <2> 	dd thursday
  6856 000054B7 [ED540000]          <2> 	dd friday
  6857 000054BB [F5540000]          <2> 	dd saturday
  6858                              <2> sunday:
  6859 000054BF 53756E6461790A00    <2> 	db "Sunday",10,0
  6860                              <2> monday:
  6861 000054C7 4D6F6E6461790A00    <2> 	db "Monday",10,0
  6862                              <2> tuesday:
  6863 000054CF 547565736461790A00  <2> 	db "Tuesday",10,0
  6864                              <2> wednesday:
  6865 000054D8 5765646E6573646179- <2> 	db "Wednesday",10,0
  6866 000054E1 0A00                <2>
  6867                              <2> thursday:
  6868 000054E3 54687572736461790A- <2> 	db "Thursday",10,0
  6869 000054EC 00                  <2>
  6870                              <2> friday:
  6871 000054ED 4672696461790A00    <2> 	db "Friday",10,0
  6872                              <2> saturday:
  6873 000054F5 53617475726461790A- <2> 	db "Saturday",10,0
  6874 000054FE 00                  <2>
  6875                              <1> %include 'source/programs/turnoff.asm'
  6876 000054FF FF2C7475726E6F6666- <2> 	db 255,44,"turnoff",0
  6877 00005508 00                  <2>
  6878                              <2> 	turnoff:
  6879 00005509 66BB[2455]          <2> 			mov bx, shutdown
  6880 0000550D 66891D[030D0000]    <2> 			mov [realmodeptr], bx
  6881 00005514 BB[4E550000]        <2> 			mov ebx, halt
  6882 00005519 891D[FF0C0000]      <2> 			mov [realmodereturn], ebx
  6883 0000551F E9C4B6FFFF          <2> 			jmp realmode
  6884                              <2> 
  6885                              <2> [BITS 16]
  6886                              <2> 		shutdown:
  6887 00005524 B453                <2> 			mov ah, 0x53
  6888 00005526 B004                <2> 			mov al, 4
  6889 00005528 31DB                <2> 			xor bx, bx
  6890 0000552A CD15                <2> 			int 0x15
  6891                              <2> 			
  6892 0000552C B453                <2> 			mov ah, 0x53
  6893 0000552E B001                <2> 			mov al, 1
  6894 00005530 31DB                <2> 			xor bx, bx
  6895 00005532 CD15                <2> 			int 0x15
  6896                              <2> 			
  6897 00005534 B453                <2> 			mov ah, 0x53
  6898 00005536 B008                <2> 			mov al, 8
  6899 00005538 BB0100              <2> 			mov bx, 1
  6900 0000553B B90100              <2> 			mov cx, 1
  6901 0000553E CD15                <2> 			int 0x15
  6902                              <2> 			
  6903 00005540 B453                <2> 			mov ah, 0x53
  6904 00005542 B007                <2> 			mov al, 7
  6905 00005544 BB0100              <2> 			mov bx, 1
  6906 00005547 B90300              <2> 			mov cx, 3
  6907 0000554A CD15                <2> 			int 0x15
  6908 0000554C EBFE                <2> 			jmp $
  6909                              <2> 			[BITS 32]
  6910 0000554E EBFE                <2> halt: jmp $
  6911                              <1> %include 'source/programs/wait.asm'
  6912 00005550 FF2C7761697400      <2> db 255,44,"wait",0
  6913                              <2> waitkey:
  6914 00005557 E8FFCDFFFF          <2> 		call getchar
  6915 0000555C C3                  <2> 		ret
  6916                              <1> %include 'source/programs/while.asm'
  6917 0000555D FF2C7768696C6500    <2> db 255,44,"while",0
  6918 00005565 30C0                <2> whilecmd:  xor al, al
  6919 00005567 3805[56AA0300]      <2> 	cmp [BATCHISON], al
  6920 0000556D 0F8479E5FFFF        <2> 	je near notbatch
  6921 00005573 8B35[52AA0300]      <2> 	mov esi, [BATCHPOS]
  6922 00005579 81EE02000000        <2> 	sub esi, 2
  6923 0000557F 4E                  <2> whilefnd: dec esi
  6924 00005580 8A06                <2> 	mov al, [esi]
  6925 00005582 3C0A                <2> 	cmp al, 10
  6926 00005584 0F840A000000        <2> 	je near whilefnd2
  6927 0000558A 3C00                <2> 	cmp al, 0
  6928 0000558C 0F8402000000        <2> 	je near whilefnd2
  6929 00005592 EBEB                <2> 	jmp whilefnd
  6930                              <2> whilefnd2:
  6931 00005594 46                  <2> 	inc esi
  6932 00005595 8935[58AA0300]      <2> 	mov [LOOPPOS], esi
  6933 0000559B C605[57AA0300]01    <2> 	mov BYTE [LOOPON], 1
  6934 000055A2 BE[5CBE0300]        <2> 	mov esi, buftxt
  6935 000055A7 BB[5CBE0300]        <2> 	mov ebx, buftxt
  6936 000055AC 81C306000000        <2> 	add ebx, 6
  6937 000055B2 E902F1FFFF          <2> 	jmp chkeqsn
  6938                              <1> progend:		;programs end here	
  6939                              <1> batchprogend:
  6940                                  	%include "source/hardware.asm"
  6941                              <1> %ifdef gui.included
  6942                              <1> 	%include "source/drivers/video/vesa.asm"
  6943                              <2> [BITS 16]
  6944                              <2> guiswitch:
  6945 000055B7 81F90000            <2> 	cmp cx, 0
  6946 000055BB 750B                <2> 	jne guiswitchdefnum
  6947 000055BD B81200              <2> 	mov ax, 12h
  6948 000055C0 31DB                <2> 	xor bx, bx
  6949 000055C2 CD10                <2> 	int 10h
  6950 000055C4 E85100              <2> 	call guiloadagain
  6951                              <2> guiswitchnocando:
  6952 000055C7 C3                  <2> 	ret	;return without switching as mode number is bad
  6953                              <2> guiswitchdefnum:	;switch to a defined mode number
  6954 000055C8 B8004F              <2> 	mov ax, 0x4F00
  6955 000055CB BF[9557]            <2> 	mov di, VBEMODEBLOCK
  6956 000055CE CD10                <2> 	int 10h
  6957 000055D0 BE[B757]            <2> 	mov si, reserved
  6958 000055D3 81EE0200            <2> 	sub si, 2
  6959                              <2> .loop:
  6960 000055D7 81C60200            <2> 	add si, 2
  6961 000055DB 81FE[9558]          <2> 	cmp si, oemdata
  6962 000055DF 74E6                <2> 	je guiswitchnocando
  6963 000055E1 813CFFFF            <2> 	cmp word [si], 0xFFFF
  6964 000055E5 74E0                <2> 	je guiswitchnocando
  6965 000055E7 390C                <2> 	cmp [si], cx
  6966 000055E9 75EC                <2> 	jne .loop
  6967 000055EB 8936[EF56]          <2> 	mov [videomodecache], si
  6968 000055EF 81C90040            <2> 	or cx, 0x4000	;make sure linear frame buffer is selected
  6969 000055F3 B8014F              <2> 	mov ax, 0x4F01
  6970 000055F6 BF[9559]            <2> 	mov di, VBEMODEINFOBLOCK
  6971 000055F9 890E[ED56]          <2> 	mov [vesamode], cx
  6972 000055FD CD10                <2> 	int 10h
  6973 000055FF E9CB00              <2> 	jmp selectedvesa
  6974                              <2> guiload:
  6975 00005602 BE[6D57]            <2> 	mov si, bootmsg
  6976 00005605 E872AA              <2> 	call printrm
  6977 00005608 31C0                <2> 	xor ax, ax
  6978 0000560A CD16                <2> 	int 16h
  6979 0000560C 3C79                <2> 	cmp al, "y"
  6980 0000560E 0F8522AA            <2> 	jne near vgaset
  6981 00005612 BE[568F]            <2> 	mov si, crlf
  6982 00005615 E862AA              <2> 	call printrm
  6983                              <2> guiloadagain:
  6984 00005618 B8004F              <2> 	mov ax, 04F00h
  6985 0000561B BF[9557]            <2> 	mov di, VBEMODEBLOCK
  6986 0000561E CD10                <2> 	int 10h
  6987 00005620 BE[B757]            <2> 	mov si, reserved
  6988 00005623 81EE0200            <2> 	sub si, 2
  6989                              <2> findvideomodes:
  6990 00005627 81C60200            <2> 	add si, 2
  6991 0000562B 8B0C                <2> 	mov cx, [si]
  6992 0000562D 81F9FFFF            <2> 	cmp cx, 0xFFFF
  6993 00005631 0F840A00            <2> 	je near nextvmode
  6994 00005635 81FE[9558]          <2> 	cmp si, oemdata
  6995 00005639 0F83F7A9            <2> 	jae near vgaset	;;kill if no valid list is found
  6996 0000563D EBE8                <2> 	jmp findvideomodes 	
  6997                              <2> ;;debug,shows vmodes available
  6998                              <2> nextvmode:
  6999 0000563F 81EE0200            <2> 	sub si, 2
  7000 00005643 81FE[B757]          <2> 	cmp si, reserved
  7001 00005647 0F82CDFF            <2> 	jb near guiloadagain
  7002 0000564B 8B0C                <2> 	mov cx, [si]
  7003 0000564D 81F9FFFF            <2> 	cmp cx, 0xFFFF
  7004 00005651 0F84EAFF            <2> 	je near nextvmode
  7005 00005655 81C90040            <2> 	or cx, 0x4000 		;;Linear Frame Buffer
  7006 00005659 B8014F              <2> 	mov ax, 04F01h
  7007 0000565C BF[9559]            <2> 	mov di, VBEMODEINFOBLOCK
  7008 0000565F 890E[ED56]          <2> 	mov [vesamode], cx
  7009 00005663 CD10                <2> 	int 10h
  7010 00005665 A0[AE59]            <2> 	mov al, [bitsperpixel]
  7011 00005668 3C10                <2> 	cmp al, 16
  7012 0000566A 75D3                <2> 	jne nextvmode
  7013 0000566C 8936[EF56]          <2> 	mov [videomodecache], si
  7014 00005670 84E4                <2> 	test ah, ah
  7015 00005672 0F842200            <2> 	jz near setvesamode
  7016 00005676 EBC7                <2> 	jmp nextvmode
  7017 00005678 0A0D49732074686973- <2> isthisvideook db 10,13,"Is this video mode OK?(y/n)",13,10,0
  7018 00005681 20766964656F206D6F- <2>
  7019 0000568A 6465204F4B3F28792F- <2>
  7020 00005693 6E290D0A00          <2>
  7021                              <2> setvesamode:
  7022 00005698 8B0E[A759]          <2> 	mov cx, [resolutionx]
  7023 0000569C E85900              <2> 	call decshow
  7024 0000569F B078                <2> 	mov al, "x"
  7025 000056A1 E8C100              <2> 	call char
  7026 000056A4 8B0E[A959]          <2> 	mov cx, [resolutiony]
  7027 000056A8 E84D00              <2> 	call decshow
  7028 000056AB B040                <2> 	mov al, "@"
  7029 000056AD E8B500              <2> 	call char
  7030 000056B0 31C9                <2> 	xor cx, cx
  7031 000056B2 8A0E[AE59]          <2> 	mov cl, [bitsperpixel]
  7032 000056B6 E83F00              <2> 	call decshow
  7033 000056B9 BE[7856]            <2> 	mov si, isthisvideook
  7034 000056BC E8BBA9              <2> 	call printrm
  7035 000056BF 31C0                <2> 	xor ax, ax
  7036 000056C1 CD16                <2> 	int 16h
  7037 000056C3 8B36[EF56]          <2> 	mov si, [videomodecache]
  7038 000056C7 3C79                <2> 	cmp al, "y"
  7039 000056C9 0F8572FF            <2> 	jne near nextvmode
  7040                              <2> selectedvesa:
  7041 000056CD 8B16[A759]          <2> 	mov dx, [resolutionx]
  7042 000056D1 01D2                <2> 	add dx, dx
  7043 000056D3 8916[955A]          <2> 	mov [resolutionx2], dx
  7044 000056D7 31D2                <2> 	xor dx, dx
  7045 000056D9 31C9                <2> 	xor cx, cx
  7046 000056DB B8024F              <2> 	mov ax, 04F02h
  7047 000056DE 8B1E[ED56]          <2> 	mov bx, [vesamode]
  7048 000056E2 CD10                <2> 	int 10h		;;enter VESA mode
  7049 000056E4 C606[7C8F]01        <2> 	mov byte [guion], 1
  7050 000056E9 E858A9              <2> 	call getmemorysize;get the memory map after the video is initialized
  7051 000056EC C3                  <2> 	ret
  7052                              <2> 	
  7053 000056ED 0000                <2> vesamode dw 0
  7054 000056EF 0000                <2> videomodecache dw 0
  7055                              <2> 
  7056 000056F1 0000000000          <2> dcnm db 0,0,0,0,0
  7057 000056F6 0000                <2> dcnmend db 0,0
  7058                              <2> 
  7059                              <2> 
  7060                              <2> decshow:
  7061 000056F8 BE[F156]            <2> 	mov si, dcnm
  7062                              <2> decclear:
  7063 000056FB B030                <2> 	mov al, "0"
  7064 000056FD 8804                <2> 	mov [si], al
  7065 000056FF 46                  <2> 	inc si
  7066 00005700 81FE[F656]          <2> 	cmp si, dcnmend
  7067 00005704 76F5                <2> 	jbe decclear
  7068 00005706 4E                  <2> 	dec si
  7069 00005707 E81500              <2> 	call convertrm
  7070 0000570A BE[F156]            <2> 	mov si, dcnm
  7071                              <2> dectst:
  7072 0000570D 8A04                <2> 	mov al, [si]
  7073 0000570F 46                  <2> 	inc si
  7074 00005710 81FE[F656]          <2> 	cmp si, dcnmend
  7075 00005714 7704                <2> 	ja dectstend
  7076 00005716 3C30                <2> 	cmp al, "0"
  7077 00005718 76F3                <2> 	jbe dectst
  7078                              <2> dectstend:
  7079 0000571A 4E                  <2> 	dec si
  7080 0000571B E85CA9              <2> 	call printrm
  7081 0000571E C3                  <2> 	ret
  7082                              <2> 	
  7083                              <2> 	
  7084                              <2> convertrm:
  7085 0000571F 4E                  <2> 	dec si
  7086 00005720 89F3                <2> 	mov bx, si		;place to convert into must be in si, number to convert must be in cx
  7087                              <2> cnvrtrm:
  7088 00005722 89DE                <2> 	mov si, bx
  7089 00005724 81EE0300            <2> 	sub si, 3
  7090 00005728 46                  <2> ten3rm:	inc si
  7091 00005729 81F9E803            <2> 	cmp cx, 1000
  7092 0000572D 7208                <2> 	jb ten2rm
  7093 0000572F 81E9E803            <2> 	sub cx, 1000
  7094 00005733 FE04                <2> 	inc byte [si]
  7095 00005735 EBEB                <2> 	jmp cnvrtrm
  7096 00005737 46                  <2> ten2rm:	inc si
  7097 00005738 81F96400            <2> 	cmp cx, 100
  7098 0000573C 7208                <2> 	jb ten1rm
  7099 0000573E 81E96400            <2> 	sub cx, 100
  7100 00005742 FE04                <2> 	inc byte [si]
  7101 00005744 EBDC                <2> 	jmp cnvrtrm
  7102 00005746 46                  <2> ten1rm:	inc si
  7103 00005747 81F90A00            <2> 	cmp cx, 10
  7104 0000574B 7208                <2> 	jb ten0rm
  7105 0000574D 81E90A00            <2> 	sub cx, 10
  7106 00005751 FE04                <2> 	inc byte [si]
  7107 00005753 EBCD                <2> 	jmp cnvrtrm
  7108 00005755 46                  <2> ten0rm:	inc si
  7109 00005756 81F90100            <2> 	cmp cx, 1
  7110 0000575A 7208                <2> 	jb tendnrm
  7111 0000575C 81E90100            <2> 	sub cx, 1
  7112 00005760 FE04                <2> 	inc byte [si]
  7113 00005762 EBBE                <2> 	jmp cnvrtrm
  7114                              <2> tendnrm:
  7115 00005764 C3                  <2> 	ret
  7116                              <2> 
  7117                              <2>     char: 		    ;char must be in al
  7118 00005765 BB0700              <2>        mov bx, 07
  7119 00005768 B40E                <2> 	   mov ah, 0Eh
  7120 0000576A CD10                <2> 	   int 10h
  7121 0000576C C3                  <2> 	   ret
  7122                              <2> 
  7123 0000576D 426F6F7420696E746F- <2> bootmsg:	db "Boot into the GUI?(y/n)",0
  7124 00005776 20746865204755493F- <2>
  7125 0000577F 28792F6E2900        <2>
  7126                              <2> 
  7127                              <2> 
  7128                              <2> mcursor:
  7129 00005785 01                  <2> 	db	00000001b
  7130 00005786 81                  <2> 	db	10000001b
  7131 00005787 C1                  <2> 	db	11000001b
  7132 00005788 E1                  <2> 	db	11100001b
  7133 00005789 F1                  <2> 	db	11110001b
  7134 0000578A F9                  <2> 	db	11111001b
  7135 0000578B FD                  <2> 	db	11111101b
  7136 0000578C FF                  <2> 	db	11111111b
  7137 0000578D F9                  <2> 	db	11111001b
  7138 0000578E B9                  <2> 	db	10111001b
  7139 0000578F 39                  <2> 	db	00111001b
  7140 00005790 1C                  <2> 	db	00011100b
  7141 00005791 1C                  <2> 	db	00011100b
  7142 00005792 0E                  <2> 	db	00001110b
  7143 00005793 0E                  <2> 	db	00001110b
  7144 00005794 0C                  <2> 	db	00001100b
  7145                              <2> mcursorend:
  7146                              <2> 
  7147                              <2> 
  7148                              <2> VBEMODEBLOCK:
  7149 00005795 00<rept>            <2> vbesignature 		times  4 db 0 	;VBE Signature
  7150 00005799 00<rept>            <2> vbeversion  		times  2 db 0	;VBE Version
  7151 0000579B 00<rept>            <2> oemstringptr  		times  4 db 0	;Pointer to OEM String
  7152 0000579F 00<rept>            <2> capabilities 		times  4 db 0	;Capabilities of graphics cont.
  7153 000057A3 00<rept>            <2> videomodeptr 		times  4 db 0	;Pointer to Video Mode List
  7154 000057A7 00<rept>            <2> totalmemory   		times  2 db 0	;number of 64Kb memory blocks
  7155 000057A9 00<rept>            <2> oemsoftwarerev  	times  2 db 0	;VBE implementation Software revision
  7156 000057AB 00<rept>            <2> oemvendornameptr 	times  4 db 0	;Pointer to Vendor Name String
  7157 000057AF 00<rept>            <2> oemproductnameptr 	times  4 db 0	;Pointer to Product Name String
  7158 000057B3 00<rept>            <2> oemproductrevptr 	times  4 db 0	;Pointer to Product Revision String
  7159 000057B7 00<rept>            <2> reserved			times  222 db 0	;Reserved for VBE implementation scratch area
  7160 00005895 00<rept>            <2> oemdata 			times  256 db 0	;Data Area for OEM Strings
  7161                              <2> 
  7162                              <2> VBEMODEINFOBLOCK:
  7163                              <2> ;Mandatory information for all VBE revision
  7164 00005995 00<rept>            <2> modeattributes   	times  2 db 0	;Mode attributes
  7165 00005997 00                  <2> winaattributes   	times  1 db 0	;Window A attributes
  7166 00005998 00                  <2> winbattributes   	times  1 db 0	;Window B attributes
  7167 00005999 00<rept>            <2> wingranularity   	times  2 db 0	;Window granularity
  7168 0000599B 00<rept>            <2> winsize          	times  2 db 0	;Window size
  7169 0000599D 00<rept>            <2> winasegment      	times  2 db 0	;Window A start segment
  7170 0000599F 00<rept>            <2> winbsegment      	times  2 db 0	;Window B start segment
  7171 000059A1 00<rept>            <2> winfuncptr       	times  4 db 0	;pointer to window function
  7172 000059A5 00<rept>            <2> bytesperscanline 	times  2 db 0	;Bytes per scan line
  7173                              <2> 
  7174                              <2> ;Mandatory information for VBE 1.2 and above
  7175 000059A7 00<rept>            <2> resolutionx     	times  2 db 0	;Horizontal resolution in pixel or chars
  7176 000059A9 00<rept>            <2> resolutiony	    	times  2 db 0	;Vertical resolution in pixel or chars
  7177 000059AB 00                  <2> xcharsize       	times  1 db 0	;Character cell width in pixel
  7178 000059AC 00                  <2> ycharsize       	times  1 db 0	;Character cell height in pixel
  7179 000059AD 00                  <2> numberofplanes  	times  1 db 0	;Number of memory planes
  7180 000059AE 00                  <2> bitsperpixel    	times  1 db 0	;Bits per pixel
  7181 000059AF 00                  <2> numberofbanks   	times  1 db 0	;Number of banks
  7182 000059B0 00                  <2> memorymodel     	times  1 db 0	;Memory model type
  7183 000059B1 00                  <2> banksize        	times  1 db 0	;Bank size in KB
  7184 000059B2 00                  <2> numberofimagepages	times  1 db 0	;Number of images
  7185 000059B3 00                  <2> reserved1       	times  1 db 0	;Reserved for page function
  7186                              <2> 
  7187                              <2> ;Direct Color fields (required for direct/6 and YUV/7 memory models)
  7188 000059B4 00                  <2> redmasksize			times  1 db 0	;Size of direct color red mask in bits
  7189 000059B5 00                  <2> redfieldposition	times  1 db 0	;Bit position of lsb of red bask
  7190 000059B6 00                  <2> greenmasksize   	times  1 db 0	;Size of direct color green mask in bits
  7191 000059B7 00                  <2> greenfieldposition	times  1 db 0	;Bit position of lsb of green bask
  7192 000059B8 00                  <2> bluemasksize		times  1 db 0	;Size of direct color blue mask in bits
  7193 000059B9 00                  <2> bluefieldposition	times  1 db 0	;Bit position of lsb of blue bask
  7194 000059BA 00                  <2> rsvdmasksize        times  1 db 0		;Size of direct color reserved mask in bits
  7195 000059BB 00                  <2> rsvdfieldposition	times  1 db 0		;Bit position of lsb of reserved bask
  7196 000059BC 00                  <2> directcolormodeinfo	times  1 db 0	;Direct color mode attributes
  7197                              <2> 
  7198                              <2> ;Mandatory information for VBE 2.0 and above
  7199 000059BD 00<rept>            <2> physbaseptr 		times  4 db 0	;Physical address for flat frame buffer
  7200 000059C1 00<rept>            <2> offscreenmemoffset 	times  4 db 0	;Pointer to start of off screen memory
  7201 000059C5 00<rept>            <2> offscreenmemsize 	times  2 db 0    ;Amount of off screen memory in 1Kb units
  7202 000059C7 00<rept>            <2> reserved2 			times  206 db 0  ;Remainder of ModeInfoBlock
  7203                              <2> 
  7204 00005A95 00000000            <2> resolutionx2 dd 0	;this is not part of the VBE but is necessary GUI info
  7205                              <2> VBEEND:
  7206                              <2> [BITS 32]
  7207                              <1> 	%include "source/drivers/input/mouse.asm"
  7208 00005A99 00                  <2> mousedisabled db 0
  7209                              <2> 	
  7210                              <2> 	cursorgui:
  7211 00005A9A 803D[A18A0000]01    <2> 		cmp byte [mouseon], 1
  7212 00005AA1 0F8432000000        <2> 		je near mousedaemon
  7213 00005AA7 803D[7C8F0000]00    <2> 		cmp byte [guion], 0
  7214 00005AAE 0F8409070000        <2> 		je near entdown
  7215                              <2> 	initmouse:
  7216 00005AB4 803D[7C8F0000]00    <2> 		cmp byte [guion], 0
  7217 00005ABB 7405                <2> 		je noswmsposinit
  7218 00005ABD E8AB150000          <2> 		call switchmousepos2
  7219                              <2> 	noswmsposinit:
  7220 00005AC2 E85D020000          <2> 	  	call PS2SET
  7221 00005AC7 E886020000          <2> 		call ACTMOUS
  7222 00005ACC C605[A18A0000]01    <2> 		mov byte [mouseon],1
  7223 00005AD3 E89F020000          <2> 		call GETB 	;;Get the responce byte of the mouse (like: Hey i am active)
  7224                              <2> 		;call GETB
  7225                              <2> 				;;If the bytes are mixed up,
  7226                              <2> 				;;remove this line or add another of this line.
  7227                              <2> 	nomouse:
  7228 00005AD8 C3                  <2> 		ret
  7229                              <2> 		
  7230                              <2> 	mousedaemon:
  7231 00005AD9 803D[A18A0000]01    <2> 		cmp byte [mouseon], 1
  7232 00005AE0 75D2                <2> 		jne initmouse
  7233 00005AE2 E464                <2> 		in al, 64h ; Status
  7234 00005AE4 A820                <2> 		test al, 20h ; PS2-Mouse?
  7235 00005AE6 0F8502000000        <2> 		jnz near moused
  7236 00005AEC F4                  <2> 		hlt
  7237 00005AED C3                  <2> 		ret
  7238                              <2> 	moused:
  7239 00005AEE 803D[995A0000]01    <2> 		cmp byte [mousedisabled], 1
  7240 00005AF5 74E1                <2> 		je nomouse
  7241 00005AF7 E87B020000          <2> 		  call GETB
  7242 00005AFC 88C3                <2> 		  mov  bl, al
  7243 00005AFE 80E301              <2> 		  and  bl, 1
  7244 00005B01 881D[9C5D0000]      <2> 		  mov  BYTE [LBUTTON], bl
  7245 00005B07 88C3                <2> 		  mov  bl, al
  7246 00005B09 80E302              <2> 		  and  bl, 2
  7247 00005B0C D0EB                <2> 		  shr  bl, 1
  7248 00005B0E 881D[9D5D0000]      <2> 		  mov  BYTE [RBUTTON], bl
  7249 00005B14 88C3                <2> 		  mov  bl, al
  7250 00005B16 80E304              <2> 		  and  bl, 4
  7251 00005B19 C0EB02              <2> 		  shr  bl, 2
  7252 00005B1C 881D[9E5D0000]      <2> 		  mov  BYTE [MBUTTON], bl
  7253 00005B22 E850020000          <2> 		  call GETB
  7254 00005B27 A2[9F5D0000]        <2> 		  mov  BYTE [XCOORD], al
  7255 00005B2C E846020000          <2> 		  call GETB
  7256 00005B31 A2[A05D0000]        <2> 		  mov  BYTE [YCOORD], al
  7257                              <2> 
  7258                              <2> 	showpixelcursor:
  7259 00005B36 668B15[8B5C0000]    <2> 		mov dx, [mousecursorposition]
  7260 00005B3D 668B0D[8D5C0000]    <2> 		mov cx, [mousecursorposition + 2]
  7261 00005B44 668915[875C0000]    <2> 		mov [lastmouseposition], dx
  7262 00005B4B 66890D[895C0000]    <2> 		mov [lastmouseposition + 2], cx
  7263 00005B52 A0[9F5D0000]        <2> 		mov al, [XCOORD]
  7264 00005B57 3C80                <2> 		cmp al, 128
  7265 00005B59 730C                <2> 		jae subxcoord
  7266 00005B5B 00C0                <2> 		add al, al
  7267 00005B5D 30E4                <2> 		xor ah, ah
  7268 00005B5F 6601C2              <2> 		add dx, ax
  7269 00005B62 E90B000000          <2> 		jmp subxcoorddn
  7270                              <2> 	subxcoord:
  7271 00005B67 00C0                <2> 		add al, al
  7272 00005B69 30DB                <2> 		xor bl, bl
  7273 00005B6B 28C3                <2> 		sub bl, al
  7274 00005B6D 30FF                <2> 		xor bh, bh
  7275 00005B6F 6629DA              <2> 		sub dx, bx
  7276                              <2> 	subxcoorddn:
  7277 00005B72 8A1D[A05D0000]      <2> 		mov bl, [YCOORD]
  7278 00005B78 30C0                <2> 		xor al, al
  7279 00005B7A 28D8                <2> 		sub al, bl
  7280 00005B7C 3C80                <2> 		cmp al, 128
  7281 00005B7E 730A                <2> 		jae subycoord
  7282 00005B80 30E4                <2> 		xor ah, ah
  7283 00005B82 6601C1              <2> 		add cx, ax
  7284 00005B85 E909000000          <2> 		jmp subycoorddn
  7285                              <2> 	subycoord:
  7286 00005B8A 30DB                <2> 		xor bl, bl
  7287 00005B8C 28C3                <2> 		sub bl, al
  7288 00005B8E 30FF                <2> 		xor bh, bh
  7289 00005B90 6629D9              <2> 		sub cx, bx
  7290                              <2> 	subycoorddn:
  7291 00005B93 6681FA204E          <2> 		cmp dx, 20000
  7292 00005B98 7603                <2> 		jbe nooriginx2
  7293 00005B9A 6631D2              <2> 		xor dx, dx
  7294                              <2> 	nooriginx2:
  7295 00005B9D 6681F9204E          <2> 		cmp cx, 20000
  7296 00005BA2 7603                <2> 		jbe nooriginy2
  7297 00005BA4 6631C9              <2> 		xor cx, cx
  7298                              <2> 	nooriginy2:
  7299 00005BA7 6681FA0000          <2> 		cmp dx, 0
  7300 00005BAC 7415                <2> 		je nofixxcolumn2
  7301 00005BAE 663B15[955A0000]    <2> 		cmp dx, [resolutionx2]
  7302 00005BB5 720C                <2> 		jb nofixxcolumn2
  7303 00005BB7 668B15[955A0000]    <2> 		mov dx, [resolutionx2]
  7304 00005BBE 6681EA0200          <2> 		sub dx, 2
  7305                              <2> 	nofixxcolumn2:
  7306 00005BC3 6681F90000          <2> 		cmp cx, 0
  7307 00005BC8 7415                <2> 		je nofixyrow2
  7308 00005BCA 663B0D[A9590000]    <2> 		cmp cx, [resolutiony]
  7309 00005BD1 720C                <2> 		jb nofixyrow2
  7310 00005BD3 668B0D[A9590000]    <2> 		mov cx, [resolutiony]
  7311 00005BDA 6681E90100          <2> 		sub cx, 1
  7312                              <2> 	nofixyrow2:
  7313 00005BDF 668915[8B5C0000]    <2> 		mov [mousecursorposition], dx
  7314 00005BE6 66890D[8D5C0000]    <2> 		mov [mousecursorposition + 2], cx
  7315 00005BED 803D[7C8F0000]00    <2> 		cmp byte [guion], 0
  7316 00005BF4 0F8495000000        <2> 		je near termmouse
  7317 00005BFA E80E140000          <2> 		call switchmousepos ;;use dragging code to ensure proper icon drag
  7318 00005BFF 803D[9C5D0000]01    <2> 		cmp byte [LBUTTON], 1
  7319 00005C06 0F8433260000        <2> 		je near clickicon
  7320 00005C0C 803D[9D5D0000]01    <2> 		cmp byte [RBUTTON], 1
  7321 00005C13 0F8426260000        <2> 		je near clickicon
  7322 00005C19 A0[2C820000]        <2> 		mov al, [pbutton]
  7323 00005C1E C705[2F820000]0000- <2> 		mov dword [dragging], 0
  7324 00005C26 0000                <2>
  7325 00005C28 3C00                <2> 		cmp al, 0
  7326 00005C2A 740F                <2> 		je nopreviousbutton
  7327 00005C2C E840130000          <2> 		call clearmousecursor
  7328 00005C31 E82E170000          <2> 		call reloadallgraphics
  7329                              <2> 	windowtermcopyend:
  7330 00005C36 E832140000          <2> 		call switchmousepos2
  7331                              <2> 	nopreviousbutton:
  7332 00005C3B 30C0                <2> 		xor al, al
  7333 00005C3D A2[2C820000]        <2> 		mov [pbutton], al
  7334 00005C42 A2[93870000]        <2> 		mov [windrag], al
  7335 00005C47 A0[9C5D0000]        <2> 		mov al, [LBUTTON]
  7336 00005C4C A2[2D820000]        <2> 		mov [pLBUTTON], al
  7337 00005C51 A0[9D5D0000]        <2> 		mov al, [RBUTTON]
  7338 00005C56 A2[2E820000]        <2> 		mov [pRBUTTON], al
  7339 00005C5B 31D2                <2> 		xor edx, edx
  7340 00005C5D 668B15[8B5C0000]    <2> 		mov dx, [mousecursorposition]
  7341 00005C64 668B0D[8D5C0000]    <2> 		mov cx, [mousecursorposition + 2]
  7342 00005C6B 66BB18C7            <2> 		mov bx, 1100011100011000b
  7343 00005C6F 66B80100            <2> 		mov ax, 1
  7344 00005C73 C605[29820000]01    <2> 		mov byte [showcursorfonton], 1
  7345 00005C7A E8B71D0000          <2> 		call showfontvesa
  7346 00005C7F C605[29820000]00    <2> 		mov byte [showcursorfonton], 0
  7347 00005C86 C3                  <2> 		ret
  7348                              <2> 
  7349 00005C87 00000000            <2> lastmouseposition dw 0,0
  7350 00005C8B 00000000            <2> mousecursorposition dw 0,0	
  7351                              <2> 
  7352                              <2> termmouse:
  7353 00005C8F BE[72D92B00]        <2> 		mov esi, videobuf
  7354 00005C94 31D2                <2> 		xor edx, edx
  7355 00005C96 668B15[875C0000]    <2> 		mov dx, [lastmouseposition]
  7356 00005C9D 668B0D[895C0000]    <2> 		mov cx, [lastmouseposition + 2]
  7357 00005CA4 66A1[225D0000]      <2> 		mov ax, [cursorcache]
  7358 00005CAA 663D0000            <2> 		cmp ax, 0
  7359 00005CAE 7425                <2> 		je nocopycursorcache
  7360 00005CB0 66C1E104            <2> 		shl cx, 4
  7361 00005CB4 66C1E203            <2> 		shl dx, 3
  7362 00005CB8 01D6                <2> 		add esi, edx
  7363 00005CBA 6631D2              <2> 		xor dx, dx
  7364 00005CBD 8A15[E1250000]      <2> 		mov dl, [charxy]
  7365 00005CC3 6641                <2> 		inc cx
  7366                              <2> termmousecplp1:
  7367 00005CC5 01D6                <2> 		add esi, edx
  7368 00005CC7 6649                <2> 		dec cx
  7369 00005CC9 6681F90000          <2> 		cmp cx, 0
  7370 00005CCE 75F5                <2> 		jne termmousecplp1
  7371 00005CD0 29D6                <2> 		sub esi, edx
  7372 00005CD2 668906              <2> 		mov [esi], ax
  7373                              <2> nocopycursorcache:
  7374 00005CD5 BE[72D92B00]        <2> 		mov esi, videobuf
  7375 00005CDA 31D2                <2> 		xor edx, edx
  7376 00005CDC 668B15[8B5C0000]    <2> 		mov dx, [mousecursorposition]
  7377 00005CE3 668B0D[8D5C0000]    <2> 		mov cx, [mousecursorposition + 2]
  7378 00005CEA 66C1E104            <2> 		shl cx, 4
  7379 00005CEE 66C1E203            <2> 		shl dx, 3
  7380 00005CF2 01D6                <2> 		add esi, edx
  7381 00005CF4 6631D2              <2> 		xor dx, dx
  7382 00005CF7 8A15[E1250000]      <2> 		mov dl, [charxy]
  7383 00005CFD 6641                <2> 		inc cx
  7384                              <2> termmousecplp2:
  7385 00005CFF 01D6                <2> 		add esi, edx
  7386 00005D01 6649                <2> 		dec cx
  7387 00005D03 6681F90000          <2> 		cmp cx, 0
  7388 00005D08 75F5                <2> 		jne termmousecplp2
  7389 00005D0A 29D6                <2> 		sub esi, edx
  7390 00005D0C 668B06              <2> 		mov ax, [esi]
  7391 00005D0F 66A3[225D0000]      <2> 		mov [cursorcache], ax
  7392 00005D15 B080                <2> 		mov al, 128
  7393 00005D17 B407                <2> 		mov ah, 7
  7394 00005D19 668906              <2> 		mov [esi], ax
  7395 00005D1C E8D4CBFFFF          <2> 		call termcopy
  7396 00005D21 C3                  <2> 		ret
  7397 00005D22 0000                <2> cursorcache db 0,0
  7398                              <2> 
  7399                              <2> PS2SET:
  7400 00005D24 B0A8                <2>   mov  al, 0xa8		; enable mouse port
  7401 00005D26 E664                <2>   out  0x64, al		; write to keyboardcontroller
  7402 00005D28 E801000000          <2>   call CHKPRT		; check if command is progressed (demand!)
  7403 00005D2D C3                  <2> ret
  7404                              <2> 
  7405                              <2> CHKPRT:
  7406 00005D2E 66B96400            <2>   mov  cx, 100
  7407                              <2>  .again:
  7408 00005D32 E464                <2>   in   al, 0x64		; read from keyboardcontroller
  7409 00005D34 A802                <2>   test al, 2		; Check if input buffer is empty
  7410 00005D36 7402                <2>   je .go
  7411 00005D38 E2F8                <2>   loop .again
  7412                              <2>  .go:
  7413 00005D3A C3                  <2> ret
  7414                              <2> 
  7415                              <2> WMOUS:
  7416 00005D3B B0D4                <2>   mov  al, 0xd4		; write to mouse device instead of to keyboard
  7417 00005D3D E664                <2>   out  0x64, al		; write to keyboardcontroller
  7418 00005D3F E8EAFFFFFF          <2>   call CHKPRT		; check if command is progressed (demand!)
  7419 00005D44 C3                  <2> ret
  7420                              <2> 
  7421                              <2> MBUFFUL:
  7422 00005D45 66B96400            <2>   mov cx, 100
  7423                              <2>  .mn:
  7424 00005D49 E464                <2>   in   al, 0x64		; read from keyboardcontroller
  7425 00005D4B A820                <2>   test al, 0x20		; check if mouse output buffer is full
  7426 00005D4D 7402                <2>   jz  .mnn
  7427 00005D4F E2F8                <2>   loop .mn
  7428                              <2>  .mnn:
  7429 00005D51 C3                  <2> ret
  7430                              <2> 
  7431                              <2> 
  7432                              <2> ACTMOUS:
  7433 00005D52 E8E4FFFFFF          <2>   call WMOUS
  7434 00005D57 B0F4                <2>   mov  al, 0xf4 	; Command to activate mouse itselve (Stream mode)
  7435 00005D59 E660                <2>   out  0x60, al		; write ps/2 controller output port (activate mouse)
  7436 00005D5B E8CEFFFFFF          <2>   call CHKPRT		; check if command is progressed (demand!)
  7437 00005D60 E801000000          <2>   call CHKMOUS		; check if a byte is available
  7438 00005D65 C3                  <2> ret
  7439                              <2> 
  7440                              <2> CHKMOUS:
  7441 00005D66 B300                <2>   mov  bl, 0
  7442 00005D68 66B96400            <2>   mov cx, 100
  7443                              <2>  .vrd:
  7444 00005D6C E464                <2>   in   al, 0x64		; read from keyboardcontroller
  7445 00005D6E A801                <2>   test al, 1		; check if controller buffer (60h) has data
  7446 00005D70 7504                <2>   jnz .yy
  7447 00005D72 E2F8                <2>   loop .vrd
  7448 00005D74 B301                <2>   mov  bl, 1
  7449                              <2>  .yy:
  7450 00005D76 C3                  <2> ret
  7451                              <2> 
  7452                              <2> GETB:
  7453                              <2>  .cagain:
  7454 00005D77 E8EAFFFFFF          <2>   call CHKMOUS		; check if a byte is available
  7455 00005D7C 08DB                <2>   or bl, bl
  7456 00005D7E 75F7                <2>   jnz .cagain
  7457 00005D80 B0AD                <2>   mov  al, 0xad		; Disable Keyboard
  7458 00005D82 E664                <2>   out  0x64, al		; write to keyboardcontroller
  7459 00005D84 E8A5FFFFFF          <2>   call CHKPRT		; check if command is progressed (demand!)
  7460 00005D89 6631C0              <2>   xor  ax, ax
  7461 00005D8C E460                <2>   in   al, 0x60		; read ps/2 controller output port (mousebyte)
  7462 00005D8E 88C2                <2>   mov  dl, al
  7463 00005D90 B0AE                <2>   mov  al, 0xae		; Enable Keyboard
  7464 00005D92 E664                <2>   out  0x64, al		; write to keyboardcontroller
  7465 00005D94 E895FFFFFF          <2>   call CHKPRT		; check if command is progressed (demand!)
  7466 00005D99 88D0                <2>   mov  al, dl
  7467 00005D9B C3                  <2> ret
  7468                              <2> 
  7469 00005D9C 00                  <2> LBUTTON db 0x00	;	Left   button status 1=PRESSED 0=RELEASED
  7470 00005D9D 00                  <2> RBUTTON db 0x00	;	Right  button status 1=PRESSED 0=RELEASED
  7471 00005D9E 00                  <2> MBUTTON db 0x00	;	Middle button status 1=PRESSED 0=RELEASED
  7472 00005D9F 00                  <2> XCOORD  db 0x00	;	the moved distance  (horizontal)
  7473 00005DA0 00                  <2> YCOORD  db 0x00	;	the moved distance  (vertical)
  7474                              <1> %endif
  7475                              <1> %include "source/drivers/sound/pcspkr.asm"
  7476                              <2> ;PC Speaker Drivers
  7477                              <2> PCSpeakerRAW:
  7478 00005DA1 60                  <2> 	pusha
  7479                              <2> nosoundrep:
  7480 00005DA2 8B35[6B020000]      <2> 	mov esi, [soundpos]
  7481 00005DA8 31C9                <2> 	xor ecx, ecx
  7482 00005DAA 668B0D[69020000]    <2> 	mov cx, [soundrepititions]
  7483 00005DB1 6681F90000          <2> 	cmp cx, 0
  7484 00005DB6 0F8548000000        <2> 	jne near donesetpitch
  7485 00005DBC 668B0E              <2> 	mov cx, [esi]
  7486 00005DBF 668B5E02            <2> 	mov bx, [esi + 2]
  7487 00005DC3 66890D[69020000]    <2> 	mov [soundrepititions], cx
  7488 00005DCA 81C604000000        <2> 	add esi, 4
  7489 00005DD0 8935[6B020000]      <2> 	mov [soundpos], esi
  7490 00005DD6 3B35[6F020000]      <2> 	cmp esi, [soundendpos]
  7491 00005DDC 7735                <2> 	ja stopsound
  7492 00005DDE 66813D[69020000]00- <2> 	cmp word [soundrepititions], 0
  7493 00005DE6 00                  <2>
  7494 00005DE7 74B9                <2> 	je nosoundrep
  7495 00005DE9 6681FB0000          <2> 	cmp bx, 0
  7496 00005DEE 740F                <2> 	je nosoundplay
  7497 00005DF0 E840000000          <2> 	call setpitch
  7498 00005DF5 E849000000          <2> 	call startsound
  7499 00005DFA E905000000          <2> 	jmp donesetpitch
  7500                              <2> nosoundplay:
  7501 00005DFF E846000000          <2> 	call killsound
  7502                              <2> donesetpitch:
  7503 00005E04 6649                <2> 	dec cx
  7504 00005E06 66890D[69020000]    <2> 	mov [soundrepititions], cx
  7505 00005E0D 61                  <2> 	popa
  7506 00005E0E E995A4FFFF          <2> 	jmp timerinterrupt
  7507                              <2> stopsound:
  7508 00005E13 31C0                <2> 	xor eax, eax
  7509 00005E15 66A3[69020000]      <2> 	mov [soundrepititions], ax
  7510 00005E1B A2[68020000]        <2> 	mov [soundon], al
  7511 00005E20 A3[6B020000]        <2> 	mov [soundpos], eax
  7512 00005E25 A3[6F020000]        <2> 	mov [soundendpos], eax
  7513 00005E2A E81B000000          <2> 	call killsound
  7514 00005E2F 61                  <2> 	popa
  7515 00005E30 E973A4FFFF          <2> 	jmp timerinterrupt
  7516                              <2> 
  7517                              <2> 
  7518                              <2> setpitch:
  7519 00005E35 B0B6                <2> 	mov al, 0xB6
  7520 00005E37 E643                <2> 	out 0x43, al
  7521 00005E39 6689D8              <2> 	mov ax, bx
  7522 00005E3C E642                <2> 	out 0x42, al
  7523 00005E3E 88E0                <2> 	mov al, ah
  7524 00005E40 E642                <2> 	out 0x42, al
  7525 00005E42 C3                  <2> 	ret
  7526                              <2> startsound:
  7527 00005E43 E461                <2> 	in al, 0x61
  7528 00005E45 0C03                <2> 	or al, 3
  7529 00005E47 E661                <2> 	out 0x61, al
  7530 00005E49 C3                  <2> 	ret
  7531                              <2> killsound:
  7532 00005E4A E461                <2> 	in al, 0x61
  7533 00005E4C 24FC                <2> 	and al, 0xFC
  7534 00005E4E E661                <2> 	out 0x61, al
  7535 00005E50 C3                  <2> 	ret
  7536                              <2> 	
  7537                              <1> %ifdef sound.included
  7538                              <1> 	%include "source/drivers/sound/sblaster.asm"
  7539                              <2> ;Sound Blaster Drivers
  7540                              <2> sblaster:
  7541                              <2> .init:
  7542 00005E51 E8D7010000          <2> 		call ResetDSP			;If the system is Sound Blaster 16 compatible, reset the DSP
  7543 00005E56 A2[87600000]        <2> 		mov [SoundBlaster], al	;if the reset worked, show an available card
  7544 00005E5B 3C00                <2> 		cmp al, 0
  7545 00005E5D 7418                <2> 		je .noinit
  7546 00005E5F B0D1                <2> 		mov	al,0D1h 		; turn speaker(s) on
  7547 00005E61 E8FB010000          <2> 		call WriteDSP
  7548 00005E66 B088                <2> 		mov	al,088h 		; Left = 8, Right = 8 (15-highest)
  7549 00005E68 E8B1010000          <2> 		call MstrVol 		; L = Hi Nibble, R = Lo Nibble
  7550 00005E6D BE[785E0000]        <2> 		mov esi, .initmsg
  7551 00005E72 E8E9BEFFFF          <2> 		call print
  7552                              <2> .noinit:
  7553 00005E77 C3                  <2> 		ret
  7554 00005E78 536F756E64626C6173- <2> .initmsg db "Soundblaster Initialized",10,0
  7555 00005E81 74657220496E697469- <2>
  7556 00005E8A 616C697A65640A00    <2>
  7557                              <2> sblaster.cont: ;this function goes to the next available portion of a sound, if necessary
  7558 00005E92 813D[71600000]0000- <2> 	cmp dword [Length0], 0
  7559 00005E9A 0000                <2>
  7560 00005E9C 0F8462000000        <2> 	je near .done
  7561 00005EA2 FF0D[71600000]      <2> 	dec dword [Length0]
  7562 00005EA8 E908000000          <2> 	jmp .notodd
  7563                              <2> .oddlength:
  7564 00005EAD 31C9                <2> 	xor ecx, ecx
  7565 00005EAF 880D[70600000]      <2> 	mov [OddLength], cl
  7566                              <2> .notodd:
  7567 00005EB5 8B35[77600000]      <2> 	mov esi, [NextMemLoc]
  7568 00005EBB 31C9                <2> 	xor ecx, ecx
  7569 00005EBD 668B0D[75600000]    <2> 	mov cx, [Length1]
  7570 00005EC4 D1E9                <2> 	shr ecx, 1
  7571 00005EC6 6641                <2> 	inc cx
  7572 00005EC8 31DB                <2> 	xor ebx, ebx
  7573 00005ECA 668B1D[7F600000]    <2> 	mov bx, [SegLoc]
  7574 00005ED1 6601CB              <2> 	add bx, cx
  7575 00005ED4 66891D[7F600000]    <2> 	mov [SegLoc], bx
  7576 00005EDB 81C300000800        <2> 	add ebx, 0x80000 ;linear address of sb buffer
  7577 00005EE1 8935[7B600000]      <2> 	mov [MemLoc], esi
  7578 00005EE7 89C8                <2> 	mov eax, ecx
  7579 00005EE9 01F0                <2> 	add eax, esi
  7580 00005EEB A3[77600000]        <2> 	mov [NextMemLoc], eax
  7581 00005EF0 E833000000          <2> 	call DMACopy
  7582                              <2> 	;call DMAPlay
  7583 00005EF5 E8E0000000          <2> 	call PlayDSP
  7584 00005EFA 66BA2E02            <2> 	mov dx, (BasePort+0xE)
  7585 00005EFE EC                  <2> 	in al, dx ;acknowledge the interrupt 
  7586 00005EFF E96EA4FFFF          <2> 	jmp handled2 ;it is part of an interrupt routine
  7587                              <2> .done:
  7588 00005F04 803D[70600000]01    <2> 	cmp byte [OddLength], 1
  7589 00005F0B 74A0                <2> 	je .oddlength
  7590 00005F0D 31C0                <2> 	xor eax, eax
  7591 00005F0F 66A3[75600000]      <2> 	mov [Length1], ax
  7592 00005F15 66B8D000            <2> 	mov ax, 0xD0
  7593 00005F19 E843010000          <2> 	call WriteDSP
  7594 00005F1E 66BA2E02            <2> 	mov dx, (BasePort+0xE)
  7595 00005F22 EC                  <2> 	in al, dx ;acknowledge the interrupt 
  7596 00005F23 E94AA4FFFF          <2> 	jmp handled2
  7597                              <2> 	
  7598                              <2> DMACopy:
  7599 00005F28 66B80800            <2> 		mov ax, LINEAR_SEL
  7600 00005F2C 8EE0                <2> 		mov fs, ax
  7601 00005F2E C1E902              <2> 		shr ecx, 2
  7602                              <2> .loop:
  7603 00005F31 8B06                <2> 		mov eax, [esi]
  7604 00005F33 648903              <2> 		mov [fs:ebx], eax
  7605 00005F36 81C604000000        <2> 		add esi, 4
  7606 00005F3C 81C304000000        <2> 		add ebx, 4
  7607 00005F42 E2ED                <2> 		loop .loop
  7608 00005F44 66B83000            <2> 		mov ax, NEW_DATA_SEL
  7609 00005F48 8EE0                <2> 		mov fs, ax
  7610 00005F4A C3                  <2> 		ret
  7611                              <2> 		
  7612                              <2> 
  7613                              <2> DMAPlay:    ;uses eax ebx edx
  7614 00005F4B C605[81600000]00    <2> 		mov	byte [Page1],00h
  7615                              <2> 
  7616 00005F52 B005                <2> 		mov	al,(Channel+4)
  7617 00005F54 66BA0A00            <2> 		mov	dx,0Ah
  7618 00005F58 EE                  <2> 		out	dx,al
  7619 00005F59 30C0                <2> 		xor	al,al
  7620 00005F5B 66BA0C00            <2> 		mov	dx,0Ch
  7621 00005F5F EE                  <2> 		out	dx,al
  7622 00005F60 B059                <2> 		mov	al,ModeReg
  7623 00005F62 66BA0B00            <2> 		mov	dx,0Bh
  7624 00005F66 EE                  <2> 		out	dx,al
  7625 00005F67 B800000800          <2> 		mov	eax,0x80000
  7626 00005F6C 66BA0200            <2> 		mov	dx,AddPort
  7627 00005F70 EE                  <2> 		out	dx,al
  7628 00005F71 86C4                <2> 		xchg al,ah
  7629 00005F73 EE                  <2> 		out	dx,al
  7630 00005F74 B800000800          <2> 		mov	eax,0x80000
  7631 00005F79 89C2                <2> 		mov	edx,eax
  7632 00005F7B 2500000100          <2> 		and	eax,65536
  7633 00005F80 7406                <2> 		jz	MemLocN1
  7634 00005F82 FE05[81600000]      <2> 		inc	byte [Page1]
  7635                              <2> MemLocN1:
  7636 00005F88 89D0                <2> 		mov	eax,edx
  7637 00005F8A 2500000200          <2> 		and	eax,131072
  7638 00005F8F 7407                <2> 		jz	MemLocN2
  7639 00005F91 8005[81600000]02    <2> 		add	byte [Page1],02
  7640                              <2> MemLocN2:
  7641 00005F98 89D0                <2> 		mov	eax,edx
  7642 00005F9A 2500000400          <2> 		and	eax,262144
  7643 00005F9F 7407                <2> 		jz	MemLocN3
  7644 00005FA1 8005[81600000]04    <2> 		add	byte [Page1],04
  7645                              <2> MemLocN3:
  7646 00005FA8 89D0                <2> 		mov	eax,edx
  7647 00005FAA 2500000800          <2> 		and	eax,524288
  7648 00005FAF 7407                <2> 		jz	MemLocN4
  7649 00005FB1 8005[81600000]08    <2> 		add	byte [Page1],08
  7650                              <2> MemLocN4:
  7651 00005FB8 66BA8300            <2> 		mov	dx,PgPort
  7652 00005FBC A0[81600000]        <2> 		mov	al,[Page1]
  7653 00005FC1 EE                  <2> 		out	dx,al
  7654 00005FC2 66BA0300            <2> 		mov	dx,LenPort
  7655 00005FC6 66A1[75600000]      <2> 		mov	ax,[Length1]
  7656 00005FCC 6648                <2> 		dec ax
  7657 00005FCE EE                  <2> 		out	dx,al
  7658 00005FCF 86C4                <2> 		xchg al,ah
  7659 00005FD1 EE                  <2> 		out	dx,al
  7660 00005FD2 66BA0A00            <2> 		mov	dx,0Ah
  7661 00005FD6 B001                <2> 		mov	al,Channel
  7662 00005FD8 EE                  <2> 		out	dx,al
  7663 00005FD9 C3                  <2> 		ret
  7664                              <2> 		
  7665                              <2> PlayDSP:
  7666 00005FDA B040                <2> 		mov	al,40h
  7667 00005FDC E880000000          <2> 		call WriteDSP
  7668 00005FE1 31D2                <2> 		xor	edx,edx
  7669 00005FE3 B840420F00          <2> 		mov	eax,1000000
  7670 00005FE8 8B1D[82600000]      <2> 		mov	ebx,[Freq]
  7671 00005FEE F7F3                <2> 		div	ebx
  7672 00005FF0 89C3                <2> 		mov	ebx,eax
  7673 00005FF2 B800010000          <2> 		mov	eax,256
  7674 00005FF7 29D8                <2> 		sub	eax,ebx
  7675 00005FF9 E863000000          <2> 		call WriteDSP
  7676 00005FFE A0[86600000]        <2> 		mov	al,[WAVEMode]	;write the mode
  7677 00006003 E859000000          <2> 		call WriteDSP
  7678 00006008 66A1[75600000]      <2> 		mov	ax,[Length1]
  7679 0000600E 66D1E8              <2> 		shr ax, 1
  7680 00006011 E84B000000          <2> 		call WriteDSP
  7681 00006016 86C4                <2> 		xchg al,ah
  7682 00006018 E844000000          <2> 		call WriteDSP
  7683 0000601D C3                  <2> 		ret
  7684                              <2> 
  7685                              <2> MstrVol:    ;uses ax dx
  7686 0000601E 6650                <2> 	   push ax
  7687 00006020 66BA2402            <2> 	   mov	dx,(BasePort+4)
  7688 00006024 B022                <2> 	   mov	al,22h
  7689 00006026 EE                  <2> 	   out	dx,al
  7690 00006027 6658                <2> 	   pop	ax
  7691 00006029 6642                <2> 	   inc	dx
  7692 0000602B EE                  <2> 	   out	dx,al
  7693 0000602C C3                  <2> 	   ret
  7694                              <2> 	   
  7695                              <2> ResetDSP:   ; uses cx dx
  7696 0000602D 66BA2602            <2> 			mov	dx,(BasePort+6)
  7697 00006031 B001                <2> 			mov	al,01
  7698 00006033 EE                  <2> 			out	dx,al
  7699 00006034 66B93200            <2> 			mov	cx,50
  7700 00006038 EC                  <2> WaitIt1:	in	al,dx
  7701 00006039 E2FD                <2> 			loop WaitIt1
  7702 0000603B 30C0                <2> 			xor	al,al
  7703 0000603D EE                  <2> 			out	dx,al
  7704 0000603E 66B93200            <2> 			mov	cx,50
  7705 00006042 EC                  <2> WaitIt2:	in	al,dx
  7706 00006043 E2FD                <2> 			loop WaitIt2
  7707 00006045 B4FF                <2> 			mov	ah,0FFh 		; part of Return Code
  7708 00006047 66BA2E02            <2> 			mov	dx,(BasePort+14)
  7709 0000604B EC                  <2> 			in	al,dx
  7710 0000604C 2480                <2> 			and	al,80h
  7711 0000604E 3C80                <2> 			cmp	al,80h
  7712 00006050 750C                <2> 			jne	ResetErr
  7713 00006052 66BA2A02            <2> 			mov	dx,(BasePort+10)
  7714 00006056 EC                  <2> 			in	al,dx
  7715 00006057 3CAA                <2> 			cmp	al,0AAh
  7716 00006059 7503                <2> 			jne	ResetErr
  7717 0000605B B001                <2> ResetOK:	mov al, 1		; return ax = 0 if reset ok
  7718 0000605D C3                  <2> 			ret
  7719 0000605E 30C0                <2> ResetErr:	xor al, al
  7720 00006060 C3                  <2> 			ret
  7721                              <2> 
  7722                              <2> WriteDSP:   ;uses ax dx
  7723 00006061 6650                <2> 		push ax
  7724 00006063 66BA2C02            <2> 		mov	dx,(BasePort+12)
  7725 00006067 EC                  <2> WaitIt:	in	al,dx
  7726 00006068 2480                <2> 		and	al,80h
  7727 0000606A 75FB                <2> 		jnz	WaitIt
  7728 0000606C 6658                <2> 		pop	ax
  7729 0000606E EE                  <2> 		out	dx,al
  7730 0000606F C3                  <2> 		ret
  7731                              <2> 
  7732 00006070 00                  <2> OddLength db 0
  7733 00006071 00000000            <2> Length0 dd	0
  7734 00006075 0000                <2> Length1	dw  0
  7735 00006077 00000000            <2> NextMemLoc dd 0
  7736 0000607B 00000000            <2> MemLoc	dd  0
  7737 0000607F 0000                <2> SegLoc  dw 0
  7738 00006081 00                  <2> Page1	db  0
  7739 00006082 00000000            <2> Freq	dd	0
  7740 00006086 14                  <2> WAVEMode db 14h
  7741                              <2> PgPort	equ 83h
  7742                              <2> AddPort	equ 02h
  7743                              <2> LenPort	equ 03h
  7744                              <2> ModeReg	equ 59h
  7745                              <2> Channel	equ 01h
  7746                              <2> BasePort	equ 220h
  7747 00006087 00                  <2> SoundBlaster	db 0
  7748                              <1> %endif
  7749                              <1> %ifdef io.serial
  7750                              <1> 	%include "source/drivers/input/serial.asm"
  7751                              <1> %else
  7752                              <1> 	%include "source/drivers/input/keyboard.asm"
  7753 00006088 00                  <2> specialkey db 0
  7754                              <2> ;charregion db 0
  7755                              <2> waitforinput:		;this is basically the idle process
  7756                              <2> 					;this halts the cpu for a small amount of time and then sees if there was a keypress
  7757                              <2> 					;this lets the cpu stay at close to 0% instead of 100%
  7758 00006089 6631C0              <2> 	xor ax, ax
  7759 0000608C A0[F36B0000]        <2> 	mov al, [threadson]
  7760 00006091 8825[F36B0000]      <2> 	mov [threadson], ah
  7761 00006097 FB                  <2> 	sti
  7762 00006098 F4                  <2> 	hlt
  7763 00006099 A2[F36B0000]        <2> 	mov [threadson], al
  7764 0000609E 66813D[BF230000]00- <2> 	cmp word [trans], 0
  7765 000060A6 00                  <2>
  7766 000060A7 7401                <2> 	je getkey
  7767 000060A9 C3                  <2> 	ret
  7768                              <2> getkey:
  7769 000060AA 31C0                <2> 		xor eax, eax
  7770 000060AC A2[88600000]        <2> 		mov [specialkey], al
  7771 000060B1 A3[BB230000]        <2> 		mov [lastkey], eax
  7772 000060B6 E464                <2> 		in al, 64h ; Status
  7773                              <2> 	%ifdef gui.included
  7774 000060B8 A820                <2> 		test al, 20h ; PS2-Mouse?
  7775 000060BA 0F852EFAFFFF        <2> 		jnz near moused
  7776                              <2> 	%endif
  7777 000060C0 A801                <2> 		test al, 1 
  7778 000060C2 74C5                <2> 		jz waitforinput ; if output buffer full or no keypress, jump to idle process
  7779                              <2> 	calckey:
  7780 000060C4 E460                <2> 		in al, 60h
  7781 000060C6 30E4                <2> 		xor ah, ah
  7782 000060C8 6689C3              <2> 		mov bx, ax
  7783 000060CB 66A3[BD230000]      <2> 		mov [lastkey + 2], ax
  7784 000060D1 BF[60620000]        <2> 		mov edi, scancode
  7785                              <2> 	searchscan: 
  7786 000060D6 80FB3A              <2> 		cmp bl, 3Ah
  7787 000060D9 7314                <2> 		jae scanother
  7788 000060DB C1E004              <2> 		shl eax, 4
  7789 000060DE 01C7                <2> 		add edi, eax
  7790 000060E0 668B07              <2> 		mov ax, [edi]
  7791 000060E3 663D0000            <2> 		cmp ax, 0
  7792 000060E7 7406                <2> 		je scanother
  7793 000060E9 E9D0000000          <2> 		jmp scanfound
  7794 000060EE 00                  <2> uppercase db 0
  7795                              <2> scanother:
  7796 000060EF 6631C0              <2> 		xor ax, ax
  7797 000060F2 66A3[BB230000]      <2> 		mov [lastkey], ax
  7798 000060F8 80FBE0              <2> 		cmp bl, 0E0h
  7799 000060FB 0F8477000000        <2> 		je near getkeyspecial
  7800 00006101 803D[88600000]E0    <2> 		cmp byte [specialkey], 0xE0
  7801 00006108 7525                <2> 		jne nospecialkey
  7802 0000610A 80FB38              <2> 		cmp bl, 38h
  7803 0000610D 0F849A000000        <2> 		je near alton
  7804 00006113 80FBB8              <2> 		cmp bl, 0B8h
  7805 00006116 0F8499000000        <2> 		je near altoff
  7806 0000611C 80FB1D              <2> 		cmp bl, 1Dh
  7807 0000611F 0F8478000000        <2> 		je near ctron
  7808 00006125 80FB9D              <2> 		cmp bl, 9Dh
  7809 00006128 0F8477000000        <2> 		je near ctroff
  7810 0000612E C3                  <2> 		ret
  7811                              <2> nospecialkey:
  7812 0000612F 80FB2A              <2> 		cmp bl, 2Ah
  7813 00006132 0F8455000000        <2> 		je near shifton
  7814 00006138 80FB36              <2> 		cmp bl, 36h
  7815 0000613B 0F844C000000        <2> 		je near shifton
  7816 00006141 80FB1C              <2> 		cmp bl, 1Ch
  7817 00006144 0F8473000000        <2> 		je near entdown
  7818 0000614A 80FBAA              <2> 		cmp bl, 0AAh
  7819 0000614D 0F8442000000        <2> 		je near shiftoff
  7820 00006153 80FBB6              <2> 		cmp bl, 0B6h
  7821 00006156 0F8439000000        <2> 		je near shiftoff
  7822 0000615C 80FB3A              <2> 		cmp bl, 3Ah
  7823 0000615F 0F84A7000000        <2> 		je near capslock
  7824 00006165 80FB45              <2> 		cmp bl, 0x45
  7825 00006168 0F84AF000000        <2> 		je near numlock
  7826 0000616E 80FB46              <2> 		cmp bl, 0x46
  7827 00006171 0F84BE000000        <2> 		je near scrolllock
  7828 00006177 C3                  <2> 		ret
  7829                              <2> 	getkeyspecial:
  7830 00006178 C605[88600000]E0    <2> 		mov byte [specialkey], 0xE0
  7831 0000617F E940FFFFFF          <2> 		jmp calckey
  7832                              <2> 	shift:
  7833 00006184 A0[EE600000]        <2> 		mov al, [uppercase]
  7834 00006189 3C01                <2> 		cmp al, 1
  7835 0000618B 7308                <2> 		jae shiftoff
  7836                              <2> 	shifton:
  7837 0000618D C605[EE600000]01    <2> 		mov byte [uppercase], 1
  7838 00006194 C3                  <2> 		ret
  7839                              <2> 	shiftoff:
  7840 00006195 C605[EE600000]00    <2> 		mov byte [uppercase], 0
  7841 0000619C C3                  <2> 		ret
  7842                              <2> 	ctron:
  7843 0000619D C605[0B620000]01    <2> 		mov byte [ctrkey], 1
  7844 000061A4 C3                  <2> 		ret
  7845                              <2> 	ctroff:
  7846 000061A5 C605[0B620000]00    <2> 		mov byte [ctrkey], 0
  7847 000061AC C3                  <2> 		ret
  7848                              <2> 	alton:
  7849 000061AD C605[0A620000]01    <2> 		mov byte [altkey], 1
  7850 000061B4 C3                  <2> 		ret
  7851                              <2> 	altoff:
  7852 000061B5 C605[0A620000]00    <2> 		mov byte [altkey], 0
  7853 000061BC C3                  <2> 		ret
  7854                              <2> 	entdown:
  7855 000061BD C3                  <2> 		ret
  7856                              <2> scanfound:
  7857 000061BE 81C708000000        <2> 		add edi, 8
  7858 000061C4 803D[0B620000]01    <2> 		cmp byte [ctrkey], 1
  7859 000061CB 7306                <2> 		jae ctrlin
  7860 000061CD 81EF08000000        <2> 		sub edi, 8
  7861                              <2> 	ctrlin:
  7862 000061D3 81C704000000        <2> 		add edi, 4
  7863 000061D9 803D[0A620000]01    <2> 		cmp byte [altkey], 1
  7864 000061E0 7306                <2> 		jae altin
  7865 000061E2 81EF04000000        <2> 		sub edi, 4
  7866                              <2> 	altin:
  7867 000061E8 81C702000000        <2> 		add edi, 2
  7868 000061EE 803D[EE600000]01    <2> 		cmp byte [uppercase], 1
  7869 000061F5 7306                <2> 		jae uppercaseon
  7870 000061F7 81EF02000000        <2> 		sub edi, 2
  7871                              <2> 	uppercaseon:
  7872 000061FD 668B07              <2> 		mov ax,[edi]
  7873 00006200 66A3[BB230000]      <2> 		mov [lastkey], ax
  7874 00006206 C3                  <2> 		ret
  7875                              <2> 		
  7876 00006207 00                  <2> keyboardstatus db 0
  7877 00006208 00                  <2> numlockstatus db 0
  7878 00006209 00                  <2> scrolllockstatus db 0
  7879 0000620A 00                  <2> altkey db 0
  7880 0000620B 00                  <2> ctrkey db 0
  7881                              <2> 	capslock:
  7882 0000620C 8035[07620000]04    <2> 		xor byte [keyboardstatus], 00000100b
  7883 00006213 E835000000          <2> 		call updatekblights
  7884 00006218 E967FFFFFF          <2> 		jmp shift
  7885                              <2> 		
  7886                              <2> 	numlock:
  7887 0000621D 8035[07620000]02    <2> 		xor byte [keyboardstatus], 00000010b
  7888 00006224 8035[08620000]01    <2> 		xor byte [numlockstatus], 1
  7889 0000622B E81D000000          <2> 		call updatekblights
  7890 00006230 E975FEFFFF          <2> 		jmp getkey
  7891                              <2> 	
  7892                              <2> 	scrolllock:
  7893 00006235 8035[07620000]01    <2> 		xor byte [keyboardstatus], 00000001b
  7894 0000623C 8035[09620000]01    <2> 		xor byte [scrolllockstatus], 1
  7895 00006243 E805000000          <2> 		call updatekblights
  7896 00006248 E95DFEFFFF          <2> 		jmp getkey
  7897                              <2> 		
  7898                              <2> 	updatekblights:
  7899 0000624D B0ED                <2> 		mov al, 0xED
  7900 0000624F 66BA6000            <2> 		mov dx, 0x60
  7901 00006253 EE                  <2> 		out dx, al
  7902                              <2> 	chkkbdack:
  7903 00006254 EC                  <2> 		in al, dx
  7904 00006255 3CFA                <2> 		cmp al, 0xFA
  7905 00006257 75FB                <2> 		jne chkkbdack
  7906 00006259 A0[07620000]        <2> 		mov al, [keyboardstatus]
  7907 0000625E EE                  <2> 		out dx, al
  7908 0000625F C3                  <2> 		ret
  7909                              <2> 		
  7910                              <2> scancode:
  7911                              <2> 	;key, KEY, alt key, ALT KEY, ctrl key, CTRL KEY, ctrl-alt, CTRL-ALT
  7912 00006260 000000000000000000- <2> 	dw 0,0,0,0,0,0,0,0
  7913 00006269 00000000000000      <2>
  7914 00006270 000000000000000000- <2> 	dw 0,0,0,0,0,0,0,0
  7915 00006279 00000000000000      <2>
  7916 00006280 31002100A1003C2000- <2> 	dw '1','!',0xA1,0x203C,0,0,0,0
  7917 00006289 00000000000000      <2>
  7918 00006290 32004000B2001A2200- <2> 	dw '2','@',0xB2,0x221A,0,0,0,0
  7919 00006299 00000000000000      <2>
  7920 000062A0 33002300B3002B2200- <2> 	dw '3','#',0xB3,0x222B,0,0,0,0
  7921 000062A9 00000000000000      <2>
  7922 000062B0 34002400A300A20000- <2> 	dw '4','$',0xA3,0xA2,0,0,0,0
  7923 000062B9 00000000000000      <2>
  7924 000062C0 35002500AC20000000- <2> 	dw '5','%',0x20AC,0,0,0,0,0
  7925 000062C9 00000000000000      <2>
  7926 000062D0 36005E00BC007F2000- <2> 	dw '6','^',0xBC,0x207F,0,0,0,0
  7927 000062D9 00000000000000      <2>
  7928 000062E0 37002600BD00000000- <2> 	dw '7','&',0xBD,0,0,0,0,0
  7929 000062E9 00000000000000      <2>
  7930 000062F0 38002A001E22950000- <2> 	dw '8','*',0x221E,0x95,0,0,0,0
  7931 000062F9 00000000000000      <2>
  7932 00006300 39002800AE00990000- <2> 	dw '9','(',0xAE,0x99,0,0,0,0
  7933 00006309 00000000000000      <2>
  7934 00006310 30002900A900000000- <2> 	dw '0',')',0xA9,0,0,0,0,0
  7935 00006319 00000000000000      <2>
  7936 00006320 2D005F00A500B10000- <2> 	dw '-','_',0xA5,0xB1,0,0,0,0
  7937 00006329 00000000000000      <2>
  7938 00006330 3D002B00F700482200- <2> 	dw '=','+',0xF7,0x2248,0,0,0,0
  7939 00006339 00000000000000      <2>
  7940 00006340 080008000000000000- <2> 	dw 8,8,0,0,0,0,0,0
  7941 00006349 00000000000000      <2>
  7942 00006350 000000000000000000- <2> 	dw 0,0,0,0,0,0,0,0
  7943 00006359 00000000000000      <2>
  7944 00006360 71005100E400C4003B- <2> 	dw 'q','Q',0xE4,0xC4,';',':',0x439,0x419
  7945 00006368 003A0039041904      <2>
  7946 00006370 77005700E500C500C2- <2> 	dw 'w','W',0xE5,0xC5,0x3C2,0,0x446,0x426
  7947 00006379 03000046042604      <2>
  7948 00006380 65004500E900C900B5- <2> 	dw 'e','E',0xE9,0xC9,0x3B5,0x395,0x443,0x423
  7949 00006389 03950343042304      <2>
  7950 00006390 72005200EB00E800C1- <2> 	dw 'r','R',0xEB,0xE8,0x3C1,0x3A1,0x43A,0x41A
  7951 00006399 03A1033A041A04      <2>
  7952 000063A0 74005400FC00DC00C4- <2> 	dw 't','T',0xFC,0xDC,0x3C4,0x3A4,0x435,0x415
  7953 000063A9 03A40335041504      <2>
  7954 000063B0 79005900FF009F00C5- <2> 	dw 'y','Y',0xFF,0x9F,0x3C5,0x3A5,0x43D,0x41D
  7955 000063B9 03A5033D041D04      <2>
  7956 000063C0 75005500FA00F900B8- <2> 	dw 'u','U',0xFA,0xF9,0x3B8,0x398,0x433,0x413
  7957 000063C9 03980333041304      <2>
  7958 000063D0 69004900ED00EC00B9- <2> 	dw 'i','I',0xED,0xEC,0x3B9,0x399,0x448,0x428
  7959 000063D9 03990348042804      <2>
  7960 000063E0 6F004F00F300F200BF- <2> 	dw 'o','O',0xF3,0xF2,0x3BF,0x39F,0x449,0x429
  7961 000063E9 039F0349042904      <2>
  7962 000063F0 70005000F600D600C0- <2> 	dw 'p','P',0xF6,0xD6,0x3C0,0x3A0,0x437,0x417
  7963 000063F9 03A00337041704      <2>
  7964 00006400 5B007B00AB00000000- <2> 	dw '[','{',0xAB,0,0,0,0x445,0x425
  7965 00006409 00000045042504      <2>
  7966 00006410 5D007D00BB00000000- <2> 	dw ']','}',0xBB,0,0,0,0x44A,0x42A
  7967 00006419 0000004A042A04      <2>
  7968 00006420 000000000000000000- <2> 	dw 0,0,0,0,0,0,0,0
  7969 00006429 00000000000000      <2>
  7970 00006430 000000000000000000- <2> 	dw 0,0,0,0,0,0,0,0
  7971 00006439 00000000000000      <2>
  7972 00006440 61004100E100E000B1- <2> 	dw 'a','A',0xE1,0xE0,0x3B1,0x391,0x444,0x424
  7973 00006449 03910344042404      <2>
  7974 00006450 73005300A7000000C3- <2> 	dw 's','S',0xA7,0,0x3C3,0x3A3,0x44B,0x42B
  7975 00006459 03A3034B042B04      <2>
  7976 00006460 64004400B0000000B4- <2> 	dw 'd','D',0xB0,0,0x3B4,0x394,0x432,0x412
  7977 00006469 03940332041204      <2>
  7978 00006470 6600460083004026C6- <2> 	dw 'f','F',0x83,0x2640,0x3C6,0x3A6,0x430,0x410
  7979 00006479 03A60330041004      <2>
  7980 00006480 6700470000000000B3- <2> 	dw 'g','G',0,0,0x3B3,0x393,0x43F,0x41F
  7981 00006489 0393033F041F04      <2>
  7982 00006490 6800480000000000B7- <2> 	dw 'h','H',0,0,0x3B7,0x397,0x440,0x420
  7983 00006499 03970340042004      <2>
  7984 000064A0 6A004A0000000000BE- <2> 	dw 'j','J',0,0,0x3BE,0x39E,0x43E,0x41E
  7985 000064A9 039E033E041E04      <2>
  7986 000064B0 6B004B0000000000BA- <2> 	dw 'k','K',0,0,0x3BA,0x39A,0x43B,0x41B
  7987 000064B9 039A033B041B04      <2>
  7988 000064C0 6C004C0000000000BB- <2> 	dw 'l','L',0,0,0x3BB,0x39B,0x434,0x414
  7989 000064C9 039B0334041404      <2>
  7990 000064D0 3B003A00B6000E2200- <2> 	dw ';',':',0xB6,0x220E,0,0,0x436,0x416
  7991 000064D9 00000036041604      <2>
  7992 000064E0 270022000000000000- <2> 	dw "'",'"',0,0,0,0,0x44D,0x42D
  7993 000064E9 0000004D042D04      <2>
  7994 000064F0 60007E000000000000- <2> 	dw '`','~',0,0,0,0,0x451,0x401
  7995 000064F9 00000051040104      <2>
  7996 00006500 000000000000000000- <2> 	dw 0,0,0,0,0,0,0,0
  7997 00006509 00000000000000      <2>
  7998 00006510 5C007C00AC00A60000- <2> 	dw "\",'|',0xAC,0xA6,0,0,"/","\"
  7999 00006519 0000002F005C00      <2>
  8000 00006520 7A005A00E600C600B6- <2> 	dw 'z','Z',0xE6,0xC6,0x3B6,0x396,0x44F,0x42F
  8001 00006529 0396034F042F04      <2>
  8002 00006530 7800580000000000C7- <2> 	dw 'x','X',0,0,0x3C7,0x3A7,0x447,0x427
  8003 00006539 03A70347042704      <2>
  8004 00006540 63004300E700C700C8- <2> 	dw 'c','C',0xE7,0xC7,0x3C8,0x3A8,0x441,0x421
  8005 00006549 03A80341042104      <2>
  8006 00006550 7600560000000000C9- <2> 	dw 'v','V',0,0,0x3C9,0x3A9,0x43C,0x41C
  8007 00006559 03A9033C041C04      <2>
  8008 00006560 6200420000000000B2- <2> 	dw 'b','B',0,0,0x3B2,0x392,0x438,0x418
  8009 00006569 03920338041804      <2>
  8010 00006570 6E004E00F100D100BD- <2> 	dw 'n','N',0xF1,0xD1,0x3BD,0x39D,0x442,0x422
  8011 00006579 039D0342042204      <2>
  8012 00006580 6D004D006C264226BC- <2> 	dw 'm','M',0x266C,0x2642,0x3BC,0x39C,0x44C,0x42C
  8013 00006589 039C034C042C04      <2>
  8014 00006590 2C003C006422000000- <2> 	dw ',','<',0x2264,0,0,0,0x431,0x411
  8015 00006599 00000031041104      <2>
  8016 000065A0 2E003E006522000000- <2> 	dw '.','>',0x2265,0,0,0,0x44E,0x42E
  8017 000065A9 0000004E042E04      <2>
  8018 000065B0 2F003F00BF00000000- <2> 	dw '/','?',0xBF,0,0,0,'.',','
  8019 000065B9 0000002E002C00      <2>
  8020 000065C0 000000000000000000- <2> 	dw 0,0,0,0,0,0,0,0
  8021 000065C9 00000000000000      <2>
  8022 000065D0 000000000000000000- <2> 	dw 0,0,0,0,0,0,0,0
  8023 000065D9 00000000000000      <2>
  8024 000065E0 000000000000000000- <2> 	dw 0,0,0,0,0,0,0,0
  8025 000065E9 00000000000000      <2>
  8026 000065F0 200020000000000000- <2> 	dw ' ',' ',0,0,0,0,0,0
  8027 000065F9 00000000000000      <2>
  8028                              <2> noscan:
  8029                              <2> 
  8030                              <1> %endif
  8031                              <1> ;drivers will soon be handled intelligently
  8032                              <1> ;every driver's source will be scanned for a .init function
  8033                              <1> ;that will be called and if it returns 0
  8034                              <1> ;the hardware was found and the driver initialized properly
  8035                              <1> initializelater: ;these have debugging messages and should be initialized after the screen
  8036                              <1> 	%ifdef sound.included
  8037 00006600 E84CF8FFFF          <1> 		call sblaster.init
  8038                              <1> 	%endif
  8039                              <1> 	%ifdef network.included
  8040 00006605 E89F240000          <1> 		call network.init
  8041                              <1> 	%endif
  8042 0000660A C3                  <1> 	ret
  8043                              <1> initialize:
  8044                              <1> ;Now I will initialise the interrupt controllers and remap irq's
  8045 0000660B E819000000          <1> 	call .pic
  8046                              <1> %ifdef terminal.vsync
  8047 00006610 E841000000          <1> 	call .rtc
  8048                              <1> %endif
  8049 00006615 E871000000          <1> 	call .pit
  8050 0000661A E893000000          <1> 	call .fpu
  8051 0000661F E8A4000000          <1> 	call .sse
  8052 00006624 31C0                <1> 	xor eax, eax
  8053 00006626 31C9                <1> 	xor ecx, ecx
  8054                              <1> %ifdef io.serial
  8055                              <1> 	call serial.init
  8056                              <1> %endif
  8057 00006628 C3                  <1> 	ret
  8058                              <1> 	
  8059                              <1> .pic:
  8060 00006629 B011                <1> 	mov al, 0x11
  8061 0000662B E620                <1> 	out 0x20, al
  8062 0000662D E6A0                <1> 	out 0xA0, al
  8063 0000662F B040                <1> 	mov al, 0x40	;interrupt for master
  8064 00006631 E621                <1> 	out 0x21, al
  8065 00006633 B048                <1> 	mov al, 0x48	;interrupt for slave
  8066 00006635 E6A1                <1> 	out 0xA1, al
  8067 00006637 B004                <1> 	mov al, 4
  8068 00006639 E621                <1> 	out 0x21, al
  8069 0000663B B002                <1> 	mov al, 2
  8070 0000663D E6A1                <1> 	out 0xA1, al
  8071 0000663F B001                <1> 	mov al, 0x1
  8072 00006641 E621                <1> 	out 0x21, al
  8073 00006643 B001                <1> 	mov al, 0x1
  8074 00006645 E6A1                <1> 	out 0xA1, al
  8075                              <1> 	;masks are set to zero so as not to mask
  8076 00006647 30C0                <1> 	xor al, al
  8077 00006649 E621                <1> 	out 0x21, al
  8078 0000664B 30C0                <1> 	xor al, al
  8079 0000664D E6A1                <1> 	out 0xA1, al
  8080 0000664F B020                <1> 	mov al, 0x20
  8081 00006651 E6A0                <1> 	out 0xA0, al
  8082 00006653 E620                <1> 	out 0x20, al
  8083 00006655 C3                  <1> 	ret
  8084                              <1> .rtc:
  8085 00006656 B008                <1> 	mov al, 0x8
  8086 00006658 88C4                <1> 	mov ah, al
  8087 0000665A 66BA7000            <1> 	mov dx, 0x70
  8088 0000665E EE                  <1> 	out dx, al
  8089 0000665F 6642                <1> 	inc dx
  8090 00006661 EC                  <1> 	in al, dx
  8091 00006662 86C4                <1> 	xchg al, ah
  8092 00006664 664A                <1> 	dec dx
  8093 00006666 EE                  <1> 	out dx, al
  8094 00006667 6642                <1> 	inc dx
  8095 00006669 86C4                <1> 	xchg al, ah
  8096 0000666B 0C40                <1> 	or al, 0x40
  8097 0000666D EE                  <1> 	out dx, al
  8098                              <1> 	
  8099 0000666E B00A                <1> 	mov al, 0xA
  8100 00006670 664A                <1> 	dec dx
  8101 00006672 EE                  <1> 	out dx, al
  8102 00006673 86C4                <1> 	xchg al, ah
  8103 00006675 6642                <1> 	inc dx
  8104 00006677 EC                  <1> 	in al, dx
  8105 00006678 24F0                <1> 	and al, 0xF0
  8106 0000667A 0A05[1B030000]      <1> 	or al, [rtcrate]
  8107 00006680 86C4                <1> 	xchg al, ah
  8108 00006682 664A                <1> 	dec dx
  8109 00006684 EE                  <1> 	out dx, al
  8110 00006685 6642                <1> 	inc dx
  8111 00006687 86C4                <1> 	xchg al, ah
  8112 00006689 EE                  <1> 	out dx, al
  8113 0000668A C3                  <1> 	ret
  8114                              <1> 	
  8115                              <1> .pit:
  8116                              <1> 	;initialize the PIT
  8117 0000668B 66A1[5A020000]      <1> 	mov ax, [pitdiv] ;this is the divider for the PIT
  8118 00006691 E640                <1> 	out 0x40, al
  8119 00006693 66C1C008            <1> 	rol ax, 8
  8120 00006697 E640                <1> 	out 0x40, al
  8121                              <1> 	;enable rtc interrupt
  8122 00006699 B00B                <1> 	mov al, 0xB
  8123 0000669B E670                <1> 	out 0x70, al
  8124 0000669D 66C1C008            <1> 	rol ax, 8
  8125 000066A1 E471                <1> 	in al, 0x71
  8126 000066A3 66C1C008            <1> 	rol ax, 8
  8127 000066A7 E670                <1> 	out 0x70, al
  8128 000066A9 66C1C008            <1> 	rol ax, 8
  8129 000066AD 0C40                <1> 	or al, 0x40
  8130 000066AF E671                <1> 	out 0x71, al
  8131 000066B1 C3                  <1> 	ret
  8132                              <1> .fpu:
  8133                              <1> 	;And now to initialize the fpu
  8134 000066B2 0F20E0              <1> 	mov eax, cr4
  8135 000066B5 0D00020000          <1> 	or eax, 0x200
  8136 000066BA 0F22E0              <1> 	mov cr4, eax
  8137 000066BD B87F0B0000          <1> 	mov eax, 0xB7F
  8138 000066C2 50                  <1> 	push eax
  8139 000066C3 D92C24              <1> 	fldcw [esp]
  8140 000066C6 58                  <1> 	pop eax
  8141 000066C7 C3                  <1> 	ret
  8142                              <1> 	
  8143                              <1> .sse:
  8144 000066C8 0F20C0              <1> 	mov eax, cr0
  8145 000066CB 24FB                <1> 	and al, 11111011b
  8146 000066CD 0C02                <1> 	or al, 00000010b
  8147 000066CF 0F22C0              <1> 	mov cr0, eax
  8148 000066D2 0F20E0              <1> 	mov eax, cr4
  8149 000066D5 660D0006            <1> 	or ax, 0000011000000000b
  8150 000066D9 0F22E0              <1> 	mov cr4, eax
  8151 000066DC C3                  <1> 	ret
  8152                                      %include "source/pci.asm"
  8153 000066DD 00                  <1> pcibus		db 0
  8154 000066DE 00                  <1> pcidevice	db 0
  8155 000066DF 00                  <1> pcifunction	db 0
  8156 000066E0 00                  <1> pciregister	db 0
  8157 000066E1 00                  <1> pcireqtype	db 0
  8158 000066E2 00000000            <1> pcidevid	dd 0
  8159 000066E6 FFFFFFFF            <1> pcidevidmask dd 0xFFFFFFFF
  8160                              <1> getpcimem:
  8161 000066EA B002                <1> 	mov al, 2
  8162 000066EC A2[E1660000]        <1> 	mov [pcireqtype], al
  8163 000066F1 E922000000          <1> 	jmp searchpci
  8164                              <1> getpciport:
  8165 000066F6 B001                <1> 	mov al, 1
  8166 000066F8 A2[E1660000]        <1> 	mov [pcireqtype], al
  8167 000066FD E916000000          <1> 	jmp searchpci
  8168                              <1> pcidump:
  8169 00006702 31C0                <1> 	xor eax, eax
  8170 00006704 A2[DF660000]        <1> 	mov [pcifunction], al
  8171 00006709 A2[DD660000]        <1> 	mov [pcibus], al
  8172 0000670E A2[DE660000]        <1> 	mov [pcidevice], al
  8173 00006713 A2[E1660000]        <1> 	mov [pcireqtype], al
  8174                              <1> searchpci:		;;return in ebx, start X in pciX
  8175 00006718 30C0                <1> 	xor al, al
  8176 0000671A A2[E0660000]        <1> 	mov [pciregister], al
  8177 0000671F E81D020000          <1> 	call getpciaddr
  8178 00006724 BAF80C0000          <1> 	mov edx, 0xCF8
  8179 00006729 EF                  <1> 	out dx, eax	;;request pci config
  8180 0000672A BAFC0C0000          <1> 	mov edx, 0xCFC
  8181 0000672F ED                  <1> 	in eax, dx 	;;read in pci config
  8182 00006730 3D0000FFFF          <1> 	cmp eax, 0xFFFF0000
  8183 00006735 0F8237000000        <1> 	jb near checkpcidevice
  8184                              <1> searchpciret:
  8185                              <1> nextpcidevice:
  8186 0000673B 30C0                <1> 	xor al, al
  8187 0000673D A2[DF660000]        <1> 	mov [pcifunction], al
  8188 00006742 A0[DE660000]        <1> 	mov al, [pcidevice]
  8189 00006747 3C1F                <1> 	cmp al, 11111b
  8190 00006749 0F8300010000        <1> 	jae near nextpcibus
  8191 0000674F FEC0                <1> 	inc al
  8192 00006751 A2[DE660000]        <1> 	mov [pcidevice], al
  8193 00006756 EBC0                <1> 	jmp searchpci
  8194 00006758 A0[DF660000]        <1> 	mov al, [pcifunction]
  8195 0000675D 3C07                <1> 	cmp al, 111b
  8196 0000675F 0F83D6FFFFFF        <1> 	jae near nextpcidevice
  8197 00006765 FEC0                <1> 	inc al
  8198 00006767 A2[DF660000]        <1> 	mov [pcifunction], al
  8199 0000676C EBAA                <1> 	jmp searchpci
  8200 0000676E 00000000            <1> pcitype: db 0,0,0,0
  8201                              <1> checkpcidevice:
  8202 00006772 31C0                <1> 	xor eax, eax
  8203 00006774 3905[E2660000]      <1> 	cmp [pcidevid], eax
  8204 0000677A 0F8430000000        <1> 	je near .good
  8205 00006780 A2[E0660000]        <1> 	mov [pciregister], al	;device id, vendor id
  8206 00006785 E8B7010000          <1> 	call getpciaddr
  8207 0000678A BAF80C0000          <1> 	mov edx, 0xCF8
  8208 0000678F EF                  <1> 	out dx, eax
  8209 00006790 BAFC0C0000          <1> 	mov edx, 0xCFC
  8210 00006795 ED                  <1> 	in eax, dx
  8211 00006796 2305[E6660000]      <1> 	and eax, [pcidevidmask]
  8212 0000679C 8B1D[E2660000]      <1> 	mov ebx, [pcidevid]
  8213 000067A2 231D[E6660000]      <1> 	and ebx, [pcidevidmask]
  8214 000067A8 39D8                <1> 	cmp eax, ebx
  8215 000067AA 0F858BFFFFFF        <1> 	jne near searchpciret
  8216                              <1> .good:
  8217 000067B0 30C0                <1> 	xor al, al
  8218 000067B2 3805[E1660000]      <1> 	cmp [pcireqtype], al
  8219 000067B8 0F842C000000        <1> 	je near dumppcidevice
  8220 000067BE B008                <1> 	mov al, 0x08
  8221 000067C0 A2[E0660000]        <1> 	mov [pciregister], al	;;class code, subclass, revision id
  8222 000067C5 E877010000          <1> 	call getpciaddr
  8223 000067CA BAF80C0000          <1> 	mov edx, 0xCF8
  8224 000067CF EF                  <1> 	out dx, eax
  8225 000067D0 BAFC0C0000          <1> 	mov edx, 0xCFC
  8226 000067D5 ED                  <1> 	in eax, dx
  8227 000067D6 C1C008              <1> 	rol eax, 8
  8228 000067D9 3A05[6E670000]      <1> 	cmp al, [pcitype]
  8229 000067DF 0F84A0000000        <1> 	je near foundpciaddr
  8230 000067E5 E951FFFFFF          <1> 	jmp searchpciret
  8231                              <1> dumppcidevice:
  8232 000067EA 30C0                <1> 	xor al, al
  8233 000067EC A2[E0660000]        <1> 	mov [pciregister], al
  8234 000067F1 E84B010000          <1> 	call getpciaddr
  8235 000067F6 89C1                <1> 	mov ecx, eax
  8236 000067F8 C605[00320000]05    <1> 	mov byte [firsthexshown], 5
  8237 000067FF E811CAFFFF          <1> 	call showhex
  8238                              <1> dumppcidevicelp:
  8239 00006804 A2[E0660000]        <1> 	mov [pciregister], al
  8240 00006809 E833010000          <1> 	call getpciaddr
  8241 0000680E BAF80C0000          <1> 	mov edx, 0xCF8
  8242 00006813 EF                  <1> 	out dx, eax
  8243 00006814 BAFC0C0000          <1> 	mov edx, 0xCFC
  8244 00006819 ED                  <1> 	in eax, dx
  8245 0000681A 89C1                <1> 	mov ecx, eax
  8246 0000681C A0[E0660000]        <1> 	mov al, [pciregister]
  8247 00006821 0404                <1> 	add al, 4
  8248 00006823 C605[00320000]05    <1> 	mov byte [firsthexshown], 5
  8249 0000682A E8E6C9FFFF          <1> 	call showhex
  8250 0000682F 3C3C                <1> 	cmp al, 0x3C
  8251 00006831 72D1                <1> 	jb dumppcidevicelp
  8252                              <1> dumppcidn:
  8253                              <1> %ifdef io.serial
  8254                              <1> 	mov esi, line
  8255                              <1> 	call print
  8256                              <1> %else
  8257 00006833 803D[DF250000]00    <1> 	cmp byte [charpos], 0
  8258 0000683A 0F84FBFEFFFF        <1> 	je near searchpciret
  8259 00006840 BE[578F0000]        <1> 	mov esi, line
  8260 00006845 E816B5FFFF          <1> 	call print
  8261                              <1> %endif
  8262 0000684A E9ECFEFFFF          <1> 	jmp searchpciret
  8263                              <1> nextpcibus:
  8264 0000684F 30C0                <1> 	xor al, al
  8265 00006851 A2[DE660000]        <1> 	mov [pcidevice], al
  8266 00006856 A0[DD660000]        <1> 	mov al, [pcibus]
  8267 0000685B 3C7F                <1> 	cmp al, 1111111b
  8268 0000685D 730C                <1> 	jae donesearchpci
  8269 0000685F FEC0                <1> 	inc al
  8270 00006861 A2[DD660000]        <1> 	mov [pcibus], al
  8271 00006866 E9ADFEFFFF          <1> 	jmp searchpci
  8272                              <1> donesearchpci:
  8273 0000686B BBFFFFFFFF          <1> 	mov ebx, 0xFFFFFFFF
  8274 00006870 31D2                <1> 	xor edx, edx
  8275 00006872 8815[6E670000]      <1> 	mov [pcitype], dl
  8276 00006878 8915[E2660000]      <1> 	mov [pcidevid], edx
  8277 0000687E 891D[E6660000]      <1> 	mov [pcidevidmask], ebx
  8278 00006884 C3                  <1> 	ret
  8279                              <1> foundpciaddr:
  8280 00006885 B010                <1> 	mov al, 0x10
  8281 00006887 A2[E0660000]        <1> 	mov [pciregister], al
  8282 0000688C 803D[E1660000]02    <1> 	cmp byte [pcireqtype], 2
  8283 00006893 7443                <1> 	je findpcimemaddr
  8284                              <1> findpciioaddr:
  8285 00006895 E8A7000000          <1> 	call getpciaddr
  8286 0000689A BAF80C0000          <1> 	mov edx, 0xCF8
  8287 0000689F EF                  <1> 	out dx, eax
  8288 000068A0 BAFC0C0000          <1> 	mov edx, 0xCFC
  8289 000068A5 ED                  <1> 	in eax, dx
  8290 000068A6 89C3                <1> 	mov ebx, eax
  8291 000068A8 81E301000000        <1> 	and ebx, 1
  8292 000068AE 81FB00000000        <1> 	cmp ebx, 0
  8293 000068B4 0F846E000000        <1> 	je near notpciioaddr
  8294 000068BA 2D01000000          <1> 	sub eax, 1
  8295 000068BF 89C2                <1> 	mov edx, eax
  8296 000068C1 31DB                <1> 	xor ebx, ebx
  8297 000068C3 4B                  <1> 	dec ebx
  8298 000068C4 891D[E6660000]      <1> 	mov [pcidevidmask], ebx
  8299 000068CA 43                  <1> 	inc ebx
  8300 000068CB 881D[6E670000]      <1> 	mov [pcitype], bl
  8301 000068D1 891D[E2660000]      <1> 	mov [pcidevid], ebx
  8302 000068D7 C3                  <1> 	ret
  8303                              <1> findpcimemaddr:
  8304 000068D8 E864000000          <1> 	call getpciaddr
  8305 000068DD BAF80C0000          <1> 	mov edx, 0xCF8
  8306 000068E2 EF                  <1> 	out dx, eax
  8307 000068E3 BAFC0C0000          <1> 	mov edx, 0xCFC
  8308 000068E8 ED                  <1> 	in eax, dx
  8309 000068E9 89C3                <1> 	mov ebx, eax
  8310 000068EB 81E301000000        <1> 	and ebx, 1
  8311 000068F1 81FB01000000        <1> 	cmp ebx, 1
  8312 000068F7 0F842B000000        <1> 	je near notpciioaddr
  8313 000068FD C1E804              <1> 	shr eax, 4
  8314 00006900 C1E004              <1> 	shl eax, 4	;remove prefetch and type
  8315 00006903 89C2                <1> 	mov edx, eax
  8316 00006905 50                  <1> 	push eax
  8317 00006906 A1[41020000]        <1> 	mov eax, [basecache]
  8318 0000690B C1E004              <1> 	shl eax, 4
  8319 0000690E 29C2                <1> 	sub edx, eax
  8320 00006910 58                  <1> 	pop eax
  8321 00006911 31DB                <1> 	xor ebx, ebx
  8322 00006913 4B                  <1> 	dec ebx
  8323 00006914 891D[E6660000]      <1> 	mov [pcidevidmask], ebx
  8324 0000691A 43                  <1> 	inc ebx
  8325 0000691B 881D[6E670000]      <1> 	mov [pcitype], bl
  8326 00006921 891D[E2660000]      <1> 	mov [pcidevid], ebx
  8327 00006927 C3                  <1> 	ret
  8328                              <1> notpciioaddr:
  8329 00006928 A0[E0660000]        <1> 	mov al, [pciregister]
  8330 0000692D 0404                <1> 	add al, 4
  8331 0000692F 3C28                <1> 	cmp al, 0x28
  8332 00006931 0F8704FEFFFF        <1> 	ja near searchpciret
  8333 00006937 A2[E0660000]        <1> 	mov [pciregister], al
  8334 0000693C E954FFFFFF          <1> 	jmp findpciioaddr
  8335                              <1> getpciaddr:		;;puts it in eax and ebx
  8336 00006941 31C0                <1> 			xor eax, eax
  8337 00006943 BB00000080          <1> 			mov ebx, 0x80000000
  8338 00006948 A0[DD660000]        <1> 			mov al, [pcibus]
  8339 0000694D C1E010              <1> 			shl eax, 16
  8340 00006950 01C3                <1> 			add ebx, eax
  8341 00006952 31C0                <1> 			xor eax, eax
  8342 00006954 A0[DE660000]        <1> 			mov al, [pcidevice]
  8343 00006959 C1E00B              <1> 			shl eax, 11
  8344 0000695C 01C3                <1> 			add ebx, eax
  8345 0000695E 31C0                <1> 			xor eax, eax
  8346 00006960 A0[DF660000]        <1> 			mov al, [pcifunction]
  8347 00006965 C1E008              <1> 			shl eax, 8
  8348 00006968 01C3                <1> 			add ebx, eax
  8349 0000696A 31C0                <1> 			xor eax, eax
  8350 0000696C A0[E0660000]        <1> 			mov al, [pciregister]
  8351 00006971 01C3                <1> 			add ebx, eax
  8352 00006973 89D8                <1> 			mov eax, ebx
  8353 00006975 C3                  <1> 			ret
  8354                                      %include "source/disk.asm"
  8355                              <1> %ifdef disk.real
  8356                              <1> 	%include "source/drivers/disk/realmode.asm"
  8357                              <2> diskr:
  8358                              <2> 			;sector count in cl
  8359                              <2> 			;disk number in ch
  8360                              <2> 			;48 bit address with last 32 bits in ebx
  8361                              <2> 			;buffer in esi
  8362                              <2> 			;puts end of buffer in edi and end lba address in edx
  8363 00006976 880D[A3690000]      <2> 	mov [sdlength], cl
  8364 0000697C 891D[A4690000]      <2> 	mov [sdaddress], ebx
  8365 00006982 8935[1F6B0000]      <2> 	mov [oldesireal], esi
  8366 00006988 66BE[A869]          <2> 	mov si, readdiskreal
  8367 0000698C 668935[030D0000]    <2> 	mov [realmodeptr], si
  8368 00006993 BE[E4690000]        <2> 	mov esi, backfromrealread
  8369 00006998 8935[FF0C0000]      <2> 	mov [realmodereturn], esi
  8370 0000699E E945A2FFFF          <2> 	jmp realmode
  8371 000069A3 00                  <2> sdlength db 0
  8372 000069A4 00000000            <2> sdaddress dd 0
  8373                              <2> 
  8374                              <2> [BITS 16]
  8375                              <2> readdiskreal:
  8376 000069A8 C706[D469]1000      <2> 	mov word [dlen], 0x10
  8377 000069AE C706[D869]0000      <2> 	mov word [daddress], 0
  8378 000069B4 C706[DA69]0001      <2> 	mov word [dsegm], 0x100
  8379 000069BA 66891E[DC69]        <2> 	mov [dlbaad], ebx
  8380 000069BF 880E[D669]          <2> 	mov [dreadlen], cl
  8381                              <2> ReadHardDisk:
  8382 000069C3 BE[D469]            <2> 	mov si, diskaddresspacket
  8383 000069C6 31C0                <2> 	xor ax, ax
  8384 000069C8 B442                <2> 	mov ah, 0x42
  8385 000069CA 8A16[D369]          <2> 	mov dl, [dnumber]
  8386 000069CE CD13                <2> 	int 0x13
  8387 000069D0 72F1                <2> 	jc ReadHardDisk
  8388 000069D2 C3                  <2> 	ret
  8389                              <2> 
  8390 000069D3 80                  <2> dnumber db 0x80
  8391                              <2> diskaddresspacket:
  8392 000069D4 10                  <2> dlen:	db 0x10 ;size of packet
  8393 000069D5 00                  <2> 		db 0
  8394 000069D6 7F00                <2> dreadlen:	dw 0x7F	;blocks to read=maximum
  8395 000069D8 0000                <2> daddress:	dw 0	;address 0
  8396 000069DA 0001                <2> dsegm:		dw 0x100	;segment
  8397                              <2> 		;start with known value for hd
  8398                              <2> dlbaad:
  8399 000069DC 00000000            <2> 	dd 0	;lba address
  8400 000069E0 00000000            <2> 	dd 0
  8401                              <2> [BITS 32]
  8402                              <2> backfromrealread:
  8403 000069E4 8B35[1F6B0000]      <2> 	mov esi, [oldesireal]
  8404 000069EA 8B1D[A4690000]      <2> 	mov ebx, [sdaddress]
  8405 000069F0 31C9                <2> 	xor ecx, ecx
  8406 000069F2 8A0D[A3690000]      <2> 	mov cl, [sdlength]
  8407 000069F8 01CB                <2> 	add ebx, ecx
  8408 000069FA 66B80800            <2> 	mov ax, LINEAR_SEL
  8409 000069FE 8EE0                <2> 	mov fs, ax
  8410 00006A00 BF00100000          <2> 	mov edi, 0x1000
  8411 00006A05 B200                <2> 	mov dl, 0
  8412 00006A07 D0E1                <2> 	shl cl, 1
  8413                              <2> copyfromrmodedisk:
  8414 00006A09 648A07              <2> 	mov al, [fs:edi]
  8415 00006A0C 8806                <2> 	mov [esi], al
  8416 00006A0E 47                  <2> 	inc edi
  8417 00006A0F 46                  <2> 	inc esi
  8418 00006A10 FECA                <2> 	dec dl
  8419 00006A12 80FA00              <2> 	cmp dl, 0
  8420 00006A15 75F2                <2> 	jne copyfromrmodedisk
  8421 00006A17 FEC9                <2> 	dec cl
  8422 00006A19 B200                <2> 	mov dl, 0
  8423 00006A1B 80F900              <2> 	cmp cl, 0
  8424 00006A1E 75E9                <2> 	jne copyfromrmodedisk
  8425 00006A20 66B83000            <2> 	mov ax, NEW_DATA_SEL
  8426 00006A24 8EE0                <2> 	mov fs, ax
  8427 00006A26 89F7                <2> 	mov edi, esi
  8428 00006A28 8B35[1F6B0000]      <2> 	mov esi, [oldesireal]
  8429 00006A2E 89DA                <2> 	mov edx, ebx
  8430 00006A30 8B1D[A4690000]      <2> 	mov ebx, [sdaddress]
  8431 00006A36 C3                  <2> 	ret
  8432                              <2> 	
  8433                              <1> %else
  8434                              <1> 	%ifdef disk.protected
  8435                              <1> 		%include "source/drivers/disk/pata.asm"
  8436                              <1> 	%endif
  8437                              <1> %endif
  8438                              <1> %ifdef disk.none
  8439                              <1> loadfile:	xor edx, edx
  8440                              <1> 			cmp byte [edi], '&'
  8441                              <1> 			je .ret
  8442                              <1> 			mov edx, 404	;no files are found except &
  8443                              <1> 		.ret:
  8444                              <1> 			ret
  8445                              <1> %else
  8446                              <1> ;This loads files using the methods in the loaded driver
  8447                              <1> loadfile:	;loads a file with the name buffer's location in edi into location in esi
  8448                              <1> 			;returns with err code in edx and file end in edi
  8449 00006A37 803F00              <1> 	cmp byte [edi], 0
  8450 00006A3A 0F8448000000        <1> 	je near nofileload
  8451 00006A40 89FA                <1> 	mov edx, edi
  8452 00006A42 BB[C6910300]        <1> 	mov ebx, diskfileindex
  8453                              <1> nextnamechar:
  8454 00006A47 8A07                <1> 	mov al, [edi]
  8455 00006A49 3C26                <1> 	cmp al, '&'
  8456 00006A4B 7440                <1> 	je nullfile
  8457 00006A4D 8A23                <1> 	mov ah, [ebx]
  8458 00006A4F 47                  <1> 	inc edi
  8459 00006A50 43                  <1> 	inc ebx
  8460 00006A51 88C1                <1> 	mov cl, al
  8461 00006A53 08E1                <1> 	or cl, ah
  8462 00006A55 80F900              <1> 	cmp cl, 0
  8463 00006A58 746B                <1> 	je equalfilenames
  8464 00006A5A 80F920              <1> 	cmp cl, ' '
  8465 00006A5D 7466                <1> 	je equalfilenames
  8466 00006A5F 3C2A                <1> 	cmp al, '*'
  8467 00006A61 742B                <1> 	je asteriskcheck
  8468 00006A63 80FC00              <1> 	cmp ah, 0
  8469 00006A66 7410                <1> 	je nextfilename
  8470 00006A68 3C00                <1> 	cmp al, 0
  8471 00006A6A 7404                <1> 	je getebxzero
  8472 00006A6C 38E0                <1> 	cmp al, ah
  8473 00006A6E 74D7                <1> 	je nextnamechar
  8474                              <1> getebxzero:
  8475 00006A70 8A23                <1> 	mov ah, [ebx]
  8476 00006A72 43                  <1> 	inc ebx
  8477 00006A73 80FC00              <1> 	cmp ah, 0
  8478 00006A76 75F8                <1> 	jne getebxzero
  8479                              <1> nextfilename:
  8480 00006A78 81C308000000        <1> 	add ebx, 8		;next descriptor
  8481 00006A7E 89D7                <1> 	mov edi, edx
  8482 00006A80 81FB[D7930300]      <1> 	cmp ebx, enddiskfileindex
  8483 00006A86 72BF                <1> 	jb nextnamechar
  8484                              <1> nofileload:
  8485 00006A88 BA94010000          <1> 	mov edx, 404	;indicate not found error
  8486                              <1> nullfile:
  8487 00006A8D C3                  <1> 	ret
  8488                              <1> asteriskcheck:
  8489 00006A8E 47                  <1> 	inc edi
  8490 00006A8F 8A07                <1> 	mov al, [edi]
  8491 00006A91 3C2A                <1> 	cmp al, '*'
  8492 00006A93 74F9                <1> 	je asteriskcheck ;remove multiple asterisks
  8493 00006A95 3C20                <1> 	cmp al, ' '
  8494 00006A97 7412                <1> 	je equalfilenames2
  8495 00006A99 3C00                <1> 	cmp al, 0
  8496 00006A9B 740E                <1> 	je equalfilenames2
  8497                              <1> .lp:
  8498 00006A9D 43                  <1> 	inc ebx
  8499 00006A9E 8A23                <1> 	mov ah, [ebx]
  8500 00006AA0 80FC00              <1> 	cmp ah, 0
  8501 00006AA3 74D3                <1> 	je nextfilename
  8502 00006AA5 38E0                <1> 	cmp al, ah
  8503 00006AA7 749E                <1> 	je nextnamechar
  8504 00006AA9 EBF2                <1> 	jmp .lp
  8505                              <1> equalfilenames2:
  8506 00006AAB 81EB02000000        <1> 	sub ebx, 2
  8507                              <1> eqfilefind:
  8508 00006AB1 43                  <1> 	inc ebx
  8509 00006AB2 81FB[D7930300]      <1> 	cmp ebx, enddiskfileindex
  8510 00006AB8 0F83CAFFFFFF        <1> 	jae near nofileload
  8511 00006ABE 8A03                <1> 	mov al, [ebx]
  8512 00006AC0 3C00                <1> 	cmp al, 0
  8513 00006AC2 75ED                <1> 	jne eqfilefind
  8514 00006AC4 43                  <1> 	inc ebx
  8515                              <1> equalfilenames:
  8516 00006AC5 8B4304              <1> 	mov eax, [ebx + 4] 	;put file size in eax
  8517 00006AC8 8B1B                <1> 	mov ebx, [ebx]		;put file beginning in ebx
  8518 00006ACA 031D[7E8F0000]      <1> 	add ebx, [lbaad]	;add offset to solleros start
  8519 00006AD0 31C9                <1> 	xor ecx, ecx
  8520 00006AD2 88C1                <1> 	mov cl, al			;get excess number of sectors
  8521 00006AD4 C0E102              <1> 	shl cl, 2
  8522 00006AD7 C0E902              <1> 	shr cl, 2			;cut off at 64
  8523 00006ADA 29C8                <1> 	sub eax, ecx		;get rid of excess sectors
  8524 00006ADC B500                <1> 	mov ch, 0			;drive 0
  8525 00006ADE C1E806              <1> 	shr eax, 6			;get number of 64 sector tracks
  8526                              <1> loaddiskfile:			;tracks in eax, excess sectors in cl, drive in ch, buffer in esi, address in ebx
  8527 00006AE1 A3[236B0000]        <1> 	mov [filetracks], eax
  8528 00006AE6 89F7                <1> 	mov edi, esi		;just in case cl is 0
  8529 00006AE8 89DA                <1> 	mov edx, ebx
  8530 00006AEA 80F900              <1> 	cmp cl, 0
  8531 00006AED 7405                <1> 	je copytracksforfile
  8532 00006AEF E882FEFFFF          <1> 	call diskr	;take care of excess sectors
  8533                              <1> copytracksforfile:
  8534 00006AF4 A1[236B0000]        <1> 	mov eax, [filetracks]
  8535 00006AF9 3D00000000          <1> 	cmp eax, 0
  8536 00006AFE 7419                <1> 	je donecopyfile
  8537 00006B00 48                  <1> 	dec eax
  8538 00006B01 A3[236B0000]        <1> 	mov [filetracks], eax
  8539 00006B06 89D3                <1> 	mov ebx, edx	;get end lba
  8540 00006B08 B140                <1> 	mov cl, 0x40 ;for compatability with BIOS it uses 64 instead of 128
  8541 00006B0A 8A2D[7D8F0000]      <1> 	mov ch, [DriveNumber]
  8542 00006B10 89FE                <1> 	mov esi, edi	;reset buffer
  8543 00006B12 E85FFEFFFF          <1> 	call diskr
  8544 00006B17 EBDB                <1> 	jmp copytracksforfile
  8545                              <1> donecopyfile:
  8546 00006B19 BA00000000          <1> 	mov edx, 0	;no error
  8547 00006B1E C3                  <1> 	ret
  8548                              <1> 
  8549 00006B1F 00000000            <1> oldesireal dd 0
  8550 00006B23 00000000            <1> filetracks dd 0
  8551 00006B27 00                  <1> lbad1 db 0
  8552 00006B28 00                  <1> lbad2 db 0
  8553 00006B29 00                  <1> lbad3 db 0
  8554 00006B2A 00                  <1> lbad4 db 0
  8555 00006B2B 00                  <1> lbad5 db 0
  8556 00006B2C 00                  <1> lbad6 db 0
  8557 00006B2D 6400                <1> segments dw 100
  8558                              <1> %endif
  8559                                      %include "source/threads.asm"
  8560                              <1> %ifdef threads.included	
  8561                              <1> nwcmdst:
  8562 00006B2F 31C0                <1> 	xor eax, eax
  8563 00006B31 BC[78A30300]        <1> 	mov esp, stackend
  8564 00006B36 A2[F36B0000]        <1> 	mov [threadson], al
  8565 00006B3B A3[F46B0000]        <1> 	mov [currentthread], eax
  8566 00006B40 0504000000          <1> 	add eax, 4
  8567 00006B45 A3[EF6B0000]        <1> 	mov [lastthread], eax
  8568 00006B4A FB                  <1> 	sti
  8569 00006B4B E9EBC1FFFF          <1> 	jmp nwcmd
  8570                              <1> 
  8571                              <1> nomorethreadspace:
  8572 00006B50 BE[666B0000]        <1> 	mov esi, nmts
  8573 00006B55 E806B2FFFF          <1> 	call print
  8574 00006B5A C605[F36B0000]00    <1> 	mov byte [threadson], 0
  8575 00006B61 E9D5C1FFFF          <1> 	jmp nwcmd
  8576 00006B66 546872656164204F76- <1> nmts	db "Thread Overflow",10,0
  8577 00006B6F 6572666C6F770A00    <1>
  8578                              <1> 
  8579                              <1> nomorestackspace:
  8580 00006B77 BE[836B0000]        <1> 	mov esi, nmss
  8581 00006B7C E8DFB1FFFF          <1> 	call print
  8582 00006B81 EBAC                <1> 	jmp nwcmdst
  8583 00006B83 537461636B204F7665- <1> nmss	db "Stack Overflow",10,0
  8584 00006B8C 72666C6F770A00      <1>
  8585                              <1> 	
  8586                              <1> threadswitch:
  8587 00006B93 FA                  <1> 	cli
  8588 00006B94 60                  <1> 	pushad
  8589 00006B95 BF[26B42D00]        <1> 	mov edi, threadlist
  8590 00006B9A A1[F46B0000]        <1> 	mov eax, [currentthread]
  8591 00006B9F 40                  <1> 	inc eax
  8592 00006BA0 A3[F46B0000]        <1> 	mov [currentthread], eax
  8593 00006BA5 6648                <1> 	dec ax
  8594 00006BA7 C1E002              <1> 	shl eax, 2
  8595 00006BAA 01C7                <1> 	add edi, eax
  8596 00006BAC 8927                <1> 	mov [edi], esp
  8597 00006BAE 81C704000000        <1> 	add edi, 4
  8598 00006BB4 81FF[26C42D00]      <1> 	cmp edi, threadlistend
  8599 00006BBA 0F830D000000        <1> 	jae near nookespthread
  8600 00006BC0 8B07                <1> 	mov eax, [edi]
  8601 00006BC2 3D00000000          <1> 	cmp eax, 0
  8602 00006BC7 0F8519000000        <1> 	jne near okespthread
  8603                              <1> nookespthread:
  8604 00006BCD BF[26B42D00]        <1> 	mov edi, threadlist
  8605 00006BD2 31C0                <1> 	xor eax, eax
  8606 00006BD4 A3[F46B0000]        <1> 	mov [currentthread], eax
  8607 00006BD9 8B07                <1> 	mov eax, [edi]
  8608 00006BDB 3D00000000          <1> 	cmp eax, 0
  8609 00006BE0 0F8449FFFFFF        <1> 	je near nwcmdst
  8610                              <1> okespthread:
  8611 00006BE6 89C4                <1> 	mov esp, eax
  8612 00006BE8 B020                <1> 	mov al, 0x20
  8613 00006BEA E620                <1> 	out 0x20, al
  8614 00006BEC 61                  <1> 	popad
  8615 00006BED FB                  <1> 	sti
  8616 00006BEE CF                  <1> 	iret
  8617                              <1> 
  8618                              <1> %endif
  8619 00006BEF 04000000            <1> 	lastthread dd 4
  8620 00006BF3 00                  <1> 	threadson db 0
  8621 00006BF4 00000000            <1> 	currentthread dd 0
  8622                                  %ifdef gui.included
  8623                                      %include "source/gui/gui.asm"
  8624                              <1> guiboot:	;Let's see what I can do, I am going to try to make this as freestanding as possible
  8625 00006BF8 31C0                <1> 	xor eax, eax
  8626 00006BFA 31DB                <1> 	xor ebx, ebx
  8627 00006BFC 31C9                <1> 	xor ecx, ecx
  8628 00006BFE 31D2                <1> 	xor edx, edx
  8629 00006C00 E8F8080000          <1> 	call guisetup
  8630                              <1> guiloop:
  8631 00006C05 E890EEFFFF          <1> 	call cursorgui
  8632                              <1> guistart:
  8633 00006C0A E89BF4FFFF          <1> 	call getkey
  8634 00006C0F C605[25820000]00    <1> 	mov byte [copygui], 0
  8635 00006C16 EBF2                <1> 	jmp guistart
  8636                              <1> 
  8637                              <1> %include "source/gui/bmp.asm"
  8638                              <2> showbmp:
  8639 00006C18 668B06              <2> 	mov ax, [esi]
  8640 00006C1B 663D424D            <2> 	cmp ax, "BM"
  8641 00006C1F 0F85BB000000        <2> 	jne near endedbmp
  8642 00006C25 8B3D[BD590000]      <2> 	mov edi, [physbaseptr]
  8643 00006C2B 6689D0              <2> 	mov ax, dx
  8644 00006C2E 6689CB              <2> 	mov bx, cx
  8645 00006C31 31C9                <2> 	xor ecx, ecx
  8646 00006C33 31D2                <2> 	xor edx, edx
  8647 00006C35 6689D9              <2> 	mov cx, bx
  8648 00006C38 6689C2              <2> 	mov dx, ax
  8649 00006C3B 01D7                <2> 	add edi, edx
  8650 00006C3D 01D7                <2> 	add edi, edx
  8651 00006C3F 31D2                <2> 	xor edx, edx
  8652 00006C41 668B15[955A0000]    <2> 	mov dx, [resolutionx2]
  8653 00006C48 034E16              <2> 	add ecx, [esi + 22]
  8654                              <2> bmplocloop:
  8655 00006C4B 52                  <2> 	push edx
  8656 00006C4C 31C0                <2> 	xor eax, eax
  8657 00006C4E 6689D0              <2> 	mov ax, dx
  8658 00006C51 F7E1                <2> 	mul ecx
  8659 00006C53 5A                  <2> 	pop edx
  8660 00006C54 663B0D[A9590000]    <2> 	cmp cx, [resolutiony]
  8661 00006C5B 7609                <2> 	jbe .nofixy
  8662 00006C5D 31C9                <2> 	xor ecx, ecx
  8663 00006C5F 668B0D[A9590000]    <2> 	mov cx, [resolutiony]
  8664                              <2> .nofixy:
  8665 00006C66 01C7                <2> 	add edi, eax
  8666 00006C68 8B5612              <2> 	mov edx, [esi + 18]
  8667 00006C6B 8B4E16              <2> 	mov ecx, [esi + 22]
  8668 00006C6E 8B460A              <2> 	mov eax, [esi + 10]
  8669 00006C71 8B5E02              <2> 	mov ebx, [esi + 2]
  8670 00006C74 01F3                <2> 	add ebx, esi
  8671 00006C76 891D[E66C0000]      <2> 	mov [bmpend], ebx
  8672 00006C7C 89D3                <2> 	mov ebx, edx
  8673 00006C7E 01C6                <2> 	add esi, eax
  8674                              <2> ldxbmp2:
  8675 00006C80 31D2                <2> 	xor edx, edx
  8676 00006C82 668B15[A7590000]    <2> 	mov dx, [resolutionx]
  8677 00006C89 39D3                <2> 	cmp ebx, edx
  8678 00006C8B 7702                <2> 	ja ldxbmp
  8679 00006C8D 89DA                <2> 	mov edx, ebx
  8680                              <2> ldxbmp:
  8681 00006C8F 668B06              <2> 	mov ax, [esi]
  8682 00006C92 668907              <2> 	mov [edi], ax
  8683 00006C95 81C702000000        <2> 	add edi, 2
  8684 00006C9B 81C602000000        <2> 	add esi, 2
  8685 00006CA1 3B35[E66C0000]      <2> 	cmp esi, [bmpend]
  8686 00006CA7 7737                <2> 	ja endedbmp
  8687 00006CA9 4A                  <2> 	dec edx
  8688 00006CAA 81FA00000000        <2> 	cmp edx, 0
  8689 00006CB0 77DD                <2> 	ja ldxbmp
  8690 00006CB2 31D2                <2> 	xor edx, edx
  8691 00006CB4 668B15[A7590000]    <2> 	mov dx, [resolutionx]
  8692 00006CBB 39D3                <2> 	cmp ebx, edx
  8693 00006CBD 7610                <2> 	jbe .notover
  8694                              <2> .over:
  8695 00006CBF 01DE                <2> 	add esi, ebx
  8696 00006CC1 01DE                <2> 	add esi, ebx
  8697 00006CC3 29D6                <2> 	sub esi, edx
  8698 00006CC5 29D6                <2> 	sub esi, edx
  8699 00006CC7 01DF                <2> 	add edi, ebx
  8700 00006CC9 01DF                <2> 	add edi, ebx
  8701 00006CCB 29D7                <2> 	sub edi, edx
  8702 00006CCD 29D7                <2> 	sub edi, edx
  8703                              <2> .notover:
  8704 00006CCF 29DF                <2> 	sub edi, ebx
  8705 00006CD1 29DF                <2> 	sub edi, ebx
  8706 00006CD3 29D7                <2> 	sub edi, edx
  8707 00006CD5 29D7                <2> 	sub edi, edx
  8708 00006CD7 49                  <2> 	dec ecx
  8709 00006CD8 81F900000000        <2> 	cmp ecx, 0
  8710 00006CDE 77A0                <2> 	ja ldxbmp2
  8711                              <2> endedbmp:
  8712 00006CE0 E888030000          <2> 	call switchmousepos2
  8713 00006CE5 C3                  <2> 	ret
  8714                              <2> 	
  8715 00006CE6 00000000            <2> 	bmpend dd 0
  8716                              <1> %include "source/gui/circle.asm"
  8717                              <2> drawcircle:	;center in (dx,cx), color in si, radius in ax
  8718 00006CEA 55                  <2> 	push ebp
  8719 00006CEB 663D0000            <2> 	cmp ax, 0
  8720 00006CEF 770A                <2> 	ja .nozerocircle
  8721 00006CF1 E8491D0000          <2> 	call putpixel	;the easiest circle ever
  8722 00006CF6 E9F7000000          <2> 	jmp .done
  8723                              <2> .nozerocircle:
  8724 00006CFB 6689F5              <2> 	mov bp, si
  8725 00006CFE 6650                <2> 	push ax
  8726 00006D00 E87B1D0000          <2> 	call getpixelmem
  8727 00006D05 31C0                <2> 	xor eax, eax
  8728 00006D07 6658                <2> 	pop ax
  8729 00006D09 BE01000000          <2> 	mov esi, 1
  8730 00006D0E 29C6                <2> 	sub esi, eax
  8731 00006D10 89C1                <2> 	mov ecx, eax
  8732 00006D12 31C0                <2> 	xor eax, eax
  8733 00006D14 66A1[955A0000]      <2> 	mov ax, [resolutionx2]
  8734 00006D1A F7E1                <2> 	mul ecx
  8735 00006D1C 50                  <2> 	push eax
  8736 00006D1D 31D2                <2> 	xor edx, edx
  8737 00006D1F 01C7                <2> 	add edi, eax
  8738 00006D21 66892F              <2> 	mov [edi], bp
  8739 00006D24 29C7                <2> 	sub edi, eax
  8740 00006D26 29C7                <2> 	sub edi, eax
  8741 00006D28 66892F              <2> 	mov [edi], bp
  8742 00006D2B 01C7                <2> 	add edi, eax
  8743 00006D2D D1E1                <2> 	shl ecx, 1
  8744 00006D2F 01CF                <2> 	add edi, ecx
  8745 00006D31 66892F              <2> 	mov [edi], bp
  8746 00006D34 D1E1                <2> 	shl ecx, 1
  8747 00006D36 29CF                <2> 	sub edi, ecx
  8748 00006D38 66892F              <2> 	mov [edi], bp
  8749 00006D3B D1E9                <2> 	shr ecx, 1
  8750 00006D3D 01CF                <2> 	add edi, ecx
  8751 00006D3F D1E9                <2> 	shr ecx, 1
  8752 00006D41 B802000000          <2> 	mov eax, 2
  8753 00006D46 F7E1                <2> 	mul ecx
  8754 00006D48 48                  <2> 	dec eax
  8755 00006D49 F7D0                <2> 	not eax ;make it negative
  8756 00006D4B A3[F86D0000]        <2> 	mov [.ddF_y], eax
  8757 00006D50 58                  <2> 	pop eax
  8758 00006D51 BB01000000          <2> 	mov ebx, 1
  8759 00006D56 891D[F46D0000]      <2> 	mov [.ddF_x], ebx
  8760 00006D5C 4B                  <2> 	dec ebx
  8761 00006D5D 31D2                <2> 	xor edx, edx
  8762 00006D5F E904000000          <2> 	jmp .lp
  8763                              <2> .lpb:
  8764 00006D64 D1EA                <2> 	shr edx, 1
  8765 00006D66 D1E9                <2> 	shr ecx, 1
  8766                              <2> .lp:	;it starts this with the center in edi
  8767                              <2> 		;color in bp
  8768                              <2> 		;ddF_x in memory
  8769                              <2> 		;x*resolutionx2 in ebx
  8770                              <2> 		;x in edx
  8771                              <2> 		;ddF_y in memory
  8772                              <2> 		;y*resolutionx2 in eax
  8773                              <2> 		;f in esi
  8774                              <2> 		;y in ecx
  8775 00006D68 81FE00000080        <2> 	cmp esi, 0x80000000 ;this means it is not negative
  8776 00006D6E 7717                <2> 	ja	.noddF_y
  8777 00006D70 49                  <2> 	dec ecx
  8778 00006D71 2B05[955A0000]      <2> 	sub eax, [resolutionx2]
  8779 00006D77 8105[F86D0000]0200- <2> 	add dword [.ddF_y], 2
  8780 00006D7F 0000                <2>
  8781 00006D81 0335[F86D0000]      <2> 	add esi, [.ddF_y]
  8782                              <2> .noddF_y:
  8783 00006D87 42                  <2> 	inc edx
  8784 00006D88 031D[955A0000]      <2> 	add ebx, [resolutionx2]
  8785 00006D8E 8105[F46D0000]0200- <2> 	add dword [.ddF_x], 2
  8786 00006D96 0000                <2>
  8787 00006D98 0335[F46D0000]      <2> 	add esi, [.ddF_x]
  8788                              <2> 
  8789 00006D9E D1E2                <2> 	shl edx, 1
  8790 00006DA0 D1E1                <2> 	shl ecx, 1
  8791 00006DA2 01D7                <2> 	add edi, edx
  8792 00006DA4 01C7                <2> 	add edi, eax
  8793 00006DA6 66892F              <2> 	mov [edi], bp	;(cx+x,cy+y)
  8794 00006DA9 D1E2                <2> 	shl edx, 1
  8795 00006DAB 29D7                <2> 	sub edi, edx
  8796 00006DAD 66892F              <2> 	mov [edi], bp	;(cx-x,cy+y)
  8797 00006DB0 D1E0                <2> 	shl eax, 1
  8798 00006DB2 29C7                <2> 	sub edi, eax
  8799 00006DB4 66892F              <2> 	mov [edi], bp	;(cx-x,cy-y)
  8800 00006DB7 01D7                <2> 	add edi, edx
  8801 00006DB9 66892F              <2> 	mov [edi], bp	;(cx+x,cy-y)
  8802 00006DBC D1E8                <2> 	shr eax, 1
  8803 00006DBE D1EA                <2> 	shr edx, 1
  8804 00006DC0 01C7                <2> 	add edi, eax
  8805 00006DC2 29D7                <2> 	sub edi, edx
  8806                              <2> 
  8807 00006DC4 39D1                <2> 	cmp ecx, edx
  8808 00006DC6 749C                <2> 	je .lpb
  8809                              <2> 
  8810 00006DC8 01DF                <2> 	add edi, ebx
  8811 00006DCA 01CF                <2> 	add edi, ecx
  8812 00006DCC 66892F              <2> 	mov [edi], bp	;(cx+y,cy+x)
  8813 00006DCF D1E1                <2> 	shl ecx, 1
  8814 00006DD1 29CF                <2> 	sub edi, ecx
  8815 00006DD3 66892F              <2> 	mov [edi], bp	;(cx-y,cy+x)
  8816 00006DD6 D1E3                <2> 	shl ebx, 1
  8817 00006DD8 29DF                <2> 	sub edi, ebx
  8818 00006DDA 66892F              <2> 	mov [edi], bp	;(cx-y,cy-x)
  8819 00006DDD 01CF                <2> 	add edi, ecx
  8820 00006DDF 66892F              <2> 	mov [edi], bp	;(cx+y,cy-x)
  8821 00006DE2 D1EB                <2> 	shr ebx, 1
  8822 00006DE4 D1E9                <2> 	shr ecx, 1
  8823 00006DE6 01DF                <2> 	add edi, ebx
  8824 00006DE8 29CF                <2> 	sub edi, ecx
  8825 00006DEA 39CA                <2> 	cmp edx, ecx
  8826 00006DEC 0F8272FFFFFF        <2> 	jb .lpb
  8827                              <2> .done:
  8828 00006DF2 5D                  <2> 	pop ebp
  8829 00006DF3 C3                  <2> 	ret
  8830                              <2> 	
  8831 00006DF4 00000000            <2> .ddF_x dd 0
  8832 00006DF8 00000000            <2> .ddF_y dd 0
  8833                              <2> 
  8834                              <2> fillcircle:	;center in (dx,cx), color in si, radius in ax
  8835 00006DFC 55                  <2> 	push ebp
  8836 00006DFD 663D0000            <2> 	cmp ax, 0
  8837 00006E01 770A                <2> 	ja .nozerocircle
  8838 00006E03 E8371C0000          <2> 	call putpixel	;the easiest circle ever
  8839 00006E08 E95A010000          <2> 	jmp .done
  8840                              <2> .nozerocircle:
  8841 00006E0D 6689F5              <2> 	mov bp, si
  8842 00006E10 6650                <2> 	push ax
  8843 00006E12 E8691C0000          <2> 	call getpixelmem
  8844 00006E17 31C0                <2> 	xor eax, eax
  8845 00006E19 6658                <2> 	pop ax
  8846 00006E1B BE01000000          <2> 	mov esi, 1
  8847 00006E20 29C6                <2> 	sub esi, eax
  8848 00006E22 89C1                <2> 	mov ecx, eax
  8849 00006E24 31C0                <2> 	xor eax, eax
  8850 00006E26 66A1[955A0000]      <2> 	mov ax, [resolutionx2]
  8851 00006E2C F7E1                <2> 	mul ecx
  8852 00006E2E 50                  <2> 	push eax
  8853 00006E2F 31D2                <2> 	xor edx, edx
  8854 00006E31 01C7                <2> 	add edi, eax
  8855 00006E33 66892F              <2> 	mov [edi], bp
  8856 00006E36 29C7                <2> 	sub edi, eax
  8857 00006E38 29C7                <2> 	sub edi, eax
  8858 00006E3A 66892F              <2> 	mov [edi], bp
  8859 00006E3D 01C7                <2> 	add edi, eax
  8860 00006E3F D1E1                <2> 	shl ecx, 1
  8861 00006E41 01CF                <2> 	add edi, ecx
  8862 00006E43 51                  <2> 	push ecx
  8863                              <2> .s0:
  8864 00006E44 66892F              <2> 	mov [edi], bp
  8865 00006E47 81EF02000000        <2> 	sub edi, 2
  8866 00006E4D 49                  <2> 	dec ecx
  8867 00006E4E 81F900000000        <2> 	cmp ecx, 0
  8868 00006E54 75EE                <2> 	jne .s0
  8869 00006E56 66892F              <2> 	mov [edi], bp
  8870 00006E59 59                  <2> 	pop ecx
  8871 00006E5A 01CF                <2> 	add edi, ecx
  8872 00006E5C D1E9                <2> 	shr ecx, 1
  8873 00006E5E B802000000          <2> 	mov eax, 2
  8874 00006E63 F7E1                <2> 	mul ecx
  8875 00006E65 48                  <2> 	dec eax
  8876 00006E66 F7D0                <2> 	not eax ;make it negative
  8877 00006E68 A3[6D6F0000]        <2> 	mov [.ddF_y], eax
  8878 00006E6D 58                  <2> 	pop eax
  8879 00006E6E BB01000000          <2> 	mov ebx, 1
  8880 00006E73 891D[696F0000]      <2> 	mov [.ddF_x], ebx
  8881 00006E79 4B                  <2> 	dec ebx
  8882 00006E7A 31D2                <2> 	xor edx, edx
  8883 00006E7C E904000000          <2> 	jmp .lp
  8884                              <2> .lpb:
  8885 00006E81 D1EA                <2> 	shr edx, 1
  8886 00006E83 D1E9                <2> 	shr ecx, 1
  8887                              <2> .lp:	;it starts this with the center in edi
  8888                              <2> 		;color in bp
  8889                              <2> 		;ddF_x in memory
  8890                              <2> 		;x*resolutionx2 in ebx
  8891                              <2> 		;x in edx
  8892                              <2> 		;ddF_y in memory
  8893                              <2> 		;y*resolutionx2 in eax
  8894                              <2> 		;f in esi
  8895                              <2> 		;y in ecx
  8896 00006E85 81FE00000080        <2> 	cmp esi, 0x80000000 ;this means it is not negative
  8897 00006E8B 7717                <2> 	ja	.noddF_y
  8898 00006E8D 49                  <2> 	dec ecx
  8899 00006E8E 2B05[955A0000]      <2> 	sub eax, [resolutionx2]
  8900 00006E94 8105[6D6F0000]0200- <2> 	add dword [.ddF_y], 2
  8901 00006E9C 0000                <2>
  8902 00006E9E 0335[6D6F0000]      <2> 	add esi, [.ddF_y]
  8903                              <2> .noddF_y:
  8904 00006EA4 42                  <2> 	inc edx
  8905 00006EA5 031D[955A0000]      <2> 	add ebx, [resolutionx2]
  8906 00006EAB 8105[696F0000]0200- <2> 	add dword [.ddF_x], 2
  8907 00006EB3 0000                <2>
  8908 00006EB5 0335[696F0000]      <2> 	add esi, [.ddF_x]
  8909                              <2> 
  8910 00006EBB D1E2                <2> 	shl edx, 1
  8911 00006EBD D1E1                <2> 	shl ecx, 1
  8912 00006EBF 52                  <2> 	push edx
  8913 00006EC0 29D7                <2> 	sub edi, edx
  8914 00006EC2 01C7                <2> 	add edi, eax
  8915 00006EC4 81FA00000000        <2> 	cmp edx, 0
  8916 00006ECA 7412                <2> 	je .nos1
  8917                              <2> .s1:
  8918 00006ECC 66892F              <2> 	mov [edi], bp	;(cx-x,cy+y)
  8919 00006ECF 81C702000000        <2> 	add edi, 2
  8920 00006ED5 4A                  <2> 	dec edx
  8921 00006ED6 81FA00000000        <2> 	cmp edx, 0
  8922 00006EDC 75EE                <2> 	jne .s1
  8923                              <2> .nos1:
  8924 00006EDE 66892F              <2> 	mov [edi], bp
  8925 00006EE1 5A                  <2> 	pop edx
  8926 00006EE2 52                  <2> 	push edx
  8927 00006EE3 29C7                <2> 	sub edi, eax
  8928 00006EE5 29C7                <2> 	sub edi, eax
  8929 00006EE7 81FA00000000        <2> 	cmp edx, 0
  8930 00006EED 7412                <2> 	je .nos2
  8931                              <2> .s2:
  8932 00006EEF 66892F              <2> 	mov [edi], bp	;(cx+x,cy-y)
  8933 00006EF2 81EF02000000        <2> 	sub edi, 2
  8934 00006EF8 4A                  <2> 	dec edx
  8935 00006EF9 81FA00000000        <2> 	cmp edx, 0
  8936 00006EFF 75EE                <2> 	jne .s2
  8937                              <2> .nos2:
  8938 00006F01 66892F              <2> 	mov [edi], bp
  8939 00006F04 5A                  <2> 	pop edx
  8940 00006F05 01C7                <2> 	add edi, eax	;(cx-x,cy-y)
  8941 00006F07 01D7                <2> 	add edi, edx
  8942                              <2> 
  8943 00006F09 39D1                <2> 	cmp ecx, edx
  8944 00006F0B 0F8470FFFFFF        <2> 	je .lpb
  8945                              <2> 
  8946 00006F11 51                  <2> 	push ecx
  8947 00006F12 01DF                <2> 	add edi, ebx
  8948 00006F14 29CF                <2> 	sub edi, ecx
  8949 00006F16 81F900000000        <2> 	cmp ecx, 0
  8950 00006F1C 7412                <2> 	je .nos3
  8951                              <2> .s3:
  8952 00006F1E 66892F              <2> 	mov [edi], bp	;(cx-y,cy+x)
  8953 00006F21 81C702000000        <2> 	add edi, 2
  8954 00006F27 49                  <2> 	dec ecx
  8955 00006F28 81F900000000        <2> 	cmp ecx, 0
  8956 00006F2E 75EE                <2> 	jne .s3
  8957                              <2> .nos3:
  8958 00006F30 66892F              <2> 	mov [edi], bp
  8959 00006F33 59                  <2> 	pop ecx
  8960 00006F34 51                  <2> 	push ecx
  8961 00006F35 29DF                <2> 	sub edi, ebx
  8962 00006F37 29DF                <2> 	sub edi, ebx
  8963 00006F39 81F900000000        <2> 	cmp ecx, 0
  8964 00006F3F 7412                <2> 	je .nos4
  8965                              <2> .s4:
  8966 00006F41 66892F              <2> 	mov [edi], bp	;(cx+y,cy-x)
  8967 00006F44 81EF02000000        <2> 	sub edi, 2
  8968 00006F4A 49                  <2> 	dec ecx
  8969 00006F4B 81F900000000        <2> 	cmp ecx, 0
  8970 00006F51 75EE                <2> 	jne .s4
  8971                              <2> .nos4:
  8972 00006F53 66892F              <2> 	mov [edi], bp
  8973 00006F56 59                  <2> 	pop ecx
  8974 00006F57 01DF                <2> 	add edi, ebx	;(cx-y,cy-x)
  8975 00006F59 01CF                <2> 	add edi, ecx
  8976                              <2> 
  8977 00006F5B D1EA                <2> 	shr edx, 1
  8978 00006F5D D1E9                <2> 	shr ecx, 1
  8979 00006F5F 39CA                <2> 	cmp edx, ecx
  8980 00006F61 0F821EFFFFFF        <2> 	jb .lp
  8981                              <2> .done:
  8982 00006F67 5D                  <2> 	pop ebp
  8983 00006F68 C3                  <2> 	ret
  8984                              <2> 	
  8985 00006F69 00000000            <2> .ddF_x dd 0
  8986 00006F6D 00000000            <2> .ddF_y dd 0
  8987                              <1> %include "source/gui/cursor.asm"
  8988                              <2> clearmousecursor:
  8989 00006F71 BE[60730000]        <2> 		mov esi, background
  8990 00006F76 8B3D[BD590000]      <2> 		mov edi, [physbaseptr]
  8991 00006F7C 31D2                <2> 		xor edx, edx
  8992 00006F7E 31C9                <2> 		xor ecx, ecx
  8993 00006F80 668B15[875C0000]    <2> 		mov dx, [lastmouseposition]
  8994 00006F87 668B0D[895C0000]    <2> 		mov cx, [lastmouseposition + 2]
  8995 00006F8E 01D7                <2> 		add edi, edx
  8996 00006F90 31D2                <2> 		xor edx, edx
  8997 00006F92 668B15[955A0000]    <2> 		mov dx, [resolutionx2]
  8998 00006F99 81F900000000        <2> 		cmp ecx, 0
  8999 00006F9F 7408                <2> 		je .nomul
  9000 00006FA1 52                  <2> 		push edx
  9001 00006FA2 89D0                <2> 		mov eax, edx
  9002 00006FA4 F7E1                <2> 		mul ecx
  9003 00006FA6 01C7                <2> 		add edi, eax
  9004 00006FA8 5A                  <2> 		pop edx
  9005                              <2> .nomul:
  9006                              <2> %ifdef 	gui.background
  9007 00006FA9 813D[32730000]0000- <2> 		cmp dword [backgroundimage], 0
  9008 00006FB1 0000                <2>
  9009 00006FB3 7438                <2> 		je .noyclr
  9010 00006FB5 8B35[32730000]      <2> 		mov esi, [backgroundimage]
  9011 00006FBB 2B3D[BD590000]      <2> 		sub edi, [physbaseptr]
  9012 00006FC1 01FE                <2> 		add esi, edi
  9013 00006FC3 033D[BD590000]      <2> 		add edi, [physbaseptr]
  9014                              <2> .backlp:
  9015 00006FC9 31DB                <2> 		xor ebx, ebx
  9016                              <2> .noyback:
  9017 00006FCB 8B041E              <2> 		mov eax, [esi + ebx]
  9018 00006FCE 89041F              <2> 		mov [edi + ebx], eax
  9019 00006FD1 81C304000000        <2> 		add ebx, 4
  9020 00006FD7 81FB10000000        <2> 		cmp ebx, 16
  9021 00006FDD 75EC                <2> 		jne .noyback
  9022 00006FDF 01D7                <2> 		add edi, edx
  9023 00006FE1 01D6                <2> 		add esi, edx
  9024 00006FE3 6641                <2> 		inc cx
  9025 00006FE5 6681F91000          <2> 		cmp cx, 16
  9026 00006FEA 72DD                <2> 		jb .backlp
  9027 00006FEC C3                  <2> 		ret
  9028                              <2> %endif
  9029                              <2> .noyclr:
  9030 00006FED 668B06              <2> 		mov ax, [esi]
  9031 00006FF0 C1C010              <2> 		rol eax, 16
  9032 00006FF3 668B06              <2> 		mov ax, [esi]
  9033 00006FF6 8907                <2> 		mov [edi], eax
  9034 00006FF8 894704              <2> 		mov [edi + 4], eax
  9035 00006FFB 894708              <2> 		mov [edi + 8], eax
  9036 00006FFE 89470C              <2> 		mov [edi + 12], eax
  9037 00007001 01D7                <2> 		add edi, edx
  9038 00007003 6641                <2> 		inc cx
  9039 00007005 6681F91000          <2> 		cmp cx, 16
  9040 0000700A 72E1                <2> 		jb .noyclr
  9041 0000700C C3                  <2> 		ret
  9042                              <2> 
  9043                              <2> switchmousepos:		;;switch were the mouse is located
  9044 0000700D BE[71D82B00]        <2> 		mov esi, mousecolorbuf
  9045 00007012 8B3D[BD590000]      <2> 		mov edi, [physbaseptr]
  9046 00007018 31D2                <2> 		xor edx, edx
  9047 0000701A 31C9                <2> 		xor ecx, ecx
  9048 0000701C 668B15[875C0000]    <2> 		mov dx, [lastmouseposition]
  9049 00007023 668B0D[895C0000]    <2> 		mov cx, [lastmouseposition + 2]
  9050 0000702A 01D7                <2> 		add edi, edx
  9051 0000702C 31D2                <2> 		xor edx, edx
  9052 0000702E 668B15[955A0000]    <2> 		mov dx, [resolutionx2]
  9053 00007035 6681F90000          <2> 		cmp cx, 0
  9054 0000703A 740B                <2> 		je noswmsy
  9055 0000703C 01D7                <2> swmsy:		add edi, edx
  9056 0000703E 6649                <2> 		dec cx
  9057 00007040 6681F90000          <2> 		cmp cx, 0
  9058 00007045 75F5                <2> 		jne swmsy
  9059 00007047 8B06                <2> noswmsy:	mov eax, [esi]
  9060 00007049 8B5E04              <2> 		mov ebx, [esi + 4]
  9061 0000704C 8907                <2> 		mov [edi], eax
  9062 0000704E 895F04              <2> 		mov [edi + 4], ebx
  9063 00007051 8B4608              <2> 		mov eax, [esi + 8]
  9064 00007054 8B5E0C              <2> 		mov ebx, [esi + 12]
  9065 00007057 894708              <2> 		mov [edi + 8], eax
  9066 0000705A 895F0C              <2> 		mov [edi + 12], ebx
  9067 0000705D 01D7                <2> 		add edi, edx
  9068 0000705F 81C610000000        <2> 		add esi, 16
  9069 00007065 81FE[71D92B00]      <2> 		cmp esi, mcolorend
  9070 0000706B 72DA                <2> 		jb noswmsy
  9071                              <2> 		
  9072                              <2> switchmousepos2:
  9073 0000706D BE[71D82B00]        <2> 		mov esi, mousecolorbuf
  9074 00007072 8B3D[BD590000]      <2> 		mov edi, [physbaseptr]
  9075 00007078 31D2                <2> 		xor edx, edx
  9076 0000707A 31C9                <2> 		xor ecx, ecx
  9077 0000707C 668B15[8B5C0000]    <2> 		mov dx, [mousecursorposition]
  9078 00007083 668B0D[8D5C0000]    <2> 		mov cx, [mousecursorposition + 2]
  9079 0000708A 01D7                <2> 		add edi, edx
  9080 0000708C 31D2                <2> 		xor edx, edx
  9081 0000708E 668B15[955A0000]    <2> 		mov dx, [resolutionx2]
  9082 00007095 6681F90000          <2> 		cmp cx, 0
  9083 0000709A 740B                <2> 		je noswmsy2
  9084 0000709C 01D7                <2> swmsy2:		add edi, edx
  9085 0000709E 6649                <2> 		dec cx
  9086 000070A0 6681F90000          <2> 		cmp cx, 0
  9087 000070A5 75F5                <2> 		jne swmsy2
  9088 000070A7 8B07                <2> noswmsy2:	mov eax, [edi]
  9089 000070A9 8B5F04              <2> 		mov ebx, [edi + 4]
  9090 000070AC 8906                <2> 		mov [esi], eax
  9091 000070AE 895E04              <2> 		mov [esi + 4], ebx
  9092 000070B1 8B4708              <2> 		mov eax, [edi + 8]
  9093 000070B4 8B5F0C              <2> 		mov ebx, [edi + 12]
  9094 000070B7 894608              <2> 		mov [esi + 8], eax
  9095 000070BA 895E0C              <2> 		mov [esi + 12], ebx
  9096 000070BD 01D7                <2> 		add edi, edx
  9097 000070BF 81C610000000        <2> 		add esi, 16
  9098 000070C5 81FE[71D92B00]      <2> 		cmp esi, mcolorend
  9099 000070CB 72DA                <2> 		jb noswmsy2
  9100 000070CD C3                  <2> 		ret
  9101                              <2> 		
  9102                              <1> %include "source/gui/icon.asm"
  9103 000070CE 0000                <2> iconcolor dw 0
  9104                              <2> 	showicon:	;;icon in si, position in (dx,cx), selected in ax, code in bx
  9105 000070D0 A2[A88A0000]        <2> 		mov [iconselected], al
  9106 000070D5 8025[A88A0000]01    <2> 		and byte [iconselected], 1
  9107 000070DC B401                <2> 		mov ah, 1
  9108 000070DE E8C9160000          <2> 		call graphicsadd
  9109                              <2> 	showicon2:
  9110 000070E3 8B3D[BD590000]      <2> 		mov edi, [physbaseptr]
  9111 000070E9 6601D2              <2> 		add dx, dx
  9112 000070EC 663B15[955A0000]    <2> 		cmp dx, [resolutionx2]
  9113 000070F3 720C                <2> 		jb screenxgood
  9114 000070F5 668B15[955A0000]    <2> 		mov dx, [resolutionx2]
  9115 000070FC 6681EA4000          <2> 		sub dx, 64
  9116                              <2> 	screenxgood:
  9117 00007101 6681F90000          <2> 		cmp cx, 0
  9118 00007106 742B                <2> 		je noscreenygoodchk
  9119 00007108 663B0D[A9590000]    <2> 		cmp cx, [resolutiony]
  9120 0000710F 720C                <2> 		jb screenygood
  9121 00007111 668B0D[A9590000]    <2> 		mov cx, [resolutiony]
  9122 00007118 6681E92000          <2> 		sub cx, 32
  9123                              <2> 	screenygood:
  9124 0000711D 50                  <2> 		push eax
  9125 0000711E 52                  <2> 		push edx
  9126 0000711F 31C0                <2> 		xor eax, eax
  9127 00007121 31DB                <2> 		xor ebx, ebx
  9128 00007123 668B1D[955A0000]    <2> 		mov bx, [resolutionx2]
  9129 0000712A 6689C8              <2> 		mov ax, cx
  9130 0000712D F7E3                <2> 		mul ebx
  9131 0000712F 01C7                <2> 		add edi, eax
  9132 00007131 5A                  <2> 		pop edx
  9133 00007132 58                  <2> 		pop eax
  9134                              <2> 	noscreenygoodchk:
  9135 00007133 31DB                <2> 		xor ebx, ebx
  9136 00007135 6689D3              <2> 		mov bx, dx
  9137 00007138 01DF                <2> 		add edi, ebx
  9138 0000713A 6631C9              <2> 		xor cx, cx
  9139 0000713D 668B06              <2> 		mov ax, [esi]
  9140 00007140 81C602000000        <2> 		add esi, 2
  9141 00007146 66A3[CE700000]      <2> 		mov [iconcolor], ax
  9142                              <2> 	writeicon:
  9143 0000714C 8B06                <2> 		mov eax, [esi]
  9144 0000714E D1C0                <2> 		rol eax, 1
  9145 00007150 30C9                <2> 		xor cl, cl
  9146                              <2> 	writeiconline:
  9147 00007152 B201                <2> 		mov dl, 1
  9148 00007154 20C2                <2> 		and dl, al
  9149 00007156 3215[A88A0000]      <2> 		xor dl, [iconselected]
  9150 0000715C 668B1D[60730000]    <2> 		mov bx, [background]
  9151 00007163 66891F              <2> 		mov [edi], bx
  9152 00007166 80FA00              <2> 		cmp dl, 0
  9153 00007169 740A                <2> 		je noiconline
  9154 0000716B 668B15[CE700000]    <2> 		mov dx, [iconcolor]
  9155 00007172 668917              <2> 		mov [edi], dx
  9156                              <2> 	noiconline:
  9157 00007175 81C702000000        <2> 		add edi, 2
  9158 0000717B D1C0                <2> 		rol eax, 1
  9159 0000717D FEC1                <2> 		inc cl
  9160 0000717F 80F920              <2> 		cmp cl, 32
  9161 00007182 72CE                <2> 		jb writeiconline
  9162 00007184 81C604000000        <2> 		add esi, 4
  9163 0000718A FEC5                <2> 		inc ch
  9164 0000718C 31D2                <2> 		xor edx, edx
  9165 0000718E 668B15[955A0000]    <2> 		mov dx, [resolutionx2]
  9166 00007195 01D7                <2> 		add edi, edx
  9167 00007197 81EF40000000        <2> 		sub edi, 64
  9168 0000719D 80FD20              <2> 		cmp ch, 32
  9169 000071A0 72AA                <2> 		jb writeicon
  9170 000071A2 31C0                <2> 		xor eax, eax
  9171 000071A4 C3                  <2> 		ret
  9172                              <1> %include "source/gui/line.asm"
  9173                              <2> drawline:	;from (bx,ax) to (dx,cx), color in si
  9174 000071A5 668935[C7720000]    <2> 	mov [.color], si
  9175 000071AC C605[C9720000]00    <2> 	mov byte [.steep], 0
  9176 000071B3 C605[CA720000]00    <2> 	mov byte [.yreversed], 0
  9177 000071BA E907000000          <2> 	jmp .notsteep
  9178                              <2> .steeploop:
  9179 000071BF C605[C9720000]01    <2> 	mov byte [.steep], 1
  9180                              <2> .notsteep:
  9181 000071C6 31FF                <2> 	xor edi, edi
  9182 000071C8 31F6                <2> 	xor esi, esi
  9183 000071CA 6639DA              <2> 	cmp dx, bx
  9184 000071CD 7705                <2> 	ja .noreversex
  9185 000071CF 6687D3              <2> 	xchg dx, bx
  9186 000071D2 6691                <2> 	xchg cx, ax
  9187                              <2> .noreversex:
  9188 000071D4 6689D7              <2> 	mov di, dx
  9189 000071D7 6629DF              <2> 	sub di, bx
  9190                              <2> 	
  9191 000071DA 6639C1              <2> 	cmp cx, ax
  9192 000071DD 720B                <2> 	jb .reversey
  9193 000071DF 6689CE              <2> 	mov si, cx
  9194 000071E2 6629C6              <2> 	sub si, ax
  9195 000071E5 E90D000000          <2> 	jmp .normal
  9196                              <2> .reversey:
  9197 000071EA C605[CA720000]02    <2> 	mov byte [.yreversed], 2
  9198 000071F1 6689C6              <2> 	mov si, ax
  9199 000071F4 6629CE              <2> 	sub si, cx	
  9200                              <2> .normal:
  9201 000071F7 6687CA              <2> 	xchg cx, dx
  9202 000071FA 6693                <2> 	xchg ax, bx
  9203 000071FC 6639FE              <2> 	cmp si, di
  9204 000071FF 77BE                <2> 	ja .steeploop
  9205 00007201 6687CA              <2> 	xchg cx, dx
  9206 00007204 6693                <2> 	xchg ax, bx
  9207                              <2> 	
  9208 00007206 6691                <2> 	xchg ax, cx
  9209 00007208 6687DA              <2> 	xchg bx, dx
  9210 0000720B 66893D[CD720000]    <2> 	mov [.xdelta], di
  9211 00007212 668935[CF720000]    <2> 	mov [.ydelta], si
  9212 00007219 668B35[C7720000]    <2> 	mov si, [.color]
  9213 00007220 66891D[CB720000]    <2> 	mov [.endline], bx
  9214 00007227 6652                <2> 	push dx
  9215 00007229 6651                <2> 	push cx
  9216 0000722B 6687CA              <2> 	xchg cx, dx
  9217 0000722E 803D[C9720000]01    <2> 	cmp byte [.steep], 1
  9218 00007235 7403                <2> 	je .xchg
  9219 00007237 6687D1              <2> 	xchg dx, cx
  9220                              <2> .xchg:
  9221 0000723A E841180000          <2> 	call getpixelmem	;get pointer to pixel in edi from (dx,cx)
  9222 0000723F 6659                <2> 	pop cx
  9223 00007241 665A                <2> 	pop dx
  9224 00007243 31C0                <2> 	xor eax, eax
  9225 00007245 66A1[CD720000]      <2> 	mov ax, [.xdelta]
  9226 0000724B 66D1E8              <2> 	shr ax, 1
  9227 0000724E 8A0D[C9720000]      <2> 	mov cl, [.steep]
  9228 00007254 0A0D[CA720000]      <2> 	or cl, [.yreversed]
  9229 0000725A 55                  <2> 	push ebp
  9230 0000725B 668B2D[CB720000]    <2> 	mov bp, [.endline]
  9231 00007262 6629D5              <2> 	sub bp, dx
  9232 00007265 668B15[CF720000]    <2> 	mov dx, [.ydelta]
  9233                              <2> .lp:
  9234 0000726C 668937              <2> 	mov [edi], si
  9235 0000726F 6639D0              <2> 	cmp ax, dx
  9236 00007272 7332                <2> 	jae .noaddx
  9237 00007274 F6C102              <2> 	test cl, 2
  9238 00007277 7414                <2> 	jz .nodecy
  9239 00007279 F6C101              <2> 	test cl, 1
  9240 0000727C 7509                <2> 	jnz .steepy
  9241 0000727E 29DF                <2> 	sub edi, ebx
  9242 00007280 29DF                <2> 	sub edi, ebx
  9243 00007282 E906000000          <2> 	jmp .nodecy
  9244                              <2> .steepy:
  9245 00007287 81EF04000000        <2> 	sub edi, 4
  9246                              <2> .nodecy:
  9247 0000728D 660305[CD720000]    <2> 	add ax, [.xdelta]
  9248 00007294 F6C101              <2> 	test cl, 1
  9249 00007297 7507                <2> 	jnz .steepx
  9250 00007299 01DF                <2> 	add edi, ebx
  9251 0000729B E906000000          <2> 	jmp .noaddx
  9252                              <2> .steepx:
  9253 000072A0 81C702000000        <2> 	add edi, 2
  9254                              <2> .noaddx:
  9255 000072A6 6629D0              <2> 	sub ax, dx
  9256 000072A9 664D                <2> 	dec bp
  9257 000072AB 81C702000000        <2> 	add edi, 2
  9258 000072B1 F6C101              <2> 	test cl, 1
  9259 000072B4 7408                <2> 	jz .nosteepx
  9260 000072B6 81EF02000000        <2> 	sub edi, 2
  9261 000072BC 01DF                <2> 	add edi, ebx
  9262                              <2> .nosteepx:
  9263 000072BE 6681FD0000          <2> 	cmp bp, 0
  9264 000072C3 75A7                <2> 	jne .lp
  9265                              <2> .done:
  9266 000072C5 5D                  <2> 	pop ebp
  9267 000072C6 C3                  <2> 	ret
  9268                              <2> 	
  9269 000072C7 0000                <2> .color dw 0
  9270 000072C9 00                  <2> .steep db 0
  9271 000072CA 00                  <2> .yreversed db 0
  9272 000072CB 0000                <2> .endline dw 0
  9273 000072CD 0000                <2> .xdelta dw 0
  9274 000072CF 0000                <2> .ydelta dw 0
  9275                              <1> %include "source/gui/refresh.asm"
  9276                              <2> guiclear:
  9277 000072D1 8B3D[BD590000]      <2> 	mov edi, [physbaseptr]
  9278 000072D7 668B15[A7590000]    <2> 	mov dx, [resolutionx]
  9279 000072DE 668B0D[A9590000]    <2> 	mov cx, [resolutiony]
  9280 000072E5 668B1D[60730000]    <2> 	mov bx, [background]
  9281 000072EC 66891D[62730000]    <2> 	mov [background + 2], bx
  9282                              <2> %ifdef gui.background
  9283 000072F3 813D[32730000]0000- <2> 	cmp dword [backgroundimage], 0
  9284 000072FB 0000                <2>
  9285 000072FD 7437                <2> 	je guiclear.noback
  9286 000072FF 8B35[32730000]      <2> 		mov esi, [backgroundimage]
  9287                              <2> 	.lp:
  9288                              <2> 		;movdqa xmm0, [esi]	;the next 4 lines are for SSE
  9289                              <2> 		;movdqa [edi], xmm0
  9290                              <2> 		;add esi, 16
  9291                              <2> 		;add edi, 16
  9292                              <2> 		;sub dx, 8
  9293 00007305 8B06                <2> 		mov eax, [esi]
  9294 00007307 8907                <2> 		mov [edi], eax
  9295 00007309 81C604000000        <2> 		add esi, 4
  9296 0000730F 81C704000000        <2> 		add edi, 4
  9297 00007315 6681EA0200          <2> 		sub dx, 2
  9298 0000731A 6681FA0000          <2> 		cmp dx, 0
  9299 0000731F 77E4                <2> 		ja .lp
  9300 00007321 6649                <2> 		dec cx
  9301 00007323 668B15[A7590000]    <2> 		mov dx, [resolutionx]
  9302 0000732A 6681F90000          <2> 		cmp cx, 0
  9303 0000732F 77D4                <2> 		ja .lp
  9304 00007331 C3                  <2> 		ret
  9305 00007332 00000000            <2> 	backgroundimage dd 0
  9306                              <2> %endif
  9307                              <2> guiclear.noback:
  9308 00007336 A1[60730000]        <2> 	mov eax, [background]
  9309                              <2> guiclearloop:
  9310 0000733B 8907                <2> 	mov [edi], eax
  9311 0000733D 81C704000000        <2> 	add edi, 4
  9312 00007343 6681EA0200          <2> 	sub dx, 2
  9313 00007348 6681FA0000          <2> 	cmp dx, 0
  9314 0000734D 77EC                <2> 	ja guiclearloop
  9315 0000734F 6649                <2> 	dec cx
  9316 00007351 668B15[A7590000]    <2> 	mov dx, [resolutionx]
  9317 00007358 6681F90000          <2> 	cmp cx, 0
  9318 0000735D 77DC                <2> 	ja guiclearloop
  9319 0000735F C3                  <2> 	ret
  9320                              <2> 
  9321 00007360 CF7B<rept>          <2> background times 2 dw 0111101111001111b
  9322                              <2> 	.original equ 0111101111001111b
  9323                              <2> 
  9324                              <2> reloadallgraphics:
  9325 00007364 BF[71C20300]        <2> 		mov edi, graphicstable
  9326                              <2> reloadgraphicsloop:
  9327 00007369 8B7702              <2> 		mov esi, [edi + 2]
  9328 0000736C 668B5706            <2> 		mov dx, [edi + 6]
  9329 00007370 668B4F08            <2> 		mov cx, [edi + 8]
  9330 00007374 668B07              <2> 		mov ax, [edi]
  9331 00007377 668B5F0A            <2> 		mov bx, [edi + 10]
  9332 0000737B 893D[98870000]      <2> 		mov [grpctblpos], edi
  9333 00007381 3B3D[2F820000]      <2> 		cmp edi, [dragging]
  9334 00007387 741E                <2> 		je loadedgraphic
  9335 00007389 663D0100            <2> 		cmp ax, 1
  9336 0000738D 0F8436000000        <2> 		je near icongraphic
  9337 00007393 663D0200            <2> 		cmp ax, 2
  9338 00007397 0F843C000000        <2> 		je near stringgraphic
  9339 0000739D 663D0300            <2> 		cmp ax, 3
  9340 000073A1 0F8416000000        <2> 		je near windowgraphic
  9341 000073A7 8B3D[98870000]      <2> loadedgraphic:  mov edi, [grpctblpos]
  9342 000073AD 81C710000000        <2> 		add edi, 16
  9343 000073B3 81FF[71C40300]      <2> 		cmp edi, graphicstableend
  9344 000073B9 732E                <2> 		jae donereloadgraphics
  9345 000073BB EBAC                <2> 		jmp reloadgraphicsloop
  9346                              <2> windowgraphic:
  9347 000073BD E82F090000          <2> 		call showwindow2
  9348 000073C2 E88CAAFFFF          <2> 		call cleardouble
  9349 000073C7 EBDE                <2> 		jmp loadedgraphic
  9350 000073C9 80E301              <2> icongraphic:	and bl, 1
  9351 000073CC 881D[A88A0000]      <2> 		mov [iconselected], bl
  9352 000073D2 E80CFDFFFF          <2> 		call showicon2
  9353 000073D7 EBCE                <2> 		jmp loadedgraphic
  9354 000073D9 80E301              <2> stringgraphic:  and bl, 1
  9355 000073DC 881D[2B820000]      <2> 		mov [mouseselecton], bl
  9356 000073E2 E8D6050000          <2> 		call showstring2
  9357 000073E7 EBBE                <2> 		jmp loadedgraphic
  9358                              <2> donereloadgraphics:
  9359 000073E9 8B3D[2F820000]      <2> 		mov edi, [dragging]
  9360 000073EF 81FF[71C20300]      <2> 		cmp edi, graphicstable
  9361 000073F5 7226                <2> 		jb notcorrectdrag
  9362 000073F7 668B07              <2> 		mov ax, [edi]
  9363 000073FA 8B7702              <2> 		mov esi, [edi + 2]
  9364 000073FD 668B5706            <2> 		mov dx, [edi + 6]
  9365 00007401 668B4F08            <2> 		mov cx, [edi + 8]
  9366 00007405 668B5F0A            <2> 		mov bx, [edi + 10]
  9367 00007409 663D0100            <2> 		cmp ax, 1
  9368 0000740D 750F                <2> 		jne noticondragging
  9369 0000740F 80E301              <2> 		and bl, 1
  9370 00007412 881D[A88A0000]      <2> 		mov [iconselected], bl
  9371 00007418 E8C6FCFFFF          <2> 		call showicon2
  9372                              <2> notcorrectdrag:
  9373 0000741D C3                  <2> 		ret
  9374                              <2> 
  9375                              <2> 	noticondragging:
  9376 0000741E 663D0200            <2> 		cmp ax, 2
  9377 00007422 75F9                <2> 		jne notcorrectdrag
  9378 00007424 80E301              <2> 		and bl, 1
  9379 00007427 881D[2B820000]      <2> 		mov [mouseselecton], bl
  9380 0000742D E88B050000          <2> 		call showstring2
  9381 00007432 EBE9                <2> 		jmp notcorrectdrag
  9382                              <1> %include "source/gui/square.asm"
  9383                              <2> drawsquare:	;from (bx,ax) to (dx,cx), color in si
  9384 00007434 6639D3              <2> 	cmp bx, dx
  9385 00007437 7303                <2> 	jae .noxchgx
  9386 00007439 6687DA              <2> 	xchg bx, dx
  9387                              <2> .noxchgx:
  9388 0000743C 6639C8              <2> 	cmp ax, cx
  9389 0000743F 7302                <2> 	jae .noxchgy
  9390 00007441 6691                <2> 	xchg ax, cx
  9391                              <2> .noxchgy:
  9392 00007443 6650                <2> 	push ax
  9393 00007445 6653                <2> 	push bx
  9394 00007447 6652                <2> 	push dx
  9395 00007449 E832160000          <2> 	call getpixelmem	;get pointer to pixel in edi from (dx,cx)
  9396 0000744E 31D2                <2> 	xor edx, edx
  9397 00007450 665A                <2> 	pop dx
  9398 00007452 31DB                <2> 	xor ebx, ebx
  9399 00007454 665B                <2> 	pop bx
  9400 00007456 6658                <2> 	pop ax
  9401                              <2> .lp0:
  9402 00007458 6652                <2> 	push dx
  9403                              <2> .lp:
  9404 0000745A 668937              <2> 	mov [edi], si
  9405 0000745D 81C702000000        <2> 	add edi, 2
  9406 00007463 6642                <2> 	inc dx
  9407 00007465 6639DA              <2> 	cmp dx, bx
  9408 00007468 76F0                <2> 	jbe .lp
  9409 0000746A 665A                <2> 	pop dx
  9410 0000746C 81EF02000000        <2> 	sub edi, 2
  9411 00007472 29DF                <2> 	sub edi, ebx
  9412 00007474 29DF                <2> 	sub edi, ebx
  9413 00007476 01D7                <2> 	add edi, edx
  9414 00007478 01D7                <2> 	add edi, edx
  9415 0000747A 033D[955A0000]      <2> 	add edi, [resolutionx2]
  9416 00007480 6641                <2> 	inc cx
  9417 00007482 6639C1              <2> 	cmp cx, ax
  9418 00007485 7203                <2> 	jb .lp2
  9419 00007487 74CF                <2> 	je .lp0
  9420 00007489 C3                  <2> 	ret
  9421                              <2> .lp2:
  9422 0000748A 57                  <2> 	push edi
  9423 0000748B 668937              <2> 	mov [edi], si
  9424 0000748E 29D7                <2> 	sub edi, edx
  9425 00007490 29D7                <2> 	sub edi, edx
  9426 00007492 01DF                <2> 	add edi, ebx
  9427 00007494 01DF                <2> 	add edi, ebx
  9428 00007496 668937              <2> 	mov [edi], si
  9429 00007499 5F                  <2> 	pop edi
  9430 0000749A 033D[955A0000]      <2> 	add edi, [resolutionx2]
  9431 000074A0 6641                <2> 	inc cx
  9432 000074A2 6639C1              <2> 	cmp cx, ax
  9433 000074A5 72E3                <2> 	jb .lp2
  9434 000074A7 EBAF                <2> 	jmp .lp0
  9435                              <2> 
  9436                              <2> fillsquare:	;from (bx,ax) to (dx,cx), color in si
  9437 000074A9 6639D3              <2> 	cmp bx, dx
  9438 000074AC 7303                <2> 	jae .noxchgx
  9439 000074AE 6687DA              <2> 	xchg bx, dx
  9440                              <2> .noxchgx:
  9441 000074B1 6639C8              <2> 	cmp ax, cx
  9442 000074B4 7302                <2> 	jae .noxchgy
  9443 000074B6 6691                <2> 	xchg ax, cx
  9444                              <2> .noxchgy:
  9445 000074B8 6650                <2> 	push ax
  9446 000074BA 6653                <2> 	push bx
  9447 000074BC 6652                <2> 	push dx
  9448 000074BE E8BD150000          <2> 	call getpixelmem	;get pointer to pixel in edi from (dx,cx)
  9449 000074C3 31D2                <2> 	xor edx, edx
  9450 000074C5 665A                <2> 	pop dx
  9451 000074C7 31DB                <2> 	xor ebx, ebx
  9452 000074C9 665B                <2> 	pop bx
  9453 000074CB 6658                <2> 	pop ax
  9454                              <2> .lp2
  9455 000074CD 6652                <2> 	push dx
  9456                              <2> .lp:
  9457 000074CF 668937              <2> 	mov [edi], si
  9458 000074D2 81C702000000        <2> 	add edi, 2
  9459 000074D8 6642                <2> 	inc dx
  9460 000074DA 6639DA              <2> 	cmp dx, bx
  9461 000074DD 76F0                <2> 	jbe .lp
  9462 000074DF 665A                <2> 	pop dx
  9463 000074E1 81EF02000000        <2> 	sub edi, 2
  9464 000074E7 29DF                <2> 	sub edi, ebx
  9465 000074E9 29DF                <2> 	sub edi, ebx
  9466 000074EB 01D7                <2> 	add edi, edx
  9467 000074ED 01D7                <2> 	add edi, edx
  9468 000074EF 033D[955A0000]      <2> 	add edi, [resolutionx2]
  9469 000074F5 6641                <2> 	inc cx
  9470 000074F7 6639C1              <2> 	cmp cx, ax
  9471 000074FA 76D1                <2> 	jbe .lp2
  9472 000074FC C3                  <2> 	ret
  9473                              <1> %include "source/gui/startup.asm"
  9474                              <2> guisetup:
  9475                              <2> 	%ifdef gui.background
  9476 000074FD 31DB                <2> 	xor ebx, ebx
  9477 000074FF 891D[32730000]      <2> 	mov [backgroundimage], ebx
  9478                              <2> 	%endif
  9479 00007505 E8C7FDFFFF          <2> 	call guiclear
  9480 0000750A C605[7C8F0000]01    <2> 	mov byte [guion], 1
  9481 00007511 C605[2B820000]00    <2> 	mov byte [mouseselecton], 0
  9482 00007518 31C0                <2> 	xor eax, eax
  9483 0000751A 31DB                <2> 	xor ebx, ebx
  9484 0000751C 31C9                <2> 	xor ecx, ecx
  9485 0000751E 31D2                <2> 	xor edx, edx
  9486                              <2> 	
  9487 00007520 BE[E2760000]        <2> 	mov esi, pacmsg
  9488 00007525 30E4                <2> 	xor ah, ah
  9489 00007527 B010                <2> 	mov al, 00010000b
  9490 00007529 31DB                <2> 	xor ebx, ebx
  9491 0000752B 66B99000            <2> 	mov cx, 144
  9492 0000752F 66BA0400            <2> 	mov dx, 4
  9493 00007533 E872040000          <2> 	call showstring
  9494                              <2> 	
  9495 00007538 BE[20770000]        <2> 	mov esi, interneticon
  9496 0000753D 30E4                <2> 	xor ah, ah
  9497 0000753F B010                <2> 	mov al, 00010000b
  9498 00007541 BB[0B760000]        <2> 	mov ebx, noie
  9499 00007546 66B91800            <2> 	mov cx, 24
  9500 0000754A 66BA0400            <2> 	mov dx, 4
  9501 0000754E E87DFBFFFF          <2> 	call showicon
  9502                              <2> 	
  9503 00007553 BE[A2770000]        <2> 	mov esi, wordicon
  9504 00007558 30E4                <2> 	xor ah, ah
  9505 0000755A B010                <2> 	mov al, 00010000b
  9506 0000755C 31DB                <2> 	xor ebx, ebx
  9507 0000755E 66B91800            <2> 	mov cx, 24
  9508 00007562 66BA3000            <2> 	mov dx, 48
  9509 00007566 E865FBFFFF          <2> 	call showicon
  9510                              <2> 	
  9511 0000756B BE[24780000]        <2> 	mov esi, pacmanpellet
  9512 00007570 30E4                <2> 	xor ah, ah
  9513 00007572 B010                <2> 	mov al, 00010000b
  9514 00007574 31DB                <2> 	xor ebx, ebx
  9515 00007576 66B94000            <2> 	mov cx, 64
  9516 0000757A 66BA0400            <2> 	mov dx, 4
  9517 0000757E E84DFBFFFF          <2> 	call showicon
  9518                              <2> 	
  9519 00007583 BE[28790000]        <2> 	mov esi, pacman
  9520 00007588 30E4                <2> 	xor ah, ah
  9521 0000758A B010                <2> 	mov al, 00010000b
  9522 0000758C BB[F4750000]        <2> 	mov ebx, pacmannomnom
  9523 00007591 66B94000            <2> 	mov cx, 64
  9524 00007595 66BA3000            <2> 	mov dx, 48
  9525 00007599 E832FBFFFF          <2> 	call showicon
  9526                              <2> 	
  9527 0000759E BE[A6780000]        <2> 	mov esi, ghostie
  9528 000075A3 30E4                <2> 	xor ah, ah
  9529 000075A5 B010                <2> 	mov al, 00010000b
  9530 000075A7 BB[DD750000]        <2> 	mov ebx, boo
  9531 000075AC 66B96C00            <2> 	mov cx, 108
  9532 000075B0 66BA0400            <2> 	mov dx, 4
  9533 000075B4 E817FBFFFF          <2> 	call showicon
  9534                              <2> 	
  9535 000075B9 BE[C4760000]        <2> 	mov esi, start
  9536 000075BE 668B0D[A9590000]    <2> 	mov cx, [resolutiony]
  9537 000075C5 6681E91000          <2> 	sub cx, 16
  9538 000075CA 66BA0200            <2> 	mov dx, 2
  9539 000075CE 30E4                <2> 	xor ah, ah
  9540 000075D0 B010                <2> 	mov al, 00010000b
  9541 000075D2 BB[80760000]        <2> 	mov ebx, winblows
  9542 000075D7 E8CE030000          <2> 	call showstring
  9543                              <2> 
  9544                              <2> %ifdef gui.time	
  9545                              <2> 	call guitime	;load time into timeshow/dateshow and show it
  9546                              <2> %endif
  9547 000075DC C3                  <2> 	ret
  9548                              <2> 
  9549                              <2> 	boo:
  9550 000075DD BE[DD760000]        <2> 		mov esi, boomsg
  9551 000075E2 66BA6400            <2> 		mov dx, 100
  9552 000075E6 66B94001            <2> 		mov cx, 320
  9553 000075EA 31DB                <2> 		xor ebx, ebx
  9554 000075EC 6631C0              <2> 		xor ax, ax
  9555 000075EF E9B6030000          <2> 		jmp showstring
  9556                              <2> 
  9557                              <2> 	pacmannomnom:
  9558 000075F4 BE[FB760000]        <2> 		mov esi, pacnom
  9559 000075F9 66BA8200            <2> 		mov dx, 130
  9560 000075FD 66B93C00            <2> 		mov cx, 60
  9561 00007601 31DB                <2> 		xor ebx, ebx
  9562 00007603 6631C0              <2> 		xor ax, ax
  9563 00007606 E99F030000          <2> 		jmp showstring	
  9564                              <2> 	
  9565                              <2> 	noie:
  9566 0000760B 66C705[0A770000]80- <2> 		mov word [termwindow], 640
  9567 00007613 02                  <2>
  9568 00007614 66C705[0C770000]E0- <2> 		mov word [termwindow + 2], 480	;the previous lines of code make a large terminal window that is 4 characters smaller than the screen
  9569 0000761C 01                  <2>
  9570 0000761D BE[0A770000]        <2> 		mov esi, termwindow
  9571 00007622 66BA1000            <2> 		mov dx, 16
  9572 00007626 66B91000            <2> 		mov cx, 16
  9573 0000762A 31DB                <2> 		xor ebx, ebx
  9574 0000762C 6631C0              <2> 		xor ax, ax
  9575 0000762F E803060000          <2> 		call showwindow
  9576 00007634 E93DB5FFFF          <2> 		jmp os
  9577                              <2> 
  9578                              <2> 	gotomenuboot:
  9579 00007639 31D2                <2> 		xor edx, edx
  9580 0000763B 31C9                <2> 		xor ecx, ecx
  9581 0000763D 668B15[A7590000]    <2> 		mov dx, [resolutionx]
  9582 00007644 668B0D[A9590000]    <2> 		mov cx, [resolutiony]
  9583 0000764B 66C1E904            <2> 		shr cx, 4
  9584 0000764F 6681E90100          <2> 		sub cx, 1
  9585 00007654 66C1E104            <2> 		shl cx, 4
  9586 00007658 668915[0A770000]    <2> 		mov [termwindow], dx
  9587 0000765F 66890D[0C770000]    <2> 		mov [termwindow + 2], cx	;the previous lines of code make a large terminal window that is fullscreen
  9588 00007666 BE[0A770000]        <2> 		mov esi, termwindow
  9589 0000766B 6631D2              <2> 		xor dx, dx
  9590 0000766E 6631C9              <2> 		xor cx, cx
  9591 00007671 31DB                <2> 		xor ebx, ebx
  9592 00007673 6631C0              <2> 		xor ax, ax
  9593 00007676 E8BC050000          <2> 		call showwindow
  9594 0000767B E9F6B4FFFF          <2> 		jmp os
  9595                              <2> 
  9596                              <2> 	winblows:
  9597 00007680 BE[D3760000]        <2> 		mov esi, turnoffmsg
  9598 00007685 BB[09550000]        <2> 		mov ebx, turnoff
  9599 0000768A 668B0D[A9590000]    <2> 		mov cx, [resolutiony]
  9600 00007691 6681E92000          <2> 		sub cx, 32
  9601 00007696 6631D2              <2> 		xor dx, dx
  9602 00007699 30E4                <2> 		xor ah, ah
  9603 0000769B B010                <2> 		mov al, 00010000b
  9604 0000769D E808030000          <2> 		call showstring
  9605 000076A2 BE[CA760000]        <2> 		mov esi, gotomenu
  9606 000076A7 668B0D[A9590000]    <2> 		mov cx, [resolutiony]
  9607 000076AE 6681E93000          <2> 		sub cx, 48
  9608 000076B3 6631D2              <2> 		xor dx, dx
  9609 000076B6 30E4                <2> 		xor ah, ah
  9610 000076B8 B010                <2> 		mov al, 00010000b
  9611 000076BA BB[39760000]        <2> 		mov ebx, gotomenuboot
  9612 000076BF E9E6020000          <2> 		jmp showstring
  9613                              <2> 		
  9614                              <2> 
  9615 000076C4 737461727400        <2> 	start	db "start",0
  9616 000076CA 536F6C6C65724F5300  <2> 	gotomenu db "SollerOS",0
  9617 000076D3 506F776572204F6666- <2> 	turnoffmsg db "Power Off",0
  9618 000076DC 00                  <2>
  9619 000076DD 426F6F2100          <2> 	boomsg db "Boo!",0
  9620 000076E2 5061636D616E207761- <2> 	pacmsg	db "Pacman was easy to draw.",0
  9621 000076EB 73206561737920746F- <2>
  9622 000076F4 20647261772E00      <2>
  9623 000076FB 4F6D206E6F6D206E6F- <2> 	pacnom  db "Om nom nom nom",0
  9624 00007704 6D206E6F6D00        <2>
  9625                              <2> 
  9626 0000770A 20035802            <2> 	termwindow:	dw 800,600	;window size
  9627 0000770E FFFF0000            <2> 				dw 0xFFFF,0	;colors(FG,BG)
  9628 00007712 [72D92B00]-         <2> 				dd videobuf,videobuf2 ;location of buffers
  9629 00007716 [BAAE2C00]          <2>
  9630 0000771A 534855536800        <2> 	termmsg:	db "SHUSh",0	;;window title
  9631                              <2> 	
  9632 0000771A <incbin>            <2> interneticon: 	incbin 'source/gui/icons/internet'
  9633 0000771A <incbin>            <2> wordicon: 	incbin 'source/gui/icons/word'
  9634 0000771A <incbin>            <2> pacmanpellet: incbin 'source/gui/icons/pellet'
  9635 0000771A <incbin>            <2> ghostie	incbin 'source/gui/icons/ghostie'
  9636 0000771A <incbin>            <2> pacman	incbin 'source/gui/icons/pacman'
  9637                              <2> 
  9638                              <2> %ifdef gui.time
  9639                              <2> guitime:
  9640                              <2> 		call time	;get rtc in timeshow & dateshow
  9641                              <2> 		xor ebx, ebx
  9642                              <2> 		mov dx, [resolutionx2]
  9643                              <2> 		xor cx, cx
  9644                              <2> 		sub dx, 304
  9645                              <2> 		mov esi, dateshow
  9646                              <2> 		mov al, 00010001b
  9647                              <2> 		call showstring
  9648                              <2> 		mov esi, timeshow
  9649                              <2> 		xor ebx, ebx
  9650                              <2> 		mov al, 00010001b
  9651                              <2> 		call showstring
  9652                              <2> 		ret
  9653                              <2> %endif
  9654                              <1> %include "source/gui/text.asm"
  9655                              <2> 	showstring:
  9656 000079AA A2[2B820000]        <2> 		mov [mouseselecton], al
  9657 000079AF 8025[2B820000]01    <2> 		and byte [mouseselecton], 1
  9658 000079B6 B402                <2> 		mov ah, 2
  9659 000079B8 E8EF0D0000          <2> 		call graphicsadd
  9660                              <2> 	showstring2:	;location in (dx,cx), color in [colorfont2] and [background]
  9661 000079BD 30E4                <2> 		xor ah, ah
  9662 000079BF 8A06                <2> 		mov al, [esi]
  9663 000079C1 3CC0                <2> 		cmp al, 0xC0
  9664 000079C3 7234                <2> 		jb .doneutf
  9665 000079C5 3CE0                <2> 		cmp al, 0xE0
  9666 000079C7 721D                <2> 		jb .two
  9667 000079C9 46                  <2> 		inc esi
  9668 000079CA 668B1E              <2> 		mov bx, [esi]
  9669 000079CD 46                  <2> 		inc esi
  9670 000079CE C0E004              <2> 		shl al, 4
  9671 000079D1 66C1E302            <2> 		shl bx, 2
  9672 000079D5 C0EF02              <2> 		shr bh, 2
  9673 000079D8 66C1EB02            <2> 		shr bx, 2
  9674 000079DC 08C7                <2> 		or bh, al
  9675 000079DE 6689D8              <2> 		mov ax, bx
  9676 000079E1 E913000000          <2> 		jmp .doneutf
  9677                              <2> 	.two:
  9678 000079E6 8A3E                <2> 		mov bh, [esi]
  9679 000079E8 46                  <2> 		inc esi
  9680 000079E9 8A1E                <2> 		mov bl, [esi]
  9681 000079EB 66C1E302            <2> 		shl bx, 2
  9682 000079EF C0EF02              <2> 		shr bh, 2
  9683 000079F2 66C1EB02            <2> 		shr bx, 2
  9684 000079F6 6689D8              <2> 		mov ax, bx
  9685                              <2> 	.doneutf:
  9686 000079F9 3C00                <2> 		cmp al, 0
  9687 000079FB 7420                <2> 		je doneshowstring
  9688 000079FD 46                  <2> 		inc esi
  9689 000079FE 3CFF                <2> 		cmp al, 255
  9690 00007A00 74BB                <2> 		je showstring2
  9691 00007A02 56                  <2> 		push esi
  9692 00007A03 668B1D[257A0000]    <2> 		mov bx, [colorfont2]
  9693 00007A0A E827000000          <2> 		call showfontvesa
  9694 00007A0F 663D0A00            <2> 		cmp ax, 10
  9695 00007A13 7405                <2> 		je noproceedshst
  9696 00007A15 6681C20800          <2> 		add dx, 8
  9697                              <2> 	noproceedshst:
  9698 00007A1A 5E                  <2> 		pop esi
  9699 00007A1B EBA0                <2> 		jmp showstring2
  9700                              <2> 	doneshowstring:
  9701 00007A1D C605[2B820000]00    <2> 		mov byte [mouseselecton], 0
  9702 00007A24 C3                  <2> 		ret
  9703                              <2> 
  9704 00007A25 FFFF                <2> colorfont2 dw 0xFFFF
  9705 00007A27 00                  <2> colorcache db 0
  9706                              <2> 
  9707 00007A28 02                  <2> resolutionbytes db 2
  9708 00007A29 0000                <2> posxvesa dw 0
  9709 00007A2B 0000                <2> posyvesa dw 0
  9710 00007A2D FFFF                <2> colorfont dw 0xFFFF
  9711                              <2> savefontvesa:		;same rules as showfontvesa
  9712 00007A2F C605[2A820000]01    <2> 	mov byte [savefonton], 1
  9713                              <2> showfontvesa:		;position in (dx,cx), color in bx, char in ax
  9714 00007A36 663DFF00            <2> 	cmp ax, 255
  9715 00007A3A 7501                <2> 	jne nostopshowfont
  9716 00007A3C C3                  <2> 	ret
  9717                              <2> nostopshowfont:
  9718 00007A3D 55                  <2> 	push ebp
  9719 00007A3E 66890D[2B7A0000]    <2> 	mov [posyvesa], cx
  9720 00007A45 663D0A00            <2> 	cmp ax, 10
  9721 00007A49 0F8424000000        <2> 	je near goodvesafontx
  9722 00007A4F 31C9                <2> 	xor ecx, ecx
  9723 00007A51 668B0D[955A0000]    <2> 	mov cx, [resolutionx2]
  9724 00007A58 6639CA              <2> 	cmp dx, cx
  9725 00007A5B 7616                <2> 	jbe goodvesafontx
  9726 00007A5D 6631D2              <2> 	xor dx, dx
  9727 00007A60 668B0D[2B7A0000]    <2> 	mov cx, [posyvesa]
  9728 00007A67 6681C11000          <2> 	add cx, 16
  9729 00007A6C 66890D[2B7A0000]    <2> 	mov [posyvesa], cx
  9730                              <2> goodvesafontx:
  9731 00007A73 668B0D[2B7A0000]    <2> 	mov cx, [posyvesa]
  9732 00007A7A 668915[297A0000]    <2> 	mov [posxvesa], dx
  9733 00007A81 8B3D[BD590000]      <2> 	mov edi, [physbaseptr]
  9734 00007A87 66891D[2D7A0000]    <2> 	mov [colorfont], bx
  9735 00007A8E 668B2D[2D7A0000]    <2> 	mov bp, [colorfont]
  9736 00007A95 31DB                <2> 	xor ebx, ebx
  9737 00007A97 6689C3              <2> 	mov bx, ax
  9738 00007A9A 31C0                <2> 	xor eax, eax
  9739 00007A9C 6689D8              <2> 	mov ax, bx
  9740 00007A9F 6689D3              <2> 	mov bx, dx
  9741 00007AA2 89DA                <2> 	mov edx, ebx
  9742 00007AA4 31DB                <2> 	xor ebx, ebx
  9743 00007AA6 6681F90000          <2> 	cmp cx, 0
  9744 00007AAB 7414                <2> 	je vesaposloopdn
  9745 00007AAD 668B1D[955A0000]    <2> 	mov bx, [resolutionx2]
  9746                              <2> vesaposloop:
  9747 00007AB4 52                  <2> 	push edx
  9748 00007AB5 50                  <2> 	push eax
  9749 00007AB6 31C0                <2> 	xor eax, eax
  9750 00007AB8 6689C8              <2> 	mov ax, cx
  9751 00007ABB F7E3                <2> 	mul ebx
  9752 00007ABD 01C7                <2> 	add edi, eax
  9753 00007ABF 58                  <2> 	pop eax
  9754 00007AC0 5A                  <2> 	pop edx
  9755                              <2> vesaposloopdn:
  9756 00007AC1 01D7                <2> 	add edi, edx
  9757 00007AC3 BE[C6910000]        <2> 	mov esi, fonts
  9758                              <2> findfontvesa:
  9759 00007AC8 663D0A00            <2> 	cmp ax, 10
  9760 00007ACC 0F84EB000000        <2> 	je near nwlinevesa
  9761 00007AD2 C1E004              <2> 	shl eax, 4
  9762 00007AD5 01C6                <2> 	add esi, eax
  9763 00007AD7 C1E804              <2> 	shr eax, 4
  9764 00007ADA 81FE[C6910300]      <2> 	cmp esi, fontend
  9765 00007AE0 0F83AB000000        <2> 	jae near donefontvesa
  9766 00007AE6 4E                  <2> 	dec esi
  9767                              <2> foundfontvesa:
  9768 00007AE7 46                  <2> 	inc esi
  9769 00007AE8 803D[2A820000]01    <2> 	cmp byte [savefonton], 1
  9770 00007AEF 0F84E7000000        <2> 	je near vesafontsaver
  9771 00007AF5 30C9                <2> 	xor cl, cl
  9772 00007AF7 8A06                <2> 	mov al, [esi]
  9773 00007AF9 668B15[955A0000]    <2> 	mov dx, [resolutionx2]
  9774 00007B00 662B15[297A0000]    <2> 	sub dx, [posxvesa]
  9775 00007B07 6681FA1000          <2> 	cmp dx, 16
  9776 00007B0C 7708                <2> 	ja paintfontvesa
  9777 00007B0E D0EA                <2> 	shr dl, 1
  9778 00007B10 8815[BC7B0000]      <2> 	mov [charwidth], dl
  9779                              <2> paintfontvesa:
  9780 00007B16 B201                <2> 	mov dl, 1
  9781 00007B18 20C2                <2> 	and dl, al
  9782 00007B1A 803D[29820000]01    <2> 	cmp byte [showcursorfonton], 1
  9783 00007B21 0F842E000000        <2> 	je near nodelpaintedfont
  9784 00007B27 803D[29820000]02    <2> 	cmp byte [showcursorfonton], 2
  9785 00007B2E 0F8511000000        <2> 	jne near noswitchcursorfonton
  9786 00007B34 80FA00              <2> 	cmp dl, 0
  9787 00007B37 0F8420000000        <2> 	je near nopixelset
  9788 00007B3D 66892F              <2> 	mov [edi], bp
  9789 00007B40 E918000000          <2> 	jmp nopixelset
  9790                              <2> noswitchcursorfonton:
  9791 00007B45 3215[2B820000]      <2> 	xor dl, [mouseselecton]
  9792 00007B4B 668B1D[60730000]    <2> 	mov bx, [background]
  9793 00007B52 66891F              <2> 	mov [edi], bx
  9794                              <2> nodelpaintedfont:
  9795 00007B55 80FA00              <2> 	cmp dl, 0
  9796 00007B58 7403                <2> 	je nopixelset
  9797 00007B5A 66892F              <2> 	mov [edi], bp
  9798                              <2> nopixelset:
  9799 00007B5D 81C702000000        <2> 	add edi, 2
  9800 00007B63 D0C0                <2> 	rol al, 1
  9801 00007B65 FEC1                <2> 	inc cl
  9802 00007B67 3A0D[BC7B0000]      <2> 	cmp cl, [charwidth]
  9803 00007B6D 72A7                <2> 	jb paintfontvesa
  9804 00007B6F FEC5                <2> 	inc ch
  9805 00007B71 31D2                <2> 	xor edx, edx
  9806 00007B73 668B15[955A0000]    <2> 	mov dx, [resolutionx2]
  9807 00007B7A 01D7                <2> 	add edi, edx
  9808 00007B7C 31D2                <2> 	xor edx, edx
  9809 00007B7E 8A15[BC7B0000]      <2> 	mov dl, [charwidth]
  9810 00007B84 00D2                <2> 	add dl, dl
  9811 00007B86 29D7                <2> 	sub edi, edx
  9812 00007B88 80FD10              <2> 	cmp ch, 16
  9813 00007B8B 0F8256FFFFFF        <2> 	jb foundfontvesa
  9814                              <2> donefontvesa:
  9815 00007B91 C605[BC7B0000]08    <2> 	mov byte [charwidth], 8
  9816 00007B98 668B15[297A0000]    <2> 	mov dx, [posxvesa]
  9817 00007B9F 8A1D[BC7B0000]      <2> 	mov bl, [charwidth]
  9818 00007BA5 30FF                <2> 	xor bh, bh
  9819 00007BA7 6601DA              <2> 	add dx, bx
  9820 00007BAA 6689EB              <2> 	mov bx, bp
  9821 00007BAD 668B0D[2B7A0000]    <2> 	mov cx, [posyvesa]
  9822 00007BB4 883D[2A820000]      <2> 	mov [savefonton], bh
  9823 00007BBA 5D                  <2> 	pop ebp
  9824 00007BBB C3                  <2> 	ret
  9825 00007BBC 08                  <2> charwidth db 8
  9826                              <2> nwlinevesa:
  9827 00007BBD 6631D2              <2> 	xor dx, dx
  9828 00007BC0 668915[297A0000]    <2> 	mov [posxvesa], dx
  9829 00007BC7 668B0D[2B7A0000]    <2> 	mov cx, [posyvesa]
  9830 00007BCE 6681C11000          <2> 	add cx, 16
  9831 00007BD3 66890D[2B7A0000]    <2> 	mov [posyvesa], cx
  9832 00007BDA EBB5                <2> 	jmp donefontvesa
  9833                              <2> vesafontsaver:
  9834 00007BDC 30C0                <2> 	xor al, al
  9835 00007BDE 30C9                <2> 	xor cl, cl
  9836                              <2> vesafontsaver2:
  9837 00007BE0 66392F              <2> 	cmp [edi], bp
  9838 00007BE3 742C                <2> 	je colorfontmatch
  9839                              <2> donecolormatch:
  9840 00007BE5 81C702000000        <2> 	add edi, 2
  9841 00007BEB D0C0                <2> 	rol al, 1
  9842 00007BED FEC1                <2> 	inc cl
  9843 00007BEF 80F908              <2> 	cmp cl, 8
  9844 00007BF2 72EC                <2> 	jb vesafontsaver2
  9845 00007BF4 8806                <2> 	mov [esi], al
  9846 00007BF6 46                  <2> 	inc esi
  9847 00007BF7 FEC5                <2> 	inc ch
  9848 00007BF9 31D2                <2> 	xor edx, edx
  9849 00007BFB 668B15[955A0000]    <2> 	mov dx, [resolutionx2]
  9850 00007C02 01D7                <2> 	add edi, edx
  9851 00007C04 81EF10000000        <2> 	sub edi, 16
  9852 00007C0A 80FD10              <2> 	cmp ch, 16
  9853 00007C0D 72CD                <2> 	jb vesafontsaver
  9854 00007C0F EB80                <2> 	jmp donefontvesa
  9855                              <2> colorfontmatch:
  9856 00007C11 0401                <2> 	add al, 1
  9857 00007C13 EBD0                <2> 	jmp donecolormatch
  9858                              <1> %include "source/gui/window.asm"
  9859 00007C15 0000                <2> winvcopystx dw 0
  9860 00007C17 0000                <2> winvcopysty dw 0
  9861 00007C19 0000                <2> winvcopydx dw 0
  9862 00007C1B 0000                <2> winvcopycx dw 0
  9863 00007C1D FFFF0000            <2> windowcolor dw 0xFFFF,0
  9864 00007C21 00000000            <2> windowbufloc: dd 0
  9865 00007C25 00000000            <2> windowvideobuf dd 0
  9866 00007C29 00000000            <2> windowvideobuf2 dd 0
  9867 00007C2D 00000000            <2> windowinfobuf dd 0
  9868 00007C31 0000                <2> termcol dw 0
  9869 00007C33 00000000            <2> wincopyendpos dd 0
  9870                              <2> 
  9871                              <2> 	showwindow:	;windowstuff in esi, position in (dx, cx), nothing in ax, code in ebx
  9872 00007C37 C605[EC230000]01    <2> 		mov byte [termguion], 1
  9873 00007C3E 6681C11000          <2> 		add cx, 16
  9874 00007C43 668915[157C0000]    <2> 		mov [winvcopystx], dx
  9875 00007C4A 66890D[177C0000]    <2> 		mov [winvcopysty], cx
  9876 00007C51 8935[2D7C0000]      <2> 		mov [windowinfobuf], esi
  9877 00007C57 668B16              <2> 		mov dx, [esi]
  9878 00007C5A 668B4E02            <2> 		mov cx, [esi + 2]
  9879 00007C5E 31C0                <2> 		xor eax, eax
  9880 00007C60 31DB                <2> 		xor ebx, ebx
  9881 00007C62 6689D0              <2> 		mov ax, dx
  9882 00007C65 6689CB              <2> 		mov bx, cx
  9883 00007C68 66C1E803            <2> 		shr ax, 3
  9884 00007C6C 66C1EB04            <2> 		shr bx, 4
  9885 00007C70 66A3[317C0000]      <2> 		mov [termcol], ax
  9886 00007C76 A2[E1250000]        <2> 		mov [charxy], al
  9887 00007C7B 881D[E2250000]      <2> 		mov [charxy + 1], bl
  9888 00007C81 8B7E04              <2> 		mov edi, [esi + 4]
  9889 00007C84 893D[1D7C0000]      <2> 		mov [windowcolor], edi
  9890 00007C8A 8B7E0C              <2> 		mov edi, [esi + 12]
  9891 00007C8D 893D[297C0000]      <2> 		mov [windowvideobuf2], edi
  9892 00007C93 8B7E08              <2> 		mov edi, [esi + 8]
  9893 00007C96 893D[257C0000]      <2> 		mov [windowvideobuf], edi
  9894 00007C9C 81FB00000000        <2> 		cmp ebx, 0
  9895 00007CA2 0F8460050000        <2> 		je near donewincopynow
  9896                              <2> 	findendposwin:
  9897 00007CA8 C1E002              <2> 		shl eax, 2
  9898 00007CAB 31D2                <2> 		xor edx, edx
  9899 00007CAD F7E3                <2> 		mul ebx
  9900 00007CAF 01C7                <2> 		add edi, eax
  9901 00007CB1 893D[337C0000]      <2> 		mov [wincopyendpos], edi
  9902 00007CB7 31FF                <2> 		xor edi, edi
  9903 00007CB9 6631C0              <2> 		xor ax, ax
  9904 00007CBC 6631DB              <2> 		xor bx, bx
  9905 00007CBF 6601D2              <2> 		add dx, dx
  9906 00007CC2 668915[197C0000]    <2> 		mov [winvcopydx], dx
  9907 00007CC9 66890D[1B7C0000]    <2> 		mov [winvcopycx], cx
  9908 00007CD0 668B0D[177C0000]    <2> 		mov cx, [winvcopysty]
  9909 00007CD7 6681E91000          <2> 		sub cx, 16
  9910 00007CDC 668B15[157C0000]    <2> 		mov dx, [winvcopystx]
  9911 00007CE3 C605[ED230000]00    <2> 		mov byte [termcopyon], 0
  9912 00007CEA B403                <2> 		mov ah, 3
  9913 00007CEC E8BB0A0000          <2> 		call graphicsadd
  9914                              <2> 	showwindow2:
  9915 00007CF1 6681C11000          <2> 		add cx, 16
  9916 00007CF6 668915[157C0000]    <2> 		mov [winvcopystx], dx
  9917 00007CFD 66890D[177C0000]    <2> 		mov [winvcopysty], cx
  9918 00007D04 668B16              <2> 		mov dx, [esi]
  9919 00007D07 668B4E02            <2> 		mov cx, [esi + 2]
  9920 00007D0B 6601D2              <2> 		add dx, dx
  9921 00007D0E 668915[197C0000]    <2> 		mov [winvcopydx], dx
  9922 00007D15 66890D[1B7C0000]    <2> 		mov [winvcopycx], cx
  9923 00007D1C E818000000          <2> 		call reloadwindowtitle
  9924 00007D21 803D[93870000]01    <2> 		cmp byte [windrag], 1
  9925 00007D28 0F83E9040000        <2> 		jae near forgetresetstuff
  9926 00007D2E 8B3D[217C0000]      <2> 		mov edi, [windowbufloc]
  9927 00007D34 E96E020000          <2> 		jmp windowvideocopyset
  9928                              <2> 		
  9929                              <2> 	reloadwindowtitle:
  9930 00007D39 8B3D[217C0000]      <2> 		mov edi, [windowbufloc]
  9931 00007D3F 31D2                <2> 		xor edx, edx
  9932 00007D41 668B15[955A0000]    <2> 		mov dx, [resolutionx2]
  9933 00007D48 C1E204              <2> 		shl edx, 4
  9934 00007D4B 29D7                <2> 		sub edi, edx
  9935 00007D4D 803D[ED230000]00    <2> 		cmp byte [termcopyon], 0
  9936 00007D54 7532                <2> 		jne nocleartitlebarpos
  9937 00007D56 8B3D[BD590000]      <2> 		mov edi, [physbaseptr]
  9938 00007D5C 31D2                <2> 		xor edx, edx
  9939 00007D5E 668B15[157C0000]    <2> 		mov dx, [winvcopystx]
  9940 00007D65 01D7                <2> 		add edi, edx
  9941 00007D67 31C9                <2> 		xor ecx, ecx
  9942 00007D69 668B0D[177C0000]    <2> 		mov cx, [winvcopysty]
  9943 00007D70 6681E91000          <2> 		sub cx, 16
  9944 00007D75 6681F90000          <2> 		cmp cx, 0
  9945 00007D7A 740C                <2> 		je nocleartitlebarpos
  9946                              <2> 	cleartitlebarpos:
  9947 00007D7C 31C0                <2> 		xor eax, eax
  9948 00007D7E 66A1[955A0000]      <2> 		mov ax, [resolutionx2]
  9949 00007D84 F7E1                <2> 		mul ecx
  9950 00007D86 01C7                <2> 		add edi, eax
  9951                              <2> 	nocleartitlebarpos:
  9952 00007D88 66B91000            <2> 		mov cx, 16
  9953 00007D8C 668B15[197C0000]    <2> 		mov dx, [winvcopydx]
  9954 00007D93 6681F90000          <2> 		cmp cx, 0
  9955 00007D98 0F8448000000        <2> 		je near canceltitlebarput
  9956 00007D9E 6681FA0000          <2> 		cmp dx, 0
  9957 00007DA3 0F843D000000        <2> 		je near canceltitlebarput
  9958                              <2> 	titlebarput:
  9959 00007DA9 66A1[1D7C0000]      <2> 		mov ax, [windowcolor]
  9960 00007DAF 668907              <2> 		mov [edi], ax
  9961 00007DB2 6681EA0200          <2> 		sub dx, 2
  9962 00007DB7 81C702000000        <2> 		add edi, 2
  9963 00007DBD 6681FA0000          <2> 		cmp dx, 0
  9964 00007DC2 75E5                <2> 		jne titlebarput
  9965 00007DC4 31D2                <2> 		xor edx, edx
  9966 00007DC6 668B15[955A0000]    <2> 		mov dx, [resolutionx2]
  9967 00007DCD 6649                <2> 		dec cx
  9968 00007DCF 662B15[197C0000]    <2> 		sub dx, [winvcopydx]
  9969 00007DD6 01D7                <2> 		add edi, edx
  9970 00007DD8 668B15[197C0000]    <2> 		mov dx, [winvcopydx]
  9971 00007DDF 6681F90000          <2> 		cmp cx, 0
  9972 00007DE4 75C3                <2> 		jne titlebarput
  9973                              <2> 	canceltitlebarput:
  9974 00007DE6 893D[217C0000]      <2> 		mov [windowbufloc], edi
  9975 00007DEC 803D[ED230000]02    <2> 		cmp byte [termcopyon], 2
  9976 00007DF3 0F841C010000        <2> 		je near winvcpst
  9977 00007DF9 668B1D[60730000]    <2> 		mov bx, [background]
  9978 00007E00 6653                <2> 		push bx
  9979 00007E02 6631DB              <2> 		xor bx, bx
  9980 00007E05 66891D[60730000]    <2> 		mov [background], bx
  9981 00007E0C 6631C0              <2> 		xor ax, ax
  9982 00007E0F 81C610000000        <2> 		add esi, 16
  9983 00007E15 668B15[157C0000]    <2> 		mov dx, [winvcopystx]
  9984 00007E1C 668B0D[177C0000]    <2> 		mov cx, [winvcopysty]
  9985 00007E23 6681E91000          <2> 		sub cx, 16
  9986 00007E28 668B1D[1D7C0000]    <2> 		mov bx, [windowcolor]
  9987 00007E2F C605[2B820000]01    <2> 		mov byte [mouseselecton], 1
  9988 00007E36 E882FBFFFF          <2> 		call showstring2	;Show window title
  9989 00007E3B 8B35[142D0000]      <2> 		mov esi, [usercache]
  9990 00007E41 6681C21000          <2> 		add dx, 16
  9991 00007E46 C605[2B820000]01    <2> 		mov byte [mouseselecton], 1
  9992 00007E4D E86BFBFFFF          <2> 		call showstring2	;Show user name
  9993 00007E52 BE[478F0000]        <2> 		mov esi, computer
  9994 00007E57 C605[2B820000]01    <2> 		mov byte [mouseselecton], 1
  9995 00007E5E E85AFBFFFF          <2> 		call showstring2	;Show computer name
  9996 00007E63 66B85800            <2> 		mov ax, "X"
  9997 00007E67 66BB00F8            <2> 		mov bx, 1111100000000000b
  9998 00007E6B 668B15[157C0000]    <2> 		mov dx, [winvcopystx]
  9999 00007E72 668B0D[177C0000]    <2> 		mov cx, [winvcopysty]
 10000 00007E79 6681E91000          <2> 		sub cx, 16
 10001 00007E7E 6681EA1000          <2> 		sub dx, 16
 10002 00007E83 660315[197C0000]    <2> 		add dx, [winvcopydx]
 10003 00007E8A C605[2B820000]01    <2> 		mov byte [mouseselecton], 1
 10004 00007E91 663B15[955A0000]    <2> 		cmp dx, [resolutionx2]
 10005 00007E98 7305                <2> 		jae .nox
 10006 00007E9A E897FBFFFF          <2> 		call showfontvesa
 10007                              <2> .nox:
 10008 00007E9F 668B1D[60730000]    <2> 		mov bx, [background]
 10009 00007EA6 6681EA1800          <2> 		sub dx, 24
 10010 00007EAB 66B82B00            <2> 		mov ax, "+"
 10011 00007EAF 66BBE007            <2> 		mov bx, 0000011111100000b
 10012 00007EB3 C605[2B820000]01    <2> 		mov byte [mouseselecton], 1
 10013 00007EBA 663B15[955A0000]    <2> 		cmp dx, [resolutionx2]
 10014 00007EC1 7305                <2> 		jae .noplus
 10015 00007EC3 E86EFBFFFF          <2> 		call showfontvesa
 10016                              <2> .noplus:
 10017 00007EC8 6681EA1800          <2> 		sub dx, 24
 10018 00007ECD 66B82D00            <2> 		mov ax, "-"
 10019 00007ED1 66BBE0FF            <2> 		mov bx, 1111111111100000b
 10020 00007ED5 C605[2B820000]01    <2> 		mov byte [mouseselecton], 1
 10021 00007EDC 663B15[955A0000]    <2> 		cmp dx, [resolutionx2]
 10022 00007EE3 7305                <2> 		jae .nominus
 10023 00007EE5 E84CFBFFFF          <2> 		call showfontvesa
 10024                              <2> .nominus:
 10025 00007EEA 6681EA1800          <2> 		sub dx, 24
 10026 00007EEF 66B83F00            <2> 		mov ax, "?"
 10027 00007EF3 66BB1F00            <2> 		mov bx, 0000000000011111b
 10028 00007EF7 C605[2B820000]01    <2> 		mov byte [mouseselecton], 1
 10029 00007EFE 663B15[955A0000]    <2> 		cmp dx, [resolutionx2]
 10030 00007F05 7305                <2> 		jae .noquestion
 10031 00007F07 E82AFBFFFF          <2> 		call showfontvesa
 10032                              <2> .noquestion:
 10033 00007F0C 665B                <2> 		pop bx
 10034 00007F0E 66891D[60730000]    <2> 		mov [background], bx
 10035                              <2> 	winvcpst:
 10036 00007F15 C3                  <2> 		ret
 10037                              <2> 
 10038                              <2> 	windowvideocopy:
 10039 00007F16 8B35[2D7C0000]      <2> 		mov esi, [windowinfobuf]
 10040 00007F1C 668B16              <2> 		mov dx, [esi]
 10041 00007F1F 668B4E02            <2> 		mov cx, [esi + 2]
 10042 00007F23 8B7E04              <2> 		mov edi, [esi + 4]
 10043 00007F26 893D[1D7C0000]      <2> 		mov [windowcolor], edi
 10044 00007F2C 8B7E08              <2> 		mov edi, [esi + 8]
 10045 00007F2F 8B5E0C              <2> 		mov ebx, [esi + 12]
 10046 00007F32 893D[257C0000]      <2> 		mov [windowvideobuf], edi
 10047 00007F38 891D[297C0000]      <2> 		mov [windowvideobuf2], ebx
 10048 00007F3E 31C0                <2> 		xor eax, eax
 10049 00007F40 31DB                <2> 		xor ebx, ebx
 10050 00007F42 6689D0              <2> 		mov ax, dx
 10051 00007F45 6689CB              <2> 		mov bx, cx
 10052 00007F48 66C1E803            <2> 		shr ax, 3
 10053 00007F4C 66C1EB04            <2> 		shr bx, 4
 10054 00007F50 66A3[317C0000]      <2> 		mov [termcol], ax
 10055 00007F56 A2[E1250000]        <2> 		mov [charxy], al
 10056 00007F5B 881D[E2250000]      <2> 		mov [charxy + 1], bl
 10057 00007F61 8B3D[217C0000]      <2> 		mov edi, [windowbufloc]
 10058 00007F67 3B3D[BD590000]      <2> 		cmp edi, [physbaseptr]
 10059 00007F6D 0F8334000000        <2> 		jae near windowvideocopyset
 10060 00007F73 31C9                <2> 		xor ecx, ecx
 10061 00007F75 31D2                <2> 		xor edx, edx
 10062 00007F77 668B15[157C0000]    <2> 		mov dx, [winvcopystx]
 10063 00007F7E 668B0D[177C0000]    <2> 		mov cx, [winvcopysty]
 10064 00007F85 8B3D[BD590000]      <2> 		mov edi, [physbaseptr]
 10065 00007F8B 01D7                <2> 		add edi, edx
 10066 00007F8D 81F900000000        <2> 		cmp ecx, 0
 10067 00007F93 7412                <2> 		je windowvideocopyset
 10068                              <2> 	yrescopylp:
 10069 00007F95 31C0                <2> 		xor eax, eax
 10070 00007F97 66A1[955A0000]      <2> 		mov ax, [resolutionx2]
 10071 00007F9D F7E1                <2> 		mul ecx
 10072 00007F9F 01C7                <2> 		add edi, eax
 10073 00007FA1 893D[217C0000]      <2> 		mov [windowbufloc], edi
 10074                              <2> 	windowvideocopyset:
 10075 00007FA7 6631C9              <2> 		xor cx, cx
 10076 00007FAA 6649                <2> 		dec cx
 10077 00007FAC 66890D[1F820000]    <2> 		mov [charposline], cx
 10078 00007FB3 89FE                <2> 		mov esi, edi
 10079 00007FB5 81EE10000000        <2> 		sub esi, 16
 10080 00007FBB 31D2                <2> 		xor edx, edx
 10081 00007FBD 668B15[955A0000]    <2> 		mov dx, [resolutionx2]
 10082 00007FC4 C1E204              <2> 		shl edx, 4
 10083 00007FC7 01D6                <2> 		add esi, edx
 10084 00007FC9 8B3D[257C0000]      <2> 		mov edi, [windowvideobuf]
 10085 00007FCF 81EF04000000        <2> 		sub edi, 4
 10086 00007FD5 893D[21820000]      <2> 		mov [charposvbuf], edi
 10087 00007FDB E91B010000          <2> 		jmp nextcharwin
 10088                              <2> 	win.write:	;adjusted this to use alpha
 10089                              <2> 				;5R, 6G, 5B
 10090                              <2> %ifdef gui.alphablending
 10091 00007FE0 56                  <2> 		push esi
 10092 00007FE1 6653                <2> 		push bx
 10093 00007FE3 6651                <2> 		push cx
 10094 00007FE5 6652                <2> 		push dx
 10095                              <2> %ifdef gui.background
 10096 00007FE7 89FE                <2> 		mov esi, edi
 10097 00007FE9 2B35[BD590000]      <2> 		sub esi, [physbaseptr]
 10098 00007FEF 0335[32730000]      <2> 		add esi, [backgroundimage]
 10099 00007FF5 813D[32730000]0000- <2> 		cmp dword [backgroundimage], 0
 10100 00007FFD 0000                <2>
 10101 00007FFF 7505                <2> 		jne .red
 10102                              <2> %endif
 10103 00008001 BE[60730000]        <2> 		mov esi, background
 10104                              <2> 	.red:
 10105 00008006 668B0E              <2> 		mov cx, [esi]
 10106 00008009 66C1E90B            <2> 		shr cx, 11
 10107 0000800D 6689C3              <2> 		mov bx, ax
 10108 00008010 66C1EB0B            <2> 		shr bx, 11
 10109 00008014 6601D9              <2> 		add cx, bx
 10110 00008017 6601D9              <2> 		add cx, bx
 10111 0000801A 6601D9              <2> 		add cx, bx
 10112 0000801D 66C1E902            <2> 		shr cx, 2
 10113 00008021 66C1E10B            <2> 		shl cx, 11
 10114 00008025 6689CA              <2> 		mov dx, cx
 10115                              <2> 	.green:
 10116 00008028 668B0E              <2> 		mov cx, [esi]
 10117 0000802B 66C1E105            <2> 		shl cx, 5
 10118 0000802F 66C1E90A            <2> 		shr cx, 10
 10119 00008033 6689C3              <2> 		mov bx, ax
 10120 00008036 66C1E305            <2> 		shl bx, 5
 10121 0000803A 66C1EB0A            <2> 		shr bx, 10
 10122 0000803E 6601D9              <2> 		add cx, bx
 10123 00008041 6601D9              <2> 		add cx, bx
 10124 00008044 6601D9              <2> 		add cx, bx
 10125 00008047 66C1E902            <2> 		shr cx, 2
 10126 0000804B 66C1E105            <2> 		shl cx, 5
 10127 0000804F 6601CA              <2> 		add dx, cx
 10128                              <2> 	.blue:
 10129 00008052 668B0E              <2> 		mov cx, [esi]
 10130 00008055 66C1E10B            <2> 		shl cx, 11
 10131 00008059 66C1E90B            <2> 		shr cx, 11
 10132 0000805D 6689C3              <2> 		mov bx, ax
 10133 00008060 66C1E30B            <2> 		shl bx, 11
 10134 00008064 66C1EB0B            <2> 		shr bx, 11
 10135 00008068 6601D9              <2> 		add cx, bx
 10136 0000806B 6601D9              <2> 		add cx, bx
 10137 0000806E 6601D9              <2> 		add cx, bx
 10138 00008071 66C1E902            <2> 		shr cx, 2
 10139 00008075 6601CA              <2> 		add dx, cx
 10140 00008078 668917              <2> 		mov [edi], dx
 10141 0000807B 665A                <2> 		pop dx
 10142 0000807D 6659                <2> 		pop cx
 10143 0000807F 665B                <2> 		pop bx
 10144 00008081 5E                  <2> 		pop esi
 10145                              <2> %else
 10146                              <2> 		mov [edi], ax
 10147                              <2> %endif
 10148 00008082 C3                  <2> 		ret
 10149                              <2> 	copywindow:
 10150 00008083 B201                <2> 		mov dl, 1
 10151 00008085 D0C6                <2> 		rol dh, 1
 10152 00008087 20F2                <2> 		and dl, dh
 10153 00008089 66813D[277A0000]80- <2> 		cmp word [colorcache], 0x80
 10154 00008091 00                  <2>
 10155 00008092 7320                <2> 		jae switchwincolors
 10156 00008094 66A1[1F7C0000]      <2> 		mov ax, [windowcolor + 2]
 10157 0000809A E841FFFFFF          <2> 		call win.write
 10158 0000809F 80FA00              <2> 		cmp dl, 0
 10159 000080A2 742B                <2> 		je nowritewin
 10160 000080A4 66A1[1D7C0000]      <2> 		mov ax, [windowcolor]
 10161 000080AA E831FFFFFF          <2> 		call win.write
 10162 000080AF E91B000000          <2> 		jmp nowritewin
 10163                              <2> 	switchwincolors:
 10164 000080B4 66A1[1D7C0000]      <2> 		mov ax, [windowcolor]
 10165 000080BA E821FFFFFF          <2> 		call win.write
 10166 000080BF 80FA00              <2> 		cmp dl, 0
 10167 000080C2 740B                <2> 		je nowritewin
 10168 000080C4 66A1[1F7C0000]      <2> 		mov ax, [windowcolor + 2]
 10169 000080CA E811FFFFFF          <2> 		call win.write
 10170                              <2> 	nowritewin:
 10171 000080CF 81C702000000        <2> 		add edi, 2
 10172 000080D5 FEC1                <2> 		inc cl
 10173 000080D7 80F908              <2> 		cmp cl, 8
 10174 000080DA 75A7                <2> 		jne copywindow
 10175 000080DC 43                  <2> 		inc ebx
 10176 000080DD 30C9                <2> 		xor cl, cl
 10177 000080DF 31D2                <2> 		xor edx, edx
 10178 000080E1 668B15[955A0000]    <2> 		mov dx, [resolutionx2]
 10179 000080E8 01D6                <2> 		add esi, edx
 10180 000080EA 89F7                <2> 		mov edi, esi
 10181 000080EC 8AB3[C6910000]      <2> 		mov dh, [fonts + ebx]
 10182 000080F2 D0CE                <2> 		ror dh, 1
 10183 000080F4 FEC5                <2> 		inc ch
 10184 000080F6 80FD10              <2> 		cmp ch, 16
 10185 000080F9 7588                <2> 		jne copywindow
 10186                              <2> 	nextcharwin:
 10187 000080FB 6631C9              <2> 		xor cx, cx
 10188 000080FE 8B3D[21820000]      <2> 		mov edi, [charposvbuf]
 10189 00008104 81C704000000        <2> 		add edi, 4
 10190 0000810A 3B3D[337C0000]      <2> 		cmp edi, [wincopyendpos]
 10191 00008110 0F83F2000000        <2> 		jae near donewincopynow
 10192 00008116 668B5F02            <2> 		mov bx, [edi + 2]
 10193 0000811A 6681FB0000          <2> 		cmp bx, 0
 10194 0000811F 7508                <2> 		jne nofixcolorwin
 10195 00008121 66BB0700            <2> 		mov bx, 7
 10196 00008125 66895F02            <2> 		mov [edi + 2], bx
 10197                              <2> 	nofixcolorwin:
 10198 00008129 66891D[277A0000]    <2> 		mov [colorcache], bx
 10199 00008130 8B1F                <2> 		mov ebx, [edi]
 10200 00008132 893D[21820000]      <2> 		mov [charposvbuf], edi
 10201 00008138 813D[297C0000]0000- <2> 		cmp dword [windowvideobuf2], 0
 10202 00008140 0000                <2>
 10203 00008142 7455                <2> 		je noskipcharcopy
 10204 00008144 2B3D[257C0000]      <2> 		sub edi, [windowvideobuf]
 10205 0000814A 033D[297C0000]      <2> 		add edi, [windowvideobuf2]
 10206 00008150 8B07                <2> 		mov eax, [edi]
 10207 00008152 39D8                <2> 		cmp eax, ebx
 10208 00008154 7543                <2> 		jne noskipcharcopy
 10209                              <2> 	skipcharcopy:
 10210 00008156 81C610000000        <2> 		add esi, 16
 10211 0000815C 668B0D[1F820000]    <2> 		mov cx, [charposline]
 10212 00008163 6641                <2> 		inc cx
 10213 00008165 66890D[1F820000]    <2> 		mov [charposline], cx
 10214 0000816C 663B0D[317C0000]    <2> 		cmp cx, [termcol]
 10215 00008173 7286                <2> 		jb nextcharwin
 10216 00008175 6631C9              <2> 		xor cx, cx
 10217 00008178 66890D[1F820000]    <2> 		mov [charposline], cx
 10218 0000817F 31D2                <2> 		xor edx, edx
 10219 00008181 668B15[955A0000]    <2> 		mov dx, [resolutionx2]
 10220 00008188 C1E204              <2> 		shl edx, 4
 10221 0000818B 662B15[197C0000]    <2> 		sub dx, [winvcopydx]
 10222 00008192 01D6                <2> 		add esi, edx
 10223 00008194 E962FFFFFF          <2> 		jmp nextcharwin
 10224                              <2> 	noskipcharcopy:
 10225 00008199 891F                <2> 		mov [edi], ebx
 10226 0000819B 8B3D[21820000]      <2> 		mov edi, [charposvbuf]
 10227 000081A1 C1E310              <2> 		shl ebx, 16
 10228 000081A4 C1EB0C              <2> 		shr ebx, 12
 10229 000081A7 31D2                <2> 		xor edx, edx
 10230 000081A9 668B15[955A0000]    <2> 		mov dx, [resolutionx2]
 10231 000081B0 C1E204              <2> 		shl edx, 4
 10232 000081B3 29D6                <2> 		sub esi, edx
 10233 000081B5 81C610000000        <2> 		add esi, 16
 10234 000081BB 89F7                <2> 		mov edi, esi
 10235 000081BD 668B0D[1F820000]    <2> 		mov cx, [charposline]
 10236 000081C4 6641                <2> 		inc cx
 10237 000081C6 663B0D[317C0000]    <2> 		cmp cx, [termcol]
 10238 000081CD 7317                <2> 		jae fixwindowcopy
 10239 000081CF 66890D[1F820000]    <2> 		mov [charposline], cx
 10240 000081D6 6631C9              <2> 		xor cx, cx
 10241 000081D9 8AB3[C6910000]      <2> 		mov dh, [fonts + ebx]
 10242 000081DF D0CE                <2> 		ror dh, 1
 10243 000081E1 E99DFEFFFF          <2> 		jmp copywindow
 10244                              <2> fixwindowcopy:
 10245 000081E6 6631C9              <2> 		xor cx, cx
 10246 000081E9 66890D[1F820000]    <2> 		mov [charposline], cx
 10247 000081F0 662B15[197C0000]    <2> 		sub dx, [winvcopydx]
 10248 000081F7 01D6                <2> 		add esi, edx
 10249 000081F9 89F7                <2> 		mov edi, esi
 10250 000081FB 8AB3[C6910000]      <2> 		mov dh, [fonts + ebx]
 10251 00008201 D0CE                <2> 		ror dh, 1
 10252 00008203 E97BFEFFFF          <2> 		jmp copywindow
 10253                              <2> donewincopynow:
 10254 00008208 803D[ED230000]01    <2> 		cmp byte [termcopyon], 1
 10255 0000820F 7506                <2> 		jne forgetresetstuff
 10256 00008211 E8F3A7FFFF          <2> 		call switchtermcursor
 10257 00008216 61                  <2> 		popa
 10258                              <2> forgetresetstuff:
 10259 00008217 C605[ED230000]00    <2> 		mov byte [termcopyon], 0
 10260 0000821E C3                  <2> 		ret
 10261                              <2> 		
 10262 0000821F 0000                <2> charposline dw 0
 10263 00008221 00000000            <2> charposvbuf dw 0,0
 10264                              <1> 				
 10265 00008225 00                  <1> copygui db 0
 10266 00008226 00                  <1> graphicsset db 0
 10267 00008227 0000                <1> graphicspos db 0,0
 10268 00008229 00                  <1> showcursorfonton db 0
 10269 0000822A 00                  <1> savefonton db 0
 10270 0000822B 00                  <1> mouseselecton db 0
 10271                              <1> 
 10272 0000822C 00                  <1> pbutton db 0
 10273 0000822D 00                  <1> pLBUTTON db 0
 10274 0000822E 00                  <1> pRBUTTON db 0
 10275 0000822F 00000000            <1> dragging dw 0,0
 10276 00008233 0000000000000000    <1> lastpos dw 0,0,0,0
 10277 0000823B 00000000            <1> colorbuf dw 0,0
 10278                              <1> 	
 10279                              <1> 	clickicon:
 10280 0000823F B001                <1> 		mov al, 1
 10281 00008241 A2[2C820000]        <1> 		mov [pbutton], al
 10282 00008246 A0[2D820000]        <1> 		mov al, [pLBUTTON]
 10283 0000824B 2205[9C5D0000]      <1> 		and al, [LBUTTON]
 10284 00008251 8A25[2E820000]      <1> 		mov ah, [pRBUTTON]
 10285 00008257 2225[9D5D0000]      <1> 		and ah, [RBUTTON]
 10286 0000825D 08E0                <1> 		or al, ah
 10287 0000825F 3C00                <1> 		cmp al, 0
 10288 00008261 741B                <1> 		je nodragclick
 10289 00008263 813D[2F820000]0100- <1> 		cmp dword [dragging], 1
 10290 0000826B 0000                <1>
 10291 0000826D 732F                <1> 		jae dragclick
 10292 0000826F C705[2F820000]0100- <1> 		mov dword [dragging], 1
 10293 00008277 0000                <1>
 10294 00008279 E920000000          <1> 		jmp dragclick
 10295                              <1> 	nodragclick:
 10296 0000827E 31C0                <1> 		xor eax, eax
 10297 00008280 A3[2F820000]        <1> 		mov dword [dragging], eax
 10298 00008285 A2[2C820000]        <1> 		mov [pbutton], al
 10299 0000828A A0[9C5D0000]        <1> 		mov al, [LBUTTON]
 10300 0000828F A2[2D820000]        <1> 		mov [pLBUTTON], al
 10301 00008294 A0[9D5D0000]        <1> 		mov al, [RBUTTON]
 10302 00008299 A2[2E820000]        <1> 		mov [pRBUTTON], al
 10303                              <1> 	dragclick:
 10304 0000829E 6631C0              <1> 		xor ax, ax
 10305 000082A1 BE[71C20300]        <1> 		mov esi, graphicstable
 10306 000082A6 C705[A48A0000]0000- <1> 		mov dword [codepointer], 0
 10307 000082AE 0000                <1>
 10308                              <1> 	clicon2:
 10309 000082B0 31D2                <1> 		xor edx, edx
 10310 000082B2 31C9                <1> 		xor ecx, ecx
 10311 000082B4 66813E0100          <1> 		cmp word [esi], 1
 10312 000082B9 0F841B000000        <1> 		je near iconselect
 10313 000082BF 66813E0200          <1> 		cmp word [esi], 2
 10314 000082C4 0F8472010000        <1> 		je near textselected
 10315 000082CA 66813E0300          <1> 		cmp word [esi], 3
 10316 000082CF 0F84C7020000        <1> 		je near windowselect
 10317 000082D5 E910040000          <1> 		jmp nexticonsel
 10318                              <1> 	iconselect:
 10319 000082DA 668B5606            <1> 		mov dx, [esi + 6]
 10320 000082DE 6689D0              <1> 		mov ax, dx
 10321 000082E1 668B4E08            <1> 		mov cx, [esi + 8]
 10322 000082E5 6689CB              <1> 		mov bx, cx
 10323 000082E8 6681C32000          <1> 		add bx, 32
 10324 000082ED 6601D0              <1> 		add ax, dx
 10325 000082F0 813D[2F820000]0100- <1> 		cmp dword [dragging], 1
 10326 000082F8 0000                <1>
 10327 000082FA 746F                <1> 		je dragicon
 10328 000082FC 813D[2F820000]0000- <1> 		cmp dword [dragging], 0
 10329 00008304 0000                <1>
 10330 00008306 7411                <1> 		je nodragiconcheck
 10331 00008308 3935[2F820000]      <1> 		cmp dword [dragging], esi
 10332 0000830E 0F85D6030000        <1> 		jne near nexticonsel
 10333 00008314 E952000000          <1> 		jmp dragicon
 10334                              <1> 	nodragiconcheck:
 10335 00008319 663905[8B5C0000]    <1> 		cmp [mousecursorposition], ax
 10336 00008320 0F82C4030000        <1> 		jb near nexticonsel
 10337 00008326 66054000            <1> 		add ax, 64
 10338 0000832A 663905[8B5C0000]    <1> 		cmp [mousecursorposition], ax
 10339 00008331 0F87B3030000        <1> 		ja near nexticonsel
 10340 00008337 6629D0              <1> 		sub ax, dx
 10341 0000833A 66390D[8D5C0000]    <1> 		cmp [mousecursorposition + 2], cx
 10342 00008341 0F82A3030000        <1> 		jb near nexticonsel
 10343 00008347 66391D[8D5C0000]    <1> 		cmp [mousecursorposition + 2], bx
 10344 0000834E 0F8796030000        <1> 		ja near nexticonsel
 10345 00008354 668B460A            <1> 		mov ax, [esi + 10]
 10346 00008358 66250100            <1> 		and ax, 1
 10347 0000835C 663D0100            <1> 		cmp ax, 1
 10348 00008360 0F84B6000000        <1> 		je near unselecticon
 10349 00008366 E98D000000          <1> 		jmp nodragicon
 10350                              <1> 	dragicon:
 10351 0000836B 663905[875C0000]    <1> 		cmp [lastmouseposition], ax
 10352 00008372 0F8272030000        <1> 		jb near nexticonsel
 10353 00008378 66054000            <1> 		add ax, 64
 10354 0000837C 663905[875C0000]    <1> 		cmp [lastmouseposition], ax
 10355 00008383 0F8761030000        <1> 		ja near nexticonsel
 10356 00008389 6629D0              <1> 		sub ax, dx
 10357 0000838C 66390D[895C0000]    <1> 		cmp [lastmouseposition + 2], cx
 10358 00008393 0F8251030000        <1> 		jb near nexticonsel
 10359 00008399 66391D[895C0000]    <1> 		cmp [lastmouseposition + 2], bx
 10360 000083A0 0F8744030000        <1> 		ja near nexticonsel
 10361 000083A6 668B460A            <1> 		mov ax, [esi + 10]
 10362 000083AA 2410                <1> 		and al, 00010000b
 10363 000083AC 3C10                <1> 		cmp al, 00010000b
 10364 000083AE 7448                <1> 		je nodragicon
 10365 000083B0 8935[2F820000]      <1> 		mov [dragging], esi
 10366 000083B6 66D1E2              <1> 		shl dx, 1
 10367 000083B9 662B15[875C0000]    <1> 		sub dx, [lastmouseposition]
 10368 000083C0 660315[8B5C0000]    <1> 		add dx, [mousecursorposition]
 10369 000083C7 66D1EA              <1> 		shr dx, 1
 10370 000083CA 66030D[8D5C0000]    <1> 		add cx, [mousecursorposition + 2]
 10371 000083D1 662B0D[895C0000]    <1> 		sub cx, [lastmouseposition + 2]
 10372 000083D8 663B15[955A0000]    <1> 		cmp dx, [resolutionx2]
 10373 000083DF 7607                <1> 		jbe chkyresdrgicn
 10374 000083E1 668B15[8B5C0000]    <1> 		mov dx, [mousecursorposition]
 10375                              <1> 	chkyresdrgicn:
 10376 000083E8 663B0D[A9590000]    <1> 		cmp cx, [resolutiony]
 10377 000083EF 7607                <1> 		jbe nodragicon
 10378 000083F1 668B0D[8D5C0000]    <1> 		mov cx, [mousecursorposition + 2]
 10379                              <1> 	nodragicon:
 10380 000083F8 66814E0A0100        <1> 		or word [esi + 10], 1
 10381 000083FE 8B5E0C              <1> 		mov ebx, [esi + 12]
 10382 00008401 668B460A            <1> 		mov ax, [esi + 10]
 10383 00008405 8B7602              <1> 		mov esi, [esi + 2]
 10384 00008408 C705[A48A0000]0000- <1> 		mov dword [codepointer], 0
 10385 00008410 0000                <1>
 10386 00008412 E8B9ECFFFF          <1> 		call showicon
 10387 00008417 E9E7020000          <1> 		jmp doneiconsel
 10388                              <1> 	unselecticon:
 10389 0000841C 6681660AFEFF        <1> 		and word [esi + 10], 0xFFFE
 10390 00008422 8B5E0C              <1> 		mov ebx, [esi + 12]
 10391 00008425 668B460A            <1> 		mov ax, [esi + 10]
 10392 00008429 8B7602              <1> 		mov esi, [esi + 2]
 10393 0000842C 891D[A48A0000]      <1> 		mov [codepointer], ebx
 10394 00008432 E899ECFFFF          <1> 		call showicon
 10395 00008437 E9C7020000          <1> 		jmp doneiconsel
 10396                              <1> 	textselected:
 10397 0000843C 8B5E02              <1> 		mov ebx, [esi + 2]
 10398 0000843F 668B5606            <1> 		mov dx, [esi + 6]
 10399 00008443 6689D0              <1> 		mov ax, dx
 10400 00008446 668B4E08            <1> 		mov cx, [esi + 8]
 10401                              <1> 	lengthtesttext:
 10402 0000844A 803B00              <1> 		cmp byte [ebx], 0
 10403 0000844D 7407                <1> 		je donetesttextlength
 10404 0000844F 43                  <1> 		inc ebx
 10405 00008450 66051000            <1> 		add ax, 16
 10406 00008454 EBF4                <1> 		jmp lengthtesttext
 10407                              <1> 	donetesttextlength:
 10408 00008456 6689CB              <1> 		mov bx, cx
 10409 00008459 6681C30F00          <1> 		add bx, 15
 10410 0000845E 813D[2F820000]0100- <1> 		cmp dword [dragging], 1
 10411 00008466 0000                <1>
 10412 00008468 7468                <1> 		je dragtext
 10413 0000846A 813D[2F820000]0000- <1> 		cmp dword [dragging], 0
 10414 00008472 0000                <1>
 10415 00008474 7411                <1> 		je nodragtextcheck
 10416 00008476 3935[2F820000]      <1> 		cmp dword [dragging], esi
 10417 0000847C 0F8568020000        <1> 		jne near nexticonsel
 10418 00008482 E94B000000          <1> 		jmp dragtext
 10419                              <1> 	nodragtextcheck:
 10420 00008487 663915[8B5C0000]    <1> 		cmp [mousecursorposition], dx
 10421 0000848E 0F8256020000        <1> 		jb near nexticonsel
 10422 00008494 663905[8B5C0000]    <1> 		cmp [mousecursorposition], ax
 10423 0000849B 0F8749020000        <1> 		ja near nexticonsel
 10424 000084A1 66390D[8D5C0000]    <1> 		cmp [mousecursorposition + 2], cx
 10425 000084A8 0F823C020000        <1> 		jb near nexticonsel
 10426 000084AE 66391D[8D5C0000]    <1> 		cmp [mousecursorposition + 2], bx
 10427 000084B5 0F872F020000        <1> 		ja near nexticonsel
 10428 000084BB 668B460A            <1> 		mov ax, [esi + 10]
 10429 000084BF 66250100            <1> 		and ax, 1
 10430 000084C3 663D0100            <1> 		cmp ax, 1
 10431 000084C7 0F84AB000000        <1> 		je near unselecttext
 10432 000084CD E986000000          <1> 		jmp nodragtext
 10433                              <1> 	dragtext:
 10434 000084D2 663915[875C0000]    <1> 		cmp [lastmouseposition], dx
 10435 000084D9 0F820B020000        <1> 		jb near nexticonsel
 10436 000084DF 663905[875C0000]    <1> 		cmp [lastmouseposition], ax
 10437 000084E6 0F87FE010000        <1> 		ja near nexticonsel
 10438 000084EC 66390D[895C0000]    <1> 		cmp [lastmouseposition + 2], cx
 10439 000084F3 0F82F1010000        <1> 		jb near nexticonsel
 10440 000084F9 66391D[895C0000]    <1> 		cmp [lastmouseposition + 2], bx
 10441 00008500 0F87E4010000        <1> 		ja near nexticonsel
 10442 00008506 668B460A            <1> 		mov ax, [esi + 10]
 10443 0000850A 2410                <1> 		and al, 00010000b
 10444 0000850C 663D1000            <1> 		cmp ax, 00010000b
 10445 00008510 0F8442000000        <1> 		je near nodragtext
 10446 00008516 8935[2F820000]      <1> 		mov [dragging], esi
 10447 0000851C 662B15[875C0000]    <1> 		sub dx, [lastmouseposition]
 10448 00008523 660315[8B5C0000]    <1> 		add dx, [mousecursorposition]
 10449 0000852A 66030D[8D5C0000]    <1> 		add cx, [mousecursorposition + 2]
 10450 00008531 662B0D[895C0000]    <1> 		sub cx, [lastmouseposition + 2]
 10451 00008538 663B15[955A0000]    <1> 		cmp dx, [resolutionx2]
 10452 0000853F 7607                <1> 		jbe chkyresdrgtxt
 10453 00008541 668B15[8B5C0000]    <1> 		mov dx, [mousecursorposition]
 10454                              <1> 	chkyresdrgtxt:
 10455 00008548 663B0D[A9590000]    <1> 		cmp cx, [resolutiony]
 10456 0000854F 7607                <1> 		jbe nodragtext
 10457 00008551 668B0D[8D5C0000]    <1> 		mov cx, [mousecursorposition + 2]
 10458                              <1> 	nodragtext:
 10459 00008558 66814E0A0100        <1> 		or word [esi + 10], 1
 10460 0000855E 8B5E0C              <1> 		mov ebx, [esi + 12]
 10461 00008561 891D[A48A0000]      <1> 		mov [codepointer], ebx
 10462 00008567 668B460A            <1> 		mov ax, [esi + 10]
 10463 0000856B 8B7602              <1> 		mov esi, [esi + 2]
 10464 0000856E E837F4FFFF          <1> 		call showstring
 10465 00008573 E98B010000          <1> 		jmp doneiconsel
 10466                              <1> 	unselecttext:
 10467 00008578 6681660AFEFF        <1> 		and word [esi + 10], 0xFFFE
 10468 0000857E 8B5E0C              <1> 		mov ebx, [esi + 12]
 10469 00008581 668B460A            <1> 		mov ax, [esi + 10]
 10470 00008585 8B7602              <1> 		mov esi, [esi + 2]
 10471 00008588 C705[A48A0000]0000- <1> 		mov dword [codepointer], 0
 10472 00008590 0000                <1>
 10473 00008592 E813F4FFFF          <1> 		call showstring
 10474 00008597 E967010000          <1> 		jmp doneiconsel
 10475                              <1> windowselect:
 10476 0000859C 8B7E02              <1> 		mov edi, [esi + 2]
 10477 0000859F 668B5606            <1> 		mov dx, [esi + 6]
 10478 000085A3 6689D0              <1> 		mov ax, dx
 10479 000085A6 668B4E08            <1> 		mov cx, [esi + 8]
 10480 000085AA 6689CB              <1> 		mov bx, cx
 10481 000085AD 6681C31000          <1> 		add bx, 16
 10482 000085B2 813D[2F820000]0100- <1> 		cmp dword [dragging], 1
 10483 000085BA 0000                <1>
 10484 000085BC 746D                <1> 		je dragwin
 10485 000085BE 813D[2F820000]0000- <1> 		cmp dword [dragging], 0
 10486 000085C6 0000                <1>
 10487 000085C8 7411                <1> 		je nodragwincheck
 10488 000085CA 3935[2F820000]      <1> 		cmp dword [dragging], esi
 10489 000085D0 0F8514010000        <1> 		jne near nexticonsel
 10490 000085D6 E950000000          <1> 		jmp dragwin
 10491                              <1> 	nodragwincheck:
 10492 000085DB 663905[8B5C0000]    <1> 		cmp [mousecursorposition], ax
 10493 000085E2 0F8202010000        <1> 		jb near nexticonsel
 10494 000085E8 660307              <1> 		add ax, [edi]
 10495 000085EB 660307              <1> 		add ax, [edi]
 10496 000085EE 663905[8B5C0000]    <1> 		cmp [mousecursorposition], ax
 10497 000085F5 0F87EF000000        <1> 		ja near nexticonsel
 10498 000085FB 66390D[8D5C0000]    <1> 		cmp [mousecursorposition + 2], cx
 10499 00008602 0F82E2000000        <1> 		jb near nexticonsel
 10500 00008608 66391D[8D5C0000]    <1> 		cmp [mousecursorposition + 2], bx
 10501 0000860F 0F87D5000000        <1> 		ja near nexticonsel
 10502 00008615 662D1400            <1> 		sub ax, 20
 10503 00008619 663905[8B5C0000]    <1> 		cmp [mousecursorposition], ax
 10504 00008620 0F87A4000000        <1> 		ja near killwin
 10505 00008626 E98B000000          <1> 		jmp nodragwin
 10506                              <1> 	dragwin:
 10507 0000862B 663905[875C0000]    <1> 		cmp [lastmouseposition], ax
 10508 00008632 0F82B2000000        <1> 		jb near nexticonsel
 10509 00008638 660307              <1> 		add ax, [edi]
 10510 0000863B 660307              <1> 		add ax, [edi]
 10511 0000863E 663905[875C0000]    <1> 		cmp [lastmouseposition], ax
 10512 00008645 0F879F000000        <1> 		ja near nexticonsel
 10513 0000864B 66390D[895C0000]    <1> 		cmp [lastmouseposition + 2], cx
 10514 00008652 0F8292000000        <1> 		jb near nexticonsel
 10515 00008658 66391D[895C0000]    <1> 		cmp [lastmouseposition + 2], bx
 10516 0000865F 0F8785000000        <1> 		ja near nexticonsel
 10517 00008665 8935[2F820000]      <1> 		mov [dragging], esi
 10518 0000866B 803D[93870000]01    <1> 		cmp byte [windrag], 1
 10519 00008672 7706                <1> 		ja .nochangewindrag
 10520 00008674 FE05[93870000]      <1> 		inc byte [windrag]
 10521                              <1> 	.nochangewindrag:
 10522 0000867A 662B15[875C0000]    <1> 		sub dx, [lastmouseposition]
 10523 00008681 660315[8B5C0000]    <1> 		add dx, [mousecursorposition]
 10524 00008688 66030D[8D5C0000]    <1> 		add cx, [mousecursorposition + 2]
 10525 0000868F 662B0D[895C0000]    <1> 		sub cx, [lastmouseposition + 2]
 10526 00008696 663B15[955A0000]    <1> 		cmp dx, [resolutionx2]
 10527 0000869D 7607                <1> 		jbe chkyresdrgwin
 10528 0000869F 668B15[8B5C0000]    <1> 		mov dx, [mousecursorposition]
 10529                              <1> 	chkyresdrgwin:
 10530 000086A6 663B0D[A9590000]    <1> 		cmp cx, [resolutiony]
 10531 000086AD 7607                <1> 		jbe nodragwin
 10532 000086AF 668B0D[8D5C0000]    <1> 		mov cx, [mousecursorposition + 2]
 10533                              <1> 	nodragwin:
 10534 000086B6 8B5E0C              <1> 		mov ebx, [esi + 12]
 10535 000086B9 668B460A            <1> 		mov ax, [esi + 10]
 10536 000086BD 8B7602              <1> 		mov esi, [esi + 2]
 10537 000086C0 E872F5FFFF          <1> 		call showwindow
 10538 000086C5 E939000000          <1> 		jmp doneiconsel
 10539                              <1> 	killwin:
 10540 000086CA 66C7060000          <1> 		mov word [esi], 0
 10541 000086CF C605[EC230000]00    <1> 		mov byte [termguion], 0
 10542 000086D6 E8F6EBFFFF          <1> 		call guiclear
 10543 000086DB E884ECFFFF          <1> 		call reloadallgraphics
 10544 000086E0 E888E9FFFF          <1> 		call switchmousepos2 ;Copy what is now under the mouse
 10545 000086E5 E920E5FFFF          <1> 		jmp guistart
 10546                              <1> 	nexticonsel:
 10547 000086EA 6681660AFEFF        <1> 		and word [esi + 10], 0xFFFE
 10548 000086F0 81C610000000        <1> 		add esi, 16
 10549 000086F6 81FE[71C40300]      <1> 		cmp esi, graphicstableend
 10550 000086FC 7305                <1> 		jae doneiconsel
 10551 000086FE E9ADFBFFFF          <1> 		jmp clicon2
 10552                              <1> 	doneiconsel:
 10553 00008703 813D[2F820000]0100- <1> 		cmp dword [dragging], 1
 10554 0000870B 0000                <1>
 10555 0000870D 731A                <1> 		jae doneiconsel2
 10556 0000870F A2[93870000]        <1> 		mov [windrag], al
 10557 00008714 813D[A48A0000]0000- <1> 		cmp dword [codepointer], 0
 10558 0000871C 0000                <1>
 10559 0000871E 7409                <1> 		je doneiconsel2
 10560 00008720 8B1D[A48A0000]      <1> 		mov ebx, [codepointer]
 10561 00008726 FFD3                <1> 		call ebx
 10562 00008728 C3                  <1> 		ret
 10563                              <1> 	doneiconsel2:
 10564 00008729 A0[9C5D0000]        <1> 		mov al, [LBUTTON]
 10565 0000872E A2[2D820000]        <1> 		mov [pLBUTTON], al
 10566 00008733 A0[9D5D0000]        <1> 		mov al, [RBUTTON]
 10567 00008738 A2[2E820000]        <1> 		mov [pRBUTTON], al
 10568 0000873D 813D[2F820000]0100- <1> 		cmp dword [dragging], 1
 10569 00008745 0000                <1>
 10570 00008747 0F8618000000        <1> 		jbe near noreloadgraphicsclick
 10571 0000874D E81BE9FFFF          <1> 		call switchmousepos2
 10572 00008752 803D[93870000]01    <1> 		cmp byte [windrag], 1
 10573 00008759 7305                <1> 		jae noclearcursorcl
 10574 0000875B E811E8FFFF          <1> 		call clearmousecursor
 10575                              <1> noclearcursorcl:
 10576 00008760 E8FFEBFFFF          <1> 		call reloadallgraphics
 10577                              <1> noreloadgraphicsclick:
 10578 00008765 30E4                <1> 		xor ah, ah
 10579 00008767 31C9                <1> 		xor ecx, ecx
 10580 00008769 31D2                <1> 		xor edx, edx
 10581 0000876B B001                <1> 		mov al, 1
 10582 0000876D 668B15[8B5C0000]    <1> 		mov dx, [mousecursorposition]
 10583 00008774 668B0D[8D5C0000]    <1> 		mov cx, [mousecursorposition + 2]
 10584 0000877B 66BBE738            <1> 		mov bx, 0011100011100111b
 10585 0000877F C605[29820000]01    <1> 		mov byte [showcursorfonton], 1
 10586 00008786 E8ABF2FFFF          <1> 		call showfontvesa
 10587 0000878B C605[29820000]00    <1> 		mov byte [showcursorfonton], 0
 10588 00008792 C3                  <1> 		ret
 10589 00008793 00                  <1> windrag db 0
 10590 00008794 00000000            <1> lastdrag dw 0,0
 10591 00008798 00000000            <1> grpctblpos dw 0,0
 10592                              <1> 
 10593                              <1> 
 10594                              <1> 
 10595 0000879C 00<rept>            <1> grphbuf times 16 db 0
 10596                              <1> 	graphicsadd:
 10597 000087AC BF[71C20300]        <1> 		mov edi, graphicstable
 10598                              <1> 	shwgrph1:
 10599 000087B1 397702              <1> 		cmp dword [edi + 2], esi
 10600 000087B4 7414                <1> 		je showgraphicsreplace2
 10601 000087B6 81C710000000        <1> 		add edi, 16
 10602 000087BC 81FF[71C40300]      <1> 		cmp edi, graphicstableend
 10603 000087C2 0F835C020000        <1> 		jae near showgraphicsnew
 10604 000087C8 EBE7                <1> 		jmp shwgrph1
 10605                              <1> 	showgraphicsreplace2:
 10606 000087CA 8935[9E870000]      <1> 		mov [grphbuf + 2], esi
 10607 000087D0 668915[A2870000]    <1> 		mov [grphbuf + 6], dx
 10608 000087D7 66890D[A4870000]    <1> 		mov [grphbuf + 8], cx
 10609 000087DE 891D[A8870000]      <1> 		mov [grphbuf + 12], ebx
 10610 000087E4 30FF                <1> 		xor bh, bh
 10611 000087E6 88E3                <1> 		mov bl, ah
 10612 000087E8 30E4                <1> 		xor ah, ah
 10613 000087EA 66A3[A6870000]      <1> 		mov [grphbuf + 10], ax	
 10614 000087F0 66891D[9C870000]    <1> 		mov [grphbuf], bx
 10615 000087F7 66A1[9C870000]      <1> 		mov ax, [grphbuf]
 10616 000087FD 663D0100            <1> 		cmp ax, 1
 10617 00008801 0F8419000000        <1> 		je near replaceicon
 10618 00008807 663D0200            <1> 		cmp ax, 2
 10619 0000880B 0F8493000000        <1> 		je near replacestring
 10620 00008811 663D0300            <1> 		cmp ax, 3
 10621 00008815 0F840F010000        <1> 		je near replacewindow
 10622 0000881B E9E1010000          <1> 		jmp showgraphicsreplace
 10623                              <1> 	replaceicon:
 10624 00008820 893D[33820000]      <1> 		mov [lastpos], edi
 10625 00008826 8935[37820000]      <1> 		mov [lastpos + 4], esi
 10626 0000882C 8B7702              <1> 		mov esi, [edi + 2]
 10627 0000882F 668B5F0C            <1> 		mov bx, [edi + 12]
 10628 00008833 668B5706            <1> 		mov dx, [edi + 6]
 10629 00008837 668B4F08            <1> 		mov cx, [edi + 8]
 10630 0000883B 668B06              <1> 		mov ax, [esi]
 10631 0000883E 66A3[3B820000]      <1> 		mov [colorbuf], ax
 10632 00008844 66A1[60730000]      <1> 		mov ax, [background]
 10633 0000884A 668906              <1> 		mov [esi], ax
 10634 0000884D 8B5F0C              <1> 		mov ebx, [edi + 12]
 10635 00008850 668B470A            <1> 		mov ax, [edi + 10]
 10636 00008854 2401                <1> 		and al, 1
 10637 00008856 A2[A88A0000]        <1> 		mov [iconselected], al
 10638 0000885B 668B470A            <1> 		mov ax, [edi + 10]
 10639 0000885F E87FE8FFFF          <1> 		call showicon2
 10640 00008864 8B3D[33820000]      <1> 		mov edi, [lastpos]
 10641 0000886A 8B7702              <1> 		mov esi, [edi + 2]
 10642 0000886D 66A1[3B820000]      <1> 		mov ax, [colorbuf]
 10643 00008873 668906              <1> 		mov [esi], ax
 10644 00008876 8B35[37820000]      <1> 		mov esi, [lastpos + 4]
 10645 0000887C 668B15[A2870000]    <1> 		mov dx, [grphbuf + 6]
 10646 00008883 668B0D[A4870000]    <1> 		mov cx, [grphbuf + 8]
 10647 0000888A 668B1D[9C870000]    <1> 		mov bx, [grphbuf]
 10648 00008891 66A1[A6870000]      <1> 		mov ax, [grphbuf + 10]
 10649 00008897 88DC                <1> 		mov ah, bl
 10650 00008899 8B1D[A8870000]      <1> 		mov ebx, [grphbuf + 12]
 10651 0000889F E95D010000          <1> 		jmp showgraphicsreplace
 10652                              <1> 	replacestring:
 10653 000088A4 893D[33820000]      <1> 		mov [lastpos], edi
 10654 000088AA 8935[37820000]      <1> 		mov [lastpos + 4], esi
 10655 000088B0 8B5F0C              <1> 		mov ebx, [edi + 12]
 10656 000088B3 8B7702              <1> 		mov esi, [edi + 2]
 10657 000088B6 668B5706            <1> 		mov dx, [edi + 6]
 10658 000088BA 668B4F08            <1> 		mov cx, [edi + 8]
 10659 000088BE 66A1[257A0000]      <1> 		mov ax, [colorfont2]
 10660 000088C4 66A3[3B820000]      <1> 		mov [colorbuf], ax
 10661 000088CA 66A1[60730000]      <1> 		mov ax, [background]
 10662 000088D0 66A3[257A0000]      <1> 		mov [colorfont2], ax		
 10663 000088D6 8B5F0C              <1> 		mov ebx, [edi + 12]
 10664 000088D9 668B470A            <1> 		mov ax, [edi + 10]
 10665 000088DD 2401                <1> 		and al, 1
 10666 000088DF A2[2B820000]        <1> 		mov [mouseselecton], al
 10667 000088E4 668B470A            <1> 		mov ax, [edi + 10]
 10668 000088E8 E8D0F0FFFF          <1> 		call showstring2
 10669 000088ED 66A1[3B820000]      <1> 		mov ax, [colorbuf]
 10670 000088F3 66A3[257A0000]      <1> 		mov [colorfont2], ax
 10671 000088F9 8B3D[33820000]      <1> 		mov edi, [lastpos]
 10672 000088FF 8B7702              <1> 		mov esi, [edi + 2]
 10673 00008902 668B15[A2870000]    <1> 		mov dx, [grphbuf + 6]
 10674 00008909 668B0D[A4870000]    <1> 		mov cx, [grphbuf + 8]
 10675 00008910 668B1D[9C870000]    <1> 		mov bx, [grphbuf]
 10676 00008917 66A1[A6870000]      <1> 		mov ax, [grphbuf + 10]
 10677 0000891D 88DC                <1> 		mov ah, bl
 10678 0000891F 8B1D[A8870000]      <1> 		mov ebx, [grphbuf + 12]
 10679 00008925 E9D7000000          <1> 		jmp showgraphicsreplace
 10680                              <1> 	replacewindow:
 10681 0000892A 893D[33820000]      <1> 		mov [lastpos], edi
 10682 00008930 8935[37820000]      <1> 		mov [lastpos + 4], esi
 10683 00008936 8B7702              <1> 		mov esi, [edi + 2]
 10684 00008939 8B3D[217C0000]      <1> 		mov edi, [windowbufloc]
 10685 0000893F 31D2                <1> 		xor edx, edx
 10686 00008941 668B15[955A0000]    <1> 		mov dx, [resolutionx2]
 10687 00008948 C1E204              <1> 		shl edx, 4
 10688 0000894B 29D7                <1> 		sub edi, edx
 10689 0000894D 31D2                <1> 		xor edx, edx
 10690 0000894F 668B16              <1> 		mov dx, [esi]
 10691 00008952 660316              <1> 		add dx, [esi]
 10692 00008955 668B4E02            <1> 		mov cx, [esi + 2]
 10693 00008959 6681C11000          <1> 		add cx, 16
 10694 0000895E 66A1[60730000]      <1> 		mov ax, [background]
 10695 00008964 803D[93870000]01    <1> 		cmp byte [windrag], 1
 10696 0000896B 7604                <1> 		jbe clearwindow
 10697 0000896D 662B4E02            <1> 		sub cx, [esi + 2]
 10698                              <1> 	clearwindow:
 10699                              <1> 		%ifdef gui.background
 10700 00008971 813D[32730000]0000- <1> 			cmp dword [backgroundimage], 0
 10701 00008979 0000                <1>
 10702 0000897B 7419                <1> 			je .noback
 10703 0000897D 56                  <1> 			push esi
 10704 0000897E 8B35[32730000]      <1> 			mov esi, [backgroundimage]
 10705 00008984 2B3D[BD590000]      <1> 			sub edi, [physbaseptr]
 10706 0000898A 01FE                <1> 			add esi, edi
 10707 0000898C 033D[BD590000]      <1> 			add edi, [physbaseptr]
 10708 00008992 668B06              <1> 			mov ax, [esi]
 10709 00008995 5E                  <1> 			pop esi
 10710                              <1> 		.noback:
 10711                              <1> 		%endif
 10712 00008996 668907              <1> 		mov [edi], ax
 10713 00008999 81C702000000        <1> 		add edi, 2
 10714 0000899F 81EA02000000        <1> 		sub edx, 2
 10715 000089A5 81FA00000000        <1> 		cmp edx, 0
 10716 000089AB 75C4                <1> 		jne clearwindow
 10717 000089AD 6649                <1> 		dec cx
 10718 000089AF 668B15[955A0000]    <1> 		mov dx, [resolutionx2]
 10719 000089B6 662B16              <1> 		sub dx, [esi]
 10720 000089B9 662B16              <1> 		sub dx, [esi]
 10721 000089BC 01D7                <1> 		add edi, edx
 10722 000089BE 668B16              <1> 		mov dx, [esi]
 10723 000089C1 660316              <1> 		add dx, [esi]
 10724 000089C4 6681F90000          <1> 		cmp cx, 0
 10725 000089C9 75A6                <1> 		jne clearwindow
 10726                              <1> 	endwindowclear:
 10727 000089CB C605[ED230000]00    <1> 		mov byte [termcopyon], 0
 10728 000089D2 8B3D[33820000]      <1> 		mov edi, [lastpos]
 10729 000089D8 8B35[9E870000]      <1> 		mov esi, [grphbuf + 2]
 10730 000089DE 668B15[A2870000]    <1> 		mov dx, [grphbuf + 6]
 10731 000089E5 668B0D[A4870000]    <1> 		mov cx, [grphbuf + 8]
 10732 000089EC 668B1D[9C870000]    <1> 		mov bx, [grphbuf]
 10733 000089F3 66A1[A6870000]      <1> 		mov ax, [grphbuf + 10]
 10734 000089F9 88DC                <1> 		mov ah, bl
 10735 000089FB 8B1D[A8870000]      <1> 		mov ebx, [grphbuf + 12]
 10736                              <1> 	showgraphicsreplace:
 10737 00008A01 897702              <1> 		mov [edi + 2], esi
 10738 00008A04 66895706            <1> 		mov [edi + 6], dx
 10739 00008A08 66894F08            <1> 		mov [edi + 8], cx
 10740 00008A0C 895F0C              <1> 		mov [edi + 12], ebx
 10741 00008A0F 30FF                <1> 		xor bh, bh
 10742 00008A11 88E3                <1> 		mov bl, ah
 10743 00008A13 30E4                <1> 		xor ah, ah
 10744 00008A15 6689470A            <1> 		mov [edi + 10], ax
 10745 00008A19 66891F              <1> 		mov [edi], bx
 10746 00008A1C 8B5F0C              <1> 		mov ebx, [edi + 12]
 10747 00008A1F 668B470A            <1> 		mov ax, [edi + 10]
 10748 00008A23 C3                  <1> 		ret
 10749                              <1> 	showgraphicsnew:
 10750 00008A24 BF[71C20300]        <1> 		mov edi, graphicstable
 10751                              <1> 	shwgrph2:
 10752 00008A29 66813F0000          <1> 		cmp word [edi], 0
 10753 00008A2E 74D1                <1> 		je showgraphicsreplace
 10754 00008A30 81C710000000        <1> 		add edi, 16
 10755 00008A36 81FF[71C40300]      <1> 		cmp edi, graphicstableend
 10756 00008A3C 72EB                <1> 		jb shwgrph2
 10757                              <1> 	showgraphicsdone:
 10758 00008A3E C3                  <1> 		ret
 10759                              <1> 	
 10760                              <1> putpixel: ;color in si, point is (dx,cx)
 10761                              <1> 		;destroys edi, ebx, eax
 10762 00008A3F 6650                <1> 	push ax
 10763 00008A41 6653                <1> 	push bx
 10764 00008A43 31C0                <1> 	xor eax, eax
 10765 00008A45 31DB                <1> 	xor ebx, ebx
 10766 00008A47 31FF                <1> 	xor edi, edi
 10767 00008A49 668B1D[A9590000]    <1> 	mov bx, [resolutiony]
 10768 00008A50 66A1[A7590000]      <1> 	mov ax, [resolutionx]
 10769 00008A56 6639C2              <1> 	cmp dx, ax
 10770 00008A59 7720                <1> 	ja .doneput
 10771 00008A5B 66D1E0              <1> 	shl ax, 1
 10772 00008A5E 6639D9              <1> 	cmp cx, bx
 10773 00008A61 7718                <1> 	ja .doneput
 10774 00008A63 6689CB              <1> 	mov bx, cx
 10775 00008A66 52                  <1> 	push edx
 10776 00008A67 F7E3                <1> 	mul ebx
 10777 00008A69 5A                  <1> 	pop edx
 10778 00008A6A 6601D7              <1> 	add di, dx
 10779 00008A6D 6601D7              <1> 	add di, dx
 10780 00008A70 01C7                <1> 	add edi, eax
 10781 00008A72 033D[BD590000]      <1> 	add edi, [physbaseptr]
 10782 00008A78 668937              <1> 	mov [edi], si
 10783                              <1> .doneput:
 10784 00008A7B 665B                <1> 	pop bx
 10785 00008A7D 6658                <1> 	pop ax
 10786 00008A7F C3                  <1> 	ret
 10787                              <1> 	
 10788                              <1> getpixelmem:	;pixel in (dx, cx), outputs memory location in edi
 10789 00008A80 31FF                <1> 	xor edi, edi
 10790 00008A82 31C0                <1> 	xor eax, eax
 10791 00008A84 31DB                <1> 	xor ebx, ebx
 10792 00008A86 668B1D[955A0000]    <1> 	mov bx, [resolutionx2]
 10793 00008A8D 6689D7              <1> 	mov di, dx
 10794 00008A90 6601D7              <1> 	add di, dx
 10795 00008A93 6689C8              <1> 	mov ax, cx
 10796 00008A96 F7E3                <1> 	mul ebx
 10797 00008A98 01C7                <1> 	add edi, eax
 10798 00008A9A 033D[BD590000]      <1> 	add edi, [physbaseptr]
 10799 00008AA0 C3                  <1> 	ret
 10800                              <1> 
 10801 00008AA1 00                  <1> 	mouseon db 0
 10802 00008AA2 0000                <1> 	icon dw 0	;pointer to icon
 10803 00008AA4 00000000            <1> 	codepointer dd 0 ;pointer to code
 10804 00008AA8 00                  <1> 	iconselected db 0
 10805                                  %endif
 10806                                  %ifdef network.included
 10807                                  	%include "source/network.asm"
 10808                              <1> network.init:
 10809                              <1> %ifdef rtl8139.included
 10810                              <1> 	%include "source/drivers/network/rtl8139.asm"
 10811                              <1> %endif
 10812                              <1> %ifdef rtl8169.included
 10813                              <1> 	%include "source/drivers/network/rtl8169.asm"
 10814                              <1> %endif
 10815                              <1> %ifdef ne2000.included
 10816                              <1> 	%include "source/drivers/network/ne2000.asm"
 10817                              <2> ne2000:
 10818 00008AA9 E805000000          <2> 	call .init
 10819 00008AAE E93D030000          <2> 	jmp .end
 10820                              <2> 
 10821                              <2> ;	PAGE0			PAGE 1			PAGE 2
 10822                              <2> ;	READ	WRITE	READ	WRITE	READ	WRITE
 10823                              <2> ;0	CR		CR		CR		CR		CR		CR
 10824                              <2> ;1	CLDA0 	PSTART	PAR0	PAR0	PSTART	CLDA0
 10825                              <2> ;2	CLDA1	PSTOP	PAR1	PAR1	PSTOP	CLDA1
 10826                              <2> ;3	BNRY	BNRY	PAR2	PAR2	RNPP	RNPP
 10827                              <2> ;4	TSR		TPSR	PAR3	PAR3	TPSR	N/A
 10828                              <2> ;5	NCR		TBCR0	PAR4	PAR4	LNPP	LNPP
 10829                              <2> ;6	FIFO	TCBR1	PAR5	PAR5	ACU		ACU
 10830                              <2> ;7	ISR		ISR		CURR	CURR	ACL		ACL
 10831                              <2> ;8	CRDA0	RSAR0	MAR0	MAR0	N/A		N/A
 10832                              <2> ;9	CRDA1	RSAR1	MAR1	MAR1	N/A		N/A
 10833                              <2> ;A	N/A		RBCR0	MAR2	MAR2	N/A		N/A
 10834                              <2> ;B	N/A		RBCR1	MAR3	MAR3	N/A		N/A
 10835                              <2> ;C	RSR		RCR		MAR4	MAR4	RCR		N/A
 10836                              <2> ;D	CNTR0	TCR		MAR5	MAR5	TCR		N/A
 10837                              <2> ;E	CNTR1	DCR		MAR6	MAR6	DCR		N/A
 10838                              <2> ;F	CNTR2	IMR		MAR7	MAR7	IMR		N/A
 10839                              <2> .CR equ 0
 10840                              <2> 	.CR.STP	equ 1		;Stop
 10841                              <2> 	.CR.STA equ 2		;Start
 10842                              <2> 	.CR.TXP equ 4		;Transmit
 10843                              <2> 	.CR.RD0 equ 8		;Remote DMA 0
 10844                              <2> 	.CR.RD1 equ 0x10	;Remote DMA 1
 10845                              <2> 	.CR.RD2 equ 0x20	;Remote DMA 2
 10846                              <2> 	.CR.PS0 equ 0x40	;Page Select 0
 10847                              <2> 	.CR.PS1 equ 0x80	;Page Select 1
 10848                              <2> .PSTART equ 1
 10849                              <2> .PSTOP equ 2
 10850                              <2> .BNRY equ 3
 10851                              <2> .ISR equ 7
 10852                              <2> 	.ISR.PRX equ 1		;Packet Received
 10853                              <2> 	.ISR.PTX equ 2		;Packet Transmitted
 10854                              <2> 	.ISR.RXE equ 4		;Receive Error
 10855                              <2> 	.ISR.TXE equ 8		;Transmission Error
 10856                              <2> 	.ISR.OVW equ 0x10	;Overwrite
 10857                              <2> 	.ISR.CNT equ 0x20	;Counter Overflow
 10858                              <2> 	.ISR.RDC equ 0x40	;Remote Data Complete
 10859                              <2> 	.ISR.RST equ 0x80	;Reset status
 10860                              <2> .RSAR0 equ 8
 10861                              <2> .RSAR1 equ 9
 10862                              <2> .RBCR0 equ 0xA
 10863                              <2> .RBCR1 equ 0xB
 10864                              <2> .RCR equ 0xC
 10865                              <2> 	.RCR.SEP equ 1		;Save Errored Packets
 10866                              <2> 	.RCR.AR equ 2		;Accept Runt packet
 10867                              <2> 	.RCR.AB equ 4		;Accept Broadcast
 10868                              <2> 	.RCR.AM equ 8		;Accept Multicast
 10869                              <2> 	.RCR.PRO equ 0x10	;Promiscuous Physical
 10870                              <2> 	.RCR.MON equ 0x20	;Monitor Mode
 10871                              <2> .DCR equ 0xE
 10872                              <2> 	.DCR.WTS equ 1		;Word Transfer Select
 10873                              <2> 	.DCR.BOS equ 2		;Byte Order Select
 10874                              <2> 	.DCR.LAS equ 4		;Long Address Select
 10875                              <2> 	.DCR.LS equ 8		;Loopback Select
 10876                              <2> 	.DCR.AR equ 0x10	;Auto-initialize Remote
 10877                              <2> 	.DCR.FT0 equ 0x20	;FIFO Threshold Select 0
 10878                              <2> 	.DCR.FT1 equ 0x40	;FIFO Threshold Select 1
 10879                              <2> .ASIC equ 0x10
 10880                              <2> .RESET equ 0x1F
 10881                              <2> 
 10882                              <2> .init:
 10883 00008AB3 BBFFFFFFFF          <2> 	mov ebx, 0xFFFFFFFF
 10884 00008AB8 31C0                <2> 	xor eax, eax
 10885 00008ABA A2[DF660000]        <2> 	mov [pcifunction], al
 10886 00008ABF A2[DD660000]        <2> 	mov [pcibus], al
 10887 00008AC4 A2[DE660000]        <2> 	mov [pcidevice], al
 10888 00008AC9 B002                <2> 	mov al, 2 ;type code
 10889 00008ACB A2[6E670000]        <2> 	mov [pcitype], al
 10890 00008AD0 B8EC102980          <2> 	mov eax, 0x802910EC
 10891 00008AD5 A3[E2660000]        <2> 	mov [pcidevid], eax
 10892 00008ADA E817DCFFFF          <2> 	call getpciport
 10893 00008ADF 81FBFFFFFFFF        <2> 	cmp ebx, 0xFFFFFFFF
 10894 00008AE5 7501                <2> 	jne .good0
 10895 00008AE7 C3                  <2> 	ret
 10896                              <2> .good0:
 10897 00008AE8 8915[B28D0000]      <2> 	mov [.basenicaddr], edx
 10898 00008AEE 89D1                <2> 	mov ecx, edx
 10899                              <2> .test:
 10900 00008AF0 E854000000          <2> 	call .reset
 10901 00008AF5 E87B000000          <2> 	call .stop
 10902 00008AFA 89CA                <2> 	mov edx, ecx
 10903 00008AFC B9FF000000          <2> 	mov ecx, 0xFF
 10904 00008B01 E2FE                <2> 	loop $ ;wait for ~100 us
 10905 00008B03 89D1                <2> 	mov ecx, edx
 10906 00008B05 EC                  <2> 	in al, dx
 10907 00008B06 2427                <2> 	and al, (.CR.RD2 | .CR.TXP | .CR.STA | .CR.STP)
 10908 00008B08 3C21                <2> 	cmp al, (.CR.RD2 | .CR.STP)
 10909 00008B0A 7410                <2> 	je .good1
 10910 00008B0C 89CA                <2> 	mov edx, ecx
 10911 00008B0E 81C207000000        <2> 	add edx, .ISR
 10912 00008B14 EC                  <2> 	in al, dx
 10913 00008B15 2480                <2> 	and al, .ISR.RST
 10914 00008B17 3C80                <2> 	cmp al, .ISR.RST
 10915 00008B19 7401                <2> 	je .good1
 10916 00008B1B C3                  <2> 	ret
 10917                              <2> .good1:
 10918 00008B1C E8F4A6FFFF          <2> call showhex	;for debugging, please remove
 10919 00008B21 E85B000000          <2> 	call .setup
 10920 00008B26 E87A030000          <2> call showmac
 10921 00008B2B BE[B78D0000]        <2> mov esi, .name
 10922 00008B30 E82B92FFFF          <2> call print
 10923 00008B35 BE[BF8D0000]        <2> mov esi, .initmsg
 10924 00008B3A E82192FFFF          <2> call print
 10925 00008B3F C605[B68D0000]01    <2> 	mov byte [.nicconfig], 1
 10926 00008B46 31DB                <2> 	xor ebx, ebx
 10927 00008B48 C3                  <2> 	ret
 10928                              <2> .reset:
 10929 00008B49 8B15[B28D0000]      <2> 	mov edx, [.basenicaddr]
 10930 00008B4F 81C21F000000        <2> 	add edx, .RESET
 10931 00008B55 EC                  <2> 	in al, dx
 10932 00008B56 EE                  <2> 	out dx, al ;write its contents to itself
 10933 00008B57 C3                  <2> 	ret
 10934                              <2> .page:
 10935 00008B58 66C1E00E            <2> 	shl ax, 14
 10936 00008B5C 8B15[B28D0000]      <2> 	mov edx, [.basenicaddr]
 10937 00008B62 EC                  <2> 	in al, dx
 10938 00008B63 243F                <2> 	and al, 00111111b
 10939 00008B65 08E0                <2> 	or al, ah
 10940 00008B67 EE                  <2> 	out dx, al
 10941 00008B68 C3                  <2> 	ret
 10942                              <2> .start:
 10943 00008B69 8B15[B28D0000]      <2> 	mov edx, [.basenicaddr]
 10944 00008B6F B020                <2> 	mov al, .CR.RD2
 10945 00008B71 B002                <2> 	mov al, .CR.STA
 10946 00008B73 EE                  <2> 	out dx, al
 10947 00008B74 C3                  <2> 	ret
 10948                              <2> .stop:
 10949 00008B75 8B15[B28D0000]      <2> 	mov edx, [.basenicaddr]
 10950 00008B7B B020                <2> 	mov al, .CR.RD2
 10951 00008B7D 0C01                <2> 	or al, .CR.STP
 10952 00008B7F EE                  <2> 	out dx, al
 10953 00008B80 C3                  <2> 	ret
 10954                              <2> .setup:
 10955 00008B81 E8EFFFFFFF          <2> 	call .stop
 10956 00008B86 8B15[B28D0000]      <2> 	mov edx, [.basenicaddr]
 10957 00008B8C 81C20E000000        <2> 	add edx, .DCR
 10958 00008B92 B040                <2> 	mov al, .DCR.FT1
 10959 00008B94 0C01                <2> 	or al, .DCR.WTS
 10960 00008B96 0C08                <2> 	or al, .DCR.LS
 10961 00008B98 EE                  <2> 	out dx, al ;Set FIFO threshold, byte order, word-wide DMA
 10962 00008B99 E8B9000000          <2> 	call .getmac
 10963 00008B9E E8D2FFFFFF          <2> 	call .stop
 10964 00008BA3 30C0                <2> 	xor al, al
 10965 00008BA5 8B15[B28D0000]      <2> 	mov edx, [.basenicaddr]
 10966 00008BAB 81C20A000000        <2> 	add edx, .RBCR0
 10967 00008BB1 EE                  <2> 	out dx, al
 10968 00008BB2 6642                <2> 	inc dx
 10969 00008BB4 EE                  <2> 	out dx, al ;Clear byte count
 10970 00008BB5 B800400000          <2> 	mov eax, 16*1024
 10971 00008BBA A3[D28D0000]        <2> 	mov [.ringstart], eax
 10972 00008BBF C1E808              <2> 	shr eax, 8
 10973 00008BC2 66A3[CE8D0000]      <2> 	mov [.pagestart], ax
 10974 00008BC8 0534000000          <2> 	add eax, 64-2*6
 10975 00008BCD A3[D08D0000]        <2> 	mov [.pageend], eax
 10976 00008BD2 C1E008              <2> 	shl eax, 8
 10977 00008BD5 66A3[D68D0000]      <2> 	mov [.ringend], ax ;set page and ring starts and ends
 10978 00008BDB 8B15[B28D0000]      <2> 	mov edx, [.basenicaddr]
 10979 00008BE1 81C201000000        <2> 	add edx, .PSTART
 10980 00008BE7 A0[CE8D0000]        <2> 	mov al, [.pagestart]
 10981 00008BEC EE                  <2> 	out dx, al
 10982 00008BED A0[D08D0000]        <2> 	mov al, [.pageend]
 10983 00008BF2 6642                <2> 	inc dx
 10984 00008BF4 EE                  <2> 	out dx, al
 10985 00008BF5 A0[CE8D0000]        <2> 	mov al, [.pagestart]
 10986 00008BFA 6642                <2> 	inc dx
 10987 00008BFC EE                  <2> 	out dx, al
 10988 00008BFD E873FFFFFF          <2> 	call .stop
 10989                              <2> ;INSERT INTERRUPT ENABLE HERE
 10990 00008C02 B001                <2> 	mov al, 1
 10991 00008C04 E84FFFFFFF          <2> 	call .page
 10992 00008C09 8B15[B28D0000]      <2> 	mov edx, [.basenicaddr]
 10993 00008C0F BF[E08D0000]        <2> 	mov edi, .rom
 10994                              <2> .copymactocard:
 10995 00008C14 42                  <2> 	inc edx
 10996 00008C15 6E                  <2> 	outsb
 10997 00008C16 81C702000000        <2> 	add edi, 2
 10998 00008C1C 81FA06000000        <2> 	cmp edx, 6
 10999 00008C22 76F0                <2> 	jbe .copymactocard
 11000 00008C24 8B15[B28D0000]      <2> 	mov edx, [.basenicaddr]
 11001 00008C2A 81C207000000        <2> 	add edx, 7
 11002 00008C30 A0[CE8D0000]        <2> 	mov al, [.pagestart]
 11003 00008C35 FEC0                <2> 	inc al
 11004 00008C37 EE                  <2> 	out dx, al ;set page in CURR register
 11005                              <2> ;INSERT MULTICAST INIT HERE
 11006 00008C38 E838FFFFFF          <2> 	call .stop
 11007 00008C3D 8B15[B28D0000]      <2> 	mov edx, [.basenicaddr]
 11008 00008C43 81C20C000000        <2> 	add edx, .RCR
 11009 00008C49 B004                <2> 	mov al, .RCR.AB
 11010 00008C4B EE                  <2> 	out dx, al ;accept broadcast
 11011 00008C4C 6642                <2> 	inc dx
 11012 00008C4E 30C0                <2> 	xor al, al
 11013 00008C50 EE                  <2> 	out dx, al ;stop loopback
 11014 00008C51 E813FFFFFF          <2> 	call .start
 11015 00008C56 C3                  <2> 	ret
 11016                              <2> .getmac:
 11017 00008C57 8B15[B28D0000]      <2> 	mov edx, [.basenicaddr]
 11018 00008C5D B020                <2> 	mov al, 0x20
 11019 00008C5F 0C02                <2> 	or al, 2
 11020 00008C61 EE                  <2> 	out dx, al	;set STA and RD2 bits
 11021 00008C62 6681C20A00          <2> 	add dx, .RBCR0
 11022 00008C67 B010                <2> 	mov al, 16
 11023 00008C69 EE                  <2> 	out dx, al
 11024 00008C6A 6642                <2> 	inc dx
 11025 00008C6C 30C0                <2> 	xor al, al
 11026 00008C6E EE                  <2> 	out dx, al
 11027 00008C6F 8B15[B28D0000]      <2> 	mov edx, [.basenicaddr]
 11028 00008C75 6681C20800          <2> 	add dx, .RSAR0
 11029 00008C7A EE                  <2> 	out dx, al
 11030 00008C7B 6642                <2> 	inc dx
 11031 00008C7D EE                  <2> 	out dx, al
 11032 00008C7E 668B15[B28D0000]    <2> 	mov dx, [.basenicaddr]
 11033 00008C85 B008                <2> 	mov al, 8
 11034 00008C87 0C02                <2> 	or al, 2
 11035 00008C89 EE                  <2> 	out dx, al
 11036 00008C8A 668B15[B28D0000]    <2> 	mov dx, [.basenicaddr]
 11037 00008C91 6681C21000          <2> 	add dx, .ASIC
 11038 00008C96 B908000000          <2> 	mov ecx, 8
 11039 00008C9B BF[E08D0000]        <2> 	mov edi, .rom
 11040 00008CA0 F3666D              <2> 	rep insw
 11041                              <2> .copymac:
 11042 00008CA3 BF[E08D0000]        <2> 	mov edi, .rom
 11043 00008CA8 BE[DA8D0000]        <2> 	mov esi, .mac
 11044 00008CAD B906000000          <2> 	mov ecx, 6
 11045                              <2> .lpmac:
 11046 00008CB2 8A07                <2> 	mov al, [edi]
 11047 00008CB4 8806                <2> 	mov [esi], al
 11048 00008CB6 81C702000000        <2> 	add edi, 2
 11049 00008CBC 46                  <2> 	inc esi
 11050 00008CBD E2F3                <2> 	loop .lpmac
 11051 00008CBF B9[DA8D0000]        <2> 	mov ecx, .mac
 11052 00008CC4 C3                  <2> 	ret
 11053                              <2> .sendpacket:
 11054 00008CC5 803D[B68D0000]00    <2> 	cmp byte [.nicconfig], 0
 11055 00008CCC 7512                <2> 	jne .sendit
 11056 00008CCE 56                  <2> 	push esi
 11057 00008CCF 57                  <2> 	push edi
 11058 00008CD0 E8DEFDFFFF          <2> 	call .init
 11059 00008CD5 5F                  <2> 	pop edi
 11060 00008CD6 5E                  <2> 	pop esi
 11061 00008CD7 81FB00000000        <2> 	cmp ebx, 0
 11062 00008CDD 7401                <2> 	je .sendit
 11063 00008CDF C3                  <2> 	ret
 11064                              <2> .sendit: ;packet start in edi, end in esi
 11065 00008CE0 87F7                <2> 	xchg esi, edi ;this helps with the outsw
 11066                              <2> 	;now the packet start is in esi, end in edi
 11067 00008CE2 8B0D[DA8D0000]      <2> 	mov ecx, [.mac]
 11068 00008CE8 894E06              <2> 	mov [esi + 6], ecx
 11069 00008CEB 668B0D[DE8D0000]    <2> 	mov cx, [.mac + 4]
 11070 00008CF2 66894E0A            <2> 	mov [esi + 10], cx	;copy the correct mac
 11071 00008CF6 8B15[B28D0000]      <2> 	mov edx, [.basenicaddr]
 11072 00008CFC B020                <2> 	mov al, .CR.RD2
 11073 00008CFE 0C02                <2> 	or al, .CR.STA
 11074 00008D00 EE                  <2> 	out dx, al ;set RD2 and STA
 11075 00008D01 81C207000000        <2> 	add edx, .ISR ; ISR
 11076 00008D07 B040                <2> 	mov al, .ISR.RDC
 11077 00008D09 EE                  <2> 	out dx, al ;set RDC flag
 11078 00008D0A 8B15[B28D0000]      <2> 	mov edx, [.basenicaddr]
 11079 00008D10 6681C20A00          <2> 	add dx, .RBCR0
 11080 00008D15 89F8                <2> 	mov eax, edi
 11081 00008D17 29F0                <2> 	sub eax, esi
 11082 00008D19 BB01000000          <2> 	mov ebx, 1
 11083 00008D1E 21C3                <2> 	and ebx, eax
 11084 00008D20 81FB01000000        <2> 	cmp ebx, 1
 11085 00008D26 7501                <2> 	jne .nofixword
 11086 00008D28 40                  <2> 	inc eax
 11087                              <2> .nofixword:
 11088 00008D29 89C1                <2> 	mov ecx, eax ;save length in ecx
 11089 00008D2B EE                  <2> 	out dx, al
 11090 00008D2C 86C4                <2> 	xchg al, ah
 11091 00008D2E 6642                <2> 	inc dx
 11092 00008D30 EE                  <2> 	out dx, al ;send size
 11093 00008D31 8B15[B28D0000]      <2> 	mov edx, [.basenicaddr]
 11094 00008D37 6681C20800          <2> 	add dx, .RSAR0
 11095 00008D3C 66A1[CE8D0000]      <2> 	mov ax, [.pagestart]
 11096 00008D42 C1E008              <2> 	shl eax, 8
 11097 00008D45 EE                  <2> 	out dx, al
 11098 00008D46 86C4                <2> 	xchg al, ah
 11099 00008D48 6642                <2> 	inc dx
 11100 00008D4A EE                  <2> 	out dx, al ;send address in NIC memory
 11101 00008D4B 8B15[B28D0000]      <2> 	mov edx, [.basenicaddr]
 11102 00008D51 B010                <2> 	mov al, .CR.RD1
 11103 00008D53 0C02                <2> 	or al, .CR.STA
 11104 00008D55 EE                  <2> 	out dx, al ;set RD and STA
 11105 00008D56 89CB                <2> 	mov ebx, ecx ;save length in ebx
 11106 00008D58 D1E9                <2> 	shr ecx, 1
 11107 00008D5A 8B15[B28D0000]      <2> 	mov edx, [.basenicaddr]
 11108 00008D60 6681C21000          <2> 	add dx, 0x10
 11109 00008D65 F3666F              <2> 	rep outsw ;Send the packet data
 11110 00008D68 8B15[B28D0000]      <2> 	mov edx, [.basenicaddr]
 11111 00008D6E 6681C20700          <2> 	add dx, .ISR
 11112                              <2> .chkcopylp:
 11113 00008D73 B440                <2> 	mov ah, .ISR.RDC
 11114 00008D75 EC                  <2> 	in al, dx
 11115 00008D76 20C4                <2> 	and ah, al
 11116 00008D78 80FC40              <2> 	cmp ah, 0x40
 11117 00008D7B 75F6                <2> 	jne .chkcopylp	
 11118 00008D7D 8B15[B28D0000]      <2> 	mov edx, [.basenicaddr]
 11119 00008D83 6681C20400          <2> 	add dx, 4
 11120 00008D88 A0[CE8D0000]        <2> 	mov al, [.pagestart]
 11121 00008D8D EE                  <2> 	out dx, al ;send start address in pages
 11122 00008D8E 8B15[B28D0000]      <2> 	mov edx, [.basenicaddr]
 11123 00008D94 81C205000000        <2> 	add edx, 0x5
 11124 00008D9A 89D8                <2> 	mov eax, ebx
 11125 00008D9C EE                  <2> 	out dx, al
 11126 00008D9D 86C4                <2> 	xchg al, ah
 11127 00008D9F 6642                <2> 	inc dx
 11128 00008DA1 EE                  <2> 	out dx, al ;send length
 11129 00008DA2 8B15[B28D0000]      <2> 	mov edx, [.basenicaddr]
 11130 00008DA8 B020                <2> 	mov al, 0x20
 11131 00008DAA 0C04                <2> 	or al, 4
 11132 00008DAC 0C02                <2> 	or al, 2
 11133 00008DAE EE                  <2> 	out dx, al ;set RD2, TXP, and STA
 11134 00008DAF 31DB                <2> 	xor ebx, ebx
 11135 00008DB1 C3                  <2> 	ret
 11136 00008DB2 00000000            <2> .basenicaddr dd 0
 11137 00008DB6 00                  <2> .nicconfig db 0
 11138 00008DB7 4E45323030302000    <2> .name db "NE2000 ",0
 11139 00008DBF 496E697469616C697A- <2> .initmsg db "Initialized.",10,0
 11140 00008DC8 65642E0A00          <2>
 11141 00008DCD 90                  <2> align 2, nop
 11142 00008DCE 0000                <2> .pagestart dw 0
 11143 00008DD0 0000                <2> .pageend dw 0
 11144 00008DD2 00000000            <2> .ringstart dd 0
 11145 00008DD6 00000000            <2> .ringend dd 0
 11146 00008DDA 000000000000        <2> .mac db 0,0,0,0,0,0
 11147 00008DE0 00<rept>            <2> .rom times 16 db 0
 11148                              <2> 
 11149                              <2> .end:
 11150                              <1> %endif
 11151                              <1> %ifdef i8254x.included
 11152                              <1> 	%include "source/drivers/network/i8254x.asm"
 11153                              <1> %endif
 11154 00008DF0 C3                  <1> 	ret
 11155                              <1> 
 11156                              <1> sendpacket: ;packet start in edi, end in esi
 11157                              <1> 	%ifdef rtl8139.included
 11158                              <1> 		push edi
 11159                              <1> 		push esi
 11160                              <1> 		call rtl8139.sendpacket
 11161                              <1> 		pop esi
 11162                              <1> 		pop edi
 11163                              <1> 	%endif
 11164                              <1> 	%ifdef rtl8169.included
 11165                              <1> 		push edi
 11166                              <1> 		push esi
 11167                              <1> 		call rtl8169.sendpacket
 11168                              <1> 		pop esi
 11169                              <1> 		pop edi
 11170                              <1> 	%endif
 11171                              <1> 	%ifdef ne2000.included
 11172 00008DF1 57                  <1> 		push edi
 11173 00008DF2 56                  <1> 		push esi
 11174 00008DF3 E8CDFEFFFF          <1> 		call ne2000.sendpacket
 11175 00008DF8 5E                  <1> 		pop esi
 11176 00008DF9 5F                  <1> 		pop edi
 11177                              <1> 	%endif
 11178                              <1> 	%ifdef i8254x.included
 11179                              <1> 		call i8254x.sendpacket
 11180                              <1> 	%endif
 11181 00008DFA C3                  <1> 	ret
 11182                              <1> 
 11183                              <1> getchecksum: ;start in edi, end in esi, checksum put in ecx
 11184 00008DFB 31C0                <1> 	xor eax, eax
 11185 00008DFD 31DB                <1> 	xor ebx, ebx
 11186 00008DFF 31C9                <1> 	xor ecx, ecx
 11187                              <1> .lp:
 11188 00008E01 8A07                <1> 	mov al, [edi]
 11189 00008E03 8A6701              <1> 	mov ah, [edi + 1]
 11190 00008E06 01C3                <1> 	add ebx, eax
 11191 00008E08 81C702000000        <1> 	add edi, 2
 11192 00008E0E 39F7                <1> 	cmp edi, esi
 11193 00008E10 72EF                <1> 	jb .lp
 11194 00008E12 66B9FFFF            <1> 	mov cx, 0xFFFF
 11195 00008E16 6689D8              <1> 	mov ax, bx
 11196 00008E19 C1EB10              <1> 	shr ebx, 16
 11197 00008E1C 6601D8              <1> 	add ax, bx
 11198 00008E1F 6629C1              <1> 	sub cx, ax
 11199 00008E22 C3                  <1> 	ret
 11200                              <1> 	
 11201                              <1> strtoip:	;string in esi with format X.X.X.X converted to number in ecx
 11202 00008E23 31DB                <1> 	xor ebx, ebx
 11203 00008E25 31C9                <1> 	xor ecx, ecx
 11204 00008E27 31D2                <1> 	xor edx, edx
 11205                              <1> .mlp:
 11206 00008E29 89F7                <1> 	mov edi, esi
 11207 00008E2B 4F                  <1> 	dec edi
 11208                              <1> .lp:
 11209 00008E2C 47                  <1> 	inc edi
 11210 00008E2D 8A07                <1> 	mov al, [edi]
 11211 00008E2F 3C20                <1> 	cmp al, " "
 11212 00008E31 7408                <1> 	je .dnlp
 11213 00008E33 3C00                <1> 	cmp al, 0
 11214 00008E35 7404                <1> 	je .dnlp
 11215 00008E37 3C2E                <1> 	cmp al, "."
 11216 00008E39 75F1                <1> 	jne .lp
 11217                              <1> .dnlp:
 11218 00008E3B 30C0                <1> 	xor al, al
 11219 00008E3D 8807                <1> 	mov [edi], al
 11220 00008E3F 53                  <1> 	push ebx
 11221 00008E40 56                  <1> 	push esi
 11222 00008E41 57                  <1> 	push edi
 11223 00008E42 31FF                <1> 	xor edi, edi
 11224 00008E44 E878A5FFFF          <1> 	call cnvrttxt
 11225 00008E49 5E                  <1> 	pop esi
 11226 00008E4A 5F                  <1> 	pop edi ;i intentionally switch them
 11227 00008E4B 5B                  <1> 	pop ebx
 11228 00008E4C 46                  <1> 	inc esi
 11229 00008E4D BF[658E0000]        <1> 	mov edi, ipstr
 11230 00008E52 880C1F              <1> 	mov [edi + ebx], cl
 11231 00008E55 43                  <1> 	inc ebx
 11232 00008E56 81FB04000000        <1> 	cmp ebx, 4
 11233 00008E5C 72CB                <1> 	jb .mlp
 11234 00008E5E 8B0D[658E0000]      <1> 	mov ecx, [ipstr]
 11235 00008E64 C3                  <1> 	ret
 11236 00008E65 00000000            <1> ipstr dd 0
 11237                              <1> showip: 	;put the ip address in ecx
 11238 00008E69 89C8                <1> 	mov eax, ecx
 11239 00008E6B 30DB                <1> 	xor bl, bl
 11240                              <1> .lp:
 11241 00008E6D 3C00                <1> 	cmp al, 0
 11242 00008E6F 750B                <1> 	jne .nozeroprint
 11243 00008E71 B030                <1> 	mov al, "0"
 11244 00008E73 50                  <1> 	push eax
 11245 00008E74 E87595FFFF          <1> 	call prcharq
 11246 00008E79 58                  <1> 	pop eax
 11247 00008E7A 30C0                <1> 	xor al, al
 11248                              <1> .nozeroprint:
 11249 00008E7C 31C9                <1> 	xor ecx, ecx
 11250 00008E7E 88C1                <1> 	mov cl, al
 11251 00008E80 E85AA4FFFF          <1> 	call showdec
 11252 00008E85 C1E808              <1> 	shr eax, 8
 11253 00008E88 FEC3                <1> 	inc bl
 11254 00008E8A 80FB04              <1> 	cmp bl, 4
 11255 00008E8D 7312                <1> 	jae .done
 11256 00008E8F 50                  <1> 	push eax
 11257 00008E90 6653                <1> 	push bx
 11258 00008E92 BE[A28E0000]        <1> 	mov esi, .dot
 11259 00008E97 E8C48EFFFF          <1> 	call print
 11260 00008E9C 665B                <1> 	pop bx
 11261 00008E9E 58                  <1> 	pop eax
 11262 00008E9F EBCC                <1> 	jmp .lp
 11263                              <1> .done:
 11264 00008EA1 C3                  <1> 	ret
 11265 00008EA2 082E00              <1> .dot db 8,".",0
 11266                              <1> showmac:	;mac begins in [ecx]
 11267 00008EA5 BE[F58E0000]        <1> 	mov esi, macprint
 11268 00008EAA 89CF                <1> 	mov edi, ecx
 11269 00008EAC 81C106000000        <1> 	add ecx, 6
 11270                              <1> showmacloop:
 11271 00008EB2 8A07                <1> 	mov al, [edi]
 11272 00008EB4 8A27                <1> 	mov ah, [edi]
 11273 00008EB6 C0E804              <1> 	shr al, 4
 11274 00008EB9 C0E404              <1> 	shl ah, 4
 11275 00008EBC C0EC04              <1> 	shr ah, 4
 11276 00008EBF 0430                <1> 	add al, 48
 11277 00008EC1 3C39                <1> 	cmp al, "9"
 11278 00008EC3 7606                <1> 	jbe .goodal
 11279 00008EC5 2C30                <1> 	sub al, 48
 11280 00008EC7 2C0A                <1> 	sub al, 0xA
 11281 00008EC9 0441                <1> 	add al, "A"
 11282                              <1> .goodal:
 11283 00008ECB 80C430              <1> 	add ah, 48
 11284 00008ECE 80FC39              <1> 	cmp ah, "9"
 11285 00008ED1 7609                <1> 	jbe .goodah
 11286 00008ED3 80EC30              <1> 	sub ah, 48
 11287 00008ED6 80EC0A              <1> 	sub ah, 0xA
 11288 00008ED9 80C441              <1> 	add ah, "A"
 11289                              <1> .goodah:
 11290 00008EDC 668906              <1> 	mov [esi], ax
 11291 00008EDF 81C603000000        <1> 	add esi, 3
 11292 00008EE5 47                  <1> 	inc edi
 11293 00008EE6 39CF                <1> 	cmp edi, ecx
 11294 00008EE8 72C8                <1> 	jb showmacloop
 11295 00008EEA BE[F58E0000]        <1> 	mov esi, macprint
 11296 00008EEF E86C8EFFFF          <1> 	call print
 11297 00008EF4 C3                  <1> 	ret
 11298                              <1> 	
 11299 00008EF5 30303A30303A30303A- <1> macprint db "00:00:00:00:00:00 ",0
 11300 00008EFE 30303A30303A303020- <1>
 11301 00008F07 00                  <1>
 11302 00008F08 00000000            <1> ethernetend dw 0,0
 11303 00008F0C C0A80002            <1> sysip db 192,168,0,2
 11304 00008F10 000000000000        <1> sysmac	db 0,0,0,0,0,0		;my mac address
 11305                                  %endif
 11306                                      %include "source/data.asm"
 11307 00008F16 626F6F742E736800    <1> 	bootfilename db "boot.sh",0
 11308 00008F1E 73687573683A2000    <1> 	notfound1 db "shush: ",0
 11309 00008F26 3A206E6F7420666F75- <1> 	notfound2 db  ": not found",10,0
 11310 00008F2F 6E640A00            <1>
 11311 00008F33 757365726E616D653A- <1> 	userask db "username:",0
 11312 00008F3C 00                  <1>
 11313 00008F3D 70617373776F72643A- <1> 	pwdask	db	"password:",0
 11314 00008F46 00                  <1>
 11315 00008F47 40                  <1> 	computer db "@"
 11316                              <1> %ifdef io.serial
 11317                              <1> 	computername	db	"SollerOS.",io.serial," ",0
 11318                              <1> %else
 11319 00008F48 536F6C6C65724F5320- <1> 	computername	db	"SollerOS ",0
 11320 00008F51 00                  <1>
 11321                              <1> %endif
 11322 00008F52 5D242000            <1> 	endprompt db "]$ ",0
 11323 00008F56 0D                  <1> 	crlf 	db  13
 11324 00008F57 0A00                <1> 	line	db	10,0
 11325                              <1> 	userlst:
 11326 00008F59 726F6F7400          <1> 			db "root",0
 11327 00008F5E 617765736F6D65706F- <1> 			db "awesomepower",0
 11328 00008F67 77657200            <1>
 11329 00008F6B 7573657200          <1> 			db "user",0
 11330 00008F70 70617373776F726400  <1> 			db "password",0
 11331 00008F79 6E00                <1> 			db "n",0	;;abuse for quick entry-a quick double n followed by a double enter will get you in
 11332 00008F7B 00                  <1> 			db 0
 11333                              <1> 	userlstend:
 11334                              <1> 	
 11335 00008F7C 00                  <1> 	guion db 0
 11336 00008F7D 00                  <1> 	DriveNumber db 0
 11337 00008F7E 00000000            <1> 	lbaad dd 0
 11338 00008F82 00<rept>            <1> 	memlistbuf times 576 db 0
 11339 000091C2 00000000            <1> 	memlistend: dd 0
 11340                              <1> %ifdef io.serial
 11341                              <1> %else
 11342 000091C2 <incbin>            <1> fonts:	incbin "source/fonts/fonts.pak"
 11343                              <1> fontend:
 11344                              <1> %endif
 11345                              <1> osend:	;this is the end of the operating system's space on disk
 11346                                  %ifdef disk.none
 11347                                  	diskfileindex:
 11348                                  	enddiskfileindex:
 11349                                  	align 512, db 0
 11350                                      %include "source/bss.asm"
 11351                                  %else
 11352                                      %include "build/fileindex.asm"
 11353                              <1> diskfileindex:
 11354 000391C6 617267746573742E65- <1> db "argtest.elf",0
 11355 000391CF 6C6600              <1>
 11356 000391D2 CA010000            <1> dd (f0-$$)/512
 11357 000391D6 06010000            <1> dd (f1-f0)/512
 11358 000391DA 6261636B67726F756E- <1> db "background.bmp",0
 11359 000391E3 642E626D7000        <1>
 11360 000391E9 D0020000            <1> dd (f1-$$)/512
 11361 000391ED 01140000            <1> dd (f2-f1)/512
 11362 000391F1 626F6F742E736800    <1> db "boot.sh",0
 11363 000391F9 D1160000            <1> dd (f2-$$)/512
 11364 000391FD 01000000            <1> dd (f3-f2)/512
 11365 00039201 63686172746573742E- <1> db "chartest.elf",0
 11366 0003920A 656C6600            <1>
 11367 0003920E D2160000            <1> dd (f3-$$)/512
 11368 00039212 26010000            <1> dd (f4-f3)/512
 11369 00039216 646F73746573742E63- <1> db "dostest.com",0
 11370 0003921F 6F6D00              <1>
 11371 00039222 F8170000            <1> dd (f4-$$)/512
 11372 00039226 01000000            <1> dd (f5-f4)/512
 11373 0003922A 6578656300          <1> db "exec",0
 11374 0003922F F9170000            <1> dd (f5-$$)/512
 11375 00039233 01000000            <1> dd (f6-f5)/512
 11376 00039237 66696E616C636F756E- <1> db "finalcount.sn",0
 11377 00039240 742E736E00          <1>
 11378 00039245 FA170000            <1> dd (f6-$$)/512
 11379 00039249 01000000            <1> dd (f7-f6)/512
 11380 0003924D 666C6F7070792E7478- <1> db "floppy.txt",0
 11381 00039256 7400                <1>
 11382 00039258 FB170000            <1> dd (f7-$$)/512
 11383 0003925C 0A000000            <1> dd (f8-f7)/512
 11384 00039260 666F726B00          <1> db "fork",0
 11385 00039265 05180000            <1> dd (f8-$$)/512
 11386 00039269 01000000            <1> dd (f9-f8)/512
 11387 0003926D 677261766974792E65- <1> db "gravity.elf",0
 11388 00039276 6C6600              <1>
 11389 00039279 06180000            <1> dd (f9-$$)/512
 11390 0003927D E0000000            <1> dd (f10-f9)/512
 11391 00039281 6775697465737400    <1> db "guitest",0
 11392 00039289 E6180000            <1> dd (f10-$$)/512
 11393 0003928D 03000000            <1> dd (f11-f10)/512
 11394 00039291 68656C6C6F776F726C- <1> db "helloworld.elf",0
 11395 0003929A 642E656C6600        <1>
 11396 000392A0 E9180000            <1> dd (f11-$$)/512
 11397 000392A4 D7010000            <1> dd (f12-f11)/512
 11398 000392A8 696E7400            <1> db "int",0
 11399 000392AC C01A0000            <1> dd (f12-$$)/512
 11400 000392B0 01000000            <1> dd (f13-f12)/512
 11401 000392B4 6C6F7374776F6F6473- <1> db "lostwoods.sn",0
 11402 000392BD 2E736E00            <1>
 11403 000392C1 C11A0000            <1> dd (f13-$$)/512
 11404 000392C5 01000000            <1> dd (f14-f13)/512
 11405 000392C9 6D6172696F2E736E00  <1> db "mario.sn",0
 11406 000392D2 C21A0000            <1> dd (f14-$$)/512
 11407 000392D6 01000000            <1> dd (f15-f14)/512
 11408 000392DA 6D6F6D656E742E7761- <1> db "moment.wav",0
 11409 000392E3 7600                <1>
 11410 000392E5 C31A0000            <1> dd (f15-$$)/512
 11411 000392E9 570A0000            <1> dd (f16-f15)/512
 11412 000392ED 70692E656C6600      <1> db "pi.elf",0
 11413 000392F4 1A250000            <1> dd (f16-$$)/512
 11414 000392F8 1F010000            <1> dd (f17-f16)/512
 11415 000392FC 736F6C6C65726F732E- <1> db "solleros.bmp",0
 11416 00039305 626D7000            <1>
 11417 00039309 39260000            <1> dd (f17-$$)/512
 11418 0003930D B0020000            <1> dd (f18-f17)/512
 11419 00039311 736F6C6C65726F732E- <1> db "solleros.txt",0
 11420 0003931A 74787400            <1>
 11421 0003931E E9280000            <1> dd (f18-$$)/512
 11422 00039322 01000000            <1> dd (f19-f18)/512
 11423 00039326 736F6E676F74696D65- <1> db "songotime.sn",0
 11424 0003932F 2E736E00            <1>
 11425 00039333 EA280000            <1> dd (f19-$$)/512
 11426 00039337 01000000            <1> dd (f20-f19)/512
 11427 0003933B 73736500            <1> db "sse",0
 11428 0003933F EB280000            <1> dd (f20-$$)/512
 11429 00039343 02000000            <1> dd (f21-f20)/512
 11430 00039347 737464696F74657374- <1> db "stdiotest.elf",0
 11431 00039350 2E656C6600          <1>
 11432 00039355 ED280000            <1> dd (f21-$$)/512
 11433 00039359 27010000            <1> dd (f22-f21)/512
 11434 0003935D 74656C7900          <1> db "tely",0
 11435 00039362 142A0000            <1> dd (f22-$$)/512
 11436 00039366 01000000            <1> dd (f23-f22)/512
 11437 0003936A 74696D65746573742E- <1> db "timetest.elf",0
 11438 00039373 656C6600            <1>
 11439 00039377 152A0000            <1> dd (f23-$$)/512
 11440 0003937B 04010000            <1> dd (f24-f23)/512
 11441 0003937F 7475746F7269616C2E- <1> db "tutorial.sh",0
 11442 00039388 736800              <1>
 11443 0003938B 192B0000            <1> dd (f24-$$)/512
 11444 0003938F 03000000            <1> dd (f25-f24)/512
 11445 00039393 756E667300          <1> db "unfs",0
 11446 00039398 1C2B0000            <1> dd (f25-$$)/512
 11447 0003939C 02000000            <1> dd (f26-f25)/512
 11448 000393A0 7574662D382E747874- <1> db "utf-8.txt",0
 11449 000393A9 00                  <1>
 11450 000393AA 1E2B0000            <1> dd (f26-$$)/512
 11451 000393AE 02000000            <1> dd (f27-f26)/512
 11452 000393B2 766963746F72792E77- <1> db "victory.wav",0
 11453 000393BB 617600              <1>
 11454 000393BE 202B0000            <1> dd (f27-$$)/512
 11455 000393C2 16000000            <1> dd (f28-f27)/512
 11456 000393C6 5F696D672E62696E00  <1> db "_img.bin",0
 11457 000393CF 362B0000            <1> dd (f28-$$)/512
 11458 000393D3 D7020000            <1> dd (f29-f28)/512
 11459                              <1> enddiskfileindex:
 11460                              <1> 
 11461                                      %include "source/bss.asm"
 11462 000393D7 90                  <1> align 4, nop
 11463                              <1> bssstart: equ $
 11464                              <1> bsscopy equ $
 11465                              <1> initialstack equ bsscopy
 11466                              <1> stackend equ initialstack + 4000
 11467                              <1> sigtable equ stackend + 96
 11468                              <1> fileindex: equ sigtable + 4
 11469                              <1> fileindexend: equ fileindex + 1024
 11470                              <1> previousstack equ fileindexend
 11471                              <1> lastfolderloc equ previousstack + 4
 11472                              <1> currentfolderloc equ lastfolderloc + 4
 11473                              <1> currentfolder equ currentfolderloc + 4
 11474                              <1> currentfolderend equ currentfolder + 512
 11475                              <1> uid equ currentfolderend
 11476                              <1> ranboot equ uid + 4
 11477                              <1> IFON equ ranboot + 1
 11478                              <1> IFTRUE equ IFON + 1
 11479                              <1> BATCHPOS equ IFTRUE + 100
 11480                              <1> BATCHISON equ BATCHPOS + 4
 11481                              <1> LOOPON equ BATCHISON + 1
 11482                              <1> LOOPPOS	equ LOOPON + 1
 11483                              <1> variables: equ LOOPPOS + 4
 11484                              <1> varend: equ variables + 4096
 11485                              <1> buftxt2: equ varend
 11486                              <1> buftxt: equ buftxt2 + 1024
 11487                              <1> buftxtend: equ buftxt + 1024
 11488                              <1> buf2: equ buftxtend
 11489                              <1> numbuf: equ buf2 + 20
 11490                              <1> %ifdef io.serial
 11491                              <1> 	lastcommandpos equ numbuf + 1
 11492                              <1> %else
 11493                              <1> 	%ifdef gui.included
 11494                              <1> 		graphicstable equ numbuf + 1 ;w type, dw datalocation, w locationx, w locationy, w selected, dw code
 11495                              <1> 		graphicstableend equ graphicstable + 200h
 11496                              <1> 		%ifdef gui.background
 11497                              <1> 			backgroundbuffer equ graphicstableend
 11498                              <1> 			backgroundbufferend equ backgroundbuffer + 1280*1026*2
 11499                              <1> 			mousecolorbuf equ backgroundbufferend
 11500                              <1> 		%else
 11501                              <1> 			mousecolorbuf equ graphicstableend ;where the gui under the mouse is stored
 11502                              <1> 		%endif
 11503                              <1> 		mcolorend equ mousecolorbuf + 256
 11504                              <1> 		videobuf equ mcolorend + 1	;1680x1050 pixels in characters
 11505                              <1> 		videobufend	equ videobuf + 210*65*4;2
 11506                              <1> 		videobuf2 equ videobufend
 11507                              <1> 		videobuf2end equ videobuf2 + 210*65*4;2
 11508                              <1> 	%else
 11509                              <1> 		videobuf equ numbuf + 1
 11510                              <1> 		videobufend equ videobuf + 80*30*4
 11511                              <1> 		videobuf2 equ videobufend
 11512                              <1> 		videobuf2end equ videobuf2 + 80*30*4
 11513                              <1> 	%endif
 11514                              <1> 	lastcommandpos: equ videobuf2end
 11515                              <1> %endif
 11516                              <1> 	commandbufpos: equ lastcommandpos + 4
 11517                              <1> 	commandlistentries: equ commandbufpos + 4
 11518                              <1> 	commandsentered: equ commandlistentries + 4
 11519                              <1> 	commandbuf: equ commandsentered + 4
 11520                              <1> 	commandbufend: equ commandbuf + 4096 ;this is where kernel space only ends, the rest is for threading
 11521                              <1> %ifdef network.included
 11522                              <1> 	rbuffstart: equ commandbufend ;for use with networking
 11523                              <1> 	rbuffend equ rbuffstart + 8212
 11524                              <1> %else
 11525                              <1> 	rbuffstart equ commandbufend
 11526                              <1> 	rbuffend equ commandbufend
 11527                              <1> %endif
 11528                              <1> %ifdef threads.included
 11529                              <1> 	threadlist: equ rbuffend ;this buffer will hold the stack locations of all of the threads, up to 2048
 11530                              <1> 	threadlistend: equ threadlist + 1024*4
 11531                              <1> 	stacks:	equ threadlistend ;i use SS now for proper stack management. This makes sure stacks never screw with other memory
 11532                              <1> 	stack1: equ stacks + 1024  ;woah, thats a lot of space for stacks
 11533                              <1> 	bssend equ stack1 + 1024*1024
 11534                              <1> %else
 11535                              <1> 	bssend equ rbuffend
 11536                              <1> %endif
 11537                              <1> dosprogloc equ 0x400000 ;from here on, it is not kernel space so apps can be loaded here.
 11538                                      %include "build/files.asm"
 11539 000393D8 00<rept>            <1> align 512,db 0
 11540                              <1> f0:
 11541 000393D8 <incbin>            <1> incbin "included/argtest.elf"
 11542 00059F37 00<rept>            <1> align 512,db 0
 11543                              <1> f1:
 11544 00059F37 <incbin>            <1> incbin "included/background.bmp"
 11545 002DA046 00<rept>            <1> align 512,db 0
 11546                              <1> f2:
 11547 002DA046 <incbin>            <1> incbin "included/boot.sh"
 11548 002DA2FD 00<rept>            <1> align 512,db 0
 11549                              <1> f3:
 11550 002DA2FD <incbin>            <1> incbin "included/chartest.elf"
 11551 002FEF24 00<rept>            <1> align 512,db 0
 11552                              <1> f4:
 11553 002FEF24 <incbin>            <1> incbin "included/dostest.com"
 11554 002FF131 00<rept>            <1> align 512,db 0
 11555                              <1> f5:
 11556 002FF131 <incbin>            <1> incbin "included/exec"
 11557 002FF2E1 00<rept>            <1> align 512,db 0
 11558                              <1> f6:
 11559 002FF2E1 <incbin>            <1> incbin "included/finalcount.sn"
 11560 002FF502 00<rept>            <1> align 512,db 0
 11561                              <1> f7:
 11562 002FF502 <incbin>            <1> incbin "included/floppy.txt"
 11563 00300866 00<rept>            <1> align 512,db 0
 11564                              <1> f8:
 11565 00300866 <incbin>            <1> incbin "included/fork"
 11566 00300B58 00<rept>            <1> align 512,db 0
 11567                              <1> f9:
 11568 00300B58 <incbin>            <1> incbin "included/gravity.elf"
 11569 0031CB1E 00<rept>            <1> align 512,db 0
 11570                              <1> f10:
 11571 0031CB1E <incbin>            <1> incbin "included/guitest"
 11572 0031D02B 00<rept>            <1> align 512,db 0
 11573                              <1> f11:
 11574 0031D02B <incbin>            <1> incbin "included/helloworld.elf"
 11575 00357E28 00<rept>            <1> align 512,db 0
 11576                              <1> f12:
 11577 00357E28 <incbin>            <1> incbin "included/int"
 11578 003581AF 00<rept>            <1> align 512,db 0
 11579                              <1> f13:
 11580 003581AF <incbin>            <1> incbin "included/lostwoods.sn"
 11581 00358256 00<rept>            <1> align 512,db 0
 11582                              <1> f14:
 11583 00358256 <incbin>            <1> incbin "included/mario.sn"
 11584 0035843A 00<rept>            <1> align 512,db 0
 11585                              <1> f15:
 11586 0035843A <incbin>            <1> incbin "included/moment.wav"
 11587 004A323A 00<rept>            <1> align 512,db 0
 11588                              <1> f16:
 11589 004A323A <incbin>            <1> incbin "included/pi.elf"
 11590 004C7172 00<rept>            <1> align 512,db 0
 11591                              <1> f17:
 11592 004C7172 <incbin>            <1> incbin "included/solleros.bmp"
 11593 0051D1E6 00<rept>            <1> align 512,db 0
 11594                              <1> f18:
 11595 0051D1E6 <incbin>            <1> incbin "included/solleros.txt"
 11596 0051D374 00<rept>            <1> align 512,db 0
 11597                              <1> f19:
 11598 0051D374 <incbin>            <1> incbin "included/songotime.sn"
 11599 0051D44A 00<rept>            <1> align 512,db 0
 11600                              <1> f20:
 11601 0051D44A <incbin>            <1> incbin "included/sse"
 11602 0051D8A8 00<rept>            <1> align 512,db 0
 11603                              <1> f21:
 11604 0051D8A8 <incbin>            <1> incbin "included/stdiotest.elf"
 11605 00542688 00<rept>            <1> align 512,db 0
 11606                              <1> f22:
 11607 00542688 <incbin>            <1> incbin "included/tely"
 11608 005429BA 00<rept>            <1> align 512,db 0
 11609                              <1> f23:
 11610 005429BA <incbin>            <1> incbin "included/timetest.elf"
 11611 00563082 00<rept>            <1> align 512,db 0
 11612                              <1> f24:
 11613 00563082 <incbin>            <1> incbin "included/tutorial.sh"
 11614 00563752 00<rept>            <1> align 512,db 0
 11615                              <1> f25:
 11616 00563752 <incbin>            <1> incbin "included/unfs"
 11617                              <1> align 512,db 0
 11618                              <1> f26:
 11619 00563752 <incbin>            <1> incbin "included/utf-8.txt"
 11620 00563FC0 00<rept>            <1> align 512,db 0
 11621                              <1> f27:
 11622 00563FC0 <incbin>            <1> incbin "included/victory.wav"
 11623 00566B48 00<rept>            <1> align 512,db 0
 11624                              <1> f28:
 11625 00566B48 <incbin>            <1> incbin "included/_img.bin"
 11626                              <1> align 512,db 0
 11627                              <1> f29:
 11628                                  %endif
