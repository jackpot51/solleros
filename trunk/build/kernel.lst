     1                                  [map symbols build/kernel.map]
     2                                  %include "config.asm"
     3                              <1> ;These flags are used to configure options as on, put a simicolon in front of it to not configure it
     4                              <1> 
     5                              <1> %define gui.included
     6                              <1> ;Turn on the gui
     7                              <1> 
     8                              <1> %define gui.alphablending
     9                              <1> ;Make the terminal in the GUI 25% transparent
    10                              <1> 
    11                              <1> %define gui.background
    12                              <1> ;Make the GUI have a loadable background
    13                              <1> 
    14                              <1> ;%define io.serial "1"
    15                              <1> ;Use the specified serial port for input and output instead of the keyboard and screen
    16                              <1> ;If the gui is included this should not be enabled
    17                              <1> 
    18                              <1> ;%define terminal.vsync
    19                              <1> ;Uses the RTC to automatically update the terminal at ~64Hz
    20                              <1> 	;WARNING:
    21                              <1> 	;This may cause problems on systems with non-standard RTC's
    22                              <1> 	;It is therefore recommended that you do not enable it even
    23                              <1> 	;though it gives a large speed improvement for character output
    24                              <1> 
    25                              <1> %define hardware.automatic
    26                              <1> ;Automatically load the sound and network drivers.
    27                              <1> 
    28                              <1> %define threads.included
    29                              <1> ;Include the thread testing stuff-this uses a relatively large amount of memory
    30                              <1> 
    31                              <1> %define exceptions.included
    32                              <1> ;Display debugging information should crashes occur-also uses quite a bit of memory
    33                              <1> 
    34                              <1> ;%define disk.protected
    35                              <1> ;Use protected mode instead of real mode for disk access-this allows for multitasking
    36                              <1> 
    37                              <1> %define disk.real
    38                              <1> ;Use real mode for disk access-this gives greater compatibility
    39                              <1> 
    40                              <1> %define sound.included
    41                              <1> ;This includes the sound drivers
    42                              <1> 
    43                              <1> %define network.included
    44                              <1> ;This includes the network stack
    45                              <1> %define rtl8169.included
    46                              <1> ;This includes the RTL8169 drivers
    47                              <1> 
    48                              <1> %define rtl8139.included
    49                              <1> ;This includes the RTL8139 drivers
    50                              <1> 
    51                              <1> %define ne2000.included
    52                              <1> ;This includes the ne2000 drivers
    53                              <1> 
    54                              <1> %define i8254x.included
    55                              <1> ;This includes the Intel 8254x drivers
    56                              <1> 
    57                              <1> ;%define sector.debug
    58                              <1> ;Dump the contents of the first sector of SollerOS
    59                              <1> 
    60                              <1> ;%define system.simple 
    61                              <1> ;The smallest possible system, overrides all options
    62                              <1> 
    63                              <1> ;FIX DEPENDANCIES
    64                              <1> %ifdef gui.included
    65                              <1> 	%undef io.serial
    66                              <1> %else
    67                              <1> 	%undef gui.alphablending
    68                              <1> 	%undef gui.background
    69                              <1> %endif
    70                              <1> %ifdef disk.protected
    71                              <1> 	%undef disk.real
    72                              <1> %endif
    73                              <1> %ifdef network.included
    74                              <1> %else
    75                              <1> 	%undef i8254x.included
    76                              <1> 	%undef ne2000.included
    77                              <1> 	%undef rtl8139.included
    78                              <1> 	%undef rtl8169.included
    79                              <1> %endif
    80                              <1> %ifdef system.simple
    81                              <1> 	%define io.serial "1"
    82                              <1> 	%define disk.real
    83                              <1> 	%undef gui.included
    84                              <1> 	%undef gui.alphablending
    85                              <1> 	%undef gui.background
    86                              <1> 	%undef terminal.vsync
    87                              <1> 	%undef hardware.automatic
    88                              <1> 	%undef threads.included
    89                              <1> 	%undef exceptions.included
    90                              <1> 	%undef disk.protected
    91                              <1> 	%undef sound.included
    92                              <1> 	%undef network.included
    93                              <1> 	%undef rtl8139.included
    94                              <1> 	%undef rtl8169.included
    95                              <1> 	%undef ne2000.included
    96                              <1> 	%undef i8254x.included
    97                              <1> 	%undef sector.debug
    98                              <1> %endif
    99                                  [BITS 16]
   100                                      %include "source/boot.asm"
   101                              <1>     ; MENU.ASM
   102                              <1> %include 'source/signature.asm'
   103                              <2> signature:
   104 00000000 536F6C6C65724F53    <2> db "SollerOS" ;Operating system name
   105 00000008 20416C706861204275- <2> db " Alpha Build ",0	;Soller OS development level
   106 00000011 696C642000          <2>
   107 00000016 E3000000            <2> dd 227	;version number
   108                              <2> signatureend:
   109                              <1> menustart:	
   110 0000001A 8CC8                <1> 	mov ax, cs
   111 0000001C 8ED8                <1> 	mov ds, ax
   112 0000001E 8EC0                <1> 	mov es, ax
   113 00000020 8ED0                <1> 	mov ss, ax
   114 00000022 880E[E59E]          <1> 	mov [DriveNumber], cl
   115 00000026 668916[E69E]        <1> 	mov [lbaad], edx
   116                              <1> %ifdef io.serial
   117                              <1> 	call getmemorysize
   118                              <1> 	mov si, serialmsg
   119                              <1> 	call printrm
   120                              <1> 	jmp pmode
   121                              <1> serialmsg: db "SollerOS: Using serial port ",io.serial," for I/O.",0
   122                              <1> %else
   123 0000002B E80300              <1> 	call vgaset	;make users switch using a command-this leads to very fast boots
   124 0000002E E95700              <1> 	jmp pmode
   125                              <1> %endif
   126                              <1> 	
   127                              <1> vgaset:
   128 00000031 B81200              <1> 	mov ax, 12h
   129 00000034 31DB                <1> 	xor bx, bx
   130 00000036 CD10                <1> 	int 10h
   131 00000038 C606[E49E]00        <1> 	mov byte [guion], 0
   132 0000003D E80100              <1> 	call getmemorysize;get the memory map after the video is initialized
   133 00000040 C3                  <1> 	ret
   134                              <1> 
   135                              <1> getmemorysize:
   136 00000041 BF[EA9E]            <1> 	mov di, memlistbuf
   137 00000044 6631DB              <1> 	xor ebx, ebx
   138                              <1> getmemsizeloop:
   139 00000047 66B820E80000        <1> 	mov eax, 0xE820
   140 0000004D 66BA50414D53        <1> 	mov edx, 0x0534D4150
   141 00000053 66B918000000        <1> 	mov ecx, 24
   142 00000059 CD15                <1> 	int 0x15
   143 0000005B 81C71800            <1> 	add di, 24
   144 0000005F 81FF[2AA1]          <1> 	cmp di, memlistend
   145 00000063 7309                <1> 	jae nomoregetmemsize
   146 00000065 6681FB00000000      <1> 	cmp ebx, 0
   147 0000006C 75D9                <1> 	jne getmemsizeloop
   148                              <1> nomoregetmemsize:
   149 0000006E 81EF[EA9E]          <1> 	sub di, memlistbuf
   150 00000072 893E[2AA1]          <1> 	mov [memlistend], di
   151 00000076 C3                  <1> 	ret
   152                              <1> 	
   153                              <1> printrm:			; 'si' comes in with string address
   154 00000077 BB0700              <1>     mov bx,07		; write to display
   155 0000007A B40E                <1>     mov ah,0Eh		; screen function
   156 0000007C 8A04                <1>    .lp:    mov al,[si]         ; get next character
   157 0000007E 3C00                <1>     cmp al,0		; look for terminator 
   158 00000080 7405                <1>     je .done		; zero byte at end of string
   159 00000082 CD10                <1>     int 10h		; write character to screen.    
   160 00000084 46                  <1> 	inc si	     	; move to next character
   161 00000085 EBF5                <1>     jmp .lp		; loop
   162 00000087 C3                  <1> .done: ret
   163                                      %include "source/pmode.asm"
   164                              <1> [BITS 16]
   165                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   166                              <1> ;	16-bit real mode
   167                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   168                              <1> 
   169                              <1> pmode:
   170 00000088 6631C0              <1> 	xor eax, eax
   171 0000008B 6631DB              <1> 	xor ebx, ebx
   172 0000008E 6631C9              <1> 	xor ecx, ecx
   173 00000091 6631D2              <1> 	xor edx, edx
   174 00000094 6631F6              <1> 	xor esi, esi
   175 00000097 6631FF              <1> 	xor edi, edi
   176 0000009A BA9200              <1> 	mov dx, 0x92
   177 0000009D EC                  <1> 	in al, dx	;;A20
   178 0000009E 0C02                <1> 	or al, 2
   179 000000A0 EE                  <1> 	out dx, al
   180 000000A1 8CCB                <1> 	mov bx,cs		; EBX=segment
   181 000000A3 66C1E304            <1> 	shl ebx,4		;	<< 4
   182 000000A7 67668D03            <1> 	lea eax,[ebx]		; EAX=linear address of segment base
   183 000000AB A3[B103]            <1> 	mov [gdt2 + 2],ax
   184 000000AE A3[B903]            <1> 	mov [gdt3 + 2],ax
   185 000000B1 66C1E810            <1> 	shr eax,16
   186 000000B5 A2[B303]            <1> 	mov [gdt2 + 4],al
   187 000000B8 A2[BB03]            <1> 	mov [gdt3 + 4],al
   188 000000BB 8826[B603]          <1> 	mov [gdt2 + 7],ah
   189 000000BF 8826[BE03]          <1> 	mov [gdt3 + 7],ah
   190                              <1> 
   191 000000C3 66B8[2AA10000]      <1> 	mov eax, initialstack
   192 000000C9 660306[4202]        <1> 	add eax, [newcodecache]
   193 000000CE A3[A903]            <1> 	mov [gdts + 2],ax
   194 000000D1 66C1E810            <1> 	shr eax, 16
   195 000000D5 A2[AB03]            <1> 	mov [gdts + 4],al
   196 000000D8 8826[AE03]          <1> 	mov [gdts + 7], ah
   197                              <1> 	
   198 000000DC 66A1[4202]          <1> 	mov eax, [newcodecache]
   199 000000E0 A3[C103]            <1> 	mov [gdt4 + 2],ax
   200 000000E3 A3[C903]            <1> 	mov [gdt5 + 2],ax
   201 000000E6 A3[D103]            <1> 	mov [gdtv8086 + 2], ax
   202 000000E9 A3[D903]            <1> 	mov [gdtv80862 + 2], ax
   203 000000EC 66C1E810            <1> 	shr eax,16
   204 000000F0 A2[C303]            <1> 	mov [gdt4 + 4],al
   205 000000F3 A2[CB03]            <1> 	mov [gdt5 + 4],al
   206 000000F6 A2[D303]            <1> 	mov [gdtv8086 + 4],al
   207 000000F9 A2[DB03]            <1> 	mov [gdtv80862 + 4],al
   208 000000FC 8826[C603]          <1> 	mov [gdt4 + 7],ah
   209 00000100 8826[CE03]          <1> 	mov [gdt5 + 7],ah
   210 00000104 8826[D603]          <1> 	mov [gdtv8086 + 7],ah
   211 00000108 8826[DE03]          <1> 	mov [gdtv80862 + 7],ah
   212                              <1> 	
   213 0000010C 66B800004000        <1> 	mov eax, dosprogloc
   214 00000112 660306[4202]        <1> 	add eax, [newcodecache]
   215 00000117 A3[E103]            <1> 	mov [gdtdos + 2],ax
   216 0000011A A3[E903]            <1> 	mov [gdtdos2 + 2],ax
   217 0000011D 66C1E810            <1> 	shr eax,16
   218 00000121 A2[E303]            <1> 	mov [gdtdos + 4],al
   219 00000124 A2[EB03]            <1> 	mov [gdtdos2 + 4],al
   220 00000127 8826[E603]          <1> 	mov [gdtdos + 7],ah
   221 0000012B 8826[EE03]          <1> 	mov [gdtdos2 + 7],ah
   222                              <1> 	
   223                              <1> ; fix up gdt and idt
   224 0000012F 67668D83[97030000]  <1> 	lea eax,[ebx + gdt]	; EAX=linear address of gdt
   225 00000137 66A3[8D03]          <1> 	mov [gdtr + 2],eax
   226 0000013B 67668D83[EF030000]  <1> 	lea eax,[ebx + idt]	; EAX=linear address of idt
   227 00000143 66A3[9303]          <1> 	mov [idtr + 2],eax
   228 00000147 FA                  <1> 	cli
   229 00000148 0F0116[8B03]        <1> 	lgdt [gdtr]
   230 0000014D 0F011E[9103]        <1> 	lidt [idtr]
   231 00000152 6631DB              <1> 	xor ebx, ebx
   232 00000155 8CDB                <1> 	mov bx, ds
   233 00000157 66891E[3E02]        <1> 	mov [basecache], ebx
   234 0000015C 0F20C0              <1> 	mov eax,cr0
   235 0000015F 0C01                <1> 	or al,1
   236 00000161 0F22C0              <1> 	mov cr0,eax
   237 00000164 EA[6901]1800        <1> 	jmp SYS_CODE_SEL:do_pm
   238                              <1> [BITS 32]
   239                              <1> do_pm:
   240 00000169 31C0                <1> 	xor eax, eax
   241 0000016B 66B82000            <1> 	mov ax, SYS_DATA_SEL
   242 0000016F 8ED8                <1> 	mov ds, ax
   243 00000171 8EC0                <1> 	mov es, ax
   244 00000173 8EE0                <1> 	mov fs, ax
   245 00000175 66B83000            <1> 	mov ax, NEW_DATA_SEL
   246 00000179 8EE8                <1> 	mov gs, ax
   247                              <1> 	
   248                              <1> copykernel:
   249 0000017B 648B06              <1> 	mov eax, [fs:esi]
   250 0000017E 658906              <1> 	mov [gs:esi], eax
   251 00000181 81C604000000        <1> 	add esi, 4
   252 00000187 81FE[2AA10000]      <1> 	cmp esi, bsscopy
   253 0000018D 72EC                <1> 	jb copykernel
   254 0000018F EA[96010000]2800    <1> 	jmp NEW_CODE_SEL:done_copy
   255                              <1> 	
   256                              <1> done_copy:
   257 00000196 66B83000            <1> 	mov ax, NEW_DATA_SEL	;;these MUST be setup AFTER the kernel switches places!!!
   258 0000019A 8ED8                <1> 	mov ds, ax
   259 0000019C 8EC0                <1> 	mov es, ax
   260 0000019E 8EE0                <1> 	mov fs, ax
   261                              <1> 	;mov ax, STACK_SEL
   262 000001A0 8ED0                <1> 	mov ss, ax
   263 000001A2 BC[CAB00000]        <1> 	mov esp, stackend
   264 000001A7 66B82000            <1> 	mov ax, SYS_DATA_SEL
   265 000001AB 8EE8                <1> 	mov gs, ax
   266                              <1> 	
   267 000001AD E8A65D0000          <1> 	call initialize	;initialize drivers
   268                              <1> 	
   269 000001B2 A1[42020000]        <1> 	mov eax, [newcodecache]
   270 000001B7 C1E804              <1> 	shr eax, 4
   271 000001BA A3[3E020000]        <1> 	mov [basecache], eax
   272                              <1> 	
   273 000001BF BE[2C003A00]        <1> 	mov esi, bssend
   274 000001C4 31C0                <1> 	xor eax, eax
   275                              <1> clearkernelbuffers:
   276 000001C6 8906                <1> 	mov [esi], eax
   277 000001C8 81EE04000000        <1> 	sub esi, 4
   278 000001CE 81FE[2AA10000]      <1> 	cmp esi, bsscopy
   279 000001D4 77F0                <1> 	ja clearkernelbuffers
   280 000001D6 FB                  <1> 	sti
   281                              <1> 
   282                              <1> getmemoryspace:
   283 000001D7 BE[EA9E0000]        <1> 	mov esi, memlistbuf
   284 000001DC 31FF                <1> 	xor edi, edi
   285 000001DE 668B3D[2AA10000]    <1> 	mov di, [memlistend]
   286 000001E5 01F7                <1> 	add edi, esi
   287 000001E7 31C0                <1> 	xor eax, eax
   288                              <1> memoryspaceaddition:
   289 000001E9 39FE                <1> 	cmp esi, edi
   290 000001EB 7322                <1> 	jae finishedmemspacecalc
   291 000001ED 81C608000000        <1> 	add esi, 8
   292 000001F3 8B0E                <1> 	mov ecx, [esi]
   293 000001F5 81C608000000        <1> 	add esi, 8
   294 000001FB 8B1E                <1> 	mov ebx, [esi]
   295 000001FD 81C608000000        <1> 	add esi, 8
   296 00000203 81FB01000000        <1> 	cmp ebx, 1
   297 00000209 75DE                <1> 	jne memoryspaceaddition
   298 0000020B 01C8                <1> 	add eax, ecx
   299 0000020D EBDA                <1> 	jmp memoryspaceaddition
   300                              <1> finishedmemspacecalc:
   301 0000020F A3[53020000]        <1> 	mov [memoryspace], eax
   302                              <1> %ifdef gui.included
   303 00000214 803D[E49E0000]00    <1> 	cmp byte [guion], 0
   304 0000021B 741C                <1> 	je normalstartup
   305 0000021D 8B1D[3E020000]      <1> 	mov ebx, [basecache]
   306 00000223 C1E304              <1> 	shl ebx, 4
   307 00000226 8B3D[44550000]      <1> 	mov edi, [physbaseptr]
   308 0000022C 29DF                <1> 	sub edi, ebx
   309 0000022E 893D[44550000]      <1> 	mov [physbaseptr], edi
   310 00000234 E9E4620000          <1> 	jmp guiboot
   311                              <1> %endif
   312                              <1> normalstartup:
   313 00000239 E9D0250000          <1> 	jmp os
   314                              <1> 	
   315 0000023E 00000000            <1> basecache dd 0
   316 00000242 00001000            <1> newcodecache dd 0x100000
   317                              <1> 
   318 00000246 00                  <1> testingcpuspeed db 0
   319 00000247 00000000            <1> cpuspeedperint dd 0
   320 0000024B 0000000000000000    <1> cpuclocksperint dd 0,0
   321 00000253 00000000            <1> memoryspace dd 0
   322 00000257 7D0A                <1> pitdiv dw 2685
   323 00000259 2E562200            <1> timeinterval dd 2250286
   324 0000025D 00000000            <1> timeseconds dd 0
   325 00000261 00000000            <1> timenanoseconds dd 0
   326 00000265 00                  <1> soundon db 0
   327 00000266 0000                <1> soundrepititions dw 0
   328 00000268 00000000            <1> soundpos dd 0
   329 0000026C 00000000            <1> soundendpos dd 0
   330                              <1> 
   331                              <1> cpuspeedend:
   332 00000270 C605[46020000]00    <1> 	mov byte [testingcpuspeed], 0
   333 00000277 A3[47020000]        <1> 	mov [cpuspeedperint], eax
   334 0000027C B8[054C0000]        <1> 	mov eax, cpuspeedloopend
   335 00000281 890424              <1> 	mov [esp], eax
   336 00000284 E9F2000000          <1> 	jmp handled
   337                              <1> 
   338                              <1> ;if using the rtc, the default frequency yeilds a period of 976562.5ns
   339                              <1> ;if using the pit, div=451 is 377981.0004, div=5370 is 4500572.00007ns
   340                              <1> ;div=55483 is 46500044.000006ns, div=2685 is 2250286.00004ns, div=902 is 755962.0008
   341                              <1> 
   342                              <1> pitinterrupt: ;this controls threading
   343 00000289 FA                  <1> 	cli
   344 0000028A 803D[46020000]01    <1> 	cmp byte [testingcpuspeed], 1	;check to see if the cpu speed test is running
   345 00000291 74DD                <1> 	je cpuspeedend
   346                              <1> 		
   347 00000293 E8A0000000          <1> 	call timekeeper ;this updates the internal time
   348                              <1> 	
   349 00000298 803D[65020000]01    <1> 	cmp byte [soundon], 1
   350 0000029F 0F8483560000        <1> 	je near PCSpeakerRAW
   351                              <1> timerinterrupt:	;put this into the interrupt handler that controls threading
   352                              <1> %ifdef threads.included
   353 000002A5 803D[18650000]01    <1> 	cmp byte [threadson], 1
   354 000002AC 0F8406620000        <1> 	je near threadswitch
   355                              <1> %endif
   356                              <1> keyinterrupt:		;checks for escape, if pressed, it quits the program currently running
   357 000002B2 803D[18650000]00    <1> 	cmp byte [threadson], 0
   358 000002B9 0F84BC000000        <1> 	je near handled
   359                              <1> %ifdef io.serial
   360                              <1> 	jmp handled
   361                              <1> %else
   362 000002BF 60                  <1> 	pusha
   363 000002C0 E464                <1> 	in al, 64h
   364 000002C2 A820                <1> 	test al, 20h
   365 000002C4 0F85AF000000        <1> 	jnz near handled2
   366 000002CA E460                <1> 	in al, 60h
   367 000002CC 3C01                <1> 	cmp al, 1		;escape
   368 000002CE 7405                <1> 	je userint
   369 000002D0 E9A4000000          <1> 	jmp handled2
   370                              <1> userint:
   371                              <1> 	;UNMASK ALL INTS
   372 000002D5 30C0                <1> 	xor al, al
   373 000002D7 E621                <1> 	out 0x21, al
   374 000002D9 30C0                <1> 	xor al, al
   375 000002DB E6A1                <1> 	out 0xA1, al
   376 000002DD B020                <1> 	mov al, 0x20
   377 000002DF E6A0                <1> 	out 0xA0, al
   378 000002E1 E620                <1> 	out 0x20, al
   379                              <1> 	;RESET PIT DIVISOR
   380 000002E3 66A1[57020000]      <1> 	mov ax, [pitdiv]
   381 000002E9 E640                <1> 	out 0x40, al
   382 000002EB 66C1C008            <1> 	rol ax, 8
   383 000002EF E640                <1> 	out 0x40, al
   384                              <1> 	;RESET PIC
   385 000002F1 B020                <1> 	mov al, 0x20
   386 000002F3 E620                <1> 	out 0x20, al
   387 000002F5 61                  <1> 	popa
   388 000002F6 FB                  <1> 	sti
   389 000002F7 BC[CAB00000]        <1> 	mov esp, stackend ;reset stack
   390 000002FC E964260000          <1> 	jmp returnfromexp
   391                              <1> %endif
   392 00000301 0A                  <1> rtcrate db 10
   393                              <1> rtcint:	;this runs at 64Hz which is perfect for 60Hz displays
   394                              <1> %ifdef io.serial
   395                              <1> %else
   396                              <1> %ifdef terminal.vsync
   397                              <1> 	cli
   398                              <1> 	cmp byte [termcopyneeded], 0
   399                              <1> 	je .nocopy
   400                              <1> 	call newtermcopy
   401                              <1> .nocopy
   402                              <1> 	push eax
   403                              <1> 	mov al, 0xC
   404                              <1> 	out 0x70, al
   405                              <1> 	in al, 0x71
   406                              <1> 	pop eax
   407                              <1> 	sti
   408                              <1> %endif
   409                              <1> %endif
   410 00000302 E97B000000          <1> 	jmp handled4
   411                              <1> %ifdef rtl8139.included
   412                              <1> rtl8139.irq:
   413 00000307 FA                  <1> 	cli
   414 00000308 52                  <1> 	push edx
   415 00000309 50                  <1> 	push eax
   416 0000030A 8B15[3B830000]      <1> 	mov edx, [rtl8139.basenicaddr]
   417 00000310 81C23E000000        <1> 	add edx, rtl8139.ISR
   418 00000316 31C0                <1> 	xor eax, eax
   419 00000318 66ED                <1> 	in ax, dx
   420 0000031A 66EF                <1> 	out dx, ax
   421 0000031C 58                  <1> 	pop eax
   422 0000031D 5A                  <1> 	pop edx
   423 0000031E FB                  <1> 	sti
   424 0000031F E95E000000          <1> 	jmp handled4
   425                              <1> %endif
   426                              <1> %ifdef sound.included
   427                              <1> sblaster.irq:
   428 00000324 FA                  <1> 	cli
   429 00000325 60                  <1> 	pusha
   430 00000326 803D[0E5C0000]01    <1> 	cmp byte [SoundBlaster], 1
   431 0000032D 0F84E6560000        <1> 	je near sblaster.cont
   432 00000333 E941000000          <1> 	jmp handled2
   433                              <1> %endif
   434                              <1> 	
   435                              <1> timekeeper:
   436 00000338 50                  <1> 	push eax
   437 00000339 A1[61020000]        <1> 	mov eax, [timenanoseconds]
   438 0000033E 0305[59020000]      <1> 	add eax, [timeinterval]
   439 00000344 3D00CA9A3B          <1> 	cmp eax, 1000000000
   440 00000349 7227                <1> 	jb nonanosecondrollover
   441 0000034B FF05[5D020000]      <1> 	inc dword [timeseconds]
   442 00000351 2D00CA9A3B          <1> 	sub eax, 1000000000
   443                              <1> 	%ifdef gui.included
   444                              <1> 		;REMOVE THIS IT IS NOT EFFICIENT
   445 00000356 803D[E49E0000]01    <1> 		cmp byte [guion], 1
   446 0000035D 7513                <1> 		jne nonanosecondrollover
   447 0000035F 813D[0F790000]0000- <1> 		cmp dword [dragging], 0
   448 00000367 0000                <1>
   449 00000369 7507                <1> 		jne nonanosecondrollover
   450 0000036B 60                  <1> 		pusha
   451 0000036C E8126D0000          <1> 		call guitime
   452 00000371 61                  <1> 		popa
   453                              <1> 	%endif
   454                              <1> nonanosecondrollover:
   455 00000372 A3[61020000]        <1> 	mov [timenanoseconds], eax
   456 00000377 58                  <1> 	pop eax
   457 00000378 C3                  <1> 	ret
   458                              <1> 	
   459                              <1> handled2:
   460 00000379 61                  <1> 	popa
   461                              <1> handled3:
   462 0000037A FB                  <1> 	sti
   463                              <1> handled:
   464 0000037B 50                  <1> 	push eax
   465 0000037C B020                <1> 	mov al, 0x20
   466 0000037E E620                <1> 	out 0x20, al
   467 00000380 58                  <1> 	pop eax
   468 00000381 CF                  <1> 	iret
   469                              <1> handled4:
   470 00000382 50                  <1> 	push eax
   471 00000383 B020                <1> 	mov al, 0x20
   472 00000385 E6A0                <1> 	out 0xA0, al
   473 00000387 E620                <1> 	out 0x20, al
   474 00000389 58                  <1> 	pop eax
   475 0000038A CF                  <1> 	iret
   476                              <1> [BITS 16]
   477                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   478                              <1> ;	16-bit limit/32-bit linear base address of GDT and IDT
   479                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   480 0000038B 5700                <1> gdtr:	dw gdt_end - gdt - 1	; GDT limit
   481 0000038D 00000000            <1> 	dd 0    		; filled with linear, physical address of GDT
   482                              <1> 
   483 00000391 FF07                <1> idtr:	dw idt_end - idt - 1	; IDT limit
   484 00000393 00000000            <1> 	dd 0			; filled with linear, physical address of IDT
   485                              <1> 
   486                              <1> 
   487 00000397 0000                <1> gdt:	dw 0			; limit 15:0
   488 00000399 0000                <1> 	dw 0			; base 15:0
   489 0000039B 00                  <1> 	db 0			; base 23:16
   490 0000039C 00                  <1> 	db 0			; type
   491 0000039D 00                  <1> 	db 0			; limit 19:16, flags
   492 0000039E 00                  <1> 	db 0			; base 31:24
   493                              <1> ; linear data segment descriptor
   494                              <1> LINEAR_SEL	equ	$-gdt
   495 0000039F FFFF                <1> 	dw 0xFFFF		; limit 0xFFFFF
   496 000003A1 0000                <1> 	dw 0			; base for this one is always 0
   497 000003A3 00                  <1> 	db 0
   498 000003A4 92                  <1> 	db 0x92			; present, ring 0, data, expand-up, writable
   499 000003A5 CF                  <1> 	db 0xCF			; page-granular, 32-bit
   500 000003A6 00                  <1> 	db 0
   501                              <1> STACK_SEL	equ $-gdt
   502 000003A7 0200                <1> gdts:	dw 2;(stackend)/4096
   503 000003A9 0000                <1> 	dw 0
   504 000003AB 00                  <1> 	db 0
   505 000003AC 92                  <1> 	db 0x92
   506 000003AD CF                  <1> 	db 0xCF
   507 000003AE 00                  <1> 	db 0
   508                              <1> ; code segment descriptor
   509                              <1> SYS_CODE_SEL	equ	$-gdt
   510 000003AF FFFF                <1> gdt2:	dw 0xFFFF
   511 000003B1 0000                <1> 	dw 0			; (base gets set above)
   512 000003B3 00                  <1> 	db 0
   513 000003B4 9A                  <1> 	db 0x9A			; present, ring 0, code, non-conforming, readable
   514 000003B5 CF                  <1> 	db 0xCF
   515 000003B6 00                  <1> 	db 0
   516                              <1> ; data segment descriptor
   517                              <1> SYS_DATA_SEL	equ	$-gdt
   518 000003B7 FFFF                <1> gdt3:	dw 0xFFFF
   519 000003B9 0000                <1> 	dw 0			; (base gets set above)
   520 000003BB 00                  <1> 	db 0
   521 000003BC 92                  <1> 	db 0x92			; present, ring 0, data, expand-up, writable
   522 000003BD CF                  <1> 	db 0xCF
   523 000003BE 00                  <1> 	db 0
   524                              <1> NEW_CODE_SEL	equ	$-gdt
   525 000003BF FFFF                <1> gdt4:	dw 0xFFFF
   526 000003C1 0000                <1> 	dw 0			; (base gets set above)
   527 000003C3 00                  <1> 	db 0
   528 000003C4 9A                  <1> 	db 0x9A			; present, ring 0, code, non-conforming, readable
   529 000003C5 CF                  <1> 	db 0xCF
   530 000003C6 00                  <1> 	db 0
   531                              <1> ; data segment descriptor
   532                              <1> NEW_DATA_SEL	equ	$-gdt
   533 000003C7 FFFF                <1> gdt5:	dw 0xFFFF
   534 000003C9 0000                <1> 	dw 0			; (base gets set above)
   535 000003CB 00                  <1> 	db 0
   536 000003CC 92                  <1> 	db 0x92			; present, ring 0, data, expand-up, writable
   537 000003CD CF                  <1> 	db 0xCF
   538 000003CE 00                  <1> 	db 0
   539                              <1> V8086_CODE_SEL	equ $-gdt
   540 000003CF FFFF                <1> gdtv8086: dw 0xFFFF
   541 000003D1 0000                <1> 	dw 0
   542 000003D3 00                  <1> 	db 0
   543 000003D4 9A                  <1> 	db 0x9A
   544 000003D5 8F                  <1> 	db 0x8F
   545 000003D6 00                  <1> 	db 0
   546                              <1> V8086_DATA_SEL	equ $-gdt
   547 000003D7 FFFF                <1> gdtv80862: dw 0xFFFF
   548 000003D9 0000                <1> 	dw 0
   549 000003DB 00                  <1> 	db 0
   550 000003DC 92                  <1> 	db 0x92
   551 000003DD 8F                  <1> 	db 0x8F
   552 000003DE 00                  <1> 	db 0
   553                              <1> DOS_CODE_SEL	equ $-gdt	;this gives dos programs complete access to one megabyte at the beginning of memory
   554 000003DF 0001                <1> gdtdos:	dw 256	;give it 1 MB
   555 000003E1 0000                <1> 	dw 0
   556 000003E3 00                  <1> 	db 0
   557 000003E4 9A                  <1> 	db 0x9A
   558 000003E5 8F                  <1> 	db 0x8F ;16 bit
   559 000003E6 00                  <1> 	db 0
   560                              <1> DOS_DATA_SEL 	equ $-gdt
   561 000003E7 0001                <1> gdtdos2:	dw 256
   562 000003E9 0000                <1> 	dw 0
   563 000003EB 00                  <1> 	db 0
   564 000003EC 92                  <1> 	db 0x92
   565 000003ED 8F                  <1> 	db 0x8F ;16 bit
   566 000003EE 00                  <1> 	db 0
   567                              <1> gdt_end:
   568                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   569                              <1> ;	interrupt descriptor table (IDT)
   570                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   571                              <1> ; 32 reserved interrupts:
   572                              <1> idt:	
   573                              <1> %assign i 0
   574                              <1> %rep    8
   575                              <1> 		dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   576                              <1> %assign i i+1
   577                              <1> %endrep
   578 000003EF [100D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   579                              <2> %assign i i+1
   580 000003F7 [1C0D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   581                              <2> %assign i i+1
   582 000003FF [280D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   583                              <2> %assign i i+1
   584 00000407 [340D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   585                              <2> %assign i i+1
   586 0000040F [400D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   587                              <2> %assign i i+1
   588 00000417 [4C0D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   589                              <2> %assign i i+1
   590 0000041F [580D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   591                              <2> %assign i i+1
   592 00000427 [640D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   593                              <2> %assign i i+1
   594 0000042F [700D]1800008E0000  <1> 		dw unhand + 8*12,SYS_CODE_SEL,0x8E00,0	;double fault handler in original memory
   595                              <1> %assign i 9
   596                              <1> %rep    23
   597                              <1> 		dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   598                              <1> %assign i i+1
   599                              <1> %endrep
   600 00000437 [7C0D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   601                              <2> %assign i i+1
   602 0000043F [880D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   603                              <2> %assign i i+1
   604 00000447 [940D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   605                              <2> %assign i i+1
   606 0000044F [A00D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   607                              <2> %assign i i+1
   608 00000457 [AC0D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   609                              <2> %assign i i+1
   610 0000045F [B80D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   611                              <2> %assign i i+1
   612 00000467 [C40D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   613                              <2> %assign i i+1
   614 0000046F [D00D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   615                              <2> %assign i i+1
   616 00000477 [DC0D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   617                              <2> %assign i i+1
   618 0000047F [E80D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   619                              <2> %assign i i+1
   620 00000487 [F40D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   621                              <2> %assign i i+1
   622 0000048F [000E]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   623                              <2> %assign i i+1
   624 00000497 [0C0E]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   625                              <2> %assign i i+1
   626 0000049F [180E]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   627                              <2> %assign i i+1
   628 000004A7 [240E]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   629                              <2> %assign i i+1
   630 000004AF [300E]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   631                              <2> %assign i i+1
   632 000004B7 [3C0E]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   633                              <2> %assign i i+1
   634 000004BF [480E]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   635                              <2> %assign i i+1
   636 000004C7 [540E]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   637                              <2> %assign i i+1
   638 000004CF [600E]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   639                              <2> %assign i i+1
   640 000004D7 [6C0E]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   641                              <2> %assign i i+1
   642 000004DF [780E]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   643                              <2> %assign i i+1
   644 000004E7 [840E]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   645                              <2> %assign i i+1
   646 000004EF [D426]2800008E0000  <1> 		dw int20h,NEW_CODE_SEL,0x8E00,0
   647 000004F7 [D826]2800008E0000  <1> 		dw int21h,NEW_CODE_SEL,0x8E00,0
   648                              <1> %assign i 0x22
   649                              <1> %rep 14
   650                              <1> 		dw handled,NEW_CODE_SEL,0x8E00,0
   651                              <1> %assign i +1
   652                              <1> %endrep
   653 000004FF [7B03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   654                              <2> %assign i +1
   655 00000507 [7B03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   656                              <2> %assign i +1
   657 0000050F [7B03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   658                              <2> %assign i +1
   659 00000517 [7B03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   660                              <2> %assign i +1
   661 0000051F [7B03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   662                              <2> %assign i +1
   663 00000527 [7B03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   664                              <2> %assign i +1
   665 0000052F [7B03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   666                              <2> %assign i +1
   667 00000537 [7B03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   668                              <2> %assign i +1
   669 0000053F [7B03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   670                              <2> %assign i +1
   671 00000547 [7B03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   672                              <2> %assign i +1
   673 0000054F [7B03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   674                              <2> %assign i +1
   675 00000557 [7B03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   676                              <2> %assign i +1
   677 0000055F [7B03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   678                              <2> %assign i +1
   679 00000567 [7B03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   680                              <2> %assign i +1
   681                              <1> ;INT 30h for os use and 3rd party use:
   682 0000056F [031C]2800008E0000  <1> 		dw newints,NEW_CODE_SEL,0x8E00,0
   683                              <1> %assign i 0x31
   684                              <1> %rep 15
   685                              <1> 		dw handled,NEW_CODE_SEL,0x8E00,0
   686                              <1> %assign i +1
   687                              <1> %endrep
   688 00000577 [7B03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   689                              <2> %assign i +1
   690 0000057F [7B03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   691                              <2> %assign i +1
   692 00000587 [7B03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   693                              <2> %assign i +1
   694 0000058F [7B03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   695                              <2> %assign i +1
   696 00000597 [7B03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   697                              <2> %assign i +1
   698 0000059F [7B03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   699                              <2> %assign i +1
   700 000005A7 [7B03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   701                              <2> %assign i +1
   702 000005AF [7B03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   703                              <2> %assign i +1
   704 000005B7 [7B03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   705                              <2> %assign i +1
   706 000005BF [7B03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   707                              <2> %assign i +1
   708 000005C7 [7B03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   709                              <2> %assign i +1
   710 000005CF [7B03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   711                              <2> %assign i +1
   712 000005D7 [7B03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   713                              <2> %assign i +1
   714 000005DF [7B03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   715                              <2> %assign i +1
   716 000005E7 [7B03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   717                              <2> %assign i +1
   718                              <1> ;and here we are at 0x40
   719                              <1> ;here are all the irq's
   720 000005EF [8902]2800008E0000  <1> 		dw pitinterrupt,NEW_CODE_SEL,0x8E00,0 ;IRQ 0 = PIT
   721 000005F7 [7B03]2800008E0000  <1> 		dw handled,NEW_CODE_SEL,0x8E00,0 ;IRQ 1 = keyboard
   722 000005FF [7B03]2800008E0000  <1> 		dw handled,NEW_CODE_SEL,0x8E00,0 ;IRQ 2
   723 00000607 [7B03]2800008E0000  <1> 		dw handled,NEW_CODE_SEL,0x8E00,0 ;IRQ 3
   724 0000060F [7B03]2800008E0000  <1> 		dw handled,NEW_CODE_SEL,0x8E00,0 ;IRQ 4
   725                              <1> 	%ifdef sound.included
   726 00000617 [2403]2800008E0000  <1> 		dw sblaster.irq,NEW_CODE_SEL,0x8E00,0 ;IRQ 5 = default SoundBlaster
   727                              <1> 	%else
   728                              <1> 		dw handled,NEW_CODE_SEL,0x8E00,0 ;IRQ 5
   729                              <1> 	%endif
   730 0000061F [7B03]2800008E0000  <1> 		dw handled,NEW_CODE_SEL,0x8E00,0 ;IRQ 6
   731 00000627 [7B03]2800008E0000  <1> 		dw handled,NEW_CODE_SEL,0x8E00,0 ;IRQ 7
   732 0000062F [0203]2800008E0000  <1> 		dw rtcint,NEW_CODE_SEL,0x8E00,0 ;IRQ 8 = RTC
   733 00000637 [8203]2800008E0000  <1> 		dw handled4,NEW_CODE_SEL,0x8E00,0 ;IRQ 9 = default NE2000
   734 0000063F [8203]2800008E0000  <1> 		dw handled4,NEW_CODE_SEL,0x8E00,0 ;IRQ 10
   735                              <1> 	%ifdef rtl8139.included
   736 00000647 [0703]2800008E0000  <1> 		dw rtl8139.irq,NEW_CODE_SEL,0x8E00,0 ;IRQ 11 = default RTL8139
   737                              <1> 	%else
   738                              <1> 		dw handled4,NEW_CODE_SEL,0x8E00,0 ;IRQ 11
   739                              <1> 	%endif
   740 0000064F [8203]2800008E0000  <1> 		dw handled4,NEW_CODE_SEL,0x8E00,0 ;IRQ 12
   741 00000657 [8203]2800008E0000  <1> 		dw handled4,NEW_CODE_SEL,0x8E00,0 ;IRQ 13
   742 0000065F [8203]2800008E0000  <1> 		dw handled4,NEW_CODE_SEL,0x8E00,0 ;IRQ 14
   743 00000667 [8203]2800008E0000  <1> 		dw handled4,NEW_CODE_SEL,0x8E00,0 ;IRQ 15
   744                              <1> ;This brings me up to 0x50
   745                              <1> %assign i 0x50
   746                              <1> %rep 176
   747                              <1> 		dw handled, NEW_CODE_SEL,0x8E00,0
   748                              <1> 		;dw unhand + i*12, NEW_CODE_SEL,0x8E00,0
   749                              <1> %assign i +1
   750                              <1> %endrep
   751 0000066F [7B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   752                              <2> 
   753                              <2> %assign i +1
   754 00000677 [7B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   755                              <2> 
   756                              <2> %assign i +1
   757 0000067F [7B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   758                              <2> 
   759                              <2> %assign i +1
   760 00000687 [7B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   761                              <2> 
   762                              <2> %assign i +1
   763 0000068F [7B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   764                              <2> 
   765                              <2> %assign i +1
   766 00000697 [7B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   767                              <2> 
   768                              <2> %assign i +1
   769 0000069F [7B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   770                              <2> 
   771                              <2> %assign i +1
   772 000006A7 [7B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   773                              <2> 
   774                              <2> %assign i +1
   775 000006AF [7B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   776                              <2> 
   777                              <2> %assign i +1
   778 000006B7 [7B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   779                              <2> 
   780                              <2> %assign i +1
   781 000006BF [7B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   782                              <2> 
   783                              <2> %assign i +1
   784 000006C7 [7B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   785                              <2> 
   786                              <2> %assign i +1
   787 000006CF [7B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   788                              <2> 
   789                              <2> %assign i +1
   790 000006D7 [7B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   791                              <2> 
   792                              <2> %assign i +1
   793 000006DF [7B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   794                              <2> 
   795                              <2> %assign i +1
   796 000006E7 [7B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   797                              <2> 
   798                              <2> %assign i +1
   799 000006EF [7B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   800                              <2> 
   801                              <2> %assign i +1
   802 000006F7 [7B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   803                              <2> 
   804                              <2> %assign i +1
   805 000006FF [7B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   806                              <2> 
   807                              <2> %assign i +1
   808 00000707 [7B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   809                              <2> 
   810                              <2> %assign i +1
   811 0000070F [7B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   812                              <2> 
   813                              <2> %assign i +1
   814 00000717 [7B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   815                              <2> 
   816                              <2> %assign i +1
   817 0000071F [7B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   818                              <2> 
   819                              <2> %assign i +1
   820 00000727 [7B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   821                              <2> 
   822                              <2> %assign i +1
   823 0000072F [7B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   824                              <2> 
   825                              <2> %assign i +1
   826 00000737 [7B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   827                              <2> 
   828                              <2> %assign i +1
   829 0000073F [7B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   830                              <2> 
   831                              <2> %assign i +1
   832 00000747 [7B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   833                              <2> 
   834                              <2> %assign i +1
   835 0000074F [7B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   836                              <2> 
   837                              <2> %assign i +1
   838 00000757 [7B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   839                              <2> 
   840                              <2> %assign i +1
   841 0000075F [7B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   842                              <2> 
   843                              <2> %assign i +1
   844 00000767 [7B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   845                              <2> 
   846                              <2> %assign i +1
   847 0000076F [7B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   848                              <2> 
   849                              <2> %assign i +1
   850 00000777 [7B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   851                              <2> 
   852                              <2> %assign i +1
   853 0000077F [7B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   854                              <2> 
   855                              <2> %assign i +1
   856 00000787 [7B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   857                              <2> 
   858                              <2> %assign i +1
   859 0000078F [7B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   860                              <2> 
   861                              <2> %assign i +1
   862 00000797 [7B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   863                              <2> 
   864                              <2> %assign i +1
   865 0000079F [7B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   866                              <2> 
   867                              <2> %assign i +1
   868 000007A7 [7B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   869                              <2> 
   870                              <2> %assign i +1
   871 000007AF [7B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   872                              <2> 
   873                              <2> %assign i +1
   874 000007B7 [7B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   875                              <2> 
   876                              <2> %assign i +1
   877 000007BF [7B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   878                              <2> 
   879                              <2> %assign i +1
   880 000007C7 [7B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   881                              <2> 
   882                              <2> %assign i +1
   883 000007CF [7B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   884                              <2> 
   885                              <2> %assign i +1
   886 000007D7 [7B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   887                              <2> 
   888                              <2> %assign i +1
   889 000007DF [7B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   890                              <2> 
   891                              <2> %assign i +1
   892 000007E7 [7B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   893                              <2> 
   894                              <2> %assign i +1
   895 000007EF [7B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   896                              <2> 
   897                              <2> %assign i +1
   898 000007F7 [7B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   899                              <2> 
   900                              <2> %assign i +1
   901 000007FF [7B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   902                              <2> 
   903                              <2> %assign i +1
   904 00000807 [7B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   905                              <2> 
   906                              <2> %assign i +1
   907 0000080F [7B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   908                              <2> 
   909                              <2> %assign i +1
   910 00000817 [7B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   911                              <2> 
   912                              <2> %assign i +1
   913 0000081F [7B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   914                              <2> 
   915                              <2> %assign i +1
   916 00000827 [7B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   917                              <2> 
   918                              <2> %assign i +1
   919 0000082F [7B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   920                              <2> 
   921                              <2> %assign i +1
   922 00000837 [7B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   923                              <2> 
   924                              <2> %assign i +1
   925 0000083F [7B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   926                              <2> 
   927                              <2> %assign i +1
   928 00000847 [7B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   929                              <2> 
   930                              <2> %assign i +1
   931 0000084F [7B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   932                              <2> 
   933                              <2> %assign i +1
   934 00000857 [7B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   935                              <2> 
   936                              <2> %assign i +1
   937 0000085F [7B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   938                              <2> 
   939                              <2> %assign i +1
   940 00000867 [7B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   941                              <2> 
   942                              <2> %assign i +1
   943 0000086F [7B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   944                              <2> 
   945                              <2> %assign i +1
   946 00000877 [7B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   947                              <2> 
   948                              <2> %assign i +1
   949 0000087F [7B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   950                              <2> 
   951                              <2> %assign i +1
   952 00000887 [7B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   953                              <2> 
   954                              <2> %assign i +1
   955 0000088F [7B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   956                              <2> 
   957                              <2> %assign i +1
   958 00000897 [7B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   959                              <2> 
   960                              <2> %assign i +1
   961 0000089F [7B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   962                              <2> 
   963                              <2> %assign i +1
   964 000008A7 [7B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   965                              <2> 
   966                              <2> %assign i +1
   967 000008AF [7B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   968                              <2> 
   969                              <2> %assign i +1
   970 000008B7 [7B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   971                              <2> 
   972                              <2> %assign i +1
   973 000008BF [7B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   974                              <2> 
   975                              <2> %assign i +1
   976 000008C7 [7B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   977                              <2> 
   978                              <2> %assign i +1
   979 000008CF [7B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   980                              <2> 
   981                              <2> %assign i +1
   982 000008D7 [7B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   983                              <2> 
   984                              <2> %assign i +1
   985 000008DF [7B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   986                              <2> 
   987                              <2> %assign i +1
   988 000008E7 [7B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   989                              <2> 
   990                              <2> %assign i +1
   991 000008EF [7B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   992                              <2> 
   993                              <2> %assign i +1
   994 000008F7 [7B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   995                              <2> 
   996                              <2> %assign i +1
   997 000008FF [7B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   998                              <2> 
   999                              <2> %assign i +1
  1000 00000907 [7B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1001                              <2> 
  1002                              <2> %assign i +1
  1003 0000090F [7B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1004                              <2> 
  1005                              <2> %assign i +1
  1006 00000917 [7B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1007                              <2> 
  1008                              <2> %assign i +1
  1009 0000091F [7B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1010                              <2> 
  1011                              <2> %assign i +1
  1012 00000927 [7B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1013                              <2> 
  1014                              <2> %assign i +1
  1015 0000092F [7B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1016                              <2> 
  1017                              <2> %assign i +1
  1018 00000937 [7B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1019                              <2> 
  1020                              <2> %assign i +1
  1021 0000093F [7B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1022                              <2> 
  1023                              <2> %assign i +1
  1024 00000947 [7B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1025                              <2> 
  1026                              <2> %assign i +1
  1027 0000094F [7B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1028                              <2> 
  1029                              <2> %assign i +1
  1030 00000957 [7B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1031                              <2> 
  1032                              <2> %assign i +1
  1033 0000095F [7B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1034                              <2> 
  1035                              <2> %assign i +1
  1036 00000967 [7B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1037                              <2> 
  1038                              <2> %assign i +1
  1039 0000096F [7B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1040                              <2> 
  1041                              <2> %assign i +1
  1042 00000977 [7B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1043                              <2> 
  1044                              <2> %assign i +1
  1045 0000097F [7B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1046                              <2> 
  1047                              <2> %assign i +1
  1048 00000987 [7B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1049                              <2> 
  1050                              <2> %assign i +1
  1051 0000098F [7B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1052                              <2> 
  1053                              <2> %assign i +1
  1054 00000997 [7B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1055                              <2> 
  1056                              <2> %assign i +1
  1057 0000099F [7B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1058                              <2> 
  1059                              <2> %assign i +1
  1060 000009A7 [7B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1061                              <2> 
  1062                              <2> %assign i +1
  1063 000009AF [7B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1064                              <2> 
  1065                              <2> %assign i +1
  1066 000009B7 [7B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1067                              <2> 
  1068                              <2> %assign i +1
  1069 000009BF [7B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1070                              <2> 
  1071                              <2> %assign i +1
  1072 000009C7 [7B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1073                              <2> 
  1074                              <2> %assign i +1
  1075 000009CF [7B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1076                              <2> 
  1077                              <2> %assign i +1
  1078 000009D7 [7B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1079                              <2> 
  1080                              <2> %assign i +1
  1081 000009DF [7B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1082                              <2> 
  1083                              <2> %assign i +1
  1084 000009E7 [7B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1085                              <2> 
  1086                              <2> %assign i +1
  1087 000009EF [7B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1088                              <2> 
  1089                              <2> %assign i +1
  1090 000009F7 [7B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1091                              <2> 
  1092                              <2> %assign i +1
  1093 000009FF [7B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1094                              <2> 
  1095                              <2> %assign i +1
  1096 00000A07 [7B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1097                              <2> 
  1098                              <2> %assign i +1
  1099 00000A0F [7B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1100                              <2> 
  1101                              <2> %assign i +1
  1102 00000A17 [7B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1103                              <2> 
  1104                              <2> %assign i +1
  1105 00000A1F [7B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1106                              <2> 
  1107                              <2> %assign i +1
  1108 00000A27 [7B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1109                              <2> 
  1110                              <2> %assign i +1
  1111 00000A2F [7B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1112                              <2> 
  1113                              <2> %assign i +1
  1114 00000A37 [7B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1115                              <2> 
  1116                              <2> %assign i +1
  1117 00000A3F [7B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1118                              <2> 
  1119                              <2> %assign i +1
  1120 00000A47 [7B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1121                              <2> 
  1122                              <2> %assign i +1
  1123 00000A4F [7B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1124                              <2> 
  1125                              <2> %assign i +1
  1126 00000A57 [7B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1127                              <2> 
  1128                              <2> %assign i +1
  1129 00000A5F [7B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1130                              <2> 
  1131                              <2> %assign i +1
  1132 00000A67 [7B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1133                              <2> 
  1134                              <2> %assign i +1
  1135 00000A6F [7B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1136                              <2> 
  1137                              <2> %assign i +1
  1138 00000A77 [7B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1139                              <2> 
  1140                              <2> %assign i +1
  1141 00000A7F [7B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1142                              <2> 
  1143                              <2> %assign i +1
  1144 00000A87 [7B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1145                              <2> 
  1146                              <2> %assign i +1
  1147 00000A8F [7B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1148                              <2> 
  1149                              <2> %assign i +1
  1150 00000A97 [7B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1151                              <2> 
  1152                              <2> %assign i +1
  1153 00000A9F [7B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1154                              <2> 
  1155                              <2> %assign i +1
  1156 00000AA7 [7B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1157                              <2> 
  1158                              <2> %assign i +1
  1159 00000AAF [7B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1160                              <2> 
  1161                              <2> %assign i +1
  1162 00000AB7 [7B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1163                              <2> 
  1164                              <2> %assign i +1
  1165 00000ABF [7B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1166                              <2> 
  1167                              <2> %assign i +1
  1168 00000AC7 [7B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1169                              <2> 
  1170                              <2> %assign i +1
  1171 00000ACF [7B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1172                              <2> 
  1173                              <2> %assign i +1
  1174 00000AD7 [7B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1175                              <2> 
  1176                              <2> %assign i +1
  1177 00000ADF [7B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1178                              <2> 
  1179                              <2> %assign i +1
  1180 00000AE7 [7B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1181                              <2> 
  1182                              <2> %assign i +1
  1183 00000AEF [7B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1184                              <2> 
  1185                              <2> %assign i +1
  1186 00000AF7 [7B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1187                              <2> 
  1188                              <2> %assign i +1
  1189 00000AFF [7B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1190                              <2> 
  1191                              <2> %assign i +1
  1192 00000B07 [7B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1193                              <2> 
  1194                              <2> %assign i +1
  1195 00000B0F [7B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1196                              <2> 
  1197                              <2> %assign i +1
  1198 00000B17 [7B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1199                              <2> 
  1200                              <2> %assign i +1
  1201 00000B1F [7B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1202                              <2> 
  1203                              <2> %assign i +1
  1204 00000B27 [7B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1205                              <2> 
  1206                              <2> %assign i +1
  1207 00000B2F [7B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1208                              <2> 
  1209                              <2> %assign i +1
  1210 00000B37 [7B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1211                              <2> 
  1212                              <2> %assign i +1
  1213 00000B3F [7B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1214                              <2> 
  1215                              <2> %assign i +1
  1216 00000B47 [7B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1217                              <2> 
  1218                              <2> %assign i +1
  1219 00000B4F [7B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1220                              <2> 
  1221                              <2> %assign i +1
  1222 00000B57 [7B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1223                              <2> 
  1224                              <2> %assign i +1
  1225 00000B5F [7B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1226                              <2> 
  1227                              <2> %assign i +1
  1228 00000B67 [7B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1229                              <2> 
  1230                              <2> %assign i +1
  1231 00000B6F [7B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1232                              <2> 
  1233                              <2> %assign i +1
  1234 00000B77 [7B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1235                              <2> 
  1236                              <2> %assign i +1
  1237 00000B7F [7B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1238                              <2> 
  1239                              <2> %assign i +1
  1240 00000B87 [7B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1241                              <2> 
  1242                              <2> %assign i +1
  1243 00000B8F [7B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1244                              <2> 
  1245                              <2> %assign i +1
  1246 00000B97 [7B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1247                              <2> 
  1248                              <2> %assign i +1
  1249 00000B9F [7B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1250                              <2> 
  1251                              <2> %assign i +1
  1252 00000BA7 [7B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1253                              <2> 
  1254                              <2> %assign i +1
  1255 00000BAF [7B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1256                              <2> 
  1257                              <2> %assign i +1
  1258 00000BB7 [7B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1259                              <2> 
  1260                              <2> %assign i +1
  1261 00000BBF [7B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1262                              <2> 
  1263                              <2> %assign i +1
  1264 00000BC7 [7B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1265                              <2> 
  1266                              <2> %assign i +1
  1267 00000BCF [7B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1268                              <2> 
  1269                              <2> %assign i +1
  1270 00000BD7 [7B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1271                              <2> 
  1272                              <2> %assign i +1
  1273 00000BDF [7B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1274                              <2> 
  1275                              <2> %assign i +1
  1276 00000BE7 [7B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1277                              <2> 
  1278                              <2> %assign i +1
  1279                              <1> idt_end:
  1280                              <1> [BITS 32]
  1281                                  	%include "source/realmode.asm"
  1282                              <1> realmode:	;make sure the real mode program's address is in realmodeptr 
  1283                              <1> 			;and the return address is in realmodereturn
  1284 00000BEF FA                  <1> 	cli
  1285 00000BF0 A3[020D0000]        <1> 	mov [realmodeeax], eax
  1286 00000BF5 891D[FE0C0000]      <1> 	mov [realmodeebx], ebx
  1287 00000BFB 8925[F00C0000]      <1> 	mov [pmodeesp], esp
  1288                              <1> 
  1289 00000C01 BB[FA0C0000]        <1> 	mov ebx, cr0old
  1290                              <1> rmcopytofirstmbyte:
  1291 00000C06 8B03                <1> 	mov eax, [ebx]
  1292 00000C08 658903              <1> 	mov [gs:ebx], eax
  1293 00000C0B 81C304000000        <1> 	add ebx, 4
  1294 00000C11 81FB[0A0D0000]      <1> 	cmp ebx, realmodeptr
  1295 00000C17 76ED                <1> 	jbe rmcopytofirstmbyte
  1296                              <1> 
  1297 00000C19 EA[200C0000]3800    <1> 	jmp V8086_CODE_SEL:protected16bit
  1298                              <1> 
  1299                              <1> [BITS 16]
  1300                              <1> protected16bit:
  1301 00000C20 B84000              <1> 	mov ax, V8086_DATA_SEL
  1302 00000C23 8ED8                <1> 	mov ds, ax
  1303 00000C25 8EC0                <1> 	mov es, ax
  1304 00000C27 8EE0                <1> 	mov fs, ax
  1305 00000C29 8EE8                <1> 	mov gs, ax
  1306 00000C2B 8ED0                <1> 	mov ss, ax
  1307 00000C2D 66BC[CAB00000]      <1> 	mov esp, stackend
  1308 00000C33 0F20C0              <1> 	mov eax, cr0
  1309 00000C36 66A3[FA0C]          <1> 	mov [cr0old], eax
  1310 00000C3A 6625FEFFFF7F        <1> 	and eax, 0x7FFFFFFE
  1311 00000C40 0F22C0              <1> 	mov cr0, eax	;now in real mode
  1312 00000C43 EA[480C]0010        <1> 	jmp 0x1000:inrealmode
  1313                              <1> 
  1314                              <1> inrealmode:
  1315 00000C48 8CC8                <1> 	mov ax, cs
  1316 00000C4A 8ED8                <1> 	mov ds, ax
  1317 00000C4C 8EC0                <1> 	mov es, ax
  1318 00000C4E 8EE0                <1> 	mov fs, ax
  1319 00000C50 8EE8                <1> 	mov gs, ax
  1320 00000C52 8ED0                <1> 	mov ss, ax
  1321 00000C54 BC[CAB0]            <1> 	mov sp, stackend ;because this is at 0x1000: and not 0x10000: it works
  1322                              <1> 	
  1323 00000C57 B011                <1> 	mov al, 0x11
  1324 00000C59 E620                <1> 	out 0x20, al
  1325 00000C5B E6A0                <1> 	out 0xA0, al
  1326 00000C5D B008                <1> 	mov al, 0x8		;interrupt for master
  1327 00000C5F E621                <1> 	out 0x21, al
  1328 00000C61 B070                <1> 	mov al, 0x70	;interrupt for slave
  1329 00000C63 E6A1                <1> 	out 0xA1, al
  1330 00000C65 B004                <1> 	mov al, 4
  1331 00000C67 E621                <1> 	out 0x21, al
  1332 00000C69 B002                <1> 	mov al, 2
  1333 00000C6B E6A1                <1> 	out 0xA1, al
  1334 00000C6D B001                <1> 	mov al, 0x1
  1335 00000C6F E621                <1> 	out 0x21, al
  1336 00000C71 B001                <1> 	mov al, 0x1
  1337 00000C73 E6A1                <1> 	out 0xA1, al
  1338                              <1> 	
  1339 00000C75 0F011E[F40C]        <1> 	lidt [idt_real]
  1340 00000C7A FB                  <1> 	sti
  1341                              <1> 
  1342 00000C7B 66A1[020D]          <1> 	mov eax, [realmodeeax]
  1343 00000C7F 668B1E[FE0C]        <1> 	mov ebx, [realmodeebx]
  1344                              <1> 
  1345 00000C84 FF16[0A0D]          <1> 	call word [realmodeptr] ;call the real mode program here
  1346                              <1> 
  1347 00000C88 66A3[020D]          <1> 	mov [realmodeeax], eax
  1348 00000C8C 66891E[FE0C]        <1> 	mov [realmodeebx], ebx
  1349                              <1> 
  1350 00000C91 FA                  <1> 	cli
  1351 00000C92 0F0116[8B03]        <1> 	lgdt [gdtr]
  1352 00000C97 0F011E[9103]        <1> 	lidt [idtr]
  1353 00000C9C 0F20C0              <1> 	mov eax, cr0
  1354 00000C9F 0C01                <1> 	or al, 1
  1355 00000CA1 0F22C0              <1> 	mov cr0,eax
  1356 00000CA4 EA[A90C]2800        <1> 	jmp NEW_CODE_SEL:returntopmode
  1357                              <1> 
  1358                              <1> [BITS 32]
  1359                              <1> returntopmode:
  1360 00000CA9 66B83000            <1> 	mov ax, NEW_DATA_SEL
  1361 00000CAD 8ED8                <1> 	mov ds, ax
  1362 00000CAF 8EC0                <1> 	mov es, ax
  1363 00000CB1 8EE0                <1> 	mov fs, ax
  1364 00000CB3 8ED0                <1> 	mov ss, ax
  1365 00000CB5 8B25[F00C0000]      <1> 	mov esp, [pmodeesp]
  1366 00000CBB 66B82000            <1> 	mov ax, SYS_DATA_SEL
  1367 00000CBF 8EE8                <1> 	mov gs, ax
  1368                              <1> 
  1369 00000CC1 BB[FA0C0000]        <1> 	mov ebx, cr0old
  1370                              <1> rmcopyfromfirstmbyte:
  1371 00000CC6 658B03              <1> 	mov eax, [gs:ebx]
  1372 00000CC9 8903                <1> 	mov [ebx], eax
  1373 00000CCB 81C304000000        <1> 	add ebx, 4
  1374 00000CD1 81FB[0A0D0000]      <1> 	cmp ebx, realmodeptr
  1375 00000CD7 76ED                <1> 	jbe rmcopyfromfirstmbyte
  1376                              <1> 
  1377 00000CD9 E893520000          <1> 	call initialize.pic ;reset irq's and masks
  1378 00000CDE FB                  <1> 	sti
  1379 00000CDF A1[020D0000]        <1> 	mov eax, [realmodeeax]
  1380 00000CE4 8B1D[FE0C0000]      <1> 	mov ebx, [realmodeebx]
  1381 00000CEA FF25[060D0000]      <1> 	jmp dword [realmodereturn]
  1382                              <1> 	
  1383 00000CF0 00000000            <1> pmodeesp dd 0
  1384                              <1> idt_real:
  1385 00000CF4 FF03                <1> 	dw 0x3FF
  1386 00000CF6 00000000            <1> 	dd 0
  1387 00000CFA 00000000            <1> cr0old dd 0
  1388 00000CFE 00000000            <1> realmodeebx dd 0
  1389 00000D02 00000000            <1> realmodeeax dd 0
  1390 00000D06 00000000            <1> realmodereturn dd 0
  1391 00000D0A 0000                <1> realmodeptr dw 0
  1392 00000D0C 00000000            <1> dd 0 ;make sure the copy thing doesnt overflow
  1393                                  [BITS 32]
  1394                                      %include "source/exception.asm"
  1395                              <1> %ifdef exceptions.included
  1396                              <1> unhand:	
  1397                              <1> 	%assign i 0
  1398                              <1> 	%rep 32
  1399                              <1> 	mov byte [intprob], i
  1400                              <1> 	jmp unhand2
  1401                              <1> 	%assign i i+1
  1402                              <1> 	%endrep
  1403 00000D10 C605[C2110000]00    <2>  mov byte [intprob], i
  1404 00000D17 E974010000          <2>  jmp unhand2
  1405                              <2>  %assign i i+1
  1406 00000D1C C605[C2110000]01    <2>  mov byte [intprob], i
  1407 00000D23 E968010000          <2>  jmp unhand2
  1408                              <2>  %assign i i+1
  1409 00000D28 C605[C2110000]02    <2>  mov byte [intprob], i
  1410 00000D2F E95C010000          <2>  jmp unhand2
  1411                              <2>  %assign i i+1
  1412 00000D34 C605[C2110000]03    <2>  mov byte [intprob], i
  1413 00000D3B E950010000          <2>  jmp unhand2
  1414                              <2>  %assign i i+1
  1415 00000D40 C605[C2110000]04    <2>  mov byte [intprob], i
  1416 00000D47 E944010000          <2>  jmp unhand2
  1417                              <2>  %assign i i+1
  1418 00000D4C C605[C2110000]05    <2>  mov byte [intprob], i
  1419 00000D53 E938010000          <2>  jmp unhand2
  1420                              <2>  %assign i i+1
  1421 00000D58 C605[C2110000]06    <2>  mov byte [intprob], i
  1422 00000D5F E92C010000          <2>  jmp unhand2
  1423                              <2>  %assign i i+1
  1424 00000D64 C605[C2110000]07    <2>  mov byte [intprob], i
  1425 00000D6B E920010000          <2>  jmp unhand2
  1426                              <2>  %assign i i+1
  1427 00000D70 C605[C2110000]08    <2>  mov byte [intprob], i
  1428 00000D77 E914010000          <2>  jmp unhand2
  1429                              <2>  %assign i i+1
  1430 00000D7C C605[C2110000]09    <2>  mov byte [intprob], i
  1431 00000D83 E908010000          <2>  jmp unhand2
  1432                              <2>  %assign i i+1
  1433 00000D88 C605[C2110000]0A    <2>  mov byte [intprob], i
  1434 00000D8F E9FC000000          <2>  jmp unhand2
  1435                              <2>  %assign i i+1
  1436 00000D94 C605[C2110000]0B    <2>  mov byte [intprob], i
  1437 00000D9B E9F0000000          <2>  jmp unhand2
  1438                              <2>  %assign i i+1
  1439 00000DA0 C605[C2110000]0C    <2>  mov byte [intprob], i
  1440 00000DA7 E9E4000000          <2>  jmp unhand2
  1441                              <2>  %assign i i+1
  1442 00000DAC C605[C2110000]0D    <2>  mov byte [intprob], i
  1443 00000DB3 E9D8000000          <2>  jmp unhand2
  1444                              <2>  %assign i i+1
  1445 00000DB8 C605[C2110000]0E    <2>  mov byte [intprob], i
  1446 00000DBF E9CC000000          <2>  jmp unhand2
  1447                              <2>  %assign i i+1
  1448 00000DC4 C605[C2110000]0F    <2>  mov byte [intprob], i
  1449 00000DCB E9C0000000          <2>  jmp unhand2
  1450                              <2>  %assign i i+1
  1451 00000DD0 C605[C2110000]10    <2>  mov byte [intprob], i
  1452 00000DD7 E9B4000000          <2>  jmp unhand2
  1453                              <2>  %assign i i+1
  1454 00000DDC C605[C2110000]11    <2>  mov byte [intprob], i
  1455 00000DE3 E9A8000000          <2>  jmp unhand2
  1456                              <2>  %assign i i+1
  1457 00000DE8 C605[C2110000]12    <2>  mov byte [intprob], i
  1458 00000DEF E99C000000          <2>  jmp unhand2
  1459                              <2>  %assign i i+1
  1460 00000DF4 C605[C2110000]13    <2>  mov byte [intprob], i
  1461 00000DFB E990000000          <2>  jmp unhand2
  1462                              <2>  %assign i i+1
  1463 00000E00 C605[C2110000]14    <2>  mov byte [intprob], i
  1464 00000E07 E984000000          <2>  jmp unhand2
  1465                              <2>  %assign i i+1
  1466 00000E0C C605[C2110000]15    <2>  mov byte [intprob], i
  1467 00000E13 E978000000          <2>  jmp unhand2
  1468                              <2>  %assign i i+1
  1469 00000E18 C605[C2110000]16    <2>  mov byte [intprob], i
  1470 00000E1F E96C000000          <2>  jmp unhand2
  1471                              <2>  %assign i i+1
  1472 00000E24 C605[C2110000]17    <2>  mov byte [intprob], i
  1473 00000E2B E960000000          <2>  jmp unhand2
  1474                              <2>  %assign i i+1
  1475 00000E30 C605[C2110000]18    <2>  mov byte [intprob], i
  1476 00000E37 E954000000          <2>  jmp unhand2
  1477                              <2>  %assign i i+1
  1478 00000E3C C605[C2110000]19    <2>  mov byte [intprob], i
  1479 00000E43 E948000000          <2>  jmp unhand2
  1480                              <2>  %assign i i+1
  1481 00000E48 C605[C2110000]1A    <2>  mov byte [intprob], i
  1482 00000E4F E93C000000          <2>  jmp unhand2
  1483                              <2>  %assign i i+1
  1484 00000E54 C605[C2110000]1B    <2>  mov byte [intprob], i
  1485 00000E5B E930000000          <2>  jmp unhand2
  1486                              <2>  %assign i i+1
  1487 00000E60 C605[C2110000]1C    <2>  mov byte [intprob], i
  1488 00000E67 E924000000          <2>  jmp unhand2
  1489                              <2>  %assign i i+1
  1490 00000E6C C605[C2110000]1D    <2>  mov byte [intprob], i
  1491 00000E73 E918000000          <2>  jmp unhand2
  1492                              <2>  %assign i i+1
  1493 00000E78 C605[C2110000]1E    <2>  mov byte [intprob], i
  1494 00000E7F E90C000000          <2>  jmp unhand2
  1495                              <2>  %assign i i+1
  1496 00000E84 C605[C2110000]1F    <2>  mov byte [intprob], i
  1497 00000E8B E900000000          <2>  jmp unhand2
  1498                              <2>  %assign i i+1
  1499                              <1> unhand2:
  1500 00000E90 FA                  <1> 	cli
  1501 00000E91 1E                  <1> 	push ds
  1502 00000E92 06                  <1> 	push es
  1503 00000E93 0FA0                <1> 	push fs
  1504 00000E95 0FA8                <1> 	push gs
  1505 00000E97 16                  <1> 	push ss
  1506 00000E98 60                  <1> 	pushad
  1507                              <1> %ifdef gui.included
  1508 00000E99 803D[E49E0000]00    <1> 	cmp byte [guion], 0
  1509 00000EA0 0F8432000000        <1> 	je near noguiunhandstuff
  1510 00000EA6 66C705[BC110000]08- <1> 	mov word [locunhandy], 8
  1511 00000EAE 00                  <1>
  1512 00000EAF 66C705[BE110000]08- <1> 	mov word [locunhandx], 8
  1513 00000EB7 00                  <1>
  1514 00000EB8 668B1D[FD6A0000]    <1> 	mov bx, [background]
  1515 00000EBF 66891D[C0110000]    <1> 	mov [backgroundcache], bx
  1516 00000EC6 C605[20560000]01    <1> 	mov byte [mousedisabled],1
  1517 00000ECD 66BB00F8            <1> 	mov bx, 1111100000000000b
  1518 00000ED1 66891D[FD6A0000]    <1> 	mov [background], bx
  1519                              <1> noguiunhandstuff:
  1520                              <1> %endif
  1521 00000ED8 89E6                <1> 	mov esi, esp
  1522 00000EDA 8935[B0110000]      <1> 	mov [espfirst], esi
  1523 00000EE0 81C6BC000000        <1> 	add esi, ((unhndrgend - unhndrg)/15)*4
  1524 00000EE6 8935[AC110000]      <1> 	mov [esploc], esi
  1525 00000EEC BE[D1110000]        <1> 	mov esi, unhandmsg
  1526 00000EF1 8935[B4110000]      <1> 	mov [esiloc], esi
  1527 00000EF7 31C9                <1> 	xor ecx, ecx
  1528 00000EF9 8A0D[C2110000]      <1> 	mov cl, [intprob]
  1529 00000EFF BB[A0150000]        <1> 	mov ebx, errortypes
  1530 00000F04 C1E102              <1> 	shl ecx, 2
  1531 00000F07 01CB                <1> 	add ebx, ecx
  1532 00000F09 81FB[E0150000]      <1> 	cmp ebx, errortypesend
  1533 00000F0F 7205                <1> 	jb gooderrortype
  1534 00000F11 BB[E0150000]        <1> 	mov ebx, errortypesend
  1535                              <1> gooderrortype:
  1536 00000F16 8B33                <1> 	mov esi, [ebx]
  1537                              <1> %ifdef gui.included
  1538 00000F18 803D[E49E0000]00    <1> 	cmp byte [guion], 0
  1539 00000F1F 0F842D000000        <1> 	je near errortext
  1540 00000F25 668B0D[BC110000]    <1> 	mov cx, [locunhandy]
  1541 00000F2C 668B15[BE110000]    <1> 	mov dx, [locunhandx]
  1542 00000F33 66B80100            <1> 	mov ax, 1
  1543 00000F37 6631DB              <1> 	xor bx, bx
  1544 00000F3A E888610000          <1> 	call showstring2
  1545 00000F3F 66890D[BC110000]    <1> 	mov [locunhandy], cx
  1546 00000F46 668915[BE110000]    <1> 	mov [locunhandx], dx
  1547 00000F4D E905000000          <1> 	jmp errortextdone
  1548                              <1> %endif
  1549                              <1> errortext:
  1550 00000F52 E8E40D0000          <1> 	call print		;;get the error message and print it
  1551                              <1> errortextdone:
  1552 00000F57 31C9                <1> 	xor ecx, ecx
  1553 00000F59 8A0D[C2110000]      <1> 	mov cl, [intprob]
  1554 00000F5F E8E1010000          <1> 	call expdump
  1555                              <1> dumpstack:
  1556 00000F64 8B35[AC110000]      <1> 	mov esi, [esploc]
  1557 00000F6A 39E6                <1> 	cmp esi, esp
  1558 00000F6C 7216                <1> 	jb donedump
  1559 00000F6E 368B0E              <1> 	mov ecx, [ss:esi]
  1560 00000F71 81EE04000000        <1> 	sub esi, 4
  1561 00000F77 8935[AC110000]      <1> 	mov [esploc], esi
  1562 00000F7D E8C3010000          <1> 	call expdump
  1563 00000F82 EBE0                <1> 	jmp dumpstack
  1564                              <1> donedump:
  1565 00000F84 0F20C1              <1> 	mov ecx, cr0
  1566 00000F87 E8B9010000          <1> 	call expdump
  1567 00000F8C 0F20D1              <1> 	mov ecx, cr2
  1568 00000F8F E8B1010000          <1> 	call expdump
  1569 00000F94 0F20D9              <1> 	mov ecx, cr3
  1570 00000F97 E8A9010000          <1> 	call expdump
  1571 00000F9C 0F20E1              <1> 	mov ecx, cr4
  1572 00000F9F E8A1010000          <1> 	call expdump
  1573 00000FA4 0F00C9              <1> 	str ecx
  1574 00000FA7 E899010000          <1> 	call expdump
  1575 00000FAC 0F010D[CB110000]    <1> 	sidt [igdtcache]
  1576 00000FB3 8B0D[CD110000]      <1> 	mov ecx, [igdtcache + 2]
  1577 00000FB9 E887010000          <1> 	call expdump
  1578 00000FBE 0F0105[CB110000]    <1> 	sgdt [igdtcache]
  1579 00000FC5 8B0D[CD110000]      <1> 	mov ecx, [igdtcache + 2]
  1580 00000FCB E875010000          <1> 	call expdump
  1581 00000FD0 0F00C1              <1> 	sldt ecx
  1582 00000FD3 E86D010000          <1> 	call expdump
  1583 00000FD8 8B35[AC110000]      <1> 	mov esi, [esploc]
  1584 00000FDE 368B7C2434          <1> 	mov edi, [ss:esp + 52]
  1585 00000FE3 81C710000000        <1> 	add edi, 16
  1586 00000FE9 893D[C7110000]      <1> 	mov [codelocend], edi
  1587 00000FEF 81EF20000000        <1> 	sub edi, 32
  1588                              <1> dumpcodeloop:
  1589 00000FF5 893D[C3110000]      <1> 	mov [codeloc], edi
  1590 00000FFB 8B0F                <1> 	mov ecx, [edi]
  1591 00000FFD E843010000          <1> 	call expdump
  1592 00001002 8B3D[C3110000]      <1> 	mov edi, [codeloc]
  1593 00001008 81C704000000        <1> 	add edi, 4
  1594 0000100E 3B3D[C7110000]      <1> 	cmp edi, [codelocend]
  1595 00001014 72DF                <1> 	jb dumpcodeloop
  1596 00001016 BE[D6100000]        <1> 	mov esi, backtoosmsg
  1597                              <1> %ifdef gui.included
  1598 0000101B 803D[E49E0000]00    <1> 	cmp byte [guion], 0
  1599 00001022 741F                <1> 	je backtomsg
  1600                              <1> guibacktomsg:
  1601 00001024 668B15[BE110000]    <1> 	mov dx, [locunhandx]
  1602 0000102B 668B0D[BC110000]    <1> 	mov cx, [locunhandy]
  1603 00001032 66B80100            <1> 	mov ax, 1
  1604 00001036 6631DB              <1> 	xor bx, bx
  1605 00001039 E889600000          <1> 	call showstring2
  1606 0000103E E905000000          <1> 	jmp backtomsgdone
  1607                              <1> backtomsg:
  1608                              <1> %endif
  1609 00001043 E8F30C0000          <1> 	call print
  1610                              <1> backtomsgdone:
  1611 00001048 30C0                <1> 	xor al, al
  1612 0000104A E8BF110000          <1> 	call rdcharint
  1613 0000104F 803D[C2110000]03    <1> 	cmp byte [intprob], 3
  1614 00001056 7541                <1> 	jne nodebugint
  1615                              <1> %ifdef gui.included
  1616 00001058 803D[E49E0000]00    <1> 	cmp byte [guion], 0
  1617 0000105F 7427                <1> 	je nodebuggui
  1618 00001061 668B1D[C0110000]    <1> 	mov bx, [backgroundcache]
  1619 00001068 66891D[FD6A0000]    <1> 	mov [background], bx
  1620 0000106F 6631DB              <1> 	xor bx, bx
  1621 00001072 C605[20560000]00    <1> 	mov byte [mousedisabled], 0
  1622 00001079 E8FE590000          <1> 	call guiclear
  1623 0000107E E87E5A0000          <1> 	call reloadallgraphics
  1624 00001083 E82D150000          <1> 	call termcopy
  1625                              <1> nodebuggui:
  1626                              <1> %endif
  1627 00001088 8B35[B0110000]      <1> 	mov esi, [espfirst]
  1628 0000108E 89F4                <1> 	mov esp, esi
  1629 00001090 61                  <1> 	popad
  1630 00001091 17                  <1> 	pop ss
  1631 00001092 0FA9                <1> 	pop gs
  1632 00001094 0FA1                <1> 	pop fs
  1633 00001096 07                  <1> 	pop es
  1634 00001097 1F                  <1> 	pop ds
  1635 00001098 CF                  <1> 	iret
  1636                              <1> nodebugint:
  1637 00001099 61                  <1> 	popad
  1638 0000109A 17                  <1> 	pop ss
  1639 0000109B 0FA9                <1> 	pop gs
  1640 0000109D 0FA1                <1> 	pop fs
  1641 0000109F 07                  <1> 	pop es
  1642 000010A0 1F                  <1> 	pop ds
  1643                              <1> %ifdef gui.included
  1644 000010A1 803D[E49E0000]00    <1> 	cmp byte [guion], 0
  1645 000010A8 7427                <1> 	je returnunhandgui
  1646 000010AA 668B1D[C0110000]    <1> 	mov bx, [backgroundcache]
  1647 000010B1 66891D[FD6A0000]    <1> 	mov [background], bx
  1648 000010B8 6631DB              <1> 	xor bx, bx
  1649 000010BB C605[20560000]00    <1> 	mov byte [mousedisabled], 0
  1650 000010C2 E8B5590000          <1> 	call guiclear
  1651 000010C7 E8355A0000          <1> 	call reloadallgraphics
  1652 000010CC E8E4140000          <1> 	call termcopy
  1653                              <1> %endif
  1654                              <1> returnunhandgui:
  1655 000010D1 E9FB180000          <1> 	jmp nwcmd
  1656 000010D6 506C6561736520706F- <1> backtoosmsg db "Please post any problems in the Issues section at solleros.googlecode.com",10
  1657 000010DF 737420616E79207072- <1>
  1658 000010E8 6F626C656D7320696E- <1>
  1659 000010F1 207468652049737375- <1>
  1660 000010FA 65732073656374696F- <1>
  1661 00001103 6E20617420736F6C6C- <1>
  1662 0000110C 65726F732E676F6F67- <1>
  1663 00001115 6C65636F64652E636F- <1>
  1664 0000111E 6D0A                <1>
  1665 00001120 507265737320616E79- <1> 			db "Press any key to return to SollerOS",10,0
  1666 00001129 206B657920746F2072- <1>
  1667 00001132 657475726E20746F20- <1>
  1668 0000113B 536F6C6C65724F530A- <1>
  1669 00001144 00                  <1>
  1670                              <1> expdump:
  1671 00001145 8B35[B4110000]      <1> 	mov esi, [esiloc]
  1672 0000114B 89F7                <1> 	mov edi, esi
  1673 0000114D 81C70F000000        <1> 	add edi, 15
  1674 00001153 81C604000000        <1> 	add esi, 4
  1675 00001159 893D[B4110000]      <1> 	mov [esiloc], edi
  1676 0000115F 81EF03000000        <1> 	sub edi, 3
  1677 00001165 E8CE1C0000          <1> 	call converthex
  1678 0000116A 81EE04000000        <1> 	sub esi, 4
  1679                              <1> %ifdef gui.included
  1680 00001170 803D[E49E0000]00    <1> 	cmp byte [guion], 0
  1681 00001177 0F8429000000        <1> 	je near expdumptext
  1682 0000117D 668B0D[BC110000]    <1> 	mov cx, [locunhandy]
  1683 00001184 668B15[BE110000]    <1> 	mov dx, [locunhandx]
  1684 0000118B 66B80100            <1> 	mov ax, 1
  1685 0000118F 6631DB              <1> 	xor bx, bx
  1686 00001192 E8305F0000          <1> 	call showstring2
  1687 00001197 66890D[BC110000]    <1> 	mov [locunhandy], cx
  1688 0000119E 668915[BE110000]    <1> 	mov [locunhandx], dx
  1689 000011A5 C3                  <1> 	ret
  1690                              <1> %endif
  1691                              <1> expdumptext:
  1692 000011A6 E8900B0000          <1> 	call print
  1693 000011AB C3                  <1> 	ret
  1694 000011AC 00000000            <1> esploc dd 0
  1695 000011B0 00000000            <1> espfirst dd 0
  1696 000011B4 00000000            <1> esiloc dd 0
  1697 000011B8 00000000            <1> esiregbuf dd 0
  1698 000011BC 0100                <1> locunhandy dw 1
  1699 000011BE 0100                <1> locunhandx dw 1
  1700 000011C0 0000                <1> backgroundcache dw 0
  1701 000011C2 00                  <1> intprob db 0
  1702 000011C3 00000000            <1> codeloc dd 0
  1703 000011C7 00000000            <1> codelocend dd 0
  1704 000011CB 000000000000        <1> igdtcache dw 0,0,0
  1705                              <1> 	unhandmsg:	
  1706 000011D1 494E543D3030303030- <1> 			db "INT=00000000",255,10,0
  1707 000011DA 303030FF0A00        <1>
  1708                              <1> unhndrg:
  1709 000011E0 FFFFFFFF3030303030- <1> 	times 7 db 255,255,255,255,"00000000  ",0	;;this dumps the stack before the stack frame in question
  1710 000011E9 303030202000<rept>  <1>
  1711 00001249 FFFFFFFF3030303030- <1> 			db 255,255,255,255,"00000000",255,10,0
  1712 00001252 303030FF0A00        <1>
  1713 00001258 FFFFFFFF3030303030- <1> 	times 7 db 255,255,255,255,"00000000  ",0	;;this dumps the stack before the stack frame in question
  1714 00001261 303030202000<rept>  <1>
  1715 000012C1 FFFFFFFF3030303030- <1> 			db 255,255,255,255,"00000000",255,10,0
  1716 000012CA 303030FF0A00        <1>
  1717 000012D0 FFFFFFFF3030303030- <1> 	times 7 db 255,255,255,255,"00000000  ",0	;;this dumps the stack before the stack frame in question
  1718 000012D9 303030202000<rept>  <1>
  1719 00001339 FFFFFFFF3030303030- <1> 			db 255,255,255,255,"00000000",255,10,0
  1720 00001342 303030FF0A00        <1>
  1721 00001348 FFFFFFFF3030303030- <1> 	times 7 db 255,255,255,255,"00000000  ",0	;;this dumps the stack before the stack frame in question
  1722 00001351 303030202000<rept>  <1>
  1723 000013B1 FFFFFFFF3030303030- <1> 			db 255,255,255,255,"00000000",255,10,0
  1724 000013BA 303030FF0A00        <1>
  1725                              <1> unhandregs:
  1726 000013C0 45464C3D3030303030- <1> 			db "EFL=00000000  ",0
  1727 000013C9 303030202000        <1>
  1728 000013CF 43533A3D3030303030- <1> 			db "CS:=00000000  ",0
  1729 000013D8 303030202000        <1>
  1730 000013DE 4549503D3030303030- <1> 			db "EIP=00000000",255,10,0
  1731 000013E7 303030FF0A00        <1>
  1732 000013ED 44533A3D3030303030- <1> 			db "DS:=00000000  ",0
  1733 000013F6 303030202000        <1>
  1734 000013FC 45533A3D3030303030- <1> 			db "ES:=00000000  ",0
  1735 00001405 303030202000        <1>
  1736 0000140B 46533A3D3030303030- <1> 			db "FS:=00000000  ",0
  1737 00001414 303030202000        <1>
  1738 0000141A 47533A3D3030303030- <1> 			db "GS:=00000000  ",0
  1739 00001423 303030202000        <1>
  1740 00001429 53533A3D3030303030- <1> 			db "SS:=00000000",255,10,0
  1741 00001432 303030FF0A00        <1>
  1742 00001438 4541583D3030303030- <1> 			db "EAX=00000000  ",0
  1743 00001441 303030202000        <1>
  1744 00001447 4543583D3030303030- <1> 			db "ECX=00000000  ",0
  1745 00001450 303030202000        <1>
  1746 00001456 4544583D3030303030- <1> 			db "EDX=00000000  ",0
  1747 0000145F 303030202000        <1>
  1748 00001465 4542583D3030303030- <1> 			db "EBX=00000000",255,10,0
  1749 0000146E 303030FF0A00        <1>
  1750 00001474 4553503D3030303030- <1> 			db "ESP=00000000  ",0
  1751 0000147D 303030202000        <1>
  1752 00001483 4542503D3030303030- <1> 			db "EBP=00000000  ",0
  1753 0000148C 303030202000        <1>
  1754 00001492 4553493D3030303030- <1> 			db "ESI=00000000  ",0
  1755 0000149B 303030202000        <1>
  1756 000014A1 4544493D3030303030- <1> unhndrgend:	db "EDI=00000000",255,10,0
  1757 000014AA 303030FF0A00        <1>
  1758 000014B0 4352303D3030303030- <1> 			db "CR0=00000000  ",0
  1759 000014B9 303030202000        <1>
  1760 000014BF 4352323D3030303030- <1> 			db "CR2=00000000  ",0
  1761 000014C8 303030202000        <1>
  1762 000014CE 4352333D3030303030- <1> 			db "CR3=00000000  ",0
  1763 000014D7 303030202000        <1>
  1764 000014DD 4352343D3030303030- <1> 			db "CR4=00000000",255,10,0
  1765 000014E6 303030FF0A00        <1>
  1766 000014EC 54523A3D3030303030- <1> 			db "TR:=00000000  ",0
  1767 000014F5 303030202000        <1>
  1768 000014FB 4944543D3030303030- <1> 			db "IDT=00000000  ",0
  1769 00001504 303030202000        <1>
  1770 0000150A 4744543D3030303030- <1> 			db "GDT=00000000  ",0
  1771 00001513 303030202000        <1>
  1772 00001519 4C44543D3030303030- <1> 			db "LDT=00000000",255,10,0
  1773 00001522 303030FF0A00        <1>
  1774 00001528 FFFFFFFF3030303030- <1> unhandcode: times 2 db 255,255,255,255,"00000000  ",0	;;this dumps the code before and after the interrupt in question
  1775 00001531 303030202000<rept>  <1>
  1776 00001546 FFFFFFFF3030303030- <1> 			db 255,255,255,255,"00000000 ",255,0
  1777 0000154F 30303020FF00        <1>
  1778 00001555 FFFFFF5B3030303030- <1> 			db 255,255,255,"[00000000] ",0
  1779 0000155E 3030305D2000        <1>
  1780 00001564 FFFFFFFF3030303030- <1> 			times 3 db 255,255,255,255,"00000000  ",0
  1781 0000156D 303030202000<rept>  <1>
  1782 00001591 FFFFFFFF3030303030- <1> 			db 255,255,255,255,"00000000",255,10,0
  1783 0000159A 303030FF0A00        <1>
  1784                              <1> unhandmsgend:
  1785                              <1> 
  1786                              <1> errortypes:
  1787 000015A0 [E4150000]          <1> 			dd err0
  1788 000015A4 [48160000]          <1> 			dd err1
  1789 000015A8 [A9160000]          <1> 			dd err2
  1790 000015AC [FE160000]          <1> 			dd err3
  1791 000015B0 [62170000]          <1> 			dd err4
  1792 000015B4 [B4170000]          <1> 			dd err5
  1793 000015B8 [1E180000]          <1> 			dd err6
  1794 000015BC [86180000]          <1> 			dd err7
  1795 000015C0 [D0180000]          <1> 			dd err8
  1796 000015C4 [2D190000]          <1> 			dd err9
  1797 000015C8 [86190000]          <1> 			dd err10
  1798 000015CC [D1190000]          <1> 			dd err11
  1799 000015D0 [211A0000]          <1> 			dd err12
  1800 000015D4 [7A1A0000]          <1> 			dd err13
  1801 000015D8 [DD1A0000]          <1> 			dd err14
  1802 000015DC [191B0000]          <1> 			dd err15
  1803                              <1> errortypesend:
  1804 000015E0 [A41B0000]          <1> 			dd unknownerror
  1805                              <1> 			
  1806 000015E4 4469766973696F6E20- <1> err0	db "Division by zero:",10
  1807 000015ED 6279207A65726F3A0A  <1>
  1808 000015F6 546563686E6963616C- <1> 		db "Technically lim a",246,"x = ",236," when a is any real number. Happy Easter!",10
  1809 000015FF 6C79206C696D2061F6- <1>
  1810 00001608 78203D20EC20776865- <1>
  1811 00001611 6E206120697320616E- <1>
  1812 0000161A 79207265616C206E75- <1>
  1813 00001623 6D6265722E20486170- <1>
  1814 0000162C 707920456173746572- <1>
  1815 00001635 210A                <1>
  1816 00001637 202020202020202020- <1> 		db "            x",26,"0",10,0
  1817 00001640 202020781A300A00    <1>
  1818                              <1> 		
  1819 00001648 53696E676C652D7374- <1> err1	db "Single-step/Breakpoint:",10
  1820 00001651 65702F427265616B70- <1>
  1821 0000165A 6F696E743A0A        <1>
  1822 00001660 4120627265616B706F- <1> 		db "A breakpoint fault, breakpoint trap, or single-step trap was triggered.",10,0
  1823 00001669 696E74206661756C74- <1>
  1824 00001672 2C20627265616B706F- <1>
  1825 0000167B 696E7420747261702C- <1>
  1826 00001684 206F722073696E676C- <1>
  1827 0000168D 652D73746570207472- <1>
  1828 00001696 617020776173207472- <1>
  1829 0000169F 696767657265642E0A- <1>
  1830 000016A8 00                  <1>
  1831                              <1> 		
  1832 000016A9 4E6F6E6D61736B6162- <1> err2	db "Nonmaskable interrupt:",10
  1833 000016B2 6C6520696E74657272- <1>
  1834 000016BB 7570743A0A          <1>
  1835 000016C0 412068617264776172- <1> 		db "A hardware interrupt was triggered that could not be masked.",10,0
  1836 000016C9 6520696E7465727275- <1>
  1837 000016D2 707420776173207472- <1>
  1838 000016DB 696767657265642074- <1>
  1839 000016E4 68617420636F756C64- <1>
  1840 000016ED 206E6F74206265206D- <1>
  1841 000016F6 61736B65642E0A00    <1>
  1842                              <1> 		
  1843 000016FE 427265616B706F696E- <1> err3	db "Breakpoint:",10
  1844 00001707 743A0A              <1>
  1845 0000170A 5468697320696E7465- <1> 		db "This interrupt is used in programs to show the stack and registers and can be",10
  1846 00001713 727275707420697320- <1>
  1847 0000171C 7573656420696E2070- <1>
  1848 00001725 726F6772616D732074- <1>
  1849 0000172E 6F2073686F77207468- <1>
  1850 00001737 6520737461636B2061- <1>
  1851 00001740 6E6420726567697374- <1>
  1852 00001749 65727320616E642063- <1>
  1853 00001752 616E2062650A        <1>
  1854 00001758 69676E6F7265642E0A- <1> 		db "ignored.",10,0
  1855 00001761 00                  <1>
  1856                              <1> 		
  1857 00001762 4F766572666C6F773A- <1> err4	db "Overflow:",10
  1858 0000176B 0A                  <1>
  1859 0000176C 5468652070726F6365- <1> 		db "The processor ran into an INTO instruction with the overflow flag set.",10,0
  1860 00001775 73736F722072616E20- <1>
  1861 0000177E 696E746F20616E2049- <1>
  1862 00001787 4E544F20696E737472- <1>
  1863 00001790 756374696F6E207769- <1>
  1864 00001799 746820746865206F76- <1>
  1865 000017A2 6572666C6F7720666C- <1>
  1866 000017AB 6167207365742E0A00  <1>
  1867                              <1> 		
  1868 000017B4 426F756E6473206368- <1> err5	db "Bounds check:",10
  1869 000017BD 65636B3A0A          <1>
  1870 000017C2 5468652070726F6365- <1> 		db "The processor rebounded from a BOUND instruction run on an operand that was out",10
  1871 000017CB 73736F72207265626F- <1>
  1872 000017D4 756E6465642066726F- <1>
  1873 000017DD 6D206120424F554E44- <1>
  1874 000017E6 20696E737472756374- <1>
  1875 000017EF 696F6E2072756E206F- <1>
  1876 000017F8 6E20616E206F706572- <1>
  1877 00001801 616E64207468617420- <1>
  1878 0000180A 776173206F75740A    <1>
  1879 00001812 6F6620626F756E6473- <1> 		db "of bounds.",10,0
  1880 0000181B 2E0A00              <1>
  1881                              <1> 		
  1882 0000181E 496E76616C6964206F- <1> err6	db "Invalid opcode:",10
  1883 00001827 70636F64653A0A      <1>
  1884 0000182E 5468652070726F6365- <1> 		db "The processor has no idea what it was trying to execute. Don't run SSE4 code",10
  1885 00001837 73736F722068617320- <1>
  1886 00001840 6E6F20696465612077- <1>
  1887 00001849 686174206974207761- <1>
  1888 00001852 7320747279696E6720- <1>
  1889 0000185B 746F20657865637574- <1>
  1890 00001864 652E20446F6E277420- <1>
  1891 0000186D 72756E205353453420- <1>
  1892 00001876 636F64650A          <1>
  1893 0000187B 6F6E20343836277321- <1> 		db "on 486's!",10,0
  1894 00001884 0A00                <1>
  1895                              <1> 		
  1896 00001886 436F70726F63657373- <1> err7	db "Coprocessor not available:",10
  1897 0000188F 6F72206E6F74206176- <1>
  1898 00001898 61696C61626C653A0A  <1>
  1899 000018A1 446F6E277420796F75- <1> 		db "Don't you know they don't make those anymore!",10,0
  1900 000018AA 206B6E6F7720746865- <1>
  1901 000018B3 7920646F6E2774206D- <1>
  1902 000018BC 616B652074686F7365- <1>
  1903 000018C5 20616E796D6F726521- <1>
  1904 000018CE 0A00                <1>
  1905                              <1> 		
  1906 000018D0 446F75626C65206661- <1> err8	db "Double fault:",10
  1907 000018D9 756C743A0A          <1>
  1908 000018DE 546865206578636570- <1> 		db "The exception handler could not handle that it could not handle an exception.",10,0
  1909 000018E7 74696F6E2068616E64- <1>
  1910 000018F0 6C657220636F756C64- <1>
  1911 000018F9 206E6F742068616E64- <1>
  1912 00001902 6C6520746861742069- <1>
  1913 0000190B 7420636F756C64206E- <1>
  1914 00001914 6F742068616E646C65- <1>
  1915 0000191D 20616E206578636570- <1>
  1916 00001926 74696F6E2E0A00      <1>
  1917                              <1> 		
  1918 0000192D 436F70726F63657373- <1> err9	db "Coprocessor segment overrun:",10,0
  1919 00001936 6F72207365676D656E- <1>
  1920 0000193F 74206F76657272756E- <1>
  1921 00001948 3A0A00              <1>
  1922 0000194B 54686973206E657665- <1> 		db "This never happens in modern computers, and never should.",10,0
  1923 00001954 722068617070656E73- <1>
  1924 0000195D 20696E206D6F646572- <1>
  1925 00001966 6E20636F6D70757465- <1>
  1926 0000196F 72732C20616E64206E- <1>
  1927 00001978 657665722073686F75- <1>
  1928 00001981 6C642E0A00          <1>
  1929                              <1> 
  1930 00001986 496E76616C69642054- <1> err10	db "Invalid TSS:",10
  1931 0000198F 53533A0A            <1>
  1932 00001993 546865205453532074- <1> 		db "The TSS that was switched to is invalid. Nothing funny here.",10,0
  1933 0000199C 686174207761732073- <1>
  1934 000019A5 776974636865642074- <1>
  1935 000019AE 6F20697320696E7661- <1>
  1936 000019B7 6C69642E204E6F7468- <1>
  1937 000019C0 696E672066756E6E79- <1>
  1938 000019C9 20686572652E0A00    <1>
  1939                              <1> 		
  1940 000019D1 5365676D656E74206E- <1> err11	db "Segment not present:",10
  1941 000019DA 6F742070726573656E- <1>
  1942 000019E3 743A0A              <1>
  1943 000019E6 546865207072657365- <1> 		db "The present bit of the segment descriptor is set to zero.",10,0
  1944 000019EF 6E7420626974206F66- <1>
  1945 000019F8 20746865207365676D- <1>
  1946 00001A01 656E74206465736372- <1>
  1947 00001A0A 6970746F7220697320- <1>
  1948 00001A13 73657420746F207A65- <1>
  1949 00001A1C 726F2E0A00          <1>
  1950                              <1> 		
  1951 00001A21 537461636B20657863- <1> err12	db "Stack exception:",10
  1952 00001A2A 657074696F6E3A0A    <1>
  1953 00001A32 546865205353206465- <1> 		db "The SS descriptor is invalid or not present or its limit is too small.",10,0
  1954 00001A3B 7363726970746F7220- <1>
  1955 00001A44 697320696E76616C69- <1>
  1956 00001A4D 64206F72206E6F7420- <1>
  1957 00001A56 70726573656E74206F- <1>
  1958 00001A5F 7220697473206C696D- <1>
  1959 00001A68 697420697320746F6F- <1>
  1960 00001A71 20736D616C6C2E0A00  <1>
  1961                              <1> 		
  1962 00001A7A 47656E6572616C2070- <1> err13	db "General protection violation:",10
  1963 00001A83 726F74656374696F6E- <1>
  1964 00001A8C 2076696F6C6174696F- <1>
  1965 00001A95 6E3A0A              <1>
  1966 00001A98 596F752076696F6C61- <1> 		db "You violated the computer. Step away slowly. The FBI is on its way.",10,0
  1967 00001AA1 746564207468652063- <1>
  1968 00001AAA 6F6D70757465722E20- <1>
  1969 00001AB3 537465702061776179- <1>
  1970 00001ABC 20736C6F776C792E20- <1>
  1971 00001AC5 546865204642492069- <1>
  1972 00001ACE 73206F6E2069747320- <1>
  1973 00001AD7 7761792E0A00        <1>
  1974                              <1> 		
  1975 00001ADD 50616765206661756C- <1> err14	db "Page fault:",10
  1976 00001AE6 743A0A              <1>
  1977 00001AE9 546865207061676520- <1> 		db "The page that was requested was not available.",10,0
  1978 00001AF2 746861742077617320- <1>
  1979 00001AFB 726571756573746564- <1>
  1980 00001B04 20776173206E6F7420- <1>
  1981 00001B0D 617661696C61626C65- <1>
  1982 00001B16 2E0A00              <1>
  1983                              <1> 		
  1984 00001B19 526573657276656420- <1> err15	db "Reserved for Plan R:",10
  1985 00001B22 666F7220506C616E20- <1>
  1986 00001B2B 523A0A              <1>
  1987 00001B2E 5468697320696E7465- <1> 		db "This interrupt is reserved for usage only by the military when it is necessary",10
  1988 00001B37 727275707420697320- <1>
  1989 00001B40 726573657276656420- <1>
  1990 00001B49 666F72207573616765- <1>
  1991 00001B52 206F6E6C7920627920- <1>
  1992 00001B5B 746865206D696C6974- <1>
  1993 00001B64 617279207768656E20- <1>
  1994 00001B6D 6974206973206E6563- <1>
  1995 00001B76 6573736172790A      <1>
  1996 00001B7D 746F20696E69746961- <1> 		db "to initiate a full-scale coup d'",130,"tat.",10,0
  1997 00001B86 746520612066756C6C- <1>
  1998 00001B8F 2D7363616C6520636F- <1>
  1999 00001B98 757020642782746174- <1>
  2000 00001BA1 2E0A00              <1>
  2001                              <1> 		
  2002 00001BA4 576861742074686520- <1> unknownerror db "What the hell just happened? Is everyone okay? Hard drive? Video card?",10
  2003 00001BAD 68656C6C206A757374- <1>
  2004 00001BB6 2068617070656E6564- <1>
  2005 00001BBF 3F2049732065766572- <1>
  2006 00001BC8 796F6E65206F6B6179- <1>
  2007 00001BD1 3F2048617264206472- <1>
  2008 00001BDA 6976653F2056696465- <1>
  2009 00001BE3 6F20636172643F0A    <1>
  2010 00001BEB 4D656D6F72793F2041- <1> 			db	"Memory? Are you there?",10,0
  2011 00001BF4 726520796F75207468- <1>
  2012 00001BFD 6572653F0A00        <1>
  2013                              <1> %else
  2014                              <1> unhand:	
  2015                              <1> 	%assign i 0
  2016                              <1> 	%rep 32
  2017                              <1> 	mov byte [intprob], i
  2018                              <1> 	jmp unhand2
  2019                              <1> 	%assign i i+1
  2020                              <1> 	%endrep
  2021                              <1> unhand2:
  2022                              <1> 	cmp byte [intprob], 3
  2023                              <1> 	je handled	;if it is a debug interrupt, it is auto handled
  2024                              <1> 	mov ebx, 0xDEADCD00 ;this shows that an exception occured even though more detailed info cannot be shown
  2025                              <1> 						;CD stands for the interrupt code, DEAD shows that the program died because of the int
  2026                              <1> 	mov bl, [intprob]
  2027                              <1> 	jmp exitprog
  2028                              <1> intprob db 0
  2029                              <1> %endif
  2030                                      %include "source/ints.asm"
  2031                              <1> newints:	;for great justice
  2032 00001C03 80FC00              <1> 	cmp ah, 0
  2033 00001C06 0F847F000000        <1> 	je near intx0   ;kills app
  2034 00001C0C 80FC01              <1> 	cmp ah, 1
  2035 00001C0F 0F84FE000000        <1> 	je near intx1   ;print string
  2036 00001C15 80FC02              <1> 	cmp ah, 2
  2037 00001C18 0F8450010000        <1> 	je near intx2	;read string
  2038 00001C1E 80FC03              <1> 	cmp ah, 3
  2039 00001C21 0F8470010000        <1> 	je near intx3	;clear screen
  2040 00001C27 80FC04              <1> 	cmp ah, 4
  2041 00001C2A 0F84E5010000        <1> 	je near intx4	;read and print string
  2042 00001C30 80FC05              <1> 	cmp ah, 5
  2043 00001C33 0F84C9050000        <1> 	je near intx5	;get char
  2044 00001C39 80FC06              <1> 	cmp ah, 6
  2045 00001C3C 0F841B060000        <1> 	je near intx6	;print char
  2046 00001C42 80FC07              <1> 	cmp ah, 7
  2047 00001C45 0F84FD070000        <1> 	je near intx7	;read file
  2048                              <1> ;	cmp ah, 8
  2049                              <1> ;	je near intx8	;write file
  2050 00001C4B 80FC09              <1> 	cmp ah, 9
  2051 00001C4E 0F84FE070000        <1> 	je near intx9	;convert number to string
  2052 00001C54 80FC0A              <1> 	cmp ah, 10
  2053 00001C57 0F840D080000        <1> 	je near intx10	;convert string to number
  2054                              <1> %ifdef threads.included
  2055 00001C5D 80FC0B              <1> 	cmp ah, 11
  2056 00001C60 0F840E080000        <1> 	je near intx11	;create thread
  2057                              <1> %endif
  2058 00001C66 80FC0C              <1> 	cmp ah, 12
  2059 00001C69 0F84DC080000        <1> 	je near intx12	;get time
  2060 00001C6F 80FC0D              <1> 	cmp ah, 13
  2061 00001C72 0F84E8080000        <1> 	je near intx13	;set time
  2062 00001C78 80FC0E              <1> 	cmp ah, 14
  2063 00001C7B 0F84EF080000        <1> 	je near intx14	;run program
  2064 00001C81 80FC0F              <1> 	cmp ah, 15
  2065 00001C84 0F84FB080000        <1> 	je near intx15	;get program info-location of name/options/number of options/environmental vars
  2066 00001C8A C3                  <1> 	ret
  2067                              <1> 	
  2068                              <1> ;;the jmp timerinterrupt's ensure that task switches occur
  2069                              <1> intx0:
  2070                              <1> 	%include 'source/interrupts/0_exit.asm'
  2071                              <2> exitprog:
  2072 00001C8B 66B83000            <2> 	mov ax, NEW_DATA_SEL
  2073 00001C8F 8ED8                <2> 	mov ds, ax
  2074 00001C91 8EC0                <2> 	mov es, ax
  2075 00001C93 8EE0                <2> 	mov fs, ax
  2076 00001C95 66B82000            <2> 	mov ax, SYS_DATA_SEL
  2077 00001C99 8EE8                <2> 	mov gs, ax
  2078 00001C9B C705[19650000]0000- <2> 	mov dword [currentthread], 0
  2079 00001CA3 0000                <2>
  2080 00001CA5 C705[14650000]0400- <2> 	mov dword [lastthread], 4
  2081 00001CAD 0000                <2>
  2082 00001CAF C605[18650000]00    <2> 	mov byte [threadson], 0 ;for now i need to use this
  2083 00001CB6 8B25[2AB50000]      <2> 	mov esp, [previousstack] ;and this
  2084 00001CBC 81FB00000000        <2> 	cmp ebx, 0
  2085 00001CC2 0F8501000000        <2> 	jne near .error
  2086 00001CC8 C3                  <2> 	ret
  2087                              <2> .error:
  2088 00001CC9 89D9                <2> 	mov ecx, ebx
  2089 00001CCB B006                <2> 	mov al, 6
  2090 00001CCD A2[962E0000]        <2> 	mov [firsthexshown], al
  2091 00001CD2 51                  <2> 	push ecx
  2092 00001CD3 BE[EE1C0000]        <2> 	mov esi, .msg1
  2093 00001CD8 E840000000          <2> 	call printhighlight
  2094 00001CDD 59                  <2> 	pop ecx
  2095 00001CDE E8C8110000          <2> 	call showhex
  2096 00001CE3 BE[031D0000]        <2> 	mov esi, .msg2
  2097 00001CE8 E830000000          <2> 	call printhighlight
  2098 00001CED C3                  <2> 	ret
  2099                              <2> 	
  2100 00001CEE 416E20657869742073- <2> .msg1 db "An exit status of 0x",0
  2101 00001CF7 7461747573206F6620- <2>
  2102 00001D00 307800              <2>
  2103 00001D03 087761732072657475- <2> .msg2 db 8,"was returned.",10,0
  2104 00001D0C 726E65642E0A00      <2>
  2105                              <1> intx1:
  2106                              <1> 	%include 'source/interrupts/1_prntstr.asm'
  2107 00001D13 E82A000000          <2> call printint
  2108 00001D18 E988E5FFFF          <2> jmp timerinterrupt
  2109                              <2> 
  2110                              <2> 	printhighlight:
  2111 00001D1D 6631C0              <2> 		xor ax, ax
  2112 00001D20 66BBF000            <2> 		mov bx, 0xF0
  2113 00001D24 E919000000          <2> 		jmp printint
  2114                              <2> 	printquiet:
  2115 00001D29 6631C0              <2> 		xor ax, ax
  2116 00001D2C A2[6D1D0000]        <2> 		mov [endkeyprint], al
  2117 00001D31 66BB0700            <2> 		mov bx, 7
  2118 00001D35 E820000000          <2> 		call printint.b
  2119 00001D3A C3                  <2> 		ret
  2120                              <2>     print:
  2121 00001D3B 6631C0              <2> 		xor ax, ax
  2122 00001D3E 66BB0700            <2> 		mov bx, 7
  2123                              <2> 	printint:	;;print line, al=last key,bl=modifier, esi=buffer
  2124 00001D42 56                  <2> 		push esi
  2125 00001D43 A2[6D1D0000]        <2> 		mov [endkeyprint], al
  2126 00001D48 E80D000000          <2> 		call .b
  2127 00001D4D 89F1                <2> 		mov ecx, esi
  2128 00001D4F 5F                  <2> 		pop edi
  2129 00001D50 29F9                <2> 		sub ecx, edi
  2130 00001D52 51                  <2> 		push ecx
  2131 00001D53 E85D080000          <2> 		call termcopy
  2132 00001D58 59                  <2> 		pop ecx
  2133 00001D59 C3                  <2> 		ret
  2134                              <2> 	.b:
  2135 00001D5A 8A06                <2> 		mov al, [esi]
  2136 00001D5C 3A05[6D1D0000]      <2> 		cmp al, [endkeyprint]
  2137 00001D62 7408                <2> 		je .done
  2138 00001D64 E819050000          <2> 		call prcharq
  2139 00001D69 46                  <2> 		inc esi
  2140 00001D6A EBEE                <2> 		jmp .b
  2141                              <2> 	.done:
  2142 00001D6C C3                  <2> 		ret
  2143                              <2> 
  2144 00001D6D 00                  <2> endkeyprint db 0
  2145                              <1> intx2:
  2146                              <1> 	%include 'source/interrupts/2_readstr.asm'
  2147 00001D6E E805000000          <2> call readint
  2148 00001D73 E92DE5FFFF          <2> jmp timerinterrupt
  2149                              <2> 
  2150                              <2> 	readint:	;;get line, al=last key, esi = buffer, edi = endbuffer	
  2151 00001D78 89C3                <2> 		mov ebx, eax
  2152                              <2> 	.b:
  2153 00001D7A 53                  <2> 		push ebx
  2154 00001D7B 57                  <2> 		push edi
  2155 00001D7C 56                  <2> 		push esi
  2156 00001D7D 30C0                <2> 		xor al, al
  2157 00001D7F E88A040000          <2> 		call rdcharint
  2158 00001D84 5E                  <2> 		pop esi
  2159 00001D85 8806                <2> 		mov [esi], al
  2160 00001D87 46                  <2> 		inc esi
  2161 00001D88 5F                  <2> 		pop edi
  2162 00001D89 5B                  <2> 		pop ebx
  2163 00001D8A 39FE                <2> 		cmp esi, edi
  2164 00001D8C 7304                <2> 		jae .done
  2165 00001D8E 38D8                <2> 		cmp al, bl
  2166 00001D90 75E8                <2> 		jne .b
  2167                              <2> 	.done:
  2168 00001D92 4E                  <2> 		dec esi
  2169 00001D93 C60600              <2> 		mov byte [esi], 0
  2170 00001D96 C3                  <2> 		ret
  2171                              <1> intx3:
  2172                              <1> 	%include 'source/interrupts/3_clearscrn.asm'
  2173 00001D97 E805000000          <2> call clear
  2174 00001D9C E904E5FFFF          <2> jmp timerinterrupt
  2175                              <2> %ifdef io.serial
  2176                              <2> clear:
  2177                              <2> 	ret
  2178                              <2> %else
  2179                              <2> clear:		
  2180 00001DA1 668B0D[44240000]    <2> 		mov cx, [charxy]
  2181 00001DA8 BF[C0E62800]        <2> 		mov edi, videobuf
  2182 00001DAD 6631C0              <2> 		xor ax, ax
  2183 00001DB0 66A3[3E240000]      <2> 		mov [linebeginpos], ax
  2184 00001DB6 66A3[40240000]      <2> 		mov [videobufpos], ax
  2185 00001DBC 6631D2              <2> 		xor dx, dx
  2186 00001DBF 66A3[42240000]      <2> 		mov [charpos], ax
  2187 00001DC5 B407                <2> 		mov ah, 7
  2188                              <2> 	clearb:
  2189 00001DC7 668907              <2> 		mov [edi], ax
  2190 00001DCA 81C702000000        <2> 		add edi, 2
  2191 00001DD0 FEC9                <2> 		dec cl
  2192 00001DD2 80F900              <2> 		cmp cl, 0
  2193 00001DD5 75F0                <2> 		jne clearb
  2194 00001DD7 8A0D[44240000]      <2> 		mov cl, [charxy]
  2195 00001DDD FECD                <2> 		dec ch
  2196 00001DDF 80FD00              <2> 		cmp ch, 0
  2197 00001DE2 75E3                <2> 		jne clearb
  2198                              <2> 	cleardouble:
  2199 00001DE4 BF[64512900]        <2> 		mov edi, videobuf2
  2200 00001DE9 668B0D[44240000]    <2> 		mov cx, [charxy]
  2201 00001DF0 31C0                <2> 		xor eax, eax
  2202                              <2> 	clearc:
  2203 00001DF2 668907              <2> 		mov [edi], ax
  2204 00001DF5 81C702000000        <2> 		add edi, 2
  2205 00001DFB FEC9                <2> 		dec cl
  2206 00001DFD 80F900              <2> 		cmp cl, 0
  2207 00001E00 75F0                <2> 		jne clearc
  2208 00001E02 8A0D[44240000]      <2> 		mov cl, [charxy]
  2209 00001E08 FECD                <2> 		dec ch
  2210 00001E0A 80FD00              <2> 		cmp ch, 0
  2211 00001E0D 75E3                <2> 		jne clearc
  2212 00001E0F E8A1070000          <2> 		call termcopy
  2213 00001E14 C3                  <2> 		ret
  2214                              <2> %endif
  2215                              <2> 		
  2216                              <1> intx4:
  2217                              <1> 	%include 'source/interrupts/4_prntreadstr.asm'
  2218 00001E15 E809000000          <2> call rdprint
  2219 00001E1A E986E4FFFF          <2> jmp timerinterrupt
  2220                              <2> 
  2221                              <2> readline:
  2222 00001E1F B00A                <2>   mov al, 10
  2223 00001E21 B307                <2>   mov bl, 7
  2224                              <2> rdprint:	;;print and get line, al=last key, bl=modifier, esi=buffer, edi=bufferend
  2225 00001E23 E80D000000          <2> 	call rdprintdos
  2226 00001E28 50                  <2> 	push eax
  2227 00001E29 A0[EF210000]        <2> 	mov al, [endkeyrdpr]
  2228 00001E2E E83E040000          <2> 	call prcharint
  2229 00001E33 58                  <2> 	pop eax
  2230 00001E34 C3                  <2> 	ret
  2231                              <2> 
  2232                              <2> 	rdprintdos:
  2233 00001E35 8935[F7210000]      <2> 		mov [buftxtloc], esi
  2234 00001E3B A2[EF210000]        <2> 		mov [endkeyrdpr], al
  2235 00001E40 881D[F0210000]      <2> 		mov [modkeyrdpr], bl
  2236 00001E46 8935[F1210000]      <2> 		mov [firstesirdpr], esi
  2237 00001E4C 893D[FB210000]      <2> 		mov [endbufferrdpr], edi
  2238 00001E52 8B3D[14BC2900]      <2> 		mov edi, [commandsentered]
  2239 00001E58 893D[10BC2900]      <2> 		mov [commandlistentries], edi
  2240                              <2> 	rdprintb:
  2241 00001E5E 56                  <2> 		push esi
  2242 00001E5F B001                <2> 		mov al, 1
  2243 00001E61 E8A8030000          <2> 		call rdcharint
  2244 00001E66 5E                  <2> 		pop esi
  2245                              <2> %ifdef io.serial
  2246                              <2> 		cmp ah, 0x41
  2247                              <2> 		je near rdprup
  2248                              <2> 		cmp ah, 0x42
  2249                              <2> 		je near rdprdown
  2250                              <2> 		cmp ah, 0x43
  2251                              <2> 		je near rdprright
  2252                              <2> 		cmp ah, 0x44
  2253                              <2> 		je near rdprleft
  2254                              <2> 		cmp ah, 0x31
  2255                              <2> 		je near rdprhome
  2256                              <2> 		cmp ah, 0x48
  2257                              <2> 		je near rdprhome
  2258                              <2> 		cmp ah, 0x46
  2259                              <2> 		je near rdprend
  2260                              <2> 		cmp ah, 0x33
  2261                              <2> 		je near rdprdel
  2262                              <2> 		cmp ah, 0x34
  2263                              <2> 		je near rdprend
  2264                              <2> %else
  2265 00001E67 803D[0F5C0000]E0    <2> 		cmp byte [specialkey], 0xE0
  2266 00001E6E 751B                <2> 		jne notspecialrdprnt
  2267 00001E70 80FC53              <2> 		cmp ah, 0x53
  2268 00001E73 0F841E030000        <2> 		je near rdprdel
  2269 00001E79 80FC47              <2> 		cmp ah, 0x47
  2270 00001E7C 0F8407010000        <2> 		je near rdprhome
  2271 00001E82 80FC4F              <2> 		cmp ah, 0x4F
  2272 00001E85 0F841D010000        <2> 		je near rdprend
  2273                              <2> 	notspecialrdprnt:
  2274 00001E8B 80FC50              <2> 		cmp ah, 0x50
  2275 00001E8E 0F849B010000        <2> 		je near rdprdown
  2276 00001E94 80FC4D              <2> 		cmp ah, 0x4D
  2277 00001E97 0F844A010000        <2> 		je near rdprright
  2278 00001E9D 80FC4B              <2> 		cmp ah, 0x4B
  2279 00001EA0 0F841F010000        <2> 		je near rdprleft
  2280 00001EA6 80FC48              <2> 		cmp ah, 0x48
  2281 00001EA9 0F84C3010000        <2> 		je near rdprup
  2282                              <2> %endif
  2283 00001EAF 3C08                <2> 		cmp al, 8
  2284 00001EB1 0F84FB020000        <2> 		je near rdprbscheck
  2285 00001EB7 3C00                <2> 		cmp al, 0
  2286 00001EB9 74A3                <2> 		je rdprintb
  2287 00001EBB 80FC00              <2> 		cmp ah, 0
  2288 00001EBE 749E                <2> 		je rdprintb
  2289 00001EC0 8806                <2> 		mov [esi], al
  2290 00001EC2 46                  <2> 		inc esi
  2291                              <2> 	bscheckequal:
  2292 00001EC3 8A1D[F0210000]      <2> 		mov bl, [modkeyrdpr]
  2293 00001EC9 8A3D[F6210000]      <2> 		mov bh, [txtmask]
  2294 00001ECF 80FF00              <2> 		cmp bh, 0
  2295 00001ED2 7404                <2> 		je nomasktxt
  2296 00001ED4 88F8                <2> 		mov al, bh
  2297 00001ED6 30FF                <2> 		xor bh, bh
  2298                              <2> 	nomasktxt:
  2299 00001ED8 56                  <2> 		push esi
  2300 00001ED9 66A3[ED210000]      <2> 		mov [axcache], ax
  2301 00001EDF 8A25[EF210000]      <2> 		mov ah, [endkeyrdpr]
  2302 00001EE5 38E0                <2> 		cmp al, ah
  2303 00001EE7 742E                <2> 		je nobackprintbuftxt2
  2304 00001EE9 E883030000          <2> 		call prcharint
  2305 00001EEE BE[AAC70000]        <2> 		mov esi, buftxt2
  2306 00001EF3 E831FEFFFF          <2> 		call printquiet
  2307 00001EF8 B020                <2> 		mov al, " "
  2308 00001EFA E883030000          <2> 		call prcharq
  2309 00001EFF B008                <2> 		mov al, 8
  2310 00001F01 81FE[AAC70000]      <2> 		cmp esi, buftxt2
  2311 00001F07 740E                <2> 		je nobackprintbuftxt2
  2312                              <2> 	backprintbuftxt2:
  2313 00001F09 E874030000          <2> 		call prcharq
  2314 00001F0E 4E                  <2> 		dec esi
  2315 00001F0F 81FE[AAC70000]      <2> 		cmp esi, buftxt2
  2316 00001F15 77F2                <2> 		ja backprintbuftxt2
  2317                              <2> 	nobackprintbuftxt2:
  2318 00001F17 3C0A                <2> 		cmp al, 10
  2319 00001F19 7405                <2> 		je nonobackprint
  2320 00001F1B E851030000          <2> 		call prcharint
  2321                              <2> 	nonobackprint:
  2322 00001F20 5E                  <2> 		pop esi
  2323 00001F21 3B35[FB210000]      <2> 		cmp esi, [endbufferrdpr]
  2324 00001F27 0F8319000000        <2> 		jae near donerdprinc
  2325 00001F2D 66A1[ED210000]      <2> 		mov ax, [axcache]
  2326 00001F33 8A25[EF210000]      <2> 		mov ah, [endkeyrdpr]
  2327 00001F39 38E0                <2> 		cmp al, ah
  2328 00001F3B 0F851DFFFFFF        <2> 		jne rdprintb
  2329 00001F41 E901000000          <2> 		jmp donerdprint
  2330                              <2> 	donerdprinc:
  2331 00001F46 46                  <2> 		inc esi
  2332                              <2> 	donerdprint:
  2333 00001F47 4E                  <2> 		dec esi
  2334 00001F48 BF[AAC70000]        <2> 		mov edi, buftxt2
  2335                              <2> 	copylaterstuff:
  2336 00001F4D 8A07                <2> 		mov al, [edi]
  2337 00001F4F 3C00                <2> 		cmp al, 0
  2338 00001F51 7406                <2> 		je nocopylaterstuff
  2339 00001F53 8806                <2> 		mov [esi], al
  2340 00001F55 47                  <2> 		inc edi
  2341 00001F56 46                  <2> 		inc esi
  2342 00001F57 EBF4                <2> 		jmp copylaterstuff
  2343                              <2> 	nocopylaterstuff:
  2344 00001F59 C60600              <2> 		mov byte [esi], 0
  2345 00001F5C E80B000000          <2> 		call clearbuftxt2
  2346 00001F61 89F1                <2> 		mov ecx, esi
  2347 00001F63 8B3D[F1210000]      <2> 		mov edi, [firstesirdpr]
  2348 00001F69 29F9                <2> 		sub ecx, edi
  2349 00001F6B C3                  <2> 		ret
  2350                              <2> 	
  2351                              <2> 	clearbuftxt2:
  2352 00001F6C 30C0                <2> 		xor al, al
  2353 00001F6E BF[AAC70000]        <2> 		mov edi, buftxt2
  2354                              <2> 	clearbuftxt2lp:
  2355 00001F73 8807                <2> 		mov [edi], al
  2356 00001F75 47                  <2> 		inc edi
  2357 00001F76 81FF[AACB0000]      <2> 		cmp edi, buftxt
  2358 00001F7C 75F5                <2> 		jne clearbuftxt2lp
  2359 00001F7E C3                  <2> 		ret
  2360                              <2> 	
  2361                              <2> 	rdprintb2:
  2362 00001F7F E831060000          <2> 		call termcopy
  2363 00001F84 E9D5FEFFFF          <2> 		jmp rdprintb
  2364                              <2> 	
  2365                              <2> 	rdprhome:
  2366 00001F89 3B35[F7210000]      <2> 		cmp esi, [buftxtloc]
  2367 00001F8F 0F84EAFFFFFF        <2> 		je near rdprintb2
  2368 00001F95 BF[AAC70000]        <2> 		mov edi, buftxt2
  2369 00001F9A 8A07                <2> 		mov al, [edi]
  2370 00001F9C E82F020000          <2> 		call shiftbuftxt2
  2371 00001FA1 E8DC020000          <2> 		call prcharq
  2372 00001FA6 EBE1                <2> 		jmp rdprhome
  2373                              <2> 		
  2374                              <2> 	rdprend:
  2375 00001FA8 BF[AAC70000]        <2> 		mov edi, buftxt2
  2376 00001FAD 8A07                <2> 		mov al, [edi]
  2377 00001FAF 3C00                <2> 		cmp al, 0
  2378 00001FB1 0F84C8FFFFFF        <2> 		je near rdprintb2
  2379 00001FB7 8806                <2> 		mov [esi], al
  2380 00001FB9 E849000000          <2> 		call shiftbuftxt2lft
  2381 00001FBE E8BF020000          <2> 		call prcharq
  2382 00001FC3 EBE3                <2> 		jmp rdprend
  2383                              <2> 	
  2384                              <2> 	rdprleft:
  2385 00001FC5 3B35[F7210000]      <2> 		cmp esi, [buftxtloc]
  2386 00001FCB 0F848DFEFFFF        <2> 		je near rdprintb
  2387 00001FD1 BF[AAC70000]        <2> 		mov edi, buftxt2
  2388 00001FD6 8A07                <2> 		mov al, [edi]
  2389 00001FD8 E8F3010000          <2> 		call shiftbuftxt2
  2390 00001FDD E88F020000          <2> 		call prcharint
  2391 00001FE2 E977FEFFFF          <2> 		jmp rdprintb
  2392                              <2> 		
  2393                              <2> 	rdprright:
  2394 00001FE7 BF[AAC70000]        <2> 		mov edi, buftxt2
  2395 00001FEC 8A07                <2> 		mov al, [edi]
  2396 00001FEE 3C00                <2> 		cmp al, 0
  2397 00001FF0 0F8468FEFFFF        <2> 		je near rdprintb
  2398 00001FF6 8806                <2> 		mov [esi], al
  2399 00001FF8 E80A000000          <2> 		call shiftbuftxt2lft
  2400 00001FFD E86F020000          <2> 		call prcharint
  2401 00002002 E957FEFFFF          <2> 		jmp rdprintb
  2402                              <2> 	shiftbuftxt2lft:
  2403 00002007 3C00                <2> 		cmp al, 0
  2404 00002009 7408                <2> 		je noshiftbuftxt2lft
  2405 0000200B 47                  <2> 		inc edi
  2406 0000200C 8A07                <2> 		mov al, [edi]
  2407 0000200E 8847FF              <2> 		mov [edi - 1], al
  2408 00002011 EBF4                <2> 		jmp shiftbuftxt2lft
  2409                              <2> 	noshiftbuftxt2lft:
  2410 00002013 8A06                <2> 		mov al, [esi]
  2411 00002015 46                  <2> 		inc esi
  2412 00002016 8A1D[F0210000]      <2> 		mov bl, [modkeyrdpr]
  2413 0000201C C3                  <2> 		ret
  2414                              <2> 		
  2415                              <2> 	rdprdownbck:
  2416 0000201D FECC                <2> 		dec ah
  2417 0000201F 8825[F5210000]      <2> 		mov [commandedit], ah
  2418 00002025 E88D000000          <2> 		call rdprbckspc
  2419 0000202A E92FFEFFFF          <2> 		jmp rdprintb
  2420                              <2> 	
  2421                              <2> 	rdprdown:
  2422 0000202F 8A25[F5210000]      <2> 		mov ah, [commandedit]
  2423 00002035 80FC01              <2> 		cmp ah, 1
  2424 00002038 0F8620FEFFFF        <2> 		jbe near rdprintb
  2425 0000203E 8B3D[14BC2900]      <2> 		mov edi, [commandsentered]
  2426 00002044 3B3D[10BC2900]      <2> 		cmp edi, [commandlistentries]
  2427 0000204A 7618                <2> 		jbe .nofix
  2428 0000204C 8105[10BC2900]0200- <2> 		add dword [commandlistentries], 2
  2429 00002054 0000                <2>
  2430 00002056 3B3D[10BC2900]      <2> 		cmp edi, [commandlistentries]
  2431 0000205C 7706                <2> 		ja .nofix
  2432 0000205E 893D[10BC2900]      <2> 		mov [commandlistentries], edi
  2433                              <2> 	.nofix:
  2434 00002064 80FC02              <2> 		cmp ah, 2
  2435 00002067 74B4                <2> 		je rdprdownbck
  2436 00002069 80EC02              <2> 		sub ah, 2
  2437 0000206C 8825[F5210000]      <2> 		mov [commandedit], ah
  2438                              <2> 		
  2439                              <2> 	rdprup:
  2440 00002072 3805[F5210000]      <2> 		cmp [commandedit], al
  2441 00002078 0F84E0FDFFFF        <2> 		je near rdprintb
  2442 0000207E 813D[10BC2900]0000- <2> 		cmp dword [commandlistentries], 0
  2443 00002086 0000                <2>
  2444 00002088 0F84D0FDFFFF        <2> 		je near rdprintb
  2445 0000208E FF0D[10BC2900]      <2> 		dec dword [commandlistentries]
  2446                              <2> 	.lp:
  2447 00002094 BF[AAC70000]        <2> 		mov edi, buftxt2
  2448 00002099 8A07                <2> 		mov al, [edi]
  2449 0000209B 3C00                <2> 		cmp al, 0
  2450 0000209D 740E                <2> 		je .start
  2451 0000209F 8806                <2> 		mov [esi], al
  2452 000020A1 E861FFFFFF          <2> 		call shiftbuftxt2lft
  2453 000020A6 E8D7010000          <2> 		call prcharq
  2454 000020AB EBE7                <2> 		jmp .lp
  2455                              <2> 	.start:
  2456 000020AD E805000000          <2> 		call rdprbckspc
  2457 000020B2 E941000000          <2> 		jmp getcurrentcommandstr
  2458                              <2> 	rdprbckspc:
  2459 000020B7 3B35[F7210000]      <2> 		cmp esi, [buftxtloc]
  2460 000020BD 742B                <2> 		je nordprupbck
  2461                              <2> 	rdprupbckspclp:
  2462 000020BF B008                <2> 		mov al, 8
  2463 000020C1 8A1D[F0210000]      <2> 		mov bl, [modkeyrdpr]
  2464 000020C7 E8B6010000          <2> 		call prcharq
  2465 000020CC B020                <2> 		mov al, ' '
  2466 000020CE E8AF010000          <2> 		call prcharq
  2467 000020D3 B008                <2> 		mov al, 8
  2468 000020D5 E8A8010000          <2> 		call prcharq
  2469 000020DA 4E                  <2> 		dec esi
  2470 000020DB 3B35[F7210000]      <2> 		cmp esi, [buftxtloc]
  2471 000020E1 7402                <2> 		je nordprupbck2
  2472 000020E3 EBDA                <2> 		jmp rdprupbckspclp
  2473                              <2> 	nordprupbck2:
  2474 000020E5 E8CB040000          <2> 		call termcopy
  2475                              <2> 	nordprupbck:
  2476 000020EA 8B3D[0CBC2900]      <2> 		mov edi, [commandbufpos]
  2477 000020F0 81C7[18BC2900]      <2> 		add edi, commandbuf
  2478 000020F6 4F                  <2> 		dec edi
  2479 000020F7 C3                  <2> 		ret
  2480                              <2> 	getcurrentcommandstr:
  2481 000020F8 8A25[F5210000]      <2> 		mov ah, [commandedit]
  2482 000020FE FE05[F5210000]      <2> 		inc byte [commandedit]
  2483                              <2> 	getccmdlp:
  2484 00002104 4F                  <2> 		dec edi
  2485 00002105 8A07                <2> 		mov al, [edi]
  2486 00002107 81FF[18BC2900]      <2> 		cmp edi, commandbuf
  2487 0000210D 7231                <2> 		jb getcmdresetcommandbuf
  2488 0000210F 81EF[18BC2900]      <2> 		sub edi, commandbuf
  2489 00002115 3B3D[0CBC2900]      <2> 		cmp edi, [commandbufpos]
  2490 0000211B 0F843DFDFFFF        <2> 		je near rdprintb
  2491 00002121 81C7[18BC2900]      <2> 		add edi, commandbuf
  2492 00002127 3C00                <2> 		cmp al, 0
  2493 00002129 75D9                <2> 		jne getccmdlp
  2494 0000212B FECC                <2> 		dec ah
  2495 0000212D 80FC00              <2> 		cmp ah, 0
  2496 00002130 77D2                <2> 		ja getccmdlp
  2497 00002132 47                  <2> 		inc edi
  2498 00002133 81FF[18CC2900]      <2> 		cmp edi, commandbufend
  2499 00002139 770D                <2> 		ja fixcmdbufb4morerdpr
  2500 0000213B E915000000          <2> 		jmp morerdprup
  2501                              <2> 	getcmdresetcommandbuf:
  2502 00002140 BF[18CC2900]        <2> 		mov edi, commandbufend
  2503 00002145 47                  <2> 		inc edi
  2504 00002146 EBBC                <2> 		jmp getccmdlp
  2505                              <2> 	fixcmdbufb4morerdpr:
  2506 00002148 4F                  <2> 		dec edi
  2507 00002149 81EF[18CC2900]      <2> 		sub edi, commandbufend
  2508 0000214F 81C7[18BC2900]      <2> 		add edi, commandbuf
  2509                              <2> 	morerdprup:
  2510 00002155 8A07                <2> 		mov al, [edi]
  2511 00002157 47                  <2> 		inc edi
  2512 00002158 81EF[18BC2900]      <2> 		sub edi, commandbuf
  2513 0000215E 3C00                <2> 		cmp al, 0
  2514 00002160 0F8419FEFFFF        <2> 		je near rdprintb2
  2515 00002166 3B3D[0CBC2900]      <2> 		cmp edi, [commandbufpos]
  2516 0000216C 0F830DFEFFFF        <2> 		jae near rdprintb2
  2517 00002172 81C7[18BC2900]      <2> 		add edi, commandbuf
  2518 00002178 8806                <2> 		mov [esi], al
  2519 0000217A 46                  <2> 		inc esi
  2520 0000217B 57                  <2> 		push edi
  2521 0000217C 8A1D[F0210000]      <2> 		mov bl, [modkeyrdpr]
  2522 00002182 E8FB000000          <2> 		call prcharq
  2523 00002187 5F                  <2> 		pop edi
  2524 00002188 81FF[18CC2900]      <2> 		cmp edi, commandbufend
  2525 0000218E 76C5                <2> 		jbe morerdprup
  2526 00002190 BF[18BC2900]        <2> 		mov edi, commandbuf
  2527 00002195 EBBE                <2> 		jmp morerdprup
  2528                              <2> 		
  2529                              <2> 	rdprdel:
  2530 00002197 BF[AAC70000]        <2> 		mov edi, buftxt2
  2531 0000219C 8A07                <2> 		mov al, [edi]
  2532 0000219E 3C00                <2> 		cmp al, 0
  2533 000021A0 0F84B8FCFFFF        <2> 		je near rdprintb
  2534 000021A6 8806                <2> 		mov [esi], al
  2535 000021A8 E85AFEFFFF          <2> 		call shiftbuftxt2lft
  2536 000021AD E8D0000000          <2> 		call prcharq
  2537                              <2> 		
  2538                              <2> 	rdprbscheck:
  2539 000021B2 3B35[F1210000]      <2> 		cmp esi, [firstesirdpr]
  2540 000021B8 7705                <2> 		ja goodbscheck
  2541 000021BA E99FFCFFFF          <2> 		jmp rdprintb
  2542                              <2> 	goodbscheck:
  2543 000021BF 4E                  <2> 		dec esi
  2544 000021C0 C60600              <2> 		mov byte [esi], 0
  2545 000021C3 8A1D[F0210000]      <2> 		mov bl, [modkeyrdpr]
  2546 000021C9 B008                <2> 		mov al, 8
  2547 000021CB E9F3FCFFFF          <2> 		jmp bscheckequal
  2548                              <2> 		
  2549                              <2> 	shiftbuftxt2:
  2550 000021D0 3C00                <2> 		cmp al, 0
  2551 000021D2 7409                <2> 		je noshiftbuftxt2
  2552 000021D4 47                  <2> 		inc edi
  2553 000021D5 8A27                <2> 		mov ah, [edi]
  2554 000021D7 8807                <2> 		mov [edi], al
  2555 000021D9 88E0                <2> 		mov al, ah
  2556 000021DB EBF3                <2> 		jmp shiftbuftxt2
  2557                              <2> 	noshiftbuftxt2:
  2558 000021DD BF[AAC70000]        <2> 		mov edi, buftxt2
  2559 000021E2 4E                  <2> 		dec esi
  2560 000021E3 8A06                <2> 		mov al, [esi]
  2561 000021E5 8807                <2> 		mov [edi], al
  2562 000021E7 C60600              <2> 		mov byte [esi], 0
  2563 000021EA B008                <2> 		mov al, 8
  2564 000021EC C3                  <2> 		ret
  2565                              <2> 		
  2566 000021ED 0000                <2> axcache dw 0
  2567 000021EF 00                  <2> endkeyrdpr db 0
  2568 000021F0 00                  <2> modkeyrdpr db 0
  2569 000021F1 00000000            <2> firstesirdpr dd 0
  2570 000021F5 00                  <2> commandedit db 0
  2571 000021F6 00                  <2> txtmask db 0
  2572 000021F7 00000000            <2> buftxtloc dd 0
  2573 000021FB 00000000            <2> endbufferrdpr dd 0
  2574 000021FF 082000              <2> backcursor db 8," ",0
  2575                              <1> intx5:
  2576                              <1> 	%include 'source/interrupts/5_readchar.asm'
  2577 00002202 E807000000          <2> 	call rdcharint
  2578 00002207 E999E0FFFF          <2> 	jmp timerinterrupt
  2579                              <2> getchar:
  2580 0000220C 30C0                <2> 	xor al, al
  2581                              <2> 	rdcharint:		;;get char, if al is 0, wait for key
  2582 0000220E C605[5C220000]01    <2> 		mov byte [trans], 1
  2583 00002215 3C00                <2> 		cmp al, 0
  2584 00002217 7507                <2> 		jne transcheck
  2585 00002219 C605[5C220000]00    <2> 		mov byte [trans], 0
  2586                              <2> 	transcheck:
  2587                              <2> 	%ifdef io.serial
  2588                              <2> 		call serial.receive
  2589                              <2> 		cmp al, 13
  2590                              <2> 		je rdenter
  2591                              <2> 	%else
  2592 00002220 E80A3A0000          <2> 		call getkey
  2593 00002225 66A1[5A220000]      <2> 		mov ax, [lastkey]
  2594 0000222B 80FC1C              <2> 		cmp ah, 0x1C
  2595 0000222E 741F                <2> 		je rdenter
  2596                              <2> 	%endif
  2597 00002230 8A3D[5C220000]      <2> 		mov bh, [trans]
  2598 00002236 803D[0F5C0000]E0    <2> 		cmp byte [specialkey], 0xE0
  2599 0000223D 7504                <2> 		jne nospecialtrans
  2600 0000223F 88C3                <2> 		mov bl, al
  2601 00002241 30C0                <2> 		xor al, al
  2602                              <2> 	nospecialtrans:
  2603 00002243 08C7                <2> 		or bh, al
  2604 00002245 80FF00              <2> 		cmp bh, 0
  2605 00002248 74D6                <2> 		je transcheck
  2606 0000224A E90A000000          <2> 		jmp rdend
  2607                              <2> 	rdenter:
  2608 0000224F B41C                <2> 		mov ah, 0x1C
  2609 00002251 B00A                <2> 		mov al, 10
  2610 00002253 66A3[5A220000]      <2> 		mov [lastkey], ax
  2611                              <2> 	rdend:
  2612 00002259 C3                  <2> 		ret
  2613                              <2> 		
  2614 0000225A 0000                <2> lastkey db 0,0
  2615 0000225C 00                  <2> trans db 0
  2616                              <1> intx6:
  2617                              <1> 	%include 'source/interrupts/6_prntchar.asm'
  2618                              <2> %ifdef io.serial
  2619                              <2> 	cmp bl, bh
  2620                              <2> 	call prcharint
  2621                              <2> 	jmp timerinterrupt
  2622                              <2> prcharint:	
  2623                              <2> prcharq:
  2624                              <2> 	call serial.send
  2625                              <2> 	ret
  2626                              <2> %else
  2627 0000225D 38FB                <2> cmp bl, bh
  2628 0000225F 740A                <2> je prchar.notimer
  2629 00002261 E80B000000          <2> call prcharint
  2630 00002266 E93AE0FFFF          <2> jmp timerinterrupt
  2631                              <2> prchar.notimer:
  2632 0000226B E812000000          <2> 	call prcharq
  2633 00002270 CF                  <2> 	iret
  2634                              <2> 	
  2635                              <2> prcharint:	;;print char, char in al, modifier in bl, if bh = bl then termcopy will not happen, will run termcopy if called as is
  2636 00002271 38FB                <2> 	cmp bl, bh
  2637 00002273 740D                <2> 	je prcharq
  2638 00002275 E808000000          <2> 	call prcharq
  2639 0000227A E836030000          <2> 	call termcopy
  2640 0000227F C3                  <2> 	ret
  2641 00002280 00                  <2> termguion db 0
  2642 00002281 00                  <2> termcopyon db 0
  2643                              <2> prcharq:
  2644 00002282 88DC                <2> 	mov ah, bl
  2645 00002284 66A3[46240000]      <2> 	mov [charbuf], ax
  2646 0000228A 31DB                <2> 	xor ebx, ebx
  2647 0000228C 668B1D[40240000]    <2> 	mov bx, [videobufpos]
  2648 00002293 BF[C0E62800]        <2> 	mov edi, videobuf
  2649 00002298 01DF                <2> 	add edi, ebx
  2650 0000229A 66A1[C0250000]      <2> 	mov ax, [removedvideo]
  2651 000022A0 668907              <2> 	mov [edi], ax
  2652 000022A3 66A1[46240000]      <2> 	mov ax, [charbuf]
  2653 000022A9 31D2                <2> 	xor edx, edx
  2654 000022AB 668B15[42240000]    <2> 	mov dx, [charpos]
  2655 000022B2 31C9                <2> 	xor ecx, ecx
  2656 000022B4 668B0D[44240000]    <2> 	mov cx, [charxy]
  2657 000022BB 3C09                <2> 	cmp al, 9
  2658 000022BD 0F8463000000        <2> 	je near prtab
  2659 000022C3 3C0D                <2> 	cmp al, 13		;I am phasing this out-it is used by windows but not unix based systems
  2660 000022C5 0F848B000000        <2> 	je near prcr
  2661 000022CB 3C0A                <2> 	cmp al, 10
  2662 000022CD 0F84B7000000        <2> 	je near prnlcr
  2663 000022D3 3C08                <2> 	cmp al, 8
  2664 000022D5 0F848F000000        <2> 	je near prbs
  2665 000022DB 3CFF                <2> 	cmp al, 255		;;null character
  2666 000022DD 0F841B000000        <2> 	je near donescr
  2667 000022E3 668907              <2> 	mov [edi], ax
  2668 000022E6 81C702000000        <2> 	add edi, 2
  2669 000022EC FEC2                <2> 	inc dl
  2670                              <2> donecrnl:
  2671 000022EE 38CA                <2> 	cmp dl, cl
  2672 000022F0 0F83B9000000        <2> 	jae near preol
  2673                              <2> doneeol:
  2674 000022F6 38EE                <2> 	cmp dh, ch
  2675 000022F8 0F83CF000000        <2> 	jae near prscr	
  2676                              <2> donescr:
  2677 000022FE 89FB                <2> 	mov ebx, edi
  2678 00002300 668B07              <2> 	mov ax, [edi]
  2679 00002303 66A3[C0250000]      <2> 	mov [removedvideo], ax
  2680 00002309 81EB[C0E62800]      <2> 	sub ebx, videobuf
  2681 0000230F 66891D[40240000]    <2> 	mov [videobufpos], bx
  2682 00002316 668915[42240000]    <2> 	mov [charpos], dx
  2683 0000231D 66A1[46240000]      <2> 	mov ax, [charbuf]
  2684 00002323 88E3                <2> 	mov bl, ah
  2685 00002325 C3                  <2> 	ret
  2686                              <2> 	
  2687                              <2> 	prtab:
  2688 00002326 31DB                <2> 		xor ebx, ebx
  2689 00002328 668B1D[3E240000]    <2> 		mov bx, [linebeginpos]
  2690 0000232F 81EF[C0E62800]      <2> 		sub edi, videobuf
  2691 00002335 29DF                <2> 		sub edi, ebx
  2692 00002337 C1EF04              <2> 		shr edi, 4
  2693 0000233A C1E704              <2> 		shl edi, 4
  2694 0000233D 81C710000000        <2> 		add edi, 16
  2695 00002343 C0EA03              <2> 		shr dl, 3
  2696 00002346 C0E203              <2> 		shl dl, 3
  2697 00002349 80C208              <2> 		add dl, 8
  2698 0000234C 81C7[C0E62800]      <2> 		add edi, videobuf
  2699 00002352 01DF                <2> 		add edi, ebx
  2700 00002354 EB98                <2> 		jmp donecrnl
  2701                              <2> 	
  2702                              <2> 	prcr:
  2703 00002356 30D2                <2> 		xor dl, dl
  2704 00002358 31DB                <2> 		xor ebx, ebx
  2705 0000235A BF[C0E62800]        <2> 		mov edi, videobuf
  2706 0000235F 668B1D[3E240000]    <2> 		mov bx, [linebeginpos]
  2707 00002366 01DF                <2> 		add edi, ebx
  2708 00002368 EB84                <2> 		jmp donecrnl
  2709                              <2> 			
  2710                              <2> 	prbs:
  2711 0000236A 80FA00              <2> 		cmp dl, 0
  2712 0000236D 7410                <2> 		je prbackline
  2713                              <2> 	prnobmr:
  2714 0000236F FECA                <2> 		dec dl
  2715 00002371 6631C0              <2> 		xor ax, ax
  2716 00002374 81EF02000000        <2> 		sub edi, 2
  2717 0000237A E96FFFFFFF          <2> 		jmp donecrnl
  2718                              <2> 	prbackline:
  2719 0000237F 88CA                <2> 		mov dl, cl
  2720 00002381 80FE00              <2> 		cmp dh, 0
  2721 00002384 74E9                <2> 		je prnobmr
  2722 00002386 FECE                <2> 		dec dh
  2723 00002388 EBE5                <2> 		jmp prnobmr
  2724                              <2> 		
  2725                              <2> 	prnlcr:
  2726 0000238A FEC6                <2> 		inc dh
  2727 0000238C 31DB                <2> 		xor ebx, ebx
  2728 0000238E 30D2                <2> 		xor dl, dl
  2729 00002390 88CB                <2> 		mov bl, cl
  2730 00002392 66D1E3              <2> 		shl bx, 1
  2731 00002395 BF[C0E62800]        <2> 		mov edi, videobuf
  2732 0000239A 66031D[3E240000]    <2> 		add bx, [linebeginpos]
  2733 000023A1 66891D[3E240000]    <2> 		mov [linebeginpos], bx
  2734 000023A8 01DF                <2> 		add edi, ebx
  2735 000023AA E93FFFFFFF          <2> 		jmp donecrnl
  2736                              <2> 		
  2737                              <2> 	preol:
  2738 000023AF 30D2                <2> 		xor dl, dl
  2739 000023B1 FEC6                <2> 		inc dh
  2740 000023B3 31DB                <2> 		xor ebx, ebx
  2741 000023B5 88CB                <2> 		mov bl, cl
  2742 000023B7 66D1E3              <2> 		shl bx, 1
  2743 000023BA 66031D[3E240000]    <2> 		add bx, [linebeginpos]
  2744 000023C1 66891D[3E240000]    <2> 		mov [linebeginpos], bx
  2745 000023C8 E929FFFFFF          <2> 		jmp doneeol
  2746                              <2> 	prscr:
  2747 000023CD FECE                <2> 		dec dh
  2748 000023CF BF[C0E62800]        <2> 		mov edi, videobuf
  2749 000023D4 31DB                <2> 		xor ebx, ebx
  2750 000023D6 88CB                <2> 		mov bl, cl
  2751 000023D8 66D1E3              <2> 		shl bx, 1
  2752 000023DB 01FB                <2> 		add ebx, edi
  2753                              <2> 	intscrollloop:
  2754 000023DD 668B03              <2> 		mov ax, [ebx]
  2755 000023E0 668907              <2> 		mov [edi], ax
  2756 000023E3 81C702000000        <2> 		add edi, 2
  2757 000023E9 81C302000000        <2> 		add ebx, 2
  2758 000023EF FEC9                <2> 		dec cl
  2759 000023F1 80F900              <2> 		cmp cl, 0
  2760 000023F4 75E7                <2> 		jne intscrollloop
  2761 000023F6 8A0D[44240000]      <2> 		mov cl, [charxy]
  2762 000023FC FECD                <2> 		dec ch
  2763 000023FE 80FD01              <2> 		cmp ch, 1
  2764 00002401 77DA                <2> 		ja intscrollloop
  2765 00002403 6631C0              <2> 		xor ax, ax
  2766 00002406 81EF[C0E62800]      <2> 		sub edi, videobuf
  2767 0000240C 66893D[3E240000]    <2> 		mov [linebeginpos], di
  2768 00002413 81C7[C0E62800]      <2> 		add edi, videobuf
  2769 00002419 89FB                <2> 		mov ebx, edi
  2770                              <2> 	intloopclear:
  2771 0000241B 668903              <2> 		mov [ebx], ax
  2772 0000241E 81C302000000        <2> 		add ebx, 2
  2773 00002424 FEC9                <2> 		dec cl
  2774 00002426 80F900              <2> 		cmp cl, 0
  2775 00002429 75F0                <2> 		jne intloopclear
  2776 0000242B FECD                <2> 		dec ch
  2777 0000242D 80FD00              <2> 		cmp ch, 0
  2778 00002430 75E9                <2> 		jne intloopclear
  2779 00002432 668B0D[44240000]    <2> 		mov cx, [charxy]
  2780 00002439 E9C0FEFFFF          <2> 		jmp donescr
  2781                              <2> 		
  2782 0000243E 0000                <2> linebeginpos dw 0
  2783 00002440 0000                <2> videobufpos: dw 0
  2784 00002442 0000                <2> charpos db 0,0
  2785 00002444 501E                <2> charxy db 80,30
  2786 00002446 0000                <2> charbuf dw 0
  2787                              <2> %endif
  2788                              <1> intx7:
  2789                              <1> 	%include 'source/interrupts/7_openfile.asm'
  2790 00002448 E82C3F0000          <2> 	call loadfile
  2791 0000244D E953DEFFFF          <2> 	jmp timerinterrupt
  2792                              <1> intx9:
  2793                              <1> 	%include 'source/interrupts/9_num2str.asm'
  2794 00002452 3C00                <2> 	cmp al, 0
  2795 00002454 750A                <2> 	jne num2strb
  2796 00002456 E81A0B0000          <2> 	call showdec
  2797 0000245B E945DEFFFF          <2> 	jmp timerinterrupt
  2798                              <2> num2strb:
  2799 00002460 E8460A0000          <2> 	call showhex
  2800 00002465 E93BDEFFFF          <2> 	jmp timerinterrupt
  2801                              <1> intx10:
  2802                              <1> 	%include 'source/interrupts/10_str2num.asm'
  2803 0000246A E8E80B0000          <2> 	call cnvrttxt	;the string goes into esi, number into ecx
  2804 0000246F E931DEFFFF          <2> 	jmp timerinterrupt
  2805                              <2> 	
  2806                              <1> %ifdef threads.included
  2807                              <1> intx11:
  2808                              <1> 	%include 'source/interrupts/11_forkthread.asm'
  2809                              <2> threadfork: ;esi is next thread's start address, if 0, fork current thread
  2810                              <2> 			;returns the PID of the new fork in ebx
  2811                              <2> ;WARNING:THIS WILL NOT WORK IN C UNTIL IT COPIES THE ENTIRE STACK
  2812 00002474 FA                  <2> 	cli
  2813 00002475 60                  <2> 	pushad
  2814 00002476 8925[43250000]      <2> 	mov [.espold], esp
  2815 0000247C C605[18650000]01    <2> 	mov byte [threadson], 1
  2816 00002483 8B1D[19650000]      <2> 	mov ebx, [currentthread]
  2817 00002489 C1E302              <2> 	shl ebx, 2
  2818 0000248C 89A3[2CEC2900]      <2> 	mov [threadlist + ebx], esp
  2819 00002492 C1EB02              <2> 	shr ebx, 2
  2820 00002495 81FB00000000        <2> 	cmp ebx, 0
  2821 0000249B 750C                <2> 	jne .simplestack
  2822 0000249D BB[CAB00000]        <2> 	mov ebx, stackend
  2823 000024A2 29E3                <2> 	sub ebx, esp
  2824 000024A4 E90B000000          <2> 	jmp .stackcalcdone
  2825                              <2> .simplestack:
  2826 000024A9 C1E30A              <2> 	shl ebx, 10
  2827 000024AC 81C3[2C002A00]      <2> 	add ebx, stack1
  2828 000024B2 29E3                <2> 	sub ebx, esp
  2829                              <2> .stackcalcdone:
  2830 000024B4 29DC                <2> 	sub esp, ebx
  2831 000024B6 81C4[2C002A00]      <2> 	add esp, stack1
  2832 000024BC 8B1D[14650000]      <2> 	mov ebx, [lastthread]
  2833 000024C2 C1E308              <2> 	shl ebx, 8
  2834 000024C5 01DC                <2> 	add esp, ebx
  2835 000024C7 891D[47250000]      <2> 	mov [.stackend], ebx
  2836                              <2> 
  2837 000024CD 89E5                <2> 	mov ebp, esp
  2838 000024CF 8B25[43250000]      <2> 	mov esp, [.espold]
  2839                              <2> 
  2840 000024D5 C1EB0A              <2> 	shr ebx, 10 ;get pid then push it
  2841 000024D8 895C2410            <2> 	mov [esp + 16], ebx ;set the old ebx to the new PID
  2842                              <2> 
  2843 000024DC 31DB                <2> 	xor ebx, ebx
  2844                              <2> .stackcopy:
  2845 000024DE 668B041C            <2> 	mov ax, [esp + ebx]
  2846 000024E2 6689441D00          <2> 	mov [ebp + ebx], ax
  2847 000024E7 81C302000000        <2> 	add ebx, 2
  2848 000024ED 3B1D[47250000]      <2> 	cmp ebx, [.stackend]
  2849 000024F3 72E9                <2> 	jb .stackcopy
  2850                              <2> 
  2851 000024F5 31C0                <2> 	xor eax, eax
  2852 000024F7 668CC8              <2> 	mov ax, cs
  2853 000024FA 89C2                <2> 	mov edx, eax
  2854 000024FC 8B4C2428            <2> 	mov ecx, [esp + 40]
  2855 00002500 81C900020000        <2> 	or ecx, 0x200
  2856                              <2> 	
  2857 00002506 81FE00000000        <2> 	cmp esi, 0
  2858 0000250C 7504                <2> 	jne .nochangestack
  2859 0000250E 8B742420            <2> 	mov esi, [esp + 32]
  2860                              <2> .nochangestack:
  2861 00002512 89F0                <2> 	mov eax, esi
  2862 00002514 89EC                <2> 	mov esp, ebp
  2863                              <2> 
  2864 00002516 89442420            <2> 	mov [esp + 32], eax
  2865 0000251A 89542424            <2> 	mov [esp + 36], edx
  2866 0000251E 894C2428            <2> 	mov [esp + 40], ecx
  2867                              <2> 
  2868 00002522 8B1D[14650000]      <2> 	mov ebx, [lastthread]
  2869 00002528 89A3[2CEC2900]      <2> 	mov [threadlist + ebx], esp
  2870 0000252E 81C304000000        <2> 	add ebx, 4
  2871 00002534 891D[14650000]      <2> 	mov [lastthread], ebx
  2872 0000253A 8B25[43250000]      <2> 	mov esp, [.espold]
  2873 00002540 61                  <2> 	popad
  2874 00002541 FB                  <2> 	sti
  2875 00002542 CF                  <2> 	iret
  2876                              <2> 
  2877 00002543 00000000            <2> .espold dd 0
  2878 00002547 00000000            <2> .stackend dd 0
  2879                              <1> %endif
  2880                              <1> intx12:
  2881                              <1> 	%include 'source/interrupts/12_gettime.asm'
  2882 0000254B A1[5D020000]        <2> 	mov eax, [timeseconds]
  2883 00002550 8B1D[61020000]      <2> 	mov ebx, [timenanoseconds]
  2884 00002556 89D9                <2> 	mov ecx, ebx
  2885 00002558 C1E90A              <2> 	shr ecx, 10	;this is in microseconds
  2886 0000255B E945DDFFFF          <2> 	jmp timerinterrupt
  2887                              <1> intx13:
  2888                              <1> 	%include 'source/interrupts/13_settime.asm'
  2889 00002560 A3[5D020000]        <2> 	mov [timeseconds], eax
  2890 00002565 891D[61020000]      <2> 	mov [timenanoseconds], ebx
  2891 0000256B E935DDFFFF          <2> 	jmp timerinterrupt
  2892                              <2> 	
  2893                              <1> intx14:
  2894                              <1> 	%include 'source/interrupts/14_runcmd.asm'
  2895 00002570 BF[AACB0000]        <2> 	mov edi, buftxt
  2896                              <2> cpcmd:
  2897 00002575 8A06                <2> 	mov al, [esi]
  2898 00002577 8807                <2> 	mov [edi], al
  2899 00002579 46                  <2> 	inc esi
  2900 0000257A 47                  <2> 	inc edi
  2901 0000257B 3C00                <2> 	cmp al, 0
  2902 0000257D 75F6                <2> 	jne cpcmd
  2903 0000257F E82A060000          <2> 	call run
  2904 00002584 CF                  <2> 	iret
  2905                              <1> intx15:
  2906                              <1> 	%include 'source/interrupts/15_proginfo.asm'
  2907 00002585 BB[AAB70000]        <2> 	mov ebx, variables
  2908 0000258A 8B35[842C0000]      <2> 	mov esi, [currentcommandloc]
  2909 00002590 89F7                <2> 	mov edi, esi
  2910 00002592 31C9                <2> 	xor ecx, ecx
  2911                              <2> getcommandzeroes:
  2912 00002594 8A07                <2> 	mov al, [edi]
  2913 00002596 47                  <2> 	inc edi
  2914 00002597 3C3B                <2> 	cmp al, ';'
  2915 00002599 740B                <2> 	je nomorezeroes
  2916 0000259B 3C00                <2> 	cmp al, 0
  2917 0000259D 7407                <2> 	je nomorezeroes
  2918 0000259F 3C20                <2> 	cmp al, ' '
  2919 000025A1 75F1                <2> 	jne getcommandzeroes
  2920 000025A3 41                  <2> 	inc ecx
  2921 000025A4 EBEE                <2> 	jmp getcommandzeroes
  2922                              <2> nomorezeroes:
  2923 000025A6 41                  <2> 	inc ecx
  2924 000025A7 4F                  <2> 	dec edi
  2925 000025A8 8B1D[36B70000]      <2> 	mov ebx, [uid]
  2926 000025AE 8B15[19650000]      <2> 	mov edx, [currentthread]
  2927 000025B4 CF                  <2> 	iret
  2928                              <2> 	
  2929                              <1> termcopy:
  2930                              <1> %ifdef io.serial
  2931                              <1> 	ret
  2932                              <1> %else
  2933                              <1> %ifdef terminal.vsync
  2934                              <1> 	mov byte [termcopyneeded], 1
  2935                              <1> 	ret
  2936                              <1> %else
  2937 000025B5 E808000000          <1> 	call newtermcopy
  2938 000025BA C3                  <1> 	ret
  2939                              <1> %endif
  2940 000025BB 00                  <1> 	termcopyneeded db 0
  2941 000025BC 00000000            <1> 	termcursorpos dd 0
  2942 000025C0 0000                <1> 	removedvideo dw 0
  2943                              <1> newtermcopy:
  2944 000025C2 60                  <1> 	pusha
  2945 000025C3 BF[C0E62800]        <1> 	mov edi, videobuf
  2946 000025C8 31DB                <1> 	xor ebx, ebx
  2947 000025CA 881D[BB250000]      <1> 	mov [termcopyneeded], bl
  2948 000025D0 668B1D[40240000]    <1> 	mov bx, [videobufpos]
  2949 000025D7 01DF                <1> 	add edi, ebx
  2950 000025D9 893D[BC250000]      <1> 	mov [termcursorpos], edi
  2951 000025DF E8CB000000          <1> 	call switchtermcursor
  2952 000025E4 803D[E49E0000]00    <1> 	cmp byte [guion], 0
  2953 000025EB 0F8420000000        <1> 	je near nowincopy
  2954                              <1> %ifdef gui.included
  2955 000025F1 C605[0B790000]00    <1> 	mov byte [mouseselecton], 0
  2956 000025F8 C605[81220000]01    <1> 	mov byte [termcopyon], 1
  2957 000025FF 803D[80220000]01    <1> 	cmp byte [termguion], 1
  2958 00002606 0F84EE4F0000        <1> 	je near windowvideocopy
  2959                              <1> %endif
  2960 0000260C E997000000          <1> 	jmp nocopytermatall
  2961                              <1> nowincopy:
  2962 00002611 BE00000A00          <1> 	mov esi, 0xA0000
  2963 00002616 A1[3E020000]        <1> 	mov eax, [basecache]
  2964 0000261B C1E004              <1> 	shl eax, 4
  2965 0000261E 29C6                <1> 	sub esi, eax
  2966 00002620 BF[C0E62800]        <1> 	mov edi, videobuf
  2967 00002625 31C9                <1> 	xor ecx, ecx
  2968 00002627 668B0D[44240000]    <1> 	mov cx, [charxy]
  2969                              <1> nowincopy2:
  2970 0000262E 668B07              <1> 	mov ax, [edi]
  2971 00002631 81C7A46A0000        <1> 	add edi, (videobuf2 - videobuf)
  2972 00002637 668B1F              <1> 	mov bx, [edi]
  2973 0000263A 668907              <1> 	mov [edi], ax
  2974 0000263D 81EFA46A0000        <1> 	sub edi, (videobuf2 - videobuf)
  2975 00002643 47                  <1> 	inc edi
  2976 00002644 6639D8              <1> 	cmp ax, bx
  2977 00002647 743E                <1> 	je nopresentwinfont
  2978 00002649 4F                  <1> 	dec edi
  2979 0000264A BB[2D8D0000]        <1> 	mov ebx, fonts
  2980 0000264F 31C0                <1> 	xor eax, eax
  2981 00002651 8A07                <1> 	mov al, [edi]
  2982 00002653 C1E004              <1> 	shl eax, 4
  2983 00002656 01C3                <1> 	add ebx, eax
  2984 00002658 47                  <1> 	inc edi
  2985 00002659 8A27                <1> 	mov ah, [edi]
  2986 0000265B 31D2                <1> 	xor edx, edx
  2987 0000265D 8A15[44240000]      <1> 	mov dl, [charxy]
  2988 00002663 C1C110              <1> 	rol ecx, 16
  2989 00002666 B110                <1> 	mov cl, 16
  2990                              <1> nowinfont:
  2991 00002668 8A03                <1> 	mov al, [ebx]
  2992 0000266A D0C8                <1> 	ror al, 1
  2993 0000266C 80FC07              <1> 	cmp ah, 7
  2994 0000266F 7602                <1> 	jbe notnotfont
  2995 00002671 F6D0                <1> 	not al
  2996                              <1> notnotfont:
  2997 00002673 8806                <1> 	mov [esi], al
  2998 00002675 01D6                <1> 	add esi, edx
  2999 00002677 43                  <1> 	inc ebx
  3000 00002678 FEC9                <1> 	dec cl
  3001 0000267A 80F900              <1> 	cmp cl, 0
  3002 0000267D 75E9                <1> 	jne nowinfont
  3003 0000267F C1E204              <1> 	shl edx, 4
  3004 00002682 29D6                <1> 	sub esi, edx
  3005 00002684 C1C110              <1> 	rol ecx, 16
  3006                              <1> nopresentwinfont:
  3007 00002687 47                  <1> 	inc edi
  3008 00002688 46                  <1> 	inc esi
  3009 00002689 FEC9                <1> 	dec cl
  3010 0000268B 80F900              <1> 	cmp cl, 0
  3011 0000268E 759E                <1> 	jne nowincopy2
  3012 00002690 8A0D[44240000]      <1> 	mov cl, [charxy]
  3013 00002696 31D2                <1> 	xor edx, edx
  3014 00002698 88CA                <1> 	mov dl, cl
  3015 0000269A 29D6                <1> 	sub esi, edx
  3016 0000269C C1E204              <1> 	shl edx, 4
  3017 0000269F 01D6                <1> 	add esi, edx
  3018 000026A1 FECD                <1> 	dec ch
  3019 000026A3 80FD00              <1> 	cmp ch, 0
  3020 000026A6 7586                <1> 	jne nowincopy2
  3021                              <1> nocopytermatall:
  3022 000026A8 E802000000          <1> 	call switchtermcursor
  3023 000026AD 61                  <1> 	popa
  3024 000026AE C3                  <1> 	ret
  3025                              <1> 	
  3026                              <1> switchtermcursor:
  3027 000026AF 8B3D[BC250000]      <1> 	mov edi, [termcursorpos]
  3028 000026B5 8A4701              <1> 	mov al, [edi + 1]
  3029 000026B8 8A27                <1> 	mov ah, [edi]
  3030 000026BA 3C07                <1> 	cmp al, 7
  3031 000026BC 7607                <1> 	jbe movlargecursorterm
  3032 000026BE B007                <1> 	mov al, 7
  3033 000026C0 E902000000          <1> 	jmp movedcursorterm
  3034                              <1> movlargecursorterm:
  3035 000026C5 B0F0                <1> 	mov al, 0xF0
  3036                              <1> movedcursorterm:
  3037 000026C7 884701              <1> 	mov [edi + 1], al
  3038 000026CA 80FC00              <1> 	cmp ah, 0
  3039 000026CD 7504                <1> 	jne fixednocursorterm
  3040 000026CF B420                <1> 	mov ah, " "
  3041 000026D1 8827                <1> 	mov [edi], ah
  3042                              <1> fixednocursorterm:
  3043 000026D3 C3                  <1> 	ret
  3044                              <1> %endif
  3045                                      %include "source/dosints.asm"
  3046                              <1> int20h:
  3047 000026D4 66B8004C            <1> mov ax, 0x4C00
  3048                              <1> int21h:
  3049                              <1> dostosolleros:
  3050 000026D8 6650                <1> 	push ax
  3051 000026DA 66B83000            <1> 	mov ax, NEW_DATA_SEL
  3052 000026DE 8ED8                <1> 	mov ds, ax
  3053 000026E0 8EC0                <1> 	mov es, ax
  3054 000026E2 8EE0                <1> 	mov fs, ax
  3055 000026E4 66B82000            <1> 	mov ax, SYS_DATA_SEL
  3056 000026E8 8EE8                <1> 	mov gs, ax
  3057 000026EA 6658                <1> 	pop ax
  3058 000026EC 9C                  <1> 	pushf
  3059 000026ED 60                  <1> 	pusha
  3060 000026EE 80FC01              <1> 	cmp ah, 1
  3061 000026F1 0F8449000000        <1> 	je near dosgchar
  3062 000026F7 80FC02              <1> 	cmp ah, 2
  3063 000026FA 0F8447000000        <1> 	je near doswchar
  3064 00002700 80FC09              <1> 	cmp ah, 9
  3065 00002703 0F8449000000        <1> 	je near dosprintstr
  3066 00002709 80FC0A              <1> 	cmp ah, 0xA
  3067 0000270C 0F8456000000        <1> 	je near dosgetstr
  3068 00002712 80FC2B              <1> 	cmp ah, 0x2B
  3069 00002715 0F8492000000        <1> 	je near dosgetdate
  3070 0000271B 80FC2C              <1> 	cmp ah, 0x2C
  3071 0000271E 0F84AC000000        <1> 	je near dosgettime
  3072 00002724 80FC4C              <1> 	cmp ah, 0x4C
  3073 00002727 0F84C1000000        <1> 	je near dosexit
  3074                              <1> backtodos:
  3075 0000272D 61                  <1> 	popa
  3076 0000272E 9D                  <1> 	popf
  3077 0000272F 6650                <1> 	push ax
  3078 00002731 66B85000            <1> 	mov ax, DOS_DATA_SEL
  3079 00002735 8ED8                <1> 	mov ds, ax
  3080 00002737 8EC0                <1> 	mov es, ax
  3081 00002739 8EE0                <1> 	mov fs, ax
  3082 0000273B 8EE8                <1> 	mov gs, ax
  3083 0000273D 6658                <1> 	pop ax
  3084 0000273F CF                  <1> 	iret
  3085                              <1> 
  3086                              <1> dosgchar:
  3087 00002740 E8C7FAFFFF          <1> 	call getchar
  3088 00002745 EBE6                <1> 	jmp backtodos
  3089                              <1> 	
  3090                              <1> doswchar:
  3091 00002747 88D0                <1> 	mov al, dl
  3092 00002749 B307                <1> 	mov bl, 7
  3093 0000274B E821FBFFFF          <1> 	call prcharint
  3094 00002750 EBDB                <1> 	jmp backtodos
  3095                              <1> 	
  3096                              <1> dosprintstr:
  3097 00002752 31F6                <1> 	xor esi, esi
  3098 00002754 6689D6              <1> 	mov si, dx
  3099 00002757 81C600004000        <1> 	add esi, dosprogloc
  3100 0000275D B024                <1> 	mov al, "$"
  3101 0000275F B307                <1> 	mov bl, 7
  3102 00002761 E8DCF5FFFF          <1> 	call printint
  3103 00002766 EBC5                <1> 	jmp backtodos
  3104                              <1> 	
  3105                              <1> dosgetstr:
  3106 00002768 31F6                <1> 	xor esi, esi
  3107 0000276A 6689D6              <1> 	mov si, dx
  3108 0000276D 81C600004000        <1> 	add esi, dosprogloc
  3109 00002773 B900000000          <1> 	mov ecx, 0
  3110 00002778 8A0E                <1> 	mov cl, [esi]
  3111 0000277A 81C602000000        <1> 	add esi, 2
  3112 00002780 89F7                <1> 	mov edi, esi
  3113 00002782 8935[A9270000]      <1> 	mov [stringstart], esi
  3114 00002788 01CF                <1> 	add edi, ecx
  3115 0000278A B00A                <1> 	mov al, 10
  3116 0000278C B307                <1> 	mov bl, 7
  3117 0000278E E8A2F6FFFF          <1> 	call rdprintdos
  3118 00002793 89F1                <1> 	mov ecx, esi
  3119 00002795 2B0D[A9270000]      <1> 	sub ecx, [stringstart]
  3120 0000279B 8B35[A9270000]      <1> 	mov esi, [stringstart]
  3121 000027A1 884EFF              <1> 	mov [esi - 1], cl
  3122 000027A4 884EFE              <1> 	mov [esi - 2], cl
  3123 000027A7 EB84                <1> 	jmp backtodos
  3124 000027A9 00000000            <1> stringstart dd 0
  3125                              <1> 
  3126                              <1> dosgetdate:
  3127 000027AD E882260000          <1> 	call time
  3128 000027B2 8A0D[FC4F0000]      <1> 	mov cl, [RTCtimeYear]
  3129 000027B8 B500                <1> 	mov ch, 0
  3130 000027BA 6681C1D007          <1> 	add cx, 2000
  3131 000027BF 8A35[FB4F0000]      <1> 	mov dh, [RTCtimeMonth]
  3132 000027C5 8A15[FA4F0000]      <1> 	mov dl, [RTCtimeDay]
  3133 000027CB E95DFFFFFF          <1> 	jmp backtodos
  3134                              <1> 
  3135                              <1> dosgettime:
  3136 000027D0 E85F260000          <1> 	call time
  3137 000027D5 8A2D[F94F0000]      <1> 	mov ch, [RTCtimeHour]
  3138 000027DB 8A0D[F84F0000]      <1> 	mov cl, [RTCtimeMinute]
  3139 000027E1 8A35[F74F0000]      <1> 	mov dh, [RTCtimeSecond]
  3140 000027E7 B200                <1> 	mov dl, 0
  3141 000027E9 E93FFFFFFF          <1> 	jmp backtodos
  3142                              <1> 	
  3143                              <1> dosexit:
  3144 000027EE BE[088D0000]        <1> 	mov esi, line
  3145 000027F3 E843F5FFFF          <1> 	call print
  3146 000027F8 61                  <1> 	popa
  3147 000027F9 9D                  <1> 	popf
  3148 000027FA 8B25[2AB50000]      <1> 	mov esp, [previousstack]
  3149 00002800 31DB                <1> 	xor ebx, ebx
  3150 00002802 88C3                <1> 	mov bl, al
  3151 00002804 80FB00              <1> 	cmp bl, 0
  3152 00002807 0F85BCF4FFFF        <1> 	jne near exitprog.error
  3153 0000280D C3                  <1> 	ret
  3154                                      %include "source/solleros.asm"
  3155                              <1> 	;SOLLEROS.ASM
  3156                              <1> os:
  3157                              <1> setdefenv:
  3158 0000280E B02F                <1> 	mov al, '/'
  3159 00002810 A2[36B50000]        <1> 	mov [currentfolder], al
  3160 00002815 B801000000          <1> 	mov eax, 1
  3161 0000281A A3[32B50000]        <1> 	mov [currentfolderloc], eax
  3162 0000281F E87DF5FFFF          <1> 	call clear
  3163                              <1> 	
  3164                              <1> bootfilecheck:
  3165 00002824 803D[3AB70000]01    <1> 	cmp byte [ranboot], 1
  3166 0000282B 0F8421000000        <1> 	je near nobootfile
  3167                              <1> 	%ifdef hardware.automatic
  3168 00002831 E817370000          <1> 		call initializelater ;Initialize components that have debug messages
  3169                              <1> 	%endif
  3170 00002836 BF[C78C0000]        <1> 	mov edi, bootfilename
  3171 0000283B BE00004000          <1> 	mov esi, 0x400000
  3172 00002840 E8343B0000          <1> 	call loadfile
  3173 00002845 81FA00000000        <1> 	cmp edx, 0
  3174 0000284B 7505                <1> 	jne nobootfile
  3175 0000284D E8B00D0000          <1> 	call progbatchfound
  3176                              <1> nobootfile:	
  3177 00002852 C605[3AB70000]01    <1> 	mov byte [ranboot], 1
  3178                              <1> 
  3179 00002859 BE[00000000]        <1> 	mov esi, signature
  3180                              <1> .sigcopyloop:	;this prevents an odd error
  3181 0000285E 658A06              <1> 	mov al, [gs:esi]
  3182 00002861 8806                <1> 	mov [esi], al
  3183 00002863 46                  <1> 	inc esi
  3184 00002864 81FE[1A000000]      <1> 	cmp esi, signatureend
  3185 0000286A 72F2                <1> 	jb .sigcopyloop
  3186                              <1> 	
  3187 0000286C BE[00000000]        <1> 	mov esi, signature
  3188 00002871 E8C5F4FFFF          <1> 	call print
  3189 00002876 8B0D[16000000]      <1> 	mov ecx, [signatureend - 4]
  3190 0000287C E8F4060000          <1> 	call showdec
  3191 00002881 BE[088D0000]        <1> 	mov esi, line
  3192 00002886 E8B0F4FFFF          <1> 	call print
  3193 0000288B BE[E48C0000]        <1> 	mov esi, userask
  3194 00002890 E8A6F4FFFF          <1> 	call print
  3195                              <1> usercheck:
  3196 00002895 BE[AACB0000]        <1> 	mov esi, buftxt
  3197 0000289A BF[AACF0000]        <1> 	mov edi, buftxtend
  3198 0000289F B00A                <1> 	mov al, 10
  3199 000028A1 E87DF5FFFF          <1> 	call rdprint
  3200 000028A6 56                  <1> 	push esi
  3201 000028A7 BE[EE8C0000]        <1> 	mov esi, pwdask
  3202 000028AC E88AF4FFFF          <1> 	call print
  3203 000028B1 5E                  <1> 	pop esi
  3204 000028B2 46                  <1> 	inc esi
  3205 000028B3 8935[A6290000]      <1> 	mov [esipass], esi
  3206                              <1> passcheck:
  3207 000028B9 E84EF9FFFF          <1> 	call getchar
  3208 000028BE 3C0A                <1> 	cmp al, 10
  3209 000028C0 0F8436000000        <1> 	je near gotpass
  3210 000028C6 3C08                <1> 	cmp al, 8
  3211 000028C8 0F8410000000        <1> 	je near backpass
  3212 000028CE 8806                <1> 	mov [esi], al
  3213 000028D0 46                  <1> 	inc esi
  3214 000028D1 B02A                <1> 	mov al, "*"
  3215 000028D3 E899F9FFFF          <1> 	call prcharint
  3216 000028D8 EBDF                <1> 	jmp passcheck
  3217 000028DA 08200800            <1> backcursor2 db 8," ",8,0
  3218                              <1> backpass:
  3219 000028DE 3B35[A6290000]      <1> 	cmp esi, [esipass]
  3220 000028E4 0F84CFFFFFFF        <1> 	je near passcheck
  3221 000028EA 4E                  <1> 	dec esi
  3222 000028EB C60600              <1> 	mov byte [esi], 0
  3223 000028EE 56                  <1> 	push esi
  3224 000028EF BE[DA280000]        <1> 	mov esi, backcursor2
  3225 000028F4 E842F4FFFF          <1> 	call print
  3226 000028F9 5E                  <1> 	pop esi
  3227 000028FA EBBD                <1> 	jmp passcheck
  3228                              <1> gotpass:
  3229 000028FC B00A                <1> 	mov al, 10
  3230 000028FE E86EF9FFFF          <1> 	call prcharint
  3231 00002903 30C0                <1> 	xor al, al
  3232 00002905 31C9                <1> 	xor ecx, ecx
  3233 00002907 8806                <1> 	mov [esi], al
  3234 00002909 BB[0A8D0000]        <1> 	mov ebx, userlst
  3235                              <1> userfind:
  3236 0000290E BE[AACB0000]        <1> 	mov esi, buftxt
  3237 00002913 8A06                <1> 	mov al, [esi]
  3238 00002915 3C00                <1> 	cmp al, 0
  3239 00002917 0F84F1FEFFFF        <1> 	je near os
  3240 0000291D 891D[AA290000]      <1> 	mov [usercache], ebx
  3241 00002923 E860030000          <1> 	call tester
  3242 00002928 3C01                <1> 	cmp al, 1
  3243 0000292A 7416                <1> 	je pwdtest
  3244 0000292C 41                  <1> 	inc ecx
  3245                              <1> nxtuser:
  3246 0000292D 8A03                <1> 	mov al, [ebx]
  3247 0000292F 43                  <1> 	inc ebx
  3248 00002930 3C00                <1> 	cmp al, 0
  3249 00002932 75F9                <1> 	jne nxtuser
  3250 00002934 81FB[2D8D0000]      <1> 	cmp ebx, userlstend
  3251 0000293A 0F83CEFEFFFF        <1> 	jae near os
  3252 00002940 EBCC                <1> 	jmp userfind
  3253                              <1> pwdtest:
  3254 00002942 46                  <1> 	inc esi
  3255 00002943 43                  <1> 	inc ebx
  3256 00002944 E83F030000          <1> 	call tester
  3257 00002949 3C01                <1> 	cmp al, 1
  3258 0000294B 7402                <1> 	je pwdrgt
  3259 0000294D EBDE                <1> 	jmp nxtuser
  3260                              <1> pwdrgt:
  3261 0000294F D1E9                <1> 	shr ecx, 1
  3262 00002951 890D[36B70000]      <1> 	mov [uid], ecx
  3263 00002957 E845F4FFFF          <1> 	call clear
  3264 0000295C 31C9                <1> 	xor ecx, ecx
  3265 0000295E 41                  <1> 	inc ecx
  3266 0000295F 890D[0CBC2900]      <1> 	mov [commandbufpos], ecx
  3267                              <1> returnfromexp:
  3268 00002965 66B90002            <1> 	mov cx, 200h
  3269 00002969 BE[AACB0000]        <1> 	mov esi, buftxt
  3270 0000296E 8935[842C0000]      <1> 	mov [currentcommandloc], esi
  3271 00002974 E825000000          <1> 	call bufclr
  3272                              <1> clearolddata:
  3273 00002979 31C0                <1> 	xor eax, eax
  3274 0000297B A2[3BB70000]        <1> 	mov [IFON], al
  3275 00002980 A2[3CB70000]        <1> 	mov [IFTRUE], al
  3276 00002985 A2[A4B70000]        <1> 	mov [BATCHISON], al
  3277 0000298A A3[A0B70000]        <1> 	mov [BATCHPOS], eax
  3278 0000298F A2[A5B70000]        <1> 	mov [LOOPON], al
  3279 00002994 A3[A6B70000]        <1> 	mov [LOOPPOS], eax
  3280 00002999 E933000000          <1> 	jmp nwcmd
  3281                              <1> bufclr:	
  3282 0000299E 30C0                <1> 	xor al, al
  3283 000029A0 8806                <1> 	mov [esi], al
  3284 000029A2 46                  <1> 	inc esi
  3285 000029A3 E2F9                <1> 	loop bufclr
  3286 000029A5 C3                  <1> 	ret
  3287                              <1> 
  3288 000029A6 00000000            <1> esipass dd 0
  3289 000029AA [0A8D0000]          <1> usercache dd userlst
  3290                              <1> 	
  3291                              <1> buftxtclear:
  3292 000029AE 30C0                <1> 	xor al, al
  3293 000029B0 BE[AACB0000]        <1> 	mov esi, buftxt
  3294 000029B5 81FE[AACF0000]      <1> clearbuftxt: cmp esi, buf2
  3295 000029BB 730E                <1> 	jae retbufclr
  3296 000029BD 8806                <1> 	mov [esi], al
  3297 000029BF 46                  <1> 	inc esi
  3298 000029C0 EBF3                <1> 	jmp clearbuftxt
  3299                              <1> 
  3300 000029C2 39DE                <1> clearitbuf: cmp esi, ebx
  3301 000029C4 7305                <1> 	jae retbufclr
  3302 000029C6 8806                <1> 	mov [esi], al
  3303 000029C8 46                  <1> 	inc esi
  3304 000029C9 EBF7                <1> 	jmp clearitbuf
  3305 000029CB C3                  <1> retbufclr: ret
  3306                              <1> 
  3307 000029CC E900000000          <1> full:	jmp nwcmd
  3308                              <1> 
  3309                              <1> shush:	;SollerOS Hardly Unix-compatible Shell
  3310                              <1> nwcmd:
  3311 000029D1 FB                  <1> 	sti
  3312 000029D2 31C0                <1> 	xor eax, eax
  3313 000029D4 3905[A62B0000]      <1> 	cmp [nextcommandloc], eax
  3314 000029DA 7413                <1> 	je nomultiplecommand
  3315 000029DC 8B35[A62B0000]      <1> 	mov esi, [nextcommandloc]
  3316 000029E2 8935[AA2B0000]      <1> 	mov [thiscommandloc], esi
  3317 000029E8 E8C6010000          <1> 	call fixvariables
  3318 000029ED EBE2                <1> 	jmp nwcmd
  3319                              <1> nomultiplecommand:
  3320 000029EF A3[AA2B0000]        <1> 	mov [thiscommandloc], eax
  3321 000029F4 3805[18650000]      <1> 	cmp [threadson], al
  3322 000029FA 7405                <1> 	je noclinwcmd
  3323 000029FC A2[18650000]        <1> 	mov [threadson], al
  3324                              <1> noclinwcmd:
  3325 00002A01 B001                <1> 	mov al, 1
  3326 00002A03 3805[A4B70000]      <1> 	cmp [BATCHISON], al
  3327 00002A09 7501                <1> 	jne cancel
  3328 00002A0B C3                  <1> 	ret
  3329 00002A0C 30C0                <1> cancel:	xor al, al
  3330 00002A0E A2[3BB70000]        <1> 	mov [IFON], al
  3331 00002A13 A2[A4B70000]        <1> 	mov [BATCHISON], al
  3332 00002A18 B05B                <1> 	mov al, '['
  3333 00002A1A 66BB0700            <1> 	mov bx, 7
  3334 00002A1E E85FF8FFFF          <1> 	call prcharq
  3335 00002A23 8B35[AA290000]      <1> 	mov esi, [usercache]
  3336 00002A29 E8FBF2FFFF          <1> 	call printquiet
  3337 00002A2E BE[F88C0000]        <1> 	mov esi, computer
  3338 00002A33 E8F1F2FFFF          <1> 	call printquiet
  3339 00002A38 BE[36B50000]        <1> 	mov esi, currentfolder
  3340 00002A3D 0335[2EB50000]      <1> 	add esi, [lastfolderloc]
  3341 00002A43 E8E1F2FFFF          <1> 	call printquiet
  3342 00002A48 BE[038D0000]        <1> 	mov esi, endprompt
  3343 00002A4D E8E9F2FFFF          <1> 	call print
  3344 00002A52 E857FFFFFF          <1> 	call buftxtclear
  3345 00002A57 BE[AACB0000]        <1> 	mov esi, buftxt
  3346 00002A5C C605[F5210000]01    <1> 	mov byte [commandedit], 1
  3347 00002A63 B00A                <1> 	mov al, 10
  3348 00002A65 66BB0700            <1> 	mov bx, 7
  3349 00002A69 BF[AACF0000]        <1> 	mov edi, buftxtend
  3350 00002A6E E8B0F3FFFF          <1> 	call rdprint
  3351 00002A73 C605[F5210000]00    <1> 	mov byte [commandedit], 0
  3352 00002A7A 803D[AACB0000]00    <1> 	cmp byte [buftxt], 0
  3353 00002A81 0F844AFFFFFF        <1> 	je near nwcmd
  3354 00002A87 8B35[0CBC2900]      <1> gotcmd:	mov esi, [commandbufpos]
  3355 00002A8D 8935[08BC2900]      <1> 	mov [lastcommandpos], esi
  3356 00002A93 FF05[14BC2900]      <1> 	inc dword [commandsentered]
  3357 00002A99 BF[AACB0000]        <1> 	mov edi, buftxt
  3358 00002A9E 81C6[18BC2900]      <1> 	add esi, commandbuf
  3359 00002AA4 81FE[18CC2900]      <1> 	cmp esi, commandbufend
  3360 00002AAA 7605                <1> 	jbe copycommand
  3361 00002AAC BE[18BC2900]        <1> 	mov esi, commandbuf
  3362                              <1> copycommand:
  3363 00002AB1 8A07                <1> 	mov al, [edi]
  3364 00002AB3 8806                <1> 	mov [esi], al
  3365 00002AB5 47                  <1> 	inc edi
  3366 00002AB6 46                  <1> 	inc esi
  3367 00002AB7 3C00                <1> 	cmp al, 0
  3368 00002AB9 740F                <1> 	je donecopy
  3369 00002ABB 81FE[18CC2900]      <1> 	cmp esi, commandbufend
  3370 00002AC1 76EE                <1> 	jbe copycommand
  3371 00002AC3 BE[18BC2900]        <1> 	mov esi, commandbuf
  3372 00002AC8 EBE7                <1> 	jmp copycommand
  3373                              <1> donecopy:
  3374 00002ACA 81EE[18BC2900]      <1> 	sub esi, commandbuf
  3375 00002AD0 8935[0CBC2900]      <1> 	mov [commandbufpos], esi
  3376 00002AD6 E8D3000000          <1> 	call run
  3377 00002ADB E9F1FEFFFF          <1> 	jmp nwcmd
  3378                              <1> 
  3379 00002AE0 E8C9FEFFFF          <1> input:	call buftxtclear
  3380 00002AE5 BE[AACB0000]        <1> 	mov esi, buftxt		;puts input into buftxt AND onto screen
  3381 00002AEA BF[AACF0000]        <1> 	mov edi, buftxtend
  3382 00002AEF B00A                <1> stdin:	mov al, 10
  3383 00002AF1 B307                <1> 	mov bl, 7
  3384 00002AF3 E82BF3FFFF          <1> 	call rdprint
  3385 00002AF8 C3                  <1> 	ret
  3386                              <1> 
  3387                              <1> replacevariable:
  3388 00002AF9 8A4601              <1> 	mov al, [esi + 1]
  3389 00002AFC C64601FF            <1> 	mov byte [esi + 1], 255
  3390 00002B00 3C24                <1> 	cmp al, "$"
  3391 00002B02 0F84AB000000        <1> 	je near fixvariables
  3392 00002B08 884601              <1> 	mov [esi + 1], al
  3393 00002B0B 56                  <1> 	push esi
  3394 00002B0C 81EE[AACB0000]      <1> 	sub esi, buftxt
  3395 00002B12 89F7                <1> 	mov edi, esi
  3396 00002B14 81C6[AACB0000]      <1> 	add esi, buftxt
  3397 00002B1A 47                  <1> 	inc edi
  3398 00002B1B BB[AAB70000]        <1> 	mov ebx, variables
  3399 00002B20 E8A3140000          <1> 	call nxtvrech
  3400 00002B25 89F7                <1> 	mov edi, esi
  3401 00002B27 31DB                <1> 	xor ebx, ebx
  3402 00002B29 4E                  <1> 	dec esi
  3403                              <1> findvarname:
  3404 00002B2A 4E                  <1> 	dec esi
  3405 00002B2B 8A06                <1> 	mov al, [esi]
  3406 00002B2D 43                  <1> 	inc ebx
  3407 00002B2E 3C04                <1> 	cmp al, 4
  3408 00002B30 75F8                <1> 	jne findvarname
  3409 00002B32 5E                  <1> 	pop esi
  3410                              <1> replacevarloop:
  3411 00002B33 8A07                <1> 	mov al, [edi]
  3412 00002B35 3C00                <1> 	cmp al, 0
  3413 00002B37 0F8413000000        <1> 	je near compressbuftxt
  3414 00002B3D 81FB00000000        <1> 	cmp ebx, 0
  3415 00002B43 0F8416000000        <1> 	je near expandbuftxt
  3416 00002B49 8806                <1> 	mov [esi], al
  3417 00002B4B 4B                  <1> 	dec ebx
  3418 00002B4C 46                  <1> 	inc esi
  3419 00002B4D 47                  <1> 	inc edi
  3420 00002B4E EBE3                <1> 	jmp replacevarloop
  3421                              <1> compressbuftxt:
  3422 00002B50 8A041E              <1> 	mov al, [esi + ebx]
  3423 00002B53 8806                <1> 	mov [esi], al
  3424 00002B55 46                  <1> 	inc esi
  3425 00002B56 3C00                <1> 	cmp al, 0
  3426 00002B58 75F6                <1> 	jne compressbuftxt
  3427 00002B5A E954000000          <1> 	jmp fixvariables
  3428                              <1> expandbuftxt:
  3429 00002B5F 89F1                <1> 	mov ecx, esi
  3430 00002B61 8A26                <1> 	mov ah, [esi]
  3431                              <1> expandbuftxtlp:
  3432 00002B63 8A1E                <1> 	mov bl, [esi]
  3433 00002B65 46                  <1> 	inc esi
  3434 00002B66 8A3E                <1> 	mov bh, [esi]
  3435 00002B68 8826                <1> 	mov [esi], ah
  3436 00002B6A 88FC                <1> 	mov ah, bh
  3437 00002B6C 80FB00              <1> 	cmp bl, 0
  3438 00002B6F 75F2                <1> 	jne expandbuftxtlp
  3439 00002B71 89CE                <1> 	mov esi, ecx
  3440 00002B73 8806                <1> 	mov [esi], al
  3441 00002B75 47                  <1> 	inc edi
  3442 00002B76 8A07                <1> 	mov al, [edi]
  3443 00002B78 3C00                <1> 	cmp al, 0
  3444 00002B7A 0F8433000000        <1> 	je near fixvariables
  3445 00002B80 46                  <1> 	inc esi
  3446 00002B81 EBDC                <1> 	jmp expandbuftxt
  3447                              <1> multipleprogline:
  3448 00002B83 30E4                <1> 	xor ah, ah
  3449 00002B85 8826                <1> 	mov [esi], ah
  3450 00002B87 46                  <1> 	inc esi
  3451 00002B88 8935[A62B0000]      <1> 	mov [nextcommandloc], esi
  3452 00002B8E E93E000000          <1> 	jmp donefixvariables
  3453                              <1> inlinecomment:	;if the following char is #, include a #, otherwise end the line
  3454 00002B93 46                  <1> 	inc esi
  3455 00002B94 8A06                <1> 	mov al, [esi]
  3456 00002B96 C606FF              <1> 	mov byte [esi], 255
  3457 00002B99 3C23                <1> 	cmp al, '#'
  3458 00002B9B 7416                <1> 	je fixvariables
  3459 00002B9D 4E                  <1> 	dec esi
  3460 00002B9E C60600              <1> 	mov byte [esi], 0
  3461 00002BA1 E90D000000          <1> 	jmp fixvariables
  3462                              <1> 	
  3463 00002BA6 00000000            <1> nextcommandloc dd 0
  3464 00002BAA 00000000            <1> thiscommandloc dd 0	
  3465                              <1> run:
  3466 00002BAE BE[AACB0000]        <1> 	mov esi, buftxt
  3467 00002BB3 46                  <1> fixvariables:	inc esi
  3468 00002BB4 8A06                <1> 	mov al, [esi]
  3469 00002BB6 3C23                <1> 	cmp al, '#'	;inline comment
  3470 00002BB8 74D9                <1> 	je inlinecomment
  3471 00002BBA 3C24                <1> 	cmp al, '$' ;variable
  3472 00002BBC 0F8437FFFFFF        <1> 	je near replacevariable
  3473 00002BC2 3C3B                <1> 	cmp al, ';' ;program list
  3474 00002BC4 74BD                <1> 	je multipleprogline
  3475 00002BC6 3C00                <1> 	cmp al, 0
  3476 00002BC8 75E9                <1> 	jne fixvariables
  3477 00002BCA 31C0                <1> 	xor eax, eax
  3478 00002BCC A3[A62B0000]        <1> 	mov [nextcommandloc], eax
  3479                              <1> donefixvariables:
  3480 00002BD1 803D[6F310000]00    <1> 	cmp byte [indexdone], 0
  3481 00002BD8 7505                <1> 	jne progtest
  3482 00002BDA E8FB040000          <1> 	call indexfiles
  3483                              <1> progtest:
  3484 00002BDF 31C0                <1> 	xor eax, eax
  3485 00002BE1 BB[2AB10000]        <1> 	mov ebx, fileindex
  3486 00002BE6 668B03              <1> prgnxt:	mov ax, [ebx]
  3487 00002BE9 B1FF                <1> 	mov cl, 255
  3488 00002BEB B52C                <1> 	mov ch, 44
  3489 00002BED 6639C8              <1> 	cmp ax, cx
  3490 00002BF0 740B                <1> 	je fndprg
  3491 00002BF2 43                  <1> 	inc ebx
  3492 00002BF3 81FB[2AB50000]      <1> 	cmp ebx, fileindexend
  3493 00002BF9 735D                <1> 	jae prgnf
  3494 00002BFB EBE9                <1> 	jmp prgnxt
  3495 00002BFD 81C302000000        <1> fndprg: add ebx, 2
  3496 00002C03 31C9                <1> 	xor ecx, ecx
  3497 00002C05 BE[AACB0000]        <1> 	mov esi, buftxt
  3498 00002C0A 390D[AA2B0000]      <1> 	cmp [thiscommandloc], ecx
  3499 00002C10 7406                <1> 	je noprgtstmultiple
  3500 00002C12 8B35[AA2B0000]      <1> 	mov esi, [thiscommandloc]
  3501                              <1> noprgtstmultiple:
  3502 00002C18 E8A6000000          <1> 	call cndtest
  3503 00002C1D 3C01                <1> 	cmp al, 1
  3504 00002C1F 7302                <1> 	jae prggood
  3505 00002C21 EBC3                <1> 	jmp prgnxt
  3506 00002C23 81FB[2AB50000]      <1> prggood: cmp ebx, fileindexend
  3507 00002C29 7358                <1> 	jae prgdn
  3508 00002C2B 31C0                <1> 	xor eax, eax
  3509 00002C2D BE[AACB0000]        <1> 	mov esi, buftxt
  3510 00002C32 3905[AA2B0000]      <1> 	cmp [thiscommandloc], eax
  3511 00002C38 7406                <1> 	je noprggoodmul
  3512 00002C3A 8B35[AA2B0000]      <1> 	mov esi, [thiscommandloc]
  3513                              <1> noprggoodmul:
  3514 00002C40 8935[842C0000]      <1> 	mov [currentcommandloc], esi
  3515 00002C46 81C303000000        <1> 	add ebx, 3
  3516 00002C4C 8B3B                <1> 	mov edi, [ebx]
  3517 00002C4E C605[18650000]02    <1> 	mov byte [threadson], 2
  3518 00002C55 FFD7                <1> 	call edi
  3519 00002C57 C3                  <1> 	ret
  3520                              <1> prgnf:	
  3521 00002C58 8B35[842C0000]      <1> 	mov esi, [currentcommandloc]
  3522 00002C5E 8A06                <1> 	mov al, [esi]
  3523 00002C60 3C00                <1> 	cmp al, 0
  3524 00002C62 741F                <1> 	je prgdn
  3525 00002C64 BE[CF8C0000]        <1> 	mov esi, notfound1
  3526 00002C69 E8CDF0FFFF          <1> 	call print
  3527 00002C6E 8B35[842C0000]      <1> 	mov esi, [currentcommandloc]
  3528 00002C74 E8C2F0FFFF          <1> 	call print
  3529 00002C79 BE[D78C0000]        <1> 	mov esi, notfound2
  3530 00002C7E E8B8F0FFFF          <1> 	call print
  3531 00002C83 C3                  <1> prgdn:	ret
  3532                              <1> 
  3533 00002C84 00000000            <1> currentcommandloc dd 0
  3534                              <1> 
  3535                              <1> tester:			;si=user bx=prog returns 1 in al if true
  3536 00002C88 6631C0              <1> 	xor ax, ax
  3537 00002C8B 8A06                <1> retest:	mov al, [esi]
  3538 00002C8D 8A23                <1> 	mov ah, [ebx]
  3539 00002C8F 3C00                <1> 	cmp al, 0
  3540 00002C91 7408                <1> 	je testtrue
  3541 00002C93 38E0                <1> 	cmp al, ah
  3542 00002C95 750C                <1> 	jne testfalse
  3543 00002C97 43                  <1> 	inc ebx
  3544 00002C98 46                  <1> 	inc esi
  3545 00002C99 EBF0                <1> 	jmp retest
  3546                              <1> testtrue:
  3547 00002C9B 80FC00              <1> 	cmp ah, 0
  3548 00002C9E 7503                <1> 	jne testfalse
  3549 00002CA0 B001                <1> 	mov al, 1
  3550 00002CA2 C3                  <1> 	ret
  3551                              <1> testfalse:
  3552 00002CA3 30C0                <1> 	xor al, al
  3553 00002CA5 C3                  <1> 	ret
  3554                              <1> 
  3555                              <1> optest:			;si=user bx=prog returns 1 in al if true
  3556 00002CA6 30C0                <1> 	xor al, al
  3557                              <1> opretest:
  3558 00002CA8 8A06                <1> 	mov al, [esi]
  3559 00002CAA 8A23                <1> 	mov ah, [ebx]
  3560 00002CAC 38E0                <1> 	cmp al, ah
  3561 00002CAE 7510                <1> 	jne optestfalse
  3562 00002CB0 80FC00              <1> 	cmp ah, 0
  3563 00002CB3 7404                <1> 	je optesttrue
  3564 00002CB5 43                  <1> 	inc ebx
  3565 00002CB6 46                  <1> 	inc esi
  3566 00002CB7 EBEF                <1> 	jmp opretest
  3567                              <1> optesttrue:
  3568 00002CB9 3C00                <1> 	cmp al, 0
  3569 00002CBB 7503                <1> 	jne optestfalse
  3570 00002CBD B001                <1> 	mov al, 1
  3571 00002CBF C3                  <1> 	ret
  3572                              <1> optestfalse:
  3573 00002CC0 30C0                <1> 	xor al, al
  3574 00002CC2 C3                  <1> 	ret
  3575                              <1> 
  3576                              <1> cndtest:			;si=user bx=prog cl=endchar returns 1 in al if true
  3577 00002CC3 30C0                <1> 	xor al, al
  3578 00002CC5 8A06                <1> cndretest:	mov al, [esi]
  3579 00002CC7 8A23                <1> 	mov ah, [ebx]
  3580 00002CC9 38CC                <1> 	cmp ah, cl
  3581 00002CCB 7408                <1> 	je cndtesttrue
  3582 00002CCD 38E0                <1> 	cmp al, ah
  3583 00002CCF 750B                <1> 	jne cndtestfalse
  3584 00002CD1 43                  <1> 	inc ebx
  3585 00002CD2 46                  <1> 	inc esi
  3586 00002CD3 EBF0                <1> 	jmp cndretest
  3587                              <1> cndtesttrue:
  3588 00002CD5 38C8                <1> 	cmp al, cl
  3589 00002CD7 7506                <1> 	jne cndtestalmost
  3590 00002CD9 B001                <1> 	mov al, 1
  3591 00002CDB C3                  <1> 	ret
  3592                              <1> cndtestfalse:
  3593 00002CDC 30C0                <1> 	xor al, al
  3594 00002CDE C3                  <1> 	ret
  3595                              <1> cndtestalmost:
  3596 00002CDF B002                <1> 	mov al, 2
  3597 00002CE1 C3                  <1> 	ret
  3598                              <1> 	
  3599                              <1> array:				;arraystart in si, arrayend in bx, arrayseperator in cx
  3600                              <1> 		                ;ends if array seperator is found backwards after 0
  3601                              <1> 	arnxt:	      
  3602 00002CE2 88E8                <1> 		mov al, ch
  3603 00002CE4 88CC                <1> 		mov ah, cl        
  3604 00002CE6 663906              <1> 		cmp [esi], ax
  3605 00002CE9 744D                <1> 		je ardn
  3606 00002CEB 66390E              <1> 		cmp [esi], cx
  3607 00002CEE 7407                <1> 		je arfnd
  3608 00002CF0 46                  <1> 		inc esi
  3609 00002CF1 39DE                <1> 		cmp esi, ebx
  3610 00002CF3 7343                <1> 		jae ardn
  3611 00002CF5 EBEB                <1> 		jmp arnxt
  3612 00002CF7 81C602000000        <1> 	arfnd: add esi, 2
  3613 00002CFD 891D[392D0000]      <1> 		mov [arbx], ebx
  3614 00002D03 890D[3D2D0000]      <1> 		mov [arcx], ecx
  3615 00002D09 E82DF0FFFF          <1> 		call print
  3616 00002D0E 8935[3F2D0000]      <1> 		mov [arsi], esi
  3617 00002D14 BE[088D0000]        <1> 		mov esi, line
  3618 00002D19 E81DF0FFFF          <1> 		call print
  3619 00002D1E 8B1D[392D0000]      <1> 		mov ebx, [arbx]
  3620 00002D24 668B0D[3D2D0000]    <1> 		mov cx, [arcx]
  3621 00002D2B 8B35[3F2D0000]      <1> 		mov esi, [arsi]
  3622 00002D31 46                  <1> 		inc esi
  3623 00002D32 39DE                <1> 		cmp esi, ebx
  3624 00002D34 7302                <1> 		jae ardn
  3625 00002D36 EBAA                <1> 		jmp arnxt
  3626 00002D38 C3                  <1> 	ardn:	ret
  3627 00002D39 00000000            <1> arbx:	dw 0,0
  3628 00002D3D 0000                <1> arcx:	db 0,0
  3629 00002D3F 00000000            <1> arsi:	dw 0,0
  3630                              <1> 
  3631                              <1> clearbuffer:
  3632 00002D43 BE[AACF0000]        <1> 	mov esi, buf2
  3633 00002D48 B030                <1> 	mov al, '0'
  3634 00002D4A 81FE[BECF0000]      <1> clearbuf: cmp esi, numbuf
  3635 00002D50 7305                <1> 	jae doneclearbuff
  3636 00002D52 8806                <1> 	mov [esi], al
  3637 00002D54 46                  <1> 	inc esi
  3638 00002D55 EBF3                <1> 	jmp clearbuf
  3639                              <1> doneclearbuff: 
  3640 00002D57 C3                  <1> 		ret
  3641                              <1> 
  3642                              <1> convert:
  3643 00002D58 4E                  <1> 	dec esi
  3644 00002D59 89F3                <1> 	mov ebx, esi		;place to convert into must be in esi, number to convert must be in ecx
  3645                              <1> .lp:
  3646 00002D5B 89DE                <1> 	mov esi, ebx
  3647 00002D5D 81EE09000000        <1> 	sub esi, 9
  3648 00002D63 81F900CA9A3B        <1> 	cmp ecx, 1000000000
  3649 00002D69 720A                <1> 	jb .8
  3650 00002D6B 81E900CA9A3B        <1> 	sub ecx, 1000000000
  3651 00002D71 FE06                <1> 	inc byte [esi]
  3652 00002D73 EBE6                <1> 	jmp .lp
  3653 00002D75 46                  <1> .8:	inc esi
  3654 00002D76 81F900E1F505        <1> 	cmp ecx, 100000000
  3655 00002D7C 720A                <1> 	jb .7
  3656 00002D7E 81E900E1F505        <1> 	sub ecx, 100000000
  3657 00002D84 FE06                <1> 	inc byte [esi]
  3658 00002D86 EBD3                <1> 	jmp .lp
  3659 00002D88 46                  <1> .7:	inc esi
  3660 00002D89 81F980969800        <1> 	cmp ecx, 10000000
  3661 00002D8F 720A                <1> 	jb .6
  3662 00002D91 81E980969800        <1> 	sub ecx, 10000000
  3663 00002D97 FE06                <1> 	inc byte [esi]
  3664 00002D99 EBC0                <1> 	jmp .lp
  3665 00002D9B 46                  <1> .6:	inc esi
  3666 00002D9C 81F940420F00        <1> 	cmp ecx, 1000000
  3667 00002DA2 720A                <1> 	jb .5
  3668 00002DA4 81E940420F00        <1> 	sub ecx, 1000000
  3669 00002DAA FE06                <1> 	inc byte [esi]
  3670 00002DAC EBAD                <1> 	jmp .lp
  3671 00002DAE 46                  <1> .5:	inc esi
  3672 00002DAF 81F9A0860100        <1> 	cmp ecx, 100000
  3673 00002DB5 720A                <1> 	jb .4
  3674 00002DB7 81E9A0860100        <1> 	sub ecx, 100000
  3675 00002DBD FE06                <1> 	inc byte [esi]
  3676 00002DBF EB9A                <1> 	jmp .lp
  3677 00002DC1 46                  <1> .4:	inc esi
  3678 00002DC2 81F910270000        <1> 	cmp ecx, 10000
  3679 00002DC8 720A                <1> 	jb .3
  3680 00002DCA 81E910270000        <1> 	sub ecx, 10000
  3681 00002DD0 FE06                <1> 	inc byte [esi]
  3682 00002DD2 EB87                <1> 	jmp .lp
  3683 00002DD4 46                  <1> .3:	inc esi
  3684 00002DD5 81F9E8030000        <1> 	cmp ecx, 1000
  3685 00002DDB 720D                <1> 	jb .2
  3686 00002DDD 81E9E8030000        <1> 	sub ecx, 1000
  3687 00002DE3 FE06                <1> 	inc byte [esi]
  3688 00002DE5 E971FFFFFF          <1> 	jmp .lp
  3689 00002DEA 46                  <1> .2:	inc esi
  3690 00002DEB 81F964000000        <1> 	cmp ecx, 100
  3691 00002DF1 720D                <1> 	jb .1
  3692 00002DF3 81E964000000        <1> 	sub ecx, 100
  3693 00002DF9 FE06                <1> 	inc byte [esi]
  3694 00002DFB E95BFFFFFF          <1> 	jmp .lp
  3695 00002E00 46                  <1> .1:	inc esi
  3696 00002E01 81F90A000000        <1> 	cmp ecx, 10
  3697 00002E07 720D                <1> 	jb .0
  3698 00002E09 81E90A000000        <1> 	sub ecx, 10
  3699 00002E0F FE06                <1> 	inc byte [esi]
  3700 00002E11 E945FFFFFF          <1> 	jmp .lp
  3701 00002E16 46                  <1> .0:	inc esi
  3702 00002E17 81F901000000        <1> 	cmp ecx, 1
  3703 00002E1D 720D                <1> 	jb .dn
  3704 00002E1F 81E901000000        <1> 	sub ecx, 1
  3705 00002E25 FE06                <1> 	inc byte [esi]
  3706 00002E27 E92FFFFFFF          <1> 	jmp .lp
  3707                              <1> .dn:
  3708 00002E2C C3                  <1> 	ret
  3709                              <1> 
  3710                              <1> 	
  3711                              <1> 
  3712 00002E2D 00<rept>            <1> hexnumber times 8 db 0
  3713 00002E35 202000              <1> hexnumberend db "  ",0
  3714                              <1> 
  3715                              <1> converthex:
  3716                              <1> .clear:	;place to convert to in esi, end of buffer in edi number in ecx
  3717 00002E38 56                  <1> 	push esi
  3718 00002E39 B030                <1> 	mov al, "0"
  3719 00002E3B 39FE                <1> .clearlp: cmp esi, edi
  3720 00002E3D 7305                <1> 	jae .doneclear
  3721 00002E3F 8806                <1> 	mov [esi], al
  3722 00002E41 46                  <1> 	inc esi
  3723 00002E42 EBF7                <1> 	jmp .clearlp
  3724                              <1> .doneclear:
  3725 00002E44 81EE02000000        <1> 	sub esi, 2
  3726 00002E4A 89C8                <1> 	mov eax, ecx
  3727                              <1> .loop:
  3728 00002E4C 30FF                <1> 	xor bh, bh
  3729 00002E4E 88C3                <1> 	mov bl, al
  3730 00002E50 66C1E304            <1> 	shl bx, 4
  3731 00002E54 C0EB04              <1> 	shr bl, 4
  3732 00002E57 86DF                <1> 	xchg bl, bh ;they are backwards
  3733 00002E59 80C330              <1> 	add bl, 48
  3734 00002E5C 80FB39              <1> 	cmp bl, "9"
  3735 00002E5F 7609                <1> 	jbe .goodbl
  3736 00002E61 80EB30              <1> 	sub bl, 48
  3737 00002E64 80EB0A              <1> 	sub bl, 0xA
  3738 00002E67 80C341              <1> 	add bl, "A"
  3739                              <1> .goodbl:
  3740 00002E6A 80C730              <1> 	add bh, 48
  3741 00002E6D 80FF39              <1> 	cmp bh, "9"
  3742 00002E70 7609                <1> 	jbe .goodbh
  3743 00002E72 80EF30              <1> 	sub bh, 48
  3744 00002E75 80EF0A              <1> 	sub bh, 0xA
  3745 00002E78 80C741              <1> 	add bh, "A"
  3746                              <1> .goodbh:
  3747 00002E7B C1E808              <1> 	shr eax, 8
  3748 00002E7E 66891E              <1> 	mov [esi], bx
  3749 00002E81 81EE02000000        <1> 	sub esi, 2
  3750 00002E87 3B3424              <1> 	cmp esi, [esp]
  3751 00002E8A 7207                <1> 	jb .done
  3752 00002E8C 3D00000000          <1> 	cmp eax, 0
  3753 00002E91 75B9                <1> 	jne .loop
  3754                              <1> .done:
  3755 00002E93 5E                  <1> 	pop esi
  3756 00002E94 C3                  <1> 	ret
  3757                              <1> 	
  3758                              <1> 	
  3759 00002E95 00                  <1> smallhex db 0
  3760 00002E96 01                  <1> firsthexshown db 1
  3761                              <1> showhexsmall:
  3762 00002E97 C605[952E0000]01    <1> 	mov byte [smallhex], 1
  3763 00002E9E E808000000          <1> 	call showhex
  3764 00002EA3 C605[952E0000]00    <1> 	mov byte [smallhex], 0
  3765 00002EAA C3                  <1> 	ret
  3766                              <1> showhex:
  3767 00002EAB 60                  <1> 	pusha
  3768 00002EAC BE[2D2E0000]        <1> 	mov esi, hexnumber
  3769 00002EB1 BF[352E0000]        <1> 	mov edi, hexnumberend
  3770 00002EB6 E87DFFFFFF          <1> 	call converthex
  3771 00002EBB 803D[962E0000]01    <1> 	cmp byte [firsthexshown], 1
  3772 00002EC2 7503                <1> 	jne .show
  3773 00002EC4 6631D2              <1> 	xor dx, dx
  3774                              <1> .show:
  3775 00002EC7 803D[962E0000]03    <1> 	cmp byte [firsthexshown], 3
  3776 00002ECE 750A                <1> 	jne .nonewhexline
  3777 00002ED0 BE[088D0000]        <1> 	mov esi, line
  3778 00002ED5 E861EEFFFF          <1> 	call print
  3779                              <1> .nonewhexline:
  3780 00002EDA 803D[962E0000]04    <1> 	cmp byte [firsthexshown], 4
  3781 00002EE1 7527                <1> 	jne .notab
  3782 00002EE3 B1A0                <1> 	mov cl, 160
  3783 00002EE5 28D1                <1> 	sub cl, dl
  3784 00002EE7 C0E905              <1> 	shr cl, 5
  3785 00002EEA C0E105              <1> 	shl cl, 5
  3786 00002EED 80F900              <1> 	cmp cl, 0
  3787 00002EF0 750F                <1> 	jne .nonewline
  3788 00002EF2 BE[088D0000]        <1> 	mov esi, line
  3789 00002EF7 E83FEEFFFF          <1> 	call print
  3790 00002EFC E909000000          <1> 	jmp .notab
  3791                              <1> .nonewline:
  3792 00002F01 80C20F              <1> 	add dl, 15
  3793 00002F04 C0EA04              <1> 	shr dl, 4
  3794 00002F07 C0E204              <1> 	shl dl, 4
  3795                              <1> .notab:
  3796 00002F0A BE[2D2E0000]        <1> 	mov esi, hexnumber
  3797 00002F0F 803D[952E0000]01    <1> 	cmp byte [smallhex],1
  3798 00002F16 7506                <1> 	jne .nosmall
  3799 00002F18 81C606000000        <1> 	add esi, 6
  3800                              <1> .nosmall:
  3801 00002F1E 803D[962E0000]05    <1> 	cmp byte [firsthexshown], 5
  3802 00002F25 750A                <1> 	jne .noquiet
  3803 00002F27 E8FDEDFFFF          <1> 	call printquiet
  3804 00002F2C E918000000          <1> 	jmp .donequiet
  3805                              <1> .noquiet:
  3806 00002F31 803D[962E0000]06    <1> 	cmp byte [firsthexshown], 6
  3807 00002F38 750A                <1> 	jne .normal
  3808 00002F3A E8DEEDFFFF          <1> 	call printhighlight
  3809 00002F3F E905000000          <1> 	jmp .donequiet
  3810                              <1> .normal:
  3811 00002F44 E8F2EDFFFF          <1> 	call print
  3812                              <1> .donequiet:
  3813 00002F49 803D[962E0000]02    <1> 	cmp byte [firsthexshown], 2
  3814 00002F50 750A                <1> 	jne .shown
  3815 00002F52 BE[088D0000]        <1> 	mov esi, line
  3816 00002F57 E8DFEDFFFF          <1> 	call print
  3817                              <1> .shown:
  3818 00002F5C C605[962E0000]00    <1> 	mov byte [firsthexshown], 0
  3819 00002F63 61                  <1> 	popa
  3820 00002F64 C3                  <1> 	ret
  3821                              <1> 
  3822                              <1> 
  3823 00002F65 303030303030303030- <1> decnumber db "00000000000000"
  3824 00002F6E 3030303030          <1>
  3825 00002F73 2000                <1> decnumberend: db " ",0
  3826                              <1> 
  3827                              <1> showdec: ;;same as showhex, just uses decimal conversion
  3828 00002F75 60                  <1> 	pusha
  3829 00002F76 BF[652F0000]        <1> 	mov edi, decnumber
  3830 00002F7B BE[732F0000]        <1> 	mov esi, decnumberend
  3831                              <1> .clear:
  3832 00002F80 C60730              <1> 	mov byte [edi], '0'
  3833 00002F83 47                  <1> 	inc edi
  3834 00002F84 39F7                <1> 	cmp edi, esi
  3835 00002F86 72F8                <1> 	jb .clear
  3836 00002F88 BF[652F0000]        <1> 	mov edi, decnumber
  3837 00002F8D E8C6FDFFFF          <1> 	call convert
  3838 00002F92 803D[962E0000]01    <1> 	cmp byte [firsthexshown], 1
  3839 00002F99 7503                <1> 	jne .show
  3840 00002F9B 6631D2              <1> 	xor dx, dx
  3841                              <1> .show:
  3842 00002F9E 803D[962E0000]03    <1> 	cmp byte [firsthexshown], 3
  3843 00002FA5 750A                <1> 	jne .nonewdecline
  3844 00002FA7 BE[088D0000]        <1> 	mov esi, line
  3845 00002FAC E88AEDFFFF          <1> 	call print
  3846                              <1> .nonewdecline:
  3847 00002FB1 803D[962E0000]04    <1> 	cmp byte [firsthexshown], 4
  3848 00002FB8 7527                <1> 	jne .notab
  3849 00002FBA B1A0                <1> 	mov cl, 160
  3850 00002FBC 28D1                <1> 	sub cl, dl
  3851 00002FBE C0E905              <1> 	shr cl, 5
  3852 00002FC1 C0E105              <1> 	shl cl, 5
  3853 00002FC4 80F900              <1> 	cmp cl, 0
  3854 00002FC7 750F                <1> 	jne .nonewline
  3855 00002FC9 BE[088D0000]        <1> 	mov esi, line
  3856 00002FCE E868EDFFFF          <1> 	call print
  3857 00002FD3 E909000000          <1> 	jmp .notab
  3858                              <1> .nonewline:
  3859 00002FD8 80C20F              <1> 	add dl, 15
  3860 00002FDB C0EA04              <1> 	shr dl, 4
  3861 00002FDE C0E204              <1> 	shl dl, 4
  3862                              <1> .notab:
  3863 00002FE1 BE[652F0000]        <1> 	mov esi, decnumber
  3864 00002FE6 4E                  <1> 	dec esi
  3865                              <1> .sifind:
  3866 00002FE7 46                  <1> 	inc esi
  3867 00002FE8 803E30              <1> 	cmp byte [esi], '0'
  3868 00002FEB 74FA                <1> 	je .sifind
  3869 00002FED E849EDFFFF          <1> 	call print
  3870 00002FF2 803D[962E0000]02    <1> 	cmp byte [firsthexshown], 2
  3871 00002FF9 750A                <1> 	jne .shown
  3872 00002FFB BE[088D0000]        <1> 	mov esi, line
  3873 00003000 E836EDFFFF          <1> 	call print
  3874                              <1> .shown:
  3875 00003005 C605[962E0000]00    <1> 	mov byte [firsthexshown], 0
  3876 0000300C 61                  <1> 	popa
  3877 0000300D C3                  <1> 	ret
  3878                              <1> 	
  3879                              <1> cnvrthextxt:
  3880 0000300E 31C9                <1> 	xor ecx, ecx
  3881 00003010 31C0                <1> 	xor eax, eax
  3882 00003012 31D2                <1> 	xor edx, edx
  3883 00003014 31DB                <1> 	xor ebx, ebx
  3884 00003016 4E                  <1> 	dec esi
  3885                              <1> .end:
  3886 00003017 46                  <1> 	inc esi
  3887 00003018 8A06                <1> 	mov al, [esi]
  3888 0000301A 3C00                <1> 	cmp al, 0
  3889 0000301C 75F9                <1> 	jne .end
  3890                              <1> .loop:
  3891 0000301E 4E                  <1> 	dec esi
  3892 0000301F 8A06                <1> 	mov al, [esi]
  3893 00003021 3C41                <1> 	cmp al, "A"
  3894 00003023 7328                <1> 	jae .char
  3895 00003025 2C30                <1> 	sub al, 48
  3896 00003027 3C10                <1> 	cmp al, 16
  3897 00003029 7721                <1> 	ja .done
  3898                              <1> .donechar:
  3899 0000302B 81FA00000000        <1> 	cmp edx, 0
  3900 00003031 740E                <1> 	je .noshl
  3901 00003033 89D3                <1> 	mov ebx, edx
  3902                              <1> .shl:
  3903 00003035 C1E004              <1> 	shl eax, 4
  3904 00003038 4B                  <1> 	dec ebx
  3905 00003039 81FB00000000        <1> 	cmp ebx, 0
  3906 0000303F 75F4                <1> 	jne .shl
  3907                              <1> .noshl:
  3908 00003041 42                  <1> 	inc edx
  3909 00003042 01C1                <1> 	add ecx, eax
  3910 00003044 81FA08000000        <1> 	cmp edx, 8
  3911 0000304A 72D2                <1> 	jb .loop
  3912                              <1> .done:
  3913 0000304C C3                  <1> 	ret
  3914                              <1> .char:
  3915 0000304D 3C46                <1> 	cmp al, "F"
  3916 0000304F 77FB                <1> 	ja .done
  3917 00003051 2C41                <1> 	sub al, "A"
  3918 00003053 040A                <1> 	add al, 0xA
  3919 00003055 EBD4                <1> 	jmp .donechar
  3920                              <1> 	
  3921                              <1> 	
  3922                              <1> cnvrttxt: ;text to convert in esi, first part or 0 in edi
  3923 00003057 31C9                <1> 	xor ecx, ecx
  3924 00003059 31C0                <1> 	xor eax, eax
  3925 0000305B 31D2                <1> 	xor edx, edx
  3926 0000305D 31DB                <1> 	xor ebx, ebx
  3927 0000305F 4E                  <1> 	dec esi
  3928                              <1> .lp:
  3929 00003060 46                  <1> 	inc esi
  3930 00003061 8A06                <1> 	mov al, [esi]
  3931 00003063 3C00                <1> 	cmp al, 0
  3932 00003065 75F9                <1> 	jne .lp
  3933 00003067 4E                  <1> 	dec esi
  3934 00003068 8A06                <1> 	mov al, [esi]
  3935 0000306A 3C2E                <1> 	cmp al, '.'
  3936 0000306C 7503                <1> 	jne .dot
  3937 0000306E 46                  <1> 	inc esi
  3938 0000306F EBEF                <1> 	jmp .lp
  3939                              <1> .dot:
  3940 00003071 3C20                <1> 	cmp al, ' '
  3941 00003073 7404                <1> 	je .zero
  3942 00003075 3C30                <1> 	cmp al, '0'
  3943 00003077 7504                <1> 	jne .txtlp
  3944                              <1> .zero: 
  3945 00003079 39FE                <1> 		cmp esi, edi
  3946 0000307B 7458                <1> 		je .done
  3947                              <1> .txtlp:
  3948 0000307D 31C0                <1> 	xor eax, eax
  3949 0000307F 8A06                <1> 	mov al, [esi]
  3950 00003081 3C3D                <1> 	cmp al, '='
  3951 00003083 7450                <1> 	je .done
  3952 00003085 3C30                <1> 	cmp al, 48
  3953 00003087 724C                <1> 	jb .done
  3954 00003089 3C23                <1> 	cmp al, '#'
  3955 0000308B 7448                <1> 	je .done
  3956 0000308D 39FE                <1> 	cmp esi, edi
  3957 0000308F 7244                <1> 	jb .done
  3958 00003091 81F900000000        <1> 	cmp ecx, 0
  3959 00003097 7708                <1> 	ja .exp
  3960 00003099 2C30                <1> .noexp:	sub al, 48
  3961 0000309B 01C2                <1> 	add edx, eax
  3962 0000309D 4E                  <1> 	dec esi
  3963 0000309E 41                  <1> 	inc ecx
  3964 0000309F EBDC                <1> 	jmp .txtlp
  3965 000030A1 81F900000000        <1> .exp:	cmp ecx, 0
  3966 000030A7 74F0                <1> 	je .noexp
  3967 000030A9 2C30                <1> 	sub al, 48
  3968 000030AB 51                  <1> 	push ecx
  3969 000030AC 89C3                <1> .expmul:	mov ebx, eax
  3970 000030AE 01D8                <1> 	add eax, ebx
  3971 000030B0 01D8                <1> 	add eax, ebx
  3972 000030B2 01D8                <1> 	add eax, ebx
  3973 000030B4 01D8                <1> 	add eax, ebx
  3974 000030B6 01D8                <1> 	add eax, ebx
  3975 000030B8 01D8                <1> 	add eax, ebx
  3976 000030BA 01D8                <1> 	add eax, ebx
  3977 000030BC 01D8                <1> 	add eax, ebx
  3978 000030BE 01D8                <1> 	add eax, ebx
  3979 000030C0 81E901000000        <1> 	sub ecx, 1
  3980 000030C6 81F900000000        <1> 	cmp ecx, 0
  3981 000030CC 77DE                <1> 	ja .expmul
  3982 000030CE 01C2                <1> 	add edx, eax
  3983 000030D0 59                  <1> 	pop ecx
  3984 000030D1 4E                  <1> 	dec esi
  3985 000030D2 41                  <1> 	inc ecx
  3986 000030D3 EBA8                <1> 	jmp .txtlp
  3987 000030D5 89D1                <1> .done: mov ecx, edx
  3988 000030D7 C3                  <1> 	ret
  3989                                      %include "source/programs.asm"
  3990 000030D8 FF2C                <1> filetypes db 255,44
  3991                              <1> progstart:		;programs start here
  3992                              <1> indexfiles:
  3993 000030DA BE[DA300000]        <1> 	mov esi, progstart
  3994 000030DF BB[2AB10000]        <1> 	mov ebx, fileindex
  3995 000030E4 BF[DA300000]        <1> 	mov edi, progstart
  3996 000030E9 81EF02000000        <1> 	sub edi, 2
  3997                              <1> indexloop:
  3998 000030EF 668B0E              <1> 	mov cx, [esi]
  3999                              <1> 	indexloop2:
  4000 000030F2 663B0F              <1> 		cmp cx, [edi]
  4001 000030F5 7424                <1> 		je indexloop2done
  4002 000030F7 81EF02000000        <1> 		sub edi, 2
  4003 000030FD 81FF[D8300000]      <1> 		cmp edi, filetypes
  4004 00003103 73ED                <1> 		jae indexloop2
  4005 00003105 BF[DA300000]        <1> 	mov edi, progstart
  4006 0000310A 81EF02000000        <1> 	sub edi, 2
  4007 00003110 46                  <1> 	inc esi
  4008 00003111 81FE[3E510000]      <1> 	cmp esi, batchprogend
  4009 00003117 734E                <1> 	jae indexloopdone
  4010 00003119 EBD4                <1> 	jmp indexloop
  4011                              <1> indexloop2done:
  4012 0000311B 66890B              <1> 	mov [ebx], cx
  4013 0000311E 81C302000000        <1> 	add ebx, 2
  4014 00003124 81C602000000        <1> 	add esi, 2
  4015                              <1> 	nameindex:
  4016 0000312A 8A0E                <1> 		mov cl, [esi]
  4017 0000312C 80F900              <1> 		cmp cl, 0
  4018 0000312F 7406                <1> 		je nameindexdone
  4019 00003131 880B                <1> 		mov [ebx], cl
  4020 00003133 46                  <1> 		inc esi
  4021 00003134 43                  <1> 		inc ebx
  4022 00003135 EBF3                <1> 		jmp nameindex
  4023                              <1> 	nameindexdone:
  4024 00003137 43                  <1> 		inc ebx
  4025 00003138 66C7030000          <1> 		mov word [ebx], 0
  4026 0000313D 81C302000000        <1> 		add ebx, 2
  4027 00003143 46                  <1> 		inc esi
  4028 00003144 8933                <1> 		mov [ebx], esi
  4029 00003146 81C304000000        <1> 		add ebx, 4
  4030 0000314C 66C7030000          <1> 		mov word [ebx], 0
  4031 00003151 81C302000000        <1> 		add ebx, 2
  4032 00003157 81FB[2AB50000]      <1> 		cmp ebx, fileindexend
  4033 0000315D 7308                <1> 		jae indexloopdone
  4034 0000315F 81C601000000        <1> 		add esi, 1
  4035 00003165 EB88                <1> 		jmp indexloop
  4036 00003167 C605[6F310000]01    <1> indexloopdone: 	mov byte [indexdone], 1
  4037 0000316E C3                  <1> 		ret
  4038 0000316F 00                  <1> indexdone db 0
  4039                              <1> %include 'source/programs/_comment.asm' ;#
  4040 00003170 FF2C2300            <2> 	db 255,44,"#",0	;this lets you rem stuff
  4041 00003174 C3                  <2> 	ret 
  4042                              <1> %include 'source/programs/_math.asm' ;!
  4043 00003175 FF2C2100            <2> db 255,44,"!",0
  4044                              <2> 	num:	
  4045 00003179 E8C5FBFFFF          <2> 		call clearbuffer
  4046 0000317E C605[FF330000]00    <2> 		mov byte [decimal], 0
  4047 00003185 C605[00340000]00    <2> 		mov byte [decimal2], 0
  4048 0000318C 8B35[842C0000]      <2> 		mov esi, [currentcommandloc]
  4049 00003192 31C0                <2> 		xor eax, eax
  4050 00003194 31C9                <2> 		xor ecx, ecx
  4051 00003196 31DB                <2> 		xor ebx, ebx
  4052 00003198 8A06                <2> 	num2:	mov al, [esi]
  4053 0000319A 3C2B                <2> 		cmp al, '+'
  4054 0000319C 741B                <2> 		je operatorfound
  4055 0000319E 3C2D                <2> 		cmp al, '-'
  4056 000031A0 7417                <2> 		je operatorfound
  4057 000031A2 3C2A                <2> 		cmp al, '*'
  4058 000031A4 7413                <2> 		je operatorfound
  4059 000031A6 3C2F                <2> 		cmp al, '/'
  4060 000031A8 740F                <2> 		je operatorfound
  4061 000031AA 3C5E                <2> 		cmp al, '^'
  4062 000031AC 740B                <2> 		je operatorfound
  4063 000031AE 46                  <2> 		inc esi
  4064 000031AF 3C00                <2> 		cmp al, 0
  4065 000031B1 0F841AF8FFFF        <2> 		je near nwcmd
  4066 000031B7 EBDF                <2> 		jmp num2
  4067 000031B9 50                  <2> 	operatorfound: push eax
  4068 000031BA 30E4                <2> 		xor ah, ah
  4069 000031BC 8826                <2> 		mov [esi], ah
  4070 000031BE 89F7                <2> 		mov edi, esi
  4071 000031C0 46                  <2> 		inc esi
  4072 000031C1 8A06                <2> 		mov al, [esi]
  4073 000031C3 3C25                <2> 		cmp al, '%'
  4074 000031C5 0F8462000000        <2> 		je near resultnum1
  4075                              <2> 	varnum2: 
  4076 000031CB 57                  <2> 		push edi
  4077 000031CC E8A4000000          <2> 		call checkdecimal
  4078 000031D1 5F                  <2> 		pop edi
  4079 000031D2 E880FEFFFF          <2> 		call cnvrttxt
  4080                              <2> 	vrnm2:
  4081 000031D7 89CB                <2> 		mov ebx, ecx
  4082 000031D9 53                  <2> 		push ebx
  4083 000031DA E864FBFFFF          <2> 		call clearbuffer
  4084 000031DF 8B35[842C0000]      <2> 		mov esi, [currentcommandloc]
  4085 000031E5 89F7                <2> 		mov edi, esi
  4086 000031E7 46                  <2> 		inc esi
  4087 000031E8 8A06                <2> 		mov al, [esi]
  4088 000031EA 3C25                <2> 		cmp al, '%'
  4089 000031EC 0F844F000000        <2> 		je near resultnum2
  4090                              <2> 	varnum4: 
  4091 000031F2 57                  <2> 		push edi
  4092 000031F3 E869000000          <2> 		call checkdecimal2
  4093 000031F8 5F                  <2> 		pop edi
  4094 000031F9 E859FEFFFF          <2> 		call cnvrttxt
  4095                              <2> 	vrnm4:
  4096 000031FE 5B                  <2> 		pop ebx
  4097 000031FF 58                  <2> 		pop eax
  4098 00003200 3C2B                <2> 		cmp al, '+'
  4099 00003202 0F849B000000        <2> 		je near plusnum
  4100 00003208 3C2D                <2> 		cmp al, '-'
  4101 0000320A 0F849F000000        <2> 		je near subnum
  4102 00003210 3C2A                <2> 		cmp al, '*'
  4103 00003212 0F84A3000000        <2> 		je near mulnum
  4104 00003218 3C2F                <2> 		cmp al, '/'
  4105 0000321A 0F84B1000000        <2> 		je near divnum
  4106 00003220 3C5E                <2> 		cmp al, '^'
  4107 00003222 0F84CE000000        <2> 		je near expnum
  4108 00003228 E9A4F7FFFF          <2> 		jmp nwcmd
  4109                              <2> 	resultnum1:
  4110 0000322D 8A0D[01340000]      <2> 		mov cl, [decimalresult]
  4111 00003233 880D[FF330000]      <2> 		mov [decimal], cl
  4112 00003239 8B0D[02340000]      <2> 		mov ecx, [result]
  4113 0000323F EB96                <2> 		jmp vrnm2
  4114                              <2> 	resultnum2:
  4115 00003241 8A0D[FF330000]      <2> 		mov cl, [decimal]
  4116 00003247 880D[00340000]      <2> 		mov [decimal2], cl
  4117 0000324D 8A0D[01340000]      <2> 		mov cl, [decimalresult]
  4118 00003253 880D[FF330000]      <2> 		mov [decimal], cl
  4119 00003259 8B0D[02340000]      <2> 		mov ecx, [result]
  4120 0000325F EB9D                <2> 		jmp vrnm4
  4121                              <2> 	checkdecimal2:
  4122 00003261 8A25[FF330000]      <2> 		mov ah, [decimal]
  4123 00003267 8825[00340000]      <2> 		mov [decimal2], ah
  4124 0000326D 30E4                <2> 		xor ah, ah
  4125 0000326F 8825[FF330000]      <2> 		mov [decimal], ah
  4126                              <2> 	checkdecimal:
  4127 00003275 89F7                <2> 		mov edi, esi
  4128                              <2> 	chkdec1:
  4129 00003277 8A07                <2> 		mov al, [edi]
  4130 00003279 3C2E                <2> 		cmp al, '.'
  4131 0000327B 0F840B000000        <2> 		je near fnddec
  4132 00003281 3C00                <2> 		cmp al, 0
  4133 00003283 0F8419000000        <2> 		je near nodecimal
  4134 00003289 47                  <2> 		inc edi
  4135 0000328A EBEB                <2> 		jmp chkdec1
  4136                              <2> 	fnddec:
  4137 0000328C 8A4701              <2> 		mov al, [edi + 1]
  4138 0000328F 8807                <2> 		mov [edi], al
  4139 00003291 3C00                <2> 		cmp al, 0
  4140 00003293 0F8409000000        <2> 		je near nodecimal
  4141 00003299 FE05[FF330000]      <2> 		inc byte [decimal]
  4142 0000329F 47                  <2> 		inc edi
  4143 000032A0 EBEA                <2> 		jmp fnddec
  4144                              <2> 	nodecimal:
  4145 000032A2 C3                  <2> 		ret
  4146                              <2> 	plusnum:
  4147 000032A3 E815010000          <2> 		call decaddfix
  4148 000032A8 01D9                <2> 		add ecx, ebx
  4149 000032AA E98A000000          <2> 		jmp retnum
  4150                              <2> 	subnum:
  4151 000032AF E809010000          <2> 		call decaddfix
  4152 000032B4 29D9                <2> 		sub ecx, ebx
  4153 000032B6 E97E000000          <2> 		jmp retnum
  4154                              <2> 	mulnum:
  4155 000032BB A0[00340000]        <2> 		mov al, [decimal2]
  4156 000032C0 0005[FF330000]      <2> 		add [decimal], al
  4157 000032C6 89C8                <2> 		mov eax, ecx
  4158 000032C8 F7E3                <2> 		mul ebx
  4159 000032CA 89C1                <2> 		mov ecx, eax
  4160 000032CC E968000000          <2> 		jmp retnum
  4161                              <2> 	divnum:
  4162 000032D1 E8E7000000          <2> 		call decaddfix
  4163 000032D6 30C0                <2> 		xor al, al
  4164 000032D8 A2[FF330000]        <2> 		mov [decimal], al
  4165 000032DD 31D2                <2> 		xor edx, edx
  4166 000032DF 89C8                <2> 		mov eax, ecx
  4167 000032E1 81FB00000000        <2> 		cmp ebx, 0
  4168 000032E7 0F844C000000        <2> 		je near retnum
  4169 000032ED F7F3                <2> 		div ebx
  4170 000032EF 89C1                <2> 		mov ecx, eax
  4171 000032F1 E943000000          <2> 		jmp retnum
  4172                              <2> 	expnum:
  4173 000032F6 8A15[FF330000]      <2> 		mov dl, [decimal]
  4174 000032FC 8815[00340000]      <2> 		mov [decimal2], dl
  4175 00003302 31D2                <2> 		xor edx, edx
  4176 00003304 89C8                <2> 		mov eax, ecx
  4177 00003306 89D9                <2> 		mov ecx, ebx
  4178 00003308 89C3                <2> 		mov ebx, eax
  4179 0000330A 81F900000000        <2> 		cmp ecx, 0
  4180 00003310 7422                <2> 		je noexpnum
  4181 00003312 49                  <2> 		dec ecx
  4182 00003313 81F900000000        <2> 		cmp ecx, 0
  4183 00003319 7412                <2> 		je noexpnumlp
  4184 0000331B F7E3                <2> 	expnumlp: mul ebx
  4185 0000331D 8A15[00340000]      <2> 		mov dl, [decimal2]
  4186 00003323 0015[FF330000]      <2> 		add [decimal], dl
  4187 00003329 31D2                <2> 		xor edx, edx
  4188 0000332B E2EE                <2> 		loop expnumlp
  4189                              <2> 	noexpnumlp:
  4190 0000332D 89C1                <2> 		mov ecx, eax
  4191 0000332F E905000000          <2> 		jmp retnum
  4192                              <2> 	noexpnum:
  4193 00003334 B901000000          <2> 		mov ecx, 1
  4194                              <2> 	retnum: 
  4195 00003339 BE[BECF0000]        <2> 		mov esi, numbuf
  4196 0000333E 890D[02340000]      <2> 		mov [result], ecx
  4197 00003344 E80FFAFFFF          <2> 		call convert
  4198 00003349 BE[BECF0000]        <2> 		mov esi, numbuf
  4199 0000334E 8A25[FF330000]      <2> 		mov ah, [decimal]
  4200 00003354 8825[01340000]      <2> 		mov [decimalresult], ah
  4201 0000335A 80FC00              <2> 		cmp ah, 0
  4202 0000335D 0F8425000000        <2> 		je near noputdecimal
  4203                              <2> 	putdecimal:
  4204 00003363 4E                  <2> 		dec esi
  4205 00003364 FECC                <2> 		dec ah
  4206 00003366 80FC00              <2> 		cmp ah, 0
  4207 00003369 0F87F4FFFFFF        <2> 		ja near putdecimal
  4208 0000336F 4E                  <2> 		dec esi
  4209 00003370 8A06                <2> 		mov al, [esi]
  4210 00003372 C6062E              <2> 		mov byte [esi], '.'
  4211                              <2> 	decputloop:
  4212 00003375 4E                  <2> 		dec esi
  4213 00003376 8A26                <2> 		mov ah, [esi]
  4214 00003378 8806                <2> 		mov [esi], al
  4215 0000337A 88E0                <2> 		mov al, ah
  4216 0000337C 81FE[AACF0000]      <2> 		cmp esi, buf2
  4217 00003382 0F87EDFFFFFF        <2> 		ja near decputloop
  4218                              <2> 	noputdecimal:
  4219 00003388 BE[AACF0000]        <2> 		mov esi, buf2
  4220 0000338D E809000000          <2> 		call chkadd
  4221 00003392 E93AF6FFFF          <2> 		jmp nwcmd
  4222 00003397 00000000            <2> edxnumbuf dw 0,0
  4223 0000339B 8A06                <2> 	chkadd: mov al, [esi]
  4224 0000339D 3C30                <2> 		cmp al, '0'
  4225 0000339F 750C                <2> 		jne dnadd
  4226 000033A1 46                  <2> 		inc esi
  4227 000033A2 81FE[BECF0000]      <2> 		cmp esi, numbuf
  4228 000033A8 7402                <2> 		je dnaddm1
  4229 000033AA EBEF                <2> 		jmp chkadd
  4230 000033AC 4E                  <2> 	dnaddm1: dec esi
  4231 000033AD E889E9FFFF          <2> 	dnadd:	call print
  4232 000033B2 BE[088D0000]        <2> 		mov esi, line
  4233 000033B7 E87FE9FFFF          <2> 		call print
  4234 000033BC C3                  <2> 		ret
  4235                              <2> 		
  4236                              <2> 	decaddfix:
  4237 000033BD A0[00340000]        <2> 		mov al, [decimal2]
  4238 000033C2 8A25[FF330000]      <2> 		mov ah, [decimal]
  4239 000033C8 38E0                <2> 		cmp al, ah
  4240 000033CA 7432                <2> 		je gooddecadd
  4241 000033CC 38E0                <2> 		cmp al, ah
  4242 000033CE 721A                <2> 		jb lowdecadd
  4243                              <2> 	highdecadd:
  4244 000033D0 FEC4                <2> 		inc ah
  4245 000033D2 89CA                <2> 		mov edx, ecx
  4246 000033D4 C1E103              <2> 		shl ecx, 3
  4247 000033D7 01D1                <2> 		add ecx, edx
  4248 000033D9 01D1                <2> 		add ecx, edx
  4249 000033DB 38E0                <2> 		cmp al, ah
  4250 000033DD 77F1                <2> 		ja highdecadd
  4251 000033DF 8825[FF330000]      <2> 		mov [decimal], ah
  4252 000033E5 E914000000          <2> 		jmp gooddecadd
  4253                              <2> 	lowdecadd:
  4254 000033EA FEC0                <2> 		inc al
  4255 000033EC 89DA                <2> 		mov edx, ebx
  4256 000033EE C1E303              <2> 		shl ebx, 3
  4257 000033F1 01D3                <2> 		add ebx, edx
  4258 000033F3 01D3                <2> 		add ebx, edx
  4259 000033F5 38E0                <2> 		cmp al, ah
  4260 000033F7 72F1                <2> 		jb lowdecadd
  4261 000033F9 A2[FF330000]        <2> 		mov [decimal], al
  4262                              <2> 	gooddecadd:
  4263 000033FE C3                  <2> 		ret
  4264                              <2> 		
  4265 000033FF 00                  <2> decimal db 0
  4266 00003400 00                  <2> decimal2 db 0
  4267 00003401 00                  <2> decimalresult db 0
  4268 00003402 00000000            <2> result dd 0
  4269                              <1> %include 'source/programs/_variables.asm' ;% and $
  4270 00003406 FF2C2500            <2> db 255,44,"%",0
  4271                              <2> 	ans:
  4272 0000340A BE[AACF0000]        <2> 		mov esi, buf2
  4273 0000340F E887FFFFFF          <2> 		call chkadd
  4274 00003414 C3                  <2> 		ret
  4275                              <2> 		
  4276 00003415 FF2C2400            <2> db 255,44,"$",0
  4277 00003419 8B35[842C0000]      <2> var: mov esi, [currentcommandloc]
  4278 0000341F BB[AAB70000]        <2> 	mov ebx, variables
  4279 00003424 8A06                <2> lkeq:	mov al, [esi]
  4280 00003426 3C3D                <2> 	cmp al, '='
  4281 00003428 741B                <2> 	je eqfnd	;is there an '=' sign?
  4282 0000342A 3C00                <2> 	cmp al, 0
  4283 0000342C 7403                <2> 	je echovars
  4284 0000342E 46                  <2> 	inc esi
  4285 0000342F EBF3                <2> 	jmp lkeq
  4286 00003431 BE[AAB70000]        <2> echovars: mov esi, variables
  4287 00003436 BB[AAC70000]        <2> 	mov ebx, varend
  4288 0000343B B105                <2> 	mov cl, 5
  4289 0000343D B504                <2> 	mov ch, 4
  4290 0000343F E89EF8FFFF          <2> 	call array
  4291 00003444 C3                  <2> 	ret
  4292 00003445 46                  <2> eqfnd:	inc esi
  4293 00003446 8A06                <2> 	mov al, [esi]
  4294 00003448 3C00                <2> 	cmp al, 0
  4295 0000344A 7410                <2> 	je readvar
  4296 0000344C 8B35[842C0000]      <2> 	mov esi, [currentcommandloc]
  4297 00003452 BB[AAB70000]        <2> 	mov ebx, variables
  4298 00003457 E919000000          <2> 	jmp seek
  4299                              <2> readvar:
  4300 0000345C B00A                <2> 	mov al, 10
  4301 0000345E 66BB0700            <2> 	mov bx, 7
  4302 00003462 C605[F5210000]00    <2> 	mov byte [commandedit], 0
  4303 00003469 BF[AACF0000]        <2> 	mov edi, buftxtend
  4304 0000346E E8B0E9FFFF          <2> 	call rdprint
  4305 00003473 EBA4                <2> 	jmp var
  4306 00003475 668B03              <2> seek:	mov ax, [ebx]
  4307 00003478 B105                <2> 	mov cl, 5
  4308 0000347A B504                <2> 	mov ch, 4
  4309 0000347C 663D0000            <2> 	cmp ax, 0
  4310 00003480 0F845B000000        <2> 	je near save
  4311 00003486 6639C8              <2> 	cmp ax, cx
  4312 00003489 7403                <2> 	je skfnd
  4313 0000348B 43                  <2> 	inc ebx
  4314 0000348C EBE7                <2> 	jmp seek
  4315 0000348E 8B35[842C0000]      <2> skfnd:	mov esi, [currentcommandloc]
  4316 00003494 46                  <2> 	inc esi
  4317 00003495 81C302000000        <2> 	add ebx, 2
  4318 0000349B 89DF                <2> 	mov edi, ebx
  4319 0000349D B13D                <2> 	mov cl, '='
  4320 0000349F E81FF8FFFF          <2> 	call cndtest
  4321 000034A4 3C01                <2> 	cmp al, 1	
  4322 000034A6 7418                <2> 	je varfnd
  4323 000034A8 89FB                <2> 	mov ebx, edi
  4324 000034AA 8B35[842C0000]      <2> 	mov esi, [currentcommandloc]
  4325 000034B0 668B03              <2> 	mov ax, [ebx]
  4326 000034B3 663D0000            <2> 	cmp ax, 0
  4327 000034B7 0F8424000000        <2> 	je near save
  4328 000034BD 43                  <2> 	inc ebx
  4329 000034BE EBB5                <2> 	jmp seek
  4330 000034C0 8A03                <2> varfnd:	mov al, [ebx]
  4331 000034C2 3C04                <2> 	cmp al, 4
  4332 000034C4 7404                <2> 	je save2
  4333 000034C6 4B                  <2> 	dec ebx
  4334 000034C7 4E                  <2> 	dec esi
  4335 000034C8 EBF6                <2> 	jmp varfnd
  4336 000034CA 4B                  <2> save2:	dec ebx
  4337 000034CB 4E                  <2> 	dec esi
  4338 000034CC 8A03                <2> 	mov al, [ebx]
  4339 000034CE 3C05                <2> 	cmp al, 5
  4340 000034D0 7402                <2> 	je remove
  4341 000034D2 EBEC                <2> 	jmp varfnd
  4342 000034D4 8A03                <2> remove: mov al, [ebx]
  4343 000034D6 3C00                <2> 	cmp al, 0
  4344 000034D8 749B                <2> 	je seek
  4345 000034DA 30C0                <2> 	xor al, al
  4346 000034DC 8803                <2> 	mov [ebx], al
  4347 000034DE 43                  <2> 	inc ebx
  4348 000034DF EBF3                <2> 	jmp remove	;do not need for now-need defragmentation
  4349 000034E1 8B35[842C0000]      <2> save:	mov esi, [currentcommandloc]
  4350 000034E7 43                  <2> 	inc ebx
  4351 000034E8 B005                <2> 	mov al, 5
  4352 000034EA B404                <2> 	mov ah, 4
  4353 000034EC 668903              <2> 	mov [ebx], ax
  4354 000034EF 43                  <2> 	inc ebx
  4355 000034F0 43                  <2> svhere:	inc ebx
  4356 000034F1 46                  <2> 	inc esi
  4357 000034F2 8A06                <2> 	mov al, [esi]
  4358 000034F4 3C00                <2> 	cmp al, 0
  4359 000034F6 0F844A000000        <2> 	je near svdone
  4360 000034FC 3C25                <2> 	cmp al, '%'
  4361 000034FE 7404                <2> 	je ans2
  4362 00003500 8803                <2> 	mov [ebx], al	
  4363 00003502 EBEC                <2> 	jmp svhere
  4364 00003504 56                  <2> ans2:	push esi
  4365 00003505 BE[AACF0000]        <2> 	mov esi, buf2
  4366 0000350A E823000000          <2> 	call ansfnd
  4367 0000350F E803000000          <2> 	call anscp
  4368 00003514 5E                  <2> 	pop esi
  4369 00003515 EBD9                <2> 	jmp svhere
  4370 00003517 8A06                <2> anscp:	mov al, [esi]
  4371 00003519 8803                <2> 	mov [ebx], al
  4372 0000351B 81FE[BECF0000]      <2> 	cmp esi, numbuf
  4373 00003521 74CD                <2> 	je svhere
  4374 00003523 3C00                <2> 	cmp al, 0
  4375 00003525 74C9                <2> 	je svhere
  4376 00003527 43                  <2> 	inc ebx
  4377 00003528 46                  <2> 	inc esi
  4378 00003529 EBEC                <2> 	jmp anscp
  4379 0000352B 5E                  <2> ansnf:	pop esi
  4380 0000352C 8A06                <2> 	mov al, [esi]
  4381 0000352E 8803                <2> 	mov [ebx], al
  4382 00003530 EBBE                <2> 	jmp svhere
  4383 00003532 46                  <2> ansfnd:	inc esi
  4384 00003533 81FE[BDCF0000]      <2> 	cmp esi, numbuf - 1
  4385 00003539 740A                <2> 	je fndans
  4386 0000353B 8A06                <2> 	mov al, [esi]
  4387 0000353D 3C00                <2> 	cmp al, 0
  4388 0000353F 74EA                <2> 	je ansnf
  4389 00003541 3C30                <2> 	cmp al, '0'
  4390 00003543 74ED                <2> 	je ansfnd
  4391                              <2> fndans:
  4392 00003545 C3                  <2> 	ret
  4393 00003546 30C0                <2> svdone:	xor al, al
  4394 00003548 8803                <2> 	mov [ebx], al
  4395 0000354A C3                  <2> 	ret
  4396                              <1> %include 'source/programs/_run.asm' ;./
  4397                              <2> 
  4398 0000354B 7F454C46            <2> 	elfstart db 0x7F,"ELF"
  4399 0000354F FF2C2E2F00          <2> 	db 255,44,"./",0
  4400                              <2> rundiskprog:
  4401 00003554 8B3D[842C0000]      <2> 	mov edi, [currentcommandloc]
  4402 0000355A 81C702000000        <2> 	add edi, 2
  4403 00003560 BE00004000          <2> 	mov esi, 0x400000
  4404 00003565 E80F2E0000          <2> 	call loadfile
  4405 0000356A 81FA94010000        <2> 	cmp edx, 404
  4406 00003570 746A                <2> 	je noprogfound
  4407 00003572 BB00004000          <2> 	mov ebx, 0x400000
  4408 00003577 A1[4B350000]        <2> 	mov eax, [elfstart]
  4409 0000357C 3903                <2> 	cmp [ebx], eax
  4410 0000357E 0F8437000000        <2> 	je near runelf
  4411 00003584 66813B4558          <2> 	cmp word [ebx], "EX"
  4412 00003589 7577                <2> 	jne progbatchfound
  4413 0000358B 81C302000000        <2> 	add ebx, 2
  4414 00003591 8B3D[842C0000]      <2> 	mov edi, [currentcommandloc]
  4415 00003597 81C702000000        <2> 	add edi, 2
  4416                              <2> findspaceprog:
  4417 0000359D 8A07                <2> 	mov al, [edi]
  4418 0000359F 47                  <2> 	inc edi
  4419 000035A0 3C20                <2> 	cmp al, " "
  4420 000035A2 75F9                <2> 	jne findspaceprog
  4421                              <2> findnonspaceprog:
  4422 000035A4 8A07                <2> 	mov al, [edi]
  4423 000035A6 47                  <2> 	inc edi
  4424 000035A7 3C20                <2> 	cmp al, " "
  4425 000035A9 74F9                <2> 	je findnonspaceprog
  4426 000035AB 4F                  <2> 	dec edi
  4427 000035AC 8925[2AB50000]      <2> 	mov [previousstack], esp
  4428 000035B2 FFD3                <2> 	call ebx
  4429 000035B4 8B25[2AB50000]      <2> 	mov esp, [previousstack]
  4430 000035BA C3                  <2> 	ret
  4431                              <2> runelf:
  4432 000035BB 8B3D[842C0000]      <2> 	mov edi, [currentcommandloc]
  4433 000035C1 81C702000000        <2> 	add edi, 2
  4434 000035C7 81C380000000        <2> 	add ebx, 0x80
  4435 000035CD 8925[2AB50000]      <2> 	mov [previousstack], esp
  4436 000035D3 FFD3                <2> 	call ebx
  4437 000035D5 8B25[2AB50000]      <2> 	mov esp, [previousstack]
  4438 000035DB C3                  <2> 	ret
  4439                              <2> noprogfound:
  4440 000035DC BE[CF8C0000]        <2> 	mov esi, notfound1
  4441 000035E1 E855E7FFFF          <2> 	call print
  4442 000035E6 8B35[842C0000]      <2> 	mov esi, [currentcommandloc]
  4443 000035EC 81C602000000        <2> 	add esi, 2
  4444 000035F2 E844E7FFFF          <2> 	call print
  4445 000035F7 BE[D78C0000]        <2> 	mov esi, notfound2
  4446 000035FC E83AE7FFFF          <2> 	call print
  4447 00003601 C3                  <2> 	ret
  4448                              <2> progbatchfound:
  4449 00003602 BF00004000          <2> 		mov edi, 0x400000
  4450 00003607 C605[A4B70000]01    <2> 		mov byte [BATCHISON], 1
  4451                              <2> 	batchrunloop:
  4452 0000360E E89BF3FFFF          <2> 		call buftxtclear
  4453 00003613 BE[AACB0000]        <2> 		mov esi, buftxt
  4454 00003618 8935[842C0000]      <2> 		mov [currentcommandloc], esi
  4455                              <2> 	batchrunloop2:
  4456 0000361E B10A                <2> 		mov cl, 10
  4457 00003620 B50D                <2> 		mov ch, 13
  4458 00003622 380F                <2> 		cmp [edi], cl
  4459 00003624 0F8419000000        <2> 		je near nxtbatchrunline
  4460 0000362A 382F                <2> 		cmp [edi], ch
  4461 0000362C 0F8411000000        <2> 		je near nxtbatchrunline
  4462 00003632 803F00              <2> 		cmp byte [edi], 0
  4463 00003635 0F8408000000        <2> 		je near nxtbatchrunline
  4464 0000363B 8A07                <2> 		mov al, [edi]
  4465 0000363D 8806                <2> 		mov [esi], al
  4466 0000363F 46                  <2> 		inc esi
  4467 00003640 47                  <2> 		inc edi
  4468 00003641 EBDB                <2> 		jmp batchrunloop2
  4469                              <2> 	nxtbatchrunline:
  4470 00003643 47                  <2> 		inc edi
  4471 00003644 380F                <2> 		cmp [edi], cl
  4472 00003646 74FB                <2> 		je nxtbatchrunline
  4473 00003648 382F                <2> 		cmp [edi], ch
  4474 0000364A 74F7                <2> 		je nxtbatchrunline
  4475 0000364C 893D[AA360000]      <2> 		mov [batchedi], edi
  4476 00003652 893D[A0B70000]      <2> 		mov [BATCHPOS], edi
  4477 00003658 C60600              <2> 		mov byte [esi], 0
  4478 0000365B BE[AACB0000]        <2> 		mov esi, buftxt
  4479 00003660 803E00              <2> 		cmp byte [esi], 0
  4480 00003663 0F8439000000        <2> 		je near nobatchfoundrun
  4481 00003669 31DB                <2> 		xor ebx, ebx
  4482 0000366B 8A1D[3BB70000]      <2> 		mov bl, [IFON]
  4483 00003671 80FB00              <2> 		cmp bl, 0
  4484 00003674 0F8534000000        <2> 		jne near iftestbatch
  4485                              <2> 	doneiftest:
  4486 0000367A 803D[80370000]00    <2> 		cmp byte [runnextline], 0
  4487 00003681 0F8405000000        <2> 		je near noruniftest
  4488 00003687 E822F5FFFF          <2> 		call run
  4489                              <2> 	noruniftest:
  4490 0000368C C605[80370000]01    <2> 		mov byte [runnextline], 1
  4491 00003693 8B3D[AA360000]      <2> 		mov edi, [batchedi]
  4492 00003699 803F00              <2> 		cmp byte [edi], 0
  4493 0000369C 0F856CFFFFFF        <2> 		jne near batchrunloop
  4494                              <2> 	nobatchfoundrun:
  4495 000036A2 C605[A4B70000]00    <2> 		mov byte [BATCHISON], 0
  4496 000036A9 C3                  <2> 		ret
  4497                              <2> 	
  4498 000036AA 00000000            <2> batchedi dd 0	
  4499                              <2> 	
  4500                              <2> 	iftestbatch:
  4501 000036AE BE[3CB70000]        <2> 		mov esi, IFTRUE
  4502 000036B3 01DE                <2> 		add esi, ebx
  4503 000036B5 803E00              <2> 		cmp byte [esi], 0
  4504 000036B8 0F85BCFFFFFF        <2> 		jne near doneiftest
  4505 000036BE 881D[81370000]      <2> 		mov [iffalsebuf], bl
  4506 000036C4 803D[A5B70000]01    <2> 		cmp byte [LOOPON], 1
  4507 000036CB 0F8513000000        <2> 		jne near fifindbatch
  4508 000036D1 E938FFFFFF          <2> 		jmp batchrunloop
  4509                              <2> 	elsetestbatch:
  4510 000036D6 C60601              <2> 		mov byte [esi], 1
  4511 000036D9 81C705000000        <2> 		add edi, 5
  4512 000036DF E92AFFFFFF          <2> 		jmp batchrunloop
  4513                              <2> 	fifindbatch:
  4514 000036E4 66B96966            <2> 		mov cx, "if"
  4515 000036E8 66B86669            <2> 		mov ax, "fi"
  4516 000036EC 663907              <2> 		cmp [edi], ax
  4517 000036EF 0F8424000000        <2> 		je near fifoundbatch
  4518 000036F5 66390F              <2> 		cmp [edi], cx
  4519 000036F8 0F8465000000        <2> 		je near iffoundbatch
  4520 000036FE 803F00              <2> 		cmp byte [edi], 0
  4521 00003701 0F8412000000        <2> 		je near fifoundbatch
  4522 00003707 B8656C7365          <2> 		mov eax, "else"
  4523 0000370C 3907                <2> 		cmp [edi], eax
  4524 0000370E 0F84C2FFFFFF        <2> 		je near elsetestbatch
  4525 00003714 E973FFFFFF          <2> 		jmp noruniftest
  4526                              <2> 	fifoundbatch:
  4527 00003719 81C702000000        <2> 		add edi, 2
  4528 0000371F B00A                <2> 		mov al, 10
  4529 00003721 3807                <2> 		cmp [edi], al
  4530 00003723 0F840B000000        <2> 		je near goodfibatch
  4531 00003729 803F00              <2> 		cmp byte [edi], 0
  4532 0000372C 0F8470FFFFFF        <2> 		je near nobatchfoundrun
  4533 00003732 EBB0                <2> 		jmp fifindbatch
  4534                              <2> 	goodfibatch:
  4535 00003734 B001                <2> 		mov al, 1
  4536 00003736 2805[3BB70000]      <2> 		sub [IFON], al 
  4537 0000373C A0[3BB70000]        <2> 		mov al, [IFON]
  4538 00003741 8A1D[81370000]      <2> 		mov bl, [iffalsebuf]
  4539 00003747 38D8                <2> 		cmp al, bl
  4540 00003749 7799                <2> 		ja fifindbatch
  4541 0000374B 8B35[842C0000]      <2> 		mov esi, [currentcommandloc]
  4542 00003751 81EF02000000        <2> 		sub edi, 2
  4543 00003757 C605[80370000]00    <2> 		mov byte [runnextline], 0
  4544 0000375E E9ABFEFFFF          <2> 		jmp batchrunloop
  4545                              <2> 	iffoundbatch:
  4546 00003763 B020                <2> 		mov al, ' '
  4547 00003765 81C702000000        <2> 		add edi, 2
  4548 0000376B 3807                <2> 		cmp [edi], al
  4549 0000376D 0F8571FFFFFF        <2> 		jne near fifindbatch
  4550 00003773 B001                <2> 		mov al, 1
  4551 00003775 0005[3BB70000]      <2> 		add [IFON], al
  4552 0000377B E964FFFFFF          <2> 		jmp fifindbatch
  4553                              <2> 		
  4554                              <2> 		
  4555 00003780 01                  <2> runnextline db 1
  4556 00003781 00                  <2> iffalsebuf db 0
  4557                              <2> 
  4558 00003782 C3                  <2> notbatch: ret 
  4559                              <1> %ifdef network.included
  4560                              <1> 	%include 'source/programs/arp.asm'
  4561 00003783 FF2C61727000        <2> db 255,44,"arp",0
  4562                              <2> 	;ARP TESTING
  4563                              <2> arptest:
  4564 00003789 8B35[842C0000]      <2> 	mov esi, [currentcommandloc]
  4565 0000378F 81C604000000        <2> 	add esi, 4
  4566 00003795 E83A540000          <2> 	call strtoip
  4567 0000379A 890D[41380000]      <2> 	mov [arptargetinfo + 6], ecx ;move to next ip
  4568 000037A0 E875540000          <2> 	call showip
  4569 000037A5 803D[45380000]01    <2> 	cmp byte [arpconfig], 1
  4570 000037AC 7405                <2> 	je arptest2
  4571 000037AE E841000000          <2> 	call arpinit
  4572                              <2> arptest2:	;try to reach 192.168.0.1
  4573 000037B3 8B0D[C18C0000]      <2> 	mov ecx, [sysmac]
  4574 000037B9 668B1D[C58C0000]    <2> 	mov bx, [sysmac + 4]
  4575 000037C0 890D[21380000]      <2> 	mov [sourcemac], ecx
  4576 000037C6 66891D[25380000]    <2> 	mov [sourcemac + 4],bx
  4577 000037CD 890D[31380000]      <2> 	mov [arpsenderinfo], ecx
  4578 000037D3 66891D[35380000]    <2> 	mov [arpsenderinfo + 4], bx
  4579 000037DA BF[1B380000]        <2> 	mov edi, frame
  4580 000037DF BE[45380000]        <2> 	mov esi, framend
  4581 000037E4 E8AB530000          <2> 	call sendpacket
  4582 000037E9 BE[088D0000]        <2> 	mov esi, line
  4583 000037EE E848E5FFFF          <2> 	call print
  4584 000037F3 C3                  <2> 	ret
  4585                              <2> 	
  4586                              <2> arpinit:
  4587 000037F4 BE[46380000]        <2> 	mov esi, arptable
  4588 000037F9 BF[C18C0000]        <2> 	mov edi, sysmac
  4589 000037FE BB[BD8C0000]        <2> 	mov ebx, sysip
  4590 00003803 8B0F                <2> 	mov ecx, [edi]
  4591 00003805 890E                <2> 	mov [esi], ecx
  4592 00003807 668B4F04            <2> 	mov cx, [edi + 4]
  4593 0000380B 894E04              <2> 	mov [esi + 4], ecx
  4594 0000380E 8B0B                <2> 	mov ecx, [ebx]
  4595 00003810 894E06              <2> 	mov [esi + 6], ecx
  4596 00003813 C605[45380000]01    <2> 	mov byte [arpconfig], 1
  4597 0000381A C3                  <2> 	ret
  4598                              <2> 	
  4599                              <2> ;example frame
  4600                              <2> frame:
  4601 0000381B FFFFFFFFFFFF        <2> destinationmac:	db 0xFF,0xFF,0xFF,0xFF,0xFF,0xFF
  4602 00003821 000000000000        <2> sourcemac:		db 0,0,0,0,0,0
  4603 00003827 0806                <2> ethertype:		db 8,6			;arp is 0x806
  4604                              <2> 	;;example packet
  4605 00003829 0100                <2> 	arppacket: 		dw 1			;ethernet is 1
  4606 0000382B 0800                <2> 	arpprotocol: 	db 8,0			;ip is 0x800
  4607 0000382D 0604                <2> 					db 6,4			;length of mac, length of ip
  4608 0000382F 0001                <2> 	arpoperation: 	db 0,1			;one for arp request
  4609 00003831 000000000000        <2> 	arpsenderinfo:	db 0x00,0x00,0x00,0x00,0x00,0x00	;mac
  4610 00003837 C0A80073            <2> 					db 192,168,0,115		;ip
  4611 0000383B 000000000000        <2> 	arptargetinfo:	db 0x00,0x00,0x00,0x00,0x00,0x00	;ignored in requests
  4612 00003841 C0A80000            <2> 					db 192,168,0,0			;ip
  4613                              <2> framend:
  4614                              <2> 
  4615 00003845 00                  <2> arpconfig db 0
  4616                              <2> arptable:	;;mac,ip
  4617 00003846 000000000000000000- <2> 	times 10 db 0,0,0,0,0,0,0,0,0,0
  4618 0000384F 00<rept>            <2>
  4619                              <2> arptableend:	
  4620                              <1> %endif
  4621                              <1> %include 'source/programs/batch.asm'
  4622 000038AA FF2C626174636800    <2> db 255,44,"batch",0
  4623                              <2> 	batchst: 
  4624 000038B2 8B3D[842C0000]      <2> 		mov edi, [currentcommandloc]
  4625 000038B8 81C706000000        <2> 		add edi, 6
  4626 000038BE 803F00              <2> 		cmp byte [edi], 0
  4627 000038C1 0F846D000000        <2> 		je near nonamefound
  4628 000038C7 BE00004000          <2> 		mov esi, 0x400000
  4629 000038CC E8A82A0000          <2> 		call loadfile
  4630 000038D1 89D0                <2> 		mov eax, edx
  4631 000038D3 3D94010000          <2> 		cmp eax, 404
  4632 000038D8 7465                <2> 		je goodbatchname
  4633 000038DA BE[E5380000]        <2> 		mov esi, badbatchname
  4634 000038DF E857E4FFFF          <2> 		call print
  4635 000038E4 C3                  <2> 		ret
  4636 000038E5 546869732066696C65- <2> 		badbatchname db "This file already exists!",10,0
  4637 000038EE 20616C726561647920- <2>
  4638 000038F7 657869737473210A00  <2>
  4639 00003900 596F75206861766520- <2> 		namenotfoundbatch db "You have to type a name after the command.",10,0
  4640 00003909 746F20747970652061- <2>
  4641 00003912 206E616D6520616674- <2>
  4642 0000391B 65722074686520636F- <2>
  4643 00003924 6D6D616E642E0A00    <2>
  4644 0000392C 00000000            <2> 		esicache3 dd 0
  4645 00003930 00000000            <2> 		esicache2 dd 0
  4646                              <2> 	nonamefound:
  4647 00003934 BE[00390000]        <2> 		mov esi, namenotfoundbatch
  4648 00003939 E8FDE3FFFF          <2> 		call print
  4649 0000393E C3                  <2> 		ret
  4650                              <2> 	goodbatchname:
  4651 0000393F BE00004000          <2> 		mov esi, 0x400000
  4652                              <2> 	batchcreate:
  4653 00003944 8935[2C390000]      <2> 		mov [esicache3], esi
  4654 0000394A BF00008000          <2> 		mov edi, 0x800000
  4655 0000394F B00A                <2> 		mov al, 10
  4656 00003951 B307                <2> 		mov bl, 7
  4657 00003953 B404                <2> 		mov ah, 4
  4658 00003955 CD30                <2> 		int 30h
  4659 00003957 8935[30390000]      <2> 		mov [esicache2], esi
  4660 0000395D 8A0E                <2> 		mov cl, [esi]
  4661 0000395F 8B35[2C390000]      <2> 		mov esi, [esicache3]
  4662 00003965 BB[99390000]        <2> 		mov ebx, exitword
  4663 0000396A E854F3FFFF          <2> 		call cndtest
  4664 0000396F 3C01                <2> 		cmp al, 1
  4665 00003971 7411                <2> 		je endbatchcreate
  4666 00003973 3C02                <2> 		cmp al, 2
  4667 00003975 740D                <2> 		je endbatchcreate
  4668 00003977 8B35[30390000]      <2> 		mov esi, [esicache2]
  4669 0000397D B00A                <2> 		mov al, 10
  4670 0000397F 8806                <2> 		mov [esi], al
  4671 00003981 46                  <2> 		inc esi
  4672 00003982 EBC0                <2> 		jmp batchcreate
  4673                              <2> 	endbatchcreate:
  4674 00003984 8B35[2C390000]      <2> 		mov esi, [esicache3]
  4675 0000398A 31C0                <2> 		xor eax, eax
  4676 0000398C 8806                <2> 		mov [esi], al
  4677 0000398E BE00004000          <2> 		mov esi, 0x400000
  4678 00003993 E8A3E3FFFF          <2> 		call print
  4679 00003998 C3                  <2> 		ret
  4680                              <2> 	
  4681 00003999 5C7800              <2> 	exitword db "\x",0
  4682 0000399C 54797065205C782074- <2> 	wordmsg db "Type \x to exit.",10,0
  4683 000039A5 6F20657869742E0A00  <2>
  4684                              <1> %ifdef gui.background
  4685                              <1> 	%include 'source/programs/background.asm'
  4686 000039AE FF2C6261636B67726F- <2> db 255,44,"background",0
  4687 000039B7 756E6400            <2>
  4688 000039BB 8B3D[842C0000]      <2> 		mov edi, [currentcommandloc]
  4689 000039C1 81C70B000000        <2> 		add edi, 11
  4690 000039C7 BE00008000          <2> 		mov esi, 0x800000
  4691 000039CC E8A8290000          <2> 		call loadfile
  4692 000039D1 81FA94010000        <2> 		cmp edx, 404
  4693 000039D7 0F8445100000        <2> 		je near filenotfound
  4694 000039DD BE00008000          <2> 		mov esi, 0x800000
  4695 000039E2 66813E424D          <2> 		cmp word [esi], "BM"
  4696 000039E7 7401                <2> 		je .bmpfound
  4697 000039E9 C3                  <2> 		ret
  4698                              <2> .bmpfound:
  4699 000039EA 8B3D[44550000]      <2> 		mov edi, [physbaseptr]
  4700 000039F0 57                  <2> 		push edi
  4701 000039F1 BE[BFD10000]        <2> 		mov esi, backgroundbuffer
  4702 000039F6 8935[CF6A0000]      <2> 		mov [backgroundimage], esi
  4703 000039FC 8935[44550000]      <2> 		mov [physbaseptr], esi
  4704 00003A02 31C0                <2> 		xor eax, eax
  4705                              <2> .clearlp:
  4706 00003A04 8906                <2> 		mov [esi], eax
  4707 00003A06 81C604000000        <2> 		add esi, 4
  4708 00003A0C 81FE[BFE52800]      <2> 		cmp esi, backgroundbufferend
  4709 00003A12 72F0                <2> 		jb .clearlp
  4710 00003A14 BE00008000          <2> 		mov esi, 0x800000
  4711 00003A19 31C9                <2> 		xor ecx, ecx
  4712 00003A1B 31D2                <2> 		xor edx, edx
  4713 00003A1D 31DB                <2> 		xor ebx, ebx
  4714 00003A1F E8192B0000          <2> 		call showbmp
  4715 00003A24 5F                  <2> 		pop edi
  4716 00003A25 893D[44550000]      <2> 		mov [physbaseptr], edi
  4717 00003A2B 803D[E49E0000]00    <2> 		cmp byte [guion], 0
  4718 00003A32 740F                <2> 		je .noclear
  4719 00003A34 E843300000          <2> 		call guiclear
  4720 00003A39 E8DE2C0000          <2> 		call clearmousecursor
  4721 00003A3E E8BE300000          <2> 		call reloadallgraphics
  4722                              <2> .noclear:
  4723 00003A43 C3                  <2> 		ret
  4724                              <1> %endif
  4725                              <1> %include 'source/programs/beep.asm'
  4726 00003A44 FF2C6265657000      <2> 	db 255,44,"beep",0
  4727                              <2> beep:
  4728 00003A4B B8[703A0000]        <2> 	mov eax, beepstart
  4729 00003A50 A3[68020000]        <2> 	mov [soundpos], eax
  4730 00003A55 B8[743A0000]        <2> 	mov eax, beepend
  4731 00003A5A A3[6C020000]        <2> 	mov [soundendpos], eax
  4732 00003A5F C605[65020000]01    <2> 	mov byte [soundon], 1
  4733                              <2> waitforsoundendbeep:
  4734 00003A66 A0[65020000]        <2> 	mov al, [soundon]
  4735 00003A6B 3C00                <2> 	cmp al, 0
  4736 00003A6D 75F7                <2> 	jne waitforsoundendbeep
  4737 00003A6F C3                  <2> 	ret
  4738                              <2> 	
  4739                              <2> beepstart:
  4740 00003A70 3200D111            <2> 	dw 50, 4561
  4741                              <2> beepend:
  4742                              <1> %include 'source/programs/cd.asm'
  4743 00003A74 FF2C636400          <2> db 255,44,"cd",0
  4744                              <2> cd:
  4745 00003A79 8B35[842C0000]      <2> 	mov esi, [currentcommandloc]
  4746 00003A7F 81C603000000        <2> 	add esi, 3
  4747 00003A85 8B3D[32B50000]      <2> 	mov edi, [currentfolderloc]
  4748 00003A8B 893D[2EB50000]      <2> 	mov [lastfolderloc], edi
  4749 00003A91 81C7[36B50000]      <2> 	add edi, currentfolder
  4750 00003A97 4F                  <2> 	dec edi
  4751 00003A98 66813E2E2E          <2> 	cmp word [esi], ".."
  4752 00003A9D 742A                <2> 	je .moveup
  4753 00003A9F 47                  <2> 	inc edi
  4754                              <2> .movedown:
  4755 00003AA0 8A06                <2> 	mov al, [esi]
  4756 00003AA2 8807                <2> 	mov [edi], al
  4757 00003AA4 47                  <2> 	inc edi
  4758 00003AA5 46                  <2> 	inc esi
  4759 00003AA6 3C00                <2> 	cmp al, 0
  4760 00003AA8 740A                <2> 	je .donecd
  4761 00003AAA 81FF[36B70000]      <2> 	cmp edi, currentfolderend
  4762 00003AB0 72EE                <2> 	jb .movedown
  4763 00003AB2 30C0                <2> 	xor al, al
  4764                              <2> .donecd:
  4765 00003AB4 4F                  <2> 	dec edi
  4766 00003AB5 C6072F              <2> 	mov byte [edi], '/'
  4767 00003AB8 47                  <2> 	inc edi
  4768 00003AB9 C60700              <2> 	mov byte [edi], 0
  4769 00003ABC 81EF[36B50000]      <2> 	sub edi, currentfolder
  4770 00003AC2 893D[32B50000]      <2> 	mov [currentfolderloc], edi
  4771 00003AC8 C3                  <2> 	ret
  4772                              <2> .moveup:
  4773 00003AC9 31C0                <2> 	xor eax, eax
  4774 00003ACB A3[2EB50000]        <2> 	mov [lastfolderloc], eax
  4775                              <2> .moveuploop:
  4776 00003AD0 4F                  <2> 	dec edi
  4777 00003AD1 8A07                <2> 	mov al, [edi]
  4778 00003AD3 81FF[36B50000]      <2> 	cmp edi, currentfolder
  4779 00003AD9 763B                <2> 	jbe .moveupover
  4780 00003ADB 3C2F                <2> 	cmp al, '/'
  4781 00003ADD 75F1                <2> 	jne .moveuploop
  4782 00003ADF C6072F              <2> 	mov byte [edi], '/'
  4783 00003AE2 47                  <2> 	inc edi
  4784 00003AE3 C60700              <2> 	mov byte [edi], 0
  4785 00003AE6 81EF[36B50000]      <2> 	sub edi, currentfolder
  4786 00003AEC 893D[32B50000]      <2> 	mov [currentfolderloc], edi
  4787 00003AF2 81C7[36B50000]      <2> 	add edi, currentfolder
  4788 00003AF8 4F                  <2> 	dec edi
  4789                              <2> .lastfolder:
  4790 00003AF9 4F                  <2> 	dec edi
  4791 00003AFA 8A07                <2> 	mov al, [edi]
  4792 00003AFC 81FF[36B50000]      <2> 	cmp edi, currentfolder
  4793 00003B02 7604                <2> 	jbe .donemoveup
  4794 00003B04 3C2F                <2> 	cmp al, '/'
  4795 00003B06 75F1                <2> 	jne .lastfolder
  4796                              <2> .donemoveup:
  4797 00003B08 47                  <2> 	inc edi
  4798 00003B09 81EF[36B50000]      <2> 	sub edi, currentfolder
  4799 00003B0F 893D[2EB50000]      <2> 	mov [lastfolderloc], edi
  4800 00003B15 C3                  <2> 	ret
  4801                              <2> .moveupover:
  4802 00003B16 BF[36B50000]        <2> 	mov edi, currentfolder
  4803 00003B1B C6072F              <2> 	mov byte [edi], '/'
  4804 00003B1E 47                  <2> 	inc edi
  4805 00003B1F C60700              <2> 	mov byte [edi], 0
  4806 00003B22 31C0                <2> 	xor eax, eax
  4807 00003B24 A3[2EB50000]        <2> 	mov [lastfolderloc], eax
  4808 00003B29 40                  <2> 	inc eax
  4809 00003B2A A3[32B50000]        <2> 	mov [currentfolderloc], eax
  4810 00003B2F C3                  <2> 	ret
  4811                              <1> %include 'source/programs/charmap.asm'
  4812 00003B30 FF2C636861726D6170- <2> db 255,44,"charmap",0
  4813 00003B39 00                  <2>
  4814 00003B3A 66BB0700            <2> 	mov bx, 7
  4815 00003B3E B020                <2> 	mov al, " "
  4816 00003B40 E83DE7FFFF          <2> 	call prcharq
  4817 00003B45 E838E7FFFF          <2> 	call prcharq
  4818 00003B4A E833E7FFFF          <2> 	call prcharq
  4819 00003B4F E82EE7FFFF          <2> 	call prcharq
  4820 00003B54 B030                <2> 	mov al, "0"
  4821                              <2> charmapnumprnt:
  4822 00003B56 E827E7FFFF          <2> 	call prcharq
  4823 00003B5B FEC0                <2> 	inc al
  4824 00003B5D 6650                <2> 	push ax
  4825 00003B5F B020                <2> 	mov al, " "
  4826 00003B61 E81CE7FFFF          <2> 	call prcharq
  4827 00003B66 6658                <2> 	pop ax
  4828 00003B68 3C39                <2> 	cmp al, "9"
  4829 00003B6A 76EA                <2> 	jbe charmapnumprnt
  4830 00003B6C B041                <2> 	mov al, "A"
  4831                              <2> charmapnumprnt2:
  4832 00003B6E E80FE7FFFF          <2> 	call prcharq
  4833 00003B73 FEC0                <2> 	inc al
  4834 00003B75 6650                <2> 	push ax
  4835 00003B77 B020                <2> 	mov al, " "
  4836 00003B79 E804E7FFFF          <2> 	call prcharq
  4837 00003B7E 6658                <2> 	pop ax
  4838 00003B80 3C47                <2> 	cmp al, "G"
  4839 00003B82 72EA                <2> 	jb charmapnumprnt2
  4840                              <2> 	
  4841 00003B84 BE[088D0000]        <2> 	mov esi, line
  4842 00003B89 E89BE1FFFF          <2> 	call printquiet
  4843 00003B8E 6631C0              <2> 	xor ax, ax
  4844 00003B91 88C1                <2> 	mov cl, al
  4845 00003B93 E8FFF2FFFF          <2> 	call showhexsmall
  4846 00003B98 E955000000          <2> 	jmp charmapnocopy ;the first char is 0 which is unprintable
  4847                              <2> charmapcopy:
  4848 00003B9D FEC0                <2> 	inc al
  4849 00003B9F 6650                <2> 	push ax
  4850 00003BA1 3C08                <2> 	cmp al, 8
  4851 00003BA3 744D                <2> 	je charmapnocopy
  4852 00003BA5 3C09                <2> 	cmp al, 9
  4853 00003BA7 7449                <2> 	je charmapnocopy
  4854 00003BA9 3C0A                <2> 	cmp al, 10
  4855 00003BAB 7445                <2> 	je charmapnocopy
  4856 00003BAD 3C0D                <2> 	cmp al, 13
  4857 00003BAF 7441                <2> 	je charmapnocopy
  4858 00003BB1 3CFF                <2> 	cmp al, 255
  4859 00003BB3 743D                <2> 	je charmapnocopy
  4860 00003BB5 3C00                <2> 	cmp al, 0
  4861 00003BB7 7434                <2> 	je nomorecharmap
  4862 00003BB9 E8C4E6FFFF          <2> 	call prcharq
  4863 00003BBE B020                <2> 	mov al, " "
  4864 00003BC0 E8BDE6FFFF          <2> 	call prcharq
  4865 00003BC5 6658                <2> 	pop ax
  4866                              <2> charmapcopycheck:
  4867 00003BC7 FEC4                <2> 	inc ah
  4868 00003BC9 80FC10              <2> 	cmp ah, 16
  4869 00003BCC 72CF                <2> 	jb charmapcopy
  4870 00003BCE 6650                <2> 	push ax
  4871 00003BD0 BE[088D0000]        <2> 	mov esi, line
  4872 00003BD5 E84FE1FFFF          <2> 	call printquiet
  4873 00003BDA 6658                <2> 	pop ax
  4874 00003BDC 3CFF                <2> 	cmp al, 255
  4875 00003BDE 740D                <2> 	je nomorecharmap
  4876 00003BE0 88C1                <2> 	mov cl, al
  4877 00003BE2 FEC1                <2> 	inc cl
  4878 00003BE4 E8AEF2FFFF          <2> 	call showhexsmall
  4879 00003BE9 30E4                <2> 	xor ah, ah
  4880 00003BEB EBB0                <2> 	jmp charmapcopy
  4881                              <2> nomorecharmap:
  4882 00003BED E9DFEDFFFF          <2> 	jmp nwcmd
  4883                              <2> charmapnocopy:
  4884 00003BF2 6650                <2> 	push ax
  4885 00003BF4 B020                <2> 	mov al, " "
  4886 00003BF6 E887E6FFFF          <2> 	call prcharq
  4887 00003BFB E882E6FFFF          <2> 	call prcharq
  4888 00003C00 6658                <2> 	pop ax
  4889 00003C02 EBC3                <2> 	jmp charmapcopycheck
  4890                              <1> %include 'source/programs/clear.asm'
  4891 00003C04 FF2C636C65617200    <2> db 255,44,"clear",0
  4892 00003C0C E890E1FFFF          <2> 		call clear
  4893 00003C11 C3                  <2> 		ret 
  4894                              <1> %include 'source/programs/cpuid.asm'
  4895 00003C12 FF2C637075696400    <2> db 255,44,"cpuid",0
  4896 00003C1A 31C0                <2> 	xor eax, eax
  4897 00003C1C 0FA2                <2> 	cpuid
  4898 00003C1E 891D[6F3C0000]      <2> 	mov [cpuidbuf], ebx
  4899 00003C24 8915[733C0000]      <2> 	mov [cpuidbuf + 4], edx
  4900 00003C2A 890D[773C0000]      <2> 	mov [cpuidbuf + 8], ecx
  4901 00003C30 BE[6F3C0000]        <2> 	mov esi, cpuidbuf
  4902 00003C35 E801E1FFFF          <2> 	call print
  4903 00003C3A BE[088D0000]        <2> 	mov esi, line
  4904 00003C3F E8F7E0FFFF          <2> 	call print
  4905 00003C44 B801000000          <2> 	mov eax, 1
  4906 00003C49 0FA2                <2> 	cpuid
  4907 00003C4B 89C1                <2> 	mov ecx, eax
  4908 00003C4D C605[962E0000]02    <2> 	mov byte [firsthexshown], 2
  4909 00003C54 E852F2FFFF          <2> 	call showhex
  4910 00003C59 B808000080          <2> 	mov eax, 0x80000008
  4911 00003C5E 0FA2                <2> 	cpuid
  4912 00003C60 89C1                <2> 	mov ecx, eax
  4913 00003C62 C605[962E0000]02    <2> 	mov byte [firsthexshown], 2
  4914 00003C69 E83DF2FFFF          <2> 	call showhex
  4915 00003C6E C3                  <2> 	ret
  4916                              <2> 	
  4917 00003C6F 00<rept>            <2> cpuidbuf times 13 db 0
  4918                              <2> cpuidvendorend:
  4919                              <1> %ifdef network.included
  4920                              <1> 	%include 'source/programs/dhcp.asm'
  4921 00003C7C FF2C6468637000      <2> db 255,44,"dhcp",0
  4922                              <2> dhcp:
  4923 00003C83 BE[433D0000]        <2> 	mov esi, .dhcp.mac
  4924 00003C88 BB[233E0000]        <2> 	mov ebx, .dhcp.option.mac
  4925 00003C8D BF[033D0000]        <2> 	mov edi, .mac
  4926 00003C92 31C9                <2> 	xor ecx, ecx
  4927 00003C94 66890D[153D0000]    <2> 	mov [.ip.checksum], cx
  4928 00003C9B 66890D[253D0000]    <2> 	mov [.udp.checksum], cx
  4929 00003CA2 8B0D[C18C0000]      <2> 	mov ecx, [sysmac]
  4930 00003CA8 890B                <2> 	mov [ebx], ecx
  4931 00003CAA 890F                <2> 	mov [edi], ecx
  4932 00003CAC 890E                <2> 	mov [esi], ecx
  4933 00003CAE 668B0D[C58C0000]    <2> 	mov cx, [sysmac + 4]
  4934 00003CB5 66894B04            <2> 	mov [ebx + 4], cx
  4935 00003CB9 66894E04            <2> 	mov [esi + 4], cx
  4936 00003CBD 66894F04            <2> 	mov [edi + 4], cx
  4937 00003CC1 BF[0B3D0000]        <2> 	mov edi, .ip.header
  4938 00003CC6 BE[1F3D0000]        <2> 	mov esi, .ip.headerend
  4939 00003CCB E8DC4E0000          <2> 	call getchecksum
  4940 00003CD0 66890D[153D0000]    <2> 	mov [.ip.checksum], cx
  4941 00003CD7 BF[1F3D0000]        <2> 	mov edi, .udp.header
  4942 00003CDC BE[3A3E0000]        <2> 	mov esi, .udp.end
  4943 00003CE1 E8C64E0000          <2> 	call getchecksum
  4944 00003CE6 66890D[253D0000]    <2> 	mov [.udp.checksum], cx
  4945 00003CED BF[FD3C0000]        <2> 	mov edi, .frame
  4946 00003CF2 BE[3A3E0000]        <2> 	mov esi, .udp.end
  4947 00003CF7 E8984E0000          <2> 	call sendpacket
  4948 00003CFC C3                  <2> 	ret
  4949                              <2> .frame:
  4950 00003CFD FFFFFFFFFFFF        <2> 	.destmac db 0xFF,0xFF,0xFF,0xFF,0xFF,0xFF
  4951 00003D03 000000000000        <2> 	.mac db 0,0,0,0,0,0
  4952 00003D09 0800                <2> 	db 8,0
  4953                              <2> .ip.header:
  4954 00003D0B 45                  <2> 	db (0x40 | (.ip.headerend - .ip.header)/4)
  4955 00003D0C 00                  <2> 	db 0
  4956 00003D0D 012F                <2> 	db (.udp.end - .ip.header)/256, (.udp.end - .ip.header)
  4957 00003D0F 0000                <2> 	dw 0
  4958 00003D11 0000                <2> 	dw 0
  4959 00003D13 80                  <2> 	db 0x80
  4960 00003D14 11                  <2> 	db 17
  4961 00003D15 0000                <2> .ip.checksum dw 0
  4962 00003D17 00000000            <2> 	db 0,0,0,0
  4963 00003D1B FFFFFFFF            <2> 	db 255,255,255,255	
  4964                              <2> .ip.headerend:
  4965                              <2> .udp.header:
  4966 00003D1F 0044                <2> 	db 0,68	;source port
  4967 00003D21 0043                <2> 	db 0,67 ;destination port
  4968 00003D23 011B                <2> 	db (.udp.end - .udp.header)/256, (.udp.end - .udp.header)
  4969 00003D25 0000                <2> .udp.checksum dw 0
  4970                              <2> .udp.headerend:
  4971                              <2> .dhcp.data:
  4972 00003D27 01                  <2> 	db 1	;message type
  4973 00003D28 01                  <2> 	db 1	;hardware type
  4974 00003D29 06                  <2> 	db 6	;hardware address length
  4975 00003D2A 00                  <2> 	db 0	;hops
  4976 00003D2B EC2B2369            <2> 	db 0xEC,0x2B,0x23,0x69	;transaction ID
  4977 00003D2F 0000                <2> 	db 0,0	;seconds elapsed
  4978 00003D31 0000                <2> 	db 0,0	;flags
  4979 00003D33 00000000            <2> 	db 0,0,0,0	;client ip address
  4980 00003D37 00000000            <2> 	db 0,0,0,0	;your ip address
  4981 00003D3B 00000000            <2> 	db 0,0,0,0	;server ip address
  4982 00003D3F 00000000            <2> 	db 0,0,0,0	;relay agent ip address
  4983 00003D43 000000000000        <2> .dhcp.mac db 0,0,0,0,0,0	;client hardware address
  4984 00003D49 00<rept>            <2> 	times 10 db 0	;padding
  4985 00003D53 00<rept>            <2> 	times 64 db 0	;server host name
  4986 00003D93 00<rept>            <2> 	times 128 db 0	;boot file name
  4987 00003E13 63825363            <2> 	db 0x63,0x82,0x53,0x63	;magic cookie
  4988                              <2> .dhcp.option.type:
  4989 00003E17 350103              <2> 	db 53,1,3	;DHCP Request
  4990 00003E1A 3204C0A80002        <2> 	db 50,4,192,168,0,2	;requested IP
  4991 00003E20 3D07                <2> 	db 61,7 ;client id(mac)
  4992 00003E22 01                  <2> 	db 1	;Type=Ethernet
  4993 00003E23 000000000000        <2> .dhcp.option.mac:	db 0,0,0,0,0,0
  4994 00003E29 0C08                <2> 	db 12,8 ;host name
  4995 00003E2B 536F6C6C65724F53    <2> .dhcp.option.name 	db "SollerOS"
  4996 00003E33 370401030F06        <2> 	db 55,4,1,3,15,6	;request subnet, router, domain name, name server
  4997 00003E39 FF                  <2> 	db 0xFF	;end DHCP options
  4998                              <2> .dhcp.end:
  4999                              <2> .udp.end:
  5000                              <2> 	
  5001                              <1> %endif
  5002                              <1> %include 'source/programs/dos.asm'
  5003 00003E3A FF2C646F7300        <2> db 255,44,"dos",0
  5004                              <2> dosrunner:
  5005 00003E40 8925[2AB50000]      <2> 	mov [previousstack], esp
  5006 00003E46 8B3D[842C0000]      <2> 	mov edi, [currentcommandloc]
  5007 00003E4C 81C704000000        <2> 	add edi, 4
  5008 00003E52 BE00014000          <2> 	mov esi,  0x100 + dosprogloc	;this should be the beginning of memory
  5009 00003E57 E81D250000          <2> 	call loadfile
  5010 00003E5C 8B3D[842C0000]      <2> 	mov edi, [currentcommandloc]
  5011 00003E62 81C704000000        <2> 	add edi, 4
  5012 00003E68 81FA94010000        <2> 	cmp edx, 404
  5013 00003E6E 0F845E000000        <2> 	je near .noprogfound
  5014 00003E74 BB81004000          <2> 	mov ebx, 0x81 + dosprogloc
  5015 00003E79 31C9                <2> 	xor ecx, ecx
  5016                              <2> .findparams:
  5017 00003E7B 47                  <2> 	inc edi
  5018 00003E7C 8A07                <2> 	mov al, [edi]
  5019 00003E7E 3C20                <2> 	cmp al, " "
  5020 00003E80 75F9                <2> 	jne .findparams
  5021                              <2> .copyparams:
  5022 00003E82 8A07                <2> 	mov al, [edi]
  5023 00003E84 8803                <2> 	mov [ebx], al
  5024 00003E86 43                  <2> 	inc ebx
  5025 00003E87 47                  <2> 	inc edi
  5026 00003E88 41                  <2> 	inc ecx
  5027 00003E89 81FB00014000        <2> 	cmp ebx, 0x100 + dosprogloc
  5028 00003E8F 7304                <2> 	jae .nomoreparams
  5029 00003E91 3C00                <2> 	cmp al, 0
  5030 00003E93 75ED                <2> 	jne .copyparams
  5031                              <2> .nomoreparams:
  5032 00003E95 880D80004000        <2> 	mov [0x80 + dosprogloc], cl
  5033 00003E9B 66B85000            <2> 	mov ax, DOS_DATA_SEL
  5034 00003E9F 8ED8                <2> 	mov ds, ax
  5035 00003EA1 8EC0                <2> 	mov es, ax
  5036 00003EA3 8EE0                <2> 	mov fs, ax
  5037 00003EA5 8EE8                <2> 	mov gs, ax
  5038 00003EA7 31C0                <2> 	xor eax, eax
  5039 00003EA9 31DB                <2> 	xor ebx, ebx
  5040 00003EAB 31C9                <2> 	xor ecx, ecx
  5041 00003EAD 31D2                <2> 	xor edx, edx
  5042 00003EAF 31FF                <2> 	xor edi, edi
  5043 00003EB1 31F6                <2> 	xor esi, esi
  5044 00003EB3 9A000100004800      <2> 	call DOS_CODE_SEL:0x100
  5045 00003EBA 66BB3000            <2> 	mov bx, NEW_DATA_SEL
  5046 00003EBE 6689DA              <2> 	mov dx, bx
  5047 00003EC1 8EC3                <2> 	mov es, bx
  5048 00003EC3 8EE3                <2> 	mov fs, bx
  5049 00003EC5 66BB2000            <2> 	mov bx, SYS_DATA_SEL
  5050 00003EC9 8EEB                <2> 	mov gs, bx
  5051 00003ECB 8B25[2AB50000]      <2> 	mov esp, [previousstack]
  5052 00003ED1 C3                  <2> 	ret
  5053                              <2> .noprogfound:
  5054 00003ED2 BE[CF8C0000]        <2> 	mov esi, notfound1
  5055 00003ED7 E85FDEFFFF          <2> 	call print
  5056 00003EDC 8B35[842C0000]      <2> 	mov esi, [currentcommandloc]
  5057 00003EE2 81C604000000        <2> 	add esi, 4
  5058 00003EE8 E84EDEFFFF          <2> 	call print
  5059 00003EED BE[D78C0000]        <2> 	mov esi, notfound2
  5060 00003EF2 E844DEFFFF          <2> 	call print
  5061 00003EF7 C3                  <2> 	ret
  5062                              <2> 	
  5063                              <1> %include 'source/programs/dump.asm'
  5064 00003EF8 FF2C64756D7000      <2> db 255,44,"dump",0
  5065 00003EFF 8B35[842C0000]      <2> 	mov esi, [currentcommandloc]
  5066 00003F05 81C605000000        <2> 	add esi, 5
  5067 00003F0B 31C9                <2> 	xor ecx, ecx
  5068 00003F0D 66B83078            <2> 	mov ax, "0x"
  5069 00003F11 663906              <2> 	cmp [esi], ax
  5070 00003F14 740A                <2> 	je dumphexin
  5071 00003F16 E83CF1FFFF          <2> 	call cnvrttxt
  5072 00003F1B E910000000          <2> 	jmp dumphexnow
  5073                              <2> dumphexin:
  5074 00003F20 81C602000000        <2> 	add esi, 2
  5075 00003F26 E8E3F0FFFF          <2> 	call cnvrthextxt
  5076 00003F2B E900000000          <2> 	jmp dumphexnow
  5077                              <2> dumphexnow:
  5078 00003F30 89CF                <2> 	mov edi, ecx
  5079 00003F32 89FE                <2> 	mov esi, edi
  5080 00003F34 81C680030000        <2> 	add esi, 896
  5081                              <2> dumphexloop:
  5082 00003F3A 8B0F                <2> 	mov ecx, [edi]
  5083 00003F3C C605[962E0000]05    <2> 	mov byte [firsthexshown],5
  5084 00003F43 E863EFFFFF          <2> 	call showhex
  5085 00003F48 81C704000000        <2> 	add edi, 4
  5086 00003F4E 39F7                <2> 	cmp edi, esi
  5087 00003F50 72E8                <2> 	jb dumphexloop
  5088 00003F52 E85EE6FFFF          <2> 	call termcopy
  5089 00003F57 C3                  <2> 	ret 
  5090                              <1> %include 'source/programs/echo.asm'
  5091                              <2> 
  5092 00003F58 FF2C6563686F00      <2> db 255,44,"echo",0
  5093                              <2> 	echoprog:
  5094 00003F5F 8B35[842C0000]      <2> 		mov esi, [currentcommandloc]
  5095 00003F65 81C605000000        <2> 		add esi, 5
  5096 00003F6B 8A06                <2> 		mov al, [esi]
  5097 00003F6D E8C9DDFFFF          <2> 		call print
  5098 00003F72 BE[088D0000]        <2> 		mov esi, line
  5099 00003F77 E8BFDDFFFF          <2> 		call print
  5100 00003F7C C3                  <2> 		ret
  5101 00003F7D BB[AAB70000]        <2> 	echovr:	mov ebx, variables
  5102 00003F82 BF06000000          <2> 		mov edi, 6
  5103 00003F87 E83C000000          <2> 		call nxtvrech
  5104 00003F8C E954000000          <2> 		jmp prntvr2
  5105 00003F91 B13D                <2> 	echvar:	mov cl, '='
  5106 00003F93 43                  <2> 		inc ebx
  5107 00003F94 8A03                <2> 		mov al, [ebx]
  5108 00003F96 3C00                <2> 		cmp al, 0
  5109 00003F98 742E                <2> 		je nxtvrech
  5110 00003F9A 3C3D                <2> 		cmp al, '='
  5111 00003F9C 7422                <2> 		je nxtvrechb1
  5112 00003F9E 8B35[842C0000]      <2> 		mov esi, [currentcommandloc]
  5113 00003FA4 01FE                <2> 		add esi, edi
  5114 00003FA6 E818EDFFFF          <2> 		call cndtest
  5115 00003FAB 3C02                <2> 		cmp al, 2
  5116 00003FAD 7432                <2> 		je prntvr
  5117 00003FAF 3C01                <2> 		cmp al, 1
  5118 00003FB1 742E                <2> 		je prntvr
  5119 00003FB3 8B35[842C0000]      <2> 		mov esi, [currentcommandloc]
  5120 00003FB9 01FE                <2> 		add esi, edi
  5121 00003FBB E908000000          <2> 		jmp nxtvrech
  5122                              <2> 	nxtvrechb1:
  5123 00003FC0 81EB02000000        <2> 		sub ebx, 2
  5124 00003FC6 EBC9                <2> 		jmp echvar
  5125 00003FC8 8A03                <2> 	nxtvrech: mov al, [ebx]
  5126 00003FCA 3C05                <2> 		cmp al, 5
  5127 00003FCC 740A                <2> 		je nxtvrec2
  5128 00003FCE 43                  <2> 		inc ebx
  5129 00003FCF 81FB[AAC70000]      <2> 		cmp ebx, varend
  5130 00003FD5 72F1                <2> 		jb nxtvrech
  5131 00003FD7 C3                  <2> 		ret
  5132 00003FD8 43                  <2> 	nxtvrec2: inc ebx
  5133 00003FD9 8A03                <2> 		mov al, [ebx]
  5134 00003FDB 3C04                <2> 		cmp al, 4
  5135 00003FDD 74B2                <2> 		je echvar
  5136 00003FDF EBE7                <2> 		jmp nxtvrech
  5137 00003FE1 43                  <2> 	prntvr: inc ebx
  5138 00003FE2 89DE                <2> 		mov esi, ebx
  5139 00003FE4 C3                  <2> 		ret
  5140 00003FE5 E851DDFFFF          <2> 	prntvr2: call print
  5141 00003FEA BE[088D0000]        <2> 		mov esi, line
  5142 00003FEF E847DDFFFF          <2> 		call print
  5143 00003FF4 C3                  <2> 		ret 
  5144                              <1> %include 'source/programs/else.asm'
  5145 00003FF5 FF2C656C736500      <2> 	db 255,44,"else",0
  5146 00003FFC 31C0                <2> elsecmd:	xor eax, eax
  5147 00003FFE 3805[A4B70000]      <2> 	cmp [BATCHISON], al
  5148 00004004 0F8478F7FFFF        <2> 	je near notbatch
  5149 0000400A A0[3BB70000]        <2> 	mov al, [IFON]
  5150 0000400F BE[3CB70000]        <2> 	mov esi, IFTRUE
  5151 00004014 01C6                <2> 	add esi, eax
  5152 00004016 8A06                <2> 	mov al, [esi]
  5153 00004018 3401                <2> 	xor al, 1
  5154 0000401A 8806                <2> 	mov [esi], al
  5155 0000401C C3                  <2> 	ret 
  5156                              <1> %include 'source/programs/exit.asm'
  5157 0000401D FF2C6578697400      <2> db 255,44,"exit",0
  5158 00004024 803D[3AB70000]01    <2> 	cmp byte [ranboot], 1
  5159 0000402B 0F8434E9FFFF        <2> 	je near returnfromexp
  5160 00004031 E91CE8FFFF          <2> 	jmp nobootfile
  5161                              <1> %include 'source/programs/fi.asm'
  5162 00004036 FF2C666900          <2> 	db 255,44,"fi",0
  5163 0000403B 30C0                <2> 	xor al, al
  5164 0000403D 3805[A4B70000]      <2> 	cmp [BATCHISON], al
  5165 00004043 0F8439F7FFFF        <2> 	je near notbatch
  5166 00004049 B001                <2> fi:	mov al, 1
  5167 0000404B 2805[3BB70000]      <2> 	sub [IFON],al
  5168 00004051 C3                  <2> 	ret 
  5169                              <1> %ifdef gui.included
  5170                              <1> 	%include 'source/programs/gui.asm'
  5171 00004052 FF2C67756900        <2> db 255,44,"gui",0
  5172                              <2> guiswitcher:
  5173 00004058 8B35[842C0000]      <2> 	mov esi, [currentcommandloc]
  5174 0000405E 81C604000000        <2> 	add esi, 4
  5175 00004064 31C9                <2> 	xor ecx, ecx
  5176 00004066 803E00              <2> 	cmp byte [esi], 0
  5177 00004069 740A                <2> 	je .nomodepref
  5178 0000406B E89EEFFFFF          <2> 	call cnvrthextxt ;switches arg on cline to vesa mode in ecx
  5179 00004070 E907000000          <2> 	jmp .modepref
  5180                              <2> .nomodepref:
  5181 00004075 51                  <2> 	push ecx
  5182 00004076 E826DDFFFF          <2> 	call clear
  5183 0000407B 59                  <2> 	pop ecx
  5184                              <2> .modepref:
  5185 0000407C 66BB[3E51]          <2> 	mov bx, guiswitch
  5186 00004080 66891D[0A0D0000]    <2> 	mov [realmodeptr], bx
  5187 00004087 BB[97400000]        <2> 	mov ebx, guiswitchret
  5188 0000408C 891D[060D0000]      <2> 	mov [realmodereturn], ebx
  5189 00004092 E958CBFFFF          <2> 	jmp realmode
  5190                              <2> guiswitchret:
  5191 00004097 65803D[E49E0000]01  <2> 	cmp byte [gs:guion], 1
  5192 0000409F 7401                <2> 	je .cont
  5193 000040A1 C3                  <2> 	ret
  5194                              <2> .cont:
  5195 000040A2 BF[1C530000]        <2> 	mov edi, VBEMODEBLOCK
  5196                              <2> .loop:
  5197 000040A7 658B07              <2> 	mov eax, [gs:edi]
  5198 000040AA 8907                <2> 	mov [edi], eax
  5199 000040AC 47                  <2> 	inc edi
  5200 000040AD 81FF[20560000]      <2> 	cmp edi, VBEEND
  5201 000040B3 72F2                <2> 	jb .loop
  5202 000040B5 A1[44550000]        <2> 	mov eax, [physbaseptr]
  5203 000040BA 2D00001000          <2> 	sub eax, 0x100000
  5204 000040BF A3[44550000]        <2> 	mov [physbaseptr], eax
  5205 000040C4 C605[80220000]00    <2> 	mov byte [termguion], 0
  5206 000040CB BE[BFCF0000]        <2> 	mov esi, graphicstable
  5207 000040D0 30C0                <2> 	xor al, al
  5208                              <2> .clear:
  5209 000040D2 8806                <2> 	mov [esi], al
  5210 000040D4 46                  <2> 	inc esi
  5211 000040D5 81FE[BFD10000]      <2> 	cmp esi, graphicstableend
  5212 000040DB 72F5                <2> 	jb .clear
  5213 000040DD E8EF2A0000          <2> 	call guisetup
  5214                              <2> 	;The next few lines center a window that is 3/4ths of the full screen
  5215 000040E2 668B15[2E550000]    <2> 	mov dx, [resolutionx]
  5216 000040E9 668B0D[30550000]    <2> 	mov cx, [resolutiony]
  5217 000040F0 6689D3              <2> 	mov bx, dx
  5218 000040F3 6689C8              <2> 	mov ax, cx
  5219 000040F6 66D1EB              <2> 	shr bx, 1
  5220 000040F9 66D1E8              <2> 	shr ax, 1
  5221 000040FC 6689DA              <2> 	mov dx, bx
  5222 000040FF 66D1EA              <2> 	shr dx, 1
  5223 00004102 6689C1              <2> 	mov cx, ax
  5224 00004105 66D1E9              <2> 	shr cx, 1
  5225 00004108 6601D3              <2> 	add bx, dx
  5226 0000410B 6601C8              <2> 	add ax, cx
  5227 0000410E 66D1E9              <2> 	shr cx, 1
  5228 00004111 66C1EB03            <2> 	shr bx, 3
  5229 00004115 66C1E303            <2> 	shl bx, 3
  5230 00004119 66C1E804            <2> 	shr ax, 4
  5231 0000411D 66C1E004            <2> 	shl ax, 4
  5232 00004121 66891D[E36D0000]    <2> 	mov [termwindow], bx
  5233 00004128 66A3[E56D0000]      <2> 	mov [termwindow + 2], ax	;the previous lines of code make a large terminal window that is 4 characters smaller than the screen
  5234 0000412E BE[E36D0000]        <2> 	mov esi, termwindow
  5235 00004133 31DB                <2> 	xor ebx, ebx
  5236 00004135 6631C0              <2> 	xor ax, ax
  5237 00004138 E8E0310000          <2> 	call showwindow
  5238 0000413D E8DF140000          <2> 	call cursorgui
  5239 00004142 E85ADCFFFF          <2> 	call clear
  5240 00004147 C3                  <2> 	ret
  5241                              <2> 	
  5242                              <1> %endif
  5243                              <1> %include 'source/programs/help.asm'
  5244 00004148 FF2C68656C7000      <2> db 255,44,"help",0
  5245                              <2> lscmd:	
  5246 0000414F B00D                <2> 		mov al, 13
  5247 00004151 E82CE1FFFF          <2> 		call prcharq
  5248 00004156 BE[DA300000]        <2> 		mov esi, progstart
  5249 0000415B BB[3E510000]        <2> 		mov ebx, progend
  5250 00004160 BE[2AB10000]        <2> dir:	mov esi, fileindex
  5251 00004165 8A06                <2> 	dirnxt:	mov al, [esi]
  5252 00004167 30E4                <2> 		xor ah, ah
  5253 00004169 3CFF                <2> 		cmp al, 255
  5254 0000416B 7415                <2> 		je dirfnd
  5255 0000416D 46                  <2> 		inc esi
  5256 0000416E 81FE[2AB50000]      <2> 		cmp esi,  fileindexend
  5257 00004174 7339                <2> 		jae dirdn
  5258 00004176 EBED                <2> 		jmp dirnxt
  5259                              <2> 	dirfnd3:
  5260 00004178 46                  <2> 		inc esi
  5261 00004179 81FE[2AB50000]      <2> 		cmp esi, fileindexend
  5262 0000417F 76E4                <2> 		jbe dirnxt
  5263 00004181 4E                  <2> 		dec esi
  5264 00004182 46                  <2> 	dirfnd:	inc esi
  5265 00004183 8A06                <2> 		mov al, [esi]
  5266 00004185 30E4                <2> 		xor ah, ah
  5267 00004187 3C2C                <2> 		cmp al, 44
  5268 00004189 740B                <2> 		je dirfnd2
  5269 0000418B 46                  <2> 		inc esi
  5270 0000418C 81FE[2AB50000]      <2> 		cmp esi,  fileindexend
  5271 00004192 731B                <2> 		jae dirdn
  5272 00004194 EBCF                <2> 		jmp dirnxt
  5273 00004196 46                  <2> 	dirfnd2: inc esi
  5274 00004197 E88DDBFFFF          <2> 		call printquiet
  5275 0000419C 56                  <2> 		push esi
  5276 0000419D B009                <2> 		mov al, 9
  5277 0000419F E8DEE0FFFF          <2> 		call prcharq
  5278 000041A4 5E                  <2> 		pop esi
  5279 000041A5 81FE[2AB50000]      <2> 		cmp esi,  fileindexend
  5280 000041AB 7302                <2> 		jae dirdn
  5281 000041AD EBB6                <2> 		jmp dirnxt
  5282 000041AF BE[088D0000]        <2> 	dirdn:	mov esi, line
  5283 000041B4 E882DBFFFF          <2> 			call print
  5284 000041B9 C3                  <2> 			ret
  5285 000041BA 00                  <2> currentdir db 0
  5286                              <1> %include 'source/programs/if.asm'
  5287 000041BB FF2C696600          <2> 	db 255,44,"if",0
  5288 000041C0 30C0                <2> ifcmd:	xor al, al
  5289 000041C2 3805[A4B70000]      <2> 	cmp [BATCHISON], al
  5290 000041C8 0F84B4F5FFFF        <2> 	je near notbatch
  5291 000041CE 8B1D[842C0000]      <2> 	mov ebx, [currentcommandloc]
  5292 000041D4 81C303000000        <2> 	add ebx, 3
  5293 000041DA 89DE                <2> 	mov esi, ebx
  5294 000041DC 8A06                <2> chkeqsn: mov al, [esi]
  5295 000041DE 3C00                <2> 	cmp al, 0
  5296 000041E0 0F849CF5FFFF        <2> 	je near notbatch
  5297 000041E6 3C3D                <2> 	cmp al, '='
  5298 000041E8 0F8403000000        <2> 	je near chkeqdn
  5299 000041EE 46                  <2> 	inc esi
  5300 000041EF EBEB                <2> 	jmp chkeqsn
  5301 000041F1 B000                <2> chkeqdn: mov al, 0 
  5302 000041F3 8806                <2> 	mov [esi], al
  5303 000041F5 46                  <2> 	inc esi
  5304 000041F6 E88DEAFFFF          <2> 	call tester
  5305 000041FB 3C01                <2> 	cmp al, 1
  5306 000041FD 0F8405000000        <2> 	je near trueif
  5307 00004203 E91C000000          <2> 	jmp falseif
  5308 00004208 31C0                <2> trueif:	xor eax, eax
  5309 0000420A A0[3BB70000]        <2> 	mov al, [IFON]
  5310 0000420F FEC0                <2> 	inc al
  5311 00004211 A2[3BB70000]        <2> 	mov [IFON], al
  5312 00004216 30E4                <2> 	xor ah, ah
  5313 00004218 BE[3CB70000]        <2> 	mov esi, IFTRUE
  5314 0000421D 01C6                <2> 	add esi, eax
  5315 0000421F B401                <2> 	mov ah, 1
  5316 00004221 8826                <2> 	mov [esi], ah
  5317 00004223 C3                  <2> 	ret 
  5318 00004224 31C0                <2> falseif: xor eax, eax
  5319 00004226 A0[3BB70000]        <2> 	mov al, [IFON]
  5320 0000422B FEC0                <2> 	inc al
  5321 0000422D A2[3BB70000]        <2> 	mov [IFON], al
  5322 00004232 30E4                <2> 	xor ah, ah
  5323 00004234 BE[3CB70000]        <2> 	mov esi, IFTRUE
  5324 00004239 01C6                <2> 	add esi, eax
  5325 0000423B 30E4                <2> 	xor ah, ah
  5326 0000423D 8826                <2> 	mov [esi], ah
  5327 0000423F C3                  <2> 	ret 
  5328                              <1> %ifdef network.included
  5329                              <1> 	%include 'source/programs/ipconfig.asm'
  5330 00004240 FF2C6970636F6E6669- <2> db 255,44,"ipconfig",0
  5331 00004249 6700                <2>
  5332                              <2> ifconfig:
  5333 0000424B 8B35[842C0000]      <2> 	mov esi, [currentcommandloc]
  5334 00004251 81C609000000        <2> 	add esi, 9
  5335 00004257 803E00              <2> 	cmp byte [esi], 0
  5336 0000425A 740B                <2> 	je .noip
  5337 0000425C E873490000          <2> 	call strtoip
  5338 00004261 890D[BD8C0000]      <2> 	mov [sysip], ecx
  5339                              <2> .noip:
  5340                              <2> %ifdef ne2000.included
  5341 00004267 803D[1D8A0000]01    <2> 	cmp byte [ne2000.nicconfig], 1
  5342 0000426E 751E                <2> 	jne .none2000
  5343 00004270 BE[1E8A0000]        <2> 	mov esi, ne2000.name
  5344 00004275 E8C1DAFFFF          <2> 	call print
  5345 0000427A B9[408A0000]        <2> 	mov ecx, ne2000.mac
  5346 0000427F E8D2490000          <2> 	call showmac
  5347 00004284 BE[088D0000]        <2> 	mov esi, line
  5348 00004289 E8ADDAFFFF          <2> 	call print
  5349                              <2> .none2000:
  5350                              <2> %endif
  5351                              <2> %ifdef rtl8139.included
  5352 0000428E 803D[3F830000]01    <2> 	cmp byte [rtl8139.nicconfig], 1
  5353 00004295 751E                <2> 	jne .nortl8139
  5354 00004297 BE[46830000]        <2> 	mov esi, rtl8139.name
  5355 0000429C E89ADAFFFF          <2> 	call print
  5356 000042A1 B9[40830000]        <2> 	mov ecx, rtl8139.mac
  5357 000042A6 E8AB490000          <2> 	call showmac
  5358 000042AB BE[088D0000]        <2> 	mov esi, line
  5359 000042B0 E886DAFFFF          <2> 	call print
  5360                              <2> .nortl8139:
  5361                              <2> %endif
  5362                              <2> %ifdef rtl8169.included
  5363 000042B5 803D[3E850000]01    <2> 	cmp byte [rtl8169.nicconfig], 1
  5364 000042BC 751E                <2> 	jne .nortl8169
  5365 000042BE BE[45850000]        <2> 	mov esi, rtl8169.name
  5366 000042C3 E873DAFFFF          <2> 	call print
  5367 000042C8 B9[3F850000]        <2> 	mov ecx, rtl8169.mac
  5368 000042CD E884490000          <2> 	call showmac
  5369 000042D2 BE[088D0000]        <2> 	mov esi, line
  5370 000042D7 E85FDAFFFF          <2> 	call print
  5371                              <2> .nortl8169:
  5372                              <2> %endif
  5373                              <2> %ifdef i8254x.included
  5374 000042DC 803D[778B0000]01    <2> 	cmp byte [i8254x.nicconfig], 1
  5375 000042E3 751E                <2> 	jne .noi8254x
  5376 000042E5 BE[7E8B0000]        <2> 	mov esi, i8254x.name
  5377 000042EA E84CDAFFFF          <2> 	call print
  5378 000042EF B9[788B0000]        <2> 	mov ecx, i8254x.mac
  5379 000042F4 E85D490000          <2> 	call showmac
  5380 000042F9 BE[088D0000]        <2> 	mov esi, line
  5381 000042FE E838DAFFFF          <2> 	call print
  5382                              <2> .noi8254x:
  5383                              <2> %endif
  5384 00004303 8B0D[BD8C0000]      <2> 	mov ecx, [sysip]
  5385 00004309 E80C490000          <2> 	call showip
  5386 0000430E BE[088D0000]        <2> 	mov esi, line
  5387 00004313 E823DAFFFF          <2> 	call print
  5388 00004318 C3                  <2> 	ret
  5389                              <2> 	
  5390                              <1> %endif
  5391                              <1> %include 'source/programs/keycode.asm'
  5392 00004319 FF2C6B6579636F6465- <2> db 255,44,"keycode",0
  5393 00004322 00                  <2>
  5394                              <2> keycode:
  5395 00004323 C605[5C220000]00    <2> 	mov byte [trans], 0
  5396 0000432A C605[18650000]00    <2> 	mov byte [threadson], 0
  5397                              <2> %ifdef io.serial
  5398                              <2> .noserial:
  5399                              <2> 	hlt
  5400                              <2> 	mov dx, [serial.address]
  5401                              <2> 	in al, dx
  5402                              <2> 	cmp al, 0
  5403                              <2> 	je .noserial
  5404                              <2> 	mov cl, al
  5405                              <2> 	call showhexsmall
  5406                              <2> 	cmp al, 0x1B
  5407                              <2> 	jne .noserial
  5408                              <2> 	in al, dx
  5409                              <2> 	mov cl, al
  5410                              <2> 	call showhexsmall
  5411                              <2> 	cmp cl, 0x5B
  5412                              <2> 	je .noserial
  5413                              <2> 	ret
  5414                              <2> %else
  5415 00004331 E8F9180000          <2> 	call getkey
  5416 00004336 31C0                <2> 	xor eax, eax
  5417 00004338 31C9                <2> 	xor ecx, ecx
  5418 0000433A 8A0D[0F5C0000]      <2> 	mov cl, [specialkey]
  5419 00004340 80F900              <2> 	cmp cl, 0
  5420 00004343 0F8405000000        <2> 	je near .nospecialkeycode
  5421 00004349 E849EBFFFF          <2> 	call showhexsmall
  5422                              <2> .nospecialkeycode:
  5423 0000434E 66A1[5A220000]      <2> 	mov ax, [lastkey]
  5424 00004354 88E1                <2> 	mov cl, ah
  5425 00004356 E83CEBFFFF          <2> 	call showhexsmall
  5426 0000435B 80FC01              <2> 	cmp ah, 1
  5427 0000435E 75C3                <2> 	jne keycode
  5428 00004360 C3                  <2> 	ret
  5429                              <2> %endif
  5430                              <1> %ifdef gui.included
  5431                              <1> 	%include 'source/programs/line.asm'
  5432 00004361 FF2C6C696E6500      <2> db 255,44,"line",0
  5433                              <2> linetester:
  5434 00004368 803D[E49E0000]00    <2> 	cmp byte [guion], 0
  5435 0000436F 0F841B000000        <2> 	je near .done
  5436 00004375 668B35[63020000]    <2> 	mov si, [timenanoseconds + 2];essentially load a random value
  5437 0000437C BB38000000          <2> 	mov ebx, 28*2;the line test draws ~28/6 times more lines in a 4:3 display mode
  5438 00004381 E868000000          <2> 	call .circletest
  5439 00004386 BB0C000000          <2> 	mov ebx, 6*2 ;this makes them draw the same amount of lines
  5440 0000438B E801000000          <2> 	call .linetest
  5441                              <2> .done:
  5442 00004390 C3                  <2> 	ret
  5443                              <2> 
  5444                              <2> .linetest:
  5445 00004391 53                  <2> 	push ebx
  5446 00004392 E8D6000000          <2> 	call .stime
  5447 00004397 5B                  <2> 	pop ebx
  5448 00004398 31FF                <2> 	xor edi, edi
  5449                              <2> .ltlp:
  5450 0000439A 53                  <2> 	push ebx
  5451 0000439B E81C010000          <2> 	call .st
  5452 000043A0 66F7D6              <2> 	not si
  5453 000043A3 E814010000          <2> 	call .st
  5454 000043A8 5B                  <2> 	pop ebx
  5455 000043A9 66F7D6              <2> 	not si
  5456 000043AC 660335[61020000]    <2> 	add si, [timenanoseconds]
  5457 000043B3 4B                  <2> 	dec ebx
  5458 000043B4 81FB00000000        <2> 	cmp ebx, 0
  5459 000043BA 77DE                <2> 	ja .ltlp
  5460 000043BC E8C4000000          <2> 	call .etime
  5461 000043C1 53                  <2> 	push ebx	
  5462 000043C2 57                  <2> 	push edi
  5463 000043C3 E8B4260000          <2> 	call guiclear
  5464 000043C8 E834270000          <2> 	call reloadallgraphics
  5465 000043CD 59                  <2> 	pop ecx
  5466 000043CE E8A2EBFFFF          <2> 	call showdec
  5467 000043D3 BE[FE440000]        <2> 	mov esi, .msg
  5468 000043D8 E85ED9FFFF          <2> 	call print
  5469 000043DD 59                  <2> 	pop ecx
  5470 000043DE E892EBFFFF          <2> 	call showdec
  5471 000043E3 BE[2A450000]        <2> 	mov esi, .msgtime
  5472 000043E8 E84ED9FFFF          <2> 	call print
  5473 000043ED C3                  <2> 	ret
  5474                              <2> 	
  5475                              <2> .circletest:
  5476 000043EE 53                  <2> 	push ebx
  5477 000043EF E879000000          <2> 	call .stime
  5478 000043F4 5B                  <2> 	pop ebx
  5479 000043F5 31FF                <2> 	xor edi, edi
  5480                              <2> .ctlp:
  5481 000043F7 53                  <2> 	push ebx
  5482 000043F8 668B0D[30550000]    <2> 	mov cx, [resolutiony]
  5483 000043FF 66D1E9              <2> 	shr cx, 1
  5484 00004402 668B15[2E550000]    <2> 	mov dx, [resolutionx]
  5485 00004409 66D1EA              <2> 	shr dx, 1
  5486 0000440C 6689C8              <2> 	mov ax, cx
  5487                              <2> .circle:
  5488 0000440F 60                  <2> 	pusha
  5489 00004410 E8FA210000          <2> 	call drawcircle
  5490 00004415 61                  <2> 	popa
  5491 00004416 6648                <2> 	dec ax
  5492 00004418 47                  <2> 	inc edi
  5493 00004419 663D0100            <2> 	cmp ax, 1
  5494 0000441D 77F0                <2> 	ja .circle
  5495 0000441F 66F7D6              <2> 	not si
  5496                              <2> .circle2:
  5497 00004422 60                  <2> 	pusha
  5498 00004423 E8E7210000          <2> 	call drawcircle
  5499 00004428 61                  <2> 	popa
  5500 00004429 47                  <2> 	inc edi
  5501 0000442A 6640                <2> 	inc ax
  5502 0000442C 6639C8              <2> 	cmp ax, cx
  5503 0000442F 76F1                <2> 	jbe .circle2
  5504 00004431 5B                  <2> 	pop ebx
  5505 00004432 66F7D6              <2> 	not si
  5506 00004435 660335[61020000]    <2> 	add si, [timenanoseconds]
  5507 0000443C 4B                  <2> 	dec ebx
  5508 0000443D 81FB00000000        <2> 	cmp ebx, 0
  5509 00004443 77B2                <2> 	ja .ctlp
  5510 00004445 E83B000000          <2> 	call .etime
  5511 0000444A 53                  <2> 	push ebx
  5512 0000444B 57                  <2> 	push edi
  5513 0000444C 59                  <2> 	pop ecx
  5514 0000444D E823EBFFFF          <2> 	call showdec
  5515 00004452 BE[13450000]        <2> 	mov esi, .msgcircle
  5516 00004457 E8DFD8FFFF          <2> 	call print
  5517 0000445C 59                  <2> 	pop ecx
  5518 0000445D E813EBFFFF          <2> 	call showdec
  5519 00004462 BE[2A450000]        <2> 	mov esi, .msgtime
  5520 00004467 E8CFD8FFFF          <2> 	call print
  5521 0000446C C3                  <2> 	ret
  5522                              <2> 	
  5523                              <2> .stime:
  5524 0000446D F4                  <2> 	hlt
  5525 0000446E A1[5D020000]        <2> 	mov eax, [timeseconds]
  5526 00004473 8B1D[61020000]      <2> 	mov ebx, [timenanoseconds]
  5527 00004479 A3[39450000]        <2> 	mov [.time], eax
  5528 0000447E 891D[3D450000]      <2> 	mov [.time + 4], ebx
  5529 00004484 C3                  <2> 	ret
  5530                              <2> 	
  5531                              <2> .etime:
  5532 00004485 A1[5D020000]        <2> 	mov eax, [timeseconds]
  5533 0000448A 8B1D[61020000]      <2> 	mov ebx, [timenanoseconds]
  5534 00004490 8B0D[39450000]      <2> 	mov ecx, [.time]
  5535 00004496 8B15[3D450000]      <2> 	mov edx, [.time + 4]
  5536 0000449C C1EA0A              <2> 	shr edx, 10
  5537 0000449F C1EB0A              <2> 	shr ebx, 10
  5538 000044A2 29C8                <2> 	sub eax, ecx
  5539 000044A4 3D00000000          <2> 	cmp eax, 0
  5540 000044A9 740E                <2> 	je .notclp
  5541                              <2> .tclp:
  5542 000044AB 81C340420F00        <2> 	add ebx, 1000000
  5543 000044B1 48                  <2> 	dec eax
  5544 000044B2 3D00000000          <2> 	cmp eax, 0
  5545 000044B7 75F2                <2> 	jne .tclp
  5546                              <2> .notclp:
  5547 000044B9 29D3                <2> 	sub ebx, edx
  5548 000044BB C3                  <2> 	ret
  5549                              <2> 	
  5550                              <2> .st:
  5551 000044BC 6631C0              <2> 	xor ax, ax
  5552 000044BF 6631DB              <2> 	xor bx, bx
  5553 000044C2 668B0D[30550000]    <2> 	mov cx, [resolutiony]
  5554 000044C9 668B15[2E550000]    <2> 	mov dx, [resolutionx]
  5555                              <2> .lp:
  5556 000044D0 60                  <2> 	pusha
  5557 000044D1 E87A240000          <2> 	call drawline
  5558 000044D6 61                  <2> 	popa
  5559                              <2> .noswitch:
  5560 000044D7 47                  <2> 	inc edi
  5561 000044D8 6643                <2> 	inc bx
  5562 000044DA 664A                <2> 	dec dx
  5563 000044DC 6681FB0000          <2> 	cmp bx, 0
  5564 000044E1 74ED                <2> 	je .lp
  5565 000044E3 6681FA0000          <2> 	cmp dx, 0
  5566 000044E8 75E6                <2> 	jne .lp
  5567                              <2> .lp2:
  5568 000044EA 60                  <2> 	pusha
  5569 000044EB E860240000          <2> 	call drawline
  5570 000044F0 61                  <2> 	popa
  5571 000044F1 47                  <2> 	inc edi
  5572 000044F2 6640                <2> 	inc ax
  5573 000044F4 6649                <2> 	dec cx
  5574 000044F6 6681F90000          <2> 	cmp cx, 0
  5575 000044FB 75ED                <2> 	jne .lp2
  5576 000044FD C3                  <2> 	ret
  5577                              <2> 	
  5578 000044FE 6C696E657320776572- <2> .msg db "lines were drawn in ",0
  5579 00004507 6520647261776E2069- <2>
  5580 00004510 6E2000              <2>
  5581 00004513 636972636C65732077- <2> .msgcircle db "circles were drawn in ",0
  5582 0000451C 65726520647261776E- <2>
  5583 00004525 20696E2000          <2>
  5584 0000452A 6D6963726F7365636F- <2> .msgtime db "microseconds.",10,0
  5585 00004533 6E64732E0A00        <2>
  5586 00004539 0000000000000000    <2> .time dd 0,0	
  5587                              <1> %endif
  5588                              <1> %include 'source/programs/logout.asm'
  5589 00004541 FF2C6C6F676F757400  <2> 	db 255,44,"logout",0
  5590 0000454A E9BFE2FFFF          <2> 	jmp os
  5591                              <1> %include 'source/programs/loop.asm'
  5592 0000454F FF2C6C6F6F7000      <2> 	db 255,44,"loop",0
  5593 00004556 803D[A5B70000]00    <2> 	cmp byte [LOOPON], 0
  5594 0000455D 0F8501000000        <2> 	jne near filoop
  5595 00004563 C3                  <2> 	ret
  5596 00004564 8B35[A6B70000]      <2> filoop: mov esi, [LOOPPOS]
  5597 0000456A FE0D[3BB70000]      <2> 	dec byte [IFON]
  5598 00004570 C605[A5B70000]00    <2> 	mov byte [LOOPON], 0
  5599 00004577 8935[A0B70000]      <2> 	mov [BATCHPOS], esi
  5600 0000457D 8935[AA360000]      <2> 	mov [batchedi], esi
  5601 00004583 C3                  <2> 	ret 
  5602                              <1> %include 'source/programs/ls.asm'
  5603 00004584 FF2C6C7300          <2> db 255,44,"ls",0
  5604 00004589 BE[2D9D0000]        <2> 		mov esi, diskfileindex
  5605                              <2> 	diskindexdir:
  5606 0000458E 803E5F              <2> 		cmp byte [esi], '_'
  5607 00004591 7440                <2> 		je nextdiskindexdir
  5608 00004593 E891D7FFFF          <2> 		call printquiet
  5609 00004598 56                  <2> 		push esi
  5610 00004599 BE[F3450000]        <2> 		mov esi, disktab
  5611 0000459E E886D7FFFF          <2> 		call printquiet
  5612 000045A3 5E                  <2> 		pop esi
  5613 000045A4 8B4E05              <2> 		mov ecx, [esi + 5]
  5614 000045A7 C605[962E0000]05    <2> 		mov byte [firsthexshown], 5
  5615 000045AE E8C2E9FFFF          <2> 		call showdec
  5616 000045B3 56                  <2> 		push esi
  5617 000045B4 BE[088D0000]        <2> 		mov esi, line
  5618 000045B9 E86BD7FFFF          <2> 		call printquiet
  5619 000045BE 5E                  <2> 		pop esi
  5620 000045BF 81C609000000        <2> 		add esi, 9
  5621 000045C5 81FE[E29E0000]      <2> 		cmp esi, enddiskfileindex
  5622 000045CB 72C1                <2> 		jb diskindexdir
  5623 000045CD E8E3DFFFFF          <2> 		call termcopy
  5624 000045D2 C3                  <2> 		ret
  5625                              <2> 	nextdiskindexdir:
  5626 000045D3 46                  <2> 		inc esi
  5627 000045D4 803E00              <2> 		cmp byte [esi], 0
  5628 000045D7 75FA                <2> 		jne nextdiskindexdir
  5629 000045D9 81C609000000        <2> 		add esi, 9
  5630 000045DF 81FE[E29E0000]      <2> 		cmp esi, enddiskfileindex
  5631 000045E5 72A7                <2> 		jb diskindexdir
  5632 000045E7 E8C9DFFFFF          <2> 		call termcopy
  5633 000045EC C3                  <2> 		ret
  5634                              <2> 		
  5635 000045ED 4469736B2000        <2> 		diskmsg db "Disk ",0
  5636 000045F3 0D09090900          <2> 		disktab db 13,9,9,9,0
  5637                              <1> %include 'source/programs/memory.asm'
  5638 000045F8 FF2C6D656D6F727900  <2> db 255,44,"memory",0
  5639 00004601 BE[EA9E0000]        <2> 	mov esi, memlistbuf
  5640 00004606 31FF                <2> 	xor edi, edi
  5641 00004608 668B3D[2AA10000]    <2> 	mov di, [memlistend]
  5642 0000460F 01F7                <2> 	add edi, esi
  5643                              <2> printmemmap:
  5644 00004611 8B0E                <2> 	mov ecx, [esi]
  5645 00004613 E893E8FFFF          <2> 	call showhex
  5646 00004618 81C608000000        <2> 	add esi, 8
  5647 0000461E 8B0E                <2> 	mov ecx, [esi]
  5648 00004620 E886E8FFFF          <2> 	call showhex
  5649 00004625 81C608000000        <2> 	add esi, 8
  5650 0000462B 8B0E                <2> 	mov ecx, [esi]
  5651 0000462D E879E8FFFF          <2> 	call showhex
  5652 00004632 81C608000000        <2> 	add esi, 8
  5653 00004638 57                  <2> 	push edi
  5654 00004639 56                  <2> 	push esi
  5655 0000463A BE[088D0000]        <2> 	mov esi, line
  5656 0000463F E8F7D6FFFF          <2> 	call print
  5657 00004644 5E                  <2> 	pop esi
  5658 00004645 5F                  <2> 	pop edi
  5659 00004646 39FE                <2> 	cmp esi, edi
  5660 00004648 72C7                <2> 	jb printmemmap
  5661 0000464A C3                  <2> 	ret
  5662                              <2> 	
  5663                              <1> %include 'source/programs/pci.asm'
  5664 0000464B FF2C70636900        <2> db 255,44,"pci",0
  5665 00004651 E8F4190000          <2> 	call pcidump
  5666 00004656 C3                  <2> 	ret 
  5667                              <1> %ifdef network.included
  5668                              <1> 	%include 'source/programs/ping.asm'
  5669 00004657 FF2C70696E6700      <2> db 255,44,"ping",0
  5670                              <2> ping:
  5671 0000465E 8B35[842C0000]      <2> 	mov esi, [currentcommandloc]
  5672 00004664 81C605000000        <2> 	add esi, 5
  5673 0000466A E865450000          <2> 	call strtoip
  5674 0000466F 890D[FA460000]      <2> 	mov [.destip], ecx
  5675 00004675 E8A0450000          <2> 	call showip
  5676 0000467A 8B0D[BD8C0000]      <2> 	mov ecx, [sysip]
  5677 00004680 890D[F6460000]      <2> 	mov [.sourceip]. ecx
  5678 00004686 31C0                <2> 	xor eax, eax
  5679 00004688 31DB                <2> 	xor ebx, ebx
  5680 0000468A 66A3[F4460000]      <2> 	mov [.checksum], ax
  5681 00004690 66A3[00470000]      <2> 	mov [.icmpchecksum], ax
  5682 00004696 BF[EA460000]        <2> 	mov edi, .header
  5683 0000469B BE[FE460000]        <2> 	mov esi, .headerend
  5684 000046A0 E807450000          <2> 	call getchecksum
  5685 000046A5 66890D[F4460000]    <2> 	mov [.checksum], cx
  5686 000046AC BF[FE460000]        <2> 	mov edi, .icmp
  5687 000046B1 BE[26470000]        <2> 	mov esi, .packetend
  5688 000046B6 E8F1440000          <2> 	call getchecksum
  5689 000046BB 66890D[00470000]    <2> 	mov [.icmpchecksum], cx
  5690 000046C2 BF[DC460000]        <2> 	mov edi, .packet
  5691 000046C7 BE[26470000]        <2> 	mov esi, .packetend
  5692 000046CC E8C3440000          <2> 	call sendpacket
  5693 000046D1 BE[088D0000]        <2> 	mov esi, line
  5694 000046D6 E860D6FFFF          <2> 	call print
  5695 000046DB C3                  <2> 	ret
  5696                              <2> 	
  5697                              <2> 	
  5698                              <2> 	
  5699                              <2> .packet:
  5700 000046DC FFFFFFFFFFFF        <2> .destinationmac db 0xFF,0xFF,0xFF,0xFF,0xFF,0xFF
  5701 000046E2 000000000000        <2> .sourcemac	db 0,0,0,0,0,0
  5702 000046E8 0800                <2> .ethertype	db 8,0	;ip is 0x800
  5703                              <2> .header:
  5704 000046EA 45                  <2> .version	db 0x45
  5705 000046EB 00                  <2> .services	db 0
  5706 000046EC 003C                <2> .length	db 0,0x3C
  5707 000046EE 0000                <2> .id		dw 0
  5708 000046F0 00                  <2> .flags	db 0
  5709 000046F1 00                  <2> .fragment db 0
  5710 000046F2 80                  <2> .ttl	db 128
  5711 000046F3 01                  <2> .protocol db 1 ;ICMP
  5712 000046F4 0000                <2> .checksum dw 0
  5713 000046F6 00000000            <2> .sourceip dd 0
  5714 000046FA 00000000            <2> .destip dd 0
  5715                              <2> .headerend:
  5716                              <2> .icmp:
  5717 000046FE 08                  <2> .icmptype db 8 ;Ping request
  5718 000046FF 00                  <2> .icmpcode db 0
  5719 00004700 0000                <2> .icmpchecksum dw 0
  5720 00004702 0001                <2> .icmpid db 0,1
  5721 00004704 0000                <2> .sequence dw 0
  5722 00004706 616263646566676869- <2> db "abcdefghijklmnopqrstuvwabcdefghi" ;this is what microsoft includes
  5723 0000470F 6A6B6C6D6E6F707172- <2>
  5724 00004718 737475767761626364- <2>
  5725 00004721 6566676869          <2>
  5726                              <2> .packetend:
  5727                              <1> %endif
  5728                              <1> %include 'source/programs/play.asm'
  5729 00004726 FF2C706C61796100    <2> db 255,44,"playa",0
  5730 0000472E 8B3D[842C0000]      <2> 	mov edi, [currentcommandloc]
  5731 00004734 81C706000000        <2> 	add edi, 6
  5732 0000473A E833000000          <2> 	call playasync
  5733 0000473F C3                  <2> 	ret
  5734 00004740 FF2C706C617900      <2> db 255,44,"play",0
  5735                              <2> play:
  5736 00004747 8B3D[842C0000]      <2> 	mov edi, [currentcommandloc]
  5737 0000474D 81C705000000        <2> 	add edi, 5
  5738 00004753 E81A000000          <2> 	call playasync
  5739                              <2> .waitforsound:
  5740                              <2> %ifdef sound.included
  5741 00004758 A1[F85B0000]        <2> 	mov eax, [Length0]
  5742 0000475D 660B05[FC5B0000]    <2> 	or ax, [Length1]
  5743                              <2> %endif
  5744 00004764 0A05[65020000]      <2> 	or al, [soundon]
  5745 0000476A 3D00000000          <2> 	cmp eax, 0
  5746 0000476F 75E7                <2> 	jne .waitforsound
  5747 00004771 C3                  <2> 	ret
  5748                              <2> playasync:
  5749 00004772 BE0000C000          <2> 	mov esi, 0xC00000
  5750 00004777 E8FD1B0000          <2> 	call loadfile
  5751 0000477C 81FA94010000        <2> 	cmp edx, 404
  5752 00004782 743F                <2> 	je nosoundfound
  5753 00004784 BB0000C000          <2> 	mov ebx, 0xC00000
  5754 00004789 817B0857415645      <2> 	cmp dword [ebx + 8], "WAVE"
  5755 00004790 0F843F010000        <2> 	je near wave_player
  5756 00004796 66813B534E          <2> 	cmp word [ebx], "SN"
  5757 0000479B 7526                <2> 	jne nosoundfound
  5758 0000479D 81C306000000        <2> 	add ebx, 6
  5759 000047A3 891D[68020000]      <2> 	mov [soundpos], ebx
  5760 000047A9 035BFC              <2> 	add ebx, [ebx - 4]
  5761 000047AC 891D[6C020000]      <2> 	mov [soundendpos], ebx
  5762 000047B2 66C705[66020000]00- <2> 	mov word [soundrepititions], 0
  5763 000047BA 00                  <2>
  5764 000047BB C605[65020000]01    <2> 	mov byte [soundon], 1
  5765 000047C2 C3                  <2> 	ret
  5766                              <2> nosoundfound:
  5767 000047C3 BE[E9470000]        <2> 	mov esi, notfoundsound
  5768 000047C8 E86ED5FFFF          <2> 	call print
  5769 000047CD 8B35[842C0000]      <2> 	mov esi, [currentcommandloc]
  5770 000047D3 81C605000000        <2> 	add esi, 5
  5771 000047D9 E85DD5FFFF          <2> 	call print
  5772 000047DE BE[D78C0000]        <2> 	mov esi, notfound2
  5773 000047E3 E853D5FFFF          <2> 	call print
  5774 000047E8 C3                  <2> 	ret
  5775 000047E9 706C61793A2000      <2> notfoundsound db "play: ",0
  5776                              <2> 
  5777                              <2> %ifdef sound.included
  5778                              <2> sbplay:
  5779 000047F0 BE0000C000          <2> 		mov esi, 0xC00000
  5780 000047F5 89F3                <2> 		mov ebx, esi
  5781 000047F7 81C640000000        <2> 		add esi, WAVSTART
  5782 000047FD 29F7                <2> 		sub edi, esi
  5783 000047FF 66893D[FC5B0000]    <2> 		mov [Length1], di
  5784 00004806 C1EF0F              <2> 		shr edi, 15
  5785 00004809 893D[F85B0000]      <2> 		mov [Length0], edi
  5786 0000480F 8B4B18              <2> 		mov ecx, [ebx + 24]
  5787 00004812 890D[095C0000]      <2> 		mov [Freq], ecx
  5788 00004818 31C0                <2> 		xor eax, eax
  5789 0000481A BA0000C000          <2> 		mov	edx, 0xC00000 ;physical location of sound
  5790 0000481F 81C240000000        <2> 		add edx, WAVSTART
  5791 00004825 01D0                <2> 		add	eax, edx
  5792 00004827 89C6                <2> 		mov esi, eax
  5793 00004829 31C9                <2> 		xor ecx, ecx
  5794 0000482B 31DB                <2> 		xor ebx, ebx
  5795 0000482D 66891D[065C0000]    <2> 		mov [SegLoc], bx
  5796 00004834 81C300000800        <2> 		add ebx, 0x80000
  5797 0000483A 66B9FFFF            <2> 		mov cx, 0xFFFF
  5798 0000483E 6681FF0000          <2> 		cmp di, 0
  5799 00004843 7520                <2> 		jne .autoinit
  5800 00004845 668B0D[FC5B0000]    <2> 		mov cx, [Length1]
  5801 0000484C C605[F75B0000]01    <2> 		mov byte [OddLength], 1
  5802 00004853 6681F90080          <2> 		cmp cx, 32768
  5803 00004858 730B                <2> 		jae .autoinit
  5804 0000485A C605[F75B0000]00    <2> 		mov byte [OddLength], 0
  5805 00004861 66D1E1              <2> 		shl cx, 1
  5806 00004864 47                  <2> 		inc edi
  5807                              <2> .autoinit:
  5808 00004865 4F                  <2> 		dec edi
  5809 00004866 893D[F85B0000]      <2> 		mov [Length0], edi
  5810 0000486C 66890D[FC5B0000]    <2> 		mov [Length1], cx
  5811 00004873 66D1E9              <2> 		shr cx, 1
  5812 00004876 6641                <2> 		inc cx
  5813 00004878 01C8                <2> 		add eax, ecx
  5814 0000487A A3[FE5B0000]        <2> 		mov [NextMemLoc], eax
  5815 0000487F 8935[025C0000]      <2> 		mov	[MemLoc], esi
  5816 00004885 E825120000          <2> 		call DMACopy
  5817 0000488A 31DB                <2> 		xor ebx, ebx
  5818 0000488C 668B1D[065C0000]    <2> 		mov bx, [SegLoc]
  5819 00004893 31C9                <2> 		xor ecx, ecx
  5820 00004895 668B0D[FC5B0000]    <2> 		mov cx, [Length1]
  5821 0000489C 66D1E9              <2> 		shr cx, 1
  5822 0000489F 6641                <2> 		inc cx
  5823 000048A1 01CB                <2> 		add ebx, ecx
  5824 000048A3 66891D[065C0000]    <2> 		mov [SegLoc], bx
  5825 000048AA 81C300000800        <2> 		add ebx, 0x80000
  5826 000048B0 8B35[FE5B0000]      <2> 		mov esi, [NextMemLoc]
  5827 000048B6 89F0                <2> 		mov eax, esi
  5828 000048B8 01C8                <2> 		add eax, ecx
  5829 000048BA A3[FE5B0000]        <2> 		mov [NextMemLoc], eax
  5830 000048BF 8935[025C0000]      <2> 		mov	[MemLoc], esi
  5831 000048C5 E8E5110000          <2> 		call DMACopy
  5832 000048CA E803120000          <2> 		call DMAPlay
  5833 000048CF E88D120000          <2> 		call PlayDSP
  5834 000048D4 C3                  <2> 		ret
  5835                              <2> WAVSTART equ 64;44
  5836                              <2> wave_player:
  5837 000048D5 803D[0E5C0000]01    <2> 	cmp byte [SoundBlaster], 1
  5838 000048DC 0F840EFFFFFF        <2> 	je near sbplay
  5839 000048E2 BE[ED480000]        <2> 	mov esi, nosoundblaster
  5840 000048E7 E84FD4FFFF          <2> 	call print
  5841 000048EC C3                  <2> 	ret
  5842                              <2> %else
  5843                              <2> 	wave_player:
  5844                              <2> 		mov esi, nosoundblaster
  5845                              <2> 		call print
  5846                              <2> 		ret
  5847                              <2> %endif
  5848 000048ED 4E6F20536F756E6420- <2> nosoundblaster db "No Sound Blaster detected.",10,0
  5849 000048F6 426C61737465722064- <2>
  5850 000048FF 657465637465642E0A- <2>
  5851 00004908 00                  <2>
  5852                              <1> %include 'source/programs/pwd.asm'
  5853 00004909 FF2C70776400        <2> db 255,44,"pwd",0
  5854 0000490F BE[36B50000]        <2> 	mov esi, currentfolder
  5855 00004914 E810D4FFFF          <2> 	call printquiet
  5856 00004919 BE[088D0000]        <2> 	mov esi, line
  5857 0000491E E818D4FFFF          <2> 	call print
  5858 00004923 C3                  <2> 	ret
  5859                              <2> 	
  5860                              <1> %include 'source/programs/reboot.asm'
  5861 00004924 FF2C7265626F6F7400  <2> 	db 255,44,"reboot",0
  5862 0000492D 0F011D[37490000]    <2> 		lidt [idtreboot]
  5863 00004934 CD00                <2> 		int 0
  5864 00004936 F4                  <2> 		hlt
  5865                              <2> 	
  5866 00004937 0000                <2> 	idtreboot dw 0
  5867 00004939 00000000            <2> 			  dd 0
  5868                              <2> 
  5869                              <2> 	coldboot:
  5870 0000493D 66B84000            <2> 		MOV AX, 0040h
  5871 00004941 8EC0                <2> 		MOV ES, AX
  5872 00004943 2666C7057200000000- <2> 		MOV WORD [ES:00072h], 0h
  5873 0000494C 00                  <2>
  5874 0000494D EA00000000FFFF      <2> 		JMP 0FFFFh:0000h
  5875 00004954 CF                  <2> 		IRET
  5876                              <2> 
  5877                              <2> 	warmboot:
  5878 00004955 66B84000            <2> 		MOV AX, 0040h
  5879 00004959 8EC0                <2> 		MOV ES, AX
  5880 0000495B 2666C7057200000034- <2> 		MOV WORD [ES:00072h], 01234h
  5881 00004964 12                  <2>
  5882 00004965 EA00000000FFFF      <2> 		JMP 0FFFFh:0000h
  5883 0000496C CF                  <2> 		IRET
  5884                              <2> 		
  5885                              <1> %include 'source/programs/reg.asm'
  5886 0000496D FF2C72656700        <2> db 255,44,"reg",0
  5887 00004973 CD03                <2> 	int 3
  5888 00004975 C3                  <2> 	ret 
  5889                              <1> %include 'source/programs/show.asm'
  5890 00004976 FF2C73686F7700      <2> db 255,44,"show",0
  5891 0000497D 8B3D[842C0000]      <2> 		mov edi, [currentcommandloc]
  5892 00004983 81C705000000        <2> 		add edi, 5
  5893 00004989 BE00008000          <2> 		mov esi, 0x800000
  5894 0000498E E8E6190000          <2> 		call loadfile
  5895 00004993 81FA94010000        <2> 		cmp edx, 404
  5896 00004999 0F8483000000        <2> 		je near filenotfound
  5897 0000499F BE00008000          <2> 		mov esi, 0x800000
  5898                              <2> %ifdef gui.included
  5899 000049A4 66813E424D          <2> 		cmp word [esi], "BM"
  5900 000049A9 7410                <2> 		je bmpfound
  5901                              <2> %endif
  5902 000049AB E88BD3FFFF          <2> 		call print
  5903 000049B0 BE[088D0000]        <2> 		mov esi, line
  5904 000049B5 E881D3FFFF          <2> 		call print
  5905 000049BA C3                  <2> 		ret
  5906                              <2> %ifdef gui.included
  5907                              <2> bmpfound:
  5908 000049BB 803D[E49E0000]00    <2> 		cmp byte [guion], 0
  5909 000049C2 0F8428000000        <2> 		je near noguibmp
  5910 000049C8 BE00008000          <2> 		mov esi, 0x800000
  5911 000049CD 31C9                <2> 		xor ecx, ecx
  5912 000049CF 31D2                <2> 		xor edx, edx
  5913 000049D1 31C0                <2> 		xor eax, eax
  5914 000049D3 31DB                <2> 		xor ebx, ebx
  5915 000049D5 E8631B0000          <2> 		call showbmp
  5916 000049DA 30C0                <2> 		xor al, al
  5917 000049DC B405                <2> 		mov ah, 5
  5918 000049DE CD30                <2> 		int 30h
  5919 000049E0 E897200000          <2> 		call guiclear
  5920 000049E5 E8321D0000          <2> 		call clearmousecursor
  5921 000049EA E812210000          <2> 		call reloadallgraphics
  5922 000049EF C3                  <2> 		ret
  5923                              <2> noguibmp:
  5924 000049F0 BE[FB490000]        <2> 		mov esi, warnguimsg
  5925 000049F5 E841D3FFFF          <2> 		call print
  5926 000049FA C3                  <2> 		ret
  5927 000049FB 546869732063616E20- <2> warnguimsg db "This can not be done without the GUI.",10,0
  5928 00004A04 6E6F7420626520646F- <2>
  5929 00004A0D 6E6520776974686F75- <2>
  5930 00004A16 742074686520475549- <2>
  5931 00004A1F 2E0A00              <2>
  5932                              <2> %endif
  5933                              <2> 
  5934                              <2> filenotfound:
  5935 00004A22 BE[554A0000]        <2> 		mov esi, filenf
  5936 00004A27 E80FD3FFFF          <2> 		call print
  5937 00004A2C 8B35[842C0000]      <2> 		mov esi, [currentcommandloc]
  5938                              <2> findfilenotfoundzero:
  5939 00004A32 8A06                <2> 		mov al, [esi]
  5940 00004A34 46                  <2> 		inc esi
  5941 00004A35 3C00                <2> 		cmp al, 0
  5942 00004A37 7411                <2> 		je nofilenamenotfound
  5943 00004A39 81FE[AACF0000]      <2> 		cmp esi, buftxtend
  5944 00004A3F 7309                <2> 		jae nofilenamenotfound
  5945 00004A41 3C20                <2> 		cmp al, " "
  5946 00004A43 75ED                <2> 		jne findfilenotfoundzero
  5947 00004A45 E8F1D2FFFF          <2> 		call print
  5948                              <2> nofilenamenotfound:
  5949 00004A4A BE[604A0000]        <2> 		mov esi, filenf2
  5950 00004A4F E8E7D2FFFF          <2> 		call print
  5951 00004A54 C3                  <2> 		ret
  5952 00004A55 5468652066696C6520- <2> filenf db "The file ",34,0
  5953 00004A5E 2200                <2>
  5954 00004A60 2220636F756C64206E- <2> filenf2 db 34," could not be found.",10,0
  5955 00004A69 6F7420626520666F75- <2>
  5956 00004A72 6E642E0A00          <2>
  5957                              <1> %include 'source/programs/shush.asm'
  5958 00004A77 FF2C736875736800    <2> db 255,44,"shush",0	;if you add 2 values it will switch size using the first as X in chars and the second as Y in chars
  5959                              <2> shushprog:
  5960                              <2> %ifdef gui.included
  5961 00004A7F 803D[E49E0000]00    <2> 	cmp byte [guion], 0
  5962 00004A86 0F84B4000000        <2> 	je near .noswitchsize
  5963 00004A8C 8B35[842C0000]      <2> 	mov esi, [currentcommandloc]
  5964 00004A92 81C606000000        <2> 	add esi, 6
  5965 00004A98 56                  <2> 	push esi
  5966 00004A99 4E                  <2> 	dec esi
  5967                              <2> .findspace:
  5968 00004A9A 46                  <2> 	inc esi
  5969 00004A9B 8A06                <2> 	mov al, [esi]
  5970 00004A9D 3C00                <2> 	cmp al, 0
  5971 00004A9F 0F849B000000        <2> 	je near .noswitchsize
  5972 00004AA5 3C58                <2> 	cmp al, "X"
  5973 00004AA7 7408                <2> 	je .donefind
  5974 00004AA9 3C78                <2> 	cmp al, "x"
  5975 00004AAB 7404                <2> 	je .donefind
  5976 00004AAD 3C20                <2> 	cmp al, " "
  5977 00004AAF 75E9                <2> 	jne .findspace
  5978                              <2> .donefind:
  5979 00004AB1 30C0                <2> 	xor al, al
  5980 00004AB3 8806                <2> 	mov [esi], al
  5981 00004AB5 46                  <2> 	inc esi
  5982 00004AB6 89F7                <2> 	mov edi, esi
  5983 00004AB8 E89AE5FFFF          <2> 	call cnvrttxt
  5984 00004ABD 89C8                <2> 	mov eax, ecx
  5985 00004ABF 5E                  <2> 	pop esi
  5986 00004AC0 50                  <2> 	push eax
  5987 00004AC1 89F7                <2> 	mov edi, esi
  5988 00004AC3 E88FE5FFFF          <2> 	call cnvrttxt
  5989 00004AC8 89CB                <2> 	mov ebx, ecx
  5990 00004ACA 58                  <2> 	pop eax	
  5991 00004ACB 6681FB0000          <2> 	cmp bx, 0
  5992 00004AD0 0F846A000000        <2> 	je near .noswitchsize
  5993 00004AD6 663D0000            <2> 	cmp ax, 0
  5994 00004ADA 0F8460000000        <2> 	je near .noswitchsize
  5995 00004AE0 66C1E303            <2> 	shl bx, 3
  5996 00004AE4 66C1E004            <2> 	shl ax, 4
  5997 00004AE8 663B1D[2E550000]    <2> 	cmp bx, [resolutionx]
  5998 00004AEF 7607                <2> 	jbe .nofixx
  5999 00004AF1 668B1D[2E550000]    <2> 	mov bx, [resolutionx]
  6000                              <2> .nofixx:
  6001 00004AF8 66051000            <2> 	add ax, 16
  6002 00004AFC 663B05[30550000]    <2> 	cmp ax, [resolutiony]
  6003 00004B03 7606                <2> 	jbe .nofixy
  6004 00004B05 66A1[30550000]      <2> 	mov ax, [resolutiony]
  6005                              <2> .nofixy:
  6006 00004B0B 662D1000            <2> 	sub ax, 16
  6007 00004B0F 6631C9              <2> 	xor cx, cx
  6008 00004B12 6631D2              <2> 	xor dx, dx
  6009 00004B15 66891D[E36D0000]    <2> 	mov [termwindow], bx
  6010 00004B1C 66A3[E56D0000]      <2> 	mov [termwindow + 2], ax	;the previous lines of code make a large terminal window that is 4 characters smaller than the screen
  6011 00004B22 BE[E36D0000]        <2> 	mov esi, termwindow
  6012 00004B27 31DB                <2> 	xor ebx, ebx
  6013 00004B29 6631C0              <2> 	xor ax, ax
  6014 00004B2C E8EC270000          <2> 	call showwindow
  6015 00004B31 E8461F0000          <2> 	call guiclear
  6016 00004B36 E866D2FFFF          <2> 	call clear
  6017 00004B3B E8C11F0000          <2> 	call reloadallgraphics
  6018                              <2> .noswitchsize:
  6019                              <2> %endif
  6020 00004B40 BE[4B4B0000]        <2> 	mov esi, shushmsg
  6021 00004B45 E8F1D1FFFF          <2> 	call print
  6022 00004B4A C3                  <2> 	ret
  6023 00004B4B 57656C636F6D652074- <2> 	shushmsg db "Welcome to the SollerOS Hardly Unix-Compatible Shell!",10,0
  6024 00004B54 6F2074686520536F6C- <2>
  6025 00004B5D 6C65724F5320486172- <2>
  6026 00004B66 646C7920556E69782D- <2>
  6027 00004B6F 436F6D70617469626C- <2>
  6028 00004B78 65205368656C6C210A- <2>
  6029 00004B81 00                  <2>
  6030                              <1> %include 'source/programs/system.asm'
  6031 00004B82 FF2C73797374656D00  <2> 	db 255,44,"system",0
  6032 00004B8B BE[9B4C0000]        <2> 	mov esi, kernelinfomsg
  6033 00004B90 E894D1FFFF          <2> 	call printquiet
  6034 00004B95 B9[2D9D0000]        <2> 	mov ecx, osend
  6035 00004B9A E8D6E3FFFF          <2> 	call showdec
  6036 00004B9F BE[B04C0000]        <2> 	mov esi, diskbytemsg
  6037 00004BA4 E880D1FFFF          <2> 	call printquiet
  6038 00004BA9 B9[2D9D0000]        <2> 	mov ecx, osend
  6039 00004BAE 81C1[18CC2900]      <2> 	add ecx, commandbufend
  6040 00004BB4 81E9[E49E0000]      <2> 	sub ecx, bssstart	;add the extra buffer space
  6041 00004BBA E8B6E3FFFF          <2> 	call showdec
  6042 00004BBF BE[C74C0000]        <2> 	mov esi, membytemsg
  6043 00004BC4 E860D1FFFF          <2> 	call printquiet
  6044 00004BC9 BE[2A4D0000]        <2> 	mov esi, endofmemmsg
  6045 00004BCE E856D1FFFF          <2> 	call printquiet
  6046 00004BD3 B9[2C003A00]        <2> 	mov ecx, bssend
  6047 00004BD8 E8CEE2FFFF          <2> 	call showhex
  6048 00004BDD BE[E04C0000]        <2> 	mov esi, systeminfomsg
  6049 00004BE2 E842D1FFFF          <2> 	call printquiet
  6050                              <2> getcpuspeed:
  6051 00004BE7 B8FE000000          <2> 	mov eax, 0xFE
  6052 00004BEC E621                <2> 	out 0x21, al ;mask off all but timer interrupt
  6053 00004BEE B020                <2> 	mov al, 0x20
  6054 00004BF0 E620                <2> 	out 0x20, al
  6055 00004BF2 F4                  <2> 	hlt
  6056 00004BF3 0F31                <2> 	rdtsc
  6057 00004BF5 89D6                <2> 	mov esi, edx
  6058 00004BF7 89C7                <2> 	mov edi, eax
  6059 00004BF9 31C0                <2> 	xor eax, eax
  6060 00004BFB C605[46020000]01    <2> 	mov byte [testingcpuspeed], 1
  6061                              <2> cpuspeedloop:	;wait until next timer interrupt, then inc eax until the next
  6062 00004C02 40                  <2> 	inc eax
  6063 00004C03 EBFD                <2> 	jmp cpuspeedloop
  6064                              <2> cpuspeedloopend:
  6065 00004C05 0F31                <2> 	rdtsc
  6066 00004C07 29F8                <2> 	sub eax, edi
  6067 00004C09 29F2                <2> 	sub edx, esi
  6068 00004C0B 8915[4F020000]      <2> 	mov [cpuclocksperint + 4], edx
  6069 00004C11 A3[4B020000]        <2> 	mov [cpuclocksperint], eax
  6070 00004C16 31C0                <2> 	xor eax, eax
  6071 00004C18 E621                <2> 	out 0x21, al
  6072 00004C1A B020                <2> 	mov al, 0x20
  6073 00004C1C E620                <2> 	out 0x20, al
  6074 00004C1E 31D2                <2> 	xor edx, edx
  6075 00004C20 31C0                <2> 	xor eax, eax
  6076 00004C22 A1[47020000]        <2> 	mov eax, [cpuspeedperint]
  6077 00004C27 D1E0                <2> 	shl eax, 1	;the cpu speed loop actually contains 2 commands so multiply the
  6078                              <2> 				;result by 2
  6079 00004C29 8B1D[59020000]      <2> 	mov ebx, [timeinterval]
  6080 00004C2F C1EB0A              <2> 	shr ebx, 10 ;divide the interval by 1024
  6081 00004C32 F7F3                <2> 	div ebx	;quotient in eax, remainder in edx
  6082 00004C34 89C1                <2> 	mov ecx, eax
  6083 00004C36 E83AE3FFFF          <2> 	call showdec
  6084 00004C3B BE[0E4D0000]        <2> 	mov esi, cpuspeedmsg
  6085 00004C40 E8E4D0FFFF          <2> 	call printquiet
  6086 00004C45 31D2                <2> 	xor edx, edx
  6087 00004C47 A1[4B020000]        <2> 	mov eax, [cpuclocksperint]
  6088 00004C4C 8B15[4F020000]      <2> 	mov edx, [cpuclocksperint + 4]
  6089 00004C52 8B1D[59020000]      <2> 	mov ebx, [timeinterval]
  6090 00004C58 C1EB0A              <2> 	shr ebx, 10
  6091 00004C5B F7F3                <2> 	div ebx
  6092 00004C5D 89C1                <2> 	mov ecx, eax
  6093 00004C5F E811E3FFFF          <2> 	call showdec
  6094 00004C64 BE[144D0000]        <2> 	mov esi, cpuclockmsg
  6095 00004C69 E8BBD0FFFF          <2> 	call printquiet
  6096 00004C6E 8B0D[53020000]      <2> 	mov ecx, [memoryspace]
  6097 00004C74 C1E914              <2> 	shr ecx, 20
  6098 00004C77 41                  <2> 	inc ecx	;the reading is one MB behind
  6099 00004C78 E8F8E2FFFF          <2> 	call showdec
  6100 00004C7D BE[194D0000]        <2> 	mov esi, memoryspacemsg
  6101 00004C82 E8B4D0FFFF          <2> 	call print
  6102                              <2> %ifdef sound.included
  6103 00004C87 803D[0E5C0000]00    <2> 	cmp byte [SoundBlaster], 0
  6104 00004C8E 740A                <2> 	je .nosb
  6105 00004C90 BE[F64C0000]        <2> 	mov esi, soundblastermsg
  6106 00004C95 E8A1D0FFFF          <2> 	call print
  6107                              <2> .nosb:
  6108                              <2> %endif
  6109 00004C9A C3                  <2> 	ret
  6110                              <2> 
  6111 00004C9B 4B65726E656C20496E- <2> kernelinfomsg db "Kernel Information:",10,0
  6112 00004CA4 666F726D6174696F6E- <2>
  6113 00004CAD 3A0A00              <2>
  6114 00004CB0 427974657320446973- <2> diskbytemsg db "Bytes Disk Space Used",10,0
  6115 00004CB9 6B2053706163652055- <2>
  6116 00004CC2 7365640A00          <2>
  6117 00004CC7 4279746573204D656D- <2> membytemsg db "Bytes Memory Space Used",10,0
  6118 00004CD0 6F7279205370616365- <2>
  6119 00004CD9 20557365640A00      <2>
  6120 00004CE0 0A53797374656D2049- <2> systeminfomsg db 10,"System Information:",10,0
  6121 00004CE9 6E666F726D6174696F- <2>
  6122 00004CF2 6E3A0A00            <2>
  6123                              <2> %ifdef sound.included
  6124 00004CF6 536F756E64626C6173- <2> 	soundblastermsg db "Soundblaster Detected.",10,0
  6125 00004CFF 746572204465746563- <2>
  6126 00004D08 7465642E0A00        <2>
  6127                              <2> %endif
  6128 00004D0E 4D4950530A00        <2> cpuspeedmsg db "MIPS",10,0
  6129 00004D14 4D487A0A00          <2> cpuclockmsg db "MHz",10,0
  6130 00004D19 4D42204D656D6F7279- <2> memoryspacemsg db "MB Memory Space",10,0
  6131 00004D22 2053706163650A00    <2>
  6132 00004D2A 456E64206F66204D65- <2> endofmemmsg: db "End of Memory Space: 0x",0
  6133 00004D33 6D6F72792053706163- <2>
  6134 00004D3C 653A20307800        <2>
  6135                              <1> %include 'source/programs/time.asm'
  6136 00004D42 082E30303030303030- <2> timenscache db 8,".000000000"
  6137 00004D4B 3030                <2>
  6138 00004D4D 200A00              <2> timenscacheend: db " ",10,0
  6139 00004D50 00                  <2> istimeset db 0
  6140 00004D51 456E74657220746865- <2> settimemsg db "Enter the current UNIX time:",10,0
  6141 00004D5A 2063757272656E7420- <2>
  6142 00004D63 554E49582074696D65- <2>
  6143 00004D6C 3A0A00              <2>
  6144 00004D6F 00<rept>            <2> timeinputbuffer times 12 db 0
  6145 00004D7B 00                  <2> timeinputbend: db 0
  6146                              <2> 
  6147 00004D7C FF2C74696D6500      <2> db 255,44,"time",0
  6148 00004D83 803D[504D0000]00    <2> 	cmp byte [istimeset], 0
  6149 00004D8A 753A                <2> 	jne timeisset
  6150 00004D8C BE[514D0000]        <2> 	mov esi, settimemsg
  6151 00004D91 E8A5CFFFFF          <2> 	call print
  6152 00004D96 BE[6F4D0000]        <2> 	mov esi, timeinputbuffer
  6153 00004D9B BF[7B4D0000]        <2> 	mov edi, timeinputbend
  6154 00004DA0 E87AD0FFFF          <2> 	call readline
  6155 00004DA5 BE[6F4D0000]        <2> 	mov esi, timeinputbuffer
  6156 00004DAA 31FF                <2> 	xor edi, edi
  6157 00004DAC E8A6E2FFFF          <2> 	call cnvrttxt
  6158 00004DB1 890D[5D020000]      <2> 	mov [timeseconds], ecx
  6159 00004DB7 31C9                <2> 	xor ecx, ecx
  6160 00004DB9 890D[61020000]      <2> 	mov [timenanoseconds], ecx
  6161 00004DBF C605[504D0000]01    <2> 	mov byte [istimeset], 1
  6162                              <2> timeisset:
  6163 00004DC6 8B0D[5D020000]      <2> 	mov ecx, [timeseconds]
  6164 00004DCC E8A4E1FFFF          <2> 	call showdec
  6165                              <2> 	
  6166 00004DD1 8B0D[61020000]      <2> 	mov ecx, [timenanoseconds]
  6167 00004DD7 BE[424D0000]        <2> 	mov esi, timenscache
  6168 00004DDC C7460230303030      <2> 	mov dword [esi+ 2], "0000"
  6169 00004DE3 C7460630303030      <2> 	mov dword [esi + 6], "0000"
  6170 00004DEA C6460A30            <2> 	mov byte [esi + 10], "0"
  6171 00004DEE BE[4D4D0000]        <2> 	mov esi, timenscacheend
  6172 00004DF3 E860DFFFFF          <2> 	call convert
  6173 00004DF8 BE[424D0000]        <2> 	mov esi, timenscache
  6174 00004DFD E827CFFFFF          <2> 	call printquiet
  6175                              <2> 	
  6176 00004E02 E82D000000          <2> 	call time
  6177 00004E07 BE[00500000]        <2> 	mov esi, timeshow
  6178 00004E0C E818CFFFFF          <2> 	call printquiet
  6179 00004E11 BE[088D0000]        <2> 	mov esi, line
  6180 00004E16 E80ECFFFFF          <2> 	call printquiet
  6181 00004E1B BE[09500000]        <2> 	mov esi, dateshow
  6182 00004E20 E804CFFFFF          <2> 	call printquiet
  6183 00004E25 BE[088D0000]        <2> 	mov esi, line
  6184 00004E2A E8FACEFFFF          <2> 	call printquiet
  6185 00004E2F E9BC000000          <2> 	jmp findday
  6186                              <2> time:
  6187 00004E34 E84F010000          <2> 	call tstackput1
  6188 00004E39 B00A                <2> 	mov al,10			;Get RTC register A
  6189 00004E3B E879010000          <2> 	call tget1
  6190 00004E40 A880                <2> 	test al,0x80			;Is update in progress?
  6191 00004E42 75F0                <2> 	jne time				; yes, wait
  6192                              <2> 
  6193 00004E44 B000                <2> 	mov al,0			;Get seconds (00 to 59)
  6194 00004E46 E86E010000          <2> 	call tget1
  6195 00004E4B A2[F74F0000]        <2> 	mov [RTCtimeSecond],al
  6196                              <2> 
  6197 00004E50 B002                <2> 	mov al,0x02			;Get minutes (00 to 59)
  6198 00004E52 E862010000          <2> 	call tget1
  6199 00004E57 A2[F84F0000]        <2> 	mov [RTCtimeMinute],al
  6200                              <2> 
  6201 00004E5C B004                <2> 	mov al,0x04			;Get hours (see notes)
  6202 00004E5E E856010000          <2> 	call tget1
  6203 00004E63 A2[F94F0000]        <2> 	mov [RTCtimeHour],al
  6204                              <2> 
  6205 00004E68 B007                <2> 	mov al,0x07			;Get day of month (01 to 31)
  6206 00004E6A E84A010000          <2> 	call tget1
  6207 00004E6F A2[FA4F0000]        <2> 	mov [RTCtimeDay],al
  6208                              <2> 
  6209 00004E74 B008                <2> 	mov al,0x08			;Get month (01 to 12)
  6210 00004E76 E83E010000          <2> 	call tget1
  6211 00004E7B A2[FB4F0000]        <2> 	mov [RTCtimeMonth],al
  6212                              <2> 
  6213 00004E80 B009                <2> 	mov al,0x09			;Get year (00 to 99)
  6214 00004E82 E832010000          <2> 	call tget1
  6215 00004E87 A2[FC4F0000]        <2> 	mov [RTCtimeYear],al
  6216                              <2> 	
  6217 00004E8C BE[00500000]        <2> 	mov esi, timeshow
  6218 00004E91 8A2D[F94F0000]      <2> 	mov ch, [RTCtimeHour]
  6219 00004E97 E828010000          <2> 	call tput1
  6220 00004E9C 8A2D[F84F0000]      <2> 	mov ch, [RTCtimeMinute]
  6221 00004EA2 E81D010000          <2> 	call tput1
  6222 00004EA7 8A2D[F74F0000]      <2> 	mov ch, [RTCtimeSecond]
  6223 00004EAD E812010000          <2> 	call tput1
  6224 00004EB2 BE[09500000]        <2> 	mov esi, dateshow
  6225 00004EB7 8A2D[FB4F0000]      <2> 	mov ch, [RTCtimeMonth]
  6226 00004EBD E802010000          <2> 	call tput1
  6227 00004EC2 8A2D[FA4F0000]      <2> 	mov ch, [RTCtimeDay]
  6228 00004EC8 E8F7000000          <2> 	call tput1
  6229 00004ECD B520                <2> 	mov ch, 0x20
  6230 00004ECF E8F0000000          <2> 	call tput1
  6231 00004ED4 4E                  <2> 	dec esi
  6232 00004ED5 8A2D[FC4F0000]      <2> 	mov ch, [RTCtimeYear]
  6233 00004EDB E8E4000000          <2> 	call tput1
  6234 00004EE0 E8BD000000          <2> 	call tstackget1
  6235 00004EE5 C3                  <2> 	ret
  6236 00004EE6 BE[00500000]        <2> 	mov esi, timeshow
  6237 00004EEB E84BCEFFFF          <2> 	call print
  6238                              <2> ;;get day of week
  6239                              <2> ;;add these:
  6240                              <2> ;;century value
  6241                              <2> ;;last 2 digits of year
  6242                              <2> ;;last 2 digits of year right shifted twice
  6243                              <2> ;;month table value
  6244                              <2> ;;day of the month
  6245                              <2> ;;divide these by 7
  6246                              <2> ;;the remainder is the day
  6247                              <2> findday:
  6248 00004EF0 31C0                <2> 	xor eax, eax
  6249                              <2> ;;first convert the values from BCD to hex
  6250 00004EF2 A0[FA4F0000]        <2> 	mov al, [RTCtimeDay]
  6251 00004EF7 E873000000          <2> 	call converttohex
  6252 00004EFC 8825[FD4F0000]      <2> 	mov [dayhex], ah
  6253 00004F02 A0[FB4F0000]        <2> 	mov al, [RTCtimeMonth]
  6254 00004F07 E863000000          <2> 	call converttohex
  6255 00004F0C 8825[FE4F0000]      <2> 	mov [monthhex], ah
  6256 00004F12 A0[FC4F0000]        <2> 	mov al, [RTCtimeYear]
  6257 00004F17 E853000000          <2> 	call converttohex
  6258 00004F1C 8825[FF4F0000]      <2> 	mov [yearhex], ah
  6259 00004F22 31C0                <2> 	xor eax, eax
  6260 00004F24 A0[FF4F0000]        <2> 	mov al, [yearhex]
  6261 00004F29 C0E802              <2> 	shr al, 2
  6262 00004F2C 0205[FF4F0000]      <2> 	add al, [yearhex]
  6263 00004F32 0506000000          <2> 	add eax, 6
  6264 00004F37 31DB                <2> 	xor ebx, ebx
  6265 00004F39 8A1D[FE4F0000]      <2> 	mov bl, [monthhex]
  6266 00004F3F FECB                <2> 	dec bl
  6267 00004F41 81C3[1E500000]      <2> 	add ebx, month
  6268 00004F47 31C9                <2> 	xor ecx, ecx
  6269 00004F49 8A0B                <2> 	mov cl, [ebx]
  6270 00004F4B 01C8                <2> 	add eax, ecx
  6271 00004F4D 8A0D[FD4F0000]      <2> 	mov cl, [dayhex]
  6272 00004F53 01C8                <2> 	add eax, ecx
  6273 00004F55 66BB0700            <2> 	mov bx, 7
  6274 00004F59 31D2                <2> 	xor edx, edx
  6275 00004F5B 66F7F3              <2> 	div bx
  6276 00004F5E C1E202              <2> 	shl edx, 2
  6277 00004F61 81C2[2A500000]      <2> 	add edx, day
  6278 00004F67 8B32                <2> 	mov esi, [edx]
  6279 00004F69 E8CDCDFFFF          <2> 	call print
  6280 00004F6E C3                  <2> 	ret
  6281                              <2> 	
  6282                              <2> converttohex:
  6283 00004F6F 88C4                <2> 	mov ah, al
  6284 00004F71 C0E804              <2> 	shr al, 4
  6285 00004F74 C0E404              <2> 	shl ah, 4
  6286 00004F77 C0EC04              <2> 	shr ah, 4
  6287 00004F7A 3C00                <2> 	cmp al, 0
  6288 00004F7C 7409                <2> 	je noconverttohex
  6289                              <2> converttohexlp:
  6290 00004F7E 80C40A              <2> 	add ah, 10
  6291 00004F81 FEC8                <2> 	dec al
  6292 00004F83 3C00                <2> 	cmp al, 0
  6293 00004F85 75F7                <2> 	jne converttohexlp
  6294                              <2> noconverttohex:
  6295 00004F87 C3                  <2> 	ret
  6296                              <2> 	
  6297                              <2> tstackput1:
  6298 00004F88 8935[F34F0000]      <2> 	mov [tstack + 20], esi
  6299 00004F8E BE[DF4F0000]        <2> 	mov esi, tstack
  6300 00004F93 8906                <2> 	mov [esi], eax
  6301 00004F95 895E04              <2> 	mov [esi + 4], ebx
  6302 00004F98 894E08              <2> 	mov [esi + 8], ecx
  6303 00004F9B 89560C              <2> 	mov [esi + 12], edx
  6304 00004F9E 897E10              <2> 	mov [esi + 16], edi
  6305 00004FA1 C3                  <2> 	ret
  6306                              <2> 	
  6307                              <2> tstackget1:
  6308 00004FA2 BE[DF4F0000]        <2> 	mov esi, tstack
  6309 00004FA7 8B06                <2> 	mov eax, [esi]
  6310 00004FA9 8B5E04              <2> 	mov ebx, [esi + 4]
  6311 00004FAC 8B4E08              <2> 	mov ecx, [esi + 8]
  6312 00004FAF 8B560C              <2> 	mov edx, [esi + 12]
  6313 00004FB2 8B7E10              <2> 	mov edi, [esi + 16]
  6314 00004FB5 8B7614              <2> 	mov esi, [esi + 20]
  6315 00004FB8 C3                  <2> 	ret
  6316                              <2> 	
  6317                              <2> tget1:
  6318 00004FB9 66BA7000            <2> 	mov dx, 0x70
  6319 00004FBD EE                  <2> 	out dx, al
  6320 00004FBE 6642                <2> 	inc dx
  6321 00004FC0 EC                  <2> 	in al, dx
  6322 00004FC1 664A                <2> 	dec dx
  6323 00004FC3 C3                  <2> 	ret
  6324                              <2> 	
  6325                              <2> tput1:
  6326 00004FC4 66C1E904            <2> 	shr cx, 4
  6327 00004FC8 B030                <2> 	mov al, 48
  6328 00004FCA 00E8                <2> 	add al, ch
  6329 00004FCC 8806                <2> 	mov [esi], al
  6330 00004FCE 46                  <2> 	inc esi
  6331 00004FCF B030                <2> 	mov al, 48
  6332 00004FD1 C0E904              <2> 	shr cl, 4
  6333 00004FD4 00C8                <2> 	add al, cl
  6334 00004FD6 8806                <2> 	mov [esi], al
  6335 00004FD8 81C602000000        <2> 	add esi, 2
  6336 00004FDE C3                  <2> 	ret
  6337                              <2> 		
  6338 00004FDF 000000000000000000- <2> 	tstack dd 0,0,0,0,0,0
  6339 00004FE8 000000000000000000- <2>
  6340 00004FF1 000000000000        <2>
  6341 00004FF7 00                  <2> 	RTCtimeSecond db 0
  6342 00004FF8 00                  <2> 	RTCtimeMinute db 0
  6343 00004FF9 00                  <2> 	RTCtimeHour db 0
  6344 00004FFA 00                  <2> 	RTCtimeDay db 0
  6345 00004FFB 00                  <2> 	RTCtimeMonth db 0
  6346 00004FFC 00                  <2> 	RTCtimeYear db 0
  6347 00004FFD 00                  <2> 	dayhex db 0
  6348 00004FFE 00                  <2> 	monthhex db 0
  6349 00004FFF 00                  <2> 	yearhex db 0
  6350 00005000 30303A30303A303000  <2> 	timeshow db "00:00:00",0
  6351 00005009 30302D30302D303030- <2> 	dateshow db "00-00-0000 ",0
  6352 00005012 302000              <2>
  6353                              <2> 	oldcentury:	;;from 1700 to 1900
  6354 00005015 040200              <2> 	db 4,2,0
  6355                              <2> 	century:	;;from 2000 to 2500
  6356 00005018 060402000604        <2> 	db 6,4,2,0,6,4
  6357                              <2> 	month:
  6358 0000501E 000303060104060205- <2> 	db 0,3,3,6,1,4,6,2,5,0,3,5
  6359 00005027 000305              <2>
  6360                              <2> 	day:
  6361 0000502A [46500000]          <2> 	dd sunday
  6362 0000502E [4E500000]          <2> 	dd monday
  6363 00005032 [56500000]          <2> 	dd tuesday
  6364 00005036 [5F500000]          <2> 	dd wednesday
  6365 0000503A [6A500000]          <2> 	dd thursday
  6366 0000503E [74500000]          <2> 	dd friday
  6367 00005042 [7C500000]          <2> 	dd saturday
  6368                              <2> sunday:
  6369 00005046 53756E6461790A00    <2> 	db "Sunday",10,0
  6370                              <2> monday:
  6371 0000504E 4D6F6E6461790A00    <2> 	db "Monday",10,0
  6372                              <2> tuesday:
  6373 00005056 547565736461790A00  <2> 	db "Tuesday",10,0
  6374                              <2> wednesday:
  6375 0000505F 5765646E6573646179- <2> 	db "Wednesday",10,0
  6376 00005068 0A00                <2>
  6377                              <2> thursday:
  6378 0000506A 54687572736461790A- <2> 	db "Thursday",10,0
  6379 00005073 00                  <2>
  6380                              <2> friday:
  6381 00005074 4672696461790A00    <2> 	db "Friday",10,0
  6382                              <2> saturday:
  6383 0000507C 53617475726461790A- <2> 	db "Saturday",10,0
  6384 00005085 00                  <2>
  6385                              <1> %include 'source/programs/turnoff.asm'
  6386 00005086 FF2C7475726E6F6666- <2> 	db 255,44,"turnoff",0
  6387 0000508F 00                  <2>
  6388                              <2> 	turnoff:
  6389 00005090 66BB[AB50]          <2> 			mov bx, shutdown
  6390 00005094 66891D[0A0D0000]    <2> 			mov [realmodeptr], bx
  6391 0000509B BB[D5500000]        <2> 			mov ebx, halt
  6392 000050A0 891D[060D0000]      <2> 			mov [realmodereturn], ebx
  6393 000050A6 E944BBFFFF          <2> 			jmp realmode
  6394                              <2> 
  6395                              <2> [BITS 16]
  6396                              <2> 		shutdown:
  6397 000050AB B453                <2> 			mov ah, 0x53
  6398 000050AD B004                <2> 			mov al, 4
  6399 000050AF 31DB                <2> 			xor bx, bx
  6400 000050B1 CD15                <2> 			int 0x15
  6401                              <2> 			
  6402 000050B3 B453                <2> 			mov ah, 0x53
  6403 000050B5 B001                <2> 			mov al, 1
  6404 000050B7 31DB                <2> 			xor bx, bx
  6405 000050B9 CD15                <2> 			int 0x15
  6406                              <2> 			
  6407 000050BB B453                <2> 			mov ah, 0x53
  6408 000050BD B008                <2> 			mov al, 8
  6409 000050BF BB0100              <2> 			mov bx, 1
  6410 000050C2 B90100              <2> 			mov cx, 1
  6411 000050C5 CD15                <2> 			int 0x15
  6412                              <2> 			
  6413 000050C7 B453                <2> 			mov ah, 0x53
  6414 000050C9 B007                <2> 			mov al, 7
  6415 000050CB BB0100              <2> 			mov bx, 1
  6416 000050CE B90300              <2> 			mov cx, 3
  6417 000050D1 CD15                <2> 			int 0x15
  6418 000050D3 EBFE                <2> 			jmp $
  6419                              <2> 			[BITS 32]
  6420 000050D5 EBFE                <2> halt: jmp $
  6421                              <1> %include 'source/programs/wait.asm'
  6422 000050D7 FF2C7761697400      <2> db 255,44,"wait",0
  6423                              <2> waitkey:
  6424 000050DE E829D1FFFF          <2> 		call getchar
  6425 000050E3 C3                  <2> 		ret
  6426                              <1> %include 'source/programs/while.asm'
  6427 000050E4 FF2C7768696C6500    <2> db 255,44,"while",0
  6428 000050EC 30C0                <2> whilecmd:  xor al, al
  6429 000050EE 3805[A4B70000]      <2> 	cmp [BATCHISON], al
  6430 000050F4 0F8488E6FFFF        <2> 	je near notbatch
  6431 000050FA 8B35[A0B70000]      <2> 	mov esi, [BATCHPOS]
  6432 00005100 81EE02000000        <2> 	sub esi, 2
  6433 00005106 4E                  <2> whilefnd: dec esi
  6434 00005107 8A06                <2> 	mov al, [esi]
  6435 00005109 3C0A                <2> 	cmp al, 10
  6436 0000510B 0F840A000000        <2> 	je near whilefnd2
  6437 00005111 3C00                <2> 	cmp al, 0
  6438 00005113 0F8402000000        <2> 	je near whilefnd2
  6439 00005119 EBEB                <2> 	jmp whilefnd
  6440                              <2> whilefnd2:
  6441 0000511B 46                  <2> 	inc esi
  6442 0000511C 8935[A6B70000]      <2> 	mov [LOOPPOS], esi
  6443 00005122 C605[A5B70000]01    <2> 	mov BYTE [LOOPON], 1
  6444 00005129 BE[AACB0000]        <2> 	mov esi, buftxt
  6445 0000512E BB[AACB0000]        <2> 	mov ebx, buftxt
  6446 00005133 81C306000000        <2> 	add ebx, 6
  6447 00005139 E99EF0FFFF          <2> 	jmp chkeqsn
  6448                              <1> progend:		;programs end here	
  6449                              <1> batchprogend:
  6450                                  	%include "source/hardware.asm"
  6451                              <1> %ifdef gui.included
  6452                              <1> 	%include "source/drivers/video/vesa.asm"
  6453                              <2> [BITS 16]
  6454                              <2> guiswitch:
  6455 0000513E 81F90000            <2> 	cmp cx, 0
  6456 00005142 750B                <2> 	jne guiswitchdefnum
  6457 00005144 B81200              <2> 	mov ax, 12h
  6458 00005147 31DB                <2> 	xor bx, bx
  6459 00005149 CD10                <2> 	int 10h
  6460 0000514B E85100              <2> 	call guiloadagain
  6461                              <2> guiswitchnocando:
  6462 0000514E C3                  <2> 	ret	;return without switching as mode number is bad
  6463                              <2> guiswitchdefnum:	;switch to a defined mode number
  6464 0000514F B8004F              <2> 	mov ax, 0x4F00
  6465 00005152 BF[1C53]            <2> 	mov di, VBEMODEBLOCK
  6466 00005155 CD10                <2> 	int 10h
  6467 00005157 BE[3E53]            <2> 	mov si, reserved
  6468 0000515A 81EE0200            <2> 	sub si, 2
  6469                              <2> .loop:
  6470 0000515E 81C60200            <2> 	add si, 2
  6471 00005162 81FE[1C54]          <2> 	cmp si, oemdata
  6472 00005166 74E6                <2> 	je guiswitchnocando
  6473 00005168 813CFFFF            <2> 	cmp word [si], 0xFFFF
  6474 0000516C 74E0                <2> 	je guiswitchnocando
  6475 0000516E 390C                <2> 	cmp [si], cx
  6476 00005170 75EC                <2> 	jne .loop
  6477 00005172 8936[7652]          <2> 	mov [videomodecache], si
  6478 00005176 81C90040            <2> 	or cx, 0x4000	;make sure linear frame buffer is selected
  6479 0000517A B8014F              <2> 	mov ax, 0x4F01
  6480 0000517D BF[1C55]            <2> 	mov di, VBEMODEINFOBLOCK
  6481 00005180 890E[7452]          <2> 	mov [vesamode], cx
  6482 00005184 CD10                <2> 	int 10h
  6483 00005186 E9CB00              <2> 	jmp selectedvesa
  6484                              <2> guiload:
  6485 00005189 BE[F452]            <2> 	mov si, bootmsg
  6486 0000518C E8E8AE              <2> 	call printrm
  6487 0000518F 31C0                <2> 	xor ax, ax
  6488 00005191 CD16                <2> 	int 16h
  6489 00005193 3C79                <2> 	cmp al, "y"
  6490 00005195 0F8598AE            <2> 	jne near vgaset
  6491 00005199 BE[078D]            <2> 	mov si, crlf
  6492 0000519C E8D8AE              <2> 	call printrm
  6493                              <2> guiloadagain:
  6494 0000519F B8004F              <2> 	mov ax, 04F00h
  6495 000051A2 BF[1C53]            <2> 	mov di, VBEMODEBLOCK
  6496 000051A5 CD10                <2> 	int 10h
  6497 000051A7 BE[3E53]            <2> 	mov si, reserved
  6498 000051AA 81EE0200            <2> 	sub si, 2
  6499                              <2> findvideomodes:
  6500 000051AE 81C60200            <2> 	add si, 2
  6501 000051B2 8B0C                <2> 	mov cx, [si]
  6502 000051B4 81F9FFFF            <2> 	cmp cx, 0xFFFF
  6503 000051B8 0F840A00            <2> 	je near nextvmode
  6504 000051BC 81FE[1C54]          <2> 	cmp si, oemdata
  6505 000051C0 0F836DAE            <2> 	jae near vgaset	;;kill if no valid list is found
  6506 000051C4 EBE8                <2> 	jmp findvideomodes 	
  6507                              <2> ;;debug,shows vmodes available
  6508                              <2> nextvmode:
  6509 000051C6 81EE0200            <2> 	sub si, 2
  6510 000051CA 81FE[3E53]          <2> 	cmp si, reserved
  6511 000051CE 0F82CDFF            <2> 	jb near guiloadagain
  6512 000051D2 8B0C                <2> 	mov cx, [si]
  6513 000051D4 81F9FFFF            <2> 	cmp cx, 0xFFFF
  6514 000051D8 0F84EAFF            <2> 	je near nextvmode
  6515 000051DC 81C90040            <2> 	or cx, 0x4000 		;;Linear Frame Buffer
  6516 000051E0 B8014F              <2> 	mov ax, 04F01h
  6517 000051E3 BF[1C55]            <2> 	mov di, VBEMODEINFOBLOCK
  6518 000051E6 890E[7452]          <2> 	mov [vesamode], cx
  6519 000051EA CD10                <2> 	int 10h
  6520 000051EC A0[3555]            <2> 	mov al, [bitsperpixel]
  6521 000051EF 3C10                <2> 	cmp al, 16
  6522 000051F1 75D3                <2> 	jne nextvmode
  6523 000051F3 8936[7652]          <2> 	mov [videomodecache], si
  6524 000051F7 84E4                <2> 	test ah, ah
  6525 000051F9 0F842200            <2> 	jz near setvesamode
  6526 000051FD EBC7                <2> 	jmp nextvmode
  6527 000051FF 0A0D49732074686973- <2> isthisvideook db 10,13,"Is this video mode OK?(y/n)",13,10,0
  6528 00005208 20766964656F206D6F- <2>
  6529 00005211 6465204F4B3F28792F- <2>
  6530 0000521A 6E290D0A00          <2>
  6531                              <2> setvesamode:
  6532 0000521F 8B0E[2E55]          <2> 	mov cx, [resolutionx]
  6533 00005223 E85900              <2> 	call decshow
  6534 00005226 B078                <2> 	mov al, "x"
  6535 00005228 E8C100              <2> 	call char
  6536 0000522B 8B0E[3055]          <2> 	mov cx, [resolutiony]
  6537 0000522F E84D00              <2> 	call decshow
  6538 00005232 B040                <2> 	mov al, "@"
  6539 00005234 E8B500              <2> 	call char
  6540 00005237 31C9                <2> 	xor cx, cx
  6541 00005239 8A0E[3555]          <2> 	mov cl, [bitsperpixel]
  6542 0000523D E83F00              <2> 	call decshow
  6543 00005240 BE[FF51]            <2> 	mov si, isthisvideook
  6544 00005243 E831AE              <2> 	call printrm
  6545 00005246 31C0                <2> 	xor ax, ax
  6546 00005248 CD16                <2> 	int 16h
  6547 0000524A 8B36[7652]          <2> 	mov si, [videomodecache]
  6548 0000524E 3C79                <2> 	cmp al, "y"
  6549 00005250 0F8572FF            <2> 	jne near nextvmode
  6550                              <2> selectedvesa:
  6551 00005254 8B16[2E55]          <2> 	mov dx, [resolutionx]
  6552 00005258 01D2                <2> 	add dx, dx
  6553 0000525A 8916[1C56]          <2> 	mov [resolutionx2], dx
  6554 0000525E 31D2                <2> 	xor dx, dx
  6555 00005260 31C9                <2> 	xor cx, cx
  6556 00005262 B8024F              <2> 	mov ax, 04F02h
  6557 00005265 8B1E[7452]          <2> 	mov bx, [vesamode]
  6558 00005269 CD10                <2> 	int 10h		;;enter VESA mode
  6559 0000526B C606[E49E]01        <2> 	mov byte [guion], 1
  6560 00005270 E8CEAD              <2> 	call getmemorysize;get the memory map after the video is initialized
  6561 00005273 C3                  <2> 	ret
  6562                              <2> 	
  6563 00005274 0000                <2> vesamode dw 0
  6564 00005276 0000                <2> videomodecache dw 0
  6565                              <2> 
  6566 00005278 0000000000          <2> dcnm db 0,0,0,0,0
  6567 0000527D 0000                <2> dcnmend db 0,0
  6568                              <2> 
  6569                              <2> 
  6570                              <2> decshow:
  6571 0000527F BE[7852]            <2> 	mov si, dcnm
  6572                              <2> decclear:
  6573 00005282 B030                <2> 	mov al, "0"
  6574 00005284 8804                <2> 	mov [si], al
  6575 00005286 46                  <2> 	inc si
  6576 00005287 81FE[7D52]          <2> 	cmp si, dcnmend
  6577 0000528B 76F5                <2> 	jbe decclear
  6578 0000528D 4E                  <2> 	dec si
  6579 0000528E E81500              <2> 	call convertrm
  6580 00005291 BE[7852]            <2> 	mov si, dcnm
  6581                              <2> dectst:
  6582 00005294 8A04                <2> 	mov al, [si]
  6583 00005296 46                  <2> 	inc si
  6584 00005297 81FE[7D52]          <2> 	cmp si, dcnmend
  6585 0000529B 7704                <2> 	ja dectstend
  6586 0000529D 3C30                <2> 	cmp al, "0"
  6587 0000529F 76F3                <2> 	jbe dectst
  6588                              <2> dectstend:
  6589 000052A1 4E                  <2> 	dec si
  6590 000052A2 E8D2AD              <2> 	call printrm
  6591 000052A5 C3                  <2> 	ret
  6592                              <2> 	
  6593                              <2> 	
  6594                              <2> convertrm:
  6595 000052A6 4E                  <2> 	dec si
  6596 000052A7 89F3                <2> 	mov bx, si		;place to convert into must be in si, number to convert must be in cx
  6597                              <2> cnvrtrm:
  6598 000052A9 89DE                <2> 	mov si, bx
  6599 000052AB 81EE0300            <2> 	sub si, 3
  6600 000052AF 46                  <2> ten3rm:	inc si
  6601 000052B0 81F9E803            <2> 	cmp cx, 1000
  6602 000052B4 7208                <2> 	jb ten2rm
  6603 000052B6 81E9E803            <2> 	sub cx, 1000
  6604 000052BA FE04                <2> 	inc byte [si]
  6605 000052BC EBEB                <2> 	jmp cnvrtrm
  6606 000052BE 46                  <2> ten2rm:	inc si
  6607 000052BF 81F96400            <2> 	cmp cx, 100
  6608 000052C3 7208                <2> 	jb ten1rm
  6609 000052C5 81E96400            <2> 	sub cx, 100
  6610 000052C9 FE04                <2> 	inc byte [si]
  6611 000052CB EBDC                <2> 	jmp cnvrtrm
  6612 000052CD 46                  <2> ten1rm:	inc si
  6613 000052CE 81F90A00            <2> 	cmp cx, 10
  6614 000052D2 7208                <2> 	jb ten0rm
  6615 000052D4 81E90A00            <2> 	sub cx, 10
  6616 000052D8 FE04                <2> 	inc byte [si]
  6617 000052DA EBCD                <2> 	jmp cnvrtrm
  6618 000052DC 46                  <2> ten0rm:	inc si
  6619 000052DD 81F90100            <2> 	cmp cx, 1
  6620 000052E1 7208                <2> 	jb tendnrm
  6621 000052E3 81E90100            <2> 	sub cx, 1
  6622 000052E7 FE04                <2> 	inc byte [si]
  6623 000052E9 EBBE                <2> 	jmp cnvrtrm
  6624                              <2> tendnrm:
  6625 000052EB C3                  <2> 	ret
  6626                              <2> 
  6627                              <2>     char: 		    ;char must be in al
  6628 000052EC BB0700              <2>        mov bx, 07
  6629 000052EF B40E                <2> 	   mov ah, 0Eh
  6630 000052F1 CD10                <2> 	   int 10h
  6631 000052F3 C3                  <2> 	   ret
  6632                              <2> 
  6633 000052F4 426F6F7420696E746F- <2> bootmsg:	db "Boot into the GUI?(y/n)",0
  6634 000052FD 20746865204755493F- <2>
  6635 00005306 28792F6E2900        <2>
  6636                              <2> 
  6637                              <2> 
  6638                              <2> mcursor:
  6639 0000530C 01                  <2> 	db	00000001b
  6640 0000530D 81                  <2> 	db	10000001b
  6641 0000530E C1                  <2> 	db	11000001b
  6642 0000530F E1                  <2> 	db	11100001b
  6643 00005310 F1                  <2> 	db	11110001b
  6644 00005311 F9                  <2> 	db	11111001b
  6645 00005312 FD                  <2> 	db	11111101b
  6646 00005313 FF                  <2> 	db	11111111b
  6647 00005314 F9                  <2> 	db	11111001b
  6648 00005315 B9                  <2> 	db	10111001b
  6649 00005316 39                  <2> 	db	00111001b
  6650 00005317 1C                  <2> 	db	00011100b
  6651 00005318 1C                  <2> 	db	00011100b
  6652 00005319 0E                  <2> 	db	00001110b
  6653 0000531A 0E                  <2> 	db	00001110b
  6654 0000531B 0C                  <2> 	db	00001100b
  6655                              <2> mcursorend:
  6656                              <2> 
  6657                              <2> 
  6658                              <2> VBEMODEBLOCK:
  6659 0000531C 00<rept>            <2> vbesignature 		times  4 db 0 	;VBE Signature
  6660 00005320 00<rept>            <2> vbeversion  		times  2 db 0	;VBE Version
  6661 00005322 00<rept>            <2> oemstringptr  		times  4 db 0	;Pointer to OEM String
  6662 00005326 00<rept>            <2> capabilities 		times  4 db 0	;Capabilities of graphics cont.
  6663 0000532A 00<rept>            <2> videomodeptr 		times  4 db 0	;Pointer to Video Mode List
  6664 0000532E 00<rept>            <2> totalmemory   		times  2 db 0	;number of 64Kb memory blocks
  6665 00005330 00<rept>            <2> oemsoftwarerev  	times  2 db 0	;VBE implementation Software revision
  6666 00005332 00<rept>            <2> oemvendornameptr 	times  4 db 0	;Pointer to Vendor Name String
  6667 00005336 00<rept>            <2> oemproductnameptr 	times  4 db 0	;Pointer to Product Name String
  6668 0000533A 00<rept>            <2> oemproductrevptr 	times  4 db 0	;Pointer to Product Revision String
  6669 0000533E 00<rept>            <2> reserved			times  222 db 0	;Reserved for VBE implementation scratch area
  6670 0000541C 00<rept>            <2> oemdata 			times  256 db 0	;Data Area for OEM Strings
  6671                              <2> 
  6672                              <2> VBEMODEINFOBLOCK:
  6673                              <2> ;Mandatory information for all VBE revision
  6674 0000551C 00<rept>            <2> modeattributes   	times  2 db 0	;Mode attributes
  6675 0000551E 00                  <2> winaattributes   	times  1 db 0	;Window A attributes
  6676 0000551F 00                  <2> winbattributes   	times  1 db 0	;Window B attributes
  6677 00005520 00<rept>            <2> wingranularity   	times  2 db 0	;Window granularity
  6678 00005522 00<rept>            <2> winsize          	times  2 db 0	;Window size
  6679 00005524 00<rept>            <2> winasegment      	times  2 db 0	;Window A start segment
  6680 00005526 00<rept>            <2> winbsegment      	times  2 db 0	;Window B start segment
  6681 00005528 00<rept>            <2> winfuncptr       	times  4 db 0	;pointer to window function
  6682 0000552C 00<rept>            <2> bytesperscanline 	times  2 db 0	;Bytes per scan line
  6683                              <2> 
  6684                              <2> ;Mandatory information for VBE 1.2 and above
  6685 0000552E 00<rept>            <2> resolutionx     	times  2 db 0	;Horizontal resolution in pixel or chars
  6686 00005530 00<rept>            <2> resolutiony	    	times  2 db 0	;Vertical resolution in pixel or chars
  6687 00005532 00                  <2> xcharsize       	times  1 db 0	;Character cell width in pixel
  6688 00005533 00                  <2> ycharsize       	times  1 db 0	;Character cell height in pixel
  6689 00005534 00                  <2> numberofplanes  	times  1 db 0	;Number of memory planes
  6690 00005535 00                  <2> bitsperpixel    	times  1 db 0	;Bits per pixel
  6691 00005536 00                  <2> numberofbanks   	times  1 db 0	;Number of banks
  6692 00005537 00                  <2> memorymodel     	times  1 db 0	;Memory model type
  6693 00005538 00                  <2> banksize        	times  1 db 0	;Bank size in KB
  6694 00005539 00                  <2> numberofimagepages	times  1 db 0	;Number of images
  6695 0000553A 00                  <2> reserved1       	times  1 db 0	;Reserved for page function
  6696                              <2> 
  6697                              <2> ;Direct Color fields (required for direct/6 and YUV/7 memory models)
  6698 0000553B 00                  <2> redmasksize			times  1 db 0	;Size of direct color red mask in bits
  6699 0000553C 00                  <2> redfieldposition	times  1 db 0	;Bit position of lsb of red bask
  6700 0000553D 00                  <2> greenmasksize   	times  1 db 0	;Size of direct color green mask in bits
  6701 0000553E 00                  <2> greenfieldposition	times  1 db 0	;Bit position of lsb of green bask
  6702 0000553F 00                  <2> bluemasksize		times  1 db 0	;Size of direct color blue mask in bits
  6703 00005540 00                  <2> bluefieldposition	times  1 db 0	;Bit position of lsb of blue bask
  6704 00005541 00                  <2> rsvdmasksize        times  1 db 0		;Size of direct color reserved mask in bits
  6705 00005542 00                  <2> rsvdfieldposition	times  1 db 0		;Bit position of lsb of reserved bask
  6706 00005543 00                  <2> directcolormodeinfo	times  1 db 0	;Direct color mode attributes
  6707                              <2> 
  6708                              <2> ;Mandatory information for VBE 2.0 and above
  6709 00005544 00<rept>            <2> physbaseptr 		times  4 db 0	;Physical address for flat frame buffer
  6710 00005548 00<rept>            <2> offscreenmemoffset 	times  4 db 0	;Pointer to start of off screen memory
  6711 0000554C 00<rept>            <2> offscreenmemsize 	times  2 db 0    ;Amount of off screen memory in 1Kb units
  6712 0000554E 00<rept>            <2> reserved2 			times  206 db 0  ;Remainder of ModeInfoBlock
  6713                              <2> 
  6714 0000561C 00000000            <2> resolutionx2 dd 0	;this is not part of the VBE but is necessary GUI info
  6715                              <2> VBEEND:
  6716                              <2> [BITS 32]
  6717                              <1> 	%include "source/drivers/input/mouse.asm"
  6718 00005620 00                  <2> mousedisabled db 0
  6719                              <2> 	
  6720                              <2> 	cursorgui:
  6721 00005621 803D[7C810000]01    <2> 		cmp byte [mouseon], 1
  6722 00005628 0F8432000000        <2> 		je near mousedaemon
  6723 0000562E 803D[E49E0000]00    <2> 		cmp byte [guion], 0
  6724 00005635 0F8415070000        <2> 		je near entdown
  6725                              <2> 	initmouse:
  6726 0000563B 803D[E49E0000]00    <2> 		cmp byte [guion], 0
  6727 00005642 7405                <2> 		je noswmsposinit
  6728 00005644 E8CF110000          <2> 		call switchmousepos2
  6729                              <2> 	noswmsposinit:
  6730 00005649 E85D020000          <2> 	  	call PS2SET
  6731 0000564E E886020000          <2> 		call ACTMOUS
  6732 00005653 C605[7C810000]01    <2> 		mov byte [mouseon],1
  6733 0000565A E89F020000          <2> 		call GETB 	;;Get the responce byte of the mouse (like: Hey i am active)
  6734                              <2> 		;call GETB
  6735                              <2> 				;;If the bytes are mixed up,
  6736                              <2> 				;;remove this line or add another of this line.
  6737                              <2> 	nomouse:
  6738 0000565F C3                  <2> 		ret
  6739                              <2> 		
  6740                              <2> 	mousedaemon:
  6741 00005660 803D[7C810000]01    <2> 		cmp byte [mouseon], 1
  6742 00005667 75D2                <2> 		jne initmouse
  6743 00005669 E464                <2> 		in al, 64h ; Status
  6744 0000566B A820                <2> 		test al, 20h ; PS2-Mouse?
  6745 0000566D 0F8502000000        <2> 		jnz near moused
  6746 00005673 F4                  <2> 		hlt
  6747 00005674 C3                  <2> 		ret
  6748                              <2> 	moused:
  6749 00005675 803D[20560000]01    <2> 		cmp byte [mousedisabled], 1
  6750 0000567C 74E1                <2> 		je nomouse
  6751 0000567E E87B020000          <2> 		  call GETB
  6752 00005683 88C3                <2> 		  mov  bl, al
  6753 00005685 80E301              <2> 		  and  bl, 1
  6754 00005688 881D[23590000]      <2> 		  mov  BYTE [LBUTTON], bl
  6755 0000568E 88C3                <2> 		  mov  bl, al
  6756 00005690 80E302              <2> 		  and  bl, 2
  6757 00005693 D0EB                <2> 		  shr  bl, 1
  6758 00005695 881D[24590000]      <2> 		  mov  BYTE [RBUTTON], bl
  6759 0000569B 88C3                <2> 		  mov  bl, al
  6760 0000569D 80E304              <2> 		  and  bl, 4
  6761 000056A0 C0EB02              <2> 		  shr  bl, 2
  6762 000056A3 881D[25590000]      <2> 		  mov  BYTE [MBUTTON], bl
  6763 000056A9 E850020000          <2> 		  call GETB
  6764 000056AE A2[26590000]        <2> 		  mov  BYTE [XCOORD], al
  6765 000056B3 E846020000          <2> 		  call GETB
  6766 000056B8 A2[27590000]        <2> 		  mov  BYTE [YCOORD], al
  6767                              <2> 
  6768                              <2> 	showpixelcursor:
  6769 000056BD 668B15[12580000]    <2> 		mov dx, [mousecursorposition]
  6770 000056C4 668B0D[14580000]    <2> 		mov cx, [mousecursorposition + 2]
  6771 000056CB 668915[0E580000]    <2> 		mov [lastmouseposition], dx
  6772 000056D2 66890D[10580000]    <2> 		mov [lastmouseposition + 2], cx
  6773 000056D9 A0[26590000]        <2> 		mov al, [XCOORD]
  6774 000056DE 3C80                <2> 		cmp al, 128
  6775 000056E0 730C                <2> 		jae subxcoord
  6776 000056E2 00C0                <2> 		add al, al
  6777 000056E4 30E4                <2> 		xor ah, ah
  6778 000056E6 6601C2              <2> 		add dx, ax
  6779 000056E9 E90B000000          <2> 		jmp subxcoorddn
  6780                              <2> 	subxcoord:
  6781 000056EE 00C0                <2> 		add al, al
  6782 000056F0 30DB                <2> 		xor bl, bl
  6783 000056F2 28C3                <2> 		sub bl, al
  6784 000056F4 30FF                <2> 		xor bh, bh
  6785 000056F6 6629DA              <2> 		sub dx, bx
  6786                              <2> 	subxcoorddn:
  6787 000056F9 8A1D[27590000]      <2> 		mov bl, [YCOORD]
  6788 000056FF 30C0                <2> 		xor al, al
  6789 00005701 28D8                <2> 		sub al, bl
  6790 00005703 3C80                <2> 		cmp al, 128
  6791 00005705 730A                <2> 		jae subycoord
  6792 00005707 30E4                <2> 		xor ah, ah
  6793 00005709 6601C1              <2> 		add cx, ax
  6794 0000570C E909000000          <2> 		jmp subycoorddn
  6795                              <2> 	subycoord:
  6796 00005711 30DB                <2> 		xor bl, bl
  6797 00005713 28C3                <2> 		sub bl, al
  6798 00005715 30FF                <2> 		xor bh, bh
  6799 00005717 6629D9              <2> 		sub cx, bx
  6800                              <2> 	subycoorddn:
  6801 0000571A 6681FA204E          <2> 		cmp dx, 20000
  6802 0000571F 7603                <2> 		jbe nooriginx2
  6803 00005721 6631D2              <2> 		xor dx, dx
  6804                              <2> 	nooriginx2:
  6805 00005724 6681F9204E          <2> 		cmp cx, 20000
  6806 00005729 7603                <2> 		jbe nooriginy2
  6807 0000572B 6631C9              <2> 		xor cx, cx
  6808                              <2> 	nooriginy2:
  6809 0000572E 6681FA0000          <2> 		cmp dx, 0
  6810 00005733 7415                <2> 		je nofixxcolumn2
  6811 00005735 663B15[1C560000]    <2> 		cmp dx, [resolutionx2]
  6812 0000573C 720C                <2> 		jb nofixxcolumn2
  6813 0000573E 668B15[1C560000]    <2> 		mov dx, [resolutionx2]
  6814 00005745 6681EA0200          <2> 		sub dx, 2
  6815                              <2> 	nofixxcolumn2:
  6816 0000574A 6681F90000          <2> 		cmp cx, 0
  6817 0000574F 7415                <2> 		je nofixyrow2
  6818 00005751 663B0D[30550000]    <2> 		cmp cx, [resolutiony]
  6819 00005758 720C                <2> 		jb nofixyrow2
  6820 0000575A 668B0D[30550000]    <2> 		mov cx, [resolutiony]
  6821 00005761 6681E90100          <2> 		sub cx, 1
  6822                              <2> 	nofixyrow2:
  6823 00005766 668915[12580000]    <2> 		mov [mousecursorposition], dx
  6824 0000576D 66890D[14580000]    <2> 		mov [mousecursorposition + 2], cx
  6825 00005774 803D[E49E0000]00    <2> 		cmp byte [guion], 0
  6826 0000577B 0F8495000000        <2> 		je near termmouse
  6827 00005781 E832100000          <2> 		call switchmousepos ;;use dragging code to ensure proper icon drag
  6828 00005786 803D[23590000]01    <2> 		cmp byte [LBUTTON], 1
  6829 0000578D 0F848C210000        <2> 		je near clickicon
  6830 00005793 803D[24590000]01    <2> 		cmp byte [RBUTTON], 1
  6831 0000579A 0F847F210000        <2> 		je near clickicon
  6832 000057A0 A0[0C790000]        <2> 		mov al, [pbutton]
  6833 000057A5 C705[0F790000]0000- <2> 		mov dword [dragging], 0
  6834 000057AD 0000                <2>
  6835 000057AF 3C00                <2> 		cmp al, 0
  6836 000057B1 740F                <2> 		je nopreviousbutton
  6837 000057B3 E8640F0000          <2> 		call clearmousecursor
  6838 000057B8 E844130000          <2> 		call reloadallgraphics
  6839                              <2> 	windowtermcopyend:
  6840 000057BD E856100000          <2> 		call switchmousepos2
  6841                              <2> 	nopreviousbutton:
  6842 000057C2 30C0                <2> 		xor al, al
  6843 000057C4 A2[0C790000]        <2> 		mov [pbutton], al
  6844 000057C9 A2[697E0000]        <2> 		mov [windrag], al
  6845 000057CE A0[23590000]        <2> 		mov al, [LBUTTON]
  6846 000057D3 A2[0D790000]        <2> 		mov [pLBUTTON], al
  6847 000057D8 A0[24590000]        <2> 		mov al, [RBUTTON]
  6848 000057DD A2[0E790000]        <2> 		mov [pRBUTTON], al
  6849 000057E2 31D2                <2> 		xor edx, edx
  6850 000057E4 668B15[12580000]    <2> 		mov dx, [mousecursorposition]
  6851 000057EB 668B0D[14580000]    <2> 		mov cx, [mousecursorposition + 2]
  6852 000057F2 66BB18C7            <2> 		mov bx, 1100011100011000b
  6853 000057F6 30E4                <2> 		xor ah, ah
  6854 000057F8 B0FE                <2> 		mov al, 254
  6855 000057FA C605[09790000]01    <2> 		mov byte [showcursorfonton], 1
  6856 00005801 E800190000          <2> 		call showfontvesa
  6857 00005806 C605[09790000]00    <2> 		mov byte [showcursorfonton], 0
  6858 0000580D C3                  <2> 		ret
  6859                              <2> 
  6860 0000580E 00000000            <2> lastmouseposition dw 0,0
  6861 00005812 00000000            <2> mousecursorposition dw 0,0	
  6862                              <2> 
  6863                              <2> termmouse:
  6864 00005816 BE[C0E62800]        <2> 		mov esi, videobuf
  6865 0000581B 31D2                <2> 		xor edx, edx
  6866 0000581D 668B15[0E580000]    <2> 		mov dx, [lastmouseposition]
  6867 00005824 668B0D[10580000]    <2> 		mov cx, [lastmouseposition + 2]
  6868 0000582B 66A1[A9580000]      <2> 		mov ax, [cursorcache]
  6869 00005831 663D0000            <2> 		cmp ax, 0
  6870 00005835 7425                <2> 		je nocopycursorcache
  6871 00005837 66C1E104            <2> 		shl cx, 4
  6872 0000583B 66C1E203            <2> 		shl dx, 3
  6873 0000583F 01D6                <2> 		add esi, edx
  6874 00005841 6631D2              <2> 		xor dx, dx
  6875 00005844 8A15[44240000]      <2> 		mov dl, [charxy]
  6876 0000584A 6641                <2> 		inc cx
  6877                              <2> termmousecplp1:
  6878 0000584C 01D6                <2> 		add esi, edx
  6879 0000584E 6649                <2> 		dec cx
  6880 00005850 6681F90000          <2> 		cmp cx, 0
  6881 00005855 75F5                <2> 		jne termmousecplp1
  6882 00005857 29D6                <2> 		sub esi, edx
  6883 00005859 668906              <2> 		mov [esi], ax
  6884                              <2> nocopycursorcache:
  6885 0000585C BE[C0E62800]        <2> 		mov esi, videobuf
  6886 00005861 31D2                <2> 		xor edx, edx
  6887 00005863 668B15[12580000]    <2> 		mov dx, [mousecursorposition]
  6888 0000586A 668B0D[14580000]    <2> 		mov cx, [mousecursorposition + 2]
  6889 00005871 66C1E104            <2> 		shl cx, 4
  6890 00005875 66C1E203            <2> 		shl dx, 3
  6891 00005879 01D6                <2> 		add esi, edx
  6892 0000587B 6631D2              <2> 		xor dx, dx
  6893 0000587E 8A15[44240000]      <2> 		mov dl, [charxy]
  6894 00005884 6641                <2> 		inc cx
  6895                              <2> termmousecplp2:
  6896 00005886 01D6                <2> 		add esi, edx
  6897 00005888 6649                <2> 		dec cx
  6898 0000588A 6681F90000          <2> 		cmp cx, 0
  6899 0000588F 75F5                <2> 		jne termmousecplp2
  6900 00005891 29D6                <2> 		sub esi, edx
  6901 00005893 668B06              <2> 		mov ax, [esi]
  6902 00005896 66A3[A9580000]      <2> 		mov [cursorcache], ax
  6903 0000589C B080                <2> 		mov al, 128
  6904 0000589E B407                <2> 		mov ah, 7
  6905 000058A0 668906              <2> 		mov [esi], ax
  6906 000058A3 E80DCDFFFF          <2> 		call termcopy
  6907 000058A8 C3                  <2> 		ret
  6908 000058A9 0000                <2> cursorcache db 0,0
  6909                              <2> 
  6910                              <2> PS2SET:
  6911 000058AB B0A8                <2>   mov  al, 0xa8		; enable mouse port
  6912 000058AD E664                <2>   out  0x64, al		; write to keyboardcontroller
  6913 000058AF E801000000          <2>   call CHKPRT		; check if command is progressed (demand!)
  6914 000058B4 C3                  <2> ret
  6915                              <2> 
  6916                              <2> CHKPRT:
  6917 000058B5 66B96400            <2>   mov  cx, 100
  6918                              <2>  .again:
  6919 000058B9 E464                <2>   in   al, 0x64		; read from keyboardcontroller
  6920 000058BB A802                <2>   test al, 2		; Check if input buffer is empty
  6921 000058BD 7402                <2>   je .go
  6922 000058BF E2F8                <2>   loop .again
  6923                              <2>  .go:
  6924 000058C1 C3                  <2> ret
  6925                              <2> 
  6926                              <2> WMOUS:
  6927 000058C2 B0D4                <2>   mov  al, 0xd4		; write to mouse device instead of to keyboard
  6928 000058C4 E664                <2>   out  0x64, al		; write to keyboardcontroller
  6929 000058C6 E8EAFFFFFF          <2>   call CHKPRT		; check if command is progressed (demand!)
  6930 000058CB C3                  <2> ret
  6931                              <2> 
  6932                              <2> MBUFFUL:
  6933 000058CC 66B96400            <2>   mov cx, 100
  6934                              <2>  .mn:
  6935 000058D0 E464                <2>   in   al, 0x64		; read from keyboardcontroller
  6936 000058D2 A820                <2>   test al, 0x20		; check if mouse output buffer is full
  6937 000058D4 7402                <2>   jz  .mnn
  6938 000058D6 E2F8                <2>   loop .mn
  6939                              <2>  .mnn:
  6940 000058D8 C3                  <2> ret
  6941                              <2> 
  6942                              <2> 
  6943                              <2> ACTMOUS:
  6944 000058D9 E8E4FFFFFF          <2>   call WMOUS
  6945 000058DE B0F4                <2>   mov  al, 0xf4 	; Command to activate mouse itselve (Stream mode)
  6946 000058E0 E660                <2>   out  0x60, al		; write ps/2 controller output port (activate mouse)
  6947 000058E2 E8CEFFFFFF          <2>   call CHKPRT		; check if command is progressed (demand!)
  6948 000058E7 E801000000          <2>   call CHKMOUS		; check if a byte is available
  6949 000058EC C3                  <2> ret
  6950                              <2> 
  6951                              <2> CHKMOUS:
  6952 000058ED B300                <2>   mov  bl, 0
  6953 000058EF 66B96400            <2>   mov cx, 100
  6954                              <2>  .vrd:
  6955 000058F3 E464                <2>   in   al, 0x64		; read from keyboardcontroller
  6956 000058F5 A801                <2>   test al, 1		; check if controller buffer (60h) has data
  6957 000058F7 7504                <2>   jnz .yy
  6958 000058F9 E2F8                <2>   loop .vrd
  6959 000058FB B301                <2>   mov  bl, 1
  6960                              <2>  .yy:
  6961 000058FD C3                  <2> ret
  6962                              <2> 
  6963                              <2> GETB:
  6964                              <2>  .cagain:
  6965 000058FE E8EAFFFFFF          <2>   call CHKMOUS		; check if a byte is available
  6966 00005903 08DB                <2>   or bl, bl
  6967 00005905 75F7                <2>   jnz .cagain
  6968 00005907 B0AD                <2>   mov  al, 0xad		; Disable Keyboard
  6969 00005909 E664                <2>   out  0x64, al		; write to keyboardcontroller
  6970 0000590B E8A5FFFFFF          <2>   call CHKPRT		; check if command is progressed (demand!)
  6971 00005910 6631C0              <2>   xor  ax, ax
  6972 00005913 E460                <2>   in   al, 0x60		; read ps/2 controller output port (mousebyte)
  6973 00005915 88C2                <2>   mov  dl, al
  6974 00005917 B0AE                <2>   mov  al, 0xae		; Enable Keyboard
  6975 00005919 E664                <2>   out  0x64, al		; write to keyboardcontroller
  6976 0000591B E895FFFFFF          <2>   call CHKPRT		; check if command is progressed (demand!)
  6977 00005920 88D0                <2>   mov  al, dl
  6978 00005922 C3                  <2> ret
  6979                              <2> 
  6980 00005923 00                  <2> LBUTTON db 0x00	;	Left   button status 1=PRESSED 0=RELEASED
  6981 00005924 00                  <2> RBUTTON db 0x00	;	Right  button status 1=PRESSED 0=RELEASED
  6982 00005925 00                  <2> MBUTTON db 0x00	;	Middle button status 1=PRESSED 0=RELEASED
  6983 00005926 00                  <2> XCOORD  db 0x00	;	the moved distance  (horizontal)
  6984 00005927 00                  <2> YCOORD  db 0x00	;	the moved distance  (vertical)
  6985                              <1> %endif
  6986                              <1> %include "source/drivers/sound/pcspkr.asm"
  6987                              <2> ;PC Speaker Drivers
  6988                              <2> PCSpeakerRAW:
  6989 00005928 60                  <2> 	pusha
  6990                              <2> nosoundrep:
  6991 00005929 8B35[68020000]      <2> 	mov esi, [soundpos]
  6992 0000592F 31C9                <2> 	xor ecx, ecx
  6993 00005931 668B0D[66020000]    <2> 	mov cx, [soundrepititions]
  6994 00005938 6681F90000          <2> 	cmp cx, 0
  6995 0000593D 0F8548000000        <2> 	jne near donesetpitch
  6996 00005943 668B0E              <2> 	mov cx, [esi]
  6997 00005946 668B5E02            <2> 	mov bx, [esi + 2]
  6998 0000594A 66890D[66020000]    <2> 	mov [soundrepititions], cx
  6999 00005951 81C604000000        <2> 	add esi, 4
  7000 00005957 8935[68020000]      <2> 	mov [soundpos], esi
  7001 0000595D 3B35[6C020000]      <2> 	cmp esi, [soundendpos]
  7002 00005963 7735                <2> 	ja stopsound
  7003 00005965 66813D[66020000]00- <2> 	cmp word [soundrepititions], 0
  7004 0000596D 00                  <2>
  7005 0000596E 74B9                <2> 	je nosoundrep
  7006 00005970 6681FB0000          <2> 	cmp bx, 0
  7007 00005975 740F                <2> 	je nosoundplay
  7008 00005977 E840000000          <2> 	call setpitch
  7009 0000597C E849000000          <2> 	call startsound
  7010 00005981 E905000000          <2> 	jmp donesetpitch
  7011                              <2> nosoundplay:
  7012 00005986 E846000000          <2> 	call killsound
  7013                              <2> donesetpitch:
  7014 0000598B 6649                <2> 	dec cx
  7015 0000598D 66890D[66020000]    <2> 	mov [soundrepititions], cx
  7016 00005994 61                  <2> 	popa
  7017 00005995 E90BA9FFFF          <2> 	jmp timerinterrupt
  7018                              <2> stopsound:
  7019 0000599A 31C0                <2> 	xor eax, eax
  7020 0000599C 66A3[66020000]      <2> 	mov [soundrepititions], ax
  7021 000059A2 A2[65020000]        <2> 	mov [soundon], al
  7022 000059A7 A3[68020000]        <2> 	mov [soundpos], eax
  7023 000059AC A3[6C020000]        <2> 	mov [soundendpos], eax
  7024 000059B1 E81B000000          <2> 	call killsound
  7025 000059B6 61                  <2> 	popa
  7026 000059B7 E9E9A8FFFF          <2> 	jmp timerinterrupt
  7027                              <2> 
  7028                              <2> 
  7029                              <2> setpitch:
  7030 000059BC B0B6                <2> 	mov al, 0xB6
  7031 000059BE E643                <2> 	out 0x43, al
  7032 000059C0 6689D8              <2> 	mov ax, bx
  7033 000059C3 E642                <2> 	out 0x42, al
  7034 000059C5 88E0                <2> 	mov al, ah
  7035 000059C7 E642                <2> 	out 0x42, al
  7036 000059C9 C3                  <2> 	ret
  7037                              <2> startsound:
  7038 000059CA E461                <2> 	in al, 0x61
  7039 000059CC 0C03                <2> 	or al, 3
  7040 000059CE E661                <2> 	out 0x61, al
  7041 000059D0 C3                  <2> 	ret
  7042                              <2> killsound:
  7043 000059D1 E461                <2> 	in al, 0x61
  7044 000059D3 24FC                <2> 	and al, 0xFC
  7045 000059D5 E661                <2> 	out 0x61, al
  7046 000059D7 C3                  <2> 	ret
  7047                              <2> 	
  7048                              <1> %ifdef sound.included
  7049                              <1> 	%include "source/drivers/sound/sblaster.asm"
  7050                              <2> ;Sound Blaster Drivers
  7051                              <2> sblaster:
  7052                              <2> .init:
  7053 000059D8 E8D7010000          <2> 		call ResetDSP			;If the system is Sound Blaster 16 compatible, reset the DSP
  7054 000059DD A2[0E5C0000]        <2> 		mov [SoundBlaster], al	;if the reset worked, show an available card
  7055 000059E2 3C00                <2> 		cmp al, 0
  7056 000059E4 7418                <2> 		je .noinit
  7057 000059E6 B0D1                <2> 		mov	al,0D1h 		; turn speaker(s) on
  7058 000059E8 E8FB010000          <2> 		call WriteDSP
  7059 000059ED B088                <2> 		mov	al,088h 		; Left = 8, Right = 8 (15-highest)
  7060 000059EF E8B1010000          <2> 		call MstrVol 		; L = Hi Nibble, R = Lo Nibble
  7061 000059F4 BE[FF590000]        <2> 		mov esi, .initmsg
  7062 000059F9 E83DC3FFFF          <2> 		call print
  7063                              <2> .noinit:
  7064 000059FE C3                  <2> 		ret
  7065 000059FF 536F756E64626C6173- <2> .initmsg db "Soundblaster Initialized",10,0
  7066 00005A08 74657220496E697469- <2>
  7067 00005A11 616C697A65640A00    <2>
  7068                              <2> sblaster.cont: ;this function goes to the next available portion of a sound, if necessary
  7069 00005A19 813D[F85B0000]0000- <2> 	cmp dword [Length0], 0
  7070 00005A21 0000                <2>
  7071 00005A23 0F8462000000        <2> 	je near .done
  7072 00005A29 FF0D[F85B0000]      <2> 	dec dword [Length0]
  7073 00005A2F E908000000          <2> 	jmp .notodd
  7074                              <2> .oddlength:
  7075 00005A34 31C9                <2> 	xor ecx, ecx
  7076 00005A36 880D[F75B0000]      <2> 	mov [OddLength], cl
  7077                              <2> .notodd:
  7078 00005A3C 8B35[FE5B0000]      <2> 	mov esi, [NextMemLoc]
  7079 00005A42 31C9                <2> 	xor ecx, ecx
  7080 00005A44 668B0D[FC5B0000]    <2> 	mov cx, [Length1]
  7081 00005A4B D1E9                <2> 	shr ecx, 1
  7082 00005A4D 6641                <2> 	inc cx
  7083 00005A4F 31DB                <2> 	xor ebx, ebx
  7084 00005A51 668B1D[065C0000]    <2> 	mov bx, [SegLoc]
  7085 00005A58 6601CB              <2> 	add bx, cx
  7086 00005A5B 66891D[065C0000]    <2> 	mov [SegLoc], bx
  7087 00005A62 81C300000800        <2> 	add ebx, 0x80000 ;linear address of sb buffer
  7088 00005A68 8935[025C0000]      <2> 	mov [MemLoc], esi
  7089 00005A6E 89C8                <2> 	mov eax, ecx
  7090 00005A70 01F0                <2> 	add eax, esi
  7091 00005A72 A3[FE5B0000]        <2> 	mov [NextMemLoc], eax
  7092 00005A77 E833000000          <2> 	call DMACopy
  7093                              <2> 	;call DMAPlay
  7094 00005A7C E8E0000000          <2> 	call PlayDSP
  7095 00005A81 66BA2E02            <2> 	mov dx, (BasePort+0xE)
  7096 00005A85 EC                  <2> 	in al, dx ;acknowledge the interrupt 
  7097 00005A86 E9EEA8FFFF          <2> 	jmp handled2 ;it is part of an interrupt routine
  7098                              <2> .done:
  7099 00005A8B 803D[F75B0000]01    <2> 	cmp byte [OddLength], 1
  7100 00005A92 74A0                <2> 	je .oddlength
  7101 00005A94 31C0                <2> 	xor eax, eax
  7102 00005A96 66A3[FC5B0000]      <2> 	mov [Length1], ax
  7103 00005A9C 66B8D000            <2> 	mov ax, 0xD0
  7104 00005AA0 E843010000          <2> 	call WriteDSP
  7105 00005AA5 66BA2E02            <2> 	mov dx, (BasePort+0xE)
  7106 00005AA9 EC                  <2> 	in al, dx ;acknowledge the interrupt 
  7107 00005AAA E9CAA8FFFF          <2> 	jmp handled2
  7108                              <2> 	
  7109                              <2> DMACopy:
  7110 00005AAF 66B80800            <2> 		mov ax, LINEAR_SEL
  7111 00005AB3 8EE0                <2> 		mov fs, ax
  7112 00005AB5 C1E902              <2> 		shr ecx, 2
  7113                              <2> .loop:
  7114 00005AB8 8B06                <2> 		mov eax, [esi]
  7115 00005ABA 648903              <2> 		mov [fs:ebx], eax
  7116 00005ABD 81C604000000        <2> 		add esi, 4
  7117 00005AC3 81C304000000        <2> 		add ebx, 4
  7118 00005AC9 E2ED                <2> 		loop .loop
  7119 00005ACB 66B83000            <2> 		mov ax, NEW_DATA_SEL
  7120 00005ACF 8EE0                <2> 		mov fs, ax
  7121 00005AD1 C3                  <2> 		ret
  7122                              <2> 		
  7123                              <2> 
  7124                              <2> DMAPlay:    ;uses eax ebx edx
  7125 00005AD2 C605[085C0000]00    <2> 		mov	byte [Page1],00h
  7126                              <2> 
  7127 00005AD9 B005                <2> 		mov	al,(Channel+4)
  7128 00005ADB 66BA0A00            <2> 		mov	dx,0Ah
  7129 00005ADF EE                  <2> 		out	dx,al
  7130 00005AE0 30C0                <2> 		xor	al,al
  7131 00005AE2 66BA0C00            <2> 		mov	dx,0Ch
  7132 00005AE6 EE                  <2> 		out	dx,al
  7133 00005AE7 B059                <2> 		mov	al,ModeReg
  7134 00005AE9 66BA0B00            <2> 		mov	dx,0Bh
  7135 00005AED EE                  <2> 		out	dx,al
  7136 00005AEE B800000800          <2> 		mov	eax,0x80000
  7137 00005AF3 66BA0200            <2> 		mov	dx,AddPort
  7138 00005AF7 EE                  <2> 		out	dx,al
  7139 00005AF8 86C4                <2> 		xchg al,ah
  7140 00005AFA EE                  <2> 		out	dx,al
  7141 00005AFB B800000800          <2> 		mov	eax,0x80000
  7142 00005B00 89C2                <2> 		mov	edx,eax
  7143 00005B02 2500000100          <2> 		and	eax,65536
  7144 00005B07 7406                <2> 		jz	MemLocN1
  7145 00005B09 FE05[085C0000]      <2> 		inc	byte [Page1]
  7146                              <2> MemLocN1:
  7147 00005B0F 89D0                <2> 		mov	eax,edx
  7148 00005B11 2500000200          <2> 		and	eax,131072
  7149 00005B16 7407                <2> 		jz	MemLocN2
  7150 00005B18 8005[085C0000]02    <2> 		add	byte [Page1],02
  7151                              <2> MemLocN2:
  7152 00005B1F 89D0                <2> 		mov	eax,edx
  7153 00005B21 2500000400          <2> 		and	eax,262144
  7154 00005B26 7407                <2> 		jz	MemLocN3
  7155 00005B28 8005[085C0000]04    <2> 		add	byte [Page1],04
  7156                              <2> MemLocN3:
  7157 00005B2F 89D0                <2> 		mov	eax,edx
  7158 00005B31 2500000800          <2> 		and	eax,524288
  7159 00005B36 7407                <2> 		jz	MemLocN4
  7160 00005B38 8005[085C0000]08    <2> 		add	byte [Page1],08
  7161                              <2> MemLocN4:
  7162 00005B3F 66BA8300            <2> 		mov	dx,PgPort
  7163 00005B43 A0[085C0000]        <2> 		mov	al,[Page1]
  7164 00005B48 EE                  <2> 		out	dx,al
  7165 00005B49 66BA0300            <2> 		mov	dx,LenPort
  7166 00005B4D 66A1[FC5B0000]      <2> 		mov	ax,[Length1]
  7167 00005B53 6648                <2> 		dec ax
  7168 00005B55 EE                  <2> 		out	dx,al
  7169 00005B56 86C4                <2> 		xchg al,ah
  7170 00005B58 EE                  <2> 		out	dx,al
  7171 00005B59 66BA0A00            <2> 		mov	dx,0Ah
  7172 00005B5D B001                <2> 		mov	al,Channel
  7173 00005B5F EE                  <2> 		out	dx,al
  7174 00005B60 C3                  <2> 		ret
  7175                              <2> 		
  7176                              <2> PlayDSP:
  7177 00005B61 B040                <2> 		mov	al,40h
  7178 00005B63 E880000000          <2> 		call WriteDSP
  7179 00005B68 31D2                <2> 		xor	edx,edx
  7180 00005B6A B840420F00          <2> 		mov	eax,1000000
  7181 00005B6F 8B1D[095C0000]      <2> 		mov	ebx,[Freq]
  7182 00005B75 F7F3                <2> 		div	ebx
  7183 00005B77 89C3                <2> 		mov	ebx,eax
  7184 00005B79 B800010000          <2> 		mov	eax,256
  7185 00005B7E 29D8                <2> 		sub	eax,ebx
  7186 00005B80 E863000000          <2> 		call WriteDSP
  7187 00005B85 A0[0D5C0000]        <2> 		mov	al,[WAVEMode]	;write the mode
  7188 00005B8A E859000000          <2> 		call WriteDSP
  7189 00005B8F 66A1[FC5B0000]      <2> 		mov	ax,[Length1]
  7190 00005B95 66D1E8              <2> 		shr ax, 1
  7191 00005B98 E84B000000          <2> 		call WriteDSP
  7192 00005B9D 86C4                <2> 		xchg al,ah
  7193 00005B9F E844000000          <2> 		call WriteDSP
  7194 00005BA4 C3                  <2> 		ret
  7195                              <2> 
  7196                              <2> MstrVol:    ;uses ax dx
  7197 00005BA5 6650                <2> 	   push ax
  7198 00005BA7 66BA2402            <2> 	   mov	dx,(BasePort+4)
  7199 00005BAB B022                <2> 	   mov	al,22h
  7200 00005BAD EE                  <2> 	   out	dx,al
  7201 00005BAE 6658                <2> 	   pop	ax
  7202 00005BB0 6642                <2> 	   inc	dx
  7203 00005BB2 EE                  <2> 	   out	dx,al
  7204 00005BB3 C3                  <2> 	   ret
  7205                              <2> 	   
  7206                              <2> ResetDSP:   ; uses cx dx
  7207 00005BB4 66BA2602            <2> 			mov	dx,(BasePort+6)
  7208 00005BB8 B001                <2> 			mov	al,01
  7209 00005BBA EE                  <2> 			out	dx,al
  7210 00005BBB 66B93200            <2> 			mov	cx,50
  7211 00005BBF EC                  <2> WaitIt1:	in	al,dx
  7212 00005BC0 E2FD                <2> 			loop WaitIt1
  7213 00005BC2 30C0                <2> 			xor	al,al
  7214 00005BC4 EE                  <2> 			out	dx,al
  7215 00005BC5 66B93200            <2> 			mov	cx,50
  7216 00005BC9 EC                  <2> WaitIt2:	in	al,dx
  7217 00005BCA E2FD                <2> 			loop WaitIt2
  7218 00005BCC B4FF                <2> 			mov	ah,0FFh 		; part of Return Code
  7219 00005BCE 66BA2E02            <2> 			mov	dx,(BasePort+14)
  7220 00005BD2 EC                  <2> 			in	al,dx
  7221 00005BD3 2480                <2> 			and	al,80h
  7222 00005BD5 3C80                <2> 			cmp	al,80h
  7223 00005BD7 750C                <2> 			jne	ResetErr
  7224 00005BD9 66BA2A02            <2> 			mov	dx,(BasePort+10)
  7225 00005BDD EC                  <2> 			in	al,dx
  7226 00005BDE 3CAA                <2> 			cmp	al,0AAh
  7227 00005BE0 7503                <2> 			jne	ResetErr
  7228 00005BE2 B001                <2> ResetOK:	mov al, 1		; return ax = 0 if reset ok
  7229 00005BE4 C3                  <2> 			ret
  7230 00005BE5 30C0                <2> ResetErr:	xor al, al
  7231 00005BE7 C3                  <2> 			ret
  7232                              <2> 
  7233                              <2> WriteDSP:   ;uses ax dx
  7234 00005BE8 6650                <2> 		push ax
  7235 00005BEA 66BA2C02            <2> 		mov	dx,(BasePort+12)
  7236 00005BEE EC                  <2> WaitIt:	in	al,dx
  7237 00005BEF 2480                <2> 		and	al,80h
  7238 00005BF1 75FB                <2> 		jnz	WaitIt
  7239 00005BF3 6658                <2> 		pop	ax
  7240 00005BF5 EE                  <2> 		out	dx,al
  7241 00005BF6 C3                  <2> 		ret
  7242                              <2> 
  7243 00005BF7 00                  <2> OddLength db 0
  7244 00005BF8 00000000            <2> Length0 dd	0
  7245 00005BFC 0000                <2> Length1	dw  0
  7246 00005BFE 00000000            <2> NextMemLoc dd 0
  7247 00005C02 00000000            <2> MemLoc	dd  0
  7248 00005C06 0000                <2> SegLoc  dw 0
  7249 00005C08 00                  <2> Page1	db  0
  7250 00005C09 00000000            <2> Freq	dd	0
  7251 00005C0D 14                  <2> WAVEMode db 14h
  7252                              <2> PgPort	equ 83h
  7253                              <2> AddPort	equ 02h
  7254                              <2> LenPort	equ 03h
  7255                              <2> ModeReg	equ 59h
  7256                              <2> Channel	equ 01h
  7257                              <2> BasePort	equ 220h
  7258 00005C0E 00                  <2> SoundBlaster	db 0
  7259                              <1> %endif
  7260                              <1> %ifdef io.serial
  7261                              <1> 	%include "source/drivers/input/serial.asm"
  7262                              <1> %else
  7263                              <1> 	%include "source/drivers/input/keyboard.asm"
  7264 00005C0F 00                  <2> specialkey db 0
  7265 00005C10 00                  <2> charregion db 0
  7266                              <2> waitforinput:		;;this is basically the idle process
  7267                              <2> 					;;this halts the cpu for a small amount of time and then sees if there was a keypress
  7268                              <2> 					;;this lets the cpu stay at close to 0% instead of 100%
  7269 00005C11 6631C0              <2> 	xor ax, ax
  7270 00005C14 A0[18650000]        <2> 	mov al, [threadson]
  7271 00005C19 8825[18650000]      <2> 	mov [threadson], ah
  7272 00005C1F FB                  <2> 	sti
  7273 00005C20 F4                  <2> 	hlt
  7274 00005C21 A2[18650000]        <2> 	mov [threadson], al
  7275 00005C26 3A25[5C220000]      <2> 	cmp ah, [trans]
  7276 00005C2C 7401                <2> 	je getkey
  7277 00005C2E C3                  <2> 	ret
  7278                              <2> getkey:
  7279 00005C2F 31C0                <2> 		xor eax, eax
  7280 00005C31 A2[0F5C0000]        <2> 		mov [specialkey], al
  7281 00005C36 66A3[5A220000]      <2> 		mov [lastkey], ax
  7282 00005C3C E464                <2> 		in al, 64h ; Status
  7283                              <2> 	%ifdef gui.included
  7284 00005C3E A820                <2> 		test al, 20h ; PS2-Mouse?
  7285 00005C40 0F852FFAFFFF        <2> 		jnz near moused
  7286                              <2> 	%endif
  7287 00005C46 A801                <2> 		test al, 1 
  7288 00005C48 74C7                <2> 		jz waitforinput ; if output buffer full or no keypress, jump to idle process
  7289                              <2> 	calckey:
  7290 00005C4A E460                <2> 		in al, 60h
  7291 00005C4C 88C4                <2> 		mov ah, al
  7292 00005C4E 30C0                <2> 		xor al, al
  7293 00005C50 8825[5B220000]      <2> 		mov [lastkey + 1], ah
  7294 00005C56 88E0                <2> 		mov al, ah
  7295 00005C58 BF[F15D0000]        <2> 		mov edi, scancode
  7296                              <2> 	searchscan: 
  7297 00005C5D 3C3A                <2> 		cmp al, 3Ah
  7298 00005C5F 731A                <2> 		jae scanother
  7299 00005C61 30E4                <2> 		xor ah, ah
  7300 00005C63 C0E002              <2> 		shl al, 2
  7301 00005C66 01C7                <2> 		add edi, eax
  7302 00005C68 D0E8                <2> 		shr al, 1
  7303 00005C6A 01C7                <2> 		add edi, eax
  7304 00005C6C D0E8                <2> 		shr al, 1
  7305 00005C6E 8A27                <2> 		mov ah, [edi]
  7306 00005C70 80FC00              <2> 		cmp ah, 0
  7307 00005C73 7406                <2> 		je scanother
  7308 00005C75 E9D7000000          <2> 		jmp scanfound
  7309 00005C7A 00                  <2> uppercase db 0
  7310                              <2> scanother:
  7311 00005C7B 88C4                <2> 		mov ah, al
  7312 00005C7D 30C0                <2> 		xor al, al
  7313 00005C7F 66A3[5A220000]      <2> 		mov [lastkey], ax
  7314 00005C85 80FCE0              <2> 		cmp ah, 0E0h
  7315 00005C88 0F847D000000        <2> 		je near getkeyspecial
  7316 00005C8E 803D[0F5C0000]E0    <2> 		cmp byte [specialkey], 0xE0
  7317 00005C95 752B                <2> 		jne nospecialkey
  7318 00005C97 80FC38              <2> 		cmp ah, 38h
  7319 00005C9A 0F84A0000000        <2> 		je near alton
  7320 00005CA0 80FCB8              <2> 		cmp ah, 0B8h
  7321 00005CA3 0F849F000000        <2> 		je near altoff
  7322 00005CA9 80FC1D              <2> 		cmp ah, 1Dh
  7323 00005CAC 0F847E000000        <2> 		je near ctron
  7324 00005CB2 80FC9D              <2> 		cmp ah, 9Dh
  7325 00005CB5 0F847D000000        <2> 		je near ctroff
  7326 00005CBB 66A3[5A220000]      <2> 		mov [lastkey], ax
  7327 00005CC1 C3                  <2> 		ret
  7328                              <2> nospecialkey:
  7329 00005CC2 80FC2A              <2> 		cmp ah, 2Ah
  7330 00005CC5 0F8455000000        <2> 		je near shifton
  7331 00005CCB 80FC36              <2> 		cmp ah, 36h
  7332 00005CCE 0F844C000000        <2> 		je near shifton
  7333 00005CD4 80FC1C              <2> 		cmp ah, 1Ch
  7334 00005CD7 0F8473000000        <2> 		je near entdown
  7335 00005CDD 80FCAA              <2> 		cmp ah, 0AAh
  7336 00005CE0 0F8442000000        <2> 		je near shiftoff
  7337 00005CE6 80FCB6              <2> 		cmp ah, 0B6h
  7338 00005CE9 0F8439000000        <2> 		je near shiftoff
  7339 00005CEF 80FC3A              <2> 		cmp ah, 3Ah
  7340 00005CF2 0F84A5000000        <2> 		je near capslock
  7341 00005CF8 80FC45              <2> 		cmp ah, 0x45
  7342 00005CFB 0F84AD000000        <2> 		je near numlock
  7343 00005D01 80FC46              <2> 		cmp ah, 0x46
  7344 00005D04 0F84BC000000        <2> 		je near scrolllock
  7345 00005D0A C3                  <2> 		ret
  7346                              <2> 	getkeyspecial:
  7347 00005D0B C605[0F5C0000]E0    <2> 		mov byte [specialkey], 0xE0
  7348 00005D12 E933FFFFFF          <2> 		jmp calckey
  7349                              <2> 	shift:
  7350 00005D17 A0[7A5C0000]        <2> 		mov al, [uppercase]
  7351 00005D1C 3C01                <2> 		cmp al, 1
  7352 00005D1E 7308                <2> 		jae shiftoff
  7353                              <2> 	shifton:
  7354 00005D20 C605[7A5C0000]01    <2> 		mov byte [uppercase], 1
  7355 00005D27 C3                  <2> 		ret
  7356                              <2> 	shiftoff:
  7357 00005D28 C605[7A5C0000]00    <2> 		mov byte [uppercase], 0
  7358 00005D2F C3                  <2> 		ret
  7359                              <2> 	ctron:
  7360 00005D30 C605[9C5D0000]01    <2> 		mov byte [ctrkey], 1
  7361 00005D37 C3                  <2> 		ret
  7362                              <2> 	ctroff:
  7363 00005D38 C605[9C5D0000]00    <2> 		mov byte [ctrkey], 0
  7364 00005D3F C3                  <2> 		ret
  7365                              <2> 	alton:
  7366 00005D40 C605[9B5D0000]01    <2> 		mov byte [altkey], 1
  7367 00005D47 C3                  <2> 		ret
  7368                              <2> 	altoff:
  7369 00005D48 C605[9B5D0000]00    <2> 		mov byte [altkey], 0
  7370 00005D4F C3                  <2> 		ret
  7371                              <2> 	entdown:
  7372 00005D50 C3                  <2> 		ret
  7373                              <2> 	scanfound:
  7374 00005D51 81C704000000        <2> 		add edi, 4
  7375 00005D57 803D[9C5D0000]01    <2> 		cmp byte [ctrkey], 1
  7376 00005D5E 731B                <2> 		jae altin
  7377 00005D60 81EF04000000        <2> 		sub edi, 4
  7378 00005D66 81C702000000        <2> 		add edi, 2
  7379 00005D6C 803D[9B5D0000]01    <2> 		cmp byte [altkey], 1
  7380 00005D73 7306                <2> 		jae altin
  7381 00005D75 81EF02000000        <2> 		sub edi, 2
  7382                              <2> altin:
  7383 00005D7B 81C701000000        <2> 		add edi, 1
  7384 00005D81 803D[7A5C0000]01    <2> 		cmp byte [uppercase], 1
  7385 00005D88 7306                <2> 		jae uppercaseon
  7386 00005D8A 81EF01000000        <2> 		sub edi, 1
  7387                              <2> uppercaseon:
  7388 00005D90 8A07                <2> 		mov al,[edi]
  7389 00005D92 A2[5A220000]        <2> 		mov [lastkey], al
  7390 00005D97 C3                  <2> 		ret
  7391                              <2> 		
  7392 00005D98 00                  <2> keyboardstatus db 0
  7393 00005D99 00                  <2> numlockstatus db 0
  7394 00005D9A 00                  <2> scrolllockstatus db 0
  7395 00005D9B 00                  <2> altkey db 0
  7396 00005D9C 00                  <2> ctrkey db 0
  7397                              <2> 	capslock:
  7398 00005D9D 8035[985D0000]04    <2> 		xor byte [keyboardstatus], 00000100b
  7399 00005DA4 E835000000          <2> 		call updatekblights
  7400 00005DA9 E969FFFFFF          <2> 		jmp shift
  7401                              <2> 		
  7402                              <2> 	numlock:
  7403 00005DAE 8035[985D0000]02    <2> 		xor byte [keyboardstatus], 00000010b
  7404 00005DB5 8035[995D0000]01    <2> 		xor byte [numlockstatus], 1
  7405 00005DBC E81D000000          <2> 		call updatekblights
  7406 00005DC1 E969FEFFFF          <2> 		jmp getkey
  7407                              <2> 	
  7408                              <2> 	scrolllock:
  7409 00005DC6 8035[985D0000]01    <2> 		xor byte [keyboardstatus], 00000001b
  7410 00005DCD 8035[9A5D0000]01    <2> 		xor byte [scrolllockstatus], 1
  7411 00005DD4 E805000000          <2> 		call updatekblights
  7412 00005DD9 E951FEFFFF          <2> 		jmp getkey
  7413                              <2> 		
  7414                              <2> 	updatekblights:
  7415 00005DDE B0ED                <2> 		mov al, 0xED
  7416 00005DE0 66BA6000            <2> 		mov dx, 0x60
  7417 00005DE4 EE                  <2> 		out dx, al
  7418                              <2> 	chkkbdack:
  7419 00005DE5 EC                  <2> 		in al, dx
  7420 00005DE6 3CFA                <2> 		cmp al, 0xFA
  7421 00005DE8 75FB                <2> 		jne chkkbdack
  7422 00005DEA A0[985D0000]        <2> 		mov al, [keyboardstatus]
  7423 00005DEF EE                  <2> 		out dx, al
  7424 00005DF0 C3                  <2> 		ret
  7425                              <2> 		
  7426                              <2> scancode:
  7427 00005DF1 000000000000        <2> 	db 0,0,0,0,0,0				;0h
  7428 00005DF7 000000000000        <2> 	db 0,0,0,0,0,0				;1h
  7429 00005DFD 3121AD000000        <2> 	db '1','!',0xAD,0,0,0		;2h
  7430 00005E03 3240FDFB0000        <2> 	db '2','@',0xFD,0xFB,0,0	;3h
  7431 00005E09 332300000000        <2> 	db '3','#',0,0,0,0			;4h
  7432 00005E0F 34249B9C0000        <2> 	db '4','$',0x9B,0x9C,0,0	;5h
  7433 00005E15 3525EE000000        <2> 	db '5','%',0xEE,0,0,0		;6h
  7434 00005E1B 365EAC000000        <2> 	db '6','^',0xAC,0,0,0		;7h
  7435 00005E21 3726AB000000        <2> 	db '7','&',0xAB,0,0,0		;8h
  7436 00005E27 382AEC000000        <2> 	db '8','*',0xEC,0,0,0		;9h
  7437 00005E2D 392800000000        <2> 	db '9','(',0,0,0,0			;0Ah
  7438 00005E33 302900000000        <2> 	db '0',')',0,0,0,0			;0Bh
  7439 00005E39 2D5F9DF10000        <2> 	db '-','_',0x9D,0xF1,0,0	;0Ch
  7440 00005E3F 3D2BF7F60000        <2> 	db '=','+',0xF7,0xF6,0,0	;0Dh
  7441 00005E45 080800000000        <2> 	db 8,8,0,0,0,0				;0Eh
  7442 00005E4B 000000000000        <2> 	db 0,0,0,0,0,0				;0Fh
  7443 00005E51 7151848E0000        <2> 	db 'q','Q',0x84,0x8E,0,0	;10h
  7444 00005E57 7757868F0000        <2> 	db 'w','W',0x86,0x8F,0,0	;11h
  7445 00005E5D 65458290EE45        <2> 	db 'e','E',0x82,0x90,0xEE,'E'	;12h
  7446 00005E63 7252898A7050        <2> 	db 'r','R',0x89,0x8A,'p','P'	;13h
  7447 00005E69 7454819AE754        <2> 	db 't','T',0x81,0x9A,0xE7,'T'	;14h
  7448 00005E6F 795998007559        <2> 	db 'y','Y',0x98,0,'u','Y'	;15h
  7449 00005E75 7555A3970000        <2> 	db 'u','U',0xA3,0x97,0,0		;16h
  7450 00005E7B 6949A18D6949        <2> 	db 'i','I',0xA1,0x8D,'i','I'	;17h
  7451 00005E81 6F4FA29577EA        <2> 	db 'o','O',0xA2,0x95,'w',0xEA	;18h
  7452 00005E87 70509499E3EF        <2> 	db 'p','P',0x94,0x99,0xE3,0xEF	;19h
  7453 00005E8D 5B7BF4000000        <2> 	db '[','{',0xF4,0,0,0		;1Ah
  7454 00005E93 5D7DF5000000        <2> 	db ']','}',0xF5,0,0,0		;1Bh
  7455 00005E99 000000000000        <2> 	db 0,0,0,0,0,0				;1Ch
  7456 00005E9F 000000000000        <2> 	db 0,0,0,0,0,0				;1Dh
  7457 00005EA5 6141A085E041        <2> 	db 'a','A',0xA0,133,224,'A'	;1Eh
  7458 00005EAB 73531500E5E4        <2> 	db 's','S',21,0,229,228		;1Fh
  7459 00005EB1 6444F800EB7F        <2> 	db 'd','D',0xF8,0,235,127	;20h
  7460 00005EB7 66469F00EDE8        <2> 	db 'f','F',159,0,237,232	;21h
  7461 00005EBD 6747000079E2        <2> 	db 'g','G',0,0,'y',226		;22h
  7462 00005EC3 684800006E48        <2> 	db 'h','H',0,0,'n','H'		;23h
  7463 00005EC9 6A4A00000000        <2> 	db 'j','J',0,0,0,0			;24h
  7464 00005ECF 6B4B00006B4B        <2> 	db 'k','K',0,0,'k','K'		;25h
  7465 00005ED5 6C4C0000E9E9        <2> 	db 'l','L',0,0,233,233		;26h
  7466 00005EDB 3B3A14000000        <2> 	db ';',':',20,0,0,0			;27h
  7467 00005EE1 272200000000        <2> 	db 27h,22h,0,0,0,0			;28h
  7468 00005EE7 607E00000000        <2> 	db '`','~',0,0,0,0			;29h
  7469 00005EED 000000000000        <2> 	db 0,0,0,0,0,0				;2Ah
  7470 00005EF3 5C7CAAB30000        <2> 	db 92,'|',170,179,0,0		;2Bh
  7471 00005EF9 7A5A91927A5A        <2> 	db 'z','Z',145,146,'z','Z'	;2Ch
  7472 00005EFF 7858000000F0        <2> 	db 'x','X',0,0,0,240		;2Dh
  7473 00005F05 634387800000        <2> 	db 'c','C',135,128,0,0		;2Eh
  7474 00005F0B 765600000000        <2> 	db 'v','V',0,0,0,0			;2Fh
  7475 00005F11 62420000E142        <2> 	db 'b','B',0,0,225,'B'		;30h
  7476 00005F17 6E4EA4A5764E        <2> 	db 'n','N',0xA4,0xA5,'v','N'	;31h
  7477 00005F1D 6D4D0000E64D        <2> 	db 'm','M',0,0,230,'M'		;32h
  7478 00005F23 2C3CF3AE0000        <2> 	db ',','<',0xF3,174,0,0		;33h
  7479 00005F29 2E3EF2AF0000        <2> 	db '.','>',0xF2,175,0,0		;34h
  7480 00005F2F 2F3FA8000000        <2> 	db '/','?',0xA8,0,0,0		;35h
  7481 00005F35 000000000000        <2> 	db 0,0,0,0,0,0				;36h
  7482 00005F3B 000000000000        <2> 	db 0,0,0,0,0,0				;37h
  7483 00005F41 000000000000        <2> 	db 0,0,0,0,0,0				;38h
  7484 00005F47 202000000000        <2> 	db ' ',' ',0,0,0,0			;39h
  7485                              <2> noscan:
  7486                              <2> 
  7487                              <1> %endif
  7488                              <1> ;drivers will soon be handled intelligently
  7489                              <1> ;every driver's source will be scanned for a .init function
  7490                              <1> ;that will be called and if it returns 0
  7491                              <1> ;the hardware was found and the driver initialized properly
  7492                              <1> initializelater: ;these have debugging messages and should be initialized after the screen
  7493                              <1> 	%ifdef sound.included
  7494 00005F4D E886FAFFFF          <1> 		call sblaster.init
  7495                              <1> 	%endif
  7496                              <1> 	%ifdef network.included
  7497 00005F52 E82D220000          <1> 		call network.init
  7498                              <1> 	%endif
  7499 00005F57 C3                  <1> 	ret
  7500                              <1> initialize:
  7501                              <1> ;Now I will initialise the interrupt controllers and remap irq's
  7502 00005F58 E814000000          <1> 	call .pic
  7503                              <1> %ifdef terminal.vsync
  7504                              <1> 	call .rtc
  7505                              <1> %endif
  7506 00005F5D E871000000          <1> 	call .pit
  7507 00005F62 E893000000          <1> 	call .fpu
  7508 00005F67 E8A4000000          <1> 	call .sse
  7509 00005F6C 31C0                <1> 	xor eax, eax
  7510 00005F6E 31C9                <1> 	xor ecx, ecx
  7511                              <1> %ifdef io.serial
  7512                              <1> 	call serial.init
  7513                              <1> %endif
  7514 00005F70 C3                  <1> 	ret
  7515                              <1> 	
  7516                              <1> .pic:
  7517 00005F71 B011                <1> 	mov al, 0x11
  7518 00005F73 E620                <1> 	out 0x20, al
  7519 00005F75 E6A0                <1> 	out 0xA0, al
  7520 00005F77 B040                <1> 	mov al, 0x40	;interrupt for master
  7521 00005F79 E621                <1> 	out 0x21, al
  7522 00005F7B B048                <1> 	mov al, 0x48	;interrupt for slave
  7523 00005F7D E6A1                <1> 	out 0xA1, al
  7524 00005F7F B004                <1> 	mov al, 4
  7525 00005F81 E621                <1> 	out 0x21, al
  7526 00005F83 B002                <1> 	mov al, 2
  7527 00005F85 E6A1                <1> 	out 0xA1, al
  7528 00005F87 B001                <1> 	mov al, 0x1
  7529 00005F89 E621                <1> 	out 0x21, al
  7530 00005F8B B001                <1> 	mov al, 0x1
  7531 00005F8D E6A1                <1> 	out 0xA1, al
  7532                              <1> 	;masks are set to zero so as not to mask
  7533 00005F8F 30C0                <1> 	xor al, al
  7534 00005F91 E621                <1> 	out 0x21, al
  7535 00005F93 30C0                <1> 	xor al, al
  7536 00005F95 E6A1                <1> 	out 0xA1, al
  7537 00005F97 B020                <1> 	mov al, 0x20
  7538 00005F99 E6A0                <1> 	out 0xA0, al
  7539 00005F9B E620                <1> 	out 0x20, al
  7540 00005F9D C3                  <1> 	ret
  7541                              <1> .rtc:
  7542 00005F9E B008                <1> 	mov al, 0x8
  7543 00005FA0 88C4                <1> 	mov ah, al
  7544 00005FA2 66BA7000            <1> 	mov dx, 0x70
  7545 00005FA6 EE                  <1> 	out dx, al
  7546 00005FA7 6642                <1> 	inc dx
  7547 00005FA9 EC                  <1> 	in al, dx
  7548 00005FAA 86C4                <1> 	xchg al, ah
  7549 00005FAC 664A                <1> 	dec dx
  7550 00005FAE EE                  <1> 	out dx, al
  7551 00005FAF 6642                <1> 	inc dx
  7552 00005FB1 86C4                <1> 	xchg al, ah
  7553 00005FB3 0C40                <1> 	or al, 0x40
  7554 00005FB5 EE                  <1> 	out dx, al
  7555                              <1> 	
  7556 00005FB6 B00A                <1> 	mov al, 0xA
  7557 00005FB8 664A                <1> 	dec dx
  7558 00005FBA EE                  <1> 	out dx, al
  7559 00005FBB 86C4                <1> 	xchg al, ah
  7560 00005FBD 6642                <1> 	inc dx
  7561 00005FBF EC                  <1> 	in al, dx
  7562 00005FC0 24F0                <1> 	and al, 0xF0
  7563 00005FC2 0A05[01030000]      <1> 	or al, [rtcrate]
  7564 00005FC8 86C4                <1> 	xchg al, ah
  7565 00005FCA 664A                <1> 	dec dx
  7566 00005FCC EE                  <1> 	out dx, al
  7567 00005FCD 6642                <1> 	inc dx
  7568 00005FCF 86C4                <1> 	xchg al, ah
  7569 00005FD1 EE                  <1> 	out dx, al
  7570 00005FD2 C3                  <1> 	ret
  7571                              <1> 	
  7572                              <1> .pit:
  7573                              <1> 	;initialize the PIT
  7574 00005FD3 66A1[57020000]      <1> 	mov ax, [pitdiv] ;this is the divider for the PIT
  7575 00005FD9 E640                <1> 	out 0x40, al
  7576 00005FDB 66C1C008            <1> 	rol ax, 8
  7577 00005FDF E640                <1> 	out 0x40, al
  7578                              <1> 	;enable rtc interrupt
  7579 00005FE1 B00B                <1> 	mov al, 0xB
  7580 00005FE3 E670                <1> 	out 0x70, al
  7581 00005FE5 66C1C008            <1> 	rol ax, 8
  7582 00005FE9 E471                <1> 	in al, 0x71
  7583 00005FEB 66C1C008            <1> 	rol ax, 8
  7584 00005FEF E670                <1> 	out 0x70, al
  7585 00005FF1 66C1C008            <1> 	rol ax, 8
  7586 00005FF5 0C40                <1> 	or al, 0x40
  7587 00005FF7 E671                <1> 	out 0x71, al
  7588 00005FF9 C3                  <1> 	ret
  7589                              <1> .fpu:
  7590                              <1> 	;And now to initialize the fpu
  7591 00005FFA 0F20E0              <1> 	mov eax, cr4
  7592 00005FFD 0D00020000          <1> 	or eax, 0x200
  7593 00006002 0F22E0              <1> 	mov cr4, eax
  7594 00006005 B87F0B0000          <1> 	mov eax, 0xB7F
  7595 0000600A 50                  <1> 	push eax
  7596 0000600B D92C24              <1> 	fldcw [esp]
  7597 0000600E 58                  <1> 	pop eax
  7598 0000600F C3                  <1> 	ret
  7599                              <1> 	
  7600                              <1> .sse:
  7601 00006010 0F20C0              <1> 	mov eax, cr0
  7602 00006013 24FB                <1> 	and al, 11111011b
  7603 00006015 0C02                <1> 	or al, 00000010b
  7604 00006017 0F22C0              <1> 	mov cr0, eax
  7605 0000601A 0F20E0              <1> 	mov eax, cr4
  7606 0000601D 660D0006            <1> 	or ax, 0000011000000000b
  7607 00006021 0F22E0              <1> 	mov cr4, eax
  7608 00006024 C3                  <1> 	ret
  7609                                      %include "source/pci.asm"
  7610 00006025 00                  <1> pcibus		db 0
  7611 00006026 00                  <1> pcidevice	db 0
  7612 00006027 00                  <1> pcifunction	db 0
  7613 00006028 00                  <1> pciregister	db 0
  7614 00006029 00                  <1> pcireqtype	db 0
  7615 0000602A 00000000            <1> pcidevid	dd 0
  7616 0000602E FFFFFFFF            <1> pcidevidmask dd 0xFFFFFFFF
  7617                              <1> getpcimem:
  7618 00006032 B002                <1> 	mov al, 2
  7619 00006034 A2[29600000]        <1> 	mov [pcireqtype], al
  7620 00006039 E922000000          <1> 	jmp searchpci
  7621                              <1> getpciport:
  7622 0000603E B001                <1> 	mov al, 1
  7623 00006040 A2[29600000]        <1> 	mov [pcireqtype], al
  7624 00006045 E916000000          <1> 	jmp searchpci
  7625                              <1> pcidump:
  7626 0000604A 31C0                <1> 	xor eax, eax
  7627 0000604C A2[27600000]        <1> 	mov [pcifunction], al
  7628 00006051 A2[25600000]        <1> 	mov [pcibus], al
  7629 00006056 A2[26600000]        <1> 	mov [pcidevice], al
  7630 0000605B A2[29600000]        <1> 	mov [pcireqtype], al
  7631                              <1> searchpci:		;;return in ebx, start X in pciX
  7632 00006060 30C0                <1> 	xor al, al
  7633 00006062 A2[28600000]        <1> 	mov [pciregister], al
  7634 00006067 E817020000          <1> 	call getpciaddr
  7635 0000606C BAF80C0000          <1> 	mov edx, 0xCF8
  7636 00006071 EF                  <1> 	out dx, eax	;;request pci config
  7637 00006072 BAFC0C0000          <1> 	mov edx, 0xCFC
  7638 00006077 ED                  <1> 	in eax, dx 	;;read in pci config
  7639 00006078 3D0000FFFF          <1> 	cmp eax, 0xFFFF0000
  7640 0000607D 0F8237000000        <1> 	jb near checkpcidevice
  7641                              <1> searchpciret:
  7642                              <1> nextpcidevice:
  7643 00006083 30C0                <1> 	xor al, al
  7644 00006085 A2[27600000]        <1> 	mov [pcifunction], al
  7645 0000608A A0[26600000]        <1> 	mov al, [pcidevice]
  7646 0000608F 3C1F                <1> 	cmp al, 11111b
  7647 00006091 0F8300010000        <1> 	jae near nextpcibus
  7648 00006097 FEC0                <1> 	inc al
  7649 00006099 A2[26600000]        <1> 	mov [pcidevice], al
  7650 0000609E EBC0                <1> 	jmp searchpci
  7651 000060A0 A0[27600000]        <1> 	mov al, [pcifunction]
  7652 000060A5 3C07                <1> 	cmp al, 111b
  7653 000060A7 0F83D6FFFFFF        <1> 	jae near nextpcidevice
  7654 000060AD FEC0                <1> 	inc al
  7655 000060AF A2[27600000]        <1> 	mov [pcifunction], al
  7656 000060B4 EBAA                <1> 	jmp searchpci
  7657 000060B6 00000000            <1> pcitype: db 0,0,0,0
  7658                              <1> checkpcidevice:
  7659 000060BA 31C0                <1> 	xor eax, eax
  7660 000060BC 3905[2A600000]      <1> 	cmp [pcidevid], eax
  7661 000060C2 0F8430000000        <1> 	je near .good
  7662 000060C8 A2[28600000]        <1> 	mov [pciregister], al	;device id, vendor id
  7663 000060CD E8B1010000          <1> 	call getpciaddr
  7664 000060D2 BAF80C0000          <1> 	mov edx, 0xCF8
  7665 000060D7 EF                  <1> 	out dx, eax
  7666 000060D8 BAFC0C0000          <1> 	mov edx, 0xCFC
  7667 000060DD ED                  <1> 	in eax, dx
  7668 000060DE 2305[2E600000]      <1> 	and eax, [pcidevidmask]
  7669 000060E4 8B1D[2A600000]      <1> 	mov ebx, [pcidevid]
  7670 000060EA 231D[2E600000]      <1> 	and ebx, [pcidevidmask]
  7671 000060F0 39D8                <1> 	cmp eax, ebx
  7672 000060F2 0F858BFFFFFF        <1> 	jne near searchpciret
  7673                              <1> .good:
  7674 000060F8 30C0                <1> 	xor al, al
  7675 000060FA 3805[29600000]      <1> 	cmp [pcireqtype], al
  7676 00006100 0F842C000000        <1> 	je near dumppcidevice
  7677 00006106 B008                <1> 	mov al, 0x08
  7678 00006108 A2[28600000]        <1> 	mov [pciregister], al	;;class code, subclass, revision id
  7679 0000610D E871010000          <1> 	call getpciaddr
  7680 00006112 BAF80C0000          <1> 	mov edx, 0xCF8
  7681 00006117 EF                  <1> 	out dx, eax
  7682 00006118 BAFC0C0000          <1> 	mov edx, 0xCFC
  7683 0000611D ED                  <1> 	in eax, dx
  7684 0000611E C1C008              <1> 	rol eax, 8
  7685 00006121 3A05[B6600000]      <1> 	cmp al, [pcitype]
  7686 00006127 0F84A0000000        <1> 	je near foundpciaddr
  7687 0000612D E951FFFFFF          <1> 	jmp searchpciret
  7688                              <1> dumppcidevice:
  7689 00006132 30C0                <1> 	xor al, al
  7690 00006134 A2[28600000]        <1> 	mov [pciregister], al
  7691 00006139 E845010000          <1> 	call getpciaddr
  7692 0000613E 89C1                <1> 	mov ecx, eax
  7693 00006140 C605[962E0000]05    <1> 	mov byte [firsthexshown], 5
  7694 00006147 E85FCDFFFF          <1> 	call showhex
  7695                              <1> dumppcidevicelp:
  7696 0000614C A2[28600000]        <1> 	mov [pciregister], al
  7697 00006151 E82D010000          <1> 	call getpciaddr
  7698 00006156 BAF80C0000          <1> 	mov edx, 0xCF8
  7699 0000615B EF                  <1> 	out dx, eax
  7700 0000615C BAFC0C0000          <1> 	mov edx, 0xCFC
  7701 00006161 ED                  <1> 	in eax, dx
  7702 00006162 89C1                <1> 	mov ecx, eax
  7703 00006164 A0[28600000]        <1> 	mov al, [pciregister]
  7704 00006169 0404                <1> 	add al, 4
  7705 0000616B C605[962E0000]05    <1> 	mov byte [firsthexshown], 5
  7706 00006172 E834CDFFFF          <1> 	call showhex
  7707 00006177 3C3C                <1> 	cmp al, 0x3C
  7708 00006179 72D1                <1> 	jb dumppcidevicelp
  7709                              <1> dumppcidn:
  7710                              <1> %ifdef io.serial
  7711                              <1> 	mov esi, line
  7712                              <1> 	call print
  7713                              <1> %else
  7714 0000617B 803D[42240000]00    <1> 	cmp byte [charpos], 0
  7715 00006182 0F84FBFEFFFF        <1> 	je near searchpciret
  7716 00006188 BE[088D0000]        <1> 	mov esi, line
  7717 0000618D E8A9BBFFFF          <1> 	call print
  7718                              <1> %endif
  7719 00006192 E9ECFEFFFF          <1> 	jmp searchpciret
  7720                              <1> nextpcibus:
  7721 00006197 30C0                <1> 	xor al, al
  7722 00006199 A2[26600000]        <1> 	mov [pcidevice], al
  7723 0000619E A0[25600000]        <1> 	mov al, [pcibus]
  7724 000061A3 3C7F                <1> 	cmp al, 1111111b
  7725 000061A5 730C                <1> 	jae donesearchpci
  7726 000061A7 FEC0                <1> 	inc al
  7727 000061A9 A2[25600000]        <1> 	mov [pcibus], al
  7728 000061AE E9ADFEFFFF          <1> 	jmp searchpci
  7729                              <1> donesearchpci:
  7730 000061B3 BBFFFFFFFF          <1> 	mov ebx, 0xFFFFFFFF
  7731 000061B8 31D2                <1> 	xor edx, edx
  7732 000061BA 8815[B6600000]      <1> 	mov [pcitype], dl
  7733 000061C0 8915[2A600000]      <1> 	mov [pcidevid], edx
  7734 000061C6 891D[2E600000]      <1> 	mov [pcidevidmask], ebx
  7735 000061CC C3                  <1> 	ret
  7736                              <1> foundpciaddr:
  7737 000061CD B010                <1> 	mov al, 0x10
  7738 000061CF A2[28600000]        <1> 	mov [pciregister], al
  7739 000061D4 803D[29600000]02    <1> 	cmp byte [pcireqtype], 2
  7740 000061DB 7443                <1> 	je findpcimemaddr
  7741                              <1> findpciioaddr:
  7742 000061DD E8A1000000          <1> 	call getpciaddr
  7743 000061E2 BAF80C0000          <1> 	mov edx, 0xCF8
  7744 000061E7 EF                  <1> 	out dx, eax
  7745 000061E8 BAFC0C0000          <1> 	mov edx, 0xCFC
  7746 000061ED ED                  <1> 	in eax, dx
  7747 000061EE 89C3                <1> 	mov ebx, eax
  7748 000061F0 81E301000000        <1> 	and ebx, 1
  7749 000061F6 81FB00000000        <1> 	cmp ebx, 0
  7750 000061FC 0F8468000000        <1> 	je near notpciioaddr
  7751 00006202 2D01000000          <1> 	sub eax, 1
  7752 00006207 89C2                <1> 	mov edx, eax
  7753 00006209 31DB                <1> 	xor ebx, ebx
  7754 0000620B 4B                  <1> 	dec ebx
  7755 0000620C 891D[2E600000]      <1> 	mov [pcidevidmask], ebx
  7756 00006212 43                  <1> 	inc ebx
  7757 00006213 881D[B6600000]      <1> 	mov [pcitype], bl
  7758 00006219 891D[2A600000]      <1> 	mov [pcidevid], ebx
  7759 0000621F C3                  <1> 	ret
  7760                              <1> findpcimemaddr:
  7761 00006220 E85E000000          <1> 	call getpciaddr
  7762 00006225 BAF80C0000          <1> 	mov edx, 0xCF8
  7763 0000622A EF                  <1> 	out dx, eax
  7764 0000622B BAFC0C0000          <1> 	mov edx, 0xCFC
  7765 00006230 ED                  <1> 	in eax, dx
  7766 00006231 89C3                <1> 	mov ebx, eax
  7767 00006233 81E301000000        <1> 	and ebx, 1
  7768 00006239 81FB01000000        <1> 	cmp ebx, 1
  7769 0000623F 0F8425000000        <1> 	je near notpciioaddr
  7770 00006245 89C2                <1> 	mov edx, eax
  7771 00006247 50                  <1> 	push eax
  7772 00006248 A1[3E020000]        <1> 	mov eax, [basecache]
  7773 0000624D C1E004              <1> 	shl eax, 4
  7774 00006250 29C2                <1> 	sub edx, eax
  7775 00006252 58                  <1> 	pop eax
  7776 00006253 31DB                <1> 	xor ebx, ebx
  7777 00006255 4B                  <1> 	dec ebx
  7778 00006256 891D[2E600000]      <1> 	mov [pcidevidmask], ebx
  7779 0000625C 43                  <1> 	inc ebx
  7780 0000625D 881D[B6600000]      <1> 	mov [pcitype], bl
  7781 00006263 891D[2A600000]      <1> 	mov [pcidevid], ebx
  7782 00006269 C3                  <1> 	ret
  7783                              <1> notpciioaddr:
  7784 0000626A A0[28600000]        <1> 	mov al, [pciregister]
  7785 0000626F 0404                <1> 	add al, 4
  7786 00006271 3C28                <1> 	cmp al, 0x28
  7787 00006273 0F870AFEFFFF        <1> 	ja near searchpciret
  7788 00006279 A2[28600000]        <1> 	mov [pciregister], al
  7789 0000627E E95AFFFFFF          <1> 	jmp findpciioaddr
  7790                              <1> getpciaddr:		;;puts it in eax and ebx
  7791 00006283 31C0                <1> 			xor eax, eax
  7792 00006285 BB00000080          <1> 			mov ebx, 0x80000000
  7793 0000628A A0[25600000]        <1> 			mov al, [pcibus]
  7794 0000628F C1E010              <1> 			shl eax, 16
  7795 00006292 01C3                <1> 			add ebx, eax
  7796 00006294 31C0                <1> 			xor eax, eax
  7797 00006296 A0[26600000]        <1> 			mov al, [pcidevice]
  7798 0000629B C1E00B              <1> 			shl eax, 11
  7799 0000629E 01C3                <1> 			add ebx, eax
  7800 000062A0 31C0                <1> 			xor eax, eax
  7801 000062A2 A0[27600000]        <1> 			mov al, [pcifunction]
  7802 000062A7 C1E008              <1> 			shl eax, 8
  7803 000062AA 01C3                <1> 			add ebx, eax
  7804 000062AC 31C0                <1> 			xor eax, eax
  7805 000062AE A0[28600000]        <1> 			mov al, [pciregister]
  7806 000062B3 01C3                <1> 			add ebx, eax
  7807 000062B5 89D8                <1> 			mov eax, ebx
  7808 000062B7 C3                  <1> 			ret
  7809                                      %include "source/disk.asm"
  7810                              <1> ;This loads files using the methods in the loaded driver
  7811                              <1> %ifdef disk.real
  7812                              <1> %include "source/drivers/disk/realmode.asm"
  7813                              <2> diskr:
  7814                              <2> 			;read from disk using real mode-it does not work with large files
  7815                              <2> 			;sector count in cl
  7816                              <2> 			;disk number in ch
  7817                              <2> 			;48 bit address with last 32 bits in ebx
  7818                              <2> 			;buffer in esi
  7819                              <2> 			;puts end of buffer in edi and end lba address in edx
  7820 000062B8 880D[E5620000]      <2> 	mov [sdlength], cl
  7821 000062BE 891D[E6620000]      <2> 	mov [sdaddress], ebx
  7822 000062C4 8935[44640000]      <2> 	mov [oldesireal], esi
  7823 000062CA 66BE[EA62]          <2> 	mov si, readdiskreal
  7824 000062CE 668935[0A0D0000]    <2> 	mov [realmodeptr], si
  7825 000062D5 BE[26630000]        <2> 	mov esi, backfromrealread
  7826 000062DA 8935[060D0000]      <2> 	mov [realmodereturn], esi
  7827 000062E0 E90AA9FFFF          <2> 	jmp realmode
  7828 000062E5 00                  <2> sdlength db 0
  7829 000062E6 00000000            <2> sdaddress dd 0
  7830                              <2> 
  7831                              <2> [BITS 16]
  7832                              <2> readdiskreal:
  7833 000062EA C706[1663]1000      <2> 	mov word [dlen], 0x10
  7834 000062F0 C706[1A63]0000      <2> 	mov word [daddress], 0
  7835 000062F6 C706[1C63]0001      <2> 	mov word [dsegm], 0x100
  7836 000062FC 66891E[1E63]        <2> 	mov [dlbaad], ebx
  7837 00006301 880E[1863]          <2> 	mov [dreadlen], cl
  7838                              <2> ReadHardDisk:
  7839 00006305 BE[1663]            <2> 	mov si, diskaddresspacket
  7840 00006308 31C0                <2> 	xor ax, ax
  7841 0000630A B442                <2> 	mov ah, 0x42
  7842 0000630C 8A16[1563]          <2> 	mov dl, [dnumber]
  7843 00006310 CD13                <2> 	int 0x13
  7844 00006312 72F1                <2> 	jc ReadHardDisk
  7845 00006314 C3                  <2> 	ret
  7846                              <2> 
  7847 00006315 80                  <2> dnumber db 0x80
  7848                              <2> diskaddresspacket:
  7849 00006316 10                  <2> dlen:	db 0x10 ;size of packet
  7850 00006317 00                  <2> 		db 0
  7851 00006318 7F00                <2> dreadlen:	dw 0x7F	;blocks to read=maximum
  7852 0000631A 0000                <2> daddress:	dw 0x0	;address 0
  7853 0000631C 0001                <2> dsegm:		dw 0x100	;segment
  7854                              <2> 		;start with known value for hd
  7855                              <2> dlbaad:
  7856 0000631E 00000000            <2> 	dd 0	;lba address
  7857 00006322 00000000            <2> 	dd 0
  7858                              <2> [BITS 32]
  7859                              <2> backfromrealread:
  7860 00006326 8B35[44640000]      <2> 	mov esi, [oldesireal]
  7861 0000632C 8B1D[E6620000]      <2> 	mov ebx, [sdaddress]
  7862 00006332 31C9                <2> 	xor ecx, ecx
  7863 00006334 8A0D[E5620000]      <2> 	mov cl, [sdlength]
  7864 0000633A 01CB                <2> 	add ebx, ecx
  7865 0000633C 66B80800            <2> 	mov ax, LINEAR_SEL
  7866 00006340 8EE0                <2> 	mov fs, ax
  7867 00006342 BF00100000          <2> 	mov edi, 0x1000
  7868 00006347 B200                <2> 	mov dl, 0
  7869 00006349 D0E1                <2> 	shl cl, 1
  7870                              <2> copyfromrmodedisk:
  7871 0000634B 648A07              <2> 	mov al, [fs:edi]
  7872 0000634E 8806                <2> 	mov [esi], al
  7873 00006350 47                  <2> 	inc edi
  7874 00006351 46                  <2> 	inc esi
  7875 00006352 FECA                <2> 	dec dl
  7876 00006354 80FA00              <2> 	cmp dl, 0
  7877 00006357 75F2                <2> 	jne copyfromrmodedisk
  7878 00006359 FEC9                <2> 	dec cl
  7879 0000635B B200                <2> 	mov dl, 0
  7880 0000635D 80F900              <2> 	cmp cl, 0
  7881 00006360 75E9                <2> 	jne copyfromrmodedisk
  7882 00006362 66B83000            <2> 	mov ax, NEW_DATA_SEL
  7883 00006366 8EE0                <2> 	mov fs, ax
  7884 00006368 89F7                <2> 	mov edi, esi
  7885 0000636A 8B35[44640000]      <2> 	mov esi, [oldesireal]
  7886 00006370 89DA                <2> 	mov edx, ebx
  7887 00006372 8B1D[E6620000]      <2> 	mov ebx, [sdaddress]
  7888 00006378 C3                  <2> 	ret
  7889                              <2> 	
  7890                              <1> %else
  7891                              <1> 	%ifdef disk.protected
  7892                              <1> 	%include "source/drivers/disk/pata.asm"
  7893                              <1> 	%endif
  7894                              <1> %endif
  7895                              <1> loadfile:	;loads a file with the name buffer's location in edi into location in esi
  7896                              <1> 			;returns with err code in edx and file end in edi
  7897 00006379 803F00              <1> 	cmp byte [edi], 0
  7898 0000637C 0F8448000000        <1> 	je near nofileload
  7899 00006382 89FA                <1> 	mov edx, edi
  7900 00006384 BB[2D9D0000]        <1> 	mov ebx, diskfileindex
  7901                              <1> nextnamechar:
  7902 00006389 8A07                <1> 	mov al, [edi]
  7903 0000638B 3C26                <1> 	cmp al, '&'
  7904 0000638D 7440                <1> 	je nullfile
  7905 0000638F 8A23                <1> 	mov ah, [ebx]
  7906 00006391 47                  <1> 	inc edi
  7907 00006392 43                  <1> 	inc ebx
  7908 00006393 88C1                <1> 	mov cl, al
  7909 00006395 08E1                <1> 	or cl, ah
  7910 00006397 80F900              <1> 	cmp cl, 0
  7911 0000639A 744E                <1> 	je equalfilenames
  7912 0000639C 80F920              <1> 	cmp cl, ' '
  7913 0000639F 7449                <1> 	je equalfilenames
  7914 000063A1 3C2A                <1> 	cmp al, '*'
  7915 000063A3 742B                <1> 	je equalfilenames2
  7916 000063A5 80FC00              <1> 	cmp ah, 0
  7917 000063A8 7410                <1> 	je nextfilename
  7918 000063AA 3C00                <1> 	cmp al, 0
  7919 000063AC 7404                <1> 	je getebxzero
  7920 000063AE 38E0                <1> 	cmp al, ah
  7921 000063B0 74D7                <1> 	je nextnamechar
  7922                              <1> getebxzero:
  7923 000063B2 8A23                <1> 	mov ah, [ebx]
  7924 000063B4 43                  <1> 	inc ebx
  7925 000063B5 80FC00              <1> 	cmp ah, 0
  7926 000063B8 75F8                <1> 	jne getebxzero
  7927                              <1> nextfilename:
  7928 000063BA 81C308000000        <1> 	add ebx, 8		;next descriptor
  7929 000063C0 89D7                <1> 	mov edi, edx
  7930 000063C2 81FB[E29E0000]      <1> 	cmp ebx, enddiskfileindex
  7931 000063C8 72BF                <1> 	jb nextnamechar
  7932                              <1> nofileload:
  7933 000063CA BA94010000          <1> 	mov edx, 404	;indicate not found error
  7934                              <1> nullfile:
  7935 000063CF C3                  <1> 	ret
  7936                              <1> equalfilenames2:
  7937 000063D0 81EB02000000        <1> 	sub ebx, 2
  7938                              <1> eqfilefind:
  7939 000063D6 43                  <1> 	inc ebx
  7940 000063D7 81FB[E29E0000]      <1> 	cmp ebx, enddiskfileindex
  7941 000063DD 0F83E7FFFFFF        <1> 	jae near nofileload
  7942 000063E3 8A03                <1> 	mov al, [ebx]
  7943 000063E5 3C00                <1> 	cmp al, 0
  7944 000063E7 75ED                <1> 	jne eqfilefind
  7945 000063E9 43                  <1> 	inc ebx
  7946                              <1> equalfilenames:
  7947 000063EA 8B4304              <1> 	mov eax, [ebx + 4] 	;put file size in eax
  7948 000063ED 8B1B                <1> 	mov ebx, [ebx]		;put file beginning in ebx
  7949 000063EF 031D[E69E0000]      <1> 	add ebx, [lbaad]	;add offset to solleros
  7950 000063F5 31C9                <1> 	xor ecx, ecx
  7951 000063F7 88C1                <1> 	mov cl, al			;get excess number of sectors
  7952 000063F9 C0E102              <1> 	shl cl, 2
  7953 000063FC C0E902              <1> 	shr cl, 2			;cut off at 64
  7954 000063FF 29C8                <1> 	sub eax, ecx		;get rid of excess sectors
  7955 00006401 B500                <1> 	mov ch, 0			;drive 0
  7956 00006403 C1E806              <1> 	shr eax, 6			;get number of 64 sector tracks
  7957                              <1> loaddiskfile:			;tracks in eax, excess sectors in cl, drive in ch, buffer in esi, address in ebx
  7958 00006406 A3[48640000]        <1> 	mov [filetracks], eax
  7959 0000640B 89F7                <1> 	mov edi, esi		;just in case cl is 0
  7960 0000640D 89DA                <1> 	mov edx, ebx
  7961 0000640F 80F900              <1> 	cmp cl, 0
  7962 00006412 7405                <1> 	je copytracksforfile
  7963 00006414 E89FFEFFFF          <1> 	call diskr	;take care of excess sectors
  7964                              <1> copytracksforfile:
  7965 00006419 A1[48640000]        <1> 	mov eax, [filetracks]
  7966 0000641E 3D00000000          <1> 	cmp eax, 0
  7967 00006423 7419                <1> 	je donecopyfile
  7968 00006425 48                  <1> 	dec eax
  7969 00006426 A3[48640000]        <1> 	mov [filetracks], eax
  7970 0000642B 89D3                <1> 	mov ebx, edx	;get end lba
  7971 0000642D B140                <1> 	mov cl, 0x40 ;for compatability with BIOS it uses 64 instead of 128
  7972 0000642F 8A2D[E59E0000]      <1> 	mov ch, [DriveNumber]
  7973 00006435 89FE                <1> 	mov esi, edi	;reset buffer
  7974 00006437 E87CFEFFFF          <1> 	call diskr
  7975 0000643C EBDB                <1> 	jmp copytracksforfile
  7976                              <1> donecopyfile:
  7977 0000643E BA00000000          <1> 	mov edx, 0	;no error
  7978 00006443 C3                  <1> 	ret
  7979                              <1> 
  7980 00006444 00000000            <1> oldesireal dd 0
  7981 00006448 00000000            <1> filetracks dd 0
  7982 0000644C 00                  <1> lbad1 db 0
  7983 0000644D 00                  <1> lbad2 db 0
  7984 0000644E 00                  <1> lbad3 db 0
  7985 0000644F 00                  <1> lbad4 db 0
  7986 00006450 00                  <1> lbad5 db 0
  7987 00006451 00                  <1> lbad6 db 0
  7988 00006452 6400                <1> segments dw 100
  7989                              <1> 
  7990                              <1> 
  7991                              <1> 	
  7992                                      %include "source/threads.asm"
  7993                              <1> %ifdef threads.included	
  7994                              <1> nwcmdst:
  7995 00006454 31C0                <1> 	xor eax, eax
  7996 00006456 BC[CAB00000]        <1> 	mov esp, stackend
  7997 0000645B A2[18650000]        <1> 	mov [threadson], al
  7998 00006460 A3[19650000]        <1> 	mov [currentthread], eax
  7999 00006465 0504000000          <1> 	add eax, 4
  8000 0000646A A3[14650000]        <1> 	mov [lastthread], eax
  8001 0000646F FB                  <1> 	sti
  8002 00006470 E95CC5FFFF          <1> 	jmp nwcmd
  8003                              <1> 
  8004                              <1> nomorethreadspace:
  8005 00006475 BE[8B640000]        <1> 	mov esi, nmts
  8006 0000647A E8BCB8FFFF          <1> 	call print
  8007 0000647F C605[18650000]00    <1> 	mov byte [threadson], 0
  8008 00006486 E946C5FFFF          <1> 	jmp nwcmd
  8009 0000648B 546872656164204F76- <1> nmts	db "Thread Overflow",10,0
  8010 00006494 6572666C6F770A00    <1>
  8011                              <1> 
  8012                              <1> nomorestackspace:
  8013 0000649C BE[A8640000]        <1> 	mov esi, nmss
  8014 000064A1 E895B8FFFF          <1> 	call print
  8015 000064A6 EBAC                <1> 	jmp nwcmdst
  8016 000064A8 537461636B204F7665- <1> nmss	db "Stack Overflow",10,0
  8017 000064B1 72666C6F770A00      <1>
  8018                              <1> 	
  8019                              <1> threadswitch:
  8020 000064B8 FA                  <1> 	cli
  8021 000064B9 60                  <1> 	pushad
  8022 000064BA BF[2CEC2900]        <1> 	mov edi, threadlist
  8023 000064BF A1[19650000]        <1> 	mov eax, [currentthread]
  8024 000064C4 40                  <1> 	inc eax
  8025 000064C5 A3[19650000]        <1> 	mov [currentthread], eax
  8026 000064CA 6648                <1> 	dec ax
  8027 000064CC C1E002              <1> 	shl eax, 2
  8028 000064CF 01C7                <1> 	add edi, eax
  8029 000064D1 8927                <1> 	mov [edi], esp
  8030 000064D3 81C704000000        <1> 	add edi, 4
  8031 000064D9 81FF[2CFC2900]      <1> 	cmp edi, threadlistend
  8032 000064DF 0F830D000000        <1> 	jae near nookespthread
  8033 000064E5 8B07                <1> 	mov eax, [edi]
  8034 000064E7 3D00000000          <1> 	cmp eax, 0
  8035 000064EC 0F8519000000        <1> 	jne near okespthread
  8036                              <1> nookespthread:
  8037 000064F2 BF[2CEC2900]        <1> 	mov edi, threadlist
  8038 000064F7 31C0                <1> 	xor eax, eax
  8039 000064F9 A3[19650000]        <1> 	mov [currentthread], eax
  8040 000064FE 8B07                <1> 	mov eax, [edi]
  8041 00006500 3D00000000          <1> 	cmp eax, 0
  8042 00006505 0F8449FFFFFF        <1> 	je near nwcmdst
  8043                              <1> okespthread:
  8044 0000650B 89C4                <1> 	mov esp, eax
  8045 0000650D B020                <1> 	mov al, 0x20
  8046 0000650F E620                <1> 	out 0x20, al
  8047 00006511 61                  <1> 	popad
  8048 00006512 FB                  <1> 	sti
  8049 00006513 CF                  <1> 	iret
  8050                              <1> 
  8051                              <1> %endif
  8052 00006514 04000000            <1> 	lastthread dd 4
  8053 00006518 00                  <1> 	threadson db 0
  8054 00006519 00000000            <1> 	currentthread dd 0
  8055                                  %ifdef gui.included
  8056                                      %include "source/gui/gui.asm"
  8057                              <1> guiboot:	;Let's see what I can do, I am going to try to make this as freestanding as possible
  8058 0000651D 31C0                <1> 	xor eax, eax
  8059 0000651F 31DB                <1> 	xor ebx, ebx
  8060 00006521 31C9                <1> 	xor ecx, ecx
  8061 00006523 31D2                <1> 	xor edx, edx
  8062 00006525 E8A7060000          <1> 	call guisetup
  8063                              <1> guiloop:
  8064 0000652A E8F2F0FFFF          <1> 	call cursorgui
  8065                              <1> guistart:
  8066 0000652F E8FBF6FFFF          <1> 	call getkey
  8067 00006534 C605[05790000]00    <1> 	mov byte [copygui], 0
  8068 0000653B EBF2                <1> 	jmp guistart
  8069                              <1> 
  8070                              <1> %include "source/gui/bmp.asm"
  8071                              <2> 
  8072                              <2> showbmp:
  8073 0000653D 668B06              <2> 	mov ax, [esi]
  8074 00006540 663D424D            <2> 	cmp ax, "BM"
  8075 00006544 0F85BB000000        <2> 	jne near endedbmp
  8076 0000654A 8B3D[44550000]      <2> 	mov edi, [physbaseptr]
  8077 00006550 6689D0              <2> 	mov ax, dx
  8078 00006553 6689CB              <2> 	mov bx, cx
  8079 00006556 31C9                <2> 	xor ecx, ecx
  8080 00006558 31D2                <2> 	xor edx, edx
  8081 0000655A 6689D9              <2> 	mov cx, bx
  8082 0000655D 6689C2              <2> 	mov dx, ax
  8083 00006560 01D7                <2> 	add edi, edx
  8084 00006562 01D7                <2> 	add edi, edx
  8085 00006564 31D2                <2> 	xor edx, edx
  8086 00006566 668B15[1C560000]    <2> 	mov dx, [resolutionx2]
  8087 0000656D 034E16              <2> 	add ecx, [esi + 22]
  8088                              <2> bmplocloop:
  8089 00006570 52                  <2> 	push edx
  8090 00006571 31C0                <2> 	xor eax, eax
  8091 00006573 6689D0              <2> 	mov ax, dx
  8092 00006576 F7E1                <2> 	mul ecx
  8093 00006578 5A                  <2> 	pop edx
  8094 00006579 663B0D[30550000]    <2> 	cmp cx, [resolutiony]
  8095 00006580 7609                <2> 	jbe .nofixy
  8096 00006582 31C9                <2> 	xor ecx, ecx
  8097 00006584 668B0D[30550000]    <2> 	mov cx, [resolutiony]
  8098                              <2> .nofixy:
  8099 0000658B 01C7                <2> 	add edi, eax
  8100 0000658D 8B5612              <2> 	mov edx, [esi + 18]
  8101 00006590 8B4E16              <2> 	mov ecx, [esi + 22]
  8102 00006593 8B460A              <2> 	mov eax, [esi + 10]
  8103 00006596 8B5E02              <2> 	mov ebx, [esi + 2]
  8104 00006599 01F3                <2> 	add ebx, esi
  8105 0000659B 891D[0B660000]      <2> 	mov [bmpend], ebx
  8106 000065A1 89D3                <2> 	mov ebx, edx
  8107 000065A3 01C6                <2> 	add esi, eax
  8108                              <2> ldxbmp2:
  8109 000065A5 31D2                <2> 	xor edx, edx
  8110 000065A7 668B15[2E550000]    <2> 	mov dx, [resolutionx]
  8111 000065AE 39D3                <2> 	cmp ebx, edx
  8112 000065B0 7702                <2> 	ja ldxbmp
  8113 000065B2 89DA                <2> 	mov edx, ebx
  8114                              <2> ldxbmp:
  8115 000065B4 668B06              <2> 	mov ax, [esi]
  8116 000065B7 668907              <2> 	mov [edi], ax
  8117 000065BA 81C702000000        <2> 	add edi, 2
  8118 000065C0 81C602000000        <2> 	add esi, 2
  8119 000065C6 3B35[0B660000]      <2> 	cmp esi, [bmpend]
  8120 000065CC 7737                <2> 	ja endedbmp
  8121 000065CE 4A                  <2> 	dec edx
  8122 000065CF 81FA00000000        <2> 	cmp edx, 0
  8123 000065D5 77DD                <2> 	ja ldxbmp
  8124 000065D7 31D2                <2> 	xor edx, edx
  8125 000065D9 668B15[2E550000]    <2> 	mov dx, [resolutionx]
  8126 000065E0 39D3                <2> 	cmp ebx, edx
  8127 000065E2 7610                <2> 	jbe .notover
  8128                              <2> .over:
  8129 000065E4 01DE                <2> 	add esi, ebx
  8130 000065E6 01DE                <2> 	add esi, ebx
  8131 000065E8 29D6                <2> 	sub esi, edx
  8132 000065EA 29D6                <2> 	sub esi, edx
  8133 000065EC 01DF                <2> 	add edi, ebx
  8134 000065EE 01DF                <2> 	add edi, ebx
  8135 000065F0 29D7                <2> 	sub edi, edx
  8136 000065F2 29D7                <2> 	sub edi, edx
  8137                              <2> .notover:
  8138 000065F4 29DF                <2> 	sub edi, ebx
  8139 000065F6 29DF                <2> 	sub edi, ebx
  8140 000065F8 29D7                <2> 	sub edi, edx
  8141 000065FA 29D7                <2> 	sub edi, edx
  8142 000065FC 49                  <2> 	dec ecx
  8143 000065FD 81F900000000        <2> 	cmp ecx, 0
  8144 00006603 77A0                <2> 	ja ldxbmp2
  8145                              <2> endedbmp:
  8146 00006605 E80E020000          <2> 	call switchmousepos2
  8147 0000660A C3                  <2> 	ret
  8148                              <2> 	
  8149 0000660B 00000000            <2> 	bmpend dd 0
  8150                              <1> %include "source/gui/circle.asm"
  8151                              <2> drawcircle:	;center in (dx,cx), color in si, radius in ax
  8152 0000660F 663D0000            <2> 	cmp ax, 0
  8153 00006613 770A                <2> 	ja .nozerocircle
  8154 00006615 E8001B0000          <2> 	call putpixel	;the easiest circle ever
  8155 0000661A E9F4000000          <2> 	jmp .done
  8156                              <2> .nozerocircle:
  8157 0000661F 55                  <2> 	push ebp
  8158 00006620 6689F5              <2> 	mov bp, si
  8159 00006623 6650                <2> 	push ax
  8160 00006625 E8311B0000          <2> 	call getpixelmem
  8161 0000662A 31C0                <2> 	xor eax, eax
  8162 0000662C 6658                <2> 	pop ax
  8163 0000662E BE01000000          <2> 	mov esi, 1
  8164 00006633 29C6                <2> 	sub esi, eax
  8165 00006635 89C1                <2> 	mov ecx, eax
  8166 00006637 31C0                <2> 	xor eax, eax
  8167 00006639 66A1[1C560000]      <2> 	mov ax, [resolutionx2]
  8168 0000663F F7E1                <2> 	mul ecx
  8169 00006641 50                  <2> 	push eax
  8170 00006642 31D2                <2> 	xor edx, edx
  8171 00006644 01C7                <2> 	add edi, eax
  8172 00006646 66892F              <2> 	mov [edi], bp
  8173 00006649 29C7                <2> 	sub edi, eax
  8174 0000664B 29C7                <2> 	sub edi, eax
  8175 0000664D 66892F              <2> 	mov [edi], bp
  8176 00006650 01C7                <2> 	add edi, eax
  8177 00006652 D1E1                <2> 	shl ecx, 1
  8178 00006654 01CF                <2> 	add edi, ecx
  8179 00006656 66892F              <2> 	mov [edi], bp
  8180 00006659 D1E1                <2> 	shl ecx, 1
  8181 0000665B 29CF                <2> 	sub edi, ecx
  8182 0000665D 66892F              <2> 	mov [edi], bp
  8183 00006660 D1E9                <2> 	shr ecx, 1
  8184 00006662 01CF                <2> 	add edi, ecx
  8185 00006664 D1E9                <2> 	shr ecx, 1
  8186 00006666 B802000000          <2> 	mov eax, 2
  8187 0000666B F7E1                <2> 	mul ecx
  8188 0000666D 48                  <2> 	dec eax
  8189 0000666E F7D0                <2> 	not eax ;make it negative
  8190 00006670 A3[18670000]        <2> 	mov [.ddF_y], eax
  8191 00006675 58                  <2> 	pop eax
  8192 00006676 BB01000000          <2> 	mov ebx, 1
  8193 0000667B 891D[14670000]      <2> 	mov [.ddF_x], ebx
  8194 00006681 4B                  <2> 	dec ebx
  8195 00006682 31D2                <2> 	xor edx, edx
  8196                              <2> .lp:	;it starts this with the center in edi
  8197                              <2> 		;color in bp
  8198                              <2> 		;ddF_x in memor
  8199                              <2> 		;x*resolutionx2 in ebx
  8200                              <2> 		;x in edx
  8201                              <2> 		;ddF_y in memory
  8202                              <2> 		;y*resolutionx2 in eax
  8203                              <2> 		;f in esi
  8204                              <2> 		;y in ecx
  8205 00006684 81FE00000080        <2> 	cmp esi, 0x80000000 ;this means it is not negative
  8206 0000668A 7717                <2> 	ja	.noddF_y
  8207 0000668C 49                  <2> 	dec ecx
  8208 0000668D 2B05[1C560000]      <2> 	sub eax, [resolutionx2]
  8209 00006693 8105[18670000]0200- <2> 	add dword [.ddF_y], 2
  8210 0000669B 0000                <2>
  8211 0000669D 0335[18670000]      <2> 	add esi, [.ddF_y]
  8212                              <2> .noddF_y:
  8213 000066A3 42                  <2> 	inc edx
  8214 000066A4 031D[1C560000]      <2> 	add ebx, [resolutionx2]
  8215 000066AA 8105[14670000]0200- <2> 	add dword [.ddF_x], 2
  8216 000066B2 0000                <2>
  8217 000066B4 0335[14670000]      <2> 	add esi, [.ddF_x]
  8218                              <2> 
  8219 000066BA D1E2                <2> 	shl edx, 1
  8220 000066BC D1E1                <2> 	shl ecx, 1
  8221 000066BE 01D7                <2> 	add edi, edx
  8222 000066C0 01C7                <2> 	add edi, eax
  8223 000066C2 66892F              <2> 	mov [edi], bp
  8224 000066C5 D1E2                <2> 	shl edx, 1
  8225 000066C7 29D7                <2> 	sub edi, edx
  8226 000066C9 66892F              <2> 	mov [edi], bp
  8227 000066CC 01D7                <2> 	add edi, edx
  8228 000066CE D1E0                <2> 	shl eax, 1
  8229 000066D0 29C7                <2> 	sub edi, eax
  8230 000066D2 66892F              <2> 	mov [edi], bp
  8231 000066D5 29D7                <2> 	sub edi, edx
  8232 000066D7 66892F              <2> 	mov [edi], bp
  8233 000066DA D1EA                <2> 	shr edx, 1
  8234 000066DC D1E8                <2> 	shr eax, 1
  8235 000066DE 01C7                <2> 	add edi, eax
  8236 000066E0 01D7                <2> 	add edi, edx
  8237                              <2> 	
  8238 000066E2 01DF                <2> 	add edi, ebx
  8239 000066E4 01CF                <2> 	add edi, ecx
  8240 000066E6 66892F              <2> 	mov [edi], bp
  8241 000066E9 D1E1                <2> 	shl ecx, 1
  8242 000066EB 29CF                <2> 	sub edi, ecx
  8243 000066ED 66892F              <2> 	mov [edi], bp
  8244 000066F0 D1E3                <2> 	shl ebx, 1
  8245 000066F2 29DF                <2> 	sub edi, ebx
  8246 000066F4 01CF                <2> 	add edi, ecx
  8247 000066F6 66892F              <2> 	mov [edi], bp
  8248 000066F9 29CF                <2> 	sub edi, ecx
  8249 000066FB 66892F              <2> 	mov [edi], bp
  8250 000066FE D1EB                <2> 	shr ebx, 1
  8251 00006700 D1E9                <2> 	shr ecx, 1
  8252 00006702 01DF                <2> 	add edi, ebx
  8253 00006704 01CF                <2> 	add edi, ecx
  8254 00006706 D1EA                <2> 	shr edx, 1
  8255 00006708 D1E9                <2> 	shr ecx, 1
  8256 0000670A 39CA                <2> 	cmp edx, ecx
  8257 0000670C 0F8272FFFFFF        <2> 	jb .lp
  8258 00006712 5D                  <2> 	pop ebp
  8259                              <2> .done:
  8260 00006713 C3                  <2> 	ret
  8261                              <2> 	
  8262 00006714 00000000            <2> .ddF_x dd 0
  8263 00006718 00000000            <2> .ddF_y dd 0
  8264                              <1> %include "source/gui/cursor.asm"
  8265                              <2> clearmousecursor:
  8266 0000671C BE[FD6A0000]        <2> 		mov esi, background
  8267 00006721 8B3D[44550000]      <2> 		mov edi, [physbaseptr]
  8268 00006727 31D2                <2> 		xor edx, edx
  8269 00006729 31C9                <2> 		xor ecx, ecx
  8270 0000672B 668B15[0E580000]    <2> 		mov dx, [lastmouseposition]
  8271 00006732 668B0D[10580000]    <2> 		mov cx, [lastmouseposition + 2]
  8272 00006739 01D7                <2> 		add edi, edx
  8273 0000673B 31D2                <2> 		xor edx, edx
  8274 0000673D 668B15[1C560000]    <2> 		mov dx, [resolutionx2]
  8275 00006744 81F900000000        <2> 		cmp ecx, 0
  8276 0000674A 7408                <2> 		je .nomul
  8277 0000674C 52                  <2> 		push edx
  8278 0000674D 89D0                <2> 		mov eax, edx
  8279 0000674F F7E1                <2> 		mul ecx
  8280 00006751 01C7                <2> 		add edi, eax
  8281 00006753 5A                  <2> 		pop edx
  8282                              <2> .nomul:
  8283                              <2> %ifdef 	gui.background
  8284 00006754 813D[CF6A0000]0000- <2> 		cmp dword [backgroundimage], 0
  8285 0000675C 0000                <2>
  8286 0000675E 7438                <2> 		je .noyclr
  8287 00006760 8B35[CF6A0000]      <2> 		mov esi, [backgroundimage]
  8288 00006766 2B3D[44550000]      <2> 		sub edi, [physbaseptr]
  8289 0000676C 01FE                <2> 		add esi, edi
  8290 0000676E 033D[44550000]      <2> 		add edi, [physbaseptr]
  8291                              <2> .backlp:
  8292 00006774 31DB                <2> 		xor ebx, ebx
  8293                              <2> .noyback:
  8294 00006776 8B041E              <2> 		mov eax, [esi + ebx]
  8295 00006779 89041F              <2> 		mov [edi + ebx], eax
  8296 0000677C 81C304000000        <2> 		add ebx, 4
  8297 00006782 81FB10000000        <2> 		cmp ebx, 16
  8298 00006788 75EC                <2> 		jne .noyback
  8299 0000678A 01D7                <2> 		add edi, edx
  8300 0000678C 01D6                <2> 		add esi, edx
  8301 0000678E 6641                <2> 		inc cx
  8302 00006790 6681F91000          <2> 		cmp cx, 16
  8303 00006795 72DD                <2> 		jb .backlp
  8304 00006797 C3                  <2> 		ret
  8305                              <2> %endif
  8306                              <2> .noyclr:
  8307 00006798 668B06              <2> 		mov ax, [esi]
  8308 0000679B C1C010              <2> 		rol eax, 16
  8309 0000679E 668B06              <2> 		mov ax, [esi]
  8310 000067A1 8907                <2> 		mov [edi], eax
  8311 000067A3 894704              <2> 		mov [edi + 4], eax
  8312 000067A6 894708              <2> 		mov [edi + 8], eax
  8313 000067A9 89470C              <2> 		mov [edi + 12], eax
  8314 000067AC 01D7                <2> 		add edi, edx
  8315 000067AE 6641                <2> 		inc cx
  8316 000067B0 6681F91000          <2> 		cmp cx, 16
  8317 000067B5 72E1                <2> 		jb .noyclr
  8318 000067B7 C3                  <2> 		ret
  8319                              <2> 
  8320                              <2> switchmousepos:		;;switch were the mouse is located
  8321 000067B8 BE[BFE52800]        <2> 		mov esi, mousecolorbuf
  8322 000067BD 8B3D[44550000]      <2> 		mov edi, [physbaseptr]
  8323 000067C3 31D2                <2> 		xor edx, edx
  8324 000067C5 31C9                <2> 		xor ecx, ecx
  8325 000067C7 668B15[0E580000]    <2> 		mov dx, [lastmouseposition]
  8326 000067CE 668B0D[10580000]    <2> 		mov cx, [lastmouseposition + 2]
  8327 000067D5 01D7                <2> 		add edi, edx
  8328 000067D7 31D2                <2> 		xor edx, edx
  8329 000067D9 668B15[1C560000]    <2> 		mov dx, [resolutionx2]
  8330 000067E0 6681F90000          <2> 		cmp cx, 0
  8331 000067E5 740B                <2> 		je noswmsy
  8332 000067E7 01D7                <2> swmsy:		add edi, edx
  8333 000067E9 6649                <2> 		dec cx
  8334 000067EB 6681F90000          <2> 		cmp cx, 0
  8335 000067F0 75F5                <2> 		jne swmsy
  8336 000067F2 8B06                <2> noswmsy:	mov eax, [esi]
  8337 000067F4 8B5E04              <2> 		mov ebx, [esi + 4]
  8338 000067F7 8907                <2> 		mov [edi], eax
  8339 000067F9 895F04              <2> 		mov [edi + 4], ebx
  8340 000067FC 8B4608              <2> 		mov eax, [esi + 8]
  8341 000067FF 8B5E0C              <2> 		mov ebx, [esi + 12]
  8342 00006802 894708              <2> 		mov [edi + 8], eax
  8343 00006805 895F0C              <2> 		mov [edi + 12], ebx
  8344 00006808 01D7                <2> 		add edi, edx
  8345 0000680A 81C610000000        <2> 		add esi, 16
  8346 00006810 81FE[BFE62800]      <2> 		cmp esi, mcolorend
  8347 00006816 72DA                <2> 		jb noswmsy
  8348                              <2> 		
  8349                              <2> switchmousepos2:
  8350 00006818 BE[BFE52800]        <2> 		mov esi, mousecolorbuf
  8351 0000681D 8B3D[44550000]      <2> 		mov edi, [physbaseptr]
  8352 00006823 31D2                <2> 		xor edx, edx
  8353 00006825 31C9                <2> 		xor ecx, ecx
  8354 00006827 668B15[12580000]    <2> 		mov dx, [mousecursorposition]
  8355 0000682E 668B0D[14580000]    <2> 		mov cx, [mousecursorposition + 2]
  8356 00006835 01D7                <2> 		add edi, edx
  8357 00006837 31D2                <2> 		xor edx, edx
  8358 00006839 668B15[1C560000]    <2> 		mov dx, [resolutionx2]
  8359 00006840 6681F90000          <2> 		cmp cx, 0
  8360 00006845 740B                <2> 		je noswmsy2
  8361 00006847 01D7                <2> swmsy2:		add edi, edx
  8362 00006849 6649                <2> 		dec cx
  8363 0000684B 6681F90000          <2> 		cmp cx, 0
  8364 00006850 75F5                <2> 		jne swmsy2
  8365 00006852 8B07                <2> noswmsy2:	mov eax, [edi]
  8366 00006854 8B5F04              <2> 		mov ebx, [edi + 4]
  8367 00006857 8906                <2> 		mov [esi], eax
  8368 00006859 895E04              <2> 		mov [esi + 4], ebx
  8369 0000685C 8B4708              <2> 		mov eax, [edi + 8]
  8370 0000685F 8B5F0C              <2> 		mov ebx, [edi + 12]
  8371 00006862 894608              <2> 		mov [esi + 8], eax
  8372 00006865 895E0C              <2> 		mov [esi + 12], ebx
  8373 00006868 01D7                <2> 		add edi, edx
  8374 0000686A 81C610000000        <2> 		add esi, 16
  8375 00006870 81FE[BFE62800]      <2> 		cmp esi, mcolorend
  8376 00006876 72DA                <2> 		jb noswmsy2
  8377 00006878 C3                  <2> 		ret
  8378                              <2> 		
  8379                              <1> %include "source/gui/icon.asm"
  8380 00006879 0000                <2> iconcolor dw 0
  8381                              <2> 	showicon:	;;icon in si, position in (dx,cx), selected in ax, code in bx
  8382 0000687B A2[83810000]        <2> 		mov [iconselected], al
  8383 00006880 8025[83810000]01    <2> 		and byte [iconselected], 1
  8384 00006887 B401                <2> 		mov ah, 1
  8385 00006889 E8F4150000          <2> 		call graphicsadd
  8386                              <2> 	showicon2:
  8387 0000688E 8B3D[44550000]      <2> 		mov edi, [physbaseptr]
  8388 00006894 6601D2              <2> 		add dx, dx
  8389 00006897 663B15[1C560000]    <2> 		cmp dx, [resolutionx2]
  8390 0000689E 720C                <2> 		jb screenxgood
  8391 000068A0 668B15[1C560000]    <2> 		mov dx, [resolutionx2]
  8392 000068A7 6681EA4000          <2> 		sub dx, 64
  8393                              <2> 	screenxgood:
  8394 000068AC 6681F90000          <2> 		cmp cx, 0
  8395 000068B1 742B                <2> 		je noscreenygoodchk
  8396 000068B3 663B0D[30550000]    <2> 		cmp cx, [resolutiony]
  8397 000068BA 720C                <2> 		jb screenygood
  8398 000068BC 668B0D[30550000]    <2> 		mov cx, [resolutiony]
  8399 000068C3 6681E92000          <2> 		sub cx, 32
  8400                              <2> 	screenygood:
  8401 000068C8 50                  <2> 		push eax
  8402 000068C9 52                  <2> 		push edx
  8403 000068CA 31C0                <2> 		xor eax, eax
  8404 000068CC 31DB                <2> 		xor ebx, ebx
  8405 000068CE 668B1D[1C560000]    <2> 		mov bx, [resolutionx2]
  8406 000068D5 6689C8              <2> 		mov ax, cx
  8407 000068D8 F7E3                <2> 		mul ebx
  8408 000068DA 01C7                <2> 		add edi, eax
  8409 000068DC 5A                  <2> 		pop edx
  8410 000068DD 58                  <2> 		pop eax
  8411                              <2> 	noscreenygoodchk:
  8412 000068DE 31DB                <2> 		xor ebx, ebx
  8413 000068E0 6689D3              <2> 		mov bx, dx
  8414 000068E3 01DF                <2> 		add edi, ebx
  8415 000068E5 6631C9              <2> 		xor cx, cx
  8416 000068E8 668B06              <2> 		mov ax, [esi]
  8417 000068EB 81C602000000        <2> 		add esi, 2
  8418 000068F1 66A3[79680000]      <2> 		mov [iconcolor], ax
  8419                              <2> 	writeicon:
  8420 000068F7 8B06                <2> 		mov eax, [esi]
  8421 000068F9 D1C0                <2> 		rol eax, 1
  8422 000068FB 30C9                <2> 		xor cl, cl
  8423                              <2> 	writeiconline:
  8424 000068FD B201                <2> 		mov dl, 1
  8425 000068FF 20C2                <2> 		and dl, al
  8426 00006901 3215[83810000]      <2> 		xor dl, [iconselected]
  8427 00006907 668B1D[FD6A0000]    <2> 		mov bx, [background]
  8428 0000690E 66891F              <2> 		mov [edi], bx
  8429 00006911 80FA00              <2> 		cmp dl, 0
  8430 00006914 740A                <2> 		je noiconline
  8431 00006916 668B15[79680000]    <2> 		mov dx, [iconcolor]
  8432 0000691D 668917              <2> 		mov [edi], dx
  8433                              <2> 	noiconline:
  8434 00006920 81C702000000        <2> 		add edi, 2
  8435 00006926 D1C0                <2> 		rol eax, 1
  8436 00006928 FEC1                <2> 		inc cl
  8437 0000692A 80F920              <2> 		cmp cl, 32
  8438 0000692D 72CE                <2> 		jb writeiconline
  8439 0000692F 81C604000000        <2> 		add esi, 4
  8440 00006935 FEC5                <2> 		inc ch
  8441 00006937 31D2                <2> 		xor edx, edx
  8442 00006939 668B15[1C560000]    <2> 		mov dx, [resolutionx2]
  8443 00006940 01D7                <2> 		add edi, edx
  8444 00006942 81EF40000000        <2> 		sub edi, 64
  8445 00006948 80FD20              <2> 		cmp ch, 32
  8446 0000694B 72AA                <2> 		jb writeicon
  8447 0000694D 31C0                <2> 		xor eax, eax
  8448 0000694F C3                  <2> 		ret
  8449                              <1> %include "source/gui/line.asm"
  8450                              <2> drawline:	;from (bx,ax) to (dx,cx), color in si
  8451 00006950 668935[726A0000]    <2> 	mov [.color], si
  8452 00006957 C605[746A0000]00    <2> 	mov byte [.steep], 0
  8453 0000695E C605[756A0000]00    <2> 	mov byte [.yreversed], 0
  8454 00006965 E907000000          <2> 	jmp .notsteep
  8455                              <2> .steeploop:
  8456 0000696A C605[746A0000]01    <2> 	mov byte [.steep], 1
  8457                              <2> .notsteep:
  8458 00006971 31FF                <2> 	xor edi, edi
  8459 00006973 31F6                <2> 	xor esi, esi
  8460 00006975 6639DA              <2> 	cmp dx, bx
  8461 00006978 7705                <2> 	ja .noreversex
  8462 0000697A 6687D3              <2> 	xchg dx, bx
  8463 0000697D 6691                <2> 	xchg cx, ax
  8464                              <2> .noreversex:
  8465 0000697F 6689D7              <2> 	mov di, dx
  8466 00006982 6629DF              <2> 	sub di, bx
  8467                              <2> 	
  8468 00006985 6639C1              <2> 	cmp cx, ax
  8469 00006988 720B                <2> 	jb .reversey
  8470 0000698A 6689CE              <2> 	mov si, cx
  8471 0000698D 6629C6              <2> 	sub si, ax
  8472 00006990 E90D000000          <2> 	jmp .normal
  8473                              <2> .reversey:
  8474 00006995 C605[756A0000]02    <2> 	mov byte [.yreversed], 2
  8475 0000699C 6689C6              <2> 	mov si, ax
  8476 0000699F 6629CE              <2> 	sub si, cx	
  8477                              <2> .normal:
  8478 000069A2 6687CA              <2> 	xchg cx, dx
  8479 000069A5 6693                <2> 	xchg ax, bx
  8480 000069A7 6639FE              <2> 	cmp si, di
  8481 000069AA 77BE                <2> 	ja .steeploop
  8482 000069AC 6687CA              <2> 	xchg cx, dx
  8483 000069AF 6693                <2> 	xchg ax, bx
  8484                              <2> 	
  8485 000069B1 6691                <2> 	xchg ax, cx
  8486 000069B3 6687DA              <2> 	xchg bx, dx
  8487 000069B6 66893D[786A0000]    <2> 	mov [.xdelta], di
  8488 000069BD 668935[7A6A0000]    <2> 	mov [.ydelta], si
  8489 000069C4 668B35[726A0000]    <2> 	mov si, [.color]
  8490 000069CB 66891D[766A0000]    <2> 	mov [.endline], bx
  8491 000069D2 6652                <2> 	push dx
  8492 000069D4 6651                <2> 	push cx
  8493 000069D6 6687CA              <2> 	xchg cx, dx
  8494 000069D9 803D[746A0000]01    <2> 	cmp byte [.steep], 1
  8495 000069E0 7403                <2> 	je .xchg
  8496 000069E2 6687D1              <2> 	xchg dx, cx
  8497                              <2> .xchg:
  8498 000069E5 E871170000          <2> 	call getpixelmem	;get pointer to pixel in edi from (dx,cx)
  8499 000069EA 6659                <2> 	pop cx
  8500 000069EC 665A                <2> 	pop dx
  8501 000069EE 31C0                <2> 	xor eax, eax
  8502 000069F0 66A1[786A0000]      <2> 	mov ax, [.xdelta]
  8503 000069F6 66D1E8              <2> 	shr ax, 1
  8504 000069F9 8A0D[746A0000]      <2> 	mov cl, [.steep]
  8505 000069FF 0A0D[756A0000]      <2> 	or cl, [.yreversed]
  8506 00006A05 55                  <2> 	push ebp
  8507 00006A06 668B2D[766A0000]    <2> 	mov bp, [.endline]
  8508 00006A0D 6629D5              <2> 	sub bp, dx
  8509 00006A10 668B15[7A6A0000]    <2> 	mov dx, [.ydelta]
  8510                              <2> .lp:
  8511 00006A17 668937              <2> 	mov [edi], si
  8512 00006A1A 6639D0              <2> 	cmp ax, dx
  8513 00006A1D 7332                <2> 	jae .noaddx
  8514 00006A1F F6C102              <2> 	test cl, 2
  8515 00006A22 7414                <2> 	jz .nodecy
  8516 00006A24 F6C101              <2> 	test cl, 1
  8517 00006A27 7509                <2> 	jnz .steepy
  8518 00006A29 29DF                <2> 	sub edi, ebx
  8519 00006A2B 29DF                <2> 	sub edi, ebx
  8520 00006A2D E906000000          <2> 	jmp .nodecy
  8521                              <2> .steepy:
  8522 00006A32 81EF04000000        <2> 	sub edi, 4
  8523                              <2> .nodecy:
  8524 00006A38 660305[786A0000]    <2> 	add ax, [.xdelta]
  8525 00006A3F F6C101              <2> 	test cl, 1
  8526 00006A42 7507                <2> 	jnz .steepx
  8527 00006A44 01DF                <2> 	add edi, ebx
  8528 00006A46 E906000000          <2> 	jmp .noaddx
  8529                              <2> .steepx:
  8530 00006A4B 81C702000000        <2> 	add edi, 2
  8531                              <2> .noaddx:
  8532 00006A51 6629D0              <2> 	sub ax, dx
  8533 00006A54 664D                <2> 	dec bp
  8534 00006A56 81C702000000        <2> 	add edi, 2
  8535 00006A5C F6C101              <2> 	test cl, 1
  8536 00006A5F 7408                <2> 	jz .nosteepx
  8537 00006A61 81EF02000000        <2> 	sub edi, 2
  8538 00006A67 01DF                <2> 	add edi, ebx
  8539                              <2> .nosteepx:
  8540 00006A69 6681FD0000          <2> 	cmp bp, 0
  8541 00006A6E 75A7                <2> 	jne .lp
  8542                              <2> .done:
  8543 00006A70 5D                  <2> 	pop ebp
  8544 00006A71 C3                  <2> 	ret
  8545                              <2> 	
  8546 00006A72 0000                <2> .color dw 0
  8547 00006A74 00                  <2> .steep db 0
  8548 00006A75 00                  <2> .yreversed db 0
  8549 00006A76 0000                <2> .endline dw 0
  8550 00006A78 0000                <2> .xdelta dw 0
  8551 00006A7A 0000                <2> .ydelta dw 0
  8552                              <1> %include "source/gui/refresh.asm"
  8553                              <2> guiclear:
  8554 00006A7C 8B3D[44550000]      <2> 	mov edi, [physbaseptr]
  8555 00006A82 668B15[2E550000]    <2> 	mov dx, [resolutionx]
  8556 00006A89 668B0D[30550000]    <2> 	mov cx, [resolutiony]
  8557                              <2> %ifdef gui.background
  8558 00006A90 813D[CF6A0000]0000- <2> 	cmp dword [backgroundimage], 0
  8559 00006A98 0000                <2>
  8560 00006A9A 7437                <2> 	je guiclear.noback
  8561 00006A9C 8B35[CF6A0000]      <2> 		mov esi, [backgroundimage]
  8562                              <2> 	.lp:
  8563                              <2> 		;movdqa xmm0, [esi]	;the next 4 lines are for SSE
  8564                              <2> 		;movdqa [edi], xmm0
  8565                              <2> 		;add esi, 16
  8566                              <2> 		;add edi, 16
  8567                              <2> 		;sub dx, 8
  8568 00006AA2 8B06                <2> 		mov eax, [esi]
  8569 00006AA4 8907                <2> 		mov [edi], eax
  8570 00006AA6 81C604000000        <2> 		add esi, 4
  8571 00006AAC 81C704000000        <2> 		add edi, 4
  8572 00006AB2 6681EA0200          <2> 		sub dx, 2
  8573 00006AB7 6681FA0000          <2> 		cmp dx, 0
  8574 00006ABC 77E4                <2> 		ja .lp
  8575 00006ABE 6649                <2> 		dec cx
  8576 00006AC0 668B15[2E550000]    <2> 		mov dx, [resolutionx]
  8577 00006AC7 6681F90000          <2> 		cmp cx, 0
  8578 00006ACC 77D4                <2> 		ja .lp
  8579 00006ACE C3                  <2> 		ret
  8580 00006ACF 00000000            <2> 	backgroundimage dd 0
  8581                              <2> %endif
  8582                              <2> guiclear.noback:
  8583 00006AD3 A1[FD6A0000]        <2> 	mov eax, [background]
  8584                              <2> guiclearloop:
  8585 00006AD8 8907                <2> 	mov [edi], eax
  8586 00006ADA 81C704000000        <2> 	add edi, 4
  8587 00006AE0 6681EA0200          <2> 	sub dx, 2
  8588 00006AE5 6681FA0000          <2> 	cmp dx, 0
  8589 00006AEA 77EC                <2> 	ja guiclearloop
  8590 00006AEC 6649                <2> 	dec cx
  8591 00006AEE 668B15[2E550000]    <2> 	mov dx, [resolutionx]
  8592 00006AF5 6681F90000          <2> 	cmp cx, 0
  8593 00006AFA 77DC                <2> 	ja guiclearloop
  8594 00006AFC C3                  <2> 	ret
  8595                              <2> 
  8596 00006AFD CF7B<rept>          <2> background times 2 dw 0111101111001111b
  8597                              <2> 
  8598                              <2> reloadallgraphics:
  8599 00006B01 BF[BFCF0000]        <2> 		mov edi, graphicstable
  8600                              <2> reloadgraphicsloop:
  8601 00006B06 8B7702              <2> 		mov esi, [edi + 2]
  8602 00006B09 668B5706            <2> 		mov dx, [edi + 6]
  8603 00006B0D 668B4F08            <2> 		mov cx, [edi + 8]
  8604 00006B11 668B07              <2> 		mov ax, [edi]
  8605 00006B14 668B5F0A            <2> 		mov bx, [edi + 10]
  8606 00006B18 893D[6E7E0000]      <2> 		mov [grpctblpos], edi
  8607 00006B1E 3B3D[0F790000]      <2> 		cmp edi, [dragging]
  8608 00006B24 741E                <2> 		je loadedgraphic
  8609 00006B26 663D0100            <2> 		cmp ax, 1
  8610 00006B2A 0F8436000000        <2> 		je near icongraphic
  8611 00006B30 663D0200            <2> 		cmp ax, 2
  8612 00006B34 0F843C000000        <2> 		je near stringgraphic
  8613 00006B3A 663D0300            <2> 		cmp ax, 3
  8614 00006B3E 0F8416000000        <2> 		je near windowgraphic
  8615 00006B44 8B3D[6E7E0000]      <2> loadedgraphic:  mov edi, [grpctblpos]
  8616 00006B4A 81C710000000        <2> 		add edi, 16
  8617 00006B50 81FF[BFD10000]      <2> 		cmp edi, graphicstableend
  8618 00006B56 732E                <2> 		jae donereloadgraphics
  8619 00006B58 EBAC                <2> 		jmp reloadgraphicsloop
  8620                              <2> windowgraphic:
  8621 00006B5A E87C080000          <2> 		call showwindow2
  8622 00006B5F E880B2FFFF          <2> 		call cleardouble
  8623 00006B64 EBDE                <2> 		jmp loadedgraphic
  8624 00006B66 80E301              <2> icongraphic:	and bl, 1
  8625 00006B69 881D[83810000]      <2> 		mov [iconselected], bl
  8626 00006B6F E81AFDFFFF          <2> 		call showicon2
  8627 00006B74 EBCE                <2> 		jmp loadedgraphic
  8628 00006B76 80E301              <2> stringgraphic:  and bl, 1
  8629 00006B79 881D[0B790000]      <2> 		mov [mouseselecton], bl
  8630 00006B7F E843050000          <2> 		call showstring2
  8631 00006B84 EBBE                <2> 		jmp loadedgraphic
  8632                              <2> donereloadgraphics:
  8633 00006B86 8B3D[0F790000]      <2> 		mov edi, [dragging]
  8634 00006B8C 81FF[BFCF0000]      <2> 		cmp edi, graphicstable
  8635 00006B92 7226                <2> 		jb notcorrectdrag
  8636 00006B94 668B07              <2> 		mov ax, [edi]
  8637 00006B97 8B7702              <2> 		mov esi, [edi + 2]
  8638 00006B9A 668B5706            <2> 		mov dx, [edi + 6]
  8639 00006B9E 668B4F08            <2> 		mov cx, [edi + 8]
  8640 00006BA2 668B5F0A            <2> 		mov bx, [edi + 10]
  8641 00006BA6 663D0100            <2> 		cmp ax, 1
  8642 00006BAA 750F                <2> 		jne noticondragging
  8643 00006BAC 80E301              <2> 		and bl, 1
  8644 00006BAF 881D[83810000]      <2> 		mov [iconselected], bl
  8645 00006BB5 E8D4FCFFFF          <2> 		call showicon2
  8646                              <2> notcorrectdrag:
  8647 00006BBA C3                  <2> 		ret
  8648                              <2> 
  8649                              <2> 	noticondragging:
  8650 00006BBB 663D0200            <2> 		cmp ax, 2
  8651 00006BBF 75F9                <2> 		jne notcorrectdrag
  8652 00006BC1 80E301              <2> 		and bl, 1
  8653 00006BC4 881D[0B790000]      <2> 		mov [mouseselecton], bl
  8654 00006BCA E8F8040000          <2> 		call showstring2
  8655 00006BCF EBE9                <2> 		jmp notcorrectdrag
  8656                              <1> %include "source/gui/startup.asm"
  8657                              <2> guisetup:
  8658                              <2> 	%ifdef gui.background
  8659 00006BD1 31DB                <2> 	xor ebx, ebx
  8660 00006BD3 891D[CF6A0000]      <2> 	mov [backgroundimage], ebx
  8661                              <2> 	%endif
  8662 00006BD9 E89EFEFFFF          <2> 	call guiclear
  8663 00006BDE C605[E49E0000]01    <2> 	mov byte [guion], 1
  8664 00006BE5 C605[0B790000]00    <2> 	mov byte [mouseselecton], 0
  8665 00006BEC 31C0                <2> 	xor eax, eax
  8666 00006BEE 31DB                <2> 	xor ebx, ebx
  8667 00006BF0 31C9                <2> 	xor ecx, ecx
  8668 00006BF2 31D2                <2> 	xor edx, edx
  8669                              <2> 	
  8670 00006BF4 BE[BB6D0000]        <2> 	mov esi, pacmsg
  8671 00006BF9 30E4                <2> 	xor ah, ah
  8672 00006BFB B010                <2> 	mov al, 00010000b
  8673 00006BFD 31DB                <2> 	xor ebx, ebx
  8674 00006BFF 66B99000            <2> 	mov cx, 144
  8675 00006C03 66BA0400            <2> 	mov dx, 4
  8676 00006C07 E8A8040000          <2> 	call showstring
  8677                              <2> 	
  8678 00006C0C BE[F96D0000]        <2> 	mov esi, interneticon
  8679 00006C11 30E4                <2> 	xor ah, ah
  8680 00006C13 B010                <2> 	mov al, 00010000b
  8681 00006C15 BB[E46C0000]        <2> 	mov ebx, noie
  8682 00006C1A 66B91800            <2> 	mov cx, 24
  8683 00006C1E 66BA0400            <2> 	mov dx, 4
  8684 00006C22 E854FCFFFF          <2> 	call showicon
  8685                              <2> 	
  8686 00006C27 BE[7B6E0000]        <2> 	mov esi, wordicon
  8687 00006C2C 30E4                <2> 	xor ah, ah
  8688 00006C2E B010                <2> 	mov al, 00010000b
  8689 00006C30 31DB                <2> 	xor ebx, ebx
  8690 00006C32 66B91800            <2> 	mov cx, 24
  8691 00006C36 66BA3000            <2> 	mov dx, 48
  8692 00006C3A E83CFCFFFF          <2> 	call showicon
  8693                              <2> 	
  8694 00006C3F BE[FD6E0000]        <2> 	mov esi, pacmanpellet
  8695 00006C44 30E4                <2> 	xor ah, ah
  8696 00006C46 B010                <2> 	mov al, 00010000b
  8697 00006C48 31DB                <2> 	xor ebx, ebx
  8698 00006C4A 66B94000            <2> 	mov cx, 64
  8699 00006C4E 66BA0400            <2> 	mov dx, 4
  8700 00006C52 E824FCFFFF          <2> 	call showicon
  8701                              <2> 	
  8702 00006C57 BE[01700000]        <2> 	mov esi, pacman
  8703 00006C5C 30E4                <2> 	xor ah, ah
  8704 00006C5E B010                <2> 	mov al, 00010000b
  8705 00006C60 BB[CD6C0000]        <2> 	mov ebx, pacmannomnom
  8706 00006C65 66B94000            <2> 	mov cx, 64
  8707 00006C69 66BA3000            <2> 	mov dx, 48
  8708 00006C6D E809FCFFFF          <2> 	call showicon
  8709                              <2> 	
  8710 00006C72 BE[7F6F0000]        <2> 	mov esi, ghostie
  8711 00006C77 30E4                <2> 	xor ah, ah
  8712 00006C79 B010                <2> 	mov al, 00010000b
  8713 00006C7B BB[B66C0000]        <2> 	mov ebx, boo
  8714 00006C80 66B96C00            <2> 	mov cx, 108
  8715 00006C84 66BA0400            <2> 	mov dx, 4
  8716 00006C88 E8EEFBFFFF          <2> 	call showicon
  8717                              <2> 	
  8718 00006C8D BE[9D6D0000]        <2> 	mov esi, start
  8719 00006C92 668B0D[30550000]    <2> 	mov cx, [resolutiony]
  8720 00006C99 6681E91000          <2> 	sub cx, 16
  8721 00006C9E 66BA0200            <2> 	mov dx, 2
  8722 00006CA2 30E4                <2> 	xor ah, ah
  8723 00006CA4 B010                <2> 	mov al, 00010000b
  8724 00006CA6 BB[596D0000]        <2> 	mov ebx, winblows
  8725 00006CAB E804040000          <2> 	call showstring
  8726                              <2> 	
  8727 00006CB0 E8CE030000          <2> 	call guitime	;load time into timeshow/dateshow and show it
  8728 00006CB5 C3                  <2> 	ret
  8729                              <2> 
  8730                              <2> 	boo:
  8731 00006CB6 BE[B66D0000]        <2> 		mov esi, boomsg
  8732 00006CBB 66BA6400            <2> 		mov dx, 100
  8733 00006CBF 66B94001            <2> 		mov cx, 320
  8734 00006CC3 31DB                <2> 		xor ebx, ebx
  8735 00006CC5 6631C0              <2> 		xor ax, ax
  8736 00006CC8 E9E7030000          <2> 		jmp showstring
  8737                              <2> 
  8738                              <2> 	pacmannomnom:
  8739 00006CCD BE[D46D0000]        <2> 		mov esi, pacnom
  8740 00006CD2 66BA8200            <2> 		mov dx, 130
  8741 00006CD6 66B93C00            <2> 		mov cx, 60
  8742 00006CDA 31DB                <2> 		xor ebx, ebx
  8743 00006CDC 6631C0              <2> 		xor ax, ax
  8744 00006CDF E9D0030000          <2> 		jmp showstring	
  8745                              <2> 	
  8746                              <2> 	noie:
  8747 00006CE4 66C705[E36D0000]80- <2> 		mov word [termwindow], 640
  8748 00006CEC 02                  <2>
  8749 00006CED 66C705[E56D0000]E0- <2> 		mov word [termwindow + 2], 480	;the previous lines of code make a large terminal window that is 4 characters smaller than the screen
  8750 00006CF5 01                  <2>
  8751 00006CF6 BE[E36D0000]        <2> 		mov esi, termwindow
  8752 00006CFB 66BA1000            <2> 		mov dx, 16
  8753 00006CFF 66B91000            <2> 		mov cx, 16
  8754 00006D03 31DB                <2> 		xor ebx, ebx
  8755 00006D05 6631C0              <2> 		xor ax, ax
  8756 00006D08 E810060000          <2> 		call showwindow
  8757 00006D0D E9FCBAFFFF          <2> 		jmp os
  8758                              <2> 
  8759                              <2> 	gotomenuboot:
  8760 00006D12 31D2                <2> 		xor edx, edx
  8761 00006D14 31C9                <2> 		xor ecx, ecx
  8762 00006D16 668B15[2E550000]    <2> 		mov dx, [resolutionx]
  8763 00006D1D 668B0D[30550000]    <2> 		mov cx, [resolutiony]
  8764 00006D24 66C1E904            <2> 		shr cx, 4
  8765 00006D28 6681E90100          <2> 		sub cx, 1
  8766 00006D2D 66C1E104            <2> 		shl cx, 4
  8767 00006D31 668915[E36D0000]    <2> 		mov [termwindow], dx
  8768 00006D38 66890D[E56D0000]    <2> 		mov [termwindow + 2], cx	;the previous lines of code make a large terminal window that is fullscreen
  8769 00006D3F BE[E36D0000]        <2> 		mov esi, termwindow
  8770 00006D44 6631D2              <2> 		xor dx, dx
  8771 00006D47 6631C9              <2> 		xor cx, cx
  8772 00006D4A 31DB                <2> 		xor ebx, ebx
  8773 00006D4C 6631C0              <2> 		xor ax, ax
  8774 00006D4F E8C9050000          <2> 		call showwindow
  8775 00006D54 E9B5BAFFFF          <2> 		jmp os
  8776                              <2> 
  8777                              <2> 	winblows:
  8778 00006D59 BE[AC6D0000]        <2> 		mov esi, turnoffmsg
  8779 00006D5E BB[90500000]        <2> 		mov ebx, turnoff
  8780 00006D63 668B0D[30550000]    <2> 		mov cx, [resolutiony]
  8781 00006D6A 6681E92000          <2> 		sub cx, 32
  8782 00006D6F 6631D2              <2> 		xor dx, dx
  8783 00006D72 30E4                <2> 		xor ah, ah
  8784 00006D74 B010                <2> 		mov al, 00010000b
  8785 00006D76 E839030000          <2> 		call showstring
  8786 00006D7B BE[A36D0000]        <2> 		mov esi, gotomenu
  8787 00006D80 668B0D[30550000]    <2> 		mov cx, [resolutiony]
  8788 00006D87 6681E93000          <2> 		sub cx, 48
  8789 00006D8C 6631D2              <2> 		xor dx, dx
  8790 00006D8F 30E4                <2> 		xor ah, ah
  8791 00006D91 B010                <2> 		mov al, 00010000b
  8792 00006D93 BB[126D0000]        <2> 		mov ebx, gotomenuboot
  8793 00006D98 E917030000          <2> 		jmp showstring
  8794                              <2> 		
  8795                              <2> 
  8796 00006D9D 737461727400        <2> 	start	db "start",0
  8797 00006DA3 536F6C6C65724F5300  <2> 	gotomenu db "SollerOS",0
  8798 00006DAC 506F776572204F6666- <2> 	turnoffmsg db "Power Off",0
  8799 00006DB5 00                  <2>
  8800 00006DB6 426F6F2100          <2> 	boomsg db "Boo!",0
  8801 00006DBB 5061636D616E207761- <2> 	pacmsg	db "Pacman was easy to draw.",0
  8802 00006DC4 73206561737920746F- <2>
  8803 00006DCD 20647261772E00      <2>
  8804 00006DD4 4F6D206E6F6D206E6F- <2> 	pacnom  db "Om nom nom nom",0
  8805 00006DDD 6D206E6F6D00        <2>
  8806                              <2> 
  8807 00006DE3 20035802            <2> 	termwindow:	dw 800,600	;window size
  8808 00006DE7 FFFF0000            <2> 				dw 0xFFFF,0	;colors(FG,BG)
  8809 00006DEB [C0E62800]-         <2> 				dd videobuf,videobuf2 ;location of buffers
  8810 00006DEF [64512900]          <2>
  8811 00006DF3 534855536800        <2> 	termmsg:	db "SHUSh",0	;;window title
  8812                              <2> 	
  8813 00006DF3 <incbin>            <2> interneticon: 	incbin 'source/gui/icons/internet'
  8814 00006DF3 <incbin>            <2> wordicon: 	incbin 'source/gui/icons/word'
  8815 00006DF3 <incbin>            <2> pacmanpellet: incbin 'source/gui/icons/pellet'
  8816 00006DF3 <incbin>            <2> ghostie	incbin 'source/gui/icons/ghostie'
  8817 00006DF3 <incbin>            <2> pacman	incbin 'source/gui/icons/pacman'
  8818                              <2> 
  8819                              <2> guitime:
  8820 00007083 E8ACDDFFFF          <2> 		call time	;get rtc in timeshow & dateshow
  8821 00007088 31DB                <2> 		xor ebx, ebx
  8822 0000708A 668B15[1C560000]    <2> 		mov dx, [resolutionx2]
  8823 00007091 6631C9              <2> 		xor cx, cx
  8824 00007094 6681EA3001          <2> 		sub dx, 304
  8825 00007099 BE[09500000]        <2> 		mov esi, dateshow
  8826 0000709E B011                <2> 		mov al, 00010001b
  8827 000070A0 E80F000000          <2> 		call showstring
  8828 000070A5 BE[00500000]        <2> 		mov esi, timeshow
  8829 000070AA 31DB                <2> 		xor ebx, ebx
  8830 000070AC B011                <2> 		mov al, 00010001b
  8831 000070AE E801000000          <2> 		call showstring
  8832 000070B3 C3                  <2> 		ret
  8833                              <2> 		
  8834                              <1> %include "source/gui/text.asm"
  8835                              <2> 	showstring:
  8836 000070B4 A2[0B790000]        <2> 		mov [mouseselecton], al
  8837 000070B9 8025[0B790000]01    <2> 		and byte [mouseselecton], 1
  8838 000070C0 B402                <2> 		mov ah, 2
  8839 000070C2 E8BB0D0000          <2> 		call graphicsadd
  8840                              <2> 	showstring2:
  8841 000070C7 30E4                <2> 		xor ah, ah
  8842 000070C9 8A06                <2> 		mov al, [esi]
  8843 000070CB 3C00                <2> 		cmp al, 0
  8844 000070CD 741E                <2> 		je doneshowstring
  8845 000070CF 46                  <2> 		inc esi
  8846 000070D0 3CFF                <2> 		cmp al, 255
  8847 000070D2 74F3                <2> 		je showstring2
  8848 000070D4 56                  <2> 		push esi
  8849 000070D5 668B1D[F5700000]    <2> 		mov bx, [colorfont2]
  8850 000070DC E825000000          <2> 		call showfontvesa
  8851 000070E1 3C0A                <2> 		cmp al, 10
  8852 000070E3 7405                <2> 		je noproceedshst
  8853 000070E5 6681C20800          <2> 		add dx, 8
  8854                              <2> 	noproceedshst:
  8855 000070EA 5E                  <2> 		pop esi
  8856 000070EB EBDA                <2> 		jmp showstring2
  8857                              <2> 	doneshowstring:
  8858 000070ED C605[0B790000]00    <2> 		mov byte [mouseselecton], 0
  8859 000070F4 C3                  <2> 		ret
  8860                              <2> 
  8861 000070F5 FFFF                <2> colorfont2 dw 0xFFFF
  8862 000070F7 00                  <2> colorcache db 0
  8863                              <2> 
  8864 000070F8 02                  <2> resolutionbytes db 2
  8865 000070F9 0000                <2> posxvesa dw 0
  8866 000070FB 0000                <2> posyvesa dw 0
  8867 000070FD FFFF                <2> colorfont dw 0xFFFF
  8868                              <2> savefontvesa:		;;same rules as showfontvesa
  8869 000070FF C605[0A790000]01    <2> 	mov byte [savefonton], 1
  8870                              <2> showfontvesa:		;;position in (dx,cx), color in bx, char in al
  8871 00007106 3CFF                <2> 	cmp al, 255
  8872 00007108 7501                <2> 	jne nostopshowfont
  8873 0000710A C3                  <2> 	ret
  8874                              <2> nostopshowfont:
  8875 0000710B 66890D[FB700000]    <2> 	mov [posyvesa], cx
  8876 00007112 3C0A                <2> 	cmp al, 10
  8877 00007114 0F8424000000        <2> 	je near goodvesafontx
  8878 0000711A 31C9                <2> 	xor ecx, ecx
  8879 0000711C 668B0D[1C560000]    <2> 	mov cx, [resolutionx2]
  8880 00007123 6639CA              <2> 	cmp dx, cx
  8881 00007126 7616                <2> 	jbe goodvesafontx
  8882 00007128 6631D2              <2> 	xor dx, dx
  8883 0000712B 668B0D[FB700000]    <2> 	mov cx, [posyvesa]
  8884 00007132 6681C11000          <2> 	add cx, 16
  8885 00007137 66890D[FB700000]    <2> 	mov [posyvesa], cx
  8886                              <2> goodvesafontx:
  8887 0000713E 668B0D[FB700000]    <2> 	mov cx, [posyvesa]
  8888 00007145 668915[F9700000]    <2> 	mov [posxvesa], dx
  8889 0000714C 8B3D[44550000]      <2> 	mov edi, [physbaseptr]
  8890 00007152 66891D[FD700000]    <2> 	mov [colorfont], bx
  8891 00007159 31DB                <2> 	xor ebx, ebx
  8892 0000715B 88C3                <2> 	mov bl, al
  8893 0000715D 31C0                <2> 	xor eax, eax
  8894 0000715F 88D8                <2> 	mov al, bl
  8895 00007161 6689D3              <2> 	mov bx, dx
  8896 00007164 89DA                <2> 	mov edx, ebx
  8897 00007166 31DB                <2> 	xor ebx, ebx
  8898 00007168 6681F90000          <2> 	cmp cx, 0
  8899 0000716D 7414                <2> 	je vesaposloopdn
  8900 0000716F 668B1D[1C560000]    <2> 	mov bx, [resolutionx2]
  8901                              <2> vesaposloop:
  8902 00007176 52                  <2> 	push edx
  8903 00007177 50                  <2> 	push eax
  8904 00007178 31C0                <2> 	xor eax, eax
  8905 0000717A 6689C8              <2> 	mov ax, cx
  8906 0000717D F7E3                <2> 	mul ebx
  8907 0000717F 01C7                <2> 	add edi, eax
  8908 00007181 58                  <2> 	pop eax
  8909 00007182 5A                  <2> 	pop edx
  8910                              <2> vesaposloopdn:
  8911 00007183 01D7                <2> 	add edi, edx
  8912 00007185 BE[2D8D0000]        <2> 	mov esi, fonts
  8913                              <2> findfontvesa:
  8914 0000718A 30E4                <2> 	xor ah, ah
  8915 0000718C 3C0A                <2> 	cmp al, 10
  8916 0000718E 0F84FE000000        <2> 	je near nwlinevesa
  8917 00007194 C1E004              <2> 	shl eax, 4
  8918 00007197 01C6                <2> 	add esi, eax
  8919 00007199 C1E804              <2> 	shr eax, 4
  8920 0000719C 81FE[2D9D0000]      <2> 	cmp esi, fontend
  8921 000071A2 0F83B9000000        <2> 	jae near donefontvesa
  8922 000071A8 4E                  <2> 	dec esi
  8923                              <2> foundfontvesa:
  8924 000071A9 46                  <2> 	inc esi
  8925 000071AA 803D[0A790000]01    <2> 	cmp byte [savefonton], 1
  8926 000071B1 0F8401010000        <2> 	je near vesafontsaver
  8927 000071B7 30C9                <2> 	xor cl, cl
  8928 000071B9 8A06                <2> 	mov al, [esi]
  8929 000071BB 668B15[1C560000]    <2> 	mov dx, [resolutionx2]
  8930 000071C2 662B15[F9700000]    <2> 	sub dx, [posxvesa]
  8931 000071C9 6681FA1000          <2> 	cmp dx, 16
  8932 000071CE 7708                <2> 	ja paintfontvesa
  8933 000071D0 D0EA                <2> 	shr dl, 1
  8934 000071D2 8815[91720000]      <2> 	mov [charwidth], dl
  8935                              <2> paintfontvesa:
  8936 000071D8 B201                <2> 	mov dl, 1
  8937 000071DA 20C2                <2> 	and dl, al
  8938 000071DC 803D[09790000]01    <2> 	cmp byte [showcursorfonton], 1
  8939 000071E3 0F8435000000        <2> 	je near nodelpaintedfont
  8940 000071E9 803D[09790000]02    <2> 	cmp byte [showcursorfonton], 2
  8941 000071F0 0F8518000000        <2> 	jne near noswitchcursorfonton
  8942 000071F6 80FA00              <2> 	cmp dl, 0
  8943 000071F9 0F842E000000        <2> 	je near nopixelset
  8944 000071FF 668B1D[FD700000]    <2> 	mov bx, [colorfont]
  8945 00007206 66891F              <2> 	mov [edi], bx
  8946 00007209 E91F000000          <2> 	jmp nopixelset
  8947                              <2> noswitchcursorfonton:
  8948 0000720E 3215[0B790000]      <2> 	xor dl, [mouseselecton]
  8949 00007214 668B1D[FD6A0000]    <2> 	mov bx, [background]
  8950 0000721B 66891F              <2> 	mov [edi], bx
  8951                              <2> nodelpaintedfont:
  8952 0000721E 80FA00              <2> 	cmp dl, 0
  8953 00007221 740A                <2> 	je nopixelset
  8954 00007223 668B15[FD700000]    <2> 	mov dx, [colorfont]
  8955 0000722A 668917              <2> 	mov [edi], dx
  8956                              <2> nopixelset:
  8957 0000722D 81C702000000        <2> 	add edi, 2
  8958 00007233 D0C0                <2> 	rol al, 1
  8959 00007235 FEC1                <2> 	inc cl
  8960 00007237 3A0D[91720000]      <2> 	cmp cl, [charwidth]
  8961 0000723D 7299                <2> 	jb paintfontvesa
  8962 0000723F FEC5                <2> 	inc ch
  8963 00007241 31D2                <2> 	xor edx, edx
  8964 00007243 668B15[1C560000]    <2> 	mov dx, [resolutionx2]
  8965 0000724A 01D7                <2> 	add edi, edx
  8966 0000724C 31D2                <2> 	xor edx, edx
  8967 0000724E 8A15[91720000]      <2> 	mov dl, [charwidth]
  8968 00007254 00D2                <2> 	add dl, dl
  8969 00007256 29D7                <2> 	sub edi, edx
  8970 00007258 80FD10              <2> 	cmp ch, 16
  8971 0000725B 0F8248FFFFFF        <2> 	jb foundfontvesa
  8972                              <2> donefontvesa:
  8973 00007261 B208                <2> 	mov dl, 8
  8974 00007263 8815[91720000]      <2> 	mov [charwidth], dl
  8975 00007269 668B15[F9700000]    <2> 	mov dx, [posxvesa]
  8976 00007270 8A1D[91720000]      <2> 	mov bl, [charwidth]
  8977 00007276 30FF                <2> 	xor bh, bh
  8978 00007278 6601DA              <2> 	add dx, bx
  8979 0000727B 668B1D[FD700000]    <2> 	mov bx, [colorfont]
  8980 00007282 668B0D[FB700000]    <2> 	mov cx, [posyvesa]
  8981 00007289 C605[0A790000]00    <2> 	mov byte [savefonton], 0
  8982 00007290 C3                  <2> 	ret
  8983 00007291 08                  <2> charwidth db 8
  8984                              <2> nwlinevesa:
  8985 00007292 668B15[F9700000]    <2> 	mov dx, [posxvesa]
  8986 00007299 6631D2              <2> 	xor dx, dx
  8987 0000729C 668915[F9700000]    <2> 	mov [posxvesa], dx
  8988 000072A3 668B0D[FB700000]    <2> 	mov cx, [posyvesa]
  8989 000072AA 6681C11000          <2> 	add cx, 16
  8990 000072AF 66890D[FB700000]    <2> 	mov [posyvesa], cx
  8991 000072B6 EBA9                <2> 	jmp donefontvesa
  8992                              <2> vesafontsaver:
  8993 000072B8 30C0                <2> 	xor al, al
  8994 000072BA 30C9                <2> 	xor cl, cl
  8995                              <2> vesafontsaver2:
  8996 000072BC 668B17              <2> 	mov dx, [edi]
  8997 000072BF 663B15[FD700000]    <2> 	cmp dx, [colorfont]
  8998 000072C6 742F                <2> 	je colorfontmatch
  8999                              <2> donecolormatch:
  9000 000072C8 81C702000000        <2> 	add edi, 2
  9001 000072CE D0C0                <2> 	rol al, 1
  9002 000072D0 FEC1                <2> 	inc cl
  9003 000072D2 80F908              <2> 	cmp cl, 8
  9004 000072D5 72E5                <2> 	jb vesafontsaver2
  9005 000072D7 8806                <2> 	mov [esi], al
  9006 000072D9 46                  <2> 	inc esi
  9007 000072DA FEC5                <2> 	inc ch
  9008 000072DC 31D2                <2> 	xor edx, edx
  9009 000072DE 668B15[1C560000]    <2> 	mov dx, [resolutionx2]
  9010 000072E5 01D7                <2> 	add edi, edx
  9011 000072E7 81EF10000000        <2> 	sub edi, 16
  9012 000072ED 80FD10              <2> 	cmp ch, 16
  9013 000072F0 72C6                <2> 	jb vesafontsaver
  9014 000072F2 E96AFFFFFF          <2> 	jmp donefontvesa
  9015                              <2> colorfontmatch:
  9016 000072F7 0401                <2> 	add al, 1
  9017 000072F9 EBCD                <2> 	jmp donecolormatch
  9018                              <1> %include "source/gui/window.asm"
  9019 000072FB 0000                <2> winvcopystx dw 0
  9020 000072FD 0000                <2> winvcopysty dw 0
  9021 000072FF 0000                <2> winvcopydx dw 0
  9022 00007301 0000                <2> winvcopycx dw 0
  9023 00007303 FFFF0000            <2> windowcolor dw 0xFFFF,0
  9024 00007307 00000000            <2> windowbufloc: dd 0
  9025 0000730B 00000000            <2> windowvideobuf dd 0
  9026 0000730F 00000000            <2> windowvideobuf2 dd 0
  9027 00007313 00000000            <2> windowinfobuf dd 0
  9028 00007317 0000                <2> termcol dw 0
  9029 00007319 00000000            <2> wincopyendpos dd 0
  9030                              <2> 
  9031                              <2> 	showwindow:	;windowstuff in esi, position in (dx, cx), nothing in ax, code in ebx
  9032 0000731D C605[80220000]01    <2> 		mov byte [termguion], 1
  9033 00007324 6681C11000          <2> 		add cx, 16
  9034 00007329 668915[FB720000]    <2> 		mov [winvcopystx], dx
  9035 00007330 66890D[FD720000]    <2> 		mov [winvcopysty], cx
  9036 00007337 8935[13730000]      <2> 		mov [windowinfobuf], esi
  9037 0000733D 668B16              <2> 		mov dx, [esi]
  9038 00007340 668B4E02            <2> 		mov cx, [esi + 2]
  9039 00007344 31C0                <2> 		xor eax, eax
  9040 00007346 31DB                <2> 		xor ebx, ebx
  9041 00007348 6689D0              <2> 		mov ax, dx
  9042 0000734B 6689CB              <2> 		mov bx, cx
  9043 0000734E 66C1E803            <2> 		shr ax, 3
  9044 00007352 66C1EB04            <2> 		shr bx, 4
  9045 00007356 66A3[17730000]      <2> 		mov [termcol], ax
  9046 0000735C A2[44240000]        <2> 		mov [charxy], al
  9047 00007361 881D[45240000]      <2> 		mov [charxy + 1], bl
  9048 00007367 8B7E04              <2> 		mov edi, [esi + 4]
  9049 0000736A 893D[03730000]      <2> 		mov [windowcolor], edi
  9050 00007370 8B7E0C              <2> 		mov edi, [esi + 12]
  9051 00007373 893D[0F730000]      <2> 		mov [windowvideobuf2], edi
  9052 00007379 8B7E08              <2> 		mov edi, [esi + 8]
  9053 0000737C 893D[0B730000]      <2> 		mov [windowvideobuf], edi
  9054 00007382 81FB00000000        <2> 		cmp ebx, 0
  9055 00007388 0F845A050000        <2> 		je near donewincopynow	;AAAAAAAAA!!!!!
  9056                              <2> 	findendposwin:
  9057 0000738E 01C7                <2> 		add edi, eax
  9058 00007390 01C7                <2> 		add edi, eax
  9059 00007392 4B                  <2> 		dec ebx
  9060 00007393 81FB00000000        <2> 		cmp ebx, 0
  9061 00007399 77F3                <2> 		ja findendposwin
  9062 0000739B 893D[19730000]      <2> 		mov [wincopyendpos], edi
  9063 000073A1 31FF                <2> 		xor edi, edi
  9064 000073A3 6631C0              <2> 		xor ax, ax
  9065 000073A6 6631DB              <2> 		xor bx, bx
  9066 000073A9 6601D2              <2> 		add dx, dx
  9067 000073AC 668915[FF720000]    <2> 		mov [winvcopydx], dx
  9068 000073B3 66890D[01730000]    <2> 		mov [winvcopycx], cx
  9069 000073BA 668B0D[FD720000]    <2> 		mov cx, [winvcopysty]
  9070 000073C1 6681E91000          <2> 		sub cx, 16
  9071 000073C6 668B15[FB720000]    <2> 		mov dx, [winvcopystx]
  9072 000073CD C605[81220000]00    <2> 		mov byte [termcopyon], 0
  9073 000073D4 B403                <2> 		mov ah, 3
  9074 000073D6 E8A70A0000          <2> 		call graphicsadd
  9075                              <2> 	showwindow2:
  9076 000073DB 6681C11000          <2> 		add cx, 16
  9077 000073E0 668915[FB720000]    <2> 		mov [winvcopystx], dx
  9078 000073E7 66890D[FD720000]    <2> 		mov [winvcopysty], cx
  9079 000073EE 668B16              <2> 		mov dx, [esi]
  9080 000073F1 668B4E02            <2> 		mov cx, [esi + 2]
  9081 000073F5 6601D2              <2> 		add dx, dx
  9082 000073F8 668915[FF720000]    <2> 		mov [winvcopydx], dx
  9083 000073FF 66890D[01730000]    <2> 		mov [winvcopycx], cx
  9084 00007406 E818000000          <2> 		call reloadwindowtitle
  9085 0000740B 803D[697E0000]01    <2> 		cmp byte [windrag], 1
  9086 00007412 0F83DF040000        <2> 		jae near forgetresetstuff
  9087 00007418 8B3D[07730000]      <2> 		mov edi, [windowbufloc]
  9088 0000741E E968020000          <2> 		jmp windowvideocopyset
  9089                              <2> 		
  9090                              <2> 	reloadwindowtitle:
  9091 00007423 8B3D[07730000]      <2> 		mov edi, [windowbufloc]
  9092 00007429 31D2                <2> 		xor edx, edx
  9093 0000742B 668B15[1C560000]    <2> 		mov dx, [resolutionx2]
  9094 00007432 C1E204              <2> 		shl edx, 4
  9095 00007435 29D7                <2> 		sub edi, edx
  9096 00007437 803D[81220000]00    <2> 		cmp byte [termcopyon], 0
  9097 0000743E 7532                <2> 		jne nocleartitlebarpos
  9098 00007440 8B3D[44550000]      <2> 		mov edi, [physbaseptr]
  9099 00007446 31D2                <2> 		xor edx, edx
  9100 00007448 668B15[FB720000]    <2> 		mov dx, [winvcopystx]
  9101 0000744F 01D7                <2> 		add edi, edx
  9102 00007451 31C9                <2> 		xor ecx, ecx
  9103 00007453 668B0D[FD720000]    <2> 		mov cx, [winvcopysty]
  9104 0000745A 6681E91000          <2> 		sub cx, 16
  9105 0000745F 6681F90000          <2> 		cmp cx, 0
  9106 00007464 740C                <2> 		je nocleartitlebarpos
  9107                              <2> 	cleartitlebarpos:
  9108 00007466 31C0                <2> 		xor eax, eax
  9109 00007468 66A1[1C560000]      <2> 		mov ax, [resolutionx2]
  9110 0000746E F7E1                <2> 		mul ecx
  9111 00007470 01C7                <2> 		add edi, eax
  9112                              <2> 	nocleartitlebarpos:
  9113 00007472 66B91000            <2> 		mov cx, 16
  9114 00007476 668B15[FF720000]    <2> 		mov dx, [winvcopydx]
  9115 0000747D 6681F90000          <2> 		cmp cx, 0
  9116 00007482 0F8448000000        <2> 		je near canceltitlebarput
  9117 00007488 6681FA0000          <2> 		cmp dx, 0
  9118 0000748D 0F843D000000        <2> 		je near canceltitlebarput
  9119                              <2> 	titlebarput:
  9120 00007493 66A1[03730000]      <2> 		mov ax, [windowcolor]
  9121 00007499 668907              <2> 		mov [edi], ax
  9122 0000749C 6681EA0200          <2> 		sub dx, 2
  9123 000074A1 81C702000000        <2> 		add edi, 2
  9124 000074A7 6681FA0000          <2> 		cmp dx, 0
  9125 000074AC 75E5                <2> 		jne titlebarput
  9126 000074AE 31D2                <2> 		xor edx, edx
  9127 000074B0 668B15[1C560000]    <2> 		mov dx, [resolutionx2]
  9128 000074B7 6649                <2> 		dec cx
  9129 000074B9 662B15[FF720000]    <2> 		sub dx, [winvcopydx]
  9130 000074C0 01D7                <2> 		add edi, edx
  9131 000074C2 668B15[FF720000]    <2> 		mov dx, [winvcopydx]
  9132 000074C9 6681F90000          <2> 		cmp cx, 0
  9133 000074CE 75C3                <2> 		jne titlebarput
  9134                              <2> 	canceltitlebarput:
  9135 000074D0 893D[07730000]      <2> 		mov [windowbufloc], edi
  9136 000074D6 803D[81220000]02    <2> 		cmp byte [termcopyon], 2
  9137 000074DD 0F8416010000        <2> 		je near winvcpst
  9138 000074E3 668B1D[FD6A0000]    <2> 		mov bx, [background]
  9139 000074EA 6653                <2> 		push bx
  9140                              <2> 		;mov bx, 1111111111111111b
  9141 000074EC 6631DB              <2> 		xor bx, bx
  9142 000074EF 66891D[FD6A0000]    <2> 		mov [background], bx
  9143 000074F6 6631C0              <2> 		xor ax, ax
  9144 000074F9 81C610000000        <2> 		add esi, 16
  9145 000074FF 668B15[FB720000]    <2> 		mov dx, [winvcopystx]
  9146 00007506 668B0D[FD720000]    <2> 		mov cx, [winvcopysty]
  9147 0000750D 6681E91000          <2> 		sub cx, 16
  9148 00007512 668B1D[03730000]    <2> 		mov bx, [windowcolor]
  9149 00007519 C605[0B790000]01    <2> 		mov byte [mouseselecton], 1
  9150 00007520 E8A2FBFFFF          <2> 		call showstring2	;Show window title
  9151 00007525 8B35[AA290000]      <2> 		mov esi, [usercache]
  9152 0000752B 6681C21000          <2> 		add dx, 16
  9153 00007530 C605[0B790000]01    <2> 		mov byte [mouseselecton], 1
  9154 00007537 E88BFBFFFF          <2> 		call showstring2	;Show user name
  9155 0000753C BE[F88C0000]        <2> 		mov esi, computer
  9156 00007541 C605[0B790000]01    <2> 		mov byte [mouseselecton], 1
  9157 00007548 E87AFBFFFF          <2> 		call showstring2	;Show computer name
  9158 0000754D B058                <2> 		mov al, "X"
  9159 0000754F 30E4                <2> 		xor ah, ah
  9160 00007551 66BB00F8            <2> 		mov bx, 1111100000000000b
  9161 00007555 668B15[FB720000]    <2> 		mov dx, [winvcopystx]
  9162 0000755C 668B0D[FD720000]    <2> 		mov cx, [winvcopysty]
  9163 00007563 6681E91000          <2> 		sub cx, 16
  9164 00007568 6681EA1000          <2> 		sub dx, 16
  9165 0000756D 660315[FF720000]    <2> 		add dx, [winvcopydx]
  9166 00007574 C605[0B790000]01    <2> 		mov byte [mouseselecton], 1
  9167 0000757B 663B15[1C560000]    <2> 		cmp dx, [resolutionx2]
  9168 00007582 7305                <2> 		jae .nox
  9169 00007584 E87DFBFFFF          <2> 		call showfontvesa
  9170                              <2> .nox:
  9171 00007589 668B1D[FD6A0000]    <2> 		mov bx, [background]
  9172 00007590 6681EA1800          <2> 		sub dx, 24
  9173 00007595 B02B                <2> 		mov al, "+"
  9174 00007597 66BBE007            <2> 		mov bx, 0000011111100000b
  9175 0000759B C605[0B790000]01    <2> 		mov byte [mouseselecton], 1
  9176 000075A2 663B15[1C560000]    <2> 		cmp dx, [resolutionx2]
  9177 000075A9 7305                <2> 		jae .noplus
  9178 000075AB E856FBFFFF          <2> 		call showfontvesa
  9179                              <2> .noplus:
  9180 000075B0 6681EA1800          <2> 		sub dx, 24
  9181 000075B5 B02D                <2> 		mov al, "-"
  9182 000075B7 66BBE0FF            <2> 		mov bx, 1111111111100000b
  9183 000075BB C605[0B790000]01    <2> 		mov byte [mouseselecton], 1
  9184 000075C2 663B15[1C560000]    <2> 		cmp dx, [resolutionx2]
  9185 000075C9 7305                <2> 		jae .nominus
  9186 000075CB E836FBFFFF          <2> 		call showfontvesa
  9187                              <2> .nominus:
  9188 000075D0 6681EA1800          <2> 		sub dx, 24
  9189 000075D5 B03F                <2> 		mov al, "?"
  9190 000075D7 66BB1F00            <2> 		mov bx, 0000000000011111b
  9191 000075DB C605[0B790000]01    <2> 		mov byte [mouseselecton], 1
  9192 000075E2 663B15[1C560000]    <2> 		cmp dx, [resolutionx2]
  9193 000075E9 7305                <2> 		jae .noquestion
  9194 000075EB E816FBFFFF          <2> 		call showfontvesa
  9195                              <2> .noquestion:
  9196 000075F0 665B                <2> 		pop bx
  9197 000075F2 66891D[FD6A0000]    <2> 		mov [background], bx
  9198                              <2> 	winvcpst:
  9199 000075F9 C3                  <2> 		ret
  9200                              <2> 
  9201                              <2> 	windowvideocopy:
  9202 000075FA 8B35[13730000]      <2> 		mov esi, [windowinfobuf]
  9203 00007600 668B16              <2> 		mov dx, [esi]
  9204 00007603 668B4E02            <2> 		mov cx, [esi + 2]
  9205 00007607 8B7E04              <2> 		mov edi, [esi + 4]
  9206 0000760A 893D[03730000]      <2> 		mov [windowcolor], edi
  9207 00007610 8B7E08              <2> 		mov edi, [esi + 8]
  9208 00007613 8B5E0C              <2> 		mov ebx, [esi + 12]
  9209 00007616 893D[0B730000]      <2> 		mov [windowvideobuf], edi
  9210 0000761C 891D[0F730000]      <2> 		mov [windowvideobuf2], ebx
  9211 00007622 31C0                <2> 		xor eax, eax
  9212 00007624 31DB                <2> 		xor ebx, ebx
  9213 00007626 6689D0              <2> 		mov ax, dx
  9214 00007629 6689CB              <2> 		mov bx, cx
  9215 0000762C 66C1E803            <2> 		shr ax, 3
  9216 00007630 66C1EB04            <2> 		shr bx, 4
  9217 00007634 66A3[17730000]      <2> 		mov [termcol], ax
  9218 0000763A A2[44240000]        <2> 		mov [charxy], al
  9219 0000763F 881D[45240000]      <2> 		mov [charxy + 1], bl
  9220 00007645 8B3D[07730000]      <2> 		mov edi, [windowbufloc]
  9221 0000764B 3B3D[44550000]      <2> 		cmp edi, [physbaseptr]
  9222 00007651 0F8334000000        <2> 		jae near windowvideocopyset
  9223 00007657 31C9                <2> 		xor ecx, ecx
  9224 00007659 31D2                <2> 		xor edx, edx
  9225 0000765B 668B15[FB720000]    <2> 		mov dx, [winvcopystx]
  9226 00007662 668B0D[FD720000]    <2> 		mov cx, [winvcopysty]
  9227 00007669 8B3D[44550000]      <2> 		mov edi, [physbaseptr]
  9228 0000766F 01D7                <2> 		add edi, edx
  9229 00007671 81F900000000        <2> 		cmp ecx, 0
  9230 00007677 7412                <2> 		je windowvideocopyset
  9231                              <2> 	yrescopylp:
  9232 00007679 31C0                <2> 		xor eax, eax
  9233 0000767B 66A1[1C560000]      <2> 		mov ax, [resolutionx2]
  9234 00007681 F7E1                <2> 		mul ecx
  9235 00007683 01C7                <2> 		add edi, eax
  9236 00007685 893D[07730000]      <2> 		mov [windowbufloc], edi
  9237                              <2> 	windowvideocopyset:
  9238 0000768B 6631C9              <2> 		xor cx, cx
  9239 0000768E 6649                <2> 		dec cx
  9240 00007690 66890D[FF780000]    <2> 		mov [charposline], cx
  9241 00007697 89FE                <2> 		mov esi, edi
  9242 00007699 81EE10000000        <2> 		sub esi, 16
  9243 0000769F 31D2                <2> 		xor edx, edx
  9244 000076A1 668B15[1C560000]    <2> 		mov dx, [resolutionx2]
  9245 000076A8 C1E204              <2> 		shl edx, 4
  9246 000076AB 01D6                <2> 		add esi, edx
  9247 000076AD 8B3D[0B730000]      <2> 		mov edi, [windowvideobuf]
  9248 000076B3 81EF02000000        <2> 		sub edi, 2
  9249 000076B9 893D[01790000]      <2> 		mov [charposvbuf], edi
  9250 000076BF E919010000          <2> 		jmp nextcharwin
  9251                              <2> 	win.write:	;adjusted this to use alpha
  9252                              <2> 				;5R, 6G, 5B
  9253                              <2> %ifdef gui.alphablending
  9254 000076C4 56                  <2> 		push esi
  9255 000076C5 6653                <2> 		push bx
  9256 000076C7 6651                <2> 		push cx
  9257 000076C9 6652                <2> 		push dx
  9258                              <2> %ifdef gui.background
  9259 000076CB 89FE                <2> 		mov esi, edi
  9260 000076CD 2B35[44550000]      <2> 		sub esi, [physbaseptr]
  9261 000076D3 0335[CF6A0000]      <2> 		add esi, [backgroundimage]
  9262 000076D9 813D[CF6A0000]0000- <2> 		cmp dword [backgroundimage], 0
  9263 000076E1 0000                <2>
  9264 000076E3 7505                <2> 		jne .red
  9265                              <2> %endif
  9266 000076E5 BE[FD6A0000]        <2> 		mov esi, background
  9267                              <2> 	.red:
  9268 000076EA 668B0E              <2> 		mov cx, [esi]
  9269 000076ED 66C1E90B            <2> 		shr cx, 11
  9270 000076F1 6689C3              <2> 		mov bx, ax
  9271 000076F4 66C1EB0B            <2> 		shr bx, 11
  9272 000076F8 6601D9              <2> 		add cx, bx
  9273 000076FB 6601D9              <2> 		add cx, bx
  9274 000076FE 6601D9              <2> 		add cx, bx
  9275 00007701 66C1E902            <2> 		shr cx, 2
  9276 00007705 66C1E10B            <2> 		shl cx, 11
  9277 00007709 6689CA              <2> 		mov dx, cx
  9278                              <2> 	.green:
  9279 0000770C 668B0E              <2> 		mov cx, [esi]
  9280 0000770F 66C1E105            <2> 		shl cx, 5
  9281 00007713 66C1E90A            <2> 		shr cx, 10
  9282 00007717 6689C3              <2> 		mov bx, ax
  9283 0000771A 66C1E305            <2> 		shl bx, 5
  9284 0000771E 66C1EB0A            <2> 		shr bx, 10
  9285 00007722 6601D9              <2> 		add cx, bx
  9286 00007725 6601D9              <2> 		add cx, bx
  9287 00007728 6601D9              <2> 		add cx, bx
  9288 0000772B 66C1E902            <2> 		shr cx, 2
  9289 0000772F 66C1E105            <2> 		shl cx, 5
  9290 00007733 6601CA              <2> 		add dx, cx
  9291                              <2> 	.blue:
  9292 00007736 668B0E              <2> 		mov cx, [esi]
  9293 00007739 66C1E10B            <2> 		shl cx, 11
  9294 0000773D 66C1E90B            <2> 		shr cx, 11
  9295 00007741 6689C3              <2> 		mov bx, ax
  9296 00007744 66C1E30B            <2> 		shl bx, 11
  9297 00007748 66C1EB0B            <2> 		shr bx, 11
  9298 0000774C 6601D9              <2> 		add cx, bx
  9299 0000774F 6601D9              <2> 		add cx, bx
  9300 00007752 6601D9              <2> 		add cx, bx
  9301 00007755 66C1E902            <2> 		shr cx, 2
  9302 00007759 6601CA              <2> 		add dx, cx
  9303 0000775C 668917              <2> 		mov [edi], dx
  9304 0000775F 665A                <2> 		pop dx
  9305 00007761 6659                <2> 		pop cx
  9306 00007763 665B                <2> 		pop bx
  9307 00007765 5E                  <2> 		pop esi
  9308                              <2> %else
  9309                              <2> 		mov [edi], ax
  9310                              <2> %endif
  9311 00007766 C3                  <2> 		ret
  9312                              <2> 	copywindow:
  9313 00007767 B201                <2> 		mov dl, 1
  9314 00007769 D0C6                <2> 		rol dh, 1
  9315 0000776B 20F2                <2> 		and dl, dh
  9316 0000776D 803D[F7700000]10    <2> 		cmp byte [colorcache], 0x10
  9317 00007774 7320                <2> 		jae switchwincolors
  9318 00007776 66A1[05730000]      <2> 		mov ax, [windowcolor + 2]
  9319 0000777C E843FFFFFF          <2> 		call win.write
  9320 00007781 80FA00              <2> 		cmp dl, 0
  9321 00007784 742B                <2> 		je nowritewin
  9322 00007786 66A1[03730000]      <2> 		mov ax, [windowcolor]
  9323 0000778C E833FFFFFF          <2> 		call win.write
  9324 00007791 E91B000000          <2> 		jmp nowritewin
  9325                              <2> 	switchwincolors:
  9326 00007796 66A1[03730000]      <2> 		mov ax, [windowcolor]
  9327 0000779C E823FFFFFF          <2> 		call win.write
  9328 000077A1 80FA00              <2> 		cmp dl, 0
  9329 000077A4 740B                <2> 		je nowritewin
  9330 000077A6 66A1[05730000]      <2> 		mov ax, [windowcolor + 2]
  9331 000077AC E813FFFFFF          <2> 		call win.write
  9332                              <2> 	nowritewin:
  9333 000077B1 81C702000000        <2> 		add edi, 2
  9334 000077B7 FEC1                <2> 		inc cl
  9335 000077B9 80F908              <2> 		cmp cl, 8
  9336 000077BC 75A9                <2> 		jne copywindow
  9337 000077BE 6643                <2> 		inc bx
  9338 000077C0 30C9                <2> 		xor cl, cl
  9339 000077C2 31D2                <2> 		xor edx, edx
  9340 000077C4 668B15[1C560000]    <2> 		mov dx, [resolutionx2]
  9341 000077CB 01D6                <2> 		add esi, edx
  9342 000077CD 89F7                <2> 		mov edi, esi
  9343 000077CF 678AB7[2D8D]        <2> 		mov dh, [fonts + bx]
  9344 000077D4 D0CE                <2> 		ror dh, 1
  9345 000077D6 FEC5                <2> 		inc ch
  9346 000077D8 80FD10              <2> 		cmp ch, 16
  9347 000077DB 758A                <2> 		jne copywindow
  9348                              <2> 	nextcharwin:
  9349 000077DD 6631C9              <2> 		xor cx, cx
  9350 000077E0 8B3D[01790000]      <2> 		mov edi, [charposvbuf]
  9351 000077E6 81C702000000        <2> 		add edi, 2
  9352 000077EC 3B3D[19730000]      <2> 		cmp edi, [wincopyendpos]
  9353 000077F2 0F83F0000000        <2> 		jae near donewincopynow
  9354 000077F8 8A7F01              <2> 		mov bh, [edi + 1]
  9355 000077FB 80FF00              <2> 		cmp bh, 0
  9356 000077FE 7505                <2> 		jne nofixcolorwin
  9357 00007800 B707                <2> 		mov bh, 7
  9358 00007802 887F01              <2> 		mov [edi + 1], bh
  9359                              <2> 	nofixcolorwin:
  9360 00007805 883D[F7700000]      <2> 		mov [colorcache], bh
  9361 0000780B 8A1F                <2> 		mov bl, [edi]
  9362 0000780D 893D[01790000]      <2> 		mov [charposvbuf], edi
  9363 00007813 813D[0F730000]0000- <2> 		cmp dword [windowvideobuf2], 0
  9364 0000781B 0000                <2>
  9365 0000781D 7459                <2> 		je noskipcharcopy
  9366 0000781F 2B3D[0B730000]      <2> 		sub edi, [windowvideobuf]
  9367 00007825 033D[0F730000]      <2> 		add edi, [windowvideobuf2]
  9368 0000782B 8A6701              <2> 		mov ah, [edi + 1]
  9369 0000782E 8A07                <2> 		mov al, [edi]
  9370 00007830 6639D8              <2> 		cmp ax, bx
  9371 00007833 7543                <2> 		jne noskipcharcopy
  9372                              <2> 	skipcharcopy:
  9373 00007835 81C610000000        <2> 		add esi, 16
  9374 0000783B 668B0D[FF780000]    <2> 		mov cx, [charposline]
  9375 00007842 6641                <2> 		inc cx
  9376 00007844 66890D[FF780000]    <2> 		mov [charposline], cx
  9377 0000784B 663B0D[17730000]    <2> 		cmp cx, [termcol]
  9378 00007852 7289                <2> 		jb nextcharwin
  9379 00007854 6631C9              <2> 		xor cx, cx
  9380 00007857 66890D[FF780000]    <2> 		mov [charposline], cx
  9381 0000785E 31D2                <2> 		xor edx, edx
  9382 00007860 668B15[1C560000]    <2> 		mov dx, [resolutionx2]
  9383 00007867 C1E204              <2> 		shl edx, 4
  9384 0000786A 662B15[FF720000]    <2> 		sub dx, [winvcopydx]
  9385 00007871 01D6                <2> 		add esi, edx
  9386 00007873 E965FFFFFF          <2> 		jmp nextcharwin
  9387                              <2> 	noskipcharcopy:
  9388 00007878 881F                <2> 		mov [edi], bl
  9389 0000787A 887F01              <2> 		mov [edi + 1], bh
  9390 0000787D 8B3D[01790000]      <2> 		mov edi, [charposvbuf]
  9391 00007883 30FF                <2> 		xor bh, bh
  9392 00007885 66C1E304            <2> 		shl bx, 4
  9393 00007889 31D2                <2> 		xor edx, edx
  9394 0000788B 668B15[1C560000]    <2> 		mov dx, [resolutionx2]
  9395 00007892 C1E204              <2> 		shl edx, 4
  9396 00007895 29D6                <2> 		sub esi, edx
  9397 00007897 81C610000000        <2> 		add esi, 16
  9398 0000789D 89F7                <2> 		mov edi, esi
  9399 0000789F 668B0D[FF780000]    <2> 		mov cx, [charposline]
  9400 000078A6 6641                <2> 		inc cx
  9401 000078A8 663B0D[17730000]    <2> 		cmp cx, [termcol]
  9402 000078AF 7316                <2> 		jae fixwindowcopy
  9403 000078B1 66890D[FF780000]    <2> 		mov [charposline], cx
  9404 000078B8 6631C9              <2> 		xor cx, cx
  9405 000078BB 678AB7[2D8D]        <2> 		mov dh, [fonts + bx]
  9406 000078C0 D0CE                <2> 		ror dh, 1
  9407 000078C2 E9A0FEFFFF          <2> 		jmp copywindow
  9408                              <2> fixwindowcopy:
  9409 000078C7 6631C9              <2> 		xor cx, cx
  9410 000078CA 66890D[FF780000]    <2> 		mov [charposline], cx
  9411 000078D1 662B15[FF720000]    <2> 		sub dx, [winvcopydx]
  9412 000078D8 01D6                <2> 		add esi, edx
  9413 000078DA 89F7                <2> 		mov edi, esi
  9414 000078DC 678AB7[2D8D]        <2> 		mov dh, [fonts + bx]
  9415 000078E1 D0CE                <2> 		ror dh, 1
  9416 000078E3 E97FFEFFFF          <2> 		jmp copywindow
  9417                              <2> donewincopynow:
  9418 000078E8 803D[81220000]01    <2> 		cmp byte [termcopyon], 1
  9419 000078EF 7506                <2> 		jne forgetresetstuff
  9420 000078F1 E8B9ADFFFF          <2> 		call switchtermcursor
  9421 000078F6 61                  <2> 		popa
  9422                              <2> forgetresetstuff:
  9423 000078F7 C605[81220000]00    <2> 		mov byte [termcopyon], 0
  9424 000078FE C3                  <2> 		ret
  9425                              <2> 		
  9426 000078FF 0000                <2> charposline dw 0
  9427 00007901 00000000            <2> charposvbuf dw 0,0
  9428                              <1> 				
  9429 00007905 00                  <1> copygui db 0
  9430 00007906 00                  <1> graphicsset db 0
  9431 00007907 0000                <1> graphicspos db 0,0
  9432 00007909 00                  <1> showcursorfonton db 0
  9433 0000790A 00                  <1> savefonton db 0
  9434 0000790B 00                  <1> mouseselecton db 0
  9435                              <1> 
  9436 0000790C 00                  <1> pbutton db 0
  9437 0000790D 00                  <1> pLBUTTON db 0
  9438 0000790E 00                  <1> pRBUTTON db 0
  9439 0000790F 00000000            <1> dragging dw 0,0
  9440 00007913 0000000000000000    <1> lastpos dw 0,0,0,0
  9441 0000791B 00000000            <1> colorbuf dw 0,0
  9442                              <1> 	
  9443                              <1> 	clickicon:
  9444 0000791F B001                <1> 		mov al, 1
  9445 00007921 A2[0C790000]        <1> 		mov [pbutton], al
  9446 00007926 A0[0D790000]        <1> 		mov al, [pLBUTTON]
  9447 0000792B 2205[23590000]      <1> 		and al, [LBUTTON]
  9448 00007931 8A25[0E790000]      <1> 		mov ah, [pRBUTTON]
  9449 00007937 2225[24590000]      <1> 		and ah, [RBUTTON]
  9450 0000793D 08E0                <1> 		or al, ah
  9451 0000793F 3C00                <1> 		cmp al, 0
  9452 00007941 741B                <1> 		je nodragclick
  9453 00007943 813D[0F790000]0100- <1> 		cmp dword [dragging], 1
  9454 0000794B 0000                <1>
  9455 0000794D 732D                <1> 		jae dragclick
  9456 0000794F C705[0F790000]0100- <1> 		mov dword [dragging], 1
  9457 00007957 0000                <1>
  9458 00007959 E91E000000          <1> 		jmp dragclick
  9459                              <1> 	nodragclick:
  9460 0000795E C705[0F790000]0000- <1> 		mov dword [dragging], 0
  9461 00007966 0000                <1>
  9462 00007968 A0[23590000]        <1> 		mov al, [LBUTTON]
  9463 0000796D A2[0D790000]        <1> 		mov [pLBUTTON], al
  9464 00007972 A0[24590000]        <1> 		mov al, [RBUTTON]
  9465 00007977 A2[0E790000]        <1> 		mov [pRBUTTON], al
  9466                              <1> 	dragclick:
  9467 0000797C 6631C0              <1> 		xor ax, ax
  9468 0000797F BE[BFCF0000]        <1> 		mov esi, graphicstable
  9469 00007984 C705[7F810000]0000- <1> 		mov dword [codepointer], 0
  9470 0000798C 0000                <1>
  9471                              <1> 	clicon2:
  9472 0000798E 31D2                <1> 		xor edx, edx
  9473 00007990 31C9                <1> 		xor ecx, ecx
  9474 00007992 66813E0100          <1> 		cmp word [esi], 1
  9475 00007997 0F841B000000        <1> 		je near iconselect
  9476 0000799D 66813E0200          <1> 		cmp word [esi], 2
  9477 000079A2 0F8472010000        <1> 		je near textselected
  9478 000079A8 66813E0300          <1> 		cmp word [esi], 3
  9479 000079AD 0F84C7020000        <1> 		je near windowselect
  9480 000079B3 E90B040000          <1> 		jmp nexticonsel
  9481                              <1> 	iconselect:
  9482 000079B8 668B5606            <1> 		mov dx, [esi + 6]
  9483 000079BC 6689D0              <1> 		mov ax, dx
  9484 000079BF 668B4E08            <1> 		mov cx, [esi + 8]
  9485 000079C3 6689CB              <1> 		mov bx, cx
  9486 000079C6 6681C32000          <1> 		add bx, 32
  9487 000079CB 6601D0              <1> 		add ax, dx
  9488 000079CE 813D[0F790000]0100- <1> 		cmp dword [dragging], 1
  9489 000079D6 0000                <1>
  9490 000079D8 746F                <1> 		je dragicon
  9491 000079DA 813D[0F790000]0000- <1> 		cmp dword [dragging], 0
  9492 000079E2 0000                <1>
  9493 000079E4 7411                <1> 		je nodragiconcheck
  9494 000079E6 3935[0F790000]      <1> 		cmp dword [dragging], esi
  9495 000079EC 0F85D1030000        <1> 		jne near nexticonsel
  9496 000079F2 E952000000          <1> 		jmp dragicon
  9497                              <1> 	nodragiconcheck:
  9498 000079F7 663905[12580000]    <1> 		cmp [mousecursorposition], ax
  9499 000079FE 0F82BF030000        <1> 		jb near nexticonsel
  9500 00007A04 66054000            <1> 		add ax, 64
  9501 00007A08 663905[12580000]    <1> 		cmp [mousecursorposition], ax
  9502 00007A0F 0F87AE030000        <1> 		ja near nexticonsel
  9503 00007A15 6629D0              <1> 		sub ax, dx
  9504 00007A18 66390D[14580000]    <1> 		cmp [mousecursorposition + 2], cx
  9505 00007A1F 0F829E030000        <1> 		jb near nexticonsel
  9506 00007A25 66391D[14580000]    <1> 		cmp [mousecursorposition + 2], bx
  9507 00007A2C 0F8791030000        <1> 		ja near nexticonsel
  9508 00007A32 668B460A            <1> 		mov ax, [esi + 10]
  9509 00007A36 66250100            <1> 		and ax, 1
  9510 00007A3A 663D0100            <1> 		cmp ax, 1
  9511 00007A3E 0F84B6000000        <1> 		je near unselecticon
  9512 00007A44 E98D000000          <1> 		jmp nodragicon
  9513                              <1> 	dragicon:
  9514 00007A49 663905[0E580000]    <1> 		cmp [lastmouseposition], ax
  9515 00007A50 0F826D030000        <1> 		jb near nexticonsel
  9516 00007A56 66054000            <1> 		add ax, 64
  9517 00007A5A 663905[0E580000]    <1> 		cmp [lastmouseposition], ax
  9518 00007A61 0F875C030000        <1> 		ja near nexticonsel
  9519 00007A67 6629D0              <1> 		sub ax, dx
  9520 00007A6A 66390D[10580000]    <1> 		cmp [lastmouseposition + 2], cx
  9521 00007A71 0F824C030000        <1> 		jb near nexticonsel
  9522 00007A77 66391D[10580000]    <1> 		cmp [lastmouseposition + 2], bx
  9523 00007A7E 0F873F030000        <1> 		ja near nexticonsel
  9524 00007A84 668B460A            <1> 		mov ax, [esi + 10]
  9525 00007A88 2410                <1> 		and al, 00010000b
  9526 00007A8A 3C10                <1> 		cmp al, 00010000b
  9527 00007A8C 7448                <1> 		je nodragicon
  9528 00007A8E 8935[0F790000]      <1> 		mov [dragging], esi
  9529 00007A94 66D1E2              <1> 		shl dx, 1
  9530 00007A97 662B15[0E580000]    <1> 		sub dx, [lastmouseposition]
  9531 00007A9E 660315[12580000]    <1> 		add dx, [mousecursorposition]
  9532 00007AA5 66D1EA              <1> 		shr dx, 1
  9533 00007AA8 66030D[14580000]    <1> 		add cx, [mousecursorposition + 2]
  9534 00007AAF 662B0D[10580000]    <1> 		sub cx, [lastmouseposition + 2]
  9535 00007AB6 663B15[1C560000]    <1> 		cmp dx, [resolutionx2]
  9536 00007ABD 7607                <1> 		jbe chkyresdrgicn
  9537 00007ABF 668B15[12580000]    <1> 		mov dx, [mousecursorposition]
  9538                              <1> 	chkyresdrgicn:
  9539 00007AC6 663B0D[30550000]    <1> 		cmp cx, [resolutiony]
  9540 00007ACD 7607                <1> 		jbe nodragicon
  9541 00007ACF 668B0D[14580000]    <1> 		mov cx, [mousecursorposition + 2]
  9542                              <1> 	nodragicon:
  9543 00007AD6 66814E0A0100        <1> 		or word [esi + 10], 1
  9544 00007ADC 8B5E0C              <1> 		mov ebx, [esi + 12]
  9545 00007ADF 668B460A            <1> 		mov ax, [esi + 10]
  9546 00007AE3 8B7602              <1> 		mov esi, [esi + 2]
  9547 00007AE6 C705[7F810000]0000- <1> 		mov dword [codepointer], 0
  9548 00007AEE 0000                <1>
  9549 00007AF0 E886EDFFFF          <1> 		call showicon
  9550 00007AF5 E9E2020000          <1> 		jmp doneiconsel
  9551                              <1> 	unselecticon:
  9552 00007AFA 6681660AFEFF        <1> 		and word [esi + 10], 0xFFFE
  9553 00007B00 8B5E0C              <1> 		mov ebx, [esi + 12]
  9554 00007B03 668B460A            <1> 		mov ax, [esi + 10]
  9555 00007B07 8B7602              <1> 		mov esi, [esi + 2]
  9556 00007B0A 891D[7F810000]      <1> 		mov [codepointer], ebx
  9557 00007B10 E866EDFFFF          <1> 		call showicon
  9558 00007B15 E9C2020000          <1> 		jmp doneiconsel
  9559                              <1> 	textselected:
  9560 00007B1A 8B5E02              <1> 		mov ebx, [esi + 2]
  9561 00007B1D 668B5606            <1> 		mov dx, [esi + 6]
  9562 00007B21 6689D0              <1> 		mov ax, dx
  9563 00007B24 668B4E08            <1> 		mov cx, [esi + 8]
  9564                              <1> 	lengthtesttext:
  9565 00007B28 803B00              <1> 		cmp byte [ebx], 0
  9566 00007B2B 7407                <1> 		je donetesttextlength
  9567 00007B2D 43                  <1> 		inc ebx
  9568 00007B2E 66051000            <1> 		add ax, 16
  9569 00007B32 EBF4                <1> 		jmp lengthtesttext
  9570                              <1> 	donetesttextlength:
  9571 00007B34 6689CB              <1> 		mov bx, cx
  9572 00007B37 6681C30F00          <1> 		add bx, 15
  9573 00007B3C 813D[0F790000]0100- <1> 		cmp dword [dragging], 1
  9574 00007B44 0000                <1>
  9575 00007B46 7468                <1> 		je dragtext
  9576 00007B48 813D[0F790000]0000- <1> 		cmp dword [dragging], 0
  9577 00007B50 0000                <1>
  9578 00007B52 7411                <1> 		je nodragtextcheck
  9579 00007B54 3935[0F790000]      <1> 		cmp dword [dragging], esi
  9580 00007B5A 0F8563020000        <1> 		jne near nexticonsel
  9581 00007B60 E94B000000          <1> 		jmp dragtext
  9582                              <1> 	nodragtextcheck:
  9583 00007B65 663915[12580000]    <1> 		cmp [mousecursorposition], dx
  9584 00007B6C 0F8251020000        <1> 		jb near nexticonsel
  9585 00007B72 663905[12580000]    <1> 		cmp [mousecursorposition], ax
  9586 00007B79 0F8744020000        <1> 		ja near nexticonsel
  9587 00007B7F 66390D[14580000]    <1> 		cmp [mousecursorposition + 2], cx
  9588 00007B86 0F8237020000        <1> 		jb near nexticonsel
  9589 00007B8C 66391D[14580000]    <1> 		cmp [mousecursorposition + 2], bx
  9590 00007B93 0F872A020000        <1> 		ja near nexticonsel
  9591 00007B99 668B460A            <1> 		mov ax, [esi + 10]
  9592 00007B9D 66250100            <1> 		and ax, 1
  9593 00007BA1 663D0100            <1> 		cmp ax, 1
  9594 00007BA5 0F84AB000000        <1> 		je near unselecttext
  9595 00007BAB E986000000          <1> 		jmp nodragtext
  9596                              <1> 	dragtext:
  9597 00007BB0 663915[0E580000]    <1> 		cmp [lastmouseposition], dx
  9598 00007BB7 0F8206020000        <1> 		jb near nexticonsel
  9599 00007BBD 663905[0E580000]    <1> 		cmp [lastmouseposition], ax
  9600 00007BC4 0F87F9010000        <1> 		ja near nexticonsel
  9601 00007BCA 66390D[10580000]    <1> 		cmp [lastmouseposition + 2], cx
  9602 00007BD1 0F82EC010000        <1> 		jb near nexticonsel
  9603 00007BD7 66391D[10580000]    <1> 		cmp [lastmouseposition + 2], bx
  9604 00007BDE 0F87DF010000        <1> 		ja near nexticonsel
  9605 00007BE4 668B460A            <1> 		mov ax, [esi + 10]
  9606 00007BE8 2410                <1> 		and al, 00010000b
  9607 00007BEA 663D1000            <1> 		cmp ax, 00010000b
  9608 00007BEE 0F8442000000        <1> 		je near nodragtext
  9609 00007BF4 8935[0F790000]      <1> 		mov [dragging], esi
  9610 00007BFA 662B15[0E580000]    <1> 		sub dx, [lastmouseposition]
  9611 00007C01 660315[12580000]    <1> 		add dx, [mousecursorposition]
  9612 00007C08 66030D[14580000]    <1> 		add cx, [mousecursorposition + 2]
  9613 00007C0F 662B0D[10580000]    <1> 		sub cx, [lastmouseposition + 2]
  9614 00007C16 663B15[1C560000]    <1> 		cmp dx, [resolutionx2]
  9615 00007C1D 7607                <1> 		jbe chkyresdrgtxt
  9616 00007C1F 668B15[12580000]    <1> 		mov dx, [mousecursorposition]
  9617                              <1> 	chkyresdrgtxt:
  9618 00007C26 663B0D[30550000]    <1> 		cmp cx, [resolutiony]
  9619 00007C2D 7607                <1> 		jbe nodragtext
  9620 00007C2F 668B0D[14580000]    <1> 		mov cx, [mousecursorposition + 2]
  9621                              <1> 	nodragtext:
  9622 00007C36 66814E0A0100        <1> 		or word [esi + 10], 1
  9623 00007C3C 8B5E0C              <1> 		mov ebx, [esi + 12]
  9624 00007C3F 891D[7F810000]      <1> 		mov [codepointer], ebx
  9625 00007C45 668B460A            <1> 		mov ax, [esi + 10]
  9626 00007C49 8B7602              <1> 		mov esi, [esi + 2]
  9627 00007C4C E863F4FFFF          <1> 		call showstring
  9628 00007C51 E986010000          <1> 		jmp doneiconsel
  9629                              <1> 	unselecttext:
  9630 00007C56 6681660AFEFF        <1> 		and word [esi + 10], 0xFFFE
  9631 00007C5C 8B5E0C              <1> 		mov ebx, [esi + 12]
  9632 00007C5F 668B460A            <1> 		mov ax, [esi + 10]
  9633 00007C63 8B7602              <1> 		mov esi, [esi + 2]
  9634 00007C66 C705[7F810000]0000- <1> 		mov dword [codepointer], 0
  9635 00007C6E 0000                <1>
  9636 00007C70 E83FF4FFFF          <1> 		call showstring
  9637 00007C75 E962010000          <1> 		jmp doneiconsel
  9638                              <1> windowselect:
  9639 00007C7A 8B7E02              <1> 		mov edi, [esi + 2]
  9640 00007C7D 668B5606            <1> 		mov dx, [esi + 6]
  9641 00007C81 6689D0              <1> 		mov ax, dx
  9642 00007C84 668B4E08            <1> 		mov cx, [esi + 8]
  9643 00007C88 6689CB              <1> 		mov bx, cx
  9644 00007C8B 6681C31000          <1> 		add bx, 16
  9645 00007C90 813D[0F790000]0100- <1> 		cmp dword [dragging], 1
  9646 00007C98 0000                <1>
  9647 00007C9A 746D                <1> 		je dragwin
  9648 00007C9C 813D[0F790000]0000- <1> 		cmp dword [dragging], 0
  9649 00007CA4 0000                <1>
  9650 00007CA6 7411                <1> 		je nodragwincheck
  9651 00007CA8 3935[0F790000]      <1> 		cmp dword [dragging], esi
  9652 00007CAE 0F850F010000        <1> 		jne near nexticonsel
  9653 00007CB4 E950000000          <1> 		jmp dragwin
  9654                              <1> 	nodragwincheck:
  9655 00007CB9 663905[12580000]    <1> 		cmp [mousecursorposition], ax
  9656 00007CC0 0F82FD000000        <1> 		jb near nexticonsel
  9657 00007CC6 660307              <1> 		add ax, [edi]
  9658 00007CC9 660307              <1> 		add ax, [edi]
  9659 00007CCC 663905[12580000]    <1> 		cmp [mousecursorposition], ax
  9660 00007CD3 0F87EA000000        <1> 		ja near nexticonsel
  9661 00007CD9 66390D[14580000]    <1> 		cmp [mousecursorposition + 2], cx
  9662 00007CE0 0F82DD000000        <1> 		jb near nexticonsel
  9663 00007CE6 66391D[14580000]    <1> 		cmp [mousecursorposition + 2], bx
  9664 00007CED 0F87D0000000        <1> 		ja near nexticonsel
  9665 00007CF3 662D1400            <1> 		sub ax, 20
  9666 00007CF7 663905[12580000]    <1> 		cmp [mousecursorposition], ax
  9667 00007CFE 0F87A4000000        <1> 		ja near killwin
  9668 00007D04 E98B000000          <1> 		jmp nodragwin
  9669                              <1> 	dragwin:
  9670 00007D09 663905[0E580000]    <1> 		cmp [lastmouseposition], ax
  9671 00007D10 0F82AD000000        <1> 		jb near nexticonsel
  9672 00007D16 660307              <1> 		add ax, [edi]
  9673 00007D19 660307              <1> 		add ax, [edi]
  9674 00007D1C 663905[0E580000]    <1> 		cmp [lastmouseposition], ax
  9675 00007D23 0F879A000000        <1> 		ja near nexticonsel
  9676 00007D29 66390D[10580000]    <1> 		cmp [lastmouseposition + 2], cx
  9677 00007D30 0F828D000000        <1> 		jb near nexticonsel
  9678 00007D36 66391D[10580000]    <1> 		cmp [lastmouseposition + 2], bx
  9679 00007D3D 0F8780000000        <1> 		ja near nexticonsel
  9680 00007D43 8935[0F790000]      <1> 		mov [dragging], esi
  9681 00007D49 803D[697E0000]01    <1> 		cmp byte [windrag], 1
  9682 00007D50 7706                <1> 		ja .nochangewindrag
  9683 00007D52 FE05[697E0000]      <1> 		inc byte [windrag]
  9684                              <1> 	.nochangewindrag:
  9685 00007D58 662B15[0E580000]    <1> 		sub dx, [lastmouseposition]
  9686 00007D5F 660315[12580000]    <1> 		add dx, [mousecursorposition]
  9687 00007D66 66030D[14580000]    <1> 		add cx, [mousecursorposition + 2]
  9688 00007D6D 662B0D[10580000]    <1> 		sub cx, [lastmouseposition + 2]
  9689 00007D74 663B15[1C560000]    <1> 		cmp dx, [resolutionx2]
  9690 00007D7B 7607                <1> 		jbe chkyresdrgwin
  9691 00007D7D 668B15[12580000]    <1> 		mov dx, [mousecursorposition]
  9692                              <1> 	chkyresdrgwin:
  9693 00007D84 663B0D[30550000]    <1> 		cmp cx, [resolutiony]
  9694 00007D8B 7607                <1> 		jbe nodragwin
  9695 00007D8D 668B0D[14580000]    <1> 		mov cx, [mousecursorposition + 2]
  9696                              <1> 	nodragwin:
  9697 00007D94 8B5E0C              <1> 		mov ebx, [esi + 12]
  9698 00007D97 668B460A            <1> 		mov ax, [esi + 10]
  9699 00007D9B 8B7602              <1> 		mov esi, [esi + 2]
  9700 00007D9E E87AF5FFFF          <1> 		call showwindow
  9701 00007DA3 E934000000          <1> 		jmp doneiconsel
  9702                              <1> 	killwin:
  9703 00007DA8 66C7060000          <1> 		mov word [esi], 0
  9704 00007DAD C605[80220000]00    <1> 		mov byte [termguion], 0
  9705 00007DB4 E8C3ECFFFF          <1> 		call guiclear
  9706 00007DB9 E843EDFFFF          <1> 		call reloadallgraphics
  9707 00007DBE E96CE7FFFF          <1> 		jmp guistart
  9708                              <1> ;		jmp doneiconsel2
  9709                              <1> 	nexticonsel:
  9710 00007DC3 6681660AFEFF        <1> 		and word [esi + 10], 0xFFFE
  9711 00007DC9 81C610000000        <1> 		add esi, 16
  9712 00007DCF 81FE[BFD10000]      <1> 		cmp esi, graphicstableend
  9713 00007DD5 7305                <1> 		jae doneiconsel
  9714 00007DD7 E9B2FBFFFF          <1> 		jmp clicon2
  9715                              <1> 	doneiconsel:
  9716 00007DDC 813D[0F790000]0100- <1> 		cmp dword [dragging], 1
  9717 00007DE4 0000                <1>
  9718 00007DE6 731C                <1> 		jae doneiconsel2
  9719 00007DE8 30C0                <1> 		xor al, al
  9720 00007DEA A2[697E0000]        <1> 		mov [windrag], al
  9721 00007DEF 813D[7F810000]0000- <1> 		cmp dword [codepointer], 0
  9722 00007DF7 0000                <1>
  9723 00007DF9 7409                <1> 		je doneiconsel2
  9724 00007DFB 8B1D[7F810000]      <1> 		mov ebx, [codepointer]
  9725 00007E01 FFD3                <1> 		call ebx
  9726 00007E03 C3                  <1> 		ret
  9727                              <1> 	doneiconsel2:
  9728 00007E04 A0[23590000]        <1> 		mov al, [LBUTTON]
  9729 00007E09 A2[0D790000]        <1> 		mov [pLBUTTON], al
  9730 00007E0E A0[24590000]        <1> 		mov al, [RBUTTON]
  9731 00007E13 A2[0E790000]        <1> 		mov [pRBUTTON], al
  9732 00007E18 813D[0F790000]0100- <1> 		cmp dword [dragging], 1
  9733 00007E20 0000                <1>
  9734 00007E22 0F8613000000        <1> 		jbe near noreloadgraphicsclick
  9735 00007E28 803D[697E0000]01    <1> 		cmp byte [windrag], 1
  9736 00007E2F 7305                <1> 		jae noclearcursorcl
  9737 00007E31 E8E6E8FFFF          <1> 		call clearmousecursor
  9738                              <1> noclearcursorcl:
  9739 00007E36 E8C6ECFFFF          <1> 		call reloadallgraphics
  9740                              <1> noreloadgraphicsclick:
  9741 00007E3B 30E4                <1> 		xor ah, ah
  9742 00007E3D 31C9                <1> 		xor ecx, ecx
  9743 00007E3F 31D2                <1> 		xor edx, edx
  9744 00007E41 B0FE                <1> 		mov al, 254
  9745 00007E43 668B15[12580000]    <1> 		mov dx, [mousecursorposition]
  9746 00007E4A 668B0D[14580000]    <1> 		mov cx, [mousecursorposition + 2]
  9747 00007E51 66BBE738            <1> 		mov bx, 0011100011100111b
  9748 00007E55 C605[09790000]01    <1> 		mov byte [showcursorfonton], 1
  9749 00007E5C E8A5F2FFFF          <1> 		call showfontvesa
  9750 00007E61 C605[09790000]00    <1> 		mov byte [showcursorfonton], 0
  9751 00007E68 C3                  <1> 		ret
  9752 00007E69 00                  <1> windrag db 0
  9753 00007E6A 00000000            <1> lastdrag dw 0,0
  9754 00007E6E 00000000            <1> grpctblpos dw 0,0
  9755                              <1> 
  9756                              <1> 
  9757                              <1> 
  9758 00007E72 00<rept>            <1> grphbuf times 16 db 0
  9759                              <1> 	graphicsadd:
  9760 00007E82 BF[BFCF0000]        <1> 		mov edi, graphicstable
  9761                              <1> 	shwgrph1:
  9762 00007E87 397702              <1> 		cmp dword [edi + 2], esi
  9763 00007E8A 7414                <1> 		je showgraphicsreplace2
  9764 00007E8C 81C710000000        <1> 		add edi, 16
  9765 00007E92 81FF[BFD10000]      <1> 		cmp edi, graphicstableend
  9766 00007E98 0F8361020000        <1> 		jae near showgraphicsnew
  9767 00007E9E EBE7                <1> 		jmp shwgrph1
  9768                              <1> 	showgraphicsreplace2:
  9769 00007EA0 8935[747E0000]      <1> 		mov [grphbuf + 2], esi
  9770 00007EA6 668915[787E0000]    <1> 		mov [grphbuf + 6], dx
  9771 00007EAD 66890D[7A7E0000]    <1> 		mov [grphbuf + 8], cx
  9772 00007EB4 891D[7E7E0000]      <1> 		mov [grphbuf + 12], ebx
  9773 00007EBA 30FF                <1> 		xor bh, bh
  9774 00007EBC 88E3                <1> 		mov bl, ah
  9775 00007EBE 30E4                <1> 		xor ah, ah
  9776 00007EC0 66A3[7C7E0000]      <1> 		mov [grphbuf + 10], ax	
  9777 00007EC6 66891D[727E0000]    <1> 		mov [grphbuf], bx
  9778 00007ECD 66A1[727E0000]      <1> 		mov ax, [grphbuf]
  9779 00007ED3 663D0100            <1> 		cmp ax, 1
  9780 00007ED7 0F8419000000        <1> 		je near replaceicon
  9781 00007EDD 663D0200            <1> 		cmp ax, 2
  9782 00007EE1 0F8493000000        <1> 		je near replacestring
  9783 00007EE7 663D0300            <1> 		cmp ax, 3
  9784 00007EEB 0F840F010000        <1> 		je near replacewindow
  9785 00007EF1 E9E6010000          <1> 		jmp showgraphicsreplace
  9786                              <1> 	replaceicon:
  9787 00007EF6 893D[13790000]      <1> 		mov [lastpos], edi
  9788 00007EFC 8935[17790000]      <1> 		mov [lastpos + 4], esi
  9789 00007F02 8B7702              <1> 		mov esi, [edi + 2]
  9790 00007F05 668B5F0C            <1> 		mov bx, [edi + 12]
  9791 00007F09 668B5706            <1> 		mov dx, [edi + 6]
  9792 00007F0D 668B4F08            <1> 		mov cx, [edi + 8]
  9793 00007F11 668B06              <1> 		mov ax, [esi]
  9794 00007F14 66A3[1B790000]      <1> 		mov [colorbuf], ax
  9795 00007F1A 66A1[FD6A0000]      <1> 		mov ax, [background]
  9796 00007F20 668906              <1> 		mov [esi], ax
  9797 00007F23 8B5F0C              <1> 		mov ebx, [edi + 12]
  9798 00007F26 668B470A            <1> 		mov ax, [edi + 10]
  9799 00007F2A 2401                <1> 		and al, 1
  9800 00007F2C A2[83810000]        <1> 		mov [iconselected], al
  9801 00007F31 668B470A            <1> 		mov ax, [edi + 10]
  9802 00007F35 E854E9FFFF          <1> 		call showicon2
  9803 00007F3A 8B3D[13790000]      <1> 		mov edi, [lastpos]
  9804 00007F40 8B7702              <1> 		mov esi, [edi + 2]
  9805 00007F43 66A1[1B790000]      <1> 		mov ax, [colorbuf]
  9806 00007F49 668906              <1> 		mov [esi], ax
  9807 00007F4C 8B35[17790000]      <1> 		mov esi, [lastpos + 4]
  9808 00007F52 668B15[787E0000]    <1> 		mov dx, [grphbuf + 6]
  9809 00007F59 668B0D[7A7E0000]    <1> 		mov cx, [grphbuf + 8]
  9810 00007F60 668B1D[727E0000]    <1> 		mov bx, [grphbuf]
  9811 00007F67 66A1[7C7E0000]      <1> 		mov ax, [grphbuf + 10]
  9812 00007F6D 88DC                <1> 		mov ah, bl
  9813 00007F6F 8B1D[7E7E0000]      <1> 		mov ebx, [grphbuf + 12]
  9814 00007F75 E962010000          <1> 		jmp showgraphicsreplace
  9815                              <1> 	replacestring:
  9816 00007F7A 893D[13790000]      <1> 		mov [lastpos], edi
  9817 00007F80 8935[17790000]      <1> 		mov [lastpos + 4], esi
  9818 00007F86 8B5F0C              <1> 		mov ebx, [edi + 12]
  9819 00007F89 8B7702              <1> 		mov esi, [edi + 2]
  9820 00007F8C 668B5706            <1> 		mov dx, [edi + 6]
  9821 00007F90 668B4F08            <1> 		mov cx, [edi + 8]
  9822 00007F94 66A1[F5700000]      <1> 		mov ax, [colorfont2]
  9823 00007F9A 66A3[1B790000]      <1> 		mov [colorbuf], ax
  9824 00007FA0 66A1[FD6A0000]      <1> 		mov ax, [background]
  9825 00007FA6 66A3[F5700000]      <1> 		mov [colorfont2], ax		
  9826 00007FAC 8B5F0C              <1> 		mov ebx, [edi + 12]
  9827 00007FAF 668B470A            <1> 		mov ax, [edi + 10]
  9828 00007FB3 2401                <1> 		and al, 1
  9829 00007FB5 A2[0B790000]        <1> 		mov [mouseselecton], al
  9830 00007FBA 668B470A            <1> 		mov ax, [edi + 10]
  9831 00007FBE E804F1FFFF          <1> 		call showstring2
  9832 00007FC3 66A1[1B790000]      <1> 		mov ax, [colorbuf]
  9833 00007FC9 66A3[F5700000]      <1> 		mov [colorfont2], ax
  9834 00007FCF 8B3D[13790000]      <1> 		mov edi, [lastpos]
  9835 00007FD5 8B7702              <1> 		mov esi, [edi + 2]
  9836 00007FD8 668B15[787E0000]    <1> 		mov dx, [grphbuf + 6]
  9837 00007FDF 668B0D[7A7E0000]    <1> 		mov cx, [grphbuf + 8]
  9838 00007FE6 668B1D[727E0000]    <1> 		mov bx, [grphbuf]
  9839 00007FED 66A1[7C7E0000]      <1> 		mov ax, [grphbuf + 10]
  9840 00007FF3 88DC                <1> 		mov ah, bl
  9841 00007FF5 8B1D[7E7E0000]      <1> 		mov ebx, [grphbuf + 12]
  9842 00007FFB E9DC000000          <1> 		jmp showgraphicsreplace
  9843                              <1> 	replacewindow:
  9844 00008000 893D[13790000]      <1> 		mov [lastpos], edi
  9845 00008006 8935[17790000]      <1> 		mov [lastpos + 4], esi
  9846 0000800C 8B7702              <1> 		mov esi, [edi + 2]
  9847 0000800F 8B3D[07730000]      <1> 		mov edi, [windowbufloc]
  9848 00008015 31D2                <1> 		xor edx, edx
  9849 00008017 668B15[1C560000]    <1> 		mov dx, [resolutionx2]
  9850 0000801E C1E204              <1> 		shl edx, 4
  9851 00008021 29D7                <1> 		sub edi, edx
  9852 00008023 31D2                <1> 		xor edx, edx
  9853 00008025 668B16              <1> 		mov dx, [esi]
  9854 00008028 660316              <1> 		add dx, [esi]
  9855 0000802B 668B4E02            <1> 		mov cx, [esi + 2]
  9856 0000802F 6681C11000          <1> 		add cx, 16
  9857 00008034 66A1[FD6A0000]      <1> 		mov ax, [background]
  9858 0000803A 803D[697E0000]01    <1> 		cmp byte [windrag], 1
  9859 00008041 7609                <1> 		jbe clearwindow
  9860 00008043 662B4E02            <1> 		sub cx, [esi + 2]	;only clear the title bar and 16 extra lines (for the cursor)
  9861 00008047 6681C11000          <1> 		add cx, 16
  9862                              <1> 	clearwindow:
  9863                              <1> 		%ifdef gui.background
  9864 0000804C 813D[CF6A0000]0000- <1> 			cmp dword [backgroundimage], 0
  9865 00008054 0000                <1>
  9866 00008056 7419                <1> 			je .noback
  9867 00008058 56                  <1> 			push esi
  9868 00008059 8B35[CF6A0000]      <1> 			mov esi, [backgroundimage]
  9869 0000805F 2B3D[44550000]      <1> 			sub edi, [physbaseptr]
  9870 00008065 01FE                <1> 			add esi, edi
  9871 00008067 033D[44550000]      <1> 			add edi, [physbaseptr]
  9872 0000806D 668B06              <1> 			mov ax, [esi]
  9873 00008070 5E                  <1> 			pop esi
  9874                              <1> 		.noback:
  9875                              <1> 		%endif
  9876 00008071 668907              <1> 		mov [edi], ax
  9877 00008074 81C702000000        <1> 		add edi, 2
  9878 0000807A 81EA02000000        <1> 		sub edx, 2
  9879 00008080 81FA00000000        <1> 		cmp edx, 0
  9880 00008086 75C4                <1> 		jne clearwindow
  9881 00008088 6649                <1> 		dec cx
  9882 0000808A 668B15[1C560000]    <1> 		mov dx, [resolutionx2]
  9883 00008091 662B16              <1> 		sub dx, [esi]
  9884 00008094 662B16              <1> 		sub dx, [esi]
  9885 00008097 01D7                <1> 		add edi, edx
  9886 00008099 668B16              <1> 		mov dx, [esi]
  9887 0000809C 660316              <1> 		add dx, [esi]
  9888 0000809F 6681F90000          <1> 		cmp cx, 0
  9889 000080A4 75A6                <1> 		jne clearwindow
  9890                              <1> 	endwindowclear:
  9891 000080A6 C605[81220000]00    <1> 		mov byte [termcopyon], 0
  9892 000080AD 8B3D[13790000]      <1> 		mov edi, [lastpos]
  9893 000080B3 8B35[747E0000]      <1> 		mov esi, [grphbuf + 2]
  9894 000080B9 668B15[787E0000]    <1> 		mov dx, [grphbuf + 6]
  9895 000080C0 668B0D[7A7E0000]    <1> 		mov cx, [grphbuf + 8]
  9896 000080C7 668B1D[727E0000]    <1> 		mov bx, [grphbuf]
  9897 000080CE 66A1[7C7E0000]      <1> 		mov ax, [grphbuf + 10]
  9898 000080D4 88DC                <1> 		mov ah, bl
  9899 000080D6 8B1D[7E7E0000]      <1> 		mov ebx, [grphbuf + 12]
  9900                              <1> 	showgraphicsreplace:
  9901 000080DC 897702              <1> 		mov [edi + 2], esi
  9902 000080DF 66895706            <1> 		mov [edi + 6], dx
  9903 000080E3 66894F08            <1> 		mov [edi + 8], cx
  9904 000080E7 895F0C              <1> 		mov [edi + 12], ebx
  9905 000080EA 30FF                <1> 		xor bh, bh
  9906 000080EC 88E3                <1> 		mov bl, ah
  9907 000080EE 30E4                <1> 		xor ah, ah
  9908 000080F0 6689470A            <1> 		mov [edi + 10], ax
  9909 000080F4 66891F              <1> 		mov [edi], bx
  9910 000080F7 8B5F0C              <1> 		mov ebx, [edi + 12]
  9911 000080FA 668B470A            <1> 		mov ax, [edi + 10]
  9912 000080FE C3                  <1> 		ret
  9913                              <1> 	showgraphicsnew:
  9914 000080FF BF[BFCF0000]        <1> 		mov edi, graphicstable
  9915                              <1> 	shwgrph2:
  9916 00008104 66813F0000          <1> 		cmp word [edi], 0
  9917 00008109 74D1                <1> 		je showgraphicsreplace
  9918 0000810B 81C710000000        <1> 		add edi, 16
  9919 00008111 81FF[BFD10000]      <1> 		cmp edi, graphicstableend
  9920 00008117 72EB                <1> 		jb shwgrph2
  9921                              <1> 	showgraphicsdone:
  9922 00008119 C3                  <1> 		ret
  9923                              <1> 	
  9924                              <1> putpixel: ;color in si, point is (dx,cx)
  9925                              <1> 		;destroys edi, ebx, eax
  9926 0000811A 6650                <1> 	push ax
  9927 0000811C 6653                <1> 	push bx
  9928 0000811E 31C0                <1> 	xor eax, eax
  9929 00008120 31DB                <1> 	xor ebx, ebx
  9930 00008122 31FF                <1> 	xor edi, edi
  9931 00008124 668B1D[30550000]    <1> 	mov bx, [resolutiony]
  9932 0000812B 66A1[2E550000]      <1> 	mov ax, [resolutionx]
  9933 00008131 6639C2              <1> 	cmp dx, ax
  9934 00008134 7720                <1> 	ja .doneput
  9935 00008136 66D1E0              <1> 	shl ax, 1
  9936 00008139 6639D9              <1> 	cmp cx, bx
  9937 0000813C 7718                <1> 	ja .doneput
  9938 0000813E 6689CB              <1> 	mov bx, cx
  9939 00008141 52                  <1> 	push edx
  9940 00008142 F7E3                <1> 	mul ebx
  9941 00008144 5A                  <1> 	pop edx
  9942 00008145 6601D7              <1> 	add di, dx
  9943 00008148 6601D7              <1> 	add di, dx
  9944 0000814B 01C7                <1> 	add edi, eax
  9945 0000814D 033D[44550000]      <1> 	add edi, [physbaseptr]
  9946 00008153 668937              <1> 	mov [edi], si
  9947                              <1> .doneput:
  9948 00008156 665B                <1> 	pop bx
  9949 00008158 6658                <1> 	pop ax
  9950 0000815A C3                  <1> 	ret
  9951                              <1> 	
  9952                              <1> getpixelmem:	;pixel in (dx, cx), outputs memory location in edi
  9953 0000815B 31FF                <1> 	xor edi, edi
  9954 0000815D 31C0                <1> 	xor eax, eax
  9955 0000815F 31DB                <1> 	xor ebx, ebx
  9956 00008161 668B1D[1C560000]    <1> 	mov bx, [resolutionx2]
  9957 00008168 6689D7              <1> 	mov di, dx
  9958 0000816B 6601D7              <1> 	add di, dx
  9959 0000816E 6689C8              <1> 	mov ax, cx
  9960 00008171 F7E3                <1> 	mul ebx
  9961 00008173 01C7                <1> 	add edi, eax
  9962 00008175 033D[44550000]      <1> 	add edi, [physbaseptr]
  9963 0000817B C3                  <1> 	ret
  9964                              <1> 
  9965 0000817C 00                  <1> 	mouseon db 0
  9966 0000817D 0000                <1> 	icon dw 0	;pointer to icon
  9967 0000817F 00000000            <1> 	codepointer dd 0 ;pointer to code
  9968 00008183 00                  <1> 	iconselected db 0
  9969                                  %endif
  9970                                  %ifdef network.included
  9971                                  	%include "source/network.asm"
  9972                              <1> network.init:
  9973                              <1> %ifdef rtl8139.included
  9974                              <1> 	%include "source/drivers/network/rtl8139.asm"
  9975                              <2> ;RTL8139 NIC DRIVER
  9976                              <2> rtl8139:
  9977 00008184 E805000000          <2> 	call .init
  9978 00008189 E9CE010000          <2> 	jmp .end
  9979                              <2> 
  9980                              <2> .RBSTART equ 0x30
  9981                              <2> .IMR equ 0x3C
  9982                              <2> .ISR equ 0x3E
  9983                              <2> .CMD equ 0x37
  9984                              <2> .RCR equ 0x44
  9985                              <2> .CONFIG1 equ 0x52
  9986                              <2> .TSD0 equ 0x10
  9987                              <2> .TSAD0 equ 0x20
  9988                              <2> .init:	;should find card, get mac, and initialize card
  9989 0000818E 31C0                <2> 	xor eax, eax
  9990 00008190 A2[27600000]        <2> 	mov [pcifunction], al
  9991 00008195 A2[25600000]        <2> 	mov [pcibus], al
  9992 0000819A A2[26600000]        <2> 	mov [pcidevice], al
  9993 0000819F B002                <2> 	mov al, 0x02 ;type code
  9994 000081A1 A2[B6600000]        <2> 	mov [pcitype], al
  9995 000081A6 B8EC103981          <2> 	mov eax, 0x813910EC
  9996 000081AB A3[2A600000]        <2> 	mov [pcidevid], eax
  9997 000081B0 E889DEFFFF          <2> 	call getpciport
  9998 000081B5 81FBFFFFFFFF        <2> 	cmp ebx, 0xFFFFFFFF
  9999 000081BB 7501                <2> 	jne .initnic
 10000 000081BD C3                  <2> 	ret
 10001                              <2> .initnic:
 10002 000081BE 8915[3B830000]      <2> 	mov [.basenicaddr], edx
 10003 000081C4 89D1                <2> 	mov ecx, edx
 10004 000081C6 E8E0ACFFFF          <2> 	call showhex	;for debugging, please remove
 10005 000081CB BE[18CC2900]        <2> 	mov esi, rbuffstart
 10006 000081D0 B900200000          <2> 	mov ecx, 8192
 10007 000081D5 31C0                <2> 	xor eax, eax
 10008                              <2> .clearrbuff:		;clear receive buffer which starts at rbuffstart
 10009 000081D7 8806                <2> 	mov [esi], al
 10010 000081D9 46                  <2> 	inc esi
 10011 000081DA 6649                <2> 	dec cx
 10012 000081DC 6681F90000          <2> 	cmp cx, 0
 10013 000081E1 75F4                <2> 	jne .clearrbuff
 10014                              <2> .findmac:
 10015 000081E3 8B15[3B830000]      <2> 	mov edx, [.basenicaddr]
 10016 000081E9 BF[40830000]        <2> 	mov edi, .mac
 10017 000081EE B906000000          <2> 	mov ecx, 6
 10018                              <2> .macputloop:
 10019 000081F3 EC                  <2> 	in al, dx
 10020 000081F4 8807                <2> 	mov [edi], al
 10021 000081F6 47                  <2> 	inc edi
 10022 000081F7 42                  <2> 	inc edx
 10023 000081F8 49                  <2> 	dec ecx
 10024 000081F9 75F8                <2> 	jnz .macputloop
 10025 000081FB B9[40830000]        <2> 	mov ecx, .mac
 10026 00008200 E8510A0000          <2> 	call showmac
 10027 00008205 E817000000          <2> 	call .resetnic
 10028 0000820A BE[46830000]        <2> 	mov esi, .name
 10029 0000820F E8279BFFFF          <2> 	call print
 10030 00008214 BE[4F830000]        <2> 	mov esi, .initmsg
 10031 00008219 E81D9BFFFF          <2> 	call print
 10032 0000821E 31DB                <2> 	xor ebx, ebx
 10033 00008220 C3                  <2> 	ret
 10034                              <2> .resetnic:
 10035 00008221 8B15[3B830000]      <2> 	mov edx, [.basenicaddr]
 10036 00008227 81C252000000        <2> 	add edx, .CONFIG1
 10037 0000822D 30C0                <2> 	xor al, al
 10038 0000822F EE                  <2> 	out dx, al	;WAKE UP!!!!
 10039 00008230 8B15[3B830000]      <2> 	mov edx, [.basenicaddr]
 10040 00008236 81C237000000        <2> 	add edx, .CMD
 10041 0000823C B010                <2> 	mov al, 0x10
 10042 0000823E EE                  <2> 	out dx, al	;Reset
 10043                              <2> .resetnicwait:
 10044 0000823F EC                  <2> 	in al, dx
 10045 00008240 A810                <2> 	test al, 0x10
 10046 00008242 0F85F7FFFFFF        <2> 	jnz near .resetnicwait
 10047 00008248 8B15[3B830000]      <2> 	mov edx, [.basenicaddr]
 10048 0000824E 81C230000000        <2> 	add edx, .RBSTART
 10049 00008254 B8[18CC2900]        <2> 	mov eax, rbuffstart
 10050 00008259 0500001000          <2> 	add eax, 0x100000 ;change virtual to physical address
 10051 0000825E EF                  <2> 	out dx, eax	;give nic receive buffer location
 10052 0000825F 8B15[3B830000]      <2> 	mov edx, [.basenicaddr]
 10053 00008265 81C23C000000        <2> 	add edx, .IMR
 10054                              <2> 	;in ax, dx
 10055 0000826B 66B80500            <2> 	mov ax, 5
 10056 0000826F 66EF                <2> 	out dx, ax	;set both TOK and ROK interrupts
 10057 00008271 8B15[3B830000]      <2> 	mov edx, [.basenicaddr]
 10058 00008277 81C244000000        <2> 	add edx, .RCR
 10059 0000827D B802000000          <2> 	mov eax, 000010b ;receive only physical matches
 10060 00008282 0580000000          <2> 	add eax, 128 ;enable wrap option
 10061 00008287 EF                  <2> 	out dx, eax	;recieve packets from all matches
 10062 00008288 8B15[3B830000]      <2> 	mov edx, [.basenicaddr]
 10063 0000828E 81C237000000        <2> 	add edx, .CMD
 10064 00008294 B00C                <2> 	mov al, 0x0C
 10065 00008296 EE                  <2> 	out dx, al	;use transmit and receive
 10066 00008297 C605[3F830000]01    <2> 	mov byte [.nicconfig], 1
 10067 0000829E C3                  <2> 	ret
 10068                              <2> 	
 10069                              <2> .sendpacket:	;packet with beginning in edi and end in esi
 10070 0000829F 56                  <2> 	push esi
 10071 000082A0 57                  <2> 	push edi
 10072 000082A1 803D[3F830000]01    <2> 	cmp byte [.nicconfig], 1
 10073 000082A8 7410                <2> 	je .sendcachedata
 10074 000082AA E8DFFEFFFF          <2> 	call .init
 10075 000082AF 5F                  <2> 	pop edi
 10076 000082B0 5E                  <2> 	pop esi
 10077 000082B1 81FBFFFFFFFF        <2> 	cmp ebx, 0xFFFFFFFF
 10078 000082B7 75E6                <2> 	jne .sendpacket
 10079 000082B9 C3                  <2> 	ret
 10080                              <2> .sendcachedata:
 10081 000082BA E862FFFFFF          <2> 	call .resetnic
 10082 000082BF 8B15[3B830000]      <2> 	mov edx, [.basenicaddr]
 10083 000082C5 81C220000000        <2> 	add edx, .TSAD0
 10084 000082CB 5F                  <2> 	pop edi
 10085 000082CC 8B0D[40830000]      <2> 	mov ecx, [.mac]
 10086 000082D2 894F06              <2> 	mov [edi + 6], ecx
 10087 000082D5 668B0D[44830000]    <2> 	mov cx, [.mac + 4]
 10088 000082DC 66894F0A            <2> 	mov [edi + 10], cx	;copy the correct mac
 10089 000082E0 A1[3E020000]        <2> 	mov eax, [basecache]
 10090 000082E5 C1E004              <2> 	shl eax, 4
 10091 000082E8 01F8                <2> 	add eax, edi
 10092 000082EA EF                  <2> 	out dx, eax	;here's Johnny!
 10093 000082EB 5E                  <2> 	pop esi
 10094 000082EC 29FE                <2> 	sub esi, edi
 10095 000082EE 8B15[3B830000]      <2> 	mov edx, [.basenicaddr]
 10096 000082F4 81C210000000        <2> 	add edx, .TSD0
 10097 000082FA ED                  <2> 	in eax, dx ;get tsd
 10098 000082FB 2500E0FFFF          <2> 	and eax, 0xFFFFE000 ;clear off thirteen bits
 10099 00008300 01F0                <2> 	add eax, esi ;add length to tsd
 10100 00008302 25FFDFFFFF          <2> 	and eax, 0xFFFFDFFF ;clear own bit
 10101 00008307 EF                  <2> 	out dx, eax
 10102                              <2> .checknicownbit:
 10103 00008308 8B15[3B830000]      <2> 	mov edx, [.basenicaddr]
 10104 0000830E 81C210000000        <2> 	add edx, .TSD0
 10105 00008314 ED                  <2> 	in eax, dx
 10106 00008315 2500200000          <2> 	and eax, 0x2000 ;check own bit
 10107 0000831A 3D00200000          <2> 	cmp eax, 0x2000
 10108 0000831F 75E7                <2> 	jne .checknicownbit
 10109                              <2> .checknictokbit:
 10110 00008321 8B15[3B830000]      <2> 	mov edx, [.basenicaddr]
 10111 00008327 81C210000000        <2> 	add edx, .TSD0
 10112 0000832D ED                  <2> 	in eax, dx
 10113 0000832E 2500800000          <2> 	and eax, 0x8000	;check tok bit
 10114 00008333 3D00800000          <2> 	cmp eax, 0x8000
 10115 00008338 75E7                <2> 	jne .checknictokbit
 10116 0000833A C3                  <2> 	ret
 10117 0000833B 00000000            <2> .basenicaddr dd 0
 10118 0000833F 00                  <2> .nicconfig db 0
 10119 00008340 000000000000        <2> .mac db 0,0,0,0,0,0
 10120 00008346 52544C383133392000  <2> .name db "RTL8139 ",0
 10121 0000834F 496E697469616C697A- <2> .initmsg db "Initialized",10,0
 10122 00008358 65640A00            <2>
 10123                              <2> 
 10124                              <2> .end:
 10125                              <1> %endif
 10126                              <1> %ifdef rtl8169.included
 10127                              <1> 	%include "source/drivers/network/rtl8169.asm"
 10128                              <2> ;RTL8169 NIC DRIVER
 10129                              <2> rtl8169:
 10130 0000835C E805000000          <2> 	call .init
 10131 00008361 E9AA030000          <2> 	jmp .end
 10132                              <2> 
 10133                              <2> ;REGISTERS
 10134                              <2> .CMD equ 0x37
 10135                              <2> .TXPOLL equ 0x38
 10136                              <2> .TCR equ 0x40
 10137                              <2> .RCR equ 0x44
 10138                              <2> .IMR equ 0x3C
 10139                              <2> .ISR equ 0x3E
 10140                              <2> .LOCK equ 0x50
 10141                              <2> .CONFIG1 equ 0x52
 10142                              <2> .TDSAR equ 0x20
 10143                              <2> .RDSAR equ 0xE4
 10144                              <2> .MAXRX equ 0xDA
 10145                              <2> .MAXTX equ 0xEC
 10146                              <2> ;IMPORTANT VALUES
 10147                              <2> .OWN equ 0x80000000
 10148                              <2> .EOR equ 0x40000000
 10149                              <2> .POLLING equ 0x40
 10150                              <2> ;CODE
 10151                              <2> .init:	;should find card, get mac, and initialize card
 10152 00008366 31C0                <2> 	xor eax, eax
 10153 00008368 A2[27600000]        <2> 	mov [pcifunction], al
 10154 0000836D A2[25600000]        <2> 	mov [pcibus], al
 10155 00008372 A2[26600000]        <2> 	mov [pcidevice], al
 10156 00008377 B002                <2> 	mov al, 0x02 ;type code
 10157 00008379 A2[B6600000]        <2> 	mov [pcitype], al
 10158 0000837E B8EC106981          <2> 	mov eax, 0x816910EC
 10159 00008383 A3[2A600000]        <2> 	mov [pcidevid], eax
 10160 00008388 BBFFFFF0FF          <2> 	mov ebx, 0xFFF0FFFF
 10161 0000838D 891D[2E600000]      <2> 	mov [pcidevidmask], ebx
 10162 00008393 E8A6DCFFFF          <2> 	call getpciport
 10163 00008398 81FBFFFFFFFF        <2> 	cmp ebx, 0xFFFFFFFF
 10164 0000839E 7501                <2> 	jne .initnic
 10165 000083A0 C3                  <2> 	ret
 10166                              <2> .initnic:
 10167 000083A1 8915[3A850000]      <2> 	mov [.basenicaddr], edx
 10168 000083A7 89D1                <2> 	mov ecx, edx
 10169 000083A9 E8FDAAFFFF          <2> 	call showhex	;for debugging, please remove
 10170 000083AE BE[18CC2900]        <2> 	mov esi, rbuffstart
 10171 000083B3 B900200000          <2> 	mov ecx, 8192
 10172 000083B8 31C0                <2> 	xor eax, eax
 10173                              <2> .clearrbuff:		;clear receive buffer which starts at rbuffstart
 10174 000083BA 8806                <2> 	mov [esi], al
 10175 000083BC 46                  <2> 	inc esi
 10176 000083BD 6649                <2> 	dec cx
 10177 000083BF 6681F90000          <2> 	cmp cx, 0
 10178 000083C4 75F4                <2> 	jne .clearrbuff
 10179                              <2> .findmac:
 10180 000083C6 8B15[3A850000]      <2> 	mov edx, [.basenicaddr]
 10181 000083CC BF[3F850000]        <2> 	mov edi, .mac
 10182 000083D1 B906000000          <2> 	mov ecx, 6
 10183                              <2> .macputloop:
 10184 000083D6 EC                  <2> 	in al, dx
 10185 000083D7 8807                <2> 	mov [edi], al
 10186 000083D9 47                  <2> 	inc edi
 10187 000083DA 42                  <2> 	inc edx
 10188 000083DB 49                  <2> 	dec ecx
 10189 000083DC 75F8                <2> 	jnz .macputloop
 10190 000083DE B9[3F850000]        <2> 	mov ecx, .mac
 10191 000083E3 E86E080000          <2> 	call showmac
 10192 000083E8 E817000000          <2> 	call .resetnic
 10193 000083ED BE[45850000]        <2> 	mov esi, .name
 10194 000083F2 E84499FFFF          <2> 	call print
 10195 000083F7 BE[4E850000]        <2> 	mov esi, .initmsg
 10196 000083FC E83A99FFFF          <2> 	call print
 10197 00008401 31DB                <2> 	xor ebx, ebx
 10198 00008403 C3                  <2> 	ret
 10199                              <2> .resetnic:
 10200 00008404 8B15[3A850000]      <2> 	mov edx, [.basenicaddr]
 10201 0000840A 81C237000000        <2> 	add edx, .CMD
 10202 00008410 B010                <2> 	mov al, 0x10
 10203 00008412 EE                  <2> 	out dx, al	;Reset
 10204                              <2> .resetnicwait:
 10205 00008413 EC                  <2> 	in al, dx
 10206 00008414 A810                <2> 	test al, 0x10
 10207 00008416 0F85F7FFFFFF        <2> 	jnz near .resetnicwait
 10208 0000841C 8B15[3A850000]      <2> 	mov edx, [.basenicaddr]
 10209 00008422 81C250000000        <2> 	add edx, .LOCK
 10210 00008428 B0C0                <2> 	mov al, 0xC0
 10211 0000842A EE                  <2> 	out dx, al	;unlock config registers
 10212 0000842B 8B15[3A850000]      <2> 	mov edx, [.basenicaddr]
 10213 00008431 81C244000000        <2> 	add edx, .RCR
 10214 00008437 B80FE70000          <2> 	mov eax, 0x0000E70F
 10215 0000843C EF                  <2> 	out dx, eax	;recieve packets from all matches
 10216 0000843D 8B15[3A850000]      <2> 	mov edx, [.basenicaddr]
 10217 00008443 81C240000000        <2> 	add edx, .TCR
 10218 00008449 B800070003          <2> 	mov eax, 0x03000700
 10219 0000844E EF                  <2> 	out dx, eax	;set up tcr
 10220 0000844F 8B15[3A850000]      <2> 	mov edx, [.basenicaddr]
 10221 00008455 81C2DA000000        <2> 	add edx, .MAXRX
 10222 0000845B 66B8FF1F            <2> 	mov ax, 0x1FFF
 10223 0000845F 66EF                <2> 	out dx, ax	;setup max rx size
 10224 00008461 8B15[3A850000]      <2> 	mov edx, [.basenicaddr]
 10225 00008467 81C2EC000000        <2> 	add edx, .MAXTX
 10226 0000846D B03B                <2> 	mov al, 0x3B
 10227 0000846F EE                  <2> 	out dx, al	;setup max tx size
 10228 00008470 8B15[3A850000]      <2> 	mov edx, [.basenicaddr]
 10229 00008476 81C220000000        <2> 	add edx, .TDSAR
 10230 0000847C A1[3E020000]        <2> 	mov eax, [basecache]
 10231 00008481 C1E004              <2> 	shl eax, 4
 10232 00008484 05[00860000]        <2> 	add eax, .txdesc
 10233 00008489 EF                  <2> 	out dx, eax
 10234 0000848A 8B15[3A850000]      <2> 	mov edx, [.basenicaddr]
 10235 00008490 81C2E4000000        <2> 	add edx, .RDSAR
 10236 00008496 A1[3E020000]        <2> 	mov eax, [basecache]
 10237 0000849B C1E004              <2> 	shl eax, 4
 10238 0000849E 05[00870000]        <2> 	add eax, .rxdesc
 10239 000084A3 EF                  <2> 	out dx, eax
 10240 000084A4 8B15[3A850000]      <2> 	mov edx, [.basenicaddr]
 10241 000084AA 81C237000000        <2> 	add edx, .CMD
 10242 000084B0 B00C                <2> 	mov al, 0x0C
 10243 000084B2 EE                  <2> 	out dx, al	;use transmit and receive
 10244 000084B3 8B15[3A850000]      <2> 	mov edx, [.basenicaddr]
 10245 000084B9 81C250000000        <2> 	add edx, .LOCK
 10246 000084BF 30C0                <2> 	xor al, al
 10247 000084C1 EE                  <2> 	out dx, al
 10248 000084C2 C605[3E850000]01    <2> 	mov byte [.nicconfig], 1
 10249 000084C9 C3                  <2> 	ret
 10250                              <2> 	
 10251                              <2> .sendpacket:	;packet with beginning in edi and end in esi
 10252 000084CA 803D[3E850000]01    <2> 	cmp byte [.nicconfig], 1
 10253 000084D1 7412                <2> 	je .sendcachedata
 10254 000084D3 56                  <2> 	push esi
 10255 000084D4 57                  <2> 	push edi
 10256 000084D5 E88CFEFFFF          <2> 	call .init
 10257 000084DA 5F                  <2> 	pop edi
 10258 000084DB 5E                  <2> 	pop esi
 10259 000084DC 81FBFFFFFFFF        <2> 	cmp ebx, 0xFFFFFFFF
 10260 000084E2 75E6                <2> 	jne .sendpacket
 10261 000084E4 C3                  <2> 	ret
 10262                              <2> .sendcachedata:
 10263 000084E5 8B0D[3F850000]      <2> 	mov ecx, [.mac]
 10264 000084EB 894F06              <2> 	mov [edi + 6], ecx
 10265 000084EE 668B0D[43850000]    <2> 	mov cx, [.mac + 4]
 10266 000084F5 66894F0A            <2> 	mov [edi + 10], cx	;copy the correct mac
 10267 000084F9 893D[08860000]      <2> 	mov [.txdesc + 8], edi	;put packet start in tx descriptor
 10268 000084FF 29FE                <2> 	sub esi, edi
 10269 00008501 668935[00860000]    <2> 	mov [.txdesc], si	;put packet size in tx descriptor
 10270 00008508 810D[00860000]0000- <2> 	or dword [.txdesc], .OWN	;set own bit
 10271 00008510 0080                <2>
 10272 00008512 8B15[3A850000]      <2> 	mov edx, [.basenicaddr]
 10273 00008518 81C238000000        <2> 	add edx, .TXPOLL
 10274 0000851E B040                <2> 	mov al, .POLLING
 10275 00008520 EE                  <2> 	out dx, al	;set up TX Polling
 10276                              <2> .sendloop:
 10277 00008521 A1[00860000]        <2> 	mov eax, [.txdesc]
 10278 00008526 89C1                <2> 	mov ecx, eax
 10279 00008528 E87EA9FFFF          <2> 	call showhex
 10280 0000852D E8DA9CFFFF          <2> 	call getchar
 10281 00008532 A900000080          <2> 	test eax, .OWN
 10282 00008537 75E8                <2> 	jnz .sendloop
 10283 00008539 C3                  <2> 	ret
 10284                              <2> 	
 10285 0000853A 00000000            <2> .basenicaddr dd 0
 10286 0000853E 00                  <2> .nicconfig db 0
 10287 0000853F 000000000000        <2> .mac db 0,0,0,0,0,0
 10288 00008545 52544C383136392000  <2> .name db "RTL8169 ",0
 10289 0000854E 496E697469616C697A- <2> .initmsg db "Initialized",10,0
 10290 00008557 65640A00            <2>
 10291 0000855B 90<rept>            <2> align 256, nop
 10292                              <2> .txdesc:
 10293 00008600 00000040            <2> 	dd .EOR	;command
 10294 00008604 00000000            <2> 	dd 0	;vlan
 10295 00008608 00000000            <2> 	dd 0	;low buf
 10296 0000860C 00000000            <2> 	dd 0	;high buf
 10297 00008610 90<rept>            <2> align 256, nop
 10298                              <2> .rxdesc:
 10299 00008700 142000C0            <2> 	dd .OWN | .EOR | (rbuffend - rbuffstart)	;command
 10300 00008704 00000000            <2> 	dd 0	;vlan
 10301 00008708 [18CC2900]          <2> 	dd rbuffstart	;low buf
 10302 0000870C 00000000            <2> 	dd 0	;high buf
 10303                              <2> .end:
 10304                              <1> %endif
 10305                              <1> %ifdef ne2000.included
 10306                              <1> 	%include "source/drivers/network/ne2000.asm"
 10307                              <2> ne2000:
 10308 00008710 E805000000          <2> 	call .init
 10309 00008715 E93C030000          <2> 	jmp .end
 10310                              <2> 
 10311                              <2> ;	PAGE0			PAGE 1			PAGE 2
 10312                              <2> ;	READ	WRITE	READ	WRITE	READ	WRITE
 10313                              <2> ;0	CR		CR		CR		CR		CR		CR
 10314                              <2> ;1	CLDA0 	PSTART	PAR0	PAR0	PSTART	CLDA0
 10315                              <2> ;2	CLDA1	PSTOP	PAR1	PAR1	PSTOP	CLDA1
 10316                              <2> ;3	BNRY	BNRY	PAR2	PAR2	RNPP	RNPP
 10317                              <2> ;4	TSR		TPSR	PAR3	PAR3	TPSR	N/A
 10318                              <2> ;5	NCR		TBCR0	PAR4	PAR4	LNPP	LNPP
 10319                              <2> ;6	FIFO	TCBR1	PAR5	PAR5	ACU		ACU
 10320                              <2> ;7	ISR		ISR		CURR	CURR	ACL		ACL
 10321                              <2> ;8	CRDA0	RSAR0	MAR0	MAR0	N/A		N/A
 10322                              <2> ;9	CRDA1	RSAR1	MAR1	MAR1	N/A		N/A
 10323                              <2> ;A	N/A		RBCR0	MAR2	MAR2	N/A		N/A
 10324                              <2> ;B	N/A		RBCR1	MAR3	MAR3	N/A		N/A
 10325                              <2> ;C	RSR		RCR		MAR4	MAR4	RCR		N/A
 10326                              <2> ;D	CNTR0	TCR		MAR5	MAR5	TCR		N/A
 10327                              <2> ;E	CNTR1	DCR		MAR6	MAR6	DCR		N/A
 10328                              <2> ;F	CNTR2	IMR		MAR7	MAR7	IMR		N/A
 10329                              <2> .CR equ 0
 10330                              <2> 	.CR.STP	equ 1		;Stop
 10331                              <2> 	.CR.STA equ 2		;Start
 10332                              <2> 	.CR.TXP equ 4		;Transmit
 10333                              <2> 	.CR.RD0 equ 8		;Remote DMA 0
 10334                              <2> 	.CR.RD1 equ 0x10	;Remote DMA 1
 10335                              <2> 	.CR.RD2 equ 0x20	;Remote DMA 2
 10336                              <2> 	.CR.PS0 equ 0x40	;Page Select 0
 10337                              <2> 	.CR.PS1 equ 0x80	;Page Select 1
 10338                              <2> .PSTART equ 1
 10339                              <2> .PSTOP equ 2
 10340                              <2> .BNRY equ 3
 10341                              <2> .ISR equ 7
 10342                              <2> 	.ISR.PRX equ 1		;Packet Received
 10343                              <2> 	.ISR.PTX equ 2		;Packet Transmitted
 10344                              <2> 	.ISR.RXE equ 4		;Receive Error
 10345                              <2> 	.ISR.TXE equ 8		;Transmission Error
 10346                              <2> 	.ISR.OVW equ 0x10	;Overwrite
 10347                              <2> 	.ISR.CNT equ 0x20	;Counter Overflow
 10348                              <2> 	.ISR.RDC equ 0x40	;Remote Data Complete
 10349                              <2> 	.ISR.RST equ 0x80	;Reset status
 10350                              <2> .RSAR0 equ 8
 10351                              <2> .RSAR1 equ 9
 10352                              <2> .RBCR0 equ 0xA
 10353                              <2> .RBCR1 equ 0xB
 10354                              <2> .RCR equ 0xC
 10355                              <2> 	.RCR.SEP equ 1		;Save Errored Packets
 10356                              <2> 	.RCR.AR equ 2		;Accept Runt packet
 10357                              <2> 	.RCR.AB equ 4		;Accept Broadcast
 10358                              <2> 	.RCR.AM equ 8		;Accept Multicast
 10359                              <2> 	.RCR.PRO equ 0x10	;Promiscuous Physical
 10360                              <2> 	.RCR.MON equ 0x20	;Monitor Mode
 10361                              <2> .DCR equ 0xE
 10362                              <2> 	.DCR.WTS equ 1		;Word Transfer Select
 10363                              <2> 	.DCR.BOS equ 2		;Byte Order Select
 10364                              <2> 	.DCR.LAS equ 4		;Long Address Select
 10365                              <2> 	.DCR.LS equ 8		;Loopback Select
 10366                              <2> 	.DCR.AR equ 0x10	;Auto-initialize Remote
 10367                              <2> 	.DCR.FT0 equ 0x20	;FIFO Threshold Select 0
 10368                              <2> 	.DCR.FT1 equ 0x40	;FIFO Threshold Select 1
 10369                              <2> .ASIC equ 0x10
 10370                              <2> .RESET equ 0x1F
 10371                              <2> 
 10372                              <2> .init:
 10373 0000871A BBFFFFFFFF          <2> 	mov ebx, 0xFFFFFFFF
 10374 0000871F 31C0                <2> 	xor eax, eax
 10375 00008721 A2[27600000]        <2> 	mov [pcifunction], al
 10376 00008726 A2[25600000]        <2> 	mov [pcibus], al
 10377 0000872B A2[26600000]        <2> 	mov [pcidevice], al
 10378 00008730 B002                <2> 	mov al, 2 ;type code
 10379 00008732 A2[B6600000]        <2> 	mov [pcitype], al
 10380 00008737 B8EC102980          <2> 	mov eax, 0x802910EC
 10381 0000873C A3[2A600000]        <2> 	mov [pcidevid], eax
 10382 00008741 E8F8D8FFFF          <2> 	call getpciport
 10383 00008746 81FBFFFFFFFF        <2> 	cmp ebx, 0xFFFFFFFF
 10384 0000874C 7501                <2> 	jne .good0
 10385 0000874E C3                  <2> 	ret
 10386                              <2> .good0:
 10387 0000874F 8915[198A0000]      <2> 	mov [.basenicaddr], edx
 10388 00008755 89D1                <2> 	mov ecx, edx
 10389                              <2> .test:
 10390 00008757 E854000000          <2> 	call .reset
 10391 0000875C E87B000000          <2> 	call .stop
 10392 00008761 89CA                <2> 	mov edx, ecx
 10393 00008763 B9FF000000          <2> 	mov ecx, 0xFF
 10394 00008768 E2FE                <2> 	loop $ ;wait for ~100 us
 10395 0000876A 89D1                <2> 	mov ecx, edx
 10396 0000876C EC                  <2> 	in al, dx
 10397 0000876D 2427                <2> 	and al, (.CR.RD2 | .CR.TXP | .CR.STA | .CR.STP)
 10398 0000876F 3C21                <2> 	cmp al, (.CR.RD2 | .CR.STP)
 10399 00008771 7410                <2> 	je .good1
 10400 00008773 89CA                <2> 	mov edx, ecx
 10401 00008775 81C207000000        <2> 	add edx, .ISR
 10402 0000877B EC                  <2> 	in al, dx
 10403 0000877C 2480                <2> 	and al, .ISR.RST
 10404 0000877E 3C80                <2> 	cmp al, .ISR.RST
 10405 00008780 7401                <2> 	je .good1
 10406 00008782 C3                  <2> 	ret
 10407                              <2> .good1:
 10408 00008783 E823A7FFFF          <2> call showhex	;for debugging, please remove
 10409 00008788 E85B000000          <2> 	call .setup
 10410 0000878D E8C4040000          <2> call showmac
 10411 00008792 BE[1E8A0000]        <2> mov esi, .name
 10412 00008797 E89F95FFFF          <2> call print
 10413 0000879C BE[268A0000]        <2> mov esi, .initmsg
 10414 000087A1 E89595FFFF          <2> call print
 10415 000087A6 C605[1D8A0000]01    <2> 	mov byte [.nicconfig], 1
 10416 000087AD 31DB                <2> 	xor ebx, ebx
 10417 000087AF C3                  <2> 	ret
 10418                              <2> .reset:
 10419 000087B0 8B15[198A0000]      <2> 	mov edx, [.basenicaddr]
 10420 000087B6 81C21F000000        <2> 	add edx, .RESET
 10421 000087BC EC                  <2> 	in al, dx
 10422 000087BD EE                  <2> 	out dx, al ;write its contents to itself
 10423 000087BE C3                  <2> 	ret
 10424                              <2> .page:
 10425 000087BF 66C1E00E            <2> 	shl ax, 14
 10426 000087C3 8B15[198A0000]      <2> 	mov edx, [.basenicaddr]
 10427 000087C9 EC                  <2> 	in al, dx
 10428 000087CA 243F                <2> 	and al, 00111111b
 10429 000087CC 08E0                <2> 	or al, ah
 10430 000087CE EE                  <2> 	out dx, al
 10431 000087CF C3                  <2> 	ret
 10432                              <2> .start:
 10433 000087D0 8B15[198A0000]      <2> 	mov edx, [.basenicaddr]
 10434 000087D6 B020                <2> 	mov al, .CR.RD2
 10435 000087D8 B002                <2> 	mov al, .CR.STA
 10436 000087DA EE                  <2> 	out dx, al
 10437 000087DB C3                  <2> 	ret
 10438                              <2> .stop:
 10439 000087DC 8B15[198A0000]      <2> 	mov edx, [.basenicaddr]
 10440 000087E2 B020                <2> 	mov al, .CR.RD2
 10441 000087E4 0C01                <2> 	or al, .CR.STP
 10442 000087E6 EE                  <2> 	out dx, al
 10443 000087E7 C3                  <2> 	ret
 10444                              <2> .setup:
 10445 000087E8 E8EFFFFFFF          <2> 	call .stop
 10446 000087ED 8B15[198A0000]      <2> 	mov edx, [.basenicaddr]
 10447 000087F3 81C20E000000        <2> 	add edx, .DCR
 10448 000087F9 B040                <2> 	mov al, .DCR.FT1
 10449 000087FB 0C01                <2> 	or al, .DCR.WTS
 10450 000087FD 0C08                <2> 	or al, .DCR.LS
 10451 000087FF EE                  <2> 	out dx, al ;Set FIFO threshold, byte order, word-wide DMA
 10452 00008800 E8B9000000          <2> 	call .getmac
 10453 00008805 E8D2FFFFFF          <2> 	call .stop
 10454 0000880A 30C0                <2> 	xor al, al
 10455 0000880C 8B15[198A0000]      <2> 	mov edx, [.basenicaddr]
 10456 00008812 81C20A000000        <2> 	add edx, .RBCR0
 10457 00008818 EE                  <2> 	out dx, al
 10458 00008819 6642                <2> 	inc dx
 10459 0000881B EE                  <2> 	out dx, al ;Clear byte count
 10460 0000881C B800400000          <2> 	mov eax, 16*1024
 10461 00008821 A3[388A0000]        <2> 	mov [.ringstart], eax
 10462 00008826 C1E808              <2> 	shr eax, 8
 10463 00008829 66A3[348A0000]      <2> 	mov [.pagestart], ax
 10464 0000882F 0534000000          <2> 	add eax, 64-2*6
 10465 00008834 A3[368A0000]        <2> 	mov [.pageend], eax
 10466 00008839 C1E008              <2> 	shl eax, 8
 10467 0000883C 66A3[3C8A0000]      <2> 	mov [.ringend], ax ;set page and ring starts and ends
 10468 00008842 8B15[198A0000]      <2> 	mov edx, [.basenicaddr]
 10469 00008848 81C201000000        <2> 	add edx, .PSTART
 10470 0000884E A0[348A0000]        <2> 	mov al, [.pagestart]
 10471 00008853 EE                  <2> 	out dx, al
 10472 00008854 A0[368A0000]        <2> 	mov al, [.pageend]
 10473 00008859 6642                <2> 	inc dx
 10474 0000885B EE                  <2> 	out dx, al
 10475 0000885C A0[348A0000]        <2> 	mov al, [.pagestart]
 10476 00008861 6642                <2> 	inc dx
 10477 00008863 EE                  <2> 	out dx, al
 10478 00008864 E873FFFFFF          <2> 	call .stop
 10479                              <2> ;INSERT INTERRUPT ENABLE HERE
 10480 00008869 B001                <2> 	mov al, 1
 10481 0000886B E84FFFFFFF          <2> 	call .page
 10482 00008870 8B15[198A0000]      <2> 	mov edx, [.basenicaddr]
 10483 00008876 BF[468A0000]        <2> 	mov edi, .rom
 10484                              <2> .copymactocard:
 10485 0000887B 42                  <2> 	inc edx
 10486 0000887C 6E                  <2> 	outsb
 10487 0000887D 81C702000000        <2> 	add edi, 2
 10488 00008883 81FA06000000        <2> 	cmp edx, 6
 10489 00008889 76F0                <2> 	jbe .copymactocard
 10490 0000888B 8B15[198A0000]      <2> 	mov edx, [.basenicaddr]
 10491 00008891 81C207000000        <2> 	add edx, 7
 10492 00008897 A0[348A0000]        <2> 	mov al, [.pagestart]
 10493 0000889C FEC0                <2> 	inc al
 10494 0000889E EE                  <2> 	out dx, al ;set page in CURR register
 10495                              <2> ;INSERT MULTICAST INIT HERE
 10496 0000889F E838FFFFFF          <2> 	call .stop
 10497 000088A4 8B15[198A0000]      <2> 	mov edx, [.basenicaddr]
 10498 000088AA 81C20C000000        <2> 	add edx, .RCR
 10499 000088B0 B004                <2> 	mov al, .RCR.AB
 10500 000088B2 EE                  <2> 	out dx, al ;accept broadcast
 10501 000088B3 6642                <2> 	inc dx
 10502 000088B5 30C0                <2> 	xor al, al
 10503 000088B7 EE                  <2> 	out dx, al ;stop loopback
 10504 000088B8 E813FFFFFF          <2> 	call .start
 10505 000088BD C3                  <2> 	ret
 10506                              <2> .getmac:
 10507 000088BE 8B15[198A0000]      <2> 	mov edx, [.basenicaddr]
 10508 000088C4 B020                <2> 	mov al, 0x20
 10509 000088C6 0C02                <2> 	or al, 2
 10510 000088C8 EE                  <2> 	out dx, al	;set STA and RD2 bits
 10511 000088C9 6681C20A00          <2> 	add dx, .RBCR0
 10512 000088CE B010                <2> 	mov al, 16
 10513 000088D0 EE                  <2> 	out dx, al
 10514 000088D1 6642                <2> 	inc dx
 10515 000088D3 30C0                <2> 	xor al, al
 10516 000088D5 EE                  <2> 	out dx, al
 10517 000088D6 8B15[198A0000]      <2> 	mov edx, [.basenicaddr]
 10518 000088DC 6681C20800          <2> 	add dx, .RSAR0
 10519 000088E1 EE                  <2> 	out dx, al
 10520 000088E2 6642                <2> 	inc dx
 10521 000088E4 EE                  <2> 	out dx, al
 10522 000088E5 668B15[198A0000]    <2> 	mov dx, [.basenicaddr]
 10523 000088EC B008                <2> 	mov al, 8
 10524 000088EE 0C02                <2> 	or al, 2
 10525 000088F0 EE                  <2> 	out dx, al
 10526 000088F1 668B15[198A0000]    <2> 	mov dx, [.basenicaddr]
 10527 000088F8 6681C21000          <2> 	add dx, .ASIC
 10528 000088FD B908000000          <2> 	mov ecx, 8
 10529 00008902 BF[468A0000]        <2> 	mov edi, .rom
 10530 00008907 F3666D              <2> 	rep insw
 10531                              <2> .copymac:
 10532 0000890A BF[468A0000]        <2> 	mov edi, .rom
 10533 0000890F BE[408A0000]        <2> 	mov esi, .mac
 10534 00008914 B906000000          <2> 	mov ecx, 6
 10535                              <2> .lpmac:
 10536 00008919 8A07                <2> 	mov al, [edi]
 10537 0000891B 8806                <2> 	mov [esi], al
 10538 0000891D 81C702000000        <2> 	add edi, 2
 10539 00008923 46                  <2> 	inc esi
 10540 00008924 E2F3                <2> 	loop .lpmac
 10541 00008926 B9[408A0000]        <2> 	mov ecx, .mac
 10542 0000892B C3                  <2> 	ret
 10543                              <2> .sendpacket:
 10544 0000892C 803D[1D8A0000]00    <2> 	cmp byte [.nicconfig], 0
 10545 00008933 7512                <2> 	jne .sendit
 10546 00008935 56                  <2> 	push esi
 10547 00008936 57                  <2> 	push edi
 10548 00008937 E8DEFDFFFF          <2> 	call .init
 10549 0000893C 5F                  <2> 	pop edi
 10550 0000893D 5E                  <2> 	pop esi
 10551 0000893E 81FB00000000        <2> 	cmp ebx, 0
 10552 00008944 7401                <2> 	je .sendit
 10553 00008946 C3                  <2> 	ret
 10554                              <2> .sendit: ;packet start in edi, end in esi
 10555 00008947 87F7                <2> 	xchg esi, edi ;this helps with the outsw
 10556                              <2> 	;now the packet start is in esi, end in edi
 10557 00008949 8B0D[408A0000]      <2> 	mov ecx, [.mac]
 10558 0000894F 894E06              <2> 	mov [esi + 6], ecx
 10559 00008952 668B0D[448A0000]    <2> 	mov cx, [.mac + 4]
 10560 00008959 66894E0A            <2> 	mov [esi + 10], cx	;copy the correct mac
 10561 0000895D 8B15[198A0000]      <2> 	mov edx, [.basenicaddr]
 10562 00008963 B020                <2> 	mov al, .CR.RD2
 10563 00008965 0C02                <2> 	or al, .CR.STA
 10564 00008967 EE                  <2> 	out dx, al ;set RD2 and STA
 10565 00008968 81C207000000        <2> 	add edx, .ISR ; ISR
 10566 0000896E B040                <2> 	mov al, .ISR.RDC
 10567 00008970 EE                  <2> 	out dx, al ;set RDC flag
 10568 00008971 8B15[198A0000]      <2> 	mov edx, [.basenicaddr]
 10569 00008977 6681C20A00          <2> 	add dx, .RBCR0
 10570 0000897C 89F8                <2> 	mov eax, edi
 10571 0000897E 29F0                <2> 	sub eax, esi
 10572 00008980 BB01000000          <2> 	mov ebx, 1
 10573 00008985 21C3                <2> 	and ebx, eax
 10574 00008987 81FB01000000        <2> 	cmp ebx, 1
 10575 0000898D 7501                <2> 	jne .nofixword
 10576 0000898F 40                  <2> 	inc eax
 10577                              <2> .nofixword:
 10578 00008990 89C1                <2> 	mov ecx, eax ;save length in ecx
 10579 00008992 EE                  <2> 	out dx, al
 10580 00008993 86C4                <2> 	xchg al, ah
 10581 00008995 6642                <2> 	inc dx
 10582 00008997 EE                  <2> 	out dx, al ;send size
 10583 00008998 8B15[198A0000]      <2> 	mov edx, [.basenicaddr]
 10584 0000899E 6681C20800          <2> 	add dx, .RSAR0
 10585 000089A3 66A1[348A0000]      <2> 	mov ax, [.pagestart]
 10586 000089A9 C1E008              <2> 	shl eax, 8
 10587 000089AC EE                  <2> 	out dx, al
 10588 000089AD 86C4                <2> 	xchg al, ah
 10589 000089AF 6642                <2> 	inc dx
 10590 000089B1 EE                  <2> 	out dx, al ;send address in NIC memory
 10591 000089B2 8B15[198A0000]      <2> 	mov edx, [.basenicaddr]
 10592 000089B8 B010                <2> 	mov al, .CR.RD1
 10593 000089BA 0C02                <2> 	or al, .CR.STA
 10594 000089BC EE                  <2> 	out dx, al ;set RD and STA
 10595 000089BD 89CB                <2> 	mov ebx, ecx ;save length in ebx
 10596 000089BF D1E9                <2> 	shr ecx, 1
 10597 000089C1 8B15[198A0000]      <2> 	mov edx, [.basenicaddr]
 10598 000089C7 6681C21000          <2> 	add dx, 0x10
 10599 000089CC F3666F              <2> 	rep outsw ;Send the packet data
 10600 000089CF 8B15[198A0000]      <2> 	mov edx, [.basenicaddr]
 10601 000089D5 6681C20700          <2> 	add dx, .ISR
 10602                              <2> .chkcopylp:
 10603 000089DA B440                <2> 	mov ah, .ISR.RDC
 10604 000089DC EC                  <2> 	in al, dx
 10605 000089DD 20C4                <2> 	and ah, al
 10606 000089DF 80FC40              <2> 	cmp ah, 0x40
 10607 000089E2 75F6                <2> 	jne .chkcopylp	
 10608 000089E4 8B15[198A0000]      <2> 	mov edx, [.basenicaddr]
 10609 000089EA 6681C20400          <2> 	add dx, 4
 10610 000089EF A0[348A0000]        <2> 	mov al, [.pagestart]
 10611 000089F4 EE                  <2> 	out dx, al ;send start address in pages
 10612 000089F5 8B15[198A0000]      <2> 	mov edx, [.basenicaddr]
 10613 000089FB 81C205000000        <2> 	add edx, 0x5
 10614 00008A01 89D8                <2> 	mov eax, ebx
 10615 00008A03 EE                  <2> 	out dx, al
 10616 00008A04 86C4                <2> 	xchg al, ah
 10617 00008A06 6642                <2> 	inc dx
 10618 00008A08 EE                  <2> 	out dx, al ;send length
 10619 00008A09 8B15[198A0000]      <2> 	mov edx, [.basenicaddr]
 10620 00008A0F B020                <2> 	mov al, 0x20
 10621 00008A11 0C04                <2> 	or al, 4
 10622 00008A13 0C02                <2> 	or al, 2
 10623 00008A15 EE                  <2> 	out dx, al ;set RD2, TXP, and STA
 10624 00008A16 31DB                <2> 	xor ebx, ebx
 10625 00008A18 C3                  <2> 	ret
 10626 00008A19 00000000            <2> .basenicaddr dd 0
 10627 00008A1D 00                  <2> .nicconfig db 0
 10628 00008A1E 4E45323030302000    <2> .name db "NE2000 ",0
 10629 00008A26 496E697469616C697A- <2> .initmsg db "Initialized.",10,0
 10630 00008A2F 65642E0A00          <2>
 10631                              <2> align 2, nop
 10632 00008A34 0000                <2> .pagestart dw 0
 10633 00008A36 0000                <2> .pageend dw 0
 10634 00008A38 00000000            <2> .ringstart dd 0
 10635 00008A3C 00000000            <2> .ringend dd 0
 10636 00008A40 000000000000        <2> .mac db 0,0,0,0,0,0
 10637 00008A46 00<rept>            <2> .rom times 16 db 0
 10638                              <2> 
 10639                              <2> .end:
 10640                              <1> %endif
 10641                              <1> %ifdef i8254x.included
 10642                              <1> 	%include "source/drivers/network/i8254x.asm"
 10643                              <2> ;Intel 8254x NIC DRIVER
 10644                              <2> i8254x:
 10645 00008A56 E805000000          <2> 	call .init
 10646 00008A5B E933010000          <2> 	jmp .end
 10647                              <2> 
 10648                              <2> ;REGISTERS
 10649                              <2> .EEC equ 0x10
 10650                              <2> .EERD equ 0x14
 10651                              <2> .RAL equ 0x5400
 10652                              <2> .RAH equ 0x5404
 10653                              <2> ;CODE
 10654                              <2> .init:	;should find card, get mac, and initialize card
 10655 00008A60 31C0                <2> 	xor eax, eax
 10656 00008A62 A2[27600000]        <2> 	mov [pcifunction], al
 10657 00008A67 A2[25600000]        <2> 	mov [pcibus], al
 10658 00008A6C A2[26600000]        <2> 	mov [pcidevice], al
 10659 00008A71 B002                <2> 	mov al, 0x02 ;type code
 10660 00008A73 A2[B6600000]        <2> 	mov [pcitype], al
 10661 00008A78 B886800010          <2> 	mov eax, 0x10008086
 10662 00008A7D A3[2A600000]        <2> 	mov [pcidevid], eax
 10663 00008A82 BBFFFF00FE          <2> 	mov ebx, 0xFE00FFFF
 10664 00008A87 891D[2E600000]      <2> 	mov [pcidevidmask], ebx
 10665 00008A8D E8A0D5FFFF          <2> 	call getpcimem
 10666 00008A92 81FBFFFFFFFF        <2> 	cmp ebx, 0xFFFFFFFF
 10667 00008A98 7501                <2> 	jne .initnic
 10668 00008A9A C3                  <2> 	ret
 10669                              <2> .initnic:
 10670 00008A9B 8915[738B0000]      <2> 	mov [.basenicaddr], edx
 10671 00008AA1 89D1                <2> 	mov ecx, edx
 10672 00008AA3 E803A4FFFF          <2> 	call showhex	;for debugging, please remove
 10673 00008AA8 BE[18CC2900]        <2> 	mov esi, rbuffstart
 10674 00008AAD B900200000          <2> 	mov ecx, 8192
 10675 00008AB2 31C0                <2> 	xor eax, eax
 10676                              <2> .clearrbuff:		;clear receive buffer which starts at rbuffstart
 10677 00008AB4 8806                <2> 	mov [esi], al
 10678 00008AB6 46                  <2> 	inc esi
 10679 00008AB7 6649                <2> 	dec cx
 10680 00008AB9 6681F90000          <2> 	cmp cx, 0
 10681 00008ABE 75F4                <2> 	jne .clearrbuff
 10682                              <2> .findmac:
 10683 00008AC0 BF[788B0000]        <2> 	mov edi, .mac
 10684 00008AC5 8B1D[738B0000]      <2> 	mov ebx, [.basenicaddr]
 10685 00008ACB 81C300540000        <2> 	add ebx, .RAL
 10686 00008AD1 31D2                <2> 	xor edx, edx
 10687 00008AD3 B903000000          <2> 	mov ecx, 3
 10688                              <2> .macloop:
 10689 00008AD8 E84A000000          <2> 	call .eepromread
 10690 00008ADD 668907              <2> 	mov [edi], ax
 10691 00008AE0 668903              <2> 	mov [ebx], ax
 10692 00008AE3 42                  <2> 	inc edx
 10693 00008AE4 81C302000000        <2> 	add ebx, 2
 10694 00008AEA 81C702000000        <2> 	add edi, 2
 10695 00008AF0 E2E6                <2> 	loop .macloop
 10696 00008AF2 66B80080            <2> 	mov ax, 0x8000
 10697 00008AF6 668903              <2> 	mov [ebx], ax	;set address valid bit
 10698                              <2> 
 10699 00008AF9 B9[788B0000]        <2> 	mov ecx, .mac
 10700 00008AFE E853010000          <2> 	call showmac
 10701 00008B03 E817000000          <2> 	call .resetnic
 10702 00008B08 BE[7E8B0000]        <2> 	mov esi, .name
 10703 00008B0D E82992FFFF          <2> 	call print
 10704 00008B12 BE[868B0000]        <2> 	mov esi, .initmsg
 10705 00008B17 E81F92FFFF          <2> 	call print
 10706 00008B1C 31DB                <2> 	xor ebx, ebx
 10707 00008B1E C3                  <2> 	ret
 10708                              <2> .resetnic:
 10709 00008B1F C605[778B0000]01    <2> 	mov byte [.nicconfig], 1
 10710 00008B26 C3                  <2> 	ret
 10711                              <2> 
 10712                              <2> .eepromread:	;location in EEPROM in edx (actually just dl)
 10713 00008B27 8B35[738B0000]      <2> 	mov esi, [.basenicaddr]
 10714 00008B2D 8B4610              <2> 	mov eax, [esi + .EEC]
 10715 00008B30 0D40000000          <2> 	or eax, 1000000b
 10716 00008B35 894610              <2> 	mov [esi + .EEC], eax	;turn software access on
 10717                              <2> .waiteeprom:
 10718 00008B38 8B4610              <2> 	mov eax, [esi + .EEC]
 10719 00008B3B 2580000000          <2> 	and eax, 10000000b
 10720 00008B40 3D80000000          <2> 	cmp eax, 10000000b
 10721 00008B45 75F1                <2> 	jne .waiteeprom
 10722 00008B47 8B4614              <2> 	mov eax, [esi + .EERD]
 10723 00008B4A 31C0                <2> 	xor eax, eax
 10724 00008B4C 88D4                <2> 	mov ah, dl 	;eeprom address
 10725 00008B4E 0C01                <2> 	or al, 1	;start read
 10726 00008B50 894614              <2> 	mov [esi + .EERD], eax
 10727                              <2> .waiteepromread:
 10728 00008B53 8B4614              <2> 	mov eax, [esi + .EERD]
 10729 00008B56 2510000000          <2> 	and eax, 10000b
 10730 00008B5B 3D10000000          <2> 	cmp eax, 10000b
 10731 00008B60 75F1                <2> 	jne .waiteepromread
 10732 00008B62 8B4614              <2> 	mov eax, [esi + .EERD]
 10733 00008B65 668B4610            <2> 	mov ax, [esi + .EEC]
 10734 00008B69 24BF                <2> 	and al, 10111111b
 10735 00008B6B 66894610            <2> 	mov [esi + .EEC], ax	;turn software access off
 10736 00008B6F C1E810              <2> 	shr eax, 16	;AX has the requested word
 10737 00008B72 C3                  <2> 	ret
 10738                              <2> 	
 10739 00008B73 00000000            <2> .basenicaddr dd 0
 10740 00008B77 00                  <2> .nicconfig db 0
 10741 00008B78 000000000000        <2> .mac db 0,0,0,0,0,0
 10742 00008B7E 4938323534582000    <2> .name db "I8254X ",0
 10743 00008B86 496E697469616C697A- <2> .initmsg db "Initialized",10,0
 10744 00008B8F 65640A00            <2>
 10745                              <2> .end:
 10746                              <1> %endif
 10747 00008B93 C3                  <1> 	ret
 10748                              <1> 
 10749                              <1> sendpacket: ;packet start in edi, end in esi
 10750                              <1> 	%ifdef rtl8139.included
 10751 00008B94 57                  <1> 		push edi
 10752 00008B95 56                  <1> 		push esi
 10753 00008B96 E804F7FFFF          <1> 		call rtl8139.sendpacket
 10754 00008B9B 5E                  <1> 		pop esi
 10755 00008B9C 5F                  <1> 		pop edi
 10756                              <1> 	%endif
 10757                              <1> 	%ifdef rtl8169.included
 10758 00008B9D 57                  <1> 		push edi
 10759 00008B9E 56                  <1> 		push esi
 10760 00008B9F E826F9FFFF          <1> 		call rtl8169.sendpacket
 10761 00008BA4 5E                  <1> 		pop esi
 10762 00008BA5 5F                  <1> 		pop edi
 10763                              <1> 	%endif
 10764                              <1> 	%ifdef ne2000.included
 10765 00008BA6 E881FDFFFF          <1> 		call ne2000.sendpacket
 10766                              <1> 	%endif
 10767 00008BAB C3                  <1> 	ret
 10768                              <1> 
 10769                              <1> getchecksum: ;start in edi, end in esi, checksum put in ecx
 10770 00008BAC 31C0                <1> 	xor eax, eax
 10771 00008BAE 31DB                <1> 	xor ebx, ebx
 10772 00008BB0 31C9                <1> 	xor ecx, ecx
 10773                              <1> .lp:
 10774 00008BB2 8A07                <1> 	mov al, [edi]
 10775 00008BB4 8A6701              <1> 	mov ah, [edi + 1]
 10776 00008BB7 01C3                <1> 	add ebx, eax
 10777 00008BB9 81C702000000        <1> 	add edi, 2
 10778 00008BBF 39F7                <1> 	cmp edi, esi
 10779 00008BC1 72EF                <1> 	jb .lp
 10780 00008BC3 66B9FFFF            <1> 	mov cx, 0xFFFF
 10781 00008BC7 6689D8              <1> 	mov ax, bx
 10782 00008BCA C1EB10              <1> 	shr ebx, 16
 10783 00008BCD 6601D8              <1> 	add ax, bx
 10784 00008BD0 6629C1              <1> 	sub cx, ax
 10785 00008BD3 C3                  <1> 	ret
 10786                              <1> 	
 10787                              <1> strtoip:	;string in esi with format X.X.X.X converted to number in ecx
 10788 00008BD4 31DB                <1> 	xor ebx, ebx
 10789 00008BD6 31C9                <1> 	xor ecx, ecx
 10790 00008BD8 31D2                <1> 	xor edx, edx
 10791                              <1> .mlp:
 10792 00008BDA 89F7                <1> 	mov edi, esi
 10793 00008BDC 4F                  <1> 	dec edi
 10794                              <1> .lp:
 10795 00008BDD 47                  <1> 	inc edi
 10796 00008BDE 8A07                <1> 	mov al, [edi]
 10797 00008BE0 3C20                <1> 	cmp al, " "
 10798 00008BE2 7408                <1> 	je .dnlp
 10799 00008BE4 3C00                <1> 	cmp al, 0
 10800 00008BE6 7404                <1> 	je .dnlp
 10801 00008BE8 3C2E                <1> 	cmp al, "."
 10802 00008BEA 75F1                <1> 	jne .lp
 10803                              <1> .dnlp:
 10804 00008BEC 30C0                <1> 	xor al, al
 10805 00008BEE 8807                <1> 	mov [edi], al
 10806 00008BF0 53                  <1> 	push ebx
 10807 00008BF1 56                  <1> 	push esi
 10808 00008BF2 57                  <1> 	push edi
 10809 00008BF3 31FF                <1> 	xor edi, edi
 10810 00008BF5 E85DA4FFFF          <1> 	call cnvrttxt
 10811 00008BFA 5E                  <1> 	pop esi
 10812 00008BFB 5F                  <1> 	pop edi ;i intentionally switch them
 10813 00008BFC 5B                  <1> 	pop ebx
 10814 00008BFD 46                  <1> 	inc esi
 10815 00008BFE BF[168C0000]        <1> 	mov edi, ipstr
 10816 00008C03 880C1F              <1> 	mov [edi + ebx], cl
 10817 00008C06 43                  <1> 	inc ebx
 10818 00008C07 81FB04000000        <1> 	cmp ebx, 4
 10819 00008C0D 72CB                <1> 	jb .mlp
 10820 00008C0F 8B0D[168C0000]      <1> 	mov ecx, [ipstr]
 10821 00008C15 C3                  <1> 	ret
 10822 00008C16 00000000            <1> ipstr dd 0
 10823                              <1> showip: 	;put the ip address in ecx
 10824 00008C1A 89C8                <1> 	mov eax, ecx
 10825 00008C1C 30DB                <1> 	xor bl, bl
 10826                              <1> .lp:
 10827 00008C1E 3C00                <1> 	cmp al, 0
 10828 00008C20 750B                <1> 	jne .nozeroprint
 10829 00008C22 B030                <1> 	mov al, "0"
 10830 00008C24 50                  <1> 	push eax
 10831 00008C25 E85896FFFF          <1> 	call prcharq
 10832 00008C2A 58                  <1> 	pop eax
 10833 00008C2B 30C0                <1> 	xor al, al
 10834                              <1> .nozeroprint:
 10835 00008C2D 31C9                <1> 	xor ecx, ecx
 10836 00008C2F 88C1                <1> 	mov cl, al
 10837 00008C31 E83FA3FFFF          <1> 	call showdec
 10838 00008C36 C1E808              <1> 	shr eax, 8
 10839 00008C39 FEC3                <1> 	inc bl
 10840 00008C3B 80FB04              <1> 	cmp bl, 4
 10841 00008C3E 7312                <1> 	jae .done
 10842 00008C40 50                  <1> 	push eax
 10843 00008C41 6653                <1> 	push bx
 10844 00008C43 BE[538C0000]        <1> 	mov esi, .dot
 10845 00008C48 E8EE90FFFF          <1> 	call print
 10846 00008C4D 665B                <1> 	pop bx
 10847 00008C4F 58                  <1> 	pop eax
 10848 00008C50 EBCC                <1> 	jmp .lp
 10849                              <1> .done:
 10850 00008C52 C3                  <1> 	ret
 10851 00008C53 082E00              <1> .dot db 8,".",0
 10852                              <1> showmac:	;mac begins in [ecx]
 10853 00008C56 BE[A68C0000]        <1> 	mov esi, macprint
 10854 00008C5B 89CF                <1> 	mov edi, ecx
 10855 00008C5D 81C106000000        <1> 	add ecx, 6
 10856                              <1> showmacloop:
 10857 00008C63 8A07                <1> 	mov al, [edi]
 10858 00008C65 8A27                <1> 	mov ah, [edi]
 10859 00008C67 C0E804              <1> 	shr al, 4
 10860 00008C6A C0E404              <1> 	shl ah, 4
 10861 00008C6D C0EC04              <1> 	shr ah, 4
 10862 00008C70 0430                <1> 	add al, 48
 10863 00008C72 3C39                <1> 	cmp al, "9"
 10864 00008C74 7606                <1> 	jbe .goodal
 10865 00008C76 2C30                <1> 	sub al, 48
 10866 00008C78 2C0A                <1> 	sub al, 0xA
 10867 00008C7A 0441                <1> 	add al, "A"
 10868                              <1> .goodal:
 10869 00008C7C 80C430              <1> 	add ah, 48
 10870 00008C7F 80FC39              <1> 	cmp ah, "9"
 10871 00008C82 7609                <1> 	jbe .goodah
 10872 00008C84 80EC30              <1> 	sub ah, 48
 10873 00008C87 80EC0A              <1> 	sub ah, 0xA
 10874 00008C8A 80C441              <1> 	add ah, "A"
 10875                              <1> .goodah:
 10876 00008C8D 668906              <1> 	mov [esi], ax
 10877 00008C90 81C603000000        <1> 	add esi, 3
 10878 00008C96 47                  <1> 	inc edi
 10879 00008C97 39CF                <1> 	cmp edi, ecx
 10880 00008C99 72C8                <1> 	jb showmacloop
 10881 00008C9B BE[A68C0000]        <1> 	mov esi, macprint
 10882 00008CA0 E89690FFFF          <1> 	call print
 10883 00008CA5 C3                  <1> 	ret
 10884                              <1> 	
 10885 00008CA6 30303A30303A30303A- <1> macprint db "00:00:00:00:00:00 ",0
 10886 00008CAF 30303A30303A303020- <1>
 10887 00008CB8 00                  <1>
 10888 00008CB9 00000000            <1> ethernetend dw 0,0
 10889 00008CBD C0A80002            <1> sysip db 192,168,0,2
 10890 00008CC1 000000000000        <1> sysmac	db 0,0,0,0,0,0		;my mac address
 10891                                  %endif
 10892                                      %include "source/data.asm"
 10893 00008CC7 626F6F742E736800    <1> 	bootfilename db "boot.sh",0
 10894 00008CCF 73687573683A2000    <1> 	notfound1 db "shush: ",0
 10895 00008CD7 3A206E6F7420666F75- <1> 	notfound2 db  ": not found",10,0
 10896 00008CE0 6E640A00            <1>
 10897 00008CE4 757365726E616D653A- <1> 	userask db "username:",0
 10898 00008CED 00                  <1>
 10899 00008CEE 70617373776F72643A- <1> 	pwdask	db	"password:",0
 10900 00008CF7 00                  <1>
 10901 00008CF8 40                  <1> 	computer db "@"
 10902                              <1> %ifdef io.serial
 10903                              <1> 	computername	db	"SollerOS.",io.serial," ",0
 10904                              <1> %else
 10905 00008CF9 536F6C6C65724F5320- <1> 	computername	db	"SollerOS ",0
 10906 00008D02 00                  <1>
 10907                              <1> %endif
 10908 00008D03 5D242000            <1> 	endprompt db "]$ ",0
 10909 00008D07 0D                  <1> 	crlf 	db  13
 10910 00008D08 0A00                <1> 	line	db	10,0
 10911                              <1> 	userlst:
 10912 00008D0A 726F6F7400          <1> 			db "root",0
 10913 00008D0F 617765736F6D65706F- <1> 			db "awesomepower",0
 10914 00008D18 77657200            <1>
 10915 00008D1C 7573657200          <1> 			db "user",0
 10916 00008D21 70617373776F726400  <1> 			db "password",0
 10917 00008D2A 6E00                <1> 			db "n",0	;;abuse for quick entry-a quick double n followed by a double enter will get you in
 10918 00008D2C 00                  <1> 			db 0
 10919                              <1> 	userlstend:
 10920                              <1> 	
 10921                              <1> %ifdef io.serial
 10922                              <1> %else
 10923 00008D2C <incbin>            <1> fonts:	incbin "source/precompiled/fonts.pak"
 10924                              <1> fontend:
 10925                              <1> %endif
 10926                              <1> osend:	;this is the end of the operating system's space on disk
 10927                                      %include "build/fileindex.asm"
 10928                              <1> diskfileindex:
 10929 00009D2D 617267746573742E65- <1> db "argtest.elf",0
 10930 00009D36 6C6600              <1>
 10931 00009D39 50000000            <1> dd (f0-$$)/512
 10932 00009D3D 06010000            <1> dd (f1-f0)/512
 10933 00009D41 6261636B67726F756E- <1> db "background.bmp",0
 10934 00009D4A 642E626D7000        <1>
 10935 00009D50 56010000            <1> dd (f1-$$)/512
 10936 00009D54 01140000            <1> dd (f2-f1)/512
 10937 00009D58 626F6F742E736800    <1> db "boot.sh",0
 10938 00009D60 57150000            <1> dd (f2-$$)/512
 10939 00009D64 01000000            <1> dd (f3-f2)/512
 10940 00009D68 63686172746573742E- <1> db "chartest.elf",0
 10941 00009D71 656C6600            <1>
 10942 00009D75 58150000            <1> dd (f3-$$)/512
 10943 00009D79 26010000            <1> dd (f4-f3)/512
 10944 00009D7D 646F73746573742E63- <1> db "dostest.com",0
 10945 00009D86 6F6D00              <1>
 10946 00009D89 7E160000            <1> dd (f4-$$)/512
 10947 00009D8D 01000000            <1> dd (f5-f4)/512
 10948 00009D91 6578656300          <1> db "exec",0
 10949 00009D96 7F160000            <1> dd (f5-$$)/512
 10950 00009D9A 01000000            <1> dd (f6-f5)/512
 10951 00009D9E 66696E616C636F756E- <1> db "finalcount.sn",0
 10952 00009DA7 742E736E00          <1>
 10953 00009DAC 80160000            <1> dd (f6-$$)/512
 10954 00009DB0 01000000            <1> dd (f7-f6)/512
 10955 00009DB4 666F726B00          <1> db "fork",0
 10956 00009DB9 81160000            <1> dd (f7-$$)/512
 10957 00009DBD 01000000            <1> dd (f8-f7)/512
 10958 00009DC1 68656C6C6F776F726C- <1> db "helloworld.elf",0
 10959 00009DCA 642E656C6600        <1>
 10960 00009DD0 82160000            <1> dd (f8-$$)/512
 10961 00009DD4 D6010000            <1> dd (f9-f8)/512
 10962 00009DD8 696E7400            <1> db "int",0
 10963 00009DDC 58180000            <1> dd (f9-$$)/512
 10964 00009DE0 01000000            <1> dd (f10-f9)/512
 10965 00009DE4 6C6F7374776F6F6473- <1> db "lostwoods.sn",0
 10966 00009DED 2E736E00            <1>
 10967 00009DF1 59180000            <1> dd (f10-$$)/512
 10968 00009DF5 01000000            <1> dd (f11-f10)/512
 10969 00009DF9 6D6172696F2E736E00  <1> db "mario.sn",0
 10970 00009E02 5A180000            <1> dd (f11-$$)/512
 10971 00009E06 01000000            <1> dd (f12-f11)/512
 10972 00009E0A 70692E656C6600      <1> db "pi.elf",0
 10973 00009E11 5B180000            <1> dd (f12-$$)/512
 10974 00009E15 1F010000            <1> dd (f13-f12)/512
 10975 00009E19 736F6C6C65726F732E- <1> db "solleros.bmp",0
 10976 00009E22 626D7000            <1>
 10977 00009E26 7A190000            <1> dd (f13-$$)/512
 10978 00009E2A B0020000            <1> dd (f14-f13)/512
 10979 00009E2E 736F6C6C65726F732E- <1> db "solleros.txt",0
 10980 00009E37 74787400            <1>
 10981 00009E3B 2A1C0000            <1> dd (f14-$$)/512
 10982 00009E3F 01000000            <1> dd (f15-f14)/512
 10983 00009E43 736F6E676F74696D65- <1> db "songotime.sn",0
 10984 00009E4C 2E736E00            <1>
 10985 00009E50 2B1C0000            <1> dd (f15-$$)/512
 10986 00009E54 01000000            <1> dd (f16-f15)/512
 10987 00009E58 73736500            <1> db "sse",0
 10988 00009E5C 2C1C0000            <1> dd (f16-$$)/512
 10989 00009E60 02000000            <1> dd (f17-f16)/512
 10990 00009E64 737464696F74657374- <1> db "stdiotest.elf",0
 10991 00009E6D 2E656C6600          <1>
 10992 00009E72 2E1C0000            <1> dd (f17-$$)/512
 10993 00009E76 27010000            <1> dd (f18-f17)/512
 10994 00009E7A 74656C7900          <1> db "tely",0
 10995 00009E7F 551D0000            <1> dd (f18-$$)/512
 10996 00009E83 01000000            <1> dd (f19-f18)/512
 10997 00009E87 74696D65746573742E- <1> db "timetest.elf",0
 10998 00009E90 656C6600            <1>
 10999 00009E94 561D0000            <1> dd (f19-$$)/512
 11000 00009E98 04010000            <1> dd (f20-f19)/512
 11001 00009E9C 7475746F7269616C2E- <1> db "tutorial.sh",0
 11002 00009EA5 736800              <1>
 11003 00009EA8 5A1E0000            <1> dd (f20-$$)/512
 11004 00009EAC 03000000            <1> dd (f21-f20)/512
 11005 00009EB0 756E667300          <1> db "unfs",0
 11006 00009EB5 5D1E0000            <1> dd (f21-$$)/512
 11007 00009EB9 02000000            <1> dd (f22-f21)/512
 11008 00009EBD 766963746F72792E77- <1> db "victory.wav",0
 11009 00009EC6 617600              <1>
 11010 00009EC9 5F1E0000            <1> dd (f22-$$)/512
 11011 00009ECD 16000000            <1> dd (f23-f22)/512
 11012 00009ED1 5F696D672E62696E00  <1> db "_img.bin",0
 11013 00009EDA 751E0000            <1> dd (f23-$$)/512
 11014 00009EDE D7020000            <1> dd (f24-f23)/512
 11015                              <1> enddiskfileindex:
 11016                              <1> 
 11017                                      %include "source/bss.asm"
 11018 00009EE2 90<rept>            <1> align 4, nop
 11019                              <1> bssstart: equ $
 11020                              <1> guion equ bssstart
 11021                              <1> DriveNumber equ guion + 1
 11022                              <1> lbaad equ DriveNumber + 1
 11023                              <1> memlistbuf equ lbaad + 4
 11024                              <1> memlistend equ memlistbuf + 576
 11025                              <1> bsscopy equ memlistend
 11026                              <1> initialstack equ bsscopy
 11027                              <1> stackend equ initialstack + 4000
 11028                              <1> fileindex: equ stackend + 96
 11029                              <1> fileindexend: equ fileindex + 1024
 11030                              <1> previousstack equ fileindexend
 11031                              <1> lastfolderloc equ previousstack + 4
 11032                              <1> currentfolderloc equ lastfolderloc + 4
 11033                              <1> currentfolder equ currentfolderloc + 4
 11034                              <1> currentfolderend equ currentfolder + 512
 11035                              <1> uid equ currentfolderend
 11036                              <1> ranboot equ uid + 4
 11037                              <1> IFON equ ranboot + 1
 11038                              <1> IFTRUE equ IFON + 1
 11039                              <1> BATCHPOS equ IFTRUE + 100
 11040                              <1> BATCHISON equ BATCHPOS + 4
 11041                              <1> LOOPON equ BATCHISON + 1
 11042                              <1> LOOPPOS	equ LOOPON + 1
 11043                              <1> variables: equ LOOPPOS + 4
 11044                              <1> varend: equ variables + 4096
 11045                              <1> buftxt2: equ varend
 11046                              <1> buftxt: equ buftxt2 + 1024
 11047                              <1> buftxtend: equ buftxt + 1024
 11048                              <1> buf2: equ buftxtend
 11049                              <1> numbuf: equ buf2 + 20
 11050                              <1> %ifdef io.serial
 11051                              <1> 	lastcommandpos equ numbuf + 1
 11052                              <1> %else
 11053                              <1> 	%ifdef gui.included
 11054                              <1> 		graphicstable equ numbuf + 1 ;w type, dw datalocation, w locationx, w locationy, w selected, dw code
 11055                              <1> 		graphicstableend equ graphicstable + 200h
 11056                              <1> 		%ifdef gui.background
 11057                              <1> 			backgroundbuffer equ graphicstableend
 11058                              <1> 			backgroundbufferend equ backgroundbuffer + 1280*1026*2
 11059                              <1> 			mousecolorbuf equ backgroundbufferend
 11060                              <1> 		%else
 11061                              <1> 			mousecolorbuf equ graphicstableend ;where the gui under the mouse is stored
 11062                              <1> 		%endif
 11063                              <1> 		mcolorend equ mousecolorbuf + 256
 11064                              <1> 		videobuf equ mcolorend + 1	;1680x1050 pixels in characters
 11065                              <1> 		videobufend	equ videobuf + 210*65*2
 11066                              <1> 		videobuf2 equ videobufend
 11067                              <1> 		videobuf2end equ videobuf2 + 210*65*2
 11068                              <1> 	%else
 11069                              <1> 		videobuf equ numbuf + 1
 11070                              <1> 		videobufend equ videobuf + 80*30*2
 11071                              <1> 		videobuf2 equ videobufend
 11072                              <1> 		videobuf2end equ videobuf2 + 160*64*2
 11073                              <1> 	%endif
 11074                              <1> 	lastcommandpos: equ videobuf2end
 11075                              <1> %endif
 11076                              <1> 	commandbufpos: equ lastcommandpos + 4
 11077                              <1> 	commandlistentries: equ commandbufpos + 4
 11078                              <1> 	commandsentered: equ commandlistentries + 4
 11079                              <1> 	commandbuf: equ commandsentered + 4
 11080                              <1> 	commandbufend: equ commandbuf + 4096 ;this is where kernel space only ends, the rest is for threading
 11081                              <1> %ifdef network.included
 11082                              <1> 	rbuffstart: equ commandbufend ;for use with networking
 11083                              <1> 	rbuffend equ rbuffstart + 8212
 11084                              <1> %else
 11085                              <1> 	rbuffstart equ commandbufend
 11086                              <1> 	rbuffend equ commandbufend
 11087                              <1> %endif
 11088                              <1> %ifdef threads.included
 11089                              <1> 	threadlist: equ rbuffend ;this buffer will hold the stack locations of all of the threads, up to 2048
 11090                              <1> 	threadlistend: equ threadlist + 1024*4
 11091                              <1> 	stacks:	equ threadlistend ;i use SS now for proper stack management. This makes sure stacks never screw with other memory
 11092                              <1> 	stack1: equ stacks + 1024  ;woah, thats a lot of space for stacks
 11093                              <1> 	bssend equ stack1 + 1024*1024
 11094                              <1> %else
 11095                              <1> 	bssend equ rbuffend
 11096                              <1> %endif
 11097                              <1> dosprogloc equ 0x400000 ;from here on, it is not kernel space so apps can be loaded here.
 11098                                      %include "build/files.asm"
 11099 00009EE4 00<rept>            <1> align 512,db 0
 11100                              <1> f0:
 11101 00009EE4 <incbin>            <1> incbin "included/argtest.elf"
 11102 0002AAF2 00<rept>            <1> align 512,db 0
 11103                              <1> f1:
 11104 0002AAF2 <incbin>            <1> incbin "included/background.bmp"
 11105 002AAC46 00<rept>            <1> align 512,db 0
 11106                              <1> f2:
 11107 002AAC46 <incbin>            <1> incbin "included/boot.sh"
 11108 002AAF05 00<rept>            <1> align 512,db 0
 11109                              <1> f3:
 11110 002AAF05 <incbin>            <1> incbin "included/chartest.elf"
 11111 002CFADB 00<rept>            <1> align 512,db 0
 11112                              <1> f4:
 11113 002CFADB <incbin>            <1> incbin "included/dostest.com"
 11114 002CFD31 00<rept>            <1> align 512,db 0
 11115                              <1> f5:
 11116 002CFD31 <incbin>            <1> incbin "included/exec"
 11117 002CFEE9 00<rept>            <1> align 512,db 0
 11118                              <1> f6:
 11119 002CFEE9 <incbin>            <1> incbin "included/finalcount.sn"
 11120 002D0102 00<rept>            <1> align 512,db 0
 11121                              <1> f7:
 11122 002D0102 <incbin>            <1> incbin "included/fork"
 11123 002D0362 00<rept>            <1> align 512,db 0
 11124                              <1> f8:
 11125 002D0362 <incbin>            <1> incbin "included/helloworld.elf"
 11126 0030AFE3 00<rept>            <1> align 512,db 0
 11127                              <1> f9:
 11128 0030AFE3 <incbin>            <1> incbin "included/int"
 11129 0030B1B5 00<rept>            <1> align 512,db 0
 11130                              <1> f10:
 11131 0030B1B5 <incbin>            <1> incbin "included/lostwoods.sn"
 11132 0030B256 00<rept>            <1> align 512,db 0
 11133                              <1> f11:
 11134 0030B256 <incbin>            <1> incbin "included/mario.sn"
 11135 0030B43A 00<rept>            <1> align 512,db 0
 11136                              <1> f12:
 11137 0030B43A <incbin>            <1> incbin "included/pi.elf"
 11138 0032F331 00<rept>            <1> align 512,db 0
 11139                              <1> f13:
 11140 0032F331 <incbin>            <1> incbin "included/solleros.bmp"
 11141 003853E6 00<rept>            <1> align 512,db 0
 11142                              <1> f14:
 11143 003853E6 <incbin>            <1> incbin "included/solleros.txt"
 11144 00385574 00<rept>            <1> align 512,db 0
 11145                              <1> f15:
 11146 00385574 <incbin>            <1> incbin "included/songotime.sn"
 11147 0038564A 00<rept>            <1> align 512,db 0
 11148                              <1> f16:
 11149 0038564A <incbin>            <1> incbin "included/sse"
 11150 00385AA8 00<rept>            <1> align 512,db 0
 11151                              <1> f17:
 11152 00385AA8 <incbin>            <1> incbin "included/stdiotest.elf"
 11153 003AA843 00<rept>            <1> align 512,db 0
 11154                              <1> f18:
 11155 003AA843 <incbin>            <1> incbin "included/tely"
 11156 003AABC7 00<rept>            <1> align 512,db 0
 11157                              <1> f19:
 11158 003AABC7 <incbin>            <1> incbin "included/timetest.elf"
 11159 003CB23D 00<rept>            <1> align 512,db 0
 11160                              <1> f20:
 11161 003CB23D <incbin>            <1> incbin "included/tutorial.sh"
 11162 003CB952 00<rept>            <1> align 512,db 0
 11163                              <1> f21:
 11164 003CB952 <incbin>            <1> incbin "included/unfs"
 11165                              <1> align 512,db 0
 11166                              <1> f22:
 11167 003CB952 <incbin>            <1> incbin "included/victory.wav"
 11168 003CE948 00<rept>            <1> align 512,db 0
 11169                              <1> f23:
 11170 003CE948 <incbin>            <1> incbin "included/_img.bin"
 11171                              <1> align 512,db 0
 11172                              <1> f24:
