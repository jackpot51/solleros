     1                                  [map symbols build/kernel.map]
     2                                  %include "config.asm"
     3                              <1> ;These flags are used to configure options as on, put a simicolon in front of it to not configure it
     4                              <1> 
     5                              <1> %define gui.included
     6                              <1> ;Turn on the gui
     7                              <1> 
     8                              <1> ;%define gui.alphablending
     9                              <1> ;Make the terminal in the GUI 25% transparent
    10                              <1> 
    11                              <1> ;%define gui.background
    12                              <1> ;Make the GUI have a loadable background
    13                              <1> 
    14                              <1> ;%define gui.time
    15                              <1> ;Show time in top right corner of screen
    16                              <1> 
    17                              <1> ;%define io.serial "1"
    18                              <1> ;Use the specified serial port for input and output instead of the keyboard and screen
    19                              <1> ;If the gui is included this should not be enabled
    20                              <1> 
    21                              <1> ;%define terminal.vsync
    22                              <1> ;Uses the RTC to automatically update the terminal at ~64Hz
    23                              <1> 	;WARNING:
    24                              <1> 	;This may cause problems on systems with non-standard RTC's
    25                              <1> 	;It is therefore recommended that you do not enable it even
    26                              <1> 	;though it gives a large speed improvement for character output
    27                              <1> 
    28                              <1> %define hardware.automatic
    29                              <1> ;Automatically load the sound and network drivers.
    30                              <1> 
    31                              <1> %define threads.included
    32                              <1> ;Include the thread testing stuff-this uses a relatively large amount of memory
    33                              <1> 
    34                              <1> %define exceptions.included
    35                              <1> ;Display debugging information should crashes occur-also uses quite a bit of memory
    36                              <1> 
    37                              <1> ;%define disk.protected
    38                              <1> ;Use protected mode instead of real mode for disk access-this allows for multitasking with disk reads
    39                              <1> 
    40                              <1> %define disk.real
    41                              <1> ;Use real mode for disk access-this gives greater compatibility
    42                              <1> 
    43                              <1> ;%define sound.included
    44                              <1> ;This includes the sound drivers
    45                              <1> 
    46                              <1> ;%define network.included
    47                              <1> ;This includes the network stack
    48                              <1> 
    49                              <1> ;%define rtl8169.included
    50                              <1> ;This includes the RTL8169 drivers
    51                              <1> 
    52                              <1> ;%define rtl8139.included
    53                              <1> ;This includes the RTL8139 drivers
    54                              <1> 
    55                              <1> ;%define ne2000.included
    56                              <1> ;This includes the ne2000 drivers
    57                              <1> 
    58                              <1> ;%define i8254x.included
    59                              <1> ;This includes the Intel 8254x drivers
    60                              <1> 
    61                              <1> ;%define sector.debug
    62                              <1> ;Dump the contents of the first sector of SollerOS
    63                              <1> 
    64                              <1> ;%define dos.compatible
    65                              <1> ;Make the kernel loadable by dos.
    66                              <1> 
    67                              <1> ;%define system.simple
    68                              <1> ;The smallest possible system, overrides all options
    69                              <1> 
    70                              <1> ;FIX DEPENDANCIES
    71                              <1> %ifdef system.simple
    72                              <1> 	%undef dos.compatible	;overides all including dos.compatible
    73                              <1> 	%define UNDEFALL
    74                              <1> %endif
    75                              <1> %ifdef dos.compatible
    76                              <1> 	%define UNDEFALL
    77                              <1> %endif
    78                              <1> %ifdef UNDEFALL
    79                              <1> 	%undef io.serial
    80                              <1> 	%undef disk.real
    81                              <1> 	%undef gui.included
    82                              <1> 	%undef gui.alphablending
    83                              <1> 	%undef gui.background
    84                              <1> 	%undef terminal.vsync
    85                              <1> 	%undef hardware.automatic
    86                              <1> 	%undef threads.included
    87                              <1> 	%undef exceptions.included
    88                              <1> 	%undef disk.protected
    89                              <1> 	%undef sound.included
    90                              <1> 	%undef network.included
    91                              <1> 	%undef rtl8139.included
    92                              <1> 	%undef rtl8169.included
    93                              <1> 	%undef ne2000.included
    94                              <1> 	%undef i8254x.included
    95                              <1> 	%undef sector.debug
    96                              <1> 	%undef UNDEFALL
    97                              <1> %endif
    98                              <1> %ifdef system.simple
    99                              <1> 	%define io.serial "1"
   100                              <1> 	%define disk.real
   101                              <1> %endif
   102                              <1> %ifdef gui.included
   103                              <1> 	%undef io.serial
   104                              <1> %else
   105                              <1> 	%undef gui.alphablending
   106                              <1> 	%undef gui.background
   107                              <1> %endif
   108                              <1> %ifdef network.included
   109                              <1> %else
   110                              <1> 	%undef i8254x.included
   111                              <1> 	%undef ne2000.included
   112                              <1> 	%undef rtl8139.included
   113                              <1> 	%undef rtl8169.included
   114                              <1> %endif
   115                              <1> %ifdef disk.protected
   116                              <1> 	%undef disk.real
   117                              <1> %else
   118                              <1> 	%ifdef disk.real
   119                              <1> 	%else
   120                              <1> 		%define disk.none
   121                              <1> 	%endif
   122                              <1> %endif
   123                                  [ORG 0x100]
   124                                  	%include "source/signature.asm"
   125                              <1> sigjump:
   126 00000000 E90E00              <1> 	jmp signatureend
   127                              <1> signature:
   128 00000003 536F6C6C65724F5320- <1> db "SollerOS ",0 ;Operating system name
   129 0000000C 00                  <1>
   130 0000000D 09010000            <1> dd 265	;version number
   131                              <1> signatureend:
   132                                  [BITS 16]
   133                                      %include "source/boot.asm"
   134                              <1>     ; MENU.ASM
   135                              <1> boot:
   136 00000011 8CC8                <1> 	mov ax, cs
   137 00000013 8ED8                <1> 	mov ds, ax
   138 00000015 8EC0                <1> 	mov es, ax
   139 00000017 8ED0                <1> 	mov ss, ax
   140 00000019 880E[6582]          <1> 	mov [DriveNumber], cl
   141 0000001D 668916[6682]        <1> 	mov [lbaad], edx
   142                              <1> %ifdef io.serial
   143                              <1> 	call getmemorysize
   144                              <1> 	mov si, serialmsg
   145                              <1> 	call printrm
   146                              <1> 	jmp pmode
   147                              <1> serialmsg: db 10,13,"SollerOS: Using serial port ",io.serial," for I/O.",0
   148                              <1> %else
   149 00000022 E80300              <1> 	call vgaset	;make users switch using a command-this leads to very fast boots
   150 00000025 E95700              <1> 	jmp pmode
   151                              <1> %endif
   152                              <1> 	
   153                              <1> vgaset:
   154 00000028 B81200              <1> 	mov ax, 12h
   155 0000002B 31DB                <1> 	xor bx, bx
   156 0000002D CD10                <1> 	int 10h
   157 0000002F C606[6482]00        <1> 	mov byte [guion], 0
   158 00000034 E80100              <1> 	call getmemorysize;get the memory map after the video is initialized
   159 00000037 C3                  <1> 	ret
   160                              <1> 
   161                              <1> getmemorysize:
   162 00000038 BF[6A82]            <1> 	mov di, memlistbuf
   163 0000003B 6631DB              <1> 	xor ebx, ebx
   164                              <1> getmemsizeloop:
   165 0000003E 66B820E80000        <1> 	mov eax, 0xE820
   166 00000044 66BA50414D53        <1> 	mov edx, 0x0534D4150
   167 0000004A 66B918000000        <1> 	mov ecx, 24
   168 00000050 CD15                <1> 	int 0x15
   169 00000052 81C71800            <1> 	add di, 24
   170 00000056 81FF[AA84]          <1> 	cmp di, memlistend
   171 0000005A 7309                <1> 	jae nomoregetmemsize
   172 0000005C 6681FB00000000      <1> 	cmp ebx, 0
   173 00000063 75D9                <1> 	jne getmemsizeloop
   174                              <1> nomoregetmemsize:
   175 00000065 81EF[6A82]          <1> 	sub di, memlistbuf
   176 00000069 893E[AA84]          <1> 	mov [memlistend], di
   177 0000006D C3                  <1> 	ret
   178                              <1> 	
   179                              <1> printrm:			; 'si' comes in with string address
   180 0000006E BB0700              <1>     mov bx,07		; write to display
   181 00000071 B40E                <1>     mov ah,0Eh		; screen function
   182 00000073 8A04                <1>    .lp:    mov al,[si]         ; get next character
   183 00000075 3C00                <1>     cmp al,0		; look for terminator 
   184 00000077 7405                <1>     je .done		; zero byte at end of string
   185 00000079 CD10                <1>     int 10h		; write character to screen.    
   186 0000007B 46                  <1> 	inc si	     	; move to next character
   187 0000007C EBF5                <1>     jmp .lp		; loop
   188 0000007E C3                  <1> .done: ret
   189                                      %include "source/pmode.asm"
   190                              <1> [BITS 16]
   191                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   192                              <1> ;	16-bit real mode
   193                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   194                              <1> 
   195                              <1> pmode:
   196 0000007F 6631C0              <1> 	xor eax, eax
   197 00000082 6631DB              <1> 	xor ebx, ebx
   198 00000085 6631C9              <1> 	xor ecx, ecx
   199 00000088 6631D2              <1> 	xor edx, edx
   200 0000008B 6631F6              <1> 	xor esi, esi
   201 0000008E 6631FF              <1> 	xor edi, edi
   202 00000091 BA9200              <1> 	mov dx, 0x92
   203 00000094 EC                  <1> 	in al, dx	;;A20
   204 00000095 0C02                <1> 	or al, 2
   205 00000097 EE                  <1> 	out dx, al
   206 00000098 8CCB                <1> 	mov bx,cs		; EBX=segment
   207 0000009A 66C1E304            <1> 	shl ebx,4		;	<< 4
   208 0000009E 67668D03            <1> 	lea eax,[ebx]		; EAX=linear address of segment base
   209 000000A2 A3[7203]            <1> 	mov [gdt2 + 2],ax
   210 000000A5 A3[7A03]            <1> 	mov [gdt3 + 2],ax
   211 000000A8 66C1E810            <1> 	shr eax,16
   212 000000AC A2[7403]            <1> 	mov [gdt2 + 4],al
   213 000000AF A2[7C03]            <1> 	mov [gdt3 + 4],al
   214 000000B2 8826[7703]          <1> 	mov [gdt2 + 7],ah
   215 000000B6 8826[7F03]          <1> 	mov [gdt3 + 7],ah
   216                              <1> 
   217 000000BA 66B8[D4860300]      <1> 	mov eax, initialstack
   218 000000C0 660306[3902]        <1> 	add eax, [newcodecache]
   219 000000C5 A3[6A03]            <1> 	mov [gdts + 2],ax
   220 000000C8 66C1E810            <1> 	shr eax, 16
   221 000000CC A2[6C03]            <1> 	mov [gdts + 4],al
   222 000000CF 8826[6F03]          <1> 	mov [gdts + 7], ah
   223                              <1> 	
   224 000000D3 66A1[3902]          <1> 	mov eax, [newcodecache]
   225 000000D7 A3[8203]            <1> 	mov [gdt4 + 2],ax
   226 000000DA A3[8A03]            <1> 	mov [gdt5 + 2],ax
   227 000000DD A3[9203]            <1> 	mov [gdtv8086 + 2], ax
   228 000000E0 A3[9A03]            <1> 	mov [gdtv80862 + 2], ax
   229 000000E3 66C1E810            <1> 	shr eax,16
   230 000000E7 A2[8403]            <1> 	mov [gdt4 + 4],al
   231 000000EA A2[8C03]            <1> 	mov [gdt5 + 4],al
   232 000000ED A2[9403]            <1> 	mov [gdtv8086 + 4],al
   233 000000F0 A2[9C03]            <1> 	mov [gdtv80862 + 4],al
   234 000000F3 8826[8703]          <1> 	mov [gdt4 + 7],ah
   235 000000F7 8826[8F03]          <1> 	mov [gdt5 + 7],ah
   236 000000FB 8826[9703]          <1> 	mov [gdtv8086 + 7],ah
   237 000000FF 8826[9F03]          <1> 	mov [gdtv80862 + 7],ah
   238                              <1> 	
   239 00000103 66B800004000        <1> 	mov eax, dosprogloc
   240 00000109 660306[3902]        <1> 	add eax, [newcodecache]
   241 0000010E A3[A203]            <1> 	mov [gdtdos + 2],ax
   242 00000111 A3[AA03]            <1> 	mov [gdtdos2 + 2],ax
   243 00000114 66C1E810            <1> 	shr eax,16
   244 00000118 A2[A403]            <1> 	mov [gdtdos + 4],al
   245 0000011B A2[AC03]            <1> 	mov [gdtdos2 + 4],al
   246 0000011E 8826[A703]          <1> 	mov [gdtdos + 7],ah
   247 00000122 8826[AF03]          <1> 	mov [gdtdos2 + 7],ah
   248                              <1> 	
   249                              <1> ; fix up gdt and idt
   250 00000126 67668D83[58030000]  <1> 	lea eax,[ebx + gdt]	; EAX=linear address of gdt
   251 0000012E 66A3[4E03]          <1> 	mov [gdtr + 2],eax
   252 00000132 67668D83[B0030000]  <1> 	lea eax,[ebx + idt]	; EAX=linear address of idt
   253 0000013A 66A3[5403]          <1> 	mov [idtr + 2],eax
   254 0000013E FA                  <1> 	cli
   255 0000013F 0F0116[4C03]        <1> 	lgdt [gdtr]
   256 00000144 0F011E[5203]        <1> 	lidt [idtr]
   257 00000149 6631DB              <1> 	xor ebx, ebx
   258 0000014C 8CDB                <1> 	mov bx, ds
   259 0000014E 66891E[3502]        <1> 	mov [basecache], ebx
   260 00000153 0F20C0              <1> 	mov eax,cr0
   261 00000156 0C01                <1> 	or al,1
   262 00000158 0F22C0              <1> 	mov cr0,eax
   263 0000015B EA[6001]1800        <1> 	jmp SYS_CODE_SEL:do_pm
   264                              <1> [BITS 32]
   265                              <1> do_pm:
   266 00000160 31C0                <1> 	xor eax, eax
   267 00000162 66B82000            <1> 	mov ax, SYS_DATA_SEL
   268 00000166 8ED8                <1> 	mov ds, ax
   269 00000168 8EC0                <1> 	mov es, ax
   270 0000016A 8EE0                <1> 	mov fs, ax
   271 0000016C 66B83000            <1> 	mov ax, NEW_DATA_SEL
   272 00000170 8EE8                <1> 	mov gs, ax
   273                              <1> 	
   274                              <1> copykernel:
   275 00000172 648B06              <1> 	mov eax, [fs:esi]
   276 00000175 658906              <1> 	mov [gs:esi], eax
   277 00000178 81C604000000        <1> 	add esi, 4
   278 0000017E 81FE[D4860300]      <1> 	cmp esi, bsscopy
   279 00000184 72EC                <1> 	jb copykernel
   280 00000186 EA[8D010000]2800    <1> 	jmp NEW_CODE_SEL:done_copy
   281                              <1> 	
   282                              <1> done_copy:
   283 0000018D 66B83000            <1> 	mov ax, NEW_DATA_SEL	;;these MUST be setup AFTER the kernel switches places!!!
   284 00000191 8ED8                <1> 	mov ds, ax
   285 00000193 8EC0                <1> 	mov es, ax
   286 00000195 8EE0                <1> 	mov fs, ax
   287                              <1> 	;mov ax, STACK_SEL
   288 00000197 8ED0                <1> 	mov ss, ax
   289 00000199 BC[74960300]        <1> 	mov esp, stackend
   290 0000019E 66B82000            <1> 	mov ax, SYS_DATA_SEL
   291 000001A2 8EE8                <1> 	mov gs, ax
   292                              <1> 	
   293 000001A4 E8EA5C0000          <1> 	call initialize	;initialize drivers
   294                              <1> 	
   295 000001A9 A1[39020000]        <1> 	mov eax, [newcodecache]
   296 000001AE C1E804              <1> 	shr eax, 4
   297 000001B1 A3[35020000]        <1> 	mov [basecache], eax
   298                              <1> 	
   299 000001B6 BE[0E871500]        <1> 	mov esi, bssend
   300 000001BB 31C0                <1> 	xor eax, eax
   301                              <1> clearkernelbuffers:
   302 000001BD 8906                <1> 	mov [esi], eax
   303 000001BF 81EE04000000        <1> 	sub esi, 4
   304 000001C5 81FE[D4860300]      <1> 	cmp esi, bsscopy
   305 000001CB 77F0                <1> 	ja clearkernelbuffers
   306 000001CD FB                  <1> 	sti
   307                              <1> 
   308                              <1> getmemoryspace:
   309 000001CE BE[6A820000]        <1> 	mov esi, memlistbuf
   310 000001D3 31FF                <1> 	xor edi, edi
   311 000001D5 668B3D[AA840000]    <1> 	mov di, [memlistend]
   312 000001DC 01F7                <1> 	add edi, esi
   313 000001DE 31C0                <1> 	xor eax, eax
   314                              <1> memoryspaceaddition:
   315 000001E0 39FE                <1> 	cmp esi, edi
   316 000001E2 7322                <1> 	jae finishedmemspacecalc
   317 000001E4 81C608000000        <1> 	add esi, 8
   318 000001EA 8B0E                <1> 	mov ecx, [esi]
   319 000001EC 81C608000000        <1> 	add esi, 8
   320 000001F2 8B1E                <1> 	mov ebx, [esi]
   321 000001F4 81C608000000        <1> 	add esi, 8
   322 000001FA 81FB01000000        <1> 	cmp ebx, 1
   323 00000200 75DE                <1> 	jne memoryspaceaddition
   324 00000202 01C8                <1> 	add eax, ecx
   325 00000204 EBDA                <1> 	jmp memoryspaceaddition
   326                              <1> finishedmemspacecalc:
   327 00000206 A3[4A020000]        <1> 	mov [memoryspace], eax
   328                              <1> %ifdef gui.included
   329 0000020B 803D[64820000]00    <1> 	cmp byte [guion], 0
   330 00000212 741C                <1> 	je normalstartup
   331 00000214 8B1D[35020000]      <1> 	mov ebx, [basecache]
   332 0000021A C1E304              <1> 	shl ebx, 4
   333 0000021D 8B3D[86540000]      <1> 	mov edi, [physbaseptr]
   334 00000223 29DF                <1> 	sub edi, ebx
   335 00000225 893D[86540000]      <1> 	mov [physbaseptr], edi
   336 0000022B E970620000          <1> 	jmp guiboot
   337                              <1> %endif
   338                              <1> normalstartup:
   339 00000230 E9B3280000          <1> 	jmp os
   340                              <1> 	
   341 00000235 00000000            <1> basecache dd 0
   342 00000239 00001000            <1> newcodecache dd 0x100000
   343                              <1> 
   344 0000023D 00                  <1> testingcpuspeed db 0
   345 0000023E 00000000            <1> cpuspeedperint dd 0
   346 00000242 0000000000000000    <1> cpuclocksperint dd 0,0
   347 0000024A 00000000            <1> memoryspace dd 0
   348 0000024E 7D0A                <1> pitdiv dw 2685
   349 00000250 2E562200            <1> timeinterval dd 2250286
   350 00000254 00000000            <1> timeseconds dd 0
   351 00000258 00000000            <1> timenanoseconds dd 0
   352 0000025C 00                  <1> soundon db 0
   353 0000025D 0000                <1> soundrepititions dw 0
   354 0000025F 00000000            <1> soundpos dd 0
   355 00000263 00000000            <1> soundendpos dd 0
   356                              <1> 
   357                              <1> cpuspeedend:
   358 00000267 C605[3D020000]00    <1> 	mov byte [testingcpuspeed], 0
   359 0000026E A3[3E020000]        <1> 	mov [cpuspeedperint], eax
   360 00000273 B8[444A0000]        <1> 	mov eax, cpuspeedloopend
   361 00000278 890424              <1> 	mov [esp], eax
   362 0000027B E9BC000000          <1> 	jmp handled
   363                              <1> 
   364                              <1> ;if using the rtc, the default frequency yeilds a period of 976562.5ns
   365                              <1> ;if using the pit, div=451 is 377981.0004, div=5370 is 4500572.00007ns
   366                              <1> ;div=55483 is 46500044.000006ns, div=2685 is 2250286.00004ns, div=902 is 755962.0008
   367                              <1> 
   368                              <1> pitinterrupt: ;this controls threading
   369 00000280 FA                  <1> 	cli
   370 00000281 803D[3D020000]01    <1> 	cmp byte [testingcpuspeed], 1	;check to see if the cpu speed test is running
   371 00000288 74DD                <1> 	je cpuspeedend
   372                              <1> 		
   373 0000028A E886000000          <1> 	call timekeeper ;this updates the internal time
   374                              <1> 	
   375 0000028F 803D[5C020000]01    <1> 	cmp byte [soundon], 1
   376 00000296 0F84CE550000        <1> 	je near PCSpeakerRAW
   377                              <1> timerinterrupt:	;put this into the interrupt handler that controls threading
   378                              <1> %ifdef threads.included
   379 0000029C 803D[9B640000]01    <1> 	cmp byte [threadson], 1
   380 000002A3 0F8492610000        <1> 	je near threadswitch
   381                              <1> %endif
   382                              <1> keyinterrupt:		;checks for escape, if pressed, it quits the program currently running
   383 000002A9 803D[9B640000]00    <1> 	cmp byte [threadson], 0
   384 000002B0 0F8486000000        <1> 	je near handled
   385                              <1> %ifdef io.serial
   386                              <1> 	jmp handled
   387                              <1> %else
   388 000002B6 60                  <1> 	pusha
   389 000002B7 E464                <1> 	in al, 64h
   390 000002B9 A820                <1> 	test al, 20h
   391 000002BB 0F8579000000        <1> 	jnz near handled2
   392 000002C1 E460                <1> 	in al, 60h
   393 000002C3 3C01                <1> 	cmp al, 1		;escape
   394 000002C5 7405                <1> 	je userint
   395 000002C7 E96E000000          <1> 	jmp handled2
   396                              <1> ;	cmp al, 0x57
   397                              <1> ;	jne near handled2
   398                              <1> ;pauseint:	;F11 pauses
   399                              <1> ;	in al, 64h
   400                              <1> ;	test al, 20h
   401                              <1> ;	jnz pauseint
   402                              <1> ;	in al, 60h
   403                              <1> ;	cmp al, 0xD7
   404                              <1> ;	jne pauseint
   405                              <1> ;	mov esi, pausemsg
   406                              <1> ;	call print
   407                              <1> ;	cli
   408                              <1> ;pauselp:
   409                              <1> ;	nop
   410                              <1> ;	in al, 64h
   411                              <1> ;	test al, 20h
   412                              <1> ;	jnz pauselp
   413                              <1> ;	in al, 60h
   414                              <1> ;	cmp al, 0x57
   415                              <1> ;	je near handled2
   416                              <1> ;	jmp pauselp
   417                              <1> ;pausemsg db "Paused",10,0
   418                              <1> userint:
   419 000002CC 31C0                <1> 	xor eax, eax
   420 000002CE 3905[D4960300]      <1> 	cmp [sigtable], eax
   421 000002D4 7411                <1> 	je .nosighook
   422 000002D6 8B1D[D4960300]      <1> 	mov ebx, [sigtable]
   423 000002DC 895C2420            <1> 	mov [esp + 32], ebx
   424                              <1> ;	mov [sigtable], eax
   425 000002E0 B020                <1> 	mov al, 0x20
   426 000002E2 E620                <1> 	out 0x20, al
   427 000002E4 61                  <1> 	popa
   428 000002E5 FB                  <1> 	sti
   429 000002E6 CF                  <1> 	iret
   430                              <1> .nosighook:
   431                              <1> 		;UNMASK ALL INTS
   432 000002E7 E621                <1> 	out 0x21, al
   433 000002E9 E6A1                <1> 	out 0xA1, al
   434 000002EB B020                <1> 	mov al, 0x20
   435 000002ED E6A0                <1> 	out 0xA0, al
   436 000002EF E620                <1> 	out 0x20, al
   437                              <1> 		;RESET PIT DIVISOR
   438 000002F1 66A1[4E020000]      <1> 	mov ax, [pitdiv]
   439 000002F7 E640                <1> 	out 0x40, al
   440 000002F9 66C1C008            <1> 	rol ax, 8
   441 000002FD E640                <1> 	out 0x40, al
   442                              <1> 		;RESET PIC
   443 000002FF B020                <1> 	mov al, 0x20
   444 00000301 E620                <1> 	out 0x20, al
   445 00000303 61                  <1> 	popa
   446 00000304 FB                  <1> 	sti
   447 00000305 BC[74960300]        <1> 	mov esp, stackend ;reset stack
   448 0000030A E932290000          <1> 	jmp returnfromexp
   449                              <1> %endif
   450 0000030F 0A                  <1> rtcrate db 10
   451                              <1> rtcint:	;this runs at 64Hz which is perfect for 60Hz displays
   452                              <1> %ifdef io.serial
   453                              <1> %else
   454                              <1> %ifdef terminal.vsync
   455                              <1> 	cli
   456                              <1> 	cmp byte [termcopyneeded], 0
   457                              <1> 	je .nocopy
   458                              <1> 	call newtermcopy
   459                              <1> .nocopy
   460                              <1> 	push eax
   461                              <1> 	mov al, 0xC
   462                              <1> 	out 0x70, al
   463                              <1> 	in al, 0x71
   464                              <1> 	pop eax
   465                              <1> 	sti
   466                              <1> %endif
   467                              <1> %endif
   468 00000310 E92E000000          <1> 	jmp handled4
   469                              <1> %ifdef rtl8139.included
   470                              <1> rtl8139.irq:
   471                              <1> 	cli
   472                              <1> 	push edx
   473                              <1> 	push eax
   474                              <1> 	mov edx, [rtl8139.basenicaddr]
   475                              <1> 	add edx, rtl8139.ISR
   476                              <1> 	xor eax, eax
   477                              <1> 	in ax, dx
   478                              <1> 	out dx, ax
   479                              <1> 	pop eax
   480                              <1> 	pop edx
   481                              <1> 	sti
   482                              <1> 	jmp handled4
   483                              <1> %endif
   484                              <1> %ifdef sound.included
   485                              <1> sblaster.irq:
   486                              <1> 	cli
   487                              <1> 	pusha
   488                              <1> 	cmp byte [SoundBlaster], 1
   489                              <1> 	je near sblaster.cont
   490                              <1> 	jmp handled2
   491                              <1> %endif
   492                              <1> 	
   493                              <1> timekeeper:
   494 00000315 50                  <1> 	push eax
   495 00000316 A1[58020000]        <1> 	mov eax, [timenanoseconds]
   496 0000031B 0305[50020000]      <1> 	add eax, [timeinterval]
   497 00000321 3D00CA9A3B          <1> 	cmp eax, 1000000000
   498 00000326 720B                <1> 	jb nonanosecondrollover
   499 00000328 FF05[54020000]      <1> 	inc dword [timeseconds]
   500 0000032E 2D00CA9A3B          <1> 	sub eax, 1000000000
   501                              <1> 	%ifdef gui.time
   502                              <1> 		;REMOVE THIS IT IS NOT EFFICIENT
   503                              <1> 		cmp byte [guion], 1
   504                              <1> 		jne nonanosecondrollover
   505                              <1> 		cmp dword [dragging], 0
   506                              <1> 		jne nonanosecondrollover
   507                              <1> 		pusha
   508                              <1> 		call guitime
   509                              <1> 		popa
   510                              <1> 	%endif
   511                              <1> nonanosecondrollover:
   512 00000333 A3[58020000]        <1> 	mov [timenanoseconds], eax
   513 00000338 58                  <1> 	pop eax
   514 00000339 C3                  <1> 	ret
   515                              <1> 	
   516                              <1> handled2:
   517 0000033A 61                  <1> 	popa
   518                              <1> handled3:
   519 0000033B FB                  <1> 	sti
   520                              <1> handled:
   521 0000033C 50                  <1> 	push eax
   522 0000033D B020                <1> 	mov al, 0x20
   523 0000033F E620                <1> 	out 0x20, al
   524 00000341 58                  <1> 	pop eax
   525 00000342 CF                  <1> 	iret
   526                              <1> handled4:
   527 00000343 50                  <1> 	push eax
   528 00000344 B020                <1> 	mov al, 0x20
   529 00000346 E6A0                <1> 	out 0xA0, al
   530 00000348 E620                <1> 	out 0x20, al
   531 0000034A 58                  <1> 	pop eax
   532 0000034B CF                  <1> 	iret
   533                              <1> [BITS 16]
   534                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   535                              <1> ;	16-bit limit/32-bit linear base address of GDT and IDT
   536                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   537 0000034C 5700                <1> gdtr:	dw gdt_end - gdt - 1	; GDT limit
   538 0000034E 00000000            <1> 	dd 0    		; filled with linear, physical address of GDT
   539                              <1> 
   540 00000352 FF07                <1> idtr:	dw idt_end - idt - 1	; IDT limit
   541 00000354 00000000            <1> 	dd 0			; filled with linear, physical address of IDT
   542                              <1> 
   543                              <1> 
   544 00000358 0000                <1> gdt:	dw 0			; limit 15:0
   545 0000035A 0000                <1> 	dw 0			; base 15:0
   546 0000035C 00                  <1> 	db 0			; base 23:16
   547 0000035D 00                  <1> 	db 0			; type
   548 0000035E 00                  <1> 	db 0			; limit 19:16, flags
   549 0000035F 00                  <1> 	db 0			; base 31:24
   550                              <1> ; linear data segment descriptor
   551                              <1> LINEAR_SEL	equ	$-gdt
   552 00000360 FFFF                <1> 	dw 0xFFFF		; limit 0xFFFFF
   553 00000362 0000                <1> 	dw 0			; base for this one is always 0
   554 00000364 00                  <1> 	db 0
   555 00000365 92                  <1> 	db 0x92			; present, ring 0, data, expand-up, writable
   556 00000366 CF                  <1> 	db 0xCF			; page-granular, 32-bit
   557 00000367 00                  <1> 	db 0
   558                              <1> STACK_SEL	equ $-gdt
   559 00000368 0200                <1> gdts:	dw 2;(stackend)/4096
   560 0000036A 0000                <1> 	dw 0
   561 0000036C 00                  <1> 	db 0
   562 0000036D 92                  <1> 	db 0x92
   563 0000036E CF                  <1> 	db 0xCF
   564 0000036F 00                  <1> 	db 0
   565                              <1> ; code segment descriptor
   566                              <1> SYS_CODE_SEL	equ	$-gdt
   567 00000370 FFFF                <1> gdt2:	dw 0xFFFF
   568 00000372 0000                <1> 	dw 0			; (base gets set above)
   569 00000374 00                  <1> 	db 0
   570 00000375 9A                  <1> 	db 0x9A			; present, ring 0, code, non-conforming, readable
   571 00000376 CF                  <1> 	db 0xCF
   572 00000377 00                  <1> 	db 0
   573                              <1> ; data segment descriptor
   574                              <1> SYS_DATA_SEL	equ	$-gdt
   575 00000378 FFFF                <1> gdt3:	dw 0xFFFF
   576 0000037A 0000                <1> 	dw 0			; (base gets set above)
   577 0000037C 00                  <1> 	db 0
   578 0000037D 92                  <1> 	db 0x92			; present, ring 0, data, expand-up, writable
   579 0000037E CF                  <1> 	db 0xCF
   580 0000037F 00                  <1> 	db 0
   581                              <1> NEW_CODE_SEL	equ	$-gdt
   582 00000380 FFFF                <1> gdt4:	dw 0xFFFF
   583 00000382 0000                <1> 	dw 0			; (base gets set above)
   584 00000384 00                  <1> 	db 0
   585 00000385 9A                  <1> 	db 0x9A			; present, ring 0, code, non-conforming, readable
   586 00000386 CF                  <1> 	db 0xCF
   587 00000387 00                  <1> 	db 0
   588                              <1> ; data segment descriptor
   589                              <1> NEW_DATA_SEL	equ	$-gdt
   590 00000388 FFFF                <1> gdt5:	dw 0xFFFF
   591 0000038A 0000                <1> 	dw 0			; (base gets set above)
   592 0000038C 00                  <1> 	db 0
   593 0000038D 92                  <1> 	db 0x92			; present, ring 0, data, expand-up, writable
   594 0000038E CF                  <1> 	db 0xCF
   595 0000038F 00                  <1> 	db 0
   596                              <1> V8086_CODE_SEL	equ $-gdt
   597 00000390 FFFF                <1> gdtv8086: dw 0xFFFF
   598 00000392 0000                <1> 	dw 0
   599 00000394 00                  <1> 	db 0
   600 00000395 9A                  <1> 	db 0x9A
   601 00000396 8F                  <1> 	db 0x8F
   602 00000397 00                  <1> 	db 0
   603                              <1> V8086_DATA_SEL	equ $-gdt
   604 00000398 FFFF                <1> gdtv80862: dw 0xFFFF
   605 0000039A 0000                <1> 	dw 0
   606 0000039C 00                  <1> 	db 0
   607 0000039D 92                  <1> 	db 0x92
   608 0000039E 8F                  <1> 	db 0x8F
   609 0000039F 00                  <1> 	db 0
   610                              <1> DOS_CODE_SEL	equ $-gdt	;this gives dos programs complete access to one megabyte at the beginning of memory
   611 000003A0 0001                <1> gdtdos:	dw 256	;give it 1 MB
   612 000003A2 0000                <1> 	dw 0
   613 000003A4 00                  <1> 	db 0
   614 000003A5 9A                  <1> 	db 0x9A
   615 000003A6 8F                  <1> 	db 0x8F ;16 bit
   616 000003A7 00                  <1> 	db 0
   617                              <1> DOS_DATA_SEL 	equ $-gdt
   618 000003A8 0001                <1> gdtdos2:	dw 256
   619 000003AA 0000                <1> 	dw 0
   620 000003AC 00                  <1> 	db 0
   621 000003AD 92                  <1> 	db 0x92
   622 000003AE 8F                  <1> 	db 0x8F ;16 bit
   623 000003AF 00                  <1> 	db 0
   624                              <1> gdt_end:
   625                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   626                              <1> ;	interrupt descriptor table (IDT)
   627                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   628                              <1> ; 32 reserved interrupts:
   629                              <1> idt:	
   630                              <1> %assign i 0
   631                              <1> %rep    8
   632                              <1> 		dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   633                              <1> %assign i i+1
   634                              <1> %endrep
   635 000003B0 [D10C]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   636                              <2> %assign i i+1
   637 000003B8 [DD0C]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   638                              <2> %assign i i+1
   639 000003C0 [E90C]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   640                              <2> %assign i i+1
   641 000003C8 [F50C]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   642                              <2> %assign i i+1
   643 000003D0 [010D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   644                              <2> %assign i i+1
   645 000003D8 [0D0D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   646                              <2> %assign i i+1
   647 000003E0 [190D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   648                              <2> %assign i i+1
   649 000003E8 [250D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   650                              <2> %assign i i+1
   651 000003F0 [310D]1800008E0000  <1> 		dw unhand + 8*12,SYS_CODE_SEL,0x8E00,0	;double fault handler in original memory
   652                              <1> %assign i 9
   653                              <1> %rep    23
   654                              <1> 		dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   655                              <1> %assign i i+1
   656                              <1> %endrep
   657 000003F8 [3D0D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   658                              <2> %assign i i+1
   659 00000400 [490D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   660                              <2> %assign i i+1
   661 00000408 [550D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   662                              <2> %assign i i+1
   663 00000410 [610D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   664                              <2> %assign i i+1
   665 00000418 [6D0D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   666                              <2> %assign i i+1
   667 00000420 [790D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   668                              <2> %assign i i+1
   669 00000428 [850D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   670                              <2> %assign i i+1
   671 00000430 [910D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   672                              <2> %assign i i+1
   673 00000438 [9D0D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   674                              <2> %assign i i+1
   675 00000440 [A90D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   676                              <2> %assign i i+1
   677 00000448 [B50D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   678                              <2> %assign i i+1
   679 00000450 [C10D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   680                              <2> %assign i i+1
   681 00000458 [CD0D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   682                              <2> %assign i i+1
   683 00000460 [D90D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   684                              <2> %assign i i+1
   685 00000468 [E50D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   686                              <2> %assign i i+1
   687 00000470 [F10D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   688                              <2> %assign i i+1
   689 00000478 [FD0D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   690                              <2> %assign i i+1
   691 00000480 [090E]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   692                              <2> %assign i i+1
   693 00000488 [150E]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   694                              <2> %assign i i+1
   695 00000490 [210E]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   696                              <2> %assign i i+1
   697 00000498 [2D0E]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   698                              <2> %assign i i+1
   699 000004A0 [390E]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   700                              <2> %assign i i+1
   701 000004A8 [450E]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   702                              <2> %assign i i+1
   703 000004B0 [AA29]2800008E0000  <1> 		dw int20h,NEW_CODE_SEL,0x8E00,0
   704 000004B8 [AE29]2800008E0000  <1> 		dw int21h,NEW_CODE_SEL,0x8E00,0
   705                              <1> %assign i 0x22
   706                              <1> %rep 14
   707                              <1> 		dw handled,NEW_CODE_SEL,0x8E00,0
   708                              <1> %assign i +1
   709                              <1> %endrep
   710 000004C0 [3C03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   711                              <2> %assign i +1
   712 000004C8 [3C03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   713                              <2> %assign i +1
   714 000004D0 [3C03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   715                              <2> %assign i +1
   716 000004D8 [3C03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   717                              <2> %assign i +1
   718 000004E0 [3C03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   719                              <2> %assign i +1
   720 000004E8 [3C03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   721                              <2> %assign i +1
   722 000004F0 [3C03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   723                              <2> %assign i +1
   724 000004F8 [3C03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   725                              <2> %assign i +1
   726 00000500 [3C03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   727                              <2> %assign i +1
   728 00000508 [3C03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   729                              <2> %assign i +1
   730 00000510 [3C03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   731                              <2> %assign i +1
   732 00000518 [3C03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   733                              <2> %assign i +1
   734 00000520 [3C03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   735                              <2> %assign i +1
   736 00000528 [3C03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   737                              <2> %assign i +1
   738                              <1> ;INT 30h for os use and 3rd party use:
   739 00000530 [C91B]2800008E0000  <1> 		dw newints,NEW_CODE_SEL,0x8E00,0
   740                              <1> %assign i 0x31
   741                              <1> %rep 15
   742                              <1> 		dw handled,NEW_CODE_SEL,0x8E00,0
   743                              <1> %assign i +1
   744                              <1> %endrep
   745 00000538 [3C03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   746                              <2> %assign i +1
   747 00000540 [3C03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   748                              <2> %assign i +1
   749 00000548 [3C03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   750                              <2> %assign i +1
   751 00000550 [3C03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   752                              <2> %assign i +1
   753 00000558 [3C03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   754                              <2> %assign i +1
   755 00000560 [3C03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   756                              <2> %assign i +1
   757 00000568 [3C03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   758                              <2> %assign i +1
   759 00000570 [3C03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   760                              <2> %assign i +1
   761 00000578 [3C03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   762                              <2> %assign i +1
   763 00000580 [3C03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   764                              <2> %assign i +1
   765 00000588 [3C03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   766                              <2> %assign i +1
   767 00000590 [3C03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   768                              <2> %assign i +1
   769 00000598 [3C03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   770                              <2> %assign i +1
   771 000005A0 [3C03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   772                              <2> %assign i +1
   773 000005A8 [3C03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   774                              <2> %assign i +1
   775                              <1> ;and here we are at 0x40
   776                              <1> ;here are all the irq's
   777 000005B0 [8002]2800008E0000  <1> 		dw pitinterrupt,NEW_CODE_SEL,0x8E00,0 ;IRQ 0 = PIT
   778 000005B8 [3C03]2800008E0000  <1> 		dw handled,NEW_CODE_SEL,0x8E00,0 ;IRQ 1 = keyboard
   779 000005C0 [3C03]2800008E0000  <1> 		dw handled,NEW_CODE_SEL,0x8E00,0 ;IRQ 2
   780 000005C8 [3C03]2800008E0000  <1> 		dw handled,NEW_CODE_SEL,0x8E00,0 ;IRQ 3
   781 000005D0 [3C03]2800008E0000  <1> 		dw handled,NEW_CODE_SEL,0x8E00,0 ;IRQ 4
   782                              <1> 	%ifdef sound.included
   783                              <1> 		dw sblaster.irq,NEW_CODE_SEL,0x8E00,0 ;IRQ 5 = default SoundBlaster
   784                              <1> 	%else
   785 000005D8 [3C03]2800008E0000  <1> 		dw handled,NEW_CODE_SEL,0x8E00,0 ;IRQ 5
   786                              <1> 	%endif
   787 000005E0 [3C03]2800008E0000  <1> 		dw handled,NEW_CODE_SEL,0x8E00,0 ;IRQ 6
   788 000005E8 [3C03]2800008E0000  <1> 		dw handled,NEW_CODE_SEL,0x8E00,0 ;IRQ 7
   789 000005F0 [1003]2800008E0000  <1> 		dw rtcint,NEW_CODE_SEL,0x8E00,0 ;IRQ 8 = RTC
   790 000005F8 [4303]2800008E0000  <1> 		dw handled4,NEW_CODE_SEL,0x8E00,0 ;IRQ 9 = default NE2000
   791 00000600 [4303]2800008E0000  <1> 		dw handled4,NEW_CODE_SEL,0x8E00,0 ;IRQ 10
   792                              <1> 	%ifdef rtl8139.included
   793                              <1> 		dw rtl8139.irq,NEW_CODE_SEL,0x8E00,0 ;IRQ 11 = default RTL8139
   794                              <1> 	%else
   795 00000608 [4303]2800008E0000  <1> 		dw handled4,NEW_CODE_SEL,0x8E00,0 ;IRQ 11
   796                              <1> 	%endif
   797 00000610 [4303]2800008E0000  <1> 		dw handled4,NEW_CODE_SEL,0x8E00,0 ;IRQ 12
   798 00000618 [4303]2800008E0000  <1> 		dw handled4,NEW_CODE_SEL,0x8E00,0 ;IRQ 13
   799 00000620 [4303]2800008E0000  <1> 		dw handled4,NEW_CODE_SEL,0x8E00,0 ;IRQ 14
   800 00000628 [4303]2800008E0000  <1> 		dw handled4,NEW_CODE_SEL,0x8E00,0 ;IRQ 15
   801                              <1> ;This brings me up to 0x50
   802                              <1> %assign i 0x50
   803                              <1> %rep 176
   804                              <1> 		dw handled, NEW_CODE_SEL,0x8E00,0
   805                              <1> 		;dw unhand + i*12, NEW_CODE_SEL,0x8E00,0
   806                              <1> %assign i +1
   807                              <1> %endrep
   808 00000630 [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   809                              <2> 
   810                              <2> %assign i +1
   811 00000638 [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   812                              <2> 
   813                              <2> %assign i +1
   814 00000640 [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   815                              <2> 
   816                              <2> %assign i +1
   817 00000648 [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   818                              <2> 
   819                              <2> %assign i +1
   820 00000650 [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   821                              <2> 
   822                              <2> %assign i +1
   823 00000658 [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   824                              <2> 
   825                              <2> %assign i +1
   826 00000660 [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   827                              <2> 
   828                              <2> %assign i +1
   829 00000668 [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   830                              <2> 
   831                              <2> %assign i +1
   832 00000670 [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   833                              <2> 
   834                              <2> %assign i +1
   835 00000678 [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   836                              <2> 
   837                              <2> %assign i +1
   838 00000680 [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   839                              <2> 
   840                              <2> %assign i +1
   841 00000688 [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   842                              <2> 
   843                              <2> %assign i +1
   844 00000690 [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   845                              <2> 
   846                              <2> %assign i +1
   847 00000698 [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   848                              <2> 
   849                              <2> %assign i +1
   850 000006A0 [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   851                              <2> 
   852                              <2> %assign i +1
   853 000006A8 [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   854                              <2> 
   855                              <2> %assign i +1
   856 000006B0 [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   857                              <2> 
   858                              <2> %assign i +1
   859 000006B8 [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   860                              <2> 
   861                              <2> %assign i +1
   862 000006C0 [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   863                              <2> 
   864                              <2> %assign i +1
   865 000006C8 [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   866                              <2> 
   867                              <2> %assign i +1
   868 000006D0 [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   869                              <2> 
   870                              <2> %assign i +1
   871 000006D8 [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   872                              <2> 
   873                              <2> %assign i +1
   874 000006E0 [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   875                              <2> 
   876                              <2> %assign i +1
   877 000006E8 [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   878                              <2> 
   879                              <2> %assign i +1
   880 000006F0 [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   881                              <2> 
   882                              <2> %assign i +1
   883 000006F8 [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   884                              <2> 
   885                              <2> %assign i +1
   886 00000700 [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   887                              <2> 
   888                              <2> %assign i +1
   889 00000708 [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   890                              <2> 
   891                              <2> %assign i +1
   892 00000710 [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   893                              <2> 
   894                              <2> %assign i +1
   895 00000718 [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   896                              <2> 
   897                              <2> %assign i +1
   898 00000720 [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   899                              <2> 
   900                              <2> %assign i +1
   901 00000728 [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   902                              <2> 
   903                              <2> %assign i +1
   904 00000730 [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   905                              <2> 
   906                              <2> %assign i +1
   907 00000738 [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   908                              <2> 
   909                              <2> %assign i +1
   910 00000740 [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   911                              <2> 
   912                              <2> %assign i +1
   913 00000748 [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   914                              <2> 
   915                              <2> %assign i +1
   916 00000750 [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   917                              <2> 
   918                              <2> %assign i +1
   919 00000758 [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   920                              <2> 
   921                              <2> %assign i +1
   922 00000760 [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   923                              <2> 
   924                              <2> %assign i +1
   925 00000768 [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   926                              <2> 
   927                              <2> %assign i +1
   928 00000770 [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   929                              <2> 
   930                              <2> %assign i +1
   931 00000778 [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   932                              <2> 
   933                              <2> %assign i +1
   934 00000780 [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   935                              <2> 
   936                              <2> %assign i +1
   937 00000788 [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   938                              <2> 
   939                              <2> %assign i +1
   940 00000790 [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   941                              <2> 
   942                              <2> %assign i +1
   943 00000798 [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   944                              <2> 
   945                              <2> %assign i +1
   946 000007A0 [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   947                              <2> 
   948                              <2> %assign i +1
   949 000007A8 [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   950                              <2> 
   951                              <2> %assign i +1
   952 000007B0 [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   953                              <2> 
   954                              <2> %assign i +1
   955 000007B8 [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   956                              <2> 
   957                              <2> %assign i +1
   958 000007C0 [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   959                              <2> 
   960                              <2> %assign i +1
   961 000007C8 [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   962                              <2> 
   963                              <2> %assign i +1
   964 000007D0 [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   965                              <2> 
   966                              <2> %assign i +1
   967 000007D8 [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   968                              <2> 
   969                              <2> %assign i +1
   970 000007E0 [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   971                              <2> 
   972                              <2> %assign i +1
   973 000007E8 [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   974                              <2> 
   975                              <2> %assign i +1
   976 000007F0 [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   977                              <2> 
   978                              <2> %assign i +1
   979 000007F8 [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   980                              <2> 
   981                              <2> %assign i +1
   982 00000800 [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   983                              <2> 
   984                              <2> %assign i +1
   985 00000808 [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   986                              <2> 
   987                              <2> %assign i +1
   988 00000810 [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   989                              <2> 
   990                              <2> %assign i +1
   991 00000818 [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   992                              <2> 
   993                              <2> %assign i +1
   994 00000820 [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   995                              <2> 
   996                              <2> %assign i +1
   997 00000828 [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   998                              <2> 
   999                              <2> %assign i +1
  1000 00000830 [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1001                              <2> 
  1002                              <2> %assign i +1
  1003 00000838 [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1004                              <2> 
  1005                              <2> %assign i +1
  1006 00000840 [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1007                              <2> 
  1008                              <2> %assign i +1
  1009 00000848 [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1010                              <2> 
  1011                              <2> %assign i +1
  1012 00000850 [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1013                              <2> 
  1014                              <2> %assign i +1
  1015 00000858 [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1016                              <2> 
  1017                              <2> %assign i +1
  1018 00000860 [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1019                              <2> 
  1020                              <2> %assign i +1
  1021 00000868 [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1022                              <2> 
  1023                              <2> %assign i +1
  1024 00000870 [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1025                              <2> 
  1026                              <2> %assign i +1
  1027 00000878 [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1028                              <2> 
  1029                              <2> %assign i +1
  1030 00000880 [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1031                              <2> 
  1032                              <2> %assign i +1
  1033 00000888 [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1034                              <2> 
  1035                              <2> %assign i +1
  1036 00000890 [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1037                              <2> 
  1038                              <2> %assign i +1
  1039 00000898 [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1040                              <2> 
  1041                              <2> %assign i +1
  1042 000008A0 [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1043                              <2> 
  1044                              <2> %assign i +1
  1045 000008A8 [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1046                              <2> 
  1047                              <2> %assign i +1
  1048 000008B0 [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1049                              <2> 
  1050                              <2> %assign i +1
  1051 000008B8 [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1052                              <2> 
  1053                              <2> %assign i +1
  1054 000008C0 [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1055                              <2> 
  1056                              <2> %assign i +1
  1057 000008C8 [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1058                              <2> 
  1059                              <2> %assign i +1
  1060 000008D0 [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1061                              <2> 
  1062                              <2> %assign i +1
  1063 000008D8 [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1064                              <2> 
  1065                              <2> %assign i +1
  1066 000008E0 [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1067                              <2> 
  1068                              <2> %assign i +1
  1069 000008E8 [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1070                              <2> 
  1071                              <2> %assign i +1
  1072 000008F0 [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1073                              <2> 
  1074                              <2> %assign i +1
  1075 000008F8 [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1076                              <2> 
  1077                              <2> %assign i +1
  1078 00000900 [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1079                              <2> 
  1080                              <2> %assign i +1
  1081 00000908 [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1082                              <2> 
  1083                              <2> %assign i +1
  1084 00000910 [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1085                              <2> 
  1086                              <2> %assign i +1
  1087 00000918 [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1088                              <2> 
  1089                              <2> %assign i +1
  1090 00000920 [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1091                              <2> 
  1092                              <2> %assign i +1
  1093 00000928 [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1094                              <2> 
  1095                              <2> %assign i +1
  1096 00000930 [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1097                              <2> 
  1098                              <2> %assign i +1
  1099 00000938 [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1100                              <2> 
  1101                              <2> %assign i +1
  1102 00000940 [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1103                              <2> 
  1104                              <2> %assign i +1
  1105 00000948 [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1106                              <2> 
  1107                              <2> %assign i +1
  1108 00000950 [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1109                              <2> 
  1110                              <2> %assign i +1
  1111 00000958 [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1112                              <2> 
  1113                              <2> %assign i +1
  1114 00000960 [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1115                              <2> 
  1116                              <2> %assign i +1
  1117 00000968 [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1118                              <2> 
  1119                              <2> %assign i +1
  1120 00000970 [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1121                              <2> 
  1122                              <2> %assign i +1
  1123 00000978 [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1124                              <2> 
  1125                              <2> %assign i +1
  1126 00000980 [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1127                              <2> 
  1128                              <2> %assign i +1
  1129 00000988 [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1130                              <2> 
  1131                              <2> %assign i +1
  1132 00000990 [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1133                              <2> 
  1134                              <2> %assign i +1
  1135 00000998 [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1136                              <2> 
  1137                              <2> %assign i +1
  1138 000009A0 [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1139                              <2> 
  1140                              <2> %assign i +1
  1141 000009A8 [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1142                              <2> 
  1143                              <2> %assign i +1
  1144 000009B0 [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1145                              <2> 
  1146                              <2> %assign i +1
  1147 000009B8 [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1148                              <2> 
  1149                              <2> %assign i +1
  1150 000009C0 [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1151                              <2> 
  1152                              <2> %assign i +1
  1153 000009C8 [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1154                              <2> 
  1155                              <2> %assign i +1
  1156 000009D0 [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1157                              <2> 
  1158                              <2> %assign i +1
  1159 000009D8 [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1160                              <2> 
  1161                              <2> %assign i +1
  1162 000009E0 [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1163                              <2> 
  1164                              <2> %assign i +1
  1165 000009E8 [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1166                              <2> 
  1167                              <2> %assign i +1
  1168 000009F0 [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1169                              <2> 
  1170                              <2> %assign i +1
  1171 000009F8 [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1172                              <2> 
  1173                              <2> %assign i +1
  1174 00000A00 [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1175                              <2> 
  1176                              <2> %assign i +1
  1177 00000A08 [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1178                              <2> 
  1179                              <2> %assign i +1
  1180 00000A10 [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1181                              <2> 
  1182                              <2> %assign i +1
  1183 00000A18 [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1184                              <2> 
  1185                              <2> %assign i +1
  1186 00000A20 [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1187                              <2> 
  1188                              <2> %assign i +1
  1189 00000A28 [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1190                              <2> 
  1191                              <2> %assign i +1
  1192 00000A30 [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1193                              <2> 
  1194                              <2> %assign i +1
  1195 00000A38 [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1196                              <2> 
  1197                              <2> %assign i +1
  1198 00000A40 [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1199                              <2> 
  1200                              <2> %assign i +1
  1201 00000A48 [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1202                              <2> 
  1203                              <2> %assign i +1
  1204 00000A50 [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1205                              <2> 
  1206                              <2> %assign i +1
  1207 00000A58 [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1208                              <2> 
  1209                              <2> %assign i +1
  1210 00000A60 [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1211                              <2> 
  1212                              <2> %assign i +1
  1213 00000A68 [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1214                              <2> 
  1215                              <2> %assign i +1
  1216 00000A70 [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1217                              <2> 
  1218                              <2> %assign i +1
  1219 00000A78 [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1220                              <2> 
  1221                              <2> %assign i +1
  1222 00000A80 [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1223                              <2> 
  1224                              <2> %assign i +1
  1225 00000A88 [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1226                              <2> 
  1227                              <2> %assign i +1
  1228 00000A90 [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1229                              <2> 
  1230                              <2> %assign i +1
  1231 00000A98 [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1232                              <2> 
  1233                              <2> %assign i +1
  1234 00000AA0 [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1235                              <2> 
  1236                              <2> %assign i +1
  1237 00000AA8 [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1238                              <2> 
  1239                              <2> %assign i +1
  1240 00000AB0 [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1241                              <2> 
  1242                              <2> %assign i +1
  1243 00000AB8 [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1244                              <2> 
  1245                              <2> %assign i +1
  1246 00000AC0 [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1247                              <2> 
  1248                              <2> %assign i +1
  1249 00000AC8 [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1250                              <2> 
  1251                              <2> %assign i +1
  1252 00000AD0 [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1253                              <2> 
  1254                              <2> %assign i +1
  1255 00000AD8 [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1256                              <2> 
  1257                              <2> %assign i +1
  1258 00000AE0 [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1259                              <2> 
  1260                              <2> %assign i +1
  1261 00000AE8 [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1262                              <2> 
  1263                              <2> %assign i +1
  1264 00000AF0 [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1265                              <2> 
  1266                              <2> %assign i +1
  1267 00000AF8 [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1268                              <2> 
  1269                              <2> %assign i +1
  1270 00000B00 [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1271                              <2> 
  1272                              <2> %assign i +1
  1273 00000B08 [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1274                              <2> 
  1275                              <2> %assign i +1
  1276 00000B10 [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1277                              <2> 
  1278                              <2> %assign i +1
  1279 00000B18 [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1280                              <2> 
  1281                              <2> %assign i +1
  1282 00000B20 [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1283                              <2> 
  1284                              <2> %assign i +1
  1285 00000B28 [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1286                              <2> 
  1287                              <2> %assign i +1
  1288 00000B30 [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1289                              <2> 
  1290                              <2> %assign i +1
  1291 00000B38 [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1292                              <2> 
  1293                              <2> %assign i +1
  1294 00000B40 [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1295                              <2> 
  1296                              <2> %assign i +1
  1297 00000B48 [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1298                              <2> 
  1299                              <2> %assign i +1
  1300 00000B50 [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1301                              <2> 
  1302                              <2> %assign i +1
  1303 00000B58 [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1304                              <2> 
  1305                              <2> %assign i +1
  1306 00000B60 [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1307                              <2> 
  1308                              <2> %assign i +1
  1309 00000B68 [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1310                              <2> 
  1311                              <2> %assign i +1
  1312 00000B70 [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1313                              <2> 
  1314                              <2> %assign i +1
  1315 00000B78 [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1316                              <2> 
  1317                              <2> %assign i +1
  1318 00000B80 [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1319                              <2> 
  1320                              <2> %assign i +1
  1321 00000B88 [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1322                              <2> 
  1323                              <2> %assign i +1
  1324 00000B90 [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1325                              <2> 
  1326                              <2> %assign i +1
  1327 00000B98 [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1328                              <2> 
  1329                              <2> %assign i +1
  1330 00000BA0 [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1331                              <2> 
  1332                              <2> %assign i +1
  1333 00000BA8 [3C03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1334                              <2> 
  1335                              <2> %assign i +1
  1336                              <1> idt_end:
  1337                              <1> [BITS 32]
  1338                                  	%include "source/realmode.asm"
  1339                              <1> realmode:	;make sure the real mode program's address is in realmodeptr 
  1340                              <1> 			;and the return address is in realmodereturn
  1341 00000BB0 FA                  <1> 	cli
  1342 00000BB1 A3[C30C0000]        <1> 	mov [realmodeeax], eax
  1343 00000BB6 891D[BF0C0000]      <1> 	mov [realmodeebx], ebx
  1344 00000BBC 8925[B10C0000]      <1> 	mov [pmodeesp], esp
  1345                              <1> 
  1346 00000BC2 BB[BB0C0000]        <1> 	mov ebx, cr0old
  1347                              <1> rmcopytofirstmbyte:
  1348 00000BC7 8B03                <1> 	mov eax, [ebx]
  1349 00000BC9 658903              <1> 	mov [gs:ebx], eax
  1350 00000BCC 81C304000000        <1> 	add ebx, 4
  1351 00000BD2 81FB[CB0C0000]      <1> 	cmp ebx, realmodeptr
  1352 00000BD8 76ED                <1> 	jbe rmcopytofirstmbyte
  1353                              <1> 
  1354 00000BDA EA[E10B0000]3800    <1> 	jmp V8086_CODE_SEL:protected16bit
  1355                              <1> 
  1356                              <1> [BITS 16]
  1357                              <1> protected16bit:
  1358 00000BE1 B84000              <1> 	mov ax, V8086_DATA_SEL
  1359 00000BE4 8ED8                <1> 	mov ds, ax
  1360 00000BE6 8EC0                <1> 	mov es, ax
  1361 00000BE8 8EE0                <1> 	mov fs, ax
  1362 00000BEA 8EE8                <1> 	mov gs, ax
  1363 00000BEC 8ED0                <1> 	mov ss, ax
  1364 00000BEE 66BC[74960300]      <1> 	mov esp, stackend
  1365 00000BF4 0F20C0              <1> 	mov eax, cr0
  1366 00000BF7 66A3[BB0C]          <1> 	mov [cr0old], eax
  1367 00000BFB 6625FEFFFF7F        <1> 	and eax, 0x7FFFFFFE
  1368 00000C01 0F22C0              <1> 	mov cr0, eax	;now in real mode
  1369 00000C04 EA[090C]0010        <1> 	jmp 0x1000:inrealmode
  1370                              <1> 
  1371                              <1> inrealmode:
  1372 00000C09 8CC8                <1> 	mov ax, cs
  1373 00000C0B 8ED8                <1> 	mov ds, ax
  1374 00000C0D 8EC0                <1> 	mov es, ax
  1375 00000C0F 8EE0                <1> 	mov fs, ax
  1376 00000C11 8EE8                <1> 	mov gs, ax
  1377 00000C13 8ED0                <1> 	mov ss, ax
  1378 00000C15 BC[7496]            <1> 	mov sp, stackend ;because this is at 0x1000: and not 0x10000: it works
  1379                              <1> 	
  1380 00000C18 B011                <1> 	mov al, 0x11
  1381 00000C1A E620                <1> 	out 0x20, al
  1382 00000C1C E6A0                <1> 	out 0xA0, al
  1383 00000C1E B008                <1> 	mov al, 0x8		;interrupt for master
  1384 00000C20 E621                <1> 	out 0x21, al
  1385 00000C22 B070                <1> 	mov al, 0x70	;interrupt for slave
  1386 00000C24 E6A1                <1> 	out 0xA1, al
  1387 00000C26 B004                <1> 	mov al, 4
  1388 00000C28 E621                <1> 	out 0x21, al
  1389 00000C2A B002                <1> 	mov al, 2
  1390 00000C2C E6A1                <1> 	out 0xA1, al
  1391 00000C2E B001                <1> 	mov al, 0x1
  1392 00000C30 E621                <1> 	out 0x21, al
  1393 00000C32 B001                <1> 	mov al, 0x1
  1394 00000C34 E6A1                <1> 	out 0xA1, al
  1395                              <1> 	
  1396 00000C36 0F011E[B50C]        <1> 	lidt [idt_real]
  1397 00000C3B FB                  <1> 	sti
  1398                              <1> 
  1399 00000C3C 66A1[C30C]          <1> 	mov eax, [realmodeeax]
  1400 00000C40 668B1E[BF0C]        <1> 	mov ebx, [realmodeebx]
  1401                              <1> 
  1402 00000C45 FF16[CB0C]          <1> 	call word [realmodeptr] ;call the real mode program here
  1403                              <1> 
  1404 00000C49 66A3[C30C]          <1> 	mov [realmodeeax], eax
  1405 00000C4D 66891E[BF0C]        <1> 	mov [realmodeebx], ebx
  1406                              <1> 
  1407 00000C52 FA                  <1> 	cli
  1408 00000C53 0F0116[4C03]        <1> 	lgdt [gdtr]
  1409 00000C58 0F011E[5203]        <1> 	lidt [idtr]
  1410 00000C5D 0F20C0              <1> 	mov eax, cr0
  1411 00000C60 0C01                <1> 	or al, 1
  1412 00000C62 0F22C0              <1> 	mov cr0,eax
  1413 00000C65 EA[6A0C]2800        <1> 	jmp NEW_CODE_SEL:returntopmode
  1414                              <1> 
  1415                              <1> [BITS 32]
  1416                              <1> returntopmode:
  1417 00000C6A 66B83000            <1> 	mov ax, NEW_DATA_SEL
  1418 00000C6E 8ED8                <1> 	mov ds, ax
  1419 00000C70 8EC0                <1> 	mov es, ax
  1420 00000C72 8EE0                <1> 	mov fs, ax
  1421 00000C74 8ED0                <1> 	mov ss, ax
  1422 00000C76 8B25[B10C0000]      <1> 	mov esp, [pmodeesp]
  1423 00000C7C 66B82000            <1> 	mov ax, SYS_DATA_SEL
  1424 00000C80 8EE8                <1> 	mov gs, ax
  1425                              <1> 
  1426 00000C82 BB[BB0C0000]        <1> 	mov ebx, cr0old
  1427                              <1> rmcopyfromfirstmbyte:
  1428 00000C87 658B03              <1> 	mov eax, [gs:ebx]
  1429 00000C8A 8903                <1> 	mov [ebx], eax
  1430 00000C8C 81C304000000        <1> 	add ebx, 4
  1431 00000C92 81FB[CB0C0000]      <1> 	cmp ebx, realmodeptr
  1432 00000C98 76ED                <1> 	jbe rmcopyfromfirstmbyte
  1433                              <1> 
  1434 00000C9A E832520000          <1> 	call initialize.pic ;reset irq's and masks
  1435 00000C9F FB                  <1> 	sti
  1436 00000CA0 A1[C30C0000]        <1> 	mov eax, [realmodeeax]
  1437 00000CA5 8B1D[BF0C0000]      <1> 	mov ebx, [realmodeebx]
  1438 00000CAB FF25[C70C0000]      <1> 	jmp dword [realmodereturn]
  1439                              <1> 	
  1440 00000CB1 00000000            <1> pmodeesp dd 0
  1441                              <1> idt_real:
  1442 00000CB5 FF03                <1> 	dw 0x3FF
  1443 00000CB7 00000000            <1> 	dd 0
  1444 00000CBB 00000000            <1> cr0old dd 0
  1445 00000CBF 00000000            <1> realmodeebx dd 0
  1446 00000CC3 00000000            <1> realmodeeax dd 0
  1447 00000CC7 00000000            <1> realmodereturn dd 0
  1448 00000CCB 0000                <1> realmodeptr dw 0
  1449 00000CCD 00000000            <1> dd 0 ;make sure the copy thing doesnt overflow
  1450                                  [BITS 32]
  1451                                      %include "source/exception.asm"
  1452                              <1> %ifdef exceptions.included
  1453                              <1> unhand:	
  1454                              <1> 	%assign i 0
  1455                              <1> 	%rep 32
  1456                              <1> 	mov byte [intprob], i
  1457                              <1> 	jmp unhand2
  1458                              <1> 	%assign i i+1
  1459                              <1> 	%endrep
  1460 00000CD1 C605[83110000]00    <2>  mov byte [intprob], i
  1461 00000CD8 E974010000          <2>  jmp unhand2
  1462                              <2>  %assign i i+1
  1463 00000CDD C605[83110000]01    <2>  mov byte [intprob], i
  1464 00000CE4 E968010000          <2>  jmp unhand2
  1465                              <2>  %assign i i+1
  1466 00000CE9 C605[83110000]02    <2>  mov byte [intprob], i
  1467 00000CF0 E95C010000          <2>  jmp unhand2
  1468                              <2>  %assign i i+1
  1469 00000CF5 C605[83110000]03    <2>  mov byte [intprob], i
  1470 00000CFC E950010000          <2>  jmp unhand2
  1471                              <2>  %assign i i+1
  1472 00000D01 C605[83110000]04    <2>  mov byte [intprob], i
  1473 00000D08 E944010000          <2>  jmp unhand2
  1474                              <2>  %assign i i+1
  1475 00000D0D C605[83110000]05    <2>  mov byte [intprob], i
  1476 00000D14 E938010000          <2>  jmp unhand2
  1477                              <2>  %assign i i+1
  1478 00000D19 C605[83110000]06    <2>  mov byte [intprob], i
  1479 00000D20 E92C010000          <2>  jmp unhand2
  1480                              <2>  %assign i i+1
  1481 00000D25 C605[83110000]07    <2>  mov byte [intprob], i
  1482 00000D2C E920010000          <2>  jmp unhand2
  1483                              <2>  %assign i i+1
  1484 00000D31 C605[83110000]08    <2>  mov byte [intprob], i
  1485 00000D38 E914010000          <2>  jmp unhand2
  1486                              <2>  %assign i i+1
  1487 00000D3D C605[83110000]09    <2>  mov byte [intprob], i
  1488 00000D44 E908010000          <2>  jmp unhand2
  1489                              <2>  %assign i i+1
  1490 00000D49 C605[83110000]0A    <2>  mov byte [intprob], i
  1491 00000D50 E9FC000000          <2>  jmp unhand2
  1492                              <2>  %assign i i+1
  1493 00000D55 C605[83110000]0B    <2>  mov byte [intprob], i
  1494 00000D5C E9F0000000          <2>  jmp unhand2
  1495                              <2>  %assign i i+1
  1496 00000D61 C605[83110000]0C    <2>  mov byte [intprob], i
  1497 00000D68 E9E4000000          <2>  jmp unhand2
  1498                              <2>  %assign i i+1
  1499 00000D6D C605[83110000]0D    <2>  mov byte [intprob], i
  1500 00000D74 E9D8000000          <2>  jmp unhand2
  1501                              <2>  %assign i i+1
  1502 00000D79 C605[83110000]0E    <2>  mov byte [intprob], i
  1503 00000D80 E9CC000000          <2>  jmp unhand2
  1504                              <2>  %assign i i+1
  1505 00000D85 C605[83110000]0F    <2>  mov byte [intprob], i
  1506 00000D8C E9C0000000          <2>  jmp unhand2
  1507                              <2>  %assign i i+1
  1508 00000D91 C605[83110000]10    <2>  mov byte [intprob], i
  1509 00000D98 E9B4000000          <2>  jmp unhand2
  1510                              <2>  %assign i i+1
  1511 00000D9D C605[83110000]11    <2>  mov byte [intprob], i
  1512 00000DA4 E9A8000000          <2>  jmp unhand2
  1513                              <2>  %assign i i+1
  1514 00000DA9 C605[83110000]12    <2>  mov byte [intprob], i
  1515 00000DB0 E99C000000          <2>  jmp unhand2
  1516                              <2>  %assign i i+1
  1517 00000DB5 C605[83110000]13    <2>  mov byte [intprob], i
  1518 00000DBC E990000000          <2>  jmp unhand2
  1519                              <2>  %assign i i+1
  1520 00000DC1 C605[83110000]14    <2>  mov byte [intprob], i
  1521 00000DC8 E984000000          <2>  jmp unhand2
  1522                              <2>  %assign i i+1
  1523 00000DCD C605[83110000]15    <2>  mov byte [intprob], i
  1524 00000DD4 E978000000          <2>  jmp unhand2
  1525                              <2>  %assign i i+1
  1526 00000DD9 C605[83110000]16    <2>  mov byte [intprob], i
  1527 00000DE0 E96C000000          <2>  jmp unhand2
  1528                              <2>  %assign i i+1
  1529 00000DE5 C605[83110000]17    <2>  mov byte [intprob], i
  1530 00000DEC E960000000          <2>  jmp unhand2
  1531                              <2>  %assign i i+1
  1532 00000DF1 C605[83110000]18    <2>  mov byte [intprob], i
  1533 00000DF8 E954000000          <2>  jmp unhand2
  1534                              <2>  %assign i i+1
  1535 00000DFD C605[83110000]19    <2>  mov byte [intprob], i
  1536 00000E04 E948000000          <2>  jmp unhand2
  1537                              <2>  %assign i i+1
  1538 00000E09 C605[83110000]1A    <2>  mov byte [intprob], i
  1539 00000E10 E93C000000          <2>  jmp unhand2
  1540                              <2>  %assign i i+1
  1541 00000E15 C605[83110000]1B    <2>  mov byte [intprob], i
  1542 00000E1C E930000000          <2>  jmp unhand2
  1543                              <2>  %assign i i+1
  1544 00000E21 C605[83110000]1C    <2>  mov byte [intprob], i
  1545 00000E28 E924000000          <2>  jmp unhand2
  1546                              <2>  %assign i i+1
  1547 00000E2D C605[83110000]1D    <2>  mov byte [intprob], i
  1548 00000E34 E918000000          <2>  jmp unhand2
  1549                              <2>  %assign i i+1
  1550 00000E39 C605[83110000]1E    <2>  mov byte [intprob], i
  1551 00000E40 E90C000000          <2>  jmp unhand2
  1552                              <2>  %assign i i+1
  1553 00000E45 C605[83110000]1F    <2>  mov byte [intprob], i
  1554 00000E4C E900000000          <2>  jmp unhand2
  1555                              <2>  %assign i i+1
  1556                              <1> unhand2:
  1557 00000E51 FA                  <1> 	cli
  1558 00000E52 1E                  <1> 	push ds
  1559 00000E53 06                  <1> 	push es
  1560 00000E54 0FA0                <1> 	push fs
  1561 00000E56 0FA8                <1> 	push gs
  1562 00000E58 16                  <1> 	push ss
  1563 00000E59 60                  <1> 	pushad
  1564                              <1> %ifdef gui.included
  1565 00000E5A 803D[64820000]00    <1> 	cmp byte [guion], 0
  1566 00000E61 0F8432000000        <1> 	je near noguiunhandstuff
  1567 00000E67 66C705[7D110000]08- <1> 	mov word [locunhandy], 8
  1568 00000E6F 00                  <1>
  1569 00000E70 66C705[7F110000]08- <1> 	mov word [locunhandx], 8
  1570 00000E78 00                  <1>
  1571 00000E79 668B1D[816B0000]    <1> 	mov bx, [background]
  1572 00000E80 66891D[81110000]    <1> 	mov [backgroundcache], bx
  1573 00000E87 C605[62550000]01    <1> 	mov byte [mousedisabled],1
  1574 00000E8E 66BB00F8            <1> 	mov bx, 1111100000000000b
  1575 00000E92 66891D[816B0000]    <1> 	mov [background], bx
  1576                              <1> noguiunhandstuff:
  1577                              <1> %endif
  1578 00000E99 89E6                <1> 	mov esi, esp
  1579 00000E9B 8935[71110000]      <1> 	mov [espfirst], esi
  1580 00000EA1 81C6BC000000        <1> 	add esi, ((unhndrgend - unhndrg)/15)*4
  1581 00000EA7 8935[6D110000]      <1> 	mov [esploc], esi
  1582 00000EAD BE[92110000]        <1> 	mov esi, unhandmsg
  1583 00000EB2 8935[75110000]      <1> 	mov [esiloc], esi
  1584 00000EB8 31C9                <1> 	xor ecx, ecx
  1585 00000EBA 8A0D[83110000]      <1> 	mov cl, [intprob]
  1586 00000EC0 BB[61150000]        <1> 	mov ebx, errortypes
  1587 00000EC5 C1E102              <1> 	shl ecx, 2
  1588 00000EC8 01CB                <1> 	add ebx, ecx
  1589 00000ECA 81FB[A1150000]      <1> 	cmp ebx, errortypesend
  1590 00000ED0 7205                <1> 	jb gooderrortype
  1591 00000ED2 BB[A1150000]        <1> 	mov ebx, errortypesend
  1592                              <1> gooderrortype:
  1593 00000ED7 8B33                <1> 	mov esi, [ebx]
  1594                              <1> %ifdef gui.included
  1595 00000ED9 803D[64820000]00    <1> 	cmp byte [guion], 0
  1596 00000EE0 0F842D000000        <1> 	je near errortext
  1597 00000EE6 668B0D[7D110000]    <1> 	mov cx, [locunhandy]
  1598 00000EED 668B15[7F110000]    <1> 	mov dx, [locunhandx]
  1599 00000EF4 66B80100            <1> 	mov ax, 1
  1600 00000EF8 6631DB              <1> 	xor bx, bx
  1601 00000EFB E8D6620000          <1> 	call showstring2
  1602 00000F00 66890D[7D110000]    <1> 	mov [locunhandy], cx
  1603 00000F07 668915[7F110000]    <1> 	mov [locunhandx], dx
  1604 00000F0E E905000000          <1> 	jmp errortextdone
  1605                              <1> %endif
  1606                              <1> errortext:
  1607 00000F13 E8FE0D0000          <1> 	call print		;;get the error message and print it
  1608                              <1> errortextdone:
  1609 00000F18 31C9                <1> 	xor ecx, ecx
  1610 00000F1A 8A0D[83110000]      <1> 	mov cl, [intprob]
  1611 00000F20 E8E1010000          <1> 	call expdump
  1612                              <1> dumpstack:
  1613 00000F25 8B35[6D110000]      <1> 	mov esi, [esploc]
  1614 00000F2B 39E6                <1> 	cmp esi, esp
  1615 00000F2D 7216                <1> 	jb donedump
  1616 00000F2F 368B0E              <1> 	mov ecx, [ss:esi]
  1617 00000F32 81EE04000000        <1> 	sub esi, 4
  1618 00000F38 8935[6D110000]      <1> 	mov [esploc], esi
  1619 00000F3E E8C3010000          <1> 	call expdump
  1620 00000F43 EBE0                <1> 	jmp dumpstack
  1621                              <1> donedump:
  1622 00000F45 0F20C1              <1> 	mov ecx, cr0
  1623 00000F48 E8B9010000          <1> 	call expdump
  1624 00000F4D 0F20D1              <1> 	mov ecx, cr2
  1625 00000F50 E8B1010000          <1> 	call expdump
  1626 00000F55 0F20D9              <1> 	mov ecx, cr3
  1627 00000F58 E8A9010000          <1> 	call expdump
  1628 00000F5D 0F20E1              <1> 	mov ecx, cr4
  1629 00000F60 E8A1010000          <1> 	call expdump
  1630 00000F65 0F00C9              <1> 	str ecx
  1631 00000F68 E899010000          <1> 	call expdump
  1632 00000F6D 0F010D[8C110000]    <1> 	sidt [igdtcache]
  1633 00000F74 8B0D[8E110000]      <1> 	mov ecx, [igdtcache + 2]
  1634 00000F7A E887010000          <1> 	call expdump
  1635 00000F7F 0F0105[8C110000]    <1> 	sgdt [igdtcache]
  1636 00000F86 8B0D[8E110000]      <1> 	mov ecx, [igdtcache + 2]
  1637 00000F8C E875010000          <1> 	call expdump
  1638 00000F91 0F00C1              <1> 	sldt ecx
  1639 00000F94 E86D010000          <1> 	call expdump
  1640 00000F99 8B35[6D110000]      <1> 	mov esi, [esploc]
  1641 00000F9F 368B7C2434          <1> 	mov edi, [ss:esp + 52]
  1642 00000FA4 81C710000000        <1> 	add edi, 16
  1643 00000FAA 893D[88110000]      <1> 	mov [codelocend], edi
  1644 00000FB0 81EF20000000        <1> 	sub edi, 32
  1645                              <1> dumpcodeloop:
  1646 00000FB6 893D[84110000]      <1> 	mov [codeloc], edi
  1647 00000FBC 8B0F                <1> 	mov ecx, [edi]
  1648 00000FBE E843010000          <1> 	call expdump
  1649 00000FC3 8B3D[84110000]      <1> 	mov edi, [codeloc]
  1650 00000FC9 81C704000000        <1> 	add edi, 4
  1651 00000FCF 3B3D[88110000]      <1> 	cmp edi, [codelocend]
  1652 00000FD5 72DF                <1> 	jb dumpcodeloop
  1653 00000FD7 BE[97100000]        <1> 	mov esi, backtoosmsg
  1654                              <1> %ifdef gui.included
  1655 00000FDC 803D[64820000]00    <1> 	cmp byte [guion], 0
  1656 00000FE3 741F                <1> 	je backtomsg
  1657                              <1> guibacktomsg:
  1658 00000FE5 668B15[7F110000]    <1> 	mov dx, [locunhandx]
  1659 00000FEC 668B0D[7D110000]    <1> 	mov cx, [locunhandy]
  1660 00000FF3 66B80100            <1> 	mov ax, 1
  1661 00000FF7 6631DB              <1> 	xor bx, bx
  1662 00000FFA E8D7610000          <1> 	call showstring2
  1663 00000FFF E905000000          <1> 	jmp backtomsgdone
  1664                              <1> backtomsg:
  1665                              <1> %endif
  1666 00001004 E80D0D0000          <1> 	call print
  1667                              <1> backtomsgdone:
  1668 00001009 30C0                <1> 	xor al, al
  1669 0000100B E803130000          <1> 	call rdcharint
  1670 00001010 803D[83110000]03    <1> 	cmp byte [intprob], 3
  1671 00001017 7541                <1> 	jne nodebugint
  1672                              <1> %ifdef gui.included
  1673 00001019 803D[64820000]00    <1> 	cmp byte [guion], 0
  1674 00001020 7427                <1> 	je nodebuggui
  1675 00001022 668B1D[81110000]    <1> 	mov bx, [backgroundcache]
  1676 00001029 66891D[816B0000]    <1> 	mov [background], bx
  1677 00001030 6631DB              <1> 	xor bx, bx
  1678 00001033 C605[62550000]00    <1> 	mov byte [mousedisabled], 0
  1679 0000103A E8F65A0000          <1> 	call guiclear
  1680 0000103F E8415B0000          <1> 	call reloadallgraphics
  1681 00001044 E81C180000          <1> 	call termcopy
  1682                              <1> nodebuggui:
  1683                              <1> %endif
  1684 00001049 8B35[71110000]      <1> 	mov esi, [espfirst]
  1685 0000104F 89F4                <1> 	mov esp, esi
  1686 00001051 61                  <1> 	popad
  1687 00001052 17                  <1> 	pop ss
  1688 00001053 0FA9                <1> 	pop gs
  1689 00001055 0FA1                <1> 	pop fs
  1690 00001057 07                  <1> 	pop es
  1691 00001058 1F                  <1> 	pop ds
  1692 00001059 CF                  <1> 	iret
  1693                              <1> nodebugint:
  1694 0000105A 61                  <1> 	popad
  1695 0000105B 17                  <1> 	pop ss
  1696 0000105C 0FA9                <1> 	pop gs
  1697 0000105E 0FA1                <1> 	pop fs
  1698 00001060 07                  <1> 	pop es
  1699 00001061 1F                  <1> 	pop ds
  1700                              <1> %ifdef gui.included
  1701 00001062 803D[64820000]00    <1> 	cmp byte [guion], 0
  1702 00001069 7427                <1> 	je returnunhandgui
  1703 0000106B 668B1D[81110000]    <1> 	mov bx, [backgroundcache]
  1704 00001072 66891D[816B0000]    <1> 	mov [background], bx
  1705 00001079 6631DB              <1> 	xor bx, bx
  1706 0000107C C605[62550000]00    <1> 	mov byte [mousedisabled], 0
  1707 00001083 E8AD5A0000          <1> 	call guiclear
  1708 00001088 E8F85A0000          <1> 	call reloadallgraphics
  1709 0000108D E8D3170000          <1> 	call termcopy
  1710                              <1> %endif
  1711                              <1> returnunhandgui:
  1712 00001092 E9161C0000          <1> 	jmp nwcmd
  1713 00001097 506C6561736520706F- <1> backtoosmsg db "Please post any problems in the Issues section at solleros.googlecode.com",10
  1714 000010A0 737420616E79207072- <1>
  1715 000010A9 6F626C656D7320696E- <1>
  1716 000010B2 207468652049737375- <1>
  1717 000010BB 65732073656374696F- <1>
  1718 000010C4 6E20617420736F6C6C- <1>
  1719 000010CD 65726F732E676F6F67- <1>
  1720 000010D6 6C65636F64652E636F- <1>
  1721 000010DF 6D0A                <1>
  1722 000010E1 507265737320616E79- <1> 			db "Press any key to return to SollerOS",10,0
  1723 000010EA 206B657920746F2072- <1>
  1724 000010F3 657475726E20746F20- <1>
  1725 000010FC 536F6C6C65724F530A- <1>
  1726 00001105 00                  <1>
  1727                              <1> expdump:
  1728 00001106 8B35[75110000]      <1> 	mov esi, [esiloc]
  1729 0000110C 89F7                <1> 	mov edi, esi
  1730 0000110E 81C70F000000        <1> 	add edi, 15
  1731 00001114 81C604000000        <1> 	add esi, 4
  1732 0000111A 893D[75110000]      <1> 	mov [esiloc], edi
  1733 00001120 81EF03000000        <1> 	sub edi, 3
  1734 00001126 E8E91F0000          <1> 	call converthex
  1735 0000112B 81EE04000000        <1> 	sub esi, 4
  1736                              <1> %ifdef gui.included
  1737 00001131 803D[64820000]00    <1> 	cmp byte [guion], 0
  1738 00001138 0F8429000000        <1> 	je near expdumptext
  1739 0000113E 668B0D[7D110000]    <1> 	mov cx, [locunhandy]
  1740 00001145 668B15[7F110000]    <1> 	mov dx, [locunhandx]
  1741 0000114C 66B80100            <1> 	mov ax, 1
  1742 00001150 6631DB              <1> 	xor bx, bx
  1743 00001153 E87E600000          <1> 	call showstring2
  1744 00001158 66890D[7D110000]    <1> 	mov [locunhandy], cx
  1745 0000115F 668915[7F110000]    <1> 	mov [locunhandx], dx
  1746 00001166 C3                  <1> 	ret
  1747                              <1> %endif
  1748                              <1> expdumptext:
  1749 00001167 E8AA0B0000          <1> 	call print
  1750 0000116C C3                  <1> 	ret
  1751 0000116D 00000000            <1> esploc dd 0
  1752 00001171 00000000            <1> espfirst dd 0
  1753 00001175 00000000            <1> esiloc dd 0
  1754 00001179 00000000            <1> esiregbuf dd 0
  1755 0000117D 0100                <1> locunhandy dw 1
  1756 0000117F 0100                <1> locunhandx dw 1
  1757 00001181 0000                <1> backgroundcache dw 0
  1758 00001183 00                  <1> intprob db 0
  1759 00001184 00000000            <1> codeloc dd 0
  1760 00001188 00000000            <1> codelocend dd 0
  1761 0000118C 000000000000        <1> igdtcache dw 0,0,0
  1762                              <1> 	unhandmsg:	
  1763 00001192 494E543D3030303030- <1> 			db "INT=00000000",255,10,0
  1764 0000119B 303030FF0A00        <1>
  1765                              <1> unhndrg:
  1766 000011A1 FFFFFFFF3030303030- <1> 	times 7 db 255,255,255,255,"00000000  ",0	;;this dumps the stack before the stack frame in question
  1767 000011AA 303030202000<rept>  <1>
  1768 0000120A FFFFFFFF3030303030- <1> 			db 255,255,255,255,"00000000",255,10,0
  1769 00001213 303030FF0A00        <1>
  1770 00001219 FFFFFFFF3030303030- <1> 	times 7 db 255,255,255,255,"00000000  ",0	;;this dumps the stack before the stack frame in question
  1771 00001222 303030202000<rept>  <1>
  1772 00001282 FFFFFFFF3030303030- <1> 			db 255,255,255,255,"00000000",255,10,0
  1773 0000128B 303030FF0A00        <1>
  1774 00001291 FFFFFFFF3030303030- <1> 	times 7 db 255,255,255,255,"00000000  ",0	;;this dumps the stack before the stack frame in question
  1775 0000129A 303030202000<rept>  <1>
  1776 000012FA FFFFFFFF3030303030- <1> 			db 255,255,255,255,"00000000",255,10,0
  1777 00001303 303030FF0A00        <1>
  1778 00001309 FFFFFFFF3030303030- <1> 	times 7 db 255,255,255,255,"00000000  ",0	;;this dumps the stack before the stack frame in question
  1779 00001312 303030202000<rept>  <1>
  1780 00001372 FFFFFFFF3030303030- <1> 			db 255,255,255,255,"00000000",255,10,0
  1781 0000137B 303030FF0A00        <1>
  1782                              <1> unhandregs:
  1783 00001381 45464C3D3030303030- <1> 			db "EFL=00000000  ",0
  1784 0000138A 303030202000        <1>
  1785 00001390 43533A3D3030303030- <1> 			db "CS:=00000000  ",0
  1786 00001399 303030202000        <1>
  1787 0000139F 4549503D3030303030- <1> 			db "EIP=00000000",255,10,0
  1788 000013A8 303030FF0A00        <1>
  1789 000013AE 44533A3D3030303030- <1> 			db "DS:=00000000  ",0
  1790 000013B7 303030202000        <1>
  1791 000013BD 45533A3D3030303030- <1> 			db "ES:=00000000  ",0
  1792 000013C6 303030202000        <1>
  1793 000013CC 46533A3D3030303030- <1> 			db "FS:=00000000  ",0
  1794 000013D5 303030202000        <1>
  1795 000013DB 47533A3D3030303030- <1> 			db "GS:=00000000  ",0
  1796 000013E4 303030202000        <1>
  1797 000013EA 53533A3D3030303030- <1> 			db "SS:=00000000",255,10,0
  1798 000013F3 303030FF0A00        <1>
  1799 000013F9 4541583D3030303030- <1> 			db "EAX=00000000  ",0
  1800 00001402 303030202000        <1>
  1801 00001408 4543583D3030303030- <1> 			db "ECX=00000000  ",0
  1802 00001411 303030202000        <1>
  1803 00001417 4544583D3030303030- <1> 			db "EDX=00000000  ",0
  1804 00001420 303030202000        <1>
  1805 00001426 4542583D3030303030- <1> 			db "EBX=00000000",255,10,0
  1806 0000142F 303030FF0A00        <1>
  1807 00001435 4553503D3030303030- <1> 			db "ESP=00000000  ",0
  1808 0000143E 303030202000        <1>
  1809 00001444 4542503D3030303030- <1> 			db "EBP=00000000  ",0
  1810 0000144D 303030202000        <1>
  1811 00001453 4553493D3030303030- <1> 			db "ESI=00000000  ",0
  1812 0000145C 303030202000        <1>
  1813 00001462 4544493D3030303030- <1> unhndrgend:	db "EDI=00000000",255,10,0
  1814 0000146B 303030FF0A00        <1>
  1815 00001471 4352303D3030303030- <1> 			db "CR0=00000000  ",0
  1816 0000147A 303030202000        <1>
  1817 00001480 4352323D3030303030- <1> 			db "CR2=00000000  ",0
  1818 00001489 303030202000        <1>
  1819 0000148F 4352333D3030303030- <1> 			db "CR3=00000000  ",0
  1820 00001498 303030202000        <1>
  1821 0000149E 4352343D3030303030- <1> 			db "CR4=00000000",255,10,0
  1822 000014A7 303030FF0A00        <1>
  1823 000014AD 54523A3D3030303030- <1> 			db "TR:=00000000  ",0
  1824 000014B6 303030202000        <1>
  1825 000014BC 4944543D3030303030- <1> 			db "IDT=00000000  ",0
  1826 000014C5 303030202000        <1>
  1827 000014CB 4744543D3030303030- <1> 			db "GDT=00000000  ",0
  1828 000014D4 303030202000        <1>
  1829 000014DA 4C44543D3030303030- <1> 			db "LDT=00000000",255,10,0
  1830 000014E3 303030FF0A00        <1>
  1831 000014E9 FFFFFFFF3030303030- <1> unhandcode: times 2 db 255,255,255,255,"00000000  ",0	;;this dumps the code before and after the interrupt in question
  1832 000014F2 303030202000<rept>  <1>
  1833 00001507 FFFFFFFF3030303030- <1> 			db 255,255,255,255,"00000000 ",255,0
  1834 00001510 30303020FF00        <1>
  1835 00001516 FFFFFF5B3030303030- <1> 			db 255,255,255,"[00000000] ",0
  1836 0000151F 3030305D2000        <1>
  1837 00001525 FFFFFFFF3030303030- <1> 			times 3 db 255,255,255,255,"00000000  ",0
  1838 0000152E 303030202000<rept>  <1>
  1839 00001552 FFFFFFFF3030303030- <1> 			db 255,255,255,255,"00000000",255,10,0
  1840 0000155B 303030FF0A00        <1>
  1841                              <1> unhandmsgend:
  1842                              <1> 
  1843                              <1> errortypes:
  1844 00001561 [A5150000]          <1> 			dd err0
  1845 00001565 [0E160000]          <1> 			dd err1
  1846 00001569 [6F160000]          <1> 			dd err2
  1847 0000156D [C4160000]          <1> 			dd err3
  1848 00001571 [28170000]          <1> 			dd err4
  1849 00001575 [7A170000]          <1> 			dd err5
  1850 00001579 [E4170000]          <1> 			dd err6
  1851 0000157D [4C180000]          <1> 			dd err7
  1852 00001581 [96180000]          <1> 			dd err8
  1853 00001585 [F3180000]          <1> 			dd err9
  1854 00001589 [4C190000]          <1> 			dd err10
  1855 0000158D [97190000]          <1> 			dd err11
  1856 00001591 [E7190000]          <1> 			dd err12
  1857 00001595 [401A0000]          <1> 			dd err13
  1858 00001599 [A31A0000]          <1> 			dd err14
  1859 0000159D [DF1A0000]          <1> 			dd err15
  1860                              <1> errortypesend:
  1861 000015A1 [6A1B0000]          <1> 			dd unknownerror
  1862                              <1> 			
  1863 000015A5 4469766973696F6E20- <1> err0	db "Division by zero:",10
  1864 000015AE 6279207A65726F3A0A  <1>
  1865 000015B7 546563686E6963616C- <1> 		db "Technically lim a÷x = ∞ when a is any real number. Happy Easter!",10
  1866 000015C0 6C79206C696D2061C3- <1>
  1867 000015C9 B778203D20E2889E20- <1>
  1868 000015D2 7768656E2061206973- <1>
  1869 000015DB 20616E79207265616C- <1>
  1870 000015E4 206E756D6265722E20- <1>
  1871 000015ED 486170707920456173- <1>
  1872 000015F6 746572210A          <1>
  1873 000015FB 202020202020202020- <1> 		db "            x→0",10,0
  1874 00001604 20202078E28692300A- <1>
  1875 0000160D 00                  <1>
  1876                              <1> 		
  1877 0000160E 53696E676C652D7374- <1> err1	db "Single-step/Breakpoint:",10
  1878 00001617 65702F427265616B70- <1>
  1879 00001620 6F696E743A0A        <1>
  1880 00001626 4120627265616B706F- <1> 		db "A breakpoint fault, breakpoint trap, or single-step trap was triggered.",10,0
  1881 0000162F 696E74206661756C74- <1>
  1882 00001638 2C20627265616B706F- <1>
  1883 00001641 696E7420747261702C- <1>
  1884 0000164A 206F722073696E676C- <1>
  1885 00001653 652D73746570207472- <1>
  1886 0000165C 617020776173207472- <1>
  1887 00001665 696767657265642E0A- <1>
  1888 0000166E 00                  <1>
  1889                              <1> 		
  1890 0000166F 4E6F6E6D61736B6162- <1> err2	db "Nonmaskable interrupt:",10
  1891 00001678 6C6520696E74657272- <1>
  1892 00001681 7570743A0A          <1>
  1893 00001686 412068617264776172- <1> 		db "A hardware interrupt was triggered that could not be masked.",10,0
  1894 0000168F 6520696E7465727275- <1>
  1895 00001698 707420776173207472- <1>
  1896 000016A1 696767657265642074- <1>
  1897 000016AA 68617420636F756C64- <1>
  1898 000016B3 206E6F74206265206D- <1>
  1899 000016BC 61736B65642E0A00    <1>
  1900                              <1> 		
  1901 000016C4 427265616B706F696E- <1> err3	db "Breakpoint:",10
  1902 000016CD 743A0A              <1>
  1903 000016D0 5468697320696E7465- <1> 		db "This interrupt is used in programs to show the stack and registers and can be",10
  1904 000016D9 727275707420697320- <1>
  1905 000016E2 7573656420696E2070- <1>
  1906 000016EB 726F6772616D732074- <1>
  1907 000016F4 6F2073686F77207468- <1>
  1908 000016FD 6520737461636B2061- <1>
  1909 00001706 6E6420726567697374- <1>
  1910 0000170F 65727320616E642063- <1>
  1911 00001718 616E2062650A        <1>
  1912 0000171E 69676E6F7265642E0A- <1> 		db "ignored.",10,0
  1913 00001727 00                  <1>
  1914                              <1> 		
  1915 00001728 4F766572666C6F773A- <1> err4	db "Overflow:",10
  1916 00001731 0A                  <1>
  1917 00001732 5468652070726F6365- <1> 		db "The processor ran into an INTO instruction with the overflow flag set.",10,0
  1918 0000173B 73736F722072616E20- <1>
  1919 00001744 696E746F20616E2049- <1>
  1920 0000174D 4E544F20696E737472- <1>
  1921 00001756 756374696F6E207769- <1>
  1922 0000175F 746820746865206F76- <1>
  1923 00001768 6572666C6F7720666C- <1>
  1924 00001771 6167207365742E0A00  <1>
  1925                              <1> 		
  1926 0000177A 426F756E6473206368- <1> err5	db "Bounds check:",10
  1927 00001783 65636B3A0A          <1>
  1928 00001788 5468652070726F6365- <1> 		db "The processor rebounded from a BOUND instruction run on an operand that was out",10
  1929 00001791 73736F72207265626F- <1>
  1930 0000179A 756E6465642066726F- <1>
  1931 000017A3 6D206120424F554E44- <1>
  1932 000017AC 20696E737472756374- <1>
  1933 000017B5 696F6E2072756E206F- <1>
  1934 000017BE 6E20616E206F706572- <1>
  1935 000017C7 616E64207468617420- <1>
  1936 000017D0 776173206F75740A    <1>
  1937 000017D8 6F6620626F756E6473- <1> 		db "of bounds.",10,0
  1938 000017E1 2E0A00              <1>
  1939                              <1> 		
  1940 000017E4 496E76616C6964206F- <1> err6	db "Invalid opcode:",10
  1941 000017ED 70636F64653A0A      <1>
  1942 000017F4 5468652070726F6365- <1> 		db "The processor has no idea what it was trying to execute. Don't run SSE4 code",10
  1943 000017FD 73736F722068617320- <1>
  1944 00001806 6E6F20696465612077- <1>
  1945 0000180F 686174206974207761- <1>
  1946 00001818 7320747279696E6720- <1>
  1947 00001821 746F20657865637574- <1>
  1948 0000182A 652E20446F6E277420- <1>
  1949 00001833 72756E205353453420- <1>
  1950 0000183C 636F64650A          <1>
  1951 00001841 6F6E20343836277321- <1> 		db "on 486's!",10,0
  1952 0000184A 0A00                <1>
  1953                              <1> 		
  1954 0000184C 436F70726F63657373- <1> err7	db "Coprocessor not available:",10
  1955 00001855 6F72206E6F74206176- <1>
  1956 0000185E 61696C61626C653A0A  <1>
  1957 00001867 446F6E277420796F75- <1> 		db "Don't you know they don't make those anymore!",10,0
  1958 00001870 206B6E6F7720746865- <1>
  1959 00001879 7920646F6E2774206D- <1>
  1960 00001882 616B652074686F7365- <1>
  1961 0000188B 20616E796D6F726521- <1>
  1962 00001894 0A00                <1>
  1963                              <1> 		
  1964 00001896 446F75626C65206661- <1> err8	db "Double fault:",10
  1965 0000189F 756C743A0A          <1>
  1966 000018A4 546865206578636570- <1> 		db "The exception handler could not handle that it could not handle an exception.",10,0
  1967 000018AD 74696F6E2068616E64- <1>
  1968 000018B6 6C657220636F756C64- <1>
  1969 000018BF 206E6F742068616E64- <1>
  1970 000018C8 6C6520746861742069- <1>
  1971 000018D1 7420636F756C64206E- <1>
  1972 000018DA 6F742068616E646C65- <1>
  1973 000018E3 20616E206578636570- <1>
  1974 000018EC 74696F6E2E0A00      <1>
  1975                              <1> 		
  1976 000018F3 436F70726F63657373- <1> err9	db "Coprocessor segment overrun:",10,0
  1977 000018FC 6F72207365676D656E- <1>
  1978 00001905 74206F76657272756E- <1>
  1979 0000190E 3A0A00              <1>
  1980 00001911 54686973206E657665- <1> 		db "This never happens in modern computers, and never should.",10,0
  1981 0000191A 722068617070656E73- <1>
  1982 00001923 20696E206D6F646572- <1>
  1983 0000192C 6E20636F6D70757465- <1>
  1984 00001935 72732C20616E64206E- <1>
  1985 0000193E 657665722073686F75- <1>
  1986 00001947 6C642E0A00          <1>
  1987                              <1> 
  1988 0000194C 496E76616C69642054- <1> err10	db "Invalid TSS:",10
  1989 00001955 53533A0A            <1>
  1990 00001959 546865205453532074- <1> 		db "The TSS that was switched to is invalid. Nothing funny here.",10,0
  1991 00001962 686174207761732073- <1>
  1992 0000196B 776974636865642074- <1>
  1993 00001974 6F20697320696E7661- <1>
  1994 0000197D 6C69642E204E6F7468- <1>
  1995 00001986 696E672066756E6E79- <1>
  1996 0000198F 20686572652E0A00    <1>
  1997                              <1> 		
  1998 00001997 5365676D656E74206E- <1> err11	db "Segment not present:",10
  1999 000019A0 6F742070726573656E- <1>
  2000 000019A9 743A0A              <1>
  2001 000019AC 546865207072657365- <1> 		db "The present bit of the segment descriptor is set to zero.",10,0
  2002 000019B5 6E7420626974206F66- <1>
  2003 000019BE 20746865207365676D- <1>
  2004 000019C7 656E74206465736372- <1>
  2005 000019D0 6970746F7220697320- <1>
  2006 000019D9 73657420746F207A65- <1>
  2007 000019E2 726F2E0A00          <1>
  2008                              <1> 		
  2009 000019E7 537461636B20657863- <1> err12	db "Stack exception:",10
  2010 000019F0 657074696F6E3A0A    <1>
  2011 000019F8 546865205353206465- <1> 		db "The SS descriptor is invalid or not present or its limit is too small.",10,0
  2012 00001A01 7363726970746F7220- <1>
  2013 00001A0A 697320696E76616C69- <1>
  2014 00001A13 64206F72206E6F7420- <1>
  2015 00001A1C 70726573656E74206F- <1>
  2016 00001A25 7220697473206C696D- <1>
  2017 00001A2E 697420697320746F6F- <1>
  2018 00001A37 20736D616C6C2E0A00  <1>
  2019                              <1> 		
  2020 00001A40 47656E6572616C2070- <1> err13	db "General protection violation:",10
  2021 00001A49 726F74656374696F6E- <1>
  2022 00001A52 2076696F6C6174696F- <1>
  2023 00001A5B 6E3A0A              <1>
  2024 00001A5E 596F752076696F6C61- <1> 		db "You violated the computer. Step away slowly. The FBI is on its way.",10,0
  2025 00001A67 746564207468652063- <1>
  2026 00001A70 6F6D70757465722E20- <1>
  2027 00001A79 537465702061776179- <1>
  2028 00001A82 20736C6F776C792E20- <1>
  2029 00001A8B 546865204642492069- <1>
  2030 00001A94 73206F6E2069747320- <1>
  2031 00001A9D 7761792E0A00        <1>
  2032                              <1> 		
  2033 00001AA3 50616765206661756C- <1> err14	db "Page fault:",10
  2034 00001AAC 743A0A              <1>
  2035 00001AAF 546865207061676520- <1> 		db "The page that was requested was not available.",10,0
  2036 00001AB8 746861742077617320- <1>
  2037 00001AC1 726571756573746564- <1>
  2038 00001ACA 20776173206E6F7420- <1>
  2039 00001AD3 617661696C61626C65- <1>
  2040 00001ADC 2E0A00              <1>
  2041                              <1> 		
  2042 00001ADF 526573657276656420- <1> err15	db "Reserved for Plan R:",10
  2043 00001AE8 666F7220506C616E20- <1>
  2044 00001AF1 523A0A              <1>
  2045 00001AF4 5468697320696E7465- <1> 		db "This interrupt is reserved for usage only by the military when it is necessary",10
  2046 00001AFD 727275707420697320- <1>
  2047 00001B06 726573657276656420- <1>
  2048 00001B0F 666F72207573616765- <1>
  2049 00001B18 206F6E6C7920627920- <1>
  2050 00001B21 746865206D696C6974- <1>
  2051 00001B2A 617279207768656E20- <1>
  2052 00001B33 6974206973206E6563- <1>
  2053 00001B3C 6573736172790A      <1>
  2054 00001B43 746F20696E69746961- <1> 		db "to initiate a full-scale coup d'",130,"tat.",10,0
  2055 00001B4C 746520612066756C6C- <1>
  2056 00001B55 2D7363616C6520636F- <1>
  2057 00001B5E 757020642782746174- <1>
  2058 00001B67 2E0A00              <1>
  2059                              <1> 		
  2060 00001B6A 576861742074686520- <1> unknownerror db "What the hell just happened? Is everyone okay? Hard drive? Video card?",10
  2061 00001B73 68656C6C206A757374- <1>
  2062 00001B7C 2068617070656E6564- <1>
  2063 00001B85 3F2049732065766572- <1>
  2064 00001B8E 796F6E65206F6B6179- <1>
  2065 00001B97 3F2048617264206472- <1>
  2066 00001BA0 6976653F2056696465- <1>
  2067 00001BA9 6F20636172643F0A    <1>
  2068 00001BB1 4D656D6F72793F2041- <1> 			db	"Memory? Are you there?",10,0
  2069 00001BBA 726520796F75207468- <1>
  2070 00001BC3 6572653F0A00        <1>
  2071                              <1> %else
  2072                              <1> unhand:	
  2073                              <1> 	%assign i 0
  2074                              <1> 	%rep 32
  2075                              <1> 	mov byte [intprob], i
  2076                              <1> 	jmp unhand2
  2077                              <1> 	%assign i i+1
  2078                              <1> 	%endrep
  2079                              <1> unhand2:
  2080                              <1> 	cmp byte [intprob], 3
  2081                              <1> 	je handled	;if it is a debug interrupt, it is auto handled
  2082                              <1> 	mov ebx, 0xDEADCD00 ;this shows that an exception occured even though more detailed info cannot be shown
  2083                              <1> 						;CD stands for the interrupt code, DEAD shows that the program died because of the int
  2084                              <1> 	mov bl, [intprob]
  2085                              <1> 	jmp exitprog
  2086                              <1> intprob db 0
  2087                              <1> %endif
  2088                                      %include "source/ints.asm"
  2089                              <1> newints:	;for great justice
  2090 00001BC9 80FC00              <1> 	cmp ah, 0
  2091 00001BCC 0F8491000000        <1> 	je near exitprog   ;kills app
  2092 00001BD2 80FC01              <1> 	cmp ah, 1
  2093 00001BD5 0F8410010000        <1> 	je near prntstr  ;print string
  2094 00001BDB 80FC02              <1> 	cmp ah, 2
  2095 00001BDE 0F84AE010000        <1> 	je near readstr	;read string
  2096 00001BE4 80FC03              <1> 	cmp ah, 3
  2097 00001BE7 0F84CE010000        <1> 	je near clearscrn	;clear screen
  2098 00001BED 80FC04              <1> 	cmp ah, 4
  2099 00001BF0 0F8443020000        <1> 	je near prntreadstr	;read and print string
  2100 00001BF6 80FC05              <1> 	cmp ah, 5
  2101 00001BF9 0F8408070000        <1> 	je near readchar	;get char
  2102 00001BFF 80FC06              <1> 	cmp ah, 6
  2103 00001C02 0F846F070000        <1> 	je near prntchar	;print char
  2104 00001C08 80FC07              <1> 	cmp ah, 7
  2105 00001C0B 0F848C090000        <1> 	je near openfile	;read file
  2106                              <1> ;	cmp ah, 8
  2107                              <1> ;	je near closefile	;close file
  2108 00001C11 80FC09              <1> 	cmp ah, 9
  2109 00001C14 0F848D090000        <1> 	je near num2str	;convert number to string
  2110 00001C1A 80FC0A              <1> 	cmp ah, 10
  2111 00001C1D 0F849C090000        <1> 	je near str2num	;convert string to number
  2112                              <1> %ifdef threads.included
  2113 00001C23 80FC0B              <1> 	cmp ah, 11
  2114 00001C26 0F849F090000        <1> 	je near forkthread	;create thread
  2115                              <1> %endif
  2116 00001C2C 80FC0C              <1> 	cmp ah, 12
  2117 00001C2F 0F846D0A0000        <1> 	je near gettime	;get time
  2118 00001C35 80FC0D              <1> 	cmp ah, 13
  2119 00001C38 0F84790A0000        <1> 	je near settime	;set time
  2120 00001C3E 80FC0E              <1> 	cmp ah, 14
  2121 00001C41 0F84800A0000        <1> 	je near runcmd	;run program
  2122 00001C47 80FC0F              <1> 	cmp ah, 15
  2123 00001C4A 0F848C0A0000        <1> 	je near proginfo ;get program info-location of name/options/number of options/environmental vars
  2124 00001C50 80FC10              <1> 	cmp ah, 16
  2125 00001C53 0F84AE0A0000        <1> 	je near hooksig	;hook code to a signal
  2126                              <1> %ifdef gui.included
  2127 00001C59 80FC11              <1> 	cmp ah, 17
  2128 00001C5C 0F84B50A0000        <1> 	je near guiint	;GUI operations
  2129                              <1> %endif
  2130                              <1> %ifdef sound.included
  2131                              <1> 	cmp ah, 18
  2132                              <1> 	je near soundint	;sound operations
  2133                              <1> %endif
  2134                              <1> %ifdef network.included
  2135                              <1> 	cmp ah, 19
  2136                              <1> 	je near netint	;networking operations
  2137                              <1> %endif
  2138 00001C62 CF                  <1> 	iret
  2139                              <1> 	%include 'source/interrupts/0_exitprog.asm'
  2140                              <2> exitprog:
  2141 00001C63 66B83000            <2> 	mov ax, NEW_DATA_SEL
  2142 00001C67 8ED8                <2> 	mov ds, ax
  2143 00001C69 8EC0                <2> 	mov es, ax
  2144 00001C6B 8EE0                <2> 	mov fs, ax
  2145 00001C6D 66B82000            <2> 	mov ax, SYS_DATA_SEL
  2146 00001C71 8EE8                <2> 	mov gs, ax
  2147 00001C73 C705[9C640000]0000- <2> 	mov dword [currentthread], 0
  2148 00001C7B 0000                <2>
  2149 00001C7D C705[97640000]0400- <2> 	mov dword [lastthread], 4
  2150 00001C85 0000                <2>
  2151 00001C87 C605[9B640000]00    <2> 	mov byte [threadson], 0 ;for now i need to use this
  2152 00001C8E 8B25[D89A0300]      <2> 	mov esp, [previousstack] ;and this
  2153 00001C94 81FB00000000        <2> 	cmp ebx, 0
  2154 00001C9A 0F8501000000        <2> 	jne near .error
  2155 00001CA0 C3                  <2> 	ret
  2156                              <2> .error:
  2157 00001CA1 89D9                <2> 	mov ecx, ebx
  2158 00001CA3 B006                <2> 	mov al, 6
  2159 00001CA5 A2[72310000]        <2> 	mov [firsthexshown], al
  2160 00001CAA 51                  <2> 	push ecx
  2161 00001CAB BE[C61C0000]        <2> 	mov esi, .msg1
  2162 00001CB0 E855000000          <2> 	call printhighlight
  2163 00001CB5 59                  <2> 	pop ecx
  2164 00001CB6 E8CC140000          <2> 	call showhex
  2165 00001CBB BE[DB1C0000]        <2> 	mov esi, .msg2
  2166 00001CC0 E845000000          <2> 	call printhighlight
  2167 00001CC5 C3                  <2> 	ret
  2168                              <2> 	
  2169 00001CC6 416E20657869742073- <2> .msg1 db "An exit status of 0x",0
  2170 00001CCF 7461747573206F6620- <2>
  2171 00001CD8 307800              <2>
  2172 00001CDB 087761732072657475- <2> .msg2 db 8,"was returned.",10,0
  2173 00001CE4 726E65642E0A00      <2>
  2174                              <1> 	%include 'source/interrupts/1_prntstr.asm'
  2175                              <2> prntstr:
  2176 00001CEB 30E4                <2> xor ah, ah
  2177 00001CED E82B000000          <2> call printint
  2178 00001CF2 E9A5E5FFFF          <2> jmp timerinterrupt
  2179                              <2> 
  2180                              <2> 	printquiet:
  2181 00001CF7 6631C0              <2> 		xor ax, ax
  2182 00001CFA 66A3[901D0000]      <2> 		mov [endkeyprint], ax
  2183 00001D00 66BB0700            <2> 		mov bx, 7
  2184 00001D04 E82D000000          <2> 		call printint.b
  2185 00001D09 C3                  <2> 		ret
  2186                              <2> 
  2187                              <2> 	printhighlight:
  2188 00001D0A 6631C0              <2> 		xor ax, ax
  2189 00001D0D 66BBF000            <2> 		mov bx, 0xF0
  2190 00001D11 E907000000          <2> 		jmp printint
  2191                              <2> 
  2192                              <2>     print:
  2193 00001D16 6631C0              <2> 		xor ax, ax
  2194 00001D19 66BB0700            <2> 		mov bx, 7
  2195                              <2> 	printint:	;print line, ax=last key,bx=modifier, esi=buffer
  2196 00001D1D 56                  <2> 		push esi
  2197 00001D1E 66A3[901D0000]      <2> 		mov [endkeyprint], ax
  2198 00001D24 E80D000000          <2> 		call .b
  2199 00001D29 89F1                <2> 		mov ecx, esi
  2200 00001D2B 5F                  <2> 		pop edi
  2201 00001D2C 29F9                <2> 		sub ecx, edi
  2202 00001D2E 51                  <2> 		push ecx
  2203 00001D2F E8310B0000          <2> 		call termcopy
  2204 00001D34 59                  <2> 		pop ecx
  2205 00001D35 C3                  <2> 		ret
  2206                              <2> 	.b:	
  2207 00001D36 53                  <2> 		push ebx
  2208 00001D37 31C0                <2> 		xor eax, eax
  2209 00001D39 8A06                <2> 		mov al, [esi]
  2210 00001D3B 3CFF                <2> 		cmp al, 0xFF
  2211 00001D3D 7438                <2> 		je .doneutf
  2212 00001D3F 3CC0                <2> 		cmp al, 0xC0
  2213 00001D41 7234                <2> 		jb .doneutf
  2214 00001D43 3CE0                <2> 		cmp al, 0xE0
  2215 00001D45 721D                <2> 		jb .two
  2216 00001D47 46                  <2> 		inc esi
  2217 00001D48 668B0E              <2> 		mov cx, [esi]
  2218 00001D4B 46                  <2> 		inc esi
  2219 00001D4C C0E004              <2> 		shl al, 4
  2220 00001D4F 66C1E102            <2> 		shl cx, 2
  2221 00001D53 C0ED02              <2> 		shr ch, 2
  2222 00001D56 66C1E902            <2> 		shr cx, 2
  2223 00001D5A 08C5                <2> 		or ch, al
  2224 00001D5C 6689C8              <2> 		mov ax, cx
  2225 00001D5F E913000000          <2> 		jmp .doneutf
  2226                              <2> 	.two:
  2227 00001D64 8A2E                <2> 		mov ch, [esi]
  2228 00001D66 46                  <2> 		inc esi
  2229 00001D67 8A0E                <2> 		mov cl, [esi]
  2230 00001D69 66C1E102            <2> 		shl cx, 2
  2231 00001D6D C0ED02              <2> 		shr ch, 2
  2232 00001D70 66C1E902            <2> 		shr cx, 2
  2233 00001D74 6689C8              <2> 		mov ax, cx
  2234                              <2> 	.doneutf:
  2235 00001D77 5B                  <2> 		pop ebx
  2236 00001D78 663B05[901D0000]    <2> 		cmp ax, [endkeyprint]
  2237 00001D7F 740E                <2> 		je .done
  2238 00001D81 663DFFFE            <2> 		cmp ax, 0xFEFF
  2239 00001D85 7405                <2> 		je .noprint
  2240 00001D87 E818060000          <2> 		call prcharq
  2241                              <2> 	.noprint:
  2242 00001D8C 46                  <2> 		inc esi
  2243 00001D8D EBA7                <2> 		jmp .b
  2244                              <2> 	.done:
  2245 00001D8F C3                  <2> 		ret
  2246                              <2> 
  2247 00001D90 0000                <2> endkeyprint dw 0
  2248                              <1> 	%include 'source/interrupts/2_readstr.asm'
  2249                              <2> readstr:
  2250 00001D92 E805000000          <2> call readint
  2251 00001D97 E900E5FFFF          <2> jmp timerinterrupt
  2252                              <2> 
  2253                              <2> 	readint:	;;get line, al=last key, esi = buffer, edi = endbuffer	
  2254 00001D9C 89C3                <2> 		mov ebx, eax
  2255                              <2> 	.b:
  2256 00001D9E 53                  <2> 		push ebx
  2257 00001D9F 57                  <2> 		push edi
  2258 00001DA0 56                  <2> 		push esi
  2259 00001DA1 30C0                <2> 		xor al, al
  2260 00001DA3 E86B050000          <2> 		call rdcharint
  2261 00001DA8 5E                  <2> 		pop esi
  2262 00001DA9 8806                <2> 		mov [esi], al
  2263 00001DAB 46                  <2> 		inc esi
  2264 00001DAC 5F                  <2> 		pop edi
  2265 00001DAD 5B                  <2> 		pop ebx
  2266 00001DAE 39FE                <2> 		cmp esi, edi
  2267 00001DB0 7304                <2> 		jae .done
  2268 00001DB2 38D8                <2> 		cmp al, bl
  2269 00001DB4 75E8                <2> 		jne .b
  2270                              <2> 	.done:
  2271 00001DB6 4E                  <2> 		dec esi
  2272 00001DB7 C60600              <2> 		mov byte [esi], 0
  2273 00001DBA C3                  <2> 		ret
  2274                              <1> 	%include 'source/interrupts/3_clearscrn.asm'
  2275                              <2> clearscrn:
  2276 00001DBB E805000000          <2> call clear
  2277 00001DC0 E9D7E4FFFF          <2> jmp timerinterrupt
  2278                              <2> %ifdef io.serial
  2279                              <2> clear:
  2280                              <2> 	ret
  2281                              <2> %else
  2282                              <2> clear:
  2283 00001DC5 668B0D[97250000]    <2> 		mov cx, [charxy]
  2284 00001DCC BF[6EB80300]        <2> 		mov edi, videobuf
  2285 00001DD1 31C0                <2> 		xor eax, eax
  2286 00001DD3 A3[8D250000]        <2> 		mov [linebeginpos], eax
  2287 00001DD8 A3[91250000]        <2> 		mov [videobufpos], eax
  2288 00001DDD 6631D2              <2> 		xor dx, dx
  2289 00001DE0 66A3[95250000]      <2> 		mov [charpos], ax
  2290 00001DE6 66B80700            <2> 		mov ax, 7
  2291 00001DEA C1E010              <2> 		shl eax, 16
  2292                              <2> 	clearb:
  2293 00001DED 8907                <2> 		mov [edi], eax
  2294 00001DEF 81C704000000        <2> 		add edi, 4
  2295 00001DF5 FEC9                <2> 		dec cl
  2296 00001DF7 80F900              <2> 		cmp cl, 0
  2297 00001DFA 75F1                <2> 		jne clearb
  2298 00001DFC 8A0D[97250000]      <2> 		mov cl, [charxy]
  2299 00001E02 FECD                <2> 		dec ch
  2300 00001E04 80FD00              <2> 		cmp ch, 0
  2301 00001E07 75E4                <2> 		jne clearb
  2302                              <2> 	cleardouble:
  2303 00001E09 BF[B68D0400]        <2> 		mov edi, videobuf2
  2304 00001E0E 668B0D[97250000]    <2> 		mov cx, [charxy]
  2305 00001E15 31C0                <2> 		xor eax, eax
  2306                              <2> 	clearc:
  2307 00001E17 8907                <2> 		mov [edi], eax
  2308 00001E19 81C704000000        <2> 		add edi, 4
  2309 00001E1F FEC9                <2> 		dec cl
  2310 00001E21 80F900              <2> 		cmp cl, 0
  2311 00001E24 75F1                <2> 		jne clearc
  2312 00001E26 8A0D[97250000]      <2> 		mov cl, [charxy]
  2313 00001E2C FECD                <2> 		dec ch
  2314 00001E2E 80FD00              <2> 		cmp ch, 0
  2315 00001E31 75E4                <2> 		jne clearc
  2316 00001E33 E82D0A0000          <2> 		call termcopy
  2317 00001E38 C3                  <2> 		ret
  2318                              <2> %endif
  2319                              <2> 		
  2320                              <1> 	%include 'source/interrupts/4_prntreadstr.asm'
  2321                              <2> prntreadstr:
  2322 00001E39 E80B000000          <2> call rdprint
  2323 00001E3E E959E4FFFF          <2> jmp timerinterrupt
  2324                              <2> 
  2325                              <2> readline:
  2326 00001E43 B00A                <2>   mov al, 10
  2327 00001E45 66BB0700            <2>   mov bx, 7
  2328                              <2> rdprint:	;print and get line, al=last key, bx=modifier, esi=buffer, edi=bufferend
  2329 00001E49 E80F000000          <2> 	call rdprintdos
  2330 00001E4E 50                  <2> 	push eax
  2331 00001E4F A0[F2220000]        <2> 	mov al, [endkeyrdpr]
  2332 00001E54 30E4                <2> 	xor ah, ah
  2333 00001E56 E832050000          <2> 	call prcharint
  2334 00001E5B 58                  <2> 	pop eax
  2335 00001E5C C3                  <2> 	ret
  2336                              <2> 
  2337                              <2> 	rdprintdos: ;allows dos compatibility with read function
  2338 00001E5D 8935[FC220000]      <2> 		mov [buftxtloc], esi
  2339 00001E63 A2[F2220000]        <2> 		mov [endkeyrdpr], al
  2340 00001E68 66891D[F4220000]    <2> 		mov [modkeyrdpr], bx
  2341 00001E6F 8935[F6220000]      <2> 		mov [firstesirdpr], esi
  2342 00001E75 893D[00230000]      <2> 		mov [endbufferrdpr], edi
  2343 00001E7B 8B3D[0A630500]      <2> 		mov edi, [commandsentered]
  2344 00001E81 893D[06630500]      <2> 		mov [commandlistentries], edi
  2345                              <2> 	rdprintb:
  2346 00001E87 56                  <2> 		push esi
  2347 00001E88 B001                <2> 		mov al, 1
  2348 00001E8A E884040000          <2> 		call rdcharint
  2349 00001E8F 8A25[73230000]      <2> 		mov ah, [lastkey + 2]
  2350 00001E95 88E1                <2> 		mov cl, ah
  2351 00001E97 5E                  <2> 		pop esi
  2352                              <2> %ifdef io.serial
  2353                              <2> 		cmp ah, 0x41
  2354                              <2> 		je near rdprup
  2355                              <2> 		cmp ah, 0x42
  2356                              <2> 		je near rdprdown
  2357                              <2> 		cmp ah, 0x43
  2358                              <2> 		je near rdprright
  2359                              <2> 		cmp ah, 0x44
  2360                              <2> 		je near rdprleft
  2361                              <2> 		cmp ah, 0x31
  2362                              <2> 		je near rdprhome
  2363                              <2> 		cmp ah, 0x48
  2364                              <2> 		je near rdprhome
  2365                              <2> 		cmp ah, 0x46
  2366                              <2> 		je near rdprend
  2367                              <2> 		cmp ah, 0x33
  2368                              <2> 		je near rdprdel
  2369                              <2> 		cmp ah, 0x34
  2370                              <2> 		je near rdprend
  2371                              <2> %else
  2372 00001E98 803D[1A590000]E0    <2> 		cmp byte [specialkey], 0xE0
  2373 00001E9F 753F                <2> 		jne notspecialrdprnt
  2374 00001EA1 80FC53              <2> 		cmp ah, 0x53
  2375 00001EA4 0F84B1030000        <2> 		je near rdprdel
  2376 00001EAA 80FC47              <2> 		cmp ah, 0x47
  2377 00001EAD 0F847E010000        <2> 		je near rdprhome
  2378 00001EB3 80FC4F              <2> 		cmp ah, 0x4F
  2379 00001EB6 0F8494010000        <2> 		je near rdprend
  2380 00001EBC 80FC50              <2> 		cmp ah, 0x50
  2381 00001EBF 0F8424020000        <2> 		je near rdprdown
  2382 00001EC5 80FC4D              <2> 		cmp ah, 0x4D
  2383 00001EC8 0F84C1010000        <2> 		je near rdprright
  2384 00001ECE 80FC4B              <2> 		cmp ah, 0x4B
  2385 00001ED1 0F8496010000        <2> 		je near rdprleft
  2386 00001ED7 80FC48              <2> 		cmp ah, 0x48
  2387 00001EDA 0F844C020000        <2> 		je near rdprup
  2388                              <2> 	notspecialrdprnt:
  2389                              <2> %endif
  2390 00001EE0 66A1[71230000]      <2> 		mov ax, [lastkey]
  2391 00001EE6 663D0800            <2> 		cmp ax, 8
  2392 00001EEA 0F84A0030000        <2> 		je near rdprbscheck
  2393 00001EF0 663D0000            <2> 		cmp ax, 0
  2394 00001EF4 7491                <2> 		je rdprintb
  2395 00001EF6 80F900              <2> 		cmp cl, 0
  2396 00001EF9 748C                <2> 		je rdprintb
  2397 00001EFB 663D8000            <2> 		cmp ax, 0x80
  2398 00001EFF 7257                <2> 		jb .normal
  2399 00001F01 663D0008            <2> 		cmp ax, 0x800
  2400 00001F05 7321                <2> 		jae .three
  2401 00001F07 46                  <2> 		inc esi
  2402 00001F08 3B35[00230000]      <2> 		cmp esi, [endbufferrdpr]
  2403 00001F0E 0F83DA000000        <2> 		jae near donerdprinc
  2404 00001F14 66C1E002            <2> 		shl ax, 2
  2405 00001F18 C0E802              <2> 		shr al, 2
  2406 00001F1B 0C80                <2> 		or al, 10000000b
  2407 00001F1D 80CCC0              <2> 		or ah, 11000000b
  2408 00001F20 8866FF              <2> 		mov [esi - 1], ah
  2409 00001F23 E930000000          <2> 		jmp .normal
  2410                              <2> .three:	
  2411 00001F28 81C602000000        <2> 		add esi, 2
  2412 00001F2E 3B35[00230000]      <2> 		cmp esi, [endbufferrdpr]
  2413 00001F34 0F83B4000000        <2> 		jae near donerdprinc
  2414 00001F3A 88E1                <2> 		mov cl, ah
  2415 00001F3C C0E904              <2> 		shr cl, 4
  2416 00001F3F 80C9E0              <2> 		or cl, 11100000b
  2417 00001F42 884EFE              <2> 		mov [esi - 2], cl
  2418 00001F45 66C1E004            <2> 		shl ax, 4
  2419 00001F49 66C1E802            <2> 		shr ax, 2
  2420 00001F4D 80CC80              <2> 		or ah, 10000000b
  2421 00001F50 C0E802              <2> 		shr al, 2
  2422 00001F53 0C80                <2> 		or al, 10000000b
  2423 00001F55 8866FF              <2> 		mov [esi - 1], ah
  2424                              <2> .normal:
  2425 00001F58 8806                <2> 		mov [esi], al
  2426 00001F5A 46                  <2> 		inc esi
  2427 00001F5B 66A1[71230000]      <2> 		mov ax, [lastkey]
  2428                              <2> 	bscheckequal:
  2429 00001F61 668B1D[F4220000]    <2> 		mov bx, [modkeyrdpr]
  2430 00001F68 803D[FB220000]00    <2> 		cmp byte [txtmask], 0
  2431 00001F6F 7407                <2> 		je nomasktxt
  2432 00001F71 30E4                <2> 		xor ah, ah
  2433 00001F73 A0[FB220000]        <2> 		mov al, [txtmask]
  2434                              <2> 	nomasktxt:
  2435 00001F78 56                  <2> 		push esi
  2436 00001F79 66A3[F0220000]      <2> 		mov [axcache], ax
  2437 00001F7F 668B1D[F2220000]    <2> 		mov bx, [endkeyrdpr]
  2438 00001F86 6639D8              <2> 		cmp ax, bx
  2439 00001F89 7432                <2> 		je nobackprintbuftxt2
  2440 00001F8B E8FD030000          <2> 		call prcharint
  2441 00001F90 BE[58AD0300]        <2> 		mov esi, buftxt2
  2442 00001F95 E85DFDFFFF          <2> 		call printquiet
  2443 00001F9A 66B82000            <2> 		mov ax, " "
  2444 00001F9E E801040000          <2> 		call prcharq
  2445 00001FA3 66B80800            <2> 		mov ax, 8
  2446 00001FA7 81FE[58AD0300]      <2> 		cmp esi, buftxt2
  2447 00001FAD 740E                <2> 		je nobackprintbuftxt2
  2448                              <2> 	backprintbuftxt2:
  2449 00001FAF E8F0030000          <2> 		call prcharq
  2450 00001FB4 4E                  <2> 		dec esi
  2451 00001FB5 81FE[58AD0300]      <2> 		cmp esi, buftxt2
  2452 00001FBB 77F2                <2> 		ja backprintbuftxt2
  2453                              <2> 	nobackprintbuftxt2:
  2454 00001FBD 663D0A00            <2> 		cmp ax, 10
  2455 00001FC1 7405                <2> 		je nonobackprint
  2456 00001FC3 E8C5030000          <2> 		call prcharint
  2457                              <2> 	nonobackprint:
  2458 00001FC8 5E                  <2> 		pop esi
  2459 00001FC9 3B35[00230000]      <2> 		cmp esi, [endbufferrdpr]
  2460 00001FCF 0F8319000000        <2> 		jae near donerdprinc
  2461 00001FD5 66A1[F0220000]      <2> 		mov ax, [axcache]
  2462 00001FDB 8A25[F2220000]      <2> 		mov ah, [endkeyrdpr]
  2463 00001FE1 38E0                <2> 		cmp al, ah
  2464 00001FE3 0F859EFEFFFF        <2> 		jne rdprintb
  2465 00001FE9 E901000000          <2> 		jmp donerdprint
  2466                              <2> 	donerdprinc:
  2467 00001FEE 46                  <2> 		inc esi
  2468                              <2> 	donerdprint:
  2469 00001FEF 4E                  <2> 		dec esi
  2470 00001FF0 BF[58AD0300]        <2> 		mov edi, buftxt2
  2471                              <2> 	copylaterstuff:
  2472 00001FF5 8A07                <2> 		mov al, [edi]
  2473 00001FF7 3C00                <2> 		cmp al, 0
  2474 00001FF9 7406                <2> 		je nocopylaterstuff
  2475 00001FFB 8806                <2> 		mov [esi], al
  2476 00001FFD 47                  <2> 		inc edi
  2477 00001FFE 46                  <2> 		inc esi
  2478 00001FFF EBF4                <2> 		jmp copylaterstuff
  2479                              <2> 	nocopylaterstuff:
  2480 00002001 C60600              <2> 		mov byte [esi], 0
  2481 00002004 E80B000000          <2> 		call clearbuftxt2
  2482 00002009 89F1                <2> 		mov ecx, esi
  2483 0000200B 8B3D[F6220000]      <2> 		mov edi, [firstesirdpr]
  2484 00002011 29F9                <2> 		sub ecx, edi
  2485 00002013 C3                  <2> 		ret
  2486                              <2> 	
  2487                              <2> 	clearbuftxt2:
  2488 00002014 30C0                <2> 		xor al, al
  2489 00002016 BF[58AD0300]        <2> 		mov edi, buftxt2
  2490                              <2> 	clearbuftxt2lp:
  2491 0000201B 8807                <2> 		mov [edi], al
  2492 0000201D 47                  <2> 		inc edi
  2493 0000201E 81FF[58B10300]      <2> 		cmp edi, buftxt
  2494 00002024 75F5                <2> 		jne clearbuftxt2lp
  2495 00002026 C3                  <2> 		ret
  2496                              <2> 	
  2497                              <2> 	rdprintb2:
  2498 00002027 E839080000          <2> 		call termcopy
  2499 0000202C E956FEFFFF          <2> 		jmp rdprintb
  2500                              <2> 	
  2501                              <2> 	rdprhome:
  2502 00002031 3B35[FC220000]      <2> 		cmp esi, [buftxtloc]
  2503 00002037 0F84EAFFFFFF        <2> 		je near rdprintb2
  2504 0000203D BF[58AD0300]        <2> 		mov edi, buftxt2
  2505 00002042 8A07                <2> 		mov al, [edi]
  2506 00002044 E879020000          <2> 		call shiftbuftxt2
  2507 00002049 E856030000          <2> 		call prcharq
  2508 0000204E EBE1                <2> 		jmp rdprhome
  2509                              <2> 		
  2510                              <2> 	rdprend:
  2511 00002050 BF[58AD0300]        <2> 		mov edi, buftxt2
  2512 00002055 8A07                <2> 		mov al, [edi]
  2513 00002057 3C00                <2> 		cmp al, 0
  2514 00002059 0F84C8FFFFFF        <2> 		je near rdprintb2
  2515 0000205F 8806                <2> 		mov [esi], al
  2516 00002061 E849000000          <2> 		call shiftbuftxt2lft
  2517 00002066 E839030000          <2> 		call prcharq
  2518 0000206B EBE3                <2> 		jmp rdprend
  2519                              <2> 	
  2520                              <2> 	rdprleft:
  2521 0000206D 3B35[FC220000]      <2> 		cmp esi, [buftxtloc]
  2522 00002073 0F840EFEFFFF        <2> 		je near rdprintb
  2523 00002079 BF[58AD0300]        <2> 		mov edi, buftxt2
  2524 0000207E 8A07                <2> 		mov al, [edi]
  2525 00002080 E83D020000          <2> 		call shiftbuftxt2
  2526 00002085 E803030000          <2> 		call prcharint
  2527 0000208A E9F8FDFFFF          <2> 		jmp rdprintb
  2528                              <2> 		
  2529                              <2> 	rdprright:
  2530 0000208F BF[58AD0300]        <2> 		mov edi, buftxt2
  2531 00002094 8A07                <2> 		mov al, [edi]
  2532 00002096 3C00                <2> 		cmp al, 0
  2533 00002098 0F84E9FDFFFF        <2> 		je near rdprintb
  2534 0000209E 8806                <2> 		mov [esi], al
  2535 000020A0 E80A000000          <2> 		call shiftbuftxt2lft
  2536 000020A5 E8E3020000          <2> 		call prcharint
  2537 000020AA E9D8FDFFFF          <2> 		jmp rdprintb
  2538                              <2> 		
  2539                              <2> 	shiftbuftxt2lft:
  2540 000020AF 55                  <2> 		push ebp
  2541 000020B0 89FD                <2> 		mov ebp, edi
  2542                              <2> 	.lp:
  2543 000020B2 3C00                <2> 		cmp al, 0
  2544 000020B4 7408                <2> 		je noshiftbuftxt2lft
  2545 000020B6 47                  <2> 		inc edi
  2546 000020B7 8A07                <2> 		mov al, [edi]
  2547 000020B9 8847FF              <2> 		mov [edi - 1], al
  2548 000020BC EBF4                <2> 		jmp .lp
  2549                              <2> 	noshiftbuftxt2lft:
  2550 000020BE 8A4500              <2> 		mov al, [ebp]
  2551 000020C1 5D                  <2> 		pop ebp
  2552 000020C2 3CC0                <2> 		cmp al, 0xC0
  2553 000020C4 7304                <2> 		jae .nofix
  2554 000020C6 3C80                <2> 		cmp al, 0x80
  2555 000020C8 73E5                <2> 		jae shiftbuftxt2lft
  2556                              <2> 	.nofix:
  2557 000020CA 8A06                <2> 		mov al, [esi]
  2558 000020CC 30E4                <2> 		xor ah, ah
  2559 000020CE 46                  <2> 		inc esi
  2560 000020CF 668B1D[F4220000]    <2> 		mov bx, [modkeyrdpr]
  2561 000020D6 C3                  <2> 		ret
  2562                              <2> 		
  2563                              <2> 	rdprdownbck:
  2564 000020D7 FECC                <2> 		dec ah
  2565 000020D9 8825[FA220000]      <2> 		mov [commandedit], ah
  2566 000020DF E88D000000          <2> 		call rdprbckspc
  2567 000020E4 E99EFDFFFF          <2> 		jmp rdprintb
  2568                              <2> 	
  2569                              <2> 	rdprdown:
  2570 000020E9 8A25[FA220000]      <2> 		mov ah, [commandedit]
  2571 000020EF 80FC01              <2> 		cmp ah, 1
  2572 000020F2 0F868FFDFFFF        <2> 		jbe near rdprintb
  2573 000020F8 8B3D[0A630500]      <2> 		mov edi, [commandsentered]
  2574 000020FE 3B3D[06630500]      <2> 		cmp edi, [commandlistentries]
  2575 00002104 7618                <2> 		jbe .nofix
  2576 00002106 8105[06630500]0200- <2> 		add dword [commandlistentries], 2
  2577 0000210E 0000                <2>
  2578 00002110 3B3D[06630500]      <2> 		cmp edi, [commandlistentries]
  2579 00002116 7706                <2> 		ja .nofix
  2580 00002118 893D[06630500]      <2> 		mov [commandlistentries], edi
  2581                              <2> 	.nofix:
  2582 0000211E 80FC02              <2> 		cmp ah, 2
  2583 00002121 74B4                <2> 		je rdprdownbck
  2584 00002123 80EC02              <2> 		sub ah, 2
  2585 00002126 8825[FA220000]      <2> 		mov [commandedit], ah
  2586                              <2> 		
  2587                              <2> 	rdprup:
  2588 0000212C 3805[FA220000]      <2> 		cmp [commandedit], al
  2589 00002132 0F844FFDFFFF        <2> 		je near rdprintb
  2590 00002138 813D[06630500]0000- <2> 		cmp dword [commandlistentries], 0
  2591 00002140 0000                <2>
  2592 00002142 0F843FFDFFFF        <2> 		je near rdprintb
  2593 00002148 FF0D[06630500]      <2> 		dec dword [commandlistentries]
  2594                              <2> 	.lp:
  2595 0000214E BF[58AD0300]        <2> 		mov edi, buftxt2
  2596 00002153 8A07                <2> 		mov al, [edi]
  2597 00002155 3C00                <2> 		cmp al, 0
  2598 00002157 740E                <2> 		je .start
  2599 00002159 8806                <2> 		mov [esi], al
  2600 0000215B E84FFFFFFF          <2> 		call shiftbuftxt2lft
  2601 00002160 E83F020000          <2> 		call prcharq
  2602 00002165 EBE7                <2> 		jmp .lp
  2603                              <2> 	.start:
  2604 00002167 E805000000          <2> 		call rdprbckspc
  2605 0000216C E948000000          <2> 		jmp getcurrentcommandstr
  2606                              <2> 	rdprbckspc:
  2607 00002171 3B35[FC220000]      <2> 		cmp esi, [buftxtloc]
  2608 00002177 7432                <2> 		je nordprupbck
  2609                              <2> 	rdprupbckspclp:
  2610 00002179 66B80800            <2> 		mov ax, 8
  2611 0000217D 668B1D[F4220000]    <2> 		mov bx, [modkeyrdpr]
  2612 00002184 E81B020000          <2> 		call prcharq
  2613 00002189 66B82000            <2> 		mov ax, ' '
  2614 0000218D E812020000          <2> 		call prcharq
  2615 00002192 66B80800            <2> 		mov ax, 8
  2616 00002196 E809020000          <2> 		call prcharq
  2617 0000219B 4E                  <2> 		dec esi
  2618 0000219C 3B35[FC220000]      <2> 		cmp esi, [buftxtloc]
  2619 000021A2 7402                <2> 		je nordprupbck2
  2620 000021A4 EBD3                <2> 		jmp rdprupbckspclp
  2621                              <2> 	nordprupbck2:
  2622 000021A6 E8BA060000          <2> 		call termcopy
  2623                              <2> 	nordprupbck:
  2624 000021AB 8B3D[02630500]      <2> 		mov edi, [commandbufpos]
  2625 000021B1 81C7[0E630500]      <2> 		add edi, commandbuf
  2626 000021B7 4F                  <2> 		dec edi
  2627 000021B8 C3                  <2> 		ret
  2628                              <2> 	getcurrentcommandstr:
  2629 000021B9 8A25[FA220000]      <2> 		mov ah, [commandedit]
  2630 000021BF FE05[FA220000]      <2> 		inc byte [commandedit]
  2631                              <2> 	getccmdlp:
  2632 000021C5 4F                  <2> 		dec edi
  2633 000021C6 8A07                <2> 		mov al, [edi]
  2634 000021C8 81FF[0E630500]      <2> 		cmp edi, commandbuf
  2635 000021CE 7231                <2> 		jb getcmdresetcommandbuf
  2636 000021D0 81EF[0E630500]      <2> 		sub edi, commandbuf
  2637 000021D6 3B3D[02630500]      <2> 		cmp edi, [commandbufpos]
  2638 000021DC 0F84A5FCFFFF        <2> 		je near rdprintb
  2639 000021E2 81C7[0E630500]      <2> 		add edi, commandbuf
  2640 000021E8 3C00                <2> 		cmp al, 0
  2641 000021EA 75D9                <2> 		jne getccmdlp
  2642 000021EC FECC                <2> 		dec ah
  2643 000021EE 80FC00              <2> 		cmp ah, 0
  2644 000021F1 77D2                <2> 		ja getccmdlp
  2645 000021F3 47                  <2> 		inc edi
  2646 000021F4 81FF[0E730500]      <2> 		cmp edi, commandbufend
  2647 000021FA 770D                <2> 		ja fixcmdbufb4morerdpr
  2648 000021FC E915000000          <2> 		jmp morerdprup
  2649                              <2> 	getcmdresetcommandbuf:
  2650 00002201 BF[0E730500]        <2> 		mov edi, commandbufend
  2651 00002206 47                  <2> 		inc edi
  2652 00002207 EBBC                <2> 		jmp getccmdlp
  2653                              <2> 	fixcmdbufb4morerdpr:
  2654 00002209 4F                  <2> 		dec edi
  2655 0000220A 81EF[0E730500]      <2> 		sub edi, commandbufend
  2656 00002210 81C7[0E630500]      <2> 		add edi, commandbuf
  2657                              <2> 	morerdprup:
  2658 00002216 8A07                <2> 		mov al, [edi]
  2659 00002218 47                  <2> 		inc edi
  2660 00002219 81EF[0E630500]      <2> 		sub edi, commandbuf
  2661 0000221F 3C00                <2> 		cmp al, 0
  2662 00002221 0F8400FEFFFF        <2> 		je near rdprintb2
  2663 00002227 3B3D[02630500]      <2> 		cmp edi, [commandbufpos]
  2664 0000222D 0F83F4FDFFFF        <2> 		jae near rdprintb2
  2665 00002233 81C7[0E630500]      <2> 		add edi, commandbuf
  2666 00002239 8806                <2> 		mov [esi], al
  2667 0000223B 46                  <2> 		inc esi
  2668 0000223C 57                  <2> 		push edi
  2669 0000223D 668B1D[F4220000]    <2> 		mov bx, [modkeyrdpr]
  2670 00002244 30E4                <2> 		xor ah, ah
  2671 00002246 E859010000          <2> 		call prcharq
  2672 0000224B 5F                  <2> 		pop edi
  2673 0000224C 81FF[0E730500]      <2> 		cmp edi, commandbufend
  2674 00002252 76C2                <2> 		jbe morerdprup
  2675 00002254 BF[0E630500]        <2> 		mov edi, commandbuf
  2676 00002259 EBBB                <2> 		jmp morerdprup
  2677                              <2> 
  2678                              <2> 	rdprdel:
  2679 0000225B BF[58AD0300]        <2> 		mov edi, buftxt2
  2680 00002260 8A07                <2> 		mov al, [edi]
  2681 00002262 3C00                <2> 		cmp al, 0
  2682 00002264 0F841DFCFFFF        <2> 		je near rdprintb
  2683 0000226A 8806                <2> 		mov [esi], al
  2684 0000226C 3C80                <2> 		cmp al, 0x80
  2685 0000226E 7216                <2> 		jb .fn
  2686                              <2> 	.lp:
  2687 00002270 46                  <2> 		inc esi
  2688 00002271 47                  <2> 		inc edi
  2689 00002272 8A07                <2> 		mov al, [edi]
  2690 00002274 3C00                <2> 		cmp al, 0
  2691 00002276 0F840BFCFFFF        <2> 		je near rdprintb
  2692 0000227C 8806                <2> 		mov [esi], al
  2693 0000227E 3C80                <2> 		cmp al, 0x80
  2694 00002280 7204                <2> 		jb .fn
  2695 00002282 3CC0                <2> 		cmp al, 0xC0
  2696 00002284 72EA                <2> 		jb .lp
  2697                              <2> 	.fn:
  2698 00002286 E824FEFFFF          <2> 		call shiftbuftxt2lft
  2699 0000228B E814010000          <2> 		call prcharq
  2700                              <2> 		
  2701                              <2> 	rdprbscheck:
  2702 00002290 3B35[F6220000]      <2> 		cmp esi, [firstesirdpr]
  2703 00002296 0F86EBFBFFFF        <2> 		jbe near rdprintb
  2704                              <2> 	goodbscheck:
  2705 0000229C 4E                  <2> 		dec esi
  2706 0000229D 8A46FF              <2> 		mov al, [esi - 1]
  2707 000022A0 C60600              <2> 		mov byte [esi], 0
  2708 000022A3 3CC0                <2> 		cmp al, 0xC0
  2709 000022A5 7309                <2> 		jae .onemore
  2710 000022A7 3C80                <2> 		cmp al, 0x80
  2711 000022A9 73F1                <2> 		jae goodbscheck
  2712 000022AB E904000000          <2> 		jmp .nomore
  2713                              <2> 	.onemore:
  2714 000022B0 4E                  <2> 		dec esi
  2715 000022B1 C60600              <2> 		mov byte [esi], 0		
  2716                              <2> 	.nomore:
  2717 000022B4 668B1D[F4220000]    <2> 		mov bx, [modkeyrdpr]
  2718 000022BB B008                <2> 		mov al, 8
  2719 000022BD E99FFCFFFF          <2> 		jmp bscheckequal
  2720                              <2> 		
  2721                              <2> 	shiftbuftxt2:
  2722 000022C2 55                  <2> 		push ebp
  2723 000022C3 89FD                <2> 		mov ebp, edi
  2724                              <2> 	.lp:
  2725 000022C5 3C00                <2> 		cmp al, 0
  2726 000022C7 7409                <2> 		je noshiftbuftxt2
  2727 000022C9 47                  <2> 		inc edi
  2728 000022CA 8A27                <2> 		mov ah, [edi]
  2729 000022CC 8807                <2> 		mov [edi], al
  2730 000022CE 88E0                <2> 		mov al, ah
  2731 000022D0 EBF3                <2> 		jmp .lp
  2732                              <2> 	noshiftbuftxt2:
  2733 000022D2 8A4500              <2> 		mov al, [ebp]
  2734 000022D5 5D                  <2> 		pop ebp
  2735 000022D6 3CC0                <2> 		cmp al, 0xC0
  2736 000022D8 7304                <2> 		jae .nofix
  2737 000022DA 3C80                <2> 		cmp al, 0x80
  2738 000022DC 73E4                <2> 		jae shiftbuftxt2
  2739                              <2> 	.nofix:
  2740 000022DE BF[58AD0300]        <2> 		mov edi, buftxt2
  2741 000022E3 4E                  <2> 		dec esi
  2742 000022E4 8A06                <2> 		mov al, [esi]
  2743 000022E6 8807                <2> 		mov [edi], al
  2744 000022E8 C60600              <2> 		mov byte [esi], 0
  2745 000022EB 66B80800            <2> 		mov ax, 8
  2746 000022EF C3                  <2> 		ret
  2747                              <2> 		
  2748 000022F0 0000                <2> axcache dw 0
  2749 000022F2 0000                <2> endkeyrdpr dw 0
  2750 000022F4 0000                <2> modkeyrdpr dw 0
  2751 000022F6 00000000            <2> firstesirdpr dd 0
  2752 000022FA 00                  <2> commandedit db 0
  2753 000022FB 00                  <2> txtmask db 0
  2754 000022FC 00000000            <2> buftxtloc dd 0
  2755 00002300 00000000            <2> endbufferrdpr dd 0
  2756 00002304 082000              <2> backcursor db 8," ",0
  2757                              <1> 	%include 'source/interrupts/5_readchar.asm'
  2758                              <2> readchar:
  2759 00002307 E807000000          <2> 	call rdcharint
  2760 0000230C E98BDFFFFF          <2> 	jmp timerinterrupt
  2761                              <2> getchar:
  2762 00002311 30C0                <2> 	xor al, al
  2763                              <2> 	rdcharint:		;get char, if al is 0, wait for key
  2764 00002313 66C705[75230000]01- <2> 		mov word [trans], 1
  2765 0000231B 00                  <2>
  2766 0000231C 3C00                <2> 		cmp al, 0
  2767 0000231E 7509                <2> 		jne transcheck
  2768 00002320 66C705[75230000]00- <2> 		mov word [trans], 0
  2769 00002328 00                  <2>
  2770                              <2> 	transcheck:
  2771                              <2> 	%ifdef io.serial
  2772                              <2> 		call serial.receive
  2773                              <2> 		xor ah, ah
  2774                              <2> 		cmp al, 13
  2775                              <2> 		je rdenter
  2776                              <2> 	%else
  2777 00002329 E80E360000          <2> 		call getkey
  2778 0000232E 66A1[73230000]      <2> 		mov ax, [lastkey + 2]
  2779 00002334 663D1C00            <2> 		cmp ax, 0x1C
  2780 00002338 7425                <2> 		je rdenter
  2781                              <2> 	%endif
  2782 0000233A 66A1[71230000]      <2> 		mov ax, [lastkey]
  2783 00002340 668B1D[75230000]    <2> 		mov bx, [trans]
  2784 00002347 803D[1A590000]E0    <2> 		cmp byte [specialkey], 0xE0
  2785 0000234E 7500                <2> 		jne nospecialtrans
  2786                              <2> 	nospecialtrans:
  2787 00002350 6609C3              <2> 		or bx, ax
  2788 00002353 6681FB0000          <2> 		cmp bx, 0
  2789 00002358 74CF                <2> 		je transcheck
  2790 0000235A E90C000000          <2> 		jmp rdend
  2791                              <2> 	rdenter:
  2792 0000235F C1E010              <2> 		shl eax, 16
  2793 00002362 66B80A00            <2> 		mov ax, 10
  2794 00002366 A3[71230000]        <2> 		mov [lastkey], eax
  2795                              <2> 	rdend:
  2796 0000236B A1[71230000]        <2> 		mov eax, [lastkey]
  2797 00002370 C3                  <2> 		ret
  2798                              <2> 		
  2799 00002371 00000000            <2> lastkey dd 0
  2800 00002375 0000                <2> trans dw 0
  2801                              <1> 	%include 'source/interrupts/6_prntchar.asm'
  2802                              <2> prntchar:
  2803 00002377 30E4                <2> 	xor ah, ah ;this kills unicode from the outside unfortunately
  2804                              <2> %ifdef io.serial
  2805                              <2> 	call prcharint
  2806                              <2> 	jmp timerinterrupt
  2807                              <2> prcharint:	
  2808                              <2> prcharq:
  2809                              <2> 	call serial.send
  2810                              <2> 	ret
  2811                              <2> %else
  2812 00002379 38FB                <2> cmp bl, bh
  2813 0000237B 740A                <2> je prchar.notimer
  2814 0000237D E80B000000          <2> call prcharint
  2815 00002382 E915DFFFFF          <2> jmp timerinterrupt
  2816                              <2> prchar.notimer:
  2817 00002387 E818000000          <2> 	call prcharq
  2818 0000238C CF                  <2> 	iret
  2819                              <2> 	
  2820                              <2> prcharint:	;print char, char in ax, modifier in bx, if ecx is eax then termcopy will not happen, will run termcopy if called as is
  2821 0000238D 663DFFFE            <2> 	cmp ax, 0xFEFF
  2822 00002391 740E                <2> 	je .ret
  2823 00002393 39C1                <2> 	cmp ecx, eax
  2824 00002395 740D                <2> 	je prcharq
  2825 00002397 E808000000          <2> 	call prcharq
  2826 0000239C E8C4040000          <2> 	call termcopy
  2827                              <2> .ret:
  2828 000023A1 C3                  <2> 	ret
  2829 000023A2 00                  <2> termguion db 0
  2830 000023A3 00                  <2> termcopyon db 0
  2831                              <2> prcharq:
  2832 000023A4 C1E310              <2> 	shl ebx, 16
  2833 000023A7 6689C3              <2> 	mov bx, ax
  2834 000023AA 89D8                <2> 	mov eax, ebx
  2835 000023AC A3[99250000]        <2> 	mov [charbuf], eax
  2836 000023B1 8B1D[91250000]      <2> 	mov ebx, [videobufpos]
  2837 000023B7 BF[6EB80300]        <2> 	mov edi, videobuf
  2838 000023BC 01DF                <2> 	add edi, ebx
  2839 000023BE A1[70280000]        <2> 	mov eax, [removedvideo]
  2840 000023C3 8907                <2> 	mov [edi], eax
  2841 000023C5 A1[99250000]        <2> 	mov eax, [charbuf]
  2842 000023CA 31D2                <2> 	xor edx, edx
  2843 000023CC 668B15[95250000]    <2> 	mov dx, [charpos]
  2844 000023D3 31C9                <2> 	xor ecx, ecx
  2845 000023D5 668B0D[97250000]    <2> 	mov cx, [charxy]
  2846 000023DC 663D0900            <2> 	cmp ax, 9
  2847 000023E0 0F8479000000        <2> 	je near prtab
  2848 000023E6 663D0D00            <2> 	cmp ax, 13		;I am phasing this out-it is used by windows but not unix based systems
  2849 000023EA 0F849C000000        <2> 	je near prcr
  2850 000023F0 663D0A00            <2> 	cmp ax, 10
  2851 000023F4 0F84E5000000        <2> 	je near prnlcr
  2852 000023FA 663D0800            <2> 	cmp ax, 8
  2853 000023FE 0F8499000000        <2> 	je near prbs
  2854 00002404 663DFF00            <2> 	cmp ax, 255		;null character
  2855 00002408 0F8424000000        <2> 	je near donescr
  2856 0000240E 663D0030            <2> 	cmp ax, (fontend - fonts)/16
  2857 00002412 0F8341000000        <2> 	jae near prnofont
  2858                              <2> donepr:
  2859 00002418 8907                <2> 	mov [edi], eax
  2860 0000241A 81C704000000        <2> 	add edi, 4
  2861 00002420 FEC2                <2> 	inc dl
  2862                              <2> donecrnl:
  2863 00002422 38CA                <2> 	cmp dl, cl
  2864 00002424 0F83D9000000        <2> 	jae near preol
  2865                              <2> doneeol:
  2866 0000242A 38EE                <2> 	cmp dh, ch
  2867 0000242C 0F83EE000000        <2> 	jae near prscr	
  2868                              <2> donescr:
  2869 00002432 89FB                <2> 	mov ebx, edi
  2870 00002434 8B07                <2> 	mov eax, [edi]
  2871 00002436 A3[70280000]        <2> 	mov [removedvideo], eax
  2872 0000243B 81EB[6EB80300]      <2> 	sub ebx, videobuf
  2873 00002441 891D[91250000]      <2> 	mov [videobufpos], ebx
  2874 00002447 668915[95250000]    <2> 	mov [charpos], dx
  2875 0000244E A1[99250000]        <2> 	mov eax, [charbuf]
  2876 00002453 89C3                <2> 	mov ebx, eax
  2877 00002455 C1EB10              <2> 	shr ebx, 16
  2878 00002458 C3                  <2> 	ret
  2879                              <2> 	
  2880                              <2> 	prnofont:
  2881 00002459 66B80200            <2> 		mov ax, 2
  2882 0000245D EBB9                <2> 		jmp donepr
  2883                              <2> 	prtab:
  2884 0000245F 8B1D[8D250000]      <2> 		mov ebx, [linebeginpos]
  2885 00002465 81EF[6EB80300]      <2> 		sub edi, videobuf
  2886 0000246B 29DF                <2> 		sub edi, ebx
  2887 0000246D C1EF05              <2> 		shr edi, 5
  2888 00002470 C1E705              <2> 		shl edi, 5
  2889 00002473 81C720000000        <2> 		add edi, 32
  2890 00002479 C0EA03              <2> 		shr dl, 3
  2891 0000247C C0E203              <2> 		shl dl, 3
  2892 0000247F 80C208              <2> 		add dl, 8
  2893 00002482 81C7[6EB80300]      <2> 		add edi, videobuf
  2894 00002488 01DF                <2> 		add edi, ebx
  2895 0000248A EB96                <2> 		jmp donecrnl
  2896                              <2> 	
  2897                              <2> 	prcr:
  2898 0000248C 30D2                <2> 		xor dl, dl
  2899 0000248E BF[6EB80300]        <2> 		mov edi, videobuf
  2900 00002493 8B1D[8D250000]      <2> 		mov ebx, [linebeginpos]
  2901 00002499 01DF                <2> 		add edi, ebx
  2902 0000249B EB85                <2> 		jmp donecrnl
  2903                              <2> 			
  2904                              <2> 	prbs:
  2905 0000249D 8B1D[8D250000]      <2> 		mov ebx, [linebeginpos]
  2906 000024A3 80FA00              <2> 		cmp dl, 0
  2907 000024A6 7415                <2> 		je prbackline
  2908                              <2> 	prnobmr:
  2909 000024A8 891D[8D250000]      <2> 		mov [linebeginpos], ebx
  2910 000024AE FECA                <2> 		dec dl
  2911 000024B0 31C0                <2> 		xor eax, eax
  2912 000024B2 81EF04000000        <2> 		sub edi, 4
  2913 000024B8 E965FFFFFF          <2> 		jmp donecrnl
  2914                              <2> 	prbackline:
  2915 000024BD 6631DB              <2> 		xor bx, bx
  2916 000024C0 88CA                <2> 		mov dl, cl
  2917 000024C2 80FE00              <2> 		cmp dh, 0
  2918 000024C5 74E1                <2> 		je prnobmr
  2919 000024C7 8B1D[8D250000]      <2> 		mov ebx, [linebeginpos]
  2920 000024CD 6651                <2> 		push cx
  2921 000024CF 31C9                <2> 		xor ecx, ecx
  2922 000024D1 8A0C24              <2> 		mov cl, [esp]
  2923 000024D4 C1E102              <2> 		shl ecx, 2
  2924 000024D7 29CB                <2> 		sub ebx, ecx
  2925 000024D9 6659                <2> 		pop cx
  2926 000024DB FECE                <2> 		dec dh
  2927 000024DD EBC9                <2> 		jmp prnobmr
  2928                              <2> 		
  2929                              <2> 	prnlcr:
  2930 000024DF FEC6                <2> 		inc dh
  2931 000024E1 31DB                <2> 		xor ebx, ebx
  2932 000024E3 30D2                <2> 		xor dl, dl
  2933 000024E5 88CB                <2> 		mov bl, cl
  2934 000024E7 66C1E302            <2> 		shl bx, 2
  2935 000024EB BF[6EB80300]        <2> 		mov edi, videobuf
  2936 000024F0 031D[8D250000]      <2> 		add ebx, [linebeginpos]
  2937 000024F6 891D[8D250000]      <2> 		mov [linebeginpos], ebx
  2938 000024FC 01DF                <2> 		add edi, ebx
  2939 000024FE E91FFFFFFF          <2> 		jmp donecrnl
  2940                              <2> 		
  2941                              <2> 	preol:
  2942 00002503 30D2                <2> 		xor dl, dl
  2943 00002505 FEC6                <2> 		inc dh
  2944 00002507 31DB                <2> 		xor ebx, ebx
  2945 00002509 88CB                <2> 		mov bl, cl
  2946 0000250B 66C1E302            <2> 		shl bx, 2
  2947 0000250F 031D[8D250000]      <2> 		add ebx, [linebeginpos]
  2948 00002515 891D[8D250000]      <2> 		mov [linebeginpos], ebx
  2949 0000251B E90AFFFFFF          <2> 		jmp doneeol
  2950                              <2> 	prscr:
  2951 00002520 FECE                <2> 		dec dh
  2952 00002522 BF[6EB80300]        <2> 		mov edi, videobuf
  2953 00002527 31DB                <2> 		xor ebx, ebx
  2954 00002529 88CB                <2> 		mov bl, cl
  2955 0000252B 66C1E302            <2> 		shl bx, 2
  2956 0000252F 01FB                <2> 		add ebx, edi
  2957                              <2> 	intscrollloop:
  2958 00002531 8B03                <2> 		mov eax, [ebx]
  2959 00002533 8907                <2> 		mov [edi], eax
  2960 00002535 81C704000000        <2> 		add edi, 4
  2961 0000253B 81C304000000        <2> 		add ebx, 4
  2962 00002541 FEC9                <2> 		dec cl
  2963 00002543 80F900              <2> 		cmp cl, 0
  2964 00002546 75E9                <2> 		jne intscrollloop
  2965 00002548 8A0D[97250000]      <2> 		mov cl, [charxy]
  2966 0000254E FECD                <2> 		dec ch
  2967 00002550 80FD01              <2> 		cmp ch, 1
  2968 00002553 77DC                <2> 		ja intscrollloop
  2969 00002555 31C0                <2> 		xor eax, eax
  2970 00002557 81EF[6EB80300]      <2> 		sub edi, videobuf
  2971 0000255D 893D[8D250000]      <2> 		mov [linebeginpos], edi
  2972 00002563 81C7[6EB80300]      <2> 		add edi, videobuf
  2973 00002569 89FB                <2> 		mov ebx, edi
  2974                              <2> 	intloopclear:
  2975 0000256B 8903                <2> 		mov [ebx], eax
  2976 0000256D 81C304000000        <2> 		add ebx, 4
  2977 00002573 FEC9                <2> 		dec cl
  2978 00002575 80F900              <2> 		cmp cl, 0
  2979 00002578 75F1                <2> 		jne intloopclear
  2980 0000257A FECD                <2> 		dec ch
  2981 0000257C 80FD00              <2> 		cmp ch, 0
  2982 0000257F 75EA                <2> 		jne intloopclear
  2983 00002581 668B0D[97250000]    <2> 		mov cx, [charxy]
  2984 00002588 E9A5FEFFFF          <2> 		jmp donescr
  2985                              <2> 		
  2986 0000258D 00000000            <2> linebeginpos dd 0
  2987 00002591 00000000            <2> videobufpos: dd 0
  2988 00002595 0000                <2> charpos db 0,0
  2989 00002597 501E                <2> charxy db 80,30
  2990 00002599 00000000            <2> charbuf dd 0
  2991                              <2> %endif
  2992                              <1> 	%include 'source/interrupts/7_openfile.asm'
  2993                              <2> openfile:
  2994 0000259D E83D3D0000          <2> 	call loadfile
  2995 000025A2 E9F5DCFFFF          <2> 	jmp timerinterrupt
  2996                              <1> 	%include 'source/interrupts/9_num2str.asm'
  2997                              <2> num2str:
  2998 000025A7 3C00                <2> 	cmp al, 0
  2999 000025A9 750A                <2> 	jne num2strb
  3000 000025AB E8A10C0000          <2> 	call showdec
  3001 000025B0 E9E7DCFFFF          <2> 	jmp timerinterrupt
  3002                              <2> num2strb:
  3003 000025B5 E8CD0B0000          <2> 	call showhex
  3004 000025BA E9DDDCFFFF          <2> 	jmp timerinterrupt
  3005                              <1> 	%include 'source/interrupts/10_str2num.asm'
  3006                              <2> str2num:
  3007 000025BF 89F7                <2> 	mov edi, esi
  3008 000025C1 E86D0D0000          <2> 	call cnvrttxt	;the string goes into esi, number into ecx
  3009 000025C6 E9D1DCFFFF          <2> 	jmp timerinterrupt
  3010                              <2> 	
  3011                              <1> %ifdef threads.included
  3012                              <1> 	%include 'source/interrupts/11_forkthread.asm'
  3013                              <2> forkthread:
  3014                              <2> 			 ;esi is next thread's start address, if 0, fork current thread
  3015                              <2> 			;returns the PID of the new fork in ebx
  3016                              <2> ;WARNING:THIS WILL NOT WORK IN C UNTIL IT COPIES THE ENTIRE STACK
  3017 000025CB FA                  <2> 	cli
  3018 000025CC 60                  <2> 	pushad
  3019 000025CD 8925[9A260000]      <2> 	mov [.espold], esp
  3020 000025D3 C605[9B640000]01    <2> 	mov byte [threadson], 1
  3021 000025DA 8B1D[9C640000]      <2> 	mov ebx, [currentthread]
  3022 000025E0 C1E302              <2> 	shl ebx, 2
  3023 000025E3 89A3[0E730500]      <2> 	mov [threadlist + ebx], esp
  3024 000025E9 C1EB02              <2> 	shr ebx, 2
  3025 000025EC 81FB00000000        <2> 	cmp ebx, 0
  3026 000025F2 750C                <2> 	jne .simplestack
  3027 000025F4 BB[74960300]        <2> 	mov ebx, stackend
  3028 000025F9 29E3                <2> 	sub ebx, esp
  3029 000025FB E90B000000          <2> 	jmp .stackcalcdone
  3030                              <2> .simplestack:
  3031 00002600 C1E30A              <2> 	shl ebx, 10
  3032 00002603 81C3[0E870500]      <2> 	add ebx, stack1
  3033 00002609 29E3                <2> 	sub ebx, esp
  3034                              <2> .stackcalcdone:
  3035 0000260B 29DC                <2> 	sub esp, ebx
  3036 0000260D 81C4[0E870500]      <2> 	add esp, stack1
  3037 00002613 8B1D[97640000]      <2> 	mov ebx, [lastthread]
  3038 00002619 C1E308              <2> 	shl ebx, 8
  3039 0000261C 01DC                <2> 	add esp, ebx
  3040 0000261E 891D[9E260000]      <2> 	mov [.stackend], ebx
  3041                              <2> 
  3042 00002624 89E5                <2> 	mov ebp, esp
  3043 00002626 8B25[9A260000]      <2> 	mov esp, [.espold]
  3044                              <2> 
  3045 0000262C C1EB0A              <2> 	shr ebx, 10 ;get pid then push it
  3046 0000262F 895C2410            <2> 	mov [esp + 16], ebx ;set the old ebx to the new PID
  3047                              <2> 
  3048 00002633 31DB                <2> 	xor ebx, ebx
  3049                              <2> .stackcopy:
  3050 00002635 668B041C            <2> 	mov ax, [esp + ebx]
  3051 00002639 6689441D00          <2> 	mov [ebp + ebx], ax
  3052 0000263E 81C302000000        <2> 	add ebx, 2
  3053 00002644 3B1D[9E260000]      <2> 	cmp ebx, [.stackend]
  3054 0000264A 72E9                <2> 	jb .stackcopy
  3055                              <2> 
  3056 0000264C 31C0                <2> 	xor eax, eax
  3057 0000264E 668CC8              <2> 	mov ax, cs
  3058 00002651 89C2                <2> 	mov edx, eax
  3059 00002653 8B4C2428            <2> 	mov ecx, [esp + 40]
  3060 00002657 81C900020000        <2> 	or ecx, 0x200
  3061                              <2> 	
  3062 0000265D 81FE00000000        <2> 	cmp esi, 0
  3063 00002663 7504                <2> 	jne .nochangestack
  3064 00002665 8B742420            <2> 	mov esi, [esp + 32]
  3065                              <2> .nochangestack:
  3066 00002669 89F0                <2> 	mov eax, esi
  3067 0000266B 89EC                <2> 	mov esp, ebp
  3068                              <2> 
  3069 0000266D 89442420            <2> 	mov [esp + 32], eax
  3070 00002671 89542424            <2> 	mov [esp + 36], edx
  3071 00002675 894C2428            <2> 	mov [esp + 40], ecx
  3072                              <2> 
  3073 00002679 8B1D[97640000]      <2> 	mov ebx, [lastthread]
  3074 0000267F 89A3[0E730500]      <2> 	mov [threadlist + ebx], esp
  3075 00002685 81C304000000        <2> 	add ebx, 4
  3076 0000268B 891D[97640000]      <2> 	mov [lastthread], ebx
  3077 00002691 8B25[9A260000]      <2> 	mov esp, [.espold]
  3078 00002697 61                  <2> 	popad
  3079 00002698 FB                  <2> 	sti
  3080 00002699 CF                  <2> 	iret
  3081                              <2> 
  3082 0000269A 00000000            <2> .espold dd 0
  3083 0000269E 00000000            <2> .stackend dd 0
  3084                              <1> %endif
  3085                              <1> 	%include 'source/interrupts/12_gettime.asm'
  3086                              <2> gettime:
  3087 000026A2 A1[54020000]        <2> 	mov eax, [timeseconds]
  3088 000026A7 8B1D[58020000]      <2> 	mov ebx, [timenanoseconds]
  3089 000026AD 89D9                <2> 	mov ecx, ebx
  3090 000026AF C1E90A              <2> 	shr ecx, 10	;this is in microseconds
  3091 000026B2 E9E5DBFFFF          <2> 	jmp timerinterrupt
  3092                              <1> 	%include 'source/interrupts/13_settime.asm'
  3093                              <2> settime:
  3094 000026B7 A3[54020000]        <2> 	mov [timeseconds], eax
  3095 000026BC 891D[58020000]      <2> 	mov [timenanoseconds], ebx
  3096 000026C2 E9D5DBFFFF          <2> 	jmp timerinterrupt
  3097                              <2> 	
  3098                              <1> 	%include 'source/interrupts/14_runcmd.asm'
  3099                              <2> runcmd:
  3100 000026C7 BF[58B10300]        <2> 	mov edi, buftxt
  3101                              <2> cpcmd:
  3102 000026CC 8A06                <2> 	mov al, [esi]
  3103 000026CE 8807                <2> 	mov [edi], al
  3104 000026D0 46                  <2> 	inc esi
  3105 000026D1 47                  <2> 	inc edi
  3106 000026D2 3C00                <2> 	cmp al, 0
  3107 000026D4 75F6                <2> 	jne cpcmd
  3108 000026D6 E8AF070000          <2> 	call run
  3109 000026DB CF                  <2> 	iret
  3110                              <1> 	%include 'source/interrupts/15_proginfo.asm'
  3111                              <2> proginfo:
  3112                              <2> 	;mov ebx, variables
  3113 000026DC 8B35[602F0000]      <2> 	mov esi, [currentcommandloc]
  3114 000026E2 89F7                <2> 	mov edi, esi
  3115 000026E4 31C9                <2> 	xor ecx, ecx
  3116                              <2> getcommandzeroes:
  3117 000026E6 8A07                <2> 	mov al, [edi]
  3118 000026E8 47                  <2> 	inc edi
  3119 000026E9 3C3B                <2> 	cmp al, ';'
  3120 000026EB 740B                <2> 	je nomorezeroes
  3121 000026ED 3C00                <2> 	cmp al, 0
  3122 000026EF 7407                <2> 	je nomorezeroes
  3123 000026F1 3C20                <2> 	cmp al, ' '
  3124 000026F3 75F1                <2> 	jne getcommandzeroes
  3125 000026F5 41                  <2> 	inc ecx
  3126 000026F6 EBEE                <2> 	jmp getcommandzeroes
  3127                              <2> nomorezeroes:
  3128 000026F8 41                  <2> 	inc ecx
  3129 000026F9 4F                  <2> 	dec edi
  3130 000026FA 8B1D[E49C0300]      <2> 	mov ebx, [uid]
  3131 00002700 8B15[9C640000]      <2> 	mov edx, [currentthread]
  3132 00002706 CF                  <2> 	iret
  3133                              <2> 	
  3134                              <1> 	%include 'source/interrupts/16_hooksig.asm'
  3135                              <2> hooksig: ;hook code in ESI to signal in AL
  3136 00002707 3C00                <2> 	cmp al, 0
  3137 00002709 7507                <2> 	jne .quit	;only sig 0, the escape key, is handled, and only for one app
  3138                              <2> ;	xor ebx, ebx
  3139                              <2> ;	mov bl, al
  3140                              <2> ;	shl bl, 2
  3141 0000270B BF[D4960300]        <2> 	mov edi, sigtable
  3142 00002710 8937                <2> 	mov [edi], esi
  3143                              <2> .quit:
  3144 00002712 E985DBFFFF          <2> 	jmp timerinterrupt
  3145                              <1> %ifdef gui.included
  3146                              <1> 	%include 'source/interrupts/17_guiint.asm'
  3147                              <2> guiint:
  3148 00002717 3CFD                <2> 	cmp al, 253
  3149 00002719 0F8473000000        <2> 	je near .getinfo
  3150 0000271F 803D[64820000]01    <2> 	cmp byte [guion], 1
  3151 00002726 0F8550000000        <2> 	jne near .nogui
  3152 0000272C 3C00                <2> 	cmp al, 0
  3153 0000272E 0F844D000000        <2> 	je near .clear
  3154 00002734 3C01                <2> 	cmp al, 1
  3155 00002736 0F84A8000000        <2> 	je near .putpixel
  3156 0000273C 3C02                <2> 	cmp al, 2
  3157 0000273E 0F84AD000000        <2> 	je near .drawtext
  3158 00002744 3C03                <2> 	cmp al, 3
  3159 00002746 0F84C0000000        <2> 	je near .drawline
  3160 0000274C 3C04                <2> 	cmp al, 4
  3161 0000274E 0F84CB000000        <2> 	je near .drawcircle
  3162 00002754 3C05                <2> 	cmp al, 5
  3163 00002756 0F84D3000000        <2> 	je near .fillcircle
  3164 0000275C 3C06                <2> 	cmp al, 6
  3165 0000275E 0F84DB000000        <2> 	je near .drawsquare
  3166 00002764 3C07                <2> 	cmp al, 7
  3167 00002766 0F84E6000000        <2> 	je near .fillsquare
  3168 0000276C 3CFE                <2> 	cmp al, 254
  3169 0000276E 0F8446000000        <2> 	je near .setinfo
  3170 00002774 3CFF                <2> 	cmp al, 255
  3171 00002776 0F8443000000        <2> 	je near .reset
  3172                              <2> .nogui:
  3173 0000277C E91BDBFFFF          <2> 	jmp timerinterrupt
  3174                              <2> 
  3175                              <2> .clear:		;color in bx
  3176 00002781 66891D[816B0000]    <2> 	mov [background], bx
  3177                              <2> %ifdef gui.background
  3178                              <2> 	mov ebx, [backgroundimage]
  3179                              <2> 	cmp ebx, 0
  3180                              <2> 	je .clearit
  3181                              <2> 	mov dword [backgroundimage], 0
  3182                              <2> 	mov [.bgi], ebx
  3183                              <2> .clearit:
  3184                              <2> %endif
  3185 00002788 E8A8430000          <2> 	call guiclear
  3186 0000278D E90ADBFFFF          <2> 	jmp timerinterrupt
  3187                              <2> 	
  3188                              <2> .getinfo:	;puts screen size in (dx, cx), background color in bx, and will put other stuff in other places
  3189 00002792 31DB                <2> 	xor ebx, ebx
  3190 00002794 31C9                <2> 	xor ecx, ecx
  3191 00002796 31D2                <2> 	xor edx, edx
  3192 00002798 381D[64820000]      <2> 	cmp [guion], bl
  3193 0000279E 74DC                <2> 	je .nogui
  3194 000027A0 668B1D[816B0000]    <2> 	mov bx, [background]
  3195 000027A7 668B15[70540000]    <2> 	mov dx, [resolutionx]
  3196 000027AE 668B0D[72540000]    <2> 	mov cx, [resolutiony]
  3197 000027B5 E9E2DAFFFF          <2> 	jmp timerinterrupt
  3198                              <2> 	
  3199                              <2> .setinfo:	;does nothing yet. will get screen size in (dx, cx), background color in bx, and will put other stuff in other places
  3200 000027BA E9DDDAFFFF          <2> 	jmp timerinterrupt
  3201                              <2> .reset:		;resets the screen to the original settings
  3202 000027BF 66BBCF7B            <2> 	mov bx, background.original
  3203 000027C3 66891D[816B0000]    <2> 	mov [background], bx
  3204 000027CA 66BBFFFF            <2> 	mov bx, 0xFFFF
  3205 000027CE 66891D[3E720000]    <2> 	mov [colorfont2], bx
  3206                              <2> %ifdef gui.background
  3207                              <2> 	mov ebx, [backgroundimage]
  3208                              <2> 	cmp ebx, 0
  3209                              <2> 	jne .resetit
  3210                              <2> 	mov ebx, [.bgi]
  3211                              <2> 	mov [backgroundimage], ebx
  3212                              <2> .resetit:
  3213                              <2> %endif
  3214 000027D5 E85B430000          <2> 	call guiclear
  3215 000027DA E8A6430000          <2> 	call reloadallgraphics
  3216 000027DF E9B8DAFFFF          <2> 	jmp timerinterrupt
  3217                              <2> 
  3218                              <2> %ifdef gui.background
  3219                              <2> 	.bgi dd 0
  3220                              <2> %endif
  3221                              <2> 	
  3222                              <2> .putpixel:	;pixel location in (dx, cx), color in bx
  3223 000027E4 6689DE              <2> 	mov si, bx
  3224 000027E7 E8A8590000          <2> 	call putpixel
  3225 000027EC E9ABDAFFFF          <2> 	jmp timerinterrupt
  3226                              <2> 
  3227                              <2> .drawtext:	;background in di, foreground in bx, location in (dx,cx), string in esi
  3228 000027F1 66D1E2              <2> 	shl dx, 1
  3229 000027F4 66891D[3E720000]    <2> 	mov [colorfont2], bx
  3230 000027FB 66893D[816B0000]    <2> 	mov [background], di
  3231 00002802 E8CF490000          <2> 	call showstring2
  3232 00002807 E990DAFFFF          <2> 	jmp timerinterrupt
  3233                              <2> 
  3234                              <2> .drawline:	;color in bx, start in (dx,cx), end in (di,si)
  3235 0000280C 6689F0              <2> 	mov ax, si
  3236 0000280F 6689DE              <2> 	mov si, bx
  3237 00002812 6689FB              <2> 	mov bx, di
  3238 00002815 E8EF410000          <2> 	call drawline
  3239 0000281A E97DDAFFFF          <2> 	jmp timerinterrupt
  3240                              <2> 
  3241                              <2> .drawcircle: ;color in bx, radius in si, center in (dx,cx)
  3242 0000281F 6689F0              <2> 	mov ax, si
  3243 00002822 6689DE              <2> 	mov si, bx
  3244 00002825 E8683D0000          <2> 	call drawcircle
  3245 0000282A E96DDAFFFF          <2> 	jmp timerinterrupt
  3246                              <2> 
  3247                              <2> .fillcircle: ;color in bx, radius in si, center in (dx,cx)
  3248 0000282F 6689F0              <2> 	mov ax, si
  3249 00002832 6689DE              <2> 	mov si, bx
  3250 00002835 E86A3E0000          <2> 	call fillcircle
  3251 0000283A E95DDAFFFF          <2> 	jmp timerinterrupt
  3252                              <2> 	
  3253                              <2> .drawsquare: ;color in bx, start in (dx, cx), end in (di, si)
  3254 0000283F 6689F0              <2> 	mov ax, si
  3255 00002842 6689DE              <2> 	mov si, bx
  3256 00002845 6689FB              <2> 	mov bx, di
  3257 00002848 E808440000          <2> 	call drawsquare
  3258 0000284D E94ADAFFFF          <2> 	jmp timerinterrupt
  3259                              <2> 
  3260                              <2> .fillsquare: ;color in bx, start in (dx, cx), end in (di, si)
  3261 00002852 6689F0              <2> 	mov ax, si
  3262 00002855 6689DE              <2> 	mov si, bx
  3263 00002858 6689FB              <2> 	mov bx, di
  3264 0000285B E86A440000          <2> 	call fillsquare
  3265 00002860 E937DAFFFF          <2> 	jmp timerinterrupt
  3266                              <1> %endif
  3267                              <1> %ifdef sound.included
  3268                              <1> 	%include 'source/interrupts/18_soundint.asm'
  3269                              <1> %endif
  3270                              <1> %ifdef network.included
  3271                              <1> 	%include 'source/interrupts/19_netint.asm'
  3272                              <1> %endif
  3273                              <1> 
  3274                              <1> termcopy:
  3275                              <1> %ifdef io.serial
  3276                              <1> 	ret
  3277                              <1> %else
  3278                              <1> %ifdef terminal.vsync
  3279                              <1> 	mov byte [termcopyneeded], 1
  3280                              <1> 	ret
  3281                              <1> %else
  3282 00002865 E80A000000          <1> 	call newtermcopy
  3283 0000286A C3                  <1> 	ret
  3284                              <1> %endif
  3285 0000286B 00                  <1> 	termcopyneeded db 0
  3286 0000286C 00000000            <1> 	termcursorpos dd 0
  3287 00002870 00000000            <1> 	removedvideo dd 0
  3288                              <1> newtermcopy:
  3289 00002874 60                  <1> 	pusha
  3290 00002875 BF[6EB80300]        <1> 	mov edi, videobuf
  3291 0000287A 31DB                <1> 	xor ebx, ebx
  3292 0000287C 881D[6B280000]      <1> 	mov [termcopyneeded], bl
  3293 00002882 8B1D[91250000]      <1> 	mov ebx, [videobufpos]
  3294 00002888 01DF                <1> 	add edi, ebx
  3295 0000288A 893D[6C280000]      <1> 	mov [termcursorpos], edi
  3296 00002890 E8E2000000          <1> 	call switchtermcursor
  3297 00002895 803D[64820000]00    <1> 	cmp byte [guion], 0
  3298 0000289C 0F8420000000        <1> 	je near nowincopy
  3299                              <1> %ifdef gui.included
  3300 000028A2 C605[A5790000]00    <1> 	mov byte [mouseselecton], 0
  3301 000028A9 C605[A3230000]01    <1> 	mov byte [termcopyon], 1
  3302 000028B0 803D[A2230000]01    <1> 	cmp byte [termguion], 1
  3303 000028B7 0F84724E0000        <1> 	je near windowvideocopy
  3304                              <1> %endif
  3305 000028BD E9AE000000          <1> 	jmp nocopytermatall
  3306                              <1> nowincopy:
  3307 000028C2 BE00000A00          <1> 	mov esi, 0xA0000
  3308 000028C7 A1[35020000]        <1> 	mov eax, [basecache]
  3309 000028CC C1E004              <1> 	shl eax, 4
  3310 000028CF 29C6                <1> 	sub esi, eax
  3311 000028D1 BF[6EB80300]        <1> 	mov edi, videobuf
  3312 000028D6 31C9                <1> 	xor ecx, ecx
  3313 000028D8 668B0D[97250000]    <1> 	mov cx, [charxy]
  3314                              <1> nowincopy2:
  3315 000028DF 8B07                <1> 	mov eax, [edi]
  3316 000028E1 81C748D50000        <1> 	add edi, (videobuf2 - videobuf)
  3317 000028E7 8B1F                <1> 	mov ebx, [edi]
  3318 000028E9 8907                <1> 	mov [edi], eax
  3319 000028EB 81EF48D50000        <1> 	sub edi, (videobuf2 - videobuf)
  3320 000028F1 81C702000000        <1> 	add edi, 2
  3321 000028F7 39D8                <1> 	cmp eax, ebx
  3322 000028F9 744B                <1> 	je nopresentwinfont
  3323 000028FB 81EF02000000        <1> 	sub edi, 2
  3324 00002901 BD[AE840000]        <1> 	mov ebp, fonts
  3325 00002906 31C0                <1> 	xor eax, eax
  3326 00002908 668B07              <1> 	mov ax, [edi]
  3327 0000290B C1E004              <1> 	shl eax, 4
  3328 0000290E 01C5                <1> 	add ebp, eax
  3329 00002910 81C702000000        <1> 	add edi, 2
  3330 00002916 668B1F              <1> 	mov bx, [edi]
  3331 00002919 31D2                <1> 	xor edx, edx
  3332 0000291B 8A15[97250000]      <1> 	mov dl, [charxy]
  3333 00002921 C1C110              <1> 	rol ecx, 16
  3334 00002924 B110                <1> 	mov cl, 16
  3335                              <1> nowinfont:
  3336 00002926 8A4500              <1> 	mov al, [ebp]
  3337 00002929 D0C8                <1> 	ror al, 1
  3338 0000292B 80FB80              <1> 	cmp bl, 0x80
  3339 0000292E 7202                <1> 	jb notnotfont
  3340 00002930 F6D0                <1> 	not al
  3341                              <1> notnotfont:
  3342 00002932 8806                <1> 	mov [esi], al
  3343 00002934 01D6                <1> 	add esi, edx
  3344 00002936 45                  <1> 	inc ebp
  3345 00002937 FEC9                <1> 	dec cl
  3346 00002939 80F900              <1> 	cmp cl, 0
  3347 0000293C 75E8                <1> 	jne nowinfont
  3348 0000293E C1E204              <1> 	shl edx, 4
  3349 00002941 29D6                <1> 	sub esi, edx
  3350 00002943 C1C110              <1> 	rol ecx, 16
  3351                              <1> nopresentwinfont:
  3352 00002946 81C702000000        <1> 	add edi, 2
  3353 0000294C 46                  <1> 	inc esi
  3354 0000294D FEC9                <1> 	dec cl
  3355 0000294F 80F900              <1> 	cmp cl, 0
  3356 00002952 758B                <1> 	jne nowincopy2
  3357 00002954 8A0D[97250000]      <1> 	mov cl, [charxy]
  3358 0000295A 31D2                <1> 	xor edx, edx
  3359 0000295C 88CA                <1> 	mov dl, cl
  3360 0000295E 29D6                <1> 	sub esi, edx
  3361 00002960 C1E204              <1> 	shl edx, 4
  3362 00002963 01D6                <1> 	add esi, edx
  3363 00002965 FECD                <1> 	dec ch
  3364 00002967 80FD00              <1> 	cmp ch, 0
  3365 0000296A 0F856FFFFFFF        <1> 	jne nowincopy2
  3366                              <1> nocopytermatall:
  3367 00002970 E802000000          <1> 	call switchtermcursor
  3368 00002975 61                  <1> 	popa
  3369 00002976 C3                  <1> 	ret
  3370                              <1> 	
  3371                              <1> switchtermcursor:
  3372 00002977 8B3D[6C280000]      <1> 	mov edi, [termcursorpos]
  3373 0000297D 668B4702            <1> 	mov ax, [edi + 2]
  3374 00002981 668B1F              <1> 	mov bx, [edi]
  3375 00002984 663D8000            <1> 	cmp ax, 0x80
  3376 00002988 7209                <1> 	jb movlargecursorterm
  3377 0000298A 66B80700            <1> 	mov ax, 7
  3378 0000298E E904000000          <1> 	jmp movedcursorterm
  3379                              <1> movlargecursorterm:
  3380 00002993 66B8F000            <1> 	mov ax, 0xF0
  3381                              <1> movedcursorterm:
  3382 00002997 66894702            <1> 	mov [edi + 2], ax
  3383 0000299B 6681FB0000          <1> 	cmp bx, 0
  3384 000029A0 7507                <1> 	jne fixednocursorterm
  3385 000029A2 66BB2000            <1> 	mov bx, ' '
  3386 000029A6 66891F              <1> 	mov [edi], bx
  3387                              <1> fixednocursorterm:
  3388 000029A9 C3                  <1> 	ret
  3389                              <1> %endif
  3390                                      %include "source/dosints.asm"
  3391                              <1> int20h:
  3392 000029AA 66B8004C            <1> mov ax, 0x4C00
  3393                              <1> int21h:
  3394                              <1> dostosolleros:
  3395 000029AE 6650                <1> 	push ax
  3396 000029B0 66B83000            <1> 	mov ax, NEW_DATA_SEL
  3397 000029B4 8ED8                <1> 	mov ds, ax
  3398 000029B6 8EC0                <1> 	mov es, ax
  3399 000029B8 8EE0                <1> 	mov fs, ax
  3400 000029BA 66B82000            <1> 	mov ax, SYS_DATA_SEL
  3401 000029BE 8EE8                <1> 	mov gs, ax
  3402 000029C0 6658                <1> 	pop ax
  3403 000029C2 9C                  <1> 	pushf
  3404 000029C3 60                  <1> 	pusha
  3405 000029C4 80FC01              <1> 	cmp ah, 1
  3406 000029C7 0F8449000000        <1> 	je near dosgchar
  3407 000029CD 80FC02              <1> 	cmp ah, 2
  3408 000029D0 0F8447000000        <1> 	je near doswchar
  3409 000029D6 80FC09              <1> 	cmp ah, 9
  3410 000029D9 0F844B000000        <1> 	je near dosprintstr
  3411 000029DF 80FC0A              <1> 	cmp ah, 0xA
  3412 000029E2 0F845A000000        <1> 	je near dosgetstr
  3413 000029E8 80FC2B              <1> 	cmp ah, 0x2B
  3414 000029EB 0F8496000000        <1> 	je near dosgetdate
  3415 000029F1 80FC2C              <1> 	cmp ah, 0x2C
  3416 000029F4 0F84B0000000        <1> 	je near dosgettime
  3417 000029FA 80FC4C              <1> 	cmp ah, 0x4C
  3418 000029FD 0F84C5000000        <1> 	je near dosexit
  3419                              <1> backtodos:
  3420 00002A03 61                  <1> 	popa
  3421 00002A04 9D                  <1> 	popf
  3422 00002A05 6650                <1> 	push ax
  3423 00002A07 66B85000            <1> 	mov ax, DOS_DATA_SEL
  3424 00002A0B 8ED8                <1> 	mov ds, ax
  3425 00002A0D 8EC0                <1> 	mov es, ax
  3426 00002A0F 8EE0                <1> 	mov fs, ax
  3427 00002A11 8EE8                <1> 	mov gs, ax
  3428 00002A13 6658                <1> 	pop ax
  3429 00002A15 CF                  <1> 	iret
  3430                              <1> 
  3431                              <1> dosgchar:
  3432 00002A16 E8F6F8FFFF          <1> 	call getchar
  3433 00002A1B EBE6                <1> 	jmp backtodos
  3434                              <1> 	
  3435                              <1> doswchar:
  3436 00002A1D 88D0                <1> 	mov al, dl
  3437 00002A1F 30E4                <1> 	xor ah, ah
  3438 00002A21 B307                <1> 	mov bl, 7
  3439 00002A23 E865F9FFFF          <1> 	call prcharint
  3440 00002A28 EBD9                <1> 	jmp backtodos
  3441                              <1> 	
  3442                              <1> dosprintstr:
  3443 00002A2A 31F6                <1> 	xor esi, esi
  3444 00002A2C 6689D6              <1> 	mov si, dx
  3445 00002A2F 81C600004000        <1> 	add esi, dosprogloc
  3446 00002A35 66B82400            <1> 	mov ax, "$"
  3447 00002A39 B307                <1> 	mov bl, 7
  3448 00002A3B E8DDF2FFFF          <1> 	call printint
  3449 00002A40 EBC1                <1> 	jmp backtodos
  3450                              <1> 	
  3451                              <1> dosgetstr:
  3452 00002A42 31F6                <1> 	xor esi, esi
  3453 00002A44 6689D6              <1> 	mov si, dx
  3454 00002A47 81C600004000        <1> 	add esi, dosprogloc
  3455 00002A4D B900000000          <1> 	mov ecx, 0
  3456 00002A52 8A0E                <1> 	mov cl, [esi]
  3457 00002A54 81C602000000        <1> 	add esi, 2
  3458 00002A5A 89F7                <1> 	mov edi, esi
  3459 00002A5C 8935[832A0000]      <1> 	mov [stringstart], esi
  3460 00002A62 01CF                <1> 	add edi, ecx
  3461 00002A64 B00A                <1> 	mov al, 10
  3462 00002A66 B307                <1> 	mov bl, 7
  3463 00002A68 E8F0F3FFFF          <1> 	call rdprintdos
  3464 00002A6D 89F1                <1> 	mov ecx, esi
  3465 00002A6F 2B0D[832A0000]      <1> 	sub ecx, [stringstart]
  3466 00002A75 8B35[832A0000]      <1> 	mov esi, [stringstart]
  3467 00002A7B 884EFF              <1> 	mov [esi - 1], cl
  3468 00002A7E 884EFE              <1> 	mov [esi - 2], cl
  3469 00002A81 EB80                <1> 	jmp backtodos
  3470 00002A83 00000000            <1> stringstart dd 0
  3471                              <1> 
  3472                              <1> dosgetdate:
  3473 00002A87 E890210000          <1> 	call time
  3474 00002A8C 8A0D[304F0000]      <1> 	mov cl, [RTCtimeYear]
  3475 00002A92 B500                <1> 	mov ch, 0
  3476 00002A94 6681C1D007          <1> 	add cx, 2000
  3477 00002A99 8A35[2F4F0000]      <1> 	mov dh, [RTCtimeMonth]
  3478 00002A9F 8A15[2E4F0000]      <1> 	mov dl, [RTCtimeDay]
  3479 00002AA5 E959FFFFFF          <1> 	jmp backtodos
  3480                              <1> 
  3481                              <1> dosgettime:
  3482 00002AAA E86D210000          <1> 	call time
  3483 00002AAF 8A2D[2D4F0000]      <1> 	mov ch, [RTCtimeHour]
  3484 00002AB5 8A0D[2C4F0000]      <1> 	mov cl, [RTCtimeMinute]
  3485 00002ABB 8A35[2B4F0000]      <1> 	mov dh, [RTCtimeSecond]
  3486 00002AC1 B200                <1> 	mov dl, 0
  3487 00002AC3 E93BFFFFFF          <1> 	jmp backtodos
  3488                              <1> 	
  3489                              <1> dosexit:
  3490 00002AC8 BE[3F820000]        <1> 	mov esi, line
  3491 00002ACD E844F2FFFF          <1> 	call print
  3492 00002AD2 61                  <1> 	popa
  3493 00002AD3 9D                  <1> 	popf
  3494 00002AD4 8B25[D89A0300]      <1> 	mov esp, [previousstack]
  3495 00002ADA 31DB                <1> 	xor ebx, ebx
  3496 00002ADC 88C3                <1> 	mov bl, al
  3497 00002ADE 80FB00              <1> 	cmp bl, 0
  3498 00002AE1 0F85BAF1FFFF        <1> 	jne near exitprog.error
  3499 00002AE7 C3                  <1> 	ret
  3500                                      %include "source/solleros.asm"
  3501                              <1> 	;SOLLEROS.ASM
  3502                              <1> os:
  3503                              <1> setdefenv:
  3504 00002AE8 B02F                <1> 	mov al, '/'
  3505 00002AEA A2[E49A0300]        <1> 	mov [currentfolder], al
  3506 00002AEF B801000000          <1> 	mov eax, 1
  3507 00002AF4 A3[E09A0300]        <1> 	mov [currentfolderloc], eax
  3508 00002AF9 E8C7F2FFFF          <1> 	call clear
  3509                              <1> 	
  3510                              <1> bootfilecheck:
  3511 00002AFE 803D[E89C0300]01    <1> 	cmp byte [ranboot], 1
  3512 00002B05 0F8421000000        <1> 	je near nobootfile
  3513                              <1> 	%ifdef hardware.automatic
  3514 00002B0B E882330000          <1> 		call initializelater ;Initialize components that have debug messages
  3515                              <1> 	%endif
  3516 00002B10 BF[FE810000]        <1> 	mov edi, bootfilename
  3517 00002B15 BE00004000          <1> 	mov esi, 0x400000
  3518 00002B1A E8C0370000          <1> 	call loadfile
  3519 00002B1F 81FA00000000        <1> 	cmp edx, 0
  3520 00002B25 7505                <1> 	jne nobootfile
  3521 00002B27 E8B20D0000          <1> 	call progbatchfound
  3522                              <1> nobootfile:	
  3523 00002B2C C605[E89C0300]01    <1> 	mov byte [ranboot], 1
  3524                              <1> 
  3525 00002B33 BE[03000000]        <1> 	mov esi, signature
  3526                              <1> .sigcopyloop:	;this prevents an odd error
  3527 00002B38 658A06              <1> 	mov al, [gs:esi]
  3528 00002B3B 8806                <1> 	mov [esi], al
  3529 00002B3D 46                  <1> 	inc esi
  3530 00002B3E 81FE[11000000]      <1> 	cmp esi, signatureend
  3531 00002B44 72F2                <1> 	jb .sigcopyloop
  3532                              <1> 	
  3533 00002B46 BE[03000000]        <1> 	mov esi, signature
  3534 00002B4B E8C6F1FFFF          <1> 	call print
  3535 00002B50 8B0D[0D000000]      <1> 	mov ecx, [signatureend - 4]
  3536 00002B56 E8F6060000          <1> 	call showdec
  3537 00002B5B BE[3F820000]        <1> 	mov esi, line
  3538 00002B60 E8B1F1FFFF          <1> 	call print
  3539 00002B65 BE[1B820000]        <1> 	mov esi, userask
  3540 00002B6A E8A7F1FFFF          <1> 	call print
  3541                              <1> usercheck:
  3542 00002B6F BE[58B10300]        <1> 	mov esi, buftxt
  3543 00002B74 BF[58B50300]        <1> 	mov edi, buftxtend
  3544 00002B79 B00A                <1> 	mov al, 10
  3545 00002B7B E8C9F2FFFF          <1> 	call rdprint
  3546 00002B80 56                  <1> 	push esi
  3547 00002B81 BE[25820000]        <1> 	mov esi, pwdask
  3548 00002B86 E88BF1FFFF          <1> 	call print
  3549 00002B8B 5E                  <1> 	pop esi
  3550 00002B8C 46                  <1> 	inc esi
  3551 00002B8D 8935[822C0000]      <1> 	mov [esipass], esi
  3552                              <1> passcheck:
  3553 00002B93 E879F7FFFF          <1> 	call getchar
  3554 00002B98 3C0A                <1> 	cmp al, 10
  3555 00002B9A 0F8438000000        <1> 	je near gotpass
  3556 00002BA0 3C08                <1> 	cmp al, 8
  3557 00002BA2 0F8412000000        <1> 	je near backpass
  3558 00002BA8 8806                <1> 	mov [esi], al
  3559 00002BAA 46                  <1> 	inc esi
  3560 00002BAB 30E4                <1> 	xor ah, ah
  3561 00002BAD B02A                <1> 	mov al, "*"
  3562 00002BAF E8D9F7FFFF          <1> 	call prcharint
  3563 00002BB4 EBDD                <1> 	jmp passcheck
  3564 00002BB6 08200800            <1> backcursor2 db 8," ",8,0
  3565                              <1> backpass:
  3566 00002BBA 3B35[822C0000]      <1> 	cmp esi, [esipass]
  3567 00002BC0 0F84CDFFFFFF        <1> 	je near passcheck
  3568 00002BC6 4E                  <1> 	dec esi
  3569 00002BC7 C60600              <1> 	mov byte [esi], 0
  3570 00002BCA 56                  <1> 	push esi
  3571 00002BCB BE[B62B0000]        <1> 	mov esi, backcursor2
  3572 00002BD0 E841F1FFFF          <1> 	call print
  3573 00002BD5 5E                  <1> 	pop esi
  3574 00002BD6 EBBB                <1> 	jmp passcheck
  3575                              <1> gotpass:
  3576 00002BD8 B00A                <1> 	mov al, 10
  3577 00002BDA E8AEF7FFFF          <1> 	call prcharint
  3578 00002BDF 30C0                <1> 	xor al, al
  3579 00002BE1 31C9                <1> 	xor ecx, ecx
  3580 00002BE3 8806                <1> 	mov [esi], al
  3581 00002BE5 BB[41820000]        <1> 	mov ebx, userlst
  3582                              <1> userfind:
  3583 00002BEA BE[58B10300]        <1> 	mov esi, buftxt
  3584 00002BEF 8A06                <1> 	mov al, [esi]
  3585 00002BF1 3C00                <1> 	cmp al, 0
  3586 00002BF3 0F84EFFEFFFF        <1> 	je near os
  3587 00002BF9 891D[862C0000]      <1> 	mov [usercache], ebx
  3588 00002BFF E860030000          <1> 	call tester
  3589 00002C04 3C01                <1> 	cmp al, 1
  3590 00002C06 7416                <1> 	je pwdtest
  3591 00002C08 41                  <1> 	inc ecx
  3592                              <1> nxtuser:
  3593 00002C09 8A03                <1> 	mov al, [ebx]
  3594 00002C0B 43                  <1> 	inc ebx
  3595 00002C0C 3C00                <1> 	cmp al, 0
  3596 00002C0E 75F9                <1> 	jne nxtuser
  3597 00002C10 81FB[64820000]      <1> 	cmp ebx, userlstend
  3598 00002C16 0F83CCFEFFFF        <1> 	jae near os
  3599 00002C1C EBCC                <1> 	jmp userfind
  3600                              <1> pwdtest:
  3601 00002C1E 46                  <1> 	inc esi
  3602 00002C1F 43                  <1> 	inc ebx
  3603 00002C20 E83F030000          <1> 	call tester
  3604 00002C25 3C01                <1> 	cmp al, 1
  3605 00002C27 7402                <1> 	je pwdrgt
  3606 00002C29 EBDE                <1> 	jmp nxtuser
  3607                              <1> pwdrgt:
  3608 00002C2B D1E9                <1> 	shr ecx, 1
  3609 00002C2D 890D[E49C0300]      <1> 	mov [uid], ecx
  3610 00002C33 E88DF1FFFF          <1> 	call clear
  3611 00002C38 31C9                <1> 	xor ecx, ecx
  3612 00002C3A 41                  <1> 	inc ecx
  3613 00002C3B 890D[02630500]      <1> 	mov [commandbufpos], ecx
  3614                              <1> returnfromexp:
  3615 00002C41 66B90002            <1> 	mov cx, 200h
  3616 00002C45 BE[58B10300]        <1> 	mov esi, buftxt
  3617 00002C4A 8935[602F0000]      <1> 	mov [currentcommandloc], esi
  3618 00002C50 E825000000          <1> 	call bufclr
  3619                              <1> clearolddata:
  3620 00002C55 31C0                <1> 	xor eax, eax
  3621 00002C57 A2[E99C0300]        <1> 	mov [IFON], al
  3622 00002C5C A2[EA9C0300]        <1> 	mov [IFTRUE], al
  3623 00002C61 A2[529D0300]        <1> 	mov [BATCHISON], al
  3624 00002C66 A3[4E9D0300]        <1> 	mov [BATCHPOS], eax
  3625 00002C6B A2[539D0300]        <1> 	mov [LOOPON], al
  3626 00002C70 A3[549D0300]        <1> 	mov [LOOPPOS], eax
  3627 00002C75 E933000000          <1> 	jmp nwcmd
  3628                              <1> bufclr:	
  3629 00002C7A 30C0                <1> 	xor al, al
  3630 00002C7C 8806                <1> 	mov [esi], al
  3631 00002C7E 46                  <1> 	inc esi
  3632 00002C7F E2F9                <1> 	loop bufclr
  3633 00002C81 C3                  <1> 	ret
  3634                              <1> 
  3635 00002C82 00000000            <1> esipass dd 0
  3636 00002C86 [41820000]          <1> usercache dd userlst
  3637                              <1> 	
  3638                              <1> buftxtclear:
  3639 00002C8A 30C0                <1> 	xor al, al
  3640 00002C8C BE[58B10300]        <1> 	mov esi, buftxt
  3641 00002C91 81FE[58B50300]      <1> clearbuftxt: cmp esi, buf2
  3642 00002C97 730E                <1> 	jae retbufclr
  3643 00002C99 8806                <1> 	mov [esi], al
  3644 00002C9B 46                  <1> 	inc esi
  3645 00002C9C EBF3                <1> 	jmp clearbuftxt
  3646                              <1> 
  3647 00002C9E 39DE                <1> clearitbuf: cmp esi, ebx
  3648 00002CA0 7305                <1> 	jae retbufclr
  3649 00002CA2 8806                <1> 	mov [esi], al
  3650 00002CA4 46                  <1> 	inc esi
  3651 00002CA5 EBF7                <1> 	jmp clearitbuf
  3652 00002CA7 C3                  <1> retbufclr: ret
  3653                              <1> 
  3654 00002CA8 E900000000          <1> full:	jmp nwcmd
  3655                              <1> 
  3656                              <1> shush:	;SollerOS Hardly Unix-compatible Shell
  3657                              <1> nwcmd:
  3658 00002CAD FB                  <1> 	sti
  3659 00002CAE 31C0                <1> 	xor eax, eax
  3660 00002CB0 3905[822E0000]      <1> 	cmp [nextcommandloc], eax
  3661 00002CB6 7413                <1> 	je nomultiplecommand
  3662 00002CB8 8B35[822E0000]      <1> 	mov esi, [nextcommandloc]
  3663 00002CBE 8935[862E0000]      <1> 	mov [thiscommandloc], esi
  3664 00002CC4 E8C6010000          <1> 	call fixvariables
  3665 00002CC9 EBE2                <1> 	jmp nwcmd
  3666                              <1> nomultiplecommand:
  3667 00002CCB A3[862E0000]        <1> 	mov [thiscommandloc], eax
  3668 00002CD0 3805[9B640000]      <1> 	cmp [threadson], al
  3669 00002CD6 7405                <1> 	je noclinwcmd
  3670 00002CD8 A2[9B640000]        <1> 	mov [threadson], al
  3671                              <1> noclinwcmd:
  3672 00002CDD B001                <1> 	mov al, 1
  3673 00002CDF 3805[529D0300]      <1> 	cmp [BATCHISON], al
  3674 00002CE5 7501                <1> 	jne cancel
  3675 00002CE7 C3                  <1> 	ret
  3676 00002CE8 30C0                <1> cancel:	xor al, al
  3677 00002CEA A2[E99C0300]        <1> 	mov [IFON], al
  3678 00002CEF A2[529D0300]        <1> 	mov [BATCHISON], al
  3679 00002CF4 B05B                <1> 	mov al, '['
  3680 00002CF6 66BB0700            <1> 	mov bx, 7
  3681 00002CFA E8A5F6FFFF          <1> 	call prcharq
  3682 00002CFF 8B35[862C0000]      <1> 	mov esi, [usercache]
  3683 00002D05 E8EDEFFFFF          <1> 	call printquiet
  3684 00002D0A BE[2F820000]        <1> 	mov esi, computer
  3685 00002D0F E8E3EFFFFF          <1> 	call printquiet
  3686 00002D14 BE[E49A0300]        <1> 	mov esi, currentfolder
  3687 00002D19 0335[DC9A0300]      <1> 	add esi, [lastfolderloc]
  3688 00002D1F E8D3EFFFFF          <1> 	call printquiet
  3689 00002D24 BE[3A820000]        <1> 	mov esi, endprompt
  3690 00002D29 E8E8EFFFFF          <1> 	call print
  3691 00002D2E E857FFFFFF          <1> 	call buftxtclear
  3692 00002D33 BE[58B10300]        <1> 	mov esi, buftxt
  3693 00002D38 C605[FA220000]01    <1> 	mov byte [commandedit], 1
  3694 00002D3F B00A                <1> 	mov al, 10
  3695 00002D41 66BB0700            <1> 	mov bx, 7
  3696 00002D45 BF[58B50300]        <1> 	mov edi, buftxtend
  3697 00002D4A E8FAF0FFFF          <1> 	call rdprint
  3698 00002D4F C605[FA220000]00    <1> 	mov byte [commandedit], 0
  3699 00002D56 803D[58B10300]00    <1> 	cmp byte [buftxt], 0
  3700 00002D5D 0F844AFFFFFF        <1> 	je near nwcmd
  3701 00002D63 8B35[02630500]      <1> gotcmd:	mov esi, [commandbufpos]
  3702 00002D69 8935[FE620500]      <1> 	mov [lastcommandpos], esi
  3703 00002D6F FF05[0A630500]      <1> 	inc dword [commandsentered]
  3704 00002D75 BF[58B10300]        <1> 	mov edi, buftxt
  3705 00002D7A 81C6[0E630500]      <1> 	add esi, commandbuf
  3706 00002D80 81FE[0E730500]      <1> 	cmp esi, commandbufend
  3707 00002D86 7605                <1> 	jbe copycommand
  3708 00002D88 BE[0E630500]        <1> 	mov esi, commandbuf
  3709                              <1> copycommand:
  3710 00002D8D 8A07                <1> 	mov al, [edi]
  3711 00002D8F 8806                <1> 	mov [esi], al
  3712 00002D91 47                  <1> 	inc edi
  3713 00002D92 46                  <1> 	inc esi
  3714 00002D93 3C00                <1> 	cmp al, 0
  3715 00002D95 740F                <1> 	je donecopy
  3716 00002D97 81FE[0E730500]      <1> 	cmp esi, commandbufend
  3717 00002D9D 76EE                <1> 	jbe copycommand
  3718 00002D9F BE[0E630500]        <1> 	mov esi, commandbuf
  3719 00002DA4 EBE7                <1> 	jmp copycommand
  3720                              <1> donecopy:
  3721 00002DA6 81EE[0E630500]      <1> 	sub esi, commandbuf
  3722 00002DAC 8935[02630500]      <1> 	mov [commandbufpos], esi
  3723 00002DB2 E8D3000000          <1> 	call run
  3724 00002DB7 E9F1FEFFFF          <1> 	jmp nwcmd
  3725                              <1> 
  3726 00002DBC E8C9FEFFFF          <1> input:	call buftxtclear
  3727 00002DC1 BE[58B10300]        <1> 	mov esi, buftxt		;puts input into buftxt AND onto screen
  3728 00002DC6 BF[58B50300]        <1> 	mov edi, buftxtend
  3729 00002DCB B00A                <1> stdin:	mov al, 10
  3730 00002DCD B307                <1> 	mov bl, 7
  3731 00002DCF E875F0FFFF          <1> 	call rdprint
  3732 00002DD4 C3                  <1> 	ret
  3733                              <1> 
  3734                              <1> replacevariable:
  3735 00002DD5 8A4601              <1> 	mov al, [esi + 1]
  3736 00002DD8 C64601FF            <1> 	mov byte [esi + 1], 255
  3737 00002DDC 3C24                <1> 	cmp al, "$"
  3738 00002DDE 0F84AB000000        <1> 	je near fixvariables
  3739 00002DE4 884601              <1> 	mov [esi + 1], al
  3740 00002DE7 56                  <1> 	push esi
  3741 00002DE8 81EE[58B10300]      <1> 	sub esi, buftxt
  3742 00002DEE 89F7                <1> 	mov edi, esi
  3743 00002DF0 81C6[58B10300]      <1> 	add esi, buftxt
  3744 00002DF6 47                  <1> 	inc edi
  3745 00002DF7 BB[589D0300]        <1> 	mov ebx, variables
  3746 00002DFC E895120000          <1> 	call nxtvrech
  3747 00002E01 89F7                <1> 	mov edi, esi
  3748 00002E03 31DB                <1> 	xor ebx, ebx
  3749 00002E05 4E                  <1> 	dec esi
  3750                              <1> findvarname:
  3751 00002E06 4E                  <1> 	dec esi
  3752 00002E07 8A06                <1> 	mov al, [esi]
  3753 00002E09 43                  <1> 	inc ebx
  3754 00002E0A 3C04                <1> 	cmp al, 4
  3755 00002E0C 75F8                <1> 	jne findvarname
  3756 00002E0E 5E                  <1> 	pop esi
  3757                              <1> replacevarloop:
  3758 00002E0F 8A07                <1> 	mov al, [edi]
  3759 00002E11 3C00                <1> 	cmp al, 0
  3760 00002E13 0F8413000000        <1> 	je near compressbuftxt
  3761 00002E19 81FB00000000        <1> 	cmp ebx, 0
  3762 00002E1F 0F8416000000        <1> 	je near expandbuftxt
  3763 00002E25 8806                <1> 	mov [esi], al
  3764 00002E27 4B                  <1> 	dec ebx
  3765 00002E28 46                  <1> 	inc esi
  3766 00002E29 47                  <1> 	inc edi
  3767 00002E2A EBE3                <1> 	jmp replacevarloop
  3768                              <1> compressbuftxt:
  3769 00002E2C 8A041E              <1> 	mov al, [esi + ebx]
  3770 00002E2F 8806                <1> 	mov [esi], al
  3771 00002E31 46                  <1> 	inc esi
  3772 00002E32 3C00                <1> 	cmp al, 0
  3773 00002E34 75F6                <1> 	jne compressbuftxt
  3774 00002E36 E954000000          <1> 	jmp fixvariables
  3775                              <1> expandbuftxt:
  3776 00002E3B 89F1                <1> 	mov ecx, esi
  3777 00002E3D 8A26                <1> 	mov ah, [esi]
  3778                              <1> expandbuftxtlp:
  3779 00002E3F 8A1E                <1> 	mov bl, [esi]
  3780 00002E41 46                  <1> 	inc esi
  3781 00002E42 8A3E                <1> 	mov bh, [esi]
  3782 00002E44 8826                <1> 	mov [esi], ah
  3783 00002E46 88FC                <1> 	mov ah, bh
  3784 00002E48 80FB00              <1> 	cmp bl, 0
  3785 00002E4B 75F2                <1> 	jne expandbuftxtlp
  3786 00002E4D 89CE                <1> 	mov esi, ecx
  3787 00002E4F 8806                <1> 	mov [esi], al
  3788 00002E51 47                  <1> 	inc edi
  3789 00002E52 8A07                <1> 	mov al, [edi]
  3790 00002E54 3C00                <1> 	cmp al, 0
  3791 00002E56 0F8433000000        <1> 	je near fixvariables
  3792 00002E5C 46                  <1> 	inc esi
  3793 00002E5D EBDC                <1> 	jmp expandbuftxt
  3794                              <1> multipleprogline:
  3795 00002E5F 30E4                <1> 	xor ah, ah
  3796 00002E61 8826                <1> 	mov [esi], ah
  3797 00002E63 46                  <1> 	inc esi
  3798 00002E64 8935[822E0000]      <1> 	mov [nextcommandloc], esi
  3799 00002E6A E93E000000          <1> 	jmp donefixvariables
  3800                              <1> inlinecomment:	;if the following char is #, include a #, otherwise end the line
  3801 00002E6F 46                  <1> 	inc esi
  3802 00002E70 8A06                <1> 	mov al, [esi]
  3803 00002E72 C606FF              <1> 	mov byte [esi], 255
  3804 00002E75 3C23                <1> 	cmp al, '#'
  3805 00002E77 7416                <1> 	je fixvariables
  3806 00002E79 4E                  <1> 	dec esi
  3807 00002E7A C60600              <1> 	mov byte [esi], 0
  3808 00002E7D E90D000000          <1> 	jmp fixvariables
  3809                              <1> 	
  3810 00002E82 00000000            <1> nextcommandloc dd 0
  3811 00002E86 00000000            <1> thiscommandloc dd 0	
  3812                              <1> run:
  3813 00002E8A BE[58B10300]        <1> 	mov esi, buftxt
  3814 00002E8F 46                  <1> fixvariables:	inc esi
  3815 00002E90 8A06                <1> 	mov al, [esi]
  3816 00002E92 3C23                <1> 	cmp al, '#'	;inline comment
  3817 00002E94 74D9                <1> 	je inlinecomment
  3818 00002E96 3C24                <1> 	cmp al, '$' ;variable
  3819 00002E98 0F8437FFFFFF        <1> 	je near replacevariable
  3820 00002E9E 3C3B                <1> 	cmp al, ';' ;program list
  3821 00002EA0 74BD                <1> 	je multipleprogline
  3822 00002EA2 3C00                <1> 	cmp al, 0
  3823 00002EA4 75E9                <1> 	jne fixvariables
  3824 00002EA6 31C0                <1> 	xor eax, eax
  3825 00002EA8 A3[822E0000]        <1> 	mov [nextcommandloc], eax
  3826                              <1> donefixvariables:
  3827 00002EAD 803D[4B340000]00    <1> 	cmp byte [indexdone], 0
  3828 00002EB4 7505                <1> 	jne progtest
  3829 00002EB6 E8FB040000          <1> 	call indexfiles
  3830                              <1> progtest:
  3831 00002EBB 31C0                <1> 	xor eax, eax
  3832 00002EBD BB[D8960300]        <1> 	mov ebx, fileindex
  3833 00002EC2 668B03              <1> prgnxt:	mov ax, [ebx]
  3834 00002EC5 B1FF                <1> 	mov cl, 255
  3835 00002EC7 B52C                <1> 	mov ch, 44
  3836 00002EC9 6639C8              <1> 	cmp ax, cx
  3837 00002ECC 740B                <1> 	je fndprg
  3838 00002ECE 43                  <1> 	inc ebx
  3839 00002ECF 81FB[D89A0300]      <1> 	cmp ebx, fileindexend
  3840 00002ED5 735D                <1> 	jae prgnf
  3841 00002ED7 EBE9                <1> 	jmp prgnxt
  3842 00002ED9 81C302000000        <1> fndprg: add ebx, 2
  3843 00002EDF 31C9                <1> 	xor ecx, ecx
  3844 00002EE1 BE[58B10300]        <1> 	mov esi, buftxt
  3845 00002EE6 390D[862E0000]      <1> 	cmp [thiscommandloc], ecx
  3846 00002EEC 7406                <1> 	je noprgtstmultiple
  3847 00002EEE 8B35[862E0000]      <1> 	mov esi, [thiscommandloc]
  3848                              <1> noprgtstmultiple:
  3849 00002EF4 E8A6000000          <1> 	call cndtest
  3850 00002EF9 3C01                <1> 	cmp al, 1
  3851 00002EFB 7302                <1> 	jae prggood
  3852 00002EFD EBC3                <1> 	jmp prgnxt
  3853 00002EFF 81FB[D89A0300]      <1> prggood: cmp ebx, fileindexend
  3854 00002F05 7358                <1> 	jae prgdn
  3855 00002F07 31C0                <1> 	xor eax, eax
  3856 00002F09 BE[58B10300]        <1> 	mov esi, buftxt
  3857 00002F0E 3905[862E0000]      <1> 	cmp [thiscommandloc], eax
  3858 00002F14 7406                <1> 	je noprggoodmul
  3859 00002F16 8B35[862E0000]      <1> 	mov esi, [thiscommandloc]
  3860                              <1> noprggoodmul:
  3861 00002F1C 8935[602F0000]      <1> 	mov [currentcommandloc], esi
  3862 00002F22 81C303000000        <1> 	add ebx, 3
  3863 00002F28 8B3B                <1> 	mov edi, [ebx]
  3864 00002F2A C605[9B640000]02    <1> 	mov byte [threadson], 2
  3865 00002F31 FFD7                <1> 	call edi
  3866 00002F33 C3                  <1> 	ret
  3867                              <1> prgnf:	
  3868 00002F34 8B35[602F0000]      <1> 	mov esi, [currentcommandloc]
  3869 00002F3A 8A06                <1> 	mov al, [esi]
  3870 00002F3C 3C00                <1> 	cmp al, 0
  3871 00002F3E 741F                <1> 	je prgdn
  3872 00002F40 BE[06820000]        <1> 	mov esi, notfound1
  3873 00002F45 E8CCEDFFFF          <1> 	call print
  3874 00002F4A 8B35[602F0000]      <1> 	mov esi, [currentcommandloc]
  3875 00002F50 E8C1EDFFFF          <1> 	call print
  3876 00002F55 BE[0E820000]        <1> 	mov esi, notfound2
  3877 00002F5A E8B7EDFFFF          <1> 	call print
  3878 00002F5F C3                  <1> prgdn:	ret
  3879                              <1> 
  3880 00002F60 00000000            <1> currentcommandloc dd 0
  3881                              <1> 
  3882                              <1> tester:			;si=user bx=prog returns 1 in al if true
  3883 00002F64 6631C0              <1> 	xor ax, ax
  3884 00002F67 8A06                <1> retest:	mov al, [esi]
  3885 00002F69 8A23                <1> 	mov ah, [ebx]
  3886 00002F6B 3C00                <1> 	cmp al, 0
  3887 00002F6D 7408                <1> 	je testtrue
  3888 00002F6F 38E0                <1> 	cmp al, ah
  3889 00002F71 750C                <1> 	jne testfalse
  3890 00002F73 43                  <1> 	inc ebx
  3891 00002F74 46                  <1> 	inc esi
  3892 00002F75 EBF0                <1> 	jmp retest
  3893                              <1> testtrue:
  3894 00002F77 80FC00              <1> 	cmp ah, 0
  3895 00002F7A 7503                <1> 	jne testfalse
  3896 00002F7C B001                <1> 	mov al, 1
  3897 00002F7E C3                  <1> 	ret
  3898                              <1> testfalse:
  3899 00002F7F 30C0                <1> 	xor al, al
  3900 00002F81 C3                  <1> 	ret
  3901                              <1> 
  3902                              <1> optest:			;si=user bx=prog returns 1 in al if true
  3903 00002F82 30C0                <1> 	xor al, al
  3904                              <1> opretest:
  3905 00002F84 8A06                <1> 	mov al, [esi]
  3906 00002F86 8A23                <1> 	mov ah, [ebx]
  3907 00002F88 38E0                <1> 	cmp al, ah
  3908 00002F8A 7510                <1> 	jne optestfalse
  3909 00002F8C 80FC00              <1> 	cmp ah, 0
  3910 00002F8F 7404                <1> 	je optesttrue
  3911 00002F91 43                  <1> 	inc ebx
  3912 00002F92 46                  <1> 	inc esi
  3913 00002F93 EBEF                <1> 	jmp opretest
  3914                              <1> optesttrue:
  3915 00002F95 3C00                <1> 	cmp al, 0
  3916 00002F97 7503                <1> 	jne optestfalse
  3917 00002F99 B001                <1> 	mov al, 1
  3918 00002F9B C3                  <1> 	ret
  3919                              <1> optestfalse:
  3920 00002F9C 30C0                <1> 	xor al, al
  3921 00002F9E C3                  <1> 	ret
  3922                              <1> 
  3923                              <1> cndtest:			;si=user bx=prog cl=endchar returns 1 in al if true
  3924 00002F9F 30C0                <1> 	xor al, al
  3925 00002FA1 8A06                <1> cndretest:	mov al, [esi]
  3926 00002FA3 8A23                <1> 	mov ah, [ebx]
  3927 00002FA5 38CC                <1> 	cmp ah, cl
  3928 00002FA7 7408                <1> 	je cndtesttrue
  3929 00002FA9 38E0                <1> 	cmp al, ah
  3930 00002FAB 750B                <1> 	jne cndtestfalse
  3931 00002FAD 43                  <1> 	inc ebx
  3932 00002FAE 46                  <1> 	inc esi
  3933 00002FAF EBF0                <1> 	jmp cndretest
  3934                              <1> cndtesttrue:
  3935 00002FB1 38C8                <1> 	cmp al, cl
  3936 00002FB3 7506                <1> 	jne cndtestalmost
  3937 00002FB5 B001                <1> 	mov al, 1
  3938 00002FB7 C3                  <1> 	ret
  3939                              <1> cndtestfalse:
  3940 00002FB8 30C0                <1> 	xor al, al
  3941 00002FBA C3                  <1> 	ret
  3942                              <1> cndtestalmost:
  3943 00002FBB B002                <1> 	mov al, 2
  3944 00002FBD C3                  <1> 	ret
  3945                              <1> 	
  3946                              <1> array:				;arraystart in si, arrayend in bx, arrayseperator in cx
  3947                              <1> 		                ;ends if array seperator is found backwards after 0
  3948                              <1> 	arnxt:	      
  3949 00002FBE 88E8                <1> 		mov al, ch
  3950 00002FC0 88CC                <1> 		mov ah, cl        
  3951 00002FC2 663906              <1> 		cmp [esi], ax
  3952 00002FC5 744D                <1> 		je ardn
  3953 00002FC7 66390E              <1> 		cmp [esi], cx
  3954 00002FCA 7407                <1> 		je arfnd
  3955 00002FCC 46                  <1> 		inc esi
  3956 00002FCD 39DE                <1> 		cmp esi, ebx
  3957 00002FCF 7343                <1> 		jae ardn
  3958 00002FD1 EBEB                <1> 		jmp arnxt
  3959 00002FD3 81C602000000        <1> 	arfnd: add esi, 2
  3960 00002FD9 891D[15300000]      <1> 		mov [arbx], ebx
  3961 00002FDF 890D[19300000]      <1> 		mov [arcx], ecx
  3962 00002FE5 E82CEDFFFF          <1> 		call print
  3963 00002FEA 8935[1B300000]      <1> 		mov [arsi], esi
  3964 00002FF0 BE[3F820000]        <1> 		mov esi, line
  3965 00002FF5 E81CEDFFFF          <1> 		call print
  3966 00002FFA 8B1D[15300000]      <1> 		mov ebx, [arbx]
  3967 00003000 668B0D[19300000]    <1> 		mov cx, [arcx]
  3968 00003007 8B35[1B300000]      <1> 		mov esi, [arsi]
  3969 0000300D 46                  <1> 		inc esi
  3970 0000300E 39DE                <1> 		cmp esi, ebx
  3971 00003010 7302                <1> 		jae ardn
  3972 00003012 EBAA                <1> 		jmp arnxt
  3973 00003014 C3                  <1> 	ardn:	ret
  3974 00003015 00000000            <1> arbx:	dw 0,0
  3975 00003019 0000                <1> arcx:	db 0,0
  3976 0000301B 00000000            <1> arsi:	dw 0,0
  3977                              <1> 
  3978                              <1> clearbuffer:
  3979 0000301F BE[58B50300]        <1> 	mov esi, buf2
  3980 00003024 B030                <1> 	mov al, '0'
  3981 00003026 81FE[6CB50300]      <1> clearbuf: cmp esi, numbuf
  3982 0000302C 7305                <1> 	jae doneclearbuff
  3983 0000302E 8806                <1> 	mov [esi], al
  3984 00003030 46                  <1> 	inc esi
  3985 00003031 EBF3                <1> 	jmp clearbuf
  3986                              <1> doneclearbuff: 
  3987 00003033 C3                  <1> 		ret
  3988                              <1> 
  3989                              <1> convert:
  3990 00003034 4E                  <1> 	dec esi
  3991 00003035 89F3                <1> 	mov ebx, esi		;place to convert into must be in esi, number to convert must be in ecx
  3992                              <1> .lp:
  3993 00003037 89DE                <1> 	mov esi, ebx
  3994 00003039 81EE09000000        <1> 	sub esi, 9
  3995 0000303F 81F900CA9A3B        <1> 	cmp ecx, 1000000000
  3996 00003045 720A                <1> 	jb .8
  3997 00003047 81E900CA9A3B        <1> 	sub ecx, 1000000000
  3998 0000304D FE06                <1> 	inc byte [esi]
  3999 0000304F EBE6                <1> 	jmp .lp
  4000 00003051 46                  <1> .8:	inc esi
  4001 00003052 81F900E1F505        <1> 	cmp ecx, 100000000
  4002 00003058 720A                <1> 	jb .7
  4003 0000305A 81E900E1F505        <1> 	sub ecx, 100000000
  4004 00003060 FE06                <1> 	inc byte [esi]
  4005 00003062 EBD3                <1> 	jmp .lp
  4006 00003064 46                  <1> .7:	inc esi
  4007 00003065 81F980969800        <1> 	cmp ecx, 10000000
  4008 0000306B 720A                <1> 	jb .6
  4009 0000306D 81E980969800        <1> 	sub ecx, 10000000
  4010 00003073 FE06                <1> 	inc byte [esi]
  4011 00003075 EBC0                <1> 	jmp .lp
  4012 00003077 46                  <1> .6:	inc esi
  4013 00003078 81F940420F00        <1> 	cmp ecx, 1000000
  4014 0000307E 720A                <1> 	jb .5
  4015 00003080 81E940420F00        <1> 	sub ecx, 1000000
  4016 00003086 FE06                <1> 	inc byte [esi]
  4017 00003088 EBAD                <1> 	jmp .lp
  4018 0000308A 46                  <1> .5:	inc esi
  4019 0000308B 81F9A0860100        <1> 	cmp ecx, 100000
  4020 00003091 720A                <1> 	jb .4
  4021 00003093 81E9A0860100        <1> 	sub ecx, 100000
  4022 00003099 FE06                <1> 	inc byte [esi]
  4023 0000309B EB9A                <1> 	jmp .lp
  4024 0000309D 46                  <1> .4:	inc esi
  4025 0000309E 81F910270000        <1> 	cmp ecx, 10000
  4026 000030A4 720A                <1> 	jb .3
  4027 000030A6 81E910270000        <1> 	sub ecx, 10000
  4028 000030AC FE06                <1> 	inc byte [esi]
  4029 000030AE EB87                <1> 	jmp .lp
  4030 000030B0 46                  <1> .3:	inc esi
  4031 000030B1 81F9E8030000        <1> 	cmp ecx, 1000
  4032 000030B7 720D                <1> 	jb .2
  4033 000030B9 81E9E8030000        <1> 	sub ecx, 1000
  4034 000030BF FE06                <1> 	inc byte [esi]
  4035 000030C1 E971FFFFFF          <1> 	jmp .lp
  4036 000030C6 46                  <1> .2:	inc esi
  4037 000030C7 81F964000000        <1> 	cmp ecx, 100
  4038 000030CD 720D                <1> 	jb .1
  4039 000030CF 81E964000000        <1> 	sub ecx, 100
  4040 000030D5 FE06                <1> 	inc byte [esi]
  4041 000030D7 E95BFFFFFF          <1> 	jmp .lp
  4042 000030DC 46                  <1> .1:	inc esi
  4043 000030DD 81F90A000000        <1> 	cmp ecx, 10
  4044 000030E3 720D                <1> 	jb .0
  4045 000030E5 81E90A000000        <1> 	sub ecx, 10
  4046 000030EB FE06                <1> 	inc byte [esi]
  4047 000030ED E945FFFFFF          <1> 	jmp .lp
  4048 000030F2 46                  <1> .0:	inc esi
  4049 000030F3 81F901000000        <1> 	cmp ecx, 1
  4050 000030F9 720D                <1> 	jb .dn
  4051 000030FB 81E901000000        <1> 	sub ecx, 1
  4052 00003101 FE06                <1> 	inc byte [esi]
  4053 00003103 E92FFFFFFF          <1> 	jmp .lp
  4054                              <1> .dn:
  4055 00003108 C3                  <1> 	ret
  4056                              <1> 
  4057                              <1> 	
  4058                              <1> 
  4059 00003109 00<rept>            <1> hexnumber times 8 db 0
  4060 00003111 202000              <1> hexnumberend db "  ",0
  4061                              <1> 
  4062                              <1> converthex:
  4063                              <1> .clear:	;place to convert to in esi, end of buffer in edi number in ecx
  4064 00003114 56                  <1> 	push esi
  4065 00003115 B030                <1> 	mov al, "0"
  4066 00003117 39FE                <1> .clearlp: cmp esi, edi
  4067 00003119 7305                <1> 	jae .doneclear
  4068 0000311B 8806                <1> 	mov [esi], al
  4069 0000311D 46                  <1> 	inc esi
  4070 0000311E EBF7                <1> 	jmp .clearlp
  4071                              <1> .doneclear:
  4072 00003120 81EE02000000        <1> 	sub esi, 2
  4073 00003126 89C8                <1> 	mov eax, ecx
  4074                              <1> .loop:
  4075 00003128 30FF                <1> 	xor bh, bh
  4076 0000312A 88C3                <1> 	mov bl, al
  4077 0000312C 66C1E304            <1> 	shl bx, 4
  4078 00003130 C0EB04              <1> 	shr bl, 4
  4079 00003133 86DF                <1> 	xchg bl, bh ;they are backwards
  4080 00003135 80C330              <1> 	add bl, 48
  4081 00003138 80FB39              <1> 	cmp bl, "9"
  4082 0000313B 7609                <1> 	jbe .goodbl
  4083 0000313D 80EB30              <1> 	sub bl, 48
  4084 00003140 80EB0A              <1> 	sub bl, 0xA
  4085 00003143 80C341              <1> 	add bl, "A"
  4086                              <1> .goodbl:
  4087 00003146 80C730              <1> 	add bh, 48
  4088 00003149 80FF39              <1> 	cmp bh, "9"
  4089 0000314C 7609                <1> 	jbe .goodbh
  4090 0000314E 80EF30              <1> 	sub bh, 48
  4091 00003151 80EF0A              <1> 	sub bh, 0xA
  4092 00003154 80C741              <1> 	add bh, "A"
  4093                              <1> .goodbh:
  4094 00003157 C1E808              <1> 	shr eax, 8
  4095 0000315A 66891E              <1> 	mov [esi], bx
  4096 0000315D 81EE02000000        <1> 	sub esi, 2
  4097 00003163 3B3424              <1> 	cmp esi, [esp]
  4098 00003166 7207                <1> 	jb .done
  4099 00003168 3D00000000          <1> 	cmp eax, 0
  4100 0000316D 75B9                <1> 	jne .loop
  4101                              <1> .done:
  4102 0000316F 5E                  <1> 	pop esi
  4103 00003170 C3                  <1> 	ret
  4104                              <1> 	
  4105                              <1> 	
  4106 00003171 00                  <1> smallhex db 0
  4107 00003172 01                  <1> firsthexshown db 1
  4108                              <1> showhexsmall:
  4109 00003173 C605[71310000]01    <1> 	mov byte [smallhex], 1
  4110 0000317A E808000000          <1> 	call showhex
  4111 0000317F C605[71310000]00    <1> 	mov byte [smallhex], 0
  4112 00003186 C3                  <1> 	ret
  4113                              <1> showhex:
  4114 00003187 60                  <1> 	pusha
  4115 00003188 BE[09310000]        <1> 	mov esi, hexnumber
  4116 0000318D BF[11310000]        <1> 	mov edi, hexnumberend
  4117 00003192 E87DFFFFFF          <1> 	call converthex
  4118 00003197 803D[72310000]01    <1> 	cmp byte [firsthexshown], 1
  4119 0000319E 7503                <1> 	jne .show
  4120 000031A0 6631D2              <1> 	xor dx, dx
  4121                              <1> .show:
  4122 000031A3 803D[72310000]03    <1> 	cmp byte [firsthexshown], 3
  4123 000031AA 750A                <1> 	jne .nonewhexline
  4124 000031AC BE[3F820000]        <1> 	mov esi, line
  4125 000031B1 E860EBFFFF          <1> 	call print
  4126                              <1> .nonewhexline:
  4127 000031B6 803D[72310000]04    <1> 	cmp byte [firsthexshown], 4
  4128 000031BD 7527                <1> 	jne .notab
  4129 000031BF B1A0                <1> 	mov cl, 160
  4130 000031C1 28D1                <1> 	sub cl, dl
  4131 000031C3 C0E905              <1> 	shr cl, 5
  4132 000031C6 C0E105              <1> 	shl cl, 5
  4133 000031C9 80F900              <1> 	cmp cl, 0
  4134 000031CC 750F                <1> 	jne .nonewline
  4135 000031CE BE[3F820000]        <1> 	mov esi, line
  4136 000031D3 E83EEBFFFF          <1> 	call print
  4137 000031D8 E909000000          <1> 	jmp .notab
  4138                              <1> .nonewline:
  4139 000031DD 80C20F              <1> 	add dl, 15
  4140 000031E0 C0EA04              <1> 	shr dl, 4
  4141 000031E3 C0E204              <1> 	shl dl, 4
  4142                              <1> .notab:
  4143 000031E6 BE[09310000]        <1> 	mov esi, hexnumber
  4144 000031EB 803D[71310000]01    <1> 	cmp byte [smallhex],1
  4145 000031F2 7506                <1> 	jne .nosmall
  4146 000031F4 81C606000000        <1> 	add esi, 6
  4147                              <1> .nosmall:
  4148 000031FA 803D[72310000]05    <1> 	cmp byte [firsthexshown], 5
  4149 00003201 750A                <1> 	jne .noquiet
  4150 00003203 E8EFEAFFFF          <1> 	call printquiet
  4151 00003208 E918000000          <1> 	jmp .donequiet
  4152                              <1> .noquiet:
  4153 0000320D 803D[72310000]06    <1> 	cmp byte [firsthexshown], 6
  4154 00003214 750A                <1> 	jne .normal
  4155 00003216 E8EFEAFFFF          <1> 	call printhighlight
  4156 0000321B E905000000          <1> 	jmp .donequiet
  4157                              <1> .normal:
  4158 00003220 E8F1EAFFFF          <1> 	call print
  4159                              <1> .donequiet:
  4160 00003225 803D[72310000]02    <1> 	cmp byte [firsthexshown], 2
  4161 0000322C 750A                <1> 	jne .shown
  4162 0000322E BE[3F820000]        <1> 	mov esi, line
  4163 00003233 E8DEEAFFFF          <1> 	call print
  4164                              <1> .shown:
  4165 00003238 C605[72310000]00    <1> 	mov byte [firsthexshown], 0
  4166 0000323F 61                  <1> 	popa
  4167 00003240 C3                  <1> 	ret
  4168                              <1> 
  4169                              <1> 
  4170 00003241 303030303030303030- <1> decnumber db "00000000000000"
  4171 0000324A 3030303030          <1>
  4172 0000324F 2000                <1> decnumberend: db " ",0
  4173                              <1> 
  4174                              <1> showdec: ;;same as showhex, just uses decimal conversion
  4175 00003251 60                  <1> 	pusha
  4176 00003252 BF[41320000]        <1> 	mov edi, decnumber
  4177 00003257 BE[4F320000]        <1> 	mov esi, decnumberend
  4178                              <1> .clear:
  4179 0000325C C60730              <1> 	mov byte [edi], '0'
  4180 0000325F 47                  <1> 	inc edi
  4181 00003260 39F7                <1> 	cmp edi, esi
  4182 00003262 72F8                <1> 	jb .clear
  4183 00003264 BF[41320000]        <1> 	mov edi, decnumber
  4184 00003269 E8C6FDFFFF          <1> 	call convert
  4185 0000326E 803D[72310000]01    <1> 	cmp byte [firsthexshown], 1
  4186 00003275 7503                <1> 	jne .show
  4187 00003277 6631D2              <1> 	xor dx, dx
  4188                              <1> .show:
  4189 0000327A 803D[72310000]03    <1> 	cmp byte [firsthexshown], 3
  4190 00003281 750A                <1> 	jne .nonewdecline
  4191 00003283 BE[3F820000]        <1> 	mov esi, line
  4192 00003288 E889EAFFFF          <1> 	call print
  4193                              <1> .nonewdecline:
  4194 0000328D 803D[72310000]04    <1> 	cmp byte [firsthexshown], 4
  4195 00003294 7527                <1> 	jne .notab
  4196 00003296 B1A0                <1> 	mov cl, 160
  4197 00003298 28D1                <1> 	sub cl, dl
  4198 0000329A C0E905              <1> 	shr cl, 5
  4199 0000329D C0E105              <1> 	shl cl, 5
  4200 000032A0 80F900              <1> 	cmp cl, 0
  4201 000032A3 750F                <1> 	jne .nonewline
  4202 000032A5 BE[3F820000]        <1> 	mov esi, line
  4203 000032AA E867EAFFFF          <1> 	call print
  4204 000032AF E909000000          <1> 	jmp .notab
  4205                              <1> .nonewline:
  4206 000032B4 80C20F              <1> 	add dl, 15
  4207 000032B7 C0EA04              <1> 	shr dl, 4
  4208 000032BA C0E204              <1> 	shl dl, 4
  4209                              <1> .notab:
  4210 000032BD BE[41320000]        <1> 	mov esi, decnumber
  4211 000032C2 4E                  <1> 	dec esi
  4212                              <1> .sifind:
  4213 000032C3 46                  <1> 	inc esi
  4214 000032C4 803E30              <1> 	cmp byte [esi], '0'
  4215 000032C7 74FA                <1> 	je .sifind
  4216 000032C9 E848EAFFFF          <1> 	call print
  4217 000032CE 803D[72310000]02    <1> 	cmp byte [firsthexshown], 2
  4218 000032D5 750A                <1> 	jne .shown
  4219 000032D7 BE[3F820000]        <1> 	mov esi, line
  4220 000032DC E835EAFFFF          <1> 	call print
  4221                              <1> .shown:
  4222 000032E1 C605[72310000]00    <1> 	mov byte [firsthexshown], 0
  4223 000032E8 61                  <1> 	popa
  4224 000032E9 C3                  <1> 	ret
  4225                              <1> 	
  4226                              <1> cnvrthextxt:
  4227 000032EA 31C9                <1> 	xor ecx, ecx
  4228 000032EC 31C0                <1> 	xor eax, eax
  4229 000032EE 31D2                <1> 	xor edx, edx
  4230 000032F0 31DB                <1> 	xor ebx, ebx
  4231 000032F2 4E                  <1> 	dec esi
  4232                              <1> .end:
  4233 000032F3 46                  <1> 	inc esi
  4234 000032F4 8A06                <1> 	mov al, [esi]
  4235 000032F6 3C00                <1> 	cmp al, 0
  4236 000032F8 75F9                <1> 	jne .end
  4237                              <1> .loop:
  4238 000032FA 4E                  <1> 	dec esi
  4239 000032FB 8A06                <1> 	mov al, [esi]
  4240 000032FD 3C41                <1> 	cmp al, "A"
  4241 000032FF 7328                <1> 	jae .char
  4242 00003301 2C30                <1> 	sub al, 48
  4243 00003303 3C10                <1> 	cmp al, 16
  4244 00003305 7721                <1> 	ja .done
  4245                              <1> .donechar:
  4246 00003307 81FA00000000        <1> 	cmp edx, 0
  4247 0000330D 740E                <1> 	je .noshl
  4248 0000330F 89D3                <1> 	mov ebx, edx
  4249                              <1> .shl:
  4250 00003311 C1E004              <1> 	shl eax, 4
  4251 00003314 4B                  <1> 	dec ebx
  4252 00003315 81FB00000000        <1> 	cmp ebx, 0
  4253 0000331B 75F4                <1> 	jne .shl
  4254                              <1> .noshl:
  4255 0000331D 42                  <1> 	inc edx
  4256 0000331E 01C1                <1> 	add ecx, eax
  4257 00003320 81FA08000000        <1> 	cmp edx, 8
  4258 00003326 72D2                <1> 	jb .loop
  4259                              <1> .done:
  4260 00003328 C3                  <1> 	ret
  4261                              <1> .char:
  4262 00003329 3C46                <1> 	cmp al, "F"
  4263 0000332B 77FB                <1> 	ja .done
  4264 0000332D 2C41                <1> 	sub al, "A"
  4265 0000332F 040A                <1> 	add al, 0xA
  4266 00003331 EBD4                <1> 	jmp .donechar
  4267                              <1> 	
  4268                              <1> 	
  4269                              <1> cnvrttxt: ;text to convert in esi, first part or 0 in edi
  4270 00003333 31C9                <1> 	xor ecx, ecx
  4271 00003335 31C0                <1> 	xor eax, eax
  4272 00003337 31D2                <1> 	xor edx, edx
  4273 00003339 31DB                <1> 	xor ebx, ebx
  4274 0000333B 4E                  <1> 	dec esi
  4275                              <1> .lp:
  4276 0000333C 46                  <1> 	inc esi
  4277 0000333D 8A06                <1> 	mov al, [esi]
  4278 0000333F 3C00                <1> 	cmp al, 0
  4279 00003341 75F9                <1> 	jne .lp
  4280 00003343 4E                  <1> 	dec esi
  4281 00003344 8A06                <1> 	mov al, [esi]
  4282 00003346 3C2E                <1> 	cmp al, '.'
  4283 00003348 7503                <1> 	jne .dot
  4284 0000334A 46                  <1> 	inc esi
  4285 0000334B EBEF                <1> 	jmp .lp
  4286                              <1> .dot:
  4287 0000334D 3C20                <1> 	cmp al, ' '
  4288 0000334F 7404                <1> 	je .zero
  4289 00003351 3C30                <1> 	cmp al, '0'
  4290 00003353 7504                <1> 	jne .txtlp
  4291                              <1> .zero: 
  4292 00003355 39FE                <1> 		cmp esi, edi
  4293 00003357 7458                <1> 		je .done
  4294                              <1> .txtlp:
  4295 00003359 31C0                <1> 	xor eax, eax
  4296 0000335B 8A06                <1> 	mov al, [esi]
  4297 0000335D 3C3D                <1> 	cmp al, '='
  4298 0000335F 7450                <1> 	je .done
  4299 00003361 3C30                <1> 	cmp al, 48
  4300 00003363 724C                <1> 	jb .done
  4301 00003365 3C23                <1> 	cmp al, '#'
  4302 00003367 7448                <1> 	je .done
  4303 00003369 39FE                <1> 	cmp esi, edi
  4304 0000336B 7244                <1> 	jb .done
  4305 0000336D 81F900000000        <1> 	cmp ecx, 0
  4306 00003373 7708                <1> 	ja .exp
  4307 00003375 2C30                <1> .noexp:	sub al, 48
  4308 00003377 01C2                <1> 	add edx, eax
  4309 00003379 4E                  <1> 	dec esi
  4310 0000337A 41                  <1> 	inc ecx
  4311 0000337B EBDC                <1> 	jmp .txtlp
  4312 0000337D 81F900000000        <1> .exp:	cmp ecx, 0
  4313 00003383 74F0                <1> 	je .noexp
  4314 00003385 2C30                <1> 	sub al, 48
  4315 00003387 51                  <1> 	push ecx
  4316 00003388 89C3                <1> .expmul:	mov ebx, eax
  4317 0000338A 01D8                <1> 	add eax, ebx
  4318 0000338C 01D8                <1> 	add eax, ebx
  4319 0000338E 01D8                <1> 	add eax, ebx
  4320 00003390 01D8                <1> 	add eax, ebx
  4321 00003392 01D8                <1> 	add eax, ebx
  4322 00003394 01D8                <1> 	add eax, ebx
  4323 00003396 01D8                <1> 	add eax, ebx
  4324 00003398 01D8                <1> 	add eax, ebx
  4325 0000339A 01D8                <1> 	add eax, ebx
  4326 0000339C 81E901000000        <1> 	sub ecx, 1
  4327 000033A2 81F900000000        <1> 	cmp ecx, 0
  4328 000033A8 77DE                <1> 	ja .expmul
  4329 000033AA 01C2                <1> 	add edx, eax
  4330 000033AC 59                  <1> 	pop ecx
  4331 000033AD 4E                  <1> 	dec esi
  4332 000033AE 41                  <1> 	inc ecx
  4333 000033AF EBA8                <1> 	jmp .txtlp
  4334 000033B1 89D1                <1> .done: mov ecx, edx
  4335 000033B3 C3                  <1> 	ret
  4336                                      %include "source/programs.asm"
  4337 000033B4 FF2C                <1> filetypes db 255,44
  4338                              <1> progstart:		;programs start here
  4339                              <1> indexfiles:
  4340 000033B6 BE[B6330000]        <1> 	mov esi, progstart
  4341 000033BB BB[D8960300]        <1> 	mov ebx, fileindex
  4342 000033C0 BF[B6330000]        <1> 	mov edi, progstart
  4343 000033C5 81EF02000000        <1> 	sub edi, 2
  4344                              <1> indexloop:
  4345 000033CB 668B0E              <1> 	mov cx, [esi]
  4346                              <1> 	indexloop2:
  4347 000033CE 663B0F              <1> 		cmp cx, [edi]
  4348 000033D1 7424                <1> 		je indexloop2done
  4349 000033D3 81EF02000000        <1> 		sub edi, 2
  4350 000033D9 81FF[B4330000]      <1> 		cmp edi, filetypes
  4351 000033DF 73ED                <1> 		jae indexloop2
  4352 000033E1 BF[B6330000]        <1> 	mov edi, progstart
  4353 000033E6 81EF02000000        <1> 	sub edi, 2
  4354 000033EC 46                  <1> 	inc esi
  4355 000033ED 81FE[72500000]      <1> 	cmp esi, batchprogend
  4356 000033F3 734E                <1> 	jae indexloopdone
  4357 000033F5 EBD4                <1> 	jmp indexloop
  4358                              <1> indexloop2done:
  4359 000033F7 66890B              <1> 	mov [ebx], cx
  4360 000033FA 81C302000000        <1> 	add ebx, 2
  4361 00003400 81C602000000        <1> 	add esi, 2
  4362                              <1> 	nameindex:
  4363 00003406 8A0E                <1> 		mov cl, [esi]
  4364 00003408 80F900              <1> 		cmp cl, 0
  4365 0000340B 7406                <1> 		je nameindexdone
  4366 0000340D 880B                <1> 		mov [ebx], cl
  4367 0000340F 46                  <1> 		inc esi
  4368 00003410 43                  <1> 		inc ebx
  4369 00003411 EBF3                <1> 		jmp nameindex
  4370                              <1> 	nameindexdone:
  4371 00003413 43                  <1> 		inc ebx
  4372 00003414 66C7030000          <1> 		mov word [ebx], 0
  4373 00003419 81C302000000        <1> 		add ebx, 2
  4374 0000341F 46                  <1> 		inc esi
  4375 00003420 8933                <1> 		mov [ebx], esi
  4376 00003422 81C304000000        <1> 		add ebx, 4
  4377 00003428 66C7030000          <1> 		mov word [ebx], 0
  4378 0000342D 81C302000000        <1> 		add ebx, 2
  4379 00003433 81FB[D89A0300]      <1> 		cmp ebx, fileindexend
  4380 00003439 7308                <1> 		jae indexloopdone
  4381 0000343B 81C601000000        <1> 		add esi, 1
  4382 00003441 EB88                <1> 		jmp indexloop
  4383 00003443 C605[4B340000]01    <1> indexloopdone: 	mov byte [indexdone], 1
  4384 0000344A C3                  <1> 		ret
  4385 0000344B 00                  <1> indexdone db 0
  4386                              <1> %include 'source/programs/_comment.asm' ;#
  4387 0000344C FF2C2300            <2> 	db 255,44,"#",0	;this lets you rem stuff
  4388 00003450 C3                  <2> 	ret 
  4389                              <1> %include 'source/programs/_math.asm' ;!
  4390 00003451 FF2C2100            <2> db 255,44,"!",0
  4391                              <2> 	num:	
  4392 00003455 E8C5FBFFFF          <2> 		call clearbuffer
  4393 0000345A C605[DB360000]00    <2> 		mov byte [decimal], 0
  4394 00003461 C605[DC360000]00    <2> 		mov byte [decimal2], 0
  4395 00003468 8B35[602F0000]      <2> 		mov esi, [currentcommandloc]
  4396 0000346E 31C0                <2> 		xor eax, eax
  4397 00003470 31C9                <2> 		xor ecx, ecx
  4398 00003472 31DB                <2> 		xor ebx, ebx
  4399 00003474 8A06                <2> 	num2:	mov al, [esi]
  4400 00003476 3C2B                <2> 		cmp al, '+'
  4401 00003478 741B                <2> 		je operatorfound
  4402 0000347A 3C2D                <2> 		cmp al, '-'
  4403 0000347C 7417                <2> 		je operatorfound
  4404 0000347E 3C2A                <2> 		cmp al, '*'
  4405 00003480 7413                <2> 		je operatorfound
  4406 00003482 3C2F                <2> 		cmp al, '/'
  4407 00003484 740F                <2> 		je operatorfound
  4408 00003486 3C5E                <2> 		cmp al, '^'
  4409 00003488 740B                <2> 		je operatorfound
  4410 0000348A 46                  <2> 		inc esi
  4411 0000348B 3C00                <2> 		cmp al, 0
  4412 0000348D 0F841AF8FFFF        <2> 		je near nwcmd
  4413 00003493 EBDF                <2> 		jmp num2
  4414 00003495 50                  <2> 	operatorfound: push eax
  4415 00003496 30E4                <2> 		xor ah, ah
  4416 00003498 8826                <2> 		mov [esi], ah
  4417 0000349A 89F7                <2> 		mov edi, esi
  4418 0000349C 46                  <2> 		inc esi
  4419 0000349D 8A06                <2> 		mov al, [esi]
  4420 0000349F 3C25                <2> 		cmp al, '%'
  4421 000034A1 0F8462000000        <2> 		je near resultnum1
  4422                              <2> 	varnum2: 
  4423 000034A7 57                  <2> 		push edi
  4424 000034A8 E8A4000000          <2> 		call checkdecimal
  4425 000034AD 5F                  <2> 		pop edi
  4426 000034AE E880FEFFFF          <2> 		call cnvrttxt
  4427                              <2> 	vrnm2:
  4428 000034B3 89CB                <2> 		mov ebx, ecx
  4429 000034B5 53                  <2> 		push ebx
  4430 000034B6 E864FBFFFF          <2> 		call clearbuffer
  4431 000034BB 8B35[602F0000]      <2> 		mov esi, [currentcommandloc]
  4432 000034C1 89F7                <2> 		mov edi, esi
  4433 000034C3 46                  <2> 		inc esi
  4434 000034C4 8A06                <2> 		mov al, [esi]
  4435 000034C6 3C25                <2> 		cmp al, '%'
  4436 000034C8 0F844F000000        <2> 		je near resultnum2
  4437                              <2> 	varnum4: 
  4438 000034CE 57                  <2> 		push edi
  4439 000034CF E869000000          <2> 		call checkdecimal2
  4440 000034D4 5F                  <2> 		pop edi
  4441 000034D5 E859FEFFFF          <2> 		call cnvrttxt
  4442                              <2> 	vrnm4:
  4443 000034DA 5B                  <2> 		pop ebx
  4444 000034DB 58                  <2> 		pop eax
  4445 000034DC 3C2B                <2> 		cmp al, '+'
  4446 000034DE 0F849B000000        <2> 		je near plusnum
  4447 000034E4 3C2D                <2> 		cmp al, '-'
  4448 000034E6 0F849F000000        <2> 		je near subnum
  4449 000034EC 3C2A                <2> 		cmp al, '*'
  4450 000034EE 0F84A3000000        <2> 		je near mulnum
  4451 000034F4 3C2F                <2> 		cmp al, '/'
  4452 000034F6 0F84B1000000        <2> 		je near divnum
  4453 000034FC 3C5E                <2> 		cmp al, '^'
  4454 000034FE 0F84CE000000        <2> 		je near expnum
  4455 00003504 E9A4F7FFFF          <2> 		jmp nwcmd
  4456                              <2> 	resultnum1:
  4457 00003509 8A0D[DD360000]      <2> 		mov cl, [decimalresult]
  4458 0000350F 880D[DB360000]      <2> 		mov [decimal], cl
  4459 00003515 8B0D[DE360000]      <2> 		mov ecx, [result]
  4460 0000351B EB96                <2> 		jmp vrnm2
  4461                              <2> 	resultnum2:
  4462 0000351D 8A0D[DB360000]      <2> 		mov cl, [decimal]
  4463 00003523 880D[DC360000]      <2> 		mov [decimal2], cl
  4464 00003529 8A0D[DD360000]      <2> 		mov cl, [decimalresult]
  4465 0000352F 880D[DB360000]      <2> 		mov [decimal], cl
  4466 00003535 8B0D[DE360000]      <2> 		mov ecx, [result]
  4467 0000353B EB9D                <2> 		jmp vrnm4
  4468                              <2> 	checkdecimal2:
  4469 0000353D 8A25[DB360000]      <2> 		mov ah, [decimal]
  4470 00003543 8825[DC360000]      <2> 		mov [decimal2], ah
  4471 00003549 30E4                <2> 		xor ah, ah
  4472 0000354B 8825[DB360000]      <2> 		mov [decimal], ah
  4473                              <2> 	checkdecimal:
  4474 00003551 89F7                <2> 		mov edi, esi
  4475                              <2> 	chkdec1:
  4476 00003553 8A07                <2> 		mov al, [edi]
  4477 00003555 3C2E                <2> 		cmp al, '.'
  4478 00003557 0F840B000000        <2> 		je near fnddec
  4479 0000355D 3C00                <2> 		cmp al, 0
  4480 0000355F 0F8419000000        <2> 		je near nodecimal
  4481 00003565 47                  <2> 		inc edi
  4482 00003566 EBEB                <2> 		jmp chkdec1
  4483                              <2> 	fnddec:
  4484 00003568 8A4701              <2> 		mov al, [edi + 1]
  4485 0000356B 8807                <2> 		mov [edi], al
  4486 0000356D 3C00                <2> 		cmp al, 0
  4487 0000356F 0F8409000000        <2> 		je near nodecimal
  4488 00003575 FE05[DB360000]      <2> 		inc byte [decimal]
  4489 0000357B 47                  <2> 		inc edi
  4490 0000357C EBEA                <2> 		jmp fnddec
  4491                              <2> 	nodecimal:
  4492 0000357E C3                  <2> 		ret
  4493                              <2> 	plusnum:
  4494 0000357F E815010000          <2> 		call decaddfix
  4495 00003584 01D9                <2> 		add ecx, ebx
  4496 00003586 E98A000000          <2> 		jmp retnum
  4497                              <2> 	subnum:
  4498 0000358B E809010000          <2> 		call decaddfix
  4499 00003590 29D9                <2> 		sub ecx, ebx
  4500 00003592 E97E000000          <2> 		jmp retnum
  4501                              <2> 	mulnum:
  4502 00003597 A0[DC360000]        <2> 		mov al, [decimal2]
  4503 0000359C 0005[DB360000]      <2> 		add [decimal], al
  4504 000035A2 89C8                <2> 		mov eax, ecx
  4505 000035A4 F7E3                <2> 		mul ebx
  4506 000035A6 89C1                <2> 		mov ecx, eax
  4507 000035A8 E968000000          <2> 		jmp retnum
  4508                              <2> 	divnum:
  4509 000035AD E8E7000000          <2> 		call decaddfix
  4510 000035B2 30C0                <2> 		xor al, al
  4511 000035B4 A2[DB360000]        <2> 		mov [decimal], al
  4512 000035B9 31D2                <2> 		xor edx, edx
  4513 000035BB 89C8                <2> 		mov eax, ecx
  4514 000035BD 81FB00000000        <2> 		cmp ebx, 0
  4515 000035C3 0F844C000000        <2> 		je near retnum
  4516 000035C9 F7F3                <2> 		div ebx
  4517 000035CB 89C1                <2> 		mov ecx, eax
  4518 000035CD E943000000          <2> 		jmp retnum
  4519                              <2> 	expnum:
  4520 000035D2 8A15[DB360000]      <2> 		mov dl, [decimal]
  4521 000035D8 8815[DC360000]      <2> 		mov [decimal2], dl
  4522 000035DE 31D2                <2> 		xor edx, edx
  4523 000035E0 89C8                <2> 		mov eax, ecx
  4524 000035E2 89D9                <2> 		mov ecx, ebx
  4525 000035E4 89C3                <2> 		mov ebx, eax
  4526 000035E6 81F900000000        <2> 		cmp ecx, 0
  4527 000035EC 7422                <2> 		je noexpnum
  4528 000035EE 49                  <2> 		dec ecx
  4529 000035EF 81F900000000        <2> 		cmp ecx, 0
  4530 000035F5 7412                <2> 		je noexpnumlp
  4531 000035F7 F7E3                <2> 	expnumlp: mul ebx
  4532 000035F9 8A15[DC360000]      <2> 		mov dl, [decimal2]
  4533 000035FF 0015[DB360000]      <2> 		add [decimal], dl
  4534 00003605 31D2                <2> 		xor edx, edx
  4535 00003607 E2EE                <2> 		loop expnumlp
  4536                              <2> 	noexpnumlp:
  4537 00003609 89C1                <2> 		mov ecx, eax
  4538 0000360B E905000000          <2> 		jmp retnum
  4539                              <2> 	noexpnum:
  4540 00003610 B901000000          <2> 		mov ecx, 1
  4541                              <2> 	retnum: 
  4542 00003615 BE[6CB50300]        <2> 		mov esi, numbuf
  4543 0000361A 890D[DE360000]      <2> 		mov [result], ecx
  4544 00003620 E80FFAFFFF          <2> 		call convert
  4545 00003625 BE[6CB50300]        <2> 		mov esi, numbuf
  4546 0000362A 8A25[DB360000]      <2> 		mov ah, [decimal]
  4547 00003630 8825[DD360000]      <2> 		mov [decimalresult], ah
  4548 00003636 80FC00              <2> 		cmp ah, 0
  4549 00003639 0F8425000000        <2> 		je near noputdecimal
  4550                              <2> 	putdecimal:
  4551 0000363F 4E                  <2> 		dec esi
  4552 00003640 FECC                <2> 		dec ah
  4553 00003642 80FC00              <2> 		cmp ah, 0
  4554 00003645 0F87F4FFFFFF        <2> 		ja near putdecimal
  4555 0000364B 4E                  <2> 		dec esi
  4556 0000364C 8A06                <2> 		mov al, [esi]
  4557 0000364E C6062E              <2> 		mov byte [esi], '.'
  4558                              <2> 	decputloop:
  4559 00003651 4E                  <2> 		dec esi
  4560 00003652 8A26                <2> 		mov ah, [esi]
  4561 00003654 8806                <2> 		mov [esi], al
  4562 00003656 88E0                <2> 		mov al, ah
  4563 00003658 81FE[58B50300]      <2> 		cmp esi, buf2
  4564 0000365E 0F87EDFFFFFF        <2> 		ja near decputloop
  4565                              <2> 	noputdecimal:
  4566 00003664 BE[58B50300]        <2> 		mov esi, buf2
  4567 00003669 E809000000          <2> 		call chkadd
  4568 0000366E E93AF6FFFF          <2> 		jmp nwcmd
  4569 00003673 00000000            <2> edxnumbuf dw 0,0
  4570 00003677 8A06                <2> 	chkadd: mov al, [esi]
  4571 00003679 3C30                <2> 		cmp al, '0'
  4572 0000367B 750C                <2> 		jne dnadd
  4573 0000367D 46                  <2> 		inc esi
  4574 0000367E 81FE[6CB50300]      <2> 		cmp esi, numbuf
  4575 00003684 7402                <2> 		je dnaddm1
  4576 00003686 EBEF                <2> 		jmp chkadd
  4577 00003688 4E                  <2> 	dnaddm1: dec esi
  4578 00003689 E888E6FFFF          <2> 	dnadd:	call print
  4579 0000368E BE[3F820000]        <2> 		mov esi, line
  4580 00003693 E87EE6FFFF          <2> 		call print
  4581 00003698 C3                  <2> 		ret
  4582                              <2> 		
  4583                              <2> 	decaddfix:
  4584 00003699 A0[DC360000]        <2> 		mov al, [decimal2]
  4585 0000369E 8A25[DB360000]      <2> 		mov ah, [decimal]
  4586 000036A4 38E0                <2> 		cmp al, ah
  4587 000036A6 7432                <2> 		je gooddecadd
  4588 000036A8 38E0                <2> 		cmp al, ah
  4589 000036AA 721A                <2> 		jb lowdecadd
  4590                              <2> 	highdecadd:
  4591 000036AC FEC4                <2> 		inc ah
  4592 000036AE 89CA                <2> 		mov edx, ecx
  4593 000036B0 C1E103              <2> 		shl ecx, 3
  4594 000036B3 01D1                <2> 		add ecx, edx
  4595 000036B5 01D1                <2> 		add ecx, edx
  4596 000036B7 38E0                <2> 		cmp al, ah
  4597 000036B9 77F1                <2> 		ja highdecadd
  4598 000036BB 8825[DB360000]      <2> 		mov [decimal], ah
  4599 000036C1 E914000000          <2> 		jmp gooddecadd
  4600                              <2> 	lowdecadd:
  4601 000036C6 FEC0                <2> 		inc al
  4602 000036C8 89DA                <2> 		mov edx, ebx
  4603 000036CA C1E303              <2> 		shl ebx, 3
  4604 000036CD 01D3                <2> 		add ebx, edx
  4605 000036CF 01D3                <2> 		add ebx, edx
  4606 000036D1 38E0                <2> 		cmp al, ah
  4607 000036D3 72F1                <2> 		jb lowdecadd
  4608 000036D5 A2[DB360000]        <2> 		mov [decimal], al
  4609                              <2> 	gooddecadd:
  4610 000036DA C3                  <2> 		ret
  4611                              <2> 		
  4612 000036DB 00                  <2> decimal db 0
  4613 000036DC 00                  <2> decimal2 db 0
  4614 000036DD 00                  <2> decimalresult db 0
  4615 000036DE 00000000            <2> result dd 0
  4616                              <1> %include 'source/programs/_variables.asm' ;% and $
  4617 000036E2 FF2C2500            <2> db 255,44,"%",0
  4618                              <2> 	ans:
  4619 000036E6 BE[58B50300]        <2> 		mov esi, buf2
  4620 000036EB E887FFFFFF          <2> 		call chkadd
  4621 000036F0 C3                  <2> 		ret
  4622                              <2> 		
  4623 000036F1 FF2C2400            <2> db 255,44,"$",0
  4624 000036F5 8B35[602F0000]      <2> var: mov esi, [currentcommandloc]
  4625 000036FB BB[589D0300]        <2> 	mov ebx, variables
  4626 00003700 8A06                <2> lkeq:	mov al, [esi]
  4627 00003702 3C3D                <2> 	cmp al, '='
  4628 00003704 741B                <2> 	je eqfnd	;is there an '=' sign?
  4629 00003706 3C00                <2> 	cmp al, 0
  4630 00003708 7403                <2> 	je echovars
  4631 0000370A 46                  <2> 	inc esi
  4632 0000370B EBF3                <2> 	jmp lkeq
  4633 0000370D BE[589D0300]        <2> echovars: mov esi, variables
  4634 00003712 BB[58AD0300]        <2> 	mov ebx, varend
  4635 00003717 B105                <2> 	mov cl, 5
  4636 00003719 B504                <2> 	mov ch, 4
  4637 0000371B E89EF8FFFF          <2> 	call array
  4638 00003720 C3                  <2> 	ret
  4639 00003721 46                  <2> eqfnd:	inc esi
  4640 00003722 8A06                <2> 	mov al, [esi]
  4641 00003724 3C00                <2> 	cmp al, 0
  4642 00003726 7410                <2> 	je readvar
  4643 00003728 8B35[602F0000]      <2> 	mov esi, [currentcommandloc]
  4644 0000372E BB[589D0300]        <2> 	mov ebx, variables
  4645 00003733 E919000000          <2> 	jmp seek
  4646                              <2> readvar:
  4647 00003738 B00A                <2> 	mov al, 10
  4648 0000373A 66BB0700            <2> 	mov bx, 7
  4649 0000373E C605[FA220000]00    <2> 	mov byte [commandedit], 0
  4650 00003745 BF[58B50300]        <2> 	mov edi, buftxtend
  4651 0000374A E8FAE6FFFF          <2> 	call rdprint
  4652 0000374F EBA4                <2> 	jmp var
  4653 00003751 668B03              <2> seek:	mov ax, [ebx]
  4654 00003754 B105                <2> 	mov cl, 5
  4655 00003756 B504                <2> 	mov ch, 4
  4656 00003758 663D0000            <2> 	cmp ax, 0
  4657 0000375C 0F845B000000        <2> 	je near save
  4658 00003762 6639C8              <2> 	cmp ax, cx
  4659 00003765 7403                <2> 	je skfnd
  4660 00003767 43                  <2> 	inc ebx
  4661 00003768 EBE7                <2> 	jmp seek
  4662 0000376A 8B35[602F0000]      <2> skfnd:	mov esi, [currentcommandloc]
  4663 00003770 46                  <2> 	inc esi
  4664 00003771 81C302000000        <2> 	add ebx, 2
  4665 00003777 89DF                <2> 	mov edi, ebx
  4666 00003779 B13D                <2> 	mov cl, '='
  4667 0000377B E81FF8FFFF          <2> 	call cndtest
  4668 00003780 3C01                <2> 	cmp al, 1	
  4669 00003782 7418                <2> 	je varfnd
  4670 00003784 89FB                <2> 	mov ebx, edi
  4671 00003786 8B35[602F0000]      <2> 	mov esi, [currentcommandloc]
  4672 0000378C 668B03              <2> 	mov ax, [ebx]
  4673 0000378F 663D0000            <2> 	cmp ax, 0
  4674 00003793 0F8424000000        <2> 	je near save
  4675 00003799 43                  <2> 	inc ebx
  4676 0000379A EBB5                <2> 	jmp seek
  4677 0000379C 8A03                <2> varfnd:	mov al, [ebx]
  4678 0000379E 3C04                <2> 	cmp al, 4
  4679 000037A0 7404                <2> 	je save2
  4680 000037A2 4B                  <2> 	dec ebx
  4681 000037A3 4E                  <2> 	dec esi
  4682 000037A4 EBF6                <2> 	jmp varfnd
  4683 000037A6 4B                  <2> save2:	dec ebx
  4684 000037A7 4E                  <2> 	dec esi
  4685 000037A8 8A03                <2> 	mov al, [ebx]
  4686 000037AA 3C05                <2> 	cmp al, 5
  4687 000037AC 7402                <2> 	je remove
  4688 000037AE EBEC                <2> 	jmp varfnd
  4689 000037B0 8A03                <2> remove: mov al, [ebx]
  4690 000037B2 3C00                <2> 	cmp al, 0
  4691 000037B4 749B                <2> 	je seek
  4692 000037B6 30C0                <2> 	xor al, al
  4693 000037B8 8803                <2> 	mov [ebx], al
  4694 000037BA 43                  <2> 	inc ebx
  4695 000037BB EBF3                <2> 	jmp remove	;do not need for now-need defragmentation
  4696 000037BD 8B35[602F0000]      <2> save:	mov esi, [currentcommandloc]
  4697 000037C3 43                  <2> 	inc ebx
  4698 000037C4 B005                <2> 	mov al, 5
  4699 000037C6 B404                <2> 	mov ah, 4
  4700 000037C8 668903              <2> 	mov [ebx], ax
  4701 000037CB 43                  <2> 	inc ebx
  4702 000037CC 43                  <2> svhere:	inc ebx
  4703 000037CD 46                  <2> 	inc esi
  4704 000037CE 8A06                <2> 	mov al, [esi]
  4705 000037D0 3C00                <2> 	cmp al, 0
  4706 000037D2 0F844A000000        <2> 	je near svdone
  4707 000037D8 3C25                <2> 	cmp al, '%'
  4708 000037DA 7404                <2> 	je ans2
  4709 000037DC 8803                <2> 	mov [ebx], al	
  4710 000037DE EBEC                <2> 	jmp svhere
  4711 000037E0 56                  <2> ans2:	push esi
  4712 000037E1 BE[58B50300]        <2> 	mov esi, buf2
  4713 000037E6 E823000000          <2> 	call ansfnd
  4714 000037EB E803000000          <2> 	call anscp
  4715 000037F0 5E                  <2> 	pop esi
  4716 000037F1 EBD9                <2> 	jmp svhere
  4717 000037F3 8A06                <2> anscp:	mov al, [esi]
  4718 000037F5 8803                <2> 	mov [ebx], al
  4719 000037F7 81FE[6CB50300]      <2> 	cmp esi, numbuf
  4720 000037FD 74CD                <2> 	je svhere
  4721 000037FF 3C00                <2> 	cmp al, 0
  4722 00003801 74C9                <2> 	je svhere
  4723 00003803 43                  <2> 	inc ebx
  4724 00003804 46                  <2> 	inc esi
  4725 00003805 EBEC                <2> 	jmp anscp
  4726 00003807 5E                  <2> ansnf:	pop esi
  4727 00003808 8A06                <2> 	mov al, [esi]
  4728 0000380A 8803                <2> 	mov [ebx], al
  4729 0000380C EBBE                <2> 	jmp svhere
  4730 0000380E 46                  <2> ansfnd:	inc esi
  4731 0000380F 81FE[6BB50300]      <2> 	cmp esi, numbuf - 1
  4732 00003815 740A                <2> 	je fndans
  4733 00003817 8A06                <2> 	mov al, [esi]
  4734 00003819 3C00                <2> 	cmp al, 0
  4735 0000381B 74EA                <2> 	je ansnf
  4736 0000381D 3C30                <2> 	cmp al, '0'
  4737 0000381F 74ED                <2> 	je ansfnd
  4738                              <2> fndans:
  4739 00003821 C3                  <2> 	ret
  4740 00003822 30C0                <2> svdone:	xor al, al
  4741 00003824 8803                <2> 	mov [ebx], al
  4742 00003826 C3                  <2> 	ret
  4743                              <1> %include 'source/programs/_run.asm' ;./
  4744                              <2> 
  4745 00003827 7F454C46            <2> 	elfstart db 0x7F,"ELF"
  4746 0000382B FF2C2E2F00          <2> 	db 255,44,"./",0
  4747                              <2> rundiskprog:
  4748 00003830 8B3D[602F0000]      <2> 	mov edi, [currentcommandloc]
  4749 00003836 81C702000000        <2> 	add edi, 2
  4750 0000383C BE00004000          <2> 	mov esi, 0x400000
  4751 00003841 E8992A0000          <2> 	call loadfile
  4752 00003846 81FA94010000        <2> 	cmp edx, 404
  4753 0000384C 746A                <2> 	je noprogfound
  4754 0000384E BB00004000          <2> 	mov ebx, 0x400000
  4755 00003853 A1[27380000]        <2> 	mov eax, [elfstart]
  4756 00003858 3903                <2> 	cmp [ebx], eax
  4757 0000385A 0F8437000000        <2> 	je near runelf
  4758 00003860 66813B4558          <2> 	cmp word [ebx], "EX"
  4759 00003865 7577                <2> 	jne progbatchfound
  4760 00003867 81C302000000        <2> 	add ebx, 2
  4761 0000386D 8B3D[602F0000]      <2> 	mov edi, [currentcommandloc]
  4762 00003873 81C702000000        <2> 	add edi, 2
  4763                              <2> findspaceprog:
  4764 00003879 8A07                <2> 	mov al, [edi]
  4765 0000387B 47                  <2> 	inc edi
  4766 0000387C 3C20                <2> 	cmp al, " "
  4767 0000387E 75F9                <2> 	jne findspaceprog
  4768                              <2> findnonspaceprog:
  4769 00003880 8A07                <2> 	mov al, [edi]
  4770 00003882 47                  <2> 	inc edi
  4771 00003883 3C20                <2> 	cmp al, " "
  4772 00003885 74F9                <2> 	je findnonspaceprog
  4773 00003887 4F                  <2> 	dec edi
  4774 00003888 8925[D89A0300]      <2> 	mov [previousstack], esp
  4775 0000388E FFD3                <2> 	call ebx
  4776 00003890 8B25[D89A0300]      <2> 	mov esp, [previousstack]
  4777 00003896 C3                  <2> 	ret
  4778                              <2> runelf:
  4779 00003897 8B3D[602F0000]      <2> 	mov edi, [currentcommandloc]
  4780 0000389D 81C702000000        <2> 	add edi, 2
  4781 000038A3 81C380000000        <2> 	add ebx, 0x80
  4782 000038A9 8925[D89A0300]      <2> 	mov [previousstack], esp
  4783 000038AF FFD3                <2> 	call ebx
  4784 000038B1 8B25[D89A0300]      <2> 	mov esp, [previousstack]
  4785 000038B7 C3                  <2> 	ret
  4786                              <2> noprogfound:
  4787 000038B8 BE[06820000]        <2> 	mov esi, notfound1
  4788 000038BD E854E4FFFF          <2> 	call print
  4789 000038C2 8B35[602F0000]      <2> 	mov esi, [currentcommandloc]
  4790 000038C8 81C602000000        <2> 	add esi, 2
  4791 000038CE E843E4FFFF          <2> 	call print
  4792 000038D3 BE[0E820000]        <2> 	mov esi, notfound2
  4793 000038D8 E839E4FFFF          <2> 	call print
  4794 000038DD C3                  <2> 	ret
  4795                              <2> progbatchfound:
  4796 000038DE BF00004000          <2> 		mov edi, 0x400000
  4797 000038E3 C605[529D0300]01    <2> 		mov byte [BATCHISON], 1
  4798                              <2> 	batchrunloop:
  4799 000038EA E89BF3FFFF          <2> 		call buftxtclear
  4800 000038EF BE[58B10300]        <2> 		mov esi, buftxt
  4801 000038F4 8935[602F0000]      <2> 		mov [currentcommandloc], esi
  4802                              <2> 	batchrunloop2:
  4803 000038FA B10A                <2> 		mov cl, 10
  4804 000038FC B50D                <2> 		mov ch, 13
  4805 000038FE 380F                <2> 		cmp [edi], cl
  4806 00003900 0F8419000000        <2> 		je near nxtbatchrunline
  4807 00003906 382F                <2> 		cmp [edi], ch
  4808 00003908 0F8411000000        <2> 		je near nxtbatchrunline
  4809 0000390E 803F00              <2> 		cmp byte [edi], 0
  4810 00003911 0F8408000000        <2> 		je near nxtbatchrunline
  4811 00003917 8A07                <2> 		mov al, [edi]
  4812 00003919 8806                <2> 		mov [esi], al
  4813 0000391B 46                  <2> 		inc esi
  4814 0000391C 47                  <2> 		inc edi
  4815 0000391D EBDB                <2> 		jmp batchrunloop2
  4816                              <2> 	nxtbatchrunline:
  4817 0000391F 47                  <2> 		inc edi
  4818 00003920 380F                <2> 		cmp [edi], cl
  4819 00003922 74FB                <2> 		je nxtbatchrunline
  4820 00003924 382F                <2> 		cmp [edi], ch
  4821 00003926 74F7                <2> 		je nxtbatchrunline
  4822 00003928 893D[86390000]      <2> 		mov [batchedi], edi
  4823 0000392E 893D[4E9D0300]      <2> 		mov [BATCHPOS], edi
  4824 00003934 C60600              <2> 		mov byte [esi], 0
  4825 00003937 BE[58B10300]        <2> 		mov esi, buftxt
  4826 0000393C 803E00              <2> 		cmp byte [esi], 0
  4827 0000393F 0F8439000000        <2> 		je near nobatchfoundrun
  4828 00003945 31DB                <2> 		xor ebx, ebx
  4829 00003947 8A1D[E99C0300]      <2> 		mov bl, [IFON]
  4830 0000394D 80FB00              <2> 		cmp bl, 0
  4831 00003950 0F8534000000        <2> 		jne near iftestbatch
  4832                              <2> 	doneiftest:
  4833 00003956 803D[5C3A0000]00    <2> 		cmp byte [runnextline], 0
  4834 0000395D 0F8405000000        <2> 		je near noruniftest
  4835 00003963 E822F5FFFF          <2> 		call run
  4836                              <2> 	noruniftest:
  4837 00003968 C605[5C3A0000]01    <2> 		mov byte [runnextline], 1
  4838 0000396F 8B3D[86390000]      <2> 		mov edi, [batchedi]
  4839 00003975 803F00              <2> 		cmp byte [edi], 0
  4840 00003978 0F856CFFFFFF        <2> 		jne near batchrunloop
  4841                              <2> 	nobatchfoundrun:
  4842 0000397E C605[529D0300]00    <2> 		mov byte [BATCHISON], 0
  4843 00003985 C3                  <2> 		ret
  4844                              <2> 	
  4845 00003986 00000000            <2> batchedi dd 0	
  4846                              <2> 	
  4847                              <2> 	iftestbatch:
  4848 0000398A BE[EA9C0300]        <2> 		mov esi, IFTRUE
  4849 0000398F 01DE                <2> 		add esi, ebx
  4850 00003991 803E00              <2> 		cmp byte [esi], 0
  4851 00003994 0F85BCFFFFFF        <2> 		jne near doneiftest
  4852 0000399A 881D[5D3A0000]      <2> 		mov [iffalsebuf], bl
  4853 000039A0 803D[539D0300]01    <2> 		cmp byte [LOOPON], 1
  4854 000039A7 0F8513000000        <2> 		jne near fifindbatch
  4855 000039AD E938FFFFFF          <2> 		jmp batchrunloop
  4856                              <2> 	elsetestbatch:
  4857 000039B2 C60601              <2> 		mov byte [esi], 1
  4858 000039B5 81C705000000        <2> 		add edi, 5
  4859 000039BB E92AFFFFFF          <2> 		jmp batchrunloop
  4860                              <2> 	fifindbatch:
  4861 000039C0 66B96966            <2> 		mov cx, "if"
  4862 000039C4 66B86669            <2> 		mov ax, "fi"
  4863 000039C8 663907              <2> 		cmp [edi], ax
  4864 000039CB 0F8424000000        <2> 		je near fifoundbatch
  4865 000039D1 66390F              <2> 		cmp [edi], cx
  4866 000039D4 0F8465000000        <2> 		je near iffoundbatch
  4867 000039DA 803F00              <2> 		cmp byte [edi], 0
  4868 000039DD 0F8412000000        <2> 		je near fifoundbatch
  4869 000039E3 B8656C7365          <2> 		mov eax, "else"
  4870 000039E8 3907                <2> 		cmp [edi], eax
  4871 000039EA 0F84C2FFFFFF        <2> 		je near elsetestbatch
  4872 000039F0 E973FFFFFF          <2> 		jmp noruniftest
  4873                              <2> 	fifoundbatch:
  4874 000039F5 81C702000000        <2> 		add edi, 2
  4875 000039FB B00A                <2> 		mov al, 10
  4876 000039FD 3807                <2> 		cmp [edi], al
  4877 000039FF 0F840B000000        <2> 		je near goodfibatch
  4878 00003A05 803F00              <2> 		cmp byte [edi], 0
  4879 00003A08 0F8470FFFFFF        <2> 		je near nobatchfoundrun
  4880 00003A0E EBB0                <2> 		jmp fifindbatch
  4881                              <2> 	goodfibatch:
  4882 00003A10 B001                <2> 		mov al, 1
  4883 00003A12 2805[E99C0300]      <2> 		sub [IFON], al 
  4884 00003A18 A0[E99C0300]        <2> 		mov al, [IFON]
  4885 00003A1D 8A1D[5D3A0000]      <2> 		mov bl, [iffalsebuf]
  4886 00003A23 38D8                <2> 		cmp al, bl
  4887 00003A25 7799                <2> 		ja fifindbatch
  4888 00003A27 8B35[602F0000]      <2> 		mov esi, [currentcommandloc]
  4889 00003A2D 81EF02000000        <2> 		sub edi, 2
  4890 00003A33 C605[5C3A0000]00    <2> 		mov byte [runnextline], 0
  4891 00003A3A E9ABFEFFFF          <2> 		jmp batchrunloop
  4892                              <2> 	iffoundbatch:
  4893 00003A3F B020                <2> 		mov al, ' '
  4894 00003A41 81C702000000        <2> 		add edi, 2
  4895 00003A47 3807                <2> 		cmp [edi], al
  4896 00003A49 0F8571FFFFFF        <2> 		jne near fifindbatch
  4897 00003A4F B001                <2> 		mov al, 1
  4898 00003A51 0005[E99C0300]      <2> 		add [IFON], al
  4899 00003A57 E964FFFFFF          <2> 		jmp fifindbatch
  4900                              <2> 		
  4901                              <2> 		
  4902 00003A5C 01                  <2> runnextline db 1
  4903 00003A5D 00                  <2> iffalsebuf db 0
  4904 00003A5E C3                  <2> notbatch: ret 
  4905                              <1> %ifdef network.included
  4906                              <1> 	%include 'source/programs/arp.asm'
  4907                              <1> %endif
  4908                              <1> %include 'source/programs/batch.asm'
  4909 00003A5F FF2C626174636800    <2> db 255,44,"batch",0
  4910                              <2> 	batchst: 
  4911 00003A67 8B3D[602F0000]      <2> 		mov edi, [currentcommandloc]
  4912 00003A6D 81C706000000        <2> 		add edi, 6
  4913 00003A73 803F00              <2> 		cmp byte [edi], 0
  4914 00003A76 0F846D000000        <2> 		je near nonamefound
  4915 00003A7C BE00004000          <2> 		mov esi, 0x400000
  4916 00003A81 E859280000          <2> 		call loadfile
  4917 00003A86 89D0                <2> 		mov eax, edx
  4918 00003A88 3D94010000          <2> 		cmp eax, 404
  4919 00003A8D 7465                <2> 		je goodbatchname
  4920 00003A8F BE[9A3A0000]        <2> 		mov esi, badbatchname
  4921 00003A94 E87DE2FFFF          <2> 		call print
  4922 00003A99 C3                  <2> 		ret
  4923 00003A9A 546869732066696C65- <2> 		badbatchname db "This file already exists!",10,0
  4924 00003AA3 20616C726561647920- <2>
  4925 00003AAC 657869737473210A00  <2>
  4926 00003AB5 596F75206861766520- <2> 		namenotfoundbatch db "You have to type a name after the command.",10,0
  4927 00003ABE 746F20747970652061- <2>
  4928 00003AC7 206E616D6520616674- <2>
  4929 00003AD0 65722074686520636F- <2>
  4930 00003AD9 6D6D616E642E0A00    <2>
  4931 00003AE1 00000000            <2> 		esicache3 dd 0
  4932 00003AE5 00000000            <2> 		esicache2 dd 0
  4933                              <2> 	nonamefound:
  4934 00003AE9 BE[B53A0000]        <2> 		mov esi, namenotfoundbatch
  4935 00003AEE E823E2FFFF          <2> 		call print
  4936 00003AF3 C3                  <2> 		ret
  4937                              <2> 	goodbatchname:
  4938 00003AF4 BE00004000          <2> 		mov esi, 0x400000
  4939                              <2> 	batchcreate:
  4940 00003AF9 8935[E13A0000]      <2> 		mov [esicache3], esi
  4941 00003AFF BF00008000          <2> 		mov edi, 0x800000
  4942 00003B04 B00A                <2> 		mov al, 10
  4943 00003B06 B307                <2> 		mov bl, 7
  4944 00003B08 B404                <2> 		mov ah, 4
  4945 00003B0A CD30                <2> 		int 30h
  4946 00003B0C 8935[E53A0000]      <2> 		mov [esicache2], esi
  4947 00003B12 8A0E                <2> 		mov cl, [esi]
  4948 00003B14 8B35[E13A0000]      <2> 		mov esi, [esicache3]
  4949 00003B1A BB[4E3B0000]        <2> 		mov ebx, exitword
  4950 00003B1F E87BF4FFFF          <2> 		call cndtest
  4951 00003B24 3C01                <2> 		cmp al, 1
  4952 00003B26 7411                <2> 		je endbatchcreate
  4953 00003B28 3C02                <2> 		cmp al, 2
  4954 00003B2A 740D                <2> 		je endbatchcreate
  4955 00003B2C 8B35[E53A0000]      <2> 		mov esi, [esicache2]
  4956 00003B32 B00A                <2> 		mov al, 10
  4957 00003B34 8806                <2> 		mov [esi], al
  4958 00003B36 46                  <2> 		inc esi
  4959 00003B37 EBC0                <2> 		jmp batchcreate
  4960                              <2> 	endbatchcreate:
  4961 00003B39 8B35[E13A0000]      <2> 		mov esi, [esicache3]
  4962 00003B3F 31C0                <2> 		xor eax, eax
  4963 00003B41 8806                <2> 		mov [esi], al
  4964 00003B43 BE00004000          <2> 		mov esi, 0x400000
  4965 00003B48 E8C9E1FFFF          <2> 		call print
  4966 00003B4D C3                  <2> 		ret
  4967                              <2> 	
  4968 00003B4E 5C7800              <2> 	exitword db "\x",0
  4969 00003B51 54797065205C782074- <2> 	wordmsg db "Type \x to exit.",10,0
  4970 00003B5A 6F20657869742E0A00  <2>
  4971                              <1> %ifdef gui.background
  4972                              <1> 	%include 'source/programs/background.asm'
  4973                              <1> %endif
  4974                              <1> %include 'source/programs/beep.asm'
  4975 00003B63 FF2C6265657000      <2> 	db 255,44,"beep",0
  4976                              <2> beep:
  4977 00003B6A B8[8F3B0000]        <2> 	mov eax, beepstart
  4978 00003B6F A3[5F020000]        <2> 	mov [soundpos], eax
  4979 00003B74 B8[933B0000]        <2> 	mov eax, beepend
  4980 00003B79 A3[63020000]        <2> 	mov [soundendpos], eax
  4981 00003B7E C605[5C020000]01    <2> 	mov byte [soundon], 1
  4982                              <2> waitforsoundendbeep:
  4983 00003B85 A0[5C020000]        <2> 	mov al, [soundon]
  4984 00003B8A 3C00                <2> 	cmp al, 0
  4985 00003B8C 75F7                <2> 	jne waitforsoundendbeep
  4986 00003B8E C3                  <2> 	ret
  4987                              <2> 	
  4988                              <2> beepstart:
  4989 00003B8F 3200D111            <2> 	dw 50, 4561
  4990                              <2> beepend:
  4991                              <1> %ifdef dos.compatible
  4992                              <1> %else
  4993                              <1> 	%include 'source/programs/boot.asm'
  4994 00003B93 FF2C626F6F7400      <2> db 255,44,"boot",0
  4995                              <2> quickboot:
  4996                              <2> 	;load and jump to the bootloader
  4997                              <2> 	; mov ecx, 1
  4998                              <2> 	; xor ebx, ebx
  4999                              <2> 	; mov esi, 0x400000
  5000                              <2> 	; call diskr
  5001                              <2> 	; mov ax, LINEAR_SEL
  5002                              <2> 	; mov fs, ax
  5003                              <2> 	; mov esi, 0x400000
  5004                              <2> 	; mov edi, 0x7C00
  5005                              <2> 	; xor ebx, ebx
  5006                              <2> ; .lp:
  5007                              <2> 	; mov ecx, [esi+ebx]
  5008                              <2> 	; mov [fs:edi+ebx], ecx
  5009                              <2> 	; add ebx, 4
  5010                              <2> 	; cmp ebx, 512
  5011                              <2> 	; jb .lp
  5012 00003B9A 66BB[AA3B]          <2> 	mov bx, bootload
  5013 00003B9E 66891D[CB0C0000]    <2> 	mov [realmodeptr], bx
  5014 00003BA5 E906D0FFFF          <2> 	jmp realmode
  5015                              <2> [BITS 16]
  5016                              <2> bootload:
  5017 00003BAA B80300              <2> 	mov ax, 3
  5018 00003BAD 31DB                <2> 	xor bx, bx
  5019 00003BAF CD10                <2> 	int 10h
  5020 00003BB1 EA007C0000          <2> 	jmp 0:0x7C00
  5021                              <2> [BITS 32]
  5022                              <1> %endif
  5023                              <1> %include 'source/programs/cd.asm'
  5024 00003BB6 FF2C636400          <2> db 255,44,"cd",0
  5025                              <2> cd:
  5026 00003BBB 8B35[602F0000]      <2> 	mov esi, [currentcommandloc]
  5027 00003BC1 81C603000000        <2> 	add esi, 3
  5028 00003BC7 8B3D[E09A0300]      <2> 	mov edi, [currentfolderloc]
  5029 00003BCD 893D[DC9A0300]      <2> 	mov [lastfolderloc], edi
  5030 00003BD3 81C7[E49A0300]      <2> 	add edi, currentfolder
  5031 00003BD9 4F                  <2> 	dec edi
  5032 00003BDA 66813E2E2E          <2> 	cmp word [esi], ".."
  5033 00003BDF 742A                <2> 	je .moveup
  5034 00003BE1 47                  <2> 	inc edi
  5035                              <2> .movedown:
  5036 00003BE2 8A06                <2> 	mov al, [esi]
  5037 00003BE4 8807                <2> 	mov [edi], al
  5038 00003BE6 47                  <2> 	inc edi
  5039 00003BE7 46                  <2> 	inc esi
  5040 00003BE8 3C00                <2> 	cmp al, 0
  5041 00003BEA 740A                <2> 	je .donecd
  5042 00003BEC 81FF[E49C0300]      <2> 	cmp edi, currentfolderend
  5043 00003BF2 72EE                <2> 	jb .movedown
  5044 00003BF4 30C0                <2> 	xor al, al
  5045                              <2> .donecd:
  5046 00003BF6 4F                  <2> 	dec edi
  5047 00003BF7 C6072F              <2> 	mov byte [edi], '/'
  5048 00003BFA 47                  <2> 	inc edi
  5049 00003BFB C60700              <2> 	mov byte [edi], 0
  5050 00003BFE 81EF[E49A0300]      <2> 	sub edi, currentfolder
  5051 00003C04 893D[E09A0300]      <2> 	mov [currentfolderloc], edi
  5052 00003C0A C3                  <2> 	ret
  5053                              <2> .moveup:
  5054 00003C0B 31C0                <2> 	xor eax, eax
  5055 00003C0D A3[DC9A0300]        <2> 	mov [lastfolderloc], eax
  5056                              <2> .moveuploop:
  5057 00003C12 4F                  <2> 	dec edi
  5058 00003C13 8A07                <2> 	mov al, [edi]
  5059 00003C15 81FF[E49A0300]      <2> 	cmp edi, currentfolder
  5060 00003C1B 763B                <2> 	jbe .moveupover
  5061 00003C1D 3C2F                <2> 	cmp al, '/'
  5062 00003C1F 75F1                <2> 	jne .moveuploop
  5063 00003C21 C6072F              <2> 	mov byte [edi], '/'
  5064 00003C24 47                  <2> 	inc edi
  5065 00003C25 C60700              <2> 	mov byte [edi], 0
  5066 00003C28 81EF[E49A0300]      <2> 	sub edi, currentfolder
  5067 00003C2E 893D[E09A0300]      <2> 	mov [currentfolderloc], edi
  5068 00003C34 81C7[E49A0300]      <2> 	add edi, currentfolder
  5069 00003C3A 4F                  <2> 	dec edi
  5070                              <2> .lastfolder:
  5071 00003C3B 4F                  <2> 	dec edi
  5072 00003C3C 8A07                <2> 	mov al, [edi]
  5073 00003C3E 81FF[E49A0300]      <2> 	cmp edi, currentfolder
  5074 00003C44 7604                <2> 	jbe .donemoveup
  5075 00003C46 3C2F                <2> 	cmp al, '/'
  5076 00003C48 75F1                <2> 	jne .lastfolder
  5077                              <2> .donemoveup:
  5078 00003C4A 47                  <2> 	inc edi
  5079 00003C4B 81EF[E49A0300]      <2> 	sub edi, currentfolder
  5080 00003C51 893D[DC9A0300]      <2> 	mov [lastfolderloc], edi
  5081 00003C57 C3                  <2> 	ret
  5082                              <2> .moveupover:
  5083 00003C58 BF[E49A0300]        <2> 	mov edi, currentfolder
  5084 00003C5D C6072F              <2> 	mov byte [edi], '/'
  5085 00003C60 47                  <2> 	inc edi
  5086 00003C61 C60700              <2> 	mov byte [edi], 0
  5087 00003C64 31C0                <2> 	xor eax, eax
  5088 00003C66 A3[DC9A0300]        <2> 	mov [lastfolderloc], eax
  5089 00003C6B 40                  <2> 	inc eax
  5090 00003C6C A3[E09A0300]        <2> 	mov [currentfolderloc], eax
  5091 00003C71 C3                  <2> 	ret
  5092                              <1> %include 'source/programs/charmap.asm'
  5093 00003C72 00                  <2> charmapnum db 0
  5094 00003C73 FF2C636861726D6170- <2> db 255,44,"charmap",0
  5095 00003C7C 00                  <2>
  5096 00003C7D 8B35[602F0000]      <2> 	mov esi, [currentcommandloc]
  5097 00003C83 81C609000000        <2> 	add esi, 9
  5098 00003C89 803E00              <2> 	cmp byte [esi], 0
  5099 00003C8C 7412                <2> 	je .nospecific
  5100 00003C8E E857F6FFFF          <2> 	call cnvrthextxt
  5101 00003C93 6689C8              <2> 	mov ax, cx
  5102 00003C96 66BB0700            <2> 	mov bx, 7
  5103 00003C9A E805E7FFFF          <2> 	call prcharq
  5104 00003C9F C3                  <2> 	ret
  5105                              <2> .nospecific:
  5106 00003CA0 66BB0700            <2> 	mov bx, 7
  5107 00003CA4 66B82000            <2> 	mov ax, " "
  5108 00003CA8 C605[723C0000]00    <2> 	mov byte [charmapnum], 0
  5109 00003CAF E8F0E6FFFF          <2> 	call prcharq
  5110 00003CB4 E8EBE6FFFF          <2> 	call prcharq
  5111 00003CB9 E8E6E6FFFF          <2> 	call prcharq
  5112 00003CBE E8E1E6FFFF          <2> 	call prcharq
  5113 00003CC3 66B83000            <2> 	mov ax, "0"
  5114                              <2> charmapnumprnt:
  5115 00003CC7 E8D8E6FFFF          <2> 	call prcharq
  5116 00003CCC 6640                <2> 	inc ax
  5117 00003CCE 6650                <2> 	push ax
  5118 00003CD0 66B82000            <2> 	mov ax, " "
  5119 00003CD4 E8CBE6FFFF          <2> 	call prcharq
  5120 00003CD9 6658                <2> 	pop ax
  5121 00003CDB 663D3900            <2> 	cmp ax, "9"
  5122 00003CDF 76E6                <2> 	jbe charmapnumprnt
  5123 00003CE1 66B84100            <2> 	mov ax, "A"
  5124                              <2> charmapnumprnt2:
  5125 00003CE5 E8BAE6FFFF          <2> 	call prcharq
  5126 00003CEA 6640                <2> 	inc ax
  5127 00003CEC 6650                <2> 	push ax
  5128 00003CEE 66B82000            <2> 	mov ax, " "
  5129 00003CF2 E8ADE6FFFF          <2> 	call prcharq
  5130 00003CF7 6658                <2> 	pop ax
  5131 00003CF9 663D4700            <2> 	cmp ax, "G"
  5132 00003CFD 72E6                <2> 	jb charmapnumprnt2
  5133                              <2> 	
  5134 00003CFF BE[3F820000]        <2> 	mov esi, line
  5135 00003D04 E8EEDFFFFF          <2> 	call printquiet
  5136 00003D09 6631C0              <2> 	xor ax, ax
  5137 00003D0C 6689C1              <2> 	mov cx, ax
  5138 00003D0F E85FF4FFFF          <2> 	call showhexsmall
  5139 00003D14 E970000000          <2> 	jmp charmapnocopy ;the first char is 0 which is unprintable
  5140                              <2> charmapcopy:
  5141 00003D19 6640                <2> 	inc ax
  5142 00003D1B 6650                <2> 	push ax
  5143 00003D1D 663D0800            <2> 	cmp ax, 8
  5144 00003D21 7466                <2> 	je charmapnocopy
  5145 00003D23 663D0900            <2> 	cmp ax, 9
  5146 00003D27 7460                <2> 	je charmapnocopy
  5147 00003D29 663D0A00            <2> 	cmp ax, 10
  5148 00003D2D 745A                <2> 	je charmapnocopy
  5149 00003D2F 663D0D00            <2> 	cmp ax, 13
  5150 00003D33 7454                <2> 	je charmapnocopy
  5151 00003D35 663DFF00            <2> 	cmp ax, 255
  5152 00003D39 744E                <2> 	je charmapnocopy
  5153 00003D3B 663D0001            <2> 	cmp ax, 256
  5154 00003D3F 7443                <2> 	je nomorecharmap
  5155 00003D41 E85EE6FFFF          <2> 	call prcharq
  5156 00003D46 66B82000            <2> 	mov ax, " "
  5157 00003D4A E855E6FFFF          <2> 	call prcharq
  5158 00003D4F 6658                <2> 	pop ax
  5159                              <2> charmapcopycheck:
  5160 00003D51 FE05[723C0000]      <2> 	inc byte [charmapnum]
  5161 00003D57 803D[723C0000]10    <2> 	cmp byte [charmapnum], 16
  5162 00003D5E 72B9                <2> 	jb charmapcopy
  5163 00003D60 6650                <2> 	push ax
  5164 00003D62 BE[3F820000]        <2> 	mov esi, line
  5165 00003D67 E88BDFFFFF          <2> 	call printquiet
  5166 00003D6C 6658                <2> 	pop ax
  5167 00003D6E 3CFF                <2> 	cmp al, 255
  5168 00003D70 7412                <2> 	je nomorecharmap
  5169 00003D72 88C1                <2> 	mov cl, al
  5170 00003D74 FEC1                <2> 	inc cl
  5171 00003D76 E8F8F3FFFF          <2> 	call showhexsmall
  5172 00003D7B C605[723C0000]00    <2> 	mov byte [charmapnum], 0
  5173 00003D82 EB95                <2> 	jmp charmapcopy
  5174                              <2> nomorecharmap:
  5175 00003D84 E924EFFFFF          <2> 	jmp nwcmd
  5176                              <2> charmapnocopy:
  5177 00003D89 6650                <2> 	push ax
  5178 00003D8B 66B82000            <2> 	mov ax, " "
  5179 00003D8F E810E6FFFF          <2> 	call prcharq
  5180 00003D94 E80BE6FFFF          <2> 	call prcharq
  5181 00003D99 6658                <2> 	pop ax
  5182 00003D9B EBB4                <2> 	jmp charmapcopycheck
  5183                              <1> %ifdef gui.included
  5184                              <1> 	%include 'source/programs/circle.asm'
  5185 00003D9D FF2C636972636C6500  <2> db 255,44,"circle",0
  5186                              <2> circle:
  5187 00003DA6 8B35[602F0000]      <2> 	mov esi, [currentcommandloc]
  5188 00003DAC 81C607000000        <2> 	add esi, 7
  5189 00003DB2 66B91000            <2> 	mov cx, 16
  5190 00003DB6 30C0                <2> 	xor al, al
  5191 00003DB8 3806                <2> 	cmp [esi], al
  5192 00003DBA 7405                <2> 	je .nocmdline
  5193 00003DBC E872F5FFFF          <2> 	call cnvrttxt
  5194                              <2> .nocmdline:
  5195 00003DC1 E8A3060000          <2> 	call linetester.stime
  5196 00003DC6 E857000000          <2> 	call fcircle.nocmdline
  5197 00003DCB E8B1060000          <2> 	call linetester.etime
  5198 00003DD0 53                  <2> 	push ebx
  5199 00003DD1 57                  <2> 	push edi
  5200 00003DD2 E83AE5FFFF          <2> 	call getchar
  5201 00003DD7 59                  <2> 	pop ecx
  5202 00003DD8 E874F4FFFF          <2> 	call showdec
  5203 00003DDD BE[0F450000]        <2> 	mov esi, linetester.msgcircle
  5204 00003DE2 E810DFFFFF          <2> 	call printquiet
  5205 00003DE7 59                  <2> 	pop ecx
  5206 00003DE8 E864F4FFFF          <2> 	call showdec
  5207 00003DED BE[26450000]        <2> 	mov esi, linetester.msgtime
  5208 00003DF2 E800DFFFFF          <2> 	call printquiet
  5209 00003DF7 E8892D0000          <2> 	call reloadallgraphics
  5210 00003DFC C3                  <2> 	ret
  5211                              <2> 	
  5212 00003DFD FF2C66636972636C65- <2> db 255,44,"fcircle",0	;attempts to draw many circles without refreshing screen or showing time
  5213 00003E06 00                  <2>
  5214                              <2> fcircle:	
  5215 00003E07 8B35[602F0000]      <2> 	mov esi, [currentcommandloc]
  5216 00003E0D 81C608000000        <2> 	add esi, 8
  5217 00003E13 66B91000            <2> 	mov cx, 16
  5218 00003E17 30C0                <2> 	xor al, al
  5219 00003E19 3806                <2> 	cmp [esi], al
  5220 00003E1B 7405                <2> 	je .nocmdline
  5221 00003E1D E811F5FFFF          <2> 	call cnvrttxt
  5222                              <2> .nocmdline:
  5223 00003E22 6689C8              <2> 	mov ax, cx
  5224 00003E25 66D1E1              <2> 	shl cx, 1
  5225 00003E28 6689CA              <2> 	mov dx, cx
  5226 00003E2B 663B15[70540000]    <2> 	cmp dx, [resolutionx]
  5227 00003E32 731B                <2> 	jae .done
  5228 00003E34 663B0D[72540000]    <2> 	cmp cx, [resolutiony]
  5229 00003E3B 7312                <2> 	jae .done
  5230 00003E3D 668B35[5A020000]    <2> 	mov si, [timenanoseconds + 2]
  5231 00003E44 31FF                <2> 	xor edi, edi
  5232 00003E46 803D[64820000]01    <2> 	cmp byte [guion], 1
  5233 00003E4D 7401                <2> 	je .lp
  5234 00003E4F C3                  <2> .done ret
  5235                              <2> .lp:
  5236 00003E50 6629C2              <2> 	sub dx, ax
  5237 00003E53 6629C1              <2> 	sub cx, ax
  5238 00003E56 60                  <2> 	pusha
  5239 00003E57 E848280000          <2> 	call fillcircle
  5240 00003E5C 61                  <2> 	popa
  5241 00003E5D 47                  <2> 	inc edi
  5242 00003E5E 660335[58020000]    <2> 	add si, [timenanoseconds]
  5243 00003E65 6601C2              <2> 	add dx, ax
  5244 00003E68 6601C2              <2> 	add dx, ax
  5245 00003E6B 6601C2              <2> 	add dx, ax
  5246 00003E6E 6601C1              <2> 	add cx, ax
  5247 00003E71 663B15[70540000]    <2> 	cmp dx, [resolutionx]
  5248 00003E78 72D6                <2> 	jb .lp
  5249 00003E7A 6689C2              <2> 	mov dx, ax
  5250 00003E7D 6601C2              <2> 	add dx, ax
  5251 00003E80 6601C1              <2> 	add cx, ax
  5252 00003E83 6601C1              <2> 	add cx, ax
  5253 00003E86 663B0D[72540000]    <2> 	cmp cx, [resolutiony]
  5254 00003E8D 72C1                <2> 	jb .lp
  5255 00003E8F C3                  <2> 	ret
  5256                              <1> %endif
  5257                              <1> %include 'source/programs/clear.asm'
  5258 00003E90 FF2C636C65617200    <2> db 255,44,"clear",0
  5259 00003E98 E828DFFFFF          <2> 		call clear
  5260 00003E9D C3                  <2> 		ret 
  5261                              <1> %include 'source/programs/cpuid.asm'
  5262 00003E9E FF2C637075696400    <2> db 255,44,"cpuid",0
  5263 00003EA6 31C0                <2> 	xor eax, eax
  5264 00003EA8 0FA2                <2> 	cpuid
  5265 00003EAA 891D[FB3E0000]      <2> 	mov [cpuidbuf], ebx
  5266 00003EB0 8915[FF3E0000]      <2> 	mov [cpuidbuf + 4], edx
  5267 00003EB6 890D[033F0000]      <2> 	mov [cpuidbuf + 8], ecx
  5268 00003EBC BE[FB3E0000]        <2> 	mov esi, cpuidbuf
  5269 00003EC1 E850DEFFFF          <2> 	call print
  5270 00003EC6 BE[3F820000]        <2> 	mov esi, line
  5271 00003ECB E846DEFFFF          <2> 	call print
  5272 00003ED0 B801000000          <2> 	mov eax, 1
  5273 00003ED5 0FA2                <2> 	cpuid
  5274 00003ED7 89C1                <2> 	mov ecx, eax
  5275 00003ED9 C605[72310000]02    <2> 	mov byte [firsthexshown], 2
  5276 00003EE0 E8A2F2FFFF          <2> 	call showhex
  5277 00003EE5 B808000080          <2> 	mov eax, 0x80000008
  5278 00003EEA 0FA2                <2> 	cpuid
  5279 00003EEC 89C1                <2> 	mov ecx, eax
  5280 00003EEE C605[72310000]02    <2> 	mov byte [firsthexshown], 2
  5281 00003EF5 E88DF2FFFF          <2> 	call showhex
  5282 00003EFA C3                  <2> 	ret
  5283                              <2> 	
  5284 00003EFB 00<rept>            <2> cpuidbuf times 13 db 0
  5285                              <2> cpuidvendorend:
  5286                              <1> %ifdef network.included
  5287                              <1> 	%include 'source/programs/dhcp.asm'
  5288                              <1> %endif
  5289                              <1> %ifdef disk.none
  5290                              <1> %else
  5291                              <1> 	%include 'source/programs/dos.asm'
  5292 00003F08 FF2C646F7300        <2> db 255,44,"dos",0
  5293                              <2> dosrunner:
  5294 00003F0E 8925[D89A0300]      <2> 	mov [previousstack], esp
  5295 00003F14 8B3D[602F0000]      <2> 	mov edi, [currentcommandloc]
  5296 00003F1A 81C704000000        <2> 	add edi, 4
  5297 00003F20 BE00014000          <2> 	mov esi,  0x100 + dosprogloc	;this should be the beginning of memory
  5298 00003F25 E8B5230000          <2> 	call loadfile
  5299 00003F2A 8B3D[602F0000]      <2> 	mov edi, [currentcommandloc]
  5300 00003F30 81C704000000        <2> 	add edi, 4
  5301 00003F36 81FA94010000        <2> 	cmp edx, 404
  5302 00003F3C 0F845E000000        <2> 	je near .noprogfound
  5303 00003F42 BB81004000          <2> 	mov ebx, 0x81 + dosprogloc
  5304 00003F47 31C9                <2> 	xor ecx, ecx
  5305                              <2> .findparams:
  5306 00003F49 47                  <2> 	inc edi
  5307 00003F4A 8A07                <2> 	mov al, [edi]
  5308 00003F4C 3C20                <2> 	cmp al, " "
  5309 00003F4E 75F9                <2> 	jne .findparams
  5310                              <2> .copyparams:
  5311 00003F50 8A07                <2> 	mov al, [edi]
  5312 00003F52 8803                <2> 	mov [ebx], al
  5313 00003F54 43                  <2> 	inc ebx
  5314 00003F55 47                  <2> 	inc edi
  5315 00003F56 41                  <2> 	inc ecx
  5316 00003F57 81FB00014000        <2> 	cmp ebx, 0x100 + dosprogloc
  5317 00003F5D 7304                <2> 	jae .nomoreparams
  5318 00003F5F 3C00                <2> 	cmp al, 0
  5319 00003F61 75ED                <2> 	jne .copyparams
  5320                              <2> .nomoreparams:
  5321 00003F63 880D80004000        <2> 	mov [0x80 + dosprogloc], cl
  5322 00003F69 66B85000            <2> 	mov ax, DOS_DATA_SEL
  5323 00003F6D 8ED8                <2> 	mov ds, ax
  5324 00003F6F 8EC0                <2> 	mov es, ax
  5325 00003F71 8EE0                <2> 	mov fs, ax
  5326 00003F73 8EE8                <2> 	mov gs, ax
  5327 00003F75 31C0                <2> 	xor eax, eax
  5328 00003F77 31DB                <2> 	xor ebx, ebx
  5329 00003F79 31C9                <2> 	xor ecx, ecx
  5330 00003F7B 31D2                <2> 	xor edx, edx
  5331 00003F7D 31FF                <2> 	xor edi, edi
  5332 00003F7F 31F6                <2> 	xor esi, esi
  5333 00003F81 9A000100004800      <2> 	call DOS_CODE_SEL:0x100
  5334 00003F88 66BB3000            <2> 	mov bx, NEW_DATA_SEL
  5335 00003F8C 6689DA              <2> 	mov dx, bx
  5336 00003F8F 8EC3                <2> 	mov es, bx
  5337 00003F91 8EE3                <2> 	mov fs, bx
  5338 00003F93 66BB2000            <2> 	mov bx, SYS_DATA_SEL
  5339 00003F97 8EEB                <2> 	mov gs, bx
  5340 00003F99 8B25[D89A0300]      <2> 	mov esp, [previousstack]
  5341 00003F9F C3                  <2> 	ret
  5342                              <2> .noprogfound:
  5343 00003FA0 BE[06820000]        <2> 	mov esi, notfound1
  5344 00003FA5 E86CDDFFFF          <2> 	call print
  5345 00003FAA 8B35[602F0000]      <2> 	mov esi, [currentcommandloc]
  5346 00003FB0 81C604000000        <2> 	add esi, 4
  5347 00003FB6 E85BDDFFFF          <2> 	call print
  5348 00003FBB BE[0E820000]        <2> 	mov esi, notfound2
  5349 00003FC0 E851DDFFFF          <2> 	call print
  5350 00003FC5 C3                  <2> 	ret
  5351                              <2> 	
  5352                              <1> %endif
  5353                              <1> %include 'source/programs/dump.asm'
  5354 00003FC6 FF2C64756D7000      <2> db 255,44,"dump",0
  5355 00003FCD 8B35[602F0000]      <2> 	mov esi, [currentcommandloc]
  5356 00003FD3 81C605000000        <2> 	add esi, 5
  5357 00003FD9 31C9                <2> 	xor ecx, ecx
  5358 00003FDB 66B83078            <2> 	mov ax, "0x"
  5359 00003FDF 663906              <2> 	cmp [esi], ax
  5360 00003FE2 740A                <2> 	je dumphexin
  5361 00003FE4 E84AF3FFFF          <2> 	call cnvrttxt
  5362 00003FE9 E910000000          <2> 	jmp dumphexnow
  5363                              <2> dumphexin:
  5364 00003FEE 81C602000000        <2> 	add esi, 2
  5365 00003FF4 E8F1F2FFFF          <2> 	call cnvrthextxt
  5366 00003FF9 E900000000          <2> 	jmp dumphexnow
  5367                              <2> dumphexnow:
  5368 00003FFE 89CF                <2> 	mov edi, ecx
  5369 00004000 89FE                <2> 	mov esi, edi
  5370 00004002 81C680030000        <2> 	add esi, 896
  5371                              <2> dumphexloop:
  5372 00004008 8B0F                <2> 	mov ecx, [edi]
  5373 0000400A C605[72310000]05    <2> 	mov byte [firsthexshown],5
  5374 00004011 E871F1FFFF          <2> 	call showhex
  5375 00004016 81C704000000        <2> 	add edi, 4
  5376 0000401C 39F7                <2> 	cmp edi, esi
  5377 0000401E 72E8                <2> 	jb dumphexloop
  5378 00004020 E840E8FFFF          <2> 	call termcopy
  5379 00004025 C3                  <2> 	ret 
  5380                              <1> %include 'source/programs/echo.asm'
  5381                              <2> 
  5382 00004026 FF2C6563686F00      <2> db 255,44,"echo",0
  5383                              <2> 	echoprog:
  5384 0000402D 8B35[602F0000]      <2> 		mov esi, [currentcommandloc]
  5385 00004033 81C605000000        <2> 		add esi, 5
  5386 00004039 8A06                <2> 		mov al, [esi]
  5387 0000403B E8D6DCFFFF          <2> 		call print
  5388 00004040 BE[3F820000]        <2> 		mov esi, line
  5389 00004045 E8CCDCFFFF          <2> 		call print
  5390 0000404A C3                  <2> 		ret
  5391 0000404B BB[589D0300]        <2> 	echovr:	mov ebx, variables
  5392 00004050 BF06000000          <2> 		mov edi, 6
  5393 00004055 E83C000000          <2> 		call nxtvrech
  5394 0000405A E954000000          <2> 		jmp prntvr2
  5395 0000405F B13D                <2> 	echvar:	mov cl, '='
  5396 00004061 43                  <2> 		inc ebx
  5397 00004062 8A03                <2> 		mov al, [ebx]
  5398 00004064 3C00                <2> 		cmp al, 0
  5399 00004066 742E                <2> 		je nxtvrech
  5400 00004068 3C3D                <2> 		cmp al, '='
  5401 0000406A 7422                <2> 		je nxtvrechb1
  5402 0000406C 8B35[602F0000]      <2> 		mov esi, [currentcommandloc]
  5403 00004072 01FE                <2> 		add esi, edi
  5404 00004074 E826EFFFFF          <2> 		call cndtest
  5405 00004079 3C02                <2> 		cmp al, 2
  5406 0000407B 7432                <2> 		je prntvr
  5407 0000407D 3C01                <2> 		cmp al, 1
  5408 0000407F 742E                <2> 		je prntvr
  5409 00004081 8B35[602F0000]      <2> 		mov esi, [currentcommandloc]
  5410 00004087 01FE                <2> 		add esi, edi
  5411 00004089 E908000000          <2> 		jmp nxtvrech
  5412                              <2> 	nxtvrechb1:
  5413 0000408E 81EB02000000        <2> 		sub ebx, 2
  5414 00004094 EBC9                <2> 		jmp echvar
  5415 00004096 8A03                <2> 	nxtvrech: mov al, [ebx]
  5416 00004098 3C05                <2> 		cmp al, 5
  5417 0000409A 740A                <2> 		je nxtvrec2
  5418 0000409C 43                  <2> 		inc ebx
  5419 0000409D 81FB[58AD0300]      <2> 		cmp ebx, varend
  5420 000040A3 72F1                <2> 		jb nxtvrech
  5421 000040A5 C3                  <2> 		ret
  5422 000040A6 43                  <2> 	nxtvrec2: inc ebx
  5423 000040A7 8A03                <2> 		mov al, [ebx]
  5424 000040A9 3C04                <2> 		cmp al, 4
  5425 000040AB 74B2                <2> 		je echvar
  5426 000040AD EBE7                <2> 		jmp nxtvrech
  5427 000040AF 43                  <2> 	prntvr: inc ebx
  5428 000040B0 89DE                <2> 		mov esi, ebx
  5429 000040B2 C3                  <2> 		ret
  5430 000040B3 E85EDCFFFF          <2> 	prntvr2: call print
  5431 000040B8 BE[3F820000]        <2> 		mov esi, line
  5432 000040BD E854DCFFFF          <2> 		call print
  5433 000040C2 C3                  <2> 		ret 
  5434                              <1> %include 'source/programs/else.asm'
  5435 000040C3 FF2C656C736500      <2> 	db 255,44,"else",0
  5436 000040CA 31C0                <2> elsecmd:	xor eax, eax
  5437 000040CC 3805[529D0300]      <2> 	cmp [BATCHISON], al
  5438 000040D2 0F8486F9FFFF        <2> 	je near notbatch
  5439 000040D8 A0[E99C0300]        <2> 	mov al, [IFON]
  5440 000040DD BE[EA9C0300]        <2> 	mov esi, IFTRUE
  5441 000040E2 01C6                <2> 	add esi, eax
  5442 000040E4 8A06                <2> 	mov al, [esi]
  5443 000040E6 3401                <2> 	xor al, 1
  5444 000040E8 8806                <2> 	mov [esi], al
  5445 000040EA C3                  <2> 	ret 
  5446                              <1> %include 'source/programs/exit.asm'
  5447 000040EB FF2C6578697400      <2> db 255,44,"exit",0
  5448 000040F2 803D[E89C0300]01    <2> 	cmp byte [ranboot], 1
  5449 000040F9 0F8442EBFFFF        <2> 	je near returnfromexp
  5450 000040FF E928EAFFFF          <2> 	jmp nobootfile
  5451                              <1> %include 'source/programs/fi.asm'
  5452 00004104 FF2C666900          <2> 	db 255,44,"fi",0
  5453 00004109 30C0                <2> 	xor al, al
  5454 0000410B 3805[529D0300]      <2> 	cmp [BATCHISON], al
  5455 00004111 0F8447F9FFFF        <2> 	je near notbatch
  5456 00004117 B001                <2> fi:	mov al, 1
  5457 00004119 2805[E99C0300]      <2> 	sub [IFON],al
  5458 0000411F C3                  <2> 	ret 
  5459                              <1> %ifdef gui.included
  5460                              <1> 	%include 'source/programs/gui.asm'
  5461 00004120 FF2C67756900        <2> db 255,44,"gui",0
  5462                              <2> guiswitcher:
  5463 00004126 8B35[602F0000]      <2> 	mov esi, [currentcommandloc]
  5464 0000412C 81C604000000        <2> 	add esi, 4
  5465 00004132 31C9                <2> 	xor ecx, ecx
  5466 00004134 803E00              <2> 	cmp byte [esi], 0
  5467 00004137 740A                <2> 	je .nomodepref
  5468 00004139 E8ACF1FFFF          <2> 	call cnvrthextxt ;switches arg on cline to vesa mode in ecx
  5469 0000413E E907000000          <2> 	jmp .modepref
  5470                              <2> .nomodepref:
  5471 00004143 51                  <2> 	push ecx
  5472 00004144 E87CDCFFFF          <2> 	call clear
  5473 00004149 59                  <2> 	pop ecx
  5474                              <2> .modepref:
  5475 0000414A 66BB[7250]          <2> 	mov bx, guiswitch
  5476 0000414E 66891D[CB0C0000]    <2> 	mov [realmodeptr], bx
  5477 00004155 BB[65410000]        <2> 	mov ebx, guiswitchret
  5478 0000415A 891D[C70C0000]      <2> 	mov [realmodereturn], ebx
  5479 00004160 E94BCAFFFF          <2> 	jmp realmode
  5480                              <2> guiswitchret:
  5481 00004165 65803D[64820000]01  <2> 	cmp byte [gs:guion], 1
  5482 0000416D 7401                <2> 	je .cont
  5483 0000416F C3                  <2> 	ret
  5484                              <2> .cont:
  5485 00004170 BF[5E520000]        <2> 	mov edi, VBEMODEBLOCK
  5486                              <2> .loop:
  5487 00004175 658B07              <2> 	mov eax, [gs:edi]
  5488 00004178 8907                <2> 	mov [edi], eax
  5489 0000417A 47                  <2> 	inc edi
  5490 0000417B 81FF[62550000]      <2> 	cmp edi, VBEEND
  5491 00004181 72F2                <2> 	jb .loop
  5492 00004183 A1[86540000]        <2> 	mov eax, [physbaseptr]
  5493 00004188 8B1D[35020000]      <2> 	mov ebx, [basecache]
  5494 0000418E C1E304              <2> 	shl ebx, 4
  5495 00004191 29D8                <2> 	sub eax, ebx
  5496 00004193 A3[86540000]        <2> 	mov [physbaseptr], eax
  5497 00004198 C605[A2230000]00    <2> 	mov byte [termguion], 0
  5498 0000419F BE[6DB50300]        <2> 	mov esi, graphicstable
  5499 000041A4 30C0                <2> 	xor al, al
  5500                              <2> .clear:
  5501 000041A6 8806                <2> 	mov [esi], al
  5502 000041A8 46                  <2> 	inc esi
  5503 000041A9 81FE[6DB70300]      <2> 	cmp esi, graphicstableend
  5504 000041AF 72F5                <2> 	jb .clear
  5505 000041B1 E8682B0000          <2> 	call guisetup
  5506                              <2> 	;The next few lines center a window that is 3/4ths of the full screen
  5507 000041B6 668B15[70540000]    <2> 	mov dx, [resolutionx]
  5508 000041BD 668B0D[72540000]    <2> 	mov cx, [resolutiony]
  5509 000041C4 6689D3              <2> 	mov bx, dx
  5510 000041C7 6689C8              <2> 	mov ax, cx
  5511 000041CA 66D1EB              <2> 	shr bx, 1
  5512 000041CD 66D1E8              <2> 	shr ax, 1
  5513 000041D0 6689DA              <2> 	mov dx, bx
  5514 000041D3 66D1EA              <2> 	shr dx, 1
  5515 000041D6 6689C1              <2> 	mov cx, ax
  5516 000041D9 66D1E9              <2> 	shr cx, 1
  5517 000041DC 6601D3              <2> 	add bx, dx
  5518 000041DF 6601C8              <2> 	add ax, cx
  5519 000041E2 66D1E9              <2> 	shr cx, 1
  5520 000041E5 66C1EB03            <2> 	shr bx, 3
  5521 000041E9 66C1E303            <2> 	shl bx, 3
  5522 000041ED 66C1E804            <2> 	shr ax, 4
  5523 000041F1 66C1E004            <2> 	shl ax, 4
  5524 000041F5 66891D[236F0000]    <2> 	mov [termwindow], bx
  5525 000041FC 66A3[256F0000]      <2> 	mov [termwindow + 2], ax	;the previous lines of code make a large terminal window that is 4 characters smaller than the screen
  5526 00004202 BE[236F0000]        <2> 	mov esi, termwindow
  5527 00004207 31DB                <2> 	xor ebx, ebx
  5528 00004209 6631C0              <2> 	xor ax, ax
  5529 0000420C E83F320000          <2> 	call showwindow
  5530 00004211 E84D130000          <2> 	call cursorgui
  5531 00004216 E8AADBFFFF          <2> 	call clear
  5532 0000421B C3                  <2> 	ret
  5533                              <2> 	
  5534                              <1> %endif
  5535                              <1> %include 'source/programs/help.asm'
  5536 0000421C FF2C68656C7000      <2> db 255,44,"help",0
  5537                              <2> lscmd:	
  5538 00004223 B00D                <2> 		mov al, 13
  5539 00004225 E87AE1FFFF          <2> 		call prcharq
  5540 0000422A BE[B6330000]        <2> 		mov esi, progstart
  5541 0000422F BB[72500000]        <2> 		mov ebx, progend
  5542 00004234 BE[D8960300]        <2> dir:	mov esi, fileindex
  5543 00004239 8A06                <2> 	dirnxt:	mov al, [esi]
  5544 0000423B 30E4                <2> 		xor ah, ah
  5545 0000423D 3CFF                <2> 		cmp al, 255
  5546 0000423F 7415                <2> 		je dirfnd
  5547 00004241 46                  <2> 		inc esi
  5548 00004242 81FE[D89A0300]      <2> 		cmp esi,  fileindexend
  5549 00004248 7339                <2> 		jae dirdn
  5550 0000424A EBED                <2> 		jmp dirnxt
  5551                              <2> 	dirfnd3:
  5552 0000424C 46                  <2> 		inc esi
  5553 0000424D 81FE[D89A0300]      <2> 		cmp esi, fileindexend
  5554 00004253 76E4                <2> 		jbe dirnxt
  5555 00004255 4E                  <2> 		dec esi
  5556 00004256 46                  <2> 	dirfnd:	inc esi
  5557 00004257 8A06                <2> 		mov al, [esi]
  5558 00004259 30E4                <2> 		xor ah, ah
  5559 0000425B 3C2C                <2> 		cmp al, 44
  5560 0000425D 740B                <2> 		je dirfnd2
  5561 0000425F 46                  <2> 		inc esi
  5562 00004260 81FE[D89A0300]      <2> 		cmp esi,  fileindexend
  5563 00004266 731B                <2> 		jae dirdn
  5564 00004268 EBCF                <2> 		jmp dirnxt
  5565 0000426A 46                  <2> 	dirfnd2: inc esi
  5566 0000426B E887DAFFFF          <2> 		call printquiet
  5567 00004270 56                  <2> 		push esi
  5568 00004271 B009                <2> 		mov al, 9
  5569 00004273 E82CE1FFFF          <2> 		call prcharq
  5570 00004278 5E                  <2> 		pop esi
  5571 00004279 81FE[D89A0300]      <2> 		cmp esi,  fileindexend
  5572 0000427F 7302                <2> 		jae dirdn
  5573 00004281 EBB6                <2> 		jmp dirnxt
  5574 00004283 BE[3F820000]        <2> 	dirdn:	mov esi, line
  5575 00004288 E889DAFFFF          <2> 			call print
  5576 0000428D C3                  <2> 			ret
  5577 0000428E 00                  <2> currentdir db 0
  5578                              <1> %include 'source/programs/if.asm'
  5579 0000428F FF2C696600          <2> 	db 255,44,"if",0
  5580 00004294 30C0                <2> ifcmd:	xor al, al
  5581 00004296 3805[529D0300]      <2> 	cmp [BATCHISON], al
  5582 0000429C 0F84BCF7FFFF        <2> 	je near notbatch
  5583 000042A2 8B1D[602F0000]      <2> 	mov ebx, [currentcommandloc]
  5584 000042A8 81C303000000        <2> 	add ebx, 3
  5585 000042AE 89DE                <2> 	mov esi, ebx
  5586 000042B0 8A06                <2> chkeqsn: mov al, [esi]
  5587 000042B2 3C00                <2> 	cmp al, 0
  5588 000042B4 0F84A4F7FFFF        <2> 	je near notbatch
  5589 000042BA 3C3D                <2> 	cmp al, '='
  5590 000042BC 0F8403000000        <2> 	je near chkeqdn
  5591 000042C2 46                  <2> 	inc esi
  5592 000042C3 EBEB                <2> 	jmp chkeqsn
  5593 000042C5 B000                <2> chkeqdn: mov al, 0 
  5594 000042C7 8806                <2> 	mov [esi], al
  5595 000042C9 46                  <2> 	inc esi
  5596 000042CA E895ECFFFF          <2> 	call tester
  5597 000042CF 3C01                <2> 	cmp al, 1
  5598 000042D1 0F8405000000        <2> 	je near trueif
  5599 000042D7 E91C000000          <2> 	jmp falseif
  5600 000042DC 31C0                <2> trueif:	xor eax, eax
  5601 000042DE A0[E99C0300]        <2> 	mov al, [IFON]
  5602 000042E3 FEC0                <2> 	inc al
  5603 000042E5 A2[E99C0300]        <2> 	mov [IFON], al
  5604 000042EA 30E4                <2> 	xor ah, ah
  5605 000042EC BE[EA9C0300]        <2> 	mov esi, IFTRUE
  5606 000042F1 01C6                <2> 	add esi, eax
  5607 000042F3 B401                <2> 	mov ah, 1
  5608 000042F5 8826                <2> 	mov [esi], ah
  5609 000042F7 C3                  <2> 	ret 
  5610 000042F8 31C0                <2> falseif: xor eax, eax
  5611 000042FA A0[E99C0300]        <2> 	mov al, [IFON]
  5612 000042FF FEC0                <2> 	inc al
  5613 00004301 A2[E99C0300]        <2> 	mov [IFON], al
  5614 00004306 30E4                <2> 	xor ah, ah
  5615 00004308 BE[EA9C0300]        <2> 	mov esi, IFTRUE
  5616 0000430D 01C6                <2> 	add esi, eax
  5617 0000430F 30E4                <2> 	xor ah, ah
  5618 00004311 8826                <2> 	mov [esi], ah
  5619 00004313 C3                  <2> 	ret 
  5620                              <1> %ifdef network.included
  5621                              <1> 	%include 'source/programs/ipconfig.asm'
  5622                              <1> %endif
  5623                              <1> %include 'source/programs/keycode.asm'
  5624 00004314 FF2C6B6579636F6465- <2> db 255,44,"keycode",0
  5625 0000431D 00                  <2>
  5626                              <2> keycode:
  5627 0000431E 66C705[75230000]00- <2> 	mov word [trans], 0
  5628 00004326 00                  <2>
  5629 00004327 C605[9B640000]00    <2> 	mov byte [threadson], 0
  5630                              <2> %ifdef io.serial
  5631                              <2> .noserial:
  5632                              <2> 	hlt
  5633                              <2> 	mov dx, [serial.address]
  5634                              <2> 	in al, dx
  5635                              <2> 	cmp al, 0
  5636                              <2> 	je .noserial
  5637                              <2> 	mov cl, al
  5638                              <2> 	call showhexsmall
  5639                              <2> 	cmp al, 0x1B
  5640                              <2> 	jne .noserial
  5641                              <2> 	in al, dx
  5642                              <2> 	mov cl, al
  5643                              <2> 	call showhexsmall
  5644                              <2> 	cmp cl, 0x5B
  5645                              <2> 	je .noserial
  5646                              <2> 	ret
  5647                              <2> %else
  5648 0000432E E809160000          <2> 	call getkey
  5649 00004333 31C0                <2> 	xor eax, eax
  5650 00004335 31C9                <2> 	xor ecx, ecx
  5651 00004337 8A0D[1A590000]      <2> 	mov cl, [specialkey]
  5652 0000433D 80F900              <2> 	cmp cl, 0
  5653 00004340 0F8405000000        <2> 	je near .nospecialkeycode
  5654 00004346 E828EEFFFF          <2> 	call showhexsmall
  5655                              <2> .nospecialkeycode:
  5656 0000434B 668B0D[73230000]    <2> 	mov cx, [lastkey + 2]
  5657 00004352 E81CEEFFFF          <2> 	call showhexsmall
  5658 00004357 80F901              <2> 	cmp cl, 1
  5659 0000435A 75C2                <2> 	jne keycode
  5660 0000435C C3                  <2> 	ret
  5661                              <2> %endif
  5662                              <1> %ifdef gui.included
  5663                              <1> 	%include 'source/programs/line.asm'
  5664 0000435D FF2C6C696E6500      <2> db 255,44,"line",0
  5665                              <2> linetester:
  5666 00004364 803D[64820000]00    <2> 	cmp byte [guion], 0
  5667 0000436B 0F841B000000        <2> 	je near .done
  5668 00004371 668B35[5A020000]    <2> 	mov si, [timenanoseconds + 2];essentially load a random value
  5669 00004378 BB38000000          <2> 	mov ebx, 28*2;the line test draws ~28/6 times more lines in a 4:3 display mode than circles
  5670 0000437D E868000000          <2> 	call .circletest
  5671 00004382 BB0C000000          <2> 	mov ebx, 6*2 ;this makes them draw the same amount of lines as circles
  5672 00004387 E801000000          <2> 	call .linetest
  5673                              <2> .done:
  5674 0000438C C3                  <2> 	ret
  5675                              <2> 
  5676                              <2> .linetest:
  5677 0000438D 53                  <2> 	push ebx
  5678 0000438E E8D6000000          <2> 	call .stime
  5679 00004393 5B                  <2> 	pop ebx
  5680 00004394 31FF                <2> 	xor edi, edi
  5681                              <2> .ltlp:
  5682 00004396 53                  <2> 	push ebx
  5683 00004397 E81C010000          <2> 	call .st
  5684 0000439C 66F7D6              <2> 	not si
  5685 0000439F E814010000          <2> 	call .st
  5686 000043A4 5B                  <2> 	pop ebx
  5687 000043A5 66F7D6              <2> 	not si
  5688 000043A8 660335[58020000]    <2> 	add si, [timenanoseconds]
  5689 000043AF 4B                  <2> 	dec ebx
  5690 000043B0 81FB00000000        <2> 	cmp ebx, 0
  5691 000043B6 77DE                <2> 	ja .ltlp
  5692 000043B8 E8C4000000          <2> 	call .etime
  5693 000043BD 53                  <2> 	push ebx	
  5694 000043BE 57                  <2> 	push edi
  5695 000043BF E871270000          <2> 	call guiclear
  5696 000043C4 E8BC270000          <2> 	call reloadallgraphics
  5697 000043C9 59                  <2> 	pop ecx
  5698 000043CA E882EEFFFF          <2> 	call showdec
  5699 000043CF BE[FA440000]        <2> 	mov esi, .msg
  5700 000043D4 E83DD9FFFF          <2> 	call print
  5701 000043D9 59                  <2> 	pop ecx
  5702 000043DA E872EEFFFF          <2> 	call showdec
  5703 000043DF BE[26450000]        <2> 	mov esi, .msgtime
  5704 000043E4 E82DD9FFFF          <2> 	call print
  5705 000043E9 C3                  <2> 	ret
  5706                              <2> 	
  5707                              <2> .circletest:
  5708 000043EA 53                  <2> 	push ebx
  5709 000043EB E879000000          <2> 	call .stime
  5710 000043F0 5B                  <2> 	pop ebx
  5711 000043F1 31FF                <2> 	xor edi, edi
  5712                              <2> .ctlp:
  5713 000043F3 53                  <2> 	push ebx
  5714 000043F4 668B0D[72540000]    <2> 	mov cx, [resolutiony]
  5715 000043FB 66D1E9              <2> 	shr cx, 1
  5716 000043FE 668B15[70540000]    <2> 	mov dx, [resolutionx]
  5717 00004405 66D1EA              <2> 	shr dx, 1
  5718 00004408 6689C8              <2> 	mov ax, cx
  5719                              <2> .circle:
  5720 0000440B 60                  <2> 	pusha
  5721 0000440C E881210000          <2> 	call drawcircle
  5722 00004411 61                  <2> 	popa
  5723 00004412 6648                <2> 	dec ax
  5724 00004414 47                  <2> 	inc edi
  5725 00004415 663D0100            <2> 	cmp ax, 1
  5726 00004419 77F0                <2> 	ja .circle
  5727 0000441B 66F7D6              <2> 	not si
  5728                              <2> .circle2:
  5729 0000441E 60                  <2> 	pusha
  5730 0000441F E86E210000          <2> 	call drawcircle
  5731 00004424 61                  <2> 	popa
  5732 00004425 47                  <2> 	inc edi
  5733 00004426 6640                <2> 	inc ax
  5734 00004428 6639C8              <2> 	cmp ax, cx
  5735 0000442B 76F1                <2> 	jbe .circle2
  5736 0000442D 5B                  <2> 	pop ebx
  5737 0000442E 66F7D6              <2> 	not si
  5738 00004431 660335[58020000]    <2> 	add si, [timenanoseconds]
  5739 00004438 4B                  <2> 	dec ebx
  5740 00004439 81FB00000000        <2> 	cmp ebx, 0
  5741 0000443F 77B2                <2> 	ja .ctlp
  5742 00004441 E83B000000          <2> 	call .etime
  5743 00004446 53                  <2> 	push ebx
  5744 00004447 57                  <2> 	push edi
  5745 00004448 59                  <2> 	pop ecx
  5746 00004449 E803EEFFFF          <2> 	call showdec
  5747 0000444E BE[0F450000]        <2> 	mov esi, .msgcircle
  5748 00004453 E8BED8FFFF          <2> 	call print
  5749 00004458 59                  <2> 	pop ecx
  5750 00004459 E8F3EDFFFF          <2> 	call showdec
  5751 0000445E BE[26450000]        <2> 	mov esi, .msgtime
  5752 00004463 E8AED8FFFF          <2> 	call print
  5753 00004468 C3                  <2> 	ret
  5754                              <2> 	
  5755                              <2> .stime:
  5756 00004469 F4                  <2> 	hlt
  5757 0000446A A1[54020000]        <2> 	mov eax, [timeseconds]
  5758 0000446F 8B1D[58020000]      <2> 	mov ebx, [timenanoseconds]
  5759 00004475 A3[35450000]        <2> 	mov [.time], eax
  5760 0000447A 891D[39450000]      <2> 	mov [.time + 4], ebx
  5761 00004480 C3                  <2> 	ret
  5762                              <2> 	
  5763                              <2> .etime:
  5764 00004481 A1[54020000]        <2> 	mov eax, [timeseconds]
  5765 00004486 8B1D[58020000]      <2> 	mov ebx, [timenanoseconds]
  5766 0000448C 8B0D[35450000]      <2> 	mov ecx, [.time]
  5767 00004492 8B15[39450000]      <2> 	mov edx, [.time + 4]
  5768 00004498 C1EA0A              <2> 	shr edx, 10
  5769 0000449B C1EB0A              <2> 	shr ebx, 10
  5770 0000449E 29C8                <2> 	sub eax, ecx
  5771 000044A0 3D00000000          <2> 	cmp eax, 0
  5772 000044A5 740E                <2> 	je .notclp
  5773                              <2> .tclp:
  5774 000044A7 81C340420F00        <2> 	add ebx, 1000000
  5775 000044AD 48                  <2> 	dec eax
  5776 000044AE 3D00000000          <2> 	cmp eax, 0
  5777 000044B3 75F2                <2> 	jne .tclp
  5778                              <2> .notclp:
  5779 000044B5 29D3                <2> 	sub ebx, edx
  5780 000044B7 C3                  <2> 	ret
  5781                              <2> 	
  5782                              <2> .st:
  5783 000044B8 6631C0              <2> 	xor ax, ax
  5784 000044BB 6631DB              <2> 	xor bx, bx
  5785 000044BE 668B0D[72540000]    <2> 	mov cx, [resolutiony]
  5786 000044C5 668B15[70540000]    <2> 	mov dx, [resolutionx]
  5787                              <2> .lp:
  5788 000044CC 60                  <2> 	pusha
  5789 000044CD E837250000          <2> 	call drawline
  5790 000044D2 61                  <2> 	popa
  5791                              <2> .noswitch:
  5792 000044D3 47                  <2> 	inc edi
  5793 000044D4 6643                <2> 	inc bx
  5794 000044D6 664A                <2> 	dec dx
  5795 000044D8 6681FB0000          <2> 	cmp bx, 0
  5796 000044DD 74ED                <2> 	je .lp
  5797 000044DF 6681FA0000          <2> 	cmp dx, 0
  5798 000044E4 75E6                <2> 	jne .lp
  5799                              <2> .lp2:
  5800 000044E6 60                  <2> 	pusha
  5801 000044E7 E81D250000          <2> 	call drawline
  5802 000044EC 61                  <2> 	popa
  5803 000044ED 47                  <2> 	inc edi
  5804 000044EE 6640                <2> 	inc ax
  5805 000044F0 6649                <2> 	dec cx
  5806 000044F2 6681F90000          <2> 	cmp cx, 0
  5807 000044F7 75ED                <2> 	jne .lp2
  5808 000044F9 C3                  <2> 	ret
  5809                              <2> 	
  5810 000044FA 6C696E657320776572- <2> .msg db "lines were drawn in ",0
  5811 00004503 6520647261776E2069- <2>
  5812 0000450C 6E2000              <2>
  5813 0000450F 636972636C65732077- <2> .msgcircle db "circles were drawn in ",0
  5814 00004518 65726520647261776E- <2>
  5815 00004521 20696E2000          <2>
  5816 00004526 6D6963726F7365636F- <2> .msgtime db "microseconds.",10,0
  5817 0000452F 6E64732E0A00        <2>
  5818 00004535 0000000000000000    <2> .time dd 0,0	
  5819                              <1> %endif
  5820                              <1> %include 'source/programs/logout.asm'
  5821 0000453D FF2C6C6F676F757400  <2> 	db 255,44,"logout",0
  5822 00004546 E99DE5FFFF          <2> 	jmp os
  5823                              <1> %include 'source/programs/loop.asm'
  5824 0000454B FF2C6C6F6F7000      <2> 	db 255,44,"loop",0
  5825 00004552 803D[539D0300]00    <2> 	cmp byte [LOOPON], 0
  5826 00004559 0F8501000000        <2> 	jne near filoop
  5827 0000455F C3                  <2> 	ret
  5828 00004560 8B35[549D0300]      <2> filoop: mov esi, [LOOPPOS]
  5829 00004566 FE0D[E99C0300]      <2> 	dec byte [IFON]
  5830 0000456C C605[539D0300]00    <2> 	mov byte [LOOPON], 0
  5831 00004573 8935[4E9D0300]      <2> 	mov [BATCHPOS], esi
  5832 00004579 8935[86390000]      <2> 	mov [batchedi], esi
  5833 0000457F C3                  <2> 	ret 
  5834                              <1> %ifdef disk.none
  5835                              <1> %else
  5836                              <1> 	%include 'source/programs/ls.asm'
  5837 00004580 FF2C6C7300          <2> db 255,44,"ls",0
  5838 00004585 BE[AE840300]        <2> 		mov esi, diskfileindex
  5839                              <2> 	diskindexdir:
  5840 0000458A 803E5F              <2> 		cmp byte [esi], '_'
  5841 0000458D 7440                <2> 		je nextdiskindexdir
  5842 0000458F E863D7FFFF          <2> 		call printquiet
  5843 00004594 56                  <2> 		push esi
  5844 00004595 BE[EF450000]        <2> 		mov esi, disktab
  5845 0000459A E858D7FFFF          <2> 		call printquiet
  5846 0000459F 5E                  <2> 		pop esi
  5847 000045A0 8B4E05              <2> 		mov ecx, [esi + 5]
  5848 000045A3 C605[72310000]05    <2> 		mov byte [firsthexshown], 5
  5849 000045AA E8A2ECFFFF          <2> 		call showdec
  5850 000045AF 56                  <2> 		push esi
  5851 000045B0 BE[3F820000]        <2> 		mov esi, line
  5852 000045B5 E83DD7FFFF          <2> 		call printquiet
  5853 000045BA 5E                  <2> 		pop esi
  5854 000045BB 81C609000000        <2> 		add esi, 9
  5855 000045C1 81FE[D4860300]      <2> 		cmp esi, enddiskfileindex
  5856 000045C7 72C1                <2> 		jb diskindexdir
  5857 000045C9 E897E2FFFF          <2> 		call termcopy
  5858 000045CE C3                  <2> 		ret
  5859                              <2> 	nextdiskindexdir:
  5860 000045CF 46                  <2> 		inc esi
  5861 000045D0 803E00              <2> 		cmp byte [esi], 0
  5862 000045D3 75FA                <2> 		jne nextdiskindexdir
  5863 000045D5 81C609000000        <2> 		add esi, 9
  5864 000045DB 81FE[D4860300]      <2> 		cmp esi, enddiskfileindex
  5865 000045E1 72A7                <2> 		jb diskindexdir
  5866 000045E3 E87DE2FFFF          <2> 		call termcopy
  5867 000045E8 C3                  <2> 		ret
  5868                              <2> 		
  5869 000045E9 4469736B2000        <2> 		diskmsg db "Disk ",0
  5870 000045EF 0D09090900          <2> 		disktab db 13,9,9,9,0
  5871                              <1> %endif
  5872                              <1> %include 'source/programs/memory.asm'
  5873 000045F4 FF2C6D656D6F727900  <2> db 255,44,"memory",0
  5874 000045FD BE[6A820000]        <2> 	mov esi, memlistbuf
  5875 00004602 31FF                <2> 	xor edi, edi
  5876 00004604 668B3D[AA840000]    <2> 	mov di, [memlistend]
  5877 0000460B 01F7                <2> 	add edi, esi
  5878                              <2> printmemmap:
  5879 0000460D 8B0E                <2> 	mov ecx, [esi]
  5880 0000460F E873EBFFFF          <2> 	call showhex
  5881 00004614 81C608000000        <2> 	add esi, 8
  5882 0000461A 8B0E                <2> 	mov ecx, [esi]
  5883 0000461C E866EBFFFF          <2> 	call showhex
  5884 00004621 81C608000000        <2> 	add esi, 8
  5885 00004627 8B0E                <2> 	mov ecx, [esi]
  5886 00004629 E859EBFFFF          <2> 	call showhex
  5887 0000462E 81C608000000        <2> 	add esi, 8
  5888 00004634 57                  <2> 	push edi
  5889 00004635 56                  <2> 	push esi
  5890 00004636 BE[3F820000]        <2> 	mov esi, line
  5891 0000463B E8D6D6FFFF          <2> 	call print
  5892 00004640 5E                  <2> 	pop esi
  5893 00004641 5F                  <2> 	pop edi
  5894 00004642 39FE                <2> 	cmp esi, edi
  5895 00004644 72C7                <2> 	jb printmemmap
  5896 00004646 C3                  <2> 	ret
  5897                              <2> 	
  5898                              <1> %include 'source/programs/pci.asm'
  5899 00004647 FF2C70636900        <2> db 255,44,"pci",0
  5900 0000464D E858190000          <2> 	call pcidump
  5901 00004652 C3                  <2> 	ret 
  5902                              <1> %ifdef network.included
  5903                              <1> 	%include 'source/programs/ping.asm'
  5904                              <1> %endif
  5905                              <1> %ifdef disk.none
  5906                              <1> %else
  5907                              <1> 	%include 'source/programs/play.asm'
  5908 00004653 FF2C706C61796100    <2> db 255,44,"playa",0
  5909 0000465B 8B3D[602F0000]      <2> 	mov edi, [currentcommandloc]
  5910 00004661 81C706000000        <2> 	add edi, 6
  5911 00004667 E828000000          <2> 	call playasync
  5912 0000466C C3                  <2> 	ret
  5913 0000466D FF2C706C617900      <2> db 255,44,"play",0
  5914                              <2> play:
  5915 00004674 8B3D[602F0000]      <2> 	mov edi, [currentcommandloc]
  5916 0000467A 81C705000000        <2> 	add edi, 5
  5917 00004680 E80F000000          <2> 	call playasync
  5918                              <2> .waitforsound:
  5919 00004685 F4                  <2> 	hlt
  5920                              <2> %ifdef sound.included
  5921                              <2> 	mov eax, [Length0]
  5922                              <2> 	or ax, [Length1]
  5923                              <2> %endif
  5924 00004686 0A05[5C020000]      <2> 	or al, [soundon]
  5925 0000468C 3D00000000          <2> 	cmp eax, 0
  5926 00004691 75F2                <2> 	jne .waitforsound
  5927 00004693 C3                  <2> 	ret
  5928                              <2> playasync:
  5929 00004694 BE0000C000          <2> 	mov esi, 0xC00000
  5930 00004699 E8411C0000          <2> 	call loadfile
  5931 0000469E 81FA94010000        <2> 	cmp edx, 404
  5932 000046A4 743F                <2> 	je nosoundfound
  5933 000046A6 BB0000C000          <2> 	mov ebx, 0xC00000
  5934 000046AB 817B0857415645      <2> 	cmp dword [ebx + 8], "WAVE"
  5935 000046B2 0F845A000000        <2> 	je near wave_player
  5936 000046B8 66813B534E          <2> 	cmp word [ebx], "SN"
  5937 000046BD 7526                <2> 	jne nosoundfound
  5938 000046BF 81C306000000        <2> 	add ebx, 6
  5939 000046C5 891D[5F020000]      <2> 	mov [soundpos], ebx
  5940 000046CB 035BFC              <2> 	add ebx, [ebx - 4]
  5941 000046CE 891D[63020000]      <2> 	mov [soundendpos], ebx
  5942 000046D4 66C705[5D020000]00- <2> 	mov word [soundrepititions], 0
  5943 000046DC 00                  <2>
  5944 000046DD C605[5C020000]01    <2> 	mov byte [soundon], 1
  5945 000046E4 C3                  <2> 	ret
  5946                              <2> nosoundfound:
  5947 000046E5 BE[0B470000]        <2> 	mov esi, notfoundsound
  5948 000046EA E827D6FFFF          <2> 	call print
  5949 000046EF 8B35[602F0000]      <2> 	mov esi, [currentcommandloc]
  5950 000046F5 81C605000000        <2> 	add esi, 5
  5951 000046FB E816D6FFFF          <2> 	call print
  5952 00004700 BE[0E820000]        <2> 	mov esi, notfound2
  5953 00004705 E80CD6FFFF          <2> 	call print
  5954 0000470A C3                  <2> 	ret
  5955 0000470B 706C61793A2000      <2> notfoundsound db "play: ",0
  5956                              <2> 
  5957                              <2> %ifdef sound.included
  5958                              <2> sbplay:
  5959                              <2> 		mov esi, 0xC00000
  5960                              <2> 		mov ebx, esi
  5961                              <2> 		add esi, WAVSTART
  5962                              <2> 		sub edi, esi
  5963                              <2> 		mov [Length1], di
  5964                              <2> 		shr edi, 15
  5965                              <2> 		mov [Length0], edi
  5966                              <2> 		mov ecx, [ebx + 24]
  5967                              <2> 		mov [Freq], ecx
  5968                              <2> 		xor eax, eax
  5969                              <2> 		mov	edx, 0xC00000 ;physical location of sound
  5970                              <2> 		add edx, WAVSTART
  5971                              <2> 		add	eax, edx
  5972                              <2> 		mov esi, eax
  5973                              <2> 		xor ecx, ecx
  5974                              <2> 		xor ebx, ebx
  5975                              <2> 		mov [SegLoc], bx
  5976                              <2> 		add ebx, 0x80000
  5977                              <2> 		mov cx, 0xFFFF
  5978                              <2> 		cmp di, 0
  5979                              <2> 		jne .autoinit
  5980                              <2> 		mov cx, [Length1]
  5981                              <2> 		mov byte [OddLength], 1
  5982                              <2> 		cmp cx, 32768
  5983                              <2> 		jae .autoinit
  5984                              <2> 		mov byte [OddLength], 0
  5985                              <2> 		shl cx, 1
  5986                              <2> 		inc edi
  5987                              <2> .autoinit:
  5988                              <2> 		dec edi
  5989                              <2> 		mov [Length0], edi
  5990                              <2> 		mov [Length1], cx
  5991                              <2> 		shr cx, 1
  5992                              <2> 		inc cx
  5993                              <2> 		add eax, ecx
  5994                              <2> 		mov [NextMemLoc], eax
  5995                              <2> 		mov	[MemLoc], esi
  5996                              <2> 		call DMACopy
  5997                              <2> 		xor ebx, ebx
  5998                              <2> 		mov bx, [SegLoc]
  5999                              <2> 		xor ecx, ecx
  6000                              <2> 		mov cx, [Length1]
  6001                              <2> 		shr cx, 1
  6002                              <2> 		inc cx
  6003                              <2> 		add ebx, ecx
  6004                              <2> 		mov [SegLoc], bx
  6005                              <2> 		add ebx, 0x80000
  6006                              <2> 		mov esi, [NextMemLoc]
  6007                              <2> 		mov eax, esi
  6008                              <2> 		add eax, ecx
  6009                              <2> 		mov [NextMemLoc], eax
  6010                              <2> 		mov	[MemLoc], esi
  6011                              <2> 		call DMACopy
  6012                              <2> 		call DMAPlay
  6013                              <2> 		call PlayDSP
  6014                              <2> 		ret
  6015                              <2> WAVSTART equ 44
  6016                              <2> wave_player:
  6017                              <2> 	cmp byte [SoundBlaster], 1
  6018                              <2> 	je near sbplay
  6019                              <2> 	mov esi, nosoundblaster
  6020                              <2> 	call print
  6021                              <2> 	ret
  6022                              <2> %else
  6023                              <2> 	wave_player:
  6024 00004712 BE[1D470000]        <2> 		mov esi, nosoundblaster
  6025 00004717 E8FAD5FFFF          <2> 		call print
  6026 0000471C C3                  <2> 		ret
  6027                              <2> %endif
  6028 0000471D 4E6F20536F756E6420- <2> nosoundblaster db "No Sound Blaster detected.",10,0
  6029 00004726 426C61737465722064- <2>
  6030 0000472F 657465637465642E0A- <2>
  6031 00004738 00                  <2>
  6032                              <1> %endif
  6033                              <1> %include 'source/programs/pwd.asm'
  6034 00004739 FF2C70776400        <2> db 255,44,"pwd",0
  6035 0000473F BE[E49A0300]        <2> 	mov esi, currentfolder
  6036 00004744 E8AED5FFFF          <2> 	call printquiet
  6037 00004749 BE[3F820000]        <2> 	mov esi, line
  6038 0000474E E8C3D5FFFF          <2> 	call print
  6039 00004753 C3                  <2> 	ret
  6040                              <2> 	
  6041                              <1> %include 'source/programs/reboot.asm'
  6042 00004754 FF2C7265626F6F7400  <2> 	db 255,44,"reboot",0
  6043 0000475D 0F011D[67470000]    <2> 		lidt [idtreboot]
  6044 00004764 CD00                <2> 		int 0
  6045 00004766 F4                  <2> 		hlt
  6046                              <2> 	
  6047 00004767 0000                <2> 	idtreboot dw 0
  6048 00004769 00000000            <2> 			  dd 0
  6049                              <2> 
  6050                              <2> 	coldboot:
  6051 0000476D 66B84000            <2> 		MOV AX, 0040h
  6052 00004771 8EC0                <2> 		MOV ES, AX
  6053 00004773 2666C7057200000000- <2> 		MOV WORD [ES:00072h], 0h
  6054 0000477C 00                  <2>
  6055 0000477D EA00000000FFFF      <2> 		JMP 0FFFFh:0000h
  6056 00004784 CF                  <2> 		IRET
  6057                              <2> 
  6058                              <2> 	warmboot:
  6059 00004785 66B84000            <2> 		MOV AX, 0040h
  6060 00004789 8EC0                <2> 		MOV ES, AX
  6061 0000478B 2666C7057200000034- <2> 		MOV WORD [ES:00072h], 01234h
  6062 00004794 12                  <2>
  6063 00004795 EA00000000FFFF      <2> 		JMP 0FFFFh:0000h
  6064 0000479C CF                  <2> 		IRET
  6065                              <2> 		
  6066                              <1> %include 'source/programs/reg.asm'
  6067 0000479D FF2C72656700        <2> db 255,44,"reg",0
  6068 000047A3 CD03                <2> 	int 3
  6069 000047A5 C3                  <2> 	ret 
  6070                              <1> %ifdef disk.none
  6071                              <1> %else
  6072                              <1> 	%include 'source/programs/show.asm'
  6073 000047A6 FF2C73686F7700      <2> db 255,44,"show",0
  6074                              <2> showprog:
  6075 000047AD 8B3D[602F0000]      <2> 		mov edi, [currentcommandloc]
  6076 000047B3 81C705000000        <2> 		add edi, 5
  6077 000047B9 BE00004000          <2> 		mov esi, 0x400000
  6078 000047BE 803F26              <2> 		cmp byte [edi], '&'
  6079 000047C1 741B                <2> 		je .nullfile
  6080 000047C3 BE00008000          <2> 		mov esi, 0x800000
  6081 000047C8 E8121B0000          <2> 		call loadfile
  6082 000047CD 81FA94010000        <2> 		cmp edx, 404
  6083 000047D3 0F8483000000        <2> 		je near filenotfound
  6084 000047D9 BE00008000          <2> 		mov esi, 0x800000
  6085                              <2> .nullfile:
  6086                              <2> %ifdef gui.included
  6087 000047DE 66813E424D          <2> 		cmp word [esi], "BM"
  6088 000047E3 7410                <2> 		je bmpfound
  6089                              <2> %endif
  6090 000047E5 E82CD5FFFF          <2> 		call print
  6091 000047EA BE[3F820000]        <2> 		mov esi, line
  6092 000047EF E822D5FFFF          <2> 		call print
  6093 000047F4 C3                  <2> 		ret
  6094                              <2> %ifdef gui.included
  6095                              <2> bmpfound:
  6096 000047F5 803D[64820000]00    <2> 		cmp byte [guion], 0
  6097 000047FC 0F8428000000        <2> 		je near noguibmp
  6098 00004802 BE00008000          <2> 		mov esi, 0x800000
  6099 00004807 31C9                <2> 		xor ecx, ecx
  6100 00004809 31D2                <2> 		xor edx, edx
  6101 0000480B 31C0                <2> 		xor eax, eax
  6102 0000480D 31DB                <2> 		xor ebx, ebx
  6103 0000480F E8AC1C0000          <2> 		call showbmp
  6104 00004814 30C0                <2> 		xor al, al
  6105 00004816 B405                <2> 		mov ah, 5
  6106 00004818 CD30                <2> 		int 30h
  6107 0000481A E816230000          <2> 		call guiclear
  6108 0000481F E8F51F0000          <2> 		call clearmousecursor
  6109 00004824 E85C230000          <2> 		call reloadallgraphics
  6110 00004829 C3                  <2> 		ret
  6111                              <2> noguibmp:
  6112 0000482A BE[35480000]        <2> 		mov esi, warnguimsg
  6113 0000482F E8E2D4FFFF          <2> 		call print
  6114 00004834 C3                  <2> 		ret
  6115 00004835 546869732063616E20- <2> warnguimsg db "This can not be done without the GUI.",10,0
  6116 0000483E 6E6F7420626520646F- <2>
  6117 00004847 6E6520776974686F75- <2>
  6118 00004850 742074686520475549- <2>
  6119 00004859 2E0A00              <2>
  6120                              <2> %endif
  6121                              <2> 
  6122                              <2> filenotfound:
  6123 0000485C BE[8F480000]        <2> 		mov esi, filenf
  6124 00004861 E8B0D4FFFF          <2> 		call print
  6125 00004866 8B35[602F0000]      <2> 		mov esi, [currentcommandloc]
  6126                              <2> findfilenotfoundzero:
  6127 0000486C 8A06                <2> 		mov al, [esi]
  6128 0000486E 46                  <2> 		inc esi
  6129 0000486F 3C00                <2> 		cmp al, 0
  6130 00004871 7411                <2> 		je nofilenamenotfound
  6131 00004873 81FE[58B50300]      <2> 		cmp esi, buftxtend
  6132 00004879 7309                <2> 		jae nofilenamenotfound
  6133 0000487B 3C20                <2> 		cmp al, " "
  6134 0000487D 75ED                <2> 		jne findfilenotfoundzero
  6135 0000487F E892D4FFFF          <2> 		call print
  6136                              <2> nofilenamenotfound:
  6137 00004884 BE[9A480000]        <2> 		mov esi, filenf2
  6138 00004889 E888D4FFFF          <2> 		call print
  6139 0000488E C3                  <2> 		ret
  6140 0000488F 5468652066696C6520- <2> filenf db "The file ",34,0
  6141 00004898 2200                <2>
  6142 0000489A 2220636F756C64206E- <2> filenf2 db 34," could not be found.",10,0
  6143 000048A3 6F7420626520666F75- <2>
  6144 000048AC 6E642E0A00          <2>
  6145                              <1> %endif
  6146                              <1> %include 'source/programs/shush.asm'
  6147 000048B1 FF2C736875736800    <2> db 255,44,"shush",0	;if you add 2 values it will switch size using the first as X in chars and the second as Y in chars
  6148                              <2> shushprog:
  6149                              <2> %ifdef gui.included
  6150 000048B9 803D[64820000]00    <2> 	cmp byte [guion], 0
  6151 000048C0 0F84B9000000        <2> 	je near .noswitchsize
  6152 000048C6 8B35[602F0000]      <2> 	mov esi, [currentcommandloc]
  6153 000048CC 81C606000000        <2> 	add esi, 6
  6154 000048D2 56                  <2> 	push esi
  6155 000048D3 4E                  <2> 	dec esi
  6156                              <2> .findspace:
  6157 000048D4 46                  <2> 	inc esi
  6158 000048D5 8A06                <2> 	mov al, [esi]
  6159 000048D7 3C00                <2> 	cmp al, 0
  6160 000048D9 0F84A0000000        <2> 	je near .noswitchsize
  6161 000048DF 3C58                <2> 	cmp al, "X"
  6162 000048E1 7408                <2> 	je .donefind
  6163 000048E3 3C78                <2> 	cmp al, "x"
  6164 000048E5 7404                <2> 	je .donefind
  6165 000048E7 3C20                <2> 	cmp al, " "
  6166 000048E9 75E9                <2> 	jne .findspace
  6167                              <2> .donefind:
  6168 000048EB 30C0                <2> 	xor al, al
  6169 000048ED 8806                <2> 	mov [esi], al
  6170 000048EF 46                  <2> 	inc esi
  6171 000048F0 89F7                <2> 	mov edi, esi
  6172 000048F2 E83CEAFFFF          <2> 	call cnvrttxt
  6173 000048F7 89C8                <2> 	mov eax, ecx
  6174 000048F9 5E                  <2> 	pop esi
  6175 000048FA 50                  <2> 	push eax
  6176 000048FB 89F7                <2> 	mov edi, esi
  6177 000048FD E831EAFFFF          <2> 	call cnvrttxt
  6178 00004902 89CB                <2> 	mov ebx, ecx
  6179 00004904 58                  <2> 	pop eax	
  6180 00004905 6681FB0000          <2> 	cmp bx, 0
  6181 0000490A 0F846F000000        <2> 	je near .noswitchsize
  6182 00004910 663D0000            <2> 	cmp ax, 0
  6183 00004914 0F8465000000        <2> 	je near .noswitchsize
  6184 0000491A 66C1E303            <2> 	shl bx, 3
  6185 0000491E 66C1E004            <2> 	shl ax, 4
  6186 00004922 663B1D[70540000]    <2> 	cmp bx, [resolutionx]
  6187 00004929 7607                <2> 	jbe .nofixx
  6188 0000492B 668B1D[70540000]    <2> 	mov bx, [resolutionx]
  6189                              <2> .nofixx:
  6190 00004932 66051000            <2> 	add ax, 16
  6191 00004936 663B05[72540000]    <2> 	cmp ax, [resolutiony]
  6192 0000493D 7606                <2> 	jbe .nofixy
  6193 0000493F 66A1[72540000]      <2> 	mov ax, [resolutiony]
  6194                              <2> .nofixy:
  6195 00004945 662D1000            <2> 	sub ax, 16
  6196 00004949 6631C9              <2> 	xor cx, cx
  6197 0000494C 6631D2              <2> 	xor dx, dx
  6198 0000494F 66891D[236F0000]    <2> 	mov [termwindow], bx
  6199 00004956 66A3[256F0000]      <2> 	mov [termwindow + 2], ax	;the previous lines of code make a large terminal window that is 4 characters smaller than the screen
  6200 0000495C BE[236F0000]        <2> 	mov esi, termwindow
  6201 00004961 31DB                <2> 	xor ebx, ebx
  6202 00004963 6631C0              <2> 	xor ax, ax
  6203 00004966 E8E52A0000          <2> 	call showwindow
  6204 0000496B E8C5210000          <2> 	call guiclear
  6205 00004970 E850D4FFFF          <2> 	call clear
  6206 00004975 E80B220000          <2> 	call reloadallgraphics
  6207 0000497A E8521F0000          <2> 	call switchmousepos2
  6208                              <2> .noswitchsize:
  6209                              <2> %endif
  6210 0000497F BE[8A490000]        <2> 	mov esi, shushmsg
  6211 00004984 E88DD3FFFF          <2> 	call print
  6212 00004989 C3                  <2> 	ret
  6213 0000498A 57656C636F6D652074- <2> 	shushmsg db "Welcome to the SollerOS Hardly Unix-Compatible Shell!",10,0
  6214 00004993 6F2074686520536F6C- <2>
  6215 0000499C 6C65724F5320486172- <2>
  6216 000049A5 646C7920556E69782D- <2>
  6217 000049AE 436F6D70617469626C- <2>
  6218 000049B7 65205368656C6C210A- <2>
  6219 000049C0 00                  <2>
  6220                              <1> %include 'source/programs/system.asm'
  6221 000049C1 FF2C73797374656D00  <2> 	db 255,44,"system",0
  6222 000049CA BE[C74A0000]        <2> 	mov esi, kernelinfomsg
  6223 000049CF E823D3FFFF          <2> 	call printquiet
  6224 000049D4 B9[AE840300]        <2> 	mov ecx, osend
  6225 000049D9 E873E8FFFF          <2> 	call showdec
  6226 000049DE BE[DC4A0000]        <2> 	mov esi, diskbytemsg
  6227 000049E3 E80FD3FFFF          <2> 	call printquiet
  6228 000049E8 B9[AE840300]        <2> 	mov ecx, osend
  6229 000049ED 81C1[0E730500]      <2> 	add ecx, commandbufend
  6230 000049F3 81E9[D4860300]      <2> 	sub ecx, bssstart	;add the extra buffer space
  6231 000049F9 E853E8FFFF          <2> 	call showdec
  6232 000049FE BE[F34A0000]        <2> 	mov esi, membytemsg
  6233 00004A03 E8EFD2FFFF          <2> 	call printquiet
  6234 00004A08 BE[3E4B0000]        <2> 	mov esi, endofmemmsg
  6235 00004A0D E8E5D2FFFF          <2> 	call printquiet
  6236 00004A12 B9[0E871500]        <2> 	mov ecx, bssend
  6237 00004A17 E86BE7FFFF          <2> 	call showhex
  6238 00004A1C BE[0C4B0000]        <2> 	mov esi, systeminfomsg
  6239 00004A21 E8D1D2FFFF          <2> 	call printquiet
  6240                              <2> getcpuspeed:
  6241 00004A26 B8FE000000          <2> 	mov eax, 0xFE
  6242 00004A2B E621                <2> 	out 0x21, al ;mask off all but timer interrupt
  6243 00004A2D B020                <2> 	mov al, 0x20
  6244 00004A2F E620                <2> 	out 0x20, al
  6245 00004A31 F4                  <2> 	hlt
  6246 00004A32 0F31                <2> 	rdtsc
  6247 00004A34 89D6                <2> 	mov esi, edx
  6248 00004A36 89C7                <2> 	mov edi, eax
  6249 00004A38 31C0                <2> 	xor eax, eax
  6250 00004A3A C605[3D020000]01    <2> 	mov byte [testingcpuspeed], 1
  6251                              <2> cpuspeedloop:	;wait until next timer interrupt, then inc eax until the next
  6252 00004A41 40                  <2> 	inc eax
  6253 00004A42 EBFD                <2> 	jmp cpuspeedloop
  6254                              <2> cpuspeedloopend:
  6255 00004A44 0F31                <2> 	rdtsc
  6256 00004A46 29F8                <2> 	sub eax, edi
  6257 00004A48 29F2                <2> 	sub edx, esi
  6258 00004A4A 8915[46020000]      <2> 	mov [cpuclocksperint + 4], edx
  6259 00004A50 A3[42020000]        <2> 	mov [cpuclocksperint], eax
  6260 00004A55 31C0                <2> 	xor eax, eax
  6261 00004A57 E621                <2> 	out 0x21, al
  6262 00004A59 B020                <2> 	mov al, 0x20
  6263 00004A5B E620                <2> 	out 0x20, al
  6264 00004A5D 31D2                <2> 	xor edx, edx
  6265 00004A5F 31C0                <2> 	xor eax, eax
  6266 00004A61 A1[3E020000]        <2> 	mov eax, [cpuspeedperint]
  6267 00004A66 D1E0                <2> 	shl eax, 1	;the cpu speed loop actually contains 2 commands so multiply the
  6268                              <2> 				;result by 2
  6269 00004A68 8B1D[50020000]      <2> 	mov ebx, [timeinterval]
  6270 00004A6E C1EB0A              <2> 	shr ebx, 10 ;divide the interval by 1024
  6271 00004A71 F7F3                <2> 	div ebx	;quotient in eax, remainder in edx
  6272 00004A73 89C1                <2> 	mov ecx, eax
  6273 00004A75 E8D7E7FFFF          <2> 	call showdec
  6274 00004A7A BE[224B0000]        <2> 	mov esi, cpuspeedmsg
  6275 00004A7F E873D2FFFF          <2> 	call printquiet
  6276 00004A84 31D2                <2> 	xor edx, edx
  6277 00004A86 A1[42020000]        <2> 	mov eax, [cpuclocksperint]
  6278 00004A8B 8B15[46020000]      <2> 	mov edx, [cpuclocksperint + 4]
  6279 00004A91 8B1D[50020000]      <2> 	mov ebx, [timeinterval]
  6280 00004A97 C1EB0A              <2> 	shr ebx, 10
  6281 00004A9A F7F3                <2> 	div ebx
  6282 00004A9C 89C1                <2> 	mov ecx, eax
  6283 00004A9E E8AEE7FFFF          <2> 	call showdec
  6284 00004AA3 BE[284B0000]        <2> 	mov esi, cpuclockmsg
  6285 00004AA8 E84AD2FFFF          <2> 	call printquiet
  6286 00004AAD 8B0D[4A020000]      <2> 	mov ecx, [memoryspace]
  6287 00004AB3 C1E914              <2> 	shr ecx, 20
  6288 00004AB6 41                  <2> 	inc ecx	;the reading is one MB behind
  6289 00004AB7 E895E7FFFF          <2> 	call showdec
  6290 00004ABC BE[2D4B0000]        <2> 	mov esi, memoryspacemsg
  6291 00004AC1 E850D2FFFF          <2> 	call print
  6292                              <2> %ifdef sound.included
  6293                              <2> 	cmp byte [SoundBlaster], 0
  6294                              <2> 	je .nosb
  6295                              <2> 	mov esi, soundblastermsg
  6296                              <2> 	call print
  6297                              <2> .nosb:
  6298                              <2> %endif
  6299 00004AC6 C3                  <2> 	ret
  6300                              <2> 
  6301 00004AC7 4B65726E656C20496E- <2> kernelinfomsg db "Kernel Information:",10,0
  6302 00004AD0 666F726D6174696F6E- <2>
  6303 00004AD9 3A0A00              <2>
  6304 00004ADC 427974657320446973- <2> diskbytemsg db "Bytes Disk Space Used",10,0
  6305 00004AE5 6B2053706163652055- <2>
  6306 00004AEE 7365640A00          <2>
  6307 00004AF3 4279746573204D656D- <2> membytemsg db "Bytes Memory Space Used",10,0
  6308 00004AFC 6F7279205370616365- <2>
  6309 00004B05 20557365640A00      <2>
  6310 00004B0C 0A53797374656D2049- <2> systeminfomsg db 10,"System Information:",10,0
  6311 00004B15 6E666F726D6174696F- <2>
  6312 00004B1E 6E3A0A00            <2>
  6313                              <2> %ifdef sound.included
  6314                              <2> 	soundblastermsg db "Soundblaster Detected.",10,0
  6315                              <2> %endif
  6316 00004B22 4D4950530A00        <2> cpuspeedmsg db "MIPS",10,0
  6317 00004B28 4D487A0A00          <2> cpuclockmsg db "MHz",10,0
  6318 00004B2D 4D42204D656D6F7279- <2> memoryspacemsg db "MB Memory Space",10,0
  6319 00004B36 2053706163650A00    <2>
  6320 00004B3E 456E64206F66204D65- <2> endofmemmsg: db "End of Memory Space: 0x",0
  6321 00004B47 6D6F72792053706163- <2>
  6322 00004B50 653A20307800        <2>
  6323                              <1> %include 'source/programs/time.asm'
  6324 00004B56 082E30303030303030- <2> timenscache db 8,".000000000"
  6325 00004B5F 3030                <2>
  6326 00004B61 200A00              <2> timenscacheend: db " ",10,0
  6327 00004B64 00                  <2> istimeset db 0
  6328 00004B65 456E74657220746865- <2> settimemsg db "Enter the current UNIX time:",10,0
  6329 00004B6E 2063757272656E7420- <2>
  6330 00004B77 554E49582074696D65- <2>
  6331 00004B80 3A0A00              <2>
  6332 00004B83 00<rept>            <2> timeinputbuffer times 12 db 0
  6333 00004B8F 00                  <2> timeinputbend: db 0
  6334                              <2> 
  6335 00004B90 FF2C74696D6500      <2> db 255,44,"time",0
  6336                              <2> 	;cmp byte [istimeset], 0
  6337                              <2> 	;jne timeisset
  6338 00004B97 E880000000          <2> 	call time
  6339 00004B9C E828020000          <2> 	call timeconvert	
  6340                              <2> 	; mov esi, settimemsg
  6341                              <2> 	; call print
  6342                              <2> 	; mov esi, timeinputbuffer
  6343                              <2> 	; mov edi, timeinputbend
  6344                              <2> 	; call readline
  6345                              <2> 	; mov esi, timeinputbuffer
  6346                              <2> 	; xor edi, edi
  6347                              <2> 	; call cnvrttxt
  6348 00004BA1 890D[54020000]      <2> 	mov [timeseconds], ecx
  6349                              <2> 	;xor ecx, ecx
  6350                              <2> 	;mov [timenanoseconds], ecx
  6351 00004BA7 C605[644B0000]01    <2> 	mov byte [istimeset], 1
  6352                              <2> timeisset:
  6353 00004BAE 8B0D[54020000]      <2> 	mov ecx, [timeseconds]
  6354 00004BB4 E898E6FFFF          <2> 	call showdec
  6355                              <2> 	
  6356 00004BB9 8B0D[58020000]      <2> 	mov ecx, [timenanoseconds]
  6357 00004BBF BE[564B0000]        <2> 	mov esi, timenscache
  6358 00004BC4 C7460230303030      <2> 	mov dword [esi+ 2], "0000"
  6359 00004BCB C7460630303030      <2> 	mov dword [esi + 6], "0000"
  6360 00004BD2 C6460A30            <2> 	mov byte [esi + 10], "0"
  6361 00004BD6 BE[614B0000]        <2> 	mov esi, timenscacheend
  6362 00004BDB E854E4FFFF          <2> 	call convert
  6363 00004BE0 BE[564B0000]        <2> 	mov esi, timenscache
  6364 00004BE5 E80DD1FFFF          <2> 	call printquiet
  6365                              <2> 	
  6366 00004BEA E82D000000          <2> 	call time
  6367 00004BEF BE[344F0000]        <2> 	mov esi, timeshow
  6368 00004BF4 E8FED0FFFF          <2> 	call printquiet
  6369 00004BF9 BE[3F820000]        <2> 	mov esi, line
  6370 00004BFE E8F4D0FFFF          <2> 	call printquiet
  6371 00004C03 BE[3D4F0000]        <2> 	mov esi, dateshow
  6372 00004C08 E8EAD0FFFF          <2> 	call printquiet
  6373 00004C0D BE[3F820000]        <2> 	mov esi, line
  6374 00004C12 E8E0D0FFFF          <2> 	call printquiet
  6375 00004C17 E9BE000000          <2> 	jmp findday
  6376                              <2> time:
  6377 00004C1C E851010000          <2> 	call tstackput1
  6378 00004C21 B00A                <2> 	mov al,10			;Get RTC register A
  6379 00004C23 E87B010000          <2> 	call tget1
  6380 00004C28 A880                <2> 	test al,0x80			;Is update in progress?
  6381 00004C2A 75F0                <2> 	jne time				; yes, wait
  6382                              <2> 
  6383 00004C2C B000                <2> 	mov al,0			;Get seconds (00 to 59)
  6384 00004C2E E870010000          <2> 	call tget1
  6385 00004C33 A2[2B4F0000]        <2> 	mov [RTCtimeSecond],al
  6386                              <2> 
  6387 00004C38 B002                <2> 	mov al,0x02			;Get minutes (00 to 59)
  6388 00004C3A E864010000          <2> 	call tget1
  6389 00004C3F A2[2C4F0000]        <2> 	mov [RTCtimeMinute],al
  6390                              <2> 
  6391 00004C44 B004                <2> 	mov al,0x04			;Get hours (see notes)
  6392 00004C46 E858010000          <2> 	call tget1
  6393 00004C4B A2[2D4F0000]        <2> 	mov [RTCtimeHour],al
  6394                              <2> 
  6395 00004C50 B007                <2> 	mov al,0x07			;Get day of month (01 to 31)
  6396 00004C52 E84C010000          <2> 	call tget1
  6397 00004C57 A2[2E4F0000]        <2> 	mov [RTCtimeDay],al
  6398                              <2> 
  6399 00004C5C B008                <2> 	mov al,0x08			;Get month (01 to 12)
  6400 00004C5E E840010000          <2> 	call tget1
  6401 00004C63 241F                <2> 	and al, 11111b
  6402 00004C65 A2[2F4F0000]        <2> 	mov [RTCtimeMonth],al
  6403                              <2> 
  6404 00004C6A B009                <2> 	mov al,0x09			;Get year (00 to 99)
  6405 00004C6C E832010000          <2> 	call tget1
  6406 00004C71 A2[304F0000]        <2> 	mov [RTCtimeYear],al
  6407                              <2> 	
  6408 00004C76 BE[344F0000]        <2> 	mov esi, timeshow
  6409 00004C7B 8A2D[2D4F0000]      <2> 	mov ch, [RTCtimeHour]
  6410 00004C81 E828010000          <2> 	call tput1
  6411 00004C86 8A2D[2C4F0000]      <2> 	mov ch, [RTCtimeMinute]
  6412 00004C8C E81D010000          <2> 	call tput1
  6413 00004C91 8A2D[2B4F0000]      <2> 	mov ch, [RTCtimeSecond]
  6414 00004C97 E812010000          <2> 	call tput1
  6415 00004C9C BE[3D4F0000]        <2> 	mov esi, dateshow
  6416 00004CA1 8A2D[2F4F0000]      <2> 	mov ch, [RTCtimeMonth]
  6417 00004CA7 E802010000          <2> 	call tput1
  6418 00004CAC 8A2D[2E4F0000]      <2> 	mov ch, [RTCtimeDay]
  6419 00004CB2 E8F7000000          <2> 	call tput1
  6420 00004CB7 B520                <2> 	mov ch, 0x20
  6421 00004CB9 E8F0000000          <2> 	call tput1
  6422 00004CBE 4E                  <2> 	dec esi
  6423 00004CBF 8A2D[304F0000]      <2> 	mov ch, [RTCtimeYear]
  6424 00004CC5 E8E4000000          <2> 	call tput1
  6425 00004CCA E8BD000000          <2> 	call tstackget1
  6426 00004CCF C3                  <2> 	ret
  6427 00004CD0 BE[344F0000]        <2> 	mov esi, timeshow
  6428 00004CD5 E83CD0FFFF          <2> 	call print
  6429                              <2> ;;get day of week
  6430                              <2> ;;add these:
  6431                              <2> ;;century value
  6432                              <2> ;;last 2 digits of year
  6433                              <2> ;;last 2 digits of year right shifted twice
  6434                              <2> ;;month table value
  6435                              <2> ;;day of the month
  6436                              <2> ;;divide these by 7
  6437                              <2> ;;the remainder is the day
  6438                              <2> findday:
  6439 00004CDA 31C0                <2> 	xor eax, eax
  6440                              <2> ;;first convert the values from BCD to hex
  6441 00004CDC A0[2E4F0000]        <2> 	mov al, [RTCtimeDay]
  6442 00004CE1 E873000000          <2> 	call converttohex
  6443 00004CE6 8825[314F0000]      <2> 	mov [dayhex], ah
  6444 00004CEC A0[2F4F0000]        <2> 	mov al, [RTCtimeMonth]
  6445 00004CF1 E863000000          <2> 	call converttohex
  6446 00004CF6 8825[324F0000]      <2> 	mov [monthhex], ah
  6447 00004CFC A0[304F0000]        <2> 	mov al, [RTCtimeYear]
  6448 00004D01 E853000000          <2> 	call converttohex
  6449 00004D06 8825[334F0000]      <2> 	mov [yearhex], ah
  6450 00004D0C 31C0                <2> 	xor eax, eax
  6451 00004D0E A0[334F0000]        <2> 	mov al, [yearhex]
  6452 00004D13 C0E802              <2> 	shr al, 2
  6453 00004D16 0205[334F0000]      <2> 	add al, [yearhex]
  6454 00004D1C 0506000000          <2> 	add eax, 6
  6455 00004D21 31DB                <2> 	xor ebx, ebx
  6456 00004D23 8A1D[324F0000]      <2> 	mov bl, [monthhex]
  6457 00004D29 FECB                <2> 	dec bl
  6458 00004D2B 81C3[524F0000]      <2> 	add ebx, month
  6459 00004D31 31C9                <2> 	xor ecx, ecx
  6460 00004D33 8A0B                <2> 	mov cl, [ebx]
  6461 00004D35 01C8                <2> 	add eax, ecx
  6462 00004D37 8A0D[314F0000]      <2> 	mov cl, [dayhex]
  6463 00004D3D 01C8                <2> 	add eax, ecx
  6464 00004D3F 66BB0700            <2> 	mov bx, 7
  6465 00004D43 31D2                <2> 	xor edx, edx
  6466 00004D45 66F7F3              <2> 	div bx
  6467 00004D48 C1E202              <2> 	shl edx, 2
  6468 00004D4B 81C2[5E4F0000]      <2> 	add edx, day
  6469 00004D51 8B32                <2> 	mov esi, [edx]
  6470 00004D53 E8BECFFFFF          <2> 	call print
  6471 00004D58 C3                  <2> 	ret
  6472                              <2> 	
  6473                              <2> converttohex:
  6474 00004D59 88C4                <2> 	mov ah, al
  6475 00004D5B C0E804              <2> 	shr al, 4
  6476 00004D5E C0E404              <2> 	shl ah, 4
  6477 00004D61 C0EC04              <2> 	shr ah, 4
  6478 00004D64 3C00                <2> 	cmp al, 0
  6479 00004D66 7409                <2> 	je noconverttohex
  6480                              <2> converttohexlp:
  6481 00004D68 80C40A              <2> 	add ah, 10
  6482 00004D6B FEC8                <2> 	dec al
  6483 00004D6D 3C00                <2> 	cmp al, 0
  6484 00004D6F 75F7                <2> 	jne converttohexlp
  6485                              <2> noconverttohex:
  6486 00004D71 C3                  <2> 	ret
  6487                              <2> 	
  6488                              <2> tstackput1:
  6489 00004D72 8935[274F0000]      <2> 	mov [tstack + 20], esi
  6490 00004D78 BE[134F0000]        <2> 	mov esi, tstack
  6491 00004D7D 8906                <2> 	mov [esi], eax
  6492 00004D7F 895E04              <2> 	mov [esi + 4], ebx
  6493 00004D82 894E08              <2> 	mov [esi + 8], ecx
  6494 00004D85 89560C              <2> 	mov [esi + 12], edx
  6495 00004D88 897E10              <2> 	mov [esi + 16], edi
  6496 00004D8B C3                  <2> 	ret
  6497                              <2> 	
  6498                              <2> tstackget1:
  6499 00004D8C BE[134F0000]        <2> 	mov esi, tstack
  6500 00004D91 8B06                <2> 	mov eax, [esi]
  6501 00004D93 8B5E04              <2> 	mov ebx, [esi + 4]
  6502 00004D96 8B4E08              <2> 	mov ecx, [esi + 8]
  6503 00004D99 8B560C              <2> 	mov edx, [esi + 12]
  6504 00004D9C 8B7E10              <2> 	mov edi, [esi + 16]
  6505 00004D9F 8B7614              <2> 	mov esi, [esi + 20]
  6506 00004DA2 C3                  <2> 	ret
  6507                              <2> 	
  6508                              <2> tget1:
  6509 00004DA3 66BA7000            <2> 	mov dx, 0x70
  6510 00004DA7 EE                  <2> 	out dx, al
  6511 00004DA8 6642                <2> 	inc dx
  6512 00004DAA EC                  <2> 	in al, dx
  6513 00004DAB 664A                <2> 	dec dx
  6514 00004DAD C3                  <2> 	ret
  6515                              <2> 	
  6516                              <2> tput1:
  6517 00004DAE 66C1E904            <2> 	shr cx, 4
  6518 00004DB2 B030                <2> 	mov al, 48
  6519 00004DB4 00E8                <2> 	add al, ch
  6520 00004DB6 8806                <2> 	mov [esi], al
  6521 00004DB8 46                  <2> 	inc esi
  6522 00004DB9 B030                <2> 	mov al, 48
  6523 00004DBB C0E904              <2> 	shr cl, 4
  6524 00004DBE 00C8                <2> 	add al, cl
  6525 00004DC0 8806                <2> 	mov [esi], al
  6526 00004DC2 81C602000000        <2> 	add esi, 2
  6527 00004DC8 C3                  <2> 	ret
  6528                              <2> 	
  6529                              <2> timeconvert: ;return time in the RTCtime stuff in ecx
  6530 00004DC9 31DB                <2> 	xor ebx, ebx
  6531 00004DCB 31C9                <2> 	xor ecx, ecx
  6532 00004DCD 31FF                <2> 	xor edi, edi
  6533 00004DCF 31F6                <2> 	xor esi, esi
  6534                              <2> 	
  6535 00004DD1 A0[2B4F0000]        <2> 	mov al, [RTCtimeSecond]
  6536 00004DD6 E87EFFFFFF          <2> 	call converttohex
  6537 00004DDB 88E1                <2> 	mov cl, ah
  6538                              <2> 	
  6539 00004DDD A0[2C4F0000]        <2> 	mov al, [RTCtimeMinute]
  6540 00004DE2 E872FFFFFF          <2> 	call converttohex
  6541 00004DE7 88E3                <2> 	mov bl, ah
  6542 00004DE9 B83C000000          <2> 	mov eax, 60
  6543 00004DEE 31D2                <2> 	xor edx, edx
  6544 00004DF0 F7E3                <2> 	mul ebx
  6545 00004DF2 01C1                <2> 	add ecx, eax
  6546                              <2> 	
  6547 00004DF4 A0[2D4F0000]        <2> 	mov al, [RTCtimeHour]
  6548 00004DF9 E85BFFFFFF          <2> 	call converttohex
  6549 00004DFE 88E3                <2> 	mov bl, ah
  6550 00004E00 B8100E0000          <2> 	mov eax, 3600
  6551 00004E05 31D2                <2> 	xor edx, edx
  6552 00004E07 F7E3                <2> 	mul ebx
  6553 00004E09 01C1                <2> 	add ecx, eax
  6554                              <2> 		
  6555 00004E0B 31C0                <2> 	xor eax, eax
  6556 00004E0D A0[304F0000]        <2> 	mov al, [RTCtimeYear]
  6557 00004E12 E842FFFFFF          <2> 	call converttohex
  6558 00004E17 6689C6              <2> 	mov si, ax
  6559 00004E1A 66C1EE08            <2> 	shr si, 8
  6560 00004E1E 6681FE4600          <2> 	cmp si, 70
  6561 00004E23 7705                <2> 	ja .no100
  6562 00004E25 6681C66400          <2> 	add si, 100
  6563                              <2> .no100:
  6564 00004E2A 6681C66C07          <2> 	add si, 1900
  6565                              <2> 	
  6566 00004E2F BB[054F0000]        <2> 	mov ebx, .month
  6567 00004E34 A0[2E4F0000]        <2> 	mov al, [RTCtimeDay]
  6568 00004E39 E81BFFFFFF          <2> 	call converttohex
  6569 00004E3E 88E0                <2> 	mov al, ah
  6570 00004E40 FEC8                <2> 	dec al
  6571 00004E42 31D2                <2> 	xor edx, edx
  6572 00004E44 88C2                <2> 	mov dl, al
  6573 00004E46 A0[2F4F0000]        <2> 	mov al, [RTCtimeMonth]
  6574 00004E4B E809FFFFFF          <2> 	call converttohex
  6575 00004E50 88D0                <2> 	mov al, dl
  6576 00004E52 88E2                <2> 	mov dl, ah
  6577 00004E54 30E4                <2> 	xor ah, ah
  6578 00004E56 6689D5              <2> 	mov bp, dx
  6579                              <2> 	
  6580 00004E59 6689F7              <2> 	mov di, si
  6581 00004E5C 66C1EF02            <2> 	shr di, 2
  6582 00004E60 66C1E702            <2> 	shl di, 2
  6583 00004E64 C605[064F0000]1C    <2> 	mov byte [.month + 1], 28
  6584 00004E6B 6639F7              <2> 	cmp di, si
  6585 00004E6E 7506                <2> 	jne .nofebmod
  6586 00004E70 FE05[064F0000]      <2> 	inc byte [.month + 1]
  6587                              <2> .nofebmod:
  6588 00004E76 664D                <2> 	dec bp
  6589 00004E78 6681FD0000          <2> 	cmp bp, 0
  6590 00004E7D 7407                <2> 	je .ylp
  6591 00004E7F 8A13                <2> 	mov dl, [ebx]
  6592 00004E81 01D0                <2> 	add eax, edx
  6593 00004E83 43                  <2> 	inc ebx
  6594 00004E84 EBF0                <2> 	jmp .nofebmod
  6595                              <2> 	
  6596                              <2> .ylp:
  6597 00004E86 6689F7              <2> 	mov di, si
  6598 00004E89 66C1EF02            <2> 	shr di, 2
  6599 00004E8D 66C1E702            <2> 	shl di, 2
  6600 00004E91 81C18033E101        <2> 	add ecx, 31536000
  6601 00004E97 6639F7              <2> 	cmp di, si
  6602 00004E9A 7506                <2> 	jne .noymod
  6603 00004E9C 81C180510100        <2> 	add ecx, 86400
  6604                              <2> .noymod:
  6605 00004EA2 664E                <2> 	dec si
  6606 00004EA4 6681FEB207          <2> 	cmp si, 1970
  6607 00004EA9 77DB                <2> 	ja .ylp
  6608                              <2> 	
  6609 00004EAB BB80510100          <2> 	mov ebx, 86400
  6610 00004EB0 31D2                <2> 	xor edx, edx
  6611 00004EB2 F7E3                <2> 	mul ebx
  6612 00004EB4 01C1                <2> 	add ecx, eax
  6613                              <2> 	
  6614 00004EB6 31DB                <2> 	xor ebx, ebx
  6615 00004EB8 31D2                <2> 	xor edx, edx
  6616 00004EBA B8100E0000          <2> 	mov eax, 3600
  6617 00004EBF 8A3D[114F0000]      <2> 	mov bh, [timezoneh]
  6618 00004EC5 80FF80              <2> 	cmp bh, 128
  6619 00004EC8 720D                <2> 	jb .posh
  6620 00004ECA 28FB                <2> 	sub bl, bh
  6621 00004ECC 30FF                <2> 	xor bh, bh
  6622 00004ECE F7E3                <2> 	mul ebx
  6623 00004ED0 01C1                <2> 	add ecx, eax
  6624 00004ED2 E906000000          <2> 	jmp .doneth
  6625                              <2> .posh:
  6626 00004ED7 86DF                <2> 	xchg bl, bh
  6627 00004ED9 F7E3                <2> 	mul ebx
  6628 00004EDB 29C1                <2> 	sub ecx, eax
  6629                              <2> .doneth:
  6630                              <2> 
  6631 00004EDD 31DB                <2> 	xor ebx, ebx	
  6632 00004EDF 31D2                <2> 	xor edx, edx
  6633 00004EE1 B83C000000          <2> 	mov eax, 60
  6634 00004EE6 8A3D[124F0000]      <2> 	mov bh, [timezonem]
  6635 00004EEC 80FF80              <2> 	cmp bh, 128
  6636 00004EEF 720D                <2> 	jb .posm
  6637 00004EF1 28FB                <2> 	sub bl, bh
  6638 00004EF3 30FF                <2> 	xor bh, bh
  6639 00004EF5 F7E3                <2> 	mul ebx
  6640 00004EF7 01C1                <2> 	add ecx, eax
  6641 00004EF9 E906000000          <2> 	jmp .donetm
  6642                              <2> .posm:
  6643 00004EFE 86DF                <2> 	xchg bl, bh
  6644 00004F00 F7E3                <2> 	mul ebx
  6645 00004F02 29C1                <2> 	sub ecx, eax
  6646                              <2> .donetm:
  6647                              <2> 
  6648 00004F04 C3                  <2> 	ret
  6649                              <2> 	
  6650                              <2> 
  6651 00004F05 1F1C1F1E1F1E1F1F1E- <2> .month db 31,28,31,30,31,30,31,31,30,31,30,31
  6652 00004F0E 1F1E1F              <2>
  6653                              <2> 
  6654 00004F11 FA                  <2> 	timezoneh db -6
  6655 00004F12 00                  <2> 	timezonem db 0
  6656 00004F13 000000000000000000- <2> 	tstack dd 0,0,0,0,0,0
  6657 00004F1C 000000000000000000- <2>
  6658 00004F25 000000000000        <2>
  6659 00004F2B 00                  <2> 	RTCtimeSecond db 0
  6660 00004F2C 00                  <2> 	RTCtimeMinute db 0
  6661 00004F2D 00                  <2> 	RTCtimeHour db 0
  6662 00004F2E 00                  <2> 	RTCtimeDay db 0
  6663 00004F2F 00                  <2> 	RTCtimeMonth db 0
  6664 00004F30 00                  <2> 	RTCtimeYear db 0
  6665 00004F31 00                  <2> 	dayhex db 0
  6666 00004F32 00                  <2> 	monthhex db 0
  6667 00004F33 00                  <2> 	yearhex db 0
  6668 00004F34 30303A30303A303000  <2> 	timeshow db "00:00:00",0
  6669 00004F3D 30302D30302D303030- <2> 	dateshow db "00-00-0000 ",0
  6670 00004F46 302000              <2>
  6671                              <2> 	oldcentury:	;;from 1700 to 1900
  6672 00004F49 040200              <2> 	db 4,2,0
  6673                              <2> 	century:	;;from 2000 to 2500
  6674 00004F4C 060402000604        <2> 	db 6,4,2,0,6,4
  6675                              <2> 	month:
  6676 00004F52 000303060104060205- <2> 	db 0,3,3,6,1,4,6,2,5,0,3,5
  6677 00004F5B 000305              <2>
  6678                              <2> 	day:
  6679 00004F5E [7A4F0000]          <2> 	dd sunday
  6680 00004F62 [824F0000]          <2> 	dd monday
  6681 00004F66 [8A4F0000]          <2> 	dd tuesday
  6682 00004F6A [934F0000]          <2> 	dd wednesday
  6683 00004F6E [9E4F0000]          <2> 	dd thursday
  6684 00004F72 [A84F0000]          <2> 	dd friday
  6685 00004F76 [B04F0000]          <2> 	dd saturday
  6686                              <2> sunday:
  6687 00004F7A 53756E6461790A00    <2> 	db "Sunday",10,0
  6688                              <2> monday:
  6689 00004F82 4D6F6E6461790A00    <2> 	db "Monday",10,0
  6690                              <2> tuesday:
  6691 00004F8A 547565736461790A00  <2> 	db "Tuesday",10,0
  6692                              <2> wednesday:
  6693 00004F93 5765646E6573646179- <2> 	db "Wednesday",10,0
  6694 00004F9C 0A00                <2>
  6695                              <2> thursday:
  6696 00004F9E 54687572736461790A- <2> 	db "Thursday",10,0
  6697 00004FA7 00                  <2>
  6698                              <2> friday:
  6699 00004FA8 4672696461790A00    <2> 	db "Friday",10,0
  6700                              <2> saturday:
  6701 00004FB0 53617475726461790A- <2> 	db "Saturday",10,0
  6702 00004FB9 00                  <2>
  6703                              <1> %include 'source/programs/turnoff.asm'
  6704 00004FBA FF2C7475726E6F6666- <2> 	db 255,44,"turnoff",0
  6705 00004FC3 00                  <2>
  6706                              <2> 	turnoff:
  6707 00004FC4 66BB[DF4F]          <2> 			mov bx, shutdown
  6708 00004FC8 66891D[CB0C0000]    <2> 			mov [realmodeptr], bx
  6709 00004FCF BB[09500000]        <2> 			mov ebx, halt
  6710 00004FD4 891D[C70C0000]      <2> 			mov [realmodereturn], ebx
  6711 00004FDA E9D1BBFFFF          <2> 			jmp realmode
  6712                              <2> 
  6713                              <2> [BITS 16]
  6714                              <2> 		shutdown:
  6715 00004FDF B453                <2> 			mov ah, 0x53
  6716 00004FE1 B004                <2> 			mov al, 4
  6717 00004FE3 31DB                <2> 			xor bx, bx
  6718 00004FE5 CD15                <2> 			int 0x15
  6719                              <2> 			
  6720 00004FE7 B453                <2> 			mov ah, 0x53
  6721 00004FE9 B001                <2> 			mov al, 1
  6722 00004FEB 31DB                <2> 			xor bx, bx
  6723 00004FED CD15                <2> 			int 0x15
  6724                              <2> 			
  6725 00004FEF B453                <2> 			mov ah, 0x53
  6726 00004FF1 B008                <2> 			mov al, 8
  6727 00004FF3 BB0100              <2> 			mov bx, 1
  6728 00004FF6 B90100              <2> 			mov cx, 1
  6729 00004FF9 CD15                <2> 			int 0x15
  6730                              <2> 			
  6731 00004FFB B453                <2> 			mov ah, 0x53
  6732 00004FFD B007                <2> 			mov al, 7
  6733 00004FFF BB0100              <2> 			mov bx, 1
  6734 00005002 B90300              <2> 			mov cx, 3
  6735 00005005 CD15                <2> 			int 0x15
  6736 00005007 EBFE                <2> 			jmp $
  6737                              <2> 			[BITS 32]
  6738 00005009 EBFE                <2> halt: jmp $
  6739                              <1> %include 'source/programs/wait.asm'
  6740 0000500B FF2C7761697400      <2> db 255,44,"wait",0
  6741                              <2> waitkey:
  6742 00005012 E8FAD2FFFF          <2> 		call getchar
  6743 00005017 C3                  <2> 		ret
  6744                              <1> %include 'source/programs/while.asm'
  6745 00005018 FF2C7768696C6500    <2> db 255,44,"while",0
  6746 00005020 30C0                <2> whilecmd:  xor al, al
  6747 00005022 3805[529D0300]      <2> 	cmp [BATCHISON], al
  6748 00005028 0F8430EAFFFF        <2> 	je near notbatch
  6749 0000502E 8B35[4E9D0300]      <2> 	mov esi, [BATCHPOS]
  6750 00005034 81EE02000000        <2> 	sub esi, 2
  6751 0000503A 4E                  <2> whilefnd: dec esi
  6752 0000503B 8A06                <2> 	mov al, [esi]
  6753 0000503D 3C0A                <2> 	cmp al, 10
  6754 0000503F 0F840A000000        <2> 	je near whilefnd2
  6755 00005045 3C00                <2> 	cmp al, 0
  6756 00005047 0F8402000000        <2> 	je near whilefnd2
  6757 0000504D EBEB                <2> 	jmp whilefnd
  6758                              <2> whilefnd2:
  6759 0000504F 46                  <2> 	inc esi
  6760 00005050 8935[549D0300]      <2> 	mov [LOOPPOS], esi
  6761 00005056 C605[539D0300]01    <2> 	mov BYTE [LOOPON], 1
  6762 0000505D BE[58B10300]        <2> 	mov esi, buftxt
  6763 00005062 BB[58B10300]        <2> 	mov ebx, buftxt
  6764 00005067 81C306000000        <2> 	add ebx, 6
  6765 0000506D E93EF2FFFF          <2> 	jmp chkeqsn
  6766                              <1> progend:		;programs end here	
  6767                              <1> batchprogend:
  6768                                  	%include "source/hardware.asm"
  6769                              <1> %ifdef gui.included
  6770                              <1> 	%include "source/drivers/video/vesa.asm"
  6771                              <2> [BITS 16]
  6772                              <2> guiswitch:
  6773 00005072 81F90000            <2> 	cmp cx, 0
  6774 00005076 750B                <2> 	jne guiswitchdefnum
  6775 00005078 B81200              <2> 	mov ax, 12h
  6776 0000507B 31DB                <2> 	xor bx, bx
  6777 0000507D CD10                <2> 	int 10h
  6778 0000507F E85100              <2> 	call guiloadagain
  6779                              <2> guiswitchnocando:
  6780 00005082 C3                  <2> 	ret	;return without switching as mode number is bad
  6781                              <2> guiswitchdefnum:	;switch to a defined mode number
  6782 00005083 B8004F              <2> 	mov ax, 0x4F00
  6783 00005086 BF[5E52]            <2> 	mov di, VBEMODEBLOCK
  6784 00005089 CD10                <2> 	int 10h
  6785 0000508B BE[8052]            <2> 	mov si, reserved
  6786 0000508E 81EE0200            <2> 	sub si, 2
  6787                              <2> .loop:
  6788 00005092 81C60200            <2> 	add si, 2
  6789 00005096 81FE[5E53]          <2> 	cmp si, oemdata
  6790 0000509A 74E6                <2> 	je guiswitchnocando
  6791 0000509C 813CFFFF            <2> 	cmp word [si], 0xFFFF
  6792 000050A0 74E0                <2> 	je guiswitchnocando
  6793 000050A2 390C                <2> 	cmp [si], cx
  6794 000050A4 75EC                <2> 	jne .loop
  6795 000050A6 8936[B851]          <2> 	mov [videomodecache], si
  6796 000050AA 81C90040            <2> 	or cx, 0x4000	;make sure linear frame buffer is selected
  6797 000050AE B8014F              <2> 	mov ax, 0x4F01
  6798 000050B1 BF[5E54]            <2> 	mov di, VBEMODEINFOBLOCK
  6799 000050B4 890E[B651]          <2> 	mov [vesamode], cx
  6800 000050B8 CD10                <2> 	int 10h
  6801 000050BA E9D900              <2> 	jmp selectedvesa
  6802                              <2> guiload:
  6803 000050BD BE[3652]            <2> 	mov si, bootmsg
  6804 000050C0 E8ABAF              <2> 	call printrm
  6805 000050C3 31C0                <2> 	xor ax, ax
  6806 000050C5 CD16                <2> 	int 16h
  6807 000050C7 3C79                <2> 	cmp al, "y"
  6808 000050C9 0F855BAF            <2> 	jne near vgaset
  6809 000050CD BE[3E82]            <2> 	mov si, crlf
  6810 000050D0 E89BAF              <2> 	call printrm
  6811                              <2> guiloadagain:
  6812 000050D3 B8004F              <2> 	mov ax, 04F00h
  6813 000050D6 BF[5E52]            <2> 	mov di, VBEMODEBLOCK
  6814 000050D9 CD10                <2> 	int 10h
  6815 000050DB BE[8052]            <2> 	mov si, reserved
  6816 000050DE 81EE0200            <2> 	sub si, 2
  6817                              <2> findvideomodes:
  6818 000050E2 81C60200            <2> 	add si, 2
  6819 000050E6 8B0C                <2> 	mov cx, [si]
  6820 000050E8 81F9FFFF            <2> 	cmp cx, 0xFFFF
  6821 000050EC 0F840A00            <2> 	je near nextvmode
  6822 000050F0 81FE[5E53]          <2> 	cmp si, oemdata
  6823 000050F4 0F8330AF            <2> 	jae near vgaset	;;kill if no valid list is found
  6824 000050F8 EBE8                <2> 	jmp findvideomodes 	
  6825                              <2> ;;debug,shows vmodes available
  6826                              <2> nextvmode:
  6827 000050FA 81EE0200            <2> 	sub si, 2
  6828 000050FE 81FE[8052]          <2> 	cmp si, reserved
  6829 00005102 0F82CDFF            <2> 	jb near guiloadagain
  6830 00005106 8B0C                <2> 	mov cx, [si]
  6831 00005108 81F9FFFF            <2> 	cmp cx, 0xFFFF
  6832 0000510C 0F84EAFF            <2> 	je near nextvmode
  6833 00005110 81C90040            <2> 	or cx, 0x4000 		;;Linear Frame Buffer
  6834 00005114 B8014F              <2> 	mov ax, 04F01h
  6835 00005117 BF[5E54]            <2> 	mov di, VBEMODEINFOBLOCK
  6836 0000511A 890E[B651]          <2> 	mov [vesamode], cx
  6837 0000511E CD10                <2> 	int 10h
  6838 00005120 A0[7754]            <2> 	mov al, [bitsperpixel]
  6839 00005123 3C10                <2> 	cmp al, 16
  6840 00005125 75D3                <2> 	jne nextvmode
  6841 00005127 8936[B851]          <2> 	mov [videomodecache], si
  6842 0000512B 84E4                <2> 	test ah, ah
  6843 0000512D 0F842200            <2> 	jz near setvesamode
  6844 00005131 EBC7                <2> 	jmp nextvmode
  6845 00005133 0A0D49732074686973- <2> isthisvideook db 10,13,"Is this video mode OK?(y/n)",13,10,0
  6846 0000513C 20766964656F206D6F- <2>
  6847 00005145 6465204F4B3F28792F- <2>
  6848 0000514E 6E290D0A00          <2>
  6849                              <2> setvesamode:
  6850 00005153 8B36[B851]          <2> 	mov si, [videomodecache]
  6851 00005157 8B0C                <2> 	mov cx, [si]
  6852 00005159 E86500              <2> 	call decshow
  6853 0000515C B03A                <2> 	mov al, ':'
  6854 0000515E E8CD00              <2> 	call char
  6855 00005161 8B0E[7054]          <2> 	mov cx, [resolutionx]
  6856 00005165 E85900              <2> 	call decshow
  6857 00005168 B078                <2> 	mov al, "x"
  6858 0000516A E8C100              <2> 	call char
  6859 0000516D 8B0E[7254]          <2> 	mov cx, [resolutiony]
  6860 00005171 E84D00              <2> 	call decshow
  6861 00005174 B040                <2> 	mov al, "@"
  6862 00005176 E8B500              <2> 	call char
  6863 00005179 31C9                <2> 	xor cx, cx
  6864 0000517B 8A0E[7754]          <2> 	mov cl, [bitsperpixel]
  6865 0000517F E83F00              <2> 	call decshow
  6866 00005182 BE[3351]            <2> 	mov si, isthisvideook
  6867 00005185 E8E6AE              <2> 	call printrm
  6868 00005188 31C0                <2> 	xor ax, ax
  6869 0000518A CD16                <2> 	int 16h
  6870 0000518C 8B36[B851]          <2> 	mov si, [videomodecache]
  6871 00005190 3C79                <2> 	cmp al, "y"
  6872 00005192 0F8564FF            <2> 	jne near nextvmode
  6873                              <2> selectedvesa:
  6874 00005196 8B16[7054]          <2> 	mov dx, [resolutionx]
  6875 0000519A 01D2                <2> 	add dx, dx
  6876 0000519C 8916[5E55]          <2> 	mov [resolutionx2], dx
  6877 000051A0 31D2                <2> 	xor dx, dx
  6878 000051A2 31C9                <2> 	xor cx, cx
  6879 000051A4 B8024F              <2> 	mov ax, 04F02h
  6880 000051A7 8B1E[B651]          <2> 	mov bx, [vesamode]
  6881 000051AB CD10                <2> 	int 10h		;;enter VESA mode
  6882 000051AD C606[6482]01        <2> 	mov byte [guion], 1
  6883 000051B2 E883AE              <2> 	call getmemorysize;get the memory map after the video is initialized
  6884 000051B5 C3                  <2> 	ret
  6885                              <2> 	
  6886 000051B6 0000                <2> vesamode dw 0
  6887 000051B8 0000                <2> videomodecache dw 0
  6888                              <2> 
  6889 000051BA 0000000000          <2> dcnm db 0,0,0,0,0
  6890 000051BF 0000                <2> dcnmend db 0,0
  6891                              <2> 
  6892                              <2> 
  6893                              <2> decshow:
  6894 000051C1 BE[BA51]            <2> 	mov si, dcnm
  6895                              <2> decclear:
  6896 000051C4 B030                <2> 	mov al, "0"
  6897 000051C6 8804                <2> 	mov [si], al
  6898 000051C8 46                  <2> 	inc si
  6899 000051C9 81FE[BF51]          <2> 	cmp si, dcnmend
  6900 000051CD 76F5                <2> 	jbe decclear
  6901 000051CF 4E                  <2> 	dec si
  6902 000051D0 E81500              <2> 	call convertrm
  6903 000051D3 BE[BA51]            <2> 	mov si, dcnm
  6904                              <2> dectst:
  6905 000051D6 8A04                <2> 	mov al, [si]
  6906 000051D8 46                  <2> 	inc si
  6907 000051D9 81FE[BF51]          <2> 	cmp si, dcnmend
  6908 000051DD 7704                <2> 	ja dectstend
  6909 000051DF 3C30                <2> 	cmp al, "0"
  6910 000051E1 76F3                <2> 	jbe dectst
  6911                              <2> dectstend:
  6912 000051E3 4E                  <2> 	dec si
  6913 000051E4 E887AE              <2> 	call printrm
  6914 000051E7 C3                  <2> 	ret
  6915                              <2> 	
  6916                              <2> 	
  6917                              <2> convertrm:
  6918 000051E8 4E                  <2> 	dec si
  6919 000051E9 89F3                <2> 	mov bx, si		;place to convert into must be in si, number to convert must be in cx
  6920                              <2> cnvrtrm:
  6921 000051EB 89DE                <2> 	mov si, bx
  6922 000051ED 81EE0300            <2> 	sub si, 3
  6923 000051F1 46                  <2> ten3rm:	inc si
  6924 000051F2 81F9E803            <2> 	cmp cx, 1000
  6925 000051F6 7208                <2> 	jb ten2rm
  6926 000051F8 81E9E803            <2> 	sub cx, 1000
  6927 000051FC FE04                <2> 	inc byte [si]
  6928 000051FE EBEB                <2> 	jmp cnvrtrm
  6929 00005200 46                  <2> ten2rm:	inc si
  6930 00005201 81F96400            <2> 	cmp cx, 100
  6931 00005205 7208                <2> 	jb ten1rm
  6932 00005207 81E96400            <2> 	sub cx, 100
  6933 0000520B FE04                <2> 	inc byte [si]
  6934 0000520D EBDC                <2> 	jmp cnvrtrm
  6935 0000520F 46                  <2> ten1rm:	inc si
  6936 00005210 81F90A00            <2> 	cmp cx, 10
  6937 00005214 7208                <2> 	jb ten0rm
  6938 00005216 81E90A00            <2> 	sub cx, 10
  6939 0000521A FE04                <2> 	inc byte [si]
  6940 0000521C EBCD                <2> 	jmp cnvrtrm
  6941 0000521E 46                  <2> ten0rm:	inc si
  6942 0000521F 81F90100            <2> 	cmp cx, 1
  6943 00005223 7208                <2> 	jb tendnrm
  6944 00005225 81E90100            <2> 	sub cx, 1
  6945 00005229 FE04                <2> 	inc byte [si]
  6946 0000522B EBBE                <2> 	jmp cnvrtrm
  6947                              <2> tendnrm:
  6948 0000522D C3                  <2> 	ret
  6949                              <2> 
  6950                              <2>     char: 		    ;char must be in al
  6951 0000522E BB0700              <2>        mov bx, 07
  6952 00005231 B40E                <2> 	   mov ah, 0Eh
  6953 00005233 CD10                <2> 	   int 10h
  6954 00005235 C3                  <2> 	   ret
  6955                              <2> 
  6956 00005236 426F6F7420696E746F- <2> bootmsg:	db "Boot into the GUI?(y/n)",0
  6957 0000523F 20746865204755493F- <2>
  6958 00005248 28792F6E2900        <2>
  6959                              <2> 
  6960                              <2> 
  6961                              <2> mcursor:
  6962 0000524E 01                  <2> 	db	00000001b
  6963 0000524F 81                  <2> 	db	10000001b
  6964 00005250 C1                  <2> 	db	11000001b
  6965 00005251 E1                  <2> 	db	11100001b
  6966 00005252 F1                  <2> 	db	11110001b
  6967 00005253 F9                  <2> 	db	11111001b
  6968 00005254 FD                  <2> 	db	11111101b
  6969 00005255 FF                  <2> 	db	11111111b
  6970 00005256 F9                  <2> 	db	11111001b
  6971 00005257 B9                  <2> 	db	10111001b
  6972 00005258 39                  <2> 	db	00111001b
  6973 00005259 1C                  <2> 	db	00011100b
  6974 0000525A 1C                  <2> 	db	00011100b
  6975 0000525B 0E                  <2> 	db	00001110b
  6976 0000525C 0E                  <2> 	db	00001110b
  6977 0000525D 0C                  <2> 	db	00001100b
  6978                              <2> mcursorend:
  6979                              <2> 
  6980                              <2> 
  6981                              <2> VBEMODEBLOCK:
  6982 0000525E 00<rept>            <2> vbesignature 		times  4 db 0 	;VBE Signature
  6983 00005262 00<rept>            <2> vbeversion  		times  2 db 0	;VBE Version
  6984 00005264 00<rept>            <2> oemstringptr  		times  4 db 0	;Pointer to OEM String
  6985 00005268 00<rept>            <2> capabilities 		times  4 db 0	;Capabilities of graphics cont.
  6986 0000526C 00<rept>            <2> videomodeptr 		times  4 db 0	;Pointer to Video Mode List
  6987 00005270 00<rept>            <2> totalmemory   		times  2 db 0	;number of 64Kb memory blocks
  6988 00005272 00<rept>            <2> oemsoftwarerev  	times  2 db 0	;VBE implementation Software revision
  6989 00005274 00<rept>            <2> oemvendornameptr 	times  4 db 0	;Pointer to Vendor Name String
  6990 00005278 00<rept>            <2> oemproductnameptr 	times  4 db 0	;Pointer to Product Name String
  6991 0000527C 00<rept>            <2> oemproductrevptr 	times  4 db 0	;Pointer to Product Revision String
  6992 00005280 00<rept>            <2> reserved			times  222 db 0	;Reserved for VBE implementation scratch area
  6993 0000535E 00<rept>            <2> oemdata 			times  256 db 0	;Data Area for OEM Strings
  6994                              <2> 
  6995                              <2> VBEMODEINFOBLOCK:
  6996                              <2> ;Mandatory information for all VBE revision
  6997 0000545E 00<rept>            <2> modeattributes   	times  2 db 0	;Mode attributes
  6998 00005460 00                  <2> winaattributes   	times  1 db 0	;Window A attributes
  6999 00005461 00                  <2> winbattributes   	times  1 db 0	;Window B attributes
  7000 00005462 00<rept>            <2> wingranularity   	times  2 db 0	;Window granularity
  7001 00005464 00<rept>            <2> winsize          	times  2 db 0	;Window size
  7002 00005466 00<rept>            <2> winasegment      	times  2 db 0	;Window A start segment
  7003 00005468 00<rept>            <2> winbsegment      	times  2 db 0	;Window B start segment
  7004 0000546A 00<rept>            <2> winfuncptr       	times  4 db 0	;pointer to window function
  7005 0000546E 00<rept>            <2> bytesperscanline 	times  2 db 0	;Bytes per scan line
  7006                              <2> 
  7007                              <2> ;Mandatory information for VBE 1.2 and above
  7008 00005470 00<rept>            <2> resolutionx     	times  2 db 0	;Horizontal resolution in pixel or chars
  7009 00005472 00<rept>            <2> resolutiony	    	times  2 db 0	;Vertical resolution in pixel or chars
  7010 00005474 00                  <2> xcharsize       	times  1 db 0	;Character cell width in pixel
  7011 00005475 00                  <2> ycharsize       	times  1 db 0	;Character cell height in pixel
  7012 00005476 00                  <2> numberofplanes  	times  1 db 0	;Number of memory planes
  7013 00005477 00                  <2> bitsperpixel    	times  1 db 0	;Bits per pixel
  7014 00005478 00                  <2> numberofbanks   	times  1 db 0	;Number of banks
  7015 00005479 00                  <2> memorymodel     	times  1 db 0	;Memory model type
  7016 0000547A 00                  <2> banksize        	times  1 db 0	;Bank size in KB
  7017 0000547B 00                  <2> numberofimagepages	times  1 db 0	;Number of images
  7018 0000547C 00                  <2> reserved1       	times  1 db 0	;Reserved for page function
  7019                              <2> 
  7020                              <2> ;Direct Color fields (required for direct/6 and YUV/7 memory models)
  7021 0000547D 00                  <2> redmasksize			times  1 db 0	;Size of direct color red mask in bits
  7022 0000547E 00                  <2> redfieldposition	times  1 db 0	;Bit position of lsb of red bask
  7023 0000547F 00                  <2> greenmasksize   	times  1 db 0	;Size of direct color green mask in bits
  7024 00005480 00                  <2> greenfieldposition	times  1 db 0	;Bit position of lsb of green bask
  7025 00005481 00                  <2> bluemasksize		times  1 db 0	;Size of direct color blue mask in bits
  7026 00005482 00                  <2> bluefieldposition	times  1 db 0	;Bit position of lsb of blue bask
  7027 00005483 00                  <2> rsvdmasksize        times  1 db 0		;Size of direct color reserved mask in bits
  7028 00005484 00                  <2> rsvdfieldposition	times  1 db 0		;Bit position of lsb of reserved bask
  7029 00005485 00                  <2> directcolormodeinfo	times  1 db 0	;Direct color mode attributes
  7030                              <2> 
  7031                              <2> ;Mandatory information for VBE 2.0 and above
  7032 00005486 00<rept>            <2> physbaseptr 		times  4 db 0	;Physical address for flat frame buffer
  7033 0000548A 00<rept>            <2> offscreenmemoffset 	times  4 db 0	;Pointer to start of off screen memory
  7034 0000548E 00<rept>            <2> offscreenmemsize 	times  2 db 0    ;Amount of off screen memory in 1Kb units
  7035 00005490 00<rept>            <2> reserved2 			times  206 db 0  ;Remainder of ModeInfoBlock
  7036                              <2> 
  7037 0000555E 00000000            <2> resolutionx2 dd 0	;this is not part of the VBE but is necessary GUI info
  7038                              <2> VBEEND:
  7039                              <2> [BITS 32]
  7040                              <1> 	%include "source/drivers/input/mouse.asm"
  7041 00005562 00                  <2> mousedisabled db 0
  7042                              <2> 	
  7043                              <2> 	cursorgui:
  7044 00005563 803D[F6810000]01    <2> 		cmp byte [mouseon], 1
  7045 0000556A 0F8432000000        <2> 		je near mousedaemon
  7046 00005570 803D[64820000]00    <2> 		cmp byte [guion], 0
  7047 00005577 0F84D2040000        <2> 		je near entdown
  7048                              <2> 	initmouse:
  7049 0000557D 803D[64820000]00    <2> 		cmp byte [guion], 0
  7050 00005584 7405                <2> 		je noswmsposinit
  7051 00005586 E846130000          <2> 		call switchmousepos2
  7052                              <2> 	noswmsposinit:
  7053 0000558B E85D020000          <2> 	  	call PS2SET
  7054 00005590 E886020000          <2> 		call ACTMOUS
  7055 00005595 C605[F6810000]01    <2> 		mov byte [mouseon],1
  7056 0000559C E89F020000          <2> 		call GETB 	;;Get the responce byte of the mouse (like: Hey i am active)
  7057                              <2> 		;call GETB
  7058                              <2> 				;;If the bytes are mixed up,
  7059                              <2> 				;;remove this line or add another of this line.
  7060                              <2> 	nomouse:
  7061 000055A1 C3                  <2> 		ret
  7062                              <2> 		
  7063                              <2> 	mousedaemon:
  7064 000055A2 803D[F6810000]01    <2> 		cmp byte [mouseon], 1
  7065 000055A9 75D2                <2> 		jne initmouse
  7066 000055AB E464                <2> 		in al, 64h ; Status
  7067 000055AD A820                <2> 		test al, 20h ; PS2-Mouse?
  7068 000055AF 0F8502000000        <2> 		jnz near moused
  7069 000055B5 F4                  <2> 		hlt
  7070 000055B6 C3                  <2> 		ret
  7071                              <2> 	moused:
  7072 000055B7 803D[62550000]01    <2> 		cmp byte [mousedisabled], 1
  7073 000055BE 74E1                <2> 		je nomouse
  7074 000055C0 E87B020000          <2> 		  call GETB
  7075 000055C5 88C3                <2> 		  mov  bl, al
  7076 000055C7 80E301              <2> 		  and  bl, 1
  7077 000055CA 881D[65580000]      <2> 		  mov  BYTE [LBUTTON], bl
  7078 000055D0 88C3                <2> 		  mov  bl, al
  7079 000055D2 80E302              <2> 		  and  bl, 2
  7080 000055D5 D0EB                <2> 		  shr  bl, 1
  7081 000055D7 881D[66580000]      <2> 		  mov  BYTE [RBUTTON], bl
  7082 000055DD 88C3                <2> 		  mov  bl, al
  7083 000055DF 80E304              <2> 		  and  bl, 4
  7084 000055E2 C0EB02              <2> 		  shr  bl, 2
  7085 000055E5 881D[67580000]      <2> 		  mov  BYTE [MBUTTON], bl
  7086 000055EB E850020000          <2> 		  call GETB
  7087 000055F0 A2[68580000]        <2> 		  mov  BYTE [XCOORD], al
  7088 000055F5 E846020000          <2> 		  call GETB
  7089 000055FA A2[69580000]        <2> 		  mov  BYTE [YCOORD], al
  7090                              <2> 
  7091                              <2> 	showpixelcursor:
  7092 000055FF 668B15[54570000]    <2> 		mov dx, [mousecursorposition]
  7093 00005606 668B0D[56570000]    <2> 		mov cx, [mousecursorposition + 2]
  7094 0000560D 668915[50570000]    <2> 		mov [lastmouseposition], dx
  7095 00005614 66890D[52570000]    <2> 		mov [lastmouseposition + 2], cx
  7096 0000561B A0[68580000]        <2> 		mov al, [XCOORD]
  7097 00005620 3C80                <2> 		cmp al, 128
  7098 00005622 730C                <2> 		jae subxcoord
  7099 00005624 00C0                <2> 		add al, al
  7100 00005626 30E4                <2> 		xor ah, ah
  7101 00005628 6601C2              <2> 		add dx, ax
  7102 0000562B E90B000000          <2> 		jmp subxcoorddn
  7103                              <2> 	subxcoord:
  7104 00005630 00C0                <2> 		add al, al
  7105 00005632 30DB                <2> 		xor bl, bl
  7106 00005634 28C3                <2> 		sub bl, al
  7107 00005636 30FF                <2> 		xor bh, bh
  7108 00005638 6629DA              <2> 		sub dx, bx
  7109                              <2> 	subxcoorddn:
  7110 0000563B 8A1D[69580000]      <2> 		mov bl, [YCOORD]
  7111 00005641 30C0                <2> 		xor al, al
  7112 00005643 28D8                <2> 		sub al, bl
  7113 00005645 3C80                <2> 		cmp al, 128
  7114 00005647 730A                <2> 		jae subycoord
  7115 00005649 30E4                <2> 		xor ah, ah
  7116 0000564B 6601C1              <2> 		add cx, ax
  7117 0000564E E909000000          <2> 		jmp subycoorddn
  7118                              <2> 	subycoord:
  7119 00005653 30DB                <2> 		xor bl, bl
  7120 00005655 28C3                <2> 		sub bl, al
  7121 00005657 30FF                <2> 		xor bh, bh
  7122 00005659 6629D9              <2> 		sub cx, bx
  7123                              <2> 	subycoorddn:
  7124 0000565C 6681FA204E          <2> 		cmp dx, 20000
  7125 00005661 7603                <2> 		jbe nooriginx2
  7126 00005663 6631D2              <2> 		xor dx, dx
  7127                              <2> 	nooriginx2:
  7128 00005666 6681F9204E          <2> 		cmp cx, 20000
  7129 0000566B 7603                <2> 		jbe nooriginy2
  7130 0000566D 6631C9              <2> 		xor cx, cx
  7131                              <2> 	nooriginy2:
  7132 00005670 6681FA0000          <2> 		cmp dx, 0
  7133 00005675 7415                <2> 		je nofixxcolumn2
  7134 00005677 663B15[5E550000]    <2> 		cmp dx, [resolutionx2]
  7135 0000567E 720C                <2> 		jb nofixxcolumn2
  7136 00005680 668B15[5E550000]    <2> 		mov dx, [resolutionx2]
  7137 00005687 6681EA0200          <2> 		sub dx, 2
  7138                              <2> 	nofixxcolumn2:
  7139 0000568C 6681F90000          <2> 		cmp cx, 0
  7140 00005691 7415                <2> 		je nofixyrow2
  7141 00005693 663B0D[72540000]    <2> 		cmp cx, [resolutiony]
  7142 0000569A 720C                <2> 		jb nofixyrow2
  7143 0000569C 668B0D[72540000]    <2> 		mov cx, [resolutiony]
  7144 000056A3 6681E90100          <2> 		sub cx, 1
  7145                              <2> 	nofixyrow2:
  7146 000056A8 668915[54570000]    <2> 		mov [mousecursorposition], dx
  7147 000056AF 66890D[56570000]    <2> 		mov [mousecursorposition + 2], cx
  7148 000056B6 803D[64820000]00    <2> 		cmp byte [guion], 0
  7149 000056BD 0F8495000000        <2> 		je near termmouse
  7150 000056C3 E8A9110000          <2> 		call switchmousepos ;;use dragging code to ensure proper icon drag
  7151 000056C8 803D[65580000]01    <2> 		cmp byte [LBUTTON], 1
  7152 000056CF 0F84E4220000        <2> 		je near clickicon
  7153 000056D5 803D[66580000]01    <2> 		cmp byte [RBUTTON], 1
  7154 000056DC 0F84D7220000        <2> 		je near clickicon
  7155 000056E2 A0[A6790000]        <2> 		mov al, [pbutton]
  7156 000056E7 C705[A9790000]0000- <2> 		mov dword [dragging], 0
  7157 000056EF 0000                <2>
  7158 000056F1 3C00                <2> 		cmp al, 0
  7159 000056F3 740F                <2> 		je nopreviousbutton
  7160 000056F5 E81F110000          <2> 		call clearmousecursor
  7161 000056FA E886140000          <2> 		call reloadallgraphics
  7162                              <2> 	windowtermcopyend:
  7163 000056FF E8CD110000          <2> 		call switchmousepos2
  7164                              <2> 	nopreviousbutton:
  7165 00005704 30C0                <2> 		xor al, al
  7166 00005706 A2[A6790000]        <2> 		mov [pbutton], al
  7167 0000570B A2[0D7F0000]        <2> 		mov [windrag], al
  7168 00005710 A0[65580000]        <2> 		mov al, [LBUTTON]
  7169 00005715 A2[A7790000]        <2> 		mov [pLBUTTON], al
  7170 0000571A A0[66580000]        <2> 		mov al, [RBUTTON]
  7171 0000571F A2[A8790000]        <2> 		mov [pRBUTTON], al
  7172 00005724 31D2                <2> 		xor edx, edx
  7173 00005726 668B15[54570000]    <2> 		mov dx, [mousecursorposition]
  7174 0000572D 668B0D[56570000]    <2> 		mov cx, [mousecursorposition + 2]
  7175 00005734 66BB18C7            <2> 		mov bx, 1100011100011000b
  7176 00005738 66B80100            <2> 		mov ax, 1
  7177 0000573C C605[A3790000]01    <2> 		mov byte [showcursorfonton], 1
  7178 00005743 E8071B0000          <2> 		call showfontvesa
  7179 00005748 C605[A3790000]00    <2> 		mov byte [showcursorfonton], 0
  7180 0000574F C3                  <2> 		ret
  7181                              <2> 
  7182 00005750 00000000            <2> lastmouseposition dw 0,0
  7183 00005754 00000000            <2> mousecursorposition dw 0,0	
  7184                              <2> 
  7185                              <2> termmouse:
  7186 00005758 BE[6EB80300]        <2> 		mov esi, videobuf
  7187 0000575D 31D2                <2> 		xor edx, edx
  7188 0000575F 668B15[50570000]    <2> 		mov dx, [lastmouseposition]
  7189 00005766 668B0D[52570000]    <2> 		mov cx, [lastmouseposition + 2]
  7190 0000576D 66A1[EB570000]      <2> 		mov ax, [cursorcache]
  7191 00005773 663D0000            <2> 		cmp ax, 0
  7192 00005777 7425                <2> 		je nocopycursorcache
  7193 00005779 66C1E104            <2> 		shl cx, 4
  7194 0000577D 66C1E203            <2> 		shl dx, 3
  7195 00005781 01D6                <2> 		add esi, edx
  7196 00005783 6631D2              <2> 		xor dx, dx
  7197 00005786 8A15[97250000]      <2> 		mov dl, [charxy]
  7198 0000578C 6641                <2> 		inc cx
  7199                              <2> termmousecplp1:
  7200 0000578E 01D6                <2> 		add esi, edx
  7201 00005790 6649                <2> 		dec cx
  7202 00005792 6681F90000          <2> 		cmp cx, 0
  7203 00005797 75F5                <2> 		jne termmousecplp1
  7204 00005799 29D6                <2> 		sub esi, edx
  7205 0000579B 668906              <2> 		mov [esi], ax
  7206                              <2> nocopycursorcache:
  7207 0000579E BE[6EB80300]        <2> 		mov esi, videobuf
  7208 000057A3 31D2                <2> 		xor edx, edx
  7209 000057A5 668B15[54570000]    <2> 		mov dx, [mousecursorposition]
  7210 000057AC 668B0D[56570000]    <2> 		mov cx, [mousecursorposition + 2]
  7211 000057B3 66C1E104            <2> 		shl cx, 4
  7212 000057B7 66C1E203            <2> 		shl dx, 3
  7213 000057BB 01D6                <2> 		add esi, edx
  7214 000057BD 6631D2              <2> 		xor dx, dx
  7215 000057C0 8A15[97250000]      <2> 		mov dl, [charxy]
  7216 000057C6 6641                <2> 		inc cx
  7217                              <2> termmousecplp2:
  7218 000057C8 01D6                <2> 		add esi, edx
  7219 000057CA 6649                <2> 		dec cx
  7220 000057CC 6681F90000          <2> 		cmp cx, 0
  7221 000057D1 75F5                <2> 		jne termmousecplp2
  7222 000057D3 29D6                <2> 		sub esi, edx
  7223 000057D5 668B06              <2> 		mov ax, [esi]
  7224 000057D8 66A3[EB570000]      <2> 		mov [cursorcache], ax
  7225 000057DE B080                <2> 		mov al, 128
  7226 000057E0 B407                <2> 		mov ah, 7
  7227 000057E2 668906              <2> 		mov [esi], ax
  7228 000057E5 E87BD0FFFF          <2> 		call termcopy
  7229 000057EA C3                  <2> 		ret
  7230 000057EB 0000                <2> cursorcache db 0,0
  7231                              <2> 
  7232                              <2> PS2SET:
  7233 000057ED B0A8                <2>   mov  al, 0xa8		; enable mouse port
  7234 000057EF E664                <2>   out  0x64, al		; write to keyboardcontroller
  7235 000057F1 E801000000          <2>   call CHKPRT		; check if command is progressed (demand!)
  7236 000057F6 C3                  <2> ret
  7237                              <2> 
  7238                              <2> CHKPRT:
  7239 000057F7 66B96400            <2>   mov  cx, 100
  7240                              <2>  .again:
  7241 000057FB E464                <2>   in   al, 0x64		; read from keyboardcontroller
  7242 000057FD A802                <2>   test al, 2		; Check if input buffer is empty
  7243 000057FF 7402                <2>   je .go
  7244 00005801 E2F8                <2>   loop .again
  7245                              <2>  .go:
  7246 00005803 C3                  <2> ret
  7247                              <2> 
  7248                              <2> WMOUS:
  7249 00005804 B0D4                <2>   mov  al, 0xd4		; write to mouse device instead of to keyboard
  7250 00005806 E664                <2>   out  0x64, al		; write to keyboardcontroller
  7251 00005808 E8EAFFFFFF          <2>   call CHKPRT		; check if command is progressed (demand!)
  7252 0000580D C3                  <2> ret
  7253                              <2> 
  7254                              <2> MBUFFUL:
  7255 0000580E 66B96400            <2>   mov cx, 100
  7256                              <2>  .mn:
  7257 00005812 E464                <2>   in   al, 0x64		; read from keyboardcontroller
  7258 00005814 A820                <2>   test al, 0x20		; check if mouse output buffer is full
  7259 00005816 7402                <2>   jz  .mnn
  7260 00005818 E2F8                <2>   loop .mn
  7261                              <2>  .mnn:
  7262 0000581A C3                  <2> ret
  7263                              <2> 
  7264                              <2> 
  7265                              <2> ACTMOUS:
  7266 0000581B E8E4FFFFFF          <2>   call WMOUS
  7267 00005820 B0F4                <2>   mov  al, 0xf4 	; Command to activate mouse itselve (Stream mode)
  7268 00005822 E660                <2>   out  0x60, al		; write ps/2 controller output port (activate mouse)
  7269 00005824 E8CEFFFFFF          <2>   call CHKPRT		; check if command is progressed (demand!)
  7270 00005829 E801000000          <2>   call CHKMOUS		; check if a byte is available
  7271 0000582E C3                  <2> ret
  7272                              <2> 
  7273                              <2> CHKMOUS:
  7274 0000582F B300                <2>   mov  bl, 0
  7275 00005831 66B96400            <2>   mov cx, 100
  7276                              <2>  .vrd:
  7277 00005835 E464                <2>   in   al, 0x64		; read from keyboardcontroller
  7278 00005837 A801                <2>   test al, 1		; check if controller buffer (60h) has data
  7279 00005839 7504                <2>   jnz .yy
  7280 0000583B E2F8                <2>   loop .vrd
  7281 0000583D B301                <2>   mov  bl, 1
  7282                              <2>  .yy:
  7283 0000583F C3                  <2> ret
  7284                              <2> 
  7285                              <2> GETB:
  7286                              <2>  .cagain:
  7287 00005840 E8EAFFFFFF          <2>   call CHKMOUS		; check if a byte is available
  7288 00005845 08DB                <2>   or bl, bl
  7289 00005847 75F7                <2>   jnz .cagain
  7290 00005849 B0AD                <2>   mov  al, 0xad		; Disable Keyboard
  7291 0000584B E664                <2>   out  0x64, al		; write to keyboardcontroller
  7292 0000584D E8A5FFFFFF          <2>   call CHKPRT		; check if command is progressed (demand!)
  7293 00005852 6631C0              <2>   xor  ax, ax
  7294 00005855 E460                <2>   in   al, 0x60		; read ps/2 controller output port (mousebyte)
  7295 00005857 88C2                <2>   mov  dl, al
  7296 00005859 B0AE                <2>   mov  al, 0xae		; Enable Keyboard
  7297 0000585B E664                <2>   out  0x64, al		; write to keyboardcontroller
  7298 0000585D E895FFFFFF          <2>   call CHKPRT		; check if command is progressed (demand!)
  7299 00005862 88D0                <2>   mov  al, dl
  7300 00005864 C3                  <2> ret
  7301                              <2> 
  7302 00005865 00                  <2> LBUTTON db 0x00	;	Left   button status 1=PRESSED 0=RELEASED
  7303 00005866 00                  <2> RBUTTON db 0x00	;	Right  button status 1=PRESSED 0=RELEASED
  7304 00005867 00                  <2> MBUTTON db 0x00	;	Middle button status 1=PRESSED 0=RELEASED
  7305 00005868 00                  <2> XCOORD  db 0x00	;	the moved distance  (horizontal)
  7306 00005869 00                  <2> YCOORD  db 0x00	;	the moved distance  (vertical)
  7307                              <1> %endif
  7308                              <1> %include "source/drivers/sound/pcspkr.asm"
  7309                              <2> ;PC Speaker Drivers
  7310                              <2> PCSpeakerRAW:
  7311 0000586A 60                  <2> 	pusha
  7312                              <2> nosoundrep:
  7313 0000586B 8B35[5F020000]      <2> 	mov esi, [soundpos]
  7314 00005871 31C9                <2> 	xor ecx, ecx
  7315 00005873 668B0D[5D020000]    <2> 	mov cx, [soundrepititions]
  7316 0000587A 6681F90000          <2> 	cmp cx, 0
  7317 0000587F 0F8548000000        <2> 	jne near donesetpitch
  7318 00005885 668B0E              <2> 	mov cx, [esi]
  7319 00005888 668B5E02            <2> 	mov bx, [esi + 2]
  7320 0000588C 66890D[5D020000]    <2> 	mov [soundrepititions], cx
  7321 00005893 81C604000000        <2> 	add esi, 4
  7322 00005899 8935[5F020000]      <2> 	mov [soundpos], esi
  7323 0000589F 3B35[63020000]      <2> 	cmp esi, [soundendpos]
  7324 000058A5 7735                <2> 	ja stopsound
  7325 000058A7 66813D[5D020000]00- <2> 	cmp word [soundrepititions], 0
  7326 000058AF 00                  <2>
  7327 000058B0 74B9                <2> 	je nosoundrep
  7328 000058B2 6681FB0000          <2> 	cmp bx, 0
  7329 000058B7 740F                <2> 	je nosoundplay
  7330 000058B9 E840000000          <2> 	call setpitch
  7331 000058BE E849000000          <2> 	call startsound
  7332 000058C3 E905000000          <2> 	jmp donesetpitch
  7333                              <2> nosoundplay:
  7334 000058C8 E846000000          <2> 	call killsound
  7335                              <2> donesetpitch:
  7336 000058CD 6649                <2> 	dec cx
  7337 000058CF 66890D[5D020000]    <2> 	mov [soundrepititions], cx
  7338 000058D6 61                  <2> 	popa
  7339 000058D7 E9C0A9FFFF          <2> 	jmp timerinterrupt
  7340                              <2> stopsound:
  7341 000058DC 31C0                <2> 	xor eax, eax
  7342 000058DE 66A3[5D020000]      <2> 	mov [soundrepititions], ax
  7343 000058E4 A2[5C020000]        <2> 	mov [soundon], al
  7344 000058E9 A3[5F020000]        <2> 	mov [soundpos], eax
  7345 000058EE A3[63020000]        <2> 	mov [soundendpos], eax
  7346 000058F3 E81B000000          <2> 	call killsound
  7347 000058F8 61                  <2> 	popa
  7348 000058F9 E99EA9FFFF          <2> 	jmp timerinterrupt
  7349                              <2> 
  7350                              <2> 
  7351                              <2> setpitch:
  7352 000058FE B0B6                <2> 	mov al, 0xB6
  7353 00005900 E643                <2> 	out 0x43, al
  7354 00005902 6689D8              <2> 	mov ax, bx
  7355 00005905 E642                <2> 	out 0x42, al
  7356 00005907 88E0                <2> 	mov al, ah
  7357 00005909 E642                <2> 	out 0x42, al
  7358 0000590B C3                  <2> 	ret
  7359                              <2> startsound:
  7360 0000590C E461                <2> 	in al, 0x61
  7361 0000590E 0C03                <2> 	or al, 3
  7362 00005910 E661                <2> 	out 0x61, al
  7363 00005912 C3                  <2> 	ret
  7364                              <2> killsound:
  7365 00005913 E461                <2> 	in al, 0x61
  7366 00005915 24FC                <2> 	and al, 0xFC
  7367 00005917 E661                <2> 	out 0x61, al
  7368 00005919 C3                  <2> 	ret
  7369                              <2> 	
  7370                              <1> %ifdef sound.included
  7371                              <1> 	%include "source/drivers/sound/sblaster.asm"
  7372                              <1> %endif
  7373                              <1> %ifdef io.serial
  7374                              <1> 	%include "source/drivers/input/serial.asm"
  7375                              <1> %else
  7376                              <1> 	%include "source/drivers/input/keyboard.asm"
  7377 0000591A 00                  <2> specialkey db 0
  7378                              <2> ;charregion db 0
  7379                              <2> waitforinput:		;this is basically the idle process
  7380                              <2> 					;this halts the cpu for a small amount of time and then sees if there was a keypress
  7381                              <2> 					;this lets the cpu stay at close to 0% instead of 100%
  7382 0000591B 6631C0              <2> 	xor ax, ax
  7383 0000591E A0[9B640000]        <2> 	mov al, [threadson]
  7384 00005923 8825[9B640000]      <2> 	mov [threadson], ah
  7385 00005929 FB                  <2> 	sti
  7386 0000592A F4                  <2> 	hlt
  7387 0000592B A2[9B640000]        <2> 	mov [threadson], al
  7388 00005930 66813D[75230000]00- <2> 	cmp word [trans], 0
  7389 00005938 00                  <2>
  7390 00005939 7401                <2> 	je getkey
  7391 0000593B C3                  <2> 	ret
  7392                              <2> getkey:
  7393 0000593C 31C0                <2> 		xor eax, eax
  7394 0000593E A2[1A590000]        <2> 		mov [specialkey], al
  7395 00005943 A3[71230000]        <2> 		mov [lastkey], eax
  7396 00005948 E464                <2> 		in al, 64h ; Status
  7397                              <2> 	%ifdef gui.included
  7398 0000594A A820                <2> 		test al, 20h ; PS2-Mouse?
  7399 0000594C 0F8565FCFFFF        <2> 		jnz near moused
  7400                              <2> 	%endif
  7401 00005952 A801                <2> 		test al, 1 
  7402 00005954 74C5                <2> 		jz waitforinput ; if output buffer full or no keypress, jump to idle process
  7403                              <2> 	calckey:
  7404 00005956 E460                <2> 		in al, 60h
  7405 00005958 30E4                <2> 		xor ah, ah
  7406 0000595A 6689C3              <2> 		mov bx, ax
  7407 0000595D 66A3[73230000]      <2> 		mov [lastkey + 2], ax
  7408 00005963 BF[F25A0000]        <2> 		mov edi, scancode
  7409                              <2> 	searchscan: 
  7410 00005968 80FB3A              <2> 		cmp bl, 3Ah
  7411 0000596B 7314                <2> 		jae scanother
  7412 0000596D C1E004              <2> 		shl eax, 4
  7413 00005970 01C7                <2> 		add edi, eax
  7414 00005972 668B07              <2> 		mov ax, [edi]
  7415 00005975 663D0000            <2> 		cmp ax, 0
  7416 00005979 7406                <2> 		je scanother
  7417 0000597B E9D0000000          <2> 		jmp scanfound
  7418 00005980 00                  <2> uppercase db 0
  7419                              <2> scanother:
  7420 00005981 6631C0              <2> 		xor ax, ax
  7421 00005984 66A3[71230000]      <2> 		mov [lastkey], ax
  7422 0000598A 80FBE0              <2> 		cmp bl, 0E0h
  7423 0000598D 0F8477000000        <2> 		je near getkeyspecial
  7424 00005993 803D[1A590000]E0    <2> 		cmp byte [specialkey], 0xE0
  7425 0000599A 7525                <2> 		jne nospecialkey
  7426 0000599C 80FB38              <2> 		cmp bl, 38h
  7427 0000599F 0F849A000000        <2> 		je near alton
  7428 000059A5 80FBB8              <2> 		cmp bl, 0B8h
  7429 000059A8 0F8499000000        <2> 		je near altoff
  7430 000059AE 80FB1D              <2> 		cmp bl, 1Dh
  7431 000059B1 0F8478000000        <2> 		je near ctron
  7432 000059B7 80FB9D              <2> 		cmp bl, 9Dh
  7433 000059BA 0F8477000000        <2> 		je near ctroff
  7434 000059C0 C3                  <2> 		ret
  7435                              <2> nospecialkey:
  7436 000059C1 80FB2A              <2> 		cmp bl, 2Ah
  7437 000059C4 0F8455000000        <2> 		je near shifton
  7438 000059CA 80FB36              <2> 		cmp bl, 36h
  7439 000059CD 0F844C000000        <2> 		je near shifton
  7440 000059D3 80FB1C              <2> 		cmp bl, 1Ch
  7441 000059D6 0F8473000000        <2> 		je near entdown
  7442 000059DC 80FBAA              <2> 		cmp bl, 0AAh
  7443 000059DF 0F8442000000        <2> 		je near shiftoff
  7444 000059E5 80FBB6              <2> 		cmp bl, 0B6h
  7445 000059E8 0F8439000000        <2> 		je near shiftoff
  7446 000059EE 80FB3A              <2> 		cmp bl, 3Ah
  7447 000059F1 0F84A7000000        <2> 		je near capslock
  7448 000059F7 80FB45              <2> 		cmp bl, 0x45
  7449 000059FA 0F84AF000000        <2> 		je near numlock
  7450 00005A00 80FB46              <2> 		cmp bl, 0x46
  7451 00005A03 0F84BE000000        <2> 		je near scrolllock
  7452 00005A09 C3                  <2> 		ret
  7453                              <2> 	getkeyspecial:
  7454 00005A0A C605[1A590000]E0    <2> 		mov byte [specialkey], 0xE0
  7455 00005A11 E940FFFFFF          <2> 		jmp calckey
  7456                              <2> 	shift:
  7457 00005A16 A0[80590000]        <2> 		mov al, [uppercase]
  7458 00005A1B 3C01                <2> 		cmp al, 1
  7459 00005A1D 7308                <2> 		jae shiftoff
  7460                              <2> 	shifton:
  7461 00005A1F C605[80590000]01    <2> 		mov byte [uppercase], 1
  7462 00005A26 C3                  <2> 		ret
  7463                              <2> 	shiftoff:
  7464 00005A27 C605[80590000]00    <2> 		mov byte [uppercase], 0
  7465 00005A2E C3                  <2> 		ret
  7466                              <2> 	ctron:
  7467 00005A2F C605[9D5A0000]01    <2> 		mov byte [ctrkey], 1
  7468 00005A36 C3                  <2> 		ret
  7469                              <2> 	ctroff:
  7470 00005A37 C605[9D5A0000]00    <2> 		mov byte [ctrkey], 0
  7471 00005A3E C3                  <2> 		ret
  7472                              <2> 	alton:
  7473 00005A3F C605[9C5A0000]01    <2> 		mov byte [altkey], 1
  7474 00005A46 C3                  <2> 		ret
  7475                              <2> 	altoff:
  7476 00005A47 C605[9C5A0000]00    <2> 		mov byte [altkey], 0
  7477 00005A4E C3                  <2> 		ret
  7478                              <2> 	entdown:
  7479 00005A4F C3                  <2> 		ret
  7480                              <2> scanfound:
  7481 00005A50 81C708000000        <2> 		add edi, 8
  7482 00005A56 803D[9D5A0000]01    <2> 		cmp byte [ctrkey], 1
  7483 00005A5D 7306                <2> 		jae ctrlin
  7484 00005A5F 81EF08000000        <2> 		sub edi, 8
  7485                              <2> 	ctrlin:
  7486 00005A65 81C704000000        <2> 		add edi, 4
  7487 00005A6B 803D[9C5A0000]01    <2> 		cmp byte [altkey], 1
  7488 00005A72 7306                <2> 		jae altin
  7489 00005A74 81EF04000000        <2> 		sub edi, 4
  7490                              <2> 	altin:
  7491 00005A7A 81C702000000        <2> 		add edi, 2
  7492 00005A80 803D[80590000]01    <2> 		cmp byte [uppercase], 1
  7493 00005A87 7306                <2> 		jae uppercaseon
  7494 00005A89 81EF02000000        <2> 		sub edi, 2
  7495                              <2> 	uppercaseon:
  7496 00005A8F 668B07              <2> 		mov ax,[edi]
  7497 00005A92 66A3[71230000]      <2> 		mov [lastkey], ax
  7498 00005A98 C3                  <2> 		ret
  7499                              <2> 		
  7500 00005A99 00                  <2> keyboardstatus db 0
  7501 00005A9A 00                  <2> numlockstatus db 0
  7502 00005A9B 00                  <2> scrolllockstatus db 0
  7503 00005A9C 00                  <2> altkey db 0
  7504 00005A9D 00                  <2> ctrkey db 0
  7505                              <2> 	capslock:
  7506 00005A9E 8035[995A0000]04    <2> 		xor byte [keyboardstatus], 00000100b
  7507 00005AA5 E835000000          <2> 		call updatekblights
  7508 00005AAA E967FFFFFF          <2> 		jmp shift
  7509                              <2> 		
  7510                              <2> 	numlock:
  7511 00005AAF 8035[995A0000]02    <2> 		xor byte [keyboardstatus], 00000010b
  7512 00005AB6 8035[9A5A0000]01    <2> 		xor byte [numlockstatus], 1
  7513 00005ABD E81D000000          <2> 		call updatekblights
  7514 00005AC2 E975FEFFFF          <2> 		jmp getkey
  7515                              <2> 	
  7516                              <2> 	scrolllock:
  7517 00005AC7 8035[995A0000]01    <2> 		xor byte [keyboardstatus], 00000001b
  7518 00005ACE 8035[9B5A0000]01    <2> 		xor byte [scrolllockstatus], 1
  7519 00005AD5 E805000000          <2> 		call updatekblights
  7520 00005ADA E95DFEFFFF          <2> 		jmp getkey
  7521                              <2> 		
  7522                              <2> 	updatekblights:
  7523 00005ADF B0ED                <2> 		mov al, 0xED
  7524 00005AE1 66BA6000            <2> 		mov dx, 0x60
  7525 00005AE5 EE                  <2> 		out dx, al
  7526                              <2> 	chkkbdack:
  7527 00005AE6 EC                  <2> 		in al, dx
  7528 00005AE7 3CFA                <2> 		cmp al, 0xFA
  7529 00005AE9 75FB                <2> 		jne chkkbdack
  7530 00005AEB A0[995A0000]        <2> 		mov al, [keyboardstatus]
  7531 00005AF0 EE                  <2> 		out dx, al
  7532 00005AF1 C3                  <2> 		ret
  7533                              <2> 		
  7534                              <2> scancode:
  7535                              <2> 	;key, KEY, alt key, ALT KEY, ctrl key, CTRL KEY, ctrl-alt, CTRL-ALT
  7536 00005AF2 000000000000000000- <2> 	dw 0,0,0,0,0,0,0,0
  7537 00005AFB 00000000000000      <2>
  7538 00005B02 000000000000000000- <2> 	dw 0,0,0,0,0,0,0,0
  7539 00005B0B 00000000000000      <2>
  7540 00005B12 31002100A1003C2000- <2> 	dw '1','!',0xA1,0x203C,0,0,0,0
  7541 00005B1B 00000000000000      <2>
  7542 00005B22 32004000B2001A2200- <2> 	dw '2','@',0xB2,0x221A,0,0,0,0
  7543 00005B2B 00000000000000      <2>
  7544 00005B32 33002300B3002B2200- <2> 	dw '3','#',0xB3,0x222B,0,0,0,0
  7545 00005B3B 00000000000000      <2>
  7546 00005B42 34002400A300A20000- <2> 	dw '4','$',0xA3,0xA2,0,0,0,0
  7547 00005B4B 00000000000000      <2>
  7548 00005B52 35002500AC20000000- <2> 	dw '5','%',0x20AC,0,0,0,0,0
  7549 00005B5B 00000000000000      <2>
  7550 00005B62 36005E00BC007F2000- <2> 	dw '6','^',0xBC,0x207F,0,0,0,0
  7551 00005B6B 00000000000000      <2>
  7552 00005B72 37002600BD00000000- <2> 	dw '7','&',0xBD,0,0,0,0,0
  7553 00005B7B 00000000000000      <2>
  7554 00005B82 38002A001E22950000- <2> 	dw '8','*',0x221E,0x95,0,0,0,0
  7555 00005B8B 00000000000000      <2>
  7556 00005B92 39002800AE00990000- <2> 	dw '9','(',0xAE,0x99,0,0,0,0
  7557 00005B9B 00000000000000      <2>
  7558 00005BA2 30002900A900000000- <2> 	dw '0',')',0xA9,0,0,0,0,0
  7559 00005BAB 00000000000000      <2>
  7560 00005BB2 2D005F00A500B10000- <2> 	dw '-','_',0xA5,0xB1,0,0,0,0
  7561 00005BBB 00000000000000      <2>
  7562 00005BC2 3D002B00F700482200- <2> 	dw '=','+',0xF7,0x2248,0,0,0,0
  7563 00005BCB 00000000000000      <2>
  7564 00005BD2 080008000000000000- <2> 	dw 8,8,0,0,0,0,0,0
  7565 00005BDB 00000000000000      <2>
  7566 00005BE2 000000000000000000- <2> 	dw 0,0,0,0,0,0,0,0
  7567 00005BEB 00000000000000      <2>
  7568 00005BF2 71005100E400C4003B- <2> 	dw 'q','Q',0xE4,0xC4,';',':',0x439,0x419
  7569 00005BFA 003A0039041904      <2>
  7570 00005C02 77005700E500C500C2- <2> 	dw 'w','W',0xE5,0xC5,0x3C2,0,0x446,0x426
  7571 00005C0B 03000046042604      <2>
  7572 00005C12 65004500E900C900B5- <2> 	dw 'e','E',0xE9,0xC9,0x3B5,0x395,0x443,0x423
  7573 00005C1B 03950343042304      <2>
  7574 00005C22 72005200EB00E800C1- <2> 	dw 'r','R',0xEB,0xE8,0x3C1,0x3A1,0x43A,0x41A
  7575 00005C2B 03A1033A041A04      <2>
  7576 00005C32 74005400FC00DC00C4- <2> 	dw 't','T',0xFC,0xDC,0x3C4,0x3A4,0x435,0x415
  7577 00005C3B 03A40335041504      <2>
  7578 00005C42 79005900FF009F00C5- <2> 	dw 'y','Y',0xFF,0x9F,0x3C5,0x3A5,0x43D,0x41D
  7579 00005C4B 03A5033D041D04      <2>
  7580 00005C52 75005500FA00F900B8- <2> 	dw 'u','U',0xFA,0xF9,0x3B8,0x398,0x433,0x413
  7581 00005C5B 03980333041304      <2>
  7582 00005C62 69004900ED00EC00B9- <2> 	dw 'i','I',0xED,0xEC,0x3B9,0x399,0x448,0x428
  7583 00005C6B 03990348042804      <2>
  7584 00005C72 6F004F00F300F200BF- <2> 	dw 'o','O',0xF3,0xF2,0x3BF,0x39F,0x449,0x429
  7585 00005C7B 039F0349042904      <2>
  7586 00005C82 70005000F600D600C0- <2> 	dw 'p','P',0xF6,0xD6,0x3C0,0x3A0,0x437,0x417
  7587 00005C8B 03A00337041704      <2>
  7588 00005C92 5B007B00AB00000000- <2> 	dw '[','{',0xAB,0,0,0,0x445,0x425
  7589 00005C9B 00000045042504      <2>
  7590 00005CA2 5D007D00BB00000000- <2> 	dw ']','}',0xBB,0,0,0,0x44A,0x42A
  7591 00005CAB 0000004A042A04      <2>
  7592 00005CB2 000000000000000000- <2> 	dw 0,0,0,0,0,0,0,0
  7593 00005CBB 00000000000000      <2>
  7594 00005CC2 000000000000000000- <2> 	dw 0,0,0,0,0,0,0,0
  7595 00005CCB 00000000000000      <2>
  7596 00005CD2 61004100E100E000B1- <2> 	dw 'a','A',0xE1,0xE0,0x3B1,0x391,0x444,0x424
  7597 00005CDB 03910344042404      <2>
  7598 00005CE2 73005300A7000000C3- <2> 	dw 's','S',0xA7,0,0x3C3,0x3A3,0x44B,0x42B
  7599 00005CEB 03A3034B042B04      <2>
  7600 00005CF2 64004400B0000000B4- <2> 	dw 'd','D',0xB0,0,0x3B4,0x394,0x432,0x412
  7601 00005CFB 03940332041204      <2>
  7602 00005D02 6600460083004026C6- <2> 	dw 'f','F',0x83,0x2640,0x3C6,0x3A6,0x430,0x410
  7603 00005D0B 03A60330041004      <2>
  7604 00005D12 6700470000000000B3- <2> 	dw 'g','G',0,0,0x3B3,0x393,0x43F,0x41F
  7605 00005D1B 0393033F041F04      <2>
  7606 00005D22 6800480000000000B7- <2> 	dw 'h','H',0,0,0x3B7,0x397,0x440,0x420
  7607 00005D2B 03970340042004      <2>
  7608 00005D32 6A004A0000000000BE- <2> 	dw 'j','J',0,0,0x3BE,0x39E,0x43E,0x41E
  7609 00005D3B 039E033E041E04      <2>
  7610 00005D42 6B004B0000000000BA- <2> 	dw 'k','K',0,0,0x3BA,0x39A,0x43B,0x41B
  7611 00005D4B 039A033B041B04      <2>
  7612 00005D52 6C004C0000000000BB- <2> 	dw 'l','L',0,0,0x3BB,0x39B,0x434,0x414
  7613 00005D5B 039B0334041404      <2>
  7614 00005D62 3B003A00B6000E2200- <2> 	dw ';',':',0xB6,0x220E,0,0,0x436,0x416
  7615 00005D6B 00000036041604      <2>
  7616 00005D72 270022000000000000- <2> 	dw "'",'"',0,0,0,0,0x44D,0x42D
  7617 00005D7B 0000004D042D04      <2>
  7618 00005D82 60007E000000000000- <2> 	dw '`','~',0,0,0,0,0x451,0x401
  7619 00005D8B 00000051040104      <2>
  7620 00005D92 000000000000000000- <2> 	dw 0,0,0,0,0,0,0,0
  7621 00005D9B 00000000000000      <2>
  7622 00005DA2 5C007C00AC00A60000- <2> 	dw "\",'|',0xAC,0xA6,0,0,"/","\"
  7623 00005DAB 0000002F005C00      <2>
  7624 00005DB2 7A005A00E600C600B6- <2> 	dw 'z','Z',0xE6,0xC6,0x3B6,0x396,0x44F,0x42F
  7625 00005DBB 0396034F042F04      <2>
  7626 00005DC2 7800580000000000C7- <2> 	dw 'x','X',0,0,0x3C7,0x3A7,0x447,0x427
  7627 00005DCB 03A70347042704      <2>
  7628 00005DD2 63004300E700C700C8- <2> 	dw 'c','C',0xE7,0xC7,0x3C8,0x3A8,0x441,0x421
  7629 00005DDB 03A80341042104      <2>
  7630 00005DE2 7600560000000000C9- <2> 	dw 'v','V',0,0,0x3C9,0x3A9,0x43C,0x41C
  7631 00005DEB 03A9033C041C04      <2>
  7632 00005DF2 6200420000000000B2- <2> 	dw 'b','B',0,0,0x3B2,0x392,0x438,0x418
  7633 00005DFB 03920338041804      <2>
  7634 00005E02 6E004E00F100D100BD- <2> 	dw 'n','N',0xF1,0xD1,0x3BD,0x39D,0x442,0x422
  7635 00005E0B 039D0342042204      <2>
  7636 00005E12 6D004D006C264226BC- <2> 	dw 'm','M',0x266C,0x2642,0x3BC,0x39C,0x44C,0x42C
  7637 00005E1B 039C034C042C04      <2>
  7638 00005E22 2C003C006422000000- <2> 	dw ',','<',0x2264,0,0,0,0x431,0x411
  7639 00005E2B 00000031041104      <2>
  7640 00005E32 2E003E006522000000- <2> 	dw '.','>',0x2265,0,0,0,0x44E,0x42E
  7641 00005E3B 0000004E042E04      <2>
  7642 00005E42 2F003F00BF00000000- <2> 	dw '/','?',0xBF,0,0,0,'.',','
  7643 00005E4B 0000002E002C00      <2>
  7644 00005E52 000000000000000000- <2> 	dw 0,0,0,0,0,0,0,0
  7645 00005E5B 00000000000000      <2>
  7646 00005E62 000000000000000000- <2> 	dw 0,0,0,0,0,0,0,0
  7647 00005E6B 00000000000000      <2>
  7648 00005E72 000000000000000000- <2> 	dw 0,0,0,0,0,0,0,0
  7649 00005E7B 00000000000000      <2>
  7650 00005E82 200020000000000000- <2> 	dw ' ',' ',0,0,0,0,0,0
  7651 00005E8B 00000000000000      <2>
  7652                              <2> noscan:
  7653                              <2> 
  7654                              <1> %endif
  7655                              <1> ;drivers will soon be handled intelligently
  7656                              <1> ;every driver's source will be scanned for a .init function
  7657                              <1> ;that will be called and if it returns 0
  7658                              <1> ;the hardware was found and the driver initialized properly
  7659                              <1> initializelater: ;these have debugging messages and should be initialized after the screen
  7660                              <1> 	%ifdef sound.included
  7661                              <1> 		call sblaster.init
  7662                              <1> 	%endif
  7663                              <1> 	%ifdef network.included
  7664                              <1> 		call network.init
  7665                              <1> 	%endif
  7666 00005E92 C3                  <1> 	ret
  7667                              <1> initialize:
  7668                              <1> ;Now I will initialise the interrupt controllers and remap irq's
  7669 00005E93 E839000000          <1> 	call .pic
  7670                              <1> %ifdef terminal.vsync
  7671                              <1> 	call .rtc
  7672                              <1> %endif
  7673 00005E98 E896000000          <1> 	call .pit
  7674 00005E9D E8B8000000          <1> 	call .fpu
  7675 00005EA2 E8C9000000          <1> 	call .sse
  7676 00005EA7 31C0                <1> 	xor eax, eax
  7677 00005EA9 31C9                <1> 	xor ecx, ecx
  7678                              <1> %ifdef io.serial
  7679                              <1> 	call serial.init
  7680                              <1> %endif
  7681 00005EAB E801000000          <1> 	call .time
  7682 00005EB0 C3                  <1> 	ret
  7683                              <1> 	
  7684                              <1> .time:
  7685 00005EB1 E866EDFFFF          <1> 	call time
  7686 00005EB6 E80EEFFFFF          <1> 	call timeconvert
  7687 00005EBB 890D[54020000]      <1> 	mov [timeseconds], ecx
  7688 00005EC1 31C9                <1> 	xor ecx, ecx
  7689 00005EC3 890D[58020000]      <1> 	mov [timenanoseconds], ecx
  7690 00005EC9 C605[644B0000]01    <1> 	mov byte [istimeset], 1
  7691 00005ED0 C3                  <1> 	ret
  7692                              <1> 	
  7693                              <1> .pic:
  7694 00005ED1 B011                <1> 	mov al, 0x11
  7695 00005ED3 E620                <1> 	out 0x20, al
  7696 00005ED5 E6A0                <1> 	out 0xA0, al
  7697 00005ED7 B040                <1> 	mov al, 0x40	;interrupt for master
  7698 00005ED9 E621                <1> 	out 0x21, al
  7699 00005EDB B048                <1> 	mov al, 0x48	;interrupt for slave
  7700 00005EDD E6A1                <1> 	out 0xA1, al
  7701 00005EDF B004                <1> 	mov al, 4
  7702 00005EE1 E621                <1> 	out 0x21, al
  7703 00005EE3 B002                <1> 	mov al, 2
  7704 00005EE5 E6A1                <1> 	out 0xA1, al
  7705 00005EE7 B001                <1> 	mov al, 0x1
  7706 00005EE9 E621                <1> 	out 0x21, al
  7707 00005EEB B001                <1> 	mov al, 0x1
  7708 00005EED E6A1                <1> 	out 0xA1, al
  7709                              <1> 	;masks are set to zero so as not to mask
  7710 00005EEF 30C0                <1> 	xor al, al
  7711 00005EF1 E621                <1> 	out 0x21, al
  7712 00005EF3 30C0                <1> 	xor al, al
  7713 00005EF5 E6A1                <1> 	out 0xA1, al
  7714 00005EF7 B020                <1> 	mov al, 0x20
  7715 00005EF9 E6A0                <1> 	out 0xA0, al
  7716 00005EFB E620                <1> 	out 0x20, al
  7717 00005EFD C3                  <1> 	ret
  7718                              <1> .rtc:
  7719 00005EFE B008                <1> 	mov al, 0x8
  7720 00005F00 88C4                <1> 	mov ah, al
  7721 00005F02 66BA7000            <1> 	mov dx, 0x70
  7722 00005F06 EE                  <1> 	out dx, al
  7723 00005F07 6642                <1> 	inc dx
  7724 00005F09 EC                  <1> 	in al, dx
  7725 00005F0A 86C4                <1> 	xchg al, ah
  7726 00005F0C 664A                <1> 	dec dx
  7727 00005F0E EE                  <1> 	out dx, al
  7728 00005F0F 6642                <1> 	inc dx
  7729 00005F11 86C4                <1> 	xchg al, ah
  7730 00005F13 0C40                <1> 	or al, 0x40
  7731 00005F15 EE                  <1> 	out dx, al
  7732                              <1> 	
  7733 00005F16 B00A                <1> 	mov al, 0xA
  7734 00005F18 664A                <1> 	dec dx
  7735 00005F1A EE                  <1> 	out dx, al
  7736 00005F1B 86C4                <1> 	xchg al, ah
  7737 00005F1D 6642                <1> 	inc dx
  7738 00005F1F EC                  <1> 	in al, dx
  7739 00005F20 24F0                <1> 	and al, 0xF0
  7740 00005F22 0A05[0F030000]      <1> 	or al, [rtcrate]
  7741 00005F28 86C4                <1> 	xchg al, ah
  7742 00005F2A 664A                <1> 	dec dx
  7743 00005F2C EE                  <1> 	out dx, al
  7744 00005F2D 6642                <1> 	inc dx
  7745 00005F2F 86C4                <1> 	xchg al, ah
  7746 00005F31 EE                  <1> 	out dx, al
  7747 00005F32 C3                  <1> 	ret
  7748                              <1> 	
  7749                              <1> .pit:
  7750                              <1> 	;initialize the PIT
  7751 00005F33 66A1[4E020000]      <1> 	mov ax, [pitdiv] ;this is the divider for the PIT
  7752 00005F39 E640                <1> 	out 0x40, al
  7753 00005F3B 66C1C008            <1> 	rol ax, 8
  7754 00005F3F E640                <1> 	out 0x40, al
  7755                              <1> 	;enable rtc interrupt
  7756 00005F41 B00B                <1> 	mov al, 0xB
  7757 00005F43 E670                <1> 	out 0x70, al
  7758 00005F45 66C1C008            <1> 	rol ax, 8
  7759 00005F49 E471                <1> 	in al, 0x71
  7760 00005F4B 66C1C008            <1> 	rol ax, 8
  7761 00005F4F E670                <1> 	out 0x70, al
  7762 00005F51 66C1C008            <1> 	rol ax, 8
  7763 00005F55 0C40                <1> 	or al, 0x40
  7764 00005F57 E671                <1> 	out 0x71, al
  7765 00005F59 C3                  <1> 	ret
  7766                              <1> .fpu:
  7767                              <1> 	;And now to initialize the fpu
  7768 00005F5A 0F20E0              <1> 	mov eax, cr4
  7769 00005F5D 0D00020000          <1> 	or eax, 0x200
  7770 00005F62 0F22E0              <1> 	mov cr4, eax
  7771 00005F65 B87F0B0000          <1> 	mov eax, 0xB7F
  7772 00005F6A 50                  <1> 	push eax
  7773 00005F6B D92C24              <1> 	fldcw [esp]
  7774 00005F6E 58                  <1> 	pop eax
  7775 00005F6F C3                  <1> 	ret
  7776                              <1> 	
  7777                              <1> .sse:
  7778 00005F70 0F20C0              <1> 	mov eax, cr0
  7779 00005F73 24FB                <1> 	and al, 11111011b
  7780 00005F75 0C02                <1> 	or al, 00000010b
  7781 00005F77 0F22C0              <1> 	mov cr0, eax
  7782 00005F7A 0F20E0              <1> 	mov eax, cr4
  7783 00005F7D 660D0006            <1> 	or ax, 0000011000000000b
  7784 00005F81 0F22E0              <1> 	mov cr4, eax
  7785 00005F84 C3                  <1> 	ret
  7786                                      %include "source/pci.asm"
  7787 00005F85 00                  <1> pcibus		db 0
  7788 00005F86 00                  <1> pcidevice	db 0
  7789 00005F87 00                  <1> pcifunction	db 0
  7790 00005F88 00                  <1> pciregister	db 0
  7791 00005F89 00                  <1> pcireqtype	db 0
  7792 00005F8A 00000000            <1> pcidevid	dd 0
  7793 00005F8E FFFFFFFF            <1> pcidevidmask dd 0xFFFFFFFF
  7794                              <1> getpcimem:
  7795 00005F92 B002                <1> 	mov al, 2
  7796 00005F94 A2[895F0000]        <1> 	mov [pcireqtype], al
  7797 00005F99 E922000000          <1> 	jmp searchpci
  7798                              <1> getpciport:
  7799 00005F9E B001                <1> 	mov al, 1
  7800 00005FA0 A2[895F0000]        <1> 	mov [pcireqtype], al
  7801 00005FA5 E916000000          <1> 	jmp searchpci
  7802                              <1> pcidump:
  7803 00005FAA 31C0                <1> 	xor eax, eax
  7804 00005FAC A2[875F0000]        <1> 	mov [pcifunction], al
  7805 00005FB1 A2[855F0000]        <1> 	mov [pcibus], al
  7806 00005FB6 A2[865F0000]        <1> 	mov [pcidevice], al
  7807 00005FBB A2[895F0000]        <1> 	mov [pcireqtype], al
  7808                              <1> searchpci:		;;return in ebx, start X in pciX
  7809 00005FC0 30C0                <1> 	xor al, al
  7810 00005FC2 A2[885F0000]        <1> 	mov [pciregister], al
  7811 00005FC7 E81D020000          <1> 	call getpciaddr
  7812 00005FCC BAF80C0000          <1> 	mov edx, 0xCF8
  7813 00005FD1 EF                  <1> 	out dx, eax	;;request pci config
  7814 00005FD2 BAFC0C0000          <1> 	mov edx, 0xCFC
  7815 00005FD7 ED                  <1> 	in eax, dx 	;;read in pci config
  7816 00005FD8 3D0000FFFF          <1> 	cmp eax, 0xFFFF0000
  7817 00005FDD 0F8237000000        <1> 	jb near checkpcidevice
  7818                              <1> searchpciret:
  7819                              <1> nextpcidevice:
  7820 00005FE3 30C0                <1> 	xor al, al
  7821 00005FE5 A2[875F0000]        <1> 	mov [pcifunction], al
  7822 00005FEA A0[865F0000]        <1> 	mov al, [pcidevice]
  7823 00005FEF 3C1F                <1> 	cmp al, 11111b
  7824 00005FF1 0F8300010000        <1> 	jae near nextpcibus
  7825 00005FF7 FEC0                <1> 	inc al
  7826 00005FF9 A2[865F0000]        <1> 	mov [pcidevice], al
  7827 00005FFE EBC0                <1> 	jmp searchpci
  7828 00006000 A0[875F0000]        <1> 	mov al, [pcifunction]
  7829 00006005 3C07                <1> 	cmp al, 111b
  7830 00006007 0F83D6FFFFFF        <1> 	jae near nextpcidevice
  7831 0000600D FEC0                <1> 	inc al
  7832 0000600F A2[875F0000]        <1> 	mov [pcifunction], al
  7833 00006014 EBAA                <1> 	jmp searchpci
  7834 00006016 00000000            <1> pcitype: db 0,0,0,0
  7835                              <1> checkpcidevice:
  7836 0000601A 31C0                <1> 	xor eax, eax
  7837 0000601C 3905[8A5F0000]      <1> 	cmp [pcidevid], eax
  7838 00006022 0F8430000000        <1> 	je near .good
  7839 00006028 A2[885F0000]        <1> 	mov [pciregister], al	;device id, vendor id
  7840 0000602D E8B7010000          <1> 	call getpciaddr
  7841 00006032 BAF80C0000          <1> 	mov edx, 0xCF8
  7842 00006037 EF                  <1> 	out dx, eax
  7843 00006038 BAFC0C0000          <1> 	mov edx, 0xCFC
  7844 0000603D ED                  <1> 	in eax, dx
  7845 0000603E 2305[8E5F0000]      <1> 	and eax, [pcidevidmask]
  7846 00006044 8B1D[8A5F0000]      <1> 	mov ebx, [pcidevid]
  7847 0000604A 231D[8E5F0000]      <1> 	and ebx, [pcidevidmask]
  7848 00006050 39D8                <1> 	cmp eax, ebx
  7849 00006052 0F858BFFFFFF        <1> 	jne near searchpciret
  7850                              <1> .good:
  7851 00006058 30C0                <1> 	xor al, al
  7852 0000605A 3805[895F0000]      <1> 	cmp [pcireqtype], al
  7853 00006060 0F842C000000        <1> 	je near dumppcidevice
  7854 00006066 B008                <1> 	mov al, 0x08
  7855 00006068 A2[885F0000]        <1> 	mov [pciregister], al	;;class code, subclass, revision id
  7856 0000606D E877010000          <1> 	call getpciaddr
  7857 00006072 BAF80C0000          <1> 	mov edx, 0xCF8
  7858 00006077 EF                  <1> 	out dx, eax
  7859 00006078 BAFC0C0000          <1> 	mov edx, 0xCFC
  7860 0000607D ED                  <1> 	in eax, dx
  7861 0000607E C1C008              <1> 	rol eax, 8
  7862 00006081 3A05[16600000]      <1> 	cmp al, [pcitype]
  7863 00006087 0F84A0000000        <1> 	je near foundpciaddr
  7864 0000608D E951FFFFFF          <1> 	jmp searchpciret
  7865                              <1> dumppcidevice:
  7866 00006092 30C0                <1> 	xor al, al
  7867 00006094 A2[885F0000]        <1> 	mov [pciregister], al
  7868 00006099 E84B010000          <1> 	call getpciaddr
  7869 0000609E 89C1                <1> 	mov ecx, eax
  7870 000060A0 C605[72310000]05    <1> 	mov byte [firsthexshown], 5
  7871 000060A7 E8DBD0FFFF          <1> 	call showhex
  7872                              <1> dumppcidevicelp:
  7873 000060AC A2[885F0000]        <1> 	mov [pciregister], al
  7874 000060B1 E833010000          <1> 	call getpciaddr
  7875 000060B6 BAF80C0000          <1> 	mov edx, 0xCF8
  7876 000060BB EF                  <1> 	out dx, eax
  7877 000060BC BAFC0C0000          <1> 	mov edx, 0xCFC
  7878 000060C1 ED                  <1> 	in eax, dx
  7879 000060C2 89C1                <1> 	mov ecx, eax
  7880 000060C4 A0[885F0000]        <1> 	mov al, [pciregister]
  7881 000060C9 0404                <1> 	add al, 4
  7882 000060CB C605[72310000]05    <1> 	mov byte [firsthexshown], 5
  7883 000060D2 E8B0D0FFFF          <1> 	call showhex
  7884 000060D7 3C3C                <1> 	cmp al, 0x3C
  7885 000060D9 72D1                <1> 	jb dumppcidevicelp
  7886                              <1> dumppcidn:
  7887                              <1> %ifdef io.serial
  7888                              <1> 	mov esi, line
  7889                              <1> 	call print
  7890                              <1> %else
  7891 000060DB 803D[95250000]00    <1> 	cmp byte [charpos], 0
  7892 000060E2 0F84FBFEFFFF        <1> 	je near searchpciret
  7893 000060E8 BE[3F820000]        <1> 	mov esi, line
  7894 000060ED E824BCFFFF          <1> 	call print
  7895                              <1> %endif
  7896 000060F2 E9ECFEFFFF          <1> 	jmp searchpciret
  7897                              <1> nextpcibus:
  7898 000060F7 30C0                <1> 	xor al, al
  7899 000060F9 A2[865F0000]        <1> 	mov [pcidevice], al
  7900 000060FE A0[855F0000]        <1> 	mov al, [pcibus]
  7901 00006103 3C7F                <1> 	cmp al, 1111111b
  7902 00006105 730C                <1> 	jae donesearchpci
  7903 00006107 FEC0                <1> 	inc al
  7904 00006109 A2[855F0000]        <1> 	mov [pcibus], al
  7905 0000610E E9ADFEFFFF          <1> 	jmp searchpci
  7906                              <1> donesearchpci:
  7907 00006113 BBFFFFFFFF          <1> 	mov ebx, 0xFFFFFFFF
  7908 00006118 31D2                <1> 	xor edx, edx
  7909 0000611A 8815[16600000]      <1> 	mov [pcitype], dl
  7910 00006120 8915[8A5F0000]      <1> 	mov [pcidevid], edx
  7911 00006126 891D[8E5F0000]      <1> 	mov [pcidevidmask], ebx
  7912 0000612C C3                  <1> 	ret
  7913                              <1> foundpciaddr:
  7914 0000612D B010                <1> 	mov al, 0x10
  7915 0000612F A2[885F0000]        <1> 	mov [pciregister], al
  7916 00006134 803D[895F0000]02    <1> 	cmp byte [pcireqtype], 2
  7917 0000613B 7443                <1> 	je findpcimemaddr
  7918                              <1> findpciioaddr:
  7919 0000613D E8A7000000          <1> 	call getpciaddr
  7920 00006142 BAF80C0000          <1> 	mov edx, 0xCF8
  7921 00006147 EF                  <1> 	out dx, eax
  7922 00006148 BAFC0C0000          <1> 	mov edx, 0xCFC
  7923 0000614D ED                  <1> 	in eax, dx
  7924 0000614E 89C3                <1> 	mov ebx, eax
  7925 00006150 81E301000000        <1> 	and ebx, 1
  7926 00006156 81FB00000000        <1> 	cmp ebx, 0
  7927 0000615C 0F846E000000        <1> 	je near notpciioaddr
  7928 00006162 2D01000000          <1> 	sub eax, 1
  7929 00006167 89C2                <1> 	mov edx, eax
  7930 00006169 31DB                <1> 	xor ebx, ebx
  7931 0000616B 4B                  <1> 	dec ebx
  7932 0000616C 891D[8E5F0000]      <1> 	mov [pcidevidmask], ebx
  7933 00006172 43                  <1> 	inc ebx
  7934 00006173 881D[16600000]      <1> 	mov [pcitype], bl
  7935 00006179 891D[8A5F0000]      <1> 	mov [pcidevid], ebx
  7936 0000617F C3                  <1> 	ret
  7937                              <1> findpcimemaddr:
  7938 00006180 E864000000          <1> 	call getpciaddr
  7939 00006185 BAF80C0000          <1> 	mov edx, 0xCF8
  7940 0000618A EF                  <1> 	out dx, eax
  7941 0000618B BAFC0C0000          <1> 	mov edx, 0xCFC
  7942 00006190 ED                  <1> 	in eax, dx
  7943 00006191 89C3                <1> 	mov ebx, eax
  7944 00006193 81E301000000        <1> 	and ebx, 1
  7945 00006199 81FB01000000        <1> 	cmp ebx, 1
  7946 0000619F 0F842B000000        <1> 	je near notpciioaddr
  7947 000061A5 C1E804              <1> 	shr eax, 4
  7948 000061A8 C1E004              <1> 	shl eax, 4	;remove prefetch and type
  7949 000061AB 89C2                <1> 	mov edx, eax
  7950 000061AD 50                  <1> 	push eax
  7951 000061AE A1[35020000]        <1> 	mov eax, [basecache]
  7952 000061B3 C1E004              <1> 	shl eax, 4
  7953 000061B6 29C2                <1> 	sub edx, eax
  7954 000061B8 58                  <1> 	pop eax
  7955 000061B9 31DB                <1> 	xor ebx, ebx
  7956 000061BB 4B                  <1> 	dec ebx
  7957 000061BC 891D[8E5F0000]      <1> 	mov [pcidevidmask], ebx
  7958 000061C2 43                  <1> 	inc ebx
  7959 000061C3 881D[16600000]      <1> 	mov [pcitype], bl
  7960 000061C9 891D[8A5F0000]      <1> 	mov [pcidevid], ebx
  7961 000061CF C3                  <1> 	ret
  7962                              <1> notpciioaddr:
  7963 000061D0 A0[885F0000]        <1> 	mov al, [pciregister]
  7964 000061D5 0404                <1> 	add al, 4
  7965 000061D7 3C28                <1> 	cmp al, 0x28
  7966 000061D9 0F8704FEFFFF        <1> 	ja near searchpciret
  7967 000061DF A2[885F0000]        <1> 	mov [pciregister], al
  7968 000061E4 E954FFFFFF          <1> 	jmp findpciioaddr
  7969                              <1> getpciaddr:		;;puts it in eax and ebx
  7970 000061E9 31C0                <1> 			xor eax, eax
  7971 000061EB BB00000080          <1> 			mov ebx, 0x80000000
  7972 000061F0 A0[855F0000]        <1> 			mov al, [pcibus]
  7973 000061F5 C1E010              <1> 			shl eax, 16
  7974 000061F8 01C3                <1> 			add ebx, eax
  7975 000061FA 31C0                <1> 			xor eax, eax
  7976 000061FC A0[865F0000]        <1> 			mov al, [pcidevice]
  7977 00006201 C1E00B              <1> 			shl eax, 11
  7978 00006204 01C3                <1> 			add ebx, eax
  7979 00006206 31C0                <1> 			xor eax, eax
  7980 00006208 A0[875F0000]        <1> 			mov al, [pcifunction]
  7981 0000620D C1E008              <1> 			shl eax, 8
  7982 00006210 01C3                <1> 			add ebx, eax
  7983 00006212 31C0                <1> 			xor eax, eax
  7984 00006214 A0[885F0000]        <1> 			mov al, [pciregister]
  7985 00006219 01C3                <1> 			add ebx, eax
  7986 0000621B 89D8                <1> 			mov eax, ebx
  7987 0000621D C3                  <1> 			ret
  7988                                      %include "source/disk.asm"
  7989                              <1> %ifdef disk.real
  7990                              <1> 	%include "source/drivers/disk/realmode.asm"
  7991                              <2> diskr:
  7992                              <2> 			;sector count in cl
  7993                              <2> 			;disk number in ch
  7994                              <2> 			;48 bit address with last 32 bits in ebx
  7995                              <2> 			;buffer in esi
  7996                              <2> 			;puts end of buffer in edi and end lba address in edx
  7997 0000621E 880D[4B620000]      <2> 	mov [sdlength], cl
  7998 00006224 891D[4C620000]      <2> 	mov [sdaddress], ebx
  7999 0000622A 8935[C7630000]      <2> 	mov [oldesireal], esi
  8000 00006230 66BE[5062]          <2> 	mov si, readdiskreal
  8001 00006234 668935[CB0C0000]    <2> 	mov [realmodeptr], si
  8002 0000623B BE[8C620000]        <2> 	mov esi, backfromrealread
  8003 00006240 8935[C70C0000]      <2> 	mov [realmodereturn], esi
  8004 00006246 E965A9FFFF          <2> 	jmp realmode
  8005 0000624B 00                  <2> sdlength db 0
  8006 0000624C 00000000            <2> sdaddress dd 0
  8007                              <2> 
  8008                              <2> [BITS 16]
  8009                              <2> readdiskreal:
  8010 00006250 C706[7C62]1000      <2> 	mov word [dlen], 0x10
  8011 00006256 C706[8062]0000      <2> 	mov word [daddress], 0
  8012 0000625C C706[8262]0001      <2> 	mov word [dsegm], 0x100
  8013 00006262 66891E[8462]        <2> 	mov [dlbaad], ebx
  8014 00006267 880E[7E62]          <2> 	mov [dreadlen], cl
  8015                              <2> ReadHardDisk:
  8016 0000626B BE[7C62]            <2> 	mov si, diskaddresspacket
  8017 0000626E 31C0                <2> 	xor ax, ax
  8018 00006270 B442                <2> 	mov ah, 0x42
  8019 00006272 8A16[7B62]          <2> 	mov dl, [dnumber]
  8020 00006276 CD13                <2> 	int 0x13
  8021 00006278 72F1                <2> 	jc ReadHardDisk
  8022 0000627A C3                  <2> 	ret
  8023                              <2> 
  8024 0000627B 80                  <2> dnumber db 0x80
  8025                              <2> diskaddresspacket:
  8026 0000627C 10                  <2> dlen:	db 0x10 ;size of packet
  8027 0000627D 00                  <2> 		db 0
  8028 0000627E 7F00                <2> dreadlen:	dw 0x7F	;blocks to read=maximum
  8029 00006280 0000                <2> daddress:	dw 0	;address 0
  8030 00006282 0001                <2> dsegm:		dw 0x100	;segment
  8031                              <2> 		;start with known value for hd
  8032                              <2> dlbaad:
  8033 00006284 00000000            <2> 	dd 0	;lba address
  8034 00006288 00000000            <2> 	dd 0
  8035                              <2> [BITS 32]
  8036                              <2> backfromrealread:
  8037 0000628C 8B35[C7630000]      <2> 	mov esi, [oldesireal]
  8038 00006292 8B1D[4C620000]      <2> 	mov ebx, [sdaddress]
  8039 00006298 31C9                <2> 	xor ecx, ecx
  8040 0000629A 8A0D[4B620000]      <2> 	mov cl, [sdlength]
  8041 000062A0 01CB                <2> 	add ebx, ecx
  8042 000062A2 66B80800            <2> 	mov ax, LINEAR_SEL
  8043 000062A6 8EE0                <2> 	mov fs, ax
  8044 000062A8 BF00100000          <2> 	mov edi, 0x1000
  8045 000062AD B200                <2> 	mov dl, 0
  8046 000062AF D0E1                <2> 	shl cl, 1
  8047                              <2> copyfromrmodedisk:
  8048 000062B1 648A07              <2> 	mov al, [fs:edi]
  8049 000062B4 8806                <2> 	mov [esi], al
  8050 000062B6 47                  <2> 	inc edi
  8051 000062B7 46                  <2> 	inc esi
  8052 000062B8 FECA                <2> 	dec dl
  8053 000062BA 80FA00              <2> 	cmp dl, 0
  8054 000062BD 75F2                <2> 	jne copyfromrmodedisk
  8055 000062BF FEC9                <2> 	dec cl
  8056 000062C1 B200                <2> 	mov dl, 0
  8057 000062C3 80F900              <2> 	cmp cl, 0
  8058 000062C6 75E9                <2> 	jne copyfromrmodedisk
  8059 000062C8 66B83000            <2> 	mov ax, NEW_DATA_SEL
  8060 000062CC 8EE0                <2> 	mov fs, ax
  8061 000062CE 89F7                <2> 	mov edi, esi
  8062 000062D0 8B35[C7630000]      <2> 	mov esi, [oldesireal]
  8063 000062D6 89DA                <2> 	mov edx, ebx
  8064 000062D8 8B1D[4C620000]      <2> 	mov ebx, [sdaddress]
  8065 000062DE C3                  <2> 	ret
  8066                              <2> 	
  8067                              <1> %else
  8068                              <1> 	%ifdef disk.protected
  8069                              <1> 		%include "source/drivers/disk/pata.asm"
  8070                              <1> 	%endif
  8071                              <1> %endif
  8072                              <1> %ifdef disk.none
  8073                              <1> loadfile:	xor edx, edx
  8074                              <1> 			cmp byte [edi], '&'
  8075                              <1> 			je .ret
  8076                              <1> 			mov edx, 404	;no files are found except &
  8077                              <1> 		.ret:
  8078                              <1> 			ret
  8079                              <1> %else
  8080                              <1> ;This loads files using the methods in the loaded driver
  8081                              <1> loadfile:	;loads a file with the name buffer's location in edi into location in esi
  8082                              <1> 			;returns with err code in edx and file end in edi
  8083 000062DF 803F00              <1> 	cmp byte [edi], 0
  8084 000062E2 0F8448000000        <1> 	je near nofileload
  8085 000062E8 89FA                <1> 	mov edx, edi
  8086 000062EA BB[AE840300]        <1> 	mov ebx, diskfileindex
  8087                              <1> nextnamechar:
  8088 000062EF 8A07                <1> 	mov al, [edi]
  8089 000062F1 3C26                <1> 	cmp al, '&'
  8090 000062F3 7440                <1> 	je nullfile
  8091 000062F5 8A23                <1> 	mov ah, [ebx]
  8092 000062F7 47                  <1> 	inc edi
  8093 000062F8 43                  <1> 	inc ebx
  8094 000062F9 88C1                <1> 	mov cl, al
  8095 000062FB 08E1                <1> 	or cl, ah
  8096 000062FD 80F900              <1> 	cmp cl, 0
  8097 00006300 746B                <1> 	je equalfilenames
  8098 00006302 80F920              <1> 	cmp cl, ' '
  8099 00006305 7466                <1> 	je equalfilenames
  8100 00006307 3C2A                <1> 	cmp al, '*'
  8101 00006309 742B                <1> 	je asteriskcheck
  8102 0000630B 80FC00              <1> 	cmp ah, 0
  8103 0000630E 7410                <1> 	je nextfilename
  8104 00006310 3C00                <1> 	cmp al, 0
  8105 00006312 7404                <1> 	je getebxzero
  8106 00006314 38E0                <1> 	cmp al, ah
  8107 00006316 74D7                <1> 	je nextnamechar
  8108                              <1> getebxzero:
  8109 00006318 8A23                <1> 	mov ah, [ebx]
  8110 0000631A 43                  <1> 	inc ebx
  8111 0000631B 80FC00              <1> 	cmp ah, 0
  8112 0000631E 75F8                <1> 	jne getebxzero
  8113                              <1> nextfilename:
  8114 00006320 81C308000000        <1> 	add ebx, 8		;next descriptor
  8115 00006326 89D7                <1> 	mov edi, edx
  8116 00006328 81FB[D4860300]      <1> 	cmp ebx, enddiskfileindex
  8117 0000632E 72BF                <1> 	jb nextnamechar
  8118                              <1> nofileload:
  8119 00006330 BA94010000          <1> 	mov edx, 404	;indicate not found error
  8120                              <1> nullfile:
  8121 00006335 C3                  <1> 	ret
  8122                              <1> asteriskcheck:
  8123 00006336 4B                  <1> 	dec ebx
  8124 00006337 8A07                <1> 	mov al, [edi]
  8125 00006339 3C2A                <1> 	cmp al, '*'
  8126 0000633B 74F9                <1> 	je asteriskcheck ;remove multiple asterisks
  8127 0000633D 3C20                <1> 	cmp al, ' '
  8128 0000633F 7412                <1> 	je equalfilenames2
  8129 00006341 3C00                <1> 	cmp al, 0
  8130 00006343 740E                <1> 	je equalfilenames2
  8131                              <1> .lp:
  8132 00006345 8A23                <1> 	mov ah, [ebx]
  8133 00006347 80FC00              <1> 	cmp ah, 0
  8134 0000634A 74D4                <1> 	je nextfilename
  8135 0000634C 38E0                <1> 	cmp al, ah
  8136 0000634E 749F                <1> 	je nextnamechar
  8137 00006350 43                  <1> 	inc ebx
  8138 00006351 EBF2                <1> 	jmp .lp
  8139                              <1> equalfilenames2:
  8140 00006353 81EB02000000        <1> 	sub ebx, 2
  8141                              <1> eqfilefind:
  8142 00006359 43                  <1> 	inc ebx
  8143 0000635A 81FB[D4860300]      <1> 	cmp ebx, enddiskfileindex
  8144 00006360 0F83CAFFFFFF        <1> 	jae near nofileload
  8145 00006366 8A03                <1> 	mov al, [ebx]
  8146 00006368 3C00                <1> 	cmp al, 0
  8147 0000636A 75ED                <1> 	jne eqfilefind
  8148 0000636C 43                  <1> 	inc ebx
  8149                              <1> equalfilenames:
  8150 0000636D 8B4304              <1> 	mov eax, [ebx + 4] 	;put file size in eax
  8151 00006370 8B1B                <1> 	mov ebx, [ebx]		;put file beginning in ebx
  8152 00006372 031D[66820000]      <1> 	add ebx, [lbaad]	;add offset to solleros start
  8153 00006378 31C9                <1> 	xor ecx, ecx
  8154 0000637A 88C1                <1> 	mov cl, al			;get excess number of sectors
  8155 0000637C C0E102              <1> 	shl cl, 2
  8156 0000637F C0E902              <1> 	shr cl, 2			;cut off at 64
  8157 00006382 29C8                <1> 	sub eax, ecx		;get rid of excess sectors
  8158 00006384 B500                <1> 	mov ch, 0			;drive 0
  8159 00006386 C1E806              <1> 	shr eax, 6			;get number of 64 sector tracks
  8160                              <1> loaddiskfile:			;tracks in eax, excess sectors in cl, drive in ch, buffer in esi, address in ebx
  8161 00006389 A3[CB630000]        <1> 	mov [filetracks], eax
  8162 0000638E 89F7                <1> 	mov edi, esi		;just in case cl is 0
  8163 00006390 89DA                <1> 	mov edx, ebx
  8164 00006392 80F900              <1> 	cmp cl, 0
  8165 00006395 7405                <1> 	je copytracksforfile
  8166 00006397 E882FEFFFF          <1> 	call diskr	;take care of excess sectors
  8167                              <1> copytracksforfile:
  8168 0000639C A1[CB630000]        <1> 	mov eax, [filetracks]
  8169 000063A1 3D00000000          <1> 	cmp eax, 0
  8170 000063A6 7419                <1> 	je donecopyfile
  8171 000063A8 48                  <1> 	dec eax
  8172 000063A9 A3[CB630000]        <1> 	mov [filetracks], eax
  8173 000063AE 89D3                <1> 	mov ebx, edx	;get end lba
  8174 000063B0 B140                <1> 	mov cl, 0x40 ;for compatability with BIOS it uses 64 instead of 128
  8175 000063B2 8A2D[65820000]      <1> 	mov ch, [DriveNumber]
  8176 000063B8 89FE                <1> 	mov esi, edi	;reset buffer
  8177 000063BA E85FFEFFFF          <1> 	call diskr
  8178 000063BF EBDB                <1> 	jmp copytracksforfile
  8179                              <1> donecopyfile:
  8180 000063C1 BA00000000          <1> 	mov edx, 0	;no error
  8181 000063C6 C3                  <1> 	ret
  8182                              <1> 
  8183 000063C7 00000000            <1> oldesireal dd 0
  8184 000063CB 00000000            <1> filetracks dd 0
  8185 000063CF 00                  <1> lbad1 db 0
  8186 000063D0 00                  <1> lbad2 db 0
  8187 000063D1 00                  <1> lbad3 db 0
  8188 000063D2 00                  <1> lbad4 db 0
  8189 000063D3 00                  <1> lbad5 db 0
  8190 000063D4 00                  <1> lbad6 db 0
  8191 000063D5 6400                <1> segments dw 100
  8192                              <1> %endif
  8193                                      %include "source/threads.asm"
  8194                              <1> %ifdef threads.included	
  8195                              <1> nwcmdst:
  8196 000063D7 31C0                <1> 	xor eax, eax
  8197 000063D9 BC[74960300]        <1> 	mov esp, stackend
  8198 000063DE A2[9B640000]        <1> 	mov [threadson], al
  8199 000063E3 A3[9C640000]        <1> 	mov [currentthread], eax
  8200 000063E8 0504000000          <1> 	add eax, 4
  8201 000063ED A3[97640000]        <1> 	mov [lastthread], eax
  8202 000063F2 FB                  <1> 	sti
  8203 000063F3 E9B5C8FFFF          <1> 	jmp nwcmd
  8204                              <1> 
  8205                              <1> nomorethreadspace:
  8206 000063F8 BE[0E640000]        <1> 	mov esi, nmts
  8207 000063FD E814B9FFFF          <1> 	call print
  8208 00006402 C605[9B640000]00    <1> 	mov byte [threadson], 0
  8209 00006409 E99FC8FFFF          <1> 	jmp nwcmd
  8210 0000640E 546872656164204F76- <1> nmts	db "Thread Overflow",10,0
  8211 00006417 6572666C6F770A00    <1>
  8212                              <1> 
  8213                              <1> nomorestackspace:
  8214 0000641F BE[2B640000]        <1> 	mov esi, nmss
  8215 00006424 E8EDB8FFFF          <1> 	call print
  8216 00006429 EBAC                <1> 	jmp nwcmdst
  8217 0000642B 537461636B204F7665- <1> nmss	db "Stack Overflow",10,0
  8218 00006434 72666C6F770A00      <1>
  8219                              <1> 	
  8220                              <1> threadswitch:
  8221 0000643B FA                  <1> 	cli
  8222 0000643C 60                  <1> 	pushad
  8223 0000643D BF[0E730500]        <1> 	mov edi, threadlist
  8224 00006442 A1[9C640000]        <1> 	mov eax, [currentthread]
  8225 00006447 40                  <1> 	inc eax
  8226 00006448 A3[9C640000]        <1> 	mov [currentthread], eax
  8227 0000644D 6648                <1> 	dec ax
  8228 0000644F C1E002              <1> 	shl eax, 2
  8229 00006452 01C7                <1> 	add edi, eax
  8230 00006454 8927                <1> 	mov [edi], esp
  8231 00006456 81C704000000        <1> 	add edi, 4
  8232 0000645C 81FF[0E830500]      <1> 	cmp edi, threadlistend
  8233 00006462 0F830D000000        <1> 	jae near nookespthread
  8234 00006468 8B07                <1> 	mov eax, [edi]
  8235 0000646A 3D00000000          <1> 	cmp eax, 0
  8236 0000646F 0F8519000000        <1> 	jne near okespthread
  8237                              <1> nookespthread:
  8238 00006475 BF[0E730500]        <1> 	mov edi, threadlist
  8239 0000647A 31C0                <1> 	xor eax, eax
  8240 0000647C A3[9C640000]        <1> 	mov [currentthread], eax
  8241 00006481 8B07                <1> 	mov eax, [edi]
  8242 00006483 3D00000000          <1> 	cmp eax, 0
  8243 00006488 0F8449FFFFFF        <1> 	je near nwcmdst
  8244                              <1> okespthread:
  8245 0000648E 89C4                <1> 	mov esp, eax
  8246 00006490 B020                <1> 	mov al, 0x20
  8247 00006492 E620                <1> 	out 0x20, al
  8248 00006494 61                  <1> 	popad
  8249 00006495 FB                  <1> 	sti
  8250 00006496 CF                  <1> 	iret
  8251                              <1> 
  8252                              <1> %endif
  8253 00006497 04000000            <1> 	lastthread dd 4
  8254 0000649B 00                  <1> 	threadson db 0
  8255 0000649C 00000000            <1> 	currentthread dd 0
  8256                                  %ifdef gui.included
  8257                                      %include "source/gui/gui.asm"
  8258                              <1> guiboot:	;Let's see what I can do, I am going to try to make this as freestanding as possible
  8259 000064A0 31C0                <1> 	xor eax, eax
  8260 000064A2 31DB                <1> 	xor ebx, ebx
  8261 000064A4 31C9                <1> 	xor ecx, ecx
  8262 000064A6 31D2                <1> 	xor edx, edx
  8263 000064A8 E871080000          <1> 	call guisetup
  8264                              <1> guiloop:
  8265 000064AD E8B1F0FFFF          <1> 	call cursorgui
  8266                              <1> guistart:
  8267 000064B2 E885F4FFFF          <1> 	call getkey
  8268 000064B7 C605[9F790000]00    <1> 	mov byte [copygui], 0
  8269 000064BE EBF2                <1> 	jmp guistart
  8270                              <1> 
  8271                              <1> %include "source/gui/bmp.asm"
  8272                              <2> showbmp:
  8273 000064C0 668B06              <2> 	mov ax, [esi]
  8274 000064C3 663D424D            <2> 	cmp ax, "BM"
  8275 000064C7 0F85BB000000        <2> 	jne near endedbmp
  8276 000064CD 8B3D[86540000]      <2> 	mov edi, [physbaseptr]
  8277 000064D3 6689D0              <2> 	mov ax, dx
  8278 000064D6 6689CB              <2> 	mov bx, cx
  8279 000064D9 31C9                <2> 	xor ecx, ecx
  8280 000064DB 31D2                <2> 	xor edx, edx
  8281 000064DD 6689D9              <2> 	mov cx, bx
  8282 000064E0 6689C2              <2> 	mov dx, ax
  8283 000064E3 01D7                <2> 	add edi, edx
  8284 000064E5 01D7                <2> 	add edi, edx
  8285 000064E7 31D2                <2> 	xor edx, edx
  8286 000064E9 668B15[5E550000]    <2> 	mov dx, [resolutionx2]
  8287 000064F0 034E16              <2> 	add ecx, [esi + 22]
  8288                              <2> bmplocloop:
  8289 000064F3 52                  <2> 	push edx
  8290 000064F4 31C0                <2> 	xor eax, eax
  8291 000064F6 6689D0              <2> 	mov ax, dx
  8292 000064F9 F7E1                <2> 	mul ecx
  8293 000064FB 5A                  <2> 	pop edx
  8294 000064FC 663B0D[72540000]    <2> 	cmp cx, [resolutiony]
  8295 00006503 7609                <2> 	jbe .nofixy
  8296 00006505 31C9                <2> 	xor ecx, ecx
  8297 00006507 668B0D[72540000]    <2> 	mov cx, [resolutiony]
  8298                              <2> .nofixy:
  8299 0000650E 01C7                <2> 	add edi, eax
  8300 00006510 8B5612              <2> 	mov edx, [esi + 18]
  8301 00006513 8B4E16              <2> 	mov ecx, [esi + 22]
  8302 00006516 8B460A              <2> 	mov eax, [esi + 10]
  8303 00006519 8B5E02              <2> 	mov ebx, [esi + 2]
  8304 0000651C 01F3                <2> 	add ebx, esi
  8305 0000651E 891D[8E650000]      <2> 	mov [bmpend], ebx
  8306 00006524 89D3                <2> 	mov ebx, edx
  8307 00006526 01C6                <2> 	add esi, eax
  8308                              <2> ldxbmp2:
  8309 00006528 31D2                <2> 	xor edx, edx
  8310 0000652A 668B15[70540000]    <2> 	mov dx, [resolutionx]
  8311 00006531 39D3                <2> 	cmp ebx, edx
  8312 00006533 7702                <2> 	ja ldxbmp
  8313 00006535 89DA                <2> 	mov edx, ebx
  8314                              <2> ldxbmp:
  8315 00006537 668B06              <2> 	mov ax, [esi]
  8316 0000653A 668907              <2> 	mov [edi], ax
  8317 0000653D 81C702000000        <2> 	add edi, 2
  8318 00006543 81C602000000        <2> 	add esi, 2
  8319 00006549 3B35[8E650000]      <2> 	cmp esi, [bmpend]
  8320 0000654F 7737                <2> 	ja endedbmp
  8321 00006551 4A                  <2> 	dec edx
  8322 00006552 81FA00000000        <2> 	cmp edx, 0
  8323 00006558 77DD                <2> 	ja ldxbmp
  8324 0000655A 31D2                <2> 	xor edx, edx
  8325 0000655C 668B15[70540000]    <2> 	mov dx, [resolutionx]
  8326 00006563 39D3                <2> 	cmp ebx, edx
  8327 00006565 7610                <2> 	jbe .notover
  8328                              <2> .over:
  8329 00006567 01DE                <2> 	add esi, ebx
  8330 00006569 01DE                <2> 	add esi, ebx
  8331 0000656B 29D6                <2> 	sub esi, edx
  8332 0000656D 29D6                <2> 	sub esi, edx
  8333 0000656F 01DF                <2> 	add edi, ebx
  8334 00006571 01DF                <2> 	add edi, ebx
  8335 00006573 29D7                <2> 	sub edi, edx
  8336 00006575 29D7                <2> 	sub edi, edx
  8337                              <2> .notover:
  8338 00006577 29DF                <2> 	sub edi, ebx
  8339 00006579 29DF                <2> 	sub edi, ebx
  8340 0000657B 29D7                <2> 	sub edi, edx
  8341 0000657D 29D7                <2> 	sub edi, edx
  8342 0000657F 49                  <2> 	dec ecx
  8343 00006580 81F900000000        <2> 	cmp ecx, 0
  8344 00006586 77A0                <2> 	ja ldxbmp2
  8345                              <2> endedbmp:
  8346 00006588 E844030000          <2> 	call switchmousepos2
  8347 0000658D C3                  <2> 	ret
  8348                              <2> 	
  8349 0000658E 00000000            <2> 	bmpend dd 0
  8350                              <1> %include "source/gui/circle.asm"
  8351                              <2> drawcircle:	;center in (dx,cx), color in si, radius in ax
  8352 00006592 55                  <2> 	push ebp
  8353 00006593 663D0000            <2> 	cmp ax, 0
  8354 00006597 770A                <2> 	ja .nozerocircle
  8355 00006599 E8F61B0000          <2> 	call putpixel	;the easiest circle ever
  8356 0000659E E9F7000000          <2> 	jmp .done
  8357                              <2> .nozerocircle:
  8358 000065A3 6689F5              <2> 	mov bp, si
  8359 000065A6 6650                <2> 	push ax
  8360 000065A8 E8281C0000          <2> 	call getpixelmem
  8361 000065AD 31C0                <2> 	xor eax, eax
  8362 000065AF 6658                <2> 	pop ax
  8363 000065B1 BE01000000          <2> 	mov esi, 1
  8364 000065B6 29C6                <2> 	sub esi, eax
  8365 000065B8 89C1                <2> 	mov ecx, eax
  8366 000065BA 31C0                <2> 	xor eax, eax
  8367 000065BC 66A1[5E550000]      <2> 	mov ax, [resolutionx2]
  8368 000065C2 F7E1                <2> 	mul ecx
  8369 000065C4 50                  <2> 	push eax
  8370 000065C5 31D2                <2> 	xor edx, edx
  8371 000065C7 01C7                <2> 	add edi, eax
  8372 000065C9 66892F              <2> 	mov [edi], bp
  8373 000065CC 29C7                <2> 	sub edi, eax
  8374 000065CE 29C7                <2> 	sub edi, eax
  8375 000065D0 66892F              <2> 	mov [edi], bp
  8376 000065D3 01C7                <2> 	add edi, eax
  8377 000065D5 D1E1                <2> 	shl ecx, 1
  8378 000065D7 01CF                <2> 	add edi, ecx
  8379 000065D9 66892F              <2> 	mov [edi], bp
  8380 000065DC D1E1                <2> 	shl ecx, 1
  8381 000065DE 29CF                <2> 	sub edi, ecx
  8382 000065E0 66892F              <2> 	mov [edi], bp
  8383 000065E3 D1E9                <2> 	shr ecx, 1
  8384 000065E5 01CF                <2> 	add edi, ecx
  8385 000065E7 D1E9                <2> 	shr ecx, 1
  8386 000065E9 B802000000          <2> 	mov eax, 2
  8387 000065EE F7E1                <2> 	mul ecx
  8388 000065F0 48                  <2> 	dec eax
  8389 000065F1 F7D0                <2> 	not eax ;make it negative
  8390 000065F3 A3[A0660000]        <2> 	mov [.ddF_y], eax
  8391 000065F8 58                  <2> 	pop eax
  8392 000065F9 BB01000000          <2> 	mov ebx, 1
  8393 000065FE 891D[9C660000]      <2> 	mov [.ddF_x], ebx
  8394 00006604 4B                  <2> 	dec ebx
  8395 00006605 31D2                <2> 	xor edx, edx
  8396 00006607 E904000000          <2> 	jmp .lp
  8397                              <2> .lpb:
  8398 0000660C D1EA                <2> 	shr edx, 1
  8399 0000660E D1E9                <2> 	shr ecx, 1
  8400                              <2> .lp:	;it starts this with the center in edi
  8401                              <2> 		;color in bp
  8402                              <2> 		;ddF_x in memory
  8403                              <2> 		;x*resolutionx2 in ebx
  8404                              <2> 		;x in edx
  8405                              <2> 		;ddF_y in memory
  8406                              <2> 		;y*resolutionx2 in eax
  8407                              <2> 		;f in esi
  8408                              <2> 		;y in ecx
  8409 00006610 81FE00000080        <2> 	cmp esi, 0x80000000 ;this means it is not negative
  8410 00006616 7717                <2> 	ja	.noddF_y
  8411 00006618 49                  <2> 	dec ecx
  8412 00006619 2B05[5E550000]      <2> 	sub eax, [resolutionx2]
  8413 0000661F 8105[A0660000]0200- <2> 	add dword [.ddF_y], 2
  8414 00006627 0000                <2>
  8415 00006629 0335[A0660000]      <2> 	add esi, [.ddF_y]
  8416                              <2> .noddF_y:
  8417 0000662F 42                  <2> 	inc edx
  8418 00006630 031D[5E550000]      <2> 	add ebx, [resolutionx2]
  8419 00006636 8105[9C660000]0200- <2> 	add dword [.ddF_x], 2
  8420 0000663E 0000                <2>
  8421 00006640 0335[9C660000]      <2> 	add esi, [.ddF_x]
  8422                              <2> 
  8423 00006646 D1E2                <2> 	shl edx, 1
  8424 00006648 D1E1                <2> 	shl ecx, 1
  8425 0000664A 01D7                <2> 	add edi, edx
  8426 0000664C 01C7                <2> 	add edi, eax
  8427 0000664E 66892F              <2> 	mov [edi], bp	;(cx+x,cy+y)
  8428 00006651 D1E2                <2> 	shl edx, 1
  8429 00006653 29D7                <2> 	sub edi, edx
  8430 00006655 66892F              <2> 	mov [edi], bp	;(cx-x,cy+y)
  8431 00006658 D1E0                <2> 	shl eax, 1
  8432 0000665A 29C7                <2> 	sub edi, eax
  8433 0000665C 66892F              <2> 	mov [edi], bp	;(cx-x,cy-y)
  8434 0000665F 01D7                <2> 	add edi, edx
  8435 00006661 66892F              <2> 	mov [edi], bp	;(cx+x,cy-y)
  8436 00006664 D1E8                <2> 	shr eax, 1
  8437 00006666 D1EA                <2> 	shr edx, 1
  8438 00006668 01C7                <2> 	add edi, eax
  8439 0000666A 29D7                <2> 	sub edi, edx
  8440                              <2> 
  8441 0000666C 39D1                <2> 	cmp ecx, edx
  8442 0000666E 749C                <2> 	je .lpb
  8443                              <2> 
  8444 00006670 01DF                <2> 	add edi, ebx
  8445 00006672 01CF                <2> 	add edi, ecx
  8446 00006674 66892F              <2> 	mov [edi], bp	;(cx+y,cy+x)
  8447 00006677 D1E1                <2> 	shl ecx, 1
  8448 00006679 29CF                <2> 	sub edi, ecx
  8449 0000667B 66892F              <2> 	mov [edi], bp	;(cx-y,cy+x)
  8450 0000667E D1E3                <2> 	shl ebx, 1
  8451 00006680 29DF                <2> 	sub edi, ebx
  8452 00006682 66892F              <2> 	mov [edi], bp	;(cx-y,cy-x)
  8453 00006685 01CF                <2> 	add edi, ecx
  8454 00006687 66892F              <2> 	mov [edi], bp	;(cx+y,cy-x)
  8455 0000668A D1EB                <2> 	shr ebx, 1
  8456 0000668C D1E9                <2> 	shr ecx, 1
  8457 0000668E 01DF                <2> 	add edi, ebx
  8458 00006690 29CF                <2> 	sub edi, ecx
  8459 00006692 39CA                <2> 	cmp edx, ecx
  8460 00006694 0F8272FFFFFF        <2> 	jb .lpb
  8461                              <2> .done:
  8462 0000669A 5D                  <2> 	pop ebp
  8463 0000669B C3                  <2> 	ret
  8464                              <2> 	
  8465 0000669C 00000000            <2> .ddF_x dd 0
  8466 000066A0 00000000            <2> .ddF_y dd 0
  8467                              <2> 
  8468                              <2> fillcircle:	;center in (dx,cx), color in si, radius in ax
  8469 000066A4 55                  <2> 	push ebp
  8470 000066A5 663D0000            <2> 	cmp ax, 0
  8471 000066A9 770A                <2> 	ja .nozerocircle
  8472 000066AB E8E41A0000          <2> 	call putpixel	;the easiest circle ever
  8473 000066B0 E95A010000          <2> 	jmp .done
  8474                              <2> .nozerocircle:
  8475 000066B5 6689F5              <2> 	mov bp, si
  8476 000066B8 6650                <2> 	push ax
  8477 000066BA E8161B0000          <2> 	call getpixelmem
  8478 000066BF 31C0                <2> 	xor eax, eax
  8479 000066C1 6658                <2> 	pop ax
  8480 000066C3 BE01000000          <2> 	mov esi, 1
  8481 000066C8 29C6                <2> 	sub esi, eax
  8482 000066CA 89C1                <2> 	mov ecx, eax
  8483 000066CC 31C0                <2> 	xor eax, eax
  8484 000066CE 66A1[5E550000]      <2> 	mov ax, [resolutionx2]
  8485 000066D4 F7E1                <2> 	mul ecx
  8486 000066D6 50                  <2> 	push eax
  8487 000066D7 31D2                <2> 	xor edx, edx
  8488 000066D9 01C7                <2> 	add edi, eax
  8489 000066DB 66892F              <2> 	mov [edi], bp
  8490 000066DE 29C7                <2> 	sub edi, eax
  8491 000066E0 29C7                <2> 	sub edi, eax
  8492 000066E2 66892F              <2> 	mov [edi], bp
  8493 000066E5 01C7                <2> 	add edi, eax
  8494 000066E7 D1E1                <2> 	shl ecx, 1
  8495 000066E9 01CF                <2> 	add edi, ecx
  8496 000066EB 51                  <2> 	push ecx
  8497                              <2> .s0:
  8498 000066EC 66892F              <2> 	mov [edi], bp
  8499 000066EF 81EF02000000        <2> 	sub edi, 2
  8500 000066F5 49                  <2> 	dec ecx
  8501 000066F6 81F900000000        <2> 	cmp ecx, 0
  8502 000066FC 75EE                <2> 	jne .s0
  8503 000066FE 66892F              <2> 	mov [edi], bp
  8504 00006701 59                  <2> 	pop ecx
  8505 00006702 01CF                <2> 	add edi, ecx
  8506 00006704 D1E9                <2> 	shr ecx, 1
  8507 00006706 B802000000          <2> 	mov eax, 2
  8508 0000670B F7E1                <2> 	mul ecx
  8509 0000670D 48                  <2> 	dec eax
  8510 0000670E F7D0                <2> 	not eax ;make it negative
  8511 00006710 A3[15680000]        <2> 	mov [.ddF_y], eax
  8512 00006715 58                  <2> 	pop eax
  8513 00006716 BB01000000          <2> 	mov ebx, 1
  8514 0000671B 891D[11680000]      <2> 	mov [.ddF_x], ebx
  8515 00006721 4B                  <2> 	dec ebx
  8516 00006722 31D2                <2> 	xor edx, edx
  8517 00006724 E904000000          <2> 	jmp .lp
  8518                              <2> .lpb:
  8519 00006729 D1EA                <2> 	shr edx, 1
  8520 0000672B D1E9                <2> 	shr ecx, 1
  8521                              <2> .lp:	;it starts this with the center in edi
  8522                              <2> 		;color in bp
  8523                              <2> 		;ddF_x in memory
  8524                              <2> 		;x*resolutionx2 in ebx
  8525                              <2> 		;x in edx
  8526                              <2> 		;ddF_y in memory
  8527                              <2> 		;y*resolutionx2 in eax
  8528                              <2> 		;f in esi
  8529                              <2> 		;y in ecx
  8530 0000672D 81FE00000080        <2> 	cmp esi, 0x80000000 ;this means it is not negative
  8531 00006733 7717                <2> 	ja	.noddF_y
  8532 00006735 49                  <2> 	dec ecx
  8533 00006736 2B05[5E550000]      <2> 	sub eax, [resolutionx2]
  8534 0000673C 8105[15680000]0200- <2> 	add dword [.ddF_y], 2
  8535 00006744 0000                <2>
  8536 00006746 0335[15680000]      <2> 	add esi, [.ddF_y]
  8537                              <2> .noddF_y:
  8538 0000674C 42                  <2> 	inc edx
  8539 0000674D 031D[5E550000]      <2> 	add ebx, [resolutionx2]
  8540 00006753 8105[11680000]0200- <2> 	add dword [.ddF_x], 2
  8541 0000675B 0000                <2>
  8542 0000675D 0335[11680000]      <2> 	add esi, [.ddF_x]
  8543                              <2> 
  8544 00006763 D1E2                <2> 	shl edx, 1
  8545 00006765 D1E1                <2> 	shl ecx, 1
  8546 00006767 52                  <2> 	push edx
  8547 00006768 29D7                <2> 	sub edi, edx
  8548 0000676A 01C7                <2> 	add edi, eax
  8549 0000676C 81FA00000000        <2> 	cmp edx, 0
  8550 00006772 7412                <2> 	je .nos1
  8551                              <2> .s1:
  8552 00006774 66892F              <2> 	mov [edi], bp	;(cx-x,cy+y)
  8553 00006777 81C702000000        <2> 	add edi, 2
  8554 0000677D 4A                  <2> 	dec edx
  8555 0000677E 81FA00000000        <2> 	cmp edx, 0
  8556 00006784 75EE                <2> 	jne .s1
  8557                              <2> .nos1:
  8558 00006786 66892F              <2> 	mov [edi], bp
  8559 00006789 5A                  <2> 	pop edx
  8560 0000678A 52                  <2> 	push edx
  8561 0000678B 29C7                <2> 	sub edi, eax
  8562 0000678D 29C7                <2> 	sub edi, eax
  8563 0000678F 81FA00000000        <2> 	cmp edx, 0
  8564 00006795 7412                <2> 	je .nos2
  8565                              <2> .s2:
  8566 00006797 66892F              <2> 	mov [edi], bp	;(cx+x,cy-y)
  8567 0000679A 81EF02000000        <2> 	sub edi, 2
  8568 000067A0 4A                  <2> 	dec edx
  8569 000067A1 81FA00000000        <2> 	cmp edx, 0
  8570 000067A7 75EE                <2> 	jne .s2
  8571                              <2> .nos2:
  8572 000067A9 66892F              <2> 	mov [edi], bp
  8573 000067AC 5A                  <2> 	pop edx
  8574 000067AD 01C7                <2> 	add edi, eax	;(cx-x,cy-y)
  8575 000067AF 01D7                <2> 	add edi, edx
  8576                              <2> 
  8577 000067B1 39D1                <2> 	cmp ecx, edx
  8578 000067B3 0F8470FFFFFF        <2> 	je .lpb
  8579                              <2> 
  8580 000067B9 51                  <2> 	push ecx
  8581 000067BA 01DF                <2> 	add edi, ebx
  8582 000067BC 29CF                <2> 	sub edi, ecx
  8583 000067BE 81F900000000        <2> 	cmp ecx, 0
  8584 000067C4 7412                <2> 	je .nos3
  8585                              <2> .s3:
  8586 000067C6 66892F              <2> 	mov [edi], bp	;(cx-y,cy+x)
  8587 000067C9 81C702000000        <2> 	add edi, 2
  8588 000067CF 49                  <2> 	dec ecx
  8589 000067D0 81F900000000        <2> 	cmp ecx, 0
  8590 000067D6 75EE                <2> 	jne .s3
  8591                              <2> .nos3:
  8592 000067D8 66892F              <2> 	mov [edi], bp
  8593 000067DB 59                  <2> 	pop ecx
  8594 000067DC 51                  <2> 	push ecx
  8595 000067DD 29DF                <2> 	sub edi, ebx
  8596 000067DF 29DF                <2> 	sub edi, ebx
  8597 000067E1 81F900000000        <2> 	cmp ecx, 0
  8598 000067E7 7412                <2> 	je .nos4
  8599                              <2> .s4:
  8600 000067E9 66892F              <2> 	mov [edi], bp	;(cx+y,cy-x)
  8601 000067EC 81EF02000000        <2> 	sub edi, 2
  8602 000067F2 49                  <2> 	dec ecx
  8603 000067F3 81F900000000        <2> 	cmp ecx, 0
  8604 000067F9 75EE                <2> 	jne .s4
  8605                              <2> .nos4:
  8606 000067FB 66892F              <2> 	mov [edi], bp
  8607 000067FE 59                  <2> 	pop ecx
  8608 000067FF 01DF                <2> 	add edi, ebx	;(cx-y,cy-x)
  8609 00006801 01CF                <2> 	add edi, ecx
  8610                              <2> 
  8611 00006803 D1EA                <2> 	shr edx, 1
  8612 00006805 D1E9                <2> 	shr ecx, 1
  8613 00006807 39CA                <2> 	cmp edx, ecx
  8614 00006809 0F821EFFFFFF        <2> 	jb .lp
  8615                              <2> .done:
  8616 0000680F 5D                  <2> 	pop ebp
  8617 00006810 C3                  <2> 	ret
  8618                              <2> 	
  8619 00006811 00000000            <2> .ddF_x dd 0
  8620 00006815 00000000            <2> .ddF_y dd 0
  8621                              <1> %include "source/gui/cursor.asm"
  8622                              <2> clearmousecursor:
  8623 00006819 BE[816B0000]        <2> 		mov esi, background
  8624 0000681E 8B3D[86540000]      <2> 		mov edi, [physbaseptr]
  8625 00006824 31D2                <2> 		xor edx, edx
  8626 00006826 31C9                <2> 		xor ecx, ecx
  8627 00006828 668B15[50570000]    <2> 		mov dx, [lastmouseposition]
  8628 0000682F 668B0D[52570000]    <2> 		mov cx, [lastmouseposition + 2]
  8629 00006836 01D7                <2> 		add edi, edx
  8630 00006838 31D2                <2> 		xor edx, edx
  8631 0000683A 668B15[5E550000]    <2> 		mov dx, [resolutionx2]
  8632 00006841 81F900000000        <2> 		cmp ecx, 0
  8633 00006847 7408                <2> 		je .nomul
  8634 00006849 52                  <2> 		push edx
  8635 0000684A 89D0                <2> 		mov eax, edx
  8636 0000684C F7E1                <2> 		mul ecx
  8637 0000684E 01C7                <2> 		add edi, eax
  8638 00006850 5A                  <2> 		pop edx
  8639                              <2> .nomul:
  8640                              <2> %ifdef 	gui.background
  8641                              <2> 		cmp dword [backgroundimage], 0
  8642                              <2> 		je .noyclr
  8643                              <2> 		mov esi, [backgroundimage]
  8644                              <2> 		sub edi, [physbaseptr]
  8645                              <2> 		add esi, edi
  8646                              <2> 		add edi, [physbaseptr]
  8647                              <2> .backlp:
  8648                              <2> 		xor ebx, ebx
  8649                              <2> .noyback:
  8650                              <2> 		mov eax, [esi + ebx]
  8651                              <2> 		mov [edi + ebx], eax
  8652                              <2> 		add ebx, 4
  8653                              <2> 		cmp ebx, 16
  8654                              <2> 		jne .noyback
  8655                              <2> 		add edi, edx
  8656                              <2> 		add esi, edx
  8657                              <2> 		inc cx
  8658                              <2> 		cmp cx, 16
  8659                              <2> 		jb .backlp
  8660                              <2> 		ret
  8661                              <2> %endif
  8662                              <2> .noyclr:
  8663 00006851 668B06              <2> 		mov ax, [esi]
  8664 00006854 C1C010              <2> 		rol eax, 16
  8665 00006857 668B06              <2> 		mov ax, [esi]
  8666 0000685A 8907                <2> 		mov [edi], eax
  8667 0000685C 894704              <2> 		mov [edi + 4], eax
  8668 0000685F 894708              <2> 		mov [edi + 8], eax
  8669 00006862 89470C              <2> 		mov [edi + 12], eax
  8670 00006865 01D7                <2> 		add edi, edx
  8671 00006867 6641                <2> 		inc cx
  8672 00006869 6681F91000          <2> 		cmp cx, 16
  8673 0000686E 72E1                <2> 		jb .noyclr
  8674 00006870 C3                  <2> 		ret
  8675                              <2> 
  8676                              <2> switchmousepos:		;;switch were the mouse is located
  8677 00006871 BE[6DB70300]        <2> 		mov esi, mousecolorbuf
  8678 00006876 8B3D[86540000]      <2> 		mov edi, [physbaseptr]
  8679 0000687C 31D2                <2> 		xor edx, edx
  8680 0000687E 31C9                <2> 		xor ecx, ecx
  8681 00006880 668B15[50570000]    <2> 		mov dx, [lastmouseposition]
  8682 00006887 668B0D[52570000]    <2> 		mov cx, [lastmouseposition + 2]
  8683 0000688E 01D7                <2> 		add edi, edx
  8684 00006890 31D2                <2> 		xor edx, edx
  8685 00006892 668B15[5E550000]    <2> 		mov dx, [resolutionx2]
  8686 00006899 6681F90000          <2> 		cmp cx, 0
  8687 0000689E 740B                <2> 		je noswmsy
  8688 000068A0 01D7                <2> swmsy:		add edi, edx
  8689 000068A2 6649                <2> 		dec cx
  8690 000068A4 6681F90000          <2> 		cmp cx, 0
  8691 000068A9 75F5                <2> 		jne swmsy
  8692 000068AB 8B06                <2> noswmsy:	mov eax, [esi]
  8693 000068AD 8B5E04              <2> 		mov ebx, [esi + 4]
  8694 000068B0 8907                <2> 		mov [edi], eax
  8695 000068B2 895F04              <2> 		mov [edi + 4], ebx
  8696 000068B5 8B4608              <2> 		mov eax, [esi + 8]
  8697 000068B8 8B5E0C              <2> 		mov ebx, [esi + 12]
  8698 000068BB 894708              <2> 		mov [edi + 8], eax
  8699 000068BE 895F0C              <2> 		mov [edi + 12], ebx
  8700 000068C1 01D7                <2> 		add edi, edx
  8701 000068C3 81C610000000        <2> 		add esi, 16
  8702 000068C9 81FE[6DB80300]      <2> 		cmp esi, mcolorend
  8703 000068CF 72DA                <2> 		jb noswmsy
  8704                              <2> 		
  8705                              <2> switchmousepos2:
  8706 000068D1 BE[6DB70300]        <2> 		mov esi, mousecolorbuf
  8707 000068D6 8B3D[86540000]      <2> 		mov edi, [physbaseptr]
  8708 000068DC 31D2                <2> 		xor edx, edx
  8709 000068DE 31C9                <2> 		xor ecx, ecx
  8710 000068E0 668B15[54570000]    <2> 		mov dx, [mousecursorposition]
  8711 000068E7 668B0D[56570000]    <2> 		mov cx, [mousecursorposition + 2]
  8712 000068EE 01D7                <2> 		add edi, edx
  8713 000068F0 31D2                <2> 		xor edx, edx
  8714 000068F2 668B15[5E550000]    <2> 		mov dx, [resolutionx2]
  8715 000068F9 6681F90000          <2> 		cmp cx, 0
  8716 000068FE 740B                <2> 		je noswmsy2
  8717 00006900 01D7                <2> swmsy2:		add edi, edx
  8718 00006902 6649                <2> 		dec cx
  8719 00006904 6681F90000          <2> 		cmp cx, 0
  8720 00006909 75F5                <2> 		jne swmsy2
  8721 0000690B 8B07                <2> noswmsy2:	mov eax, [edi]
  8722 0000690D 8B5F04              <2> 		mov ebx, [edi + 4]
  8723 00006910 8906                <2> 		mov [esi], eax
  8724 00006912 895E04              <2> 		mov [esi + 4], ebx
  8725 00006915 8B4708              <2> 		mov eax, [edi + 8]
  8726 00006918 8B5F0C              <2> 		mov ebx, [edi + 12]
  8727 0000691B 894608              <2> 		mov [esi + 8], eax
  8728 0000691E 895E0C              <2> 		mov [esi + 12], ebx
  8729 00006921 01D7                <2> 		add edi, edx
  8730 00006923 81C610000000        <2> 		add esi, 16
  8731 00006929 81FE[6DB80300]      <2> 		cmp esi, mcolorend
  8732 0000692F 72DA                <2> 		jb noswmsy2
  8733 00006931 C3                  <2> 		ret
  8734                              <2> 		
  8735                              <1> %include "source/gui/icon.asm"
  8736 00006932 0000                <2> iconcolor dw 0
  8737                              <2> 	showicon:	;;icon in si, position in (dx,cx), selected in ax, code in bx
  8738 00006934 A2[FD810000]        <2> 		mov [iconselected], al
  8739 00006939 8025[FD810000]01    <2> 		and byte [iconselected], 1
  8740 00006940 B401                <2> 		mov ah, 1
  8741 00006942 E8DF150000          <2> 		call graphicsadd
  8742                              <2> 	showicon2:
  8743 00006947 8B3D[86540000]      <2> 		mov edi, [physbaseptr]
  8744 0000694D 6601D2              <2> 		add dx, dx
  8745 00006950 663B15[5E550000]    <2> 		cmp dx, [resolutionx2]
  8746 00006957 720C                <2> 		jb screenxgood
  8747 00006959 668B15[5E550000]    <2> 		mov dx, [resolutionx2]
  8748 00006960 6681EA4000          <2> 		sub dx, 64
  8749                              <2> 	screenxgood:
  8750 00006965 6681F90000          <2> 		cmp cx, 0
  8751 0000696A 742B                <2> 		je noscreenygoodchk
  8752 0000696C 663B0D[72540000]    <2> 		cmp cx, [resolutiony]
  8753 00006973 720C                <2> 		jb screenygood
  8754 00006975 668B0D[72540000]    <2> 		mov cx, [resolutiony]
  8755 0000697C 6681E92000          <2> 		sub cx, 32
  8756                              <2> 	screenygood:
  8757 00006981 50                  <2> 		push eax
  8758 00006982 52                  <2> 		push edx
  8759 00006983 31C0                <2> 		xor eax, eax
  8760 00006985 31DB                <2> 		xor ebx, ebx
  8761 00006987 668B1D[5E550000]    <2> 		mov bx, [resolutionx2]
  8762 0000698E 6689C8              <2> 		mov ax, cx
  8763 00006991 F7E3                <2> 		mul ebx
  8764 00006993 01C7                <2> 		add edi, eax
  8765 00006995 5A                  <2> 		pop edx
  8766 00006996 58                  <2> 		pop eax
  8767                              <2> 	noscreenygoodchk:
  8768 00006997 31DB                <2> 		xor ebx, ebx
  8769 00006999 6689D3              <2> 		mov bx, dx
  8770 0000699C 01DF                <2> 		add edi, ebx
  8771 0000699E 6631C9              <2> 		xor cx, cx
  8772 000069A1 668B06              <2> 		mov ax, [esi]
  8773 000069A4 81C602000000        <2> 		add esi, 2
  8774 000069AA 66A3[32690000]      <2> 		mov [iconcolor], ax
  8775                              <2> 	writeicon:
  8776 000069B0 8B06                <2> 		mov eax, [esi]
  8777 000069B2 D1C0                <2> 		rol eax, 1
  8778 000069B4 30C9                <2> 		xor cl, cl
  8779                              <2> 	writeiconline:
  8780 000069B6 B201                <2> 		mov dl, 1
  8781 000069B8 20C2                <2> 		and dl, al
  8782 000069BA 3215[FD810000]      <2> 		xor dl, [iconselected]
  8783 000069C0 668B1D[816B0000]    <2> 		mov bx, [background]
  8784 000069C7 66891F              <2> 		mov [edi], bx
  8785 000069CA 80FA00              <2> 		cmp dl, 0
  8786 000069CD 740A                <2> 		je noiconline
  8787 000069CF 668B15[32690000]    <2> 		mov dx, [iconcolor]
  8788 000069D6 668917              <2> 		mov [edi], dx
  8789                              <2> 	noiconline:
  8790 000069D9 81C702000000        <2> 		add edi, 2
  8791 000069DF D1C0                <2> 		rol eax, 1
  8792 000069E1 FEC1                <2> 		inc cl
  8793 000069E3 80F920              <2> 		cmp cl, 32
  8794 000069E6 72CE                <2> 		jb writeiconline
  8795 000069E8 81C604000000        <2> 		add esi, 4
  8796 000069EE FEC5                <2> 		inc ch
  8797 000069F0 31D2                <2> 		xor edx, edx
  8798 000069F2 668B15[5E550000]    <2> 		mov dx, [resolutionx2]
  8799 000069F9 01D7                <2> 		add edi, edx
  8800 000069FB 81EF40000000        <2> 		sub edi, 64
  8801 00006A01 80FD20              <2> 		cmp ch, 32
  8802 00006A04 72AA                <2> 		jb writeicon
  8803 00006A06 31C0                <2> 		xor eax, eax
  8804 00006A08 C3                  <2> 		ret
  8805                              <1> %include "source/gui/line.asm"
  8806                              <2> drawline:	;from (bx,ax) to (dx,cx), color in si
  8807 00006A09 668935[2B6B0000]    <2> 	mov [.color], si
  8808 00006A10 C605[2D6B0000]00    <2> 	mov byte [.steep], 0
  8809 00006A17 C605[2E6B0000]00    <2> 	mov byte [.yreversed], 0
  8810 00006A1E E907000000          <2> 	jmp .notsteep
  8811                              <2> .steeploop:
  8812 00006A23 C605[2D6B0000]01    <2> 	mov byte [.steep], 1
  8813                              <2> .notsteep:
  8814 00006A2A 31FF                <2> 	xor edi, edi
  8815 00006A2C 31F6                <2> 	xor esi, esi
  8816 00006A2E 6639DA              <2> 	cmp dx, bx
  8817 00006A31 7705                <2> 	ja .noreversex
  8818 00006A33 6687D3              <2> 	xchg dx, bx
  8819 00006A36 6691                <2> 	xchg cx, ax
  8820                              <2> .noreversex:
  8821 00006A38 6689D7              <2> 	mov di, dx
  8822 00006A3B 6629DF              <2> 	sub di, bx
  8823                              <2> 	
  8824 00006A3E 6639C1              <2> 	cmp cx, ax
  8825 00006A41 720B                <2> 	jb .reversey
  8826 00006A43 6689CE              <2> 	mov si, cx
  8827 00006A46 6629C6              <2> 	sub si, ax
  8828 00006A49 E90D000000          <2> 	jmp .normal
  8829                              <2> .reversey:
  8830 00006A4E C605[2E6B0000]02    <2> 	mov byte [.yreversed], 2
  8831 00006A55 6689C6              <2> 	mov si, ax
  8832 00006A58 6629CE              <2> 	sub si, cx	
  8833                              <2> .normal:
  8834 00006A5B 6687CA              <2> 	xchg cx, dx
  8835 00006A5E 6693                <2> 	xchg ax, bx
  8836 00006A60 6639FE              <2> 	cmp si, di
  8837 00006A63 77BE                <2> 	ja .steeploop
  8838 00006A65 6687CA              <2> 	xchg cx, dx
  8839 00006A68 6693                <2> 	xchg ax, bx
  8840                              <2> 	
  8841 00006A6A 6691                <2> 	xchg ax, cx
  8842 00006A6C 6687DA              <2> 	xchg bx, dx
  8843 00006A6F 66893D[316B0000]    <2> 	mov [.xdelta], di
  8844 00006A76 668935[336B0000]    <2> 	mov [.ydelta], si
  8845 00006A7D 668B35[2B6B0000]    <2> 	mov si, [.color]
  8846 00006A84 66891D[2F6B0000]    <2> 	mov [.endline], bx
  8847 00006A8B 6652                <2> 	push dx
  8848 00006A8D 6651                <2> 	push cx
  8849 00006A8F 6687CA              <2> 	xchg cx, dx
  8850 00006A92 803D[2D6B0000]01    <2> 	cmp byte [.steep], 1
  8851 00006A99 7403                <2> 	je .xchg
  8852 00006A9B 6687D1              <2> 	xchg dx, cx
  8853                              <2> .xchg:
  8854 00006A9E E832170000          <2> 	call getpixelmem	;get pointer to pixel in edi from (dx,cx)
  8855 00006AA3 6659                <2> 	pop cx
  8856 00006AA5 665A                <2> 	pop dx
  8857 00006AA7 31C0                <2> 	xor eax, eax
  8858 00006AA9 66A1[316B0000]      <2> 	mov ax, [.xdelta]
  8859 00006AAF 66D1E8              <2> 	shr ax, 1
  8860 00006AB2 8A0D[2D6B0000]      <2> 	mov cl, [.steep]
  8861 00006AB8 0A0D[2E6B0000]      <2> 	or cl, [.yreversed]
  8862 00006ABE 55                  <2> 	push ebp
  8863 00006ABF 668B2D[2F6B0000]    <2> 	mov bp, [.endline]
  8864 00006AC6 6629D5              <2> 	sub bp, dx
  8865 00006AC9 668B15[336B0000]    <2> 	mov dx, [.ydelta]
  8866                              <2> .lp:
  8867 00006AD0 668937              <2> 	mov [edi], si
  8868 00006AD3 6639D0              <2> 	cmp ax, dx
  8869 00006AD6 7332                <2> 	jae .noaddx
  8870 00006AD8 F6C102              <2> 	test cl, 2
  8871 00006ADB 7414                <2> 	jz .nodecy
  8872 00006ADD F6C101              <2> 	test cl, 1
  8873 00006AE0 7509                <2> 	jnz .steepy
  8874 00006AE2 29DF                <2> 	sub edi, ebx
  8875 00006AE4 29DF                <2> 	sub edi, ebx
  8876 00006AE6 E906000000          <2> 	jmp .nodecy
  8877                              <2> .steepy:
  8878 00006AEB 81EF04000000        <2> 	sub edi, 4
  8879                              <2> .nodecy:
  8880 00006AF1 660305[316B0000]    <2> 	add ax, [.xdelta]
  8881 00006AF8 F6C101              <2> 	test cl, 1
  8882 00006AFB 7507                <2> 	jnz .steepx
  8883 00006AFD 01DF                <2> 	add edi, ebx
  8884 00006AFF E906000000          <2> 	jmp .noaddx
  8885                              <2> .steepx:
  8886 00006B04 81C702000000        <2> 	add edi, 2
  8887                              <2> .noaddx:
  8888 00006B0A 6629D0              <2> 	sub ax, dx
  8889 00006B0D 664D                <2> 	dec bp
  8890 00006B0F 81C702000000        <2> 	add edi, 2
  8891 00006B15 F6C101              <2> 	test cl, 1
  8892 00006B18 7408                <2> 	jz .nosteepx
  8893 00006B1A 81EF02000000        <2> 	sub edi, 2
  8894 00006B20 01DF                <2> 	add edi, ebx
  8895                              <2> .nosteepx:
  8896 00006B22 6681FD0000          <2> 	cmp bp, 0
  8897 00006B27 75A7                <2> 	jne .lp
  8898                              <2> .done:
  8899 00006B29 5D                  <2> 	pop ebp
  8900 00006B2A C3                  <2> 	ret
  8901                              <2> 	
  8902 00006B2B 0000                <2> .color dw 0
  8903 00006B2D 00                  <2> .steep db 0
  8904 00006B2E 00                  <2> .yreversed db 0
  8905 00006B2F 0000                <2> .endline dw 0
  8906 00006B31 0000                <2> .xdelta dw 0
  8907 00006B33 0000                <2> .ydelta dw 0
  8908                              <1> %include "source/gui/refresh.asm"
  8909                              <2> guiclear:
  8910 00006B35 8B3D[86540000]      <2> 	mov edi, [physbaseptr]
  8911 00006B3B 668B15[70540000]    <2> 	mov dx, [resolutionx]
  8912 00006B42 668B0D[72540000]    <2> 	mov cx, [resolutiony]
  8913 00006B49 668B1D[816B0000]    <2> 	mov bx, [background]
  8914 00006B50 66891D[836B0000]    <2> 	mov [background + 2], bx
  8915                              <2> %ifdef gui.background
  8916                              <2> 	cmp dword [backgroundimage], 0
  8917                              <2> 	je guiclear.noback
  8918                              <2> 		mov esi, [backgroundimage]
  8919                              <2> 	.lp:
  8920                              <2> 		;movdqa xmm0, [esi]	;the next 4 lines are for SSE
  8921                              <2> 		;movdqa [edi], xmm0
  8922                              <2> 		;add esi, 16
  8923                              <2> 		;add edi, 16
  8924                              <2> 		;sub dx, 8
  8925                              <2> 		mov eax, [esi]
  8926                              <2> 		mov [edi], eax
  8927                              <2> 		add esi, 4
  8928                              <2> 		add edi, 4
  8929                              <2> 		sub dx, 2
  8930                              <2> 		cmp dx, 0
  8931                              <2> 		ja .lp
  8932                              <2> 		dec cx
  8933                              <2> 		mov dx, [resolutionx]
  8934                              <2> 		cmp cx, 0
  8935                              <2> 		ja .lp
  8936                              <2> 		ret
  8937                              <2> 	backgroundimage dd 0
  8938                              <2> %endif
  8939                              <2> guiclear.noback:
  8940 00006B57 A1[816B0000]        <2> 	mov eax, [background]
  8941                              <2> guiclearloop:
  8942 00006B5C 8907                <2> 	mov [edi], eax
  8943 00006B5E 81C704000000        <2> 	add edi, 4
  8944 00006B64 6681EA0200          <2> 	sub dx, 2
  8945 00006B69 6681FA0000          <2> 	cmp dx, 0
  8946 00006B6E 77EC                <2> 	ja guiclearloop
  8947 00006B70 6649                <2> 	dec cx
  8948 00006B72 668B15[70540000]    <2> 	mov dx, [resolutionx]
  8949 00006B79 6681F90000          <2> 	cmp cx, 0
  8950 00006B7E 77DC                <2> 	ja guiclearloop
  8951 00006B80 C3                  <2> 	ret
  8952                              <2> 
  8953 00006B81 CF7B<rept>          <2> background times 2 dw 0111101111001111b
  8954                              <2> 	.original equ 0111101111001111b
  8955                              <2> 
  8956                              <2> reloadallgraphics:
  8957 00006B85 BF[6DB50300]        <2> 		mov edi, graphicstable
  8958                              <2> reloadgraphicsloop:
  8959 00006B8A 8B7702              <2> 		mov esi, [edi + 2]
  8960 00006B8D 668B5706            <2> 		mov dx, [edi + 6]
  8961 00006B91 668B4F08            <2> 		mov cx, [edi + 8]
  8962 00006B95 668B07              <2> 		mov ax, [edi]
  8963 00006B98 668B5F0A            <2> 		mov bx, [edi + 10]
  8964 00006B9C 893D[127F0000]      <2> 		mov [grpctblpos], edi
  8965 00006BA2 3B3D[A9790000]      <2> 		cmp edi, [dragging]
  8966 00006BA8 741E                <2> 		je loadedgraphic
  8967 00006BAA 663D0100            <2> 		cmp ax, 1
  8968 00006BAE 0F8436000000        <2> 		je near icongraphic
  8969 00006BB4 663D0200            <2> 		cmp ax, 2
  8970 00006BB8 0F843C000000        <2> 		je near stringgraphic
  8971 00006BBE 663D0300            <2> 		cmp ax, 3
  8972 00006BC2 0F8416000000        <2> 		je near windowgraphic
  8973 00006BC8 8B3D[127F0000]      <2> loadedgraphic:  mov edi, [grpctblpos]
  8974 00006BCE 81C710000000        <2> 		add edi, 16
  8975 00006BD4 81FF[6DB70300]      <2> 		cmp edi, graphicstableend
  8976 00006BDA 732E                <2> 		jae donereloadgraphics
  8977 00006BDC EBAC                <2> 		jmp reloadgraphicsloop
  8978                              <2> windowgraphic:
  8979 00006BDE E827090000          <2> 		call showwindow2
  8980 00006BE3 E821B2FFFF          <2> 		call cleardouble
  8981 00006BE8 EBDE                <2> 		jmp loadedgraphic
  8982 00006BEA 80E301              <2> icongraphic:	and bl, 1
  8983 00006BED 881D[FD810000]      <2> 		mov [iconselected], bl
  8984 00006BF3 E84FFDFFFF          <2> 		call showicon2
  8985 00006BF8 EBCE                <2> 		jmp loadedgraphic
  8986 00006BFA 80E301              <2> stringgraphic:  and bl, 1
  8987 00006BFD 881D[A5790000]      <2> 		mov [mouseselecton], bl
  8988 00006C03 E8CE050000          <2> 		call showstring2
  8989 00006C08 EBBE                <2> 		jmp loadedgraphic
  8990                              <2> donereloadgraphics:
  8991 00006C0A 8B3D[A9790000]      <2> 		mov edi, [dragging]
  8992 00006C10 81FF[6DB50300]      <2> 		cmp edi, graphicstable
  8993 00006C16 7226                <2> 		jb notcorrectdrag
  8994 00006C18 668B07              <2> 		mov ax, [edi]
  8995 00006C1B 8B7702              <2> 		mov esi, [edi + 2]
  8996 00006C1E 668B5706            <2> 		mov dx, [edi + 6]
  8997 00006C22 668B4F08            <2> 		mov cx, [edi + 8]
  8998 00006C26 668B5F0A            <2> 		mov bx, [edi + 10]
  8999 00006C2A 663D0100            <2> 		cmp ax, 1
  9000 00006C2E 750F                <2> 		jne noticondragging
  9001 00006C30 80E301              <2> 		and bl, 1
  9002 00006C33 881D[FD810000]      <2> 		mov [iconselected], bl
  9003 00006C39 E809FDFFFF          <2> 		call showicon2
  9004                              <2> notcorrectdrag:
  9005 00006C3E C3                  <2> 		ret
  9006                              <2> 
  9007                              <2> 	noticondragging:
  9008 00006C3F 663D0200            <2> 		cmp ax, 2
  9009 00006C43 75F9                <2> 		jne notcorrectdrag
  9010 00006C45 80E301              <2> 		and bl, 1
  9011 00006C48 881D[A5790000]      <2> 		mov [mouseselecton], bl
  9012 00006C4E E883050000          <2> 		call showstring2
  9013 00006C53 EBE9                <2> 		jmp notcorrectdrag
  9014                              <1> %include "source/gui/square.asm"
  9015                              <2> drawsquare:	;from (bx,ax) to (dx,cx), color in si
  9016 00006C55 6639D3              <2> 	cmp bx, dx
  9017 00006C58 7303                <2> 	jae .noxchgx
  9018 00006C5A 6687DA              <2> 	xchg bx, dx
  9019                              <2> .noxchgx:
  9020 00006C5D 6639C8              <2> 	cmp ax, cx
  9021 00006C60 7302                <2> 	jae .noxchgy
  9022 00006C62 6691                <2> 	xchg ax, cx
  9023                              <2> .noxchgy:
  9024 00006C64 6650                <2> 	push ax
  9025 00006C66 6653                <2> 	push bx
  9026 00006C68 6652                <2> 	push dx
  9027 00006C6A E866150000          <2> 	call getpixelmem	;get pointer to pixel in edi from (dx,cx)
  9028 00006C6F 31D2                <2> 	xor edx, edx
  9029 00006C71 665A                <2> 	pop dx
  9030 00006C73 31DB                <2> 	xor ebx, ebx
  9031 00006C75 665B                <2> 	pop bx
  9032 00006C77 6658                <2> 	pop ax
  9033                              <2> .lp0:
  9034 00006C79 6652                <2> 	push dx
  9035                              <2> .lp:
  9036 00006C7B 668937              <2> 	mov [edi], si
  9037 00006C7E 81C702000000        <2> 	add edi, 2
  9038 00006C84 6642                <2> 	inc dx
  9039 00006C86 6639DA              <2> 	cmp dx, bx
  9040 00006C89 76F0                <2> 	jbe .lp
  9041 00006C8B 665A                <2> 	pop dx
  9042 00006C8D 81EF02000000        <2> 	sub edi, 2
  9043 00006C93 29DF                <2> 	sub edi, ebx
  9044 00006C95 29DF                <2> 	sub edi, ebx
  9045 00006C97 01D7                <2> 	add edi, edx
  9046 00006C99 01D7                <2> 	add edi, edx
  9047 00006C9B 033D[5E550000]      <2> 	add edi, [resolutionx2]
  9048 00006CA1 6641                <2> 	inc cx
  9049 00006CA3 6639C1              <2> 	cmp cx, ax
  9050 00006CA6 7203                <2> 	jb .lp2
  9051 00006CA8 74CF                <2> 	je .lp0
  9052 00006CAA C3                  <2> 	ret
  9053                              <2> .lp2:
  9054 00006CAB 57                  <2> 	push edi
  9055 00006CAC 668937              <2> 	mov [edi], si
  9056 00006CAF 29D7                <2> 	sub edi, edx
  9057 00006CB1 29D7                <2> 	sub edi, edx
  9058 00006CB3 01DF                <2> 	add edi, ebx
  9059 00006CB5 01DF                <2> 	add edi, ebx
  9060 00006CB7 668937              <2> 	mov [edi], si
  9061 00006CBA 5F                  <2> 	pop edi
  9062 00006CBB 033D[5E550000]      <2> 	add edi, [resolutionx2]
  9063 00006CC1 6641                <2> 	inc cx
  9064 00006CC3 6639C1              <2> 	cmp cx, ax
  9065 00006CC6 72E3                <2> 	jb .lp2
  9066 00006CC8 EBAF                <2> 	jmp .lp0
  9067                              <2> 
  9068                              <2> fillsquare:	;from (bx,ax) to (dx,cx), color in si
  9069 00006CCA 6639D3              <2> 	cmp bx, dx
  9070 00006CCD 7303                <2> 	jae .noxchgx
  9071 00006CCF 6687DA              <2> 	xchg bx, dx
  9072                              <2> .noxchgx:
  9073 00006CD2 6639C8              <2> 	cmp ax, cx
  9074 00006CD5 7302                <2> 	jae .noxchgy
  9075 00006CD7 6691                <2> 	xchg ax, cx
  9076                              <2> .noxchgy:
  9077 00006CD9 6650                <2> 	push ax
  9078 00006CDB 6653                <2> 	push bx
  9079 00006CDD 6652                <2> 	push dx
  9080 00006CDF E8F1140000          <2> 	call getpixelmem	;get pointer to pixel in edi from (dx,cx)
  9081 00006CE4 31D2                <2> 	xor edx, edx
  9082 00006CE6 665A                <2> 	pop dx
  9083 00006CE8 31DB                <2> 	xor ebx, ebx
  9084 00006CEA 665B                <2> 	pop bx
  9085 00006CEC 6658                <2> 	pop ax
  9086                              <2> .lp2:
  9087 00006CEE 6652                <2> 	push dx
  9088                              <2> .lp:
  9089 00006CF0 668937              <2> 	mov [edi], si
  9090 00006CF3 81C702000000        <2> 	add edi, 2
  9091 00006CF9 6642                <2> 	inc dx
  9092 00006CFB 6639DA              <2> 	cmp dx, bx
  9093 00006CFE 76F0                <2> 	jbe .lp
  9094 00006D00 665A                <2> 	pop dx
  9095 00006D02 81EF02000000        <2> 	sub edi, 2
  9096 00006D08 29DF                <2> 	sub edi, ebx
  9097 00006D0A 29DF                <2> 	sub edi, ebx
  9098 00006D0C 01D7                <2> 	add edi, edx
  9099 00006D0E 01D7                <2> 	add edi, edx
  9100 00006D10 033D[5E550000]      <2> 	add edi, [resolutionx2]
  9101 00006D16 6641                <2> 	inc cx
  9102 00006D18 6639C1              <2> 	cmp cx, ax
  9103 00006D1B 76D1                <2> 	jbe .lp2
  9104 00006D1D C3                  <2> 	ret
  9105                              <1> %include "source/gui/startup.asm"
  9106                              <2> guisetup:
  9107                              <2> 	%ifdef gui.background
  9108                              <2> 	xor ebx, ebx
  9109                              <2> 	mov [backgroundimage], ebx
  9110                              <2> 	%endif
  9111 00006D1E E812FEFFFF          <2> 	call guiclear
  9112 00006D23 C605[64820000]01    <2> 	mov byte [guion], 1
  9113 00006D2A C605[A5790000]00    <2> 	mov byte [mouseselecton], 0
  9114 00006D31 31C0                <2> 	xor eax, eax
  9115 00006D33 31DB                <2> 	xor ebx, ebx
  9116 00006D35 31C9                <2> 	xor ecx, ecx
  9117 00006D37 31D2                <2> 	xor edx, edx
  9118                              <2> 	
  9119 00006D39 BE[FB6E0000]        <2> 	mov esi, pacmsg
  9120 00006D3E 30E4                <2> 	xor ah, ah
  9121 00006D40 B010                <2> 	mov al, 00010000b
  9122 00006D42 31DB                <2> 	xor ebx, ebx
  9123 00006D44 66B99000            <2> 	mov cx, 144
  9124 00006D48 66BA0400            <2> 	mov dx, 4
  9125 00006D4C E872040000          <2> 	call showstring
  9126                              <2> 	
  9127 00006D51 BE[396F0000]        <2> 	mov esi, interneticon
  9128 00006D56 30E4                <2> 	xor ah, ah
  9129 00006D58 B010                <2> 	mov al, 00010000b
  9130 00006D5A BB[246E0000]        <2> 	mov ebx, noie
  9131 00006D5F 66B91800            <2> 	mov cx, 24
  9132 00006D63 66BA0400            <2> 	mov dx, 4
  9133 00006D67 E8C8FBFFFF          <2> 	call showicon
  9134                              <2> 	
  9135 00006D6C BE[BB6F0000]        <2> 	mov esi, wordicon
  9136 00006D71 30E4                <2> 	xor ah, ah
  9137 00006D73 B010                <2> 	mov al, 00010000b
  9138 00006D75 31DB                <2> 	xor ebx, ebx
  9139 00006D77 66B91800            <2> 	mov cx, 24
  9140 00006D7B 66BA3000            <2> 	mov dx, 48
  9141 00006D7F E8B0FBFFFF          <2> 	call showicon
  9142                              <2> 	
  9143 00006D84 BE[3D700000]        <2> 	mov esi, pacmanpellet
  9144 00006D89 30E4                <2> 	xor ah, ah
  9145 00006D8B B010                <2> 	mov al, 00010000b
  9146 00006D8D 31DB                <2> 	xor ebx, ebx
  9147 00006D8F 66B94000            <2> 	mov cx, 64
  9148 00006D93 66BA0400            <2> 	mov dx, 4
  9149 00006D97 E898FBFFFF          <2> 	call showicon
  9150                              <2> 	
  9151 00006D9C BE[41710000]        <2> 	mov esi, pacman
  9152 00006DA1 30E4                <2> 	xor ah, ah
  9153 00006DA3 B010                <2> 	mov al, 00010000b
  9154 00006DA5 BB[0D6E0000]        <2> 	mov ebx, pacmannomnom
  9155 00006DAA 66B94000            <2> 	mov cx, 64
  9156 00006DAE 66BA3000            <2> 	mov dx, 48
  9157 00006DB2 E87DFBFFFF          <2> 	call showicon
  9158                              <2> 	
  9159 00006DB7 BE[BF700000]        <2> 	mov esi, ghostie
  9160 00006DBC 30E4                <2> 	xor ah, ah
  9161 00006DBE B010                <2> 	mov al, 00010000b
  9162 00006DC0 BB[F66D0000]        <2> 	mov ebx, boo
  9163 00006DC5 66B96C00            <2> 	mov cx, 108
  9164 00006DC9 66BA0400            <2> 	mov dx, 4
  9165 00006DCD E862FBFFFF          <2> 	call showicon
  9166                              <2> 	
  9167 00006DD2 BE[DD6E0000]        <2> 	mov esi, start
  9168 00006DD7 668B0D[72540000]    <2> 	mov cx, [resolutiony]
  9169 00006DDE 6681E91000          <2> 	sub cx, 16
  9170 00006DE3 66BA0200            <2> 	mov dx, 2
  9171 00006DE7 30E4                <2> 	xor ah, ah
  9172 00006DE9 B010                <2> 	mov al, 00010000b
  9173 00006DEB BB[996E0000]        <2> 	mov ebx, winblows
  9174 00006DF0 E8CE030000          <2> 	call showstring
  9175                              <2> 
  9176                              <2> %ifdef gui.time	
  9177                              <2> 	call guitime	;load time into timeshow/dateshow and show it
  9178                              <2> %endif
  9179 00006DF5 C3                  <2> 	ret
  9180                              <2> 
  9181                              <2> 	boo:
  9182 00006DF6 BE[F66E0000]        <2> 		mov esi, boomsg
  9183 00006DFB 66BA6400            <2> 		mov dx, 100
  9184 00006DFF 66B94001            <2> 		mov cx, 320
  9185 00006E03 31DB                <2> 		xor ebx, ebx
  9186 00006E05 6631C0              <2> 		xor ax, ax
  9187 00006E08 E9B6030000          <2> 		jmp showstring
  9188                              <2> 
  9189                              <2> 	pacmannomnom:
  9190 00006E0D BE[146F0000]        <2> 		mov esi, pacnom
  9191 00006E12 66BA8200            <2> 		mov dx, 130
  9192 00006E16 66B93C00            <2> 		mov cx, 60
  9193 00006E1A 31DB                <2> 		xor ebx, ebx
  9194 00006E1C 6631C0              <2> 		xor ax, ax
  9195 00006E1F E99F030000          <2> 		jmp showstring	
  9196                              <2> 	
  9197                              <2> 	noie:
  9198 00006E24 66C705[236F0000]80- <2> 		mov word [termwindow], 640
  9199 00006E2C 02                  <2>
  9200 00006E2D 66C705[256F0000]E0- <2> 		mov word [termwindow + 2], 480	;the previous lines of code make a large terminal window that is 4 characters smaller than the screen
  9201 00006E35 01                  <2>
  9202 00006E36 BE[236F0000]        <2> 		mov esi, termwindow
  9203 00006E3B 66BA1000            <2> 		mov dx, 16
  9204 00006E3F 66B91000            <2> 		mov cx, 16
  9205 00006E43 31DB                <2> 		xor ebx, ebx
  9206 00006E45 6631C0              <2> 		xor ax, ax
  9207 00006E48 E803060000          <2> 		call showwindow
  9208 00006E4D E996BCFFFF          <2> 		jmp os
  9209                              <2> 
  9210                              <2> 	gotomenuboot:
  9211 00006E52 31D2                <2> 		xor edx, edx
  9212 00006E54 31C9                <2> 		xor ecx, ecx
  9213 00006E56 668B15[70540000]    <2> 		mov dx, [resolutionx]
  9214 00006E5D 668B0D[72540000]    <2> 		mov cx, [resolutiony]
  9215 00006E64 66C1E904            <2> 		shr cx, 4
  9216 00006E68 6681E90100          <2> 		sub cx, 1
  9217 00006E6D 66C1E104            <2> 		shl cx, 4
  9218 00006E71 668915[236F0000]    <2> 		mov [termwindow], dx
  9219 00006E78 66890D[256F0000]    <2> 		mov [termwindow + 2], cx	;the previous lines of code make a large terminal window that is fullscreen
  9220 00006E7F BE[236F0000]        <2> 		mov esi, termwindow
  9221 00006E84 6631D2              <2> 		xor dx, dx
  9222 00006E87 6631C9              <2> 		xor cx, cx
  9223 00006E8A 31DB                <2> 		xor ebx, ebx
  9224 00006E8C 6631C0              <2> 		xor ax, ax
  9225 00006E8F E8BC050000          <2> 		call showwindow
  9226 00006E94 E94FBCFFFF          <2> 		jmp os
  9227                              <2> 
  9228                              <2> 	winblows:
  9229 00006E99 BE[EC6E0000]        <2> 		mov esi, turnoffmsg
  9230 00006E9E BB[C44F0000]        <2> 		mov ebx, turnoff
  9231 00006EA3 668B0D[72540000]    <2> 		mov cx, [resolutiony]
  9232 00006EAA 6681E92000          <2> 		sub cx, 32
  9233 00006EAF 6631D2              <2> 		xor dx, dx
  9234 00006EB2 30E4                <2> 		xor ah, ah
  9235 00006EB4 B010                <2> 		mov al, 00010000b
  9236 00006EB6 E808030000          <2> 		call showstring
  9237 00006EBB BE[E36E0000]        <2> 		mov esi, gotomenu
  9238 00006EC0 668B0D[72540000]    <2> 		mov cx, [resolutiony]
  9239 00006EC7 6681E93000          <2> 		sub cx, 48
  9240 00006ECC 6631D2              <2> 		xor dx, dx
  9241 00006ECF 30E4                <2> 		xor ah, ah
  9242 00006ED1 B010                <2> 		mov al, 00010000b
  9243 00006ED3 BB[526E0000]        <2> 		mov ebx, gotomenuboot
  9244 00006ED8 E9E6020000          <2> 		jmp showstring
  9245                              <2> 		
  9246                              <2> 
  9247 00006EDD 737461727400        <2> 	start	db "start",0
  9248 00006EE3 536F6C6C65724F5300  <2> 	gotomenu db "SollerOS",0
  9249 00006EEC 506F776572204F6666- <2> 	turnoffmsg db "Power Off",0
  9250 00006EF5 00                  <2>
  9251 00006EF6 426F6F2100          <2> 	boomsg db "Boo!",0
  9252 00006EFB 5061636D616E207761- <2> 	pacmsg	db "Pacman was easy to draw.",0
  9253 00006F04 73206561737920746F- <2>
  9254 00006F0D 20647261772E00      <2>
  9255 00006F14 4F6D206E6F6D206E6F- <2> 	pacnom  db "Om nom nom nom",0
  9256 00006F1D 6D206E6F6D00        <2>
  9257                              <2> 
  9258 00006F23 20035802            <2> 	termwindow:	dw 800,600	;window size
  9259 00006F27 FFFF0000            <2> 				dw 0xFFFF,0	;colors(FG,BG)
  9260 00006F2B [6EB80300]-         <2> 				dd videobuf,videobuf2 ;location of buffers
  9261 00006F2F [B68D0400]          <2>
  9262 00006F33 534855536800        <2> 	termmsg:	db "SHUSh",0	;;window title
  9263                              <2> 	
  9264 00006F33 <incbin>            <2> interneticon: 	incbin 'source/gui/icons/internet'
  9265 00006F33 <incbin>            <2> wordicon: 	incbin 'source/gui/icons/word'
  9266 00006F33 <incbin>            <2> pacmanpellet: incbin 'source/gui/icons/pellet'
  9267 00006F33 <incbin>            <2> ghostie	incbin 'source/gui/icons/ghostie'
  9268 00006F33 <incbin>            <2> pacman	incbin 'source/gui/icons/pacman'
  9269                              <2> 
  9270                              <2> %ifdef gui.time
  9271                              <2> guitime:
  9272                              <2> 		call time	;get rtc in timeshow & dateshow
  9273                              <2> 		xor ebx, ebx
  9274                              <2> 		mov dx, [resolutionx2]
  9275                              <2> 		xor cx, cx
  9276                              <2> 		sub dx, 304
  9277                              <2> 		mov esi, dateshow
  9278                              <2> 		mov al, 00010001b
  9279                              <2> 		call showstring
  9280                              <2> 		mov esi, timeshow
  9281                              <2> 		xor ebx, ebx
  9282                              <2> 		mov al, 00010001b
  9283                              <2> 		call showstring
  9284                              <2> 		ret
  9285                              <2> %endif
  9286                              <1> %include "source/gui/text.asm"
  9287                              <2> 	showstring:
  9288 000071C3 A2[A5790000]        <2> 		mov [mouseselecton], al
  9289 000071C8 8025[A5790000]01    <2> 		and byte [mouseselecton], 1
  9290 000071CF B402                <2> 		mov ah, 2
  9291 000071D1 E8500D0000          <2> 		call graphicsadd
  9292                              <2> 	showstring2:	;location in (dx,cx), color in [colorfont2] and [background]
  9293 000071D6 30E4                <2> 		xor ah, ah
  9294 000071D8 8A06                <2> 		mov al, [esi]
  9295 000071DA 3CC0                <2> 		cmp al, 0xC0
  9296 000071DC 7234                <2> 		jb .doneutf
  9297 000071DE 3CE0                <2> 		cmp al, 0xE0
  9298 000071E0 721D                <2> 		jb .two
  9299 000071E2 46                  <2> 		inc esi
  9300 000071E3 668B1E              <2> 		mov bx, [esi]
  9301 000071E6 46                  <2> 		inc esi
  9302 000071E7 C0E004              <2> 		shl al, 4
  9303 000071EA 66C1E302            <2> 		shl bx, 2
  9304 000071EE C0EF02              <2> 		shr bh, 2
  9305 000071F1 66C1EB02            <2> 		shr bx, 2
  9306 000071F5 08C7                <2> 		or bh, al
  9307 000071F7 6689D8              <2> 		mov ax, bx
  9308 000071FA E913000000          <2> 		jmp .doneutf
  9309                              <2> 	.two:
  9310 000071FF 8A3E                <2> 		mov bh, [esi]
  9311 00007201 46                  <2> 		inc esi
  9312 00007202 8A1E                <2> 		mov bl, [esi]
  9313 00007204 66C1E302            <2> 		shl bx, 2
  9314 00007208 C0EF02              <2> 		shr bh, 2
  9315 0000720B 66C1EB02            <2> 		shr bx, 2
  9316 0000720F 6689D8              <2> 		mov ax, bx
  9317                              <2> 	.doneutf:
  9318 00007212 3C00                <2> 		cmp al, 0
  9319 00007214 7420                <2> 		je doneshowstring
  9320 00007216 46                  <2> 		inc esi
  9321 00007217 3CFF                <2> 		cmp al, 255
  9322 00007219 74BB                <2> 		je showstring2
  9323 0000721B 56                  <2> 		push esi
  9324 0000721C 668B1D[3E720000]    <2> 		mov bx, [colorfont2]
  9325 00007223 E827000000          <2> 		call showfontvesa
  9326 00007228 663D0A00            <2> 		cmp ax, 10
  9327 0000722C 7405                <2> 		je noproceedshst
  9328 0000722E 6681C20800          <2> 		add dx, 8
  9329                              <2> 	noproceedshst:
  9330 00007233 5E                  <2> 		pop esi
  9331 00007234 EBA0                <2> 		jmp showstring2
  9332                              <2> 	doneshowstring:
  9333 00007236 C605[A5790000]00    <2> 		mov byte [mouseselecton], 0
  9334 0000723D C3                  <2> 		ret
  9335                              <2> 
  9336 0000723E FFFF                <2> colorfont2 dw 0xFFFF
  9337 00007240 00                  <2> colorcache db 0
  9338                              <2> 
  9339 00007241 02                  <2> resolutionbytes db 2
  9340 00007242 0000                <2> posxvesa dw 0
  9341 00007244 0000                <2> posyvesa dw 0
  9342 00007246 FFFF                <2> colorfont dw 0xFFFF
  9343                              <2> savefontvesa:		;same rules as showfontvesa
  9344 00007248 C605[A4790000]01    <2> 	mov byte [savefonton], 1
  9345                              <2> showfontvesa:		;position in (dx,cx), color in bx, char in ax
  9346 0000724F 663DFF00            <2> 	cmp ax, 255
  9347 00007253 7501                <2> 	jne nostopshowfont
  9348 00007255 C3                  <2> 	ret
  9349                              <2> nostopshowfont:
  9350 00007256 55                  <2> 	push ebp
  9351 00007257 66890D[44720000]    <2> 	mov [posyvesa], cx
  9352 0000725E 663D0A00            <2> 	cmp ax, 10
  9353 00007262 0F8424000000        <2> 	je near goodvesafontx
  9354 00007268 31C9                <2> 	xor ecx, ecx
  9355 0000726A 668B0D[5E550000]    <2> 	mov cx, [resolutionx2]
  9356 00007271 6639CA              <2> 	cmp dx, cx
  9357 00007274 7616                <2> 	jbe goodvesafontx
  9358 00007276 6631D2              <2> 	xor dx, dx
  9359 00007279 668B0D[44720000]    <2> 	mov cx, [posyvesa]
  9360 00007280 6681C11000          <2> 	add cx, 16
  9361 00007285 66890D[44720000]    <2> 	mov [posyvesa], cx
  9362                              <2> goodvesafontx:
  9363 0000728C 668B0D[44720000]    <2> 	mov cx, [posyvesa]
  9364 00007293 668915[42720000]    <2> 	mov [posxvesa], dx
  9365 0000729A 8B3D[86540000]      <2> 	mov edi, [physbaseptr]
  9366 000072A0 66891D[46720000]    <2> 	mov [colorfont], bx
  9367 000072A7 668B2D[46720000]    <2> 	mov bp, [colorfont]
  9368 000072AE 31DB                <2> 	xor ebx, ebx
  9369 000072B0 6689C3              <2> 	mov bx, ax
  9370 000072B3 31C0                <2> 	xor eax, eax
  9371 000072B5 6689D8              <2> 	mov ax, bx
  9372 000072B8 6689D3              <2> 	mov bx, dx
  9373 000072BB 89DA                <2> 	mov edx, ebx
  9374 000072BD 31DB                <2> 	xor ebx, ebx
  9375 000072BF 6681F90000          <2> 	cmp cx, 0
  9376 000072C4 7414                <2> 	je vesaposloopdn
  9377 000072C6 668B1D[5E550000]    <2> 	mov bx, [resolutionx2]
  9378                              <2> vesaposloop:
  9379 000072CD 52                  <2> 	push edx
  9380 000072CE 50                  <2> 	push eax
  9381 000072CF 31C0                <2> 	xor eax, eax
  9382 000072D1 6689C8              <2> 	mov ax, cx
  9383 000072D4 F7E3                <2> 	mul ebx
  9384 000072D6 01C7                <2> 	add edi, eax
  9385 000072D8 58                  <2> 	pop eax
  9386 000072D9 5A                  <2> 	pop edx
  9387                              <2> vesaposloopdn:
  9388 000072DA 01D7                <2> 	add edi, edx
  9389 000072DC BE[AE840000]        <2> 	mov esi, fonts
  9390                              <2> findfontvesa:
  9391 000072E1 663D0A00            <2> 	cmp ax, 10
  9392 000072E5 0F84EB000000        <2> 	je near nwlinevesa
  9393 000072EB C1E004              <2> 	shl eax, 4
  9394 000072EE 01C6                <2> 	add esi, eax
  9395 000072F0 C1E804              <2> 	shr eax, 4
  9396 000072F3 81FE[AE840300]      <2> 	cmp esi, fontend
  9397 000072F9 0F83AB000000        <2> 	jae near donefontvesa
  9398 000072FF 4E                  <2> 	dec esi
  9399                              <2> foundfontvesa:
  9400 00007300 46                  <2> 	inc esi
  9401 00007301 803D[A4790000]01    <2> 	cmp byte [savefonton], 1
  9402 00007308 0F84E7000000        <2> 	je near vesafontsaver
  9403 0000730E 30C9                <2> 	xor cl, cl
  9404 00007310 8A06                <2> 	mov al, [esi]
  9405 00007312 668B15[5E550000]    <2> 	mov dx, [resolutionx2]
  9406 00007319 662B15[42720000]    <2> 	sub dx, [posxvesa]
  9407 00007320 6681FA1000          <2> 	cmp dx, 16
  9408 00007325 7708                <2> 	ja paintfontvesa
  9409 00007327 D0EA                <2> 	shr dl, 1
  9410 00007329 8815[D5730000]      <2> 	mov [charwidth], dl
  9411                              <2> paintfontvesa:
  9412 0000732F B201                <2> 	mov dl, 1
  9413 00007331 20C2                <2> 	and dl, al
  9414 00007333 803D[A3790000]01    <2> 	cmp byte [showcursorfonton], 1
  9415 0000733A 0F842E000000        <2> 	je near nodelpaintedfont
  9416 00007340 803D[A3790000]02    <2> 	cmp byte [showcursorfonton], 2
  9417 00007347 0F8511000000        <2> 	jne near noswitchcursorfonton
  9418 0000734D 80FA00              <2> 	cmp dl, 0
  9419 00007350 0F8420000000        <2> 	je near nopixelset
  9420 00007356 66892F              <2> 	mov [edi], bp
  9421 00007359 E918000000          <2> 	jmp nopixelset
  9422                              <2> noswitchcursorfonton:
  9423 0000735E 3215[A5790000]      <2> 	xor dl, [mouseselecton]
  9424 00007364 668B1D[816B0000]    <2> 	mov bx, [background]
  9425 0000736B 66891F              <2> 	mov [edi], bx
  9426                              <2> nodelpaintedfont:
  9427 0000736E 80FA00              <2> 	cmp dl, 0
  9428 00007371 7403                <2> 	je nopixelset
  9429 00007373 66892F              <2> 	mov [edi], bp
  9430                              <2> nopixelset:
  9431 00007376 81C702000000        <2> 	add edi, 2
  9432 0000737C D0C0                <2> 	rol al, 1
  9433 0000737E FEC1                <2> 	inc cl
  9434 00007380 3A0D[D5730000]      <2> 	cmp cl, [charwidth]
  9435 00007386 72A7                <2> 	jb paintfontvesa
  9436 00007388 FEC5                <2> 	inc ch
  9437 0000738A 31D2                <2> 	xor edx, edx
  9438 0000738C 668B15[5E550000]    <2> 	mov dx, [resolutionx2]
  9439 00007393 01D7                <2> 	add edi, edx
  9440 00007395 31D2                <2> 	xor edx, edx
  9441 00007397 8A15[D5730000]      <2> 	mov dl, [charwidth]
  9442 0000739D 00D2                <2> 	add dl, dl
  9443 0000739F 29D7                <2> 	sub edi, edx
  9444 000073A1 80FD10              <2> 	cmp ch, 16
  9445 000073A4 0F8256FFFFFF        <2> 	jb foundfontvesa
  9446                              <2> donefontvesa:
  9447 000073AA C605[D5730000]08    <2> 	mov byte [charwidth], 8
  9448 000073B1 668B15[42720000]    <2> 	mov dx, [posxvesa]
  9449 000073B8 8A1D[D5730000]      <2> 	mov bl, [charwidth]
  9450 000073BE 30FF                <2> 	xor bh, bh
  9451 000073C0 6601DA              <2> 	add dx, bx
  9452 000073C3 6689EB              <2> 	mov bx, bp
  9453 000073C6 668B0D[44720000]    <2> 	mov cx, [posyvesa]
  9454 000073CD 883D[A4790000]      <2> 	mov [savefonton], bh
  9455 000073D3 5D                  <2> 	pop ebp
  9456 000073D4 C3                  <2> 	ret
  9457 000073D5 08                  <2> charwidth db 8
  9458                              <2> nwlinevesa:
  9459 000073D6 6631D2              <2> 	xor dx, dx
  9460 000073D9 668915[42720000]    <2> 	mov [posxvesa], dx
  9461 000073E0 668B0D[44720000]    <2> 	mov cx, [posyvesa]
  9462 000073E7 6681C11000          <2> 	add cx, 16
  9463 000073EC 66890D[44720000]    <2> 	mov [posyvesa], cx
  9464 000073F3 EBB5                <2> 	jmp donefontvesa
  9465                              <2> vesafontsaver:
  9466 000073F5 30C0                <2> 	xor al, al
  9467 000073F7 30C9                <2> 	xor cl, cl
  9468                              <2> vesafontsaver2:
  9469 000073F9 66392F              <2> 	cmp [edi], bp
  9470 000073FC 742C                <2> 	je colorfontmatch
  9471                              <2> donecolormatch:
  9472 000073FE 81C702000000        <2> 	add edi, 2
  9473 00007404 D0C0                <2> 	rol al, 1
  9474 00007406 FEC1                <2> 	inc cl
  9475 00007408 80F908              <2> 	cmp cl, 8
  9476 0000740B 72EC                <2> 	jb vesafontsaver2
  9477 0000740D 8806                <2> 	mov [esi], al
  9478 0000740F 46                  <2> 	inc esi
  9479 00007410 FEC5                <2> 	inc ch
  9480 00007412 31D2                <2> 	xor edx, edx
  9481 00007414 668B15[5E550000]    <2> 	mov dx, [resolutionx2]
  9482 0000741B 01D7                <2> 	add edi, edx
  9483 0000741D 81EF10000000        <2> 	sub edi, 16
  9484 00007423 80FD10              <2> 	cmp ch, 16
  9485 00007426 72CD                <2> 	jb vesafontsaver
  9486 00007428 EB80                <2> 	jmp donefontvesa
  9487                              <2> colorfontmatch:
  9488 0000742A 0401                <2> 	add al, 1
  9489 0000742C EBD0                <2> 	jmp donecolormatch
  9490                              <1> %include "source/gui/window.asm"
  9491 0000742E 0000                <2> winvcopystx dw 0
  9492 00007430 0000                <2> winvcopysty dw 0
  9493 00007432 0000                <2> winvcopydx dw 0
  9494 00007434 0000                <2> winvcopycx dw 0
  9495 00007436 FFFF0000            <2> windowcolor dw 0xFFFF,0
  9496 0000743A 00000000            <2> windowbufloc: dd 0
  9497 0000743E 00000000            <2> windowvideobuf dd 0
  9498 00007442 00000000            <2> windowvideobuf2 dd 0
  9499 00007446 00000000            <2> windowinfobuf dd 0
  9500 0000744A 0000                <2> termcol dw 0
  9501 0000744C 00000000            <2> wincopyendpos dd 0
  9502                              <2> 
  9503                              <2> 	showwindow:	;windowstuff in esi, position in (dx, cx), nothing in ax, code in ebx
  9504 00007450 C605[A2230000]01    <2> 		mov byte [termguion], 1
  9505 00007457 6681C11000          <2> 		add cx, 16
  9506 0000745C 668915[2E740000]    <2> 		mov [winvcopystx], dx
  9507 00007463 66890D[30740000]    <2> 		mov [winvcopysty], cx
  9508 0000746A 8935[46740000]      <2> 		mov [windowinfobuf], esi
  9509 00007470 668B16              <2> 		mov dx, [esi]
  9510 00007473 668B4E02            <2> 		mov cx, [esi + 2]
  9511 00007477 31C0                <2> 		xor eax, eax
  9512 00007479 31DB                <2> 		xor ebx, ebx
  9513 0000747B 6689D0              <2> 		mov ax, dx
  9514 0000747E 6689CB              <2> 		mov bx, cx
  9515 00007481 66C1E803            <2> 		shr ax, 3
  9516 00007485 66C1EB04            <2> 		shr bx, 4
  9517 00007489 66A3[4A740000]      <2> 		mov [termcol], ax
  9518 0000748F A2[97250000]        <2> 		mov [charxy], al
  9519 00007494 881D[98250000]      <2> 		mov [charxy + 1], bl
  9520 0000749A 8B7E04              <2> 		mov edi, [esi + 4]
  9521 0000749D 893D[36740000]      <2> 		mov [windowcolor], edi
  9522 000074A3 8B7E0C              <2> 		mov edi, [esi + 12]
  9523 000074A6 893D[42740000]      <2> 		mov [windowvideobuf2], edi
  9524 000074AC 8B7E08              <2> 		mov edi, [esi + 8]
  9525 000074AF 893D[3E740000]      <2> 		mov [windowvideobuf], edi
  9526 000074B5 81FB00000000        <2> 		cmp ebx, 0
  9527 000074BB 0F84C1040000        <2> 		je near donewincopynow
  9528                              <2> 	findendposwin:
  9529 000074C1 C1E002              <2> 		shl eax, 2
  9530 000074C4 31D2                <2> 		xor edx, edx
  9531 000074C6 F7E3                <2> 		mul ebx
  9532 000074C8 01C7                <2> 		add edi, eax
  9533 000074CA 893D[4C740000]      <2> 		mov [wincopyendpos], edi
  9534 000074D0 31FF                <2> 		xor edi, edi
  9535 000074D2 6631C0              <2> 		xor ax, ax
  9536 000074D5 6631DB              <2> 		xor bx, bx
  9537 000074D8 6601D2              <2> 		add dx, dx
  9538 000074DB 668915[32740000]    <2> 		mov [winvcopydx], dx
  9539 000074E2 66890D[34740000]    <2> 		mov [winvcopycx], cx
  9540 000074E9 668B0D[30740000]    <2> 		mov cx, [winvcopysty]
  9541 000074F0 6681E91000          <2> 		sub cx, 16
  9542 000074F5 668B15[2E740000]    <2> 		mov dx, [winvcopystx]
  9543 000074FC C605[A3230000]00    <2> 		mov byte [termcopyon], 0
  9544 00007503 B403                <2> 		mov ah, 3
  9545 00007505 E81C0A0000          <2> 		call graphicsadd
  9546                              <2> 	showwindow2:
  9547 0000750A 6681C11000          <2> 		add cx, 16
  9548 0000750F 668915[2E740000]    <2> 		mov [winvcopystx], dx
  9549 00007516 66890D[30740000]    <2> 		mov [winvcopysty], cx
  9550 0000751D 668B16              <2> 		mov dx, [esi]
  9551 00007520 668B4E02            <2> 		mov cx, [esi + 2]
  9552 00007524 6601D2              <2> 		add dx, dx
  9553 00007527 668915[32740000]    <2> 		mov [winvcopydx], dx
  9554 0000752E 66890D[34740000]    <2> 		mov [winvcopycx], cx
  9555 00007535 E818000000          <2> 		call reloadwindowtitle
  9556 0000753A 803D[0D7F0000]01    <2> 		cmp byte [windrag], 1
  9557 00007541 0F834A040000        <2> 		jae near forgetresetstuff
  9558 00007547 8B3D[3A740000]      <2> 		mov edi, [windowbufloc]
  9559 0000754D E96E020000          <2> 		jmp windowvideocopyset
  9560                              <2> 		
  9561                              <2> 	reloadwindowtitle:
  9562 00007552 8B3D[3A740000]      <2> 		mov edi, [windowbufloc]
  9563 00007558 31D2                <2> 		xor edx, edx
  9564 0000755A 668B15[5E550000]    <2> 		mov dx, [resolutionx2]
  9565 00007561 C1E204              <2> 		shl edx, 4
  9566 00007564 29D7                <2> 		sub edi, edx
  9567 00007566 803D[A3230000]00    <2> 		cmp byte [termcopyon], 0
  9568 0000756D 7532                <2> 		jne nocleartitlebarpos
  9569 0000756F 8B3D[86540000]      <2> 		mov edi, [physbaseptr]
  9570 00007575 31D2                <2> 		xor edx, edx
  9571 00007577 668B15[2E740000]    <2> 		mov dx, [winvcopystx]
  9572 0000757E 01D7                <2> 		add edi, edx
  9573 00007580 31C9                <2> 		xor ecx, ecx
  9574 00007582 668B0D[30740000]    <2> 		mov cx, [winvcopysty]
  9575 00007589 6681E91000          <2> 		sub cx, 16
  9576 0000758E 6681F90000          <2> 		cmp cx, 0
  9577 00007593 740C                <2> 		je nocleartitlebarpos
  9578                              <2> 	cleartitlebarpos:
  9579 00007595 31C0                <2> 		xor eax, eax
  9580 00007597 66A1[5E550000]      <2> 		mov ax, [resolutionx2]
  9581 0000759D F7E1                <2> 		mul ecx
  9582 0000759F 01C7                <2> 		add edi, eax
  9583                              <2> 	nocleartitlebarpos:
  9584 000075A1 66B91000            <2> 		mov cx, 16
  9585 000075A5 668B15[32740000]    <2> 		mov dx, [winvcopydx]
  9586 000075AC 6681F90000          <2> 		cmp cx, 0
  9587 000075B1 0F8448000000        <2> 		je near canceltitlebarput
  9588 000075B7 6681FA0000          <2> 		cmp dx, 0
  9589 000075BC 0F843D000000        <2> 		je near canceltitlebarput
  9590                              <2> 	titlebarput:
  9591 000075C2 66A1[36740000]      <2> 		mov ax, [windowcolor]
  9592 000075C8 668907              <2> 		mov [edi], ax
  9593 000075CB 6681EA0200          <2> 		sub dx, 2
  9594 000075D0 81C702000000        <2> 		add edi, 2
  9595 000075D6 6681FA0000          <2> 		cmp dx, 0
  9596 000075DB 75E5                <2> 		jne titlebarput
  9597 000075DD 31D2                <2> 		xor edx, edx
  9598 000075DF 668B15[5E550000]    <2> 		mov dx, [resolutionx2]
  9599 000075E6 6649                <2> 		dec cx
  9600 000075E8 662B15[32740000]    <2> 		sub dx, [winvcopydx]
  9601 000075EF 01D7                <2> 		add edi, edx
  9602 000075F1 668B15[32740000]    <2> 		mov dx, [winvcopydx]
  9603 000075F8 6681F90000          <2> 		cmp cx, 0
  9604 000075FD 75C3                <2> 		jne titlebarput
  9605                              <2> 	canceltitlebarput:
  9606 000075FF 893D[3A740000]      <2> 		mov [windowbufloc], edi
  9607 00007605 803D[A3230000]02    <2> 		cmp byte [termcopyon], 2
  9608 0000760C 0F841C010000        <2> 		je near winvcpst
  9609 00007612 668B1D[816B0000]    <2> 		mov bx, [background]
  9610 00007619 6653                <2> 		push bx
  9611 0000761B 6631DB              <2> 		xor bx, bx
  9612 0000761E 66891D[816B0000]    <2> 		mov [background], bx
  9613 00007625 6631C0              <2> 		xor ax, ax
  9614 00007628 81C610000000        <2> 		add esi, 16
  9615 0000762E 668B15[2E740000]    <2> 		mov dx, [winvcopystx]
  9616 00007635 668B0D[30740000]    <2> 		mov cx, [winvcopysty]
  9617 0000763C 6681E91000          <2> 		sub cx, 16
  9618 00007641 668B1D[36740000]    <2> 		mov bx, [windowcolor]
  9619 00007648 C605[A5790000]01    <2> 		mov byte [mouseselecton], 1
  9620 0000764F E882FBFFFF          <2> 		call showstring2	;Show window title
  9621 00007654 8B35[862C0000]      <2> 		mov esi, [usercache]
  9622 0000765A 6681C21000          <2> 		add dx, 16
  9623 0000765F C605[A5790000]01    <2> 		mov byte [mouseselecton], 1
  9624 00007666 E86BFBFFFF          <2> 		call showstring2	;Show user name
  9625 0000766B BE[2F820000]        <2> 		mov esi, computer
  9626 00007670 C605[A5790000]01    <2> 		mov byte [mouseselecton], 1
  9627 00007677 E85AFBFFFF          <2> 		call showstring2	;Show computer name
  9628 0000767C 66B85800            <2> 		mov ax, "X"
  9629 00007680 66BB00F8            <2> 		mov bx, 1111100000000000b
  9630 00007684 668B15[2E740000]    <2> 		mov dx, [winvcopystx]
  9631 0000768B 668B0D[30740000]    <2> 		mov cx, [winvcopysty]
  9632 00007692 6681E91000          <2> 		sub cx, 16
  9633 00007697 6681EA1000          <2> 		sub dx, 16
  9634 0000769C 660315[32740000]    <2> 		add dx, [winvcopydx]
  9635 000076A3 C605[A5790000]01    <2> 		mov byte [mouseselecton], 1
  9636 000076AA 663B15[5E550000]    <2> 		cmp dx, [resolutionx2]
  9637 000076B1 7305                <2> 		jae .nox
  9638 000076B3 E897FBFFFF          <2> 		call showfontvesa
  9639                              <2> .nox:
  9640 000076B8 668B1D[816B0000]    <2> 		mov bx, [background]
  9641 000076BF 6681EA1800          <2> 		sub dx, 24
  9642 000076C4 66B82B00            <2> 		mov ax, "+"
  9643 000076C8 66BBE007            <2> 		mov bx, 0000011111100000b
  9644 000076CC C605[A5790000]01    <2> 		mov byte [mouseselecton], 1
  9645 000076D3 663B15[5E550000]    <2> 		cmp dx, [resolutionx2]
  9646 000076DA 7305                <2> 		jae .noplus
  9647 000076DC E86EFBFFFF          <2> 		call showfontvesa
  9648                              <2> .noplus:
  9649 000076E1 6681EA1800          <2> 		sub dx, 24
  9650 000076E6 66B82D00            <2> 		mov ax, "-"
  9651 000076EA 66BBE0FF            <2> 		mov bx, 1111111111100000b
  9652 000076EE C605[A5790000]01    <2> 		mov byte [mouseselecton], 1
  9653 000076F5 663B15[5E550000]    <2> 		cmp dx, [resolutionx2]
  9654 000076FC 7305                <2> 		jae .nominus
  9655 000076FE E84CFBFFFF          <2> 		call showfontvesa
  9656                              <2> .nominus:
  9657 00007703 6681EA1800          <2> 		sub dx, 24
  9658 00007708 66B83F00            <2> 		mov ax, "?"
  9659 0000770C 66BB1F00            <2> 		mov bx, 0000000000011111b
  9660 00007710 C605[A5790000]01    <2> 		mov byte [mouseselecton], 1
  9661 00007717 663B15[5E550000]    <2> 		cmp dx, [resolutionx2]
  9662 0000771E 7305                <2> 		jae .noquestion
  9663 00007720 E82AFBFFFF          <2> 		call showfontvesa
  9664                              <2> .noquestion:
  9665 00007725 665B                <2> 		pop bx
  9666 00007727 66891D[816B0000]    <2> 		mov [background], bx
  9667                              <2> 	winvcpst:
  9668 0000772E C3                  <2> 		ret
  9669                              <2> 
  9670                              <2> 	windowvideocopy:
  9671 0000772F 8B35[46740000]      <2> 		mov esi, [windowinfobuf]
  9672 00007735 668B16              <2> 		mov dx, [esi]
  9673 00007738 668B4E02            <2> 		mov cx, [esi + 2]
  9674 0000773C 8B7E04              <2> 		mov edi, [esi + 4]
  9675 0000773F 893D[36740000]      <2> 		mov [windowcolor], edi
  9676 00007745 8B7E08              <2> 		mov edi, [esi + 8]
  9677 00007748 8B5E0C              <2> 		mov ebx, [esi + 12]
  9678 0000774B 893D[3E740000]      <2> 		mov [windowvideobuf], edi
  9679 00007751 891D[42740000]      <2> 		mov [windowvideobuf2], ebx
  9680 00007757 31C0                <2> 		xor eax, eax
  9681 00007759 31DB                <2> 		xor ebx, ebx
  9682 0000775B 6689D0              <2> 		mov ax, dx
  9683 0000775E 6689CB              <2> 		mov bx, cx
  9684 00007761 66C1E803            <2> 		shr ax, 3
  9685 00007765 66C1EB04            <2> 		shr bx, 4
  9686 00007769 66A3[4A740000]      <2> 		mov [termcol], ax
  9687 0000776F A2[97250000]        <2> 		mov [charxy], al
  9688 00007774 881D[98250000]      <2> 		mov [charxy + 1], bl
  9689 0000777A 8B3D[3A740000]      <2> 		mov edi, [windowbufloc]
  9690 00007780 3B3D[86540000]      <2> 		cmp edi, [physbaseptr]
  9691 00007786 0F8334000000        <2> 		jae near windowvideocopyset
  9692 0000778C 31C9                <2> 		xor ecx, ecx
  9693 0000778E 31D2                <2> 		xor edx, edx
  9694 00007790 668B15[2E740000]    <2> 		mov dx, [winvcopystx]
  9695 00007797 668B0D[30740000]    <2> 		mov cx, [winvcopysty]
  9696 0000779E 8B3D[86540000]      <2> 		mov edi, [physbaseptr]
  9697 000077A4 01D7                <2> 		add edi, edx
  9698 000077A6 81F900000000        <2> 		cmp ecx, 0
  9699 000077AC 7412                <2> 		je windowvideocopyset
  9700                              <2> 	yrescopylp:
  9701 000077AE 31C0                <2> 		xor eax, eax
  9702 000077B0 66A1[5E550000]      <2> 		mov ax, [resolutionx2]
  9703 000077B6 F7E1                <2> 		mul ecx
  9704 000077B8 01C7                <2> 		add edi, eax
  9705 000077BA 893D[3A740000]      <2> 		mov [windowbufloc], edi
  9706                              <2> 	windowvideocopyset:
  9707 000077C0 6631C9              <2> 		xor cx, cx
  9708 000077C3 6649                <2> 		dec cx
  9709 000077C5 66890D[99790000]    <2> 		mov [charposline], cx
  9710 000077CC 89FE                <2> 		mov esi, edi
  9711 000077CE 81EE10000000        <2> 		sub esi, 16
  9712 000077D4 31D2                <2> 		xor edx, edx
  9713 000077D6 668B15[5E550000]    <2> 		mov dx, [resolutionx2]
  9714 000077DD C1E204              <2> 		shl edx, 4
  9715 000077E0 01D6                <2> 		add esi, edx
  9716 000077E2 8B3D[3E740000]      <2> 		mov edi, [windowvideobuf]
  9717 000077E8 81EF04000000        <2> 		sub edi, 4
  9718 000077EE 893D[9B790000]      <2> 		mov [charposvbuf], edi
  9719 000077F4 E97C000000          <2> 		jmp nextcharwin
  9720                              <2> 	win.write:	;adjusted this to use alpha
  9721                              <2> 				;5R, 6G, 5B
  9722                              <2> %ifdef gui.alphablending
  9723                              <2> 		push esi
  9724                              <2> 		push bx
  9725                              <2> 		push cx
  9726                              <2> 		push dx
  9727                              <2> %ifdef gui.background
  9728                              <2> 		mov esi, edi
  9729                              <2> 		sub esi, [physbaseptr]
  9730                              <2> 		add esi, [backgroundimage]
  9731                              <2> 		cmp dword [backgroundimage], 0
  9732                              <2> 		jne .red
  9733                              <2> %endif
  9734                              <2> 		mov esi, background
  9735                              <2> 	.red:
  9736                              <2> 		mov cx, [esi]
  9737                              <2> 		shr cx, 11
  9738                              <2> 		mov bx, ax
  9739                              <2> 		shr bx, 11
  9740                              <2> 		add cx, bx
  9741                              <2> 		add cx, bx
  9742                              <2> 		add cx, bx
  9743                              <2> 		shr cx, 2
  9744                              <2> 		shl cx, 11
  9745                              <2> 		mov dx, cx
  9746                              <2> 	.green:
  9747                              <2> 		mov cx, [esi]
  9748                              <2> 		shl cx, 5
  9749                              <2> 		shr cx, 10
  9750                              <2> 		mov bx, ax
  9751                              <2> 		shl bx, 5
  9752                              <2> 		shr bx, 10
  9753                              <2> 		add cx, bx
  9754                              <2> 		add cx, bx
  9755                              <2> 		add cx, bx
  9756                              <2> 		shr cx, 2
  9757                              <2> 		shl cx, 5
  9758                              <2> 		add dx, cx
  9759                              <2> 	.blue:
  9760                              <2> 		mov cx, [esi]
  9761                              <2> 		shl cx, 11
  9762                              <2> 		shr cx, 11
  9763                              <2> 		mov bx, ax
  9764                              <2> 		shl bx, 11
  9765                              <2> 		shr bx, 11
  9766                              <2> 		add cx, bx
  9767                              <2> 		add cx, bx
  9768                              <2> 		add cx, bx
  9769                              <2> 		shr cx, 2
  9770                              <2> 		add dx, cx
  9771                              <2> 		mov [edi], dx
  9772                              <2> 		pop dx
  9773                              <2> 		pop cx
  9774                              <2> 		pop bx
  9775                              <2> 		pop esi
  9776                              <2> %else
  9777 000077F9 668907              <2> 		mov [edi], ax
  9778                              <2> %endif
  9779 000077FC C3                  <2> 		ret
  9780                              <2> 	copywindow:
  9781 000077FD B201                <2> 		mov dl, 1
  9782 000077FF D0C6                <2> 		rol dh, 1
  9783 00007801 20F2                <2> 		and dl, dh
  9784 00007803 66813D[40720000]80- <2> 		cmp word [colorcache], 0x80
  9785 0000780B 00                  <2>
  9786 0000780C 7320                <2> 		jae switchwincolors
  9787 0000780E 66A1[38740000]      <2> 		mov ax, [windowcolor + 2]
  9788 00007814 E8E0FFFFFF          <2> 		call win.write
  9789 00007819 80FA00              <2> 		cmp dl, 0
  9790 0000781C 742B                <2> 		je nowritewin
  9791 0000781E 66A1[36740000]      <2> 		mov ax, [windowcolor]
  9792 00007824 E8D0FFFFFF          <2> 		call win.write
  9793 00007829 E91B000000          <2> 		jmp nowritewin
  9794                              <2> 	switchwincolors:
  9795 0000782E 66A1[36740000]      <2> 		mov ax, [windowcolor]
  9796 00007834 E8C0FFFFFF          <2> 		call win.write
  9797 00007839 80FA00              <2> 		cmp dl, 0
  9798 0000783C 740B                <2> 		je nowritewin
  9799 0000783E 66A1[38740000]      <2> 		mov ax, [windowcolor + 2]
  9800 00007844 E8B0FFFFFF          <2> 		call win.write
  9801                              <2> 	nowritewin:
  9802 00007849 81C702000000        <2> 		add edi, 2
  9803 0000784F FEC1                <2> 		inc cl
  9804 00007851 80F908              <2> 		cmp cl, 8
  9805 00007854 75A7                <2> 		jne copywindow
  9806 00007856 43                  <2> 		inc ebx
  9807 00007857 30C9                <2> 		xor cl, cl
  9808 00007859 31D2                <2> 		xor edx, edx
  9809 0000785B 668B15[5E550000]    <2> 		mov dx, [resolutionx2]
  9810 00007862 01D6                <2> 		add esi, edx
  9811 00007864 89F7                <2> 		mov edi, esi
  9812 00007866 8AB3[AE840000]      <2> 		mov dh, [fonts + ebx]
  9813 0000786C D0CE                <2> 		ror dh, 1
  9814 0000786E FEC5                <2> 		inc ch
  9815 00007870 80FD10              <2> 		cmp ch, 16
  9816 00007873 7588                <2> 		jne copywindow
  9817                              <2> 	nextcharwin:
  9818 00007875 6631C9              <2> 		xor cx, cx
  9819 00007878 8B3D[9B790000]      <2> 		mov edi, [charposvbuf]
  9820 0000787E 81C704000000        <2> 		add edi, 4
  9821 00007884 3B3D[4C740000]      <2> 		cmp edi, [wincopyendpos]
  9822 0000788A 0F83F2000000        <2> 		jae near donewincopynow
  9823 00007890 668B5F02            <2> 		mov bx, [edi + 2]
  9824 00007894 6681FB0000          <2> 		cmp bx, 0
  9825 00007899 7508                <2> 		jne nofixcolorwin
  9826 0000789B 66BB0700            <2> 		mov bx, 7
  9827 0000789F 66895F02            <2> 		mov [edi + 2], bx
  9828                              <2> 	nofixcolorwin:
  9829 000078A3 66891D[40720000]    <2> 		mov [colorcache], bx
  9830 000078AA 8B1F                <2> 		mov ebx, [edi]
  9831 000078AC 893D[9B790000]      <2> 		mov [charposvbuf], edi
  9832 000078B2 813D[42740000]0000- <2> 		cmp dword [windowvideobuf2], 0
  9833 000078BA 0000                <2>
  9834 000078BC 7455                <2> 		je noskipcharcopy
  9835 000078BE 2B3D[3E740000]      <2> 		sub edi, [windowvideobuf]
  9836 000078C4 033D[42740000]      <2> 		add edi, [windowvideobuf2]
  9837 000078CA 8B07                <2> 		mov eax, [edi]
  9838 000078CC 39D8                <2> 		cmp eax, ebx
  9839 000078CE 7543                <2> 		jne noskipcharcopy
  9840                              <2> 	skipcharcopy:
  9841 000078D0 81C610000000        <2> 		add esi, 16
  9842 000078D6 668B0D[99790000]    <2> 		mov cx, [charposline]
  9843 000078DD 6641                <2> 		inc cx
  9844 000078DF 66890D[99790000]    <2> 		mov [charposline], cx
  9845 000078E6 663B0D[4A740000]    <2> 		cmp cx, [termcol]
  9846 000078ED 7286                <2> 		jb nextcharwin
  9847 000078EF 6631C9              <2> 		xor cx, cx
  9848 000078F2 66890D[99790000]    <2> 		mov [charposline], cx
  9849 000078F9 31D2                <2> 		xor edx, edx
  9850 000078FB 668B15[5E550000]    <2> 		mov dx, [resolutionx2]
  9851 00007902 C1E204              <2> 		shl edx, 4
  9852 00007905 662B15[32740000]    <2> 		sub dx, [winvcopydx]
  9853 0000790C 01D6                <2> 		add esi, edx
  9854 0000790E E962FFFFFF          <2> 		jmp nextcharwin
  9855                              <2> 	noskipcharcopy:
  9856 00007913 891F                <2> 		mov [edi], ebx
  9857 00007915 8B3D[9B790000]      <2> 		mov edi, [charposvbuf]
  9858 0000791B C1E310              <2> 		shl ebx, 16
  9859 0000791E C1EB0C              <2> 		shr ebx, 12
  9860 00007921 31D2                <2> 		xor edx, edx
  9861 00007923 668B15[5E550000]    <2> 		mov dx, [resolutionx2]
  9862 0000792A C1E204              <2> 		shl edx, 4
  9863 0000792D 29D6                <2> 		sub esi, edx
  9864 0000792F 81C610000000        <2> 		add esi, 16
  9865 00007935 89F7                <2> 		mov edi, esi
  9866 00007937 668B0D[99790000]    <2> 		mov cx, [charposline]
  9867 0000793E 6641                <2> 		inc cx
  9868 00007940 663B0D[4A740000]    <2> 		cmp cx, [termcol]
  9869 00007947 7317                <2> 		jae fixwindowcopy
  9870 00007949 66890D[99790000]    <2> 		mov [charposline], cx
  9871 00007950 6631C9              <2> 		xor cx, cx
  9872 00007953 8AB3[AE840000]      <2> 		mov dh, [fonts + ebx]
  9873 00007959 D0CE                <2> 		ror dh, 1
  9874 0000795B E99DFEFFFF          <2> 		jmp copywindow
  9875                              <2> fixwindowcopy:
  9876 00007960 6631C9              <2> 		xor cx, cx
  9877 00007963 66890D[99790000]    <2> 		mov [charposline], cx
  9878 0000796A 662B15[32740000]    <2> 		sub dx, [winvcopydx]
  9879 00007971 01D6                <2> 		add esi, edx
  9880 00007973 89F7                <2> 		mov edi, esi
  9881 00007975 8AB3[AE840000]      <2> 		mov dh, [fonts + ebx]
  9882 0000797B D0CE                <2> 		ror dh, 1
  9883 0000797D E97BFEFFFF          <2> 		jmp copywindow
  9884                              <2> donewincopynow:
  9885 00007982 803D[A3230000]01    <2> 		cmp byte [termcopyon], 1
  9886 00007989 7506                <2> 		jne forgetresetstuff
  9887 0000798B E8E7AFFFFF          <2> 		call switchtermcursor
  9888 00007990 61                  <2> 		popa
  9889                              <2> forgetresetstuff:
  9890 00007991 C605[A3230000]00    <2> 		mov byte [termcopyon], 0
  9891 00007998 C3                  <2> 		ret
  9892                              <2> 		
  9893 00007999 0000                <2> charposline dw 0
  9894 0000799B 00000000            <2> charposvbuf dw 0,0
  9895                              <1> 				
  9896 0000799F 00                  <1> copygui db 0
  9897 000079A0 00                  <1> graphicsset db 0
  9898 000079A1 0000                <1> graphicspos db 0,0
  9899 000079A3 00                  <1> showcursorfonton db 0
  9900 000079A4 00                  <1> savefonton db 0
  9901 000079A5 00                  <1> mouseselecton db 0
  9902                              <1> 
  9903 000079A6 00                  <1> pbutton db 0
  9904 000079A7 00                  <1> pLBUTTON db 0
  9905 000079A8 00                  <1> pRBUTTON db 0
  9906 000079A9 00000000            <1> dragging dw 0,0
  9907 000079AD 0000000000000000    <1> lastpos dw 0,0,0,0
  9908 000079B5 00000000            <1> colorbuf dw 0,0
  9909                              <1> 	
  9910                              <1> 	clickicon:
  9911 000079B9 B001                <1> 		mov al, 1
  9912 000079BB A2[A6790000]        <1> 		mov [pbutton], al
  9913 000079C0 A0[A7790000]        <1> 		mov al, [pLBUTTON]
  9914 000079C5 2205[65580000]      <1> 		and al, [LBUTTON]
  9915 000079CB 8A25[A8790000]      <1> 		mov ah, [pRBUTTON]
  9916 000079D1 2225[66580000]      <1> 		and ah, [RBUTTON]
  9917 000079D7 08E0                <1> 		or al, ah
  9918 000079D9 3C00                <1> 		cmp al, 0
  9919 000079DB 741B                <1> 		je nodragclick
  9920 000079DD 813D[A9790000]0100- <1> 		cmp dword [dragging], 1
  9921 000079E5 0000                <1>
  9922 000079E7 732F                <1> 		jae dragclick
  9923 000079E9 C705[A9790000]0100- <1> 		mov dword [dragging], 1
  9924 000079F1 0000                <1>
  9925 000079F3 E920000000          <1> 		jmp dragclick
  9926                              <1> 	nodragclick:
  9927 000079F8 31C0                <1> 		xor eax, eax
  9928 000079FA A3[A9790000]        <1> 		mov dword [dragging], eax
  9929 000079FF A2[A6790000]        <1> 		mov [pbutton], al
  9930 00007A04 A0[65580000]        <1> 		mov al, [LBUTTON]
  9931 00007A09 A2[A7790000]        <1> 		mov [pLBUTTON], al
  9932 00007A0E A0[66580000]        <1> 		mov al, [RBUTTON]
  9933 00007A13 A2[A8790000]        <1> 		mov [pRBUTTON], al
  9934                              <1> 	dragclick:
  9935 00007A18 6631C0              <1> 		xor ax, ax
  9936 00007A1B BE[6DB50300]        <1> 		mov esi, graphicstable
  9937 00007A20 C705[F9810000]0000- <1> 		mov dword [codepointer], 0
  9938 00007A28 0000                <1>
  9939                              <1> 	clicon2:
  9940 00007A2A 31D2                <1> 		xor edx, edx
  9941 00007A2C 31C9                <1> 		xor ecx, ecx
  9942 00007A2E 66813E0100          <1> 		cmp word [esi], 1
  9943 00007A33 0F841B000000        <1> 		je near iconselect
  9944 00007A39 66813E0200          <1> 		cmp word [esi], 2
  9945 00007A3E 0F8472010000        <1> 		je near textselected
  9946 00007A44 66813E0300          <1> 		cmp word [esi], 3
  9947 00007A49 0F84C7020000        <1> 		je near windowselect
  9948 00007A4F E910040000          <1> 		jmp nexticonsel
  9949                              <1> 	iconselect:
  9950 00007A54 668B5606            <1> 		mov dx, [esi + 6]
  9951 00007A58 6689D0              <1> 		mov ax, dx
  9952 00007A5B 668B4E08            <1> 		mov cx, [esi + 8]
  9953 00007A5F 6689CB              <1> 		mov bx, cx
  9954 00007A62 6681C32000          <1> 		add bx, 32
  9955 00007A67 6601D0              <1> 		add ax, dx
  9956 00007A6A 813D[A9790000]0100- <1> 		cmp dword [dragging], 1
  9957 00007A72 0000                <1>
  9958 00007A74 746F                <1> 		je dragicon
  9959 00007A76 813D[A9790000]0000- <1> 		cmp dword [dragging], 0
  9960 00007A7E 0000                <1>
  9961 00007A80 7411                <1> 		je nodragiconcheck
  9962 00007A82 3935[A9790000]      <1> 		cmp dword [dragging], esi
  9963 00007A88 0F85D6030000        <1> 		jne near nexticonsel
  9964 00007A8E E952000000          <1> 		jmp dragicon
  9965                              <1> 	nodragiconcheck:
  9966 00007A93 663905[54570000]    <1> 		cmp [mousecursorposition], ax
  9967 00007A9A 0F82C4030000        <1> 		jb near nexticonsel
  9968 00007AA0 66054000            <1> 		add ax, 64
  9969 00007AA4 663905[54570000]    <1> 		cmp [mousecursorposition], ax
  9970 00007AAB 0F87B3030000        <1> 		ja near nexticonsel
  9971 00007AB1 6629D0              <1> 		sub ax, dx
  9972 00007AB4 66390D[56570000]    <1> 		cmp [mousecursorposition + 2], cx
  9973 00007ABB 0F82A3030000        <1> 		jb near nexticonsel
  9974 00007AC1 66391D[56570000]    <1> 		cmp [mousecursorposition + 2], bx
  9975 00007AC8 0F8796030000        <1> 		ja near nexticonsel
  9976 00007ACE 668B460A            <1> 		mov ax, [esi + 10]
  9977 00007AD2 66250100            <1> 		and ax, 1
  9978 00007AD6 663D0100            <1> 		cmp ax, 1
  9979 00007ADA 0F84B6000000        <1> 		je near unselecticon
  9980 00007AE0 E98D000000          <1> 		jmp nodragicon
  9981                              <1> 	dragicon:
  9982 00007AE5 663905[50570000]    <1> 		cmp [lastmouseposition], ax
  9983 00007AEC 0F8272030000        <1> 		jb near nexticonsel
  9984 00007AF2 66054000            <1> 		add ax, 64
  9985 00007AF6 663905[50570000]    <1> 		cmp [lastmouseposition], ax
  9986 00007AFD 0F8761030000        <1> 		ja near nexticonsel
  9987 00007B03 6629D0              <1> 		sub ax, dx
  9988 00007B06 66390D[52570000]    <1> 		cmp [lastmouseposition + 2], cx
  9989 00007B0D 0F8251030000        <1> 		jb near nexticonsel
  9990 00007B13 66391D[52570000]    <1> 		cmp [lastmouseposition + 2], bx
  9991 00007B1A 0F8744030000        <1> 		ja near nexticonsel
  9992 00007B20 668B460A            <1> 		mov ax, [esi + 10]
  9993 00007B24 2410                <1> 		and al, 00010000b
  9994 00007B26 3C10                <1> 		cmp al, 00010000b
  9995 00007B28 7448                <1> 		je nodragicon
  9996 00007B2A 8935[A9790000]      <1> 		mov [dragging], esi
  9997 00007B30 66D1E2              <1> 		shl dx, 1
  9998 00007B33 662B15[50570000]    <1> 		sub dx, [lastmouseposition]
  9999 00007B3A 660315[54570000]    <1> 		add dx, [mousecursorposition]
 10000 00007B41 66D1EA              <1> 		shr dx, 1
 10001 00007B44 66030D[56570000]    <1> 		add cx, [mousecursorposition + 2]
 10002 00007B4B 662B0D[52570000]    <1> 		sub cx, [lastmouseposition + 2]
 10003 00007B52 663B15[5E550000]    <1> 		cmp dx, [resolutionx2]
 10004 00007B59 7607                <1> 		jbe chkyresdrgicn
 10005 00007B5B 668B15[54570000]    <1> 		mov dx, [mousecursorposition]
 10006                              <1> 	chkyresdrgicn:
 10007 00007B62 663B0D[72540000]    <1> 		cmp cx, [resolutiony]
 10008 00007B69 7607                <1> 		jbe nodragicon
 10009 00007B6B 668B0D[56570000]    <1> 		mov cx, [mousecursorposition + 2]
 10010                              <1> 	nodragicon:
 10011 00007B72 66814E0A0100        <1> 		or word [esi + 10], 1
 10012 00007B78 8B5E0C              <1> 		mov ebx, [esi + 12]
 10013 00007B7B 668B460A            <1> 		mov ax, [esi + 10]
 10014 00007B7F 8B7602              <1> 		mov esi, [esi + 2]
 10015 00007B82 C705[F9810000]0000- <1> 		mov dword [codepointer], 0
 10016 00007B8A 0000                <1>
 10017 00007B8C E8A3EDFFFF          <1> 		call showicon
 10018 00007B91 E9E7020000          <1> 		jmp doneiconsel
 10019                              <1> 	unselecticon:
 10020 00007B96 6681660AFEFF        <1> 		and word [esi + 10], 0xFFFE
 10021 00007B9C 8B5E0C              <1> 		mov ebx, [esi + 12]
 10022 00007B9F 668B460A            <1> 		mov ax, [esi + 10]
 10023 00007BA3 8B7602              <1> 		mov esi, [esi + 2]
 10024 00007BA6 891D[F9810000]      <1> 		mov [codepointer], ebx
 10025 00007BAC E883EDFFFF          <1> 		call showicon
 10026 00007BB1 E9C7020000          <1> 		jmp doneiconsel
 10027                              <1> 	textselected:
 10028 00007BB6 8B5E02              <1> 		mov ebx, [esi + 2]
 10029 00007BB9 668B5606            <1> 		mov dx, [esi + 6]
 10030 00007BBD 6689D0              <1> 		mov ax, dx
 10031 00007BC0 668B4E08            <1> 		mov cx, [esi + 8]
 10032                              <1> 	lengthtesttext:
 10033 00007BC4 803B00              <1> 		cmp byte [ebx], 0
 10034 00007BC7 7407                <1> 		je donetesttextlength
 10035 00007BC9 43                  <1> 		inc ebx
 10036 00007BCA 66051000            <1> 		add ax, 16
 10037 00007BCE EBF4                <1> 		jmp lengthtesttext
 10038                              <1> 	donetesttextlength:
 10039 00007BD0 6689CB              <1> 		mov bx, cx
 10040 00007BD3 6681C30F00          <1> 		add bx, 15
 10041 00007BD8 813D[A9790000]0100- <1> 		cmp dword [dragging], 1
 10042 00007BE0 0000                <1>
 10043 00007BE2 7468                <1> 		je dragtext
 10044 00007BE4 813D[A9790000]0000- <1> 		cmp dword [dragging], 0
 10045 00007BEC 0000                <1>
 10046 00007BEE 7411                <1> 		je nodragtextcheck
 10047 00007BF0 3935[A9790000]      <1> 		cmp dword [dragging], esi
 10048 00007BF6 0F8568020000        <1> 		jne near nexticonsel
 10049 00007BFC E94B000000          <1> 		jmp dragtext
 10050                              <1> 	nodragtextcheck:
 10051 00007C01 663915[54570000]    <1> 		cmp [mousecursorposition], dx
 10052 00007C08 0F8256020000        <1> 		jb near nexticonsel
 10053 00007C0E 663905[54570000]    <1> 		cmp [mousecursorposition], ax
 10054 00007C15 0F8749020000        <1> 		ja near nexticonsel
 10055 00007C1B 66390D[56570000]    <1> 		cmp [mousecursorposition + 2], cx
 10056 00007C22 0F823C020000        <1> 		jb near nexticonsel
 10057 00007C28 66391D[56570000]    <1> 		cmp [mousecursorposition + 2], bx
 10058 00007C2F 0F872F020000        <1> 		ja near nexticonsel
 10059 00007C35 668B460A            <1> 		mov ax, [esi + 10]
 10060 00007C39 66250100            <1> 		and ax, 1
 10061 00007C3D 663D0100            <1> 		cmp ax, 1
 10062 00007C41 0F84AB000000        <1> 		je near unselecttext
 10063 00007C47 E986000000          <1> 		jmp nodragtext
 10064                              <1> 	dragtext:
 10065 00007C4C 663915[50570000]    <1> 		cmp [lastmouseposition], dx
 10066 00007C53 0F820B020000        <1> 		jb near nexticonsel
 10067 00007C59 663905[50570000]    <1> 		cmp [lastmouseposition], ax
 10068 00007C60 0F87FE010000        <1> 		ja near nexticonsel
 10069 00007C66 66390D[52570000]    <1> 		cmp [lastmouseposition + 2], cx
 10070 00007C6D 0F82F1010000        <1> 		jb near nexticonsel
 10071 00007C73 66391D[52570000]    <1> 		cmp [lastmouseposition + 2], bx
 10072 00007C7A 0F87E4010000        <1> 		ja near nexticonsel
 10073 00007C80 668B460A            <1> 		mov ax, [esi + 10]
 10074 00007C84 2410                <1> 		and al, 00010000b
 10075 00007C86 663D1000            <1> 		cmp ax, 00010000b
 10076 00007C8A 0F8442000000        <1> 		je near nodragtext
 10077 00007C90 8935[A9790000]      <1> 		mov [dragging], esi
 10078 00007C96 662B15[50570000]    <1> 		sub dx, [lastmouseposition]
 10079 00007C9D 660315[54570000]    <1> 		add dx, [mousecursorposition]
 10080 00007CA4 66030D[56570000]    <1> 		add cx, [mousecursorposition + 2]
 10081 00007CAB 662B0D[52570000]    <1> 		sub cx, [lastmouseposition + 2]
 10082 00007CB2 663B15[5E550000]    <1> 		cmp dx, [resolutionx2]
 10083 00007CB9 7607                <1> 		jbe chkyresdrgtxt
 10084 00007CBB 668B15[54570000]    <1> 		mov dx, [mousecursorposition]
 10085                              <1> 	chkyresdrgtxt:
 10086 00007CC2 663B0D[72540000]    <1> 		cmp cx, [resolutiony]
 10087 00007CC9 7607                <1> 		jbe nodragtext
 10088 00007CCB 668B0D[56570000]    <1> 		mov cx, [mousecursorposition + 2]
 10089                              <1> 	nodragtext:
 10090 00007CD2 66814E0A0100        <1> 		or word [esi + 10], 1
 10091 00007CD8 8B5E0C              <1> 		mov ebx, [esi + 12]
 10092 00007CDB 891D[F9810000]      <1> 		mov [codepointer], ebx
 10093 00007CE1 668B460A            <1> 		mov ax, [esi + 10]
 10094 00007CE5 8B7602              <1> 		mov esi, [esi + 2]
 10095 00007CE8 E8D6F4FFFF          <1> 		call showstring
 10096 00007CED E98B010000          <1> 		jmp doneiconsel
 10097                              <1> 	unselecttext:
 10098 00007CF2 6681660AFEFF        <1> 		and word [esi + 10], 0xFFFE
 10099 00007CF8 8B5E0C              <1> 		mov ebx, [esi + 12]
 10100 00007CFB 668B460A            <1> 		mov ax, [esi + 10]
 10101 00007CFF 8B7602              <1> 		mov esi, [esi + 2]
 10102 00007D02 C705[F9810000]0000- <1> 		mov dword [codepointer], 0
 10103 00007D0A 0000                <1>
 10104 00007D0C E8B2F4FFFF          <1> 		call showstring
 10105 00007D11 E967010000          <1> 		jmp doneiconsel
 10106                              <1> windowselect:
 10107 00007D16 8B7E02              <1> 		mov edi, [esi + 2]
 10108 00007D19 668B5606            <1> 		mov dx, [esi + 6]
 10109 00007D1D 6689D0              <1> 		mov ax, dx
 10110 00007D20 668B4E08            <1> 		mov cx, [esi + 8]
 10111 00007D24 6689CB              <1> 		mov bx, cx
 10112 00007D27 6681C31000          <1> 		add bx, 16
 10113 00007D2C 813D[A9790000]0100- <1> 		cmp dword [dragging], 1
 10114 00007D34 0000                <1>
 10115 00007D36 746D                <1> 		je dragwin
 10116 00007D38 813D[A9790000]0000- <1> 		cmp dword [dragging], 0
 10117 00007D40 0000                <1>
 10118 00007D42 7411                <1> 		je nodragwincheck
 10119 00007D44 3935[A9790000]      <1> 		cmp dword [dragging], esi
 10120 00007D4A 0F8514010000        <1> 		jne near nexticonsel
 10121 00007D50 E950000000          <1> 		jmp dragwin
 10122                              <1> 	nodragwincheck:
 10123 00007D55 663905[54570000]    <1> 		cmp [mousecursorposition], ax
 10124 00007D5C 0F8202010000        <1> 		jb near nexticonsel
 10125 00007D62 660307              <1> 		add ax, [edi]
 10126 00007D65 660307              <1> 		add ax, [edi]
 10127 00007D68 663905[54570000]    <1> 		cmp [mousecursorposition], ax
 10128 00007D6F 0F87EF000000        <1> 		ja near nexticonsel
 10129 00007D75 66390D[56570000]    <1> 		cmp [mousecursorposition + 2], cx
 10130 00007D7C 0F82E2000000        <1> 		jb near nexticonsel
 10131 00007D82 66391D[56570000]    <1> 		cmp [mousecursorposition + 2], bx
 10132 00007D89 0F87D5000000        <1> 		ja near nexticonsel
 10133 00007D8F 662D1400            <1> 		sub ax, 20
 10134 00007D93 663905[54570000]    <1> 		cmp [mousecursorposition], ax
 10135 00007D9A 0F87A4000000        <1> 		ja near killwin
 10136 00007DA0 E98B000000          <1> 		jmp nodragwin
 10137                              <1> 	dragwin:
 10138 00007DA5 663905[50570000]    <1> 		cmp [lastmouseposition], ax
 10139 00007DAC 0F82B2000000        <1> 		jb near nexticonsel
 10140 00007DB2 660307              <1> 		add ax, [edi]
 10141 00007DB5 660307              <1> 		add ax, [edi]
 10142 00007DB8 663905[50570000]    <1> 		cmp [lastmouseposition], ax
 10143 00007DBF 0F879F000000        <1> 		ja near nexticonsel
 10144 00007DC5 66390D[52570000]    <1> 		cmp [lastmouseposition + 2], cx
 10145 00007DCC 0F8292000000        <1> 		jb near nexticonsel
 10146 00007DD2 66391D[52570000]    <1> 		cmp [lastmouseposition + 2], bx
 10147 00007DD9 0F8785000000        <1> 		ja near nexticonsel
 10148 00007DDF 8935[A9790000]      <1> 		mov [dragging], esi
 10149 00007DE5 803D[0D7F0000]01    <1> 		cmp byte [windrag], 1
 10150 00007DEC 7706                <1> 		ja .nochangewindrag
 10151 00007DEE FE05[0D7F0000]      <1> 		inc byte [windrag]
 10152                              <1> 	.nochangewindrag:
 10153 00007DF4 662B15[50570000]    <1> 		sub dx, [lastmouseposition]
 10154 00007DFB 660315[54570000]    <1> 		add dx, [mousecursorposition]
 10155 00007E02 66030D[56570000]    <1> 		add cx, [mousecursorposition + 2]
 10156 00007E09 662B0D[52570000]    <1> 		sub cx, [lastmouseposition + 2]
 10157 00007E10 663B15[5E550000]    <1> 		cmp dx, [resolutionx2]
 10158 00007E17 7607                <1> 		jbe chkyresdrgwin
 10159 00007E19 668B15[54570000]    <1> 		mov dx, [mousecursorposition]
 10160                              <1> 	chkyresdrgwin:
 10161 00007E20 663B0D[72540000]    <1> 		cmp cx, [resolutiony]
 10162 00007E27 7607                <1> 		jbe nodragwin
 10163 00007E29 668B0D[56570000]    <1> 		mov cx, [mousecursorposition + 2]
 10164                              <1> 	nodragwin:
 10165 00007E30 8B5E0C              <1> 		mov ebx, [esi + 12]
 10166 00007E33 668B460A            <1> 		mov ax, [esi + 10]
 10167 00007E37 8B7602              <1> 		mov esi, [esi + 2]
 10168 00007E3A E811F6FFFF          <1> 		call showwindow
 10169 00007E3F E939000000          <1> 		jmp doneiconsel
 10170                              <1> 	killwin:
 10171 00007E44 66C7060000          <1> 		mov word [esi], 0
 10172 00007E49 C605[A2230000]00    <1> 		mov byte [termguion], 0
 10173 00007E50 E8E0ECFFFF          <1> 		call guiclear
 10174 00007E55 E82BEDFFFF          <1> 		call reloadallgraphics
 10175 00007E5A E872EAFFFF          <1> 		call switchmousepos2 ;Copy what is now under the mouse
 10176 00007E5F E94EE6FFFF          <1> 		jmp guistart
 10177                              <1> 	nexticonsel:
 10178 00007E64 6681660AFEFF        <1> 		and word [esi + 10], 0xFFFE
 10179 00007E6A 81C610000000        <1> 		add esi, 16
 10180 00007E70 81FE[6DB70300]      <1> 		cmp esi, graphicstableend
 10181 00007E76 7305                <1> 		jae doneiconsel
 10182 00007E78 E9ADFBFFFF          <1> 		jmp clicon2
 10183                              <1> 	doneiconsel:
 10184 00007E7D 813D[A9790000]0100- <1> 		cmp dword [dragging], 1
 10185 00007E85 0000                <1>
 10186 00007E87 731A                <1> 		jae doneiconsel2
 10187 00007E89 A2[0D7F0000]        <1> 		mov [windrag], al
 10188 00007E8E 813D[F9810000]0000- <1> 		cmp dword [codepointer], 0
 10189 00007E96 0000                <1>
 10190 00007E98 7409                <1> 		je doneiconsel2
 10191 00007E9A 8B1D[F9810000]      <1> 		mov ebx, [codepointer]
 10192 00007EA0 FFD3                <1> 		call ebx
 10193 00007EA2 C3                  <1> 		ret
 10194                              <1> 	doneiconsel2:
 10195 00007EA3 A0[65580000]        <1> 		mov al, [LBUTTON]
 10196 00007EA8 A2[A7790000]        <1> 		mov [pLBUTTON], al
 10197 00007EAD A0[66580000]        <1> 		mov al, [RBUTTON]
 10198 00007EB2 A2[A8790000]        <1> 		mov [pRBUTTON], al
 10199 00007EB7 813D[A9790000]0100- <1> 		cmp dword [dragging], 1
 10200 00007EBF 0000                <1>
 10201 00007EC1 0F8618000000        <1> 		jbe near noreloadgraphicsclick
 10202 00007EC7 E805EAFFFF          <1> 		call switchmousepos2
 10203 00007ECC 803D[0D7F0000]01    <1> 		cmp byte [windrag], 1
 10204 00007ED3 7305                <1> 		jae noclearcursorcl
 10205 00007ED5 E83FE9FFFF          <1> 		call clearmousecursor
 10206                              <1> noclearcursorcl:
 10207 00007EDA E8A6ECFFFF          <1> 		call reloadallgraphics
 10208                              <1> noreloadgraphicsclick:
 10209 00007EDF 30E4                <1> 		xor ah, ah
 10210 00007EE1 31C9                <1> 		xor ecx, ecx
 10211 00007EE3 31D2                <1> 		xor edx, edx
 10212 00007EE5 B001                <1> 		mov al, 1
 10213 00007EE7 668B15[54570000]    <1> 		mov dx, [mousecursorposition]
 10214 00007EEE 668B0D[56570000]    <1> 		mov cx, [mousecursorposition + 2]
 10215 00007EF5 66BBE738            <1> 		mov bx, 0011100011100111b
 10216 00007EF9 C605[A3790000]01    <1> 		mov byte [showcursorfonton], 1
 10217 00007F00 E84AF3FFFF          <1> 		call showfontvesa
 10218 00007F05 C605[A3790000]00    <1> 		mov byte [showcursorfonton], 0
 10219 00007F0C C3                  <1> 		ret
 10220 00007F0D 00                  <1> windrag db 0
 10221 00007F0E 00000000            <1> lastdrag dw 0,0
 10222 00007F12 00000000            <1> grpctblpos dw 0,0
 10223                              <1> 
 10224                              <1> 
 10225                              <1> 
 10226 00007F16 00<rept>            <1> grphbuf times 16 db 0
 10227                              <1> 	graphicsadd:
 10228 00007F26 BF[6DB50300]        <1> 		mov edi, graphicstable
 10229                              <1> 	shwgrph1:
 10230 00007F2B 397702              <1> 		cmp dword [edi + 2], esi
 10231 00007F2E 7414                <1> 		je showgraphicsreplace2
 10232 00007F30 81C710000000        <1> 		add edi, 16
 10233 00007F36 81FF[6DB70300]      <1> 		cmp edi, graphicstableend
 10234 00007F3C 0F8337020000        <1> 		jae near showgraphicsnew
 10235 00007F42 EBE7                <1> 		jmp shwgrph1
 10236                              <1> 	showgraphicsreplace2:
 10237 00007F44 8935[187F0000]      <1> 		mov [grphbuf + 2], esi
 10238 00007F4A 668915[1C7F0000]    <1> 		mov [grphbuf + 6], dx
 10239 00007F51 66890D[1E7F0000]    <1> 		mov [grphbuf + 8], cx
 10240 00007F58 891D[227F0000]      <1> 		mov [grphbuf + 12], ebx
 10241 00007F5E 30FF                <1> 		xor bh, bh
 10242 00007F60 88E3                <1> 		mov bl, ah
 10243 00007F62 30E4                <1> 		xor ah, ah
 10244 00007F64 66A3[207F0000]      <1> 		mov [grphbuf + 10], ax	
 10245 00007F6A 66891D[167F0000]    <1> 		mov [grphbuf], bx
 10246 00007F71 66A1[167F0000]      <1> 		mov ax, [grphbuf]
 10247 00007F77 663D0100            <1> 		cmp ax, 1
 10248 00007F7B 0F8419000000        <1> 		je near replaceicon
 10249 00007F81 663D0200            <1> 		cmp ax, 2
 10250 00007F85 0F8493000000        <1> 		je near replacestring
 10251 00007F8B 663D0300            <1> 		cmp ax, 3
 10252 00007F8F 0F840F010000        <1> 		je near replacewindow
 10253 00007F95 E9BC010000          <1> 		jmp showgraphicsreplace
 10254                              <1> 	replaceicon:
 10255 00007F9A 893D[AD790000]      <1> 		mov [lastpos], edi
 10256 00007FA0 8935[B1790000]      <1> 		mov [lastpos + 4], esi
 10257 00007FA6 8B7702              <1> 		mov esi, [edi + 2]
 10258 00007FA9 668B5F0C            <1> 		mov bx, [edi + 12]
 10259 00007FAD 668B5706            <1> 		mov dx, [edi + 6]
 10260 00007FB1 668B4F08            <1> 		mov cx, [edi + 8]
 10261 00007FB5 668B06              <1> 		mov ax, [esi]
 10262 00007FB8 66A3[B5790000]      <1> 		mov [colorbuf], ax
 10263 00007FBE 66A1[816B0000]      <1> 		mov ax, [background]
 10264 00007FC4 668906              <1> 		mov [esi], ax
 10265 00007FC7 8B5F0C              <1> 		mov ebx, [edi + 12]
 10266 00007FCA 668B470A            <1> 		mov ax, [edi + 10]
 10267 00007FCE 2401                <1> 		and al, 1
 10268 00007FD0 A2[FD810000]        <1> 		mov [iconselected], al
 10269 00007FD5 668B470A            <1> 		mov ax, [edi + 10]
 10270 00007FD9 E869E9FFFF          <1> 		call showicon2
 10271 00007FDE 8B3D[AD790000]      <1> 		mov edi, [lastpos]
 10272 00007FE4 8B7702              <1> 		mov esi, [edi + 2]
 10273 00007FE7 66A1[B5790000]      <1> 		mov ax, [colorbuf]
 10274 00007FED 668906              <1> 		mov [esi], ax
 10275 00007FF0 8B35[B1790000]      <1> 		mov esi, [lastpos + 4]
 10276 00007FF6 668B15[1C7F0000]    <1> 		mov dx, [grphbuf + 6]
 10277 00007FFD 668B0D[1E7F0000]    <1> 		mov cx, [grphbuf + 8]
 10278 00008004 668B1D[167F0000]    <1> 		mov bx, [grphbuf]
 10279 0000800B 66A1[207F0000]      <1> 		mov ax, [grphbuf + 10]
 10280 00008011 88DC                <1> 		mov ah, bl
 10281 00008013 8B1D[227F0000]      <1> 		mov ebx, [grphbuf + 12]
 10282 00008019 E938010000          <1> 		jmp showgraphicsreplace
 10283                              <1> 	replacestring:
 10284 0000801E 893D[AD790000]      <1> 		mov [lastpos], edi
 10285 00008024 8935[B1790000]      <1> 		mov [lastpos + 4], esi
 10286 0000802A 8B5F0C              <1> 		mov ebx, [edi + 12]
 10287 0000802D 8B7702              <1> 		mov esi, [edi + 2]
 10288 00008030 668B5706            <1> 		mov dx, [edi + 6]
 10289 00008034 668B4F08            <1> 		mov cx, [edi + 8]
 10290 00008038 66A1[3E720000]      <1> 		mov ax, [colorfont2]
 10291 0000803E 66A3[B5790000]      <1> 		mov [colorbuf], ax
 10292 00008044 66A1[816B0000]      <1> 		mov ax, [background]
 10293 0000804A 66A3[3E720000]      <1> 		mov [colorfont2], ax		
 10294 00008050 8B5F0C              <1> 		mov ebx, [edi + 12]
 10295 00008053 668B470A            <1> 		mov ax, [edi + 10]
 10296 00008057 2401                <1> 		and al, 1
 10297 00008059 A2[A5790000]        <1> 		mov [mouseselecton], al
 10298 0000805E 668B470A            <1> 		mov ax, [edi + 10]
 10299 00008062 E86FF1FFFF          <1> 		call showstring2
 10300 00008067 66A1[B5790000]      <1> 		mov ax, [colorbuf]
 10301 0000806D 66A3[3E720000]      <1> 		mov [colorfont2], ax
 10302 00008073 8B3D[AD790000]      <1> 		mov edi, [lastpos]
 10303 00008079 8B7702              <1> 		mov esi, [edi + 2]
 10304 0000807C 668B15[1C7F0000]    <1> 		mov dx, [grphbuf + 6]
 10305 00008083 668B0D[1E7F0000]    <1> 		mov cx, [grphbuf + 8]
 10306 0000808A 668B1D[167F0000]    <1> 		mov bx, [grphbuf]
 10307 00008091 66A1[207F0000]      <1> 		mov ax, [grphbuf + 10]
 10308 00008097 88DC                <1> 		mov ah, bl
 10309 00008099 8B1D[227F0000]      <1> 		mov ebx, [grphbuf + 12]
 10310 0000809F E9B2000000          <1> 		jmp showgraphicsreplace
 10311                              <1> 	replacewindow:
 10312 000080A4 893D[AD790000]      <1> 		mov [lastpos], edi
 10313 000080AA 8935[B1790000]      <1> 		mov [lastpos + 4], esi
 10314 000080B0 8B7702              <1> 		mov esi, [edi + 2]
 10315 000080B3 8B3D[3A740000]      <1> 		mov edi, [windowbufloc]
 10316 000080B9 31D2                <1> 		xor edx, edx
 10317 000080BB 668B15[5E550000]    <1> 		mov dx, [resolutionx2]
 10318 000080C2 C1E204              <1> 		shl edx, 4
 10319 000080C5 29D7                <1> 		sub edi, edx
 10320 000080C7 31D2                <1> 		xor edx, edx
 10321 000080C9 668B16              <1> 		mov dx, [esi]
 10322 000080CC 660316              <1> 		add dx, [esi]
 10323 000080CF 668B4E02            <1> 		mov cx, [esi + 2]
 10324 000080D3 6681C11000          <1> 		add cx, 16
 10325 000080D8 66A1[816B0000]      <1> 		mov ax, [background]
 10326 000080DE 803D[0D7F0000]01    <1> 		cmp byte [windrag], 1
 10327 000080E5 7604                <1> 		jbe clearwindow
 10328 000080E7 662B4E02            <1> 		sub cx, [esi + 2]
 10329                              <1> 	clearwindow:
 10330                              <1> 		%ifdef gui.background
 10331                              <1> 			cmp dword [backgroundimage], 0
 10332                              <1> 			je .noback
 10333                              <1> 			push esi
 10334                              <1> 			mov esi, [backgroundimage]
 10335                              <1> 			sub edi, [physbaseptr]
 10336                              <1> 			add esi, edi
 10337                              <1> 			add edi, [physbaseptr]
 10338                              <1> 			mov ax, [esi]
 10339                              <1> 			pop esi
 10340                              <1> 		.noback:
 10341                              <1> 		%endif
 10342 000080EB 668907              <1> 		mov [edi], ax
 10343 000080EE 81C702000000        <1> 		add edi, 2
 10344 000080F4 81EA02000000        <1> 		sub edx, 2
 10345 000080FA 81FA00000000        <1> 		cmp edx, 0
 10346 00008100 75E9                <1> 		jne clearwindow
 10347 00008102 6649                <1> 		dec cx
 10348 00008104 668B15[5E550000]    <1> 		mov dx, [resolutionx2]
 10349 0000810B 662B16              <1> 		sub dx, [esi]
 10350 0000810E 662B16              <1> 		sub dx, [esi]
 10351 00008111 01D7                <1> 		add edi, edx
 10352 00008113 668B16              <1> 		mov dx, [esi]
 10353 00008116 660316              <1> 		add dx, [esi]
 10354 00008119 6681F90000          <1> 		cmp cx, 0
 10355 0000811E 75CB                <1> 		jne clearwindow
 10356                              <1> 	endwindowclear:
 10357 00008120 C605[A3230000]00    <1> 		mov byte [termcopyon], 0
 10358 00008127 8B3D[AD790000]      <1> 		mov edi, [lastpos]
 10359 0000812D 8B35[187F0000]      <1> 		mov esi, [grphbuf + 2]
 10360 00008133 668B15[1C7F0000]    <1> 		mov dx, [grphbuf + 6]
 10361 0000813A 668B0D[1E7F0000]    <1> 		mov cx, [grphbuf + 8]
 10362 00008141 668B1D[167F0000]    <1> 		mov bx, [grphbuf]
 10363 00008148 66A1[207F0000]      <1> 		mov ax, [grphbuf + 10]
 10364 0000814E 88DC                <1> 		mov ah, bl
 10365 00008150 8B1D[227F0000]      <1> 		mov ebx, [grphbuf + 12]
 10366                              <1> 	showgraphicsreplace:
 10367 00008156 897702              <1> 		mov [edi + 2], esi
 10368 00008159 66895706            <1> 		mov [edi + 6], dx
 10369 0000815D 66894F08            <1> 		mov [edi + 8], cx
 10370 00008161 895F0C              <1> 		mov [edi + 12], ebx
 10371 00008164 30FF                <1> 		xor bh, bh
 10372 00008166 88E3                <1> 		mov bl, ah
 10373 00008168 30E4                <1> 		xor ah, ah
 10374 0000816A 6689470A            <1> 		mov [edi + 10], ax
 10375 0000816E 66891F              <1> 		mov [edi], bx
 10376 00008171 8B5F0C              <1> 		mov ebx, [edi + 12]
 10377 00008174 668B470A            <1> 		mov ax, [edi + 10]
 10378 00008178 C3                  <1> 		ret
 10379                              <1> 	showgraphicsnew:
 10380 00008179 BF[6DB50300]        <1> 		mov edi, graphicstable
 10381                              <1> 	shwgrph2:
 10382 0000817E 66813F0000          <1> 		cmp word [edi], 0
 10383 00008183 74D1                <1> 		je showgraphicsreplace
 10384 00008185 81C710000000        <1> 		add edi, 16
 10385 0000818B 81FF[6DB70300]      <1> 		cmp edi, graphicstableend
 10386 00008191 72EB                <1> 		jb shwgrph2
 10387                              <1> 	showgraphicsdone:
 10388 00008193 C3                  <1> 		ret
 10389                              <1> 	
 10390                              <1> putpixel: ;color in si, point is (dx,cx)
 10391                              <1> 		;destroys edi, ebx, eax
 10392 00008194 6650                <1> 	push ax
 10393 00008196 6653                <1> 	push bx
 10394 00008198 31C0                <1> 	xor eax, eax
 10395 0000819A 31DB                <1> 	xor ebx, ebx
 10396 0000819C 31FF                <1> 	xor edi, edi
 10397 0000819E 668B1D[72540000]    <1> 	mov bx, [resolutiony]
 10398 000081A5 66A1[70540000]      <1> 	mov ax, [resolutionx]
 10399 000081AB 6639C2              <1> 	cmp dx, ax
 10400 000081AE 7720                <1> 	ja .doneput
 10401 000081B0 66D1E0              <1> 	shl ax, 1
 10402 000081B3 6639D9              <1> 	cmp cx, bx
 10403 000081B6 7718                <1> 	ja .doneput
 10404 000081B8 6689CB              <1> 	mov bx, cx
 10405 000081BB 52                  <1> 	push edx
 10406 000081BC F7E3                <1> 	mul ebx
 10407 000081BE 5A                  <1> 	pop edx
 10408 000081BF 6601D7              <1> 	add di, dx
 10409 000081C2 6601D7              <1> 	add di, dx
 10410 000081C5 01C7                <1> 	add edi, eax
 10411 000081C7 033D[86540000]      <1> 	add edi, [physbaseptr]
 10412 000081CD 668937              <1> 	mov [edi], si
 10413                              <1> .doneput:
 10414 000081D0 665B                <1> 	pop bx
 10415 000081D2 6658                <1> 	pop ax
 10416 000081D4 C3                  <1> 	ret
 10417                              <1> 	
 10418                              <1> getpixelmem:	;pixel in (dx, cx), outputs memory location in edi
 10419 000081D5 31FF                <1> 	xor edi, edi
 10420 000081D7 31C0                <1> 	xor eax, eax
 10421 000081D9 31DB                <1> 	xor ebx, ebx
 10422 000081DB 668B1D[5E550000]    <1> 	mov bx, [resolutionx2]
 10423 000081E2 6689D7              <1> 	mov di, dx
 10424 000081E5 6601D7              <1> 	add di, dx
 10425 000081E8 6689C8              <1> 	mov ax, cx
 10426 000081EB F7E3                <1> 	mul ebx
 10427 000081ED 01C7                <1> 	add edi, eax
 10428 000081EF 033D[86540000]      <1> 	add edi, [physbaseptr]
 10429 000081F5 C3                  <1> 	ret
 10430                              <1> 
 10431 000081F6 00                  <1> 	mouseon db 0
 10432 000081F7 0000                <1> 	icon dw 0	;pointer to icon
 10433 000081F9 00000000            <1> 	codepointer dd 0 ;pointer to code
 10434 000081FD 00                  <1> 	iconselected db 0
 10435                                  %endif
 10436                                  %ifdef network.included
 10437                                  	%include "source/network.asm"
 10438                                  %endif
 10439                                      %include "source/data.asm"
 10440 000081FE 626F6F742E736800    <1> 	bootfilename db "boot.sh",0
 10441 00008206 73687573683A2000    <1> 	notfound1 db "shush: ",0
 10442 0000820E 3A206E6F7420666F75- <1> 	notfound2 db  ": not found",10,0
 10443 00008217 6E640A00            <1>
 10444 0000821B 757365726E616D653A- <1> 	userask db "username:",0
 10445 00008224 00                  <1>
 10446 00008225 70617373776F72643A- <1> 	pwdask	db	"password:",0
 10447 0000822E 00                  <1>
 10448 0000822F 40                  <1> 	computer db "@"
 10449                              <1> %ifdef io.serial
 10450                              <1> 	computername	db	"SollerOS.",io.serial," ",0
 10451                              <1> %else
 10452 00008230 536F6C6C65724F5320- <1> 	computername	db	"SollerOS ",0
 10453 00008239 00                  <1>
 10454                              <1> %endif
 10455 0000823A 5D242000            <1> 	endprompt db "]$ ",0
 10456 0000823E 0D                  <1> 	crlf 	db  13
 10457 0000823F 0A00                <1> 	line	db	10,0
 10458                              <1> 	userlst:
 10459 00008241 726F6F7400          <1> 			db "root",0
 10460 00008246 617765736F6D65706F- <1> 			db "awesomepower",0
 10461 0000824F 77657200            <1>
 10462 00008253 7573657200          <1> 			db "user",0
 10463 00008258 70617373776F726400  <1> 			db "password",0
 10464 00008261 6E00                <1> 			db "n",0	;;abuse for quick entry-a quick double n followed by a double enter will get you in
 10465 00008263 00                  <1> 			db 0
 10466                              <1> 	userlstend:
 10467                              <1> 	
 10468 00008264 00                  <1> 	guion db 0
 10469 00008265 00                  <1> 	DriveNumber db 0
 10470 00008266 00000000            <1> 	lbaad dd 0
 10471 0000826A 00<rept>            <1> 	memlistbuf times 576 db 0
 10472 000084AA 00000000            <1> 	memlistend: dd 0
 10473                              <1> %ifdef io.serial
 10474                              <1> %else
 10475 000084AA <incbin>            <1> fonts:	incbin "source/fonts/fonts.pak"
 10476                              <1> fontend:
 10477                              <1> %endif
 10478                              <1> osend:	;this is the end of the operating system's space on disk
 10479                                  %ifdef disk.none
 10480                                  	diskfileindex:
 10481                                  	enddiskfileindex:
 10482                                  	align 512, db 0
 10483                                      %include "source/bss.asm"
 10484                                  %else
 10485                                      %include "build/fileindex.asm"
 10486                              <1> diskfileindex:
 10487 000384AE 617267746573742E65- <1> db "argtest.elf",0
 10488 000384B7 6C6600              <1>
 10489 000384BA C4010000            <1> dd (f0-$$)/512
 10490 000384BE 46000000            <1> dd (f1-f0)/512
 10491 000384C2 6261636B67726F756E- <1> db "background.bmp",0
 10492 000384CB 642E626D7000        <1>
 10493 000384D1 0A020000            <1> dd (f1-$$)/512
 10494 000384D5 01140000            <1> dd (f2-f1)/512
 10495 000384D9 626F6F742E736800    <1> db "boot.sh",0
 10496 000384E1 0B160000            <1> dd (f2-$$)/512
 10497 000384E5 01000000            <1> dd (f3-f2)/512
 10498 000384E9 63686172746573742E- <1> db "chartest.elf",0
 10499 000384F2 656C6600            <1>
 10500 000384F6 0C160000            <1> dd (f3-$$)/512
 10501 000384FA 4E000000            <1> dd (f4-f3)/512
 10502 000384FE 646F73746573742E63- <1> db "dostest.com",0
 10503 00038507 6F6D00              <1>
 10504 0003850A 5A160000            <1> dd (f4-$$)/512
 10505 0003850E 01000000            <1> dd (f5-f4)/512
 10506 00038512 6578656300          <1> db "exec",0
 10507 00038517 5B160000            <1> dd (f5-$$)/512
 10508 0003851B 01000000            <1> dd (f6-f5)/512
 10509 0003851F 66696E616C636F756E- <1> db "finalcount.sn",0
 10510 00038528 742E736E00          <1>
 10511 0003852D 5C160000            <1> dd (f6-$$)/512
 10512 00038531 01000000            <1> dd (f7-f6)/512
 10513 00038535 666C6F7070792E7478- <1> db "floppy.txt",0
 10514 0003853E 7400                <1>
 10515 00038540 5D160000            <1> dd (f7-$$)/512
 10516 00038544 0A000000            <1> dd (f8-f7)/512
 10517 00038548 666F726B00          <1> db "fork",0
 10518 0003854D 67160000            <1> dd (f8-$$)/512
 10519 00038551 01000000            <1> dd (f9-f8)/512
 10520 00038555 677261766974792E65- <1> db "gravity.elf",0
 10521 0003855E 6C6600              <1>
 10522 00038561 68160000            <1> dd (f9-$$)/512
 10523 00038565 46000000            <1> dd (f10-f9)/512
 10524 00038569 6775697465737400    <1> db "guitest",0
 10525 00038571 AE160000            <1> dd (f10-$$)/512
 10526 00038575 03000000            <1> dd (f11-f10)/512
 10527 00038579 68656C6C6F776F726C- <1> db "helloworld.elf",0
 10528 00038582 642E656C6600        <1>
 10529 00038588 B1160000            <1> dd (f11-$$)/512
 10530 0003858C 86000000            <1> dd (f12-f11)/512
 10531 00038590 696E7400            <1> db "int",0
 10532 00038594 37170000            <1> dd (f12-$$)/512
 10533 00038598 01000000            <1> dd (f13-f12)/512
 10534 0003859C 6C6F7374776F6F6473- <1> db "lostwoods.sn",0
 10535 000385A5 2E736E00            <1>
 10536 000385A9 38170000            <1> dd (f13-$$)/512
 10537 000385AD 01000000            <1> dd (f14-f13)/512
 10538 000385B1 6D6172696F2E736E00  <1> db "mario.sn",0
 10539 000385BA 39170000            <1> dd (f14-$$)/512
 10540 000385BE 01000000            <1> dd (f15-f14)/512
 10541 000385C2 6D6F6D656E742E7761- <1> db "moment.wav",0
 10542 000385CB 7600                <1>
 10543 000385CD 3A170000            <1> dd (f15-$$)/512
 10544 000385D1 570A0000            <1> dd (f16-f15)/512
 10545 000385D5 70692E656C6600      <1> db "pi.elf",0
 10546 000385DC 91210000            <1> dd (f16-$$)/512
 10547 000385E0 4E000000            <1> dd (f17-f16)/512
 10548 000385E4 72617974726163652E- <1> db "raytrace.elf",0
 10549 000385ED 656C6600            <1>
 10550 000385F1 DF210000            <1> dd (f17-$$)/512
 10551 000385F5 1E000000            <1> dd (f18-f17)/512
 10552 000385F9 736F6C6C65726F732E- <1> db "solleros.bmp",0
 10553 00038602 626D7000            <1>
 10554 00038606 FD210000            <1> dd (f18-$$)/512
 10555 0003860A B0020000            <1> dd (f19-f18)/512
 10556 0003860E 736F6C6C65726F732E- <1> db "solleros.txt",0
 10557 00038617 74787400            <1>
 10558 0003861B AD240000            <1> dd (f19-$$)/512
 10559 0003861F 01000000            <1> dd (f20-f19)/512
 10560 00038623 736F6E676F74696D65- <1> db "songotime.sn",0
 10561 0003862C 2E736E00            <1>
 10562 00038630 AE240000            <1> dd (f20-$$)/512
 10563 00038634 01000000            <1> dd (f21-f20)/512
 10564 00038638 73736500            <1> db "sse",0
 10565 0003863C AF240000            <1> dd (f21-$$)/512
 10566 00038640 02000000            <1> dd (f22-f21)/512
 10567 00038644 737464696F74657374- <1> db "stdiotest.elf",0
 10568 0003864D 2E656C6600          <1>
 10569 00038652 B1240000            <1> dd (f22-$$)/512
 10570 00038656 4E000000            <1> dd (f23-f22)/512
 10571 0003865A 74656C7900          <1> db "tely",0
 10572 0003865F FF240000            <1> dd (f23-$$)/512
 10573 00038663 01000000            <1> dd (f24-f23)/512
 10574 00038667 74696D65746573742E- <1> db "timetest.elf",0
 10575 00038670 656C6600            <1>
 10576 00038674 00250000            <1> dd (f24-$$)/512
 10577 00038678 46000000            <1> dd (f25-f24)/512
 10578 0003867C 7475746F7269616C2E- <1> db "tutorial.sh",0
 10579 00038685 736800              <1>
 10580 00038688 46250000            <1> dd (f25-$$)/512
 10581 0003868C 03000000            <1> dd (f26-f25)/512
 10582 00038690 756E667300          <1> db "unfs",0
 10583 00038695 49250000            <1> dd (f26-$$)/512
 10584 00038699 02000000            <1> dd (f27-f26)/512
 10585 0003869D 7574662D382E747874- <1> db "utf-8.txt",0
 10586 000386A6 00                  <1>
 10587 000386A7 4B250000            <1> dd (f27-$$)/512
 10588 000386AB 02000000            <1> dd (f28-f27)/512
 10589 000386AF 766963746F72792E77- <1> db "victory.wav",0
 10590 000386B8 617600              <1>
 10591 000386BB 4D250000            <1> dd (f28-$$)/512
 10592 000386BF 16000000            <1> dd (f29-f28)/512
 10593 000386C3 5F696D672E62696E00  <1> db "_img.bin",0
 10594 000386CC 63250000            <1> dd (f29-$$)/512
 10595 000386D0 D7020000            <1> dd (f30-f29)/512
 10596                              <1> enddiskfileindex:
 10597                              <1> 
 10598                                      %include "source/bss.asm"
 10599                              <1> align 4, nop
 10600                              <1> bssstart: equ $
 10601                              <1> bsscopy equ $
 10602                              <1> initialstack equ bsscopy
 10603                              <1> stackend equ initialstack + 4000
 10604                              <1> sigtable equ stackend + 96
 10605                              <1> fileindex: equ sigtable + 4
 10606                              <1> fileindexend: equ fileindex + 1024
 10607                              <1> previousstack equ fileindexend
 10608                              <1> lastfolderloc equ previousstack + 4
 10609                              <1> currentfolderloc equ lastfolderloc + 4
 10610                              <1> currentfolder equ currentfolderloc + 4
 10611                              <1> currentfolderend equ currentfolder + 512
 10612                              <1> uid equ currentfolderend
 10613                              <1> ranboot equ uid + 4
 10614                              <1> IFON equ ranboot + 1
 10615                              <1> IFTRUE equ IFON + 1
 10616                              <1> BATCHPOS equ IFTRUE + 100
 10617                              <1> BATCHISON equ BATCHPOS + 4
 10618                              <1> LOOPON equ BATCHISON + 1
 10619                              <1> LOOPPOS	equ LOOPON + 1
 10620                              <1> variables: equ LOOPPOS + 4
 10621                              <1> varend: equ variables + 4096
 10622                              <1> buftxt2: equ varend
 10623                              <1> buftxt: equ buftxt2 + 1024
 10624                              <1> buftxtend: equ buftxt + 1024
 10625                              <1> buf2: equ buftxtend
 10626                              <1> numbuf: equ buf2 + 20
 10627                              <1> %ifdef io.serial
 10628                              <1> 	lastcommandpos equ numbuf + 1
 10629                              <1> %else
 10630                              <1> 	%ifdef gui.included
 10631                              <1> 		graphicstable equ numbuf + 1 ;w type, dw datalocation, w locationx, w locationy, w selected, dw code
 10632                              <1> 		graphicstableend equ graphicstable + 200h
 10633                              <1> 		%ifdef gui.background
 10634                              <1> 			backgroundbuffer equ graphicstableend
 10635                              <1> 			backgroundbufferend equ backgroundbuffer + 1280*1026*2
 10636                              <1> 			mousecolorbuf equ backgroundbufferend
 10637                              <1> 		%else
 10638                              <1> 			mousecolorbuf equ graphicstableend ;where the gui under the mouse is stored
 10639                              <1> 		%endif
 10640                              <1> 		mcolorend equ mousecolorbuf + 256
 10641                              <1> 		videobuf equ mcolorend + 1	;1680x1050 pixels in characters
 10642                              <1> 		videobufend	equ videobuf + 210*65*4;2
 10643                              <1> 		videobuf2 equ videobufend
 10644                              <1> 		videobuf2end equ videobuf2 + 210*65*4;2
 10645                              <1> 	%else
 10646                              <1> 		videobuf equ numbuf + 1
 10647                              <1> 		videobufend equ videobuf + 80*30*4
 10648                              <1> 		videobuf2 equ videobufend
 10649                              <1> 		videobuf2end equ videobuf2 + 80*30*4
 10650                              <1> 	%endif
 10651                              <1> 	lastcommandpos: equ videobuf2end
 10652                              <1> %endif
 10653                              <1> 	commandbufpos: equ lastcommandpos + 4
 10654                              <1> 	commandlistentries: equ commandbufpos + 4
 10655                              <1> 	commandsentered: equ commandlistentries + 4
 10656                              <1> 	commandbuf: equ commandsentered + 4
 10657                              <1> 	commandbufend: equ commandbuf + 4096 ;this is where kernel space only ends, the rest is for threading
 10658                              <1> %ifdef network.included
 10659                              <1> 	rbuffstart: equ commandbufend ;for use with networking
 10660                              <1> 	rbuffend equ rbuffstart + 8212
 10661                              <1> %else
 10662                              <1> 	rbuffstart equ commandbufend
 10663                              <1> 	rbuffend equ commandbufend
 10664                              <1> %endif
 10665                              <1> %ifdef threads.included
 10666                              <1> 	threadlist: equ rbuffend ;this buffer will hold the stack locations of all of the threads, up to 2048
 10667                              <1> 	threadlistend: equ threadlist + 1024*4
 10668                              <1> 	stacks:	equ threadlistend ;i use SS now for proper stack management. This makes sure stacks never screw with other memory
 10669                              <1> 	stack1: equ stacks + 1024  ;woah, thats a lot of space for stacks
 10670                              <1> 	bssend equ stack1 + 1024*1024
 10671                              <1> %else
 10672                              <1> 	bssend equ rbuffend
 10673                              <1> %endif
 10674                              <1> dosprogloc equ 0x400000 ;from here on, it is not kernel space so apps can be loaded here.
 10675                                      %include "build/files.asm"
 10676 000386D4 00<rept>            <1> align 512,db 0
 10677                              <1> f0:
 10678 000386D4 <incbin>            <1> incbin "included/argtest.elf"
 10679 00041320 00<rept>            <1> align 512,db 0
 10680                              <1> f1:
 10681 00041320 <incbin>            <1> incbin "included/background.bmp"
 10682 002C1446 00<rept>            <1> align 512,db 0
 10683                              <1> f2:
 10684 002C1446 <incbin>            <1> incbin "included/boot.sh"
 10685 002C16FD 00<rept>            <1> align 512,db 0
 10686                              <1> f3:
 10687 002C16FD <incbin>            <1> incbin "included/chartest.elf"
 10688 002CB320 00<rept>            <1> align 512,db 0
 10689                              <1> f4:
 10690 002CB320 <incbin>            <1> incbin "included/dostest.com"
 10691 002CB531 00<rept>            <1> align 512,db 0
 10692                              <1> f5:
 10693 002CB531 <incbin>            <1> incbin "included/exec"
 10694 002CB6E1 00<rept>            <1> align 512,db 0
 10695                              <1> f6:
 10696 002CB6E1 <incbin>            <1> incbin "included/finalcount.sn"
 10697 002CB902 00<rept>            <1> align 512,db 0
 10698                              <1> f7:
 10699 002CB902 <incbin>            <1> incbin "included/floppy.txt"
 10700 002CCC66 00<rept>            <1> align 512,db 0
 10701                              <1> f8:
 10702 002CCC66 <incbin>            <1> incbin "included/fork"
 10703 002CCF58 00<rept>            <1> align 512,db 0
 10704                              <1> f9:
 10705 002CCF58 <incbin>            <1> incbin "included/gravity.elf"
 10706 002D5B20 00<rept>            <1> align 512,db 0
 10707                              <1> f10:
 10708 002D5B20 <incbin>            <1> incbin "included/guitest"
 10709 002D602B 00<rept>            <1> align 512,db 0
 10710                              <1> f11:
 10711 002D602B <incbin>            <1> incbin "included/helloworld.elf"
 10712 002E6DA8 00<rept>            <1> align 512,db 0
 10713                              <1> f12:
 10714 002E6DA8 <incbin>            <1> incbin "included/int"
 10715 002E6FAF 00<rept>            <1> align 512,db 0
 10716                              <1> f13:
 10717 002E6FAF <incbin>            <1> incbin "included/lostwoods.sn"
 10718 002E7056 00<rept>            <1> align 512,db 0
 10719                              <1> f14:
 10720 002E7056 <incbin>            <1> incbin "included/mario.sn"
 10721 002E723A 00<rept>            <1> align 512,db 0
 10722                              <1> f15:
 10723 002E723A <incbin>            <1> incbin "included/moment.wav"
 10724 0043203A 00<rept>            <1> align 512,db 0
 10725                              <1> f16:
 10726 0043203A <incbin>            <1> incbin "included/pi.elf"
 10727 0043BD38 00<rept>            <1> align 512,db 0
 10728                              <1> f17:
 10729 0043BD38 <incbin>            <1> incbin "included/raytrace.elf"
 10730 0043F920 00<rept>            <1> align 512,db 0
 10731                              <1> f18:
 10732 0043F920 <incbin>            <1> incbin "included/solleros.bmp"
 10733 004959E6 00<rept>            <1> align 512,db 0
 10734                              <1> f19:
 10735 004959E6 <incbin>            <1> incbin "included/solleros.txt"
 10736 00495B74 00<rept>            <1> align 512,db 0
 10737                              <1> f20:
 10738 00495B74 <incbin>            <1> incbin "included/songotime.sn"
 10739 00495C4A 00<rept>            <1> align 512,db 0
 10740                              <1> f21:
 10741 00495C4A <incbin>            <1> incbin "included/sse"
 10742 004960A8 00<rept>            <1> align 512,db 0
 10743                              <1> f22:
 10744 004960A8 <incbin>            <1> incbin "included/stdiotest.elf"
 10745 0049FD20 00<rept>            <1> align 512,db 0
 10746                              <1> f23:
 10747 0049FD20 <incbin>            <1> incbin "included/tely"
 10748 0049FFBA 00<rept>            <1> align 512,db 0
 10749                              <1> f24:
 10750 0049FFBA <incbin>            <1> incbin "included/timetest.elf"
 10751 004A8B20 00<rept>            <1> align 512,db 0
 10752                              <1> f25:
 10753 004A8B20 <incbin>            <1> incbin "included/tutorial.sh"
 10754 004A9152 00<rept>            <1> align 512,db 0
 10755                              <1> f26:
 10756 004A9152 <incbin>            <1> incbin "included/unfs"
 10757                              <1> align 512,db 0
 10758                              <1> f27:
 10759 004A9152 <incbin>            <1> incbin "included/utf-8.txt"
 10760 004A99C0 00<rept>            <1> align 512,db 0
 10761                              <1> f28:
 10762 004A99C0 <incbin>            <1> incbin "included/victory.wav"
 10763 004AC548 00<rept>            <1> align 512,db 0
 10764                              <1> f29:
 10765 004AC548 <incbin>            <1> incbin "included/_img.bin"
 10766                              <1> align 512,db 0
 10767                              <1> f30:
 10768                                  %endif
