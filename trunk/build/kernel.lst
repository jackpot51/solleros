     1                                  [map symbols build/kernel.map]
     2                                  %include "config.asm"
     3                              <1> ;These flags are used to configure options as on, put a simicolon in front of it to not configure it
     4                              <1> 
     5                              <1> ;%define gui.included
     6                              <1> ;Turn on the gui
     7                              <1> 
     8                              <1> ;%define io.serial "1"
     9                              <1> ;Use the specified serial port for input and output instead of the keyboard and screen
    10                              <1> ;If the gui is included this should not be enabled
    11                              <1> 
    12                              <1> %define threads.included
    13                              <1> ;Include the thread testing stuff-this uses a relatively large amount of memory
    14                              <1> 
    15                              <1> %define exceptions.included
    16                              <1> ;Display debugging information should crashes occur-also uses quite a bit of memory
    17                              <1> 
    18                              <1> ;%define disk.protected
    19                              <1> ;Use protected mode instead of real mode for disk access
    20                              <1> 
    21                              <1> %define disk.real
    22                              <1> ;Use real mode for disk access
    23                              <1> 
    24                              <1> ;%define sound.included
    25                              <1> ;This includes the sound drivers
    26                              <1> 
    27                              <1> ;%define rtl8139.included
    28                              <1> ;This includes the RTL8139 drivers
    29                              <1> 
    30                              <1> ;%define sector.debug
    31                              <1> ;Dump the contents of the first sector of SollerOS
    32                              <1> 
    33                              <1> ;FIX DEPENDANCIES
    34                              <1> %ifdef gui.included
    35                              <1> %undef io.serial
    36                              <1> %endif
    37                              <1> %ifdef disk.protected
    38                              <1> %undef disk.real
    39                              <1> %endif
    40                                  [BITS 16]
    41                                      %include "source/boot.asm"
    42                              <1>     ; MENU.ASM
    43                              <1> %include 'source/signature.asm'
    44                              <2> signature:
    45 00000000 536F6C6C65724F53    <2> db "SollerOS" ;Operating system name
    46 00000008 20416C706861204275- <2> db " Alpha Build ",0	;Soller OS development level
    47 00000011 696C642000          <2>
    48 00000016 D9000000            <2> dd 217	;version number
    49                              <2> signatureend:
    50                              <1> menustart:	
    51 0000001A 8CC8                <1> 	mov ax, cs
    52 0000001C 8ED8                <1> 	mov ds, ax
    53 0000001E 8EC0                <1> 	mov es, ax
    54 00000020 8ED0                <1> 	mov ss, ax
    55 00000022 880E[895D]          <1> 	mov [DriveNumber], cl
    56 00000026 668916[8A5D]        <1> 	mov [lbaad], edx
    57                              <1> %ifdef io.serial
    58                              <1> 	call getmemorysize
    59                              <1> 	mov si, serialmsg
    60                              <1> 	call printrm
    61                              <1> 	jmp pmode
    62                              <1> serialmsg: db "SollerOS: Using serial port ",io.serial," for I/O.",0
    63                              <1> %else
    64 0000002B E80300              <1> 	call vgaset	;make users switch using a command-this leads to very fast boots
    65 0000002E E95700              <1> 	jmp pmode
    66                              <1> %endif
    67                              <1> 	
    68                              <1> vgaset:
    69 00000031 B81200              <1> 	mov ax, 12h
    70 00000034 31DB                <1> 	xor bx, bx
    71 00000036 CD10                <1> 	int 10h
    72 00000038 C606[885D]00        <1> 	mov byte [guion], 0
    73 0000003D E80100              <1> 	call getmemorysize;get the memory map after the video is initialized
    74 00000040 C3                  <1> 	ret
    75                              <1> 
    76                              <1> getmemorysize:
    77 00000041 BF[8E5D]            <1> 	mov di, memlistbuf
    78 00000044 6631DB              <1> 	xor ebx, ebx
    79                              <1> getmemsizeloop:
    80 00000047 66B820E80000        <1> 	mov eax, 0xE820
    81 0000004D 66BA50414D53        <1> 	mov edx, 0x0534D4150
    82 00000053 66B918000000        <1> 	mov ecx, 24
    83 00000059 CD15                <1> 	int 0x15
    84 0000005B 81C71800            <1> 	add di, 24
    85 0000005F 81FF[CE5F]          <1> 	cmp di, memlistend
    86 00000063 7309                <1> 	jae nomoregetmemsize
    87 00000065 6681FB00000000      <1> 	cmp ebx, 0
    88 0000006C 75D9                <1> 	jne getmemsizeloop
    89                              <1> nomoregetmemsize:
    90 0000006E 81EF[8E5D]          <1> 	sub di, memlistbuf
    91 00000072 893E[CE5F]          <1> 	mov [memlistend], di
    92 00000076 C3                  <1> 	ret
    93                              <1> 	
    94                              <1> printrm:			; 'si' comes in with string address
    95 00000077 BB0700              <1>     mov bx,07		; write to display
    96 0000007A B40E                <1>     mov ah,0Eh		; screen function
    97 0000007C 8A04                <1>    .lp:    mov al,[si]         ; get next character
    98 0000007E 3C00                <1>     cmp al,0		; look for terminator 
    99 00000080 7405                <1>     je .done		; zero byte at end of string
   100 00000082 CD10                <1>     int 10h		; write character to screen.    
   101 00000084 46                  <1> 	inc si	     	; move to next character
   102 00000085 EBF5                <1>     jmp .lp		; loop
   103 00000087 C3                  <1> .done: ret
   104                                      %include "source/pmode.asm"
   105                              <1> [BITS 16]
   106                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   107                              <1> ;	16-bit real mode
   108                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   109                              <1> 
   110                              <1> pmode:
   111 00000088 6631C0              <1> 	xor eax, eax
   112 0000008B 6631DB              <1> 	xor ebx, ebx
   113 0000008E 6631C9              <1> 	xor ecx, ecx
   114 00000091 6631D2              <1> 	xor edx, edx
   115 00000094 6631F6              <1> 	xor esi, esi
   116 00000097 6631FF              <1> 	xor edi, edi
   117 0000009A BA9200              <1> 	mov dx, 0x92
   118 0000009D EC                  <1> 	in al, dx	;;A20
   119 0000009E 0C02                <1> 	or al, 2
   120 000000A0 EE                  <1> 	out dx, al
   121 000000A1 8CCB                <1> 	mov bx,cs		; EBX=segment
   122 000000A3 66C1E304            <1> 	shl ebx,4		;	<< 4
   123 000000A7 67668D03            <1> 	lea eax,[ebx]		; EAX=linear address of segment base
   124 000000AB A3[1F03]            <1> 	mov [gdt2 + 2],ax
   125 000000AE A3[2703]            <1> 	mov [gdt3 + 2],ax
   126 000000B1 66C1E810            <1> 	shr eax,16
   127 000000B5 A2[2103]            <1> 	mov [gdt2 + 4],al
   128 000000B8 A2[2903]            <1> 	mov [gdt3 + 4],al
   129 000000BB 8826[2403]          <1> 	mov [gdt2 + 7],ah
   130 000000BF 8826[2C03]          <1> 	mov [gdt3 + 7],ah
   131                              <1> 
   132 000000C3 66B8[CE5F0000]      <1> 	mov eax, initialstack
   133 000000C9 660306[1D02]        <1> 	add eax, [newcodecache]
   134 000000CE A3[1703]            <1> 	mov [gdts + 2],ax
   135 000000D1 66C1E810            <1> 	shr eax, 16
   136 000000D5 A2[1903]            <1> 	mov [gdts + 4],al
   137 000000D8 8826[1C03]          <1> 	mov [gdts + 7], ah
   138                              <1> 	
   139 000000DC 66A1[1D02]          <1> 	mov eax, [newcodecache]
   140 000000E0 A3[2F03]            <1> 	mov [gdt4 + 2],ax
   141 000000E3 A3[3703]            <1> 	mov [gdt5 + 2],ax
   142 000000E6 A3[3F03]            <1> 	mov [gdtv8086 + 2], ax
   143 000000E9 A3[4703]            <1> 	mov [gdtv80862 + 2], ax
   144 000000EC 66C1E810            <1> 	shr eax,16
   145 000000F0 A2[3103]            <1> 	mov [gdt4 + 4],al
   146 000000F3 A2[3903]            <1> 	mov [gdt5 + 4],al
   147 000000F6 A2[4103]            <1> 	mov [gdtv8086 + 4],al
   148 000000F9 A2[4903]            <1> 	mov [gdtv80862 + 4],al
   149 000000FC 8826[3403]          <1> 	mov [gdt4 + 7],ah
   150 00000100 8826[3C03]          <1> 	mov [gdt5 + 7],ah
   151 00000104 8826[4403]          <1> 	mov [gdtv8086 + 7],ah
   152 00000108 8826[4C03]          <1> 	mov [gdtv80862 + 7],ah
   153                              <1> 	
   154 0000010C 66B800004000        <1> 	mov eax, dosprogloc
   155 00000112 660306[1D02]        <1> 	add eax, [newcodecache]
   156 00000117 A3[4F03]            <1> 	mov [gdtdos + 2],ax
   157 0000011A A3[5703]            <1> 	mov [gdtdos2 + 2],ax
   158 0000011D 66C1E810            <1> 	shr eax,16
   159 00000121 A2[5103]            <1> 	mov [gdtdos + 4],al
   160 00000124 A2[5903]            <1> 	mov [gdtdos2 + 4],al
   161 00000127 8826[5403]          <1> 	mov [gdtdos + 7],ah
   162 0000012B 8826[5C03]          <1> 	mov [gdtdos2 + 7],ah
   163                              <1> 	
   164                              <1> ; fix up gdt and idt
   165 0000012F 67668D83[05030000]  <1> 	lea eax,[ebx + gdt]	; EAX=linear address of gdt
   166 00000137 66A3[FB02]          <1> 	mov [gdtr + 2],eax
   167 0000013B 67668D83[5D030000]  <1> 	lea eax,[ebx + idt]	; EAX=linear address of idt
   168 00000143 66A3[0103]          <1> 	mov [idtr + 2],eax
   169 00000147 FA                  <1> 	cli
   170 00000148 0F0116[F902]        <1> 	lgdt [gdtr]
   171 0000014D 0F011E[FF02]        <1> 	lidt [idtr]
   172 00000152 6631DB              <1> 	xor ebx, ebx
   173 00000155 8CDB                <1> 	mov bx, ds
   174 00000157 66891E[1902]        <1> 	mov [basecache], ebx
   175 0000015C 0F20C0              <1> 	mov eax,cr0
   176 0000015F 0C01                <1> 	or al,1
   177 00000161 0F22C0              <1> 	mov cr0,eax
   178 00000164 EA[6901]1800        <1> 	jmp SYS_CODE_SEL:do_pm
   179                              <1> [BITS 32]
   180                              <1> do_pm:
   181 00000169 31C0                <1> 	xor eax, eax
   182 0000016B 66B82000            <1> 	mov ax, SYS_DATA_SEL
   183 0000016F 8ED8                <1> 	mov ds, ax
   184 00000171 8EC0                <1> 	mov es, ax
   185 00000173 8EE0                <1> 	mov fs, ax
   186 00000175 66B83000            <1> 	mov ax, NEW_DATA_SEL
   187 00000179 8EE8                <1> 	mov gs, ax
   188                              <1> 	
   189                              <1> copykernel:
   190 0000017B 648B06              <1> 	mov eax, [fs:esi]
   191 0000017E 658906              <1> 	mov [gs:esi], eax
   192 00000181 81C604000000        <1> 	add esi, 4
   193 00000187 81FE[CE5F0000]      <1> 	cmp esi, bsscopy
   194 0000018D 72EC                <1> 	jb copykernel
   195 0000018F EA[96010000]2800    <1> 	jmp NEW_CODE_SEL:done_copy
   196                              <1> 	
   197                              <1> done_copy:
   198 00000196 66B83000            <1> 	mov ax, NEW_DATA_SEL	;;these MUST be setup AFTER the kernel switches places!!!
   199 0000019A 8ED8                <1> 	mov ds, ax
   200 0000019C 8EC0                <1> 	mov es, ax
   201 0000019E 8EE0                <1> 	mov fs, ax
   202                              <1> 	;mov ax, STACK_SEL
   203 000001A0 8ED0                <1> 	mov ss, ax
   204 000001A2 BC[6E6F0000]        <1> 	mov esp, stackend
   205 000001A7 66B82000            <1> 	mov ax, SYS_DATA_SEL
   206 000001AB 8EE8                <1> 	mov gs, ax
   207                              <1> 	
   208 000001AD E81B450000          <1> 	call initialize	;initialize drivers
   209                              <1> 	
   210 000001B2 A1[1D020000]        <1> 	mov eax, [newcodecache]
   211 000001B7 C1E804              <1> 	shr eax, 4
   212 000001BA A3[19020000]        <1> 	mov [basecache], eax
   213                              <1> 	
   214 000001BF BE[2B151100]        <1> 	mov esi, bssend
   215 000001C4 31C0                <1> 	xor eax, eax
   216                              <1> clearkernelbuffers:
   217 000001C6 8906                <1> 	mov [esi], eax
   218 000001C8 81EE04000000        <1> 	sub esi, 4
   219 000001CE 81FE[CE5F0000]      <1> 	cmp esi, bsscopy
   220 000001D4 77F0                <1> 	ja clearkernelbuffers
   221 000001D6 FB                  <1> 	sti
   222                              <1> 
   223                              <1> getmemoryspace:
   224 000001D7 BE[8E5D0000]        <1> 	mov esi, memlistbuf
   225 000001DC 31FF                <1> 	xor edi, edi
   226 000001DE 668B3D[CE5F0000]    <1> 	mov di, [memlistend]
   227 000001E5 01F7                <1> 	add edi, esi
   228 000001E7 31C0                <1> 	xor eax, eax
   229                              <1> memoryspaceaddition:
   230 000001E9 39FE                <1> 	cmp esi, edi
   231 000001EB 7322                <1> 	jae finishedmemspacecalc
   232 000001ED 81C608000000        <1> 	add esi, 8
   233 000001F3 8B0E                <1> 	mov ecx, [esi]
   234 000001F5 81C608000000        <1> 	add esi, 8
   235 000001FB 8B1E                <1> 	mov ebx, [esi]
   236 000001FD 81C608000000        <1> 	add esi, 8
   237 00000203 81FB01000000        <1> 	cmp ebx, 1
   238 00000209 75DE                <1> 	jne memoryspaceaddition
   239 0000020B 01C8                <1> 	add eax, ecx
   240 0000020D EBDA                <1> 	jmp memoryspaceaddition
   241                              <1> finishedmemspacecalc:
   242 0000020F A3[26020000]        <1> 	mov [memoryspace], eax
   243                              <1> %ifdef gui.included
   244                              <1> 	cmp byte [guion], 0
   245                              <1> 	je normalstartup
   246                              <1> 	mov ebx, [basecache]
   247                              <1> 	shl ebx, 4
   248                              <1> 	mov edi, [physbaseptr]
   249                              <1> 	sub edi, ebx
   250                              <1> 	mov [physbaseptr], edi
   251                              <1> 	jmp guiboot
   252                              <1> %endif
   253                              <1> normalstartup:
   254 00000214 E916230000          <1> 	jmp os
   255                              <1> 	
   256 00000219 00000000            <1> basecache dd 0
   257 0000021D 00001000            <1> newcodecache dd 0x100000
   258                              <1> 
   259 00000221 00                  <1> testingcpuspeed db 0
   260 00000222 00000000            <1> cpuspeedperint dd 0
   261 00000226 00000000            <1> memoryspace dd 0
   262 0000022A 7D0A                <1> pitdiv dw 2685
   263 0000022C 2E562200            <1> timeinterval dd 2250286
   264 00000230 00000000            <1> timeseconds dd 0
   265 00000234 00000000            <1> timenanoseconds dd 0
   266 00000238 00                  <1> soundon db 0
   267 00000239 0000                <1> soundrepititions dw 0
   268 0000023B 00000000            <1> soundpos dd 0
   269 0000023F 00000000            <1> soundendpos dd 0
   270                              <1> 
   271                              <1> cpuspeedend:
   272 00000243 C605[21020000]00    <1> 	mov byte [testingcpuspeed], 0
   273 0000024A A3[22020000]        <1> 	mov [cpuspeedperint], eax
   274 0000024F B8[4B3E0000]        <1> 	mov eax, cpuspeedloopend
   275 00000254 890424              <1> 	mov [esp], eax
   276 00000257 E996000000          <1> 	jmp handled
   277                              <1> 
   278                              <1> ;if using the rtc, the default frequency yeilds a period of 976562.5ns
   279                              <1> ;if using the pit, div=451 is 377981.0004, div=5370 is 4500572.00007ns
   280                              <1> ;div=55483 is 46500044.000006ns, div=2685 is 2250286.00004ns, div=902 is 755962.0008
   281                              <1> 
   282                              <1> pitinterrupt: ;this controls threading
   283 0000025C FA                  <1> 	cli
   284 0000025D 803D[21020000]01    <1> 	cmp byte [testingcpuspeed], 1	;check to see if the cpu speed test is running
   285 00000264 74DD                <1> 	je cpuspeedend
   286                              <1> 		
   287 00000266 E860000000          <1> 	call timekeeper ;this updates the internal time
   288                              <1> 	
   289 0000026B 803D[38020000]01    <1> 	cmp byte [soundon], 1
   290 00000272 0F846F400000        <1> 	je near PCSpeakerRAW
   291                              <1> timerinterrupt:	;put this into the interrupt handler that controls threading
   292                              <1> %ifdef threads.included
   293 00000278 803D[824B0000]01    <1> 	cmp byte [threadson], 1
   294 0000027F 0F849D480000        <1> 	je near threadswitch
   295                              <1> %endif
   296                              <1> keyinterrupt:		;checks for escape, if pressed, it quits the program currently running
   297 00000285 803D[824B0000]00    <1> 	cmp byte [threadson], 0
   298 0000028C 0F8460000000        <1> 	je near handled
   299                              <1> %ifdef io.serial
   300                              <1> 	jmp handled
   301                              <1> %else
   302 00000292 FA                  <1> 	cli
   303 00000293 60                  <1> 	pusha
   304 00000294 E460                <1> 	in al, 60h
   305 00000296 3C01                <1> 	cmp al, 1		;escape
   306 00000298 7405                <1> 	je userint
   307 0000029A E951000000          <1> 	jmp handled2
   308                              <1> userint:
   309                              <1> 	;UNMASK ALL INTS
   310 0000029F 30C0                <1> 	xor al, al
   311 000002A1 E621                <1> 	out 0x21, al
   312 000002A3 30C0                <1> 	xor al, al
   313 000002A5 E6A1                <1> 	out 0xA1, al
   314 000002A7 B020                <1> 	mov al, 0x20
   315 000002A9 E6A0                <1> 	out 0xA0, al
   316 000002AB E620                <1> 	out 0x20, al
   317                              <1> 	;RESET PIT DIVISOR
   318 000002AD 66A1[2A020000]      <1> 	mov ax, [pitdiv]
   319 000002B3 E640                <1> 	out 0x40, al
   320 000002B5 66C1C008            <1> 	rol ax, 8
   321 000002B9 E640                <1> 	out 0x40, al
   322                              <1> 	;RESET PIC
   323 000002BB B020                <1> 	mov al, 0x20
   324 000002BD E620                <1> 	out 0x20, al
   325 000002BF 61                  <1> 	popa
   326 000002C0 FB                  <1> 	sti
   327 000002C1 BC[6E6F0000]        <1> 	mov esp, stackend ;reset stack
   328 000002C6 E91D240000          <1> 	jmp nwcmd
   329                              <1> %endif
   330                              <1> %ifdef rtl8139.included
   331                              <1> rtl8139.irq:
   332                              <1> 	cli
   333                              <1> 	pusha
   334                              <1> 	mov edx, [basenicaddr]
   335                              <1> 	add edx, rtl8139.ISR
   336                              <1> 	xor eax, eax
   337                              <1> 	in ax, dx
   338                              <1> 	mov ecx, eax
   339                              <1> 	call showhex
   340                              <1> 	jmp handled2
   341                              <1> %endif
   342                              <1> %ifdef sound.included
   343                              <1> sblaster.irq:
   344                              <1> 	cli
   345                              <1> 	pusha
   346                              <1> 	cmp byte [SoundBlaster], 1
   347                              <1> 	je near sblastercont
   348                              <1> 	jmp handled2
   349                              <1> %endif
   350                              <1> 	
   351                              <1> timekeeper:
   352 000002CB 50                  <1> 	push eax
   353 000002CC A1[34020000]        <1> 	mov eax, [timenanoseconds]
   354 000002D1 0305[2C020000]      <1> 	add eax, [timeinterval]
   355 000002D7 3D00CA9A3B          <1> 	cmp eax, 1000000000
   356 000002DC 720B                <1> 	jb nonanosecondrollover
   357 000002DE FF05[30020000]      <1> 	inc dword [timeseconds]
   358 000002E4 2D00CA9A3B          <1> 	sub eax, 1000000000
   359                              <1> nonanosecondrollover:
   360 000002E9 A3[34020000]        <1> 	mov [timenanoseconds], eax
   361 000002EE 58                  <1> 	pop eax
   362 000002EF C3                  <1> 	ret
   363                              <1> 	
   364                              <1> handled2:
   365 000002F0 61                  <1> 	popa
   366                              <1> handled3:
   367 000002F1 FB                  <1> 	sti
   368                              <1> handled:
   369 000002F2 50                  <1> 	push eax
   370 000002F3 B020                <1> 	mov al, 0x20
   371 000002F5 E620                <1> 	out 0x20, al
   372 000002F7 58                  <1> 	pop eax
   373 000002F8 CF                  <1> 	iret
   374                              <1> [BITS 16]
   375                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   376                              <1> ;	16-bit limit/32-bit linear base address of GDT and IDT
   377                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   378 000002F9 5700                <1> gdtr:	dw gdt_end - gdt - 1	; GDT limit
   379 000002FB 00000000            <1> 	dd 0    		; filled with linear, physical address of GDT
   380                              <1> 
   381 000002FF FF07                <1> idtr:	dw idt_end - idt - 1	; IDT limit
   382 00000301 00000000            <1> 	dd 0			; filled with linear, physical address of IDT
   383                              <1> 
   384                              <1> 
   385 00000305 0000                <1> gdt:	dw 0			; limit 15:0
   386 00000307 0000                <1> 	dw 0			; base 15:0
   387 00000309 00                  <1> 	db 0			; base 23:16
   388 0000030A 00                  <1> 	db 0			; type
   389 0000030B 00                  <1> 	db 0			; limit 19:16, flags
   390 0000030C 00                  <1> 	db 0			; base 31:24
   391                              <1> ; linear data segment descriptor
   392                              <1> LINEAR_SEL	equ	$-gdt
   393 0000030D FFFF                <1> 	dw 0xFFFF		; limit 0xFFFFF
   394 0000030F 0000                <1> 	dw 0			; base for this one is always 0
   395 00000311 00                  <1> 	db 0
   396 00000312 92                  <1> 	db 0x92			; present, ring 0, data, expand-up, writable
   397 00000313 CF                  <1> 	db 0xCF			; page-granular, 32-bit
   398 00000314 00                  <1> 	db 0
   399                              <1> STACK_SEL	equ $-gdt
   400 00000315 0200                <1> gdts:	dw 2;(stackend)/4096
   401 00000317 0000                <1> 	dw 0
   402 00000319 00                  <1> 	db 0
   403 0000031A 92                  <1> 	db 0x92
   404 0000031B CF                  <1> 	db 0xCF
   405 0000031C 00                  <1> 	db 0
   406                              <1> ; code segment descriptor
   407                              <1> SYS_CODE_SEL	equ	$-gdt
   408 0000031D FFFF                <1> gdt2:	dw 0xFFFF
   409 0000031F 0000                <1> 	dw 0			; (base gets set above)
   410 00000321 00                  <1> 	db 0
   411 00000322 9A                  <1> 	db 0x9A			; present, ring 0, code, non-conforming, readable
   412 00000323 CF                  <1> 	db 0xCF
   413 00000324 00                  <1> 	db 0
   414                              <1> ; data segment descriptor
   415                              <1> SYS_DATA_SEL	equ	$-gdt
   416 00000325 FFFF                <1> gdt3:	dw 0xFFFF
   417 00000327 0000                <1> 	dw 0			; (base gets set above)
   418 00000329 00                  <1> 	db 0
   419 0000032A 92                  <1> 	db 0x92			; present, ring 0, data, expand-up, writable
   420 0000032B CF                  <1> 	db 0xCF
   421 0000032C 00                  <1> 	db 0
   422                              <1> NEW_CODE_SEL	equ	$-gdt
   423 0000032D FFFF                <1> gdt4:	dw 0xFFFF
   424 0000032F 0000                <1> 	dw 0			; (base gets set above)
   425 00000331 00                  <1> 	db 0
   426 00000332 9A                  <1> 	db 0x9A			; present, ring 0, code, non-conforming, readable
   427 00000333 CF                  <1> 	db 0xCF
   428 00000334 00                  <1> 	db 0
   429                              <1> ; data segment descriptor
   430                              <1> NEW_DATA_SEL	equ	$-gdt
   431 00000335 FFFF                <1> gdt5:	dw 0xFFFF
   432 00000337 0000                <1> 	dw 0			; (base gets set above)
   433 00000339 00                  <1> 	db 0
   434 0000033A 92                  <1> 	db 0x92			; present, ring 0, data, expand-up, writable
   435 0000033B CF                  <1> 	db 0xCF
   436 0000033C 00                  <1> 	db 0
   437                              <1> V8086_CODE_SEL	equ $-gdt
   438 0000033D FFFF                <1> gdtv8086: dw 0xFFFF
   439 0000033F 0000                <1> 	dw 0
   440 00000341 00                  <1> 	db 0
   441 00000342 9A                  <1> 	db 0x9A
   442 00000343 8F                  <1> 	db 0x8F
   443 00000344 00                  <1> 	db 0
   444                              <1> V8086_DATA_SEL	equ $-gdt
   445 00000345 FFFF                <1> gdtv80862: dw 0xFFFF
   446 00000347 0000                <1> 	dw 0
   447 00000349 00                  <1> 	db 0
   448 0000034A 92                  <1> 	db 0x92
   449 0000034B 8F                  <1> 	db 0x8F
   450 0000034C 00                  <1> 	db 0
   451                              <1> DOS_CODE_SEL	equ $-gdt	;this gives dos programs complete access to one megabyte at the beginning of memory
   452 0000034D 0001                <1> gdtdos:	dw 256	;give it 1 MB
   453 0000034F 0000                <1> 	dw 0
   454 00000351 00                  <1> 	db 0
   455 00000352 9A                  <1> 	db 0x9A
   456 00000353 8F                  <1> 	db 0x8F ;16 bit
   457 00000354 00                  <1> 	db 0
   458                              <1> DOS_DATA_SEL 	equ $-gdt
   459 00000355 0001                <1> gdtdos2:	dw 256
   460 00000357 0000                <1> 	dw 0
   461 00000359 00                  <1> 	db 0
   462 0000035A 92                  <1> 	db 0x92
   463 0000035B 8F                  <1> 	db 0x8F ;16 bit
   464 0000035C 00                  <1> 	db 0
   465                              <1> gdt_end:
   466                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   467                              <1> ;	interrupt descriptor table (IDT)
   468                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   469                              <1> ; 32 reserved interrupts:
   470                              <1> idt:	
   471                              <1> %assign i 0
   472                              <1> %rep    32
   473                              <1> 		dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   474                              <1> %assign i i+1
   475                              <1> %endrep
   476 0000035D [7E0C]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   477                              <2> %assign i i+1
   478 00000365 [8A0C]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   479                              <2> %assign i i+1
   480 0000036D [960C]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   481                              <2> %assign i i+1
   482 00000375 [A20C]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   483                              <2> %assign i i+1
   484 0000037D [AE0C]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   485                              <2> %assign i i+1
   486 00000385 [BA0C]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   487                              <2> %assign i i+1
   488 0000038D [C60C]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   489                              <2> %assign i i+1
   490 00000395 [D20C]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   491                              <2> %assign i i+1
   492 0000039D [DE0C]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   493                              <2> %assign i i+1
   494 000003A5 [EA0C]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   495                              <2> %assign i i+1
   496 000003AD [F60C]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   497                              <2> %assign i i+1
   498 000003B5 [020D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   499                              <2> %assign i i+1
   500 000003BD [0E0D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   501                              <2> %assign i i+1
   502 000003C5 [1A0D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   503                              <2> %assign i i+1
   504 000003CD [260D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   505                              <2> %assign i i+1
   506 000003D5 [320D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   507                              <2> %assign i i+1
   508 000003DD [3E0D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   509                              <2> %assign i i+1
   510 000003E5 [4A0D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   511                              <2> %assign i i+1
   512 000003ED [560D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   513                              <2> %assign i i+1
   514 000003F5 [620D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   515                              <2> %assign i i+1
   516 000003FD [6E0D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   517                              <2> %assign i i+1
   518 00000405 [7A0D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   519                              <2> %assign i i+1
   520 0000040D [860D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   521                              <2> %assign i i+1
   522 00000415 [920D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   523                              <2> %assign i i+1
   524 0000041D [9E0D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   525                              <2> %assign i i+1
   526 00000425 [AA0D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   527                              <2> %assign i i+1
   528 0000042D [B60D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   529                              <2> %assign i i+1
   530 00000435 [C20D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   531                              <2> %assign i i+1
   532 0000043D [CE0D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   533                              <2> %assign i i+1
   534 00000445 [DA0D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   535                              <2> %assign i i+1
   536 0000044D [E60D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   537                              <2> %assign i i+1
   538 00000455 [F20D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   539                              <2> %assign i i+1
   540 0000045D [0024]2800008E0000  <1> 		dw int20h,NEW_CODE_SEL,0x8E00,0
   541 00000465 [0424]2800008E0000  <1> 		dw int21h,NEW_CODE_SEL,0x8E00,0
   542                              <1> %assign i 0x22
   543                              <1> %rep 14
   544                              <1> 		dw handled,NEW_CODE_SEL,0x8E00,0
   545                              <1> %assign i +1
   546                              <1> %endrep
   547 0000046D [F202]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   548                              <2> %assign i +1
   549 00000475 [F202]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   550                              <2> %assign i +1
   551 0000047D [F202]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   552                              <2> %assign i +1
   553 00000485 [F202]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   554                              <2> %assign i +1
   555 0000048D [F202]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   556                              <2> %assign i +1
   557 00000495 [F202]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   558                              <2> %assign i +1
   559 0000049D [F202]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   560                              <2> %assign i +1
   561 000004A5 [F202]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   562                              <2> %assign i +1
   563 000004AD [F202]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   564                              <2> %assign i +1
   565 000004B5 [F202]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   566                              <2> %assign i +1
   567 000004BD [F202]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   568                              <2> %assign i +1
   569 000004C5 [F202]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   570                              <2> %assign i +1
   571 000004CD [F202]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   572                              <2> %assign i +1
   573 000004D5 [F202]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   574                              <2> %assign i +1
   575                              <1> ;INT 30h for os use and 3rd party use:
   576 000004DD [C419]2800008E0000  <1> 		dw newints,NEW_CODE_SEL,0x8E00,0
   577                              <1> %assign i 0x31
   578                              <1> %rep 15
   579                              <1> 		dw handled,NEW_CODE_SEL,0x8E00,0
   580                              <1> %assign i +1
   581                              <1> %endrep
   582 000004E5 [F202]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   583                              <2> %assign i +1
   584 000004ED [F202]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   585                              <2> %assign i +1
   586 000004F5 [F202]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   587                              <2> %assign i +1
   588 000004FD [F202]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   589                              <2> %assign i +1
   590 00000505 [F202]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   591                              <2> %assign i +1
   592 0000050D [F202]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   593                              <2> %assign i +1
   594 00000515 [F202]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   595                              <2> %assign i +1
   596 0000051D [F202]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   597                              <2> %assign i +1
   598 00000525 [F202]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   599                              <2> %assign i +1
   600 0000052D [F202]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   601                              <2> %assign i +1
   602 00000535 [F202]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   603                              <2> %assign i +1
   604 0000053D [F202]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   605                              <2> %assign i +1
   606 00000545 [F202]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   607                              <2> %assign i +1
   608 0000054D [F202]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   609                              <2> %assign i +1
   610 00000555 [F202]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   611                              <2> %assign i +1
   612                              <1> ;and here we are at 0x40
   613                              <1> ;here are all the irq's
   614 0000055D [5C02]2800008E0000  <1> 		dw pitinterrupt,NEW_CODE_SEL,0x8E00,0 ;IRQ 0 = PIT
   615 00000565 [F202]2800008E0000  <1> 		dw handled,NEW_CODE_SEL,0x8E00,0 ;IRQ 1 = keyboard
   616 0000056D [F202]2800008E0000  <1> 		dw handled,NEW_CODE_SEL,0x8E00,0 ;IRQ 2
   617 00000575 [F202]2800008E0000  <1> 		dw handled,NEW_CODE_SEL,0x8E00,0 ;IRQ 3
   618 0000057D [F202]2800008E0000  <1> 		dw handled,NEW_CODE_SEL,0x8E00,0 ;IRQ 4
   619                              <1> 	%ifdef sound.included
   620                              <1> 		dw sblaster.irq,NEW_CODE_SEL,0x8E00,0 ;IRQ 5 = default SoundBlaster
   621                              <1> 	%else
   622 00000585 [F202]2800008E0000  <1> 		dw handled,NEW_CODE_SEL,0x8E00,0 ;IRQ 5
   623                              <1> 	%endif
   624 0000058D [F202]2800008E0000  <1> 		dw handled,NEW_CODE_SEL,0x8E00,0 ;IRQ 6
   625 00000595 [F202]2800008E0000  <1> 		dw handled,NEW_CODE_SEL,0x8E00,0 ;IRQ 7
   626 0000059D [F202]2800008E0000  <1> 		dw handled,NEW_CODE_SEL,0x8E00,0 ;IRQ 8 = RTC
   627 000005A5 [F202]2800008E0000  <1> 		dw handled,NEW_CODE_SEL,0x8E00,0 ;IRQ 9
   628 000005AD [F202]2800008E0000  <1> 		dw handled,NEW_CODE_SEL,0x8E00,0 ;IRQ 10
   629                              <1> 	%ifdef rtl8139.included
   630                              <1> 		dw rtl8139.irq,NEW_CODE_SEL,0x8E00,0 ;IRQ 11 = default RTL8139
   631                              <1> 	%else
   632 000005B5 [F202]2800008E0000  <1> 		dw handled,NEW_CODE_SEL,0x8E00,0 ;IRQ 11
   633                              <1> 	%endif
   634 000005BD [F202]2800008E0000  <1> 		dw handled,NEW_CODE_SEL,0x8E00,0 ;IRQ 12
   635 000005C5 [F202]2800008E0000  <1> 		dw handled,NEW_CODE_SEL,0x8E00,0 ;IRQ 13
   636 000005CD [F202]2800008E0000  <1> 		dw handled,NEW_CODE_SEL,0x8E00,0 ;IRQ 14
   637 000005D5 [F202]2800008E0000  <1> 		dw handled,NEW_CODE_SEL,0x8E00,0 ;IRQ 15
   638                              <1> ;This brings me up to 0x50
   639                              <1> %assign i 0x50
   640                              <1> %rep 176
   641                              <1> 		dw handled, NEW_CODE_SEL,0x8E00,0
   642                              <1> 		;dw unhand + i*12, NEW_CODE_SEL,0x8E00,0
   643                              <1> %assign i +1
   644                              <1> %endrep
   645 000005DD [F202]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   646                              <2> 
   647                              <2> %assign i +1
   648 000005E5 [F202]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   649                              <2> 
   650                              <2> %assign i +1
   651 000005ED [F202]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   652                              <2> 
   653                              <2> %assign i +1
   654 000005F5 [F202]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   655                              <2> 
   656                              <2> %assign i +1
   657 000005FD [F202]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   658                              <2> 
   659                              <2> %assign i +1
   660 00000605 [F202]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   661                              <2> 
   662                              <2> %assign i +1
   663 0000060D [F202]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   664                              <2> 
   665                              <2> %assign i +1
   666 00000615 [F202]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   667                              <2> 
   668                              <2> %assign i +1
   669 0000061D [F202]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   670                              <2> 
   671                              <2> %assign i +1
   672 00000625 [F202]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   673                              <2> 
   674                              <2> %assign i +1
   675 0000062D [F202]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   676                              <2> 
   677                              <2> %assign i +1
   678 00000635 [F202]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   679                              <2> 
   680                              <2> %assign i +1
   681 0000063D [F202]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   682                              <2> 
   683                              <2> %assign i +1
   684 00000645 [F202]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   685                              <2> 
   686                              <2> %assign i +1
   687 0000064D [F202]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   688                              <2> 
   689                              <2> %assign i +1
   690 00000655 [F202]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   691                              <2> 
   692                              <2> %assign i +1
   693 0000065D [F202]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   694                              <2> 
   695                              <2> %assign i +1
   696 00000665 [F202]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   697                              <2> 
   698                              <2> %assign i +1
   699 0000066D [F202]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   700                              <2> 
   701                              <2> %assign i +1
   702 00000675 [F202]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   703                              <2> 
   704                              <2> %assign i +1
   705 0000067D [F202]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   706                              <2> 
   707                              <2> %assign i +1
   708 00000685 [F202]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   709                              <2> 
   710                              <2> %assign i +1
   711 0000068D [F202]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   712                              <2> 
   713                              <2> %assign i +1
   714 00000695 [F202]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   715                              <2> 
   716                              <2> %assign i +1
   717 0000069D [F202]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   718                              <2> 
   719                              <2> %assign i +1
   720 000006A5 [F202]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   721                              <2> 
   722                              <2> %assign i +1
   723 000006AD [F202]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   724                              <2> 
   725                              <2> %assign i +1
   726 000006B5 [F202]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   727                              <2> 
   728                              <2> %assign i +1
   729 000006BD [F202]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   730                              <2> 
   731                              <2> %assign i +1
   732 000006C5 [F202]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   733                              <2> 
   734                              <2> %assign i +1
   735 000006CD [F202]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   736                              <2> 
   737                              <2> %assign i +1
   738 000006D5 [F202]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   739                              <2> 
   740                              <2> %assign i +1
   741 000006DD [F202]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   742                              <2> 
   743                              <2> %assign i +1
   744 000006E5 [F202]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   745                              <2> 
   746                              <2> %assign i +1
   747 000006ED [F202]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   748                              <2> 
   749                              <2> %assign i +1
   750 000006F5 [F202]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   751                              <2> 
   752                              <2> %assign i +1
   753 000006FD [F202]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   754                              <2> 
   755                              <2> %assign i +1
   756 00000705 [F202]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   757                              <2> 
   758                              <2> %assign i +1
   759 0000070D [F202]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   760                              <2> 
   761                              <2> %assign i +1
   762 00000715 [F202]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   763                              <2> 
   764                              <2> %assign i +1
   765 0000071D [F202]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   766                              <2> 
   767                              <2> %assign i +1
   768 00000725 [F202]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   769                              <2> 
   770                              <2> %assign i +1
   771 0000072D [F202]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   772                              <2> 
   773                              <2> %assign i +1
   774 00000735 [F202]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   775                              <2> 
   776                              <2> %assign i +1
   777 0000073D [F202]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   778                              <2> 
   779                              <2> %assign i +1
   780 00000745 [F202]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   781                              <2> 
   782                              <2> %assign i +1
   783 0000074D [F202]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   784                              <2> 
   785                              <2> %assign i +1
   786 00000755 [F202]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   787                              <2> 
   788                              <2> %assign i +1
   789 0000075D [F202]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   790                              <2> 
   791                              <2> %assign i +1
   792 00000765 [F202]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   793                              <2> 
   794                              <2> %assign i +1
   795 0000076D [F202]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   796                              <2> 
   797                              <2> %assign i +1
   798 00000775 [F202]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   799                              <2> 
   800                              <2> %assign i +1
   801 0000077D [F202]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   802                              <2> 
   803                              <2> %assign i +1
   804 00000785 [F202]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   805                              <2> 
   806                              <2> %assign i +1
   807 0000078D [F202]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   808                              <2> 
   809                              <2> %assign i +1
   810 00000795 [F202]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   811                              <2> 
   812                              <2> %assign i +1
   813 0000079D [F202]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   814                              <2> 
   815                              <2> %assign i +1
   816 000007A5 [F202]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   817                              <2> 
   818                              <2> %assign i +1
   819 000007AD [F202]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   820                              <2> 
   821                              <2> %assign i +1
   822 000007B5 [F202]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   823                              <2> 
   824                              <2> %assign i +1
   825 000007BD [F202]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   826                              <2> 
   827                              <2> %assign i +1
   828 000007C5 [F202]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   829                              <2> 
   830                              <2> %assign i +1
   831 000007CD [F202]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   832                              <2> 
   833                              <2> %assign i +1
   834 000007D5 [F202]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   835                              <2> 
   836                              <2> %assign i +1
   837 000007DD [F202]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   838                              <2> 
   839                              <2> %assign i +1
   840 000007E5 [F202]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   841                              <2> 
   842                              <2> %assign i +1
   843 000007ED [F202]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   844                              <2> 
   845                              <2> %assign i +1
   846 000007F5 [F202]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   847                              <2> 
   848                              <2> %assign i +1
   849 000007FD [F202]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   850                              <2> 
   851                              <2> %assign i +1
   852 00000805 [F202]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   853                              <2> 
   854                              <2> %assign i +1
   855 0000080D [F202]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   856                              <2> 
   857                              <2> %assign i +1
   858 00000815 [F202]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   859                              <2> 
   860                              <2> %assign i +1
   861 0000081D [F202]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   862                              <2> 
   863                              <2> %assign i +1
   864 00000825 [F202]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   865                              <2> 
   866                              <2> %assign i +1
   867 0000082D [F202]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   868                              <2> 
   869                              <2> %assign i +1
   870 00000835 [F202]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   871                              <2> 
   872                              <2> %assign i +1
   873 0000083D [F202]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   874                              <2> 
   875                              <2> %assign i +1
   876 00000845 [F202]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   877                              <2> 
   878                              <2> %assign i +1
   879 0000084D [F202]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   880                              <2> 
   881                              <2> %assign i +1
   882 00000855 [F202]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   883                              <2> 
   884                              <2> %assign i +1
   885 0000085D [F202]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   886                              <2> 
   887                              <2> %assign i +1
   888 00000865 [F202]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   889                              <2> 
   890                              <2> %assign i +1
   891 0000086D [F202]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   892                              <2> 
   893                              <2> %assign i +1
   894 00000875 [F202]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   895                              <2> 
   896                              <2> %assign i +1
   897 0000087D [F202]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   898                              <2> 
   899                              <2> %assign i +1
   900 00000885 [F202]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   901                              <2> 
   902                              <2> %assign i +1
   903 0000088D [F202]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   904                              <2> 
   905                              <2> %assign i +1
   906 00000895 [F202]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   907                              <2> 
   908                              <2> %assign i +1
   909 0000089D [F202]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   910                              <2> 
   911                              <2> %assign i +1
   912 000008A5 [F202]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   913                              <2> 
   914                              <2> %assign i +1
   915 000008AD [F202]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   916                              <2> 
   917                              <2> %assign i +1
   918 000008B5 [F202]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   919                              <2> 
   920                              <2> %assign i +1
   921 000008BD [F202]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   922                              <2> 
   923                              <2> %assign i +1
   924 000008C5 [F202]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   925                              <2> 
   926                              <2> %assign i +1
   927 000008CD [F202]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   928                              <2> 
   929                              <2> %assign i +1
   930 000008D5 [F202]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   931                              <2> 
   932                              <2> %assign i +1
   933 000008DD [F202]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   934                              <2> 
   935                              <2> %assign i +1
   936 000008E5 [F202]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   937                              <2> 
   938                              <2> %assign i +1
   939 000008ED [F202]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   940                              <2> 
   941                              <2> %assign i +1
   942 000008F5 [F202]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   943                              <2> 
   944                              <2> %assign i +1
   945 000008FD [F202]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   946                              <2> 
   947                              <2> %assign i +1
   948 00000905 [F202]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   949                              <2> 
   950                              <2> %assign i +1
   951 0000090D [F202]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   952                              <2> 
   953                              <2> %assign i +1
   954 00000915 [F202]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   955                              <2> 
   956                              <2> %assign i +1
   957 0000091D [F202]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   958                              <2> 
   959                              <2> %assign i +1
   960 00000925 [F202]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   961                              <2> 
   962                              <2> %assign i +1
   963 0000092D [F202]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   964                              <2> 
   965                              <2> %assign i +1
   966 00000935 [F202]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   967                              <2> 
   968                              <2> %assign i +1
   969 0000093D [F202]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   970                              <2> 
   971                              <2> %assign i +1
   972 00000945 [F202]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   973                              <2> 
   974                              <2> %assign i +1
   975 0000094D [F202]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   976                              <2> 
   977                              <2> %assign i +1
   978 00000955 [F202]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   979                              <2> 
   980                              <2> %assign i +1
   981 0000095D [F202]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   982                              <2> 
   983                              <2> %assign i +1
   984 00000965 [F202]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   985                              <2> 
   986                              <2> %assign i +1
   987 0000096D [F202]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   988                              <2> 
   989                              <2> %assign i +1
   990 00000975 [F202]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   991                              <2> 
   992                              <2> %assign i +1
   993 0000097D [F202]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   994                              <2> 
   995                              <2> %assign i +1
   996 00000985 [F202]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   997                              <2> 
   998                              <2> %assign i +1
   999 0000098D [F202]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1000                              <2> 
  1001                              <2> %assign i +1
  1002 00000995 [F202]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1003                              <2> 
  1004                              <2> %assign i +1
  1005 0000099D [F202]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1006                              <2> 
  1007                              <2> %assign i +1
  1008 000009A5 [F202]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1009                              <2> 
  1010                              <2> %assign i +1
  1011 000009AD [F202]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1012                              <2> 
  1013                              <2> %assign i +1
  1014 000009B5 [F202]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1015                              <2> 
  1016                              <2> %assign i +1
  1017 000009BD [F202]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1018                              <2> 
  1019                              <2> %assign i +1
  1020 000009C5 [F202]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1021                              <2> 
  1022                              <2> %assign i +1
  1023 000009CD [F202]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1024                              <2> 
  1025                              <2> %assign i +1
  1026 000009D5 [F202]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1027                              <2> 
  1028                              <2> %assign i +1
  1029 000009DD [F202]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1030                              <2> 
  1031                              <2> %assign i +1
  1032 000009E5 [F202]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1033                              <2> 
  1034                              <2> %assign i +1
  1035 000009ED [F202]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1036                              <2> 
  1037                              <2> %assign i +1
  1038 000009F5 [F202]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1039                              <2> 
  1040                              <2> %assign i +1
  1041 000009FD [F202]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1042                              <2> 
  1043                              <2> %assign i +1
  1044 00000A05 [F202]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1045                              <2> 
  1046                              <2> %assign i +1
  1047 00000A0D [F202]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1048                              <2> 
  1049                              <2> %assign i +1
  1050 00000A15 [F202]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1051                              <2> 
  1052                              <2> %assign i +1
  1053 00000A1D [F202]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1054                              <2> 
  1055                              <2> %assign i +1
  1056 00000A25 [F202]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1057                              <2> 
  1058                              <2> %assign i +1
  1059 00000A2D [F202]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1060                              <2> 
  1061                              <2> %assign i +1
  1062 00000A35 [F202]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1063                              <2> 
  1064                              <2> %assign i +1
  1065 00000A3D [F202]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1066                              <2> 
  1067                              <2> %assign i +1
  1068 00000A45 [F202]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1069                              <2> 
  1070                              <2> %assign i +1
  1071 00000A4D [F202]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1072                              <2> 
  1073                              <2> %assign i +1
  1074 00000A55 [F202]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1075                              <2> 
  1076                              <2> %assign i +1
  1077 00000A5D [F202]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1078                              <2> 
  1079                              <2> %assign i +1
  1080 00000A65 [F202]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1081                              <2> 
  1082                              <2> %assign i +1
  1083 00000A6D [F202]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1084                              <2> 
  1085                              <2> %assign i +1
  1086 00000A75 [F202]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1087                              <2> 
  1088                              <2> %assign i +1
  1089 00000A7D [F202]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1090                              <2> 
  1091                              <2> %assign i +1
  1092 00000A85 [F202]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1093                              <2> 
  1094                              <2> %assign i +1
  1095 00000A8D [F202]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1096                              <2> 
  1097                              <2> %assign i +1
  1098 00000A95 [F202]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1099                              <2> 
  1100                              <2> %assign i +1
  1101 00000A9D [F202]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1102                              <2> 
  1103                              <2> %assign i +1
  1104 00000AA5 [F202]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1105                              <2> 
  1106                              <2> %assign i +1
  1107 00000AAD [F202]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1108                              <2> 
  1109                              <2> %assign i +1
  1110 00000AB5 [F202]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1111                              <2> 
  1112                              <2> %assign i +1
  1113 00000ABD [F202]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1114                              <2> 
  1115                              <2> %assign i +1
  1116 00000AC5 [F202]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1117                              <2> 
  1118                              <2> %assign i +1
  1119 00000ACD [F202]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1120                              <2> 
  1121                              <2> %assign i +1
  1122 00000AD5 [F202]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1123                              <2> 
  1124                              <2> %assign i +1
  1125 00000ADD [F202]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1126                              <2> 
  1127                              <2> %assign i +1
  1128 00000AE5 [F202]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1129                              <2> 
  1130                              <2> %assign i +1
  1131 00000AED [F202]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1132                              <2> 
  1133                              <2> %assign i +1
  1134 00000AF5 [F202]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1135                              <2> 
  1136                              <2> %assign i +1
  1137 00000AFD [F202]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1138                              <2> 
  1139                              <2> %assign i +1
  1140 00000B05 [F202]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1141                              <2> 
  1142                              <2> %assign i +1
  1143 00000B0D [F202]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1144                              <2> 
  1145                              <2> %assign i +1
  1146 00000B15 [F202]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1147                              <2> 
  1148                              <2> %assign i +1
  1149 00000B1D [F202]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1150                              <2> 
  1151                              <2> %assign i +1
  1152 00000B25 [F202]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1153                              <2> 
  1154                              <2> %assign i +1
  1155 00000B2D [F202]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1156                              <2> 
  1157                              <2> %assign i +1
  1158 00000B35 [F202]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1159                              <2> 
  1160                              <2> %assign i +1
  1161 00000B3D [F202]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1162                              <2> 
  1163                              <2> %assign i +1
  1164 00000B45 [F202]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1165                              <2> 
  1166                              <2> %assign i +1
  1167 00000B4D [F202]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1168                              <2> 
  1169                              <2> %assign i +1
  1170 00000B55 [F202]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1171                              <2> 
  1172                              <2> %assign i +1
  1173                              <1> idt_end:
  1174                              <1> [BITS 32]
  1175                                  	%include "source/realmode.asm"
  1176                              <1> realmode:	;make sure the real mode program's address is in realmodeptr 
  1177                              <1> 			;and the return address is in realmodereturn
  1178 00000B5D FA                  <1> 	cli
  1179 00000B5E A3[700C0000]        <1> 	mov [realmodeeax], eax
  1180 00000B63 891D[6C0C0000]      <1> 	mov [realmodeebx], ebx
  1181 00000B69 8925[5E0C0000]      <1> 	mov [pmodeesp], esp
  1182                              <1> 
  1183 00000B6F BB[680C0000]        <1> 	mov ebx, cr0old
  1184                              <1> rmcopytofirstmbyte:
  1185 00000B74 8B03                <1> 	mov eax, [ebx]
  1186 00000B76 658903              <1> 	mov [gs:ebx], eax
  1187 00000B79 81C304000000        <1> 	add ebx, 4
  1188 00000B7F 81FB[780C0000]      <1> 	cmp ebx, realmodeptr
  1189 00000B85 76ED                <1> 	jbe rmcopytofirstmbyte
  1190                              <1> 
  1191 00000B87 EA[8E0B0000]3800    <1> 	jmp V8086_CODE_SEL:protected16bit
  1192                              <1> 
  1193                              <1> [BITS 16]
  1194                              <1> protected16bit:
  1195 00000B8E B84000              <1> 	mov ax, V8086_DATA_SEL
  1196 00000B91 8ED8                <1> 	mov ds, ax
  1197 00000B93 8EC0                <1> 	mov es, ax
  1198 00000B95 8EE0                <1> 	mov fs, ax
  1199 00000B97 8EE8                <1> 	mov gs, ax
  1200 00000B99 8ED0                <1> 	mov ss, ax
  1201 00000B9B 66BC[6E6F0000]      <1> 	mov esp, stackend
  1202 00000BA1 0F20C0              <1> 	mov eax, cr0
  1203 00000BA4 66A3[680C]          <1> 	mov [cr0old], eax
  1204 00000BA8 6625FEFFFF7F        <1> 	and eax, 0x7FFFFFFE
  1205 00000BAE 0F22C0              <1> 	mov cr0, eax	;now in real mode
  1206 00000BB1 EA[B60B]0010        <1> 	jmp 0x1000:inrealmode
  1207                              <1> 
  1208                              <1> inrealmode:
  1209 00000BB6 8CC8                <1> 	mov ax, cs
  1210 00000BB8 8ED8                <1> 	mov ds, ax
  1211 00000BBA 8EC0                <1> 	mov es, ax
  1212 00000BBC 8EE0                <1> 	mov fs, ax
  1213 00000BBE 8EE8                <1> 	mov gs, ax
  1214 00000BC0 8ED0                <1> 	mov ss, ax
  1215 00000BC2 BC[6E6F]            <1> 	mov sp, stackend ;because this is at 0x1000: and not 0x10000: it works
  1216                              <1> 	
  1217 00000BC5 B011                <1> 	mov al, 0x11
  1218 00000BC7 E620                <1> 	out 0x20, al
  1219 00000BC9 E6A0                <1> 	out 0xA0, al
  1220 00000BCB B008                <1> 	mov al, 0x8		;interrupt for master
  1221 00000BCD E621                <1> 	out 0x21, al
  1222 00000BCF B070                <1> 	mov al, 0x70	;interrupt for slave
  1223 00000BD1 E6A1                <1> 	out 0xA1, al
  1224 00000BD3 B004                <1> 	mov al, 4
  1225 00000BD5 E621                <1> 	out 0x21, al
  1226 00000BD7 B002                <1> 	mov al, 2
  1227 00000BD9 E6A1                <1> 	out 0xA1, al
  1228 00000BDB B001                <1> 	mov al, 0x1
  1229 00000BDD E621                <1> 	out 0x21, al
  1230 00000BDF B001                <1> 	mov al, 0x1
  1231 00000BE1 E6A1                <1> 	out 0xA1, al
  1232                              <1> 	
  1233 00000BE3 0F011E[620C]        <1> 	lidt [idt_real]
  1234 00000BE8 FB                  <1> 	sti
  1235                              <1> 
  1236 00000BE9 66A1[700C]          <1> 	mov eax, [realmodeeax]
  1237 00000BED 668B1E[6C0C]        <1> 	mov ebx, [realmodeebx]
  1238                              <1> 
  1239 00000BF2 FF16[780C]          <1> 	call word [realmodeptr] ;call the real mode program here
  1240                              <1> 
  1241 00000BF6 66A3[700C]          <1> 	mov [realmodeeax], eax
  1242 00000BFA 66891E[6C0C]        <1> 	mov [realmodeebx], ebx
  1243                              <1> 
  1244 00000BFF FA                  <1> 	cli
  1245 00000C00 0F0116[F902]        <1> 	lgdt [gdtr]
  1246 00000C05 0F011E[FF02]        <1> 	lidt [idtr]
  1247 00000C0A 0F20C0              <1> 	mov eax, cr0
  1248 00000C0D 0C01                <1> 	or al, 1
  1249 00000C0F 0F22C0              <1> 	mov cr0,eax
  1250 00000C12 EA[170C]2800        <1> 	jmp NEW_CODE_SEL:returntopmode
  1251                              <1> 
  1252                              <1> [BITS 32]
  1253                              <1> returntopmode:
  1254 00000C17 66B83000            <1> 	mov ax, NEW_DATA_SEL
  1255 00000C1B 8ED8                <1> 	mov ds, ax
  1256 00000C1D 8EC0                <1> 	mov es, ax
  1257 00000C1F 8EE0                <1> 	mov fs, ax
  1258 00000C21 8ED0                <1> 	mov ss, ax
  1259 00000C23 8B25[5E0C0000]      <1> 	mov esp, [pmodeesp]
  1260 00000C29 66B82000            <1> 	mov ax, SYS_DATA_SEL
  1261 00000C2D 8EE8                <1> 	mov gs, ax
  1262                              <1> 
  1263 00000C2F BB[680C0000]        <1> 	mov ebx, cr0old
  1264                              <1> rmcopyfromfirstmbyte:
  1265 00000C34 658B03              <1> 	mov eax, [gs:ebx]
  1266 00000C37 8903                <1> 	mov [ebx], eax
  1267 00000C39 81C304000000        <1> 	add ebx, 4
  1268 00000C3F 81FB[780C0000]      <1> 	cmp ebx, realmodeptr
  1269 00000C45 76ED                <1> 	jbe rmcopyfromfirstmbyte
  1270                              <1> 
  1271 00000C47 E89A3A0000          <1> 	call initialize.pic ;reset irq's and masks
  1272 00000C4C FB                  <1> 	sti
  1273 00000C4D A1[700C0000]        <1> 	mov eax, [realmodeeax]
  1274 00000C52 8B1D[6C0C0000]      <1> 	mov ebx, [realmodeebx]
  1275 00000C58 FF25[740C0000]      <1> 	jmp dword [realmodereturn]
  1276                              <1> 	
  1277 00000C5E 00000000            <1> pmodeesp dd 0
  1278                              <1> idt_real:
  1279 00000C62 FF03                <1> 	dw 0x3FF
  1280 00000C64 00000000            <1> 	dd 0
  1281 00000C68 00000000            <1> cr0old dd 0
  1282 00000C6C 00000000            <1> realmodeebx dd 0
  1283 00000C70 00000000            <1> realmodeeax dd 0
  1284 00000C74 00000000            <1> realmodereturn dd 0
  1285 00000C78 0000                <1> realmodeptr dw 0
  1286 00000C7A 00000000            <1> dd 0 ;make sure the copy thing doesnt overflow
  1287                                  [BITS 32]
  1288                                      %include "source/exception.asm"
  1289                              <1> %ifdef exceptions.included
  1290                              <1> unhand:	
  1291                              <1> 	%assign i 0
  1292                              <1> 	%rep 32
  1293                              <1> 	mov byte [intprob], i
  1294                              <1> 	jmp unhand2
  1295                              <1> 	%assign i i+1
  1296                              <1> 	%endrep
  1297 00000C7E C605[C50F0000]00    <2>  mov byte [intprob], i
  1298 00000C85 E974010000          <2>  jmp unhand2
  1299                              <2>  %assign i i+1
  1300 00000C8A C605[C50F0000]01    <2>  mov byte [intprob], i
  1301 00000C91 E968010000          <2>  jmp unhand2
  1302                              <2>  %assign i i+1
  1303 00000C96 C605[C50F0000]02    <2>  mov byte [intprob], i
  1304 00000C9D E95C010000          <2>  jmp unhand2
  1305                              <2>  %assign i i+1
  1306 00000CA2 C605[C50F0000]03    <2>  mov byte [intprob], i
  1307 00000CA9 E950010000          <2>  jmp unhand2
  1308                              <2>  %assign i i+1
  1309 00000CAE C605[C50F0000]04    <2>  mov byte [intprob], i
  1310 00000CB5 E944010000          <2>  jmp unhand2
  1311                              <2>  %assign i i+1
  1312 00000CBA C605[C50F0000]05    <2>  mov byte [intprob], i
  1313 00000CC1 E938010000          <2>  jmp unhand2
  1314                              <2>  %assign i i+1
  1315 00000CC6 C605[C50F0000]06    <2>  mov byte [intprob], i
  1316 00000CCD E92C010000          <2>  jmp unhand2
  1317                              <2>  %assign i i+1
  1318 00000CD2 C605[C50F0000]07    <2>  mov byte [intprob], i
  1319 00000CD9 E920010000          <2>  jmp unhand2
  1320                              <2>  %assign i i+1
  1321 00000CDE C605[C50F0000]08    <2>  mov byte [intprob], i
  1322 00000CE5 E914010000          <2>  jmp unhand2
  1323                              <2>  %assign i i+1
  1324 00000CEA C605[C50F0000]09    <2>  mov byte [intprob], i
  1325 00000CF1 E908010000          <2>  jmp unhand2
  1326                              <2>  %assign i i+1
  1327 00000CF6 C605[C50F0000]0A    <2>  mov byte [intprob], i
  1328 00000CFD E9FC000000          <2>  jmp unhand2
  1329                              <2>  %assign i i+1
  1330 00000D02 C605[C50F0000]0B    <2>  mov byte [intprob], i
  1331 00000D09 E9F0000000          <2>  jmp unhand2
  1332                              <2>  %assign i i+1
  1333 00000D0E C605[C50F0000]0C    <2>  mov byte [intprob], i
  1334 00000D15 E9E4000000          <2>  jmp unhand2
  1335                              <2>  %assign i i+1
  1336 00000D1A C605[C50F0000]0D    <2>  mov byte [intprob], i
  1337 00000D21 E9D8000000          <2>  jmp unhand2
  1338                              <2>  %assign i i+1
  1339 00000D26 C605[C50F0000]0E    <2>  mov byte [intprob], i
  1340 00000D2D E9CC000000          <2>  jmp unhand2
  1341                              <2>  %assign i i+1
  1342 00000D32 C605[C50F0000]0F    <2>  mov byte [intprob], i
  1343 00000D39 E9C0000000          <2>  jmp unhand2
  1344                              <2>  %assign i i+1
  1345 00000D3E C605[C50F0000]10    <2>  mov byte [intprob], i
  1346 00000D45 E9B4000000          <2>  jmp unhand2
  1347                              <2>  %assign i i+1
  1348 00000D4A C605[C50F0000]11    <2>  mov byte [intprob], i
  1349 00000D51 E9A8000000          <2>  jmp unhand2
  1350                              <2>  %assign i i+1
  1351 00000D56 C605[C50F0000]12    <2>  mov byte [intprob], i
  1352 00000D5D E99C000000          <2>  jmp unhand2
  1353                              <2>  %assign i i+1
  1354 00000D62 C605[C50F0000]13    <2>  mov byte [intprob], i
  1355 00000D69 E990000000          <2>  jmp unhand2
  1356                              <2>  %assign i i+1
  1357 00000D6E C605[C50F0000]14    <2>  mov byte [intprob], i
  1358 00000D75 E984000000          <2>  jmp unhand2
  1359                              <2>  %assign i i+1
  1360 00000D7A C605[C50F0000]15    <2>  mov byte [intprob], i
  1361 00000D81 E978000000          <2>  jmp unhand2
  1362                              <2>  %assign i i+1
  1363 00000D86 C605[C50F0000]16    <2>  mov byte [intprob], i
  1364 00000D8D E96C000000          <2>  jmp unhand2
  1365                              <2>  %assign i i+1
  1366 00000D92 C605[C50F0000]17    <2>  mov byte [intprob], i
  1367 00000D99 E960000000          <2>  jmp unhand2
  1368                              <2>  %assign i i+1
  1369 00000D9E C605[C50F0000]18    <2>  mov byte [intprob], i
  1370 00000DA5 E954000000          <2>  jmp unhand2
  1371                              <2>  %assign i i+1
  1372 00000DAA C605[C50F0000]19    <2>  mov byte [intprob], i
  1373 00000DB1 E948000000          <2>  jmp unhand2
  1374                              <2>  %assign i i+1
  1375 00000DB6 C605[C50F0000]1A    <2>  mov byte [intprob], i
  1376 00000DBD E93C000000          <2>  jmp unhand2
  1377                              <2>  %assign i i+1
  1378 00000DC2 C605[C50F0000]1B    <2>  mov byte [intprob], i
  1379 00000DC9 E930000000          <2>  jmp unhand2
  1380                              <2>  %assign i i+1
  1381 00000DCE C605[C50F0000]1C    <2>  mov byte [intprob], i
  1382 00000DD5 E924000000          <2>  jmp unhand2
  1383                              <2>  %assign i i+1
  1384 00000DDA C605[C50F0000]1D    <2>  mov byte [intprob], i
  1385 00000DE1 E918000000          <2>  jmp unhand2
  1386                              <2>  %assign i i+1
  1387 00000DE6 C605[C50F0000]1E    <2>  mov byte [intprob], i
  1388 00000DED E90C000000          <2>  jmp unhand2
  1389                              <2>  %assign i i+1
  1390 00000DF2 C605[C50F0000]1F    <2>  mov byte [intprob], i
  1391 00000DF9 E900000000          <2>  jmp unhand2
  1392                              <2>  %assign i i+1
  1393                              <1> unhand2:
  1394 00000DFE FA                  <1> 	cli
  1395 00000DFF 1E                  <1> 	push ds
  1396 00000E00 06                  <1> 	push es
  1397 00000E01 0FA0                <1> 	push fs
  1398 00000E03 0FA8                <1> 	push gs
  1399 00000E05 16                  <1> 	push ss
  1400 00000E06 60                  <1> 	pushad
  1401                              <1> %ifdef gui.included
  1402                              <1> 	cmp byte [guion], 0
  1403                              <1> 	je near noguiunhandstuff
  1404                              <1> 	mov word [locunhandy], 8
  1405                              <1> 	mov word [locunhandx], 8
  1406                              <1> 	mov bx, [background]
  1407                              <1> 	mov [backgroundcache], bx
  1408                              <1> 	mov byte [mousedisabled],1
  1409                              <1> 	mov bx, 1111100000000000b
  1410                              <1> 	mov [background], bx
  1411                              <1> noguiunhandstuff:
  1412                              <1> %endif
  1413 00000E07 89E6                <1> 	mov esi, esp
  1414 00000E09 8935[B30F0000]      <1> 	mov [espfirst], esi
  1415 00000E0F 81C6BC000000        <1> 	add esi, ((unhndrgend - unhndrg)/15)*4
  1416 00000E15 8935[AF0F0000]      <1> 	mov [esploc], esi
  1417 00000E1B BE[CE0F0000]        <1> 	mov esi, unhandmsg
  1418 00000E20 8935[B70F0000]      <1> 	mov [esiloc], esi
  1419 00000E26 31C9                <1> 	xor ecx, ecx
  1420 00000E28 8A0D[C50F0000]      <1> 	mov cl, [intprob]
  1421 00000E2E BB[61130000]        <1> 	mov ebx, errortypes
  1422 00000E33 C1E102              <1> 	shl ecx, 2
  1423 00000E36 01CB                <1> 	add ebx, ecx
  1424 00000E38 81FB[A1130000]      <1> 	cmp ebx, errortypesend
  1425 00000E3E 7205                <1> 	jb gooderrortype
  1426 00000E40 BB[A1130000]        <1> 	mov ebx, errortypesend
  1427                              <1> gooderrortype:
  1428 00000E45 8B33                <1> 	mov esi, [ebx]
  1429                              <1> %ifdef gui.included
  1430                              <1> 	cmp byte [guion], 0
  1431                              <1> 	je near errortext
  1432                              <1> 	mov cx, [locunhandy]
  1433                              <1> 	mov dx, [locunhandx]
  1434                              <1> 	mov ax, 1
  1435                              <1> 	xor bx, bx
  1436                              <1> 	call showstring2
  1437                              <1> 	mov [locunhandy], cx
  1438                              <1> 	mov [locunhandx], dx
  1439                              <1> 	jmp errortextdone
  1440                              <1> %endif
  1441                              <1> errortext:
  1442 00000E47 E8B00C0000          <1> 	call print		;;get the error message and print it
  1443                              <1> errortextdone:
  1444 00000E4C 31C9                <1> 	xor ecx, ecx
  1445 00000E4E 8A0D[C50F0000]      <1> 	mov cl, [intprob]
  1446 00000E54 E825010000          <1> 	call expdump
  1447                              <1> dumpstack:
  1448 00000E59 8B35[AF0F0000]      <1> 	mov esi, [esploc]
  1449 00000E5F 39E6                <1> 	cmp esi, esp
  1450 00000E61 7216                <1> 	jb donedump
  1451 00000E63 368B0E              <1> 	mov ecx, [ss:esi]
  1452 00000E66 81EE04000000        <1> 	sub esi, 4
  1453 00000E6C 8935[AF0F0000]      <1> 	mov [esploc], esi
  1454 00000E72 E807010000          <1> 	call expdump
  1455 00000E77 EBE0                <1> 	jmp dumpstack
  1456                              <1> donedump:
  1457 00000E79 0F20C1              <1> 	mov ecx, cr0
  1458 00000E7C E8FD000000          <1> 	call expdump
  1459 00000E81 0F20D1              <1> 	mov ecx, cr2
  1460 00000E84 E8F5000000          <1> 	call expdump
  1461 00000E89 0F20D9              <1> 	mov ecx, cr3
  1462 00000E8C E8ED000000          <1> 	call expdump
  1463 00000E91 0F20E1              <1> 	mov ecx, cr4
  1464 00000E94 E8E5000000          <1> 	call expdump
  1465 00000E99 8B35[AF0F0000]      <1> 	mov esi, [esploc]
  1466 00000E9F 368B7C2434          <1> 	mov edi, [ss:esp + 52]
  1467 00000EA4 81C710000000        <1> 	add edi, 16
  1468 00000EAA 893D[CA0F0000]      <1> 	mov [codelocend], edi
  1469 00000EB0 81EF20000000        <1> 	sub edi, 32
  1470                              <1> dumpcodeloop:
  1471 00000EB6 893D[C60F0000]      <1> 	mov [codeloc], edi
  1472 00000EBC 8B0F                <1> 	mov ecx, [edi]
  1473 00000EBE E8BB000000          <1> 	call expdump
  1474 00000EC3 8B3D[C60F0000]      <1> 	mov edi, [codeloc]
  1475 00000EC9 81C704000000        <1> 	add edi, 4
  1476 00000ECF 3B3D[CA0F0000]      <1> 	cmp edi, [codelocend]
  1477 00000ED5 72DF                <1> 	jb dumpcodeloop
  1478 00000ED7 BE[0F0F0000]        <1> 	mov esi, backtoosmsg
  1479                              <1> %ifdef gui.included
  1480                              <1> 	cmp byte [guion], 0
  1481                              <1> 	je backtomsg
  1482                              <1> guibacktomsg:
  1483                              <1> 	mov dx, [locunhandx]
  1484                              <1> 	mov cx, [locunhandy]
  1485                              <1> 	mov ax, 1
  1486                              <1> 	xor bx, bx
  1487                              <1> 	call showstring2
  1488                              <1> 	jmp backtomsgdone
  1489                              <1> backtomsg:
  1490                              <1> %endif
  1491 00000EDC E81B0C0000          <1> 	call print
  1492                              <1> backtomsgdone:
  1493 00000EE1 30C0                <1> 	xor al, al
  1494 00000EE3 E87A100000          <1> 	call rdcharint
  1495 00000EE8 803D[C50F0000]03    <1> 	cmp byte [intprob], 3
  1496 00000EEF 7511                <1> 	jne nodebugint
  1497                              <1> %ifdef gui.included
  1498                              <1> 	cmp byte [guion], 0
  1499                              <1> 	je nodebuggui
  1500                              <1> 	mov bx, [backgroundcache]
  1501                              <1> 	mov [background], bx
  1502                              <1> 	xor bx, bx
  1503                              <1> 	mov byte [mousedisabled], 0
  1504                              <1> 	call guiclear
  1505                              <1> 	call reloadallgraphics
  1506                              <1> nodebuggui:
  1507                              <1> %endif
  1508 00000EF1 8B35[B30F0000]      <1> 	mov esi, [espfirst]
  1509 00000EF7 89F4                <1> 	mov esp, esi
  1510 00000EF9 61                  <1> 	popad
  1511 00000EFA 17                  <1> 	pop ss
  1512 00000EFB 0FA9                <1> 	pop gs
  1513 00000EFD 0FA1                <1> 	pop fs
  1514 00000EFF 07                  <1> 	pop es
  1515 00000F00 1F                  <1> 	pop ds
  1516 00000F01 CF                  <1> 	iret
  1517                              <1> nodebugint:
  1518 00000F02 61                  <1> 	popad
  1519 00000F03 17                  <1> 	pop ss
  1520 00000F04 0FA9                <1> 	pop gs
  1521 00000F06 0FA1                <1> 	pop fs
  1522 00000F08 07                  <1> 	pop es
  1523 00000F09 1F                  <1> 	pop ds
  1524                              <1> %ifdef gui.included
  1525                              <1> 	cmp byte [guion], 0
  1526                              <1> 	je returnunhandgui
  1527                              <1> 	mov bx, [backgroundcache]
  1528                              <1> 	mov [background], bx
  1529                              <1> 	xor bx, bx
  1530                              <1> 	mov byte [mousedisabled], 0
  1531                              <1> 	call guiclear
  1532                              <1> 	call reloadallgraphics
  1533                              <1> 	jmp guiboot
  1534                              <1> %endif
  1535                              <1> returnunhandgui:
  1536 00000F0A E9D9170000          <1> 	jmp nwcmd
  1537 00000F0F 506C6561736520706F- <1> backtoosmsg db "Please post any problems in the Issues section at solleros.googlecode.com",10
  1538 00000F18 737420616E79207072- <1>
  1539 00000F21 6F626C656D7320696E- <1>
  1540 00000F2A 207468652049737375- <1>
  1541 00000F33 65732073656374696F- <1>
  1542 00000F3C 6E20617420736F6C6C- <1>
  1543 00000F45 65726F732E676F6F67- <1>
  1544 00000F4E 6C65636F64652E636F- <1>
  1545 00000F57 6D0A                <1>
  1546 00000F59 507265737320616E79- <1> 			db "Press any key to return to SollerOS",10,0
  1547 00000F62 206B657920746F2072- <1>
  1548 00000F6B 657475726E20746F20- <1>
  1549 00000F74 536F6C6C65724F530A- <1>
  1550 00000F7D 00                  <1>
  1551                              <1> expdump:
  1552 00000F7E 8B35[B70F0000]      <1> 	mov esi, [esiloc]
  1553 00000F84 89F7                <1> 	mov edi, esi
  1554 00000F86 81C70F000000        <1> 	add edi, 15
  1555 00000F8C 81C604000000        <1> 	add esi, 4
  1556 00000F92 893D[B70F0000]      <1> 	mov [esiloc], edi
  1557 00000F98 81EF03000000        <1> 	sub edi, 3
  1558 00000F9E E8A61B0000          <1> 	call converthex
  1559 00000FA3 81EE04000000        <1> 	sub esi, 4
  1560                              <1> %ifdef gui.included
  1561                              <1> 	cmp byte [guion], 0
  1562                              <1> 	je near expdumptext
  1563                              <1> 	mov cx, [locunhandy]
  1564                              <1> 	mov dx, [locunhandx]
  1565                              <1> 	mov ax, 1
  1566                              <1> 	xor bx, bx
  1567                              <1> 	call showstring2
  1568                              <1> 	mov [locunhandy], cx
  1569                              <1> 	mov [locunhandx], dx
  1570                              <1> 	ret
  1571                              <1> %endif
  1572                              <1> expdumptext:
  1573 00000FA9 E84E0B0000          <1> 	call print
  1574 00000FAE C3                  <1> 	ret
  1575 00000FAF 00000000            <1> esploc dd 0
  1576 00000FB3 00000000            <1> espfirst dd 0
  1577 00000FB7 00000000            <1> esiloc dd 0
  1578 00000FBB 00000000            <1> esiregbuf dd 0
  1579 00000FBF 0100                <1> locunhandy dw 1
  1580 00000FC1 0100                <1> locunhandx dw 1
  1581 00000FC3 0000                <1> backgroundcache dw 0
  1582 00000FC5 00                  <1> intprob db 0
  1583 00000FC6 00000000            <1> codeloc dd 0
  1584 00000FCA 00000000            <1> codelocend dd 0
  1585                              <1> 	unhandmsg:	
  1586 00000FCE 494E543D3030303030- <1> 			db "INT=00000000 ",10,0
  1587 00000FD7 303030200A00        <1>
  1588                              <1> unhndrg:
  1589 00000FDD FFFFFFFF3030303030- <1> 	times 7 db 255,255,255,255,"00000000  ",0	;;this dumps the stack before the stack frame in question
  1590 00000FE6 303030202000<rept>  <1>
  1591 00001046 FFFFFFFF3030303030- <1> 			db 255,255,255,255,"00000000 ",10,0
  1592 0000104F 303030200A00        <1>
  1593 00001055 FFFFFFFF3030303030- <1> 	times 7 db 255,255,255,255,"00000000  ",0	;;this dumps the stack before the stack frame in question
  1594 0000105E 303030202000<rept>  <1>
  1595 000010BE FFFFFFFF3030303030- <1> 			db 255,255,255,255,"00000000 ",10,0
  1596 000010C7 303030200A00        <1>
  1597 000010CD FFFFFFFF3030303030- <1> 	times 7 db 255,255,255,255,"00000000  ",0	;;this dumps the stack before the stack frame in question
  1598 000010D6 303030202000<rept>  <1>
  1599 00001136 FFFFFFFF3030303030- <1> 			db 255,255,255,255,"00000000 ",10,0
  1600 0000113F 303030200A00        <1>
  1601 00001145 FFFFFFFF3030303030- <1> 	times 7 db 255,255,255,255,"00000000  ",0	;;this dumps the stack before the stack frame in question
  1602 0000114E 303030202000<rept>  <1>
  1603 000011AE FFFFFFFF3030303030- <1> 			db 255,255,255,255,"00000000 ",10,0
  1604 000011B7 303030200A00        <1>
  1605                              <1> unhandregs:
  1606 000011BD 45464C3D3030303030- <1> 			db "EFL=00000000  ",0
  1607 000011C6 303030202000        <1>
  1608 000011CC 43533A3D3030303030- <1> 			db "CS:=00000000  ",0
  1609 000011D5 303030202000        <1>
  1610 000011DB 4549503D3030303030- <1> 			db "EIP=00000000 ",10,0
  1611 000011E4 303030200A00        <1>
  1612 000011EA 44533A3D3030303030- <1> 			db "DS:=00000000  ",0
  1613 000011F3 303030202000        <1>
  1614 000011F9 45533A3D3030303030- <1> 			db "ES:=00000000  ",0
  1615 00001202 303030202000        <1>
  1616 00001208 46533A3D3030303030- <1> 			db "FS:=00000000  ",0
  1617 00001211 303030202000        <1>
  1618 00001217 47533A3D3030303030- <1> 			db "GS:=00000000  ",0
  1619 00001220 303030202000        <1>
  1620 00001226 53533A3D3030303030- <1> 			db "SS:=00000000 ",10,0
  1621 0000122F 303030200A00        <1>
  1622 00001235 4541583D3030303030- <1> 			db "EAX=00000000  ",0
  1623 0000123E 303030202000        <1>
  1624 00001244 4543583D3030303030- <1> 			db "ECX=00000000  ",0
  1625 0000124D 303030202000        <1>
  1626 00001253 4544583D3030303030- <1> 			db "EDX=00000000  ",0
  1627 0000125C 303030202000        <1>
  1628 00001262 4542583D3030303030- <1> 			db "EBX=00000000 ",10,0
  1629 0000126B 303030200A00        <1>
  1630 00001271 4553503D3030303030- <1> 			db "ESP=00000000  ",0
  1631 0000127A 303030202000        <1>
  1632 00001280 4542503D3030303030- <1> 			db "EBP=00000000  ",0
  1633 00001289 303030202000        <1>
  1634 0000128F 4553493D3030303030- <1> 			db "ESI=00000000  ",0
  1635 00001298 303030202000        <1>
  1636 0000129E 4544493D3030303030- <1> unhndrgend:	db "EDI=00000000 ",10,0
  1637 000012A7 303030200A00        <1>
  1638 000012AD 4352303D3030303030- <1> 			db "CR0=00000000  ",0
  1639 000012B6 303030202000        <1>
  1640 000012BC 4352323D3030303030- <1> 			db "CR2=00000000  ",0
  1641 000012C5 303030202000        <1>
  1642 000012CB 4352333D3030303030- <1> 			db "CR3=00000000  ",0
  1643 000012D4 303030202000        <1>
  1644 000012DA 4352343D3030303030- <1> 			db "CR4=00000000 ",10,0
  1645 000012E3 303030200A00        <1>
  1646 000012E9 FFFFFFFF3030303030- <1> unhandcode: times 2 db 255,255,255,255,"00000000  ",0	;;this dumps the code before and after the interrupt in question
  1647 000012F2 303030202000<rept>  <1>
  1648 00001307 FFFFFFFF3030303030- <1> 			db 255,255,255,255,"00000000 ",255,0
  1649 00001310 30303020FF00        <1>
  1650 00001316 FFFFFF5B3030303030- <1> 			db 255,255,255,"[00000000] ",0
  1651 0000131F 3030305D2000        <1>
  1652 00001325 FFFFFFFF3030303030- <1> 			times 3 db 255,255,255,255,"00000000  ",0
  1653 0000132E 303030202000<rept>  <1>
  1654 00001352 FFFFFFFF3030303030- <1> 			db 255,255,255,255,"00000000",255,10,0
  1655 0000135B 303030FF0A00        <1>
  1656                              <1> unhandmsgend:
  1657                              <1> 
  1658                              <1> errortypes:
  1659 00001361 [A5130000]          <1> 			dd err0
  1660 00001365 [09140000]          <1> 			dd err1
  1661 00001369 [6A140000]          <1> 			dd err2
  1662 0000136D [BF140000]          <1> 			dd err3
  1663 00001371 [23150000]          <1> 			dd err4
  1664 00001375 [75150000]          <1> 			dd err5
  1665 00001379 [DF150000]          <1> 			dd err6
  1666 0000137D [47160000]          <1> 			dd err7
  1667 00001381 [91160000]          <1> 			dd err8
  1668 00001385 [EE160000]          <1> 			dd err9
  1669 00001389 [47170000]          <1> 			dd err10
  1670 0000138D [92170000]          <1> 			dd err11
  1671 00001391 [E2170000]          <1> 			dd err12
  1672 00001395 [3B180000]          <1> 			dd err13
  1673 00001399 [9E180000]          <1> 			dd err14
  1674 0000139D [DA180000]          <1> 			dd err15
  1675                              <1> errortypesend:
  1676 000013A1 [65190000]          <1> 			dd unknownerror
  1677                              <1> 			
  1678 000013A5 4469766973696F6E20- <1> err0	db "Division by zero:",10
  1679 000013AE 6279207A65726F3A0A  <1>
  1680 000013B7 546563686E6963616C- <1> 		db "Technically lim a",246,"x = ",236," when a is any real number. Happy Easter!",10
  1681 000013C0 6C79206C696D2061F6- <1>
  1682 000013C9 78203D20EC20776865- <1>
  1683 000013D2 6E206120697320616E- <1>
  1684 000013DB 79207265616C206E75- <1>
  1685 000013E4 6D6265722E20486170- <1>
  1686 000013ED 707920456173746572- <1>
  1687 000013F6 210A                <1>
  1688 000013F8 202020202020202020- <1> 		db "            x",26,"0",10,0
  1689 00001401 202020781A300A00    <1>
  1690                              <1> 		
  1691 00001409 53696E676C652D7374- <1> err1	db "Single-step/Breakpoint:",10
  1692 00001412 65702F427265616B70- <1>
  1693 0000141B 6F696E743A0A        <1>
  1694 00001421 4120627265616B706F- <1> 		db "A breakpoint fault, breakpoint trap, or single-step trap was triggered.",10,0
  1695 0000142A 696E74206661756C74- <1>
  1696 00001433 2C20627265616B706F- <1>
  1697 0000143C 696E7420747261702C- <1>
  1698 00001445 206F722073696E676C- <1>
  1699 0000144E 652D73746570207472- <1>
  1700 00001457 617020776173207472- <1>
  1701 00001460 696767657265642E0A- <1>
  1702 00001469 00                  <1>
  1703                              <1> 		
  1704 0000146A 4E6F6E6D61736B6162- <1> err2	db "Nonmaskable interrupt:",10
  1705 00001473 6C6520696E74657272- <1>
  1706 0000147C 7570743A0A          <1>
  1707 00001481 412068617264776172- <1> 		db "A hardware interrupt was triggered that could not be masked.",10,0
  1708 0000148A 6520696E7465727275- <1>
  1709 00001493 707420776173207472- <1>
  1710 0000149C 696767657265642074- <1>
  1711 000014A5 68617420636F756C64- <1>
  1712 000014AE 206E6F74206265206D- <1>
  1713 000014B7 61736B65642E0A00    <1>
  1714                              <1> 		
  1715 000014BF 427265616B706F696E- <1> err3	db "Breakpoint:",10
  1716 000014C8 743A0A              <1>
  1717 000014CB 5468697320696E7465- <1> 		db "This interrupt is used in programs to show the stack and registers and can be",10
  1718 000014D4 727275707420697320- <1>
  1719 000014DD 7573656420696E2070- <1>
  1720 000014E6 726F6772616D732074- <1>
  1721 000014EF 6F2073686F77207468- <1>
  1722 000014F8 6520737461636B2061- <1>
  1723 00001501 6E6420726567697374- <1>
  1724 0000150A 65727320616E642063- <1>
  1725 00001513 616E2062650A        <1>
  1726 00001519 69676E6F7265642E0A- <1> 		db "ignored.",10,0
  1727 00001522 00                  <1>
  1728                              <1> 		
  1729 00001523 4F766572666C6F773A- <1> err4	db "Overflow:",10
  1730 0000152C 0A                  <1>
  1731 0000152D 5468652070726F6365- <1> 		db "The processor ran into an INTO instruction with the overflow flag set.",10,0
  1732 00001536 73736F722072616E20- <1>
  1733 0000153F 696E746F20616E2049- <1>
  1734 00001548 4E544F20696E737472- <1>
  1735 00001551 756374696F6E207769- <1>
  1736 0000155A 746820746865206F76- <1>
  1737 00001563 6572666C6F7720666C- <1>
  1738 0000156C 6167207365742E0A00  <1>
  1739                              <1> 		
  1740 00001575 426F756E6473206368- <1> err5	db "Bounds check:",10
  1741 0000157E 65636B3A0A          <1>
  1742 00001583 5468652070726F6365- <1> 		db "The processor rebounded from a BOUND instruction run on an operand that was out",10
  1743 0000158C 73736F72207265626F- <1>
  1744 00001595 756E6465642066726F- <1>
  1745 0000159E 6D206120424F554E44- <1>
  1746 000015A7 20696E737472756374- <1>
  1747 000015B0 696F6E2072756E206F- <1>
  1748 000015B9 6E20616E206F706572- <1>
  1749 000015C2 616E64207468617420- <1>
  1750 000015CB 776173206F75740A    <1>
  1751 000015D3 6F6620626F756E6473- <1> 		db "of bounds.",10,0
  1752 000015DC 2E0A00              <1>
  1753                              <1> 		
  1754 000015DF 496E76616C6964206F- <1> err6	db "Invalid opcode:",10
  1755 000015E8 70636F64653A0A      <1>
  1756 000015EF 5468652070726F6365- <1> 		db "The processor has no idea what it was trying to execute. Don't run SSE4 code",10
  1757 000015F8 73736F722068617320- <1>
  1758 00001601 6E6F20696465612077- <1>
  1759 0000160A 686174206974207761- <1>
  1760 00001613 7320747279696E6720- <1>
  1761 0000161C 746F20657865637574- <1>
  1762 00001625 652E20446F6E277420- <1>
  1763 0000162E 72756E205353453420- <1>
  1764 00001637 636F64650A          <1>
  1765 0000163C 6F6E20343836277321- <1> 		db "on 486's!",10,0
  1766 00001645 0A00                <1>
  1767                              <1> 		
  1768 00001647 436F70726F63657373- <1> err7	db "Coprocessor not available:",10
  1769 00001650 6F72206E6F74206176- <1>
  1770 00001659 61696C61626C653A0A  <1>
  1771 00001662 446F6E277420796F75- <1> 		db "Don't you know they don't make those anymore!",10,0
  1772 0000166B 206B6E6F7720746865- <1>
  1773 00001674 7920646F6E2774206D- <1>
  1774 0000167D 616B652074686F7365- <1>
  1775 00001686 20616E796D6F726521- <1>
  1776 0000168F 0A00                <1>
  1777                              <1> 		
  1778 00001691 446F75626C65206661- <1> err8	db "Double fault:",10
  1779 0000169A 756C743A0A          <1>
  1780 0000169F 546865206578636570- <1> 		db "The exception handler could not handle that it could not handle an exception.",10,0
  1781 000016A8 74696F6E2068616E64- <1>
  1782 000016B1 6C657220636F756C64- <1>
  1783 000016BA 206E6F742068616E64- <1>
  1784 000016C3 6C6520746861742069- <1>
  1785 000016CC 7420636F756C64206E- <1>
  1786 000016D5 6F742068616E646C65- <1>
  1787 000016DE 20616E206578636570- <1>
  1788 000016E7 74696F6E2E0A00      <1>
  1789                              <1> 		
  1790 000016EE 436F70726F63657373- <1> err9	db "Coprocessor segment overrun:",10,0
  1791 000016F7 6F72207365676D656E- <1>
  1792 00001700 74206F76657272756E- <1>
  1793 00001709 3A0A00              <1>
  1794 0000170C 54686973206E657665- <1> 		db "This never happens in modern computers, and never should.",10,0
  1795 00001715 722068617070656E73- <1>
  1796 0000171E 20696E206D6F646572- <1>
  1797 00001727 6E20636F6D70757465- <1>
  1798 00001730 72732C20616E64206E- <1>
  1799 00001739 657665722073686F75- <1>
  1800 00001742 6C642E0A00          <1>
  1801                              <1> 
  1802 00001747 496E76616C69642054- <1> err10	db "Invalid TSS:",10
  1803 00001750 53533A0A            <1>
  1804 00001754 546865205453532074- <1> 		db "The TSS that was switched to is invalid. Nothing funny here.",10,0
  1805 0000175D 686174207761732073- <1>
  1806 00001766 776974636865642074- <1>
  1807 0000176F 6F20697320696E7661- <1>
  1808 00001778 6C69642E204E6F7468- <1>
  1809 00001781 696E672066756E6E79- <1>
  1810 0000178A 20686572652E0A00    <1>
  1811                              <1> 		
  1812 00001792 5365676D656E74206E- <1> err11	db "Segment not present:",10
  1813 0000179B 6F742070726573656E- <1>
  1814 000017A4 743A0A              <1>
  1815 000017A7 546865207072657365- <1> 		db "The present bit of the segment descriptor is set to zero.",10,0
  1816 000017B0 6E7420626974206F66- <1>
  1817 000017B9 20746865207365676D- <1>
  1818 000017C2 656E74206465736372- <1>
  1819 000017CB 6970746F7220697320- <1>
  1820 000017D4 73657420746F207A65- <1>
  1821 000017DD 726F2E0A00          <1>
  1822                              <1> 		
  1823 000017E2 537461636B20657863- <1> err12	db "Stack exception:",10
  1824 000017EB 657074696F6E3A0A    <1>
  1825 000017F3 546865205353206465- <1> 		db "The SS descriptor is invalid or not present or its limit is too small.",10,0
  1826 000017FC 7363726970746F7220- <1>
  1827 00001805 697320696E76616C69- <1>
  1828 0000180E 64206F72206E6F7420- <1>
  1829 00001817 70726573656E74206F- <1>
  1830 00001820 7220697473206C696D- <1>
  1831 00001829 697420697320746F6F- <1>
  1832 00001832 20736D616C6C2E0A00  <1>
  1833                              <1> 		
  1834 0000183B 47656E6572616C2070- <1> err13	db "General protection violation:",10
  1835 00001844 726F74656374696F6E- <1>
  1836 0000184D 2076696F6C6174696F- <1>
  1837 00001856 6E3A0A              <1>
  1838 00001859 596F752076696F6C61- <1> 		db "You violated the computer. Step away slowly. The FBI is on its way.",10,0
  1839 00001862 746564207468652063- <1>
  1840 0000186B 6F6D70757465722E20- <1>
  1841 00001874 537465702061776179- <1>
  1842 0000187D 20736C6F776C792E20- <1>
  1843 00001886 546865204642492069- <1>
  1844 0000188F 73206F6E2069747320- <1>
  1845 00001898 7761792E0A00        <1>
  1846                              <1> 		
  1847 0000189E 50616765206661756C- <1> err14	db "Page fault:",10
  1848 000018A7 743A0A              <1>
  1849 000018AA 546865207061676520- <1> 		db "The page that was requested was not available.",10,0
  1850 000018B3 746861742077617320- <1>
  1851 000018BC 726571756573746564- <1>
  1852 000018C5 20776173206E6F7420- <1>
  1853 000018CE 617661696C61626C65- <1>
  1854 000018D7 2E0A00              <1>
  1855                              <1> 		
  1856 000018DA 526573657276656420- <1> err15	db "Reserved for Plan R:",10
  1857 000018E3 666F7220506C616E20- <1>
  1858 000018EC 523A0A              <1>
  1859 000018EF 5468697320696E7465- <1> 		db "This interrupt is reserved for usage only by the military when it is necessary",10
  1860 000018F8 727275707420697320- <1>
  1861 00001901 726573657276656420- <1>
  1862 0000190A 666F72207573616765- <1>
  1863 00001913 206F6E6C7920627920- <1>
  1864 0000191C 746865206D696C6974- <1>
  1865 00001925 617279207768656E20- <1>
  1866 0000192E 6974206973206E6563- <1>
  1867 00001937 6573736172790A      <1>
  1868 0000193E 746F20696E69746961- <1> 		db "to initiate a full-scale coup d'",130,"tat.",10,0
  1869 00001947 746520612066756C6C- <1>
  1870 00001950 2D7363616C6520636F- <1>
  1871 00001959 757020642782746174- <1>
  1872 00001962 2E0A00              <1>
  1873                              <1> 		
  1874 00001965 576861742074686520- <1> unknownerror db "What the hell just happened? Is everyone okay? Hard drive? Video card?",10
  1875 0000196E 68656C6C206A757374- <1>
  1876 00001977 2068617070656E6564- <1>
  1877 00001980 3F2049732065766572- <1>
  1878 00001989 796F6E65206F6B6179- <1>
  1879 00001992 3F2048617264206472- <1>
  1880 0000199B 6976653F2056696465- <1>
  1881 000019A4 6F20636172643F0A    <1>
  1882 000019AC 4D656D6F72793F2041- <1> 			db	"Memory? Are you there?",10,0
  1883 000019B5 726520796F75207468- <1>
  1884 000019BE 6572653F0A00        <1>
  1885                              <1> %else
  1886                              <1> unhand:	
  1887                              <1> 	%assign i 0
  1888                              <1> 	%rep 32
  1889                              <1> 	mov byte [intprob], i
  1890                              <1> 	jmp unhand2
  1891                              <1> 	%assign i i+1
  1892                              <1> 	%endrep
  1893                              <1> unhand2:
  1894                              <1> 	cmp byte [intprob], 3
  1895                              <1> 	je handled	;if it is a debug interrupt, it is auto handled
  1896                              <1> 	mov ebx, 0xDEADCD00 ;this shows that an exception occured even though more detailed info cannot be shown
  1897                              <1> 						;CD stands for the interrupt code, DEAD shows that the program died because of the int
  1898                              <1> 	mov bl, [intprob]
  1899                              <1> 	jmp exitprog
  1900                              <1> intprob db 0
  1901                              <1> %endif
  1902                                      %include "source/ints.asm"
  1903                              <1> newints:	;;for great justice
  1904 000019C4 80FC00              <1> 	cmp ah, 0
  1905 000019C7 0F847F000000        <1> 	je near intx0   ;kills app
  1906 000019CD 80FC01              <1> 	cmp ah, 1
  1907 000019D0 0F84FE000000        <1> 	je near intx1   ;print string
  1908 000019D6 80FC02              <1> 	cmp ah, 2
  1909 000019D9 0F8450010000        <1> 	je near intx2	;read string
  1910 000019DF 80FC03              <1> 	cmp ah, 3
  1911 000019E2 0F8470010000        <1> 	je near intx3	;clear screen
  1912 000019E8 80FC04              <1> 	cmp ah, 4
  1913 000019EB 0F84E9010000        <1> 	je near intx4	;read and print string
  1914 000019F1 80FC05              <1> 	cmp ah, 5
  1915 000019F4 0F845C050000        <1> 	je near intx5	;get char
  1916 000019FA 80FC06              <1> 	cmp ah, 6
  1917 000019FD 0F84AE050000        <1> 	je near intx6	;print char
  1918 00001A03 80FC07              <1> 	cmp ah, 7
  1919 00001A06 0F8490070000        <1> 	je near intx7	;read file
  1920                              <1> ;	cmp ah, 8
  1921                              <1> ;	je near intx8	;write file
  1922 00001A0C 80FC09              <1> 	cmp ah, 9
  1923 00001A0F 0F8491070000        <1> 	je near intx9	;convert number to string
  1924 00001A15 80FC0A              <1> 	cmp ah, 10
  1925 00001A18 0F84A0070000        <1> 	je near intx10	;convert string to number
  1926                              <1> %ifdef threads.included
  1927 00001A1E 80FC0B              <1> 	cmp ah, 11
  1928 00001A21 0F84A1070000        <1> 	je near intx11	;create thread
  1929                              <1> %endif
  1930 00001A27 80FC0C              <1> 	cmp ah, 12
  1931 00001A2A 0F846F080000        <1> 	je near intx12	;get time
  1932 00001A30 80FC0D              <1> 	cmp ah, 13
  1933 00001A33 0F847B080000        <1> 	je near intx13	;set time
  1934 00001A39 80FC0E              <1> 	cmp ah, 14
  1935 00001A3C 0F8482080000        <1> 	je near intx14	;run program
  1936 00001A42 80FC0F              <1> 	cmp ah, 15
  1937 00001A45 0F848E080000        <1> 	je near intx15	;get program info-location of name/options/number of options/environmental vars
  1938 00001A4B C3                  <1> 	ret
  1939                              <1> 	
  1940                              <1> ;;the jmp timerinterrupt's ensure that task switches occur
  1941                              <1> intx0:
  1942                              <1> 	%include 'source/interrupts/0_exit.asm'
  1943                              <2> exitprog:
  1944 00001A4C 66B83000            <2> 	mov ax, NEW_DATA_SEL
  1945 00001A50 8ED8                <2> 	mov ds, ax
  1946 00001A52 8EC0                <2> 	mov es, ax
  1947 00001A54 8EE0                <2> 	mov fs, ax
  1948 00001A56 66B82000            <2> 	mov ax, SYS_DATA_SEL
  1949 00001A5A 8EE8                <2> 	mov gs, ax
  1950 00001A5C C705[834B0000]0000- <2> 	mov dword [currentthread], 0
  1951 00001A64 0000                <2>
  1952 00001A66 C705[7E4B0000]0400- <2> 	mov dword [lastthread], 4
  1953 00001A6E 0000                <2>
  1954 00001A70 C605[824B0000]00    <2> 	mov byte [threadson], 0 ;for now i need to use this
  1955 00001A77 8B25[CE730000]      <2> 	mov esp, [previousstack] ;and this
  1956 00001A7D 81FB00000000        <2> 	cmp ebx, 0
  1957 00001A83 0F8501000000        <2> 	jne near .error
  1958 00001A89 C3                  <2> 	ret
  1959                              <2> .error:
  1960 00001A8A 89D9                <2> 	mov ecx, ebx
  1961 00001A8C B006                <2> 	mov al, 6
  1962 00001A8E A2[A72B0000]        <2> 	mov [firsthexshown], al
  1963 00001A93 51                  <2> 	push ecx
  1964 00001A94 BE[AF1A0000]        <2> 	mov esi, .msg1
  1965 00001A99 E840000000          <2> 	call printhighlight
  1966 00001A9E 59                  <2> 	pop ecx
  1967 00001A9F E818110000          <2> 	call showhex
  1968 00001AA4 BE[C41A0000]        <2> 	mov esi, .msg2
  1969 00001AA9 E830000000          <2> 	call printhighlight
  1970 00001AAE C3                  <2> 	ret
  1971                              <2> 	
  1972 00001AAF 416E20657869742073- <2> .msg1 db "An exit status of 0x",0
  1973 00001AB8 7461747573206F6620- <2>
  1974 00001AC1 307800              <2>
  1975 00001AC4 087761732072657475- <2> .msg2 db 8,"was returned.",10,0
  1976 00001ACD 726E65642E0A00      <2>
  1977                              <1> intx1:
  1978                              <1> 	%include 'source/interrupts/1_prntstr.asm'
  1979 00001AD4 E82A000000          <2> call printint
  1980 00001AD9 E99AE7FFFF          <2> jmp timerinterrupt
  1981                              <2> 
  1982                              <2> 	printhighlight:
  1983 00001ADE 6631C0              <2> 		xor ax, ax
  1984 00001AE1 66BBF000            <2> 		mov bx, 0xF0
  1985 00001AE5 E919000000          <2> 		jmp printint
  1986                              <2> 	printquiet:
  1987 00001AEA 6631C0              <2> 		xor ax, ax
  1988 00001AED A2[2E1B0000]        <2> 		mov [endkeyprint], al
  1989 00001AF2 66BB0700            <2> 		mov bx, 7
  1990 00001AF6 E820000000          <2> 		call printint.b
  1991 00001AFB C3                  <2> 		ret
  1992                              <2>     print:
  1993 00001AFC 6631C0              <2> 		xor ax, ax
  1994 00001AFF 66BB0700            <2> 		mov bx, 7
  1995                              <2> 	printint:	;;print line, al=last key,bl=modifier, esi=buffer
  1996 00001B03 56                  <2> 		push esi
  1997 00001B04 A2[2E1B0000]        <2> 		mov [endkeyprint], al
  1998 00001B09 E80D000000          <2> 		call .b
  1999 00001B0E 89F1                <2> 		mov ecx, esi
  2000 00001B10 5F                  <2> 		pop edi
  2001 00001B11 29F9                <2> 		sub ecx, edi
  2002 00001B13 51                  <2> 		push ecx
  2003 00001B14 E8F6070000          <2> 		call termcopy
  2004 00001B19 59                  <2> 		pop ecx
  2005 00001B1A C3                  <2> 		ret
  2006                              <2> 	.b:
  2007 00001B1B 8A06                <2> 		mov al, [esi]
  2008 00001B1D 3A05[2E1B0000]      <2> 		cmp al, [endkeyprint]
  2009 00001B23 7408                <2> 		je .done
  2010 00001B25 E8AC040000          <2> 		call prcharq
  2011 00001B2A 46                  <2> 		inc esi
  2012 00001B2B EBEE                <2> 		jmp .b
  2013                              <2> 	.done:
  2014 00001B2D C3                  <2> 		ret
  2015                              <2> 
  2016 00001B2E 00                  <2> endkeyprint db 0
  2017                              <1> intx2:
  2018                              <1> 	%include 'source/interrupts/2_readstr.asm'
  2019 00001B2F E805000000          <2> call readint
  2020 00001B34 E93FE7FFFF          <2> jmp timerinterrupt
  2021                              <2> 
  2022                              <2> 	readint:	;;get line, al=last key, esi = buffer, edi = endbuffer	
  2023 00001B39 89C3                <2> 		mov ebx, eax
  2024                              <2> 	.b:
  2025 00001B3B 53                  <2> 		push ebx
  2026 00001B3C 57                  <2> 		push edi
  2027 00001B3D 56                  <2> 		push esi
  2028 00001B3E 30C0                <2> 		xor al, al
  2029 00001B40 E81D040000          <2> 		call rdcharint
  2030 00001B45 5E                  <2> 		pop esi
  2031 00001B46 8806                <2> 		mov [esi], al
  2032 00001B48 46                  <2> 		inc esi
  2033 00001B49 5F                  <2> 		pop edi
  2034 00001B4A 5B                  <2> 		pop ebx
  2035 00001B4B 39FE                <2> 		cmp esi, edi
  2036 00001B4D 7304                <2> 		jae .done
  2037 00001B4F 38D8                <2> 		cmp al, bl
  2038 00001B51 75E8                <2> 		jne .b
  2039                              <2> 	.done:
  2040 00001B53 4E                  <2> 		dec esi
  2041 00001B54 C60600              <2> 		mov byte [esi], 0
  2042 00001B57 C3                  <2> 		ret
  2043                              <1> intx3:
  2044                              <1> 	%include 'source/interrupts/3_clearscrn.asm'
  2045 00001B58 E805000000          <2> call clear
  2046 00001B5D E916E7FFFF          <2> jmp timerinterrupt
  2047                              <2> %ifdef io.serial
  2048                              <2> clear:
  2049                              <2> 	ret
  2050                              <2> %else
  2051                              <2> clear:		
  2052 00001B62 668B0D[98210000]    <2> 		mov cx, [charxy]
  2053 00001B69 BF[638E0000]        <2> 		mov edi, videobuf
  2054 00001B6E 6631C0              <2> 		xor ax, ax
  2055 00001B71 66A3[92210000]      <2> 		mov [linebeginpos], ax
  2056 00001B77 66A3[94210000]      <2> 		mov [videobufpos], ax
  2057 00001B7D 6631D2              <2> 		xor dx, dx
  2058 00001B80 66A3[96210000]      <2> 		mov [charpos], ax
  2059 00001B86 B407                <2> 		mov ah, 7
  2060                              <2> 	clearb:
  2061 00001B88 668907              <2> 		mov [edi], ax
  2062 00001B8B 81C702000000        <2> 		add edi, 2
  2063 00001B91 FEC9                <2> 		dec cl
  2064 00001B93 80F900              <2> 		cmp cl, 0
  2065 00001B96 75F0                <2> 		jne clearb
  2066 00001B98 8A0D[98210000]      <2> 		mov cl, [charxy]
  2067 00001B9E FECD                <2> 		dec ch
  2068 00001BA0 80FD00              <2> 		cmp ch, 0
  2069 00001BA3 75E3                <2> 		jne clearb
  2070                              <2> 	cleardouble:
  2071 00001BA5 BF[23A10000]        <2> 		mov edi, videobuf2
  2072 00001BAA 668B0D[98210000]    <2> 		mov cx, [charxy]
  2073 00001BB1 660FEFC0            <2> 		pxor xmm0, xmm0
  2074                              <2> 	clearc:
  2075 00001BB5 660F7F07            <2> 		movdqa [edi], xmm0
  2076 00001BB9 81C710000000        <2> 		add edi, 16
  2077 00001BBF 80E908              <2> 		sub cl, 8
  2078 00001BC2 80F900              <2> 		cmp cl, 0
  2079 00001BC5 75EE                <2> 		jne clearc
  2080 00001BC7 8A0D[98210000]      <2> 		mov cl, [charxy]
  2081 00001BCD FECD                <2> 		dec ch
  2082 00001BCF 80FD00              <2> 		cmp ch, 0
  2083 00001BD2 75E1                <2> 		jne clearc
  2084 00001BD4 E836070000          <2> 		call termcopy
  2085 00001BD9 C3                  <2> 		ret
  2086                              <2> %endif
  2087                              <2> 		
  2088                              <1> intx4:
  2089                              <1> 	%include 'source/interrupts/4_prntreadstr.asm'
  2090 00001BDA E809000000          <2> call rdprint
  2091 00001BDF E994E6FFFF          <2> jmp timerinterrupt
  2092                              <2> 
  2093                              <2> readline:
  2094 00001BE4 B00A                <2>   mov al, 10
  2095 00001BE6 B307                <2>   mov bl, 7
  2096                              <2> 	rdprint:	;;print and get line, al=last key, bl=modifier, esi=buffer, edi=bufferend
  2097 00001BE8 8935[4B1F0000]      <2> 		mov [buftxtloc], esi
  2098 00001BEE A2[431F0000]        <2> 		mov [endkeyrdpr], al
  2099 00001BF3 881D[441F0000]      <2> 		mov [modkeyrdpr], bl
  2100 00001BF9 8935[451F0000]      <2> 		mov [firstesirdpr], esi
  2101 00001BFF 893D[4F1F0000]      <2> 		mov [endbufferrdpr], edi
  2102                              <2> 	rdprintb:
  2103 00001C05 56                  <2> 		push esi
  2104 00001C06 B001                <2> 		mov al, 1
  2105 00001C08 E855030000          <2> 		call rdcharint
  2106 00001C0D 5E                  <2> 		pop esi
  2107                              <2> %ifdef io.serial
  2108                              <2> 		cmp ah, 0x41
  2109                              <2> 		je near rdprup
  2110                              <2> 		cmp ah, 0x42
  2111                              <2> 		je near rdprdown
  2112                              <2> 		cmp ah, 0x43
  2113                              <2> 		je near rdprright
  2114                              <2> 		cmp ah, 0x44
  2115                              <2> 		je near rdprleft
  2116                              <2> 		cmp ah, 0x31
  2117                              <2> 		je near rdprhome
  2118                              <2> 		cmp ah, 0x48
  2119                              <2> 		je near rdprhome
  2120                              <2> 		cmp ah, 0x46
  2121                              <2> 		je near rdprend
  2122                              <2> 		cmp ah, 0x33
  2123                              <2> 		je near rdprdel
  2124                              <2> 		cmp ah, 0x34
  2125                              <2> 		je near rdprend
  2126                              <2> %else
  2127 00001C0E 803D[97430000]E0    <2> 		cmp byte [specialkey], 0xE0
  2128 00001C15 751B                <2> 		jne notspecialrdprnt
  2129 00001C17 80FC53              <2> 		cmp ah, 0x53
  2130 00001C1A 0F84E8020000        <2> 		je near rdprdel
  2131 00001C20 80FC47              <2> 		cmp ah, 0x47
  2132 00001C23 0F8407010000        <2> 		je near rdprhome
  2133 00001C29 80FC4F              <2> 		cmp ah, 0x4F
  2134 00001C2C 0F841D010000        <2> 		je near rdprend
  2135                              <2> 	notspecialrdprnt:
  2136 00001C32 80FC48              <2> 		cmp ah, 0x48
  2137 00001C35 0F84D5010000        <2> 		je near rdprup
  2138 00001C3B 80FC50              <2> 		cmp ah, 0x50
  2139 00001C3E 0F84AF010000        <2> 		je near rdprdown
  2140 00001C44 80FC4D              <2> 		cmp ah, 0x4D
  2141 00001C47 0F845E010000        <2> 		je near rdprright
  2142 00001C4D 80FC4B              <2> 		cmp ah, 0x4B
  2143 00001C50 0F8416010000        <2> 		je near rdprleft
  2144                              <2> %endif
  2145 00001C56 3C08                <2> 		cmp al, 8
  2146 00001C58 0F84C5020000        <2> 		je near rdprbscheck
  2147 00001C5E 3C00                <2> 		cmp al, 0
  2148 00001C60 74A3                <2> 		je rdprintb
  2149 00001C62 80FC00              <2> 		cmp ah, 0
  2150 00001C65 749E                <2> 		je rdprintb
  2151 00001C67 8806                <2> 		mov [esi], al
  2152 00001C69 46                  <2> 		inc esi
  2153                              <2> 	bscheckequal:
  2154 00001C6A 8A1D[441F0000]      <2> 		mov bl, [modkeyrdpr]
  2155 00001C70 8A3D[4A1F0000]      <2> 		mov bh, [txtmask]
  2156 00001C76 80FF00              <2> 		cmp bh, 0
  2157 00001C79 7404                <2> 		je nomasktxt
  2158 00001C7B 88F8                <2> 		mov al, bh
  2159 00001C7D 30FF                <2> 		xor bh, bh
  2160                              <2> 	nomasktxt:
  2161 00001C7F E841030000          <2> 		call prcharint
  2162 00001C84 56                  <2> 		push esi
  2163 00001C85 66A3[411F0000]      <2> 		mov [axcache], ax
  2164 00001C8B 8A25[431F0000]      <2> 		mov ah, [endkeyrdpr]
  2165 00001C91 38E0                <2> 		cmp al, ah
  2166 00001C93 7429                <2> 		je nobackprintbuftxt2
  2167 00001C95 BE[4E860000]        <2> 		mov esi, buftxt2
  2168 00001C9A E84BFEFFFF          <2> 		call printquiet
  2169 00001C9F B020                <2> 		mov al, " "
  2170 00001CA1 E830030000          <2> 		call prcharq
  2171 00001CA6 B008                <2> 		mov al, 8
  2172 00001CA8 81FE[4E860000]      <2> 		cmp esi, buftxt2
  2173 00001CAE 740E                <2> 		je nobackprintbuftxt2
  2174                              <2> 	backprintbuftxt2:
  2175 00001CB0 E821030000          <2> 		call prcharq
  2176 00001CB5 4E                  <2> 		dec esi
  2177 00001CB6 81FE[4E860000]      <2> 		cmp esi, buftxt2
  2178 00001CBC 77F2                <2> 		ja backprintbuftxt2
  2179                              <2> 	nobackprintbuftxt2:
  2180 00001CBE 3C0A                <2> 		cmp al, 10
  2181 00001CC0 7405                <2> 		je nonobackprint
  2182 00001CC2 E8FE020000          <2> 		call prcharint
  2183                              <2> 	nonobackprint:
  2184 00001CC7 5E                  <2> 		pop esi
  2185 00001CC8 3B35[4F1F0000]      <2> 		cmp esi, [endbufferrdpr]
  2186 00001CCE 0F8319000000        <2> 		jae near donerdprinc
  2187 00001CD4 66A1[411F0000]      <2> 		mov ax, [axcache]
  2188 00001CDA 8A25[431F0000]      <2> 		mov ah, [endkeyrdpr]
  2189 00001CE0 38E0                <2> 		cmp al, ah
  2190 00001CE2 0F851DFFFFFF        <2> 		jne rdprintb
  2191 00001CE8 E901000000          <2> 		jmp donerdprint
  2192                              <2> 	donerdprinc:
  2193 00001CED 46                  <2> 		inc esi
  2194                              <2> 	donerdprint:
  2195 00001CEE 4E                  <2> 		dec esi
  2196 00001CEF BF[4E860000]        <2> 		mov edi, buftxt2
  2197                              <2> 	copylaterstuff:
  2198 00001CF4 8A07                <2> 		mov al, [edi]
  2199 00001CF6 3C00                <2> 		cmp al, 0
  2200 00001CF8 7406                <2> 		je nocopylaterstuff
  2201 00001CFA 8806                <2> 		mov [esi], al
  2202 00001CFC 47                  <2> 		inc edi
  2203 00001CFD 46                  <2> 		inc esi
  2204 00001CFE EBF4                <2> 		jmp copylaterstuff
  2205                              <2> 	nocopylaterstuff:
  2206 00001D00 C60600              <2> 		mov byte [esi], 0
  2207 00001D03 E80B000000          <2> 		call clearbuftxt2
  2208 00001D08 89F1                <2> 		mov ecx, esi
  2209 00001D0A 8B3D[451F0000]      <2> 		mov edi, [firstesirdpr]
  2210 00001D10 29F9                <2> 		sub ecx, edi
  2211 00001D12 C3                  <2> 		ret
  2212                              <2> 	
  2213                              <2> 	clearbuftxt2:
  2214 00001D13 30C0                <2> 		xor al, al
  2215 00001D15 BF[4E860000]        <2> 		mov edi, buftxt2
  2216                              <2> 	clearbuftxt2lp:
  2217 00001D1A 8807                <2> 		mov [edi], al
  2218 00001D1C 47                  <2> 		inc edi
  2219 00001D1D 81FF[4E8A0000]      <2> 		cmp edi, buftxt
  2220 00001D23 75F5                <2> 		jne clearbuftxt2lp
  2221 00001D25 C3                  <2> 		ret
  2222                              <2> 	
  2223                              <2> 	rdprintb2:
  2224 00001D26 E8E4050000          <2> 		call termcopy
  2225 00001D2B E9D5FEFFFF          <2> 		jmp rdprintb
  2226                              <2> 	
  2227                              <2> 	rdprhome:
  2228 00001D30 3B35[4B1F0000]      <2> 		cmp esi, [buftxtloc]
  2229 00001D36 0F84EAFFFFFF        <2> 		je near rdprintb2
  2230 00001D3C BF[4E860000]        <2> 		mov edi, buftxt2
  2231 00001D41 8A07                <2> 		mov al, [edi]
  2232 00001D43 E846000000          <2> 		call shiftbuftxt2
  2233 00001D48 E889020000          <2> 		call prcharq
  2234 00001D4D EBE1                <2> 		jmp rdprhome
  2235                              <2> 		
  2236                              <2> 	rdprend:
  2237 00001D4F BF[4E860000]        <2> 		mov edi, buftxt2
  2238 00001D54 8A07                <2> 		mov al, [edi]
  2239 00001D56 3C00                <2> 		cmp al, 0
  2240 00001D58 0F84C8FFFFFF        <2> 		je near rdprintb2
  2241 00001D5E 8806                <2> 		mov [esi], al
  2242 00001D60 E866000000          <2> 		call shiftbuftxt2lft
  2243 00001D65 E86C020000          <2> 		call prcharq
  2244 00001D6A EBE3                <2> 		jmp rdprend
  2245                              <2> 	
  2246                              <2> 	rdprleft:
  2247 00001D6C 3B35[4B1F0000]      <2> 		cmp esi, [buftxtloc]
  2248 00001D72 0F848DFEFFFF        <2> 		je near rdprintb
  2249 00001D78 BF[4E860000]        <2> 		mov edi, buftxt2
  2250 00001D7D 8A07                <2> 		mov al, [edi]
  2251 00001D7F E80A000000          <2> 		call shiftbuftxt2
  2252 00001D84 E83C020000          <2> 		call prcharint
  2253 00001D89 E977FEFFFF          <2> 		jmp rdprintb
  2254                              <2> 	shiftbuftxt2:
  2255 00001D8E 3C00                <2> 		cmp al, 0
  2256 00001D90 7409                <2> 		je noshiftbuftxt2
  2257 00001D92 47                  <2> 		inc edi
  2258 00001D93 8A27                <2> 		mov ah, [edi]
  2259 00001D95 8807                <2> 		mov [edi], al
  2260 00001D97 88E0                <2> 		mov al, ah
  2261 00001D99 EBF3                <2> 		jmp shiftbuftxt2
  2262                              <2> 	noshiftbuftxt2:
  2263 00001D9B BF[4E860000]        <2> 		mov edi, buftxt2
  2264 00001DA0 4E                  <2> 		dec esi
  2265 00001DA1 8A06                <2> 		mov al, [esi]
  2266 00001DA3 8807                <2> 		mov [edi], al
  2267 00001DA5 C60600              <2> 		mov byte [esi], 0
  2268 00001DA8 B008                <2> 		mov al, 8
  2269 00001DAA C3                  <2> 		ret
  2270                              <2> 		
  2271                              <2> 	rdprright:
  2272 00001DAB BF[4E860000]        <2> 		mov edi, buftxt2
  2273 00001DB0 8A07                <2> 		mov al, [edi]
  2274 00001DB2 3C00                <2> 		cmp al, 0
  2275 00001DB4 0F844BFEFFFF        <2> 		je near rdprintb
  2276 00001DBA 8806                <2> 		mov [esi], al
  2277 00001DBC E80A000000          <2> 		call shiftbuftxt2lft
  2278 00001DC1 E8FF010000          <2> 		call prcharint
  2279 00001DC6 E93AFEFFFF          <2> 		jmp rdprintb
  2280                              <2> 	shiftbuftxt2lft:
  2281 00001DCB 3C00                <2> 		cmp al, 0
  2282 00001DCD 7408                <2> 		je noshiftbuftxt2lft
  2283 00001DCF 47                  <2> 		inc edi
  2284 00001DD0 8A07                <2> 		mov al, [edi]
  2285 00001DD2 8847FF              <2> 		mov [edi - 1], al
  2286 00001DD5 EBF4                <2> 		jmp shiftbuftxt2lft
  2287                              <2> 	noshiftbuftxt2lft:
  2288 00001DD7 8A06                <2> 		mov al, [esi]
  2289 00001DD9 46                  <2> 		inc esi
  2290 00001DDA 8A1D[441F0000]      <2> 		mov bl, [modkeyrdpr]
  2291 00001DE0 C3                  <2> 		ret
  2292                              <2> 		
  2293                              <2> 	rdprdownbck:
  2294 00001DE1 FECC                <2> 		dec ah
  2295 00001DE3 8825[491F0000]      <2> 		mov [commandedit], ah
  2296 00001DE9 E83A000000          <2> 		call rdprbckspc
  2297 00001DEE E912FEFFFF          <2> 		jmp rdprintb
  2298                              <2> 	
  2299                              <2> 	rdprdown:
  2300 00001DF3 8A25[491F0000]      <2> 		mov ah, [commandedit]
  2301 00001DF9 80FC01              <2> 		cmp ah, 1
  2302 00001DFC 0F8603FEFFFF        <2> 		jbe near rdprintb
  2303 00001E02 80FC02              <2> 		cmp ah, 2
  2304 00001E05 74DA                <2> 		je rdprdownbck
  2305 00001E07 80EC02              <2> 		sub ah, 2
  2306 00001E0A 8825[491F0000]      <2> 		mov [commandedit], ah
  2307                              <2> 		
  2308                              <2> 	rdprup:
  2309 00001E10 30C0                <2> 		xor al, al
  2310 00001E12 3805[491F0000]      <2> 		cmp [commandedit], al
  2311 00001E18 0F84E7FDFFFF        <2> 		je near rdprintb
  2312 00001E1E E805000000          <2> 		call rdprbckspc
  2313 00001E23 E941000000          <2> 		jmp getcurrentcommandstr
  2314                              <2> 	rdprbckspc:
  2315 00001E28 3B35[4B1F0000]      <2> 		cmp esi, [buftxtloc]
  2316 00001E2E 742B                <2> 		je nordprupbck
  2317                              <2> 	rdprupbckspclp:
  2318 00001E30 B008                <2> 		mov al, 8
  2319 00001E32 8A1D[441F0000]      <2> 		mov bl, [modkeyrdpr]
  2320 00001E38 E899010000          <2> 		call prcharq
  2321 00001E3D B020                <2> 		mov al, ' '
  2322 00001E3F E892010000          <2> 		call prcharq
  2323 00001E44 B008                <2> 		mov al, 8
  2324 00001E46 E88B010000          <2> 		call prcharq
  2325 00001E4B 4E                  <2> 		dec esi
  2326 00001E4C 3B35[4B1F0000]      <2> 		cmp esi, [buftxtloc]
  2327 00001E52 7402                <2> 		je nordprupbck2
  2328 00001E54 EBDA                <2> 		jmp rdprupbckspclp
  2329                              <2> 	nordprupbck2:
  2330 00001E56 E8B4040000          <2> 		call termcopy
  2331                              <2> 	nordprupbck:
  2332 00001E5B 8B3D[27F10000]      <2> 		mov edi, [commandbufpos]
  2333 00001E61 81C7[2BF10000]      <2> 		add edi, commandbuf
  2334 00001E67 4F                  <2> 		dec edi
  2335 00001E68 C3                  <2> 		ret
  2336                              <2> 	getcurrentcommandstr:
  2337 00001E69 8A25[491F0000]      <2> 		mov ah, [commandedit]
  2338 00001E6F FE05[491F0000]      <2> 		inc byte [commandedit]
  2339                              <2> 	getccmdlp:
  2340 00001E75 4F                  <2> 		dec edi
  2341 00001E76 8A07                <2> 		mov al, [edi]
  2342 00001E78 81FF[2BF10000]      <2> 		cmp edi, commandbuf
  2343 00001E7E 7231                <2> 		jb getcmdresetcommandbuf
  2344 00001E80 81EF[2BF10000]      <2> 		sub edi, commandbuf
  2345 00001E86 3B3D[27F10000]      <2> 		cmp edi, [commandbufpos]
  2346 00001E8C 0F8473FDFFFF        <2> 		je near rdprintb
  2347 00001E92 81C7[2BF10000]      <2> 		add edi, commandbuf
  2348 00001E98 3C00                <2> 		cmp al, 0
  2349 00001E9A 75D9                <2> 		jne getccmdlp
  2350 00001E9C FECC                <2> 		dec ah
  2351 00001E9E 80FC00              <2> 		cmp ah, 0
  2352 00001EA1 77D2                <2> 		ja getccmdlp
  2353 00001EA3 47                  <2> 		inc edi
  2354 00001EA4 81FF[2B010100]      <2> 		cmp edi, commandbufend
  2355 00001EAA 770D                <2> 		ja fixcmdbufb4morerdpr
  2356 00001EAC E915000000          <2> 		jmp morerdprup
  2357                              <2> 	getcmdresetcommandbuf:
  2358 00001EB1 BF[2B010100]        <2> 		mov edi, commandbufend
  2359 00001EB6 47                  <2> 		inc edi
  2360 00001EB7 EBBC                <2> 		jmp getccmdlp
  2361                              <2> 	fixcmdbufb4morerdpr:
  2362 00001EB9 4F                  <2> 		dec edi
  2363 00001EBA 81EF[2B010100]      <2> 		sub edi, commandbufend
  2364 00001EC0 81C7[2BF10000]      <2> 		add edi, commandbuf
  2365                              <2> 	morerdprup:
  2366 00001EC6 8A07                <2> 		mov al, [edi]
  2367 00001EC8 47                  <2> 		inc edi
  2368 00001EC9 81EF[2BF10000]      <2> 		sub edi, commandbuf
  2369 00001ECF 3C00                <2> 		cmp al, 0
  2370 00001ED1 0F844FFEFFFF        <2> 		je near rdprintb2
  2371 00001ED7 3B3D[27F10000]      <2> 		cmp edi, [commandbufpos]
  2372 00001EDD 0F8343FEFFFF        <2> 		jae near rdprintb2
  2373 00001EE3 81C7[2BF10000]      <2> 		add edi, commandbuf
  2374 00001EE9 8806                <2> 		mov [esi], al
  2375 00001EEB 46                  <2> 		inc esi
  2376 00001EEC 57                  <2> 		push edi
  2377 00001EED 8A1D[441F0000]      <2> 		mov bl, [modkeyrdpr]
  2378 00001EF3 E8DE000000          <2> 		call prcharq
  2379 00001EF8 5F                  <2> 		pop edi
  2380 00001EF9 81FF[2B010100]      <2> 		cmp edi, commandbufend
  2381 00001EFF 76C5                <2> 		jbe morerdprup
  2382 00001F01 BF[2BF10000]        <2> 		mov edi, commandbuf
  2383 00001F06 EBBE                <2> 		jmp morerdprup
  2384                              <2> 		
  2385                              <2> 	rdprdel:
  2386 00001F08 BF[4E860000]        <2> 		mov edi, buftxt2
  2387 00001F0D 8A07                <2> 		mov al, [edi]
  2388 00001F0F 3C00                <2> 		cmp al, 0
  2389 00001F11 0F84EEFCFFFF        <2> 		je near rdprintb
  2390 00001F17 8806                <2> 		mov [esi], al
  2391 00001F19 E8ADFEFFFF          <2> 		call shiftbuftxt2lft
  2392 00001F1E E8B3000000          <2> 		call prcharq
  2393                              <2> 		
  2394                              <2> 	rdprbscheck:
  2395 00001F23 3B35[451F0000]      <2> 		cmp esi, [firstesirdpr]
  2396 00001F29 7705                <2> 		ja goodbscheck
  2397 00001F2B E9D5FCFFFF          <2> 		jmp rdprintb
  2398                              <2> 	goodbscheck:
  2399 00001F30 4E                  <2> 		dec esi
  2400 00001F31 C60600              <2> 		mov byte [esi], 0
  2401 00001F34 8A1D[441F0000]      <2> 		mov bl, [modkeyrdpr]
  2402 00001F3A B008                <2> 		mov al, 8
  2403 00001F3C E929FDFFFF          <2> 		jmp bscheckequal
  2404                              <2> 		
  2405 00001F41 0000                <2> axcache dw 0
  2406 00001F43 00                  <2> endkeyrdpr db 0
  2407 00001F44 00                  <2> modkeyrdpr db 0
  2408 00001F45 00000000            <2> firstesirdpr dd 0
  2409 00001F49 00                  <2> commandedit db 0
  2410 00001F4A 00                  <2> txtmask db 0
  2411 00001F4B 00000000            <2> buftxtloc dd 0
  2412 00001F4F 00000000            <2> endbufferrdpr dd 0
  2413 00001F53 082000              <2> backcursor db 8," ",0
  2414                              <1> intx5:
  2415                              <1> 	%include 'source/interrupts/5_readchar.asm'
  2416 00001F56 E807000000          <2> 	call rdcharint
  2417 00001F5B E918E3FFFF          <2> 	jmp timerinterrupt
  2418                              <2> getchar:
  2419 00001F60 30C0                <2> 	xor al, al
  2420                              <2> 	rdcharint:		;;get char, if al is 0, wait for key
  2421 00001F62 C605[B01F0000]01    <2> 		mov byte [trans], 1
  2422 00001F69 3C00                <2> 		cmp al, 0
  2423 00001F6B 7507                <2> 		jne transcheck
  2424 00001F6D C605[B01F0000]00    <2> 		mov byte [trans], 0
  2425                              <2> 	transcheck:
  2426                              <2> 	%ifdef io.serial
  2427                              <2> 		call serial.receive
  2428                              <2> 		cmp al, 13
  2429                              <2> 		je rdenter
  2430                              <2> 	%else
  2431 00001F74 E83E240000          <2> 		call getkey
  2432 00001F79 66A1[AE1F0000]      <2> 		mov ax, [lastkey]
  2433 00001F7F 80FC1C              <2> 		cmp ah, 0x1C
  2434 00001F82 741F                <2> 		je rdenter
  2435                              <2> 	%endif
  2436 00001F84 8A3D[B01F0000]      <2> 		mov bh, [trans]
  2437 00001F8A 803D[97430000]E0    <2> 		cmp byte [specialkey], 0xE0
  2438 00001F91 7504                <2> 		jne nospecialtrans
  2439 00001F93 88C3                <2> 		mov bl, al
  2440 00001F95 30C0                <2> 		xor al, al
  2441                              <2> 	nospecialtrans:
  2442 00001F97 08C7                <2> 		or bh, al
  2443 00001F99 80FF00              <2> 		cmp bh, 0
  2444 00001F9C 74D6                <2> 		je transcheck
  2445 00001F9E E90A000000          <2> 		jmp rdend
  2446                              <2> 	rdenter:
  2447 00001FA3 B41C                <2> 		mov ah, 0x1C
  2448 00001FA5 B00A                <2> 		mov al, 10
  2449 00001FA7 66A3[AE1F0000]      <2> 		mov [lastkey], ax
  2450                              <2> 	rdend:
  2451 00001FAD C3                  <2> 		ret
  2452                              <2> 		
  2453 00001FAE 0000                <2> lastkey db 0,0
  2454 00001FB0 00                  <2> trans db 0
  2455                              <1> intx6:
  2456                              <1> 	%include 'source/interrupts/6_prntchar.asm'
  2457                              <2> %ifdef io.serial
  2458                              <2> 	cmp bl, bh
  2459                              <2> 	call prcharint
  2460                              <2> 	jmp timerinterrupt
  2461                              <2> prcharint:	
  2462                              <2> prcharq:
  2463                              <2> 	call serial.send
  2464                              <2> 	ret
  2465                              <2> %else
  2466 00001FB1 38FB                <2> cmp bl, bh
  2467 00001FB3 740A                <2> je prchar.notimer
  2468 00001FB5 E80B000000          <2> call prcharint
  2469 00001FBA E9B9E2FFFF          <2> jmp timerinterrupt
  2470                              <2> prchar.notimer:
  2471 00001FBF E812000000          <2> 	call prcharq
  2472 00001FC4 CF                  <2> 	iret
  2473                              <2> 	
  2474                              <2> prcharint:	;;print char, char in al, modifier in bl, if bh = bl then termcopy will not happen, will run termcopy if called as is
  2475 00001FC5 38FB                <2> 	cmp bl, bh
  2476 00001FC7 740D                <2> 	je prcharq
  2477 00001FC9 E808000000          <2> 	call prcharq
  2478 00001FCE E83C030000          <2> 	call termcopy
  2479 00001FD3 C3                  <2> 	ret
  2480 00001FD4 00                  <2> termguion db 0
  2481 00001FD5 00                  <2> termcopyon db 0
  2482                              <2> prcharq:
  2483 00001FD6 88DC                <2> 	mov ah, bl
  2484 00001FD8 66A3[9A210000]      <2> 	mov [charbuf], ax
  2485 00001FDE 31DB                <2> 	xor ebx, ebx
  2486 00001FE0 668B1D[94210000]    <2> 	mov bx, [videobufpos]
  2487 00001FE7 BF[638E0000]        <2> 	mov edi, videobuf
  2488 00001FEC 01DF                <2> 	add edi, ebx
  2489 00001FEE 66A1[0D230000]      <2> 	mov ax, [removedvideo]
  2490 00001FF4 668907              <2> 	mov [edi], ax
  2491 00001FF7 66A1[9A210000]      <2> 	mov ax, [charbuf]
  2492 00001FFD 31D2                <2> 	xor edx, edx
  2493 00001FFF 668B15[96210000]    <2> 	mov dx, [charpos]
  2494 00002006 31C9                <2> 	xor ecx, ecx
  2495 00002008 668B0D[98210000]    <2> 	mov cx, [charxy]
  2496 0000200F 3C09                <2> 	cmp al, 9
  2497 00002011 0F8463000000        <2> 	je near prtab
  2498 00002017 3C0D                <2> 	cmp al, 13		;I am phasing this out-it is used by windows but not unix based systems
  2499 00002019 0F848B000000        <2> 	je near prcr
  2500 0000201F 3C0A                <2> 	cmp al, 10
  2501 00002021 0F84B7000000        <2> 	je near prnlcr
  2502 00002027 3C08                <2> 	cmp al, 8
  2503 00002029 0F848F000000        <2> 	je near prbs
  2504 0000202F 3CFF                <2> 	cmp al, 255		;;null character
  2505 00002031 0F841B000000        <2> 	je near donescr
  2506 00002037 668907              <2> 	mov [edi], ax
  2507 0000203A 81C702000000        <2> 	add edi, 2
  2508 00002040 FEC2                <2> 	inc dl
  2509                              <2> donecrnl:
  2510 00002042 38CA                <2> 	cmp dl, cl
  2511 00002044 0F83B9000000        <2> 	jae near preol
  2512                              <2> doneeol:
  2513 0000204A 38EE                <2> 	cmp dh, ch
  2514 0000204C 0F83CF000000        <2> 	jae near prscr	
  2515                              <2> donescr:
  2516 00002052 89FB                <2> 	mov ebx, edi
  2517 00002054 668B07              <2> 	mov ax, [edi]
  2518 00002057 66A3[0D230000]      <2> 	mov [removedvideo], ax
  2519 0000205D 81EB[638E0000]      <2> 	sub ebx, videobuf
  2520 00002063 66891D[94210000]    <2> 	mov [videobufpos], bx
  2521 0000206A 668915[96210000]    <2> 	mov [charpos], dx
  2522 00002071 66A1[9A210000]      <2> 	mov ax, [charbuf]
  2523 00002077 88E3                <2> 	mov bl, ah
  2524 00002079 C3                  <2> 	ret
  2525                              <2> 	
  2526                              <2> 	prtab:
  2527 0000207A 31DB                <2> 		xor ebx, ebx
  2528 0000207C 668B1D[92210000]    <2> 		mov bx, [linebeginpos]
  2529 00002083 81EF[638E0000]      <2> 		sub edi, videobuf
  2530 00002089 29DF                <2> 		sub edi, ebx
  2531 0000208B C1EF04              <2> 		shr edi, 4
  2532 0000208E C1E704              <2> 		shl edi, 4
  2533 00002091 81C710000000        <2> 		add edi, 16
  2534 00002097 C0EA03              <2> 		shr dl, 3
  2535 0000209A C0E203              <2> 		shl dl, 3
  2536 0000209D 80C208              <2> 		add dl, 8
  2537 000020A0 81C7[638E0000]      <2> 		add edi, videobuf
  2538 000020A6 01DF                <2> 		add edi, ebx
  2539 000020A8 EB98                <2> 		jmp donecrnl
  2540                              <2> 	
  2541                              <2> 	prcr:
  2542 000020AA 30D2                <2> 		xor dl, dl
  2543 000020AC 31DB                <2> 		xor ebx, ebx
  2544 000020AE BF[638E0000]        <2> 		mov edi, videobuf
  2545 000020B3 668B1D[92210000]    <2> 		mov bx, [linebeginpos]
  2546 000020BA 01DF                <2> 		add edi, ebx
  2547 000020BC EB84                <2> 		jmp donecrnl
  2548                              <2> 			
  2549                              <2> 	prbs:
  2550 000020BE 80FA00              <2> 		cmp dl, 0
  2551 000020C1 7410                <2> 		je prbackline
  2552                              <2> 	prnobmr:
  2553 000020C3 FECA                <2> 		dec dl
  2554 000020C5 6631C0              <2> 		xor ax, ax
  2555 000020C8 81EF02000000        <2> 		sub edi, 2
  2556 000020CE E96FFFFFFF          <2> 		jmp donecrnl
  2557                              <2> 	prbackline:
  2558 000020D3 88CA                <2> 		mov dl, cl
  2559 000020D5 80FE00              <2> 		cmp dh, 0
  2560 000020D8 74E9                <2> 		je prnobmr
  2561 000020DA FECE                <2> 		dec dh
  2562 000020DC EBE5                <2> 		jmp prnobmr
  2563                              <2> 		
  2564                              <2> 	prnlcr:
  2565 000020DE FEC6                <2> 		inc dh
  2566 000020E0 31DB                <2> 		xor ebx, ebx
  2567 000020E2 30D2                <2> 		xor dl, dl
  2568 000020E4 88CB                <2> 		mov bl, cl
  2569 000020E6 66D1E3              <2> 		shl bx, 1
  2570 000020E9 BF[638E0000]        <2> 		mov edi, videobuf
  2571 000020EE 66031D[92210000]    <2> 		add bx, [linebeginpos]
  2572 000020F5 66891D[92210000]    <2> 		mov [linebeginpos], bx
  2573 000020FC 01DF                <2> 		add edi, ebx
  2574 000020FE E93FFFFFFF          <2> 		jmp donecrnl
  2575                              <2> 		
  2576                              <2> 	preol:
  2577 00002103 30D2                <2> 		xor dl, dl
  2578 00002105 FEC6                <2> 		inc dh
  2579 00002107 31DB                <2> 		xor ebx, ebx
  2580 00002109 88CB                <2> 		mov bl, cl
  2581 0000210B 66D1E3              <2> 		shl bx, 1
  2582 0000210E 66031D[92210000]    <2> 		add bx, [linebeginpos]
  2583 00002115 66891D[92210000]    <2> 		mov [linebeginpos], bx
  2584 0000211C E929FFFFFF          <2> 		jmp doneeol
  2585                              <2> 	prscr:
  2586 00002121 FECE                <2> 		dec dh
  2587 00002123 BF[638E0000]        <2> 		mov edi, videobuf
  2588 00002128 31DB                <2> 		xor ebx, ebx
  2589 0000212A 88CB                <2> 		mov bl, cl
  2590 0000212C 66D1E3              <2> 		shl bx, 1
  2591 0000212F 01FB                <2> 		add ebx, edi
  2592                              <2> 	intscrollloop:
  2593 00002131 668B03              <2> 		mov ax, [ebx]
  2594 00002134 668907              <2> 		mov [edi], ax
  2595 00002137 81C702000000        <2> 		add edi, 2
  2596 0000213D 81C302000000        <2> 		add ebx, 2
  2597 00002143 FEC9                <2> 		dec cl
  2598 00002145 80F900              <2> 		cmp cl, 0
  2599 00002148 75E7                <2> 		jne intscrollloop
  2600 0000214A 8A0D[98210000]      <2> 		mov cl, [charxy]
  2601 00002150 FECD                <2> 		dec ch
  2602 00002152 80FD01              <2> 		cmp ch, 1
  2603 00002155 77DA                <2> 		ja intscrollloop
  2604 00002157 6631C0              <2> 		xor ax, ax
  2605 0000215A 81EF[638E0000]      <2> 		sub edi, videobuf
  2606 00002160 66893D[92210000]    <2> 		mov [linebeginpos], di
  2607 00002167 81C7[638E0000]      <2> 		add edi, videobuf
  2608 0000216D 89FB                <2> 		mov ebx, edi
  2609                              <2> 	intloopclear:
  2610 0000216F 668903              <2> 		mov [ebx], ax
  2611 00002172 81C302000000        <2> 		add ebx, 2
  2612 00002178 FEC9                <2> 		dec cl
  2613 0000217A 80F900              <2> 		cmp cl, 0
  2614 0000217D 75F0                <2> 		jne intloopclear
  2615 0000217F FECD                <2> 		dec ch
  2616 00002181 80FD00              <2> 		cmp ch, 0
  2617 00002184 75E9                <2> 		jne intloopclear
  2618 00002186 668B0D[98210000]    <2> 		mov cx, [charxy]
  2619 0000218D E9C0FEFFFF          <2> 		jmp donescr
  2620                              <2> 		
  2621 00002192 0000                <2> linebeginpos dw 0
  2622 00002194 0000                <2> videobufpos: dw 0
  2623 00002196 0000                <2> charpos db 0,0
  2624 00002198 501E                <2> charxy db 80,30
  2625 0000219A 0000                <2> charbuf dw 0
  2626                              <2> %endif
  2627                              <1> intx7:
  2628                              <1> 	%include 'source/interrupts/7_openfile.asm'
  2629 0000219C E842280000          <2> 	call loadfile
  2630 000021A1 E9D2E0FFFF          <2> 	jmp timerinterrupt
  2631                              <1> intx9:
  2632                              <1> 	%include 'source/interrupts/9_num2str.asm'
  2633 000021A6 3C00                <2> 	cmp al, 0
  2634 000021A8 750A                <2> 	jne num2strb
  2635 000021AA E8D70A0000          <2> 	call showdec
  2636 000021AF E9C4E0FFFF          <2> 	jmp timerinterrupt
  2637                              <2> num2strb:
  2638 000021B4 E8030A0000          <2> 	call showhex
  2639 000021B9 E9BAE0FFFF          <2> 	jmp timerinterrupt
  2640                              <1> intx10:
  2641                              <1> 	%include 'source/interrupts/10_str2num.asm'
  2642 000021BE E8A50B0000          <2> 	call cnvrttxt	;the string goes into esi, number into ecx
  2643 000021C3 E9B0E0FFFF          <2> 	jmp timerinterrupt
  2644                              <2> 	
  2645                              <1> %ifdef threads.included
  2646                              <1> intx11:
  2647                              <1> 	%include 'source/interrupts/11_forkthread.asm'
  2648                              <2> threadfork: ;esi is next thread's start address, if 0, fork current thread
  2649                              <2> 			;returns the PID of the new fork in ebx
  2650                              <2> ;WARNING:THIS WILL NOT WORK IN C UNTIL IT COPIES THE ENTIRE STACK
  2651 000021C8 FA                  <2> 	cli
  2652 000021C9 60                  <2> 	pushad
  2653 000021CA 8925[97220000]      <2> 	mov [.espold], esp
  2654 000021D0 C605[824B0000]01    <2> 	mov byte [threadson], 1
  2655 000021D7 8B1D[834B0000]      <2> 	mov ebx, [currentthread]
  2656 000021DD C1E302              <2> 	shl ebx, 2
  2657 000021E0 89A3[2B010100]      <2> 	mov [threadlist + ebx], esp
  2658 000021E6 C1EB02              <2> 	shr ebx, 2
  2659 000021E9 81FB00000000        <2> 	cmp ebx, 0
  2660 000021EF 750C                <2> 	jne .simplestack
  2661 000021F1 BB[6E6F0000]        <2> 	mov ebx, stackend
  2662 000021F6 29E3                <2> 	sub ebx, esp
  2663 000021F8 E90B000000          <2> 	jmp .stackcalcdone
  2664                              <2> .simplestack:
  2665 000021FD C1E30A              <2> 	shl ebx, 10
  2666 00002200 81C3[2B150100]      <2> 	add ebx, stack1
  2667 00002206 29E3                <2> 	sub ebx, esp
  2668                              <2> .stackcalcdone:
  2669 00002208 29DC                <2> 	sub esp, ebx
  2670 0000220A 81C4[2B150100]      <2> 	add esp, stack1
  2671 00002210 8B1D[7E4B0000]      <2> 	mov ebx, [lastthread]
  2672 00002216 C1E308              <2> 	shl ebx, 8
  2673 00002219 01DC                <2> 	add esp, ebx
  2674 0000221B 891D[9B220000]      <2> 	mov [.stackend], ebx
  2675                              <2> 
  2676 00002221 89E5                <2> 	mov ebp, esp
  2677 00002223 8B25[97220000]      <2> 	mov esp, [.espold]
  2678                              <2> 
  2679 00002229 C1EB0A              <2> 	shr ebx, 10 ;get pid then push it
  2680 0000222C 895C2410            <2> 	mov [esp + 16], ebx ;set the old ebx to the new PID
  2681                              <2> 
  2682 00002230 31DB                <2> 	xor ebx, ebx
  2683                              <2> .stackcopy:
  2684 00002232 668B041C            <2> 	mov ax, [esp + ebx]
  2685 00002236 6689441D00          <2> 	mov [ebp + ebx], ax
  2686 0000223B 81C302000000        <2> 	add ebx, 2
  2687 00002241 3B1D[9B220000]      <2> 	cmp ebx, [.stackend]
  2688 00002247 72E9                <2> 	jb .stackcopy
  2689                              <2> 
  2690 00002249 31C0                <2> 	xor eax, eax
  2691 0000224B 668CC8              <2> 	mov ax, cs
  2692 0000224E 89C2                <2> 	mov edx, eax
  2693 00002250 8B4C2428            <2> 	mov ecx, [esp + 40]
  2694 00002254 81C900020000        <2> 	or ecx, 0x200
  2695                              <2> 	
  2696 0000225A 81FE00000000        <2> 	cmp esi, 0
  2697 00002260 7504                <2> 	jne .nochangestack
  2698 00002262 8B742420            <2> 	mov esi, [esp + 32]
  2699                              <2> .nochangestack:
  2700 00002266 89F0                <2> 	mov eax, esi
  2701 00002268 89EC                <2> 	mov esp, ebp
  2702                              <2> 
  2703 0000226A 89442420            <2> 	mov [esp + 32], eax
  2704 0000226E 89542424            <2> 	mov [esp + 36], edx
  2705 00002272 894C2428            <2> 	mov [esp + 40], ecx
  2706                              <2> 
  2707 00002276 8B1D[7E4B0000]      <2> 	mov ebx, [lastthread]
  2708 0000227C 89A3[2B010100]      <2> 	mov [threadlist + ebx], esp
  2709 00002282 81C304000000        <2> 	add ebx, 4
  2710 00002288 891D[7E4B0000]      <2> 	mov [lastthread], ebx
  2711 0000228E 8B25[97220000]      <2> 	mov esp, [.espold]
  2712 00002294 61                  <2> 	popad
  2713 00002295 FB                  <2> 	sti
  2714 00002296 CF                  <2> 	iret
  2715                              <2> 
  2716 00002297 00000000            <2> .espold dd 0
  2717 0000229B 00000000            <2> .stackend dd 0
  2718                              <1> %endif
  2719                              <1> intx12:
  2720                              <1> 	%include 'source/interrupts/12_gettime.asm'
  2721 0000229F A1[30020000]        <2> 	mov eax, [timeseconds]
  2722 000022A4 8B1D[34020000]      <2> 	mov ebx, [timenanoseconds]
  2723 000022AA 89D9                <2> 	mov ecx, ebx
  2724 000022AC C1E90A              <2> 	shr ecx, 10	;this is in microseconds
  2725 000022AF E9C4DFFFFF          <2> 	jmp timerinterrupt
  2726                              <1> intx13:
  2727                              <1> 	%include 'source/interrupts/13_settime.asm'
  2728 000022B4 A3[30020000]        <2> 	mov [timeseconds], eax
  2729 000022B9 891D[34020000]      <2> 	mov [timenanoseconds], ebx
  2730 000022BF E9B4DFFFFF          <2> 	jmp timerinterrupt
  2731                              <2> 	
  2732                              <1> intx14:
  2733                              <1> 	%include 'source/interrupts/14_runcmd.asm'
  2734 000022C4 BF[4E8A0000]        <2> 	mov edi, buftxt
  2735                              <2> cpcmd:
  2736 000022C9 8A06                <2> 	mov al, [esi]
  2737 000022CB 8807                <2> 	mov [edi], al
  2738 000022CD 46                  <2> 	inc esi
  2739 000022CE 47                  <2> 	inc edi
  2740 000022CF 3C00                <2> 	cmp al, 0
  2741 000022D1 75F6                <2> 	jne cpcmd
  2742 000022D3 E8E7050000          <2> 	call run
  2743 000022D8 CF                  <2> 	iret
  2744                              <1> intx15:
  2745                              <1> 	%include 'source/interrupts/15_proginfo.asm'
  2746 000022D9 BB[4E760000]        <2> 	mov ebx, variables
  2747 000022DE 8B35[95290000]      <2> 	mov esi, [currentcommandloc]
  2748 000022E4 89F7                <2> 	mov edi, esi
  2749 000022E6 31C9                <2> 	xor ecx, ecx
  2750                              <2> getcommandzeroes:
  2751 000022E8 8A07                <2> 	mov al, [edi]
  2752 000022EA 47                  <2> 	inc edi
  2753 000022EB 3C3B                <2> 	cmp al, ';'
  2754 000022ED 740B                <2> 	je nomorezeroes
  2755 000022EF 3C00                <2> 	cmp al, 0
  2756 000022F1 7407                <2> 	je nomorezeroes
  2757 000022F3 3C20                <2> 	cmp al, ' '
  2758 000022F5 75F1                <2> 	jne getcommandzeroes
  2759 000022F7 41                  <2> 	inc ecx
  2760 000022F8 EBEE                <2> 	jmp getcommandzeroes
  2761                              <2> nomorezeroes:
  2762 000022FA 41                  <2> 	inc ecx
  2763 000022FB 4F                  <2> 	dec edi
  2764 000022FC 8B1D[DA750000]      <2> 	mov ebx, [uid]
  2765 00002302 8B15[834B0000]      <2> 	mov edx, [currentthread]
  2766 00002308 CF                  <2> 	iret
  2767                              <2> 	
  2768                              <1> 		
  2769                              <1> %ifdef io.serial
  2770                              <1> termcopy:
  2771                              <1> 		ret
  2772                              <1> %else
  2773 00002309 00000000            <1> 	termcursorpos dd 0
  2774 0000230D 0000                <1> 	removedvideo dw 0
  2775                              <1> termcopy:	
  2776 0000230F 60                  <1> 	pusha
  2777 00002310 BF[638E0000]        <1> 	mov edi, videobuf
  2778 00002315 31DB                <1> 	xor ebx, ebx
  2779 00002317 668B1D[94210000]    <1> 	mov bx, [videobufpos]
  2780 0000231E 01DF                <1> 	add edi, ebx
  2781 00002320 893D[09230000]      <1> 	mov [termcursorpos], edi
  2782 00002326 E8B0000000          <1> 	call switchtermcursor
  2783 0000232B 803D[885D0000]00    <1> 	cmp byte [guion], 0
  2784 00002332 0F8405000000        <1> 	je near nowincopy
  2785                              <1> %ifdef gui.included
  2786                              <1> 	mov byte [mouseselecton], 0
  2787                              <1> 	mov byte [termcopyon], 1
  2788                              <1> 	cmp byte [termguion], 1
  2789                              <1> 	je near windowvideocopy
  2790                              <1> %endif
  2791 00002338 E997000000          <1> 	jmp nocopytermatall
  2792                              <1> nowincopy:
  2793 0000233D BE00000A00          <1> 	mov esi, 0xA0000
  2794 00002342 A1[19020000]        <1> 	mov eax, [basecache]
  2795 00002347 C1E004              <1> 	shl eax, 4
  2796 0000234A 29C6                <1> 	sub esi, eax
  2797 0000234C BF[638E0000]        <1> 	mov edi, videobuf
  2798 00002351 31C9                <1> 	xor ecx, ecx
  2799 00002353 668B0D[98210000]    <1> 	mov cx, [charxy]
  2800                              <1> nowincopy2:
  2801 0000235A 668B07              <1> 	mov ax, [edi]
  2802 0000235D 81C7C0120000        <1> 	add edi, (videobuf2 - videobuf)
  2803 00002363 668B1F              <1> 	mov bx, [edi]
  2804 00002366 668907              <1> 	mov [edi], ax
  2805 00002369 81EFC0120000        <1> 	sub edi, (videobuf2 - videobuf)
  2806 0000236F 47                  <1> 	inc edi
  2807 00002370 6639D8              <1> 	cmp ax, bx
  2808 00002373 743E                <1> 	je nopresentwinfont
  2809 00002375 4F                  <1> 	dec edi
  2810 00002376 BB[F54B0000]        <1> 	mov ebx, fonts
  2811 0000237B 31C0                <1> 	xor eax, eax
  2812 0000237D 8A07                <1> 	mov al, [edi]
  2813 0000237F C1E004              <1> 	shl eax, 4
  2814 00002382 01C3                <1> 	add ebx, eax
  2815 00002384 47                  <1> 	inc edi
  2816 00002385 8A27                <1> 	mov ah, [edi]
  2817 00002387 31D2                <1> 	xor edx, edx
  2818 00002389 8A15[98210000]      <1> 	mov dl, [charxy]
  2819 0000238F C1C110              <1> 	rol ecx, 16
  2820 00002392 B110                <1> 	mov cl, 16
  2821                              <1> nowinfont:
  2822 00002394 8A03                <1> 	mov al, [ebx]
  2823 00002396 D0C8                <1> 	ror al, 1
  2824 00002398 80FC07              <1> 	cmp ah, 7
  2825 0000239B 7602                <1> 	jbe notnotfont
  2826 0000239D F6D0                <1> 	not al
  2827                              <1> notnotfont:
  2828 0000239F 8806                <1> 	mov [esi], al
  2829 000023A1 01D6                <1> 	add esi, edx
  2830 000023A3 43                  <1> 	inc ebx
  2831 000023A4 FEC9                <1> 	dec cl
  2832 000023A6 80F900              <1> 	cmp cl, 0
  2833 000023A9 75E9                <1> 	jne nowinfont
  2834 000023AB C1E204              <1> 	shl edx, 4
  2835 000023AE 29D6                <1> 	sub esi, edx
  2836 000023B0 C1C110              <1> 	rol ecx, 16
  2837                              <1> nopresentwinfont:
  2838 000023B3 47                  <1> 	inc edi
  2839 000023B4 46                  <1> 	inc esi
  2840 000023B5 FEC9                <1> 	dec cl
  2841 000023B7 80F900              <1> 	cmp cl, 0
  2842 000023BA 759E                <1> 	jne nowincopy2
  2843 000023BC 8A0D[98210000]      <1> 	mov cl, [charxy]
  2844 000023C2 31D2                <1> 	xor edx, edx
  2845 000023C4 88CA                <1> 	mov dl, cl
  2846 000023C6 29D6                <1> 	sub esi, edx
  2847 000023C8 C1E204              <1> 	shl edx, 4
  2848 000023CB 01D6                <1> 	add esi, edx
  2849 000023CD FECD                <1> 	dec ch
  2850 000023CF 80FD00              <1> 	cmp ch, 0
  2851 000023D2 7586                <1> 	jne nowincopy2
  2852                              <1> nocopytermatall:
  2853 000023D4 E802000000          <1> 	call switchtermcursor
  2854 000023D9 61                  <1> 	popa
  2855 000023DA C3                  <1> 	ret
  2856                              <1> 	
  2857                              <1> switchtermcursor:
  2858 000023DB 8B3D[09230000]      <1> 	mov edi, [termcursorpos]
  2859 000023E1 8A4701              <1> 	mov al, [edi + 1]
  2860 000023E4 8A27                <1> 	mov ah, [edi]
  2861 000023E6 3C07                <1> 	cmp al, 7
  2862 000023E8 7607                <1> 	jbe movlargecursorterm
  2863 000023EA B007                <1> 	mov al, 7
  2864 000023EC E902000000          <1> 	jmp movedcursorterm
  2865                              <1> movlargecursorterm:
  2866 000023F1 B0F0                <1> 	mov al, 0xF0
  2867                              <1> movedcursorterm:
  2868 000023F3 884701              <1> 	mov [edi + 1], al
  2869 000023F6 80FC00              <1> 	cmp ah, 0
  2870 000023F9 7504                <1> 	jne fixednocursorterm
  2871 000023FB B420                <1> 	mov ah, " "
  2872 000023FD 8827                <1> 	mov [edi], ah
  2873                              <1> fixednocursorterm:
  2874 000023FF C3                  <1> 	ret
  2875                              <1> %endif
  2876                                      %include "source/dosints.asm"
  2877                              <1> int20h:
  2878 00002400 66B8004C            <1> mov ax, 0x4C00
  2879                              <1> int21h:
  2880                              <1> dostosolleros:
  2881 00002404 6650                <1> 	push ax
  2882 00002406 66B83000            <1> 	mov ax, NEW_DATA_SEL
  2883 0000240A 8ED8                <1> 	mov ds, ax
  2884 0000240C 8EC0                <1> 	mov es, ax
  2885 0000240E 8EE0                <1> 	mov fs, ax
  2886 00002410 66B82000            <1> 	mov ax, SYS_DATA_SEL
  2887 00002414 8EE8                <1> 	mov gs, ax
  2888 00002416 6658                <1> 	pop ax
  2889 00002418 9C                  <1> 	pushf
  2890 00002419 60                  <1> 	pusha
  2891 0000241A 80FC01              <1> 	cmp ah, 1
  2892 0000241D 0F8449000000        <1> 	je near dosgchar
  2893 00002423 80FC02              <1> 	cmp ah, 2
  2894 00002426 0F8447000000        <1> 	je near doswchar
  2895 0000242C 80FC09              <1> 	cmp ah, 9
  2896 0000242F 0F8449000000        <1> 	je near dosprintstr
  2897 00002435 80FC0A              <1> 	cmp ah, 0xA
  2898 00002438 0F8456000000        <1> 	je near dosgetstr
  2899 0000243E 80FC2B              <1> 	cmp ah, 0x2B
  2900 00002441 0F8492000000        <1> 	je near dosgetdate
  2901 00002447 80FC2C              <1> 	cmp ah, 0x2C
  2902 0000244A 0F84AC000000        <1> 	je near dosgettime
  2903 00002450 80FC4C              <1> 	cmp ah, 0x4C
  2904 00002453 0F84C1000000        <1> 	je near dosexit
  2905                              <1> backtodos:
  2906 00002459 61                  <1> 	popa
  2907 0000245A 9D                  <1> 	popf
  2908 0000245B 6650                <1> 	push ax
  2909 0000245D 66B85000            <1> 	mov ax, DOS_DATA_SEL
  2910 00002461 8ED8                <1> 	mov ds, ax
  2911 00002463 8EC0                <1> 	mov es, ax
  2912 00002465 8EE0                <1> 	mov fs, ax
  2913 00002467 8EE8                <1> 	mov gs, ax
  2914 00002469 6658                <1> 	pop ax
  2915 0000246B CF                  <1> 	iret
  2916                              <1> 
  2917                              <1> dosgchar:
  2918 0000246C E8EFFAFFFF          <1> 	call getchar
  2919 00002471 EBE6                <1> 	jmp backtodos
  2920                              <1> 	
  2921                              <1> doswchar:
  2922 00002473 88D0                <1> 	mov al, dl
  2923 00002475 B307                <1> 	mov bl, 7
  2924 00002477 E849FBFFFF          <1> 	call prcharint
  2925 0000247C EBDB                <1> 	jmp backtodos
  2926                              <1> 	
  2927                              <1> dosprintstr:
  2928 0000247E 31F6                <1> 	xor esi, esi
  2929 00002480 6689D6              <1> 	mov si, dx
  2930 00002483 81C600004000        <1> 	add esi, dosprogloc
  2931 00002489 B024                <1> 	mov al, "$"
  2932 0000248B B307                <1> 	mov bl, 7
  2933 0000248D E871F6FFFF          <1> 	call printint
  2934 00002492 EBC5                <1> 	jmp backtodos
  2935                              <1> 	
  2936                              <1> dosgetstr:
  2937 00002494 31F6                <1> 	xor esi, esi
  2938 00002496 6689D6              <1> 	mov si, dx
  2939 00002499 81C600004000        <1> 	add esi, dosprogloc
  2940 0000249F B900000000          <1> 	mov ecx, 0
  2941 000024A4 8A0E                <1> 	mov cl, [esi]
  2942 000024A6 81C603000000        <1> 	add esi, 3
  2943 000024AC 89F7                <1> 	mov edi, esi
  2944 000024AE 8935[D5240000]      <1> 	mov [stringstart], esi
  2945 000024B4 01CF                <1> 	add edi, ecx
  2946 000024B6 B00A                <1> 	mov al, 10
  2947 000024B8 B307                <1> 	mov bl, 7
  2948 000024BA E829F7FFFF          <1> 	call rdprint
  2949 000024BF 89F1                <1> 	mov ecx, esi
  2950 000024C1 2B0D[D5240000]      <1> 	sub ecx, [stringstart]
  2951 000024C7 8B35[D5240000]      <1> 	mov esi, [stringstart]
  2952 000024CD 884EFF              <1> 	mov [esi - 1], cl
  2953 000024D0 884EFE              <1> 	mov [esi - 2], cl
  2954 000024D3 EB84                <1> 	jmp backtodos
  2955 000024D5 00000000            <1> stringstart dd 0
  2956                              <1> 
  2957                              <1> dosgetdate:
  2958 000024D9 E8FF1A0000          <1> 	call time
  2959 000024DE 8A0D[A5410000]      <1> 	mov cl, [RTCtimeYear]
  2960 000024E4 B500                <1> 	mov ch, 0
  2961 000024E6 6681C1D007          <1> 	add cx, 2000
  2962 000024EB 8A35[A4410000]      <1> 	mov dh, [RTCtimeMonth]
  2963 000024F1 8A15[A3410000]      <1> 	mov dl, [RTCtimeDay]
  2964 000024F7 E95DFFFFFF          <1> 	jmp backtodos
  2965                              <1> 
  2966                              <1> dosgettime:
  2967 000024FC E8DC1A0000          <1> 	call time
  2968 00002501 8A2D[A2410000]      <1> 	mov ch, [RTCtimeHour]
  2969 00002507 8A0D[A1410000]      <1> 	mov cl, [RTCtimeMinute]
  2970 0000250D 8A35[A0410000]      <1> 	mov dh, [RTCtimeSecond]
  2971 00002513 B200                <1> 	mov dl, 0
  2972 00002515 E93FFFFFFF          <1> 	jmp backtodos
  2973                              <1> 	
  2974                              <1> dosexit:
  2975 0000251A 61                  <1> 	popa
  2976 0000251B 8B25[CE730000]      <1> 	mov esp, [previousstack]
  2977 00002521 31DB                <1> 	xor ebx, ebx
  2978 00002523 88C3                <1> 	mov bl, al
  2979 00002525 80FB00              <1> 	cmp bl, 0
  2980 00002528 0F855CF5FFFF        <1> 	jne near exitprog.error
  2981 0000252E C3                  <1> 	ret
  2982                                      %include "source/solleros.asm"
  2983                              <1> 	;SOLLEROS.ASM
  2984                              <1> os:
  2985                              <1> setdefenv:
  2986 0000252F B02F                <1> 	mov al, '/'
  2987 00002531 A2[DA730000]        <1> 	mov [currentfolder], al
  2988 00002536 B801000000          <1> 	mov eax, 1
  2989 0000253B A3[D6730000]        <1> 	mov [currentfolderloc], eax
  2990 00002540 E81DF6FFFF          <1> 	call clear
  2991                              <1> bootfilecheck:
  2992 00002545 803D[DE750000]01    <1> 	cmp byte [ranboot], 1
  2993 0000254C 0F8427000000        <1> 	je near nobootfile
  2994 00002552 C605[DE750000]01    <1> 	mov byte [ranboot], 1
  2995 00002559 BF[874B0000]        <1> 	mov edi, bootfilename
  2996 0000255E BE00004000          <1> 	mov esi, 0x400000
  2997 00002563 E87B240000          <1> 	call loadfile
  2998 00002568 81FA94010000        <1> 	cmp edx, 404
  2999 0000256E 0F8405000000        <1> 	je near nobootfile
  3000 00002574 E89A0D0000          <1> 	call progbatchfound
  3001                              <1> nobootfile:	
  3002                              <1> 
  3003 00002579 BE[00000000]        <1> 	mov esi, signature
  3004                              <1> .sigcopyloop:	;this prevents an odd error
  3005 0000257E 658A06              <1> 	mov al, [gs:esi]
  3006 00002581 8806                <1> 	mov [esi], al
  3007 00002583 46                  <1> 	inc esi
  3008 00002584 81FE[1A000000]      <1> 	cmp esi, signatureend
  3009 0000258A 72F2                <1> 	jb .sigcopyloop
  3010 0000258C BE[00000000]        <1> 	mov esi, signature
  3011 00002591 E866F5FFFF          <1> 	call print
  3012 00002596 8B0D[16000000]      <1> 	mov ecx, [signatureend - 4]
  3013 0000259C E8E5060000          <1> 	call showdec
  3014 000025A1 BE[D04B0000]        <1> 	mov esi, line
  3015 000025A6 E851F5FFFF          <1> 	call print
  3016 000025AB BE[AC4B0000]        <1> 	mov esi, userask
  3017 000025B0 E847F5FFFF          <1> 	call print
  3018                              <1> usercheck:
  3019 000025B5 BE[4E8A0000]        <1> 	mov esi, buftxt
  3020 000025BA BF[4E8E0000]        <1> 	mov edi, buftxtend
  3021 000025BF B00A                <1> 	mov al, 10
  3022 000025C1 E822F6FFFF          <1> 	call rdprint
  3023 000025C6 56                  <1> 	push esi
  3024 000025C7 BE[B64B0000]        <1> 	mov esi, pwdask
  3025 000025CC E82BF5FFFF          <1> 	call print
  3026 000025D1 5E                  <1> 	pop esi
  3027 000025D2 46                  <1> 	inc esi
  3028 000025D3 8935[BD260000]      <1> 	mov [esipass], esi
  3029                              <1> passcheck:
  3030 000025D9 E882F9FFFF          <1> 	call getchar
  3031 000025DE 3C0A                <1> 	cmp al, 10
  3032 000025E0 0F8436000000        <1> 	je near gotpass
  3033 000025E6 3C08                <1> 	cmp al, 8
  3034 000025E8 0F8410000000        <1> 	je near backpass
  3035 000025EE 8806                <1> 	mov [esi], al
  3036 000025F0 46                  <1> 	inc esi
  3037 000025F1 B02A                <1> 	mov al, '*'
  3038 000025F3 E8CDF9FFFF          <1> 	call prcharint
  3039 000025F8 EBDF                <1> 	jmp passcheck
  3040 000025FA 08200800            <1> backcursor2 db 8," ",8,0
  3041                              <1> backpass:
  3042 000025FE 3B35[BD260000]      <1> 	cmp esi, [esipass]
  3043 00002604 0F84CFFFFFFF        <1> 	je near passcheck
  3044 0000260A 4E                  <1> 	dec esi
  3045 0000260B C60600              <1> 	mov byte [esi], 0
  3046 0000260E 56                  <1> 	push esi
  3047 0000260F BE[FA250000]        <1> 	mov esi, backcursor2
  3048 00002614 E8E3F4FFFF          <1> 	call print
  3049 00002619 5E                  <1> 	pop esi
  3050 0000261A EBBD                <1> 	jmp passcheck
  3051                              <1> gotpass:
  3052 0000261C B00A                <1> 	mov al, 10
  3053 0000261E E8A2F9FFFF          <1> 	call prcharint
  3054 00002623 30C0                <1> 	xor al, al
  3055 00002625 31C9                <1> 	xor ecx, ecx
  3056 00002627 8806                <1> 	mov [esi], al
  3057 00002629 BB[D24B0000]        <1> 	mov ebx, userlst
  3058                              <1> userfind:
  3059 0000262E BE[4E8A0000]        <1> 	mov esi, buftxt
  3060 00002633 8A06                <1> 	mov al, [esi]
  3061 00002635 3C00                <1> 	cmp al, 0
  3062 00002637 0F84F2FEFFFF        <1> 	je near os
  3063 0000263D 891D[C1260000]      <1> 	mov [usercache], ebx
  3064 00002643 E851030000          <1> 	call tester
  3065 00002648 3C01                <1> 	cmp al, 1
  3066 0000264A 7416                <1> 	je pwdtest
  3067 0000264C 41                  <1> 	inc ecx
  3068                              <1> nxtuser:
  3069 0000264D 8A03                <1> 	mov al, [ebx]
  3070 0000264F 43                  <1> 	inc ebx
  3071 00002650 3C00                <1> 	cmp al, 0
  3072 00002652 75F9                <1> 	jne nxtuser
  3073 00002654 81FB[F54B0000]      <1> 	cmp ebx, userlstend
  3074 0000265A 0F83CFFEFFFF        <1> 	jae near os
  3075 00002660 EBCC                <1> 	jmp userfind
  3076                              <1> pwdtest:
  3077 00002662 46                  <1> 	inc esi
  3078 00002663 43                  <1> 	inc ebx
  3079 00002664 E830030000          <1> 	call tester
  3080 00002669 3C01                <1> 	cmp al, 1
  3081 0000266B 7402                <1> 	je pwdrgt
  3082 0000266D EBDE                <1> 	jmp nxtuser
  3083                              <1> pwdrgt:
  3084 0000266F D1E9                <1> 	shr ecx, 1
  3085 00002671 890D[DA750000]      <1> 	mov [uid], ecx
  3086 00002677 E8E6F4FFFF          <1> 	call clear
  3087 0000267C 66B90002            <1> 	mov cx, 200h
  3088 00002680 BE[4E8A0000]        <1> 	mov esi, buftxt
  3089 00002685 8935[95290000]      <1> 	mov [currentcommandloc], esi
  3090 0000268B E825000000          <1> 	call bufclr
  3091                              <1> clearolddata:
  3092 00002690 31C0                <1> 	xor eax, eax
  3093 00002692 A2[DF750000]        <1> 	mov [IFON], al
  3094 00002697 A2[E0750000]        <1> 	mov [IFTRUE], al
  3095 0000269C A2[48760000]        <1> 	mov [BATCHISON], al
  3096 000026A1 A3[44760000]        <1> 	mov [BATCHPOS], eax
  3097 000026A6 A2[49760000]        <1> 	mov [LOOPON], al
  3098 000026AB A3[4A760000]        <1> 	mov [LOOPPOS], eax
  3099 000026B0 E933000000          <1> 	jmp nwcmd
  3100                              <1> bufclr:	
  3101 000026B5 30C0                <1> 	xor al, al
  3102 000026B7 8806                <1> 	mov [esi], al
  3103 000026B9 46                  <1> 	inc esi
  3104 000026BA E2F9                <1> 	loop bufclr
  3105 000026BC C3                  <1> 	ret
  3106                              <1> 
  3107 000026BD 00000000            <1> esipass dd 0
  3108 000026C1 [D24B0000]          <1> usercache dd userlst
  3109                              <1> 	
  3110                              <1> buftxtclear:
  3111 000026C5 30C0                <1> 	xor al, al
  3112 000026C7 BE[4E8A0000]        <1> 	mov esi, buftxt
  3113 000026CC 81FE[4E8E0000]      <1> clearbuftxt: cmp esi, buf2
  3114 000026D2 730E                <1> 	jae retbufclr
  3115 000026D4 8806                <1> 	mov [esi], al
  3116 000026D6 46                  <1> 	inc esi
  3117 000026D7 EBF3                <1> 	jmp clearbuftxt
  3118                              <1> 
  3119 000026D9 39DE                <1> clearitbuf: cmp esi, ebx
  3120 000026DB 7305                <1> 	jae retbufclr
  3121 000026DD 8806                <1> 	mov [esi], al
  3122 000026DF 46                  <1> 	inc esi
  3123 000026E0 EBF7                <1> 	jmp clearitbuf
  3124 000026E2 C3                  <1> retbufclr: ret
  3125                              <1> 
  3126 000026E3 E900000000          <1> full:	jmp nwcmd
  3127                              <1> 
  3128                              <1> shush:	;SollerOS Hardly Unix-compatible Shell
  3129                              <1> nwcmd:
  3130 000026E8 FB                  <1> 	sti
  3131 000026E9 31C0                <1> 	xor eax, eax
  3132 000026EB 3905[B7280000]      <1> 	cmp [nextcommandloc], eax
  3133 000026F1 7413                <1> 	je nomultiplecommand
  3134 000026F3 8B35[B7280000]      <1> 	mov esi, [nextcommandloc]
  3135 000026F9 8935[BB280000]      <1> 	mov [thiscommandloc], esi
  3136 000026FF E8C0010000          <1> 	call fixvariables
  3137 00002704 EBE2                <1> 	jmp nwcmd
  3138                              <1> nomultiplecommand:
  3139 00002706 A3[BB280000]        <1> 	mov [thiscommandloc], eax
  3140 0000270B 3805[824B0000]      <1> 	cmp [threadson], al
  3141 00002711 7405                <1> 	je noclinwcmd
  3142 00002713 A2[824B0000]        <1> 	mov [threadson], al
  3143                              <1> noclinwcmd:
  3144 00002718 B001                <1> 	mov al, 1
  3145 0000271A 3805[48760000]      <1> 	cmp [BATCHISON], al
  3146 00002720 7501                <1> 	jne cancel
  3147 00002722 C3                  <1> 	ret
  3148 00002723 30C0                <1> cancel:	xor al, al
  3149 00002725 A2[DF750000]        <1> 	mov [IFON], al
  3150 0000272A A2[48760000]        <1> 	mov [BATCHISON], al
  3151 0000272F B05B                <1> 	mov al, '['
  3152 00002731 66BB0700            <1> 	mov bx, 7
  3153 00002735 E89CF8FFFF          <1> 	call prcharq
  3154 0000273A 8B35[C1260000]      <1> 	mov esi, [usercache]
  3155 00002740 E8A5F3FFFF          <1> 	call printquiet
  3156 00002745 BE[C04B0000]        <1> 	mov esi, computer
  3157 0000274A E89BF3FFFF          <1> 	call printquiet
  3158 0000274F BE[DA730000]        <1> 	mov esi, currentfolder
  3159 00002754 0335[D2730000]      <1> 	add esi, [lastfolderloc]
  3160 0000275A E88BF3FFFF          <1> 	call printquiet
  3161 0000275F BE[CB4B0000]        <1> 	mov esi, endprompt
  3162 00002764 E893F3FFFF          <1> 	call print
  3163 00002769 E857FFFFFF          <1> 	call buftxtclear
  3164 0000276E BE[4E8A0000]        <1> 	mov esi, buftxt
  3165 00002773 C605[491F0000]01    <1> 	mov byte [commandedit], 1
  3166 0000277A B00A                <1> 	mov al, 10
  3167 0000277C 66BB0700            <1> 	mov bx, 7
  3168 00002780 BF[4E8E0000]        <1> 	mov edi, buftxtend
  3169 00002785 E85EF4FFFF          <1> 	call rdprint
  3170 0000278A C605[491F0000]00    <1> 	mov byte [commandedit], 0
  3171 00002791 803D[4E8A0000]00    <1> 	cmp byte [buftxt], 0
  3172 00002798 0F844AFFFFFF        <1> 	je near nwcmd
  3173 0000279E 8B35[27F10000]      <1> gotcmd:	mov esi, [commandbufpos]
  3174 000027A4 8935[23F10000]      <1> 	mov [lastcommandpos], esi
  3175 000027AA BF[4E8A0000]        <1> 	mov edi, buftxt
  3176 000027AF 81C6[2BF10000]      <1> 	add esi, commandbuf
  3177 000027B5 81FE[2B010100]      <1> 	cmp esi, commandbufend
  3178 000027BB 7605                <1> 	jbe copycommand
  3179 000027BD BE[2BF10000]        <1> 	mov esi, commandbuf
  3180                              <1> copycommand:
  3181 000027C2 8A07                <1> 	mov al, [edi]
  3182 000027C4 8806                <1> 	mov [esi], al
  3183 000027C6 47                  <1> 	inc edi
  3184 000027C7 46                  <1> 	inc esi
  3185 000027C8 3C00                <1> 	cmp al, 0
  3186 000027CA 740F                <1> 	je donecopy
  3187 000027CC 81FE[2B010100]      <1> 	cmp esi, commandbufend
  3188 000027D2 76EE                <1> 	jbe copycommand
  3189 000027D4 BE[2BF10000]        <1> 	mov esi, commandbuf
  3190 000027D9 EBE7                <1> 	jmp copycommand
  3191                              <1> donecopy:
  3192 000027DB 81EE[2BF10000]      <1> 	sub esi, commandbuf
  3193 000027E1 8935[27F10000]      <1> 	mov [commandbufpos], esi
  3194 000027E7 E8D3000000          <1> 	call run
  3195 000027EC E9F7FEFFFF          <1> 	jmp nwcmd
  3196                              <1> 
  3197 000027F1 E8CFFEFFFF          <1> input:	call buftxtclear
  3198 000027F6 BE[4E8A0000]        <1> 	mov esi, buftxt		;puts input into buftxt AND onto screen
  3199 000027FB BF[4E8E0000]        <1> 	mov edi, buftxtend
  3200 00002800 B00A                <1> stdin:	mov al, 10
  3201 00002802 B307                <1> 	mov bl, 7
  3202 00002804 E8DFF3FFFF          <1> 	call rdprint
  3203 00002809 C3                  <1> 	ret
  3204                              <1> 
  3205                              <1> replacevariable:
  3206 0000280A 8A4601              <1> 	mov al, [esi + 1]
  3207 0000280D C64601FF            <1> 	mov byte [esi + 1], 255
  3208 00002811 3C24                <1> 	cmp al, "$"
  3209 00002813 0F84AB000000        <1> 	je near fixvariables
  3210 00002819 884601              <1> 	mov [esi + 1], al
  3211 0000281C 56                  <1> 	push esi
  3212 0000281D 81EE[4E8A0000]      <1> 	sub esi, buftxt
  3213 00002823 89F7                <1> 	mov edi, esi
  3214 00002825 81C6[4E8A0000]      <1> 	add esi, buftxt
  3215 0000282B 47                  <1> 	inc edi
  3216 0000282C BB[4E760000]        <1> 	mov ebx, variables
  3217 00002831 E8B5100000          <1> 	call nxtvrech
  3218 00002836 89F7                <1> 	mov edi, esi
  3219 00002838 31DB                <1> 	xor ebx, ebx
  3220 0000283A 4E                  <1> 	dec esi
  3221                              <1> findvarname:
  3222 0000283B 4E                  <1> 	dec esi
  3223 0000283C 8A06                <1> 	mov al, [esi]
  3224 0000283E 43                  <1> 	inc ebx
  3225 0000283F 3C04                <1> 	cmp al, 4
  3226 00002841 75F8                <1> 	jne findvarname
  3227 00002843 5E                  <1> 	pop esi
  3228                              <1> replacevarloop:
  3229 00002844 8A07                <1> 	mov al, [edi]
  3230 00002846 81FB00000000        <1> 	cmp ebx, 0
  3231 0000284C 0F841E000000        <1> 	je near expandbuftxt
  3232 00002852 3C00                <1> 	cmp al, 0
  3233 00002854 0F8407000000        <1> 	je near compressbuftxt
  3234 0000285A 8806                <1> 	mov [esi], al
  3235 0000285C 4B                  <1> 	dec ebx
  3236 0000285D 46                  <1> 	inc esi
  3237 0000285E 47                  <1> 	inc edi
  3238 0000285F EBE3                <1> 	jmp replacevarloop
  3239                              <1> compressbuftxt:	
  3240 00002861 8A041E              <1> 	mov al, [esi + ebx]
  3241 00002864 8806                <1> 	mov [esi], al
  3242 00002866 46                  <1> 	inc esi
  3243 00002867 3C00                <1> 	cmp al, 0
  3244 00002869 75F6                <1> 	jne compressbuftxt
  3245 0000286B E954000000          <1> 	jmp fixvariables
  3246                              <1> expandbuftxt:
  3247 00002870 89F1                <1> 	mov ecx, esi
  3248 00002872 8A26                <1> 	mov ah, [esi]
  3249                              <1> expandbuftxtlp:
  3250 00002874 8A1E                <1> 	mov bl, [esi]
  3251 00002876 46                  <1> 	inc esi
  3252 00002877 8A3E                <1> 	mov bh, [esi]
  3253 00002879 8826                <1> 	mov [esi], ah
  3254 0000287B 88FC                <1> 	mov ah, bh
  3255 0000287D 80FB00              <1> 	cmp bl, 0
  3256 00002880 75F2                <1> 	jne expandbuftxtlp
  3257 00002882 89CE                <1> 	mov esi, ecx
  3258 00002884 8806                <1> 	mov [esi], al
  3259 00002886 47                  <1> 	inc edi
  3260 00002887 8A07                <1> 	mov al, [edi]
  3261 00002889 3C00                <1> 	cmp al, 0
  3262 0000288B 0F8433000000        <1> 	je near fixvariables
  3263 00002891 46                  <1> 	inc esi
  3264 00002892 EBDC                <1> 	jmp expandbuftxt
  3265                              <1> multipleprogline:
  3266 00002894 30E4                <1> 	xor ah, ah
  3267 00002896 8826                <1> 	mov [esi], ah
  3268 00002898 46                  <1> 	inc esi
  3269 00002899 8935[B7280000]      <1> 	mov [nextcommandloc], esi
  3270 0000289F E93E000000          <1> 	jmp donefixvariables
  3271                              <1> inlinecomment:	;if the following char is #, include a #, otherwise end the line
  3272 000028A4 46                  <1> 	inc esi
  3273 000028A5 8A06                <1> 	mov al, [esi]
  3274 000028A7 C606FF              <1> 	mov byte [esi], 255
  3275 000028AA 3C23                <1> 	cmp al, '#'
  3276 000028AC 7416                <1> 	je fixvariables
  3277 000028AE 4E                  <1> 	dec esi
  3278 000028AF C60600              <1> 	mov byte [esi], 0
  3279 000028B2 E90D000000          <1> 	jmp fixvariables
  3280                              <1> 	
  3281 000028B7 00000000            <1> nextcommandloc dd 0
  3282 000028BB 00000000            <1> thiscommandloc dd 0	
  3283                              <1> run:
  3284 000028BF BE[4E8A0000]        <1> 	mov esi, buftxt
  3285                              <1> fixvariables:
  3286 000028C4 46                  <1> 	inc esi
  3287 000028C5 8A06                <1> 	mov al, [esi]
  3288 000028C7 3C23                <1> 	cmp al, '#'	;inline comment
  3289 000028C9 74D9                <1> 	je inlinecomment
  3290 000028CB 3C24                <1> 	cmp al, '$' ;variable
  3291 000028CD 0F8437FFFFFF        <1> 	je near replacevariable
  3292 000028D3 3C3B                <1> 	cmp al, ';' ;program list
  3293 000028D5 74BD                <1> 	je multipleprogline
  3294 000028D7 3C00                <1> 	cmp al, 0
  3295 000028D9 75E9                <1> 	jne fixvariables
  3296 000028DB 31C0                <1> 	xor eax, eax
  3297 000028DD A3[B7280000]        <1> 	mov [nextcommandloc], eax
  3298                              <1> donefixvariables:
  3299 000028E2 803D[802E0000]00    <1> 	cmp byte [indexdone], 0
  3300 000028E9 7505                <1> 	jne progtest
  3301 000028EB E8FB040000          <1> 	call indexfiles
  3302                              <1> progtest:
  3303 000028F0 31C0                <1> 	xor eax, eax
  3304 000028F2 BB[CE6F0000]        <1> 	mov ebx, fileindex
  3305 000028F7 668B03              <1> prgnxt:	mov ax, [ebx]
  3306 000028FA B1FF                <1> 	mov cl, 255
  3307 000028FC B52C                <1> 	mov ch, 44
  3308 000028FE 6639C8              <1> 	cmp ax, cx
  3309 00002901 740B                <1> 	je fndprg
  3310 00002903 43                  <1> 	inc ebx
  3311 00002904 81FB[CE730000]      <1> 	cmp ebx, fileindexend
  3312 0000290A 735D                <1> 	jae prgnf
  3313 0000290C EBE9                <1> 	jmp prgnxt
  3314 0000290E 81C302000000        <1> fndprg: add ebx, 2
  3315 00002914 31C9                <1> 	xor ecx, ecx
  3316 00002916 BE[4E8A0000]        <1> 	mov esi, buftxt
  3317 0000291B 390D[BB280000]      <1> 	cmp [thiscommandloc], ecx
  3318 00002921 7406                <1> 	je noprgtstmultiple
  3319 00002923 8B35[BB280000]      <1> 	mov esi, [thiscommandloc]
  3320                              <1> noprgtstmultiple:
  3321 00002929 E8A6000000          <1> 	call cndtest
  3322 0000292E 3C01                <1> 	cmp al, 1
  3323 00002930 7302                <1> 	jae prggood
  3324 00002932 EBC3                <1> 	jmp prgnxt
  3325 00002934 81FB[CE730000]      <1> prggood: cmp ebx, fileindexend
  3326 0000293A 7358                <1> 	jae prgdn
  3327 0000293C 31C0                <1> 	xor eax, eax
  3328 0000293E BE[4E8A0000]        <1> 	mov esi, buftxt
  3329 00002943 3905[BB280000]      <1> 	cmp [thiscommandloc], eax
  3330 00002949 7406                <1> 	je noprggoodmul
  3331 0000294B 8B35[BB280000]      <1> 	mov esi, [thiscommandloc]
  3332                              <1> noprggoodmul:
  3333 00002951 8935[95290000]      <1> 	mov [currentcommandloc], esi
  3334 00002957 81C303000000        <1> 	add ebx, 3
  3335 0000295D 8B3B                <1> 	mov edi, [ebx]
  3336 0000295F C605[824B0000]02    <1> 	mov byte [threadson], 2
  3337 00002966 FFD7                <1> 	call edi
  3338 00002968 C3                  <1> 	ret
  3339                              <1> prgnf:	
  3340 00002969 8B35[95290000]      <1> 	mov esi, [currentcommandloc]
  3341 0000296F 8A06                <1> 	mov al, [esi]
  3342 00002971 3C00                <1> 	cmp al, 0
  3343 00002973 741F                <1> 	je prgdn
  3344 00002975 BE[8F4B0000]        <1> 	mov esi, notfound1
  3345 0000297A E87DF1FFFF          <1> 	call print
  3346 0000297F 8B35[95290000]      <1> 	mov esi, [currentcommandloc]
  3347 00002985 E872F1FFFF          <1> 	call print
  3348 0000298A BE[974B0000]        <1> 	mov esi, notfound2
  3349 0000298F E868F1FFFF          <1> 	call print
  3350 00002994 C3                  <1> prgdn:	ret
  3351                              <1> 
  3352 00002995 00000000            <1> currentcommandloc dd 0
  3353                              <1> 
  3354                              <1> tester:			;si=user bx=prog returns 1 in al if true
  3355 00002999 6631C0              <1> 	xor ax, ax
  3356 0000299C 8A06                <1> retest:	mov al, [esi]
  3357 0000299E 8A23                <1> 	mov ah, [ebx]
  3358 000029A0 3C00                <1> 	cmp al, 0
  3359 000029A2 7408                <1> 	je testtrue
  3360 000029A4 38E0                <1> 	cmp al, ah
  3361 000029A6 750C                <1> 	jne testfalse
  3362 000029A8 43                  <1> 	inc ebx
  3363 000029A9 46                  <1> 	inc esi
  3364 000029AA EBF0                <1> 	jmp retest
  3365                              <1> testtrue:
  3366 000029AC 80FC00              <1> 	cmp ah, 0
  3367 000029AF 7503                <1> 	jne testfalse
  3368 000029B1 B001                <1> 	mov al, 1
  3369 000029B3 C3                  <1> 	ret
  3370                              <1> testfalse:
  3371 000029B4 30C0                <1> 	xor al, al
  3372 000029B6 C3                  <1> 	ret
  3373                              <1> 
  3374                              <1> optest:			;si=user bx=prog returns 1 in al if true
  3375 000029B7 30C0                <1> 	xor al, al
  3376                              <1> opretest:
  3377 000029B9 8A06                <1> 	mov al, [esi]
  3378 000029BB 8A23                <1> 	mov ah, [ebx]
  3379 000029BD 38E0                <1> 	cmp al, ah
  3380 000029BF 7510                <1> 	jne optestfalse
  3381 000029C1 80FC00              <1> 	cmp ah, 0
  3382 000029C4 7404                <1> 	je optesttrue
  3383 000029C6 43                  <1> 	inc ebx
  3384 000029C7 46                  <1> 	inc esi
  3385 000029C8 EBEF                <1> 	jmp opretest
  3386                              <1> optesttrue:
  3387 000029CA 3C00                <1> 	cmp al, 0
  3388 000029CC 7503                <1> 	jne optestfalse
  3389 000029CE B001                <1> 	mov al, 1
  3390 000029D0 C3                  <1> 	ret
  3391                              <1> optestfalse:
  3392 000029D1 30C0                <1> 	xor al, al
  3393 000029D3 C3                  <1> 	ret
  3394                              <1> 
  3395                              <1> cndtest:			;si=user bx=prog cl=endchar returns 1 in al if true
  3396 000029D4 30C0                <1> 	xor al, al
  3397 000029D6 8A06                <1> cndretest:	mov al, [esi]
  3398 000029D8 8A23                <1> 	mov ah, [ebx]
  3399 000029DA 38CC                <1> 	cmp ah, cl
  3400 000029DC 7408                <1> 	je cndtesttrue
  3401 000029DE 38E0                <1> 	cmp al, ah
  3402 000029E0 750B                <1> 	jne cndtestfalse
  3403 000029E2 43                  <1> 	inc ebx
  3404 000029E3 46                  <1> 	inc esi
  3405 000029E4 EBF0                <1> 	jmp cndretest
  3406                              <1> cndtesttrue:
  3407 000029E6 38C8                <1> 	cmp al, cl
  3408 000029E8 7506                <1> 	jne cndtestalmost
  3409 000029EA B001                <1> 	mov al, 1
  3410 000029EC C3                  <1> 	ret
  3411                              <1> cndtestfalse:
  3412 000029ED 30C0                <1> 	xor al, al
  3413 000029EF C3                  <1> 	ret
  3414                              <1> cndtestalmost:
  3415 000029F0 B002                <1> 	mov al, 2
  3416 000029F2 C3                  <1> 	ret
  3417                              <1> 	
  3418                              <1> array:				;arraystart in si, arrayend in bx, arrayseperator in cx
  3419                              <1> 		                ;ends if array seperator is found backwards after 0
  3420                              <1> 	arnxt:	      
  3421 000029F3 88E8                <1> 		mov al, ch
  3422 000029F5 88CC                <1> 		mov ah, cl        
  3423 000029F7 663906              <1> 		cmp [esi], ax
  3424 000029FA 744D                <1> 		je ardn
  3425 000029FC 66390E              <1> 		cmp [esi], cx
  3426 000029FF 7407                <1> 		je arfnd
  3427 00002A01 46                  <1> 		inc esi
  3428 00002A02 39DE                <1> 		cmp esi, ebx
  3429 00002A04 7343                <1> 		jae ardn
  3430 00002A06 EBEB                <1> 		jmp arnxt
  3431 00002A08 81C602000000        <1> 	arfnd: add esi, 2
  3432 00002A0E 891D[4A2A0000]      <1> 		mov [arbx], ebx
  3433 00002A14 890D[4E2A0000]      <1> 		mov [arcx], ecx
  3434 00002A1A E8DDF0FFFF          <1> 		call print
  3435 00002A1F 8935[502A0000]      <1> 		mov [arsi], esi
  3436 00002A25 BE[D04B0000]        <1> 		mov esi, line
  3437 00002A2A E8CDF0FFFF          <1> 		call print
  3438 00002A2F 8B1D[4A2A0000]      <1> 		mov ebx, [arbx]
  3439 00002A35 668B0D[4E2A0000]    <1> 		mov cx, [arcx]
  3440 00002A3C 8B35[502A0000]      <1> 		mov esi, [arsi]
  3441 00002A42 46                  <1> 		inc esi
  3442 00002A43 39DE                <1> 		cmp esi, ebx
  3443 00002A45 7302                <1> 		jae ardn
  3444 00002A47 EBAA                <1> 		jmp arnxt
  3445 00002A49 C3                  <1> 	ardn:	ret
  3446 00002A4A 00000000            <1> arbx:	dw 0,0
  3447 00002A4E 0000                <1> arcx:	db 0,0
  3448 00002A50 00000000            <1> arsi:	dw 0,0
  3449                              <1> 
  3450                              <1> clearbuffer:
  3451 00002A54 BE[4E8E0000]        <1> 	mov esi, buf2
  3452 00002A59 B030                <1> 	mov al, '0'
  3453 00002A5B 81FE[628E0000]      <1> clearbuf: cmp esi, numbuf
  3454 00002A61 7305                <1> 	jae doneclearbuff
  3455 00002A63 8806                <1> 	mov [esi], al
  3456 00002A65 46                  <1> 	inc esi
  3457 00002A66 EBF3                <1> 	jmp clearbuf
  3458                              <1> doneclearbuff: 
  3459 00002A68 C3                  <1> 		ret
  3460                              <1> 
  3461                              <1> convert:
  3462 00002A69 4E                  <1> 	dec esi
  3463 00002A6A 89F3                <1> 	mov ebx, esi		;place to convert into must be in esi, number to convert must be in ecx
  3464                              <1> .lp:
  3465 00002A6C 89DE                <1> 	mov esi, ebx
  3466 00002A6E 81EE09000000        <1> 	sub esi, 9
  3467 00002A74 81F900CA9A3B        <1> 	cmp ecx, 1000000000
  3468 00002A7A 720A                <1> 	jb .8
  3469 00002A7C 81E900CA9A3B        <1> 	sub ecx, 1000000000
  3470 00002A82 FE06                <1> 	inc byte [esi]
  3471 00002A84 EBE6                <1> 	jmp .lp
  3472 00002A86 46                  <1> .8:	inc esi
  3473 00002A87 81F900E1F505        <1> 	cmp ecx, 100000000
  3474 00002A8D 720A                <1> 	jb .7
  3475 00002A8F 81E900E1F505        <1> 	sub ecx, 100000000
  3476 00002A95 FE06                <1> 	inc byte [esi]
  3477 00002A97 EBD3                <1> 	jmp .lp
  3478 00002A99 46                  <1> .7:	inc esi
  3479 00002A9A 81F980969800        <1> 	cmp ecx, 10000000
  3480 00002AA0 720A                <1> 	jb .6
  3481 00002AA2 81E980969800        <1> 	sub ecx, 10000000
  3482 00002AA8 FE06                <1> 	inc byte [esi]
  3483 00002AAA EBC0                <1> 	jmp .lp
  3484 00002AAC 46                  <1> .6:	inc esi
  3485 00002AAD 81F940420F00        <1> 	cmp ecx, 1000000
  3486 00002AB3 720A                <1> 	jb .5
  3487 00002AB5 81E940420F00        <1> 	sub ecx, 1000000
  3488 00002ABB FE06                <1> 	inc byte [esi]
  3489 00002ABD EBAD                <1> 	jmp .lp
  3490 00002ABF 46                  <1> .5:	inc esi
  3491 00002AC0 81F9A0860100        <1> 	cmp ecx, 100000
  3492 00002AC6 720A                <1> 	jb .4
  3493 00002AC8 81E9A0860100        <1> 	sub ecx, 100000
  3494 00002ACE FE06                <1> 	inc byte [esi]
  3495 00002AD0 EB9A                <1> 	jmp .lp
  3496 00002AD2 46                  <1> .4:	inc esi
  3497 00002AD3 81F910270000        <1> 	cmp ecx, 10000
  3498 00002AD9 720A                <1> 	jb .3
  3499 00002ADB 81E910270000        <1> 	sub ecx, 10000
  3500 00002AE1 FE06                <1> 	inc byte [esi]
  3501 00002AE3 EB87                <1> 	jmp .lp
  3502 00002AE5 46                  <1> .3:	inc esi
  3503 00002AE6 81F9E8030000        <1> 	cmp ecx, 1000
  3504 00002AEC 720D                <1> 	jb .2
  3505 00002AEE 81E9E8030000        <1> 	sub ecx, 1000
  3506 00002AF4 FE06                <1> 	inc byte [esi]
  3507 00002AF6 E971FFFFFF          <1> 	jmp .lp
  3508 00002AFB 46                  <1> .2:	inc esi
  3509 00002AFC 81F964000000        <1> 	cmp ecx, 100
  3510 00002B02 720D                <1> 	jb .1
  3511 00002B04 81E964000000        <1> 	sub ecx, 100
  3512 00002B0A FE06                <1> 	inc byte [esi]
  3513 00002B0C E95BFFFFFF          <1> 	jmp .lp
  3514 00002B11 46                  <1> .1:	inc esi
  3515 00002B12 81F90A000000        <1> 	cmp ecx, 10
  3516 00002B18 720D                <1> 	jb .0
  3517 00002B1A 81E90A000000        <1> 	sub ecx, 10
  3518 00002B20 FE06                <1> 	inc byte [esi]
  3519 00002B22 E945FFFFFF          <1> 	jmp .lp
  3520 00002B27 46                  <1> .0:	inc esi
  3521 00002B28 81F901000000        <1> 	cmp ecx, 1
  3522 00002B2E 720D                <1> 	jb .dn
  3523 00002B30 81E901000000        <1> 	sub ecx, 1
  3524 00002B36 FE06                <1> 	inc byte [esi]
  3525 00002B38 E92FFFFFFF          <1> 	jmp .lp
  3526                              <1> .dn:
  3527 00002B3D C3                  <1> 	ret
  3528                              <1> 
  3529                              <1> 	
  3530                              <1> 
  3531 00002B3E 00<rept>            <1> hexnumber times 8 db 0
  3532 00002B46 202000              <1> hexnumberend db "  ",0
  3533                              <1> 
  3534                              <1> converthex:
  3535                              <1> .clear:	;place to convert to in esi, end of buffer in edi number in ecx
  3536 00002B49 56                  <1> 	push esi
  3537 00002B4A B030                <1> 	mov al, "0"
  3538 00002B4C 39FE                <1> .clearlp: cmp esi, edi
  3539 00002B4E 7305                <1> 	jae .doneclear
  3540 00002B50 8806                <1> 	mov [esi], al
  3541 00002B52 46                  <1> 	inc esi
  3542 00002B53 EBF7                <1> 	jmp .clearlp
  3543                              <1> .doneclear:
  3544 00002B55 81EE02000000        <1> 	sub esi, 2
  3545 00002B5B 89C8                <1> 	mov eax, ecx
  3546                              <1> .loop:
  3547 00002B5D 30FF                <1> 	xor bh, bh
  3548 00002B5F 88C3                <1> 	mov bl, al
  3549 00002B61 66C1E304            <1> 	shl bx, 4
  3550 00002B65 C0EB04              <1> 	shr bl, 4
  3551 00002B68 86DF                <1> 	xchg bl, bh ;they are backwards
  3552 00002B6A 80C330              <1> 	add bl, 48
  3553 00002B6D 80FB39              <1> 	cmp bl, "9"
  3554 00002B70 7609                <1> 	jbe .goodbl
  3555 00002B72 80EB30              <1> 	sub bl, 48
  3556 00002B75 80EB0A              <1> 	sub bl, 0xA
  3557 00002B78 80C341              <1> 	add bl, "A"
  3558                              <1> .goodbl:
  3559 00002B7B 80C730              <1> 	add bh, 48
  3560 00002B7E 80FF39              <1> 	cmp bh, "9"
  3561 00002B81 7609                <1> 	jbe .goodbh
  3562 00002B83 80EF30              <1> 	sub bh, 48
  3563 00002B86 80EF0A              <1> 	sub bh, 0xA
  3564 00002B89 80C741              <1> 	add bh, "A"
  3565                              <1> .goodbh:
  3566 00002B8C C1E808              <1> 	shr eax, 8
  3567 00002B8F 66891E              <1> 	mov [esi], bx
  3568 00002B92 81EE02000000        <1> 	sub esi, 2
  3569 00002B98 3B3424              <1> 	cmp esi, [esp]
  3570 00002B9B 7207                <1> 	jb .done
  3571 00002B9D 3D00000000          <1> 	cmp eax, 0
  3572 00002BA2 75B9                <1> 	jne .loop
  3573                              <1> .done:
  3574 00002BA4 5E                  <1> 	pop esi
  3575 00002BA5 C3                  <1> 	ret
  3576                              <1> 	
  3577                              <1> 	
  3578 00002BA6 00                  <1> smallhex db 0
  3579 00002BA7 01                  <1> firsthexshown db 1
  3580                              <1> showhexsmall:
  3581 00002BA8 C605[A62B0000]01    <1> 	mov byte [smallhex], 1
  3582 00002BAF E808000000          <1> 	call showhex
  3583 00002BB4 C605[A62B0000]00    <1> 	mov byte [smallhex], 0
  3584 00002BBB C3                  <1> 	ret
  3585                              <1> showhex:
  3586 00002BBC 60                  <1> 	pusha
  3587 00002BBD BE[3E2B0000]        <1> 	mov esi, hexnumber
  3588 00002BC2 BF[462B0000]        <1> 	mov edi, hexnumberend
  3589 00002BC7 E87DFFFFFF          <1> 	call converthex
  3590 00002BCC 803D[A72B0000]01    <1> 	cmp byte [firsthexshown], 1
  3591 00002BD3 7503                <1> 	jne .show
  3592 00002BD5 6631D2              <1> 	xor dx, dx
  3593                              <1> .show:
  3594 00002BD8 803D[A72B0000]03    <1> 	cmp byte [firsthexshown], 3
  3595 00002BDF 750A                <1> 	jne .nonewhexline
  3596 00002BE1 BE[D04B0000]        <1> 	mov esi, line
  3597 00002BE6 E811EFFFFF          <1> 	call print
  3598                              <1> .nonewhexline:
  3599 00002BEB 803D[A72B0000]04    <1> 	cmp byte [firsthexshown], 4
  3600 00002BF2 7527                <1> 	jne .notab
  3601 00002BF4 B1A0                <1> 	mov cl, 160
  3602 00002BF6 28D1                <1> 	sub cl, dl
  3603 00002BF8 C0E905              <1> 	shr cl, 5
  3604 00002BFB C0E105              <1> 	shl cl, 5
  3605 00002BFE 80F900              <1> 	cmp cl, 0
  3606 00002C01 750F                <1> 	jne .nonewline
  3607 00002C03 BE[D04B0000]        <1> 	mov esi, line
  3608 00002C08 E8EFEEFFFF          <1> 	call print
  3609 00002C0D E909000000          <1> 	jmp .notab
  3610                              <1> .nonewline:
  3611 00002C12 80C20F              <1> 	add dl, 15
  3612 00002C15 C0EA04              <1> 	shr dl, 4
  3613 00002C18 C0E204              <1> 	shl dl, 4
  3614                              <1> .notab:
  3615 00002C1B BE[3E2B0000]        <1> 	mov esi, hexnumber
  3616 00002C20 803D[A62B0000]01    <1> 	cmp byte [smallhex],1
  3617 00002C27 7506                <1> 	jne .nosmall
  3618 00002C29 81C606000000        <1> 	add esi, 6
  3619                              <1> .nosmall:
  3620 00002C2F 803D[A72B0000]05    <1> 	cmp byte [firsthexshown], 5
  3621 00002C36 750A                <1> 	jne .noquiet
  3622 00002C38 E8ADEEFFFF          <1> 	call printquiet
  3623 00002C3D E918000000          <1> 	jmp .donequiet
  3624                              <1> .noquiet:
  3625 00002C42 803D[A72B0000]06    <1> 	cmp byte [firsthexshown], 6
  3626 00002C49 750A                <1> 	jne .normal
  3627 00002C4B E88EEEFFFF          <1> 	call printhighlight
  3628 00002C50 E905000000          <1> 	jmp .donequiet
  3629                              <1> .normal:
  3630 00002C55 E8A2EEFFFF          <1> 	call print
  3631                              <1> .donequiet:
  3632 00002C5A 803D[A72B0000]02    <1> 	cmp byte [firsthexshown], 2
  3633 00002C61 750A                <1> 	jne .shown
  3634 00002C63 BE[D04B0000]        <1> 	mov esi, line
  3635 00002C68 E88FEEFFFF          <1> 	call print
  3636                              <1> .shown:
  3637 00002C6D C605[A72B0000]00    <1> 	mov byte [firsthexshown], 0
  3638 00002C74 61                  <1> 	popa
  3639 00002C75 C3                  <1> 	ret
  3640                              <1> 
  3641                              <1> 
  3642 00002C76 303030303030303030- <1> decnumber db "00000000000000"
  3643 00002C7F 3030303030          <1>
  3644 00002C84 2000                <1> decnumberend: db " ",0
  3645                              <1> 
  3646                              <1> showdec: ;;same as showhex, just uses decimal conversion
  3647 00002C86 60                  <1> 	pusha
  3648 00002C87 BF[762C0000]        <1> 	mov edi, decnumber
  3649 00002C8C BE[842C0000]        <1> 	mov esi, decnumberend
  3650                              <1> .clear:
  3651 00002C91 C60730              <1> 	mov byte [edi], '0'
  3652 00002C94 47                  <1> 	inc edi
  3653 00002C95 39F7                <1> 	cmp edi, esi
  3654 00002C97 72F8                <1> 	jb .clear
  3655 00002C99 BF[762C0000]        <1> 	mov edi, decnumber
  3656 00002C9E E8C6FDFFFF          <1> 	call convert
  3657 00002CA3 803D[A72B0000]01    <1> 	cmp byte [firsthexshown], 1
  3658 00002CAA 7503                <1> 	jne .show
  3659 00002CAC 6631D2              <1> 	xor dx, dx
  3660                              <1> .show:
  3661 00002CAF 803D[A72B0000]03    <1> 	cmp byte [firsthexshown], 3
  3662 00002CB6 750A                <1> 	jne .nonewdecline
  3663 00002CB8 BE[D04B0000]        <1> 	mov esi, line
  3664 00002CBD E83AEEFFFF          <1> 	call print
  3665                              <1> .nonewdecline:
  3666 00002CC2 803D[A72B0000]04    <1> 	cmp byte [firsthexshown], 4
  3667 00002CC9 7527                <1> 	jne .notab
  3668 00002CCB B1A0                <1> 	mov cl, 160
  3669 00002CCD 28D1                <1> 	sub cl, dl
  3670 00002CCF C0E905              <1> 	shr cl, 5
  3671 00002CD2 C0E105              <1> 	shl cl, 5
  3672 00002CD5 80F900              <1> 	cmp cl, 0
  3673 00002CD8 750F                <1> 	jne .nonewline
  3674 00002CDA BE[D04B0000]        <1> 	mov esi, line
  3675 00002CDF E818EEFFFF          <1> 	call print
  3676 00002CE4 E909000000          <1> 	jmp .notab
  3677                              <1> .nonewline:
  3678 00002CE9 80C20F              <1> 	add dl, 15
  3679 00002CEC C0EA04              <1> 	shr dl, 4
  3680 00002CEF C0E204              <1> 	shl dl, 4
  3681                              <1> .notab:
  3682 00002CF2 BE[762C0000]        <1> 	mov esi, decnumber
  3683 00002CF7 4E                  <1> 	dec esi
  3684                              <1> .sifind:
  3685 00002CF8 46                  <1> 	inc esi
  3686 00002CF9 803E30              <1> 	cmp byte [esi], '0'
  3687 00002CFC 74FA                <1> 	je .sifind
  3688 00002CFE E8F9EDFFFF          <1> 	call print
  3689 00002D03 803D[A72B0000]02    <1> 	cmp byte [firsthexshown], 2
  3690 00002D0A 750A                <1> 	jne .shown
  3691 00002D0C BE[D04B0000]        <1> 	mov esi, line
  3692 00002D11 E8E6EDFFFF          <1> 	call print
  3693                              <1> .shown:
  3694 00002D16 C605[A72B0000]00    <1> 	mov byte [firsthexshown], 0
  3695 00002D1D 61                  <1> 	popa
  3696 00002D1E C3                  <1> 	ret
  3697                              <1> 	
  3698                              <1> cnvrthextxt:
  3699 00002D1F 31C9                <1> 	xor ecx, ecx
  3700 00002D21 31C0                <1> 	xor eax, eax
  3701 00002D23 31D2                <1> 	xor edx, edx
  3702 00002D25 31DB                <1> 	xor ebx, ebx
  3703 00002D27 4E                  <1> 	dec esi
  3704                              <1> .end:
  3705 00002D28 46                  <1> 	inc esi
  3706 00002D29 8A06                <1> 	mov al, [esi]
  3707 00002D2B 3C00                <1> 	cmp al, 0
  3708 00002D2D 75F9                <1> 	jne .end
  3709                              <1> .loop:
  3710 00002D2F 4E                  <1> 	dec esi
  3711 00002D30 8A06                <1> 	mov al, [esi]
  3712 00002D32 3C41                <1> 	cmp al, "A"
  3713 00002D34 7328                <1> 	jae .char
  3714 00002D36 2C30                <1> 	sub al, 48
  3715 00002D38 3C10                <1> 	cmp al, 16
  3716 00002D3A 7721                <1> 	ja .done
  3717                              <1> .donechar:
  3718 00002D3C 81FA00000000        <1> 	cmp edx, 0
  3719 00002D42 740E                <1> 	je .noshl
  3720 00002D44 89D3                <1> 	mov ebx, edx
  3721                              <1> .shl:
  3722 00002D46 C1E004              <1> 	shl eax, 4
  3723 00002D49 4B                  <1> 	dec ebx
  3724 00002D4A 81FB00000000        <1> 	cmp ebx, 0
  3725 00002D50 75F4                <1> 	jne .shl
  3726                              <1> .noshl:
  3727 00002D52 42                  <1> 	inc edx
  3728 00002D53 01C1                <1> 	add ecx, eax
  3729 00002D55 81FA08000000        <1> 	cmp edx, 8
  3730 00002D5B 72D2                <1> 	jb .loop
  3731                              <1> .done:
  3732 00002D5D C3                  <1> 	ret
  3733                              <1> .char:
  3734 00002D5E 3C46                <1> 	cmp al, "F"
  3735 00002D60 77FB                <1> 	ja .done
  3736 00002D62 2C41                <1> 	sub al, "A"
  3737 00002D64 040A                <1> 	add al, 0xA
  3738 00002D66 EBD4                <1> 	jmp .donechar
  3739                              <1> 	
  3740                              <1> 	
  3741                              <1> cnvrttxt: 
  3742 00002D68 31C9                <1> 	xor ecx, ecx
  3743 00002D6A 31C0                <1> 	xor eax, eax
  3744 00002D6C 31D2                <1> 	xor edx, edx
  3745 00002D6E 31DB                <1> 	xor ebx, ebx
  3746 00002D70 4E                  <1> 	dec esi
  3747                              <1> .lp:
  3748 00002D71 46                  <1> 	inc esi
  3749 00002D72 8A06                <1> 	mov al, [esi]
  3750 00002D74 3C00                <1> 	cmp al, 0
  3751 00002D76 75F9                <1> 	jne .lp
  3752 00002D78 4E                  <1> 	dec esi
  3753 00002D79 8A06                <1> 	mov al, [esi]
  3754 00002D7B 3C2E                <1> 	cmp al, '.'
  3755 00002D7D 7503                <1> 	jne .dot
  3756 00002D7F 46                  <1> 	inc esi
  3757 00002D80 EBEF                <1> 	jmp .lp
  3758                              <1> .dot:
  3759 00002D82 3C20                <1> 	cmp al, ' '
  3760 00002D84 7404                <1> 	je .zero
  3761 00002D86 3C30                <1> 	cmp al, '0'
  3762 00002D88 7504                <1> 	jne .txtlp
  3763                              <1> .zero: 
  3764 00002D8A 39FE                <1> 		cmp esi, edi
  3765 00002D8C 7458                <1> 		je .done
  3766                              <1> .txtlp:
  3767 00002D8E 31C0                <1> 	xor eax, eax
  3768 00002D90 8A06                <1> 	mov al, [esi]
  3769 00002D92 3C3D                <1> 	cmp al, '='
  3770 00002D94 7450                <1> 	je .done
  3771 00002D96 3C30                <1> 	cmp al, 48
  3772 00002D98 724C                <1> 	jb .done
  3773 00002D9A 3C23                <1> 	cmp al, '#'
  3774 00002D9C 7448                <1> 	je .done
  3775 00002D9E 39FE                <1> 	cmp esi, edi
  3776 00002DA0 7244                <1> 	jb .done
  3777 00002DA2 81F900000000        <1> 	cmp ecx, 0
  3778 00002DA8 7708                <1> 	ja .exp
  3779 00002DAA 2C30                <1> .noexp:	sub al, 48
  3780 00002DAC 01C2                <1> 	add edx, eax
  3781 00002DAE 4E                  <1> 	dec esi
  3782 00002DAF 41                  <1> 	inc ecx
  3783 00002DB0 EBDC                <1> 	jmp .txtlp
  3784 00002DB2 81F900000000        <1> .exp:	cmp ecx, 0
  3785 00002DB8 74F0                <1> 	je .noexp
  3786 00002DBA 2C30                <1> 	sub al, 48
  3787 00002DBC 51                  <1> 	push ecx
  3788 00002DBD 89C3                <1> .expmul:	mov ebx, eax
  3789 00002DBF 01D8                <1> 	add eax, ebx
  3790 00002DC1 01D8                <1> 	add eax, ebx
  3791 00002DC3 01D8                <1> 	add eax, ebx
  3792 00002DC5 01D8                <1> 	add eax, ebx
  3793 00002DC7 01D8                <1> 	add eax, ebx
  3794 00002DC9 01D8                <1> 	add eax, ebx
  3795 00002DCB 01D8                <1> 	add eax, ebx
  3796 00002DCD 01D8                <1> 	add eax, ebx
  3797 00002DCF 01D8                <1> 	add eax, ebx
  3798 00002DD1 81E901000000        <1> 	sub ecx, 1
  3799 00002DD7 81F900000000        <1> 	cmp ecx, 0
  3800 00002DDD 77DE                <1> 	ja .expmul
  3801 00002DDF 01C2                <1> 	add edx, eax
  3802 00002DE1 59                  <1> 	pop ecx
  3803 00002DE2 4E                  <1> 	dec esi
  3804 00002DE3 41                  <1> 	inc ecx
  3805 00002DE4 EBA8                <1> 	jmp .txtlp
  3806 00002DE6 89D1                <1> .done: mov ecx, edx
  3807 00002DE8 C3                  <1> 	ret
  3808                                      %include "source/programs.asm"
  3809 00002DE9 FF2C                <1> filetypes db 255,44
  3810                              <1> progstart:		;programs start here
  3811                              <1> indexfiles:
  3812 00002DEB BE[EB2D0000]        <1> 	mov esi, progstart
  3813 00002DF0 BB[CE6F0000]        <1> 	mov ebx, fileindex
  3814 00002DF5 BF[EB2D0000]        <1> 	mov edi, progstart
  3815 00002DFA 81EF02000000        <1> 	sub edi, 2
  3816                              <1> indexloop:
  3817 00002E00 668B0E              <1> 	mov cx, [esi]
  3818                              <1> 	indexloop2:
  3819 00002E03 663B0F              <1> 		cmp cx, [edi]
  3820 00002E06 7424                <1> 		je indexloop2done
  3821 00002E08 81EF02000000        <1> 		sub edi, 2
  3822 00002E0E 81FF[E92D0000]      <1> 		cmp edi, filetypes
  3823 00002E14 73ED                <1> 		jae indexloop2
  3824 00002E16 BF[EB2D0000]        <1> 	mov edi, progstart
  3825 00002E1B 81EF02000000        <1> 	sub edi, 2
  3826 00002E21 46                  <1> 	inc esi
  3827 00002E22 81FE[E7420000]      <1> 	cmp esi, batchprogend
  3828 00002E28 734E                <1> 	jae indexloopdone
  3829 00002E2A EBD4                <1> 	jmp indexloop
  3830                              <1> indexloop2done:
  3831 00002E2C 66890B              <1> 	mov [ebx], cx
  3832 00002E2F 81C302000000        <1> 	add ebx, 2
  3833 00002E35 81C602000000        <1> 	add esi, 2
  3834                              <1> 	nameindex:
  3835 00002E3B 8A0E                <1> 		mov cl, [esi]
  3836 00002E3D 80F900              <1> 		cmp cl, 0
  3837 00002E40 7406                <1> 		je nameindexdone
  3838 00002E42 880B                <1> 		mov [ebx], cl
  3839 00002E44 46                  <1> 		inc esi
  3840 00002E45 43                  <1> 		inc ebx
  3841 00002E46 EBF3                <1> 		jmp nameindex
  3842                              <1> 	nameindexdone:
  3843 00002E48 43                  <1> 		inc ebx
  3844 00002E49 66C7030000          <1> 		mov word [ebx], 0
  3845 00002E4E 81C302000000        <1> 		add ebx, 2
  3846 00002E54 46                  <1> 		inc esi
  3847 00002E55 8933                <1> 		mov [ebx], esi
  3848 00002E57 81C304000000        <1> 		add ebx, 4
  3849 00002E5D 66C7030000          <1> 		mov word [ebx], 0
  3850 00002E62 81C302000000        <1> 		add ebx, 2
  3851 00002E68 81FB[CE730000]      <1> 		cmp ebx, fileindexend
  3852 00002E6E 7308                <1> 		jae indexloopdone
  3853 00002E70 81C601000000        <1> 		add esi, 1
  3854 00002E76 EB88                <1> 		jmp indexloop
  3855 00002E78 C605[802E0000]01    <1> indexloopdone: 	mov byte [indexdone], 1
  3856 00002E7F C3                  <1> 		ret
  3857                              <1> 
  3858 00002E80 00                  <1> indexdone db 0
  3859                              <1> %include 'source/programs/_comment.asm' ;#
  3860 00002E81 FF2C2300            <2> 	db 255,44,"#",0	;this lets you rem stuff
  3861 00002E85 C3                  <2> 	ret 
  3862                              <1> %include 'source/programs/_math.asm' ;!
  3863 00002E86 FF2C2100            <2> db 255,44,"!",0
  3864                              <2> 	num:	
  3865 00002E8A E8C5FBFFFF          <2> 		call clearbuffer
  3866 00002E8F C605[10310000]00    <2> 		mov byte [decimal], 0
  3867 00002E96 C605[11310000]00    <2> 		mov byte [decimal2], 0
  3868 00002E9D 8B35[95290000]      <2> 		mov esi, [currentcommandloc]
  3869 00002EA3 31C0                <2> 		xor eax, eax
  3870 00002EA5 31C9                <2> 		xor ecx, ecx
  3871 00002EA7 31DB                <2> 		xor ebx, ebx
  3872 00002EA9 8A06                <2> 	num2:	mov al, [esi]
  3873 00002EAB 3C2B                <2> 		cmp al, '+'
  3874 00002EAD 741B                <2> 		je operatorfound
  3875 00002EAF 3C2D                <2> 		cmp al, '-'
  3876 00002EB1 7417                <2> 		je operatorfound
  3877 00002EB3 3C2A                <2> 		cmp al, '*'
  3878 00002EB5 7413                <2> 		je operatorfound
  3879 00002EB7 3C2F                <2> 		cmp al, '/'
  3880 00002EB9 740F                <2> 		je operatorfound
  3881 00002EBB 3C5E                <2> 		cmp al, '^'
  3882 00002EBD 740B                <2> 		je operatorfound
  3883 00002EBF 46                  <2> 		inc esi
  3884 00002EC0 3C00                <2> 		cmp al, 0
  3885 00002EC2 0F8420F8FFFF        <2> 		je near nwcmd
  3886 00002EC8 EBDF                <2> 		jmp num2
  3887 00002ECA 50                  <2> 	operatorfound: push eax
  3888 00002ECB 30E4                <2> 		xor ah, ah
  3889 00002ECD 8826                <2> 		mov [esi], ah
  3890 00002ECF 89F7                <2> 		mov edi, esi
  3891 00002ED1 46                  <2> 		inc esi
  3892 00002ED2 8A06                <2> 		mov al, [esi]
  3893 00002ED4 3C25                <2> 		cmp al, '%'
  3894 00002ED6 0F8462000000        <2> 		je near resultnum1
  3895                              <2> 	varnum2: 
  3896 00002EDC 57                  <2> 		push edi
  3897 00002EDD E8A4000000          <2> 		call checkdecimal
  3898 00002EE2 5F                  <2> 		pop edi
  3899 00002EE3 E880FEFFFF          <2> 		call cnvrttxt
  3900                              <2> 	vrnm2:
  3901 00002EE8 89CB                <2> 		mov ebx, ecx
  3902 00002EEA 53                  <2> 		push ebx
  3903 00002EEB E864FBFFFF          <2> 		call clearbuffer
  3904 00002EF0 8B35[95290000]      <2> 		mov esi, [currentcommandloc]
  3905 00002EF6 89F7                <2> 		mov edi, esi
  3906 00002EF8 46                  <2> 		inc esi
  3907 00002EF9 8A06                <2> 		mov al, [esi]
  3908 00002EFB 3C25                <2> 		cmp al, '%'
  3909 00002EFD 0F844F000000        <2> 		je near resultnum2
  3910                              <2> 	varnum4: 
  3911 00002F03 57                  <2> 		push edi
  3912 00002F04 E869000000          <2> 		call checkdecimal2
  3913 00002F09 5F                  <2> 		pop edi
  3914 00002F0A E859FEFFFF          <2> 		call cnvrttxt
  3915                              <2> 	vrnm4:
  3916 00002F0F 5B                  <2> 		pop ebx
  3917 00002F10 58                  <2> 		pop eax
  3918 00002F11 3C2B                <2> 		cmp al, '+'
  3919 00002F13 0F849B000000        <2> 		je near plusnum
  3920 00002F19 3C2D                <2> 		cmp al, '-'
  3921 00002F1B 0F849F000000        <2> 		je near subnum
  3922 00002F21 3C2A                <2> 		cmp al, '*'
  3923 00002F23 0F84A3000000        <2> 		je near mulnum
  3924 00002F29 3C2F                <2> 		cmp al, '/'
  3925 00002F2B 0F84B1000000        <2> 		je near divnum
  3926 00002F31 3C5E                <2> 		cmp al, '^'
  3927 00002F33 0F84CE000000        <2> 		je near expnum
  3928 00002F39 E9AAF7FFFF          <2> 		jmp nwcmd
  3929                              <2> 	resultnum1:
  3930 00002F3E 8A0D[12310000]      <2> 		mov cl, [decimalresult]
  3931 00002F44 880D[10310000]      <2> 		mov [decimal], cl
  3932 00002F4A 8B0D[13310000]      <2> 		mov ecx, [result]
  3933 00002F50 EB96                <2> 		jmp vrnm2
  3934                              <2> 	resultnum2:
  3935 00002F52 8A0D[10310000]      <2> 		mov cl, [decimal]
  3936 00002F58 880D[11310000]      <2> 		mov [decimal2], cl
  3937 00002F5E 8A0D[12310000]      <2> 		mov cl, [decimalresult]
  3938 00002F64 880D[10310000]      <2> 		mov [decimal], cl
  3939 00002F6A 8B0D[13310000]      <2> 		mov ecx, [result]
  3940 00002F70 EB9D                <2> 		jmp vrnm4
  3941                              <2> 	checkdecimal2:
  3942 00002F72 8A25[10310000]      <2> 		mov ah, [decimal]
  3943 00002F78 8825[11310000]      <2> 		mov [decimal2], ah
  3944 00002F7E 30E4                <2> 		xor ah, ah
  3945 00002F80 8825[10310000]      <2> 		mov [decimal], ah
  3946                              <2> 	checkdecimal:
  3947 00002F86 89F7                <2> 		mov edi, esi
  3948                              <2> 	chkdec1:
  3949 00002F88 8A07                <2> 		mov al, [edi]
  3950 00002F8A 3C2E                <2> 		cmp al, '.'
  3951 00002F8C 0F840B000000        <2> 		je near fnddec
  3952 00002F92 3C00                <2> 		cmp al, 0
  3953 00002F94 0F8419000000        <2> 		je near nodecimal
  3954 00002F9A 47                  <2> 		inc edi
  3955 00002F9B EBEB                <2> 		jmp chkdec1
  3956                              <2> 	fnddec:
  3957 00002F9D 8A4701              <2> 		mov al, [edi + 1]
  3958 00002FA0 8807                <2> 		mov [edi], al
  3959 00002FA2 3C00                <2> 		cmp al, 0
  3960 00002FA4 0F8409000000        <2> 		je near nodecimal
  3961 00002FAA FE05[10310000]      <2> 		inc byte [decimal]
  3962 00002FB0 47                  <2> 		inc edi
  3963 00002FB1 EBEA                <2> 		jmp fnddec
  3964                              <2> 	nodecimal:
  3965 00002FB3 C3                  <2> 		ret
  3966                              <2> 	plusnum:
  3967 00002FB4 E815010000          <2> 		call decaddfix
  3968 00002FB9 01D9                <2> 		add ecx, ebx
  3969 00002FBB E98A000000          <2> 		jmp retnum
  3970                              <2> 	subnum:
  3971 00002FC0 E809010000          <2> 		call decaddfix
  3972 00002FC5 29D9                <2> 		sub ecx, ebx
  3973 00002FC7 E97E000000          <2> 		jmp retnum
  3974                              <2> 	mulnum:
  3975 00002FCC A0[11310000]        <2> 		mov al, [decimal2]
  3976 00002FD1 0005[10310000]      <2> 		add [decimal], al
  3977 00002FD7 89C8                <2> 		mov eax, ecx
  3978 00002FD9 F7E3                <2> 		mul ebx
  3979 00002FDB 89C1                <2> 		mov ecx, eax
  3980 00002FDD E968000000          <2> 		jmp retnum
  3981                              <2> 	divnum:
  3982 00002FE2 E8E7000000          <2> 		call decaddfix
  3983 00002FE7 30C0                <2> 		xor al, al
  3984 00002FE9 A2[10310000]        <2> 		mov [decimal], al
  3985 00002FEE 31D2                <2> 		xor edx, edx
  3986 00002FF0 89C8                <2> 		mov eax, ecx
  3987 00002FF2 81FB00000000        <2> 		cmp ebx, 0
  3988 00002FF8 0F844C000000        <2> 		je near retnum
  3989 00002FFE F7F3                <2> 		div ebx
  3990 00003000 89C1                <2> 		mov ecx, eax
  3991 00003002 E943000000          <2> 		jmp retnum
  3992                              <2> 	expnum:
  3993 00003007 8A15[10310000]      <2> 		mov dl, [decimal]
  3994 0000300D 8815[11310000]      <2> 		mov [decimal2], dl
  3995 00003013 31D2                <2> 		xor edx, edx
  3996 00003015 89C8                <2> 		mov eax, ecx
  3997 00003017 89D9                <2> 		mov ecx, ebx
  3998 00003019 89C3                <2> 		mov ebx, eax
  3999 0000301B 81F900000000        <2> 		cmp ecx, 0
  4000 00003021 7422                <2> 		je noexpnum
  4001 00003023 49                  <2> 		dec ecx
  4002 00003024 81F900000000        <2> 		cmp ecx, 0
  4003 0000302A 7412                <2> 		je noexpnumlp
  4004 0000302C F7E3                <2> 	expnumlp: mul ebx
  4005 0000302E 8A15[11310000]      <2> 		mov dl, [decimal2]
  4006 00003034 0015[10310000]      <2> 		add [decimal], dl
  4007 0000303A 31D2                <2> 		xor edx, edx
  4008 0000303C E2EE                <2> 		loop expnumlp
  4009                              <2> 	noexpnumlp:
  4010 0000303E 89C1                <2> 		mov ecx, eax
  4011 00003040 E905000000          <2> 		jmp retnum
  4012                              <2> 	noexpnum:
  4013 00003045 B901000000          <2> 		mov ecx, 1
  4014                              <2> 	retnum: 
  4015 0000304A BE[628E0000]        <2> 		mov esi, numbuf
  4016 0000304F 890D[13310000]      <2> 		mov [result], ecx
  4017 00003055 E80FFAFFFF          <2> 		call convert
  4018 0000305A BE[628E0000]        <2> 		mov esi, numbuf
  4019 0000305F 8A25[10310000]      <2> 		mov ah, [decimal]
  4020 00003065 8825[12310000]      <2> 		mov [decimalresult], ah
  4021 0000306B 80FC00              <2> 		cmp ah, 0
  4022 0000306E 0F8425000000        <2> 		je near noputdecimal
  4023                              <2> 	putdecimal:
  4024 00003074 4E                  <2> 		dec esi
  4025 00003075 FECC                <2> 		dec ah
  4026 00003077 80FC00              <2> 		cmp ah, 0
  4027 0000307A 0F87F4FFFFFF        <2> 		ja near putdecimal
  4028 00003080 4E                  <2> 		dec esi
  4029 00003081 8A06                <2> 		mov al, [esi]
  4030 00003083 C6062E              <2> 		mov byte [esi], '.'
  4031                              <2> 	decputloop:
  4032 00003086 4E                  <2> 		dec esi
  4033 00003087 8A26                <2> 		mov ah, [esi]
  4034 00003089 8806                <2> 		mov [esi], al
  4035 0000308B 88E0                <2> 		mov al, ah
  4036 0000308D 81FE[4E8E0000]      <2> 		cmp esi, buf2
  4037 00003093 0F87EDFFFFFF        <2> 		ja near decputloop
  4038                              <2> 	noputdecimal:
  4039 00003099 BE[4E8E0000]        <2> 		mov esi, buf2
  4040 0000309E E809000000          <2> 		call chkadd
  4041 000030A3 E940F6FFFF          <2> 		jmp nwcmd
  4042 000030A8 00000000            <2> edxnumbuf dw 0,0
  4043 000030AC 8A06                <2> 	chkadd: mov al, [esi]
  4044 000030AE 3C30                <2> 		cmp al, '0'
  4045 000030B0 750C                <2> 		jne dnadd
  4046 000030B2 46                  <2> 		inc esi
  4047 000030B3 81FE[628E0000]      <2> 		cmp esi, numbuf
  4048 000030B9 7402                <2> 		je dnaddm1
  4049 000030BB EBEF                <2> 		jmp chkadd
  4050 000030BD 4E                  <2> 	dnaddm1: dec esi
  4051 000030BE E839EAFFFF          <2> 	dnadd:	call print
  4052 000030C3 BE[D04B0000]        <2> 		mov esi, line
  4053 000030C8 E82FEAFFFF          <2> 		call print
  4054 000030CD C3                  <2> 		ret
  4055                              <2> 		
  4056                              <2> 	decaddfix:
  4057 000030CE A0[11310000]        <2> 		mov al, [decimal2]
  4058 000030D3 8A25[10310000]      <2> 		mov ah, [decimal]
  4059 000030D9 38E0                <2> 		cmp al, ah
  4060 000030DB 7432                <2> 		je gooddecadd
  4061 000030DD 38E0                <2> 		cmp al, ah
  4062 000030DF 721A                <2> 		jb lowdecadd
  4063                              <2> 	highdecadd:
  4064 000030E1 FEC4                <2> 		inc ah
  4065 000030E3 89CA                <2> 		mov edx, ecx
  4066 000030E5 C1E103              <2> 		shl ecx, 3
  4067 000030E8 01D1                <2> 		add ecx, edx
  4068 000030EA 01D1                <2> 		add ecx, edx
  4069 000030EC 38E0                <2> 		cmp al, ah
  4070 000030EE 77F1                <2> 		ja highdecadd
  4071 000030F0 8825[10310000]      <2> 		mov [decimal], ah
  4072 000030F6 E914000000          <2> 		jmp gooddecadd
  4073                              <2> 	lowdecadd:
  4074 000030FB FEC0                <2> 		inc al
  4075 000030FD 89DA                <2> 		mov edx, ebx
  4076 000030FF C1E303              <2> 		shl ebx, 3
  4077 00003102 01D3                <2> 		add ebx, edx
  4078 00003104 01D3                <2> 		add ebx, edx
  4079 00003106 38E0                <2> 		cmp al, ah
  4080 00003108 72F1                <2> 		jb lowdecadd
  4081 0000310A A2[10310000]        <2> 		mov [decimal], al
  4082                              <2> 	gooddecadd:
  4083 0000310F C3                  <2> 		ret
  4084                              <2> 		
  4085 00003110 00                  <2> decimal db 0
  4086 00003111 00                  <2> decimal2 db 0
  4087 00003112 00                  <2> decimalresult db 0
  4088 00003113 00000000            <2> result dd 0
  4089                              <1> %include 'source/programs/_variables.asm' ;% and $
  4090 00003117 FF2C2500            <2> db 255,44,"%",0
  4091                              <2> 	ans:
  4092 0000311B BE[4E8E0000]        <2> 		mov esi, buf2
  4093 00003120 E887FFFFFF          <2> 		call chkadd
  4094 00003125 C3                  <2> 		ret
  4095                              <2> 		
  4096 00003126 FF2C2400            <2> db 255,44,"$",0
  4097 0000312A 8B35[95290000]      <2> var: mov esi, [currentcommandloc]
  4098 00003130 BB[4E760000]        <2> 	mov ebx, variables
  4099 00003135 8A06                <2> lkeq:	mov al, [esi]
  4100 00003137 3C3D                <2> 	cmp al, '='
  4101 00003139 741B                <2> 	je eqfnd	;is there an '=' sign?
  4102 0000313B 3C00                <2> 	cmp al, 0
  4103 0000313D 7403                <2> 	je echovars
  4104 0000313F 46                  <2> 	inc esi
  4105 00003140 EBF3                <2> 	jmp lkeq
  4106 00003142 BE[4E760000]        <2> echovars: mov esi, variables
  4107 00003147 BB[4E860000]        <2> 	mov ebx, varend
  4108 0000314C B105                <2> 	mov cl, 5
  4109 0000314E B504                <2> 	mov ch, 4
  4110 00003150 E89EF8FFFF          <2> 	call array
  4111 00003155 C3                  <2> 	ret
  4112 00003156 46                  <2> eqfnd:	inc esi
  4113 00003157 8A06                <2> 	mov al, [esi]
  4114 00003159 3C00                <2> 	cmp al, 0
  4115 0000315B 7410                <2> 	je readvar
  4116 0000315D 8B35[95290000]      <2> 	mov esi, [currentcommandloc]
  4117 00003163 BB[4E760000]        <2> 	mov ebx, variables
  4118 00003168 E919000000          <2> 	jmp seek
  4119                              <2> readvar:
  4120 0000316D B00A                <2> 	mov al, 10
  4121 0000316F 66BB0700            <2> 	mov bx, 7
  4122 00003173 C605[491F0000]00    <2> 	mov byte [commandedit], 0
  4123 0000317A BF[4E8E0000]        <2> 	mov edi, buftxtend
  4124 0000317F E864EAFFFF          <2> 	call rdprint
  4125 00003184 EBA4                <2> 	jmp var
  4126 00003186 668B03              <2> seek:	mov ax, [ebx]
  4127 00003189 B105                <2> 	mov cl, 5
  4128 0000318B B504                <2> 	mov ch, 4
  4129 0000318D 663D0000            <2> 	cmp ax, 0
  4130 00003191 0F845B000000        <2> 	je near save
  4131 00003197 6639C8              <2> 	cmp ax, cx
  4132 0000319A 7403                <2> 	je skfnd
  4133 0000319C 43                  <2> 	inc ebx
  4134 0000319D EBE7                <2> 	jmp seek
  4135 0000319F 8B35[95290000]      <2> skfnd:	mov esi, [currentcommandloc]
  4136 000031A5 46                  <2> 	inc esi
  4137 000031A6 81C302000000        <2> 	add ebx, 2
  4138 000031AC 89DF                <2> 	mov edi, ebx
  4139 000031AE B13D                <2> 	mov cl, '='
  4140 000031B0 E81FF8FFFF          <2> 	call cndtest
  4141 000031B5 3C01                <2> 	cmp al, 1	
  4142 000031B7 7418                <2> 	je varfnd
  4143 000031B9 89FB                <2> 	mov ebx, edi
  4144 000031BB 8B35[95290000]      <2> 	mov esi, [currentcommandloc]
  4145 000031C1 668B03              <2> 	mov ax, [ebx]
  4146 000031C4 663D0000            <2> 	cmp ax, 0
  4147 000031C8 0F8424000000        <2> 	je near save
  4148 000031CE 43                  <2> 	inc ebx
  4149 000031CF EBB5                <2> 	jmp seek
  4150 000031D1 8A03                <2> varfnd:	mov al, [ebx]
  4151 000031D3 3C04                <2> 	cmp al, 4
  4152 000031D5 7404                <2> 	je save2
  4153 000031D7 4B                  <2> 	dec ebx
  4154 000031D8 4E                  <2> 	dec esi
  4155 000031D9 EBF6                <2> 	jmp varfnd
  4156 000031DB 4B                  <2> save2:	dec ebx
  4157 000031DC 4E                  <2> 	dec esi
  4158 000031DD 8A03                <2> 	mov al, [ebx]
  4159 000031DF 3C05                <2> 	cmp al, 5
  4160 000031E1 7402                <2> 	je remove
  4161 000031E3 EBEC                <2> 	jmp varfnd
  4162 000031E5 8A03                <2> remove: mov al, [ebx]
  4163 000031E7 3C00                <2> 	cmp al, 0
  4164 000031E9 749B                <2> 	je seek
  4165 000031EB 30C0                <2> 	xor al, al
  4166 000031ED 8803                <2> 	mov [ebx], al
  4167 000031EF 43                  <2> 	inc ebx
  4168 000031F0 EBF3                <2> 	jmp remove	;do not need for now-need defragmentation
  4169 000031F2 8B35[95290000]      <2> save:	mov esi, [currentcommandloc]
  4170 000031F8 43                  <2> 	inc ebx
  4171 000031F9 B005                <2> 	mov al, 5
  4172 000031FB B404                <2> 	mov ah, 4
  4173 000031FD 668903              <2> 	mov [ebx], ax
  4174 00003200 43                  <2> 	inc ebx
  4175 00003201 43                  <2> svhere:	inc ebx
  4176 00003202 46                  <2> 	inc esi
  4177 00003203 8A06                <2> 	mov al, [esi]
  4178 00003205 3C00                <2> 	cmp al, 0
  4179 00003207 0F844A000000        <2> 	je near svdone
  4180 0000320D 3C25                <2> 	cmp al, '%'
  4181 0000320F 7404                <2> 	je ans2
  4182 00003211 8803                <2> 	mov [ebx], al	
  4183 00003213 EBEC                <2> 	jmp svhere
  4184 00003215 56                  <2> ans2:	push esi
  4185 00003216 BE[4E8E0000]        <2> 	mov esi, buf2
  4186 0000321B E823000000          <2> 	call ansfnd
  4187 00003220 E803000000          <2> 	call anscp
  4188 00003225 5E                  <2> 	pop esi
  4189 00003226 EBD9                <2> 	jmp svhere
  4190 00003228 8A06                <2> anscp:	mov al, [esi]
  4191 0000322A 8803                <2> 	mov [ebx], al
  4192 0000322C 81FE[628E0000]      <2> 	cmp esi, numbuf
  4193 00003232 74CD                <2> 	je svhere
  4194 00003234 3C00                <2> 	cmp al, 0
  4195 00003236 74C9                <2> 	je svhere
  4196 00003238 43                  <2> 	inc ebx
  4197 00003239 46                  <2> 	inc esi
  4198 0000323A EBEC                <2> 	jmp anscp
  4199 0000323C 5E                  <2> ansnf:	pop esi
  4200 0000323D 8A06                <2> 	mov al, [esi]
  4201 0000323F 8803                <2> 	mov [ebx], al
  4202 00003241 EBBE                <2> 	jmp svhere
  4203 00003243 46                  <2> ansfnd:	inc esi
  4204 00003244 81FE[618E0000]      <2> 	cmp esi, numbuf - 1
  4205 0000324A 740A                <2> 	je fndans
  4206 0000324C 8A06                <2> 	mov al, [esi]
  4207 0000324E 3C00                <2> 	cmp al, 0
  4208 00003250 74EA                <2> 	je ansnf
  4209 00003252 3C30                <2> 	cmp al, '0'
  4210 00003254 74ED                <2> 	je ansfnd
  4211                              <2> fndans:
  4212 00003256 C3                  <2> 	ret
  4213 00003257 30C0                <2> svdone:	xor al, al
  4214 00003259 8803                <2> 	mov [ebx], al
  4215 0000325B C3                  <2> 	ret
  4216                              <1> %include 'source/programs/_run.asm' ;./
  4217                              <2> 
  4218 0000325C 7F454C46            <2> 	elfstart db 0x7F,"ELF"
  4219 00003260 FF2C2E2F00          <2> 	db 255,44,"./",0
  4220                              <2> rundiskprog:
  4221 00003265 8B3D[95290000]      <2> 	mov edi, [currentcommandloc]
  4222 0000326B 81C702000000        <2> 	add edi, 2
  4223 00003271 BE00004000          <2> 	mov esi, 0x400000
  4224 00003276 E868170000          <2> 	call loadfile
  4225 0000327B 81FA94010000        <2> 	cmp edx, 404
  4226 00003281 746A                <2> 	je noprogfound
  4227 00003283 BB00004000          <2> 	mov ebx, 0x400000
  4228 00003288 A1[5C320000]        <2> 	mov eax, [elfstart]
  4229 0000328D 3903                <2> 	cmp [ebx], eax
  4230 0000328F 0F8437000000        <2> 	je near runelf
  4231 00003295 66813B4558          <2> 	cmp word [ebx], "EX"
  4232 0000329A 7577                <2> 	jne progbatchfound
  4233 0000329C 81C302000000        <2> 	add ebx, 2
  4234 000032A2 8B3D[95290000]      <2> 	mov edi, [currentcommandloc]
  4235 000032A8 81C702000000        <2> 	add edi, 2
  4236                              <2> findspaceprog:
  4237 000032AE 8A07                <2> 	mov al, [edi]
  4238 000032B0 47                  <2> 	inc edi
  4239 000032B1 3C20                <2> 	cmp al, " "
  4240 000032B3 75F9                <2> 	jne findspaceprog
  4241                              <2> findnonspaceprog:
  4242 000032B5 8A07                <2> 	mov al, [edi]
  4243 000032B7 47                  <2> 	inc edi
  4244 000032B8 3C20                <2> 	cmp al, " "
  4245 000032BA 74F9                <2> 	je findnonspaceprog
  4246 000032BC 4F                  <2> 	dec edi
  4247 000032BD 8925[CE730000]      <2> 	mov [previousstack], esp
  4248 000032C3 FFD3                <2> 	call ebx
  4249 000032C5 8B25[CE730000]      <2> 	mov esp, [previousstack]
  4250 000032CB C3                  <2> 	ret
  4251                              <2> runelf:
  4252 000032CC 8B3D[95290000]      <2> 	mov edi, [currentcommandloc]
  4253 000032D2 81C702000000        <2> 	add edi, 2
  4254 000032D8 81C380000000        <2> 	add ebx, 0x80
  4255 000032DE 8925[CE730000]      <2> 	mov [previousstack], esp
  4256 000032E4 FFD3                <2> 	call ebx
  4257 000032E6 8B25[CE730000]      <2> 	mov esp, [previousstack]
  4258 000032EC C3                  <2> 	ret
  4259                              <2> noprogfound:
  4260 000032ED BE[8F4B0000]        <2> 	mov esi, notfound1
  4261 000032F2 E805E8FFFF          <2> 	call print
  4262 000032F7 8B35[95290000]      <2> 	mov esi, [currentcommandloc]
  4263 000032FD 81C602000000        <2> 	add esi, 2
  4264 00003303 E8F4E7FFFF          <2> 	call print
  4265 00003308 BE[974B0000]        <2> 	mov esi, notfound2
  4266 0000330D E8EAE7FFFF          <2> 	call print
  4267 00003312 C3                  <2> 	ret
  4268                              <2> progbatchfound:
  4269 00003313 BF00004000          <2> 		mov edi, 0x400000
  4270 00003318 C605[48760000]01    <2> 		mov byte [BATCHISON], 1
  4271                              <2> 	batchrunloop:
  4272 0000331F E8A1F3FFFF          <2> 		call buftxtclear
  4273 00003324 BE[4E8A0000]        <2> 		mov esi, buftxt
  4274 00003329 8935[95290000]      <2> 		mov [currentcommandloc], esi
  4275                              <2> 	batchrunloop2:
  4276 0000332F B10A                <2> 		mov cl, 10
  4277 00003331 B50D                <2> 		mov ch, 13
  4278 00003333 380F                <2> 		cmp [edi], cl
  4279 00003335 0F8419000000        <2> 		je near nxtbatchrunline
  4280 0000333B 382F                <2> 		cmp [edi], ch
  4281 0000333D 0F8411000000        <2> 		je near nxtbatchrunline
  4282 00003343 803F00              <2> 		cmp byte [edi], 0
  4283 00003346 0F8408000000        <2> 		je near nxtbatchrunline
  4284 0000334C 8A07                <2> 		mov al, [edi]
  4285 0000334E 8806                <2> 		mov [esi], al
  4286 00003350 46                  <2> 		inc esi
  4287 00003351 47                  <2> 		inc edi
  4288 00003352 EBDB                <2> 		jmp batchrunloop2
  4289                              <2> 	nxtbatchrunline:
  4290 00003354 47                  <2> 		inc edi
  4291 00003355 380F                <2> 		cmp [edi], cl
  4292 00003357 74FB                <2> 		je nxtbatchrunline
  4293 00003359 382F                <2> 		cmp [edi], ch
  4294 0000335B 74F7                <2> 		je nxtbatchrunline
  4295 0000335D 893D[BB330000]      <2> 		mov [batchedi], edi
  4296 00003363 893D[44760000]      <2> 		mov [BATCHPOS], edi
  4297 00003369 C60600              <2> 		mov byte [esi], 0
  4298 0000336C BE[4E8A0000]        <2> 		mov esi, buftxt
  4299 00003371 803E00              <2> 		cmp byte [esi], 0
  4300 00003374 0F8439000000        <2> 		je near nobatchfoundrun
  4301 0000337A 31DB                <2> 		xor ebx, ebx
  4302 0000337C 8A1D[DF750000]      <2> 		mov bl, [IFON]
  4303 00003382 80FB00              <2> 		cmp bl, 0
  4304 00003385 0F8534000000        <2> 		jne near iftestbatch
  4305                              <2> 	doneiftest:
  4306 0000338B 803D[91340000]00    <2> 		cmp byte [runnextline], 0
  4307 00003392 0F8405000000        <2> 		je near noruniftest
  4308 00003398 E822F5FFFF          <2> 		call run
  4309                              <2> 	noruniftest:
  4310 0000339D C605[91340000]01    <2> 		mov byte [runnextline], 1
  4311 000033A4 8B3D[BB330000]      <2> 		mov edi, [batchedi]
  4312 000033AA 803F00              <2> 		cmp byte [edi], 0
  4313 000033AD 0F856CFFFFFF        <2> 		jne near batchrunloop
  4314                              <2> 	nobatchfoundrun:
  4315 000033B3 C605[48760000]00    <2> 		mov byte [BATCHISON], 0
  4316 000033BA C3                  <2> 		ret
  4317                              <2> 	
  4318 000033BB 00000000            <2> batchedi dd 0	
  4319                              <2> 	
  4320                              <2> 	iftestbatch:
  4321 000033BF BE[E0750000]        <2> 		mov esi, IFTRUE
  4322 000033C4 01DE                <2> 		add esi, ebx
  4323 000033C6 803E00              <2> 		cmp byte [esi], 0
  4324 000033C9 0F85BCFFFFFF        <2> 		jne near doneiftest
  4325 000033CF 881D[92340000]      <2> 		mov [iffalsebuf], bl
  4326 000033D5 803D[49760000]01    <2> 		cmp byte [LOOPON], 1
  4327 000033DC 0F8513000000        <2> 		jne near fifindbatch
  4328 000033E2 E938FFFFFF          <2> 		jmp batchrunloop
  4329                              <2> 	elsetestbatch:
  4330 000033E7 C60601              <2> 		mov byte [esi], 1
  4331 000033EA 81C705000000        <2> 		add edi, 5
  4332 000033F0 E92AFFFFFF          <2> 		jmp batchrunloop
  4333                              <2> 	fifindbatch:
  4334 000033F5 66B96966            <2> 		mov cx, "if"
  4335 000033F9 66B86669            <2> 		mov ax, "fi"
  4336 000033FD 663907              <2> 		cmp [edi], ax
  4337 00003400 0F8424000000        <2> 		je near fifoundbatch
  4338 00003406 66390F              <2> 		cmp [edi], cx
  4339 00003409 0F8465000000        <2> 		je near iffoundbatch
  4340 0000340F 803F00              <2> 		cmp byte [edi], 0
  4341 00003412 0F8412000000        <2> 		je near fifoundbatch
  4342 00003418 B8656C7365          <2> 		mov eax, "else"
  4343 0000341D 3907                <2> 		cmp [edi], eax
  4344 0000341F 0F84C2FFFFFF        <2> 		je near elsetestbatch
  4345 00003425 E973FFFFFF          <2> 		jmp noruniftest
  4346                              <2> 	fifoundbatch:
  4347 0000342A 81C702000000        <2> 		add edi, 2
  4348 00003430 B00A                <2> 		mov al, 10
  4349 00003432 3807                <2> 		cmp [edi], al
  4350 00003434 0F840B000000        <2> 		je near goodfibatch
  4351 0000343A 803F00              <2> 		cmp byte [edi], 0
  4352 0000343D 0F8470FFFFFF        <2> 		je near nobatchfoundrun
  4353 00003443 EBB0                <2> 		jmp fifindbatch
  4354                              <2> 	goodfibatch:
  4355 00003445 B001                <2> 		mov al, 1
  4356 00003447 2805[DF750000]      <2> 		sub [IFON], al 
  4357 0000344D A0[DF750000]        <2> 		mov al, [IFON]
  4358 00003452 8A1D[92340000]      <2> 		mov bl, [iffalsebuf]
  4359 00003458 38D8                <2> 		cmp al, bl
  4360 0000345A 7799                <2> 		ja fifindbatch
  4361 0000345C 8B35[95290000]      <2> 		mov esi, [currentcommandloc]
  4362 00003462 81EF02000000        <2> 		sub edi, 2
  4363 00003468 C605[91340000]00    <2> 		mov byte [runnextline], 0
  4364 0000346F E9ABFEFFFF          <2> 		jmp batchrunloop
  4365                              <2> 	iffoundbatch:
  4366 00003474 B020                <2> 		mov al, ' '
  4367 00003476 81C702000000        <2> 		add edi, 2
  4368 0000347C 3807                <2> 		cmp [edi], al
  4369 0000347E 0F8571FFFFFF        <2> 		jne near fifindbatch
  4370 00003484 B001                <2> 		mov al, 1
  4371 00003486 0005[DF750000]      <2> 		add [IFON], al
  4372 0000348C E964FFFFFF          <2> 		jmp fifindbatch
  4373                              <2> 		
  4374                              <2> 		
  4375 00003491 01                  <2> runnextline db 1
  4376 00003492 00                  <2> iffalsebuf db 0
  4377                              <2> 
  4378 00003493 C3                  <2> notbatch: ret 
  4379                              <1> 
  4380                              <1> %ifdef rtl8139.included
  4381                              <1> 	%include 'source/programs/arp.asm'
  4382                              <1> %endif
  4383                              <1> 
  4384                              <1> %include 'source/programs/batch.asm'
  4385 00003494 FF2C626174636800    <2> db 255,44,"batch",0
  4386                              <2> 	batchst: 
  4387 0000349C 8B3D[95290000]      <2> 		mov edi, [currentcommandloc]
  4388 000034A2 81C706000000        <2> 		add edi, 6
  4389 000034A8 803F00              <2> 		cmp byte [edi], 0
  4390 000034AB 0F846D000000        <2> 		je near nonamefound
  4391 000034B1 BE00004000          <2> 		mov esi, 0x400000
  4392 000034B6 E828150000          <2> 		call loadfile
  4393 000034BB 89D0                <2> 		mov eax, edx
  4394 000034BD 3D94010000          <2> 		cmp eax, 404
  4395 000034C2 7465                <2> 		je goodbatchname
  4396 000034C4 BE[CF340000]        <2> 		mov esi, badbatchname
  4397 000034C9 E82EE6FFFF          <2> 		call print
  4398 000034CE C3                  <2> 		ret
  4399 000034CF 546869732066696C65- <2> 		badbatchname db "This file already exists!",10,0
  4400 000034D8 20616C726561647920- <2>
  4401 000034E1 657869737473210A00  <2>
  4402 000034EA 596F75206861766520- <2> 		namenotfoundbatch db "You have to type a name after the command.",10,0
  4403 000034F3 746F20747970652061- <2>
  4404 000034FC 206E616D6520616674- <2>
  4405 00003505 65722074686520636F- <2>
  4406 0000350E 6D6D616E642E0A00    <2>
  4407 00003516 00000000            <2> 		esicache3 dd 0
  4408 0000351A 00000000            <2> 		esicache2 dd 0
  4409                              <2> 	nonamefound:
  4410 0000351E BE[EA340000]        <2> 		mov esi, namenotfoundbatch
  4411 00003523 E8D4E5FFFF          <2> 		call print
  4412 00003528 C3                  <2> 		ret
  4413                              <2> 	goodbatchname:
  4414 00003529 BE00004000          <2> 		mov esi, 0x400000
  4415                              <2> 	batchcreate:
  4416 0000352E 8935[16350000]      <2> 		mov [esicache3], esi
  4417 00003534 BF00008000          <2> 		mov edi, 0x800000
  4418 00003539 B00A                <2> 		mov al, 10
  4419 0000353B B307                <2> 		mov bl, 7
  4420 0000353D B404                <2> 		mov ah, 4
  4421 0000353F CD30                <2> 		int 30h
  4422 00003541 8935[1A350000]      <2> 		mov [esicache2], esi
  4423 00003547 8A0E                <2> 		mov cl, [esi]
  4424 00003549 8B35[16350000]      <2> 		mov esi, [esicache3]
  4425 0000354F BB[83350000]        <2> 		mov ebx, exitword
  4426 00003554 E87BF4FFFF          <2> 		call cndtest
  4427 00003559 3C01                <2> 		cmp al, 1
  4428 0000355B 7411                <2> 		je endbatchcreate
  4429 0000355D 3C02                <2> 		cmp al, 2
  4430 0000355F 740D                <2> 		je endbatchcreate
  4431 00003561 8B35[1A350000]      <2> 		mov esi, [esicache2]
  4432 00003567 B00A                <2> 		mov al, 10
  4433 00003569 8806                <2> 		mov [esi], al
  4434 0000356B 46                  <2> 		inc esi
  4435 0000356C EBC0                <2> 		jmp batchcreate
  4436                              <2> 	endbatchcreate:
  4437 0000356E 8B35[16350000]      <2> 		mov esi, [esicache3]
  4438 00003574 31C0                <2> 		xor eax, eax
  4439 00003576 8806                <2> 		mov [esi], al
  4440 00003578 BE00004000          <2> 		mov esi, 0x400000
  4441 0000357D E87AE5FFFF          <2> 		call print
  4442 00003582 C3                  <2> 		ret
  4443                              <2> 	
  4444 00003583 5C7800              <2> 	exitword db "\x",0
  4445 00003586 54797065205C782074- <2> 	wordmsg db "Type \x to exit.",10,0
  4446 0000358F 6F20657869742E0A00  <2>
  4447                              <1> %include 'source/programs/beep.asm'
  4448 00003598 FF2C6265657000      <2> 	db 255,44,"beep",0
  4449 0000359F B8[C4350000]        <2> 	mov eax, beepstart
  4450 000035A4 A3[3B020000]        <2> 	mov [soundpos], eax
  4451 000035A9 B8[C8350000]        <2> 	mov eax, beepend
  4452 000035AE A3[3F020000]        <2> 	mov [soundendpos], eax
  4453 000035B3 C605[38020000]01    <2> 	mov byte [soundon], 1
  4454                              <2> waitforsoundendbeep:
  4455 000035BA A0[38020000]        <2> 	mov al, [soundon]
  4456 000035BF 3C00                <2> 	cmp al, 0
  4457 000035C1 75F7                <2> 	jne waitforsoundendbeep
  4458 000035C3 C3                  <2> 	ret
  4459                              <2> 	
  4460                              <2> beepstart:
  4461 000035C4 3200D111            <2> 	dw 50, 4561
  4462                              <2> beepend:
  4463                              <1> %include 'source/programs/cd.asm'
  4464 000035C8 FF2C636400          <2> db 255,44,"cd",0
  4465                              <2> cd:
  4466 000035CD 8B35[95290000]      <2> 	mov esi, [currentcommandloc]
  4467 000035D3 81C603000000        <2> 	add esi, 3
  4468 000035D9 8B3D[D6730000]      <2> 	mov edi, [currentfolderloc]
  4469 000035DF 893D[D2730000]      <2> 	mov [lastfolderloc], edi
  4470 000035E5 81C7[DA730000]      <2> 	add edi, currentfolder
  4471                              <2> 	;cmp word [esi], ".."
  4472                              <2> 	;je .moveup
  4473                              <2> .movedown:
  4474 000035EB 8A06                <2> 	mov al, [esi]
  4475 000035ED 8807                <2> 	mov [edi], al
  4476 000035EF 47                  <2> 	inc edi
  4477 000035F0 46                  <2> 	inc esi
  4478 000035F1 3C00                <2> 	cmp al, 0
  4479 000035F3 740A                <2> 	je .donecd
  4480 000035F5 81FF[DA750000]      <2> 	cmp edi, currentfolderend
  4481 000035FB 72EE                <2> 	jb .movedown
  4482 000035FD 30C0                <2> 	xor al, al
  4483                              <2> .donecd:
  4484 000035FF 4F                  <2> 	dec edi
  4485 00003600 C6072F              <2> 	mov byte [edi], '/'
  4486 00003603 47                  <2> 	inc edi
  4487 00003604 81EF[DA730000]      <2> 	sub edi, currentfolder
  4488 0000360A 893D[D6730000]      <2> 	mov [currentfolderloc], edi
  4489 00003610 C3                  <2> 	ret
  4490                              <2> ;.moveup:
  4491                              <2> ;	ret
  4492                              <1> %include 'source/programs/charmap.asm'
  4493 00003611 FF2C636861726D6170- <2> db 255,44,"charmap",0
  4494 0000361A 00                  <2>
  4495 0000361B 66BB0700            <2> 	mov bx, 7
  4496 0000361F B020                <2> 	mov al, " "
  4497 00003621 E8B0E9FFFF          <2> 	call prcharq
  4498 00003626 E8ABE9FFFF          <2> 	call prcharq
  4499 0000362B E8A6E9FFFF          <2> 	call prcharq
  4500 00003630 E8A1E9FFFF          <2> 	call prcharq
  4501 00003635 B030                <2> 	mov al, "0"
  4502                              <2> charmapnumprnt:
  4503 00003637 E89AE9FFFF          <2> 	call prcharq
  4504 0000363C FEC0                <2> 	inc al
  4505 0000363E 6650                <2> 	push ax
  4506 00003640 B020                <2> 	mov al, " "
  4507 00003642 E88FE9FFFF          <2> 	call prcharq
  4508 00003647 6658                <2> 	pop ax
  4509 00003649 3C39                <2> 	cmp al, "9"
  4510 0000364B 76EA                <2> 	jbe charmapnumprnt
  4511 0000364D B041                <2> 	mov al, "A"
  4512                              <2> charmapnumprnt2:
  4513 0000364F E882E9FFFF          <2> 	call prcharq
  4514 00003654 FEC0                <2> 	inc al
  4515 00003656 6650                <2> 	push ax
  4516 00003658 B020                <2> 	mov al, " "
  4517 0000365A E877E9FFFF          <2> 	call prcharq
  4518 0000365F 6658                <2> 	pop ax
  4519 00003661 3C47                <2> 	cmp al, "G"
  4520 00003663 72EA                <2> 	jb charmapnumprnt2
  4521                              <2> 	
  4522 00003665 BE[D04B0000]        <2> 	mov esi, line
  4523 0000366A E87BE4FFFF          <2> 	call printquiet
  4524 0000366F 6631C0              <2> 	xor ax, ax
  4525 00003672 88C1                <2> 	mov cl, al
  4526 00003674 E82FF5FFFF          <2> 	call showhexsmall
  4527 00003679 E955000000          <2> 	jmp charmapnocopy ;the first char is 0 which is unprintable
  4528                              <2> charmapcopy:
  4529 0000367E FEC0                <2> 	inc al
  4530 00003680 6650                <2> 	push ax
  4531 00003682 3C08                <2> 	cmp al, 8
  4532 00003684 744D                <2> 	je charmapnocopy
  4533 00003686 3C09                <2> 	cmp al, 9
  4534 00003688 7449                <2> 	je charmapnocopy
  4535 0000368A 3C0A                <2> 	cmp al, 10
  4536 0000368C 7445                <2> 	je charmapnocopy
  4537 0000368E 3C0D                <2> 	cmp al, 13
  4538 00003690 7441                <2> 	je charmapnocopy
  4539 00003692 3CFF                <2> 	cmp al, 255
  4540 00003694 743D                <2> 	je charmapnocopy
  4541 00003696 3C00                <2> 	cmp al, 0
  4542 00003698 7434                <2> 	je nomorecharmap
  4543 0000369A E837E9FFFF          <2> 	call prcharq
  4544 0000369F B020                <2> 	mov al, " "
  4545 000036A1 E830E9FFFF          <2> 	call prcharq
  4546 000036A6 6658                <2> 	pop ax
  4547                              <2> charmapcopycheck:
  4548 000036A8 FEC4                <2> 	inc ah
  4549 000036AA 80FC10              <2> 	cmp ah, 16
  4550 000036AD 72CF                <2> 	jb charmapcopy
  4551 000036AF 6650                <2> 	push ax
  4552 000036B1 BE[D04B0000]        <2> 	mov esi, line
  4553 000036B6 E82FE4FFFF          <2> 	call printquiet
  4554 000036BB 6658                <2> 	pop ax
  4555 000036BD 3CFF                <2> 	cmp al, 255
  4556 000036BF 740D                <2> 	je nomorecharmap
  4557 000036C1 88C1                <2> 	mov cl, al
  4558 000036C3 FEC1                <2> 	inc cl
  4559 000036C5 E8DEF4FFFF          <2> 	call showhexsmall
  4560 000036CA 30E4                <2> 	xor ah, ah
  4561 000036CC EBB0                <2> 	jmp charmapcopy
  4562                              <2> nomorecharmap:
  4563 000036CE E915F0FFFF          <2> 	jmp nwcmd
  4564                              <2> charmapnocopy:
  4565 000036D3 6650                <2> 	push ax
  4566 000036D5 B020                <2> 	mov al, " "
  4567 000036D7 E8FAE8FFFF          <2> 	call prcharq
  4568 000036DC E8F5E8FFFF          <2> 	call prcharq
  4569 000036E1 6658                <2> 	pop ax
  4570 000036E3 EBC3                <2> 	jmp charmapcopycheck
  4571                              <1> %include 'source/programs/clear.asm'
  4572 000036E5 FF2C636C65617200    <2> db 255,44,"clear",0
  4573 000036ED E870E4FFFF          <2> 		call clear
  4574 000036F2 C3                  <2> 		ret 
  4575                              <1> %include 'source/programs/cpuid.asm'
  4576 000036F3 FF2C637075696400    <2> db 255,44,"cpuid",0
  4577 000036FB 31C0                <2> 	xor eax, eax
  4578 000036FD 0FA2                <2> 	cpuid
  4579 000036FF 891D[50370000]      <2> 	mov [cpuidbuf], ebx
  4580 00003705 8915[54370000]      <2> 	mov [cpuidbuf + 4], edx
  4581 0000370B 890D[58370000]      <2> 	mov [cpuidbuf + 8], ecx
  4582 00003711 BE[50370000]        <2> 	mov esi, cpuidbuf
  4583 00003716 E8E1E3FFFF          <2> 	call print
  4584 0000371B BE[D04B0000]        <2> 	mov esi, line
  4585 00003720 E8D7E3FFFF          <2> 	call print
  4586 00003725 B801000000          <2> 	mov eax, 1
  4587 0000372A 0FA2                <2> 	cpuid
  4588 0000372C 89C1                <2> 	mov ecx, eax
  4589 0000372E C605[A72B0000]02    <2> 	mov byte [firsthexshown], 2
  4590 00003735 E882F4FFFF          <2> 	call showhex
  4591 0000373A B808000080          <2> 	mov eax, 0x80000008
  4592 0000373F 0FA2                <2> 	cpuid
  4593 00003741 89C1                <2> 	mov ecx, eax
  4594 00003743 C605[A72B0000]02    <2> 	mov byte [firsthexshown], 2
  4595 0000374A E86DF4FFFF          <2> 	call showhex
  4596 0000374F C3                  <2> 	ret
  4597                              <2> 	
  4598 00003750 00<rept>            <2> cpuidbuf times 13 db 0
  4599                              <2> cpuidvendorend:
  4600                              <1> %include 'source/programs/dos.asm'
  4601 0000375D FF2C646F7300        <2> db 255,44,"dos",0
  4602                              <2> dosrunner:
  4603 00003763 8925[CE730000]      <2> 	mov [previousstack], esp
  4604 00003769 8B3D[95290000]      <2> 	mov edi, [currentcommandloc]
  4605 0000376F 81C704000000        <2> 	add edi, 4
  4606 00003775 BE00014000          <2> 	mov esi,  0x100 + dosprogloc	;this should be the beginning of memory
  4607 0000377A E864120000          <2> 	call loadfile
  4608 0000377F 8B3D[95290000]      <2> 	mov edi, [currentcommandloc]
  4609 00003785 81C704000000        <2> 	add edi, 4
  4610 0000378B 81FA94010000        <2> 	cmp edx, 404
  4611 00003791 0F845E000000        <2> 	je near .noprogfound
  4612 00003797 BB81004000          <2> 	mov ebx, 0x81 + dosprogloc
  4613 0000379C 31C9                <2> 	xor ecx, ecx
  4614                              <2> .findparams:
  4615 0000379E 47                  <2> 	inc edi
  4616 0000379F 8A07                <2> 	mov al, [edi]
  4617 000037A1 3C20                <2> 	cmp al, " "
  4618 000037A3 75F9                <2> 	jne .findparams
  4619                              <2> .copyparams:
  4620 000037A5 8A07                <2> 	mov al, [edi]
  4621 000037A7 8803                <2> 	mov [ebx], al
  4622 000037A9 43                  <2> 	inc ebx
  4623 000037AA 47                  <2> 	inc edi
  4624 000037AB 41                  <2> 	inc ecx
  4625 000037AC 81FB00014000        <2> 	cmp ebx, 0x100 + dosprogloc
  4626 000037B2 7304                <2> 	jae .nomoreparams
  4627 000037B4 3C00                <2> 	cmp al, 0
  4628 000037B6 75ED                <2> 	jne .copyparams
  4629                              <2> .nomoreparams:
  4630 000037B8 880D80004000        <2> 	mov [0x80 + dosprogloc], cl
  4631 000037BE 66B85000            <2> 	mov ax, DOS_DATA_SEL
  4632 000037C2 8ED8                <2> 	mov ds, ax
  4633 000037C4 8EC0                <2> 	mov es, ax
  4634 000037C6 8EE0                <2> 	mov fs, ax
  4635 000037C8 8EE8                <2> 	mov gs, ax
  4636 000037CA 31C0                <2> 	xor eax, eax
  4637 000037CC 31DB                <2> 	xor ebx, ebx
  4638 000037CE 31C9                <2> 	xor ecx, ecx
  4639 000037D0 31D2                <2> 	xor edx, edx
  4640 000037D2 31FF                <2> 	xor edi, edi
  4641 000037D4 31F6                <2> 	xor esi, esi
  4642 000037D6 9A000100004800      <2> 	call DOS_CODE_SEL:0x100
  4643 000037DD 66BB3000            <2> 	mov bx, NEW_DATA_SEL
  4644 000037E1 6689DA              <2> 	mov dx, bx
  4645 000037E4 8EC3                <2> 	mov es, bx
  4646 000037E6 8EE3                <2> 	mov fs, bx
  4647 000037E8 66BB2000            <2> 	mov bx, SYS_DATA_SEL
  4648 000037EC 8EEB                <2> 	mov gs, bx
  4649 000037EE 8B25[CE730000]      <2> 	mov esp, [previousstack]
  4650 000037F4 C3                  <2> 	ret
  4651                              <2> .noprogfound:
  4652 000037F5 BE[8F4B0000]        <2> 	mov esi, notfound1
  4653 000037FA E8FDE2FFFF          <2> 	call print
  4654 000037FF 8B35[95290000]      <2> 	mov esi, [currentcommandloc]
  4655 00003805 81C604000000        <2> 	add esi, 4
  4656 0000380B E8ECE2FFFF          <2> 	call print
  4657 00003810 BE[974B0000]        <2> 	mov esi, notfound2
  4658 00003815 E8E2E2FFFF          <2> 	call print
  4659 0000381A C3                  <2> 	ret
  4660                              <2> 	
  4661                              <1> %include 'source/programs/dump.asm'
  4662 0000381B FF2C64756D7000      <2> db 255,44,"dump",0
  4663 00003822 8B35[95290000]      <2> 	mov esi, [currentcommandloc]
  4664 00003828 81C605000000        <2> 	add esi, 5
  4665 0000382E 31C9                <2> 	xor ecx, ecx
  4666 00003830 66B83078            <2> 	mov ax, "0x"
  4667 00003834 663906              <2> 	cmp [esi], ax
  4668 00003837 740A                <2> 	je dumphexin
  4669 00003839 E82AF5FFFF          <2> 	call cnvrttxt
  4670 0000383E E910000000          <2> 	jmp dumphexnow
  4671                              <2> dumphexin:
  4672 00003843 81C602000000        <2> 	add esi, 2
  4673 00003849 E8D1F4FFFF          <2> 	call cnvrthextxt
  4674 0000384E E900000000          <2> 	jmp dumphexnow
  4675                              <2> dumphexnow:
  4676 00003853 89CF                <2> 	mov edi, ecx
  4677 00003855 89FE                <2> 	mov esi, edi
  4678 00003857 81C680030000        <2> 	add esi, 896
  4679                              <2> dumphexloop:
  4680 0000385D 8B0F                <2> 	mov ecx, [edi]
  4681 0000385F C605[A72B0000]05    <2> 	mov byte [firsthexshown],5
  4682 00003866 E851F3FFFF          <2> 	call showhex
  4683 0000386B 81C704000000        <2> 	add edi, 4
  4684 00003871 39F7                <2> 	cmp edi, esi
  4685 00003873 72E8                <2> 	jb dumphexloop
  4686 00003875 E895EAFFFF          <2> 	call termcopy
  4687 0000387A C3                  <2> 	ret 
  4688                              <1> %include 'source/programs/echo.asm'
  4689                              <2> 
  4690 0000387B FF2C6563686F00      <2> db 255,44,"echo",0
  4691                              <2> 	echoprog:
  4692 00003882 8B35[95290000]      <2> 		mov esi, [currentcommandloc]
  4693 00003888 81C605000000        <2> 		add esi, 5
  4694 0000388E 8A06                <2> 		mov al, [esi]
  4695 00003890 E867E2FFFF          <2> 		call print
  4696 00003895 BE[D04B0000]        <2> 		mov esi, line
  4697 0000389A E85DE2FFFF          <2> 		call print
  4698 0000389F C3                  <2> 		ret
  4699 000038A0 BB[4E760000]        <2> 	echovr:	mov ebx, variables
  4700 000038A5 BF06000000          <2> 		mov edi, 6
  4701 000038AA E83C000000          <2> 		call nxtvrech
  4702 000038AF E954000000          <2> 		jmp prntvr2
  4703 000038B4 B13D                <2> 	echvar:	mov cl, '='
  4704 000038B6 43                  <2> 		inc ebx
  4705 000038B7 8A03                <2> 		mov al, [ebx]
  4706 000038B9 3C00                <2> 		cmp al, 0
  4707 000038BB 742E                <2> 		je nxtvrech
  4708 000038BD 3C3D                <2> 		cmp al, '='
  4709 000038BF 7422                <2> 		je nxtvrechb1
  4710 000038C1 8B35[95290000]      <2> 		mov esi, [currentcommandloc]
  4711 000038C7 01FE                <2> 		add esi, edi
  4712 000038C9 E806F1FFFF          <2> 		call cndtest
  4713 000038CE 3C02                <2> 		cmp al, 2
  4714 000038D0 7432                <2> 		je prntvr
  4715 000038D2 3C01                <2> 		cmp al, 1
  4716 000038D4 742E                <2> 		je prntvr
  4717 000038D6 8B35[95290000]      <2> 		mov esi, [currentcommandloc]
  4718 000038DC 01FE                <2> 		add esi, edi
  4719 000038DE E908000000          <2> 		jmp nxtvrech
  4720                              <2> 	nxtvrechb1:
  4721 000038E3 81EB02000000        <2> 		sub ebx, 2
  4722 000038E9 EBC9                <2> 		jmp echvar
  4723 000038EB 8A03                <2> 	nxtvrech: mov al, [ebx]
  4724 000038ED 3C05                <2> 		cmp al, 5
  4725 000038EF 740A                <2> 		je nxtvrec2
  4726 000038F1 43                  <2> 		inc ebx
  4727 000038F2 81FB[4E860000]      <2> 		cmp ebx, varend
  4728 000038F8 72F1                <2> 		jb nxtvrech
  4729 000038FA C3                  <2> 		ret
  4730 000038FB 43                  <2> 	nxtvrec2: inc ebx
  4731 000038FC 8A03                <2> 		mov al, [ebx]
  4732 000038FE 3C04                <2> 		cmp al, 4
  4733 00003900 74B2                <2> 		je echvar
  4734 00003902 EBE7                <2> 		jmp nxtvrech
  4735 00003904 43                  <2> 	prntvr: inc ebx
  4736 00003905 89DE                <2> 		mov esi, ebx
  4737 00003907 C3                  <2> 		ret
  4738 00003908 E8EFE1FFFF          <2> 	prntvr2: call print
  4739 0000390D BE[D04B0000]        <2> 		mov esi, line
  4740 00003912 E8E5E1FFFF          <2> 		call print
  4741 00003917 C3                  <2> 		ret 
  4742                              <1> %include 'source/programs/else.asm'
  4743 00003918 FF2C656C736500      <2> 	db 255,44,"else",0
  4744 0000391F 31C0                <2> elsecmd:	xor eax, eax
  4745 00003921 3805[48760000]      <2> 	cmp [BATCHISON], al
  4746 00003927 0F8466FBFFFF        <2> 	je near notbatch
  4747 0000392D A0[DF750000]        <2> 	mov al, [IFON]
  4748 00003932 BE[E0750000]        <2> 	mov esi, IFTRUE
  4749 00003937 01C6                <2> 	add esi, eax
  4750 00003939 8A06                <2> 	mov al, [esi]
  4751 0000393B 3401                <2> 	xor al, 1
  4752 0000393D 8806                <2> 	mov [esi], al
  4753 0000393F C3                  <2> 	ret 
  4754                              <1> %include 'source/programs/fi.asm'
  4755 00003940 FF2C666900          <2> 	db 255,44,"fi",0
  4756 00003945 30C0                <2> 	xor al, al
  4757 00003947 3805[48760000]      <2> 	cmp [BATCHISON], al
  4758 0000394D 0F8440FBFFFF        <2> 	je near notbatch
  4759 00003953 B001                <2> fi:	mov al, 1
  4760 00003955 2805[DF750000]      <2> 	sub [IFON],al
  4761 0000395B C3                  <2> 	ret 
  4762                              <1> %ifdef gui.included
  4763                              <1> 	%include 'source/programs/gui.asm'
  4764                              <1> %endif
  4765                              <1> %include 'source/programs/help.asm'
  4766 0000395C FF2C68656C7000      <2> db 255,44,"help",0
  4767                              <2> lscmd:	
  4768 00003963 B00D                <2> 		mov al, 13
  4769 00003965 E86CE6FFFF          <2> 		call prcharq
  4770 0000396A BE[EB2D0000]        <2> 		mov esi, progstart
  4771 0000396F BB[E7420000]        <2> 		mov ebx, progend
  4772 00003974 BE[CE6F0000]        <2> dir:	mov esi, fileindex
  4773 00003979 8A06                <2> 	dirnxt:	mov al, [esi]
  4774 0000397B 30E4                <2> 		xor ah, ah
  4775 0000397D 3CFF                <2> 		cmp al, 255
  4776 0000397F 7415                <2> 		je dirfnd
  4777 00003981 46                  <2> 		inc esi
  4778 00003982 81FE[CE730000]      <2> 		cmp esi,  fileindexend
  4779 00003988 7339                <2> 		jae dirdn
  4780 0000398A EBED                <2> 		jmp dirnxt
  4781                              <2> 	dirfnd3:
  4782 0000398C 46                  <2> 		inc esi
  4783 0000398D 81FE[CE730000]      <2> 		cmp esi, fileindexend
  4784 00003993 76E4                <2> 		jbe dirnxt
  4785 00003995 4E                  <2> 		dec esi
  4786 00003996 46                  <2> 	dirfnd:	inc esi
  4787 00003997 8A06                <2> 		mov al, [esi]
  4788 00003999 30E4                <2> 		xor ah, ah
  4789 0000399B 3C2C                <2> 		cmp al, 44
  4790 0000399D 740B                <2> 		je dirfnd2
  4791 0000399F 46                  <2> 		inc esi
  4792 000039A0 81FE[CE730000]      <2> 		cmp esi,  fileindexend
  4793 000039A6 731B                <2> 		jae dirdn
  4794 000039A8 EBCF                <2> 		jmp dirnxt
  4795 000039AA 46                  <2> 	dirfnd2: inc esi
  4796 000039AB E83AE1FFFF          <2> 		call printquiet
  4797 000039B0 56                  <2> 		push esi
  4798 000039B1 B009                <2> 		mov al, 9
  4799 000039B3 E81EE6FFFF          <2> 		call prcharq
  4800 000039B8 5E                  <2> 		pop esi
  4801 000039B9 81FE[CE730000]      <2> 		cmp esi,  fileindexend
  4802 000039BF 7302                <2> 		jae dirdn
  4803 000039C1 EBB6                <2> 		jmp dirnxt
  4804 000039C3 BE[D04B0000]        <2> 	dirdn:	mov esi, line
  4805 000039C8 E82FE1FFFF          <2> 			call print
  4806 000039CD C3                  <2> 			ret
  4807 000039CE 00                  <2> currentdir db 0
  4808                              <1> %include 'source/programs/if.asm'
  4809 000039CF FF2C696600          <2> 	db 255,44,"if",0
  4810 000039D4 30C0                <2> ifcmd:	xor al, al
  4811 000039D6 3805[48760000]      <2> 	cmp [BATCHISON], al
  4812 000039DC 0F84B1FAFFFF        <2> 	je near notbatch
  4813 000039E2 8B1D[95290000]      <2> 	mov ebx, [currentcommandloc]
  4814 000039E8 81C303000000        <2> 	add ebx, 3
  4815 000039EE 89DE                <2> 	mov esi, ebx
  4816 000039F0 8A06                <2> chkeqsn: mov al, [esi]
  4817 000039F2 3C00                <2> 	cmp al, 0
  4818 000039F4 0F8499FAFFFF        <2> 	je near notbatch
  4819 000039FA 3C3D                <2> 	cmp al, '='
  4820 000039FC 0F8403000000        <2> 	je near chkeqdn
  4821 00003A02 46                  <2> 	inc esi
  4822 00003A03 EBEB                <2> 	jmp chkeqsn
  4823 00003A05 B000                <2> chkeqdn: mov al, 0 
  4824 00003A07 8806                <2> 	mov [esi], al
  4825 00003A09 46                  <2> 	inc esi
  4826 00003A0A E88AEFFFFF          <2> 	call tester
  4827 00003A0F 3C01                <2> 	cmp al, 1
  4828 00003A11 0F8405000000        <2> 	je near trueif
  4829 00003A17 E91C000000          <2> 	jmp falseif
  4830 00003A1C 31C0                <2> trueif:	xor eax, eax
  4831 00003A1E A0[DF750000]        <2> 	mov al, [IFON]
  4832 00003A23 FEC0                <2> 	inc al
  4833 00003A25 A2[DF750000]        <2> 	mov [IFON], al
  4834 00003A2A 30E4                <2> 	xor ah, ah
  4835 00003A2C BE[E0750000]        <2> 	mov esi, IFTRUE
  4836 00003A31 01C6                <2> 	add esi, eax
  4837 00003A33 B401                <2> 	mov ah, 1
  4838 00003A35 8826                <2> 	mov [esi], ah
  4839 00003A37 C3                  <2> 	ret 
  4840 00003A38 31C0                <2> falseif: xor eax, eax
  4841 00003A3A A0[DF750000]        <2> 	mov al, [IFON]
  4842 00003A3F FEC0                <2> 	inc al
  4843 00003A41 A2[DF750000]        <2> 	mov [IFON], al
  4844 00003A46 30E4                <2> 	xor ah, ah
  4845 00003A48 BE[E0750000]        <2> 	mov esi, IFTRUE
  4846 00003A4D 01C6                <2> 	add esi, eax
  4847 00003A4F 30E4                <2> 	xor ah, ah
  4848 00003A51 8826                <2> 	mov [esi], ah
  4849 00003A53 C3                  <2> 	ret 
  4850                              <1> %include 'source/programs/keycode.asm'
  4851 00003A54 FF2C6B6579636F6465- <2> db 255,44,"keycode",0
  4852 00003A5D 00                  <2>
  4853                              <2> keycode:
  4854 00003A5E C605[B01F0000]00    <2> 	mov byte [trans], 0
  4855 00003A65 C605[824B0000]00    <2> 	mov byte [threadson], 0
  4856                              <2> %ifdef io.serial
  4857                              <2> .noserial:
  4858                              <2> 	hlt
  4859                              <2> 	mov dx, [serial.address]
  4860                              <2> 	in al, dx
  4861                              <2> 	cmp al, 0
  4862                              <2> 	je .noserial
  4863                              <2> 	mov cl, al
  4864                              <2> 	call showhexsmall
  4865                              <2> 	cmp al, 0x1B
  4866                              <2> 	jne .noserial
  4867                              <2> 	in al, dx
  4868                              <2> 	mov cl, al
  4869                              <2> 	call showhexsmall
  4870                              <2> 	cmp cl, 0x5B
  4871                              <2> 	je .noserial
  4872                              <2> 	ret
  4873                              <2> %else
  4874 00003A6C E846090000          <2> 	call getkey
  4875 00003A71 31C0                <2> 	xor eax, eax
  4876 00003A73 31C9                <2> 	xor ecx, ecx
  4877 00003A75 8A0D[97430000]      <2> 	mov cl, [specialkey]
  4878 00003A7B 80F900              <2> 	cmp cl, 0
  4879 00003A7E 0F8405000000        <2> 	je near .nospecialkeycode
  4880 00003A84 E81FF1FFFF          <2> 	call showhexsmall
  4881                              <2> .nospecialkeycode:
  4882 00003A89 66A1[AE1F0000]      <2> 	mov ax, [lastkey]
  4883 00003A8F 88E1                <2> 	mov cl, ah
  4884 00003A91 E812F1FFFF          <2> 	call showhexsmall
  4885 00003A96 80FC01              <2> 	cmp ah, 1
  4886 00003A99 75C3                <2> 	jne keycode
  4887 00003A9B C3                  <2> 	ret
  4888                              <2> %endif
  4889                              <1> %include 'source/programs/logout.asm'
  4890 00003A9C FF2C6C6F676F757400  <2> 	db 255,44,"logout",0
  4891 00003AA5 E985EAFFFF          <2> 	jmp os
  4892                              <1> %include 'source/programs/loop.asm'
  4893 00003AAA FF2C6C6F6F7000      <2> 	db 255,44,"loop",0
  4894 00003AB1 803D[49760000]00    <2> 	cmp byte [LOOPON], 0
  4895 00003AB8 0F8501000000        <2> 	jne near filoop
  4896 00003ABE C3                  <2> 	ret
  4897 00003ABF 8B35[4A760000]      <2> filoop: mov esi, [LOOPPOS]
  4898 00003AC5 FE0D[DF750000]      <2> 	dec byte [IFON]
  4899 00003ACB C605[49760000]00    <2> 	mov byte [LOOPON], 0
  4900 00003AD2 8935[44760000]      <2> 	mov [BATCHPOS], esi
  4901 00003AD8 8935[BB330000]      <2> 	mov [batchedi], esi
  4902 00003ADE C3                  <2> 	ret 
  4903                              <1> %include 'source/programs/ls.asm'
  4904 00003ADF FF2C6C7300          <2> db 255,44,"ls",0
  4905 00003AE4 BE[F55B0000]        <2> 		mov esi, diskfileindex
  4906                              <2> 	diskindexdir:
  4907 00003AE9 803E5F              <2> 		cmp byte [esi], '_'
  4908 00003AEC 7440                <2> 		je nextdiskindexdir
  4909 00003AEE E8F7DFFFFF          <2> 		call printquiet
  4910 00003AF3 56                  <2> 		push esi
  4911 00003AF4 BE[4E3B0000]        <2> 		mov esi, disktab
  4912 00003AF9 E8ECDFFFFF          <2> 		call printquiet
  4913 00003AFE 5E                  <2> 		pop esi
  4914 00003AFF 8B4E05              <2> 		mov ecx, [esi + 5]
  4915 00003B02 C605[A72B0000]05    <2> 		mov byte [firsthexshown], 5
  4916 00003B09 E878F1FFFF          <2> 		call showdec
  4917 00003B0E 56                  <2> 		push esi
  4918 00003B0F BE[D04B0000]        <2> 		mov esi, line
  4919 00003B14 E8D1DFFFFF          <2> 		call printquiet
  4920 00003B19 5E                  <2> 		pop esi
  4921 00003B1A 81C609000000        <2> 		add esi, 9
  4922 00003B20 81FE[885D0000]      <2> 		cmp esi, enddiskfileindex
  4923 00003B26 72C1                <2> 		jb diskindexdir
  4924 00003B28 E8E2E7FFFF          <2> 		call termcopy
  4925 00003B2D C3                  <2> 		ret
  4926                              <2> 	nextdiskindexdir:
  4927 00003B2E 46                  <2> 		inc esi
  4928 00003B2F 803E00              <2> 		cmp byte [esi], 0
  4929 00003B32 75FA                <2> 		jne nextdiskindexdir
  4930 00003B34 81C609000000        <2> 		add esi, 9
  4931 00003B3A 81FE[885D0000]      <2> 		cmp esi, enddiskfileindex
  4932 00003B40 72A7                <2> 		jb diskindexdir
  4933 00003B42 E8C8E7FFFF          <2> 		call termcopy
  4934 00003B47 C3                  <2> 		ret
  4935                              <2> 		
  4936 00003B48 4469736B2000        <2> 		diskmsg db "Disk ",0
  4937 00003B4E 0D09090900          <2> 		disktab db 13,9,9,9,0
  4938                              <1> %include 'source/programs/memory.asm'
  4939 00003B53 FF2C6D656D6F727900  <2> db 255,44,"memory",0
  4940 00003B5C BE[8E5D0000]        <2> 	mov esi, memlistbuf
  4941 00003B61 31FF                <2> 	xor edi, edi
  4942 00003B63 668B3D[CE5F0000]    <2> 	mov di, [memlistend]
  4943 00003B6A 01F7                <2> 	add edi, esi
  4944                              <2> printmemmap:
  4945 00003B6C 8B0E                <2> 	mov ecx, [esi]
  4946 00003B6E E849F0FFFF          <2> 	call showhex
  4947 00003B73 81C608000000        <2> 	add esi, 8
  4948 00003B79 8B0E                <2> 	mov ecx, [esi]
  4949 00003B7B E83CF0FFFF          <2> 	call showhex
  4950 00003B80 81C608000000        <2> 	add esi, 8
  4951 00003B86 8B0E                <2> 	mov ecx, [esi]
  4952 00003B88 E82FF0FFFF          <2> 	call showhex
  4953 00003B8D 81C608000000        <2> 	add esi, 8
  4954 00003B93 57                  <2> 	push edi
  4955 00003B94 56                  <2> 	push esi
  4956 00003B95 BE[D04B0000]        <2> 	mov esi, line
  4957 00003B9A E85DDFFFFF          <2> 	call print
  4958 00003B9F 5E                  <2> 	pop esi
  4959 00003BA0 5F                  <2> 	pop edi
  4960 00003BA1 39FE                <2> 	cmp esi, edi
  4961 00003BA3 72C7                <2> 	jb printmemmap
  4962 00003BA5 C3                  <2> 	ret
  4963                              <2> 	
  4964                              <1> %include 'source/programs/pci.asm'
  4965 00003BA6 FF2C70636900        <2> db 255,44,"pci",0
  4966 00003BAC E8C50B0000          <2> 	call pcidump
  4967 00003BB1 C3                  <2> 	ret 
  4968                              <1> %include 'source/programs/play.asm'
  4969 00003BB2 FF2C706C617900      <2> db 255,44,"play",0
  4970 00003BB9 E801000000          <2> 	call playsync
  4971 00003BBE C3                  <2> 	ret
  4972                              <2> playsync:
  4973 00003BBF 8B3D[95290000]      <2> 	mov edi, [currentcommandloc]
  4974 00003BC5 81C705000000        <2> 	add edi, 5
  4975 00003BCB BE00004000          <2> 	mov esi, 0x400000
  4976 00003BD0 E80E0E0000          <2> 	call loadfile
  4977 00003BD5 81FA94010000        <2> 	cmp edx, 404
  4978 00003BDB 7448                <2> 	je nosoundfound
  4979 00003BDD BB00004000          <2> 	mov ebx, 0x400000
  4980 00003BE2 817B0857415645      <2> 	cmp dword [ebx + 8], "WAVE"
  4981 00003BE9 0F8464000000        <2> 	je near wave_player
  4982 00003BEF 66813B534E          <2> 	cmp word [ebx], "SN"
  4983 00003BF4 752F                <2> 	jne nosoundfound
  4984 00003BF6 81C306000000        <2> 	add ebx, 6
  4985 00003BFC 891D[3B020000]      <2> 	mov [soundpos], ebx
  4986 00003C02 035BFC              <2> 	add ebx, [ebx - 4]
  4987 00003C05 891D[3F020000]      <2> 	mov [soundendpos], ebx
  4988 00003C0B 66C705[39020000]00- <2> 	mov word [soundrepititions], 0
  4989 00003C13 00                  <2>
  4990 00003C14 C605[38020000]01    <2> 	mov byte [soundon], 1
  4991                              <2> waitforsoundendplay:
  4992 00003C1B A0[38020000]        <2> 	mov al, [soundon]
  4993 00003C20 3C00                <2> 	cmp al, 0
  4994 00003C22 75F7                <2> 	jne waitforsoundendplay
  4995 00003C24 C3                  <2> 	ret
  4996                              <2> nosoundfound:
  4997 00003C25 BE[4B3C0000]        <2> 	mov esi, notfoundsound
  4998 00003C2A E8CDDEFFFF          <2> 	call print
  4999 00003C2F 8B35[95290000]      <2> 	mov esi, [currentcommandloc]
  5000 00003C35 81C605000000        <2> 	add esi, 5
  5001 00003C3B E8BCDEFFFF          <2> 	call print
  5002 00003C40 BE[974B0000]        <2> 	mov esi, notfound2
  5003 00003C45 E8B2DEFFFF          <2> 	call print
  5004 00003C4A C3                  <2> 	ret
  5005 00003C4B 536F756E64202200    <2> notfoundsound db "Sound ",34,0
  5006                              <2> 
  5007                              <2> %ifdef sound.included
  5008                              <2> sbplay:
  5009                              <2> 		mov esi, 0x400000
  5010                              <2> 		mov ebx, esi
  5011                              <2> 		add esi, 44
  5012                              <2> 		sub edi, esi
  5013                              <2> 		mov [Length1], di
  5014                              <2> 		shr edi, 16
  5015                              <2> 		mov [Length0], di
  5016                              <2> 		mov ecx, [ebx + 24]
  5017                              <2> 		mov [Freq], ecx
  5018                              <2> 		xor eax, eax
  5019                              <2> 		mov	edx, 0x400000 ;location of sound
  5020                              <2> 		add edx, 2048
  5021                              <2> 		add	eax,edx
  5022                              <2> 		xor ebx, ebx
  5023                              <2> 		mov bx, [Length1]
  5024                              <2> 		add ebx, eax
  5025                              <2> 		mov [NextMemLoc], ebx
  5026                              <2> 		mov	[MemLoc],eax
  5027                              <2> 		call DMAPlay
  5028                              <2> 		ret
  5029                              <2> 
  5030                              <2> wave_player:
  5031                              <2> 	cmp byte [SoundBlaster], 1
  5032                              <2> 	je near sbplay
  5033                              <2> 	mov esi, nosoundblaster
  5034                              <2> 	call print
  5035                              <2> 	ret
  5036                              <2> %else
  5037                              <2> 	wave_player:
  5038 00003C53 BE[5E3C0000]        <2> 		mov esi, nosoundblaster
  5039 00003C58 E89FDEFFFF          <2> 		call print
  5040 00003C5D C3                  <2> 		ret
  5041                              <2> %endif
  5042 00003C5E 4E6F20536F756E6420- <2> nosoundblaster db "No Sound Blaster detected.",10,0
  5043 00003C67 426C61737465722064- <2>
  5044 00003C70 657465637465642E0A- <2>
  5045 00003C79 00                  <2>
  5046                              <1> %include 'source/programs/pwd.asm'
  5047 00003C7A FF2C70776400        <2> db 255,44,"pwd",0
  5048 00003C80 BE[DA730000]        <2> 	mov esi, currentfolder
  5049 00003C85 E860DEFFFF          <2> 	call printquiet
  5050 00003C8A BE[D04B0000]        <2> 	mov esi, line
  5051 00003C8F E868DEFFFF          <2> 	call print
  5052 00003C94 C3                  <2> 	ret
  5053                              <2> 	
  5054                              <1> %include 'source/programs/reboot.asm'
  5055 00003C95 FF2C7265626F6F7400  <2> 	db 255,44,"reboot",0
  5056 00003C9E 0F011D[A83C0000]    <2> 		lidt [idtreboot]
  5057 00003CA5 CD00                <2> 		int 0
  5058 00003CA7 F4                  <2> 		hlt
  5059                              <2> 	
  5060 00003CA8 0000                <2> 	idtreboot dw 0
  5061 00003CAA 00000000            <2> 			  dd 0
  5062                              <2> 
  5063                              <2> 	coldboot:
  5064 00003CAE 66B84000            <2> 		MOV AX, 0040h
  5065 00003CB2 8EC0                <2> 		MOV ES, AX
  5066 00003CB4 2666C7057200000000- <2> 		MOV WORD [ES:00072h], 0h
  5067 00003CBD 00                  <2>
  5068 00003CBE EA00000000FFFF      <2> 		JMP 0FFFFh:0000h
  5069 00003CC5 CF                  <2> 		IRET
  5070                              <2> 
  5071                              <2> 	warmboot:
  5072 00003CC6 66B84000            <2> 		MOV AX, 0040h
  5073 00003CCA 8EC0                <2> 		MOV ES, AX
  5074 00003CCC 2666C7057200000034- <2> 		MOV WORD [ES:00072h], 01234h
  5075 00003CD5 12                  <2>
  5076 00003CD6 EA00000000FFFF      <2> 		JMP 0FFFFh:0000h
  5077 00003CDD CF                  <2> 		IRET
  5078                              <2> 		
  5079                              <1> %include 'source/programs/reg.asm'
  5080 00003CDE FF2C72656700        <2> db 255,44,"reg",0
  5081 00003CE4 CD03                <2> 	int 3
  5082 00003CE6 C3                  <2> 	ret 
  5083                              <1> %include 'source/programs/show.asm'
  5084 00003CE7 FF2C73686F7700      <2> db 255,44,"show",0
  5085 00003CEE 8B3D[95290000]      <2> 		mov edi, [currentcommandloc]
  5086 00003CF4 81C705000000        <2> 		add edi, 5
  5087 00003CFA BE00008000          <2> 		mov esi, 0x800000
  5088 00003CFF E8DF0C0000          <2> 		call loadfile
  5089 00003D04 81FA94010000        <2> 		cmp edx, 404
  5090 00003D0A 0F8415000000        <2> 		je near filenotfound
  5091 00003D10 BE00008000          <2> 		mov esi, 0x800000
  5092                              <2> %ifdef gui.included
  5093                              <2> 		cmp word [esi], "BM"
  5094                              <2> 		je bmpfound
  5095                              <2> %endif
  5096 00003D15 E8E2DDFFFF          <2> 		call print
  5097 00003D1A BE[D04B0000]        <2> 		mov esi, line
  5098 00003D1F E8D8DDFFFF          <2> 		call print
  5099 00003D24 C3                  <2> 		ret
  5100                              <2> %ifdef gui.included
  5101                              <2> bmpfound:
  5102                              <2> 		cmp byte [guion], 0
  5103                              <2> 		je near noguibmp
  5104                              <2> 		mov esi, 0x800000
  5105                              <2> 		xor ecx, ecx
  5106                              <2> 		xor edx, edx
  5107                              <2> 		xor eax, eax
  5108                              <2> 		xor ebx, ebx
  5109                              <2> 		call showbmp
  5110                              <2> 		xor al, al
  5111                              <2> 		mov ah, 5
  5112                              <2> 		int 30h
  5113                              <2> 		call guiclear
  5114                              <2> 		call clearmousecursor
  5115                              <2> 		call reloadallgraphics
  5116                              <2> 		mov esi, [currentcommandloc]
  5117                              <2> 		add esi, 5
  5118                              <2> 		call print
  5119                              <2> 		mov esi, loadedbmpmsg
  5120                              <2> 		call print
  5121                              <2> 		ret
  5122                              <2> noguibmp:
  5123                              <2> 		mov esi, warnguimsg
  5124                              <2> 		call print
  5125                              <2> 		ret
  5126                              <2> warnguimsg db "This can not be done without the GUI.",10,0
  5127                              <2> %endif
  5128                              <2> 
  5129                              <2> filenotfound:
  5130 00003D25 BE[583D0000]        <2> 		mov esi, filenf
  5131 00003D2A E8CDDDFFFF          <2> 		call print
  5132 00003D2F 8B35[95290000]      <2> 		mov esi, [currentcommandloc]
  5133                              <2> findfilenotfoundzero:
  5134 00003D35 8A06                <2> 		mov al, [esi]
  5135 00003D37 46                  <2> 		inc esi
  5136 00003D38 3C00                <2> 		cmp al, 0
  5137 00003D3A 7411                <2> 		je nofilenamenotfound
  5138 00003D3C 81FE[4E8E0000]      <2> 		cmp esi, buftxtend
  5139 00003D42 7309                <2> 		jae nofilenamenotfound
  5140 00003D44 3C20                <2> 		cmp al, " "
  5141 00003D46 75ED                <2> 		jne findfilenotfoundzero
  5142 00003D48 E8AFDDFFFF          <2> 		call print
  5143                              <2> nofilenamenotfound:
  5144 00003D4D BE[633D0000]        <2> 		mov esi, filenf2
  5145 00003D52 E8A5DDFFFF          <2> 		call print
  5146 00003D57 C3                  <2> 		ret
  5147 00003D58 5468652066696C6520- <2> filenf db "The file ",34,0
  5148 00003D61 2200                <2>
  5149 00003D63 2220636F756C64206E- <2> filenf2 db 34," could not be found.",10,0
  5150 00003D6C 6F7420626520666F75- <2>
  5151 00003D75 6E642E0A00          <2>
  5152                              <2> 		
  5153 00003D7A 206C6F616465642E0A- <2> loadedbmpmsg db " loaded.",10,0
  5154 00003D83 00                  <2>
  5155                              <1> %include 'source/programs/shush.asm'
  5156 00003D84 FF2C736875736800    <2> db 255,44,"shush",0
  5157 00003D8C BE[973D0000]        <2> 	mov esi, shushmsg
  5158 00003D91 E866DDFFFF          <2> 	call print
  5159 00003D96 C3                  <2> 	ret
  5160 00003D97 57656C636F6D652074- <2> 	shushmsg db "Welcome to the SollerOS Hardly Unix-Compatible Shell!",10,0
  5161 00003DA0 6F2074686520536F6C- <2>
  5162 00003DA9 6C65724F5320486172- <2>
  5163 00003DB2 646C7920556E69782D- <2>
  5164 00003DBB 436F6D70617469626C- <2>
  5165 00003DC4 65205368656C6C210A- <2>
  5166 00003DCD 00                  <2>
  5167                              <1> %include 'source/programs/stop.asm'
  5168 00003DCE FF2C73746F7000      <2> 	db 255,44,"stop",0
  5169 00003DD5 30C0                <2> stop:	xor al, al
  5170 00003DD7 A2[48760000]        <2> 	mov [BATCHISON], al
  5171 00003DDC A2[DF750000]        <2> 	mov [IFON], al
  5172 00003DE1 A2[E0750000]        <2> 	mov [IFTRUE], al
  5173 00003DE6 A2[49760000]        <2> 	mov [LOOPON], al
  5174 00003DEB C3                  <2> 	ret 
  5175                              <1> %include 'source/programs/system.asm'
  5176 00003DEC FF2C73797374656D00  <2> 	db 255,44,"system",0
  5177 00003DF5 BE[943E0000]        <2> 	mov esi, systeminfomsg
  5178 00003DFA E8EBDCFFFF          <2> 	call printquiet
  5179 00003DFF B9[F55B0000]        <2> 	mov ecx, osend
  5180 00003E04 E87DEEFFFF          <2> 	call showdec
  5181 00003E09 BE[A93E0000]        <2> 	mov esi, diskbytemsg
  5182 00003E0E E8D7DCFFFF          <2> 	call printquiet
  5183 00003E13 B9[F55B0000]        <2> 	mov ecx, osend
  5184 00003E18 81C1[2B010100]      <2> 	add ecx, commandbufend
  5185 00003E1E 81E9[885D0000]      <2> 	sub ecx, bssstart	;add the extra buffer space
  5186 00003E24 E85DEEFFFF          <2> 	call showdec
  5187 00003E29 BE[C03E0000]        <2> 	mov esi, membytemsg
  5188 00003E2E E8B7DCFFFF          <2> 	call printquiet
  5189                              <2> getcpuspeed:
  5190 00003E33 B8FE000000          <2> 	mov eax, 0xFE
  5191 00003E38 E621                <2> 	out 0x21, al ;mask off all but timer interrupt
  5192 00003E3A B020                <2> 	mov al, 0x20
  5193 00003E3C E620                <2> 	out 0x20, al
  5194 00003E3E 31C0                <2> 	xor eax, eax
  5195 00003E40 F4                  <2> 	hlt
  5196 00003E41 C605[21020000]01    <2> 	mov byte [testingcpuspeed], 1
  5197                              <2> cpuspeedloop:	;wait until next timer interrupt, then inc eax until the next
  5198 00003E48 40                  <2> 	inc eax
  5199 00003E49 EBFD                <2> 	jmp cpuspeedloop
  5200                              <2> cpuspeedloopend:
  5201 00003E4B 31C0                <2> 	xor eax, eax
  5202 00003E4D E621                <2> 	out 0x21, al
  5203 00003E4F B020                <2> 	mov al, 0x20
  5204 00003E51 E620                <2> 	out 0x20, al
  5205 00003E53 31D2                <2> 	xor edx, edx
  5206 00003E55 31C0                <2> 	xor eax, eax
  5207 00003E57 A1[22020000]        <2> 	mov eax, [cpuspeedperint]
  5208 00003E5C D1E0                <2> 	shl eax, 1	;the cpu speed loop actually contains 2 commands so multiply the
  5209                              <2> 				;result by 2
  5210 00003E5E 8B1D[2C020000]      <2> 	mov ebx, [timeinterval]
  5211 00003E64 C1EB0A              <2> 	shr ebx, 10 ;divide the interval by 1024
  5212 00003E67 F7F3                <2> 	div ebx	;quotient in eax, remainder in edx
  5213 00003E69 89C1                <2> 	mov ecx, eax
  5214 00003E6B E816EEFFFF          <2> 	call showdec
  5215 00003E70 BE[ED3E0000]        <2> 	mov esi, cpuspeedmsg
  5216 00003E75 E870DCFFFF          <2> 	call printquiet
  5217 00003E7A 8B0D[26020000]      <2> 	mov ecx, [memoryspace]
  5218 00003E80 C1E914              <2> 	shr ecx, 20
  5219 00003E83 41                  <2> 	inc ecx	;the reading is one MB behind
  5220 00003E84 E8FDEDFFFF          <2> 	call showdec
  5221 00003E89 BE[F33E0000]        <2> 	mov esi, memoryspacemsg
  5222 00003E8E E869DCFFFF          <2> 	call print
  5223                              <2> %ifdef sound.included
  5224                              <2> 	cmp byte [SoundBlaster], 0
  5225                              <2> 	je .nosb
  5226                              <2> 	mov esi, soundblastermsg
  5227                              <2> 	call print
  5228                              <2> .nosb:
  5229                              <2> %endif
  5230 00003E93 C3                  <2> 	ret
  5231                              <2> 
  5232 00003E94 4B65726E656C20496E- <2> systeminfomsg db "Kernel Information:",10,0
  5233 00003E9D 666F726D6174696F6E- <2>
  5234 00003EA6 3A0A00              <2>
  5235 00003EA9 427974657320446973- <2> diskbytemsg db "Bytes Disk Space Used",10,0
  5236 00003EB2 6B2053706163652055- <2>
  5237 00003EBB 7365640A00          <2>
  5238 00003EC0 4279746573204D656D- <2> membytemsg db "Bytes Memory Space Used",10,"System Information:",10,0
  5239 00003EC9 6F7279205370616365- <2>
  5240 00003ED2 20557365640A537973- <2>
  5241 00003EDB 74656D20496E666F72- <2>
  5242 00003EE4 6D6174696F6E3A0A00  <2>
  5243                              <2> %ifdef sound.included
  5244                              <2> 	soundblastermsg db "Soundblaster Detected.",10,0
  5245                              <2> %endif
  5246 00003EED 4D4950530A00        <2> cpuspeedmsg db "MIPS",10,0
  5247 00003EF3 4D42204D656D6F7279- <2> memoryspacemsg db "MB Memory Space Free",10,0
  5248 00003EFC 205370616365204672- <2>
  5249 00003F05 65650A00            <2>
  5250                              <1> %include 'source/programs/time.asm'
  5251 00003F09 082E30303030303030- <2> timenscache db 8,".000000000"
  5252 00003F12 3030                <2>
  5253 00003F14 200A00              <2> timenscacheend: db " ",10,0
  5254 00003F17 00                  <2> istimeset db 0
  5255 00003F18 456E74657220746865- <2> settimemsg db "Enter the current UNIX time:",10,0
  5256 00003F21 2063757272656E7420- <2>
  5257 00003F2A 554E49582074696D65- <2>
  5258 00003F33 3A0A00              <2>
  5259 00003F36 00<rept>            <2> timeinputbuffer times 12 db 0
  5260 00003F42 00                  <2> timeinputbend: db 0
  5261                              <2> 
  5262 00003F43 FF2C74696D6500      <2> db 255,44,"time",0
  5263 00003F4A 803D[173F0000]00    <2> 	cmp byte [istimeset], 0
  5264 00003F51 753A                <2> 	jne timeisset
  5265 00003F53 BE[183F0000]        <2> 	mov esi, settimemsg
  5266 00003F58 E89FDBFFFF          <2> 	call print
  5267 00003F5D BE[363F0000]        <2> 	mov esi, timeinputbuffer
  5268 00003F62 BF[423F0000]        <2> 	mov edi, timeinputbend
  5269 00003F67 E878DCFFFF          <2> 	call readline
  5270 00003F6C BE[363F0000]        <2> 	mov esi, timeinputbuffer
  5271 00003F71 31FF                <2> 	xor edi, edi
  5272 00003F73 E8F0EDFFFF          <2> 	call cnvrttxt
  5273 00003F78 890D[30020000]      <2> 	mov [timeseconds], ecx
  5274 00003F7E 31C9                <2> 	xor ecx, ecx
  5275 00003F80 890D[34020000]      <2> 	mov [timenanoseconds], ecx
  5276 00003F86 C605[173F0000]01    <2> 	mov byte [istimeset], 1
  5277                              <2> timeisset:
  5278 00003F8D 8B0D[30020000]      <2> 	mov ecx, [timeseconds]
  5279 00003F93 E8EEECFFFF          <2> 	call showdec
  5280                              <2> 	
  5281 00003F98 8B0D[34020000]      <2> 	mov ecx, [timenanoseconds]
  5282 00003F9E BE[093F0000]        <2> 	mov esi, timenscache
  5283 00003FA3 C7460230303030      <2> 	mov dword [esi+ 2], "0000"
  5284 00003FAA C7460630303030      <2> 	mov dword [esi + 6], "0000"
  5285 00003FB1 C6460A30            <2> 	mov byte [esi + 10], "0"
  5286 00003FB5 BE[143F0000]        <2> 	mov esi, timenscacheend
  5287 00003FBA E8AAEAFFFF          <2> 	call convert
  5288 00003FBF BE[093F0000]        <2> 	mov esi, timenscache
  5289 00003FC4 E833DBFFFF          <2> 	call print
  5290                              <2> 	
  5291 00003FC9 E80F000000          <2> 	call time
  5292 00003FCE BE[A9410000]        <2> 	mov esi, timeshow
  5293 00003FD3 E824DBFFFF          <2> 	call print
  5294 00003FD8 E9BC000000          <2> 	jmp findday
  5295                              <2> time:
  5296 00003FDD E84F010000          <2> 	call tstackput1
  5297 00003FE2 B00A                <2> 	mov al,10			;Get RTC register A
  5298 00003FE4 E879010000          <2> 	call tget1
  5299 00003FE9 A880                <2> 	test al,0x80			;Is update in progress?
  5300 00003FEB 75F0                <2> 	jne time				; yes, wait
  5301                              <2> 
  5302 00003FED B000                <2> 	mov al,0			;Get seconds (00 to 59)
  5303 00003FEF E86E010000          <2> 	call tget1
  5304 00003FF4 A2[A0410000]        <2> 	mov [RTCtimeSecond],al
  5305                              <2> 
  5306 00003FF9 B002                <2> 	mov al,0x02			;Get minutes (00 to 59)
  5307 00003FFB E862010000          <2> 	call tget1
  5308 00004000 A2[A1410000]        <2> 	mov [RTCtimeMinute],al
  5309                              <2> 
  5310 00004005 B004                <2> 	mov al,0x04			;Get hours (see notes)
  5311 00004007 E856010000          <2> 	call tget1
  5312 0000400C A2[A2410000]        <2> 	mov [RTCtimeHour],al
  5313                              <2> 
  5314 00004011 B007                <2> 	mov al,0x07			;Get day of month (01 to 31)
  5315 00004013 E84A010000          <2> 	call tget1
  5316 00004018 A2[A3410000]        <2> 	mov [RTCtimeDay],al
  5317                              <2> 
  5318 0000401D B008                <2> 	mov al,0x08			;Get month (01 to 12)
  5319 0000401F E83E010000          <2> 	call tget1
  5320 00004024 A2[A4410000]        <2> 	mov [RTCtimeMonth],al
  5321                              <2> 
  5322 00004029 B009                <2> 	mov al,0x09			;Get year (00 to 99)
  5323 0000402B E832010000          <2> 	call tget1
  5324 00004030 A2[A5410000]        <2> 	mov [RTCtimeYear],al
  5325                              <2> 	
  5326 00004035 BE[A9410000]        <2> 	mov esi, timeshow
  5327 0000403A 8A2D[A2410000]      <2> 	mov ch, [RTCtimeHour]
  5328 00004040 E828010000          <2> 	call tput1
  5329 00004045 8A2D[A1410000]      <2> 	mov ch, [RTCtimeMinute]
  5330 0000404B E81D010000          <2> 	call tput1
  5331 00004050 8A2D[A0410000]      <2> 	mov ch, [RTCtimeSecond]
  5332 00004056 E812010000          <2> 	call tput1
  5333 0000405B BE[B2410000]        <2> 	mov esi, dateshow
  5334 00004060 8A2D[A4410000]      <2> 	mov ch, [RTCtimeMonth]
  5335 00004066 E802010000          <2> 	call tput1
  5336 0000406B 8A2D[A3410000]      <2> 	mov ch, [RTCtimeDay]
  5337 00004071 E8F7000000          <2> 	call tput1
  5338 00004076 B520                <2> 	mov ch, 0x20
  5339 00004078 E8F0000000          <2> 	call tput1
  5340 0000407D 4E                  <2> 	dec esi
  5341 0000407E 8A2D[A5410000]      <2> 	mov ch, [RTCtimeYear]
  5342 00004084 E8E4000000          <2> 	call tput1
  5343 00004089 E8BD000000          <2> 	call tstackget1
  5344 0000408E C3                  <2> 	ret
  5345 0000408F BE[A9410000]        <2> 	mov esi, timeshow
  5346 00004094 E863DAFFFF          <2> 	call print
  5347                              <2> ;;get day of week
  5348                              <2> ;;add these:
  5349                              <2> ;;century value
  5350                              <2> ;;last 2 digits of year
  5351                              <2> ;;last 2 digits of year right shifted twice
  5352                              <2> ;;month table value
  5353                              <2> ;;day of the month
  5354                              <2> ;;divide these by 7
  5355                              <2> ;;the remainder is the day
  5356                              <2> findday:
  5357 00004099 31C0                <2> 	xor eax, eax
  5358                              <2> ;;first convert the values from BCD to hex
  5359 0000409B A0[A3410000]        <2> 	mov al, [RTCtimeDay]
  5360 000040A0 E873000000          <2> 	call converttohex
  5361 000040A5 8825[A6410000]      <2> 	mov [dayhex], ah
  5362 000040AB A0[A4410000]        <2> 	mov al, [RTCtimeMonth]
  5363 000040B0 E863000000          <2> 	call converttohex
  5364 000040B5 8825[A7410000]      <2> 	mov [monthhex], ah
  5365 000040BB A0[A5410000]        <2> 	mov al, [RTCtimeYear]
  5366 000040C0 E853000000          <2> 	call converttohex
  5367 000040C5 8825[A8410000]      <2> 	mov [yearhex], ah
  5368 000040CB 31C0                <2> 	xor eax, eax
  5369 000040CD A0[A8410000]        <2> 	mov al, [yearhex]
  5370 000040D2 C0E802              <2> 	shr al, 2
  5371 000040D5 0205[A8410000]      <2> 	add al, [yearhex]
  5372 000040DB 0506000000          <2> 	add eax, 6
  5373 000040E0 31DB                <2> 	xor ebx, ebx
  5374 000040E2 8A1D[A7410000]      <2> 	mov bl, [monthhex]
  5375 000040E8 FECB                <2> 	dec bl
  5376 000040EA 81C3[C7410000]      <2> 	add ebx, month
  5377 000040F0 31C9                <2> 	xor ecx, ecx
  5378 000040F2 8A0B                <2> 	mov cl, [ebx]
  5379 000040F4 01C8                <2> 	add eax, ecx
  5380 000040F6 8A0D[A6410000]      <2> 	mov cl, [dayhex]
  5381 000040FC 01C8                <2> 	add eax, ecx
  5382 000040FE 66BB0700            <2> 	mov bx, 7
  5383 00004102 31D2                <2> 	xor edx, edx
  5384 00004104 66F7F3              <2> 	div bx
  5385 00004107 C1E202              <2> 	shl edx, 2
  5386 0000410A 81C2[D3410000]      <2> 	add edx, day
  5387 00004110 8B32                <2> 	mov esi, [edx]
  5388 00004112 E8E5D9FFFF          <2> 	call print
  5389 00004117 C3                  <2> 	ret
  5390                              <2> 	
  5391                              <2> converttohex:
  5392 00004118 88C4                <2> 	mov ah, al
  5393 0000411A C0E804              <2> 	shr al, 4
  5394 0000411D C0E404              <2> 	shl ah, 4
  5395 00004120 C0EC04              <2> 	shr ah, 4
  5396 00004123 3C00                <2> 	cmp al, 0
  5397 00004125 7409                <2> 	je noconverttohex
  5398                              <2> converttohexlp:
  5399 00004127 80C40A              <2> 	add ah, 10
  5400 0000412A FEC8                <2> 	dec al
  5401 0000412C 3C00                <2> 	cmp al, 0
  5402 0000412E 75F7                <2> 	jne converttohexlp
  5403                              <2> noconverttohex:
  5404 00004130 C3                  <2> 	ret
  5405                              <2> 	
  5406                              <2> tstackput1:
  5407 00004131 8935[9C410000]      <2> 	mov [tstack + 20], esi
  5408 00004137 BE[88410000]        <2> 	mov esi, tstack
  5409 0000413C 8906                <2> 	mov [esi], eax
  5410 0000413E 895E04              <2> 	mov [esi + 4], ebx
  5411 00004141 894E08              <2> 	mov [esi + 8], ecx
  5412 00004144 89560C              <2> 	mov [esi + 12], edx
  5413 00004147 897E10              <2> 	mov [esi + 16], edi
  5414 0000414A C3                  <2> 	ret
  5415                              <2> 	
  5416                              <2> tstackget1:
  5417 0000414B BE[88410000]        <2> 	mov esi, tstack
  5418 00004150 8B06                <2> 	mov eax, [esi]
  5419 00004152 8B5E04              <2> 	mov ebx, [esi + 4]
  5420 00004155 8B4E08              <2> 	mov ecx, [esi + 8]
  5421 00004158 8B560C              <2> 	mov edx, [esi + 12]
  5422 0000415B 8B7E10              <2> 	mov edi, [esi + 16]
  5423 0000415E 8B7614              <2> 	mov esi, [esi + 20]
  5424 00004161 C3                  <2> 	ret
  5425                              <2> 	
  5426                              <2> tget1:
  5427 00004162 66BA7000            <2> 	mov dx, 0x70
  5428 00004166 EE                  <2> 	out dx, al
  5429 00004167 6642                <2> 	inc dx
  5430 00004169 EC                  <2> 	in al, dx
  5431 0000416A 664A                <2> 	dec dx
  5432 0000416C C3                  <2> 	ret
  5433                              <2> 	
  5434                              <2> tput1:
  5435 0000416D 66C1E904            <2> 	shr cx, 4
  5436 00004171 B030                <2> 	mov al, 48
  5437 00004173 00E8                <2> 	add al, ch
  5438 00004175 8806                <2> 	mov [esi], al
  5439 00004177 46                  <2> 	inc esi
  5440 00004178 B030                <2> 	mov al, 48
  5441 0000417A C0E904              <2> 	shr cl, 4
  5442 0000417D 00C8                <2> 	add al, cl
  5443 0000417F 8806                <2> 	mov [esi], al
  5444 00004181 81C602000000        <2> 	add esi, 2
  5445 00004187 C3                  <2> 	ret
  5446                              <2> 		
  5447 00004188 000000000000000000- <2> 	tstack dd 0,0,0,0,0,0
  5448 00004191 000000000000000000- <2>
  5449 0000419A 000000000000        <2>
  5450 000041A0 00                  <2> 	RTCtimeSecond db 0
  5451 000041A1 00                  <2> 	RTCtimeMinute db 0
  5452 000041A2 00                  <2> 	RTCtimeHour db 0
  5453 000041A3 00                  <2> 	RTCtimeDay db 0
  5454 000041A4 00                  <2> 	RTCtimeMonth db 0
  5455 000041A5 00                  <2> 	RTCtimeYear db 0
  5456 000041A6 00                  <2> 	dayhex db 0
  5457 000041A7 00                  <2> 	monthhex db 0
  5458 000041A8 00                  <2> 	yearhex db 0
  5459 000041A9 30303A30303A30300A  <2> 	timeshow db "00:00:00",10
  5460 000041B2 30302D30302D303030- <2> 	dateshow db "00-00-0000",10,0
  5461 000041BB 300A00              <2>
  5462                              <2> 	oldcentury:	;;from 1700 to 1900
  5463 000041BE 040200              <2> 	db 4,2,0
  5464                              <2> 	century:	;;from 2000 to 2500
  5465 000041C1 060402000604        <2> 	db 6,4,2,0,6,4
  5466                              <2> 	month:
  5467 000041C7 000303060104060205- <2> 	db 0,3,3,6,1,4,6,2,5,0,3,5
  5468 000041D0 000305              <2>
  5469                              <2> 	day:
  5470 000041D3 [EF410000]          <2> 	dd sunday
  5471 000041D7 [F7410000]          <2> 	dd monday
  5472 000041DB [FF410000]          <2> 	dd tuesday
  5473 000041DF [08420000]          <2> 	dd wednesday
  5474 000041E3 [13420000]          <2> 	dd thursday
  5475 000041E7 [1D420000]          <2> 	dd friday
  5476 000041EB [25420000]          <2> 	dd saturday
  5477                              <2> sunday:
  5478 000041EF 53756E6461790A00    <2> 	db "Sunday",10,0
  5479                              <2> monday:
  5480 000041F7 4D6F6E6461790A00    <2> 	db "Monday",10,0
  5481                              <2> tuesday:
  5482 000041FF 547565736461790A00  <2> 	db "Tuesday",10,0
  5483                              <2> wednesday:
  5484 00004208 5765646E6573646179- <2> 	db "Wednesday",10,0
  5485 00004211 0A00                <2>
  5486                              <2> thursday:
  5487 00004213 54687572736461790A- <2> 	db "Thursday",10,0
  5488 0000421C 00                  <2>
  5489                              <2> friday:
  5490 0000421D 4672696461790A00    <2> 	db "Friday",10,0
  5491                              <2> saturday:
  5492 00004225 53617475726461790A- <2> 	db "Saturday",10,0
  5493 0000422E 00                  <2>
  5494                              <1> %include 'source/programs/turnoff.asm'
  5495 0000422F FF2C7475726E6F6666- <2> 	db 255,44,"turnoff",0
  5496 00004238 00                  <2>
  5497                              <2> 	turnoff:
  5498 00004239 66BB[5442]          <2> 			mov bx, shutdown
  5499 0000423D 66891D[780C0000]    <2> 			mov [realmodeptr], bx
  5500 00004244 BB[7E420000]        <2> 			mov ebx, halt
  5501 00004249 891D[740C0000]      <2> 			mov [realmodereturn], ebx
  5502 0000424F E909C9FFFF          <2> 			jmp realmode
  5503                              <2> 
  5504                              <2> [BITS 16]
  5505                              <2> 		shutdown:
  5506 00004254 B453                <2> 			mov ah, 0x53
  5507 00004256 B004                <2> 			mov al, 4
  5508 00004258 31DB                <2> 			xor bx, bx
  5509 0000425A CD15                <2> 			int 0x15
  5510                              <2> 			
  5511 0000425C B453                <2> 			mov ah, 0x53
  5512 0000425E B001                <2> 			mov al, 1
  5513 00004260 31DB                <2> 			xor bx, bx
  5514 00004262 CD15                <2> 			int 0x15
  5515                              <2> 			
  5516 00004264 B453                <2> 			mov ah, 0x53
  5517 00004266 B008                <2> 			mov al, 8
  5518 00004268 BB0100              <2> 			mov bx, 1
  5519 0000426B B90100              <2> 			mov cx, 1
  5520 0000426E CD15                <2> 			int 0x15
  5521                              <2> 			
  5522 00004270 B453                <2> 			mov ah, 0x53
  5523 00004272 B007                <2> 			mov al, 7
  5524 00004274 BB0100              <2> 			mov bx, 1
  5525 00004277 B90300              <2> 			mov cx, 3
  5526 0000427A CD15                <2> 			int 0x15
  5527 0000427C EBFE                <2> 			jmp $
  5528                              <2> 			[BITS 32]
  5529 0000427E EBFE                <2> halt: jmp $
  5530                              <1> %include 'source/programs/wait.asm'
  5531 00004280 FF2C7761697400      <2> db 255,44,"wait",0
  5532                              <2> waitkey:
  5533 00004287 E8D4DCFFFF          <2> 		call getchar
  5534 0000428C C3                  <2> 		ret
  5535                              <1> %include 'source/programs/while.asm'
  5536 0000428D FF2C7768696C6500    <2> db 255,44,"while",0
  5537 00004295 30C0                <2> whilecmd:  xor al, al
  5538 00004297 3805[48760000]      <2> 	cmp [BATCHISON], al
  5539 0000429D 0F84F0F1FFFF        <2> 	je near notbatch
  5540 000042A3 8B35[44760000]      <2> 	mov esi, [BATCHPOS]
  5541 000042A9 81EE02000000        <2> 	sub esi, 2
  5542 000042AF 4E                  <2> whilefnd: dec esi
  5543 000042B0 8A06                <2> 	mov al, [esi]
  5544 000042B2 3C0A                <2> 	cmp al, 10
  5545 000042B4 0F840A000000        <2> 	je near whilefnd2
  5546 000042BA 3C00                <2> 	cmp al, 0
  5547 000042BC 0F8402000000        <2> 	je near whilefnd2
  5548 000042C2 EBEB                <2> 	jmp whilefnd
  5549                              <2> whilefnd2:
  5550 000042C4 46                  <2> 	inc esi
  5551 000042C5 8935[4A760000]      <2> 	mov [LOOPPOS], esi
  5552 000042CB C605[49760000]01    <2> 	mov BYTE [LOOPON], 1
  5553 000042D2 BE[4E8A0000]        <2> 	mov esi, buftxt
  5554 000042D7 BB[4E8A0000]        <2> 	mov ebx, buftxt
  5555 000042DC 81C306000000        <2> 	add ebx, 6
  5556 000042E2 E909F7FFFF          <2> 	jmp chkeqsn
  5557                              <1> progend:		;programs end here	
  5558                              <1> batchprogend:
  5559                                  	%include "source/hardware.asm"
  5560                              <1> %ifdef gui.included
  5561                              <1> 	%include "source/drivers/video/vesa.asm"
  5562                              <1> 	%include "source/drivers/input/mouse.asm"
  5563                              <1> %endif
  5564                              <1> %include "source/drivers/sound/pcspkr.asm"
  5565                              <2> ;PC Speaker Drivers
  5566                              <2> PCSpeakerRAW:
  5567 000042E7 60                  <2> 	pusha
  5568                              <2> nosoundrep:
  5569 000042E8 8B35[3B020000]      <2> 	mov esi, [soundpos]
  5570 000042EE 31C9                <2> 	xor ecx, ecx
  5571 000042F0 668B0D[39020000]    <2> 	mov cx, [soundrepititions]
  5572 000042F7 6681F90000          <2> 	cmp cx, 0
  5573 000042FC 0F8548000000        <2> 	jne near donesetpitch
  5574 00004302 668B0E              <2> 	mov cx, [esi]
  5575 00004305 668B5E02            <2> 	mov bx, [esi + 2]
  5576 00004309 66890D[39020000]    <2> 	mov [soundrepititions], cx
  5577 00004310 81C604000000        <2> 	add esi, 4
  5578 00004316 8935[3B020000]      <2> 	mov [soundpos], esi
  5579 0000431C 3B35[3F020000]      <2> 	cmp esi, [soundendpos]
  5580 00004322 7735                <2> 	ja stopsound
  5581 00004324 66813D[39020000]00- <2> 	cmp word [soundrepititions], 0
  5582 0000432C 00                  <2>
  5583 0000432D 74B9                <2> 	je nosoundrep
  5584 0000432F 6681FB0000          <2> 	cmp bx, 0
  5585 00004334 740F                <2> 	je nosoundplay
  5586 00004336 E840000000          <2> 	call setpitch
  5587 0000433B E849000000          <2> 	call startsound
  5588 00004340 E905000000          <2> 	jmp donesetpitch
  5589                              <2> nosoundplay:
  5590 00004345 E846000000          <2> 	call killsound
  5591                              <2> donesetpitch:
  5592 0000434A 6649                <2> 	dec cx
  5593 0000434C 66890D[39020000]    <2> 	mov [soundrepititions], cx
  5594 00004353 61                  <2> 	popa
  5595 00004354 E91FBFFFFF          <2> 	jmp timerinterrupt
  5596                              <2> stopsound:
  5597 00004359 31C0                <2> 	xor eax, eax
  5598 0000435B 66A3[39020000]      <2> 	mov [soundrepititions], ax
  5599 00004361 A2[38020000]        <2> 	mov [soundon], al
  5600 00004366 A3[3B020000]        <2> 	mov [soundpos], eax
  5601 0000436B A3[3F020000]        <2> 	mov [soundendpos], eax
  5602 00004370 E81B000000          <2> 	call killsound
  5603 00004375 61                  <2> 	popa
  5604 00004376 E9FDBEFFFF          <2> 	jmp timerinterrupt
  5605                              <2> 
  5606                              <2> 
  5607                              <2> setpitch:
  5608 0000437B B0B6                <2> 	mov al, 0xB6
  5609 0000437D E643                <2> 	out 0x43, al
  5610 0000437F 6689D8              <2> 	mov ax, bx
  5611 00004382 E642                <2> 	out 0x42, al
  5612 00004384 88E0                <2> 	mov al, ah
  5613 00004386 E642                <2> 	out 0x42, al
  5614 00004388 C3                  <2> 	ret
  5615                              <2> startsound:
  5616 00004389 E461                <2> 	in al, 0x61
  5617 0000438B 0C03                <2> 	or al, 3
  5618 0000438D E661                <2> 	out 0x61, al
  5619 0000438F C3                  <2> 	ret
  5620                              <2> killsound:
  5621 00004390 E461                <2> 	in al, 0x61
  5622 00004392 24FC                <2> 	and al, 0xFC
  5623 00004394 E661                <2> 	out 0x61, al
  5624 00004396 C3                  <2> 	ret
  5625                              <2> 	
  5626                              <1> %ifdef sound.included
  5627                              <1> 	%include "source/drivers/sound/sblaster.asm"
  5628                              <1> %endif
  5629                              <1> %ifdef rtl8139.included
  5630                              <1> 	%include "source/drivers/network/rtl8139.asm"
  5631                              <1> %endif
  5632                              <1> %ifdef io.serial
  5633                              <1> 	%include "source/drivers/input/serial.asm"
  5634                              <1> %else
  5635                              <1> 	%include "source/drivers/input/keyboard.asm"
  5636 00004397 00                  <2> specialkey db 0
  5637 00004398 00                  <2> charregion db 0
  5638                              <2> waitforinput:		;;this is basically the idle process
  5639                              <2> 					;;this halts the cpu for a small amount of time and then sees if there was a keypress
  5640                              <2> 					;;this lets the cpu stay at close to 0% instead of 100%
  5641 00004399 6631C0              <2> 	xor ax, ax
  5642 0000439C A0[824B0000]        <2> 	mov al, [threadson]
  5643 000043A1 8825[824B0000]      <2> 	mov [threadson], ah
  5644 000043A7 FB                  <2> 	sti
  5645 000043A8 F4                  <2> 	hlt
  5646 000043A9 A2[824B0000]        <2> 	mov [threadson], al
  5647 000043AE 3A25[B01F0000]      <2> 	cmp ah, [trans]
  5648 000043B4 7401                <2> 	je getkey
  5649 000043B6 C3                  <2> 	ret
  5650                              <2> getkey:
  5651 000043B7 31C0                <2> 		xor eax, eax
  5652 000043B9 A2[97430000]        <2> 		mov [specialkey], al
  5653 000043BE 66A3[AE1F0000]      <2> 		mov [lastkey], ax
  5654 000043C4 E464                <2> 		in al, 64h ; Status
  5655                              <2> %ifdef gui.included
  5656                              <2> 		test al, 20h ; PS2-Mouse?
  5657                              <2> 		jnz near moused
  5658                              <2> %endif
  5659 000043C6 A801                <2> 		test al, 1 
  5660 000043C8 74CF                <2> 		jz waitforinput ; if output buffer full or no keypress, jump to idle process (only works when it is jz guistartin2, use jz guistartin to disable)
  5661                              <2> 	calckey:
  5662 000043CA E460                <2> 		in al, 60h
  5663 000043CC 88C4                <2> 		mov ah, al
  5664 000043CE 30C0                <2> 		xor al, al
  5665 000043D0 8825[AF1F0000]      <2> 		mov [lastkey + 1], ah
  5666 000043D6 88E0                <2> 		mov al, ah
  5667 000043D8 BF[71450000]        <2> 		mov edi, scancode
  5668                              <2> 	searchscan: 
  5669 000043DD 3C3A                <2> 		cmp al, 3Ah
  5670 000043DF 731A                <2> 		jae scanother
  5671 000043E1 30E4                <2> 		xor ah, ah
  5672 000043E3 C0E002              <2> 		shl al, 2
  5673 000043E6 01C7                <2> 		add edi, eax
  5674 000043E8 D0E8                <2> 		shr al, 1
  5675 000043EA 01C7                <2> 		add edi, eax
  5676 000043EC D0E8                <2> 		shr al, 1
  5677 000043EE 8A27                <2> 		mov ah, [edi]
  5678 000043F0 80FC00              <2> 		cmp ah, 0
  5679 000043F3 7406                <2> 		je scanother
  5680 000043F5 E9D7000000          <2> 		jmp scanfound
  5681 000043FA 00                  <2> uppercase db 0
  5682                              <2> scanother:
  5683 000043FB 88C4                <2> 		mov ah, al
  5684 000043FD 30C0                <2> 		xor al, al
  5685 000043FF 66A3[AE1F0000]      <2> 		mov [lastkey], ax
  5686 00004405 80FCE0              <2> 		cmp ah, 0E0h
  5687 00004408 0F847D000000        <2> 		je near getkeyspecial
  5688 0000440E 803D[97430000]E0    <2> 		cmp byte [specialkey], 0xE0
  5689 00004415 752B                <2> 		jne nospecialkey
  5690 00004417 80FC38              <2> 		cmp ah, 38h
  5691 0000441A 0F84A0000000        <2> 		je near alton
  5692 00004420 80FCB8              <2> 		cmp ah, 0B8h
  5693 00004423 0F849F000000        <2> 		je near altoff
  5694 00004429 80FC1D              <2> 		cmp ah, 1Dh
  5695 0000442C 0F847E000000        <2> 		je near ctron
  5696 00004432 80FC9D              <2> 		cmp ah, 9Dh
  5697 00004435 0F847D000000        <2> 		je near ctroff
  5698 0000443B 66A3[AE1F0000]      <2> 		mov [lastkey], ax
  5699 00004441 C3                  <2> 		ret
  5700                              <2> nospecialkey:
  5701 00004442 80FC2A              <2> 		cmp ah, 2Ah
  5702 00004445 0F8455000000        <2> 		je near shifton
  5703 0000444B 80FC36              <2> 		cmp ah, 36h
  5704 0000444E 0F844C000000        <2> 		je near shifton
  5705 00004454 80FC1C              <2> 		cmp ah, 1Ch
  5706 00004457 0F8473000000        <2> 		je near entdown
  5707 0000445D 80FCAA              <2> 		cmp ah, 0AAh
  5708 00004460 0F8442000000        <2> 		je near shiftoff
  5709 00004466 80FCB6              <2> 		cmp ah, 0B6h
  5710 00004469 0F8439000000        <2> 		je near shiftoff
  5711 0000446F 80FC3A              <2> 		cmp ah, 3Ah
  5712 00004472 0F84A5000000        <2> 		je near capslock
  5713 00004478 80FC45              <2> 		cmp ah, 0x45
  5714 0000447B 0F84AD000000        <2> 		je near numlock
  5715 00004481 80FC46              <2> 		cmp ah, 0x46
  5716 00004484 0F84BC000000        <2> 		je near scrolllock
  5717 0000448A C3                  <2> 		ret
  5718                              <2> 	getkeyspecial:
  5719 0000448B C605[97430000]E0    <2> 		mov byte [specialkey], 0xE0
  5720 00004492 E933FFFFFF          <2> 		jmp calckey
  5721                              <2> 	shift:
  5722 00004497 A0[FA430000]        <2> 		mov al, [uppercase]
  5723 0000449C 3C01                <2> 		cmp al, 1
  5724 0000449E 7308                <2> 		jae shiftoff
  5725                              <2> 	shifton:
  5726 000044A0 C605[FA430000]01    <2> 		mov byte [uppercase], 1
  5727 000044A7 C3                  <2> 		ret
  5728                              <2> 	shiftoff:
  5729 000044A8 C605[FA430000]00    <2> 		mov byte [uppercase], 0
  5730 000044AF C3                  <2> 		ret
  5731                              <2> 	ctron:
  5732 000044B0 C605[1C450000]01    <2> 		mov byte [ctrkey], 1
  5733 000044B7 C3                  <2> 		ret
  5734                              <2> 	ctroff:
  5735 000044B8 C605[1C450000]00    <2> 		mov byte [ctrkey], 0
  5736 000044BF C3                  <2> 		ret
  5737                              <2> 	alton:
  5738 000044C0 C605[1B450000]01    <2> 		mov byte [altkey], 1
  5739 000044C7 C3                  <2> 		ret
  5740                              <2> 	altoff:
  5741 000044C8 C605[1B450000]00    <2> 		mov byte [altkey], 0
  5742 000044CF C3                  <2> 		ret
  5743                              <2> 	entdown:
  5744 000044D0 C3                  <2> 		ret
  5745                              <2> 	scanfound:
  5746 000044D1 81C704000000        <2> 		add edi, 4
  5747 000044D7 803D[1C450000]01    <2> 		cmp byte [ctrkey], 1
  5748 000044DE 731B                <2> 		jae altin
  5749 000044E0 81EF04000000        <2> 		sub edi, 4
  5750 000044E6 81C702000000        <2> 		add edi, 2
  5751 000044EC 803D[1B450000]01    <2> 		cmp byte [altkey], 1
  5752 000044F3 7306                <2> 		jae altin
  5753 000044F5 81EF02000000        <2> 		sub edi, 2
  5754                              <2> altin:
  5755 000044FB 81C701000000        <2> 		add edi, 1
  5756 00004501 803D[FA430000]01    <2> 		cmp byte [uppercase], 1
  5757 00004508 7306                <2> 		jae uppercaseon
  5758 0000450A 81EF01000000        <2> 		sub edi, 1
  5759                              <2> uppercaseon:
  5760 00004510 8A07                <2> 		mov al,[edi]
  5761 00004512 A2[AE1F0000]        <2> 		mov [lastkey], al
  5762 00004517 C3                  <2> 		ret
  5763                              <2> 		
  5764 00004518 00                  <2> keyboardstatus db 0
  5765 00004519 00                  <2> numlockstatus db 0
  5766 0000451A 00                  <2> scrolllockstatus db 0
  5767 0000451B 00                  <2> altkey db 0
  5768 0000451C 00                  <2> ctrkey db 0
  5769                              <2> 	capslock:
  5770 0000451D 8035[18450000]04    <2> 		xor byte [keyboardstatus], 00000100b
  5771 00004524 E835000000          <2> 		call updatekblights
  5772 00004529 E969FFFFFF          <2> 		jmp shift
  5773                              <2> 		
  5774                              <2> 	numlock:
  5775 0000452E 8035[18450000]02    <2> 		xor byte [keyboardstatus], 00000010b
  5776 00004535 8035[19450000]01    <2> 		xor byte [numlockstatus], 1
  5777 0000453C E81D000000          <2> 		call updatekblights
  5778 00004541 E971FEFFFF          <2> 		jmp getkey
  5779                              <2> 	
  5780                              <2> 	scrolllock:
  5781 00004546 8035[18450000]01    <2> 		xor byte [keyboardstatus], 00000001b
  5782 0000454D 8035[1A450000]01    <2> 		xor byte [scrolllockstatus], 1
  5783 00004554 E805000000          <2> 		call updatekblights
  5784 00004559 E959FEFFFF          <2> 		jmp getkey
  5785                              <2> 		
  5786                              <2> 	updatekblights:
  5787 0000455E B0ED                <2> 		mov al, 0xED
  5788 00004560 66BA6000            <2> 		mov dx, 0x60
  5789 00004564 EE                  <2> 		out dx, al
  5790                              <2> 	chkkbdack:
  5791 00004565 EC                  <2> 		in al, dx
  5792 00004566 3CFA                <2> 		cmp al, 0xFA
  5793 00004568 75FB                <2> 		jne chkkbdack
  5794 0000456A A0[18450000]        <2> 		mov al, [keyboardstatus]
  5795 0000456F EE                  <2> 		out dx, al
  5796 00004570 C3                  <2> 		ret
  5797                              <2> 		
  5798                              <2> scancode:
  5799 00004571 000000000000        <2> 	db 0,0,0,0,0,0				;0h
  5800 00004577 000000000000        <2> 	db 0,0,0,0,0,0				;1h
  5801 0000457D 3121AD000000        <2> 	db '1','!',0xAD,0,0,0		;2h
  5802 00004583 3240FDFB0000        <2> 	db '2','@',0xFD,0xFB,0,0	;3h
  5803 00004589 332300000000        <2> 	db '3','#',0,0,0,0			;4h
  5804 0000458F 34249B9C0000        <2> 	db '4','$',0x9B,0x9C,0,0	;5h
  5805 00004595 3525EE000000        <2> 	db '5','%',0xEE,0,0,0		;6h
  5806 0000459B 365EAC000000        <2> 	db '6','^',0xAC,0,0,0		;7h
  5807 000045A1 3726AB000000        <2> 	db '7','&',0xAB,0,0,0		;8h
  5808 000045A7 382AEC000000        <2> 	db '8','*',0xEC,0,0,0		;9h
  5809 000045AD 392800000000        <2> 	db '9','(',0,0,0,0			;0Ah
  5810 000045B3 302900000000        <2> 	db '0',')',0,0,0,0			;0Bh
  5811 000045B9 2D5F9DF10000        <2> 	db '-','_',0x9D,0xF1,0,0	;0Ch
  5812 000045BF 3D2BF7F60000        <2> 	db '=','+',0xF7,0xF6,0,0	;0Dh
  5813 000045C5 080800000000        <2> 	db 8,8,0,0,0,0				;0Eh
  5814 000045CB 000000000000        <2> 	db 0,0,0,0,0,0				;0Fh
  5815 000045D1 7151848E0000        <2> 	db 'q','Q',0x84,0x8E,0,0	;10h
  5816 000045D7 7757868F0000        <2> 	db 'w','W',0x86,0x8F,0,0	;11h
  5817 000045DD 65458290EE45        <2> 	db 'e','E',0x82,0x90,0xEE,'E'	;12h
  5818 000045E3 7252898A7050        <2> 	db 'r','R',0x89,0x8A,'p','P'	;13h
  5819 000045E9 7454819AE754        <2> 	db 't','T',0x81,0x9A,0xE7,'T'	;14h
  5820 000045EF 795998007559        <2> 	db 'y','Y',0x98,0,'u','Y'	;15h
  5821 000045F5 7555A3970000        <2> 	db 'u','U',0xA3,0x97,0,0		;16h
  5822 000045FB 6949A18D6949        <2> 	db 'i','I',0xA1,0x8D,'i','I'	;17h
  5823 00004601 6F4FA29577EA        <2> 	db 'o','O',0xA2,0x95,'w',0xEA	;18h
  5824 00004607 70509499E3EF        <2> 	db 'p','P',0x94,0x99,0xE3,0xEF	;19h
  5825 0000460D 5B7BF4000000        <2> 	db '[','{',0xF4,0,0,0		;1Ah
  5826 00004613 5D7DF5000000        <2> 	db ']','}',0xF5,0,0,0		;1Bh
  5827 00004619 000000000000        <2> 	db 0,0,0,0,0,0				;1Ch
  5828 0000461F 000000000000        <2> 	db 0,0,0,0,0,0				;1Dh
  5829 00004625 6141A085E041        <2> 	db 'a','A',0xA0,133,224,'A'	;1Eh
  5830 0000462B 73531500E5E4        <2> 	db 's','S',21,0,229,228		;1Fh
  5831 00004631 6444F800EB7F        <2> 	db 'd','D',0xF8,0,235,127	;20h
  5832 00004637 66469F00EDE8        <2> 	db 'f','F',159,0,237,232	;21h
  5833 0000463D 6747000079E2        <2> 	db 'g','G',0,0,'y',226		;22h
  5834 00004643 684800006E48        <2> 	db 'h','H',0,0,'n','H'		;23h
  5835 00004649 6A4A00000000        <2> 	db 'j','J',0,0,0,0			;24h
  5836 0000464F 6B4B00006B4B        <2> 	db 'k','K',0,0,'k','K'		;25h
  5837 00004655 6C4C0000E9E9        <2> 	db 'l','L',0,0,233,233		;26h
  5838 0000465B 3B3A14000000        <2> 	db ';',':',20,0,0,0			;27h
  5839 00004661 272200000000        <2> 	db 27h,22h,0,0,0,0			;28h
  5840 00004667 607E00000000        <2> 	db '`','~',0,0,0,0			;29h
  5841 0000466D 000000000000        <2> 	db 0,0,0,0,0,0				;2Ah
  5842 00004673 5C7CAAB30000        <2> 	db 92,'|',170,179,0,0		;2Bh
  5843 00004679 7A5A91927A5A        <2> 	db 'z','Z',145,146,'z','Z'	;2Ch
  5844 0000467F 7858000000F0        <2> 	db 'x','X',0,0,0,240		;2Dh
  5845 00004685 634387800000        <2> 	db 'c','C',135,128,0,0		;2Eh
  5846 0000468B 765600000000        <2> 	db 'v','V',0,0,0,0			;2Fh
  5847 00004691 62420000E142        <2> 	db 'b','B',0,0,225,'B'		;30h
  5848 00004697 6E4EA4A5764E        <2> 	db 'n','N',0xA4,0xA5,'v','N'	;31h
  5849 0000469D 6D4D0000E64D        <2> 	db 'm','M',0,0,230,'M'		;32h
  5850 000046A3 2C3CF3AE0000        <2> 	db ',','<',0xF3,174,0,0		;33h
  5851 000046A9 2E3EF2AF0000        <2> 	db '.','>',0xF2,175,0,0		;34h
  5852 000046AF 2F3FA8000000        <2> 	db '/','?',0xA8,0,0,0		;35h
  5853 000046B5 000000000000        <2> 	db 0,0,0,0,0,0				;36h
  5854 000046BB 000000000000        <2> 	db 0,0,0,0,0,0				;37h
  5855 000046C1 000000000000        <2> 	db 0,0,0,0,0,0				;38h
  5856 000046C7 202000000000        <2> 	db ' ',' ',0,0,0,0			;39h
  5857                              <2> noscan:
  5858                              <2> 
  5859                              <1> %endif
  5860                              <1> ;drivers will soon be handled intelligently
  5861                              <1> ;every driver's source will be scanned for a .init function
  5862                              <1> ;that will be called and if it returns 0
  5863                              <1> ;the hardware was found and the driver initialized properly
  5864                              <1> initialize:
  5865                              <1> ;Now I will initialise the interrupt controllers and remap irq's
  5866 000046CD E814000000          <1> 	call .pic
  5867 000046D2 E83C000000          <1> 	call .pit
  5868 000046D7 E85E000000          <1> 	call .fpu
  5869 000046DC E86F000000          <1> 	call .sse
  5870 000046E1 31C0                <1> 	xor eax, eax
  5871 000046E3 31C9                <1> 	xor ecx, ecx
  5872                              <1> %ifdef sound.included
  5873                              <1> 	call sblaster.init
  5874                              <1> %endif
  5875                              <1> %ifdef io.serial
  5876                              <1> 	call serial.init
  5877                              <1> %endif
  5878 000046E5 C3                  <1> 	ret
  5879                              <1> 	
  5880                              <1> .pic:
  5881 000046E6 B011                <1> 	mov al, 0x11
  5882 000046E8 E620                <1> 	out 0x20, al
  5883 000046EA E6A0                <1> 	out 0xA0, al
  5884 000046EC B040                <1> 	mov al, 0x40	;interrupt for master
  5885 000046EE E621                <1> 	out 0x21, al
  5886 000046F0 B048                <1> 	mov al, 0x48	;interrupt for slave
  5887 000046F2 E6A1                <1> 	out 0xA1, al
  5888 000046F4 B004                <1> 	mov al, 4
  5889 000046F6 E621                <1> 	out 0x21, al
  5890 000046F8 B002                <1> 	mov al, 2
  5891 000046FA E6A1                <1> 	out 0xA1, al
  5892 000046FC B001                <1> 	mov al, 0x1
  5893 000046FE E621                <1> 	out 0x21, al
  5894 00004700 B001                <1> 	mov al, 0x1
  5895 00004702 E6A1                <1> 	out 0xA1, al
  5896                              <1> 	;masks are set to zero so as not to mask
  5897 00004704 30C0                <1> 	xor al, al
  5898 00004706 E621                <1> 	out 0x21, al
  5899 00004708 30C0                <1> 	xor al, al
  5900 0000470A E6A1                <1> 	out 0xA1, al
  5901 0000470C B020                <1> 	mov al, 0x20
  5902 0000470E E6A0                <1> 	out 0xA0, al
  5903 00004710 E620                <1> 	out 0x20, al
  5904 00004712 C3                  <1> 	ret
  5905                              <1> .pit:
  5906                              <1> 	;initialize the PIT
  5907 00004713 66A1[2A020000]      <1> 	mov ax, [pitdiv] ;this is the divider for the PIT
  5908 00004719 E640                <1> 	out 0x40, al
  5909 0000471B 66C1C008            <1> 	rol ax, 8
  5910 0000471F E640                <1> 	out 0x40, al
  5911                              <1> 	;enable rtc interrupt
  5912 00004721 B00B                <1> 	mov al, 0xB
  5913 00004723 E670                <1> 	out 0x70, al
  5914 00004725 66C1C008            <1> 	rol ax, 8
  5915 00004729 E471                <1> 	in al, 0x71
  5916 0000472B 66C1C008            <1> 	rol ax, 8
  5917 0000472F E670                <1> 	out 0x70, al
  5918 00004731 66C1C008            <1> 	rol ax, 8
  5919 00004735 0C40                <1> 	or al, 0x40
  5920 00004737 E671                <1> 	out 0x71, al
  5921 00004739 C3                  <1> 	ret
  5922                              <1> .fpu:
  5923                              <1> 	;And now to initialize the fpu
  5924 0000473A 0F20E0              <1> 	mov eax, cr4
  5925 0000473D 0D00020000          <1> 	or eax, 0x200
  5926 00004742 0F22E0              <1> 	mov cr4, eax
  5927 00004745 B87F0B0000          <1> 	mov eax, 0xB7F
  5928 0000474A 50                  <1> 	push eax
  5929 0000474B D92C24              <1> 	fldcw [esp]
  5930 0000474E 58                  <1> 	pop eax
  5931 0000474F C3                  <1> 	ret
  5932                              <1> 	
  5933                              <1> .sse:
  5934 00004750 0F20C0              <1> 	mov eax, cr0
  5935 00004753 24FB                <1> 	and al, 11111011b
  5936 00004755 0C02                <1> 	or al, 00000010b
  5937 00004757 0F22C0              <1> 	mov cr0, eax
  5938 0000475A 0F20E0              <1> 	mov eax, cr4
  5939 0000475D 660D0006            <1> 	or ax, 0000011000000000b
  5940 00004761 0F22E0              <1> 	mov cr4, eax
  5941 00004764 C3                  <1> 	ret
  5942                                      %include "source/pci.asm"
  5943 00004765 00                  <1> pcibus		db 0
  5944 00004766 00                  <1> pcidevice	db 0
  5945 00004767 00                  <1> pcifunction	db 0
  5946 00004768 00                  <1> pciregister	db 0
  5947 00004769 00                  <1> pcireqtype db 0
  5948                              <1> 
  5949                              <1> getpciport:
  5950 0000476A B001                <1> 	mov al, 1
  5951 0000476C A2[69470000]        <1> 	mov [pcireqtype], al
  5952 00004771 E916000000          <1> 	jmp searchpci
  5953                              <1> pcidump:
  5954 00004776 31C0                <1> 	xor eax, eax
  5955 00004778 A2[67470000]        <1> 	mov [pcifunction], al
  5956 0000477D A2[65470000]        <1> 	mov [pcibus], al
  5957 00004782 A2[66470000]        <1> 	mov [pcidevice], al
  5958 00004787 A2[69470000]        <1> 	mov [pcireqtype], al
  5959                              <1> searchpci:		;;return in ebx, start X in pciX
  5960 0000478C 30C0                <1> 	xor al, al
  5961 0000478E A2[68470000]        <1> 	mov [pciregister], al
  5962 00004793 E855010000          <1> 	call getpciaddr
  5963 00004798 BAF80C0000          <1> 	mov edx, 0xCF8
  5964 0000479D EF                  <1> 	out dx, eax	;;request pci config
  5965 0000479E BAFC0C0000          <1> 	mov edx, 0xCFC
  5966 000047A3 ED                  <1> 	in eax, dx 	;;read in pci config
  5967 000047A4 3D0000FFFF          <1> 	cmp eax, 0xFFFF0000
  5968 000047A9 0F8237000000        <1> 	jb near checkpcidevice
  5969                              <1> searchpciret:
  5970                              <1> nextpcidevice:
  5971 000047AF 30C0                <1> 	xor al, al
  5972 000047B1 A2[67470000]        <1> 	mov [pcifunction], al
  5973 000047B6 A0[66470000]        <1> 	mov al, [pcidevice]
  5974 000047BB 3C1F                <1> 	cmp al, 11111b
  5975 000047BD 0F83C1000000        <1> 	jae near nextpcibus
  5976 000047C3 FEC0                <1> 	inc al
  5977 000047C5 A2[66470000]        <1> 	mov [pcidevice], al
  5978 000047CA EBC0                <1> 	jmp searchpci
  5979 000047CC A0[67470000]        <1> 	mov al, [pcifunction]
  5980 000047D1 3C07                <1> 	cmp al, 111b
  5981 000047D3 0F83D6FFFFFF        <1> 	jae near nextpcidevice
  5982 000047D9 FEC0                <1> 	inc al
  5983 000047DB A2[67470000]        <1> 	mov [pcifunction], al
  5984 000047E0 EBAA                <1> 	jmp searchpci
  5985 000047E2 00000000            <1> pcitype: db 0,0,0,0
  5986                              <1> checkpcidevice:
  5987 000047E6 30C0                <1> 	xor al, al
  5988 000047E8 3805[69470000]      <1> 	cmp [pcireqtype], al
  5989 000047EE 0F842B000000        <1> 	je near dumppcidevice
  5990 000047F4 B008                <1> 	mov al, 0x08
  5991 000047F6 A2[68470000]        <1> 	mov [pciregister], al	;;class code, subclass, revision id
  5992 000047FB E8ED000000          <1> 	call getpciaddr
  5993 00004800 BAF80C0000          <1> 	mov edx, 0xCF8
  5994 00004805 EF                  <1> 	out dx, eax
  5995 00004806 BAFC0C0000          <1> 	mov edx, 0xCFC
  5996 0000480B ED                  <1> 	in eax, dx
  5997 0000480C C1C008              <1> 	rol eax, 8
  5998 0000480F 8A1D[E2470000]      <1> 	mov bl, [pcitype]
  5999 00004815 38D8                <1> 	cmp al, bl
  6000 00004817 0F8486000000        <1> 	je near foundpciaddr
  6001 0000481D EB90                <1> 	jmp searchpciret
  6002                              <1> dumppcidevice:
  6003 0000481F 30C0                <1> 	xor al, al
  6004 00004821 A2[68470000]        <1> 	mov [pciregister], al
  6005 00004826 E8C2000000          <1> 	call getpciaddr
  6006 0000482B 89C1                <1> 	mov ecx, eax
  6007 0000482D C605[A72B0000]05    <1> 	mov byte [firsthexshown], 5
  6008 00004834 E883E3FFFF          <1> 	call showhex
  6009                              <1> dumppcidevicelp:
  6010 00004839 A2[68470000]        <1> 	mov [pciregister], al
  6011 0000483E E8AA000000          <1> 	call getpciaddr
  6012 00004843 BAF80C0000          <1> 	mov edx, 0xCF8
  6013 00004848 EF                  <1> 	out dx, eax
  6014 00004849 BAFC0C0000          <1> 	mov edx, 0xCFC
  6015 0000484E ED                  <1> 	in eax, dx
  6016 0000484F 89C1                <1> 	mov ecx, eax
  6017 00004851 A0[68470000]        <1> 	mov al, [pciregister]
  6018 00004856 0404                <1> 	add al, 4
  6019 00004858 C605[A72B0000]05    <1> 	mov byte [firsthexshown], 5
  6020 0000485F E858E3FFFF          <1> 	call showhex
  6021 00004864 3C3C                <1> 	cmp al, 0x3C
  6022 00004866 72D1                <1> 	jb dumppcidevicelp
  6023                              <1> dumppcidn:
  6024                              <1> %ifdef io.serial
  6025                              <1> 	mov esi, line
  6026                              <1> 	call print
  6027                              <1> %else
  6028 00004868 803D[96210000]00    <1> 	cmp byte [charpos], 0
  6029 0000486F 0F843AFFFFFF        <1> 	je near searchpciret
  6030 00004875 BE[D04B0000]        <1> 	mov esi, line
  6031 0000487A E87DD2FFFF          <1> 	call print
  6032                              <1> %endif
  6033 0000487F E92BFFFFFF          <1> 	jmp searchpciret
  6034                              <1> nextpcibus:
  6035 00004884 30C0                <1> 	xor al, al
  6036 00004886 A2[66470000]        <1> 	mov [pcidevice], al
  6037 0000488B A0[65470000]        <1> 	mov al, [pcibus]
  6038 00004890 3C7F                <1> 	cmp al, 1111111b
  6039 00004892 730C                <1> 	jae donesearchpci
  6040 00004894 FEC0                <1> 	inc al
  6041 00004896 A2[65470000]        <1> 	mov [pcibus], al
  6042 0000489B E9ECFEFFFF          <1> 	jmp searchpci
  6043                              <1> donesearchpci:
  6044 000048A0 31D2                <1> 	xor edx, edx
  6045 000048A2 C3                  <1> 	ret
  6046                              <1> foundpciaddr:
  6047 000048A3 B010                <1> 	mov al, 0x10
  6048 000048A5 A2[68470000]        <1> 	mov [pciregister], al
  6049                              <1> findpciioaddr:
  6050 000048AA E83E000000          <1> 	call getpciaddr
  6051 000048AF BAF80C0000          <1> 	mov edx, 0xCF8
  6052 000048B4 EF                  <1> 	out dx, eax
  6053 000048B5 BAFC0C0000          <1> 	mov edx, 0xCFC
  6054 000048BA ED                  <1> 	in eax, dx
  6055 000048BB 89C3                <1> 	mov ebx, eax
  6056 000048BD 81E301000000        <1> 	and ebx, 1
  6057 000048C3 81FB00000000        <1> 	cmp ebx, 0
  6058 000048C9 0F8408000000        <1> 	je near notpciioaddr
  6059 000048CF 2D01000000          <1> 	sub eax, 1
  6060 000048D4 89C2                <1> 	mov edx, eax
  6061 000048D6 C3                  <1> 	ret
  6062                              <1> notpciioaddr:
  6063 000048D7 A0[68470000]        <1> 	mov al, [pciregister]
  6064 000048DC 0404                <1> 	add al, 4
  6065 000048DE 3C28                <1> 	cmp al, 0x28
  6066 000048E0 0F87C9FEFFFF        <1> 	ja near searchpciret
  6067 000048E6 A2[68470000]        <1> 	mov [pciregister], al
  6068 000048EB EBBD                <1> 	jmp findpciioaddr
  6069                              <1> getpciaddr:		;;puts it in eax and ebx
  6070 000048ED 31C0                <1> 			xor eax, eax
  6071 000048EF BB00000080          <1> 			mov ebx, 0x80000000
  6072 000048F4 A0[65470000]        <1> 			mov al, [pcibus]
  6073 000048F9 C1E010              <1> 			shl eax, 16
  6074 000048FC 01C3                <1> 			add ebx, eax
  6075 000048FE 31C0                <1> 			xor eax, eax
  6076 00004900 A0[66470000]        <1> 			mov al, [pcidevice]
  6077 00004905 C1E00B              <1> 			shl eax, 11
  6078 00004908 01C3                <1> 			add ebx, eax
  6079 0000490A 31C0                <1> 			xor eax, eax
  6080 0000490C A0[67470000]        <1> 			mov al, [pcifunction]
  6081 00004911 C1E008              <1> 			shl eax, 8
  6082 00004914 01C3                <1> 			add ebx, eax
  6083 00004916 31C0                <1> 			xor eax, eax
  6084 00004918 A0[68470000]        <1> 			mov al, [pciregister]
  6085 0000491D 01C3                <1> 			add ebx, eax
  6086 0000491F 89D8                <1> 			mov eax, ebx
  6087 00004921 C3                  <1> 			ret
  6088                                      %include "source/disk.asm"
  6089                              <1> ;This loads files using the methods in the loaded driver
  6090                              <1> %ifdef disk.real
  6091                              <1> %include "source/drivers/disk/realmode.asm"
  6092                              <2> diskr:
  6093                              <2> 			;read from disk using real mode-it does not work with large files
  6094                              <2> 			;sector count in cl
  6095                              <2> 			;disk number in ch
  6096                              <2> 			;48 bit address with last 32 bits in ebx
  6097                              <2> 			;buffer in esi
  6098                              <2> 			;puts end of buffer in edi and end lba address in edx
  6099 00004922 880D[4F490000]      <2> 	mov [sdlength], cl
  6100 00004928 891D[50490000]      <2> 	mov [sdaddress], ebx
  6101 0000492E 8935[AE4A0000]      <2> 	mov [oldesireal], esi
  6102 00004934 66BE[5449]          <2> 	mov si, readdiskreal
  6103 00004938 668935[780C0000]    <2> 	mov [realmodeptr], si
  6104 0000493F BE[90490000]        <2> 	mov esi, backfromrealread
  6105 00004944 8935[740C0000]      <2> 	mov [realmodereturn], esi
  6106 0000494A E90EC2FFFF          <2> 	jmp realmode
  6107 0000494F 00                  <2> sdlength db 0
  6108 00004950 00000000            <2> sdaddress dd 0
  6109                              <2> 
  6110                              <2> [BITS 16]
  6111                              <2> readdiskreal:
  6112 00004954 C706[8049]1000      <2> 	mov word [dlen], 0x10
  6113 0000495A C706[8449]0000      <2> 	mov word [daddress], 0
  6114 00004960 C706[8649]0001      <2> 	mov word [dsegm], 0x100
  6115 00004966 66891E[8849]        <2> 	mov [dlbaad], ebx
  6116 0000496B 880E[8249]          <2> 	mov [dreadlen], cl
  6117                              <2> ReadHardDisk:
  6118 0000496F BE[8049]            <2> 	mov si, diskaddresspacket
  6119 00004972 31C0                <2> 	xor ax, ax
  6120 00004974 B442                <2> 	mov ah, 0x42
  6121 00004976 8A16[7F49]          <2> 	mov dl, [dnumber]
  6122 0000497A CD13                <2> 	int 0x13
  6123 0000497C 72F1                <2> 	jc ReadHardDisk
  6124 0000497E C3                  <2> 	ret
  6125                              <2> 
  6126 0000497F 80                  <2> dnumber db 0x80
  6127                              <2> diskaddresspacket:
  6128 00004980 10                  <2> dlen:	db 0x10 ;size of packet
  6129 00004981 00                  <2> 		db 0
  6130 00004982 7F00                <2> dreadlen:	dw 0x7F	;blocks to read=maximum
  6131 00004984 0000                <2> daddress:	dw 0x0	;address 0
  6132 00004986 0001                <2> dsegm:		dw 0x100	;segment
  6133                              <2> 		;start with known value for hd
  6134                              <2> dlbaad:
  6135 00004988 00000000            <2> 	dd 0	;lba address
  6136 0000498C 00000000            <2> 	dd 0
  6137                              <2> [BITS 32]
  6138                              <2> backfromrealread:
  6139 00004990 8B35[AE4A0000]      <2> 	mov esi, [oldesireal]
  6140 00004996 8B1D[50490000]      <2> 	mov ebx, [sdaddress]
  6141 0000499C 31C9                <2> 	xor ecx, ecx
  6142 0000499E 8A0D[4F490000]      <2> 	mov cl, [sdlength]
  6143 000049A4 01CB                <2> 	add ebx, ecx
  6144 000049A6 66B80800            <2> 	mov ax, LINEAR_SEL
  6145 000049AA 8EE0                <2> 	mov fs, ax
  6146 000049AC BF00100000          <2> 	mov edi, 0x1000
  6147 000049B1 B200                <2> 	mov dl, 0
  6148 000049B3 D0E1                <2> 	shl cl, 1
  6149                              <2> copyfromrmodedisk:
  6150 000049B5 648A07              <2> 	mov al, [fs:edi]
  6151 000049B8 8806                <2> 	mov [esi], al
  6152 000049BA 47                  <2> 	inc edi
  6153 000049BB 46                  <2> 	inc esi
  6154 000049BC FECA                <2> 	dec dl
  6155 000049BE 80FA00              <2> 	cmp dl, 0
  6156 000049C1 75F2                <2> 	jne copyfromrmodedisk
  6157 000049C3 FEC9                <2> 	dec cl
  6158 000049C5 B200                <2> 	mov dl, 0
  6159 000049C7 80F900              <2> 	cmp cl, 0
  6160 000049CA 75E9                <2> 	jne copyfromrmodedisk
  6161 000049CC 66B83000            <2> 	mov ax, NEW_DATA_SEL
  6162 000049D0 8EE0                <2> 	mov fs, ax
  6163 000049D2 89F7                <2> 	mov edi, esi
  6164 000049D4 8B35[AE4A0000]      <2> 	mov esi, [oldesireal]
  6165 000049DA 89DA                <2> 	mov edx, ebx
  6166 000049DC 8B1D[50490000]      <2> 	mov ebx, [sdaddress]
  6167 000049E2 C3                  <2> 	ret
  6168                              <2> 	
  6169                              <1> %else
  6170                              <1> 	%ifdef disk.protected
  6171                              <1> 	%include "source/drivers/disk/pata.asm"
  6172                              <1> 	%endif
  6173                              <1> %endif
  6174                              <1> loadfile:	;loads a file with the name buffer's location in edi into location in esi
  6175                              <1> 			;returns with err code in edx and file end in edi
  6176 000049E3 803F00              <1> 	cmp byte [edi], 0
  6177 000049E6 0F8448000000        <1> 	je near nofileload
  6178 000049EC 89FA                <1> 	mov edx, edi
  6179 000049EE BB[F55B0000]        <1> 	mov ebx, diskfileindex
  6180                              <1> nextnamechar:
  6181 000049F3 8A07                <1> 	mov al, [edi]
  6182 000049F5 3C26                <1> 	cmp al, '&'
  6183 000049F7 7440                <1> 	je nullfile
  6184 000049F9 8A23                <1> 	mov ah, [ebx]
  6185 000049FB 47                  <1> 	inc edi
  6186 000049FC 43                  <1> 	inc ebx
  6187 000049FD 88C1                <1> 	mov cl, al
  6188 000049FF 08E1                <1> 	or cl, ah
  6189 00004A01 80F900              <1> 	cmp cl, 0
  6190 00004A04 744E                <1> 	je equalfilenames
  6191 00004A06 80F920              <1> 	cmp cl, ' '
  6192 00004A09 7449                <1> 	je equalfilenames
  6193 00004A0B 3C2A                <1> 	cmp al, '*'
  6194 00004A0D 742B                <1> 	je equalfilenames2
  6195 00004A0F 80FC00              <1> 	cmp ah, 0
  6196 00004A12 7410                <1> 	je nextfilename
  6197 00004A14 3C00                <1> 	cmp al, 0
  6198 00004A16 7404                <1> 	je getebxzero
  6199 00004A18 38E0                <1> 	cmp al, ah
  6200 00004A1A 74D7                <1> 	je nextnamechar
  6201                              <1> getebxzero:
  6202 00004A1C 8A23                <1> 	mov ah, [ebx]
  6203 00004A1E 43                  <1> 	inc ebx
  6204 00004A1F 80FC00              <1> 	cmp ah, 0
  6205 00004A22 75F8                <1> 	jne getebxzero
  6206                              <1> nextfilename:
  6207 00004A24 81C308000000        <1> 	add ebx, 8		;next descriptor
  6208 00004A2A 89D7                <1> 	mov edi, edx
  6209 00004A2C 81FB[885D0000]      <1> 	cmp ebx, enddiskfileindex
  6210 00004A32 72BF                <1> 	jb nextnamechar
  6211                              <1> nofileload:
  6212 00004A34 BA94010000          <1> 	mov edx, 404	;indicate not found error
  6213                              <1> nullfile:
  6214 00004A39 C3                  <1> 	ret
  6215                              <1> equalfilenames2:
  6216 00004A3A 81EB02000000        <1> 	sub ebx, 2
  6217                              <1> eqfilefind:
  6218 00004A40 43                  <1> 	inc ebx
  6219 00004A41 81FB[885D0000]      <1> 	cmp ebx, enddiskfileindex
  6220 00004A47 0F83E7FFFFFF        <1> 	jae near nofileload
  6221 00004A4D 8A03                <1> 	mov al, [ebx]
  6222 00004A4F 3C00                <1> 	cmp al, 0
  6223 00004A51 75ED                <1> 	jne eqfilefind
  6224 00004A53 43                  <1> 	inc ebx
  6225                              <1> equalfilenames:
  6226 00004A54 8B4304              <1> 	mov eax, [ebx + 4] 	;put file size in eax
  6227 00004A57 8B1B                <1> 	mov ebx, [ebx]		;put file beginning in ebx
  6228 00004A59 031D[8A5D0000]      <1> 	add ebx, [lbaad]	;add offset to solleros
  6229 00004A5F 31C9                <1> 	xor ecx, ecx
  6230 00004A61 88C1                <1> 	mov cl, al			;get excess number of sectors
  6231 00004A63 C0E102              <1> 	shl cl, 2
  6232 00004A66 C0E902              <1> 	shr cl, 2			;cut off at 64
  6233 00004A69 29C8                <1> 	sub eax, ecx		;get rid of excess sectors
  6234 00004A6B B500                <1> 	mov ch, 0			;drive 0
  6235 00004A6D C1E806              <1> 	shr eax, 6			;get number of 64 sector tracks
  6236                              <1> loaddiskfile:			;tracks in eax, excess sectors in cl, drive in ch, buffer in esi, address in ebx
  6237 00004A70 A3[B24A0000]        <1> 	mov [filetracks], eax
  6238 00004A75 89F7                <1> 	mov edi, esi		;just in case cl is 0
  6239 00004A77 89DA                <1> 	mov edx, ebx
  6240 00004A79 80F900              <1> 	cmp cl, 0
  6241 00004A7C 7405                <1> 	je copytracksforfile
  6242 00004A7E E89FFEFFFF          <1> 	call diskr	;take care of excess sectors
  6243                              <1> copytracksforfile:
  6244 00004A83 A1[B24A0000]        <1> 	mov eax, [filetracks]
  6245 00004A88 3D00000000          <1> 	cmp eax, 0
  6246 00004A8D 7419                <1> 	je donecopyfile
  6247 00004A8F 48                  <1> 	dec eax
  6248 00004A90 A3[B24A0000]        <1> 	mov [filetracks], eax
  6249 00004A95 89D3                <1> 	mov ebx, edx	;get end lba
  6250 00004A97 B140                <1> 	mov cl, 0x40 ;for compatability with BIOS it uses 64 instead of 128
  6251 00004A99 8A2D[895D0000]      <1> 	mov ch, [DriveNumber]
  6252 00004A9F 89FE                <1> 	mov esi, edi	;reset buffer
  6253 00004AA1 E87CFEFFFF          <1> 	call diskr
  6254 00004AA6 EBDB                <1> 	jmp copytracksforfile
  6255                              <1> donecopyfile:
  6256 00004AA8 BA00000000          <1> 	mov edx, 0	;no error
  6257 00004AAD C3                  <1> 	ret
  6258                              <1> 
  6259 00004AAE 00000000            <1> oldesireal dd 0
  6260 00004AB2 00000000            <1> filetracks dd 0
  6261 00004AB6 00                  <1> lbad1 db 0
  6262 00004AB7 00                  <1> lbad2 db 0
  6263 00004AB8 00                  <1> lbad3 db 0
  6264 00004AB9 00                  <1> lbad4 db 0
  6265 00004ABA 00                  <1> lbad5 db 0
  6266 00004ABB 00                  <1> lbad6 db 0
  6267 00004ABC 6400                <1> segments dw 100
  6268                              <1> 
  6269                              <1> 
  6270                              <1> 	
  6271                                      %include "source/threads.asm"
  6272                              <1> %ifdef threads.included	
  6273                              <1> nwcmdst:
  6274 00004ABE 31C0                <1> 	xor eax, eax
  6275 00004AC0 BC[6E6F0000]        <1> 	mov esp, stackend
  6276 00004AC5 A2[824B0000]        <1> 	mov [threadson], al
  6277 00004ACA A3[834B0000]        <1> 	mov [currentthread], eax
  6278 00004ACF 0504000000          <1> 	add eax, 4
  6279 00004AD4 A3[7E4B0000]        <1> 	mov [lastthread], eax
  6280 00004AD9 FB                  <1> 	sti
  6281 00004ADA E909DCFFFF          <1> 	jmp nwcmd
  6282                              <1> 
  6283                              <1> nomorethreadspace:
  6284 00004ADF BE[F54A0000]        <1> 	mov esi, nmts
  6285 00004AE4 E813D0FFFF          <1> 	call print
  6286 00004AE9 C605[824B0000]00    <1> 	mov byte [threadson], 0
  6287 00004AF0 E9F3DBFFFF          <1> 	jmp nwcmd
  6288 00004AF5 546872656164204F76- <1> nmts	db "Thread Overflow",10,0
  6289 00004AFE 6572666C6F770A00    <1>
  6290                              <1> 
  6291                              <1> nomorestackspace:
  6292 00004B06 BE[124B0000]        <1> 	mov esi, nmss
  6293 00004B0B E8ECCFFFFF          <1> 	call print
  6294 00004B10 EBAC                <1> 	jmp nwcmdst
  6295 00004B12 537461636B204F7665- <1> nmss	db "Stack Overflow",10,0
  6296 00004B1B 72666C6F770A00      <1>
  6297                              <1> 	
  6298                              <1> threadswitch:
  6299 00004B22 FA                  <1> 	cli
  6300 00004B23 60                  <1> 	pushad
  6301 00004B24 BF[2B010100]        <1> 	mov edi, threadlist
  6302 00004B29 A1[834B0000]        <1> 	mov eax, [currentthread]
  6303 00004B2E 40                  <1> 	inc eax
  6304 00004B2F A3[834B0000]        <1> 	mov [currentthread], eax
  6305 00004B34 6648                <1> 	dec ax
  6306 00004B36 C1E002              <1> 	shl eax, 2
  6307 00004B39 01C7                <1> 	add edi, eax
  6308 00004B3B 8927                <1> 	mov [edi], esp
  6309 00004B3D 81C704000000        <1> 	add edi, 4
  6310 00004B43 81FF[2B110100]      <1> 	cmp edi, threadlistend
  6311 00004B49 0F830D000000        <1> 	jae near nookespthread
  6312 00004B4F 8B07                <1> 	mov eax, [edi]
  6313 00004B51 3D00000000          <1> 	cmp eax, 0
  6314 00004B56 0F8519000000        <1> 	jne near okespthread
  6315                              <1> nookespthread:
  6316 00004B5C BF[2B010100]        <1> 	mov edi, threadlist
  6317 00004B61 31C0                <1> 	xor eax, eax
  6318 00004B63 A3[834B0000]        <1> 	mov [currentthread], eax
  6319 00004B68 8B07                <1> 	mov eax, [edi]
  6320 00004B6A 3D00000000          <1> 	cmp eax, 0
  6321 00004B6F 0F8449FFFFFF        <1> 	je near nwcmdst
  6322                              <1> okespthread:
  6323 00004B75 89C4                <1> 	mov esp, eax
  6324 00004B77 B020                <1> 	mov al, 0x20
  6325 00004B79 E620                <1> 	out 0x20, al
  6326 00004B7B 61                  <1> 	popad
  6327 00004B7C FB                  <1> 	sti
  6328 00004B7D CF                  <1> 	iret
  6329                              <1> 
  6330                              <1> %endif
  6331 00004B7E 04000000            <1> 	lastthread dd 4
  6332 00004B82 00                  <1> 	threadson db 0
  6333 00004B83 00000000            <1> 	currentthread dd 0
  6334                                  %ifdef gui.included
  6335                                      %include "source/gui/gui.asm"
  6336                                  %endif
  6337                                      %include "source/data.asm"
  6338 00004B87 626F6F742E736800    <1> 	bootfilename db "boot.sh",0
  6339 00004B8F 73687573683A2000    <1> 	notfound1 db "shush: ",0
  6340 00004B97 3A20636F6D6D616E64- <1> 	notfound2 db  ": command not found",10,0
  6341 00004BA0 206E6F7420666F756E- <1>
  6342 00004BA9 640A00              <1>
  6343 00004BAC 757365726E616D653A- <1> 	userask db "username:",0
  6344 00004BB5 00                  <1>
  6345 00004BB6 70617373776F72643A- <1> 	pwdask	db	"password:",0
  6346 00004BBF 00                  <1>
  6347 00004BC0 40                  <1> 	computer db "@"
  6348                              <1> %ifdef io.serial
  6349                              <1> 	computername	db	"SollerOS.",io.serial," ",0
  6350                              <1> %else
  6351 00004BC1 536F6C6C65724F5320- <1> 	computername	db	"SollerOS ",0
  6352 00004BCA 00                  <1>
  6353                              <1> %endif
  6354 00004BCB 5D242000            <1> 	endprompt db "]$ ",0
  6355 00004BCF 0D                  <1> 	crlf 	db  13
  6356 00004BD0 0A00                <1> 	line	db	10,0
  6357                              <1> 	userlst:
  6358 00004BD2 726F6F7400          <1> 			db "root",0
  6359 00004BD7 617765736F6D65706F- <1> 			db "awesomepower",0
  6360 00004BE0 77657200            <1>
  6361 00004BE4 7573657200          <1> 			db "user",0
  6362 00004BE9 70617373776F726400  <1> 			db "password",0
  6363 00004BF2 6E00                <1> 			db "n",0	;;abuse for quick entry-a quick double n followed by a double enter will get you in
  6364 00004BF4 00                  <1> 			db 0
  6365                              <1> 	userlstend:
  6366                              <1> 	
  6367                              <1> %ifdef io.serial
  6368                              <1> %else
  6369 00004BF4 <incbin>            <1> fonts:	incbin "source/precompiled/fonts.pak"
  6370                              <1> fontend:
  6371                              <1> %endif
  6372                              <1> osend:	;this is the end of the operating system's space on disk
  6373                                      %include "build/fileindex.asm"
  6374                              <1> diskfileindex:
  6375 00005BF5 617267746573742E65- <1> db "argtest.elf",0
  6376 00005BFE 6C6600              <1>
  6377 00005C01 2F000000            <1> dd (f0-$$)/512
  6378 00005C05 06010000            <1> dd (f1-f0)/512
  6379 00005C09 626F6F742E736800    <1> db "boot.sh",0
  6380 00005C11 35010000            <1> dd (f1-$$)/512
  6381 00005C15 01000000            <1> dd (f2-f1)/512
  6382 00005C19 63686172746573742E- <1> db "chartest.elf",0
  6383 00005C22 656C6600            <1>
  6384 00005C26 36010000            <1> dd (f2-$$)/512
  6385 00005C2A 26010000            <1> dd (f3-f2)/512
  6386 00005C2E 646F73746573742E63- <1> db "dostest.com",0
  6387 00005C37 6F6D00              <1>
  6388 00005C3A 5C020000            <1> dd (f3-$$)/512
  6389 00005C3E 01000000            <1> dd (f4-f3)/512
  6390 00005C42 6578656300          <1> db "exec",0
  6391 00005C47 5D020000            <1> dd (f4-$$)/512
  6392 00005C4B 01000000            <1> dd (f5-f4)/512
  6393 00005C4F 66696E616C636F756E- <1> db "finalcount.snd",0
  6394 00005C58 742E736E6400        <1>
  6395 00005C5E 5E020000            <1> dd (f5-$$)/512
  6396 00005C62 01000000            <1> dd (f6-f5)/512
  6397 00005C66 666F726B00          <1> db "fork",0
  6398 00005C6B 5F020000            <1> dd (f6-$$)/512
  6399 00005C6F 01000000            <1> dd (f7-f6)/512
  6400 00005C73 68656C6C6F776F726C- <1> db "helloworld.elf",0
  6401 00005C7C 642E656C6600        <1>
  6402 00005C82 60020000            <1> dd (f7-$$)/512
  6403 00005C86 D6010000            <1> dd (f8-f7)/512
  6404 00005C8A 696E7400            <1> db "int",0
  6405 00005C8E 36040000            <1> dd (f8-$$)/512
  6406 00005C92 01000000            <1> dd (f9-f8)/512
  6407 00005C96 6C6F7374776F6F6473- <1> db "lostwoods.snd",0
  6408 00005C9F 2E736E6400          <1>
  6409 00005CA4 37040000            <1> dd (f9-$$)/512
  6410 00005CA8 01000000            <1> dd (f10-f9)/512
  6411 00005CAC 6D6172696F2E736E64- <1> db "mario.snd",0
  6412 00005CB5 00                  <1>
  6413 00005CB6 38040000            <1> dd (f10-$$)/512
  6414 00005CBA 01000000            <1> dd (f11-f10)/512
  6415 00005CBE 736F6C6C65726F732E- <1> db "solleros.bmp",0
  6416 00005CC7 626D7000            <1>
  6417 00005CCB 39040000            <1> dd (f11-$$)/512
  6418 00005CCF B0020000            <1> dd (f12-f11)/512
  6419 00005CD3 736F6C6C65726F732E- <1> db "solleros.txt",0
  6420 00005CDC 74787400            <1>
  6421 00005CE0 E9060000            <1> dd (f12-$$)/512
  6422 00005CE4 01000000            <1> dd (f13-f12)/512
  6423 00005CE8 736F6E676F74696D65- <1> db "songotime.snd",0
  6424 00005CF1 2E736E6400          <1>
  6425 00005CF6 EA060000            <1> dd (f13-$$)/512
  6426 00005CFA 01000000            <1> dd (f14-f13)/512
  6427 00005CFE 73736500            <1> db "sse",0
  6428 00005D02 EB060000            <1> dd (f14-$$)/512
  6429 00005D06 02000000            <1> dd (f15-f14)/512
  6430 00005D0A 737464696F74657374- <1> db "stdiotest.elf",0
  6431 00005D13 2E656C6600          <1>
  6432 00005D18 ED060000            <1> dd (f15-$$)/512
  6433 00005D1C 27010000            <1> dd (f16-f15)/512
  6434 00005D20 74656C7900          <1> db "tely",0
  6435 00005D25 14080000            <1> dd (f16-$$)/512
  6436 00005D29 01000000            <1> dd (f17-f16)/512
  6437 00005D2D 74696D65746573742E- <1> db "timetest.elf",0
  6438 00005D36 656C6600            <1>
  6439 00005D3A 15080000            <1> dd (f17-$$)/512
  6440 00005D3E 04010000            <1> dd (f18-f17)/512
  6441 00005D42 7475746F7269616C2E- <1> db "tutorial.sh",0
  6442 00005D4B 736800              <1>
  6443 00005D4E 19090000            <1> dd (f18-$$)/512
  6444 00005D52 03000000            <1> dd (f19-f18)/512
  6445 00005D56 756E667300          <1> db "unfs",0
  6446 00005D5B 1C090000            <1> dd (f19-$$)/512
  6447 00005D5F 02000000            <1> dd (f20-f19)/512
  6448 00005D63 766963746F72792E77- <1> db "victory.wav",0
  6449 00005D6C 617600              <1>
  6450 00005D6F 1E090000            <1> dd (f20-$$)/512
  6451 00005D73 16000000            <1> dd (f21-f20)/512
  6452 00005D77 5F696D672E62696E00  <1> db "_img.bin",0
  6453 00005D80 34090000            <1> dd (f21-$$)/512
  6454 00005D84 D7020000            <1> dd (f22-f21)/512
  6455                              <1> enddiskfileindex:
  6456                              <1> 
  6457                                      %include "source/bss.asm"
  6458                              <1> align 4, nop
  6459                              <1> bssstart: equ $
  6460                              <1> guion equ bssstart
  6461                              <1> DriveNumber equ guion + 1
  6462                              <1> lbaad equ DriveNumber + 1
  6463                              <1> memlistbuf equ lbaad + 4
  6464                              <1> memlistend equ memlistbuf + 576
  6465                              <1> bsscopy equ memlistend
  6466                              <1> initialstack equ bsscopy
  6467                              <1> stackend equ initialstack + 4000
  6468                              <1> fileindex: equ stackend + 96
  6469                              <1> fileindexend: equ fileindex + 1024
  6470                              <1> previousstack equ fileindexend
  6471                              <1> lastfolderloc equ previousstack + 4
  6472                              <1> currentfolderloc equ lastfolderloc + 4
  6473                              <1> currentfolder equ currentfolderloc + 4
  6474                              <1> currentfolderend equ currentfolder + 512
  6475                              <1> uid equ currentfolderend
  6476                              <1> ranboot equ uid + 4
  6477                              <1> IFON equ ranboot + 1
  6478                              <1> IFTRUE equ IFON + 1
  6479                              <1> BATCHPOS equ IFTRUE + 100
  6480                              <1> BATCHISON equ BATCHPOS + 4
  6481                              <1> LOOPON equ BATCHISON + 1
  6482                              <1> LOOPPOS	equ LOOPON + 1
  6483                              <1> variables: equ LOOPPOS + 4
  6484                              <1> varend: equ variables + 4096
  6485                              <1> buftxt2: equ varend
  6486                              <1> buftxt: equ buftxt2 + 1024
  6487                              <1> buftxtend: equ buftxt + 1024
  6488                              <1> buf2: equ buftxtend
  6489                              <1> numbuf: equ buf2 + 20
  6490                              <1> %ifdef io.serial
  6491                              <1> 	lastcommandpos equ numbuf + 1
  6492                              <1> %else
  6493                              <1> 	%ifdef gui.included
  6494                              <1> 		graphicstable equ numbuf + 1 ;w type, dw datalocation, w locationx, w locationy, w selected, dw code
  6495                              <1> 		graphicstableend equ graphicstable + 200h
  6496                              <1> 		mousecolorbuf equ graphicstableend ;where the gui under the mouse is stored
  6497                              <1> 		mcolorend equ mousecolorbuf + 256
  6498                              <1> 		videobuf equ mcolorend + 1	;1680x1050 pixels in characters
  6499                              <1> 		videobufend	equ videobuf + 210*65*2
  6500                              <1> 		videobuf2 equ videobufend
  6501                              <1> 		videobuf2end equ videobuf2 + 210*65*2
  6502                              <1> 	%else
  6503                              <1> 		videobuf equ numbuf + 1
  6504                              <1> 		videobufend equ videobuf + 80*30*2
  6505                              <1> 		videobuf2 equ videobufend
  6506                              <1> 		videobuf2end equ videobuf2 + 160*64*2
  6507                              <1> 	%endif
  6508                              <1> 	lastcommandpos: equ videobuf2end
  6509                              <1> %endif
  6510                              <1> 	commandbufpos: equ lastcommandpos + 4
  6511                              <1> 	commandbuf: equ commandbufpos + 4
  6512                              <1> 	commandbufend: equ commandbuf + 4096 ;this is where kernel space only ends, the rest is for threading
  6513                              <1> %ifdef rtl8139.included
  6514                              <1> 	rbuffstart: equ commandbufend ;for use with networking
  6515                              <1> 	rbuffend equ rbuffstart + 8212
  6516                              <1> %else
  6517                              <1> 	rbuffstart equ commandbufend
  6518                              <1> 	rbuffend equ commandbufend
  6519                              <1> %endif
  6520                              <1> %ifdef threads.included
  6521                              <1> 	threadlist: equ rbuffend ;this buffer will hold the stack locations of all of the threads, up to 2048
  6522                              <1> 	threadlistend: equ threadlist + 1024*4
  6523                              <1> 	stacks:	equ threadlistend ;i use SS now for proper stack management. This makes sure stacks never screw with other memory
  6524                              <1> 	stack1: equ stacks + 1024  ;woah, thats a lot of space for stacks
  6525                              <1> 	bssend equ stack1 + 1024*1024
  6526                              <1> %else
  6527                              <1> 	bssend equ rbuffend
  6528                              <1> %endif
  6529                              <1> dosprogloc equ 0x400000 ;from here on, it is not kernel space so apps can be loaded here.
  6530                                      %include "build/files.asm"
  6531 00005D88 00<rept>            <1> align 512,db 0
  6532                              <1> f0:
  6533 00005D88 <incbin>            <1> incbin "included/argtest.elf"
  6534 000268F2 00<rept>            <1> align 512,db 0
  6535                              <1> f1:
  6536 000268F2 <incbin>            <1> incbin "included/boot.sh"
  6537 00026A33 00<rept>            <1> align 512,db 0
  6538                              <1> f2:
  6539 00026A33 <incbin>            <1> incbin "included/chartest.elf"
  6540 0004B6DB 00<rept>            <1> align 512,db 0
  6541                              <1> f3:
  6542 0004B6DB <incbin>            <1> incbin "included/dostest.com"
  6543 0004B92B 00<rept>            <1> align 512,db 0
  6544                              <1> f4:
  6545 0004B92B <incbin>            <1> incbin "included/exec"
  6546 0004BAE9 00<rept>            <1> align 512,db 0
  6547                              <1> f5:
  6548 0004BAE9 <incbin>            <1> incbin "included/finalcount.snd"
  6549 0004BD02 00<rept>            <1> align 512,db 0
  6550                              <1> f6:
  6551 0004BD02 <incbin>            <1> incbin "included/fork"
  6552 0004BF62 00<rept>            <1> align 512,db 0
  6553                              <1> f7:
  6554 0004BF62 <incbin>            <1> incbin "included/helloworld.elf"
  6555 00086BE3 00<rept>            <1> align 512,db 0
  6556                              <1> f8:
  6557 00086BE3 <incbin>            <1> incbin "included/int"
  6558 00086DA9 00<rept>            <1> align 512,db 0
  6559                              <1> f9:
  6560 00086DA9 <incbin>            <1> incbin "included/lostwoods.snd"
  6561 00086E56 00<rept>            <1> align 512,db 0
  6562                              <1> f10:
  6563 00086E56 <incbin>            <1> incbin "included/mario.snd"
  6564 0008703A 00<rept>            <1> align 512,db 0
  6565                              <1> f11:
  6566 0008703A <incbin>            <1> incbin "included/solleros.bmp"
  6567 000DD1E6 00<rept>            <1> align 512,db 0
  6568                              <1> f12:
  6569 000DD1E6 <incbin>            <1> incbin "included/solleros.txt"
  6570 000DD376 00<rept>            <1> align 512,db 0
  6571                              <1> f13:
  6572 000DD376 <incbin>            <1> incbin "included/songotime.snd"
  6573 000DD44A 00<rept>            <1> align 512,db 0
  6574                              <1> f14:
  6575 000DD44A <incbin>            <1> incbin "included/sse"
  6576 000DD8A8 00<rept>            <1> align 512,db 0
  6577                              <1> f15:
  6578 000DD8A8 <incbin>            <1> incbin "included/stdiotest.elf"
  6579 00102643 00<rept>            <1> align 512,db 0
  6580                              <1> f16:
  6581 00102643 <incbin>            <1> incbin "included/tely"
  6582 001029C0 00<rept>            <1> align 512,db 0
  6583                              <1> f17:
  6584 001029C0 <incbin>            <1> incbin "included/timetest.elf"
  6585 0012303D 00<rept>            <1> align 512,db 0
  6586                              <1> f18:
  6587 0012303D <incbin>            <1> incbin "included/tutorial.sh"
  6588 00123752 00<rept>            <1> align 512,db 0
  6589                              <1> f19:
  6590 00123752 <incbin>            <1> incbin "included/unfs"
  6591                              <1> align 512,db 0
  6592                              <1> f20:
  6593 00123752 <incbin>            <1> incbin "included/victory.wav"
  6594 00126748 00<rept>            <1> align 512,db 0
  6595                              <1> f21:
  6596 00126748 <incbin>            <1> incbin "included/_img.bin"
  6597                              <1> align 512,db 0
  6598                              <1> f22:
