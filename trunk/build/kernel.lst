     1                                  [map symbols build/kernel.map]
     2                                  %include "config.asm"
     3                              <1> ;These flags are used to configure options as on, put a simicolon in front of it to not configure it
     4                              <1> 
     5                              <1> %define gui.included
     6                              <1> ;Turn on the gui
     7                              <1> 
     8                              <1> %define gui.alphablending
     9                              <1> ;Make the terminal in the GUI 25% transparent
    10                              <1> 
    11                              <1> %define gui.background
    12                              <1> ;Make the GUI have a loadable background
    13                              <1> 
    14                              <1> ;%define io.serial "1"
    15                              <1> ;Use the specified serial port for input and output instead of the keyboard and screen
    16                              <1> ;If the gui is included this should not be enabled
    17                              <1> 
    18                              <1> %define terminal.vsync
    19                              <1> ;Uses the RTC to automatically update the terminal at ~64Hz
    20                              <1> 
    21                              <1> %define hardware.automatic
    22                              <1> ;Automatically load the sound and network drivers.
    23                              <1> 
    24                              <1> %define threads.included
    25                              <1> ;Include the thread testing stuff-this uses a relatively large amount of memory
    26                              <1> 
    27                              <1> %define exceptions.included
    28                              <1> ;Display debugging information should crashes occur-also uses quite a bit of memory
    29                              <1> 
    30                              <1> ;%define disk.protected
    31                              <1> ;Use protected mode instead of real mode for disk access-this allows for multitasking
    32                              <1> 
    33                              <1> %define disk.real
    34                              <1> ;Use real mode for disk access-this gives greater compatibility
    35                              <1> 
    36                              <1> %define sound.included
    37                              <1> ;This includes the sound drivers
    38                              <1> 
    39                              <1> %define network.included
    40                              <1> ;This includes the network stack
    41                              <1> ;%define rtl8169.included
    42                              <1> ;This includes the RTL8169 drivers
    43                              <1> 
    44                              <1> %define rtl8139.included
    45                              <1> ;This includes the RTL8139 drivers
    46                              <1> 
    47                              <1> %define ne2000.included
    48                              <1> ;This includes the ne2000 drivers
    49                              <1> 
    50                              <1> ;%define sector.debug
    51                              <1> ;Dump the contents of the first sector of SollerOS
    52                              <1> 
    53                              <1> %define system.simple 
    54                              <1> ;The smallest possible system, overrides all options
    55                              <1> 
    56                              <1> ;FIX DEPENDANCIES
    57                              <1> %ifdef gui.included
    58                              <1> 	%undef io.serial
    59                              <1> %else
    60                              <1> 	%undef gui.alphablending
    61                              <1> 	%undef gui.background
    62                              <1> %endif
    63                              <1> %ifdef disk.protected
    64                              <1> 	%undef disk.real
    65                              <1> %endif
    66                              <1> %ifdef network.included
    67                              <1> %else
    68                              <1> 	%undef ne2000.included
    69                              <1> 	%undef rtl8139.included
    70                              <1> 	%undef rtl8169.included
    71                              <1> %endif
    72                              <1> %ifdef system.simple
    73                              <1> 	%define io.serial "1"
    74                              <1> 	%define disk.real
    75                              <1> 	%undef gui.included
    76                              <1> 	%undef gui.alphablending
    77                              <1> 	%undef gui.background
    78                              <1> 	%undef terminal.vsync
    79                              <1> 	%undef hardware.automatic
    80                              <1> 	%undef threads.included
    81                              <1> 	%undef exceptions.included
    82                              <1> 	%undef disk.protected
    83                              <1> 	%undef sound.included
    84                              <1> 	%undef network.included
    85                              <1> 	%undef rtl8139.included
    86                              <1> 	%undef rtl8169.included
    87                              <1> 	%undef ne2000.included
    88                              <1> 	%undef sector.debug
    89                              <1> %endif
    90                                  [BITS 16]
    91                                      %include "source/boot.asm"
    92                              <1>     ; MENU.ASM
    93                              <1> %include 'source/signature.asm'
    94                              <2> signature:
    95 00000000 536F6C6C65724F53    <2> db "SollerOS" ;Operating system name
    96 00000008 20416C706861204275- <2> db " Alpha Build ",0	;Soller OS development level
    97 00000011 696C642000          <2>
    98 00000016 DF000000            <2> dd 223	;version number
    99                              <2> signatureend:
   100                              <1> menustart:	
   101 0000001A 8CC8                <1> 	mov ax, cs
   102 0000001C 8ED8                <1> 	mov ds, ax
   103 0000001E 8EC0                <1> 	mov es, ax
   104 00000020 8ED0                <1> 	mov ss, ax
   105 00000022 880E[753D]          <1> 	mov [DriveNumber], cl
   106 00000026 668916[763D]        <1> 	mov [lbaad], edx
   107                              <1> %ifdef io.serial
   108 0000002B E84000              <1> 	call getmemorysize
   109 0000002E BE[3700]            <1> 	mov si, serialmsg
   110 00000031 E87000              <1> 	call printrm
   111 00000034 E97F00              <1> 	jmp pmode
   112 00000037 536F6C6C65724F533A- <1> serialmsg: db "SollerOS: Using serial port ",io.serial," for I/O.",0
   113 00000040 205573696E67207365- <1>
   114 00000049 7269616C20706F7274- <1>
   115 00000052 203120666F7220492F- <1>
   116 0000005B 4F2E00              <1>
   117                              <1> %else
   118                              <1> 	call vgaset	;make users switch using a command-this leads to very fast boots
   119                              <1> 	jmp pmode
   120                              <1> %endif
   121                              <1> 	
   122                              <1> vgaset:
   123 0000005E B81200              <1> 	mov ax, 12h
   124 00000061 31DB                <1> 	xor bx, bx
   125 00000063 CD10                <1> 	int 10h
   126 00000065 C606[743D]00        <1> 	mov byte [guion], 0
   127 0000006A E80100              <1> 	call getmemorysize;get the memory map after the video is initialized
   128 0000006D C3                  <1> 	ret
   129                              <1> 
   130                              <1> getmemorysize:
   131 0000006E BF[7A3D]            <1> 	mov di, memlistbuf
   132 00000071 6631DB              <1> 	xor ebx, ebx
   133                              <1> getmemsizeloop:
   134 00000074 66B820E80000        <1> 	mov eax, 0xE820
   135 0000007A 66BA50414D53        <1> 	mov edx, 0x0534D4150
   136 00000080 66B918000000        <1> 	mov ecx, 24
   137 00000086 CD15                <1> 	int 0x15
   138 00000088 81C71800            <1> 	add di, 24
   139 0000008C 81FF[BA3F]          <1> 	cmp di, memlistend
   140 00000090 7309                <1> 	jae nomoregetmemsize
   141 00000092 6681FB00000000      <1> 	cmp ebx, 0
   142 00000099 75D9                <1> 	jne getmemsizeloop
   143                              <1> nomoregetmemsize:
   144 0000009B 81EF[7A3D]          <1> 	sub di, memlistbuf
   145 0000009F 893E[BA3F]          <1> 	mov [memlistend], di
   146 000000A3 C3                  <1> 	ret
   147                              <1> 	
   148                              <1> printrm:			; 'si' comes in with string address
   149 000000A4 BB0700              <1>     mov bx,07		; write to display
   150 000000A7 B40E                <1>     mov ah,0Eh		; screen function
   151 000000A9 8A04                <1>    .lp:    mov al,[si]         ; get next character
   152 000000AB 3C00                <1>     cmp al,0		; look for terminator 
   153 000000AD 7406                <1>     je .done		; zero byte at end of string
   154 000000AF CD10                <1>     int 10h		; write character to screen.    
   155 000000B1 46                  <1> 	inc si	     	; move to next character
   156 000000B2 E9F4FF              <1>     jmp .lp		; loop
   157 000000B5 C3                  <1> .done: ret
   158                                      %include "source/pmode.asm"
   159                              <1> [BITS 16]
   160                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   161                              <1> ;	16-bit real mode
   162                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   163                              <1> 
   164                              <1> pmode:
   165 000000B6 6631C0              <1> 	xor eax, eax
   166 000000B9 6631DB              <1> 	xor ebx, ebx
   167 000000BC 6631C9              <1> 	xor ecx, ecx
   168 000000BF 6631D2              <1> 	xor edx, edx
   169 000000C2 6631F6              <1> 	xor esi, esi
   170 000000C5 6631FF              <1> 	xor edi, edi
   171 000000C8 BA9200              <1> 	mov dx, 0x92
   172 000000CB EC                  <1> 	in al, dx	;;A20
   173 000000CC 0C02                <1> 	or al, 2
   174 000000CE EE                  <1> 	out dx, al
   175 000000CF 8CCB                <1> 	mov bx,cs		; EBX=segment
   176 000000D1 66C1E304            <1> 	shl ebx,4		;	<< 4
   177 000000D5 67668D03            <1> 	lea eax,[ebx]		; EAX=linear address of segment base
   178 000000D9 A3[2603]            <1> 	mov [gdt2 + 2],ax
   179 000000DC A3[2E03]            <1> 	mov [gdt3 + 2],ax
   180 000000DF 66C1E810            <1> 	shr eax,16
   181 000000E3 A2[2803]            <1> 	mov [gdt2 + 4],al
   182 000000E6 A2[3003]            <1> 	mov [gdt3 + 4],al
   183 000000E9 8826[2B03]          <1> 	mov [gdt2 + 7],ah
   184 000000ED 8826[3303]          <1> 	mov [gdt3 + 7],ah
   185                              <1> 
   186 000000F1 66B8[BA3F0000]      <1> 	mov eax, initialstack
   187 000000F7 660306[4E02]        <1> 	add eax, [newcodecache]
   188 000000FC A3[1E03]            <1> 	mov [gdts + 2],ax
   189 000000FF 66C1E810            <1> 	shr eax, 16
   190 00000103 A2[2003]            <1> 	mov [gdts + 4],al
   191 00000106 8826[2303]          <1> 	mov [gdts + 7], ah
   192                              <1> 	
   193 0000010A 66A1[4E02]          <1> 	mov eax, [newcodecache]
   194 0000010E A3[3603]            <1> 	mov [gdt4 + 2],ax
   195 00000111 A3[3E03]            <1> 	mov [gdt5 + 2],ax
   196 00000114 A3[4603]            <1> 	mov [gdtv8086 + 2], ax
   197 00000117 A3[4E03]            <1> 	mov [gdtv80862 + 2], ax
   198 0000011A 66C1E810            <1> 	shr eax,16
   199 0000011E A2[3803]            <1> 	mov [gdt4 + 4],al
   200 00000121 A2[4003]            <1> 	mov [gdt5 + 4],al
   201 00000124 A2[4803]            <1> 	mov [gdtv8086 + 4],al
   202 00000127 A2[5003]            <1> 	mov [gdtv80862 + 4],al
   203 0000012A 8826[3B03]          <1> 	mov [gdt4 + 7],ah
   204 0000012E 8826[4303]          <1> 	mov [gdt5 + 7],ah
   205 00000132 8826[4B03]          <1> 	mov [gdtv8086 + 7],ah
   206 00000136 8826[5303]          <1> 	mov [gdtv80862 + 7],ah
   207                              <1> 	
   208 0000013A 66B800004000        <1> 	mov eax, dosprogloc
   209 00000140 660306[4E02]        <1> 	add eax, [newcodecache]
   210 00000145 A3[5603]            <1> 	mov [gdtdos + 2],ax
   211 00000148 A3[5E03]            <1> 	mov [gdtdos2 + 2],ax
   212 0000014B 66C1E810            <1> 	shr eax,16
   213 0000014F A2[5803]            <1> 	mov [gdtdos + 4],al
   214 00000152 A2[6003]            <1> 	mov [gdtdos2 + 4],al
   215 00000155 8826[5B03]          <1> 	mov [gdtdos + 7],ah
   216 00000159 8826[6303]          <1> 	mov [gdtdos2 + 7],ah
   217                              <1> 	
   218                              <1> ; fix up gdt and idt
   219 0000015D 67668D83[0C030000]  <1> 	lea eax,[ebx + gdt]	; EAX=linear address of gdt
   220 00000165 66A3[0203]          <1> 	mov [gdtr + 2],eax
   221 00000169 67668D83[64030000]  <1> 	lea eax,[ebx + idt]	; EAX=linear address of idt
   222 00000171 66A3[0803]          <1> 	mov [idtr + 2],eax
   223 00000175 FA                  <1> 	cli
   224 00000176 0F0116[0003]        <1> 	lgdt [gdtr]
   225 0000017B 0F011E[0603]        <1> 	lidt [idtr]
   226 00000180 6631DB              <1> 	xor ebx, ebx
   227 00000183 8CDB                <1> 	mov bx, ds
   228 00000185 66891E[4A02]        <1> 	mov [basecache], ebx
   229 0000018A 0F20C0              <1> 	mov eax,cr0
   230 0000018D 0C01                <1> 	or al,1
   231 0000018F 0F22C0              <1> 	mov cr0,eax
   232 00000192 EA[9701]1800        <1> 	jmp SYS_CODE_SEL:do_pm
   233                              <1> [BITS 32]
   234                              <1> do_pm:
   235 00000197 31C0                <1> 	xor eax, eax
   236 00000199 66B82000            <1> 	mov ax, SYS_DATA_SEL
   237 0000019D 8ED8                <1> 	mov ds, ax
   238 0000019F 8EC0                <1> 	mov es, ax
   239 000001A1 8EE0                <1> 	mov fs, ax
   240 000001A3 66B83000            <1> 	mov ax, NEW_DATA_SEL
   241 000001A7 8EE8                <1> 	mov gs, ax
   242                              <1> 	
   243                              <1> copykernel:
   244 000001A9 648B06              <1> 	mov eax, [fs:esi]
   245 000001AC 658906              <1> 	mov [gs:esi], eax
   246 000001AF 81C604000000        <1> 	add esi, 4
   247 000001B5 81FE[BA3F0000]      <1> 	cmp esi, bsscopy
   248 000001BB 72EC                <1> 	jb copykernel
   249 000001BD EA[C4010000]2800    <1> 	jmp NEW_CODE_SEL:done_copy
   250                              <1> 	
   251                              <1> done_copy:
   252 000001C4 66B83000            <1> 	mov ax, NEW_DATA_SEL	;;these MUST be setup AFTER the kernel switches places!!!
   253 000001C8 8ED8                <1> 	mov ds, ax
   254 000001CA 8EC0                <1> 	mov es, ax
   255 000001CC 8EE0                <1> 	mov fs, ax
   256                              <1> 	;mov ax, STACK_SEL
   257 000001CE 8ED0                <1> 	mov ss, ax
   258 000001D0 BC[5A4F0000]        <1> 	mov esp, stackend
   259 000001D5 66B82000            <1> 	mov ax, SYS_DATA_SEL
   260 000001D9 8EE8                <1> 	mov gs, ax
   261                              <1> 	
   262 000001DB E8CF340000          <1> 	call initialize	;initialize drivers
   263                              <1> 	
   264 000001E0 A1[4E020000]        <1> 	mov eax, [newcodecache]
   265 000001E5 C1E804              <1> 	shr eax, 4
   266 000001E8 A3[4A020000]        <1> 	mov [basecache], eax
   267                              <1> 	
   268 000001ED BE[5F7E0000]        <1> 	mov esi, bssend
   269 000001F2 31C0                <1> 	xor eax, eax
   270                              <1> clearkernelbuffers:
   271 000001F4 8906                <1> 	mov [esi], eax
   272 000001F6 81EE04000000        <1> 	sub esi, 4
   273 000001FC 81FE[BA3F0000]      <1> 	cmp esi, bsscopy
   274 00000202 77F0                <1> 	ja clearkernelbuffers
   275 00000204 FB                  <1> 	sti
   276                              <1> 
   277                              <1> getmemoryspace:
   278 00000205 BE[7A3D0000]        <1> 	mov esi, memlistbuf
   279 0000020A 31FF                <1> 	xor edi, edi
   280 0000020C 668B3D[BA3F0000]    <1> 	mov di, [memlistend]
   281 00000213 01F7                <1> 	add edi, esi
   282 00000215 31C0                <1> 	xor eax, eax
   283                              <1> memoryspaceaddition:
   284 00000217 39FE                <1> 	cmp esi, edi
   285 00000219 7325                <1> 	jae finishedmemspacecalc
   286 0000021B 81C608000000        <1> 	add esi, 8
   287 00000221 8B0E                <1> 	mov ecx, [esi]
   288 00000223 81C608000000        <1> 	add esi, 8
   289 00000229 8B1E                <1> 	mov ebx, [esi]
   290 0000022B 81C608000000        <1> 	add esi, 8
   291 00000231 81FB01000000        <1> 	cmp ebx, 1
   292 00000237 75DE                <1> 	jne memoryspaceaddition
   293 00000239 01C8                <1> 	add eax, ecx
   294 0000023B E9D7FFFFFF          <1> 	jmp memoryspaceaddition
   295                              <1> finishedmemspacecalc:
   296 00000240 A3[5F020000]        <1> 	mov [memoryspace], eax
   297                              <1> %ifdef gui.included
   298                              <1> 	cmp byte [guion], 0
   299                              <1> 	je normalstartup
   300                              <1> 	mov ebx, [basecache]
   301                              <1> 	shl ebx, 4
   302                              <1> 	mov edi, [physbaseptr]
   303                              <1> 	sub edi, ebx
   304                              <1> 	mov [physbaseptr], edi
   305                              <1> 	jmp guiboot
   306                              <1> %endif
   307                              <1> normalstartup:
   308 00000245 E9AC130000          <1> 	jmp os
   309                              <1> 	
   310 0000024A 00000000            <1> basecache dd 0
   311 0000024E 00001000            <1> newcodecache dd 0x100000
   312                              <1> 
   313 00000252 00                  <1> testingcpuspeed db 0
   314 00000253 00000000            <1> cpuspeedperint dd 0
   315 00000257 0000000000000000    <1> cpuclocksperint dd 0,0
   316 0000025F 00000000            <1> memoryspace dd 0
   317 00000263 7D0A                <1> pitdiv dw 2685
   318 00000265 2E562200            <1> timeinterval dd 2250286
   319 00000269 00000000            <1> timeseconds dd 0
   320 0000026D 00000000            <1> timenanoseconds dd 0
   321 00000271 00                  <1> soundon db 0
   322 00000272 0000                <1> soundrepititions dw 0
   323 00000274 00000000            <1> soundpos dd 0
   324 00000278 00000000            <1> soundendpos dd 0
   325                              <1> 
   326                              <1> cpuspeedend:
   327 0000027C C605[52020000]00    <1> 	mov byte [testingcpuspeed], 0
   328 00000283 A3[53020000]        <1> 	mov [cpuspeedperint], eax
   329 00000288 B8[00300000]        <1> 	mov eax, cpuspeedloopend
   330 0000028D 890424              <1> 	mov [esp], eax
   331 00000290 E95B000000          <1> 	jmp handled
   332                              <1> 
   333                              <1> ;if using the rtc, the default frequency yeilds a period of 976562.5ns
   334                              <1> ;if using the pit, div=451 is 377981.0004, div=5370 is 4500572.00007ns
   335                              <1> ;div=55483 is 46500044.000006ns, div=2685 is 2250286.00004ns, div=902 is 755962.0008
   336                              <1> 
   337                              <1> pitinterrupt: ;this controls threading
   338 00000295 FA                  <1> 	cli
   339 00000296 803D[52020000]01    <1> 	cmp byte [testingcpuspeed], 1	;check to see if the cpu speed test is running
   340 0000029D 74DD                <1> 	je cpuspeedend
   341                              <1> 		
   342 0000029F E825000000          <1> 	call timekeeper ;this updates the internal time
   343                              <1> 	
   344 000002A4 803D[71020000]01    <1> 	cmp byte [soundon], 1
   345 000002AB 0F8446320000        <1> 	je near PCSpeakerRAW
   346                              <1> timerinterrupt:	;put this into the interrupt handler that controls threading
   347                              <1> %ifdef threads.included
   348                              <1> 	cmp byte [threadson], 1
   349                              <1> 	je near threadswitch
   350                              <1> %endif
   351                              <1> keyinterrupt:		;checks for escape, if pressed, it quits the program currently running
   352 000002B1 803D[513B0000]00    <1> 	cmp byte [threadson], 0
   353 000002B8 0F8432000000        <1> 	je near handled
   354                              <1> %ifdef io.serial
   355 000002BE E92D000000          <1> 	jmp handled
   356                              <1> %else
   357                              <1> 	pusha
   358                              <1> 	in al, 64h
   359                              <1> 	test al, 20h
   360                              <1> 	jnz near handled2
   361                              <1> 	in al, 60h
   362                              <1> 	cmp al, 1		;escape
   363                              <1> 	je userint
   364                              <1> 	jmp handled2
   365                              <1> userint:
   366                              <1> 	;UNMASK ALL INTS
   367                              <1> 	xor al, al
   368                              <1> 	out 0x21, al
   369                              <1> 	xor al, al
   370                              <1> 	out 0xA1, al
   371                              <1> 	mov al, 0x20
   372                              <1> 	out 0xA0, al
   373                              <1> 	out 0x20, al
   374                              <1> 	;RESET PIT DIVISOR
   375                              <1> 	mov ax, [pitdiv]
   376                              <1> 	out 0x40, al
   377                              <1> 	rol ax, 8
   378                              <1> 	out 0x40, al
   379                              <1> 	;RESET PIC
   380                              <1> 	mov al, 0x20
   381                              <1> 	out 0x20, al
   382                              <1> 	popa
   383                              <1> 	sti
   384                              <1> 	mov esp, stackend ;reset stack
   385                              <1> 	jmp returnfromexp
   386                              <1> %endif
   387 000002C3 0A                  <1> rtcrate db 10
   388                              <1> rtcint:	;this runs at 64Hz which is perfect for 60Hz displays
   389                              <1> %ifdef io.serial
   390                              <1> %else
   391                              <1> %ifdef terminal.vsync
   392                              <1> 	cli
   393                              <1> 	cmp byte [termcopyneeded], 0
   394                              <1> 	je .nocopy
   395                              <1> 	call newtermcopy
   396                              <1> .nocopy
   397                              <1> 	push eax
   398                              <1> 	mov al, 0xC
   399                              <1> 	out 0x70, al
   400                              <1> 	in al, 0x71
   401                              <1> 	pop eax
   402                              <1> 	sti
   403                              <1> %endif
   404                              <1> %endif
   405 000002C4 E92E000000          <1> 	jmp handled4
   406                              <1> %ifdef rtl8139.included
   407                              <1> rtl8139.irq:
   408                              <1> 	cli
   409                              <1> 	push edx
   410                              <1> 	push eax
   411                              <1> 	mov edx, [rtl8139.basenicaddr]
   412                              <1> 	add edx, rtl8139.ISR
   413                              <1> 	xor eax, eax
   414                              <1> 	in ax, dx
   415                              <1> 	out dx, ax
   416                              <1> 	pop eax
   417                              <1> 	pop edx
   418                              <1> 	sti
   419                              <1> 	jmp handled4
   420                              <1> %endif
   421                              <1> %ifdef sound.included
   422                              <1> sblaster.irq:
   423                              <1> 	cli
   424                              <1> 	pusha
   425                              <1> 	cmp byte [SoundBlaster], 1
   426                              <1> 	je near sblaster.cont
   427                              <1> 	jmp handled2
   428                              <1> %endif
   429                              <1> 	
   430                              <1> timekeeper:
   431 000002C9 50                  <1> 	push eax
   432 000002CA A1[6D020000]        <1> 	mov eax, [timenanoseconds]
   433 000002CF 0305[65020000]      <1> 	add eax, [timeinterval]
   434 000002D5 3D00CA9A3B          <1> 	cmp eax, 1000000000
   435 000002DA 720B                <1> 	jb nonanosecondrollover
   436 000002DC FF05[69020000]      <1> 	inc dword [timeseconds]
   437 000002E2 2D00CA9A3B          <1> 	sub eax, 1000000000
   438                              <1> nonanosecondrollover:
   439 000002E7 A3[6D020000]        <1> 	mov [timenanoseconds], eax
   440 000002EC 58                  <1> 	pop eax
   441 000002ED C3                  <1> 	ret
   442                              <1> 	
   443                              <1> handled2:
   444 000002EE 61                  <1> 	popa
   445                              <1> handled3:
   446 000002EF FB                  <1> 	sti
   447                              <1> handled:
   448 000002F0 50                  <1> 	push eax
   449 000002F1 B020                <1> 	mov al, 0x20
   450 000002F3 E620                <1> 	out 0x20, al
   451 000002F5 58                  <1> 	pop eax
   452 000002F6 CF                  <1> 	iret
   453                              <1> handled4:
   454 000002F7 50                  <1> 	push eax
   455 000002F8 B020                <1> 	mov al, 0x20
   456 000002FA E6A0                <1> 	out 0xA0, al
   457 000002FC E620                <1> 	out 0x20, al
   458 000002FE 58                  <1> 	pop eax
   459 000002FF CF                  <1> 	iret
   460                              <1> [BITS 16]
   461                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   462                              <1> ;	16-bit limit/32-bit linear base address of GDT and IDT
   463                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   464 00000300 5700                <1> gdtr:	dw gdt_end - gdt - 1	; GDT limit
   465 00000302 00000000            <1> 	dd 0    		; filled with linear, physical address of GDT
   466                              <1> 
   467 00000306 FF07                <1> idtr:	dw idt_end - idt - 1	; IDT limit
   468 00000308 00000000            <1> 	dd 0			; filled with linear, physical address of IDT
   469                              <1> 
   470                              <1> 
   471 0000030C 0000                <1> gdt:	dw 0			; limit 15:0
   472 0000030E 0000                <1> 	dw 0			; base 15:0
   473 00000310 00                  <1> 	db 0			; base 23:16
   474 00000311 00                  <1> 	db 0			; type
   475 00000312 00                  <1> 	db 0			; limit 19:16, flags
   476 00000313 00                  <1> 	db 0			; base 31:24
   477                              <1> ; linear data segment descriptor
   478                              <1> LINEAR_SEL	equ	$-gdt
   479 00000314 FFFF                <1> 	dw 0xFFFF		; limit 0xFFFFF
   480 00000316 0000                <1> 	dw 0			; base for this one is always 0
   481 00000318 00                  <1> 	db 0
   482 00000319 92                  <1> 	db 0x92			; present, ring 0, data, expand-up, writable
   483 0000031A CF                  <1> 	db 0xCF			; page-granular, 32-bit
   484 0000031B 00                  <1> 	db 0
   485                              <1> STACK_SEL	equ $-gdt
   486 0000031C 0200                <1> gdts:	dw 2;(stackend)/4096
   487 0000031E 0000                <1> 	dw 0
   488 00000320 00                  <1> 	db 0
   489 00000321 92                  <1> 	db 0x92
   490 00000322 CF                  <1> 	db 0xCF
   491 00000323 00                  <1> 	db 0
   492                              <1> ; code segment descriptor
   493                              <1> SYS_CODE_SEL	equ	$-gdt
   494 00000324 FFFF                <1> gdt2:	dw 0xFFFF
   495 00000326 0000                <1> 	dw 0			; (base gets set above)
   496 00000328 00                  <1> 	db 0
   497 00000329 9A                  <1> 	db 0x9A			; present, ring 0, code, non-conforming, readable
   498 0000032A CF                  <1> 	db 0xCF
   499 0000032B 00                  <1> 	db 0
   500                              <1> ; data segment descriptor
   501                              <1> SYS_DATA_SEL	equ	$-gdt
   502 0000032C FFFF                <1> gdt3:	dw 0xFFFF
   503 0000032E 0000                <1> 	dw 0			; (base gets set above)
   504 00000330 00                  <1> 	db 0
   505 00000331 92                  <1> 	db 0x92			; present, ring 0, data, expand-up, writable
   506 00000332 CF                  <1> 	db 0xCF
   507 00000333 00                  <1> 	db 0
   508                              <1> NEW_CODE_SEL	equ	$-gdt
   509 00000334 FFFF                <1> gdt4:	dw 0xFFFF
   510 00000336 0000                <1> 	dw 0			; (base gets set above)
   511 00000338 00                  <1> 	db 0
   512 00000339 9A                  <1> 	db 0x9A			; present, ring 0, code, non-conforming, readable
   513 0000033A CF                  <1> 	db 0xCF
   514 0000033B 00                  <1> 	db 0
   515                              <1> ; data segment descriptor
   516                              <1> NEW_DATA_SEL	equ	$-gdt
   517 0000033C FFFF                <1> gdt5:	dw 0xFFFF
   518 0000033E 0000                <1> 	dw 0			; (base gets set above)
   519 00000340 00                  <1> 	db 0
   520 00000341 92                  <1> 	db 0x92			; present, ring 0, data, expand-up, writable
   521 00000342 CF                  <1> 	db 0xCF
   522 00000343 00                  <1> 	db 0
   523                              <1> V8086_CODE_SEL	equ $-gdt
   524 00000344 FFFF                <1> gdtv8086: dw 0xFFFF
   525 00000346 0000                <1> 	dw 0
   526 00000348 00                  <1> 	db 0
   527 00000349 9A                  <1> 	db 0x9A
   528 0000034A 8F                  <1> 	db 0x8F
   529 0000034B 00                  <1> 	db 0
   530                              <1> V8086_DATA_SEL	equ $-gdt
   531 0000034C FFFF                <1> gdtv80862: dw 0xFFFF
   532 0000034E 0000                <1> 	dw 0
   533 00000350 00                  <1> 	db 0
   534 00000351 92                  <1> 	db 0x92
   535 00000352 8F                  <1> 	db 0x8F
   536 00000353 00                  <1> 	db 0
   537                              <1> DOS_CODE_SEL	equ $-gdt	;this gives dos programs complete access to one megabyte at the beginning of memory
   538 00000354 0001                <1> gdtdos:	dw 256	;give it 1 MB
   539 00000356 0000                <1> 	dw 0
   540 00000358 00                  <1> 	db 0
   541 00000359 9A                  <1> 	db 0x9A
   542 0000035A 8F                  <1> 	db 0x8F ;16 bit
   543 0000035B 00                  <1> 	db 0
   544                              <1> DOS_DATA_SEL 	equ $-gdt
   545 0000035C 0001                <1> gdtdos2:	dw 256
   546 0000035E 0000                <1> 	dw 0
   547 00000360 00                  <1> 	db 0
   548 00000361 92                  <1> 	db 0x92
   549 00000362 8F                  <1> 	db 0x8F ;16 bit
   550 00000363 00                  <1> 	db 0
   551                              <1> gdt_end:
   552                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   553                              <1> ;	interrupt descriptor table (IDT)
   554                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   555                              <1> ; 32 reserved interrupts:
   556                              <1> idt:	
   557                              <1> %assign i 0
   558                              <1> %rep    8
   559                              <1> 		dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   560                              <1> %assign i i+1
   561                              <1> %endrep
   562 00000364 [850C]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   563                              <2> %assign i i+1
   564 0000036C [910C]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   565                              <2> %assign i i+1
   566 00000374 [9D0C]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   567                              <2> %assign i i+1
   568 0000037C [A90C]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   569                              <2> %assign i i+1
   570 00000384 [B50C]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   571                              <2> %assign i i+1
   572 0000038C [C10C]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   573                              <2> %assign i i+1
   574 00000394 [CD0C]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   575                              <2> %assign i i+1
   576 0000039C [D90C]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   577                              <2> %assign i i+1
   578 000003A4 [E50C]1800008E0000  <1> 		dw unhand + 8*12,SYS_CODE_SEL,0x8E00,0	;double fault handler in original memory
   579                              <1> %assign i 9
   580                              <1> %rep    23
   581                              <1> 		dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   582                              <1> %assign i i+1
   583                              <1> %endrep
   584 000003AC [F10C]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   585                              <2> %assign i i+1
   586 000003B4 [FD0C]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   587                              <2> %assign i i+1
   588 000003BC [090D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   589                              <2> %assign i i+1
   590 000003C4 [150D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   591                              <2> %assign i i+1
   592 000003CC [210D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   593                              <2> %assign i i+1
   594 000003D4 [2D0D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   595                              <2> %assign i i+1
   596 000003DC [390D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   597                              <2> %assign i i+1
   598 000003E4 [450D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   599                              <2> %assign i i+1
   600 000003EC [510D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   601                              <2> %assign i i+1
   602 000003F4 [5D0D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   603                              <2> %assign i i+1
   604 000003FC [690D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   605                              <2> %assign i i+1
   606 00000404 [750D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   607                              <2> %assign i i+1
   608 0000040C [810D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   609                              <2> %assign i i+1
   610 00000414 [8D0D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   611                              <2> %assign i i+1
   612 0000041C [990D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   613                              <2> %assign i i+1
   614 00000424 [A50D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   615                              <2> %assign i i+1
   616 0000042C [B10D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   617                              <2> %assign i i+1
   618 00000434 [BD0D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   619                              <2> %assign i i+1
   620 0000043C [C90D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   621                              <2> %assign i i+1
   622 00000444 [D50D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   623                              <2> %assign i i+1
   624 0000044C [E10D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   625                              <2> %assign i i+1
   626 00000454 [ED0D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   627                              <2> %assign i i+1
   628 0000045C [F90D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   629                              <2> %assign i i+1
   630 00000464 [BB14]2800008E0000  <1> 		dw int20h,NEW_CODE_SEL,0x8E00,0
   631 0000046C [BF14]2800008E0000  <1> 		dw int21h,NEW_CODE_SEL,0x8E00,0
   632                              <1> %assign i 0x22
   633                              <1> %rep 14
   634                              <1> 		dw handled,NEW_CODE_SEL,0x8E00,0
   635                              <1> %assign i +1
   636                              <1> %endrep
   637 00000474 [F002]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   638                              <2> %assign i +1
   639 0000047C [F002]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   640                              <2> %assign i +1
   641 00000484 [F002]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   642                              <2> %assign i +1
   643 0000048C [F002]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   644                              <2> %assign i +1
   645 00000494 [F002]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   646                              <2> %assign i +1
   647 0000049C [F002]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   648                              <2> %assign i +1
   649 000004A4 [F002]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   650                              <2> %assign i +1
   651 000004AC [F002]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   652                              <2> %assign i +1
   653 000004B4 [F002]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   654                              <2> %assign i +1
   655 000004BC [F002]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   656                              <2> %assign i +1
   657 000004C4 [F002]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   658                              <2> %assign i +1
   659 000004CC [F002]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   660                              <2> %assign i +1
   661 000004D4 [F002]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   662                              <2> %assign i +1
   663 000004DC [F002]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   664                              <2> %assign i +1
   665                              <1> ;INT 30h for os use and 3rd party use:
   666 000004E4 [230E]2800008E0000  <1> 		dw newints,NEW_CODE_SEL,0x8E00,0
   667                              <1> %assign i 0x31
   668                              <1> %rep 15
   669                              <1> 		dw handled,NEW_CODE_SEL,0x8E00,0
   670                              <1> %assign i +1
   671                              <1> %endrep
   672 000004EC [F002]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   673                              <2> %assign i +1
   674 000004F4 [F002]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   675                              <2> %assign i +1
   676 000004FC [F002]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   677                              <2> %assign i +1
   678 00000504 [F002]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   679                              <2> %assign i +1
   680 0000050C [F002]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   681                              <2> %assign i +1
   682 00000514 [F002]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   683                              <2> %assign i +1
   684 0000051C [F002]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   685                              <2> %assign i +1
   686 00000524 [F002]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   687                              <2> %assign i +1
   688 0000052C [F002]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   689                              <2> %assign i +1
   690 00000534 [F002]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   691                              <2> %assign i +1
   692 0000053C [F002]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   693                              <2> %assign i +1
   694 00000544 [F002]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   695                              <2> %assign i +1
   696 0000054C [F002]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   697                              <2> %assign i +1
   698 00000554 [F002]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   699                              <2> %assign i +1
   700 0000055C [F002]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   701                              <2> %assign i +1
   702                              <1> ;and here we are at 0x40
   703                              <1> ;here are all the irq's
   704 00000564 [9502]2800008E0000  <1> 		dw pitinterrupt,NEW_CODE_SEL,0x8E00,0 ;IRQ 0 = PIT
   705 0000056C [F002]2800008E0000  <1> 		dw handled,NEW_CODE_SEL,0x8E00,0 ;IRQ 1 = keyboard
   706 00000574 [F002]2800008E0000  <1> 		dw handled,NEW_CODE_SEL,0x8E00,0 ;IRQ 2
   707 0000057C [F002]2800008E0000  <1> 		dw handled,NEW_CODE_SEL,0x8E00,0 ;IRQ 3
   708 00000584 [F002]2800008E0000  <1> 		dw handled,NEW_CODE_SEL,0x8E00,0 ;IRQ 4
   709                              <1> 	%ifdef sound.included
   710                              <1> 		dw sblaster.irq,NEW_CODE_SEL,0x8E00,0 ;IRQ 5 = default SoundBlaster
   711                              <1> 	%else
   712 0000058C [F002]2800008E0000  <1> 		dw handled,NEW_CODE_SEL,0x8E00,0 ;IRQ 5
   713                              <1> 	%endif
   714 00000594 [F002]2800008E0000  <1> 		dw handled,NEW_CODE_SEL,0x8E00,0 ;IRQ 6
   715 0000059C [F002]2800008E0000  <1> 		dw handled,NEW_CODE_SEL,0x8E00,0 ;IRQ 7
   716 000005A4 [C402]2800008E0000  <1> 		dw rtcint,NEW_CODE_SEL,0x8E00,0 ;IRQ 8 = RTC
   717 000005AC [F702]2800008E0000  <1> 		dw handled4,NEW_CODE_SEL,0x8E00,0 ;IRQ 9 = default NE2000
   718 000005B4 [F702]2800008E0000  <1> 		dw handled4,NEW_CODE_SEL,0x8E00,0 ;IRQ 10
   719                              <1> 	%ifdef rtl8139.included
   720                              <1> 		dw rtl8139.irq,NEW_CODE_SEL,0x8E00,0 ;IRQ 11 = default RTL8139
   721                              <1> 	%else
   722 000005BC [F702]2800008E0000  <1> 		dw handled4,NEW_CODE_SEL,0x8E00,0 ;IRQ 11
   723                              <1> 	%endif
   724 000005C4 [F702]2800008E0000  <1> 		dw handled4,NEW_CODE_SEL,0x8E00,0 ;IRQ 12
   725 000005CC [F702]2800008E0000  <1> 		dw handled4,NEW_CODE_SEL,0x8E00,0 ;IRQ 13
   726 000005D4 [F702]2800008E0000  <1> 		dw handled4,NEW_CODE_SEL,0x8E00,0 ;IRQ 14
   727 000005DC [F702]2800008E0000  <1> 		dw handled4,NEW_CODE_SEL,0x8E00,0 ;IRQ 15
   728                              <1> ;This brings me up to 0x50
   729                              <1> %assign i 0x50
   730                              <1> %rep 176
   731                              <1> 		dw handled, NEW_CODE_SEL,0x8E00,0
   732                              <1> 		;dw unhand + i*12, NEW_CODE_SEL,0x8E00,0
   733                              <1> %assign i +1
   734                              <1> %endrep
   735 000005E4 [F002]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   736                              <2> 
   737                              <2> %assign i +1
   738 000005EC [F002]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   739                              <2> 
   740                              <2> %assign i +1
   741 000005F4 [F002]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   742                              <2> 
   743                              <2> %assign i +1
   744 000005FC [F002]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   745                              <2> 
   746                              <2> %assign i +1
   747 00000604 [F002]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   748                              <2> 
   749                              <2> %assign i +1
   750 0000060C [F002]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   751                              <2> 
   752                              <2> %assign i +1
   753 00000614 [F002]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   754                              <2> 
   755                              <2> %assign i +1
   756 0000061C [F002]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   757                              <2> 
   758                              <2> %assign i +1
   759 00000624 [F002]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   760                              <2> 
   761                              <2> %assign i +1
   762 0000062C [F002]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   763                              <2> 
   764                              <2> %assign i +1
   765 00000634 [F002]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   766                              <2> 
   767                              <2> %assign i +1
   768 0000063C [F002]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   769                              <2> 
   770                              <2> %assign i +1
   771 00000644 [F002]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   772                              <2> 
   773                              <2> %assign i +1
   774 0000064C [F002]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   775                              <2> 
   776                              <2> %assign i +1
   777 00000654 [F002]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   778                              <2> 
   779                              <2> %assign i +1
   780 0000065C [F002]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   781                              <2> 
   782                              <2> %assign i +1
   783 00000664 [F002]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   784                              <2> 
   785                              <2> %assign i +1
   786 0000066C [F002]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   787                              <2> 
   788                              <2> %assign i +1
   789 00000674 [F002]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   790                              <2> 
   791                              <2> %assign i +1
   792 0000067C [F002]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   793                              <2> 
   794                              <2> %assign i +1
   795 00000684 [F002]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   796                              <2> 
   797                              <2> %assign i +1
   798 0000068C [F002]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   799                              <2> 
   800                              <2> %assign i +1
   801 00000694 [F002]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   802                              <2> 
   803                              <2> %assign i +1
   804 0000069C [F002]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   805                              <2> 
   806                              <2> %assign i +1
   807 000006A4 [F002]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   808                              <2> 
   809                              <2> %assign i +1
   810 000006AC [F002]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   811                              <2> 
   812                              <2> %assign i +1
   813 000006B4 [F002]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   814                              <2> 
   815                              <2> %assign i +1
   816 000006BC [F002]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   817                              <2> 
   818                              <2> %assign i +1
   819 000006C4 [F002]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   820                              <2> 
   821                              <2> %assign i +1
   822 000006CC [F002]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   823                              <2> 
   824                              <2> %assign i +1
   825 000006D4 [F002]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   826                              <2> 
   827                              <2> %assign i +1
   828 000006DC [F002]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   829                              <2> 
   830                              <2> %assign i +1
   831 000006E4 [F002]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   832                              <2> 
   833                              <2> %assign i +1
   834 000006EC [F002]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   835                              <2> 
   836                              <2> %assign i +1
   837 000006F4 [F002]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   838                              <2> 
   839                              <2> %assign i +1
   840 000006FC [F002]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   841                              <2> 
   842                              <2> %assign i +1
   843 00000704 [F002]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   844                              <2> 
   845                              <2> %assign i +1
   846 0000070C [F002]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   847                              <2> 
   848                              <2> %assign i +1
   849 00000714 [F002]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   850                              <2> 
   851                              <2> %assign i +1
   852 0000071C [F002]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   853                              <2> 
   854                              <2> %assign i +1
   855 00000724 [F002]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   856                              <2> 
   857                              <2> %assign i +1
   858 0000072C [F002]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   859                              <2> 
   860                              <2> %assign i +1
   861 00000734 [F002]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   862                              <2> 
   863                              <2> %assign i +1
   864 0000073C [F002]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   865                              <2> 
   866                              <2> %assign i +1
   867 00000744 [F002]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   868                              <2> 
   869                              <2> %assign i +1
   870 0000074C [F002]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   871                              <2> 
   872                              <2> %assign i +1
   873 00000754 [F002]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   874                              <2> 
   875                              <2> %assign i +1
   876 0000075C [F002]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   877                              <2> 
   878                              <2> %assign i +1
   879 00000764 [F002]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   880                              <2> 
   881                              <2> %assign i +1
   882 0000076C [F002]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   883                              <2> 
   884                              <2> %assign i +1
   885 00000774 [F002]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   886                              <2> 
   887                              <2> %assign i +1
   888 0000077C [F002]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   889                              <2> 
   890                              <2> %assign i +1
   891 00000784 [F002]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   892                              <2> 
   893                              <2> %assign i +1
   894 0000078C [F002]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   895                              <2> 
   896                              <2> %assign i +1
   897 00000794 [F002]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   898                              <2> 
   899                              <2> %assign i +1
   900 0000079C [F002]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   901                              <2> 
   902                              <2> %assign i +1
   903 000007A4 [F002]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   904                              <2> 
   905                              <2> %assign i +1
   906 000007AC [F002]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   907                              <2> 
   908                              <2> %assign i +1
   909 000007B4 [F002]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   910                              <2> 
   911                              <2> %assign i +1
   912 000007BC [F002]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   913                              <2> 
   914                              <2> %assign i +1
   915 000007C4 [F002]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   916                              <2> 
   917                              <2> %assign i +1
   918 000007CC [F002]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   919                              <2> 
   920                              <2> %assign i +1
   921 000007D4 [F002]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   922                              <2> 
   923                              <2> %assign i +1
   924 000007DC [F002]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   925                              <2> 
   926                              <2> %assign i +1
   927 000007E4 [F002]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   928                              <2> 
   929                              <2> %assign i +1
   930 000007EC [F002]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   931                              <2> 
   932                              <2> %assign i +1
   933 000007F4 [F002]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   934                              <2> 
   935                              <2> %assign i +1
   936 000007FC [F002]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   937                              <2> 
   938                              <2> %assign i +1
   939 00000804 [F002]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   940                              <2> 
   941                              <2> %assign i +1
   942 0000080C [F002]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   943                              <2> 
   944                              <2> %assign i +1
   945 00000814 [F002]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   946                              <2> 
   947                              <2> %assign i +1
   948 0000081C [F002]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   949                              <2> 
   950                              <2> %assign i +1
   951 00000824 [F002]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   952                              <2> 
   953                              <2> %assign i +1
   954 0000082C [F002]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   955                              <2> 
   956                              <2> %assign i +1
   957 00000834 [F002]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   958                              <2> 
   959                              <2> %assign i +1
   960 0000083C [F002]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   961                              <2> 
   962                              <2> %assign i +1
   963 00000844 [F002]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   964                              <2> 
   965                              <2> %assign i +1
   966 0000084C [F002]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   967                              <2> 
   968                              <2> %assign i +1
   969 00000854 [F002]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   970                              <2> 
   971                              <2> %assign i +1
   972 0000085C [F002]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   973                              <2> 
   974                              <2> %assign i +1
   975 00000864 [F002]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   976                              <2> 
   977                              <2> %assign i +1
   978 0000086C [F002]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   979                              <2> 
   980                              <2> %assign i +1
   981 00000874 [F002]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   982                              <2> 
   983                              <2> %assign i +1
   984 0000087C [F002]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   985                              <2> 
   986                              <2> %assign i +1
   987 00000884 [F002]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   988                              <2> 
   989                              <2> %assign i +1
   990 0000088C [F002]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   991                              <2> 
   992                              <2> %assign i +1
   993 00000894 [F002]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   994                              <2> 
   995                              <2> %assign i +1
   996 0000089C [F002]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   997                              <2> 
   998                              <2> %assign i +1
   999 000008A4 [F002]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1000                              <2> 
  1001                              <2> %assign i +1
  1002 000008AC [F002]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1003                              <2> 
  1004                              <2> %assign i +1
  1005 000008B4 [F002]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1006                              <2> 
  1007                              <2> %assign i +1
  1008 000008BC [F002]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1009                              <2> 
  1010                              <2> %assign i +1
  1011 000008C4 [F002]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1012                              <2> 
  1013                              <2> %assign i +1
  1014 000008CC [F002]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1015                              <2> 
  1016                              <2> %assign i +1
  1017 000008D4 [F002]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1018                              <2> 
  1019                              <2> %assign i +1
  1020 000008DC [F002]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1021                              <2> 
  1022                              <2> %assign i +1
  1023 000008E4 [F002]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1024                              <2> 
  1025                              <2> %assign i +1
  1026 000008EC [F002]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1027                              <2> 
  1028                              <2> %assign i +1
  1029 000008F4 [F002]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1030                              <2> 
  1031                              <2> %assign i +1
  1032 000008FC [F002]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1033                              <2> 
  1034                              <2> %assign i +1
  1035 00000904 [F002]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1036                              <2> 
  1037                              <2> %assign i +1
  1038 0000090C [F002]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1039                              <2> 
  1040                              <2> %assign i +1
  1041 00000914 [F002]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1042                              <2> 
  1043                              <2> %assign i +1
  1044 0000091C [F002]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1045                              <2> 
  1046                              <2> %assign i +1
  1047 00000924 [F002]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1048                              <2> 
  1049                              <2> %assign i +1
  1050 0000092C [F002]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1051                              <2> 
  1052                              <2> %assign i +1
  1053 00000934 [F002]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1054                              <2> 
  1055                              <2> %assign i +1
  1056 0000093C [F002]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1057                              <2> 
  1058                              <2> %assign i +1
  1059 00000944 [F002]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1060                              <2> 
  1061                              <2> %assign i +1
  1062 0000094C [F002]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1063                              <2> 
  1064                              <2> %assign i +1
  1065 00000954 [F002]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1066                              <2> 
  1067                              <2> %assign i +1
  1068 0000095C [F002]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1069                              <2> 
  1070                              <2> %assign i +1
  1071 00000964 [F002]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1072                              <2> 
  1073                              <2> %assign i +1
  1074 0000096C [F002]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1075                              <2> 
  1076                              <2> %assign i +1
  1077 00000974 [F002]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1078                              <2> 
  1079                              <2> %assign i +1
  1080 0000097C [F002]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1081                              <2> 
  1082                              <2> %assign i +1
  1083 00000984 [F002]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1084                              <2> 
  1085                              <2> %assign i +1
  1086 0000098C [F002]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1087                              <2> 
  1088                              <2> %assign i +1
  1089 00000994 [F002]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1090                              <2> 
  1091                              <2> %assign i +1
  1092 0000099C [F002]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1093                              <2> 
  1094                              <2> %assign i +1
  1095 000009A4 [F002]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1096                              <2> 
  1097                              <2> %assign i +1
  1098 000009AC [F002]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1099                              <2> 
  1100                              <2> %assign i +1
  1101 000009B4 [F002]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1102                              <2> 
  1103                              <2> %assign i +1
  1104 000009BC [F002]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1105                              <2> 
  1106                              <2> %assign i +1
  1107 000009C4 [F002]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1108                              <2> 
  1109                              <2> %assign i +1
  1110 000009CC [F002]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1111                              <2> 
  1112                              <2> %assign i +1
  1113 000009D4 [F002]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1114                              <2> 
  1115                              <2> %assign i +1
  1116 000009DC [F002]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1117                              <2> 
  1118                              <2> %assign i +1
  1119 000009E4 [F002]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1120                              <2> 
  1121                              <2> %assign i +1
  1122 000009EC [F002]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1123                              <2> 
  1124                              <2> %assign i +1
  1125 000009F4 [F002]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1126                              <2> 
  1127                              <2> %assign i +1
  1128 000009FC [F002]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1129                              <2> 
  1130                              <2> %assign i +1
  1131 00000A04 [F002]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1132                              <2> 
  1133                              <2> %assign i +1
  1134 00000A0C [F002]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1135                              <2> 
  1136                              <2> %assign i +1
  1137 00000A14 [F002]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1138                              <2> 
  1139                              <2> %assign i +1
  1140 00000A1C [F002]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1141                              <2> 
  1142                              <2> %assign i +1
  1143 00000A24 [F002]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1144                              <2> 
  1145                              <2> %assign i +1
  1146 00000A2C [F002]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1147                              <2> 
  1148                              <2> %assign i +1
  1149 00000A34 [F002]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1150                              <2> 
  1151                              <2> %assign i +1
  1152 00000A3C [F002]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1153                              <2> 
  1154                              <2> %assign i +1
  1155 00000A44 [F002]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1156                              <2> 
  1157                              <2> %assign i +1
  1158 00000A4C [F002]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1159                              <2> 
  1160                              <2> %assign i +1
  1161 00000A54 [F002]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1162                              <2> 
  1163                              <2> %assign i +1
  1164 00000A5C [F002]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1165                              <2> 
  1166                              <2> %assign i +1
  1167 00000A64 [F002]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1168                              <2> 
  1169                              <2> %assign i +1
  1170 00000A6C [F002]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1171                              <2> 
  1172                              <2> %assign i +1
  1173 00000A74 [F002]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1174                              <2> 
  1175                              <2> %assign i +1
  1176 00000A7C [F002]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1177                              <2> 
  1178                              <2> %assign i +1
  1179 00000A84 [F002]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1180                              <2> 
  1181                              <2> %assign i +1
  1182 00000A8C [F002]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1183                              <2> 
  1184                              <2> %assign i +1
  1185 00000A94 [F002]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1186                              <2> 
  1187                              <2> %assign i +1
  1188 00000A9C [F002]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1189                              <2> 
  1190                              <2> %assign i +1
  1191 00000AA4 [F002]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1192                              <2> 
  1193                              <2> %assign i +1
  1194 00000AAC [F002]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1195                              <2> 
  1196                              <2> %assign i +1
  1197 00000AB4 [F002]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1198                              <2> 
  1199                              <2> %assign i +1
  1200 00000ABC [F002]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1201                              <2> 
  1202                              <2> %assign i +1
  1203 00000AC4 [F002]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1204                              <2> 
  1205                              <2> %assign i +1
  1206 00000ACC [F002]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1207                              <2> 
  1208                              <2> %assign i +1
  1209 00000AD4 [F002]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1210                              <2> 
  1211                              <2> %assign i +1
  1212 00000ADC [F002]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1213                              <2> 
  1214                              <2> %assign i +1
  1215 00000AE4 [F002]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1216                              <2> 
  1217                              <2> %assign i +1
  1218 00000AEC [F002]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1219                              <2> 
  1220                              <2> %assign i +1
  1221 00000AF4 [F002]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1222                              <2> 
  1223                              <2> %assign i +1
  1224 00000AFC [F002]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1225                              <2> 
  1226                              <2> %assign i +1
  1227 00000B04 [F002]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1228                              <2> 
  1229                              <2> %assign i +1
  1230 00000B0C [F002]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1231                              <2> 
  1232                              <2> %assign i +1
  1233 00000B14 [F002]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1234                              <2> 
  1235                              <2> %assign i +1
  1236 00000B1C [F002]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1237                              <2> 
  1238                              <2> %assign i +1
  1239 00000B24 [F002]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1240                              <2> 
  1241                              <2> %assign i +1
  1242 00000B2C [F002]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1243                              <2> 
  1244                              <2> %assign i +1
  1245 00000B34 [F002]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1246                              <2> 
  1247                              <2> %assign i +1
  1248 00000B3C [F002]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1249                              <2> 
  1250                              <2> %assign i +1
  1251 00000B44 [F002]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1252                              <2> 
  1253                              <2> %assign i +1
  1254 00000B4C [F002]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1255                              <2> 
  1256                              <2> %assign i +1
  1257 00000B54 [F002]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1258                              <2> 
  1259                              <2> %assign i +1
  1260 00000B5C [F002]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1261                              <2> 
  1262                              <2> %assign i +1
  1263                              <1> idt_end:
  1264                              <1> [BITS 32]
  1265                                  	%include "source/realmode.asm"
  1266                              <1> realmode:	;make sure the real mode program's address is in realmodeptr 
  1267                              <1> 			;and the return address is in realmodereturn
  1268 00000B64 FA                  <1> 	cli
  1269 00000B65 A3[770C0000]        <1> 	mov [realmodeeax], eax
  1270 00000B6A 891D[730C0000]      <1> 	mov [realmodeebx], ebx
  1271 00000B70 8925[650C0000]      <1> 	mov [pmodeesp], esp
  1272                              <1> 
  1273 00000B76 BB[6F0C0000]        <1> 	mov ebx, cr0old
  1274                              <1> rmcopytofirstmbyte:
  1275 00000B7B 8B03                <1> 	mov eax, [ebx]
  1276 00000B7D 658903              <1> 	mov [gs:ebx], eax
  1277 00000B80 81C304000000        <1> 	add ebx, 4
  1278 00000B86 81FB[7F0C0000]      <1> 	cmp ebx, realmodeptr
  1279 00000B8C 76ED                <1> 	jbe rmcopytofirstmbyte
  1280                              <1> 
  1281 00000B8E EA[950B0000]3800    <1> 	jmp V8086_CODE_SEL:protected16bit
  1282                              <1> 
  1283                              <1> [BITS 16]
  1284                              <1> protected16bit:
  1285 00000B95 B84000              <1> 	mov ax, V8086_DATA_SEL
  1286 00000B98 8ED8                <1> 	mov ds, ax
  1287 00000B9A 8EC0                <1> 	mov es, ax
  1288 00000B9C 8EE0                <1> 	mov fs, ax
  1289 00000B9E 8EE8                <1> 	mov gs, ax
  1290 00000BA0 8ED0                <1> 	mov ss, ax
  1291 00000BA2 66BC[5A4F0000]      <1> 	mov esp, stackend
  1292 00000BA8 0F20C0              <1> 	mov eax, cr0
  1293 00000BAB 66A3[6F0C]          <1> 	mov [cr0old], eax
  1294 00000BAF 6625FEFFFF7F        <1> 	and eax, 0x7FFFFFFE
  1295 00000BB5 0F22C0              <1> 	mov cr0, eax	;now in real mode
  1296 00000BB8 EA[BD0B]0010        <1> 	jmp 0x1000:inrealmode
  1297                              <1> 
  1298                              <1> inrealmode:
  1299 00000BBD 8CC8                <1> 	mov ax, cs
  1300 00000BBF 8ED8                <1> 	mov ds, ax
  1301 00000BC1 8EC0                <1> 	mov es, ax
  1302 00000BC3 8EE0                <1> 	mov fs, ax
  1303 00000BC5 8EE8                <1> 	mov gs, ax
  1304 00000BC7 8ED0                <1> 	mov ss, ax
  1305 00000BC9 BC[5A4F]            <1> 	mov sp, stackend ;because this is at 0x1000: and not 0x10000: it works
  1306                              <1> 	
  1307 00000BCC B011                <1> 	mov al, 0x11
  1308 00000BCE E620                <1> 	out 0x20, al
  1309 00000BD0 E6A0                <1> 	out 0xA0, al
  1310 00000BD2 B008                <1> 	mov al, 0x8		;interrupt for master
  1311 00000BD4 E621                <1> 	out 0x21, al
  1312 00000BD6 B070                <1> 	mov al, 0x70	;interrupt for slave
  1313 00000BD8 E6A1                <1> 	out 0xA1, al
  1314 00000BDA B004                <1> 	mov al, 4
  1315 00000BDC E621                <1> 	out 0x21, al
  1316 00000BDE B002                <1> 	mov al, 2
  1317 00000BE0 E6A1                <1> 	out 0xA1, al
  1318 00000BE2 B001                <1> 	mov al, 0x1
  1319 00000BE4 E621                <1> 	out 0x21, al
  1320 00000BE6 B001                <1> 	mov al, 0x1
  1321 00000BE8 E6A1                <1> 	out 0xA1, al
  1322                              <1> 	
  1323 00000BEA 0F011E[690C]        <1> 	lidt [idt_real]
  1324 00000BEF FB                  <1> 	sti
  1325                              <1> 
  1326 00000BF0 66A1[770C]          <1> 	mov eax, [realmodeeax]
  1327 00000BF4 668B1E[730C]        <1> 	mov ebx, [realmodeebx]
  1328                              <1> 
  1329 00000BF9 FF16[7F0C]          <1> 	call word [realmodeptr] ;call the real mode program here
  1330                              <1> 
  1331 00000BFD 66A3[770C]          <1> 	mov [realmodeeax], eax
  1332 00000C01 66891E[730C]        <1> 	mov [realmodeebx], ebx
  1333                              <1> 
  1334 00000C06 FA                  <1> 	cli
  1335 00000C07 0F0116[0003]        <1> 	lgdt [gdtr]
  1336 00000C0C 0F011E[0603]        <1> 	lidt [idtr]
  1337 00000C11 0F20C0              <1> 	mov eax, cr0
  1338 00000C14 0C01                <1> 	or al, 1
  1339 00000C16 0F22C0              <1> 	mov cr0,eax
  1340 00000C19 EA[1E0C]2800        <1> 	jmp NEW_CODE_SEL:returntopmode
  1341                              <1> 
  1342                              <1> [BITS 32]
  1343                              <1> returntopmode:
  1344 00000C1E 66B83000            <1> 	mov ax, NEW_DATA_SEL
  1345 00000C22 8ED8                <1> 	mov ds, ax
  1346 00000C24 8EC0                <1> 	mov es, ax
  1347 00000C26 8EE0                <1> 	mov fs, ax
  1348 00000C28 8ED0                <1> 	mov ss, ax
  1349 00000C2A 8B25[650C0000]      <1> 	mov esp, [pmodeesp]
  1350 00000C30 66B82000            <1> 	mov ax, SYS_DATA_SEL
  1351 00000C34 8EE8                <1> 	mov gs, ax
  1352                              <1> 
  1353 00000C36 BB[6F0C0000]        <1> 	mov ebx, cr0old
  1354                              <1> rmcopyfromfirstmbyte:
  1355 00000C3B 658B03              <1> 	mov eax, [gs:ebx]
  1356 00000C3E 8903                <1> 	mov [ebx], eax
  1357 00000C40 81C304000000        <1> 	add ebx, 4
  1358 00000C46 81FB[7F0C0000]      <1> 	cmp ebx, realmodeptr
  1359 00000C4C 76ED                <1> 	jbe rmcopyfromfirstmbyte
  1360                              <1> 
  1361 00000C4E E87A2A0000          <1> 	call initialize.pic ;reset irq's and masks
  1362 00000C53 FB                  <1> 	sti
  1363 00000C54 A1[770C0000]        <1> 	mov eax, [realmodeeax]
  1364 00000C59 8B1D[730C0000]      <1> 	mov ebx, [realmodeebx]
  1365 00000C5F FF25[7B0C0000]      <1> 	jmp dword [realmodereturn]
  1366                              <1> 	
  1367 00000C65 00000000            <1> pmodeesp dd 0
  1368                              <1> idt_real:
  1369 00000C69 FF03                <1> 	dw 0x3FF
  1370 00000C6B 00000000            <1> 	dd 0
  1371 00000C6F 00000000            <1> cr0old dd 0
  1372 00000C73 00000000            <1> realmodeebx dd 0
  1373 00000C77 00000000            <1> realmodeeax dd 0
  1374 00000C7B 00000000            <1> realmodereturn dd 0
  1375 00000C7F 0000                <1> realmodeptr dw 0
  1376 00000C81 00000000            <1> dd 0 ;make sure the copy thing doesnt overflow
  1377                                  [BITS 32]
  1378                                      %include "source/exception.asm"
  1379                              <1> %ifdef exceptions.included
  1380                              <1> unhand:	
  1381                              <1> 	%assign i 0
  1382                              <1> 	%rep 32
  1383                              <1> 	mov byte [intprob], i
  1384                              <1> 	jmp unhand2
  1385                              <1> 	%assign i i+1
  1386                              <1> 	%endrep
  1387                              <1> unhand2:
  1388                              <1> 	cli
  1389                              <1> 	push ds
  1390                              <1> 	push es
  1391                              <1> 	push fs
  1392                              <1> 	push gs
  1393                              <1> 	push ss
  1394                              <1> 	pushad
  1395                              <1> %ifdef gui.included
  1396                              <1> 	cmp byte [guion], 0
  1397                              <1> 	je near noguiunhandstuff
  1398                              <1> 	mov word [locunhandy], 8
  1399                              <1> 	mov word [locunhandx], 8
  1400                              <1> 	mov bx, [background]
  1401                              <1> 	mov [backgroundcache], bx
  1402                              <1> 	mov byte [mousedisabled],1
  1403                              <1> 	mov bx, 1111100000000000b
  1404                              <1> 	mov [background], bx
  1405                              <1> noguiunhandstuff:
  1406                              <1> %endif
  1407                              <1> 	mov esi, esp
  1408                              <1> 	mov [espfirst], esi
  1409                              <1> 	add esi, ((unhndrgend - unhndrg)/15)*4
  1410                              <1> 	mov [esploc], esi
  1411                              <1> 	mov esi, unhandmsg
  1412                              <1> 	mov [esiloc], esi
  1413                              <1> 	xor ecx, ecx
  1414                              <1> 	mov cl, [intprob]
  1415                              <1> 	mov ebx, errortypes
  1416                              <1> 	shl ecx, 2
  1417                              <1> 	add ebx, ecx
  1418                              <1> 	cmp ebx, errortypesend
  1419                              <1> 	jb gooderrortype
  1420                              <1> 	mov ebx, errortypesend
  1421                              <1> gooderrortype:
  1422                              <1> 	mov esi, [ebx]
  1423                              <1> %ifdef gui.included
  1424                              <1> 	cmp byte [guion], 0
  1425                              <1> 	je near errortext
  1426                              <1> 	mov cx, [locunhandy]
  1427                              <1> 	mov dx, [locunhandx]
  1428                              <1> 	mov ax, 1
  1429                              <1> 	xor bx, bx
  1430                              <1> 	call showstring2
  1431                              <1> 	mov [locunhandy], cx
  1432                              <1> 	mov [locunhandx], dx
  1433                              <1> 	jmp errortextdone
  1434                              <1> %endif
  1435                              <1> errortext:
  1436                              <1> 	call print		;;get the error message and print it
  1437                              <1> errortextdone:
  1438                              <1> 	xor ecx, ecx
  1439                              <1> 	mov cl, [intprob]
  1440                              <1> 	call expdump
  1441                              <1> dumpstack:
  1442                              <1> 	mov esi, [esploc]
  1443                              <1> 	cmp esi, esp
  1444                              <1> 	jb donedump
  1445                              <1> 	mov ecx, [ss:esi]
  1446                              <1> 	sub esi, 4
  1447                              <1> 	mov [esploc], esi
  1448                              <1> 	call expdump
  1449                              <1> 	jmp dumpstack
  1450                              <1> donedump:
  1451                              <1> 	mov ecx, cr0
  1452                              <1> 	call expdump
  1453                              <1> 	mov ecx, cr2
  1454                              <1> 	call expdump
  1455                              <1> 	mov ecx, cr3
  1456                              <1> 	call expdump
  1457                              <1> 	mov ecx, cr4
  1458                              <1> 	call expdump
  1459                              <1> 	str ecx
  1460                              <1> 	call expdump
  1461                              <1> 	sidt [igdtcache]
  1462                              <1> 	mov ecx, [igdtcache + 2]
  1463                              <1> 	call expdump
  1464                              <1> 	sgdt [igdtcache]
  1465                              <1> 	mov ecx, [igdtcache + 2]
  1466                              <1> 	call expdump
  1467                              <1> 	sldt ecx
  1468                              <1> 	call expdump
  1469                              <1> 	mov esi, [esploc]
  1470                              <1> 	mov edi, [ss:esp + 52]
  1471                              <1> 	add edi, 16
  1472                              <1> 	mov [codelocend], edi
  1473                              <1> 	sub edi, 32
  1474                              <1> dumpcodeloop:
  1475                              <1> 	mov [codeloc], edi
  1476                              <1> 	mov ecx, [edi]
  1477                              <1> 	call expdump
  1478                              <1> 	mov edi, [codeloc]
  1479                              <1> 	add edi, 4
  1480                              <1> 	cmp edi, [codelocend]
  1481                              <1> 	jb dumpcodeloop
  1482                              <1> 	mov esi, backtoosmsg
  1483                              <1> %ifdef gui.included
  1484                              <1> 	cmp byte [guion], 0
  1485                              <1> 	je backtomsg
  1486                              <1> guibacktomsg:
  1487                              <1> 	mov dx, [locunhandx]
  1488                              <1> 	mov cx, [locunhandy]
  1489                              <1> 	mov ax, 1
  1490                              <1> 	xor bx, bx
  1491                              <1> 	call showstring2
  1492                              <1> 	jmp backtomsgdone
  1493                              <1> backtomsg:
  1494                              <1> %endif
  1495                              <1> 	call print
  1496                              <1> backtomsgdone:
  1497                              <1> 	xor al, al
  1498                              <1> 	call rdcharint
  1499                              <1> 	cmp byte [intprob], 3
  1500                              <1> 	jne nodebugint
  1501                              <1> %ifdef gui.included
  1502                              <1> 	cmp byte [guion], 0
  1503                              <1> 	je nodebuggui
  1504                              <1> 	mov bx, [backgroundcache]
  1505                              <1> 	mov [background], bx
  1506                              <1> 	xor bx, bx
  1507                              <1> 	mov byte [mousedisabled], 0
  1508                              <1> 	call guiclear
  1509                              <1> 	call reloadallgraphics
  1510                              <1> 	call termcopy
  1511                              <1> nodebuggui:
  1512                              <1> %endif
  1513                              <1> 	mov esi, [espfirst]
  1514                              <1> 	mov esp, esi
  1515                              <1> 	popad
  1516                              <1> 	pop ss
  1517                              <1> 	pop gs
  1518                              <1> 	pop fs
  1519                              <1> 	pop es
  1520                              <1> 	pop ds
  1521                              <1> 	iret
  1522                              <1> nodebugint:
  1523                              <1> 	popad
  1524                              <1> 	pop ss
  1525                              <1> 	pop gs
  1526                              <1> 	pop fs
  1527                              <1> 	pop es
  1528                              <1> 	pop ds
  1529                              <1> %ifdef gui.included
  1530                              <1> 	cmp byte [guion], 0
  1531                              <1> 	je returnunhandgui
  1532                              <1> 	mov bx, [backgroundcache]
  1533                              <1> 	mov [background], bx
  1534                              <1> 	xor bx, bx
  1535                              <1> 	mov byte [mousedisabled], 0
  1536                              <1> 	call guiclear
  1537                              <1> 	call reloadallgraphics
  1538                              <1> 	call termcopy
  1539                              <1> %endif
  1540                              <1> returnunhandgui:
  1541                              <1> 	jmp nwcmd
  1542                              <1> backtoosmsg db "Please post any problems in the Issues section at solleros.googlecode.com",10
  1543                              <1> 			db "Press any key to return to SollerOS",10,0
  1544                              <1> expdump:
  1545                              <1> 	mov esi, [esiloc]
  1546                              <1> 	mov edi, esi
  1547                              <1> 	add edi, 15
  1548                              <1> 	add esi, 4
  1549                              <1> 	mov [esiloc], edi
  1550                              <1> 	sub edi, 3
  1551                              <1> 	call converthex
  1552                              <1> 	sub esi, 4
  1553                              <1> %ifdef gui.included
  1554                              <1> 	cmp byte [guion], 0
  1555                              <1> 	je near expdumptext
  1556                              <1> 	mov cx, [locunhandy]
  1557                              <1> 	mov dx, [locunhandx]
  1558                              <1> 	mov ax, 1
  1559                              <1> 	xor bx, bx
  1560                              <1> 	call showstring2
  1561                              <1> 	mov [locunhandy], cx
  1562                              <1> 	mov [locunhandx], dx
  1563                              <1> 	ret
  1564                              <1> %endif
  1565                              <1> expdumptext:
  1566                              <1> 	call print
  1567                              <1> 	ret
  1568                              <1> esploc dd 0
  1569                              <1> espfirst dd 0
  1570                              <1> esiloc dd 0
  1571                              <1> esiregbuf dd 0
  1572                              <1> locunhandy dw 1
  1573                              <1> locunhandx dw 1
  1574                              <1> backgroundcache dw 0
  1575                              <1> intprob db 0
  1576                              <1> codeloc dd 0
  1577                              <1> codelocend dd 0
  1578                              <1> igdtcache dw 0,0,0
  1579                              <1> 	unhandmsg:	
  1580                              <1> 			db "INT=00000000",255,10,0
  1581                              <1> unhndrg:
  1582                              <1> 	times 7 db 255,255,255,255,"00000000  ",0	;;this dumps the stack before the stack frame in question
  1583                              <1> 			db 255,255,255,255,"00000000",255,10,0
  1584                              <1> 	times 7 db 255,255,255,255,"00000000  ",0	;;this dumps the stack before the stack frame in question
  1585                              <1> 			db 255,255,255,255,"00000000",255,10,0
  1586                              <1> 	times 7 db 255,255,255,255,"00000000  ",0	;;this dumps the stack before the stack frame in question
  1587                              <1> 			db 255,255,255,255,"00000000",255,10,0
  1588                              <1> 	times 7 db 255,255,255,255,"00000000  ",0	;;this dumps the stack before the stack frame in question
  1589                              <1> 			db 255,255,255,255,"00000000",255,10,0
  1590                              <1> unhandregs:
  1591                              <1> 			db "EFL=00000000  ",0
  1592                              <1> 			db "CS:=00000000  ",0
  1593                              <1> 			db "EIP=00000000",255,10,0
  1594                              <1> 			db "DS:=00000000  ",0
  1595                              <1> 			db "ES:=00000000  ",0
  1596                              <1> 			db "FS:=00000000  ",0
  1597                              <1> 			db "GS:=00000000  ",0
  1598                              <1> 			db "SS:=00000000",255,10,0
  1599                              <1> 			db "EAX=00000000  ",0
  1600                              <1> 			db "ECX=00000000  ",0
  1601                              <1> 			db "EDX=00000000  ",0
  1602                              <1> 			db "EBX=00000000",255,10,0
  1603                              <1> 			db "ESP=00000000  ",0
  1604                              <1> 			db "EBP=00000000  ",0
  1605                              <1> 			db "ESI=00000000  ",0
  1606                              <1> unhndrgend:	db "EDI=00000000",255,10,0
  1607                              <1> 			db "CR0=00000000  ",0
  1608                              <1> 			db "CR2=00000000  ",0
  1609                              <1> 			db "CR3=00000000  ",0
  1610                              <1> 			db "CR4=00000000",255,10,0
  1611                              <1> 			db "TR:=00000000  ",0
  1612                              <1> 			db "IDT=00000000  ",0
  1613                              <1> 			db "GDT=00000000  ",0
  1614                              <1> 			db "LDT=00000000",255,10,0
  1615                              <1> unhandcode: times 2 db 255,255,255,255,"00000000  ",0	;;this dumps the code before and after the interrupt in question
  1616                              <1> 			db 255,255,255,255,"00000000 ",255,0
  1617                              <1> 			db 255,255,255,"[00000000] ",0
  1618                              <1> 			times 3 db 255,255,255,255,"00000000  ",0
  1619                              <1> 			db 255,255,255,255,"00000000",255,10,0
  1620                              <1> unhandmsgend:
  1621                              <1> 
  1622                              <1> errortypes:
  1623                              <1> 			dd err0
  1624                              <1> 			dd err1
  1625                              <1> 			dd err2
  1626                              <1> 			dd err3
  1627                              <1> 			dd err4
  1628                              <1> 			dd err5
  1629                              <1> 			dd err6
  1630                              <1> 			dd err7
  1631                              <1> 			dd err8
  1632                              <1> 			dd err9
  1633                              <1> 			dd err10
  1634                              <1> 			dd err11
  1635                              <1> 			dd err12
  1636                              <1> 			dd err13
  1637                              <1> 			dd err14
  1638                              <1> 			dd err15
  1639                              <1> errortypesend:
  1640                              <1> 			dd unknownerror
  1641                              <1> 			
  1642                              <1> err0	db "Division by zero:",10
  1643                              <1> 		db "Technically lim a",246,"x = ",236," when a is any real number. Happy Easter!",10
  1644                              <1> 		db "            x",26,"0",10,0
  1645                              <1> 		
  1646                              <1> err1	db "Single-step/Breakpoint:",10
  1647                              <1> 		db "A breakpoint fault, breakpoint trap, or single-step trap was triggered.",10,0
  1648                              <1> 		
  1649                              <1> err2	db "Nonmaskable interrupt:",10
  1650                              <1> 		db "A hardware interrupt was triggered that could not be masked.",10,0
  1651                              <1> 		
  1652                              <1> err3	db "Breakpoint:",10
  1653                              <1> 		db "This interrupt is used in programs to show the stack and registers and can be",10
  1654                              <1> 		db "ignored.",10,0
  1655                              <1> 		
  1656                              <1> err4	db "Overflow:",10
  1657                              <1> 		db "The processor ran into an INTO instruction with the overflow flag set.",10,0
  1658                              <1> 		
  1659                              <1> err5	db "Bounds check:",10
  1660                              <1> 		db "The processor rebounded from a BOUND instruction run on an operand that was out",10
  1661                              <1> 		db "of bounds.",10,0
  1662                              <1> 		
  1663                              <1> err6	db "Invalid opcode:",10
  1664                              <1> 		db "The processor has no idea what it was trying to execute. Don't run SSE4 code",10
  1665                              <1> 		db "on 486's!",10,0
  1666                              <1> 		
  1667                              <1> err7	db "Coprocessor not available:",10
  1668                              <1> 		db "Don't you know they don't make those anymore!",10,0
  1669                              <1> 		
  1670                              <1> err8	db "Double fault:",10
  1671                              <1> 		db "The exception handler could not handle that it could not handle an exception.",10,0
  1672                              <1> 		
  1673                              <1> err9	db "Coprocessor segment overrun:",10,0
  1674                              <1> 		db "This never happens in modern computers, and never should.",10,0
  1675                              <1> 
  1676                              <1> err10	db "Invalid TSS:",10
  1677                              <1> 		db "The TSS that was switched to is invalid. Nothing funny here.",10,0
  1678                              <1> 		
  1679                              <1> err11	db "Segment not present:",10
  1680                              <1> 		db "The present bit of the segment descriptor is set to zero.",10,0
  1681                              <1> 		
  1682                              <1> err12	db "Stack exception:",10
  1683                              <1> 		db "The SS descriptor is invalid or not present or its limit is too small.",10,0
  1684                              <1> 		
  1685                              <1> err13	db "General protection violation:",10
  1686                              <1> 		db "You violated the computer. Step away slowly. The FBI is on its way.",10,0
  1687                              <1> 		
  1688                              <1> err14	db "Page fault:",10
  1689                              <1> 		db "The page that was requested was not available.",10,0
  1690                              <1> 		
  1691                              <1> err15	db "Reserved for Plan R:",10
  1692                              <1> 		db "This interrupt is reserved for usage only by the military when it is necessary",10
  1693                              <1> 		db "to initiate a full-scale coup d'",130,"tat.",10,0
  1694                              <1> 		
  1695                              <1> unknownerror db "What the hell just happened? Is everyone okay? Hard drive? Video card?",10
  1696                              <1> 			db	"Memory? Are you there?",10,0
  1697                              <1> %else
  1698                              <1> unhand:	
  1699                              <1> 	%assign i 0
  1700                              <1> 	%rep 32
  1701                              <1> 	mov byte [intprob], i
  1702                              <1> 	jmp unhand2
  1703                              <1> 	%assign i i+1
  1704                              <1> 	%endrep
  1705 00000C85 C605[220E0000]00    <2>  mov byte [intprob], i
  1706 00000C8C E974010000          <2>  jmp unhand2
  1707                              <2>  %assign i i+1
  1708 00000C91 C605[220E0000]01    <2>  mov byte [intprob], i
  1709 00000C98 E968010000          <2>  jmp unhand2
  1710                              <2>  %assign i i+1
  1711 00000C9D C605[220E0000]02    <2>  mov byte [intprob], i
  1712 00000CA4 E95C010000          <2>  jmp unhand2
  1713                              <2>  %assign i i+1
  1714 00000CA9 C605[220E0000]03    <2>  mov byte [intprob], i
  1715 00000CB0 E950010000          <2>  jmp unhand2
  1716                              <2>  %assign i i+1
  1717 00000CB5 C605[220E0000]04    <2>  mov byte [intprob], i
  1718 00000CBC E944010000          <2>  jmp unhand2
  1719                              <2>  %assign i i+1
  1720 00000CC1 C605[220E0000]05    <2>  mov byte [intprob], i
  1721 00000CC8 E938010000          <2>  jmp unhand2
  1722                              <2>  %assign i i+1
  1723 00000CCD C605[220E0000]06    <2>  mov byte [intprob], i
  1724 00000CD4 E92C010000          <2>  jmp unhand2
  1725                              <2>  %assign i i+1
  1726 00000CD9 C605[220E0000]07    <2>  mov byte [intprob], i
  1727 00000CE0 E920010000          <2>  jmp unhand2
  1728                              <2>  %assign i i+1
  1729 00000CE5 C605[220E0000]08    <2>  mov byte [intprob], i
  1730 00000CEC E914010000          <2>  jmp unhand2
  1731                              <2>  %assign i i+1
  1732 00000CF1 C605[220E0000]09    <2>  mov byte [intprob], i
  1733 00000CF8 E908010000          <2>  jmp unhand2
  1734                              <2>  %assign i i+1
  1735 00000CFD C605[220E0000]0A    <2>  mov byte [intprob], i
  1736 00000D04 E9FC000000          <2>  jmp unhand2
  1737                              <2>  %assign i i+1
  1738 00000D09 C605[220E0000]0B    <2>  mov byte [intprob], i
  1739 00000D10 E9F0000000          <2>  jmp unhand2
  1740                              <2>  %assign i i+1
  1741 00000D15 C605[220E0000]0C    <2>  mov byte [intprob], i
  1742 00000D1C E9E4000000          <2>  jmp unhand2
  1743                              <2>  %assign i i+1
  1744 00000D21 C605[220E0000]0D    <2>  mov byte [intprob], i
  1745 00000D28 E9D8000000          <2>  jmp unhand2
  1746                              <2>  %assign i i+1
  1747 00000D2D C605[220E0000]0E    <2>  mov byte [intprob], i
  1748 00000D34 E9CC000000          <2>  jmp unhand2
  1749                              <2>  %assign i i+1
  1750 00000D39 C605[220E0000]0F    <2>  mov byte [intprob], i
  1751 00000D40 E9C0000000          <2>  jmp unhand2
  1752                              <2>  %assign i i+1
  1753 00000D45 C605[220E0000]10    <2>  mov byte [intprob], i
  1754 00000D4C E9B4000000          <2>  jmp unhand2
  1755                              <2>  %assign i i+1
  1756 00000D51 C605[220E0000]11    <2>  mov byte [intprob], i
  1757 00000D58 E9A8000000          <2>  jmp unhand2
  1758                              <2>  %assign i i+1
  1759 00000D5D C605[220E0000]12    <2>  mov byte [intprob], i
  1760 00000D64 E99C000000          <2>  jmp unhand2
  1761                              <2>  %assign i i+1
  1762 00000D69 C605[220E0000]13    <2>  mov byte [intprob], i
  1763 00000D70 E990000000          <2>  jmp unhand2
  1764                              <2>  %assign i i+1
  1765 00000D75 C605[220E0000]14    <2>  mov byte [intprob], i
  1766 00000D7C E984000000          <2>  jmp unhand2
  1767                              <2>  %assign i i+1
  1768 00000D81 C605[220E0000]15    <2>  mov byte [intprob], i
  1769 00000D88 E978000000          <2>  jmp unhand2
  1770                              <2>  %assign i i+1
  1771 00000D8D C605[220E0000]16    <2>  mov byte [intprob], i
  1772 00000D94 E96C000000          <2>  jmp unhand2
  1773                              <2>  %assign i i+1
  1774 00000D99 C605[220E0000]17    <2>  mov byte [intprob], i
  1775 00000DA0 E960000000          <2>  jmp unhand2
  1776                              <2>  %assign i i+1
  1777 00000DA5 C605[220E0000]18    <2>  mov byte [intprob], i
  1778 00000DAC E954000000          <2>  jmp unhand2
  1779                              <2>  %assign i i+1
  1780 00000DB1 C605[220E0000]19    <2>  mov byte [intprob], i
  1781 00000DB8 E948000000          <2>  jmp unhand2
  1782                              <2>  %assign i i+1
  1783 00000DBD C605[220E0000]1A    <2>  mov byte [intprob], i
  1784 00000DC4 E93C000000          <2>  jmp unhand2
  1785                              <2>  %assign i i+1
  1786 00000DC9 C605[220E0000]1B    <2>  mov byte [intprob], i
  1787 00000DD0 E930000000          <2>  jmp unhand2
  1788                              <2>  %assign i i+1
  1789 00000DD5 C605[220E0000]1C    <2>  mov byte [intprob], i
  1790 00000DDC E924000000          <2>  jmp unhand2
  1791                              <2>  %assign i i+1
  1792 00000DE1 C605[220E0000]1D    <2>  mov byte [intprob], i
  1793 00000DE8 E918000000          <2>  jmp unhand2
  1794                              <2>  %assign i i+1
  1795 00000DED C605[220E0000]1E    <2>  mov byte [intprob], i
  1796 00000DF4 E90C000000          <2>  jmp unhand2
  1797                              <2>  %assign i i+1
  1798 00000DF9 C605[220E0000]1F    <2>  mov byte [intprob], i
  1799 00000E00 E900000000          <2>  jmp unhand2
  1800                              <2>  %assign i i+1
  1801                              <1> unhand2:
  1802 00000E05 803D[220E0000]03    <1> 	cmp byte [intprob], 3
  1803 00000E0C 0F84DEF4FFFF        <1> 	je handled	;if it is a debug interrupt, it is auto handled
  1804 00000E12 BB00CDADDE          <1> 	mov ebx, 0xDEADCD00 ;this shows that an exception occured even though more detailed info cannot be shown
  1805                              <1> 						;CD stands for the interrupt code, DEAD shows that the program died because of the int
  1806 00000E17 8A1D[220E0000]      <1> 	mov bl, [intprob]
  1807 00000E1D E980000000          <1> 	jmp exitprog
  1808 00000E22 00                  <1> intprob db 0
  1809                              <1> %endif
  1810                                      %include "source/ints.asm"
  1811                              <1> newints:	;for great justice
  1812 00000E23 80FC00              <1> 	cmp ah, 0
  1813 00000E26 0F8476000000        <1> 	je near intx0   ;kills app
  1814 00000E2C 80FC01              <1> 	cmp ah, 1
  1815 00000E2F 0F84F5000000        <1> 	je near intx1   ;print string
  1816 00000E35 80FC02              <1> 	cmp ah, 2
  1817 00000E38 0F844A010000        <1> 	je near intx2	;read string
  1818 00000E3E 80FC03              <1> 	cmp ah, 3
  1819 00000E41 0F846A010000        <1> 	je near intx3	;clear screen
  1820 00000E47 80FC04              <1> 	cmp ah, 4
  1821 00000E4A 0F846C010000        <1> 	je near intx4	;read and print string
  1822 00000E50 80FC05              <1> 	cmp ah, 5
  1823 00000E53 0F8462050000        <1> 	je near intx5	;get char
  1824 00000E59 80FC06              <1> 	cmp ah, 6
  1825 00000E5C 0F84AD050000        <1> 	je near intx6	;print char
  1826 00000E62 80FC07              <1> 	cmp ah, 7
  1827 00000E65 0F84B6050000        <1> 	je near intx7	;read file
  1828                              <1> ;	cmp ah, 8
  1829                              <1> ;	je near intx8	;write file
  1830 00000E6B 80FC09              <1> 	cmp ah, 9
  1831 00000E6E 0F84B7050000        <1> 	je near intx9	;convert number to string
  1832 00000E74 80FC0A              <1> 	cmp ah, 10
  1833 00000E77 0F84C6050000        <1> 	je near intx10	;convert string to number
  1834                              <1> %ifdef threads.included
  1835                              <1> 	cmp ah, 11
  1836                              <1> 	je near intx11	;create thread
  1837                              <1> %endif
  1838 00000E7D 80FC0C              <1> 	cmp ah, 12
  1839 00000E80 0F84C7050000        <1> 	je near intx12	;get time
  1840 00000E86 80FC0D              <1> 	cmp ah, 13
  1841 00000E89 0F84D3050000        <1> 	je near intx13	;set time
  1842 00000E8F 80FC0E              <1> 	cmp ah, 14
  1843 00000E92 0F84DA050000        <1> 	je near intx14	;run program
  1844 00000E98 80FC0F              <1> 	cmp ah, 15
  1845 00000E9B 0F84E6050000        <1> 	je near intx15	;get program info-location of name/options/number of options/environmental vars
  1846 00000EA1 C3                  <1> 	ret
  1847                              <1> 	
  1848                              <1> ;;the jmp timerinterrupt's ensure that task switches occur
  1849                              <1> intx0:
  1850                              <1> 	%include 'source/interrupts/0_exit.asm'
  1851                              <2> exitprog:
  1852 00000EA2 66B83000            <2> 	mov ax, NEW_DATA_SEL
  1853 00000EA6 8ED8                <2> 	mov ds, ax
  1854 00000EA8 8EC0                <2> 	mov es, ax
  1855 00000EAA 8EE0                <2> 	mov fs, ax
  1856 00000EAC 66B82000            <2> 	mov ax, SYS_DATA_SEL
  1857 00000EB0 8EE8                <2> 	mov gs, ax
  1858 00000EB2 C705[523B0000]0000- <2> 	mov dword [currentthread], 0
  1859 00000EBA 0000                <2>
  1860 00000EBC C705[4D3B0000]0400- <2> 	mov dword [lastthread], 4
  1861 00000EC4 0000                <2>
  1862 00000EC6 C605[513B0000]00    <2> 	mov byte [threadson], 0 ;for now i need to use this
  1863 00000ECD 8B25[BA530000]      <2> 	mov esp, [previousstack] ;and this
  1864 00000ED3 81FB00000000        <2> 	cmp ebx, 0
  1865 00000ED9 0F8501000000        <2> 	jne near .error
  1866 00000EDF C3                  <2> 	ret
  1867                              <2> .error:
  1868 00000EE0 89D9                <2> 	mov ecx, ebx
  1869 00000EE2 B006                <2> 	mov al, 6
  1870 00000EE4 A2[C81C0000]        <2> 	mov [firsthexshown], al
  1871 00000EE9 51                  <2> 	push ecx
  1872 00000EEA BE[050F0000]        <2> 	mov esi, .msg1
  1873 00000EEF E840000000          <2> 	call printhighlight
  1874 00000EF4 59                  <2> 	pop ecx
  1875 00000EF5 E8E30D0000          <2> 	call showhex
  1876 00000EFA BE[1A0F0000]        <2> 	mov esi, .msg2
  1877 00000EFF E830000000          <2> 	call printhighlight
  1878 00000F04 C3                  <2> 	ret
  1879                              <2> 	
  1880 00000F05 416E20657869742073- <2> .msg1 db "An exit status of 0x",0
  1881 00000F0E 7461747573206F6620- <2>
  1882 00000F17 307800              <2>
  1883 00000F1A 087761732072657475- <2> .msg2 db 8,"was returned.",10,0
  1884 00000F23 726E65642E0A00      <2>
  1885                              <1> intx1:
  1886                              <1> 	%include 'source/interrupts/1_prntstr.asm'
  1887 00000F2A E82A000000          <2> call printint
  1888 00000F2F E97DF3FFFF          <2> jmp timerinterrupt
  1889                              <2> 
  1890                              <2> 	printhighlight:
  1891 00000F34 6631C0              <2> 		xor ax, ax
  1892 00000F37 66BBF000            <2> 		mov bx, 0xF0
  1893 00000F3B E919000000          <2> 		jmp printint
  1894                              <2> 	printquiet:
  1895 00000F40 6631C0              <2> 		xor ax, ax
  1896 00000F43 A2[870F0000]        <2> 		mov [endkeyprint], al
  1897 00000F48 66BB0700            <2> 		mov bx, 7
  1898 00000F4C E820000000          <2> 		call printint.b
  1899 00000F51 C3                  <2> 		ret
  1900                              <2>     print:
  1901 00000F52 6631C0              <2> 		xor ax, ax
  1902 00000F55 66BB0700            <2> 		mov bx, 7
  1903                              <2> 	printint:	;;print line, al=last key,bl=modifier, esi=buffer
  1904 00000F59 56                  <2> 		push esi
  1905 00000F5A A2[870F0000]        <2> 		mov [endkeyprint], al
  1906 00000F5F E80D000000          <2> 		call .b
  1907 00000F64 89F1                <2> 		mov ecx, esi
  1908 00000F66 5F                  <2> 		pop edi
  1909 00000F67 29F9                <2> 		sub ecx, edi
  1910 00000F69 51                  <2> 		push ecx
  1911 00000F6A E84B050000          <2> 		call termcopy
  1912 00000F6F 59                  <2> 		pop ecx
  1913 00000F70 C3                  <2> 		ret
  1914                              <2> 	.b:
  1915 00000F71 8A06                <2> 		mov al, [esi]
  1916 00000F73 3A05[870F0000]      <2> 		cmp al, [endkeyprint]
  1917 00000F79 740B                <2> 		je .done
  1918 00000F7B E89B040000          <2> 		call prcharq
  1919 00000F80 46                  <2> 		inc esi
  1920 00000F81 E9EBFFFFFF          <2> 		jmp .b
  1921                              <2> 	.done:
  1922 00000F86 C3                  <2> 		ret
  1923                              <2> 
  1924 00000F87 00                  <2> endkeyprint db 0
  1925                              <1> intx2:
  1926                              <1> 	%include 'source/interrupts/2_readstr.asm'
  1927 00000F88 E805000000          <2> call readint
  1928 00000F8D E91FF3FFFF          <2> jmp timerinterrupt
  1929                              <2> 
  1930                              <2> 	readint:	;;get line, al=last key, esi = buffer, edi = endbuffer	
  1931 00000F92 89C3                <2> 		mov ebx, eax
  1932                              <2> 	.b:
  1933 00000F94 53                  <2> 		push ebx
  1934 00000F95 57                  <2> 		push edi
  1935 00000F96 56                  <2> 		push esi
  1936 00000F97 30C0                <2> 		xor al, al
  1937 00000F99 E829040000          <2> 		call rdcharint
  1938 00000F9E 5E                  <2> 		pop esi
  1939 00000F9F 8806                <2> 		mov [esi], al
  1940 00000FA1 46                  <2> 		inc esi
  1941 00000FA2 5F                  <2> 		pop edi
  1942 00000FA3 5B                  <2> 		pop ebx
  1943 00000FA4 39FE                <2> 		cmp esi, edi
  1944 00000FA6 7304                <2> 		jae .done
  1945 00000FA8 38D8                <2> 		cmp al, bl
  1946 00000FAA 75E8                <2> 		jne .b
  1947                              <2> 	.done:
  1948 00000FAC 4E                  <2> 		dec esi
  1949 00000FAD C60600              <2> 		mov byte [esi], 0
  1950 00000FB0 C3                  <2> 		ret
  1951                              <1> intx3:
  1952                              <1> 	%include 'source/interrupts/3_clearscrn.asm'
  1953 00000FB1 E805000000          <2> call clear
  1954 00000FB6 E9F6F2FFFF          <2> jmp timerinterrupt
  1955                              <2> %ifdef io.serial
  1956                              <2> clear:
  1957 00000FBB C3                  <2> 	ret
  1958                              <2> %else
  1959                              <2> clear:		
  1960                              <2> 		mov cx, [charxy]
  1961                              <2> 		mov edi, videobuf
  1962                              <2> 		xor ax, ax
  1963                              <2> 		mov [linebeginpos], ax
  1964                              <2> 		mov [videobufpos], ax
  1965                              <2> 		xor dx, dx
  1966                              <2> 		mov [charpos], ax
  1967                              <2> 		mov ah, 7
  1968                              <2> 	clearb:
  1969                              <2> 		mov [edi], ax
  1970                              <2> 		add edi, 2
  1971                              <2> 		dec cl
  1972                              <2> 		cmp cl, 0
  1973                              <2> 		jne clearb
  1974                              <2> 		mov cl, [charxy]
  1975                              <2> 		dec ch
  1976                              <2> 		cmp ch, 0
  1977                              <2> 		jne clearb
  1978                              <2> 	cleardouble:
  1979                              <2> 		mov edi, videobuf2
  1980                              <2> 		mov cx, [charxy]
  1981                              <2> 		xor eax, eax
  1982                              <2> 	clearc:
  1983                              <2> 		mov [edi], ax
  1984                              <2> 		add edi, 2
  1985                              <2> 		dec cl
  1986                              <2> 		cmp cl, 0
  1987                              <2> 		jne clearc
  1988                              <2> 		mov cl, [charxy]
  1989                              <2> 		dec ch
  1990                              <2> 		cmp ch, 0
  1991                              <2> 		jne clearc
  1992                              <2> 		call termcopy
  1993                              <2> 		ret
  1994                              <2> %endif
  1995                              <2> 		
  1996                              <1> intx4:
  1997                              <1> 	%include 'source/interrupts/4_prntreadstr.asm'
  1998 00000FBC E809000000          <2> call rdprint
  1999 00000FC1 E9EBF2FFFF          <2> jmp timerinterrupt
  2000                              <2> 
  2001                              <2> readline:
  2002 00000FC6 B00A                <2>   mov al, 10
  2003 00000FC8 B307                <2>   mov bl, 7
  2004                              <2> 	rdprint:	;;print and get line, al=last key, bl=modifier, esi=buffer, edi=bufferend
  2005 00000FCA 8935[B0130000]      <2> 		mov [buftxtloc], esi
  2006 00000FD0 A2[A8130000]        <2> 		mov [endkeyrdpr], al
  2007 00000FD5 881D[A9130000]      <2> 		mov [modkeyrdpr], bl
  2008 00000FDB 8935[AA130000]      <2> 		mov [firstesirdpr], esi
  2009 00000FE1 893D[B4130000]      <2> 		mov [endbufferrdpr], edi
  2010 00000FE7 8B3D[5B6E0000]      <2> 		mov edi, [commandsentered]
  2011 00000FED 893D[576E0000]      <2> 		mov [commandlistentries], edi
  2012                              <2> 	rdprintb:
  2013 00000FF3 56                  <2> 		push esi
  2014 00000FF4 B001                <2> 		mov al, 1
  2015 00000FF6 E8CC030000          <2> 		call rdcharint
  2016 00000FFB 5E                  <2> 		pop esi
  2017                              <2> %ifdef io.serial
  2018 00000FFC 80FC41              <2> 		cmp ah, 0x41
  2019 00000FFF 0F8437020000        <2> 		je near rdprup
  2020 00001005 80FC42              <2> 		cmp ah, 0x42
  2021 00001008 0F84EB010000        <2> 		je near rdprdown
  2022 0000100E 80FC43              <2> 		cmp ah, 0x43
  2023 00001011 0F8497010000        <2> 		je near rdprright
  2024 00001017 80FC44              <2> 		cmp ah, 0x44
  2025 0000101A 0F844C010000        <2> 		je near rdprleft
  2026 00001020 80FC31              <2> 		cmp ah, 0x31
  2027 00001023 0F8401010000        <2> 		je near rdprhome
  2028 00001029 80FC48              <2> 		cmp ah, 0x48
  2029 0000102C 0F84F8000000        <2> 		je near rdprhome
  2030 00001032 80FC46              <2> 		cmp ah, 0x46
  2031 00001035 0F8411010000        <2> 		je near rdprend
  2032 0000103B 80FC33              <2> 		cmp ah, 0x33
  2033 0000103E 0F8429030000        <2> 		je near rdprdel
  2034 00001044 80FC34              <2> 		cmp ah, 0x34
  2035 00001047 0F84FF000000        <2> 		je near rdprend
  2036                              <2> %else
  2037                              <2> 		cmp byte [specialkey], 0xE0
  2038                              <2> 		jne notspecialrdprnt
  2039                              <2> 		cmp ah, 0x53
  2040                              <2> 		je near rdprdel
  2041                              <2> 		cmp ah, 0x47
  2042                              <2> 		je near rdprhome
  2043                              <2> 		cmp ah, 0x4F
  2044                              <2> 		je near rdprend
  2045                              <2> 	notspecialrdprnt:
  2046                              <2> 		cmp ah, 0x50
  2047                              <2> 		je near rdprdown
  2048                              <2> 		cmp ah, 0x4D
  2049                              <2> 		je near rdprright
  2050                              <2> 		cmp ah, 0x4B
  2051                              <2> 		je near rdprleft
  2052                              <2> 		cmp ah, 0x48
  2053                              <2> 		je near rdprup
  2054                              <2> %endif
  2055 0000104D 3C08                <2> 		cmp al, 8
  2056 0000104F 0F8433030000        <2> 		je near rdprbscheck
  2057 00001055 3C00                <2> 		cmp al, 0
  2058 00001057 749A                <2> 		je rdprintb
  2059 00001059 80FC00              <2> 		cmp ah, 0
  2060 0000105C 7495                <2> 		je rdprintb
  2061 0000105E 8806                <2> 		mov [esi], al
  2062 00001060 46                  <2> 		inc esi
  2063                              <2> 	bscheckequal:
  2064 00001061 8A1D[A9130000]      <2> 		mov bl, [modkeyrdpr]
  2065 00001067 8A3D[AF130000]      <2> 		mov bh, [txtmask]
  2066 0000106D 80FF00              <2> 		cmp bh, 0
  2067 00001070 7404                <2> 		je nomasktxt
  2068 00001072 88F8                <2> 		mov al, bh
  2069 00001074 30FF                <2> 		xor bh, bh
  2070                              <2> 	nomasktxt:
  2071 00001076 E8A0030000          <2> 		call prcharint
  2072 0000107B 56                  <2> 		push esi
  2073 0000107C 66A3[A6130000]      <2> 		mov [axcache], ax
  2074 00001082 8A25[A8130000]      <2> 		mov ah, [endkeyrdpr]
  2075 00001088 38E0                <2> 		cmp al, ah
  2076 0000108A 7429                <2> 		je nobackprintbuftxt2
  2077 0000108C BE[3A660000]        <2> 		mov esi, buftxt2
  2078 00001091 E8AAFEFFFF          <2> 		call printquiet
  2079 00001096 B020                <2> 		mov al, " "
  2080 00001098 E87E030000          <2> 		call prcharq
  2081 0000109D B008                <2> 		mov al, 8
  2082 0000109F 81FE[3A660000]      <2> 		cmp esi, buftxt2
  2083 000010A5 740E                <2> 		je nobackprintbuftxt2
  2084                              <2> 	backprintbuftxt2:
  2085 000010A7 E86F030000          <2> 		call prcharq
  2086 000010AC 4E                  <2> 		dec esi
  2087 000010AD 81FE[3A660000]      <2> 		cmp esi, buftxt2
  2088 000010B3 77F2                <2> 		ja backprintbuftxt2
  2089                              <2> 	nobackprintbuftxt2:
  2090 000010B5 3C0A                <2> 		cmp al, 10
  2091 000010B7 7405                <2> 		je nonobackprint
  2092 000010B9 E85D030000          <2> 		call prcharint
  2093                              <2> 	nonobackprint:
  2094 000010BE 5E                  <2> 		pop esi
  2095 000010BF 3B35[B4130000]      <2> 		cmp esi, [endbufferrdpr]
  2096 000010C5 0F8319000000        <2> 		jae near donerdprinc
  2097 000010CB 66A1[A6130000]      <2> 		mov ax, [axcache]
  2098 000010D1 8A25[A8130000]      <2> 		mov ah, [endkeyrdpr]
  2099 000010D7 38E0                <2> 		cmp al, ah
  2100 000010D9 0F8514FFFFFF        <2> 		jne rdprintb
  2101 000010DF E901000000          <2> 		jmp donerdprint
  2102                              <2> 	donerdprinc:
  2103 000010E4 46                  <2> 		inc esi
  2104                              <2> 	donerdprint:
  2105 000010E5 4E                  <2> 		dec esi
  2106 000010E6 BF[3A660000]        <2> 		mov edi, buftxt2
  2107                              <2> 	copylaterstuff:
  2108 000010EB 8A07                <2> 		mov al, [edi]
  2109 000010ED 3C00                <2> 		cmp al, 0
  2110 000010EF 7409                <2> 		je nocopylaterstuff
  2111 000010F1 8806                <2> 		mov [esi], al
  2112 000010F3 47                  <2> 		inc edi
  2113 000010F4 46                  <2> 		inc esi
  2114 000010F5 E9F1FFFFFF          <2> 		jmp copylaterstuff
  2115                              <2> 	nocopylaterstuff:
  2116 000010FA C60600              <2> 		mov byte [esi], 0
  2117 000010FD E80B000000          <2> 		call clearbuftxt2
  2118 00001102 89F1                <2> 		mov ecx, esi
  2119 00001104 8B3D[AA130000]      <2> 		mov edi, [firstesirdpr]
  2120 0000110A 29F9                <2> 		sub ecx, edi
  2121 0000110C C3                  <2> 		ret
  2122                              <2> 	
  2123                              <2> 	clearbuftxt2:
  2124 0000110D 30C0                <2> 		xor al, al
  2125 0000110F BF[3A660000]        <2> 		mov edi, buftxt2
  2126                              <2> 	clearbuftxt2lp:
  2127 00001114 8807                <2> 		mov [edi], al
  2128 00001116 47                  <2> 		inc edi
  2129 00001117 81FF[3A6A0000]      <2> 		cmp edi, buftxt
  2130 0000111D 75F5                <2> 		jne clearbuftxt2lp
  2131 0000111F C3                  <2> 		ret
  2132                              <2> 	
  2133                              <2> 	rdprintb2:
  2134 00001120 E895030000          <2> 		call termcopy
  2135 00001125 E9C9FEFFFF          <2> 		jmp rdprintb
  2136                              <2> 	
  2137                              <2> 	rdprhome:
  2138 0000112A 3B35[B0130000]      <2> 		cmp esi, [buftxtloc]
  2139 00001130 0F84EAFFFFFF        <2> 		je near rdprintb2
  2140 00001136 BF[3A660000]        <2> 		mov edi, buftxt2
  2141 0000113B 8A07                <2> 		mov al, [edi]
  2142 0000113D E84C000000          <2> 		call shiftbuftxt2
  2143 00001142 E8D4020000          <2> 		call prcharq
  2144 00001147 E9DEFFFFFF          <2> 		jmp rdprhome
  2145                              <2> 		
  2146                              <2> 	rdprend:
  2147 0000114C BF[3A660000]        <2> 		mov edi, buftxt2
  2148 00001151 8A07                <2> 		mov al, [edi]
  2149 00001153 3C00                <2> 		cmp al, 0
  2150 00001155 0F84C5FFFFFF        <2> 		je near rdprintb2
  2151 0000115B 8806                <2> 		mov [esi], al
  2152 0000115D E86C000000          <2> 		call shiftbuftxt2lft
  2153 00001162 E8B4020000          <2> 		call prcharq
  2154 00001167 E9E0FFFFFF          <2> 		jmp rdprend
  2155                              <2> 	
  2156                              <2> 	rdprleft:
  2157 0000116C 3B35[B0130000]      <2> 		cmp esi, [buftxtloc]
  2158 00001172 0F847BFEFFFF        <2> 		je near rdprintb
  2159 00001178 BF[3A660000]        <2> 		mov edi, buftxt2
  2160 0000117D 8A07                <2> 		mov al, [edi]
  2161 0000117F E80A000000          <2> 		call shiftbuftxt2
  2162 00001184 E892020000          <2> 		call prcharint
  2163 00001189 E965FEFFFF          <2> 		jmp rdprintb
  2164                              <2> 	shiftbuftxt2:
  2165 0000118E 3C00                <2> 		cmp al, 0
  2166 00001190 740C                <2> 		je noshiftbuftxt2
  2167 00001192 47                  <2> 		inc edi
  2168 00001193 8A27                <2> 		mov ah, [edi]
  2169 00001195 8807                <2> 		mov [edi], al
  2170 00001197 88E0                <2> 		mov al, ah
  2171 00001199 E9F0FFFFFF          <2> 		jmp shiftbuftxt2
  2172                              <2> 	noshiftbuftxt2:
  2173 0000119E BF[3A660000]        <2> 		mov edi, buftxt2
  2174 000011A3 4E                  <2> 		dec esi
  2175 000011A4 8A06                <2> 		mov al, [esi]
  2176 000011A6 8807                <2> 		mov [edi], al
  2177 000011A8 C60600              <2> 		mov byte [esi], 0
  2178 000011AB B008                <2> 		mov al, 8
  2179 000011AD C3                  <2> 		ret
  2180                              <2> 		
  2181                              <2> 	rdprright:
  2182 000011AE BF[3A660000]        <2> 		mov edi, buftxt2
  2183 000011B3 8A07                <2> 		mov al, [edi]
  2184 000011B5 3C00                <2> 		cmp al, 0
  2185 000011B7 0F8436FEFFFF        <2> 		je near rdprintb
  2186 000011BD 8806                <2> 		mov [esi], al
  2187 000011BF E80A000000          <2> 		call shiftbuftxt2lft
  2188 000011C4 E852020000          <2> 		call prcharint
  2189 000011C9 E925FEFFFF          <2> 		jmp rdprintb
  2190                              <2> 	shiftbuftxt2lft:
  2191 000011CE 3C00                <2> 		cmp al, 0
  2192 000011D0 740B                <2> 		je noshiftbuftxt2lft
  2193 000011D2 47                  <2> 		inc edi
  2194 000011D3 8A07                <2> 		mov al, [edi]
  2195 000011D5 8847FF              <2> 		mov [edi - 1], al
  2196 000011D8 E9F1FFFFFF          <2> 		jmp shiftbuftxt2lft
  2197                              <2> 	noshiftbuftxt2lft:
  2198 000011DD 8A06                <2> 		mov al, [esi]
  2199 000011DF 46                  <2> 		inc esi
  2200 000011E0 8A1D[A9130000]      <2> 		mov bl, [modkeyrdpr]
  2201 000011E6 C3                  <2> 		ret
  2202                              <2> 		
  2203                              <2> 	rdprdownbck:
  2204 000011E7 FECC                <2> 		dec ah
  2205 000011E9 8825[AE130000]      <2> 		mov [commandedit], ah
  2206 000011EF E890000000          <2> 		call rdprbckspc
  2207 000011F4 E9FAFDFFFF          <2> 		jmp rdprintb
  2208                              <2> 	
  2209                              <2> 	rdprdown:
  2210 000011F9 8A25[AE130000]      <2> 		mov ah, [commandedit]
  2211 000011FF 80FC01              <2> 		cmp ah, 1
  2212 00001202 0F86EBFDFFFF        <2> 		jbe near rdprintb
  2213 00001208 8B3D[5B6E0000]      <2> 		mov edi, [commandsentered]
  2214 0000120E 3B3D[576E0000]      <2> 		cmp edi, [commandlistentries]
  2215 00001214 7618                <2> 		jbe .nofix
  2216 00001216 8105[576E0000]0200- <2> 		add dword [commandlistentries], 2
  2217 0000121E 0000                <2>
  2218 00001220 3B3D[576E0000]      <2> 		cmp edi, [commandlistentries]
  2219 00001226 7706                <2> 		ja .nofix
  2220 00001228 893D[576E0000]      <2> 		mov [commandlistentries], edi
  2221                              <2> 	.nofix
  2222 0000122E 80FC02              <2> 		cmp ah, 2
  2223 00001231 74B4                <2> 		je rdprdownbck
  2224 00001233 80EC02              <2> 		sub ah, 2
  2225 00001236 8825[AE130000]      <2> 		mov [commandedit], ah
  2226                              <2> 		
  2227                              <2> 	rdprup:
  2228 0000123C 3805[AE130000]      <2> 		cmp [commandedit], al
  2229 00001242 0F84ABFDFFFF        <2> 		je near rdprintb
  2230 00001248 813D[576E0000]0000- <2> 		cmp dword [commandlistentries], 0
  2231 00001250 0000                <2>
  2232 00001252 0F849BFDFFFF        <2> 		je near rdprintb
  2233 00001258 FF0D[576E0000]      <2> 		dec dword [commandlistentries]
  2234                              <2> 	.lp:
  2235 0000125E BF[3A660000]        <2> 		mov edi, buftxt2
  2236 00001263 8A07                <2> 		mov al, [edi]
  2237 00001265 3C00                <2> 		cmp al, 0
  2238 00001267 7411                <2> 		je .start
  2239 00001269 8806                <2> 		mov [esi], al
  2240 0000126B E85EFFFFFF          <2> 		call shiftbuftxt2lft
  2241 00001270 E8A6010000          <2> 		call prcharq
  2242 00001275 E9E4FFFFFF          <2> 		jmp .lp
  2243                              <2> 	.start:
  2244 0000127A E805000000          <2> 		call rdprbckspc
  2245 0000127F E944000000          <2> 		jmp getcurrentcommandstr
  2246                              <2> 	rdprbckspc:
  2247 00001284 3B35[B0130000]      <2> 		cmp esi, [buftxtloc]
  2248 0000128A 742E                <2> 		je nordprupbck
  2249                              <2> 	rdprupbckspclp:
  2250 0000128C B008                <2> 		mov al, 8
  2251 0000128E 8A1D[A9130000]      <2> 		mov bl, [modkeyrdpr]
  2252 00001294 E882010000          <2> 		call prcharq
  2253 00001299 B020                <2> 		mov al, ' '
  2254 0000129B E87B010000          <2> 		call prcharq
  2255 000012A0 B008                <2> 		mov al, 8
  2256 000012A2 E874010000          <2> 		call prcharq
  2257 000012A7 4E                  <2> 		dec esi
  2258 000012A8 3B35[B0130000]      <2> 		cmp esi, [buftxtloc]
  2259 000012AE 7405                <2> 		je nordprupbck2
  2260 000012B0 E9D7FFFFFF          <2> 		jmp rdprupbckspclp
  2261                              <2> 	nordprupbck2:
  2262 000012B5 E800020000          <2> 		call termcopy
  2263                              <2> 	nordprupbck:
  2264 000012BA 8B3D[536E0000]      <2> 		mov edi, [commandbufpos]
  2265 000012C0 81C7[5F6E0000]      <2> 		add edi, commandbuf
  2266 000012C6 4F                  <2> 		dec edi
  2267 000012C7 C3                  <2> 		ret
  2268                              <2> 	getcurrentcommandstr:
  2269 000012C8 8A25[AE130000]      <2> 		mov ah, [commandedit]
  2270 000012CE FE05[AE130000]      <2> 		inc byte [commandedit]
  2271                              <2> 	getccmdlp:
  2272 000012D4 4F                  <2> 		dec edi
  2273 000012D5 8A07                <2> 		mov al, [edi]
  2274 000012D7 81FF[5F6E0000]      <2> 		cmp edi, commandbuf
  2275 000012DD 7231                <2> 		jb getcmdresetcommandbuf
  2276 000012DF 81EF[5F6E0000]      <2> 		sub edi, commandbuf
  2277 000012E5 3B3D[536E0000]      <2> 		cmp edi, [commandbufpos]
  2278 000012EB 0F8402FDFFFF        <2> 		je near rdprintb
  2279 000012F1 81C7[5F6E0000]      <2> 		add edi, commandbuf
  2280 000012F7 3C00                <2> 		cmp al, 0
  2281 000012F9 75D9                <2> 		jne getccmdlp
  2282 000012FB FECC                <2> 		dec ah
  2283 000012FD 80FC00              <2> 		cmp ah, 0
  2284 00001300 77D2                <2> 		ja getccmdlp
  2285 00001302 47                  <2> 		inc edi
  2286 00001303 81FF[5F7E0000]      <2> 		cmp edi, commandbufend
  2287 00001309 7710                <2> 		ja fixcmdbufb4morerdpr
  2288 0000130B E918000000          <2> 		jmp morerdprup
  2289                              <2> 	getcmdresetcommandbuf:
  2290 00001310 BF[5F7E0000]        <2> 		mov edi, commandbufend
  2291 00001315 47                  <2> 		inc edi
  2292 00001316 E9B9FFFFFF          <2> 		jmp getccmdlp
  2293                              <2> 	fixcmdbufb4morerdpr:
  2294 0000131B 4F                  <2> 		dec edi
  2295 0000131C 81EF[5F7E0000]      <2> 		sub edi, commandbufend
  2296 00001322 81C7[5F6E0000]      <2> 		add edi, commandbuf
  2297                              <2> 	morerdprup:
  2298 00001328 8A07                <2> 		mov al, [edi]
  2299 0000132A 47                  <2> 		inc edi
  2300 0000132B 81EF[5F6E0000]      <2> 		sub edi, commandbuf
  2301 00001331 3C00                <2> 		cmp al, 0
  2302 00001333 0F84E7FDFFFF        <2> 		je near rdprintb2
  2303 00001339 3B3D[536E0000]      <2> 		cmp edi, [commandbufpos]
  2304 0000133F 0F83DBFDFFFF        <2> 		jae near rdprintb2
  2305 00001345 81C7[5F6E0000]      <2> 		add edi, commandbuf
  2306 0000134B 8806                <2> 		mov [esi], al
  2307 0000134D 46                  <2> 		inc esi
  2308 0000134E 57                  <2> 		push edi
  2309 0000134F 8A1D[A9130000]      <2> 		mov bl, [modkeyrdpr]
  2310 00001355 E8C1000000          <2> 		call prcharq
  2311 0000135A 5F                  <2> 		pop edi
  2312 0000135B 81FF[5F7E0000]      <2> 		cmp edi, commandbufend
  2313 00001361 76C5                <2> 		jbe morerdprup
  2314 00001363 BF[5F6E0000]        <2> 		mov edi, commandbuf
  2315 00001368 E9BBFFFFFF          <2> 		jmp morerdprup
  2316                              <2> 		
  2317                              <2> 	rdprdel:
  2318 0000136D BF[3A660000]        <2> 		mov edi, buftxt2
  2319 00001372 8A07                <2> 		mov al, [edi]
  2320 00001374 3C00                <2> 		cmp al, 0
  2321 00001376 0F8477FCFFFF        <2> 		je near rdprintb
  2322 0000137C 8806                <2> 		mov [esi], al
  2323 0000137E E84BFEFFFF          <2> 		call shiftbuftxt2lft
  2324 00001383 E893000000          <2> 		call prcharq
  2325                              <2> 		
  2326                              <2> 	rdprbscheck:
  2327 00001388 3B35[AA130000]      <2> 		cmp esi, [firstesirdpr]
  2328 0000138E 7705                <2> 		ja goodbscheck
  2329 00001390 E95EFCFFFF          <2> 		jmp rdprintb
  2330                              <2> 	goodbscheck:
  2331 00001395 4E                  <2> 		dec esi
  2332 00001396 C60600              <2> 		mov byte [esi], 0
  2333 00001399 8A1D[A9130000]      <2> 		mov bl, [modkeyrdpr]
  2334 0000139F B008                <2> 		mov al, 8
  2335 000013A1 E9BBFCFFFF          <2> 		jmp bscheckequal
  2336                              <2> 		
  2337 000013A6 0000                <2> axcache dw 0
  2338 000013A8 00                  <2> endkeyrdpr db 0
  2339 000013A9 00                  <2> modkeyrdpr db 0
  2340 000013AA 00000000            <2> firstesirdpr dd 0
  2341 000013AE 00                  <2> commandedit db 0
  2342 000013AF 00                  <2> txtmask db 0
  2343 000013B0 00000000            <2> buftxtloc dd 0
  2344 000013B4 00000000            <2> endbufferrdpr dd 0
  2345 000013B8 082000              <2> backcursor db 8," ",0
  2346                              <1> intx5:
  2347                              <1> 	%include 'source/interrupts/5_readchar.asm'
  2348 000013BB E807000000          <2> 	call rdcharint
  2349 000013C0 E9ECEEFFFF          <2> 	jmp timerinterrupt
  2350                              <2> getchar:
  2351 000013C5 30C0                <2> 	xor al, al
  2352                              <2> 	rdcharint:		;;get char, if al is 0, wait for key
  2353 000013C7 C605[0E140000]01    <2> 		mov byte [trans], 1
  2354 000013CE 3C00                <2> 		cmp al, 0
  2355 000013D0 7507                <2> 		jne transcheck
  2356 000013D2 C605[0E140000]00    <2> 		mov byte [trans], 0
  2357                              <2> 	transcheck:
  2358                              <2> 	%ifdef io.serial
  2359 000013D9 E833220000          <2> 		call serial.receive
  2360 000013DE 3C0D                <2> 		cmp al, 13
  2361 000013E0 741F                <2> 		je rdenter
  2362                              <2> 	%else
  2363                              <2> 		call getkey
  2364                              <2> 		mov ax, [lastkey]
  2365                              <2> 		cmp ah, 0x1C
  2366                              <2> 		je rdenter
  2367                              <2> 	%endif
  2368 000013E2 8A3D[0E140000]      <2> 		mov bh, [trans]
  2369 000013E8 803D[AD360000]E0    <2> 		cmp byte [specialkey], 0xE0
  2370 000013EF 7504                <2> 		jne nospecialtrans
  2371 000013F1 88C3                <2> 		mov bl, al
  2372 000013F3 30C0                <2> 		xor al, al
  2373                              <2> 	nospecialtrans:
  2374 000013F5 08C7                <2> 		or bh, al
  2375 000013F7 80FF00              <2> 		cmp bh, 0
  2376 000013FA 74DD                <2> 		je transcheck
  2377 000013FC E90A000000          <2> 		jmp rdend
  2378                              <2> 	rdenter:
  2379 00001401 B41C                <2> 		mov ah, 0x1C
  2380 00001403 B00A                <2> 		mov al, 10
  2381 00001405 66A3[0C140000]      <2> 		mov [lastkey], ax
  2382                              <2> 	rdend:
  2383 0000140B C3                  <2> 		ret
  2384                              <2> 		
  2385 0000140C 0000                <2> lastkey db 0,0
  2386 0000140E 00                  <2> trans db 0
  2387                              <1> intx6:
  2388                              <1> 	%include 'source/interrupts/6_prntchar.asm'
  2389                              <2> %ifdef io.serial
  2390 0000140F 38FB                <2> 	cmp bl, bh
  2391 00001411 E805000000          <2> 	call prcharint
  2392 00001416 E996EEFFFF          <2> 	jmp timerinterrupt
  2393                              <2> prcharint:	
  2394                              <2> prcharq:
  2395 0000141B E855220000          <2> 	call serial.send
  2396 00001420 C3                  <2> 	ret
  2397                              <2> %else
  2398                              <2> cmp bl, bh
  2399                              <2> je prchar.notimer
  2400                              <2> call prcharint
  2401                              <2> jmp timerinterrupt
  2402                              <2> prchar.notimer:
  2403                              <2> 	call prcharq
  2404                              <2> 	iret
  2405                              <2> 	
  2406                              <2> prcharint:	;;print char, char in al, modifier in bl, if bh = bl then termcopy will not happen, will run termcopy if called as is
  2407                              <2> 	cmp bl, bh
  2408                              <2> 	je prcharq
  2409                              <2> 	call prcharq
  2410                              <2> 	call termcopy
  2411                              <2> 	ret
  2412                              <2> termguion db 0
  2413                              <2> termcopyon db 0
  2414                              <2> prcharq:
  2415                              <2> 	mov ah, bl
  2416                              <2> 	mov [charbuf], ax
  2417                              <2> 	xor ebx, ebx
  2418                              <2> 	mov bx, [videobufpos]
  2419                              <2> 	mov edi, videobuf
  2420                              <2> 	add edi, ebx
  2421                              <2> 	mov ax, [removedvideo]
  2422                              <2> 	mov [edi], ax
  2423                              <2> 	mov ax, [charbuf]
  2424                              <2> 	xor edx, edx
  2425                              <2> 	mov dx, [charpos]
  2426                              <2> 	xor ecx, ecx
  2427                              <2> 	mov cx, [charxy]
  2428                              <2> 	cmp al, 9
  2429                              <2> 	je near prtab
  2430                              <2> 	cmp al, 13		;I am phasing this out-it is used by windows but not unix based systems
  2431                              <2> 	je near prcr
  2432                              <2> 	cmp al, 10
  2433                              <2> 	je near prnlcr
  2434                              <2> 	cmp al, 8
  2435                              <2> 	je near prbs
  2436                              <2> 	cmp al, 255		;;null character
  2437                              <2> 	je near donescr
  2438                              <2> 	mov [edi], ax
  2439                              <2> 	add edi, 2
  2440                              <2> 	inc dl
  2441                              <2> donecrnl:
  2442                              <2> 	cmp dl, cl
  2443                              <2> 	jae near preol
  2444                              <2> doneeol:
  2445                              <2> 	cmp dh, ch
  2446                              <2> 	jae near prscr	
  2447                              <2> donescr:
  2448                              <2> 	mov ebx, edi
  2449                              <2> 	mov ax, [edi]
  2450                              <2> 	mov [removedvideo], ax
  2451                              <2> 	sub ebx, videobuf
  2452                              <2> 	mov [videobufpos], bx
  2453                              <2> 	mov [charpos], dx
  2454                              <2> 	mov ax, [charbuf]
  2455                              <2> 	mov bl, ah
  2456                              <2> 	ret
  2457                              <2> 	
  2458                              <2> 	prtab:
  2459                              <2> 		xor ebx, ebx
  2460                              <2> 		mov bx, [linebeginpos]
  2461                              <2> 		sub edi, videobuf
  2462                              <2> 		sub edi, ebx
  2463                              <2> 		shr edi, 4
  2464                              <2> 		shl edi, 4
  2465                              <2> 		add edi, 16
  2466                              <2> 		shr dl, 3
  2467                              <2> 		shl dl, 3
  2468                              <2> 		add dl, 8
  2469                              <2> 		add edi, videobuf
  2470                              <2> 		add edi, ebx
  2471                              <2> 		jmp donecrnl
  2472                              <2> 	
  2473                              <2> 	prcr:
  2474                              <2> 		xor dl, dl
  2475                              <2> 		xor ebx, ebx
  2476                              <2> 		mov edi, videobuf
  2477                              <2> 		mov bx, [linebeginpos]
  2478                              <2> 		add edi, ebx
  2479                              <2> 		jmp donecrnl
  2480                              <2> 			
  2481                              <2> 	prbs:
  2482                              <2> 		cmp dl, 0
  2483                              <2> 		je prbackline
  2484                              <2> 	prnobmr:
  2485                              <2> 		dec dl
  2486                              <2> 		xor ax, ax
  2487                              <2> 		sub edi, 2
  2488                              <2> 		jmp donecrnl
  2489                              <2> 	prbackline:
  2490                              <2> 		mov dl, cl
  2491                              <2> 		cmp dh, 0
  2492                              <2> 		je prnobmr
  2493                              <2> 		dec dh
  2494                              <2> 		jmp prnobmr
  2495                              <2> 		
  2496                              <2> 	prnlcr:
  2497                              <2> 		inc dh
  2498                              <2> 		xor ebx, ebx
  2499                              <2> 		xor dl, dl
  2500                              <2> 		mov bl, cl
  2501                              <2> 		shl bx, 1
  2502                              <2> 		mov edi, videobuf
  2503                              <2> 		add bx, [linebeginpos]
  2504                              <2> 		mov [linebeginpos], bx
  2505                              <2> 		add edi, ebx
  2506                              <2> 		jmp donecrnl
  2507                              <2> 		
  2508                              <2> 	preol:
  2509                              <2> 		xor dl, dl
  2510                              <2> 		inc dh
  2511                              <2> 		xor ebx, ebx
  2512                              <2> 		mov bl, cl
  2513                              <2> 		shl bx, 1
  2514                              <2> 		add bx, [linebeginpos]
  2515                              <2> 		mov [linebeginpos], bx
  2516                              <2> 		jmp doneeol
  2517                              <2> 	prscr:
  2518                              <2> 		dec dh
  2519                              <2> 		mov edi, videobuf
  2520                              <2> 		xor ebx, ebx
  2521                              <2> 		mov bl, cl
  2522                              <2> 		shl bx, 1
  2523                              <2> 		add ebx, edi
  2524                              <2> 	intscrollloop:
  2525                              <2> 		mov ax, [ebx]
  2526                              <2> 		mov [edi], ax
  2527                              <2> 		add edi, 2
  2528                              <2> 		add ebx, 2
  2529                              <2> 		dec cl
  2530                              <2> 		cmp cl, 0
  2531                              <2> 		jne intscrollloop
  2532                              <2> 		mov cl, [charxy]
  2533                              <2> 		dec ch
  2534                              <2> 		cmp ch, 1
  2535                              <2> 		ja intscrollloop
  2536                              <2> 		xor ax, ax
  2537                              <2> 		sub edi, videobuf
  2538                              <2> 		mov [linebeginpos], di
  2539                              <2> 		add edi, videobuf
  2540                              <2> 		mov ebx, edi
  2541                              <2> 	intloopclear:
  2542                              <2> 		mov [ebx], ax
  2543                              <2> 		add ebx, 2
  2544                              <2> 		dec cl
  2545                              <2> 		cmp cl, 0
  2546                              <2> 		jne intloopclear
  2547                              <2> 		dec ch
  2548                              <2> 		cmp ch, 0
  2549                              <2> 		jne intloopclear
  2550                              <2> 		mov cx, [charxy]
  2551                              <2> 		jmp donescr
  2552                              <2> 		
  2553                              <2> linebeginpos dw 0
  2554                              <2> videobufpos: dw 0
  2555                              <2> charpos db 0,0
  2556                              <2> charxy db 80,30
  2557                              <2> charbuf dw 0
  2558                              <2> %endif
  2559                              <1> intx7:
  2560                              <1> 	%include 'source/interrupts/7_openfile.asm'
  2561 00001421 E849260000          <2> 	call loadfile
  2562 00001426 E986EEFFFF          <2> 	jmp timerinterrupt
  2563                              <1> intx9:
  2564                              <1> 	%include 'source/interrupts/9_num2str.asm'
  2565 0000142B 3C00                <2> 	cmp al, 0
  2566 0000142D 750A                <2> 	jne num2strb
  2567 0000142F E873090000          <2> 	call showdec
  2568 00001434 E978EEFFFF          <2> 	jmp timerinterrupt
  2569                              <2> num2strb:
  2570 00001439 E89F080000          <2> 	call showhex
  2571 0000143E E96EEEFFFF          <2> 	jmp timerinterrupt
  2572                              <1> intx10:
  2573                              <1> 	%include 'source/interrupts/10_str2num.asm'
  2574 00001443 E8440A0000          <2> 	call cnvrttxt	;the string goes into esi, number into ecx
  2575 00001448 E964EEFFFF          <2> 	jmp timerinterrupt
  2576                              <2> 	
  2577                              <1> %ifdef threads.included
  2578                              <1> intx11:
  2579                              <1> 	%include 'source/interrupts/11_forkthread.asm'
  2580                              <1> %endif
  2581                              <1> intx12:
  2582                              <1> 	%include 'source/interrupts/12_gettime.asm'
  2583 0000144D A1[69020000]        <2> 	mov eax, [timeseconds]
  2584 00001452 8B1D[6D020000]      <2> 	mov ebx, [timenanoseconds]
  2585 00001458 89D9                <2> 	mov ecx, ebx
  2586 0000145A C1E90A              <2> 	shr ecx, 10	;this is in microseconds
  2587 0000145D E94FEEFFFF          <2> 	jmp timerinterrupt
  2588                              <1> intx13:
  2589                              <1> 	%include 'source/interrupts/13_settime.asm'
  2590 00001462 A3[69020000]        <2> 	mov [timeseconds], eax
  2591 00001467 891D[6D020000]      <2> 	mov [timenanoseconds], ebx
  2592 0000146D E93FEEFFFF          <2> 	jmp timerinterrupt
  2593                              <2> 	
  2594                              <1> intx14:
  2595                              <1> 	%include 'source/interrupts/14_runcmd.asm'
  2596 00001472 BF[3A6A0000]        <2> 	mov edi, buftxt
  2597                              <2> cpcmd:
  2598 00001477 8A06                <2> 	mov al, [esi]
  2599 00001479 8807                <2> 	mov [edi], al
  2600 0000147B 46                  <2> 	inc esi
  2601 0000147C 47                  <2> 	inc edi
  2602 0000147D 3C00                <2> 	cmp al, 0
  2603 0000147F 75F6                <2> 	jne cpcmd
  2604 00001481 E82D050000          <2> 	call run
  2605 00001486 CF                  <2> 	iret
  2606                              <1> intx15:
  2607                              <1> 	%include 'source/interrupts/15_proginfo.asm'
  2608 00001487 BB[3A560000]        <2> 	mov ebx, variables
  2609 0000148C 8B35[8F1A0000]      <2> 	mov esi, [currentcommandloc]
  2610 00001492 89F7                <2> 	mov edi, esi
  2611 00001494 31C9                <2> 	xor ecx, ecx
  2612                              <2> getcommandzeroes:
  2613 00001496 8A07                <2> 	mov al, [edi]
  2614 00001498 47                  <2> 	inc edi
  2615 00001499 3C3B                <2> 	cmp al, ';'
  2616 0000149B 740E                <2> 	je nomorezeroes
  2617 0000149D 3C00                <2> 	cmp al, 0
  2618 0000149F 740A                <2> 	je nomorezeroes
  2619 000014A1 3C20                <2> 	cmp al, ' '
  2620 000014A3 75F1                <2> 	jne getcommandzeroes
  2621 000014A5 41                  <2> 	inc ecx
  2622 000014A6 E9EBFFFFFF          <2> 	jmp getcommandzeroes
  2623                              <2> nomorezeroes:
  2624 000014AB 41                  <2> 	inc ecx
  2625 000014AC 4F                  <2> 	dec edi
  2626 000014AD 8B1D[C6550000]      <2> 	mov ebx, [uid]
  2627 000014B3 8B15[523B0000]      <2> 	mov edx, [currentthread]
  2628 000014B9 CF                  <2> 	iret
  2629                              <2> 	
  2630                              <1> termcopy:
  2631                              <1> %ifdef io.serial
  2632 000014BA C3                  <1> 	ret
  2633                              <1> %else
  2634                              <1> %ifdef terminal.vsync
  2635                              <1> 	mov byte [termcopyneeded], 1
  2636                              <1> 	ret
  2637                              <1> %else
  2638                              <1> 	call newtermcopy
  2639                              <1> 	ret
  2640                              <1> %endif
  2641                              <1> 	termcopyneeded db 0
  2642                              <1> 	termcursorpos dd 0
  2643                              <1> 	removedvideo dw 0
  2644                              <1> newtermcopy:
  2645                              <1> 	pusha
  2646                              <1> 	mov edi, videobuf
  2647                              <1> 	xor ebx, ebx
  2648                              <1> 	mov [termcopyneeded], bl
  2649                              <1> 	mov bx, [videobufpos]
  2650                              <1> 	add edi, ebx
  2651                              <1> 	mov [termcursorpos], edi
  2652                              <1> 	call switchtermcursor
  2653                              <1> 	cmp byte [guion], 0
  2654                              <1> 	je near nowincopy
  2655                              <1> %ifdef gui.included
  2656                              <1> 	mov byte [mouseselecton], 0
  2657                              <1> 	mov byte [termcopyon], 1
  2658                              <1> 	cmp byte [termguion], 1
  2659                              <1> 	je near windowvideocopy
  2660                              <1> %endif
  2661                              <1> 	jmp nocopytermatall
  2662                              <1> nowincopy:
  2663                              <1> 	mov esi, 0xA0000
  2664                              <1> 	mov eax, [basecache]
  2665                              <1> 	shl eax, 4
  2666                              <1> 	sub esi, eax
  2667                              <1> 	mov edi, videobuf
  2668                              <1> 	xor ecx, ecx
  2669                              <1> 	mov cx, [charxy]
  2670                              <1> nowincopy2:
  2671                              <1> 	mov ax, [edi]
  2672                              <1> 	add edi, (videobuf2 - videobuf)
  2673                              <1> 	mov bx, [edi]
  2674                              <1> 	mov [edi], ax
  2675                              <1> 	sub edi, (videobuf2 - videobuf)
  2676                              <1> 	inc edi
  2677                              <1> 	cmp ax, bx
  2678                              <1> 	je nopresentwinfont
  2679                              <1> 	dec edi
  2680                              <1> 	mov ebx, fonts
  2681                              <1> 	xor eax, eax
  2682                              <1> 	mov al, [edi]
  2683                              <1> 	shl eax, 4
  2684                              <1> 	add ebx, eax
  2685                              <1> 	inc edi
  2686                              <1> 	mov ah, [edi]
  2687                              <1> 	xor edx, edx
  2688                              <1> 	mov dl, [charxy]
  2689                              <1> 	rol ecx, 16
  2690                              <1> 	mov cl, 16
  2691                              <1> nowinfont:
  2692                              <1> 	mov al, [ebx]
  2693                              <1> 	ror al, 1
  2694                              <1> 	cmp ah, 7
  2695                              <1> 	jbe notnotfont
  2696                              <1> 	not al
  2697                              <1> notnotfont:
  2698                              <1> 	mov [esi], al
  2699                              <1> 	add esi, edx
  2700                              <1> 	inc ebx
  2701                              <1> 	dec cl
  2702                              <1> 	cmp cl, 0
  2703                              <1> 	jne nowinfont
  2704                              <1> 	shl edx, 4
  2705                              <1> 	sub esi, edx
  2706                              <1> 	rol ecx, 16
  2707                              <1> nopresentwinfont:
  2708                              <1> 	inc edi
  2709                              <1> 	inc esi
  2710                              <1> 	dec cl
  2711                              <1> 	cmp cl, 0
  2712                              <1> 	jne nowincopy2
  2713                              <1> 	mov cl, [charxy]
  2714                              <1> 	xor edx, edx
  2715                              <1> 	mov dl, cl
  2716                              <1> 	sub esi, edx
  2717                              <1> 	shl edx, 4
  2718                              <1> 	add esi, edx
  2719                              <1> 	dec ch
  2720                              <1> 	cmp ch, 0
  2721                              <1> 	jne nowincopy2
  2722                              <1> nocopytermatall:
  2723                              <1> 	call switchtermcursor
  2724                              <1> 	popa
  2725                              <1> 	ret
  2726                              <1> 	
  2727                              <1> switchtermcursor:
  2728                              <1> 	mov edi, [termcursorpos]
  2729                              <1> 	mov al, [edi + 1]
  2730                              <1> 	mov ah, [edi]
  2731                              <1> 	cmp al, 7
  2732                              <1> 	jbe movlargecursorterm
  2733                              <1> 	mov al, 7
  2734                              <1> 	jmp movedcursorterm
  2735                              <1> movlargecursorterm:
  2736                              <1> 	mov al, 0xF0
  2737                              <1> movedcursorterm:
  2738                              <1> 	mov [edi + 1], al
  2739                              <1> 	cmp ah, 0
  2740                              <1> 	jne fixednocursorterm
  2741                              <1> 	mov ah, " "
  2742                              <1> 	mov [edi], ah
  2743                              <1> fixednocursorterm:
  2744                              <1> 	ret
  2745                              <1> %endif
  2746                                      %include "source/dosints.asm"
  2747                              <1> int20h:
  2748 000014BB 66B8004C            <1> mov ax, 0x4C00
  2749                              <1> int21h:
  2750                              <1> dostosolleros:
  2751 000014BF 6650                <1> 	push ax
  2752 000014C1 66B83000            <1> 	mov ax, NEW_DATA_SEL
  2753 000014C5 8ED8                <1> 	mov ds, ax
  2754 000014C7 8EC0                <1> 	mov es, ax
  2755 000014C9 8EE0                <1> 	mov fs, ax
  2756 000014CB 66B82000            <1> 	mov ax, SYS_DATA_SEL
  2757 000014CF 8EE8                <1> 	mov gs, ax
  2758 000014D1 6658                <1> 	pop ax
  2759 000014D3 9C                  <1> 	pushf
  2760 000014D4 60                  <1> 	pusha
  2761 000014D5 80FC01              <1> 	cmp ah, 1
  2762 000014D8 0F8449000000        <1> 	je near dosgchar
  2763 000014DE 80FC02              <1> 	cmp ah, 2
  2764 000014E1 0F844A000000        <1> 	je near doswchar
  2765 000014E7 80FC09              <1> 	cmp ah, 9
  2766 000014EA 0F844F000000        <1> 	je near dosprintstr
  2767 000014F0 80FC0A              <1> 	cmp ah, 0xA
  2768 000014F3 0F845F000000        <1> 	je near dosgetstr
  2769 000014F9 80FC2B              <1> 	cmp ah, 0x2B
  2770 000014FC 0F849E000000        <1> 	je near dosgetdate
  2771 00001502 80FC2C              <1> 	cmp ah, 0x2C
  2772 00001505 0F84B8000000        <1> 	je near dosgettime
  2773 0000150B 80FC4C              <1> 	cmp ah, 0x4C
  2774 0000150E 0F84CD000000        <1> 	je near dosexit
  2775                              <1> backtodos:
  2776 00001514 61                  <1> 	popa
  2777 00001515 9D                  <1> 	popf
  2778 00001516 6650                <1> 	push ax
  2779 00001518 66B85000            <1> 	mov ax, DOS_DATA_SEL
  2780 0000151C 8ED8                <1> 	mov ds, ax
  2781 0000151E 8EC0                <1> 	mov es, ax
  2782 00001520 8EE0                <1> 	mov fs, ax
  2783 00001522 8EE8                <1> 	mov gs, ax
  2784 00001524 6658                <1> 	pop ax
  2785 00001526 CF                  <1> 	iret
  2786                              <1> 
  2787                              <1> dosgchar:
  2788 00001527 E899FEFFFF          <1> 	call getchar
  2789 0000152C E9E3FFFFFF          <1> 	jmp backtodos
  2790                              <1> 	
  2791                              <1> doswchar:
  2792 00001531 88D0                <1> 	mov al, dl
  2793 00001533 B307                <1> 	mov bl, 7
  2794 00001535 E8E1FEFFFF          <1> 	call prcharint
  2795 0000153A E9D5FFFFFF          <1> 	jmp backtodos
  2796                              <1> 	
  2797                              <1> dosprintstr:
  2798 0000153F 31F6                <1> 	xor esi, esi
  2799 00001541 6689D6              <1> 	mov si, dx
  2800 00001544 81C600004000        <1> 	add esi, dosprogloc
  2801 0000154A B024                <1> 	mov al, "$"
  2802 0000154C B307                <1> 	mov bl, 7
  2803 0000154E E806FAFFFF          <1> 	call printint
  2804 00001553 E9BCFFFFFF          <1> 	jmp backtodos
  2805                              <1> 	
  2806                              <1> dosgetstr:
  2807 00001558 31F6                <1> 	xor esi, esi
  2808 0000155A 6689D6              <1> 	mov si, dx
  2809 0000155D 81C600004000        <1> 	add esi, dosprogloc
  2810 00001563 B900000000          <1> 	mov ecx, 0
  2811 00001568 8A0E                <1> 	mov cl, [esi]
  2812 0000156A 81C603000000        <1> 	add esi, 3
  2813 00001570 89F7                <1> 	mov edi, esi
  2814 00001572 8935[9C150000]      <1> 	mov [stringstart], esi
  2815 00001578 01CF                <1> 	add edi, ecx
  2816 0000157A B00A                <1> 	mov al, 10
  2817 0000157C B307                <1> 	mov bl, 7
  2818 0000157E E847FAFFFF          <1> 	call rdprint
  2819 00001583 89F1                <1> 	mov ecx, esi
  2820 00001585 2B0D[9C150000]      <1> 	sub ecx, [stringstart]
  2821 0000158B 8B35[9C150000]      <1> 	mov esi, [stringstart]
  2822 00001591 884EFF              <1> 	mov [esi - 1], cl
  2823 00001594 884EFE              <1> 	mov [esi - 2], cl
  2824 00001597 E978FFFFFF          <1> 	jmp backtodos
  2825 0000159C 00000000            <1> stringstart dd 0
  2826                              <1> 
  2827                              <1> dosgetdate:
  2828 000015A0 E8411C0000          <1> 	call time
  2829 000015A5 8A0D[AE330000]      <1> 	mov cl, [RTCtimeYear]
  2830 000015AB B500                <1> 	mov ch, 0
  2831 000015AD 6681C1D007          <1> 	add cx, 2000
  2832 000015B2 8A35[AD330000]      <1> 	mov dh, [RTCtimeMonth]
  2833 000015B8 8A15[AC330000]      <1> 	mov dl, [RTCtimeDay]
  2834 000015BE E951FFFFFF          <1> 	jmp backtodos
  2835                              <1> 
  2836                              <1> dosgettime:
  2837 000015C3 E81E1C0000          <1> 	call time
  2838 000015C8 8A2D[AB330000]      <1> 	mov ch, [RTCtimeHour]
  2839 000015CE 8A0D[AA330000]      <1> 	mov cl, [RTCtimeMinute]
  2840 000015D4 8A35[A9330000]      <1> 	mov dh, [RTCtimeSecond]
  2841 000015DA B200                <1> 	mov dl, 0
  2842 000015DC E933FFFFFF          <1> 	jmp backtodos
  2843                              <1> 	
  2844                              <1> dosexit:
  2845 000015E1 61                  <1> 	popa
  2846 000015E2 8B25[BA530000]      <1> 	mov esp, [previousstack]
  2847 000015E8 31DB                <1> 	xor ebx, ebx
  2848 000015EA 88C3                <1> 	mov bl, al
  2849 000015EC 80FB00              <1> 	cmp bl, 0
  2850 000015EF 0F85EBF8FFFF        <1> 	jne near exitprog.error
  2851 000015F5 C3                  <1> 	ret
  2852                                      %include "source/solleros.asm"
  2853                              <1> 	;SOLLEROS.ASM
  2854                              <1> os:
  2855                              <1> setdefenv:
  2856 000015F6 B02F                <1> 	mov al, '/'
  2857 000015F8 A2[C6530000]        <1> 	mov [currentfolder], al
  2858 000015FD B801000000          <1> 	mov eax, 1
  2859 00001602 A3[C2530000]        <1> 	mov [currentfolderloc], eax
  2860 00001607 E8AFF9FFFF          <1> 	call clear
  2861                              <1> 	
  2862                              <1> bootfilecheck:
  2863 0000160C 803D[CA550000]01    <1> 	cmp byte [ranboot], 1
  2864 00001613 0F8420000000        <1> 	je near nobootfile
  2865                              <1> 	%ifdef hardware.automatic
  2866                              <1> 		call initializelater ;Initialize components that have debug messages
  2867                              <1> 	%endif
  2868 00001619 BF[563B0000]        <1> 	mov edi, bootfilename
  2869 0000161E BE00004000          <1> 	mov esi, 0x400000
  2870 00001623 E847240000          <1> 	call loadfile
  2871 00001628 81FA94010000        <1> 	cmp edx, 404
  2872 0000162E 0F8405000000        <1> 	je near nobootfile
  2873 00001634 E8430E0000          <1> 	call progbatchfound
  2874                              <1> nobootfile:	
  2875 00001639 C605[CA550000]01    <1> 	mov byte [ranboot], 1
  2876                              <1> 
  2877 00001640 BE[00000000]        <1> 	mov esi, signature
  2878                              <1> .sigcopyloop:	;this prevents an odd error
  2879 00001645 658A06              <1> 	mov al, [gs:esi]
  2880 00001648 8806                <1> 	mov [esi], al
  2881 0000164A 46                  <1> 	inc esi
  2882 0000164B 81FE[1A000000]      <1> 	cmp esi, signatureend
  2883 00001651 72F2                <1> 	jb .sigcopyloop
  2884                              <1> 	
  2885 00001653 BE[00000000]        <1> 	mov esi, signature
  2886 00001658 E8F5F8FFFF          <1> 	call print
  2887 0000165D 8B0D[16000000]      <1> 	mov ecx, [signatureend - 4]
  2888 00001663 E83F070000          <1> 	call showdec
  2889 00001668 BE[993B0000]        <1> 	mov esi, line
  2890 0000166D E8E0F8FFFF          <1> 	call print
  2891 00001672 BE[733B0000]        <1> 	mov esi, userask
  2892 00001677 E8D6F8FFFF          <1> 	call print
  2893                              <1> usercheck:
  2894 0000167C BE[3A6A0000]        <1> 	mov esi, buftxt
  2895 00001681 BF[3A6E0000]        <1> 	mov edi, buftxtend
  2896 00001686 B00A                <1> 	mov al, 10
  2897 00001688 E83DF9FFFF          <1> 	call rdprint
  2898 0000168D 56                  <1> 	push esi
  2899 0000168E BE[7D3B0000]        <1> 	mov esi, pwdask
  2900 00001693 E8BAF8FFFF          <1> 	call print
  2901 00001698 5E                  <1> 	pop esi
  2902 00001699 46                  <1> 	inc esi
  2903 0000169A 8935[99170000]      <1> 	mov [esipass], esi
  2904                              <1> passcheck:
  2905 000016A0 E820FDFFFF          <1> 	call getchar
  2906 000016A5 3C0A                <1> 	cmp al, 10
  2907 000016A7 0F843C000000        <1> 	je near gotpass
  2908 000016AD 3C08                <1> 	cmp al, 8
  2909 000016AF 0F8413000000        <1> 	je near backpass
  2910 000016B5 8806                <1> 	mov [esi], al
  2911 000016B7 46                  <1> 	inc esi
  2912 000016B8 B02A                <1> 	mov al, '*'
  2913 000016BA E85CFDFFFF          <1> 	call prcharint
  2914 000016BF E9DCFFFFFF          <1> 	jmp passcheck
  2915 000016C4 08200800            <1> backcursor2 db 8," ",8,0
  2916                              <1> backpass:
  2917 000016C8 3B35[99170000]      <1> 	cmp esi, [esipass]
  2918 000016CE 0F84CCFFFFFF        <1> 	je near passcheck
  2919 000016D4 4E                  <1> 	dec esi
  2920 000016D5 C60600              <1> 	mov byte [esi], 0
  2921 000016D8 56                  <1> 	push esi
  2922 000016D9 BE[C4160000]        <1> 	mov esi, backcursor2
  2923 000016DE E86FF8FFFF          <1> 	call print
  2924 000016E3 5E                  <1> 	pop esi
  2925 000016E4 E9B7FFFFFF          <1> 	jmp passcheck
  2926                              <1> gotpass:
  2927 000016E9 B00A                <1> 	mov al, 10
  2928 000016EB E82BFDFFFF          <1> 	call prcharint
  2929 000016F0 30C0                <1> 	xor al, al
  2930 000016F2 31C9                <1> 	xor ecx, ecx
  2931 000016F4 8806                <1> 	mov [esi], al
  2932 000016F6 BB[9B3B0000]        <1> 	mov ebx, userlst
  2933                              <1> userfind:
  2934 000016FB BE[3A6A0000]        <1> 	mov esi, buftxt
  2935 00001700 8A06                <1> 	mov al, [esi]
  2936 00001702 3C00                <1> 	cmp al, 0
  2937 00001704 0F84ECFEFFFF        <1> 	je near os
  2938 0000170A 891D[9D170000]      <1> 	mov [usercache], ebx
  2939 00001710 E87E030000          <1> 	call tester
  2940 00001715 3C01                <1> 	cmp al, 1
  2941 00001717 7419                <1> 	je pwdtest
  2942 00001719 41                  <1> 	inc ecx
  2943                              <1> nxtuser:
  2944 0000171A 8A03                <1> 	mov al, [ebx]
  2945 0000171C 43                  <1> 	inc ebx
  2946 0000171D 3C00                <1> 	cmp al, 0
  2947 0000171F 75F9                <1> 	jne nxtuser
  2948 00001721 81FB[BE3B0000]      <1> 	cmp ebx, userlstend
  2949 00001727 0F83C9FEFFFF        <1> 	jae near os
  2950 0000172D E9C9FFFFFF          <1> 	jmp userfind
  2951                              <1> pwdtest:
  2952 00001732 46                  <1> 	inc esi
  2953 00001733 43                  <1> 	inc ebx
  2954 00001734 E85A030000          <1> 	call tester
  2955 00001739 3C01                <1> 	cmp al, 1
  2956 0000173B 7405                <1> 	je pwdrgt
  2957 0000173D E9D8FFFFFF          <1> 	jmp nxtuser
  2958                              <1> pwdrgt:
  2959 00001742 D1E9                <1> 	shr ecx, 1
  2960 00001744 890D[C6550000]      <1> 	mov [uid], ecx
  2961 0000174A E86CF8FFFF          <1> 	call clear
  2962 0000174F 31C9                <1> 	xor ecx, ecx
  2963 00001751 41                  <1> 	inc ecx
  2964 00001752 890D[536E0000]      <1> 	mov [commandbufpos], ecx
  2965                              <1> returnfromexp:
  2966 00001758 66B90002            <1> 	mov cx, 200h
  2967 0000175C BE[3A6A0000]        <1> 	mov esi, buftxt
  2968 00001761 8935[8F1A0000]      <1> 	mov [currentcommandloc], esi
  2969 00001767 E825000000          <1> 	call bufclr
  2970                              <1> clearolddata:
  2971 0000176C 31C0                <1> 	xor eax, eax
  2972 0000176E A2[CB550000]        <1> 	mov [IFON], al
  2973 00001773 A2[CC550000]        <1> 	mov [IFTRUE], al
  2974 00001778 A2[34560000]        <1> 	mov [BATCHISON], al
  2975 0000177D A3[30560000]        <1> 	mov [BATCHPOS], eax
  2976 00001782 A2[35560000]        <1> 	mov [LOOPON], al
  2977 00001787 A3[36560000]        <1> 	mov [LOOPPOS], eax
  2978 0000178C E939000000          <1> 	jmp nwcmd
  2979                              <1> bufclr:	
  2980 00001791 30C0                <1> 	xor al, al
  2981 00001793 8806                <1> 	mov [esi], al
  2982 00001795 46                  <1> 	inc esi
  2983 00001796 E2F9                <1> 	loop bufclr
  2984 00001798 C3                  <1> 	ret
  2985                              <1> 
  2986 00001799 00000000            <1> esipass dd 0
  2987 0000179D [9B3B0000]          <1> usercache dd userlst
  2988                              <1> 	
  2989                              <1> buftxtclear:
  2990 000017A1 30C0                <1> 	xor al, al
  2991 000017A3 BE[3A6A0000]        <1> 	mov esi, buftxt
  2992 000017A8 81FE[3A6E0000]      <1> clearbuftxt: cmp esi, buf2
  2993 000017AE 7314                <1> 	jae retbufclr
  2994 000017B0 8806                <1> 	mov [esi], al
  2995 000017B2 46                  <1> 	inc esi
  2996 000017B3 E9F0FFFFFF          <1> 	jmp clearbuftxt
  2997                              <1> 
  2998 000017B8 39DE                <1> clearitbuf: cmp esi, ebx
  2999 000017BA 7308                <1> 	jae retbufclr
  3000 000017BC 8806                <1> 	mov [esi], al
  3001 000017BE 46                  <1> 	inc esi
  3002 000017BF E9F4FFFFFF          <1> 	jmp clearitbuf
  3003 000017C4 C3                  <1> retbufclr: ret
  3004                              <1> 
  3005 000017C5 E900000000          <1> full:	jmp nwcmd
  3006                              <1> 
  3007                              <1> shush:	;SollerOS Hardly Unix-compatible Shell
  3008                              <1> nwcmd:
  3009 000017CA FB                  <1> 	sti
  3010 000017CB 31C0                <1> 	xor eax, eax
  3011 000017CD 3905[AB190000]      <1> 	cmp [nextcommandloc], eax
  3012 000017D3 7416                <1> 	je nomultiplecommand
  3013 000017D5 8B35[AB190000]      <1> 	mov esi, [nextcommandloc]
  3014 000017DB 8935[AF190000]      <1> 	mov [thiscommandloc], esi
  3015 000017E1 E8D2010000          <1> 	call fixvariables
  3016 000017E6 E9DFFFFFFF          <1> 	jmp nwcmd
  3017                              <1> nomultiplecommand:
  3018 000017EB A3[AF190000]        <1> 	mov [thiscommandloc], eax
  3019 000017F0 3805[513B0000]      <1> 	cmp [threadson], al
  3020 000017F6 7405                <1> 	je noclinwcmd
  3021 000017F8 A2[513B0000]        <1> 	mov [threadson], al
  3022                              <1> noclinwcmd:
  3023 000017FD B001                <1> 	mov al, 1
  3024 000017FF 3805[34560000]      <1> 	cmp [BATCHISON], al
  3025 00001805 7501                <1> 	jne cancel
  3026 00001807 C3                  <1> 	ret
  3027 00001808 30C0                <1> cancel:	xor al, al
  3028 0000180A A2[CB550000]        <1> 	mov [IFON], al
  3029 0000180F A2[34560000]        <1> 	mov [BATCHISON], al
  3030 00001814 B05B                <1> 	mov al, '['
  3031 00001816 66BB0700            <1> 	mov bx, 7
  3032 0000181A E8FCFBFFFF          <1> 	call prcharq
  3033 0000181F 8B35[9D170000]      <1> 	mov esi, [usercache]
  3034 00001825 E816F7FFFF          <1> 	call printquiet
  3035 0000182A BE[873B0000]        <1> 	mov esi, computer
  3036 0000182F E80CF7FFFF          <1> 	call printquiet
  3037 00001834 BE[C6530000]        <1> 	mov esi, currentfolder
  3038 00001839 0335[BE530000]      <1> 	add esi, [lastfolderloc]
  3039 0000183F E8FCF6FFFF          <1> 	call printquiet
  3040 00001844 BE[943B0000]        <1> 	mov esi, endprompt
  3041 00001849 E804F7FFFF          <1> 	call print
  3042 0000184E E84EFFFFFF          <1> 	call buftxtclear
  3043 00001853 BE[3A6A0000]        <1> 	mov esi, buftxt
  3044 00001858 C605[AE130000]01    <1> 	mov byte [commandedit], 1
  3045 0000185F B00A                <1> 	mov al, 10
  3046 00001861 66BB0700            <1> 	mov bx, 7
  3047 00001865 BF[3A6E0000]        <1> 	mov edi, buftxtend
  3048 0000186A E85BF7FFFF          <1> 	call rdprint
  3049 0000186F C605[AE130000]00    <1> 	mov byte [commandedit], 0
  3050 00001876 803D[3A6A0000]00    <1> 	cmp byte [buftxt], 0
  3051 0000187D 0F8447FFFFFF        <1> 	je near nwcmd
  3052 00001883 8B35[536E0000]      <1> gotcmd:	mov esi, [commandbufpos]
  3053 00001889 8935[4F6E0000]      <1> 	mov [lastcommandpos], esi
  3054 0000188F FF05[5B6E0000]      <1> 	inc dword [commandsentered]
  3055 00001895 BF[3A6A0000]        <1> 	mov edi, buftxt
  3056 0000189A 81C6[5F6E0000]      <1> 	add esi, commandbuf
  3057 000018A0 81FE[5F7E0000]      <1> 	cmp esi, commandbufend
  3058 000018A6 7605                <1> 	jbe copycommand
  3059 000018A8 BE[5F6E0000]        <1> 	mov esi, commandbuf
  3060                              <1> copycommand:
  3061 000018AD 8A07                <1> 	mov al, [edi]
  3062 000018AF 8806                <1> 	mov [esi], al
  3063 000018B1 47                  <1> 	inc edi
  3064 000018B2 46                  <1> 	inc esi
  3065 000018B3 3C00                <1> 	cmp al, 0
  3066 000018B5 7412                <1> 	je donecopy
  3067 000018B7 81FE[5F7E0000]      <1> 	cmp esi, commandbufend
  3068 000018BD 76EE                <1> 	jbe copycommand
  3069 000018BF BE[5F6E0000]        <1> 	mov esi, commandbuf
  3070 000018C4 E9E4FFFFFF          <1> 	jmp copycommand
  3071                              <1> donecopy:
  3072 000018C9 81EE[5F6E0000]      <1> 	sub esi, commandbuf
  3073 000018CF 8935[536E0000]      <1> 	mov [commandbufpos], esi
  3074 000018D5 E8D9000000          <1> 	call run
  3075 000018DA E9EBFEFFFF          <1> 	jmp nwcmd
  3076                              <1> 
  3077 000018DF E8BDFEFFFF          <1> input:	call buftxtclear
  3078 000018E4 BE[3A6A0000]        <1> 	mov esi, buftxt		;puts input into buftxt AND onto screen
  3079 000018E9 BF[3A6E0000]        <1> 	mov edi, buftxtend
  3080 000018EE B00A                <1> stdin:	mov al, 10
  3081 000018F0 B307                <1> 	mov bl, 7
  3082 000018F2 E8D3F6FFFF          <1> 	call rdprint
  3083 000018F7 C3                  <1> 	ret
  3084                              <1> 
  3085                              <1> replacevariable:
  3086 000018F8 8A4601              <1> 	mov al, [esi + 1]
  3087 000018FB C64601FF            <1> 	mov byte [esi + 1], 255
  3088 000018FF 3C24                <1> 	cmp al, "$"
  3089 00001901 0F84B1000000        <1> 	je near fixvariables
  3090 00001907 884601              <1> 	mov [esi + 1], al
  3091 0000190A 56                  <1> 	push esi
  3092 0000190B 81EE[3A6A0000]      <1> 	sub esi, buftxt
  3093 00001911 89F7                <1> 	mov edi, esi
  3094 00001913 81C6[3A6A0000]      <1> 	add esi, buftxt
  3095 00001919 47                  <1> 	inc edi
  3096 0000191A BB[3A560000]        <1> 	mov ebx, variables
  3097 0000191F E842110000          <1> 	call nxtvrech
  3098 00001924 89F7                <1> 	mov edi, esi
  3099 00001926 31DB                <1> 	xor ebx, ebx
  3100 00001928 4E                  <1> 	dec esi
  3101                              <1> findvarname:
  3102 00001929 4E                  <1> 	dec esi
  3103 0000192A 8A06                <1> 	mov al, [esi]
  3104 0000192C 43                  <1> 	inc ebx
  3105 0000192D 3C04                <1> 	cmp al, 4
  3106 0000192F 75F8                <1> 	jne findvarname
  3107 00001931 5E                  <1> 	pop esi
  3108                              <1> replacevarloop:
  3109 00001932 8A07                <1> 	mov al, [edi]
  3110 00001934 3C00                <1> 	cmp al, 0
  3111 00001936 0F8416000000        <1> 	je near compressbuftxt
  3112 0000193C 81FB00000000        <1> 	cmp ebx, 0
  3113 00001942 0F8419000000        <1> 	je near expandbuftxt
  3114 00001948 8806                <1> 	mov [esi], al
  3115 0000194A 4B                  <1> 	dec ebx
  3116 0000194B 46                  <1> 	inc esi
  3117 0000194C 47                  <1> 	inc edi
  3118 0000194D E9E0FFFFFF          <1> 	jmp replacevarloop
  3119                              <1> compressbuftxt:
  3120 00001952 8A041E              <1> 	mov al, [esi + ebx]
  3121 00001955 8806                <1> 	mov [esi], al
  3122 00001957 46                  <1> 	inc esi
  3123 00001958 3C00                <1> 	cmp al, 0
  3124 0000195A 75F6                <1> 	jne compressbuftxt
  3125 0000195C E957000000          <1> 	jmp fixvariables
  3126                              <1> expandbuftxt:
  3127 00001961 89F1                <1> 	mov ecx, esi
  3128 00001963 8A26                <1> 	mov ah, [esi]
  3129                              <1> expandbuftxtlp:
  3130 00001965 8A1E                <1> 	mov bl, [esi]
  3131 00001967 46                  <1> 	inc esi
  3132 00001968 8A3E                <1> 	mov bh, [esi]
  3133 0000196A 8826                <1> 	mov [esi], ah
  3134 0000196C 88FC                <1> 	mov ah, bh
  3135 0000196E 80FB00              <1> 	cmp bl, 0
  3136 00001971 75F2                <1> 	jne expandbuftxtlp
  3137 00001973 89CE                <1> 	mov esi, ecx
  3138 00001975 8806                <1> 	mov [esi], al
  3139 00001977 47                  <1> 	inc edi
  3140 00001978 8A07                <1> 	mov al, [edi]
  3141 0000197A 3C00                <1> 	cmp al, 0
  3142 0000197C 0F8436000000        <1> 	je near fixvariables
  3143 00001982 46                  <1> 	inc esi
  3144 00001983 E9D9FFFFFF          <1> 	jmp expandbuftxt
  3145                              <1> multipleprogline:
  3146 00001988 30E4                <1> 	xor ah, ah
  3147 0000198A 8826                <1> 	mov [esi], ah
  3148 0000198C 46                  <1> 	inc esi
  3149 0000198D 8935[AB190000]      <1> 	mov [nextcommandloc], esi
  3150 00001993 E93E000000          <1> 	jmp donefixvariables
  3151                              <1> inlinecomment:	;if the following char is #, include a #, otherwise end the line
  3152 00001998 46                  <1> 	inc esi
  3153 00001999 8A06                <1> 	mov al, [esi]
  3154 0000199B C606FF              <1> 	mov byte [esi], 255
  3155 0000199E 3C23                <1> 	cmp al, '#'
  3156 000019A0 7416                <1> 	je fixvariables
  3157 000019A2 4E                  <1> 	dec esi
  3158 000019A3 C60600              <1> 	mov byte [esi], 0
  3159 000019A6 E90D000000          <1> 	jmp fixvariables
  3160                              <1> 	
  3161 000019AB 00000000            <1> nextcommandloc dd 0
  3162 000019AF 00000000            <1> thiscommandloc dd 0	
  3163                              <1> run:
  3164 000019B3 BE[3A6A0000]        <1> 	mov esi, buftxt
  3165                              <1> fixvariables:
  3166 000019B8 46                  <1> 	inc esi
  3167 000019B9 8A06                <1> 	mov al, [esi]
  3168 000019BB 3C23                <1> 	cmp al, '#'	;inline comment
  3169 000019BD 74D9                <1> 	je inlinecomment
  3170 000019BF 3C24                <1> 	cmp al, '$' ;variable
  3171 000019C1 0F8431FFFFFF        <1> 	je near replacevariable
  3172 000019C7 3C3B                <1> 	cmp al, ';' ;program list
  3173 000019C9 74BD                <1> 	je multipleprogline
  3174 000019CB 3C00                <1> 	cmp al, 0
  3175 000019CD 75E9                <1> 	jne fixvariables
  3176 000019CF 31C0                <1> 	xor eax, eax
  3177 000019D1 A3[AB190000]        <1> 	mov [nextcommandloc], eax
  3178                              <1> donefixvariables:
  3179 000019D6 803D[B61F0000]00    <1> 	cmp byte [indexdone], 0
  3180 000019DD 7505                <1> 	jne progtest
  3181 000019DF E834050000          <1> 	call indexfiles
  3182                              <1> progtest:
  3183 000019E4 31C0                <1> 	xor eax, eax
  3184 000019E6 BB[BA4F0000]        <1> 	mov ebx, fileindex
  3185 000019EB 668B03              <1> prgnxt:	mov ax, [ebx]
  3186 000019EE B1FF                <1> 	mov cl, 255
  3187 000019F0 B52C                <1> 	mov ch, 44
  3188 000019F2 6639C8              <1> 	cmp ax, cx
  3189 000019F5 740E                <1> 	je fndprg
  3190 000019F7 43                  <1> 	inc ebx
  3191 000019F8 81FB[BA530000]      <1> 	cmp ebx, fileindexend
  3192 000019FE 7363                <1> 	jae prgnf
  3193 00001A00 E9E6FFFFFF          <1> 	jmp prgnxt
  3194 00001A05 81C302000000        <1> fndprg: add ebx, 2
  3195 00001A0B 31C9                <1> 	xor ecx, ecx
  3196 00001A0D BE[3A6A0000]        <1> 	mov esi, buftxt
  3197 00001A12 390D[AF190000]      <1> 	cmp [thiscommandloc], ecx
  3198 00001A18 7406                <1> 	je noprgtstmultiple
  3199 00001A1A 8B35[AF190000]      <1> 	mov esi, [thiscommandloc]
  3200                              <1> noprgtstmultiple:
  3201 00001A20 E8AF000000          <1> 	call cndtest
  3202 00001A25 3C01                <1> 	cmp al, 1
  3203 00001A27 7305                <1> 	jae prggood
  3204 00001A29 E9BDFFFFFF          <1> 	jmp prgnxt
  3205 00001A2E 81FB[BA530000]      <1> prggood: cmp ebx, fileindexend
  3206 00001A34 7358                <1> 	jae prgdn
  3207 00001A36 31C0                <1> 	xor eax, eax
  3208 00001A38 BE[3A6A0000]        <1> 	mov esi, buftxt
  3209 00001A3D 3905[AF190000]      <1> 	cmp [thiscommandloc], eax
  3210 00001A43 7406                <1> 	je noprggoodmul
  3211 00001A45 8B35[AF190000]      <1> 	mov esi, [thiscommandloc]
  3212                              <1> noprggoodmul:
  3213 00001A4B 8935[8F1A0000]      <1> 	mov [currentcommandloc], esi
  3214 00001A51 81C303000000        <1> 	add ebx, 3
  3215 00001A57 8B3B                <1> 	mov edi, [ebx]
  3216 00001A59 C605[513B0000]02    <1> 	mov byte [threadson], 2
  3217 00001A60 FFD7                <1> 	call edi
  3218 00001A62 C3                  <1> 	ret
  3219                              <1> prgnf:	
  3220 00001A63 8B35[8F1A0000]      <1> 	mov esi, [currentcommandloc]
  3221 00001A69 8A06                <1> 	mov al, [esi]
  3222 00001A6B 3C00                <1> 	cmp al, 0
  3223 00001A6D 741F                <1> 	je prgdn
  3224 00001A6F BE[5E3B0000]        <1> 	mov esi, notfound1
  3225 00001A74 E8D9F4FFFF          <1> 	call print
  3226 00001A79 8B35[8F1A0000]      <1> 	mov esi, [currentcommandloc]
  3227 00001A7F E8CEF4FFFF          <1> 	call print
  3228 00001A84 BE[663B0000]        <1> 	mov esi, notfound2
  3229 00001A89 E8C4F4FFFF          <1> 	call print
  3230 00001A8E C3                  <1> prgdn:	ret
  3231                              <1> 
  3232 00001A8F 00000000            <1> currentcommandloc dd 0
  3233                              <1> 
  3234                              <1> tester:			;si=user bx=prog returns 1 in al if true
  3235 00001A93 6631C0              <1> 	xor ax, ax
  3236 00001A96 8A06                <1> retest:	mov al, [esi]
  3237 00001A98 8A23                <1> 	mov ah, [ebx]
  3238 00001A9A 3C00                <1> 	cmp al, 0
  3239 00001A9C 740B                <1> 	je testtrue
  3240 00001A9E 38E0                <1> 	cmp al, ah
  3241 00001AA0 750F                <1> 	jne testfalse
  3242 00001AA2 43                  <1> 	inc ebx
  3243 00001AA3 46                  <1> 	inc esi
  3244 00001AA4 E9EDFFFFFF          <1> 	jmp retest
  3245                              <1> testtrue:
  3246 00001AA9 80FC00              <1> 	cmp ah, 0
  3247 00001AAC 7503                <1> 	jne testfalse
  3248 00001AAE B001                <1> 	mov al, 1
  3249 00001AB0 C3                  <1> 	ret
  3250                              <1> testfalse:
  3251 00001AB1 30C0                <1> 	xor al, al
  3252 00001AB3 C3                  <1> 	ret
  3253                              <1> 
  3254                              <1> optest:			;si=user bx=prog returns 1 in al if true
  3255 00001AB4 30C0                <1> 	xor al, al
  3256                              <1> opretest:
  3257 00001AB6 8A06                <1> 	mov al, [esi]
  3258 00001AB8 8A23                <1> 	mov ah, [ebx]
  3259 00001ABA 38E0                <1> 	cmp al, ah
  3260 00001ABC 7513                <1> 	jne optestfalse
  3261 00001ABE 80FC00              <1> 	cmp ah, 0
  3262 00001AC1 7407                <1> 	je optesttrue
  3263 00001AC3 43                  <1> 	inc ebx
  3264 00001AC4 46                  <1> 	inc esi
  3265 00001AC5 E9ECFFFFFF          <1> 	jmp opretest
  3266                              <1> optesttrue:
  3267 00001ACA 3C00                <1> 	cmp al, 0
  3268 00001ACC 7503                <1> 	jne optestfalse
  3269 00001ACE B001                <1> 	mov al, 1
  3270 00001AD0 C3                  <1> 	ret
  3271                              <1> optestfalse:
  3272 00001AD1 30C0                <1> 	xor al, al
  3273 00001AD3 C3                  <1> 	ret
  3274                              <1> 
  3275                              <1> cndtest:			;si=user bx=prog cl=endchar returns 1 in al if true
  3276 00001AD4 30C0                <1> 	xor al, al
  3277 00001AD6 8A06                <1> cndretest:	mov al, [esi]
  3278 00001AD8 8A23                <1> 	mov ah, [ebx]
  3279 00001ADA 38CC                <1> 	cmp ah, cl
  3280 00001ADC 740B                <1> 	je cndtesttrue
  3281 00001ADE 38E0                <1> 	cmp al, ah
  3282 00001AE0 750E                <1> 	jne cndtestfalse
  3283 00001AE2 43                  <1> 	inc ebx
  3284 00001AE3 46                  <1> 	inc esi
  3285 00001AE4 E9EDFFFFFF          <1> 	jmp cndretest
  3286                              <1> cndtesttrue:
  3287 00001AE9 38C8                <1> 	cmp al, cl
  3288 00001AEB 7506                <1> 	jne cndtestalmost
  3289 00001AED B001                <1> 	mov al, 1
  3290 00001AEF C3                  <1> 	ret
  3291                              <1> cndtestfalse:
  3292 00001AF0 30C0                <1> 	xor al, al
  3293 00001AF2 C3                  <1> 	ret
  3294                              <1> cndtestalmost:
  3295 00001AF3 B002                <1> 	mov al, 2
  3296 00001AF5 C3                  <1> 	ret
  3297                              <1> 	
  3298                              <1> array:				;arraystart in si, arrayend in bx, arrayseperator in cx
  3299                              <1> 		                ;ends if array seperator is found backwards after 0
  3300                              <1> 	arnxt:	      
  3301 00001AF6 88E8                <1> 		mov al, ch
  3302 00001AF8 88CC                <1> 		mov ah, cl        
  3303 00001AFA 663906              <1> 		cmp [esi], ax
  3304 00001AFD 7453                <1> 		je ardn
  3305 00001AFF 66390E              <1> 		cmp [esi], cx
  3306 00001B02 740A                <1> 		je arfnd
  3307 00001B04 46                  <1> 		inc esi
  3308 00001B05 39DE                <1> 		cmp esi, ebx
  3309 00001B07 7349                <1> 		jae ardn
  3310 00001B09 E9E8FFFFFF          <1> 		jmp arnxt
  3311 00001B0E 81C602000000        <1> 	arfnd: add esi, 2
  3312 00001B14 891D[531B0000]      <1> 		mov [arbx], ebx
  3313 00001B1A 890D[571B0000]      <1> 		mov [arcx], ecx
  3314 00001B20 E82DF4FFFF          <1> 		call print
  3315 00001B25 8935[591B0000]      <1> 		mov [arsi], esi
  3316 00001B2B BE[993B0000]        <1> 		mov esi, line
  3317 00001B30 E81DF4FFFF          <1> 		call print
  3318 00001B35 8B1D[531B0000]      <1> 		mov ebx, [arbx]
  3319 00001B3B 668B0D[571B0000]    <1> 		mov cx, [arcx]
  3320 00001B42 8B35[591B0000]      <1> 		mov esi, [arsi]
  3321 00001B48 46                  <1> 		inc esi
  3322 00001B49 39DE                <1> 		cmp esi, ebx
  3323 00001B4B 7305                <1> 		jae ardn
  3324 00001B4D E9A4FFFFFF          <1> 		jmp arnxt
  3325 00001B52 C3                  <1> 	ardn:	ret
  3326 00001B53 00000000            <1> arbx:	dw 0,0
  3327 00001B57 0000                <1> arcx:	db 0,0
  3328 00001B59 00000000            <1> arsi:	dw 0,0
  3329                              <1> 
  3330                              <1> clearbuffer:
  3331 00001B5D BE[3A6E0000]        <1> 	mov esi, buf2
  3332 00001B62 B030                <1> 	mov al, '0'
  3333 00001B64 81FE[4E6E0000]      <1> clearbuf: cmp esi, numbuf
  3334 00001B6A 7308                <1> 	jae doneclearbuff
  3335 00001B6C 8806                <1> 	mov [esi], al
  3336 00001B6E 46                  <1> 	inc esi
  3337 00001B6F E9F0FFFFFF          <1> 	jmp clearbuf
  3338                              <1> doneclearbuff: 
  3339 00001B74 C3                  <1> 		ret
  3340                              <1> 
  3341                              <1> convert:
  3342 00001B75 4E                  <1> 	dec esi
  3343 00001B76 89F3                <1> 	mov ebx, esi		;place to convert into must be in esi, number to convert must be in ecx
  3344                              <1> .lp:
  3345 00001B78 89DE                <1> 	mov esi, ebx
  3346 00001B7A 81EE09000000        <1> 	sub esi, 9
  3347 00001B80 81F900CA9A3B        <1> 	cmp ecx, 1000000000
  3348 00001B86 720D                <1> 	jb .8
  3349 00001B88 81E900CA9A3B        <1> 	sub ecx, 1000000000
  3350 00001B8E FE06                <1> 	inc byte [esi]
  3351 00001B90 E9E3FFFFFF          <1> 	jmp .lp
  3352 00001B95 46                  <1> .8:	inc esi
  3353 00001B96 81F900E1F505        <1> 	cmp ecx, 100000000
  3354 00001B9C 720D                <1> 	jb .7
  3355 00001B9E 81E900E1F505        <1> 	sub ecx, 100000000
  3356 00001BA4 FE06                <1> 	inc byte [esi]
  3357 00001BA6 E9CDFFFFFF          <1> 	jmp .lp
  3358 00001BAB 46                  <1> .7:	inc esi
  3359 00001BAC 81F980969800        <1> 	cmp ecx, 10000000
  3360 00001BB2 720D                <1> 	jb .6
  3361 00001BB4 81E980969800        <1> 	sub ecx, 10000000
  3362 00001BBA FE06                <1> 	inc byte [esi]
  3363 00001BBC E9B7FFFFFF          <1> 	jmp .lp
  3364 00001BC1 46                  <1> .6:	inc esi
  3365 00001BC2 81F940420F00        <1> 	cmp ecx, 1000000
  3366 00001BC8 720D                <1> 	jb .5
  3367 00001BCA 81E940420F00        <1> 	sub ecx, 1000000
  3368 00001BD0 FE06                <1> 	inc byte [esi]
  3369 00001BD2 E9A1FFFFFF          <1> 	jmp .lp
  3370 00001BD7 46                  <1> .5:	inc esi
  3371 00001BD8 81F9A0860100        <1> 	cmp ecx, 100000
  3372 00001BDE 720D                <1> 	jb .4
  3373 00001BE0 81E9A0860100        <1> 	sub ecx, 100000
  3374 00001BE6 FE06                <1> 	inc byte [esi]
  3375 00001BE8 E98BFFFFFF          <1> 	jmp .lp
  3376 00001BED 46                  <1> .4:	inc esi
  3377 00001BEE 81F910270000        <1> 	cmp ecx, 10000
  3378 00001BF4 720D                <1> 	jb .3
  3379 00001BF6 81E910270000        <1> 	sub ecx, 10000
  3380 00001BFC FE06                <1> 	inc byte [esi]
  3381 00001BFE E975FFFFFF          <1> 	jmp .lp
  3382 00001C03 46                  <1> .3:	inc esi
  3383 00001C04 81F9E8030000        <1> 	cmp ecx, 1000
  3384 00001C0A 720D                <1> 	jb .2
  3385 00001C0C 81E9E8030000        <1> 	sub ecx, 1000
  3386 00001C12 FE06                <1> 	inc byte [esi]
  3387 00001C14 E95FFFFFFF          <1> 	jmp .lp
  3388 00001C19 46                  <1> .2:	inc esi
  3389 00001C1A 81F964000000        <1> 	cmp ecx, 100
  3390 00001C20 720D                <1> 	jb .1
  3391 00001C22 81E964000000        <1> 	sub ecx, 100
  3392 00001C28 FE06                <1> 	inc byte [esi]
  3393 00001C2A E949FFFFFF          <1> 	jmp .lp
  3394 00001C2F 46                  <1> .1:	inc esi
  3395 00001C30 81F90A000000        <1> 	cmp ecx, 10
  3396 00001C36 720D                <1> 	jb .0
  3397 00001C38 81E90A000000        <1> 	sub ecx, 10
  3398 00001C3E FE06                <1> 	inc byte [esi]
  3399 00001C40 E933FFFFFF          <1> 	jmp .lp
  3400 00001C45 46                  <1> .0:	inc esi
  3401 00001C46 81F901000000        <1> 	cmp ecx, 1
  3402 00001C4C 720D                <1> 	jb .dn
  3403 00001C4E 81E901000000        <1> 	sub ecx, 1
  3404 00001C54 FE06                <1> 	inc byte [esi]
  3405 00001C56 E91DFFFFFF          <1> 	jmp .lp
  3406                              <1> .dn:
  3407 00001C5B C3                  <1> 	ret
  3408                              <1> 
  3409                              <1> 	
  3410                              <1> 
  3411 00001C5C 00<rept>            <1> hexnumber times 8 db 0
  3412 00001C64 202000              <1> hexnumberend db "  ",0
  3413                              <1> 
  3414                              <1> converthex:
  3415                              <1> .clear:	;place to convert to in esi, end of buffer in edi number in ecx
  3416 00001C67 56                  <1> 	push esi
  3417 00001C68 B030                <1> 	mov al, "0"
  3418 00001C6A 39FE                <1> .clearlp: cmp esi, edi
  3419 00001C6C 7308                <1> 	jae .doneclear
  3420 00001C6E 8806                <1> 	mov [esi], al
  3421 00001C70 46                  <1> 	inc esi
  3422 00001C71 E9F4FFFFFF          <1> 	jmp .clearlp
  3423                              <1> .doneclear:
  3424 00001C76 81EE02000000        <1> 	sub esi, 2
  3425 00001C7C 89C8                <1> 	mov eax, ecx
  3426                              <1> .loop:
  3427 00001C7E 30FF                <1> 	xor bh, bh
  3428 00001C80 88C3                <1> 	mov bl, al
  3429 00001C82 66C1E304            <1> 	shl bx, 4
  3430 00001C86 C0EB04              <1> 	shr bl, 4
  3431 00001C89 86DF                <1> 	xchg bl, bh ;they are backwards
  3432 00001C8B 80C330              <1> 	add bl, 48
  3433 00001C8E 80FB39              <1> 	cmp bl, "9"
  3434 00001C91 7609                <1> 	jbe .goodbl
  3435 00001C93 80EB30              <1> 	sub bl, 48
  3436 00001C96 80EB0A              <1> 	sub bl, 0xA
  3437 00001C99 80C341              <1> 	add bl, "A"
  3438                              <1> .goodbl:
  3439 00001C9C 80C730              <1> 	add bh, 48
  3440 00001C9F 80FF39              <1> 	cmp bh, "9"
  3441 00001CA2 7609                <1> 	jbe .goodbh
  3442 00001CA4 80EF30              <1> 	sub bh, 48
  3443 00001CA7 80EF0A              <1> 	sub bh, 0xA
  3444 00001CAA 80C741              <1> 	add bh, "A"
  3445                              <1> .goodbh:
  3446 00001CAD C1E808              <1> 	shr eax, 8
  3447 00001CB0 66891E              <1> 	mov [esi], bx
  3448 00001CB3 81EE02000000        <1> 	sub esi, 2
  3449 00001CB9 3B3424              <1> 	cmp esi, [esp]
  3450 00001CBC 7207                <1> 	jb .done
  3451 00001CBE 3D00000000          <1> 	cmp eax, 0
  3452 00001CC3 75B9                <1> 	jne .loop
  3453                              <1> .done:
  3454 00001CC5 5E                  <1> 	pop esi
  3455 00001CC6 C3                  <1> 	ret
  3456                              <1> 	
  3457                              <1> 	
  3458 00001CC7 00                  <1> smallhex db 0
  3459 00001CC8 01                  <1> firsthexshown db 1
  3460                              <1> showhexsmall:
  3461 00001CC9 C605[C71C0000]01    <1> 	mov byte [smallhex], 1
  3462 00001CD0 E808000000          <1> 	call showhex
  3463 00001CD5 C605[C71C0000]00    <1> 	mov byte [smallhex], 0
  3464 00001CDC C3                  <1> 	ret
  3465                              <1> showhex:
  3466 00001CDD 60                  <1> 	pusha
  3467 00001CDE BE[5C1C0000]        <1> 	mov esi, hexnumber
  3468 00001CE3 BF[641C0000]        <1> 	mov edi, hexnumberend
  3469 00001CE8 E87AFFFFFF          <1> 	call converthex
  3470 00001CED 803D[C81C0000]01    <1> 	cmp byte [firsthexshown], 1
  3471 00001CF4 7503                <1> 	jne .show
  3472 00001CF6 6631D2              <1> 	xor dx, dx
  3473                              <1> .show:
  3474 00001CF9 803D[C81C0000]03    <1> 	cmp byte [firsthexshown], 3
  3475 00001D00 750A                <1> 	jne .nonewhexline
  3476 00001D02 BE[993B0000]        <1> 	mov esi, line
  3477 00001D07 E846F2FFFF          <1> 	call print
  3478                              <1> .nonewhexline:
  3479 00001D0C 803D[C81C0000]04    <1> 	cmp byte [firsthexshown], 4
  3480 00001D13 7527                <1> 	jne .notab
  3481 00001D15 B1A0                <1> 	mov cl, 160
  3482 00001D17 28D1                <1> 	sub cl, dl
  3483 00001D19 C0E905              <1> 	shr cl, 5
  3484 00001D1C C0E105              <1> 	shl cl, 5
  3485 00001D1F 80F900              <1> 	cmp cl, 0
  3486 00001D22 750F                <1> 	jne .nonewline
  3487 00001D24 BE[993B0000]        <1> 	mov esi, line
  3488 00001D29 E824F2FFFF          <1> 	call print
  3489 00001D2E E909000000          <1> 	jmp .notab
  3490                              <1> .nonewline:
  3491 00001D33 80C20F              <1> 	add dl, 15
  3492 00001D36 C0EA04              <1> 	shr dl, 4
  3493 00001D39 C0E204              <1> 	shl dl, 4
  3494                              <1> .notab:
  3495 00001D3C BE[5C1C0000]        <1> 	mov esi, hexnumber
  3496 00001D41 803D[C71C0000]01    <1> 	cmp byte [smallhex],1
  3497 00001D48 7506                <1> 	jne .nosmall
  3498 00001D4A 81C606000000        <1> 	add esi, 6
  3499                              <1> .nosmall:
  3500 00001D50 803D[C81C0000]05    <1> 	cmp byte [firsthexshown], 5
  3501 00001D57 750A                <1> 	jne .noquiet
  3502 00001D59 E8E2F1FFFF          <1> 	call printquiet
  3503 00001D5E E918000000          <1> 	jmp .donequiet
  3504                              <1> .noquiet:
  3505 00001D63 803D[C81C0000]06    <1> 	cmp byte [firsthexshown], 6
  3506 00001D6A 750A                <1> 	jne .normal
  3507 00001D6C E8C3F1FFFF          <1> 	call printhighlight
  3508 00001D71 E905000000          <1> 	jmp .donequiet
  3509                              <1> .normal:
  3510 00001D76 E8D7F1FFFF          <1> 	call print
  3511                              <1> .donequiet:
  3512 00001D7B 803D[C81C0000]02    <1> 	cmp byte [firsthexshown], 2
  3513 00001D82 750A                <1> 	jne .shown
  3514 00001D84 BE[993B0000]        <1> 	mov esi, line
  3515 00001D89 E8C4F1FFFF          <1> 	call print
  3516                              <1> .shown:
  3517 00001D8E C605[C81C0000]00    <1> 	mov byte [firsthexshown], 0
  3518 00001D95 61                  <1> 	popa
  3519 00001D96 C3                  <1> 	ret
  3520                              <1> 
  3521                              <1> 
  3522 00001D97 303030303030303030- <1> decnumber db "00000000000000"
  3523 00001DA0 3030303030          <1>
  3524 00001DA5 2000                <1> decnumberend: db " ",0
  3525                              <1> 
  3526                              <1> showdec: ;;same as showhex, just uses decimal conversion
  3527 00001DA7 60                  <1> 	pusha
  3528 00001DA8 BF[971D0000]        <1> 	mov edi, decnumber
  3529 00001DAD BE[A51D0000]        <1> 	mov esi, decnumberend
  3530                              <1> .clear:
  3531 00001DB2 C60730              <1> 	mov byte [edi], '0'
  3532 00001DB5 47                  <1> 	inc edi
  3533 00001DB6 39F7                <1> 	cmp edi, esi
  3534 00001DB8 72F8                <1> 	jb .clear
  3535 00001DBA BF[971D0000]        <1> 	mov edi, decnumber
  3536 00001DBF E8B1FDFFFF          <1> 	call convert
  3537 00001DC4 803D[C81C0000]01    <1> 	cmp byte [firsthexshown], 1
  3538 00001DCB 7503                <1> 	jne .show
  3539 00001DCD 6631D2              <1> 	xor dx, dx
  3540                              <1> .show:
  3541 00001DD0 803D[C81C0000]03    <1> 	cmp byte [firsthexshown], 3
  3542 00001DD7 750A                <1> 	jne .nonewdecline
  3543 00001DD9 BE[993B0000]        <1> 	mov esi, line
  3544 00001DDE E86FF1FFFF          <1> 	call print
  3545                              <1> .nonewdecline:
  3546 00001DE3 803D[C81C0000]04    <1> 	cmp byte [firsthexshown], 4
  3547 00001DEA 7527                <1> 	jne .notab
  3548 00001DEC B1A0                <1> 	mov cl, 160
  3549 00001DEE 28D1                <1> 	sub cl, dl
  3550 00001DF0 C0E905              <1> 	shr cl, 5
  3551 00001DF3 C0E105              <1> 	shl cl, 5
  3552 00001DF6 80F900              <1> 	cmp cl, 0
  3553 00001DF9 750F                <1> 	jne .nonewline
  3554 00001DFB BE[993B0000]        <1> 	mov esi, line
  3555 00001E00 E84DF1FFFF          <1> 	call print
  3556 00001E05 E909000000          <1> 	jmp .notab
  3557                              <1> .nonewline:
  3558 00001E0A 80C20F              <1> 	add dl, 15
  3559 00001E0D C0EA04              <1> 	shr dl, 4
  3560 00001E10 C0E204              <1> 	shl dl, 4
  3561                              <1> .notab:
  3562 00001E13 BE[971D0000]        <1> 	mov esi, decnumber
  3563 00001E18 4E                  <1> 	dec esi
  3564                              <1> .sifind:
  3565 00001E19 46                  <1> 	inc esi
  3566 00001E1A 803E30              <1> 	cmp byte [esi], '0'
  3567 00001E1D 74FA                <1> 	je .sifind
  3568 00001E1F E82EF1FFFF          <1> 	call print
  3569 00001E24 803D[C81C0000]02    <1> 	cmp byte [firsthexshown], 2
  3570 00001E2B 750A                <1> 	jne .shown
  3571 00001E2D BE[993B0000]        <1> 	mov esi, line
  3572 00001E32 E81BF1FFFF          <1> 	call print
  3573                              <1> .shown:
  3574 00001E37 C605[C81C0000]00    <1> 	mov byte [firsthexshown], 0
  3575 00001E3E 61                  <1> 	popa
  3576 00001E3F C3                  <1> 	ret
  3577                              <1> 	
  3578                              <1> cnvrthextxt:
  3579 00001E40 31C9                <1> 	xor ecx, ecx
  3580 00001E42 31C0                <1> 	xor eax, eax
  3581 00001E44 31D2                <1> 	xor edx, edx
  3582 00001E46 31DB                <1> 	xor ebx, ebx
  3583 00001E48 4E                  <1> 	dec esi
  3584                              <1> .end:
  3585 00001E49 46                  <1> 	inc esi
  3586 00001E4A 8A06                <1> 	mov al, [esi]
  3587 00001E4C 3C00                <1> 	cmp al, 0
  3588 00001E4E 75F9                <1> 	jne .end
  3589                              <1> .loop:
  3590 00001E50 4E                  <1> 	dec esi
  3591 00001E51 8A06                <1> 	mov al, [esi]
  3592 00001E53 3C41                <1> 	cmp al, "A"
  3593 00001E55 7328                <1> 	jae .char
  3594 00001E57 2C30                <1> 	sub al, 48
  3595 00001E59 3C10                <1> 	cmp al, 16
  3596 00001E5B 7721                <1> 	ja .done
  3597                              <1> .donechar:
  3598 00001E5D 81FA00000000        <1> 	cmp edx, 0
  3599 00001E63 740E                <1> 	je .noshl
  3600 00001E65 89D3                <1> 	mov ebx, edx
  3601                              <1> .shl:
  3602 00001E67 C1E004              <1> 	shl eax, 4
  3603 00001E6A 4B                  <1> 	dec ebx
  3604 00001E6B 81FB00000000        <1> 	cmp ebx, 0
  3605 00001E71 75F4                <1> 	jne .shl
  3606                              <1> .noshl:
  3607 00001E73 42                  <1> 	inc edx
  3608 00001E74 01C1                <1> 	add ecx, eax
  3609 00001E76 81FA08000000        <1> 	cmp edx, 8
  3610 00001E7C 72D2                <1> 	jb .loop
  3611                              <1> .done:
  3612 00001E7E C3                  <1> 	ret
  3613                              <1> .char:
  3614 00001E7F 3C46                <1> 	cmp al, "F"
  3615 00001E81 77FB                <1> 	ja .done
  3616 00001E83 2C41                <1> 	sub al, "A"
  3617 00001E85 040A                <1> 	add al, 0xA
  3618 00001E87 E9D1FFFFFF          <1> 	jmp .donechar
  3619                              <1> 	
  3620                              <1> 	
  3621                              <1> cnvrttxt: ;text to convert in esi, first part or 0 in edi
  3622 00001E8C 31C9                <1> 	xor ecx, ecx
  3623 00001E8E 31C0                <1> 	xor eax, eax
  3624 00001E90 31D2                <1> 	xor edx, edx
  3625 00001E92 31DB                <1> 	xor ebx, ebx
  3626 00001E94 4E                  <1> 	dec esi
  3627                              <1> .lp:
  3628 00001E95 46                  <1> 	inc esi
  3629 00001E96 8A06                <1> 	mov al, [esi]
  3630 00001E98 3C00                <1> 	cmp al, 0
  3631 00001E9A 75F9                <1> 	jne .lp
  3632 00001E9C 4E                  <1> 	dec esi
  3633 00001E9D 8A06                <1> 	mov al, [esi]
  3634 00001E9F 3C2E                <1> 	cmp al, '.'
  3635 00001EA1 7506                <1> 	jne .dot
  3636 00001EA3 46                  <1> 	inc esi
  3637 00001EA4 E9ECFFFFFF          <1> 	jmp .lp
  3638                              <1> .dot:
  3639 00001EA9 3C20                <1> 	cmp al, ' '
  3640 00001EAB 7404                <1> 	je .zero
  3641 00001EAD 3C30                <1> 	cmp al, '0'
  3642 00001EAF 7504                <1> 	jne .txtlp
  3643                              <1> .zero: 
  3644 00001EB1 39FE                <1> 		cmp esi, edi
  3645 00001EB3 745E                <1> 		je .done
  3646                              <1> .txtlp:
  3647 00001EB5 31C0                <1> 	xor eax, eax
  3648 00001EB7 8A06                <1> 	mov al, [esi]
  3649 00001EB9 3C3D                <1> 	cmp al, '='
  3650 00001EBB 7456                <1> 	je .done
  3651 00001EBD 3C30                <1> 	cmp al, 48
  3652 00001EBF 7252                <1> 	jb .done
  3653 00001EC1 3C23                <1> 	cmp al, '#'
  3654 00001EC3 744E                <1> 	je .done
  3655 00001EC5 39FE                <1> 	cmp esi, edi
  3656 00001EC7 724A                <1> 	jb .done
  3657 00001EC9 81F900000000        <1> 	cmp ecx, 0
  3658 00001ECF 770B                <1> 	ja .exp
  3659 00001ED1 2C30                <1> .noexp:	sub al, 48
  3660 00001ED3 01C2                <1> 	add edx, eax
  3661 00001ED5 4E                  <1> 	dec esi
  3662 00001ED6 41                  <1> 	inc ecx
  3663 00001ED7 E9D9FFFFFF          <1> 	jmp .txtlp
  3664 00001EDC 81F900000000        <1> .exp:	cmp ecx, 0
  3665 00001EE2 74ED                <1> 	je .noexp
  3666 00001EE4 2C30                <1> 	sub al, 48
  3667 00001EE6 51                  <1> 	push ecx
  3668 00001EE7 89C3                <1> .expmul:	mov ebx, eax
  3669 00001EE9 01D8                <1> 	add eax, ebx
  3670 00001EEB 01D8                <1> 	add eax, ebx
  3671 00001EED 01D8                <1> 	add eax, ebx
  3672 00001EEF 01D8                <1> 	add eax, ebx
  3673 00001EF1 01D8                <1> 	add eax, ebx
  3674 00001EF3 01D8                <1> 	add eax, ebx
  3675 00001EF5 01D8                <1> 	add eax, ebx
  3676 00001EF7 01D8                <1> 	add eax, ebx
  3677 00001EF9 01D8                <1> 	add eax, ebx
  3678 00001EFB 81E901000000        <1> 	sub ecx, 1
  3679 00001F01 81F900000000        <1> 	cmp ecx, 0
  3680 00001F07 77DE                <1> 	ja .expmul
  3681 00001F09 01C2                <1> 	add edx, eax
  3682 00001F0B 59                  <1> 	pop ecx
  3683 00001F0C 4E                  <1> 	dec esi
  3684 00001F0D 41                  <1> 	inc ecx
  3685 00001F0E E9A2FFFFFF          <1> 	jmp .txtlp
  3686 00001F13 89D1                <1> .done: mov ecx, edx
  3687 00001F15 C3                  <1> 	ret
  3688                                      %include "source/programs.asm"
  3689 00001F16 FF2C                <1> filetypes db 255,44
  3690                              <1> progstart:		;programs start here
  3691                              <1> indexfiles:
  3692 00001F18 BE[181F0000]        <1> 	mov esi, progstart
  3693 00001F1D BB[BA4F0000]        <1> 	mov ebx, fileindex
  3694 00001F22 BF[181F0000]        <1> 	mov edi, progstart
  3695 00001F27 81EF02000000        <1> 	sub edi, 2
  3696                              <1> indexloop:
  3697 00001F2D 668B0E              <1> 	mov cx, [esi]
  3698                              <1> 	indexloop2:
  3699 00001F30 663B0F              <1> 		cmp cx, [edi]
  3700 00001F33 7427                <1> 		je indexloop2done
  3701 00001F35 81EF02000000        <1> 		sub edi, 2
  3702 00001F3B 81FF[161F0000]      <1> 		cmp edi, filetypes
  3703 00001F41 73ED                <1> 		jae indexloop2
  3704 00001F43 BF[181F0000]        <1> 	mov edi, progstart
  3705 00001F48 81EF02000000        <1> 	sub edi, 2
  3706 00001F4E 46                  <1> 	inc esi
  3707 00001F4F 81FE[F7340000]      <1> 	cmp esi, batchprogend
  3708 00001F55 7357                <1> 	jae indexloopdone
  3709 00001F57 E9D1FFFFFF          <1> 	jmp indexloop
  3710                              <1> indexloop2done:
  3711 00001F5C 66890B              <1> 	mov [ebx], cx
  3712 00001F5F 81C302000000        <1> 	add ebx, 2
  3713 00001F65 81C602000000        <1> 	add esi, 2
  3714                              <1> 	nameindex:
  3715 00001F6B 8A0E                <1> 		mov cl, [esi]
  3716 00001F6D 80F900              <1> 		cmp cl, 0
  3717 00001F70 7409                <1> 		je nameindexdone
  3718 00001F72 880B                <1> 		mov [ebx], cl
  3719 00001F74 46                  <1> 		inc esi
  3720 00001F75 43                  <1> 		inc ebx
  3721 00001F76 E9F0FFFFFF          <1> 		jmp nameindex
  3722                              <1> 	nameindexdone:
  3723 00001F7B 43                  <1> 		inc ebx
  3724 00001F7C 66C7030000          <1> 		mov word [ebx], 0
  3725 00001F81 81C302000000        <1> 		add ebx, 2
  3726 00001F87 46                  <1> 		inc esi
  3727 00001F88 8933                <1> 		mov [ebx], esi
  3728 00001F8A 81C304000000        <1> 		add ebx, 4
  3729 00001F90 66C7030000          <1> 		mov word [ebx], 0
  3730 00001F95 81C302000000        <1> 		add ebx, 2
  3731 00001F9B 81FB[BA530000]      <1> 		cmp ebx, fileindexend
  3732 00001FA1 730B                <1> 		jae indexloopdone
  3733 00001FA3 81C601000000        <1> 		add esi, 1
  3734 00001FA9 E97FFFFFFF          <1> 		jmp indexloop
  3735 00001FAE C605[B61F0000]01    <1> indexloopdone: 	mov byte [indexdone], 1
  3736 00001FB5 C3                  <1> 		ret
  3737 00001FB6 00                  <1> indexdone db 0
  3738                              <1> %include 'source/programs/_comment.asm' ;#
  3739 00001FB7 FF2C2300            <2> 	db 255,44,"#",0	;this lets you rem stuff
  3740 00001FBB C3                  <2> 	ret 
  3741                              <1> %include 'source/programs/_math.asm' ;!
  3742 00001FBC FF2C2100            <2> db 255,44,"!",0
  3743                              <2> 	num:	
  3744 00001FC0 E898FBFFFF          <2> 		call clearbuffer
  3745 00001FC5 C605[58220000]00    <2> 		mov byte [decimal], 0
  3746 00001FCC C605[59220000]00    <2> 		mov byte [decimal2], 0
  3747 00001FD3 8B35[8F1A0000]      <2> 		mov esi, [currentcommandloc]
  3748 00001FD9 31C0                <2> 		xor eax, eax
  3749 00001FDB 31C9                <2> 		xor ecx, ecx
  3750 00001FDD 31DB                <2> 		xor ebx, ebx
  3751 00001FDF 8A06                <2> 	num2:	mov al, [esi]
  3752 00001FE1 3C2B                <2> 		cmp al, '+'
  3753 00001FE3 741E                <2> 		je operatorfound
  3754 00001FE5 3C2D                <2> 		cmp al, '-'
  3755 00001FE7 741A                <2> 		je operatorfound
  3756 00001FE9 3C2A                <2> 		cmp al, '*'
  3757 00001FEB 7416                <2> 		je operatorfound
  3758 00001FED 3C2F                <2> 		cmp al, '/'
  3759 00001FEF 7412                <2> 		je operatorfound
  3760 00001FF1 3C5E                <2> 		cmp al, '^'
  3761 00001FF3 740E                <2> 		je operatorfound
  3762 00001FF5 46                  <2> 		inc esi
  3763 00001FF6 3C00                <2> 		cmp al, 0
  3764 00001FF8 0F84CCF7FFFF        <2> 		je near nwcmd
  3765 00001FFE E9DCFFFFFF          <2> 		jmp num2
  3766 00002003 50                  <2> 	operatorfound: push eax
  3767 00002004 30E4                <2> 		xor ah, ah
  3768 00002006 8826                <2> 		mov [esi], ah
  3769 00002008 89F7                <2> 		mov edi, esi
  3770 0000200A 46                  <2> 		inc esi
  3771 0000200B 8A06                <2> 		mov al, [esi]
  3772 0000200D 3C25                <2> 		cmp al, '%'
  3773 0000200F 0F8462000000        <2> 		je near resultnum1
  3774                              <2> 	varnum2: 
  3775 00002015 57                  <2> 		push edi
  3776 00002016 E8AA000000          <2> 		call checkdecimal
  3777 0000201B 5F                  <2> 		pop edi
  3778 0000201C E86BFEFFFF          <2> 		call cnvrttxt
  3779                              <2> 	vrnm2:
  3780 00002021 89CB                <2> 		mov ebx, ecx
  3781 00002023 53                  <2> 		push ebx
  3782 00002024 E834FBFFFF          <2> 		call clearbuffer
  3783 00002029 8B35[8F1A0000]      <2> 		mov esi, [currentcommandloc]
  3784 0000202F 89F7                <2> 		mov edi, esi
  3785 00002031 46                  <2> 		inc esi
  3786 00002032 8A06                <2> 		mov al, [esi]
  3787 00002034 3C25                <2> 		cmp al, '%'
  3788 00002036 0F8452000000        <2> 		je near resultnum2
  3789                              <2> 	varnum4: 
  3790 0000203C 57                  <2> 		push edi
  3791 0000203D E86F000000          <2> 		call checkdecimal2
  3792 00002042 5F                  <2> 		pop edi
  3793 00002043 E844FEFFFF          <2> 		call cnvrttxt
  3794                              <2> 	vrnm4:
  3795 00002048 5B                  <2> 		pop ebx
  3796 00002049 58                  <2> 		pop eax
  3797 0000204A 3C2B                <2> 		cmp al, '+'
  3798 0000204C 0F84A7000000        <2> 		je near plusnum
  3799 00002052 3C2D                <2> 		cmp al, '-'
  3800 00002054 0F84AB000000        <2> 		je near subnum
  3801 0000205A 3C2A                <2> 		cmp al, '*'
  3802 0000205C 0F84AF000000        <2> 		je near mulnum
  3803 00002062 3C2F                <2> 		cmp al, '/'
  3804 00002064 0F84BD000000        <2> 		je near divnum
  3805 0000206A 3C5E                <2> 		cmp al, '^'
  3806 0000206C 0F84DA000000        <2> 		je near expnum
  3807 00002072 E953F7FFFF          <2> 		jmp nwcmd
  3808                              <2> 	resultnum1:
  3809 00002077 8A0D[5A220000]      <2> 		mov cl, [decimalresult]
  3810 0000207D 880D[58220000]      <2> 		mov [decimal], cl
  3811 00002083 8B0D[5B220000]      <2> 		mov ecx, [result]
  3812 00002089 E993FFFFFF          <2> 		jmp vrnm2
  3813                              <2> 	resultnum2:
  3814 0000208E 8A0D[58220000]      <2> 		mov cl, [decimal]
  3815 00002094 880D[59220000]      <2> 		mov [decimal2], cl
  3816 0000209A 8A0D[5A220000]      <2> 		mov cl, [decimalresult]
  3817 000020A0 880D[58220000]      <2> 		mov [decimal], cl
  3818 000020A6 8B0D[5B220000]      <2> 		mov ecx, [result]
  3819 000020AC E997FFFFFF          <2> 		jmp vrnm4
  3820                              <2> 	checkdecimal2:
  3821 000020B1 8A25[58220000]      <2> 		mov ah, [decimal]
  3822 000020B7 8825[59220000]      <2> 		mov [decimal2], ah
  3823 000020BD 30E4                <2> 		xor ah, ah
  3824 000020BF 8825[58220000]      <2> 		mov [decimal], ah
  3825                              <2> 	checkdecimal:
  3826 000020C5 89F7                <2> 		mov edi, esi
  3827                              <2> 	chkdec1:
  3828 000020C7 8A07                <2> 		mov al, [edi]
  3829 000020C9 3C2E                <2> 		cmp al, '.'
  3830 000020CB 0F840E000000        <2> 		je near fnddec
  3831 000020D1 3C00                <2> 		cmp al, 0
  3832 000020D3 0F841F000000        <2> 		je near nodecimal
  3833 000020D9 47                  <2> 		inc edi
  3834 000020DA E9E8FFFFFF          <2> 		jmp chkdec1
  3835                              <2> 	fnddec:
  3836 000020DF 8A4701              <2> 		mov al, [edi + 1]
  3837 000020E2 8807                <2> 		mov [edi], al
  3838 000020E4 3C00                <2> 		cmp al, 0
  3839 000020E6 0F840C000000        <2> 		je near nodecimal
  3840 000020EC FE05[58220000]      <2> 		inc byte [decimal]
  3841 000020F2 47                  <2> 		inc edi
  3842 000020F3 E9E7FFFFFF          <2> 		jmp fnddec
  3843                              <2> 	nodecimal:
  3844 000020F8 C3                  <2> 		ret
  3845                              <2> 	plusnum:
  3846 000020F9 E818010000          <2> 		call decaddfix
  3847 000020FE 01D9                <2> 		add ecx, ebx
  3848 00002100 E98A000000          <2> 		jmp retnum
  3849                              <2> 	subnum:
  3850 00002105 E80C010000          <2> 		call decaddfix
  3851 0000210A 29D9                <2> 		sub ecx, ebx
  3852 0000210C E97E000000          <2> 		jmp retnum
  3853                              <2> 	mulnum:
  3854 00002111 A0[59220000]        <2> 		mov al, [decimal2]
  3855 00002116 0005[58220000]      <2> 		add [decimal], al
  3856 0000211C 89C8                <2> 		mov eax, ecx
  3857 0000211E F7E3                <2> 		mul ebx
  3858 00002120 89C1                <2> 		mov ecx, eax
  3859 00002122 E968000000          <2> 		jmp retnum
  3860                              <2> 	divnum:
  3861 00002127 E8EA000000          <2> 		call decaddfix
  3862 0000212C 30C0                <2> 		xor al, al
  3863 0000212E A2[58220000]        <2> 		mov [decimal], al
  3864 00002133 31D2                <2> 		xor edx, edx
  3865 00002135 89C8                <2> 		mov eax, ecx
  3866 00002137 81FB00000000        <2> 		cmp ebx, 0
  3867 0000213D 0F844C000000        <2> 		je near retnum
  3868 00002143 F7F3                <2> 		div ebx
  3869 00002145 89C1                <2> 		mov ecx, eax
  3870 00002147 E943000000          <2> 		jmp retnum
  3871                              <2> 	expnum:
  3872 0000214C 8A15[58220000]      <2> 		mov dl, [decimal]
  3873 00002152 8815[59220000]      <2> 		mov [decimal2], dl
  3874 00002158 31D2                <2> 		xor edx, edx
  3875 0000215A 89C8                <2> 		mov eax, ecx
  3876 0000215C 89D9                <2> 		mov ecx, ebx
  3877 0000215E 89C3                <2> 		mov ebx, eax
  3878 00002160 81F900000000        <2> 		cmp ecx, 0
  3879 00002166 7422                <2> 		je noexpnum
  3880 00002168 49                  <2> 		dec ecx
  3881 00002169 81F900000000        <2> 		cmp ecx, 0
  3882 0000216F 7412                <2> 		je noexpnumlp
  3883 00002171 F7E3                <2> 	expnumlp: mul ebx
  3884 00002173 8A15[59220000]      <2> 		mov dl, [decimal2]
  3885 00002179 0015[58220000]      <2> 		add [decimal], dl
  3886 0000217F 31D2                <2> 		xor edx, edx
  3887 00002181 E2EE                <2> 		loop expnumlp
  3888                              <2> 	noexpnumlp:
  3889 00002183 89C1                <2> 		mov ecx, eax
  3890 00002185 E905000000          <2> 		jmp retnum
  3891                              <2> 	noexpnum:
  3892 0000218A B901000000          <2> 		mov ecx, 1
  3893                              <2> 	retnum: 
  3894 0000218F BE[4E6E0000]        <2> 		mov esi, numbuf
  3895 00002194 890D[5B220000]      <2> 		mov [result], ecx
  3896 0000219A E8D6F9FFFF          <2> 		call convert
  3897 0000219F BE[4E6E0000]        <2> 		mov esi, numbuf
  3898 000021A4 8A25[58220000]      <2> 		mov ah, [decimal]
  3899 000021AA 8825[5A220000]      <2> 		mov [decimalresult], ah
  3900 000021B0 80FC00              <2> 		cmp ah, 0
  3901 000021B3 0F8425000000        <2> 		je near noputdecimal
  3902                              <2> 	putdecimal:
  3903 000021B9 4E                  <2> 		dec esi
  3904 000021BA FECC                <2> 		dec ah
  3905 000021BC 80FC00              <2> 		cmp ah, 0
  3906 000021BF 0F87F4FFFFFF        <2> 		ja near putdecimal
  3907 000021C5 4E                  <2> 		dec esi
  3908 000021C6 8A06                <2> 		mov al, [esi]
  3909 000021C8 C6062E              <2> 		mov byte [esi], '.'
  3910                              <2> 	decputloop:
  3911 000021CB 4E                  <2> 		dec esi
  3912 000021CC 8A26                <2> 		mov ah, [esi]
  3913 000021CE 8806                <2> 		mov [esi], al
  3914 000021D0 88E0                <2> 		mov al, ah
  3915 000021D2 81FE[3A6E0000]      <2> 		cmp esi, buf2
  3916 000021D8 0F87EDFFFFFF        <2> 		ja near decputloop
  3917                              <2> 	noputdecimal:
  3918 000021DE BE[3A6E0000]        <2> 		mov esi, buf2
  3919 000021E3 E809000000          <2> 		call chkadd
  3920 000021E8 E9DDF5FFFF          <2> 		jmp nwcmd
  3921 000021ED 00000000            <2> edxnumbuf dw 0,0
  3922 000021F1 8A06                <2> 	chkadd: mov al, [esi]
  3923 000021F3 3C30                <2> 		cmp al, '0'
  3924 000021F5 750F                <2> 		jne dnadd
  3925 000021F7 46                  <2> 		inc esi
  3926 000021F8 81FE[4E6E0000]      <2> 		cmp esi, numbuf
  3927 000021FE 7405                <2> 		je dnaddm1
  3928 00002200 E9ECFFFFFF          <2> 		jmp chkadd
  3929 00002205 4E                  <2> 	dnaddm1: dec esi
  3930 00002206 E847EDFFFF          <2> 	dnadd:	call print
  3931 0000220B BE[993B0000]        <2> 		mov esi, line
  3932 00002210 E83DEDFFFF          <2> 		call print
  3933 00002215 C3                  <2> 		ret
  3934                              <2> 		
  3935                              <2> 	decaddfix:
  3936 00002216 A0[59220000]        <2> 		mov al, [decimal2]
  3937 0000221B 8A25[58220000]      <2> 		mov ah, [decimal]
  3938 00002221 38E0                <2> 		cmp al, ah
  3939 00002223 7432                <2> 		je gooddecadd
  3940 00002225 38E0                <2> 		cmp al, ah
  3941 00002227 721A                <2> 		jb lowdecadd
  3942                              <2> 	highdecadd:
  3943 00002229 FEC4                <2> 		inc ah
  3944 0000222B 89CA                <2> 		mov edx, ecx
  3945 0000222D C1E103              <2> 		shl ecx, 3
  3946 00002230 01D1                <2> 		add ecx, edx
  3947 00002232 01D1                <2> 		add ecx, edx
  3948 00002234 38E0                <2> 		cmp al, ah
  3949 00002236 77F1                <2> 		ja highdecadd
  3950 00002238 8825[58220000]      <2> 		mov [decimal], ah
  3951 0000223E E914000000          <2> 		jmp gooddecadd
  3952                              <2> 	lowdecadd:
  3953 00002243 FEC0                <2> 		inc al
  3954 00002245 89DA                <2> 		mov edx, ebx
  3955 00002247 C1E303              <2> 		shl ebx, 3
  3956 0000224A 01D3                <2> 		add ebx, edx
  3957 0000224C 01D3                <2> 		add ebx, edx
  3958 0000224E 38E0                <2> 		cmp al, ah
  3959 00002250 72F1                <2> 		jb lowdecadd
  3960 00002252 A2[58220000]        <2> 		mov [decimal], al
  3961                              <2> 	gooddecadd:
  3962 00002257 C3                  <2> 		ret
  3963                              <2> 		
  3964 00002258 00                  <2> decimal db 0
  3965 00002259 00                  <2> decimal2 db 0
  3966 0000225A 00                  <2> decimalresult db 0
  3967 0000225B 00000000            <2> result dd 0
  3968                              <1> %include 'source/programs/_variables.asm' ;% and $
  3969 0000225F FF2C2500            <2> db 255,44,"%",0
  3970                              <2> 	ans:
  3971 00002263 BE[3A6E0000]        <2> 		mov esi, buf2
  3972 00002268 E884FFFFFF          <2> 		call chkadd
  3973 0000226D C3                  <2> 		ret
  3974                              <2> 		
  3975 0000226E FF2C2400            <2> db 255,44,"$",0
  3976 00002272 8B35[8F1A0000]      <2> var: mov esi, [currentcommandloc]
  3977 00002278 BB[3A560000]        <2> 	mov ebx, variables
  3978 0000227D 8A06                <2> lkeq:	mov al, [esi]
  3979 0000227F 3C3D                <2> 	cmp al, '='
  3980 00002281 741E                <2> 	je eqfnd	;is there an '=' sign?
  3981 00002283 3C00                <2> 	cmp al, 0
  3982 00002285 7406                <2> 	je echovars
  3983 00002287 46                  <2> 	inc esi
  3984 00002288 E9F0FFFFFF          <2> 	jmp lkeq
  3985 0000228D BE[3A560000]        <2> echovars: mov esi, variables
  3986 00002292 BB[3A660000]        <2> 	mov ebx, varend
  3987 00002297 B105                <2> 	mov cl, 5
  3988 00002299 B504                <2> 	mov ch, 4
  3989 0000229B E856F8FFFF          <2> 	call array
  3990 000022A0 C3                  <2> 	ret
  3991 000022A1 46                  <2> eqfnd:	inc esi
  3992 000022A2 8A06                <2> 	mov al, [esi]
  3993 000022A4 3C00                <2> 	cmp al, 0
  3994 000022A6 7410                <2> 	je readvar
  3995 000022A8 8B35[8F1A0000]      <2> 	mov esi, [currentcommandloc]
  3996 000022AE BB[3A560000]        <2> 	mov ebx, variables
  3997 000022B3 E91C000000          <2> 	jmp seek
  3998                              <2> readvar:
  3999 000022B8 B00A                <2> 	mov al, 10
  4000 000022BA 66BB0700            <2> 	mov bx, 7
  4001 000022BE C605[AE130000]00    <2> 	mov byte [commandedit], 0
  4002 000022C5 BF[3A6E0000]        <2> 	mov edi, buftxtend
  4003 000022CA E8FBECFFFF          <2> 	call rdprint
  4004 000022CF E99EFFFFFF          <2> 	jmp var
  4005 000022D4 668B03              <2> seek:	mov ax, [ebx]
  4006 000022D7 B105                <2> 	mov cl, 5
  4007 000022D9 B504                <2> 	mov ch, 4
  4008 000022DB 663D0000            <2> 	cmp ax, 0
  4009 000022DF 0F846A000000        <2> 	je near save
  4010 000022E5 6639C8              <2> 	cmp ax, cx
  4011 000022E8 7406                <2> 	je skfnd
  4012 000022EA 43                  <2> 	inc ebx
  4013 000022EB E9E4FFFFFF          <2> 	jmp seek
  4014 000022F0 8B35[8F1A0000]      <2> skfnd:	mov esi, [currentcommandloc]
  4015 000022F6 46                  <2> 	inc esi
  4016 000022F7 81C302000000        <2> 	add ebx, 2
  4017 000022FD 89DF                <2> 	mov edi, ebx
  4018 000022FF B13D                <2> 	mov cl, '='
  4019 00002301 E8CEF7FFFF          <2> 	call cndtest
  4020 00002306 3C01                <2> 	cmp al, 1	
  4021 00002308 741B                <2> 	je varfnd
  4022 0000230A 89FB                <2> 	mov ebx, edi
  4023 0000230C 8B35[8F1A0000]      <2> 	mov esi, [currentcommandloc]
  4024 00002312 668B03              <2> 	mov ax, [ebx]
  4025 00002315 663D0000            <2> 	cmp ax, 0
  4026 00002319 0F8430000000        <2> 	je near save
  4027 0000231F 43                  <2> 	inc ebx
  4028 00002320 E9AFFFFFFF          <2> 	jmp seek
  4029 00002325 8A03                <2> varfnd:	mov al, [ebx]
  4030 00002327 3C04                <2> 	cmp al, 4
  4031 00002329 7407                <2> 	je save2
  4032 0000232B 4B                  <2> 	dec ebx
  4033 0000232C 4E                  <2> 	dec esi
  4034 0000232D E9F3FFFFFF          <2> 	jmp varfnd
  4035 00002332 4B                  <2> save2:	dec ebx
  4036 00002333 4E                  <2> 	dec esi
  4037 00002334 8A03                <2> 	mov al, [ebx]
  4038 00002336 3C05                <2> 	cmp al, 5
  4039 00002338 7405                <2> 	je remove
  4040 0000233A E9E6FFFFFF          <2> 	jmp varfnd
  4041 0000233F 8A03                <2> remove: mov al, [ebx]
  4042 00002341 3C00                <2> 	cmp al, 0
  4043 00002343 748F                <2> 	je seek
  4044 00002345 30C0                <2> 	xor al, al
  4045 00002347 8803                <2> 	mov [ebx], al
  4046 00002349 43                  <2> 	inc ebx
  4047 0000234A E9F0FFFFFF          <2> 	jmp remove	;do not need for now-need defragmentation
  4048 0000234F 8B35[8F1A0000]      <2> save:	mov esi, [currentcommandloc]
  4049 00002355 43                  <2> 	inc ebx
  4050 00002356 B005                <2> 	mov al, 5
  4051 00002358 B404                <2> 	mov ah, 4
  4052 0000235A 668903              <2> 	mov [ebx], ax
  4053 0000235D 43                  <2> 	inc ebx
  4054 0000235E 43                  <2> svhere:	inc ebx
  4055 0000235F 46                  <2> 	inc esi
  4056 00002360 8A06                <2> 	mov al, [esi]
  4057 00002362 3C00                <2> 	cmp al, 0
  4058 00002364 0F8456000000        <2> 	je near svdone
  4059 0000236A 3C25                <2> 	cmp al, '%'
  4060 0000236C 7407                <2> 	je ans2
  4061 0000236E 8803                <2> 	mov [ebx], al	
  4062 00002370 E9E9FFFFFF          <2> 	jmp svhere
  4063 00002375 56                  <2> ans2:	push esi
  4064 00002376 BE[3A6E0000]        <2> 	mov esi, buf2
  4065 0000237B E82C000000          <2> 	call ansfnd
  4066 00002380 E806000000          <2> 	call anscp
  4067 00002385 5E                  <2> 	pop esi
  4068 00002386 E9D3FFFFFF          <2> 	jmp svhere
  4069 0000238B 8A06                <2> anscp:	mov al, [esi]
  4070 0000238D 8803                <2> 	mov [ebx], al
  4071 0000238F 81FE[4E6E0000]      <2> 	cmp esi, numbuf
  4072 00002395 74C7                <2> 	je svhere
  4073 00002397 3C00                <2> 	cmp al, 0
  4074 00002399 74C3                <2> 	je svhere
  4075 0000239B 43                  <2> 	inc ebx
  4076 0000239C 46                  <2> 	inc esi
  4077 0000239D E9E9FFFFFF          <2> 	jmp anscp
  4078 000023A2 5E                  <2> ansnf:	pop esi
  4079 000023A3 8A06                <2> 	mov al, [esi]
  4080 000023A5 8803                <2> 	mov [ebx], al
  4081 000023A7 E9B2FFFFFF          <2> 	jmp svhere
  4082 000023AC 46                  <2> ansfnd:	inc esi
  4083 000023AD 81FE[4D6E0000]      <2> 	cmp esi, numbuf - 1
  4084 000023B3 740A                <2> 	je fndans
  4085 000023B5 8A06                <2> 	mov al, [esi]
  4086 000023B7 3C00                <2> 	cmp al, 0
  4087 000023B9 74E7                <2> 	je ansnf
  4088 000023BB 3C30                <2> 	cmp al, '0'
  4089 000023BD 74ED                <2> 	je ansfnd
  4090                              <2> fndans:
  4091 000023BF C3                  <2> 	ret
  4092 000023C0 30C0                <2> svdone:	xor al, al
  4093 000023C2 8803                <2> 	mov [ebx], al
  4094 000023C4 C3                  <2> 	ret
  4095                              <1> %include 'source/programs/_run.asm' ;./
  4096                              <2> 
  4097 000023C5 7F454C46            <2> 	elfstart db 0x7F,"ELF"
  4098 000023C9 FF2C2E2F00          <2> 	db 255,44,"./",0
  4099                              <2> rundiskprog:
  4100 000023CE 8B3D[8F1A0000]      <2> 	mov edi, [currentcommandloc]
  4101 000023D4 81C702000000        <2> 	add edi, 2
  4102 000023DA BE00004000          <2> 	mov esi, 0x400000
  4103 000023DF E88B160000          <2> 	call loadfile
  4104 000023E4 81FA94010000        <2> 	cmp edx, 404
  4105 000023EA 746A                <2> 	je noprogfound
  4106 000023EC BB00004000          <2> 	mov ebx, 0x400000
  4107 000023F1 A1[C5230000]        <2> 	mov eax, [elfstart]
  4108 000023F6 3903                <2> 	cmp [ebx], eax
  4109 000023F8 0F8437000000        <2> 	je near runelf
  4110 000023FE 66813B4558          <2> 	cmp word [ebx], "EX"
  4111 00002403 7577                <2> 	jne progbatchfound
  4112 00002405 81C302000000        <2> 	add ebx, 2
  4113 0000240B 8B3D[8F1A0000]      <2> 	mov edi, [currentcommandloc]
  4114 00002411 81C702000000        <2> 	add edi, 2
  4115                              <2> findspaceprog:
  4116 00002417 8A07                <2> 	mov al, [edi]
  4117 00002419 47                  <2> 	inc edi
  4118 0000241A 3C20                <2> 	cmp al, " "
  4119 0000241C 75F9                <2> 	jne findspaceprog
  4120                              <2> findnonspaceprog:
  4121 0000241E 8A07                <2> 	mov al, [edi]
  4122 00002420 47                  <2> 	inc edi
  4123 00002421 3C20                <2> 	cmp al, " "
  4124 00002423 74F9                <2> 	je findnonspaceprog
  4125 00002425 4F                  <2> 	dec edi
  4126 00002426 8925[BA530000]      <2> 	mov [previousstack], esp
  4127 0000242C FFD3                <2> 	call ebx
  4128 0000242E 8B25[BA530000]      <2> 	mov esp, [previousstack]
  4129 00002434 C3                  <2> 	ret
  4130                              <2> runelf:
  4131 00002435 8B3D[8F1A0000]      <2> 	mov edi, [currentcommandloc]
  4132 0000243B 81C702000000        <2> 	add edi, 2
  4133 00002441 81C380000000        <2> 	add ebx, 0x80
  4134 00002447 8925[BA530000]      <2> 	mov [previousstack], esp
  4135 0000244D FFD3                <2> 	call ebx
  4136 0000244F 8B25[BA530000]      <2> 	mov esp, [previousstack]
  4137 00002455 C3                  <2> 	ret
  4138                              <2> noprogfound:
  4139 00002456 BE[5E3B0000]        <2> 	mov esi, notfound1
  4140 0000245B E8F2EAFFFF          <2> 	call print
  4141 00002460 8B35[8F1A0000]      <2> 	mov esi, [currentcommandloc]
  4142 00002466 81C602000000        <2> 	add esi, 2
  4143 0000246C E8E1EAFFFF          <2> 	call print
  4144 00002471 BE[663B0000]        <2> 	mov esi, notfound2
  4145 00002476 E8D7EAFFFF          <2> 	call print
  4146 0000247B C3                  <2> 	ret
  4147                              <2> progbatchfound:
  4148 0000247C BF00004000          <2> 		mov edi, 0x400000
  4149 00002481 C605[34560000]01    <2> 		mov byte [BATCHISON], 1
  4150                              <2> 	batchrunloop:
  4151 00002488 E814F3FFFF          <2> 		call buftxtclear
  4152 0000248D BE[3A6A0000]        <2> 		mov esi, buftxt
  4153 00002492 8935[8F1A0000]      <2> 		mov [currentcommandloc], esi
  4154                              <2> 	batchrunloop2:
  4155 00002498 B10A                <2> 		mov cl, 10
  4156 0000249A B50D                <2> 		mov ch, 13
  4157 0000249C 380F                <2> 		cmp [edi], cl
  4158 0000249E 0F841C000000        <2> 		je near nxtbatchrunline
  4159 000024A4 382F                <2> 		cmp [edi], ch
  4160 000024A6 0F8414000000        <2> 		je near nxtbatchrunline
  4161 000024AC 803F00              <2> 		cmp byte [edi], 0
  4162 000024AF 0F840B000000        <2> 		je near nxtbatchrunline
  4163 000024B5 8A07                <2> 		mov al, [edi]
  4164 000024B7 8806                <2> 		mov [esi], al
  4165 000024B9 46                  <2> 		inc esi
  4166 000024BA 47                  <2> 		inc edi
  4167 000024BB E9D8FFFFFF          <2> 		jmp batchrunloop2
  4168                              <2> 	nxtbatchrunline:
  4169 000024C0 47                  <2> 		inc edi
  4170 000024C1 380F                <2> 		cmp [edi], cl
  4171 000024C3 74FB                <2> 		je nxtbatchrunline
  4172 000024C5 382F                <2> 		cmp [edi], ch
  4173 000024C7 74F7                <2> 		je nxtbatchrunline
  4174 000024C9 893D[27250000]      <2> 		mov [batchedi], edi
  4175 000024CF 893D[30560000]      <2> 		mov [BATCHPOS], edi
  4176 000024D5 C60600              <2> 		mov byte [esi], 0
  4177 000024D8 BE[3A6A0000]        <2> 		mov esi, buftxt
  4178 000024DD 803E00              <2> 		cmp byte [esi], 0
  4179 000024E0 0F8439000000        <2> 		je near nobatchfoundrun
  4180 000024E6 31DB                <2> 		xor ebx, ebx
  4181 000024E8 8A1D[CB550000]      <2> 		mov bl, [IFON]
  4182 000024EE 80FB00              <2> 		cmp bl, 0
  4183 000024F1 0F8534000000        <2> 		jne near iftestbatch
  4184                              <2> 	doneiftest:
  4185 000024F7 803D[00260000]00    <2> 		cmp byte [runnextline], 0
  4186 000024FE 0F8405000000        <2> 		je near noruniftest
  4187 00002504 E8AAF4FFFF          <2> 		call run
  4188                              <2> 	noruniftest:
  4189 00002509 C605[00260000]01    <2> 		mov byte [runnextline], 1
  4190 00002510 8B3D[27250000]      <2> 		mov edi, [batchedi]
  4191 00002516 803F00              <2> 		cmp byte [edi], 0
  4192 00002519 0F8569FFFFFF        <2> 		jne near batchrunloop
  4193                              <2> 	nobatchfoundrun:
  4194 0000251F C605[34560000]00    <2> 		mov byte [BATCHISON], 0
  4195 00002526 C3                  <2> 		ret
  4196                              <2> 	
  4197 00002527 00000000            <2> batchedi dd 0	
  4198                              <2> 	
  4199                              <2> 	iftestbatch:
  4200 0000252B BE[CC550000]        <2> 		mov esi, IFTRUE
  4201 00002530 01DE                <2> 		add esi, ebx
  4202 00002532 803E00              <2> 		cmp byte [esi], 0
  4203 00002535 0F85BCFFFFFF        <2> 		jne near doneiftest
  4204 0000253B 881D[01260000]      <2> 		mov [iffalsebuf], bl
  4205 00002541 803D[35560000]01    <2> 		cmp byte [LOOPON], 1
  4206 00002548 0F8513000000        <2> 		jne near fifindbatch
  4207 0000254E E935FFFFFF          <2> 		jmp batchrunloop
  4208                              <2> 	elsetestbatch:
  4209 00002553 C60601              <2> 		mov byte [esi], 1
  4210 00002556 81C705000000        <2> 		add edi, 5
  4211 0000255C E927FFFFFF          <2> 		jmp batchrunloop
  4212                              <2> 	fifindbatch:
  4213 00002561 66B96966            <2> 		mov cx, "if"
  4214 00002565 66B86669            <2> 		mov ax, "fi"
  4215 00002569 663907              <2> 		cmp [edi], ax
  4216 0000256C 0F8424000000        <2> 		je near fifoundbatch
  4217 00002572 66390F              <2> 		cmp [edi], cx
  4218 00002575 0F8468000000        <2> 		je near iffoundbatch
  4219 0000257B 803F00              <2> 		cmp byte [edi], 0
  4220 0000257E 0F8412000000        <2> 		je near fifoundbatch
  4221 00002584 B8656C7365          <2> 		mov eax, "else"
  4222 00002589 3907                <2> 		cmp [edi], eax
  4223 0000258B 0F84C2FFFFFF        <2> 		je near elsetestbatch
  4224 00002591 E973FFFFFF          <2> 		jmp noruniftest
  4225                              <2> 	fifoundbatch:
  4226 00002596 81C702000000        <2> 		add edi, 2
  4227 0000259C B00A                <2> 		mov al, 10
  4228 0000259E 3807                <2> 		cmp [edi], al
  4229 000025A0 0F840E000000        <2> 		je near goodfibatch
  4230 000025A6 803F00              <2> 		cmp byte [edi], 0
  4231 000025A9 0F8470FFFFFF        <2> 		je near nobatchfoundrun
  4232 000025AF E9ADFFFFFF          <2> 		jmp fifindbatch
  4233                              <2> 	goodfibatch:
  4234 000025B4 B001                <2> 		mov al, 1
  4235 000025B6 2805[CB550000]      <2> 		sub [IFON], al 
  4236 000025BC A0[CB550000]        <2> 		mov al, [IFON]
  4237 000025C1 8A1D[01260000]      <2> 		mov bl, [iffalsebuf]
  4238 000025C7 38D8                <2> 		cmp al, bl
  4239 000025C9 7796                <2> 		ja fifindbatch
  4240 000025CB 8B35[8F1A0000]      <2> 		mov esi, [currentcommandloc]
  4241 000025D1 81EF02000000        <2> 		sub edi, 2
  4242 000025D7 C605[00260000]00    <2> 		mov byte [runnextline], 0
  4243 000025DE E9A5FEFFFF          <2> 		jmp batchrunloop
  4244                              <2> 	iffoundbatch:
  4245 000025E3 B020                <2> 		mov al, ' '
  4246 000025E5 81C702000000        <2> 		add edi, 2
  4247 000025EB 3807                <2> 		cmp [edi], al
  4248 000025ED 0F856EFFFFFF        <2> 		jne near fifindbatch
  4249 000025F3 B001                <2> 		mov al, 1
  4250 000025F5 0005[CB550000]      <2> 		add [IFON], al
  4251 000025FB E961FFFFFF          <2> 		jmp fifindbatch
  4252                              <2> 		
  4253                              <2> 		
  4254 00002600 01                  <2> runnextline db 1
  4255 00002601 00                  <2> iffalsebuf db 0
  4256                              <2> 
  4257 00002602 C3                  <2> notbatch: ret 
  4258                              <1> %ifdef network.included
  4259                              <1> 	%include 'source/programs/arp.asm'
  4260                              <1> %endif
  4261                              <1> %include 'source/programs/batch.asm'
  4262 00002603 FF2C626174636800    <2> db 255,44,"batch",0
  4263                              <2> 	batchst: 
  4264 0000260B 8B3D[8F1A0000]      <2> 		mov edi, [currentcommandloc]
  4265 00002611 81C706000000        <2> 		add edi, 6
  4266 00002617 803F00              <2> 		cmp byte [edi], 0
  4267 0000261A 0F846D000000        <2> 		je near nonamefound
  4268 00002620 BE00004000          <2> 		mov esi, 0x400000
  4269 00002625 E845140000          <2> 		call loadfile
  4270 0000262A 89D0                <2> 		mov eax, edx
  4271 0000262C 3D94010000          <2> 		cmp eax, 404
  4272 00002631 7465                <2> 		je goodbatchname
  4273 00002633 BE[3E260000]        <2> 		mov esi, badbatchname
  4274 00002638 E815E9FFFF          <2> 		call print
  4275 0000263D C3                  <2> 		ret
  4276 0000263E 546869732066696C65- <2> 		badbatchname db "This file already exists!",10,0
  4277 00002647 20616C726561647920- <2>
  4278 00002650 657869737473210A00  <2>
  4279 00002659 596F75206861766520- <2> 		namenotfoundbatch db "You have to type a name after the command.",10,0
  4280 00002662 746F20747970652061- <2>
  4281 0000266B 206E616D6520616674- <2>
  4282 00002674 65722074686520636F- <2>
  4283 0000267D 6D6D616E642E0A00    <2>
  4284 00002685 00000000            <2> 		esicache3 dd 0
  4285 00002689 00000000            <2> 		esicache2 dd 0
  4286                              <2> 	nonamefound:
  4287 0000268D BE[59260000]        <2> 		mov esi, namenotfoundbatch
  4288 00002692 E8BBE8FFFF          <2> 		call print
  4289 00002697 C3                  <2> 		ret
  4290                              <2> 	goodbatchname:
  4291 00002698 BE00004000          <2> 		mov esi, 0x400000
  4292                              <2> 	batchcreate:
  4293 0000269D 8935[85260000]      <2> 		mov [esicache3], esi
  4294 000026A3 BF00008000          <2> 		mov edi, 0x800000
  4295 000026A8 B00A                <2> 		mov al, 10
  4296 000026AA B307                <2> 		mov bl, 7
  4297 000026AC B404                <2> 		mov ah, 4
  4298 000026AE CD30                <2> 		int 30h
  4299 000026B0 8935[89260000]      <2> 		mov [esicache2], esi
  4300 000026B6 8A0E                <2> 		mov cl, [esi]
  4301 000026B8 8B35[85260000]      <2> 		mov esi, [esicache3]
  4302 000026BE BB[F5260000]        <2> 		mov ebx, exitword
  4303 000026C3 E80CF4FFFF          <2> 		call cndtest
  4304 000026C8 3C01                <2> 		cmp al, 1
  4305 000026CA 7414                <2> 		je endbatchcreate
  4306 000026CC 3C02                <2> 		cmp al, 2
  4307 000026CE 7410                <2> 		je endbatchcreate
  4308 000026D0 8B35[89260000]      <2> 		mov esi, [esicache2]
  4309 000026D6 B00A                <2> 		mov al, 10
  4310 000026D8 8806                <2> 		mov [esi], al
  4311 000026DA 46                  <2> 		inc esi
  4312 000026DB E9BDFFFFFF          <2> 		jmp batchcreate
  4313                              <2> 	endbatchcreate:
  4314 000026E0 8B35[85260000]      <2> 		mov esi, [esicache3]
  4315 000026E6 31C0                <2> 		xor eax, eax
  4316 000026E8 8806                <2> 		mov [esi], al
  4317 000026EA BE00004000          <2> 		mov esi, 0x400000
  4318 000026EF E85EE8FFFF          <2> 		call print
  4319 000026F4 C3                  <2> 		ret
  4320                              <2> 	
  4321 000026F5 5C7800              <2> 	exitword db "\x",0
  4322 000026F8 54797065205C782074- <2> 	wordmsg db "Type \x to exit.",10,0
  4323 00002701 6F20657869742E0A00  <2>
  4324                              <1> %ifdef gui.background
  4325                              <1> 	%include 'source/programs/background.asm'
  4326                              <1> %endif
  4327                              <1> %include 'source/programs/beep.asm'
  4328 0000270A FF2C6265657000      <2> 	db 255,44,"beep",0
  4329                              <2> beep:
  4330 00002711 B8[36270000]        <2> 	mov eax, beepstart
  4331 00002716 A3[74020000]        <2> 	mov [soundpos], eax
  4332 0000271B B8[3A270000]        <2> 	mov eax, beepend
  4333 00002720 A3[78020000]        <2> 	mov [soundendpos], eax
  4334 00002725 C605[71020000]01    <2> 	mov byte [soundon], 1
  4335                              <2> waitforsoundendbeep:
  4336 0000272C A0[71020000]        <2> 	mov al, [soundon]
  4337 00002731 3C00                <2> 	cmp al, 0
  4338 00002733 75F7                <2> 	jne waitforsoundendbeep
  4339 00002735 C3                  <2> 	ret
  4340                              <2> 	
  4341                              <2> beepstart:
  4342 00002736 3200D111            <2> 	dw 50, 4561
  4343                              <2> beepend:
  4344                              <1> %include 'source/programs/cd.asm'
  4345 0000273A FF2C636400          <2> db 255,44,"cd",0
  4346                              <2> cd:
  4347 0000273F 8B35[8F1A0000]      <2> 	mov esi, [currentcommandloc]
  4348 00002745 81C603000000        <2> 	add esi, 3
  4349 0000274B 8B3D[C2530000]      <2> 	mov edi, [currentfolderloc]
  4350 00002751 893D[BE530000]      <2> 	mov [lastfolderloc], edi
  4351 00002757 81C7[C6530000]      <2> 	add edi, currentfolder
  4352                              <2> 	;cmp word [esi], ".."
  4353                              <2> 	;je .moveup
  4354                              <2> .movedown:
  4355 0000275D 8A06                <2> 	mov al, [esi]
  4356 0000275F 8807                <2> 	mov [edi], al
  4357 00002761 47                  <2> 	inc edi
  4358 00002762 46                  <2> 	inc esi
  4359 00002763 3C00                <2> 	cmp al, 0
  4360 00002765 740A                <2> 	je .donecd
  4361 00002767 81FF[C6550000]      <2> 	cmp edi, currentfolderend
  4362 0000276D 72EE                <2> 	jb .movedown
  4363 0000276F 30C0                <2> 	xor al, al
  4364                              <2> .donecd:
  4365 00002771 4F                  <2> 	dec edi
  4366 00002772 C6072F              <2> 	mov byte [edi], '/'
  4367 00002775 47                  <2> 	inc edi
  4368 00002776 81EF[C6530000]      <2> 	sub edi, currentfolder
  4369 0000277C 893D[C2530000]      <2> 	mov [currentfolderloc], edi
  4370 00002782 C3                  <2> 	ret
  4371                              <2> ;.moveup:
  4372                              <2> ;	ret
  4373                              <1> %include 'source/programs/charmap.asm'
  4374 00002783 FF2C636861726D6170- <2> db 255,44,"charmap",0
  4375 0000278C 00                  <2>
  4376 0000278D 66BB0700            <2> 	mov bx, 7
  4377 00002791 B020                <2> 	mov al, " "
  4378 00002793 E883ECFFFF          <2> 	call prcharq
  4379 00002798 E87EECFFFF          <2> 	call prcharq
  4380 0000279D E879ECFFFF          <2> 	call prcharq
  4381 000027A2 E874ECFFFF          <2> 	call prcharq
  4382 000027A7 B030                <2> 	mov al, "0"
  4383                              <2> charmapnumprnt:
  4384 000027A9 E86DECFFFF          <2> 	call prcharq
  4385 000027AE FEC0                <2> 	inc al
  4386 000027B0 6650                <2> 	push ax
  4387 000027B2 B020                <2> 	mov al, " "
  4388 000027B4 E862ECFFFF          <2> 	call prcharq
  4389 000027B9 6658                <2> 	pop ax
  4390 000027BB 3C39                <2> 	cmp al, "9"
  4391 000027BD 76EA                <2> 	jbe charmapnumprnt
  4392 000027BF B041                <2> 	mov al, "A"
  4393                              <2> charmapnumprnt2:
  4394 000027C1 E855ECFFFF          <2> 	call prcharq
  4395 000027C6 FEC0                <2> 	inc al
  4396 000027C8 6650                <2> 	push ax
  4397 000027CA B020                <2> 	mov al, " "
  4398 000027CC E84AECFFFF          <2> 	call prcharq
  4399 000027D1 6658                <2> 	pop ax
  4400 000027D3 3C47                <2> 	cmp al, "G"
  4401 000027D5 72EA                <2> 	jb charmapnumprnt2
  4402                              <2> 	
  4403 000027D7 BE[993B0000]        <2> 	mov esi, line
  4404 000027DC E85FE7FFFF          <2> 	call printquiet
  4405 000027E1 6631C0              <2> 	xor ax, ax
  4406 000027E4 88C1                <2> 	mov cl, al
  4407 000027E6 E8DEF4FFFF          <2> 	call showhexsmall
  4408 000027EB E958000000          <2> 	jmp charmapnocopy ;the first char is 0 which is unprintable
  4409                              <2> charmapcopy:
  4410 000027F0 FEC0                <2> 	inc al
  4411 000027F2 6650                <2> 	push ax
  4412 000027F4 3C08                <2> 	cmp al, 8
  4413 000027F6 7450                <2> 	je charmapnocopy
  4414 000027F8 3C09                <2> 	cmp al, 9
  4415 000027FA 744C                <2> 	je charmapnocopy
  4416 000027FC 3C0A                <2> 	cmp al, 10
  4417 000027FE 7448                <2> 	je charmapnocopy
  4418 00002800 3C0D                <2> 	cmp al, 13
  4419 00002802 7444                <2> 	je charmapnocopy
  4420 00002804 3CFF                <2> 	cmp al, 255
  4421 00002806 7440                <2> 	je charmapnocopy
  4422 00002808 3C00                <2> 	cmp al, 0
  4423 0000280A 7437                <2> 	je nomorecharmap
  4424 0000280C E80AECFFFF          <2> 	call prcharq
  4425 00002811 B020                <2> 	mov al, " "
  4426 00002813 E803ECFFFF          <2> 	call prcharq
  4427 00002818 6658                <2> 	pop ax
  4428                              <2> charmapcopycheck:
  4429 0000281A FEC4                <2> 	inc ah
  4430 0000281C 80FC10              <2> 	cmp ah, 16
  4431 0000281F 72CF                <2> 	jb charmapcopy
  4432 00002821 6650                <2> 	push ax
  4433 00002823 BE[993B0000]        <2> 	mov esi, line
  4434 00002828 E813E7FFFF          <2> 	call printquiet
  4435 0000282D 6658                <2> 	pop ax
  4436 0000282F 3CFF                <2> 	cmp al, 255
  4437 00002831 7410                <2> 	je nomorecharmap
  4438 00002833 88C1                <2> 	mov cl, al
  4439 00002835 FEC1                <2> 	inc cl
  4440 00002837 E88DF4FFFF          <2> 	call showhexsmall
  4441 0000283C 30E4                <2> 	xor ah, ah
  4442 0000283E E9ADFFFFFF          <2> 	jmp charmapcopy
  4443                              <2> nomorecharmap:
  4444 00002843 E982EFFFFF          <2> 	jmp nwcmd
  4445                              <2> charmapnocopy:
  4446 00002848 6650                <2> 	push ax
  4447 0000284A B020                <2> 	mov al, " "
  4448 0000284C E8CAEBFFFF          <2> 	call prcharq
  4449 00002851 E8C5EBFFFF          <2> 	call prcharq
  4450 00002856 6658                <2> 	pop ax
  4451 00002858 E9BDFFFFFF          <2> 	jmp charmapcopycheck
  4452                              <1> %include 'source/programs/clear.asm'
  4453 0000285D FF2C636C65617200    <2> db 255,44,"clear",0
  4454 00002865 E851E7FFFF          <2> 		call clear
  4455 0000286A C3                  <2> 		ret 
  4456                              <1> %include 'source/programs/cpuid.asm'
  4457 0000286B FF2C637075696400    <2> db 255,44,"cpuid",0
  4458 00002873 31C0                <2> 	xor eax, eax
  4459 00002875 0FA2                <2> 	cpuid
  4460 00002877 891D[C8280000]      <2> 	mov [cpuidbuf], ebx
  4461 0000287D 8915[CC280000]      <2> 	mov [cpuidbuf + 4], edx
  4462 00002883 890D[D0280000]      <2> 	mov [cpuidbuf + 8], ecx
  4463 00002889 BE[C8280000]        <2> 	mov esi, cpuidbuf
  4464 0000288E E8BFE6FFFF          <2> 	call print
  4465 00002893 BE[993B0000]        <2> 	mov esi, line
  4466 00002898 E8B5E6FFFF          <2> 	call print
  4467 0000289D B801000000          <2> 	mov eax, 1
  4468 000028A2 0FA2                <2> 	cpuid
  4469 000028A4 89C1                <2> 	mov ecx, eax
  4470 000028A6 C605[C81C0000]02    <2> 	mov byte [firsthexshown], 2
  4471 000028AD E82BF4FFFF          <2> 	call showhex
  4472 000028B2 B808000080          <2> 	mov eax, 0x80000008
  4473 000028B7 0FA2                <2> 	cpuid
  4474 000028B9 89C1                <2> 	mov ecx, eax
  4475 000028BB C605[C81C0000]02    <2> 	mov byte [firsthexshown], 2
  4476 000028C2 E816F4FFFF          <2> 	call showhex
  4477 000028C7 C3                  <2> 	ret
  4478                              <2> 	
  4479 000028C8 00<rept>            <2> cpuidbuf times 13 db 0
  4480                              <2> cpuidvendorend:
  4481                              <1> %ifdef network.included
  4482                              <1> 	%include 'source/programs/dhcp.asm'
  4483                              <1> %endif
  4484                              <1> %include 'source/programs/dos.asm'
  4485 000028D5 FF2C646F7300        <2> db 255,44,"dos",0
  4486                              <2> dosrunner:
  4487 000028DB 8925[BA530000]      <2> 	mov [previousstack], esp
  4488 000028E1 8B3D[8F1A0000]      <2> 	mov edi, [currentcommandloc]
  4489 000028E7 81C704000000        <2> 	add edi, 4
  4490 000028ED BE00014000          <2> 	mov esi,  0x100 + dosprogloc	;this should be the beginning of memory
  4491 000028F2 E878110000          <2> 	call loadfile
  4492 000028F7 8B3D[8F1A0000]      <2> 	mov edi, [currentcommandloc]
  4493 000028FD 81C704000000        <2> 	add edi, 4
  4494 00002903 81FA94010000        <2> 	cmp edx, 404
  4495 00002909 0F845E000000        <2> 	je near .noprogfound
  4496 0000290F BB81004000          <2> 	mov ebx, 0x81 + dosprogloc
  4497 00002914 31C9                <2> 	xor ecx, ecx
  4498                              <2> .findparams:
  4499 00002916 47                  <2> 	inc edi
  4500 00002917 8A07                <2> 	mov al, [edi]
  4501 00002919 3C20                <2> 	cmp al, " "
  4502 0000291B 75F9                <2> 	jne .findparams
  4503                              <2> .copyparams:
  4504 0000291D 8A07                <2> 	mov al, [edi]
  4505 0000291F 8803                <2> 	mov [ebx], al
  4506 00002921 43                  <2> 	inc ebx
  4507 00002922 47                  <2> 	inc edi
  4508 00002923 41                  <2> 	inc ecx
  4509 00002924 81FB00014000        <2> 	cmp ebx, 0x100 + dosprogloc
  4510 0000292A 7304                <2> 	jae .nomoreparams
  4511 0000292C 3C00                <2> 	cmp al, 0
  4512 0000292E 75ED                <2> 	jne .copyparams
  4513                              <2> .nomoreparams:
  4514 00002930 880D80004000        <2> 	mov [0x80 + dosprogloc], cl
  4515 00002936 66B85000            <2> 	mov ax, DOS_DATA_SEL
  4516 0000293A 8ED8                <2> 	mov ds, ax
  4517 0000293C 8EC0                <2> 	mov es, ax
  4518 0000293E 8EE0                <2> 	mov fs, ax
  4519 00002940 8EE8                <2> 	mov gs, ax
  4520 00002942 31C0                <2> 	xor eax, eax
  4521 00002944 31DB                <2> 	xor ebx, ebx
  4522 00002946 31C9                <2> 	xor ecx, ecx
  4523 00002948 31D2                <2> 	xor edx, edx
  4524 0000294A 31FF                <2> 	xor edi, edi
  4525 0000294C 31F6                <2> 	xor esi, esi
  4526 0000294E 9A000100004800      <2> 	call DOS_CODE_SEL:0x100
  4527 00002955 66BB3000            <2> 	mov bx, NEW_DATA_SEL
  4528 00002959 6689DA              <2> 	mov dx, bx
  4529 0000295C 8EC3                <2> 	mov es, bx
  4530 0000295E 8EE3                <2> 	mov fs, bx
  4531 00002960 66BB2000            <2> 	mov bx, SYS_DATA_SEL
  4532 00002964 8EEB                <2> 	mov gs, bx
  4533 00002966 8B25[BA530000]      <2> 	mov esp, [previousstack]
  4534 0000296C C3                  <2> 	ret
  4535                              <2> .noprogfound:
  4536 0000296D BE[5E3B0000]        <2> 	mov esi, notfound1
  4537 00002972 E8DBE5FFFF          <2> 	call print
  4538 00002977 8B35[8F1A0000]      <2> 	mov esi, [currentcommandloc]
  4539 0000297D 81C604000000        <2> 	add esi, 4
  4540 00002983 E8CAE5FFFF          <2> 	call print
  4541 00002988 BE[663B0000]        <2> 	mov esi, notfound2
  4542 0000298D E8C0E5FFFF          <2> 	call print
  4543 00002992 C3                  <2> 	ret
  4544                              <2> 	
  4545                              <1> %include 'source/programs/dump.asm'
  4546 00002993 FF2C64756D7000      <2> db 255,44,"dump",0
  4547 0000299A 8B35[8F1A0000]      <2> 	mov esi, [currentcommandloc]
  4548 000029A0 81C605000000        <2> 	add esi, 5
  4549 000029A6 31C9                <2> 	xor ecx, ecx
  4550 000029A8 66B83078            <2> 	mov ax, "0x"
  4551 000029AC 663906              <2> 	cmp [esi], ax
  4552 000029AF 740A                <2> 	je dumphexin
  4553 000029B1 E8D6F4FFFF          <2> 	call cnvrttxt
  4554 000029B6 E910000000          <2> 	jmp dumphexnow
  4555                              <2> dumphexin:
  4556 000029BB 81C602000000        <2> 	add esi, 2
  4557 000029C1 E87AF4FFFF          <2> 	call cnvrthextxt
  4558 000029C6 E900000000          <2> 	jmp dumphexnow
  4559                              <2> dumphexnow:
  4560 000029CB 89CF                <2> 	mov edi, ecx
  4561 000029CD 89FE                <2> 	mov esi, edi
  4562 000029CF 81C680030000        <2> 	add esi, 896
  4563                              <2> dumphexloop:
  4564 000029D5 8B0F                <2> 	mov ecx, [edi]
  4565 000029D7 C605[C81C0000]05    <2> 	mov byte [firsthexshown],5
  4566 000029DE E8FAF2FFFF          <2> 	call showhex
  4567 000029E3 81C704000000        <2> 	add edi, 4
  4568 000029E9 39F7                <2> 	cmp edi, esi
  4569 000029EB 72E8                <2> 	jb dumphexloop
  4570 000029ED E8C8EAFFFF          <2> 	call termcopy
  4571 000029F2 C3                  <2> 	ret 
  4572                              <1> %include 'source/programs/echo.asm'
  4573                              <2> 
  4574 000029F3 FF2C6563686F00      <2> db 255,44,"echo",0
  4575                              <2> 	echoprog:
  4576 000029FA 8B35[8F1A0000]      <2> 		mov esi, [currentcommandloc]
  4577 00002A00 81C605000000        <2> 		add esi, 5
  4578 00002A06 8A06                <2> 		mov al, [esi]
  4579 00002A08 E845E5FFFF          <2> 		call print
  4580 00002A0D BE[993B0000]        <2> 		mov esi, line
  4581 00002A12 E83BE5FFFF          <2> 		call print
  4582 00002A17 C3                  <2> 		ret
  4583 00002A18 BB[3A560000]        <2> 	echovr:	mov ebx, variables
  4584 00002A1D BF06000000          <2> 		mov edi, 6
  4585 00002A22 E83F000000          <2> 		call nxtvrech
  4586 00002A27 E95A000000          <2> 		jmp prntvr2
  4587 00002A2C B13D                <2> 	echvar:	mov cl, '='
  4588 00002A2E 43                  <2> 		inc ebx
  4589 00002A2F 8A03                <2> 		mov al, [ebx]
  4590 00002A31 3C00                <2> 		cmp al, 0
  4591 00002A33 7431                <2> 		je nxtvrech
  4592 00002A35 3C3D                <2> 		cmp al, '='
  4593 00002A37 7422                <2> 		je nxtvrechb1
  4594 00002A39 8B35[8F1A0000]      <2> 		mov esi, [currentcommandloc]
  4595 00002A3F 01FE                <2> 		add esi, edi
  4596 00002A41 E88EF0FFFF          <2> 		call cndtest
  4597 00002A46 3C02                <2> 		cmp al, 2
  4598 00002A48 7438                <2> 		je prntvr
  4599 00002A4A 3C01                <2> 		cmp al, 1
  4600 00002A4C 7434                <2> 		je prntvr
  4601 00002A4E 8B35[8F1A0000]      <2> 		mov esi, [currentcommandloc]
  4602 00002A54 01FE                <2> 		add esi, edi
  4603 00002A56 E90B000000          <2> 		jmp nxtvrech
  4604                              <2> 	nxtvrechb1:
  4605 00002A5B 81EB02000000        <2> 		sub ebx, 2
  4606 00002A61 E9C6FFFFFF          <2> 		jmp echvar
  4607 00002A66 8A03                <2> 	nxtvrech: mov al, [ebx]
  4608 00002A68 3C05                <2> 		cmp al, 5
  4609 00002A6A 740A                <2> 		je nxtvrec2
  4610 00002A6C 43                  <2> 		inc ebx
  4611 00002A6D 81FB[3A660000]      <2> 		cmp ebx, varend
  4612 00002A73 72F1                <2> 		jb nxtvrech
  4613 00002A75 C3                  <2> 		ret
  4614 00002A76 43                  <2> 	nxtvrec2: inc ebx
  4615 00002A77 8A03                <2> 		mov al, [ebx]
  4616 00002A79 3C04                <2> 		cmp al, 4
  4617 00002A7B 74AF                <2> 		je echvar
  4618 00002A7D E9E4FFFFFF          <2> 		jmp nxtvrech
  4619 00002A82 43                  <2> 	prntvr: inc ebx
  4620 00002A83 89DE                <2> 		mov esi, ebx
  4621 00002A85 C3                  <2> 		ret
  4622 00002A86 E8C7E4FFFF          <2> 	prntvr2: call print
  4623 00002A8B BE[993B0000]        <2> 		mov esi, line
  4624 00002A90 E8BDE4FFFF          <2> 		call print
  4625 00002A95 C3                  <2> 		ret 
  4626                              <1> %include 'source/programs/else.asm'
  4627 00002A96 FF2C656C736500      <2> 	db 255,44,"else",0
  4628 00002A9D 31C0                <2> elsecmd:	xor eax, eax
  4629 00002A9F 3805[34560000]      <2> 	cmp [BATCHISON], al
  4630 00002AA5 0F8457FBFFFF        <2> 	je near notbatch
  4631 00002AAB A0[CB550000]        <2> 	mov al, [IFON]
  4632 00002AB0 BE[CC550000]        <2> 	mov esi, IFTRUE
  4633 00002AB5 01C6                <2> 	add esi, eax
  4634 00002AB7 8A06                <2> 	mov al, [esi]
  4635 00002AB9 3401                <2> 	xor al, 1
  4636 00002ABB 8806                <2> 	mov [esi], al
  4637 00002ABD C3                  <2> 	ret 
  4638                              <1> %include 'source/programs/exit.asm'
  4639 00002ABE FF2C6578697400      <2> db 255,44,"exit",0
  4640 00002AC5 803D[CA550000]01    <2> 	cmp byte [ranboot], 1
  4641 00002ACC 0F8486ECFFFF        <2> 	je near returnfromexp
  4642 00002AD2 E962EBFFFF          <2> 	jmp nobootfile
  4643                              <1> %include 'source/programs/fi.asm'
  4644 00002AD7 FF2C666900          <2> 	db 255,44,"fi",0
  4645 00002ADC 30C0                <2> 	xor al, al
  4646 00002ADE 3805[34560000]      <2> 	cmp [BATCHISON], al
  4647 00002AE4 0F8418FBFFFF        <2> 	je near notbatch
  4648 00002AEA B001                <2> fi:	mov al, 1
  4649 00002AEC 2805[CB550000]      <2> 	sub [IFON],al
  4650 00002AF2 C3                  <2> 	ret 
  4651                              <1> %ifdef gui.included
  4652                              <1> 	%include 'source/programs/gui.asm'
  4653                              <1> %endif
  4654                              <1> %include 'source/programs/help.asm'
  4655 00002AF3 FF2C68656C7000      <2> db 255,44,"help",0
  4656                              <2> lscmd:	
  4657 00002AFA B00D                <2> 		mov al, 13
  4658 00002AFC E81AE9FFFF          <2> 		call prcharq
  4659 00002B01 BE[181F0000]        <2> 		mov esi, progstart
  4660 00002B06 BB[F7340000]        <2> 		mov ebx, progend
  4661 00002B0B BE[BA4F0000]        <2> dir:	mov esi, fileindex
  4662 00002B10 8A06                <2> 	dirnxt:	mov al, [esi]
  4663 00002B12 30E4                <2> 		xor ah, ah
  4664 00002B14 3CFF                <2> 		cmp al, 255
  4665 00002B16 7418                <2> 		je dirfnd
  4666 00002B18 46                  <2> 		inc esi
  4667 00002B19 81FE[BA530000]      <2> 		cmp esi,  fileindexend
  4668 00002B1F 7342                <2> 		jae dirdn
  4669 00002B21 E9EAFFFFFF          <2> 		jmp dirnxt
  4670                              <2> 	dirfnd3:
  4671 00002B26 46                  <2> 		inc esi
  4672 00002B27 81FE[BA530000]      <2> 		cmp esi, fileindexend
  4673 00002B2D 76E1                <2> 		jbe dirnxt
  4674 00002B2F 4E                  <2> 		dec esi
  4675 00002B30 46                  <2> 	dirfnd:	inc esi
  4676 00002B31 8A06                <2> 		mov al, [esi]
  4677 00002B33 30E4                <2> 		xor ah, ah
  4678 00002B35 3C2C                <2> 		cmp al, 44
  4679 00002B37 740E                <2> 		je dirfnd2
  4680 00002B39 46                  <2> 		inc esi
  4681 00002B3A 81FE[BA530000]      <2> 		cmp esi,  fileindexend
  4682 00002B40 7321                <2> 		jae dirdn
  4683 00002B42 E9C9FFFFFF          <2> 		jmp dirnxt
  4684 00002B47 46                  <2> 	dirfnd2: inc esi
  4685 00002B48 E8F3E3FFFF          <2> 		call printquiet
  4686 00002B4D 56                  <2> 		push esi
  4687 00002B4E B009                <2> 		mov al, 9
  4688 00002B50 E8C6E8FFFF          <2> 		call prcharq
  4689 00002B55 5E                  <2> 		pop esi
  4690 00002B56 81FE[BA530000]      <2> 		cmp esi,  fileindexend
  4691 00002B5C 7305                <2> 		jae dirdn
  4692 00002B5E E9ADFFFFFF          <2> 		jmp dirnxt
  4693 00002B63 BE[993B0000]        <2> 	dirdn:	mov esi, line
  4694 00002B68 E8E5E3FFFF          <2> 			call print
  4695 00002B6D C3                  <2> 			ret
  4696 00002B6E 00                  <2> currentdir db 0
  4697                              <1> %include 'source/programs/if.asm'
  4698 00002B6F FF2C696600          <2> 	db 255,44,"if",0
  4699 00002B74 30C0                <2> ifcmd:	xor al, al
  4700 00002B76 3805[34560000]      <2> 	cmp [BATCHISON], al
  4701 00002B7C 0F8480FAFFFF        <2> 	je near notbatch
  4702 00002B82 8B1D[8F1A0000]      <2> 	mov ebx, [currentcommandloc]
  4703 00002B88 81C303000000        <2> 	add ebx, 3
  4704 00002B8E 89DE                <2> 	mov esi, ebx
  4705 00002B90 8A06                <2> chkeqsn: mov al, [esi]
  4706 00002B92 3C00                <2> 	cmp al, 0
  4707 00002B94 0F8468FAFFFF        <2> 	je near notbatch
  4708 00002B9A 3C3D                <2> 	cmp al, '='
  4709 00002B9C 0F8406000000        <2> 	je near chkeqdn
  4710 00002BA2 46                  <2> 	inc esi
  4711 00002BA3 E9E8FFFFFF          <2> 	jmp chkeqsn
  4712 00002BA8 B000                <2> chkeqdn: mov al, 0 
  4713 00002BAA 8806                <2> 	mov [esi], al
  4714 00002BAC 46                  <2> 	inc esi
  4715 00002BAD E8E1EEFFFF          <2> 	call tester
  4716 00002BB2 3C01                <2> 	cmp al, 1
  4717 00002BB4 0F8405000000        <2> 	je near trueif
  4718 00002BBA E91C000000          <2> 	jmp falseif
  4719 00002BBF 31C0                <2> trueif:	xor eax, eax
  4720 00002BC1 A0[CB550000]        <2> 	mov al, [IFON]
  4721 00002BC6 FEC0                <2> 	inc al
  4722 00002BC8 A2[CB550000]        <2> 	mov [IFON], al
  4723 00002BCD 30E4                <2> 	xor ah, ah
  4724 00002BCF BE[CC550000]        <2> 	mov esi, IFTRUE
  4725 00002BD4 01C6                <2> 	add esi, eax
  4726 00002BD6 B401                <2> 	mov ah, 1
  4727 00002BD8 8826                <2> 	mov [esi], ah
  4728 00002BDA C3                  <2> 	ret 
  4729 00002BDB 31C0                <2> falseif: xor eax, eax
  4730 00002BDD A0[CB550000]        <2> 	mov al, [IFON]
  4731 00002BE2 FEC0                <2> 	inc al
  4732 00002BE4 A2[CB550000]        <2> 	mov [IFON], al
  4733 00002BE9 30E4                <2> 	xor ah, ah
  4734 00002BEB BE[CC550000]        <2> 	mov esi, IFTRUE
  4735 00002BF0 01C6                <2> 	add esi, eax
  4736 00002BF2 30E4                <2> 	xor ah, ah
  4737 00002BF4 8826                <2> 	mov [esi], ah
  4738 00002BF6 C3                  <2> 	ret 
  4739                              <1> %ifdef network.included
  4740                              <1> 	%include 'source/programs/ipconfig.asm'
  4741                              <1> %endif
  4742                              <1> %include 'source/programs/keycode.asm'
  4743 00002BF7 FF2C6B6579636F6465- <2> db 255,44,"keycode",0
  4744 00002C00 00                  <2>
  4745                              <2> keycode:
  4746 00002C01 C605[0E140000]00    <2> 	mov byte [trans], 0
  4747 00002C08 C605[513B0000]00    <2> 	mov byte [threadson], 0
  4748                              <2> %ifdef io.serial
  4749                              <2> .noserial:
  4750 00002C0F F4                  <2> 	hlt
  4751 00002C10 668B15[AB360000]    <2> 	mov dx, [serial.address]
  4752 00002C17 EC                  <2> 	in al, dx
  4753 00002C18 3C00                <2> 	cmp al, 0
  4754 00002C1A 74F3                <2> 	je .noserial
  4755 00002C1C 88C1                <2> 	mov cl, al
  4756 00002C1E E8A6F0FFFF          <2> 	call showhexsmall
  4757 00002C23 3C1B                <2> 	cmp al, 0x1B
  4758 00002C25 75E8                <2> 	jne .noserial
  4759 00002C27 EC                  <2> 	in al, dx
  4760 00002C28 88C1                <2> 	mov cl, al
  4761 00002C2A E89AF0FFFF          <2> 	call showhexsmall
  4762 00002C2F 80F95B              <2> 	cmp cl, 0x5B
  4763 00002C32 74DB                <2> 	je .noserial
  4764 00002C34 C3                  <2> 	ret
  4765                              <2> %else
  4766                              <2> 	call getkey
  4767                              <2> 	xor eax, eax
  4768                              <2> 	xor ecx, ecx
  4769                              <2> 	mov cl, [specialkey]
  4770                              <2> 	cmp cl, 0
  4771                              <2> 	je near .nospecialkeycode
  4772                              <2> 	call showhexsmall
  4773                              <2> .nospecialkeycode:
  4774                              <2> 	mov ax, [lastkey]
  4775                              <2> 	mov cl, ah
  4776                              <2> 	call showhexsmall
  4777                              <2> 	cmp ah, 1
  4778                              <2> 	jne keycode
  4779                              <2> 	ret
  4780                              <2> %endif
  4781                              <1> %ifdef gui.included
  4782                              <1> 	%include 'source/programs/line.asm'
  4783                              <1> %endif
  4784                              <1> %include 'source/programs/logout.asm'
  4785 00002C35 FF2C6C6F676F757400  <2> 	db 255,44,"logout",0
  4786 00002C3E E9B3E9FFFF          <2> 	jmp os
  4787                              <1> %include 'source/programs/loop.asm'
  4788 00002C43 FF2C6C6F6F7000      <2> 	db 255,44,"loop",0
  4789 00002C4A 803D[35560000]00    <2> 	cmp byte [LOOPON], 0
  4790 00002C51 0F8501000000        <2> 	jne near filoop
  4791 00002C57 C3                  <2> 	ret
  4792 00002C58 8B35[36560000]      <2> filoop: mov esi, [LOOPPOS]
  4793 00002C5E FE0D[CB550000]      <2> 	dec byte [IFON]
  4794 00002C64 C605[35560000]00    <2> 	mov byte [LOOPON], 0
  4795 00002C6B 8935[30560000]      <2> 	mov [BATCHPOS], esi
  4796 00002C71 8935[27250000]      <2> 	mov [batchedi], esi
  4797 00002C77 C3                  <2> 	ret 
  4798                              <1> %include 'source/programs/ls.asm'
  4799 00002C78 FF2C6C7300          <2> db 255,44,"ls",0
  4800 00002C7D BE[BE3B0000]        <2> 		mov esi, diskfileindex
  4801                              <2> 	diskindexdir:
  4802 00002C82 803E5F              <2> 		cmp byte [esi], '_'
  4803 00002C85 7440                <2> 		je nextdiskindexdir
  4804 00002C87 E8B4E2FFFF          <2> 		call printquiet
  4805 00002C8C 56                  <2> 		push esi
  4806 00002C8D BE[E72C0000]        <2> 		mov esi, disktab
  4807 00002C92 E8A9E2FFFF          <2> 		call printquiet
  4808 00002C97 5E                  <2> 		pop esi
  4809 00002C98 8B4E05              <2> 		mov ecx, [esi + 5]
  4810 00002C9B C605[C81C0000]05    <2> 		mov byte [firsthexshown], 5
  4811 00002CA2 E800F1FFFF          <2> 		call showdec
  4812 00002CA7 56                  <2> 		push esi
  4813 00002CA8 BE[993B0000]        <2> 		mov esi, line
  4814 00002CAD E88EE2FFFF          <2> 		call printquiet
  4815 00002CB2 5E                  <2> 		pop esi
  4816 00002CB3 81C609000000        <2> 		add esi, 9
  4817 00002CB9 81FE[733D0000]      <2> 		cmp esi, enddiskfileindex
  4818 00002CBF 72C1                <2> 		jb diskindexdir
  4819 00002CC1 E8F4E7FFFF          <2> 		call termcopy
  4820 00002CC6 C3                  <2> 		ret
  4821                              <2> 	nextdiskindexdir:
  4822 00002CC7 46                  <2> 		inc esi
  4823 00002CC8 803E00              <2> 		cmp byte [esi], 0
  4824 00002CCB 75FA                <2> 		jne nextdiskindexdir
  4825 00002CCD 81C609000000        <2> 		add esi, 9
  4826 00002CD3 81FE[733D0000]      <2> 		cmp esi, enddiskfileindex
  4827 00002CD9 72A7                <2> 		jb diskindexdir
  4828 00002CDB E8DAE7FFFF          <2> 		call termcopy
  4829 00002CE0 C3                  <2> 		ret
  4830                              <2> 		
  4831 00002CE1 4469736B2000        <2> 		diskmsg db "Disk ",0
  4832 00002CE7 0D09090900          <2> 		disktab db 13,9,9,9,0
  4833                              <1> %include 'source/programs/memory.asm'
  4834 00002CEC FF2C6D656D6F727900  <2> db 255,44,"memory",0
  4835 00002CF5 BE[7A3D0000]        <2> 	mov esi, memlistbuf
  4836 00002CFA 31FF                <2> 	xor edi, edi
  4837 00002CFC 668B3D[BA3F0000]    <2> 	mov di, [memlistend]
  4838 00002D03 01F7                <2> 	add edi, esi
  4839                              <2> printmemmap:
  4840 00002D05 8B0E                <2> 	mov ecx, [esi]
  4841 00002D07 E8D1EFFFFF          <2> 	call showhex
  4842 00002D0C 81C608000000        <2> 	add esi, 8
  4843 00002D12 8B0E                <2> 	mov ecx, [esi]
  4844 00002D14 E8C4EFFFFF          <2> 	call showhex
  4845 00002D19 81C608000000        <2> 	add esi, 8
  4846 00002D1F 8B0E                <2> 	mov ecx, [esi]
  4847 00002D21 E8B7EFFFFF          <2> 	call showhex
  4848 00002D26 81C608000000        <2> 	add esi, 8
  4849 00002D2C 57                  <2> 	push edi
  4850 00002D2D 56                  <2> 	push esi
  4851 00002D2E BE[993B0000]        <2> 	mov esi, line
  4852 00002D33 E81AE2FFFF          <2> 	call print
  4853 00002D38 5E                  <2> 	pop esi
  4854 00002D39 5F                  <2> 	pop edi
  4855 00002D3A 39FE                <2> 	cmp esi, edi
  4856 00002D3C 72C7                <2> 	jb printmemmap
  4857 00002D3E C3                  <2> 	ret
  4858                              <2> 	
  4859                              <1> %include 'source/programs/pci.asm'
  4860 00002D3F FF2C70636900        <2> db 255,44,"pci",0
  4861 00002D45 E8500A0000          <2> 	call pcidump
  4862 00002D4A C3                  <2> 	ret 
  4863                              <1> %ifdef network.included
  4864                              <1> 	%include 'source/programs/ping.asm'
  4865                              <1> %endif
  4866                              <1> %include 'source/programs/play.asm'
  4867 00002D4B FF2C706C61796100    <2> db 255,44,"playa",0
  4868 00002D53 8B3D[8F1A0000]      <2> 	mov edi, [currentcommandloc]
  4869 00002D59 81C706000000        <2> 	add edi, 6
  4870 00002D5F E827000000          <2> 	call playasync
  4871 00002D64 C3                  <2> 	ret
  4872 00002D65 FF2C706C617900      <2> db 255,44,"play",0
  4873                              <2> play:
  4874 00002D6C 8B3D[8F1A0000]      <2> 	mov edi, [currentcommandloc]
  4875 00002D72 81C705000000        <2> 	add edi, 5
  4876 00002D78 E80E000000          <2> 	call playasync
  4877                              <2> .waitforsound:
  4878                              <2> %ifdef sound.included
  4879                              <2> 	mov eax, [Length0]
  4880                              <2> 	or ax, [Length1]
  4881                              <2> %endif
  4882 00002D7D 0A05[71020000]      <2> 	or al, [soundon]
  4883 00002D83 3D00000000          <2> 	cmp eax, 0
  4884 00002D88 75F3                <2> 	jne .waitforsound
  4885 00002D8A C3                  <2> 	ret
  4886                              <2> playasync:
  4887 00002D8B BE0000C000          <2> 	mov esi, 0xC00000
  4888 00002D90 E8DA0C0000          <2> 	call loadfile
  4889 00002D95 81FA94010000        <2> 	cmp edx, 404
  4890 00002D9B 743F                <2> 	je nosoundfound
  4891 00002D9D BB0000C000          <2> 	mov ebx, 0xC00000
  4892 00002DA2 817B0857415645      <2> 	cmp dword [ebx + 8], "WAVE"
  4893 00002DA9 0F845A000000        <2> 	je near wave_player
  4894 00002DAF 66813B534E          <2> 	cmp word [ebx], "SN"
  4895 00002DB4 7526                <2> 	jne nosoundfound
  4896 00002DB6 81C306000000        <2> 	add ebx, 6
  4897 00002DBC 891D[74020000]      <2> 	mov [soundpos], ebx
  4898 00002DC2 035BFC              <2> 	add ebx, [ebx - 4]
  4899 00002DC5 891D[78020000]      <2> 	mov [soundendpos], ebx
  4900 00002DCB 66C705[72020000]00- <2> 	mov word [soundrepititions], 0
  4901 00002DD3 00                  <2>
  4902 00002DD4 C605[71020000]01    <2> 	mov byte [soundon], 1
  4903 00002DDB C3                  <2> 	ret
  4904                              <2> nosoundfound:
  4905 00002DDC BE[022E0000]        <2> 	mov esi, notfoundsound
  4906 00002DE1 E86CE1FFFF          <2> 	call print
  4907 00002DE6 8B35[8F1A0000]      <2> 	mov esi, [currentcommandloc]
  4908 00002DEC 81C605000000        <2> 	add esi, 5
  4909 00002DF2 E85BE1FFFF          <2> 	call print
  4910 00002DF7 BE[663B0000]        <2> 	mov esi, notfound2
  4911 00002DFC E851E1FFFF          <2> 	call print
  4912 00002E01 C3                  <2> 	ret
  4913 00002E02 706C61793A2000      <2> notfoundsound db "play: ",0
  4914                              <2> 
  4915                              <2> %ifdef sound.included
  4916                              <2> sbplay:
  4917                              <2> 		mov esi, 0xC00000
  4918                              <2> 		mov ebx, esi
  4919                              <2> 		add esi, WAVSTART
  4920                              <2> 		sub edi, esi
  4921                              <2> 		mov [Length1], di
  4922                              <2> 		shr edi, 15
  4923                              <2> 		mov [Length0], edi
  4924                              <2> 		mov ecx, [ebx + 24]
  4925                              <2> 		mov [Freq], ecx
  4926                              <2> 		xor eax, eax
  4927                              <2> 		mov	edx, 0xC00000 ;physical location of sound
  4928                              <2> 		add edx, WAVSTART
  4929                              <2> 		add	eax, edx
  4930                              <2> 		mov esi, eax
  4931                              <2> 		xor ecx, ecx
  4932                              <2> 		xor ebx, ebx
  4933                              <2> 		mov [SegLoc], bx
  4934                              <2> 		add ebx, 0x80000
  4935                              <2> 		mov cx, 0xFFFF
  4936                              <2> 		cmp di, 0
  4937                              <2> 		jne .autoinit
  4938                              <2> 		mov cx, [Length1]
  4939                              <2> 		mov byte [OddLength], 1
  4940                              <2> 		cmp cx, 32768
  4941                              <2> 		jae .autoinit
  4942                              <2> 		mov byte [OddLength], 0
  4943                              <2> 		shl cx, 1
  4944                              <2> 		inc edi
  4945                              <2> .autoinit:
  4946                              <2> 		dec edi
  4947                              <2> 		mov [Length0], edi
  4948                              <2> 		mov [Length1], cx
  4949                              <2> 		shr cx, 1
  4950                              <2> 		inc cx
  4951                              <2> 		add eax, ecx
  4952                              <2> 		mov [NextMemLoc], eax
  4953                              <2> 		mov	[MemLoc], esi
  4954                              <2> 		call DMACopy
  4955                              <2> 		xor ebx, ebx
  4956                              <2> 		mov bx, [SegLoc]
  4957                              <2> 		xor ecx, ecx
  4958                              <2> 		mov cx, [Length1]
  4959                              <2> 		shr cx, 1
  4960                              <2> 		inc cx
  4961                              <2> 		add ebx, ecx
  4962                              <2> 		mov [SegLoc], bx
  4963                              <2> 		add ebx, 0x80000
  4964                              <2> 		mov esi, [NextMemLoc]
  4965                              <2> 		mov eax, esi
  4966                              <2> 		add eax, ecx
  4967                              <2> 		mov [NextMemLoc], eax
  4968                              <2> 		mov	[MemLoc], esi
  4969                              <2> 		call DMACopy
  4970                              <2> 		call DMAPlay
  4971                              <2> 		call PlayDSP
  4972                              <2> 		ret
  4973                              <2> WAVSTART equ 64;44
  4974                              <2> wave_player:
  4975                              <2> 	cmp byte [SoundBlaster], 1
  4976                              <2> 	je near sbplay
  4977                              <2> 	mov esi, nosoundblaster
  4978                              <2> 	call print
  4979                              <2> 	ret
  4980                              <2> %else
  4981                              <2> 	wave_player:
  4982 00002E09 BE[142E0000]        <2> 		mov esi, nosoundblaster
  4983 00002E0E E83FE1FFFF          <2> 		call print
  4984 00002E13 C3                  <2> 		ret
  4985                              <2> %endif
  4986 00002E14 4E6F20536F756E6420- <2> nosoundblaster db "No Sound Blaster detected.",10,0
  4987 00002E1D 426C61737465722064- <2>
  4988 00002E26 657465637465642E0A- <2>
  4989 00002E2F 00                  <2>
  4990                              <1> %include 'source/programs/pwd.asm'
  4991 00002E30 FF2C70776400        <2> db 255,44,"pwd",0
  4992 00002E36 BE[C6530000]        <2> 	mov esi, currentfolder
  4993 00002E3B E800E1FFFF          <2> 	call printquiet
  4994 00002E40 BE[993B0000]        <2> 	mov esi, line
  4995 00002E45 E808E1FFFF          <2> 	call print
  4996 00002E4A C3                  <2> 	ret
  4997                              <2> 	
  4998                              <1> %include 'source/programs/reboot.asm'
  4999 00002E4B FF2C7265626F6F7400  <2> 	db 255,44,"reboot",0
  5000 00002E54 0F011D[5E2E0000]    <2> 		lidt [idtreboot]
  5001 00002E5B CD00                <2> 		int 0
  5002 00002E5D F4                  <2> 		hlt
  5003                              <2> 	
  5004 00002E5E 0000                <2> 	idtreboot dw 0
  5005 00002E60 00000000            <2> 			  dd 0
  5006                              <2> 
  5007                              <2> 	coldboot:
  5008 00002E64 66B84000            <2> 		MOV AX, 0040h
  5009 00002E68 8EC0                <2> 		MOV ES, AX
  5010 00002E6A 2666C7057200000000- <2> 		MOV WORD [ES:00072h], 0h
  5011 00002E73 00                  <2>
  5012 00002E74 EA00000000FFFF      <2> 		JMP 0FFFFh:0000h
  5013 00002E7B CF                  <2> 		IRET
  5014                              <2> 
  5015                              <2> 	warmboot:
  5016 00002E7C 66B84000            <2> 		MOV AX, 0040h
  5017 00002E80 8EC0                <2> 		MOV ES, AX
  5018 00002E82 2666C7057200000034- <2> 		MOV WORD [ES:00072h], 01234h
  5019 00002E8B 12                  <2>
  5020 00002E8C EA00000000FFFF      <2> 		JMP 0FFFFh:0000h
  5021 00002E93 CF                  <2> 		IRET
  5022                              <2> 		
  5023                              <1> %include 'source/programs/reg.asm'
  5024 00002E94 FF2C72656700        <2> db 255,44,"reg",0
  5025 00002E9A CD03                <2> 	int 3
  5026 00002E9C C3                  <2> 	ret 
  5027                              <1> %include 'source/programs/show.asm'
  5028 00002E9D FF2C73686F7700      <2> db 255,44,"show",0
  5029 00002EA4 8B3D[8F1A0000]      <2> 		mov edi, [currentcommandloc]
  5030 00002EAA 81C705000000        <2> 		add edi, 5
  5031 00002EB0 BE00008000          <2> 		mov esi, 0x800000
  5032 00002EB5 E8B50B0000          <2> 		call loadfile
  5033 00002EBA 81FA94010000        <2> 		cmp edx, 404
  5034 00002EC0 0F8415000000        <2> 		je near filenotfound
  5035 00002EC6 BE00008000          <2> 		mov esi, 0x800000
  5036                              <2> %ifdef gui.included
  5037                              <2> 		cmp word [esi], "BM"
  5038                              <2> 		je bmpfound
  5039                              <2> %endif
  5040 00002ECB E882E0FFFF          <2> 		call print
  5041 00002ED0 BE[993B0000]        <2> 		mov esi, line
  5042 00002ED5 E878E0FFFF          <2> 		call print
  5043 00002EDA C3                  <2> 		ret
  5044                              <2> %ifdef gui.included
  5045                              <2> bmpfound:
  5046                              <2> 		cmp byte [guion], 0
  5047                              <2> 		je near noguibmp
  5048                              <2> 		mov esi, 0x800000
  5049                              <2> 		xor ecx, ecx
  5050                              <2> 		xor edx, edx
  5051                              <2> 		xor eax, eax
  5052                              <2> 		xor ebx, ebx
  5053                              <2> 		call showbmp
  5054                              <2> 		xor al, al
  5055                              <2> 		mov ah, 5
  5056                              <2> 		int 30h
  5057                              <2> 		call guiclear
  5058                              <2> 		call clearmousecursor
  5059                              <2> 		call reloadallgraphics
  5060                              <2> 		ret
  5061                              <2> noguibmp:
  5062                              <2> 		mov esi, warnguimsg
  5063                              <2> 		call print
  5064                              <2> 		ret
  5065                              <2> warnguimsg db "This can not be done without the GUI.",10,0
  5066                              <2> %endif
  5067                              <2> 
  5068                              <2> filenotfound:
  5069 00002EDB BE[0E2F0000]        <2> 		mov esi, filenf
  5070 00002EE0 E86DE0FFFF          <2> 		call print
  5071 00002EE5 8B35[8F1A0000]      <2> 		mov esi, [currentcommandloc]
  5072                              <2> findfilenotfoundzero:
  5073 00002EEB 8A06                <2> 		mov al, [esi]
  5074 00002EED 46                  <2> 		inc esi
  5075 00002EEE 3C00                <2> 		cmp al, 0
  5076 00002EF0 7411                <2> 		je nofilenamenotfound
  5077 00002EF2 81FE[3A6E0000]      <2> 		cmp esi, buftxtend
  5078 00002EF8 7309                <2> 		jae nofilenamenotfound
  5079 00002EFA 3C20                <2> 		cmp al, " "
  5080 00002EFC 75ED                <2> 		jne findfilenotfoundzero
  5081 00002EFE E84FE0FFFF          <2> 		call print
  5082                              <2> nofilenamenotfound:
  5083 00002F03 BE[192F0000]        <2> 		mov esi, filenf2
  5084 00002F08 E845E0FFFF          <2> 		call print
  5085 00002F0D C3                  <2> 		ret
  5086 00002F0E 5468652066696C6520- <2> filenf db "The file ",34,0
  5087 00002F17 2200                <2>
  5088 00002F19 2220636F756C64206E- <2> filenf2 db 34," could not be found.",10,0
  5089 00002F22 6F7420626520666F75- <2>
  5090 00002F2B 6E642E0A00          <2>
  5091                              <1> %include 'source/programs/shush.asm'
  5092 00002F30 FF2C736875736800    <2> db 255,44,"shush",0	;if you add 2 values it will switch size using the first as X in chars and the second as Y in chars
  5093                              <2> shushprog:
  5094                              <2> %ifdef gui.included
  5095                              <2> 	cmp byte [guion], 0
  5096                              <2> 	je near .noswitchsize
  5097                              <2> 	mov esi, [currentcommandloc]
  5098                              <2> 	add esi, 6
  5099                              <2> 	push esi
  5100                              <2> 	dec esi
  5101                              <2> .findspace:
  5102                              <2> 	inc esi
  5103                              <2> 	mov al, [esi]
  5104                              <2> 	cmp al, 0
  5105                              <2> 	je near .noswitchsize
  5106                              <2> 	cmp al, "X"
  5107                              <2> 	je .donefind
  5108                              <2> 	cmp al, "x"
  5109                              <2> 	je .donefind
  5110                              <2> 	cmp al, " "
  5111                              <2> 	jne .findspace
  5112                              <2> .donefind:
  5113                              <2> 	xor al, al
  5114                              <2> 	mov [esi], al
  5115                              <2> 	inc esi
  5116                              <2> 	mov edi, esi
  5117                              <2> 	call cnvrttxt
  5118                              <2> 	mov eax, ecx
  5119                              <2> 	pop esi
  5120                              <2> 	push eax
  5121                              <2> 	mov edi, esi
  5122                              <2> 	call cnvrttxt
  5123                              <2> 	mov ebx, ecx
  5124                              <2> 	pop eax	
  5125                              <2> 	cmp bx, 0
  5126                              <2> 	je near .noswitchsize
  5127                              <2> 	cmp ax, 0
  5128                              <2> 	je near .noswitchsize
  5129                              <2> 	shl bx, 3
  5130                              <2> 	shl ax, 4
  5131                              <2> 	cmp bx, [resolutionx]
  5132                              <2> 	jbe .nofixx
  5133                              <2> 	mov bx, [resolutionx]
  5134                              <2> .nofixx:
  5135                              <2> 	add ax, 16
  5136                              <2> 	cmp ax, [resolutiony]
  5137                              <2> 	jbe .nofixy
  5138                              <2> 	mov ax, [resolutiony]
  5139                              <2> .nofixy:
  5140                              <2> 	sub ax, 16
  5141                              <2> 	xor cx, cx
  5142                              <2> 	xor dx, dx
  5143                              <2> 	mov [termwindow], bx
  5144                              <2> 	mov [termwindow + 2], ax	;the previous lines of code make a large terminal window that is 4 characters smaller than the screen
  5145                              <2> 	mov esi, termwindow
  5146                              <2> 	xor ebx, ebx
  5147                              <2> 	xor ax, ax
  5148                              <2> 	call showwindow
  5149                              <2> 	call guiclear
  5150                              <2> 	call clear
  5151                              <2> 	call reloadallgraphics
  5152                              <2> .noswitchsize:
  5153                              <2> %endif
  5154 00002F38 BE[432F0000]        <2> 	mov esi, shushmsg
  5155 00002F3D E810E0FFFF          <2> 	call print
  5156 00002F42 C3                  <2> 	ret
  5157 00002F43 57656C636F6D652074- <2> 	shushmsg db "Welcome to the SollerOS Hardly Unix-Compatible Shell!",10,0
  5158 00002F4C 6F2074686520536F6C- <2>
  5159 00002F55 6C65724F5320486172- <2>
  5160 00002F5E 646C7920556E69782D- <2>
  5161 00002F67 436F6D70617469626C- <2>
  5162 00002F70 65205368656C6C210A- <2>
  5163 00002F79 00                  <2>
  5164                              <1> %include 'source/programs/system.asm'
  5165 00002F7A FF2C73797374656D00  <2> 	db 255,44,"system",0
  5166 00002F83 BE[83300000]        <2> 	mov esi, kernelinfomsg
  5167 00002F88 E8B3DFFFFF          <2> 	call printquiet
  5168 00002F8D B9[BE3B0000]        <2> 	mov ecx, osend
  5169 00002F92 E810EEFFFF          <2> 	call showdec
  5170 00002F97 BE[98300000]        <2> 	mov esi, diskbytemsg
  5171 00002F9C E89FDFFFFF          <2> 	call printquiet
  5172 00002FA1 B9[BE3B0000]        <2> 	mov ecx, osend
  5173 00002FA6 81C1[5F7E0000]      <2> 	add ecx, commandbufend
  5174 00002FAC 81E9[743D0000]      <2> 	sub ecx, bssstart	;add the extra buffer space
  5175 00002FB2 E8F0EDFFFF          <2> 	call showdec
  5176 00002FB7 BE[AF300000]        <2> 	mov esi, membytemsg
  5177 00002FBC E87FDFFFFF          <2> 	call printquiet
  5178 00002FC1 BE[FA300000]        <2> 	mov esi, endofmemmsg
  5179 00002FC6 E875DFFFFF          <2> 	call printquiet
  5180 00002FCB B9[5F7E0000]        <2> 	mov ecx, bssend
  5181 00002FD0 E808EDFFFF          <2> 	call showhex
  5182 00002FD5 BE[C8300000]        <2> 	mov esi, systeminfomsg
  5183 00002FDA E861DFFFFF          <2> 	call printquiet
  5184                              <2> getcpuspeed:
  5185 00002FDF B8FE000000          <2> 	mov eax, 0xFE
  5186 00002FE4 E621                <2> 	out 0x21, al ;mask off all but timer interrupt
  5187 00002FE6 B020                <2> 	mov al, 0x20
  5188 00002FE8 E620                <2> 	out 0x20, al
  5189 00002FEA F4                  <2> 	hlt
  5190 00002FEB 0F31                <2> 	rdtsc
  5191 00002FED 89D6                <2> 	mov esi, edx
  5192 00002FEF 89C7                <2> 	mov edi, eax
  5193 00002FF1 31C0                <2> 	xor eax, eax
  5194 00002FF3 C605[52020000]01    <2> 	mov byte [testingcpuspeed], 1
  5195                              <2> cpuspeedloop:	;wait until next timer interrupt, then inc eax until the next
  5196 00002FFA 40                  <2> 	inc eax
  5197 00002FFB E9FAFFFFFF          <2> 	jmp cpuspeedloop
  5198                              <2> cpuspeedloopend:
  5199 00003000 0F31                <2> 	rdtsc
  5200 00003002 29F8                <2> 	sub eax, edi
  5201 00003004 29F2                <2> 	sub edx, esi
  5202 00003006 8915[5B020000]      <2> 	mov [cpuclocksperint + 4], edx
  5203 0000300C A3[57020000]        <2> 	mov [cpuclocksperint], eax
  5204 00003011 31C0                <2> 	xor eax, eax
  5205 00003013 E621                <2> 	out 0x21, al
  5206 00003015 B020                <2> 	mov al, 0x20
  5207 00003017 E620                <2> 	out 0x20, al
  5208 00003019 31D2                <2> 	xor edx, edx
  5209 0000301B 31C0                <2> 	xor eax, eax
  5210 0000301D A1[53020000]        <2> 	mov eax, [cpuspeedperint]
  5211 00003022 D1E0                <2> 	shl eax, 1	;the cpu speed loop actually contains 2 commands so multiply the
  5212                              <2> 				;result by 2
  5213 00003024 8B1D[65020000]      <2> 	mov ebx, [timeinterval]
  5214 0000302A C1EB0A              <2> 	shr ebx, 10 ;divide the interval by 1024
  5215 0000302D F7F3                <2> 	div ebx	;quotient in eax, remainder in edx
  5216 0000302F 89C1                <2> 	mov ecx, eax
  5217 00003031 E871EDFFFF          <2> 	call showdec
  5218 00003036 BE[DE300000]        <2> 	mov esi, cpuspeedmsg
  5219 0000303B E800DFFFFF          <2> 	call printquiet
  5220 00003040 31D2                <2> 	xor edx, edx
  5221 00003042 A1[57020000]        <2> 	mov eax, [cpuclocksperint]
  5222 00003047 8B15[5B020000]      <2> 	mov edx, [cpuclocksperint + 4]
  5223 0000304D 8B1D[65020000]      <2> 	mov ebx, [timeinterval]
  5224 00003053 C1EB0A              <2> 	shr ebx, 10
  5225 00003056 F7F3                <2> 	div ebx
  5226 00003058 89C1                <2> 	mov ecx, eax
  5227 0000305A E848EDFFFF          <2> 	call showdec
  5228 0000305F BE[E4300000]        <2> 	mov esi, cpuclockmsg
  5229 00003064 E8D7DEFFFF          <2> 	call printquiet
  5230 00003069 8B0D[5F020000]      <2> 	mov ecx, [memoryspace]
  5231 0000306F C1E914              <2> 	shr ecx, 20
  5232 00003072 41                  <2> 	inc ecx	;the reading is one MB behind
  5233 00003073 E82FEDFFFF          <2> 	call showdec
  5234 00003078 BE[E9300000]        <2> 	mov esi, memoryspacemsg
  5235 0000307D E8D0DEFFFF          <2> 	call print
  5236                              <2> %ifdef sound.included
  5237                              <2> 	cmp byte [SoundBlaster], 0
  5238                              <2> 	je .nosb
  5239                              <2> 	mov esi, soundblastermsg
  5240                              <2> 	call print
  5241                              <2> .nosb:
  5242                              <2> %endif
  5243 00003082 C3                  <2> 	ret
  5244                              <2> 
  5245 00003083 4B65726E656C20496E- <2> kernelinfomsg db "Kernel Information:",10,0
  5246 0000308C 666F726D6174696F6E- <2>
  5247 00003095 3A0A00              <2>
  5248 00003098 427974657320446973- <2> diskbytemsg db "Bytes Disk Space Used",10,0
  5249 000030A1 6B2053706163652055- <2>
  5250 000030AA 7365640A00          <2>
  5251 000030AF 4279746573204D656D- <2> membytemsg db "Bytes Memory Space Used",10,0
  5252 000030B8 6F7279205370616365- <2>
  5253 000030C1 20557365640A00      <2>
  5254 000030C8 0A53797374656D2049- <2> systeminfomsg db 10,"System Information:",10,0
  5255 000030D1 6E666F726D6174696F- <2>
  5256 000030DA 6E3A0A00            <2>
  5257                              <2> %ifdef sound.included
  5258                              <2> 	soundblastermsg db "Soundblaster Detected.",10,0
  5259                              <2> %endif
  5260 000030DE 4D4950530A00        <2> cpuspeedmsg db "MIPS",10,0
  5261 000030E4 4D487A0A00          <2> cpuclockmsg db "MHz",10,0
  5262 000030E9 4D42204D656D6F7279- <2> memoryspacemsg db "MB Memory Space",10,0
  5263 000030F2 2053706163650A00    <2>
  5264 000030FA 456E64206F66204D65- <2> endofmemmsg: db "End of Memory Space: 0x",0
  5265 00003103 6D6F72792053706163- <2>
  5266 0000310C 653A20307800        <2>
  5267                              <1> %include 'source/programs/time.asm'
  5268 00003112 082E30303030303030- <2> timenscache db 8,".000000000"
  5269 0000311B 3030                <2>
  5270 0000311D 200A00              <2> timenscacheend: db " ",10,0
  5271 00003120 00                  <2> istimeset db 0
  5272 00003121 456E74657220746865- <2> settimemsg db "Enter the current UNIX time:",10,0
  5273 0000312A 2063757272656E7420- <2>
  5274 00003133 554E49582074696D65- <2>
  5275 0000313C 3A0A00              <2>
  5276 0000313F 00<rept>            <2> timeinputbuffer times 12 db 0
  5277 0000314B 00                  <2> timeinputbend: db 0
  5278                              <2> 
  5279 0000314C FF2C74696D6500      <2> db 255,44,"time",0
  5280 00003153 803D[20310000]00    <2> 	cmp byte [istimeset], 0
  5281 0000315A 753A                <2> 	jne timeisset
  5282 0000315C BE[21310000]        <2> 	mov esi, settimemsg
  5283 00003161 E8ECDDFFFF          <2> 	call print
  5284 00003166 BE[3F310000]        <2> 	mov esi, timeinputbuffer
  5285 0000316B BF[4B310000]        <2> 	mov edi, timeinputbend
  5286 00003170 E851DEFFFF          <2> 	call readline
  5287 00003175 BE[3F310000]        <2> 	mov esi, timeinputbuffer
  5288 0000317A 31FF                <2> 	xor edi, edi
  5289 0000317C E80BEDFFFF          <2> 	call cnvrttxt
  5290 00003181 890D[69020000]      <2> 	mov [timeseconds], ecx
  5291 00003187 31C9                <2> 	xor ecx, ecx
  5292 00003189 890D[6D020000]      <2> 	mov [timenanoseconds], ecx
  5293 0000318F C605[20310000]01    <2> 	mov byte [istimeset], 1
  5294                              <2> timeisset:
  5295 00003196 8B0D[69020000]      <2> 	mov ecx, [timeseconds]
  5296 0000319C E806ECFFFF          <2> 	call showdec
  5297                              <2> 	
  5298 000031A1 8B0D[6D020000]      <2> 	mov ecx, [timenanoseconds]
  5299 000031A7 BE[12310000]        <2> 	mov esi, timenscache
  5300 000031AC C7460230303030      <2> 	mov dword [esi+ 2], "0000"
  5301 000031B3 C7460630303030      <2> 	mov dword [esi + 6], "0000"
  5302 000031BA C6460A30            <2> 	mov byte [esi + 10], "0"
  5303 000031BE BE[1D310000]        <2> 	mov esi, timenscacheend
  5304 000031C3 E8ADE9FFFF          <2> 	call convert
  5305 000031C8 BE[12310000]        <2> 	mov esi, timenscache
  5306 000031CD E880DDFFFF          <2> 	call print
  5307                              <2> 	
  5308 000031D2 E80F000000          <2> 	call time
  5309 000031D7 BE[B2330000]        <2> 	mov esi, timeshow
  5310 000031DC E871DDFFFF          <2> 	call print
  5311 000031E1 E9BC000000          <2> 	jmp findday
  5312                              <2> time:
  5313 000031E6 E84F010000          <2> 	call tstackput1
  5314 000031EB B00A                <2> 	mov al,10			;Get RTC register A
  5315 000031ED E879010000          <2> 	call tget1
  5316 000031F2 A880                <2> 	test al,0x80			;Is update in progress?
  5317 000031F4 75F0                <2> 	jne time				; yes, wait
  5318                              <2> 
  5319 000031F6 B000                <2> 	mov al,0			;Get seconds (00 to 59)
  5320 000031F8 E86E010000          <2> 	call tget1
  5321 000031FD A2[A9330000]        <2> 	mov [RTCtimeSecond],al
  5322                              <2> 
  5323 00003202 B002                <2> 	mov al,0x02			;Get minutes (00 to 59)
  5324 00003204 E862010000          <2> 	call tget1
  5325 00003209 A2[AA330000]        <2> 	mov [RTCtimeMinute],al
  5326                              <2> 
  5327 0000320E B004                <2> 	mov al,0x04			;Get hours (see notes)
  5328 00003210 E856010000          <2> 	call tget1
  5329 00003215 A2[AB330000]        <2> 	mov [RTCtimeHour],al
  5330                              <2> 
  5331 0000321A B007                <2> 	mov al,0x07			;Get day of month (01 to 31)
  5332 0000321C E84A010000          <2> 	call tget1
  5333 00003221 A2[AC330000]        <2> 	mov [RTCtimeDay],al
  5334                              <2> 
  5335 00003226 B008                <2> 	mov al,0x08			;Get month (01 to 12)
  5336 00003228 E83E010000          <2> 	call tget1
  5337 0000322D A2[AD330000]        <2> 	mov [RTCtimeMonth],al
  5338                              <2> 
  5339 00003232 B009                <2> 	mov al,0x09			;Get year (00 to 99)
  5340 00003234 E832010000          <2> 	call tget1
  5341 00003239 A2[AE330000]        <2> 	mov [RTCtimeYear],al
  5342                              <2> 	
  5343 0000323E BE[B2330000]        <2> 	mov esi, timeshow
  5344 00003243 8A2D[AB330000]      <2> 	mov ch, [RTCtimeHour]
  5345 00003249 E828010000          <2> 	call tput1
  5346 0000324E 8A2D[AA330000]      <2> 	mov ch, [RTCtimeMinute]
  5347 00003254 E81D010000          <2> 	call tput1
  5348 00003259 8A2D[A9330000]      <2> 	mov ch, [RTCtimeSecond]
  5349 0000325F E812010000          <2> 	call tput1
  5350 00003264 BE[BB330000]        <2> 	mov esi, dateshow
  5351 00003269 8A2D[AD330000]      <2> 	mov ch, [RTCtimeMonth]
  5352 0000326F E802010000          <2> 	call tput1
  5353 00003274 8A2D[AC330000]      <2> 	mov ch, [RTCtimeDay]
  5354 0000327A E8F7000000          <2> 	call tput1
  5355 0000327F B520                <2> 	mov ch, 0x20
  5356 00003281 E8F0000000          <2> 	call tput1
  5357 00003286 4E                  <2> 	dec esi
  5358 00003287 8A2D[AE330000]      <2> 	mov ch, [RTCtimeYear]
  5359 0000328D E8E4000000          <2> 	call tput1
  5360 00003292 E8BD000000          <2> 	call tstackget1
  5361 00003297 C3                  <2> 	ret
  5362 00003298 BE[B2330000]        <2> 	mov esi, timeshow
  5363 0000329D E8B0DCFFFF          <2> 	call print
  5364                              <2> ;;get day of week
  5365                              <2> ;;add these:
  5366                              <2> ;;century value
  5367                              <2> ;;last 2 digits of year
  5368                              <2> ;;last 2 digits of year right shifted twice
  5369                              <2> ;;month table value
  5370                              <2> ;;day of the month
  5371                              <2> ;;divide these by 7
  5372                              <2> ;;the remainder is the day
  5373                              <2> findday:
  5374 000032A2 31C0                <2> 	xor eax, eax
  5375                              <2> ;;first convert the values from BCD to hex
  5376 000032A4 A0[AC330000]        <2> 	mov al, [RTCtimeDay]
  5377 000032A9 E873000000          <2> 	call converttohex
  5378 000032AE 8825[AF330000]      <2> 	mov [dayhex], ah
  5379 000032B4 A0[AD330000]        <2> 	mov al, [RTCtimeMonth]
  5380 000032B9 E863000000          <2> 	call converttohex
  5381 000032BE 8825[B0330000]      <2> 	mov [monthhex], ah
  5382 000032C4 A0[AE330000]        <2> 	mov al, [RTCtimeYear]
  5383 000032C9 E853000000          <2> 	call converttohex
  5384 000032CE 8825[B1330000]      <2> 	mov [yearhex], ah
  5385 000032D4 31C0                <2> 	xor eax, eax
  5386 000032D6 A0[B1330000]        <2> 	mov al, [yearhex]
  5387 000032DB C0E802              <2> 	shr al, 2
  5388 000032DE 0205[B1330000]      <2> 	add al, [yearhex]
  5389 000032E4 0506000000          <2> 	add eax, 6
  5390 000032E9 31DB                <2> 	xor ebx, ebx
  5391 000032EB 8A1D[B0330000]      <2> 	mov bl, [monthhex]
  5392 000032F1 FECB                <2> 	dec bl
  5393 000032F3 81C3[D0330000]      <2> 	add ebx, month
  5394 000032F9 31C9                <2> 	xor ecx, ecx
  5395 000032FB 8A0B                <2> 	mov cl, [ebx]
  5396 000032FD 01C8                <2> 	add eax, ecx
  5397 000032FF 8A0D[AF330000]      <2> 	mov cl, [dayhex]
  5398 00003305 01C8                <2> 	add eax, ecx
  5399 00003307 66BB0700            <2> 	mov bx, 7
  5400 0000330B 31D2                <2> 	xor edx, edx
  5401 0000330D 66F7F3              <2> 	div bx
  5402 00003310 C1E202              <2> 	shl edx, 2
  5403 00003313 81C2[DC330000]      <2> 	add edx, day
  5404 00003319 8B32                <2> 	mov esi, [edx]
  5405 0000331B E832DCFFFF          <2> 	call print
  5406 00003320 C3                  <2> 	ret
  5407                              <2> 	
  5408                              <2> converttohex:
  5409 00003321 88C4                <2> 	mov ah, al
  5410 00003323 C0E804              <2> 	shr al, 4
  5411 00003326 C0E404              <2> 	shl ah, 4
  5412 00003329 C0EC04              <2> 	shr ah, 4
  5413 0000332C 3C00                <2> 	cmp al, 0
  5414 0000332E 7409                <2> 	je noconverttohex
  5415                              <2> converttohexlp:
  5416 00003330 80C40A              <2> 	add ah, 10
  5417 00003333 FEC8                <2> 	dec al
  5418 00003335 3C00                <2> 	cmp al, 0
  5419 00003337 75F7                <2> 	jne converttohexlp
  5420                              <2> noconverttohex:
  5421 00003339 C3                  <2> 	ret
  5422                              <2> 	
  5423                              <2> tstackput1:
  5424 0000333A 8935[A5330000]      <2> 	mov [tstack + 20], esi
  5425 00003340 BE[91330000]        <2> 	mov esi, tstack
  5426 00003345 8906                <2> 	mov [esi], eax
  5427 00003347 895E04              <2> 	mov [esi + 4], ebx
  5428 0000334A 894E08              <2> 	mov [esi + 8], ecx
  5429 0000334D 89560C              <2> 	mov [esi + 12], edx
  5430 00003350 897E10              <2> 	mov [esi + 16], edi
  5431 00003353 C3                  <2> 	ret
  5432                              <2> 	
  5433                              <2> tstackget1:
  5434 00003354 BE[91330000]        <2> 	mov esi, tstack
  5435 00003359 8B06                <2> 	mov eax, [esi]
  5436 0000335B 8B5E04              <2> 	mov ebx, [esi + 4]
  5437 0000335E 8B4E08              <2> 	mov ecx, [esi + 8]
  5438 00003361 8B560C              <2> 	mov edx, [esi + 12]
  5439 00003364 8B7E10              <2> 	mov edi, [esi + 16]
  5440 00003367 8B7614              <2> 	mov esi, [esi + 20]
  5441 0000336A C3                  <2> 	ret
  5442                              <2> 	
  5443                              <2> tget1:
  5444 0000336B 66BA7000            <2> 	mov dx, 0x70
  5445 0000336F EE                  <2> 	out dx, al
  5446 00003370 6642                <2> 	inc dx
  5447 00003372 EC                  <2> 	in al, dx
  5448 00003373 664A                <2> 	dec dx
  5449 00003375 C3                  <2> 	ret
  5450                              <2> 	
  5451                              <2> tput1:
  5452 00003376 66C1E904            <2> 	shr cx, 4
  5453 0000337A B030                <2> 	mov al, 48
  5454 0000337C 00E8                <2> 	add al, ch
  5455 0000337E 8806                <2> 	mov [esi], al
  5456 00003380 46                  <2> 	inc esi
  5457 00003381 B030                <2> 	mov al, 48
  5458 00003383 C0E904              <2> 	shr cl, 4
  5459 00003386 00C8                <2> 	add al, cl
  5460 00003388 8806                <2> 	mov [esi], al
  5461 0000338A 81C602000000        <2> 	add esi, 2
  5462 00003390 C3                  <2> 	ret
  5463                              <2> 		
  5464 00003391 000000000000000000- <2> 	tstack dd 0,0,0,0,0,0
  5465 0000339A 000000000000000000- <2>
  5466 000033A3 000000000000        <2>
  5467 000033A9 00                  <2> 	RTCtimeSecond db 0
  5468 000033AA 00                  <2> 	RTCtimeMinute db 0
  5469 000033AB 00                  <2> 	RTCtimeHour db 0
  5470 000033AC 00                  <2> 	RTCtimeDay db 0
  5471 000033AD 00                  <2> 	RTCtimeMonth db 0
  5472 000033AE 00                  <2> 	RTCtimeYear db 0
  5473 000033AF 00                  <2> 	dayhex db 0
  5474 000033B0 00                  <2> 	monthhex db 0
  5475 000033B1 00                  <2> 	yearhex db 0
  5476 000033B2 30303A30303A30300A  <2> 	timeshow db "00:00:00",10
  5477 000033BB 30302D30302D303030- <2> 	dateshow db "00-00-0000",10,0
  5478 000033C4 300A00              <2>
  5479                              <2> 	oldcentury:	;;from 1700 to 1900
  5480 000033C7 040200              <2> 	db 4,2,0
  5481                              <2> 	century:	;;from 2000 to 2500
  5482 000033CA 060402000604        <2> 	db 6,4,2,0,6,4
  5483                              <2> 	month:
  5484 000033D0 000303060104060205- <2> 	db 0,3,3,6,1,4,6,2,5,0,3,5
  5485 000033D9 000305              <2>
  5486                              <2> 	day:
  5487 000033DC [F8330000]          <2> 	dd sunday
  5488 000033E0 [00340000]          <2> 	dd monday
  5489 000033E4 [08340000]          <2> 	dd tuesday
  5490 000033E8 [11340000]          <2> 	dd wednesday
  5491 000033EC [1C340000]          <2> 	dd thursday
  5492 000033F0 [26340000]          <2> 	dd friday
  5493 000033F4 [2E340000]          <2> 	dd saturday
  5494                              <2> sunday:
  5495 000033F8 53756E6461790A00    <2> 	db "Sunday",10,0
  5496                              <2> monday:
  5497 00003400 4D6F6E6461790A00    <2> 	db "Monday",10,0
  5498                              <2> tuesday:
  5499 00003408 547565736461790A00  <2> 	db "Tuesday",10,0
  5500                              <2> wednesday:
  5501 00003411 5765646E6573646179- <2> 	db "Wednesday",10,0
  5502 0000341A 0A00                <2>
  5503                              <2> thursday:
  5504 0000341C 54687572736461790A- <2> 	db "Thursday",10,0
  5505 00003425 00                  <2>
  5506                              <2> friday:
  5507 00003426 4672696461790A00    <2> 	db "Friday",10,0
  5508                              <2> saturday:
  5509 0000342E 53617475726461790A- <2> 	db "Saturday",10,0
  5510 00003437 00                  <2>
  5511                              <1> %include 'source/programs/turnoff.asm'
  5512 00003438 FF2C7475726E6F6666- <2> 	db 255,44,"turnoff",0
  5513 00003441 00                  <2>
  5514                              <2> 	turnoff:
  5515 00003442 66BB[5D34]          <2> 			mov bx, shutdown
  5516 00003446 66891D[7F0C0000]    <2> 			mov [realmodeptr], bx
  5517 0000344D BB[88340000]        <2> 			mov ebx, halt
  5518 00003452 891D[7B0C0000]      <2> 			mov [realmodereturn], ebx
  5519 00003458 E907D7FFFF          <2> 			jmp realmode
  5520                              <2> 
  5521                              <2> [BITS 16]
  5522                              <2> 		shutdown:
  5523 0000345D B453                <2> 			mov ah, 0x53
  5524 0000345F B004                <2> 			mov al, 4
  5525 00003461 31DB                <2> 			xor bx, bx
  5526 00003463 CD15                <2> 			int 0x15
  5527                              <2> 			
  5528 00003465 B453                <2> 			mov ah, 0x53
  5529 00003467 B001                <2> 			mov al, 1
  5530 00003469 31DB                <2> 			xor bx, bx
  5531 0000346B CD15                <2> 			int 0x15
  5532                              <2> 			
  5533 0000346D B453                <2> 			mov ah, 0x53
  5534 0000346F B008                <2> 			mov al, 8
  5535 00003471 BB0100              <2> 			mov bx, 1
  5536 00003474 B90100              <2> 			mov cx, 1
  5537 00003477 CD15                <2> 			int 0x15
  5538                              <2> 			
  5539 00003479 B453                <2> 			mov ah, 0x53
  5540 0000347B B007                <2> 			mov al, 7
  5541 0000347D BB0100              <2> 			mov bx, 1
  5542 00003480 B90300              <2> 			mov cx, 3
  5543 00003483 CD15                <2> 			int 0x15
  5544 00003485 E9FDFF              <2> 			jmp $
  5545                              <2> 			[BITS 32]
  5546 00003488 E9FBFFFFFF          <2> halt: jmp $
  5547                              <1> %include 'source/programs/wait.asm'
  5548 0000348D FF2C7761697400      <2> db 255,44,"wait",0
  5549                              <2> waitkey:
  5550 00003494 E82CDFFFFF          <2> 		call getchar
  5551 00003499 C3                  <2> 		ret
  5552                              <1> %include 'source/programs/while.asm'
  5553 0000349A FF2C7768696C6500    <2> db 255,44,"while",0
  5554 000034A2 30C0                <2> whilecmd:  xor al, al
  5555 000034A4 3805[34560000]      <2> 	cmp [BATCHISON], al
  5556 000034AA 0F8452F1FFFF        <2> 	je near notbatch
  5557 000034B0 8B35[30560000]      <2> 	mov esi, [BATCHPOS]
  5558 000034B6 81EE02000000        <2> 	sub esi, 2
  5559 000034BC 4E                  <2> whilefnd: dec esi
  5560 000034BD 8A06                <2> 	mov al, [esi]
  5561 000034BF 3C0A                <2> 	cmp al, 10
  5562 000034C1 0F840D000000        <2> 	je near whilefnd2
  5563 000034C7 3C00                <2> 	cmp al, 0
  5564 000034C9 0F8405000000        <2> 	je near whilefnd2
  5565 000034CF E9E8FFFFFF          <2> 	jmp whilefnd
  5566                              <2> whilefnd2:
  5567 000034D4 46                  <2> 	inc esi
  5568 000034D5 8935[36560000]      <2> 	mov [LOOPPOS], esi
  5569 000034DB C605[35560000]01    <2> 	mov BYTE [LOOPON], 1
  5570 000034E2 BE[3A6A0000]        <2> 	mov esi, buftxt
  5571 000034E7 BB[3A6A0000]        <2> 	mov ebx, buftxt
  5572 000034EC 81C306000000        <2> 	add ebx, 6
  5573 000034F2 E999F6FFFF          <2> 	jmp chkeqsn
  5574                              <1> progend:		;programs end here	
  5575                              <1> batchprogend:
  5576                                  	%include "source/hardware.asm"
  5577                              <1> %ifdef gui.included
  5578                              <1> 	%include "source/drivers/video/vesa.asm"
  5579                              <1> 	%include "source/drivers/input/mouse.asm"
  5580                              <1> %endif
  5581                              <1> %include "source/drivers/sound/pcspkr.asm"
  5582                              <2> ;PC Speaker Drivers
  5583                              <2> PCSpeakerRAW:
  5584 000034F7 60                  <2> 	pusha
  5585                              <2> nosoundrep:
  5586 000034F8 8B35[74020000]      <2> 	mov esi, [soundpos]
  5587 000034FE 31C9                <2> 	xor ecx, ecx
  5588 00003500 668B0D[72020000]    <2> 	mov cx, [soundrepititions]
  5589 00003507 6681F90000          <2> 	cmp cx, 0
  5590 0000350C 0F8548000000        <2> 	jne near donesetpitch
  5591 00003512 668B0E              <2> 	mov cx, [esi]
  5592 00003515 668B5E02            <2> 	mov bx, [esi + 2]
  5593 00003519 66890D[72020000]    <2> 	mov [soundrepititions], cx
  5594 00003520 81C604000000        <2> 	add esi, 4
  5595 00003526 8935[74020000]      <2> 	mov [soundpos], esi
  5596 0000352C 3B35[78020000]      <2> 	cmp esi, [soundendpos]
  5597 00003532 7735                <2> 	ja stopsound
  5598 00003534 66813D[72020000]00- <2> 	cmp word [soundrepititions], 0
  5599 0000353C 00                  <2>
  5600 0000353D 74B9                <2> 	je nosoundrep
  5601 0000353F 6681FB0000          <2> 	cmp bx, 0
  5602 00003544 740F                <2> 	je nosoundplay
  5603 00003546 E840000000          <2> 	call setpitch
  5604 0000354B E849000000          <2> 	call startsound
  5605 00003550 E905000000          <2> 	jmp donesetpitch
  5606                              <2> nosoundplay:
  5607 00003555 E846000000          <2> 	call killsound
  5608                              <2> donesetpitch:
  5609 0000355A 6649                <2> 	dec cx
  5610 0000355C 66890D[72020000]    <2> 	mov [soundrepititions], cx
  5611 00003563 61                  <2> 	popa
  5612 00003564 E948CDFFFF          <2> 	jmp timerinterrupt
  5613                              <2> stopsound:
  5614 00003569 31C0                <2> 	xor eax, eax
  5615 0000356B 66A3[72020000]      <2> 	mov [soundrepititions], ax
  5616 00003571 A2[71020000]        <2> 	mov [soundon], al
  5617 00003576 A3[74020000]        <2> 	mov [soundpos], eax
  5618 0000357B A3[78020000]        <2> 	mov [soundendpos], eax
  5619 00003580 E81B000000          <2> 	call killsound
  5620 00003585 61                  <2> 	popa
  5621 00003586 E926CDFFFF          <2> 	jmp timerinterrupt
  5622                              <2> 
  5623                              <2> 
  5624                              <2> setpitch:
  5625 0000358B B0B6                <2> 	mov al, 0xB6
  5626 0000358D E643                <2> 	out 0x43, al
  5627 0000358F 6689D8              <2> 	mov ax, bx
  5628 00003592 E642                <2> 	out 0x42, al
  5629 00003594 88E0                <2> 	mov al, ah
  5630 00003596 E642                <2> 	out 0x42, al
  5631 00003598 C3                  <2> 	ret
  5632                              <2> startsound:
  5633 00003599 E461                <2> 	in al, 0x61
  5634 0000359B 0C03                <2> 	or al, 3
  5635 0000359D E661                <2> 	out 0x61, al
  5636 0000359F C3                  <2> 	ret
  5637                              <2> killsound:
  5638 000035A0 E461                <2> 	in al, 0x61
  5639 000035A2 24FC                <2> 	and al, 0xFC
  5640 000035A4 E661                <2> 	out 0x61, al
  5641 000035A6 C3                  <2> 	ret
  5642                              <2> 	
  5643                              <1> %ifdef sound.included
  5644                              <1> 	%include "source/drivers/sound/sblaster.asm"
  5645                              <1> %endif
  5646                              <1> %ifdef io.serial
  5647                              <1> 	%include "source/drivers/input/serial.asm"
  5648                              <2> serial:
  5649                              <2> 	.init:
  5650 000035A7 668B15[AB360000]    <2> 	    mov dx, [.address]
  5651 000035AE B000                <2> 		mov al, 0
  5652 000035B0 6681C20100          <2> 		add dx, 1
  5653 000035B5 EE                  <2> 		out dx, al		;disable interrupts
  5654 000035B6 668B15[AB360000]    <2> 	    mov dx, [.address]
  5655 000035BD B080                <2> 		mov al, 80h
  5656 000035BF 6681C20300          <2> 		add dx, 3
  5657 000035C4 EE                  <2> 		out dx, al		;enable DLAB
  5658 000035C5 668B15[AB360000]    <2> 	    mov dx, [.address]
  5659 000035CC B001                <2> 		mov al, 1
  5660 000035CE EE                  <2> 		out dx, al
  5661 000035CF 6681C20100          <2> 		add dx, 1
  5662 000035D4 B000                <2> 		mov al, 0
  5663 000035D6 EE                  <2> 		out dx, al		;set divisor(buad=115200/divisor)
  5664 000035D7 668B15[AB360000]    <2> 	    mov dx, [.address]
  5665 000035DE B003                <2> 		mov al, 3
  5666 000035E0 6681C20300          <2> 		add dx, 3
  5667 000035E5 EE                  <2> 		out dx, al		;8 bits, no parity, one stop bit
  5668 000035E6 668B15[AB360000]    <2> 	    mov dx, [.address]
  5669 000035ED B0C7                <2> 		mov al, 0c7h
  5670 000035EF 6681C20200          <2> 		add dx, 2
  5671 000035F4 EE                  <2> 		out dx, al		;enable FIFO
  5672 000035F5 668B15[AB360000]    <2> 	    mov dx, [.address]
  5673 000035FC B00B                <2> 		mov al, 0Bh
  5674 000035FE 6681C20400          <2> 		add dx, 4
  5675 00003603 EE                  <2> 		out dx, al		;IRQs enabled, RTS/DSR set
  5676 00003604 C3                  <2> 		ret
  5677                              <2> 		
  5678                              <2> 	.receiveloop:
  5679 00003605 FB                  <2> 		sti
  5680 00003606 F4                  <2> 		hlt
  5681 00003607 803D[0E140000]00    <2> 		cmp byte [trans], 0
  5682 0000360E 7401                <2> 		je .receive
  5683 00003610 C3                  <2> 		ret
  5684                              <2> 	.receive:
  5685 00003611 30E4                <2> 		xor ah, ah
  5686 00003613 668B15[AB360000]    <2> 		mov dx, [.address]
  5687 0000361A EC                  <2> 		in al, dx
  5688 0000361B 3C00                <2> 		cmp al, 0
  5689 0000361D 74E6                <2> 		je .receiveloop
  5690                              <2> 	.nowait:
  5691 0000361F 3C1B                <2> 		cmp al, 0x1B
  5692 00003621 743C                <2> 		je .special
  5693 00003623 3C5B                <2> 		cmp al, 0x5B
  5694 00003625 743D                <2> 		je .special2
  5695 00003627 3C7F                <2> 		cmp al, 127
  5696 00003629 7414                <2> 		je .del
  5697 0000362B 3C7E                <2> 		cmp al, 0x7E
  5698 0000362D 7417                <2> 		je .home
  5699                              <2> 	.doner:
  5700 0000362F B4FF                <2> 		mov ah, 0xFF
  5701 00003631 C605[AD360000]00    <2> 		mov byte [specialkey], 0
  5702                              <2> 	.done:
  5703 00003638 66A3[0C140000]      <2> 		mov [lastkey], ax
  5704 0000363E C3                  <2> 		ret
  5705                              <2> 		
  5706                              <2> 	.del:
  5707 0000363F B008                <2> 		mov al, 8;replace delete with backspace
  5708 00003641 E9E9FFFFFF          <2> 		jmp .doner
  5709                              <2> 		
  5710                              <2> 	.home:
  5711 00003646 803D[AD360000]1B    <2> 		cmp byte [specialkey], 0x1B
  5712 0000364D 75E0                <2> 		jne .doner
  5713 0000364F 30C0                <2> 		xor al, al
  5714 00003651 E9BBFFFFFF          <2> 		jmp .receive
  5715                              <2> 	
  5716                              <2> 	.exitcode:
  5717 00003656 B401                <2> 		mov ah, 1
  5718 00003658 30C0                <2> 		xor al, al
  5719 0000365A E9D9FFFFFF          <2> 		jmp .done
  5720                              <2> 		
  5721                              <2> 	.special:
  5722 0000365F EC                  <2> 		in al, dx
  5723 00003660 3C5B                <2> 		cmp al, 0x5B
  5724 00003662 75F2                <2> 		jne .exitcode
  5725                              <2> 	.special2:
  5726 00003664 C605[AD360000]1B    <2> 		mov byte [specialkey], 0x1B
  5727 0000366B EC                  <2> 		in al, dx
  5728 0000366C 88C4                <2> 		mov ah, al
  5729 0000366E 30C0                <2> 		xor al, al
  5730 00003670 E9C3FFFFFF          <2> 		jmp .done
  5731                              <2> 
  5732                              <2> 	.send:
  5733 00003675 3CFF                <2> 		cmp al, 255
  5734 00003677 7431                <2> 		je .nosend
  5735 00003679 B900010000          <2> 		mov ecx, 256
  5736 0000367E 86C4                <2> 		xchg al, ah
  5737                              <2> 	.send1:
  5738 00003680 668B15[AB360000]    <2> 		mov dx, [.address]		;wait until transmit is empty or cx is empty
  5739 00003687 6681C20500          <2> 		add dx, 5
  5740 0000368C EC                  <2> 		in al, dx
  5741 0000368D 3C20                <2> 		cmp al, 20h
  5742 0000368F 7502                <2> 		jne .send2
  5743 00003691 E2ED                <2> 		loop .send1
  5744                              <2> 	.send2:
  5745 00003693 86C4                <2> 		xchg al, ah
  5746 00003695 3C00                <2> 		cmp al, 0
  5747 00003697 7411                <2> 		je .nosend
  5748 00003699 668B15[AB360000]    <2> 		mov dx, [.address]
  5749 000036A0 EE                  <2> 		out dx, al
  5750 000036A1 3C0A                <2> 		cmp al, 10
  5751 000036A3 7505                <2> 		jne .nosend
  5752 000036A5 B00D                <2> 		mov al, 13
  5753 000036A7 EE                  <2> 		out dx, al
  5754 000036A8 B00A                <2> 		mov al, 10
  5755                              <2> 	.nosend:
  5756 000036AA C3                  <2> 		ret
  5757                              <2> 
  5758                              <2> %if io.serial == "1"
  5759 000036AB F803                <2> 	.address dw 0x3F8
  5760                              <2> %endif
  5761                              <2> %if io.serial == "2"
  5762                              <2> 	.address dw 0x2F8
  5763                              <2> %endif
  5764                              <2> %if io.serial == "3"
  5765                              <2> 	.address dw 0x3E8
  5766                              <2> %endif
  5767                              <2> %if io.serial == "4"
  5768                              <2> 	.address dw 0x2E8
  5769                              <2> %endif
  5770 000036AD 00                  <2> specialkey db 0
  5771                              <1> %else
  5772                              <1> 	%include "source/drivers/input/keyboard.asm"
  5773                              <1> %endif
  5774                              <1> ;drivers will soon be handled intelligently
  5775                              <1> ;every driver's source will be scanned for a .init function
  5776                              <1> ;that will be called and if it returns 0
  5777                              <1> ;the hardware was found and the driver initialized properly
  5778                              <1> initializelater: ;these have debugging messages and should be initialized after the screen
  5779                              <1> 	%ifdef sound.included
  5780                              <1> 		call sblaster.init
  5781                              <1> 	%endif
  5782                              <1> 	%ifdef network.included
  5783                              <1> 		call network.init
  5784                              <1> 	%endif
  5785 000036AE C3                  <1> 	ret
  5786                              <1> initialize:
  5787                              <1> ;Now I will initialise the interrupt controllers and remap irq's
  5788 000036AF E819000000          <1> 	call .pic
  5789                              <1> %ifdef terminal.vsync
  5790                              <1> 	call .rtc
  5791                              <1> %endif
  5792 000036B4 E876000000          <1> 	call .pit
  5793 000036B9 E898000000          <1> 	call .fpu
  5794 000036BE E8A9000000          <1> 	call .sse
  5795 000036C3 31C0                <1> 	xor eax, eax
  5796 000036C5 31C9                <1> 	xor ecx, ecx
  5797                              <1> %ifdef io.serial
  5798 000036C7 E8DBFEFFFF          <1> 	call serial.init
  5799                              <1> %endif
  5800 000036CC C3                  <1> 	ret
  5801                              <1> 	
  5802                              <1> .pic:
  5803 000036CD B011                <1> 	mov al, 0x11
  5804 000036CF E620                <1> 	out 0x20, al
  5805 000036D1 E6A0                <1> 	out 0xA0, al
  5806 000036D3 B040                <1> 	mov al, 0x40	;interrupt for master
  5807 000036D5 E621                <1> 	out 0x21, al
  5808 000036D7 B048                <1> 	mov al, 0x48	;interrupt for slave
  5809 000036D9 E6A1                <1> 	out 0xA1, al
  5810 000036DB B004                <1> 	mov al, 4
  5811 000036DD E621                <1> 	out 0x21, al
  5812 000036DF B002                <1> 	mov al, 2
  5813 000036E1 E6A1                <1> 	out 0xA1, al
  5814 000036E3 B001                <1> 	mov al, 0x1
  5815 000036E5 E621                <1> 	out 0x21, al
  5816 000036E7 B001                <1> 	mov al, 0x1
  5817 000036E9 E6A1                <1> 	out 0xA1, al
  5818                              <1> 	;masks are set to zero so as not to mask
  5819 000036EB 30C0                <1> 	xor al, al
  5820 000036ED E621                <1> 	out 0x21, al
  5821 000036EF 30C0                <1> 	xor al, al
  5822 000036F1 E6A1                <1> 	out 0xA1, al
  5823 000036F3 B020                <1> 	mov al, 0x20
  5824 000036F5 E6A0                <1> 	out 0xA0, al
  5825 000036F7 E620                <1> 	out 0x20, al
  5826 000036F9 C3                  <1> 	ret
  5827                              <1> .rtc:
  5828 000036FA B008                <1> 	mov al, 0x8
  5829 000036FC 88C4                <1> 	mov ah, al
  5830 000036FE 66BA7000            <1> 	mov dx, 0x70
  5831 00003702 EE                  <1> 	out dx, al
  5832 00003703 6642                <1> 	inc dx
  5833 00003705 EC                  <1> 	in al, dx
  5834 00003706 86C4                <1> 	xchg al, ah
  5835 00003708 664A                <1> 	dec dx
  5836 0000370A EE                  <1> 	out dx, al
  5837 0000370B 6642                <1> 	inc dx
  5838 0000370D 86C4                <1> 	xchg al, ah
  5839 0000370F 0C40                <1> 	or al, 0x40
  5840 00003711 EE                  <1> 	out dx, al
  5841                              <1> 	
  5842 00003712 B00A                <1> 	mov al, 0xA
  5843 00003714 664A                <1> 	dec dx
  5844 00003716 EE                  <1> 	out dx, al
  5845 00003717 86C4                <1> 	xchg al, ah
  5846 00003719 6642                <1> 	inc dx
  5847 0000371B EC                  <1> 	in al, dx
  5848 0000371C 24F0                <1> 	and al, 0xF0
  5849 0000371E 0A05[C3020000]      <1> 	or al, [rtcrate]
  5850 00003724 86C4                <1> 	xchg al, ah
  5851 00003726 664A                <1> 	dec dx
  5852 00003728 EE                  <1> 	out dx, al
  5853 00003729 6642                <1> 	inc dx
  5854 0000372B 86C4                <1> 	xchg al, ah
  5855 0000372D EE                  <1> 	out dx, al
  5856 0000372E C3                  <1> 	ret
  5857                              <1> 	
  5858                              <1> .pit:
  5859                              <1> 	;initialize the PIT
  5860 0000372F 66A1[63020000]      <1> 	mov ax, [pitdiv] ;this is the divider for the PIT
  5861 00003735 E640                <1> 	out 0x40, al
  5862 00003737 66C1C008            <1> 	rol ax, 8
  5863 0000373B E640                <1> 	out 0x40, al
  5864                              <1> 	;enable rtc interrupt
  5865 0000373D B00B                <1> 	mov al, 0xB
  5866 0000373F E670                <1> 	out 0x70, al
  5867 00003741 66C1C008            <1> 	rol ax, 8
  5868 00003745 E471                <1> 	in al, 0x71
  5869 00003747 66C1C008            <1> 	rol ax, 8
  5870 0000374B E670                <1> 	out 0x70, al
  5871 0000374D 66C1C008            <1> 	rol ax, 8
  5872 00003751 0C40                <1> 	or al, 0x40
  5873 00003753 E671                <1> 	out 0x71, al
  5874 00003755 C3                  <1> 	ret
  5875                              <1> .fpu:
  5876                              <1> 	;And now to initialize the fpu
  5877 00003756 0F20E0              <1> 	mov eax, cr4
  5878 00003759 0D00020000          <1> 	or eax, 0x200
  5879 0000375E 0F22E0              <1> 	mov cr4, eax
  5880 00003761 B87F0B0000          <1> 	mov eax, 0xB7F
  5881 00003766 50                  <1> 	push eax
  5882 00003767 D92C24              <1> 	fldcw [esp]
  5883 0000376A 58                  <1> 	pop eax
  5884 0000376B C3                  <1> 	ret
  5885                              <1> 	
  5886                              <1> .sse:
  5887 0000376C 0F20C0              <1> 	mov eax, cr0
  5888 0000376F 24FB                <1> 	and al, 11111011b
  5889 00003771 0C02                <1> 	or al, 00000010b
  5890 00003773 0F22C0              <1> 	mov cr0, eax
  5891 00003776 0F20E0              <1> 	mov eax, cr4
  5892 00003779 660D0006            <1> 	or ax, 0000011000000000b
  5893 0000377D 0F22E0              <1> 	mov cr4, eax
  5894 00003780 C3                  <1> 	ret
  5895                                      %include "source/pci.asm"
  5896 00003781 00                  <1> pcibus		db 0
  5897 00003782 00                  <1> pcidevice	db 0
  5898 00003783 00                  <1> pcifunction	db 0
  5899 00003784 00                  <1> pciregister	db 0
  5900 00003785 00                  <1> pcireqtype	db 0
  5901 00003786 00000000            <1> pcidevid	dd 0
  5902 0000378A FFFFFFFF            <1> pcidevidmask dd 0xFFFFFFFF
  5903                              <1> 
  5904                              <1> getpciport:
  5905 0000378E B001                <1> 	mov al, 1
  5906 00003790 A2[85370000]        <1> 	mov [pcireqtype], al
  5907 00003795 E916000000          <1> 	jmp searchpci
  5908                              <1> pcidump:
  5909 0000379A 31C0                <1> 	xor eax, eax
  5910 0000379C A2[83370000]        <1> 	mov [pcifunction], al
  5911 000037A1 A2[81370000]        <1> 	mov [pcibus], al
  5912 000037A6 A2[82370000]        <1> 	mov [pcidevice], al
  5913 000037AB A2[85370000]        <1> 	mov [pcireqtype], al
  5914                              <1> searchpci:		;;return in ebx, start X in pciX
  5915 000037B0 30C0                <1> 	xor al, al
  5916 000037B2 A2[84370000]        <1> 	mov [pciregister], al
  5917 000037B7 E8BD010000          <1> 	call getpciaddr
  5918 000037BC BAF80C0000          <1> 	mov edx, 0xCF8
  5919 000037C1 EF                  <1> 	out dx, eax	;;request pci config
  5920 000037C2 BAFC0C0000          <1> 	mov edx, 0xCFC
  5921 000037C7 ED                  <1> 	in eax, dx 	;;read in pci config
  5922 000037C8 3D0000FFFF          <1> 	cmp eax, 0xFFFF0000
  5923 000037CD 0F823D000000        <1> 	jb near checkpcidevice
  5924                              <1> searchpciret:
  5925                              <1> nextpcidevice:
  5926 000037D3 30C0                <1> 	xor al, al
  5927 000037D5 A2[83370000]        <1> 	mov [pcifunction], al
  5928 000037DA A0[82370000]        <1> 	mov al, [pcidevice]
  5929 000037DF 3C1F                <1> 	cmp al, 11111b
  5930 000037E1 0F83F9000000        <1> 	jae near nextpcibus
  5931 000037E7 FEC0                <1> 	inc al
  5932 000037E9 A2[82370000]        <1> 	mov [pcidevice], al
  5933 000037EE E9BDFFFFFF          <1> 	jmp searchpci
  5934 000037F3 A0[83370000]        <1> 	mov al, [pcifunction]
  5935 000037F8 3C07                <1> 	cmp al, 111b
  5936 000037FA 0F83D3FFFFFF        <1> 	jae near nextpcidevice
  5937 00003800 FEC0                <1> 	inc al
  5938 00003802 A2[83370000]        <1> 	mov [pcifunction], al
  5939 00003807 E9A4FFFFFF          <1> 	jmp searchpci
  5940 0000380C 00000000            <1> pcitype: db 0,0,0,0
  5941                              <1> checkpcidevice:
  5942 00003810 31C0                <1> 	xor eax, eax
  5943 00003812 3905[86370000]      <1> 	cmp [pcidevid], eax
  5944 00003818 0F8430000000        <1> 	je near .good
  5945 0000381E A2[84370000]        <1> 	mov [pciregister], al	;device id, vendor id
  5946 00003823 E851010000          <1> 	call getpciaddr
  5947 00003828 BAF80C0000          <1> 	mov edx, 0xCF8
  5948 0000382D EF                  <1> 	out dx, eax
  5949 0000382E BAFC0C0000          <1> 	mov edx, 0xCFC
  5950 00003833 ED                  <1> 	in eax, dx
  5951 00003834 2305[8A370000]      <1> 	and eax, [pcidevidmask]
  5952 0000383A 8B1D[86370000]      <1> 	mov ebx, [pcidevid]
  5953 00003840 231D[8A370000]      <1> 	and ebx, [pcidevidmask]
  5954 00003846 39D8                <1> 	cmp eax, ebx
  5955 00003848 0F8585FFFFFF        <1> 	jne near searchpciret
  5956                              <1> .good:
  5957 0000384E 30C0                <1> 	xor al, al
  5958 00003850 3805[85370000]      <1> 	cmp [pcireqtype], al
  5959 00003856 0F842C000000        <1> 	je near dumppcidevice
  5960 0000385C B008                <1> 	mov al, 0x08
  5961 0000385E A2[84370000]        <1> 	mov [pciregister], al	;;class code, subclass, revision id
  5962 00003863 E811010000          <1> 	call getpciaddr
  5963 00003868 BAF80C0000          <1> 	mov edx, 0xCF8
  5964 0000386D EF                  <1> 	out dx, eax
  5965 0000386E BAFC0C0000          <1> 	mov edx, 0xCFC
  5966 00003873 ED                  <1> 	in eax, dx
  5967 00003874 C1C008              <1> 	rol eax, 8
  5968 00003877 3A05[0C380000]      <1> 	cmp al, [pcitype]
  5969 0000387D 0F8493000000        <1> 	je near foundpciaddr
  5970 00003883 E94BFFFFFF          <1> 	jmp searchpciret
  5971                              <1> dumppcidevice:
  5972 00003888 30C0                <1> 	xor al, al
  5973 0000388A A2[84370000]        <1> 	mov [pciregister], al
  5974 0000388F E8E5000000          <1> 	call getpciaddr
  5975 00003894 89C1                <1> 	mov ecx, eax
  5976 00003896 C605[C81C0000]05    <1> 	mov byte [firsthexshown], 5
  5977 0000389D E83BE4FFFF          <1> 	call showhex
  5978                              <1> dumppcidevicelp:
  5979 000038A2 A2[84370000]        <1> 	mov [pciregister], al
  5980 000038A7 E8CD000000          <1> 	call getpciaddr
  5981 000038AC BAF80C0000          <1> 	mov edx, 0xCF8
  5982 000038B1 EF                  <1> 	out dx, eax
  5983 000038B2 BAFC0C0000          <1> 	mov edx, 0xCFC
  5984 000038B7 ED                  <1> 	in eax, dx
  5985 000038B8 89C1                <1> 	mov ecx, eax
  5986 000038BA A0[84370000]        <1> 	mov al, [pciregister]
  5987 000038BF 0404                <1> 	add al, 4
  5988 000038C1 C605[C81C0000]05    <1> 	mov byte [firsthexshown], 5
  5989 000038C8 E810E4FFFF          <1> 	call showhex
  5990 000038CD 3C3C                <1> 	cmp al, 0x3C
  5991 000038CF 72D1                <1> 	jb dumppcidevicelp
  5992                              <1> dumppcidn:
  5993                              <1> %ifdef io.serial
  5994 000038D1 BE[993B0000]        <1> 	mov esi, line
  5995 000038D6 E877D6FFFF          <1> 	call print
  5996                              <1> %else
  5997                              <1> 	cmp byte [charpos], 0
  5998                              <1> 	je near searchpciret
  5999                              <1> 	mov esi, line
  6000                              <1> 	call print
  6001                              <1> %endif
  6002 000038DB E9F3FEFFFF          <1> 	jmp searchpciret
  6003                              <1> nextpcibus:
  6004 000038E0 30C0                <1> 	xor al, al
  6005 000038E2 A2[82370000]        <1> 	mov [pcidevice], al
  6006 000038E7 A0[81370000]        <1> 	mov al, [pcibus]
  6007 000038EC 3C7F                <1> 	cmp al, 1111111b
  6008 000038EE 730C                <1> 	jae donesearchpci
  6009 000038F0 FEC0                <1> 	inc al
  6010 000038F2 A2[81370000]        <1> 	mov [pcibus], al
  6011 000038F7 E9B4FEFFFF          <1> 	jmp searchpci
  6012                              <1> donesearchpci:
  6013 000038FC BBFFFFFFFF          <1> 	mov ebx, 0xFFFFFFFF
  6014 00003901 31D2                <1> 	xor edx, edx
  6015 00003903 8815[0C380000]      <1> 	mov [pcitype], dl
  6016 00003909 8915[86370000]      <1> 	mov [pcidevid], edx
  6017 0000390F 891D[8A370000]      <1> 	mov [pcidevidmask], ebx
  6018 00003915 C3                  <1> 	ret
  6019                              <1> foundpciaddr:
  6020 00003916 B010                <1> 	mov al, 0x10
  6021 00003918 A2[84370000]        <1> 	mov [pciregister], al
  6022                              <1> findpciioaddr:
  6023 0000391D E857000000          <1> 	call getpciaddr
  6024 00003922 BAF80C0000          <1> 	mov edx, 0xCF8
  6025 00003927 EF                  <1> 	out dx, eax
  6026 00003928 BAFC0C0000          <1> 	mov edx, 0xCFC
  6027 0000392D ED                  <1> 	in eax, dx
  6028 0000392E 89C3                <1> 	mov ebx, eax
  6029 00003930 81E301000000        <1> 	and ebx, 1
  6030 00003936 81FB00000000        <1> 	cmp ebx, 0
  6031 0000393C 0F841E000000        <1> 	je near notpciioaddr
  6032 00003942 2D01000000          <1> 	sub eax, 1
  6033 00003947 89C2                <1> 	mov edx, eax
  6034 00003949 31DB                <1> 	xor ebx, ebx
  6035 0000394B 4B                  <1> 	dec ebx
  6036 0000394C 891D[8A370000]      <1> 	mov [pcidevidmask], ebx
  6037 00003952 43                  <1> 	inc ebx
  6038 00003953 881D[0C380000]      <1> 	mov [pcitype], bl
  6039 00003959 891D[86370000]      <1> 	mov [pcidevid], ebx
  6040 0000395F C3                  <1> 	ret
  6041                              <1> notpciioaddr:
  6042 00003960 A0[84370000]        <1> 	mov al, [pciregister]
  6043 00003965 0404                <1> 	add al, 4
  6044 00003967 3C28                <1> 	cmp al, 0x28
  6045 00003969 0F8764FEFFFF        <1> 	ja near searchpciret
  6046 0000396F A2[84370000]        <1> 	mov [pciregister], al
  6047 00003974 E9A4FFFFFF          <1> 	jmp findpciioaddr
  6048                              <1> getpciaddr:		;;puts it in eax and ebx
  6049 00003979 31C0                <1> 			xor eax, eax
  6050 0000397B BB00000080          <1> 			mov ebx, 0x80000000
  6051 00003980 A0[81370000]        <1> 			mov al, [pcibus]
  6052 00003985 C1E010              <1> 			shl eax, 16
  6053 00003988 01C3                <1> 			add ebx, eax
  6054 0000398A 31C0                <1> 			xor eax, eax
  6055 0000398C A0[82370000]        <1> 			mov al, [pcidevice]
  6056 00003991 C1E00B              <1> 			shl eax, 11
  6057 00003994 01C3                <1> 			add ebx, eax
  6058 00003996 31C0                <1> 			xor eax, eax
  6059 00003998 A0[83370000]        <1> 			mov al, [pcifunction]
  6060 0000399D C1E008              <1> 			shl eax, 8
  6061 000039A0 01C3                <1> 			add ebx, eax
  6062 000039A2 31C0                <1> 			xor eax, eax
  6063 000039A4 A0[84370000]        <1> 			mov al, [pciregister]
  6064 000039A9 01C3                <1> 			add ebx, eax
  6065 000039AB 89D8                <1> 			mov eax, ebx
  6066 000039AD C3                  <1> 			ret
  6067                                      %include "source/disk.asm"
  6068                              <1> ;This loads files using the methods in the loaded driver
  6069                              <1> %ifdef disk.real
  6070                              <1> %include "source/drivers/disk/realmode.asm"
  6071                              <2> diskr:
  6072                              <2> 			;read from disk using real mode-it does not work with large files
  6073                              <2> 			;sector count in cl
  6074                              <2> 			;disk number in ch
  6075                              <2> 			;48 bit address with last 32 bits in ebx
  6076                              <2> 			;buffer in esi
  6077                              <2> 			;puts end of buffer in edi and end lba address in edx
  6078 000039AE 880D[DB390000]      <2> 	mov [sdlength], cl
  6079 000039B4 891D[DC390000]      <2> 	mov [sdaddress], ebx
  6080 000039BA 8935[3D3B0000]      <2> 	mov [oldesireal], esi
  6081 000039C0 66BE[E039]          <2> 	mov si, readdiskreal
  6082 000039C4 668935[7F0C0000]    <2> 	mov [realmodeptr], si
  6083 000039CB BE[1C3A0000]        <2> 	mov esi, backfromrealread
  6084 000039D0 8935[7B0C0000]      <2> 	mov [realmodereturn], esi
  6085 000039D6 E989D1FFFF          <2> 	jmp realmode
  6086 000039DB 00                  <2> sdlength db 0
  6087 000039DC 00000000            <2> sdaddress dd 0
  6088                              <2> 
  6089                              <2> [BITS 16]
  6090                              <2> readdiskreal:
  6091 000039E0 C706[0C3A]1000      <2> 	mov word [dlen], 0x10
  6092 000039E6 C706[103A]0000      <2> 	mov word [daddress], 0
  6093 000039EC C706[123A]0001      <2> 	mov word [dsegm], 0x100
  6094 000039F2 66891E[143A]        <2> 	mov [dlbaad], ebx
  6095 000039F7 880E[0E3A]          <2> 	mov [dreadlen], cl
  6096                              <2> ReadHardDisk:
  6097 000039FB BE[0C3A]            <2> 	mov si, diskaddresspacket
  6098 000039FE 31C0                <2> 	xor ax, ax
  6099 00003A00 B442                <2> 	mov ah, 0x42
  6100 00003A02 8A16[0B3A]          <2> 	mov dl, [dnumber]
  6101 00003A06 CD13                <2> 	int 0x13
  6102 00003A08 72F1                <2> 	jc ReadHardDisk
  6103 00003A0A C3                  <2> 	ret
  6104                              <2> 
  6105 00003A0B 80                  <2> dnumber db 0x80
  6106                              <2> diskaddresspacket:
  6107 00003A0C 10                  <2> dlen:	db 0x10 ;size of packet
  6108 00003A0D 00                  <2> 		db 0
  6109 00003A0E 7F00                <2> dreadlen:	dw 0x7F	;blocks to read=maximum
  6110 00003A10 0000                <2> daddress:	dw 0x0	;address 0
  6111 00003A12 0001                <2> dsegm:		dw 0x100	;segment
  6112                              <2> 		;start with known value for hd
  6113                              <2> dlbaad:
  6114 00003A14 00000000            <2> 	dd 0	;lba address
  6115 00003A18 00000000            <2> 	dd 0
  6116                              <2> [BITS 32]
  6117                              <2> backfromrealread:
  6118 00003A1C 8B35[3D3B0000]      <2> 	mov esi, [oldesireal]
  6119 00003A22 8B1D[DC390000]      <2> 	mov ebx, [sdaddress]
  6120 00003A28 31C9                <2> 	xor ecx, ecx
  6121 00003A2A 8A0D[DB390000]      <2> 	mov cl, [sdlength]
  6122 00003A30 01CB                <2> 	add ebx, ecx
  6123 00003A32 66B80800            <2> 	mov ax, LINEAR_SEL
  6124 00003A36 8EE0                <2> 	mov fs, ax
  6125 00003A38 BF00100000          <2> 	mov edi, 0x1000
  6126 00003A3D B200                <2> 	mov dl, 0
  6127 00003A3F D0E1                <2> 	shl cl, 1
  6128                              <2> copyfromrmodedisk:
  6129 00003A41 648A07              <2> 	mov al, [fs:edi]
  6130 00003A44 8806                <2> 	mov [esi], al
  6131 00003A46 47                  <2> 	inc edi
  6132 00003A47 46                  <2> 	inc esi
  6133 00003A48 FECA                <2> 	dec dl
  6134 00003A4A 80FA00              <2> 	cmp dl, 0
  6135 00003A4D 75F2                <2> 	jne copyfromrmodedisk
  6136 00003A4F FEC9                <2> 	dec cl
  6137 00003A51 B200                <2> 	mov dl, 0
  6138 00003A53 80F900              <2> 	cmp cl, 0
  6139 00003A56 75E9                <2> 	jne copyfromrmodedisk
  6140 00003A58 66B83000            <2> 	mov ax, NEW_DATA_SEL
  6141 00003A5C 8EE0                <2> 	mov fs, ax
  6142 00003A5E 89F7                <2> 	mov edi, esi
  6143 00003A60 8B35[3D3B0000]      <2> 	mov esi, [oldesireal]
  6144 00003A66 89DA                <2> 	mov edx, ebx
  6145 00003A68 8B1D[DC390000]      <2> 	mov ebx, [sdaddress]
  6146 00003A6E C3                  <2> 	ret
  6147                              <2> 	
  6148                              <1> %else
  6149                              <1> 	%ifdef disk.protected
  6150                              <1> 	%include "source/drivers/disk/pata.asm"
  6151                              <1> 	%endif
  6152                              <1> %endif
  6153                              <1> loadfile:	;loads a file with the name buffer's location in edi into location in esi
  6154                              <1> 			;returns with err code in edx and file end in edi
  6155 00003A6F 803F00              <1> 	cmp byte [edi], 0
  6156 00003A72 0F8448000000        <1> 	je near nofileload
  6157 00003A78 89FA                <1> 	mov edx, edi
  6158 00003A7A BB[BE3B0000]        <1> 	mov ebx, diskfileindex
  6159                              <1> nextnamechar:
  6160 00003A7F 8A07                <1> 	mov al, [edi]
  6161 00003A81 3C26                <1> 	cmp al, '&'
  6162 00003A83 7440                <1> 	je nullfile
  6163 00003A85 8A23                <1> 	mov ah, [ebx]
  6164 00003A87 47                  <1> 	inc edi
  6165 00003A88 43                  <1> 	inc ebx
  6166 00003A89 88C1                <1> 	mov cl, al
  6167 00003A8B 08E1                <1> 	or cl, ah
  6168 00003A8D 80F900              <1> 	cmp cl, 0
  6169 00003A90 744E                <1> 	je equalfilenames
  6170 00003A92 80F920              <1> 	cmp cl, ' '
  6171 00003A95 7449                <1> 	je equalfilenames
  6172 00003A97 3C2A                <1> 	cmp al, '*'
  6173 00003A99 742B                <1> 	je equalfilenames2
  6174 00003A9B 80FC00              <1> 	cmp ah, 0
  6175 00003A9E 7410                <1> 	je nextfilename
  6176 00003AA0 3C00                <1> 	cmp al, 0
  6177 00003AA2 7404                <1> 	je getebxzero
  6178 00003AA4 38E0                <1> 	cmp al, ah
  6179 00003AA6 74D7                <1> 	je nextnamechar
  6180                              <1> getebxzero:
  6181 00003AA8 8A23                <1> 	mov ah, [ebx]
  6182 00003AAA 43                  <1> 	inc ebx
  6183 00003AAB 80FC00              <1> 	cmp ah, 0
  6184 00003AAE 75F8                <1> 	jne getebxzero
  6185                              <1> nextfilename:
  6186 00003AB0 81C308000000        <1> 	add ebx, 8		;next descriptor
  6187 00003AB6 89D7                <1> 	mov edi, edx
  6188 00003AB8 81FB[733D0000]      <1> 	cmp ebx, enddiskfileindex
  6189 00003ABE 72BF                <1> 	jb nextnamechar
  6190                              <1> nofileload:
  6191 00003AC0 BA94010000          <1> 	mov edx, 404	;indicate not found error
  6192                              <1> nullfile:
  6193 00003AC5 C3                  <1> 	ret
  6194                              <1> equalfilenames2:
  6195 00003AC6 81EB02000000        <1> 	sub ebx, 2
  6196                              <1> eqfilefind:
  6197 00003ACC 43                  <1> 	inc ebx
  6198 00003ACD 81FB[733D0000]      <1> 	cmp ebx, enddiskfileindex
  6199 00003AD3 0F83E7FFFFFF        <1> 	jae near nofileload
  6200 00003AD9 8A03                <1> 	mov al, [ebx]
  6201 00003ADB 3C00                <1> 	cmp al, 0
  6202 00003ADD 75ED                <1> 	jne eqfilefind
  6203 00003ADF 43                  <1> 	inc ebx
  6204                              <1> equalfilenames:
  6205 00003AE0 8B4304              <1> 	mov eax, [ebx + 4] 	;put file size in eax
  6206 00003AE3 8B1B                <1> 	mov ebx, [ebx]		;put file beginning in ebx
  6207 00003AE5 031D[763D0000]      <1> 	add ebx, [lbaad]	;add offset to solleros
  6208 00003AEB 31C9                <1> 	xor ecx, ecx
  6209 00003AED 88C1                <1> 	mov cl, al			;get excess number of sectors
  6210 00003AEF C0E102              <1> 	shl cl, 2
  6211 00003AF2 C0E902              <1> 	shr cl, 2			;cut off at 64
  6212 00003AF5 29C8                <1> 	sub eax, ecx		;get rid of excess sectors
  6213 00003AF7 B500                <1> 	mov ch, 0			;drive 0
  6214 00003AF9 C1E806              <1> 	shr eax, 6			;get number of 64 sector tracks
  6215                              <1> loaddiskfile:			;tracks in eax, excess sectors in cl, drive in ch, buffer in esi, address in ebx
  6216 00003AFC A3[413B0000]        <1> 	mov [filetracks], eax
  6217 00003B01 89F7                <1> 	mov edi, esi		;just in case cl is 0
  6218 00003B03 89DA                <1> 	mov edx, ebx
  6219 00003B05 80F900              <1> 	cmp cl, 0
  6220 00003B08 7405                <1> 	je copytracksforfile
  6221 00003B0A E89FFEFFFF          <1> 	call diskr	;take care of excess sectors
  6222                              <1> copytracksforfile:
  6223 00003B0F A1[413B0000]        <1> 	mov eax, [filetracks]
  6224 00003B14 3D00000000          <1> 	cmp eax, 0
  6225 00003B19 741C                <1> 	je donecopyfile
  6226 00003B1B 48                  <1> 	dec eax
  6227 00003B1C A3[413B0000]        <1> 	mov [filetracks], eax
  6228 00003B21 89D3                <1> 	mov ebx, edx	;get end lba
  6229 00003B23 B140                <1> 	mov cl, 0x40 ;for compatability with BIOS it uses 64 instead of 128
  6230 00003B25 8A2D[753D0000]      <1> 	mov ch, [DriveNumber]
  6231 00003B2B 89FE                <1> 	mov esi, edi	;reset buffer
  6232 00003B2D E87CFEFFFF          <1> 	call diskr
  6233 00003B32 E9D8FFFFFF          <1> 	jmp copytracksforfile
  6234                              <1> donecopyfile:
  6235 00003B37 BA00000000          <1> 	mov edx, 0	;no error
  6236 00003B3C C3                  <1> 	ret
  6237                              <1> 
  6238 00003B3D 00000000            <1> oldesireal dd 0
  6239 00003B41 00000000            <1> filetracks dd 0
  6240 00003B45 00                  <1> lbad1 db 0
  6241 00003B46 00                  <1> lbad2 db 0
  6242 00003B47 00                  <1> lbad3 db 0
  6243 00003B48 00                  <1> lbad4 db 0
  6244 00003B49 00                  <1> lbad5 db 0
  6245 00003B4A 00                  <1> lbad6 db 0
  6246 00003B4B 6400                <1> segments dw 100
  6247                              <1> 
  6248                              <1> 
  6249                              <1> 	
  6250                                      %include "source/threads.asm"
  6251                              <1> %ifdef threads.included	
  6252                              <1> nwcmdst:
  6253                              <1> 	xor eax, eax
  6254                              <1> 	mov esp, stackend
  6255                              <1> 	mov [threadson], al
  6256                              <1> 	mov [currentthread], eax
  6257                              <1> 	add eax, 4
  6258                              <1> 	mov [lastthread], eax
  6259                              <1> 	sti
  6260                              <1> 	jmp nwcmd
  6261                              <1> 
  6262                              <1> nomorethreadspace:
  6263                              <1> 	mov esi, nmts
  6264                              <1> 	call print
  6265                              <1> 	mov byte [threadson], 0
  6266                              <1> 	jmp nwcmd
  6267                              <1> nmts	db "Thread Overflow",10,0
  6268                              <1> 
  6269                              <1> nomorestackspace:
  6270                              <1> 	mov esi, nmss
  6271                              <1> 	call print
  6272                              <1> 	jmp nwcmdst
  6273                              <1> nmss	db "Stack Overflow",10,0
  6274                              <1> 	
  6275                              <1> threadswitch:
  6276                              <1> 	cli
  6277                              <1> 	pushad
  6278                              <1> 	mov edi, threadlist
  6279                              <1> 	mov eax, [currentthread]
  6280                              <1> 	inc eax
  6281                              <1> 	mov [currentthread], eax
  6282                              <1> 	dec ax
  6283                              <1> 	shl eax, 2
  6284                              <1> 	add edi, eax
  6285                              <1> 	mov [edi], esp
  6286                              <1> 	add edi, 4
  6287                              <1> 	cmp edi, threadlistend
  6288                              <1> 	jae near nookespthread
  6289                              <1> 	mov eax, [edi]
  6290                              <1> 	cmp eax, 0
  6291                              <1> 	jne near okespthread
  6292                              <1> nookespthread:
  6293                              <1> 	mov edi, threadlist
  6294                              <1> 	xor eax, eax
  6295                              <1> 	mov [currentthread], eax
  6296                              <1> 	mov eax, [edi]
  6297                              <1> 	cmp eax, 0
  6298                              <1> 	je near nwcmdst
  6299                              <1> okespthread:
  6300                              <1> 	mov esp, eax
  6301                              <1> 	mov al, 0x20
  6302                              <1> 	out 0x20, al
  6303                              <1> 	popad
  6304                              <1> 	sti
  6305                              <1> 	iret
  6306                              <1> 
  6307                              <1> %endif
  6308 00003B4D 04000000            <1> 	lastthread dd 4
  6309 00003B51 00                  <1> 	threadson db 0
  6310 00003B52 00000000            <1> 	currentthread dd 0
  6311                                  %ifdef gui.included
  6312                                      %include "source/gui/gui.asm"
  6313                                  %endif
  6314                                  %ifdef network.included
  6315                                  	%include "source/network.asm"
  6316                                  %endif
  6317                                      %include "source/data.asm"
  6318 00003B56 626F6F742E736800    <1> 	bootfilename db "boot.sh",0
  6319 00003B5E 73687573683A2000    <1> 	notfound1 db "shush: ",0
  6320 00003B66 3A206E6F7420666F75- <1> 	notfound2 db  ": not found",10,0
  6321 00003B6F 6E640A00            <1>
  6322 00003B73 757365726E616D653A- <1> 	userask db "username:",0
  6323 00003B7C 00                  <1>
  6324 00003B7D 70617373776F72643A- <1> 	pwdask	db	"password:",0
  6325 00003B86 00                  <1>
  6326 00003B87 40                  <1> 	computer db "@"
  6327                              <1> %ifdef io.serial
  6328 00003B88 536F6C6C65724F532E- <1> 	computername	db	"SollerOS.",io.serial," ",0
  6329 00003B91 312000              <1>
  6330                              <1> %else
  6331                              <1> 	computername	db	"SollerOS ",0
  6332                              <1> %endif
  6333 00003B94 5D242000            <1> 	endprompt db "]$ ",0
  6334 00003B98 0D                  <1> 	crlf 	db  13
  6335 00003B99 0A00                <1> 	line	db	10,0
  6336                              <1> 	userlst:
  6337 00003B9B 726F6F7400          <1> 			db "root",0
  6338 00003BA0 617765736F6D65706F- <1> 			db "awesomepower",0
  6339 00003BA9 77657200            <1>
  6340 00003BAD 7573657200          <1> 			db "user",0
  6341 00003BB2 70617373776F726400  <1> 			db "password",0
  6342 00003BBB 6E00                <1> 			db "n",0	;;abuse for quick entry-a quick double n followed by a double enter will get you in
  6343 00003BBD 00                  <1> 			db 0
  6344                              <1> 	userlstend:
  6345                              <1> 	
  6346                              <1> %ifdef io.serial
  6347                              <1> %else
  6348                              <1> fonts:	incbin "source/precompiled/fonts.pak"
  6349                              <1> fontend:
  6350                              <1> %endif
  6351                              <1> osend:	;this is the end of the operating system's space on disk
  6352                                      %include "build/fileindex.asm"
  6353                              <1> diskfileindex:
  6354 00003BBE 617267746573742E65- <1> db "argtest.elf",0
  6355 00003BC7 6C6600              <1>
  6356 00003BCA 1F000000            <1> dd (f0-$$)/512
  6357 00003BCE 06010000            <1> dd (f1-f0)/512
  6358 00003BD2 6261636B67726F756E- <1> db "background.bmp",0
  6359 00003BDB 642E626D7000        <1>
  6360 00003BE1 25010000            <1> dd (f1-$$)/512
  6361 00003BE5 01140000            <1> dd (f2-f1)/512
  6362 00003BE9 626F6F742E736800    <1> db "boot.sh",0
  6363 00003BF1 26150000            <1> dd (f2-$$)/512
  6364 00003BF5 01000000            <1> dd (f3-f2)/512
  6365 00003BF9 63686172746573742E- <1> db "chartest.elf",0
  6366 00003C02 656C6600            <1>
  6367 00003C06 27150000            <1> dd (f3-$$)/512
  6368 00003C0A 26010000            <1> dd (f4-f3)/512
  6369 00003C0E 646F73746573742E63- <1> db "dostest.com",0
  6370 00003C17 6F6D00              <1>
  6371 00003C1A 4D160000            <1> dd (f4-$$)/512
  6372 00003C1E 01000000            <1> dd (f5-f4)/512
  6373 00003C22 6578656300          <1> db "exec",0
  6374 00003C27 4E160000            <1> dd (f5-$$)/512
  6375 00003C2B 01000000            <1> dd (f6-f5)/512
  6376 00003C2F 66696E616C636F756E- <1> db "finalcount.sn",0
  6377 00003C38 742E736E00          <1>
  6378 00003C3D 4F160000            <1> dd (f6-$$)/512
  6379 00003C41 01000000            <1> dd (f7-f6)/512
  6380 00003C45 666F726B00          <1> db "fork",0
  6381 00003C4A 50160000            <1> dd (f7-$$)/512
  6382 00003C4E 01000000            <1> dd (f8-f7)/512
  6383 00003C52 68656C6C6F776F726C- <1> db "helloworld.elf",0
  6384 00003C5B 642E656C6600        <1>
  6385 00003C61 51160000            <1> dd (f8-$$)/512
  6386 00003C65 D6010000            <1> dd (f9-f8)/512
  6387 00003C69 696E7400            <1> db "int",0
  6388 00003C6D 27180000            <1> dd (f9-$$)/512
  6389 00003C71 01000000            <1> dd (f10-f9)/512
  6390 00003C75 6C6F7374776F6F6473- <1> db "lostwoods.sn",0
  6391 00003C7E 2E736E00            <1>
  6392 00003C82 28180000            <1> dd (f10-$$)/512
  6393 00003C86 01000000            <1> dd (f11-f10)/512
  6394 00003C8A 6D6172696F2E736E00  <1> db "mario.sn",0
  6395 00003C93 29180000            <1> dd (f11-$$)/512
  6396 00003C97 01000000            <1> dd (f12-f11)/512
  6397 00003C9B 70692E656C6600      <1> db "pi.elf",0
  6398 00003CA2 2A180000            <1> dd (f12-$$)/512
  6399 00003CA6 1F010000            <1> dd (f13-f12)/512
  6400 00003CAA 736F6C6C65726F732E- <1> db "solleros.bmp",0
  6401 00003CB3 626D7000            <1>
  6402 00003CB7 49190000            <1> dd (f13-$$)/512
  6403 00003CBB B0020000            <1> dd (f14-f13)/512
  6404 00003CBF 736F6C6C65726F732E- <1> db "solleros.txt",0
  6405 00003CC8 74787400            <1>
  6406 00003CCC F91B0000            <1> dd (f14-$$)/512
  6407 00003CD0 01000000            <1> dd (f15-f14)/512
  6408 00003CD4 736F6E676F74696D65- <1> db "songotime.sn",0
  6409 00003CDD 2E736E00            <1>
  6410 00003CE1 FA1B0000            <1> dd (f15-$$)/512
  6411 00003CE5 01000000            <1> dd (f16-f15)/512
  6412 00003CE9 73736500            <1> db "sse",0
  6413 00003CED FB1B0000            <1> dd (f16-$$)/512
  6414 00003CF1 02000000            <1> dd (f17-f16)/512
  6415 00003CF5 737464696F74657374- <1> db "stdiotest.elf",0
  6416 00003CFE 2E656C6600          <1>
  6417 00003D03 FD1B0000            <1> dd (f17-$$)/512
  6418 00003D07 27010000            <1> dd (f18-f17)/512
  6419 00003D0B 74656C7900          <1> db "tely",0
  6420 00003D10 241D0000            <1> dd (f18-$$)/512
  6421 00003D14 01000000            <1> dd (f19-f18)/512
  6422 00003D18 74696D65746573742E- <1> db "timetest.elf",0
  6423 00003D21 656C6600            <1>
  6424 00003D25 251D0000            <1> dd (f19-$$)/512
  6425 00003D29 04010000            <1> dd (f20-f19)/512
  6426 00003D2D 7475746F7269616C2E- <1> db "tutorial.sh",0
  6427 00003D36 736800              <1>
  6428 00003D39 291E0000            <1> dd (f20-$$)/512
  6429 00003D3D 03000000            <1> dd (f21-f20)/512
  6430 00003D41 756E667300          <1> db "unfs",0
  6431 00003D46 2C1E0000            <1> dd (f21-$$)/512
  6432 00003D4A 02000000            <1> dd (f22-f21)/512
  6433 00003D4E 766963746F72792E77- <1> db "victory.wav",0
  6434 00003D57 617600              <1>
  6435 00003D5A 2E1E0000            <1> dd (f22-$$)/512
  6436 00003D5E 16000000            <1> dd (f23-f22)/512
  6437 00003D62 5F696D672E62696E00  <1> db "_img.bin",0
  6438 00003D6B 441E0000            <1> dd (f23-$$)/512
  6439 00003D6F D7020000            <1> dd (f24-f23)/512
  6440                              <1> enddiskfileindex:
  6441                              <1> 
  6442                                      %include "source/bss.asm"
  6443 00003D73 90                  <1> align 4, nop
  6444                              <1> bssstart: equ $
  6445                              <1> guion equ bssstart
  6446                              <1> DriveNumber equ guion + 1
  6447                              <1> lbaad equ DriveNumber + 1
  6448                              <1> memlistbuf equ lbaad + 4
  6449                              <1> memlistend equ memlistbuf + 576
  6450                              <1> bsscopy equ memlistend
  6451                              <1> initialstack equ bsscopy
  6452                              <1> stackend equ initialstack + 4000
  6453                              <1> fileindex: equ stackend + 96
  6454                              <1> fileindexend: equ fileindex + 1024
  6455                              <1> previousstack equ fileindexend
  6456                              <1> lastfolderloc equ previousstack + 4
  6457                              <1> currentfolderloc equ lastfolderloc + 4
  6458                              <1> currentfolder equ currentfolderloc + 4
  6459                              <1> currentfolderend equ currentfolder + 512
  6460                              <1> uid equ currentfolderend
  6461                              <1> ranboot equ uid + 4
  6462                              <1> IFON equ ranboot + 1
  6463                              <1> IFTRUE equ IFON + 1
  6464                              <1> BATCHPOS equ IFTRUE + 100
  6465                              <1> BATCHISON equ BATCHPOS + 4
  6466                              <1> LOOPON equ BATCHISON + 1
  6467                              <1> LOOPPOS	equ LOOPON + 1
  6468                              <1> variables: equ LOOPPOS + 4
  6469                              <1> varend: equ variables + 4096
  6470                              <1> buftxt2: equ varend
  6471                              <1> buftxt: equ buftxt2 + 1024
  6472                              <1> buftxtend: equ buftxt + 1024
  6473                              <1> buf2: equ buftxtend
  6474                              <1> numbuf: equ buf2 + 20
  6475                              <1> %ifdef io.serial
  6476                              <1> 	lastcommandpos equ numbuf + 1
  6477                              <1> %else
  6478                              <1> 	%ifdef gui.included
  6479                              <1> 		graphicstable equ numbuf + 1 ;w type, dw datalocation, w locationx, w locationy, w selected, dw code
  6480                              <1> 		graphicstableend equ graphicstable + 200h
  6481                              <1> 		%ifdef gui.background
  6482                              <1> 			backgroundbuffer equ graphicstableend
  6483                              <1> 			backgroundbufferend equ backgroundbuffer + 1280*1026*2
  6484                              <1> 			mousecolorbuf equ backgroundbufferend
  6485                              <1> 		%else
  6486                              <1> 			mousecolorbuf equ graphicstableend ;where the gui under the mouse is stored
  6487                              <1> 		%endif
  6488                              <1> 		mcolorend equ mousecolorbuf + 256
  6489                              <1> 		videobuf equ mcolorend + 1	;1680x1050 pixels in characters
  6490                              <1> 		videobufend	equ videobuf + 210*65*2
  6491                              <1> 		videobuf2 equ videobufend
  6492                              <1> 		videobuf2end equ videobuf2 + 210*65*2
  6493                              <1> 	%else
  6494                              <1> 		videobuf equ numbuf + 1
  6495                              <1> 		videobufend equ videobuf + 80*30*2
  6496                              <1> 		videobuf2 equ videobufend
  6497                              <1> 		videobuf2end equ videobuf2 + 160*64*2
  6498                              <1> 	%endif
  6499                              <1> 	lastcommandpos: equ videobuf2end
  6500                              <1> %endif
  6501                              <1> 	commandbufpos: equ lastcommandpos + 4
  6502                              <1> 	commandlistentries: equ commandbufpos + 4
  6503                              <1> 	commandsentered: equ commandlistentries + 4
  6504                              <1> 	commandbuf: equ commandsentered + 4
  6505                              <1> 	commandbufend: equ commandbuf + 4096 ;this is where kernel space only ends, the rest is for threading
  6506                              <1> %ifdef network.included
  6507                              <1> 	rbuffstart: equ commandbufend ;for use with networking
  6508                              <1> 	rbuffend equ rbuffstart + 8212
  6509                              <1> %else
  6510                              <1> 	rbuffstart equ commandbufend
  6511                              <1> 	rbuffend equ commandbufend
  6512                              <1> %endif
  6513                              <1> %ifdef threads.included
  6514                              <1> 	threadlist: equ rbuffend ;this buffer will hold the stack locations of all of the threads, up to 2048
  6515                              <1> 	threadlistend: equ threadlist + 1024*4
  6516                              <1> 	stacks:	equ threadlistend ;i use SS now for proper stack management. This makes sure stacks never screw with other memory
  6517                              <1> 	stack1: equ stacks + 1024  ;woah, thats a lot of space for stacks
  6518                              <1> 	bssend equ stack1 + 1024*1024
  6519                              <1> %else
  6520                              <1> 	bssend equ rbuffend
  6521                              <1> %endif
  6522                              <1> dosprogloc equ 0x400000 ;from here on, it is not kernel space so apps can be loaded here.
  6523                                      %include "build/files.asm"
  6524 00003D74 00<rept>            <1> align 512,db 0
  6525                              <1> f0:
  6526 00003E00 <incbin>            <1> incbin "included/argtest.elf"
  6527 0002490B 00<rept>            <1> align 512,db 0
  6528                              <1> f1:
  6529 00024A00 <incbin>            <1> incbin "included/background.bmp"
  6530 002A4A46 00<rept>            <1> align 512,db 0
  6531                              <1> f2:
  6532 002A4C00 <incbin>            <1> incbin "included/boot.sh"
  6533 002A4D07 00<rept>            <1> align 512,db 0
  6534                              <1> f3:
  6535 002A4E00 <incbin>            <1> incbin "included/chartest.elf"
  6536 002C98E4 00<rept>            <1> align 512,db 0
  6537                              <1> f4:
  6538 002C9A00 <incbin>            <1> incbin "included/dostest.com"
  6539 002C9B2B 00<rept>            <1> align 512,db 0
  6540                              <1> f5:
  6541 002C9C00 <incbin>            <1> incbin "included/exec"
  6542 002C9CE9 00<rept>            <1> align 512,db 0
  6543                              <1> f6:
  6544 002C9E00 <incbin>            <1> incbin "included/finalcount.sn"
  6545 002C9F02 00<rept>            <1> align 512,db 0
  6546                              <1> f7:
  6547 002CA000 <incbin>            <1> incbin "included/fork"
  6548 002CA162 00<rept>            <1> align 512,db 0
  6549                              <1> f8:
  6550 002CA200 <incbin>            <1> incbin "included/helloworld.elf"
  6551                              <1> align 512,db 0
  6552                              <1> f9:
  6553 00304E00 <incbin>            <1> incbin "included/int"
  6554 00304FA9 00<rept>            <1> align 512,db 0
  6555                              <1> f10:
  6556 00305000 <incbin>            <1> incbin "included/lostwoods.sn"
  6557 00305056 00<rept>            <1> align 512,db 0
  6558                              <1> f11:
  6559 00305200 <incbin>            <1> incbin "included/mario.sn"
  6560 0030523A 00<rept>            <1> align 512,db 0
  6561                              <1> f12:
  6562 00305400 <incbin>            <1> incbin "included/pi.elf"
  6563 0032914E 00<rept>            <1> align 512,db 0
  6564                              <1> f13:
  6565 00329200 <incbin>            <1> incbin "included/solleros.bmp"
  6566 0037F1E6 00<rept>            <1> align 512,db 0
  6567                              <1> f14:
  6568 0037F200 <incbin>            <1> incbin "included/solleros.txt"
  6569 0037F374 00<rept>            <1> align 512,db 0
  6570                              <1> f15:
  6571 0037F400 <incbin>            <1> incbin "included/songotime.sn"
  6572 0037F44A 00<rept>            <1> align 512,db 0
  6573                              <1> f16:
  6574 0037F600 <incbin>            <1> incbin "included/sse"
  6575 0037F8A8 00<rept>            <1> align 512,db 0
  6576                              <1> f17:
  6577 0037FA00 <incbin>            <1> incbin "included/stdiotest.elf"
  6578 003A465C 00<rept>            <1> align 512,db 0
  6579                              <1> f18:
  6580 003A4800 <incbin>            <1> incbin "included/tely"
  6581 003A49C7 00<rept>            <1> align 512,db 0
  6582                              <1> f19:
  6583 003A4A00 <incbin>            <1> incbin "included/timetest.elf"
  6584 003C5056 00<rept>            <1> align 512,db 0
  6585                              <1> f20:
  6586 003C5200 <incbin>            <1> incbin "included/tutorial.sh"
  6587 003C5752 00<rept>            <1> align 512,db 0
  6588                              <1> f21:
  6589 003C5800 <incbin>            <1> incbin "included/unfs"
  6590                              <1> align 512,db 0
  6591                              <1> f22:
  6592 003C5C00 <incbin>            <1> incbin "included/victory.wav"
  6593 003C8748 00<rept>            <1> align 512,db 0
  6594                              <1> f23:
  6595 003C8800 <incbin>            <1> incbin "included/_img.bin"
  6596                              <1> align 512,db 0
  6597                              <1> f24:
