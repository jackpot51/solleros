     1                                  [map symbols build/kernel.map]
     2                                  %include "config.asm"
     3                              <1> ;These flags are used to configure options as on, put a simicolon in front of it to not configure it
     4                              <1> 
     5                              <1> %define gui.included
     6                              <1> ;Turn on the gui
     7                              <1> 
     8                              <1> %define gui.alphablending
     9                              <1> ;Make the terminal in the GUI 25% transparent
    10                              <1> 
    11                              <1> %define gui.background
    12                              <1> ;Make the GUI have a loadable background
    13                              <1> 
    14                              <1> ;%define gui.time
    15                              <1> ;Show time in top right corner of screen
    16                              <1> 
    17                              <1> ;%define io.serial "1"
    18                              <1> ;Use the specified serial port for input and output instead of the keyboard and screen
    19                              <1> ;If the gui is included this should not be enabled
    20                              <1> 
    21                              <1> %define terminal.vsync
    22                              <1> ;Uses the RTC to automatically update the terminal at ~64Hz
    23                              <1> 	;WARNING:
    24                              <1> 	;This may cause problems on systems with non-standard RTC's
    25                              <1> 	;It is therefore recommended that you do not enable it even
    26                              <1> 	;though it gives a large speed improvement for character output
    27                              <1> 
    28                              <1> %define font.unicode
    29                              <1> ;Include a unicode font. Disable to use an ascii font
    30                              <1> 	
    31                              <1> %define hardware.automatic
    32                              <1> ;Automatically load the sound and network drivers.
    33                              <1> 
    34                              <1> %define threads.included
    35                              <1> ;Include the thread testing stuff-this uses a relatively large amount of memory
    36                              <1> 
    37                              <1> %define exceptions.included
    38                              <1> ;Display debugging information should crashes occur-also uses quite a bit of memory
    39                              <1> 
    40                              <1> ;%define disk.protected
    41                              <1> ;Use protected mode instead of real mode for disk access-this allows for multitasking with disk reads
    42                              <1> 
    43                              <1> %define disk.real
    44                              <1> ;Use real mode for disk access-this gives greater compatibility
    45                              <1> 
    46                              <1> %define sound.included
    47                              <1> ;This includes the sound drivers
    48                              <1> 
    49                              <1> %define network.included
    50                              <1> ;This includes the network stack
    51                              <1> 
    52                              <1> %define rtl8169.included
    53                              <1> ;This includes the RTL8169 drivers
    54                              <1> 
    55                              <1> %define rtl8139.included
    56                              <1> ;This includes the RTL8139 drivers
    57                              <1> 
    58                              <1> %define ne2000.included
    59                              <1> ;This includes the ne2000 drivers
    60                              <1> 
    61                              <1> %define i8254x.included
    62                              <1> ;This includes the Intel 8254x drivers
    63                              <1> 
    64                              <1> ;%define sector.debug
    65                              <1> ;Dump the contents of the first sector of SollerOS
    66                              <1> 
    67                              <1> ;%define dos.compatible
    68                              <1> ;Make the kernel loadable by dos.
    69                              <1> 
    70                              <1> ;%define system.simple
    71                              <1> ;The smallest possible system, overrides all options
    72                              <1> 
    73                              <1> ;FIX DEPENDANCIES
    74                              <1> %ifdef system.simple
    75                              <1> 	%undef dos.compatible	;overides all including dos.compatible
    76                              <1> 	%define UNDEFALL
    77                              <1> %endif
    78                              <1> %ifdef dos.compatible
    79                              <1> 	%define UNDEFALL
    80                              <1> %endif
    81                              <1> %ifdef UNDEFALL
    82                              <1> 	%undef io.serial
    83                              <1> 	%undef disk.real
    84                              <1> 	%undef gui.included
    85                              <1> 	%undef gui.alphablending
    86                              <1> 	%undef gui.background
    87                              <1> 	%undef terminal.vsync
    88                              <1> 	%undef font.unicode
    89                              <1> 	%undef hardware.automatic
    90                              <1> 	%undef threads.included
    91                              <1> 	%undef exceptions.included
    92                              <1> 	%undef disk.protected
    93                              <1> 	%undef sound.included
    94                              <1> 	%undef network.included
    95                              <1> 	%undef rtl8139.included
    96                              <1> 	%undef rtl8169.included
    97                              <1> 	%undef ne2000.included
    98                              <1> 	%undef i8254x.included
    99                              <1> 	%undef UNDEFALL
   100                              <1> %endif
   101                              <1> %ifdef system.simple
   102                              <1> 	%define io.serial "1"
   103                              <1> 	%define disk.real
   104                              <1> %endif
   105                              <1> %ifdef gui.included
   106                              <1> 	%undef io.serial
   107                              <1> %else
   108                              <1> 	%undef gui.alphablending
   109                              <1> 	%undef gui.background
   110                              <1> %endif
   111                              <1> %ifdef network.included
   112                              <1> %else
   113                              <1> 	%undef i8254x.included
   114                              <1> 	%undef ne2000.included
   115                              <1> 	%undef rtl8139.included
   116                              <1> 	%undef rtl8169.included
   117                              <1> %endif
   118                              <1> %ifdef disk.protected
   119                              <1> 	%undef disk.real
   120                              <1> %else
   121                              <1> 	%ifdef disk.real
   122                              <1> 	%else
   123                              <1> 		%define disk.none
   124                              <1> 	%endif
   125                              <1> %endif
   126                                  %ifdef dos.compatible
   127                                  	[ORG 0x100]
   128                                  %endif
   129                                  	%include "source/signature.asm"
   130                              <1> header:
   131 00000000 EB12                <1> 	jmp short boot
   132                              <1> signature:
   133 00000002 536F6C6C65724F5320- <1> db "SollerOS ",0 ;Operating system name
   134 0000000B 00                  <1>
   135 0000000C 18010000            <1> dd 280	;version number
   136                              <1> signatureend:
   137 00000010 009A0300                	dd bsscopy - header ;size of kernel data on disk
   138                                  [BITS 16]
   139                                  %include "source/boot.asm"
   140                              <1> boot:
   141 00000014 8CC8                <1> 	mov ax, cs
   142 00000016 8ED8                <1> 	mov ds, ax
   143 00000018 8EC0                <1> 	mov es, ax
   144 0000001A 8ED0                <1> 	mov ss, ax
   145 0000001C 0F31                <1> 	rdtsc
   146 0000001E 66A3[1E96]          <1> 	mov [initialtsc], eax
   147 00000022 668916[2296]        <1> 	mov [initialtsc + 4], edx
   148 00000027 66A3[2696]          <1> 	mov [lasttsc], eax
   149 0000002B 668916[2A96]        <1> 	mov [lasttsc + 4], edx
   150 00000030 880E[1996]          <1> 	mov [DriveNumber], cl
   151 00000034 66891E[1A96]        <1> 	mov [lbaad], ebx
   152                              <1> %ifdef io.serial
   153                              <1> 	call getmemorysize
   154                              <1> 	mov si, serialmsg
   155                              <1> 	call printrm
   156                              <1> 	jmp pmode
   157                              <1> serialmsg: db 10,13,"SollerOS: Using serial port ",io.serial," for I/O.",0
   158                              <1> %else
   159 00000039 E80200              <1> 	call vgaset	;make users switch using a command-this leads to very fast boots
   160 0000003C EB52                <1> 	jmp pmode
   161                              <1> %endif
   162                              <1> 	
   163                              <1> vgaset:
   164 0000003E B81200              <1> 	mov ax, 12h
   165 00000041 31DB                <1> 	xor bx, bx
   166 00000043 CD10                <1> 	int 10h
   167 00000045 C606[1896]00        <1> 	mov byte [guion], 0
   168 0000004A E80100              <1> 	call getmemorysize;get the memory map after the video is initialized
   169 0000004D C3                  <1> 	ret
   170                              <1> 
   171                              <1> getmemorysize:
   172 0000004E BF[2E96]            <1> 	mov di, memlistbuf
   173 00000051 6631DB              <1> 	xor ebx, ebx
   174                              <1> getmemsizeloop:
   175 00000054 66B820E80000        <1> 	mov eax, 0xE820
   176 0000005A 66BA50414D53        <1> 	mov edx, 0x0534D4150
   177 00000060 66B918000000        <1> 	mov ecx, 24
   178 00000066 CD15                <1> 	int 0x15
   179 00000068 83C718              <1> 	add di, 24
   180 0000006B 81FF[6E98]          <1> 	cmp di, memlistend
   181 0000006F 7305                <1> 	jae nomoregetmemsize
   182 00000071 6685DB              <1> 	test ebx, ebx
   183 00000074 75DE                <1> 	jnz getmemsizeloop
   184                              <1> nomoregetmemsize:
   185 00000076 81EF[2E96]          <1> 	sub di, memlistbuf
   186 0000007A 893E[6E98]          <1> 	mov [memlistend], di
   187 0000007E C3                  <1> 	ret
   188                              <1> 	
   189                              <1> printrm:			; 'si' comes in with string address
   190 0000007F BB0700              <1>     mov bx,07		; write to display
   191 00000082 B40E                <1>     mov ah,0Eh		; screen function
   192 00000084 8A04                <1>    .lp:    mov al,[si]         ; get next character
   193 00000086 84C0                <1>     test al,al		; look for terminator 
   194 00000088 7405                <1>     jz .done	; zero byte at end of string
   195 0000008A CD10                <1>     int 10h		; write character to screen.    
   196 0000008C 46                  <1> 	inc si	     	; move to next character
   197 0000008D EBF5                <1>     jmp .lp		; loop
   198 0000008F C3                  <1> .done: ret
   199                                  %include "source/pmode.asm"
   200                              <1> [BITS 16]
   201                              <1> 
   202                              <1> pmode:
   203 00000090 6631C0              <1> 	xor eax, eax
   204 00000093 6631DB              <1> 	xor ebx, ebx
   205 00000096 6631C9              <1> 	xor ecx, ecx
   206 00000099 6631D2              <1> 	xor edx, edx
   207 0000009C 6631F6              <1> 	xor esi, esi
   208 0000009F 6631FF              <1> 	xor edi, edi
   209 000000A2 BA9200              <1> 	mov dx, 0x92
   210 000000A5 EC                  <1> 	in al, dx	;A20
   211 000000A6 0C02                <1> 	or al, 2
   212 000000A8 EE                  <1> 	out dx, al
   213 000000A9 8CCB                <1> 	mov bx,cs		; EBX=segment
   214 000000AB 66C1E304            <1> 	shl ebx,4		;	<< 4
   215 000000AF 6689D8              <1> 	mov eax, ebx		; EAX=linear address of segment base
   216 000000B2 A3[4C04]            <1> 	mov [gdt2 + 2],ax
   217 000000B5 A3[5404]            <1> 	mov [gdt3 + 2],ax
   218 000000B8 66C1E810            <1> 	shr eax,16
   219 000000BC A2[4E04]            <1> 	mov [gdt2 + 4],al
   220 000000BF A2[5604]            <1> 	mov [gdt3 + 4],al
   221 000000C2 8826[5104]          <1> 	mov [gdt2 + 7],ah
   222 000000C6 8826[5904]          <1> 	mov [gdt3 + 7],ah
   223                              <1> 
   224 000000CA 66B8[009A0300]      <1> 	mov eax, initialstack
   225 000000D0 660306[3702]        <1> 	add eax, [newcodecache]
   226 000000D5 A3[4404]            <1> 	mov [gdts + 2],ax
   227 000000D8 66C1E810            <1> 	shr eax, 16
   228 000000DC A2[4604]            <1> 	mov [gdts + 4],al
   229 000000DF 8826[4904]          <1> 	mov [gdts + 7], ah
   230                              <1> 	
   231 000000E3 66A1[3702]          <1> 	mov eax, [newcodecache]
   232 000000E7 A3[5C04]            <1> 	mov [gdt4 + 2],ax
   233 000000EA A3[6404]            <1> 	mov [gdt5 + 2],ax
   234 000000ED A3[6C04]            <1> 	mov [gdtv8086 + 2], ax
   235 000000F0 A3[7404]            <1> 	mov [gdtv80862 + 2], ax
   236 000000F3 66C1E810            <1> 	shr eax,16
   237 000000F7 A2[5E04]            <1> 	mov [gdt4 + 4],al
   238 000000FA A2[6604]            <1> 	mov [gdt5 + 4],al
   239 000000FD A2[6E04]            <1> 	mov [gdtv8086 + 4],al
   240 00000100 A2[7604]            <1> 	mov [gdtv80862 + 4],al
   241 00000103 8826[6104]          <1> 	mov [gdt4 + 7],ah
   242 00000107 8826[6904]          <1> 	mov [gdt5 + 7],ah
   243 0000010B 8826[7104]          <1> 	mov [gdtv8086 + 7],ah
   244 0000010F 8826[7904]          <1> 	mov [gdtv80862 + 7],ah
   245                              <1> 	
   246 00000113 66B800004000        <1> 	mov eax, dosprogloc
   247 00000119 660306[3702]        <1> 	add eax, [newcodecache]
   248 0000011E A3[7C04]            <1> 	mov [gdtdos + 2],ax
   249 00000121 A3[8404]            <1> 	mov [gdtdos2 + 2],ax
   250 00000124 66C1E810            <1> 	shr eax,16
   251 00000128 A2[7E04]            <1> 	mov [gdtdos + 4],al
   252 0000012B A2[8604]            <1> 	mov [gdtdos2 + 4],al
   253 0000012E 8826[8104]          <1> 	mov [gdtdos + 7],ah
   254 00000132 8826[8904]          <1> 	mov [gdtdos2 + 7],ah
   255                              <1> 	
   256                              <1> ; fix up gdt and idt
   257 00000136 67668D83[32040000]  <1> 	lea eax,[ebx + gdt]	; EAX=linear address of gdt
   258 0000013E 66A3[2804]          <1> 	mov [gdtr + 2],eax
   259 00000142 67668D83[8A040000]  <1> 	lea eax,[ebx + idt]	; EAX=linear address of idt
   260 0000014A 66A3[2E04]          <1> 	mov [idtr + 2],eax
   261 0000014E FA                  <1> 	cli
   262 0000014F 0F0116[2604]        <1> 	lgdt [gdtr]
   263 00000154 0F011E[2C04]        <1> 	lidt [idtr]
   264 00000159 6631DB              <1> 	xor ebx, ebx
   265 0000015C 8CDB                <1> 	mov bx, ds
   266 0000015E 66891E[3302]        <1> 	mov [basecache], ebx
   267 00000163 0F20C0              <1> 	mov eax,cr0
   268 00000166 0C01                <1> 	or al,1
   269 00000168 0F22C0              <1> 	mov cr0,eax
   270 0000016B EA[7001]1800        <1> 	jmp SYS_CODE_SEL:do_pm
   271                              <1> [BITS 32]
   272                              <1> do_pm:
   273 00000170 31C0                <1> 	xor eax, eax
   274 00000172 66B82000            <1> 	mov ax, SYS_DATA_SEL
   275 00000176 8ED8                <1> 	mov ds, ax
   276 00000178 8EC0                <1> 	mov es, ax
   277 0000017A 8EE0                <1> 	mov fs, ax
   278 0000017C 66B83000            <1> 	mov ax, NEW_DATA_SEL
   279 00000180 8EE8                <1> 	mov gs, ax
   280                              <1> 	
   281                              <1> copykernel:
   282 00000182 648B06              <1> 	mov eax, [fs:esi]
   283 00000185 658906              <1> 	mov [gs:esi], eax
   284 00000188 83C604              <1> 	add esi, 4
   285 0000018B 81FE[009A0300]      <1> 	cmp esi, bsscopy
   286 00000191 72EF                <1> 	jb copykernel
   287 00000193 EA[9A010000]2800    <1> 	jmp NEW_CODE_SEL:done_copy
   288                              <1> 	
   289                              <1> done_copy:
   290 0000019A 66B83000            <1> 	mov ax, NEW_DATA_SEL	;these MUST be setup AFTER the kernel switches places!!!
   291 0000019E 8ED8                <1> 	mov ds, ax
   292 000001A0 8EC0                <1> 	mov es, ax
   293 000001A2 8EE0                <1> 	mov fs, ax
   294                              <1> 	;mov ax, STACK_SEL
   295 000001A4 8ED0                <1> 	mov ss, ax
   296 000001A6 BC[00BA0300]        <1> 	mov esp, stackend
   297 000001AB 66B82000            <1> 	mov ax, SYS_DATA_SEL
   298 000001AF 8EE8                <1> 	mov gs, ax
   299                              <1> 	
   300 000001B1 E8F1640000          <1> 	call initialize	;initialize drivers
   301                              <1> 	
   302 000001B6 A1[37020000]        <1> 	mov eax, [newcodecache]
   303 000001BB C1E804              <1> 	shr eax, 4
   304 000001BE A3[33020000]        <1> 	mov [basecache], eax
   305                              <1> 	
   306 000001C3 BE[4CE24D00]        <1> 	mov esi, bssend
   307 000001C8 31C0                <1> 	xor eax, eax
   308                              <1> clearkernelbuffers:
   309 000001CA 8906                <1> 	mov [esi], eax
   310 000001CC 83EE04              <1> 	sub esi, 4
   311 000001CF 81FE[009A0300]      <1> 	cmp esi, bsscopy
   312 000001D5 77F3                <1> 	ja clearkernelbuffers
   313 000001D7 FB                  <1> 	sti
   314                              <1> 
   315                              <1> getmemoryspace:
   316 000001D8 BE[2E960000]        <1> 	mov esi, memlistbuf
   317 000001DD 31FF                <1> 	xor edi, edi
   318 000001DF 668B3D[6E980000]    <1> 	mov di, [memlistend]
   319 000001E6 01F7                <1> 	add edi, esi
   320 000001E8 31C0                <1> 	xor eax, eax
   321                              <1> memoryspaceaddition:
   322 000001EA 39FE                <1> 	cmp esi, edi
   323 000001EC 7316                <1> 	jae finishedmemspacecalc
   324 000001EE 83C608              <1> 	add esi, 8
   325 000001F1 8B0E                <1> 	mov ecx, [esi]
   326 000001F3 83C608              <1> 	add esi, 8
   327 000001F6 8B1E                <1> 	mov ebx, [esi]
   328 000001F8 83C608              <1> 	add esi, 8
   329 000001FB 83FB01              <1> 	cmp ebx, 1
   330 000001FE 75EA                <1> 	jne memoryspaceaddition
   331 00000200 01C8                <1> 	add eax, ecx
   332 00000202 EBE6                <1> 	jmp memoryspaceaddition
   333                              <1> finishedmemspacecalc:
   334 00000204 A3[48020000]        <1> 	mov [memoryspace], eax
   335                              <1> %ifdef gui.included
   336 00000209 803D[18960000]00    <1> 	cmp byte [guion], 0
   337 00000210 741C                <1> 	je normalstartup
   338 00000212 8B1D[33020000]      <1> 	mov ebx, [basecache]
   339 00000218 C1E304              <1> 	shl ebx, 4
   340 0000021B 8B3D[815A0000]      <1> 	mov edi, [physbaseptr]
   341 00000221 29DF                <1> 	sub edi, ebx
   342 00000223 893D[815A0000]      <1> 	mov [physbaseptr], edi
   343 00000229 E9576A0000          <1> 	jmp guiboot
   344                              <1> %endif
   345                              <1> normalstartup:
   346 0000022E E960290000          <1> 	jmp os
   347                              <1> 	
   348 00000233 00000000            <1> basecache dd 0
   349 00000237 00001000            <1> newcodecache dd 0x100000
   350                              <1> 
   351 0000023B 00                  <1> testingcpuspeed db 0
   352 0000023C 00000000            <1> cpuspeedperint dd 0
   353 00000240 0000000000000000    <1> cpuclocksperint dd 0,0
   354 00000248 00000000            <1> memoryspace dd 0
   355 0000024C 7D0A                <1> pitdiv dw 2685
   356 0000024E 2E562200            <1> timeinterval dd 2250286
   357                              <1> ;if using the rtc, the default frequency yeilds a period of 976562.5ns
   358                              <1> ;for the pit, note that div=1 gives 838.09ns, the clock runs at 1.193182 MHz
   359                              <1> ;div=451 is 377981.0004, div=902 is 755962.0008,
   360                              <1> ;div=2685 is 2250286.00004ns, div=5370 is 4500572.00007ns
   361                              <1> ;div=55483 is 46500044.000006ns
   362                              <1> ;use one of those values for the minimum error
   363                              <1> 
   364 00000252 00000000            <1> timeseconds dd 0
   365 00000256 00000000            <1> timenanoseconds dd 0
   366 0000025A 00                  <1> soundon db 0
   367 0000025B 0000                <1> soundrepititions dw 0
   368 0000025D 00000000            <1> soundpos dd 0
   369 00000261 00000000            <1> soundendpos dd 0
   370                              <1> 
   371                              <1> cpuspeedend:
   372 00000265 C605[3B020000]00    <1> 	mov byte [testingcpuspeed], 0
   373 0000026C A3[3C020000]        <1> 	mov [cpuspeedperint], eax
   374 00000271 B8[09540000]        <1> 	mov eax, cpuspeedloopend
   375 00000276 890424              <1> 	mov [esp], eax
   376 00000279 E998010000          <1> 	jmp handled
   377                              <1> 
   378                              <1> pitinterrupt: ;this controls threading
   379 0000027E 803D[3B020000]01    <1> 	cmp byte [testingcpuspeed], 1	;check to see if the cpu speed test is running
   380 00000285 74DE                <1> 	je cpuspeedend
   381                              <1> 
   382 00000287 E864010000          <1> 	call timekeeper ;this updates the internal time
   383                              <1> 	
   384 0000028C 803D[5A020000]01    <1> 	cmp byte [soundon], 1
   385 00000293 0F84C05B0000        <1> 	je near PCSpeakerRAW
   386                              <1> timerinterrupt:	;put this into the interrupt handler that controls threading
   387                              <1> %ifdef threads.included
   388 00000299 803D[806C0000]01    <1> 	cmp byte [threadson], 1
   389 000002A0 0F8483690000        <1> 	je near threadswitch
   390                              <1> %endif
   391                              <1> 
   392                              <1> keyinterrupt:		;checks for escape, if pressed, it quits the program currently running
   393 000002A6 E96B010000          <1> 	jmp handled
   394 000002AB 803D[806C0000]00    <1> 	cmp byte [threadson], 0
   395 000002B2 0F845E010000        <1> 	je near handled
   396                              <1> %ifdef io.serial
   397                              <1> 	jmp handled
   398                              <1> %else
   399 000002B8 50                  <1> 	push eax
   400 000002B9 E464                <1> 	in al, 0x64
   401 000002BB A820                <1> 	test al, 0x20
   402 000002BD 0F8554010000        <1> 	jnz near handledeax
   403 000002C3 E460                <1> 	in al, 0x60
   404 000002C5 3C01                <1> 	cmp al, 1		;escape
   405 000002C7 7406                <1> 	je userint
   406 000002C9 58                  <1> 	pop eax
   407 000002CA E947010000          <1> 	jmp handled
   408                              <1> userint:
   409 000002CF 31C0                <1> 	xor eax, eax
   410 000002D1 3905[04BA0300]      <1> 	cmp [sigtable], eax
   411 000002D7 740B                <1> 	je .nosighook
   412 000002D9 FF15[04BA0300]      <1> 	call [sigtable]
   413 000002DF E933010000          <1> 	jmp handledeax
   414                              <1> .nosighook:
   415                              <1> 		;UNMASK ALL INTS
   416 000002E4 E621                <1> 	out 0x21, al
   417 000002E6 E6A1                <1> 	out 0xA1, al
   418 000002E8 B020                <1> 	mov al, 0x20
   419 000002EA E6A0                <1> 	out 0xA0, al
   420 000002EC E620                <1> 	out 0x20, al
   421                              <1> 		;RESET PIT DIVISOR
   422 000002EE 66A1[4C020000]      <1> 	mov ax, [pitdiv]
   423 000002F4 E640                <1> 	out 0x40, al
   424 000002F6 66C1C008            <1> 	rol ax, 8
   425 000002FA E640                <1> 	out 0x40, al
   426                              <1> 		;RESET PIC
   427 000002FC B020                <1> 	mov al, 0x20
   428 000002FE E620                <1> 	out 0x20, al
   429 00000300 58                  <1> 	pop eax
   430 00000301 E9A20A0000          <1> 	jmp unhand + 12
   431                              <1> 	;pop ebp
   432                              <1> 	;pop ebp
   433                              <1> 	;popf
   434                              <1> 	;mov esp, stackend ;reset stack
   435                              <1> 	;jmp returnfromexp
   436                              <1> %endif
   437 00000306 0A                  <1> rtcrate db 10
   438                              <1> rtcint:	;this runs at 64Hz which is perfect for 60Hz displays
   439                              <1> %ifdef io.serial
   440                              <1> %else
   441                              <1> %ifdef terminal.vsync
   442 00000307 803D[29290000]00    <1> 	cmp byte [termcopyneeded], 0
   443 0000030E 7405                <1> 	je .nocopy
   444 00000310 E81D260000          <1> 	call newtermcopy
   445                              <1> .nocopy:
   446 00000315 50                  <1> 	push eax
   447 00000316 B00C                <1> 	mov al, 0xC
   448 00000318 E670                <1> 	out 0x70, al
   449 0000031A E471                <1> 	in al, 0x71
   450 0000031C 58                  <1> 	pop eax
   451                              <1> %endif
   452                              <1> %endif
   453 0000031D E9FB000000          <1> 	jmp handledboth
   454                              <1> %ifdef rtl8139.included
   455 00000322 [3CAA2D00]          <1> nextpacket dd rbuffstart
   456                              <1> rtl8139.irq:
   457 00000326 60                  <1> 	pusha
   458 00000327 668B15[728B0000]    <1> 	mov dx, [rtl8139.basenicaddr]
   459 0000032E 6683C23E            <1> 	add dx, rtl8139.ISR
   460 00000332 31C0                <1> 	xor eax, eax
   461 00000334 66ED                <1> 	in ax, dx
   462 00000336 66EF                <1> 	out dx, ax
   463 00000338 66A90100            <1> 	test ax, 1
   464 0000033C 0F8491000000        <1> 	jz  near .norec
   465 00000342 BE[D6030000]        <1> 	mov esi, packetrecvmsg
   466 00000347 E8901A0000          <1> 	call print
   467 0000034C 8B35[22030000]      <1> 	mov esi, [nextpacket]
   468 00000352 81FE[4CCA2D00]      <1> 	cmp esi, rbuffend
   469 00000358 7205                <1> 	jb .goodesi
   470 0000035A BE[3CAA2D00]        <1> 	mov esi, rbuffstart
   471                              <1> .goodesi:
   472 0000035F 89F1                <1> 	mov ecx, esi
   473 00000361 81E9[3CAA2D00]      <1> 	sub ecx, rbuffstart
   474 00000367 E8812E0000          <1> 	call showhex
   475 0000036C 8B0E                <1> 	mov ecx, [esi]
   476 0000036E F7C101000000        <1> 	test ecx, 1
   477 00000374 7430                <1> 	jz .notgood
   478 00000376 E8722E0000          <1> 	call showhex
   479 0000037B 83C604              <1> 	add esi, 4
   480 0000037E 31FF                <1> 	xor edi, edi
   481 00000380 668B7EFE            <1> 	mov di, [esi - 2]
   482 00000384 89F9                <1> 	mov ecx, edi
   483 00000386 01F7                <1> 	add edi, esi
   484 00000388 83E904              <1> 	sub ecx, 4
   485 0000038B E80C2F0000          <1> 	call showdec
   486                              <1> 
   487 00000390 89F9                <1> 	mov ecx, edi
   488 00000392 81E9[3CAA2D00]      <1> 	sub ecx, rbuffstart
   489 00000398 83C103              <1> 	add ecx, 3
   490 0000039B C1E902              <1> 	shr ecx, 2
   491 0000039E C1E102              <1> 	shl ecx, 2
   492 000003A1 E8472E0000          <1> 	call showhex
   493                              <1> .notgood	
   494 000003A6 668B15[728B0000]    <1> 	mov  dx, [rtl8139.basenicaddr]
   495 000003AD 6683C23A            <1> 	add dx, rtl8139.CBR
   496 000003B1 31C0                <1> 	xor eax, eax
   497 000003B3 66ED                <1> 	in ax, dx
   498 000003B5 89C1                <1> 	mov ecx, eax
   499 000003B7 E8312E0000          <1> 	call showhex
   500                              <1> 	
   501 000003BC 668B15[728B0000]    <1> 	mov dx, [rtl8139.basenicaddr]
   502 000003C3 6683C238            <1> 	add dx, rtl8139.CAPR
   503 000003C7 66EF                <1> 	out dx, ax
   504                              <1> 	
   505 000003C9 05[3CAA2D00]        <1> 	add eax, rbuffstart
   506 000003CE A3[22030000]        <1> 	mov [nextpacket], eax
   507                              <1> 	
   508                              <1> ;	int3
   509                              <1> ;.lp:
   510                              <1> ;	mov cl, [esi]
   511                              <1> ;	call showhexsmall
   512                              <1> ;	inc esi
   513                              <1> ;	cmp esi, [nextpacket]
   514                              <1> ;	jb .lp
   515                              <1> ;	mov ecx, [esi]
   516                              <1> ;	call showhex
   517                              <1> ;	call printline
   518                              <1> .norec:
   519 000003D3 61                  <1> 	popa
   520 000003D4 EB47                <1> 	jmp handledboth
   521 000003D6 0A5061636B65743A20- <1> packetrecvmsg db 10,"Packet: ",0
   522 000003DF 00                  <1>
   523                              <1> %endif
   524                              <1> %ifdef sound.included
   525                              <1> sblaster.irq:
   526 000003E0 60                  <1> 	pusha
   527 000003E1 803D[34610000]01    <1> 	cmp byte [SoundBlaster], 1
   528 000003E8 0F844C5B0000        <1> 	je near sblaster.cont
   529 000003EE EB25                <1> 	jmp handled2
   530                              <1> %endif
   531                              <1> 	
   532                              <1> timekeeper:
   533 000003F0 50                  <1> 	push eax
   534 000003F1 A1[56020000]        <1> 	mov eax, [timenanoseconds]
   535 000003F6 0305[4E020000]      <1> 	add eax, [timeinterval]
   536 000003FC 3D00CA9A3B          <1> 	cmp eax, 1000000000
   537 00000401 720B                <1> 	jb nonanosecondrollover
   538 00000403 FF05[52020000]      <1> 	inc dword [timeseconds]
   539 00000409 2D00CA9A3B          <1> 	sub eax, 1000000000
   540                              <1> 	%ifdef gui.time
   541                              <1> 		;REMOVE THIS IT IS NOT EFFICIENT
   542                              <1> 		cmp byte [guion], 1
   543                              <1> 		jne nonanosecondrollover
   544                              <1> 		cmp dword [dragging], 0
   545                              <1> 		jne nonanosecondrollover
   546                              <1> 		pusha
   547                              <1> 		call guitime
   548                              <1> 		popa
   549                              <1> 	%endif
   550                              <1> nonanosecondrollover:
   551 0000040E A3[56020000]        <1> 	mov [timenanoseconds], eax
   552 00000413 58                  <1> 	pop eax
   553 00000414 C3                  <1> 	ret
   554                              <1> 	
   555                              <1> handled2:
   556 00000415 61                  <1> 	popa
   557                              <1> handled:
   558 00000416 50                  <1> 	push eax
   559                              <1> handledeax:
   560 00000417 B020                <1> 	mov al, 0x20
   561 00000419 E620                <1> 	out 0x20, al
   562 0000041B 58                  <1> 	pop eax
   563 0000041C CF                  <1> 	iret
   564                              <1> handledboth:
   565 0000041D 50                  <1> 	push eax
   566 0000041E B020                <1> 	mov al, 0x20
   567 00000420 E6A0                <1> 	out 0xA0, al
   568 00000422 E620                <1> 	out 0x20, al
   569 00000424 58                  <1> 	pop eax
   570 00000425 CF                  <1> 	iret
   571                              <1> 
   572                              <1> 	
   573                              <1> ;	16-bit limit/32-bit linear base address of GDT and IDT
   574 00000426 5700                <1> gdtr:	dw gdt_end - gdt - 1	; GDT limit
   575 00000428 00000000            <1> 	dd 0    		; filled with linear, physical address of GDT
   576                              <1> 
   577 0000042C FF07                <1> idtr:	dw idt_end - idt - 1	; IDT limit
   578 0000042E 00000000            <1> 	dd 0			; filled with linear, physical address of IDT
   579                              <1> 
   580                              <1> 
   581 00000432 0000                <1> gdt:	dw 0			; limit 15:0
   582 00000434 0000                <1> 	dw 0			; base 15:0
   583 00000436 00                  <1> 	db 0			; base 23:16
   584 00000437 00                  <1> 	db 0			; type
   585 00000438 00                  <1> 	db 0			; limit 19:16, flags
   586 00000439 00                  <1> 	db 0			; base 31:24
   587                              <1> ; linear data segment descriptor
   588                              <1> LINEAR_SEL	equ	$-gdt
   589 0000043A FFFF                <1> 	dw 0xFFFF		; limit 0xFFFFF
   590 0000043C 0000                <1> 	dw 0			; base for this one is always 0
   591 0000043E 00                  <1> 	db 0
   592 0000043F 92                  <1> 	db 0x92			; present, ring 0, data, expand-up, writable
   593 00000440 CF                  <1> 	db 0xCF			; page-granular, 32-bit
   594 00000441 00                  <1> 	db 0
   595                              <1> STACK_SEL	equ $-gdt
   596 00000442 0200                <1> gdts:	dw 2;(stackend)/4096
   597 00000444 0000                <1> 	dw 0
   598 00000446 00                  <1> 	db 0
   599 00000447 92                  <1> 	db 0x92
   600 00000448 CF                  <1> 	db 0xCF
   601 00000449 00                  <1> 	db 0
   602                              <1> ; code segment descriptor
   603                              <1> SYS_CODE_SEL	equ	$-gdt
   604 0000044A FFFF                <1> gdt2:	dw 0xFFFF
   605 0000044C 0000                <1> 	dw 0			; (base gets set above)
   606 0000044E 00                  <1> 	db 0
   607 0000044F 9A                  <1> 	db 0x9A			; present, ring 0, code, non-conforming, readable
   608 00000450 CF                  <1> 	db 0xCF
   609 00000451 00                  <1> 	db 0
   610                              <1> ; data segment descriptor
   611                              <1> SYS_DATA_SEL	equ	$-gdt
   612 00000452 FFFF                <1> gdt3:	dw 0xFFFF
   613 00000454 0000                <1> 	dw 0			; (base gets set above)
   614 00000456 00                  <1> 	db 0
   615 00000457 92                  <1> 	db 0x92			; present, ring 0, data, expand-up, writable
   616 00000458 CF                  <1> 	db 0xCF
   617 00000459 00                  <1> 	db 0
   618                              <1> NEW_CODE_SEL	equ	$-gdt
   619 0000045A FFFF                <1> gdt4:	dw 0xFFFF
   620 0000045C 0000                <1> 	dw 0			; (base gets set above)
   621 0000045E 00                  <1> 	db 0
   622 0000045F 9A                  <1> 	db 0x9A			; present, ring 0, code, non-conforming, readable
   623 00000460 CF                  <1> 	db 0xCF
   624 00000461 00                  <1> 	db 0
   625                              <1> ; data segment descriptor
   626                              <1> NEW_DATA_SEL	equ	$-gdt
   627 00000462 FFFF                <1> gdt5:	dw 0xFFFF
   628 00000464 0000                <1> 	dw 0			; (base gets set above)
   629 00000466 00                  <1> 	db 0
   630 00000467 92                  <1> 	db 0x92			; present, ring 0, data, expand-up, writable
   631 00000468 CF                  <1> 	db 0xCF
   632 00000469 00                  <1> 	db 0
   633                              <1> V8086_CODE_SEL	equ $-gdt
   634 0000046A FFFF                <1> gdtv8086: dw 0xFFFF
   635 0000046C 0000                <1> 	dw 0
   636 0000046E 00                  <1> 	db 0
   637 0000046F 9A                  <1> 	db 0x9A
   638 00000470 8F                  <1> 	db 0x8F
   639 00000471 00                  <1> 	db 0
   640                              <1> V8086_DATA_SEL	equ $-gdt
   641 00000472 FFFF                <1> gdtv80862: dw 0xFFFF
   642 00000474 0000                <1> 	dw 0
   643 00000476 00                  <1> 	db 0
   644 00000477 92                  <1> 	db 0x92
   645 00000478 8F                  <1> 	db 0x8F
   646 00000479 00                  <1> 	db 0
   647                              <1> DOS_CODE_SEL	equ $-gdt	;this gives dos programs complete access to one megabyte at the beginning of memory
   648 0000047A 0001                <1> gdtdos:	dw 256	;give it 1 MB
   649 0000047C 0000                <1> 	dw 0
   650 0000047E 00                  <1> 	db 0
   651 0000047F 9A                  <1> 	db 0x9A
   652 00000480 8F                  <1> 	db 0x8F ;16 bit
   653 00000481 00                  <1> 	db 0
   654                              <1> DOS_DATA_SEL 	equ $-gdt
   655 00000482 0001                <1> gdtdos2:	dw 256
   656 00000484 0000                <1> 	dw 0
   657 00000486 00                  <1> 	db 0
   658 00000487 92                  <1> 	db 0x92
   659 00000488 8F                  <1> 	db 0x8F ;16 bit
   660 00000489 00                  <1> 	db 0
   661                              <1> gdt_end:
   662                              <1> 
   663                              <1> ;	interrupt descriptor table (IDT)
   664                              <1> ; 32 reserved interrupts:
   665                              <1> idt:	
   666                              <1> %assign i 0
   667                              <1> %rep    8
   668                              <1> 		dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   669                              <1> %assign i i+1
   670                              <1> %endrep
   671 0000048A [9C0D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   672                              <2> %assign i i+1
   673 00000492 [A80D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   674                              <2> %assign i i+1
   675 0000049A [B40D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   676                              <2> %assign i i+1
   677 000004A2 [C00D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   678                              <2> %assign i i+1
   679 000004AA [CC0D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   680                              <2> %assign i i+1
   681 000004B2 [D80D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   682                              <2> %assign i i+1
   683 000004BA [E40D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   684                              <2> %assign i i+1
   685 000004C2 [F00D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   686                              <2> %assign i i+1
   687 000004CA [FC0D]1800008E0000  <1> 		dw unhand + 8*12,SYS_CODE_SEL,0x8E00,0	;double fault handler in original memory
   688                              <1> %assign i 9
   689                              <1> %rep    23
   690                              <1> 		dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   691                              <1> %assign i i+1
   692                              <1> %endrep
   693 000004D2 [080E]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   694                              <2> %assign i i+1
   695 000004DA [140E]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   696                              <2> %assign i i+1
   697 000004E2 [200E]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   698                              <2> %assign i i+1
   699 000004EA [2C0E]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   700                              <2> %assign i i+1
   701 000004F2 [380E]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   702                              <2> %assign i i+1
   703 000004FA [440E]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   704                              <2> %assign i i+1
   705 00000502 [500E]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   706                              <2> %assign i i+1
   707 0000050A [5C0E]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   708                              <2> %assign i i+1
   709 00000512 [680E]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   710                              <2> %assign i i+1
   711 0000051A [740E]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   712                              <2> %assign i i+1
   713 00000522 [800E]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   714                              <2> %assign i i+1
   715 0000052A [8C0E]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   716                              <2> %assign i i+1
   717 00000532 [980E]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   718                              <2> %assign i i+1
   719 0000053A [A40E]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   720                              <2> %assign i i+1
   721 00000542 [B00E]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   722                              <2> %assign i i+1
   723 0000054A [BC0E]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   724                              <2> %assign i i+1
   725 00000552 [C80E]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   726                              <2> %assign i i+1
   727 0000055A [D40E]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   728                              <2> %assign i i+1
   729 00000562 [E00E]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   730                              <2> %assign i i+1
   731 0000056A [EC0E]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   732                              <2> %assign i i+1
   733 00000572 [F80E]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   734                              <2> %assign i i+1
   735 0000057A [040F]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   736                              <2> %assign i i+1
   737 00000582 [100F]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   738                              <2> %assign i i+1
   739 0000058A [582A]2800008E0000  <1> 		dw int20h,NEW_CODE_SEL,0x8E00,0 ;dos ints
   740 00000592 [5C2A]2800008E0000  <1> 		dw int21h,NEW_CODE_SEL,0x8E00,0
   741                              <1> %assign i 0x22
   742                              <1> %rep 14
   743                              <1> 		dw handled,NEW_CODE_SEL,0x8E00,0
   744                              <1> %assign i +1
   745                              <1> %endrep
   746 0000059A [1604]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   747                              <2> %assign i +1
   748 000005A2 [1604]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   749                              <2> %assign i +1
   750 000005AA [1604]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   751                              <2> %assign i +1
   752 000005B2 [1604]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   753                              <2> %assign i +1
   754 000005BA [1604]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   755                              <2> %assign i +1
   756 000005C2 [1604]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   757                              <2> %assign i +1
   758 000005CA [1604]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   759                              <2> %assign i +1
   760 000005D2 [1604]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   761                              <2> %assign i +1
   762 000005DA [1604]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   763                              <2> %assign i +1
   764 000005E2 [1604]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   765                              <2> %assign i +1
   766 000005EA [1604]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   767                              <2> %assign i +1
   768 000005F2 [1604]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   769                              <2> %assign i +1
   770 000005FA [1604]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   771                              <2> %assign i +1
   772 00000602 [1604]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   773                              <2> %assign i +1
   774                              <1> ;INT 30h for os use and 3rd party use:
   775 0000060A [7E1C]2800008E0000  <1> 		dw int30h,NEW_CODE_SEL,0x8E00,0
   776                              <1> %assign i 0x31
   777                              <1> %rep 15
   778                              <1> 		dw handled,NEW_CODE_SEL,0x8E00,0
   779                              <1> %assign i +1
   780                              <1> %endrep
   781 00000612 [1604]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   782                              <2> %assign i +1
   783 0000061A [1604]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   784                              <2> %assign i +1
   785 00000622 [1604]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   786                              <2> %assign i +1
   787 0000062A [1604]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   788                              <2> %assign i +1
   789 00000632 [1604]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   790                              <2> %assign i +1
   791 0000063A [1604]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   792                              <2> %assign i +1
   793 00000642 [1604]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   794                              <2> %assign i +1
   795 0000064A [1604]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   796                              <2> %assign i +1
   797 00000652 [1604]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   798                              <2> %assign i +1
   799 0000065A [1604]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   800                              <2> %assign i +1
   801 00000662 [1604]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   802                              <2> %assign i +1
   803 0000066A [1604]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   804                              <2> %assign i +1
   805 00000672 [1604]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   806                              <2> %assign i +1
   807 0000067A [1604]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   808                              <2> %assign i +1
   809 00000682 [1604]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   810                              <2> %assign i +1
   811                              <1> ;and here we are at 0x40
   812                              <1> ;here are all the irq's
   813 0000068A [7E02]2800008E0000  <1> 		dw pitinterrupt,NEW_CODE_SEL,0x8E00,0 ;IRQ 0 = PIT
   814 00000692 [A602]2800008E0000  <1> 		dw keyinterrupt,NEW_CODE_SEL,0x8E00,0 ;IRQ 1 = keyboard
   815 0000069A [1604]2800008E0000  <1> 		dw handled,NEW_CODE_SEL,0x8E00,0 ;IRQ 2
   816 000006A2 [1604]2800008E0000  <1> 		dw handled,NEW_CODE_SEL,0x8E00,0 ;IRQ 3
   817 000006AA [1604]2800008E0000  <1> 		dw handled,NEW_CODE_SEL,0x8E00,0 ;IRQ 4
   818                              <1> 	%ifdef sound.included
   819 000006B2 [E003]2800008E0000  <1> 		dw sblaster.irq,NEW_CODE_SEL,0x8E00,0 ;IRQ 5 = default SoundBlaster
   820                              <1> 	%else
   821                              <1> 		dw handled,NEW_CODE_SEL,0x8E00,0 ;IRQ 5
   822                              <1> 	%endif
   823 000006BA [1604]2800008E0000  <1> 		dw handled,NEW_CODE_SEL,0x8E00,0 ;IRQ 6
   824 000006C2 [1604]2800008E0000  <1> 		dw handled,NEW_CODE_SEL,0x8E00,0 ;IRQ 7
   825 000006CA [0703]2800008E0000  <1> 		dw rtcint,NEW_CODE_SEL,0x8E00,0 ;IRQ 8 = RTC
   826 000006D2 [1D04]2800008E0000  <1> 		dw handledboth,NEW_CODE_SEL,0x8E00,0 ;IRQ 9 = default NE2000
   827 000006DA [1D04]2800008E0000  <1> 		dw handledboth,NEW_CODE_SEL,0x8E00,0 ;IRQ 10
   828                              <1> 	%ifdef rtl8139.included
   829 000006E2 [2603]2800008E0000  <1> 		dw rtl8139.irq,NEW_CODE_SEL,0x8E00,0 ;IRQ 11 = default RTL8139
   830                              <1> 	%else
   831                              <1> 		dw handledboth,NEW_CODE_SEL,0x8E00,0 ;IRQ 11
   832                              <1> 	%endif
   833 000006EA [1D04]2800008E0000  <1> 		dw handledboth,NEW_CODE_SEL,0x8E00,0 ;IRQ 12
   834 000006F2 [1D04]2800008E0000  <1> 		dw handledboth,NEW_CODE_SEL,0x8E00,0 ;IRQ 13
   835 000006FA [1D04]2800008E0000  <1> 		dw handledboth,NEW_CODE_SEL,0x8E00,0 ;IRQ 14
   836 00000702 [1D04]2800008E0000  <1> 		dw handledboth,NEW_CODE_SEL,0x8E00,0 ;IRQ 15
   837                              <1> ;This brings me up to 0x50
   838                              <1> %assign i 0x50
   839                              <1> %rep 176
   840                              <1> 		dw handled, NEW_CODE_SEL,0x8E00,0
   841                              <1> 		;dw unhand + i*12, NEW_CODE_SEL,0x8E00,0
   842                              <1> %assign i +1
   843                              <1> %endrep
   844 0000070A [1604]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   845                              <2> 
   846                              <2> %assign i +1
   847 00000712 [1604]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   848                              <2> 
   849                              <2> %assign i +1
   850 0000071A [1604]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   851                              <2> 
   852                              <2> %assign i +1
   853 00000722 [1604]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   854                              <2> 
   855                              <2> %assign i +1
   856 0000072A [1604]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   857                              <2> 
   858                              <2> %assign i +1
   859 00000732 [1604]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   860                              <2> 
   861                              <2> %assign i +1
   862 0000073A [1604]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   863                              <2> 
   864                              <2> %assign i +1
   865 00000742 [1604]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   866                              <2> 
   867                              <2> %assign i +1
   868 0000074A [1604]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   869                              <2> 
   870                              <2> %assign i +1
   871 00000752 [1604]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   872                              <2> 
   873                              <2> %assign i +1
   874 0000075A [1604]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   875                              <2> 
   876                              <2> %assign i +1
   877 00000762 [1604]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   878                              <2> 
   879                              <2> %assign i +1
   880 0000076A [1604]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   881                              <2> 
   882                              <2> %assign i +1
   883 00000772 [1604]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   884                              <2> 
   885                              <2> %assign i +1
   886 0000077A [1604]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   887                              <2> 
   888                              <2> %assign i +1
   889 00000782 [1604]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   890                              <2> 
   891                              <2> %assign i +1
   892 0000078A [1604]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   893                              <2> 
   894                              <2> %assign i +1
   895 00000792 [1604]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   896                              <2> 
   897                              <2> %assign i +1
   898 0000079A [1604]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   899                              <2> 
   900                              <2> %assign i +1
   901 000007A2 [1604]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   902                              <2> 
   903                              <2> %assign i +1
   904 000007AA [1604]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   905                              <2> 
   906                              <2> %assign i +1
   907 000007B2 [1604]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   908                              <2> 
   909                              <2> %assign i +1
   910 000007BA [1604]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   911                              <2> 
   912                              <2> %assign i +1
   913 000007C2 [1604]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   914                              <2> 
   915                              <2> %assign i +1
   916 000007CA [1604]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   917                              <2> 
   918                              <2> %assign i +1
   919 000007D2 [1604]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   920                              <2> 
   921                              <2> %assign i +1
   922 000007DA [1604]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   923                              <2> 
   924                              <2> %assign i +1
   925 000007E2 [1604]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   926                              <2> 
   927                              <2> %assign i +1
   928 000007EA [1604]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   929                              <2> 
   930                              <2> %assign i +1
   931 000007F2 [1604]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   932                              <2> 
   933                              <2> %assign i +1
   934 000007FA [1604]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   935                              <2> 
   936                              <2> %assign i +1
   937 00000802 [1604]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   938                              <2> 
   939                              <2> %assign i +1
   940 0000080A [1604]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   941                              <2> 
   942                              <2> %assign i +1
   943 00000812 [1604]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   944                              <2> 
   945                              <2> %assign i +1
   946 0000081A [1604]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   947                              <2> 
   948                              <2> %assign i +1
   949 00000822 [1604]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   950                              <2> 
   951                              <2> %assign i +1
   952 0000082A [1604]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   953                              <2> 
   954                              <2> %assign i +1
   955 00000832 [1604]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   956                              <2> 
   957                              <2> %assign i +1
   958 0000083A [1604]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   959                              <2> 
   960                              <2> %assign i +1
   961 00000842 [1604]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   962                              <2> 
   963                              <2> %assign i +1
   964 0000084A [1604]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   965                              <2> 
   966                              <2> %assign i +1
   967 00000852 [1604]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   968                              <2> 
   969                              <2> %assign i +1
   970 0000085A [1604]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   971                              <2> 
   972                              <2> %assign i +1
   973 00000862 [1604]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   974                              <2> 
   975                              <2> %assign i +1
   976 0000086A [1604]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   977                              <2> 
   978                              <2> %assign i +1
   979 00000872 [1604]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   980                              <2> 
   981                              <2> %assign i +1
   982 0000087A [1604]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   983                              <2> 
   984                              <2> %assign i +1
   985 00000882 [1604]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   986                              <2> 
   987                              <2> %assign i +1
   988 0000088A [1604]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   989                              <2> 
   990                              <2> %assign i +1
   991 00000892 [1604]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   992                              <2> 
   993                              <2> %assign i +1
   994 0000089A [1604]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   995                              <2> 
   996                              <2> %assign i +1
   997 000008A2 [1604]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   998                              <2> 
   999                              <2> %assign i +1
  1000 000008AA [1604]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1001                              <2> 
  1002                              <2> %assign i +1
  1003 000008B2 [1604]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1004                              <2> 
  1005                              <2> %assign i +1
  1006 000008BA [1604]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1007                              <2> 
  1008                              <2> %assign i +1
  1009 000008C2 [1604]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1010                              <2> 
  1011                              <2> %assign i +1
  1012 000008CA [1604]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1013                              <2> 
  1014                              <2> %assign i +1
  1015 000008D2 [1604]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1016                              <2> 
  1017                              <2> %assign i +1
  1018 000008DA [1604]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1019                              <2> 
  1020                              <2> %assign i +1
  1021 000008E2 [1604]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1022                              <2> 
  1023                              <2> %assign i +1
  1024 000008EA [1604]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1025                              <2> 
  1026                              <2> %assign i +1
  1027 000008F2 [1604]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1028                              <2> 
  1029                              <2> %assign i +1
  1030 000008FA [1604]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1031                              <2> 
  1032                              <2> %assign i +1
  1033 00000902 [1604]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1034                              <2> 
  1035                              <2> %assign i +1
  1036 0000090A [1604]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1037                              <2> 
  1038                              <2> %assign i +1
  1039 00000912 [1604]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1040                              <2> 
  1041                              <2> %assign i +1
  1042 0000091A [1604]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1043                              <2> 
  1044                              <2> %assign i +1
  1045 00000922 [1604]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1046                              <2> 
  1047                              <2> %assign i +1
  1048 0000092A [1604]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1049                              <2> 
  1050                              <2> %assign i +1
  1051 00000932 [1604]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1052                              <2> 
  1053                              <2> %assign i +1
  1054 0000093A [1604]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1055                              <2> 
  1056                              <2> %assign i +1
  1057 00000942 [1604]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1058                              <2> 
  1059                              <2> %assign i +1
  1060 0000094A [1604]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1061                              <2> 
  1062                              <2> %assign i +1
  1063 00000952 [1604]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1064                              <2> 
  1065                              <2> %assign i +1
  1066 0000095A [1604]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1067                              <2> 
  1068                              <2> %assign i +1
  1069 00000962 [1604]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1070                              <2> 
  1071                              <2> %assign i +1
  1072 0000096A [1604]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1073                              <2> 
  1074                              <2> %assign i +1
  1075 00000972 [1604]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1076                              <2> 
  1077                              <2> %assign i +1
  1078 0000097A [1604]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1079                              <2> 
  1080                              <2> %assign i +1
  1081 00000982 [1604]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1082                              <2> 
  1083                              <2> %assign i +1
  1084 0000098A [1604]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1085                              <2> 
  1086                              <2> %assign i +1
  1087 00000992 [1604]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1088                              <2> 
  1089                              <2> %assign i +1
  1090 0000099A [1604]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1091                              <2> 
  1092                              <2> %assign i +1
  1093 000009A2 [1604]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1094                              <2> 
  1095                              <2> %assign i +1
  1096 000009AA [1604]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1097                              <2> 
  1098                              <2> %assign i +1
  1099 000009B2 [1604]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1100                              <2> 
  1101                              <2> %assign i +1
  1102 000009BA [1604]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1103                              <2> 
  1104                              <2> %assign i +1
  1105 000009C2 [1604]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1106                              <2> 
  1107                              <2> %assign i +1
  1108 000009CA [1604]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1109                              <2> 
  1110                              <2> %assign i +1
  1111 000009D2 [1604]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1112                              <2> 
  1113                              <2> %assign i +1
  1114 000009DA [1604]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1115                              <2> 
  1116                              <2> %assign i +1
  1117 000009E2 [1604]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1118                              <2> 
  1119                              <2> %assign i +1
  1120 000009EA [1604]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1121                              <2> 
  1122                              <2> %assign i +1
  1123 000009F2 [1604]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1124                              <2> 
  1125                              <2> %assign i +1
  1126 000009FA [1604]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1127                              <2> 
  1128                              <2> %assign i +1
  1129 00000A02 [1604]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1130                              <2> 
  1131                              <2> %assign i +1
  1132 00000A0A [1604]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1133                              <2> 
  1134                              <2> %assign i +1
  1135 00000A12 [1604]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1136                              <2> 
  1137                              <2> %assign i +1
  1138 00000A1A [1604]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1139                              <2> 
  1140                              <2> %assign i +1
  1141 00000A22 [1604]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1142                              <2> 
  1143                              <2> %assign i +1
  1144 00000A2A [1604]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1145                              <2> 
  1146                              <2> %assign i +1
  1147 00000A32 [1604]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1148                              <2> 
  1149                              <2> %assign i +1
  1150 00000A3A [1604]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1151                              <2> 
  1152                              <2> %assign i +1
  1153 00000A42 [1604]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1154                              <2> 
  1155                              <2> %assign i +1
  1156 00000A4A [1604]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1157                              <2> 
  1158                              <2> %assign i +1
  1159 00000A52 [1604]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1160                              <2> 
  1161                              <2> %assign i +1
  1162 00000A5A [1604]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1163                              <2> 
  1164                              <2> %assign i +1
  1165 00000A62 [1604]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1166                              <2> 
  1167                              <2> %assign i +1
  1168 00000A6A [1604]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1169                              <2> 
  1170                              <2> %assign i +1
  1171 00000A72 [1604]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1172                              <2> 
  1173                              <2> %assign i +1
  1174 00000A7A [1604]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1175                              <2> 
  1176                              <2> %assign i +1
  1177 00000A82 [1604]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1178                              <2> 
  1179                              <2> %assign i +1
  1180 00000A8A [1604]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1181                              <2> 
  1182                              <2> %assign i +1
  1183 00000A92 [1604]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1184                              <2> 
  1185                              <2> %assign i +1
  1186 00000A9A [1604]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1187                              <2> 
  1188                              <2> %assign i +1
  1189 00000AA2 [1604]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1190                              <2> 
  1191                              <2> %assign i +1
  1192 00000AAA [1604]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1193                              <2> 
  1194                              <2> %assign i +1
  1195 00000AB2 [1604]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1196                              <2> 
  1197                              <2> %assign i +1
  1198 00000ABA [1604]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1199                              <2> 
  1200                              <2> %assign i +1
  1201 00000AC2 [1604]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1202                              <2> 
  1203                              <2> %assign i +1
  1204 00000ACA [1604]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1205                              <2> 
  1206                              <2> %assign i +1
  1207 00000AD2 [1604]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1208                              <2> 
  1209                              <2> %assign i +1
  1210 00000ADA [1604]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1211                              <2> 
  1212                              <2> %assign i +1
  1213 00000AE2 [1604]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1214                              <2> 
  1215                              <2> %assign i +1
  1216 00000AEA [1604]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1217                              <2> 
  1218                              <2> %assign i +1
  1219 00000AF2 [1604]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1220                              <2> 
  1221                              <2> %assign i +1
  1222 00000AFA [1604]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1223                              <2> 
  1224                              <2> %assign i +1
  1225 00000B02 [1604]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1226                              <2> 
  1227                              <2> %assign i +1
  1228 00000B0A [1604]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1229                              <2> 
  1230                              <2> %assign i +1
  1231 00000B12 [1604]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1232                              <2> 
  1233                              <2> %assign i +1
  1234 00000B1A [1604]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1235                              <2> 
  1236                              <2> %assign i +1
  1237 00000B22 [1604]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1238                              <2> 
  1239                              <2> %assign i +1
  1240 00000B2A [1604]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1241                              <2> 
  1242                              <2> %assign i +1
  1243 00000B32 [1604]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1244                              <2> 
  1245                              <2> %assign i +1
  1246 00000B3A [1604]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1247                              <2> 
  1248                              <2> %assign i +1
  1249 00000B42 [1604]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1250                              <2> 
  1251                              <2> %assign i +1
  1252 00000B4A [1604]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1253                              <2> 
  1254                              <2> %assign i +1
  1255 00000B52 [1604]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1256                              <2> 
  1257                              <2> %assign i +1
  1258 00000B5A [1604]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1259                              <2> 
  1260                              <2> %assign i +1
  1261 00000B62 [1604]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1262                              <2> 
  1263                              <2> %assign i +1
  1264 00000B6A [1604]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1265                              <2> 
  1266                              <2> %assign i +1
  1267 00000B72 [1604]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1268                              <2> 
  1269                              <2> %assign i +1
  1270 00000B7A [1604]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1271                              <2> 
  1272                              <2> %assign i +1
  1273 00000B82 [1604]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1274                              <2> 
  1275                              <2> %assign i +1
  1276 00000B8A [1604]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1277                              <2> 
  1278                              <2> %assign i +1
  1279 00000B92 [1604]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1280                              <2> 
  1281                              <2> %assign i +1
  1282 00000B9A [1604]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1283                              <2> 
  1284                              <2> %assign i +1
  1285 00000BA2 [1604]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1286                              <2> 
  1287                              <2> %assign i +1
  1288 00000BAA [1604]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1289                              <2> 
  1290                              <2> %assign i +1
  1291 00000BB2 [1604]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1292                              <2> 
  1293                              <2> %assign i +1
  1294 00000BBA [1604]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1295                              <2> 
  1296                              <2> %assign i +1
  1297 00000BC2 [1604]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1298                              <2> 
  1299                              <2> %assign i +1
  1300 00000BCA [1604]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1301                              <2> 
  1302                              <2> %assign i +1
  1303 00000BD2 [1604]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1304                              <2> 
  1305                              <2> %assign i +1
  1306 00000BDA [1604]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1307                              <2> 
  1308                              <2> %assign i +1
  1309 00000BE2 [1604]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1310                              <2> 
  1311                              <2> %assign i +1
  1312 00000BEA [1604]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1313                              <2> 
  1314                              <2> %assign i +1
  1315 00000BF2 [1604]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1316                              <2> 
  1317                              <2> %assign i +1
  1318 00000BFA [1604]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1319                              <2> 
  1320                              <2> %assign i +1
  1321 00000C02 [1604]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1322                              <2> 
  1323                              <2> %assign i +1
  1324 00000C0A [1604]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1325                              <2> 
  1326                              <2> %assign i +1
  1327 00000C12 [1604]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1328                              <2> 
  1329                              <2> %assign i +1
  1330 00000C1A [1604]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1331                              <2> 
  1332                              <2> %assign i +1
  1333 00000C22 [1604]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1334                              <2> 
  1335                              <2> %assign i +1
  1336 00000C2A [1604]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1337                              <2> 
  1338                              <2> %assign i +1
  1339 00000C32 [1604]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1340                              <2> 
  1341                              <2> %assign i +1
  1342 00000C3A [1604]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1343                              <2> 
  1344                              <2> %assign i +1
  1345 00000C42 [1604]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1346                              <2> 
  1347                              <2> %assign i +1
  1348 00000C4A [1604]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1349                              <2> 
  1350                              <2> %assign i +1
  1351 00000C52 [1604]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1352                              <2> 
  1353                              <2> %assign i +1
  1354 00000C5A [1604]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1355                              <2> 
  1356                              <2> %assign i +1
  1357 00000C62 [1604]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1358                              <2> 
  1359                              <2> %assign i +1
  1360 00000C6A [1604]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1361                              <2> 
  1362                              <2> %assign i +1
  1363 00000C72 [1604]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1364                              <2> 
  1365                              <2> %assign i +1
  1366 00000C7A [1604]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1367                              <2> 
  1368                              <2> %assign i +1
  1369 00000C82 [1604]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1370                              <2> 
  1371                              <2> %assign i +1
  1372                              <1> idt_end:
  1373                                  %include "source/realmode.asm"
  1374                              <1> realmode:	;make sure the real mode program's address is in realmodeptr
  1375                              <1> 
  1376 00000C8A FA                  <1> 	cli
  1377 00000C8B A3[920D0000]        <1> 	mov [realmodeeax], eax
  1378 00000C90 891D[8E0D0000]      <1> 	mov [realmodeebx], ebx
  1379 00000C96 8925[800D0000]      <1> 	mov [pmodeesp], esp
  1380                              <1> 
  1381 00000C9C BB[8A0D0000]        <1> 	mov ebx, cr0old
  1382                              <1> rmcopytofirstmbyte:
  1383 00000CA1 8B03                <1> 	mov eax, [ebx]
  1384 00000CA3 658903              <1> 	mov [gs:ebx], eax
  1385 00000CA6 83C304              <1> 	add ebx, 4
  1386 00000CA9 81FB[960D0000]      <1> 	cmp ebx, realmodeptr
  1387 00000CAF 76F0                <1> 	jbe rmcopytofirstmbyte
  1388                              <1> 
  1389 00000CB1 EA[B80C0000]3800    <1> 	jmp V8086_CODE_SEL:protected16bit
  1390                              <1> 
  1391                              <1> [BITS 16]
  1392                              <1> protected16bit:
  1393 00000CB8 B84000              <1> 	mov ax, V8086_DATA_SEL
  1394 00000CBB 8ED8                <1> 	mov ds, ax
  1395 00000CBD 8EC0                <1> 	mov es, ax
  1396 00000CBF 8EE0                <1> 	mov fs, ax
  1397 00000CC1 8EE8                <1> 	mov gs, ax
  1398 00000CC3 8ED0                <1> 	mov ss, ax
  1399 00000CC5 66BC[00BA0300]      <1> 	mov esp, stackend
  1400 00000CCB 0F20C0              <1> 	mov eax, cr0
  1401 00000CCE 66A3[8A0D]          <1> 	mov [cr0old], eax
  1402 00000CD2 6625FEFFFF7F        <1> 	and eax, 0x7FFFFFFE
  1403 00000CD8 0F22C0              <1> 	mov cr0, eax	;now in real mode
  1404 00000CDB EA[E00C]0010        <1> 	jmp 0x1000:inrealmode
  1405                              <1> 
  1406                              <1> inrealmode:
  1407 00000CE0 8CC8                <1> 	mov ax, cs
  1408 00000CE2 8ED8                <1> 	mov ds, ax
  1409 00000CE4 8EC0                <1> 	mov es, ax
  1410 00000CE6 8EE0                <1> 	mov fs, ax
  1411 00000CE8 8EE8                <1> 	mov gs, ax
  1412 00000CEA 8ED0                <1> 	mov ss, ax
  1413 00000CEC BC[00BA]            <1> 	mov sp, stackend ;because this is at 0x1000: and not 0x10000: it works
  1414                              <1> 	
  1415 00000CEF B011                <1> 	mov al, 0x11
  1416 00000CF1 E620                <1> 	out 0x20, al
  1417 00000CF3 E6A0                <1> 	out 0xA0, al
  1418 00000CF5 B008                <1> 	mov al, 0x8		;interrupt for master
  1419 00000CF7 E621                <1> 	out 0x21, al
  1420 00000CF9 B070                <1> 	mov al, 0x70	;interrupt for slave
  1421 00000CFB E6A1                <1> 	out 0xA1, al
  1422 00000CFD B004                <1> 	mov al, 4
  1423 00000CFF E621                <1> 	out 0x21, al
  1424 00000D01 B002                <1> 	mov al, 2
  1425 00000D03 E6A1                <1> 	out 0xA1, al
  1426 00000D05 B001                <1> 	mov al, 0x1
  1427 00000D07 E621                <1> 	out 0x21, al
  1428 00000D09 B001                <1> 	mov al, 0x1
  1429 00000D0B E6A1                <1> 	out 0xA1, al
  1430                              <1> 	
  1431 00000D0D 0F011E[840D]        <1> 	lidt [idt_real]
  1432 00000D12 FB                  <1> 	sti
  1433                              <1> 
  1434 00000D13 66A1[920D]          <1> 	mov eax, [realmodeeax]
  1435 00000D17 668B1E[8E0D]        <1> 	mov ebx, [realmodeebx]
  1436                              <1> 
  1437 00000D1C FF16[960D]          <1> 	call word [realmodeptr] ;call the real mode program here
  1438                              <1> 
  1439 00000D20 66A3[920D]          <1> 	mov [realmodeeax], eax
  1440 00000D24 66891E[8E0D]        <1> 	mov [realmodeebx], ebx
  1441                              <1> 
  1442 00000D29 FA                  <1> 	cli
  1443 00000D2A 0F0116[2604]        <1> 	lgdt [gdtr]
  1444 00000D2F 0F011E[2C04]        <1> 	lidt [idtr]
  1445 00000D34 0F20C0              <1> 	mov eax, cr0
  1446 00000D37 0C01                <1> 	or al, 1
  1447 00000D39 0F22C0              <1> 	mov cr0,eax
  1448 00000D3C EA[410D]2800        <1> 	jmp NEW_CODE_SEL:returntopmode
  1449                              <1> 
  1450                              <1> [BITS 32]
  1451                              <1> returntopmode:
  1452 00000D41 66B83000            <1> 	mov ax, NEW_DATA_SEL
  1453 00000D45 8ED8                <1> 	mov ds, ax
  1454 00000D47 8EC0                <1> 	mov es, ax
  1455 00000D49 8EE0                <1> 	mov fs, ax
  1456 00000D4B 8ED0                <1> 	mov ss, ax
  1457 00000D4D 8B25[800D0000]      <1> 	mov esp, [pmodeesp]
  1458 00000D53 66B82000            <1> 	mov ax, SYS_DATA_SEL
  1459 00000D57 8EE8                <1> 	mov gs, ax
  1460                              <1> 
  1461 00000D59 BB[8A0D0000]        <1> 	mov ebx, cr0old
  1462                              <1> rmcopyfromfirstmbyte:
  1463 00000D5E 658B03              <1> 	mov eax, [gs:ebx]
  1464 00000D61 8903                <1> 	mov [ebx], eax
  1465 00000D63 83C304              <1> 	add ebx, 4
  1466 00000D66 81FB[960D0000]      <1> 	cmp ebx, realmodeptr
  1467 00000D6C 76F0                <1> 	jbe rmcopyfromfirstmbyte
  1468                              <1> 
  1469 00000D6E E877590000          <1> 	call initialize.pic ;reset irq's and masks
  1470 00000D73 FB                  <1> 	sti
  1471 00000D74 A1[920D0000]        <1> 	mov eax, [realmodeeax]
  1472 00000D79 8B1D[8E0D0000]      <1> 	mov ebx, [realmodeebx]
  1473 00000D7F C3                  <1> 	ret
  1474                              <1> 	
  1475 00000D80 00000000            <1> pmodeesp dd 0
  1476                              <1> idt_real:
  1477 00000D84 FF03                <1> 	dw 0x3FF
  1478 00000D86 00000000            <1> 	dd 0
  1479 00000D8A 00000000            <1> cr0old dd 0
  1480 00000D8E 00000000            <1> realmodeebx dd 0
  1481 00000D92 00000000            <1> realmodeeax dd 0
  1482 00000D96 0000                <1> realmodeptr dw 0
  1483 00000D98 00000000            <1> dd 0 ;make sure the copy thing doesnt overflow
  1484                                  [BITS 32]
  1485                                  %include "source/exception.asm"
  1486                              <1> %ifdef exceptions.included
  1487                              <1> unhand:	
  1488                              <1> 	%assign i 0
  1489                              <1> 	%rep 32
  1490                              <1> 	mov byte [intprob], i
  1491                              <1> 	jmp unhand2
  1492                              <1> 	%assign i i+1
  1493                              <1> 	%endrep
  1494 00000D9C C605[37120000]00    <2>  mov byte [intprob], i
  1495 00000DA3 E947010000          <2>  jmp unhand2
  1496                              <2>  %assign i i+1
  1497 00000DA8 C605[37120000]01    <2>  mov byte [intprob], i
  1498 00000DAF E93B010000          <2>  jmp unhand2
  1499                              <2>  %assign i i+1
  1500 00000DB4 C605[37120000]02    <2>  mov byte [intprob], i
  1501 00000DBB E92F010000          <2>  jmp unhand2
  1502                              <2>  %assign i i+1
  1503 00000DC0 C605[37120000]03    <2>  mov byte [intprob], i
  1504 00000DC7 E923010000          <2>  jmp unhand2
  1505                              <2>  %assign i i+1
  1506 00000DCC C605[37120000]04    <2>  mov byte [intprob], i
  1507 00000DD3 E917010000          <2>  jmp unhand2
  1508                              <2>  %assign i i+1
  1509 00000DD8 C605[37120000]05    <2>  mov byte [intprob], i
  1510 00000DDF E90B010000          <2>  jmp unhand2
  1511                              <2>  %assign i i+1
  1512 00000DE4 C605[37120000]06    <2>  mov byte [intprob], i
  1513 00000DEB E9FF000000          <2>  jmp unhand2
  1514                              <2>  %assign i i+1
  1515 00000DF0 C605[37120000]07    <2>  mov byte [intprob], i
  1516 00000DF7 E9F3000000          <2>  jmp unhand2
  1517                              <2>  %assign i i+1
  1518 00000DFC C605[37120000]08    <2>  mov byte [intprob], i
  1519 00000E03 E9E7000000          <2>  jmp unhand2
  1520                              <2>  %assign i i+1
  1521 00000E08 C605[37120000]09    <2>  mov byte [intprob], i
  1522 00000E0F E9DB000000          <2>  jmp unhand2
  1523                              <2>  %assign i i+1
  1524 00000E14 C605[37120000]0A    <2>  mov byte [intprob], i
  1525 00000E1B E9CF000000          <2>  jmp unhand2
  1526                              <2>  %assign i i+1
  1527 00000E20 C605[37120000]0B    <2>  mov byte [intprob], i
  1528 00000E27 E9C3000000          <2>  jmp unhand2
  1529                              <2>  %assign i i+1
  1530 00000E2C C605[37120000]0C    <2>  mov byte [intprob], i
  1531 00000E33 E9B7000000          <2>  jmp unhand2
  1532                              <2>  %assign i i+1
  1533 00000E38 C605[37120000]0D    <2>  mov byte [intprob], i
  1534 00000E3F E9AB000000          <2>  jmp unhand2
  1535                              <2>  %assign i i+1
  1536 00000E44 C605[37120000]0E    <2>  mov byte [intprob], i
  1537 00000E4B E99F000000          <2>  jmp unhand2
  1538                              <2>  %assign i i+1
  1539 00000E50 C605[37120000]0F    <2>  mov byte [intprob], i
  1540 00000E57 E993000000          <2>  jmp unhand2
  1541                              <2>  %assign i i+1
  1542 00000E5C C605[37120000]10    <2>  mov byte [intprob], i
  1543 00000E63 E987000000          <2>  jmp unhand2
  1544                              <2>  %assign i i+1
  1545 00000E68 C605[37120000]11    <2>  mov byte [intprob], i
  1546 00000E6F EB7E                <2>  jmp unhand2
  1547                              <2>  %assign i i+1
  1548 00000E71 C605[37120000]12    <2>  mov byte [intprob], i
  1549 00000E78 EB75                <2>  jmp unhand2
  1550                              <2>  %assign i i+1
  1551 00000E7A C605[37120000]13    <2>  mov byte [intprob], i
  1552 00000E81 EB6C                <2>  jmp unhand2
  1553                              <2>  %assign i i+1
  1554 00000E83 C605[37120000]14    <2>  mov byte [intprob], i
  1555 00000E8A EB63                <2>  jmp unhand2
  1556                              <2>  %assign i i+1
  1557 00000E8C C605[37120000]15    <2>  mov byte [intprob], i
  1558 00000E93 EB5A                <2>  jmp unhand2
  1559                              <2>  %assign i i+1
  1560 00000E95 C605[37120000]16    <2>  mov byte [intprob], i
  1561 00000E9C EB51                <2>  jmp unhand2
  1562                              <2>  %assign i i+1
  1563 00000E9E C605[37120000]17    <2>  mov byte [intprob], i
  1564 00000EA5 EB48                <2>  jmp unhand2
  1565                              <2>  %assign i i+1
  1566 00000EA7 C605[37120000]18    <2>  mov byte [intprob], i
  1567 00000EAE EB3F                <2>  jmp unhand2
  1568                              <2>  %assign i i+1
  1569 00000EB0 C605[37120000]19    <2>  mov byte [intprob], i
  1570 00000EB7 EB36                <2>  jmp unhand2
  1571                              <2>  %assign i i+1
  1572 00000EB9 C605[37120000]1A    <2>  mov byte [intprob], i
  1573 00000EC0 EB2D                <2>  jmp unhand2
  1574                              <2>  %assign i i+1
  1575 00000EC2 C605[37120000]1B    <2>  mov byte [intprob], i
  1576 00000EC9 EB24                <2>  jmp unhand2
  1577                              <2>  %assign i i+1
  1578 00000ECB C605[37120000]1C    <2>  mov byte [intprob], i
  1579 00000ED2 EB1B                <2>  jmp unhand2
  1580                              <2>  %assign i i+1
  1581 00000ED4 C605[37120000]1D    <2>  mov byte [intprob], i
  1582 00000EDB EB12                <2>  jmp unhand2
  1583                              <2>  %assign i i+1
  1584 00000EDD C605[37120000]1E    <2>  mov byte [intprob], i
  1585 00000EE4 EB09                <2>  jmp unhand2
  1586                              <2>  %assign i i+1
  1587 00000EE6 C605[37120000]1F    <2>  mov byte [intprob], i
  1588 00000EED EB00                <2>  jmp unhand2
  1589                              <2>  %assign i i+1
  1590                              <1> unhand2:
  1591 00000EEF FA                  <1> 	cli
  1592 00000EF0 1E                  <1> 	push ds
  1593 00000EF1 06                  <1> 	push es
  1594 00000EF2 0FA0                <1> 	push fs
  1595 00000EF4 0FA8                <1> 	push gs
  1596 00000EF6 16                  <1> 	push ss
  1597 00000EF7 60                  <1> 	pushad
  1598                              <1> %ifdef gui.included
  1599 00000EF8 803D[18960000]00    <1> 	cmp byte [guion], 0
  1600 00000EFF 0F8432000000        <1> 	je near noguiunhandstuff
  1601 00000F05 66C705[31120000]08- <1> 	mov word [locunhandy], 8
  1602 00000F0D 00                  <1>
  1603 00000F0E 66C705[33120000]08- <1> 	mov word [locunhandx], 8
  1604 00000F16 00                  <1>
  1605 00000F17 668B1D[4F730000]    <1> 	mov bx, [background]
  1606 00000F1E 66891D[35120000]    <1> 	mov [backgroundcache], bx
  1607 00000F25 C605[5D5B0000]01    <1> 	mov byte [mousedisabled],1
  1608 00000F2C 66BB00F8            <1> 	mov bx, 1111100000000000b
  1609 00000F30 66891D[4F730000]    <1> 	mov [background], bx
  1610                              <1> noguiunhandstuff:
  1611                              <1> %endif
  1612 00000F37 89E6                <1> 	mov esi, esp
  1613 00000F39 8935[25120000]      <1> 	mov [espfirst], esi
  1614 00000F3F 81C6BC000000        <1> 	add esi, ((unhndrgend - unhndrg)/15)*4
  1615 00000F45 8935[21120000]      <1> 	mov [esploc], esi
  1616 00000F4B BE[46120000]        <1> 	mov esi, unhandmsg
  1617 00000F50 8935[29120000]      <1> 	mov [esiloc], esi
  1618 00000F56 31C9                <1> 	xor ecx, ecx
  1619 00000F58 8A0D[37120000]      <1> 	mov cl, [intprob]
  1620 00000F5E BB[15160000]        <1> 	mov ebx, errortypes
  1621 00000F63 C1E102              <1> 	shl ecx, 2
  1622 00000F66 01CB                <1> 	add ebx, ecx
  1623 00000F68 81FB[55160000]      <1> 	cmp ebx, errortypesend
  1624 00000F6E 7205                <1> 	jb gooderrortype
  1625 00000F70 BB[55160000]        <1> 	mov ebx, errortypesend
  1626                              <1> gooderrortype:
  1627 00000F75 8B33                <1> 	mov esi, [ebx]
  1628                              <1> %ifdef gui.included
  1629 00000F77 803D[18960000]00    <1> 	cmp byte [guion], 0
  1630 00000F7E 0F842A000000        <1> 	je near errortext
  1631 00000F84 668B0D[31120000]    <1> 	mov cx, [locunhandy]
  1632 00000F8B 668B15[33120000]    <1> 	mov dx, [locunhandx]
  1633 00000F92 66B80100            <1> 	mov ax, 1
  1634 00000F96 6631DB              <1> 	xor bx, bx
  1635 00000F99 E8FB690000          <1> 	call showstring2
  1636 00000F9E 66890D[31120000]    <1> 	mov [locunhandy], cx
  1637 00000FA5 668915[33120000]    <1> 	mov [locunhandx], dx
  1638 00000FAC EB05                <1> 	jmp errortextdone
  1639                              <1> %endif
  1640                              <1> errortext:
  1641 00000FAE E8290E0000          <1> 	call print		;get the error message and print it
  1642                              <1> errortextdone:
  1643 00000FB3 31C9                <1> 	xor ecx, ecx
  1644 00000FB5 8A0D[37120000]      <1> 	mov cl, [intprob]
  1645 00000FBB E806020000          <1> 	call expdump
  1646                              <1> dumpstack:
  1647 00000FC0 8B35[21120000]      <1> 	mov esi, [esploc]
  1648 00000FC6 39E6                <1> 	cmp esi, esp
  1649 00000FC8 7213                <1> 	jb donedump
  1650 00000FCA 368B0E              <1> 	mov ecx, [ss:esi]
  1651 00000FCD 83EE04              <1> 	sub esi, 4
  1652 00000FD0 8935[21120000]      <1> 	mov [esploc], esi
  1653 00000FD6 E8EB010000          <1> 	call expdump
  1654 00000FDB EBE3                <1> 	jmp dumpstack
  1655                              <1> donedump:
  1656 00000FDD 0F20C1              <1> 	mov ecx, cr0
  1657 00000FE0 E8E1010000          <1> 	call expdump
  1658 00000FE5 0F20D1              <1> 	mov ecx, cr2
  1659 00000FE8 E8D9010000          <1> 	call expdump
  1660 00000FED 0F20D9              <1> 	mov ecx, cr3
  1661 00000FF0 E8D1010000          <1> 	call expdump
  1662 00000FF5 0F20E1              <1> 	mov ecx, cr4
  1663 00000FF8 E8C9010000          <1> 	call expdump
  1664 00000FFD 0F00C9              <1> 	str ecx
  1665 00001000 E8C1010000          <1> 	call expdump
  1666 00001005 0F010D[40120000]    <1> 	sidt [igdtcache]
  1667 0000100C 8B0D[42120000]      <1> 	mov ecx, [igdtcache + 2]
  1668 00001012 E8AF010000          <1> 	call expdump
  1669 00001017 0F0105[40120000]    <1> 	sgdt [igdtcache]
  1670 0000101E 8B0D[42120000]      <1> 	mov ecx, [igdtcache + 2]
  1671 00001024 E89D010000          <1> 	call expdump
  1672 00001029 0F00C1              <1> 	sldt ecx
  1673 0000102C E895010000          <1> 	call expdump
  1674 00001031 8B35[21120000]      <1> 	mov esi, [esploc]
  1675 00001037 368B7C2434          <1> 	mov edi, [ss:esp + 52]
  1676 0000103C 83C710              <1> 	add edi, 16
  1677 0000103F 893D[3C120000]      <1> 	mov [codelocend], edi
  1678 00001045 83EF20              <1> 	sub edi, 32
  1679                              <1> dumpcodeloop:
  1680 00001048 893D[38120000]      <1> 	mov [codeloc], edi
  1681 0000104E 8B0F                <1> 	mov ecx, [edi]
  1682 00001050 E871010000          <1> 	call expdump
  1683 00001055 8B3D[38120000]      <1> 	mov edi, [codeloc]
  1684 0000105B 83C704              <1> 	add edi, 4
  1685 0000105E 3B3D[3C120000]      <1> 	cmp edi, [codelocend]
  1686 00001064 72E2                <1> 	jb dumpcodeloop
  1687 00001066 BE[41110000]        <1> 	mov esi, backtoosmsg
  1688                              <1> %ifdef gui.included
  1689 0000106B 803D[18960000]00    <1> 	cmp byte [guion], 0
  1690 00001072 741C                <1> 	je backtomsg
  1691                              <1> guibacktomsg:
  1692 00001074 668B15[33120000]    <1> 	mov dx, [locunhandx]
  1693 0000107B 668B0D[31120000]    <1> 	mov cx, [locunhandy]
  1694 00001082 66B80100            <1> 	mov ax, 1
  1695 00001086 6631DB              <1> 	xor bx, bx
  1696 00001089 E80B690000          <1> 	call showstring2
  1697 0000108E EB05                <1> 	jmp backtomsgdone
  1698                              <1> backtomsg:
  1699                              <1> %endif
  1700 00001090 E8470D0000          <1> 	call print
  1701                              <1> backtomsgdone:
  1702 00001095 30C0                <1> 	xor al, al
  1703 00001097 E81C130000          <1> 	call rdcharint
  1704 0000109C 3D00000100          <1> 	cmp eax, 0x10000
  1705 000010A1 745E                <1> 	je nodebugint
  1706 000010A3 803D[37120000]01    <1> 	cmp byte [intprob], 1
  1707 000010AA 7414                <1> 	je debugint
  1708 000010AC 803D[37120000]03    <1> 	cmp byte [intprob], 3
  1709 000010B3 740B                <1> 	je debugint
  1710 000010B5 803D[37120000]04    <1> 	cmp byte [intprob], 4
  1711 000010BC 7402                <1> 	je debugint
  1712 000010BE EB41                <1> 	jmp nodebugint
  1713                              <1> debugint:
  1714                              <1> %ifdef gui.included
  1715 000010C0 803D[18960000]00    <1> 	cmp byte [guion], 0
  1716 000010C7 7427                <1> 	je nodebuggui
  1717 000010C9 668B1D[35120000]    <1> 	mov bx, [backgroundcache]
  1718 000010D0 66891D[4F730000]    <1> 	mov [background], bx
  1719 000010D7 6631DB              <1> 	xor bx, bx
  1720 000010DA C605[5D5B0000]00    <1> 	mov byte [mousedisabled], 0
  1721 000010E1 E8EC610000          <1> 	call guiclear
  1722 000010E6 E868620000          <1> 	call reloadallgraphics
  1723 000010EB E831180000          <1> 	call termcopy
  1724                              <1> nodebuggui:
  1725                              <1> %endif
  1726 000010F0 8B35[25120000]      <1> 	mov esi, [espfirst]
  1727 000010F6 89F4                <1> 	mov esp, esi
  1728 000010F8 61                  <1> 	popad
  1729 000010F9 17                  <1> 	pop ss
  1730 000010FA 0FA9                <1> 	pop gs
  1731 000010FC 0FA1                <1> 	pop fs
  1732 000010FE 07                  <1> 	pop es
  1733 000010FF 1F                  <1> 	pop ds
  1734 00001100 CF                  <1> 	iret
  1735                              <1> nodebugint:
  1736 00001101 61                  <1> 	popad
  1737 00001102 17                  <1> 	pop ss
  1738 00001103 0FA9                <1> 	pop gs
  1739 00001105 0FA1                <1> 	pop fs
  1740 00001107 07                  <1> 	pop es
  1741 00001108 1F                  <1> 	pop ds
  1742 00001109 83C408              <1> 	add esp, 8
  1743                              <1> ;	popf ;pop the cs segment selector into eflags
  1744                              <1> ;	popf ;then pop the flags
  1745                              <1> %ifdef gui.included
  1746 0000110C 803D[18960000]00    <1> 	cmp byte [guion], 0
  1747 00001113 7427                <1> 	je .nogui
  1748 00001115 668B1D[35120000]    <1> 	mov bx, [backgroundcache]
  1749 0000111C 66891D[4F730000]    <1> 	mov [background], bx
  1750 00001123 6631DB              <1> 	xor bx, bx
  1751 00001126 C605[5D5B0000]00    <1> 	mov byte [mousedisabled], 0
  1752 0000112D E8A0610000          <1> 	call guiclear
  1753 00001132 E81C620000          <1> 	call reloadallgraphics
  1754 00001137 E8E5170000          <1> 	call termcopy
  1755                              <1> .nogui:
  1756                              <1> %endif
  1757 0000113C E9865A0000          <1> 	jmp nwcmdst
  1758 00001141 506C6561736520706F- <1> backtoosmsg db "Please post any problems in the Issues section at solleros.googlecode.com",10
  1759 0000114A 737420616E79207072- <1>
  1760 00001153 6F626C656D7320696E- <1>
  1761 0000115C 207468652049737375- <1>
  1762 00001165 65732073656374696F- <1>
  1763 0000116E 6E20617420736F6C6C- <1>
  1764 00001177 65726F732E676F6F67- <1>
  1765 00001180 6C65636F64652E636F- <1>
  1766 00001189 6D0A                <1>
  1767 0000118B 507265737320455343- <1> 			db "Press ESC to return to SollerOS or any key to continue...",10,0
  1768 00001194 20746F207265747572- <1>
  1769 0000119D 6E20746F20536F6C6C- <1>
  1770 000011A6 65724F53206F722061- <1>
  1771 000011AF 6E79206B657920746F- <1>
  1772 000011B8 20636F6E74696E7565- <1>
  1773 000011C1 2E2E2E0A00          <1>
  1774                              <1> expdump:
  1775 000011C6 8B35[29120000]      <1> 	mov esi, [esiloc]
  1776 000011CC 89F7                <1> 	mov edi, esi
  1777 000011CE 83C70F              <1> 	add edi, 15
  1778 000011D1 83C604              <1> 	add esi, 4
  1779 000011D4 893D[29120000]      <1> 	mov [esiloc], edi
  1780 000011DA 83EF03              <1> 	sub edi, 3
  1781 000011DD E8A01F0000          <1> 	call converthex
  1782 000011E2 83EE04              <1> 	sub esi, 4
  1783                              <1> %ifdef gui.included
  1784 000011E5 803D[18960000]00    <1> 	cmp byte [guion], 0
  1785 000011EC 0F8429000000        <1> 	je near expdumptext
  1786 000011F2 668B0D[31120000]    <1> 	mov cx, [locunhandy]
  1787 000011F9 668B15[33120000]    <1> 	mov dx, [locunhandx]
  1788 00001200 66B80100            <1> 	mov ax, 1
  1789 00001204 6631DB              <1> 	xor bx, bx
  1790 00001207 E88D670000          <1> 	call showstring2
  1791 0000120C 66890D[31120000]    <1> 	mov [locunhandy], cx
  1792 00001213 668915[33120000]    <1> 	mov [locunhandx], dx
  1793 0000121A C3                  <1> 	ret
  1794                              <1> %endif
  1795                              <1> expdumptext:
  1796 0000121B E8BC0B0000          <1> 	call print
  1797 00001220 C3                  <1> 	ret
  1798 00001221 00000000            <1> esploc dd 0
  1799 00001225 00000000            <1> espfirst dd 0
  1800 00001229 00000000            <1> esiloc dd 0
  1801 0000122D 00000000            <1> esiregbuf dd 0
  1802 00001231 0100                <1> locunhandy dw 1
  1803 00001233 0100                <1> locunhandx dw 1
  1804 00001235 0000                <1> backgroundcache dw 0
  1805 00001237 00                  <1> intprob db 0
  1806 00001238 00000000            <1> codeloc dd 0
  1807 0000123C 00000000            <1> codelocend dd 0
  1808 00001240 000000000000        <1> igdtcache dw 0,0,0
  1809                              <1> 	unhandmsg:	
  1810 00001246 494E543D3030303030- <1> 			db "INT=00000000",255,10,0
  1811 0000124F 303030FF0A00        <1>
  1812                              <1> unhndrg:
  1813 00001255 FFFFFFFF3030303030- <1> 	times 7 db 255,255,255,255,"00000000  ",0	;this dumps the stack before the stack frame in question
  1814 0000125E 303030202000<rept>  <1>
  1815 000012BE FFFFFFFF3030303030- <1> 			db 255,255,255,255,"00000000",255,10,0
  1816 000012C7 303030FF0A00        <1>
  1817 000012CD FFFFFFFF3030303030- <1> 	times 7 db 255,255,255,255,"00000000  ",0
  1818 000012D6 303030202000<rept>  <1>
  1819 00001336 FFFFFFFF3030303030- <1> 			db 255,255,255,255,"00000000",255,10,0
  1820 0000133F 303030FF0A00        <1>
  1821 00001345 FFFFFFFF3030303030- <1> 	times 7 db 255,255,255,255,"00000000  ",0
  1822 0000134E 303030202000<rept>  <1>
  1823 000013AE FFFFFFFF3030303030- <1> 			db 255,255,255,255,"00000000",255,10,0
  1824 000013B7 303030FF0A00        <1>
  1825 000013BD FFFFFFFF3030303030- <1> 	times 7 db 255,255,255,255,"00000000  ",0
  1826 000013C6 303030202000<rept>  <1>
  1827 00001426 FFFFFFFF3030303030- <1> 			db 255,255,255,255,"00000000",255,10,0
  1828 0000142F 303030FF0A00        <1>
  1829                              <1> unhandregs:
  1830 00001435 45464C3D3030303030- <1> 			db "EFL=00000000  ",0
  1831 0000143E 303030202000        <1>
  1832 00001444 43533A3D3030303030- <1> 			db "CS:=00000000  ",0
  1833 0000144D 303030202000        <1>
  1834 00001453 4549503D3030303030- <1> 			db "EIP=00000000",255,10,0
  1835 0000145C 303030FF0A00        <1>
  1836 00001462 44533A3D3030303030- <1> 			db "DS:=00000000  ",0
  1837 0000146B 303030202000        <1>
  1838 00001471 45533A3D3030303030- <1> 			db "ES:=00000000  ",0
  1839 0000147A 303030202000        <1>
  1840 00001480 46533A3D3030303030- <1> 			db "FS:=00000000  ",0
  1841 00001489 303030202000        <1>
  1842 0000148F 47533A3D3030303030- <1> 			db "GS:=00000000  ",0
  1843 00001498 303030202000        <1>
  1844 0000149E 53533A3D3030303030- <1> 			db "SS:=00000000",255,10,0
  1845 000014A7 303030FF0A00        <1>
  1846 000014AD 4541583D3030303030- <1> 			db "EAX=00000000  ",0
  1847 000014B6 303030202000        <1>
  1848 000014BC 4543583D3030303030- <1> 			db "ECX=00000000  ",0
  1849 000014C5 303030202000        <1>
  1850 000014CB 4544583D3030303030- <1> 			db "EDX=00000000  ",0
  1851 000014D4 303030202000        <1>
  1852 000014DA 4542583D3030303030- <1> 			db "EBX=00000000",255,10,0
  1853 000014E3 303030FF0A00        <1>
  1854 000014E9 4553503D3030303030- <1> 			db "ESP=00000000  ",0
  1855 000014F2 303030202000        <1>
  1856 000014F8 4542503D3030303030- <1> 			db "EBP=00000000  ",0
  1857 00001501 303030202000        <1>
  1858 00001507 4553493D3030303030- <1> 			db "ESI=00000000  ",0
  1859 00001510 303030202000        <1>
  1860 00001516 4544493D3030303030- <1> unhndrgend:	db "EDI=00000000",255,10,0
  1861 0000151F 303030FF0A00        <1>
  1862 00001525 4352303D3030303030- <1> 			db "CR0=00000000  ",0
  1863 0000152E 303030202000        <1>
  1864 00001534 4352323D3030303030- <1> 			db "CR2=00000000  ",0
  1865 0000153D 303030202000        <1>
  1866 00001543 4352333D3030303030- <1> 			db "CR3=00000000  ",0
  1867 0000154C 303030202000        <1>
  1868 00001552 4352343D3030303030- <1> 			db "CR4=00000000",255,10,0
  1869 0000155B 303030FF0A00        <1>
  1870 00001561 54523A3D3030303030- <1> 			db "TR:=00000000  ",0
  1871 0000156A 303030202000        <1>
  1872 00001570 4944543D3030303030- <1> 			db "IDT=00000000  ",0
  1873 00001579 303030202000        <1>
  1874 0000157F 4744543D3030303030- <1> 			db "GDT=00000000  ",0
  1875 00001588 303030202000        <1>
  1876 0000158E 4C44543D3030303030- <1> 			db "LDT=00000000",255,10,0
  1877 00001597 303030FF0A00        <1>
  1878 0000159D FFFFFFFF3030303030- <1> unhandcode: times 2 db 255,255,255,255,"00000000  ",0	;this dumps the code before and after the interrupt in question
  1879 000015A6 303030202000<rept>  <1>
  1880 000015BB FFFFFFFF3030303030- <1> 			db 255,255,255,255,"00000000 ",255,0
  1881 000015C4 30303020FF00        <1>
  1882 000015CA FFFFFF5B3030303030- <1> 			db 255,255,255,"[00000000] ",0
  1883 000015D3 3030305D2000        <1>
  1884 000015D9 FFFFFFFF3030303030- <1> 			times 3 db 255,255,255,255,"00000000  ",0
  1885 000015E2 303030202000<rept>  <1>
  1886 00001606 FFFFFFFF3030303030- <1> 			db 255,255,255,255,"00000000",255,10,0
  1887 0000160F 303030FF0A00        <1>
  1888                              <1> unhandmsgend:
  1889                              <1> 
  1890                              <1> errortypes:
  1891 00001615 [59160000]          <1> 			dd err0
  1892 00001619 [C2160000]          <1> 			dd err1
  1893 0000161D [23170000]          <1> 			dd err2
  1894 00001621 [78170000]          <1> 			dd err3
  1895 00001625 [DC170000]          <1> 			dd err4
  1896 00001629 [2E180000]          <1> 			dd err5
  1897 0000162D [98180000]          <1> 			dd err6
  1898 00001631 [00190000]          <1> 			dd err7
  1899 00001635 [4A190000]          <1> 			dd err8
  1900 00001639 [A7190000]          <1> 			dd err9
  1901 0000163D [001A0000]          <1> 			dd err10
  1902 00001641 [4B1A0000]          <1> 			dd err11
  1903 00001645 [9B1A0000]          <1> 			dd err12
  1904 00001649 [F41A0000]          <1> 			dd err13
  1905 0000164D [571B0000]          <1> 			dd err14
  1906 00001651 [931B0000]          <1> 			dd err15
  1907                              <1> errortypesend:
  1908 00001655 [1F1C0000]          <1> 			dd unknownerror
  1909                              <1> 			
  1910 00001659 4469766973696F6E20- <1> err0	db "Division by zero:",10
  1911 00001662 6279207A65726F3A0A  <1>
  1912 0000166B 546563686E6963616C- <1> 		db "Technically lim a÷x = ∞ when a is any real number. Happy Easter!",10
  1913 00001674 6C79206C696D2061C3- <1>
  1914 0000167D B778203D20E2889E20- <1>
  1915 00001686 7768656E2061206973- <1>
  1916 0000168F 20616E79207265616C- <1>
  1917 00001698 206E756D6265722E20- <1>
  1918 000016A1 486170707920456173- <1>
  1919 000016AA 746572210A          <1>
  1920 000016AF 202020202020202020- <1> 		db "            x→0",10,0
  1921 000016B8 20202078E28692300A- <1>
  1922 000016C1 00                  <1>
  1923                              <1> 		
  1924 000016C2 53696E676C652D7374- <1> err1	db "Single-step/Breakpoint:",10
  1925 000016CB 65702F427265616B70- <1>
  1926 000016D4 6F696E743A0A        <1>
  1927 000016DA 4120627265616B706F- <1> 		db "A breakpoint fault, breakpoint trap, or single-step trap was triggered.",10,0
  1928 000016E3 696E74206661756C74- <1>
  1929 000016EC 2C20627265616B706F- <1>
  1930 000016F5 696E7420747261702C- <1>
  1931 000016FE 206F722073696E676C- <1>
  1932 00001707 652D73746570207472- <1>
  1933 00001710 617020776173207472- <1>
  1934 00001719 696767657265642E0A- <1>
  1935 00001722 00                  <1>
  1936                              <1> 		
  1937 00001723 4E6F6E6D61736B6162- <1> err2	db "Nonmaskable interrupt:",10
  1938 0000172C 6C6520696E74657272- <1>
  1939 00001735 7570743A0A          <1>
  1940 0000173A 412068617264776172- <1> 		db "A hardware interrupt was triggered that could not be masked.",10,0
  1941 00001743 6520696E7465727275- <1>
  1942 0000174C 707420776173207472- <1>
  1943 00001755 696767657265642074- <1>
  1944 0000175E 68617420636F756C64- <1>
  1945 00001767 206E6F74206265206D- <1>
  1946 00001770 61736B65642E0A00    <1>
  1947                              <1> 		
  1948 00001778 427265616B706F696E- <1> err3	db "Breakpoint:",10
  1949 00001781 743A0A              <1>
  1950 00001784 5468697320696E7465- <1> 		db "This interrupt is used in programs to show the stack and registers and can be",10
  1951 0000178D 727275707420697320- <1>
  1952 00001796 7573656420696E2070- <1>
  1953 0000179F 726F6772616D732074- <1>
  1954 000017A8 6F2073686F77207468- <1>
  1955 000017B1 6520737461636B2061- <1>
  1956 000017BA 6E6420726567697374- <1>
  1957 000017C3 65727320616E642063- <1>
  1958 000017CC 616E2062650A        <1>
  1959 000017D2 69676E6F7265642E0A- <1> 		db "ignored.",10,0
  1960 000017DB 00                  <1>
  1961                              <1> 		
  1962 000017DC 4F766572666C6F773A- <1> err4	db "Overflow:",10
  1963 000017E5 0A                  <1>
  1964 000017E6 5468652070726F6365- <1> 		db "The processor ran into an INTO instruction with the overflow flag set.",10,0
  1965 000017EF 73736F722072616E20- <1>
  1966 000017F8 696E746F20616E2049- <1>
  1967 00001801 4E544F20696E737472- <1>
  1968 0000180A 756374696F6E207769- <1>
  1969 00001813 746820746865206F76- <1>
  1970 0000181C 6572666C6F7720666C- <1>
  1971 00001825 6167207365742E0A00  <1>
  1972                              <1> 		
  1973 0000182E 426F756E6473206368- <1> err5	db "Bounds check:",10
  1974 00001837 65636B3A0A          <1>
  1975 0000183C 5468652070726F6365- <1> 		db "The processor rebounded from a BOUND instruction run on an operand that was out",10
  1976 00001845 73736F72207265626F- <1>
  1977 0000184E 756E6465642066726F- <1>
  1978 00001857 6D206120424F554E44- <1>
  1979 00001860 20696E737472756374- <1>
  1980 00001869 696F6E2072756E206F- <1>
  1981 00001872 6E20616E206F706572- <1>
  1982 0000187B 616E64207468617420- <1>
  1983 00001884 776173206F75740A    <1>
  1984 0000188C 6F6620626F756E6473- <1> 		db "of bounds.",10,0
  1985 00001895 2E0A00              <1>
  1986                              <1> 		
  1987 00001898 496E76616C6964206F- <1> err6	db "Invalid opcode:",10
  1988 000018A1 70636F64653A0A      <1>
  1989 000018A8 5468652070726F6365- <1> 		db "The processor has no idea what it was trying to execute. Don't run SSE4 code",10
  1990 000018B1 73736F722068617320- <1>
  1991 000018BA 6E6F20696465612077- <1>
  1992 000018C3 686174206974207761- <1>
  1993 000018CC 7320747279696E6720- <1>
  1994 000018D5 746F20657865637574- <1>
  1995 000018DE 652E20446F6E277420- <1>
  1996 000018E7 72756E205353453420- <1>
  1997 000018F0 636F64650A          <1>
  1998 000018F5 6F6E20343836277321- <1> 		db "on 486's!",10,0
  1999 000018FE 0A00                <1>
  2000                              <1> 		
  2001 00001900 436F70726F63657373- <1> err7	db "Coprocessor not available:",10
  2002 00001909 6F72206E6F74206176- <1>
  2003 00001912 61696C61626C653A0A  <1>
  2004 0000191B 446F6E277420796F75- <1> 		db "Don't you know they don't make those anymore!",10,0
  2005 00001924 206B6E6F7720746865- <1>
  2006 0000192D 7920646F6E2774206D- <1>
  2007 00001936 616B652074686F7365- <1>
  2008 0000193F 20616E796D6F726521- <1>
  2009 00001948 0A00                <1>
  2010                              <1> 		
  2011 0000194A 446F75626C65206661- <1> err8	db "Double fault:",10
  2012 00001953 756C743A0A          <1>
  2013 00001958 546865206578636570- <1> 		db "The exception handler could not handle that it could not handle an exception.",10,0
  2014 00001961 74696F6E2068616E64- <1>
  2015 0000196A 6C657220636F756C64- <1>
  2016 00001973 206E6F742068616E64- <1>
  2017 0000197C 6C6520746861742069- <1>
  2018 00001985 7420636F756C64206E- <1>
  2019 0000198E 6F742068616E646C65- <1>
  2020 00001997 20616E206578636570- <1>
  2021 000019A0 74696F6E2E0A00      <1>
  2022                              <1> 		
  2023 000019A7 436F70726F63657373- <1> err9	db "Coprocessor segment overrun:",10,0
  2024 000019B0 6F72207365676D656E- <1>
  2025 000019B9 74206F76657272756E- <1>
  2026 000019C2 3A0A00              <1>
  2027 000019C5 54686973206E657665- <1> 		db "This never happens in modern computers, and never should.",10,0
  2028 000019CE 722068617070656E73- <1>
  2029 000019D7 20696E206D6F646572- <1>
  2030 000019E0 6E20636F6D70757465- <1>
  2031 000019E9 72732C20616E64206E- <1>
  2032 000019F2 657665722073686F75- <1>
  2033 000019FB 6C642E0A00          <1>
  2034                              <1> 
  2035 00001A00 496E76616C69642054- <1> err10	db "Invalid TSS:",10
  2036 00001A09 53533A0A            <1>
  2037 00001A0D 546865205453532074- <1> 		db "The TSS that was switched to is invalid. Nothing funny here.",10,0
  2038 00001A16 686174207761732073- <1>
  2039 00001A1F 776974636865642074- <1>
  2040 00001A28 6F20697320696E7661- <1>
  2041 00001A31 6C69642E204E6F7468- <1>
  2042 00001A3A 696E672066756E6E79- <1>
  2043 00001A43 20686572652E0A00    <1>
  2044                              <1> 		
  2045 00001A4B 5365676D656E74206E- <1> err11	db "Segment not present:",10
  2046 00001A54 6F742070726573656E- <1>
  2047 00001A5D 743A0A              <1>
  2048 00001A60 546865207072657365- <1> 		db "The present bit of the segment descriptor is set to zero.",10,0
  2049 00001A69 6E7420626974206F66- <1>
  2050 00001A72 20746865207365676D- <1>
  2051 00001A7B 656E74206465736372- <1>
  2052 00001A84 6970746F7220697320- <1>
  2053 00001A8D 73657420746F207A65- <1>
  2054 00001A96 726F2E0A00          <1>
  2055                              <1> 		
  2056 00001A9B 537461636B20657863- <1> err12	db "Stack exception:",10
  2057 00001AA4 657074696F6E3A0A    <1>
  2058 00001AAC 546865205353206465- <1> 		db "The SS descriptor is invalid or not present or its limit is too small.",10,0
  2059 00001AB5 7363726970746F7220- <1>
  2060 00001ABE 697320696E76616C69- <1>
  2061 00001AC7 64206F72206E6F7420- <1>
  2062 00001AD0 70726573656E74206F- <1>
  2063 00001AD9 7220697473206C696D- <1>
  2064 00001AE2 697420697320746F6F- <1>
  2065 00001AEB 20736D616C6C2E0A00  <1>
  2066                              <1> 		
  2067 00001AF4 47656E6572616C2070- <1> err13	db "General protection violation:",10
  2068 00001AFD 726F74656374696F6E- <1>
  2069 00001B06 2076696F6C6174696F- <1>
  2070 00001B0F 6E3A0A              <1>
  2071 00001B12 596F752076696F6C61- <1> 		db "You violated the computer. Step away slowly. The FBI is on its way.",10,0
  2072 00001B1B 746564207468652063- <1>
  2073 00001B24 6F6D70757465722E20- <1>
  2074 00001B2D 537465702061776179- <1>
  2075 00001B36 20736C6F776C792E20- <1>
  2076 00001B3F 546865204642492069- <1>
  2077 00001B48 73206F6E2069747320- <1>
  2078 00001B51 7761792E0A00        <1>
  2079                              <1> 		
  2080 00001B57 50616765206661756C- <1> err14	db "Page fault:",10
  2081 00001B60 743A0A              <1>
  2082 00001B63 546865207061676520- <1> 		db "The page that was requested was not available.",10,0
  2083 00001B6C 746861742077617320- <1>
  2084 00001B75 726571756573746564- <1>
  2085 00001B7E 20776173206E6F7420- <1>
  2086 00001B87 617661696C61626C65- <1>
  2087 00001B90 2E0A00              <1>
  2088                              <1> 		
  2089 00001B93 526573657276656420- <1> err15	db "Reserved for Plan R:",10
  2090 00001B9C 666F7220506C616E20- <1>
  2091 00001BA5 523A0A              <1>
  2092 00001BA8 5468697320696E7465- <1> 		db "This interrupt is reserved for usage only by the military when it is necessary",10
  2093 00001BB1 727275707420697320- <1>
  2094 00001BBA 726573657276656420- <1>
  2095 00001BC3 666F72207573616765- <1>
  2096 00001BCC 206F6E6C7920627920- <1>
  2097 00001BD5 746865206D696C6974- <1>
  2098 00001BDE 617279207768656E20- <1>
  2099 00001BE7 6974206973206E6563- <1>
  2100 00001BF0 6573736172790A      <1>
  2101 00001BF7 746F20696E69746961- <1> 		db "to initiate a full-scale coup d'état.",10,0
  2102 00001C00 746520612066756C6C- <1>
  2103 00001C09 2D7363616C6520636F- <1>
  2104 00001C12 7570206427C3A97461- <1>
  2105 00001C1B 742E0A00            <1>
  2106                              <1> 		
  2107 00001C1F 576861742074686520- <1> unknownerror db "What the hell just happened? Is everyone okay? Hard drive? Video card?",10
  2108 00001C28 68656C6C206A757374- <1>
  2109 00001C31 2068617070656E6564- <1>
  2110 00001C3A 3F2049732065766572- <1>
  2111 00001C43 796F6E65206F6B6179- <1>
  2112 00001C4C 3F2048617264206472- <1>
  2113 00001C55 6976653F2056696465- <1>
  2114 00001C5E 6F20636172643F0A    <1>
  2115 00001C66 4D656D6F72793F2041- <1> 			db	"Memory? Are you there?",10,0
  2116 00001C6F 726520796F75207468- <1>
  2117 00001C78 6572653F0A00        <1>
  2118                              <1> %else
  2119                              <1> unhand:	
  2120                              <1> 	%assign i 0
  2121                              <1> 	%rep 32
  2122                              <1> 	mov byte [intprob], i
  2123                              <1> 	jmp unhand2
  2124                              <1> 	%assign i i+1
  2125                              <1> 	%endrep
  2126                              <1> unhand2:
  2127                              <1> 	cmp byte [intprob], 3
  2128                              <1> 	je handled	;if it is a debug interrupt, it is auto handled
  2129                              <1> 	mov ebx, 0xDEADCD00 ;this shows that an exception occured even though more detailed info cannot be shown
  2130                              <1> 					;CD is the machine instruction for interrupt
  2131                              <1> 					;DEAD shows that the program died because of the int
  2132                              <1> 	mov bl, [intprob]
  2133                              <1> 	jmp exitprog
  2134                              <1> intprob db 0
  2135                              <1> %endif
  2136                                  %include "source/ints.asm"
  2137                              <1> int30h:	;for great justice
  2138 00001C7E 80FC00              <1> 	cmp ah, 0
  2139 00001C81 0F84A3000000        <1> 	je near exitprog   ;kills app
  2140 00001C87 80FC01              <1> 	cmp ah, 1
  2141 00001C8A 0F841F010000        <1> 	je near prntstr  ;print string
  2142 00001C90 80FC02              <1> 	cmp ah, 2
  2143 00001C93 0F84BC010000        <1> 	je near readstr	;read string
  2144 00001C99 80FC03              <1> 	cmp ah, 3
  2145 00001C9C 0F84DC010000        <1> 	je near clearscrn	;clear screen
  2146 00001CA2 80FC04              <1> 	cmp ah, 4
  2147 00001CA5 0F844B020000        <1> 	je near prntreadstr	;read and print string
  2148 00001CAB 80FC05              <1> 	cmp ah, 5
  2149 00001CAE 0F84F8060000        <1> 	je near readchar	;get char
  2150 00001CB4 80FC06              <1> 	cmp ah, 6
  2151 00001CB7 0F8461070000        <1> 	je near prntchar	;print char
  2152 00001CBD 80FC07              <1> 	cmp ah, 7
  2153 00001CC0 0F8462090000        <1> 	je near openfile	;read file
  2154                              <1> ;	cmp ah, 8
  2155                              <1> ;	je near closefile	;close file
  2156 00001CC6 80FC09              <1> 	cmp ah, 9
  2157 00001CC9 0F8463090000        <1> 	je near num2str	;convert number to string
  2158 00001CCF 80FC0A              <1> 	cmp ah, 10
  2159 00001CD2 0F8472090000        <1> 	je near str2num	;convert string to number
  2160                              <1> %ifdef threads.included
  2161 00001CD8 80FC0B              <1> 	cmp ah, 11
  2162 00001CDB 0F8475090000        <1> 	je near forkthread	;create thread
  2163                              <1> %endif
  2164 00001CE1 80FC0C              <1> 	cmp ah, 12
  2165 00001CE4 0F84340A0000        <1> 	je near gettime	;get time
  2166 00001CEA 80FC0D              <1> 	cmp ah, 13
  2167 00001CED 0F84400A0000        <1> 	je near settime	;set time
  2168 00001CF3 80FC0E              <1> 	cmp ah, 14
  2169 00001CF6 0F84470A0000        <1> 	je near runcmd	;run program
  2170 00001CFC 80FC0F              <1> 	cmp ah, 15
  2171 00001CFF 0F84530A0000        <1> 	je near proginfo ;get program info-location of name/options/number of options/environmental vars
  2172 00001D05 80FC10              <1> 	cmp ah, 16
  2173 00001D08 0F84750A0000        <1> 	je near hooksig	;hook code to a signal
  2174                              <1> %ifdef gui.included
  2175 00001D0E 80FC11              <1> 	cmp ah, 17
  2176 00001D11 0F847C0A0000        <1> 	je near guiint	;GUI operations
  2177                              <1> %endif
  2178                              <1> %ifdef sound.included
  2179 00001D17 80FC12              <1> 	cmp ah, 18
  2180 00001D1A 0F84F70B0000        <1> 	je near soundint	;sound operations
  2181                              <1> %endif
  2182                              <1> %ifdef network.included
  2183 00001D20 80FC13              <1> 	cmp ah, 19
  2184 00001D23 0F84F30B0000        <1> 	je near netint	;networking operations
  2185                              <1> %endif
  2186 00001D29 CF                  <1> 	iret
  2187                              <1> 
  2188                              <1> 	%include 'source/interrupts/0_exitprog.asm'
  2189                              <2> exitprog:
  2190 00001D2A 66B83000            <2> 	mov ax, NEW_DATA_SEL
  2191 00001D2E 8ED8                <2> 	mov ds, ax
  2192 00001D30 8EC0                <2> 	mov es, ax
  2193 00001D32 8EE0                <2> 	mov fs, ax
  2194 00001D34 66B82000            <2> 	mov ax, SYS_DATA_SEL
  2195 00001D38 8EE8                <2> 	mov gs, ax
  2196 00001D3A C705[816C0000]0000- <2> 	mov dword [currentthread], 0
  2197 00001D42 0000                <2>
  2198 00001D44 C705[7C6C0000]0400- <2> 	mov dword [lastthread], 4
  2199 00001D4C 0000                <2>
  2200 00001D4E C605[806C0000]00    <2> 	mov byte [threadson], 0 ;for now i need to use this
  2201 00001D55 8B25[08BE0300]      <2> 	mov esp, [previousstack] ;and this
  2202 00001D5B 83FB00              <2> 	cmp ebx, 0
  2203 00001D5E 0F8501000000        <2> 	jne near .error
  2204 00001D64 C3                  <2> 	ret
  2205                              <2> .error:
  2206 00001D65 89D9                <2> 	mov ecx, ebx
  2207 00001D67 B006                <2> 	mov al, 6
  2208 00001D69 A2[D8310000]        <2> 	mov [firsthexshown], al
  2209 00001D6E 51                  <2> 	push ecx
  2210 00001D6F BE[8A1D0000]        <2> 	mov esi, .msg1
  2211 00001D74 E855000000          <2> 	call printhighlight
  2212 00001D79 59                  <2> 	pop ecx
  2213 00001D7A E86E140000          <2> 	call showhex
  2214 00001D7F BE[9F1D0000]        <2> 	mov esi, .msg2
  2215 00001D84 E845000000          <2> 	call printhighlight
  2216 00001D89 C3                  <2> 	ret
  2217                              <2> 	
  2218 00001D8A 416E20657869742073- <2> .msg1 db "An exit status of 0x",0
  2219 00001D93 7461747573206F6620- <2>
  2220 00001D9C 307800              <2>
  2221 00001D9F 087761732072657475- <2> .msg2 db 8,"was returned.",10,0
  2222 00001DA8 726E65642E0A00      <2>
  2223                              <1> 	%include 'source/interrupts/1_prntstr.asm'
  2224                              <2> prntstr:
  2225 00001DAF 30E4                <2> xor ah, ah
  2226 00001DB1 E82D000000          <2> call printint
  2227 00001DB6 E9DEE4FFFF          <2> jmp timerinterrupt
  2228                              <2> 
  2229                              <2> 	printquiet:
  2230 00001DBB 6631C0              <2> 		xor ax, ax
  2231 00001DBE 66A3[531E0000]      <2> 		mov [endkeyprint], ax
  2232 00001DC4 66BB0700            <2> 		mov bx, 7
  2233 00001DC8 E82F000000          <2> 		call printint.b
  2234 00001DCD C3                  <2> 		ret
  2235                              <2> 
  2236                              <2> 	printhighlight:
  2237 00001DCE 6631C0              <2> 		xor ax, ax
  2238 00001DD1 66BBF000            <2> 		mov bx, 0xF0
  2239 00001DD5 EB0C                <2> 		jmp printint
  2240                              <2> 
  2241                              <2> 	printline:
  2242 00001DD7 BE[F3950000]        <2> 		mov esi, line
  2243                              <2>     print:
  2244 00001DDC 6631C0              <2> 		xor ax, ax
  2245 00001DDF 66BB0700            <2> 		mov bx, 7
  2246                              <2> 	printint:	;print line, ax=last key,bx=modifier, esi=buffer
  2247 00001DE3 56                  <2> 		push esi
  2248 00001DE4 66A3[531E0000]      <2> 		mov [endkeyprint], ax
  2249 00001DEA E80D000000          <2> 		call .b
  2250 00001DEF 89F1                <2> 		mov ecx, esi
  2251 00001DF1 5F                  <2> 		pop edi
  2252 00001DF2 29F9                <2> 		sub ecx, edi
  2253 00001DF4 51                  <2> 		push ecx
  2254 00001DF5 E8270B0000          <2> 		call termcopy
  2255 00001DFA 59                  <2> 		pop ecx
  2256 00001DFB C3                  <2> 		ret
  2257                              <2> 	.b:	
  2258 00001DFC 53                  <2> 		push ebx
  2259 00001DFD 31C0                <2> 		xor eax, eax
  2260 00001DFF 8A06                <2> 		mov al, [esi]
  2261 00001E01 3CFF                <2> 		cmp al, 0xFF
  2262 00001E03 7503                <2> 		jne .notnull
  2263 00001E05 5B                  <2> 		pop ebx
  2264 00001E06 EB47                <2> 		jmp .noprint
  2265                              <2> 	.notnull:
  2266 00001E08 3CC0                <2> 		cmp al, 0xC0
  2267 00001E0A 722E                <2> 		jb .doneutf
  2268 00001E0C 3CE0                <2> 		cmp al, 0xE0
  2269 00001E0E 7217                <2> 		jb .two
  2270 00001E10 46                  <2> 		inc esi
  2271 00001E11 8A2E                <2> 		mov ch, [esi]
  2272 00001E13 46                  <2> 		inc esi
  2273 00001E14 8A0E                <2> 		mov cl, [esi]
  2274 00001E16 C0E004              <2> 		shl al, 4
  2275 00001E19 C0E102              <2> 		shl cl, 2
  2276 00001E1C 66C1E902            <2> 		shr cx, 2
  2277 00001E20 08C5                <2> 		or ch, al
  2278 00001E22 6689C8              <2> 		mov ax, cx
  2279 00001E25 EB13                <2> 		jmp .doneutf
  2280                              <2> 	.two:
  2281 00001E27 8A2E                <2> 		mov ch, [esi]
  2282 00001E29 46                  <2> 		inc esi
  2283 00001E2A 8A0E                <2> 		mov cl, [esi]
  2284 00001E2C 66C1E102            <2> 		shl cx, 2
  2285 00001E30 C0ED02              <2> 		shr ch, 2
  2286 00001E33 66C1E902            <2> 		shr cx, 2
  2287 00001E37 6689C8              <2> 		mov ax, cx
  2288                              <2> 	.doneutf:
  2289 00001E3A 5B                  <2> 		pop ebx
  2290 00001E3B 663B05[531E0000]    <2> 		cmp ax, [endkeyprint]
  2291 00001E42 740E                <2> 		je .done
  2292 00001E44 663DFFFE            <2> 		cmp ax, 0xFEFF
  2293 00001E48 7405                <2> 		je .noprint
  2294 00001E4A E8FC050000          <2> 		call prcharq
  2295                              <2> 	.noprint:
  2296 00001E4F 46                  <2> 		inc esi
  2297 00001E50 EBAA                <2> 		jmp .b
  2298                              <2> 	.done:
  2299 00001E52 C3                  <2> 		ret
  2300                              <2> 
  2301 00001E53 0000                <2> endkeyprint dw 0
  2302                              <1> 	%include 'source/interrupts/2_readstr.asm'
  2303                              <2> readstr:
  2304 00001E55 E805000000          <2> call readint
  2305 00001E5A E93AE4FFFF          <2> jmp timerinterrupt
  2306                              <2> 
  2307                              <2> 	readint:	;;get line, al=last key, esi = buffer, edi = endbuffer	
  2308 00001E5F 89C3                <2> 		mov ebx, eax
  2309                              <2> 	.b:
  2310 00001E61 53                  <2> 		push ebx
  2311 00001E62 57                  <2> 		push edi
  2312 00001E63 56                  <2> 		push esi
  2313 00001E64 30C0                <2> 		xor al, al
  2314 00001E66 E84D050000          <2> 		call rdcharint
  2315 00001E6B 5E                  <2> 		pop esi
  2316 00001E6C 8806                <2> 		mov [esi], al
  2317 00001E6E 46                  <2> 		inc esi
  2318 00001E6F 5F                  <2> 		pop edi
  2319 00001E70 5B                  <2> 		pop ebx
  2320 00001E71 39FE                <2> 		cmp esi, edi
  2321 00001E73 7304                <2> 		jae .done
  2322 00001E75 38D8                <2> 		cmp al, bl
  2323 00001E77 75E8                <2> 		jne .b
  2324                              <2> 	.done:
  2325 00001E79 4E                  <2> 		dec esi
  2326 00001E7A C60600              <2> 		mov byte [esi], 0
  2327 00001E7D C3                  <2> 		ret
  2328                              <1> 	%include 'source/interrupts/3_clearscrn.asm'
  2329                              <2> clearscrn:
  2330 00001E7E E805000000          <2> call clear
  2331 00001E83 E911E4FFFF          <2> jmp timerinterrupt
  2332                              <2> %ifdef io.serial
  2333                              <2> clear:
  2334                              <2> 	mov esi, .str
  2335                              <2> 	call print
  2336                              <2> 	ret
  2337                              <2> .str db 27,"[2J",27,"[f",0
  2338                              <2> %else
  2339                              <2> clear:
  2340 00001E88 668B0D[22260000]    <2> 		mov cx, [charxy]
  2341 00001E8F BF[9CEF2B00]        <2> 		mov edi, videobuf
  2342 00001E94 31C0                <2> 		xor eax, eax
  2343 00001E96 A3[18260000]        <2> 		mov [linebeginpos], eax
  2344 00001E9B A3[1C260000]        <2> 		mov [videobufpos], eax
  2345 00001EA0 6631D2              <2> 		xor dx, dx
  2346 00001EA3 66A3[20260000]      <2> 		mov [charpos], ax
  2347 00001EA9 66B80700            <2> 		mov ax, 7
  2348 00001EAD C1E010              <2> 		shl eax, 16
  2349                              <2> 	clearb:
  2350 00001EB0 8907                <2> 		mov [edi], eax
  2351 00001EB2 83C704              <2> 		add edi, 4
  2352 00001EB5 FEC9                <2> 		dec cl
  2353 00001EB7 80F900              <2> 		cmp cl, 0
  2354 00001EBA 75F4                <2> 		jne clearb
  2355 00001EBC 8A0D[22260000]      <2> 		mov cl, [charxy]
  2356 00001EC2 FECD                <2> 		dec ch
  2357 00001EC4 80FD00              <2> 		cmp ch, 0
  2358 00001EC7 75E7                <2> 		jne clearb
  2359                              <2> 	cleardouble:
  2360 00001EC9 BF[E4C42C00]        <2> 		mov edi, videobuf2
  2361 00001ECE 668B0D[22260000]    <2> 		mov cx, [charxy]
  2362 00001ED5 31C0                <2> 		xor eax, eax
  2363                              <2> 	clearc:
  2364 00001ED7 8907                <2> 		mov [edi], eax
  2365 00001ED9 83C704              <2> 		add edi, 4
  2366 00001EDC FEC9                <2> 		dec cl
  2367 00001EDE 80F900              <2> 		cmp cl, 0
  2368 00001EE1 75F4                <2> 		jne clearc
  2369 00001EE3 8A0D[22260000]      <2> 		mov cl, [charxy]
  2370 00001EE9 FECD                <2> 		dec ch
  2371 00001EEB 80FD00              <2> 		cmp ch, 0
  2372 00001EEE 75E7                <2> 		jne clearc
  2373 00001EF0 E82C0A0000          <2> 		call termcopy
  2374 00001EF5 C3                  <2> 		ret
  2375                              <2> %endif
  2376                              <2> 		
  2377                              <1> 	%include 'source/interrupts/4_prntreadstr.asm'
  2378                              <2> prntreadstr:
  2379 00001EF6 E80B000000          <2> call rdprint
  2380 00001EFB E999E3FFFF          <2> jmp timerinterrupt
  2381                              <2> 
  2382                              <2> readline:
  2383 00001F00 B00A                <2>   mov al, 10
  2384 00001F02 66BB0700            <2>   mov bx, 7
  2385                              <2> rdprint:	;print and get line, al=last key, bx=modifier, esi=buffer, edi=bufferend
  2386 00001F06 E80F000000          <2> 	call rdprintdos
  2387 00001F0B 50                  <2> 	push eax
  2388 00001F0C A0[97230000]        <2> 	mov al, [endkeyrdpr]
  2389 00001F11 30E4                <2> 	xor ah, ah
  2390 00001F13 E81C050000          <2> 	call prcharint
  2391 00001F18 58                  <2> 	pop eax
  2392 00001F19 C3                  <2> 	ret
  2393                              <2> 
  2394                              <2> 	rdprintdos: ;allows dos compatibility with read function
  2395 00001F1A 8935[A1230000]      <2> 		mov [buftxtloc], esi
  2396 00001F20 A2[97230000]        <2> 		mov [endkeyrdpr], al
  2397 00001F25 66891D[99230000]    <2> 		mov [modkeyrdpr], bx
  2398 00001F2C 8935[9B230000]      <2> 		mov [firstesirdpr], esi
  2399 00001F32 893D[A5230000]      <2> 		mov [endbufferrdpr], edi
  2400 00001F38 8B3D[389A2D00]      <2> 		mov edi, [commandsentered]
  2401 00001F3E 893D[349A2D00]      <2> 		mov [commandlistentries], edi
  2402                              <2> 	rdprintb:
  2403 00001F44 56                  <2> 		push esi
  2404 00001F45 B001                <2> 		mov al, 1
  2405 00001F47 E86C040000          <2> 		call rdcharint
  2406 00001F4C 8A25[1A240000]      <2> 		mov ah, [lastkey + 2]
  2407 00001F52 88E1                <2> 		mov cl, ah
  2408 00001F54 5E                  <2> 		pop esi
  2409                              <2> %ifdef io.serial
  2410                              <2> 		cmp ah, 0x41
  2411                              <2> 		je near rdprup
  2412                              <2> 		cmp ah, 0x42
  2413                              <2> 		je near rdprdown
  2414                              <2> 		cmp ah, 0x43
  2415                              <2> 		je near rdprright
  2416                              <2> 		cmp ah, 0x44
  2417                              <2> 		je near rdprleft
  2418                              <2> 		cmp ah, 0x31
  2419                              <2> 		je near rdprhome
  2420                              <2> 		cmp ah, 0x48
  2421                              <2> 		je near rdprhome
  2422                              <2> 		cmp ah, 0x46
  2423                              <2> 		je near rdprend
  2424                              <2> 		cmp ah, 0x33
  2425                              <2> 		je near rdprdel
  2426                              <2> 		cmp ah, 0x34
  2427                              <2> 		je near rdprend
  2428                              <2> %else
  2429 00001F55 803D[35610000]E0    <2> 		cmp byte [specialkey], 0xE0
  2430 00001F5C 753F                <2> 		jne notspecialrdprnt
  2431 00001F5E 80FC53              <2> 		cmp ah, 0x53
  2432 00001F61 0F849C030000        <2> 		je near rdprdel
  2433 00001F67 80FC47              <2> 		cmp ah, 0x47
  2434 00001F6A 0F8475010000        <2> 		je near rdprhome
  2435 00001F70 80FC4F              <2> 		cmp ah, 0x4F
  2436 00001F73 0F848B010000        <2> 		je near rdprend
  2437 00001F79 80FC50              <2> 		cmp ah, 0x50
  2438 00001F7C 0F841B020000        <2> 		je near rdprdown
  2439 00001F82 80FC4D              <2> 		cmp ah, 0x4D
  2440 00001F85 0F84B8010000        <2> 		je near rdprright
  2441 00001F8B 80FC4B              <2> 		cmp ah, 0x4B
  2442 00001F8E 0F848D010000        <2> 		je near rdprleft
  2443 00001F94 80FC48              <2> 		cmp ah, 0x48
  2444 00001F97 0F8440020000        <2> 		je near rdprup
  2445                              <2> 	notspecialrdprnt:
  2446                              <2> %endif
  2447 00001F9D 66A1[18240000]      <2> 		mov ax, [lastkey]
  2448 00001FA3 6683F808            <2> 		cmp ax, 8
  2449 00001FA7 0F848B030000        <2> 		je near rdprbscheck
  2450 00001FAD 6683F800            <2> 		cmp ax, 0
  2451 00001FB1 7491                <2> 		je rdprintb
  2452 00001FB3 80F900              <2> 		cmp cl, 0
  2453 00001FB6 748C                <2> 		je rdprintb
  2454 00001FB8 663D8000            <2> 		cmp ax, 0x80
  2455 00001FBC 7251                <2> 		jb .normal
  2456 00001FBE 663D0008            <2> 		cmp ax, 0x800
  2457 00001FC2 731E                <2> 		jae .three
  2458 00001FC4 46                  <2> 		inc esi
  2459 00001FC5 3B35[A5230000]      <2> 		cmp esi, [endbufferrdpr]
  2460 00001FCB 0F83D1000000        <2> 		jae near donerdprinc
  2461 00001FD1 66C1E002            <2> 		shl ax, 2
  2462 00001FD5 C0E802              <2> 		shr al, 2
  2463 00001FD8 0C80                <2> 		or al, 10000000b
  2464 00001FDA 80CCC0              <2> 		or ah, 11000000b
  2465 00001FDD 8866FF              <2> 		mov [esi - 1], ah
  2466 00001FE0 EB2D                <2> 		jmp .normal
  2467                              <2> .three:	
  2468 00001FE2 83C602              <2> 		add esi, 2
  2469 00001FE5 3B35[A5230000]      <2> 		cmp esi, [endbufferrdpr]
  2470 00001FEB 0F83B1000000        <2> 		jae near donerdprinc
  2471 00001FF1 88E1                <2> 		mov cl, ah
  2472 00001FF3 C0E904              <2> 		shr cl, 4
  2473 00001FF6 80C9E0              <2> 		or cl, 11100000b
  2474 00001FF9 884EFE              <2> 		mov [esi - 2], cl
  2475 00001FFC 66C1E004            <2> 		shl ax, 4
  2476 00002000 66C1E802            <2> 		shr ax, 2
  2477 00002004 80CC80              <2> 		or ah, 10000000b
  2478 00002007 C0E802              <2> 		shr al, 2
  2479 0000200A 0C80                <2> 		or al, 10000000b
  2480 0000200C 8866FF              <2> 		mov [esi - 1], ah
  2481                              <2> .normal:
  2482 0000200F 8806                <2> 		mov [esi], al
  2483 00002011 46                  <2> 		inc esi
  2484 00002012 66A1[18240000]      <2> 		mov ax, [lastkey]
  2485                              <2> 	bscheckequal:
  2486 00002018 668B1D[99230000]    <2> 		mov bx, [modkeyrdpr]
  2487 0000201F 803D[A0230000]00    <2> 		cmp byte [txtmask], 0
  2488 00002026 7407                <2> 		je nomasktxt
  2489 00002028 30E4                <2> 		xor ah, ah
  2490 0000202A A0[A0230000]        <2> 		mov al, [txtmask]
  2491                              <2> 	nomasktxt:
  2492 0000202F 56                  <2> 		push esi
  2493 00002030 66A3[95230000]      <2> 		mov [axcache], ax
  2494 00002036 668B1D[97230000]    <2> 		mov bx, [endkeyrdpr]
  2495 0000203D 6639D8              <2> 		cmp ax, bx
  2496 00002040 7432                <2> 		je nobackprintbuftxt2
  2497 00002042 E8ED030000          <2> 		call prcharint
  2498 00002047 BE[88D00300]        <2> 		mov esi, buftxt2
  2499 0000204C E86AFDFFFF          <2> 		call printquiet
  2500 00002051 66B82000            <2> 		mov ax, " "
  2501 00002055 E8F1030000          <2> 		call prcharq
  2502 0000205A 66B80800            <2> 		mov ax, 8
  2503 0000205E 81FE[88D00300]      <2> 		cmp esi, buftxt2
  2504 00002064 740E                <2> 		je nobackprintbuftxt2
  2505                              <2> 	backprintbuftxt2:
  2506 00002066 E8E0030000          <2> 		call prcharq
  2507 0000206B 4E                  <2> 		dec esi
  2508 0000206C 81FE[88D00300]      <2> 		cmp esi, buftxt2
  2509 00002072 77F2                <2> 		ja backprintbuftxt2
  2510                              <2> 	nobackprintbuftxt2:
  2511 00002074 6683F80A            <2> 		cmp ax, 10
  2512 00002078 7405                <2> 		je nonobackprint
  2513 0000207A E8B5030000          <2> 		call prcharint
  2514                              <2> 	nonobackprint:
  2515 0000207F 5E                  <2> 		pop esi
  2516 00002080 3B35[A5230000]      <2> 		cmp esi, [endbufferrdpr]
  2517 00002086 0F8316000000        <2> 		jae near donerdprinc
  2518 0000208C 66A1[95230000]      <2> 		mov ax, [axcache]
  2519 00002092 8A25[97230000]      <2> 		mov ah, [endkeyrdpr]
  2520 00002098 38E0                <2> 		cmp al, ah
  2521 0000209A 0F85A4FEFFFF        <2> 		jne rdprintb
  2522 000020A0 EB01                <2> 		jmp donerdprint
  2523                              <2> 	donerdprinc:
  2524 000020A2 46                  <2> 		inc esi
  2525                              <2> 	donerdprint:
  2526 000020A3 4E                  <2> 		dec esi
  2527 000020A4 BF[88D00300]        <2> 		mov edi, buftxt2
  2528                              <2> 	copylaterstuff:
  2529 000020A9 8A07                <2> 		mov al, [edi]
  2530 000020AB 3C00                <2> 		cmp al, 0
  2531 000020AD 7406                <2> 		je nocopylaterstuff
  2532 000020AF 8806                <2> 		mov [esi], al
  2533 000020B1 47                  <2> 		inc edi
  2534 000020B2 46                  <2> 		inc esi
  2535 000020B3 EBF4                <2> 		jmp copylaterstuff
  2536                              <2> 	nocopylaterstuff:
  2537 000020B5 C60600              <2> 		mov byte [esi], 0
  2538 000020B8 E80B000000          <2> 		call clearbuftxt2
  2539 000020BD 89F1                <2> 		mov ecx, esi
  2540 000020BF 8B3D[9B230000]      <2> 		mov edi, [firstesirdpr]
  2541 000020C5 29F9                <2> 		sub ecx, edi
  2542 000020C7 C3                  <2> 		ret
  2543                              <2> 	
  2544                              <2> 	clearbuftxt2:
  2545 000020C8 30C0                <2> 		xor al, al
  2546 000020CA BF[88D00300]        <2> 		mov edi, buftxt2
  2547                              <2> 	clearbuftxt2lp:
  2548 000020CF 8807                <2> 		mov [edi], al
  2549 000020D1 47                  <2> 		inc edi
  2550 000020D2 81FF[88D40300]      <2> 		cmp edi, buftxt
  2551 000020D8 75F5                <2> 		jne clearbuftxt2lp
  2552 000020DA C3                  <2> 		ret
  2553                              <2> 	
  2554                              <2> 	rdprintb2:
  2555 000020DB E841080000          <2> 		call termcopy
  2556 000020E0 E95FFEFFFF          <2> 		jmp rdprintb
  2557                              <2> 	
  2558                              <2> 	rdprhome:
  2559 000020E5 3B35[A1230000]      <2> 		cmp esi, [buftxtloc]
  2560 000020EB 0F84EAFFFFFF        <2> 		je near rdprintb2
  2561 000020F1 BF[88D00300]        <2> 		mov edi, buftxt2
  2562 000020F6 8A07                <2> 		mov al, [edi]
  2563 000020F8 E86A020000          <2> 		call shiftbuftxt2
  2564 000020FD E849030000          <2> 		call prcharq
  2565 00002102 EBE1                <2> 		jmp rdprhome
  2566                              <2> 		
  2567                              <2> 	rdprend:
  2568 00002104 BF[88D00300]        <2> 		mov edi, buftxt2
  2569 00002109 8A07                <2> 		mov al, [edi]
  2570 0000210B 3C00                <2> 		cmp al, 0
  2571 0000210D 0F84C8FFFFFF        <2> 		je near rdprintb2
  2572 00002113 8806                <2> 		mov [esi], al
  2573 00002115 E849000000          <2> 		call shiftbuftxt2lft
  2574 0000211A E82C030000          <2> 		call prcharq
  2575 0000211F EBE3                <2> 		jmp rdprend
  2576                              <2> 	
  2577                              <2> 	rdprleft:
  2578 00002121 3B35[A1230000]      <2> 		cmp esi, [buftxtloc]
  2579 00002127 0F8417FEFFFF        <2> 		je near rdprintb
  2580 0000212D BF[88D00300]        <2> 		mov edi, buftxt2
  2581 00002132 8A07                <2> 		mov al, [edi]
  2582 00002134 E82E020000          <2> 		call shiftbuftxt2
  2583 00002139 E8F6020000          <2> 		call prcharint
  2584 0000213E E901FEFFFF          <2> 		jmp rdprintb
  2585                              <2> 		
  2586                              <2> 	rdprright:
  2587 00002143 BF[88D00300]        <2> 		mov edi, buftxt2
  2588 00002148 8A07                <2> 		mov al, [edi]
  2589 0000214A 3C00                <2> 		cmp al, 0
  2590 0000214C 0F84F2FDFFFF        <2> 		je near rdprintb
  2591 00002152 8806                <2> 		mov [esi], al
  2592 00002154 E80A000000          <2> 		call shiftbuftxt2lft
  2593 00002159 E8D6020000          <2> 		call prcharint
  2594 0000215E E9E1FDFFFF          <2> 		jmp rdprintb
  2595                              <2> 		
  2596                              <2> 	shiftbuftxt2lft:
  2597 00002163 55                  <2> 		push ebp
  2598 00002164 89FD                <2> 		mov ebp, edi
  2599                              <2> 	.lp:
  2600 00002166 3C00                <2> 		cmp al, 0
  2601 00002168 7408                <2> 		je noshiftbuftxt2lft
  2602 0000216A 47                  <2> 		inc edi
  2603 0000216B 8A07                <2> 		mov al, [edi]
  2604 0000216D 8847FF              <2> 		mov [edi - 1], al
  2605 00002170 EBF4                <2> 		jmp .lp
  2606                              <2> 	noshiftbuftxt2lft:
  2607 00002172 8A4500              <2> 		mov al, [ebp]
  2608 00002175 5D                  <2> 		pop ebp
  2609 00002176 3CC0                <2> 		cmp al, 0xC0
  2610 00002178 7304                <2> 		jae .nofix
  2611 0000217A 3C80                <2> 		cmp al, 0x80
  2612 0000217C 73E5                <2> 		jae shiftbuftxt2lft
  2613                              <2> 	.nofix:
  2614 0000217E 8A06                <2> 		mov al, [esi]
  2615 00002180 30E4                <2> 		xor ah, ah
  2616 00002182 46                  <2> 		inc esi
  2617 00002183 668B1D[99230000]    <2> 		mov bx, [modkeyrdpr]
  2618 0000218A C3                  <2> 		ret
  2619                              <2> 		
  2620                              <2> 	rdprdownbck:
  2621 0000218B FECC                <2> 		dec ah
  2622 0000218D 8825[9F230000]      <2> 		mov [commandedit], ah
  2623 00002193 E884000000          <2> 		call rdprbckspc
  2624 00002198 E9A7FDFFFF          <2> 		jmp rdprintb
  2625                              <2> 	
  2626                              <2> 	rdprdown:
  2627 0000219D 8A25[9F230000]      <2> 		mov ah, [commandedit]
  2628 000021A3 80FC01              <2> 		cmp ah, 1
  2629 000021A6 0F8698FDFFFF        <2> 		jbe near rdprintb
  2630 000021AC 8B3D[389A2D00]      <2> 		mov edi, [commandsentered]
  2631 000021B2 3B3D[349A2D00]      <2> 		cmp edi, [commandlistentries]
  2632 000021B8 7615                <2> 		jbe .nofix
  2633 000021BA 8305[349A2D00]02    <2> 		add dword [commandlistentries], 2
  2634 000021C1 3B3D[349A2D00]      <2> 		cmp edi, [commandlistentries]
  2635 000021C7 7706                <2> 		ja .nofix
  2636 000021C9 893D[349A2D00]      <2> 		mov [commandlistentries], edi
  2637                              <2> 	.nofix:
  2638 000021CF 80FC02              <2> 		cmp ah, 2
  2639 000021D2 74B7                <2> 		je rdprdownbck
  2640 000021D4 80EC02              <2> 		sub ah, 2
  2641 000021D7 8825[9F230000]      <2> 		mov [commandedit], ah
  2642                              <2> 		
  2643                              <2> 	rdprup:
  2644 000021DD 3805[9F230000]      <2> 		cmp [commandedit], al
  2645 000021E3 0F845BFDFFFF        <2> 		je near rdprintb
  2646 000021E9 833D[349A2D00]00    <2> 		cmp dword [commandlistentries], 0
  2647 000021F0 0F844EFDFFFF        <2> 		je near rdprintb
  2648 000021F6 FF0D[349A2D00]      <2> 		dec dword [commandlistentries]
  2649                              <2> 	.lp:
  2650 000021FC BF[88D00300]        <2> 		mov edi, buftxt2
  2651 00002201 8A07                <2> 		mov al, [edi]
  2652 00002203 3C00                <2> 		cmp al, 0
  2653 00002205 740E                <2> 		je .start
  2654 00002207 8806                <2> 		mov [esi], al
  2655 00002209 E855FFFFFF          <2> 		call shiftbuftxt2lft
  2656 0000220E E838020000          <2> 		call prcharq
  2657 00002213 EBE7                <2> 		jmp .lp
  2658                              <2> 	.start:
  2659 00002215 E802000000          <2> 		call rdprbckspc
  2660 0000221A EB48                <2> 		jmp getcurrentcommandstr
  2661                              <2> 	rdprbckspc:
  2662 0000221C 3B35[A1230000]      <2> 		cmp esi, [buftxtloc]
  2663 00002222 7432                <2> 		je nordprupbck
  2664                              <2> 	rdprupbckspclp:
  2665 00002224 66B80800            <2> 		mov ax, 8
  2666 00002228 668B1D[99230000]    <2> 		mov bx, [modkeyrdpr]
  2667 0000222F E817020000          <2> 		call prcharq
  2668 00002234 66B82000            <2> 		mov ax, ' '
  2669 00002238 E80E020000          <2> 		call prcharq
  2670 0000223D 66B80800            <2> 		mov ax, 8
  2671 00002241 E805020000          <2> 		call prcharq
  2672 00002246 4E                  <2> 		dec esi
  2673 00002247 3B35[A1230000]      <2> 		cmp esi, [buftxtloc]
  2674 0000224D 7402                <2> 		je nordprupbck2
  2675 0000224F EBD3                <2> 		jmp rdprupbckspclp
  2676                              <2> 	nordprupbck2:
  2677 00002251 E8CB060000          <2> 		call termcopy
  2678                              <2> 	nordprupbck:
  2679 00002256 8B3D[309A2D00]      <2> 		mov edi, [commandbufpos]
  2680 0000225C 81C7[3C9A2D00]      <2> 		add edi, commandbuf
  2681 00002262 4F                  <2> 		dec edi
  2682 00002263 C3                  <2> 		ret
  2683                              <2> 	getcurrentcommandstr:
  2684 00002264 8A25[9F230000]      <2> 		mov ah, [commandedit]
  2685 0000226A FE05[9F230000]      <2> 		inc byte [commandedit]
  2686                              <2> 	getccmdlp:
  2687 00002270 4F                  <2> 		dec edi
  2688 00002271 8A07                <2> 		mov al, [edi]
  2689 00002273 81FF[3C9A2D00]      <2> 		cmp edi, commandbuf
  2690 00002279 722E                <2> 		jb getcmdresetcommandbuf
  2691 0000227B 81EF[3C9A2D00]      <2> 		sub edi, commandbuf
  2692 00002281 3B3D[309A2D00]      <2> 		cmp edi, [commandbufpos]
  2693 00002287 0F84B7FCFFFF        <2> 		je near rdprintb
  2694 0000228D 81C7[3C9A2D00]      <2> 		add edi, commandbuf
  2695 00002293 3C00                <2> 		cmp al, 0
  2696 00002295 75D9                <2> 		jne getccmdlp
  2697 00002297 FECC                <2> 		dec ah
  2698 00002299 80FC00              <2> 		cmp ah, 0
  2699 0000229C 77D2                <2> 		ja getccmdlp
  2700 0000229E 47                  <2> 		inc edi
  2701 0000229F 81FF[3CAA2D00]      <2> 		cmp edi, commandbufend
  2702 000022A5 770A                <2> 		ja fixcmdbufb4morerdpr
  2703 000022A7 EB15                <2> 		jmp morerdprup
  2704                              <2> 	getcmdresetcommandbuf:
  2705 000022A9 BF[3CAA2D00]        <2> 		mov edi, commandbufend
  2706 000022AE 47                  <2> 		inc edi
  2707 000022AF EBBF                <2> 		jmp getccmdlp
  2708                              <2> 	fixcmdbufb4morerdpr:
  2709 000022B1 4F                  <2> 		dec edi
  2710 000022B2 81EF[3CAA2D00]      <2> 		sub edi, commandbufend
  2711 000022B8 81C7[3C9A2D00]      <2> 		add edi, commandbuf
  2712                              <2> 	morerdprup:
  2713 000022BE 8A07                <2> 		mov al, [edi]
  2714 000022C0 47                  <2> 		inc edi
  2715 000022C1 81EF[3C9A2D00]      <2> 		sub edi, commandbuf
  2716 000022C7 3C00                <2> 		cmp al, 0
  2717 000022C9 0F840CFEFFFF        <2> 		je near rdprintb2
  2718 000022CF 3B3D[309A2D00]      <2> 		cmp edi, [commandbufpos]
  2719 000022D5 0F8300FEFFFF        <2> 		jae near rdprintb2
  2720 000022DB 81C7[3C9A2D00]      <2> 		add edi, commandbuf
  2721 000022E1 8806                <2> 		mov [esi], al
  2722 000022E3 46                  <2> 		inc esi
  2723 000022E4 57                  <2> 		push edi
  2724 000022E5 668B1D[99230000]    <2> 		mov bx, [modkeyrdpr]
  2725 000022EC 30E4                <2> 		xor ah, ah
  2726 000022EE E858010000          <2> 		call prcharq
  2727 000022F3 5F                  <2> 		pop edi
  2728 000022F4 81FF[3CAA2D00]      <2> 		cmp edi, commandbufend
  2729 000022FA 76C2                <2> 		jbe morerdprup
  2730 000022FC BF[3C9A2D00]        <2> 		mov edi, commandbuf
  2731 00002301 EBBB                <2> 		jmp morerdprup
  2732                              <2> 
  2733                              <2> 	rdprdel:
  2734 00002303 BF[88D00300]        <2> 		mov edi, buftxt2
  2735 00002308 8A07                <2> 		mov al, [edi]
  2736 0000230A 3C00                <2> 		cmp al, 0
  2737 0000230C 0F8432FCFFFF        <2> 		je near rdprintb
  2738 00002312 8806                <2> 		mov [esi], al
  2739 00002314 3C80                <2> 		cmp al, 0x80
  2740 00002316 7216                <2> 		jb .fn
  2741                              <2> 	.lp:
  2742 00002318 46                  <2> 		inc esi
  2743 00002319 47                  <2> 		inc edi
  2744 0000231A 8A07                <2> 		mov al, [edi]
  2745 0000231C 3C00                <2> 		cmp al, 0
  2746 0000231E 0F8420FCFFFF        <2> 		je near rdprintb
  2747 00002324 8806                <2> 		mov [esi], al
  2748 00002326 3C80                <2> 		cmp al, 0x80
  2749 00002328 7204                <2> 		jb .fn
  2750 0000232A 3CC0                <2> 		cmp al, 0xC0
  2751 0000232C 72EA                <2> 		jb .lp
  2752                              <2> 	.fn:
  2753 0000232E E830FEFFFF          <2> 		call shiftbuftxt2lft
  2754 00002333 E813010000          <2> 		call prcharq
  2755                              <2> 		
  2756                              <2> 	rdprbscheck:
  2757 00002338 3B35[9B230000]      <2> 		cmp esi, [firstesirdpr]
  2758 0000233E 0F8600FCFFFF        <2> 		jbe near rdprintb
  2759                              <2> 	goodbscheck:
  2760 00002344 4E                  <2> 		dec esi
  2761 00002345 8A46FF              <2> 		mov al, [esi - 1]
  2762 00002348 C60600              <2> 		mov byte [esi], 0
  2763 0000234B 3CC0                <2> 		cmp al, 0xC0
  2764 0000234D 7306                <2> 		jae .onemore
  2765 0000234F 3C80                <2> 		cmp al, 0x80
  2766 00002351 73F1                <2> 		jae goodbscheck
  2767 00002353 EB04                <2> 		jmp .nomore
  2768                              <2> 	.onemore:
  2769 00002355 4E                  <2> 		dec esi
  2770 00002356 C60600              <2> 		mov byte [esi], 0		
  2771                              <2> 	.nomore:
  2772 00002359 668B1D[99230000]    <2> 		mov bx, [modkeyrdpr]
  2773 00002360 B008                <2> 		mov al, 8
  2774 00002362 E9B1FCFFFF          <2> 		jmp bscheckequal
  2775                              <2> 		
  2776                              <2> 	shiftbuftxt2:
  2777 00002367 55                  <2> 		push ebp
  2778 00002368 89FD                <2> 		mov ebp, edi
  2779                              <2> 	.lp:
  2780 0000236A 3C00                <2> 		cmp al, 0
  2781 0000236C 7409                <2> 		je noshiftbuftxt2
  2782 0000236E 47                  <2> 		inc edi
  2783 0000236F 8A27                <2> 		mov ah, [edi]
  2784 00002371 8807                <2> 		mov [edi], al
  2785 00002373 88E0                <2> 		mov al, ah
  2786 00002375 EBF3                <2> 		jmp .lp
  2787                              <2> 	noshiftbuftxt2:
  2788 00002377 8A4500              <2> 		mov al, [ebp]
  2789 0000237A 5D                  <2> 		pop ebp
  2790 0000237B 3CC0                <2> 		cmp al, 0xC0
  2791 0000237D 7304                <2> 		jae .nofix
  2792 0000237F 3C80                <2> 		cmp al, 0x80
  2793 00002381 73E4                <2> 		jae shiftbuftxt2
  2794                              <2> 	.nofix:
  2795 00002383 BF[88D00300]        <2> 		mov edi, buftxt2
  2796 00002388 4E                  <2> 		dec esi
  2797 00002389 8A06                <2> 		mov al, [esi]
  2798 0000238B 8807                <2> 		mov [edi], al
  2799 0000238D C60600              <2> 		mov byte [esi], 0
  2800 00002390 66B80800            <2> 		mov ax, 8
  2801 00002394 C3                  <2> 		ret
  2802                              <2> 		
  2803 00002395 0000                <2> axcache dw 0
  2804 00002397 0000                <2> endkeyrdpr dw 0
  2805 00002399 0000                <2> modkeyrdpr dw 0
  2806 0000239B 00000000            <2> firstesirdpr dd 0
  2807 0000239F 00                  <2> commandedit db 0
  2808 000023A0 00                  <2> txtmask db 0
  2809 000023A1 00000000            <2> buftxtloc dd 0
  2810 000023A5 00000000            <2> endbufferrdpr dd 0
  2811 000023A9 082000              <2> backcursor db 8," ",0
  2812                              <1> 	%include 'source/interrupts/5_readchar.asm'
  2813                              <2> readchar:
  2814 000023AC E807000000          <2> 	call rdcharint
  2815 000023B1 E9E3DEFFFF          <2> 	jmp timerinterrupt
  2816                              <2> getchar:
  2817 000023B6 30C0                <2> 	xor al, al
  2818                              <2> 	rdcharint:		;get char, if al is 0, wait for key
  2819 000023B8 66C705[1C240000]01- <2> 		mov word [trans], 1
  2820 000023C0 00                  <2>
  2821 000023C1 3C00                <2> 		cmp al, 0
  2822 000023C3 7509                <2> 		jne transcheck
  2823 000023C5 66C705[1C240000]00- <2> 		mov word [trans], 0
  2824 000023CD 00                  <2>
  2825                              <2> 	transcheck:
  2826                              <2> 	%ifdef io.serial
  2827                              <2> 		call serial.receive
  2828                              <2> 		xor ah, ah
  2829                              <2> 		cmp al, 13
  2830                              <2> 		je rdenter
  2831                              <2> 	%else
  2832 000023CE E8853D0000          <2> 		call getkey
  2833 000023D3 66A1[1A240000]      <2> 		mov ax, [lastkey + 2]
  2834 000023D9 6683F801            <2> 		cmp ax, 1
  2835 000023DD 7433                <2> 		je rdend ;return if ESC
  2836 000023DF 6683F81C            <2> 		cmp ax, 0x1C
  2837 000023E3 7421                <2> 		je rdenter
  2838                              <2> 	%endif
  2839 000023E5 66A1[18240000]      <2> 		mov ax, [lastkey]
  2840 000023EB 668B1D[1C240000]    <2> 		mov bx, [trans]
  2841 000023F2 803D[35610000]E0    <2> 		cmp byte [specialkey], 0xE0
  2842 000023F9 7500                <2> 		jne nospecialtrans
  2843                              <2> 	nospecialtrans:
  2844 000023FB 6609C3              <2> 		or bx, ax
  2845 000023FE 6683FB00            <2> 		cmp bx, 0
  2846 00002402 74CA                <2> 		je transcheck
  2847 00002404 EB0C                <2> 		jmp rdend
  2848                              <2> 	rdenter:
  2849 00002406 C1E010              <2> 		shl eax, 16
  2850 00002409 66B80A00            <2> 		mov ax, 10
  2851 0000240D A3[18240000]        <2> 		mov [lastkey], eax
  2852                              <2> 	rdend:
  2853 00002412 A1[18240000]        <2> 		mov eax, [lastkey]
  2854 00002417 C3                  <2> 		ret
  2855                              <2> 		
  2856 00002418 00000000            <2> lastkey dd 0
  2857 0000241C 0000                <2> trans dw 0
  2858                              <1> 	%include 'source/interrupts/6_prntchar.asm'
  2859                              <2> prntchar:
  2860 0000241E 30E4                <2> 	xor ah, ah ;this kills unicode from the outside unfortunately
  2861                              <2> %ifdef io.serial
  2862                              <2> 	call prcharint
  2863                              <2> 	jmp timerinterrupt
  2864                              <2> prcharint:	
  2865                              <2> prcharq:
  2866                              <2> 	call serial.send
  2867                              <2> 	ret
  2868                              <2> %else
  2869 00002420 38FB                <2> cmp bl, bh
  2870 00002422 740A                <2> je prchar.notimer
  2871 00002424 E80B000000          <2> call prcharint
  2872 00002429 E96BDEFFFF          <2> jmp timerinterrupt
  2873                              <2> prchar.notimer:
  2874 0000242E E818000000          <2> 	call prcharq
  2875 00002433 CF                  <2> 	iret
  2876                              <2> 	
  2877                              <2> prcharint:	;print char, char in ax, modifier in bx, if ecx is eax then termcopy will not happen, will run termcopy if called as is
  2878 00002434 663DFFFE            <2> 	cmp ax, 0xFEFF
  2879 00002438 740E                <2> 	je .ret
  2880 0000243A 39C1                <2> 	cmp ecx, eax
  2881 0000243C 740D                <2> 	je prcharq
  2882 0000243E E808000000          <2> 	call prcharq
  2883 00002443 E8D9040000          <2> 	call termcopy
  2884                              <2> .ret:
  2885 00002448 C3                  <2> 	ret
  2886 00002449 00                  <2> termguion db 0
  2887 0000244A 00                  <2> termcopyon db 0
  2888                              <2> prcharq:
  2889 0000244B C1E310              <2> 	shl ebx, 16
  2890 0000244E 6689C3              <2> 	mov bx, ax
  2891 00002451 89D8                <2> 	mov eax, ebx
  2892 00002453 A3[24260000]        <2> 	mov [charbuf], eax
  2893 00002458 8B1D[1C260000]      <2> 	mov ebx, [videobufpos]
  2894 0000245E BF[9CEF2B00]        <2> 	mov edi, videobuf
  2895 00002463 01DF                <2> 	add edi, ebx
  2896 00002465 A1[2E290000]        <2> 	mov eax, [removedvideo]
  2897 0000246A 8907                <2> 	mov [edi], eax
  2898 0000246C A1[24260000]        <2> 	mov eax, [charbuf]
  2899 00002471 31D2                <2> 	xor edx, edx
  2900 00002473 668B15[20260000]    <2> 	mov dx, [charpos]
  2901 0000247A 31C9                <2> 	xor ecx, ecx
  2902 0000247C 668B0D[22260000]    <2> 	mov cx, [charxy]
  2903 00002483 6683F809            <2> 	cmp ax, 9
  2904 00002487 0F846C000000        <2> 	je near prtab
  2905 0000248D 6683F80D            <2> 	cmp ax, 13		;I am phasing this out-it is used by windows but not unix based systems
  2906 00002491 0F848C000000        <2> 	je near prcr
  2907 00002497 6683F80A            <2> 	cmp ax, 10
  2908 0000249B 0F84D2000000        <2> 	je near prnlcr
  2909 000024A1 6683F808            <2> 	cmp ax, 8
  2910 000024A5 0F8489000000        <2> 	je near prbs
  2911 000024AB 663D0030            <2> 	cmp ax, (fontend - fonts)/16
  2912 000024AF 0F833E000000        <2> 	jae near prnofont
  2913                              <2> donepr:
  2914 000024B5 8907                <2> 	mov [edi], eax
  2915 000024B7 83C704              <2> 	add edi, 4
  2916 000024BA FEC2                <2> 	inc dl
  2917                              <2> donecrnl:
  2918 000024BC 38CA                <2> 	cmp dl, cl
  2919 000024BE 0F83D3000000        <2> 	jae near preol
  2920                              <2> doneeol:
  2921 000024C4 38EE                <2> 	cmp dh, ch
  2922 000024C6 0F83E8000000        <2> 	jae near prscr	
  2923                              <2> donescr:
  2924 000024CC 89FB                <2> 	mov ebx, edi
  2925 000024CE 8B07                <2> 	mov eax, [edi]
  2926 000024D0 A3[2E290000]        <2> 	mov [removedvideo], eax
  2927 000024D5 81EB[9CEF2B00]      <2> 	sub ebx, videobuf
  2928 000024DB 891D[1C260000]      <2> 	mov [videobufpos], ebx
  2929 000024E1 668915[20260000]    <2> 	mov [charpos], dx
  2930 000024E8 A1[24260000]        <2> 	mov eax, [charbuf]
  2931 000024ED 89C3                <2> 	mov ebx, eax
  2932 000024EF C1EB10              <2> 	shr ebx, 16
  2933 000024F2 C3                  <2> 	ret
  2934                              <2> 	
  2935                              <2> 	prnofont:
  2936 000024F3 66B80200            <2> 		mov ax, 2
  2937 000024F7 EBBC                <2> 		jmp donepr
  2938                              <2> 	prtab:
  2939 000024F9 8B1D[18260000]      <2> 		mov ebx, [linebeginpos]
  2940 000024FF 81EF[9CEF2B00]      <2> 		sub edi, videobuf
  2941 00002505 29DF                <2> 		sub edi, ebx
  2942 00002507 C1EF05              <2> 		shr edi, 5
  2943 0000250A C1E705              <2> 		shl edi, 5
  2944 0000250D 83C720              <2> 		add edi, 32
  2945 00002510 C0EA03              <2> 		shr dl, 3
  2946 00002513 C0E203              <2> 		shl dl, 3
  2947 00002516 80C208              <2> 		add dl, 8
  2948 00002519 81C7[9CEF2B00]      <2> 		add edi, videobuf
  2949 0000251F 01DF                <2> 		add edi, ebx
  2950 00002521 EB99                <2> 		jmp donecrnl
  2951                              <2> 	
  2952                              <2> 	prcr:
  2953 00002523 30D2                <2> 		xor dl, dl
  2954 00002525 BF[9CEF2B00]        <2> 		mov edi, videobuf
  2955 0000252A 8B1D[18260000]      <2> 		mov ebx, [linebeginpos]
  2956 00002530 01DF                <2> 		add edi, ebx
  2957 00002532 EB88                <2> 		jmp donecrnl
  2958                              <2> 			
  2959                              <2> 	prbs:
  2960 00002534 8B1D[18260000]      <2> 		mov ebx, [linebeginpos]
  2961 0000253A 80FA00              <2> 		cmp dl, 0
  2962 0000253D 7412                <2> 		je prbackline
  2963                              <2> 	prnobmr:
  2964 0000253F 891D[18260000]      <2> 		mov [linebeginpos], ebx
  2965 00002545 FECA                <2> 		dec dl
  2966 00002547 31C0                <2> 		xor eax, eax
  2967 00002549 83EF04              <2> 		sub edi, 4
  2968 0000254C E96BFFFFFF          <2> 		jmp donecrnl
  2969                              <2> 	prbackline:
  2970 00002551 6631DB              <2> 		xor bx, bx
  2971 00002554 88CA                <2> 		mov dl, cl
  2972 00002556 80FE00              <2> 		cmp dh, 0
  2973 00002559 74E4                <2> 		je prnobmr
  2974 0000255B 8B1D[18260000]      <2> 		mov ebx, [linebeginpos]
  2975 00002561 6651                <2> 		push cx
  2976 00002563 31C9                <2> 		xor ecx, ecx
  2977 00002565 8A0C24              <2> 		mov cl, [esp]
  2978 00002568 C1E102              <2> 		shl ecx, 2
  2979 0000256B 29CB                <2> 		sub ebx, ecx
  2980 0000256D 6659                <2> 		pop cx
  2981 0000256F FECE                <2> 		dec dh
  2982 00002571 EBCC                <2> 		jmp prnobmr
  2983                              <2> 		
  2984                              <2> 	prnlcr:
  2985 00002573 FEC6                <2> 		inc dh
  2986 00002575 31DB                <2> 		xor ebx, ebx
  2987 00002577 30D2                <2> 		xor dl, dl
  2988 00002579 88CB                <2> 		mov bl, cl
  2989 0000257B 66C1E302            <2> 		shl bx, 2
  2990 0000257F BF[9CEF2B00]        <2> 		mov edi, videobuf
  2991 00002584 031D[18260000]      <2> 		add ebx, [linebeginpos]
  2992 0000258A 891D[18260000]      <2> 		mov [linebeginpos], ebx
  2993 00002590 01DF                <2> 		add edi, ebx
  2994 00002592 E925FFFFFF          <2> 		jmp donecrnl
  2995                              <2> 		
  2996                              <2> 	preol:
  2997 00002597 30D2                <2> 		xor dl, dl
  2998 00002599 FEC6                <2> 		inc dh
  2999 0000259B 31DB                <2> 		xor ebx, ebx
  3000 0000259D 88CB                <2> 		mov bl, cl
  3001 0000259F 66C1E302            <2> 		shl bx, 2
  3002 000025A3 031D[18260000]      <2> 		add ebx, [linebeginpos]
  3003 000025A9 891D[18260000]      <2> 		mov [linebeginpos], ebx
  3004 000025AF E910FFFFFF          <2> 		jmp doneeol
  3005                              <2> 	prscr:
  3006 000025B4 FECE                <2> 		dec dh
  3007 000025B6 BF[9CEF2B00]        <2> 		mov edi, videobuf
  3008 000025BB 31DB                <2> 		xor ebx, ebx
  3009 000025BD 88CB                <2> 		mov bl, cl
  3010 000025BF 66C1E302            <2> 		shl bx, 2
  3011 000025C3 01FB                <2> 		add ebx, edi
  3012                              <2> 	intscrollloop:
  3013 000025C5 8B03                <2> 		mov eax, [ebx]
  3014 000025C7 8907                <2> 		mov [edi], eax
  3015 000025C9 83C704              <2> 		add edi, 4
  3016 000025CC 83C304              <2> 		add ebx, 4
  3017 000025CF FEC9                <2> 		dec cl
  3018 000025D1 80F900              <2> 		cmp cl, 0
  3019 000025D4 75EF                <2> 		jne intscrollloop
  3020 000025D6 8A0D[22260000]      <2> 		mov cl, [charxy]
  3021 000025DC FECD                <2> 		dec ch
  3022 000025DE 80FD01              <2> 		cmp ch, 1
  3023 000025E1 77E2                <2> 		ja intscrollloop
  3024 000025E3 31C0                <2> 		xor eax, eax
  3025 000025E5 81EF[9CEF2B00]      <2> 		sub edi, videobuf
  3026 000025EB 893D[18260000]      <2> 		mov [linebeginpos], edi
  3027 000025F1 81C7[9CEF2B00]      <2> 		add edi, videobuf
  3028 000025F7 89FB                <2> 		mov ebx, edi
  3029                              <2> 	intloopclear:
  3030 000025F9 8903                <2> 		mov [ebx], eax
  3031 000025FB 83C304              <2> 		add ebx, 4
  3032 000025FE FEC9                <2> 		dec cl
  3033 00002600 80F900              <2> 		cmp cl, 0
  3034 00002603 75F4                <2> 		jne intloopclear
  3035 00002605 FECD                <2> 		dec ch
  3036 00002607 80FD00              <2> 		cmp ch, 0
  3037 0000260A 75ED                <2> 		jne intloopclear
  3038 0000260C 668B0D[22260000]    <2> 		mov cx, [charxy]
  3039 00002613 E9B4FEFFFF          <2> 		jmp donescr
  3040                              <2> 		
  3041 00002618 00000000            <2> linebeginpos dd 0
  3042 0000261C 00000000            <2> videobufpos: dd 0
  3043 00002620 0000                <2> charpos db 0,0
  3044 00002622 501E                <2> charxy db 80,30
  3045 00002624 00000000            <2> charbuf dd 0
  3046                              <2> %endif
  3047                              <1> 	%include 'source/interrupts/7_openfile.asm'
  3048                              <2> openfile:
  3049 00002628 E8AA440000          <2> 	call loadfile
  3050 0000262D E967DCFFFF          <2> 	jmp timerinterrupt
  3051                              <1> 	%include 'source/interrupts/9_num2str.asm'
  3052                              <2> num2str:
  3053 00002632 3C00                <2> 	cmp al, 0
  3054 00002634 750A                <2> 	jne num2strb
  3055 00002636 E8610C0000          <2> 	call showdec
  3056 0000263B E959DCFFFF          <2> 	jmp timerinterrupt
  3057                              <2> num2strb:
  3058 00002640 E8A80B0000          <2> 	call showhex
  3059 00002645 E94FDCFFFF          <2> 	jmp timerinterrupt
  3060                              <1> 	%include 'source/interrupts/10_str2num.asm'
  3061                              <2> str2num:
  3062 0000264A 89F7                <2> 	mov edi, esi
  3063 0000264C E81A0D0000          <2> 	call cnvrttxt	;the string goes into esi, number into ecx
  3064 00002651 E943DCFFFF          <2> 	jmp timerinterrupt
  3065                              <2> 	
  3066                              <1> %ifdef threads.included
  3067                              <1> 	%include 'source/interrupts/11_forkthread.asm'
  3068                              <2> forkthread:
  3069                              <2> 			 ;esi is next thread's start address, if 0, fork current thread
  3070                              <2> 			;returns the PID of the new fork in ebx
  3071                              <2> ;WARNING:THIS WILL NOT WORK IN C UNTIL IT COPIES THE ENTIRE STACK INCLUDING FPU AND SSE REGISTERS
  3072 00002656 FA                  <2> 	cli
  3073 00002657 60                  <2> 	pushad
  3074 00002658 8925[16270000]      <2> 	mov [.espold], esp
  3075 0000265E C605[806C0000]01    <2> 	mov byte [threadson], 1
  3076 00002665 8B1D[816C0000]      <2> 	mov ebx, [currentthread]
  3077 0000266B C1E302              <2> 	shl ebx, 2
  3078 0000266E 89A3[4CCA2D00]      <2> 	mov [threadlist + ebx], esp
  3079 00002674 C1EB02              <2> 	shr ebx, 2
  3080 00002677 83FB00              <2> 	cmp ebx, 0
  3081 0000267A 7509                <2> 	jne .simplestack
  3082 0000267C BB[00BA0300]        <2> 	mov ebx, stackend
  3083 00002681 29E3                <2> 	sub ebx, esp
  3084 00002683 EB0B                <2> 	jmp .stackcalcdone
  3085                              <2> .simplestack:
  3086 00002685 C1E30A              <2> 	shl ebx, 10
  3087 00002688 81C3[4CE22D00]      <2> 	add ebx, stack1
  3088 0000268E 29E3                <2> 	sub ebx, esp
  3089                              <2> .stackcalcdone:
  3090 00002690 29DC                <2> 	sub esp, ebx
  3091 00002692 81C4[4CE22D00]      <2> 	add esp, stack1
  3092 00002698 8B1D[7C6C0000]      <2> 	mov ebx, [lastthread]
  3093 0000269E C1E308              <2> 	shl ebx, 8
  3094 000026A1 01DC                <2> 	add esp, ebx
  3095 000026A3 891D[1A270000]      <2> 	mov [.stackend], ebx
  3096                              <2> 
  3097 000026A9 89E5                <2> 	mov ebp, esp
  3098 000026AB 8B25[16270000]      <2> 	mov esp, [.espold]
  3099                              <2> 
  3100 000026B1 C1EB0A              <2> 	shr ebx, 10 ;get pid then push it
  3101 000026B4 895C2410            <2> 	mov [esp + 16], ebx ;set the old ebx to the new PID
  3102                              <2> 
  3103 000026B8 31DB                <2> 	xor ebx, ebx
  3104                              <2> .stackcopy:
  3105 000026BA 668B041C            <2> 	mov ax, [esp + ebx]
  3106 000026BE 6689441D00          <2> 	mov [ebp + ebx], ax
  3107 000026C3 83C302              <2> 	add ebx, 2
  3108 000026C6 3B1D[1A270000]      <2> 	cmp ebx, [.stackend]
  3109 000026CC 72EC                <2> 	jb .stackcopy
  3110                              <2> 
  3111 000026CE 31C0                <2> 	xor eax, eax
  3112 000026D0 668CC8              <2> 	mov ax, cs
  3113 000026D3 89C2                <2> 	mov edx, eax
  3114 000026D5 8B4C2428            <2> 	mov ecx, [esp + 40]
  3115 000026D9 81C900020000        <2> 	or ecx, 0x200
  3116                              <2> 	
  3117 000026DF 83FE00              <2> 	cmp esi, 0
  3118 000026E2 7504                <2> 	jne .nochangestack
  3119 000026E4 8B742420            <2> 	mov esi, [esp + 32]
  3120                              <2> .nochangestack:
  3121 000026E8 89F0                <2> 	mov eax, esi
  3122 000026EA 89EC                <2> 	mov esp, ebp
  3123                              <2> 
  3124 000026EC 89442420            <2> 	mov [esp + 32], eax
  3125 000026F0 89542424            <2> 	mov [esp + 36], edx
  3126 000026F4 894C2428            <2> 	mov [esp + 40], ecx
  3127                              <2> 
  3128 000026F8 8B1D[7C6C0000]      <2> 	mov ebx, [lastthread]
  3129 000026FE 89A3[4CCA2D00]      <2> 	mov [threadlist + ebx], esp
  3130 00002704 83C304              <2> 	add ebx, 4
  3131 00002707 891D[7C6C0000]      <2> 	mov [lastthread], ebx
  3132 0000270D 8B25[16270000]      <2> 	mov esp, [.espold]
  3133 00002713 61                  <2> 	popad
  3134 00002714 FB                  <2> 	sti
  3135 00002715 CF                  <2> 	iret
  3136                              <2> 
  3137 00002716 00000000            <2> .espold dd 0
  3138 0000271A 00000000            <2> .stackend dd 0
  3139                              <1> %endif
  3140                              <1> 	%include 'source/interrupts/12_gettime.asm'
  3141                              <2> gettime:
  3142 0000271E A1[52020000]        <2> 	mov eax, [timeseconds]
  3143 00002723 8B1D[56020000]      <2> 	mov ebx, [timenanoseconds]
  3144 00002729 89D9                <2> 	mov ecx, ebx
  3145 0000272B C1E90A              <2> 	shr ecx, 10	;this is in microseconds
  3146 0000272E E966DBFFFF          <2> 	jmp timerinterrupt
  3147                              <1> 	%include 'source/interrupts/13_settime.asm'
  3148                              <2> settime:
  3149 00002733 A3[52020000]        <2> 	mov [timeseconds], eax
  3150 00002738 891D[56020000]      <2> 	mov [timenanoseconds], ebx
  3151 0000273E E956DBFFFF          <2> 	jmp timerinterrupt
  3152                              <2> 	
  3153                              <1> 	%include 'source/interrupts/14_runcmd.asm'
  3154                              <2> runcmd:
  3155 00002743 BF[88D40300]        <2> 	mov edi, buftxt
  3156                              <2> cpcmd:
  3157 00002748 8A06                <2> 	mov al, [esi]
  3158 0000274A 8807                <2> 	mov [edi], al
  3159 0000274C 46                  <2> 	inc esi
  3160 0000274D 47                  <2> 	inc edi
  3161 0000274E 3C00                <2> 	cmp al, 0
  3162 00002750 75F6                <2> 	jne cpcmd
  3163 00002752 E8C4070000          <2> 	call run
  3164 00002757 CF                  <2> 	iret
  3165                              <1> 	%include 'source/interrupts/15_proginfo.asm'
  3166                              <2> proginfo:
  3167                              <2> 	;mov ebx, variables
  3168 00002758 8B35[EB2F0000]      <2> 	mov esi, [currentcommandloc]
  3169 0000275E 89F7                <2> 	mov edi, esi
  3170 00002760 31C9                <2> 	xor ecx, ecx
  3171                              <2> getcommandzeroes:
  3172 00002762 8A07                <2> 	mov al, [edi]
  3173 00002764 47                  <2> 	inc edi
  3174 00002765 3C3B                <2> 	cmp al, ';'
  3175 00002767 740B                <2> 	je nomorezeroes
  3176 00002769 3C00                <2> 	cmp al, 0
  3177 0000276B 7407                <2> 	je nomorezeroes
  3178 0000276D 3C20                <2> 	cmp al, ' '
  3179 0000276F 75F1                <2> 	jne getcommandzeroes
  3180 00002771 41                  <2> 	inc ecx
  3181 00002772 EBEE                <2> 	jmp getcommandzeroes
  3182                              <2> nomorezeroes:
  3183 00002774 41                  <2> 	inc ecx
  3184 00002775 4F                  <2> 	dec edi
  3185 00002776 8B1D[14C00300]      <2> 	mov ebx, [uid]
  3186 0000277C 8B15[816C0000]      <2> 	mov edx, [currentthread]
  3187 00002782 CF                  <2> 	iret
  3188                              <2> 	
  3189                              <1> 	%include 'source/interrupts/16_hooksig.asm'
  3190                              <2> hooksig: ;hook code in ESI to signal in AL
  3191 00002783 3C00                <2> 	cmp al, 0
  3192 00002785 7507                <2> 	jne .quit	;only sig 0, the escape key, is handled, and only for one app
  3193                              <2> ;	xor ebx, ebx
  3194                              <2> ;	mov bl, al
  3195                              <2> ;	shl bl, 2
  3196 00002787 BF[04BA0300]        <2> 	mov edi, sigtable
  3197 0000278C 8937                <2> 	mov [edi], esi
  3198                              <2> .quit:
  3199 0000278E E906DBFFFF          <2> 	jmp timerinterrupt
  3200                              <1> %ifdef gui.included
  3201                              <1> 	%include 'source/interrupts/17_guiint.asm'
  3202                              <2> guiint:
  3203 00002793 3CFD                <2> 	cmp al, 253
  3204 00002795 0F848E000000        <2> 	je near .getinfo
  3205 0000279B 803D[18960000]01    <2> 	cmp byte [guion], 1
  3206 000027A2 0F8550000000        <2> 	jne near .nogui
  3207 000027A8 3C00                <2> 	cmp al, 0
  3208 000027AA 0F844D000000        <2> 	je near .clear
  3209 000027B0 3C01                <2> 	cmp al, 1
  3210 000027B2 0F84DE000000        <2> 	je near .putpixel
  3211 000027B8 3C02                <2> 	cmp al, 2
  3212 000027BA 0F84E3000000        <2> 	je near .drawtext
  3213 000027C0 3C03                <2> 	cmp al, 3
  3214 000027C2 0F84F6000000        <2> 	je near .drawline
  3215 000027C8 3C04                <2> 	cmp al, 4
  3216 000027CA 0F8401010000        <2> 	je near .drawcircle
  3217 000027D0 3C05                <2> 	cmp al, 5
  3218 000027D2 0F8409010000        <2> 	je near .fillcircle
  3219 000027D8 3C06                <2> 	cmp al, 6
  3220 000027DA 0F8411010000        <2> 	je near .drawsquare
  3221 000027E0 3C07                <2> 	cmp al, 7
  3222 000027E2 0F841C010000        <2> 	je near .fillsquare
  3223 000027E8 3CFE                <2> 	cmp al, 254
  3224 000027EA 0F8461000000        <2> 	je near .setinfo
  3225 000027F0 3CFF                <2> 	cmp al, 255
  3226 000027F2 0F845E000000        <2> 	je near .reset
  3227                              <2> .nogui:
  3228 000027F8 E99CDAFFFF          <2> 	jmp timerinterrupt
  3229                              <2> 
  3230                              <2> .clear:		;color in bx
  3231 000027FD 66891D[4F730000]    <2> 	mov [background], bx
  3232                              <2> %ifdef gui.background
  3233 00002804 8B1D[27730000]      <2> 	mov ebx, [backgroundimage]
  3234 0000280A 83FB00              <2> 	cmp ebx, 0
  3235 0000280D 7410                <2> 	je .clearit
  3236 0000280F C705[27730000]0000- <2> 	mov dword [backgroundimage], 0
  3237 00002817 0000                <2>
  3238 00002819 891D[92280000]      <2> 	mov [.bgi], ebx
  3239                              <2> .clearit:
  3240                              <2> %endif
  3241 0000281F E8AE4A0000          <2> 	call guiclear
  3242 00002824 E970DAFFFF          <2> 	jmp timerinterrupt
  3243                              <2> 	
  3244                              <2> .getinfo:	;puts screen size in (dx, cx), background color in bx, and will put other stuff in other places
  3245 00002829 31DB                <2> 	xor ebx, ebx
  3246 0000282B 31C9                <2> 	xor ecx, ecx
  3247 0000282D 31D2                <2> 	xor edx, edx
  3248 0000282F 381D[18960000]      <2> 	cmp [guion], bl
  3249 00002835 74C1                <2> 	je .nogui
  3250 00002837 668B1D[4F730000]    <2> 	mov bx, [background]
  3251 0000283E 668B15[6B5A0000]    <2> 	mov dx, [resolutionx]
  3252 00002845 668B0D[6D5A0000]    <2> 	mov cx, [resolutiony]
  3253 0000284C E948DAFFFF          <2> 	jmp timerinterrupt
  3254                              <2> 	
  3255                              <2> .setinfo:	;does nothing yet. will get screen size in (dx, cx), background color in bx, and will put other stuff in other places
  3256 00002851 E943DAFFFF          <2> 	jmp timerinterrupt
  3257                              <2> .reset:		;resets the screen to the original settings
  3258 00002856 66BBCF7B            <2> 	mov bx, background.original
  3259 0000285A 66891D[4F730000]    <2> 	mov [background], bx
  3260 00002861 66BBFFFF            <2> 	mov bx, 0xFFFF
  3261 00002865 66891D[027A0000]    <2> 	mov [colorfont2], bx
  3262                              <2> %ifdef gui.background
  3263 0000286C 8B1D[27730000]      <2> 	mov ebx, [backgroundimage]
  3264 00002872 83FB00              <2> 	cmp ebx, 0
  3265 00002875 750C                <2> 	jne .resetit
  3266 00002877 8B1D[92280000]      <2> 	mov ebx, [.bgi]
  3267 0000287D 891D[27730000]      <2> 	mov [backgroundimage], ebx
  3268                              <2> .resetit:
  3269                              <2> %endif
  3270 00002883 E84A4A0000          <2> 	call guiclear
  3271 00002888 E8C64A0000          <2> 	call reloadallgraphics
  3272 0000288D E907DAFFFF          <2> 	jmp timerinterrupt
  3273                              <2> 
  3274                              <2> %ifdef gui.background
  3275 00002892 00000000            <2> 	.bgi dd 0
  3276                              <2> %endif
  3277                              <2> 	
  3278                              <2> .putpixel:	;pixel location in (dx, cx), color in bx
  3279 00002896 6689DE              <2> 	mov si, bx
  3280 00002899 E8E5600000          <2> 	call putpixel
  3281 0000289E E9F6D9FFFF          <2> 	jmp timerinterrupt
  3282                              <2> 
  3283                              <2> .drawtext:	;background in di, foreground in bx, location in (dx,cx), string in esi
  3284 000028A3 66D1E2              <2> 	shl dx, 1
  3285 000028A6 66891D[027A0000]    <2> 	mov [colorfont2], bx
  3286 000028AD 66893D[4F730000]    <2> 	mov [background], di
  3287 000028B4 E8E0500000          <2> 	call showstring2
  3288 000028B9 E9DBD9FFFF          <2> 	jmp timerinterrupt
  3289                              <2> 
  3290                              <2> .drawline:	;color in bx, start in (dx,cx), end in (di,si)
  3291 000028BE 6689F0              <2> 	mov ax, si
  3292 000028C1 6689DE              <2> 	mov si, bx
  3293 000028C4 6689FB              <2> 	mov bx, di
  3294 000028C7 E8F3480000          <2> 	call drawline
  3295 000028CC E9C8D9FFFF          <2> 	jmp timerinterrupt
  3296                              <2> 
  3297                              <2> .drawcircle: ;color in bx, radius in si, center in (dx,cx)
  3298 000028D1 6689F0              <2> 	mov ax, si
  3299 000028D4 6689DE              <2> 	mov si, bx
  3300 000028D7 E88F440000          <2> 	call drawcircle
  3301 000028DC E9B8D9FFFF          <2> 	jmp timerinterrupt
  3302                              <2> 
  3303                              <2> .fillcircle: ;color in bx, radius in si, center in (dx,cx)
  3304 000028E1 6689F0              <2> 	mov ax, si
  3305 000028E4 6689DE              <2> 	mov si, bx
  3306 000028E7 E888450000          <2> 	call fillcircle
  3307 000028EC E9A8D9FFFF          <2> 	jmp timerinterrupt
  3308                              <2> 	
  3309                              <2> .drawsquare: ;color in bx, start in (dx, cx), end in (di, si)
  3310 000028F1 6689F0              <2> 	mov ax, si
  3311 000028F4 6689DE              <2> 	mov si, bx
  3312 000028F7 6689FB              <2> 	mov bx, di
  3313 000028FA E8214B0000          <2> 	call drawsquare
  3314 000028FF E995D9FFFF          <2> 	jmp timerinterrupt
  3315                              <2> 
  3316                              <2> .fillsquare: ;color in bx, start in (dx, cx), end in (di, si)
  3317 00002904 6689F0              <2> 	mov ax, si
  3318 00002907 6689DE              <2> 	mov si, bx
  3319 0000290A 6689FB              <2> 	mov bx, di
  3320 0000290D E87D4B0000          <2> 	call fillsquare
  3321 00002912 E982D9FFFF          <2> 	jmp timerinterrupt
  3322                              <1> %endif
  3323                              <1> %ifdef sound.included
  3324                              <1> 	%include 'source/interrupts/18_soundint.asm'
  3325                              <2> soundint:
  3326 00002917 E97DD9FFFF          <2> 	jmp timerinterrupt
  3327                              <1> %endif
  3328                              <1> %ifdef network.included
  3329                              <1> 	%include 'source/interrupts/19_netint.asm'
  3330                              <2> netint:
  3331 0000291C E978D9FFFF          <2> 	jmp timerinterrupt
  3332                              <1> %endif
  3333                              <1> 
  3334                              <1> termcopy:
  3335                              <1> %ifdef io.serial
  3336                              <1> 	ret
  3337                              <1> %else
  3338                              <1> %ifdef terminal.vsync
  3339 00002921 C605[29290000]01    <1> 	mov byte [termcopyneeded], 1
  3340 00002928 C3                  <1> 	ret
  3341                              <1> %else
  3342                              <1> 	call newtermcopy
  3343                              <1> 	ret
  3344                              <1> %endif
  3345 00002929 00                  <1> 	termcopyneeded db 0
  3346 0000292A 00000000            <1> 	termcursorpos dd 0
  3347 0000292E 00000000            <1> 	removedvideo dd 0
  3348                              <1> newtermcopy:
  3349 00002932 60                  <1> 	pusha
  3350 00002933 BF[9CEF2B00]        <1> 	mov edi, videobuf
  3351 00002938 31DB                <1> 	xor ebx, ebx
  3352 0000293A 881D[29290000]      <1> 	mov [termcopyneeded], bl
  3353 00002940 8B1D[1C260000]      <1> 	mov ebx, [videobufpos]
  3354 00002946 01DF                <1> 	add edi, ebx
  3355 00002948 893D[2A290000]      <1> 	mov [termcursorpos], edi
  3356 0000294E E8D6000000          <1> 	call switchtermcursor
  3357 00002953 803D[18960000]00    <1> 	cmp byte [guion], 0
  3358 0000295A 0F8420000000        <1> 	je near nowincopy
  3359                              <1> %ifdef gui.included
  3360 00002960 C605[BF810000]00    <1> 	mov byte [mouseselecton], 0
  3361 00002967 C605[4A240000]01    <1> 	mov byte [termcopyon], 1
  3362 0000296E 803D[49240000]01    <1> 	cmp byte [termguion], 1
  3363 00002975 0F844E550000        <1> 	je near windowvideocopy
  3364                              <1> %endif
  3365 0000297B E9A2000000          <1> 	jmp nocopytermatall
  3366                              <1> nowincopy:
  3367 00002980 BE00000A00          <1> 	mov esi, 0xA0000
  3368 00002985 A1[33020000]        <1> 	mov eax, [basecache]
  3369 0000298A C1E004              <1> 	shl eax, 4
  3370 0000298D 29C6                <1> 	sub esi, eax
  3371 0000298F BF[9CEF2B00]        <1> 	mov edi, videobuf
  3372 00002994 31C9                <1> 	xor ecx, ecx
  3373 00002996 668B0D[22260000]    <1> 	mov cx, [charxy]
  3374                              <1> nowincopy2:
  3375 0000299D 8B07                <1> 	mov eax, [edi]
  3376 0000299F 81C748D50000        <1> 	add edi, (videobuf2 - videobuf)
  3377 000029A5 8B1F                <1> 	mov ebx, [edi]
  3378 000029A7 8907                <1> 	mov [edi], eax
  3379 000029A9 81EF48D50000        <1> 	sub edi, (videobuf2 - videobuf)
  3380 000029AF 83C702              <1> 	add edi, 2
  3381 000029B2 39D8                <1> 	cmp eax, ebx
  3382 000029B4 7445                <1> 	je nopresentwinfont
  3383 000029B6 83EF02              <1> 	sub edi, 2
  3384 000029B9 BD[72980000]        <1> 	mov ebp, fonts
  3385 000029BE 31C0                <1> 	xor eax, eax
  3386 000029C0 668B07              <1> 	mov ax, [edi]
  3387 000029C3 C1E004              <1> 	shl eax, 4
  3388 000029C6 01C5                <1> 	add ebp, eax
  3389 000029C8 83C702              <1> 	add edi, 2
  3390 000029CB 668B1F              <1> 	mov bx, [edi]
  3391 000029CE 31D2                <1> 	xor edx, edx
  3392 000029D0 8A15[22260000]      <1> 	mov dl, [charxy]
  3393 000029D6 C1C110              <1> 	rol ecx, 16
  3394 000029D9 B110                <1> 	mov cl, 16
  3395                              <1> nowinfont:
  3396 000029DB 8A4500              <1> 	mov al, [ebp]
  3397 000029DE D0C8                <1> 	ror al, 1
  3398 000029E0 80FB80              <1> 	cmp bl, 0x80
  3399 000029E3 7202                <1> 	jb notnotfont
  3400 000029E5 F6D0                <1> 	not al
  3401                              <1> notnotfont:
  3402 000029E7 8806                <1> 	mov [esi], al
  3403 000029E9 01D6                <1> 	add esi, edx
  3404 000029EB 45                  <1> 	inc ebp
  3405 000029EC FEC9                <1> 	dec cl
  3406 000029EE 80F900              <1> 	cmp cl, 0
  3407 000029F1 75E8                <1> 	jne nowinfont
  3408 000029F3 C1E204              <1> 	shl edx, 4
  3409 000029F6 29D6                <1> 	sub esi, edx
  3410 000029F8 C1C110              <1> 	rol ecx, 16
  3411                              <1> nopresentwinfont:
  3412 000029FB 83C702              <1> 	add edi, 2
  3413 000029FE 46                  <1> 	inc esi
  3414 000029FF FEC9                <1> 	dec cl
  3415 00002A01 80F900              <1> 	cmp cl, 0
  3416 00002A04 7597                <1> 	jne nowincopy2
  3417 00002A06 8A0D[22260000]      <1> 	mov cl, [charxy]
  3418 00002A0C 31D2                <1> 	xor edx, edx
  3419 00002A0E 88CA                <1> 	mov dl, cl
  3420 00002A10 29D6                <1> 	sub esi, edx
  3421 00002A12 C1E204              <1> 	shl edx, 4
  3422 00002A15 01D6                <1> 	add esi, edx
  3423 00002A17 FECD                <1> 	dec ch
  3424 00002A19 80FD00              <1> 	cmp ch, 0
  3425 00002A1C 0F857BFFFFFF        <1> 	jne nowincopy2
  3426                              <1> nocopytermatall:
  3427 00002A22 E802000000          <1> 	call switchtermcursor
  3428 00002A27 61                  <1> 	popa
  3429 00002A28 C3                  <1> 	ret
  3430                              <1> 	
  3431                              <1> switchtermcursor:
  3432 00002A29 8B3D[2A290000]      <1> 	mov edi, [termcursorpos]
  3433 00002A2F 668B4702            <1> 	mov ax, [edi + 2]
  3434 00002A33 668B1F              <1> 	mov bx, [edi]
  3435 00002A36 663D8000            <1> 	cmp ax, 0x80
  3436 00002A3A 7206                <1> 	jb movlargecursorterm
  3437 00002A3C 66B80700            <1> 	mov ax, 7
  3438 00002A40 EB04                <1> 	jmp movedcursorterm
  3439                              <1> movlargecursorterm:
  3440 00002A42 66B8F000            <1> 	mov ax, 0xF0
  3441                              <1> movedcursorterm:
  3442 00002A46 66894702            <1> 	mov [edi + 2], ax
  3443 00002A4A 6683FB00            <1> 	cmp bx, 0
  3444 00002A4E 7507                <1> 	jne fixednocursorterm
  3445 00002A50 66BB2000            <1> 	mov bx, ' '
  3446 00002A54 66891F              <1> 	mov [edi], bx
  3447                              <1> fixednocursorterm:
  3448 00002A57 C3                  <1> 	ret
  3449                              <1> %endif
  3450                                  %include "source/dosints.asm"
  3451                              <1> int20h:
  3452 00002A58 66B8004C            <1> mov ax, 0x4C00
  3453                              <1> int21h:
  3454                              <1> dostosolleros:
  3455 00002A5C 6650                <1> 	push ax
  3456 00002A5E 66B83000            <1> 	mov ax, NEW_DATA_SEL
  3457 00002A62 8ED8                <1> 	mov ds, ax
  3458 00002A64 8EC0                <1> 	mov es, ax
  3459 00002A66 8EE0                <1> 	mov fs, ax
  3460 00002A68 66B82000            <1> 	mov ax, SYS_DATA_SEL
  3461 00002A6C 8EE8                <1> 	mov gs, ax
  3462 00002A6E 6658                <1> 	pop ax
  3463 00002A70 9C                  <1> 	pushf
  3464 00002A71 60                  <1> 	pusha
  3465 00002A72 80FC01              <1> 	cmp ah, 1
  3466 00002A75 0F8449000000        <1> 	je near dosgchar
  3467 00002A7B 80FC02              <1> 	cmp ah, 2
  3468 00002A7E 0F8447000000        <1> 	je near doswchar
  3469 00002A84 80FC09              <1> 	cmp ah, 9
  3470 00002A87 0F844B000000        <1> 	je near dosprintstr
  3471 00002A8D 80FC0A              <1> 	cmp ah, 0xA
  3472 00002A90 0F845A000000        <1> 	je near dosgetstr
  3473 00002A96 80FC2B              <1> 	cmp ah, 0x2B
  3474 00002A99 0F8493000000        <1> 	je near dosgetdate
  3475 00002A9F 80FC2C              <1> 	cmp ah, 0x2C
  3476 00002AA2 0F84AD000000        <1> 	je near dosgettime
  3477 00002AA8 80FC4C              <1> 	cmp ah, 0x4C
  3478 00002AAB 0F84C2000000        <1> 	je near dosexit
  3479                              <1> backtodos:
  3480 00002AB1 61                  <1> 	popa
  3481 00002AB2 9D                  <1> 	popf
  3482 00002AB3 6650                <1> 	push ax
  3483 00002AB5 66B85000            <1> 	mov ax, DOS_DATA_SEL
  3484 00002AB9 8ED8                <1> 	mov ds, ax
  3485 00002ABB 8EC0                <1> 	mov es, ax
  3486 00002ABD 8EE0                <1> 	mov fs, ax
  3487 00002ABF 8EE8                <1> 	mov gs, ax
  3488 00002AC1 6658                <1> 	pop ax
  3489 00002AC3 CF                  <1> 	iret
  3490                              <1> 
  3491                              <1> dosgchar:
  3492 00002AC4 E8EDF8FFFF          <1> 	call getchar
  3493 00002AC9 EBE6                <1> 	jmp backtodos
  3494                              <1> 	
  3495                              <1> doswchar:
  3496 00002ACB 88D0                <1> 	mov al, dl
  3497 00002ACD 30E4                <1> 	xor ah, ah
  3498 00002ACF B307                <1> 	mov bl, 7
  3499 00002AD1 E85EF9FFFF          <1> 	call prcharint
  3500 00002AD6 EBD9                <1> 	jmp backtodos
  3501                              <1> 	
  3502                              <1> dosprintstr:
  3503 00002AD8 31F6                <1> 	xor esi, esi
  3504 00002ADA 6689D6              <1> 	mov si, dx
  3505 00002ADD 81C600004000        <1> 	add esi, dosprogloc
  3506 00002AE3 66B82400            <1> 	mov ax, "$"
  3507 00002AE7 B307                <1> 	mov bl, 7
  3508 00002AE9 E8F5F2FFFF          <1> 	call printint
  3509 00002AEE EBC1                <1> 	jmp backtodos
  3510                              <1> 	
  3511                              <1> dosgetstr:
  3512 00002AF0 31F6                <1> 	xor esi, esi
  3513 00002AF2 6689D6              <1> 	mov si, dx
  3514 00002AF5 81C600004000        <1> 	add esi, dosprogloc
  3515 00002AFB B900000000          <1> 	mov ecx, 0
  3516 00002B00 8A0E                <1> 	mov cl, [esi]
  3517 00002B02 83C602              <1> 	add esi, 2
  3518 00002B05 89F7                <1> 	mov edi, esi
  3519 00002B07 8935[2E2B0000]      <1> 	mov [stringstart], esi
  3520 00002B0D 01CF                <1> 	add edi, ecx
  3521 00002B0F B00A                <1> 	mov al, 10
  3522 00002B11 B307                <1> 	mov bl, 7
  3523 00002B13 E802F4FFFF          <1> 	call rdprintdos
  3524 00002B18 89F1                <1> 	mov ecx, esi
  3525 00002B1A 2B0D[2E2B0000]      <1> 	sub ecx, [stringstart]
  3526 00002B20 8B35[2E2B0000]      <1> 	mov esi, [stringstart]
  3527 00002B26 884EFF              <1> 	mov [esi - 1], cl
  3528 00002B29 884EFE              <1> 	mov [esi - 2], cl
  3529 00002B2C EB83                <1> 	jmp backtodos
  3530 00002B2E 00000000            <1> stringstart dd 0
  3531                              <1> 
  3532                              <1> dosgetdate:
  3533 00002B32 E84E160000          <1> 	call time
  3534 00002B37 8A0D[8B440000]      <1> 	mov cl, [RTCtimeYear]
  3535 00002B3D B500                <1> 	mov ch, 0
  3536 00002B3F 6681C1D007          <1> 	add cx, 2000
  3537 00002B44 8A35[8A440000]      <1> 	mov dh, [RTCtimeMonth]
  3538 00002B4A 8A15[89440000]      <1> 	mov dl, [RTCtimeDay]
  3539 00002B50 E95CFFFFFF          <1> 	jmp backtodos
  3540                              <1> 
  3541                              <1> dosgettime:
  3542 00002B55 E82B160000          <1> 	call time
  3543 00002B5A 8A2D[88440000]      <1> 	mov ch, [RTCtimeHour]
  3544 00002B60 8A0D[87440000]      <1> 	mov cl, [RTCtimeMinute]
  3545 00002B66 8A35[86440000]      <1> 	mov dh, [RTCtimeSecond]
  3546 00002B6C B200                <1> 	mov dl, 0
  3547 00002B6E E93EFFFFFF          <1> 	jmp backtodos
  3548                              <1> 	
  3549                              <1> dosexit:
  3550 00002B73 BE[F3950000]        <1> 	mov esi, line
  3551 00002B78 E85FF2FFFF          <1> 	call print
  3552 00002B7D 61                  <1> 	popa
  3553 00002B7E 9D                  <1> 	popf
  3554 00002B7F 8B25[08BE0300]      <1> 	mov esp, [previousstack]
  3555 00002B85 31DB                <1> 	xor ebx, ebx
  3556 00002B87 88C3                <1> 	mov bl, al
  3557 00002B89 80FB00              <1> 	cmp bl, 0
  3558 00002B8C 0F85D3F1FFFF        <1> 	jne near exitprog.error
  3559 00002B92 C3                  <1> 	ret
  3560                                  %include "source/shush.asm"
  3561                              <1> os:
  3562                              <1> setdefenv:
  3563 00002B93 C605[14BE0300]2F    <1> 	mov byte [currentfolder], '/'
  3564 00002B9A C705[10BE0300]0100- <1> 	mov dword [currentfolderloc], 1
  3565 00002BA2 0000                <1>
  3566 00002BA4 E8DFF2FFFF          <1> 	call clear
  3567                              <1> 	
  3568                              <1> bootfilecheck:
  3569 00002BA9 803D[18C00300]01    <1> 	cmp byte [ranboot], 1
  3570 00002BB0 0F841E000000        <1> 	je near nobootfile
  3571                              <1> 	%ifdef hardware.automatic
  3572 00002BB6 E8E13A0000          <1> 		call initializelater ;Initialize components that have debug messages
  3573                              <1> 	%endif
  3574                              <1> 	%ifdef disk.none
  3575                              <1> 	%else
  3576 00002BBB BF[B2950000]        <1> 		mov edi, bootfilename
  3577 00002BC0 BE00004000          <1> 		mov esi, 0x400000
  3578 00002BC5 E80D3F0000          <1> 		call loadfile
  3579 00002BCA 83FA00              <1> 		cmp edx, 0
  3580 00002BCD 7505                <1> 		jne nobootfile
  3581 00002BCF E81A0D0000          <1> 		call progbatchfound
  3582                              <1> 	%endif
  3583                              <1> nobootfile:	
  3584 00002BD4 C605[18C00300]01    <1> 	mov byte [ranboot], 1
  3585                              <1> 
  3586 00002BDB BE[02000000]        <1> 	mov esi, signature
  3587                              <1> .sigcopyloop:	;this prevents an odd error
  3588 00002BE0 658A06              <1> 	mov al, [gs:esi]
  3589 00002BE3 8806                <1> 	mov [esi], al
  3590 00002BE5 46                  <1> 	inc esi
  3591 00002BE6 81FE[10000000]      <1> 	cmp esi, signatureend
  3592 00002BEC 72F2                <1> 	jb .sigcopyloop
  3593                              <1> 	
  3594 00002BEE BE[02000000]        <1> 	mov esi, signature
  3595 00002BF3 E8E4F1FFFF          <1> 	call print
  3596 00002BF8 8B0D[0C000000]      <1> 	mov ecx, [signatureend - 4]
  3597 00002BFE E899060000          <1> 	call showdec
  3598 00002C03 E8CFF1FFFF          <1> 	call printline
  3599 00002C08 BE[CF950000]        <1> 	mov esi, userask
  3600 00002C0D E8CAF1FFFF          <1> 	call print
  3601                              <1> 
  3602                              <1> usercheck:
  3603 00002C12 BE[88D40300]        <1> 	mov esi, buftxt
  3604 00002C17 BF[88D80300]        <1> 	mov edi, buftxtend
  3605 00002C1C B00A                <1> 	mov al, 10
  3606 00002C1E E8E3F2FFFF          <1> 	call rdprint
  3607 00002C23 56                  <1> 	push esi
  3608 00002C24 BE[D9950000]        <1> 	mov esi, pwdask
  3609 00002C29 E8AEF1FFFF          <1> 	call print
  3610 00002C2E 5E                  <1> 	pop esi
  3611 00002C2F 46                  <1> 	inc esi
  3612 00002C30 8935[222D0000]      <1> 	mov [esipass], esi
  3613                              <1> passcheck:
  3614 00002C36 E87BF7FFFF          <1> 	call getchar
  3615 00002C3B 3C0A                <1> 	cmp al, 10
  3616 00002C3D 0F8438000000        <1> 	je near gotpass
  3617 00002C43 3C08                <1> 	cmp al, 8
  3618 00002C45 0F8412000000        <1> 	je near backpass
  3619 00002C4B 8806                <1> 	mov [esi], al
  3620 00002C4D 46                  <1> 	inc esi
  3621 00002C4E 30E4                <1> 	xor ah, ah
  3622 00002C50 B02A                <1> 	mov al, "*"
  3623 00002C52 E8DDF7FFFF          <1> 	call prcharint
  3624 00002C57 EBDD                <1> 	jmp passcheck
  3625 00002C59 08200800            <1> backcursor2 db 8," ",8,0
  3626                              <1> backpass:
  3627 00002C5D 3B35[222D0000]      <1> 	cmp esi, [esipass]
  3628 00002C63 0F84CDFFFFFF        <1> 	je near passcheck
  3629 00002C69 4E                  <1> 	dec esi
  3630 00002C6A C60600              <1> 	mov byte [esi], 0
  3631 00002C6D 56                  <1> 	push esi
  3632 00002C6E BE[592C0000]        <1> 	mov esi, backcursor2
  3633 00002C73 E864F1FFFF          <1> 	call print
  3634 00002C78 5E                  <1> 	pop esi
  3635 00002C79 EBBB                <1> 	jmp passcheck
  3636                              <1> gotpass:
  3637 00002C7B B00A                <1> 	mov al, 10
  3638 00002C7D E8B2F7FFFF          <1> 	call prcharint
  3639 00002C82 30C0                <1> 	xor al, al
  3640 00002C84 31C9                <1> 	xor ecx, ecx
  3641 00002C86 8806                <1> 	mov [esi], al
  3642 00002C88 BB[F5950000]        <1> 	mov ebx, userlst
  3643                              <1> userfind:
  3644 00002C8D BE[88D40300]        <1> 	mov esi, buftxt
  3645 00002C92 8A06                <1> 	mov al, [esi]
  3646 00002C94 3C00                <1> 	cmp al, 0
  3647 00002C96 0F84F7FEFFFF        <1> 	je near os
  3648 00002C9C 891D[262D0000]      <1> 	mov [usercache], ebx
  3649 00002CA2 E848030000          <1> 	call tester
  3650 00002CA7 3C01                <1> 	cmp al, 1
  3651 00002CA9 7416                <1> 	je pwdtest
  3652 00002CAB 41                  <1> 	inc ecx
  3653                              <1> nxtuser:
  3654 00002CAC 8A03                <1> 	mov al, [ebx]
  3655 00002CAE 43                  <1> 	inc ebx
  3656 00002CAF 3C00                <1> 	cmp al, 0
  3657 00002CB1 75F9                <1> 	jne nxtuser
  3658 00002CB3 81FB[18960000]      <1> 	cmp ebx, userlstend
  3659 00002CB9 0F83D4FEFFFF        <1> 	jae near os
  3660 00002CBF EBCC                <1> 	jmp userfind
  3661                              <1> pwdtest:
  3662 00002CC1 46                  <1> 	inc esi
  3663 00002CC2 43                  <1> 	inc ebx
  3664 00002CC3 E827030000          <1> 	call tester
  3665 00002CC8 3C01                <1> 	cmp al, 1
  3666 00002CCA 7402                <1> 	je pwdrgt
  3667 00002CCC EBDE                <1> 	jmp nxtuser
  3668                              <1> pwdrgt:
  3669 00002CCE D1E9                <1> 	shr ecx, 1
  3670 00002CD0 890D[14C00300]      <1> 	mov [uid], ecx
  3671 00002CD6 E8ADF1FFFF          <1> 	call clear
  3672 00002CDB 31C9                <1> 	xor ecx, ecx
  3673 00002CDD 41                  <1> 	inc ecx
  3674 00002CDE 890D[309A2D00]      <1> 	mov [commandbufpos], ecx
  3675                              <1> returnfromexp:
  3676 00002CE4 66B90002            <1> 	mov cx, 200h
  3677 00002CE8 BE[88D40300]        <1> 	mov esi, buftxt
  3678 00002CED 8935[EB2F0000]      <1> 	mov [currentcommandloc], esi
  3679 00002CF3 E822000000          <1> 	call bufclr
  3680                              <1> clearolddata:
  3681 00002CF8 31C0                <1> 	xor eax, eax
  3682 00002CFA A2[19C00300]        <1> 	mov [IFON], al
  3683 00002CFF A2[1AC00300]        <1> 	mov [IFTRUE], al
  3684 00002D04 A2[82C00300]        <1> 	mov [BATCHISON], al
  3685 00002D09 A3[7EC00300]        <1> 	mov [BATCHPOS], eax
  3686 00002D0E A2[83C00300]        <1> 	mov [LOOPON], al
  3687 00002D13 A3[84C00300]        <1> 	mov [LOOPPOS], eax
  3688 00002D18 EB30                <1> 	jmp nwcmd
  3689                              <1> bufclr:	
  3690 00002D1A 30C0                <1> 	xor al, al
  3691 00002D1C 8806                <1> 	mov [esi], al
  3692 00002D1E 46                  <1> 	inc esi
  3693 00002D1F E2F9                <1> 	loop bufclr
  3694 00002D21 C3                  <1> 	ret
  3695                              <1> 
  3696 00002D22 00000000            <1> esipass dd 0
  3697 00002D26 [F5950000]          <1> usercache dd userlst
  3698                              <1> 	
  3699                              <1> buftxtclear:
  3700 00002D2A 30C0                <1> 	xor al, al
  3701 00002D2C BE[88D40300]        <1> 	mov esi, buftxt
  3702 00002D31 81FE[88D80300]      <1> clearbuftxt: cmp esi, buf2
  3703 00002D37 730E                <1> 	jae retbufclr
  3704 00002D39 8806                <1> 	mov [esi], al
  3705 00002D3B 46                  <1> 	inc esi
  3706 00002D3C EBF3                <1> 	jmp clearbuftxt
  3707                              <1> 
  3708 00002D3E 39DE                <1> clearitbuf: cmp esi, ebx
  3709 00002D40 7305                <1> 	jae retbufclr
  3710 00002D42 8806                <1> 	mov [esi], al
  3711 00002D44 46                  <1> 	inc esi
  3712 00002D45 EBF7                <1> 	jmp clearitbuf
  3713 00002D47 C3                  <1> retbufclr: ret
  3714                              <1> 
  3715 00002D48 EB00                <1> full:	jmp nwcmd
  3716                              <1> 
  3717                              <1> shush:	;SollerOS Hardly Unix-compatible Shell
  3718                              <1> nwcmd:
  3719 00002D4A FB                  <1> 	sti
  3720 00002D4B 31C0                <1> 	xor eax, eax
  3721 00002D4D 3905[132F0000]      <1> 	cmp [nextcommandloc], eax
  3722 00002D53 7413                <1> 	je nomultiplecommand
  3723 00002D55 8B35[132F0000]      <1> 	mov esi, [nextcommandloc]
  3724 00002D5B 8935[172F0000]      <1> 	mov [thiscommandloc], esi
  3725 00002D61 E8BA010000          <1> 	call fixvariables
  3726 00002D66 EBE2                <1> 	jmp nwcmd
  3727                              <1> nomultiplecommand:
  3728 00002D68 A3[172F0000]        <1> 	mov [thiscommandloc], eax
  3729 00002D6D 3805[806C0000]      <1> 	cmp [threadson], al
  3730 00002D73 7405                <1> 	je noclinwcmd
  3731 00002D75 A2[806C0000]        <1> 	mov [threadson], al
  3732                              <1> noclinwcmd:
  3733 00002D7A B001                <1> 	mov al, 1
  3734 00002D7C 3805[82C00300]      <1> 	cmp [BATCHISON], al
  3735 00002D82 7501                <1> 	jne cancel
  3736 00002D84 C3                  <1> 	ret
  3737 00002D85 30C0                <1> cancel:	xor al, al
  3738 00002D87 A2[19C00300]        <1> 	mov [IFON], al
  3739 00002D8C A2[82C00300]        <1> 	mov [BATCHISON], al
  3740 00002D91 B05B                <1> 	mov al, '['
  3741 00002D93 66BB0700            <1> 	mov bx, 7
  3742 00002D97 E8AFF6FFFF          <1> 	call prcharq
  3743 00002D9C 8B35[262D0000]      <1> 	mov esi, [usercache]
  3744 00002DA2 E814F0FFFF          <1> 	call printquiet
  3745 00002DA7 BE[E3950000]        <1> 	mov esi, computer
  3746 00002DAC E80AF0FFFF          <1> 	call printquiet
  3747 00002DB1 BE[14BE0300]        <1> 	mov esi, currentfolder
  3748 00002DB6 0335[0CBE0300]      <1> 	add esi, [lastfolderloc]
  3749 00002DBC E8FAEFFFFF          <1> 	call printquiet
  3750 00002DC1 BE[EE950000]        <1> 	mov esi, endprompt
  3751 00002DC6 E811F0FFFF          <1> 	call print
  3752 00002DCB E85AFFFFFF          <1> 	call buftxtclear
  3753 00002DD0 BE[88D40300]        <1> 	mov esi, buftxt
  3754 00002DD5 C605[9F230000]01    <1> 	mov byte [commandedit], 1
  3755 00002DDC B00A                <1> 	mov al, 10
  3756 00002DDE 66BB0700            <1> 	mov bx, 7
  3757 00002DE2 BF[88D80300]        <1> 	mov edi, buftxtend
  3758 00002DE7 E81AF1FFFF          <1> 	call rdprint
  3759 00002DEC C605[9F230000]00    <1> 	mov byte [commandedit], 0
  3760 00002DF3 803D[88D40300]00    <1> 	cmp byte [buftxt], 0
  3761 00002DFA 0F844AFFFFFF        <1> 	je near nwcmd
  3762 00002E00 8B35[309A2D00]      <1> gotcmd:	mov esi, [commandbufpos]
  3763 00002E06 8935[2C9A2D00]      <1> 	mov [lastcommandpos], esi
  3764 00002E0C FF05[389A2D00]      <1> 	inc dword [commandsentered]
  3765 00002E12 BF[88D40300]        <1> 	mov edi, buftxt
  3766 00002E17 81C6[3C9A2D00]      <1> 	add esi, commandbuf
  3767 00002E1D 81FE[3CAA2D00]      <1> 	cmp esi, commandbufend
  3768 00002E23 7605                <1> 	jbe copycommand
  3769 00002E25 BE[3C9A2D00]        <1> 	mov esi, commandbuf
  3770                              <1> copycommand:
  3771 00002E2A 8A07                <1> 	mov al, [edi]
  3772 00002E2C 8806                <1> 	mov [esi], al
  3773 00002E2E 47                  <1> 	inc edi
  3774 00002E2F 46                  <1> 	inc esi
  3775 00002E30 3C00                <1> 	cmp al, 0
  3776 00002E32 740F                <1> 	je donecopy
  3777 00002E34 81FE[3CAA2D00]      <1> 	cmp esi, commandbufend
  3778 00002E3A 76EE                <1> 	jbe copycommand
  3779 00002E3C BE[3C9A2D00]        <1> 	mov esi, commandbuf
  3780 00002E41 EBE7                <1> 	jmp copycommand
  3781                              <1> donecopy:
  3782 00002E43 81EE[3C9A2D00]      <1> 	sub esi, commandbuf
  3783 00002E49 8935[309A2D00]      <1> 	mov [commandbufpos], esi
  3784 00002E4F E8C7000000          <1> 	call run
  3785 00002E54 E9F1FEFFFF          <1> 	jmp nwcmd
  3786                              <1> 
  3787 00002E59 E8CCFEFFFF          <1> input:	call buftxtclear
  3788 00002E5E BE[88D40300]        <1> 	mov esi, buftxt		;puts input into buftxt AND onto screen
  3789 00002E63 BF[88D80300]        <1> 	mov edi, buftxtend
  3790 00002E68 B00A                <1> stdin:	mov al, 10
  3791 00002E6A B307                <1> 	mov bl, 7
  3792 00002E6C E895F0FFFF          <1> 	call rdprint
  3793 00002E71 C3                  <1> 	ret
  3794                              <1> 
  3795                              <1> replacevariable:
  3796 00002E72 8A4601              <1> 	mov al, [esi + 1]
  3797 00002E75 C64601FF            <1> 	mov byte [esi + 1], 255
  3798 00002E79 3C24                <1> 	cmp al, "$"
  3799 00002E7B 0F849F000000        <1> 	je near fixvariables
  3800 00002E81 884601              <1> 	mov [esi + 1], al
  3801 00002E84 56                  <1> 	push esi
  3802 00002E85 81EE[88D40300]      <1> 	sub esi, buftxt
  3803 00002E8B 89F7                <1> 	mov edi, esi
  3804 00002E8D 81C6[88D40300]      <1> 	add esi, buftxt
  3805 00002E93 47                  <1> 	inc edi
  3806 00002E94 BB[88C00300]        <1> 	mov ebx, variables
  3807 00002E99 E89A190000          <1> 	call nxtvrech
  3808 00002E9E 89F7                <1> 	mov edi, esi
  3809 00002EA0 31DB                <1> 	xor ebx, ebx
  3810 00002EA2 4E                  <1> 	dec esi
  3811                              <1> findvarname:
  3812 00002EA3 4E                  <1> 	dec esi
  3813 00002EA4 8A06                <1> 	mov al, [esi]
  3814 00002EA6 43                  <1> 	inc ebx
  3815 00002EA7 3C04                <1> 	cmp al, 4
  3816 00002EA9 75F8                <1> 	jne findvarname
  3817 00002EAB 5E                  <1> 	pop esi
  3818                              <1> replacevarloop:
  3819 00002EAC 8A07                <1> 	mov al, [edi]
  3820 00002EAE 3C00                <1> 	cmp al, 0
  3821 00002EB0 0F8410000000        <1> 	je near compressbuftxt
  3822 00002EB6 83FB00              <1> 	cmp ebx, 0
  3823 00002EB9 0F8413000000        <1> 	je near expandbuftxt
  3824 00002EBF 8806                <1> 	mov [esi], al
  3825 00002EC1 4B                  <1> 	dec ebx
  3826 00002EC2 46                  <1> 	inc esi
  3827 00002EC3 47                  <1> 	inc edi
  3828 00002EC4 EBE6                <1> 	jmp replacevarloop
  3829                              <1> compressbuftxt:
  3830 00002EC6 8A041E              <1> 	mov al, [esi + ebx]
  3831 00002EC9 8806                <1> 	mov [esi], al
  3832 00002ECB 46                  <1> 	inc esi
  3833 00002ECC 3C00                <1> 	cmp al, 0
  3834 00002ECE 75F6                <1> 	jne compressbuftxt
  3835 00002ED0 EB4E                <1> 	jmp fixvariables
  3836                              <1> expandbuftxt:
  3837 00002ED2 89F1                <1> 	mov ecx, esi
  3838 00002ED4 8A26                <1> 	mov ah, [esi]
  3839                              <1> expandbuftxtlp:
  3840 00002ED6 8A1E                <1> 	mov bl, [esi]
  3841 00002ED8 46                  <1> 	inc esi
  3842 00002ED9 8A3E                <1> 	mov bh, [esi]
  3843 00002EDB 8826                <1> 	mov [esi], ah
  3844 00002EDD 88FC                <1> 	mov ah, bh
  3845 00002EDF 80FB00              <1> 	cmp bl, 0
  3846 00002EE2 75F2                <1> 	jne expandbuftxtlp
  3847 00002EE4 89CE                <1> 	mov esi, ecx
  3848 00002EE6 8806                <1> 	mov [esi], al
  3849 00002EE8 47                  <1> 	inc edi
  3850 00002EE9 8A07                <1> 	mov al, [edi]
  3851 00002EEB 3C00                <1> 	cmp al, 0
  3852 00002EED 0F842D000000        <1> 	je near fixvariables
  3853 00002EF3 46                  <1> 	inc esi
  3854 00002EF4 EBDC                <1> 	jmp expandbuftxt
  3855                              <1> multipleprogline:
  3856 00002EF6 30E4                <1> 	xor ah, ah
  3857 00002EF8 8826                <1> 	mov [esi], ah
  3858 00002EFA 46                  <1> 	inc esi
  3859 00002EFB 8935[132F0000]      <1> 	mov [nextcommandloc], esi
  3860 00002F01 EB3B                <1> 	jmp donefixvariables
  3861                              <1> inlinecomment:	;if the following char is #, include a #, otherwise end the line
  3862 00002F03 46                  <1> 	inc esi
  3863 00002F04 8A06                <1> 	mov al, [esi]
  3864 00002F06 C606FF              <1> 	mov byte [esi], 255
  3865 00002F09 3C23                <1> 	cmp al, '#'
  3866 00002F0B 7413                <1> 	je fixvariables
  3867 00002F0D 4E                  <1> 	dec esi
  3868 00002F0E C60600              <1> 	mov byte [esi], 0
  3869 00002F11 EB0D                <1> 	jmp fixvariables
  3870                              <1> 	
  3871 00002F13 00000000            <1> nextcommandloc dd 0
  3872 00002F17 00000000            <1> thiscommandloc dd 0	
  3873                              <1> run:
  3874 00002F1B BE[88D40300]        <1> 	mov esi, buftxt
  3875                              <1> fixvariables:
  3876 00002F20 46                  <1> 	inc esi
  3877 00002F21 8A06                <1> 	mov al, [esi]
  3878 00002F23 3C23                <1> 	cmp al, '#'	;inline comment
  3879 00002F25 74DC                <1> 	je inlinecomment
  3880 00002F27 3C24                <1> 	cmp al, '$' ;variable
  3881 00002F29 0F8443FFFFFF        <1> 	je near replacevariable
  3882 00002F2F 3C3B                <1> 	cmp al, ';' ;program list
  3883 00002F31 74C3                <1> 	je multipleprogline
  3884 00002F33 3C00                <1> 	cmp al, 0
  3885 00002F35 75E9                <1> 	jne fixvariables
  3886 00002F37 31C0                <1> 	xor eax, eax
  3887 00002F39 A3[132F0000]        <1> 	mov [nextcommandloc], eax
  3888                              <1> donefixvariables:
  3889 00002F3E 803D[9D340000]00    <1> 	cmp byte [indexdone], 0
  3890 00002F45 7505                <1> 	jne progtest
  3891 00002F47 E8D7040000          <1> 	call indexfiles
  3892                              <1> progtest:
  3893 00002F4C 31C0                <1> 	xor eax, eax
  3894 00002F4E BB[08BA0300]        <1> 	mov ebx, fileindex
  3895 00002F53 668B03              <1> prgnxt:	mov ax, [ebx]
  3896 00002F56 B1FF                <1> 	mov cl, 255
  3897 00002F58 B52C                <1> 	mov ch, 44
  3898 00002F5A 6639C8              <1> 	cmp ax, cx
  3899 00002F5D 740B                <1> 	je fndprg
  3900 00002F5F 43                  <1> 	inc ebx
  3901 00002F60 81FB[08BE0300]      <1> 	cmp ebx, fileindexend
  3902 00002F66 7357                <1> 	jae prgnf
  3903 00002F68 EBE9                <1> 	jmp prgnxt
  3904 00002F6A 83C302              <1> fndprg: add ebx, 2
  3905 00002F6D 31C9                <1> 	xor ecx, ecx
  3906 00002F6F BE[88D40300]        <1> 	mov esi, buftxt
  3907 00002F74 390D[172F0000]      <1> 	cmp [thiscommandloc], ecx
  3908 00002F7A 7406                <1> 	je noprgtstmultiple
  3909 00002F7C 8B35[172F0000]      <1> 	mov esi, [thiscommandloc]
  3910                              <1> noprgtstmultiple:
  3911 00002F82 E8A3000000          <1> 	call cndtest
  3912 00002F87 3C01                <1> 	cmp al, 1
  3913 00002F89 7302                <1> 	jae prggood
  3914 00002F8B EBC6                <1> 	jmp prgnxt
  3915 00002F8D 81FB[08BE0300]      <1> prggood: cmp ebx, fileindexend
  3916 00002F93 7355                <1> 	jae prgdn
  3917 00002F95 31C0                <1> 	xor eax, eax
  3918 00002F97 BE[88D40300]        <1> 	mov esi, buftxt
  3919 00002F9C 3905[172F0000]      <1> 	cmp [thiscommandloc], eax
  3920 00002FA2 7406                <1> 	je noprggoodmul
  3921 00002FA4 8B35[172F0000]      <1> 	mov esi, [thiscommandloc]
  3922                              <1> noprggoodmul:
  3923 00002FAA 8935[EB2F0000]      <1> 	mov [currentcommandloc], esi
  3924 00002FB0 83C303              <1> 	add ebx, 3
  3925 00002FB3 8B3B                <1> 	mov edi, [ebx]
  3926 00002FB5 C605[806C0000]02    <1> 	mov byte [threadson], 2
  3927 00002FBC FFD7                <1> 	call edi
  3928 00002FBE C3                  <1> 	ret
  3929                              <1> prgnf:	
  3930 00002FBF 8B35[EB2F0000]      <1> 	mov esi, [currentcommandloc]
  3931 00002FC5 8A06                <1> 	mov al, [esi]
  3932 00002FC7 3C00                <1> 	cmp al, 0
  3933 00002FC9 741F                <1> 	je prgdn
  3934 00002FCB BE[BA950000]        <1> 	mov esi, notfound1
  3935 00002FD0 E807EEFFFF          <1> 	call print
  3936 00002FD5 8B35[EB2F0000]      <1> 	mov esi, [currentcommandloc]
  3937 00002FDB E8FCEDFFFF          <1> 	call print
  3938 00002FE0 BE[C2950000]        <1> 	mov esi, notfound2
  3939 00002FE5 E8F2EDFFFF          <1> 	call print
  3940 00002FEA C3                  <1> prgdn:	ret
  3941                              <1> 
  3942 00002FEB 00000000            <1> currentcommandloc dd 0
  3943                              <1> 
  3944                              <1> tester:			;si=user bx=prog returns 1 in al if true
  3945 00002FEF 6631C0              <1> 	xor ax, ax
  3946 00002FF2 8A06                <1> retest:	mov al, [esi]
  3947 00002FF4 8A23                <1> 	mov ah, [ebx]
  3948 00002FF6 3C00                <1> 	cmp al, 0
  3949 00002FF8 7408                <1> 	je testtrue
  3950 00002FFA 38E0                <1> 	cmp al, ah
  3951 00002FFC 750C                <1> 	jne testfalse
  3952 00002FFE 43                  <1> 	inc ebx
  3953 00002FFF 46                  <1> 	inc esi
  3954 00003000 EBF0                <1> 	jmp retest
  3955                              <1> testtrue:
  3956 00003002 80FC00              <1> 	cmp ah, 0
  3957 00003005 7503                <1> 	jne testfalse
  3958 00003007 B001                <1> 	mov al, 1
  3959 00003009 C3                  <1> 	ret
  3960                              <1> testfalse:
  3961 0000300A 30C0                <1> 	xor al, al
  3962 0000300C C3                  <1> 	ret
  3963                              <1> 
  3964                              <1> optest:			;si=user bx=prog returns 1 in al if true
  3965 0000300D 30C0                <1> 	xor al, al
  3966                              <1> opretest:
  3967 0000300F 8A06                <1> 	mov al, [esi]
  3968 00003011 8A23                <1> 	mov ah, [ebx]
  3969 00003013 38E0                <1> 	cmp al, ah
  3970 00003015 7510                <1> 	jne optestfalse
  3971 00003017 80FC00              <1> 	cmp ah, 0
  3972 0000301A 7404                <1> 	je optesttrue
  3973 0000301C 43                  <1> 	inc ebx
  3974 0000301D 46                  <1> 	inc esi
  3975 0000301E EBEF                <1> 	jmp opretest
  3976                              <1> optesttrue:
  3977 00003020 3C00                <1> 	cmp al, 0
  3978 00003022 7503                <1> 	jne optestfalse
  3979 00003024 B001                <1> 	mov al, 1
  3980 00003026 C3                  <1> 	ret
  3981                              <1> optestfalse:
  3982 00003027 30C0                <1> 	xor al, al
  3983 00003029 C3                  <1> 	ret
  3984                              <1> 
  3985                              <1> cndtest:			;si=user bx=prog cl=endchar returns 1 in al if true
  3986 0000302A 30C0                <1> 	xor al, al
  3987 0000302C 8A06                <1> cndretest:	mov al, [esi]
  3988 0000302E 8A23                <1> 	mov ah, [ebx]
  3989 00003030 38CC                <1> 	cmp ah, cl
  3990 00003032 7408                <1> 	je cndtesttrue
  3991 00003034 38E0                <1> 	cmp al, ah
  3992 00003036 750B                <1> 	jne cndtestfalse
  3993 00003038 43                  <1> 	inc ebx
  3994 00003039 46                  <1> 	inc esi
  3995 0000303A EBF0                <1> 	jmp cndretest
  3996                              <1> cndtesttrue:
  3997 0000303C 38C8                <1> 	cmp al, cl
  3998 0000303E 7506                <1> 	jne cndtestalmost
  3999 00003040 B001                <1> 	mov al, 1
  4000 00003042 C3                  <1> 	ret
  4001                              <1> cndtestfalse:
  4002 00003043 30C0                <1> 	xor al, al
  4003 00003045 C3                  <1> 	ret
  4004                              <1> cndtestalmost:
  4005 00003046 B002                <1> 	mov al, 2
  4006 00003048 C3                  <1> 	ret
  4007                              <1> 	
  4008                              <1> array:				;arraystart in si, arrayend in bx, arrayseperator in cx
  4009                              <1> 		                ;ends if array seperator is found backwards after 0
  4010                              <1> 	arnxt:	      
  4011 00003049 88E8                <1> 		mov al, ch
  4012 0000304B 88CC                <1> 		mov ah, cl        
  4013 0000304D 663906              <1> 		cmp [esi], ax
  4014 00003050 7445                <1> 		je ardn
  4015 00003052 66390E              <1> 		cmp [esi], cx
  4016 00003055 7407                <1> 		je arfnd
  4017 00003057 46                  <1> 		inc esi
  4018 00003058 39DE                <1> 		cmp esi, ebx
  4019 0000305A 733B                <1> 		jae ardn
  4020 0000305C EBEB                <1> 		jmp arnxt
  4021 0000305E 83C602              <1> 	arfnd: add esi, 2
  4022 00003061 891D[98300000]      <1> 		mov [arbx], ebx
  4023 00003067 890D[9C300000]      <1> 		mov [arcx], ecx
  4024 0000306D E86AEDFFFF          <1> 		call print
  4025 00003072 8935[9E300000]      <1> 		mov [arsi], esi
  4026 00003078 E85AEDFFFF          <1> 		call printline
  4027 0000307D 8B1D[98300000]      <1> 		mov ebx, [arbx]
  4028 00003083 668B0D[9C300000]    <1> 		mov cx, [arcx]
  4029 0000308A 8B35[9E300000]      <1> 		mov esi, [arsi]
  4030 00003090 46                  <1> 		inc esi
  4031 00003091 39DE                <1> 		cmp esi, ebx
  4032 00003093 7302                <1> 		jae ardn
  4033 00003095 EBB2                <1> 		jmp arnxt
  4034 00003097 C3                  <1> 	ardn:	ret
  4035 00003098 00000000            <1> arbx:	dw 0,0
  4036 0000309C 0000                <1> arcx:	db 0,0
  4037 0000309E 00000000            <1> arsi:	dw 0,0
  4038                              <1> 
  4039                              <1> clearbuffer:
  4040 000030A2 BE[88D80300]        <1> 	mov esi, buf2
  4041 000030A7 B030                <1> 	mov al, '0'
  4042 000030A9 81FE[9CD80300]      <1> clearbuf: cmp esi, numbuf
  4043 000030AF 7305                <1> 	jae doneclearbuff
  4044 000030B1 8806                <1> 	mov [esi], al
  4045 000030B3 46                  <1> 	inc esi
  4046 000030B4 EBF3                <1> 	jmp clearbuf
  4047                              <1> doneclearbuff: 
  4048 000030B6 C3                  <1> 		ret
  4049                              <1> 
  4050                              <1> convert:
  4051 000030B7 4E                  <1> 	dec esi
  4052 000030B8 89F3                <1> 	mov ebx, esi		;place to convert into must be in esi, number to convert must be in ecx
  4053                              <1> .lp:
  4054 000030BA 89DE                <1> 	mov esi, ebx
  4055 000030BC 83EE09              <1> 	sub esi, 9
  4056 000030BF 81F900CA9A3B        <1> 	cmp ecx, 1000000000
  4057 000030C5 720A                <1> 	jb .8
  4058 000030C7 81E900CA9A3B        <1> 	sub ecx, 1000000000
  4059 000030CD FE06                <1> 	inc byte [esi]
  4060 000030CF EBE9                <1> 	jmp .lp
  4061 000030D1 46                  <1> .8:	inc esi
  4062 000030D2 81F900E1F505        <1> 	cmp ecx, 100000000
  4063 000030D8 720A                <1> 	jb .7
  4064 000030DA 81E900E1F505        <1> 	sub ecx, 100000000
  4065 000030E0 FE06                <1> 	inc byte [esi]
  4066 000030E2 EBD6                <1> 	jmp .lp
  4067 000030E4 46                  <1> .7:	inc esi
  4068 000030E5 81F980969800        <1> 	cmp ecx, 10000000
  4069 000030EB 720A                <1> 	jb .6
  4070 000030ED 81E980969800        <1> 	sub ecx, 10000000
  4071 000030F3 FE06                <1> 	inc byte [esi]
  4072 000030F5 EBC3                <1> 	jmp .lp
  4073 000030F7 46                  <1> .6:	inc esi
  4074 000030F8 81F940420F00        <1> 	cmp ecx, 1000000
  4075 000030FE 720A                <1> 	jb .5
  4076 00003100 81E940420F00        <1> 	sub ecx, 1000000
  4077 00003106 FE06                <1> 	inc byte [esi]
  4078 00003108 EBB0                <1> 	jmp .lp
  4079 0000310A 46                  <1> .5:	inc esi
  4080 0000310B 81F9A0860100        <1> 	cmp ecx, 100000
  4081 00003111 720A                <1> 	jb .4
  4082 00003113 81E9A0860100        <1> 	sub ecx, 100000
  4083 00003119 FE06                <1> 	inc byte [esi]
  4084 0000311B EB9D                <1> 	jmp .lp
  4085 0000311D 46                  <1> .4:	inc esi
  4086 0000311E 81F910270000        <1> 	cmp ecx, 10000
  4087 00003124 720A                <1> 	jb .3
  4088 00003126 81E910270000        <1> 	sub ecx, 10000
  4089 0000312C FE06                <1> 	inc byte [esi]
  4090 0000312E EB8A                <1> 	jmp .lp
  4091 00003130 46                  <1> .3:	inc esi
  4092 00003131 81F9E8030000        <1> 	cmp ecx, 1000
  4093 00003137 720D                <1> 	jb .2
  4094 00003139 81E9E8030000        <1> 	sub ecx, 1000
  4095 0000313F FE06                <1> 	inc byte [esi]
  4096 00003141 E974FFFFFF          <1> 	jmp .lp
  4097 00003146 46                  <1> .2:	inc esi
  4098 00003147 83F964              <1> 	cmp ecx, 100
  4099 0000314A 720A                <1> 	jb .1
  4100 0000314C 83E964              <1> 	sub ecx, 100
  4101 0000314F FE06                <1> 	inc byte [esi]
  4102 00003151 E964FFFFFF          <1> 	jmp .lp
  4103 00003156 46                  <1> .1:	inc esi
  4104 00003157 83F90A              <1> 	cmp ecx, 10
  4105 0000315A 720A                <1> 	jb .0
  4106 0000315C 83E90A              <1> 	sub ecx, 10
  4107 0000315F FE06                <1> 	inc byte [esi]
  4108 00003161 E954FFFFFF          <1> 	jmp .lp
  4109 00003166 46                  <1> .0:	inc esi
  4110 00003167 83F901              <1> 	cmp ecx, 1
  4111 0000316A 720A                <1> 	jb .dn
  4112 0000316C 83E901              <1> 	sub ecx, 1
  4113 0000316F FE06                <1> 	inc byte [esi]
  4114 00003171 E944FFFFFF          <1> 	jmp .lp
  4115                              <1> .dn:
  4116 00003176 C3                  <1> 	ret
  4117                              <1> 
  4118                              <1> 	
  4119                              <1> 
  4120 00003177 00<rept>            <1> hexnumber times 8 db 0
  4121 0000317F 202000              <1> hexnumberend db "  ",0
  4122                              <1> 
  4123                              <1> converthex:
  4124                              <1> .clear:	;place to convert to in esi, end of buffer in edi number in ecx
  4125 00003182 56                  <1> 	push esi
  4126 00003183 B030                <1> 	mov al, "0"
  4127 00003185 39FE                <1> .clearlp: cmp esi, edi
  4128 00003187 7305                <1> 	jae .doneclear
  4129 00003189 8806                <1> 	mov [esi], al
  4130 0000318B 46                  <1> 	inc esi
  4131 0000318C EBF7                <1> 	jmp .clearlp
  4132                              <1> .doneclear:
  4133 0000318E 83EE02              <1> 	sub esi, 2
  4134 00003191 89C8                <1> 	mov eax, ecx
  4135                              <1> .loop:
  4136 00003193 30FF                <1> 	xor bh, bh
  4137 00003195 88C3                <1> 	mov bl, al
  4138 00003197 66C1E304            <1> 	shl bx, 4
  4139 0000319B C0EB04              <1> 	shr bl, 4
  4140 0000319E 86DF                <1> 	xchg bl, bh ;they are backwards
  4141 000031A0 80C330              <1> 	add bl, 48
  4142 000031A3 80FB39              <1> 	cmp bl, "9"
  4143 000031A6 7609                <1> 	jbe .goodbl
  4144 000031A8 80EB30              <1> 	sub bl, 48
  4145 000031AB 80EB0A              <1> 	sub bl, 0xA
  4146 000031AE 80C341              <1> 	add bl, "A"
  4147                              <1> .goodbl:
  4148 000031B1 80C730              <1> 	add bh, 48
  4149 000031B4 80FF39              <1> 	cmp bh, "9"
  4150 000031B7 7609                <1> 	jbe .goodbh
  4151 000031B9 80EF30              <1> 	sub bh, 48
  4152 000031BC 80EF0A              <1> 	sub bh, 0xA
  4153 000031BF 80C741              <1> 	add bh, "A"
  4154                              <1> .goodbh:
  4155 000031C2 C1E808              <1> 	shr eax, 8
  4156 000031C5 66891E              <1> 	mov [esi], bx
  4157 000031C8 83EE02              <1> 	sub esi, 2
  4158 000031CB 3B3424              <1> 	cmp esi, [esp]
  4159 000031CE 7205                <1> 	jb .done
  4160 000031D0 83F800              <1> 	cmp eax, 0
  4161 000031D3 75BE                <1> 	jne .loop
  4162                              <1> .done:
  4163 000031D5 5E                  <1> 	pop esi
  4164 000031D6 C3                  <1> 	ret
  4165                              <1> 	
  4166                              <1> 	
  4167 000031D7 00                  <1> smallhex db 0
  4168 000031D8 01                  <1> firsthexshown db 1
  4169                              <1> showhexsmall:
  4170 000031D9 C605[D7310000]01    <1> 	mov byte [smallhex], 1
  4171 000031E0 E808000000          <1> 	call showhex
  4172 000031E5 C605[D7310000]00    <1> 	mov byte [smallhex], 0
  4173 000031EC C3                  <1> 	ret
  4174                              <1> showhex:
  4175 000031ED 60                  <1> 	pusha
  4176 000031EE BE[77310000]        <1> 	mov esi, hexnumber
  4177 000031F3 BF[7F310000]        <1> 	mov edi, hexnumberend
  4178 000031F8 E885FFFFFF          <1> 	call converthex
  4179 000031FD 803D[D8310000]01    <1> 	cmp byte [firsthexshown], 1
  4180 00003204 7503                <1> 	jne .show
  4181 00003206 6631D2              <1> 	xor dx, dx
  4182                              <1> .show:
  4183 00003209 803D[D8310000]03    <1> 	cmp byte [firsthexshown], 3
  4184 00003210 7505                <1> 	jne .nonewhexline
  4185 00003212 E8C0EBFFFF          <1> 	call printline
  4186                              <1> .nonewhexline:
  4187 00003217 803D[D8310000]04    <1> 	cmp byte [firsthexshown], 4
  4188 0000321E 751F                <1> 	jne .notab
  4189 00003220 B1A0                <1> 	mov cl, 160
  4190 00003222 28D1                <1> 	sub cl, dl
  4191 00003224 C0E905              <1> 	shr cl, 5
  4192 00003227 C0E105              <1> 	shl cl, 5
  4193 0000322A 80F900              <1> 	cmp cl, 0
  4194 0000322D 7507                <1> 	jne .nonewline
  4195 0000322F E8A3EBFFFF          <1> 	call printline
  4196 00003234 EB09                <1> 	jmp .notab
  4197                              <1> .nonewline:
  4198 00003236 80C20F              <1> 	add dl, 15
  4199 00003239 C0EA04              <1> 	shr dl, 4
  4200 0000323C C0E204              <1> 	shl dl, 4
  4201                              <1> .notab:
  4202 0000323F BE[77310000]        <1> 	mov esi, hexnumber
  4203 00003244 803D[D7310000]01    <1> 	cmp byte [smallhex],1
  4204 0000324B 7503                <1> 	jne .nosmall
  4205 0000324D 83C606              <1> 	add esi, 6
  4206                              <1> .nosmall:
  4207 00003250 803D[D8310000]05    <1> 	cmp byte [firsthexshown], 5
  4208 00003257 7507                <1> 	jne .noquiet
  4209 00003259 E85DEBFFFF          <1> 	call printquiet
  4210 0000325E EB15                <1> 	jmp .donequiet
  4211                              <1> .noquiet:
  4212 00003260 803D[D8310000]06    <1> 	cmp byte [firsthexshown], 6
  4213 00003267 7507                <1> 	jne .normal
  4214 00003269 E860EBFFFF          <1> 	call printhighlight
  4215 0000326E EB05                <1> 	jmp .donequiet
  4216                              <1> .normal:
  4217 00003270 E867EBFFFF          <1> 	call print
  4218                              <1> .donequiet:
  4219 00003275 803D[D8310000]02    <1> 	cmp byte [firsthexshown], 2
  4220 0000327C 7505                <1> 	jne .shown
  4221 0000327E E854EBFFFF          <1> 	call printline
  4222                              <1> .shown:
  4223 00003283 C605[D8310000]00    <1> 	mov byte [firsthexshown], 0
  4224 0000328A 61                  <1> 	popa
  4225 0000328B C3                  <1> 	ret
  4226                              <1> 
  4227                              <1> 
  4228 0000328C 303030303030303030- <1> decnumber db "00000000000000"
  4229 00003295 3030303030          <1>
  4230 0000329A 2000                <1> decnumberend: db " ",0
  4231                              <1> 
  4232                              <1> showdec: ;same as showhex, just uses decimal conversion
  4233 0000329C 60                  <1> 	pusha
  4234 0000329D BF[8C320000]        <1> 	mov edi, decnumber
  4235 000032A2 BE[9A320000]        <1> 	mov esi, decnumberend
  4236                              <1> .clear:
  4237 000032A7 C60730              <1> 	mov byte [edi], '0'
  4238 000032AA 47                  <1> 	inc edi
  4239 000032AB 39F7                <1> 	cmp edi, esi
  4240 000032AD 72F8                <1> 	jb .clear
  4241 000032AF BF[8C320000]        <1> 	mov edi, decnumber
  4242 000032B4 E8FEFDFFFF          <1> 	call convert
  4243 000032B9 803D[D8310000]01    <1> 	cmp byte [firsthexshown], 1
  4244 000032C0 7503                <1> 	jne .show
  4245 000032C2 6631D2              <1> 	xor dx, dx
  4246                              <1> .show:
  4247 000032C5 803D[D8310000]03    <1> 	cmp byte [firsthexshown], 3
  4248 000032CC 7505                <1> 	jne .nonewdecline
  4249 000032CE E804EBFFFF          <1> 	call printline
  4250                              <1> .nonewdecline:
  4251 000032D3 803D[D8310000]04    <1> 	cmp byte [firsthexshown], 4
  4252 000032DA 751F                <1> 	jne .notab
  4253 000032DC B1A0                <1> 	mov cl, 160
  4254 000032DE 28D1                <1> 	sub cl, dl
  4255 000032E0 C0E905              <1> 	shr cl, 5
  4256 000032E3 C0E105              <1> 	shl cl, 5
  4257 000032E6 80F900              <1> 	cmp cl, 0
  4258 000032E9 7507                <1> 	jne .nonewline
  4259 000032EB E8E7EAFFFF          <1> 	call printline
  4260 000032F0 EB09                <1> 	jmp .notab
  4261                              <1> .nonewline:
  4262 000032F2 80C20F              <1> 	add dl, 15
  4263 000032F5 C0EA04              <1> 	shr dl, 4
  4264 000032F8 C0E204              <1> 	shl dl, 4
  4265                              <1> .notab:
  4266 000032FB BE[8C320000]        <1> 	mov esi, decnumber
  4267 00003300 4E                  <1> 	dec esi
  4268                              <1> .sifind:
  4269 00003301 46                  <1> 	inc esi
  4270 00003302 81FE[99320000]      <1> 	cmp esi, decnumberend - 1
  4271 00003308 7305                <1> 	jae .nosifind
  4272 0000330A 803E30              <1> 	cmp byte [esi], '0'
  4273 0000330D 74F2                <1> 	je .sifind
  4274                              <1> .nosifind:
  4275 0000330F E8C8EAFFFF          <1> 	call print
  4276 00003314 803D[D8310000]02    <1> 	cmp byte [firsthexshown], 2
  4277 0000331B 7505                <1> 	jne .shown
  4278 0000331D E8B5EAFFFF          <1> 	call printline
  4279                              <1> .shown:
  4280 00003322 C605[D8310000]00    <1> 	mov byte [firsthexshown], 0
  4281 00003329 61                  <1> 	popa
  4282 0000332A C3                  <1> 	ret
  4283                              <1> 	
  4284                              <1> cnvrthextxt:
  4285 0000332B 31C9                <1> 	xor ecx, ecx
  4286 0000332D 31C0                <1> 	xor eax, eax
  4287 0000332F 31D2                <1> 	xor edx, edx
  4288 00003331 31DB                <1> 	xor ebx, ebx
  4289 00003333 4E                  <1> 	dec esi
  4290                              <1> .end:
  4291 00003334 46                  <1> 	inc esi
  4292 00003335 8A06                <1> 	mov al, [esi]
  4293 00003337 3C00                <1> 	cmp al, 0
  4294 00003339 75F9                <1> 	jne .end
  4295                              <1> .loop:
  4296 0000333B 4E                  <1> 	dec esi
  4297 0000333C 8A06                <1> 	mov al, [esi]
  4298 0000333E 3C41                <1> 	cmp al, "A"
  4299 00003340 731F                <1> 	jae .char
  4300 00003342 2C30                <1> 	sub al, 48
  4301 00003344 3C10                <1> 	cmp al, 16
  4302 00003346 7718                <1> 	ja .done
  4303                              <1> .donechar:
  4304 00003348 83FA00              <1> 	cmp edx, 0
  4305 0000334B 740B                <1> 	je .noshl
  4306 0000334D 89D3                <1> 	mov ebx, edx
  4307                              <1> .shl:
  4308 0000334F C1E004              <1> 	shl eax, 4
  4309 00003352 4B                  <1> 	dec ebx
  4310 00003353 83FB00              <1> 	cmp ebx, 0
  4311 00003356 75F7                <1> 	jne .shl
  4312                              <1> .noshl:
  4313 00003358 42                  <1> 	inc edx
  4314 00003359 01C1                <1> 	add ecx, eax
  4315 0000335B 83FA08              <1> 	cmp edx, 8
  4316 0000335E 72DB                <1> 	jb .loop
  4317                              <1> .done:
  4318 00003360 C3                  <1> 	ret
  4319                              <1> .char:
  4320 00003361 3C46                <1> 	cmp al, "F"
  4321 00003363 77FB                <1> 	ja .done
  4322 00003365 2C41                <1> 	sub al, "A"
  4323 00003367 040A                <1> 	add al, 0xA
  4324 00003369 EBDD                <1> 	jmp .donechar
  4325                              <1> 	
  4326                              <1> 	
  4327                              <1> cnvrttxt: ;text to convert in esi, first part or 0 in edi
  4328 0000336B 31C9                <1> 	xor ecx, ecx
  4329 0000336D 31C0                <1> 	xor eax, eax
  4330 0000336F 31D2                <1> 	xor edx, edx
  4331 00003371 31DB                <1> 	xor ebx, ebx
  4332 00003373 4E                  <1> 	dec esi
  4333                              <1> .lp:
  4334 00003374 46                  <1> 	inc esi
  4335 00003375 8A06                <1> 	mov al, [esi]
  4336 00003377 3C00                <1> 	cmp al, 0
  4337 00003379 75F9                <1> 	jne .lp
  4338 0000337B 4E                  <1> 	dec esi
  4339 0000337C 8A06                <1> 	mov al, [esi]
  4340 0000337E 3C2E                <1> 	cmp al, '.'
  4341 00003380 7503                <1> 	jne .dot
  4342 00003382 46                  <1> 	inc esi
  4343 00003383 EBEF                <1> 	jmp .lp
  4344                              <1> .dot:
  4345 00003385 3C20                <1> 	cmp al, ' '
  4346 00003387 7404                <1> 	je .zero
  4347 00003389 3C30                <1> 	cmp al, '0'
  4348 0000338B 7504                <1> 	jne .txtlp
  4349                              <1> .zero: 
  4350 0000338D 39FE                <1> 		cmp esi, edi
  4351 0000338F 743F                <1> 		je .done
  4352                              <1> .txtlp:
  4353 00003391 31C0                <1> 	xor eax, eax
  4354 00003393 8A06                <1> 	mov al, [esi]
  4355 00003395 3C3D                <1> 	cmp al, '='
  4356 00003397 7437                <1> 	je .done
  4357 00003399 3C30                <1> 	cmp al, 48
  4358 0000339B 7233                <1> 	jb .done
  4359 0000339D 3C3A                <1> 	cmp al, 58
  4360 0000339F 732F                <1> 	jae .done
  4361 000033A1 3C23                <1> 	cmp al, '#'
  4362 000033A3 742B                <1> 	je .done
  4363 000033A5 39FE                <1> 	cmp esi, edi
  4364 000033A7 7227                <1> 	jb .done
  4365 000033A9 83F900              <1> 	cmp ecx, 0
  4366 000033AC 7708                <1> 	ja .exp
  4367 000033AE 2C30                <1> .noexp:	sub al, 48
  4368 000033B0 01C2                <1> 	add edx, eax
  4369 000033B2 4E                  <1> 	dec esi
  4370 000033B3 41                  <1> 	inc ecx
  4371 000033B4 EBDB                <1> 	jmp .txtlp
  4372 000033B6 83F900              <1> .exp:	cmp ecx, 0
  4373 000033B9 74F3                <1> 	je .noexp
  4374 000033BB 2C30                <1> 	sub al, 48
  4375 000033BD 51                  <1> 	push ecx
  4376                              <1> .expmul:
  4377 000033BE 89C3                <1> 	mov ebx, eax
  4378 000033C0 01D8                <1> 	add eax, ebx
  4379 000033C2 C1E303              <1> 	shl ebx, 3
  4380 000033C5 01D8                <1> 	add eax, ebx
  4381 000033C7 E2F5                <1> 	loop .expmul
  4382 000033C9 01C2                <1> 	add edx, eax
  4383 000033CB 59                  <1> 	pop ecx
  4384 000033CC 4E                  <1> 	dec esi
  4385 000033CD 41                  <1> 	inc ecx
  4386 000033CE EBC1                <1> 	jmp .txtlp
  4387 000033D0 89D1                <1> .done: mov ecx, edx
  4388 000033D2 C3                  <1> 	ret
  4389                              <1> 
  4390                              <1> benchmarki: ;output number of clocks since initial value
  4391 000033D3 0F31                <1> 	rdtsc
  4392 000033D5 8B1D[1E960000]      <1> 	mov ebx, [initialtsc]
  4393 000033DB 8B0D[22960000]      <1> 	mov ecx, [initialtsc + 4]
  4394 000033E1 EB0E                <1> 	jmp benchmarkl.calc
  4395                              <1> 
  4396                              <1> benchmarkl: ;output number of clocks since last benchmark
  4397 000033E3 0F31                <1> 	rdtsc
  4398 000033E5 8B1D[26960000]      <1> 	mov ebx, [lasttsc]
  4399 000033EB 8B0D[2A960000]      <1> 	mov ecx, [lasttsc + 4]
  4400                              <1> .calc:
  4401 000033F1 29D8                <1> 	sub eax, ebx
  4402 000033F3 7701                <1> 	ja .noover
  4403 000033F5 4A                  <1> 	dec edx
  4404                              <1> .noover:
  4405 000033F6 29CA                <1> 	sub edx, ecx
  4406 000033F8 8B0C24              <1> 	mov ecx, [esp]
  4407 000033FB E8EDFDFFFF          <1> 	call showhex
  4408 00003400 89D1                <1> 	mov ecx, edx
  4409 00003402 E8E6FDFFFF          <1> 	call showhex
  4410 00003407 89C1                <1> 	mov ecx, eax
  4411 00003409 E8DFFDFFFF          <1> 	call showhex
  4412 0000340E E8C4E9FFFF          <1> 	call printline
  4413 00003413 0F31                <1> 	rdtsc
  4414 00003415 A3[26960000]        <1> 	mov [lasttsc], eax
  4415 0000341A 8915[2A960000]      <1> 	mov [lasttsc + 4], edx
  4416 00003420 C3                  <1> 	ret
  4417                                  %include "source/programs.asm"
  4418 00003421 FF2C                <1> filetypes db 255,44
  4419                              <1> progstart:		;programs start here
  4420                              <1> indexfiles:
  4421 00003423 BE[23340000]        <1> 	mov esi, progstart
  4422 00003428 BB[08BA0300]        <1> 	mov ebx, fileindex
  4423 0000342D BF[23340000]        <1> 	mov edi, progstart
  4424 00003432 83EF02              <1> 	sub edi, 2
  4425                              <1> indexloop:
  4426 00003435 668B0E              <1> 	mov cx, [esi]
  4427                              <1> 	indexloop2:
  4428 00003438 663B0F              <1> 		cmp cx, [edi]
  4429 0000343B 741E                <1> 		je indexloop2done
  4430 0000343D 83EF02              <1> 		sub edi, 2
  4431 00003440 81FF[21340000]      <1> 		cmp edi, filetypes
  4432 00003446 73F0                <1> 		jae indexloop2
  4433 00003448 BF[23340000]        <1> 	mov edi, progstart
  4434 0000344D 83EF02              <1> 	sub edi, 2
  4435 00003450 46                  <1> 	inc esi
  4436 00003451 81FE[7D560000]      <1> 	cmp esi, batchprogend
  4437 00003457 733C                <1> 	jae indexloopdone
  4438 00003459 EBDA                <1> 	jmp indexloop
  4439                              <1> indexloop2done:
  4440 0000345B 66890B              <1> 	mov [ebx], cx
  4441 0000345E 83C302              <1> 	add ebx, 2
  4442 00003461 83C602              <1> 	add esi, 2
  4443                              <1> 	nameindex:
  4444 00003464 8A0E                <1> 		mov cl, [esi]
  4445 00003466 80F900              <1> 		cmp cl, 0
  4446 00003469 7406                <1> 		je nameindexdone
  4447 0000346B 880B                <1> 		mov [ebx], cl
  4448 0000346D 46                  <1> 		inc esi
  4449 0000346E 43                  <1> 		inc ebx
  4450 0000346F EBF3                <1> 		jmp nameindex
  4451                              <1> 	nameindexdone:
  4452 00003471 43                  <1> 		inc ebx
  4453 00003472 66C7030000          <1> 		mov word [ebx], 0
  4454 00003477 83C302              <1> 		add ebx, 2
  4455 0000347A 46                  <1> 		inc esi
  4456 0000347B 8933                <1> 		mov [ebx], esi
  4457 0000347D 83C304              <1> 		add ebx, 4
  4458 00003480 66C7030000          <1> 		mov word [ebx], 0
  4459 00003485 83C302              <1> 		add ebx, 2
  4460 00003488 81FB[08BE0300]      <1> 		cmp ebx, fileindexend
  4461 0000348E 7305                <1> 		jae indexloopdone
  4462 00003490 83C601              <1> 		add esi, 1
  4463 00003493 EBA0                <1> 		jmp indexloop
  4464 00003495 C605[9D340000]01    <1> indexloopdone: 	mov byte [indexdone], 1
  4465 0000349C C3                  <1> 		ret
  4466 0000349D 00                  <1> indexdone db 0
  4467                              <1> %include 'source/programs/_comment.asm' ;#
  4468 0000349E FF2C2300            <2> 	db 255,44,"#",0	;this lets you rem stuff
  4469 000034A2 C3                  <2> 	ret 
  4470                              <1> %include 'source/programs/_math.asm' ;!
  4471 000034A3 FF2C2100            <2> db 255,44,"!",0
  4472                              <2> 	num:	
  4473 000034A7 E8F6FBFFFF          <2> 		call clearbuffer
  4474 000034AC C605[00370000]00    <2> 		mov byte [decimal], 0
  4475 000034B3 C605[01370000]00    <2> 		mov byte [decimal2], 0
  4476 000034BA 8B35[EB2F0000]      <2> 		mov esi, [currentcommandloc]
  4477 000034C0 31C0                <2> 		xor eax, eax
  4478 000034C2 31C9                <2> 		xor ecx, ecx
  4479 000034C4 31DB                <2> 		xor ebx, ebx
  4480 000034C6 8A06                <2> 	num2:	mov al, [esi]
  4481 000034C8 3C2B                <2> 		cmp al, '+'
  4482 000034CA 7416                <2> 		je operatorfound
  4483 000034CC 3C2D                <2> 		cmp al, '-'
  4484 000034CE 7412                <2> 		je operatorfound
  4485 000034D0 3C2A                <2> 		cmp al, '*'
  4486 000034D2 740E                <2> 		je operatorfound
  4487 000034D4 3C2F                <2> 		cmp al, '/'
  4488 000034D6 740A                <2> 		je operatorfound
  4489 000034D8 3C5E                <2> 		cmp al, '^'
  4490 000034DA 7406                <2> 		je operatorfound
  4491 000034DC 46                  <2> 		inc esi
  4492 000034DD 84C0                <2> 		test al, al
  4493 000034DF 75E5                <2> 		jnz num2
  4494 000034E1 C3                  <2> 		ret
  4495 000034E2 50                  <2> 	operatorfound: push eax
  4496 000034E3 30E4                <2> 		xor ah, ah
  4497 000034E5 8826                <2> 		mov [esi], ah
  4498 000034E7 89F7                <2> 		mov edi, esi
  4499 000034E9 46                  <2> 		inc esi
  4500 000034EA 8A06                <2> 		mov al, [esi]
  4501 000034EC 3C25                <2> 		cmp al, '%'
  4502 000034EE 0F845E000000        <2> 		je near resultnum1
  4503                              <2> 	varnum2: 
  4504 000034F4 57                  <2> 		push edi
  4505 000034F5 E8A0000000          <2> 		call checkdecimal
  4506 000034FA 5F                  <2> 		pop edi
  4507 000034FB E86BFEFFFF          <2> 		call cnvrttxt
  4508                              <2> 	vrnm2:
  4509 00003500 89CB                <2> 		mov ebx, ecx
  4510 00003502 53                  <2> 		push ebx
  4511 00003503 E89AFBFFFF          <2> 		call clearbuffer
  4512 00003508 8B35[EB2F0000]      <2> 		mov esi, [currentcommandloc]
  4513 0000350E 89F7                <2> 		mov edi, esi
  4514 00003510 46                  <2> 		inc esi
  4515 00003511 8A06                <2> 		mov al, [esi]
  4516 00003513 3C25                <2> 		cmp al, '%'
  4517 00003515 0F844B000000        <2> 		je near resultnum2
  4518                              <2> 	varnum4: 
  4519 0000351B 57                  <2> 		push edi
  4520 0000351C E865000000          <2> 		call checkdecimal2
  4521 00003521 5F                  <2> 		pop edi
  4522 00003522 E844FEFFFF          <2> 		call cnvrttxt
  4523                              <2> 	vrnm4:
  4524 00003527 5B                  <2> 		pop ebx
  4525 00003528 58                  <2> 		pop eax
  4526 00003529 3C2B                <2> 		cmp al, '+'
  4527 0000352B 0F8497000000        <2> 		je near plusnum
  4528 00003531 3C2D                <2> 		cmp al, '-'
  4529 00003533 0F8498000000        <2> 		je near subnum
  4530 00003539 3C2A                <2> 		cmp al, '*'
  4531 0000353B 0F8499000000        <2> 		je near mulnum
  4532 00003541 3C2F                <2> 		cmp al, '/'
  4533 00003543 0F84A4000000        <2> 		je near divnum
  4534 00003549 3C5E                <2> 		cmp al, '^'
  4535 0000354B 0F84BB000000        <2> 		je near expnum
  4536 00003551 C3                  <2> 		ret
  4537                              <2> 	resultnum1:
  4538 00003552 8A0D[02370000]      <2> 		mov cl, [decimalresult]
  4539 00003558 880D[00370000]      <2> 		mov [decimal], cl
  4540 0000355E 8B0D[03370000]      <2> 		mov ecx, [result]
  4541 00003564 EB9A                <2> 		jmp vrnm2
  4542                              <2> 	resultnum2:
  4543 00003566 8A0D[00370000]      <2> 		mov cl, [decimal]
  4544 0000356C 880D[01370000]      <2> 		mov [decimal2], cl
  4545 00003572 8A0D[02370000]      <2> 		mov cl, [decimalresult]
  4546 00003578 880D[00370000]      <2> 		mov [decimal], cl
  4547 0000357E 8B0D[03370000]      <2> 		mov ecx, [result]
  4548 00003584 EBA1                <2> 		jmp vrnm4
  4549                              <2> 	checkdecimal2:
  4550 00003586 8A25[00370000]      <2> 		mov ah, [decimal]
  4551 0000358C 8825[01370000]      <2> 		mov [decimal2], ah
  4552 00003592 30E4                <2> 		xor ah, ah
  4553 00003594 8825[00370000]      <2> 		mov [decimal], ah
  4554                              <2> 	checkdecimal:
  4555 0000359A 89F7                <2> 		mov edi, esi
  4556                              <2> 	chkdec1:
  4557 0000359C 8A07                <2> 		mov al, [edi]
  4558 0000359E 3C2E                <2> 		cmp al, '.'
  4559 000035A0 0F840B000000        <2> 		je near fnddec
  4560 000035A6 3C00                <2> 		cmp al, 0
  4561 000035A8 0F8419000000        <2> 		je near nodecimal
  4562 000035AE 47                  <2> 		inc edi
  4563 000035AF EBEB                <2> 		jmp chkdec1
  4564                              <2> 	fnddec:
  4565 000035B1 8A4701              <2> 		mov al, [edi + 1]
  4566 000035B4 8807                <2> 		mov [edi], al
  4567 000035B6 3C00                <2> 		cmp al, 0
  4568 000035B8 0F8409000000        <2> 		je near nodecimal
  4569 000035BE FE05[00370000]      <2> 		inc byte [decimal]
  4570 000035C4 47                  <2> 		inc edi
  4571 000035C5 EBEA                <2> 		jmp fnddec
  4572                              <2> 	nodecimal:
  4573 000035C7 C3                  <2> 		ret
  4574                              <2> 	plusnum:
  4575 000035C8 E8F4000000          <2> 		call decaddfix
  4576 000035CD 01D9                <2> 		add ecx, ebx
  4577 000035CF EB75                <2> 		jmp retnum
  4578                              <2> 	subnum:
  4579 000035D1 E8EB000000          <2> 		call decaddfix
  4580 000035D6 29D9                <2> 		sub ecx, ebx
  4581 000035D8 EB6C                <2> 		jmp retnum
  4582                              <2> 	mulnum:
  4583 000035DA A0[01370000]        <2> 		mov al, [decimal2]
  4584 000035DF 0005[00370000]      <2> 		add [decimal], al
  4585 000035E5 89C8                <2> 		mov eax, ecx
  4586 000035E7 F7E3                <2> 		mul ebx
  4587 000035E9 89C1                <2> 		mov ecx, eax
  4588 000035EB EB59                <2> 		jmp retnum
  4589                              <2> 	divnum:
  4590 000035ED E8CF000000          <2> 		call decaddfix
  4591 000035F2 30C0                <2> 		xor al, al
  4592 000035F4 A2[00370000]        <2> 		mov [decimal], al
  4593 000035F9 31D2                <2> 		xor edx, edx
  4594 000035FB 89C8                <2> 		mov eax, ecx
  4595 000035FD 83FB00              <2> 		cmp ebx, 0
  4596 00003600 0F8440000000        <2> 		je near retnum
  4597 00003606 F7F3                <2> 		div ebx
  4598 00003608 89C1                <2> 		mov ecx, eax
  4599 0000360A EB3A                <2> 		jmp retnum
  4600                              <2> 	expnum:
  4601 0000360C 8A15[00370000]      <2> 		mov dl, [decimal]
  4602 00003612 8815[01370000]      <2> 		mov [decimal2], dl
  4603 00003618 31D2                <2> 		xor edx, edx
  4604 0000361A 89C8                <2> 		mov eax, ecx
  4605 0000361C 89D9                <2> 		mov ecx, ebx
  4606 0000361E 89C3                <2> 		mov ebx, eax
  4607 00003620 83F900              <2> 		cmp ecx, 0
  4608 00003623 741C                <2> 		je noexpnum
  4609 00003625 49                  <2> 		dec ecx
  4610 00003626 83F900              <2> 		cmp ecx, 0
  4611 00003629 7412                <2> 		je noexpnumlp
  4612 0000362B F7E3                <2> 	expnumlp: mul ebx
  4613 0000362D 8A15[01370000]      <2> 		mov dl, [decimal2]
  4614 00003633 0015[00370000]      <2> 		add [decimal], dl
  4615 00003639 31D2                <2> 		xor edx, edx
  4616 0000363B E2EE                <2> 		loop expnumlp
  4617                              <2> 	noexpnumlp:
  4618 0000363D 89C1                <2> 		mov ecx, eax
  4619 0000363F EB05                <2> 		jmp retnum
  4620                              <2> 	noexpnum:
  4621 00003641 B901000000          <2> 		mov ecx, 1
  4622                              <2> 	retnum: 
  4623 00003646 BE[9CD80300]        <2> 		mov esi, numbuf
  4624 0000364B 890D[03370000]      <2> 		mov [result], ecx
  4625 00003651 E861FAFFFF          <2> 		call convert
  4626 00003656 BE[9CD80300]        <2> 		mov esi, numbuf
  4627 0000365B 8A25[00370000]      <2> 		mov ah, [decimal]
  4628 00003661 8825[02370000]      <2> 		mov [decimalresult], ah
  4629 00003667 80FC00              <2> 		cmp ah, 0
  4630 0000366A 0F8425000000        <2> 		je near noputdecimal
  4631                              <2> 	putdecimal:
  4632 00003670 4E                  <2> 		dec esi
  4633 00003671 FECC                <2> 		dec ah
  4634 00003673 80FC00              <2> 		cmp ah, 0
  4635 00003676 0F87F4FFFFFF        <2> 		ja near putdecimal
  4636 0000367C 4E                  <2> 		dec esi
  4637 0000367D 8A06                <2> 		mov al, [esi]
  4638 0000367F C6062E              <2> 		mov byte [esi], '.'
  4639                              <2> 	decputloop:
  4640 00003682 4E                  <2> 		dec esi
  4641 00003683 8A26                <2> 		mov ah, [esi]
  4642 00003685 8806                <2> 		mov [esi], al
  4643 00003687 88E0                <2> 		mov al, ah
  4644 00003689 81FE[88D80300]      <2> 		cmp esi, buf2
  4645 0000368F 0F87EDFFFFFF        <2> 		ja near decputloop
  4646                              <2> 	noputdecimal:
  4647 00003695 BE[88D80300]        <2> 		mov esi, buf2
  4648 0000369A E805000000          <2> 		call chkadd
  4649 0000369F C3                  <2> 		ret
  4650 000036A0 00000000            <2> edxnumbuf dw 0,0
  4651 000036A4 8A06                <2> 	chkadd: mov al, [esi]
  4652 000036A6 3C30                <2> 		cmp al, '0'
  4653 000036A8 750C                <2> 		jne dnadd
  4654 000036AA 46                  <2> 		inc esi
  4655 000036AB 81FE[9CD80300]      <2> 		cmp esi, numbuf
  4656 000036B1 7402                <2> 		je dnaddm1
  4657 000036B3 EBEF                <2> 		jmp chkadd
  4658 000036B5 4E                  <2> 	dnaddm1: dec esi
  4659 000036B6 E821E7FFFF          <2> 	dnadd:	call print
  4660 000036BB E817E7FFFF          <2> 		call printline
  4661 000036C0 C3                  <2> 		ret
  4662                              <2> 		
  4663                              <2> 	decaddfix:
  4664 000036C1 A0[01370000]        <2> 		mov al, [decimal2]
  4665 000036C6 8A25[00370000]      <2> 		mov ah, [decimal]
  4666 000036CC 38E0                <2> 		cmp al, ah
  4667 000036CE 742F                <2> 		je gooddecadd
  4668 000036D0 38E0                <2> 		cmp al, ah
  4669 000036D2 7217                <2> 		jb lowdecadd
  4670                              <2> 	highdecadd:
  4671 000036D4 FEC4                <2> 		inc ah
  4672 000036D6 89CA                <2> 		mov edx, ecx
  4673 000036D8 C1E103              <2> 		shl ecx, 3
  4674 000036DB 01D1                <2> 		add ecx, edx
  4675 000036DD 01D1                <2> 		add ecx, edx
  4676 000036DF 38E0                <2> 		cmp al, ah
  4677 000036E1 77F1                <2> 		ja highdecadd
  4678 000036E3 8825[00370000]      <2> 		mov [decimal], ah
  4679 000036E9 EB14                <2> 		jmp gooddecadd
  4680                              <2> 	lowdecadd:
  4681 000036EB FEC0                <2> 		inc al
  4682 000036ED 89DA                <2> 		mov edx, ebx
  4683 000036EF C1E303              <2> 		shl ebx, 3
  4684 000036F2 01D3                <2> 		add ebx, edx
  4685 000036F4 01D3                <2> 		add ebx, edx
  4686 000036F6 38E0                <2> 		cmp al, ah
  4687 000036F8 72F1                <2> 		jb lowdecadd
  4688 000036FA A2[00370000]        <2> 		mov [decimal], al
  4689                              <2> 	gooddecadd:
  4690 000036FF C3                  <2> 		ret
  4691                              <2> 		
  4692 00003700 00                  <2> decimal db 0
  4693 00003701 00                  <2> decimal2 db 0
  4694 00003702 00                  <2> decimalresult db 0
  4695 00003703 00000000            <2> result dd 0
  4696                              <1> %include 'source/programs/_variables.asm' ;% and $
  4697 00003707 FF2C2500            <2> db 255,44,"%",0
  4698                              <2> 	ans:
  4699 0000370B BE[88D80300]        <2> 		mov esi, buf2
  4700 00003710 E88FFFFFFF          <2> 		call chkadd
  4701 00003715 C3                  <2> 		ret
  4702                              <2> 		
  4703 00003716 FF2C2400            <2> db 255,44,"$",0
  4704 0000371A 8B35[EB2F0000]      <2> var: mov esi, [currentcommandloc]
  4705 00003720 BB[88C00300]        <2> 	mov ebx, variables
  4706 00003725 8A06                <2> lkeq:	mov al, [esi]
  4707 00003727 3C3D                <2> 	cmp al, '='
  4708 00003729 741B                <2> 	je eqfnd	;is there an '=' sign?
  4709 0000372B 3C00                <2> 	cmp al, 0
  4710 0000372D 7403                <2> 	je echovars
  4711 0000372F 46                  <2> 	inc esi
  4712 00003730 EBF3                <2> 	jmp lkeq
  4713 00003732 BE[88C00300]        <2> echovars: mov esi, variables
  4714 00003737 BB[88D00300]        <2> 	mov ebx, varend
  4715 0000373C B105                <2> 	mov cl, 5
  4716 0000373E B504                <2> 	mov ch, 4
  4717 00003740 E804F9FFFF          <2> 	call array
  4718 00003745 C3                  <2> 	ret
  4719 00003746 46                  <2> eqfnd:	inc esi
  4720 00003747 8A06                <2> 	mov al, [esi]
  4721 00003749 3C00                <2> 	cmp al, 0
  4722 0000374B 740D                <2> 	je readvar
  4723 0000374D 8B35[EB2F0000]      <2> 	mov esi, [currentcommandloc]
  4724 00003753 BB[88C00300]        <2> 	mov ebx, variables
  4725 00003758 EB19                <2> 	jmp seek
  4726                              <2> readvar:
  4727 0000375A B00A                <2> 	mov al, 10
  4728 0000375C 66BB0700            <2> 	mov bx, 7
  4729 00003760 C605[9F230000]00    <2> 	mov byte [commandedit], 0
  4730 00003767 BF[88D80300]        <2> 	mov edi, buftxtend
  4731 0000376C E895E7FFFF          <2> 	call rdprint
  4732 00003771 EBA7                <2> 	jmp var
  4733 00003773 668B03              <2> seek:	mov ax, [ebx]
  4734 00003776 B105                <2> 	mov cl, 5
  4735 00003778 B504                <2> 	mov ch, 4
  4736 0000377A 6683F800            <2> 	cmp ax, 0
  4737 0000377E 0F8458000000        <2> 	je near save
  4738 00003784 6639C8              <2> 	cmp ax, cx
  4739 00003787 7403                <2> 	je skfnd
  4740 00003789 43                  <2> 	inc ebx
  4741 0000378A EBE7                <2> 	jmp seek
  4742 0000378C 8B35[EB2F0000]      <2> skfnd:	mov esi, [currentcommandloc]
  4743 00003792 46                  <2> 	inc esi
  4744 00003793 83C302              <2> 	add ebx, 2
  4745 00003796 89DF                <2> 	mov edi, ebx
  4746 00003798 B13D                <2> 	mov cl, '='
  4747 0000379A E88BF8FFFF          <2> 	call cndtest
  4748 0000379F 3C01                <2> 	cmp al, 1	
  4749 000037A1 7418                <2> 	je varfnd
  4750 000037A3 89FB                <2> 	mov ebx, edi
  4751 000037A5 8B35[EB2F0000]      <2> 	mov esi, [currentcommandloc]
  4752 000037AB 668B03              <2> 	mov ax, [ebx]
  4753 000037AE 6683F800            <2> 	cmp ax, 0
  4754 000037B2 0F8424000000        <2> 	je near save
  4755 000037B8 43                  <2> 	inc ebx
  4756 000037B9 EBB8                <2> 	jmp seek
  4757 000037BB 8A03                <2> varfnd:	mov al, [ebx]
  4758 000037BD 3C04                <2> 	cmp al, 4
  4759 000037BF 7404                <2> 	je save2
  4760 000037C1 4B                  <2> 	dec ebx
  4761 000037C2 4E                  <2> 	dec esi
  4762 000037C3 EBF6                <2> 	jmp varfnd
  4763 000037C5 4B                  <2> save2:	dec ebx
  4764 000037C6 4E                  <2> 	dec esi
  4765 000037C7 8A03                <2> 	mov al, [ebx]
  4766 000037C9 3C05                <2> 	cmp al, 5
  4767 000037CB 7402                <2> 	je remove
  4768 000037CD EBEC                <2> 	jmp varfnd
  4769 000037CF 8A03                <2> remove: mov al, [ebx]
  4770 000037D1 3C00                <2> 	cmp al, 0
  4771 000037D3 749E                <2> 	je seek
  4772 000037D5 30C0                <2> 	xor al, al
  4773 000037D7 8803                <2> 	mov [ebx], al
  4774 000037D9 43                  <2> 	inc ebx
  4775 000037DA EBF3                <2> 	jmp remove	;do not need for now-need defragmentation
  4776 000037DC 8B35[EB2F0000]      <2> save:	mov esi, [currentcommandloc]
  4777 000037E2 43                  <2> 	inc ebx
  4778 000037E3 B005                <2> 	mov al, 5
  4779 000037E5 B404                <2> 	mov ah, 4
  4780 000037E7 668903              <2> 	mov [ebx], ax
  4781 000037EA 43                  <2> 	inc ebx
  4782 000037EB 43                  <2> svhere:	inc ebx
  4783 000037EC 46                  <2> 	inc esi
  4784 000037ED 8A06                <2> 	mov al, [esi]
  4785 000037EF 3C00                <2> 	cmp al, 0
  4786 000037F1 0F844A000000        <2> 	je near svdone
  4787 000037F7 3C25                <2> 	cmp al, '%'
  4788 000037F9 7404                <2> 	je ans2
  4789 000037FB 8803                <2> 	mov [ebx], al	
  4790 000037FD EBEC                <2> 	jmp svhere
  4791 000037FF 56                  <2> ans2:	push esi
  4792 00003800 BE[88D80300]        <2> 	mov esi, buf2
  4793 00003805 E823000000          <2> 	call ansfnd
  4794 0000380A E803000000          <2> 	call anscp
  4795 0000380F 5E                  <2> 	pop esi
  4796 00003810 EBD9                <2> 	jmp svhere
  4797 00003812 8A06                <2> anscp:	mov al, [esi]
  4798 00003814 8803                <2> 	mov [ebx], al
  4799 00003816 81FE[9CD80300]      <2> 	cmp esi, numbuf
  4800 0000381C 74CD                <2> 	je svhere
  4801 0000381E 3C00                <2> 	cmp al, 0
  4802 00003820 74C9                <2> 	je svhere
  4803 00003822 43                  <2> 	inc ebx
  4804 00003823 46                  <2> 	inc esi
  4805 00003824 EBEC                <2> 	jmp anscp
  4806 00003826 5E                  <2> ansnf:	pop esi
  4807 00003827 8A06                <2> 	mov al, [esi]
  4808 00003829 8803                <2> 	mov [ebx], al
  4809 0000382B EBBE                <2> 	jmp svhere
  4810 0000382D 46                  <2> ansfnd:	inc esi
  4811 0000382E 81FE[9BD80300]      <2> 	cmp esi, numbuf - 1
  4812 00003834 740A                <2> 	je fndans
  4813 00003836 8A06                <2> 	mov al, [esi]
  4814 00003838 3C00                <2> 	cmp al, 0
  4815 0000383A 74EA                <2> 	je ansnf
  4816 0000383C 3C30                <2> 	cmp al, '0'
  4817 0000383E 74ED                <2> 	je ansfnd
  4818                              <2> fndans:
  4819 00003840 C3                  <2> 	ret
  4820 00003841 30C0                <2> svdone:	xor al, al
  4821 00003843 8803                <2> 	mov [ebx], al
  4822 00003845 C3                  <2> 	ret
  4823                              <1> %include 'source/programs/_run.asm' ;./
  4824 00003846 7F454C46            <2> 	elfstart db 0x7F,"ELF"
  4825 0000384A FF2C2E2F00          <2> 	db 255,44,"./",0
  4826                              <2> rundiskprog:
  4827 0000384F 8B3D[EB2F0000]      <2> 	mov edi, [currentcommandloc]
  4828 00003855 83C702              <2> 	add edi, 2
  4829 00003858 BE00004000          <2> 	mov esi, 0x400000
  4830 0000385D E875320000          <2> 	call loadfile
  4831 00003862 81FA94010000        <2> 	cmp edx, 404
  4832 00003868 7461                <2> 	je noprogfound
  4833 0000386A BB00004000          <2> 	mov ebx, 0x400000
  4834 0000386F A1[46380000]        <2> 	mov eax, [elfstart]
  4835 00003874 3903                <2> 	cmp [ebx], eax
  4836 00003876 0F8431000000        <2> 	je near runelf
  4837 0000387C 66813B4558          <2> 	cmp word [ebx], "EX"
  4838 00003881 756B                <2> 	jne progbatchfound
  4839 00003883 83C302              <2> 	add ebx, 2
  4840 00003886 8B3D[EB2F0000]      <2> 	mov edi, [currentcommandloc]
  4841 0000388C 83C702              <2> 	add edi, 2
  4842                              <2> findspaceprog:
  4843 0000388F 8A07                <2> 	mov al, [edi]
  4844 00003891 47                  <2> 	inc edi
  4845 00003892 3C20                <2> 	cmp al, " "
  4846 00003894 75F9                <2> 	jne findspaceprog
  4847                              <2> findnonspaceprog:
  4848 00003896 8A07                <2> 	mov al, [edi]
  4849 00003898 47                  <2> 	inc edi
  4850 00003899 3C20                <2> 	cmp al, " "
  4851 0000389B 74F9                <2> 	je findnonspaceprog
  4852 0000389D 4F                  <2> 	dec edi
  4853 0000389E 8925[08BE0300]      <2> 	mov [previousstack], esp
  4854 000038A4 FFD3                <2> 	call ebx
  4855 000038A6 8B25[08BE0300]      <2> 	mov esp, [previousstack]
  4856 000038AC C3                  <2> 	ret
  4857                              <2> runelf:
  4858 000038AD 8B3D[EB2F0000]      <2> 	mov edi, [currentcommandloc]
  4859 000038B3 83C702              <2> 	add edi, 2
  4860 000038B6 81C380000000        <2> 	add ebx, 0x80
  4861 000038BC 8925[08BE0300]      <2> 	mov [previousstack], esp
  4862 000038C2 FFD3                <2> 	call ebx
  4863 000038C4 8B25[08BE0300]      <2> 	mov esp, [previousstack]
  4864 000038CA C3                  <2> 	ret
  4865                              <2> noprogfound:
  4866 000038CB BE[BA950000]        <2> 	mov esi, notfound1
  4867 000038D0 E807E5FFFF          <2> 	call print
  4868 000038D5 8B35[EB2F0000]      <2> 	mov esi, [currentcommandloc]
  4869 000038DB 83C602              <2> 	add esi, 2
  4870 000038DE E8F9E4FFFF          <2> 	call print
  4871 000038E3 BE[C2950000]        <2> 	mov esi, notfound2
  4872 000038E8 E8EFE4FFFF          <2> 	call print
  4873 000038ED C3                  <2> 	ret
  4874                              <2> progbatchfound:
  4875 000038EE BF00004000          <2> 		mov edi, 0x400000
  4876 000038F3 C605[82C00300]01    <2> 		mov byte [BATCHISON], 1
  4877                              <2> 	batchrunloop:
  4878 000038FA E82BF4FFFF          <2> 		call buftxtclear
  4879 000038FF BE[88D40300]        <2> 		mov esi, buftxt
  4880 00003904 8935[EB2F0000]      <2> 		mov [currentcommandloc], esi
  4881                              <2> 	batchrunloop2:
  4882 0000390A B10A                <2> 		mov cl, 10
  4883 0000390C B50D                <2> 		mov ch, 13
  4884 0000390E 380F                <2> 		cmp [edi], cl
  4885 00003910 0F8419000000        <2> 		je near nxtbatchrunline
  4886 00003916 382F                <2> 		cmp [edi], ch
  4887 00003918 0F8411000000        <2> 		je near nxtbatchrunline
  4888 0000391E 803F00              <2> 		cmp byte [edi], 0
  4889 00003921 0F8408000000        <2> 		je near nxtbatchrunline
  4890 00003927 8A07                <2> 		mov al, [edi]
  4891 00003929 8806                <2> 		mov [esi], al
  4892 0000392B 46                  <2> 		inc esi
  4893 0000392C 47                  <2> 		inc edi
  4894 0000392D EBDB                <2> 		jmp batchrunloop2
  4895                              <2> 	nxtbatchrunline:
  4896 0000392F 47                  <2> 		inc edi
  4897 00003930 380F                <2> 		cmp [edi], cl
  4898 00003932 74FB                <2> 		je nxtbatchrunline
  4899 00003934 382F                <2> 		cmp [edi], ch
  4900 00003936 74F7                <2> 		je nxtbatchrunline
  4901 00003938 893D[96390000]      <2> 		mov [batchedi], edi
  4902 0000393E 893D[7EC00300]      <2> 		mov [BATCHPOS], edi
  4903 00003944 C60600              <2> 		mov byte [esi], 0
  4904 00003947 BE[88D40300]        <2> 		mov esi, buftxt
  4905 0000394C 803E00              <2> 		cmp byte [esi], 0
  4906 0000394F 0F8439000000        <2> 		je near nobatchfoundrun
  4907 00003955 31DB                <2> 		xor ebx, ebx
  4908 00003957 8A1D[19C00300]      <2> 		mov bl, [IFON]
  4909 0000395D 80FB00              <2> 		cmp bl, 0
  4910 00003960 0F8534000000        <2> 		jne near iftestbatch
  4911                              <2> 	doneiftest:
  4912 00003966 803D[603A0000]00    <2> 		cmp byte [runnextline], 0
  4913 0000396D 0F8405000000        <2> 		je near noruniftest
  4914 00003973 E8A3F5FFFF          <2> 		call run
  4915                              <2> 	noruniftest:
  4916 00003978 C605[603A0000]01    <2> 		mov byte [runnextline], 1
  4917 0000397F 8B3D[96390000]      <2> 		mov edi, [batchedi]
  4918 00003985 803F00              <2> 		cmp byte [edi], 0
  4919 00003988 0F856CFFFFFF        <2> 		jne near batchrunloop
  4920                              <2> 	nobatchfoundrun:
  4921 0000398E C605[82C00300]00    <2> 		mov byte [BATCHISON], 0
  4922 00003995 C3                  <2> 		ret
  4923                              <2> 	
  4924 00003996 00000000            <2> batchedi dd 0	
  4925                              <2> 	
  4926                              <2> 	iftestbatch:
  4927 0000399A BE[1AC00300]        <2> 		mov esi, IFTRUE
  4928 0000399F 01DE                <2> 		add esi, ebx
  4929 000039A1 803E00              <2> 		cmp byte [esi], 0
  4930 000039A4 0F85BCFFFFFF        <2> 		jne near doneiftest
  4931 000039AA 881D[613A0000]      <2> 		mov [iffalsebuf], bl
  4932 000039B0 803D[83C00300]01    <2> 		cmp byte [LOOPON], 1
  4933 000039B7 0F8510000000        <2> 		jne near fifindbatch
  4934 000039BD E938FFFFFF          <2> 		jmp batchrunloop
  4935                              <2> 	elsetestbatch:
  4936 000039C2 C60601              <2> 		mov byte [esi], 1
  4937 000039C5 83C705              <2> 		add edi, 5
  4938 000039C8 E92DFFFFFF          <2> 		jmp batchrunloop
  4939                              <2> 	fifindbatch:
  4940 000039CD 66B96966            <2> 		mov cx, "if"
  4941 000039D1 66B86669            <2> 		mov ax, "fi"
  4942 000039D5 663907              <2> 		cmp [edi], ax
  4943 000039D8 0F8424000000        <2> 		je near fifoundbatch
  4944 000039DE 66390F              <2> 		cmp [edi], cx
  4945 000039E1 0F845F000000        <2> 		je near iffoundbatch
  4946 000039E7 803F00              <2> 		cmp byte [edi], 0
  4947 000039EA 0F8412000000        <2> 		je near fifoundbatch
  4948 000039F0 B8656C7365          <2> 		mov eax, "else"
  4949 000039F5 3907                <2> 		cmp [edi], eax
  4950 000039F7 0F84C5FFFFFF        <2> 		je near elsetestbatch
  4951 000039FD E976FFFFFF          <2> 		jmp noruniftest
  4952                              <2> 	fifoundbatch:
  4953 00003A02 83C702              <2> 		add edi, 2
  4954 00003A05 B00A                <2> 		mov al, 10
  4955 00003A07 3807                <2> 		cmp [edi], al
  4956 00003A09 0F840B000000        <2> 		je near goodfibatch
  4957 00003A0F 803F00              <2> 		cmp byte [edi], 0
  4958 00003A12 0F8476FFFFFF        <2> 		je near nobatchfoundrun
  4959 00003A18 EBB3                <2> 		jmp fifindbatch
  4960                              <2> 	goodfibatch:
  4961 00003A1A B001                <2> 		mov al, 1
  4962 00003A1C 2805[19C00300]      <2> 		sub [IFON], al 
  4963 00003A22 A0[19C00300]        <2> 		mov al, [IFON]
  4964 00003A27 8A1D[613A0000]      <2> 		mov bl, [iffalsebuf]
  4965 00003A2D 38D8                <2> 		cmp al, bl
  4966 00003A2F 779C                <2> 		ja fifindbatch
  4967 00003A31 8B35[EB2F0000]      <2> 		mov esi, [currentcommandloc]
  4968 00003A37 83EF02              <2> 		sub edi, 2
  4969 00003A3A C605[603A0000]00    <2> 		mov byte [runnextline], 0
  4970 00003A41 E9B4FEFFFF          <2> 		jmp batchrunloop
  4971                              <2> 	iffoundbatch:
  4972 00003A46 B020                <2> 		mov al, ' '
  4973 00003A48 83C702              <2> 		add edi, 2
  4974 00003A4B 3807                <2> 		cmp [edi], al
  4975 00003A4D 0F857AFFFFFF        <2> 		jne near fifindbatch
  4976 00003A53 B001                <2> 		mov al, 1
  4977 00003A55 0005[19C00300]      <2> 		add [IFON], al
  4978 00003A5B E96DFFFFFF          <2> 		jmp fifindbatch
  4979                              <2> 		
  4980                              <2> 		
  4981 00003A60 01                  <2> runnextline db 1
  4982 00003A61 00                  <2> iffalsebuf db 0
  4983 00003A62 C3                  <2> notbatch: ret 
  4984                              <1> %ifdef network.included
  4985                              <1> 	%include 'source/programs/arp.asm'
  4986 00003A63 FF2C61727000        <2> db 255,44,"arp",0
  4987                              <2> 	;ARP TESTING
  4988                              <2> arptest:
  4989 00003A69 8B35[EB2F0000]      <2> 	mov esi, [currentcommandloc]
  4990 00003A6F 83C604              <2> 	add esi, 4
  4991 00003A72 E8605A0000          <2> 	call strtoip
  4992 00003A77 890D[2A3B0000]      <2> 	mov [arptargetinfo.ip], ecx ;move to next ip
  4993 00003A7D E8985A0000          <2> 	call showip
  4994 00003A82 803D[2E3B0000]01    <2> 	cmp byte [arpconfig], 1
  4995 00003A89 7405                <2> 	je arptest2
  4996 00003A8B E84D000000          <2> 	call arpinit
  4997                              <2> arptest2:	;try to reach 192.168.0.1
  4998 00003A90 8B0D[AC950000]      <2> 	mov ecx, [sysmac]
  4999 00003A96 668B1D[B0950000]    <2> 	mov bx, [sysmac + 4]
  5000 00003A9D 890D[0A3B0000]      <2> 	mov [sourcemac], ecx
  5001 00003AA3 66891D[0E3B0000]    <2> 	mov [sourcemac + 4],bx
  5002 00003AAA 890D[1A3B0000]      <2> 	mov [arpsenderinfo], ecx
  5003 00003AB0 66891D[1E3B0000]    <2> 	mov [arpsenderinfo + 4], bx
  5004 00003AB7 8B0D[A8950000]      <2> 	mov ecx, [sysip]
  5005 00003ABD 890D[203B0000]      <2> 	mov [arpsenderinfo.ip], ecx
  5006 00003AC3 BF[043B0000]        <2> 	mov edi, frame
  5007 00003AC8 BE[2E3B0000]        <2> 	mov esi, framend
  5008 00003ACD E8BF590000          <2> 	call sendpacket
  5009 00003AD2 BE[F3950000]        <2> 	mov esi, line
  5010 00003AD7 E800E3FFFF          <2> 	call print
  5011 00003ADC C3                  <2> 	ret
  5012                              <2> 	
  5013                              <2> arpinit:
  5014 00003ADD BE[2F3B0000]        <2> 	mov esi, arptable
  5015 00003AE2 BF[AC950000]        <2> 	mov edi, sysmac
  5016 00003AE7 BB[A8950000]        <2> 	mov ebx, sysip
  5017 00003AEC 8B0F                <2> 	mov ecx, [edi]
  5018 00003AEE 890E                <2> 	mov [esi], ecx
  5019 00003AF0 668B4F04            <2> 	mov cx, [edi + 4]
  5020 00003AF4 894E04              <2> 	mov [esi + 4], ecx
  5021 00003AF7 8B0B                <2> 	mov ecx, [ebx]
  5022 00003AF9 894E06              <2> 	mov [esi + 6], ecx
  5023 00003AFC C605[2E3B0000]01    <2> 	mov byte [arpconfig], 1
  5024 00003B03 C3                  <2> 	ret
  5025                              <2> 	
  5026                              <2> ;example frame
  5027                              <2> frame:
  5028 00003B04 FFFFFFFFFFFF        <2> destinationmac:	db 0xFF,0xFF,0xFF,0xFF,0xFF,0xFF
  5029 00003B0A 000000000000        <2> sourcemac:		db 0,0,0,0,0,0
  5030 00003B10 0806                <2> ethertype:		db 8,6			;arp is 0x806
  5031                              <2> 	;example packet
  5032 00003B12 0100                <2> 	arppacket: 		dw 1			;ethernet is 1
  5033 00003B14 0800                <2> 	arpprotocol: 	db 8,0			;ip is 0x800
  5034 00003B16 0604                <2> 					db 6,4			;length of mac, length of ip
  5035 00003B18 0001                <2> 	arpoperation: 	db 0,1			;one for arp request
  5036 00003B1A 000000000000        <2> 	arpsenderinfo:	db 0x00,0x00,0x00,0x00,0x00,0x00	;mac
  5037 00003B20 C0A80073            <2> 				.ip:	db 192,168,0,115		;ip
  5038 00003B24 000000000000        <2> 	arptargetinfo:	db 0x00,0x00,0x00,0x00,0x00,0x00	;ignored in requests
  5039 00003B2A C0A80000            <2> 				.ip:	db 192,168,0,0			;ip
  5040                              <2> framend:
  5041                              <2> 
  5042 00003B2E 00                  <2> arpconfig db 0
  5043                              <2> arptable:	;mac,ip
  5044 00003B2F 000000000000000000- <2> 	times 10 db 0,0,0,0,0,0,0,0,0,0
  5045 00003B38 00<rept>            <2>
  5046                              <2> arptableend:	
  5047                              <1> %endif
  5048                              <1> %include 'source/programs/batch.asm'
  5049 00003B93 FF2C626174636800    <2> db 255,44,"batch",0
  5050                              <2> 	batchst: 
  5051 00003B9B 8B3D[EB2F0000]      <2> 		mov edi, [currentcommandloc]
  5052 00003BA1 83C706              <2> 		add edi, 6
  5053 00003BA4 803F00              <2> 		cmp byte [edi], 0
  5054 00003BA7 0F846D000000        <2> 		je near nonamefound
  5055 00003BAD BE00004000          <2> 		mov esi, 0x400000
  5056 00003BB2 E8202F0000          <2> 		call loadfile
  5057 00003BB7 89D0                <2> 		mov eax, edx
  5058 00003BB9 3D94010000          <2> 		cmp eax, 404
  5059 00003BBE 7465                <2> 		je goodbatchname
  5060 00003BC0 BE[CB3B0000]        <2> 		mov esi, badbatchname
  5061 00003BC5 E812E2FFFF          <2> 		call print
  5062 00003BCA C3                  <2> 		ret
  5063 00003BCB 546869732066696C65- <2> 		badbatchname db "This file already exists!",10,0
  5064 00003BD4 20616C726561647920- <2>
  5065 00003BDD 657869737473210A00  <2>
  5066 00003BE6 596F75206861766520- <2> 		namenotfoundbatch db "You have to type a name after the command.",10,0
  5067 00003BEF 746F20747970652061- <2>
  5068 00003BF8 206E616D6520616674- <2>
  5069 00003C01 65722074686520636F- <2>
  5070 00003C0A 6D6D616E642E0A00    <2>
  5071 00003C12 00000000            <2> 		esicache3 dd 0
  5072 00003C16 00000000            <2> 		esicache2 dd 0
  5073                              <2> 	nonamefound:
  5074 00003C1A BE[E63B0000]        <2> 		mov esi, namenotfoundbatch
  5075 00003C1F E8B8E1FFFF          <2> 		call print
  5076 00003C24 C3                  <2> 		ret
  5077                              <2> 	goodbatchname:
  5078 00003C25 BE00004000          <2> 		mov esi, 0x400000
  5079                              <2> 	batchcreate:
  5080 00003C2A 8935[123C0000]      <2> 		mov [esicache3], esi
  5081 00003C30 BF00008000          <2> 		mov edi, 0x800000
  5082 00003C35 B00A                <2> 		mov al, 10
  5083 00003C37 B307                <2> 		mov bl, 7
  5084 00003C39 B404                <2> 		mov ah, 4
  5085 00003C3B CD30                <2> 		int 30h
  5086 00003C3D 8935[163C0000]      <2> 		mov [esicache2], esi
  5087 00003C43 8A0E                <2> 		mov cl, [esi]
  5088 00003C45 8B35[123C0000]      <2> 		mov esi, [esicache3]
  5089 00003C4B BB[7F3C0000]        <2> 		mov ebx, exitword
  5090 00003C50 E8D5F3FFFF          <2> 		call cndtest
  5091 00003C55 3C01                <2> 		cmp al, 1
  5092 00003C57 7411                <2> 		je endbatchcreate
  5093 00003C59 3C02                <2> 		cmp al, 2
  5094 00003C5B 740D                <2> 		je endbatchcreate
  5095 00003C5D 8B35[163C0000]      <2> 		mov esi, [esicache2]
  5096 00003C63 B00A                <2> 		mov al, 10
  5097 00003C65 8806                <2> 		mov [esi], al
  5098 00003C67 46                  <2> 		inc esi
  5099 00003C68 EBC0                <2> 		jmp batchcreate
  5100                              <2> 	endbatchcreate:
  5101 00003C6A 8B35[123C0000]      <2> 		mov esi, [esicache3]
  5102 00003C70 31C0                <2> 		xor eax, eax
  5103 00003C72 8806                <2> 		mov [esi], al
  5104 00003C74 BE00004000          <2> 		mov esi, 0x400000
  5105 00003C79 E85EE1FFFF          <2> 		call print
  5106 00003C7E C3                  <2> 		ret
  5107                              <2> 	
  5108 00003C7F 5C7800              <2> 	exitword db "\x",0
  5109 00003C82 54797065205C782074- <2> 	wordmsg db "Type \x to exit.",10,0
  5110 00003C8B 6F20657869742E0A00  <2>
  5111                              <1> %ifdef gui.background
  5112                              <1> 	%include 'source/programs/background.asm'
  5113 00003C94 FF2C6261636B67726F- <2> db 255,44,"background",0
  5114 00003C9D 756E6400            <2>
  5115 00003CA1 8B3D[EB2F0000]      <2> 		mov edi, [currentcommandloc]
  5116 00003CA7 83C70B              <2> 		add edi, 11
  5117 00003CAA BE00008000          <2> 		mov esi, 0x800000
  5118 00003CAF E8232E0000          <2> 		call loadfile
  5119 00003CB4 81FA94010000        <2> 		cmp edx, 404
  5120 00003CBA 0F8465150000        <2> 		je near filenotfound
  5121 00003CC0 BE00008000          <2> 		mov esi, 0x800000
  5122 00003CC5 66813E424D          <2> 		cmp word [esi], "BM"
  5123 00003CCA 7401                <2> 		je .bmpfound
  5124 00003CCC C3                  <2> 		ret
  5125                              <2> .bmpfound:
  5126 00003CCD 8B3D[815A0000]      <2> 		mov edi, [physbaseptr]
  5127 00003CD3 57                  <2> 		push edi
  5128 00003CD4 BE[9CDA0300]        <2> 		mov esi, backgroundbuffer
  5129 00003CD9 8935[27730000]      <2> 		mov [backgroundimage], esi
  5130 00003CDF 8935[815A0000]      <2> 		mov [physbaseptr], esi
  5131 00003CE5 31C0                <2> 		xor eax, eax
  5132                              <2> .clearlp:
  5133 00003CE7 8906                <2> 		mov [esi], eax
  5134 00003CE9 83C604              <2> 		add esi, 4
  5135 00003CEC 81FE[9CEE2B00]      <2> 		cmp esi, backgroundbufferend
  5136 00003CF2 72F3                <2> 		jb .clearlp
  5137 00003CF4 BE00008000          <2> 		mov esi, 0x800000
  5138 00003CF9 31C9                <2> 		xor ecx, ecx
  5139 00003CFB 31D2                <2> 		xor edx, edx
  5140 00003CFD 31DB                <2> 		xor ebx, ebx
  5141 00003CFF E8A12F0000          <2> 		call showbmp
  5142 00003D04 5F                  <2> 		pop edi
  5143 00003D05 893D[815A0000]      <2> 		mov [physbaseptr], edi
  5144 00003D0B 803D[18960000]00    <2> 		cmp byte [guion], 0
  5145 00003D12 740F                <2> 		je .noclear
  5146 00003D14 E8B9350000          <2> 		call guiclear
  5147 00003D19 E894320000          <2> 		call clearmousecursor
  5148 00003D1E E830360000          <2> 		call reloadallgraphics
  5149                              <2> .noclear:
  5150 00003D23 C3                  <2> 		ret
  5151                              <1> %endif
  5152                              <1> %include 'source/programs/beep.asm'
  5153 00003D24 FF2C6265657000      <2> 	db 255,44,"beep",0
  5154                              <2> beep:
  5155 00003D2B B8[503D0000]        <2> 	mov eax, beepstart
  5156 00003D30 A3[5D020000]        <2> 	mov [soundpos], eax
  5157 00003D35 B8[543D0000]        <2> 	mov eax, beepend
  5158 00003D3A A3[61020000]        <2> 	mov [soundendpos], eax
  5159 00003D3F C605[5A020000]01    <2> 	mov byte [soundon], 1
  5160                              <2> waitforsoundendbeep:
  5161 00003D46 A0[5A020000]        <2> 	mov al, [soundon]
  5162 00003D4B 3C00                <2> 	cmp al, 0
  5163 00003D4D 75F7                <2> 	jne waitforsoundendbeep
  5164 00003D4F C3                  <2> 	ret
  5165                              <2> 	
  5166                              <2> beepstart:
  5167 00003D50 3200D111            <2> 	dw 50, 4561
  5168                              <2> beepend:
  5169                              <1> %ifdef dos.compatible
  5170                              <1> %else
  5171                              <1> 	%include 'source/programs/boot.asm'
  5172 00003D54 FF2C626F6F7400      <2> db 255,44,"boot",0
  5173                              <2> quickboot:
  5174                              <2> 	;load and jump to the bootloader
  5175                              <2> 	; mov ecx, 1
  5176                              <2> 	; xor ebx, ebx
  5177                              <2> 	; mov esi, 0x400000
  5178                              <2> 	; call diskr
  5179                              <2> 	; mov ax, LINEAR_SEL
  5180                              <2> 	; mov fs, ax
  5181                              <2> 	; mov esi, 0x400000
  5182                              <2> 	; mov edi, 0x7C00
  5183                              <2> 	; xor ebx, ebx
  5184                              <2> ; .lp:
  5185                              <2> 	; mov ecx, [esi+ebx]
  5186                              <2> 	; mov [fs:edi+ebx], ecx
  5187                              <2> 	; add ebx, 4
  5188                              <2> 	; cmp ebx, 512
  5189                              <2> 	; jb .lp
  5190 00003D5B 66BB[6B3D]          <2> 	mov bx, bootload
  5191 00003D5F 66891D[960D0000]    <2> 	mov [realmodeptr], bx
  5192 00003D66 E91FCFFFFF          <2> 	jmp realmode
  5193                              <2> [BITS 16]
  5194                              <2> bootload:
  5195 00003D6B B80300              <2> 	mov ax, 3
  5196 00003D6E 31DB                <2> 	xor bx, bx
  5197 00003D70 CD10                <2> 	int 10h
  5198 00003D72 EA007C0000          <2> 	jmp 0:0x7C00
  5199                              <2> [BITS 32]
  5200                              <1> %endif
  5201                              <1> %include 'source/programs/cd.asm'
  5202 00003D77 FF2C636400          <2> db 255,44,"cd",0
  5203                              <2> cd:
  5204 00003D7C 8B35[EB2F0000]      <2> 	mov esi, [currentcommandloc]
  5205 00003D82 83C603              <2> 	add esi, 3
  5206 00003D85 8B3D[10BE0300]      <2> 	mov edi, [currentfolderloc]
  5207 00003D8B 893D[0CBE0300]      <2> 	mov [lastfolderloc], edi
  5208 00003D91 81C7[14BE0300]      <2> 	add edi, currentfolder
  5209 00003D97 4F                  <2> 	dec edi
  5210 00003D98 803E2F              <2> 	cmp byte [esi], '/'
  5211 00003D9B 751C                <2> 	jne .noroot
  5212 00003D9D 31FF                <2> 	xor edi, edi
  5213 00003D9F 893D[10BE0300]      <2> 	mov [currentfolderloc], edi
  5214 00003DA5 893D[0CBE0300]      <2> 	mov [lastfolderloc], edi
  5215 00003DAB 81C7[14BE0300]      <2> 	add edi, currentfolder
  5216 00003DB1 4F                  <2> 	dec edi
  5217 00003DB2 46                  <2> 	inc esi
  5218 00003DB3 803E00              <2> 	cmp byte [esi], 0
  5219 00003DB6 7401                <2> 	je .noroot
  5220 00003DB8 4E                  <2> 	dec esi
  5221                              <2> .noroot:
  5222 00003DB9 66813E2E2E          <2> 	cmp word [esi], ".."
  5223 00003DBE 742A                <2> 	je .moveup
  5224 00003DC0 47                  <2> 	inc edi
  5225                              <2> .movedown:
  5226 00003DC1 8A06                <2> 	mov al, [esi]
  5227 00003DC3 8807                <2> 	mov [edi], al
  5228 00003DC5 47                  <2> 	inc edi
  5229 00003DC6 46                  <2> 	inc esi
  5230 00003DC7 3C00                <2> 	cmp al, 0
  5231 00003DC9 740A                <2> 	je .donecd
  5232 00003DCB 81FF[14C00300]      <2> 	cmp edi, currentfolderend
  5233 00003DD1 72EE                <2> 	jb .movedown
  5234 00003DD3 30C0                <2> 	xor al, al
  5235                              <2> .donecd:
  5236 00003DD5 4F                  <2> 	dec edi
  5237 00003DD6 C6072F              <2> 	mov byte [edi], '/'
  5238 00003DD9 47                  <2> 	inc edi
  5239 00003DDA C60700              <2> 	mov byte [edi], 0
  5240 00003DDD 81EF[14BE0300]      <2> 	sub edi, currentfolder
  5241 00003DE3 893D[10BE0300]      <2> 	mov [currentfolderloc], edi
  5242 00003DE9 C3                  <2> 	ret
  5243                              <2> .moveup:
  5244 00003DEA 31C0                <2> 	xor eax, eax
  5245 00003DEC A3[0CBE0300]        <2> 	mov [lastfolderloc], eax
  5246                              <2> .moveuploop:
  5247 00003DF1 4F                  <2> 	dec edi
  5248 00003DF2 8A07                <2> 	mov al, [edi]
  5249 00003DF4 81FF[14BE0300]      <2> 	cmp edi, currentfolder
  5250 00003DFA 763B                <2> 	jbe .moveupover
  5251 00003DFC 3C2F                <2> 	cmp al, '/'
  5252 00003DFE 75F1                <2> 	jne .moveuploop
  5253 00003E00 C6072F              <2> 	mov byte [edi], '/'
  5254 00003E03 47                  <2> 	inc edi
  5255 00003E04 C60700              <2> 	mov byte [edi], 0
  5256 00003E07 81EF[14BE0300]      <2> 	sub edi, currentfolder
  5257 00003E0D 893D[10BE0300]      <2> 	mov [currentfolderloc], edi
  5258 00003E13 81C7[14BE0300]      <2> 	add edi, currentfolder
  5259 00003E19 4F                  <2> 	dec edi
  5260                              <2> .lastfolder:
  5261 00003E1A 4F                  <2> 	dec edi
  5262 00003E1B 8A07                <2> 	mov al, [edi]
  5263 00003E1D 81FF[14BE0300]      <2> 	cmp edi, currentfolder
  5264 00003E23 7604                <2> 	jbe .donemoveup
  5265 00003E25 3C2F                <2> 	cmp al, '/'
  5266 00003E27 75F1                <2> 	jne .lastfolder
  5267                              <2> .donemoveup:
  5268 00003E29 47                  <2> 	inc edi
  5269 00003E2A 81EF[14BE0300]      <2> 	sub edi, currentfolder
  5270 00003E30 893D[0CBE0300]      <2> 	mov [lastfolderloc], edi
  5271 00003E36 C3                  <2> 	ret
  5272                              <2> .moveupover:
  5273 00003E37 BF[14BE0300]        <2> 	mov edi, currentfolder
  5274 00003E3C C6072F              <2> 	mov byte [edi], '/'
  5275 00003E3F 47                  <2> 	inc edi
  5276 00003E40 C60700              <2> 	mov byte [edi], 0
  5277 00003E43 31C0                <2> 	xor eax, eax
  5278 00003E45 A3[0CBE0300]        <2> 	mov [lastfolderloc], eax
  5279 00003E4A 40                  <2> 	inc eax
  5280 00003E4B A3[10BE0300]        <2> 	mov [currentfolderloc], eax
  5281 00003E50 C3                  <2> 	ret
  5282                              <1> %include 'source/programs/charmap.asm'
  5283 00003E51 00                  <2> charmapnum db 0
  5284 00003E52 FF2C636861726D6170- <2> db 255,44,"charmap",0
  5285 00003E5B 00                  <2>
  5286 00003E5C 8B35[EB2F0000]      <2> 	mov esi, [currentcommandloc]
  5287 00003E62 83C608              <2> 	add esi, 8
  5288 00003E65 803E00              <2> 	cmp byte [esi], 0
  5289 00003E68 7412                <2> 	je .nospecific
  5290 00003E6A E8BCF4FFFF          <2> 	call cnvrthextxt
  5291 00003E6F 6689C8              <2> 	mov ax, cx
  5292 00003E72 66BB0700            <2> 	mov bx, 7
  5293 00003E76 E8D0E5FFFF          <2> 	call prcharq
  5294 00003E7B C3                  <2> 	ret
  5295                              <2> .nospecific:
  5296 00003E7C 66BB0700            <2> 	mov bx, 7
  5297 00003E80 66B82000            <2> 	mov ax, " "
  5298 00003E84 C605[513E0000]00    <2> 	mov byte [charmapnum], 0
  5299 00003E8B E8BBE5FFFF          <2> 	call prcharq
  5300 00003E90 E8B6E5FFFF          <2> 	call prcharq
  5301 00003E95 E8B1E5FFFF          <2> 	call prcharq
  5302 00003E9A E8ACE5FFFF          <2> 	call prcharq
  5303 00003E9F 66B83000            <2> 	mov ax, "0"
  5304                              <2> charmapnumprnt:
  5305 00003EA3 E8A3E5FFFF          <2> 	call prcharq
  5306 00003EA8 6640                <2> 	inc ax
  5307 00003EAA 6650                <2> 	push ax
  5308 00003EAC 66B82000            <2> 	mov ax, " "
  5309 00003EB0 E896E5FFFF          <2> 	call prcharq
  5310 00003EB5 6658                <2> 	pop ax
  5311 00003EB7 6683F839            <2> 	cmp ax, "9"
  5312 00003EBB 76E6                <2> 	jbe charmapnumprnt
  5313 00003EBD 66B84100            <2> 	mov ax, "A"
  5314                              <2> charmapnumprnt2:
  5315 00003EC1 E885E5FFFF          <2> 	call prcharq
  5316 00003EC6 6640                <2> 	inc ax
  5317 00003EC8 6650                <2> 	push ax
  5318 00003ECA 66B82000            <2> 	mov ax, " "
  5319 00003ECE E878E5FFFF          <2> 	call prcharq
  5320 00003ED3 6658                <2> 	pop ax
  5321 00003ED5 6683F847            <2> 	cmp ax, "G"
  5322 00003ED9 72E6                <2> 	jb charmapnumprnt2
  5323                              <2> 	
  5324 00003EDB BE[F3950000]        <2> 	mov esi, line
  5325 00003EE0 E8D6DEFFFF          <2> 	call printquiet
  5326 00003EE5 6631C0              <2> 	xor ax, ax
  5327 00003EE8 6689C1              <2> 	mov cx, ax
  5328 00003EEB E8E9F2FFFF          <2> 	call showhexsmall
  5329 00003EF0 EB22                <2> 	jmp charmapnocopy ;the first char is 0 which is unprintable
  5330                              <2> charmapcopy:
  5331 00003EF2 6640                <2> 	inc ax
  5332 00003EF4 6683F808            <2> 	cmp ax, 8
  5333 00003EF8 741A                <2> 	je charmapnocopy
  5334 00003EFA 6683F809            <2> 	cmp ax, 9
  5335 00003EFE 7414                <2> 	je charmapnocopy
  5336 00003F00 6683F80A            <2> 	cmp ax, 10
  5337 00003F04 740E                <2> 	je charmapnocopy
  5338 00003F06 6683F80D            <2> 	cmp ax, 13
  5339 00003F0A 7408                <2> 	je charmapnocopy
  5340 00003F0C 663D0001            <2> 	cmp ax, 256
  5341 00003F10 7447                <2> 	je nomorecharmap
  5342 00003F12 EB04                <2> 	jmp okchar
  5343                              <2> charmapnocopy:
  5344 00003F14 66B82000            <2> 	mov ax, " "
  5345                              <2> okchar:
  5346 00003F18 6650                <2> 	push ax
  5347 00003F1A E82CE5FFFF          <2> 	call prcharq
  5348 00003F1F 66B82000            <2> 	mov ax, " "
  5349 00003F23 E823E5FFFF          <2> 	call prcharq
  5350 00003F28 6658                <2> 	pop ax
  5351                              <2> charmapcopycheck:
  5352 00003F2A FE05[513E0000]      <2> 	inc byte [charmapnum]
  5353 00003F30 803D[513E0000]10    <2> 	cmp byte [charmapnum], 16
  5354 00003F37 72B9                <2> 	jb charmapcopy
  5355 00003F39 6650                <2> 	push ax
  5356 00003F3B BE[F3950000]        <2> 	mov esi, line
  5357 00003F40 E876DEFFFF          <2> 	call printquiet
  5358 00003F45 6658                <2> 	pop ax
  5359 00003F47 88C1                <2> 	mov cl, al
  5360 00003F49 FEC1                <2> 	inc cl
  5361 00003F4B E889F2FFFF          <2> 	call showhexsmall
  5362 00003F50 C605[513E0000]00    <2> 	mov byte [charmapnum], 0
  5363 00003F57 EB99                <2> 	jmp charmapcopy
  5364                              <2> nomorecharmap:
  5365 00003F59 C3                  <2> 	ret
  5366                              <1> %ifdef gui.included
  5367                              <1> 	%include 'source/programs/circle.asm'
  5368 00003F5A FF2C636972636C6500  <2> db 255,44,"circle",0
  5369                              <2> circle:
  5370 00003F63 8B35[EB2F0000]      <2> 	mov esi, [currentcommandloc]
  5371 00003F69 83C607              <2> 	add esi, 7
  5372 00003F6C 66B91000            <2> 	mov cx, 16
  5373 00003F70 30C0                <2> 	xor al, al
  5374 00003F72 3806                <2> 	cmp [esi], al
  5375 00003F74 7405                <2> 	je .nocmdline
  5376 00003F76 E8F0F3FFFF          <2> 	call cnvrttxt
  5377                              <2> .nocmdline:
  5378 00003F7B E8290D0000          <2> 	call linetester.stime
  5379 00003F80 E854000000          <2> 	call fcircle.nocmdline
  5380 00003F85 E8370D0000          <2> 	call linetester.etime
  5381 00003F8A 53                  <2> 	push ebx
  5382 00003F8B 57                  <2> 	push edi
  5383 00003F8C E825E4FFFF          <2> 	call getchar
  5384 00003F91 59                  <2> 	pop ecx
  5385 00003F92 E805F3FFFF          <2> 	call showdec
  5386 00003F97 BE[484D0000]        <2> 	mov esi, linetester.msgcircle
  5387 00003F9C E81ADEFFFF          <2> 	call printquiet
  5388 00003FA1 59                  <2> 	pop ecx
  5389 00003FA2 E8F5F2FFFF          <2> 	call showdec
  5390 00003FA7 BE[5F4D0000]        <2> 	mov esi, linetester.msgtime
  5391 00003FAC E80ADEFFFF          <2> 	call printquiet
  5392 00003FB1 E89D330000          <2> 	call reloadallgraphics
  5393 00003FB6 C3                  <2> 	ret
  5394                              <2> 	
  5395 00003FB7 FF2C66636972636C65- <2> db 255,44,"fcircle",0	;attempts to draw many circles without refreshing screen or showing time
  5396 00003FC0 00                  <2>
  5397                              <2> fcircle:	
  5398 00003FC1 8B35[EB2F0000]      <2> 	mov esi, [currentcommandloc]
  5399 00003FC7 83C608              <2> 	add esi, 8
  5400 00003FCA 66B91000            <2> 	mov cx, 16
  5401 00003FCE 30C0                <2> 	xor al, al
  5402 00003FD0 3806                <2> 	cmp [esi], al
  5403 00003FD2 7405                <2> 	je .nocmdline
  5404 00003FD4 E892F3FFFF          <2> 	call cnvrttxt
  5405                              <2> .nocmdline:
  5406 00003FD9 6689C8              <2> 	mov ax, cx
  5407 00003FDC 66D1E1              <2> 	shl cx, 1
  5408 00003FDF 6689CA              <2> 	mov dx, cx
  5409 00003FE2 663B15[6B5A0000]    <2> 	cmp dx, [resolutionx]
  5410 00003FE9 731B                <2> 	jae .done
  5411 00003FEB 663B0D[6D5A0000]    <2> 	cmp cx, [resolutiony]
  5412 00003FF2 7312                <2> 	jae .done
  5413 00003FF4 668B35[58020000]    <2> 	mov si, [timenanoseconds + 2]
  5414 00003FFB 31FF                <2> 	xor edi, edi
  5415 00003FFD 803D[18960000]01    <2> 	cmp byte [guion], 1
  5416 00004004 7401                <2> 	je .lp
  5417 00004006 C3                  <2> .done ret
  5418                              <2> .lp:
  5419 00004007 6629C2              <2> 	sub dx, ax
  5420 0000400A 6629C1              <2> 	sub cx, ax
  5421 0000400D 60                  <2> 	pusha
  5422 0000400E E8612E0000          <2> 	call fillcircle
  5423 00004013 61                  <2> 	popa
  5424 00004014 47                  <2> 	inc edi
  5425 00004015 660335[56020000]    <2> 	add si, [timenanoseconds]
  5426 0000401C 6601C2              <2> 	add dx, ax
  5427 0000401F 6601C2              <2> 	add dx, ax
  5428 00004022 6601C2              <2> 	add dx, ax
  5429 00004025 6601C1              <2> 	add cx, ax
  5430 00004028 663B15[6B5A0000]    <2> 	cmp dx, [resolutionx]
  5431 0000402F 72D6                <2> 	jb .lp
  5432 00004031 6689C2              <2> 	mov dx, ax
  5433 00004034 6601C2              <2> 	add dx, ax
  5434 00004037 6601C1              <2> 	add cx, ax
  5435 0000403A 6601C1              <2> 	add cx, ax
  5436 0000403D 663B0D[6D5A0000]    <2> 	cmp cx, [resolutiony]
  5437 00004044 72C1                <2> 	jb .lp
  5438 00004046 C3                  <2> 	ret
  5439                              <1> %endif
  5440                              <1> %include 'source/programs/clear.asm'
  5441 00004047 FF2C636C65617200    <2> db 255,44,"clear",0
  5442 0000404F E834DEFFFF          <2> 		call clear
  5443 00004054 C3                  <2> 		ret 
  5444                              <1> %include 'source/programs/cpuid.asm'
  5445 00004055 FF2C637075696400    <2> db 255,44,"cpuid",0
  5446 0000405D 31C0                <2> 	xor eax, eax
  5447 0000405F 0FA2                <2> 	cpuid
  5448 00004061 891D[B2400000]      <2> 	mov [cpuidbuf], ebx
  5449 00004067 8915[B6400000]      <2> 	mov [cpuidbuf + 4], edx
  5450 0000406D 890D[BA400000]      <2> 	mov [cpuidbuf + 8], ecx
  5451 00004073 BE[B2400000]        <2> 	mov esi, cpuidbuf
  5452 00004078 E85FDDFFFF          <2> 	call print
  5453 0000407D BE[F3950000]        <2> 	mov esi, line
  5454 00004082 E855DDFFFF          <2> 	call print
  5455 00004087 B801000000          <2> 	mov eax, 1
  5456 0000408C 0FA2                <2> 	cpuid
  5457 0000408E 89C1                <2> 	mov ecx, eax
  5458 00004090 C605[D8310000]02    <2> 	mov byte [firsthexshown], 2
  5459 00004097 E851F1FFFF          <2> 	call showhex
  5460 0000409C B808000080          <2> 	mov eax, 0x80000008
  5461 000040A1 0FA2                <2> 	cpuid
  5462 000040A3 89C1                <2> 	mov ecx, eax
  5463 000040A5 C605[D8310000]02    <2> 	mov byte [firsthexshown], 2
  5464 000040AC E83CF1FFFF          <2> 	call showhex
  5465 000040B1 C3                  <2> 	ret
  5466                              <2> 	
  5467 000040B2 00<rept>            <2> cpuidbuf times 13 db 0
  5468                              <2> cpuidvendorend:
  5469                              <1> %include 'source/programs/date.asm'
  5470 000040BF 082E30303030303030- <2> timenscache db 8,".000000000"
  5471 000040C8 3030                <2>
  5472 000040CA 200A00              <2> timenscacheend: db " ",10,0
  5473 000040CD 00                  <2> istimeset db 0
  5474 000040CE 456E74657220746865- <2> settimemsg db "Enter the current UNIX time:",10,0
  5475 000040D7 2063757272656E7420- <2>
  5476 000040E0 554E49582074696D65- <2>
  5477 000040E9 3A0A00              <2>
  5478 000040EC 00<rept>            <2> timeinputbuffer times 12 db 0
  5479 000040F8 00                  <2> timeinputbend: db 0
  5480                              <2> 
  5481 000040F9 FF2C6461746500      <2> db 255,44,"date",0
  5482                              <2> 	;cmp byte [istimeset], 0
  5483                              <2> 	;jne timeisset
  5484 00004100 E880000000          <2> 	call time
  5485 00004105 E823020000          <2> 	call timeconvert	
  5486                              <2> 	; mov esi, settimemsg
  5487                              <2> 	; call print
  5488                              <2> 	; mov esi, timeinputbuffer
  5489                              <2> 	; mov edi, timeinputbend
  5490                              <2> 	; call readline
  5491                              <2> 	; mov esi, timeinputbuffer
  5492                              <2> 	; xor edi, edi
  5493                              <2> 	; call cnvrttxt
  5494 0000410A 890D[52020000]      <2> 	mov [timeseconds], ecx
  5495                              <2> 	;xor ecx, ecx
  5496                              <2> 	;mov [timenanoseconds], ecx
  5497 00004110 C605[CD400000]01    <2> 	mov byte [istimeset], 1
  5498                              <2> timeisset:
  5499 00004117 8B0D[52020000]      <2> 	mov ecx, [timeseconds]
  5500 0000411D E87AF1FFFF          <2> 	call showdec
  5501                              <2> 	
  5502 00004122 8B0D[56020000]      <2> 	mov ecx, [timenanoseconds]
  5503 00004128 BE[BF400000]        <2> 	mov esi, timenscache
  5504 0000412D C7460230303030      <2> 	mov dword [esi+ 2], "0000"
  5505 00004134 C7460630303030      <2> 	mov dword [esi + 6], "0000"
  5506 0000413B C6460A30            <2> 	mov byte [esi + 10], "0"
  5507 0000413F BE[CA400000]        <2> 	mov esi, timenscacheend
  5508 00004144 E86EEFFFFF          <2> 	call convert
  5509 00004149 BE[BF400000]        <2> 	mov esi, timenscache
  5510 0000414E E868DCFFFF          <2> 	call printquiet
  5511                              <2> 	
  5512 00004153 E82D000000          <2> 	call time
  5513 00004158 BE[8F440000]        <2> 	mov esi, timeshow
  5514 0000415D E859DCFFFF          <2> 	call printquiet
  5515 00004162 BE[F3950000]        <2> 	mov esi, line
  5516 00004167 E84FDCFFFF          <2> 	call printquiet
  5517 0000416C BE[98440000]        <2> 	mov esi, dateshow
  5518 00004171 E845DCFFFF          <2> 	call printquiet
  5519 00004176 BE[F3950000]        <2> 	mov esi, line
  5520 0000417B E83BDCFFFF          <2> 	call printquiet
  5521 00004180 E9BE000000          <2> 	jmp findday
  5522                              <2> time:
  5523 00004185 E84F010000          <2> 	call tstackput1
  5524 0000418A B00A                <2> 	mov al,10			;Get RTC register A
  5525 0000418C E879010000          <2> 	call tget1
  5526 00004191 A880                <2> 	test al,0x80			;Is update in progress?
  5527 00004193 75F0                <2> 	jne time				; yes, wait
  5528                              <2> 
  5529 00004195 B000                <2> 	mov al,0			;Get seconds (00 to 59)
  5530 00004197 E86E010000          <2> 	call tget1
  5531 0000419C A2[86440000]        <2> 	mov [RTCtimeSecond],al
  5532                              <2> 
  5533 000041A1 B002                <2> 	mov al,0x02			;Get minutes (00 to 59)
  5534 000041A3 E862010000          <2> 	call tget1
  5535 000041A8 A2[87440000]        <2> 	mov [RTCtimeMinute],al
  5536                              <2> 
  5537 000041AD B004                <2> 	mov al,0x04			;Get hours (see notes)
  5538 000041AF E856010000          <2> 	call tget1
  5539 000041B4 A2[88440000]        <2> 	mov [RTCtimeHour],al
  5540                              <2> 
  5541 000041B9 B007                <2> 	mov al,0x07			;Get day of month (01 to 31)
  5542 000041BB E84A010000          <2> 	call tget1
  5543 000041C0 A2[89440000]        <2> 	mov [RTCtimeDay],al
  5544                              <2> 
  5545 000041C5 B008                <2> 	mov al,0x08			;Get month (01 to 12)
  5546 000041C7 E83E010000          <2> 	call tget1
  5547 000041CC 241F                <2> 	and al, 11111b
  5548 000041CE A2[8A440000]        <2> 	mov [RTCtimeMonth],al
  5549                              <2> 
  5550 000041D3 B009                <2> 	mov al,0x09			;Get year (00 to 99)
  5551 000041D5 E830010000          <2> 	call tget1
  5552 000041DA A2[8B440000]        <2> 	mov [RTCtimeYear],al
  5553                              <2> 	
  5554 000041DF BE[8F440000]        <2> 	mov esi, timeshow
  5555 000041E4 8A2D[88440000]      <2> 	mov ch, [RTCtimeHour]
  5556 000041EA E826010000          <2> 	call tput1
  5557 000041EF 8A2D[87440000]      <2> 	mov ch, [RTCtimeMinute]
  5558 000041F5 E81B010000          <2> 	call tput1
  5559 000041FA 8A2D[86440000]      <2> 	mov ch, [RTCtimeSecond]
  5560 00004200 E810010000          <2> 	call tput1
  5561 00004205 BE[98440000]        <2> 	mov esi, dateshow
  5562 0000420A 8A2D[8A440000]      <2> 	mov ch, [RTCtimeMonth]
  5563 00004210 E800010000          <2> 	call tput1
  5564 00004215 8A2D[89440000]      <2> 	mov ch, [RTCtimeDay]
  5565 0000421B E8F5000000          <2> 	call tput1
  5566 00004220 B520                <2> 	mov ch, 0x20
  5567 00004222 E8EE000000          <2> 	call tput1
  5568 00004227 4E                  <2> 	dec esi
  5569 00004228 8A2D[8B440000]      <2> 	mov ch, [RTCtimeYear]
  5570 0000422E E8E2000000          <2> 	call tput1
  5571 00004233 E8BB000000          <2> 	call tstackget1
  5572 00004238 C3                  <2> 	ret
  5573 00004239 BE[8F440000]        <2> 	mov esi, timeshow
  5574 0000423E E899DBFFFF          <2> 	call print
  5575                              <2> ;get day of week
  5576                              <2> ;add these:
  5577                              <2> ;century value
  5578                              <2> ;last 2 digits of year
  5579                              <2> ;last 2 digits of year right shifted twice
  5580                              <2> ;month table value
  5581                              <2> ;day of the month
  5582                              <2> ;divide these by 7
  5583                              <2> ;the remainder is the day
  5584                              <2> findday:
  5585 00004243 31C0                <2> 	xor eax, eax
  5586                              <2> ;first convert the values from BCD to hex
  5587 00004245 A0[89440000]        <2> 	mov al, [RTCtimeDay]
  5588 0000424A E871000000          <2> 	call converttohex
  5589 0000424F 8825[8C440000]      <2> 	mov [dayhex], ah
  5590 00004255 A0[8A440000]        <2> 	mov al, [RTCtimeMonth]
  5591 0000425A E861000000          <2> 	call converttohex
  5592 0000425F 8825[8D440000]      <2> 	mov [monthhex], ah
  5593 00004265 A0[8B440000]        <2> 	mov al, [RTCtimeYear]
  5594 0000426A E851000000          <2> 	call converttohex
  5595 0000426F 8825[8E440000]      <2> 	mov [yearhex], ah
  5596 00004275 31C0                <2> 	xor eax, eax
  5597 00004277 A0[8E440000]        <2> 	mov al, [yearhex]
  5598 0000427C C0E802              <2> 	shr al, 2
  5599 0000427F 0205[8E440000]      <2> 	add al, [yearhex]
  5600 00004285 83C006              <2> 	add eax, 6
  5601 00004288 31DB                <2> 	xor ebx, ebx
  5602 0000428A 8A1D[8D440000]      <2> 	mov bl, [monthhex]
  5603 00004290 FECB                <2> 	dec bl
  5604 00004292 81C3[AD440000]      <2> 	add ebx, month
  5605 00004298 31C9                <2> 	xor ecx, ecx
  5606 0000429A 8A0B                <2> 	mov cl, [ebx]
  5607 0000429C 01C8                <2> 	add eax, ecx
  5608 0000429E 8A0D[8C440000]      <2> 	mov cl, [dayhex]
  5609 000042A4 01C8                <2> 	add eax, ecx
  5610 000042A6 66BB0700            <2> 	mov bx, 7
  5611 000042AA 31D2                <2> 	xor edx, edx
  5612 000042AC 66F7F3              <2> 	div bx
  5613 000042AF C1E202              <2> 	shl edx, 2
  5614 000042B2 81C2[B9440000]      <2> 	add edx, day
  5615 000042B8 8B32                <2> 	mov esi, [edx]
  5616 000042BA E81DDBFFFF          <2> 	call print
  5617 000042BF C3                  <2> 	ret
  5618                              <2> 	
  5619                              <2> converttohex:
  5620 000042C0 88C4                <2> 	mov ah, al
  5621 000042C2 C0E804              <2> 	shr al, 4
  5622 000042C5 C0E404              <2> 	shl ah, 4
  5623 000042C8 C0EC04              <2> 	shr ah, 4
  5624 000042CB 3C00                <2> 	cmp al, 0
  5625 000042CD 7409                <2> 	je noconverttohex
  5626                              <2> converttohexlp:
  5627 000042CF 80C40A              <2> 	add ah, 10
  5628 000042D2 FEC8                <2> 	dec al
  5629 000042D4 3C00                <2> 	cmp al, 0
  5630 000042D6 75F7                <2> 	jne converttohexlp
  5631                              <2> noconverttohex:
  5632 000042D8 C3                  <2> 	ret
  5633                              <2> 	
  5634                              <2> tstackput1:
  5635 000042D9 8935[82440000]      <2> 	mov [tstack + 20], esi
  5636 000042DF BE[6E440000]        <2> 	mov esi, tstack
  5637 000042E4 8906                <2> 	mov [esi], eax
  5638 000042E6 895E04              <2> 	mov [esi + 4], ebx
  5639 000042E9 894E08              <2> 	mov [esi + 8], ecx
  5640 000042EC 89560C              <2> 	mov [esi + 12], edx
  5641 000042EF 897E10              <2> 	mov [esi + 16], edi
  5642 000042F2 C3                  <2> 	ret
  5643                              <2> 	
  5644                              <2> tstackget1:
  5645 000042F3 BE[6E440000]        <2> 	mov esi, tstack
  5646 000042F8 8B06                <2> 	mov eax, [esi]
  5647 000042FA 8B5E04              <2> 	mov ebx, [esi + 4]
  5648 000042FD 8B4E08              <2> 	mov ecx, [esi + 8]
  5649 00004300 8B560C              <2> 	mov edx, [esi + 12]
  5650 00004303 8B7E10              <2> 	mov edi, [esi + 16]
  5651 00004306 8B7614              <2> 	mov esi, [esi + 20]
  5652 00004309 C3                  <2> 	ret
  5653                              <2> 	
  5654                              <2> tget1:
  5655 0000430A 66BA7000            <2> 	mov dx, 0x70
  5656 0000430E EE                  <2> 	out dx, al
  5657 0000430F 6642                <2> 	inc dx
  5658 00004311 EC                  <2> 	in al, dx
  5659 00004312 664A                <2> 	dec dx
  5660 00004314 C3                  <2> 	ret
  5661                              <2> 	
  5662                              <2> tput1:
  5663 00004315 66C1E904            <2> 	shr cx, 4
  5664 00004319 B030                <2> 	mov al, 48
  5665 0000431B 00E8                <2> 	add al, ch
  5666 0000431D 8806                <2> 	mov [esi], al
  5667 0000431F 46                  <2> 	inc esi
  5668 00004320 B030                <2> 	mov al, 48
  5669 00004322 C0E904              <2> 	shr cl, 4
  5670 00004325 00C8                <2> 	add al, cl
  5671 00004327 8806                <2> 	mov [esi], al
  5672 00004329 83C602              <2> 	add esi, 2
  5673 0000432C C3                  <2> 	ret
  5674                              <2> 	
  5675                              <2> timeconvert: ;return time in the RTCtime stuff in ecx
  5676 0000432D 31DB                <2> 	xor ebx, ebx
  5677 0000432F 31C9                <2> 	xor ecx, ecx
  5678 00004331 31FF                <2> 	xor edi, edi
  5679 00004333 31F6                <2> 	xor esi, esi
  5680                              <2> 	
  5681 00004335 A0[86440000]        <2> 	mov al, [RTCtimeSecond]
  5682 0000433A E881FFFFFF          <2> 	call converttohex
  5683 0000433F 88E1                <2> 	mov cl, ah
  5684                              <2> 	
  5685 00004341 A0[87440000]        <2> 	mov al, [RTCtimeMinute]
  5686 00004346 E875FFFFFF          <2> 	call converttohex
  5687 0000434B 88E3                <2> 	mov bl, ah
  5688 0000434D B83C000000          <2> 	mov eax, 60
  5689 00004352 31D2                <2> 	xor edx, edx
  5690 00004354 F7E3                <2> 	mul ebx
  5691 00004356 01C1                <2> 	add ecx, eax
  5692                              <2> 	
  5693 00004358 A0[88440000]        <2> 	mov al, [RTCtimeHour]
  5694 0000435D E85EFFFFFF          <2> 	call converttohex
  5695 00004362 88E3                <2> 	mov bl, ah
  5696 00004364 B8100E0000          <2> 	mov eax, 3600
  5697 00004369 31D2                <2> 	xor edx, edx
  5698 0000436B F7E3                <2> 	mul ebx
  5699 0000436D 01C1                <2> 	add ecx, eax
  5700                              <2> 		
  5701 0000436F 31C0                <2> 	xor eax, eax
  5702 00004371 A0[8B440000]        <2> 	mov al, [RTCtimeYear]
  5703 00004376 E845FFFFFF          <2> 	call converttohex
  5704 0000437B 6689C6              <2> 	mov si, ax
  5705 0000437E 66C1EE08            <2> 	shr si, 8
  5706 00004382 6683FE46            <2> 	cmp si, 70
  5707 00004386 7704                <2> 	ja .no100
  5708 00004388 6683C664            <2> 	add si, 100
  5709                              <2> .no100:
  5710 0000438C 6681C66C07          <2> 	add si, 1900
  5711                              <2> 	
  5712 00004391 BB[60440000]        <2> 	mov ebx, .month
  5713 00004396 A0[89440000]        <2> 	mov al, [RTCtimeDay]
  5714 0000439B E820FFFFFF          <2> 	call converttohex
  5715 000043A0 88E0                <2> 	mov al, ah
  5716 000043A2 FEC8                <2> 	dec al
  5717 000043A4 31D2                <2> 	xor edx, edx
  5718 000043A6 88C2                <2> 	mov dl, al
  5719 000043A8 A0[8A440000]        <2> 	mov al, [RTCtimeMonth]
  5720 000043AD E80EFFFFFF          <2> 	call converttohex
  5721 000043B2 88D0                <2> 	mov al, dl
  5722 000043B4 88E2                <2> 	mov dl, ah
  5723 000043B6 30E4                <2> 	xor ah, ah
  5724 000043B8 6689D5              <2> 	mov bp, dx
  5725                              <2> 	
  5726 000043BB 6689F7              <2> 	mov di, si
  5727 000043BE 66C1EF02            <2> 	shr di, 2
  5728 000043C2 66C1E702            <2> 	shl di, 2
  5729 000043C6 C605[61440000]1C    <2> 	mov byte [.month + 1], 28
  5730 000043CD 6639F7              <2> 	cmp di, si
  5731 000043D0 7506                <2> 	jne .nofebmod
  5732 000043D2 FE05[61440000]      <2> 	inc byte [.month + 1]
  5733                              <2> .nofebmod:
  5734 000043D8 664D                <2> 	dec bp
  5735 000043DA 6683FD00            <2> 	cmp bp, 0
  5736 000043DE 7407                <2> 	je .ylp
  5737 000043E0 8A13                <2> 	mov dl, [ebx]
  5738 000043E2 01D0                <2> 	add eax, edx
  5739 000043E4 43                  <2> 	inc ebx
  5740 000043E5 EBF1                <2> 	jmp .nofebmod
  5741                              <2> 	
  5742                              <2> .ylp:
  5743 000043E7 6689F7              <2> 	mov di, si
  5744 000043EA 66C1EF02            <2> 	shr di, 2
  5745 000043EE 66C1E702            <2> 	shl di, 2
  5746 000043F2 81C18033E101        <2> 	add ecx, 31536000
  5747 000043F8 6639F7              <2> 	cmp di, si
  5748 000043FB 7506                <2> 	jne .noymod
  5749 000043FD 81C180510100        <2> 	add ecx, 86400
  5750                              <2> .noymod:
  5751 00004403 664E                <2> 	dec si
  5752 00004405 6681FEB207          <2> 	cmp si, 1970
  5753 0000440A 77DB                <2> 	ja .ylp
  5754                              <2> 	
  5755 0000440C BB80510100          <2> 	mov ebx, 86400
  5756 00004411 31D2                <2> 	xor edx, edx
  5757 00004413 F7E3                <2> 	mul ebx
  5758 00004415 01C1                <2> 	add ecx, eax
  5759                              <2> 	
  5760 00004417 31DB                <2> 	xor ebx, ebx
  5761 00004419 31D2                <2> 	xor edx, edx
  5762 0000441B B8100E0000          <2> 	mov eax, 3600
  5763 00004420 8A3D[6C440000]      <2> 	mov bh, [timezoneh]
  5764 00004426 80FF80              <2> 	cmp bh, 128
  5765 00004429 720A                <2> 	jb .posh
  5766 0000442B 28FB                <2> 	sub bl, bh
  5767 0000442D 30FF                <2> 	xor bh, bh
  5768 0000442F F7E3                <2> 	mul ebx
  5769 00004431 01C1                <2> 	add ecx, eax
  5770 00004433 EB06                <2> 	jmp .doneth
  5771                              <2> .posh:
  5772 00004435 86DF                <2> 	xchg bl, bh
  5773 00004437 F7E3                <2> 	mul ebx
  5774 00004439 29C1                <2> 	sub ecx, eax
  5775                              <2> .doneth:
  5776                              <2> 
  5777 0000443B 31DB                <2> 	xor ebx, ebx	
  5778 0000443D 31D2                <2> 	xor edx, edx
  5779 0000443F B83C000000          <2> 	mov eax, 60
  5780 00004444 8A3D[6D440000]      <2> 	mov bh, [timezonem]
  5781 0000444A 80FF80              <2> 	cmp bh, 128
  5782 0000444D 720A                <2> 	jb .posm
  5783 0000444F 28FB                <2> 	sub bl, bh
  5784 00004451 30FF                <2> 	xor bh, bh
  5785 00004453 F7E3                <2> 	mul ebx
  5786 00004455 01C1                <2> 	add ecx, eax
  5787 00004457 EB06                <2> 	jmp .donetm
  5788                              <2> .posm:
  5789 00004459 86DF                <2> 	xchg bl, bh
  5790 0000445B F7E3                <2> 	mul ebx
  5791 0000445D 29C1                <2> 	sub ecx, eax
  5792                              <2> .donetm:
  5793                              <2> 
  5794 0000445F C3                  <2> 	ret
  5795                              <2> 	
  5796                              <2> 
  5797 00004460 1F1C1F1E1F1E1F1F1E- <2> .month db 31,28,31,30,31,30,31,31,30,31,30,31
  5798 00004469 1F1E1F              <2>
  5799                              <2> 
  5800 0000446C FA                  <2> 	timezoneh db -6
  5801 0000446D 00                  <2> 	timezonem db 0
  5802 0000446E 000000000000000000- <2> 	tstack dd 0,0,0,0,0,0
  5803 00004477 000000000000000000- <2>
  5804 00004480 000000000000        <2>
  5805 00004486 00                  <2> 	RTCtimeSecond db 0
  5806 00004487 00                  <2> 	RTCtimeMinute db 0
  5807 00004488 00                  <2> 	RTCtimeHour db 0
  5808 00004489 00                  <2> 	RTCtimeDay db 0
  5809 0000448A 00                  <2> 	RTCtimeMonth db 0
  5810 0000448B 00                  <2> 	RTCtimeYear db 0
  5811 0000448C 00                  <2> 	dayhex db 0
  5812 0000448D 00                  <2> 	monthhex db 0
  5813 0000448E 00                  <2> 	yearhex db 0
  5814 0000448F 30303A30303A303000  <2> 	timeshow db "00:00:00",0
  5815 00004498 30302D30302D303030- <2> 	dateshow db "00-00-0000 ",0
  5816 000044A1 302000              <2>
  5817                              <2> 	oldcentury:	;from 1700 to 1900
  5818 000044A4 040200              <2> 	db 4,2,0
  5819                              <2> 	century:	;from 2000 to 2500
  5820 000044A7 060402000604        <2> 	db 6,4,2,0,6,4
  5821                              <2> 	month:
  5822 000044AD 000303060104060205- <2> 	db 0,3,3,6,1,4,6,2,5,0,3,5
  5823 000044B6 000305              <2>
  5824                              <2> 	day:
  5825 000044B9 [D5440000]          <2> 	dd sunday
  5826 000044BD [DD440000]          <2> 	dd monday
  5827 000044C1 [E5440000]          <2> 	dd tuesday
  5828 000044C5 [EE440000]          <2> 	dd wednesday
  5829 000044C9 [F9440000]          <2> 	dd thursday
  5830 000044CD [03450000]          <2> 	dd friday
  5831 000044D1 [0B450000]          <2> 	dd saturday
  5832                              <2> sunday:
  5833 000044D5 53756E6461790A00    <2> 	db "Sunday",10,0
  5834                              <2> monday:
  5835 000044DD 4D6F6E6461790A00    <2> 	db "Monday",10,0
  5836                              <2> tuesday:
  5837 000044E5 547565736461790A00  <2> 	db "Tuesday",10,0
  5838                              <2> wednesday:
  5839 000044EE 5765646E6573646179- <2> 	db "Wednesday",10,0
  5840 000044F7 0A00                <2>
  5841                              <2> thursday:
  5842 000044F9 54687572736461790A- <2> 	db "Thursday",10,0
  5843 00004502 00                  <2>
  5844                              <2> friday:
  5845 00004503 4672696461790A00    <2> 	db "Friday",10,0
  5846                              <2> saturday:
  5847 0000450B 53617475726461790A- <2> 	db "Saturday",10,0
  5848 00004514 00                  <2>
  5849                              <1> %ifdef network.included
  5850                              <1> 	%include 'source/programs/dhcp.asm'
  5851 00004515 FF2C6468637000      <2> db 255,44,"dhcp",0
  5852                              <2> dhcp:
  5853 0000451C BE[DC450000]        <2> 	mov esi, .dhcp.mac
  5854 00004521 BB[BC460000]        <2> 	mov ebx, .dhcp.option.mac
  5855 00004526 BF[9C450000]        <2> 	mov edi, .mac
  5856 0000452B 31C9                <2> 	xor ecx, ecx
  5857 0000452D 66890D[AE450000]    <2> 	mov [.ip.checksum], cx
  5858 00004534 66890D[BE450000]    <2> 	mov [.udp.checksum], cx
  5859 0000453B 8B0D[AC950000]      <2> 	mov ecx, [sysmac]
  5860 00004541 890B                <2> 	mov [ebx], ecx
  5861 00004543 890F                <2> 	mov [edi], ecx
  5862 00004545 890E                <2> 	mov [esi], ecx
  5863 00004547 668B0D[B0950000]    <2> 	mov cx, [sysmac + 4]
  5864 0000454E 66894B04            <2> 	mov [ebx + 4], cx
  5865 00004552 66894E04            <2> 	mov [esi + 4], cx
  5866 00004556 66894F04            <2> 	mov [edi + 4], cx
  5867 0000455A BF[A4450000]        <2> 	mov edi, .ip.header
  5868 0000455F BE[B8450000]        <2> 	mov esi, .ip.headerend
  5869 00004564 E8494F0000          <2> 	call getchecksum
  5870 00004569 66890D[AE450000]    <2> 	mov [.ip.checksum], cx
  5871 00004570 BF[B8450000]        <2> 	mov edi, .udp.header
  5872 00004575 BE[D3460000]        <2> 	mov esi, .udp.end
  5873 0000457A E8334F0000          <2> 	call getchecksum
  5874 0000457F 66890D[BE450000]    <2> 	mov [.udp.checksum], cx
  5875 00004586 BF[96450000]        <2> 	mov edi, .frame
  5876 0000458B BE[D3460000]        <2> 	mov esi, .udp.end
  5877 00004590 E8FC4E0000          <2> 	call sendpacket
  5878 00004595 C3                  <2> 	ret
  5879                              <2> 
  5880                              <2> .frame:
  5881 00004596 FFFFFFFFFFFF        <2> 	.destmac db 0xFF,0xFF,0xFF,0xFF,0xFF,0xFF
  5882 0000459C 000000000000        <2> 	.mac db 0,0,0,0,0,0
  5883 000045A2 0800                <2> 	db 8,0
  5884                              <2> .ip.header:
  5885 000045A4 45                  <2> 	db (0x40 | (.ip.headerend - .ip.header)/4)
  5886 000045A5 00                  <2> 	db 0
  5887 000045A6 012F                <2> 	db (.udp.end - .ip.header)/256, (.udp.end - .ip.header) % 256
  5888 000045A8 0000                <2> 	dw 0
  5889 000045AA 0000                <2> 	dw 0
  5890 000045AC 80                  <2> 	db 0x80
  5891 000045AD 11                  <2> 	db 17
  5892 000045AE 0000                <2> .ip.checksum dw 0
  5893 000045B0 00000000            <2> 	db 0,0,0,0
  5894 000045B4 FFFFFFFF            <2> 	db 255,255,255,255	
  5895                              <2> .ip.headerend:
  5896                              <2> .udp.header:
  5897 000045B8 0044                <2> 	db 0,68	;source port
  5898 000045BA 0043                <2> 	db 0,67 ;destination port
  5899 000045BC 012F                <2> 	db (.udp.end - .ip.header)/256, (.udp.end - .ip.header) % 256
  5900 000045BE 0000                <2> .udp.checksum dw 0
  5901                              <2> .udp.headerend:
  5902                              <2> .dhcp.data:
  5903 000045C0 01                  <2> 	db 1	;message type
  5904 000045C1 01                  <2> 	db 1	;hardware type
  5905 000045C2 06                  <2> 	db 6	;hardware address length
  5906 000045C3 00                  <2> 	db 0	;hops
  5907 000045C4 EC2B2369            <2> 	db 0xEC,0x2B,0x23,0x69	;transaction ID
  5908 000045C8 0000                <2> 	db 0,0	;seconds elapsed
  5909 000045CA 0000                <2> 	db 0,0	;flags
  5910 000045CC 00000000            <2> 	db 0,0,0,0	;client ip address
  5911 000045D0 00000000            <2> 	db 0,0,0,0	;your ip address
  5912 000045D4 00000000            <2> 	db 0,0,0,0	;server ip address
  5913 000045D8 00000000            <2> 	db 0,0,0,0	;relay agent ip address
  5914 000045DC 000000000000        <2> .dhcp.mac db 0,0,0,0,0,0	;client hardware address
  5915 000045E2 00<rept>            <2> 	times 10 db 0	;padding
  5916 000045EC 00<rept>            <2> 	times 64 db 0	;server host name
  5917 0000462C 00<rept>            <2> 	times 128 db 0	;boot file name
  5918 000046AC 63825363            <2> 	db 0x63,0x82,0x53,0x63	;magic cookie
  5919                              <2> .dhcp.option.type:
  5920 000046B0 350103              <2> 	db 53,1,3	;DHCP Request
  5921 000046B3 3204C0A80002        <2> 	db 50,4,192,168,0,2	;requested IP
  5922 000046B9 3D07                <2> 	db 61,7 ;client id(mac)
  5923 000046BB 01                  <2> 	db 1	;Type=Ethernet
  5924 000046BC 000000000000        <2> .dhcp.option.mac:	db 0,0,0,0,0,0
  5925 000046C2 0C08                <2> 	db 12,8 ;host name
  5926 000046C4 536F6C6C65724F53    <2> .dhcp.option.name 	db "SollerOS"
  5927 000046CC 370401030F06        <2> 	db 55,4,1,3,15,6	;request subnet, router, domain name, name server
  5928 000046D2 FF                  <2> 	db 0xFF	;end DHCP options
  5929                              <2> .dhcp.end:
  5930                              <2> .udp.end:
  5931                              <2> 	
  5932                              <1> %endif
  5933                              <1> %ifdef disk.none
  5934                              <1> %else
  5935                              <1> 	%include 'source/programs/dos.asm'
  5936 000046D3 FF2C646F7300        <2> db 255,44,"dos",0
  5937                              <2> dosrunner:
  5938 000046D9 8925[08BE0300]      <2> 	mov [previousstack], esp
  5939 000046DF 8B3D[EB2F0000]      <2> 	mov edi, [currentcommandloc]
  5940 000046E5 83C704              <2> 	add edi, 4
  5941 000046E8 BE00014000          <2> 	mov esi,  0x100 + dosprogloc	;this should be the beginning of memory
  5942 000046ED E8E5230000          <2> 	call loadfile
  5943 000046F2 8B3D[EB2F0000]      <2> 	mov edi, [currentcommandloc]
  5944 000046F8 83C704              <2> 	add edi, 4
  5945 000046FB 81FA94010000        <2> 	cmp edx, 404
  5946 00004701 0F845E000000        <2> 	je near .noprogfound
  5947 00004707 BB81004000          <2> 	mov ebx, 0x81 + dosprogloc
  5948 0000470C 31C9                <2> 	xor ecx, ecx
  5949                              <2> .findparams:
  5950 0000470E 47                  <2> 	inc edi
  5951 0000470F 8A07                <2> 	mov al, [edi]
  5952 00004711 3C20                <2> 	cmp al, " "
  5953 00004713 75F9                <2> 	jne .findparams
  5954                              <2> .copyparams:
  5955 00004715 8A07                <2> 	mov al, [edi]
  5956 00004717 8803                <2> 	mov [ebx], al
  5957 00004719 43                  <2> 	inc ebx
  5958 0000471A 47                  <2> 	inc edi
  5959 0000471B 41                  <2> 	inc ecx
  5960 0000471C 81FB00014000        <2> 	cmp ebx, 0x100 + dosprogloc
  5961 00004722 7304                <2> 	jae .nomoreparams
  5962 00004724 3C00                <2> 	cmp al, 0
  5963 00004726 75ED                <2> 	jne .copyparams
  5964                              <2> .nomoreparams:
  5965 00004728 880D80004000        <2> 	mov [0x80 + dosprogloc], cl
  5966 0000472E 66B85000            <2> 	mov ax, DOS_DATA_SEL
  5967 00004732 8ED8                <2> 	mov ds, ax
  5968 00004734 8EC0                <2> 	mov es, ax
  5969 00004736 8EE0                <2> 	mov fs, ax
  5970 00004738 8EE8                <2> 	mov gs, ax
  5971 0000473A 31C0                <2> 	xor eax, eax
  5972 0000473C 31DB                <2> 	xor ebx, ebx
  5973 0000473E 31C9                <2> 	xor ecx, ecx
  5974 00004740 31D2                <2> 	xor edx, edx
  5975 00004742 31FF                <2> 	xor edi, edi
  5976 00004744 31F6                <2> 	xor esi, esi
  5977 00004746 9A000100004800      <2> 	call DOS_CODE_SEL:0x100
  5978 0000474D 66BB3000            <2> 	mov bx, NEW_DATA_SEL
  5979 00004751 6689DA              <2> 	mov dx, bx
  5980 00004754 8EC3                <2> 	mov es, bx
  5981 00004756 8EE3                <2> 	mov fs, bx
  5982 00004758 66BB2000            <2> 	mov bx, SYS_DATA_SEL
  5983 0000475C 8EEB                <2> 	mov gs, bx
  5984 0000475E 8B25[08BE0300]      <2> 	mov esp, [previousstack]
  5985 00004764 C3                  <2> 	ret
  5986                              <2> .noprogfound:
  5987 00004765 BE[BA950000]        <2> 	mov esi, notfound1
  5988 0000476A E86DD6FFFF          <2> 	call print
  5989 0000476F 8B35[EB2F0000]      <2> 	mov esi, [currentcommandloc]
  5990 00004775 83C604              <2> 	add esi, 4
  5991 00004778 E85FD6FFFF          <2> 	call print
  5992 0000477D BE[C2950000]        <2> 	mov esi, notfound2
  5993 00004782 E855D6FFFF          <2> 	call print
  5994 00004787 C3                  <2> 	ret
  5995                              <2> 	
  5996                              <1> %endif
  5997                              <1> %include 'source/programs/dump.asm'
  5998 00004788 FF2C64756D7000      <2> db 255,44,"dump",0
  5999 0000478F 8B35[EB2F0000]      <2> 	mov esi, [currentcommandloc]
  6000 00004795 83C605              <2> 	add esi, 5
  6001 00004798 31C9                <2> 	xor ecx, ecx
  6002 0000479A 66B83078            <2> 	mov ax, "0x"
  6003 0000479E 663906              <2> 	cmp [esi], ax
  6004 000047A1 7407                <2> 	je dumphexin
  6005 000047A3 E8C3EBFFFF          <2> 	call cnvrttxt
  6006 000047A8 EB0A                <2> 	jmp dumphexnow
  6007                              <2> dumphexin:
  6008 000047AA 83C602              <2> 	add esi, 2
  6009 000047AD E879EBFFFF          <2> 	call cnvrthextxt
  6010 000047B2 EB00                <2> 	jmp dumphexnow
  6011                              <2> dumphexnow:
  6012 000047B4 89CF                <2> 	mov edi, ecx
  6013 000047B6 89FE                <2> 	mov esi, edi
  6014 000047B8 81C680030000        <2> 	add esi, 896
  6015                              <2> dumphexloop:
  6016 000047BE 8B0F                <2> 	mov ecx, [edi]
  6017 000047C0 C605[D8310000]05    <2> 	mov byte [firsthexshown],5
  6018 000047C7 E821EAFFFF          <2> 	call showhex
  6019 000047CC 83C704              <2> 	add edi, 4
  6020 000047CF 39F7                <2> 	cmp edi, esi
  6021 000047D1 72EB                <2> 	jb dumphexloop
  6022 000047D3 E849E1FFFF          <2> 	call termcopy
  6023 000047D8 C3                  <2> 	ret 
  6024                              <1> %include 'source/programs/echo.asm'
  6025 000047D9 FF2C6563686F00      <2> db 255,44,"echo",0
  6026                              <2> 	echoprog:
  6027 000047E0 8B35[EB2F0000]      <2> 		mov esi, [currentcommandloc]
  6028 000047E6 83C605              <2> 		add esi, 5
  6029 000047E9 8A06                <2> 		mov al, [esi]
  6030 000047EB E8CBD5FFFF          <2> 		call printquiet
  6031 000047F0 E8E2D5FFFF          <2> 		call printline
  6032 000047F5 C3                  <2> 		ret
  6033 000047F6 BB[88C00300]        <2> 	echovr:	mov ebx, variables
  6034 000047FB BF06000000          <2> 		mov edi, 6
  6035 00004800 E833000000          <2> 		call nxtvrech
  6036 00004805 EB4E                <2> 		jmp prntvr2
  6037 00004807 B13D                <2> 	echvar:	mov cl, '='
  6038 00004809 43                  <2> 		inc ebx
  6039 0000480A 8A03                <2> 		mov al, [ebx]
  6040 0000480C 3C00                <2> 		cmp al, 0
  6041 0000480E 7428                <2> 		je nxtvrech
  6042 00004810 3C3D                <2> 		cmp al, '='
  6043 00004812 741F                <2> 		je nxtvrechb1
  6044 00004814 8B35[EB2F0000]      <2> 		mov esi, [currentcommandloc]
  6045 0000481A 01FE                <2> 		add esi, edi
  6046 0000481C E809E8FFFF          <2> 		call cndtest
  6047 00004821 3C02                <2> 		cmp al, 2
  6048 00004823 742C                <2> 		je prntvr
  6049 00004825 3C01                <2> 		cmp al, 1
  6050 00004827 7428                <2> 		je prntvr
  6051 00004829 8B35[EB2F0000]      <2> 		mov esi, [currentcommandloc]
  6052 0000482F 01FE                <2> 		add esi, edi
  6053 00004831 EB05                <2> 		jmp nxtvrech
  6054                              <2> 	nxtvrechb1:
  6055 00004833 83EB02              <2> 		sub ebx, 2
  6056 00004836 EBCF                <2> 		jmp echvar
  6057 00004838 8A03                <2> 	nxtvrech: mov al, [ebx]
  6058 0000483A 3C05                <2> 		cmp al, 5
  6059 0000483C 740A                <2> 		je nxtvrec2
  6060 0000483E 43                  <2> 		inc ebx
  6061 0000483F 81FB[88D00300]      <2> 		cmp ebx, varend
  6062 00004845 72F1                <2> 		jb nxtvrech
  6063 00004847 C3                  <2> 		ret
  6064 00004848 43                  <2> 	nxtvrec2: inc ebx
  6065 00004849 8A03                <2> 		mov al, [ebx]
  6066 0000484B 3C04                <2> 		cmp al, 4
  6067 0000484D 74B8                <2> 		je echvar
  6068 0000484F EBE7                <2> 		jmp nxtvrech
  6069 00004851 43                  <2> 	prntvr: inc ebx
  6070 00004852 89DE                <2> 		mov esi, ebx
  6071 00004854 C3                  <2> 		ret
  6072 00004855 E882D5FFFF          <2> 	prntvr2: call print
  6073 0000485A BE[F3950000]        <2> 		mov esi, line
  6074 0000485F E878D5FFFF          <2> 		call print
  6075 00004864 C3                  <2> 		ret 
  6076                              <1> %include 'source/programs/else.asm'
  6077 00004865 FF2C656C736500      <2> 	db 255,44,"else",0
  6078 0000486C 31C0                <2> elsecmd:	xor eax, eax
  6079 0000486E 3805[82C00300]      <2> 	cmp [BATCHISON], al
  6080 00004874 0F84E8F1FFFF        <2> 	je near notbatch
  6081 0000487A A0[19C00300]        <2> 	mov al, [IFON]
  6082 0000487F BE[1AC00300]        <2> 	mov esi, IFTRUE
  6083 00004884 01C6                <2> 	add esi, eax
  6084 00004886 8A06                <2> 	mov al, [esi]
  6085 00004888 3401                <2> 	xor al, 1
  6086 0000488A 8806                <2> 	mov [esi], al
  6087 0000488C C3                  <2> 	ret 
  6088                              <1> %include 'source/programs/exit.asm'
  6089 0000488D FF2C6578697400      <2> db 255,44,"exit",0
  6090 00004894 803D[18C00300]01    <2> 	cmp byte [ranboot], 1
  6091 0000489B 0F8443E4FFFF        <2> 	je near returnfromexp
  6092 000048A1 E92EE3FFFF          <2> 	jmp nobootfile
  6093                              <1> %include 'source/programs/fi.asm'
  6094 000048A6 FF2C666900          <2> 	db 255,44,"fi",0
  6095 000048AB 30C0                <2> 	xor al, al
  6096 000048AD 3805[82C00300]      <2> 	cmp [BATCHISON], al
  6097 000048B3 0F84A9F1FFFF        <2> 	je near notbatch
  6098 000048B9 B001                <2> fi:	mov al, 1
  6099 000048BB 2805[19C00300]      <2> 	sub [IFON],al
  6100 000048C1 C3                  <2> 	ret 
  6101                              <1> %ifdef gui.included
  6102                              <1> 	%include 'source/programs/gui.asm'
  6103 000048C2 FF2C67756900        <2> db 255,44,"gui",0
  6104                              <2> guiswitcher:
  6105 000048C8 8B35[EB2F0000]      <2> 	mov esi, [currentcommandloc]
  6106 000048CE 83C604              <2> 	add esi, 4
  6107 000048D1 31C9                <2> 	xor ecx, ecx
  6108 000048D3 803E00              <2> 	cmp byte [esi], 0
  6109 000048D6 7407                <2> 	je .nomodepref
  6110 000048D8 E84EEAFFFF          <2> 	call cnvrthextxt ;switches arg on cline to vesa mode in ecx
  6111 000048DD EB07                <2> 	jmp .modepref
  6112                              <2> .nomodepref:
  6113 000048DF 51                  <2> 	push ecx
  6114 000048E0 E8A3D5FFFF          <2> 	call clear
  6115 000048E5 59                  <2> 	pop ecx
  6116                              <2> .modepref:
  6117 000048E6 66C705[960D0000]-   <2> 	mov word [realmodeptr], guiswitch
  6118 000048ED [7D56]              <2>
  6119 000048EF E896C3FFFF          <2> 	call realmode
  6120                              <2> guiswitchret:
  6121 000048F4 65803D[18960000]01  <2> 	cmp byte [gs:guion], 1
  6122 000048FC 7401                <2> 	je .cont
  6123 000048FE C3                  <2> 	ret
  6124                              <2> .cont:
  6125 000048FF BF[59580000]        <2> 	mov edi, VBEMODEBLOCK
  6126                              <2> .loop:
  6127 00004904 658B07              <2> 	mov eax, [gs:edi]
  6128 00004907 8907                <2> 	mov [edi], eax
  6129 00004909 47                  <2> 	inc edi
  6130 0000490A 81FF[5D5B0000]      <2> 	cmp edi, VBEEND
  6131 00004910 72F2                <2> 	jb .loop
  6132 00004912 A1[815A0000]        <2> 	mov eax, [physbaseptr]
  6133 00004917 8B1D[33020000]      <2> 	mov ebx, [basecache]
  6134 0000491D C1E304              <2> 	shl ebx, 4
  6135 00004920 29D8                <2> 	sub eax, ebx
  6136 00004922 A3[815A0000]        <2> 	mov [physbaseptr], eax
  6137 00004927 C605[49240000]00    <2> 	mov byte [termguion], 0
  6138 0000492E BE[9CD80300]        <2> 	mov esi, graphicstable
  6139 00004933 30C0                <2> 	xor al, al
  6140                              <2> .clear:
  6141 00004935 8806                <2> 	mov [esi], al
  6142 00004937 46                  <2> 	inc esi
  6143 00004938 81FE[9CDA0300]      <2> 	cmp esi, graphicstableend
  6144 0000493E 72F5                <2> 	jb .clear
  6145 00004940 E8982B0000          <2> 	call guisetup
  6146                              <2> 	;The next few lines center a window that is 3/4ths of the full screen
  6147 00004945 668B15[6B5A0000]    <2> 	mov dx, [resolutionx]
  6148 0000494C 668B0D[6D5A0000]    <2> 	mov cx, [resolutiony]
  6149 00004953 6689D3              <2> 	mov bx, dx
  6150 00004956 6689C8              <2> 	mov ax, cx
  6151 00004959 66D1EB              <2> 	shr bx, 1
  6152 0000495C 66D1E8              <2> 	shr ax, 1
  6153 0000495F 6689DA              <2> 	mov dx, bx
  6154 00004962 66D1EA              <2> 	shr dx, 1
  6155 00004965 6689C1              <2> 	mov cx, ax
  6156 00004968 66D1E9              <2> 	shr cx, 1
  6157 0000496B 6601D3              <2> 	add bx, dx
  6158 0000496E 6601C8              <2> 	add ax, cx
  6159 00004971 66D1E9              <2> 	shr cx, 1
  6160 00004974 66C1EB03            <2> 	shr bx, 3
  6161 00004978 66C1E303            <2> 	shl bx, 3
  6162 0000497C 66C1E804            <2> 	shr ax, 4
  6163 00004980 66C1E004            <2> 	shl ax, 4
  6164 00004984 66891D[E6760000]    <2> 	mov [termwindow], bx
  6165 0000498B 66A3[E8760000]      <2> 	mov [termwindow + 2], ax	;the previous lines of code make a large terminal window that is 4 characters smaller than the screen
  6166 00004991 BE[E6760000]        <2> 	mov esi, termwindow
  6167 00004996 31DB                <2> 	xor ebx, ebx
  6168 00004998 6631C0              <2> 	xor ax, ax
  6169 0000499B E864320000          <2> 	call showwindow
  6170 000049A0 E8B9110000          <2> 	call cursorgui
  6171 000049A5 E8DED4FFFF          <2> 	call clear
  6172 000049AA C3                  <2> 	ret
  6173                              <2> 	
  6174                              <1> %endif
  6175                              <1> %include 'source/programs/help.asm'
  6176 000049AB FF2C68656C7000      <2> db 255,44,"help",0
  6177                              <2> lscmd:	
  6178 000049B2 B00D                <2> 		mov al, 13
  6179 000049B4 E892DAFFFF          <2> 		call prcharq
  6180 000049B9 BE[23340000]        <2> 		mov esi, progstart
  6181 000049BE BB[7D560000]        <2> 		mov ebx, progend
  6182 000049C3 BE[08BA0300]        <2> dir:	mov esi, fileindex
  6183 000049C8 8A06                <2> 	dirnxt:	mov al, [esi]
  6184 000049CA 30E4                <2> 		xor ah, ah
  6185 000049CC 3CFF                <2> 		cmp al, 255
  6186 000049CE 7415                <2> 		je dirfnd
  6187 000049D0 46                  <2> 		inc esi
  6188 000049D1 81FE[08BE0300]      <2> 		cmp esi,  fileindexend
  6189 000049D7 7339                <2> 		jae dirdn
  6190 000049D9 EBED                <2> 		jmp dirnxt
  6191                              <2> 	dirfnd3:
  6192 000049DB 46                  <2> 		inc esi
  6193 000049DC 81FE[08BE0300]      <2> 		cmp esi, fileindexend
  6194 000049E2 76E4                <2> 		jbe dirnxt
  6195 000049E4 4E                  <2> 		dec esi
  6196 000049E5 46                  <2> 	dirfnd:	inc esi
  6197 000049E6 8A06                <2> 		mov al, [esi]
  6198 000049E8 30E4                <2> 		xor ah, ah
  6199 000049EA 3C2C                <2> 		cmp al, 44
  6200 000049EC 740B                <2> 		je dirfnd2
  6201 000049EE 46                  <2> 		inc esi
  6202 000049EF 81FE[08BE0300]      <2> 		cmp esi,  fileindexend
  6203 000049F5 731B                <2> 		jae dirdn
  6204 000049F7 EBCF                <2> 		jmp dirnxt
  6205 000049F9 46                  <2> 	dirfnd2: inc esi
  6206 000049FA E8BCD3FFFF          <2> 		call printquiet
  6207 000049FF 56                  <2> 		push esi
  6208 00004A00 B009                <2> 		mov al, 9
  6209 00004A02 E844DAFFFF          <2> 		call prcharq
  6210 00004A07 5E                  <2> 		pop esi
  6211 00004A08 81FE[08BE0300]      <2> 		cmp esi,  fileindexend
  6212 00004A0E 7302                <2> 		jae dirdn
  6213 00004A10 EBB6                <2> 		jmp dirnxt
  6214 00004A12 BE[F3950000]        <2> 	dirdn:	mov esi, line
  6215 00004A17 E8C0D3FFFF          <2> 			call print
  6216 00004A1C C3                  <2> 			ret
  6217 00004A1D 00                  <2> currentdir db 0
  6218                              <1> %include 'source/programs/if.asm'
  6219 00004A1E FF2C696600          <2> 	db 255,44,"if",0
  6220 00004A23 30C0                <2> ifcmd:	xor al, al
  6221 00004A25 3805[82C00300]      <2> 	cmp [BATCHISON], al
  6222 00004A2B 0F8431F0FFFF        <2> 	je near notbatch
  6223 00004A31 8B1D[EB2F0000]      <2> 	mov ebx, [currentcommandloc]
  6224 00004A37 83C303              <2> 	add ebx, 3
  6225 00004A3A 89DE                <2> 	mov esi, ebx
  6226 00004A3C 8A06                <2> chkeqsn: mov al, [esi]
  6227 00004A3E 3C00                <2> 	cmp al, 0
  6228 00004A40 0F841CF0FFFF        <2> 	je near notbatch
  6229 00004A46 3C3D                <2> 	cmp al, '='
  6230 00004A48 0F8403000000        <2> 	je near chkeqdn
  6231 00004A4E 46                  <2> 	inc esi
  6232 00004A4F EBEB                <2> 	jmp chkeqsn
  6233 00004A51 B000                <2> chkeqdn: mov al, 0 
  6234 00004A53 8806                <2> 	mov [esi], al
  6235 00004A55 46                  <2> 	inc esi
  6236 00004A56 E894E5FFFF          <2> 	call tester
  6237 00004A5B 3C01                <2> 	cmp al, 1
  6238 00004A5D 0F8402000000        <2> 	je near trueif
  6239 00004A63 EB1C                <2> 	jmp falseif
  6240 00004A65 31C0                <2> trueif:	xor eax, eax
  6241 00004A67 A0[19C00300]        <2> 	mov al, [IFON]
  6242 00004A6C FEC0                <2> 	inc al
  6243 00004A6E A2[19C00300]        <2> 	mov [IFON], al
  6244 00004A73 30E4                <2> 	xor ah, ah
  6245 00004A75 BE[1AC00300]        <2> 	mov esi, IFTRUE
  6246 00004A7A 01C6                <2> 	add esi, eax
  6247 00004A7C B401                <2> 	mov ah, 1
  6248 00004A7E 8826                <2> 	mov [esi], ah
  6249 00004A80 C3                  <2> 	ret 
  6250 00004A81 31C0                <2> falseif: xor eax, eax
  6251 00004A83 A0[19C00300]        <2> 	mov al, [IFON]
  6252 00004A88 FEC0                <2> 	inc al
  6253 00004A8A A2[19C00300]        <2> 	mov [IFON], al
  6254 00004A8F 30E4                <2> 	xor ah, ah
  6255 00004A91 BE[1AC00300]        <2> 	mov esi, IFTRUE
  6256 00004A96 01C6                <2> 	add esi, eax
  6257 00004A98 30E4                <2> 	xor ah, ah
  6258 00004A9A 8826                <2> 	mov [esi], ah
  6259 00004A9C C3                  <2> 	ret 
  6260                              <1> %ifdef network.included
  6261                              <1> 	%include 'source/programs/ipconfig.asm'
  6262 00004A9D FF2C6970636F6E6669- <2> db 255,44,"ipconfig",0
  6263 00004AA6 6700                <2>
  6264                              <2> ifconfig:
  6265 00004AA8 8B35[EB2F0000]      <2> 	mov esi, [currentcommandloc]
  6266 00004AAE 83C609              <2> 	add esi, 9
  6267 00004AB1 803E00              <2> 	cmp byte [esi], 0
  6268 00004AB4 740B                <2> 	je .noip
  6269 00004AB6 E81C4A0000          <2> 	call strtoip
  6270 00004ABB 890D[A8950000]      <2> 	mov [sysip], ecx
  6271                              <2> .noip:
  6272                              <2> %ifdef ne2000.included
  6273 00004AC1 803D[E6910000]01    <2> 	cmp byte [ne2000.nicconfig], 1
  6274 00004AC8 7519                <2> 	jne .none2000
  6275 00004ACA BE[E7910000]        <2> 	mov esi, ne2000.name
  6276 00004ACF E808D3FFFF          <2> 	call print
  6277 00004AD4 B9[0A920000]        <2> 	mov ecx, ne2000.mac
  6278 00004AD9 E8694A0000          <2> 	call showmac
  6279 00004ADE E8F4D2FFFF          <2> 	call printline
  6280                              <2> .none2000:
  6281                              <2> %endif
  6282                              <2> %ifdef rtl8139.included
  6283 00004AE3 803D[768B0000]01    <2> 	cmp byte [rtl8139.nicconfig], 1
  6284 00004AEA 7519                <2> 	jne .nortl8139
  6285 00004AEC BE[7D8B0000]        <2> 	mov esi, rtl8139.name
  6286 00004AF1 E8E6D2FFFF          <2> 	call print
  6287 00004AF6 B9[778B0000]        <2> 	mov ecx, rtl8139.mac
  6288 00004AFB E8474A0000          <2> 	call showmac
  6289 00004B00 E8D2D2FFFF          <2> 	call printline
  6290                              <2> .nortl8139:
  6291                              <2> %endif
  6292                              <2> %ifdef rtl8169.included
  6293 00004B05 803D[538D0000]01    <2> 	cmp byte [rtl8169.nicconfig], 1
  6294 00004B0C 7519                <2> 	jne .nortl8169
  6295 00004B0E BE[5A8D0000]        <2> 	mov esi, rtl8169.name
  6296 00004B13 E8C4D2FFFF          <2> 	call print
  6297 00004B18 B9[548D0000]        <2> 	mov ecx, rtl8169.mac
  6298 00004B1D E8254A0000          <2> 	call showmac
  6299 00004B22 E8B0D2FFFF          <2> 	call printline
  6300                              <2> .nortl8169:
  6301                              <2> %endif
  6302                              <2> %ifdef i8254x.included
  6303 00004B27 803D[EA930000]01    <2> 	cmp byte [i8254x.nicconfig], 1
  6304 00004B2E 7519                <2> 	jne .noi8254x
  6305 00004B30 BE[F1930000]        <2> 	mov esi, i8254x.name
  6306 00004B35 E8A2D2FFFF          <2> 	call print
  6307 00004B3A B9[EB930000]        <2> 	mov ecx, i8254x.mac
  6308 00004B3F E8034A0000          <2> 	call showmac
  6309 00004B44 E88ED2FFFF          <2> 	call printline
  6310                              <2> .noi8254x:
  6311                              <2> %endif
  6312 00004B49 8B0D[A8950000]      <2> 	mov ecx, [sysip]
  6313 00004B4F E8C6490000          <2> 	call showip
  6314 00004B54 E87ED2FFFF          <2> 	call printline
  6315 00004B59 C3                  <2> 	ret
  6316                              <2> 	
  6317                              <1> %endif
  6318                              <1> %include 'source/programs/keycode.asm'
  6319 00004B5A FF2C6B6579636F6465- <2> db 255,44,"keycode",0
  6320 00004B63 00                  <2>
  6321                              <2> keycode:
  6322 00004B64 66C705[1C240000]00- <2> 	mov word [trans], 0
  6323 00004B6C 00                  <2>
  6324 00004B6D C605[806C0000]00    <2> 	mov byte [threadson], 0
  6325                              <2> %ifdef io.serial
  6326                              <2> .noserial:
  6327                              <2> 	hlt
  6328                              <2> 	mov dx, [serial.address]
  6329                              <2> 	in al, dx
  6330                              <2> 	cmp al, 0
  6331                              <2> 	je .noserial
  6332                              <2> 	mov cl, al
  6333                              <2> 	call showhexsmall
  6334                              <2> 	cmp al, 0x1B
  6335                              <2> 	jne .noserial
  6336                              <2> 	in al, dx
  6337                              <2> 	mov cl, al
  6338                              <2> 	call showhexsmall
  6339                              <2> 	cmp cl, 0x5B
  6340                              <2> 	je .noserial
  6341                              <2> 	ret
  6342                              <2> %else
  6343 00004B74 E8DF150000          <2> 	call getkey
  6344 00004B79 31C0                <2> 	xor eax, eax
  6345 00004B7B 31C9                <2> 	xor ecx, ecx
  6346 00004B7D 8A0D[35610000]      <2> 	mov cl, [specialkey]
  6347 00004B83 80F900              <2> 	cmp cl, 0
  6348 00004B86 0F8405000000        <2> 	je near .nospecialkeycode
  6349 00004B8C E848E6FFFF          <2> 	call showhexsmall
  6350                              <2> .nospecialkeycode:
  6351 00004B91 668B0D[1A240000]    <2> 	mov cx, [lastkey + 2]
  6352 00004B98 E83CE6FFFF          <2> 	call showhexsmall
  6353 00004B9D 80F901              <2> 	cmp cl, 1
  6354 00004BA0 75C2                <2> 	jne keycode
  6355 00004BA2 C3                  <2> 	ret
  6356                              <2> %endif
  6357                              <1> %ifdef gui.included
  6358                              <1> 	%include 'source/programs/line.asm'
  6359 00004BA3 FF2C6C696E6500      <2> db 255,44,"line",0
  6360                              <2> linetester:
  6361 00004BAA 803D[18960000]00    <2> 	cmp byte [guion], 0
  6362 00004BB1 0F841B000000        <2> 	je near .done
  6363 00004BB7 668B35[58020000]    <2> 	mov si, [timenanoseconds + 2];essentially load a random value
  6364 00004BBE BB38000000          <2> 	mov ebx, 28*2;the line test draws ~28/6 times more lines in a 4:3 display mode than circles
  6365 00004BC3 E865000000          <2> 	call .circletest
  6366 00004BC8 BB0C000000          <2> 	mov ebx, 6*2 ;this makes them draw the same amount of lines as circles
  6367 00004BCD E801000000          <2> 	call .linetest
  6368                              <2> .done:
  6369 00004BD2 C3                  <2> 	ret
  6370                              <2> 
  6371                              <2> .linetest:
  6372 00004BD3 53                  <2> 	push ebx
  6373 00004BD4 E8D0000000          <2> 	call .stime
  6374 00004BD9 5B                  <2> 	pop ebx
  6375 00004BDA 31FF                <2> 	xor edi, edi
  6376                              <2> .ltlp:
  6377 00004BDC 53                  <2> 	push ebx
  6378 00004BDD E812010000          <2> 	call .st
  6379 00004BE2 66F7D6              <2> 	not si
  6380 00004BE5 E80A010000          <2> 	call .st
  6381 00004BEA 5B                  <2> 	pop ebx
  6382 00004BEB 66F7D6              <2> 	not si
  6383 00004BEE 660335[56020000]    <2> 	add si, [timenanoseconds]
  6384 00004BF5 4B                  <2> 	dec ebx
  6385 00004BF6 83FB00              <2> 	cmp ebx, 0
  6386 00004BF9 77E1                <2> 	ja .ltlp
  6387 00004BFB E8C1000000          <2> 	call .etime
  6388 00004C00 53                  <2> 	push ebx	
  6389 00004C01 57                  <2> 	push edi
  6390 00004C02 E8CB260000          <2> 	call guiclear
  6391 00004C07 E847270000          <2> 	call reloadallgraphics
  6392 00004C0C 59                  <2> 	pop ecx
  6393 00004C0D E88AE6FFFF          <2> 	call showdec
  6394 00004C12 BE[334D0000]        <2> 	mov esi, .msg
  6395 00004C17 E8C0D1FFFF          <2> 	call print
  6396 00004C1C 59                  <2> 	pop ecx
  6397 00004C1D E87AE6FFFF          <2> 	call showdec
  6398 00004C22 BE[5F4D0000]        <2> 	mov esi, .msgtime
  6399 00004C27 E8B0D1FFFF          <2> 	call print
  6400 00004C2C C3                  <2> 	ret
  6401                              <2> 	
  6402                              <2> .circletest:
  6403 00004C2D 53                  <2> 	push ebx
  6404 00004C2E E876000000          <2> 	call .stime
  6405 00004C33 5B                  <2> 	pop ebx
  6406 00004C34 31FF                <2> 	xor edi, edi
  6407                              <2> .ctlp:
  6408 00004C36 53                  <2> 	push ebx
  6409 00004C37 668B0D[6D5A0000]    <2> 	mov cx, [resolutiony]
  6410 00004C3E 66D1E9              <2> 	shr cx, 1
  6411 00004C41 668B15[6B5A0000]    <2> 	mov dx, [resolutionx]
  6412 00004C48 66D1EA              <2> 	shr dx, 1
  6413 00004C4B 6689C8              <2> 	mov ax, cx
  6414                              <2> .circle:
  6415 00004C4E 60                  <2> 	pusha
  6416 00004C4F E817210000          <2> 	call drawcircle
  6417 00004C54 61                  <2> 	popa
  6418 00004C55 6648                <2> 	dec ax
  6419 00004C57 47                  <2> 	inc edi
  6420 00004C58 6683F801            <2> 	cmp ax, 1
  6421 00004C5C 77F0                <2> 	ja .circle
  6422 00004C5E 66F7D6              <2> 	not si
  6423                              <2> .circle2:
  6424 00004C61 60                  <2> 	pusha
  6425 00004C62 E804210000          <2> 	call drawcircle
  6426 00004C67 61                  <2> 	popa
  6427 00004C68 47                  <2> 	inc edi
  6428 00004C69 6640                <2> 	inc ax
  6429 00004C6B 6639C8              <2> 	cmp ax, cx
  6430 00004C6E 76F1                <2> 	jbe .circle2
  6431 00004C70 5B                  <2> 	pop ebx
  6432 00004C71 66F7D6              <2> 	not si
  6433 00004C74 660335[56020000]    <2> 	add si, [timenanoseconds]
  6434 00004C7B 4B                  <2> 	dec ebx
  6435 00004C7C 83FB00              <2> 	cmp ebx, 0
  6436 00004C7F 77B5                <2> 	ja .ctlp
  6437 00004C81 E83B000000          <2> 	call .etime
  6438 00004C86 53                  <2> 	push ebx
  6439 00004C87 57                  <2> 	push edi
  6440 00004C88 59                  <2> 	pop ecx
  6441 00004C89 E80EE6FFFF          <2> 	call showdec
  6442 00004C8E BE[484D0000]        <2> 	mov esi, .msgcircle
  6443 00004C93 E844D1FFFF          <2> 	call print
  6444 00004C98 59                  <2> 	pop ecx
  6445 00004C99 E8FEE5FFFF          <2> 	call showdec
  6446 00004C9E BE[5F4D0000]        <2> 	mov esi, .msgtime
  6447 00004CA3 E834D1FFFF          <2> 	call print
  6448 00004CA8 C3                  <2> 	ret
  6449                              <2> 	
  6450                              <2> .stime:
  6451 00004CA9 F4                  <2> 	hlt
  6452 00004CAA A1[52020000]        <2> 	mov eax, [timeseconds]
  6453 00004CAF 8B1D[56020000]      <2> 	mov ebx, [timenanoseconds]
  6454 00004CB5 A3[6E4D0000]        <2> 	mov [.time], eax
  6455 00004CBA 891D[724D0000]      <2> 	mov [.time + 4], ebx
  6456 00004CC0 C3                  <2> 	ret
  6457                              <2> 	
  6458                              <2> .etime:
  6459 00004CC1 A1[52020000]        <2> 	mov eax, [timeseconds]
  6460 00004CC6 8B1D[56020000]      <2> 	mov ebx, [timenanoseconds]
  6461 00004CCC 8B0D[6E4D0000]      <2> 	mov ecx, [.time]
  6462 00004CD2 8B15[724D0000]      <2> 	mov edx, [.time + 4]
  6463 00004CD8 C1EA0A              <2> 	shr edx, 10
  6464 00004CDB C1EB0A              <2> 	shr ebx, 10
  6465 00004CDE 29C8                <2> 	sub eax, ecx
  6466 00004CE0 83F800              <2> 	cmp eax, 0
  6467 00004CE3 740C                <2> 	je .notclp
  6468                              <2> .tclp:
  6469 00004CE5 81C340420F00        <2> 	add ebx, 1000000
  6470 00004CEB 48                  <2> 	dec eax
  6471 00004CEC 83F800              <2> 	cmp eax, 0
  6472 00004CEF 75F4                <2> 	jne .tclp
  6473                              <2> .notclp:
  6474 00004CF1 29D3                <2> 	sub ebx, edx
  6475 00004CF3 C3                  <2> 	ret
  6476                              <2> 	
  6477                              <2> .st:
  6478 00004CF4 6631C0              <2> 	xor ax, ax
  6479 00004CF7 6631DB              <2> 	xor bx, bx
  6480 00004CFA 668B0D[6D5A0000]    <2> 	mov cx, [resolutiony]
  6481 00004D01 668B15[6B5A0000]    <2> 	mov dx, [resolutionx]
  6482                              <2> .lp:
  6483 00004D08 60                  <2> 	pusha
  6484 00004D09 E8B1240000          <2> 	call drawline
  6485 00004D0E 61                  <2> 	popa
  6486                              <2> .noswitch:
  6487 00004D0F 47                  <2> 	inc edi
  6488 00004D10 6643                <2> 	inc bx
  6489 00004D12 664A                <2> 	dec dx
  6490 00004D14 6683FB00            <2> 	cmp bx, 0
  6491 00004D18 74EE                <2> 	je .lp
  6492 00004D1A 6683FA00            <2> 	cmp dx, 0
  6493 00004D1E 75E8                <2> 	jne .lp
  6494                              <2> .lp2:
  6495 00004D20 60                  <2> 	pusha
  6496 00004D21 E899240000          <2> 	call drawline
  6497 00004D26 61                  <2> 	popa
  6498 00004D27 47                  <2> 	inc edi
  6499 00004D28 6640                <2> 	inc ax
  6500 00004D2A 6649                <2> 	dec cx
  6501 00004D2C 6683F900            <2> 	cmp cx, 0
  6502 00004D30 75EE                <2> 	jne .lp2
  6503 00004D32 C3                  <2> 	ret
  6504                              <2> 	
  6505 00004D33 6C696E657320776572- <2> .msg db "lines were drawn in ",0
  6506 00004D3C 6520647261776E2069- <2>
  6507 00004D45 6E2000              <2>
  6508 00004D48 636972636C65732077- <2> .msgcircle db "circles were drawn in ",0
  6509 00004D51 65726520647261776E- <2>
  6510 00004D5A 20696E2000          <2>
  6511 00004D5F 6D6963726F7365636F- <2> .msgtime db "microseconds.",10,0
  6512 00004D68 6E64732E0A00        <2>
  6513 00004D6E 0000000000000000    <2> .time dd 0,0	
  6514                              <1> %endif
  6515                              <1> %include 'source/programs/logout.asm'
  6516 00004D76 FF2C6C6F676F757400  <2> 	db 255,44,"logout",0
  6517 00004D7F E90FDEFFFF          <2> 	jmp os
  6518                              <1> %include 'source/programs/loop.asm'
  6519 00004D84 FF2C6C6F6F7000      <2> 	db 255,44,"loop",0
  6520 00004D8B 803D[83C00300]00    <2> 	cmp byte [LOOPON], 0
  6521 00004D92 0F8501000000        <2> 	jne near filoop
  6522 00004D98 C3                  <2> 	ret
  6523 00004D99 8B35[84C00300]      <2> filoop: mov esi, [LOOPPOS]
  6524 00004D9F FE0D[19C00300]      <2> 	dec byte [IFON]
  6525 00004DA5 C605[83C00300]00    <2> 	mov byte [LOOPON], 0
  6526 00004DAC 8935[7EC00300]      <2> 	mov [BATCHPOS], esi
  6527 00004DB2 8935[96390000]      <2> 	mov [batchedi], esi
  6528 00004DB8 C3                  <2> 	ret 
  6529                              <1> %ifdef disk.none
  6530                              <1> %else
  6531                              <1> 	%include 'source/programs/ls.asm'
  6532 00004DB9 FF2C6C7300          <2> db 255,44,"ls",0
  6533 00004DBE BE[72980300]        <2> 		mov esi, diskfileindex
  6534                              <2> 	diskindexdir:
  6535 00004DC3 803E5F              <2> 		cmp byte [esi], '_'
  6536 00004DC6 743D                <2> 		je nextdiskindexdir
  6537 00004DC8 E8EECFFFFF          <2> 		call printquiet
  6538 00004DCD 56                  <2> 		push esi
  6539 00004DCE BE[224E0000]        <2> 		mov esi, disktab
  6540 00004DD3 E8E3CFFFFF          <2> 		call printquiet
  6541 00004DD8 5E                  <2> 		pop esi
  6542 00004DD9 8B4E05              <2> 		mov ecx, [esi + 5]
  6543 00004DDC C605[D8310000]05    <2> 		mov byte [firsthexshown], 5
  6544 00004DE3 E8B4E4FFFF          <2> 		call showdec
  6545 00004DE8 56                  <2> 		push esi
  6546 00004DE9 BE[F3950000]        <2> 		mov esi, line
  6547 00004DEE E8C8CFFFFF          <2> 		call printquiet
  6548 00004DF3 5E                  <2> 		pop esi
  6549 00004DF4 83C609              <2> 		add esi, 9
  6550 00004DF7 81FE[F3990300]      <2> 		cmp esi, enddiskfileindex
  6551 00004DFD 72C4                <2> 		jb diskindexdir
  6552 00004DFF E81DDBFFFF          <2> 		call termcopy
  6553 00004E04 C3                  <2> 		ret
  6554                              <2> 	nextdiskindexdir:
  6555 00004E05 46                  <2> 		inc esi
  6556 00004E06 803E00              <2> 		cmp byte [esi], 0
  6557 00004E09 75FA                <2> 		jne nextdiskindexdir
  6558 00004E0B 83C609              <2> 		add esi, 9
  6559 00004E0E 81FE[F3990300]      <2> 		cmp esi, enddiskfileindex
  6560 00004E14 72AD                <2> 		jb diskindexdir
  6561 00004E16 E806DBFFFF          <2> 		call termcopy
  6562 00004E1B C3                  <2> 		ret
  6563                              <2> 		
  6564 00004E1C 4469736B2000        <2> 		diskmsg db "Disk ",0
  6565 00004E22 0D09090900          <2> 		disktab db 13,9,9,9,0
  6566                              <1> %endif
  6567                              <1> %include 'source/programs/memory.asm'
  6568 00004E27 FF2C6D656D6F727900  <2> db 255,44,"memory",0
  6569 00004E30 BE[2E960000]        <2> 	mov esi, memlistbuf
  6570 00004E35 31FF                <2> 	xor edi, edi
  6571 00004E37 668B3D[6E980000]    <2> 	mov di, [memlistend]
  6572 00004E3E 01F7                <2> 	add edi, esi
  6573                              <2> printmemmap:
  6574 00004E40 8B0E                <2> 	mov ecx, [esi]
  6575 00004E42 E8A6E3FFFF          <2> 	call showhex
  6576 00004E47 83C608              <2> 	add esi, 8
  6577 00004E4A 8B0E                <2> 	mov ecx, [esi]
  6578 00004E4C E89CE3FFFF          <2> 	call showhex
  6579 00004E51 83C608              <2> 	add esi, 8
  6580 00004E54 8B0E                <2> 	mov ecx, [esi]
  6581 00004E56 E892E3FFFF          <2> 	call showhex
  6582 00004E5B 83C608              <2> 	add esi, 8
  6583 00004E5E 57                  <2> 	push edi
  6584 00004E5F 56                  <2> 	push esi
  6585 00004E60 E872CFFFFF          <2> 	call printline
  6586 00004E65 5E                  <2> 	pop esi
  6587 00004E66 5F                  <2> 	pop edi
  6588 00004E67 39FE                <2> 	cmp esi, edi
  6589 00004E69 72D5                <2> 	jb printmemmap
  6590 00004E6B C3                  <2> 	ret
  6591                              <2> 	
  6592                              <1> %include 'source/programs/pci.asm'
  6593 00004E6C FF2C70636900        <2> db 255,44,"pci",0
  6594 00004E72 E842190000          <2> 	call pcidump
  6595 00004E77 C3                  <2> 	ret 
  6596                              <1> %ifdef network.included
  6597                              <1> 	%include 'source/programs/ping.asm'
  6598 00004E78 FF2C70696E6700      <2> db 255,44,"ping",0
  6599                              <2> ping:
  6600 00004E7F 8B35[EB2F0000]      <2> 	mov esi, [currentcommandloc]
  6601 00004E85 83C605              <2> 	add esi, 5
  6602 00004E88 E84A460000          <2> 	call strtoip
  6603 00004E8D 890D[134F0000]      <2> 	mov [.destip], ecx
  6604 00004E93 E882460000          <2> 	call showip
  6605 00004E98 8B0D[A8950000]      <2> 	mov ecx, [sysip]
  6606 00004E9E 890D[0F4F0000]      <2> 	mov [.sourceip], ecx
  6607 00004EA4 31C0                <2> 	xor eax, eax
  6608 00004EA6 31DB                <2> 	xor ebx, ebx
  6609 00004EA8 66A3[0D4F0000]      <2> 	mov [.checksum], ax
  6610 00004EAE 66A3[194F0000]      <2> 	mov [.icmpchecksum], ax
  6611 00004EB4 BF[034F0000]        <2> 	mov edi, .header
  6612 00004EB9 BE[174F0000]        <2> 	mov esi, .headerend
  6613 00004EBE E8EF450000          <2> 	call getchecksum
  6614 00004EC3 66890D[0D4F0000]    <2> 	mov [.checksum], cx
  6615 00004ECA BF[174F0000]        <2> 	mov edi, .icmp
  6616 00004ECF BE[3F4F0000]        <2> 	mov esi, .packetend
  6617 00004ED4 E8D9450000          <2> 	call getchecksum
  6618 00004ED9 66890D[194F0000]    <2> 	mov [.icmpchecksum], cx
  6619 00004EE0 BF[F54E0000]        <2> 	mov edi, .packet
  6620 00004EE5 BE[3F4F0000]        <2> 	mov esi, .packetend
  6621 00004EEA E8A2450000          <2> 	call sendpacket
  6622 00004EEF E8E3CEFFFF          <2> 	call printline
  6623 00004EF4 C3                  <2> 	ret
  6624                              <2> 	
  6625                              <2> 	
  6626                              <2> 	
  6627                              <2> .packet:
  6628 00004EF5 FFFFFFFFFFFF        <2> .destinationmac db 0xFF,0xFF,0xFF,0xFF,0xFF,0xFF
  6629 00004EFB 000000000000        <2> .sourcemac	db 0,0,0,0,0,0
  6630 00004F01 0800                <2> .ethertype	db 8,0	;ip is 0x800
  6631                              <2> .header:
  6632 00004F03 45                  <2> .version	db 0x45
  6633 00004F04 00                  <2> .services	db 0
  6634 00004F05 003C                <2> .length	db 0,0x3C
  6635 00004F07 0000                <2> .id		dw 0
  6636 00004F09 00                  <2> .flags	db 0
  6637 00004F0A 00                  <2> .fragment db 0
  6638 00004F0B 80                  <2> .ttl	db 128
  6639 00004F0C 01                  <2> .protocol db 1 ;ICMP
  6640 00004F0D 0000                <2> .checksum dw 0
  6641 00004F0F 00000000            <2> .sourceip dd 0
  6642 00004F13 00000000            <2> .destip dd 0
  6643                              <2> .headerend:
  6644                              <2> .icmp:
  6645 00004F17 08                  <2> .icmptype db 8 ;Ping request
  6646 00004F18 00                  <2> .icmpcode db 0
  6647 00004F19 0000                <2> .icmpchecksum dw 0
  6648 00004F1B 0001                <2> .icmpid db 0,1
  6649 00004F1D 0000                <2> .sequence dw 0
  6650 00004F1F 616263646566676869- <2> db "abcdefghijklmnopqrstuvwabcdefghi" ;this is what microsoft includes
  6651 00004F28 6A6B6C6D6E6F707172- <2>
  6652 00004F31 737475767761626364- <2>
  6653 00004F3A 6566676869          <2>
  6654                              <2> .packetend:
  6655                              <1> %endif
  6656                              <1> %ifdef disk.none
  6657                              <1> %else
  6658                              <1> 	%include 'source/programs/play.asm'
  6659 00004F3F FF2C706C61796100    <2> db 255,44,"playa",0
  6660 00004F47 8B3D[EB2F0000]      <2> 	mov edi, [currentcommandloc]
  6661 00004F4D 83C706              <2> 	add edi, 6
  6662 00004F50 E830000000          <2> 	call playasync
  6663 00004F55 C3                  <2> 	ret
  6664 00004F56 FF2C706C61792000    <2> db 255,44,"play ",0
  6665                              <2> play:
  6666 00004F5E 8B3D[EB2F0000]      <2> 	mov edi, [currentcommandloc]
  6667 00004F64 83C705              <2> 	add edi, 5
  6668 00004F67 E819000000          <2> 	call playasync
  6669                              <2> .waitforsound:
  6670 00004F6C F4                  <2> 	hlt
  6671                              <2> %ifdef sound.included
  6672 00004F6D A1[1F610000]        <2> 	mov eax, [Length0]
  6673 00004F72 660B05[23610000]    <2> 	or ax, [Length1]
  6674                              <2> %endif
  6675 00004F79 0A05[5A020000]      <2> 	or al, [soundon]
  6676 00004F7F 83F800              <2> 	cmp eax, 0
  6677 00004F82 75E8                <2> 	jne .waitforsound
  6678 00004F84 C3                  <2> 	ret
  6679                              <2> playasync:
  6680 00004F85 BE0000C000          <2> 	mov esi, 0xC00000
  6681 00004F8A E8481B0000          <2> 	call loadfile
  6682 00004F8F 81FA94010000        <2> 	cmp edx, 404
  6683 00004F95 743C                <2> 	je nosoundfound
  6684 00004F97 BB0000C000          <2> 	mov ebx, 0xC00000
  6685 00004F9C 817B0857415645      <2> 	cmp dword [ebx + 8], "WAVE"
  6686 00004FA3 0F8432010000        <2> 	je near wave_player
  6687 00004FA9 66813B534E          <2> 	cmp word [ebx], "SN"
  6688 00004FAE 7523                <2> 	jne nosoundfound
  6689 00004FB0 83C306              <2> 	add ebx, 6
  6690 00004FB3 891D[5D020000]      <2> 	mov [soundpos], ebx
  6691 00004FB9 035BFC              <2> 	add ebx, [ebx - 4]
  6692 00004FBC 891D[61020000]      <2> 	mov [soundendpos], ebx
  6693 00004FC2 66C705[5B020000]00- <2> 	mov word [soundrepititions], 0
  6694 00004FCA 00                  <2>
  6695 00004FCB C605[5A020000]01    <2> 	mov byte [soundon], 1
  6696 00004FD2 C3                  <2> 	ret
  6697                              <2> nosoundfound:
  6698 00004FD3 BE[F64F0000]        <2> 	mov esi, notfoundsound
  6699 00004FD8 E8FFCDFFFF          <2> 	call print
  6700 00004FDD 8B35[EB2F0000]      <2> 	mov esi, [currentcommandloc]
  6701 00004FE3 83C605              <2> 	add esi, 5
  6702 00004FE6 E8F1CDFFFF          <2> 	call print
  6703 00004FEB BE[C2950000]        <2> 	mov esi, notfound2
  6704 00004FF0 E8E7CDFFFF          <2> 	call print
  6705 00004FF5 C3                  <2> 	ret
  6706 00004FF6 706C61793A2000      <2> notfoundsound db "play: ",0
  6707                              <2> 
  6708                              <2> %ifdef sound.included
  6709                              <2> sbplay:
  6710 00004FFD BE0000C000          <2> 		mov esi, 0xC00000
  6711 00005002 89F3                <2> 		mov ebx, esi
  6712 00005004 83C62C              <2> 		add esi, WAVSTART
  6713 00005007 29F7                <2> 		sub edi, esi
  6714 00005009 66893D[23610000]    <2> 		mov [Length1], di
  6715 00005010 C1EF0F              <2> 		shr edi, 15
  6716 00005013 893D[1F610000]      <2> 		mov [Length0], edi
  6717 00005019 8B4B18              <2> 		mov ecx, [ebx + 24]
  6718 0000501C 890D[30610000]      <2> 		mov [Freq], ecx
  6719 00005022 31C0                <2> 		xor eax, eax
  6720 00005024 BA0000C000          <2> 		mov	edx, 0xC00000 ;physical location of sound
  6721 00005029 83C22C              <2> 		add edx, WAVSTART
  6722 0000502C 01D0                <2> 		add	eax, edx
  6723 0000502E 89C6                <2> 		mov esi, eax
  6724 00005030 31C9                <2> 		xor ecx, ecx
  6725 00005032 31DB                <2> 		xor ebx, ebx
  6726 00005034 66891D[2D610000]    <2> 		mov [SegLoc], bx
  6727 0000503B 81C300000800        <2> 		add ebx, 0x80000
  6728 00005041 66B9FFFF            <2> 		mov cx, 0xFFFF
  6729 00005045 6683FF00            <2> 		cmp di, 0
  6730 00005049 7520                <2> 		jne .autoinit
  6731 0000504B 668B0D[23610000]    <2> 		mov cx, [Length1]
  6732 00005052 C605[1E610000]01    <2> 		mov byte [OddLength], 1
  6733 00005059 6681F90080          <2> 		cmp cx, 32768
  6734 0000505E 730B                <2> 		jae .autoinit
  6735 00005060 C605[1E610000]00    <2> 		mov byte [OddLength], 0
  6736 00005067 66D1E1              <2> 		shl cx, 1
  6737 0000506A 47                  <2> 		inc edi
  6738                              <2> .autoinit:
  6739 0000506B 4F                  <2> 		dec edi
  6740 0000506C 893D[1F610000]      <2> 		mov [Length0], edi
  6741 00005072 66890D[23610000]    <2> 		mov [Length1], cx
  6742 00005079 66D1E9              <2> 		shr cx, 1
  6743 0000507C 6641                <2> 		inc cx
  6744 0000507E 01C8                <2> 		add eax, ecx
  6745 00005080 A3[25610000]        <2> 		mov [NextMemLoc], eax
  6746 00005085 8935[29610000]      <2> 		mov	[MemLoc], esi
  6747 0000508B E83A0F0000          <2> 		call DMACopy
  6748 00005090 31DB                <2> 		xor ebx, ebx
  6749 00005092 668B1D[2D610000]    <2> 		mov bx, [SegLoc]
  6750 00005099 31C9                <2> 		xor ecx, ecx
  6751 0000509B 668B0D[23610000]    <2> 		mov cx, [Length1]
  6752 000050A2 66D1E9              <2> 		shr cx, 1
  6753 000050A5 6641                <2> 		inc cx
  6754 000050A7 01CB                <2> 		add ebx, ecx
  6755 000050A9 66891D[2D610000]    <2> 		mov [SegLoc], bx
  6756 000050B0 81C300000800        <2> 		add ebx, 0x80000
  6757 000050B6 8B35[25610000]      <2> 		mov esi, [NextMemLoc]
  6758 000050BC 89F0                <2> 		mov eax, esi
  6759 000050BE 01C8                <2> 		add eax, ecx
  6760 000050C0 A3[25610000]        <2> 		mov [NextMemLoc], eax
  6761 000050C5 8935[29610000]      <2> 		mov	[MemLoc], esi
  6762 000050CB E8FA0E0000          <2> 		call DMACopy
  6763 000050D0 E8120F0000          <2> 		call DMAPlay
  6764 000050D5 E89C0F0000          <2> 		call PlayDSP
  6765 000050DA C3                  <2> 		ret
  6766                              <2> WAVSTART equ 44
  6767                              <2> wave_player:
  6768 000050DB 803D[34610000]01    <2> 	cmp byte [SoundBlaster], 1
  6769 000050E2 0F8415FFFFFF        <2> 	je near sbplay
  6770 000050E8 BE[F3500000]        <2> 	mov esi, nosoundblaster
  6771 000050ED E8EACCFFFF          <2> 	call print
  6772 000050F2 C3                  <2> 	ret
  6773                              <2> %else
  6774                              <2> 	wave_player:
  6775                              <2> 		mov esi, nosoundblaster
  6776                              <2> 		call print
  6777                              <2> 		ret
  6778                              <2> %endif
  6779 000050F3 4E6F20536F756E6420- <2> nosoundblaster db "No Sound Blaster detected.",10,0
  6780 000050FC 426C61737465722064- <2>
  6781 00005105 657465637465642E0A- <2>
  6782 0000510E 00                  <2>
  6783                              <1> %endif
  6784                              <1> %include 'source/programs/pwd.asm'
  6785 0000510F FF2C70776400        <2> db 255,44,"pwd",0
  6786 00005115 BE[14BE0300]        <2> 	mov esi, currentfolder
  6787 0000511A E89CCCFFFF          <2> 	call printquiet
  6788 0000511F E8B3CCFFFF          <2> 	call printline
  6789 00005124 C3                  <2> 	ret
  6790                              <2> 	
  6791                              <1> %include 'source/programs/reboot.asm'
  6792 00005125 FF2C7265626F6F7400  <2> 	db 255,44,"reboot",0
  6793 0000512E 0F011D[38510000]    <2> 		lidt [idtreboot]
  6794 00005135 CD00                <2> 		int 0
  6795 00005137 F4                  <2> 		hlt
  6796                              <2> 	
  6797 00005138 0000                <2> 	idtreboot dw 0
  6798 0000513A 00000000            <2> 			  dd 0
  6799                              <2> 
  6800                              <2> 	coldboot:
  6801 0000513E 66B84000            <2> 		MOV AX, 0040h
  6802 00005142 8EC0                <2> 		MOV ES, AX
  6803 00005144 2666C7057200000000- <2> 		MOV WORD [ES:00072h], 0h
  6804 0000514D 00                  <2>
  6805 0000514E EA00000000FFFF      <2> 		JMP 0FFFFh:0000h
  6806 00005155 CF                  <2> 		IRET
  6807                              <2> 
  6808                              <2> 	warmboot:
  6809 00005156 66B84000            <2> 		MOV AX, 0040h
  6810 0000515A 8EC0                <2> 		MOV ES, AX
  6811 0000515C 2666C7057200000034- <2> 		MOV WORD [ES:00072h], 01234h
  6812 00005165 12                  <2>
  6813 00005166 EA00000000FFFF      <2> 		JMP 0FFFFh:0000h
  6814 0000516D CF                  <2> 		IRET
  6815                              <2> 		
  6816                              <1> %include 'source/programs/reg.asm'
  6817 0000516E FF2C72656700        <2> db 255,44,"reg",0
  6818 00005174 CD03                <2> 	int 3
  6819 00005176 C3                  <2> 	ret 
  6820                              <1> %ifdef disk.none
  6821                              <1> %else
  6822                              <1> 	%include 'source/programs/show.asm'
  6823 00005177 FF2C73686F7700      <2> db 255,44,"show",0
  6824                              <2> showprog:
  6825 0000517E 8B3D[EB2F0000]      <2> 		mov edi, [currentcommandloc]
  6826 00005184 83C705              <2> 		add edi, 5
  6827 00005187 BE00004000          <2> 		mov esi, 0x400000
  6828 0000518C 803F26              <2> 		cmp byte [edi], '&'
  6829 0000518F 741B                <2> 		je .nullfile
  6830 00005191 BE00008000          <2> 		mov esi, 0x800000
  6831 00005196 E83C190000          <2> 		call loadfile
  6832 0000519B 81FA94010000        <2> 		cmp edx, 404
  6833 000051A1 0F847E000000        <2> 		je near filenotfound
  6834 000051A7 BE00008000          <2> 		mov esi, 0x800000
  6835                              <2> .nullfile:
  6836                              <2> %ifdef gui.included
  6837 000051AC 66813E424D          <2> 		cmp word [esi], "BM"
  6838 000051B1 740B                <2> 		je bmpfound
  6839                              <2> %endif
  6840 000051B3 E824CCFFFF          <2> 		call print
  6841 000051B8 E81ACCFFFF          <2> 		call printline
  6842 000051BD C3                  <2> 		ret
  6843                              <2> %ifdef gui.included
  6844                              <2> bmpfound:
  6845 000051BE 803D[18960000]00    <2> 		cmp byte [guion], 0
  6846 000051C5 0F8428000000        <2> 		je near noguibmp
  6847 000051CB BE00008000          <2> 		mov esi, 0x800000
  6848 000051D0 31C9                <2> 		xor ecx, ecx
  6849 000051D2 31D2                <2> 		xor edx, edx
  6850 000051D4 31C0                <2> 		xor eax, eax
  6851 000051D6 31DB                <2> 		xor ebx, ebx
  6852 000051D8 E8C81A0000          <2> 		call showbmp
  6853 000051DD 30C0                <2> 		xor al, al
  6854 000051DF B405                <2> 		mov ah, 5
  6855 000051E1 CD30                <2> 		int 30h
  6856 000051E3 E8EA200000          <2> 		call guiclear
  6857 000051E8 E8C51D0000          <2> 		call clearmousecursor
  6858 000051ED E861210000          <2> 		call reloadallgraphics
  6859 000051F2 C3                  <2> 		ret
  6860                              <2> noguibmp:
  6861 000051F3 BE[FE510000]        <2> 		mov esi, warnguimsg
  6862 000051F8 E8DFCBFFFF          <2> 		call print
  6863 000051FD C3                  <2> 		ret
  6864 000051FE 546869732063616E20- <2> warnguimsg db "This can not be done without the GUI.",10,0
  6865 00005207 6E6F7420626520646F- <2>
  6866 00005210 6E6520776974686F75- <2>
  6867 00005219 742074686520475549- <2>
  6868 00005222 2E0A00              <2>
  6869                              <2> %endif
  6870                              <2> 
  6871                              <2> filenotfound:
  6872 00005225 BE[58520000]        <2> 		mov esi, filenf
  6873 0000522A E8ADCBFFFF          <2> 		call print
  6874 0000522F 8B35[EB2F0000]      <2> 		mov esi, [currentcommandloc]
  6875                              <2> findfilenotfoundzero:
  6876 00005235 8A06                <2> 		mov al, [esi]
  6877 00005237 46                  <2> 		inc esi
  6878 00005238 3C00                <2> 		cmp al, 0
  6879 0000523A 7411                <2> 		je nofilenamenotfound
  6880 0000523C 81FE[88D80300]      <2> 		cmp esi, buftxtend
  6881 00005242 7309                <2> 		jae nofilenamenotfound
  6882 00005244 3C20                <2> 		cmp al, " "
  6883 00005246 75ED                <2> 		jne findfilenotfoundzero
  6884 00005248 E88FCBFFFF          <2> 		call print
  6885                              <2> nofilenamenotfound:
  6886 0000524D BE[63520000]        <2> 		mov esi, filenf2
  6887 00005252 E885CBFFFF          <2> 		call print
  6888 00005257 C3                  <2> 		ret
  6889 00005258 5468652066696C6520- <2> filenf db "The file ",34,0
  6890 00005261 2200                <2>
  6891 00005263 2220636F756C64206E- <2> filenf2 db 34," could not be found.",10,0
  6892 0000526C 6F7420626520666F75- <2>
  6893 00005275 6E642E0A00          <2>
  6894                              <1> %endif
  6895                              <1> %include 'source/programs/shush.asm'
  6896 0000527A FF2C736875736800    <2> db 255,44,"shush",0	;if you add 2 values it will switch size using the first as X in chars and the second as Y in chars
  6897                              <2> shushprog:
  6898                              <2> %ifdef gui.included
  6899 00005282 803D[18960000]00    <2> 	cmp byte [guion], 0
  6900 00005289 0F84B5000000        <2> 	je near .noswitchsize
  6901 0000528F 8B35[EB2F0000]      <2> 	mov esi, [currentcommandloc]
  6902 00005295 83C606              <2> 	add esi, 6
  6903 00005298 56                  <2> 	push esi
  6904 00005299 4E                  <2> 	dec esi
  6905                              <2> .findspace:
  6906 0000529A 46                  <2> 	inc esi
  6907 0000529B 8A06                <2> 	mov al, [esi]
  6908 0000529D 3C00                <2> 	cmp al, 0
  6909 0000529F 0F849F000000        <2> 	je near .noswitchsize
  6910 000052A5 3C58                <2> 	cmp al, "X"
  6911 000052A7 7408                <2> 	je .donefind
  6912 000052A9 3C78                <2> 	cmp al, "x"
  6913 000052AB 7404                <2> 	je .donefind
  6914 000052AD 3C20                <2> 	cmp al, " "
  6915 000052AF 75E9                <2> 	jne .findspace
  6916                              <2> .donefind:
  6917 000052B1 30C0                <2> 	xor al, al
  6918 000052B3 8806                <2> 	mov [esi], al
  6919 000052B5 46                  <2> 	inc esi
  6920 000052B6 89F7                <2> 	mov edi, esi
  6921 000052B8 E8AEE0FFFF          <2> 	call cnvrttxt
  6922 000052BD 89C8                <2> 	mov eax, ecx
  6923 000052BF 5E                  <2> 	pop esi
  6924 000052C0 50                  <2> 	push eax
  6925 000052C1 89F7                <2> 	mov edi, esi
  6926 000052C3 E8A3E0FFFF          <2> 	call cnvrttxt
  6927 000052C8 89CB                <2> 	mov ebx, ecx
  6928 000052CA 58                  <2> 	pop eax	
  6929 000052CB 6683FB00            <2> 	cmp bx, 0
  6930 000052CF 0F846F000000        <2> 	je near .noswitchsize
  6931 000052D5 6683F800            <2> 	cmp ax, 0
  6932 000052D9 0F8465000000        <2> 	je near .noswitchsize
  6933 000052DF 66C1E303            <2> 	shl bx, 3
  6934 000052E3 66C1E004            <2> 	shl ax, 4
  6935 000052E7 663B1D[6B5A0000]    <2> 	cmp bx, [resolutionx]
  6936 000052EE 7607                <2> 	jbe .nofixx
  6937 000052F0 668B1D[6B5A0000]    <2> 	mov bx, [resolutionx]
  6938                              <2> .nofixx:
  6939 000052F7 6683C010            <2> 	add ax, 16
  6940 000052FB 663B05[6D5A0000]    <2> 	cmp ax, [resolutiony]
  6941 00005302 7606                <2> 	jbe .nofixy
  6942 00005304 66A1[6D5A0000]      <2> 	mov ax, [resolutiony]
  6943                              <2> .nofixy:
  6944 0000530A 6683E810            <2> 	sub ax, 16
  6945 0000530E 6631C9              <2> 	xor cx, cx
  6946 00005311 6631D2              <2> 	xor dx, dx
  6947 00005314 66891D[E6760000]    <2> 	mov [termwindow], bx
  6948 0000531B 66A3[E8760000]      <2> 	mov [termwindow + 2], ax	;the previous lines of code make a large terminal window that is 4 characters smaller than the screen
  6949 00005321 BE[E6760000]        <2> 	mov esi, termwindow
  6950 00005326 31DB                <2> 	xor ebx, ebx
  6951 00005328 6631C0              <2> 	xor ax, ax
  6952 0000532B E8D4280000          <2> 	call showwindow
  6953 00005330 E89D1F0000          <2> 	call guiclear
  6954 00005335 E84ECBFFFF          <2> 	call clear
  6955 0000533A E814200000          <2> 	call reloadallgraphics
  6956 0000533F E8571D0000          <2> 	call switchmousepos2
  6957                              <2> .noswitchsize:
  6958                              <2> %endif
  6959 00005344 BE[4F530000]        <2> 	mov esi, shushmsg
  6960 00005349 E88ECAFFFF          <2> 	call print
  6961 0000534E C3                  <2> 	ret
  6962 0000534F 57656C636F6D652074- <2> 	shushmsg db "Welcome to the SollerOS Hardly Unix-Compatible Shell!",10,0
  6963 00005358 6F2074686520536F6C- <2>
  6964 00005361 6C65724F5320486172- <2>
  6965 0000536A 646C7920556E69782D- <2>
  6966 00005373 436F6D70617469626C- <2>
  6967 0000537C 65205368656C6C210A- <2>
  6968 00005385 00                  <2>
  6969                              <1> %include 'source/programs/system.asm'
  6970 00005386 FF2C73797374656D00  <2> 	db 255,44,"system",0
  6971 0000538F BE[9F540000]        <2> 	mov esi, kernelinfomsg
  6972 00005394 E822CAFFFF          <2> 	call printquiet
  6973 00005399 B9[72980300]        <2> 	mov ecx, osend
  6974 0000539E E8F9DEFFFF          <2> 	call showdec
  6975 000053A3 BE[B4540000]        <2> 	mov esi, diskbytemsg
  6976 000053A8 E80ECAFFFF          <2> 	call printquiet
  6977 000053AD B9[72980300]        <2> 	mov ecx, osend
  6978 000053B2 81C1[3CAA2D00]      <2> 	add ecx, commandbufend
  6979 000053B8 81E9[009A0300]      <2> 	sub ecx, bssstart	;add the extra buffer space
  6980 000053BE E8D9DEFFFF          <2> 	call showdec
  6981 000053C3 BE[CB540000]        <2> 	mov esi, membytemsg
  6982 000053C8 E8EEC9FFFF          <2> 	call printquiet
  6983 000053CD BE[2E550000]        <2> 	mov esi, endofmemmsg
  6984 000053D2 E8E4C9FFFF          <2> 	call printquiet
  6985 000053D7 B9[4CE24D00]        <2> 	mov ecx, bssend
  6986 000053DC E80CDEFFFF          <2> 	call showhex
  6987 000053E1 BE[E4540000]        <2> 	mov esi, systeminfomsg
  6988 000053E6 E8D0C9FFFF          <2> 	call printquiet
  6989                              <2> getcpuspeed:
  6990 000053EB B8FE000000          <2> 	mov eax, 0xFE
  6991 000053F0 E621                <2> 	out 0x21, al ;mask off all but timer interrupt
  6992 000053F2 B020                <2> 	mov al, 0x20
  6993 000053F4 E620                <2> 	out 0x20, al
  6994 000053F6 F4                  <2> 	hlt
  6995 000053F7 0F31                <2> 	rdtsc
  6996 000053F9 89D6                <2> 	mov esi, edx
  6997 000053FB 89C7                <2> 	mov edi, eax
  6998 000053FD 31C0                <2> 	xor eax, eax
  6999 000053FF C605[3B020000]01    <2> 	mov byte [testingcpuspeed], 1
  7000                              <2> cpuspeedloop:	;wait until next timer interrupt, then inc eax until the next
  7001 00005406 40                  <2> 	inc eax
  7002 00005407 EBFD                <2> 	jmp cpuspeedloop
  7003                              <2> cpuspeedloopend:
  7004 00005409 0F31                <2> 	rdtsc
  7005 0000540B 29F8                <2> 	sub eax, edi
  7006 0000540D 29F2                <2> 	sub edx, esi
  7007 0000540F 8915[44020000]      <2> 	mov [cpuclocksperint + 4], edx
  7008 00005415 A3[40020000]        <2> 	mov [cpuclocksperint], eax
  7009 0000541A 31C0                <2> 	xor eax, eax
  7010 0000541C E621                <2> 	out 0x21, al
  7011 0000541E B020                <2> 	mov al, 0x20
  7012 00005420 E620                <2> 	out 0x20, al
  7013 00005422 31D2                <2> 	xor edx, edx
  7014 00005424 31C0                <2> 	xor eax, eax
  7015 00005426 A1[3C020000]        <2> 	mov eax, [cpuspeedperint]
  7016 0000542B D1E0                <2> 	shl eax, 1	;the cpu speed loop actually contains 2 commands so multiply the
  7017                              <2> 				;result by 2
  7018 0000542D 8B1D[4E020000]      <2> 	mov ebx, [timeinterval]
  7019 00005433 C1EB0A              <2> 	shr ebx, 10 ;divide the interval by 1024
  7020 00005436 F7F3                <2> 	div ebx	;quotient in eax, remainder in edx
  7021 00005438 89C1                <2> 	mov ecx, eax
  7022 0000543A E85DDEFFFF          <2> 	call showdec
  7023 0000543F BE[12550000]        <2> 	mov esi, cpuspeedmsg
  7024 00005444 E872C9FFFF          <2> 	call printquiet
  7025 00005449 31D2                <2> 	xor edx, edx
  7026 0000544B A1[40020000]        <2> 	mov eax, [cpuclocksperint]
  7027 00005450 8B15[44020000]      <2> 	mov edx, [cpuclocksperint + 4]
  7028 00005456 8B1D[4E020000]      <2> 	mov ebx, [timeinterval]
  7029 0000545C C1EB0A              <2> 	shr ebx, 10
  7030 0000545F F7F3                <2> 	div ebx
  7031 00005461 89C1                <2> 	mov ecx, eax
  7032 00005463 E834DEFFFF          <2> 	call showdec
  7033 00005468 BE[18550000]        <2> 	mov esi, cpuclockmsg
  7034 0000546D E849C9FFFF          <2> 	call printquiet
  7035 00005472 8B0D[48020000]      <2> 	mov ecx, [memoryspace]
  7036 00005478 C1E914              <2> 	shr ecx, 20
  7037 0000547B 41                  <2> 	inc ecx	;the reading is one MB behind
  7038 0000547C E81BDEFFFF          <2> 	call showdec
  7039 00005481 BE[1D550000]        <2> 	mov esi, memoryspacemsg
  7040 00005486 E851C9FFFF          <2> 	call print
  7041                              <2> %ifdef sound.included
  7042 0000548B 803D[34610000]00    <2> 	cmp byte [SoundBlaster], 0
  7043 00005492 740A                <2> 	je .nosb
  7044 00005494 BE[FA540000]        <2> 	mov esi, soundblastermsg
  7045 00005499 E83EC9FFFF          <2> 	call print
  7046                              <2> .nosb:
  7047                              <2> %endif
  7048 0000549E C3                  <2> 	ret
  7049                              <2> 
  7050 0000549F 4B65726E656C20496E- <2> kernelinfomsg db "Kernel Information:",10,0
  7051 000054A8 666F726D6174696F6E- <2>
  7052 000054B1 3A0A00              <2>
  7053 000054B4 427974657320446973- <2> diskbytemsg db "Bytes Disk Space Used",10,0
  7054 000054BD 6B2053706163652055- <2>
  7055 000054C6 7365640A00          <2>
  7056 000054CB 4279746573204D656D- <2> membytemsg db "Bytes Memory Space Used",10,0
  7057 000054D4 6F7279205370616365- <2>
  7058 000054DD 20557365640A00      <2>
  7059 000054E4 0A53797374656D2049- <2> systeminfomsg db 10,"System Information:",10,0
  7060 000054ED 6E666F726D6174696F- <2>
  7061 000054F6 6E3A0A00            <2>
  7062                              <2> %ifdef sound.included
  7063 000054FA 536F756E64626C6173- <2> 	soundblastermsg db "Soundblaster Detected.",10,0
  7064 00005503 746572204465746563- <2>
  7065 0000550C 7465642E0A00        <2>
  7066                              <2> %endif
  7067 00005512 4D4950530A00        <2> cpuspeedmsg db "MIPS",10,0
  7068 00005518 4D487A0A00          <2> cpuclockmsg db "MHz",10,0
  7069 0000551D 4D42204D656D6F7279- <2> memoryspacemsg db "MB Memory Space",10,0
  7070 00005526 2053706163650A00    <2>
  7071 0000552E 456E64206F66204D65- <2> endofmemmsg: db "End of Memory Space: 0x",0
  7072 00005537 6D6F72792053706163- <2>
  7073 00005540 653A20307800        <2>
  7074                              <1> %include 'source/programs/time.asm'
  7075 00005546 FF2C74696D6500      <2> db 255,44,"time",0	
  7076                              <2> timer:
  7077 0000554D 8B35[EB2F0000]      <2> 	mov esi, [currentcommandloc]
  7078 00005553 83C604              <2> 	add esi, 4
  7079 00005556 803E00              <2> 	cmp byte [esi], 0
  7080 00005559 7477                <2> 	je .norun
  7081 0000555B 46                  <2> 	inc esi
  7082 0000555C 8B0D[52020000]      <2> 	mov ecx, [timeseconds]
  7083 00005562 51                  <2> 	push ecx
  7084 00005563 8B0D[56020000]      <2> 	mov ecx, [timenanoseconds]
  7085 00005569 51                  <2> 	push ecx
  7086 0000556A BF[88D40300]        <2> 	mov edi, buftxt
  7087                              <2> .cpcmd:
  7088 0000556F 8A06                <2> 	mov al, [esi]
  7089 00005571 8807                <2> 	mov [edi], al
  7090 00005573 46                  <2> 	inc esi
  7091 00005574 47                  <2> 	inc edi
  7092 00005575 3C00                <2> 	cmp al, 0
  7093 00005577 75F6                <2> 	jne .cpcmd
  7094 00005579 E89DD9FFFF          <2> 	call run
  7095 0000557E 5A                  <2> 	pop edx
  7096 0000557F 58                  <2> 	pop eax
  7097                              <2> 
  7098 00005580 8B0D[52020000]      <2> 	mov ecx, [timeseconds]
  7099 00005586 29C1                <2> 	sub ecx, eax
  7100 00005588 8B1D[56020000]      <2> 	mov ebx, [timenanoseconds]
  7101 0000558E 29D3                <2> 	sub ebx, edx
  7102 00005590 7307                <2> 	jae .nosign
  7103 00005592 81C300CA9A3B        <2> 	add ebx, 1000000000
  7104 00005598 49                  <2> 	dec ecx
  7105                              <2> .nosign:
  7106 00005599 E8FEDCFFFF          <2> 	call showdec
  7107                              <2> 	
  7108 0000559E 89D9                <2> 	mov ecx, ebx
  7109 000055A0 BE[BF400000]        <2> 	mov esi, timenscache
  7110 000055A5 C7460230303030      <2> 	mov dword [esi+ 2], "0000"
  7111 000055AC C7460630303030      <2> 	mov dword [esi + 6], "0000"
  7112 000055B3 C6460A30            <2> 	mov byte [esi + 10], "0"
  7113 000055B7 BE[CA400000]        <2> 	mov esi, timenscacheend
  7114 000055BC E8F6DAFFFF          <2> 	call convert
  7115 000055C1 BE[BF400000]        <2> 	mov esi, timenscache
  7116 000055C6 E811C8FFFF          <2> 	call print
  7117 000055CB C605[BF400000]08    <2> 	mov byte [timenscache], 8
  7118                              <2> .norun:
  7119 000055D2 C3                  <2> 	ret
  7120                              <2> 	
  7121                              <1> %include 'source/programs/turnoff.asm'
  7122 000055D3 FF2C7475726E6F6666- <2> 	db 255,44,"turnoff",0
  7123 000055DC 00                  <2>
  7124                              <2> 	turnoff:
  7125 000055DD 66C705[960D0000]-   <2> 			mov word [realmodeptr], shutdown
  7126 000055E4 [F055]              <2>
  7127 000055E6 BB[1A560000]        <2> 			mov ebx, halt
  7128 000055EB E89AB6FFFF          <2> 			call realmode
  7129                              <2> 
  7130                              <2> [BITS 16]
  7131                              <2> 		shutdown:
  7132 000055F0 B453                <2> 			mov ah, 0x53
  7133 000055F2 B004                <2> 			mov al, 4
  7134 000055F4 31DB                <2> 			xor bx, bx
  7135 000055F6 CD15                <2> 			int 0x15
  7136                              <2> 			
  7137 000055F8 B453                <2> 			mov ah, 0x53
  7138 000055FA B001                <2> 			mov al, 1
  7139 000055FC 31DB                <2> 			xor bx, bx
  7140 000055FE CD15                <2> 			int 0x15
  7141                              <2> 			
  7142 00005600 B453                <2> 			mov ah, 0x53
  7143 00005602 B008                <2> 			mov al, 8
  7144 00005604 BB0100              <2> 			mov bx, 1
  7145 00005607 B90100              <2> 			mov cx, 1
  7146 0000560A CD15                <2> 			int 0x15
  7147                              <2> 			
  7148 0000560C B453                <2> 			mov ah, 0x53
  7149 0000560E B007                <2> 			mov al, 7
  7150 00005610 BB0100              <2> 			mov bx, 1
  7151 00005613 B90300              <2> 			mov cx, 3
  7152 00005616 CD15                <2> 			int 0x15
  7153 00005618 EBFE                <2> 			jmp $
  7154                              <2> 			[BITS 32]
  7155 0000561A EBFE                <2> halt: jmp $
  7156                              <1> %include 'source/programs/wait.asm'
  7157 0000561C FF2C7761697400      <2> db 255,44,"wait",0
  7158                              <2> waitkey:
  7159 00005623 E88ECDFFFF          <2> 		call getchar
  7160 00005628 C3                  <2> 		ret
  7161                              <1> %include 'source/programs/while.asm'
  7162 00005629 FF2C7768696C6500    <2> db 255,44,"while",0
  7163 00005631 30C0                <2> whilecmd:  xor al, al
  7164 00005633 3805[82C00300]      <2> 	cmp [BATCHISON], al
  7165 00005639 0F8423E4FFFF        <2> 	je near notbatch
  7166 0000563F 8B35[7EC00300]      <2> 	mov esi, [BATCHPOS]
  7167 00005645 83EE02              <2> 	sub esi, 2
  7168 00005648 4E                  <2> whilefnd: dec esi
  7169 00005649 8A06                <2> 	mov al, [esi]
  7170 0000564B 3C0A                <2> 	cmp al, 10
  7171 0000564D 0F840A000000        <2> 	je near whilefnd2
  7172 00005653 3C00                <2> 	cmp al, 0
  7173 00005655 0F8402000000        <2> 	je near whilefnd2
  7174 0000565B EBEB                <2> 	jmp whilefnd
  7175                              <2> whilefnd2:
  7176 0000565D 46                  <2> 	inc esi
  7177 0000565E 8935[84C00300]      <2> 	mov [LOOPPOS], esi
  7178 00005664 C605[83C00300]01    <2> 	mov BYTE [LOOPON], 1
  7179 0000566B BE[88D40300]        <2> 	mov esi, buftxt
  7180 00005670 BB[88D40300]        <2> 	mov ebx, buftxt
  7181 00005675 83C306              <2> 	add ebx, 6
  7182 00005678 E9BFF3FFFF          <2> 	jmp chkeqsn
  7183                              <1> progend:		;programs end here	
  7184                              <1> batchprogend:
  7185                                  %include "source/hardware.asm"
  7186                              <1> %ifdef gui.included
  7187                              <1> 	%include "source/drivers/video/vesa.asm"
  7188                              <2> [BITS 16]
  7189                              <2> guiswitch:
  7190 0000567D 83F900              <2> 	cmp cx, 0
  7191 00005680 750B                <2> 	jne guiswitchdefnum
  7192 00005682 B81200              <2> 	mov ax, 12h
  7193 00005685 31DB                <2> 	xor bx, bx
  7194 00005687 CD10                <2> 	int 10h
  7195 00005689 E84E00              <2> 	call guiloadagain
  7196                              <2> guiswitchnocando:
  7197 0000568C C3                  <2> 	ret	;return without switching as mode number is bad
  7198                              <2> guiswitchdefnum:	;switch to a defined mode number
  7199 0000568D B8004F              <2> 	mov ax, 0x4F00
  7200 00005690 BF[5958]            <2> 	mov di, VBEMODEBLOCK
  7201 00005693 CD10                <2> 	int 10h
  7202 00005695 BE[7B58]            <2> 	mov si, reserved
  7203 00005698 83EE02              <2> 	sub si, 2
  7204                              <2> .loop:
  7205 0000569B 83C602              <2> 	add si, 2
  7206 0000569E 81FE[5959]          <2> 	cmp si, oemdata
  7207 000056A2 74E8                <2> 	je guiswitchnocando
  7208 000056A4 833CFF              <2> 	cmp word [si], 0xFFFF
  7209 000056A7 74E3                <2> 	je guiswitchnocando
  7210 000056A9 390C                <2> 	cmp [si], cx
  7211 000056AB 75EE                <2> 	jne .loop
  7212 000056AD 8936[BA57]          <2> 	mov [videomodecache], si
  7213 000056B1 81C90040            <2> 	or cx, 0x4000	;make sure linear frame buffer is selected
  7214 000056B5 B8014F              <2> 	mov ax, 0x4F01
  7215 000056B8 BF[595A]            <2> 	mov di, VBEMODEINFOBLOCK
  7216 000056BB 890E[B857]          <2> 	mov [vesamode], cx
  7217 000056BF CD10                <2> 	int 10h
  7218 000056C1 E9D400              <2> 	jmp selectedvesa
  7219                              <2> guiload:
  7220 000056C4 BE[3158]            <2> 	mov si, bootmsg
  7221 000056C7 E8B5A9              <2> 	call printrm
  7222 000056CA 31C0                <2> 	xor ax, ax
  7223 000056CC CD16                <2> 	int 16h
  7224 000056CE 3C79                <2> 	cmp al, "y"
  7225 000056D0 0F856AA9            <2> 	jne near vgaset
  7226 000056D4 BE[F295]            <2> 	mov si, crlf
  7227 000056D7 E8A5A9              <2> 	call printrm
  7228                              <2> guiloadagain:
  7229 000056DA B8004F              <2> 	mov ax, 04F00h
  7230 000056DD BF[5958]            <2> 	mov di, VBEMODEBLOCK
  7231 000056E0 CD10                <2> 	int 10h
  7232 000056E2 BE[7B58]            <2> 	mov si, reserved
  7233 000056E5 83EE02              <2> 	sub si, 2
  7234                              <2> findvideomodes:
  7235 000056E8 83C602              <2> 	add si, 2
  7236 000056EB 8B0C                <2> 	mov cx, [si]
  7237 000056ED 83F9FF              <2> 	cmp cx, 0xFFFF
  7238 000056F0 0F840A00            <2> 	je near nextvmode
  7239 000056F4 81FE[5959]          <2> 	cmp si, oemdata
  7240 000056F8 0F8342A9            <2> 	jae near vgaset	;kill if no valid list is found
  7241 000056FC EBEA                <2> 	jmp findvideomodes 	
  7242                              <2> ;debug,shows vmodes available
  7243                              <2> nextvmode:
  7244 000056FE 83EE02              <2> 	sub si, 2
  7245 00005701 81FE[7B58]          <2> 	cmp si, reserved
  7246 00005705 0F82D1FF            <2> 	jb near guiloadagain
  7247 00005709 8B0C                <2> 	mov cx, [si]
  7248 0000570B 83F9FF              <2> 	cmp cx, 0xFFFF
  7249 0000570E 0F84ECFF            <2> 	je near nextvmode
  7250 00005712 81C90040            <2> 	or cx, 0x4000 		;Linear Frame Buffer
  7251 00005716 B8014F              <2> 	mov ax, 04F01h
  7252 00005719 BF[595A]            <2> 	mov di, VBEMODEINFOBLOCK
  7253 0000571C 890E[B857]          <2> 	mov [vesamode], cx
  7254 00005720 CD10                <2> 	int 10h
  7255 00005722 A0[725A]            <2> 	mov al, [bitsperpixel]
  7256 00005725 3C10                <2> 	cmp al, 16
  7257 00005727 75D5                <2> 	jne nextvmode
  7258 00005729 8936[BA57]          <2> 	mov [videomodecache], si
  7259 0000572D 84E4                <2> 	test ah, ah
  7260 0000572F 0F842200            <2> 	jz near setvesamode
  7261 00005733 EBC9                <2> 	jmp nextvmode
  7262 00005735 0A0D49732074686973- <2> isthisvideook db 10,13,"Is this video mode OK?(y/n)",13,10,0
  7263 0000573E 20766964656F206D6F- <2>
  7264 00005747 6465204F4B3F28792F- <2>
  7265 00005750 6E290D0A00          <2>
  7266                              <2> setvesamode:
  7267 00005755 8B36[BA57]          <2> 	mov si, [videomodecache]
  7268 00005759 8B0C                <2> 	mov cx, [si]
  7269 0000575B E86500              <2> 	call decshow
  7270 0000575E B03A                <2> 	mov al, ':'
  7271 00005760 E8C600              <2> 	call char
  7272 00005763 8B0E[6B5A]          <2> 	mov cx, [resolutionx]
  7273 00005767 E85900              <2> 	call decshow
  7274 0000576A B078                <2> 	mov al, "x"
  7275 0000576C E8BA00              <2> 	call char
  7276 0000576F 8B0E[6D5A]          <2> 	mov cx, [resolutiony]
  7277 00005773 E84D00              <2> 	call decshow
  7278 00005776 B040                <2> 	mov al, "@"
  7279 00005778 E8AE00              <2> 	call char
  7280 0000577B 31C9                <2> 	xor cx, cx
  7281 0000577D 8A0E[725A]          <2> 	mov cl, [bitsperpixel]
  7282 00005781 E83F00              <2> 	call decshow
  7283 00005784 BE[3557]            <2> 	mov si, isthisvideook
  7284 00005787 E8F5A8              <2> 	call printrm
  7285 0000578A 31C0                <2> 	xor ax, ax
  7286 0000578C CD16                <2> 	int 16h
  7287 0000578E 8B36[BA57]          <2> 	mov si, [videomodecache]
  7288 00005792 3C79                <2> 	cmp al, "y"
  7289 00005794 0F8566FF            <2> 	jne near nextvmode
  7290                              <2> selectedvesa:
  7291 00005798 8B16[6B5A]          <2> 	mov dx, [resolutionx]
  7292 0000579C 01D2                <2> 	add dx, dx
  7293 0000579E 8916[595B]          <2> 	mov [resolutionx2], dx
  7294 000057A2 31D2                <2> 	xor dx, dx
  7295 000057A4 31C9                <2> 	xor cx, cx
  7296 000057A6 B8024F              <2> 	mov ax, 04F02h
  7297 000057A9 8B1E[B857]          <2> 	mov bx, [vesamode]
  7298 000057AD CD10                <2> 	int 10h		;enter VESA mode
  7299 000057AF C606[1896]01        <2> 	mov byte [guion], 1
  7300 000057B4 E897A8              <2> 	call getmemorysize;get the memory map after the video is initialized
  7301 000057B7 C3                  <2> 	ret
  7302                              <2> 	
  7303 000057B8 0000                <2> vesamode dw 0
  7304 000057BA 0000                <2> videomodecache dw 0
  7305                              <2> 
  7306 000057BC 0000000000          <2> dcnm db 0,0,0,0,0
  7307 000057C1 0000                <2> dcnmend db 0,0
  7308                              <2> 
  7309                              <2> 
  7310                              <2> decshow:
  7311 000057C3 BE[BC57]            <2> 	mov si, dcnm
  7312                              <2> decclear:
  7313 000057C6 B030                <2> 	mov al, "0"
  7314 000057C8 8804                <2> 	mov [si], al
  7315 000057CA 46                  <2> 	inc si
  7316 000057CB 81FE[C157]          <2> 	cmp si, dcnmend
  7317 000057CF 76F5                <2> 	jbe decclear
  7318 000057D1 4E                  <2> 	dec si
  7319 000057D2 E81500              <2> 	call convertrm
  7320 000057D5 BE[BC57]            <2> 	mov si, dcnm
  7321                              <2> dectst:
  7322 000057D8 8A04                <2> 	mov al, [si]
  7323 000057DA 46                  <2> 	inc si
  7324 000057DB 81FE[C157]          <2> 	cmp si, dcnmend
  7325 000057DF 7704                <2> 	ja dectstend
  7326 000057E1 3C30                <2> 	cmp al, "0"
  7327 000057E3 76F3                <2> 	jbe dectst
  7328                              <2> dectstend:
  7329 000057E5 4E                  <2> 	dec si
  7330 000057E6 E896A8              <2> 	call printrm
  7331 000057E9 C3                  <2> 	ret
  7332                              <2> 	
  7333                              <2> 	
  7334                              <2> convertrm:
  7335 000057EA 4E                  <2> 	dec si
  7336 000057EB 89F3                <2> 	mov bx, si		;place to convert into must be in si, number to convert must be in cx
  7337                              <2> cnvrtrm:
  7338 000057ED 89DE                <2> 	mov si, bx
  7339 000057EF 83EE03              <2> 	sub si, 3
  7340 000057F2 46                  <2> ten3rm:	inc si
  7341 000057F3 81F9E803            <2> 	cmp cx, 1000
  7342 000057F7 7208                <2> 	jb ten2rm
  7343 000057F9 81E9E803            <2> 	sub cx, 1000
  7344 000057FD FE04                <2> 	inc byte [si]
  7345 000057FF EBEC                <2> 	jmp cnvrtrm
  7346 00005801 46                  <2> ten2rm:	inc si
  7347 00005802 83F964              <2> 	cmp cx, 100
  7348 00005805 7207                <2> 	jb ten1rm
  7349 00005807 83E964              <2> 	sub cx, 100
  7350 0000580A FE04                <2> 	inc byte [si]
  7351 0000580C EBDF                <2> 	jmp cnvrtrm
  7352 0000580E 46                  <2> ten1rm:	inc si
  7353 0000580F 83F90A              <2> 	cmp cx, 10
  7354 00005812 7207                <2> 	jb ten0rm
  7355 00005814 83E90A              <2> 	sub cx, 10
  7356 00005817 FE04                <2> 	inc byte [si]
  7357 00005819 EBD2                <2> 	jmp cnvrtrm
  7358 0000581B 46                  <2> ten0rm:	inc si
  7359 0000581C 83F901              <2> 	cmp cx, 1
  7360 0000581F 7207                <2> 	jb tendnrm
  7361 00005821 83E901              <2> 	sub cx, 1
  7362 00005824 FE04                <2> 	inc byte [si]
  7363 00005826 EBC5                <2> 	jmp cnvrtrm
  7364                              <2> tendnrm:
  7365 00005828 C3                  <2> 	ret
  7366                              <2> 
  7367                              <2>     char: 		    ;char must be in al
  7368 00005829 BB0700              <2>        mov bx, 07
  7369 0000582C B40E                <2> 	   mov ah, 0Eh
  7370 0000582E CD10                <2> 	   int 10h
  7371 00005830 C3                  <2> 	   ret
  7372                              <2> 
  7373 00005831 426F6F7420696E746F- <2> bootmsg:	db "Boot into the GUI?(y/n)",0
  7374 0000583A 20746865204755493F- <2>
  7375 00005843 28792F6E2900        <2>
  7376                              <2> 
  7377                              <2> 
  7378                              <2> mcursor:
  7379 00005849 01                  <2> 	db	00000001b
  7380 0000584A 81                  <2> 	db	10000001b
  7381 0000584B C1                  <2> 	db	11000001b
  7382 0000584C E1                  <2> 	db	11100001b
  7383 0000584D F1                  <2> 	db	11110001b
  7384 0000584E F9                  <2> 	db	11111001b
  7385 0000584F FD                  <2> 	db	11111101b
  7386 00005850 FF                  <2> 	db	11111111b
  7387 00005851 F9                  <2> 	db	11111001b
  7388 00005852 B9                  <2> 	db	10111001b
  7389 00005853 39                  <2> 	db	00111001b
  7390 00005854 1C                  <2> 	db	00011100b
  7391 00005855 1C                  <2> 	db	00011100b
  7392 00005856 0E                  <2> 	db	00001110b
  7393 00005857 0E                  <2> 	db	00001110b
  7394 00005858 0C                  <2> 	db	00001100b
  7395                              <2> mcursorend:
  7396                              <2> 
  7397                              <2> 
  7398                              <2> VBEMODEBLOCK:
  7399 00005859 00<rept>            <2> vbesignature 		times  4 db 0 	;VBE Signature
  7400 0000585D 00<rept>            <2> vbeversion  		times  2 db 0	;VBE Version
  7401 0000585F 00<rept>            <2> oemstringptr  		times  4 db 0	;Pointer to OEM String
  7402 00005863 00<rept>            <2> capabilities 		times  4 db 0	;Capabilities of graphics cont.
  7403 00005867 00<rept>            <2> videomodeptr 		times  4 db 0	;Pointer to Video Mode List
  7404 0000586B 00<rept>            <2> totalmemory   		times  2 db 0	;number of 64Kb memory blocks
  7405 0000586D 00<rept>            <2> oemsoftwarerev  	times  2 db 0	;VBE implementation Software revision
  7406 0000586F 00<rept>            <2> oemvendornameptr 	times  4 db 0	;Pointer to Vendor Name String
  7407 00005873 00<rept>            <2> oemproductnameptr 	times  4 db 0	;Pointer to Product Name String
  7408 00005877 00<rept>            <2> oemproductrevptr 	times  4 db 0	;Pointer to Product Revision String
  7409 0000587B 00<rept>            <2> reserved			times  222 db 0	;Reserved for VBE implementation scratch area
  7410 00005959 00<rept>            <2> oemdata 			times  256 db 0	;Data Area for OEM Strings
  7411                              <2> 
  7412                              <2> VBEMODEINFOBLOCK:
  7413                              <2> ;Mandatory information for all VBE revision
  7414 00005A59 00<rept>            <2> modeattributes   	times  2 db 0	;Mode attributes
  7415 00005A5B 00                  <2> winaattributes   	times  1 db 0	;Window A attributes
  7416 00005A5C 00                  <2> winbattributes   	times  1 db 0	;Window B attributes
  7417 00005A5D 00<rept>            <2> wingranularity   	times  2 db 0	;Window granularity
  7418 00005A5F 00<rept>            <2> winsize          	times  2 db 0	;Window size
  7419 00005A61 00<rept>            <2> winasegment      	times  2 db 0	;Window A start segment
  7420 00005A63 00<rept>            <2> winbsegment      	times  2 db 0	;Window B start segment
  7421 00005A65 00<rept>            <2> winfuncptr       	times  4 db 0	;pointer to window function
  7422 00005A69 00<rept>            <2> bytesperscanline 	times  2 db 0	;Bytes per scan line
  7423                              <2> 
  7424                              <2> ;Mandatory information for VBE 1.2 and above
  7425 00005A6B 00<rept>            <2> resolutionx     	times  2 db 0	;Horizontal resolution in pixel or chars
  7426 00005A6D 00<rept>            <2> resolutiony	    	times  2 db 0	;Vertical resolution in pixel or chars
  7427 00005A6F 00                  <2> xcharsize       	times  1 db 0	;Character cell width in pixel
  7428 00005A70 00                  <2> ycharsize       	times  1 db 0	;Character cell height in pixel
  7429 00005A71 00                  <2> numberofplanes  	times  1 db 0	;Number of memory planes
  7430 00005A72 00                  <2> bitsperpixel    	times  1 db 0	;Bits per pixel
  7431 00005A73 00                  <2> numberofbanks   	times  1 db 0	;Number of banks
  7432 00005A74 00                  <2> memorymodel     	times  1 db 0	;Memory model type
  7433 00005A75 00                  <2> banksize        	times  1 db 0	;Bank size in KB
  7434 00005A76 00                  <2> numberofimagepages	times  1 db 0	;Number of images
  7435 00005A77 00                  <2> reserved1       	times  1 db 0	;Reserved for page function
  7436                              <2> 
  7437                              <2> ;Direct Color fields (required for direct/6 and YUV/7 memory models)
  7438 00005A78 00                  <2> redmasksize			times  1 db 0	;Size of direct color red mask in bits
  7439 00005A79 00                  <2> redfieldposition	times  1 db 0	;Bit position of lsb of red bask
  7440 00005A7A 00                  <2> greenmasksize   	times  1 db 0	;Size of direct color green mask in bits
  7441 00005A7B 00                  <2> greenfieldposition	times  1 db 0	;Bit position of lsb of green bask
  7442 00005A7C 00                  <2> bluemasksize		times  1 db 0	;Size of direct color blue mask in bits
  7443 00005A7D 00                  <2> bluefieldposition	times  1 db 0	;Bit position of lsb of blue bask
  7444 00005A7E 00                  <2> rsvdmasksize        times  1 db 0		;Size of direct color reserved mask in bits
  7445 00005A7F 00                  <2> rsvdfieldposition	times  1 db 0		;Bit position of lsb of reserved bask
  7446 00005A80 00                  <2> directcolormodeinfo	times  1 db 0	;Direct color mode attributes
  7447                              <2> 
  7448                              <2> ;Mandatory information for VBE 2.0 and above
  7449 00005A81 00<rept>            <2> physbaseptr 		times  4 db 0	;Physical address for flat frame buffer
  7450 00005A85 00<rept>            <2> offscreenmemoffset 	times  4 db 0	;Pointer to start of off screen memory
  7451 00005A89 00<rept>            <2> offscreenmemsize 	times  2 db 0    ;Amount of off screen memory in 1Kb units
  7452 00005A8B 00<rept>            <2> reserved2 			times  206 db 0  ;Remainder of ModeInfoBlock
  7453                              <2> 
  7454 00005B59 00000000            <2> resolutionx2 dd 0	;this is not part of the VBE but is necessary GUI info
  7455                              <2> VBEEND:
  7456                              <2> [BITS 32]
  7457                              <1> 	%include "source/drivers/input/mouse.asm"
  7458 00005B5D 00                  <2> mousedisabled db 0
  7459                              <2> 	
  7460                              <2> 	cursorgui:
  7461 00005B5E 803D[E5890000]01    <2> 		cmp byte [mouseon], 1
  7462 00005B65 0F8432000000        <2> 		je near mousedaemon
  7463 00005B6B 803D[18960000]00    <2> 		cmp byte [guion], 0
  7464 00005B72 0F84F3060000        <2> 		je near entdown
  7465                              <2> 	initmouse:
  7466 00005B78 803D[18960000]00    <2> 		cmp byte [guion], 0
  7467 00005B7F 7405                <2> 		je noswmsposinit
  7468 00005B81 E815150000          <2> 		call switchmousepos2
  7469                              <2> 	noswmsposinit:
  7470 00005B86 E851020000          <2> 	  	call PS2SET
  7471 00005B8B E87A020000          <2> 		call ACTMOUS
  7472 00005B90 C605[E5890000]01    <2> 		mov byte [mouseon],1
  7473 00005B97 E893020000          <2> 		call GETB 	;Get the responce byte of the mouse (like: Hey i am active)
  7474                              <2> 		;call GETB
  7475                              <2> 				;if the bytes are mixed up,
  7476                              <2> 				;remove this line or add another of this line.
  7477                              <2> 	nomouse:
  7478 00005B9C C3                  <2> 		ret
  7479                              <2> 		
  7480                              <2> 	mousedaemon:
  7481 00005B9D 803D[E5890000]01    <2> 		cmp byte [mouseon], 1
  7482 00005BA4 75D2                <2> 		jne initmouse
  7483 00005BA6 E464                <2> 		in al, 64h ; Status
  7484 00005BA8 A820                <2> 		test al, 20h ; PS2-Mouse?
  7485 00005BAA 0F8502000000        <2> 		jnz near moused
  7486 00005BB0 F4                  <2> 		hlt
  7487 00005BB1 C3                  <2> 		ret
  7488                              <2> 	moused:
  7489 00005BB2 803D[5D5B0000]01    <2> 		cmp byte [mousedisabled], 1
  7490 00005BB9 74E1                <2> 		je nomouse
  7491 00005BBB E86F020000          <2> 		  call GETB
  7492 00005BC0 88C3                <2> 		  mov  bl, al
  7493 00005BC2 80E301              <2> 		  and  bl, 1
  7494 00005BC5 881D[545E0000]      <2> 		  mov  BYTE [LBUTTON], bl
  7495 00005BCB 88C3                <2> 		  mov  bl, al
  7496 00005BCD 80E302              <2> 		  and  bl, 2
  7497 00005BD0 D0EB                <2> 		  shr  bl, 1
  7498 00005BD2 881D[555E0000]      <2> 		  mov  BYTE [RBUTTON], bl
  7499 00005BD8 88C3                <2> 		  mov  bl, al
  7500 00005BDA 80E304              <2> 		  and  bl, 4
  7501 00005BDD C0EB02              <2> 		  shr  bl, 2
  7502 00005BE0 881D[565E0000]      <2> 		  mov  BYTE [MBUTTON], bl
  7503 00005BE6 E844020000          <2> 		  call GETB
  7504 00005BEB A2[575E0000]        <2> 		  mov  BYTE [XCOORD], al
  7505 00005BF0 E83A020000          <2> 		  call GETB
  7506 00005BF5 A2[585E0000]        <2> 		  mov  BYTE [YCOORD], al
  7507                              <2> 
  7508                              <2> 	showpixelcursor:
  7509 00005BFA 668B15[455D0000]    <2> 		mov dx, [mousecursorposition]
  7510 00005C01 668B0D[475D0000]    <2> 		mov cx, [mousecursorposition + 2]
  7511 00005C08 668915[415D0000]    <2> 		mov [lastmouseposition], dx
  7512 00005C0F 66890D[435D0000]    <2> 		mov [lastmouseposition + 2], cx
  7513 00005C16 A0[575E0000]        <2> 		mov al, [XCOORD]
  7514 00005C1B 3C80                <2> 		cmp al, 128
  7515 00005C1D 7309                <2> 		jae subxcoord
  7516 00005C1F 00C0                <2> 		add al, al
  7517 00005C21 30E4                <2> 		xor ah, ah
  7518 00005C23 6601C2              <2> 		add dx, ax
  7519 00005C26 EB0B                <2> 		jmp subxcoorddn
  7520                              <2> 	subxcoord:
  7521 00005C28 00C0                <2> 		add al, al
  7522 00005C2A 30DB                <2> 		xor bl, bl
  7523 00005C2C 28C3                <2> 		sub bl, al
  7524 00005C2E 30FF                <2> 		xor bh, bh
  7525 00005C30 6629DA              <2> 		sub dx, bx
  7526                              <2> 	subxcoorddn:
  7527 00005C33 8A1D[585E0000]      <2> 		mov bl, [YCOORD]
  7528 00005C39 30C0                <2> 		xor al, al
  7529 00005C3B 28D8                <2> 		sub al, bl
  7530 00005C3D 3C80                <2> 		cmp al, 128
  7531 00005C3F 7307                <2> 		jae subycoord
  7532 00005C41 30E4                <2> 		xor ah, ah
  7533 00005C43 6601C1              <2> 		add cx, ax
  7534 00005C46 EB09                <2> 		jmp subycoorddn
  7535                              <2> 	subycoord:
  7536 00005C48 30DB                <2> 		xor bl, bl
  7537 00005C4A 28C3                <2> 		sub bl, al
  7538 00005C4C 30FF                <2> 		xor bh, bh
  7539 00005C4E 6629D9              <2> 		sub cx, bx
  7540                              <2> 	subycoorddn:
  7541 00005C51 6681FA204E          <2> 		cmp dx, 20000
  7542 00005C56 7603                <2> 		jbe nooriginx2
  7543 00005C58 6631D2              <2> 		xor dx, dx
  7544                              <2> 	nooriginx2:
  7545 00005C5B 6681F9204E          <2> 		cmp cx, 20000
  7546 00005C60 7603                <2> 		jbe nooriginy2
  7547 00005C62 6631C9              <2> 		xor cx, cx
  7548                              <2> 	nooriginy2:
  7549 00005C65 6683FA00            <2> 		cmp dx, 0
  7550 00005C69 7414                <2> 		je nofixxcolumn2
  7551 00005C6B 663B15[595B0000]    <2> 		cmp dx, [resolutionx2]
  7552 00005C72 720B                <2> 		jb nofixxcolumn2
  7553 00005C74 668B15[595B0000]    <2> 		mov dx, [resolutionx2]
  7554 00005C7B 6683EA02            <2> 		sub dx, 2
  7555                              <2> 	nofixxcolumn2:
  7556 00005C7F 6683F900            <2> 		cmp cx, 0
  7557 00005C83 7414                <2> 		je nofixyrow2
  7558 00005C85 663B0D[6D5A0000]    <2> 		cmp cx, [resolutiony]
  7559 00005C8C 720B                <2> 		jb nofixyrow2
  7560 00005C8E 668B0D[6D5A0000]    <2> 		mov cx, [resolutiony]
  7561 00005C95 6683E901            <2> 		sub cx, 1
  7562                              <2> 	nofixyrow2:
  7563 00005C99 668915[455D0000]    <2> 		mov [mousecursorposition], dx
  7564 00005CA0 66890D[475D0000]    <2> 		mov [mousecursorposition + 2], cx
  7565 00005CA7 803D[18960000]00    <2> 		cmp byte [guion], 0
  7566 00005CAE 0F8495000000        <2> 		je near termmouse
  7567 00005CB4 E887130000          <2> 		call switchmousepos ;use dragging code to ensure proper icon drag
  7568 00005CB9 803D[545E0000]01    <2> 		cmp byte [LBUTTON], 1
  7569 00005CC0 0F840D250000        <2> 		je near clickicon
  7570 00005CC6 803D[555E0000]01    <2> 		cmp byte [RBUTTON], 1
  7571 00005CCD 0F8400250000        <2> 		je near clickicon
  7572 00005CD3 A0[C0810000]        <2> 		mov al, [pbutton]
  7573 00005CD8 C705[C3810000]0000- <2> 		mov dword [dragging], 0
  7574 00005CE0 0000                <2>
  7575 00005CE2 3C00                <2> 		cmp al, 0
  7576 00005CE4 740F                <2> 		je nopreviousbutton
  7577 00005CE6 E8C7120000          <2> 		call clearmousecursor
  7578 00005CEB E863160000          <2> 		call reloadallgraphics
  7579                              <2> 	windowtermcopyend:
  7580 00005CF0 E8A6130000          <2> 		call switchmousepos2
  7581                              <2> 	nopreviousbutton:
  7582 00005CF5 30C0                <2> 		xor al, al
  7583 00005CF7 A2[C0810000]        <2> 		mov [pbutton], al
  7584 00005CFC A2[EC860000]        <2> 		mov [windrag], al
  7585 00005D01 A0[545E0000]        <2> 		mov al, [LBUTTON]
  7586 00005D06 A2[C1810000]        <2> 		mov [pLBUTTON], al
  7587 00005D0B A0[555E0000]        <2> 		mov al, [RBUTTON]
  7588 00005D10 A2[C2810000]        <2> 		mov [pRBUTTON], al
  7589 00005D15 31D2                <2> 		xor edx, edx
  7590 00005D17 668B15[455D0000]    <2> 		mov dx, [mousecursorposition]
  7591 00005D1E 668B0D[475D0000]    <2> 		mov cx, [mousecursorposition + 2]
  7592 00005D25 66BB18C7            <2> 		mov bx, 1100011100011000b
  7593 00005D29 66B80100            <2> 		mov ax, 1
  7594 00005D2D C605[BD810000]01    <2> 		mov byte [showcursorfonton], 1
  7595 00005D34 E8DA1C0000          <2> 		call showfontvesa
  7596 00005D39 C605[BD810000]00    <2> 		mov byte [showcursorfonton], 0
  7597 00005D40 C3                  <2> 		ret
  7598                              <2> 
  7599 00005D41 00000000            <2> lastmouseposition dw 0,0
  7600 00005D45 00000000            <2> mousecursorposition dw 0,0	
  7601                              <2> 
  7602                              <2> termmouse:
  7603 00005D49 BE[9CEF2B00]        <2> 		mov esi, videobuf
  7604 00005D4E 31D2                <2> 		xor edx, edx
  7605 00005D50 668B15[415D0000]    <2> 		mov dx, [lastmouseposition]
  7606 00005D57 668B0D[435D0000]    <2> 		mov cx, [lastmouseposition + 2]
  7607 00005D5E 66A1[DA5D0000]      <2> 		mov ax, [cursorcache]
  7608 00005D64 6683F800            <2> 		cmp ax, 0
  7609 00005D68 7424                <2> 		je nocopycursorcache
  7610 00005D6A 66C1E104            <2> 		shl cx, 4
  7611 00005D6E 66C1E203            <2> 		shl dx, 3
  7612 00005D72 01D6                <2> 		add esi, edx
  7613 00005D74 6631D2              <2> 		xor dx, dx
  7614 00005D77 8A15[22260000]      <2> 		mov dl, [charxy]
  7615 00005D7D 6641                <2> 		inc cx
  7616                              <2> termmousecplp1:
  7617 00005D7F 01D6                <2> 		add esi, edx
  7618 00005D81 6649                <2> 		dec cx
  7619 00005D83 6683F900            <2> 		cmp cx, 0
  7620 00005D87 75F6                <2> 		jne termmousecplp1
  7621 00005D89 29D6                <2> 		sub esi, edx
  7622 00005D8B 668906              <2> 		mov [esi], ax
  7623                              <2> nocopycursorcache:
  7624 00005D8E BE[9CEF2B00]        <2> 		mov esi, videobuf
  7625 00005D93 31D2                <2> 		xor edx, edx
  7626 00005D95 668B15[455D0000]    <2> 		mov dx, [mousecursorposition]
  7627 00005D9C 668B0D[475D0000]    <2> 		mov cx, [mousecursorposition + 2]
  7628 00005DA3 66C1E104            <2> 		shl cx, 4
  7629 00005DA7 66C1E203            <2> 		shl dx, 3
  7630 00005DAB 01D6                <2> 		add esi, edx
  7631 00005DAD 6631D2              <2> 		xor dx, dx
  7632 00005DB0 8A15[22260000]      <2> 		mov dl, [charxy]
  7633 00005DB6 6641                <2> 		inc cx
  7634                              <2> termmousecplp2:
  7635 00005DB8 01D6                <2> 		add esi, edx
  7636 00005DBA 6649                <2> 		dec cx
  7637 00005DBC 6683F900            <2> 		cmp cx, 0
  7638 00005DC0 75F6                <2> 		jne termmousecplp2
  7639 00005DC2 29D6                <2> 		sub esi, edx
  7640 00005DC4 668B06              <2> 		mov ax, [esi]
  7641 00005DC7 66A3[DA5D0000]      <2> 		mov [cursorcache], ax
  7642 00005DCD B080                <2> 		mov al, 128
  7643 00005DCF B407                <2> 		mov ah, 7
  7644 00005DD1 668906              <2> 		mov [esi], ax
  7645 00005DD4 E848CBFFFF          <2> 		call termcopy
  7646 00005DD9 C3                  <2> 		ret
  7647 00005DDA 0000                <2> cursorcache db 0,0
  7648                              <2> 
  7649                              <2> PS2SET:
  7650 00005DDC B0A8                <2>   mov  al, 0xa8		; enable mouse port
  7651 00005DDE E664                <2>   out  0x64, al		; write to keyboardcontroller
  7652 00005DE0 E801000000          <2>   call CHKPRT		; check if command is progressed (demand!)
  7653 00005DE5 C3                  <2> ret
  7654                              <2> 
  7655                              <2> CHKPRT:
  7656 00005DE6 66B96400            <2>   mov  cx, 100
  7657                              <2>  .again:
  7658 00005DEA E464                <2>   in   al, 0x64		; read from keyboardcontroller
  7659 00005DEC A802                <2>   test al, 2		; Check if input buffer is empty
  7660 00005DEE 7402                <2>   je .go
  7661 00005DF0 E2F8                <2>   loop .again
  7662                              <2>  .go:
  7663 00005DF2 C3                  <2> ret
  7664                              <2> 
  7665                              <2> WMOUS:
  7666 00005DF3 B0D4                <2>   mov  al, 0xd4		; write to mouse device instead of to keyboard
  7667 00005DF5 E664                <2>   out  0x64, al		; write to keyboardcontroller
  7668 00005DF7 E8EAFFFFFF          <2>   call CHKPRT		; check if command is progressed (demand!)
  7669 00005DFC C3                  <2> ret
  7670                              <2> 
  7671                              <2> MBUFFUL:
  7672 00005DFD 66B96400            <2>   mov cx, 100
  7673                              <2>  .mn:
  7674 00005E01 E464                <2>   in   al, 0x64		; read from keyboardcontroller
  7675 00005E03 A820                <2>   test al, 0x20		; check if mouse output buffer is full
  7676 00005E05 7402                <2>   jz  .mnn
  7677 00005E07 E2F8                <2>   loop .mn
  7678                              <2>  .mnn:
  7679 00005E09 C3                  <2> ret
  7680                              <2> 
  7681                              <2> 
  7682                              <2> ACTMOUS:
  7683 00005E0A E8E4FFFFFF          <2>   call WMOUS
  7684 00005E0F B0F4                <2>   mov  al, 0xf4 	; Command to activate mouse itselve (Stream mode)
  7685 00005E11 E660                <2>   out  0x60, al		; write ps/2 controller output port (activate mouse)
  7686 00005E13 E8CEFFFFFF          <2>   call CHKPRT		; check if command is progressed (demand!)
  7687 00005E18 E801000000          <2>   call CHKMOUS		; check if a byte is available
  7688 00005E1D C3                  <2> ret
  7689                              <2> 
  7690                              <2> CHKMOUS:
  7691 00005E1E B300                <2>   mov  bl, 0
  7692 00005E20 66B96400            <2>   mov cx, 100
  7693                              <2>  .vrd:
  7694 00005E24 E464                <2>   in   al, 0x64		; read from keyboardcontroller
  7695 00005E26 A801                <2>   test al, 1		; check if controller buffer (60h) has data
  7696 00005E28 7504                <2>   jnz .yy
  7697 00005E2A E2F8                <2>   loop .vrd
  7698 00005E2C B301                <2>   mov  bl, 1
  7699                              <2>  .yy:
  7700 00005E2E C3                  <2> ret
  7701                              <2> 
  7702                              <2> GETB:
  7703                              <2>  .cagain:
  7704 00005E2F E8EAFFFFFF          <2>   call CHKMOUS		; check if a byte is available
  7705 00005E34 08DB                <2>   or bl, bl
  7706 00005E36 75F7                <2>   jnz .cagain
  7707 00005E38 B0AD                <2>   mov  al, 0xad		; Disable Keyboard
  7708 00005E3A E664                <2>   out  0x64, al		; write to keyboardcontroller
  7709 00005E3C E8A5FFFFFF          <2>   call CHKPRT		; check if command is progressed (demand!)
  7710 00005E41 6631C0              <2>   xor  ax, ax
  7711 00005E44 E460                <2>   in   al, 0x60		; read ps/2 controller output port (mousebyte)
  7712 00005E46 88C2                <2>   mov  dl, al
  7713 00005E48 B0AE                <2>   mov  al, 0xae		; Enable Keyboard
  7714 00005E4A E664                <2>   out  0x64, al		; write to keyboardcontroller
  7715 00005E4C E895FFFFFF          <2>   call CHKPRT		; check if command is progressed (demand!)
  7716 00005E51 88D0                <2>   mov  al, dl
  7717 00005E53 C3                  <2> ret
  7718                              <2> 
  7719 00005E54 00                  <2> LBUTTON db 0x00	;	Left   button status 1=PRESSED 0=RELEASED
  7720 00005E55 00                  <2> RBUTTON db 0x00	;	Right  button status 1=PRESSED 0=RELEASED
  7721 00005E56 00                  <2> MBUTTON db 0x00	;	Middle button status 1=PRESSED 0=RELEASED
  7722 00005E57 00                  <2> XCOORD  db 0x00	;	the moved distance  (horizontal)
  7723 00005E58 00                  <2> YCOORD  db 0x00	;	the moved distance  (vertical)
  7724                              <1> %endif
  7725                              <1> %include "source/drivers/sound/pcspkr.asm"
  7726                              <2> ;PC Speaker Drivers
  7727                              <2> PCSpeakerRAW:
  7728 00005E59 60                  <2> 	pusha
  7729                              <2> nosoundrep:
  7730 00005E5A 8B35[5D020000]      <2> 	mov esi, [soundpos]
  7731 00005E60 31C9                <2> 	xor ecx, ecx
  7732 00005E62 668B0D[5B020000]    <2> 	mov cx, [soundrepititions]
  7733 00005E69 6683F900            <2> 	cmp cx, 0
  7734 00005E6D 0F8540000000        <2> 	jne near donesetpitch
  7735 00005E73 668B0E              <2> 	mov cx, [esi]
  7736 00005E76 668B5E02            <2> 	mov bx, [esi + 2]
  7737 00005E7A 66890D[5B020000]    <2> 	mov [soundrepititions], cx
  7738 00005E81 83C604              <2> 	add esi, 4
  7739 00005E84 8935[5D020000]      <2> 	mov [soundpos], esi
  7740 00005E8A 3B35[61020000]      <2> 	cmp esi, [soundendpos]
  7741 00005E90 7730                <2> 	ja stopsound
  7742 00005E92 66833D[5B020000]00  <2> 	cmp word [soundrepititions], 0
  7743 00005E9A 74BE                <2> 	je nosoundrep
  7744 00005E9C 6683FB00            <2> 	cmp bx, 0
  7745 00005EA0 740C                <2> 	je nosoundplay
  7746 00005EA2 E83D000000          <2> 	call setpitch
  7747 00005EA7 E846000000          <2> 	call startsound
  7748 00005EAC EB05                <2> 	jmp donesetpitch
  7749                              <2> nosoundplay:
  7750 00005EAE E846000000          <2> 	call killsound
  7751                              <2> donesetpitch:
  7752 00005EB3 6649                <2> 	dec cx
  7753 00005EB5 66890D[5B020000]    <2> 	mov [soundrepititions], cx
  7754 00005EBC 61                  <2> 	popa
  7755 00005EBD E9D7A3FFFF          <2> 	jmp timerinterrupt
  7756                              <2> stopsound:
  7757 00005EC2 31C0                <2> 	xor eax, eax
  7758 00005EC4 66A3[5B020000]      <2> 	mov [soundrepititions], ax
  7759 00005ECA A2[5A020000]        <2> 	mov [soundon], al
  7760 00005ECF A3[5D020000]        <2> 	mov [soundpos], eax
  7761 00005ED4 A3[61020000]        <2> 	mov [soundendpos], eax
  7762 00005ED9 E81B000000          <2> 	call killsound
  7763 00005EDE 61                  <2> 	popa
  7764 00005EDF E9B5A3FFFF          <2> 	jmp timerinterrupt
  7765                              <2> 
  7766                              <2> 
  7767                              <2> setpitch:
  7768 00005EE4 B0B6                <2> 	mov al, 0xB6
  7769 00005EE6 E643                <2> 	out 0x43, al
  7770 00005EE8 6689D8              <2> 	mov ax, bx
  7771 00005EEB E642                <2> 	out 0x42, al
  7772 00005EED 88E0                <2> 	mov al, ah
  7773 00005EEF E642                <2> 	out 0x42, al
  7774 00005EF1 C3                  <2> 	ret
  7775                              <2> startsound:
  7776 00005EF2 E461                <2> 	in al, 0x61
  7777 00005EF4 0C03                <2> 	or al, 3
  7778 00005EF6 E661                <2> 	out 0x61, al
  7779 00005EF8 C3                  <2> 	ret
  7780                              <2> killsound:
  7781 00005EF9 E461                <2> 	in al, 0x61
  7782 00005EFB 24FC                <2> 	and al, 0xFC
  7783 00005EFD E661                <2> 	out 0x61, al
  7784 00005EFF C3                  <2> 	ret
  7785                              <2> 	
  7786                              <1> %ifdef sound.included
  7787                              <1> 	%include "source/drivers/sound/sblaster.asm"
  7788                              <2> ;Sound Blaster Drivers
  7789                              <2> sblaster:
  7790                              <2> .init:
  7791 00005F00 E8D5010000          <2> 		call ResetDSP			;If the system is Sound Blaster 16 compatible, reset the DSP
  7792 00005F05 A2[34610000]        <2> 		mov [SoundBlaster], al	;if the reset worked, show an available card
  7793 00005F0A 3C00                <2> 		cmp al, 0
  7794 00005F0C 7418                <2> 		je .noinit
  7795 00005F0E B0D1                <2> 		mov	al,0D1h 		; turn speaker(s) on
  7796 00005F10 E8F9010000          <2> 		call WriteDSP
  7797 00005F15 B088                <2> 		mov	al,088h 		; Left = 8, Right = 8 (15-highest)
  7798 00005F17 E8AF010000          <2> 		call MstrVol 		; L = Hi Nibble, R = Lo Nibble
  7799 00005F1C BE[275F0000]        <2> 		mov esi, .initmsg
  7800 00005F21 E8B6BEFFFF          <2> 		call print
  7801                              <2> .noinit:
  7802 00005F26 C3                  <2> 		ret
  7803 00005F27 5342313620496E6974- <2> .initmsg db "SB16 Initialized.",10,0
  7804 00005F30 69616C697A65642E0A- <2>
  7805 00005F39 00                  <2>
  7806                              <2> sblaster.cont: ;this function goes to the next available portion of a sound, if necessary
  7807 00005F3A 833D[1F610000]00    <2> 	cmp dword [Length0], 0
  7808 00005F41 0F845F000000        <2> 	je near .done
  7809 00005F47 FF0D[1F610000]      <2> 	dec dword [Length0]
  7810 00005F4D EB08                <2> 	jmp .notodd
  7811                              <2> .oddlength:
  7812 00005F4F 31C9                <2> 	xor ecx, ecx
  7813 00005F51 880D[1E610000]      <2> 	mov [OddLength], cl
  7814                              <2> .notodd:
  7815 00005F57 8B35[25610000]      <2> 	mov esi, [NextMemLoc]
  7816 00005F5D 31C9                <2> 	xor ecx, ecx
  7817 00005F5F 668B0D[23610000]    <2> 	mov cx, [Length1]
  7818 00005F66 D1E9                <2> 	shr ecx, 1
  7819 00005F68 6641                <2> 	inc cx
  7820 00005F6A 31DB                <2> 	xor ebx, ebx
  7821 00005F6C 668B1D[2D610000]    <2> 	mov bx, [SegLoc]
  7822 00005F73 6601CB              <2> 	add bx, cx
  7823 00005F76 66891D[2D610000]    <2> 	mov [SegLoc], bx
  7824 00005F7D 81C300000800        <2> 	add ebx, 0x80000 ;linear address of sb buffer
  7825 00005F83 8935[29610000]      <2> 	mov [MemLoc], esi
  7826 00005F89 89C8                <2> 	mov eax, ecx
  7827 00005F8B 01F0                <2> 	add eax, esi
  7828 00005F8D A3[25610000]        <2> 	mov [NextMemLoc], eax
  7829 00005F92 E833000000          <2> 	call DMACopy
  7830                              <2> 	;call DMAPlay
  7831 00005F97 E8DA000000          <2> 	call PlayDSP
  7832 00005F9C 66BA2E02            <2> 	mov dx, (BasePort+0xE)
  7833 00005FA0 EC                  <2> 	in al, dx ;acknowledge the interrupt 
  7834 00005FA1 E96FA4FFFF          <2> 	jmp handled2 ;it is part of an interrupt routine
  7835                              <2> .done:
  7836 00005FA6 803D[1E610000]01    <2> 	cmp byte [OddLength], 1
  7837 00005FAD 74A0                <2> 	je .oddlength
  7838 00005FAF 31C0                <2> 	xor eax, eax
  7839 00005FB1 66A3[23610000]      <2> 	mov [Length1], ax
  7840 00005FB7 66B8D000            <2> 	mov ax, 0xD0
  7841 00005FBB E84E010000          <2> 	call WriteDSP
  7842 00005FC0 66BA2E02            <2> 	mov dx, (BasePort+0xE)
  7843 00005FC4 EC                  <2> 	in al, dx ;acknowledge the interrupt 
  7844 00005FC5 E94BA4FFFF          <2> 	jmp handled2
  7845                              <2> 	
  7846                              <2> DMACopy:
  7847 00005FCA 66B80800            <2> 		mov ax, LINEAR_SEL
  7848 00005FCE 8EE0                <2> 		mov fs, ax
  7849 00005FD0 C1E902              <2> 		shr ecx, 2
  7850                              <2> .loop:
  7851 00005FD3 8B06                <2> 		mov eax, [esi]
  7852 00005FD5 648903              <2> 		mov [fs:ebx], eax
  7853 00005FD8 83C604              <2> 		add esi, 4
  7854 00005FDB 83C304              <2> 		add ebx, 4
  7855 00005FDE E2F3                <2> 		loop .loop
  7856 00005FE0 66B83000            <2> 		mov ax, NEW_DATA_SEL
  7857 00005FE4 8EE0                <2> 		mov fs, ax
  7858 00005FE6 C3                  <2> 		ret
  7859                              <2> 		
  7860                              <2> 
  7861                              <2> DMAPlay:    ;uses eax ebx edx
  7862 00005FE7 C605[2F610000]00    <2> 		mov	byte [Page1],00h
  7863                              <2> 
  7864 00005FEE B005                <2> 		mov	al,(Channel+4)
  7865 00005FF0 66BA0A00            <2> 		mov	dx,0Ah
  7866 00005FF4 EE                  <2> 		out	dx,al
  7867 00005FF5 30C0                <2> 		xor	al,al
  7868 00005FF7 66BA0C00            <2> 		mov	dx,0Ch
  7869 00005FFB EE                  <2> 		out	dx,al
  7870 00005FFC B059                <2> 		mov	al,ModeReg
  7871 00005FFE 66BA0B00            <2> 		mov	dx,0Bh
  7872 00006002 EE                  <2> 		out	dx,al
  7873 00006003 B800000800          <2> 		mov	eax,0x80000
  7874 00006008 66BA0200            <2> 		mov	dx,AddPort
  7875 0000600C EE                  <2> 		out	dx,al
  7876 0000600D 86C4                <2> 		xchg al,ah
  7877 0000600F EE                  <2> 		out	dx,al
  7878 00006010 B800000800          <2> 		mov	eax,0x80000
  7879 00006015 89C2                <2> 		mov	edx,eax
  7880 00006017 2500000100          <2> 		and	eax,65536
  7881 0000601C 7406                <2> 		jz	MemLocN1
  7882 0000601E FE05[2F610000]      <2> 		inc	byte [Page1]
  7883                              <2> MemLocN1:
  7884 00006024 89D0                <2> 		mov	eax,edx
  7885 00006026 2500000200          <2> 		and	eax,131072
  7886 0000602B 7407                <2> 		jz	MemLocN2
  7887 0000602D 8005[2F610000]02    <2> 		add	byte [Page1],02
  7888                              <2> MemLocN2:
  7889 00006034 89D0                <2> 		mov	eax,edx
  7890 00006036 2500000400          <2> 		and	eax,262144
  7891 0000603B 7407                <2> 		jz	MemLocN3
  7892 0000603D 8005[2F610000]04    <2> 		add	byte [Page1],04
  7893                              <2> MemLocN3:
  7894 00006044 89D0                <2> 		mov	eax,edx
  7895 00006046 2500000800          <2> 		and	eax,524288
  7896 0000604B 7407                <2> 		jz	MemLocN4
  7897 0000604D 8005[2F610000]08    <2> 		add	byte [Page1],08
  7898                              <2> MemLocN4:
  7899 00006054 66BA8300            <2> 		mov	dx,PgPort
  7900 00006058 A0[2F610000]        <2> 		mov	al,[Page1]
  7901 0000605D EE                  <2> 		out	dx,al
  7902 0000605E 66BA0300            <2> 		mov	dx,LenPort
  7903 00006062 66A1[23610000]      <2> 		mov	ax,[Length1]
  7904 00006068 6648                <2> 		dec ax
  7905 0000606A EE                  <2> 		out	dx,al
  7906 0000606B 86C4                <2> 		xchg al,ah
  7907 0000606D EE                  <2> 		out	dx,al
  7908 0000606E 66BA0A00            <2> 		mov	dx,0Ah
  7909 00006072 B001                <2> 		mov	al,Channel
  7910 00006074 EE                  <2> 		out	dx,al
  7911 00006075 C3                  <2> 		ret
  7912                              <2> 		
  7913                              <2> PlayDSP:
  7914 00006076 B040                <2> 		mov	al,40h
  7915 00006078 E891000000          <2> 		call WriteDSP
  7916 0000607D 31D2                <2> 		xor	edx,edx
  7917 0000607F B840420F00          <2> 		mov	eax,1000000
  7918 00006084 8B1D[30610000]      <2> 		mov	ebx,[Freq]
  7919 0000608A 803D[1D610000]00    <2> 		cmp byte [Stereo], 0
  7920 00006091 7402                <2> 		je .nost
  7921 00006093 D1E3                <2> 		shl ebx, 1
  7922                              <2> .nost:
  7923 00006095 F7F3                <2> 		div	ebx
  7924 00006097 89C3                <2> 		mov	ebx,eax
  7925 00006099 B800010000          <2> 		mov	eax,256
  7926 0000609E 29D8                <2> 		sub	eax,ebx
  7927 000060A0 E869000000          <2> 		call WriteDSP
  7928 000060A5 B014                <2> 		mov	al,14h	;write the mode
  7929 000060A7 803D[1D610000]00    <2> 		cmp byte [Stereo], 0
  7930 000060AE 7400                <2> 		je .nost2
  7931                              <2> 		
  7932                              <2> .nost2:
  7933 000060B0 E859000000          <2> 		call WriteDSP
  7934 000060B5 66A1[23610000]      <2> 		mov	ax,[Length1]
  7935 000060BB 66D1E8              <2> 		shr ax, 1
  7936 000060BE E84B000000          <2> 		call WriteDSP
  7937 000060C3 86C4                <2> 		xchg al,ah
  7938 000060C5 E844000000          <2> 		call WriteDSP
  7939 000060CA C3                  <2> 		ret
  7940                              <2> 
  7941                              <2> MstrVol:    ;uses ax dx
  7942 000060CB 6650                <2> 	   push ax
  7943 000060CD 66BA2402            <2> 	   mov	dx,(BasePort+4)
  7944 000060D1 B022                <2> 	   mov	al,22h
  7945 000060D3 EE                  <2> 	   out	dx,al
  7946 000060D4 6658                <2> 	   pop	ax
  7947 000060D6 6642                <2> 	   inc	dx
  7948 000060D8 EE                  <2> 	   out	dx,al
  7949 000060D9 C3                  <2> 	   ret
  7950                              <2> 	   
  7951                              <2> ResetDSP:   ; uses cx dx
  7952 000060DA 66BA2602            <2> 			mov	dx,(BasePort+6)
  7953 000060DE B001                <2> 			mov	al,01
  7954 000060E0 EE                  <2> 			out	dx,al
  7955 000060E1 66B93200            <2> 			mov	cx,50
  7956 000060E5 EC                  <2> WaitIt1:	in	al,dx
  7957 000060E6 E2FD                <2> 			loop WaitIt1
  7958 000060E8 30C0                <2> 			xor	al,al
  7959 000060EA EE                  <2> 			out	dx,al
  7960 000060EB 66B93200            <2> 			mov	cx,50
  7961 000060EF EC                  <2> WaitIt2:	in	al,dx
  7962 000060F0 E2FD                <2> 			loop WaitIt2
  7963 000060F2 B4FF                <2> 			mov	ah,0FFh 		; part of Return Code
  7964 000060F4 66BA2E02            <2> 			mov	dx,(BasePort+14)
  7965 000060F8 EC                  <2> 			in	al,dx
  7966 000060F9 2480                <2> 			and	al,80h
  7967 000060FB 3C80                <2> 			cmp	al,80h
  7968 000060FD 750C                <2> 			jne	ResetErr
  7969 000060FF 66BA2A02            <2> 			mov	dx,(BasePort+10)
  7970 00006103 EC                  <2> 			in	al,dx
  7971 00006104 3CAA                <2> 			cmp	al,0AAh
  7972 00006106 7503                <2> 			jne	ResetErr
  7973 00006108 B001                <2> ResetOK:	mov al, 1		; return ax = 0 if reset ok
  7974 0000610A C3                  <2> 			ret
  7975 0000610B 30C0                <2> ResetErr:	xor al, al
  7976 0000610D C3                  <2> 			ret
  7977                              <2> 
  7978                              <2> WriteDSP:   ;uses ax dx
  7979 0000610E 6650                <2> 		push ax
  7980 00006110 66BA2C02            <2> 		mov	dx,(BasePort+12)
  7981 00006114 EC                  <2> WaitIt:	in	al,dx
  7982 00006115 2480                <2> 		and	al,80h
  7983 00006117 75FB                <2> 		jnz	WaitIt
  7984 00006119 6658                <2> 		pop	ax
  7985 0000611B EE                  <2> 		out	dx,al
  7986 0000611C C3                  <2> 		ret
  7987                              <2> 
  7988 0000611D 00                  <2> Stereo db 0
  7989 0000611E 00                  <2> OddLength db 0
  7990 0000611F 00000000            <2> Length0 dd	0
  7991 00006123 0000                <2> Length1	dw  0
  7992 00006125 00000000            <2> NextMemLoc dd 0
  7993 00006129 00000000            <2> MemLoc	dd  0
  7994 0000612D 0000                <2> SegLoc  dw 0
  7995 0000612F 00                  <2> Page1	db  0
  7996 00006130 00000000            <2> Freq	dd	0
  7997                              <2> PgPort	equ 83h
  7998                              <2> AddPort	equ 02h
  7999                              <2> LenPort	equ 03h
  8000                              <2> ModeReg	equ 59h
  8001                              <2> Channel	equ 01h
  8002                              <2> BasePort	equ 220h
  8003 00006134 00                  <2> SoundBlaster	db 0
  8004                              <1> %endif
  8005                              <1> %ifdef io.serial
  8006                              <1> 	%include "source/drivers/input/serial.asm"
  8007                              <1> %else
  8008                              <1> 	%include "source/drivers/input/keyboard.asm"
  8009 00006135 00                  <2> specialkey db 0
  8010                              <2> ;charregion db 0
  8011                              <2> waitforinput:		;this is basically the idle process
  8012                              <2> 					;this halts the cpu for a small amount of time and then sees if there was a keypress
  8013                              <2> 					;this lets the cpu stay at close to 0% instead of 100%
  8014 00006136 6631C0              <2> 	xor ax, ax
  8015 00006139 A0[806C0000]        <2> 	mov al, [threadson]
  8016 0000613E 8825[806C0000]      <2> 	mov [threadson], ah
  8017 00006144 9C                  <2> 	pushf
  8018 00006145 FB                  <2> 	sti
  8019 00006146 F4                  <2> 	hlt
  8020 00006147 9D                  <2> 	popf
  8021 00006148 A2[806C0000]        <2> 	mov [threadson], al
  8022 0000614D 66833D[1C240000]00  <2> 	cmp word [trans], 0
  8023 00006155 7401                <2> 	je getkey
  8024 00006157 C3                  <2> 	ret
  8025                              <2> getkey:
  8026 00006158 31C0                <2> 		xor eax, eax
  8027 0000615A A2[35610000]        <2> 		mov [specialkey], al
  8028 0000615F A3[18240000]        <2> 		mov [lastkey], eax
  8029 00006164 E464                <2> 		in al, 64h ; Status
  8030                              <2> 	%ifdef gui.included
  8031 00006166 A820                <2> 		test al, 20h ; PS2-Mouse?
  8032 00006168 0F8544FAFFFF        <2> 		jnz near moused
  8033                              <2> 	%endif
  8034 0000616E A801                <2> 		test al, 1 
  8035 00006170 74C4                <2> 		jz waitforinput ; if output buffer full or no keypress, jump to idle process
  8036                              <2> 	calckey:
  8037 00006172 E460                <2> 		in al, 60h
  8038 00006174 30E4                <2> 		xor ah, ah
  8039 00006176 6689C3              <2> 		mov bx, ax
  8040 00006179 66A3[1A240000]      <2> 		mov [lastkey + 2], ax
  8041 0000617F BF[FC620000]        <2> 		mov edi, scancode
  8042                              <2> 	searchscan: 
  8043 00006184 80FB3A              <2> 		cmp bl, 3Ah
  8044 00006187 7314                <2> 		jae scanother
  8045 00006189 C1E004              <2> 		shl eax, 4
  8046 0000618C 01C7                <2> 		add edi, eax
  8047 0000618E 668B07              <2> 		mov ax, [edi]
  8048 00006191 6683F800            <2> 		cmp ax, 0
  8049 00006195 7406                <2> 		je scanother
  8050 00006197 E9D0000000          <2> 		jmp scanfound
  8051 0000619C 00                  <2> uppercase db 0
  8052                              <2> scanother:
  8053 0000619D 6631C0              <2> 		xor ax, ax
  8054 000061A0 66A3[18240000]      <2> 		mov [lastkey], ax
  8055 000061A6 80FBE0              <2> 		cmp bl, 0E0h
  8056 000061A9 0F8477000000        <2> 		je near getkeyspecial
  8057 000061AF 803D[35610000]E0    <2> 		cmp byte [specialkey], 0xE0
  8058 000061B6 7525                <2> 		jne nospecialkey
  8059 000061B8 80FB38              <2> 		cmp bl, 38h
  8060 000061BB 0F849A000000        <2> 		je near alton
  8061 000061C1 80FBB8              <2> 		cmp bl, 0B8h
  8062 000061C4 0F8499000000        <2> 		je near altoff
  8063 000061CA 80FB1D              <2> 		cmp bl, 1Dh
  8064 000061CD 0F8478000000        <2> 		je near ctron
  8065 000061D3 80FB9D              <2> 		cmp bl, 9Dh
  8066 000061D6 0F8477000000        <2> 		je near ctroff
  8067 000061DC C3                  <2> 		ret
  8068                              <2> nospecialkey:
  8069 000061DD 80FB2A              <2> 		cmp bl, 2Ah
  8070 000061E0 0F8455000000        <2> 		je near shifton
  8071 000061E6 80FB36              <2> 		cmp bl, 36h
  8072 000061E9 0F844C000000        <2> 		je near shifton
  8073 000061EF 80FB1C              <2> 		cmp bl, 1Ch
  8074 000061F2 0F8473000000        <2> 		je near entdown
  8075 000061F8 80FBAA              <2> 		cmp bl, 0AAh
  8076 000061FB 0F8442000000        <2> 		je near shiftoff
  8077 00006201 80FBB6              <2> 		cmp bl, 0B6h
  8078 00006204 0F8439000000        <2> 		je near shiftoff
  8079 0000620A 80FB3A              <2> 		cmp bl, 3Ah
  8080 0000620D 0F8495000000        <2> 		je near capslock
  8081 00006213 80FB45              <2> 		cmp bl, 0x45
  8082 00006216 0F849D000000        <2> 		je near numlock
  8083 0000621C 80FB46              <2> 		cmp bl, 0x46
  8084 0000621F 0F84AC000000        <2> 		je near scrolllock
  8085 00006225 C3                  <2> 		ret
  8086                              <2> 	getkeyspecial:
  8087 00006226 C605[35610000]E0    <2> 		mov byte [specialkey], 0xE0
  8088 0000622D E940FFFFFF          <2> 		jmp calckey
  8089                              <2> 	shift:
  8090 00006232 A0[9C610000]        <2> 		mov al, [uppercase]
  8091 00006237 3C01                <2> 		cmp al, 1
  8092 00006239 7308                <2> 		jae shiftoff
  8093                              <2> 	shifton:
  8094 0000623B C605[9C610000]01    <2> 		mov byte [uppercase], 1
  8095 00006242 C3                  <2> 		ret
  8096                              <2> 	shiftoff:
  8097 00006243 C605[9C610000]00    <2> 		mov byte [uppercase], 0
  8098 0000624A C3                  <2> 		ret
  8099                              <2> 	ctron:
  8100 0000624B C605[A7620000]01    <2> 		mov byte [ctrkey], 1
  8101 00006252 C3                  <2> 		ret
  8102                              <2> 	ctroff:
  8103 00006253 C605[A7620000]00    <2> 		mov byte [ctrkey], 0
  8104 0000625A C3                  <2> 		ret
  8105                              <2> 	alton:
  8106 0000625B C605[A6620000]01    <2> 		mov byte [altkey], 1
  8107 00006262 C3                  <2> 		ret
  8108                              <2> 	altoff:
  8109 00006263 C605[A6620000]00    <2> 		mov byte [altkey], 0
  8110 0000626A C3                  <2> 		ret
  8111                              <2> 	entdown:
  8112 0000626B C3                  <2> 		ret
  8113                              <2> scanfound:
  8114 0000626C 83C708              <2> 		add edi, 8
  8115 0000626F 803D[A7620000]01    <2> 		cmp byte [ctrkey], 1
  8116 00006276 7303                <2> 		jae ctrlin
  8117 00006278 83EF08              <2> 		sub edi, 8
  8118                              <2> 	ctrlin:
  8119 0000627B 83C704              <2> 		add edi, 4
  8120 0000627E 803D[A6620000]01    <2> 		cmp byte [altkey], 1
  8121 00006285 7303                <2> 		jae altin
  8122 00006287 83EF04              <2> 		sub edi, 4
  8123                              <2> 	altin:
  8124 0000628A 83C702              <2> 		add edi, 2
  8125 0000628D 803D[9C610000]01    <2> 		cmp byte [uppercase], 1
  8126 00006294 7303                <2> 		jae uppercaseon
  8127 00006296 83EF02              <2> 		sub edi, 2
  8128                              <2> 	uppercaseon:
  8129 00006299 668B07              <2> 		mov ax,[edi]
  8130 0000629C 66A3[18240000]      <2> 		mov [lastkey], ax
  8131 000062A2 C3                  <2> 		ret
  8132                              <2> 		
  8133 000062A3 00                  <2> keyboardstatus db 0
  8134 000062A4 00                  <2> numlockstatus db 0
  8135 000062A5 00                  <2> scrolllockstatus db 0
  8136 000062A6 00                  <2> altkey db 0
  8137 000062A7 00                  <2> ctrkey db 0
  8138                              <2> 	capslock:
  8139 000062A8 8035[A3620000]04    <2> 		xor byte [keyboardstatus], 00000100b
  8140 000062AF E835000000          <2> 		call updatekblights
  8141 000062B4 E979FFFFFF          <2> 		jmp shift
  8142                              <2> 		
  8143                              <2> 	numlock:
  8144 000062B9 8035[A3620000]02    <2> 		xor byte [keyboardstatus], 00000010b
  8145 000062C0 8035[A4620000]01    <2> 		xor byte [numlockstatus], 1
  8146 000062C7 E81D000000          <2> 		call updatekblights
  8147 000062CC E987FEFFFF          <2> 		jmp getkey
  8148                              <2> 	
  8149                              <2> 	scrolllock:
  8150 000062D1 8035[A3620000]01    <2> 		xor byte [keyboardstatus], 00000001b
  8151 000062D8 8035[A5620000]01    <2> 		xor byte [scrolllockstatus], 1
  8152 000062DF E805000000          <2> 		call updatekblights
  8153 000062E4 E96FFEFFFF          <2> 		jmp getkey
  8154                              <2> 		
  8155                              <2> 	updatekblights:
  8156 000062E9 B0ED                <2> 		mov al, 0xED
  8157 000062EB 66BA6000            <2> 		mov dx, 0x60
  8158 000062EF EE                  <2> 		out dx, al
  8159                              <2> 	chkkbdack:
  8160 000062F0 EC                  <2> 		in al, dx
  8161 000062F1 3CFA                <2> 		cmp al, 0xFA
  8162 000062F3 75FB                <2> 		jne chkkbdack
  8163 000062F5 A0[A3620000]        <2> 		mov al, [keyboardstatus]
  8164 000062FA EE                  <2> 		out dx, al
  8165 000062FB C3                  <2> 		ret
  8166                              <2> 		
  8167                              <2> scancode:
  8168                              <2> 	;key, KEY, alt key, ALT KEY, ctrl key, CTRL KEY, ctrl-alt, CTRL-ALT
  8169 000062FC 000000000000000000- <2> 	dw 0,0,0,0,0,0,0,0
  8170 00006305 00000000000000      <2>
  8171 0000630C 000000000000000000- <2> 	dw 0,0,0,0,0,0,0,0
  8172 00006315 00000000000000      <2>
  8173 0000631C 31002100A1003C2000- <2> 	dw '1','!',0xA1,0x203C,0,0,0,0
  8174 00006325 00000000000000      <2>
  8175 0000632C 32004000B2001A2200- <2> 	dw '2','@',0xB2,0x221A,0,0,0,0
  8176 00006335 00000000000000      <2>
  8177 0000633C 33002300B3002B2200- <2> 	dw '3','#',0xB3,0x222B,0,0,0,0
  8178 00006345 00000000000000      <2>
  8179 0000634C 34002400A300A20000- <2> 	dw '4','$',0xA3,0xA2,0,0,0,0
  8180 00006355 00000000000000      <2>
  8181 0000635C 35002500AC20000000- <2> 	dw '5','%',0x20AC,0,0,0,0,0
  8182 00006365 00000000000000      <2>
  8183 0000636C 36005E00BC007F2000- <2> 	dw '6','^',0xBC,0x207F,0,0,0,0
  8184 00006375 00000000000000      <2>
  8185 0000637C 37002600BD00000000- <2> 	dw '7','&',0xBD,0,0,0,0,0
  8186 00006385 00000000000000      <2>
  8187 0000638C 38002A001E22950000- <2> 	dw '8','*',0x221E,0x95,0,0,0,0
  8188 00006395 00000000000000      <2>
  8189 0000639C 39002800AE00990000- <2> 	dw '9','(',0xAE,0x99,0,0,0,0
  8190 000063A5 00000000000000      <2>
  8191 000063AC 30002900A900000000- <2> 	dw '0',')',0xA9,0,0,0,0,0
  8192 000063B5 00000000000000      <2>
  8193 000063BC 2D005F00A500B10000- <2> 	dw '-','_',0xA5,0xB1,0,0,0,0
  8194 000063C5 00000000000000      <2>
  8195 000063CC 3D002B00F700482200- <2> 	dw '=','+',0xF7,0x2248,0,0,0,0
  8196 000063D5 00000000000000      <2>
  8197 000063DC 080008000000000000- <2> 	dw 8,8,0,0,0,0,0,0
  8198 000063E5 00000000000000      <2>
  8199 000063EC 000000000000000000- <2> 	dw 0,0,0,0,0,0,0,0
  8200 000063F5 00000000000000      <2>
  8201 000063FC 71005100E400C4003B- <2> 	dw 'q','Q',0xE4,0xC4,';',':',0x439,0x419
  8202 00006404 003A0039041904      <2>
  8203 0000640C 77005700E500C500C2- <2> 	dw 'w','W',0xE5,0xC5,0x3C2,0,0x446,0x426
  8204 00006415 03000046042604      <2>
  8205 0000641C 65004500E900C900B5- <2> 	dw 'e','E',0xE9,0xC9,0x3B5,0x395,0x443,0x423
  8206 00006425 03950343042304      <2>
  8207 0000642C 72005200EB00E800C1- <2> 	dw 'r','R',0xEB,0xE8,0x3C1,0x3A1,0x43A,0x41A
  8208 00006435 03A1033A041A04      <2>
  8209 0000643C 74005400FC00DC00C4- <2> 	dw 't','T',0xFC,0xDC,0x3C4,0x3A4,0x435,0x415
  8210 00006445 03A40335041504      <2>
  8211 0000644C 79005900FF009F00C5- <2> 	dw 'y','Y',0xFF,0x9F,0x3C5,0x3A5,0x43D,0x41D
  8212 00006455 03A5033D041D04      <2>
  8213 0000645C 75005500FA00F900B8- <2> 	dw 'u','U',0xFA,0xF9,0x3B8,0x398,0x433,0x413
  8214 00006465 03980333041304      <2>
  8215 0000646C 69004900ED00EC00B9- <2> 	dw 'i','I',0xED,0xEC,0x3B9,0x399,0x448,0x428
  8216 00006475 03990348042804      <2>
  8217 0000647C 6F004F00F300F200BF- <2> 	dw 'o','O',0xF3,0xF2,0x3BF,0x39F,0x449,0x429
  8218 00006485 039F0349042904      <2>
  8219 0000648C 70005000F600D600C0- <2> 	dw 'p','P',0xF6,0xD6,0x3C0,0x3A0,0x437,0x417
  8220 00006495 03A00337041704      <2>
  8221 0000649C 5B007B00AB00000000- <2> 	dw '[','{',0xAB,0,0,0,0x445,0x425
  8222 000064A5 00000045042504      <2>
  8223 000064AC 5D007D00BB00000000- <2> 	dw ']','}',0xBB,0,0,0,0x44A,0x42A
  8224 000064B5 0000004A042A04      <2>
  8225 000064BC 000000000000000000- <2> 	dw 0,0,0,0,0,0,0,0
  8226 000064C5 00000000000000      <2>
  8227 000064CC 000000000000000000- <2> 	dw 0,0,0,0,0,0,0,0
  8228 000064D5 00000000000000      <2>
  8229 000064DC 61004100E100E000B1- <2> 	dw 'a','A',0xE1,0xE0,0x3B1,0x391,0x444,0x424
  8230 000064E5 03910344042404      <2>
  8231 000064EC 73005300A7000000C3- <2> 	dw 's','S',0xA7,0,0x3C3,0x3A3,0x44B,0x42B
  8232 000064F5 03A3034B042B04      <2>
  8233 000064FC 64004400B0000000B4- <2> 	dw 'd','D',0xB0,0,0x3B4,0x394,0x432,0x412
  8234 00006505 03940332041204      <2>
  8235 0000650C 6600460083004026C6- <2> 	dw 'f','F',0x83,0x2640,0x3C6,0x3A6,0x430,0x410
  8236 00006515 03A60330041004      <2>
  8237 0000651C 6700470000000000B3- <2> 	dw 'g','G',0,0,0x3B3,0x393,0x43F,0x41F
  8238 00006525 0393033F041F04      <2>
  8239 0000652C 6800480000000000B7- <2> 	dw 'h','H',0,0,0x3B7,0x397,0x440,0x420
  8240 00006535 03970340042004      <2>
  8241 0000653C 6A004A0000000000BE- <2> 	dw 'j','J',0,0,0x3BE,0x39E,0x43E,0x41E
  8242 00006545 039E033E041E04      <2>
  8243 0000654C 6B004B0000000000BA- <2> 	dw 'k','K',0,0,0x3BA,0x39A,0x43B,0x41B
  8244 00006555 039A033B041B04      <2>
  8245 0000655C 6C004C0000000000BB- <2> 	dw 'l','L',0,0,0x3BB,0x39B,0x434,0x414
  8246 00006565 039B0334041404      <2>
  8247 0000656C 3B003A00B6000E2200- <2> 	dw ';',':',0xB6,0x220E,0,0,0x436,0x416
  8248 00006575 00000036041604      <2>
  8249 0000657C 270022000000000000- <2> 	dw "'",'"',0,0,0,0,0x44D,0x42D
  8250 00006585 0000004D042D04      <2>
  8251 0000658C 60007E000000000000- <2> 	dw '`','~',0,0,0,0,0x451,0x401
  8252 00006595 00000051040104      <2>
  8253 0000659C 000000000000000000- <2> 	dw 0,0,0,0,0,0,0,0
  8254 000065A5 00000000000000      <2>
  8255 000065AC 5C007C00AC00A60000- <2> 	dw "\",'|',0xAC,0xA6,0,0,"/","\"
  8256 000065B5 0000002F005C00      <2>
  8257 000065BC 7A005A00E600C600B6- <2> 	dw 'z','Z',0xE6,0xC6,0x3B6,0x396,0x44F,0x42F
  8258 000065C5 0396034F042F04      <2>
  8259 000065CC 7800580000000000C7- <2> 	dw 'x','X',0,0,0x3C7,0x3A7,0x447,0x427
  8260 000065D5 03A70347042704      <2>
  8261 000065DC 63004300E700C700C8- <2> 	dw 'c','C',0xE7,0xC7,0x3C8,0x3A8,0x441,0x421
  8262 000065E5 03A80341042104      <2>
  8263 000065EC 7600560000000000C9- <2> 	dw 'v','V',0,0,0x3C9,0x3A9,0x43C,0x41C
  8264 000065F5 03A9033C041C04      <2>
  8265 000065FC 6200420000000000B2- <2> 	dw 'b','B',0,0,0x3B2,0x392,0x438,0x418
  8266 00006605 03920338041804      <2>
  8267 0000660C 6E004E00F100D100BD- <2> 	dw 'n','N',0xF1,0xD1,0x3BD,0x39D,0x442,0x422
  8268 00006615 039D0342042204      <2>
  8269 0000661C 6D004D006C264226BC- <2> 	dw 'm','M',0x266C,0x2642,0x3BC,0x39C,0x44C,0x42C
  8270 00006625 039C034C042C04      <2>
  8271 0000662C 2C003C006422000000- <2> 	dw ',','<',0x2264,0,0,0,0x431,0x411
  8272 00006635 00000031041104      <2>
  8273 0000663C 2E003E006522000000- <2> 	dw '.','>',0x2265,0,0,0,0x44E,0x42E
  8274 00006645 0000004E042E04      <2>
  8275 0000664C 2F003F00BF00000000- <2> 	dw '/','?',0xBF,0,0,0,'.',','
  8276 00006655 0000002E002C00      <2>
  8277 0000665C 000000000000000000- <2> 	dw 0,0,0,0,0,0,0,0
  8278 00006665 00000000000000      <2>
  8279 0000666C 000000000000000000- <2> 	dw 0,0,0,0,0,0,0,0
  8280 00006675 00000000000000      <2>
  8281 0000667C 000000000000000000- <2> 	dw 0,0,0,0,0,0,0,0
  8282 00006685 00000000000000      <2>
  8283 0000668C 200020000000000000- <2> 	dw ' ',' ',0,0,0,0,0,0
  8284 00006695 00000000000000      <2>
  8285                              <2> noscan:
  8286                              <2> 
  8287                              <1> %endif
  8288                              <1> ;drivers will soon be handled intelligently
  8289                              <1> ;every driver's source will be scanned for a .init function
  8290                              <1> ;that will be called and if it returns 0
  8291                              <1> ;the hardware was found and the driver initialized properly
  8292                              <1> initializelater: ;these have debugging messages and should be initialized after the screen
  8293                              <1> 	%ifdef sound.included
  8294 0000669C E85FF8FFFF          <1> 		call sblaster.init
  8295                              <1> 	%endif
  8296                              <1> 	%ifdef network.included
  8297 000066A1 E847230000          <1> 		call network.init
  8298                              <1> 	%endif
  8299 000066A6 C3                  <1> 	ret
  8300                              <1> initialize:
  8301                              <1> ;Now I will initialise the interrupt controllers and remap irq's
  8302 000066A7 E83E000000          <1> 	call .pic
  8303                              <1> %ifdef terminal.vsync
  8304 000066AC E862000000          <1> 	call .rtc
  8305                              <1> %endif
  8306 000066B1 E892000000          <1> 	call .pit
  8307 000066B6 E8B4000000          <1> 	call .fpu
  8308 000066BB E8C5000000          <1> 	call .sse
  8309 000066C0 31C0                <1> 	xor eax, eax
  8310 000066C2 31C9                <1> 	xor ecx, ecx
  8311                              <1> %ifdef io.serial
  8312                              <1> 	call serial.init
  8313                              <1> %endif
  8314 000066C4 E801000000          <1> 	call .time
  8315 000066C9 C3                  <1> 	ret
  8316                              <1> 	
  8317                              <1> .time:
  8318 000066CA E8B6DAFFFF          <1> 	call time
  8319 000066CF E859DCFFFF          <1> 	call timeconvert
  8320 000066D4 890D[52020000]      <1> 	mov [timeseconds], ecx
  8321 000066DA 31C9                <1> 	xor ecx, ecx
  8322 000066DC 890D[56020000]      <1> 	mov [timenanoseconds], ecx
  8323 000066E2 C605[CD400000]01    <1> 	mov byte [istimeset], 1
  8324 000066E9 C3                  <1> 	ret
  8325                              <1> 	
  8326                              <1> .pic:
  8327 000066EA B011                <1> 	mov al, 0x11
  8328 000066EC E620                <1> 	out 0x20, al
  8329 000066EE E6A0                <1> 	out 0xA0, al
  8330 000066F0 B040                <1> 	mov al, 0x40	;interrupt for master
  8331 000066F2 E621                <1> 	out 0x21, al
  8332 000066F4 B048                <1> 	mov al, 0x48	;interrupt for slave
  8333 000066F6 E6A1                <1> 	out 0xA1, al
  8334 000066F8 B004                <1> 	mov al, 4
  8335 000066FA E621                <1> 	out 0x21, al
  8336 000066FC B002                <1> 	mov al, 2
  8337 000066FE E6A1                <1> 	out 0xA1, al
  8338 00006700 B001                <1> 	mov al, 0x1
  8339 00006702 E621                <1> 	out 0x21, al
  8340 00006704 E6A1                <1> 	out 0xA1, al
  8341                              <1> 	;masks are set to zero so as not to mask
  8342 00006706 30C0                <1> 	xor al, al
  8343 00006708 E621                <1> 	out 0x21, al
  8344 0000670A E6A1                <1> 	out 0xA1, al
  8345 0000670C B020                <1> 	mov al, 0x20
  8346 0000670E E6A0                <1> 	out 0xA0, al
  8347 00006710 E620                <1> 	out 0x20, al
  8348 00006712 C3                  <1> 	ret
  8349                              <1> .rtc:
  8350 00006713 B008                <1> 	mov al, 0x8
  8351 00006715 88C4                <1> 	mov ah, al
  8352 00006717 66BA7000            <1> 	mov dx, 0x70
  8353 0000671B EE                  <1> 	out dx, al
  8354 0000671C 6642                <1> 	inc dx
  8355 0000671E EC                  <1> 	in al, dx
  8356 0000671F 86C4                <1> 	xchg al, ah
  8357 00006721 664A                <1> 	dec dx
  8358 00006723 EE                  <1> 	out dx, al
  8359 00006724 6642                <1> 	inc dx
  8360 00006726 86C4                <1> 	xchg al, ah
  8361 00006728 0C40                <1> 	or al, 0x40
  8362 0000672A EE                  <1> 	out dx, al
  8363                              <1> 	
  8364 0000672B B00A                <1> 	mov al, 0xA
  8365 0000672D 664A                <1> 	dec dx
  8366 0000672F EE                  <1> 	out dx, al
  8367 00006730 86C4                <1> 	xchg al, ah
  8368 00006732 6642                <1> 	inc dx
  8369 00006734 EC                  <1> 	in al, dx
  8370 00006735 24F0                <1> 	and al, 0xF0
  8371 00006737 0A05[06030000]      <1> 	or al, [rtcrate]
  8372 0000673D 86C4                <1> 	xchg al, ah
  8373 0000673F 664A                <1> 	dec dx
  8374 00006741 EE                  <1> 	out dx, al
  8375 00006742 6642                <1> 	inc dx
  8376 00006744 86C4                <1> 	xchg al, ah
  8377 00006746 EE                  <1> 	out dx, al
  8378 00006747 C3                  <1> 	ret
  8379                              <1> 	
  8380                              <1> .pit:
  8381                              <1> 	;initialize the PIT
  8382 00006748 66A1[4C020000]      <1> 	mov ax, [pitdiv] ;this is the divider for the PIT
  8383 0000674E E640                <1> 	out 0x40, al
  8384 00006750 66C1C008            <1> 	rol ax, 8
  8385 00006754 E640                <1> 	out 0x40, al
  8386                              <1> 	;enable rtc interrupt
  8387 00006756 B00B                <1> 	mov al, 0xB
  8388 00006758 E670                <1> 	out 0x70, al
  8389 0000675A 66C1C008            <1> 	rol ax, 8
  8390 0000675E E471                <1> 	in al, 0x71
  8391 00006760 66C1C008            <1> 	rol ax, 8
  8392 00006764 E670                <1> 	out 0x70, al
  8393 00006766 66C1C008            <1> 	rol ax, 8
  8394 0000676A 0C40                <1> 	or al, 0x40
  8395 0000676C E671                <1> 	out 0x71, al
  8396 0000676E C3                  <1> 	ret
  8397                              <1> .fpu:
  8398                              <1> 	;And now to initialize the fpu
  8399 0000676F 0F20E0              <1> 	mov eax, cr4
  8400 00006772 0D00020000          <1> 	or eax, 0x200
  8401 00006777 0F22E0              <1> 	mov cr4, eax
  8402 0000677A B87F0B0000          <1> 	mov eax, 0xB7F
  8403 0000677F 50                  <1> 	push eax
  8404 00006780 D92C24              <1> 	fldcw [esp]
  8405 00006783 58                  <1> 	pop eax
  8406 00006784 C3                  <1> 	ret
  8407                              <1> 	
  8408                              <1> .sse:
  8409 00006785 0F20C0              <1> 	mov eax, cr0
  8410 00006788 24FB                <1> 	and al, 11111011b
  8411 0000678A 0C02                <1> 	or al, 00000010b
  8412 0000678C 0F22C0              <1> 	mov cr0, eax
  8413 0000678F 0F20E0              <1> 	mov eax, cr4
  8414 00006792 660D0006            <1> 	or ax, 0000011000000000b
  8415 00006796 0F22E0              <1> 	mov cr4, eax
  8416 00006799 C3                  <1> 	ret
  8417                                  %include "source/pci.asm"
  8418 0000679A 00                  <1> pcibus		db 0
  8419 0000679B 00                  <1> pcidevice	db 0
  8420 0000679C 00                  <1> pcifunction	db 0
  8421 0000679D 00                  <1> pciregister	db 0
  8422 0000679E 00                  <1> pcireqtype	db 0
  8423 0000679F 00000000            <1> pcidevid	dd 0
  8424 000067A3 FFFFFFFF            <1> pcidevidmask dd 0xFFFFFFFF
  8425                              <1> getpcimem:
  8426 000067A7 B002                <1> 	mov al, 2
  8427 000067A9 A2[9E670000]        <1> 	mov [pcireqtype], al
  8428 000067AE EB1F                <1> 	jmp searchpci
  8429                              <1> getpciport:
  8430 000067B0 B001                <1> 	mov al, 1
  8431 000067B2 A2[9E670000]        <1> 	mov [pcireqtype], al
  8432 000067B7 EB16                <1> 	jmp searchpci
  8433                              <1> pcidump:
  8434 000067B9 31C0                <1> 	xor eax, eax
  8435 000067BB A2[9C670000]        <1> 	mov [pcifunction], al
  8436 000067C0 A2[9A670000]        <1> 	mov [pcibus], al
  8437 000067C5 A2[9B670000]        <1> 	mov [pcidevice], al
  8438 000067CA A2[9E670000]        <1> 	mov [pcireqtype], al
  8439                              <1> searchpci:		;return in ebx, start X in pciX
  8440 000067CF 30C0                <1> 	xor al, al
  8441 000067D1 A2[9D670000]        <1> 	mov [pciregister], al
  8442 000067D6 E80F020000          <1> 	call getpciaddr
  8443 000067DB BAF80C0000          <1> 	mov edx, 0xCF8
  8444 000067E0 EF                  <1> 	out dx, eax	;request pci config
  8445 000067E1 BAFC0C0000          <1> 	mov edx, 0xCFC
  8446 000067E6 ED                  <1> 	in eax, dx 	;read in pci config
  8447 000067E7 3D0000FFFF          <1> 	cmp eax, 0xFFFF0000
  8448 000067EC 0F8237000000        <1> 	jb near checkpcidevice
  8449                              <1> searchpciret:
  8450                              <1> nextpcidevice:
  8451 000067F2 30C0                <1> 	xor al, al
  8452 000067F4 A2[9C670000]        <1> 	mov [pcifunction], al
  8453 000067F9 A0[9B670000]        <1> 	mov al, [pcidevice]
  8454 000067FE 3C1F                <1> 	cmp al, 11111b
  8455 00006800 0F8300010000        <1> 	jae near nextpcibus
  8456 00006806 FEC0                <1> 	inc al
  8457 00006808 A2[9B670000]        <1> 	mov [pcidevice], al
  8458 0000680D EBC0                <1> 	jmp searchpci
  8459 0000680F A0[9C670000]        <1> 	mov al, [pcifunction]
  8460 00006814 3C07                <1> 	cmp al, 111b
  8461 00006816 0F83D6FFFFFF        <1> 	jae near nextpcidevice
  8462 0000681C FEC0                <1> 	inc al
  8463 0000681E A2[9C670000]        <1> 	mov [pcifunction], al
  8464 00006823 EBAA                <1> 	jmp searchpci
  8465 00006825 00000000            <1> pcitype: db 0,0,0,0
  8466                              <1> checkpcidevice:
  8467 00006829 31C0                <1> 	xor eax, eax
  8468 0000682B 3905[9F670000]      <1> 	cmp [pcidevid], eax
  8469 00006831 0F8430000000        <1> 	je near .good
  8470 00006837 A2[9D670000]        <1> 	mov [pciregister], al	;device id, vendor id
  8471 0000683C E8A9010000          <1> 	call getpciaddr
  8472 00006841 BAF80C0000          <1> 	mov edx, 0xCF8
  8473 00006846 EF                  <1> 	out dx, eax
  8474 00006847 BAFC0C0000          <1> 	mov edx, 0xCFC
  8475 0000684C ED                  <1> 	in eax, dx
  8476 0000684D 2305[A3670000]      <1> 	and eax, [pcidevidmask]
  8477 00006853 8B1D[9F670000]      <1> 	mov ebx, [pcidevid]
  8478 00006859 231D[A3670000]      <1> 	and ebx, [pcidevidmask]
  8479 0000685F 39D8                <1> 	cmp eax, ebx
  8480 00006861 0F858BFFFFFF        <1> 	jne near searchpciret
  8481                              <1> .good:
  8482 00006867 30C0                <1> 	xor al, al
  8483 00006869 3805[9E670000]      <1> 	cmp [pcireqtype], al
  8484 0000686F 0F842C000000        <1> 	je near dumppcidevice
  8485 00006875 B008                <1> 	mov al, 0x08
  8486 00006877 A2[9D670000]        <1> 	mov [pciregister], al	;class code, subclass, revision id
  8487 0000687C E869010000          <1> 	call getpciaddr
  8488 00006881 BAF80C0000          <1> 	mov edx, 0xCF8
  8489 00006886 EF                  <1> 	out dx, eax
  8490 00006887 BAFC0C0000          <1> 	mov edx, 0xCFC
  8491 0000688C ED                  <1> 	in eax, dx
  8492 0000688D C1C008              <1> 	rol eax, 8
  8493 00006890 3A05[25680000]      <1> 	cmp al, [pcitype]
  8494 00006896 0F84A0000000        <1> 	je near foundpciaddr
  8495 0000689C E951FFFFFF          <1> 	jmp searchpciret
  8496                              <1> dumppcidevice:
  8497 000068A1 30C0                <1> 	xor al, al
  8498 000068A3 A2[9D670000]        <1> 	mov [pciregister], al
  8499 000068A8 E83D010000          <1> 	call getpciaddr
  8500 000068AD 89C1                <1> 	mov ecx, eax
  8501 000068AF C605[D8310000]05    <1> 	mov byte [firsthexshown], 5
  8502 000068B6 E832C9FFFF          <1> 	call showhex
  8503                              <1> dumppcidevicelp:
  8504 000068BB A2[9D670000]        <1> 	mov [pciregister], al
  8505 000068C0 E825010000          <1> 	call getpciaddr
  8506 000068C5 BAF80C0000          <1> 	mov edx, 0xCF8
  8507 000068CA EF                  <1> 	out dx, eax
  8508 000068CB BAFC0C0000          <1> 	mov edx, 0xCFC
  8509 000068D0 ED                  <1> 	in eax, dx
  8510 000068D1 89C1                <1> 	mov ecx, eax
  8511 000068D3 A0[9D670000]        <1> 	mov al, [pciregister]
  8512 000068D8 0404                <1> 	add al, 4
  8513 000068DA C605[D8310000]05    <1> 	mov byte [firsthexshown], 5
  8514 000068E1 E807C9FFFF          <1> 	call showhex
  8515 000068E6 3C3C                <1> 	cmp al, 0x3C
  8516 000068E8 72D1                <1> 	jb dumppcidevicelp
  8517                              <1> dumppcidn:
  8518                              <1> %ifdef io.serial
  8519                              <1> 	mov esi, line
  8520                              <1> 	call print
  8521                              <1> %else
  8522 000068EA 803D[20260000]00    <1> 	cmp byte [charpos], 0
  8523 000068F1 0F84FBFEFFFF        <1> 	je near searchpciret
  8524 000068F7 BE[F3950000]        <1> 	mov esi, line
  8525 000068FC E8DBB4FFFF          <1> 	call print
  8526                              <1> %endif
  8527 00006901 E9ECFEFFFF          <1> 	jmp searchpciret
  8528                              <1> nextpcibus:
  8529 00006906 30C0                <1> 	xor al, al
  8530 00006908 A2[9B670000]        <1> 	mov [pcidevice], al
  8531 0000690D A0[9A670000]        <1> 	mov al, [pcibus]
  8532 00006912 3C7F                <1> 	cmp al, 1111111b
  8533 00006914 730C                <1> 	jae donesearchpci
  8534 00006916 FEC0                <1> 	inc al
  8535 00006918 A2[9A670000]        <1> 	mov [pcibus], al
  8536 0000691D E9ADFEFFFF          <1> 	jmp searchpci
  8537                              <1> donesearchpci:
  8538 00006922 BBFFFFFFFF          <1> 	mov ebx, 0xFFFFFFFF
  8539 00006927 31D2                <1> 	xor edx, edx
  8540 00006929 8815[25680000]      <1> 	mov [pcitype], dl
  8541 0000692F 8915[9F670000]      <1> 	mov [pcidevid], edx
  8542 00006935 891D[A3670000]      <1> 	mov [pcidevidmask], ebx
  8543 0000693B C3                  <1> 	ret
  8544                              <1> foundpciaddr:
  8545 0000693C B010                <1> 	mov al, 0x10
  8546 0000693E A2[9D670000]        <1> 	mov [pciregister], al
  8547 00006943 803D[9E670000]02    <1> 	cmp byte [pcireqtype], 2
  8548 0000694A 743B                <1> 	je findpcimemaddr
  8549                              <1> findpciioaddr:
  8550 0000694C E899000000          <1> 	call getpciaddr
  8551 00006951 BAF80C0000          <1> 	mov edx, 0xCF8
  8552 00006956 EF                  <1> 	out dx, eax
  8553 00006957 BAFC0C0000          <1> 	mov edx, 0xCFC
  8554 0000695C ED                  <1> 	in eax, dx
  8555 0000695D 89C3                <1> 	mov ebx, eax
  8556 0000695F 83E301              <1> 	and ebx, 1
  8557 00006962 83FB00              <1> 	cmp ebx, 0
  8558 00006965 0F8466000000        <1> 	je near notpciioaddr
  8559 0000696B 83E801              <1> 	sub eax, 1
  8560 0000696E 89C2                <1> 	mov edx, eax
  8561 00006970 31DB                <1> 	xor ebx, ebx
  8562 00006972 4B                  <1> 	dec ebx
  8563 00006973 891D[A3670000]      <1> 	mov [pcidevidmask], ebx
  8564 00006979 43                  <1> 	inc ebx
  8565 0000697A 881D[25680000]      <1> 	mov [pcitype], bl
  8566 00006980 891D[9F670000]      <1> 	mov [pcidevid], ebx
  8567 00006986 C3                  <1> 	ret
  8568                              <1> findpcimemaddr:
  8569 00006987 E85E000000          <1> 	call getpciaddr
  8570 0000698C BAF80C0000          <1> 	mov edx, 0xCF8
  8571 00006991 EF                  <1> 	out dx, eax
  8572 00006992 BAFC0C0000          <1> 	mov edx, 0xCFC
  8573 00006997 ED                  <1> 	in eax, dx
  8574 00006998 89C3                <1> 	mov ebx, eax
  8575 0000699A 83E301              <1> 	and ebx, 1
  8576 0000699D 83FB01              <1> 	cmp ebx, 1
  8577 000069A0 0F842B000000        <1> 	je near notpciioaddr
  8578 000069A6 C1E804              <1> 	shr eax, 4
  8579 000069A9 C1E004              <1> 	shl eax, 4	;remove prefetch and type
  8580 000069AC 89C2                <1> 	mov edx, eax
  8581 000069AE 50                  <1> 	push eax
  8582 000069AF A1[33020000]        <1> 	mov eax, [basecache]
  8583 000069B4 C1E004              <1> 	shl eax, 4
  8584 000069B7 29C2                <1> 	sub edx, eax
  8585 000069B9 58                  <1> 	pop eax
  8586 000069BA 31DB                <1> 	xor ebx, ebx
  8587 000069BC 4B                  <1> 	dec ebx
  8588 000069BD 891D[A3670000]      <1> 	mov [pcidevidmask], ebx
  8589 000069C3 43                  <1> 	inc ebx
  8590 000069C4 881D[25680000]      <1> 	mov [pcitype], bl
  8591 000069CA 891D[9F670000]      <1> 	mov [pcidevid], ebx
  8592 000069D0 C3                  <1> 	ret
  8593                              <1> notpciioaddr:
  8594 000069D1 A0[9D670000]        <1> 	mov al, [pciregister]
  8595 000069D6 0404                <1> 	add al, 4
  8596 000069D8 3C28                <1> 	cmp al, 0x28
  8597 000069DA 0F8712FEFFFF        <1> 	ja near searchpciret
  8598 000069E0 A2[9D670000]        <1> 	mov [pciregister], al
  8599 000069E5 E962FFFFFF          <1> 	jmp findpciioaddr
  8600                              <1> getpciaddr:		;puts it in eax and ebx
  8601 000069EA 31C0                <1> 			xor eax, eax
  8602 000069EC BB00000080          <1> 			mov ebx, 0x80000000
  8603 000069F1 A0[9A670000]        <1> 			mov al, [pcibus]
  8604 000069F6 C1E010              <1> 			shl eax, 16
  8605 000069F9 01C3                <1> 			add ebx, eax
  8606 000069FB 31C0                <1> 			xor eax, eax
  8607 000069FD A0[9B670000]        <1> 			mov al, [pcidevice]
  8608 00006A02 C1E00B              <1> 			shl eax, 11
  8609 00006A05 01C3                <1> 			add ebx, eax
  8610 00006A07 31C0                <1> 			xor eax, eax
  8611 00006A09 A0[9C670000]        <1> 			mov al, [pcifunction]
  8612 00006A0E C1E008              <1> 			shl eax, 8
  8613 00006A11 01C3                <1> 			add ebx, eax
  8614 00006A13 31C0                <1> 			xor eax, eax
  8615 00006A15 A0[9D670000]        <1> 			mov al, [pciregister]
  8616 00006A1A 01C3                <1> 			add ebx, eax
  8617 00006A1C 89D8                <1> 			mov eax, ebx
  8618 00006A1E C3                  <1> 			ret
  8619                                  %include "source/disk.asm"
  8620                              <1> %ifdef disk.real
  8621                              <1> 	%include "source/drivers/disk/realmode.asm"
  8622                              <2> diskr:
  8623                              <2> 			;sector count in cl
  8624                              <2> 			;disk number in ch
  8625                              <2> 			;48 bit address with last 32 bits in ebx
  8626                              <2> 			;buffer in esi
  8627                              <2> 			;puts end of buffer in edi and end lba address in edx
  8628 00006A1F 880D[436A0000]      <2> 	mov [sdlength], cl
  8629 00006A25 891D[446A0000]      <2> 	mov [sdaddress], ebx
  8630 00006A2B 8935[B76B0000]      <2> 	mov [oldesireal], esi
  8631 00006A31 66BE[486A]          <2> 	mov si, readdiskreal
  8632 00006A35 668935[960D0000]    <2> 	mov [realmodeptr], si
  8633 00006A3C E849A2FFFF          <2> 	call realmode
  8634 00006A41 EB41                <2> 	jmp backfromrealread
  8635 00006A43 00                  <2> sdlength db 0
  8636 00006A44 00000000            <2> sdaddress dd 0
  8637                              <2> 
  8638                              <2> [BITS 16]
  8639                              <2> readdiskreal:
  8640 00006A48 C706[746A]1000      <2> 	mov word [dlen], 0x10
  8641 00006A4E C706[786A]0000      <2> 	mov word [daddress], 0
  8642 00006A54 C706[7A6A]0001      <2> 	mov word [dsegm], 0x100
  8643 00006A5A 66891E[7C6A]        <2> 	mov [dlbaad], ebx
  8644 00006A5F 880E[766A]          <2> 	mov [dreadlen], cl
  8645                              <2> ReadHardDisk:
  8646 00006A63 BE[746A]            <2> 	mov si, diskaddresspacket
  8647 00006A66 31C0                <2> 	xor ax, ax
  8648 00006A68 B442                <2> 	mov ah, 0x42
  8649 00006A6A 8A16[736A]          <2> 	mov dl, [dnumber]
  8650 00006A6E CD13                <2> 	int 0x13
  8651 00006A70 72F1                <2> 	jc ReadHardDisk
  8652 00006A72 C3                  <2> 	ret
  8653                              <2> 
  8654 00006A73 80                  <2> dnumber db 0x80
  8655                              <2> diskaddresspacket:
  8656 00006A74 10                  <2> dlen:	db 0x10 ;size of packet
  8657 00006A75 00                  <2> 		db 0
  8658 00006A76 7F00                <2> dreadlen:	dw 0x7F	;blocks to read=maximum
  8659 00006A78 0000                <2> daddress:	dw 0	;address 0
  8660 00006A7A 0001                <2> dsegm:		dw 0x100	;segment
  8661                              <2> 		;start with known value for hd
  8662                              <2> dlbaad:
  8663 00006A7C 00000000            <2> 	dd 0	;lba address
  8664 00006A80 00000000            <2> 	dd 0
  8665                              <2> [BITS 32]
  8666                              <2> backfromrealread:
  8667 00006A84 8B35[B76B0000]      <2> 	mov esi, [oldesireal]
  8668 00006A8A 8B1D[446A0000]      <2> 	mov ebx, [sdaddress]
  8669 00006A90 31C9                <2> 	xor ecx, ecx
  8670 00006A92 8A0D[436A0000]      <2> 	mov cl, [sdlength]
  8671 00006A98 01CB                <2> 	add ebx, ecx
  8672 00006A9A 66B80800            <2> 	mov ax, LINEAR_SEL
  8673 00006A9E 8EE0                <2> 	mov fs, ax
  8674 00006AA0 BF00100000          <2> 	mov edi, 0x1000
  8675 00006AA5 B200                <2> 	mov dl, 0
  8676 00006AA7 D0E1                <2> 	shl cl, 1
  8677                              <2> copyfromrmodedisk:
  8678 00006AA9 648A07              <2> 	mov al, [fs:edi]
  8679 00006AAC 8806                <2> 	mov [esi], al
  8680 00006AAE 47                  <2> 	inc edi
  8681 00006AAF 46                  <2> 	inc esi
  8682 00006AB0 FECA                <2> 	dec dl
  8683 00006AB2 80FA00              <2> 	cmp dl, 0
  8684 00006AB5 75F2                <2> 	jne copyfromrmodedisk
  8685 00006AB7 FEC9                <2> 	dec cl
  8686 00006AB9 B200                <2> 	mov dl, 0
  8687 00006ABB 80F900              <2> 	cmp cl, 0
  8688 00006ABE 75E9                <2> 	jne copyfromrmodedisk
  8689 00006AC0 66B83000            <2> 	mov ax, NEW_DATA_SEL
  8690 00006AC4 8EE0                <2> 	mov fs, ax
  8691 00006AC6 89F7                <2> 	mov edi, esi
  8692 00006AC8 8B35[B76B0000]      <2> 	mov esi, [oldesireal]
  8693 00006ACE 89DA                <2> 	mov edx, ebx
  8694 00006AD0 8B1D[446A0000]      <2> 	mov ebx, [sdaddress]
  8695 00006AD6 C3                  <2> 	ret
  8696                              <2> 	
  8697                              <1> %else
  8698                              <1> 	%ifdef disk.protected
  8699                              <1> 		%include "source/drivers/disk/pata.asm"
  8700                              <1> 	%endif
  8701                              <1> %endif
  8702                              <1> %ifdef disk.none
  8703                              <1> loadfile:	xor edx, edx
  8704                              <1> 			cmp byte [edi], '&'
  8705                              <1> 			je .ret
  8706                              <1> 			mov edx, 404	;no files are found except &
  8707                              <1> 		.ret:
  8708                              <1> 			ret
  8709                              <1> %else
  8710                              <1> ;This loads files using the methods in the loaded driver
  8711                              <1> loadfile:	;loads a file with the name buffer's location in edi into location in esi
  8712                              <1> 			;returns with err code in edx and file end in edi
  8713 00006AD7 803F00              <1> 	cmp byte [edi], 0
  8714 00006ADA 0F8445000000        <1> 	je near nofileload
  8715 00006AE0 89FA                <1> 	mov edx, edi
  8716 00006AE2 BB[72980300]        <1> 	mov ebx, diskfileindex
  8717                              <1> nextnamechar:
  8718 00006AE7 8A07                <1> 	mov al, [edi]
  8719 00006AE9 3C26                <1> 	cmp al, '&'
  8720 00006AEB 743D                <1> 	je nullfile
  8721 00006AED 8A23                <1> 	mov ah, [ebx]
  8722 00006AEF 47                  <1> 	inc edi
  8723 00006AF0 43                  <1> 	inc ebx
  8724 00006AF1 88C1                <1> 	mov cl, al
  8725 00006AF3 08E1                <1> 	or cl, ah
  8726 00006AF5 80F900              <1> 	cmp cl, 0
  8727 00006AF8 7465                <1> 	je equalfilenames
  8728 00006AFA 80F920              <1> 	cmp cl, ' '
  8729 00006AFD 7460                <1> 	je equalfilenames
  8730 00006AFF 3C2A                <1> 	cmp al, '*'
  8731 00006B01 7428                <1> 	je asteriskcheck
  8732 00006B03 80FC00              <1> 	cmp ah, 0
  8733 00006B06 7410                <1> 	je nextfilename
  8734 00006B08 3C00                <1> 	cmp al, 0
  8735 00006B0A 7404                <1> 	je getebxzero
  8736 00006B0C 38E0                <1> 	cmp al, ah
  8737 00006B0E 74D7                <1> 	je nextnamechar
  8738                              <1> getebxzero:
  8739 00006B10 8A23                <1> 	mov ah, [ebx]
  8740 00006B12 43                  <1> 	inc ebx
  8741 00006B13 80FC00              <1> 	cmp ah, 0
  8742 00006B16 75F8                <1> 	jne getebxzero
  8743                              <1> nextfilename:
  8744 00006B18 83C308              <1> 	add ebx, 8		;next descriptor
  8745 00006B1B 89D7                <1> 	mov edi, edx
  8746 00006B1D 81FB[F3990300]      <1> 	cmp ebx, enddiskfileindex
  8747 00006B23 72C2                <1> 	jb nextnamechar
  8748                              <1> nofileload:
  8749 00006B25 BA94010000          <1> 	mov edx, 404	;indicate not found error
  8750                              <1> nullfile:
  8751 00006B2A C3                  <1> 	ret
  8752                              <1> asteriskcheck:
  8753 00006B2B 4B                  <1> 	dec ebx
  8754 00006B2C 8A07                <1> 	mov al, [edi]
  8755 00006B2E 3C2A                <1> 	cmp al, '*'
  8756 00006B30 74F9                <1> 	je asteriskcheck ;remove multiple asterisks
  8757 00006B32 3C20                <1> 	cmp al, ' '
  8758 00006B34 7412                <1> 	je equalfilenames2
  8759 00006B36 3C00                <1> 	cmp al, 0
  8760 00006B38 740E                <1> 	je equalfilenames2
  8761                              <1> .lp:
  8762 00006B3A 8A23                <1> 	mov ah, [ebx]
  8763 00006B3C 80FC00              <1> 	cmp ah, 0
  8764 00006B3F 74D7                <1> 	je nextfilename
  8765 00006B41 38E0                <1> 	cmp al, ah
  8766 00006B43 74A2                <1> 	je nextnamechar
  8767 00006B45 43                  <1> 	inc ebx
  8768 00006B46 EBF2                <1> 	jmp .lp
  8769                              <1> equalfilenames2:
  8770 00006B48 83EB02              <1> 	sub ebx, 2
  8771                              <1> eqfilefind:
  8772 00006B4B 43                  <1> 	inc ebx
  8773 00006B4C 81FB[F3990300]      <1> 	cmp ebx, enddiskfileindex
  8774 00006B52 0F83CDFFFFFF        <1> 	jae near nofileload
  8775 00006B58 8A03                <1> 	mov al, [ebx]
  8776 00006B5A 3C00                <1> 	cmp al, 0
  8777 00006B5C 75ED                <1> 	jne eqfilefind
  8778 00006B5E 43                  <1> 	inc ebx
  8779                              <1> equalfilenames:
  8780 00006B5F 8B4304              <1> 	mov eax, [ebx + 4] 	;put file size in eax
  8781 00006B62 8B1B                <1> 	mov ebx, [ebx]		;put file beginning in ebx
  8782 00006B64 031D[1A960000]      <1> 	add ebx, [lbaad]	;add offset to solleros start
  8783 00006B6A 31C9                <1> 	xor ecx, ecx
  8784 00006B6C 88C1                <1> 	mov cl, al			;get excess number of sectors
  8785 00006B6E C0E102              <1> 	shl cl, 2
  8786 00006B71 C0E902              <1> 	shr cl, 2			;cut off at 64
  8787 00006B74 29C8                <1> 	sub eax, ecx		;get rid of excess sectors
  8788 00006B76 B500                <1> 	mov ch, 0			;drive 0
  8789 00006B78 C1E806              <1> 	shr eax, 6			;get number of 64 sector tracks
  8790                              <1> loaddiskfile:			;tracks in eax, excess sectors in cl, drive in ch, buffer in esi, address in ebx
  8791 00006B7B A3[BB6B0000]        <1> 	mov [filetracks], eax
  8792 00006B80 89F7                <1> 	mov edi, esi		;just in case cl is 0
  8793 00006B82 89DA                <1> 	mov edx, ebx
  8794 00006B84 80F900              <1> 	cmp cl, 0
  8795 00006B87 7405                <1> 	je copytracksforfile
  8796 00006B89 E891FEFFFF          <1> 	call diskr	;take care of excess sectors
  8797                              <1> copytracksforfile:
  8798 00006B8E A1[BB6B0000]        <1> 	mov eax, [filetracks]
  8799 00006B93 83F800              <1> 	cmp eax, 0
  8800 00006B96 7419                <1> 	je donecopyfile
  8801 00006B98 48                  <1> 	dec eax
  8802 00006B99 A3[BB6B0000]        <1> 	mov [filetracks], eax
  8803 00006B9E 89D3                <1> 	mov ebx, edx	;get end lba
  8804 00006BA0 B140                <1> 	mov cl, 0x40 ;for compatability with BIOS it uses 64 instead of 128
  8805 00006BA2 8A2D[19960000]      <1> 	mov ch, [DriveNumber]
  8806 00006BA8 89FE                <1> 	mov esi, edi	;reset buffer
  8807 00006BAA E870FEFFFF          <1> 	call diskr
  8808 00006BAF EBDD                <1> 	jmp copytracksforfile
  8809                              <1> donecopyfile:
  8810 00006BB1 BA00000000          <1> 	mov edx, 0	;no error
  8811 00006BB6 C3                  <1> 	ret
  8812                              <1> 
  8813 00006BB7 00000000            <1> oldesireal dd 0
  8814 00006BBB 00000000            <1> filetracks dd 0
  8815 00006BBF 00                  <1> lbad1 db 0
  8816 00006BC0 00                  <1> lbad2 db 0
  8817 00006BC1 00                  <1> lbad3 db 0
  8818 00006BC2 00                  <1> lbad4 db 0
  8819 00006BC3 00                  <1> lbad5 db 0
  8820 00006BC4 00                  <1> lbad6 db 0
  8821 00006BC5 6400                <1> segments dw 100
  8822                              <1> %endif
  8823                                  %include "source/threads.asm"
  8824                              <1> %ifdef threads.included	
  8825                              <1> nwcmdst:
  8826 00006BC7 31C0                <1> 	xor eax, eax
  8827 00006BC9 BC[00BA0300]        <1> 	mov esp, stackend
  8828 00006BCE A2[806C0000]        <1> 	mov [threadson], al
  8829 00006BD3 A3[816C0000]        <1> 	mov [currentthread], eax
  8830 00006BD8 83C004              <1> 	add eax, 4
  8831 00006BDB A3[7C6C0000]        <1> 	mov [lastthread], eax
  8832 00006BE0 FB                  <1> 	sti
  8833 00006BE1 E964C1FFFF          <1> 	jmp nwcmd
  8834                              <1> 
  8835                              <1> nomorethreadspace:
  8836 00006BE6 BE[FC6B0000]        <1> 	mov esi, nmts
  8837 00006BEB E8ECB1FFFF          <1> 	call print
  8838 00006BF0 C605[806C0000]00    <1> 	mov byte [threadson], 0
  8839 00006BF7 E94EC1FFFF          <1> 	jmp nwcmd
  8840 00006BFC 546872656164204F76- <1> nmts	db "Thread Overflow",10,0
  8841 00006C05 6572666C6F770A00    <1>
  8842                              <1> 
  8843                              <1> nomorestackspace:
  8844 00006C0D BE[196C0000]        <1> 	mov esi, nmss
  8845 00006C12 E8C5B1FFFF          <1> 	call print
  8846 00006C17 EBAE                <1> 	jmp nwcmdst
  8847 00006C19 537461636B204F7665- <1> nmss	db "Stack Overflow",10,0
  8848 00006C22 72666C6F770A00      <1>
  8849                              <1> 	
  8850                              <1> threadswitch:
  8851 00006C29 60                  <1> 	pushad
  8852 00006C2A BF[4CCA2D00]        <1> 	mov edi, threadlist
  8853 00006C2F A1[816C0000]        <1> 	mov eax, [currentthread]
  8854 00006C34 40                  <1> 	inc eax
  8855 00006C35 A3[816C0000]        <1> 	mov [currentthread], eax
  8856 00006C3A 6648                <1> 	dec ax
  8857 00006C3C C1E002              <1> 	shl eax, 2
  8858 00006C3F 01C7                <1> 	add edi, eax
  8859 00006C41 8927                <1> 	mov [edi], esp
  8860                              <1> 	;mov ebx, esp
  8861                              <1> 	;sub ebx, 512
  8862                              <1> 	;shr ebx, 4
  8863                              <1> 	;shl ebx, 4
  8864                              <1> 	;fxsave [ebx]
  8865 00006C43 83C704              <1> 	add edi, 4
  8866 00006C46 81FF[4CDA2D00]      <1> 	cmp edi, threadlistend
  8867 00006C4C 0F830B000000        <1> 	jae near nookespthread
  8868 00006C52 8B07                <1> 	mov eax, [edi]
  8869 00006C54 83F800              <1> 	cmp eax, 0
  8870 00006C57 0F8517000000        <1> 	jne near okespthread
  8871                              <1> nookespthread:
  8872 00006C5D BF[4CCA2D00]        <1> 	mov edi, threadlist
  8873 00006C62 31C0                <1> 	xor eax, eax
  8874 00006C64 A3[816C0000]        <1> 	mov [currentthread], eax
  8875 00006C69 8B07                <1> 	mov eax, [edi]
  8876 00006C6B 83F800              <1> 	cmp eax, 0
  8877 00006C6E 0F8453FFFFFF        <1> 	je near nwcmdst
  8878                              <1> okespthread:
  8879 00006C74 89C4                <1> 	mov esp, eax
  8880                              <1> 	;sub eax, 512
  8881                              <1> 	;shr eax, 4
  8882                              <1> 	;shl eax, 4
  8883                              <1> 	;fxrstor [eax]
  8884 00006C76 B020                <1> 	mov al, 0x20
  8885 00006C78 E620                <1> 	out 0x20, al
  8886 00006C7A 61                  <1> 	popad
  8887 00006C7B CF                  <1> 	iret
  8888                              <1> 
  8889                              <1> %endif
  8890 00006C7C 04000000            <1> 	lastthread dd 4
  8891 00006C80 00                  <1> 	threadson db 0
  8892 00006C81 00000000            <1> 	currentthread dd 0
  8893                                  %ifdef gui.included
  8894                                  	%include "source/gui/gui.asm"
  8895                              <1> guiboot:	;Let's see what I can do, I am going to try to make this as freestanding as possible
  8896 00006C85 31C0                <1> 	xor eax, eax
  8897 00006C87 31DB                <1> 	xor ebx, ebx
  8898 00006C89 31C9                <1> 	xor ecx, ecx
  8899 00006C8B 31D2                <1> 	xor edx, edx
  8900 00006C8D E84B080000          <1> 	call guisetup
  8901                              <1> guiloop:
  8902 00006C92 E8C7EEFFFF          <1> 	call cursorgui
  8903                              <1> guistart:
  8904 00006C97 E8BCF4FFFF          <1> 	call getkey
  8905 00006C9C C605[B9810000]00    <1> 	mov byte [copygui], 0
  8906 00006CA3 EBF2                <1> 	jmp guistart
  8907                              <1> 
  8908                              <1> %include "source/gui/bmp.asm"
  8909                              <2> showbmp:
  8910 00006CA5 668B06              <2> 	mov ax, [esi]
  8911 00006CA8 663D424D            <2> 	cmp ax, "BM"
  8912 00006CAC 0F85AF000000        <2> 	jne near endedbmp
  8913 00006CB2 8B3D[815A0000]      <2> 	mov edi, [physbaseptr]
  8914 00006CB8 6689D0              <2> 	mov ax, dx
  8915 00006CBB 6689CB              <2> 	mov bx, cx
  8916 00006CBE 31C9                <2> 	xor ecx, ecx
  8917 00006CC0 31D2                <2> 	xor edx, edx
  8918 00006CC2 6689D9              <2> 	mov cx, bx
  8919 00006CC5 6689C2              <2> 	mov dx, ax
  8920 00006CC8 01D7                <2> 	add edi, edx
  8921 00006CCA 01D7                <2> 	add edi, edx
  8922 00006CCC 31D2                <2> 	xor edx, edx
  8923 00006CCE 668B15[595B0000]    <2> 	mov dx, [resolutionx2]
  8924 00006CD5 034E16              <2> 	add ecx, [esi + 22]
  8925                              <2> bmplocloop:
  8926 00006CD8 52                  <2> 	push edx
  8927 00006CD9 31C0                <2> 	xor eax, eax
  8928 00006CDB 6689D0              <2> 	mov ax, dx
  8929 00006CDE F7E1                <2> 	mul ecx
  8930 00006CE0 5A                  <2> 	pop edx
  8931 00006CE1 663B0D[6D5A0000]    <2> 	cmp cx, [resolutiony]
  8932 00006CE8 7609                <2> 	jbe .nofixy
  8933 00006CEA 31C9                <2> 	xor ecx, ecx
  8934 00006CEC 668B0D[6D5A0000]    <2> 	mov cx, [resolutiony]
  8935                              <2> .nofixy:
  8936 00006CF3 01C7                <2> 	add edi, eax
  8937 00006CF5 8B5612              <2> 	mov edx, [esi + 18]
  8938 00006CF8 8B4E16              <2> 	mov ecx, [esi + 22]
  8939 00006CFB 8B460A              <2> 	mov eax, [esi + 10]
  8940 00006CFE 8B5E02              <2> 	mov ebx, [esi + 2]
  8941 00006D01 01F3                <2> 	add ebx, esi
  8942 00006D03 891D[676D0000]      <2> 	mov [bmpend], ebx
  8943 00006D09 89D3                <2> 	mov ebx, edx
  8944 00006D0B 01C6                <2> 	add esi, eax
  8945                              <2> ldxbmp2:
  8946 00006D0D 31D2                <2> 	xor edx, edx
  8947 00006D0F 668B15[6B5A0000]    <2> 	mov dx, [resolutionx]
  8948 00006D16 39D3                <2> 	cmp ebx, edx
  8949 00006D18 7702                <2> 	ja ldxbmp
  8950 00006D1A 89DA                <2> 	mov edx, ebx
  8951                              <2> ldxbmp:
  8952 00006D1C 668B06              <2> 	mov ax, [esi]
  8953 00006D1F 668907              <2> 	mov [edi], ax
  8954 00006D22 83C702              <2> 	add edi, 2
  8955 00006D25 83C602              <2> 	add esi, 2
  8956 00006D28 3B35[676D0000]      <2> 	cmp esi, [bmpend]
  8957 00006D2E 7731                <2> 	ja endedbmp
  8958 00006D30 4A                  <2> 	dec edx
  8959 00006D31 83FA00              <2> 	cmp edx, 0
  8960 00006D34 77E6                <2> 	ja ldxbmp
  8961 00006D36 31D2                <2> 	xor edx, edx
  8962 00006D38 668B15[6B5A0000]    <2> 	mov dx, [resolutionx]
  8963 00006D3F 39D3                <2> 	cmp ebx, edx
  8964 00006D41 7610                <2> 	jbe .notover
  8965                              <2> .over:
  8966 00006D43 01DE                <2> 	add esi, ebx
  8967 00006D45 01DE                <2> 	add esi, ebx
  8968 00006D47 29D6                <2> 	sub esi, edx
  8969 00006D49 29D6                <2> 	sub esi, edx
  8970 00006D4B 01DF                <2> 	add edi, ebx
  8971 00006D4D 01DF                <2> 	add edi, ebx
  8972 00006D4F 29D7                <2> 	sub edi, edx
  8973 00006D51 29D7                <2> 	sub edi, edx
  8974                              <2> .notover:
  8975 00006D53 29DF                <2> 	sub edi, ebx
  8976 00006D55 29DF                <2> 	sub edi, ebx
  8977 00006D57 29D7                <2> 	sub edi, edx
  8978 00006D59 29D7                <2> 	sub edi, edx
  8979 00006D5B 49                  <2> 	dec ecx
  8980 00006D5C 83F900              <2> 	cmp ecx, 0
  8981 00006D5F 77AC                <2> 	ja ldxbmp2
  8982                              <2> endedbmp:
  8983 00006D61 E835030000          <2> 	call switchmousepos2
  8984 00006D66 C3                  <2> 	ret
  8985                              <2> 	
  8986 00006D67 00000000            <2> 	bmpend dd 0
  8987                              <1> %include "source/gui/circle.asm"
  8988                              <2> drawcircle:	;center in (dx,cx), color in si, radius in ax
  8989 00006D6B 55                  <2> 	push ebp
  8990 00006D6C 6683F800            <2> 	cmp ax, 0
  8991 00006D70 770A                <2> 	ja .nozerocircle
  8992 00006D72 E80C1C0000          <2> 	call putpixel	;the easiest circle ever
  8993 00006D77 E9EE000000          <2> 	jmp .done
  8994                              <2> .nozerocircle:
  8995 00006D7C 6689F5              <2> 	mov bp, si
  8996 00006D7F 6650                <2> 	push ax
  8997 00006D81 E83E1C0000          <2> 	call getpixelmem
  8998 00006D86 31C0                <2> 	xor eax, eax
  8999 00006D88 6658                <2> 	pop ax
  9000 00006D8A BE01000000          <2> 	mov esi, 1
  9001 00006D8F 29C6                <2> 	sub esi, eax
  9002 00006D91 89C1                <2> 	mov ecx, eax
  9003 00006D93 31C0                <2> 	xor eax, eax
  9004 00006D95 66A1[595B0000]      <2> 	mov ax, [resolutionx2]
  9005 00006D9B F7E1                <2> 	mul ecx
  9006 00006D9D 50                  <2> 	push eax
  9007 00006D9E 31D2                <2> 	xor edx, edx
  9008 00006DA0 01C7                <2> 	add edi, eax
  9009 00006DA2 66892F              <2> 	mov [edi], bp
  9010 00006DA5 29C7                <2> 	sub edi, eax
  9011 00006DA7 29C7                <2> 	sub edi, eax
  9012 00006DA9 66892F              <2> 	mov [edi], bp
  9013 00006DAC 01C7                <2> 	add edi, eax
  9014 00006DAE D1E1                <2> 	shl ecx, 1
  9015 00006DB0 01CF                <2> 	add edi, ecx
  9016 00006DB2 66892F              <2> 	mov [edi], bp
  9017 00006DB5 D1E1                <2> 	shl ecx, 1
  9018 00006DB7 29CF                <2> 	sub edi, ecx
  9019 00006DB9 66892F              <2> 	mov [edi], bp
  9020 00006DBC D1E9                <2> 	shr ecx, 1
  9021 00006DBE 01CF                <2> 	add edi, ecx
  9022 00006DC0 D1E9                <2> 	shr ecx, 1
  9023 00006DC2 B802000000          <2> 	mov eax, 2
  9024 00006DC7 F7E1                <2> 	mul ecx
  9025 00006DC9 48                  <2> 	dec eax
  9026 00006DCA F7D0                <2> 	not eax ;make it negative
  9027 00006DCC A3[706E0000]        <2> 	mov [.ddF_y], eax
  9028 00006DD1 58                  <2> 	pop eax
  9029 00006DD2 BB01000000          <2> 	mov ebx, 1
  9030 00006DD7 891D[6C6E0000]      <2> 	mov [.ddF_x], ebx
  9031 00006DDD 4B                  <2> 	dec ebx
  9032 00006DDE 31D2                <2> 	xor edx, edx
  9033 00006DE0 EB04                <2> 	jmp .lp
  9034                              <2> .lpb:
  9035 00006DE2 D1EA                <2> 	shr edx, 1
  9036 00006DE4 D1E9                <2> 	shr ecx, 1
  9037                              <2> .lp:	;it starts this with the center in edi
  9038                              <2> 		;color in bp
  9039                              <2> 		;ddF_x in memory
  9040                              <2> 		;x*resolutionx2 in ebx
  9041                              <2> 		;x in edx
  9042                              <2> 		;ddF_y in memory
  9043                              <2> 		;y*resolutionx2 in eax
  9044                              <2> 		;f in esi
  9045                              <2> 		;y in ecx
  9046 00006DE6 81FE00000080        <2> 	cmp esi, 0x80000000 ;this means it is not negative
  9047 00006DEC 7714                <2> 	ja	.noddF_y
  9048 00006DEE 49                  <2> 	dec ecx
  9049 00006DEF 2B05[595B0000]      <2> 	sub eax, [resolutionx2]
  9050 00006DF5 8305[706E0000]02    <2> 	add dword [.ddF_y], 2
  9051 00006DFC 0335[706E0000]      <2> 	add esi, [.ddF_y]
  9052                              <2> .noddF_y:
  9053 00006E02 42                  <2> 	inc edx
  9054 00006E03 031D[595B0000]      <2> 	add ebx, [resolutionx2]
  9055 00006E09 8305[6C6E0000]02    <2> 	add dword [.ddF_x], 2
  9056 00006E10 0335[6C6E0000]      <2> 	add esi, [.ddF_x]
  9057                              <2> 
  9058 00006E16 D1E2                <2> 	shl edx, 1
  9059 00006E18 D1E1                <2> 	shl ecx, 1
  9060 00006E1A 01D7                <2> 	add edi, edx
  9061 00006E1C 01C7                <2> 	add edi, eax
  9062 00006E1E 66892F              <2> 	mov [edi], bp	;(cx+x,cy+y)
  9063 00006E21 D1E2                <2> 	shl edx, 1
  9064 00006E23 29D7                <2> 	sub edi, edx
  9065 00006E25 66892F              <2> 	mov [edi], bp	;(cx-x,cy+y)
  9066 00006E28 D1E0                <2> 	shl eax, 1
  9067 00006E2A 29C7                <2> 	sub edi, eax
  9068 00006E2C 66892F              <2> 	mov [edi], bp	;(cx-x,cy-y)
  9069 00006E2F 01D7                <2> 	add edi, edx
  9070 00006E31 66892F              <2> 	mov [edi], bp	;(cx+x,cy-y)
  9071 00006E34 D1E8                <2> 	shr eax, 1
  9072 00006E36 D1EA                <2> 	shr edx, 1
  9073 00006E38 01C7                <2> 	add edi, eax
  9074 00006E3A 29D7                <2> 	sub edi, edx
  9075                              <2> 
  9076 00006E3C 39D1                <2> 	cmp ecx, edx
  9077 00006E3E 74A2                <2> 	je .lpb
  9078                              <2> 
  9079 00006E40 01DF                <2> 	add edi, ebx
  9080 00006E42 01CF                <2> 	add edi, ecx
  9081 00006E44 66892F              <2> 	mov [edi], bp	;(cx+y,cy+x)
  9082 00006E47 D1E1                <2> 	shl ecx, 1
  9083 00006E49 29CF                <2> 	sub edi, ecx
  9084 00006E4B 66892F              <2> 	mov [edi], bp	;(cx-y,cy+x)
  9085 00006E4E D1E3                <2> 	shl ebx, 1
  9086 00006E50 29DF                <2> 	sub edi, ebx
  9087 00006E52 66892F              <2> 	mov [edi], bp	;(cx-y,cy-x)
  9088 00006E55 01CF                <2> 	add edi, ecx
  9089 00006E57 66892F              <2> 	mov [edi], bp	;(cx+y,cy-x)
  9090 00006E5A D1EB                <2> 	shr ebx, 1
  9091 00006E5C D1E9                <2> 	shr ecx, 1
  9092 00006E5E 01DF                <2> 	add edi, ebx
  9093 00006E60 29CF                <2> 	sub edi, ecx
  9094 00006E62 39CA                <2> 	cmp edx, ecx
  9095 00006E64 0F8278FFFFFF        <2> 	jb .lpb
  9096                              <2> .done:
  9097 00006E6A 5D                  <2> 	pop ebp
  9098 00006E6B C3                  <2> 	ret
  9099                              <2> 	
  9100 00006E6C 00000000            <2> .ddF_x dd 0
  9101 00006E70 00000000            <2> .ddF_y dd 0
  9102                              <2> 
  9103                              <2> fillcircle:	;center in (dx,cx), color in si, radius in ax
  9104 00006E74 55                  <2> 	push ebp
  9105 00006E75 6683F800            <2> 	cmp ax, 0
  9106 00006E79 770A                <2> 	ja .nozerocircle
  9107 00006E7B E8031B0000          <2> 	call putpixel	;the easiest circle ever
  9108 00006E80 E923010000          <2> 	jmp .done
  9109                              <2> .nozerocircle:
  9110 00006E85 6689F5              <2> 	mov bp, si
  9111 00006E88 6650                <2> 	push ax
  9112 00006E8A E8351B0000          <2> 	call getpixelmem
  9113 00006E8F 31C0                <2> 	xor eax, eax
  9114 00006E91 6658                <2> 	pop ax
  9115 00006E93 BE01000000          <2> 	mov esi, 1
  9116 00006E98 29C6                <2> 	sub esi, eax
  9117 00006E9A 89C1                <2> 	mov ecx, eax
  9118 00006E9C 31C0                <2> 	xor eax, eax
  9119 00006E9E 66A1[595B0000]      <2> 	mov ax, [resolutionx2]
  9120 00006EA4 F7E1                <2> 	mul ecx
  9121 00006EA6 50                  <2> 	push eax
  9122 00006EA7 31D2                <2> 	xor edx, edx
  9123 00006EA9 01C7                <2> 	add edi, eax
  9124 00006EAB 66892F              <2> 	mov [edi], bp
  9125 00006EAE 29C7                <2> 	sub edi, eax
  9126 00006EB0 29C7                <2> 	sub edi, eax
  9127 00006EB2 66892F              <2> 	mov [edi], bp
  9128 00006EB5 01C7                <2> 	add edi, eax
  9129 00006EB7 D1E1                <2> 	shl ecx, 1
  9130 00006EB9 01CF                <2> 	add edi, ecx
  9131 00006EBB 51                  <2> 	push ecx
  9132                              <2> .s0:
  9133 00006EBC 66892F              <2> 	mov [edi], bp
  9134 00006EBF 83EF02              <2> 	sub edi, 2
  9135 00006EC2 49                  <2> 	dec ecx
  9136 00006EC3 83F900              <2> 	cmp ecx, 0
  9137 00006EC6 75F4                <2> 	jne .s0
  9138 00006EC8 66892F              <2> 	mov [edi], bp
  9139 00006ECB 59                  <2> 	pop ecx
  9140 00006ECC 01CF                <2> 	add edi, ecx
  9141 00006ECE D1E9                <2> 	shr ecx, 1
  9142 00006ED0 B802000000          <2> 	mov eax, 2
  9143 00006ED5 F7E1                <2> 	mul ecx
  9144 00006ED7 48                  <2> 	dec eax
  9145 00006ED8 F7D0                <2> 	not eax ;make it negative
  9146 00006EDA A3[AE6F0000]        <2> 	mov [.ddF_y], eax
  9147 00006EDF 58                  <2> 	pop eax
  9148 00006EE0 BB01000000          <2> 	mov ebx, 1
  9149 00006EE5 891D[AA6F0000]      <2> 	mov [.ddF_x], ebx
  9150 00006EEB 4B                  <2> 	dec ebx
  9151 00006EEC 31D2                <2> 	xor edx, edx
  9152 00006EEE EB04                <2> 	jmp .lp
  9153                              <2> .lpb:
  9154 00006EF0 D1EA                <2> 	shr edx, 1
  9155 00006EF2 D1E9                <2> 	shr ecx, 1
  9156                              <2> .lp:	;it starts this with the center in edi
  9157                              <2> 		;color in bp
  9158                              <2> 		;ddF_x in memory
  9159                              <2> 		;x*resolutionx2 in ebx
  9160                              <2> 		;x in edx
  9161                              <2> 		;ddF_y in memory
  9162                              <2> 		;y*resolutionx2 in eax
  9163                              <2> 		;f in esi
  9164                              <2> 		;y in ecx
  9165 00006EF4 81FE00000080        <2> 	cmp esi, 0x80000000 ;this means it is not negative
  9166 00006EFA 7714                <2> 	ja	.noddF_y
  9167 00006EFC 49                  <2> 	dec ecx
  9168 00006EFD 2B05[595B0000]      <2> 	sub eax, [resolutionx2]
  9169 00006F03 8305[AE6F0000]02    <2> 	add dword [.ddF_y], 2
  9170 00006F0A 0335[AE6F0000]      <2> 	add esi, [.ddF_y]
  9171                              <2> .noddF_y:
  9172 00006F10 42                  <2> 	inc edx
  9173 00006F11 031D[595B0000]      <2> 	add ebx, [resolutionx2]
  9174 00006F17 8305[AA6F0000]02    <2> 	add dword [.ddF_x], 2
  9175 00006F1E 0335[AA6F0000]      <2> 	add esi, [.ddF_x]
  9176                              <2> 
  9177 00006F24 D1E2                <2> 	shl edx, 1
  9178 00006F26 D1E1                <2> 	shl ecx, 1
  9179 00006F28 52                  <2> 	push edx
  9180 00006F29 29D7                <2> 	sub edi, edx
  9181 00006F2B 01C7                <2> 	add edi, eax
  9182 00006F2D 83FA00              <2> 	cmp edx, 0
  9183 00006F30 740C                <2> 	je .nos1
  9184                              <2> .s1:
  9185 00006F32 66892F              <2> 	mov [edi], bp	;(cx-x,cy+y)
  9186 00006F35 83C702              <2> 	add edi, 2
  9187 00006F38 4A                  <2> 	dec edx
  9188 00006F39 83FA00              <2> 	cmp edx, 0
  9189 00006F3C 75F4                <2> 	jne .s1
  9190                              <2> .nos1:
  9191 00006F3E 66892F              <2> 	mov [edi], bp
  9192 00006F41 5A                  <2> 	pop edx
  9193 00006F42 52                  <2> 	push edx
  9194 00006F43 29C7                <2> 	sub edi, eax
  9195 00006F45 29C7                <2> 	sub edi, eax
  9196 00006F47 83FA00              <2> 	cmp edx, 0
  9197 00006F4A 740C                <2> 	je .nos2
  9198                              <2> .s2:
  9199 00006F4C 66892F              <2> 	mov [edi], bp	;(cx+x,cy-y)
  9200 00006F4F 83EF02              <2> 	sub edi, 2
  9201 00006F52 4A                  <2> 	dec edx
  9202 00006F53 83FA00              <2> 	cmp edx, 0
  9203 00006F56 75F4                <2> 	jne .s2
  9204                              <2> .nos2:
  9205 00006F58 66892F              <2> 	mov [edi], bp
  9206 00006F5B 5A                  <2> 	pop edx
  9207 00006F5C 01C7                <2> 	add edi, eax	;(cx-x,cy-y)
  9208 00006F5E 01D7                <2> 	add edi, edx
  9209                              <2> 
  9210 00006F60 39D1                <2> 	cmp ecx, edx
  9211 00006F62 748C                <2> 	je .lpb
  9212                              <2> 
  9213 00006F64 51                  <2> 	push ecx
  9214 00006F65 01DF                <2> 	add edi, ebx
  9215 00006F67 29CF                <2> 	sub edi, ecx
  9216 00006F69 83F900              <2> 	cmp ecx, 0
  9217 00006F6C 740C                <2> 	je .nos3
  9218                              <2> .s3:
  9219 00006F6E 66892F              <2> 	mov [edi], bp	;(cx-y,cy+x)
  9220 00006F71 83C702              <2> 	add edi, 2
  9221 00006F74 49                  <2> 	dec ecx
  9222 00006F75 83F900              <2> 	cmp ecx, 0
  9223 00006F78 75F4                <2> 	jne .s3
  9224                              <2> .nos3:
  9225 00006F7A 66892F              <2> 	mov [edi], bp
  9226 00006F7D 59                  <2> 	pop ecx
  9227 00006F7E 51                  <2> 	push ecx
  9228 00006F7F 29DF                <2> 	sub edi, ebx
  9229 00006F81 29DF                <2> 	sub edi, ebx
  9230 00006F83 83F900              <2> 	cmp ecx, 0
  9231 00006F86 740C                <2> 	je .nos4
  9232                              <2> .s4:
  9233 00006F88 66892F              <2> 	mov [edi], bp	;(cx+y,cy-x)
  9234 00006F8B 83EF02              <2> 	sub edi, 2
  9235 00006F8E 49                  <2> 	dec ecx
  9236 00006F8F 83F900              <2> 	cmp ecx, 0
  9237 00006F92 75F4                <2> 	jne .s4
  9238                              <2> .nos4:
  9239 00006F94 66892F              <2> 	mov [edi], bp
  9240 00006F97 59                  <2> 	pop ecx
  9241 00006F98 01DF                <2> 	add edi, ebx	;(cx-y,cy-x)
  9242 00006F9A 01CF                <2> 	add edi, ecx
  9243                              <2> 
  9244 00006F9C D1EA                <2> 	shr edx, 1
  9245 00006F9E D1E9                <2> 	shr ecx, 1
  9246 00006FA0 39CA                <2> 	cmp edx, ecx
  9247 00006FA2 0F824CFFFFFF        <2> 	jb .lp
  9248                              <2> .done:
  9249 00006FA8 5D                  <2> 	pop ebp
  9250 00006FA9 C3                  <2> 	ret
  9251                              <2> 	
  9252 00006FAA 00000000            <2> .ddF_x dd 0
  9253 00006FAE 00000000            <2> .ddF_y dd 0
  9254                              <1> %include "source/gui/cursor.asm"
  9255                              <2> clearmousecursor:
  9256 00006FB2 BE[4F730000]        <2> 		mov esi, background
  9257 00006FB7 8B3D[815A0000]      <2> 		mov edi, [physbaseptr]
  9258 00006FBD 31D2                <2> 		xor edx, edx
  9259 00006FBF 31C9                <2> 		xor ecx, ecx
  9260 00006FC1 668B15[415D0000]    <2> 		mov dx, [lastmouseposition]
  9261 00006FC8 668B0D[435D0000]    <2> 		mov cx, [lastmouseposition + 2]
  9262 00006FCF 01D7                <2> 		add edi, edx
  9263 00006FD1 31D2                <2> 		xor edx, edx
  9264 00006FD3 668B15[595B0000]    <2> 		mov dx, [resolutionx2]
  9265 00006FDA 83F900              <2> 		cmp ecx, 0
  9266 00006FDD 7408                <2> 		je .nomul
  9267 00006FDF 52                  <2> 		push edx
  9268 00006FE0 89D0                <2> 		mov eax, edx
  9269 00006FE2 F7E1                <2> 		mul ecx
  9270 00006FE4 01C7                <2> 		add edi, eax
  9271 00006FE6 5A                  <2> 		pop edx
  9272                              <2> .nomul:
  9273                              <2> %ifdef 	gui.background
  9274 00006FE7 833D[27730000]00    <2> 		cmp dword [backgroundimage], 0
  9275 00006FEE 7431                <2> 		je .noyclr
  9276 00006FF0 8B35[27730000]      <2> 		mov esi, [backgroundimage]
  9277 00006FF6 2B3D[815A0000]      <2> 		sub edi, [physbaseptr]
  9278 00006FFC 01FE                <2> 		add esi, edi
  9279 00006FFE 033D[815A0000]      <2> 		add edi, [physbaseptr]
  9280                              <2> .backlp:
  9281 00007004 31DB                <2> 		xor ebx, ebx
  9282                              <2> .noyback:
  9283 00007006 8B041E              <2> 		mov eax, [esi + ebx]
  9284 00007009 89041F              <2> 		mov [edi + ebx], eax
  9285 0000700C 83C304              <2> 		add ebx, 4
  9286 0000700F 83FB10              <2> 		cmp ebx, 16
  9287 00007012 75F2                <2> 		jne .noyback
  9288 00007014 01D7                <2> 		add edi, edx
  9289 00007016 01D6                <2> 		add esi, edx
  9290 00007018 6641                <2> 		inc cx
  9291 0000701A 6683F910            <2> 		cmp cx, 16
  9292 0000701E 72E4                <2> 		jb .backlp
  9293 00007020 C3                  <2> 		ret
  9294                              <2> %endif
  9295                              <2> .noyclr:
  9296 00007021 668B06              <2> 		mov ax, [esi]
  9297 00007024 C1C010              <2> 		rol eax, 16
  9298 00007027 668B06              <2> 		mov ax, [esi]
  9299 0000702A 8907                <2> 		mov [edi], eax
  9300 0000702C 894704              <2> 		mov [edi + 4], eax
  9301 0000702F 894708              <2> 		mov [edi + 8], eax
  9302 00007032 89470C              <2> 		mov [edi + 12], eax
  9303 00007035 01D7                <2> 		add edi, edx
  9304 00007037 6641                <2> 		inc cx
  9305 00007039 6683F910            <2> 		cmp cx, 16
  9306 0000703D 72E2                <2> 		jb .noyclr
  9307 0000703F C3                  <2> 		ret
  9308                              <2> 
  9309                              <2> switchmousepos:		;;switch were the mouse is located
  9310 00007040 BE[9CEE2B00]        <2> 		mov esi, mousecolorbuf
  9311 00007045 8B3D[815A0000]      <2> 		mov edi, [physbaseptr]
  9312 0000704B 31D2                <2> 		xor edx, edx
  9313 0000704D 31C9                <2> 		xor ecx, ecx
  9314 0000704F 668B15[415D0000]    <2> 		mov dx, [lastmouseposition]
  9315 00007056 668B0D[435D0000]    <2> 		mov cx, [lastmouseposition + 2]
  9316 0000705D 01D7                <2> 		add edi, edx
  9317 0000705F 31D2                <2> 		xor edx, edx
  9318 00007061 668B15[595B0000]    <2> 		mov dx, [resolutionx2]
  9319 00007068 6683F900            <2> 		cmp cx, 0
  9320 0000706C 740A                <2> 		je noswmsy
  9321 0000706E 01D7                <2> swmsy:		add edi, edx
  9322 00007070 6649                <2> 		dec cx
  9323 00007072 6683F900            <2> 		cmp cx, 0
  9324 00007076 75F6                <2> 		jne swmsy
  9325 00007078 8B06                <2> noswmsy:	mov eax, [esi]
  9326 0000707A 8B5E04              <2> 		mov ebx, [esi + 4]
  9327 0000707D 8907                <2> 		mov [edi], eax
  9328 0000707F 895F04              <2> 		mov [edi + 4], ebx
  9329 00007082 8B4608              <2> 		mov eax, [esi + 8]
  9330 00007085 8B5E0C              <2> 		mov ebx, [esi + 12]
  9331 00007088 894708              <2> 		mov [edi + 8], eax
  9332 0000708B 895F0C              <2> 		mov [edi + 12], ebx
  9333 0000708E 01D7                <2> 		add edi, edx
  9334 00007090 83C610              <2> 		add esi, 16
  9335 00007093 81FE[9CEF2B00]      <2> 		cmp esi, mcolorend
  9336 00007099 72DD                <2> 		jb noswmsy
  9337                              <2> 		
  9338                              <2> switchmousepos2:
  9339 0000709B BE[9CEE2B00]        <2> 		mov esi, mousecolorbuf
  9340 000070A0 8B3D[815A0000]      <2> 		mov edi, [physbaseptr]
  9341 000070A6 31D2                <2> 		xor edx, edx
  9342 000070A8 31C9                <2> 		xor ecx, ecx
  9343 000070AA 668B15[455D0000]    <2> 		mov dx, [mousecursorposition]
  9344 000070B1 668B0D[475D0000]    <2> 		mov cx, [mousecursorposition + 2]
  9345 000070B8 01D7                <2> 		add edi, edx
  9346 000070BA 31D2                <2> 		xor edx, edx
  9347 000070BC 668B15[595B0000]    <2> 		mov dx, [resolutionx2]
  9348 000070C3 6683F900            <2> 		cmp cx, 0
  9349 000070C7 740A                <2> 		je noswmsy2
  9350 000070C9 01D7                <2> swmsy2:		add edi, edx
  9351 000070CB 6649                <2> 		dec cx
  9352 000070CD 6683F900            <2> 		cmp cx, 0
  9353 000070D1 75F6                <2> 		jne swmsy2
  9354 000070D3 8B07                <2> noswmsy2:	mov eax, [edi]
  9355 000070D5 8B5F04              <2> 		mov ebx, [edi + 4]
  9356 000070D8 8906                <2> 		mov [esi], eax
  9357 000070DA 895E04              <2> 		mov [esi + 4], ebx
  9358 000070DD 8B4708              <2> 		mov eax, [edi + 8]
  9359 000070E0 8B5F0C              <2> 		mov ebx, [edi + 12]
  9360 000070E3 894608              <2> 		mov [esi + 8], eax
  9361 000070E6 895E0C              <2> 		mov [esi + 12], ebx
  9362 000070E9 01D7                <2> 		add edi, edx
  9363 000070EB 83C610              <2> 		add esi, 16
  9364 000070EE 81FE[9CEF2B00]      <2> 		cmp esi, mcolorend
  9365 000070F4 72DD                <2> 		jb noswmsy2
  9366 000070F6 C3                  <2> 		ret
  9367                              <2> 		
  9368                              <1> %include "source/gui/icon.asm"
  9369 000070F7 0000                <2> iconcolor dw 0
  9370                              <2> 	showicon:	;;icon in si, position in (dx,cx), selected in ax, code in bx
  9371 000070F9 A2[EC890000]        <2> 		mov [iconselected], al
  9372 000070FE 8025[EC890000]01    <2> 		and byte [iconselected], 1
  9373 00007105 B401                <2> 		mov ah, 1
  9374 00007107 E8F9150000          <2> 		call graphicsadd
  9375                              <2> 	showicon2:
  9376 0000710C 8B3D[815A0000]      <2> 		mov edi, [physbaseptr]
  9377 00007112 6601D2              <2> 		add dx, dx
  9378 00007115 663B15[595B0000]    <2> 		cmp dx, [resolutionx2]
  9379 0000711C 720B                <2> 		jb screenxgood
  9380 0000711E 668B15[595B0000]    <2> 		mov dx, [resolutionx2]
  9381 00007125 6683EA40            <2> 		sub dx, 64
  9382                              <2> 	screenxgood:
  9383 00007129 6683F900            <2> 		cmp cx, 0
  9384 0000712D 742A                <2> 		je noscreenygoodchk
  9385 0000712F 663B0D[6D5A0000]    <2> 		cmp cx, [resolutiony]
  9386 00007136 720B                <2> 		jb screenygood
  9387 00007138 668B0D[6D5A0000]    <2> 		mov cx, [resolutiony]
  9388 0000713F 6683E920            <2> 		sub cx, 32
  9389                              <2> 	screenygood:
  9390 00007143 50                  <2> 		push eax
  9391 00007144 52                  <2> 		push edx
  9392 00007145 31C0                <2> 		xor eax, eax
  9393 00007147 31DB                <2> 		xor ebx, ebx
  9394 00007149 668B1D[595B0000]    <2> 		mov bx, [resolutionx2]
  9395 00007150 6689C8              <2> 		mov ax, cx
  9396 00007153 F7E3                <2> 		mul ebx
  9397 00007155 01C7                <2> 		add edi, eax
  9398 00007157 5A                  <2> 		pop edx
  9399 00007158 58                  <2> 		pop eax
  9400                              <2> 	noscreenygoodchk:
  9401 00007159 31DB                <2> 		xor ebx, ebx
  9402 0000715B 6689D3              <2> 		mov bx, dx
  9403 0000715E 01DF                <2> 		add edi, ebx
  9404 00007160 6631C9              <2> 		xor cx, cx
  9405 00007163 668B06              <2> 		mov ax, [esi]
  9406 00007166 83C602              <2> 		add esi, 2
  9407 00007169 66A3[F7700000]      <2> 		mov [iconcolor], ax
  9408                              <2> 	writeicon:
  9409 0000716F 8B06                <2> 		mov eax, [esi]
  9410 00007171 D1C0                <2> 		rol eax, 1
  9411 00007173 30C9                <2> 		xor cl, cl
  9412                              <2> 	writeiconline:
  9413 00007175 B201                <2> 		mov dl, 1
  9414 00007177 20C2                <2> 		and dl, al
  9415 00007179 3215[EC890000]      <2> 		xor dl, [iconselected]
  9416 0000717F 668B1D[4F730000]    <2> 		mov bx, [background]
  9417 00007186 66891F              <2> 		mov [edi], bx
  9418 00007189 80FA00              <2> 		cmp dl, 0
  9419 0000718C 740A                <2> 		je noiconline
  9420 0000718E 668B15[F7700000]    <2> 		mov dx, [iconcolor]
  9421 00007195 668917              <2> 		mov [edi], dx
  9422                              <2> 	noiconline:
  9423 00007198 83C702              <2> 		add edi, 2
  9424 0000719B D1C0                <2> 		rol eax, 1
  9425 0000719D FEC1                <2> 		inc cl
  9426 0000719F 80F920              <2> 		cmp cl, 32
  9427 000071A2 72D1                <2> 		jb writeiconline
  9428 000071A4 83C604              <2> 		add esi, 4
  9429 000071A7 FEC5                <2> 		inc ch
  9430 000071A9 31D2                <2> 		xor edx, edx
  9431 000071AB 668B15[595B0000]    <2> 		mov dx, [resolutionx2]
  9432 000071B2 01D7                <2> 		add edi, edx
  9433 000071B4 83EF40              <2> 		sub edi, 64
  9434 000071B7 80FD20              <2> 		cmp ch, 32
  9435 000071BA 72B3                <2> 		jb writeicon
  9436 000071BC 31C0                <2> 		xor eax, eax
  9437 000071BE C3                  <2> 		ret
  9438                              <1> %include "source/gui/line.asm"
  9439                              <2> drawline:	;from (bx,ax) to (dx,cx), color in si
  9440 000071BF 668935[C8720000]    <2> 	mov [.color], si
  9441 000071C6 C605[CA720000]00    <2> 	mov byte [.steep], 0
  9442 000071CD C605[CB720000]00    <2> 	mov byte [.yreversed], 0
  9443 000071D4 EB07                <2> 	jmp .notsteep
  9444                              <2> .steeploop:
  9445 000071D6 C605[CA720000]01    <2> 	mov byte [.steep], 1
  9446                              <2> .notsteep:
  9447 000071DD 31FF                <2> 	xor edi, edi
  9448 000071DF 31F6                <2> 	xor esi, esi
  9449 000071E1 6639DA              <2> 	cmp dx, bx
  9450 000071E4 7705                <2> 	ja .noreversex
  9451 000071E6 6687D3              <2> 	xchg dx, bx
  9452 000071E9 6691                <2> 	xchg cx, ax
  9453                              <2> .noreversex:
  9454 000071EB 6689D7              <2> 	mov di, dx
  9455 000071EE 6629DF              <2> 	sub di, bx
  9456                              <2> 	
  9457 000071F1 6639C1              <2> 	cmp cx, ax
  9458 000071F4 7208                <2> 	jb .reversey
  9459 000071F6 6689CE              <2> 	mov si, cx
  9460 000071F9 6629C6              <2> 	sub si, ax
  9461 000071FC EB0D                <2> 	jmp .normal
  9462                              <2> .reversey:
  9463 000071FE C605[CB720000]02    <2> 	mov byte [.yreversed], 2
  9464 00007205 6689C6              <2> 	mov si, ax
  9465 00007208 6629CE              <2> 	sub si, cx	
  9466                              <2> .normal:
  9467 0000720B 6687CA              <2> 	xchg cx, dx
  9468 0000720E 6693                <2> 	xchg ax, bx
  9469 00007210 6639FE              <2> 	cmp si, di
  9470 00007213 77C1                <2> 	ja .steeploop
  9471 00007215 6687CA              <2> 	xchg cx, dx
  9472 00007218 6693                <2> 	xchg ax, bx
  9473                              <2> 	
  9474 0000721A 6691                <2> 	xchg ax, cx
  9475 0000721C 6687DA              <2> 	xchg bx, dx
  9476 0000721F 66893D[CE720000]    <2> 	mov [.xdelta], di
  9477 00007226 668935[D0720000]    <2> 	mov [.ydelta], si
  9478 0000722D 668B35[C8720000]    <2> 	mov si, [.color]
  9479 00007234 66891D[CC720000]    <2> 	mov [.endline], bx
  9480 0000723B 6652                <2> 	push dx
  9481 0000723D 6651                <2> 	push cx
  9482 0000723F 6687CA              <2> 	xchg cx, dx
  9483 00007242 803D[CA720000]01    <2> 	cmp byte [.steep], 1
  9484 00007249 7403                <2> 	je .xchg
  9485 0000724B 6687D1              <2> 	xchg dx, cx
  9486                              <2> .xchg:
  9487 0000724E E871170000          <2> 	call getpixelmem	;get pointer to pixel in edi from (dx,cx)
  9488 00007253 6659                <2> 	pop cx
  9489 00007255 665A                <2> 	pop dx
  9490 00007257 31C0                <2> 	xor eax, eax
  9491 00007259 66A1[CE720000]      <2> 	mov ax, [.xdelta]
  9492 0000725F 66D1E8              <2> 	shr ax, 1
  9493 00007262 8A0D[CA720000]      <2> 	mov cl, [.steep]
  9494 00007268 0A0D[CB720000]      <2> 	or cl, [.yreversed]
  9495 0000726E 55                  <2> 	push ebp
  9496 0000726F 668B2D[CC720000]    <2> 	mov bp, [.endline]
  9497 00007276 6629D5              <2> 	sub bp, dx
  9498 00007279 668B15[D0720000]    <2> 	mov dx, [.ydelta]
  9499                              <2> .lp:
  9500 00007280 668937              <2> 	mov [edi], si
  9501 00007283 6639D0              <2> 	cmp ax, dx
  9502 00007286 7326                <2> 	jae .noaddx
  9503 00007288 F6C102              <2> 	test cl, 2
  9504 0000728B 740E                <2> 	jz .nodecy
  9505 0000728D F6C101              <2> 	test cl, 1
  9506 00007290 7506                <2> 	jnz .steepy
  9507 00007292 29DF                <2> 	sub edi, ebx
  9508 00007294 29DF                <2> 	sub edi, ebx
  9509 00007296 EB03                <2> 	jmp .nodecy
  9510                              <2> .steepy:
  9511 00007298 83EF04              <2> 	sub edi, 4
  9512                              <2> .nodecy:
  9513 0000729B 660305[CE720000]    <2> 	add ax, [.xdelta]
  9514 000072A2 F6C101              <2> 	test cl, 1
  9515 000072A5 7504                <2> 	jnz .steepx
  9516 000072A7 01DF                <2> 	add edi, ebx
  9517 000072A9 EB03                <2> 	jmp .noaddx
  9518                              <2> .steepx:
  9519 000072AB 83C702              <2> 	add edi, 2
  9520                              <2> .noaddx:
  9521 000072AE 6629D0              <2> 	sub ax, dx
  9522 000072B1 664D                <2> 	dec bp
  9523 000072B3 83C702              <2> 	add edi, 2
  9524 000072B6 F6C101              <2> 	test cl, 1
  9525 000072B9 7405                <2> 	jz .nosteepx
  9526 000072BB 83EF02              <2> 	sub edi, 2
  9527 000072BE 01DF                <2> 	add edi, ebx
  9528                              <2> .nosteepx:
  9529 000072C0 6683FD00            <2> 	cmp bp, 0
  9530 000072C4 75BA                <2> 	jne .lp
  9531                              <2> .done:
  9532 000072C6 5D                  <2> 	pop ebp
  9533 000072C7 C3                  <2> 	ret
  9534                              <2> 	
  9535 000072C8 0000                <2> .color dw 0
  9536 000072CA 00                  <2> .steep db 0
  9537 000072CB 00                  <2> .yreversed db 0
  9538 000072CC 0000                <2> .endline dw 0
  9539 000072CE 0000                <2> .xdelta dw 0
  9540 000072D0 0000                <2> .ydelta dw 0
  9541                              <1> %include "source/gui/refresh.asm"
  9542                              <2> guiclear:
  9543 000072D2 8B3D[815A0000]      <2> 	mov edi, [physbaseptr]
  9544 000072D8 668B15[6B5A0000]    <2> 	mov dx, [resolutionx]
  9545 000072DF 668B0D[6D5A0000]    <2> 	mov cx, [resolutiony]
  9546 000072E6 668B1D[4F730000]    <2> 	mov bx, [background]
  9547 000072ED 66891D[51730000]    <2> 	mov [background + 2], bx
  9548                              <2> %ifdef gui.background
  9549 000072F4 833D[27730000]00    <2> 	cmp dword [backgroundimage], 0
  9550 000072FB 742E                <2> 	je guiclear.noback
  9551 000072FD 8B35[27730000]      <2> 		mov esi, [backgroundimage]
  9552                              <2> 	.lp:
  9553                              <2> 		;movdqa xmm0, [esi]	;the next 4 lines are for SSE
  9554                              <2> 		;movdqa [edi], xmm0
  9555                              <2> 		;add esi, 16
  9556                              <2> 		;add edi, 16
  9557                              <2> 		;sub dx, 8
  9558 00007303 8B06                <2> 		mov eax, [esi]
  9559 00007305 8907                <2> 		mov [edi], eax
  9560 00007307 83C604              <2> 		add esi, 4
  9561 0000730A 83C704              <2> 		add edi, 4
  9562 0000730D 6683EA02            <2> 		sub dx, 2
  9563 00007311 6683FA00            <2> 		cmp dx, 0
  9564 00007315 77EC                <2> 		ja .lp
  9565 00007317 6649                <2> 		dec cx
  9566 00007319 668B15[6B5A0000]    <2> 		mov dx, [resolutionx]
  9567 00007320 6683F900            <2> 		cmp cx, 0
  9568 00007324 77DD                <2> 		ja .lp
  9569 00007326 C3                  <2> 		ret
  9570 00007327 00000000            <2> 	backgroundimage dd 0
  9571                              <2> %endif
  9572                              <2> guiclear.noback:
  9573 0000732B A1[4F730000]        <2> 	mov eax, [background]
  9574                              <2> guiclearloop:
  9575 00007330 8907                <2> 	mov [edi], eax
  9576 00007332 83C704              <2> 	add edi, 4
  9577 00007335 6683EA02            <2> 	sub dx, 2
  9578 00007339 6683FA00            <2> 	cmp dx, 0
  9579 0000733D 77F1                <2> 	ja guiclearloop
  9580 0000733F 6649                <2> 	dec cx
  9581 00007341 668B15[6B5A0000]    <2> 	mov dx, [resolutionx]
  9582 00007348 6683F900            <2> 	cmp cx, 0
  9583 0000734C 77E2                <2> 	ja guiclearloop
  9584 0000734E C3                  <2> 	ret
  9585                              <2> 
  9586 0000734F CF7B<rept>          <2> background times 2 dw 0111101111001111b
  9587                              <2> 	.original equ 0111101111001111b
  9588                              <2> 
  9589                              <2> reloadallgraphics:
  9590 00007353 BF[9CD80300]        <2> 		mov edi, graphicstable
  9591                              <2> reloadgraphicsloop:
  9592 00007358 8B7702              <2> 		mov esi, [edi + 2]
  9593 0000735B 668B5706            <2> 		mov dx, [edi + 6]
  9594 0000735F 668B4F08            <2> 		mov cx, [edi + 8]
  9595 00007363 668B07              <2> 		mov ax, [edi]
  9596 00007366 668B5F0A            <2> 		mov bx, [edi + 10]
  9597 0000736A 893D[F1860000]      <2> 		mov [grpctblpos], edi
  9598 00007370 3B3D[C3810000]      <2> 		cmp edi, [dragging]
  9599 00007376 741E                <2> 		je loadedgraphic
  9600 00007378 6683F801            <2> 		cmp ax, 1
  9601 0000737C 0F8433000000        <2> 		je near icongraphic
  9602 00007382 6683F802            <2> 		cmp ax, 2
  9603 00007386 0F8439000000        <2> 		je near stringgraphic
  9604 0000738C 6683F803            <2> 		cmp ax, 3
  9605 00007390 0F8413000000        <2> 		je near windowgraphic
  9606 00007396 8B3D[F1860000]      <2> loadedgraphic:  mov edi, [grpctblpos]
  9607 0000739C 83C710              <2> 		add edi, 16
  9608 0000739F 81FF[9CDA0300]      <2> 		cmp edi, graphicstableend
  9609 000073A5 732E                <2> 		jae donereloadgraphics
  9610 000073A7 EBAF                <2> 		jmp reloadgraphicsloop
  9611                              <2> windowgraphic:
  9612 000073A9 E80B090000          <2> 		call showwindow2
  9613 000073AE E816ABFFFF          <2> 		call cleardouble
  9614 000073B3 EBE1                <2> 		jmp loadedgraphic
  9615 000073B5 80E301              <2> icongraphic:	and bl, 1
  9616 000073B8 881D[EC890000]      <2> 		mov [iconselected], bl
  9617 000073BE E849FDFFFF          <2> 		call showicon2
  9618 000073C3 EBD1                <2> 		jmp loadedgraphic
  9619 000073C5 80E301              <2> stringgraphic:  and bl, 1
  9620 000073C8 881D[BF810000]      <2> 		mov [mouseselecton], bl
  9621 000073CE E8C6050000          <2> 		call showstring2
  9622 000073D3 EBC1                <2> 		jmp loadedgraphic
  9623                              <2> donereloadgraphics:
  9624 000073D5 8B3D[C3810000]      <2> 		mov edi, [dragging]
  9625 000073DB 81FF[9CD80300]      <2> 		cmp edi, graphicstable
  9626 000073E1 7226                <2> 		jb notcorrectdrag
  9627 000073E3 668B07              <2> 		mov ax, [edi]
  9628 000073E6 8B7702              <2> 		mov esi, [edi + 2]
  9629 000073E9 668B5706            <2> 		mov dx, [edi + 6]
  9630 000073ED 668B4F08            <2> 		mov cx, [edi + 8]
  9631 000073F1 668B5F0A            <2> 		mov bx, [edi + 10]
  9632 000073F5 6683F801            <2> 		cmp ax, 1
  9633 000073F9 750F                <2> 		jne noticondragging
  9634 000073FB 80E301              <2> 		and bl, 1
  9635 000073FE 881D[EC890000]      <2> 		mov [iconselected], bl
  9636 00007404 E803FDFFFF          <2> 		call showicon2
  9637                              <2> notcorrectdrag:
  9638 00007409 C3                  <2> 		ret
  9639                              <2> 
  9640                              <2> 	noticondragging:
  9641 0000740A 6683F802            <2> 		cmp ax, 2
  9642 0000740E 75F9                <2> 		jne notcorrectdrag
  9643 00007410 80E301              <2> 		and bl, 1
  9644 00007413 881D[BF810000]      <2> 		mov [mouseselecton], bl
  9645 00007419 E87B050000          <2> 		call showstring2
  9646 0000741E EBE9                <2> 		jmp notcorrectdrag
  9647                              <1> %include "source/gui/square.asm"
  9648                              <2> drawsquare:	;from (bx,ax) to (dx,cx), color in si
  9649 00007420 6639D3              <2> 	cmp bx, dx
  9650 00007423 7303                <2> 	jae .noxchgx
  9651 00007425 6687DA              <2> 	xchg bx, dx
  9652                              <2> .noxchgx:
  9653 00007428 6639C8              <2> 	cmp ax, cx
  9654 0000742B 7302                <2> 	jae .noxchgy
  9655 0000742D 6691                <2> 	xchg ax, cx
  9656                              <2> .noxchgy:
  9657 0000742F 6650                <2> 	push ax
  9658 00007431 6653                <2> 	push bx
  9659 00007433 6652                <2> 	push dx
  9660 00007435 E88A150000          <2> 	call getpixelmem	;get pointer to pixel in edi from (dx,cx)
  9661 0000743A 31D2                <2> 	xor edx, edx
  9662 0000743C 665A                <2> 	pop dx
  9663 0000743E 31DB                <2> 	xor ebx, ebx
  9664 00007440 665B                <2> 	pop bx
  9665 00007442 6658                <2> 	pop ax
  9666                              <2> .lp0:
  9667 00007444 6652                <2> 	push dx
  9668                              <2> .lp:
  9669 00007446 668937              <2> 	mov [edi], si
  9670 00007449 83C702              <2> 	add edi, 2
  9671 0000744C 6642                <2> 	inc dx
  9672 0000744E 6639DA              <2> 	cmp dx, bx
  9673 00007451 76F3                <2> 	jbe .lp
  9674 00007453 665A                <2> 	pop dx
  9675 00007455 83EF02              <2> 	sub edi, 2
  9676 00007458 29DF                <2> 	sub edi, ebx
  9677 0000745A 29DF                <2> 	sub edi, ebx
  9678 0000745C 01D7                <2> 	add edi, edx
  9679 0000745E 01D7                <2> 	add edi, edx
  9680 00007460 033D[595B0000]      <2> 	add edi, [resolutionx2]
  9681 00007466 6641                <2> 	inc cx
  9682 00007468 6639C1              <2> 	cmp cx, ax
  9683 0000746B 7203                <2> 	jb .lp2
  9684 0000746D 74D5                <2> 	je .lp0
  9685 0000746F C3                  <2> 	ret
  9686                              <2> .lp2:
  9687 00007470 57                  <2> 	push edi
  9688 00007471 668937              <2> 	mov [edi], si
  9689 00007474 29D7                <2> 	sub edi, edx
  9690 00007476 29D7                <2> 	sub edi, edx
  9691 00007478 01DF                <2> 	add edi, ebx
  9692 0000747A 01DF                <2> 	add edi, ebx
  9693 0000747C 668937              <2> 	mov [edi], si
  9694 0000747F 5F                  <2> 	pop edi
  9695 00007480 033D[595B0000]      <2> 	add edi, [resolutionx2]
  9696 00007486 6641                <2> 	inc cx
  9697 00007488 6639C1              <2> 	cmp cx, ax
  9698 0000748B 72E3                <2> 	jb .lp2
  9699 0000748D EBB5                <2> 	jmp .lp0
  9700                              <2> 
  9701                              <2> fillsquare:	;from (bx,ax) to (dx,cx), color in si
  9702 0000748F 6639D3              <2> 	cmp bx, dx
  9703 00007492 7303                <2> 	jae .noxchgx
  9704 00007494 6687DA              <2> 	xchg bx, dx
  9705                              <2> .noxchgx:
  9706 00007497 6639C8              <2> 	cmp ax, cx
  9707 0000749A 7302                <2> 	jae .noxchgy
  9708 0000749C 6691                <2> 	xchg ax, cx
  9709                              <2> .noxchgy:
  9710 0000749E 6650                <2> 	push ax
  9711 000074A0 6653                <2> 	push bx
  9712 000074A2 6652                <2> 	push dx
  9713 000074A4 E81B150000          <2> 	call getpixelmem	;get pointer to pixel in edi from (dx,cx)
  9714 000074A9 31D2                <2> 	xor edx, edx
  9715 000074AB 665A                <2> 	pop dx
  9716 000074AD 31DB                <2> 	xor ebx, ebx
  9717 000074AF 665B                <2> 	pop bx
  9718 000074B1 6658                <2> 	pop ax
  9719                              <2> .lp2:
  9720 000074B3 6652                <2> 	push dx
  9721                              <2> .lp:
  9722 000074B5 668937              <2> 	mov [edi], si
  9723 000074B8 83C702              <2> 	add edi, 2
  9724 000074BB 6642                <2> 	inc dx
  9725 000074BD 6639DA              <2> 	cmp dx, bx
  9726 000074C0 76F3                <2> 	jbe .lp
  9727 000074C2 665A                <2> 	pop dx
  9728 000074C4 83EF02              <2> 	sub edi, 2
  9729 000074C7 29DF                <2> 	sub edi, ebx
  9730 000074C9 29DF                <2> 	sub edi, ebx
  9731 000074CB 01D7                <2> 	add edi, edx
  9732 000074CD 01D7                <2> 	add edi, edx
  9733 000074CF 033D[595B0000]      <2> 	add edi, [resolutionx2]
  9734 000074D5 6641                <2> 	inc cx
  9735 000074D7 6639C1              <2> 	cmp cx, ax
  9736 000074DA 76D7                <2> 	jbe .lp2
  9737 000074DC C3                  <2> 	ret
  9738                              <1> %include "source/gui/startup.asm"
  9739                              <2> guisetup:
  9740                              <2> 	%ifdef gui.background
  9741 000074DD 31DB                <2> 	xor ebx, ebx
  9742 000074DF 891D[27730000]      <2> 	mov [backgroundimage], ebx
  9743                              <2> 	%endif
  9744 000074E5 E8E8FDFFFF          <2> 	call guiclear
  9745 000074EA C605[18960000]01    <2> 	mov byte [guion], 1
  9746 000074F1 C605[BF810000]00    <2> 	mov byte [mouseselecton], 0
  9747 000074F8 31C0                <2> 	xor eax, eax
  9748 000074FA 31DB                <2> 	xor ebx, ebx
  9749 000074FC 31C9                <2> 	xor ecx, ecx
  9750 000074FE 31D2                <2> 	xor edx, edx
  9751                              <2> 	
  9752 00007500 BE[BE760000]        <2> 	mov esi, pacmsg
  9753 00007505 30E4                <2> 	xor ah, ah
  9754 00007507 B010                <2> 	mov al, 00010000b
  9755 00007509 31DB                <2> 	xor ebx, ebx
  9756 0000750B 66B99000            <2> 	mov cx, 144
  9757 0000750F 66BA0400            <2> 	mov dx, 4
  9758 00007513 E86E040000          <2> 	call showstring
  9759                              <2> 	
  9760 00007518 BE[FC760000]        <2> 	mov esi, interneticon
  9761 0000751D 30E4                <2> 	xor ah, ah
  9762 0000751F B010                <2> 	mov al, 00010000b
  9763 00007521 BB[EA750000]        <2> 	mov ebx, noie
  9764 00007526 66B91800            <2> 	mov cx, 24
  9765 0000752A 66BA0400            <2> 	mov dx, 4
  9766 0000752E E8C6FBFFFF          <2> 	call showicon
  9767                              <2> 	
  9768 00007533 BE[7E770000]        <2> 	mov esi, wordicon
  9769 00007538 30E4                <2> 	xor ah, ah
  9770 0000753A B010                <2> 	mov al, 00010000b
  9771 0000753C 31DB                <2> 	xor ebx, ebx
  9772 0000753E 66B91800            <2> 	mov cx, 24
  9773 00007542 66BA3000            <2> 	mov dx, 48
  9774 00007546 E8AEFBFFFF          <2> 	call showicon
  9775                              <2> 	
  9776 0000754B BE[00780000]        <2> 	mov esi, pacmanpellet
  9777 00007550 30E4                <2> 	xor ah, ah
  9778 00007552 B010                <2> 	mov al, 00010000b
  9779 00007554 31DB                <2> 	xor ebx, ebx
  9780 00007556 66B94000            <2> 	mov cx, 64
  9781 0000755A 66BA0400            <2> 	mov dx, 4
  9782 0000755E E896FBFFFF          <2> 	call showicon
  9783                              <2> 	
  9784 00007563 BE[04790000]        <2> 	mov esi, pacman
  9785 00007568 30E4                <2> 	xor ah, ah
  9786 0000756A B010                <2> 	mov al, 00010000b
  9787 0000756C BB[D3750000]        <2> 	mov ebx, pacmannomnom
  9788 00007571 66B94000            <2> 	mov cx, 64
  9789 00007575 66BA3000            <2> 	mov dx, 48
  9790 00007579 E87BFBFFFF          <2> 	call showicon
  9791                              <2> 	
  9792 0000757E BE[82780000]        <2> 	mov esi, ghostie
  9793 00007583 30E4                <2> 	xor ah, ah
  9794 00007585 B010                <2> 	mov al, 00010000b
  9795 00007587 BB[BC750000]        <2> 	mov ebx, boo
  9796 0000758C 66B96C00            <2> 	mov cx, 108
  9797 00007590 66BA0400            <2> 	mov dx, 4
  9798 00007594 E860FBFFFF          <2> 	call showicon
  9799                              <2> 	
  9800 00007599 BE[A0760000]        <2> 	mov esi, start
  9801 0000759E 668B0D[6D5A0000]    <2> 	mov cx, [resolutiony]
  9802 000075A5 6683E910            <2> 	sub cx, 16
  9803 000075A9 66BA0200            <2> 	mov dx, 2
  9804 000075AD 30E4                <2> 	xor ah, ah
  9805 000075AF B010                <2> 	mov al, 00010000b
  9806 000075B1 BB[5E760000]        <2> 	mov ebx, winblows
  9807 000075B6 E8CB030000          <2> 	call showstring
  9808                              <2> 
  9809                              <2> %ifdef gui.time	
  9810                              <2> 	call guitime	;load time into timeshow/dateshow and show it
  9811                              <2> %endif
  9812 000075BB C3                  <2> 	ret
  9813                              <2> 
  9814                              <2> 	boo:
  9815 000075BC BE[B9760000]        <2> 		mov esi, boomsg
  9816 000075C1 66BA6400            <2> 		mov dx, 100
  9817 000075C5 66B94001            <2> 		mov cx, 320
  9818 000075C9 31DB                <2> 		xor ebx, ebx
  9819 000075CB 6631C0              <2> 		xor ax, ax
  9820 000075CE E9B3030000          <2> 		jmp showstring
  9821                              <2> 
  9822                              <2> 	pacmannomnom:
  9823 000075D3 BE[D7760000]        <2> 		mov esi, pacnom
  9824 000075D8 66BA8200            <2> 		mov dx, 130
  9825 000075DC 66B93C00            <2> 		mov cx, 60
  9826 000075E0 31DB                <2> 		xor ebx, ebx
  9827 000075E2 6631C0              <2> 		xor ax, ax
  9828 000075E5 E99C030000          <2> 		jmp showstring	
  9829                              <2> 	
  9830                              <2> 	noie:
  9831 000075EA 66C705[E6760000]80- <2> 		mov word [termwindow], 640
  9832 000075F2 02                  <2>
  9833 000075F3 66C705[E8760000]E0- <2> 		mov word [termwindow + 2], 480	;the previous lines of code make a large terminal window that is 4 characters smaller than the screen
  9834 000075FB 01                  <2>
  9835 000075FC BE[E6760000]        <2> 		mov esi, termwindow
  9836 00007601 66BA1000            <2> 		mov dx, 16
  9837 00007605 66B91000            <2> 		mov cx, 16
  9838 00007609 31DB                <2> 		xor ebx, ebx
  9839 0000760B 6631C0              <2> 		xor ax, ax
  9840 0000760E E8F1050000          <2> 		call showwindow
  9841 00007613 E97BB5FFFF          <2> 		jmp os
  9842                              <2> 
  9843                              <2> 	gotomenuboot:
  9844 00007618 31D2                <2> 		xor edx, edx
  9845 0000761A 31C9                <2> 		xor ecx, ecx
  9846 0000761C 668B15[6B5A0000]    <2> 		mov dx, [resolutionx]
  9847 00007623 668B0D[6D5A0000]    <2> 		mov cx, [resolutiony]
  9848 0000762A 66C1E904            <2> 		shr cx, 4
  9849 0000762E 6683E901            <2> 		sub cx, 1
  9850 00007632 66C1E104            <2> 		shl cx, 4
  9851 00007636 668915[E6760000]    <2> 		mov [termwindow], dx
  9852 0000763D 66890D[E8760000]    <2> 		mov [termwindow + 2], cx	;the previous lines of code make a large terminal window that is fullscreen
  9853 00007644 BE[E6760000]        <2> 		mov esi, termwindow
  9854 00007649 6631D2              <2> 		xor dx, dx
  9855 0000764C 6631C9              <2> 		xor cx, cx
  9856 0000764F 31DB                <2> 		xor ebx, ebx
  9857 00007651 6631C0              <2> 		xor ax, ax
  9858 00007654 E8AB050000          <2> 		call showwindow
  9859 00007659 E935B5FFFF          <2> 		jmp os
  9860                              <2> 
  9861                              <2> 	winblows:
  9862 0000765E BE[AF760000]        <2> 		mov esi, turnoffmsg
  9863 00007663 BB[DD550000]        <2> 		mov ebx, turnoff
  9864 00007668 668B0D[6D5A0000]    <2> 		mov cx, [resolutiony]
  9865 0000766F 6683E920            <2> 		sub cx, 32
  9866 00007673 6631D2              <2> 		xor dx, dx
  9867 00007676 30E4                <2> 		xor ah, ah
  9868 00007678 B010                <2> 		mov al, 00010000b
  9869 0000767A E807030000          <2> 		call showstring
  9870 0000767F BE[A6760000]        <2> 		mov esi, gotomenu
  9871 00007684 668B0D[6D5A0000]    <2> 		mov cx, [resolutiony]
  9872 0000768B 6683E930            <2> 		sub cx, 48
  9873 0000768F 6631D2              <2> 		xor dx, dx
  9874 00007692 30E4                <2> 		xor ah, ah
  9875 00007694 B010                <2> 		mov al, 00010000b
  9876 00007696 BB[18760000]        <2> 		mov ebx, gotomenuboot
  9877 0000769B E9E6020000          <2> 		jmp showstring
  9878                              <2> 		
  9879                              <2> 
  9880 000076A0 737461727400        <2> 	start	db "start",0
  9881 000076A6 536F6C6C65724F5300  <2> 	gotomenu db "SollerOS",0
  9882 000076AF 506F776572204F6666- <2> 	turnoffmsg db "Power Off",0
  9883 000076B8 00                  <2>
  9884 000076B9 426F6F2100          <2> 	boomsg db "Boo!",0
  9885 000076BE 5061636D616E207761- <2> 	pacmsg	db "Pacman was easy to draw.",0
  9886 000076C7 73206561737920746F- <2>
  9887 000076D0 20647261772E00      <2>
  9888 000076D7 4F6D206E6F6D206E6F- <2> 	pacnom  db "Om nom nom nom",0
  9889 000076E0 6D206E6F6D00        <2>
  9890                              <2> 
  9891 000076E6 20035802            <2> 	termwindow:	dw 800,600	;window size
  9892 000076EA FFFF0000            <2> 				dw 0xFFFF,0	;colors(FG,BG)
  9893 000076EE [9CEF2B00]-         <2> 				dd videobuf,videobuf2 ;location of buffers
  9894 000076F2 [E4C42C00]          <2>
  9895 000076F6 534855536800        <2> 	termmsg:	db "SHUSh",0	;window title
  9896                              <2> 	
  9897 000076FC <incbin>            <2> interneticon: 	incbin 'source/gui/icons/internet'
  9898 0000777E <incbin>            <2> wordicon: 	incbin 'source/gui/icons/word'
  9899 00007800 <incbin>            <2> pacmanpellet: incbin 'source/gui/icons/pellet'
  9900 00007882 <incbin>            <2> ghostie	incbin 'source/gui/icons/ghostie'
  9901 00007904 <incbin>            <2> pacman	incbin 'source/gui/icons/pacman'
  9902                              <2> 
  9903                              <2> %ifdef gui.time
  9904                              <2> guitime:
  9905                              <2> 		call time	;get rtc in timeshow & dateshow
  9906                              <2> 		xor ebx, ebx
  9907                              <2> 		mov dx, [resolutionx2]
  9908                              <2> 		xor cx, cx
  9909                              <2> 		sub dx, 304
  9910                              <2> 		mov esi, dateshow
  9911                              <2> 		mov al, 00010001b
  9912                              <2> 		call showstring
  9913                              <2> 		mov esi, timeshow
  9914                              <2> 		xor ebx, ebx
  9915                              <2> 		mov al, 00010001b
  9916                              <2> 		call showstring
  9917                              <2> 		ret
  9918                              <2> %endif
  9919                              <1> %include "source/gui/text.asm"
  9920                              <2> 	showstring:
  9921 00007986 A2[BF810000]        <2> 		mov [mouseselecton], al
  9922 0000798B 8025[BF810000]01    <2> 		and byte [mouseselecton], 1
  9923 00007992 B402                <2> 		mov ah, 2
  9924 00007994 E86C0D0000          <2> 		call graphicsadd
  9925                              <2> 	showstring2:	;location in (dx,cx), color in [colorfont2] and [background]
  9926 00007999 30E4                <2> 		xor ah, ah
  9927 0000799B 8A06                <2> 		mov al, [esi]
  9928 0000799D 3CFF                <2> 		cmp al, 0xFF
  9929 0000799F 7503                <2> 		jne .notnull
  9930 000079A1 46                  <2> 		inc esi
  9931 000079A2 EBF5                <2> 		jmp showstring2
  9932                              <2> .notnull:
  9933 000079A4 3CC0                <2> 		cmp al, 0xC0
  9934 000079A6 7231                <2> 		jb .doneutf
  9935 000079A8 3CE0                <2> 		cmp al, 0xE0
  9936 000079AA 721A                <2> 		jb .two
  9937 000079AC 46                  <2> 		inc esi
  9938 000079AD 668B1E              <2> 		mov bx, [esi]
  9939 000079B0 46                  <2> 		inc esi
  9940 000079B1 C0E004              <2> 		shl al, 4
  9941 000079B4 66C1E302            <2> 		shl bx, 2
  9942 000079B8 C0EF02              <2> 		shr bh, 2
  9943 000079BB 66C1EB02            <2> 		shr bx, 2
  9944 000079BF 08C7                <2> 		or bh, al
  9945 000079C1 6689D8              <2> 		mov ax, bx
  9946 000079C4 EB13                <2> 		jmp .doneutf
  9947                              <2> 	.two:
  9948 000079C6 8A3E                <2> 		mov bh, [esi]
  9949 000079C8 46                  <2> 		inc esi
  9950 000079C9 8A1E                <2> 		mov bl, [esi]
  9951 000079CB 66C1E302            <2> 		shl bx, 2
  9952 000079CF C0EF02              <2> 		shr bh, 2
  9953 000079D2 66C1EB02            <2> 		shr bx, 2
  9954 000079D6 6689D8              <2> 		mov ax, bx
  9955                              <2> 	.doneutf:
  9956 000079D9 6683F800            <2> 		cmp ax, 0
  9957 000079DD 741B                <2> 		je doneshowstring
  9958 000079DF 46                  <2> 		inc esi
  9959 000079E0 56                  <2> 		push esi
  9960 000079E1 668B1D[027A0000]    <2> 		mov bx, [colorfont2]
  9961 000079E8 E826000000          <2> 		call showfontvesa
  9962 000079ED 6683F80A            <2> 		cmp ax, 10
  9963 000079F1 7404                <2> 		je noproceedshst
  9964 000079F3 6683C208            <2> 		add dx, 8
  9965                              <2> 	noproceedshst:
  9966 000079F7 5E                  <2> 		pop esi
  9967 000079F8 EB9F                <2> 		jmp showstring2
  9968                              <2> 	doneshowstring:
  9969 000079FA C605[BF810000]00    <2> 		mov byte [mouseselecton], 0
  9970 00007A01 C3                  <2> 		ret
  9971                              <2> 
  9972 00007A02 FFFF                <2> colorfont2 dw 0xFFFF
  9973 00007A04 00                  <2> colorcache db 0
  9974                              <2> 
  9975 00007A05 02                  <2> resolutionbytes db 2
  9976 00007A06 0000                <2> posxvesa dw 0
  9977 00007A08 0000                <2> posyvesa dw 0
  9978 00007A0A FFFF                <2> colorfont dw 0xFFFF
  9979                              <2> savefontvesa:		;same rules as showfontvesa
  9980 00007A0C C605[BE810000]01    <2> 	mov byte [savefonton], 1
  9981                              <2> showfontvesa:		;position in (dx,cx), color in bx, char in ax
  9982 00007A13 663DFF00            <2> 	cmp ax, 255
  9983 00007A17 7501                <2> 	jne nostopshowfont
  9984 00007A19 C3                  <2> 	ret
  9985                              <2> nostopshowfont:
  9986 00007A1A 55                  <2> 	push ebp
  9987 00007A1B 66890D[087A0000]    <2> 	mov [posyvesa], cx
  9988 00007A22 6683F80A            <2> 	cmp ax, 10
  9989 00007A26 0F8423000000        <2> 	je near goodvesafontx
  9990 00007A2C 31C9                <2> 	xor ecx, ecx
  9991 00007A2E 668B0D[595B0000]    <2> 	mov cx, [resolutionx2]
  9992 00007A35 6639CA              <2> 	cmp dx, cx
  9993 00007A38 7615                <2> 	jbe goodvesafontx
  9994 00007A3A 6631D2              <2> 	xor dx, dx
  9995 00007A3D 668B0D[087A0000]    <2> 	mov cx, [posyvesa]
  9996 00007A44 6683C110            <2> 	add cx, 16
  9997 00007A48 66890D[087A0000]    <2> 	mov [posyvesa], cx
  9998                              <2> goodvesafontx:
  9999 00007A4F 668B0D[087A0000]    <2> 	mov cx, [posyvesa]
 10000 00007A56 668915[067A0000]    <2> 	mov [posxvesa], dx
 10001 00007A5D 8B3D[815A0000]      <2> 	mov edi, [physbaseptr]
 10002 00007A63 66891D[0A7A0000]    <2> 	mov [colorfont], bx
 10003 00007A6A 668B2D[0A7A0000]    <2> 	mov bp, [colorfont]
 10004 00007A71 31DB                <2> 	xor ebx, ebx
 10005 00007A73 6689C3              <2> 	mov bx, ax
 10006 00007A76 31C0                <2> 	xor eax, eax
 10007 00007A78 6689D8              <2> 	mov ax, bx
 10008 00007A7B 6689D3              <2> 	mov bx, dx
 10009 00007A7E 89DA                <2> 	mov edx, ebx
 10010 00007A80 31DB                <2> 	xor ebx, ebx
 10011 00007A82 6683F900            <2> 	cmp cx, 0
 10012 00007A86 7414                <2> 	je vesaposloopdn
 10013 00007A88 668B1D[595B0000]    <2> 	mov bx, [resolutionx2]
 10014                              <2> vesaposloop:
 10015 00007A8F 52                  <2> 	push edx
 10016 00007A90 50                  <2> 	push eax
 10017 00007A91 31C0                <2> 	xor eax, eax
 10018 00007A93 6689C8              <2> 	mov ax, cx
 10019 00007A96 F7E3                <2> 	mul ebx
 10020 00007A98 01C7                <2> 	add edi, eax
 10021 00007A9A 58                  <2> 	pop eax
 10022 00007A9B 5A                  <2> 	pop edx
 10023                              <2> vesaposloopdn:
 10024 00007A9C 01D7                <2> 	add edi, edx
 10025 00007A9E BE[72980000]        <2> 	mov esi, fonts
 10026                              <2> findfontvesa:
 10027 00007AA3 6683F80A            <2> 	cmp ax, 10
 10028 00007AA7 0F84E4000000        <2> 	je near nwlinevesa
 10029 00007AAD C1E004              <2> 	shl eax, 4
 10030 00007AB0 01C6                <2> 	add esi, eax
 10031 00007AB2 C1E804              <2> 	shr eax, 4
 10032 00007AB5 81FE[72980300]      <2> 	cmp esi, fontend
 10033 00007ABB 0F83A4000000        <2> 	jae near donefontvesa
 10034 00007AC1 4E                  <2> 	dec esi
 10035                              <2> foundfontvesa:
 10036 00007AC2 46                  <2> 	inc esi
 10037 00007AC3 803D[BE810000]01    <2> 	cmp byte [savefonton], 1
 10038 00007ACA 0F84DF000000        <2> 	je near vesafontsaver
 10039 00007AD0 30C9                <2> 	xor cl, cl
 10040 00007AD2 8A06                <2> 	mov al, [esi]
 10041 00007AD4 668B15[595B0000]    <2> 	mov dx, [resolutionx2]
 10042 00007ADB 662B15[067A0000]    <2> 	sub dx, [posxvesa]
 10043 00007AE2 6683FA10            <2> 	cmp dx, 16
 10044 00007AE6 7708                <2> 	ja paintfontvesa
 10045 00007AE8 D0EA                <2> 	shr dl, 1
 10046 00007AEA 8815[907B0000]      <2> 	mov [charwidth], dl
 10047                              <2> paintfontvesa:
 10048 00007AF0 B201                <2> 	mov dl, 1
 10049 00007AF2 20C2                <2> 	and dl, al
 10050 00007AF4 803D[BD810000]01    <2> 	cmp byte [showcursorfonton], 1
 10051 00007AFB 0F842B000000        <2> 	je near nodelpaintedfont
 10052 00007B01 803D[BD810000]02    <2> 	cmp byte [showcursorfonton], 2
 10053 00007B08 0F850E000000        <2> 	jne near noswitchcursorfonton
 10054 00007B0E 80FA00              <2> 	cmp dl, 0
 10055 00007B11 0F841D000000        <2> 	je near nopixelset
 10056 00007B17 66892F              <2> 	mov [edi], bp
 10057 00007B1A EB18                <2> 	jmp nopixelset
 10058                              <2> noswitchcursorfonton:
 10059 00007B1C 3215[BF810000]      <2> 	xor dl, [mouseselecton]
 10060 00007B22 668B1D[4F730000]    <2> 	mov bx, [background]
 10061 00007B29 66891F              <2> 	mov [edi], bx
 10062                              <2> nodelpaintedfont:
 10063 00007B2C 80FA00              <2> 	cmp dl, 0
 10064 00007B2F 7403                <2> 	je nopixelset
 10065 00007B31 66892F              <2> 	mov [edi], bp
 10066                              <2> nopixelset:
 10067 00007B34 83C702              <2> 	add edi, 2
 10068 00007B37 D0C0                <2> 	rol al, 1
 10069 00007B39 FEC1                <2> 	inc cl
 10070 00007B3B 3A0D[907B0000]      <2> 	cmp cl, [charwidth]
 10071 00007B41 72AD                <2> 	jb paintfontvesa
 10072 00007B43 FEC5                <2> 	inc ch
 10073 00007B45 31D2                <2> 	xor edx, edx
 10074 00007B47 668B15[595B0000]    <2> 	mov dx, [resolutionx2]
 10075 00007B4E 01D7                <2> 	add edi, edx
 10076 00007B50 31D2                <2> 	xor edx, edx
 10077 00007B52 8A15[907B0000]      <2> 	mov dl, [charwidth]
 10078 00007B58 00D2                <2> 	add dl, dl
 10079 00007B5A 29D7                <2> 	sub edi, edx
 10080 00007B5C 80FD10              <2> 	cmp ch, 16
 10081 00007B5F 0F825DFFFFFF        <2> 	jb foundfontvesa
 10082                              <2> donefontvesa:
 10083 00007B65 C605[907B0000]08    <2> 	mov byte [charwidth], 8
 10084 00007B6C 668B15[067A0000]    <2> 	mov dx, [posxvesa]
 10085 00007B73 8A1D[907B0000]      <2> 	mov bl, [charwidth]
 10086 00007B79 30FF                <2> 	xor bh, bh
 10087 00007B7B 6601DA              <2> 	add dx, bx
 10088 00007B7E 6689EB              <2> 	mov bx, bp
 10089 00007B81 668B0D[087A0000]    <2> 	mov cx, [posyvesa]
 10090 00007B88 883D[BE810000]      <2> 	mov [savefonton], bh
 10091 00007B8E 5D                  <2> 	pop ebp
 10092 00007B8F C3                  <2> 	ret
 10093 00007B90 08                  <2> charwidth db 8
 10094                              <2> nwlinevesa:
 10095 00007B91 6631D2              <2> 	xor dx, dx
 10096 00007B94 668915[067A0000]    <2> 	mov [posxvesa], dx
 10097 00007B9B 668B0D[087A0000]    <2> 	mov cx, [posyvesa]
 10098 00007BA2 6683C110            <2> 	add cx, 16
 10099 00007BA6 66890D[087A0000]    <2> 	mov [posyvesa], cx
 10100 00007BAD EBB6                <2> 	jmp donefontvesa
 10101                              <2> vesafontsaver:
 10102 00007BAF 30C0                <2> 	xor al, al
 10103 00007BB1 30C9                <2> 	xor cl, cl
 10104                              <2> vesafontsaver2:
 10105 00007BB3 66392F              <2> 	cmp [edi], bp
 10106 00007BB6 7426                <2> 	je colorfontmatch
 10107                              <2> donecolormatch:
 10108 00007BB8 83C702              <2> 	add edi, 2
 10109 00007BBB D0C0                <2> 	rol al, 1
 10110 00007BBD FEC1                <2> 	inc cl
 10111 00007BBF 80F908              <2> 	cmp cl, 8
 10112 00007BC2 72EF                <2> 	jb vesafontsaver2
 10113 00007BC4 8806                <2> 	mov [esi], al
 10114 00007BC6 46                  <2> 	inc esi
 10115 00007BC7 FEC5                <2> 	inc ch
 10116 00007BC9 31D2                <2> 	xor edx, edx
 10117 00007BCB 668B15[595B0000]    <2> 	mov dx, [resolutionx2]
 10118 00007BD2 01D7                <2> 	add edi, edx
 10119 00007BD4 83EF10              <2> 	sub edi, 16
 10120 00007BD7 80FD10              <2> 	cmp ch, 16
 10121 00007BDA 72D3                <2> 	jb vesafontsaver
 10122 00007BDC EB87                <2> 	jmp donefontvesa
 10123                              <2> colorfontmatch:
 10124 00007BDE 0401                <2> 	add al, 1
 10125 00007BE0 EBD6                <2> 	jmp donecolormatch
 10126                              <1> %include "source/gui/window.asm"
 10127 00007BE2 0000                <2> winvcopystx dw 0
 10128 00007BE4 0000                <2> winvcopysty dw 0
 10129 00007BE6 0000                <2> winvcopydx dw 0
 10130 00007BE8 0000                <2> winvcopycx dw 0
 10131 00007BEA FFFF0000            <2> windowcolor dw 0xFFFF,0
 10132 00007BEE 00000000            <2> windowbufloc: dd 0
 10133 00007BF2 00000000            <2> windowvideobuf dd 0
 10134 00007BF6 00000000            <2> windowvideobuf2 dd 0
 10135 00007BFA 00000000            <2> windowinfobuf dd 0
 10136 00007BFE 0000                <2> termcol dw 0
 10137 00007C00 00000000            <2> wincopyendpos dd 0
 10138                              <2> 
 10139                              <2> 	showwindow:	;windowstuff in esi, position in (dx, cx), nothing in ax, code in ebx
 10140 00007C04 C605[49240000]01    <2> 		mov byte [termguion], 1
 10141 00007C0B 6683C110            <2> 		add cx, 16
 10142 00007C0F 668915[E27B0000]    <2> 		mov [winvcopystx], dx
 10143 00007C16 66890D[E47B0000]    <2> 		mov [winvcopysty], cx
 10144 00007C1D 8935[FA7B0000]      <2> 		mov [windowinfobuf], esi
 10145 00007C23 668B16              <2> 		mov dx, [esi]
 10146 00007C26 668B4E02            <2> 		mov cx, [esi + 2]
 10147 00007C2A 31C0                <2> 		xor eax, eax
 10148 00007C2C 31DB                <2> 		xor ebx, ebx
 10149 00007C2E 6689D0              <2> 		mov ax, dx
 10150 00007C31 6689CB              <2> 		mov bx, cx
 10151 00007C34 66C1E803            <2> 		shr ax, 3
 10152 00007C38 66C1EB04            <2> 		shr bx, 4
 10153 00007C3C 66A3[FE7B0000]      <2> 		mov [termcol], ax
 10154 00007C42 A2[22260000]        <2> 		mov [charxy], al
 10155 00007C47 881D[23260000]      <2> 		mov [charxy + 1], bl
 10156 00007C4D 8B7E04              <2> 		mov edi, [esi + 4]
 10157 00007C50 893D[EA7B0000]      <2> 		mov [windowcolor], edi
 10158 00007C56 8B7E0C              <2> 		mov edi, [esi + 12]
 10159 00007C59 893D[F67B0000]      <2> 		mov [windowvideobuf2], edi
 10160 00007C5F 8B7E08              <2> 		mov edi, [esi + 8]
 10161 00007C62 893D[F27B0000]      <2> 		mov [windowvideobuf], edi
 10162 00007C68 83FB00              <2> 		cmp ebx, 0
 10163 00007C6B 0F842B050000        <2> 		je near donewincopynow
 10164                              <2> 	findendposwin:
 10165 00007C71 C1E002              <2> 		shl eax, 2
 10166 00007C74 31D2                <2> 		xor edx, edx
 10167 00007C76 F7E3                <2> 		mul ebx
 10168 00007C78 01C7                <2> 		add edi, eax
 10169 00007C7A 893D[007C0000]      <2> 		mov [wincopyendpos], edi
 10170 00007C80 31FF                <2> 		xor edi, edi
 10171 00007C82 6631C0              <2> 		xor ax, ax
 10172 00007C85 6631DB              <2> 		xor bx, bx
 10173 00007C88 6601D2              <2> 		add dx, dx
 10174 00007C8B 668915[E67B0000]    <2> 		mov [winvcopydx], dx
 10175 00007C92 66890D[E87B0000]    <2> 		mov [winvcopycx], cx
 10176 00007C99 668B0D[E47B0000]    <2> 		mov cx, [winvcopysty]
 10177 00007CA0 6683E910            <2> 		sub cx, 16
 10178 00007CA4 668B15[E27B0000]    <2> 		mov dx, [winvcopystx]
 10179 00007CAB C605[4A240000]00    <2> 		mov byte [termcopyon], 0
 10180 00007CB2 B403                <2> 		mov ah, 3
 10181 00007CB4 E84C0A0000          <2> 		call graphicsadd
 10182                              <2> 	showwindow2:
 10183 00007CB9 6683C110            <2> 		add cx, 16
 10184 00007CBD 668915[E27B0000]    <2> 		mov [winvcopystx], dx
 10185 00007CC4 66890D[E47B0000]    <2> 		mov [winvcopysty], cx
 10186 00007CCB 668B16              <2> 		mov dx, [esi]
 10187 00007CCE 668B4E02            <2> 		mov cx, [esi + 2]
 10188 00007CD2 6601D2              <2> 		add dx, dx
 10189 00007CD5 668915[E67B0000]    <2> 		mov [winvcopydx], dx
 10190 00007CDC 66890D[E87B0000]    <2> 		mov [winvcopycx], cx
 10191 00007CE3 E818000000          <2> 		call reloadwindowtitle
 10192 00007CE8 803D[EC860000]01    <2> 		cmp byte [windrag], 1
 10193 00007CEF 0F83B6040000        <2> 		jae near forgetresetstuff
 10194 00007CF5 8B3D[EE7B0000]      <2> 		mov edi, [windowbufloc]
 10195 00007CFB E957020000          <2> 		jmp windowvideocopyset
 10196                              <2> 		
 10197                              <2> 	reloadwindowtitle:
 10198 00007D00 8B3D[EE7B0000]      <2> 		mov edi, [windowbufloc]
 10199 00007D06 31D2                <2> 		xor edx, edx
 10200 00007D08 668B15[595B0000]    <2> 		mov dx, [resolutionx2]
 10201 00007D0F C1E204              <2> 		shl edx, 4
 10202 00007D12 29D7                <2> 		sub edi, edx
 10203 00007D14 803D[4A240000]00    <2> 		cmp byte [termcopyon], 0
 10204 00007D1B 7530                <2> 		jne nocleartitlebarpos
 10205 00007D1D 8B3D[815A0000]      <2> 		mov edi, [physbaseptr]
 10206 00007D23 31D2                <2> 		xor edx, edx
 10207 00007D25 668B15[E27B0000]    <2> 		mov dx, [winvcopystx]
 10208 00007D2C 01D7                <2> 		add edi, edx
 10209 00007D2E 31C9                <2> 		xor ecx, ecx
 10210 00007D30 668B0D[E47B0000]    <2> 		mov cx, [winvcopysty]
 10211 00007D37 6683E910            <2> 		sub cx, 16
 10212 00007D3B 6683F900            <2> 		cmp cx, 0
 10213 00007D3F 740C                <2> 		je nocleartitlebarpos
 10214                              <2> 	cleartitlebarpos:
 10215 00007D41 31C0                <2> 		xor eax, eax
 10216 00007D43 66A1[595B0000]      <2> 		mov ax, [resolutionx2]
 10217 00007D49 F7E1                <2> 		mul ecx
 10218 00007D4B 01C7                <2> 		add edi, eax
 10219                              <2> 	nocleartitlebarpos:
 10220 00007D4D 66B91000            <2> 		mov cx, 16
 10221 00007D51 668B15[E67B0000]    <2> 		mov dx, [winvcopydx]
 10222 00007D58 6683F900            <2> 		cmp cx, 0
 10223 00007D5C 0F8441000000        <2> 		je near canceltitlebarput
 10224 00007D62 6683FA00            <2> 		cmp dx, 0
 10225 00007D66 0F8437000000        <2> 		je near canceltitlebarput
 10226                              <2> 	titlebarput:
 10227 00007D6C 66A1[EA7B0000]      <2> 		mov ax, [windowcolor]
 10228 00007D72 668907              <2> 		mov [edi], ax
 10229 00007D75 6683EA02            <2> 		sub dx, 2
 10230 00007D79 83C702              <2> 		add edi, 2
 10231 00007D7C 6683FA00            <2> 		cmp dx, 0
 10232 00007D80 75EA                <2> 		jne titlebarput
 10233 00007D82 31D2                <2> 		xor edx, edx
 10234 00007D84 668B15[595B0000]    <2> 		mov dx, [resolutionx2]
 10235 00007D8B 6649                <2> 		dec cx
 10236 00007D8D 662B15[E67B0000]    <2> 		sub dx, [winvcopydx]
 10237 00007D94 01D7                <2> 		add edi, edx
 10238 00007D96 668B15[E67B0000]    <2> 		mov dx, [winvcopydx]
 10239 00007D9D 6683F900            <2> 		cmp cx, 0
 10240 00007DA1 75C9                <2> 		jne titlebarput
 10241                              <2> 	canceltitlebarput:
 10242 00007DA3 893D[EE7B0000]      <2> 		mov [windowbufloc], edi
 10243 00007DA9 803D[4A240000]02    <2> 		cmp byte [termcopyon], 2
 10244 00007DB0 0F8412010000        <2> 		je near winvcpst
 10245 00007DB6 668B1D[4F730000]    <2> 		mov bx, [background]
 10246 00007DBD 6653                <2> 		push bx
 10247 00007DBF 6631DB              <2> 		xor bx, bx
 10248 00007DC2 66891D[4F730000]    <2> 		mov [background], bx
 10249 00007DC9 6631C0              <2> 		xor ax, ax
 10250 00007DCC 83C610              <2> 		add esi, 16
 10251 00007DCF 668B15[E27B0000]    <2> 		mov dx, [winvcopystx]
 10252 00007DD6 668B0D[E47B0000]    <2> 		mov cx, [winvcopysty]
 10253 00007DDD 6683E910            <2> 		sub cx, 16
 10254 00007DE1 668B1D[EA7B0000]    <2> 		mov bx, [windowcolor]
 10255 00007DE8 C605[BF810000]01    <2> 		mov byte [mouseselecton], 1
 10256 00007DEF E8A5FBFFFF          <2> 		call showstring2	;Show window title
 10257 00007DF4 8B35[262D0000]      <2> 		mov esi, [usercache]
 10258 00007DFA 6683C210            <2> 		add dx, 16
 10259 00007DFE C605[BF810000]01    <2> 		mov byte [mouseselecton], 1
 10260 00007E05 E88FFBFFFF          <2> 		call showstring2	;Show user name
 10261 00007E0A BE[E3950000]        <2> 		mov esi, computer
 10262 00007E0F C605[BF810000]01    <2> 		mov byte [mouseselecton], 1
 10263 00007E16 E87EFBFFFF          <2> 		call showstring2	;Show computer name
 10264 00007E1B 66B85800            <2> 		mov ax, "X"
 10265 00007E1F 66BB00F8            <2> 		mov bx, 1111100000000000b
 10266 00007E23 668B15[E27B0000]    <2> 		mov dx, [winvcopystx]
 10267 00007E2A 668B0D[E47B0000]    <2> 		mov cx, [winvcopysty]
 10268 00007E31 6683E910            <2> 		sub cx, 16
 10269 00007E35 6683EA10            <2> 		sub dx, 16
 10270 00007E39 660315[E67B0000]    <2> 		add dx, [winvcopydx]
 10271 00007E40 C605[BF810000]01    <2> 		mov byte [mouseselecton], 1
 10272 00007E47 663B15[595B0000]    <2> 		cmp dx, [resolutionx2]
 10273 00007E4E 7305                <2> 		jae .nox
 10274 00007E50 E8BEFBFFFF          <2> 		call showfontvesa
 10275                              <2> .nox:
 10276 00007E55 668B1D[4F730000]    <2> 		mov bx, [background]
 10277 00007E5C 6683EA18            <2> 		sub dx, 24
 10278 00007E60 66B82B00            <2> 		mov ax, "+"
 10279 00007E64 66BBE007            <2> 		mov bx, 0000011111100000b
 10280 00007E68 C605[BF810000]01    <2> 		mov byte [mouseselecton], 1
 10281 00007E6F 663B15[595B0000]    <2> 		cmp dx, [resolutionx2]
 10282 00007E76 7305                <2> 		jae .noplus
 10283 00007E78 E896FBFFFF          <2> 		call showfontvesa
 10284                              <2> .noplus:
 10285 00007E7D 6683EA18            <2> 		sub dx, 24
 10286 00007E81 66B82D00            <2> 		mov ax, "-"
 10287 00007E85 66BBE0FF            <2> 		mov bx, 1111111111100000b
 10288 00007E89 C605[BF810000]01    <2> 		mov byte [mouseselecton], 1
 10289 00007E90 663B15[595B0000]    <2> 		cmp dx, [resolutionx2]
 10290 00007E97 7305                <2> 		jae .nominus
 10291 00007E99 E875FBFFFF          <2> 		call showfontvesa
 10292                              <2> .nominus:
 10293 00007E9E 6683EA18            <2> 		sub dx, 24
 10294 00007EA2 66B83F00            <2> 		mov ax, "?"
 10295 00007EA6 66BB1F00            <2> 		mov bx, 0000000000011111b
 10296 00007EAA C605[BF810000]01    <2> 		mov byte [mouseselecton], 1
 10297 00007EB1 663B15[595B0000]    <2> 		cmp dx, [resolutionx2]
 10298 00007EB8 7305                <2> 		jae .noquestion
 10299 00007EBA E854FBFFFF          <2> 		call showfontvesa
 10300                              <2> .noquestion:
 10301 00007EBF 665B                <2> 		pop bx
 10302 00007EC1 66891D[4F730000]    <2> 		mov [background], bx
 10303                              <2> 	winvcpst:
 10304 00007EC8 C3                  <2> 		ret
 10305                              <2> 
 10306                              <2> 	windowvideocopy:
 10307 00007EC9 8B35[FA7B0000]      <2> 		mov esi, [windowinfobuf]
 10308 00007ECF 668B16              <2> 		mov dx, [esi]
 10309 00007ED2 668B4E02            <2> 		mov cx, [esi + 2]
 10310 00007ED6 8B7E04              <2> 		mov edi, [esi + 4]
 10311 00007ED9 893D[EA7B0000]      <2> 		mov [windowcolor], edi
 10312 00007EDF 8B7E08              <2> 		mov edi, [esi + 8]
 10313 00007EE2 8B5E0C              <2> 		mov ebx, [esi + 12]
 10314 00007EE5 893D[F27B0000]      <2> 		mov [windowvideobuf], edi
 10315 00007EEB 891D[F67B0000]      <2> 		mov [windowvideobuf2], ebx
 10316 00007EF1 31C0                <2> 		xor eax, eax
 10317 00007EF3 31DB                <2> 		xor ebx, ebx
 10318 00007EF5 6689D0              <2> 		mov ax, dx
 10319 00007EF8 6689CB              <2> 		mov bx, cx
 10320 00007EFB 66C1E803            <2> 		shr ax, 3
 10321 00007EFF 66C1EB04            <2> 		shr bx, 4
 10322 00007F03 66A3[FE7B0000]      <2> 		mov [termcol], ax
 10323 00007F09 A2[22260000]        <2> 		mov [charxy], al
 10324 00007F0E 881D[23260000]      <2> 		mov [charxy + 1], bl
 10325 00007F14 8B3D[EE7B0000]      <2> 		mov edi, [windowbufloc]
 10326 00007F1A 3B3D[815A0000]      <2> 		cmp edi, [physbaseptr]
 10327 00007F20 0F8331000000        <2> 		jae near windowvideocopyset
 10328 00007F26 31C9                <2> 		xor ecx, ecx
 10329 00007F28 31D2                <2> 		xor edx, edx
 10330 00007F2A 668B15[E27B0000]    <2> 		mov dx, [winvcopystx]
 10331 00007F31 668B0D[E47B0000]    <2> 		mov cx, [winvcopysty]
 10332 00007F38 8B3D[815A0000]      <2> 		mov edi, [physbaseptr]
 10333 00007F3E 01D7                <2> 		add edi, edx
 10334 00007F40 83F900              <2> 		cmp ecx, 0
 10335 00007F43 7412                <2> 		je windowvideocopyset
 10336                              <2> 	yrescopylp:
 10337 00007F45 31C0                <2> 		xor eax, eax
 10338 00007F47 66A1[595B0000]      <2> 		mov ax, [resolutionx2]
 10339 00007F4D F7E1                <2> 		mul ecx
 10340 00007F4F 01C7                <2> 		add edi, eax
 10341 00007F51 893D[EE7B0000]      <2> 		mov [windowbufloc], edi
 10342                              <2> 	windowvideocopyset:
 10343 00007F57 6631C9              <2> 		xor cx, cx
 10344 00007F5A 6649                <2> 		dec cx
 10345 00007F5C 66890D[B3810000]    <2> 		mov [charposline], cx
 10346 00007F63 89FE                <2> 		mov esi, edi
 10347 00007F65 83EE10              <2> 		sub esi, 16
 10348 00007F68 31D2                <2> 		xor edx, edx
 10349 00007F6A 668B15[595B0000]    <2> 		mov dx, [resolutionx2]
 10350 00007F71 C1E204              <2> 		shl edx, 4
 10351 00007F74 01D6                <2> 		add esi, edx
 10352 00007F76 8B3D[F27B0000]      <2> 		mov edi, [windowvideobuf]
 10353 00007F7C 83EF04              <2> 		sub edi, 4
 10354 00007F7F 893D[B5810000]      <2> 		mov [charposvbuf], edi
 10355 00007F85 E912010000          <2> 		jmp nextcharwin
 10356                              <2> 	win.write:	;adjusted this to use alpha
 10357                              <2> 				;5R, 6G, 5B
 10358                              <2> %ifdef gui.alphablending
 10359 00007F8A 56                  <2> 		push esi
 10360 00007F8B 6653                <2> 		push bx
 10361 00007F8D 6651                <2> 		push cx
 10362 00007F8F 6652                <2> 		push dx
 10363                              <2> %ifdef gui.background
 10364 00007F91 89FE                <2> 		mov esi, edi
 10365 00007F93 2B35[815A0000]      <2> 		sub esi, [physbaseptr]
 10366 00007F99 0335[27730000]      <2> 		add esi, [backgroundimage]
 10367 00007F9F 833D[27730000]00    <2> 		cmp dword [backgroundimage], 0
 10368 00007FA6 7505                <2> 		jne .red
 10369                              <2> %endif
 10370 00007FA8 BE[4F730000]        <2> 		mov esi, background
 10371                              <2> 	.red:
 10372 00007FAD 668B0E              <2> 		mov cx, [esi]
 10373 00007FB0 66C1E90B            <2> 		shr cx, 11
 10374 00007FB4 6689C3              <2> 		mov bx, ax
 10375 00007FB7 66C1EB0B            <2> 		shr bx, 11
 10376 00007FBB 6601D9              <2> 		add cx, bx
 10377 00007FBE 6601D9              <2> 		add cx, bx
 10378 00007FC1 6601D9              <2> 		add cx, bx
 10379 00007FC4 66C1E902            <2> 		shr cx, 2
 10380 00007FC8 66C1E10B            <2> 		shl cx, 11
 10381 00007FCC 6689CA              <2> 		mov dx, cx
 10382                              <2> 	.green:
 10383 00007FCF 668B0E              <2> 		mov cx, [esi]
 10384 00007FD2 66C1E105            <2> 		shl cx, 5
 10385 00007FD6 66C1E90A            <2> 		shr cx, 10
 10386 00007FDA 6689C3              <2> 		mov bx, ax
 10387 00007FDD 66C1E305            <2> 		shl bx, 5
 10388 00007FE1 66C1EB0A            <2> 		shr bx, 10
 10389 00007FE5 6601D9              <2> 		add cx, bx
 10390 00007FE8 6601D9              <2> 		add cx, bx
 10391 00007FEB 6601D9              <2> 		add cx, bx
 10392 00007FEE 66C1E902            <2> 		shr cx, 2
 10393 00007FF2 66C1E105            <2> 		shl cx, 5
 10394 00007FF6 6601CA              <2> 		add dx, cx
 10395                              <2> 	.blue:
 10396 00007FF9 668B0E              <2> 		mov cx, [esi]
 10397 00007FFC 66C1E10B            <2> 		shl cx, 11
 10398 00008000 66C1E90B            <2> 		shr cx, 11
 10399 00008004 6689C3              <2> 		mov bx, ax
 10400 00008007 66C1E30B            <2> 		shl bx, 11
 10401 0000800B 66C1EB0B            <2> 		shr bx, 11
 10402 0000800F 6601D9              <2> 		add cx, bx
 10403 00008012 6601D9              <2> 		add cx, bx
 10404 00008015 6601D9              <2> 		add cx, bx
 10405 00008018 66C1E902            <2> 		shr cx, 2
 10406 0000801C 6601CA              <2> 		add dx, cx
 10407 0000801F 668917              <2> 		mov [edi], dx
 10408 00008022 665A                <2> 		pop dx
 10409 00008024 6659                <2> 		pop cx
 10410 00008026 665B                <2> 		pop bx
 10411 00008028 5E                  <2> 		pop esi
 10412                              <2> %else
 10413                              <2> 		mov [edi], ax
 10414                              <2> %endif
 10415 00008029 C3                  <2> 		ret
 10416                              <2> 	copywindow:
 10417 0000802A B201                <2> 		mov dl, 1
 10418 0000802C D0C6                <2> 		rol dh, 1
 10419 0000802E 20F2                <2> 		and dl, dh
 10420 00008030 66813D[047A0000]80- <2> 		cmp word [colorcache], 0x80
 10421 00008038 00                  <2>
 10422 00008039 731D                <2> 		jae switchwincolors
 10423 0000803B 66A1[EC7B0000]      <2> 		mov ax, [windowcolor + 2]
 10424 00008041 E844FFFFFF          <2> 		call win.write
 10425 00008046 80FA00              <2> 		cmp dl, 0
 10426 00008049 7428                <2> 		je nowritewin
 10427 0000804B 66A1[EA7B0000]      <2> 		mov ax, [windowcolor]
 10428 00008051 E834FFFFFF          <2> 		call win.write
 10429 00008056 EB1B                <2> 		jmp nowritewin
 10430                              <2> 	switchwincolors:
 10431 00008058 66A1[EA7B0000]      <2> 		mov ax, [windowcolor]
 10432 0000805E E827FFFFFF          <2> 		call win.write
 10433 00008063 80FA00              <2> 		cmp dl, 0
 10434 00008066 740B                <2> 		je nowritewin
 10435 00008068 66A1[EC7B0000]      <2> 		mov ax, [windowcolor + 2]
 10436 0000806E E817FFFFFF          <2> 		call win.write
 10437                              <2> 	nowritewin:
 10438 00008073 83C702              <2> 		add edi, 2
 10439 00008076 FEC1                <2> 		inc cl
 10440 00008078 80F908              <2> 		cmp cl, 8
 10441 0000807B 75AD                <2> 		jne copywindow
 10442 0000807D 43                  <2> 		inc ebx
 10443 0000807E 30C9                <2> 		xor cl, cl
 10444 00008080 31D2                <2> 		xor edx, edx
 10445 00008082 668B15[595B0000]    <2> 		mov dx, [resolutionx2]
 10446 00008089 01D6                <2> 		add esi, edx
 10447 0000808B 89F7                <2> 		mov edi, esi
 10448 0000808D 8AB3[72980000]      <2> 		mov dh, [fonts + ebx]
 10449 00008093 D0CE                <2> 		ror dh, 1
 10450 00008095 FEC5                <2> 		inc ch
 10451 00008097 80FD10              <2> 		cmp ch, 16
 10452 0000809A 758E                <2> 		jne copywindow
 10453                              <2> 	nextcharwin:
 10454 0000809C 6631C9              <2> 		xor cx, cx
 10455 0000809F 8B3D[B5810000]      <2> 		mov edi, [charposvbuf]
 10456 000080A5 83C704              <2> 		add edi, 4
 10457 000080A8 3B3D[007C0000]      <2> 		cmp edi, [wincopyendpos]
 10458 000080AE 0F83E8000000        <2> 		jae near donewincopynow
 10459 000080B4 668B5F02            <2> 		mov bx, [edi + 2]
 10460 000080B8 6683FB00            <2> 		cmp bx, 0
 10461 000080BC 7508                <2> 		jne nofixcolorwin
 10462 000080BE 66BB0700            <2> 		mov bx, 7
 10463 000080C2 66895F02            <2> 		mov [edi + 2], bx
 10464                              <2> 	nofixcolorwin:
 10465 000080C6 66891D[047A0000]    <2> 		mov [colorcache], bx
 10466 000080CD 8B1F                <2> 		mov ebx, [edi]
 10467 000080CF 893D[B5810000]      <2> 		mov [charposvbuf], edi
 10468 000080D5 833D[F67B0000]00    <2> 		cmp dword [windowvideobuf2], 0
 10469 000080DC 7452                <2> 		je noskipcharcopy
 10470 000080DE 2B3D[F27B0000]      <2> 		sub edi, [windowvideobuf]
 10471 000080E4 033D[F67B0000]      <2> 		add edi, [windowvideobuf2]
 10472 000080EA 8B07                <2> 		mov eax, [edi]
 10473 000080EC 39D8                <2> 		cmp eax, ebx
 10474 000080EE 7540                <2> 		jne noskipcharcopy
 10475                              <2> 	skipcharcopy:
 10476 000080F0 83C610              <2> 		add esi, 16
 10477 000080F3 668B0D[B3810000]    <2> 		mov cx, [charposline]
 10478 000080FA 6641                <2> 		inc cx
 10479 000080FC 66890D[B3810000]    <2> 		mov [charposline], cx
 10480 00008103 663B0D[FE7B0000]    <2> 		cmp cx, [termcol]
 10481 0000810A 7290                <2> 		jb nextcharwin
 10482 0000810C 6631C9              <2> 		xor cx, cx
 10483 0000810F 66890D[B3810000]    <2> 		mov [charposline], cx
 10484 00008116 31D2                <2> 		xor edx, edx
 10485 00008118 668B15[595B0000]    <2> 		mov dx, [resolutionx2]
 10486 0000811F C1E204              <2> 		shl edx, 4
 10487 00008122 662B15[E67B0000]    <2> 		sub dx, [winvcopydx]
 10488 00008129 01D6                <2> 		add esi, edx
 10489 0000812B E96CFFFFFF          <2> 		jmp nextcharwin
 10490                              <2> 	noskipcharcopy:
 10491 00008130 891F                <2> 		mov [edi], ebx
 10492 00008132 8B3D[B5810000]      <2> 		mov edi, [charposvbuf]
 10493 00008138 C1E310              <2> 		shl ebx, 16
 10494 0000813B C1EB0C              <2> 		shr ebx, 12
 10495 0000813E 31D2                <2> 		xor edx, edx
 10496 00008140 668B15[595B0000]    <2> 		mov dx, [resolutionx2]
 10497 00008147 C1E204              <2> 		shl edx, 4
 10498 0000814A 29D6                <2> 		sub esi, edx
 10499 0000814C 83C610              <2> 		add esi, 16
 10500 0000814F 89F7                <2> 		mov edi, esi
 10501 00008151 668B0D[B3810000]    <2> 		mov cx, [charposline]
 10502 00008158 6641                <2> 		inc cx
 10503 0000815A 663B0D[FE7B0000]    <2> 		cmp cx, [termcol]
 10504 00008161 7317                <2> 		jae fixwindowcopy
 10505 00008163 66890D[B3810000]    <2> 		mov [charposline], cx
 10506 0000816A 6631C9              <2> 		xor cx, cx
 10507 0000816D 8AB3[72980000]      <2> 		mov dh, [fonts + ebx]
 10508 00008173 D0CE                <2> 		ror dh, 1
 10509 00008175 E9B0FEFFFF          <2> 		jmp copywindow
 10510                              <2> fixwindowcopy:
 10511 0000817A 6631C9              <2> 		xor cx, cx
 10512 0000817D 66890D[B3810000]    <2> 		mov [charposline], cx
 10513 00008184 662B15[E67B0000]    <2> 		sub dx, [winvcopydx]
 10514 0000818B 01D6                <2> 		add esi, edx
 10515 0000818D 89F7                <2> 		mov edi, esi
 10516 0000818F 8AB3[72980000]      <2> 		mov dh, [fonts + ebx]
 10517 00008195 D0CE                <2> 		ror dh, 1
 10518 00008197 E98EFEFFFF          <2> 		jmp copywindow
 10519                              <2> donewincopynow:
 10520 0000819C 803D[4A240000]01    <2> 		cmp byte [termcopyon], 1
 10521 000081A3 7506                <2> 		jne forgetresetstuff
 10522 000081A5 E87FA8FFFF          <2> 		call switchtermcursor
 10523 000081AA 61                  <2> 		popa
 10524                              <2> forgetresetstuff:
 10525 000081AB C605[4A240000]00    <2> 		mov byte [termcopyon], 0
 10526 000081B2 C3                  <2> 		ret
 10527                              <2> 		
 10528 000081B3 0000                <2> charposline dw 0
 10529 000081B5 00000000            <2> charposvbuf dw 0,0
 10530                              <1> 				
 10531 000081B9 00                  <1> copygui db 0
 10532 000081BA 00                  <1> graphicsset db 0
 10533 000081BB 0000                <1> graphicspos db 0,0
 10534 000081BD 00                  <1> showcursorfonton db 0
 10535 000081BE 00                  <1> savefonton db 0
 10536 000081BF 00                  <1> mouseselecton db 0
 10537                              <1> 
 10538 000081C0 00                  <1> pbutton db 0
 10539 000081C1 00                  <1> pLBUTTON db 0
 10540 000081C2 00                  <1> pRBUTTON db 0
 10541 000081C3 00000000            <1> dragging dw 0,0
 10542 000081C7 0000000000000000    <1> lastpos dw 0,0,0,0
 10543 000081CF 00000000            <1> colorbuf dw 0,0
 10544                              <1> 	
 10545                              <1> 	clickicon:
 10546 000081D3 B001                <1> 		mov al, 1
 10547 000081D5 A2[C0810000]        <1> 		mov [pbutton], al
 10548 000081DA A0[C1810000]        <1> 		mov al, [pLBUTTON]
 10549 000081DF 2205[545E0000]      <1> 		and al, [LBUTTON]
 10550 000081E5 8A25[C2810000]      <1> 		mov ah, [pRBUTTON]
 10551 000081EB 2225[555E0000]      <1> 		and ah, [RBUTTON]
 10552 000081F1 08E0                <1> 		or al, ah
 10553 000081F3 3C00                <1> 		cmp al, 0
 10554 000081F5 7415                <1> 		je nodragclick
 10555 000081F7 833D[C3810000]01    <1> 		cmp dword [dragging], 1
 10556 000081FE 732C                <1> 		jae dragclick
 10557 00008200 C705[C3810000]0100- <1> 		mov dword [dragging], 1
 10558 00008208 0000                <1>
 10559 0000820A EB20                <1> 		jmp dragclick
 10560                              <1> 	nodragclick:
 10561 0000820C 31C0                <1> 		xor eax, eax
 10562 0000820E A3[C3810000]        <1> 		mov dword [dragging], eax
 10563 00008213 A2[C0810000]        <1> 		mov [pbutton], al
 10564 00008218 A0[545E0000]        <1> 		mov al, [LBUTTON]
 10565 0000821D A2[C1810000]        <1> 		mov [pLBUTTON], al
 10566 00008222 A0[555E0000]        <1> 		mov al, [RBUTTON]
 10567 00008227 A2[C2810000]        <1> 		mov [pRBUTTON], al
 10568                              <1> 	dragclick:
 10569 0000822C 6631C0              <1> 		xor ax, ax
 10570 0000822F BE[9CD80300]        <1> 		mov esi, graphicstable
 10571 00008234 C705[E8890000]0000- <1> 		mov dword [codepointer], 0
 10572 0000823C 0000                <1>
 10573                              <1> 	clicon2:
 10574 0000823E 31D2                <1> 		xor edx, edx
 10575 00008240 31C9                <1> 		xor ecx, ecx
 10576 00008242 66833E01            <1> 		cmp word [esi], 1
 10577 00008246 0F8419000000        <1> 		je near iconselect
 10578 0000824C 66833E02            <1> 		cmp word [esi], 2
 10579 00008250 0F8465010000        <1> 		je near textselected
 10580 00008256 66833E03            <1> 		cmp word [esi], 3
 10581 0000825A 0F84AF020000        <1> 		je near windowselect
 10582 00008260 E9EB030000          <1> 		jmp nexticonsel
 10583                              <1> 	iconselect:
 10584 00008265 668B5606            <1> 		mov dx, [esi + 6]
 10585 00008269 6689D0              <1> 		mov ax, dx
 10586 0000826C 668B4E08            <1> 		mov cx, [esi + 8]
 10587 00008270 6689CB              <1> 		mov bx, cx
 10588 00008273 6683C320            <1> 		add bx, 32
 10589 00008277 6601D0              <1> 		add ax, dx
 10590 0000827A 833D[C3810000]01    <1> 		cmp dword [dragging], 1
 10591 00008281 7469                <1> 		je dragicon
 10592 00008283 833D[C3810000]00    <1> 		cmp dword [dragging], 0
 10593 0000828A 740E                <1> 		je nodragiconcheck
 10594 0000828C 3935[C3810000]      <1> 		cmp dword [dragging], esi
 10595 00008292 0F85B8030000        <1> 		jne near nexticonsel
 10596 00008298 EB52                <1> 		jmp dragicon
 10597                              <1> 	nodragiconcheck:
 10598 0000829A 663905[455D0000]    <1> 		cmp [mousecursorposition], ax
 10599 000082A1 0F82A9030000        <1> 		jb near nexticonsel
 10600 000082A7 6683C040            <1> 		add ax, 64
 10601 000082AB 663905[455D0000]    <1> 		cmp [mousecursorposition], ax
 10602 000082B2 0F8798030000        <1> 		ja near nexticonsel
 10603 000082B8 6629D0              <1> 		sub ax, dx
 10604 000082BB 66390D[475D0000]    <1> 		cmp [mousecursorposition + 2], cx
 10605 000082C2 0F8288030000        <1> 		jb near nexticonsel
 10606 000082C8 66391D[475D0000]    <1> 		cmp [mousecursorposition + 2], bx
 10607 000082CF 0F877B030000        <1> 		ja near nexticonsel
 10608 000082D5 668B460A            <1> 		mov ax, [esi + 10]
 10609 000082D9 6683E001            <1> 		and ax, 1
 10610 000082DD 6683F801            <1> 		cmp ax, 1
 10611 000082E1 0F84B5000000        <1> 		je near unselecticon
 10612 000082E7 E98D000000          <1> 		jmp nodragicon
 10613                              <1> 	dragicon:
 10614 000082EC 663905[415D0000]    <1> 		cmp [lastmouseposition], ax
 10615 000082F3 0F8257030000        <1> 		jb near nexticonsel
 10616 000082F9 6683C040            <1> 		add ax, 64
 10617 000082FD 663905[415D0000]    <1> 		cmp [lastmouseposition], ax
 10618 00008304 0F8746030000        <1> 		ja near nexticonsel
 10619 0000830A 6629D0              <1> 		sub ax, dx
 10620 0000830D 66390D[435D0000]    <1> 		cmp [lastmouseposition + 2], cx
 10621 00008314 0F8236030000        <1> 		jb near nexticonsel
 10622 0000831A 66391D[435D0000]    <1> 		cmp [lastmouseposition + 2], bx
 10623 00008321 0F8729030000        <1> 		ja near nexticonsel
 10624 00008327 668B460A            <1> 		mov ax, [esi + 10]
 10625 0000832B 2410                <1> 		and al, 00010000b
 10626 0000832D 3C10                <1> 		cmp al, 00010000b
 10627 0000832F 7448                <1> 		je nodragicon
 10628 00008331 8935[C3810000]      <1> 		mov [dragging], esi
 10629 00008337 66D1E2              <1> 		shl dx, 1
 10630 0000833A 662B15[415D0000]    <1> 		sub dx, [lastmouseposition]
 10631 00008341 660315[455D0000]    <1> 		add dx, [mousecursorposition]
 10632 00008348 66D1EA              <1> 		shr dx, 1
 10633 0000834B 66030D[475D0000]    <1> 		add cx, [mousecursorposition + 2]
 10634 00008352 662B0D[435D0000]    <1> 		sub cx, [lastmouseposition + 2]
 10635 00008359 663B15[595B0000]    <1> 		cmp dx, [resolutionx2]
 10636 00008360 7607                <1> 		jbe chkyresdrgicn
 10637 00008362 668B15[455D0000]    <1> 		mov dx, [mousecursorposition]
 10638                              <1> 	chkyresdrgicn:
 10639 00008369 663B0D[6D5A0000]    <1> 		cmp cx, [resolutiony]
 10640 00008370 7607                <1> 		jbe nodragicon
 10641 00008372 668B0D[475D0000]    <1> 		mov cx, [mousecursorposition + 2]
 10642                              <1> 	nodragicon:
 10643 00008379 66834E0A01          <1> 		or word [esi + 10], 1
 10644 0000837E 8B5E0C              <1> 		mov ebx, [esi + 12]
 10645 00008381 668B460A            <1> 		mov ax, [esi + 10]
 10646 00008385 8B7602              <1> 		mov esi, [esi + 2]
 10647 00008388 C705[E8890000]0000- <1> 		mov dword [codepointer], 0
 10648 00008390 0000                <1>
 10649 00008392 E862EDFFFF          <1> 		call showicon
 10650 00008397 E9C9020000          <1> 		jmp doneiconsel
 10651                              <1> 	unselecticon:
 10652 0000839C 6683660AFE          <1> 		and word [esi + 10], 0xFFFE
 10653 000083A1 8B5E0C              <1> 		mov ebx, [esi + 12]
 10654 000083A4 668B460A            <1> 		mov ax, [esi + 10]
 10655 000083A8 8B7602              <1> 		mov esi, [esi + 2]
 10656 000083AB 891D[E8890000]      <1> 		mov [codepointer], ebx
 10657 000083B1 E843EDFFFF          <1> 		call showicon
 10658 000083B6 E9AA020000          <1> 		jmp doneiconsel
 10659                              <1> 	textselected:
 10660 000083BB 8B5E02              <1> 		mov ebx, [esi + 2]
 10661 000083BE 668B5606            <1> 		mov dx, [esi + 6]
 10662 000083C2 6689D0              <1> 		mov ax, dx
 10663 000083C5 668B4E08            <1> 		mov cx, [esi + 8]
 10664                              <1> 	lengthtesttext:
 10665 000083C9 803B00              <1> 		cmp byte [ebx], 0
 10666 000083CC 7407                <1> 		je donetesttextlength
 10667 000083CE 43                  <1> 		inc ebx
 10668 000083CF 6683C010            <1> 		add ax, 16
 10669 000083D3 EBF4                <1> 		jmp lengthtesttext
 10670                              <1> 	donetesttextlength:
 10671 000083D5 6689CB              <1> 		mov bx, cx
 10672 000083D8 6683C30F            <1> 		add bx, 15
 10673 000083DC 833D[C3810000]01    <1> 		cmp dword [dragging], 1
 10674 000083E3 7462                <1> 		je dragtext
 10675 000083E5 833D[C3810000]00    <1> 		cmp dword [dragging], 0
 10676 000083EC 740E                <1> 		je nodragtextcheck
 10677 000083EE 3935[C3810000]      <1> 		cmp dword [dragging], esi
 10678 000083F4 0F8556020000        <1> 		jne near nexticonsel
 10679 000083FA EB4B                <1> 		jmp dragtext
 10680                              <1> 	nodragtextcheck:
 10681 000083FC 663915[455D0000]    <1> 		cmp [mousecursorposition], dx
 10682 00008403 0F8247020000        <1> 		jb near nexticonsel
 10683 00008409 663905[455D0000]    <1> 		cmp [mousecursorposition], ax
 10684 00008410 0F873A020000        <1> 		ja near nexticonsel
 10685 00008416 66390D[475D0000]    <1> 		cmp [mousecursorposition + 2], cx
 10686 0000841D 0F822D020000        <1> 		jb near nexticonsel
 10687 00008423 66391D[475D0000]    <1> 		cmp [mousecursorposition + 2], bx
 10688 0000842A 0F8720020000        <1> 		ja near nexticonsel
 10689 00008430 668B460A            <1> 		mov ax, [esi + 10]
 10690 00008434 6683E001            <1> 		and ax, 1
 10691 00008438 6683F801            <1> 		cmp ax, 1
 10692 0000843C 0F84AA000000        <1> 		je near unselecttext
 10693 00008442 E986000000          <1> 		jmp nodragtext
 10694                              <1> 	dragtext:
 10695 00008447 663915[415D0000]    <1> 		cmp [lastmouseposition], dx
 10696 0000844E 0F82FC010000        <1> 		jb near nexticonsel
 10697 00008454 663905[415D0000]    <1> 		cmp [lastmouseposition], ax
 10698 0000845B 0F87EF010000        <1> 		ja near nexticonsel
 10699 00008461 66390D[435D0000]    <1> 		cmp [lastmouseposition + 2], cx
 10700 00008468 0F82E2010000        <1> 		jb near nexticonsel
 10701 0000846E 66391D[435D0000]    <1> 		cmp [lastmouseposition + 2], bx
 10702 00008475 0F87D5010000        <1> 		ja near nexticonsel
 10703 0000847B 668B460A            <1> 		mov ax, [esi + 10]
 10704 0000847F 2410                <1> 		and al, 00010000b
 10705 00008481 6683F810            <1> 		cmp ax, 00010000b
 10706 00008485 0F8442000000        <1> 		je near nodragtext
 10707 0000848B 8935[C3810000]      <1> 		mov [dragging], esi
 10708 00008491 662B15[415D0000]    <1> 		sub dx, [lastmouseposition]
 10709 00008498 660315[455D0000]    <1> 		add dx, [mousecursorposition]
 10710 0000849F 66030D[475D0000]    <1> 		add cx, [mousecursorposition + 2]
 10711 000084A6 662B0D[435D0000]    <1> 		sub cx, [lastmouseposition + 2]
 10712 000084AD 663B15[595B0000]    <1> 		cmp dx, [resolutionx2]
 10713 000084B4 7607                <1> 		jbe chkyresdrgtxt
 10714 000084B6 668B15[455D0000]    <1> 		mov dx, [mousecursorposition]
 10715                              <1> 	chkyresdrgtxt:
 10716 000084BD 663B0D[6D5A0000]    <1> 		cmp cx, [resolutiony]
 10717 000084C4 7607                <1> 		jbe nodragtext
 10718 000084C6 668B0D[475D0000]    <1> 		mov cx, [mousecursorposition + 2]
 10719                              <1> 	nodragtext:
 10720 000084CD 66834E0A01          <1> 		or word [esi + 10], 1
 10721 000084D2 8B5E0C              <1> 		mov ebx, [esi + 12]
 10722 000084D5 891D[E8890000]      <1> 		mov [codepointer], ebx
 10723 000084DB 668B460A            <1> 		mov ax, [esi + 10]
 10724 000084DF 8B7602              <1> 		mov esi, [esi + 2]
 10725 000084E2 E89FF4FFFF          <1> 		call showstring
 10726 000084E7 E979010000          <1> 		jmp doneiconsel
 10727                              <1> 	unselecttext:
 10728 000084EC 6683660AFE          <1> 		and word [esi + 10], 0xFFFE
 10729 000084F1 8B5E0C              <1> 		mov ebx, [esi + 12]
 10730 000084F4 668B460A            <1> 		mov ax, [esi + 10]
 10731 000084F8 8B7602              <1> 		mov esi, [esi + 2]
 10732 000084FB C705[E8890000]0000- <1> 		mov dword [codepointer], 0
 10733 00008503 0000                <1>
 10734 00008505 E87CF4FFFF          <1> 		call showstring
 10735 0000850A E956010000          <1> 		jmp doneiconsel
 10736                              <1> windowselect:
 10737 0000850F 8B7E02              <1> 		mov edi, [esi + 2]
 10738 00008512 668B5606            <1> 		mov dx, [esi + 6]
 10739 00008516 6689D0              <1> 		mov ax, dx
 10740 00008519 668B4E08            <1> 		mov cx, [esi + 8]
 10741 0000851D 6689CB              <1> 		mov bx, cx
 10742 00008520 6683C310            <1> 		add bx, 16
 10743 00008524 833D[C3810000]01    <1> 		cmp dword [dragging], 1
 10744 0000852B 7467                <1> 		je dragwin
 10745 0000852D 833D[C3810000]00    <1> 		cmp dword [dragging], 0
 10746 00008534 740E                <1> 		je nodragwincheck
 10747 00008536 3935[C3810000]      <1> 		cmp dword [dragging], esi
 10748 0000853C 0F850E010000        <1> 		jne near nexticonsel
 10749 00008542 EB50                <1> 		jmp dragwin
 10750                              <1> 	nodragwincheck:
 10751 00008544 663905[455D0000]    <1> 		cmp [mousecursorposition], ax
 10752 0000854B 0F82FF000000        <1> 		jb near nexticonsel
 10753 00008551 660307              <1> 		add ax, [edi]
 10754 00008554 660307              <1> 		add ax, [edi]
 10755 00008557 663905[455D0000]    <1> 		cmp [mousecursorposition], ax
 10756 0000855E 0F87EC000000        <1> 		ja near nexticonsel
 10757 00008564 66390D[475D0000]    <1> 		cmp [mousecursorposition + 2], cx
 10758 0000856B 0F82DF000000        <1> 		jb near nexticonsel
 10759 00008571 66391D[475D0000]    <1> 		cmp [mousecursorposition + 2], bx
 10760 00008578 0F87D2000000        <1> 		ja near nexticonsel
 10761 0000857E 6683E814            <1> 		sub ax, 20
 10762 00008582 663905[455D0000]    <1> 		cmp [mousecursorposition], ax
 10763 00008589 0F87A1000000        <1> 		ja near killwin
 10764 0000858F E98B000000          <1> 		jmp nodragwin
 10765                              <1> 	dragwin:
 10766 00008594 663905[415D0000]    <1> 		cmp [lastmouseposition], ax
 10767 0000859B 0F82AF000000        <1> 		jb near nexticonsel
 10768 000085A1 660307              <1> 		add ax, [edi]
 10769 000085A4 660307              <1> 		add ax, [edi]
 10770 000085A7 663905[415D0000]    <1> 		cmp [lastmouseposition], ax
 10771 000085AE 0F879C000000        <1> 		ja near nexticonsel
 10772 000085B4 66390D[435D0000]    <1> 		cmp [lastmouseposition + 2], cx
 10773 000085BB 0F828F000000        <1> 		jb near nexticonsel
 10774 000085C1 66391D[435D0000]    <1> 		cmp [lastmouseposition + 2], bx
 10775 000085C8 0F8782000000        <1> 		ja near nexticonsel
 10776 000085CE 8935[C3810000]      <1> 		mov [dragging], esi
 10777 000085D4 803D[EC860000]01    <1> 		cmp byte [windrag], 1
 10778 000085DB 7706                <1> 		ja .nochangewindrag
 10779 000085DD FE05[EC860000]      <1> 		inc byte [windrag]
 10780                              <1> 	.nochangewindrag:
 10781 000085E3 662B15[415D0000]    <1> 		sub dx, [lastmouseposition]
 10782 000085EA 660315[455D0000]    <1> 		add dx, [mousecursorposition]
 10783 000085F1 66030D[475D0000]    <1> 		add cx, [mousecursorposition + 2]
 10784 000085F8 662B0D[435D0000]    <1> 		sub cx, [lastmouseposition + 2]
 10785 000085FF 663B15[595B0000]    <1> 		cmp dx, [resolutionx2]
 10786 00008606 7607                <1> 		jbe chkyresdrgwin
 10787 00008608 668B15[455D0000]    <1> 		mov dx, [mousecursorposition]
 10788                              <1> 	chkyresdrgwin:
 10789 0000860F 663B0D[6D5A0000]    <1> 		cmp cx, [resolutiony]
 10790 00008616 7607                <1> 		jbe nodragwin
 10791 00008618 668B0D[475D0000]    <1> 		mov cx, [mousecursorposition + 2]
 10792                              <1> 	nodragwin:
 10793 0000861F 8B5E0C              <1> 		mov ebx, [esi + 12]
 10794 00008622 668B460A            <1> 		mov ax, [esi + 10]
 10795 00008626 8B7602              <1> 		mov esi, [esi + 2]
 10796 00008629 E8D6F5FFFF          <1> 		call showwindow
 10797 0000862E EB35                <1> 		jmp doneiconsel
 10798                              <1> 	killwin:
 10799 00008630 66C7060000          <1> 		mov word [esi], 0
 10800 00008635 C605[49240000]00    <1> 		mov byte [termguion], 0
 10801 0000863C E891ECFFFF          <1> 		call guiclear
 10802 00008641 E80DEDFFFF          <1> 		call reloadallgraphics
 10803 00008646 E850EAFFFF          <1> 		call switchmousepos2 ;Copy what is now under the mouse
 10804 0000864B E947E6FFFF          <1> 		jmp guistart
 10805                              <1> 	nexticonsel:
 10806 00008650 6683660AFE          <1> 		and word [esi + 10], 0xFFFE
 10807 00008655 83C610              <1> 		add esi, 16
 10808 00008658 81FE[9CDA0300]      <1> 		cmp esi, graphicstableend
 10809 0000865E 7305                <1> 		jae doneiconsel
 10810 00008660 E9D9FBFFFF          <1> 		jmp clicon2
 10811                              <1> 	doneiconsel:
 10812 00008665 833D[C3810000]01    <1> 		cmp dword [dragging], 1
 10813 0000866C 7317                <1> 		jae doneiconsel2
 10814 0000866E A2[EC860000]        <1> 		mov [windrag], al
 10815 00008673 833D[E8890000]00    <1> 		cmp dword [codepointer], 0
 10816 0000867A 7409                <1> 		je doneiconsel2
 10817 0000867C 8B1D[E8890000]      <1> 		mov ebx, [codepointer]
 10818 00008682 FFD3                <1> 		call ebx
 10819 00008684 C3                  <1> 		ret
 10820                              <1> 	doneiconsel2:
 10821 00008685 A0[545E0000]        <1> 		mov al, [LBUTTON]
 10822 0000868A A2[C1810000]        <1> 		mov [pLBUTTON], al
 10823 0000868F A0[555E0000]        <1> 		mov al, [RBUTTON]
 10824 00008694 A2[C2810000]        <1> 		mov [pRBUTTON], al
 10825 00008699 833D[C3810000]01    <1> 		cmp dword [dragging], 1
 10826 000086A0 0F8618000000        <1> 		jbe near noreloadgraphicsclick
 10827 000086A6 E8F0E9FFFF          <1> 		call switchmousepos2
 10828 000086AB 803D[EC860000]01    <1> 		cmp byte [windrag], 1
 10829 000086B2 7305                <1> 		jae noclearcursorcl
 10830 000086B4 E8F9E8FFFF          <1> 		call clearmousecursor
 10831                              <1> noclearcursorcl:
 10832 000086B9 E895ECFFFF          <1> 		call reloadallgraphics
 10833                              <1> noreloadgraphicsclick:
 10834 000086BE 30E4                <1> 		xor ah, ah
 10835 000086C0 31C9                <1> 		xor ecx, ecx
 10836 000086C2 31D2                <1> 		xor edx, edx
 10837 000086C4 B001                <1> 		mov al, 1
 10838 000086C6 668B15[455D0000]    <1> 		mov dx, [mousecursorposition]
 10839 000086CD 668B0D[475D0000]    <1> 		mov cx, [mousecursorposition + 2]
 10840 000086D4 66BBE738            <1> 		mov bx, 0011100011100111b
 10841 000086D8 C605[BD810000]01    <1> 		mov byte [showcursorfonton], 1
 10842 000086DF E82FF3FFFF          <1> 		call showfontvesa
 10843 000086E4 C605[BD810000]00    <1> 		mov byte [showcursorfonton], 0
 10844 000086EB C3                  <1> 		ret
 10845 000086EC 00                  <1> windrag db 0
 10846 000086ED 00000000            <1> lastdrag dw 0,0
 10847 000086F1 00000000            <1> grpctblpos dw 0,0
 10848                              <1> 
 10849                              <1> 
 10850                              <1> 
 10851 000086F5 00<rept>            <1> grphbuf times 16 db 0
 10852                              <1> 	graphicsadd:
 10853 00008705 BF[9CD80300]        <1> 		mov edi, graphicstable
 10854                              <1> 	shwgrph1:
 10855 0000870A 397702              <1> 		cmp dword [edi + 2], esi
 10856 0000870D 7411                <1> 		je showgraphicsreplace2
 10857 0000870F 83C710              <1> 		add edi, 16
 10858 00008712 81FF[9CDA0300]      <1> 		cmp edi, graphicstableend
 10859 00008718 0F834E020000        <1> 		jae near showgraphicsnew
 10860 0000871E EBEA                <1> 		jmp shwgrph1
 10861                              <1> 	showgraphicsreplace2:
 10862 00008720 8935[F7860000]      <1> 		mov [grphbuf + 2], esi
 10863 00008726 668915[FB860000]    <1> 		mov [grphbuf + 6], dx
 10864 0000872D 66890D[FD860000]    <1> 		mov [grphbuf + 8], cx
 10865 00008734 891D[01870000]      <1> 		mov [grphbuf + 12], ebx
 10866 0000873A 30FF                <1> 		xor bh, bh
 10867 0000873C 88E3                <1> 		mov bl, ah
 10868 0000873E 30E4                <1> 		xor ah, ah
 10869 00008740 66A3[FF860000]      <1> 		mov [grphbuf + 10], ax	
 10870 00008746 66891D[F5860000]    <1> 		mov [grphbuf], bx
 10871 0000874D 66A1[F5860000]      <1> 		mov ax, [grphbuf]
 10872 00008753 6683F801            <1> 		cmp ax, 1
 10873 00008757 0F8419000000        <1> 		je near replaceicon
 10874 0000875D 6683F802            <1> 		cmp ax, 2
 10875 00008761 0F8493000000        <1> 		je near replacestring
 10876 00008767 6683F803            <1> 		cmp ax, 3
 10877 0000876B 0F840F010000        <1> 		je near replacewindow
 10878 00008771 E9D3010000          <1> 		jmp showgraphicsreplace
 10879                              <1> 	replaceicon:
 10880 00008776 893D[C7810000]      <1> 		mov [lastpos], edi
 10881 0000877C 8935[CB810000]      <1> 		mov [lastpos + 4], esi
 10882 00008782 8B7702              <1> 		mov esi, [edi + 2]
 10883 00008785 668B5F0C            <1> 		mov bx, [edi + 12]
 10884 00008789 668B5706            <1> 		mov dx, [edi + 6]
 10885 0000878D 668B4F08            <1> 		mov cx, [edi + 8]
 10886 00008791 668B06              <1> 		mov ax, [esi]
 10887 00008794 66A3[CF810000]      <1> 		mov [colorbuf], ax
 10888 0000879A 66A1[4F730000]      <1> 		mov ax, [background]
 10889 000087A0 668906              <1> 		mov [esi], ax
 10890 000087A3 8B5F0C              <1> 		mov ebx, [edi + 12]
 10891 000087A6 668B470A            <1> 		mov ax, [edi + 10]
 10892 000087AA 2401                <1> 		and al, 1
 10893 000087AC A2[EC890000]        <1> 		mov [iconselected], al
 10894 000087B1 668B470A            <1> 		mov ax, [edi + 10]
 10895 000087B5 E852E9FFFF          <1> 		call showicon2
 10896 000087BA 8B3D[C7810000]      <1> 		mov edi, [lastpos]
 10897 000087C0 8B7702              <1> 		mov esi, [edi + 2]
 10898 000087C3 66A1[CF810000]      <1> 		mov ax, [colorbuf]
 10899 000087C9 668906              <1> 		mov [esi], ax
 10900 000087CC 8B35[CB810000]      <1> 		mov esi, [lastpos + 4]
 10901 000087D2 668B15[FB860000]    <1> 		mov dx, [grphbuf + 6]
 10902 000087D9 668B0D[FD860000]    <1> 		mov cx, [grphbuf + 8]
 10903 000087E0 668B1D[F5860000]    <1> 		mov bx, [grphbuf]
 10904 000087E7 66A1[FF860000]      <1> 		mov ax, [grphbuf + 10]
 10905 000087ED 88DC                <1> 		mov ah, bl
 10906 000087EF 8B1D[01870000]      <1> 		mov ebx, [grphbuf + 12]
 10907 000087F5 E94F010000          <1> 		jmp showgraphicsreplace
 10908                              <1> 	replacestring:
 10909 000087FA 893D[C7810000]      <1> 		mov [lastpos], edi
 10910 00008800 8935[CB810000]      <1> 		mov [lastpos + 4], esi
 10911 00008806 8B5F0C              <1> 		mov ebx, [edi + 12]
 10912 00008809 8B7702              <1> 		mov esi, [edi + 2]
 10913 0000880C 668B5706            <1> 		mov dx, [edi + 6]
 10914 00008810 668B4F08            <1> 		mov cx, [edi + 8]
 10915 00008814 66A1[027A0000]      <1> 		mov ax, [colorfont2]
 10916 0000881A 66A3[CF810000]      <1> 		mov [colorbuf], ax
 10917 00008820 66A1[4F730000]      <1> 		mov ax, [background]
 10918 00008826 66A3[027A0000]      <1> 		mov [colorfont2], ax		
 10919 0000882C 8B5F0C              <1> 		mov ebx, [edi + 12]
 10920 0000882F 668B470A            <1> 		mov ax, [edi + 10]
 10921 00008833 2401                <1> 		and al, 1
 10922 00008835 A2[BF810000]        <1> 		mov [mouseselecton], al
 10923 0000883A 668B470A            <1> 		mov ax, [edi + 10]
 10924 0000883E E856F1FFFF          <1> 		call showstring2
 10925 00008843 66A1[CF810000]      <1> 		mov ax, [colorbuf]
 10926 00008849 66A3[027A0000]      <1> 		mov [colorfont2], ax
 10927 0000884F 8B3D[C7810000]      <1> 		mov edi, [lastpos]
 10928 00008855 8B7702              <1> 		mov esi, [edi + 2]
 10929 00008858 668B15[FB860000]    <1> 		mov dx, [grphbuf + 6]
 10930 0000885F 668B0D[FD860000]    <1> 		mov cx, [grphbuf + 8]
 10931 00008866 668B1D[F5860000]    <1> 		mov bx, [grphbuf]
 10932 0000886D 66A1[FF860000]      <1> 		mov ax, [grphbuf + 10]
 10933 00008873 88DC                <1> 		mov ah, bl
 10934 00008875 8B1D[01870000]      <1> 		mov ebx, [grphbuf + 12]
 10935 0000887B E9C9000000          <1> 		jmp showgraphicsreplace
 10936                              <1> 	replacewindow:
 10937 00008880 893D[C7810000]      <1> 		mov [lastpos], edi
 10938 00008886 8935[CB810000]      <1> 		mov [lastpos + 4], esi
 10939 0000888C 8B7702              <1> 		mov esi, [edi + 2]
 10940 0000888F 8B3D[EE7B0000]      <1> 		mov edi, [windowbufloc]
 10941 00008895 31D2                <1> 		xor edx, edx
 10942 00008897 668B15[595B0000]    <1> 		mov dx, [resolutionx2]
 10943 0000889E C1E204              <1> 		shl edx, 4
 10944 000088A1 29D7                <1> 		sub edi, edx
 10945 000088A3 31D2                <1> 		xor edx, edx
 10946 000088A5 668B16              <1> 		mov dx, [esi]
 10947 000088A8 660316              <1> 		add dx, [esi]
 10948 000088AB 668B4E02            <1> 		mov cx, [esi + 2]
 10949 000088AF 6683C110            <1> 		add cx, 16
 10950 000088B3 66A1[4F730000]      <1> 		mov ax, [background]
 10951 000088B9 803D[EC860000]01    <1> 		cmp byte [windrag], 1
 10952 000088C0 7604                <1> 		jbe clearwindow
 10953 000088C2 662B4E02            <1> 		sub cx, [esi + 2]
 10954                              <1> 	clearwindow:
 10955                              <1> 		%ifdef gui.background
 10956 000088C6 833D[27730000]00    <1> 			cmp dword [backgroundimage], 0
 10957 000088CD 7419                <1> 			je .noback
 10958 000088CF 56                  <1> 			push esi
 10959 000088D0 8B35[27730000]      <1> 			mov esi, [backgroundimage]
 10960 000088D6 2B3D[815A0000]      <1> 			sub edi, [physbaseptr]
 10961 000088DC 01FE                <1> 			add esi, edi
 10962 000088DE 033D[815A0000]      <1> 			add edi, [physbaseptr]
 10963 000088E4 668B06              <1> 			mov ax, [esi]
 10964 000088E7 5E                  <1> 			pop esi
 10965                              <1> 		.noback:
 10966                              <1> 		%endif
 10967 000088E8 668907              <1> 		mov [edi], ax
 10968 000088EB 83C702              <1> 		add edi, 2
 10969 000088EE 83EA02              <1> 		sub edx, 2
 10970 000088F1 83FA00              <1> 		cmp edx, 0
 10971 000088F4 75D0                <1> 		jne clearwindow
 10972 000088F6 6649                <1> 		dec cx
 10973 000088F8 668B15[595B0000]    <1> 		mov dx, [resolutionx2]
 10974 000088FF 662B16              <1> 		sub dx, [esi]
 10975 00008902 662B16              <1> 		sub dx, [esi]
 10976 00008905 01D7                <1> 		add edi, edx
 10977 00008907 668B16              <1> 		mov dx, [esi]
 10978 0000890A 660316              <1> 		add dx, [esi]
 10979 0000890D 6683F900            <1> 		cmp cx, 0
 10980 00008911 75B3                <1> 		jne clearwindow
 10981                              <1> 	endwindowclear:
 10982 00008913 C605[4A240000]00    <1> 		mov byte [termcopyon], 0
 10983 0000891A 8B3D[C7810000]      <1> 		mov edi, [lastpos]
 10984 00008920 8B35[F7860000]      <1> 		mov esi, [grphbuf + 2]
 10985 00008926 668B15[FB860000]    <1> 		mov dx, [grphbuf + 6]
 10986 0000892D 668B0D[FD860000]    <1> 		mov cx, [grphbuf + 8]
 10987 00008934 668B1D[F5860000]    <1> 		mov bx, [grphbuf]
 10988 0000893B 66A1[FF860000]      <1> 		mov ax, [grphbuf + 10]
 10989 00008941 88DC                <1> 		mov ah, bl
 10990 00008943 8B1D[01870000]      <1> 		mov ebx, [grphbuf + 12]
 10991                              <1> 	showgraphicsreplace:
 10992 00008949 897702              <1> 		mov [edi + 2], esi
 10993 0000894C 66895706            <1> 		mov [edi + 6], dx
 10994 00008950 66894F08            <1> 		mov [edi + 8], cx
 10995 00008954 895F0C              <1> 		mov [edi + 12], ebx
 10996 00008957 30FF                <1> 		xor bh, bh
 10997 00008959 88E3                <1> 		mov bl, ah
 10998 0000895B 30E4                <1> 		xor ah, ah
 10999 0000895D 6689470A            <1> 		mov [edi + 10], ax
 11000 00008961 66891F              <1> 		mov [edi], bx
 11001 00008964 8B5F0C              <1> 		mov ebx, [edi + 12]
 11002 00008967 668B470A            <1> 		mov ax, [edi + 10]
 11003 0000896B C3                  <1> 		ret
 11004                              <1> 	showgraphicsnew:
 11005 0000896C BF[9CD80300]        <1> 		mov edi, graphicstable
 11006                              <1> 	shwgrph2:
 11007 00008971 66833F00            <1> 		cmp word [edi], 0
 11008 00008975 74D2                <1> 		je showgraphicsreplace
 11009 00008977 83C710              <1> 		add edi, 16
 11010 0000897A 81FF[9CDA0300]      <1> 		cmp edi, graphicstableend
 11011 00008980 72EF                <1> 		jb shwgrph2
 11012                              <1> 	showgraphicsdone:
 11013 00008982 C3                  <1> 		ret
 11014                              <1> 	
 11015                              <1> putpixel: ;color in si, point is (dx,cx)
 11016                              <1> 		;destroys edi, ebx, eax
 11017 00008983 6650                <1> 	push ax
 11018 00008985 6653                <1> 	push bx
 11019 00008987 31C0                <1> 	xor eax, eax
 11020 00008989 31DB                <1> 	xor ebx, ebx
 11021 0000898B 31FF                <1> 	xor edi, edi
 11022 0000898D 668B1D[6D5A0000]    <1> 	mov bx, [resolutiony]
 11023 00008994 66A1[6B5A0000]      <1> 	mov ax, [resolutionx]
 11024 0000899A 6639C2              <1> 	cmp dx, ax
 11025 0000899D 7720                <1> 	ja .doneput
 11026 0000899F 66D1E0              <1> 	shl ax, 1
 11027 000089A2 6639D9              <1> 	cmp cx, bx
 11028 000089A5 7718                <1> 	ja .doneput
 11029 000089A7 6689CB              <1> 	mov bx, cx
 11030 000089AA 52                  <1> 	push edx
 11031 000089AB F7E3                <1> 	mul ebx
 11032 000089AD 5A                  <1> 	pop edx
 11033 000089AE 6601D7              <1> 	add di, dx
 11034 000089B1 6601D7              <1> 	add di, dx
 11035 000089B4 01C7                <1> 	add edi, eax
 11036 000089B6 033D[815A0000]      <1> 	add edi, [physbaseptr]
 11037 000089BC 668937              <1> 	mov [edi], si
 11038                              <1> .doneput:
 11039 000089BF 665B                <1> 	pop bx
 11040 000089C1 6658                <1> 	pop ax
 11041 000089C3 C3                  <1> 	ret
 11042                              <1> 	
 11043                              <1> getpixelmem:	;pixel in (dx, cx), outputs memory location in edi
 11044 000089C4 31FF                <1> 	xor edi, edi
 11045 000089C6 31C0                <1> 	xor eax, eax
 11046 000089C8 31DB                <1> 	xor ebx, ebx
 11047 000089CA 668B1D[595B0000]    <1> 	mov bx, [resolutionx2]
 11048 000089D1 6689D7              <1> 	mov di, dx
 11049 000089D4 6601D7              <1> 	add di, dx
 11050 000089D7 6689C8              <1> 	mov ax, cx
 11051 000089DA F7E3                <1> 	mul ebx
 11052 000089DC 01C7                <1> 	add edi, eax
 11053 000089DE 033D[815A0000]      <1> 	add edi, [physbaseptr]
 11054 000089E4 C3                  <1> 	ret
 11055                              <1> 
 11056 000089E5 00                  <1> 	mouseon db 0
 11057 000089E6 0000                <1> 	icon dw 0	;pointer to icon
 11058 000089E8 00000000            <1> 	codepointer dd 0 ;pointer to code
 11059 000089EC 00                  <1> 	iconselected db 0
 11060                                  %endif
 11061                                  %ifdef network.included
 11062                                  	%include "source/network.asm"
 11063                              <1> network.init:
 11064                              <1> %ifdef rtl8139.included
 11065                              <1> 	%include "source/drivers/network/rtl8139.asm"
 11066                              <2> ;RTL8139 NIC DRIVER
 11067                              <2> rtl8139:
 11068 000089ED E805000000          <2> 	call .init
 11069 000089F2 E99C010000          <2> 	jmp .end
 11070                              <2> 
 11071                              <2> .RBSTART equ 0x30
 11072                              <2> .IMR equ 0x3C
 11073                              <2> .ISR equ 0x3E
 11074                              <2> .CMD equ 0x37
 11075                              <2> .CAPR equ 0x38
 11076                              <2> .CBR equ 0x3A
 11077                              <2> .RCR equ 0x44
 11078                              <2> .CONFIG1 equ 0x52
 11079                              <2> .TSD0 equ 0x10
 11080                              <2> .TSAD0 equ 0x20
 11081                              <2> .init:	;should find card, get mac, and initialize card
 11082 000089F7 31C0                <2> 	xor eax, eax
 11083 000089F9 A2[9C670000]        <2> 	mov [pcifunction], al
 11084 000089FE A2[9A670000]        <2> 	mov [pcibus], al
 11085 00008A03 A2[9B670000]        <2> 	mov [pcidevice], al
 11086 00008A08 B002                <2> 	mov al, 0x02 ;type code
 11087 00008A0A A2[25680000]        <2> 	mov [pcitype], al
 11088 00008A0F B8EC103981          <2> 	mov eax, 0x813910EC
 11089 00008A14 A3[9F670000]        <2> 	mov [pcidevid], eax
 11090 00008A19 E892DDFFFF          <2> 	call getpciport
 11091 00008A1E 83FBFF              <2> 	cmp ebx, 0xFFFFFFFF
 11092 00008A21 7501                <2> 	jne .initnic
 11093 00008A23 C3                  <2> 	ret
 11094                              <2> .initnic:
 11095 00008A24 8915[728B0000]      <2> 	mov [.basenicaddr], edx
 11096 00008A2A 89D1                <2> 	mov ecx, edx
 11097 00008A2C E8BCA7FFFF          <2> 	call showhex	;for debugging, please remove
 11098 00008A31 BE[3CAA2D00]        <2> 	mov esi, rbuffstart
 11099 00008A36 B900200000          <2> 	mov ecx, 8192
 11100 00008A3B 31C0                <2> 	xor eax, eax
 11101                              <2> .clearrbuff:		;clear receive buffer which starts at rbuffstart
 11102 00008A3D 8806                <2> 	mov [esi], al
 11103 00008A3F 46                  <2> 	inc esi
 11104 00008A40 6649                <2> 	dec cx
 11105 00008A42 6683F900            <2> 	cmp cx, 0
 11106 00008A46 75F5                <2> 	jne .clearrbuff
 11107                              <2> .findmac:
 11108 00008A48 668B15[728B0000]    <2> 	mov dx, [.basenicaddr]
 11109 00008A4F BF[778B0000]        <2> 	mov edi, .mac
 11110 00008A54 B906000000          <2> 	mov ecx, 6
 11111                              <2> .macputloop:
 11112 00008A59 EC                  <2> 	in al, dx
 11113 00008A5A 8807                <2> 	mov [edi], al
 11114 00008A5C 47                  <2> 	inc edi
 11115 00008A5D 42                  <2> 	inc edx
 11116 00008A5E 49                  <2> 	dec ecx
 11117 00008A5F 75F8                <2> 	jnz .macputloop
 11118 00008A61 B9[778B0000]        <2> 	mov ecx, .mac
 11119 00008A66 E8DC0A0000          <2> 	call showmac
 11120 00008A6B E817000000          <2> 	call .resetnic
 11121 00008A70 BE[7D8B0000]        <2> 	mov esi, .name
 11122 00008A75 E86293FFFF          <2> 	call print
 11123 00008A7A BE[868B0000]        <2> 	mov esi, .initmsg
 11124 00008A7F E85893FFFF          <2> 	call print
 11125 00008A84 31DB                <2> 	xor ebx, ebx
 11126 00008A86 C3                  <2> 	ret
 11127                              <2> .resetnic:
 11128 00008A87 668B15[728B0000]    <2> 	mov dx, [.basenicaddr]
 11129 00008A8E 6683C252            <2> 	add dx, .CONFIG1
 11130 00008A92 30C0                <2> 	xor al, al
 11131 00008A94 EE                  <2> 	out dx, al	;WAKE UP!!!!
 11132 00008A95 668B15[728B0000]    <2> 	mov dx, [.basenicaddr]
 11133 00008A9C 6683C237            <2> 	add dx, .CMD
 11134 00008AA0 B010                <2> 	mov al, 0x10
 11135 00008AA2 EE                  <2> 	out dx, al	;Reset
 11136                              <2> .resetnicwait:
 11137 00008AA3 EC                  <2> 	in al, dx
 11138 00008AA4 A810                <2> 	test al, 0x10
 11139 00008AA6 0F85F7FFFFFF        <2> 	jnz near .resetnicwait
 11140 00008AAC 668B15[728B0000]    <2> 	mov dx, [.basenicaddr]
 11141 00008AB3 6683C230            <2> 	add dx, .RBSTART
 11142 00008AB7 B8[3CAA2D00]        <2> 	mov eax, rbuffstart
 11143 00008ABC 0305[37020000]      <2> 	add eax, [newcodecache] ;change virtual to physical address
 11144 00008AC2 EF                  <2> 	out dx, eax	;give nic receive buffer location
 11145 00008AC3 668B15[728B0000]    <2> 	mov dx, [.basenicaddr]
 11146 00008ACA 6683C23C            <2> 	add dx, .IMR
 11147                              <2> 	;in ax, dx
 11148 00008ACE 66B80500            <2> 	mov ax, 5
 11149 00008AD2 66EF                <2> 	out dx, ax	;set both TOK and ROK interrupts
 11150 00008AD4 668B15[728B0000]    <2> 	mov dx, [.basenicaddr]
 11151 00008ADB 6683C244            <2> 	add dx, .RCR
 11152 00008ADF B88F000000          <2> 	mov eax, 10001111b ;receive all packets, enable wrap
 11153 00008AE4 EF                  <2> 	out dx, eax
 11154 00008AE5 668B15[728B0000]    <2> 	mov dx, [.basenicaddr]
 11155 00008AEC 6683C237            <2> 	add dx, .CMD
 11156 00008AF0 B00C                <2> 	mov al, 0x0C
 11157 00008AF2 EE                  <2> 	out dx, al	;use transmit and receive
 11158 00008AF3 C605[768B0000]01    <2> 	mov byte [.nicconfig], 1
 11159 00008AFA C3                  <2> 	ret
 11160                              <2> 	
 11161                              <2> .sendpacket:	;packet with beginning in edi and end in esi
 11162 00008AFB 56                  <2> 	push esi
 11163 00008AFC 57                  <2> 	push edi
 11164 00008AFD 803D[768B0000]01    <2> 	cmp byte [.nicconfig], 1
 11165 00008B04 740D                <2> 	je .sendit
 11166 00008B06 E8ECFEFFFF          <2> 	call .init
 11167 00008B0B 5F                  <2> 	pop edi
 11168 00008B0C 5E                  <2> 	pop esi
 11169 00008B0D 83FBFF              <2> 	cmp ebx, 0xFFFFFFFF
 11170 00008B10 75E9                <2> 	jne .sendpacket
 11171 00008B12 C3                  <2> 	ret
 11172                              <2> .sendit:
 11173 00008B13 E86FFFFFFF          <2> 	call .resetnic
 11174 00008B18 668B15[728B0000]    <2> 	mov dx, [.basenicaddr]
 11175 00008B1F 6683C220            <2> 	add dx, .TSAD0
 11176 00008B23 5F                  <2> 	pop edi
 11177 00008B24 8B0D[778B0000]      <2> 	mov ecx, [.mac]
 11178 00008B2A 894F06              <2> 	mov [edi + 6], ecx
 11179 00008B2D 668B0D[7B8B0000]    <2> 	mov cx, [.mac + 4]
 11180 00008B34 66894F0A            <2> 	mov [edi + 10], cx	;copy the correct mac
 11181 00008B38 A1[37020000]        <2> 	mov eax, [newcodecache]
 11182 00008B3D 01F8                <2> 	add eax, edi
 11183 00008B3F EF                  <2> 	out dx, eax	;here's Johnny!
 11184 00008B40 5E                  <2> 	pop esi
 11185 00008B41 29FE                <2> 	sub esi, edi
 11186 00008B43 668B15[728B0000]    <2> 	mov dx, [.basenicaddr]
 11187 00008B4A 6683C210            <2> 	add dx, .TSD0
 11188 00008B4E ED                  <2> 	in eax, dx ;get tsd
 11189 00008B4F 2500C0FFFF          <2> 	and eax, 0xFFFFC000 ;clear off length and own bits
 11190 00008B54 01F0                <2> 	add eax, esi ;add length to tsd
 11191 00008B56 EF                  <2> 	out dx, eax
 11192                              <2> .checknicownbit:
 11193 00008B57 ED                  <2> 	in eax, dx
 11194 00008B58 2500200000          <2> 	and eax, 0x2000 ;check own bit
 11195 00008B5D 3D00200000          <2> 	cmp eax, 0x2000
 11196 00008B62 75F3                <2> 	jne .checknicownbit
 11197                              <2> .checknictokbit:
 11198 00008B64 ED                  <2> 	in eax, dx
 11199 00008B65 2500800000          <2> 	and eax, 0x8000	;check tok bit
 11200 00008B6A 3D00800000          <2> 	cmp eax, 0x8000
 11201 00008B6F 75F3                <2> 	jne .checknictokbit
 11202 00008B71 C3                  <2> 	ret
 11203 00008B72 00000000            <2> .basenicaddr dd 0
 11204 00008B76 00                  <2> .nicconfig db 0
 11205 00008B77 000000000000        <2> .mac db 0,0,0,0,0,0
 11206 00008B7D 52544C383133392000  <2> .name db "RTL8139 ",0
 11207 00008B86 496E697469616C697A- <2> .initmsg db "Initialized",10,0
 11208 00008B8F 65640A00            <2>
 11209                              <2> 
 11210                              <2> .end:
 11211                              <1> %endif
 11212                              <1> %ifdef rtl8169.included
 11213                              <1> 	%include "source/drivers/network/rtl8169.asm"
 11214                              <2> ;RTL8169 NIC DRIVER
 11215                              <2> rtl8169:
 11216 00008B93 E805000000          <2> 	call .init
 11217 00008B98 E973030000          <2> 	jmp .end
 11218                              <2> 
 11219                              <2> ;REGISTERS
 11220                              <2> .CMD equ 0x37
 11221                              <2> .TXPOLL equ 0x38
 11222                              <2> .TCR equ 0x40
 11223                              <2> .RCR equ 0x44
 11224                              <2> .IMR equ 0x3C
 11225                              <2> .ISR equ 0x3E
 11226                              <2> .LOCK equ 0x50
 11227                              <2> .CONFIG1 equ 0x52
 11228                              <2> .TDSAR equ 0x20
 11229                              <2> .RDSAR equ 0xE4
 11230                              <2> .MAXRX equ 0xDA
 11231                              <2> .MAXTX equ 0xEC
 11232                              <2> ;IMPORTANT VALUES
 11233                              <2> .OWN equ 0x80000000
 11234                              <2> .EOR equ 0x40000000
 11235                              <2> .POLLING equ 0x40
 11236                              <2> ;CODE
 11237                              <2> .init:	;should find card, get mac, and initialize card
 11238 00008B9D 31C0                <2> 	xor eax, eax
 11239 00008B9F A2[9C670000]        <2> 	mov [pcifunction], al
 11240 00008BA4 A2[9A670000]        <2> 	mov [pcibus], al
 11241 00008BA9 A2[9B670000]        <2> 	mov [pcidevice], al
 11242 00008BAE B002                <2> 	mov al, 0x02 ;type code
 11243 00008BB0 A2[25680000]        <2> 	mov [pcitype], al
 11244 00008BB5 B8EC106981          <2> 	mov eax, 0x816910EC
 11245 00008BBA A3[9F670000]        <2> 	mov [pcidevid], eax
 11246 00008BBF BBFFFFF0FF          <2> 	mov ebx, 0xFFF0FFFF
 11247 00008BC4 891D[A3670000]      <2> 	mov [pcidevidmask], ebx
 11248 00008BCA E8E1DBFFFF          <2> 	call getpciport
 11249 00008BCF 83FBFF              <2> 	cmp ebx, 0xFFFFFFFF
 11250 00008BD2 7501                <2> 	jne .initnic
 11251 00008BD4 C3                  <2> 	ret
 11252                              <2> .initnic:
 11253 00008BD5 8915[4F8D0000]      <2> 	mov [.basenicaddr], edx
 11254 00008BDB 89D1                <2> 	mov ecx, edx
 11255 00008BDD E80BA6FFFF          <2> 	call showhex	;for debugging, please remove
 11256 00008BE2 BE[3CAA2D00]        <2> 	mov esi, rbuffstart
 11257 00008BE7 B900200000          <2> 	mov ecx, 8192
 11258 00008BEC 31C0                <2> 	xor eax, eax
 11259                              <2> .clearrbuff:		;clear receive buffer which starts at rbuffstart
 11260 00008BEE 8806                <2> 	mov [esi], al
 11261 00008BF0 46                  <2> 	inc esi
 11262 00008BF1 6649                <2> 	dec cx
 11263 00008BF3 6683F900            <2> 	cmp cx, 0
 11264 00008BF7 75F5                <2> 	jne .clearrbuff
 11265                              <2> .findmac:
 11266 00008BF9 8B15[4F8D0000]      <2> 	mov edx, [.basenicaddr]
 11267 00008BFF BF[548D0000]        <2> 	mov edi, .mac
 11268 00008C04 B906000000          <2> 	mov ecx, 6
 11269                              <2> .macputloop:
 11270 00008C09 EC                  <2> 	in al, dx
 11271 00008C0A 8807                <2> 	mov [edi], al
 11272 00008C0C 47                  <2> 	inc edi
 11273 00008C0D 42                  <2> 	inc edx
 11274 00008C0E 49                  <2> 	dec ecx
 11275 00008C0F 75F8                <2> 	jnz .macputloop
 11276 00008C11 B9[548D0000]        <2> 	mov ecx, .mac
 11277 00008C16 E82C090000          <2> 	call showmac
 11278 00008C1B E817000000          <2> 	call .resetnic
 11279 00008C20 BE[5A8D0000]        <2> 	mov esi, .name
 11280 00008C25 E8B291FFFF          <2> 	call print
 11281 00008C2A BE[638D0000]        <2> 	mov esi, .initmsg
 11282 00008C2F E8A891FFFF          <2> 	call print
 11283 00008C34 31DB                <2> 	xor ebx, ebx
 11284 00008C36 C3                  <2> 	ret
 11285                              <2> .resetnic:
 11286 00008C37 8B15[4F8D0000]      <2> 	mov edx, [.basenicaddr]
 11287 00008C3D 83C237              <2> 	add edx, .CMD
 11288 00008C40 B010                <2> 	mov al, 0x10
 11289 00008C42 EE                  <2> 	out dx, al	;Reset
 11290                              <2> .resetnicwait:
 11291 00008C43 EC                  <2> 	in al, dx
 11292 00008C44 A810                <2> 	test al, 0x10
 11293 00008C46 0F85F7FFFFFF        <2> 	jnz near .resetnicwait
 11294 00008C4C 8B15[4F8D0000]      <2> 	mov edx, [.basenicaddr]
 11295 00008C52 83C250              <2> 	add edx, .LOCK
 11296 00008C55 B0C0                <2> 	mov al, 0xC0
 11297 00008C57 EE                  <2> 	out dx, al	;unlock config registers
 11298 00008C58 8B15[4F8D0000]      <2> 	mov edx, [.basenicaddr]
 11299 00008C5E 83C244              <2> 	add edx, .RCR
 11300 00008C61 B80FE70000          <2> 	mov eax, 0x0000E70F
 11301 00008C66 EF                  <2> 	out dx, eax	;recieve packets from all matches
 11302 00008C67 8B15[4F8D0000]      <2> 	mov edx, [.basenicaddr]
 11303 00008C6D 83C240              <2> 	add edx, .TCR
 11304 00008C70 B800070003          <2> 	mov eax, 0x03000700
 11305 00008C75 EF                  <2> 	out dx, eax	;set up tcr
 11306 00008C76 8B15[4F8D0000]      <2> 	mov edx, [.basenicaddr]
 11307 00008C7C 81C2DA000000        <2> 	add edx, .MAXRX
 11308 00008C82 66B8FF1F            <2> 	mov ax, 0x1FFF
 11309 00008C86 66EF                <2> 	out dx, ax	;setup max rx size
 11310 00008C88 8B15[4F8D0000]      <2> 	mov edx, [.basenicaddr]
 11311 00008C8E 81C2EC000000        <2> 	add edx, .MAXTX
 11312 00008C94 B03B                <2> 	mov al, 0x3B
 11313 00008C96 EE                  <2> 	out dx, al	;setup max tx size
 11314 00008C97 8B15[4F8D0000]      <2> 	mov edx, [.basenicaddr]
 11315 00008C9D 83C220              <2> 	add edx, .TDSAR
 11316 00008CA0 A1[33020000]        <2> 	mov eax, [basecache]
 11317 00008CA5 C1E004              <2> 	shl eax, 4
 11318 00008CA8 05[008E0000]        <2> 	add eax, .txdesc
 11319 00008CAD EF                  <2> 	out dx, eax
 11320 00008CAE 8B15[4F8D0000]      <2> 	mov edx, [.basenicaddr]
 11321 00008CB4 81C2E4000000        <2> 	add edx, .RDSAR
 11322 00008CBA A1[33020000]        <2> 	mov eax, [basecache]
 11323 00008CBF C1E004              <2> 	shl eax, 4
 11324 00008CC2 05[008F0000]        <2> 	add eax, .rxdesc
 11325 00008CC7 EF                  <2> 	out dx, eax
 11326 00008CC8 8B15[4F8D0000]      <2> 	mov edx, [.basenicaddr]
 11327 00008CCE 83C237              <2> 	add edx, .CMD
 11328 00008CD1 B00C                <2> 	mov al, 0x0C
 11329 00008CD3 EE                  <2> 	out dx, al	;use transmit and receive
 11330 00008CD4 8B15[4F8D0000]      <2> 	mov edx, [.basenicaddr]
 11331 00008CDA 83C250              <2> 	add edx, .LOCK
 11332 00008CDD 30C0                <2> 	xor al, al
 11333 00008CDF EE                  <2> 	out dx, al
 11334 00008CE0 C605[538D0000]01    <2> 	mov byte [.nicconfig], 1
 11335 00008CE7 C3                  <2> 	ret
 11336                              <2> 	
 11337                              <2> .sendpacket:	;packet with beginning in edi and end in esi
 11338 00008CE8 803D[538D0000]01    <2> 	cmp byte [.nicconfig], 1
 11339 00008CEF 740F                <2> 	je .sendcachedata
 11340 00008CF1 56                  <2> 	push esi
 11341 00008CF2 57                  <2> 	push edi
 11342 00008CF3 E8A5FEFFFF          <2> 	call .init
 11343 00008CF8 5F                  <2> 	pop edi
 11344 00008CF9 5E                  <2> 	pop esi
 11345 00008CFA 83FBFF              <2> 	cmp ebx, 0xFFFFFFFF
 11346 00008CFD 75E9                <2> 	jne .sendpacket
 11347 00008CFF C3                  <2> 	ret
 11348                              <2> .sendcachedata:
 11349 00008D00 8B0D[548D0000]      <2> 	mov ecx, [.mac]
 11350 00008D06 894F06              <2> 	mov [edi + 6], ecx
 11351 00008D09 668B0D[588D0000]    <2> 	mov cx, [.mac + 4]
 11352 00008D10 66894F0A            <2> 	mov [edi + 10], cx	;copy the correct mac
 11353 00008D14 A1[33020000]        <2> 	mov eax, [basecache]
 11354 00008D19 C1E004              <2> 	shl eax, 4
 11355 00008D1C 01F8                <2> 	add eax, edi
 11356 00008D1E A3[088E0000]        <2> 	mov [.txdesc + 8], eax	;put packet start in tx descriptor
 11357 00008D23 29FE                <2> 	sub esi, edi
 11358 00008D25 668935[008E0000]    <2> 	mov [.txdesc], si	;put packet size in tx descriptor
 11359 00008D2C 810D[008E0000]0000- <2> 	or dword [.txdesc], .OWN	;set own bit
 11360 00008D34 0080                <2>
 11361 00008D36 8B15[4F8D0000]      <2> 	mov edx, [.basenicaddr]
 11362 00008D3C 83C238              <2> 	add edx, .TXPOLL
 11363 00008D3F B040                <2> 	mov al, .POLLING
 11364 00008D41 EE                  <2> 	out dx, al	;set up TX Polling
 11365                              <2> .sendloop:
 11366 00008D42 A1[008E0000]        <2> 	mov eax, [.txdesc]
 11367 00008D47 A900000080          <2> 	test eax, .OWN
 11368 00008D4C 75F4                <2> 	jnz .sendloop
 11369 00008D4E C3                  <2> 	ret
 11370                              <2> 	
 11371 00008D4F 00000000            <2> .basenicaddr dd 0
 11372 00008D53 00                  <2> .nicconfig db 0
 11373 00008D54 000000000000        <2> .mac db 0,0,0,0,0,0
 11374 00008D5A 52544C383136392000  <2> .name db "RTL8169 ",0
 11375 00008D63 496E697469616C697A- <2> .initmsg db "Initialized",10,0
 11376 00008D6C 65640A00            <2>
 11377 00008D70 90<rept>            <2> align 256, nop
 11378                              <2> .txdesc:
 11379 00008E00 00000040            <2> 	dd .EOR	;command
 11380 00008E04 00000000            <2> 	dd 0	;vlan
 11381 00008E08 00000000            <2> 	dd 0	;low buf
 11382 00008E0C 00000000            <2> 	dd 0	;high buf
 11383 00008E10 90<rept>            <2> align 256, nop
 11384                              <2> .rxdesc:
 11385 00008F00 102000C0            <2> 	dd .OWN | .EOR | (rbuffend - rbuffstart)	;command
 11386 00008F04 00000000            <2> 	dd 0	;vlan
 11387 00008F08 [3CAA2D00]          <2> 	dd rbuffstart	;low buf
 11388 00008F0C 00000000            <2> 	dd 0	;high buf
 11389                              <2> .end:
 11390                              <1> %endif
 11391                              <1> %ifdef ne2000.included
 11392                              <1> 	%include "source/drivers/network/ne2000.asm"
 11393                              <2> ne2000:
 11394 00008F10 E805000000          <2> 	call .init
 11395 00008F15 E906030000          <2> 	jmp .end
 11396                              <2> 
 11397                              <2> ;	PAGE0			PAGE 1			PAGE 2
 11398                              <2> ;	READ	WRITE	READ	WRITE	READ	WRITE
 11399                              <2> ;0	CR		CR		CR		CR		CR		CR
 11400                              <2> ;1	CLDA0 	PSTART	PAR0	PAR0	PSTART	CLDA0
 11401                              <2> ;2	CLDA1	PSTOP	PAR1	PAR1	PSTOP	CLDA1
 11402                              <2> ;3	BNRY	BNRY	PAR2	PAR2	RNPP	RNPP
 11403                              <2> ;4	TSR		TPSR	PAR3	PAR3	TPSR	N/A
 11404                              <2> ;5	NCR		TBCR0	PAR4	PAR4	LNPP	LNPP
 11405                              <2> ;6	FIFO	TCBR1	PAR5	PAR5	ACU		ACU
 11406                              <2> ;7	ISR		ISR		CURR	CURR	ACL		ACL
 11407                              <2> ;8	CRDA0	RSAR0	MAR0	MAR0	N/A		N/A
 11408                              <2> ;9	CRDA1	RSAR1	MAR1	MAR1	N/A		N/A
 11409                              <2> ;A	N/A		RBCR0	MAR2	MAR2	N/A		N/A
 11410                              <2> ;B	N/A		RBCR1	MAR3	MAR3	N/A		N/A
 11411                              <2> ;C	RSR		RCR		MAR4	MAR4	RCR		N/A
 11412                              <2> ;D	CNTR0	TCR		MAR5	MAR5	TCR		N/A
 11413                              <2> ;E	CNTR1	DCR		MAR6	MAR6	DCR		N/A
 11414                              <2> ;F	CNTR2	IMR		MAR7	MAR7	IMR		N/A
 11415                              <2> .CR equ 0
 11416                              <2> 	.CR.STP	equ 1		;Stop
 11417                              <2> 	.CR.STA equ 2		;Start
 11418                              <2> 	.CR.TXP equ 4		;Transmit
 11419                              <2> 	.CR.RD0 equ 8		;Remote DMA 0
 11420                              <2> 	.CR.RD1 equ 0x10	;Remote DMA 1
 11421                              <2> 	.CR.RD2 equ 0x20	;Remote DMA 2
 11422                              <2> 	.CR.PS0 equ 0x40	;Page Select 0
 11423                              <2> 	.CR.PS1 equ 0x80	;Page Select 1
 11424                              <2> .PSTART equ 1
 11425                              <2> .PSTOP equ 2
 11426                              <2> .BNRY equ 3
 11427                              <2> .ISR equ 7
 11428                              <2> 	.ISR.PRX equ 1		;Packet Received
 11429                              <2> 	.ISR.PTX equ 2		;Packet Transmitted
 11430                              <2> 	.ISR.RXE equ 4		;Receive Error
 11431                              <2> 	.ISR.TXE equ 8		;Transmission Error
 11432                              <2> 	.ISR.OVW equ 0x10	;Overwrite
 11433                              <2> 	.ISR.CNT equ 0x20	;Counter Overflow
 11434                              <2> 	.ISR.RDC equ 0x40	;Remote Data Complete
 11435                              <2> 	.ISR.RST equ 0x80	;Reset status
 11436                              <2> .RSAR0 equ 8
 11437                              <2> .RSAR1 equ 9
 11438                              <2> .RBCR0 equ 0xA
 11439                              <2> .RBCR1 equ 0xB
 11440                              <2> .RCR equ 0xC
 11441                              <2> 	.RCR.SEP equ 1		;Save Errored Packets
 11442                              <2> 	.RCR.AR equ 2		;Accept Runt packet
 11443                              <2> 	.RCR.AB equ 4		;Accept Broadcast
 11444                              <2> 	.RCR.AM equ 8		;Accept Multicast
 11445                              <2> 	.RCR.PRO equ 0x10	;Promiscuous Physical
 11446                              <2> 	.RCR.MON equ 0x20	;Monitor Mode
 11447                              <2> .DCR equ 0xE
 11448                              <2> 	.DCR.WTS equ 1		;Word Transfer Select
 11449                              <2> 	.DCR.BOS equ 2		;Byte Order Select
 11450                              <2> 	.DCR.LAS equ 4		;Long Address Select
 11451                              <2> 	.DCR.LS equ 8		;Loopback Select
 11452                              <2> 	.DCR.AR equ 0x10	;Auto-initialize Remote
 11453                              <2> 	.DCR.FT0 equ 0x20	;FIFO Threshold Select 0
 11454                              <2> 	.DCR.FT1 equ 0x40	;FIFO Threshold Select 1
 11455                              <2> .ASIC equ 0x10
 11456                              <2> .RESET equ 0x1F
 11457                              <2> 
 11458                              <2> .init:
 11459 00008F1A BBFFFFFFFF          <2> 	mov ebx, 0xFFFFFFFF
 11460 00008F1F 31C0                <2> 	xor eax, eax
 11461 00008F21 A2[9C670000]        <2> 	mov [pcifunction], al
 11462 00008F26 A2[9A670000]        <2> 	mov [pcibus], al
 11463 00008F2B A2[9B670000]        <2> 	mov [pcidevice], al
 11464 00008F30 B002                <2> 	mov al, 2 ;type code
 11465 00008F32 A2[25680000]        <2> 	mov [pcitype], al
 11466 00008F37 B8EC102980          <2> 	mov eax, 0x802910EC
 11467 00008F3C A3[9F670000]        <2> 	mov [pcidevid], eax
 11468 00008F41 E86AD8FFFF          <2> 	call getpciport
 11469 00008F46 83FBFF              <2> 	cmp ebx, 0xFFFFFFFF
 11470 00008F49 7501                <2> 	jne .good0
 11471 00008F4B C3                  <2> 	ret
 11472                              <2> .good0:
 11473 00008F4C 8915[E2910000]      <2> 	mov [.basenicaddr], edx
 11474 00008F52 89D1                <2> 	mov ecx, edx
 11475                              <2> .test:
 11476 00008F54 E851000000          <2> 	call .reset
 11477 00008F59 E875000000          <2> 	call .stop
 11478 00008F5E 89CA                <2> 	mov edx, ecx
 11479 00008F60 B9FF000000          <2> 	mov ecx, 0xFF
 11480 00008F65 E2FE                <2> 	loop $ ;wait for ~100 us
 11481 00008F67 89D1                <2> 	mov ecx, edx
 11482 00008F69 EC                  <2> 	in al, dx
 11483 00008F6A 2427                <2> 	and al, (.CR.RD2 | .CR.TXP | .CR.STA | .CR.STP)
 11484 00008F6C 3C21                <2> 	cmp al, (.CR.RD2 | .CR.STP)
 11485 00008F6E 740D                <2> 	je .good1
 11486 00008F70 89CA                <2> 	mov edx, ecx
 11487 00008F72 83C207              <2> 	add edx, .ISR
 11488 00008F75 EC                  <2> 	in al, dx
 11489 00008F76 2480                <2> 	and al, .ISR.RST
 11490 00008F78 3C80                <2> 	cmp al, .ISR.RST
 11491 00008F7A 7401                <2> 	je .good1
 11492 00008F7C C3                  <2> 	ret
 11493                              <2> .good1:
 11494 00008F7D E86BA2FFFF          <2> call showhex	;for debugging, please remove
 11495 00008F82 E858000000          <2> 	call .setup
 11496 00008F87 E8BB050000          <2> call showmac
 11497 00008F8C BE[E7910000]        <2> mov esi, .name
 11498 00008F91 E8468EFFFF          <2> call print
 11499 00008F96 BE[EF910000]        <2> mov esi, .initmsg
 11500 00008F9B E83C8EFFFF          <2> call print
 11501 00008FA0 C605[E6910000]01    <2> 	mov byte [.nicconfig], 1
 11502 00008FA7 31DB                <2> 	xor ebx, ebx
 11503 00008FA9 C3                  <2> 	ret
 11504                              <2> .reset:
 11505 00008FAA 8B15[E2910000]      <2> 	mov edx, [.basenicaddr]
 11506 00008FB0 83C21F              <2> 	add edx, .RESET
 11507 00008FB3 EC                  <2> 	in al, dx
 11508 00008FB4 EE                  <2> 	out dx, al ;write its contents to itself
 11509 00008FB5 C3                  <2> 	ret
 11510                              <2> .page:
 11511 00008FB6 66C1E00E            <2> 	shl ax, 14
 11512 00008FBA 8B15[E2910000]      <2> 	mov edx, [.basenicaddr]
 11513 00008FC0 EC                  <2> 	in al, dx
 11514 00008FC1 243F                <2> 	and al, 00111111b
 11515 00008FC3 08E0                <2> 	or al, ah
 11516 00008FC5 EE                  <2> 	out dx, al
 11517 00008FC6 C3                  <2> 	ret
 11518                              <2> .start:
 11519 00008FC7 8B15[E2910000]      <2> 	mov edx, [.basenicaddr]
 11520 00008FCD B020                <2> 	mov al, .CR.RD2
 11521 00008FCF B002                <2> 	mov al, .CR.STA
 11522 00008FD1 EE                  <2> 	out dx, al
 11523 00008FD2 C3                  <2> 	ret
 11524                              <2> .stop:
 11525 00008FD3 8B15[E2910000]      <2> 	mov edx, [.basenicaddr]
 11526 00008FD9 B020                <2> 	mov al, .CR.RD2
 11527 00008FDB 0C01                <2> 	or al, .CR.STP
 11528 00008FDD EE                  <2> 	out dx, al
 11529 00008FDE C3                  <2> 	ret
 11530                              <2> .setup:
 11531 00008FDF E8EFFFFFFF          <2> 	call .stop
 11532 00008FE4 8B15[E2910000]      <2> 	mov edx, [.basenicaddr]
 11533 00008FEA 83C20E              <2> 	add edx, .DCR
 11534 00008FED B040                <2> 	mov al, .DCR.FT1
 11535 00008FEF 0C01                <2> 	or al, .DCR.WTS
 11536 00008FF1 0C08                <2> 	or al, .DCR.LS
 11537 00008FF3 EE                  <2> 	out dx, al ;Set FIFO threshold, byte order, word-wide DMA
 11538 00008FF4 E8A5000000          <2> 	call .getmac
 11539 00008FF9 E8D5FFFFFF          <2> 	call .stop
 11540 00008FFE 30C0                <2> 	xor al, al
 11541 00009000 8B15[E2910000]      <2> 	mov edx, [.basenicaddr]
 11542 00009006 83C20A              <2> 	add edx, .RBCR0
 11543 00009009 EE                  <2> 	out dx, al
 11544 0000900A 6642                <2> 	inc dx
 11545 0000900C EE                  <2> 	out dx, al ;Clear byte count
 11546 0000900D B800400000          <2> 	mov eax, 16*1024
 11547 00009012 A3[02920000]        <2> 	mov [.ringstart], eax
 11548 00009017 C1E808              <2> 	shr eax, 8
 11549 0000901A 66A3[FE910000]      <2> 	mov [.pagestart], ax
 11550 00009020 83C034              <2> 	add eax, 64-2*6
 11551 00009023 A3[00920000]        <2> 	mov [.pageend], eax
 11552 00009028 C1E008              <2> 	shl eax, 8
 11553 0000902B 66A3[06920000]      <2> 	mov [.ringend], ax ;set page and ring starts and ends
 11554 00009031 8B15[E2910000]      <2> 	mov edx, [.basenicaddr]
 11555 00009037 83C201              <2> 	add edx, .PSTART
 11556 0000903A A0[FE910000]        <2> 	mov al, [.pagestart]
 11557 0000903F EE                  <2> 	out dx, al
 11558 00009040 A0[00920000]        <2> 	mov al, [.pageend]
 11559 00009045 6642                <2> 	inc dx
 11560 00009047 EE                  <2> 	out dx, al
 11561 00009048 A0[FE910000]        <2> 	mov al, [.pagestart]
 11562 0000904D 6642                <2> 	inc dx
 11563 0000904F EE                  <2> 	out dx, al
 11564 00009050 E87EFFFFFF          <2> 	call .stop
 11565                              <2> ;INSERT INTERRUPT ENABLE HERE
 11566 00009055 B001                <2> 	mov al, 1
 11567 00009057 E85AFFFFFF          <2> 	call .page
 11568 0000905C 8B15[E2910000]      <2> 	mov edx, [.basenicaddr]
 11569 00009062 BF[10920000]        <2> 	mov edi, .rom
 11570                              <2> .copymactocard:
 11571 00009067 42                  <2> 	inc edx
 11572 00009068 6E                  <2> 	outsb
 11573 00009069 83C702              <2> 	add edi, 2
 11574 0000906C 83FA06              <2> 	cmp edx, 6
 11575 0000906F 76F6                <2> 	jbe .copymactocard
 11576 00009071 8B15[E2910000]      <2> 	mov edx, [.basenicaddr]
 11577 00009077 83C207              <2> 	add edx, 7
 11578 0000907A A0[FE910000]        <2> 	mov al, [.pagestart]
 11579 0000907F FEC0                <2> 	inc al
 11580 00009081 EE                  <2> 	out dx, al ;set page in CURR register
 11581                              <2> ;INSERT MULTICAST INIT HERE
 11582 00009082 E84CFFFFFF          <2> 	call .stop
 11583 00009087 8B15[E2910000]      <2> 	mov edx, [.basenicaddr]
 11584 0000908D 83C20C              <2> 	add edx, .RCR
 11585 00009090 B004                <2> 	mov al, .RCR.AB
 11586 00009092 EE                  <2> 	out dx, al ;accept broadcast
 11587 00009093 6642                <2> 	inc dx
 11588 00009095 30C0                <2> 	xor al, al
 11589 00009097 EE                  <2> 	out dx, al ;stop loopback
 11590 00009098 E82AFFFFFF          <2> 	call .start
 11591 0000909D C3                  <2> 	ret
 11592                              <2> .getmac:
 11593 0000909E 8B15[E2910000]      <2> 	mov edx, [.basenicaddr]
 11594 000090A4 B020                <2> 	mov al, 0x20
 11595 000090A6 0C02                <2> 	or al, 2
 11596 000090A8 EE                  <2> 	out dx, al	;set STA and RD2 bits
 11597 000090A9 6683C20A            <2> 	add dx, .RBCR0
 11598 000090AD B010                <2> 	mov al, 16
 11599 000090AF EE                  <2> 	out dx, al
 11600 000090B0 6642                <2> 	inc dx
 11601 000090B2 30C0                <2> 	xor al, al
 11602 000090B4 EE                  <2> 	out dx, al
 11603 000090B5 8B15[E2910000]      <2> 	mov edx, [.basenicaddr]
 11604 000090BB 6683C208            <2> 	add dx, .RSAR0
 11605 000090BF EE                  <2> 	out dx, al
 11606 000090C0 6642                <2> 	inc dx
 11607 000090C2 EE                  <2> 	out dx, al
 11608 000090C3 668B15[E2910000]    <2> 	mov dx, [.basenicaddr]
 11609 000090CA B008                <2> 	mov al, 8
 11610 000090CC 0C02                <2> 	or al, 2
 11611 000090CE EE                  <2> 	out dx, al
 11612 000090CF 668B15[E2910000]    <2> 	mov dx, [.basenicaddr]
 11613 000090D6 6683C210            <2> 	add dx, .ASIC
 11614 000090DA B908000000          <2> 	mov ecx, 8
 11615 000090DF BF[10920000]        <2> 	mov edi, .rom
 11616 000090E4 F3666D              <2> 	rep insw
 11617                              <2> .copymac:
 11618 000090E7 BF[10920000]        <2> 	mov edi, .rom
 11619 000090EC BE[0A920000]        <2> 	mov esi, .mac
 11620 000090F1 B906000000          <2> 	mov ecx, 6
 11621                              <2> .lpmac:
 11622 000090F6 8A07                <2> 	mov al, [edi]
 11623 000090F8 8806                <2> 	mov [esi], al
 11624 000090FA 83C702              <2> 	add edi, 2
 11625 000090FD 46                  <2> 	inc esi
 11626 000090FE E2F6                <2> 	loop .lpmac
 11627 00009100 B9[0A920000]        <2> 	mov ecx, .mac
 11628 00009105 C3                  <2> 	ret
 11629                              <2> .sendpacket:
 11630 00009106 803D[E6910000]00    <2> 	cmp byte [.nicconfig], 0
 11631 0000910D 750F                <2> 	jne .sendit
 11632 0000910F 56                  <2> 	push esi
 11633 00009110 57                  <2> 	push edi
 11634 00009111 E804FEFFFF          <2> 	call .init
 11635 00009116 5F                  <2> 	pop edi
 11636 00009117 5E                  <2> 	pop esi
 11637 00009118 83FB00              <2> 	cmp ebx, 0
 11638 0000911B 7401                <2> 	je .sendit
 11639 0000911D C3                  <2> 	ret
 11640                              <2> .sendit: ;packet start in edi, end in esi
 11641 0000911E 87F7                <2> 	xchg esi, edi ;this helps with the outsw
 11642                              <2> 	;now the packet start is in esi, end in edi
 11643 00009120 8B0D[0A920000]      <2> 	mov ecx, [.mac]
 11644 00009126 894E06              <2> 	mov [esi + 6], ecx
 11645 00009129 668B0D[0E920000]    <2> 	mov cx, [.mac + 4]
 11646 00009130 66894E0A            <2> 	mov [esi + 10], cx	;copy the correct mac
 11647 00009134 8B15[E2910000]      <2> 	mov edx, [.basenicaddr]
 11648 0000913A B020                <2> 	mov al, .CR.RD2
 11649 0000913C 0C02                <2> 	or al, .CR.STA
 11650 0000913E EE                  <2> 	out dx, al ;set RD2 and STA
 11651 0000913F 83C207              <2> 	add edx, .ISR ; ISR
 11652 00009142 B040                <2> 	mov al, .ISR.RDC
 11653 00009144 EE                  <2> 	out dx, al ;set RDC flag
 11654 00009145 8B15[E2910000]      <2> 	mov edx, [.basenicaddr]
 11655 0000914B 6683C20A            <2> 	add dx, .RBCR0
 11656 0000914F 89F8                <2> 	mov eax, edi
 11657 00009151 29F0                <2> 	sub eax, esi
 11658 00009153 BB01000000          <2> 	mov ebx, 1
 11659 00009158 21C3                <2> 	and ebx, eax
 11660 0000915A 83FB01              <2> 	cmp ebx, 1
 11661 0000915D 7501                <2> 	jne .nofixword
 11662 0000915F 40                  <2> 	inc eax
 11663                              <2> .nofixword:
 11664 00009160 89C1                <2> 	mov ecx, eax ;save length in ecx
 11665 00009162 EE                  <2> 	out dx, al
 11666 00009163 86C4                <2> 	xchg al, ah
 11667 00009165 6642                <2> 	inc dx
 11668 00009167 EE                  <2> 	out dx, al ;send size
 11669 00009168 8B15[E2910000]      <2> 	mov edx, [.basenicaddr]
 11670 0000916E 6683C208            <2> 	add dx, .RSAR0
 11671 00009172 66A1[FE910000]      <2> 	mov ax, [.pagestart]
 11672 00009178 C1E008              <2> 	shl eax, 8
 11673 0000917B EE                  <2> 	out dx, al
 11674 0000917C 86C4                <2> 	xchg al, ah
 11675 0000917E 6642                <2> 	inc dx
 11676 00009180 EE                  <2> 	out dx, al ;send address in NIC memory
 11677 00009181 8B15[E2910000]      <2> 	mov edx, [.basenicaddr]
 11678 00009187 B010                <2> 	mov al, .CR.RD1
 11679 00009189 0C02                <2> 	or al, .CR.STA
 11680 0000918B EE                  <2> 	out dx, al ;set RD and STA
 11681 0000918C 89CB                <2> 	mov ebx, ecx ;save length in ebx
 11682 0000918E D1E9                <2> 	shr ecx, 1
 11683 00009190 8B15[E2910000]      <2> 	mov edx, [.basenicaddr]
 11684 00009196 6683C210            <2> 	add dx, 0x10
 11685 0000919A F3666F              <2> 	rep outsw ;Send the packet data
 11686 0000919D 8B15[E2910000]      <2> 	mov edx, [.basenicaddr]
 11687 000091A3 6683C207            <2> 	add dx, .ISR
 11688                              <2> .chkcopylp:
 11689 000091A7 B440                <2> 	mov ah, .ISR.RDC
 11690 000091A9 EC                  <2> 	in al, dx
 11691 000091AA 20C4                <2> 	and ah, al
 11692 000091AC 80FC40              <2> 	cmp ah, 0x40
 11693 000091AF 75F6                <2> 	jne .chkcopylp	
 11694 000091B1 8B15[E2910000]      <2> 	mov edx, [.basenicaddr]
 11695 000091B7 6683C204            <2> 	add dx, 4
 11696 000091BB A0[FE910000]        <2> 	mov al, [.pagestart]
 11697 000091C0 EE                  <2> 	out dx, al ;send start address in pages
 11698 000091C1 8B15[E2910000]      <2> 	mov edx, [.basenicaddr]
 11699 000091C7 83C205              <2> 	add edx, 0x5
 11700 000091CA 89D8                <2> 	mov eax, ebx
 11701 000091CC EE                  <2> 	out dx, al
 11702 000091CD 86C4                <2> 	xchg al, ah
 11703 000091CF 6642                <2> 	inc dx
 11704 000091D1 EE                  <2> 	out dx, al ;send length
 11705 000091D2 8B15[E2910000]      <2> 	mov edx, [.basenicaddr]
 11706 000091D8 B020                <2> 	mov al, 0x20
 11707 000091DA 0C04                <2> 	or al, 4
 11708 000091DC 0C02                <2> 	or al, 2
 11709 000091DE EE                  <2> 	out dx, al ;set RD2, TXP, and STA
 11710 000091DF 31DB                <2> 	xor ebx, ebx
 11711 000091E1 C3                  <2> 	ret
 11712 000091E2 00000000            <2> .basenicaddr dd 0
 11713 000091E6 00                  <2> .nicconfig db 0
 11714 000091E7 4E45323030302000    <2> .name db "NE2000 ",0
 11715 000091EF 496E697469616C697A- <2> .initmsg db "Initialized.",10,0
 11716 000091F8 65642E0A00          <2>
 11717 000091FD 90                  <2> align 2, nop
 11718 000091FE 0000                <2> .pagestart dw 0
 11719 00009200 0000                <2> .pageend dw 0
 11720 00009202 00000000            <2> .ringstart dd 0
 11721 00009206 00000000            <2> .ringend dd 0
 11722 0000920A 000000000000        <2> .mac db 0,0,0,0,0,0
 11723 00009210 00<rept>            <2> .rom times 16 db 0
 11724                              <2> 
 11725                              <2> .end:
 11726                              <1> %endif
 11727                              <1> %ifdef i8254x.included
 11728                              <1> 	%include "source/drivers/network/i8254x.asm"
 11729                              <2> ;Intel 8254x NIC DRIVER
 11730                              <2> i8254x:
 11731 00009220 E805000000          <2> 	call .init
 11732 00009225 E966020000          <2> 	jmp .end
 11733                              <2> 
 11734                              <2> ;REGISTERS
 11735                              <2> .EEC equ 0x10
 11736                              <2> .EERD equ 0x14
 11737                              <2> .TCTL equ 0x400
 11738                              <2> .TIPG equ 0x410
 11739                              <2> .TDBAL equ 0x3800
 11740                              <2> .TDBAH equ 0x3804
 11741                              <2> .TDLEN equ 0x3808
 11742                              <2> .TDH equ 0x3810
 11743                              <2> .TDT equ 0x3818
 11744                              <2> .RAL equ 0x5400
 11745                              <2> .RAH equ 0x5404
 11746                              <2> ;CODE
 11747                              <2> .init:	;should find card, get mac, and initialize card
 11748 0000922A 31C0                <2> 	xor eax, eax
 11749 0000922C A2[9C670000]        <2> 	mov [pcifunction], al
 11750 00009231 A2[9A670000]        <2> 	mov [pcibus], al
 11751 00009236 A2[9B670000]        <2> 	mov [pcidevice], al
 11752 0000923B B002                <2> 	mov al, 0x02 ;type code
 11753 0000923D A2[25680000]        <2> 	mov [pcitype], al
 11754 00009242 B886800010          <2> 	mov eax, 0x10008086
 11755 00009247 A3[9F670000]        <2> 	mov [pcidevid], eax
 11756 0000924C BBFFFF00FE          <2> 	mov ebx, 0xFE00FFFF
 11757 00009251 891D[A3670000]      <2> 	mov [pcidevidmask], ebx
 11758 00009257 E84BD5FFFF          <2> 	call getpcimem
 11759 0000925C 83FBFF              <2> 	cmp ebx, 0xFFFFFFFF
 11760 0000925F 7501                <2> 	jne .initnic
 11761 00009261 C3                  <2> 	ret
 11762                              <2> .initnic:
 11763 00009262 8915[E6930000]      <2> 	mov [.basenicaddr], edx
 11764 00009268 89D1                <2> 	mov ecx, edx
 11765 0000926A E87E9FFFFF          <2> 	call showhex	;for debugging, please remove
 11766 0000926F BE[3CAA2D00]        <2> 	mov esi, rbuffstart
 11767 00009274 B900200000          <2> 	mov ecx, 8192
 11768 00009279 31C0                <2> 	xor eax, eax
 11769                              <2> .clearrbuff:		;clear receive buffer which starts at rbuffstart
 11770 0000927B 8806                <2> 	mov [esi], al
 11771 0000927D 46                  <2> 	inc esi
 11772 0000927E 6649                <2> 	dec cx
 11773 00009280 6683F900            <2> 	cmp cx, 0
 11774 00009284 75F5                <2> 	jne .clearrbuff
 11775                              <2> .findmac:
 11776 00009286 8B1D[E6930000]      <2> 	mov ebx, [.basenicaddr]
 11777                              <2> 	; Setup Control Register
 11778 0000928C B861030000          <2> 	mov eax, 0x361
 11779 00009291 8903                <2> 	mov [ebx], eax
 11780                              <2> 	; Setup Transmission Descriptors
 11781 00009293 BF[10940000]        <2> 	mov edi, .tdesc
 11782 00009298 A1[33020000]        <2> 	mov eax, [basecache]
 11783 0000929D C1E004              <2> 	shl eax, 4
 11784 000092A0 01F8                <2> 	add eax, edi
 11785 000092A2 898300380000        <2> 	mov [ebx + .TDBAL], eax
 11786 000092A8 31C0                <2> 	xor eax, eax
 11787 000092AA 898310380000        <2> 	mov [ebx + .TDH], eax
 11788 000092B0 898318380000        <2> 	mov [ebx + .TDT], eax
 11789 000092B6 898304380000        <2> 	mov [ebx + .TDBAH], eax
 11790 000092BC 66B88000            <2> 	mov ax, 128
 11791 000092C0 898308380000        <2> 	mov [ebx + .TDLEN], eax
 11792 000092C6 B80A010401          <2> 	mov eax, 0x104010A
 11793 000092CB 898300040000        <2> 	mov [ebx + .TCTL], eax	;turn on transmission, set up other registers
 11794 000092D1 B80A285000          <2> 	mov eax, 0x50280A
 11795 000092D6 898310040000        <2> 	mov [ebx + .TIPG], eax	;setup TIPG
 11796                              <2> 	;Setup Receive Registers
 11797 000092DC BF[EB930000]        <2> 	mov edi, .mac
 11798 000092E1 81C300540000        <2> 	add ebx, .RAL
 11799 000092E7 31D2                <2> 	xor edx, edx
 11800 000092E9 B903000000          <2> 	mov ecx, 3
 11801                              <2> .macloop:
 11802 000092EE E8AD000000          <2> 	call .eepromread
 11803 000092F3 668907              <2> 	mov [edi], ax
 11804 000092F6 668903              <2> 	mov [ebx], ax
 11805 000092F9 42                  <2> 	inc edx
 11806 000092FA 83C302              <2> 	add ebx, 2
 11807 000092FD 83C702              <2> 	add edi, 2
 11808 00009300 E2EC                <2> 	loop .macloop
 11809 00009302 66B80080            <2> 	mov ax, 0x8000
 11810 00009306 668903              <2> 	mov [ebx], ax	;set address valid bit
 11811                              <2> 
 11812 00009309 B9[EB930000]        <2> 	mov ecx, .mac
 11813 0000930E E834020000          <2> 	call showmac
 11814 00009313 BE[F1930000]        <2> 	mov esi, .name
 11815 00009318 E8BF8AFFFF          <2> 	call print
 11816 0000931D BE[F9930000]        <2> 	mov esi, .initmsg
 11817 00009322 E8B58AFFFF          <2> 	call print
 11818 00009327 C605[EA930000]01    <2> 	mov byte [.nicconfig], 1
 11819 0000932E 31DB                <2> 	xor ebx, ebx
 11820 00009330 C3                  <2> 	ret
 11821                              <2> 	
 11822                              <2> .sendpacket:
 11823 00009331 803D[EA930000]00    <2> 	cmp byte [.nicconfig], 0
 11824 00009338 750F                <2> 	jne .sendit
 11825 0000933A 56                  <2> 	push esi
 11826 0000933B 57                  <2> 	push edi
 11827 0000933C E8E9FEFFFF          <2> 	call .init
 11828 00009341 5F                  <2> 	pop edi
 11829 00009342 5E                  <2> 	pop esi
 11830 00009343 83FB00              <2> 	cmp ebx, 0
 11831 00009346 7401                <2> 	je .sendit
 11832 00009348 C3                  <2> 	ret
 11833                              <2> .sendit:	;packet start in edi, packet end in esi
 11834 00009349 8B0D[EB930000]      <2> 	mov ecx, [.mac]
 11835 0000934F 894F06              <2> 	mov [edi + 6], ecx
 11836 00009352 668B0D[EF930000]    <2> 	mov cx, [.mac + 4]
 11837 00009359 66894F0A            <2> 	mov [edi + 10], cx	;copy the correct mac
 11838 0000935D 8B1D[E6930000]      <2> 	mov ebx, [.basenicaddr]
 11839 00009363 29FE                <2> 	sub esi, edi
 11840 00009365 A1[33020000]        <2> 	mov eax, [basecache]
 11841 0000936A C1E004              <2> 	shl eax, 4
 11842 0000936D 01F8                <2> 	add eax, edi	;ALWAYS ADD THE VIRTUAL MEMORY OFFSET!
 11843 0000936F A3[10940000]        <2> 	mov [.tdesc], eax	;Low Address
 11844 00009374 8935[18940000]      <2> 	mov [.tdesc + 8], esi	;Length
 11845 0000937A B8000B0000          <2> 	mov eax, 0xB00
 11846 0000937F A3[1A940000]        <2> 	mov [.tdesc + 10], eax	;Command
 11847 00009384 B810000000          <2> 	mov eax, 16
 11848 00009389 898318380000        <2> 	mov [ebx + .TDT], eax	;Trail of TDESC ring buffer
 11849                              <2> .checksta:
 11850 0000938F 8B0D[1C940000]      <2> 	mov ecx, [.tdesc + 12]
 11851 00009395 83E101              <2> 	and ecx, 1
 11852 00009398 83F900              <2> 	cmp ecx, 0
 11853 0000939B 74F2                <2> 	je .checksta
 11854 0000939D 31DB                <2> 	xor ebx, ebx
 11855 0000939F C3                  <2> 	ret
 11856                              <2> 	
 11857                              <2> .eepromread:	;location in EEPROM in edx (actually just dl)
 11858 000093A0 8B35[E6930000]      <2> 	mov esi, [.basenicaddr]
 11859 000093A6 8B4610              <2> 	mov eax, [esi + .EEC]
 11860 000093A9 83C840              <2> 	or eax, 1000000b
 11861 000093AC 894610              <2> 	mov [esi + .EEC], eax	;turn software access on
 11862                              <2> .waiteeprom:
 11863 000093AF 8B4610              <2> 	mov eax, [esi + .EEC]
 11864 000093B2 2580000000          <2> 	and eax, 10000000b
 11865 000093B7 3D80000000          <2> 	cmp eax, 10000000b
 11866 000093BC 75F1                <2> 	jne .waiteeprom
 11867 000093BE 8B4614              <2> 	mov eax, [esi + .EERD]
 11868 000093C1 31C0                <2> 	xor eax, eax
 11869 000093C3 88D4                <2> 	mov ah, dl 	;eeprom address
 11870 000093C5 0C01                <2> 	or al, 1	;start read
 11871 000093C7 894614              <2> 	mov [esi + .EERD], eax
 11872                              <2> .waiteepromread:
 11873 000093CA 8B4614              <2> 	mov eax, [esi + .EERD]
 11874 000093CD 83E010              <2> 	and eax, 10000b
 11875 000093D0 83F810              <2> 	cmp eax, 10000b
 11876 000093D3 75F5                <2> 	jne .waiteepromread
 11877 000093D5 8B4614              <2> 	mov eax, [esi + .EERD]
 11878 000093D8 668B4610            <2> 	mov ax, [esi + .EEC]
 11879 000093DC 24BF                <2> 	and al, 10111111b
 11880 000093DE 66894610            <2> 	mov [esi + .EEC], ax	;turn software access off
 11881 000093E2 C1E810              <2> 	shr eax, 16	;AX has the requested word
 11882 000093E5 C3                  <2> 	ret
 11883                              <2> 
 11884 000093E6 00000000            <2> .basenicaddr dd 0
 11885 000093EA 00                  <2> .nicconfig db 0
 11886 000093EB 000000000000        <2> .mac db 0,0,0,0,0,0
 11887 000093F1 4938323534582000    <2> .name db "I8254X ",0
 11888 000093F9 496E697469616C697A- <2> .initmsg db "Initialized",10,0
 11889 00009402 65640A00            <2>
 11890 00009406 00<rept>            <2> align 16, db 0
 11891                              <2> .tdesc:
 11892 00009410 00000000            <2> 	dd 0	;Address Low = 0
 11893 00009414 00000000            <2> 	dd 0	;Address High = 4
 11894 00009418 0000                <2> 	dw 0	;Length = 8
 11895 0000941A 00                  <2> 	db 0	;CSO = 10
 11896 0000941B 00                  <2> 	db 0	;CMD = 11
 11897 0000941C 00                  <2> 	db 0	;STA, RSV = 12
 11898 0000941D 00                  <2> 	db 0	;CSS = 13
 11899 0000941E 0000                <2> 	dw 0	;Special = 14
 11900 00009420 00<rept>            <2> times (128-16) db 0
 11901                              <2> .end:
 11902                              <1> %endif
 11903 00009490 C3                  <1> 	ret
 11904                              <1> 
 11905                              <1> sendpacket: ;packet start in edi, end in esi
 11906                              <1> 	%ifdef rtl8139.included
 11907 00009491 57                  <1> 		push edi
 11908 00009492 56                  <1> 		push esi
 11909 00009493 E863F6FFFF          <1> 		call rtl8139.sendpacket
 11910 00009498 5E                  <1> 		pop esi
 11911 00009499 5F                  <1> 		pop edi
 11912                              <1> 	%endif
 11913                              <1> 	%ifdef rtl8169.included
 11914 0000949A 57                  <1> 		push edi
 11915 0000949B 56                  <1> 		push esi
 11916 0000949C E847F8FFFF          <1> 		call rtl8169.sendpacket
 11917 000094A1 5E                  <1> 		pop esi
 11918 000094A2 5F                  <1> 		pop edi
 11919                              <1> 	%endif
 11920                              <1> 	%ifdef ne2000.included
 11921 000094A3 57                  <1> 		push edi
 11922 000094A4 56                  <1> 		push esi
 11923 000094A5 E85CFCFFFF          <1> 		call ne2000.sendpacket
 11924 000094AA 5E                  <1> 		pop esi
 11925 000094AB 5F                  <1> 		pop edi
 11926                              <1> 	%endif
 11927                              <1> 	%ifdef i8254x.included
 11928 000094AC E880FEFFFF          <1> 		call i8254x.sendpacket
 11929                              <1> 	%endif
 11930 000094B1 C3                  <1> 	ret
 11931                              <1> 
 11932                              <1> getchecksum: ;start in edi, end in esi, checksum put in ecx
 11933 000094B2 31C0                <1> 	xor eax, eax
 11934 000094B4 31DB                <1> 	xor ebx, ebx
 11935 000094B6 31C9                <1> 	xor ecx, ecx
 11936                              <1> .lp:
 11937 000094B8 8A07                <1> 	mov al, [edi]
 11938 000094BA 8A6701              <1> 	mov ah, [edi + 1]
 11939 000094BD 01C3                <1> 	add ebx, eax
 11940 000094BF 83C702              <1> 	add edi, 2
 11941 000094C2 39F7                <1> 	cmp edi, esi
 11942 000094C4 72F2                <1> 	jb .lp
 11943 000094C6 66B9FFFF            <1> 	mov cx, 0xFFFF
 11944 000094CA 6689D8              <1> 	mov ax, bx
 11945 000094CD C1EB10              <1> 	shr ebx, 16
 11946 000094D0 6601D8              <1> 	add ax, bx
 11947 000094D3 6629C1              <1> 	sub cx, ax
 11948 000094D6 C3                  <1> 	ret
 11949                              <1> 	
 11950                              <1> strtoip:	;string in esi with format X.X.X.X converted to number in ecx
 11951 000094D7 31DB                <1> 	xor ebx, ebx
 11952 000094D9 31C9                <1> 	xor ecx, ecx
 11953 000094DB 31D2                <1> 	xor edx, edx
 11954                              <1> .mlp:
 11955 000094DD 89F7                <1> 	mov edi, esi
 11956 000094DF 4F                  <1> 	dec edi
 11957                              <1> .lp:
 11958 000094E0 47                  <1> 	inc edi
 11959 000094E1 8A07                <1> 	mov al, [edi]
 11960 000094E3 3C20                <1> 	cmp al, " "
 11961 000094E5 7408                <1> 	je .dnlp
 11962 000094E7 3C00                <1> 	cmp al, 0
 11963 000094E9 7404                <1> 	je .dnlp
 11964 000094EB 3C2E                <1> 	cmp al, "."
 11965 000094ED 75F1                <1> 	jne .lp
 11966                              <1> .dnlp:
 11967 000094EF 30C0                <1> 	xor al, al
 11968 000094F1 8807                <1> 	mov [edi], al
 11969 000094F3 53                  <1> 	push ebx
 11970 000094F4 56                  <1> 	push esi
 11971 000094F5 57                  <1> 	push edi
 11972 000094F6 31FF                <1> 	xor edi, edi
 11973 000094F8 E86E9EFFFF          <1> 	call cnvrttxt
 11974 000094FD 5E                  <1> 	pop esi
 11975 000094FE 5F                  <1> 	pop edi ;i intentionally switch them
 11976 000094FF 5B                  <1> 	pop ebx
 11977 00009500 46                  <1> 	inc esi
 11978 00009501 BF[16950000]        <1> 	mov edi, ipstr
 11979 00009506 880C1F              <1> 	mov [edi + ebx], cl
 11980 00009509 43                  <1> 	inc ebx
 11981 0000950A 83FB04              <1> 	cmp ebx, 4
 11982 0000950D 72CE                <1> 	jb .mlp
 11983 0000950F 8B0D[16950000]      <1> 	mov ecx, [ipstr]
 11984 00009515 C3                  <1> 	ret
 11985 00009516 00000000            <1> ipstr dd 0
 11986                              <1> showip: 	;put the ip address in ecx
 11987 0000951A 89C8                <1> 	mov eax, ecx
 11988 0000951C 30DB                <1> 	xor bl, bl
 11989                              <1> .lp:
 11990 0000951E 31C9                <1> 	xor ecx, ecx
 11991 00009520 88C1                <1> 	mov cl, al
 11992 00009522 E8759DFFFF          <1> 	call showdec
 11993 00009527 C1E808              <1> 	shr eax, 8
 11994 0000952A FEC3                <1> 	inc bl
 11995 0000952C 80FB04              <1> 	cmp bl, 4
 11996 0000952F 7312                <1> 	jae .done
 11997 00009531 50                  <1> 	push eax
 11998 00009532 6653                <1> 	push bx
 11999 00009534 BE[44950000]        <1> 	mov esi, .dot
 12000 00009539 E89E88FFFF          <1> 	call print
 12001 0000953E 665B                <1> 	pop bx
 12002 00009540 58                  <1> 	pop eax
 12003 00009541 EBDB                <1> 	jmp .lp
 12004                              <1> .done:
 12005 00009543 C3                  <1> 	ret
 12006 00009544 082E00              <1> .dot db 8,".",0
 12007                              <1> showmac:	;mac begins in [ecx]
 12008 00009547 BE[91950000]        <1> 	mov esi, macprint
 12009 0000954C 89CF                <1> 	mov edi, ecx
 12010 0000954E 83C106              <1> 	add ecx, 6
 12011                              <1> showmacloop:
 12012 00009551 8A07                <1> 	mov al, [edi]
 12013 00009553 8A27                <1> 	mov ah, [edi]
 12014 00009555 C0E804              <1> 	shr al, 4
 12015 00009558 C0E404              <1> 	shl ah, 4
 12016 0000955B C0EC04              <1> 	shr ah, 4
 12017 0000955E 0430                <1> 	add al, 48
 12018 00009560 3C39                <1> 	cmp al, "9"
 12019 00009562 7606                <1> 	jbe .goodal
 12020 00009564 2C30                <1> 	sub al, 48
 12021 00009566 2C0A                <1> 	sub al, 0xA
 12022 00009568 0441                <1> 	add al, "A"
 12023                              <1> .goodal:
 12024 0000956A 80C430              <1> 	add ah, 48
 12025 0000956D 80FC39              <1> 	cmp ah, "9"
 12026 00009570 7609                <1> 	jbe .goodah
 12027 00009572 80EC30              <1> 	sub ah, 48
 12028 00009575 80EC0A              <1> 	sub ah, 0xA
 12029 00009578 80C441              <1> 	add ah, "A"
 12030                              <1> .goodah:
 12031 0000957B 668906              <1> 	mov [esi], ax
 12032 0000957E 83C603              <1> 	add esi, 3
 12033 00009581 47                  <1> 	inc edi
 12034 00009582 39CF                <1> 	cmp edi, ecx
 12035 00009584 72CB                <1> 	jb showmacloop
 12036 00009586 BE[91950000]        <1> 	mov esi, macprint
 12037 0000958B E84C88FFFF          <1> 	call print
 12038 00009590 C3                  <1> 	ret
 12039                              <1> 	
 12040 00009591 30303A30303A30303A- <1> macprint db "00:00:00:00:00:00 ",0
 12041 0000959A 30303A30303A303020- <1>
 12042 000095A3 00                  <1>
 12043 000095A4 00000000            <1> ethernetend dw 0,0
 12044 000095A8 C0A80002            <1> sysip db 192,168,0,2
 12045 000095AC 000000000000        <1> sysmac	db 0,0,0,0,0,0		;my mac address
 12046                                  %endif
 12047                                  	%include "source/data.asm"
 12048 000095B2 626F6F742E736800    <1> 	bootfilename db	"boot.sh",0
 12049 000095BA 73687573683A2000    <1> 	notfound1 db	"shush: ",0
 12050 000095C2 3A206E6F7420666F75- <1> 	notfound2 db	": not found",10,0
 12051 000095CB 6E640A00            <1>
 12052 000095CF 757365726E616D653A- <1> 	userask db	"username:",0
 12053 000095D8 00                  <1>
 12054 000095D9 70617373776F72643A- <1> 	pwdask	db	"password:",0
 12055 000095E2 00                  <1>
 12056 000095E3 40                  <1> 	computer db	"@"
 12057                              <1> %ifdef io.serial
 12058                              <1> 	computername db	"SollerOS.",io.serial," ",0
 12059                              <1> %else
 12060 000095E4 536F6C6C65724F5320- <1> 	computername db	"SollerOS ",0
 12061 000095ED 00                  <1>
 12062                              <1> %endif
 12063 000095EE 5D242000            <1> 	endprompt db "]$ ",0
 12064 000095F2 0D                  <1> 	crlf 	db	13
 12065 000095F3 0A00                <1> 	line	db	10,0
 12066                              <1> 	userlst:
 12067 000095F5 726F6F7400          <1> 			db "root",0
 12068 000095FA 617765736F6D65706F- <1> 			db "awesomepower",0
 12069 00009603 77657200            <1>
 12070 00009607 7573657200          <1> 			db "user",0
 12071 0000960C 70617373776F726400  <1> 			db "password",0
 12072 00009615 6E00                <1> 			db "n",0	;abuse for quick entry-a quick double n followed by a double enter will get you in
 12073 00009617 00                  <1> 			db 0
 12074                              <1> 	userlstend:
 12075                              <1> 	
 12076 00009618 00                  <1> 	guion db 0
 12077 00009619 00                  <1> 	DriveNumber db 0
 12078 0000961A 00000000            <1> 	lbaad dd 0
 12079 0000961E 0000000000000000    <1> 	initialtsc dd 0,0
 12080 00009626 0000000000000000    <1> 	lasttsc dd 0,0
 12081 0000962E 00<rept>            <1> 	memlistbuf times 576 db 0
 12082 0000986E 00000000            <1> 	memlistend: dd 0
 12083                              <1> %ifdef io.serial
 12084                              <1> %else
 12085                              <1> fonts:
 12086                              <1> %ifdef font.unicode
 12087 00009872 <incbin>            <1> 	incbin "source/fonts/fonts-unicode.pak"
 12088                              <1> %else
 12089                              <1> 	incbin "source/fonts/fonts-ascii.pak"
 12090                              <1> %endif
 12091                              <1> fontend:
 12092                              <1> %endif
 12093                              <1> osend:	;this is the end of the operating system's space on disk
 12094                                  %ifdef disk.none
 12095                                  	diskfileindex:
 12096                                  	enddiskfileindex:
 12097                                  	%include "source/bss.asm"
 12098                                  %else
 12099                                  	%include "build/fileindex.asm"
 12100                              <1> diskfileindex:
 12101 00039872 5F696D672E62696E00  <1> db "_img.bin",0
 12102 0003987B CD010000            <1> dd (f0-$$)/512
 12103 0003987F 0C000000            <1> dd (f1-f0)/512
 12104 00039883 617267746573742E65- <1> db "argtest.elf",0
 12105 0003988C 6C6600              <1>
 12106 0003988F D9010000            <1> dd (f1-$$)/512
 12107 00039893 46000000            <1> dd (f2-f1)/512
 12108 00039897 626F6F742E736800    <1> db "boot.sh",0
 12109 0003989F 1F020000            <1> dd (f2-$$)/512
 12110 000398A3 01000000            <1> dd (f3-f2)/512
 12111 000398A7 63686172746573742E- <1> db "chartest.elf",0
 12112 000398B0 656C6600            <1>
 12113 000398B4 20020000            <1> dd (f3-$$)/512
 12114 000398B8 4E000000            <1> dd (f4-f3)/512
 12115 000398BC 646F73746573742E63- <1> db "dostest.com",0
 12116 000398C5 6F6D00              <1>
 12117 000398C8 6E020000            <1> dd (f4-$$)/512
 12118 000398CC 01000000            <1> dd (f5-f4)/512
 12119 000398D0 6578656300          <1> db "exec",0
 12120 000398D5 6F020000            <1> dd (f5-$$)/512
 12121 000398D9 01000000            <1> dd (f6-f5)/512
 12122 000398DD 66696E616C636F756E- <1> db "finalcount.sn",0
 12123 000398E6 742E736E00          <1>
 12124 000398EB 70020000            <1> dd (f6-$$)/512
 12125 000398EF 01000000            <1> dd (f7-f6)/512
 12126 000398F3 666F726B00          <1> db "fork",0
 12127 000398F8 71020000            <1> dd (f7-$$)/512
 12128 000398FC 01000000            <1> dd (f8-f7)/512
 12129 00039900 6775697465737400    <1> db "guitest",0
 12130 00039908 72020000            <1> dd (f8-$$)/512
 12131 0003990C 03000000            <1> dd (f9-f8)/512
 12132 00039910 696E7400            <1> db "int",0
 12133 00039914 75020000            <1> dd (f9-$$)/512
 12134 00039918 01000000            <1> dd (f10-f9)/512
 12135 0003991C 6C6F7374776F6F6473- <1> db "lostwoods.sn",0
 12136 00039925 2E736E00            <1>
 12137 00039929 76020000            <1> dd (f10-$$)/512
 12138 0003992D 01000000            <1> dd (f11-f10)/512
 12139 00039931 6D6172696F2E736E00  <1> db "mario.sn",0
 12140 0003993A 77020000            <1> dd (f11-$$)/512
 12141 0003993E 01000000            <1> dd (f12-f11)/512
 12142 00039942 6D6F6D656E742E7761- <1> db "moment.wav",0
 12143 0003994B 7600                <1>
 12144 0003994D 78020000            <1> dd (f12-$$)/512
 12145 00039951 2C050000            <1> dd (f13-f12)/512
 12146 00039955 70692E656C6600      <1> db "pi.elf",0
 12147 0003995C A4070000            <1> dd (f13-$$)/512
 12148 00039960 4E000000            <1> dd (f14-f13)/512
 12149 00039964 72617974726163652E- <1> db "raytrace.elf",0
 12150 0003996D 656C6600            <1>
 12151 00039971 F2070000            <1> dd (f14-$$)/512
 12152 00039975 1E000000            <1> dd (f15-f14)/512
 12153 00039979 736F6E676F74696D65- <1> db "songotime.sn",0
 12154 00039982 2E736E00            <1>
 12155 00039986 10080000            <1> dd (f15-$$)/512
 12156 0003998A 01000000            <1> dd (f16-f15)/512
 12157 0003998E 73736500            <1> db "sse",0
 12158 00039992 11080000            <1> dd (f16-$$)/512
 12159 00039996 02000000            <1> dd (f17-f16)/512
 12160 0003999A 737464696F74657374- <1> db "stdiotest.elf",0
 12161 000399A3 2E656C6600          <1>
 12162 000399A8 13080000            <1> dd (f17-$$)/512
 12163 000399AC 4E000000            <1> dd (f18-f17)/512
 12164 000399B0 74656C7900          <1> db "tely",0
 12165 000399B5 61080000            <1> dd (f18-$$)/512
 12166 000399B9 02000000            <1> dd (f19-f18)/512
 12167 000399BD 74696D65746573742E- <1> db "timetest.elf",0
 12168 000399C6 656C6600            <1>
 12169 000399CA 63080000            <1> dd (f19-$$)/512
 12170 000399CE 46000000            <1> dd (f20-f19)/512
 12171 000399D2 7475746F7269616C2E- <1> db "tutorial.sh",0
 12172 000399DB 736800              <1>
 12173 000399DE A9080000            <1> dd (f20-$$)/512
 12174 000399E2 03000000            <1> dd (f21-f20)/512
 12175 000399E6 756E667300          <1> db "unfs",0
 12176 000399EB AC080000            <1> dd (f21-$$)/512
 12177 000399EF 02000000            <1> dd (f22-f21)/512
 12178                              <1> enddiskfileindex:
 12179                              <1> 
 12180                                  	%include "source/bss.asm"
 12181 000399F3 00<rept>            <1> align 512, db 0
 12182                              <1> bssstart equ $
 12183                              <1> bsscopy equ $
 12184                              <1> initialstack equ bsscopy
 12185                              <1> stackend equ initialstack + 8192
 12186                              <1> sigtable equ stackend + 4
 12187                              <1> fileindex equ sigtable + 4
 12188                              <1> fileindexend equ fileindex + 1024
 12189                              <1> previousstack equ fileindexend
 12190                              <1> lastfolderloc equ previousstack + 4
 12191                              <1> currentfolderloc equ lastfolderloc + 4
 12192                              <1> currentfolder equ currentfolderloc + 4
 12193                              <1> currentfolderend equ currentfolder + 512
 12194                              <1> uid equ currentfolderend
 12195                              <1> ranboot equ uid + 4
 12196                              <1> IFON equ ranboot + 1
 12197                              <1> IFTRUE equ IFON + 1
 12198                              <1> BATCHPOS equ IFTRUE + 100
 12199                              <1> BATCHISON equ BATCHPOS + 4
 12200                              <1> LOOPON equ BATCHISON + 1
 12201                              <1> LOOPPOS	equ LOOPON + 1
 12202                              <1> variables equ LOOPPOS + 4
 12203                              <1> varend equ variables + 4096
 12204                              <1> buftxt2 equ varend
 12205                              <1> buftxt equ buftxt2 + 1024
 12206                              <1> buftxtend equ buftxt + 1024
 12207                              <1> buf2 equ buftxtend
 12208                              <1> numbuf equ buf2 + 20
 12209                              <1> %ifdef io.serial
 12210                              <1> 	lastcommandpos equ numbuf
 12211                              <1> %else
 12212                              <1> 	%ifdef gui.included
 12213                              <1> 		graphicstable equ numbuf ;w type, dw datalocation, w locationx, w locationy, w selected, dw code
 12214                              <1> 		graphicstableend equ graphicstable + 512
 12215                              <1> 		%ifdef gui.background
 12216                              <1> 			backgroundbuffer equ graphicstableend
 12217                              <1> 			backgroundbufferend equ backgroundbuffer + 1280*1026*2
 12218                              <1> 			mousecolorbuf equ backgroundbufferend
 12219                              <1> 		%else
 12220                              <1> 			mousecolorbuf equ graphicstableend ;where the gui under the mouse is stored
 12221                              <1> 		%endif
 12222                              <1> 		mcolorend equ mousecolorbuf + 256
 12223                              <1> 		videobuf equ mcolorend	;1680x1050 pixels in characters
 12224                              <1> 		videobufend	equ videobuf + 210*65*4;2
 12225                              <1> 		videobuf2 equ videobufend
 12226                              <1> 		videobuf2end equ videobuf2 + 210*65*4;2
 12227                              <1> 	%else
 12228                              <1> 		videobuf equ numbuf
 12229                              <1> 		videobufend equ videobuf + 80*30*4
 12230                              <1> 		videobuf2 equ videobufend
 12231                              <1> 		videobuf2end equ videobuf2 + 80*30*4
 12232                              <1> 	%endif
 12233                              <1> 	lastcommandpos: equ videobuf2end
 12234                              <1> %endif
 12235                              <1> 	commandbufpos: equ lastcommandpos + 4
 12236                              <1> 	commandlistentries: equ commandbufpos + 4
 12237                              <1> 	commandsentered: equ commandlistentries + 4
 12238                              <1> 	commandbuf: equ commandsentered + 4
 12239                              <1> 	commandbufend: equ commandbuf + 4096 ;this is where kernel space only ends, the rest is for threading
 12240                              <1> %ifdef network.included
 12241                              <1> 	rbuffstart: equ commandbufend ;for use with networking
 12242                              <1> 	rbuffend equ rbuffstart + 8192 + 16 ;extra space used for the WRAP bit in rtl8139
 12243                              <1> 	rbuffoverflow equ rbuffend + 1500
 12244                              <1> %else
 12245                              <1> 	rbuffstart equ commandbufend
 12246                              <1> 	rbuffend equ commandbufend
 12247                              <1> %endif
 12248                              <1> %ifdef threads.included
 12249                              <1> 	threadlist: equ rbuffend ;this buffer will hold the stack locations of all of the threads, up to 1024
 12250                              <1> 	threadlistend: equ threadlist + 1024*4
 12251                              <1> 	stacks:	equ threadlistend ;NOT TRUE:i use SS now for proper stack management. This makes sure stacks never screw with other memory
 12252                              <1> 	stack1: equ stacks + 2048  ;woah, thats a lot of space for stacks
 12253                              <1> 	bssend equ stack1 + 1024*2048
 12254                              <1> %else
 12255                              <1> 	bssend equ rbuffend
 12256                              <1> %endif
 12257                              <1> dosprogloc equ 0x400000 ;from here on, it is not kernel space so apps can be loaded here.
 12258                                  	%include "build/files.asm"
 12259                              <1> align 512,db 0
 12260                              <1> f0:
 12261 00039A00 <incbin>            <1> incbin "included/_img.bin"
 12262                              <1> align 512,db 0
 12263                              <1> f1:
 12264 0003B200 <incbin>            <1> incbin "included/argtest.elf"
 12265 00043D20 00<rept>            <1> align 512,db 0
 12266                              <1> f2:
 12267 00043E00 <incbin>            <1> incbin "included/boot.sh"
 12268 00043F18 00<rept>            <1> align 512,db 0
 12269                              <1> f3:
 12270 00044000 <incbin>            <1> incbin "included/chartest.elf"
 12271 0004DB20 00<rept>            <1> align 512,db 0
 12272                              <1> f4:
 12273 0004DC00 <incbin>            <1> incbin "included/dostest.com"
 12274 0004DD2F 00<rept>            <1> align 512,db 0
 12275                              <1> f5:
 12276 0004DE00 <incbin>            <1> incbin "included/exec"
 12277 0004DEE9 00<rept>            <1> align 512,db 0
 12278                              <1> f6:
 12279 0004E000 <incbin>            <1> incbin "included/finalcount.sn"
 12280 0004E102 00<rept>            <1> align 512,db 0
 12281                              <1> f7:
 12282 0004E200 <incbin>            <1> incbin "included/fork"
 12283 0004E34C 00<rept>            <1> align 512,db 0
 12284                              <1> f8:
 12285 0004E400 <incbin>            <1> incbin "included/guitest"
 12286 0004E82E 00<rept>            <1> align 512,db 0
 12287                              <1> f9:
 12288 0004EA00 <incbin>            <1> incbin "included/int"
 12289 0004EBA6 00<rept>            <1> align 512,db 0
 12290                              <1> f10:
 12291 0004EC00 <incbin>            <1> incbin "included/lostwoods.sn"
 12292 0004ECAE 00<rept>            <1> align 512,db 0
 12293                              <1> f11:
 12294 0004EE00 <incbin>            <1> incbin "included/mario.sn"
 12295 0004EE3A 00<rept>            <1> align 512,db 0
 12296                              <1> f12:
 12297 0004F000 <incbin>            <1> incbin "included/moment.wav"
 12298 000F462C 00<rept>            <1> align 512,db 0
 12299                              <1> f13:
 12300 000F4800 <incbin>            <1> incbin "included/pi.elf"
 12301 000FE338 00<rept>            <1> align 512,db 0
 12302                              <1> f14:
 12303 000FE400 <incbin>            <1> incbin "included/raytrace.elf"
 12304 00101F20 00<rept>            <1> align 512,db 0
 12305                              <1> f15:
 12306 00102000 <incbin>            <1> incbin "included/songotime.sn"
 12307 0010204A 00<rept>            <1> align 512,db 0
 12308                              <1> f16:
 12309 00102200 <incbin>            <1> incbin "included/sse"
 12310 0010248A 00<rept>            <1> align 512,db 0
 12311                              <1> f17:
 12312 00102600 <incbin>            <1> incbin "included/stdiotest.elf"
 12313 0010C120 00<rept>            <1> align 512,db 0
 12314                              <1> f18:
 12315 0010C200 <incbin>            <1> incbin "included/tely"
 12316 0010C41B 00<rept>            <1> align 512,db 0
 12317                              <1> f19:
 12318 0010C600 <incbin>            <1> incbin "included/timetest.elf"
 12319 00115120 00<rept>            <1> align 512,db 0
 12320                              <1> f20:
 12321 00115200 <incbin>            <1> incbin "included/tutorial.sh"
 12322 00115752 00<rept>            <1> align 512,db 0
 12323                              <1> f21:
 12324 00115800 <incbin>            <1> incbin "included/unfs"
 12325                              <1> align 512,db 0
 12326                              <1> f22:
 12327                                  %endif
