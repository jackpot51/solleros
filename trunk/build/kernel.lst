     1                                  [map symbols build/kernel.map]
     2                                  %include "config.asm"
     3                              <1> ;These flags are used to configure options as on, put a simicolon in front of it to not configure it
     4                              <1> 
     5                              <1> %define gui.included
     6                              <1> ;Turn on the gui
     7                              <1> 
     8                              <1> ;%define disk.protected
     9                              <1> ;Use PATA instead of real mode for disk access
    10                              <1> 
    11                              <1> %define disk.real
    12                              <1> ;Use real mode for disk access
    13                              <1> 
    14                              <1> %define sound.included
    15                              <1> ;This includes the sound drivers
    16                              <1> 
    17                              <1> ;%define rtl8139.included
    18                              <1> ;This includes the RTL8139 drivers
    19                              <1> 
    20                              <1> ;%define sector.debug
    21                              <1> ;Dump the contents of the first sector of SollerOS
    22                                  [BITS 16]
    23                                      %include "source/boot.asm"
    24                              <1>     ; MENU.ASM
    25                              <1> %include 'source/signature.asm'
    26                              <2> signature:
    27 00000000 536F6C6C65724F53    <2> db "SollerOS" ;Operating system name
    28 00000008 20416C706861204275- <2> db " Alpha Build ",0	;Soller OS development level
    29 00000011 696C642000          <2>
    30 00000016 D3000000            <2> dd 211	;version number
    31                              <2> signatureend:
    32                              <1> menustart:	
    33 0000001A 8CC8                <1> 	mov ax, cs
    34 0000001C 8ED8                <1> 	mov ds, ax
    35 0000001E 8EC0                <1> 	mov es, ax
    36 00000020 8ED0                <1> 	mov ss, ax
    37 00000022 880E[7988]          <1> 	mov [DriveNumber], cl
    38 00000026 668916[7A88]        <1> 	mov [lbaad], edx
    39 0000002B E81200              <1> 	call vgaset	;make users switch using a command-this leads to very fast boots
    40 0000002E 6631DB              <1> 	xor ebx, ebx
    41 00000031 6631C9              <1> 	xor ecx, ecx
    42 00000034 6631D2              <1> 	xor edx, edx
    43 00000037 6631F6              <1> 	xor esi, esi
    44 0000003A 6631FF              <1> 	xor edi, edi
    45 0000003D E94600              <1> 	jmp pmode
    46                              <1> 	
    47                              <1> vgaset:
    48 00000040 B81200              <1> 	mov ax, 12h
    49 00000043 31DB                <1> 	xor bx, bx
    50 00000045 CD10                <1> 	int 10h
    51 00000047 C606[7888]00        <1> 	mov byte [guion], 0
    52 0000004C E80100              <1> 	call getmemorysize;get the memory map after the video is initialized
    53 0000004F C3                  <1> 	ret
    54                              <1> 
    55                              <1> getmemorysize:
    56 00000050 BF[7E88]            <1> 	mov di, memlistbuf
    57 00000053 6631DB              <1> 	xor ebx, ebx
    58                              <1> getmemsizeloop:
    59 00000056 66B820E80000        <1> 	mov eax, 0xE820
    60 0000005C 66BA50414D53        <1> 	mov edx, 0x0534D4150
    61 00000062 66B918000000        <1> 	mov ecx, 24
    62 00000068 CD15                <1> 	int 0x15
    63 0000006A 81C71800            <1> 	add di, 24
    64 0000006E 81FF[BE8A]          <1> 	cmp di, memlistend
    65 00000072 7309                <1> 	jae nomoregetmemsize
    66 00000074 6681FB00000000      <1> 	cmp ebx, 0
    67 0000007B 75D9                <1> 	jne getmemsizeloop
    68                              <1> nomoregetmemsize:
    69 0000007D 81EF[7E88]          <1> 	sub di, memlistbuf
    70 00000081 893E[BE8A]          <1> 	mov [memlistend], di
    71 00000085 C3                  <1> 	ret
    72                              <1> 	
    73                                      %include "source/pmode.asm"
    74                              <1> [BITS 16]
    75                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    76                              <1> ;	16-bit real mode
    77                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    78                              <1> 
    79                              <1> pmode:
    80 00000086 BA9200              <1> 	mov dx, 0x92
    81 00000089 EC                  <1> 	in al, dx	;;A20
    82 0000008A 0C02                <1> 	or al, 2
    83 0000008C EE                  <1> 	out dx, al
    84 0000008D 6631DB              <1> 	xor ebx, ebx
    85 00000090 8CCB                <1> 	mov bx,cs		; EBX=segment
    86 00000092 66C1E304            <1> 	shl ebx,4		;	<< 4
    87 00000096 67668D03            <1> 	lea eax,[ebx]		; EAX=linear address of segment base
    88 0000009A A3[4B03]            <1> 	mov [gdt2 + 2],ax
    89 0000009D A3[5303]            <1> 	mov [gdt3 + 2],ax
    90 000000A0 66C1E810            <1> 	shr eax,16
    91 000000A4 A2[4D03]            <1> 	mov [gdt2 + 4],al
    92 000000A7 A2[5503]            <1> 	mov [gdt3 + 4],al
    93 000000AA 8826[5003]          <1> 	mov [gdt2 + 7],ah
    94 000000AE 8826[5803]          <1> 	mov [gdt3 + 7],ah
    95                              <1> 
    96 000000B2 66B8[BE8A0000]      <1> 	mov eax, initialstack
    97 000000B8 660306[3502]        <1> 	add eax, [newcodecache]
    98 000000BD A3[4303]            <1> 	mov [gdts + 2],ax
    99 000000C0 66C1E810            <1> 	shr eax, 16
   100 000000C4 A2[4503]            <1> 	mov [gdts + 4],al
   101 000000C7 8826[4803]          <1> 	mov [gdts + 7], ah
   102                              <1> 	
   103 000000CB 66A1[3502]          <1> 	mov eax, [newcodecache]
   104 000000CF A3[5B03]            <1> 	mov [gdt4 + 2],ax
   105 000000D2 A3[6303]            <1> 	mov [gdt5 + 2],ax
   106 000000D5 A3[6B03]            <1> 	mov [gdtv8086 + 2], ax
   107 000000D8 A3[7303]            <1> 	mov [gdtv80862 + 2], ax
   108 000000DB 66C1E810            <1> 	shr eax,16
   109 000000DF A2[5D03]            <1> 	mov [gdt4 + 4],al
   110 000000E2 A2[6503]            <1> 	mov [gdt5 + 4],al
   111 000000E5 A2[6D03]            <1> 	mov [gdtv8086 + 4],al
   112 000000E8 A2[7503]            <1> 	mov [gdtv80862 + 4],al
   113 000000EB 8826[6003]          <1> 	mov [gdt4 + 7],ah
   114 000000EF 8826[6803]          <1> 	mov [gdt5 + 7],ah
   115 000000F3 8826[7003]          <1> 	mov [gdtv8086 + 7],ah
   116 000000F7 8826[7803]          <1> 	mov [gdtv80862 + 7],ah
   117                              <1> 	
   118 000000FB 66B800004000        <1> 	mov eax, dosprogloc
   119 00000101 660306[3502]        <1> 	add eax, [newcodecache]
   120 00000106 A3[7B03]            <1> 	mov [gdtdos + 2],ax
   121 00000109 A3[8303]            <1> 	mov [gdtdos2 + 2],ax
   122 0000010C 66C1E810            <1> 	shr eax,16
   123 00000110 A2[7D03]            <1> 	mov [gdtdos + 4],al
   124 00000113 A2[8503]            <1> 	mov [gdtdos2 + 4],al
   125 00000116 8826[8003]          <1> 	mov [gdtdos + 7],ah
   126 0000011A 8826[8803]          <1> 	mov [gdtdos2 + 7],ah
   127                              <1> 	
   128                              <1> ; fix up gdt and idt
   129 0000011E 67668D83[31030000]  <1> 	lea eax,[ebx + gdt]	; EAX=linear address of gdt
   130 00000126 66A3[2703]          <1> 	mov [gdtr + 2],eax
   131 0000012A 67668D83[89030000]  <1> 	lea eax,[ebx + idt]	; EAX=linear address of idt
   132 00000132 66A3[2D03]          <1> 	mov [idtr + 2],eax
   133 00000136 FA                  <1> 	cli
   134 00000137 0F0116[2503]        <1> 	lgdt [gdtr]
   135 0000013C 0F011E[2B03]        <1> 	lidt [idtr]
   136 00000141 6631DB              <1> 	xor ebx, ebx
   137 00000144 8CDB                <1> 	mov bx, ds
   138 00000146 66891E[3102]        <1> 	mov [basecache], ebx
   139 0000014B 0F20C0              <1> 	mov eax,cr0
   140 0000014E 0C01                <1> 	or al,1
   141 00000150 0F22C0              <1> 	mov cr0,eax
   142 00000153 EA[5801]1800        <1> 	jmp SYS_CODE_SEL:do_pm
   143                              <1> [BITS 32]
   144                              <1> do_pm:
   145 00000158 31C0                <1> 	xor eax, eax
   146 0000015A 66B82000            <1> 	mov ax, SYS_DATA_SEL
   147 0000015E 8ED8                <1> 	mov ds, ax
   148 00000160 8EC0                <1> 	mov es, ax
   149 00000162 8EE0                <1> 	mov fs, ax
   150 00000164 66B83000            <1> 	mov ax, NEW_DATA_SEL
   151 00000168 8EE8                <1> 	mov gs, ax
   152                              <1> 	
   153                              <1> copykernel:
   154 0000016A 648B06              <1> 	mov eax, [fs:esi]
   155 0000016D 658906              <1> 	mov [gs:esi], eax
   156 00000170 81C604000000        <1> 	add esi, 4
   157 00000176 81FE[BE8A0000]      <1> 	cmp esi, bsscopy
   158 0000017C 72EC                <1> 	jb copykernel
   159 0000017E EA[85010000]2800    <1> 	jmp NEW_CODE_SEL:done_copy
   160                              <1> 	
   161                              <1> done_copy:
   162 00000185 66B83000            <1> 	mov ax, NEW_DATA_SEL	;;these MUST be setup AFTER the kernel switches places!!!
   163 00000189 8ED8                <1> 	mov ds, ax
   164 0000018B 8EC0                <1> 	mov es, ax
   165 0000018D 8EE0                <1> 	mov fs, ax
   166                              <1> 	;mov ax, STACK_SEL
   167 0000018F 8ED0                <1> 	mov ss, ax
   168 00000191 BC[5E9A0000]        <1> 	mov esp, stackend
   169 00000196 66B82000            <1> 	mov ax, SYS_DATA_SEL
   170 0000019A 8EE8                <1> 	mov gs, ax
   171                              <1> 	
   172 0000019C E8E3530000          <1> 	call initialize	;initialize drivers
   173                              <1> 	
   174 000001A1 A1[35020000]        <1> 	mov eax, [newcodecache]
   175 000001A6 C1E804              <1> 	shr eax, 4
   176 000001A9 A3[31020000]        <1> 	mov [basecache], eax
   177                              <1> 	
   178 000001AE BE[58841100]        <1> 	mov esi, bssend
   179 000001B3 31C0                <1> 	xor eax, eax
   180                              <1> clearkernelbuffers:
   181 000001B5 8906                <1> 	mov [esi], eax
   182 000001B7 81EE04000000        <1> 	sub esi, 4
   183 000001BD 81FE[BE8A0000]      <1> 	cmp esi, bsscopy
   184 000001C3 77F0                <1> 	ja clearkernelbuffers
   185 000001C5 FB                  <1> 	sti
   186                              <1> 
   187                              <1> getmemoryspace:
   188 000001C6 BE[7E880000]        <1> 	mov esi, memlistbuf
   189 000001CB 31FF                <1> 	xor edi, edi
   190 000001CD 668B3D[BE8A0000]    <1> 	mov di, [memlistend]
   191 000001D4 01F7                <1> 	add edi, esi
   192 000001D6 31C0                <1> 	xor eax, eax
   193                              <1> memoryspaceaddition:
   194 000001D8 39FE                <1> 	cmp esi, edi
   195 000001DA 7322                <1> 	jae finishedmemspacecalc
   196 000001DC 81C608000000        <1> 	add esi, 8
   197 000001E2 8B0E                <1> 	mov ecx, [esi]
   198 000001E4 81C608000000        <1> 	add esi, 8
   199 000001EA 8B1E                <1> 	mov ebx, [esi]
   200 000001EC 81C608000000        <1> 	add esi, 8
   201 000001F2 81FB01000000        <1> 	cmp ebx, 1
   202 000001F8 75DE                <1> 	jne memoryspaceaddition
   203 000001FA 01C8                <1> 	add eax, ecx
   204 000001FC EBDA                <1> 	jmp memoryspaceaddition
   205                              <1> finishedmemspacecalc:
   206 000001FE A3[3E020000]        <1> 	mov [memoryspace], eax
   207                              <1> %ifdef gui.included
   208 00000203 803D[78880000]00    <1> 	cmp byte [guion], 0
   209 0000020A 0F841C000000        <1> 	je near normalstartup
   210 00000210 8B1D[31020000]      <1> 	mov ebx, [basecache]
   211 00000216 C1E304              <1> 	shl ebx, 4
   212 00000219 8B3D[264C0000]      <1> 	mov edi, [physbaseptr]
   213 0000021F 29DF                <1> 	sub edi, ebx
   214 00000221 893D[264C0000]      <1> 	mov [physbaseptr], edi
   215 00000227 E99D5D0000          <1> 	jmp guiboot
   216                              <1> %endif
   217                              <1> normalstartup:
   218 0000022C E901260000          <1> 	jmp os
   219                              <1> 	
   220 00000231 00000000            <1> basecache dd 0
   221 00000235 00001000            <1> newcodecache dd 0x100000
   222                              <1> 
   223 00000239 00                  <1> testingcpuspeed db 0
   224 0000023A 00000000            <1> cpuspeedperint dd 0
   225 0000023E 00000000            <1> memoryspace dd 0
   226 00000242 7D0A                <1> pitdiv dw 2685
   227 00000244 00000000            <1> timeseconds dd 0
   228 00000248 00000000            <1> timenanoseconds dd 0
   229 0000024C 2E562200            <1> timeinterval dd 2250286
   230 00000250 00                  <1> soundon db 0
   231 00000251 0000                <1> soundrepititions dw 0
   232 00000253 00000000            <1> soundpos dd 0
   233 00000257 00000000            <1> soundendpos dd 0
   234                              <1> 
   235                              <1> cpuspeedend:
   236 0000025B C605[39020000]00    <1> 	mov byte [testingcpuspeed], 0
   237 00000262 A3[3A020000]        <1> 	mov [cpuspeedperint], eax
   238 00000267 B8[3C430000]        <1> 	mov eax, cpuspeedloopend
   239 0000026C 890424              <1> 	mov [esp], eax
   240 0000026F E9AA000000          <1> 	jmp handled
   241                              <1> 
   242                              <1> ;if using the rtc, the default frequency yeilds a period of 976562.5ns
   243                              <1> ;if using the pit, div=451 is 377981.0004, div=5370 is 4500572.00007ns
   244                              <1> ;div=55483 is 46500044.000006ns, div=2685 is 2250286.00004ns, div=902 is 755962.0008
   245                              <1> 
   246                              <1> pitinterrupt: ;this controls threading
   247 00000274 FA                  <1> 	cli
   248 00000275 803D[39020000]01    <1> 	cmp byte [testingcpuspeed], 1	;check to see if the cpu speed test is running
   249 0000027C 74DD                <1> 	je cpuspeedend
   250                              <1> 		
   251 0000027E E874000000          <1> 	call timekeeper ;this updates the internal time
   252                              <1> 	
   253 00000283 803D[50020000]01    <1> 	cmp byte [soundon], 1
   254 0000028A 0F84694D0000        <1> 	je near PCSpeakerRAW
   255                              <1> timerinterrupt:	;put this into the interrupt handler that controls threading
   256 00000290 803D[97590000]01    <1> 	cmp byte [threadson], 1
   257 00000297 0F848D5C0000        <1> 	je near threadswitch
   258                              <1> keyinterrupt:		;checks for escape, if pressed, it quits the program currently running
   259 0000029D 803D[97590000]00    <1> 	cmp byte [threadson], 0
   260 000002A4 0F8474000000        <1> 	je near handled
   261 000002AA FA                  <1> 	cli
   262 000002AB 60                  <1> 	pusha
   263 000002AC E460                <1> 	in al, 60h
   264 000002AE 3C01                <1> 	cmp al, 1		;escape
   265 000002B0 7405                <1> 	je userint
   266 000002B2 E965000000          <1> 	jmp handled2
   267                              <1> userint:
   268                              <1> 	;UNMASK ALL INTS
   269 000002B7 30C0                <1> 	xor al, al
   270 000002B9 E621                <1> 	out 0x21, al
   271 000002BB 30C0                <1> 	xor al, al
   272 000002BD E6A1                <1> 	out 0xA1, al
   273 000002BF B020                <1> 	mov al, 0x20
   274 000002C1 E6A0                <1> 	out 0xA0, al
   275 000002C3 E620                <1> 	out 0x20, al
   276                              <1> 	;RESET PIT DIVISOR
   277 000002C5 66A1[42020000]      <1> 	mov ax, [pitdiv]
   278 000002CB E640                <1> 	out 0x40, al
   279 000002CD 66C1C008            <1> 	rol ax, 8
   280 000002D1 E640                <1> 	out 0x40, al
   281                              <1> 	;RESET PIC
   282 000002D3 B020                <1> 	mov al, 0x20
   283 000002D5 E620                <1> 	out 0x20, al
   284 000002D7 61                  <1> 	popa
   285 000002D8 FB                  <1> 	sti
   286 000002D9 BC[5E9A0000]        <1> 	mov esp, stackend ;reset stack
   287 000002DE E901270000          <1> 	jmp nwcmd
   288                              <1> %ifdef rtl8139.included
   289                              <1> rtl8139.irq:
   290                              <1> 	cli
   291                              <1> 	pusha
   292                              <1> 	mov edx, [basenicaddr]
   293                              <1> 	add edx, rtl8139.ISR
   294                              <1> 	xor eax, eax
   295                              <1> 	in ax, dx
   296                              <1> 	mov ecx, eax
   297                              <1> 	call showhex
   298                              <1> 	jmp handled2
   299                              <1> %endif
   300                              <1> %ifdef sound.included
   301                              <1> sblaster.irq:
   302 000002E3 FA                  <1> 	cli
   303 000002E4 60                  <1> 	pusha
   304 000002E5 803D[45520000]01    <1> 	cmp byte [SoundBlaster], 1
   305 000002EC 0F84D44D0000        <1> 	je near sblastercont
   306 000002F2 E925000000          <1> 	jmp handled2
   307                              <1> %endif
   308                              <1> 	
   309                              <1> timekeeper:
   310 000002F7 50                  <1> 	push eax
   311 000002F8 A1[48020000]        <1> 	mov eax, [timenanoseconds]
   312 000002FD 0305[4C020000]      <1> 	add eax, [timeinterval]
   313 00000303 3D00CA9A3B          <1> 	cmp eax, 1000000000
   314 00000308 720B                <1> 	jb nonanosecondrollover
   315 0000030A FF05[44020000]      <1> 	inc dword [timeseconds]
   316 00000310 2D00CA9A3B          <1> 	sub eax, 1000000000
   317                              <1> nonanosecondrollover:
   318 00000315 A3[48020000]        <1> 	mov [timenanoseconds], eax
   319 0000031A 58                  <1> 	pop eax
   320 0000031B C3                  <1> 	ret
   321                              <1> 	
   322                              <1> handled2:
   323 0000031C 61                  <1> 	popa
   324                              <1> handled3:
   325 0000031D FB                  <1> 	sti
   326                              <1> handled:
   327 0000031E 50                  <1> 	push eax
   328 0000031F B020                <1> 	mov al, 0x20
   329 00000321 E620                <1> 	out 0x20, al
   330 00000323 58                  <1> 	pop eax
   331 00000324 CF                  <1> 	iret
   332                              <1> [BITS 16]
   333                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   334                              <1> ;	16-bit limit/32-bit linear base address of GDT and IDT
   335                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   336 00000325 5700                <1> gdtr:	dw gdt_end - gdt - 1	; GDT limit
   337 00000327 00000000            <1> 	dd 0    		; filled with linear, physical address of GDT
   338                              <1> 
   339 0000032B FF07                <1> idtr:	dw idt_end - idt - 1	; IDT limit
   340 0000032D 00000000            <1> 	dd 0			; filled with linear, physical address of IDT
   341                              <1> 
   342                              <1> 
   343 00000331 0000                <1> gdt:	dw 0			; limit 15:0
   344 00000333 0000                <1> 	dw 0			; base 15:0
   345 00000335 00                  <1> 	db 0			; base 23:16
   346 00000336 00                  <1> 	db 0			; type
   347 00000337 00                  <1> 	db 0			; limit 19:16, flags
   348 00000338 00                  <1> 	db 0			; base 31:24
   349                              <1> ; linear data segment descriptor
   350                              <1> LINEAR_SEL	equ	$-gdt
   351 00000339 FFFF                <1> 	dw 0xFFFF		; limit 0xFFFFF
   352 0000033B 0000                <1> 	dw 0			; base for this one is always 0
   353 0000033D 00                  <1> 	db 0
   354 0000033E 92                  <1> 	db 0x92			; present, ring 0, data, expand-up, writable
   355 0000033F CF                  <1> 	db 0xCF			; page-granular, 32-bit
   356 00000340 00                  <1> 	db 0
   357                              <1> STACK_SEL	equ $-gdt
   358 00000341 0200                <1> gdts:	dw 2;(stackend)/4096
   359 00000343 0000                <1> 	dw 0
   360 00000345 00                  <1> 	db 0
   361 00000346 92                  <1> 	db 0x92
   362 00000347 CF                  <1> 	db 0xCF
   363 00000348 00                  <1> 	db 0
   364                              <1> ; code segment descriptor
   365                              <1> SYS_CODE_SEL	equ	$-gdt
   366 00000349 FFFF                <1> gdt2:	dw 0xFFFF
   367 0000034B 0000                <1> 	dw 0			; (base gets set above)
   368 0000034D 00                  <1> 	db 0
   369 0000034E 9A                  <1> 	db 0x9A			; present, ring 0, code, non-conforming, readable
   370 0000034F CF                  <1> 	db 0xCF
   371 00000350 00                  <1> 	db 0
   372                              <1> ; data segment descriptor
   373                              <1> SYS_DATA_SEL	equ	$-gdt
   374 00000351 FFFF                <1> gdt3:	dw 0xFFFF
   375 00000353 0000                <1> 	dw 0			; (base gets set above)
   376 00000355 00                  <1> 	db 0
   377 00000356 92                  <1> 	db 0x92			; present, ring 0, data, expand-up, writable
   378 00000357 CF                  <1> 	db 0xCF
   379 00000358 00                  <1> 	db 0
   380                              <1> NEW_CODE_SEL	equ	$-gdt
   381 00000359 FFFF                <1> gdt4:	dw 0xFFFF
   382 0000035B 0000                <1> 	dw 0			; (base gets set above)
   383 0000035D 00                  <1> 	db 0
   384 0000035E 9A                  <1> 	db 0x9A			; present, ring 0, code, non-conforming, readable
   385 0000035F CF                  <1> 	db 0xCF
   386 00000360 00                  <1> 	db 0
   387                              <1> ; data segment descriptor
   388                              <1> NEW_DATA_SEL	equ	$-gdt
   389 00000361 FFFF                <1> gdt5:	dw 0xFFFF
   390 00000363 0000                <1> 	dw 0			; (base gets set above)
   391 00000365 00                  <1> 	db 0
   392 00000366 92                  <1> 	db 0x92			; present, ring 0, data, expand-up, writable
   393 00000367 CF                  <1> 	db 0xCF
   394 00000368 00                  <1> 	db 0
   395                              <1> V8086_CODE_SEL	equ $-gdt
   396 00000369 FFFF                <1> gdtv8086: dw 0xFFFF
   397 0000036B 0000                <1> 	dw 0
   398 0000036D 00                  <1> 	db 0
   399 0000036E 9A                  <1> 	db 0x9A
   400 0000036F 8F                  <1> 	db 0x8F
   401 00000370 00                  <1> 	db 0
   402                              <1> V8086_DATA_SEL	equ $-gdt
   403 00000371 FFFF                <1> gdtv80862: dw 0xFFFF
   404 00000373 0000                <1> 	dw 0
   405 00000375 00                  <1> 	db 0
   406 00000376 92                  <1> 	db 0x92
   407 00000377 8F                  <1> 	db 0x8F
   408 00000378 00                  <1> 	db 0
   409                              <1> DOS_CODE_SEL	equ $-gdt	;this gives dos programs complete access to one megabyte at the beginning of memory
   410 00000379 0001                <1> gdtdos:	dw 256	;give it 1 MB
   411 0000037B 0000                <1> 	dw 0
   412 0000037D 00                  <1> 	db 0
   413 0000037E 9A                  <1> 	db 0x9A
   414 0000037F 8F                  <1> 	db 0x8F ;16 bit
   415 00000380 00                  <1> 	db 0
   416                              <1> DOS_DATA_SEL 	equ $-gdt
   417 00000381 0001                <1> gdtdos2:	dw 256
   418 00000383 0000                <1> 	dw 0
   419 00000385 00                  <1> 	db 0
   420 00000386 92                  <1> 	db 0x92
   421 00000387 8F                  <1> 	db 0x8F ;16 bit
   422 00000388 00                  <1> 	db 0
   423                              <1> gdt_end:
   424                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   425                              <1> ;	interrupt descriptor table (IDT)
   426                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   427                              <1> ; 32 reserved interrupts:
   428                              <1> idt:	
   429                              <1> %assign i 0
   430                              <1> %rep    32
   431                              <1> 		dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   432                              <1> %assign i i+1
   433                              <1> %endrep
   434 00000389 [AA0C]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   435                              <2> %assign i i+1
   436 00000391 [B70C]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   437                              <2> %assign i i+1
   438 00000399 [C40C]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   439                              <2> %assign i i+1
   440 000003A1 [D10C]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   441                              <2> %assign i i+1
   442 000003A9 [DE0C]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   443                              <2> %assign i i+1
   444 000003B1 [EB0C]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   445                              <2> %assign i i+1
   446 000003B9 [F80C]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   447                              <2> %assign i i+1
   448 000003C1 [050D]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   449                              <2> %assign i i+1
   450 000003C9 [120D]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   451                              <2> %assign i i+1
   452 000003D1 [1F0D]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   453                              <2> %assign i i+1
   454 000003D9 [2C0D]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   455                              <2> %assign i i+1
   456 000003E1 [390D]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   457                              <2> %assign i i+1
   458 000003E9 [460D]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   459                              <2> %assign i i+1
   460 000003F1 [530D]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   461                              <2> %assign i i+1
   462 000003F9 [600D]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   463                              <2> %assign i i+1
   464 00000401 [6D0D]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   465                              <2> %assign i i+1
   466 00000409 [7A0D]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   467                              <2> %assign i i+1
   468 00000411 [870D]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   469                              <2> %assign i i+1
   470 00000419 [940D]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   471                              <2> %assign i i+1
   472 00000421 [A10D]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   473                              <2> %assign i i+1
   474 00000429 [AE0D]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   475                              <2> %assign i i+1
   476 00000431 [BB0D]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   477                              <2> %assign i i+1
   478 00000439 [C80D]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   479                              <2> %assign i i+1
   480 00000441 [D50D]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   481                              <2> %assign i i+1
   482 00000449 [E20D]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   483                              <2> %assign i i+1
   484 00000451 [EF0D]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   485                              <2> %assign i i+1
   486 00000459 [FC0D]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   487                              <2> %assign i i+1
   488 00000461 [090E]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   489                              <2> %assign i i+1
   490 00000469 [160E]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   491                              <2> %assign i i+1
   492 00000471 [230E]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   493                              <2> %assign i i+1
   494 00000479 [300E]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   495                              <2> %assign i i+1
   496 00000481 [3D0E]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   497                              <2> %assign i i+1
   498 00000489 [0027]2800008E0000  <1> 		dw int20h,NEW_CODE_SEL,0x8E00,0
   499 00000491 [0427]2800008E0000  <1> 		dw int21h,NEW_CODE_SEL,0x8E00,0
   500                              <1> %assign i 0x22
   501                              <1> %rep 14
   502                              <1> 		dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   503                              <1> %assign i +1
   504                              <1> %endrep
   505 00000499 [640E]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   506                              <2> %assign i +1
   507 000004A1 [B70C]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   508                              <2> %assign i +1
   509 000004A9 [B70C]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   510                              <2> %assign i +1
   511 000004B1 [B70C]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   512                              <2> %assign i +1
   513 000004B9 [B70C]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   514                              <2> %assign i +1
   515 000004C1 [B70C]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   516                              <2> %assign i +1
   517 000004C9 [B70C]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   518                              <2> %assign i +1
   519 000004D1 [B70C]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   520                              <2> %assign i +1
   521 000004D9 [B70C]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   522                              <2> %assign i +1
   523 000004E1 [B70C]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   524                              <2> %assign i +1
   525 000004E9 [B70C]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   526                              <2> %assign i +1
   527 000004F1 [B70C]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   528                              <2> %assign i +1
   529 000004F9 [B70C]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   530                              <2> %assign i +1
   531 00000501 [B70C]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   532                              <2> %assign i +1
   533                              <1> ;INT 30h for os use and 3rd party use:
   534 00000509 [B11D]2800008E0000  <1> 		dw newints,NEW_CODE_SEL,0x8E00,0
   535                              <1> %assign i 0x31
   536                              <1> %rep 15
   537                              <1> 		dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   538                              <1> %assign i +1
   539                              <1> %endrep
   540 00000511 [270F]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   541                              <2> %assign i +1
   542 00000519 [B70C]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   543                              <2> %assign i +1
   544 00000521 [B70C]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   545                              <2> %assign i +1
   546 00000529 [B70C]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   547                              <2> %assign i +1
   548 00000531 [B70C]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   549                              <2> %assign i +1
   550 00000539 [B70C]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   551                              <2> %assign i +1
   552 00000541 [B70C]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   553                              <2> %assign i +1
   554 00000549 [B70C]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   555                              <2> %assign i +1
   556 00000551 [B70C]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   557                              <2> %assign i +1
   558 00000559 [B70C]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   559                              <2> %assign i +1
   560 00000561 [B70C]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   561                              <2> %assign i +1
   562 00000569 [B70C]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   563                              <2> %assign i +1
   564 00000571 [B70C]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   565                              <2> %assign i +1
   566 00000579 [B70C]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   567                              <2> %assign i +1
   568 00000581 [B70C]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   569                              <2> %assign i +1
   570                              <1> ;and here we are at 0x40
   571                              <1> ;here are all the irq's
   572 00000589 [7402]2800008E0000  <1> 		dw pitinterrupt,NEW_CODE_SEL,0x8E00,0 ;IRQ 0 = PIT
   573 00000591 [1E03]2800008E0000  <1> 		dw handled,NEW_CODE_SEL,0x8E00,0 ;IRQ 1 = keyboard
   574 00000599 [1E03]2800008E0000  <1> 		dw handled,NEW_CODE_SEL,0x8E00,0 ;IRQ 2
   575 000005A1 [1E03]2800008E0000  <1> 		dw handled,NEW_CODE_SEL,0x8E00,0 ;IRQ 3
   576 000005A9 [1E03]2800008E0000  <1> 		dw handled,NEW_CODE_SEL,0x8E00,0 ;IRQ 4
   577                              <1> 	%ifdef sound.included
   578 000005B1 [E302]2800008E0000  <1> 		dw sblaster.irq,NEW_CODE_SEL,0x8E00,0 ;IRQ 5 = default SoundBlaster
   579                              <1> 	%else
   580                              <1> 		dw handled,NEW_CODE_SEL,0x8E00,0 ;IRQ 5
   581                              <1> 	%endif
   582 000005B9 [1E03]2800008E0000  <1> 		dw handled,NEW_CODE_SEL,0x8E00,0 ;IRQ 6
   583 000005C1 [1E03]2800008E0000  <1> 		dw handled,NEW_CODE_SEL,0x8E00,0 ;IRQ 7
   584 000005C9 [1E03]2800008E0000  <1> 		dw handled,NEW_CODE_SEL,0x8E00,0 ;IRQ 8 = RTC
   585 000005D1 [1E03]2800008E0000  <1> 		dw handled,NEW_CODE_SEL,0x8E00,0 ;IRQ 9
   586 000005D9 [1E03]2800008E0000  <1> 		dw handled,NEW_CODE_SEL,0x8E00,0 ;IRQ 10
   587                              <1> 	%ifdef rtl8139.included
   588                              <1> 		dw rtl8139.irq,NEW_CODE_SEL,0x8E00,0 ;IRQ 11 = default RTL8139
   589                              <1> 	%else
   590 000005E1 [1E03]2800008E0000  <1> 		dw handled,NEW_CODE_SEL,0x8E00,0 ;IRQ 11
   591                              <1> 	%endif
   592 000005E9 [1E03]2800008E0000  <1> 		dw handled,NEW_CODE_SEL,0x8E00,0 ;IRQ 12
   593 000005F1 [1E03]2800008E0000  <1> 		dw handled,NEW_CODE_SEL,0x8E00,0 ;IRQ 13
   594 000005F9 [1E03]2800008E0000  <1> 		dw handled,NEW_CODE_SEL,0x8E00,0 ;IRQ 14
   595 00000601 [1E03]2800008E0000  <1> 		dw handled,NEW_CODE_SEL,0x8E00,0 ;IRQ 15
   596                              <1> ;This brings me up to 0x50
   597                              <1> %assign i 0x50
   598                              <1> %rep 176
   599                              <1> 		dw handled, NEW_CODE_SEL,0x8E00,0
   600                              <1> 		;dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
   601                              <1> %assign i +1
   602                              <1> %endrep
   603 00000609 [1E03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   604                              <2> 
   605                              <2> %assign i +1
   606 00000611 [1E03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   607                              <2> 
   608                              <2> %assign i +1
   609 00000619 [1E03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   610                              <2> 
   611                              <2> %assign i +1
   612 00000621 [1E03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   613                              <2> 
   614                              <2> %assign i +1
   615 00000629 [1E03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   616                              <2> 
   617                              <2> %assign i +1
   618 00000631 [1E03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   619                              <2> 
   620                              <2> %assign i +1
   621 00000639 [1E03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   622                              <2> 
   623                              <2> %assign i +1
   624 00000641 [1E03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   625                              <2> 
   626                              <2> %assign i +1
   627 00000649 [1E03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   628                              <2> 
   629                              <2> %assign i +1
   630 00000651 [1E03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   631                              <2> 
   632                              <2> %assign i +1
   633 00000659 [1E03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   634                              <2> 
   635                              <2> %assign i +1
   636 00000661 [1E03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   637                              <2> 
   638                              <2> %assign i +1
   639 00000669 [1E03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   640                              <2> 
   641                              <2> %assign i +1
   642 00000671 [1E03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   643                              <2> 
   644                              <2> %assign i +1
   645 00000679 [1E03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   646                              <2> 
   647                              <2> %assign i +1
   648 00000681 [1E03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   649                              <2> 
   650                              <2> %assign i +1
   651 00000689 [1E03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   652                              <2> 
   653                              <2> %assign i +1
   654 00000691 [1E03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   655                              <2> 
   656                              <2> %assign i +1
   657 00000699 [1E03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   658                              <2> 
   659                              <2> %assign i +1
   660 000006A1 [1E03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   661                              <2> 
   662                              <2> %assign i +1
   663 000006A9 [1E03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   664                              <2> 
   665                              <2> %assign i +1
   666 000006B1 [1E03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   667                              <2> 
   668                              <2> %assign i +1
   669 000006B9 [1E03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   670                              <2> 
   671                              <2> %assign i +1
   672 000006C1 [1E03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   673                              <2> 
   674                              <2> %assign i +1
   675 000006C9 [1E03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   676                              <2> 
   677                              <2> %assign i +1
   678 000006D1 [1E03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   679                              <2> 
   680                              <2> %assign i +1
   681 000006D9 [1E03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   682                              <2> 
   683                              <2> %assign i +1
   684 000006E1 [1E03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   685                              <2> 
   686                              <2> %assign i +1
   687 000006E9 [1E03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   688                              <2> 
   689                              <2> %assign i +1
   690 000006F1 [1E03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   691                              <2> 
   692                              <2> %assign i +1
   693 000006F9 [1E03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   694                              <2> 
   695                              <2> %assign i +1
   696 00000701 [1E03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   697                              <2> 
   698                              <2> %assign i +1
   699 00000709 [1E03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   700                              <2> 
   701                              <2> %assign i +1
   702 00000711 [1E03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   703                              <2> 
   704                              <2> %assign i +1
   705 00000719 [1E03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   706                              <2> 
   707                              <2> %assign i +1
   708 00000721 [1E03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   709                              <2> 
   710                              <2> %assign i +1
   711 00000729 [1E03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   712                              <2> 
   713                              <2> %assign i +1
   714 00000731 [1E03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   715                              <2> 
   716                              <2> %assign i +1
   717 00000739 [1E03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   718                              <2> 
   719                              <2> %assign i +1
   720 00000741 [1E03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   721                              <2> 
   722                              <2> %assign i +1
   723 00000749 [1E03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   724                              <2> 
   725                              <2> %assign i +1
   726 00000751 [1E03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   727                              <2> 
   728                              <2> %assign i +1
   729 00000759 [1E03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   730                              <2> 
   731                              <2> %assign i +1
   732 00000761 [1E03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   733                              <2> 
   734                              <2> %assign i +1
   735 00000769 [1E03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   736                              <2> 
   737                              <2> %assign i +1
   738 00000771 [1E03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   739                              <2> 
   740                              <2> %assign i +1
   741 00000779 [1E03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   742                              <2> 
   743                              <2> %assign i +1
   744 00000781 [1E03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   745                              <2> 
   746                              <2> %assign i +1
   747 00000789 [1E03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   748                              <2> 
   749                              <2> %assign i +1
   750 00000791 [1E03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   751                              <2> 
   752                              <2> %assign i +1
   753 00000799 [1E03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   754                              <2> 
   755                              <2> %assign i +1
   756 000007A1 [1E03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   757                              <2> 
   758                              <2> %assign i +1
   759 000007A9 [1E03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   760                              <2> 
   761                              <2> %assign i +1
   762 000007B1 [1E03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   763                              <2> 
   764                              <2> %assign i +1
   765 000007B9 [1E03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   766                              <2> 
   767                              <2> %assign i +1
   768 000007C1 [1E03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   769                              <2> 
   770                              <2> %assign i +1
   771 000007C9 [1E03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   772                              <2> 
   773                              <2> %assign i +1
   774 000007D1 [1E03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   775                              <2> 
   776                              <2> %assign i +1
   777 000007D9 [1E03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   778                              <2> 
   779                              <2> %assign i +1
   780 000007E1 [1E03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   781                              <2> 
   782                              <2> %assign i +1
   783 000007E9 [1E03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   784                              <2> 
   785                              <2> %assign i +1
   786 000007F1 [1E03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   787                              <2> 
   788                              <2> %assign i +1
   789 000007F9 [1E03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   790                              <2> 
   791                              <2> %assign i +1
   792 00000801 [1E03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   793                              <2> 
   794                              <2> %assign i +1
   795 00000809 [1E03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   796                              <2> 
   797                              <2> %assign i +1
   798 00000811 [1E03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   799                              <2> 
   800                              <2> %assign i +1
   801 00000819 [1E03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   802                              <2> 
   803                              <2> %assign i +1
   804 00000821 [1E03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   805                              <2> 
   806                              <2> %assign i +1
   807 00000829 [1E03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   808                              <2> 
   809                              <2> %assign i +1
   810 00000831 [1E03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   811                              <2> 
   812                              <2> %assign i +1
   813 00000839 [1E03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   814                              <2> 
   815                              <2> %assign i +1
   816 00000841 [1E03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   817                              <2> 
   818                              <2> %assign i +1
   819 00000849 [1E03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   820                              <2> 
   821                              <2> %assign i +1
   822 00000851 [1E03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   823                              <2> 
   824                              <2> %assign i +1
   825 00000859 [1E03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   826                              <2> 
   827                              <2> %assign i +1
   828 00000861 [1E03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   829                              <2> 
   830                              <2> %assign i +1
   831 00000869 [1E03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   832                              <2> 
   833                              <2> %assign i +1
   834 00000871 [1E03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   835                              <2> 
   836                              <2> %assign i +1
   837 00000879 [1E03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   838                              <2> 
   839                              <2> %assign i +1
   840 00000881 [1E03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   841                              <2> 
   842                              <2> %assign i +1
   843 00000889 [1E03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   844                              <2> 
   845                              <2> %assign i +1
   846 00000891 [1E03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   847                              <2> 
   848                              <2> %assign i +1
   849 00000899 [1E03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   850                              <2> 
   851                              <2> %assign i +1
   852 000008A1 [1E03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   853                              <2> 
   854                              <2> %assign i +1
   855 000008A9 [1E03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   856                              <2> 
   857                              <2> %assign i +1
   858 000008B1 [1E03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   859                              <2> 
   860                              <2> %assign i +1
   861 000008B9 [1E03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   862                              <2> 
   863                              <2> %assign i +1
   864 000008C1 [1E03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   865                              <2> 
   866                              <2> %assign i +1
   867 000008C9 [1E03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   868                              <2> 
   869                              <2> %assign i +1
   870 000008D1 [1E03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   871                              <2> 
   872                              <2> %assign i +1
   873 000008D9 [1E03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   874                              <2> 
   875                              <2> %assign i +1
   876 000008E1 [1E03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   877                              <2> 
   878                              <2> %assign i +1
   879 000008E9 [1E03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   880                              <2> 
   881                              <2> %assign i +1
   882 000008F1 [1E03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   883                              <2> 
   884                              <2> %assign i +1
   885 000008F9 [1E03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   886                              <2> 
   887                              <2> %assign i +1
   888 00000901 [1E03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   889                              <2> 
   890                              <2> %assign i +1
   891 00000909 [1E03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   892                              <2> 
   893                              <2> %assign i +1
   894 00000911 [1E03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   895                              <2> 
   896                              <2> %assign i +1
   897 00000919 [1E03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   898                              <2> 
   899                              <2> %assign i +1
   900 00000921 [1E03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   901                              <2> 
   902                              <2> %assign i +1
   903 00000929 [1E03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   904                              <2> 
   905                              <2> %assign i +1
   906 00000931 [1E03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   907                              <2> 
   908                              <2> %assign i +1
   909 00000939 [1E03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   910                              <2> 
   911                              <2> %assign i +1
   912 00000941 [1E03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   913                              <2> 
   914                              <2> %assign i +1
   915 00000949 [1E03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   916                              <2> 
   917                              <2> %assign i +1
   918 00000951 [1E03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   919                              <2> 
   920                              <2> %assign i +1
   921 00000959 [1E03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   922                              <2> 
   923                              <2> %assign i +1
   924 00000961 [1E03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   925                              <2> 
   926                              <2> %assign i +1
   927 00000969 [1E03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   928                              <2> 
   929                              <2> %assign i +1
   930 00000971 [1E03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   931                              <2> 
   932                              <2> %assign i +1
   933 00000979 [1E03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   934                              <2> 
   935                              <2> %assign i +1
   936 00000981 [1E03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   937                              <2> 
   938                              <2> %assign i +1
   939 00000989 [1E03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   940                              <2> 
   941                              <2> %assign i +1
   942 00000991 [1E03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   943                              <2> 
   944                              <2> %assign i +1
   945 00000999 [1E03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   946                              <2> 
   947                              <2> %assign i +1
   948 000009A1 [1E03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   949                              <2> 
   950                              <2> %assign i +1
   951 000009A9 [1E03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   952                              <2> 
   953                              <2> %assign i +1
   954 000009B1 [1E03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   955                              <2> 
   956                              <2> %assign i +1
   957 000009B9 [1E03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   958                              <2> 
   959                              <2> %assign i +1
   960 000009C1 [1E03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   961                              <2> 
   962                              <2> %assign i +1
   963 000009C9 [1E03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   964                              <2> 
   965                              <2> %assign i +1
   966 000009D1 [1E03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   967                              <2> 
   968                              <2> %assign i +1
   969 000009D9 [1E03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   970                              <2> 
   971                              <2> %assign i +1
   972 000009E1 [1E03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   973                              <2> 
   974                              <2> %assign i +1
   975 000009E9 [1E03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   976                              <2> 
   977                              <2> %assign i +1
   978 000009F1 [1E03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   979                              <2> 
   980                              <2> %assign i +1
   981 000009F9 [1E03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   982                              <2> 
   983                              <2> %assign i +1
   984 00000A01 [1E03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   985                              <2> 
   986                              <2> %assign i +1
   987 00000A09 [1E03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   988                              <2> 
   989                              <2> %assign i +1
   990 00000A11 [1E03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   991                              <2> 
   992                              <2> %assign i +1
   993 00000A19 [1E03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   994                              <2> 
   995                              <2> %assign i +1
   996 00000A21 [1E03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   997                              <2> 
   998                              <2> %assign i +1
   999 00000A29 [1E03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1000                              <2> 
  1001                              <2> %assign i +1
  1002 00000A31 [1E03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1003                              <2> 
  1004                              <2> %assign i +1
  1005 00000A39 [1E03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1006                              <2> 
  1007                              <2> %assign i +1
  1008 00000A41 [1E03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1009                              <2> 
  1010                              <2> %assign i +1
  1011 00000A49 [1E03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1012                              <2> 
  1013                              <2> %assign i +1
  1014 00000A51 [1E03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1015                              <2> 
  1016                              <2> %assign i +1
  1017 00000A59 [1E03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1018                              <2> 
  1019                              <2> %assign i +1
  1020 00000A61 [1E03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1021                              <2> 
  1022                              <2> %assign i +1
  1023 00000A69 [1E03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1024                              <2> 
  1025                              <2> %assign i +1
  1026 00000A71 [1E03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1027                              <2> 
  1028                              <2> %assign i +1
  1029 00000A79 [1E03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1030                              <2> 
  1031                              <2> %assign i +1
  1032 00000A81 [1E03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1033                              <2> 
  1034                              <2> %assign i +1
  1035 00000A89 [1E03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1036                              <2> 
  1037                              <2> %assign i +1
  1038 00000A91 [1E03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1039                              <2> 
  1040                              <2> %assign i +1
  1041 00000A99 [1E03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1042                              <2> 
  1043                              <2> %assign i +1
  1044 00000AA1 [1E03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1045                              <2> 
  1046                              <2> %assign i +1
  1047 00000AA9 [1E03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1048                              <2> 
  1049                              <2> %assign i +1
  1050 00000AB1 [1E03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1051                              <2> 
  1052                              <2> %assign i +1
  1053 00000AB9 [1E03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1054                              <2> 
  1055                              <2> %assign i +1
  1056 00000AC1 [1E03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1057                              <2> 
  1058                              <2> %assign i +1
  1059 00000AC9 [1E03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1060                              <2> 
  1061                              <2> %assign i +1
  1062 00000AD1 [1E03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1063                              <2> 
  1064                              <2> %assign i +1
  1065 00000AD9 [1E03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1066                              <2> 
  1067                              <2> %assign i +1
  1068 00000AE1 [1E03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1069                              <2> 
  1070                              <2> %assign i +1
  1071 00000AE9 [1E03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1072                              <2> 
  1073                              <2> %assign i +1
  1074 00000AF1 [1E03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1075                              <2> 
  1076                              <2> %assign i +1
  1077 00000AF9 [1E03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1078                              <2> 
  1079                              <2> %assign i +1
  1080 00000B01 [1E03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1081                              <2> 
  1082                              <2> %assign i +1
  1083 00000B09 [1E03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1084                              <2> 
  1085                              <2> %assign i +1
  1086 00000B11 [1E03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1087                              <2> 
  1088                              <2> %assign i +1
  1089 00000B19 [1E03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1090                              <2> 
  1091                              <2> %assign i +1
  1092 00000B21 [1E03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1093                              <2> 
  1094                              <2> %assign i +1
  1095 00000B29 [1E03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1096                              <2> 
  1097                              <2> %assign i +1
  1098 00000B31 [1E03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1099                              <2> 
  1100                              <2> %assign i +1
  1101 00000B39 [1E03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1102                              <2> 
  1103                              <2> %assign i +1
  1104 00000B41 [1E03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1105                              <2> 
  1106                              <2> %assign i +1
  1107 00000B49 [1E03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1108                              <2> 
  1109                              <2> %assign i +1
  1110 00000B51 [1E03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1111                              <2> 
  1112                              <2> %assign i +1
  1113 00000B59 [1E03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1114                              <2> 
  1115                              <2> %assign i +1
  1116 00000B61 [1E03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1117                              <2> 
  1118                              <2> %assign i +1
  1119 00000B69 [1E03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1120                              <2> 
  1121                              <2> %assign i +1
  1122 00000B71 [1E03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1123                              <2> 
  1124                              <2> %assign i +1
  1125 00000B79 [1E03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1126                              <2> 
  1127                              <2> %assign i +1
  1128 00000B81 [1E03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1129                              <2> 
  1130                              <2> %assign i +1
  1131                              <1> idt_end:
  1132                              <1> [BITS 32]
  1133                                  	%include "source/realmode.asm"
  1134                              <1> realmode:	;make sure the real mode program's address is in realmodeptr 
  1135                              <1> 			;and the return address is in realmodereturn
  1136 00000B89 FA                  <1> 	cli
  1137 00000B8A A3[9C0C0000]        <1> 	mov [realmodeeax], eax
  1138 00000B8F 891D[980C0000]      <1> 	mov [realmodeebx], ebx
  1139 00000B95 8925[8A0C0000]      <1> 	mov [pmodeesp], esp
  1140                              <1> 
  1141 00000B9B BB[940C0000]        <1> 	mov ebx, cr0old
  1142                              <1> rmcopytofirstmbyte:
  1143 00000BA0 8B03                <1> 	mov eax, [ebx]
  1144 00000BA2 658903              <1> 	mov [gs:ebx], eax
  1145 00000BA5 81C304000000        <1> 	add ebx, 4
  1146 00000BAB 81FB[A40C0000]      <1> 	cmp ebx, realmodeptr
  1147 00000BB1 76ED                <1> 	jbe rmcopytofirstmbyte
  1148                              <1> 
  1149 00000BB3 EA[BA0B0000]3800    <1> 	jmp V8086_CODE_SEL:protected16bit
  1150                              <1> 
  1151                              <1> [BITS 16]
  1152                              <1> protected16bit:
  1153 00000BBA B84000              <1> 	mov ax, V8086_DATA_SEL
  1154 00000BBD 8ED8                <1> 	mov ds, ax
  1155 00000BBF 8EC0                <1> 	mov es, ax
  1156 00000BC1 8EE0                <1> 	mov fs, ax
  1157 00000BC3 8EE8                <1> 	mov gs, ax
  1158 00000BC5 8ED0                <1> 	mov ss, ax
  1159 00000BC7 66BC[5E9A0000]      <1> 	mov esp, stackend
  1160 00000BCD 0F20C0              <1> 	mov eax, cr0
  1161 00000BD0 66A3[940C]          <1> 	mov [cr0old], eax
  1162 00000BD4 6625FEFFFF7F        <1> 	and eax, 0x7FFFFFFE
  1163 00000BDA 0F22C0              <1> 	mov cr0, eax	;now in real mode
  1164 00000BDD EA[E20B]0010        <1> 	jmp 0x1000:inrealmode
  1165                              <1> 
  1166                              <1> inrealmode:
  1167 00000BE2 8CC8                <1> 	mov ax, cs
  1168 00000BE4 8ED8                <1> 	mov ds, ax
  1169 00000BE6 8EC0                <1> 	mov es, ax
  1170 00000BE8 8EE0                <1> 	mov fs, ax
  1171 00000BEA 8EE8                <1> 	mov gs, ax
  1172 00000BEC 8ED0                <1> 	mov ss, ax
  1173 00000BEE BC[5E9A]            <1> 	mov sp, stackend ;because this is at 0x1000: and not 0x10000: it works
  1174                              <1> 	
  1175 00000BF1 B011                <1> 	mov al, 0x11
  1176 00000BF3 E620                <1> 	out 0x20, al
  1177 00000BF5 E6A0                <1> 	out 0xA0, al
  1178 00000BF7 B008                <1> 	mov al, 0x8		;interrupt for master
  1179 00000BF9 E621                <1> 	out 0x21, al
  1180 00000BFB B070                <1> 	mov al, 0x70	;interrupt for slave
  1181 00000BFD E6A1                <1> 	out 0xA1, al
  1182 00000BFF B004                <1> 	mov al, 4
  1183 00000C01 E621                <1> 	out 0x21, al
  1184 00000C03 B002                <1> 	mov al, 2
  1185 00000C05 E6A1                <1> 	out 0xA1, al
  1186 00000C07 B001                <1> 	mov al, 0x1
  1187 00000C09 E621                <1> 	out 0x21, al
  1188 00000C0B B001                <1> 	mov al, 0x1
  1189 00000C0D E6A1                <1> 	out 0xA1, al
  1190                              <1> 	
  1191 00000C0F 0F011E[8E0C]        <1> 	lidt [idt_real]
  1192 00000C14 FB                  <1> 	sti
  1193                              <1> 
  1194 00000C15 66A1[9C0C]          <1> 	mov eax, [realmodeeax]
  1195 00000C19 668B1E[980C]        <1> 	mov ebx, [realmodeebx]
  1196                              <1> 
  1197 00000C1E FF16[A40C]          <1> 	call word [realmodeptr] ;call the real mode program here
  1198                              <1> 
  1199 00000C22 66A3[9C0C]          <1> 	mov [realmodeeax], eax
  1200 00000C26 66891E[980C]        <1> 	mov [realmodeebx], ebx
  1201                              <1> 
  1202 00000C2B FA                  <1> 	cli
  1203 00000C2C 0F0116[2503]        <1> 	lgdt [gdtr]
  1204 00000C31 0F011E[2B03]        <1> 	lidt [idtr]
  1205 00000C36 0F20C0              <1> 	mov eax, cr0
  1206 00000C39 0C01                <1> 	or al, 1
  1207 00000C3B 0F22C0              <1> 	mov cr0,eax
  1208 00000C3E EA[430C]2800        <1> 	jmp NEW_CODE_SEL:returntopmode
  1209                              <1> 
  1210                              <1> [BITS 32]
  1211                              <1> returntopmode:
  1212 00000C43 66B83000            <1> 	mov ax, NEW_DATA_SEL
  1213 00000C47 8ED8                <1> 	mov ds, ax
  1214 00000C49 8EC0                <1> 	mov es, ax
  1215 00000C4B 8EE0                <1> 	mov fs, ax
  1216 00000C4D 8ED0                <1> 	mov ss, ax
  1217 00000C4F 8B25[8A0C0000]      <1> 	mov esp, [pmodeesp]
  1218 00000C55 66B82000            <1> 	mov ax, SYS_DATA_SEL
  1219 00000C59 8EE8                <1> 	mov gs, ax
  1220                              <1> 
  1221 00000C5B BB[940C0000]        <1> 	mov ebx, cr0old
  1222                              <1> rmcopyfromfirstmbyte:
  1223 00000C60 658B03              <1> 	mov eax, [gs:ebx]
  1224 00000C63 8903                <1> 	mov [ebx], eax
  1225 00000C65 81C304000000        <1> 	add ebx, 4
  1226 00000C6B 81FB[A40C0000]      <1> 	cmp ebx, realmodeptr
  1227 00000C71 76ED                <1> 	jbe rmcopyfromfirstmbyte
  1228                              <1> 
  1229 00000C73 E825490000          <1> 	call initialize.pic ;reset irq's and masks
  1230 00000C78 FB                  <1> 	sti
  1231 00000C79 A1[9C0C0000]        <1> 	mov eax, [realmodeeax]
  1232 00000C7E 8B1D[980C0000]      <1> 	mov ebx, [realmodeebx]
  1233 00000C84 FF25[A00C0000]      <1> 	jmp dword [realmodereturn]
  1234                              <1> 	
  1235 00000C8A 00000000            <1> pmodeesp dd 0
  1236                              <1> idt_real:
  1237 00000C8E FF03                <1> 	dw 0x3FF
  1238 00000C90 00000000            <1> 	dd 0
  1239 00000C94 00000000            <1> cr0old dd 0
  1240 00000C98 00000000            <1> realmodeebx dd 0
  1241 00000C9C 00000000            <1> realmodeeax dd 0
  1242 00000CA0 00000000            <1> realmodereturn dd 0
  1243 00000CA4 0000                <1> realmodeptr dw 0
  1244 00000CA6 00000000            <1> dd 0 ;make sure the copy thing doesnt overflow
  1245                                  [BITS 32]
  1246                                      %include "source/exception.asm"
  1247                              <1> unhand:	
  1248                              <1> 	%assign i 0
  1249                              <1> 	%rep 0x50
  1250                              <1> 	cli
  1251                              <1> 	mov byte [intprob], i
  1252                              <1> 	jmp unhand2
  1253                              <1> 	%assign i i+1
  1254                              <1> 	%endrep
  1255 00000CAA FA                  <2>  cli
  1256 00000CAB C605[B2130000]00    <2>  mov byte [intprob], i
  1257 00000CB2 E903040000          <2>  jmp unhand2
  1258                              <2>  %assign i i+1
  1259 00000CB7 FA                  <2>  cli
  1260 00000CB8 C605[B2130000]01    <2>  mov byte [intprob], i
  1261 00000CBF E9F6030000          <2>  jmp unhand2
  1262                              <2>  %assign i i+1
  1263 00000CC4 FA                  <2>  cli
  1264 00000CC5 C605[B2130000]02    <2>  mov byte [intprob], i
  1265 00000CCC E9E9030000          <2>  jmp unhand2
  1266                              <2>  %assign i i+1
  1267 00000CD1 FA                  <2>  cli
  1268 00000CD2 C605[B2130000]03    <2>  mov byte [intprob], i
  1269 00000CD9 E9DC030000          <2>  jmp unhand2
  1270                              <2>  %assign i i+1
  1271 00000CDE FA                  <2>  cli
  1272 00000CDF C605[B2130000]04    <2>  mov byte [intprob], i
  1273 00000CE6 E9CF030000          <2>  jmp unhand2
  1274                              <2>  %assign i i+1
  1275 00000CEB FA                  <2>  cli
  1276 00000CEC C605[B2130000]05    <2>  mov byte [intprob], i
  1277 00000CF3 E9C2030000          <2>  jmp unhand2
  1278                              <2>  %assign i i+1
  1279 00000CF8 FA                  <2>  cli
  1280 00000CF9 C605[B2130000]06    <2>  mov byte [intprob], i
  1281 00000D00 E9B5030000          <2>  jmp unhand2
  1282                              <2>  %assign i i+1
  1283 00000D05 FA                  <2>  cli
  1284 00000D06 C605[B2130000]07    <2>  mov byte [intprob], i
  1285 00000D0D E9A8030000          <2>  jmp unhand2
  1286                              <2>  %assign i i+1
  1287 00000D12 FA                  <2>  cli
  1288 00000D13 C605[B2130000]08    <2>  mov byte [intprob], i
  1289 00000D1A E99B030000          <2>  jmp unhand2
  1290                              <2>  %assign i i+1
  1291 00000D1F FA                  <2>  cli
  1292 00000D20 C605[B2130000]09    <2>  mov byte [intprob], i
  1293 00000D27 E98E030000          <2>  jmp unhand2
  1294                              <2>  %assign i i+1
  1295 00000D2C FA                  <2>  cli
  1296 00000D2D C605[B2130000]0A    <2>  mov byte [intprob], i
  1297 00000D34 E981030000          <2>  jmp unhand2
  1298                              <2>  %assign i i+1
  1299 00000D39 FA                  <2>  cli
  1300 00000D3A C605[B2130000]0B    <2>  mov byte [intprob], i
  1301 00000D41 E974030000          <2>  jmp unhand2
  1302                              <2>  %assign i i+1
  1303 00000D46 FA                  <2>  cli
  1304 00000D47 C605[B2130000]0C    <2>  mov byte [intprob], i
  1305 00000D4E E967030000          <2>  jmp unhand2
  1306                              <2>  %assign i i+1
  1307 00000D53 FA                  <2>  cli
  1308 00000D54 C605[B2130000]0D    <2>  mov byte [intprob], i
  1309 00000D5B E95A030000          <2>  jmp unhand2
  1310                              <2>  %assign i i+1
  1311 00000D60 FA                  <2>  cli
  1312 00000D61 C605[B2130000]0E    <2>  mov byte [intprob], i
  1313 00000D68 E94D030000          <2>  jmp unhand2
  1314                              <2>  %assign i i+1
  1315 00000D6D FA                  <2>  cli
  1316 00000D6E C605[B2130000]0F    <2>  mov byte [intprob], i
  1317 00000D75 E940030000          <2>  jmp unhand2
  1318                              <2>  %assign i i+1
  1319 00000D7A FA                  <2>  cli
  1320 00000D7B C605[B2130000]10    <2>  mov byte [intprob], i
  1321 00000D82 E933030000          <2>  jmp unhand2
  1322                              <2>  %assign i i+1
  1323 00000D87 FA                  <2>  cli
  1324 00000D88 C605[B2130000]11    <2>  mov byte [intprob], i
  1325 00000D8F E926030000          <2>  jmp unhand2
  1326                              <2>  %assign i i+1
  1327 00000D94 FA                  <2>  cli
  1328 00000D95 C605[B2130000]12    <2>  mov byte [intprob], i
  1329 00000D9C E919030000          <2>  jmp unhand2
  1330                              <2>  %assign i i+1
  1331 00000DA1 FA                  <2>  cli
  1332 00000DA2 C605[B2130000]13    <2>  mov byte [intprob], i
  1333 00000DA9 E90C030000          <2>  jmp unhand2
  1334                              <2>  %assign i i+1
  1335 00000DAE FA                  <2>  cli
  1336 00000DAF C605[B2130000]14    <2>  mov byte [intprob], i
  1337 00000DB6 E9FF020000          <2>  jmp unhand2
  1338                              <2>  %assign i i+1
  1339 00000DBB FA                  <2>  cli
  1340 00000DBC C605[B2130000]15    <2>  mov byte [intprob], i
  1341 00000DC3 E9F2020000          <2>  jmp unhand2
  1342                              <2>  %assign i i+1
  1343 00000DC8 FA                  <2>  cli
  1344 00000DC9 C605[B2130000]16    <2>  mov byte [intprob], i
  1345 00000DD0 E9E5020000          <2>  jmp unhand2
  1346                              <2>  %assign i i+1
  1347 00000DD5 FA                  <2>  cli
  1348 00000DD6 C605[B2130000]17    <2>  mov byte [intprob], i
  1349 00000DDD E9D8020000          <2>  jmp unhand2
  1350                              <2>  %assign i i+1
  1351 00000DE2 FA                  <2>  cli
  1352 00000DE3 C605[B2130000]18    <2>  mov byte [intprob], i
  1353 00000DEA E9CB020000          <2>  jmp unhand2
  1354                              <2>  %assign i i+1
  1355 00000DEF FA                  <2>  cli
  1356 00000DF0 C605[B2130000]19    <2>  mov byte [intprob], i
  1357 00000DF7 E9BE020000          <2>  jmp unhand2
  1358                              <2>  %assign i i+1
  1359 00000DFC FA                  <2>  cli
  1360 00000DFD C605[B2130000]1A    <2>  mov byte [intprob], i
  1361 00000E04 E9B1020000          <2>  jmp unhand2
  1362                              <2>  %assign i i+1
  1363 00000E09 FA                  <2>  cli
  1364 00000E0A C605[B2130000]1B    <2>  mov byte [intprob], i
  1365 00000E11 E9A4020000          <2>  jmp unhand2
  1366                              <2>  %assign i i+1
  1367 00000E16 FA                  <2>  cli
  1368 00000E17 C605[B2130000]1C    <2>  mov byte [intprob], i
  1369 00000E1E E997020000          <2>  jmp unhand2
  1370                              <2>  %assign i i+1
  1371 00000E23 FA                  <2>  cli
  1372 00000E24 C605[B2130000]1D    <2>  mov byte [intprob], i
  1373 00000E2B E98A020000          <2>  jmp unhand2
  1374                              <2>  %assign i i+1
  1375 00000E30 FA                  <2>  cli
  1376 00000E31 C605[B2130000]1E    <2>  mov byte [intprob], i
  1377 00000E38 E97D020000          <2>  jmp unhand2
  1378                              <2>  %assign i i+1
  1379 00000E3D FA                  <2>  cli
  1380 00000E3E C605[B2130000]1F    <2>  mov byte [intprob], i
  1381 00000E45 E970020000          <2>  jmp unhand2
  1382                              <2>  %assign i i+1
  1383 00000E4A FA                  <2>  cli
  1384 00000E4B C605[B2130000]20    <2>  mov byte [intprob], i
  1385 00000E52 E963020000          <2>  jmp unhand2
  1386                              <2>  %assign i i+1
  1387 00000E57 FA                  <2>  cli
  1388 00000E58 C605[B2130000]21    <2>  mov byte [intprob], i
  1389 00000E5F E956020000          <2>  jmp unhand2
  1390                              <2>  %assign i i+1
  1391 00000E64 FA                  <2>  cli
  1392 00000E65 C605[B2130000]22    <2>  mov byte [intprob], i
  1393 00000E6C E949020000          <2>  jmp unhand2
  1394                              <2>  %assign i i+1
  1395 00000E71 FA                  <2>  cli
  1396 00000E72 C605[B2130000]23    <2>  mov byte [intprob], i
  1397 00000E79 E93C020000          <2>  jmp unhand2
  1398                              <2>  %assign i i+1
  1399 00000E7E FA                  <2>  cli
  1400 00000E7F C605[B2130000]24    <2>  mov byte [intprob], i
  1401 00000E86 E92F020000          <2>  jmp unhand2
  1402                              <2>  %assign i i+1
  1403 00000E8B FA                  <2>  cli
  1404 00000E8C C605[B2130000]25    <2>  mov byte [intprob], i
  1405 00000E93 E922020000          <2>  jmp unhand2
  1406                              <2>  %assign i i+1
  1407 00000E98 FA                  <2>  cli
  1408 00000E99 C605[B2130000]26    <2>  mov byte [intprob], i
  1409 00000EA0 E915020000          <2>  jmp unhand2
  1410                              <2>  %assign i i+1
  1411 00000EA5 FA                  <2>  cli
  1412 00000EA6 C605[B2130000]27    <2>  mov byte [intprob], i
  1413 00000EAD E908020000          <2>  jmp unhand2
  1414                              <2>  %assign i i+1
  1415 00000EB2 FA                  <2>  cli
  1416 00000EB3 C605[B2130000]28    <2>  mov byte [intprob], i
  1417 00000EBA E9FB010000          <2>  jmp unhand2
  1418                              <2>  %assign i i+1
  1419 00000EBF FA                  <2>  cli
  1420 00000EC0 C605[B2130000]29    <2>  mov byte [intprob], i
  1421 00000EC7 E9EE010000          <2>  jmp unhand2
  1422                              <2>  %assign i i+1
  1423 00000ECC FA                  <2>  cli
  1424 00000ECD C605[B2130000]2A    <2>  mov byte [intprob], i
  1425 00000ED4 E9E1010000          <2>  jmp unhand2
  1426                              <2>  %assign i i+1
  1427 00000ED9 FA                  <2>  cli
  1428 00000EDA C605[B2130000]2B    <2>  mov byte [intprob], i
  1429 00000EE1 E9D4010000          <2>  jmp unhand2
  1430                              <2>  %assign i i+1
  1431 00000EE6 FA                  <2>  cli
  1432 00000EE7 C605[B2130000]2C    <2>  mov byte [intprob], i
  1433 00000EEE E9C7010000          <2>  jmp unhand2
  1434                              <2>  %assign i i+1
  1435 00000EF3 FA                  <2>  cli
  1436 00000EF4 C605[B2130000]2D    <2>  mov byte [intprob], i
  1437 00000EFB E9BA010000          <2>  jmp unhand2
  1438                              <2>  %assign i i+1
  1439 00000F00 FA                  <2>  cli
  1440 00000F01 C605[B2130000]2E    <2>  mov byte [intprob], i
  1441 00000F08 E9AD010000          <2>  jmp unhand2
  1442                              <2>  %assign i i+1
  1443 00000F0D FA                  <2>  cli
  1444 00000F0E C605[B2130000]2F    <2>  mov byte [intprob], i
  1445 00000F15 E9A0010000          <2>  jmp unhand2
  1446                              <2>  %assign i i+1
  1447 00000F1A FA                  <2>  cli
  1448 00000F1B C605[B2130000]30    <2>  mov byte [intprob], i
  1449 00000F22 E993010000          <2>  jmp unhand2
  1450                              <2>  %assign i i+1
  1451 00000F27 FA                  <2>  cli
  1452 00000F28 C605[B2130000]31    <2>  mov byte [intprob], i
  1453 00000F2F E986010000          <2>  jmp unhand2
  1454                              <2>  %assign i i+1
  1455 00000F34 FA                  <2>  cli
  1456 00000F35 C605[B2130000]32    <2>  mov byte [intprob], i
  1457 00000F3C E979010000          <2>  jmp unhand2
  1458                              <2>  %assign i i+1
  1459 00000F41 FA                  <2>  cli
  1460 00000F42 C605[B2130000]33    <2>  mov byte [intprob], i
  1461 00000F49 E96C010000          <2>  jmp unhand2
  1462                              <2>  %assign i i+1
  1463 00000F4E FA                  <2>  cli
  1464 00000F4F C605[B2130000]34    <2>  mov byte [intprob], i
  1465 00000F56 E95F010000          <2>  jmp unhand2
  1466                              <2>  %assign i i+1
  1467 00000F5B FA                  <2>  cli
  1468 00000F5C C605[B2130000]35    <2>  mov byte [intprob], i
  1469 00000F63 E952010000          <2>  jmp unhand2
  1470                              <2>  %assign i i+1
  1471 00000F68 FA                  <2>  cli
  1472 00000F69 C605[B2130000]36    <2>  mov byte [intprob], i
  1473 00000F70 E945010000          <2>  jmp unhand2
  1474                              <2>  %assign i i+1
  1475 00000F75 FA                  <2>  cli
  1476 00000F76 C605[B2130000]37    <2>  mov byte [intprob], i
  1477 00000F7D E938010000          <2>  jmp unhand2
  1478                              <2>  %assign i i+1
  1479 00000F82 FA                  <2>  cli
  1480 00000F83 C605[B2130000]38    <2>  mov byte [intprob], i
  1481 00000F8A E92B010000          <2>  jmp unhand2
  1482                              <2>  %assign i i+1
  1483 00000F8F FA                  <2>  cli
  1484 00000F90 C605[B2130000]39    <2>  mov byte [intprob], i
  1485 00000F97 E91E010000          <2>  jmp unhand2
  1486                              <2>  %assign i i+1
  1487 00000F9C FA                  <2>  cli
  1488 00000F9D C605[B2130000]3A    <2>  mov byte [intprob], i
  1489 00000FA4 E911010000          <2>  jmp unhand2
  1490                              <2>  %assign i i+1
  1491 00000FA9 FA                  <2>  cli
  1492 00000FAA C605[B2130000]3B    <2>  mov byte [intprob], i
  1493 00000FB1 E904010000          <2>  jmp unhand2
  1494                              <2>  %assign i i+1
  1495 00000FB6 FA                  <2>  cli
  1496 00000FB7 C605[B2130000]3C    <2>  mov byte [intprob], i
  1497 00000FBE E9F7000000          <2>  jmp unhand2
  1498                              <2>  %assign i i+1
  1499 00000FC3 FA                  <2>  cli
  1500 00000FC4 C605[B2130000]3D    <2>  mov byte [intprob], i
  1501 00000FCB E9EA000000          <2>  jmp unhand2
  1502                              <2>  %assign i i+1
  1503 00000FD0 FA                  <2>  cli
  1504 00000FD1 C605[B2130000]3E    <2>  mov byte [intprob], i
  1505 00000FD8 E9DD000000          <2>  jmp unhand2
  1506                              <2>  %assign i i+1
  1507 00000FDD FA                  <2>  cli
  1508 00000FDE C605[B2130000]3F    <2>  mov byte [intprob], i
  1509 00000FE5 E9D0000000          <2>  jmp unhand2
  1510                              <2>  %assign i i+1
  1511 00000FEA FA                  <2>  cli
  1512 00000FEB C605[B2130000]40    <2>  mov byte [intprob], i
  1513 00000FF2 E9C3000000          <2>  jmp unhand2
  1514                              <2>  %assign i i+1
  1515 00000FF7 FA                  <2>  cli
  1516 00000FF8 C605[B2130000]41    <2>  mov byte [intprob], i
  1517 00000FFF E9B6000000          <2>  jmp unhand2
  1518                              <2>  %assign i i+1
  1519 00001004 FA                  <2>  cli
  1520 00001005 C605[B2130000]42    <2>  mov byte [intprob], i
  1521 0000100C E9A9000000          <2>  jmp unhand2
  1522                              <2>  %assign i i+1
  1523 00001011 FA                  <2>  cli
  1524 00001012 C605[B2130000]43    <2>  mov byte [intprob], i
  1525 00001019 E99C000000          <2>  jmp unhand2
  1526                              <2>  %assign i i+1
  1527 0000101E FA                  <2>  cli
  1528 0000101F C605[B2130000]44    <2>  mov byte [intprob], i
  1529 00001026 E98F000000          <2>  jmp unhand2
  1530                              <2>  %assign i i+1
  1531 0000102B FA                  <2>  cli
  1532 0000102C C605[B2130000]45    <2>  mov byte [intprob], i
  1533 00001033 E982000000          <2>  jmp unhand2
  1534                              <2>  %assign i i+1
  1535 00001038 FA                  <2>  cli
  1536 00001039 C605[B2130000]46    <2>  mov byte [intprob], i
  1537 00001040 E975000000          <2>  jmp unhand2
  1538                              <2>  %assign i i+1
  1539 00001045 FA                  <2>  cli
  1540 00001046 C605[B2130000]47    <2>  mov byte [intprob], i
  1541 0000104D E968000000          <2>  jmp unhand2
  1542                              <2>  %assign i i+1
  1543 00001052 FA                  <2>  cli
  1544 00001053 C605[B2130000]48    <2>  mov byte [intprob], i
  1545 0000105A E95B000000          <2>  jmp unhand2
  1546                              <2>  %assign i i+1
  1547 0000105F FA                  <2>  cli
  1548 00001060 C605[B2130000]49    <2>  mov byte [intprob], i
  1549 00001067 E94E000000          <2>  jmp unhand2
  1550                              <2>  %assign i i+1
  1551 0000106C FA                  <2>  cli
  1552 0000106D C605[B2130000]4A    <2>  mov byte [intprob], i
  1553 00001074 E941000000          <2>  jmp unhand2
  1554                              <2>  %assign i i+1
  1555 00001079 FA                  <2>  cli
  1556 0000107A C605[B2130000]4B    <2>  mov byte [intprob], i
  1557 00001081 E934000000          <2>  jmp unhand2
  1558                              <2>  %assign i i+1
  1559 00001086 FA                  <2>  cli
  1560 00001087 C605[B2130000]4C    <2>  mov byte [intprob], i
  1561 0000108E E927000000          <2>  jmp unhand2
  1562                              <2>  %assign i i+1
  1563 00001093 FA                  <2>  cli
  1564 00001094 C605[B2130000]4D    <2>  mov byte [intprob], i
  1565 0000109B E91A000000          <2>  jmp unhand2
  1566                              <2>  %assign i i+1
  1567 000010A0 FA                  <2>  cli
  1568 000010A1 C605[B2130000]4E    <2>  mov byte [intprob], i
  1569 000010A8 E90D000000          <2>  jmp unhand2
  1570                              <2>  %assign i i+1
  1571 000010AD FA                  <2>  cli
  1572 000010AE C605[B2130000]4F    <2>  mov byte [intprob], i
  1573 000010B5 E900000000          <2>  jmp unhand2
  1574                              <2>  %assign i i+1
  1575                              <1> unhand2:
  1576 000010BA 1E                  <1> 	push ds
  1577 000010BB 06                  <1> 	push es
  1578 000010BC 0FA0                <1> 	push fs
  1579 000010BE 0FA8                <1> 	push gs
  1580 000010C0 16                  <1> 	push ss
  1581 000010C1 60                  <1> 	pushad
  1582                              <1> %ifdef gui.included
  1583 000010C2 803D[78880000]00    <1> 	cmp byte [guion], 0
  1584 000010C9 0F8432000000        <1> 	je near noguiunhandstuff
  1585 000010CF 66C705[AC130000]08- <1> 	mov word [locunhandy], 8
  1586 000010D7 00                  <1>
  1587 000010D8 66C705[AE130000]08- <1> 	mov word [locunhandx], 8
  1588 000010E0 00                  <1>
  1589 000010E1 668B1D[C75F0000]    <1> 	mov bx, [background]
  1590 000010E8 66891D[B0130000]    <1> 	mov [backgroundcache], bx
  1591 000010EF C605[004D0000]01    <1> 	mov byte [mousedisabled],1
  1592 000010F6 66BB00F8            <1> 	mov bx, 1111100000000000b
  1593 000010FA 66891D[C75F0000]    <1> 	mov [background], bx
  1594                              <1> noguiunhandstuff:
  1595                              <1> %endif
  1596 00001101 89E6                <1> 	mov esi, esp
  1597 00001103 8935[A0130000]      <1> 	mov [espfirst], esi
  1598 00001109 81C6BC000000        <1> 	add esi, ((unhndrgend - unhndrg)/15)*4
  1599 0000110F 8935[9C130000]      <1> 	mov [esploc], esi
  1600 00001115 BE[BB130000]        <1> 	mov esi, unhandmsg
  1601 0000111A 8935[A4130000]      <1> 	mov [esiloc], esi
  1602 00001120 31C9                <1> 	xor ecx, ecx
  1603 00001122 8A0D[B2130000]      <1> 	mov cl, [intprob]
  1604 00001128 BB[4E170000]        <1> 	mov ebx, errortypes
  1605 0000112D C1E102              <1> 	shl ecx, 2
  1606 00001130 01CB                <1> 	add ebx, ecx
  1607 00001132 81FB[8E170000]      <1> 	cmp ebx, errortypesend
  1608 00001138 7205                <1> 	jb gooderrortype
  1609 0000113A BB[8E170000]        <1> 	mov ebx, errortypesend
  1610                              <1> gooderrortype:
  1611 0000113F 8B33                <1> 	mov esi, [ebx]
  1612                              <1> %ifdef gui.included
  1613 00001141 803D[78880000]00    <1> 	cmp byte [guion], 0
  1614 00001148 0F842D000000        <1> 	je near errortext
  1615 0000114E 668B0D[AC130000]    <1> 	mov cx, [locunhandy]
  1616 00001155 668B15[AE130000]    <1> 	mov dx, [locunhandx]
  1617 0000115C 66B80100            <1> 	mov ax, 1
  1618 00001160 6631DB              <1> 	xor bx, bx
  1619 00001163 E85A590000          <1> 	call showstring2
  1620 00001168 66890D[AC130000]    <1> 	mov [locunhandy], cx
  1621 0000116F 668915[AE130000]    <1> 	mov [locunhandx], dx
  1622 00001176 E905000000          <1> 	jmp errortextdone
  1623                              <1> %endif
  1624                              <1> errortext:
  1625 0000117B E8550D0000          <1> 	call print		;;get the error message and print it
  1626                              <1> errortextdone:
  1627 00001180 31C9                <1> 	xor ecx, ecx
  1628 00001182 8A0D[B2130000]      <1> 	mov cl, [intprob]
  1629 00001188 E8A8010000          <1> 	call expdump
  1630                              <1> dumpstack:
  1631 0000118D 8B35[9C130000]      <1> 	mov esi, [esploc]
  1632 00001193 39E6                <1> 	cmp esi, esp
  1633 00001195 7216                <1> 	jb donedump
  1634 00001197 368B0E              <1> 	mov ecx, [ss:esi]
  1635 0000119A 81EE04000000        <1> 	sub esi, 4
  1636 000011A0 8935[9C130000]      <1> 	mov [esploc], esi
  1637 000011A6 E88A010000          <1> 	call expdump
  1638 000011AB EBE0                <1> 	jmp dumpstack
  1639                              <1> donedump:
  1640 000011AD 0F20C1              <1> 	mov ecx, cr0
  1641 000011B0 E880010000          <1> 	call expdump
  1642 000011B5 0F20D1              <1> 	mov ecx, cr2
  1643 000011B8 E878010000          <1> 	call expdump
  1644 000011BD 0F20D9              <1> 	mov ecx, cr3
  1645 000011C0 E870010000          <1> 	call expdump
  1646 000011C5 0F20E1              <1> 	mov ecx, cr4
  1647 000011C8 E868010000          <1> 	call expdump
  1648 000011CD 8B35[9C130000]      <1> 	mov esi, [esploc]
  1649 000011D3 368B7C2434          <1> 	mov edi, [ss:esp + 52]
  1650 000011D8 81C710000000        <1> 	add edi, 16
  1651 000011DE 893D[B7130000]      <1> 	mov [codelocend], edi
  1652 000011E4 81EF20000000        <1> 	sub edi, 32
  1653                              <1> dumpcodeloop:
  1654 000011EA 893D[B3130000]      <1> 	mov [codeloc], edi
  1655 000011F0 8B0F                <1> 	mov ecx, [edi]
  1656 000011F2 E83E010000          <1> 	call expdump
  1657 000011F7 8B3D[B3130000]      <1> 	mov edi, [codeloc]
  1658 000011FD 81C704000000        <1> 	add edi, 4
  1659 00001203 3B3D[B7130000]      <1> 	cmp edi, [codelocend]
  1660 00001209 72DF                <1> 	jb dumpcodeloop
  1661 0000120B BE[C6120000]        <1> 	mov esi, backtoosmsg
  1662                              <1> %ifdef gui.included
  1663 00001210 803D[78880000]00    <1> 	cmp byte [guion], 0
  1664 00001217 741F                <1> 	je backtomsg
  1665                              <1> guibacktomsg:
  1666 00001219 668B15[AE130000]    <1> 	mov dx, [locunhandx]
  1667 00001220 668B0D[AC130000]    <1> 	mov cx, [locunhandy]
  1668 00001227 66B80100            <1> 	mov ax, 1
  1669 0000122B 6631DB              <1> 	xor bx, bx
  1670 0000122E E88F580000          <1> 	call showstring2
  1671 00001233 E905000000          <1> 	jmp backtomsgdone
  1672                              <1> backtomsg:
  1673                              <1> %endif
  1674 00001238 E8980C0000          <1> 	call print
  1675                              <1> backtomsgdone:
  1676 0000123D 30C0                <1> 	xor al, al
  1677 0000123F E8F5100000          <1> 	call rdcharint
  1678 00001244 803D[B2130000]03    <1> 	cmp byte [intprob], 3
  1679 0000124B 753C                <1> 	jne nodebugint
  1680                              <1> %ifdef gui.included
  1681 0000124D 803D[78880000]00    <1> 	cmp byte [guion], 0
  1682 00001254 7422                <1> 	je nodebuggui
  1683 00001256 668B1D[B0130000]    <1> 	mov bx, [backgroundcache]
  1684 0000125D 66891D[C75F0000]    <1> 	mov [background], bx
  1685 00001264 6631DB              <1> 	xor bx, bx
  1686 00001267 C605[004D0000]00    <1> 	mov byte [mousedisabled], 0
  1687 0000126E E8174D0000          <1> 	call guiclear
  1688 00001273 E8F1540000          <1> 	call reloadallgraphics
  1689                              <1> nodebuggui:
  1690                              <1> %endif
  1691 00001278 8B35[A0130000]      <1> 	mov esi, [espfirst]
  1692 0000127E 89F4                <1> 	mov esp, esi
  1693 00001280 61                  <1> 	popad
  1694 00001281 17                  <1> 	pop ss
  1695 00001282 0FA9                <1> 	pop gs
  1696 00001284 0FA1                <1> 	pop fs
  1697 00001286 07                  <1> 	pop es
  1698 00001287 1F                  <1> 	pop ds
  1699 00001288 CF                  <1> 	iret
  1700                              <1> nodebugint:
  1701 00001289 61                  <1> 	popad
  1702 0000128A 17                  <1> 	pop ss
  1703 0000128B 0FA9                <1> 	pop gs
  1704 0000128D 0FA1                <1> 	pop fs
  1705 0000128F 07                  <1> 	pop es
  1706 00001290 1F                  <1> 	pop ds
  1707                              <1> %ifdef gui.included
  1708 00001291 803D[78880000]00    <1> 	cmp byte [guion], 0
  1709 00001298 7427                <1> 	je returnunhandgui
  1710 0000129A 668B1D[B0130000]    <1> 	mov bx, [backgroundcache]
  1711 000012A1 66891D[C75F0000]    <1> 	mov [background], bx
  1712 000012A8 6631DB              <1> 	xor bx, bx
  1713 000012AB C605[004D0000]00    <1> 	mov byte [mousedisabled], 0
  1714 000012B2 E8D34C0000          <1> 	call guiclear
  1715 000012B7 E8AD540000          <1> 	call reloadallgraphics
  1716 000012BC E9084D0000          <1> 	jmp guiboot
  1717                              <1> %endif
  1718                              <1> returnunhandgui:
  1719 000012C1 E91E170000          <1> 	jmp nwcmd
  1720 000012C6 506C6561736520706F- <1> backtoosmsg db "Please post any problems in the Issues section at solleros.googlecode.com",10
  1721 000012CF 737420616E79207072- <1>
  1722 000012D8 6F626C656D7320696E- <1>
  1723 000012E1 207468652049737375- <1>
  1724 000012EA 65732073656374696F- <1>
  1725 000012F3 6E20617420736F6C6C- <1>
  1726 000012FC 65726F732E676F6F67- <1>
  1727 00001305 6C65636F64652E636F- <1>
  1728 0000130E 6D0A                <1>
  1729 00001310 507265737320616E79- <1> 			db "Press any key to return to SollerOS",10,0
  1730 00001319 206B657920746F2072- <1>
  1731 00001322 657475726E20746F20- <1>
  1732 0000132B 536F6C6C65724F530A- <1>
  1733 00001334 00                  <1>
  1734                              <1> expdump:
  1735 00001335 8B35[A4130000]      <1> 	mov esi, [esiloc]
  1736 0000133B 89F7                <1> 	mov edi, esi
  1737 0000133D 81C70F000000        <1> 	add edi, 15
  1738 00001343 81C604000000        <1> 	add esi, 4
  1739 00001349 893D[A4130000]      <1> 	mov [esiloc], edi
  1740 0000134F 81EF03000000        <1> 	sub edi, 3
  1741 00001355 E8EC1A0000          <1> 	call converthex
  1742 0000135A 81EE04000000        <1> 	sub esi, 4
  1743                              <1> %ifdef gui.included
  1744 00001360 803D[78880000]00    <1> 	cmp byte [guion], 0
  1745 00001367 0F8429000000        <1> 	je near expdumptext
  1746 0000136D 668B0D[AC130000]    <1> 	mov cx, [locunhandy]
  1747 00001374 668B15[AE130000]    <1> 	mov dx, [locunhandx]
  1748 0000137B 66B80100            <1> 	mov ax, 1
  1749 0000137F 6631DB              <1> 	xor bx, bx
  1750 00001382 E83B570000          <1> 	call showstring2
  1751 00001387 66890D[AC130000]    <1> 	mov [locunhandy], cx
  1752 0000138E 668915[AE130000]    <1> 	mov [locunhandx], dx
  1753 00001395 C3                  <1> 	ret
  1754                              <1> %endif
  1755                              <1> expdumptext:
  1756 00001396 E83A0B0000          <1> 	call print
  1757 0000139B C3                  <1> 	ret
  1758 0000139C 00000000            <1> esploc dd 0
  1759 000013A0 00000000            <1> espfirst dd 0
  1760 000013A4 00000000            <1> esiloc dd 0
  1761 000013A8 00000000            <1> esiregbuf dd 0
  1762 000013AC 0100                <1> locunhandy dw 1
  1763 000013AE 0100                <1> locunhandx dw 1
  1764 000013B0 0000                <1> backgroundcache dw 0
  1765 000013B2 00                  <1> intprob db 0
  1766 000013B3 00000000            <1> codeloc dd 0
  1767 000013B7 00000000            <1> codelocend dd 0
  1768                              <1> 	unhandmsg:	
  1769 000013BB 494E543D3030303030- <1> 			db "INT=00000000 ",10,0
  1770 000013C4 303030200A00        <1>
  1771                              <1> unhndrg:
  1772 000013CA FFFFFFFF3030303030- <1> 	times 7 db 255,255,255,255,"00000000  ",0	;;this dumps the stack before the stack frame in question
  1773 000013D3 303030202000<rept>  <1>
  1774 00001433 FFFFFFFF3030303030- <1> 			db 255,255,255,255,"00000000 ",10,0
  1775 0000143C 303030200A00        <1>
  1776 00001442 FFFFFFFF3030303030- <1> 	times 7 db 255,255,255,255,"00000000  ",0	;;this dumps the stack before the stack frame in question
  1777 0000144B 303030202000<rept>  <1>
  1778 000014AB FFFFFFFF3030303030- <1> 			db 255,255,255,255,"00000000 ",10,0
  1779 000014B4 303030200A00        <1>
  1780 000014BA FFFFFFFF3030303030- <1> 	times 7 db 255,255,255,255,"00000000  ",0	;;this dumps the stack before the stack frame in question
  1781 000014C3 303030202000<rept>  <1>
  1782 00001523 FFFFFFFF3030303030- <1> 			db 255,255,255,255,"00000000 ",10,0
  1783 0000152C 303030200A00        <1>
  1784 00001532 FFFFFFFF3030303030- <1> 	times 7 db 255,255,255,255,"00000000  ",0	;;this dumps the stack before the stack frame in question
  1785 0000153B 303030202000<rept>  <1>
  1786 0000159B FFFFFFFF3030303030- <1> 			db 255,255,255,255,"00000000 ",10,0
  1787 000015A4 303030200A00        <1>
  1788                              <1> unhandregs:
  1789 000015AA 45464C3D3030303030- <1> 			db "EFL=00000000  ",0
  1790 000015B3 303030202000        <1>
  1791 000015B9 43533A3D3030303030- <1> 			db "CS:=00000000  ",0
  1792 000015C2 303030202000        <1>
  1793 000015C8 4549503D3030303030- <1> 			db "EIP=00000000 ",10,0
  1794 000015D1 303030200A00        <1>
  1795 000015D7 44533A3D3030303030- <1> 			db "DS:=00000000  ",0
  1796 000015E0 303030202000        <1>
  1797 000015E6 45533A3D3030303030- <1> 			db "ES:=00000000  ",0
  1798 000015EF 303030202000        <1>
  1799 000015F5 46533A3D3030303030- <1> 			db "FS:=00000000  ",0
  1800 000015FE 303030202000        <1>
  1801 00001604 47533A3D3030303030- <1> 			db "GS:=00000000  ",0
  1802 0000160D 303030202000        <1>
  1803 00001613 53533A3D3030303030- <1> 			db "SS:=00000000 ",10,0
  1804 0000161C 303030200A00        <1>
  1805 00001622 4541583D3030303030- <1> 			db "EAX=00000000  ",0
  1806 0000162B 303030202000        <1>
  1807 00001631 4543583D3030303030- <1> 			db "ECX=00000000  ",0
  1808 0000163A 303030202000        <1>
  1809 00001640 4544583D3030303030- <1> 			db "EDX=00000000  ",0
  1810 00001649 303030202000        <1>
  1811 0000164F 4542583D3030303030- <1> 			db "EBX=00000000 ",10,0
  1812 00001658 303030200A00        <1>
  1813 0000165E 4553503D3030303030- <1> 			db "ESP=00000000  ",0
  1814 00001667 303030202000        <1>
  1815 0000166D 4542503D3030303030- <1> 			db "EBP=00000000  ",0
  1816 00001676 303030202000        <1>
  1817 0000167C 4553493D3030303030- <1> 			db "ESI=00000000  ",0
  1818 00001685 303030202000        <1>
  1819 0000168B 4544493D3030303030- <1> unhndrgend:	db "EDI=00000000 ",10,0
  1820 00001694 303030200A00        <1>
  1821 0000169A 4352303D3030303030- <1> 			db "CR0=00000000  ",0
  1822 000016A3 303030202000        <1>
  1823 000016A9 4352323D3030303030- <1> 			db "CR2=00000000  ",0
  1824 000016B2 303030202000        <1>
  1825 000016B8 4352333D3030303030- <1> 			db "CR3=00000000  ",0
  1826 000016C1 303030202000        <1>
  1827 000016C7 4352343D3030303030- <1> 			db "CR4=00000000 ",10,0
  1828 000016D0 303030200A00        <1>
  1829 000016D6 FFFFFFFF3030303030- <1> unhandcode: times 2 db 255,255,255,255,"00000000  ",0	;;this dumps the code before and after the interrupt in question
  1830 000016DF 303030202000<rept>  <1>
  1831 000016F4 FFFFFFFF3030303030- <1> 			db 255,255,255,255,"00000000 ",255,0
  1832 000016FD 30303020FF00        <1>
  1833 00001703 FFFFFF5B3030303030- <1> 			db 255,255,255,"[00000000] ",0
  1834 0000170C 3030305D2000        <1>
  1835 00001712 FFFFFFFF3030303030- <1> 			times 3 db 255,255,255,255,"00000000  ",0
  1836 0000171B 303030202000<rept>  <1>
  1837 0000173F FFFFFFFF3030303030- <1> 			db 255,255,255,255,"00000000",255,10,0
  1838 00001748 303030FF0A00        <1>
  1839                              <1> unhandmsgend:
  1840                              <1> 
  1841                              <1> errortypes:
  1842 0000174E [92170000]          <1> 			dd err0
  1843 00001752 [F6170000]          <1> 			dd err1
  1844 00001756 [57180000]          <1> 			dd err2
  1845 0000175A [AC180000]          <1> 			dd err3
  1846 0000175E [10190000]          <1> 			dd err4
  1847 00001762 [62190000]          <1> 			dd err5
  1848 00001766 [CC190000]          <1> 			dd err6
  1849 0000176A [341A0000]          <1> 			dd err7
  1850 0000176E [7E1A0000]          <1> 			dd err8
  1851 00001772 [DB1A0000]          <1> 			dd err9
  1852 00001776 [341B0000]          <1> 			dd err10
  1853 0000177A [7F1B0000]          <1> 			dd err11
  1854 0000177E [CF1B0000]          <1> 			dd err12
  1855 00001782 [281C0000]          <1> 			dd err13
  1856 00001786 [8B1C0000]          <1> 			dd err14
  1857 0000178A [C71C0000]          <1> 			dd err15
  1858                              <1> errortypesend:
  1859 0000178E [521D0000]          <1> 			dd unknownerror
  1860                              <1> 			
  1861 00001792 4469766973696F6E20- <1> err0	db "Division by zero:",10
  1862 0000179B 6279207A65726F3A0A  <1>
  1863 000017A4 546563686E6963616C- <1> 		db "Technically lim a",246,"x = ",236," when a is any real number. Happy Easter!",10
  1864 000017AD 6C79206C696D2061F6- <1>
  1865 000017B6 78203D20EC20776865- <1>
  1866 000017BF 6E206120697320616E- <1>
  1867 000017C8 79207265616C206E75- <1>
  1868 000017D1 6D6265722E20486170- <1>
  1869 000017DA 707920456173746572- <1>
  1870 000017E3 210A                <1>
  1871 000017E5 202020202020202020- <1> 		db "            x",26,"0",10,0
  1872 000017EE 202020781A300A00    <1>
  1873                              <1> 		
  1874 000017F6 53696E676C652D7374- <1> err1	db "Single-step/Breakpoint:",10
  1875 000017FF 65702F427265616B70- <1>
  1876 00001808 6F696E743A0A        <1>
  1877 0000180E 4120627265616B706F- <1> 		db "A breakpoint fault, breakpoint trap, or single-step trap was triggered.",10,0
  1878 00001817 696E74206661756C74- <1>
  1879 00001820 2C20627265616B706F- <1>
  1880 00001829 696E7420747261702C- <1>
  1881 00001832 206F722073696E676C- <1>
  1882 0000183B 652D73746570207472- <1>
  1883 00001844 617020776173207472- <1>
  1884 0000184D 696767657265642E0A- <1>
  1885 00001856 00                  <1>
  1886                              <1> 		
  1887 00001857 4E6F6E6D61736B6162- <1> err2	db "Nonmaskable interrupt:",10
  1888 00001860 6C6520696E74657272- <1>
  1889 00001869 7570743A0A          <1>
  1890 0000186E 412068617264776172- <1> 		db "A hardware interrupt was triggered that could not be masked.",10,0
  1891 00001877 6520696E7465727275- <1>
  1892 00001880 707420776173207472- <1>
  1893 00001889 696767657265642074- <1>
  1894 00001892 68617420636F756C64- <1>
  1895 0000189B 206E6F74206265206D- <1>
  1896 000018A4 61736B65642E0A00    <1>
  1897                              <1> 		
  1898 000018AC 427265616B706F696E- <1> err3	db "Breakpoint:",10
  1899 000018B5 743A0A              <1>
  1900 000018B8 5468697320696E7465- <1> 		db "This interrupt is used in programs to show the stack and registers and can be",10
  1901 000018C1 727275707420697320- <1>
  1902 000018CA 7573656420696E2070- <1>
  1903 000018D3 726F6772616D732074- <1>
  1904 000018DC 6F2073686F77207468- <1>
  1905 000018E5 6520737461636B2061- <1>
  1906 000018EE 6E6420726567697374- <1>
  1907 000018F7 65727320616E642063- <1>
  1908 00001900 616E2062650A        <1>
  1909 00001906 69676E6F7265642E0A- <1> 		db "ignored.",10,0
  1910 0000190F 00                  <1>
  1911                              <1> 		
  1912 00001910 4F766572666C6F773A- <1> err4	db "Overflow:",10
  1913 00001919 0A                  <1>
  1914 0000191A 5468652070726F6365- <1> 		db "The processor ran into an INTO instruction with the overflow flag set.",10,0
  1915 00001923 73736F722072616E20- <1>
  1916 0000192C 696E746F20616E2049- <1>
  1917 00001935 4E544F20696E737472- <1>
  1918 0000193E 756374696F6E207769- <1>
  1919 00001947 746820746865206F76- <1>
  1920 00001950 6572666C6F7720666C- <1>
  1921 00001959 6167207365742E0A00  <1>
  1922                              <1> 		
  1923 00001962 426F756E6473206368- <1> err5	db "Bounds check:",10
  1924 0000196B 65636B3A0A          <1>
  1925 00001970 5468652070726F6365- <1> 		db "The processor rebounded from a BOUND instruction run on an operand that was out",10
  1926 00001979 73736F72207265626F- <1>
  1927 00001982 756E6465642066726F- <1>
  1928 0000198B 6D206120424F554E44- <1>
  1929 00001994 20696E737472756374- <1>
  1930 0000199D 696F6E2072756E206F- <1>
  1931 000019A6 6E20616E206F706572- <1>
  1932 000019AF 616E64207468617420- <1>
  1933 000019B8 776173206F75740A    <1>
  1934 000019C0 6F6620626F756E6473- <1> 		db "of bounds.",10,0
  1935 000019C9 2E0A00              <1>
  1936                              <1> 		
  1937 000019CC 496E76616C6964206F- <1> err6	db "Invalid opcode:",10
  1938 000019D5 70636F64653A0A      <1>
  1939 000019DC 5468652070726F6365- <1> 		db "The processor has no idea what it was trying to execute. Don't run SSE4 code",10
  1940 000019E5 73736F722068617320- <1>
  1941 000019EE 6E6F20696465612077- <1>
  1942 000019F7 686174206974207761- <1>
  1943 00001A00 7320747279696E6720- <1>
  1944 00001A09 746F20657865637574- <1>
  1945 00001A12 652E20446F6E277420- <1>
  1946 00001A1B 72756E205353453420- <1>
  1947 00001A24 636F64650A          <1>
  1948 00001A29 6F6E20343836277321- <1> 		db "on 486's!",10,0
  1949 00001A32 0A00                <1>
  1950                              <1> 		
  1951 00001A34 436F70726F63657373- <1> err7	db "Coprocessor not available:",10
  1952 00001A3D 6F72206E6F74206176- <1>
  1953 00001A46 61696C61626C653A0A  <1>
  1954 00001A4F 446F6E277420796F75- <1> 		db "Don't you know they don't make those anymore!",10,0
  1955 00001A58 206B6E6F7720746865- <1>
  1956 00001A61 7920646F6E2774206D- <1>
  1957 00001A6A 616B652074686F7365- <1>
  1958 00001A73 20616E796D6F726521- <1>
  1959 00001A7C 0A00                <1>
  1960                              <1> 		
  1961 00001A7E 446F75626C65206661- <1> err8	db "Double fault:",10
  1962 00001A87 756C743A0A          <1>
  1963 00001A8C 546865206578636570- <1> 		db "The exception handler could not handle that it could not handle an exception.",10,0
  1964 00001A95 74696F6E2068616E64- <1>
  1965 00001A9E 6C657220636F756C64- <1>
  1966 00001AA7 206E6F742068616E64- <1>
  1967 00001AB0 6C6520746861742069- <1>
  1968 00001AB9 7420636F756C64206E- <1>
  1969 00001AC2 6F742068616E646C65- <1>
  1970 00001ACB 20616E206578636570- <1>
  1971 00001AD4 74696F6E2E0A00      <1>
  1972                              <1> 		
  1973 00001ADB 436F70726F63657373- <1> err9	db "Coprocessor segment overrun:",10,0
  1974 00001AE4 6F72207365676D656E- <1>
  1975 00001AED 74206F76657272756E- <1>
  1976 00001AF6 3A0A00              <1>
  1977 00001AF9 54686973206E657665- <1> 		db "This never happens in modern computers, and never should.",10,0
  1978 00001B02 722068617070656E73- <1>
  1979 00001B0B 20696E206D6F646572- <1>
  1980 00001B14 6E20636F6D70757465- <1>
  1981 00001B1D 72732C20616E64206E- <1>
  1982 00001B26 657665722073686F75- <1>
  1983 00001B2F 6C642E0A00          <1>
  1984                              <1> 
  1985 00001B34 496E76616C69642054- <1> err10	db "Invalid TSS:",10
  1986 00001B3D 53533A0A            <1>
  1987 00001B41 546865205453532074- <1> 		db "The TSS that was switched to is invalid. Nothing funny here.",10,0
  1988 00001B4A 686174207761732073- <1>
  1989 00001B53 776974636865642074- <1>
  1990 00001B5C 6F20697320696E7661- <1>
  1991 00001B65 6C69642E204E6F7468- <1>
  1992 00001B6E 696E672066756E6E79- <1>
  1993 00001B77 20686572652E0A00    <1>
  1994                              <1> 		
  1995 00001B7F 5365676D656E74206E- <1> err11	db "Segment not present:",10
  1996 00001B88 6F742070726573656E- <1>
  1997 00001B91 743A0A              <1>
  1998 00001B94 546865207072657365- <1> 		db "The present bit of the segment descriptor is set to zero.",10,0
  1999 00001B9D 6E7420626974206F66- <1>
  2000 00001BA6 20746865207365676D- <1>
  2001 00001BAF 656E74206465736372- <1>
  2002 00001BB8 6970746F7220697320- <1>
  2003 00001BC1 73657420746F207A65- <1>
  2004 00001BCA 726F2E0A00          <1>
  2005                              <1> 		
  2006 00001BCF 537461636B20657863- <1> err12	db "Stack exception:",10
  2007 00001BD8 657074696F6E3A0A    <1>
  2008 00001BE0 546865205353206465- <1> 		db "The SS descriptor is invalid or not present or its limit is too small.",10,0
  2009 00001BE9 7363726970746F7220- <1>
  2010 00001BF2 697320696E76616C69- <1>
  2011 00001BFB 64206F72206E6F7420- <1>
  2012 00001C04 70726573656E74206F- <1>
  2013 00001C0D 7220697473206C696D- <1>
  2014 00001C16 697420697320746F6F- <1>
  2015 00001C1F 20736D616C6C2E0A00  <1>
  2016                              <1> 		
  2017 00001C28 47656E6572616C2070- <1> err13	db "General protection violation:",10
  2018 00001C31 726F74656374696F6E- <1>
  2019 00001C3A 2076696F6C6174696F- <1>
  2020 00001C43 6E3A0A              <1>
  2021 00001C46 596F752076696F6C61- <1> 		db "You violated the computer. Step away slowly. The FBI is on its way.",10,0
  2022 00001C4F 746564207468652063- <1>
  2023 00001C58 6F6D70757465722E20- <1>
  2024 00001C61 537465702061776179- <1>
  2025 00001C6A 20736C6F776C792E20- <1>
  2026 00001C73 546865204642492069- <1>
  2027 00001C7C 73206F6E2069747320- <1>
  2028 00001C85 7761792E0A00        <1>
  2029                              <1> 		
  2030 00001C8B 50616765206661756C- <1> err14	db "Page fault:",10
  2031 00001C94 743A0A              <1>
  2032 00001C97 546865207061676520- <1> 		db "The page that was requested was not available.",10,0
  2033 00001CA0 746861742077617320- <1>
  2034 00001CA9 726571756573746564- <1>
  2035 00001CB2 20776173206E6F7420- <1>
  2036 00001CBB 617661696C61626C65- <1>
  2037 00001CC4 2E0A00              <1>
  2038                              <1> 		
  2039 00001CC7 526573657276656420- <1> err15	db "Reserved for Plan R:",10
  2040 00001CD0 666F7220506C616E20- <1>
  2041 00001CD9 523A0A              <1>
  2042 00001CDC 5468697320696E7465- <1> 		db "This interrupt is reserved for usage only by the military when it is necessary",10
  2043 00001CE5 727275707420697320- <1>
  2044 00001CEE 726573657276656420- <1>
  2045 00001CF7 666F72207573616765- <1>
  2046 00001D00 206F6E6C7920627920- <1>
  2047 00001D09 746865206D696C6974- <1>
  2048 00001D12 617279207768656E20- <1>
  2049 00001D1B 6974206973206E6563- <1>
  2050 00001D24 6573736172790A      <1>
  2051 00001D2B 746F20696E69746961- <1> 		db "to initiate a full-scale coup d'",130,"tat.",10,0
  2052 00001D34 746520612066756C6C- <1>
  2053 00001D3D 2D7363616C6520636F- <1>
  2054 00001D46 757020642782746174- <1>
  2055 00001D4F 2E0A00              <1>
  2056                              <1> 		
  2057 00001D52 576861742074686520- <1> unknownerror db "What the hell just happened? Is everyone okay? Hard drive? Video card?",10
  2058 00001D5B 68656C6C206A757374- <1>
  2059 00001D64 2068617070656E6564- <1>
  2060 00001D6D 3F2049732065766572- <1>
  2061 00001D76 796F6E65206F6B6179- <1>
  2062 00001D7F 3F2048617264206472- <1>
  2063 00001D88 6976653F2056696465- <1>
  2064 00001D91 6F20636172643F0A    <1>
  2065 00001D99 4D656D6F72793F2041- <1> 			db	"Memory? Are you there?",10,0
  2066 00001DA2 726520796F75207468- <1>
  2067 00001DAB 6572653F0A00        <1>
  2068                                      %include "source/ints.asm"
  2069                              <1> newints:	;;for great justice
  2070 00001DB1 80FC00              <1> 	cmp ah, 0		;;originally 0
  2071 00001DB4 0F847F000000        <1> 	je near intx0   ;;0=kills app
  2072 00001DBA 80FC01              <1> 	cmp ah, 1		;;originally 1
  2073 00001DBD 0F84EA000000        <1> 	je near intx1   ;;3=print string
  2074 00001DC3 80FC02              <1> 	cmp ah, 2		;;originally 2
  2075 00001DC6 0F843C010000        <1> 	je near intx2	;;4=read string
  2076 00001DCC 80FC03              <1> 	cmp ah, 3		;;originally 3
  2077 00001DCF 0F845C010000        <1> 	je near intx3	;;6=clear screen
  2078 00001DD5 80FC04              <1> 	cmp ah, 4		;;originally 4
  2079 00001DD8 0F84D3010000        <1> 	je near intx4	;;5=read and print string
  2080 00001DDE 80FC05              <1> 	cmp ah, 5		;;originally 5		
  2081 00001DE1 0F8446050000        <1> 	je near intx5	;;2=get char
  2082 00001DE7 80FC06              <1> 	cmp ah, 6		;;originally 6
  2083 00001DEA 0F8490050000        <1> 	je near intx6	;;1=print char
  2084 00001DF0 80FC07              <1> 	cmp ah, 7
  2085 00001DF3 0F8468070000        <1> 	je near intx7	;;read file
  2086                              <1> ;	cmp ah, 8		;;write file
  2087                              <1> ;	je near intx8
  2088 00001DF9 80FC09              <1> 	cmp ah, 9
  2089 00001DFC 0F8469070000        <1> 	je near intx9	;;convert number to string
  2090 00001E02 80FC0A              <1> 	cmp ah, 10
  2091 00001E05 0F8478070000        <1> 	je near intx10	;;convert string to number
  2092 00001E0B 80FC0B              <1> 	cmp ah, 11
  2093 00001E0E 0F8475070000        <1> 	je near intx11	;;create thread
  2094 00001E14 80FC0C              <1> 	cmp ah, 12		;;get time
  2095 00001E17 0F8472070000        <1> 	je near intx12
  2096 00001E1D 80FC0D              <1> 	cmp ah, 13		;;set time
  2097 00001E20 0F847A070000        <1> 	je near intx13
  2098 00001E26 80FC0E              <1> 	cmp ah, 14		;;run program
  2099 00001E29 0F847D070000        <1> 	je near intx14
  2100 00001E2F 80FC0F              <1> 	cmp ah, 15		;;get program info-location of name/options/number of options/environmental vars
  2101 00001E32 0F8486070000        <1> 	je near intx15
  2102 00001E38 C3                  <1> 	ret
  2103                              <1> 	
  2104                              <1> ;;the jmp timerinterrupt's ensure that task switches occur
  2105                              <1> intx0:
  2106                              <1> 	%include 'source/interrupts/0_exit.asm'
  2107                              <2> exitprog:
  2108 00001E39 BC[5E9A0000]        <2> 	mov esp, stackend	;for now i need to use this
  2109 00001E3E 66B83000            <2> 	mov ax, NEW_DATA_SEL
  2110 00001E42 8ED8                <2> 	mov ds, ax
  2111 00001E44 8EC0                <2> 	mov es, ax
  2112 00001E46 8EE0                <2> 	mov fs, ax
  2113 00001E48 66B82000            <2> 	mov ax, SYS_DATA_SEL
  2114 00001E4C 8EE8                <2> 	mov gs, ax
  2115 00001E4E 81FB00000000        <2> 	cmp ebx, 0
  2116 00001E54 0F8505000000        <2> 	jne near .error
  2117 00001E5A E9850B0000          <2> 	jmp nwcmd
  2118                              <2> 	
  2119                              <2> .error:
  2120 00001E5F 89D9                <2> 	mov ecx, ebx
  2121 00001E61 B006                <2> 	mov al, 6
  2122 00001E63 A2[A42E0000]        <2> 	mov [firsthexshown], al
  2123 00001E68 51                  <2> 	push ecx
  2124 00001E69 BE[881E0000]        <2> 	mov esi, .msg1
  2125 00001E6E E844000000          <2> 	call printhighlight
  2126 00001E73 59                  <2> 	pop ecx
  2127 00001E74 E840100000          <2> 	call showhex
  2128 00001E79 BE[9D1E0000]        <2> 	mov esi, .msg2
  2129 00001E7E E834000000          <2> 	call printhighlight
  2130 00001E83 E95C0B0000          <2> 	jmp nwcmd
  2131                              <2> 	
  2132 00001E88 416E20657869742073- <2> .msg1 db "An exit status of 0x",0
  2133 00001E91 7461747573206F6620- <2>
  2134 00001E9A 307800              <2>
  2135 00001E9D 087761732072657475- <2> .msg2 db 8,"was returned.",10,0
  2136 00001EA6 726E65642E0A00      <2>
  2137                              <1> intx1:
  2138                              <1> 	%include 'source/interrupts/1_prntstr.asm'
  2139 00001EAD E82A000000          <2> call printint
  2140 00001EB2 E9D9E3FFFF          <2> jmp timerinterrupt
  2141                              <2> 
  2142                              <2> 	printhighlight:
  2143 00001EB7 6631C0              <2> 		xor ax, ax
  2144 00001EBA 66BBF000            <2> 		mov bx, 0xF0
  2145 00001EBE E919000000          <2> 		jmp printint
  2146                              <2> 	printquiet:
  2147 00001EC3 6631C0              <2> 		xor ax, ax
  2148 00001EC6 A2[071F0000]        <2> 		mov [endkeyprint], al
  2149 00001ECB 66BB0700            <2> 		mov bx, 7
  2150 00001ECF E820000000          <2> 		call printint.b
  2151 00001ED4 C3                  <2> 		ret
  2152                              <2>     print:
  2153 00001ED5 6631C0              <2> 		xor ax, ax
  2154 00001ED8 66BB0700            <2> 		mov bx, 7
  2155                              <2> 	printint:	;;print line, al=last key,bl=modifier, esi=buffer
  2156 00001EDC 56                  <2> 		push esi
  2157 00001EDD A2[071F0000]        <2> 		mov [endkeyprint], al
  2158 00001EE2 E80D000000          <2> 		call .b
  2159 00001EE7 89F1                <2> 		mov ecx, esi
  2160 00001EE9 5F                  <2> 		pop edi
  2161 00001EEA 29F9                <2> 		sub ecx, edi
  2162 00001EEC 51                  <2> 		push ecx
  2163 00001EED E802070000          <2> 		call termcopy
  2164 00001EF2 59                  <2> 		pop ecx
  2165 00001EF3 C3                  <2> 		ret
  2166                              <2> 	.b:
  2167 00001EF4 8A06                <2> 		mov al, [esi]
  2168 00001EF6 3A05[071F0000]      <2> 		cmp al, [endkeyprint]
  2169 00001EFC 7408                <2> 		je .done
  2170 00001EFE E898040000          <2> 		call prcharq
  2171 00001F03 46                  <2> 		inc esi
  2172 00001F04 EBEE                <2> 		jmp .b
  2173                              <2> 	.done:
  2174 00001F06 C3                  <2> 		ret
  2175                              <2> 
  2176 00001F07 00                  <2> endkeyprint db 0
  2177                              <1> intx2:
  2178                              <1> 	%include 'source/interrupts/2_readstr.asm'
  2179 00001F08 E805000000          <2> call readint
  2180 00001F0D E97EE3FFFF          <2> jmp timerinterrupt
  2181                              <2> 
  2182                              <2> 	readint:	;;get line, al=last key, esi = buffer, edi = endbuffer	
  2183 00001F12 89C3                <2> 		mov ebx, eax
  2184                              <2> 	.b:
  2185 00001F14 53                  <2> 		push ebx
  2186 00001F15 57                  <2> 		push edi
  2187 00001F16 56                  <2> 		push esi
  2188 00001F17 30C0                <2> 		xor al, al
  2189 00001F19 E81B040000          <2> 		call rdcharint
  2190 00001F1E 5E                  <2> 		pop esi
  2191 00001F1F 8806                <2> 		mov [esi], al
  2192 00001F21 46                  <2> 		inc esi
  2193 00001F22 5F                  <2> 		pop edi
  2194 00001F23 5B                  <2> 		pop ebx
  2195 00001F24 39FE                <2> 		cmp esi, edi
  2196 00001F26 7304                <2> 		jae .done
  2197 00001F28 38D8                <2> 		cmp al, bl
  2198 00001F2A 75E8                <2> 		jne .b
  2199                              <2> 	.done:
  2200 00001F2C 4E                  <2> 		dec esi
  2201 00001F2D C60600              <2> 		mov byte [esi], 0
  2202 00001F30 C3                  <2> 		ret
  2203                              <1> intx3:
  2204                              <1> 	%include 'source/interrupts/3_clearscrn.asm'
  2205 00001F31 E805000000          <2> call clear
  2206 00001F36 E955E3FFFF          <2> jmp timerinterrupt
  2207                              <2> clear:		
  2208 00001F3B 668B0D[5D250000]    <2> 		mov cx, [charxy]
  2209 00001F42 BF[50BC0000]        <2> 		mov edi, videobuf
  2210 00001F47 6631C0              <2> 		xor ax, ax
  2211 00001F4A 66A3[57250000]      <2> 		mov [linebeginpos], ax
  2212 00001F50 66A3[59250000]      <2> 		mov [videobufpos], ax
  2213 00001F56 6631D2              <2> 		xor dx, dx
  2214 00001F59 66A3[5B250000]      <2> 		mov [charpos], ax
  2215 00001F5F B407                <2> 		mov ah, 7
  2216                              <2> 	clearb:
  2217 00001F61 8807                <2> 		mov [edi], al
  2218 00001F63 886701              <2> 		mov [edi + 1], ah
  2219 00001F66 81C702000000        <2> 		add edi, 2
  2220 00001F6C FEC9                <2> 		dec cl
  2221 00001F6E 80F900              <2> 		cmp cl, 0
  2222 00001F71 75EE                <2> 		jne clearb
  2223 00001F73 8A0D[5D250000]      <2> 		mov cl, [charxy]
  2224 00001F79 FECD                <2> 		dec ch
  2225 00001F7B 80FD00              <2> 		cmp ch, 0
  2226 00001F7E 75E1                <2> 		jne clearb
  2227                              <2> 	cleardouble:
  2228 00001F80 BF[500C0100]        <2> 		mov edi, videobuf2
  2229 00001F85 668B0D[5D250000]    <2> 		mov cx, [charxy]
  2230 00001F8C 31C0                <2> 		xor eax, eax
  2231                              <2> 	clearc:
  2232 00001F8E 668907              <2> 		mov [edi], ax
  2233 00001F91 81C702000000        <2> 		add edi, 2
  2234 00001F97 FEC9                <2> 		dec cl
  2235 00001F99 80F900              <2> 		cmp cl, 0
  2236 00001F9C 75F0                <2> 		jne clearc
  2237 00001F9E 8A0D[5D250000]      <2> 		mov cl, [charxy]
  2238 00001FA4 FECD                <2> 		dec ch
  2239 00001FA6 80FD00              <2> 		cmp ch, 0
  2240 00001FA9 75E3                <2> 		jne clearc
  2241 00001FAB E844060000          <2> 		call termcopy
  2242 00001FB0 C3                  <2> 		ret
  2243                              <2> 		
  2244                              <1> intx4:
  2245                              <1> 	%include 'source/interrupts/4_prntreadstr.asm'
  2246 00001FB1 E809000000          <2> call rdprint
  2247 00001FB6 E9D5E2FFFF          <2> jmp timerinterrupt
  2248                              <2> 
  2249                              <2> readline:
  2250 00001FBB B00A                <2>   mov al, 10
  2251 00001FBD B307                <2>   mov bl, 7
  2252                              <2> 	rdprint:	;;print and get line, al=last key, bl=modifier, esi=buffer, edi=bufferend
  2253 00001FBF 8935[22230000]      <2> 		mov [buftxtloc], esi
  2254 00001FC5 A2[1A230000]        <2> 		mov [endkeyrdpr], al
  2255 00001FCA 881D[1B230000]      <2> 		mov [modkeyrdpr], bl
  2256 00001FD0 8935[1C230000]      <2> 		mov [firstesirdpr], esi
  2257 00001FD6 893D[26230000]      <2> 		mov [endbufferrdpr], edi
  2258                              <2> 	rdprintb:
  2259 00001FDC 56                  <2> 		push esi
  2260 00001FDD B001                <2> 		mov al, 1
  2261 00001FDF E855030000          <2> 		call rdcharint
  2262 00001FE4 5E                  <2> 		pop esi
  2263 00001FE5 803D[46520000]E0    <2> 		cmp byte [specialkey], 0xE0
  2264 00001FEC 751B                <2> 		jne notspecialrdprnt
  2265 00001FEE 80FC53              <2> 		cmp ah, 0x53
  2266 00001FF1 0F84E8020000        <2> 		je near rdprdel
  2267 00001FF7 80FC47              <2> 		cmp ah, 0x47
  2268 00001FFA 0F8407010000        <2> 		je near rdprhome
  2269 00002000 80FC4F              <2> 		cmp ah, 0x4F
  2270 00002003 0F841D010000        <2> 		je near rdprend
  2271                              <2> 	notspecialrdprnt:
  2272 00002009 80FC48              <2> 		cmp ah, 0x48
  2273 0000200C 0F84D5010000        <2> 		je near rdprup
  2274 00002012 80FC50              <2> 		cmp ah, 0x50
  2275 00002015 0F84AF010000        <2> 		je near rdprdown
  2276 0000201B 80FC4D              <2> 		cmp ah, 0x4D
  2277 0000201E 0F845E010000        <2> 		je near rdprright
  2278 00002024 80FC4B              <2> 		cmp ah, 0x4B
  2279 00002027 0F8416010000        <2> 		je near rdprleft
  2280 0000202D 3C08                <2> 		cmp al, 8
  2281 0000202F 0F84C5020000        <2> 		je near rdprbscheck
  2282 00002035 3C00                <2> 		cmp al, 0
  2283 00002037 74A3                <2> 		je rdprintb
  2284 00002039 80FC00              <2> 		cmp ah, 0
  2285 0000203C 749E                <2> 		je rdprintb
  2286 0000203E 8806                <2> 		mov [esi], al
  2287 00002040 46                  <2> 		inc esi
  2288                              <2> 	bscheckequal:
  2289 00002041 8A1D[1B230000]      <2> 		mov bl, [modkeyrdpr]
  2290 00002047 8A3D[21230000]      <2> 		mov bh, [txtmask]
  2291 0000204D 80FF00              <2> 		cmp bh, 0
  2292 00002050 7404                <2> 		je nomasktxt
  2293 00002052 88F8                <2> 		mov al, bh
  2294 00002054 30FF                <2> 		xor bh, bh
  2295                              <2> 	nomasktxt:
  2296 00002056 E82F030000          <2> 		call prcharint
  2297 0000205B 56                  <2> 		push esi
  2298 0000205C 66A3[18230000]      <2> 		mov [axcache], ax
  2299 00002062 8A25[1A230000]      <2> 		mov ah, [endkeyrdpr]
  2300 00002068 38E0                <2> 		cmp al, ah
  2301 0000206A 7429                <2> 		je nobackprintbuftxt2
  2302 0000206C BE[3AB10000]        <2> 		mov esi, buftxt2
  2303 00002071 E84DFEFFFF          <2> 		call printquiet
  2304 00002076 B020                <2> 		mov al, " "
  2305 00002078 E81E030000          <2> 		call prcharq
  2306 0000207D B008                <2> 		mov al, 8
  2307 0000207F 81FE[3AB10000]      <2> 		cmp esi, buftxt2
  2308 00002085 740E                <2> 		je nobackprintbuftxt2
  2309                              <2> 	backprintbuftxt2:
  2310 00002087 E80F030000          <2> 		call prcharq
  2311 0000208C 4E                  <2> 		dec esi
  2312 0000208D 81FE[3AB10000]      <2> 		cmp esi, buftxt2
  2313 00002093 77F2                <2> 		ja backprintbuftxt2
  2314                              <2> 	nobackprintbuftxt2:
  2315 00002095 3C0A                <2> 		cmp al, 10
  2316 00002097 7405                <2> 		je nonobackprint
  2317 00002099 E8EC020000          <2> 		call prcharint
  2318                              <2> 	nonobackprint:
  2319 0000209E 5E                  <2> 		pop esi
  2320 0000209F 3B35[26230000]      <2> 		cmp esi, [endbufferrdpr]
  2321 000020A5 0F8319000000        <2> 		jae near donerdprinc
  2322 000020AB 66A1[18230000]      <2> 		mov ax, [axcache]
  2323 000020B1 8A25[1A230000]      <2> 		mov ah, [endkeyrdpr]
  2324 000020B7 38E0                <2> 		cmp al, ah
  2325 000020B9 0F851DFFFFFF        <2> 		jne rdprintb
  2326 000020BF E901000000          <2> 		jmp donerdprint
  2327                              <2> 	donerdprinc:
  2328 000020C4 46                  <2> 		inc esi
  2329                              <2> 	donerdprint:
  2330 000020C5 4E                  <2> 		dec esi
  2331 000020C6 BF[3AB10000]        <2> 		mov edi, buftxt2
  2332                              <2> 	copylaterstuff:
  2333 000020CB 8A07                <2> 		mov al, [edi]
  2334 000020CD 3C00                <2> 		cmp al, 0
  2335 000020CF 7406                <2> 		je nocopylaterstuff
  2336 000020D1 8806                <2> 		mov [esi], al
  2337 000020D3 47                  <2> 		inc edi
  2338 000020D4 46                  <2> 		inc esi
  2339 000020D5 EBF4                <2> 		jmp copylaterstuff
  2340                              <2> 	nocopylaterstuff:
  2341 000020D7 C60600              <2> 		mov byte [esi], 0
  2342 000020DA E80B000000          <2> 		call clearbuftxt2
  2343 000020DF 89F1                <2> 		mov ecx, esi
  2344 000020E1 8B3D[1C230000]      <2> 		mov edi, [firstesirdpr]
  2345 000020E7 29F9                <2> 		sub ecx, edi
  2346 000020E9 C3                  <2> 		ret
  2347                              <2> 	
  2348                              <2> 	clearbuftxt2:
  2349 000020EA 30C0                <2> 		xor al, al
  2350 000020EC BF[3AB10000]        <2> 		mov edi, buftxt2
  2351                              <2> 	clearbuftxt2lp:
  2352 000020F1 8807                <2> 		mov [edi], al
  2353 000020F3 47                  <2> 		inc edi
  2354 000020F4 81FF[3AB50000]      <2> 		cmp edi, buftxt
  2355 000020FA 75F5                <2> 		jne clearbuftxt2lp
  2356 000020FC C3                  <2> 		ret
  2357                              <2> 	
  2358                              <2> 	rdprintb2:
  2359 000020FD E8F2040000          <2> 		call termcopy
  2360 00002102 E9D5FEFFFF          <2> 		jmp rdprintb
  2361                              <2> 		
  2362                              <2> 	rdprhome:
  2363 00002107 3B35[22230000]      <2> 		cmp esi, [buftxtloc]
  2364 0000210D 0F84EAFFFFFF        <2> 		je near rdprintb2
  2365 00002113 BF[3AB10000]        <2> 		mov edi, buftxt2
  2366 00002118 8A07                <2> 		mov al, [edi]
  2367 0000211A E846000000          <2> 		call shiftbuftxt2
  2368 0000211F E877020000          <2> 		call prcharq
  2369 00002124 EBE1                <2> 		jmp rdprhome
  2370                              <2> 		
  2371                              <2> 	rdprend:
  2372 00002126 BF[3AB10000]        <2> 		mov edi, buftxt2
  2373 0000212B 8A07                <2> 		mov al, [edi]
  2374 0000212D 3C00                <2> 		cmp al, 0
  2375 0000212F 0F84C8FFFFFF        <2> 		je near rdprintb2
  2376 00002135 8806                <2> 		mov [esi], al
  2377 00002137 E866000000          <2> 		call shiftbuftxt2lft
  2378 0000213C E85A020000          <2> 		call prcharq
  2379 00002141 EBE3                <2> 		jmp rdprend
  2380                              <2> 	
  2381                              <2> 	rdprleft:
  2382 00002143 3B35[22230000]      <2> 		cmp esi, [buftxtloc]
  2383 00002149 0F848DFEFFFF        <2> 		je near rdprintb
  2384 0000214F BF[3AB10000]        <2> 		mov edi, buftxt2
  2385 00002154 8A07                <2> 		mov al, [edi]
  2386 00002156 E80A000000          <2> 		call shiftbuftxt2
  2387 0000215B E82A020000          <2> 		call prcharint
  2388 00002160 E977FEFFFF          <2> 		jmp rdprintb
  2389                              <2> 	shiftbuftxt2:
  2390 00002165 3C00                <2> 		cmp al, 0
  2391 00002167 7409                <2> 		je noshiftbuftxt2
  2392 00002169 47                  <2> 		inc edi
  2393 0000216A 8A27                <2> 		mov ah, [edi]
  2394 0000216C 8807                <2> 		mov [edi], al
  2395 0000216E 88E0                <2> 		mov al, ah
  2396 00002170 EBF3                <2> 		jmp shiftbuftxt2
  2397                              <2> 	noshiftbuftxt2:
  2398 00002172 BF[3AB10000]        <2> 		mov edi, buftxt2
  2399 00002177 4E                  <2> 		dec esi
  2400 00002178 8A06                <2> 		mov al, [esi]
  2401 0000217A 8807                <2> 		mov [edi], al
  2402 0000217C C60600              <2> 		mov byte [esi], 0
  2403 0000217F B008                <2> 		mov al, 8
  2404 00002181 C3                  <2> 		ret
  2405                              <2> 		
  2406                              <2> 	rdprright:
  2407 00002182 BF[3AB10000]        <2> 		mov edi, buftxt2
  2408 00002187 8A07                <2> 		mov al, [edi]
  2409 00002189 3C00                <2> 		cmp al, 0
  2410 0000218B 0F844BFEFFFF        <2> 		je near rdprintb
  2411 00002191 8806                <2> 		mov [esi], al
  2412 00002193 E80A000000          <2> 		call shiftbuftxt2lft
  2413 00002198 E8ED010000          <2> 		call prcharint
  2414 0000219D E93AFEFFFF          <2> 		jmp rdprintb
  2415                              <2> 	shiftbuftxt2lft:
  2416 000021A2 3C00                <2> 		cmp al, 0
  2417 000021A4 7408                <2> 		je noshiftbuftxt2lft
  2418 000021A6 47                  <2> 		inc edi
  2419 000021A7 8A07                <2> 		mov al, [edi]
  2420 000021A9 8847FF              <2> 		mov [edi - 1], al
  2421 000021AC EBF4                <2> 		jmp shiftbuftxt2lft
  2422                              <2> 	noshiftbuftxt2lft:
  2423 000021AE 8A06                <2> 		mov al, [esi]
  2424 000021B0 46                  <2> 		inc esi
  2425 000021B1 8A1D[1B230000]      <2> 		mov bl, [modkeyrdpr]
  2426 000021B7 C3                  <2> 		ret
  2427                              <2> 		
  2428                              <2> 	rdprdownbck:
  2429 000021B8 FECC                <2> 		dec ah
  2430 000021BA 8825[20230000]      <2> 		mov [commandedit], ah
  2431 000021C0 E83A000000          <2> 		call rdprbckspc
  2432 000021C5 E912FEFFFF          <2> 		jmp rdprintb
  2433                              <2> 	
  2434                              <2> 	rdprdown:
  2435 000021CA 8A25[20230000]      <2> 		mov ah, [commandedit]
  2436 000021D0 80FC01              <2> 		cmp ah, 1
  2437 000021D3 0F8603FEFFFF        <2> 		jbe near rdprintb
  2438 000021D9 80FC02              <2> 		cmp ah, 2
  2439 000021DC 74DA                <2> 		je rdprdownbck
  2440 000021DE 80EC02              <2> 		sub ah, 2
  2441 000021E1 8825[20230000]      <2> 		mov [commandedit], ah
  2442                              <2> 		
  2443                              <2> 	rdprup:
  2444 000021E7 30C0                <2> 		xor al, al
  2445 000021E9 3805[20230000]      <2> 		cmp [commandedit], al
  2446 000021EF 0F84E7FDFFFF        <2> 		je near rdprintb
  2447 000021F5 E805000000          <2> 		call rdprbckspc
  2448 000021FA E941000000          <2> 		jmp getcurrentcommandstr
  2449                              <2> 	rdprbckspc:
  2450 000021FF 3B35[22230000]      <2> 		cmp esi, [buftxtloc]
  2451 00002205 742B                <2> 		je nordprupbck
  2452                              <2> 	rdprupbckspclp:
  2453 00002207 B008                <2> 		mov al, 8
  2454 00002209 8A1D[1B230000]      <2> 		mov bl, [modkeyrdpr]
  2455 0000220F E887010000          <2> 		call prcharq
  2456 00002214 B020                <2> 		mov al, " "
  2457 00002216 E880010000          <2> 		call prcharq
  2458 0000221B B008                <2> 		mov al, 8
  2459 0000221D E879010000          <2> 		call prcharq
  2460 00002222 4E                  <2> 		dec esi
  2461 00002223 3B35[22230000]      <2> 		cmp esi, [buftxtloc]
  2462 00002229 7402                <2> 		je nordprupbck2
  2463 0000222B EBDA                <2> 		jmp rdprupbckspclp
  2464                              <2> 	nordprupbck2:
  2465 0000222D E8C2030000          <2> 		call termcopy
  2466                              <2> 	nordprupbck:
  2467 00002232 8B3D[545C0100]      <2> 		mov edi, [commandbufpos]
  2468 00002238 81C7[585C0100]      <2> 		add edi, commandbuf
  2469 0000223E 4F                  <2> 		dec edi
  2470 0000223F C3                  <2> 		ret
  2471                              <2> 	getcurrentcommandstr:
  2472 00002240 8A25[20230000]      <2> 		mov ah, [commandedit]
  2473 00002246 FE05[20230000]      <2> 		inc byte [commandedit]
  2474                              <2> 	getccmdlp:
  2475 0000224C 4F                  <2> 		dec edi
  2476 0000224D 8A07                <2> 		mov al, [edi]
  2477 0000224F 81FF[585C0100]      <2> 		cmp edi, commandbuf
  2478 00002255 7231                <2> 		jb getcmdresetcommandbuf
  2479 00002257 81EF[585C0100]      <2> 		sub edi, commandbuf
  2480 0000225D 3B3D[545C0100]      <2> 		cmp edi, [commandbufpos]
  2481 00002263 0F8473FDFFFF        <2> 		je near rdprintb
  2482 00002269 81C7[585C0100]      <2> 		add edi, commandbuf
  2483 0000226F 3C00                <2> 		cmp al, 0
  2484 00002271 75D9                <2> 		jne getccmdlp
  2485 00002273 FECC                <2> 		dec ah
  2486 00002275 80FC00              <2> 		cmp ah, 0
  2487 00002278 77D2                <2> 		ja getccmdlp
  2488 0000227A 47                  <2> 		inc edi
  2489 0000227B 81FF[586C0100]      <2> 		cmp edi, commandbufend
  2490 00002281 770D                <2> 		ja fixcmdbufb4morerdpr
  2491 00002283 E915000000          <2> 		jmp morerdprup
  2492                              <2> 	getcmdresetcommandbuf:
  2493 00002288 BF[586C0100]        <2> 		mov edi, commandbufend
  2494 0000228D 47                  <2> 		inc edi
  2495 0000228E EBBC                <2> 		jmp getccmdlp
  2496                              <2> 	fixcmdbufb4morerdpr:
  2497 00002290 4F                  <2> 		dec edi
  2498 00002291 81EF[586C0100]      <2> 		sub edi, commandbufend
  2499 00002297 81C7[585C0100]      <2> 		add edi, commandbuf
  2500                              <2> 	morerdprup:
  2501 0000229D 8A07                <2> 		mov al, [edi]
  2502 0000229F 47                  <2> 		inc edi
  2503 000022A0 81EF[585C0100]      <2> 		sub edi, commandbuf
  2504 000022A6 3C00                <2> 		cmp al, 0
  2505 000022A8 0F844FFEFFFF        <2> 		je near rdprintb2
  2506 000022AE 3B3D[545C0100]      <2> 		cmp edi, [commandbufpos]
  2507 000022B4 0F8343FEFFFF        <2> 		jae near rdprintb2
  2508 000022BA 81C7[585C0100]      <2> 		add edi, commandbuf
  2509 000022C0 8806                <2> 		mov [esi], al
  2510 000022C2 46                  <2> 		inc esi
  2511 000022C3 57                  <2> 		push edi
  2512 000022C4 8A1D[1B230000]      <2> 		mov bl, [modkeyrdpr]
  2513 000022CA E8CC000000          <2> 		call prcharq
  2514 000022CF 5F                  <2> 		pop edi
  2515 000022D0 81FF[586C0100]      <2> 		cmp edi, commandbufend
  2516 000022D6 76C5                <2> 		jbe morerdprup
  2517 000022D8 BF[585C0100]        <2> 		mov edi, commandbuf
  2518 000022DD EBBE                <2> 		jmp morerdprup
  2519                              <2> 		
  2520                              <2> 	rdprdel:
  2521 000022DF BF[3AB10000]        <2> 		mov edi, buftxt2
  2522 000022E4 8A07                <2> 		mov al, [edi]
  2523 000022E6 3C00                <2> 		cmp al, 0
  2524 000022E8 0F84EEFCFFFF        <2> 		je near rdprintb
  2525 000022EE 8806                <2> 		mov [esi], al
  2526 000022F0 E8ADFEFFFF          <2> 		call shiftbuftxt2lft
  2527 000022F5 E8A1000000          <2> 		call prcharq
  2528                              <2> 	rdprbscheck:
  2529 000022FA 3B35[1C230000]      <2> 		cmp esi, [firstesirdpr]
  2530 00002300 7705                <2> 		ja goodbscheck
  2531 00002302 E9D5FCFFFF          <2> 		jmp rdprintb
  2532                              <2> 	goodbscheck:
  2533 00002307 4E                  <2> 		dec esi
  2534 00002308 C60600              <2> 		mov byte [esi], 0
  2535 0000230B 8A1D[1B230000]      <2> 		mov bl, [modkeyrdpr]
  2536 00002311 B008                <2> 		mov al, 8
  2537 00002313 E929FDFFFF          <2> 		jmp bscheckequal
  2538                              <2> 		
  2539 00002318 0000                <2> axcache dw 0
  2540 0000231A 00                  <2> endkeyrdpr db 0
  2541 0000231B 00                  <2> modkeyrdpr db 0
  2542 0000231C 00000000            <2> firstesirdpr dd 0
  2543 00002320 00                  <2> commandedit db 0
  2544 00002321 00                  <2> txtmask db 0
  2545 00002322 00000000            <2> buftxtloc dd 0
  2546 00002326 00000000            <2> endbufferrdpr dd 0
  2547 0000232A 082000              <2> backcursor db 8," ",0
  2548                              <1> intx5:
  2549                              <1> 	%include 'source/interrupts/5_readchar.asm'
  2550 0000232D E807000000          <2> 	call rdcharint
  2551 00002332 E959DFFFFF          <2> 	jmp timerinterrupt
  2552                              <2> 	
  2553                              <2> getchar:
  2554 00002337 30C0                <2> 	xor al, al
  2555                              <2> 	rdcharint:		;;get char, if al is 0, wait for key
  2556 00002339 C605[7F230000]01    <2> 		mov byte [trans], 1
  2557 00002340 3C00                <2> 		cmp al, 0
  2558 00002342 7507                <2> 		jne transcheck
  2559 00002344 C605[7F230000]00    <2> 		mov byte [trans], 0
  2560                              <2> 	transcheck:
  2561 0000234B E8162F0000          <2> 		call getkey
  2562 00002350 8A3D[7F230000]      <2> 		mov bh, [trans]
  2563 00002356 66A1[7D230000]      <2> 		mov ax, [lastkey]
  2564 0000235C 80FC1C              <2> 		cmp ah, 1Ch
  2565 0000235F 7419                <2> 		je rdenter
  2566 00002361 803D[46520000]E0    <2> 		cmp byte [specialkey], 0xE0
  2567 00002368 7504                <2> 		jne nospecialtrans
  2568 0000236A 88C3                <2> 		mov bl, al
  2569 0000236C 30C0                <2> 		xor al, al
  2570                              <2> 	nospecialtrans:
  2571 0000236E 08C7                <2> 		or bh, al
  2572 00002370 80FF00              <2> 		cmp bh, 0
  2573 00002373 74D6                <2> 		je transcheck
  2574 00002375 E902000000          <2> 		jmp rdend
  2575                              <2> 	rdenter:
  2576 0000237A B00A                <2> 		mov al, 10
  2577                              <2> 	rdend:
  2578 0000237C C3                  <2> 		ret
  2579                              <2> 		
  2580 0000237D 0000                <2> lastkey db 0,0
  2581 0000237F 00                  <2> trans db 0
  2582                              <1> intx6:
  2583                              <1> 	%include 'source/interrupts/6_prntchar.asm'
  2584 00002380 E805000000          <2> call prcharint
  2585 00002385 E906DFFFFF          <2> jmp timerinterrupt
  2586                              <2> 	
  2587                              <2> prcharint:	;;print char, char in al, modifier in bl, if bh = bl then termcopy will not happen, will run videobufcopy if called as is
  2588 0000238A 38FB                <2> 	cmp bl, bh
  2589 0000238C 740D                <2> 	je prcharq
  2590 0000238E E808000000          <2> 	call prcharq
  2591 00002393 E85C020000          <2> 	call termcopy
  2592 00002398 C3                  <2> 	ret
  2593 00002399 00                  <2> termguion db 0
  2594 0000239A 00                  <2> termcopyon db 0
  2595                              <2> prcharq:
  2596 0000239B 88DC                <2> 	mov ah, bl
  2597 0000239D 66A3[5F250000]      <2> 	mov [charbuf], ax
  2598 000023A3 31DB                <2> 	xor ebx, ebx
  2599 000023A5 668B1D[59250000]    <2> 	mov bx, [videobufpos]
  2600 000023AC BF[50BC0000]        <2> 	mov edi, videobuf
  2601 000023B1 01DF                <2> 	add edi, ebx
  2602 000023B3 66A1[F2250000]      <2> 	mov ax, [removedvideo]
  2603 000023B9 668907              <2> 	mov [edi], ax
  2604 000023BC 66A1[5F250000]      <2> 	mov ax, [charbuf]
  2605 000023C2 31D2                <2> 	xor edx, edx
  2606 000023C4 668B15[5B250000]    <2> 	mov dx, [charpos]
  2607 000023CB 31C9                <2> 	xor ecx, ecx
  2608 000023CD 668B0D[5D250000]    <2> 	mov cx, [charxy]
  2609 000023D4 3C09                <2> 	cmp al, 9
  2610 000023D6 0F8463000000        <2> 	je near prtab
  2611 000023DC 3C0D                <2> 	cmp al, 13		;I am phasing this out-it is used by windows but not unix based systems
  2612 000023DE 0F848B000000        <2> 	je near prcr
  2613 000023E4 3C0A                <2> 	cmp al, 10
  2614 000023E6 0F84B7000000        <2> 	je near prnlcr
  2615 000023EC 3C08                <2> 	cmp al, 8
  2616 000023EE 0F848F000000        <2> 	je near prbs
  2617 000023F4 3CFF                <2> 	cmp al, 255		;;null character
  2618 000023F6 0F841B000000        <2> 	je near donescr
  2619 000023FC 668907              <2> 	mov [edi], ax
  2620 000023FF 81C702000000        <2> 	add edi, 2
  2621 00002405 FEC2                <2> 	inc dl
  2622                              <2> donecrnl:
  2623 00002407 38CA                <2> 	cmp dl, cl
  2624 00002409 0F83B9000000        <2> 	jae near preol
  2625                              <2> doneeol:
  2626 0000240F 38EE                <2> 	cmp dh, ch
  2627 00002411 0F83CF000000        <2> 	jae near prscr	
  2628                              <2> donescr:
  2629 00002417 89FB                <2> 	mov ebx, edi
  2630 00002419 668B07              <2> 	mov ax, [edi]
  2631 0000241C 66A3[F2250000]      <2> 	mov [removedvideo], ax
  2632 00002422 81EB[50BC0000]      <2> 	sub ebx, videobuf
  2633 00002428 66891D[59250000]    <2> 	mov [videobufpos], bx
  2634 0000242F 668915[5B250000]    <2> 	mov [charpos], dx
  2635 00002436 66A1[5F250000]      <2> 	mov ax, [charbuf]
  2636 0000243C 88E3                <2> 	mov bl, ah
  2637 0000243E C3                  <2> 	ret
  2638                              <2> 	
  2639                              <2> 	prtab:
  2640 0000243F 31DB                <2> 		xor ebx, ebx
  2641 00002441 668B1D[57250000]    <2> 		mov bx, [linebeginpos]
  2642 00002448 81EF[50BC0000]      <2> 		sub edi, videobuf
  2643 0000244E 29DF                <2> 		sub edi, ebx
  2644 00002450 C1EF04              <2> 		shr edi, 4
  2645 00002453 C1E704              <2> 		shl edi, 4
  2646 00002456 81C710000000        <2> 		add edi, 16
  2647 0000245C C0EA03              <2> 		shr dl, 3
  2648 0000245F C0E203              <2> 		shl dl, 3
  2649 00002462 80C208              <2> 		add dl, 8
  2650 00002465 81C7[50BC0000]      <2> 		add edi, videobuf
  2651 0000246B 01DF                <2> 		add edi, ebx
  2652 0000246D EB98                <2> 		jmp donecrnl
  2653                              <2> 	
  2654                              <2> 	prcr:
  2655 0000246F 30D2                <2> 		xor dl, dl
  2656 00002471 31DB                <2> 		xor ebx, ebx
  2657 00002473 BF[50BC0000]        <2> 		mov edi, videobuf
  2658 00002478 668B1D[57250000]    <2> 		mov bx, [linebeginpos]
  2659 0000247F 01DF                <2> 		add edi, ebx
  2660 00002481 EB84                <2> 		jmp donecrnl
  2661                              <2> 			
  2662                              <2> 	prbs:
  2663 00002483 80FA00              <2> 		cmp dl, 0
  2664 00002486 7410                <2> 		je prbackline
  2665                              <2> 	prnobmr:
  2666 00002488 FECA                <2> 		dec dl
  2667 0000248A 6631C0              <2> 		xor ax, ax
  2668 0000248D 81EF02000000        <2> 		sub edi, 2
  2669 00002493 E96FFFFFFF          <2> 		jmp donecrnl
  2670                              <2> 	prbackline:
  2671 00002498 88CA                <2> 		mov dl, cl
  2672 0000249A 80FE00              <2> 		cmp dh, 0
  2673 0000249D 74E9                <2> 		je prnobmr
  2674 0000249F FECE                <2> 		dec dh
  2675 000024A1 EBE5                <2> 		jmp prnobmr
  2676                              <2> 		
  2677                              <2> 	prnlcr:
  2678 000024A3 FEC6                <2> 		inc dh
  2679 000024A5 31DB                <2> 		xor ebx, ebx
  2680 000024A7 30D2                <2> 		xor dl, dl
  2681 000024A9 88CB                <2> 		mov bl, cl
  2682 000024AB 66D1E3              <2> 		shl bx, 1
  2683 000024AE BF[50BC0000]        <2> 		mov edi, videobuf
  2684 000024B3 66031D[57250000]    <2> 		add bx, [linebeginpos]
  2685 000024BA 66891D[57250000]    <2> 		mov [linebeginpos], bx
  2686 000024C1 01DF                <2> 		add edi, ebx
  2687 000024C3 E93FFFFFFF          <2> 		jmp donecrnl
  2688                              <2> 		
  2689                              <2> 	preol:
  2690 000024C8 30D2                <2> 		xor dl, dl
  2691 000024CA FEC6                <2> 		inc dh
  2692 000024CC 31DB                <2> 		xor ebx, ebx
  2693 000024CE 88CB                <2> 		mov bl, cl
  2694 000024D0 66D1E3              <2> 		shl bx, 1
  2695 000024D3 66031D[57250000]    <2> 		add bx, [linebeginpos]
  2696 000024DA 66891D[57250000]    <2> 		mov [linebeginpos], bx
  2697 000024E1 E929FFFFFF          <2> 		jmp doneeol
  2698                              <2> 	prscr:
  2699 000024E6 FECE                <2> 		dec dh
  2700 000024E8 BF[50BC0000]        <2> 		mov edi, videobuf
  2701 000024ED 31DB                <2> 		xor ebx, ebx
  2702 000024EF 88CB                <2> 		mov bl, cl
  2703 000024F1 66D1E3              <2> 		shl bx, 1
  2704 000024F4 01FB                <2> 		add ebx, edi
  2705                              <2> 	intscrollloop:
  2706 000024F6 668B03              <2> 		mov ax, [ebx]
  2707 000024F9 668907              <2> 		mov [edi], ax
  2708 000024FC 81C702000000        <2> 		add edi, 2
  2709 00002502 81C302000000        <2> 		add ebx, 2
  2710 00002508 FEC9                <2> 		dec cl
  2711 0000250A 80F900              <2> 		cmp cl, 0
  2712 0000250D 75E7                <2> 		jne intscrollloop
  2713 0000250F 8A0D[5D250000]      <2> 		mov cl, [charxy]
  2714 00002515 FECD                <2> 		dec ch
  2715 00002517 80FD01              <2> 		cmp ch, 1
  2716 0000251A 77DA                <2> 		ja intscrollloop
  2717 0000251C 6631C0              <2> 		xor ax, ax
  2718 0000251F 81EF[50BC0000]      <2> 		sub edi, videobuf
  2719 00002525 66893D[57250000]    <2> 		mov [linebeginpos], di
  2720 0000252C 81C7[50BC0000]      <2> 		add edi, videobuf
  2721 00002532 89FB                <2> 		mov ebx, edi
  2722                              <2> 	intloopclear:
  2723 00002534 668903              <2> 		mov [ebx], ax
  2724 00002537 81C302000000        <2> 		add ebx, 2
  2725 0000253D FEC9                <2> 		dec cl
  2726 0000253F 80F900              <2> 		cmp cl, 0
  2727 00002542 75F0                <2> 		jne intloopclear
  2728 00002544 FECD                <2> 		dec ch
  2729 00002546 80FD00              <2> 		cmp ch, 0
  2730 00002549 75E9                <2> 		jne intloopclear
  2731 0000254B 668B0D[5D250000]    <2> 		mov cx, [charxy]
  2732 00002552 E9C0FEFFFF          <2> 		jmp donescr
  2733                              <2> 		
  2734 00002557 0000                <2> linebeginpos dw 0
  2735 00002559 0000                <2> videobufpos: dw 0
  2736 0000255B 0000                <2> charpos db 0,0
  2737 0000255D 501E                <2> charxy db 80,30
  2738 0000255F 0000                <2> charbuf dw 0
  2739                              <1> intx7:
  2740                              <1> 	%include 'source/interrupts/7_openfile.asm'
  2741 00002561 E81F330000          <2> 	call loadfile
  2742 00002566 E925DDFFFF          <2> 	jmp timerinterrupt
  2743                              <1> intx9:
  2744                              <1> 	%include 'source/interrupts/9_num2str.asm'
  2745 0000256B 3C00                <2> 	cmp al, 0
  2746 0000256D 750A                <2> 	jne num2strb
  2747 0000256F E80F0A0000          <2> 	call showdec
  2748 00002574 E917DDFFFF          <2> 	jmp timerinterrupt
  2749                              <2> num2strb:
  2750 00002579 E83B090000          <2> 	call showhex
  2751 0000257E E90DDDFFFF          <2> 	jmp timerinterrupt
  2752                              <1> intx10:
  2753                              <1> 	%include 'source/interrupts/10_str2num.asm'
  2754 00002583 E8DD0A0000          <2> 	call cnvrttxt	;the string goes into esi, number into ecx
  2755 00002588 CF                  <2> 	iret
  2756                              <2> 	
  2757                              <1> intx11:
  2758                              <1> 	%include 'source/interrupts/11_forkthread.asm'
  2759 00002589 E812380000          <2> 	call threadfork
  2760 0000258E CF                  <2> 	iret
  2761                              <1> intx12:
  2762                              <1> 	%include 'source/interrupts/12_gettime.asm'
  2763 0000258F A1[44020000]        <2> 	mov eax, [timeseconds]
  2764 00002594 8B1D[48020000]      <2> 	mov ebx, [timenanoseconds]
  2765 0000259A 89D9                <2> 	mov ecx, ebx
  2766 0000259C C1E90A              <2> 	shr ecx, 10	;this is in microseconds
  2767 0000259F CF                  <2> 	iret
  2768                              <2> 	
  2769                              <1> intx13:
  2770                              <1> 	%include 'source/interrupts/13_settime.asm'
  2771 000025A0 A3[44020000]        <2> 	mov [timeseconds], eax
  2772 000025A5 891D[48020000]      <2> 	mov [timenanoseconds], ebx
  2773 000025AB CF                  <2> 	iret
  2774                              <2> 	
  2775                              <1> intx14:
  2776                              <1> 	%include 'source/interrupts/14_runcmd.asm'
  2777 000025AC BF[3AB50000]        <2> 	mov edi, buftxt
  2778                              <2> cpccmd:
  2779 000025B1 8A06                <2> 	mov al, [esi]
  2780 000025B3 8807                <2> 	mov [edi], al
  2781 000025B5 46                  <2> 	inc esi
  2782 000025B6 47                  <2> 	inc edi
  2783 000025B7 E2F8                <2> 	loop cpccmd
  2784 000025B9 E9F6050000          <2> 	jmp run
  2785                              <1> intx15:
  2786                              <1> 	%include 'source/interrupts/15_proginfo.asm'
  2787 000025BE BB[3AA10000]        <2> 	mov ebx, variables
  2788 000025C3 8B35[922C0000]      <2> 	mov esi, [currentcommandloc]
  2789 000025C9 89F7                <2> 	mov edi, esi
  2790 000025CB 31C9                <2> 	xor ecx, ecx
  2791                              <2> getcommandzeroes:
  2792 000025CD 8A07                <2> 	mov al, [edi]
  2793 000025CF 47                  <2> 	inc edi
  2794 000025D0 3C3B                <2> 	cmp al, ';'
  2795 000025D2 740B                <2> 	je nomorezeroes
  2796 000025D4 3C00                <2> 	cmp al, 0
  2797 000025D6 7407                <2> 	je nomorezeroes
  2798 000025D8 3C20                <2> 	cmp al, ' '
  2799 000025DA 75F1                <2> 	jne getcommandzeroes
  2800 000025DC 41                  <2> 	inc ecx
  2801 000025DD EBEE                <2> 	jmp getcommandzeroes
  2802                              <2> nomorezeroes:
  2803 000025DF 41                  <2> 	inc ecx
  2804 000025E0 4F                  <2> 	dec edi
  2805 000025E1 8B1D[C6A00000]      <2> 	mov ebx, [uid]
  2806 000025E7 8B15[865F0000]      <2> 	mov edx, [currentthread]
  2807 000025ED CF                  <2> 	iret
  2808                              <2> 	
  2809                              <1> 		
  2810 000025EE 00000000            <1> 	termcursorpos dd 0
  2811 000025F2 0000                <1> 	removedvideo dw 0
  2812                              <1> termcopy:	
  2813 000025F4 60                  <1> 	pusha
  2814 000025F5 BF[50BC0000]        <1> 	mov edi, videobuf
  2815 000025FA 31DB                <1> 	xor ebx, ebx
  2816 000025FC 668B1D[59250000]    <1> 	mov bx, [videobufpos]
  2817 00002603 01DF                <1> 	add edi, ebx
  2818 00002605 893D[EE250000]      <1> 	mov [termcursorpos], edi
  2819 0000260B E8CB000000          <1> 	call switchtermcursor
  2820 00002610 803D[78880000]00    <1> 	cmp byte [guion], 0
  2821 00002617 0F8420000000        <1> 	je near nowincopy
  2822                              <1> %ifdef gui.included
  2823 0000261D C605[03610000]00    <1> 	mov byte [mouseselecton], 0
  2824 00002624 C605[9A230000]01    <1> 	mov byte [termcopyon], 1
  2825 0000262B 803D[99230000]01    <1> 	cmp byte [termguion], 1
  2826 00002632 0F84E4460000        <1> 	je near windowvideocopy
  2827                              <1> %endif
  2828 00002638 E997000000          <1> 	jmp nocopytermatall
  2829                              <1> nowincopy:
  2830 0000263D BE00000A00          <1> 	mov esi, 0xA0000
  2831 00002642 A1[31020000]        <1> 	mov eax, [basecache]
  2832 00002647 C1E004              <1> 	shl eax, 4
  2833 0000264A 29C6                <1> 	sub esi, eax
  2834 0000264C BF[50BC0000]        <1> 	mov edi, videobuf
  2835 00002651 31C9                <1> 	xor ecx, ecx
  2836 00002653 668B0D[5D250000]    <1> 	mov cx, [charxy]
  2837                              <1> nowincopy2:
  2838 0000265A 668B07              <1> 	mov ax, [edi]
  2839 0000265D 81C700500000        <1> 	add edi, (videobuf2 - videobuf)
  2840 00002663 668B1F              <1> 	mov bx, [edi]
  2841 00002666 668907              <1> 	mov [edi], ax
  2842 00002669 81EF00500000        <1> 	sub edi, (videobuf2 - videobuf)
  2843 0000266F 47                  <1> 	inc edi
  2844 00002670 6639D8              <1> 	cmp ax, bx
  2845 00002673 743E                <1> 	je nopresentwinfont
  2846 00002675 4F                  <1> 	dec edi
  2847 00002676 BB[0D770000]        <1> 	mov ebx, fonts
  2848 0000267B 31C0                <1> 	xor eax, eax
  2849 0000267D 8A07                <1> 	mov al, [edi]
  2850 0000267F C1E004              <1> 	shl eax, 4
  2851 00002682 01C3                <1> 	add ebx, eax
  2852 00002684 47                  <1> 	inc edi
  2853 00002685 8A27                <1> 	mov ah, [edi]
  2854 00002687 31D2                <1> 	xor edx, edx
  2855 00002689 8A15[5D250000]      <1> 	mov dl, [charxy]
  2856 0000268F C1C110              <1> 	rol ecx, 16
  2857 00002692 B110                <1> 	mov cl, 16
  2858                              <1> nowinfont:
  2859 00002694 8A03                <1> 	mov al, [ebx]
  2860 00002696 D0C8                <1> 	ror al, 1
  2861 00002698 80FC07              <1> 	cmp ah, 7
  2862 0000269B 7602                <1> 	jbe notnotfont
  2863 0000269D F6D0                <1> 	not al
  2864                              <1> notnotfont:
  2865 0000269F 8806                <1> 	mov [esi], al
  2866 000026A1 01D6                <1> 	add esi, edx
  2867 000026A3 43                  <1> 	inc ebx
  2868 000026A4 FEC9                <1> 	dec cl
  2869 000026A6 80F900              <1> 	cmp cl, 0
  2870 000026A9 75E9                <1> 	jne nowinfont
  2871 000026AB C1E204              <1> 	shl edx, 4
  2872 000026AE 29D6                <1> 	sub esi, edx
  2873 000026B0 C1C110              <1> 	rol ecx, 16
  2874                              <1> nopresentwinfont:
  2875 000026B3 47                  <1> 	inc edi
  2876 000026B4 46                  <1> 	inc esi
  2877 000026B5 FEC9                <1> 	dec cl
  2878 000026B7 80F900              <1> 	cmp cl, 0
  2879 000026BA 759E                <1> 	jne nowincopy2
  2880 000026BC 8A0D[5D250000]      <1> 	mov cl, [charxy]
  2881 000026C2 31D2                <1> 	xor edx, edx
  2882 000026C4 88CA                <1> 	mov dl, cl
  2883 000026C6 29D6                <1> 	sub esi, edx
  2884 000026C8 C1E204              <1> 	shl edx, 4
  2885 000026CB 01D6                <1> 	add esi, edx
  2886 000026CD FECD                <1> 	dec ch
  2887 000026CF 80FD00              <1> 	cmp ch, 0
  2888 000026D2 7586                <1> 	jne nowincopy2
  2889                              <1> nocopytermatall:
  2890 000026D4 E802000000          <1> 	call switchtermcursor
  2891 000026D9 61                  <1> 	popa
  2892 000026DA C3                  <1> 	ret
  2893                              <1> 	
  2894                              <1> switchtermcursor:
  2895 000026DB 8B3D[EE250000]      <1> 	mov edi, [termcursorpos]
  2896 000026E1 8A4701              <1> 	mov al, [edi + 1]
  2897 000026E4 8A27                <1> 	mov ah, [edi]
  2898 000026E6 3C07                <1> 	cmp al, 7
  2899 000026E8 7607                <1> 	jbe movlargecursorterm
  2900 000026EA B007                <1> 	mov al, 7
  2901 000026EC E902000000          <1> 	jmp movedcursorterm
  2902                              <1> movlargecursorterm:
  2903 000026F1 B0F0                <1> 	mov al, 0xF0
  2904                              <1> movedcursorterm:
  2905 000026F3 884701              <1> 	mov [edi + 1], al
  2906 000026F6 80FC00              <1> 	cmp ah, 0
  2907 000026F9 7504                <1> 	jne fixednocursorterm
  2908 000026FB B420                <1> 	mov ah, " "
  2909 000026FD 8827                <1> 	mov [edi], ah
  2910                              <1> fixednocursorterm:
  2911 000026FF C3                  <1> 	ret
  2912                                      %include "source/dosints.asm"
  2913                              <1> int20h:
  2914 00002700 66B8004C            <1> mov ax, 0x4C00
  2915                              <1> int21h:
  2916                              <1> dostosolleros:
  2917 00002704 6650                <1> 	push ax
  2918 00002706 66B83000            <1> 	mov ax, NEW_DATA_SEL
  2919 0000270A 8ED8                <1> 	mov ds, ax
  2920 0000270C 8EC0                <1> 	mov es, ax
  2921 0000270E 8EE0                <1> 	mov fs, ax
  2922 00002710 66B82000            <1> 	mov ax, SYS_DATA_SEL
  2923 00002714 8EE8                <1> 	mov gs, ax
  2924 00002716 6658                <1> 	pop ax
  2925 00002718 9C                  <1> 	pushf
  2926 00002719 60                  <1> 	pusha
  2927 0000271A 80FC01              <1> 	cmp ah, 1
  2928 0000271D 0F8449000000        <1> 	je near dosgchar
  2929 00002723 80FC02              <1> 	cmp ah, 2
  2930 00002726 0F8447000000        <1> 	je near doswchar
  2931 0000272C 80FC09              <1> 	cmp ah, 9
  2932 0000272F 0F8449000000        <1> 	je near dosprintstr
  2933 00002735 80FC0A              <1> 	cmp ah, 0xA
  2934 00002738 0F8456000000        <1> 	je near dosgetstr
  2935 0000273E 80FC2B              <1> 	cmp ah, 0x2B
  2936 00002741 0F8492000000        <1> 	je near dosgetdate
  2937 00002747 80FC2C              <1> 	cmp ah, 0x2C
  2938 0000274A 0F84AC000000        <1> 	je near dosgettime
  2939 00002750 80FC4C              <1> 	cmp ah, 0x4C
  2940 00002753 0F84C1000000        <1> 	je near dosexit
  2941                              <1> backtodos:
  2942 00002759 61                  <1> 	popa
  2943 0000275A 9D                  <1> 	popf
  2944 0000275B 6650                <1> 	push ax
  2945 0000275D 66B85000            <1> 	mov ax, DOS_DATA_SEL
  2946 00002761 8ED8                <1> 	mov ds, ax
  2947 00002763 8EC0                <1> 	mov es, ax
  2948 00002765 8EE0                <1> 	mov fs, ax
  2949 00002767 8EE8                <1> 	mov gs, ax
  2950 00002769 6658                <1> 	pop ax
  2951 0000276B CF                  <1> 	iret
  2952                              <1> 
  2953                              <1> dosgchar:
  2954 0000276C E8C6FBFFFF          <1> 	call getchar
  2955 00002771 EBE6                <1> 	jmp backtodos
  2956                              <1> 	
  2957                              <1> doswchar:
  2958 00002773 88D0                <1> 	mov al, dl
  2959 00002775 B307                <1> 	mov bl, 7
  2960 00002777 E80EFCFFFF          <1> 	call prcharint
  2961 0000277C EBDB                <1> 	jmp backtodos
  2962                              <1> 	
  2963                              <1> dosprintstr:
  2964 0000277E 31F6                <1> 	xor esi, esi
  2965 00002780 6689D6              <1> 	mov si, dx
  2966 00002783 81C600004000        <1> 	add esi, dosprogloc
  2967 00002789 B024                <1> 	mov al, "$"
  2968 0000278B B307                <1> 	mov bl, 7
  2969 0000278D E84AF7FFFF          <1> 	call printint
  2970 00002792 EBC5                <1> 	jmp backtodos
  2971                              <1> 	
  2972                              <1> dosgetstr:
  2973 00002794 31F6                <1> 	xor esi, esi
  2974 00002796 6689D6              <1> 	mov si, dx
  2975 00002799 81C600004000        <1> 	add esi, dosprogloc
  2976 0000279F B900000000          <1> 	mov ecx, 0
  2977 000027A4 8A0E                <1> 	mov cl, [esi]
  2978 000027A6 81C603000000        <1> 	add esi, 3
  2979 000027AC 89F7                <1> 	mov edi, esi
  2980 000027AE 8935[D5270000]      <1> 	mov [stringstart], esi
  2981 000027B4 01CF                <1> 	add edi, ecx
  2982 000027B6 B00A                <1> 	mov al, 10
  2983 000027B8 B307                <1> 	mov bl, 7
  2984 000027BA E800F8FFFF          <1> 	call rdprint
  2985 000027BF 89F1                <1> 	mov ecx, esi
  2986 000027C1 2B0D[D5270000]      <1> 	sub ecx, [stringstart]
  2987 000027C7 8B35[D5270000]      <1> 	mov esi, [stringstart]
  2988 000027CD 884EFF              <1> 	mov [esi - 1], cl
  2989 000027D0 884EFE              <1> 	mov [esi - 2], cl
  2990 000027D3 EB84                <1> 	jmp backtodos
  2991 000027D5 00000000            <1> stringstart dd 0
  2992                              <1> 
  2993                              <1> dosgetdate:
  2994 000027D9 E8271D0000          <1> 	call time
  2995 000027DE 8A0D[CD460000]      <1> 	mov cl, [RTCtimeYear]
  2996 000027E4 B500                <1> 	mov ch, 0
  2997 000027E6 6681C1D007          <1> 	add cx, 2000
  2998 000027EB 8A35[CC460000]      <1> 	mov dh, [RTCtimeMonth]
  2999 000027F1 8A15[CB460000]      <1> 	mov dl, [RTCtimeDay]
  3000 000027F7 E95DFFFFFF          <1> 	jmp backtodos
  3001                              <1> 
  3002                              <1> dosgettime:
  3003 000027FC E8041D0000          <1> 	call time
  3004 00002801 8A2D[CA460000]      <1> 	mov ch, [RTCtimeHour]
  3005 00002807 8A0D[C9460000]      <1> 	mov cl, [RTCtimeMinute]
  3006 0000280D 8A35[C8460000]      <1> 	mov dh, [RTCtimeSecond]
  3007 00002813 B200                <1> 	mov dl, 0
  3008 00002815 E93FFFFFFF          <1> 	jmp backtodos
  3009                              <1> 	
  3010                              <1> dosexit:
  3011 0000281A 61                  <1> 	popa
  3012 0000281B BC[5E9A0000]        <1> 	mov esp, stackend
  3013 00002820 31DB                <1> 	xor ebx, ebx
  3014 00002822 88C3                <1> 	mov bl, al
  3015 00002824 80FB00              <1> 	cmp bl, 0
  3016 00002827 0F8532F6FFFF        <1> 	jne near exitprog.error
  3017 0000282D E9B2010000          <1> 	jmp nwcmd
  3018                                      %include "source/solleros.asm"
  3019                              <1> 	;SOLLEROS.ASM
  3020                              <1> os:
  3021                              <1> setdefenv:
  3022 00002832 B02F                <1> 	mov al, '/'
  3023 00002834 A2[C69E0000]        <1> 	mov [currentfolder], al
  3024 00002839 B801000000          <1> 	mov eax, 1
  3025 0000283E A3[C29E0000]        <1> 	mov [currentfolderloc], eax
  3026 00002843 E8F3F6FFFF          <1> 	call clear
  3027                              <1> bootfilecheck:
  3028 00002848 803D[CAA00000]01    <1> 	cmp byte [ranboot], 1
  3029 0000284F 0F8427000000        <1> 	je near nobootfile
  3030 00002855 C605[CAA00000]01    <1> 	mov byte [ranboot], 1
  3031 0000285C BF[9F760000]        <1> 	mov edi, bootfilename
  3032 00002861 BE00004000          <1> 	mov esi, 0x400000
  3033 00002866 E81A300000          <1> 	call loadfile
  3034 0000286B 81FA94010000        <1> 	cmp edx, 404
  3035 00002871 0F8405000000        <1> 	je near nobootfile
  3036 00002877 E8800D0000          <1> 	call progbatchfound
  3037                              <1> nobootfile:	
  3038                              <1> 
  3039 0000287C BE[00000000]        <1> 	mov esi, signature
  3040                              <1> .sigcopyloop:	;this prevents an odd error
  3041 00002881 658A06              <1> 	mov al, [gs:esi]
  3042 00002884 8806                <1> 	mov [esi], al
  3043 00002886 46                  <1> 	inc esi
  3044 00002887 81FE[1A000000]      <1> 	cmp esi, signatureend
  3045 0000288D 72F2                <1> 	jb .sigcopyloop
  3046 0000288F BE[00000000]        <1> 	mov esi, signature
  3047 00002894 E83CF6FFFF          <1> 	call print
  3048 00002899 8B0D[16000000]      <1> 	mov ecx, [signatureend - 4]
  3049 0000289F E8DF060000          <1> 	call showdec
  3050 000028A4 BE[E8760000]        <1> 	mov esi, line
  3051 000028A9 E827F6FFFF          <1> 	call print
  3052 000028AE BE[C4760000]        <1> 	mov esi, userask
  3053 000028B3 E81DF6FFFF          <1> 	call print
  3054                              <1> usercheck:
  3055 000028B8 BE[3AB50000]        <1> 	mov esi, buftxt
  3056 000028BD BF[3AB90000]        <1> 	mov edi, buftxtend
  3057 000028C2 B00A                <1> 	mov al, 10
  3058 000028C4 E8F6F6FFFF          <1> 	call rdprint
  3059 000028C9 56                  <1> 	push esi
  3060 000028CA BE[CE760000]        <1> 	mov esi, pwdask
  3061 000028CF E801F6FFFF          <1> 	call print
  3062 000028D4 5E                  <1> 	pop esi
  3063 000028D5 46                  <1> 	inc esi
  3064 000028D6 8935[B9290000]      <1> 	mov [esipass], esi
  3065                              <1> passcheck:
  3066 000028DC E856FAFFFF          <1> 	call getchar
  3067 000028E1 3C0A                <1> 	cmp al, 10
  3068 000028E3 0F8436000000        <1> 	je near gotpass
  3069 000028E9 3C08                <1> 	cmp al, 8
  3070 000028EB 0F8410000000        <1> 	je near backpass
  3071 000028F1 8806                <1> 	mov [esi], al
  3072 000028F3 46                  <1> 	inc esi
  3073 000028F4 B02A                <1> 	mov al, '*'
  3074 000028F6 E88FFAFFFF          <1> 	call prcharint
  3075 000028FB EBDF                <1> 	jmp passcheck
  3076 000028FD 08200800            <1> backcursor2 db 8," ",8,0
  3077                              <1> backpass:
  3078 00002901 3B35[B9290000]      <1> 	cmp esi, [esipass]
  3079 00002907 0F84CFFFFFFF        <1> 	je near passcheck
  3080 0000290D 4E                  <1> 	dec esi
  3081 0000290E C60600              <1> 	mov byte [esi], 0
  3082 00002911 56                  <1> 	push esi
  3083 00002912 BE[FD280000]        <1> 	mov esi, backcursor2
  3084 00002917 E8B9F5FFFF          <1> 	call print
  3085 0000291C 5E                  <1> 	pop esi
  3086 0000291D EBBD                <1> 	jmp passcheck
  3087                              <1> gotpass:
  3088 0000291F 30C0                <1> 	xor al, al
  3089 00002921 31C9                <1> 	xor ecx, ecx
  3090 00002923 8806                <1> 	mov [esi], al
  3091 00002925 BB[EA760000]        <1> 	mov ebx, userlst
  3092                              <1> userfind:
  3093 0000292A BE[3AB50000]        <1> 	mov esi, buftxt
  3094 0000292F 8A06                <1> 	mov al, [esi]
  3095 00002931 3C00                <1> 	cmp al, 0
  3096 00002933 0F84F9FEFFFF        <1> 	je near os
  3097 00002939 891D[BD290000]      <1> 	mov [usercache], ebx
  3098 0000293F E852030000          <1> 	call tester
  3099 00002944 3C01                <1> 	cmp al, 1
  3100 00002946 7416                <1> 	je pwdtest
  3101 00002948 41                  <1> 	inc ecx
  3102                              <1> nxtuser:
  3103 00002949 8A03                <1> 	mov al, [ebx]
  3104 0000294B 43                  <1> 	inc ebx
  3105 0000294C 3C00                <1> 	cmp al, 0
  3106 0000294E 75F9                <1> 	jne nxtuser
  3107 00002950 81FB[0D770000]      <1> 	cmp ebx, userlstend
  3108 00002956 0F83D6FEFFFF        <1> 	jae near os
  3109 0000295C EBCC                <1> 	jmp userfind
  3110                              <1> pwdtest:
  3111 0000295E 46                  <1> 	inc esi
  3112 0000295F 43                  <1> 	inc ebx
  3113 00002960 E831030000          <1> 	call tester
  3114 00002965 3C01                <1> 	cmp al, 1
  3115 00002967 7402                <1> 	je pwdrgt
  3116 00002969 EBDE                <1> 	jmp nxtuser
  3117                              <1> pwdrgt:
  3118 0000296B D1E9                <1> 	shr ecx, 1
  3119 0000296D 890D[C6A00000]      <1> 	mov [uid], ecx
  3120 00002973 E8C3F5FFFF          <1> 	call clear
  3121 00002978 66B90002            <1> 	mov cx, 200h
  3122 0000297C BE[3AB50000]        <1> 	mov esi, buftxt
  3123 00002981 8935[922C0000]      <1> 	mov [currentcommandloc], esi
  3124 00002987 E825000000          <1> 	call bufclr
  3125                              <1> clearolddata:
  3126 0000298C 31C0                <1> 	xor eax, eax
  3127 0000298E A2[CBA00000]        <1> 	mov [IFON], al
  3128 00002993 A2[CCA00000]        <1> 	mov [IFTRUE], al
  3129 00002998 A2[34A10000]        <1> 	mov [BATCHISON], al
  3130 0000299D A3[30A10000]        <1> 	mov [BATCHPOS], eax
  3131 000029A2 A2[35A10000]        <1> 	mov [LOOPON], al
  3132 000029A7 A3[36A10000]        <1> 	mov [LOOPPOS], eax
  3133 000029AC E933000000          <1> 	jmp nwcmd
  3134                              <1> bufclr:	
  3135 000029B1 30C0                <1> 	xor al, al
  3136 000029B3 8806                <1> 	mov [esi], al
  3137 000029B5 46                  <1> 	inc esi
  3138 000029B6 E2F9                <1> 	loop bufclr
  3139 000029B8 C3                  <1> 	ret
  3140                              <1> 
  3141 000029B9 00000000            <1> esipass dd 0
  3142 000029BD [EA760000]          <1> usercache dd userlst
  3143                              <1> 	
  3144                              <1> buftxtclear:
  3145 000029C1 30C0                <1> 	xor al, al
  3146 000029C3 BE[3AB50000]        <1> 	mov esi, buftxt
  3147 000029C8 81FE[3AB90000]      <1> clearbuftxt: cmp esi, buf2
  3148 000029CE 730E                <1> 	jae retbufclr
  3149 000029D0 8806                <1> 	mov [esi], al
  3150 000029D2 46                  <1> 	inc esi
  3151 000029D3 EBF3                <1> 	jmp clearbuftxt
  3152                              <1> 
  3153 000029D5 39DE                <1> clearitbuf: cmp esi, ebx
  3154 000029D7 7305                <1> 	jae retbufclr
  3155 000029D9 8806                <1> 	mov [esi], al
  3156 000029DB 46                  <1> 	inc esi
  3157 000029DC EBF7                <1> 	jmp clearitbuf
  3158 000029DE C3                  <1> retbufclr: ret
  3159                              <1> 
  3160 000029DF E900000000          <1> full:	jmp nwcmd
  3161                              <1> 
  3162                              <1> shush:	;SollerOS Hardly Unix-compatible Shell
  3163                              <1> nwcmd:
  3164 000029E4 FB                  <1> 	sti
  3165 000029E5 31C0                <1> 	xor eax, eax
  3166 000029E7 3905[AC2B0000]      <1> 	cmp [nextcommandloc], eax
  3167 000029ED 7411                <1> 	je nomultiplecommand
  3168 000029EF 8B35[AC2B0000]      <1> 	mov esi, [nextcommandloc]
  3169 000029F5 8935[B02B0000]      <1> 	mov [thiscommandloc], esi
  3170 000029FB E9B9010000          <1> 	jmp fixvariables
  3171                              <1> nomultiplecommand:
  3172 00002A00 A3[B02B0000]        <1> 	mov [thiscommandloc], eax
  3173 00002A05 3805[97590000]      <1> 	cmp [threadson], al
  3174 00002A0B 7405                <1> 	je noclinwcmd
  3175 00002A0D A2[97590000]        <1> 	mov [threadson], al
  3176                              <1> noclinwcmd:
  3177 00002A12 B001                <1> 	mov al, 1
  3178 00002A14 3805[34A10000]      <1> 	cmp [BATCHISON], al
  3179 00002A1A 7501                <1> 	jne cancel
  3180 00002A1C C3                  <1> 	ret
  3181 00002A1D 30C0                <1> cancel:	xor al, al
  3182 00002A1F A2[CBA00000]        <1> 	mov [IFON], al
  3183 00002A24 A2[34A10000]        <1> 	mov [BATCHISON], al
  3184 00002A29 B05B                <1> 	mov al, '['
  3185 00002A2B 66BB0700            <1> 	mov bx, 7
  3186 00002A2F E867F9FFFF          <1> 	call prcharq
  3187 00002A34 8B35[BD290000]      <1> 	mov esi, [usercache]
  3188 00002A3A E884F4FFFF          <1> 	call printquiet
  3189 00002A3F BE[D8760000]        <1> 	mov esi, computer
  3190 00002A44 E87AF4FFFF          <1> 	call printquiet
  3191 00002A49 BE[C69E0000]        <1> 	mov esi, currentfolder
  3192 00002A4E 0335[BE9E0000]      <1> 	add esi, [lastfolderloc]
  3193 00002A54 E86AF4FFFF          <1> 	call printquiet
  3194 00002A59 BE[E3760000]        <1> 	mov esi, endprompt
  3195 00002A5E E872F4FFFF          <1> 	call print
  3196 00002A63 E859FFFFFF          <1> 	call buftxtclear
  3197 00002A68 BE[3AB50000]        <1> 	mov esi, buftxt
  3198 00002A6D C605[20230000]01    <1> 	mov byte [commandedit], 1
  3199 00002A74 B00A                <1> 	mov al, 10
  3200 00002A76 66BB0700            <1> 	mov bx, 7
  3201 00002A7A BF[3AB90000]        <1> 	mov edi, buftxtend
  3202 00002A7F E83BF5FFFF          <1> 	call rdprint
  3203 00002A84 C605[20230000]00    <1> 	mov byte [commandedit], 0
  3204 00002A8B 803D[3AB50000]00    <1> 	cmp byte [buftxt], 0
  3205 00002A92 0F844CFFFFFF        <1> 	je near nwcmd
  3206 00002A98 8B35[545C0100]      <1> gotcmd:	mov esi, [commandbufpos]
  3207 00002A9E 8935[505C0100]      <1> 	mov [lastcommandpos], esi
  3208 00002AA4 BF[3AB50000]        <1> 	mov edi, buftxt
  3209 00002AA9 81C6[585C0100]      <1> 	add esi, commandbuf
  3210 00002AAF 81FE[586C0100]      <1> 	cmp esi, commandbufend
  3211 00002AB5 7605                <1> 	jbe copycommand
  3212 00002AB7 BE[585C0100]        <1> 	mov esi, commandbuf
  3213                              <1> copycommand:
  3214 00002ABC 8A07                <1> 	mov al, [edi]
  3215 00002ABE 8806                <1> 	mov [esi], al
  3216 00002AC0 47                  <1> 	inc edi
  3217 00002AC1 46                  <1> 	inc esi
  3218 00002AC2 3C00                <1> 	cmp al, 0
  3219 00002AC4 740F                <1> 	je donecopy
  3220 00002AC6 81FE[586C0100]      <1> 	cmp esi, commandbufend
  3221 00002ACC 76EE                <1> 	jbe copycommand
  3222 00002ACE BE[585C0100]        <1> 	mov esi, commandbuf
  3223 00002AD3 EBE7                <1> 	jmp copycommand
  3224                              <1> donecopy:
  3225 00002AD5 81EE[585C0100]      <1> 	sub esi, commandbuf
  3226 00002ADB 8935[545C0100]      <1> 	mov [commandbufpos], esi
  3227 00002AE1 E9CE000000          <1> 	jmp run
  3228                              <1> 
  3229 00002AE6 E8D6FEFFFF          <1> input:	call buftxtclear
  3230 00002AEB BE[3AB50000]        <1> 	mov esi, buftxt		;puts input into buftxt AND onto screen
  3231 00002AF0 BF[3AB90000]        <1> 	mov edi, buftxtend
  3232 00002AF5 B00A                <1> stdin:	mov al, 10
  3233 00002AF7 B307                <1> 	mov bl, 7
  3234 00002AF9 E8C1F4FFFF          <1> 	call rdprint
  3235 00002AFE C3                  <1> 	ret
  3236                              <1> 
  3237                              <1> replacevariable:
  3238 00002AFF 8A4601              <1> 	mov al, [esi + 1]
  3239 00002B02 C64601FF            <1> 	mov byte [esi + 1], 255
  3240 00002B06 3C24                <1> 	cmp al, "$"
  3241 00002B08 0F84AB000000        <1> 	je near fixvariables
  3242 00002B0E 884601              <1> 	mov [esi + 1], al
  3243 00002B11 56                  <1> 	push esi
  3244 00002B12 81EE[3AB50000]      <1> 	sub esi, buftxt
  3245 00002B18 89F7                <1> 	mov edi, esi
  3246 00002B1A 81C6[3AB50000]      <1> 	add esi, buftxt
  3247 00002B20 47                  <1> 	inc edi
  3248 00002B21 BB[3AA10000]        <1> 	mov ebx, variables
  3249 00002B26 E896100000          <1> 	call nxtvrech
  3250 00002B2B 89F7                <1> 	mov edi, esi
  3251 00002B2D 31DB                <1> 	xor ebx, ebx
  3252 00002B2F 4E                  <1> 	dec esi
  3253                              <1> findvarname:
  3254 00002B30 4E                  <1> 	dec esi
  3255 00002B31 8A06                <1> 	mov al, [esi]
  3256 00002B33 43                  <1> 	inc ebx
  3257 00002B34 3C04                <1> 	cmp al, 4
  3258 00002B36 75F8                <1> 	jne findvarname
  3259 00002B38 5E                  <1> 	pop esi
  3260                              <1> replacevarloop:
  3261 00002B39 8A07                <1> 	mov al, [edi]
  3262 00002B3B 81FB00000000        <1> 	cmp ebx, 0
  3263 00002B41 0F841E000000        <1> 	je near expandbuftxt
  3264 00002B47 3C00                <1> 	cmp al, 0
  3265 00002B49 0F8407000000        <1> 	je near compressbuftxt
  3266 00002B4F 8806                <1> 	mov [esi], al
  3267 00002B51 4B                  <1> 	dec ebx
  3268 00002B52 46                  <1> 	inc esi
  3269 00002B53 47                  <1> 	inc edi
  3270 00002B54 EBE3                <1> 	jmp replacevarloop
  3271                              <1> compressbuftxt:	
  3272 00002B56 8A041E              <1> 	mov al, [esi + ebx]
  3273 00002B59 8806                <1> 	mov [esi], al
  3274 00002B5B 46                  <1> 	inc esi
  3275 00002B5C 3C00                <1> 	cmp al, 0
  3276 00002B5E 75F6                <1> 	jne compressbuftxt
  3277 00002B60 E954000000          <1> 	jmp fixvariables
  3278                              <1> expandbuftxt:
  3279 00002B65 89F1                <1> 	mov ecx, esi
  3280 00002B67 8A26                <1> 	mov ah, [esi]
  3281                              <1> expandbuftxtlp:
  3282 00002B69 8A1E                <1> 	mov bl, [esi]
  3283 00002B6B 46                  <1> 	inc esi
  3284 00002B6C 8A3E                <1> 	mov bh, [esi]
  3285 00002B6E 8826                <1> 	mov [esi], ah
  3286 00002B70 88FC                <1> 	mov ah, bh
  3287 00002B72 80FB00              <1> 	cmp bl, 0
  3288 00002B75 75F2                <1> 	jne expandbuftxtlp
  3289 00002B77 89CE                <1> 	mov esi, ecx
  3290 00002B79 8806                <1> 	mov [esi], al
  3291 00002B7B 47                  <1> 	inc edi
  3292 00002B7C 8A07                <1> 	mov al, [edi]
  3293 00002B7E 3C00                <1> 	cmp al, 0
  3294 00002B80 0F8433000000        <1> 	je near fixvariables
  3295 00002B86 46                  <1> 	inc esi
  3296 00002B87 EBDC                <1> 	jmp expandbuftxt
  3297                              <1> multipleprogline:
  3298 00002B89 30E4                <1> 	xor ah, ah
  3299 00002B8B 8826                <1> 	mov [esi], ah
  3300 00002B8D 46                  <1> 	inc esi
  3301 00002B8E 8935[AC2B0000]      <1> 	mov [nextcommandloc], esi
  3302 00002B94 E93E000000          <1> 	jmp donefixvariables
  3303                              <1> inlinecomment:	;if the following char is #, include a #, otherwise end the line
  3304 00002B99 46                  <1> 	inc esi
  3305 00002B9A 8A06                <1> 	mov al, [esi]
  3306 00002B9C C606FF              <1> 	mov byte [esi], 255
  3307 00002B9F 3C23                <1> 	cmp al, '#'
  3308 00002BA1 7416                <1> 	je fixvariables
  3309 00002BA3 4E                  <1> 	dec esi
  3310 00002BA4 C60600              <1> 	mov byte [esi], 0
  3311 00002BA7 E90D000000          <1> 	jmp fixvariables
  3312                              <1> 	
  3313 00002BAC 00000000            <1> nextcommandloc dd 0
  3314 00002BB0 00000000            <1> thiscommandloc dd 0	
  3315                              <1> run:
  3316 00002BB4 BE[3AB50000]        <1> 	mov esi, buftxt
  3317                              <1> fixvariables:
  3318 00002BB9 46                  <1> 	inc esi
  3319 00002BBA 8A06                <1> 	mov al, [esi]
  3320 00002BBC 3C23                <1> 	cmp al, '#'	;inline comment
  3321 00002BBE 74D9                <1> 	je inlinecomment
  3322 00002BC0 3C24                <1> 	cmp al, '$' ;variable
  3323 00002BC2 0F8437FFFFFF        <1> 	je near replacevariable
  3324 00002BC8 3C3B                <1> 	cmp al, ';' ;program list
  3325 00002BCA 74BD                <1> 	je multipleprogline
  3326 00002BCC 3C00                <1> 	cmp al, 0
  3327 00002BCE 75E9                <1> 	jne fixvariables
  3328 00002BD0 31C0                <1> 	xor eax, eax
  3329 00002BD2 A3[AC2B0000]        <1> 	mov [nextcommandloc], eax
  3330                              <1> donefixvariables:
  3331 00002BD7 803D[7D310000]00    <1> 	cmp byte [indexdone], 0
  3332 00002BDE 7505                <1> 	jne progtest
  3333 00002BE0 E803050000          <1> 	call indexfiles
  3334                              <1> progtest:
  3335 00002BE5 31C0                <1> 	xor eax, eax
  3336 00002BE7 BB[BE9A0000]        <1> 	mov ebx, fileindex
  3337 00002BEC 668B03              <1> prgnxt:	mov ax, [ebx]
  3338 00002BEF B1FF                <1> 	mov cl, 255
  3339 00002BF1 B52C                <1> 	mov ch, 44
  3340 00002BF3 6639C8              <1> 	cmp ax, cx
  3341 00002BF6 740B                <1> 	je fndprg
  3342 00002BF8 43                  <1> 	inc ebx
  3343 00002BF9 81FB[BE9E0000]      <1> 	cmp ebx, fileindexend
  3344 00002BFF 7361                <1> 	jae prgnf
  3345 00002C01 EBE9                <1> 	jmp prgnxt
  3346 00002C03 81C302000000        <1> fndprg: add ebx, 2
  3347 00002C09 31C9                <1> 	xor ecx, ecx
  3348 00002C0B BE[3AB50000]        <1> 	mov esi, buftxt
  3349 00002C10 390D[B02B0000]      <1> 	cmp [thiscommandloc], ecx
  3350 00002C16 7406                <1> 	je noprgtstmultiple
  3351 00002C18 8B35[B02B0000]      <1> 	mov esi, [thiscommandloc]
  3352                              <1> noprgtstmultiple:
  3353 00002C1E E8AE000000          <1> 	call cndtest
  3354 00002C23 3C01                <1> 	cmp al, 1
  3355 00002C25 7302                <1> 	jae prggood
  3356 00002C27 EBC3                <1> 	jmp prgnxt
  3357 00002C29 81FB[BE9E0000]      <1> prggood: cmp ebx, fileindexend
  3358 00002C2F 735C                <1> 	jae prgdn
  3359 00002C31 31C0                <1> 	xor eax, eax
  3360 00002C33 BE[3AB50000]        <1> 	mov esi, buftxt
  3361 00002C38 3905[B02B0000]      <1> 	cmp [thiscommandloc], eax
  3362 00002C3E 7406                <1> 	je noprggoodmul
  3363 00002C40 8B35[B02B0000]      <1> 	mov esi, [thiscommandloc]
  3364                              <1> noprggoodmul:
  3365 00002C46 8935[922C0000]      <1> 	mov [currentcommandloc], esi
  3366 00002C4C 81C303000000        <1> 	add ebx, 3
  3367 00002C52 8B3B                <1> 	mov edi, [ebx]
  3368 00002C54 C605[97590000]02    <1> 	mov byte [threadson], 2
  3369 00002C5B FFD7                <1> 	call edi
  3370 00002C5D E982FDFFFF          <1> 	jmp nwcmd
  3371                              <1> prgnf:	
  3372 00002C62 8B35[922C0000]      <1> 	mov esi, [currentcommandloc]
  3373 00002C68 8A06                <1> 	mov al, [esi]
  3374 00002C6A 3C00                <1> 	cmp al, 0
  3375 00002C6C 741F                <1> 	je prgdn
  3376 00002C6E BE[A7760000]        <1> 	mov esi, notfound1
  3377 00002C73 E85DF2FFFF          <1> 	call print
  3378 00002C78 8B35[922C0000]      <1> 	mov esi, [currentcommandloc]
  3379 00002C7E E852F2FFFF          <1> 	call print
  3380 00002C83 BE[AF760000]        <1> 	mov esi, notfound2
  3381 00002C88 E848F2FFFF          <1> 	call print
  3382 00002C8D E952FDFFFF          <1> prgdn:	jmp nwcmd
  3383                              <1> 
  3384 00002C92 00000000            <1> currentcommandloc dd 0
  3385                              <1> 
  3386                              <1> tester:			;si=user bx=prog returns 1 in al if true
  3387 00002C96 6631C0              <1> 	xor ax, ax
  3388 00002C99 8A06                <1> retest:	mov al, [esi]
  3389 00002C9B 8A23                <1> 	mov ah, [ebx]
  3390 00002C9D 3C00                <1> 	cmp al, 0
  3391 00002C9F 7408                <1> 	je testtrue
  3392 00002CA1 38E0                <1> 	cmp al, ah
  3393 00002CA3 750C                <1> 	jne testfalse
  3394 00002CA5 43                  <1> 	inc ebx
  3395 00002CA6 46                  <1> 	inc esi
  3396 00002CA7 EBF0                <1> 	jmp retest
  3397                              <1> testtrue:
  3398 00002CA9 80FC00              <1> 	cmp ah, 0
  3399 00002CAC 7503                <1> 	jne testfalse
  3400 00002CAE B001                <1> 	mov al, 1
  3401 00002CB0 C3                  <1> 	ret
  3402                              <1> testfalse:
  3403 00002CB1 30C0                <1> 	xor al, al
  3404 00002CB3 C3                  <1> 	ret
  3405                              <1> 
  3406                              <1> optest:			;si=user bx=prog returns 1 in al if true
  3407 00002CB4 30C0                <1> 	xor al, al
  3408                              <1> opretest:
  3409 00002CB6 8A06                <1> 	mov al, [esi]
  3410 00002CB8 8A23                <1> 	mov ah, [ebx]
  3411 00002CBA 38E0                <1> 	cmp al, ah
  3412 00002CBC 7510                <1> 	jne optestfalse
  3413 00002CBE 80FC00              <1> 	cmp ah, 0
  3414 00002CC1 7404                <1> 	je optesttrue
  3415 00002CC3 43                  <1> 	inc ebx
  3416 00002CC4 46                  <1> 	inc esi
  3417 00002CC5 EBEF                <1> 	jmp opretest
  3418                              <1> optesttrue:
  3419 00002CC7 3C00                <1> 	cmp al, 0
  3420 00002CC9 7503                <1> 	jne optestfalse
  3421 00002CCB B001                <1> 	mov al, 1
  3422 00002CCD C3                  <1> 	ret
  3423                              <1> optestfalse:
  3424 00002CCE 30C0                <1> 	xor al, al
  3425 00002CD0 C3                  <1> 	ret
  3426                              <1> 
  3427                              <1> cndtest:			;si=user bx=prog cl=endchar returns 1 in al if true
  3428 00002CD1 30C0                <1> 	xor al, al
  3429 00002CD3 8A06                <1> cndretest:	mov al, [esi]
  3430 00002CD5 8A23                <1> 	mov ah, [ebx]
  3431 00002CD7 38CC                <1> 	cmp ah, cl
  3432 00002CD9 7408                <1> 	je cndtesttrue
  3433 00002CDB 38E0                <1> 	cmp al, ah
  3434 00002CDD 750B                <1> 	jne cndtestfalse
  3435 00002CDF 43                  <1> 	inc ebx
  3436 00002CE0 46                  <1> 	inc esi
  3437 00002CE1 EBF0                <1> 	jmp cndretest
  3438                              <1> cndtesttrue:
  3439 00002CE3 38C8                <1> 	cmp al, cl
  3440 00002CE5 7506                <1> 	jne cndtestalmost
  3441 00002CE7 B001                <1> 	mov al, 1
  3442 00002CE9 C3                  <1> 	ret
  3443                              <1> cndtestfalse:
  3444 00002CEA 30C0                <1> 	xor al, al
  3445 00002CEC C3                  <1> 	ret
  3446                              <1> cndtestalmost:
  3447 00002CED B002                <1> 	mov al, 2
  3448 00002CEF C3                  <1> 	ret
  3449                              <1> 	
  3450                              <1> array:				;arraystart in si, arrayend in bx, arrayseperator in cx
  3451                              <1> 		                ;ends if array seperator is found backwards after 0
  3452                              <1> 	arnxt:	      
  3453 00002CF0 88E8                <1> 		mov al, ch
  3454 00002CF2 88CC                <1> 		mov ah, cl        
  3455 00002CF4 663906              <1> 		cmp [esi], ax
  3456 00002CF7 744D                <1> 		je ardn
  3457 00002CF9 66390E              <1> 		cmp [esi], cx
  3458 00002CFC 7407                <1> 		je arfnd
  3459 00002CFE 46                  <1> 		inc esi
  3460 00002CFF 39DE                <1> 		cmp esi, ebx
  3461 00002D01 7343                <1> 		jae ardn
  3462 00002D03 EBEB                <1> 		jmp arnxt
  3463 00002D05 81C602000000        <1> 	arfnd: add esi, 2
  3464 00002D0B 891D[472D0000]      <1> 		mov [arbx], ebx
  3465 00002D11 890D[4B2D0000]      <1> 		mov [arcx], ecx
  3466 00002D17 E8B9F1FFFF          <1> 		call print
  3467 00002D1C 8935[4D2D0000]      <1> 		mov [arsi], esi
  3468 00002D22 BE[E8760000]        <1> 		mov esi, line
  3469 00002D27 E8A9F1FFFF          <1> 		call print
  3470 00002D2C 8B1D[472D0000]      <1> 		mov ebx, [arbx]
  3471 00002D32 668B0D[4B2D0000]    <1> 		mov cx, [arcx]
  3472 00002D39 8B35[4D2D0000]      <1> 		mov esi, [arsi]
  3473 00002D3F 46                  <1> 		inc esi
  3474 00002D40 39DE                <1> 		cmp esi, ebx
  3475 00002D42 7302                <1> 		jae ardn
  3476 00002D44 EBAA                <1> 		jmp arnxt
  3477 00002D46 C3                  <1> 	ardn:	ret
  3478 00002D47 00000000            <1> arbx:	dw 0,0
  3479 00002D4B 0000                <1> arcx:	db 0,0
  3480 00002D4D 00000000            <1> arsi:	dw 0,0
  3481                              <1> 
  3482                              <1> clearbuffer:
  3483 00002D51 BE[3AB90000]        <1> 	mov esi, buf2
  3484 00002D56 B030                <1> 	mov al, '0'
  3485 00002D58 81FE[4EB90000]      <1> clearbuf: cmp esi, numbuf
  3486 00002D5E 7305                <1> 	jae doneclearbuff
  3487 00002D60 8806                <1> 	mov [esi], al
  3488 00002D62 46                  <1> 	inc esi
  3489 00002D63 EBF3                <1> 	jmp clearbuf
  3490                              <1> doneclearbuff: 
  3491 00002D65 C3                  <1> 		ret
  3492                              <1> 
  3493                              <1> convert:
  3494 00002D66 4E                  <1> 	dec esi
  3495 00002D67 89F3                <1> 	mov ebx, esi		;place to convert into must be in esi, number to convert must be in ecx
  3496                              <1> .lp:
  3497 00002D69 89DE                <1> 	mov esi, ebx
  3498 00002D6B 81EE09000000        <1> 	sub esi, 9
  3499 00002D71 81F900CA9A3B        <1> 	cmp ecx, 1000000000
  3500 00002D77 720A                <1> 	jb .8
  3501 00002D79 81E900CA9A3B        <1> 	sub ecx, 1000000000
  3502 00002D7F FE06                <1> 	inc byte [esi]
  3503 00002D81 EBE6                <1> 	jmp .lp
  3504 00002D83 46                  <1> .8:	inc esi
  3505 00002D84 81F900E1F505        <1> 	cmp ecx, 100000000
  3506 00002D8A 720A                <1> 	jb .7
  3507 00002D8C 81E900E1F505        <1> 	sub ecx, 100000000
  3508 00002D92 FE06                <1> 	inc byte [esi]
  3509 00002D94 EBD3                <1> 	jmp .lp
  3510 00002D96 46                  <1> .7:	inc esi
  3511 00002D97 81F980969800        <1> 	cmp ecx, 10000000
  3512 00002D9D 720A                <1> 	jb .6
  3513 00002D9F 81E980969800        <1> 	sub ecx, 10000000
  3514 00002DA5 FE06                <1> 	inc byte [esi]
  3515 00002DA7 EBC0                <1> 	jmp .lp
  3516 00002DA9 46                  <1> .6:	inc esi
  3517 00002DAA 81F940420F00        <1> 	cmp ecx, 1000000
  3518 00002DB0 720A                <1> 	jb .5
  3519 00002DB2 81E940420F00        <1> 	sub ecx, 1000000
  3520 00002DB8 FE06                <1> 	inc byte [esi]
  3521 00002DBA EBAD                <1> 	jmp .lp
  3522 00002DBC 46                  <1> .5:	inc esi
  3523 00002DBD 81F9A0860100        <1> 	cmp ecx, 100000
  3524 00002DC3 720A                <1> 	jb .4
  3525 00002DC5 81E9A0860100        <1> 	sub ecx, 100000
  3526 00002DCB FE06                <1> 	inc byte [esi]
  3527 00002DCD EB9A                <1> 	jmp .lp
  3528 00002DCF 46                  <1> .4:	inc esi
  3529 00002DD0 81F910270000        <1> 	cmp ecx, 10000
  3530 00002DD6 720A                <1> 	jb .3
  3531 00002DD8 81E910270000        <1> 	sub ecx, 10000
  3532 00002DDE FE06                <1> 	inc byte [esi]
  3533 00002DE0 EB87                <1> 	jmp .lp
  3534 00002DE2 46                  <1> .3:	inc esi
  3535 00002DE3 81F9E8030000        <1> 	cmp ecx, 1000
  3536 00002DE9 720D                <1> 	jb .2
  3537 00002DEB 81E9E8030000        <1> 	sub ecx, 1000
  3538 00002DF1 FE06                <1> 	inc byte [esi]
  3539 00002DF3 E971FFFFFF          <1> 	jmp .lp
  3540 00002DF8 46                  <1> .2:	inc esi
  3541 00002DF9 81F964000000        <1> 	cmp ecx, 100
  3542 00002DFF 720D                <1> 	jb .1
  3543 00002E01 81E964000000        <1> 	sub ecx, 100
  3544 00002E07 FE06                <1> 	inc byte [esi]
  3545 00002E09 E95BFFFFFF          <1> 	jmp .lp
  3546 00002E0E 46                  <1> .1:	inc esi
  3547 00002E0F 81F90A000000        <1> 	cmp ecx, 10
  3548 00002E15 720D                <1> 	jb .0
  3549 00002E17 81E90A000000        <1> 	sub ecx, 10
  3550 00002E1D FE06                <1> 	inc byte [esi]
  3551 00002E1F E945FFFFFF          <1> 	jmp .lp
  3552 00002E24 46                  <1> .0:	inc esi
  3553 00002E25 81F901000000        <1> 	cmp ecx, 1
  3554 00002E2B 720D                <1> 	jb .dn
  3555 00002E2D 81E901000000        <1> 	sub ecx, 1
  3556 00002E33 FE06                <1> 	inc byte [esi]
  3557 00002E35 E92FFFFFFF          <1> 	jmp .lp
  3558                              <1> .dn:
  3559 00002E3A C3                  <1> 	ret
  3560                              <1> 
  3561                              <1> 	
  3562                              <1> 
  3563 00002E3B 00<rept>            <1> hexnumber times 8 db 0
  3564 00002E43 202000              <1> hexnumberend db "  ",0
  3565                              <1> 
  3566                              <1> converthex:
  3567                              <1> .clear:	;place to convert to in esi, end of buffer in edi number in ecx
  3568 00002E46 56                  <1> 	push esi
  3569 00002E47 B030                <1> 	mov al, "0"
  3570 00002E49 39FE                <1> .clearlp: cmp esi, edi
  3571 00002E4B 7305                <1> 	jae .doneclear
  3572 00002E4D 8806                <1> 	mov [esi], al
  3573 00002E4F 46                  <1> 	inc esi
  3574 00002E50 EBF7                <1> 	jmp .clearlp
  3575                              <1> .doneclear:
  3576 00002E52 81EE02000000        <1> 	sub esi, 2
  3577 00002E58 89C8                <1> 	mov eax, ecx
  3578                              <1> .loop:
  3579 00002E5A 30FF                <1> 	xor bh, bh
  3580 00002E5C 88C3                <1> 	mov bl, al
  3581 00002E5E 66C1E304            <1> 	shl bx, 4
  3582 00002E62 C0EB04              <1> 	shr bl, 4
  3583 00002E65 86DF                <1> 	xchg bl, bh ;they are backwards
  3584 00002E67 80C330              <1> 	add bl, 48
  3585 00002E6A 80FB39              <1> 	cmp bl, "9"
  3586 00002E6D 7609                <1> 	jbe .goodbl
  3587 00002E6F 80EB30              <1> 	sub bl, 48
  3588 00002E72 80EB0A              <1> 	sub bl, 0xA
  3589 00002E75 80C341              <1> 	add bl, "A"
  3590                              <1> .goodbl:
  3591 00002E78 80C730              <1> 	add bh, 48
  3592 00002E7B 80FF39              <1> 	cmp bh, "9"
  3593 00002E7E 7609                <1> 	jbe .goodbh
  3594 00002E80 80EF30              <1> 	sub bh, 48
  3595 00002E83 80EF0A              <1> 	sub bh, 0xA
  3596 00002E86 80C741              <1> 	add bh, "A"
  3597                              <1> .goodbh:
  3598 00002E89 C1E808              <1> 	shr eax, 8
  3599 00002E8C 66891E              <1> 	mov [esi], bx
  3600 00002E8F 81EE02000000        <1> 	sub esi, 2
  3601 00002E95 3B3424              <1> 	cmp esi, [esp]
  3602 00002E98 7207                <1> 	jb .done
  3603 00002E9A 3D00000000          <1> 	cmp eax, 0
  3604 00002E9F 75B9                <1> 	jne .loop
  3605                              <1> .done:
  3606 00002EA1 5E                  <1> 	pop esi
  3607 00002EA2 C3                  <1> 	ret
  3608                              <1> 	
  3609                              <1> 	
  3610 00002EA3 00                  <1> smallhex db 0
  3611 00002EA4 01                  <1> firsthexshown db 1
  3612                              <1> showhexsmall:
  3613 00002EA5 C605[A32E0000]01    <1> 	mov byte [smallhex], 1
  3614 00002EAC E808000000          <1> 	call showhex
  3615 00002EB1 C605[A32E0000]00    <1> 	mov byte [smallhex], 0
  3616 00002EB8 C3                  <1> 	ret
  3617                              <1> showhex:
  3618 00002EB9 60                  <1> 	pusha
  3619 00002EBA BE[3B2E0000]        <1> 	mov esi, hexnumber
  3620 00002EBF BF[432E0000]        <1> 	mov edi, hexnumberend
  3621 00002EC4 E87DFFFFFF          <1> 	call converthex
  3622 00002EC9 803D[A42E0000]01    <1> 	cmp byte [firsthexshown], 1
  3623 00002ED0 7503                <1> 	jne .show
  3624 00002ED2 6631D2              <1> 	xor dx, dx
  3625                              <1> .show:
  3626 00002ED5 803D[A42E0000]03    <1> 	cmp byte [firsthexshown], 3
  3627 00002EDC 750A                <1> 	jne .nonewhexline
  3628 00002EDE BE[E8760000]        <1> 	mov esi, line
  3629 00002EE3 E8EDEFFFFF          <1> 	call print
  3630                              <1> .nonewhexline:
  3631 00002EE8 803D[A42E0000]04    <1> 	cmp byte [firsthexshown], 4
  3632 00002EEF 7527                <1> 	jne .notab
  3633 00002EF1 B1A0                <1> 	mov cl, 160
  3634 00002EF3 28D1                <1> 	sub cl, dl
  3635 00002EF5 C0E905              <1> 	shr cl, 5
  3636 00002EF8 C0E105              <1> 	shl cl, 5
  3637 00002EFB 80F900              <1> 	cmp cl, 0
  3638 00002EFE 750F                <1> 	jne .nonewline
  3639 00002F00 BE[E8760000]        <1> 	mov esi, line
  3640 00002F05 E8CBEFFFFF          <1> 	call print
  3641 00002F0A E909000000          <1> 	jmp .notab
  3642                              <1> .nonewline:
  3643 00002F0F 80C20F              <1> 	add dl, 15
  3644 00002F12 C0EA04              <1> 	shr dl, 4
  3645 00002F15 C0E204              <1> 	shl dl, 4
  3646                              <1> .notab:
  3647 00002F18 BE[3B2E0000]        <1> 	mov esi, hexnumber
  3648 00002F1D 803D[A32E0000]01    <1> 	cmp byte [smallhex],1
  3649 00002F24 7506                <1> 	jne .nosmall
  3650 00002F26 81C606000000        <1> 	add esi, 6
  3651                              <1> .nosmall:
  3652 00002F2C 803D[A42E0000]05    <1> 	cmp byte [firsthexshown], 5
  3653 00002F33 750A                <1> 	jne .noquiet
  3654 00002F35 E889EFFFFF          <1> 	call printquiet
  3655 00002F3A E918000000          <1> 	jmp .donequiet
  3656                              <1> .noquiet:
  3657 00002F3F 803D[A42E0000]06    <1> 	cmp byte [firsthexshown], 6
  3658 00002F46 750A                <1> 	jne .normal
  3659 00002F48 E86AEFFFFF          <1> 	call printhighlight
  3660 00002F4D E905000000          <1> 	jmp .donequiet
  3661                              <1> .normal:
  3662 00002F52 E87EEFFFFF          <1> 	call print
  3663                              <1> .donequiet:
  3664 00002F57 803D[A42E0000]02    <1> 	cmp byte [firsthexshown], 2
  3665 00002F5E 750A                <1> 	jne .shown
  3666 00002F60 BE[E8760000]        <1> 	mov esi, line
  3667 00002F65 E86BEFFFFF          <1> 	call print
  3668                              <1> .shown:
  3669 00002F6A C605[A42E0000]00    <1> 	mov byte [firsthexshown], 0
  3670 00002F71 61                  <1> 	popa
  3671 00002F72 C3                  <1> 	ret
  3672                              <1> 
  3673                              <1> 
  3674 00002F73 303030303030303030- <1> decnumber db "00000000000000"
  3675 00002F7C 3030303030          <1>
  3676 00002F81 2000                <1> decnumberend: db " ",0
  3677                              <1> 
  3678                              <1> showdec: ;;same as showhex, just uses decimal conversion
  3679 00002F83 60                  <1> 	pusha
  3680 00002F84 BF[732F0000]        <1> 	mov edi, decnumber
  3681 00002F89 BE[812F0000]        <1> 	mov esi, decnumberend
  3682                              <1> .clear:
  3683 00002F8E C60730              <1> 	mov byte [edi], '0'
  3684 00002F91 47                  <1> 	inc edi
  3685 00002F92 39F7                <1> 	cmp edi, esi
  3686 00002F94 72F8                <1> 	jb .clear
  3687 00002F96 BF[732F0000]        <1> 	mov edi, decnumber
  3688 00002F9B E8C6FDFFFF          <1> 	call convert
  3689 00002FA0 803D[A42E0000]01    <1> 	cmp byte [firsthexshown], 1
  3690 00002FA7 7503                <1> 	jne .show
  3691 00002FA9 6631D2              <1> 	xor dx, dx
  3692                              <1> .show:
  3693 00002FAC 803D[A42E0000]03    <1> 	cmp byte [firsthexshown], 3
  3694 00002FB3 750A                <1> 	jne .nonewdecline
  3695 00002FB5 BE[E8760000]        <1> 	mov esi, line
  3696 00002FBA E816EFFFFF          <1> 	call print
  3697                              <1> .nonewdecline:
  3698 00002FBF 803D[A42E0000]04    <1> 	cmp byte [firsthexshown], 4
  3699 00002FC6 7527                <1> 	jne .notab
  3700 00002FC8 B1A0                <1> 	mov cl, 160
  3701 00002FCA 28D1                <1> 	sub cl, dl
  3702 00002FCC C0E905              <1> 	shr cl, 5
  3703 00002FCF C0E105              <1> 	shl cl, 5
  3704 00002FD2 80F900              <1> 	cmp cl, 0
  3705 00002FD5 750F                <1> 	jne .nonewline
  3706 00002FD7 BE[E8760000]        <1> 	mov esi, line
  3707 00002FDC E8F4EEFFFF          <1> 	call print
  3708 00002FE1 E909000000          <1> 	jmp .notab
  3709                              <1> .nonewline:
  3710 00002FE6 80C20F              <1> 	add dl, 15
  3711 00002FE9 C0EA04              <1> 	shr dl, 4
  3712 00002FEC C0E204              <1> 	shl dl, 4
  3713                              <1> .notab:
  3714 00002FEF BE[732F0000]        <1> 	mov esi, decnumber
  3715 00002FF4 4E                  <1> 	dec esi
  3716                              <1> .sifind:
  3717 00002FF5 46                  <1> 	inc esi
  3718 00002FF6 803E30              <1> 	cmp byte [esi], '0'
  3719 00002FF9 74FA                <1> 	je .sifind
  3720 00002FFB E8D5EEFFFF          <1> 	call print
  3721 00003000 803D[A42E0000]02    <1> 	cmp byte [firsthexshown], 2
  3722 00003007 750A                <1> 	jne .shown
  3723 00003009 BE[E8760000]        <1> 	mov esi, line
  3724 0000300E E8C2EEFFFF          <1> 	call print
  3725                              <1> .shown:
  3726 00003013 C605[A42E0000]00    <1> 	mov byte [firsthexshown], 0
  3727 0000301A 61                  <1> 	popa
  3728 0000301B C3                  <1> 	ret
  3729                              <1> 	
  3730                              <1> cnvrthextxt:
  3731 0000301C 31C9                <1> 	xor ecx, ecx
  3732 0000301E 31C0                <1> 	xor eax, eax
  3733 00003020 31D2                <1> 	xor edx, edx
  3734 00003022 31DB                <1> 	xor ebx, ebx
  3735 00003024 4E                  <1> 	dec esi
  3736                              <1> .end:
  3737 00003025 46                  <1> 	inc esi
  3738 00003026 8A06                <1> 	mov al, [esi]
  3739 00003028 3C00                <1> 	cmp al, 0
  3740 0000302A 75F9                <1> 	jne .end
  3741                              <1> .loop:
  3742 0000302C 4E                  <1> 	dec esi
  3743 0000302D 8A06                <1> 	mov al, [esi]
  3744 0000302F 3C41                <1> 	cmp al, "A"
  3745 00003031 7328                <1> 	jae .char
  3746 00003033 2C30                <1> 	sub al, 48
  3747 00003035 3C10                <1> 	cmp al, 16
  3748 00003037 7721                <1> 	ja .done
  3749                              <1> .donechar:
  3750 00003039 81FA00000000        <1> 	cmp edx, 0
  3751 0000303F 740E                <1> 	je .noshl
  3752 00003041 89D3                <1> 	mov ebx, edx
  3753                              <1> .shl:
  3754 00003043 C1E004              <1> 	shl eax, 4
  3755 00003046 4B                  <1> 	dec ebx
  3756 00003047 81FB00000000        <1> 	cmp ebx, 0
  3757 0000304D 75F4                <1> 	jne .shl
  3758                              <1> .noshl:
  3759 0000304F 42                  <1> 	inc edx
  3760 00003050 01C1                <1> 	add ecx, eax
  3761 00003052 81FA08000000        <1> 	cmp edx, 8
  3762 00003058 72D2                <1> 	jb .loop
  3763                              <1> .done:
  3764 0000305A C3                  <1> 	ret
  3765                              <1> .char:
  3766 0000305B 3C46                <1> 	cmp al, "F"
  3767 0000305D 77FB                <1> 	ja .done
  3768 0000305F 2C41                <1> 	sub al, "A"
  3769 00003061 040A                <1> 	add al, 0xA
  3770 00003063 EBD4                <1> 	jmp .donechar
  3771                              <1> 	
  3772                              <1> 	
  3773                              <1> cnvrttxt: 
  3774 00003065 31C9                <1> 	xor ecx, ecx
  3775 00003067 31C0                <1> 	xor eax, eax
  3776 00003069 31D2                <1> 	xor edx, edx
  3777 0000306B 31DB                <1> 	xor ebx, ebx
  3778 0000306D 4E                  <1> 	dec esi
  3779                              <1> .lp:
  3780 0000306E 46                  <1> 	inc esi
  3781 0000306F 8A06                <1> 	mov al, [esi]
  3782 00003071 3C00                <1> 	cmp al, 0
  3783 00003073 75F9                <1> 	jne .lp
  3784 00003075 4E                  <1> 	dec esi
  3785 00003076 8A06                <1> 	mov al, [esi]
  3786 00003078 3C2E                <1> 	cmp al, '.'
  3787 0000307A 7503                <1> 	jne .dot
  3788 0000307C 46                  <1> 	inc esi
  3789 0000307D EBEF                <1> 	jmp .lp
  3790                              <1> .dot:
  3791 0000307F 3C20                <1> 	cmp al, ' '
  3792 00003081 7404                <1> 	je .zero
  3793 00003083 3C30                <1> 	cmp al, '0'
  3794 00003085 7504                <1> 	jne .txtlp
  3795                              <1> .zero: 
  3796 00003087 39FE                <1> 		cmp esi, edi
  3797 00003089 7458                <1> 		je .done
  3798                              <1> .txtlp:
  3799 0000308B 31C0                <1> 	xor eax, eax
  3800 0000308D 8A06                <1> 	mov al, [esi]
  3801 0000308F 3C3D                <1> 	cmp al, '='
  3802 00003091 7450                <1> 	je .done
  3803 00003093 3C30                <1> 	cmp al, 48
  3804 00003095 724C                <1> 	jb .done
  3805 00003097 3C23                <1> 	cmp al, '#'
  3806 00003099 7448                <1> 	je .done
  3807 0000309B 39FE                <1> 	cmp esi, edi
  3808 0000309D 7244                <1> 	jb .done
  3809 0000309F 81F900000000        <1> 	cmp ecx, 0
  3810 000030A5 7708                <1> 	ja .exp
  3811 000030A7 2C30                <1> .noexp:	sub al, 48
  3812 000030A9 01C2                <1> 	add edx, eax
  3813 000030AB 4E                  <1> 	dec esi
  3814 000030AC 41                  <1> 	inc ecx
  3815 000030AD EBDC                <1> 	jmp .txtlp
  3816 000030AF 81F900000000        <1> .exp:	cmp ecx, 0
  3817 000030B5 74F0                <1> 	je .noexp
  3818 000030B7 2C30                <1> 	sub al, 48
  3819 000030B9 51                  <1> 	push ecx
  3820 000030BA 89C3                <1> .expmul:	mov ebx, eax
  3821 000030BC 01D8                <1> 	add eax, ebx
  3822 000030BE 01D8                <1> 	add eax, ebx
  3823 000030C0 01D8                <1> 	add eax, ebx
  3824 000030C2 01D8                <1> 	add eax, ebx
  3825 000030C4 01D8                <1> 	add eax, ebx
  3826 000030C6 01D8                <1> 	add eax, ebx
  3827 000030C8 01D8                <1> 	add eax, ebx
  3828 000030CA 01D8                <1> 	add eax, ebx
  3829 000030CC 01D8                <1> 	add eax, ebx
  3830 000030CE 81E901000000        <1> 	sub ecx, 1
  3831 000030D4 81F900000000        <1> 	cmp ecx, 0
  3832 000030DA 77DE                <1> 	ja .expmul
  3833 000030DC 01C2                <1> 	add edx, eax
  3834 000030DE 59                  <1> 	pop ecx
  3835 000030DF 4E                  <1> 	dec esi
  3836 000030E0 41                  <1> 	inc ecx
  3837 000030E1 EBA8                <1> 	jmp .txtlp
  3838 000030E3 89D1                <1> .done: mov ecx, edx
  3839 000030E5 C3                  <1> 	ret
  3840                                      %include "source/programs.asm"
  3841 000030E6 FF2C                <1> filetypes db 255,44
  3842                              <1> progstart:		;programs start here
  3843                              <1> indexfiles:
  3844 000030E8 BE[E8300000]        <1> 	mov esi, progstart
  3845 000030ED BB[BE9A0000]        <1> 	mov ebx, fileindex
  3846 000030F2 BF[E8300000]        <1> 	mov edi, progstart
  3847 000030F7 81EF02000000        <1> 	sub edi, 2
  3848                              <1> indexloop:
  3849 000030FD 668B0E              <1> 	mov cx, [esi]
  3850                              <1> 	indexloop2:
  3851 00003100 663B0F              <1> 		cmp cx, [edi]
  3852 00003103 7424                <1> 		je indexloop2done
  3853 00003105 81EF02000000        <1> 		sub edi, 2
  3854 0000310B 81FF[E6300000]      <1> 		cmp edi, filetypes
  3855 00003111 73ED                <1> 		jae indexloop2
  3856 00003113 BF[E8300000]        <1> 	mov edi, progstart
  3857 00003118 81EF02000000        <1> 	sub edi, 2
  3858 0000311E 46                  <1> 	inc esi
  3859 0000311F 81FE[0F480000]      <1> 	cmp esi, batchprogend
  3860 00003125 734E                <1> 	jae indexloopdone
  3861 00003127 EBD4                <1> 	jmp indexloop
  3862                              <1> indexloop2done:
  3863 00003129 66890B              <1> 	mov [ebx], cx
  3864 0000312C 81C302000000        <1> 	add ebx, 2
  3865 00003132 81C602000000        <1> 	add esi, 2
  3866                              <1> 	nameindex:
  3867 00003138 8A0E                <1> 		mov cl, [esi]
  3868 0000313A 80F900              <1> 		cmp cl, 0
  3869 0000313D 7406                <1> 		je nameindexdone
  3870 0000313F 880B                <1> 		mov [ebx], cl
  3871 00003141 46                  <1> 		inc esi
  3872 00003142 43                  <1> 		inc ebx
  3873 00003143 EBF3                <1> 		jmp nameindex
  3874                              <1> 	nameindexdone:
  3875 00003145 43                  <1> 		inc ebx
  3876 00003146 66C7030000          <1> 		mov word [ebx], 0
  3877 0000314B 81C302000000        <1> 		add ebx, 2
  3878 00003151 46                  <1> 		inc esi
  3879 00003152 8933                <1> 		mov [ebx], esi
  3880 00003154 81C304000000        <1> 		add ebx, 4
  3881 0000315A 66C7030000          <1> 		mov word [ebx], 0
  3882 0000315F 81C302000000        <1> 		add ebx, 2
  3883 00003165 81FB[BE9E0000]      <1> 		cmp ebx, fileindexend
  3884 0000316B 7308                <1> 		jae indexloopdone
  3885 0000316D 81C601000000        <1> 		add esi, 1
  3886 00003173 EB88                <1> 		jmp indexloop
  3887 00003175 C605[7D310000]01    <1> indexloopdone: 	mov byte [indexdone], 1
  3888 0000317C C3                  <1> 		ret
  3889                              <1> 
  3890 0000317D 00                  <1> indexdone db 0
  3891                              <1> %include 'source/programs/_comment.asm' ;#
  3892 0000317E FF2C2300            <2> 	db 255,44,"#",0	;this lets you rem stuff
  3893 00003182 C3                  <2> 	ret 
  3894                              <1> %include 'source/programs/_math.asm' ;!
  3895 00003183 FF2C2100            <2> db 255,44,"!",0
  3896                              <2> 	num:	
  3897 00003187 E8C5FBFFFF          <2> 		call clearbuffer
  3898 0000318C C605[0D340000]00    <2> 		mov byte [decimal], 0
  3899 00003193 C605[0E340000]00    <2> 		mov byte [decimal2], 0
  3900 0000319A 8B35[922C0000]      <2> 		mov esi, [currentcommandloc]
  3901 000031A0 31C0                <2> 		xor eax, eax
  3902 000031A2 31C9                <2> 		xor ecx, ecx
  3903 000031A4 31DB                <2> 		xor ebx, ebx
  3904 000031A6 8A06                <2> 	num2:	mov al, [esi]
  3905 000031A8 3C2B                <2> 		cmp al, '+'
  3906 000031AA 741B                <2> 		je operatorfound
  3907 000031AC 3C2D                <2> 		cmp al, '-'
  3908 000031AE 7417                <2> 		je operatorfound
  3909 000031B0 3C2A                <2> 		cmp al, '*'
  3910 000031B2 7413                <2> 		je operatorfound
  3911 000031B4 3C2F                <2> 		cmp al, '/'
  3912 000031B6 740F                <2> 		je operatorfound
  3913 000031B8 3C5E                <2> 		cmp al, '^'
  3914 000031BA 740B                <2> 		je operatorfound
  3915 000031BC 46                  <2> 		inc esi
  3916 000031BD 3C00                <2> 		cmp al, 0
  3917 000031BF 0F841FF8FFFF        <2> 		je near nwcmd
  3918 000031C5 EBDF                <2> 		jmp num2
  3919 000031C7 50                  <2> 	operatorfound: push eax
  3920 000031C8 30E4                <2> 		xor ah, ah
  3921 000031CA 8826                <2> 		mov [esi], ah
  3922 000031CC 89F7                <2> 		mov edi, esi
  3923 000031CE 46                  <2> 		inc esi
  3924 000031CF 8A06                <2> 		mov al, [esi]
  3925 000031D1 3C25                <2> 		cmp al, '%'
  3926 000031D3 0F8462000000        <2> 		je near resultnum1
  3927                              <2> 	varnum2: 
  3928 000031D9 57                  <2> 		push edi
  3929 000031DA E8A4000000          <2> 		call checkdecimal
  3930 000031DF 5F                  <2> 		pop edi
  3931 000031E0 E880FEFFFF          <2> 		call cnvrttxt
  3932                              <2> 	vrnm2:
  3933 000031E5 89CB                <2> 		mov ebx, ecx
  3934 000031E7 53                  <2> 		push ebx
  3935 000031E8 E864FBFFFF          <2> 		call clearbuffer
  3936 000031ED 8B35[922C0000]      <2> 		mov esi, [currentcommandloc]
  3937 000031F3 89F7                <2> 		mov edi, esi
  3938 000031F5 46                  <2> 		inc esi
  3939 000031F6 8A06                <2> 		mov al, [esi]
  3940 000031F8 3C25                <2> 		cmp al, '%'
  3941 000031FA 0F844F000000        <2> 		je near resultnum2
  3942                              <2> 	varnum4: 
  3943 00003200 57                  <2> 		push edi
  3944 00003201 E869000000          <2> 		call checkdecimal2
  3945 00003206 5F                  <2> 		pop edi
  3946 00003207 E859FEFFFF          <2> 		call cnvrttxt
  3947                              <2> 	vrnm4:
  3948 0000320C 5B                  <2> 		pop ebx
  3949 0000320D 58                  <2> 		pop eax
  3950 0000320E 3C2B                <2> 		cmp al, '+'
  3951 00003210 0F849B000000        <2> 		je near plusnum
  3952 00003216 3C2D                <2> 		cmp al, '-'
  3953 00003218 0F849F000000        <2> 		je near subnum
  3954 0000321E 3C2A                <2> 		cmp al, '*'
  3955 00003220 0F84A3000000        <2> 		je near mulnum
  3956 00003226 3C2F                <2> 		cmp al, '/'
  3957 00003228 0F84B1000000        <2> 		je near divnum
  3958 0000322E 3C5E                <2> 		cmp al, '^'
  3959 00003230 0F84CE000000        <2> 		je near expnum
  3960 00003236 E9A9F7FFFF          <2> 		jmp nwcmd
  3961                              <2> 	resultnum1:
  3962 0000323B 8A0D[0F340000]      <2> 		mov cl, [decimalresult]
  3963 00003241 880D[0D340000]      <2> 		mov [decimal], cl
  3964 00003247 8B0D[10340000]      <2> 		mov ecx, [result]
  3965 0000324D EB96                <2> 		jmp vrnm2
  3966                              <2> 	resultnum2:
  3967 0000324F 8A0D[0D340000]      <2> 		mov cl, [decimal]
  3968 00003255 880D[0E340000]      <2> 		mov [decimal2], cl
  3969 0000325B 8A0D[0F340000]      <2> 		mov cl, [decimalresult]
  3970 00003261 880D[0D340000]      <2> 		mov [decimal], cl
  3971 00003267 8B0D[10340000]      <2> 		mov ecx, [result]
  3972 0000326D EB9D                <2> 		jmp vrnm4
  3973                              <2> 	checkdecimal2:
  3974 0000326F 8A25[0D340000]      <2> 		mov ah, [decimal]
  3975 00003275 8825[0E340000]      <2> 		mov [decimal2], ah
  3976 0000327B 30E4                <2> 		xor ah, ah
  3977 0000327D 8825[0D340000]      <2> 		mov [decimal], ah
  3978                              <2> 	checkdecimal:
  3979 00003283 89F7                <2> 		mov edi, esi
  3980                              <2> 	chkdec1:
  3981 00003285 8A07                <2> 		mov al, [edi]
  3982 00003287 3C2E                <2> 		cmp al, '.'
  3983 00003289 0F840B000000        <2> 		je near fnddec
  3984 0000328F 3C00                <2> 		cmp al, 0
  3985 00003291 0F8419000000        <2> 		je near nodecimal
  3986 00003297 47                  <2> 		inc edi
  3987 00003298 EBEB                <2> 		jmp chkdec1
  3988                              <2> 	fnddec:
  3989 0000329A 8A4701              <2> 		mov al, [edi + 1]
  3990 0000329D 8807                <2> 		mov [edi], al
  3991 0000329F 3C00                <2> 		cmp al, 0
  3992 000032A1 0F8409000000        <2> 		je near nodecimal
  3993 000032A7 FE05[0D340000]      <2> 		inc byte [decimal]
  3994 000032AD 47                  <2> 		inc edi
  3995 000032AE EBEA                <2> 		jmp fnddec
  3996                              <2> 	nodecimal:
  3997 000032B0 C3                  <2> 		ret
  3998                              <2> 	plusnum:
  3999 000032B1 E815010000          <2> 		call decaddfix
  4000 000032B6 01D9                <2> 		add ecx, ebx
  4001 000032B8 E98A000000          <2> 		jmp retnum
  4002                              <2> 	subnum:
  4003 000032BD E809010000          <2> 		call decaddfix
  4004 000032C2 29D9                <2> 		sub ecx, ebx
  4005 000032C4 E97E000000          <2> 		jmp retnum
  4006                              <2> 	mulnum:
  4007 000032C9 A0[0E340000]        <2> 		mov al, [decimal2]
  4008 000032CE 0005[0D340000]      <2> 		add [decimal], al
  4009 000032D4 89C8                <2> 		mov eax, ecx
  4010 000032D6 F7E3                <2> 		mul ebx
  4011 000032D8 89C1                <2> 		mov ecx, eax
  4012 000032DA E968000000          <2> 		jmp retnum
  4013                              <2> 	divnum:
  4014 000032DF E8E7000000          <2> 		call decaddfix
  4015 000032E4 30C0                <2> 		xor al, al
  4016 000032E6 A2[0D340000]        <2> 		mov [decimal], al
  4017 000032EB 31D2                <2> 		xor edx, edx
  4018 000032ED 89C8                <2> 		mov eax, ecx
  4019 000032EF 81FB00000000        <2> 		cmp ebx, 0
  4020 000032F5 0F844C000000        <2> 		je near retnum
  4021 000032FB F7F3                <2> 		div ebx
  4022 000032FD 89C1                <2> 		mov ecx, eax
  4023 000032FF E943000000          <2> 		jmp retnum
  4024                              <2> 	expnum:
  4025 00003304 8A15[0D340000]      <2> 		mov dl, [decimal]
  4026 0000330A 8815[0E340000]      <2> 		mov [decimal2], dl
  4027 00003310 31D2                <2> 		xor edx, edx
  4028 00003312 89C8                <2> 		mov eax, ecx
  4029 00003314 89D9                <2> 		mov ecx, ebx
  4030 00003316 89C3                <2> 		mov ebx, eax
  4031 00003318 81F900000000        <2> 		cmp ecx, 0
  4032 0000331E 7422                <2> 		je noexpnum
  4033 00003320 49                  <2> 		dec ecx
  4034 00003321 81F900000000        <2> 		cmp ecx, 0
  4035 00003327 7412                <2> 		je noexpnumlp
  4036 00003329 F7E3                <2> 	expnumlp: mul ebx
  4037 0000332B 8A15[0E340000]      <2> 		mov dl, [decimal2]
  4038 00003331 0015[0D340000]      <2> 		add [decimal], dl
  4039 00003337 31D2                <2> 		xor edx, edx
  4040 00003339 E2EE                <2> 		loop expnumlp
  4041                              <2> 	noexpnumlp:
  4042 0000333B 89C1                <2> 		mov ecx, eax
  4043 0000333D E905000000          <2> 		jmp retnum
  4044                              <2> 	noexpnum:
  4045 00003342 B901000000          <2> 		mov ecx, 1
  4046                              <2> 	retnum: 
  4047 00003347 BE[4EB90000]        <2> 		mov esi, numbuf
  4048 0000334C 890D[10340000]      <2> 		mov [result], ecx
  4049 00003352 E80FFAFFFF          <2> 		call convert
  4050 00003357 BE[4EB90000]        <2> 		mov esi, numbuf
  4051 0000335C 8A25[0D340000]      <2> 		mov ah, [decimal]
  4052 00003362 8825[0F340000]      <2> 		mov [decimalresult], ah
  4053 00003368 80FC00              <2> 		cmp ah, 0
  4054 0000336B 0F8425000000        <2> 		je near noputdecimal
  4055                              <2> 	putdecimal:
  4056 00003371 4E                  <2> 		dec esi
  4057 00003372 FECC                <2> 		dec ah
  4058 00003374 80FC00              <2> 		cmp ah, 0
  4059 00003377 0F87F4FFFFFF        <2> 		ja near putdecimal
  4060 0000337D 4E                  <2> 		dec esi
  4061 0000337E 8A06                <2> 		mov al, [esi]
  4062 00003380 C6062E              <2> 		mov byte [esi], '.'
  4063                              <2> 	decputloop:
  4064 00003383 4E                  <2> 		dec esi
  4065 00003384 8A26                <2> 		mov ah, [esi]
  4066 00003386 8806                <2> 		mov [esi], al
  4067 00003388 88E0                <2> 		mov al, ah
  4068 0000338A 81FE[3AB90000]      <2> 		cmp esi, buf2
  4069 00003390 0F87EDFFFFFF        <2> 		ja near decputloop
  4070                              <2> 	noputdecimal:
  4071 00003396 BE[3AB90000]        <2> 		mov esi, buf2
  4072 0000339B E809000000          <2> 		call chkadd
  4073 000033A0 E93FF6FFFF          <2> 		jmp nwcmd
  4074 000033A5 00000000            <2> edxnumbuf dw 0,0
  4075 000033A9 8A06                <2> 	chkadd: mov al, [esi]
  4076 000033AB 3C30                <2> 		cmp al, '0'
  4077 000033AD 750C                <2> 		jne dnadd
  4078 000033AF 46                  <2> 		inc esi
  4079 000033B0 81FE[4EB90000]      <2> 		cmp esi, numbuf
  4080 000033B6 7402                <2> 		je dnaddm1
  4081 000033B8 EBEF                <2> 		jmp chkadd
  4082 000033BA 4E                  <2> 	dnaddm1: dec esi
  4083 000033BB E815EBFFFF          <2> 	dnadd:	call print
  4084 000033C0 BE[E8760000]        <2> 		mov esi, line
  4085 000033C5 E80BEBFFFF          <2> 		call print
  4086 000033CA C3                  <2> 		ret
  4087                              <2> 		
  4088                              <2> 	decaddfix:
  4089 000033CB A0[0E340000]        <2> 		mov al, [decimal2]
  4090 000033D0 8A25[0D340000]      <2> 		mov ah, [decimal]
  4091 000033D6 38E0                <2> 		cmp al, ah
  4092 000033D8 7432                <2> 		je gooddecadd
  4093 000033DA 38E0                <2> 		cmp al, ah
  4094 000033DC 721A                <2> 		jb lowdecadd
  4095                              <2> 	highdecadd:
  4096 000033DE FEC4                <2> 		inc ah
  4097 000033E0 89CA                <2> 		mov edx, ecx
  4098 000033E2 C1E103              <2> 		shl ecx, 3
  4099 000033E5 01D1                <2> 		add ecx, edx
  4100 000033E7 01D1                <2> 		add ecx, edx
  4101 000033E9 38E0                <2> 		cmp al, ah
  4102 000033EB 77F1                <2> 		ja highdecadd
  4103 000033ED 8825[0D340000]      <2> 		mov [decimal], ah
  4104 000033F3 E914000000          <2> 		jmp gooddecadd
  4105                              <2> 	lowdecadd:
  4106 000033F8 FEC0                <2> 		inc al
  4107 000033FA 89DA                <2> 		mov edx, ebx
  4108 000033FC C1E303              <2> 		shl ebx, 3
  4109 000033FF 01D3                <2> 		add ebx, edx
  4110 00003401 01D3                <2> 		add ebx, edx
  4111 00003403 38E0                <2> 		cmp al, ah
  4112 00003405 72F1                <2> 		jb lowdecadd
  4113 00003407 A2[0D340000]        <2> 		mov [decimal], al
  4114                              <2> 	gooddecadd:
  4115 0000340C C3                  <2> 		ret
  4116                              <2> 		
  4117 0000340D 00                  <2> decimal db 0
  4118 0000340E 00                  <2> decimal2 db 0
  4119 0000340F 00                  <2> decimalresult db 0
  4120 00003410 00000000            <2> result dd 0
  4121                              <1> %include 'source/programs/_variables.asm' ;% and $
  4122 00003414 FF2C2500            <2> db 255,44,"%",0
  4123                              <2> 	ans:
  4124 00003418 BE[3AB90000]        <2> 		mov esi, buf2
  4125 0000341D E887FFFFFF          <2> 		call chkadd
  4126 00003422 C3                  <2> 		ret
  4127                              <2> 		
  4128 00003423 FF2C2400            <2> db 255,44,"$",0
  4129 00003427 8B35[922C0000]      <2> var: mov esi, [currentcommandloc]
  4130 0000342D BB[3AA10000]        <2> 	mov ebx, variables
  4131 00003432 8A06                <2> lkeq:	mov al, [esi]
  4132 00003434 3C3D                <2> 	cmp al, '='
  4133 00003436 741B                <2> 	je eqfnd	;is there an '=' sign?
  4134 00003438 3C00                <2> 	cmp al, 0
  4135 0000343A 7403                <2> 	je echovars
  4136 0000343C 46                  <2> 	inc esi
  4137 0000343D EBF3                <2> 	jmp lkeq
  4138 0000343F BE[3AA10000]        <2> echovars: mov esi, variables
  4139 00003444 BB[3AB10000]        <2> 	mov ebx, varend
  4140 00003449 B105                <2> 	mov cl, 5
  4141 0000344B B504                <2> 	mov ch, 4
  4142 0000344D E89EF8FFFF          <2> 	call array
  4143 00003452 C3                  <2> 	ret
  4144 00003453 46                  <2> eqfnd:	inc esi
  4145 00003454 8A06                <2> 	mov al, [esi]
  4146 00003456 3C00                <2> 	cmp al, 0
  4147 00003458 7410                <2> 	je readvar
  4148 0000345A 8B35[922C0000]      <2> 	mov esi, [currentcommandloc]
  4149 00003460 BB[3AA10000]        <2> 	mov ebx, variables
  4150 00003465 E919000000          <2> 	jmp seek
  4151                              <2> readvar:
  4152 0000346A B00A                <2> 	mov al, 10
  4153 0000346C 66BB0700            <2> 	mov bx, 7
  4154 00003470 C605[20230000]00    <2> 	mov byte [commandedit], 0
  4155 00003477 BF[3AB90000]        <2> 	mov edi, buftxtend
  4156 0000347C E83EEBFFFF          <2> 	call rdprint
  4157 00003481 EBA4                <2> 	jmp var
  4158 00003483 668B03              <2> seek:	mov ax, [ebx]
  4159 00003486 B105                <2> 	mov cl, 5
  4160 00003488 B504                <2> 	mov ch, 4
  4161 0000348A 663D0000            <2> 	cmp ax, 0
  4162 0000348E 0F845B000000        <2> 	je near save
  4163 00003494 6639C8              <2> 	cmp ax, cx
  4164 00003497 7403                <2> 	je skfnd
  4165 00003499 43                  <2> 	inc ebx
  4166 0000349A EBE7                <2> 	jmp seek
  4167 0000349C 8B35[922C0000]      <2> skfnd:	mov esi, [currentcommandloc]
  4168 000034A2 46                  <2> 	inc esi
  4169 000034A3 81C302000000        <2> 	add ebx, 2
  4170 000034A9 89DF                <2> 	mov edi, ebx
  4171 000034AB B13D                <2> 	mov cl, '='
  4172 000034AD E81FF8FFFF          <2> 	call cndtest
  4173 000034B2 3C01                <2> 	cmp al, 1	
  4174 000034B4 7418                <2> 	je varfnd
  4175 000034B6 89FB                <2> 	mov ebx, edi
  4176 000034B8 8B35[922C0000]      <2> 	mov esi, [currentcommandloc]
  4177 000034BE 668B03              <2> 	mov ax, [ebx]
  4178 000034C1 663D0000            <2> 	cmp ax, 0
  4179 000034C5 0F8424000000        <2> 	je near save
  4180 000034CB 43                  <2> 	inc ebx
  4181 000034CC EBB5                <2> 	jmp seek
  4182 000034CE 8A03                <2> varfnd:	mov al, [ebx]
  4183 000034D0 3C04                <2> 	cmp al, 4
  4184 000034D2 7404                <2> 	je save2
  4185 000034D4 4B                  <2> 	dec ebx
  4186 000034D5 4E                  <2> 	dec esi
  4187 000034D6 EBF6                <2> 	jmp varfnd
  4188 000034D8 4B                  <2> save2:	dec ebx
  4189 000034D9 4E                  <2> 	dec esi
  4190 000034DA 8A03                <2> 	mov al, [ebx]
  4191 000034DC 3C05                <2> 	cmp al, 5
  4192 000034DE 7402                <2> 	je remove
  4193 000034E0 EBEC                <2> 	jmp varfnd
  4194 000034E2 8A03                <2> remove: mov al, [ebx]
  4195 000034E4 3C00                <2> 	cmp al, 0
  4196 000034E6 749B                <2> 	je seek
  4197 000034E8 30C0                <2> 	xor al, al
  4198 000034EA 8803                <2> 	mov [ebx], al
  4199 000034EC 43                  <2> 	inc ebx
  4200 000034ED EBF3                <2> 	jmp remove	;do not need for now-need defragmentation
  4201 000034EF 8B35[922C0000]      <2> save:	mov esi, [currentcommandloc]
  4202 000034F5 43                  <2> 	inc ebx
  4203 000034F6 B005                <2> 	mov al, 5
  4204 000034F8 B404                <2> 	mov ah, 4
  4205 000034FA 668903              <2> 	mov [ebx], ax
  4206 000034FD 43                  <2> 	inc ebx
  4207 000034FE 43                  <2> svhere:	inc ebx
  4208 000034FF 46                  <2> 	inc esi
  4209 00003500 8A06                <2> 	mov al, [esi]
  4210 00003502 3C00                <2> 	cmp al, 0
  4211 00003504 0F844A000000        <2> 	je near svdone
  4212 0000350A 3C25                <2> 	cmp al, '%'
  4213 0000350C 7404                <2> 	je ans2
  4214 0000350E 8803                <2> 	mov [ebx], al	
  4215 00003510 EBEC                <2> 	jmp svhere
  4216 00003512 56                  <2> ans2:	push esi
  4217 00003513 BE[3AB90000]        <2> 	mov esi, buf2
  4218 00003518 E823000000          <2> 	call ansfnd
  4219 0000351D E803000000          <2> 	call anscp
  4220 00003522 5E                  <2> 	pop esi
  4221 00003523 EBD9                <2> 	jmp svhere
  4222 00003525 8A06                <2> anscp:	mov al, [esi]
  4223 00003527 8803                <2> 	mov [ebx], al
  4224 00003529 81FE[4EB90000]      <2> 	cmp esi, numbuf
  4225 0000352F 74CD                <2> 	je svhere
  4226 00003531 3C00                <2> 	cmp al, 0
  4227 00003533 74C9                <2> 	je svhere
  4228 00003535 43                  <2> 	inc ebx
  4229 00003536 46                  <2> 	inc esi
  4230 00003537 EBEC                <2> 	jmp anscp
  4231 00003539 5E                  <2> ansnf:	pop esi
  4232 0000353A 8A06                <2> 	mov al, [esi]
  4233 0000353C 8803                <2> 	mov [ebx], al
  4234 0000353E EBBE                <2> 	jmp svhere
  4235 00003540 46                  <2> ansfnd:	inc esi
  4236 00003541 81FE[4DB90000]      <2> 	cmp esi, numbuf - 1
  4237 00003547 740A                <2> 	je fndans
  4238 00003549 8A06                <2> 	mov al, [esi]
  4239 0000354B 3C00                <2> 	cmp al, 0
  4240 0000354D 74EA                <2> 	je ansnf
  4241 0000354F 3C30                <2> 	cmp al, '0'
  4242 00003551 74ED                <2> 	je ansfnd
  4243                              <2> fndans:
  4244 00003553 C3                  <2> 	ret
  4245 00003554 30C0                <2> svdone:	xor al, al
  4246 00003556 8803                <2> 	mov [ebx], al
  4247 00003558 C3                  <2> 	ret
  4248                              <1> %include 'source/programs/_run.asm' ;./
  4249                              <2> 
  4250 00003559 7F454C46            <2> 	elfstart db 0x7F,"ELF"
  4251 0000355D FF2C2E2F00          <2> 	db 255,44,"./",0
  4252                              <2> rundiskprog:
  4253 00003562 8B3D[922C0000]      <2> 	mov edi, [currentcommandloc]
  4254 00003568 81C702000000        <2> 	add edi, 2
  4255 0000356E BE00004000          <2> 	mov esi, 0x400000
  4256 00003573 E80D230000          <2> 	call loadfile
  4257 00003578 81FA94010000        <2> 	cmp edx, 404
  4258 0000357E 7456                <2> 	je noprogfound
  4259 00003580 BB00004000          <2> 	mov ebx, 0x400000
  4260 00003585 A1[59350000]        <2> 	mov eax, [elfstart]
  4261 0000358A 3903                <2> 	cmp [ebx], eax
  4262 0000358C 0F842B000000        <2> 	je near runelf
  4263 00003592 66813B4558          <2> 	cmp word [ebx], "EX"
  4264 00003597 7563                <2> 	jne progbatchfound
  4265 00003599 81C302000000        <2> 	add ebx, 2
  4266 0000359F 8B3D[922C0000]      <2> 	mov edi, [currentcommandloc]
  4267 000035A5 81C702000000        <2> 	add edi, 2
  4268                              <2> findspaceprog:
  4269 000035AB 8A07                <2> 	mov al, [edi]
  4270 000035AD 47                  <2> 	inc edi
  4271 000035AE 3C20                <2> 	cmp al, " "
  4272 000035B0 75F9                <2> 	jne findspaceprog
  4273                              <2> findnonspaceprog:
  4274 000035B2 8A07                <2> 	mov al, [edi]
  4275 000035B4 47                  <2> 	inc edi
  4276 000035B5 3C20                <2> 	cmp al, " "
  4277 000035B7 74F9                <2> 	je findnonspaceprog
  4278 000035B9 4F                  <2> 	dec edi
  4279 000035BA FFD3                <2> 	call ebx
  4280 000035BC C3                  <2> 	ret
  4281                              <2> runelf:
  4282 000035BD 8B3D[922C0000]      <2> 	mov edi, [currentcommandloc]
  4283 000035C3 81C702000000        <2> 	add edi, 2
  4284 000035C9 81C380000000        <2> 	add ebx, 0x80
  4285 000035CF FFD3                <2> 	call ebx
  4286 000035D1 E90EF4FFFF          <2> 	jmp nwcmd
  4287                              <2> noprogfound:
  4288 000035D6 BE[A7760000]        <2> 	mov esi, notfound1
  4289 000035DB E8F5E8FFFF          <2> 	call print
  4290 000035E0 8B35[922C0000]      <2> 	mov esi, [currentcommandloc]
  4291 000035E6 81C602000000        <2> 	add esi, 2
  4292 000035EC E8E4E8FFFF          <2> 	call print
  4293 000035F1 BE[AF760000]        <2> 	mov esi, notfound2
  4294 000035F6 E8DAE8FFFF          <2> 	call print
  4295 000035FB C3                  <2> 	ret
  4296                              <2> progbatchfound:
  4297 000035FC BF00004000          <2> 		mov edi, 0x400000
  4298 00003601 C605[34A10000]01    <2> 		mov byte [BATCHISON], 1
  4299                              <2> 	batchrunloop:
  4300 00003608 E8B4F3FFFF          <2> 		call buftxtclear
  4301 0000360D BE[3AB50000]        <2> 		mov esi, buftxt
  4302 00003612 8935[922C0000]      <2> 		mov [currentcommandloc], esi
  4303                              <2> 	batchrunloop2:
  4304 00003618 B10A                <2> 		mov cl, 10
  4305 0000361A B50D                <2> 		mov ch, 13
  4306 0000361C 380F                <2> 		cmp [edi], cl
  4307 0000361E 0F8419000000        <2> 		je near nxtbatchrunline
  4308 00003624 382F                <2> 		cmp [edi], ch
  4309 00003626 0F8411000000        <2> 		je near nxtbatchrunline
  4310 0000362C 803F00              <2> 		cmp byte [edi], 0
  4311 0000362F 0F8408000000        <2> 		je near nxtbatchrunline
  4312 00003635 8A07                <2> 		mov al, [edi]
  4313 00003637 8806                <2> 		mov [esi], al
  4314 00003639 46                  <2> 		inc esi
  4315 0000363A 47                  <2> 		inc edi
  4316 0000363B EBDB                <2> 		jmp batchrunloop2
  4317                              <2> 	nxtbatchrunline:
  4318 0000363D 47                  <2> 		inc edi
  4319 0000363E 380F                <2> 		cmp [edi], cl
  4320 00003640 74FB                <2> 		je nxtbatchrunline
  4321 00003642 382F                <2> 		cmp [edi], ch
  4322 00003644 74F7                <2> 		je nxtbatchrunline
  4323 00003646 893D[A4360000]      <2> 		mov [batchedi], edi
  4324 0000364C 893D[30A10000]      <2> 		mov [BATCHPOS], edi
  4325 00003652 C60600              <2> 		mov byte [esi], 0
  4326 00003655 BE[3AB50000]        <2> 		mov esi, buftxt
  4327 0000365A 803E00              <2> 		cmp byte [esi], 0
  4328 0000365D 0F8439000000        <2> 		je near nobatchfoundrun
  4329 00003663 31DB                <2> 		xor ebx, ebx
  4330 00003665 8A1D[CBA00000]      <2> 		mov bl, [IFON]
  4331 0000366B 80FB00              <2> 		cmp bl, 0
  4332 0000366E 0F8534000000        <2> 		jne near iftestbatch
  4333                              <2> 	doneiftest:
  4334 00003674 803D[7A370000]00    <2> 		cmp byte [runnextline], 0
  4335 0000367B 0F8405000000        <2> 		je near noruniftest
  4336 00003681 E82EF5FFFF          <2> 		call run
  4337                              <2> 	noruniftest:
  4338 00003686 C605[7A370000]01    <2> 		mov byte [runnextline], 1
  4339 0000368D 8B3D[A4360000]      <2> 		mov edi, [batchedi]
  4340 00003693 803F00              <2> 		cmp byte [edi], 0
  4341 00003696 0F856CFFFFFF        <2> 		jne near batchrunloop
  4342                              <2> 	nobatchfoundrun:
  4343 0000369C C605[34A10000]00    <2> 		mov byte [BATCHISON], 0
  4344 000036A3 C3                  <2> 		ret
  4345                              <2> 	
  4346 000036A4 00000000            <2> batchedi dd 0	
  4347                              <2> 	
  4348                              <2> 	iftestbatch:
  4349 000036A8 BE[CCA00000]        <2> 		mov esi, IFTRUE
  4350 000036AD 01DE                <2> 		add esi, ebx
  4351 000036AF 803E00              <2> 		cmp byte [esi], 0
  4352 000036B2 0F85BCFFFFFF        <2> 		jne near doneiftest
  4353 000036B8 881D[7B370000]      <2> 		mov [iffalsebuf], bl
  4354 000036BE 803D[35A10000]01    <2> 		cmp byte [LOOPON], 1
  4355 000036C5 0F8513000000        <2> 		jne near fifindbatch
  4356 000036CB E938FFFFFF          <2> 		jmp batchrunloop
  4357                              <2> 	elsetestbatch:
  4358 000036D0 C60601              <2> 		mov byte [esi], 1
  4359 000036D3 81C705000000        <2> 		add edi, 5
  4360 000036D9 E92AFFFFFF          <2> 		jmp batchrunloop
  4361                              <2> 	fifindbatch:
  4362 000036DE 66B96966            <2> 		mov cx, "if"
  4363 000036E2 66B86669            <2> 		mov ax, "fi"
  4364 000036E6 663907              <2> 		cmp [edi], ax
  4365 000036E9 0F8424000000        <2> 		je near fifoundbatch
  4366 000036EF 66390F              <2> 		cmp [edi], cx
  4367 000036F2 0F8465000000        <2> 		je near iffoundbatch
  4368 000036F8 803F00              <2> 		cmp byte [edi], 0
  4369 000036FB 0F8412000000        <2> 		je near fifoundbatch
  4370 00003701 B8656C7365          <2> 		mov eax, "else"
  4371 00003706 3907                <2> 		cmp [edi], eax
  4372 00003708 0F84C2FFFFFF        <2> 		je near elsetestbatch
  4373 0000370E E973FFFFFF          <2> 		jmp noruniftest
  4374                              <2> 	fifoundbatch:
  4375 00003713 81C702000000        <2> 		add edi, 2
  4376 00003719 B00A                <2> 		mov al, 10
  4377 0000371B 3807                <2> 		cmp [edi], al
  4378 0000371D 0F840B000000        <2> 		je near goodfibatch
  4379 00003723 803F00              <2> 		cmp byte [edi], 0
  4380 00003726 0F8470FFFFFF        <2> 		je near nobatchfoundrun
  4381 0000372C EBB0                <2> 		jmp fifindbatch
  4382                              <2> 	goodfibatch:
  4383 0000372E B001                <2> 		mov al, 1
  4384 00003730 2805[CBA00000]      <2> 		sub [IFON], al 
  4385 00003736 A0[CBA00000]        <2> 		mov al, [IFON]
  4386 0000373B 8A1D[7B370000]      <2> 		mov bl, [iffalsebuf]
  4387 00003741 38D8                <2> 		cmp al, bl
  4388 00003743 7799                <2> 		ja fifindbatch
  4389 00003745 8B35[922C0000]      <2> 		mov esi, [currentcommandloc]
  4390 0000374B 81EF02000000        <2> 		sub edi, 2
  4391 00003751 C605[7A370000]00    <2> 		mov byte [runnextline], 0
  4392 00003758 E9ABFEFFFF          <2> 		jmp batchrunloop
  4393                              <2> 	iffoundbatch:
  4394 0000375D B020                <2> 		mov al, ' '
  4395 0000375F 81C702000000        <2> 		add edi, 2
  4396 00003765 3807                <2> 		cmp [edi], al
  4397 00003767 0F8571FFFFFF        <2> 		jne near fifindbatch
  4398 0000376D B001                <2> 		mov al, 1
  4399 0000376F 0005[CBA00000]      <2> 		add [IFON], al
  4400 00003775 E964FFFFFF          <2> 		jmp fifindbatch
  4401                              <2> 		
  4402                              <2> 		
  4403 0000377A 01                  <2> runnextline db 1
  4404 0000377B 00                  <2> iffalsebuf db 0
  4405                              <2> 
  4406 0000377C C3                  <2> notbatch: ret 
  4407                              <1> 
  4408                              <1> %ifdef rtl8139.included
  4409                              <1> 	%include 'source/programs/arp.asm'
  4410                              <1> %endif
  4411                              <1> 
  4412                              <1> %include 'source/programs/batch.asm'
  4413 0000377D FF2C626174636800    <2> db 255,44,"batch",0
  4414                              <2> 	batchst: 
  4415 00003785 8B3D[922C0000]      <2> 		mov edi, [currentcommandloc]
  4416 0000378B 81C706000000        <2> 		add edi, 6
  4417 00003791 803F00              <2> 		cmp byte [edi], 0
  4418 00003794 0F846D000000        <2> 		je near nonamefound
  4419 0000379A BE00004000          <2> 		mov esi, 0x400000
  4420 0000379F E8E1200000          <2> 		call loadfile
  4421 000037A4 89D0                <2> 		mov eax, edx
  4422 000037A6 3D94010000          <2> 		cmp eax, 404
  4423 000037AB 7465                <2> 		je goodbatchname
  4424 000037AD BE[B8370000]        <2> 		mov esi, badbatchname
  4425 000037B2 E81EE7FFFF          <2> 		call print
  4426 000037B7 C3                  <2> 		ret
  4427 000037B8 546869732066696C65- <2> 		badbatchname db "This file already exists!",10,0
  4428 000037C1 20616C726561647920- <2>
  4429 000037CA 657869737473210A00  <2>
  4430 000037D3 596F75206861766520- <2> 		namenotfoundbatch db "You have to type a name after the command.",10,0
  4431 000037DC 746F20747970652061- <2>
  4432 000037E5 206E616D6520616674- <2>
  4433 000037EE 65722074686520636F- <2>
  4434 000037F7 6D6D616E642E0A00    <2>
  4435 000037FF 00000000            <2> 		esicache3 dd 0
  4436 00003803 00000000            <2> 		esicache2 dd 0
  4437                              <2> 	nonamefound:
  4438 00003807 BE[D3370000]        <2> 		mov esi, namenotfoundbatch
  4439 0000380C E8C4E6FFFF          <2> 		call print
  4440 00003811 C3                  <2> 		ret
  4441                              <2> 	goodbatchname:
  4442 00003812 BE00004000          <2> 		mov esi, 0x400000
  4443                              <2> 	batchcreate:
  4444 00003817 8935[FF370000]      <2> 		mov [esicache3], esi
  4445 0000381D BF00008000          <2> 		mov edi, 0x800000
  4446 00003822 B00A                <2> 		mov al, 10
  4447 00003824 B307                <2> 		mov bl, 7
  4448 00003826 B404                <2> 		mov ah, 4
  4449 00003828 CD30                <2> 		int 30h
  4450 0000382A 8935[03380000]      <2> 		mov [esicache2], esi
  4451 00003830 8A0E                <2> 		mov cl, [esi]
  4452 00003832 8B35[FF370000]      <2> 		mov esi, [esicache3]
  4453 00003838 BB[6C380000]        <2> 		mov ebx, exitword
  4454 0000383D E88FF4FFFF          <2> 		call cndtest
  4455 00003842 3C01                <2> 		cmp al, 1
  4456 00003844 7411                <2> 		je endbatchcreate
  4457 00003846 3C02                <2> 		cmp al, 2
  4458 00003848 740D                <2> 		je endbatchcreate
  4459 0000384A 8B35[03380000]      <2> 		mov esi, [esicache2]
  4460 00003850 B00A                <2> 		mov al, 10
  4461 00003852 8806                <2> 		mov [esi], al
  4462 00003854 46                  <2> 		inc esi
  4463 00003855 EBC0                <2> 		jmp batchcreate
  4464                              <2> 	endbatchcreate:
  4465 00003857 8B35[FF370000]      <2> 		mov esi, [esicache3]
  4466 0000385D 31C0                <2> 		xor eax, eax
  4467 0000385F 8806                <2> 		mov [esi], al
  4468 00003861 BE00004000          <2> 		mov esi, 0x400000
  4469 00003866 E86AE6FFFF          <2> 		call print
  4470 0000386B C3                  <2> 		ret
  4471                              <2> 	
  4472 0000386C 5C7800              <2> 	exitword db "\x",0
  4473 0000386F 54797065205C782074- <2> 	wordmsg db "Type \x to exit.",10,0
  4474 00003878 6F20657869742E0A00  <2>
  4475                              <1> %include 'source/programs/beep.asm'
  4476 00003881 FF2C6265657000      <2> 	db 255,44,"beep",0
  4477 00003888 B8[AD380000]        <2> 	mov eax, beepstart
  4478 0000388D A3[53020000]        <2> 	mov [soundpos], eax
  4479 00003892 B8[B1380000]        <2> 	mov eax, beepend
  4480 00003897 A3[57020000]        <2> 	mov [soundendpos], eax
  4481 0000389C C605[50020000]01    <2> 	mov byte [soundon], 1
  4482                              <2> waitforsoundendbeep:
  4483 000038A3 A0[50020000]        <2> 	mov al, [soundon]
  4484 000038A8 3C00                <2> 	cmp al, 0
  4485 000038AA 75F7                <2> 	jne waitforsoundendbeep
  4486 000038AC C3                  <2> 	ret
  4487                              <2> 	
  4488                              <2> beepstart:
  4489 000038AD 3200D111            <2> 	dw 50, 4561
  4490                              <2> beepend:
  4491                              <1> %include 'source/programs/cd.asm'
  4492 000038B1 FF2C636400          <2> db 255,44,"cd",0
  4493                              <2> cd:
  4494 000038B6 8B35[922C0000]      <2> 	mov esi, [currentcommandloc]
  4495 000038BC 81C603000000        <2> 	add esi, 3
  4496 000038C2 8B3D[C29E0000]      <2> 	mov edi, [currentfolderloc]
  4497 000038C8 893D[BE9E0000]      <2> 	mov [lastfolderloc], edi
  4498 000038CE 81C7[C69E0000]      <2> 	add edi, currentfolder
  4499                              <2> 	;cmp word [esi], ".."
  4500                              <2> 	;je .moveup
  4501                              <2> .movedown:
  4502 000038D4 8A06                <2> 	mov al, [esi]
  4503 000038D6 8807                <2> 	mov [edi], al
  4504 000038D8 47                  <2> 	inc edi
  4505 000038D9 46                  <2> 	inc esi
  4506 000038DA 3C00                <2> 	cmp al, 0
  4507 000038DC 740A                <2> 	je .donecd
  4508 000038DE 81FF[C6A00000]      <2> 	cmp edi, currentfolderend
  4509 000038E4 72EE                <2> 	jb .movedown
  4510 000038E6 30C0                <2> 	xor al, al
  4511                              <2> .donecd:
  4512 000038E8 4F                  <2> 	dec edi
  4513 000038E9 C6072F              <2> 	mov byte [edi], '/'
  4514 000038EC 47                  <2> 	inc edi
  4515 000038ED 81EF[C69E0000]      <2> 	sub edi, currentfolder
  4516 000038F3 893D[C29E0000]      <2> 	mov [currentfolderloc], edi
  4517 000038F9 C3                  <2> 	ret
  4518                              <2> ;.moveup:
  4519                              <2> ;	ret
  4520                              <1> %include 'source/programs/charmap.asm'
  4521 000038FA FF2C636861727300    <2> db 255,44,"chars",0
  4522 00003902 66BB0700            <2> 	mov bx, 7
  4523 00003906 B020                <2> 	mov al, " "
  4524 00003908 E88EEAFFFF          <2> 	call prcharq
  4525 0000390D E889EAFFFF          <2> 	call prcharq
  4526 00003912 E884EAFFFF          <2> 	call prcharq
  4527 00003917 E87FEAFFFF          <2> 	call prcharq
  4528 0000391C B030                <2> 	mov al, "0"
  4529                              <2> charmapnumprnt:
  4530 0000391E E878EAFFFF          <2> 	call prcharq
  4531 00003923 FEC0                <2> 	inc al
  4532 00003925 6650                <2> 	push ax
  4533 00003927 B020                <2> 	mov al, " "
  4534 00003929 E86DEAFFFF          <2> 	call prcharq
  4535 0000392E 6658                <2> 	pop ax
  4536 00003930 3C39                <2> 	cmp al, "9"
  4537 00003932 76EA                <2> 	jbe charmapnumprnt
  4538 00003934 B041                <2> 	mov al, "A"
  4539                              <2> charmapnumprnt2:
  4540 00003936 E860EAFFFF          <2> 	call prcharq
  4541 0000393B FEC0                <2> 	inc al
  4542 0000393D 6650                <2> 	push ax
  4543 0000393F B020                <2> 	mov al, " "
  4544 00003941 E855EAFFFF          <2> 	call prcharq
  4545 00003946 6658                <2> 	pop ax
  4546 00003948 3C47                <2> 	cmp al, "G"
  4547 0000394A 72EA                <2> 	jb charmapnumprnt2
  4548                              <2> 	
  4549 0000394C BE[E8760000]        <2> 	mov esi, line
  4550 00003951 E86DE5FFFF          <2> 	call printquiet
  4551 00003956 6631C0              <2> 	xor ax, ax
  4552 00003959 88C1                <2> 	mov cl, al
  4553 0000395B E845F5FFFF          <2> 	call showhexsmall
  4554 00003960 E955000000          <2> 	jmp charmapnocopy ;the first char is 0 which is unprintable
  4555                              <2> charmapcopy:
  4556 00003965 FEC0                <2> 	inc al
  4557 00003967 6650                <2> 	push ax
  4558 00003969 3C08                <2> 	cmp al, 8
  4559 0000396B 744D                <2> 	je charmapnocopy
  4560 0000396D 3C09                <2> 	cmp al, 9
  4561 0000396F 7449                <2> 	je charmapnocopy
  4562 00003971 3C0A                <2> 	cmp al, 10
  4563 00003973 7445                <2> 	je charmapnocopy
  4564 00003975 3C0D                <2> 	cmp al, 13
  4565 00003977 7441                <2> 	je charmapnocopy
  4566 00003979 3CFF                <2> 	cmp al, 255
  4567 0000397B 743D                <2> 	je charmapnocopy
  4568 0000397D 3C00                <2> 	cmp al, 0
  4569 0000397F 7434                <2> 	je nomorecharmap
  4570 00003981 E815EAFFFF          <2> 	call prcharq
  4571 00003986 B020                <2> 	mov al, " "
  4572 00003988 E80EEAFFFF          <2> 	call prcharq
  4573 0000398D 6658                <2> 	pop ax
  4574                              <2> charmapcopycheck:
  4575 0000398F FEC4                <2> 	inc ah
  4576 00003991 80FC10              <2> 	cmp ah, 16
  4577 00003994 72CF                <2> 	jb charmapcopy
  4578 00003996 6650                <2> 	push ax
  4579 00003998 BE[E8760000]        <2> 	mov esi, line
  4580 0000399D E821E5FFFF          <2> 	call printquiet
  4581 000039A2 6658                <2> 	pop ax
  4582 000039A4 3CFF                <2> 	cmp al, 255
  4583 000039A6 740D                <2> 	je nomorecharmap
  4584 000039A8 88C1                <2> 	mov cl, al
  4585 000039AA FEC1                <2> 	inc cl
  4586 000039AC E8F4F4FFFF          <2> 	call showhexsmall
  4587 000039B1 30E4                <2> 	xor ah, ah
  4588 000039B3 EBB0                <2> 	jmp charmapcopy
  4589                              <2> nomorecharmap:
  4590 000039B5 E92AF0FFFF          <2> 	jmp nwcmd
  4591                              <2> charmapnocopy:
  4592 000039BA 6650                <2> 	push ax
  4593 000039BC B020                <2> 	mov al, " "
  4594 000039BE E8D8E9FFFF          <2> 	call prcharq
  4595 000039C3 E8D3E9FFFF          <2> 	call prcharq
  4596 000039C8 6658                <2> 	pop ax
  4597 000039CA EBC3                <2> 	jmp charmapcopycheck
  4598                              <1> %include 'source/programs/clear.asm'
  4599 000039CC FF2C636C65617200    <2> db 255,44,"clear",0
  4600 000039D4 E862E5FFFF          <2> 		call clear
  4601 000039D9 C3                  <2> 		ret 
  4602                              <1> %include 'source/programs/cpuid.asm'
  4603 000039DA FF2C637075696400    <2> db 255,44,"cpuid",0
  4604 000039E2 31C0                <2> 	xor eax, eax
  4605 000039E4 0FA2                <2> 	cpuid
  4606 000039E6 891D[373A0000]      <2> 	mov [cpuidbuf], ebx
  4607 000039EC 8915[3B3A0000]      <2> 	mov [cpuidbuf + 4], edx
  4608 000039F2 890D[3F3A0000]      <2> 	mov [cpuidbuf + 8], ecx
  4609 000039F8 BE[373A0000]        <2> 	mov esi, cpuidbuf
  4610 000039FD E8D3E4FFFF          <2> 	call print
  4611 00003A02 BE[E8760000]        <2> 	mov esi, line
  4612 00003A07 E8C9E4FFFF          <2> 	call print
  4613 00003A0C B801000000          <2> 	mov eax, 1
  4614 00003A11 0FA2                <2> 	cpuid
  4615 00003A13 89C1                <2> 	mov ecx, eax
  4616 00003A15 C605[A42E0000]02    <2> 	mov byte [firsthexshown], 2
  4617 00003A1C E898F4FFFF          <2> 	call showhex
  4618 00003A21 B808000080          <2> 	mov eax, 0x80000008
  4619 00003A26 0FA2                <2> 	cpuid
  4620 00003A28 89C1                <2> 	mov ecx, eax
  4621 00003A2A C605[A42E0000]02    <2> 	mov byte [firsthexshown], 2
  4622 00003A31 E883F4FFFF          <2> 	call showhex
  4623 00003A36 C3                  <2> 	ret
  4624                              <2> 	
  4625 00003A37 00<rept>            <2> cpuidbuf times 13 db 0
  4626                              <2> cpuidvendorend:
  4627                              <1> %include 'source/programs/dos.asm'
  4628 00003A44 FF2C646F7300        <2> db 255,44,"dos",0
  4629                              <2> dosrunner:
  4630 00003A4A 8B3D[922C0000]      <2> 	mov edi, [currentcommandloc]
  4631 00003A50 81C704000000        <2> 	add edi, 4
  4632 00003A56 BE00014000          <2> 	mov esi,  0x100 + dosprogloc	;this should be the beginning of memory
  4633 00003A5B E8251E0000          <2> 	call loadfile
  4634 00003A60 8B3D[922C0000]      <2> 	mov edi, [currentcommandloc]
  4635 00003A66 81C704000000        <2> 	add edi, 4
  4636 00003A6C 81FA94010000        <2> 	cmp edx, 404
  4637 00003A72 0F8453000000        <2> 	je near .noprogfound
  4638 00003A78 BB81004000          <2> 	mov ebx, 0x81 + dosprogloc
  4639 00003A7D 31C9                <2> 	xor ecx, ecx
  4640                              <2> .findparams:
  4641 00003A7F 47                  <2> 	inc edi
  4642 00003A80 8A07                <2> 	mov al, [edi]
  4643 00003A82 3C20                <2> 	cmp al, " "
  4644 00003A84 75F9                <2> 	jne .findparams
  4645                              <2> .copyparams:
  4646 00003A86 8A07                <2> 	mov al, [edi]
  4647 00003A88 8803                <2> 	mov [ebx], al
  4648 00003A8A 43                  <2> 	inc ebx
  4649 00003A8B 47                  <2> 	inc edi
  4650 00003A8C 41                  <2> 	inc ecx
  4651 00003A8D 81FB00014000        <2> 	cmp ebx, 0x100 + dosprogloc
  4652 00003A93 7304                <2> 	jae .nomoreparams
  4653 00003A95 3C00                <2> 	cmp al, 0
  4654 00003A97 75ED                <2> 	jne .copyparams
  4655                              <2> .nomoreparams:
  4656 00003A99 880D80004000        <2> 	mov [0x80 + dosprogloc], cl
  4657 00003A9F 66B85000            <2> 	mov ax, DOS_DATA_SEL
  4658 00003AA3 8ED8                <2> 	mov ds, ax
  4659 00003AA5 8EC0                <2> 	mov es, ax
  4660 00003AA7 8EE0                <2> 	mov fs, ax
  4661 00003AA9 8EE8                <2> 	mov gs, ax
  4662 00003AAB 31C0                <2> 	xor eax, eax
  4663 00003AAD 31DB                <2> 	xor ebx, ebx
  4664 00003AAF 31C9                <2> 	xor ecx, ecx
  4665 00003AB1 31D2                <2> 	xor edx, edx
  4666 00003AB3 31FF                <2> 	xor edi, edi
  4667 00003AB5 31F6                <2> 	xor esi, esi
  4668 00003AB7 9A000100004800      <2> 	call DOS_CODE_SEL:0x100
  4669 00003ABE 3C00                <2> 	cmp al, 0
  4670 00003AC0 0F8599E3FFFF        <2> 	jne near exitprog.error
  4671 00003AC6 E919EFFFFF          <2> 	jmp nwcmd
  4672                              <2> .noprogfound:
  4673 00003ACB BE[A7760000]        <2> 	mov esi, notfound1
  4674 00003AD0 E800E4FFFF          <2> 	call print
  4675 00003AD5 8B35[922C0000]      <2> 	mov esi, [currentcommandloc]
  4676 00003ADB 81C604000000        <2> 	add esi, 4
  4677 00003AE1 E8EFE3FFFF          <2> 	call print
  4678 00003AE6 BE[AF760000]        <2> 	mov esi, notfound2
  4679 00003AEB E8E5E3FFFF          <2> 	call print
  4680 00003AF0 C3                  <2> 	ret
  4681                              <2> 	
  4682                              <1> %include 'source/programs/dump.asm'
  4683 00003AF1 FF2C64756D7000      <2> db 255,44,"dump",0
  4684 00003AF8 8B35[922C0000]      <2> 	mov esi, [currentcommandloc]
  4685 00003AFE 81C605000000        <2> 	add esi, 5
  4686 00003B04 31C9                <2> 	xor ecx, ecx
  4687 00003B06 66B83078            <2> 	mov ax, "0x"
  4688 00003B0A 663906              <2> 	cmp [esi], ax
  4689 00003B0D 740A                <2> 	je dumphexin
  4690 00003B0F E851F5FFFF          <2> 	call cnvrttxt
  4691 00003B14 E910000000          <2> 	jmp dumphexnow
  4692                              <2> dumphexin:
  4693 00003B19 81C602000000        <2> 	add esi, 2
  4694 00003B1F E8F8F4FFFF          <2> 	call cnvrthextxt
  4695 00003B24 E900000000          <2> 	jmp dumphexnow
  4696                              <2> dumphexnow:
  4697 00003B29 89CF                <2> 	mov edi, ecx
  4698 00003B2B 89FE                <2> 	mov esi, edi
  4699 00003B2D 81C680030000        <2> 	add esi, 896
  4700                              <2> dumphexloop:
  4701 00003B33 8B0F                <2> 	mov ecx, [edi]
  4702 00003B35 C605[A42E0000]05    <2> 	mov byte [firsthexshown],5
  4703 00003B3C E878F3FFFF          <2> 	call showhex
  4704 00003B41 81C704000000        <2> 	add edi, 4
  4705 00003B47 39F7                <2> 	cmp edi, esi
  4706 00003B49 72E8                <2> 	jb dumphexloop
  4707 00003B4B E8A4EAFFFF          <2> 	call termcopy
  4708 00003B50 C3                  <2> 	ret 
  4709                              <1> %include 'source/programs/echo.asm'
  4710                              <2> 
  4711 00003B51 FF2C6563686F00      <2> db 255,44,"echo",0
  4712                              <2> 	echoprog:
  4713 00003B58 8B35[922C0000]      <2> 		mov esi, [currentcommandloc]
  4714 00003B5E 81C605000000        <2> 		add esi, 5
  4715 00003B64 8A06                <2> 		mov al, [esi]
  4716 00003B66 E86AE3FFFF          <2> 		call print
  4717 00003B6B BE[E8760000]        <2> 		mov esi, line
  4718 00003B70 E860E3FFFF          <2> 		call print
  4719 00003B75 C3                  <2> 		ret
  4720 00003B76 BB[3AA10000]        <2> 	echovr:	mov ebx, variables
  4721 00003B7B BF06000000          <2> 		mov edi, 6
  4722 00003B80 E83C000000          <2> 		call nxtvrech
  4723 00003B85 E954000000          <2> 		jmp prntvr2
  4724 00003B8A B13D                <2> 	echvar:	mov cl, '='
  4725 00003B8C 43                  <2> 		inc ebx
  4726 00003B8D 8A03                <2> 		mov al, [ebx]
  4727 00003B8F 3C00                <2> 		cmp al, 0
  4728 00003B91 742E                <2> 		je nxtvrech
  4729 00003B93 3C3D                <2> 		cmp al, '='
  4730 00003B95 7422                <2> 		je nxtvrechb1
  4731 00003B97 8B35[922C0000]      <2> 		mov esi, [currentcommandloc]
  4732 00003B9D 01FE                <2> 		add esi, edi
  4733 00003B9F E82DF1FFFF          <2> 		call cndtest
  4734 00003BA4 3C02                <2> 		cmp al, 2
  4735 00003BA6 7432                <2> 		je prntvr
  4736 00003BA8 3C01                <2> 		cmp al, 1
  4737 00003BAA 742E                <2> 		je prntvr
  4738 00003BAC 8B35[922C0000]      <2> 		mov esi, [currentcommandloc]
  4739 00003BB2 01FE                <2> 		add esi, edi
  4740 00003BB4 E908000000          <2> 		jmp nxtvrech
  4741                              <2> 	nxtvrechb1:
  4742 00003BB9 81EB02000000        <2> 		sub ebx, 2
  4743 00003BBF EBC9                <2> 		jmp echvar
  4744 00003BC1 8A03                <2> 	nxtvrech: mov al, [ebx]
  4745 00003BC3 3C05                <2> 		cmp al, 5
  4746 00003BC5 740A                <2> 		je nxtvrec2
  4747 00003BC7 43                  <2> 		inc ebx
  4748 00003BC8 81FB[3AB10000]      <2> 		cmp ebx, varend
  4749 00003BCE 72F1                <2> 		jb nxtvrech
  4750 00003BD0 C3                  <2> 		ret
  4751 00003BD1 43                  <2> 	nxtvrec2: inc ebx
  4752 00003BD2 8A03                <2> 		mov al, [ebx]
  4753 00003BD4 3C04                <2> 		cmp al, 4
  4754 00003BD6 74B2                <2> 		je echvar
  4755 00003BD8 EBE7                <2> 		jmp nxtvrech
  4756 00003BDA 43                  <2> 	prntvr: inc ebx
  4757 00003BDB 89DE                <2> 		mov esi, ebx
  4758 00003BDD C3                  <2> 		ret
  4759 00003BDE E8F2E2FFFF          <2> 	prntvr2: call print
  4760 00003BE3 BE[E8760000]        <2> 		mov esi, line
  4761 00003BE8 E8E8E2FFFF          <2> 		call print
  4762 00003BED C3                  <2> 		ret 
  4763                              <1> %include 'source/programs/else.asm'
  4764 00003BEE FF2C656C736500      <2> 	db 255,44,"else",0
  4765 00003BF5 31C0                <2> elsecmd:	xor eax, eax
  4766 00003BF7 3805[34A10000]      <2> 	cmp [BATCHISON], al
  4767 00003BFD 0F8479FBFFFF        <2> 	je near notbatch
  4768 00003C03 A0[CBA00000]        <2> 	mov al, [IFON]
  4769 00003C08 BE[CCA00000]        <2> 	mov esi, IFTRUE
  4770 00003C0D 01C6                <2> 	add esi, eax
  4771 00003C0F 8A06                <2> 	mov al, [esi]
  4772 00003C11 3401                <2> 	xor al, 1
  4773 00003C13 8806                <2> 	mov [esi], al
  4774 00003C15 C3                  <2> 	ret 
  4775                              <1> %include 'source/programs/fi.asm'
  4776 00003C16 FF2C666900          <2> 	db 255,44,"fi",0
  4777 00003C1B 30C0                <2> 	xor al, al
  4778 00003C1D 3805[34A10000]      <2> 	cmp [BATCHISON], al
  4779 00003C23 0F8453FBFFFF        <2> 	je near notbatch
  4780 00003C29 B001                <2> fi:	mov al, 1
  4781 00003C2B 2805[CBA00000]      <2> 	sub [IFON],al
  4782 00003C31 C3                  <2> 	ret 
  4783                              <1> %include 'source/programs/gui.asm'
  4784 00003C32 FF2C67756900        <2> db 255,44,"gui",0
  4785                              <2> %ifdef gui.included
  4786                              <2> guiswitcher:
  4787 00003C38 8B35[922C0000]      <2> 	mov esi, [currentcommandloc]
  4788 00003C3E 81C604000000        <2> 	add esi, 4
  4789 00003C44 31C9                <2> 	xor ecx, ecx
  4790 00003C46 803E00              <2> 	cmp byte [esi], 0
  4791 00003C49 740A                <2> 	je .nomodepref
  4792 00003C4B E8CCF3FFFF          <2> 	call cnvrthextxt ;switches arg on cline to vesa mode in ecx
  4793 00003C50 E907000000          <2> 	jmp .modepref
  4794                              <2> .nomodepref:
  4795 00003C55 51                  <2> 	push ecx
  4796 00003C56 E8E0E2FFFF          <2> 	call clear
  4797 00003C5B 59                  <2> 	pop ecx
  4798                              <2> .modepref:
  4799 00003C5C 66BB[0F48]          <2> 	mov bx, guiswitch
  4800 00003C60 66891D[A40C0000]    <2> 	mov [realmodeptr], bx
  4801 00003C67 BB[773C0000]        <2> 	mov ebx, guiswitchret
  4802 00003C6C 891D[A00C0000]      <2> 	mov [realmodereturn], ebx
  4803 00003C72 E912CFFFFF          <2> 	jmp realmode
  4804                              <2> guiswitchret:
  4805 00003C77 65803D[78880000]01  <2> 	cmp byte [gs:guion], 1
  4806 00003C7F 7401                <2> 	je .cont
  4807 00003C81 C3                  <2> 	ret
  4808                              <2> .cont:
  4809 00003C82 BF[FE490000]        <2> 	mov edi, VBEMODEBLOCK
  4810                              <2> .loop:
  4811 00003C87 658B07              <2> 	mov eax, [gs:edi]
  4812 00003C8A 8907                <2> 	mov [edi], eax
  4813 00003C8C 47                  <2> 	inc edi
  4814 00003C8D 81FF[004D0000]      <2> 	cmp edi, VBEEND
  4815 00003C93 72F2                <2> 	jb .loop
  4816 00003C95 A1[264C0000]        <2> 	mov eax, [physbaseptr]
  4817 00003C9A 2D00001000          <2> 	sub eax, 0x100000
  4818 00003C9F A3[264C0000]        <2> 	mov [physbaseptr], eax
  4819 00003CA4 C605[99230000]00    <2> 	mov byte [termguion], 0
  4820 00003CAB BE[4FB90000]        <2> 	mov esi, graphicstable
  4821 00003CB0 30C0                <2> 	xor al, al
  4822                              <2> .clear:
  4823 00003CB2 8806                <2> 	mov [esi], al
  4824 00003CB4 46                  <2> 	inc esi
  4825 00003CB5 81FE[4FBB0000]      <2> 	cmp esi, graphicstableend
  4826 00003CBB 72F5                <2> 	jb .clear
  4827 00003CBD E829230000          <2> 	call guisetup
  4828 00003CC2 66C705[03740000]80- <2> 	mov word [termwindow], 640
  4829 00003CCA 02                  <2>
  4830 00003CCB 66C705[05740000]E0- <2> 	mov word [termwindow + 2], 480	;the previous lines of code make a large terminal window that is 4 characters smaller than the screen
  4831 00003CD3 01                  <2>
  4832 00003CD4 BE[03740000]        <2> 	mov esi, termwindow
  4833 00003CD9 668B15[104C0000]    <2> 	mov dx, [resolutionx]
  4834 00003CE0 668B0D[124C0000]    <2> 	mov cx, [resolutiony]
  4835 00003CE7 6681EA8002          <2> 	sub dx, 640
  4836 00003CEC 6681E9E001          <2> 	sub cx, 480
  4837 00003CF1 66D1EA              <2> 	shr dx, 1 ;x location-this centers the window
  4838 00003CF4 66D1E9              <2> 	shr cx, 1 ;y location-this centers the window	
  4839 00003CF7 BB[E4290000]        <2> 	mov ebx, nwcmd
  4840 00003CFC 6631C0              <2> 	xor ax, ax
  4841 00003CFF E8132E0000          <2> 	call showwindow
  4842 00003D04 E8F80F0000          <2> 	call cursorgui
  4843 00003D09 E82DE2FFFF          <2> 	call clear
  4844 00003D0E C3                  <2> 	ret
  4845                              <2> %else
  4846                              <2> 	mov esi, warnguimsg
  4847                              <2> 	call print
  4848                              <2> 	ret
  4849                              <2> %endif
  4850                              <2> 	
  4851                              <1> %include 'source/programs/help.asm'
  4852 00003D0F FF2C68656C7000      <2> db 255,44,"help",0
  4853                              <2> lscmd:	
  4854 00003D16 B00D                <2> 		mov al, 13
  4855 00003D18 E87EE6FFFF          <2> 		call prcharq
  4856 00003D1D BE[E8300000]        <2> 		mov esi, progstart
  4857 00003D22 BB[0F480000]        <2> 		mov ebx, progend
  4858 00003D27 BE[BE9A0000]        <2> dir:	mov esi, fileindex
  4859 00003D2C 8A06                <2> 	dirnxt:	mov al, [esi]
  4860 00003D2E 30E4                <2> 		xor ah, ah
  4861 00003D30 3CFF                <2> 		cmp al, 255
  4862 00003D32 7415                <2> 		je dirfnd
  4863 00003D34 46                  <2> 		inc esi
  4864 00003D35 81FE[BE9E0000]      <2> 		cmp esi,  fileindexend
  4865 00003D3B 7339                <2> 		jae dirdn
  4866 00003D3D EBED                <2> 		jmp dirnxt
  4867                              <2> 	dirfnd3:
  4868 00003D3F 46                  <2> 		inc esi
  4869 00003D40 81FE[BE9E0000]      <2> 		cmp esi, fileindexend
  4870 00003D46 76E4                <2> 		jbe dirnxt
  4871 00003D48 4E                  <2> 		dec esi
  4872 00003D49 46                  <2> 	dirfnd:	inc esi
  4873 00003D4A 8A06                <2> 		mov al, [esi]
  4874 00003D4C 30E4                <2> 		xor ah, ah
  4875 00003D4E 3C2C                <2> 		cmp al, 44
  4876 00003D50 740B                <2> 		je dirfnd2
  4877 00003D52 46                  <2> 		inc esi
  4878 00003D53 81FE[BE9E0000]      <2> 		cmp esi,  fileindexend
  4879 00003D59 731B                <2> 		jae dirdn
  4880 00003D5B EBCF                <2> 		jmp dirnxt
  4881 00003D5D 46                  <2> 	dirfnd2: inc esi
  4882 00003D5E E860E1FFFF          <2> 		call printquiet
  4883 00003D63 56                  <2> 		push esi
  4884 00003D64 B009                <2> 		mov al, 9
  4885 00003D66 E830E6FFFF          <2> 		call prcharq
  4886 00003D6B 5E                  <2> 		pop esi
  4887 00003D6C 81FE[BE9E0000]      <2> 		cmp esi,  fileindexend
  4888 00003D72 7302                <2> 		jae dirdn
  4889 00003D74 EBB6                <2> 		jmp dirnxt
  4890 00003D76 BE[E8760000]        <2> 	dirdn:	mov esi, line
  4891 00003D7B E855E1FFFF          <2> 			call print
  4892 00003D80 C3                  <2> 			ret
  4893 00003D81 00                  <2> currentdir db 0
  4894                              <1> %include 'source/programs/if.asm'
  4895 00003D82 FF2C696600          <2> 	db 255,44,"if",0
  4896 00003D87 30C0                <2> ifcmd:	xor al, al
  4897 00003D89 3805[34A10000]      <2> 	cmp [BATCHISON], al
  4898 00003D8F 0F84E7F9FFFF        <2> 	je near notbatch
  4899 00003D95 8B1D[922C0000]      <2> 	mov ebx, [currentcommandloc]
  4900 00003D9B 81C303000000        <2> 	add ebx, 3
  4901 00003DA1 89DE                <2> 	mov esi, ebx
  4902 00003DA3 8A06                <2> chkeqsn: mov al, [esi]
  4903 00003DA5 3C00                <2> 	cmp al, 0
  4904 00003DA7 0F84CFF9FFFF        <2> 	je near notbatch
  4905 00003DAD 3C3D                <2> 	cmp al, '='
  4906 00003DAF 0F8403000000        <2> 	je near chkeqdn
  4907 00003DB5 46                  <2> 	inc esi
  4908 00003DB6 EBEB                <2> 	jmp chkeqsn
  4909 00003DB8 B000                <2> chkeqdn: mov al, 0 
  4910 00003DBA 8806                <2> 	mov [esi], al
  4911 00003DBC 46                  <2> 	inc esi
  4912 00003DBD E8D4EEFFFF          <2> 	call tester
  4913 00003DC2 3C01                <2> 	cmp al, 1
  4914 00003DC4 0F8405000000        <2> 	je near trueif
  4915 00003DCA E91C000000          <2> 	jmp falseif
  4916 00003DCF 31C0                <2> trueif:	xor eax, eax
  4917 00003DD1 A0[CBA00000]        <2> 	mov al, [IFON]
  4918 00003DD6 FEC0                <2> 	inc al
  4919 00003DD8 A2[CBA00000]        <2> 	mov [IFON], al
  4920 00003DDD 30E4                <2> 	xor ah, ah
  4921 00003DDF BE[CCA00000]        <2> 	mov esi, IFTRUE
  4922 00003DE4 01C6                <2> 	add esi, eax
  4923 00003DE6 B401                <2> 	mov ah, 1
  4924 00003DE8 8826                <2> 	mov [esi], ah
  4925 00003DEA C3                  <2> 	ret 
  4926 00003DEB 31C0                <2> falseif: xor eax, eax
  4927 00003DED A0[CBA00000]        <2> 	mov al, [IFON]
  4928 00003DF2 FEC0                <2> 	inc al
  4929 00003DF4 A2[CBA00000]        <2> 	mov [IFON], al
  4930 00003DF9 30E4                <2> 	xor ah, ah
  4931 00003DFB BE[CCA00000]        <2> 	mov esi, IFTRUE
  4932 00003E00 01C6                <2> 	add esi, eax
  4933 00003E02 30E4                <2> 	xor ah, ah
  4934 00003E04 8826                <2> 	mov [esi], ah
  4935 00003E06 C3                  <2> 	ret 
  4936                              <1> %include 'source/programs/keycode.asm'
  4937 00003E07 FF2C6B65797300      <2> db 255,44,"keys",0
  4938                              <2> keycode:
  4939 00003E0E C605[7F230000]00    <2> 	mov byte [trans], 0
  4940 00003E15 C605[97590000]00    <2> 	mov byte [threadson], 0
  4941 00003E1C E845140000          <2> 	call getkey
  4942 00003E21 31C0                <2> 	xor eax, eax
  4943 00003E23 31C9                <2> 	xor ecx, ecx
  4944 00003E25 8A0D[46520000]      <2> 	mov cl, [specialkey]
  4945 00003E2B 80F900              <2> 	cmp cl, 0
  4946 00003E2E 0F8405000000        <2> 	je near nospecialkeycode
  4947 00003E34 E86CF0FFFF          <2> 	call showhexsmall
  4948                              <2> nospecialkeycode:
  4949 00003E39 66A1[7D230000]      <2> 	mov ax, [lastkey]
  4950 00003E3F 88E1                <2> 	mov cl, ah
  4951 00003E41 E85FF0FFFF          <2> 	call showhexsmall
  4952 00003E46 80FC01              <2> 	cmp ah, 1
  4953 00003E49 75C3                <2> 	jne keycode
  4954 00003E4B C3                  <2> 	ret 
  4955                              <1> %include 'source/programs/logout.asm'
  4956 00003E4C FF2C6C6F676F757400  <2> 	db 255,44,"logout",0
  4957 00003E55 E9D8E9FFFF          <2> 	jmp os
  4958                              <1> %include 'source/programs/loop.asm'
  4959 00003E5A FF2C6C6F6F7000      <2> 	db 255,44,"loop",0
  4960 00003E61 803D[35A10000]00    <2> 	cmp byte [LOOPON], 0
  4961 00003E68 0F8501000000        <2> 	jne near filoop
  4962 00003E6E C3                  <2> 	ret
  4963 00003E6F 8B35[36A10000]      <2> filoop: mov esi, [LOOPPOS]
  4964 00003E75 FE0D[CBA00000]      <2> 	dec byte [IFON]
  4965 00003E7B C605[35A10000]00    <2> 	mov byte [LOOPON], 0
  4966 00003E82 8935[30A10000]      <2> 	mov [BATCHPOS], esi
  4967 00003E88 8935[A4360000]      <2> 	mov [batchedi], esi
  4968 00003E8E C3                  <2> 	ret 
  4969                              <1> %include 'source/programs/ls.asm'
  4970 00003E8F FF2C6C7300          <2> db 255,44,"ls",0
  4971 00003E94 BE[0D870000]        <2> 		mov esi, diskfileindex
  4972                              <2> 	diskindexdir:
  4973 00003E99 803E5F              <2> 		cmp byte [esi], '_'
  4974 00003E9C 7440                <2> 		je nextdiskindexdir
  4975 00003E9E E820E0FFFF          <2> 		call printquiet
  4976 00003EA3 56                  <2> 		push esi
  4977 00003EA4 BE[FE3E0000]        <2> 		mov esi, disktab
  4978 00003EA9 E815E0FFFF          <2> 		call printquiet
  4979 00003EAE 5E                  <2> 		pop esi
  4980 00003EAF 8B4E05              <2> 		mov ecx, [esi + 5]
  4981 00003EB2 C605[A42E0000]05    <2> 		mov byte [firsthexshown], 5
  4982 00003EB9 E8C5F0FFFF          <2> 		call showdec
  4983 00003EBE 56                  <2> 		push esi
  4984 00003EBF BE[E8760000]        <2> 		mov esi, line
  4985 00003EC4 E8FADFFFFF          <2> 		call printquiet
  4986 00003EC9 5E                  <2> 		pop esi
  4987 00003ECA 81C609000000        <2> 		add esi, 9
  4988 00003ED0 81FE[77880000]      <2> 		cmp esi, enddiskfileindex
  4989 00003ED6 72C1                <2> 		jb diskindexdir
  4990 00003ED8 E817E7FFFF          <2> 		call termcopy
  4991 00003EDD C3                  <2> 		ret
  4992                              <2> 	nextdiskindexdir:
  4993 00003EDE 46                  <2> 		inc esi
  4994 00003EDF 803E00              <2> 		cmp byte [esi], 0
  4995 00003EE2 75FA                <2> 		jne nextdiskindexdir
  4996 00003EE4 81C609000000        <2> 		add esi, 9
  4997 00003EEA 81FE[77880000]      <2> 		cmp esi, enddiskfileindex
  4998 00003EF0 72A7                <2> 		jb diskindexdir
  4999 00003EF2 E8FDE6FFFF          <2> 		call termcopy
  5000 00003EF7 C3                  <2> 		ret
  5001                              <2> 		
  5002 00003EF8 4469736B2000        <2> 		diskmsg db "Disk ",0
  5003 00003EFE 0D09090900          <2> 		disktab db 13,9,9,9,0
  5004                              <1> %include 'source/programs/memory.asm'
  5005 00003F03 FF2C6D656D6F727900  <2> db 255,44,"memory",0
  5006 00003F0C BE[7E880000]        <2> 	mov esi, memlistbuf
  5007 00003F11 31FF                <2> 	xor edi, edi
  5008 00003F13 668B3D[BE8A0000]    <2> 	mov di, [memlistend]
  5009 00003F1A 01F7                <2> 	add edi, esi
  5010                              <2> printmemmap:
  5011 00003F1C 8B0E                <2> 	mov ecx, [esi]
  5012 00003F1E E896EFFFFF          <2> 	call showhex
  5013 00003F23 81C608000000        <2> 	add esi, 8
  5014 00003F29 8B0E                <2> 	mov ecx, [esi]
  5015 00003F2B E889EFFFFF          <2> 	call showhex
  5016 00003F30 81C608000000        <2> 	add esi, 8
  5017 00003F36 8B0E                <2> 	mov ecx, [esi]
  5018 00003F38 E87CEFFFFF          <2> 	call showhex
  5019 00003F3D 81C608000000        <2> 	add esi, 8
  5020 00003F43 57                  <2> 	push edi
  5021 00003F44 56                  <2> 	push esi
  5022 00003F45 BE[E8760000]        <2> 	mov esi, line
  5023 00003F4A E886DFFFFF          <2> 	call print
  5024 00003F4F 5E                  <2> 	pop esi
  5025 00003F50 5F                  <2> 	pop edi
  5026 00003F51 39FE                <2> 	cmp esi, edi
  5027 00003F53 72C7                <2> 	jb printmemmap
  5028 00003F55 C3                  <2> 	ret
  5029                              <2> 	
  5030                              <1> %include 'source/programs/pci.asm'
  5031 00003F56 FF2C70636900        <2> db 255,44,"pci",0
  5032 00003F5C E8B7160000          <2> 	call pcidump
  5033 00003F61 C3                  <2> 	ret 
  5034                              <1> %include 'source/programs/play.asm'
  5035 00003F62 FF2C706C617900      <2> db 255,44,"play",0
  5036 00003F69 E801000000          <2> 	call playsync
  5037 00003F6E C3                  <2> 	ret
  5038                              <2> playsync:
  5039 00003F6F 8B3D[922C0000]      <2> 	mov edi, [currentcommandloc]
  5040 00003F75 81C705000000        <2> 	add edi, 5
  5041 00003F7B BE00004000          <2> 	mov esi, 0x400000
  5042 00003F80 E800190000          <2> 	call loadfile
  5043 00003F85 81FA94010000        <2> 	cmp edx, 404
  5044 00003F8B 7448                <2> 	je nosoundfound
  5045 00003F8D BB00004000          <2> 	mov ebx, 0x400000
  5046 00003F92 817B0857415645      <2> 	cmp dword [ebx + 8], "WAVE"
  5047 00003F99 0F84B8000000        <2> 	je near wave_player
  5048 00003F9F 66813B534E          <2> 	cmp word [ebx], "SN"
  5049 00003FA4 752F                <2> 	jne nosoundfound
  5050 00003FA6 81C306000000        <2> 	add ebx, 6
  5051 00003FAC 891D[53020000]      <2> 	mov [soundpos], ebx
  5052 00003FB2 035BFC              <2> 	add ebx, [ebx - 4]
  5053 00003FB5 891D[57020000]      <2> 	mov [soundendpos], ebx
  5054 00003FBB 66C705[51020000]00- <2> 	mov word [soundrepititions], 0
  5055 00003FC3 00                  <2>
  5056 00003FC4 C605[50020000]01    <2> 	mov byte [soundon], 1
  5057                              <2> waitforsoundendplay:
  5058 00003FCB A0[50020000]        <2> 	mov al, [soundon]
  5059 00003FD0 3C00                <2> 	cmp al, 0
  5060 00003FD2 75F7                <2> 	jne waitforsoundendplay
  5061 00003FD4 C3                  <2> 	ret
  5062                              <2> nosoundfound:
  5063 00003FD5 BE[FB3F0000]        <2> 	mov esi, notfoundsound
  5064 00003FDA E8F6DEFFFF          <2> 	call print
  5065 00003FDF 8B35[922C0000]      <2> 	mov esi, [currentcommandloc]
  5066 00003FE5 81C605000000        <2> 	add esi, 5
  5067 00003FEB E8E5DEFFFF          <2> 	call print
  5068 00003FF0 BE[AF760000]        <2> 	mov esi, notfound2
  5069 00003FF5 E8DBDEFFFF          <2> 	call print
  5070 00003FFA C3                  <2> 	ret
  5071 00003FFB 536F756E64202200    <2> notfoundsound db "Sound ",34,0
  5072                              <2> 
  5073                              <2> %ifdef sound.included
  5074                              <2> sbplay:
  5075 00004003 BE00004000          <2> 		mov esi, 0x400000
  5076 00004008 89F3                <2> 		mov ebx, esi
  5077 0000400A 81C62C000000        <2> 		add esi, 44
  5078 00004010 29F7                <2> 		sub edi, esi
  5079 00004012 66893D[35520000]    <2> 		mov [Length1], di
  5080 00004019 C1EF10              <2> 		shr edi, 16
  5081 0000401C 66893D[33520000]    <2> 		mov [Length0], di
  5082 00004023 8B4B18              <2> 		mov ecx, [ebx + 24]
  5083 00004026 890D[40520000]      <2> 		mov [Freq], ecx
  5084 0000402C 31C0                <2> 		xor eax, eax
  5085 0000402E BA00004000          <2> 		mov	edx, 0x400000 ;location of sound
  5086 00004033 81C200080000        <2> 		add edx, 2048
  5087 00004039 01D0                <2> 		add	eax,edx
  5088 0000403B 31DB                <2> 		xor ebx, ebx
  5089 0000403D 668B1D[35520000]    <2> 		mov bx, [Length1]
  5090 00004044 01C3                <2> 		add ebx, eax
  5091 00004046 891D[37520000]      <2> 		mov [NextMemLoc], ebx
  5092 0000404C A3[3B520000]        <2> 		mov	[MemLoc],eax
  5093 00004051 E8B7100000          <2> 		call DMAPlay
  5094 00004056 C3                  <2> 		ret
  5095                              <2> 
  5096                              <2> wave_player:
  5097 00004057 803D[45520000]01    <2> 	cmp byte [SoundBlaster], 1
  5098 0000405E 0F849FFFFFFF        <2> 	je near sbplay
  5099 00004064 BE[6F400000]        <2> 	mov esi, nosoundblaster
  5100 00004069 E867DEFFFF          <2> 	call print
  5101 0000406E C3                  <2> 	ret
  5102                              <2> %else
  5103                              <2> 	wave_player:
  5104                              <2> 		mov esi, nosoundblaster
  5105                              <2> 		call print
  5106                              <2> 		ret
  5107                              <2> %endif
  5108 0000406F 4E6F20536F756E6420- <2> nosoundblaster db "No Sound Blaster detected.",10,0
  5109 00004078 426C61737465722064- <2>
  5110 00004081 657465637465642E0A- <2>
  5111 0000408A 00                  <2>
  5112                              <1> %include 'source/programs/pwd.asm'
  5113 0000408B FF2C70776400        <2> db 255,44,"pwd",0
  5114 00004091 BE[C69E0000]        <2> 	mov esi, currentfolder
  5115 00004096 E828DEFFFF          <2> 	call printquiet
  5116 0000409B BE[E8760000]        <2> 	mov esi, line
  5117 000040A0 E830DEFFFF          <2> 	call print
  5118 000040A5 C3                  <2> 	ret
  5119                              <2> 	
  5120                              <1> %include 'source/programs/reboot.asm'
  5121 000040A6 FF2C7265626F6F7400  <2> 	db 255,44,"reboot",0
  5122 000040AF 0F011D[B9400000]    <2> 		lidt [idtreboot]
  5123 000040B6 CD00                <2> 		int 0
  5124 000040B8 F4                  <2> 		hlt
  5125                              <2> 	
  5126 000040B9 0000                <2> 	idtreboot dw 0
  5127 000040BB 00000000            <2> 			  dd 0
  5128                              <2> 
  5129                              <2> 	coldboot:
  5130 000040BF 66B84000            <2> 		MOV AX, 0040h
  5131 000040C3 8EC0                <2> 		MOV ES, AX
  5132 000040C5 2666C7057200000000- <2> 		MOV WORD [ES:00072h], 0h
  5133 000040CE 00                  <2>
  5134 000040CF EA00000000FFFF      <2> 		JMP 0FFFFh:0000h
  5135 000040D6 CF                  <2> 		IRET
  5136                              <2> 
  5137                              <2> 	warmboot:
  5138 000040D7 66B84000            <2> 		MOV AX, 0040h
  5139 000040DB 8EC0                <2> 		MOV ES, AX
  5140 000040DD 2666C7057200000034- <2> 		MOV WORD [ES:00072h], 01234h
  5141 000040E6 12                  <2>
  5142 000040E7 EA00000000FFFF      <2> 		JMP 0FFFFh:0000h
  5143 000040EE CF                  <2> 		IRET
  5144                              <2> 		
  5145                              <1> %include 'source/programs/reg.asm'
  5146 000040EF FF2C72656700        <2> db 255,44,"reg",0
  5147 000040F5 CD03                <2> 	int 3
  5148 000040F7 C3                  <2> 	ret 
  5149                              <1> %include 'source/programs/rmode.asm'
  5150 000040F8 FF2C726D6F646500    <2> db 255,44,"rmode",0
  5151 00004100 66BB[1B41]          <2> 	mov bx, rmodetest
  5152 00004104 66891D[A40C0000]    <2> 	mov [realmodeptr], bx
  5153 0000410B BB[AF470000]        <2> 	mov ebx, waitkey
  5154 00004110 891D[A00C0000]      <2> 	mov [realmodereturn], ebx
  5155 00004116 E96ECAFFFF          <2> 	jmp realmode
  5156                              <2> [BITS 16]
  5157                              <2> rmodetest:
  5158 0000411B BE[2D41]            <2> 	mov si, rmodestr
  5159 0000411E 31DB                <2> 	xor bx, bx
  5160                              <2> rmodeprnt:
  5161 00004120 AC                  <2> 	lodsb
  5162 00004121 08C0                <2> 	or al, al
  5163 00004123 7407                <2> 	jz .done
  5164 00004125 B40E                <2> 	mov ah, 0xE
  5165 00004127 43                  <2> 	inc bx
  5166 00004128 CD10                <2> 	int 0x10
  5167 0000412A EBF4                <2> 	jmp rmodeprnt
  5168 0000412C C3                  <2> .done: ret
  5169                              <2> 
  5170 0000412D 48656C6C6F2066726F- <2> rmodestr db "Hello from real mode!",10,13,"Goodbye!",10,13,0
  5171 00004136 6D207265616C206D6F- <2>
  5172 0000413F 6465210A0D476F6F64- <2>
  5173 00004148 627965210A0D00      <2>
  5174                              <2> [BITS 32]
  5175                              <1> %include 'source/programs/show.asm'
  5176 0000414F FF2C73686F7700      <2> db 255,44,"show",0
  5177 00004156 8B3D[922C0000]      <2> 		mov edi, [currentcommandloc]
  5178 0000415C 81C705000000        <2> 		add edi, 5
  5179 00004162 BE00008000          <2> 		mov esi, 0x800000
  5180 00004167 E819170000          <2> 		call loadfile
  5181 0000416C 81FA94010000        <2> 		cmp edx, 404
  5182 00004172 0F849E000000        <2> 		je near filenotfound
  5183 00004178 BE00008000          <2> 		mov esi, 0x800000
  5184 0000417D 66813E424D          <2> 		cmp word [esi], "BM"
  5185 00004182 7410                <2> 		je bmpfound
  5186 00004184 E84CDDFFFF          <2> 		call print
  5187 00004189 BE[E8760000]        <2> 		mov esi, line
  5188 0000418E E842DDFFFF          <2> 		call print
  5189 00004193 C3                  <2> 		ret
  5190                              <2> bmpfound:
  5191                              <2> %ifdef gui.included
  5192 00004194 803D[78880000]00    <2> 		cmp byte [guion], 0
  5193 0000419B 0F8443000000        <2> 		je near noguibmp
  5194 000041A1 BE00008000          <2> 		mov esi, 0x800000
  5195 000041A6 31C9                <2> 		xor ecx, ecx
  5196 000041A8 31D2                <2> 		xor edx, edx
  5197 000041AA 31C0                <2> 		xor eax, eax
  5198 000041AC 31DB                <2> 		xor ebx, ebx
  5199 000041AE E876300000          <2> 		call showbmp
  5200 000041B3 30C0                <2> 		xor al, al
  5201 000041B5 B405                <2> 		mov ah, 5
  5202 000041B7 CD30                <2> 		int 30h
  5203 000041B9 E8CC1D0000          <2> 		call guiclear
  5204 000041BE E8411F0000          <2> 		call clearmousecursor
  5205 000041C3 E8A1250000          <2> 		call reloadallgraphics
  5206 000041C8 8B35[922C0000]      <2> 		mov esi, [currentcommandloc]
  5207 000041CE 81C605000000        <2> 		add esi, 5
  5208 000041D4 E8FCDCFFFF          <2> 		call print
  5209 000041D9 BE[6B420000]        <2> 		mov esi, loadedbmpmsg
  5210 000041DE E8F2DCFFFF          <2> 		call print
  5211 000041E3 C3                  <2> 		ret
  5212                              <2> %endif
  5213                              <2> noguibmp:
  5214 000041E4 BE[EF410000]        <2> 		mov esi, warnguimsg
  5215 000041E9 E8E7DCFFFF          <2> 		call print
  5216 000041EE C3                  <2> 		ret
  5217 000041EF 546869732063616E20- <2> warnguimsg db "This can not be done without the GUI.",10,0
  5218 000041F8 6E6F7420626520646F- <2>
  5219 00004201 6E6520776974686F75- <2>
  5220 0000420A 742074686520475549- <2>
  5221 00004213 2E0A00              <2>
  5222                              <2> 
  5223                              <2> filenotfound:
  5224 00004216 BE[49420000]        <2> 		mov esi, filenf
  5225 0000421B E8B5DCFFFF          <2> 		call print
  5226 00004220 8B35[922C0000]      <2> 		mov esi, [currentcommandloc]
  5227                              <2> findfilenotfoundzero:
  5228 00004226 8A06                <2> 		mov al, [esi]
  5229 00004228 46                  <2> 		inc esi
  5230 00004229 3C00                <2> 		cmp al, 0
  5231 0000422B 7411                <2> 		je nofilenamenotfound
  5232 0000422D 81FE[3AB90000]      <2> 		cmp esi, buftxtend
  5233 00004233 7309                <2> 		jae nofilenamenotfound
  5234 00004235 3C20                <2> 		cmp al, " "
  5235 00004237 75ED                <2> 		jne findfilenotfoundzero
  5236 00004239 E897DCFFFF          <2> 		call print
  5237                              <2> nofilenamenotfound:
  5238 0000423E BE[54420000]        <2> 		mov esi, filenf2
  5239 00004243 E88DDCFFFF          <2> 		call print
  5240 00004248 C3                  <2> 		ret
  5241 00004249 5468652066696C6520- <2> filenf db "The file ",34,0
  5242 00004252 2200                <2>
  5243 00004254 2220636F756C64206E- <2> filenf2 db 34," could not be found.",10,0
  5244 0000425D 6F7420626520666F75- <2>
  5245 00004266 6E642E0A00          <2>
  5246                              <2> 		
  5247 0000426B 206C6F616465642E0A- <2> loadedbmpmsg db " loaded.",10,0
  5248 00004274 00                  <2>
  5249                              <1> %include 'source/programs/shush.asm'
  5250 00004275 FF2C736875736800    <2> db 255,44,"shush",0
  5251 0000427D BE[88420000]        <2> 	mov esi, shushmsg
  5252 00004282 E84EDCFFFF          <2> 	call print
  5253 00004287 C3                  <2> 	ret
  5254 00004288 57656C636F6D652074- <2> 	shushmsg db "Welcome to the SollerOS Hardly Unix-Compatible Shell!",10,0
  5255 00004291 6F2074686520536F6C- <2>
  5256 0000429A 6C65724F5320486172- <2>
  5257 000042A3 646C7920556E69782D- <2>
  5258 000042AC 436F6D70617469626C- <2>
  5259 000042B5 65205368656C6C210A- <2>
  5260 000042BE 00                  <2>
  5261                              <1> %include 'source/programs/stop.asm'
  5262 000042BF FF2C73746F7000      <2> 	db 255,44,"stop",0
  5263 000042C6 30C0                <2> stop:	xor al, al
  5264 000042C8 A2[34A10000]        <2> 	mov [BATCHISON], al
  5265 000042CD A2[CBA00000]        <2> 	mov [IFON], al
  5266 000042D2 A2[CCA00000]        <2> 	mov [IFTRUE], al
  5267 000042D7 A2[35A10000]        <2> 	mov [LOOPON], al
  5268 000042DC C3                  <2> 	ret 
  5269                              <1> %include 'source/programs/system.asm'
  5270 000042DD FF2C73797374656D00  <2> 	db 255,44,"system",0
  5271 000042E6 BE[96430000]        <2> 	mov esi, systeminfomsg
  5272 000042EB E8D3DBFFFF          <2> 	call printquiet
  5273 000042F0 B9[0D870000]        <2> 	mov ecx, osend
  5274 000042F5 E889ECFFFF          <2> 	call showdec
  5275 000042FA BE[AB430000]        <2> 	mov esi, diskbytemsg
  5276 000042FF E8BFDBFFFF          <2> 	call printquiet
  5277 00004304 B9[0D870000]        <2> 	mov ecx, osend
  5278 00004309 81C1[586C0100]      <2> 	add ecx, commandbufend
  5279 0000430F 81E9[78880000]      <2> 	sub ecx, bssstart	;add the extra buffer space
  5280 00004315 E869ECFFFF          <2> 	call showdec
  5281 0000431A BE[C2430000]        <2> 	mov esi, membytemsg
  5282 0000431F E89FDBFFFF          <2> 	call printquiet
  5283                              <2> getcpuspeed:
  5284 00004324 B8FE000000          <2> 	mov eax, 0xFE
  5285 00004329 E621                <2> 	out 0x21, al ;mask off all but timer interrupt
  5286 0000432B B020                <2> 	mov al, 0x20
  5287 0000432D E620                <2> 	out 0x20, al
  5288 0000432F 31C0                <2> 	xor eax, eax
  5289 00004331 F4                  <2> 	hlt
  5290 00004332 C605[39020000]01    <2> 	mov byte [testingcpuspeed], 1
  5291                              <2> cpuspeedloop:	;wait until next timer interrupt, then inc eax until the next
  5292 00004339 40                  <2> 	inc eax
  5293 0000433A EBFD                <2> 	jmp cpuspeedloop
  5294                              <2> cpuspeedloopend:
  5295 0000433C 31C0                <2> 	xor eax, eax
  5296 0000433E E621                <2> 	out 0x21, al
  5297 00004340 B020                <2> 	mov al, 0x20
  5298 00004342 E620                <2> 	out 0x20, al
  5299 00004344 31D2                <2> 	xor edx, edx
  5300 00004346 31C0                <2> 	xor eax, eax
  5301 00004348 A1[3A020000]        <2> 	mov eax, [cpuspeedperint]
  5302 0000434D 8B1D[4C020000]      <2> 	mov ebx, [timeinterval]
  5303 00004353 C1EB0A              <2> 	shr ebx, 10 ;divide the interval by 1024
  5304 00004356 F7F3                <2> 	div ebx	;quotient in eax, remainder in edx
  5305 00004358 89C1                <2> 	mov ecx, eax
  5306 0000435A E824ECFFFF          <2> 	call showdec
  5307 0000435F BE[07440000]        <2> 	mov esi, cpuspeedmsg
  5308 00004364 E85ADBFFFF          <2> 	call printquiet
  5309 00004369 8B0D[3E020000]      <2> 	mov ecx, [memoryspace]
  5310 0000436F C1E914              <2> 	shr ecx, 20
  5311 00004372 41                  <2> 	inc ecx	;the reading is one MB behind
  5312 00004373 E80BECFFFF          <2> 	call showdec
  5313 00004378 BE[0D440000]        <2> 	mov esi, memoryspacemsg
  5314 0000437D E853DBFFFF          <2> 	call print
  5315                              <2> %ifdef sound.included
  5316 00004382 803D[45520000]00    <2> 	cmp byte [SoundBlaster], 0
  5317 00004389 740A                <2> 	je .nosb
  5318 0000438B BE[EF430000]        <2> 	mov esi, soundblastermsg
  5319 00004390 E840DBFFFF          <2> 	call print
  5320                              <2> .nosb:
  5321                              <2> %endif
  5322 00004395 C3                  <2> 	ret
  5323                              <2> 
  5324 00004396 4B65726E656C20496E- <2> systeminfomsg db "Kernel Information:",10,0
  5325 0000439F 666F726D6174696F6E- <2>
  5326 000043A8 3A0A00              <2>
  5327 000043AB 427974657320446973- <2> diskbytemsg db "Bytes Disk Space Used",10,0
  5328 000043B4 6B2053706163652055- <2>
  5329 000043BD 7365640A00          <2>
  5330 000043C2 4279746573204D656D- <2> membytemsg db "Bytes Memory Space Used",10,"System Information:",10,0
  5331 000043CB 6F7279205370616365- <2>
  5332 000043D4 20557365640A537973- <2>
  5333 000043DD 74656D20496E666F72- <2>
  5334 000043E6 6D6174696F6E3A0A00  <2>
  5335                              <2> %ifdef sound.included
  5336 000043EF 536F756E64626C6173- <2> 	soundblastermsg db "Soundblaster Detected.",10,0
  5337 000043F8 746572204465746563- <2>
  5338 00004401 7465642E0A00        <2>
  5339                              <2> %endif
  5340 00004407 4D4950530A00        <2> cpuspeedmsg db "MIPS",10,0
  5341 0000440D 4D42204D656D6F7279- <2> memoryspacemsg db "MB Memory Space Free",10,0
  5342 00004416 205370616365204672- <2>
  5343 0000441F 65650A00            <2>
  5344                              <1> %include 'source/programs/thread.asm'
  5345 00004423 FF2C74687265616400  <2> db 255,44,"thread",0
  5346 0000442C E933150000          <2> 	jmp threadstarttest
  5347                              <1> %include 'source/programs/time.asm'
  5348 00004431 082E30303030303030- <2> timenscache db 8,".000000000"
  5349 0000443A 3030                <2>
  5350 0000443C 200A00              <2> timenscacheend: db " ",10,0
  5351 0000443F 00                  <2> istimeset db 0
  5352 00004440 456E74657220746865- <2> settimemsg db "Enter the current UNIX time:",10,0
  5353 00004449 2063757272656E7420- <2>
  5354 00004452 554E49582074696D65- <2>
  5355 0000445B 3A0A00              <2>
  5356 0000445E 00<rept>            <2> timeinputbuffer times 12 db 0
  5357 0000446A 00                  <2> timeinputbend: db 0
  5358                              <2> 
  5359 0000446B FF2C74696D6500      <2> db 255,44,"time",0
  5360 00004472 803D[3F440000]00    <2> 	cmp byte [istimeset], 0
  5361 00004479 753A                <2> 	jne timeisset
  5362 0000447B BE[40440000]        <2> 	mov esi, settimemsg
  5363 00004480 E850DAFFFF          <2> 	call print
  5364 00004485 BE[5E440000]        <2> 	mov esi, timeinputbuffer
  5365 0000448A BF[6A440000]        <2> 	mov edi, timeinputbend
  5366 0000448F E827DBFFFF          <2> 	call readline
  5367 00004494 BE[5E440000]        <2> 	mov esi, timeinputbuffer
  5368 00004499 31FF                <2> 	xor edi, edi
  5369 0000449B E8C5EBFFFF          <2> 	call cnvrttxt
  5370 000044A0 890D[44020000]      <2> 	mov [timeseconds], ecx
  5371 000044A6 31C9                <2> 	xor ecx, ecx
  5372 000044A8 890D[48020000]      <2> 	mov [timenanoseconds], ecx
  5373 000044AE C605[3F440000]01    <2> 	mov byte [istimeset], 1
  5374                              <2> timeisset:
  5375 000044B5 8B0D[44020000]      <2> 	mov ecx, [timeseconds]
  5376 000044BB E8C3EAFFFF          <2> 	call showdec
  5377                              <2> 	
  5378 000044C0 8B0D[48020000]      <2> 	mov ecx, [timenanoseconds]
  5379 000044C6 BE[31440000]        <2> 	mov esi, timenscache
  5380 000044CB C7460230303030      <2> 	mov dword [esi+ 2], "0000"
  5381 000044D2 C7460630303030      <2> 	mov dword [esi + 6], "0000"
  5382 000044D9 C6460A30            <2> 	mov byte [esi + 10], "0"
  5383 000044DD BE[3C440000]        <2> 	mov esi, timenscacheend
  5384 000044E2 E87FE8FFFF          <2> 	call convert
  5385 000044E7 BE[31440000]        <2> 	mov esi, timenscache
  5386 000044EC E8E4D9FFFF          <2> 	call print
  5387                              <2> 	
  5388 000044F1 E80F000000          <2> 	call time
  5389 000044F6 BE[D1460000]        <2> 	mov esi, timeshow
  5390 000044FB E8D5D9FFFF          <2> 	call print
  5391 00004500 E9BC000000          <2> 	jmp findday
  5392                              <2> time:
  5393 00004505 E84F010000          <2> 	call tstackput1
  5394 0000450A B00A                <2> 	mov al,10			;Get RTC register A
  5395 0000450C E879010000          <2> 	call tget1
  5396 00004511 A880                <2> 	test al,0x80			;Is update in progress?
  5397 00004513 75F0                <2> 	jne time				; yes, wait
  5398                              <2> 
  5399 00004515 B000                <2> 	mov al,0			;Get seconds (00 to 59)
  5400 00004517 E86E010000          <2> 	call tget1
  5401 0000451C A2[C8460000]        <2> 	mov [RTCtimeSecond],al
  5402                              <2> 
  5403 00004521 B002                <2> 	mov al,0x02			;Get minutes (00 to 59)
  5404 00004523 E862010000          <2> 	call tget1
  5405 00004528 A2[C9460000]        <2> 	mov [RTCtimeMinute],al
  5406                              <2> 
  5407 0000452D B004                <2> 	mov al,0x04			;Get hours (see notes)
  5408 0000452F E856010000          <2> 	call tget1
  5409 00004534 A2[CA460000]        <2> 	mov [RTCtimeHour],al
  5410                              <2> 
  5411 00004539 B007                <2> 	mov al,0x07			;Get day of month (01 to 31)
  5412 0000453B E84A010000          <2> 	call tget1
  5413 00004540 A2[CB460000]        <2> 	mov [RTCtimeDay],al
  5414                              <2> 
  5415 00004545 B008                <2> 	mov al,0x08			;Get month (01 to 12)
  5416 00004547 E83E010000          <2> 	call tget1
  5417 0000454C A2[CC460000]        <2> 	mov [RTCtimeMonth],al
  5418                              <2> 
  5419 00004551 B009                <2> 	mov al,0x09			;Get year (00 to 99)
  5420 00004553 E832010000          <2> 	call tget1
  5421 00004558 A2[CD460000]        <2> 	mov [RTCtimeYear],al
  5422                              <2> 	
  5423 0000455D BE[D1460000]        <2> 	mov esi, timeshow
  5424 00004562 8A2D[CA460000]      <2> 	mov ch, [RTCtimeHour]
  5425 00004568 E828010000          <2> 	call tput1
  5426 0000456D 8A2D[C9460000]      <2> 	mov ch, [RTCtimeMinute]
  5427 00004573 E81D010000          <2> 	call tput1
  5428 00004578 8A2D[C8460000]      <2> 	mov ch, [RTCtimeSecond]
  5429 0000457E E812010000          <2> 	call tput1
  5430 00004583 BE[DA460000]        <2> 	mov esi, dateshow
  5431 00004588 8A2D[CC460000]      <2> 	mov ch, [RTCtimeMonth]
  5432 0000458E E802010000          <2> 	call tput1
  5433 00004593 8A2D[CB460000]      <2> 	mov ch, [RTCtimeDay]
  5434 00004599 E8F7000000          <2> 	call tput1
  5435 0000459E B520                <2> 	mov ch, 0x20
  5436 000045A0 E8F0000000          <2> 	call tput1
  5437 000045A5 4E                  <2> 	dec esi
  5438 000045A6 8A2D[CD460000]      <2> 	mov ch, [RTCtimeYear]
  5439 000045AC E8E4000000          <2> 	call tput1
  5440 000045B1 E8BD000000          <2> 	call tstackget1
  5441 000045B6 C3                  <2> 	ret
  5442 000045B7 BE[D1460000]        <2> 	mov esi, timeshow
  5443 000045BC E814D9FFFF          <2> 	call print
  5444                              <2> ;;get day of week
  5445                              <2> ;;add these:
  5446                              <2> ;;century value
  5447                              <2> ;;last 2 digits of year
  5448                              <2> ;;last 2 digits of year right shifted twice
  5449                              <2> ;;month table value
  5450                              <2> ;;day of the month
  5451                              <2> ;;divide these by 7
  5452                              <2> ;;the remainder is the day
  5453                              <2> findday:
  5454 000045C1 31C0                <2> 	xor eax, eax
  5455                              <2> ;;first convert the values from BCD to hex
  5456 000045C3 A0[CB460000]        <2> 	mov al, [RTCtimeDay]
  5457 000045C8 E873000000          <2> 	call converttohex
  5458 000045CD 8825[CE460000]      <2> 	mov [dayhex], ah
  5459 000045D3 A0[CC460000]        <2> 	mov al, [RTCtimeMonth]
  5460 000045D8 E863000000          <2> 	call converttohex
  5461 000045DD 8825[CF460000]      <2> 	mov [monthhex], ah
  5462 000045E3 A0[CD460000]        <2> 	mov al, [RTCtimeYear]
  5463 000045E8 E853000000          <2> 	call converttohex
  5464 000045ED 8825[D0460000]      <2> 	mov [yearhex], ah
  5465 000045F3 31C0                <2> 	xor eax, eax
  5466 000045F5 A0[D0460000]        <2> 	mov al, [yearhex]
  5467 000045FA C0E802              <2> 	shr al, 2
  5468 000045FD 0205[D0460000]      <2> 	add al, [yearhex]
  5469 00004603 0506000000          <2> 	add eax, 6
  5470 00004608 31DB                <2> 	xor ebx, ebx
  5471 0000460A 8A1D[CF460000]      <2> 	mov bl, [monthhex]
  5472 00004610 FECB                <2> 	dec bl
  5473 00004612 81C3[EF460000]      <2> 	add ebx, month
  5474 00004618 31C9                <2> 	xor ecx, ecx
  5475 0000461A 8A0B                <2> 	mov cl, [ebx]
  5476 0000461C 01C8                <2> 	add eax, ecx
  5477 0000461E 8A0D[CE460000]      <2> 	mov cl, [dayhex]
  5478 00004624 01C8                <2> 	add eax, ecx
  5479 00004626 66BB0700            <2> 	mov bx, 7
  5480 0000462A 31D2                <2> 	xor edx, edx
  5481 0000462C 66F7F3              <2> 	div bx
  5482 0000462F C1E202              <2> 	shl edx, 2
  5483 00004632 81C2[FB460000]      <2> 	add edx, day
  5484 00004638 8B32                <2> 	mov esi, [edx]
  5485 0000463A E896D8FFFF          <2> 	call print
  5486 0000463F C3                  <2> 	ret
  5487                              <2> 	
  5488                              <2> converttohex:
  5489 00004640 88C4                <2> 	mov ah, al
  5490 00004642 C0E804              <2> 	shr al, 4
  5491 00004645 C0E404              <2> 	shl ah, 4
  5492 00004648 C0EC04              <2> 	shr ah, 4
  5493 0000464B 3C00                <2> 	cmp al, 0
  5494 0000464D 7409                <2> 	je noconverttohex
  5495                              <2> converttohexlp:
  5496 0000464F 80C40A              <2> 	add ah, 10
  5497 00004652 FEC8                <2> 	dec al
  5498 00004654 3C00                <2> 	cmp al, 0
  5499 00004656 75F7                <2> 	jne converttohexlp
  5500                              <2> noconverttohex:
  5501 00004658 C3                  <2> 	ret
  5502                              <2> 	
  5503                              <2> tstackput1:
  5504 00004659 8935[C4460000]      <2> 	mov [tstack + 20], esi
  5505 0000465F BE[B0460000]        <2> 	mov esi, tstack
  5506 00004664 8906                <2> 	mov [esi], eax
  5507 00004666 895E04              <2> 	mov [esi + 4], ebx
  5508 00004669 894E08              <2> 	mov [esi + 8], ecx
  5509 0000466C 89560C              <2> 	mov [esi + 12], edx
  5510 0000466F 897E10              <2> 	mov [esi + 16], edi
  5511 00004672 C3                  <2> 	ret
  5512                              <2> 	
  5513                              <2> tstackget1:
  5514 00004673 BE[B0460000]        <2> 	mov esi, tstack
  5515 00004678 8B06                <2> 	mov eax, [esi]
  5516 0000467A 8B5E04              <2> 	mov ebx, [esi + 4]
  5517 0000467D 8B4E08              <2> 	mov ecx, [esi + 8]
  5518 00004680 8B560C              <2> 	mov edx, [esi + 12]
  5519 00004683 8B7E10              <2> 	mov edi, [esi + 16]
  5520 00004686 8B7614              <2> 	mov esi, [esi + 20]
  5521 00004689 C3                  <2> 	ret
  5522                              <2> 	
  5523                              <2> tget1:
  5524 0000468A 66BA7000            <2> 	mov dx, 0x70
  5525 0000468E EE                  <2> 	out dx, al
  5526 0000468F 6642                <2> 	inc dx
  5527 00004691 EC                  <2> 	in al, dx
  5528 00004692 664A                <2> 	dec dx
  5529 00004694 C3                  <2> 	ret
  5530                              <2> 	
  5531                              <2> tput1:
  5532 00004695 66C1E904            <2> 	shr cx, 4
  5533 00004699 B030                <2> 	mov al, 48
  5534 0000469B 00E8                <2> 	add al, ch
  5535 0000469D 8806                <2> 	mov [esi], al
  5536 0000469F 46                  <2> 	inc esi
  5537 000046A0 B030                <2> 	mov al, 48
  5538 000046A2 C0E904              <2> 	shr cl, 4
  5539 000046A5 00C8                <2> 	add al, cl
  5540 000046A7 8806                <2> 	mov [esi], al
  5541 000046A9 81C602000000        <2> 	add esi, 2
  5542 000046AF C3                  <2> 	ret
  5543                              <2> 		
  5544 000046B0 000000000000000000- <2> 	tstack dd 0,0,0,0,0,0
  5545 000046B9 000000000000000000- <2>
  5546 000046C2 000000000000        <2>
  5547 000046C8 00                  <2> 	RTCtimeSecond db 0
  5548 000046C9 00                  <2> 	RTCtimeMinute db 0
  5549 000046CA 00                  <2> 	RTCtimeHour db 0
  5550 000046CB 00                  <2> 	RTCtimeDay db 0
  5551 000046CC 00                  <2> 	RTCtimeMonth db 0
  5552 000046CD 00                  <2> 	RTCtimeYear db 0
  5553 000046CE 00                  <2> 	dayhex db 0
  5554 000046CF 00                  <2> 	monthhex db 0
  5555 000046D0 00                  <2> 	yearhex db 0
  5556 000046D1 30303A30303A30300A  <2> 	timeshow db "00:00:00",10
  5557 000046DA 30302D30302D303030- <2> 	dateshow db "00-00-0000",10,0
  5558 000046E3 300A00              <2>
  5559                              <2> 	oldcentury:	;;from 1700 to 1900
  5560 000046E6 040200              <2> 	db 4,2,0
  5561                              <2> 	century:	;;from 2000 to 2500
  5562 000046E9 060402000604        <2> 	db 6,4,2,0,6,4
  5563                              <2> 	month:
  5564 000046EF 000303060104060205- <2> 	db 0,3,3,6,1,4,6,2,5,0,3,5
  5565 000046F8 000305              <2>
  5566                              <2> 	day:
  5567 000046FB [17470000]          <2> 	dd sunday
  5568 000046FF [1F470000]          <2> 	dd monday
  5569 00004703 [27470000]          <2> 	dd tuesday
  5570 00004707 [30470000]          <2> 	dd wednesday
  5571 0000470B [3B470000]          <2> 	dd thursday
  5572 0000470F [45470000]          <2> 	dd friday
  5573 00004713 [4D470000]          <2> 	dd saturday
  5574                              <2> sunday:
  5575 00004717 53756E6461790A00    <2> 	db "Sunday",10,0
  5576                              <2> monday:
  5577 0000471F 4D6F6E6461790A00    <2> 	db "Monday",10,0
  5578                              <2> tuesday:
  5579 00004727 547565736461790A00  <2> 	db "Tuesday",10,0
  5580                              <2> wednesday:
  5581 00004730 5765646E6573646179- <2> 	db "Wednesday",10,0
  5582 00004739 0A00                <2>
  5583                              <2> thursday:
  5584 0000473B 54687572736461790A- <2> 	db "Thursday",10,0
  5585 00004744 00                  <2>
  5586                              <2> friday:
  5587 00004745 4672696461790A00    <2> 	db "Friday",10,0
  5588                              <2> saturday:
  5589 0000474D 53617475726461790A- <2> 	db "Saturday",10,0
  5590 00004756 00                  <2>
  5591                              <1> %include 'source/programs/turnoff.asm'
  5592 00004757 FF2C7475726E6F6666- <2> 	db 255,44,"turnoff",0
  5593 00004760 00                  <2>
  5594                              <2> 	turnoff:
  5595 00004761 66BB[7C47]          <2> 			mov bx, shutdown
  5596 00004765 66891D[A40C0000]    <2> 			mov [realmodeptr], bx
  5597 0000476C BB[A6470000]        <2> 			mov ebx, halt
  5598 00004771 891D[A00C0000]      <2> 			mov [realmodereturn], ebx
  5599 00004777 E90DC4FFFF          <2> 			jmp realmode
  5600                              <2> 
  5601                              <2> [BITS 16]
  5602                              <2> 		shutdown:
  5603 0000477C B453                <2> 			mov ah, 0x53
  5604 0000477E B004                <2> 			mov al, 4
  5605 00004780 31DB                <2> 			xor bx, bx
  5606 00004782 CD15                <2> 			int 0x15
  5607                              <2> 			
  5608 00004784 B453                <2> 			mov ah, 0x53
  5609 00004786 B001                <2> 			mov al, 1
  5610 00004788 31DB                <2> 			xor bx, bx
  5611 0000478A CD15                <2> 			int 0x15
  5612                              <2> 			
  5613 0000478C B453                <2> 			mov ah, 0x53
  5614 0000478E B008                <2> 			mov al, 8
  5615 00004790 BB0100              <2> 			mov bx, 1
  5616 00004793 B90100              <2> 			mov cx, 1
  5617 00004796 CD15                <2> 			int 0x15
  5618                              <2> 			
  5619 00004798 B453                <2> 			mov ah, 0x53
  5620 0000479A B007                <2> 			mov al, 7
  5621 0000479C BB0100              <2> 			mov bx, 1
  5622 0000479F B90300              <2> 			mov cx, 3
  5623 000047A2 CD15                <2> 			int 0x15
  5624 000047A4 EBFE                <2> 			jmp $
  5625                              <2> 			[BITS 32]
  5626 000047A6 EBFE                <2> halt: jmp $
  5627                              <1> %include 'source/programs/wait.asm'
  5628 000047A8 FF2C7761697400      <2> db 255,44,"wait",0
  5629                              <2> waitkey:
  5630 000047AF E883DBFFFF          <2> 		call getchar
  5631 000047B4 C3                  <2> 		ret
  5632                              <1> %include 'source/programs/while.asm'
  5633 000047B5 FF2C7768696C6500    <2> db 255,44,"while",0
  5634 000047BD 30C0                <2> whilecmd:  xor al, al
  5635 000047BF 3805[34A10000]      <2> 	cmp [BATCHISON], al
  5636 000047C5 0F84B1EFFFFF        <2> 	je near notbatch
  5637 000047CB 8B35[30A10000]      <2> 	mov esi, [BATCHPOS]
  5638 000047D1 81EE02000000        <2> 	sub esi, 2
  5639 000047D7 4E                  <2> whilefnd: dec esi
  5640 000047D8 8A06                <2> 	mov al, [esi]
  5641 000047DA 3C0A                <2> 	cmp al, 10
  5642 000047DC 0F840A000000        <2> 	je near whilefnd2
  5643 000047E2 3C00                <2> 	cmp al, 0
  5644 000047E4 0F8402000000        <2> 	je near whilefnd2
  5645 000047EA EBEB                <2> 	jmp whilefnd
  5646                              <2> whilefnd2:
  5647 000047EC 46                  <2> 	inc esi
  5648 000047ED 8935[36A10000]      <2> 	mov [LOOPPOS], esi
  5649 000047F3 C605[35A10000]01    <2> 	mov BYTE [LOOPON], 1
  5650 000047FA BE[3AB50000]        <2> 	mov esi, buftxt
  5651 000047FF BB[3AB50000]        <2> 	mov ebx, buftxt
  5652 00004804 81C306000000        <2> 	add ebx, 6
  5653 0000480A E994F5FFFF          <2> 	jmp chkeqsn
  5654                              <1> progend:		;programs end here	
  5655                              <1> batchprogend:
  5656                                  	%include "source/hardware.asm"
  5657                              <1> %ifdef gui.included
  5658                              <1> 	%include "source/drivers/video/vesa.asm"
  5659                              <2> [BITS 16]
  5660                              <2> guiswitch:
  5661 0000480F 81F90000            <2> 	cmp cx, 0
  5662 00004813 750B                <2> 	jne guiswitchdefnum
  5663 00004815 B81200              <2> 	mov ax, 12h
  5664 00004818 31DB                <2> 	xor bx, bx
  5665 0000481A CD10                <2> 	int 10h
  5666 0000481C E85100              <2> 	call guiloadagain
  5667                              <2> guiswitchnocando:
  5668 0000481F C3                  <2> 	ret	;return without switching as mode number is bad
  5669                              <2> guiswitchdefnum:	;switch to a defined mode number
  5670 00004820 B8004F              <2> 	mov ax, 0x4F00
  5671 00004823 BF[FE49]            <2> 	mov di, VBEMODEBLOCK
  5672 00004826 CD10                <2> 	int 10h
  5673 00004828 BE[204A]            <2> 	mov si, reserved
  5674 0000482B 81EE0200            <2> 	sub si, 2
  5675                              <2> .loop:
  5676 0000482F 81C60200            <2> 	add si, 2
  5677 00004833 81FE[FE4A]          <2> 	cmp si, oemdata
  5678 00004837 74E6                <2> 	je guiswitchnocando
  5679 00004839 813CFFFF            <2> 	cmp word [si], 0xFFFF
  5680 0000483D 74E0                <2> 	je guiswitchnocando
  5681 0000483F 390C                <2> 	cmp [si], cx
  5682 00004841 75EC                <2> 	jne .loop
  5683 00004843 8936[4749]          <2> 	mov [videomodecache], si
  5684 00004847 81C90040            <2> 	or cx, 0x4000	;make sure linear frame buffer is selected
  5685 0000484B B8014F              <2> 	mov ax, 0x4F01
  5686 0000484E BF[FE4B]            <2> 	mov di, VBEMODEINFOBLOCK
  5687 00004851 890E[4549]          <2> 	mov [vesamode], cx
  5688 00004855 CD10                <2> 	int 10h
  5689 00004857 E9CB00              <2> 	jmp selectedvesa
  5690                              <2> guiload:
  5691 0000485A BE[D649]            <2> 	mov si, bootmsg
  5692 0000485D E8E900              <2> 	call printrm
  5693 00004860 31C0                <2> 	xor ax, ax
  5694 00004862 CD16                <2> 	int 16h
  5695 00004864 3C79                <2> 	cmp al, "y"
  5696 00004866 0F85D6B7            <2> 	jne near vgaset
  5697 0000486A BE[E776]            <2> 	mov si, crlf
  5698 0000486D E8D900              <2> 	call printrm
  5699                              <2> guiloadagain:
  5700 00004870 B8004F              <2> 	mov ax, 04F00h
  5701 00004873 BF[FE49]            <2> 	mov di, VBEMODEBLOCK
  5702 00004876 CD10                <2> 	int 10h
  5703 00004878 BE[204A]            <2> 	mov si, reserved
  5704 0000487B 81EE0200            <2> 	sub si, 2
  5705                              <2> findvideomodes:
  5706 0000487F 81C60200            <2> 	add si, 2
  5707 00004883 8B0C                <2> 	mov cx, [si]
  5708 00004885 81F9FFFF            <2> 	cmp cx, 0xFFFF
  5709 00004889 0F840A00            <2> 	je near nextvmode
  5710 0000488D 81FE[FE4A]          <2> 	cmp si, oemdata
  5711 00004891 0F83ABB7            <2> 	jae near vgaset	;;kill if no valid list is found
  5712 00004895 EBE8                <2> 	jmp findvideomodes 	
  5713                              <2> ;;debug,shows vmodes available
  5714                              <2> nextvmode:
  5715 00004897 81EE0200            <2> 	sub si, 2
  5716 0000489B 81FE[204A]          <2> 	cmp si, reserved
  5717 0000489F 0F82CDFF            <2> 	jb near guiloadagain
  5718 000048A3 8B0C                <2> 	mov cx, [si]
  5719 000048A5 81F9FFFF            <2> 	cmp cx, 0xFFFF
  5720 000048A9 0F84EAFF            <2> 	je near nextvmode
  5721 000048AD 81C90040            <2> 	or cx, 0x4000 		;;Linear Frame Buffer
  5722 000048B1 B8014F              <2> 	mov ax, 04F01h
  5723 000048B4 BF[FE4B]            <2> 	mov di, VBEMODEINFOBLOCK
  5724 000048B7 890E[4549]          <2> 	mov [vesamode], cx
  5725 000048BB CD10                <2> 	int 10h
  5726 000048BD A0[174C]            <2> 	mov al, [bitsperpixel]
  5727 000048C0 3C10                <2> 	cmp al, 16
  5728 000048C2 75D3                <2> 	jne nextvmode
  5729 000048C4 8936[4749]          <2> 	mov [videomodecache], si
  5730 000048C8 84E4                <2> 	test ah, ah
  5731 000048CA 0F842200            <2> 	jz near setvesamode
  5732 000048CE EBC7                <2> 	jmp nextvmode
  5733 000048D0 0A0D49732074686973- <2> isthisvideook db 10,13,"Is this video mode OK?(y/n)",13,10,0
  5734 000048D9 20766964656F206D6F- <2>
  5735 000048E2 6465204F4B3F28792F- <2>
  5736 000048EB 6E290D0A00          <2>
  5737                              <2> setvesamode:
  5738 000048F0 8B0E[104C]          <2> 	mov cx, [resolutionx]
  5739 000048F4 E86A00              <2> 	call decshow
  5740 000048F7 B078                <2> 	mov al, "x"
  5741 000048F9 E8D200              <2> 	call char
  5742 000048FC 8B0E[124C]          <2> 	mov cx, [resolutiony]
  5743 00004900 E85E00              <2> 	call decshow
  5744 00004903 B040                <2> 	mov al, "@"
  5745 00004905 E8C600              <2> 	call char
  5746 00004908 31C9                <2> 	xor cx, cx
  5747 0000490A 8A0E[174C]          <2> 	mov cl, [bitsperpixel]
  5748 0000490E E85000              <2> 	call decshow
  5749 00004911 BE[D048]            <2> 	mov si, isthisvideook
  5750 00004914 E83200              <2> 	call printrm
  5751 00004917 31C0                <2> 	xor ax, ax
  5752 00004919 CD16                <2> 	int 16h
  5753 0000491B 8B36[4749]          <2> 	mov si, [videomodecache]
  5754 0000491F 3C79                <2> 	cmp al, "y"
  5755 00004921 0F8572FF            <2> 	jne near nextvmode
  5756                              <2> selectedvesa:
  5757 00004925 8B16[104C]          <2> 	mov dx, [resolutionx]
  5758 00004929 01D2                <2> 	add dx, dx
  5759 0000492B 8916[FE4C]          <2> 	mov [resolutionx2], dx
  5760 0000492F 31D2                <2> 	xor dx, dx
  5761 00004931 31C9                <2> 	xor cx, cx
  5762 00004933 B8024F              <2> 	mov ax, 04F02h
  5763 00004936 8B1E[4549]          <2> 	mov bx, [vesamode]
  5764 0000493A CD10                <2> 	int 10h		;;enter VESA mode
  5765 0000493C C606[7888]01        <2> 	mov byte [guion], 1
  5766 00004941 E80CB7              <2> 	call getmemorysize;get the memory map after the video is initialized
  5767 00004944 C3                  <2> 	ret
  5768                              <2> 	
  5769 00004945 0000                <2> vesamode dw 0
  5770 00004947 0000                <2> videomodecache dw 0
  5771                              <2> 
  5772                              <2>     printrm:			; 'si' comes in with string address
  5773 00004949 BB0700              <2> 	    mov bx,07		; write to display
  5774 0000494C B40E                <2> 	    mov ah,0Eh		; screen function
  5775 0000494E 8A04                <2>     prs2:    mov al,[si]         ; get next character
  5776 00004950 3C00                <2> 	    cmp al,0		; look for terminator 
  5777 00004952 7405                <2>             je finpr2		; zero byte at end of string
  5778 00004954 CD10                <2> 	    int 10h		; write character to screen.    
  5779 00004956 46                  <2>      	    inc si	     	; move to next character
  5780 00004957 EBF5                <2> 	    jmp prs2		; loop
  5781 00004959 C3                  <2>     finpr2: ret
  5782                              <2> 
  5783 0000495A 0000000000          <2> dcnm db 0,0,0,0,0
  5784 0000495F 0000                <2> dcnmend db 0,0
  5785                              <2> 
  5786                              <2> 
  5787                              <2> decshow:
  5788 00004961 BE[5A49]            <2> 	mov si, dcnm
  5789                              <2> decclear:
  5790 00004964 B030                <2> 	mov al, "0"
  5791 00004966 8804                <2> 	mov [si], al
  5792 00004968 46                  <2> 	inc si
  5793 00004969 81FE[5F49]          <2> 	cmp si, dcnmend
  5794 0000496D 76F5                <2> 	jbe decclear
  5795 0000496F 4E                  <2> 	dec si
  5796 00004970 E81500              <2> 	call convertrm
  5797 00004973 BE[5A49]            <2> 	mov si, dcnm
  5798                              <2> dectst:
  5799 00004976 8A04                <2> 	mov al, [si]
  5800 00004978 46                  <2> 	inc si
  5801 00004979 81FE[5F49]          <2> 	cmp si, dcnmend
  5802 0000497D 7704                <2> 	ja dectstend
  5803 0000497F 3C30                <2> 	cmp al, "0"
  5804 00004981 76F3                <2> 	jbe dectst
  5805                              <2> dectstend:
  5806 00004983 4E                  <2> 	dec si
  5807 00004984 E8C2FF              <2> 	call printrm
  5808 00004987 C3                  <2> 	ret
  5809                              <2> 	
  5810                              <2> 	
  5811                              <2> convertrm:
  5812 00004988 4E                  <2> 	dec si
  5813 00004989 89F3                <2> 	mov bx, si		;place to convert into must be in si, number to convert must be in cx
  5814                              <2> cnvrtrm:
  5815 0000498B 89DE                <2> 	mov si, bx
  5816 0000498D 81EE0300            <2> 	sub si, 3
  5817 00004991 46                  <2> ten3rm:	inc si
  5818 00004992 81F9E803            <2> 	cmp cx, 1000
  5819 00004996 7208                <2> 	jb ten2rm
  5820 00004998 81E9E803            <2> 	sub cx, 1000
  5821 0000499C FE04                <2> 	inc byte [si]
  5822 0000499E EBEB                <2> 	jmp cnvrtrm
  5823 000049A0 46                  <2> ten2rm:	inc si
  5824 000049A1 81F96400            <2> 	cmp cx, 100
  5825 000049A5 7208                <2> 	jb ten1rm
  5826 000049A7 81E96400            <2> 	sub cx, 100
  5827 000049AB FE04                <2> 	inc byte [si]
  5828 000049AD EBDC                <2> 	jmp cnvrtrm
  5829 000049AF 46                  <2> ten1rm:	inc si
  5830 000049B0 81F90A00            <2> 	cmp cx, 10
  5831 000049B4 7208                <2> 	jb ten0rm
  5832 000049B6 81E90A00            <2> 	sub cx, 10
  5833 000049BA FE04                <2> 	inc byte [si]
  5834 000049BC EBCD                <2> 	jmp cnvrtrm
  5835 000049BE 46                  <2> ten0rm:	inc si
  5836 000049BF 81F90100            <2> 	cmp cx, 1
  5837 000049C3 7208                <2> 	jb tendnrm
  5838 000049C5 81E90100            <2> 	sub cx, 1
  5839 000049C9 FE04                <2> 	inc byte [si]
  5840 000049CB EBBE                <2> 	jmp cnvrtrm
  5841                              <2> tendnrm:
  5842 000049CD C3                  <2> 	ret
  5843                              <2> 
  5844                              <2>     char: 		    ;char must be in al
  5845 000049CE BB0700              <2>        mov bx, 07
  5846 000049D1 B40E                <2> 	   mov ah, 0Eh
  5847 000049D3 CD10                <2> 	   int 10h
  5848 000049D5 C3                  <2> 	   ret
  5849                              <2> 
  5850 000049D6 426F6F7420696E746F- <2> bootmsg:	db "Boot into the GUI?(y/n)",0
  5851 000049DF 20746865204755493F- <2>
  5852 000049E8 28792F6E2900        <2>
  5853                              <2> 
  5854                              <2> 
  5855                              <2> mcursor:
  5856 000049EE 01                  <2> 	db	00000001b
  5857 000049EF 81                  <2> 	db	10000001b
  5858 000049F0 C1                  <2> 	db	11000001b
  5859 000049F1 E1                  <2> 	db	11100001b
  5860 000049F2 F1                  <2> 	db	11110001b
  5861 000049F3 F9                  <2> 	db	11111001b
  5862 000049F4 FD                  <2> 	db	11111101b
  5863 000049F5 FF                  <2> 	db	11111111b
  5864 000049F6 F9                  <2> 	db	11111001b
  5865 000049F7 B9                  <2> 	db	10111001b
  5866 000049F8 39                  <2> 	db	00111001b
  5867 000049F9 1C                  <2> 	db	00011100b
  5868 000049FA 1C                  <2> 	db	00011100b
  5869 000049FB 0E                  <2> 	db	00001110b
  5870 000049FC 0E                  <2> 	db	00001110b
  5871 000049FD 0C                  <2> 	db	00001100b
  5872                              <2> mcursorend:
  5873                              <2> 
  5874                              <2> 
  5875                              <2> VBEMODEBLOCK:
  5876 000049FE 00<rept>            <2> vbesignature 		times  4 db 0 	;VBE Signature
  5877 00004A02 00<rept>            <2> vbeversion  		times  2 db 0	;VBE Version
  5878 00004A04 00<rept>            <2> oemstringptr  		times  4 db 0	;Pointer to OEM String
  5879 00004A08 00<rept>            <2> capabilities 		times  4 db 0	;Capabilities of graphics cont.
  5880 00004A0C 00<rept>            <2> videomodeptr 		times  4 db 0	;Pointer to Video Mode List
  5881 00004A10 00<rept>            <2> totalmemory   		times  2 db 0	;number of 64Kb memory blocks
  5882 00004A12 00<rept>            <2> oemsoftwarerev  	times  2 db 0	;VBE implementation Software revision
  5883 00004A14 00<rept>            <2> oemvendornameptr 	times  4 db 0	;Pointer to Vendor Name String
  5884 00004A18 00<rept>            <2> oemproductnameptr 	times  4 db 0	;Pointer to Product Name String
  5885 00004A1C 00<rept>            <2> oemproductrevptr 	times  4 db 0	;Pointer to Product Revision String
  5886 00004A20 00<rept>            <2> reserved			times  222 db 0	;Reserved for VBE implementation scratch area
  5887 00004AFE 00<rept>            <2> oemdata 			times  256 db 0	;Data Area for OEM Strings
  5888                              <2> 
  5889                              <2> VBEMODEINFOBLOCK:
  5890                              <2> ;Mandatory information for all VBE revision
  5891 00004BFE 00<rept>            <2> modeattributes   	times  2 db 0	;Mode attributes
  5892 00004C00 00                  <2> winaattributes   	times  1 db 0	;Window A attributes
  5893 00004C01 00                  <2> winbattributes   	times  1 db 0	;Window B attributes
  5894 00004C02 00<rept>            <2> wingranularity   	times  2 db 0	;Window granularity
  5895 00004C04 00<rept>            <2> winsize          	times  2 db 0	;Window size
  5896 00004C06 00<rept>            <2> winasegment      	times  2 db 0	;Window A start segment
  5897 00004C08 00<rept>            <2> winbsegment      	times  2 db 0	;Window B start segment
  5898 00004C0A 00<rept>            <2> winfuncptr       	times  4 db 0	;pointer to window function
  5899 00004C0E 00<rept>            <2> bytesperscanline 	times  2 db 0	;Bytes per scan line
  5900                              <2> 
  5901                              <2> ;Mandatory information for VBE 1.2 and above
  5902 00004C10 00<rept>            <2> resolutionx     	times  2 db 0	;Horizontal resolution in pixel or chars
  5903 00004C12 00<rept>            <2> resolutiony	    	times  2 db 0	;Vertical resolution in pixel or chars
  5904 00004C14 00                  <2> xcharsize       	times  1 db 0	;Character cell width in pixel
  5905 00004C15 00                  <2> ycharsize       	times  1 db 0	;Character cell height in pixel
  5906 00004C16 00                  <2> numberofplanes  	times  1 db 0	;Number of memory planes
  5907 00004C17 00                  <2> bitsperpixel    	times  1 db 0	;Bits per pixel
  5908 00004C18 00                  <2> numberofbanks   	times  1 db 0	;Number of banks
  5909 00004C19 00                  <2> memorymodel     	times  1 db 0	;Memory model type
  5910 00004C1A 00                  <2> banksize        	times  1 db 0	;Bank size in KB
  5911 00004C1B 00                  <2> numberofimagepages	times  1 db 0	;Number of images
  5912 00004C1C 00                  <2> reserved1       	times  1 db 0	;Reserved for page function
  5913                              <2> 
  5914                              <2> ;Direct Color fields (required for direct/6 and YUV/7 memory models)
  5915 00004C1D 00                  <2> redmasksize			times  1 db 0	;Size of direct color red mask in bits
  5916 00004C1E 00                  <2> redfieldposition	times  1 db 0	;Bit position of lsb of red bask
  5917 00004C1F 00                  <2> greenmasksize   	times  1 db 0	;Size of direct color green mask in bits
  5918 00004C20 00                  <2> greenfieldposition	times  1 db 0	;Bit position of lsb of green bask
  5919 00004C21 00                  <2> bluemasksize		times  1 db 0	;Size of direct color blue mask in bits
  5920 00004C22 00                  <2> bluefieldposition	times  1 db 0	;Bit position of lsb of blue bask
  5921 00004C23 00                  <2> rsvdmasksize        times  1 db 0		;Size of direct color reserved mask in bits
  5922 00004C24 00                  <2> rsvdfieldposition	times  1 db 0		;Bit position of lsb of reserved bask
  5923 00004C25 00                  <2> directcolormodeinfo	times  1 db 0	;Direct color mode attributes
  5924                              <2> 
  5925                              <2> ;Mandatory information for VBE 2.0 and above
  5926 00004C26 00<rept>            <2> physbaseptr 		times  4 db 0	;Physical address for flat frame buffer
  5927 00004C2A 00<rept>            <2> offscreenmemoffset 	times  4 db 0	;Pointer to start of off screen memory
  5928 00004C2E 00<rept>            <2> offscreenmemsize 	times  2 db 0    ;Amount of off screen memory in 1Kb units
  5929 00004C30 00<rept>            <2> reserved2 			times  206 db 0  ;Remainder of ModeInfoBlock
  5930                              <2> 
  5931 00004CFE 0000                <2> resolutionx2 dw 0	;this is not part of the VBE but is necessary GUI info
  5932                              <2> VBEEND:
  5933                              <2> [BITS 32]
  5934                              <1> 	%include "source/drivers/input/mouse.asm"
  5935 00004D00 00                  <2> mousedisabled db 0
  5936                              <2> 	
  5937                              <2> 	cursorgui:
  5938 00004D01 803D[C6720000]01    <2> 		cmp byte [mouseon], 1
  5939 00004D08 0F8432000000        <2> 		je near moused
  5940 00004D0E 803D[78880000]00    <2> 		cmp byte [guion], 0
  5941 00004D15 0F846C060000        <2> 		je near entdown
  5942                              <2> 	initmouse:
  5943 00004D1B 803D[78880000]00    <2> 		cmp byte [guion], 0
  5944 00004D22 7405                <2> 		je noswmsposinit
  5945 00004D24 E895140000          <2> 		call switchmousepos2
  5946                              <2> 	noswmsposinit:
  5947 00004D29 E84E020000          <2> 	  	call PS2SET
  5948 00004D2E E877020000          <2> 		call ACTMOUS
  5949 00004D33 C605[C6720000]01    <2> 		mov byte [mouseon],1
  5950 00004D3A E890020000          <2> 		call GETB 	;;Get the responce byte of the mouse (like: Hey i am active)
  5951                              <2> 				;;If the bytes are mixed up,
  5952                              <2> 				;;remove this line or add another of this line.
  5953                              <2> 	nomouse:
  5954 00004D3F C3                  <2> 		ret
  5955                              <2> 	moused:
  5956 00004D40 803D[004D0000]01    <2> 		cmp byte [mousedisabled], 1
  5957 00004D47 74F6                <2> 		je nomouse
  5958 00004D49 803D[C6720000]01    <2> 		  cmp byte [mouseon], 1
  5959 00004D50 75C9                <2> 		  jne initmouse
  5960 00004D52 E878020000          <2> 		  call GETB
  5961 00004D57 88C3                <2> 		  mov  bl, al
  5962 00004D59 80E301              <2> 		  and  bl, 1
  5963 00004D5C 881D[F44F0000]      <2> 		  mov  BYTE [LBUTTON], bl
  5964 00004D62 88C3                <2> 		  mov  bl, al
  5965 00004D64 80E302              <2> 		  and  bl, 2
  5966 00004D67 D0EB                <2> 		  shr  bl, 1
  5967 00004D69 881D[F54F0000]      <2> 		  mov  BYTE [RBUTTON], bl
  5968 00004D6F 88C3                <2> 		  mov  bl, al
  5969 00004D71 80E304              <2> 		  and  bl, 4
  5970 00004D74 C0EB02              <2> 		  shr  bl, 2
  5971 00004D77 881D[F64F0000]      <2> 		  mov  BYTE [MBUTTON], bl
  5972 00004D7D E84D020000          <2> 		  call GETB
  5973 00004D82 A2[F74F0000]        <2> 		  mov  BYTE [XCOORD], al
  5974 00004D87 E843020000          <2> 		  call GETB
  5975 00004D8C A2[F84F0000]        <2> 		  mov  BYTE [YCOORD], al
  5976                              <2> 
  5977                              <2> 	showpixelcursor:
  5978 00004D91 668B15[E34E0000]    <2> 		mov dx, [mousecursorposition]
  5979 00004D98 668B0D[E54E0000]    <2> 		mov cx, [mousecursorposition + 2]
  5980 00004D9F 668915[DF4E0000]    <2> 		mov [lastmouseposition], dx
  5981 00004DA6 66890D[E14E0000]    <2> 		mov [lastmouseposition + 2], cx
  5982 00004DAD A0[F74F0000]        <2> 		mov al, [XCOORD]
  5983 00004DB2 3C80                <2> 		cmp al, 128
  5984 00004DB4 730C                <2> 		jae subxcoord
  5985 00004DB6 00C0                <2> 		add al, al
  5986 00004DB8 30E4                <2> 		xor ah, ah
  5987 00004DBA 6601C2              <2> 		add dx, ax
  5988 00004DBD E90B000000          <2> 		jmp subxcoorddn
  5989                              <2> 	subxcoord:
  5990 00004DC2 00C0                <2> 		add al, al
  5991 00004DC4 30DB                <2> 		xor bl, bl
  5992 00004DC6 28C3                <2> 		sub bl, al
  5993 00004DC8 30FF                <2> 		xor bh, bh
  5994 00004DCA 6629DA              <2> 		sub dx, bx
  5995                              <2> 	subxcoorddn:
  5996 00004DCD 8A1D[F84F0000]      <2> 		mov bl, [YCOORD]
  5997 00004DD3 30C0                <2> 		xor al, al
  5998 00004DD5 28D8                <2> 		sub al, bl
  5999 00004DD7 3C80                <2> 		cmp al, 128
  6000 00004DD9 730A                <2> 		jae subycoord
  6001 00004DDB 30E4                <2> 		xor ah, ah
  6002 00004DDD 6601C1              <2> 		add cx, ax
  6003 00004DE0 E909000000          <2> 		jmp subycoorddn
  6004                              <2> 	subycoord:
  6005 00004DE5 30DB                <2> 		xor bl, bl
  6006 00004DE7 28C3                <2> 		sub bl, al
  6007 00004DE9 30FF                <2> 		xor bh, bh
  6008 00004DEB 6629D9              <2> 		sub cx, bx
  6009                              <2> 	subycoorddn:
  6010 00004DEE 6681FA204E          <2> 		cmp dx, 20000
  6011 00004DF3 7603                <2> 		jbe nooriginx2
  6012 00004DF5 6631D2              <2> 		xor dx, dx
  6013                              <2> 	nooriginx2:
  6014 00004DF8 6681F9204E          <2> 		cmp cx, 20000
  6015 00004DFD 7603                <2> 		jbe nooriginy2
  6016 00004DFF 6631C9              <2> 		xor cx, cx
  6017                              <2> 	nooriginy2:
  6018 00004E02 6681FA0000          <2> 		cmp dx, 0
  6019 00004E07 7415                <2> 		je nofixxcolumn2
  6020 00004E09 663B15[FE4C0000]    <2> 		cmp dx, [resolutionx2]
  6021 00004E10 720C                <2> 		jb nofixxcolumn2
  6022 00004E12 668B15[FE4C0000]    <2> 		mov dx, [resolutionx2]
  6023 00004E19 6681EA0200          <2> 		sub dx, 2
  6024                              <2> 	nofixxcolumn2:
  6025 00004E1E 6681F90000          <2> 		cmp cx, 0
  6026 00004E23 7415                <2> 		je nofixyrow2
  6027 00004E25 663B0D[124C0000]    <2> 		cmp cx, [resolutiony]
  6028 00004E2C 720C                <2> 		jb nofixyrow2
  6029 00004E2E 668B0D[124C0000]    <2> 		mov cx, [resolutiony]
  6030 00004E35 6681E90100          <2> 		sub cx, 1
  6031                              <2> 	nofixyrow2:
  6032 00004E3A 668915[E34E0000]    <2> 		mov [mousecursorposition], dx
  6033 00004E41 66890D[E54E0000]    <2> 		mov [mousecursorposition + 2], cx
  6034 00004E48 803D[78880000]00    <2> 		cmp byte [guion], 0
  6035 00004E4F 0F8492000000        <2> 		je near termmouse
  6036 00004E55 E804130000          <2> 		call switchmousepos ;;use dragging code to ensure proper icon drag
  6037 00004E5A 803D[F44F0000]01    <2> 		cmp byte [LBUTTON], 1
  6038 00004E61 0F84CB130000        <2> 		je near clickicon
  6039 00004E67 803D[F54F0000]01    <2> 		cmp byte [RBUTTON], 1
  6040 00004E6E 0F84BE130000        <2> 		je near clickicon
  6041 00004E74 A0[1F620000]        <2> 		mov al, [pbutton]
  6042 00004E79 C705[22620000]0000- <2> 		mov dword [dragging], 0
  6043 00004E81 0000                <2>
  6044 00004E83 3C00                <2> 		cmp al, 0
  6045 00004E85 740F                <2> 		je nopreviousbutton
  6046 00004E87 E878120000          <2> 		call clearmousecursor
  6047 00004E8C E8D8180000          <2> 		call reloadallgraphics
  6048                              <2> 	windowtermcopyend:
  6049 00004E91 E828130000          <2> 		call switchmousepos2
  6050                              <2> 	nopreviousbutton:
  6051 00004E96 30C0                <2> 		xor al, al
  6052 00004E98 A2[1F620000]        <2> 		mov [pbutton], al
  6053 00004E9D A0[F44F0000]        <2> 		mov al, [LBUTTON]
  6054 00004EA2 A2[20620000]        <2> 		mov [pLBUTTON], al
  6055 00004EA7 A0[F54F0000]        <2> 		mov al, [RBUTTON]
  6056 00004EAC A2[21620000]        <2> 		mov [pRBUTTON], al
  6057 00004EB1 31C9                <2> 		xor ecx, ecx
  6058 00004EB3 31D2                <2> 		xor edx, edx
  6059 00004EB5 668B15[E34E0000]    <2> 		mov dx, [mousecursorposition]
  6060 00004EBC 668B0D[E54E0000]    <2> 		mov cx, [mousecursorposition + 2]
  6061 00004EC3 66BB18C7            <2> 		mov bx, 1100011100011000b
  6062 00004EC7 30E4                <2> 		xor ah, ah
  6063 00004EC9 B0FE                <2> 		mov al, 254
  6064 00004ECB C605[01610000]01    <2> 		mov byte [showcursorfonton], 1
  6065 00004ED2 E85C210000          <2> 		call showfontvesa
  6066 00004ED7 C605[01610000]00    <2> 		mov byte [showcursorfonton], 0
  6067 00004EDE C3                  <2> 		ret
  6068                              <2> 
  6069 00004EDF 84008400            <2> lastmouseposition dw 132,132
  6070 00004EE3 84008400            <2> mousecursorposition dw 132,132	
  6071                              <2> 
  6072                              <2> termmouse:
  6073 00004EE7 BE[50BC0000]        <2> 		mov esi, videobuf
  6074 00004EEC 31D2                <2> 		xor edx, edx
  6075 00004EEE 668B15[DF4E0000]    <2> 		mov dx, [lastmouseposition]
  6076 00004EF5 668B0D[E14E0000]    <2> 		mov cx, [lastmouseposition + 2]
  6077 00004EFC 66A1[7A4F0000]      <2> 		mov ax, [cursorcache]
  6078 00004F02 663D0000            <2> 		cmp ax, 0
  6079 00004F06 7425                <2> 		je nocopycursorcache
  6080 00004F08 66C1E104            <2> 		shl cx, 4
  6081 00004F0C 66C1E203            <2> 		shl dx, 3
  6082 00004F10 01D6                <2> 		add esi, edx
  6083 00004F12 6631D2              <2> 		xor dx, dx
  6084 00004F15 8A15[5D250000]      <2> 		mov dl, [charxy]
  6085 00004F1B 6641                <2> 		inc cx
  6086                              <2> termmousecplp1:
  6087 00004F1D 01D6                <2> 		add esi, edx
  6088 00004F1F 6649                <2> 		dec cx
  6089 00004F21 6681F90000          <2> 		cmp cx, 0
  6090 00004F26 75F5                <2> 		jne termmousecplp1
  6091 00004F28 29D6                <2> 		sub esi, edx
  6092 00004F2A 668906              <2> 		mov [esi], ax
  6093                              <2> nocopycursorcache:
  6094 00004F2D BE[50BC0000]        <2> 		mov esi, videobuf
  6095 00004F32 31D2                <2> 		xor edx, edx
  6096 00004F34 668B15[E34E0000]    <2> 		mov dx, [mousecursorposition]
  6097 00004F3B 668B0D[E54E0000]    <2> 		mov cx, [mousecursorposition + 2]
  6098 00004F42 66C1E104            <2> 		shl cx, 4
  6099 00004F46 66C1E203            <2> 		shl dx, 3
  6100 00004F4A 01D6                <2> 		add esi, edx
  6101 00004F4C 6631D2              <2> 		xor dx, dx
  6102 00004F4F 8A15[5D250000]      <2> 		mov dl, [charxy]
  6103 00004F55 6641                <2> 		inc cx
  6104                              <2> termmousecplp2:
  6105 00004F57 01D6                <2> 		add esi, edx
  6106 00004F59 6649                <2> 		dec cx
  6107 00004F5B 6681F90000          <2> 		cmp cx, 0
  6108 00004F60 75F5                <2> 		jne termmousecplp2
  6109 00004F62 29D6                <2> 		sub esi, edx
  6110 00004F64 668B06              <2> 		mov ax, [esi]
  6111 00004F67 66A3[7A4F0000]      <2> 		mov [cursorcache], ax
  6112 00004F6D B080                <2> 		mov al, 128
  6113 00004F6F B407                <2> 		mov ah, 7
  6114 00004F71 668906              <2> 		mov [esi], ax
  6115 00004F74 E87BD6FFFF          <2> 		call termcopy
  6116 00004F79 C3                  <2> 		ret
  6117 00004F7A 0000                <2> cursorcache db 0,0
  6118                              <2> 
  6119                              <2> PS2SET:
  6120 00004F7C B0A8                <2>   mov  al, 0xa8		; enable mouse port
  6121 00004F7E E664                <2>   out  0x64, al		; write to keyboardcontroller
  6122 00004F80 E801000000          <2>   call CHKPRT		; check if command is progressed (demand!)
  6123 00004F85 C3                  <2> ret
  6124                              <2> 
  6125                              <2> CHKPRT:
  6126 00004F86 66B96400            <2>   mov  cx, 100
  6127                              <2>  .again:
  6128 00004F8A E464                <2>   in   al, 0x64		; read from keyboardcontroller
  6129 00004F8C A802                <2>   test al, 2		; Check if input buffer is empty
  6130 00004F8E 7402                <2>   je .go
  6131 00004F90 E2F8                <2>   loop .again
  6132                              <2>  .go:
  6133 00004F92 C3                  <2> ret
  6134                              <2> 
  6135                              <2> WMOUS:
  6136 00004F93 B0D4                <2>   mov  al, 0xd4		; write to mouse device instead of to keyboard
  6137 00004F95 E664                <2>   out  0x64, al		; write to keyboardcontroller
  6138 00004F97 E8EAFFFFFF          <2>   call CHKPRT		; check if command is progressed (demand!)
  6139 00004F9C C3                  <2> ret
  6140                              <2> 
  6141                              <2> MBUFFUL:
  6142 00004F9D 66B96400            <2>   mov cx, 100
  6143                              <2>  .mn:
  6144 00004FA1 E464                <2>   in   al, 0x64		; read from keyboardcontroller
  6145 00004FA3 A820                <2>   test al, 0x20		; check if mouse output buffer is full
  6146 00004FA5 7402                <2>   jz  .mnn
  6147 00004FA7 E2F8                <2>   loop .mn
  6148                              <2>  .mnn:
  6149 00004FA9 C3                  <2> ret
  6150                              <2> 
  6151                              <2> 
  6152                              <2> ACTMOUS:
  6153 00004FAA E8E4FFFFFF          <2>   call WMOUS
  6154 00004FAF B0F4                <2>   mov  al, 0xf4 	; Command to activate mouse itselve (Stream mode)
  6155 00004FB1 E660                <2>   out  0x60, al		; write ps/2 controller output port (activate mouse)
  6156 00004FB3 E8CEFFFFFF          <2>   call CHKPRT		; check if command is progressed (demand!)
  6157 00004FB8 E801000000          <2>   call CHKMOUS		; check if a byte is available
  6158 00004FBD C3                  <2> ret
  6159                              <2> 
  6160                              <2> CHKMOUS:
  6161 00004FBE B300                <2>   mov  bl, 0
  6162 00004FC0 66B96400            <2>   mov cx, 100
  6163                              <2>  .vrd:
  6164 00004FC4 E464                <2>   in   al, 0x64		; read from keyboardcontroller
  6165 00004FC6 A801                <2>   test al, 1		; check if controller buffer (60h) has data
  6166 00004FC8 7504                <2>   jnz .yy
  6167 00004FCA E2F8                <2>   loop .vrd
  6168 00004FCC B301                <2>   mov  bl, 1
  6169                              <2>  .yy:
  6170 00004FCE C3                  <2> ret
  6171                              <2> 
  6172                              <2> GETB:
  6173                              <2>  .cagain:
  6174 00004FCF E8EAFFFFFF          <2>   call CHKMOUS		; check if a byte is available
  6175 00004FD4 08DB                <2>   or bl, bl
  6176 00004FD6 75F7                <2>   jnz .cagain
  6177 00004FD8 B0AD                <2>   mov  al, 0xad		; Disable Keyboard
  6178 00004FDA E664                <2>   out  0x64, al		; write to keyboardcontroller
  6179 00004FDC E8A5FFFFFF          <2>   call CHKPRT		; check if command is progressed (demand!)
  6180 00004FE1 6631C0              <2>   xor  ax, ax
  6181 00004FE4 E460                <2>   in   al, 0x60		; read ps/2 controller output port (mousebyte)
  6182 00004FE6 88C2                <2>   mov  dl, al
  6183 00004FE8 B0AE                <2>   mov  al, 0xae		; Enable Keyboard
  6184 00004FEA E664                <2>   out  0x64, al		; write to keyboardcontroller
  6185 00004FEC E895FFFFFF          <2>   call CHKPRT		; check if command is progressed (demand!)
  6186 00004FF1 88D0                <2>   mov  al, dl
  6187 00004FF3 C3                  <2> ret
  6188                              <2> 
  6189 00004FF4 00                  <2> LBUTTON db 0x00	;	Left   button status 1=PRESSED 0=RELEASED
  6190 00004FF5 00                  <2> RBUTTON db 0x00	;	Right  button status 1=PRESSED 0=RELEASED
  6191 00004FF6 00                  <2> MBUTTON db 0x00	;	Middle button status 1=PRESSED 0=RELEASED
  6192 00004FF7 00                  <2> XCOORD  db 0x00	;	the moved distance  (horizontal)
  6193 00004FF8 00                  <2> YCOORD  db 0x00	;	the moved distance  (vertical)
  6194                              <1> %endif
  6195                              <1> %include "source/drivers/sound/pcspkr.asm"
  6196                              <2> ;PC Speaker Drivers
  6197                              <2> PCSpeakerRAW:
  6198 00004FF9 60                  <2> 	pusha
  6199                              <2> nosoundrep:
  6200 00004FFA 8B35[53020000]      <2> 	mov esi, [soundpos]
  6201 00005000 31C9                <2> 	xor ecx, ecx
  6202 00005002 668B0D[51020000]    <2> 	mov cx, [soundrepititions]
  6203 00005009 6681F90000          <2> 	cmp cx, 0
  6204 0000500E 0F8548000000        <2> 	jne near donesetpitch
  6205 00005014 668B0E              <2> 	mov cx, [esi]
  6206 00005017 668B5E02            <2> 	mov bx, [esi + 2]
  6207 0000501B 66890D[51020000]    <2> 	mov [soundrepititions], cx
  6208 00005022 81C604000000        <2> 	add esi, 4
  6209 00005028 8935[53020000]      <2> 	mov [soundpos], esi
  6210 0000502E 3B35[57020000]      <2> 	cmp esi, [soundendpos]
  6211 00005034 7735                <2> 	ja stopsound
  6212 00005036 66813D[51020000]00- <2> 	cmp word [soundrepititions], 0
  6213 0000503E 00                  <2>
  6214 0000503F 74B9                <2> 	je nosoundrep
  6215 00005041 6681FB0000          <2> 	cmp bx, 0
  6216 00005046 740F                <2> 	je nosoundplay
  6217 00005048 E840000000          <2> 	call setpitch
  6218 0000504D E849000000          <2> 	call startsound
  6219 00005052 E905000000          <2> 	jmp donesetpitch
  6220                              <2> nosoundplay:
  6221 00005057 E846000000          <2> 	call killsound
  6222                              <2> donesetpitch:
  6223 0000505C 6649                <2> 	dec cx
  6224 0000505E 66890D[51020000]    <2> 	mov [soundrepititions], cx
  6225 00005065 61                  <2> 	popa
  6226 00005066 E925B2FFFF          <2> 	jmp timerinterrupt
  6227                              <2> stopsound:
  6228 0000506B 31C0                <2> 	xor eax, eax
  6229 0000506D 66A3[51020000]      <2> 	mov [soundrepititions], ax
  6230 00005073 A2[50020000]        <2> 	mov [soundon], al
  6231 00005078 A3[53020000]        <2> 	mov [soundpos], eax
  6232 0000507D A3[57020000]        <2> 	mov [soundendpos], eax
  6233 00005082 E81B000000          <2> 	call killsound
  6234 00005087 61                  <2> 	popa
  6235 00005088 E903B2FFFF          <2> 	jmp timerinterrupt
  6236                              <2> 
  6237                              <2> 
  6238                              <2> setpitch:
  6239 0000508D B0B6                <2> 	mov al, 0xB6
  6240 0000508F E643                <2> 	out 0x43, al
  6241 00005091 6689D8              <2> 	mov ax, bx
  6242 00005094 E642                <2> 	out 0x42, al
  6243 00005096 88E0                <2> 	mov al, ah
  6244 00005098 E642                <2> 	out 0x42, al
  6245 0000509A C3                  <2> 	ret
  6246                              <2> startsound:
  6247 0000509B E461                <2> 	in al, 0x61
  6248 0000509D 0C03                <2> 	or al, 3
  6249 0000509F E661                <2> 	out 0x61, al
  6250 000050A1 C3                  <2> 	ret
  6251                              <2> killsound:
  6252 000050A2 E461                <2> 	in al, 0x61
  6253 000050A4 24FC                <2> 	and al, 0xFC
  6254 000050A6 E661                <2> 	out 0x61, al
  6255 000050A8 C3                  <2> 	ret
  6256                              <2> 	
  6257                              <1> %ifdef sound.included
  6258                              <1> 	%include "source/drivers/sound/sblaster.asm"
  6259                              <2> ;Sound Blaster Drivers
  6260                              <2> sblaster:
  6261                              <2> .init:
  6262 000050A9 E842010000          <2> 		call ResetDSP			;If the system is Sound Blaster 16 compatible, reset the DSP
  6263 000050AE A2[45520000]        <2> 		mov [SoundBlaster], al	;if the reset worked, show an available card
  6264 000050B3 3C00                <2> 		cmp al, 0
  6265 000050B5 740E                <2> 		je .noinit
  6266 000050B7 B0D1                <2> 		mov	al,0D1h 		; turn speaker(s) on
  6267 000050B9 E866010000          <2> 		call WriteDSP
  6268 000050BE B088                <2> 		mov	al,088h 		; Left = 8, Right = 8 (15-highest)
  6269 000050C0 E81C010000          <2> 		call MstrVol 		; L = Hi Nibble, R = Lo Nibble
  6270                              <2> .noinit:
  6271 000050C5 C3                  <2> 		ret
  6272                              <2> sblastercont: ;this function goes to the next available portion of a sound, if necessary
  6273 000050C6 66813D[33520000]00- <2> 	cmp word [Length0], 0
  6274 000050CE 00                  <2>
  6275 000050CF 0F8447B2FFFF        <2> 	je near handled2
  6276 000050D5 668B3D[33520000]    <2> 	mov di, [Length0]
  6277 000050DC 664F                <2> 	dec di
  6278 000050DE 66893D[33520000]    <2> 	mov [Length0], di
  6279 000050E5 A1[37520000]        <2> 	mov eax, [NextMemLoc]
  6280 000050EA A3[3B520000]        <2> 	mov [MemLoc], eax
  6281 000050EF 31C9                <2> 	xor ecx, ecx
  6282 000050F1 66B9FFFF            <2> 	mov cx, 0xFFFF
  6283 000050F5 66890D[35520000]    <2> 	mov [Length1], cx
  6284 000050FC 01C8                <2> 	add eax, ecx
  6285 000050FE A3[37520000]        <2> 	mov [NextMemLoc], eax
  6286 00005103 E805000000          <2> 	call DMAPlay
  6287 00005108 E90FB2FFFF          <2> 	jmp handled2 ;it is part of an interrupt routine
  6288                              <2> 
  6289                              <2> DMAPlay:    ;uses eax ebx edx
  6290 0000510D 66FF0D[35520000]    <2> 		dec	word [Length1]
  6291 00005114 C605[3F520000]00    <2> 		mov	byte [Page1],00h
  6292                              <2> 
  6293 0000511B B005                <2> 		mov	al,(Channel+4)
  6294 0000511D 66BA0A00            <2> 		mov	dx,0Ah
  6295 00005121 EE                  <2> 		out	dx,al
  6296 00005122 30C0                <2> 		xor	al,al
  6297 00005124 66BA0C00            <2> 		mov	dx,0Ch
  6298 00005128 EE                  <2> 		out	dx,al
  6299 00005129 B049                <2> 		mov	al,ModeReg
  6300 0000512B 66BA0B00            <2> 		mov	dx,0Bh
  6301 0000512F EE                  <2> 		out	dx,al
  6302 00005130 A1[3B520000]        <2> 		mov	eax,[MemLoc]
  6303 00005135 66BA0200            <2> 		mov	dx,AddPort
  6304 00005139 EE                  <2> 		out	dx,al
  6305 0000513A 86C4                <2> 		xchg al,ah
  6306 0000513C EE                  <2> 		out	dx,al
  6307 0000513D A1[3B520000]        <2> 		mov	eax,[MemLoc]
  6308 00005142 89C2                <2> 		mov	edx,eax
  6309 00005144 2500000100          <2> 		and	eax,65536
  6310 00005149 7406                <2> 		jz	MemLocN1
  6311 0000514B FE05[3F520000]      <2> 		inc	byte [Page1]
  6312                              <2> MemLocN1:
  6313 00005151 89D0                <2> 		mov	eax,edx
  6314 00005153 2500000200          <2> 		and	eax,131072
  6315 00005158 7407                <2> 		jz	MemLocN2
  6316 0000515A 8005[3F520000]02    <2> 		add	byte [Page1],02
  6317                              <2> MemLocN2:
  6318 00005161 89D0                <2> 		mov	eax,edx
  6319 00005163 2500000400          <2> 		and	eax,262144
  6320 00005168 7407                <2> 		jz	MemLocN3
  6321 0000516A 8005[3F520000]04    <2> 		add	byte [Page1],04
  6322                              <2> MemLocN3:
  6323 00005171 89D0                <2> 		mov	eax,edx
  6324 00005173 2500000800          <2> 		and	eax,524288
  6325 00005178 7407                <2> 		jz	MemLocN4
  6326 0000517A 8005[3F520000]08    <2> 		add	byte [Page1],08
  6327                              <2> MemLocN4:
  6328 00005181 66BA8300            <2> 		mov	dx,PgPort
  6329 00005185 A0[3F520000]        <2> 		mov	al,[Page1]
  6330 0000518A EE                  <2> 		out	dx,al
  6331 0000518B 66BA0300            <2> 		mov	dx,LenPort
  6332 0000518F 66A1[35520000]      <2> 		mov	ax,[Length1]
  6333 00005195 EE                  <2> 		out	dx,al
  6334 00005196 86C4                <2> 		xchg al,ah
  6335 00005198 EE                  <2> 		out	dx,al
  6336 00005199 66BA0A00            <2> 		mov	dx,0Ah
  6337 0000519D B001                <2> 		mov	al,Channel
  6338 0000519F EE                  <2> 		out	dx,al
  6339                              <2> 		
  6340 000051A0 B040                <2> 		mov	al,40h
  6341 000051A2 E87D000000          <2> 		call WriteDSP
  6342 000051A7 31D2                <2> 		xor	edx,edx
  6343 000051A9 B840420F00          <2> 		mov	eax,1000000
  6344 000051AE 8B1D[40520000]      <2> 		mov	ebx,[Freq]
  6345 000051B4 F7F3                <2> 		div	ebx
  6346 000051B6 89C3                <2> 		mov	ebx,eax
  6347 000051B8 B800010000          <2> 		mov	eax,256
  6348 000051BD 29D8                <2> 		sub	eax,ebx
  6349 000051BF E860000000          <2> 		call WriteDSP
  6350 000051C4 A0[44520000]        <2> 		mov	al,[WAVEMode]	;write the mode
  6351 000051C9 E856000000          <2> 		call WriteDSP
  6352 000051CE 66A1[35520000]      <2> 		mov	ax,[Length1]
  6353 000051D4 E84B000000          <2> 		call WriteDSP
  6354 000051D9 86C4                <2> 		xchg al,ah
  6355 000051DB E844000000          <2> 		call WriteDSP
  6356 000051E0 C3                  <2> 		ret
  6357                              <2> 
  6358                              <2> MstrVol:    ;uses ax dx
  6359 000051E1 6650                <2> 	   push ax
  6360 000051E3 66BA2402            <2> 	   mov	dx,(BasePort+4)
  6361 000051E7 B022                <2> 	   mov	al,22h
  6362 000051E9 EE                  <2> 	   out	dx,al
  6363 000051EA 6658                <2> 	   pop	ax
  6364 000051EC 6642                <2> 	   inc	dx
  6365 000051EE EE                  <2> 	   out	dx,al
  6366 000051EF C3                  <2> 	   ret
  6367                              <2> 	   
  6368                              <2> ResetDSP:   ; uses cx dx
  6369 000051F0 66BA2602            <2> 			mov	dx,(BasePort+6)
  6370 000051F4 B001                <2> 			mov	al,01
  6371 000051F6 EE                  <2> 			out	dx,al
  6372 000051F7 66B93200            <2> 			mov	cx,50
  6373 000051FB EC                  <2> WaitIt1:	in	al,dx
  6374 000051FC E2FD                <2> 			loop WaitIt1
  6375 000051FE 30C0                <2> 			xor	al,al
  6376 00005200 EE                  <2> 			out	dx,al
  6377 00005201 66B93200            <2> 			mov	cx,50
  6378 00005205 EC                  <2> WaitIt2:	in	al,dx
  6379 00005206 E2FD                <2> 			loop WaitIt2
  6380 00005208 B4FF                <2> 			mov	ah,0FFh 		; part of Return Code
  6381 0000520A 66BA2E02            <2> 			mov	dx,(BasePort+14)
  6382 0000520E EC                  <2> 			in	al,dx
  6383 0000520F 2480                <2> 			and	al,80h
  6384 00005211 3C80                <2> 			cmp	al,80h
  6385 00005213 750C                <2> 			jne	ResetErr
  6386 00005215 66BA2A02            <2> 			mov	dx,(BasePort+10)
  6387 00005219 EC                  <2> 			in	al,dx
  6388 0000521A 3CAA                <2> 			cmp	al,0AAh
  6389 0000521C 7503                <2> 			jne	ResetErr
  6390 0000521E B001                <2> ResetOK:	mov al, 1		; return ax = 0 if reset ok
  6391 00005220 C3                  <2> 			ret
  6392 00005221 30C0                <2> ResetErr:	xor al, al
  6393 00005223 C3                  <2> 			ret
  6394                              <2> 
  6395                              <2> WriteDSP:   ;uses ax dx
  6396 00005224 6650                <2> 		push ax
  6397 00005226 66BA2C02            <2> 		mov	dx,(BasePort+12)
  6398 0000522A EC                  <2> WaitIt:	in	al,dx
  6399 0000522B 2480                <2> 		and	al,80h
  6400 0000522D 75FB                <2> 		jnz	WaitIt
  6401 0000522F 6658                <2> 		pop	ax
  6402 00005231 EE                  <2> 		out	dx,al
  6403 00005232 C3                  <2> 		ret
  6404                              <2> 
  6405 00005233 0000                <2> Length0 dw	0
  6406 00005235 0000                <2> Length1	dw  0
  6407 00005237 00000000            <2> NextMemLoc dd 0
  6408 0000523B 00000000            <2> MemLoc	dd  0
  6409 0000523F 00                  <2> Page1	db  0
  6410 00005240 00000000            <2> Freq	dd	0
  6411 00005244 14                  <2> WAVEMode db 14h
  6412                              <2> PgPort	equ 83h
  6413                              <2> AddPort	equ 02h
  6414                              <2> LenPort	equ 03h
  6415                              <2> ModeReg	equ 49h
  6416                              <2> Channel	equ 01h
  6417                              <2> BasePort	equ 220h
  6418 00005245 00                  <2> SoundBlaster	db 0
  6419                              <1> %endif
  6420                              <1> %ifdef rtl8139.included
  6421                              <1> 	%include "source/drivers/network/rtl8139.asm"
  6422                              <1> %endif
  6423                              <1> %include "source/drivers/input/keyboard.asm"
  6424 00005246 00                  <2> specialkey db 0
  6425 00005247 00                  <2> charregion db 0
  6426                              <2> waitforinput:		;;this is basically the idle process
  6427                              <2> 					;;this halts the cpu for a small amount of time and then sees if there was a keypress
  6428                              <2> 					;;this lets the cpu stay at close to 0% instead of 100%
  6429 00005248 6631C0              <2> 	xor ax, ax
  6430 0000524B A0[97590000]        <2> 	mov al, [threadson]
  6431 00005250 8825[97590000]      <2> 	mov [threadson], ah
  6432 00005256 FB                  <2> 	sti
  6433 00005257 F4                  <2> 	hlt
  6434 00005258 A2[97590000]        <2> 	mov [threadson], al
  6435 0000525D 3A25[7F230000]      <2> 	cmp ah, [trans]
  6436 00005263 7401                <2> 	je getkey
  6437 00005265 C3                  <2> 	ret
  6438                              <2> getkey:
  6439 00005266 31C0                <2> 		xor eax, eax
  6440 00005268 A2[46520000]        <2> 		mov [specialkey], al
  6441 0000526D 66A3[7D230000]      <2> 		mov [lastkey], ax
  6442 00005273 E464                <2> 		in al, 64h ; Status
  6443                              <2> %ifdef gui.included
  6444 00005275 A820                <2> 		test al, 20h ; PS2-Mouse?
  6445 00005277 0F85C3FAFFFF        <2> 		jnz near moused
  6446                              <2> %endif
  6447 0000527D A801                <2> 		test al, 1 
  6448 0000527F 74C7                <2> 		jz waitforinput ; if output buffer full or no keypress, jump to idle process (only works when it is jz guistartin2, use jz guistartin to disable)
  6449                              <2> 	calckey:
  6450 00005281 E460                <2> 		in al, 60h
  6451 00005283 88C4                <2> 		mov ah, al
  6452 00005285 30C0                <2> 		xor al, al
  6453 00005287 8825[7E230000]      <2> 		mov [lastkey + 1], ah
  6454 0000528D 88E0                <2> 		mov al, ah
  6455 0000528F BF[28540000]        <2> 		mov edi, scancode
  6456                              <2> 	searchscan: 
  6457 00005294 3C3A                <2> 		cmp al, 3Ah
  6458 00005296 731A                <2> 		jae scanother
  6459 00005298 30E4                <2> 		xor ah, ah
  6460 0000529A C0E002              <2> 		shl al, 2
  6461 0000529D 01C7                <2> 		add edi, eax
  6462 0000529F D0E8                <2> 		shr al, 1
  6463 000052A1 01C7                <2> 		add edi, eax
  6464 000052A3 D0E8                <2> 		shr al, 1
  6465 000052A5 8A27                <2> 		mov ah, [edi]
  6466 000052A7 80FC00              <2> 		cmp ah, 0
  6467 000052AA 7406                <2> 		je scanother
  6468 000052AC E9D7000000          <2> 		jmp scanfound
  6469 000052B1 00                  <2> uppercase db 0
  6470                              <2> scanother:
  6471 000052B2 88C4                <2> 		mov ah, al
  6472 000052B4 30C0                <2> 		xor al, al
  6473 000052B6 66A3[7D230000]      <2> 		mov [lastkey], ax
  6474 000052BC 80FCE0              <2> 		cmp ah, 0E0h
  6475 000052BF 0F847D000000        <2> 		je near getkeyspecial
  6476 000052C5 803D[46520000]E0    <2> 		cmp byte [specialkey], 0xE0
  6477 000052CC 752B                <2> 		jne nospecialkey
  6478 000052CE 80FC38              <2> 		cmp ah, 38h
  6479 000052D1 0F84A0000000        <2> 		je near alton
  6480 000052D7 80FCB8              <2> 		cmp ah, 0B8h
  6481 000052DA 0F849F000000        <2> 		je near altoff
  6482 000052E0 80FC1D              <2> 		cmp ah, 1Dh
  6483 000052E3 0F847E000000        <2> 		je near ctron
  6484 000052E9 80FC9D              <2> 		cmp ah, 9Dh
  6485 000052EC 0F847D000000        <2> 		je near ctroff
  6486 000052F2 66A3[7D230000]      <2> 		mov [lastkey], ax
  6487 000052F8 C3                  <2> 		ret
  6488                              <2> nospecialkey:
  6489 000052F9 80FC2A              <2> 		cmp ah, 2Ah
  6490 000052FC 0F8455000000        <2> 		je near shifton
  6491 00005302 80FC36              <2> 		cmp ah, 36h
  6492 00005305 0F844C000000        <2> 		je near shifton
  6493 0000530B 80FC1C              <2> 		cmp ah, 1Ch
  6494 0000530E 0F8473000000        <2> 		je near entdown
  6495 00005314 80FCAA              <2> 		cmp ah, 0AAh
  6496 00005317 0F8442000000        <2> 		je near shiftoff
  6497 0000531D 80FCB6              <2> 		cmp ah, 0B6h
  6498 00005320 0F8439000000        <2> 		je near shiftoff
  6499 00005326 80FC3A              <2> 		cmp ah, 3Ah
  6500 00005329 0F84A5000000        <2> 		je near capslock
  6501 0000532F 80FC45              <2> 		cmp ah, 0x45
  6502 00005332 0F84AD000000        <2> 		je near numlock
  6503 00005338 80FC46              <2> 		cmp ah, 0x46
  6504 0000533B 0F84BC000000        <2> 		je near scrolllock
  6505 00005341 C3                  <2> 		ret
  6506                              <2> 	getkeyspecial:
  6507 00005342 C605[46520000]E0    <2> 		mov byte [specialkey], 0xE0
  6508 00005349 E933FFFFFF          <2> 		jmp calckey
  6509                              <2> 	shift:
  6510 0000534E A0[B1520000]        <2> 		mov al, [uppercase]
  6511 00005353 3C01                <2> 		cmp al, 1
  6512 00005355 7308                <2> 		jae shiftoff
  6513                              <2> 	shifton:
  6514 00005357 C605[B1520000]01    <2> 		mov byte [uppercase], 1
  6515 0000535E C3                  <2> 		ret
  6516                              <2> 	shiftoff:
  6517 0000535F C605[B1520000]00    <2> 		mov byte [uppercase], 0
  6518 00005366 C3                  <2> 		ret
  6519                              <2> 	ctron:
  6520 00005367 C605[D3530000]01    <2> 		mov byte [ctrkey], 1
  6521 0000536E C3                  <2> 		ret
  6522                              <2> 	ctroff:
  6523 0000536F C605[D3530000]00    <2> 		mov byte [ctrkey], 0
  6524 00005376 C3                  <2> 		ret
  6525                              <2> 	alton:
  6526 00005377 C605[D2530000]01    <2> 		mov byte [altkey], 1
  6527 0000537E C3                  <2> 		ret
  6528                              <2> 	altoff:
  6529 0000537F C605[D2530000]00    <2> 		mov byte [altkey], 0
  6530 00005386 C3                  <2> 		ret
  6531                              <2> 	entdown:
  6532 00005387 C3                  <2> 		ret
  6533                              <2> 	scanfound:
  6534 00005388 81C704000000        <2> 		add edi, 4
  6535 0000538E 803D[D3530000]01    <2> 		cmp byte [ctrkey], 1
  6536 00005395 731B                <2> 		jae altin
  6537 00005397 81EF04000000        <2> 		sub edi, 4
  6538 0000539D 81C702000000        <2> 		add edi, 2
  6539 000053A3 803D[D2530000]01    <2> 		cmp byte [altkey], 1
  6540 000053AA 7306                <2> 		jae altin
  6541 000053AC 81EF02000000        <2> 		sub edi, 2
  6542                              <2> altin:
  6543 000053B2 81C701000000        <2> 		add edi, 1
  6544 000053B8 803D[B1520000]01    <2> 		cmp byte [uppercase], 1
  6545 000053BF 7306                <2> 		jae uppercaseon
  6546 000053C1 81EF01000000        <2> 		sub edi, 1
  6547                              <2> uppercaseon:
  6548 000053C7 8A07                <2> 		mov al,[edi]
  6549 000053C9 A2[7D230000]        <2> 		mov [lastkey], al
  6550 000053CE C3                  <2> 		ret
  6551                              <2> 		
  6552 000053CF 00                  <2> keyboardstatus db 0
  6553 000053D0 00                  <2> numlockstatus db 0
  6554 000053D1 00                  <2> scrolllockstatus db 0
  6555 000053D2 00                  <2> altkey db 0
  6556 000053D3 00                  <2> ctrkey db 0
  6557                              <2> 	capslock:
  6558 000053D4 8035[CF530000]04    <2> 		xor byte [keyboardstatus], 00000100b
  6559 000053DB E835000000          <2> 		call updatekblights
  6560 000053E0 E969FFFFFF          <2> 		jmp shift
  6561                              <2> 		
  6562                              <2> 	numlock:
  6563 000053E5 8035[CF530000]02    <2> 		xor byte [keyboardstatus], 00000010b
  6564 000053EC 8035[D0530000]01    <2> 		xor byte [numlockstatus], 1
  6565 000053F3 E81D000000          <2> 		call updatekblights
  6566 000053F8 E969FEFFFF          <2> 		jmp getkey
  6567                              <2> 	
  6568                              <2> 	scrolllock:
  6569 000053FD 8035[CF530000]01    <2> 		xor byte [keyboardstatus], 00000001b
  6570 00005404 8035[D1530000]01    <2> 		xor byte [scrolllockstatus], 1
  6571 0000540B E805000000          <2> 		call updatekblights
  6572 00005410 E951FEFFFF          <2> 		jmp getkey
  6573                              <2> 		
  6574                              <2> 	updatekblights:
  6575 00005415 B0ED                <2> 		mov al, 0xED
  6576 00005417 66BA6000            <2> 		mov dx, 0x60
  6577 0000541B EE                  <2> 		out dx, al
  6578                              <2> 	chkkbdack:
  6579 0000541C EC                  <2> 		in al, dx
  6580 0000541D 3CFA                <2> 		cmp al, 0xFA
  6581 0000541F 75FB                <2> 		jne chkkbdack
  6582 00005421 A0[CF530000]        <2> 		mov al, [keyboardstatus]
  6583 00005426 EE                  <2> 		out dx, al
  6584 00005427 C3                  <2> 		ret
  6585                              <2> 		
  6586                              <2> scancode:
  6587 00005428 000000000000        <2> 	db 0,0,0,0,0,0				;0h
  6588 0000542E 000000000000        <2> 	db 0,0,0,0,0,0				;1h
  6589 00005434 3121AD000000        <2> 	db '1','!',0xAD,0,0,0		;2h
  6590 0000543A 3240FDFB0000        <2> 	db '2','@',0xFD,0xFB,0,0	;3h
  6591 00005440 332300000000        <2> 	db '3','#',0,0,0,0			;4h
  6592 00005446 34249B9C0000        <2> 	db '4','$',0x9B,0x9C,0,0	;5h
  6593 0000544C 3525EE000000        <2> 	db '5','%',0xEE,0,0,0		;6h
  6594 00005452 365EAC000000        <2> 	db '6','^',0xAC,0,0,0		;7h
  6595 00005458 3726AB000000        <2> 	db '7','&',0xAB,0,0,0		;8h
  6596 0000545E 382AEC000000        <2> 	db '8','*',0xEC,0,0,0		;9h
  6597 00005464 392800000000        <2> 	db '9','(',0,0,0,0			;0Ah
  6598 0000546A 302900000000        <2> 	db '0',')',0,0,0,0			;0Bh
  6599 00005470 2D5F9DF10000        <2> 	db '-','_',0x9D,0xF1,0,0	;0Ch
  6600 00005476 3D2BF7F60000        <2> 	db '=','+',0xF7,0xF6,0,0	;0Dh
  6601 0000547C 080800000000        <2> 	db 8,8,0,0,0,0				;0Eh
  6602 00005482 000000000000        <2> 	db 0,0,0,0,0,0				;0Fh
  6603 00005488 7151848E0000        <2> 	db 'q','Q',0x84,0x8E,0,0	;10h
  6604 0000548E 7757868F0000        <2> 	db 'w','W',0x86,0x8F,0,0	;11h
  6605 00005494 65458290EE45        <2> 	db 'e','E',0x82,0x90,0xEE,'E'	;12h
  6606 0000549A 7252898A7050        <2> 	db 'r','R',0x89,0x8A,'p','P'	;13h
  6607 000054A0 7454819AE754        <2> 	db 't','T',0x81,0x9A,0xE7,'T'	;14h
  6608 000054A6 795998007559        <2> 	db 'y','Y',0x98,0,'u','Y'	;15h
  6609 000054AC 7555A3970000        <2> 	db 'u','U',0xA3,0x97,0,0		;16h
  6610 000054B2 6949A18D6949        <2> 	db 'i','I',0xA1,0x8D,'i','I'	;17h
  6611 000054B8 6F4FA29577EA        <2> 	db 'o','O',0xA2,0x95,'w',0xEA	;18h
  6612 000054BE 70509499E3EF        <2> 	db 'p','P',0x94,0x99,0xE3,0xEF	;19h
  6613 000054C4 5B7BF4000000        <2> 	db '[','{',0xF4,0,0,0		;1Ah
  6614 000054CA 5D7DF5000000        <2> 	db ']','}',0xF5,0,0,0		;1Bh
  6615 000054D0 000000000000        <2> 	db 0,0,0,0,0,0				;1Ch
  6616 000054D6 000000000000        <2> 	db 0,0,0,0,0,0				;1Dh
  6617 000054DC 6141A085E041        <2> 	db 'a','A',0xA0,133,224,'A'	;1Eh
  6618 000054E2 73531500E5E4        <2> 	db 's','S',21,0,229,228		;1Fh
  6619 000054E8 6444F800EB7F        <2> 	db 'd','D',0xF8,0,235,127	;20h
  6620 000054EE 66469F00EDE8        <2> 	db 'f','F',159,0,237,232	;21h
  6621 000054F4 6747000079E2        <2> 	db 'g','G',0,0,'y',226		;22h
  6622 000054FA 684800006E48        <2> 	db 'h','H',0,0,'n','H'		;23h
  6623 00005500 6A4A00000000        <2> 	db 'j','J',0,0,0,0			;24h
  6624 00005506 6B4B00006B4B        <2> 	db 'k','K',0,0,'k','K'		;25h
  6625 0000550C 6C4C0000E9E9        <2> 	db 'l','L',0,0,233,233		;26h
  6626 00005512 3B3A14000000        <2> 	db ';',':',20,0,0,0			;27h
  6627 00005518 272200000000        <2> 	db 27h,22h,0,0,0,0			;28h
  6628 0000551E 607E00000000        <2> 	db '`','~',0,0,0,0			;29h
  6629 00005524 000000000000        <2> 	db 0,0,0,0,0,0				;2Ah
  6630 0000552A 5C7CAAB30000        <2> 	db 92,'|',170,179,0,0		;2Bh
  6631 00005530 7A5A91927A5A        <2> 	db 'z','Z',145,146,'z','Z'	;2Ch
  6632 00005536 7858000000F0        <2> 	db 'x','X',0,0,0,240		;2Dh
  6633 0000553C 634387800000        <2> 	db 'c','C',135,128,0,0		;2Eh
  6634 00005542 765600000000        <2> 	db 'v','V',0,0,0,0			;2Fh
  6635 00005548 62420000E142        <2> 	db 'b','B',0,0,225,'B'		;30h
  6636 0000554E 6E4EA4A5764E        <2> 	db 'n','N',0xA4,0xA5,'v','N'	;31h
  6637 00005554 6D4D0000E64D        <2> 	db 'm','M',0,0,230,'M'		;32h
  6638 0000555A 2C3CF3AE0000        <2> 	db ',','<',0xF3,174,0,0		;33h
  6639 00005560 2E3EF2AF0000        <2> 	db '.','>',0xF2,175,0,0		;34h
  6640 00005566 2F3FA8000000        <2> 	db '/','?',0xA8,0,0,0		;35h
  6641 0000556C 000000000000        <2> 	db 0,0,0,0,0,0				;36h
  6642 00005572 000000000000        <2> 	db 0,0,0,0,0,0				;37h
  6643 00005578 000000000000        <2> 	db 0,0,0,0,0,0				;38h
  6644 0000557E 202000000000        <2> 	db ' ',' ',0,0,0,0			;39h
  6645                              <2> noscan:
  6646                              <2> 
  6647                              <1> ;drivers will soon be handled intelligently
  6648                              <1> ;every driver's source will be scanned for a .init function
  6649                              <1> ;that will be called and if it returns 0
  6650                              <1> ;the hardware was found and the driver initialized properly
  6651                              <1> initialize:
  6652                              <1> ;Now I will initialise the interrupt controllers and remap irq's
  6653 00005584 E814000000          <1> 	call .pic
  6654 00005589 E83C000000          <1> 	call .pit
  6655 0000558E E85E000000          <1> 	call .fpu
  6656 00005593 31C0                <1> 	xor eax, eax
  6657 00005595 31C9                <1> 	xor ecx, ecx
  6658                              <1> %ifdef sound.included
  6659 00005597 E80DFBFFFF          <1> 	call sblaster.init
  6660                              <1> %endif
  6661 0000559C C3                  <1> 	ret
  6662                              <1> 	
  6663                              <1> .pic:
  6664 0000559D B011                <1> 	mov al, 0x11
  6665 0000559F E620                <1> 	out 0x20, al
  6666 000055A1 E6A0                <1> 	out 0xA0, al
  6667 000055A3 B040                <1> 	mov al, 0x40	;interrupt for master
  6668 000055A5 E621                <1> 	out 0x21, al
  6669 000055A7 B048                <1> 	mov al, 0x48	;interrupt for slave
  6670 000055A9 E6A1                <1> 	out 0xA1, al
  6671 000055AB B004                <1> 	mov al, 4
  6672 000055AD E621                <1> 	out 0x21, al
  6673 000055AF B002                <1> 	mov al, 2
  6674 000055B1 E6A1                <1> 	out 0xA1, al
  6675 000055B3 B001                <1> 	mov al, 0x1
  6676 000055B5 E621                <1> 	out 0x21, al
  6677 000055B7 B001                <1> 	mov al, 0x1
  6678 000055B9 E6A1                <1> 	out 0xA1, al
  6679                              <1> 	;masks are set to zero so as not to mask
  6680 000055BB 30C0                <1> 	xor al, al
  6681 000055BD E621                <1> 	out 0x21, al
  6682 000055BF 30C0                <1> 	xor al, al
  6683 000055C1 E6A1                <1> 	out 0xA1, al
  6684 000055C3 B020                <1> 	mov al, 0x20
  6685 000055C5 E6A0                <1> 	out 0xA0, al
  6686 000055C7 E620                <1> 	out 0x20, al
  6687 000055C9 C3                  <1> 	ret
  6688                              <1> .pit:
  6689                              <1> 	;initialize the PIT
  6690 000055CA 66A1[42020000]      <1> 	mov ax, [pitdiv] ;this is the divider for the PIT
  6691 000055D0 E640                <1> 	out 0x40, al
  6692 000055D2 66C1C008            <1> 	rol ax, 8
  6693 000055D6 E640                <1> 	out 0x40, al
  6694                              <1> 	;enable rtc interrupt
  6695 000055D8 B00B                <1> 	mov al, 0xB
  6696 000055DA E670                <1> 	out 0x70, al
  6697 000055DC 66C1C008            <1> 	rol ax, 8
  6698 000055E0 E471                <1> 	in al, 0x71
  6699 000055E2 66C1C008            <1> 	rol ax, 8
  6700 000055E6 E670                <1> 	out 0x70, al
  6701 000055E8 66C1C008            <1> 	rol ax, 8
  6702 000055EC 0C40                <1> 	or al, 0x40
  6703 000055EE E671                <1> 	out 0x71, al
  6704 000055F0 C3                  <1> 	ret
  6705                              <1> .fpu:
  6706                              <1> 	;And now to initialize the fpu
  6707 000055F1 0F20E0              <1> 	mov eax, cr4
  6708 000055F4 0D00020000          <1> 	or eax, 0x200
  6709 000055F9 0F22E0              <1> 	mov cr4, eax
  6710 000055FC B87F0B0000          <1> 	mov eax, 0xB7F
  6711 00005601 50                  <1> 	push eax
  6712 00005602 D92C24              <1> 	fldcw [esp]
  6713 00005605 58                  <1> 	pop eax
  6714 00005606 C3                  <1> 	ret
  6715                              <1> 	
  6716                                      %include "source/pci.asm"
  6717 00005607 00                  <1> pcibus		db 0
  6718 00005608 00                  <1> pcidevice	db 0
  6719 00005609 00                  <1> pcifunction	db 0
  6720 0000560A 00                  <1> pciregister	db 0
  6721 0000560B 00                  <1> pcireqtype db 0
  6722                              <1> 
  6723                              <1> getpciport:
  6724 0000560C B001                <1> 	mov al, 1
  6725 0000560E A2[0B560000]        <1> 	mov [pcireqtype], al
  6726 00005613 E916000000          <1> 	jmp searchpci
  6727                              <1> pcidump:
  6728 00005618 31C0                <1> 	xor eax, eax
  6729 0000561A A2[09560000]        <1> 	mov [pcifunction], al
  6730 0000561F A2[07560000]        <1> 	mov [pcibus], al
  6731 00005624 A2[08560000]        <1> 	mov [pcidevice], al
  6732 00005629 A2[0B560000]        <1> 	mov [pcireqtype], al
  6733                              <1> searchpci:		;;return in ebx, start X in pciX
  6734 0000562E 30C0                <1> 	xor al, al
  6735 00005630 A2[0A560000]        <1> 	mov [pciregister], al
  6736 00005635 E855010000          <1> 	call getpciaddr
  6737 0000563A BAF80C0000          <1> 	mov edx, 0xCF8
  6738 0000563F EF                  <1> 	out dx, eax	;;request pci config
  6739 00005640 BAFC0C0000          <1> 	mov edx, 0xCFC
  6740 00005645 ED                  <1> 	in eax, dx 	;;read in pci config
  6741 00005646 3D0000FFFF          <1> 	cmp eax, 0xFFFF0000
  6742 0000564B 0F8237000000        <1> 	jb near checkpcidevice
  6743                              <1> searchpciret:
  6744                              <1> nextpcidevice:
  6745 00005651 30C0                <1> 	xor al, al
  6746 00005653 A2[09560000]        <1> 	mov [pcifunction], al
  6747 00005658 A0[08560000]        <1> 	mov al, [pcidevice]
  6748 0000565D 3C1F                <1> 	cmp al, 11111b
  6749 0000565F 0F83C1000000        <1> 	jae near nextpcibus
  6750 00005665 FEC0                <1> 	inc al
  6751 00005667 A2[08560000]        <1> 	mov [pcidevice], al
  6752 0000566C EBC0                <1> 	jmp searchpci
  6753 0000566E A0[09560000]        <1> 	mov al, [pcifunction]
  6754 00005673 3C07                <1> 	cmp al, 111b
  6755 00005675 0F83D6FFFFFF        <1> 	jae near nextpcidevice
  6756 0000567B FEC0                <1> 	inc al
  6757 0000567D A2[09560000]        <1> 	mov [pcifunction], al
  6758 00005682 EBAA                <1> 	jmp searchpci
  6759 00005684 00000000            <1> pcitype: db 0,0,0,0
  6760                              <1> checkpcidevice:
  6761 00005688 30C0                <1> 	xor al, al
  6762 0000568A 3805[0B560000]      <1> 	cmp [pcireqtype], al
  6763 00005690 0F842B000000        <1> 	je near dumppcidevice
  6764 00005696 B008                <1> 	mov al, 0x08
  6765 00005698 A2[0A560000]        <1> 	mov [pciregister], al	;;class code, subclass, revision id
  6766 0000569D E8ED000000          <1> 	call getpciaddr
  6767 000056A2 BAF80C0000          <1> 	mov edx, 0xCF8
  6768 000056A7 EF                  <1> 	out dx, eax
  6769 000056A8 BAFC0C0000          <1> 	mov edx, 0xCFC
  6770 000056AD ED                  <1> 	in eax, dx
  6771 000056AE C1C008              <1> 	rol eax, 8
  6772 000056B1 8A1D[84560000]      <1> 	mov bl, [pcitype]
  6773 000056B7 38D8                <1> 	cmp al, bl
  6774 000056B9 0F8486000000        <1> 	je near foundpciaddr
  6775 000056BF EB90                <1> 	jmp searchpciret
  6776                              <1> dumppcidevice:
  6777 000056C1 30C0                <1> 	xor al, al
  6778 000056C3 A2[0A560000]        <1> 	mov [pciregister], al
  6779 000056C8 E8C2000000          <1> 	call getpciaddr
  6780 000056CD 89C1                <1> 	mov ecx, eax
  6781 000056CF C605[A42E0000]05    <1> 	mov byte [firsthexshown], 5
  6782 000056D6 E8DED7FFFF          <1> 	call showhex
  6783                              <1> dumppcidevicelp:
  6784 000056DB A2[0A560000]        <1> 	mov [pciregister], al
  6785 000056E0 E8AA000000          <1> 	call getpciaddr
  6786 000056E5 BAF80C0000          <1> 	mov edx, 0xCF8
  6787 000056EA EF                  <1> 	out dx, eax
  6788 000056EB BAFC0C0000          <1> 	mov edx, 0xCFC
  6789 000056F0 ED                  <1> 	in eax, dx
  6790 000056F1 89C1                <1> 	mov ecx, eax
  6791 000056F3 A0[0A560000]        <1> 	mov al, [pciregister]
  6792 000056F8 0404                <1> 	add al, 4
  6793 000056FA C605[A42E0000]05    <1> 	mov byte [firsthexshown], 5
  6794 00005701 E8B3D7FFFF          <1> 	call showhex
  6795 00005706 3C3C                <1> 	cmp al, 0x3C
  6796 00005708 72D1                <1> 	jb dumppcidevicelp
  6797                              <1> dumppcidn:
  6798 0000570A 803D[5B250000]00    <1> 	cmp byte [charpos], 0
  6799 00005711 0F843AFFFFFF        <1> 	je near searchpciret
  6800 00005717 BE[E8760000]        <1> 	mov esi, line
  6801 0000571C E8B4C7FFFF          <1> 	call print
  6802 00005721 E92BFFFFFF          <1> 	jmp searchpciret
  6803                              <1> nextpcibus:
  6804 00005726 30C0                <1> 	xor al, al
  6805 00005728 A2[08560000]        <1> 	mov [pcidevice], al
  6806 0000572D A0[07560000]        <1> 	mov al, [pcibus]
  6807 00005732 3C7F                <1> 	cmp al, 1111111b
  6808 00005734 730C                <1> 	jae donesearchpci
  6809 00005736 FEC0                <1> 	inc al
  6810 00005738 A2[07560000]        <1> 	mov [pcibus], al
  6811 0000573D E9ECFEFFFF          <1> 	jmp searchpci
  6812                              <1> donesearchpci:
  6813 00005742 31D2                <1> 	xor edx, edx
  6814 00005744 C3                  <1> 	ret
  6815                              <1> foundpciaddr:
  6816 00005745 B010                <1> 	mov al, 0x10
  6817 00005747 A2[0A560000]        <1> 	mov [pciregister], al
  6818                              <1> findpciioaddr:
  6819 0000574C E83E000000          <1> 	call getpciaddr
  6820 00005751 BAF80C0000          <1> 	mov edx, 0xCF8
  6821 00005756 EF                  <1> 	out dx, eax
  6822 00005757 BAFC0C0000          <1> 	mov edx, 0xCFC
  6823 0000575C ED                  <1> 	in eax, dx
  6824 0000575D 89C3                <1> 	mov ebx, eax
  6825 0000575F 81E301000000        <1> 	and ebx, 1
  6826 00005765 81FB00000000        <1> 	cmp ebx, 0
  6827 0000576B 0F8408000000        <1> 	je near notpciioaddr
  6828 00005771 2D01000000          <1> 	sub eax, 1
  6829 00005776 89C2                <1> 	mov edx, eax
  6830 00005778 C3                  <1> 	ret
  6831                              <1> notpciioaddr:
  6832 00005779 A0[0A560000]        <1> 	mov al, [pciregister]
  6833 0000577E 0404                <1> 	add al, 4
  6834 00005780 3C28                <1> 	cmp al, 0x28
  6835 00005782 0F87C9FEFFFF        <1> 	ja near searchpciret
  6836 00005788 A2[0A560000]        <1> 	mov [pciregister], al
  6837 0000578D EBBD                <1> 	jmp findpciioaddr
  6838                              <1> getpciaddr:		;;puts it in eax and ebx
  6839 0000578F 31C0                <1> 			xor eax, eax
  6840 00005791 BB00000080          <1> 			mov ebx, 0x80000000
  6841 00005796 A0[07560000]        <1> 			mov al, [pcibus]
  6842 0000579B C1E010              <1> 			shl eax, 16
  6843 0000579E 01C3                <1> 			add ebx, eax
  6844 000057A0 31C0                <1> 			xor eax, eax
  6845 000057A2 A0[08560000]        <1> 			mov al, [pcidevice]
  6846 000057A7 C1E00B              <1> 			shl eax, 11
  6847 000057AA 01C3                <1> 			add ebx, eax
  6848 000057AC 31C0                <1> 			xor eax, eax
  6849 000057AE A0[09560000]        <1> 			mov al, [pcifunction]
  6850 000057B3 C1E008              <1> 			shl eax, 8
  6851 000057B6 01C3                <1> 			add ebx, eax
  6852 000057B8 31C0                <1> 			xor eax, eax
  6853 000057BA A0[0A560000]        <1> 			mov al, [pciregister]
  6854 000057BF 01C3                <1> 			add ebx, eax
  6855 000057C1 89D8                <1> 			mov eax, ebx
  6856 000057C3 C3                  <1> 			ret
  6857                                      %include "source/disk.asm"
  6858                              <1> ;This loads files using the methods in the loaded driver
  6859                              <1> %ifdef disk.real
  6860                              <1> %include "source/drivers/disk/realmode.asm"
  6861                              <2> diskr:
  6862                              <2> 			;read from disk using real mode-it does not work with large files
  6863                              <2> 			;sector count in cl
  6864                              <2> 			;disk number in ch
  6865                              <2> 			;48 bit address with last 32 bits in ebx
  6866                              <2> 			;buffer in esi
  6867                              <2> 			;puts end of buffer in edi and end lba address in edx
  6868 000057C4 880D[F1570000]      <2> 	mov [sdlength], cl
  6869 000057CA 891D[F2570000]      <2> 	mov [sdaddress], ebx
  6870 000057D0 8935[50590000]      <2> 	mov [oldesireal], esi
  6871 000057D6 66BE[F657]          <2> 	mov si, readdiskreal
  6872 000057DA 668935[A40C0000]    <2> 	mov [realmodeptr], si
  6873 000057E1 BE[32580000]        <2> 	mov esi, backfromrealread
  6874 000057E6 8935[A00C0000]      <2> 	mov [realmodereturn], esi
  6875 000057EC E998B3FFFF          <2> 	jmp realmode
  6876 000057F1 00                  <2> sdlength db 0
  6877 000057F2 00000000            <2> sdaddress dd 0
  6878                              <2> 
  6879                              <2> [BITS 16]
  6880                              <2> readdiskreal:
  6881 000057F6 C706[2258]1000      <2> 	mov word [dlen], 0x10
  6882 000057FC C706[2658]0000      <2> 	mov word [daddress], 0
  6883 00005802 C706[2858]0001      <2> 	mov word [dsegm], 0x100
  6884 00005808 66891E[2A58]        <2> 	mov [dlbaad], ebx
  6885 0000580D 880E[2458]          <2> 	mov [dreadlen], cl
  6886                              <2> ReadHardDisk:
  6887 00005811 BE[2258]            <2> 	mov si, diskaddresspacket
  6888 00005814 31C0                <2> 	xor ax, ax
  6889 00005816 B442                <2> 	mov ah, 0x42
  6890 00005818 8A16[2158]          <2> 	mov dl, [dnumber]
  6891 0000581C CD13                <2> 	int 0x13
  6892 0000581E 72F1                <2> 	jc ReadHardDisk
  6893 00005820 C3                  <2> 	ret
  6894                              <2> 
  6895 00005821 80                  <2> dnumber db 0x80
  6896                              <2> diskaddresspacket:
  6897 00005822 10                  <2> dlen:	db 0x10 ;size of packet
  6898 00005823 00                  <2> 		db 0
  6899 00005824 7F00                <2> dreadlen:	dw 0x7F	;blocks to read=maximum
  6900 00005826 0000                <2> daddress:	dw 0x0	;address 0
  6901 00005828 0001                <2> dsegm:		dw 0x100	;segment
  6902                              <2> 		;start with known value for hd
  6903                              <2> dlbaad:
  6904 0000582A 00000000            <2> 	dd 0	;lba address
  6905 0000582E 00000000            <2> 	dd 0
  6906                              <2> [BITS 32]
  6907                              <2> backfromrealread:
  6908 00005832 8B35[50590000]      <2> 	mov esi, [oldesireal]
  6909 00005838 8B1D[F2570000]      <2> 	mov ebx, [sdaddress]
  6910 0000583E 31C9                <2> 	xor ecx, ecx
  6911 00005840 8A0D[F1570000]      <2> 	mov cl, [sdlength]
  6912 00005846 01CB                <2> 	add ebx, ecx
  6913 00005848 66B80800            <2> 	mov ax, LINEAR_SEL
  6914 0000584C 8EE0                <2> 	mov fs, ax
  6915 0000584E BF00100000          <2> 	mov edi, 0x1000
  6916 00005853 B200                <2> 	mov dl, 0
  6917 00005855 D0E1                <2> 	shl cl, 1
  6918                              <2> copyfromrmodedisk:
  6919 00005857 648A07              <2> 	mov al, [fs:edi]
  6920 0000585A 8806                <2> 	mov [esi], al
  6921 0000585C 47                  <2> 	inc edi
  6922 0000585D 46                  <2> 	inc esi
  6923 0000585E FECA                <2> 	dec dl
  6924 00005860 80FA00              <2> 	cmp dl, 0
  6925 00005863 75F2                <2> 	jne copyfromrmodedisk
  6926 00005865 FEC9                <2> 	dec cl
  6927 00005867 B200                <2> 	mov dl, 0
  6928 00005869 80F900              <2> 	cmp cl, 0
  6929 0000586C 75E9                <2> 	jne copyfromrmodedisk
  6930 0000586E 66B83000            <2> 	mov ax, NEW_DATA_SEL
  6931 00005872 8EE0                <2> 	mov fs, ax
  6932 00005874 89F7                <2> 	mov edi, esi
  6933 00005876 8B35[50590000]      <2> 	mov esi, [oldesireal]
  6934 0000587C 89DA                <2> 	mov edx, ebx
  6935 0000587E 8B1D[F2570000]      <2> 	mov ebx, [sdaddress]
  6936 00005884 C3                  <2> 	ret
  6937                              <2> 	
  6938                              <1> %else
  6939                              <1> 	%ifdef disk.protected
  6940                              <1> 	%include "source/drivers/disk/pata.asm"
  6941                              <1> 	%endif
  6942                              <1> %endif
  6943                              <1> loadfile:	;loads a file with the name buffer's location in edi into location in esi
  6944                              <1> 			;returns with err code in edx and file end in edi
  6945 00005885 803F00              <1> 	cmp byte [edi], 0
  6946 00005888 0F8448000000        <1> 	je near nofileload
  6947 0000588E 89FA                <1> 	mov edx, edi
  6948 00005890 BB[0D870000]        <1> 	mov ebx, diskfileindex
  6949                              <1> nextnamechar:
  6950 00005895 8A07                <1> 	mov al, [edi]
  6951 00005897 3C26                <1> 	cmp al, '&'
  6952 00005899 7440                <1> 	je nullfile
  6953 0000589B 8A23                <1> 	mov ah, [ebx]
  6954 0000589D 47                  <1> 	inc edi
  6955 0000589E 43                  <1> 	inc ebx
  6956 0000589F 88C1                <1> 	mov cl, al
  6957 000058A1 08E1                <1> 	or cl, ah
  6958 000058A3 80F900              <1> 	cmp cl, 0
  6959 000058A6 744E                <1> 	je equalfilenames
  6960 000058A8 80F920              <1> 	cmp cl, ' '
  6961 000058AB 7449                <1> 	je equalfilenames
  6962 000058AD 3C2A                <1> 	cmp al, '*'
  6963 000058AF 742B                <1> 	je equalfilenames2
  6964 000058B1 80FC00              <1> 	cmp ah, 0
  6965 000058B4 7410                <1> 	je nextfilename
  6966 000058B6 3C00                <1> 	cmp al, 0
  6967 000058B8 7404                <1> 	je getebxzero
  6968 000058BA 38E0                <1> 	cmp al, ah
  6969 000058BC 74D7                <1> 	je nextnamechar
  6970                              <1> getebxzero:
  6971 000058BE 8A23                <1> 	mov ah, [ebx]
  6972 000058C0 43                  <1> 	inc ebx
  6973 000058C1 80FC00              <1> 	cmp ah, 0
  6974 000058C4 75F8                <1> 	jne getebxzero
  6975                              <1> nextfilename:
  6976 000058C6 81C308000000        <1> 	add ebx, 8		;next descriptor
  6977 000058CC 89D7                <1> 	mov edi, edx
  6978 000058CE 81FB[77880000]      <1> 	cmp ebx, enddiskfileindex
  6979 000058D4 72BF                <1> 	jb nextnamechar
  6980                              <1> nofileload:
  6981 000058D6 BA94010000          <1> 	mov edx, 404	;indicate not found error
  6982                              <1> nullfile:
  6983 000058DB C3                  <1> 	ret
  6984                              <1> equalfilenames2:
  6985 000058DC 81EB02000000        <1> 	sub ebx, 2
  6986                              <1> eqfilefind:
  6987 000058E2 43                  <1> 	inc ebx
  6988 000058E3 81FB[77880000]      <1> 	cmp ebx, enddiskfileindex
  6989 000058E9 0F83E7FFFFFF        <1> 	jae near nofileload
  6990 000058EF 8A03                <1> 	mov al, [ebx]
  6991 000058F1 3C00                <1> 	cmp al, 0
  6992 000058F3 75ED                <1> 	jne eqfilefind
  6993 000058F5 43                  <1> 	inc ebx
  6994                              <1> equalfilenames:
  6995 000058F6 8B4304              <1> 	mov eax, [ebx + 4] 	;put file size in eax
  6996 000058F9 8B1B                <1> 	mov ebx, [ebx]		;put file beginning in ebx
  6997 000058FB 031D[7A880000]      <1> 	add ebx, [lbaad]	;add offset to solleros
  6998 00005901 31C9                <1> 	xor ecx, ecx
  6999 00005903 88C1                <1> 	mov cl, al			;get excess number of sectors
  7000 00005905 C0E102              <1> 	shl cl, 2
  7001 00005908 C0E902              <1> 	shr cl, 2			;cut off at 64
  7002 0000590B 29C8                <1> 	sub eax, ecx		;get rid of excess sectors
  7003 0000590D B500                <1> 	mov ch, 0			;drive 0
  7004 0000590F C1E806              <1> 	shr eax, 6			;get number of 64 sector tracks
  7005                              <1> loaddiskfile:			;tracks in eax, excess sectors in cl, drive in ch, buffer in esi, address in ebx
  7006 00005912 A3[54590000]        <1> 	mov [filetracks], eax
  7007 00005917 89F7                <1> 	mov edi, esi		;just in case cl is 0
  7008 00005919 89DA                <1> 	mov edx, ebx
  7009 0000591B 80F900              <1> 	cmp cl, 0
  7010 0000591E 7405                <1> 	je copytracksforfile
  7011 00005920 E89FFEFFFF          <1> 	call diskr	;take care of excess sectors
  7012                              <1> copytracksforfile:
  7013 00005925 A1[54590000]        <1> 	mov eax, [filetracks]
  7014 0000592A 3D00000000          <1> 	cmp eax, 0
  7015 0000592F 7419                <1> 	je donecopyfile
  7016 00005931 48                  <1> 	dec eax
  7017 00005932 A3[54590000]        <1> 	mov [filetracks], eax
  7018 00005937 89D3                <1> 	mov ebx, edx	;get end lba
  7019 00005939 B140                <1> 	mov cl, 0x40 ;for compatability with BIOS it uses 64 instead of 128
  7020 0000593B 8A2D[79880000]      <1> 	mov ch, [DriveNumber]
  7021 00005941 89FE                <1> 	mov esi, edi	;reset buffer
  7022 00005943 E87CFEFFFF          <1> 	call diskr
  7023 00005948 EBDB                <1> 	jmp copytracksforfile
  7024                              <1> donecopyfile:
  7025 0000594A BA00000000          <1> 	mov edx, 0	;no error
  7026 0000594F C3                  <1> 	ret
  7027                              <1> 
  7028 00005950 00000000            <1> oldesireal dd 0
  7029 00005954 00000000            <1> filetracks dd 0
  7030 00005958 00                  <1> lbad1 db 0
  7031 00005959 00                  <1> lbad2 db 0
  7032 0000595A 00                  <1> lbad3 db 0
  7033 0000595B 00                  <1> lbad4 db 0
  7034 0000595C 00                  <1> lbad5 db 0
  7035 0000595D 00                  <1> lbad6 db 0
  7036 0000595E 6400                <1> segments dw 100
  7037                              <1> 
  7038                              <1> 
  7039                              <1> 	
  7040                                      %include "source/threads.asm"
  7041                              <1> ;;THIS IS MY FIRST ATTEMPT AT IMPLEMENTING THREADS
  7042 00005960 00000000            <1> espstart dd 0
  7043                              <1> threadstarttest:
  7044 00005964 8925[60590000]      <1>     mov [espstart], esp
  7045 0000596A E9B8040000          <1>     jmp startthreads
  7046                              <1> mainthread:
  7047 0000596F F4                  <1> 	hlt		;;this does not work properly
  7048 00005970 EBFD                <1> 	jmp mainthread
  7049                              <1> 	
  7050                              <1> nwcmdst:
  7051 00005972 8B25[60590000]      <1> 	mov esp, [espstart]
  7052                              <1> 	;mov ax, STACK_SEL
  7053                              <1> 	;mov ss, ax
  7054 00005978 C605[97590000]00    <1> 	mov byte [threadson], 0
  7055 0000597F E960D0FFFF          <1> 	jmp nwcmd
  7056                              <1> 	
  7057                              <1> modelthread:
  7058 00005984 B001                <1> 	mov al, 1
  7059 00005986 B409                <1> 	mov ah, 9
  7060 00005988 8B0D[865F0000]      <1> 	mov ecx, [currentthread]
  7061 0000598E CD30                <1> 	int 0x30
  7062 00005990 E8FBA8FFFF          <1> 	call timerinterrupt	;this emulates an interrupt call
  7063 00005995 EBDB                <1> 	jmp nwcmdst
  7064                              <1> 	
  7065                              <1> 	
  7066 00005997 00                  <1> threadson db 0
  7067 00005998 04000000            <1> lastthread dd 4
  7068                              <1> 
  7069                              <1> thrdtst:
  7070 0000599C [84590000]<rept>    <1> times 256 dd modelthread	;;could go up to 2048, but that takes too long
  7071                              <1> thrdtstend:
  7072                              <1> 
  7073 00005D9C 00000000            <1> 	espold dd 0
  7074                              <1> 
  7075                              <1> threadfork:
  7076 00005DA0 C605[97590000]01    <1> 	mov byte [threadson], 1
  7077 00005DA7 60                  <1> 	pushad
  7078                              <1> 	
  7079 00005DA8 8CC8                <1> 	mov eax, cs
  7080 00005DAA 89C2                <1> 	mov edx, eax
  7081 00005DAC 8B4C2428            <1> 	mov ecx, [esp + 40]
  7082 00005DB0 81C900020000        <1> 	or ecx, 0x200
  7083 00005DB6 89E3                <1> 	mov ebx, esp
  7084 00005DB8 BC[58800100]        <1> 	mov esp, stackdummy
  7085                              <1> 	
  7086 00005DBD 60                  <1> 	pushad
  7087 00005DBE B8[6F590000]        <1> 	mov eax, mainthread
  7088 00005DC3 89442420            <1> 	mov [esp + 32], eax
  7089 00005DC7 89542424            <1> 	mov [esp + 36], edx
  7090 00005DCB 894C2428            <1> 	mov [esp + 40], ecx
  7091 00005DCF 8925[586C0100]      <1> 	mov [threadlist], esp
  7092                              <1> 	
  7093 00005DD5 891D[9C5D0000]      <1> 	mov [espold], ebx
  7094 00005DDB 89F0                <1> 	mov eax, esi
  7095 00005DDD BC[58840100]        <1> 	mov esp, stack1
  7096 00005DE2 8B1D[98590000]      <1> 	mov ebx, [lastthread]
  7097 00005DE8 C1E30A              <1> 	shl ebx, 10
  7098 00005DEB 01DC                <1> 	add esp, ebx
  7099 00005DED C1EB0A              <1> 	shr ebx, 10
  7100 00005DF0 60                  <1> 	pushad
  7101 00005DF1 89442420            <1> 	mov [esp + 32], eax
  7102 00005DF5 89542424            <1> 	mov [esp + 36], edx
  7103 00005DF9 894C2428            <1> 	mov [esp + 40], ecx
  7104 00005DFD 89A3[586C0100]      <1> 	mov [threadlist + ebx], esp
  7105 00005E03 8B25[9C5D0000]      <1> 	mov esp, [espold]
  7106 00005E09 81C304000000        <1> 	add ebx, 4
  7107 00005E0F 89A3[586C0100]      <1> 	mov [threadlist + ebx], esp
  7108 00005E15 81C304000000        <1> 	add ebx, 4
  7109 00005E1B 891D[98590000]      <1> 	mov [lastthread], ebx
  7110 00005E21 B020                <1> 	mov al, 0x20
  7111 00005E23 E620                <1> 	out 0x20, al
  7112 00005E25 61                  <1> 	popad
  7113 00005E26 C3                  <1> 	ret
  7114                              <1> 
  7115                              <1> startthreads:
  7116 00005E27 C605[97590000]01    <1> 	mov byte [threadson], 1
  7117                              <1> 
  7118 00005E2E 8CC8                <1> 	mov eax, cs
  7119 00005E30 89C2                <1> 	mov edx, eax
  7120 00005E32 8B4C2428            <1> 	mov ecx, [esp + 40]
  7121 00005E36 81C900020000        <1> 	or ecx, 0x200
  7122 00005E3C 89E3                <1> 	mov ebx, esp
  7123 00005E3E BC[58800100]        <1> 	mov esp, stackdummy
  7124 00005E43 66B83000            <1> 	mov ax, NEW_DATA_SEL
  7125 00005E47 8ED0                <1> 	mov ss, ax
  7126                              <1> 	
  7127 00005E49 60                  <1> 	pushad
  7128 00005E4A B8[6F590000]        <1> 	mov eax, mainthread
  7129 00005E4F 89442420            <1> 	mov [esp + 32], eax	;used to be 32
  7130 00005E53 89542424            <1> 	mov [esp + 36], edx ;used to be 36
  7131 00005E57 894C2428            <1> 	mov [esp + 40], ecx
  7132 00005E5B 8925[586C0100]      <1> 	mov [threadlist], esp
  7133                              <1> 
  7134                              <1> 			;;that above setup the dummy thread which for some reason does not run
  7135                              <1> 			;;this below will setup the threads found in thrdtst
  7136                              <1> 
  7137                              <1> testthreads:
  7138 00005E61 BE[9C590000]        <1> 	mov esi, thrdtst
  7139 00005E66 BC[58840100]        <1> 	mov esp, stack1
  7140 00005E6B BF[586C0100]        <1> 	mov edi, threadlist
  7141 00005E70 81C704000000        <1> 	add edi, 4
  7142                              <1> nxtthreadld:
  7143 00005E76 60                  <1> 	pushad
  7144 00005E77 8B06                <1> 	mov eax, [esi]
  7145 00005E79 89442420            <1> 	mov [esp + 32], eax
  7146 00005E7D 89542424            <1> 	mov [esp + 36], edx
  7147 00005E81 894C2428            <1> 	mov [esp + 40], ecx
  7148 00005E85 8927                <1> 	mov [edi], esp
  7149 00005E87 81C400040000        <1> 	add esp, 1024
  7150 00005E8D 81C604000000        <1> 	add esi, 4
  7151 00005E93 81C704000000        <1> 	add edi, 4
  7152 00005E99 81FF[587C0100]      <1> 	cmp edi, threadlistend
  7153 00005E9F 0F831A000000        <1> 	jae near nomorethreadspace
  7154 00005EA5 81FC[58841100]      <1> 	cmp esp, bssend
  7155 00005EAB 0F8347000000        <1> 	jae near nomorestackspace
  7156 00005EB1 81FE[9C5D0000]      <1> 	cmp esi, thrdtstend
  7157 00005EB7 72BD                <1> 	jb nxtthreadld
  7158 00005EB9 89DC                <1> 	mov esp, ebx
  7159 00005EBB 61                  <1> 	popad
  7160 00005EBC FB                  <1> 	sti
  7161 00005EBD EBFE                <1> 	jmp $	;;wait for the irq to hook
  7162                              <1> 	
  7163                              <1> nomorethreadspace:
  7164 00005EBF BE[D55E0000]        <1> 	mov esi, nmts
  7165 00005EC4 E80CC0FFFF          <1> 	call print
  7166 00005EC9 C605[97590000]00    <1> 	mov byte [threadson], 0
  7167 00005ED0 E90FCBFFFF          <1> 	jmp nwcmd
  7168 00005ED5 74656820636F6C6F6E- <1> nmts	db "teh colonel no can haz moar treds",10,0
  7169 00005EDE 656C206E6F2063616E- <1>
  7170 00005EE7 2068617A206D6F6172- <1>
  7171 00005EF0 2074726564730A00    <1>
  7172                              <1> 
  7173                              <1> nomorestackspace:
  7174 00005EF8 BE[075F0000]        <1> 	mov esi, nmss
  7175 00005EFD E8D3BFFFFF          <1> 	call print
  7176 00005F02 E96BFAFFFF          <1> 	jmp nwcmdst
  7177 00005F07 74656820636F6C6F6E- <1> nmss	db "teh colonel no can haz moar staqz",10,0
  7178 00005F10 656C206E6F2063616E- <1>
  7179 00005F19 2068617A206D6F6172- <1>
  7180 00005F22 20737461717A0A00    <1>
  7181                              <1> 	
  7182                              <1> threadswitch:
  7183 00005F2A FA                  <1> 	cli
  7184 00005F2B 60                  <1> 	pushad
  7185 00005F2C BF[586C0100]        <1> 	mov edi, threadlist
  7186 00005F31 A1[865F0000]        <1> 	mov eax, [currentthread]
  7187 00005F36 40                  <1> 	inc eax
  7188 00005F37 A3[865F0000]        <1> 	mov [currentthread], eax
  7189 00005F3C 6648                <1> 	dec ax
  7190 00005F3E C1E002              <1> 	shl eax, 2
  7191 00005F41 01C7                <1> 	add edi, eax
  7192 00005F43 8927                <1> 	mov [edi], esp
  7193 00005F45 81C704000000        <1> 	add edi, 4
  7194 00005F4B 81FF[587C0100]      <1> 	cmp edi, threadlistend
  7195 00005F51 0F830D000000        <1> 	jae near nookespthread
  7196 00005F57 8B07                <1> 	mov eax, [edi]
  7197 00005F59 3D00000000          <1> 	cmp eax, 0
  7198 00005F5E 0F8519000000        <1> 	jne near okespthread
  7199                              <1> nookespthread:
  7200 00005F64 BF[586C0100]        <1> 	mov edi, threadlist
  7201 00005F69 31C0                <1> 	xor eax, eax
  7202 00005F6B A3[865F0000]        <1> 	mov [currentthread], eax
  7203 00005F70 8B07                <1> 	mov eax, [edi]
  7204 00005F72 3D00000000          <1> 	cmp eax, 0
  7205 00005F77 0F84F5F9FFFF        <1> 	je near nwcmdst
  7206                              <1> okespthread:
  7207 00005F7D 89C4                <1> 	mov esp, eax
  7208 00005F7F B020                <1> 	mov al, 0x20
  7209 00005F81 E620                <1> 	out 0x20, al
  7210 00005F83 61                  <1> 	popad
  7211 00005F84 FB                  <1> 	sti
  7212 00005F85 C3                  <1> 	ret
  7213                              <1> 	
  7214 00005F86 00000000            <1> currentthread dd 0
  7215                                  %ifdef gui.included
  7216                                      %include "source/gui/gui.asm"
  7217                              <1> guiclear:
  7218 00005F8A 8B3D[264C0000]      <1> 	mov edi, [physbaseptr]
  7219 00005F90 668B15[104C0000]    <1> 	mov dx, [resolutionx]
  7220 00005F97 668B0D[124C0000]    <1> 	mov cx, [resolutiony]
  7221 00005F9E 66A1[C75F0000]      <1> 	mov ax, [background]
  7222                              <1> guiclearloop:
  7223 00005FA4 668907              <1> 	mov [edi], ax
  7224 00005FA7 81C702000000        <1> 	add edi, 2
  7225 00005FAD 664A                <1> 	dec dx
  7226 00005FAF 6681FA0000          <1> 	cmp dx, 0
  7227 00005FB4 77EE                <1> 	ja guiclearloop
  7228 00005FB6 6649                <1> 	dec cx
  7229 00005FB8 668B15[104C0000]    <1> 	mov dx, [resolutionx]
  7230 00005FBF 6681F90000          <1> 	cmp cx, 0
  7231 00005FC4 77DE                <1> 	ja guiclearloop
  7232 00005FC6 C3                  <1> 	ret
  7233                              <1> 
  7234 00005FC7 CF7B                <1> background dw 0111101111001111b
  7235                              <1> 
  7236                              <1> guiboot:	;Let's see what I can do, I am going to try to make this as freestanding as possible
  7237 00005FC9 31C0                <1> 	xor eax, eax
  7238 00005FCB 31DB                <1> 	xor ebx, ebx
  7239 00005FCD 31C9                <1> 	xor ecx, ecx
  7240 00005FCF 31D2                <1> 	xor edx, edx
  7241 00005FD1 E815000000          <1> 	call guisetup
  7242                              <1> guiloop:
  7243 00005FD6 E826EDFFFF          <1> 	call cursorgui
  7244                              <1> guistart:
  7245 00005FDB E886F2FFFF          <1> 	call getkey
  7246 00005FE0 C605[FD600000]00    <1> 	mov byte [copygui], 0
  7247 00005FE7 EBF2                <1> 	jmp guistart
  7248 00005FE9 EBF0                <1> 	jmp guistart
  7249                              <1> guisetup:
  7250 00005FEB 8B3D[264C0000]      <1> 	mov edi, [physbaseptr]
  7251 00005FF1 668B15[104C0000]    <1> 	mov dx, [resolutionx]
  7252 00005FF8 668B0D[124C0000]    <1> 	mov cx, [resolutiony]
  7253 00005FFF 668B1D[C75F0000]    <1> 	mov bx, [background]
  7254                              <1> guiclearloop2:
  7255 00006006 66891F              <1> 	mov [edi], bx
  7256 00006009 81C702000000        <1> 	add edi, 2
  7257 0000600F 664A                <1> 	dec dx
  7258 00006011 6681FA0000          <1> 	cmp dx, 0
  7259 00006016 0F85EAFFFFFF        <1> 	jne near guiclearloop2
  7260 0000601C 6649                <1> 	dec cx
  7261 0000601E 668B15[104C0000]    <1> 	mov dx, [resolutionx]
  7262 00006025 6681F90000          <1> 	cmp cx, 0
  7263 0000602A 0F85D6FFFFFF        <1> 	jne near guiclearloop2
  7264 00006030 C605[78880000]01    <1> 	mov byte [guion], 1
  7265 00006037 C605[03610000]00    <1> 	mov byte [mouseselecton], 0
  7266 0000603E 31C0                <1> 	xor eax, eax
  7267 00006040 31DB                <1> 	xor ebx, ebx
  7268 00006042 31C9                <1> 	xor ecx, ecx
  7269 00006044 31D2                <1> 	xor edx, edx
  7270                              <1> 	
  7271 00006046 BE[E5720000]        <1> 	mov esi, pacmsg
  7272 0000604B 6631C0              <1> 	xor ax, ax
  7273 0000604E 31DB                <1> 	xor ebx, ebx
  7274 00006050 66B99000            <1> 	mov cx, 144
  7275 00006054 66BA0400            <1> 	mov dx, 4
  7276 00006058 E8520A0000          <1> 	call showstring
  7277                              <1> 	
  7278 0000605D BE[15740000]        <1> 	mov esi, interneticon
  7279 00006062 6631C0              <1> 	xor ax, ax
  7280 00006065 BB[44730000]        <1> 	mov ebx, noie
  7281 0000606A 66B91800            <1> 	mov cx, 24
  7282 0000606E 66BA0400            <1> 	mov dx, 4
  7283 00006072 E8E20E0000          <1> 	call showicon
  7284                              <1> 	
  7285 00006077 BE[97740000]        <1> 	mov esi, wordicon
  7286 0000607C 6631C0              <1> 	xor ax, ax
  7287 0000607F 31DB                <1> 	xor ebx, ebx
  7288 00006081 66B91800            <1> 	mov cx, 24
  7289 00006085 66BA3000            <1> 	mov dx, 48
  7290 00006089 E8CB0E0000          <1> 	call showicon
  7291                              <1> 	
  7292 0000608E BE[19750000]        <1> 	mov esi, pacmanpellet
  7293 00006093 6631C0              <1> 	xor ax, ax
  7294 00006096 31DB                <1> 	xor ebx, ebx
  7295 00006098 66B94000            <1> 	mov cx, 64
  7296 0000609C 66BA0400            <1> 	mov dx, 4
  7297 000060A0 E8B40E0000          <1> 	call showicon
  7298                              <1> 	
  7299 000060A5 BE[1D760000]        <1> 	mov esi, pacman
  7300 000060AA 6631C0              <1> 	xor ax, ax
  7301 000060AD BB[2D730000]        <1> 	mov ebx, pacmannomnom
  7302 000060B2 66B94000            <1> 	mov cx, 64
  7303 000060B6 66BA3000            <1> 	mov dx, 48
  7304 000060BA E89A0E0000          <1> 	call showicon
  7305                              <1> 	
  7306 000060BF BE[9B750000]        <1> 	mov esi, ghostie
  7307 000060C4 6631C0              <1> 	xor ax, ax
  7308 000060C7 BB[16730000]        <1> 	mov ebx, boo
  7309 000060CC 66B96C00            <1> 	mov cx, 108
  7310 000060D0 66BA0400            <1> 	mov dx, 4
  7311 000060D4 E8800E0000          <1> 	call showicon
  7312                              <1> 
  7313 000060D9 BE[C7720000]        <1> 	mov esi, start
  7314 000060DE 668B0D[124C0000]    <1> 	mov cx, [resolutiony]
  7315 000060E5 6681E91000          <1> 	sub cx, 16
  7316 000060EA 66BA0200            <1> 	mov dx, 2
  7317 000060EE 30E4                <1> 	xor ah, ah
  7318 000060F0 B010                <1> 	mov al, 00010000b
  7319 000060F2 BB[BF730000]        <1> 	mov ebx, winblows
  7320 000060F7 E8B3090000          <1> 	call showstring
  7321 000060FC C3                  <1> 	ret
  7322                              <1> 	
  7323                              <1> ;guicopy:	;;for double buffering
  7324                              <1> ;	mov byte [copygui], 1
  7325                              <1> ;	mov edi, [offscreenmemoffset]
  7326                              <1> ;	xor edx, edx
  7327                              <1> ;	xor ecx, ecx
  7328                              <1> ;	mov dx, [mousecursorposition]
  7329                              <1> ;	mov cx, [mousecursorposition + 2]
  7330                              <1> ;	add edi, edx
  7331                              <1> ;	mov dx, [resolutionx2]
  7332                              <1> ;	inc cx
  7333                              <1> ;guicp2:
  7334                              <1> ;	add edi, edx
  7335                              <1> ;	dec cx
  7336                              <1> ;	cmp cx, 0
  7337                              <1> ;	jne guicp2
  7338                              <1> ;	sub edi, edx
  7339                              <1> ;	mov [cursorloc], edi
  7340                              <1> ;	mov ebx, cursorbmp
  7341                              <1> ;	mov cx, [resolutiony]
  7342                              <1> ;	rol ecx, 16
  7343                              <1> ;	mov cx, [resolutionx]
  7344                              <1> ;	mov esi, [physbaseptr]
  7345                              <1> ;	mov edi, [offscreenmemoffset]
  7346                              <1> ;guicp1:
  7347                              <1> ;	mov ax, [esi]
  7348                              <1> ;	mov [edi], ax
  7349                              <1> ;	add esi, 2
  7350                              <1> ;	add edi, 2
  7351                              <1> ;	cmp edi, [cursorloc]
  7352                              <1> ;	je copycursor
  7353                              <1> ;dncopycursor:
  7354                              <1> ;	dec cx
  7355                              <1> ;	cmp cx, 0
  7356                              <1> ;	jne guicp1
  7357                              <1> ;	mov cx, [resolutionx]
  7358                              <1> ;	rol ecx, 16
  7359                              <1> ;	dec cx
  7360                              <1> ;	cmp cx, 0
  7361                              <1> ;	rol ecx, 16
  7362                              <1> ;	jne guicp1
  7363                              <1> ;	mov byte [copygui], 0
  7364                              <1> ;	ret
  7365                              <1> ;copycursor:
  7366                              <1> ;	cmp ebx, cursorbmpend
  7367                              <1> ;	jae dncopycursor
  7368                              <1> ;	mov dx, [resolutionx2]
  7369                              <1> ;	add edi, edx
  7370                              <1> ;	mov [cursorloc], edi
  7371                              <1> ;	sub edi, edx
  7372                              <1> ;	dec ebx
  7373                              <1> ;	sub edi, 2
  7374                              <1> ;	sub esi, 2
  7375                              <1> ;	mov dx, 9
  7376                              <1> ;curscplp:
  7377                              <1> ;	inc ebx
  7378                              <1> ;	add esi, 2
  7379                              <1> ;	add edi, 2
  7380                              <1> ;	mov ax, [esi]
  7381                              <1> ;	mov [edi], ax
  7382                              <1> ;	mov al, [ebx]
  7383                              <1> ;	cmp al, 0
  7384                              <1> ;	je curscplp2
  7385                              <1> ;	mov word [edi], 1110011110011100b
  7386                              <1> ;curscplp2:
  7387                              <1> ;	dec cx
  7388                              <1> ;	cmp cx, 0
  7389                              <1> ;	je dncopycursor
  7390                              <1> ;	dec dx
  7391                              <1> ;	cmp dx, 0
  7392                              <1> ;	jne curscplp
  7393                              <1> ;	jmp dncopycursor
  7394                              <1> 	
  7395                              <1> 	
  7396                              <1> ;cursorloc: dd 0
  7397                              <1> 				
  7398 000060FD 00                  <1> copygui db 0
  7399 000060FE 00                  <1> graphicsset db 0
  7400 000060FF 0000                <1> graphicspos db 0,0
  7401 00006101 00                  <1> showcursorfonton db 0
  7402 00006102 00                  <1> savefonton db 0
  7403 00006103 00                  <1> mouseselecton db 0
  7404                              <1> 
  7405                              <1> 		
  7406                              <1> clearmousecursor:
  7407 00006104 BE[C75F0000]        <1> 		mov esi, background
  7408 00006109 8B3D[264C0000]      <1> 		mov edi, [physbaseptr]
  7409 0000610F 31D2                <1> 		xor edx, edx
  7410 00006111 31C9                <1> 		xor ecx, ecx
  7411 00006113 668B15[DF4E0000]    <1> 		mov dx, [lastmouseposition]
  7412 0000611A 668B0D[E14E0000]    <1> 		mov cx, [lastmouseposition + 2]
  7413 00006121 01D7                <1> 		add edi, edx
  7414 00006123 31D2                <1> 		xor edx, edx
  7415 00006125 668B15[FE4C0000]    <1> 		mov dx, [resolutionx2]
  7416 0000612C 6681F90000          <1> 		cmp cx, 0
  7417 00006131 740B                <1> 		je noyclr
  7418 00006133 01D7                <1> yclr:	add edi, edx
  7419 00006135 6649                <1> 		dec cx
  7420 00006137 6681F90000          <1> 		cmp cx, 0
  7421 0000613C 75F5                <1> 		jne yclr
  7422 0000613E 668B06              <1> noyclr:	mov ax, [esi]
  7423 00006141 C1C010              <1> 		rol eax, 16
  7424 00006144 668B06              <1> 		mov ax, [esi]
  7425 00006147 8907                <1> 		mov [edi], eax
  7426 00006149 894704              <1> 		mov [edi + 4], eax
  7427 0000614C 894708              <1> 		mov [edi + 8], eax
  7428 0000614F 89470C              <1> 		mov [edi + 12], eax
  7429 00006152 01D7                <1> 		add edi, edx
  7430 00006154 6641                <1> 		inc cx
  7431 00006156 6681F91000          <1> 		cmp cx, 16
  7432 0000615B 72E1                <1> 		jb noyclr
  7433 0000615D C3                  <1> 		ret
  7434                              <1> 
  7435                              <1> switchmousepos:		;;switch were the mouse is located
  7436 0000615E BE[4FBB0000]        <1> 		mov esi, mousecolorbuf
  7437 00006163 8B3D[264C0000]      <1> 		mov edi, [physbaseptr]
  7438 00006169 31D2                <1> 		xor edx, edx
  7439 0000616B 31C9                <1> 		xor ecx, ecx
  7440 0000616D 668B15[DF4E0000]    <1> 		mov dx, [lastmouseposition]
  7441 00006174 668B0D[E14E0000]    <1> 		mov cx, [lastmouseposition + 2]
  7442 0000617B 01D7                <1> 		add edi, edx
  7443 0000617D 31D2                <1> 		xor edx, edx
  7444 0000617F 668B15[FE4C0000]    <1> 		mov dx, [resolutionx2]
  7445 00006186 6681F90000          <1> 		cmp cx, 0
  7446 0000618B 740B                <1> 		je noswmsy
  7447 0000618D 01D7                <1> swmsy:		add edi, edx
  7448 0000618F 6649                <1> 		dec cx
  7449 00006191 6681F90000          <1> 		cmp cx, 0
  7450 00006196 75F5                <1> 		jne swmsy
  7451 00006198 8B06                <1> noswmsy:	mov eax, [esi]
  7452 0000619A 8B5E04              <1> 		mov ebx, [esi + 4]
  7453 0000619D 8907                <1> 		mov [edi], eax
  7454 0000619F 895F04              <1> 		mov [edi + 4], ebx
  7455 000061A2 8B4608              <1> 		mov eax, [esi + 8]
  7456 000061A5 8B5E0C              <1> 		mov ebx, [esi + 12]
  7457 000061A8 894708              <1> 		mov [edi + 8], eax
  7458 000061AB 895F0C              <1> 		mov [edi + 12], ebx
  7459 000061AE 01D7                <1> 		add edi, edx
  7460 000061B0 81C610000000        <1> 		add esi, 16
  7461 000061B6 81FE[4FBC0000]      <1> 		cmp esi, mcolorend
  7462 000061BC 72DA                <1> 		jb noswmsy
  7463                              <1> 		
  7464                              <1> switchmousepos2:
  7465 000061BE BE[4FBB0000]        <1> 		mov esi, mousecolorbuf
  7466 000061C3 8B3D[264C0000]      <1> 		mov edi, [physbaseptr]
  7467 000061C9 31D2                <1> 		xor edx, edx
  7468 000061CB 31C9                <1> 		xor ecx, ecx
  7469 000061CD 668B15[E34E0000]    <1> 		mov dx, [mousecursorposition]
  7470 000061D4 668B0D[E54E0000]    <1> 		mov cx, [mousecursorposition + 2]
  7471 000061DB 01D7                <1> 		add edi, edx
  7472 000061DD 31D2                <1> 		xor edx, edx
  7473 000061DF 668B15[FE4C0000]    <1> 		mov dx, [resolutionx2]
  7474 000061E6 6681F90000          <1> 		cmp cx, 0
  7475 000061EB 740B                <1> 		je noswmsy2
  7476 000061ED 01D7                <1> swmsy2:		add edi, edx
  7477 000061EF 6649                <1> 		dec cx
  7478 000061F1 6681F90000          <1> 		cmp cx, 0
  7479 000061F6 75F5                <1> 		jne swmsy2
  7480 000061F8 8B07                <1> noswmsy2:	mov eax, [edi]
  7481 000061FA 8B5F04              <1> 		mov ebx, [edi + 4]
  7482 000061FD 8906                <1> 		mov [esi], eax
  7483 000061FF 895E04              <1> 		mov [esi + 4], ebx
  7484 00006202 8B4708              <1> 		mov eax, [edi + 8]
  7485 00006205 8B5F0C              <1> 		mov ebx, [edi + 12]
  7486 00006208 894608              <1> 		mov [esi + 8], eax
  7487 0000620B 895E0C              <1> 		mov [esi + 12], ebx
  7488 0000620E 01D7                <1> 		add edi, edx
  7489 00006210 81C610000000        <1> 		add esi, 16
  7490 00006216 81FE[4FBC0000]      <1> 		cmp esi, mcolorend
  7491 0000621C 72DA                <1> 		jb noswmsy2
  7492 0000621E C3                  <1> 		ret
  7493                              <1> 
  7494 0000621F 00                  <1> pbutton db 0
  7495 00006220 00                  <1> pLBUTTON db 0
  7496 00006221 00                  <1> pRBUTTON db 0
  7497 00006222 00000000            <1> dragging dw 0,0
  7498 00006226 0000000000000000    <1> lastpos dw 0,0,0,0
  7499 0000622E 00000000            <1> colorbuf dw 0,0
  7500                              <1> 	
  7501                              <1> 	clickicon:
  7502 00006232 B001                <1> 		mov al, 1
  7503 00006234 A2[1F620000]        <1> 		mov [pbutton], al
  7504 00006239 A0[20620000]        <1> 		mov al, [pLBUTTON]
  7505 0000623E 2205[F44F0000]      <1> 		and al, [LBUTTON]
  7506 00006244 8A25[21620000]      <1> 		mov ah, [pRBUTTON]
  7507 0000624A 2225[F54F0000]      <1> 		and ah, [RBUTTON]
  7508 00006250 08E0                <1> 		or al, ah
  7509 00006252 3C00                <1> 		cmp al, 0
  7510 00006254 741B                <1> 		je nodragclick
  7511 00006256 813D[22620000]0100- <1> 		cmp dword [dragging], 1
  7512 0000625E 0000                <1>
  7513 00006260 732D                <1> 		jae dragclick
  7514 00006262 C705[22620000]0100- <1> 		mov dword [dragging], 1
  7515 0000626A 0000                <1>
  7516 0000626C E91E000000          <1> 		jmp dragclick
  7517                              <1> 	nodragclick:
  7518 00006271 C705[22620000]0000- <1> 		mov dword [dragging], 0
  7519 00006279 0000                <1>
  7520 0000627B A0[F44F0000]        <1> 		mov al, [LBUTTON]
  7521 00006280 A2[20620000]        <1> 		mov [pLBUTTON], al
  7522 00006285 A0[F54F0000]        <1> 		mov al, [RBUTTON]
  7523 0000628A A2[21620000]        <1> 		mov [pRBUTTON], al
  7524                              <1> 	dragclick:
  7525 0000628F 6631C0              <1> 		xor ax, ax
  7526 00006292 BE[4FB90000]        <1> 		mov esi, graphicstable
  7527 00006297 C705[11730000]0000- <1> 		mov dword [codepointer], 0
  7528 0000629F 0000                <1>
  7529                              <1> 	clicon2:
  7530 000062A1 31D2                <1> 		xor edx, edx
  7531 000062A3 31C9                <1> 		xor ecx, ecx
  7532 000062A5 66813E0100          <1> 		cmp word [esi], 1
  7533 000062AA 0F841B000000        <1> 		je near iconselect
  7534 000062B0 66813E0200          <1> 		cmp word [esi], 2
  7535 000062B5 0F8472010000        <1> 		je near textselected
  7536 000062BB 66813E0300          <1> 		cmp word [esi], 3
  7537 000062C0 0F84C7020000        <1> 		je near windowselect
  7538 000062C6 E901040000          <1> 		jmp nexticonsel
  7539                              <1> 	iconselect:
  7540 000062CB 668B5606            <1> 		mov dx, [esi + 6]
  7541 000062CF 6689D0              <1> 		mov ax, dx
  7542 000062D2 668B4E08            <1> 		mov cx, [esi + 8]
  7543 000062D6 6689CB              <1> 		mov bx, cx
  7544 000062D9 6681C32000          <1> 		add bx, 32
  7545 000062DE 6601D0              <1> 		add ax, dx
  7546 000062E1 813D[22620000]0100- <1> 		cmp dword [dragging], 1
  7547 000062E9 0000                <1>
  7548 000062EB 746F                <1> 		je dragicon
  7549 000062ED 813D[22620000]0000- <1> 		cmp dword [dragging], 0
  7550 000062F5 0000                <1>
  7551 000062F7 7411                <1> 		je nodragiconcheck
  7552 000062F9 3935[22620000]      <1> 		cmp dword [dragging], esi
  7553 000062FF 0F85C7030000        <1> 		jne near nexticonsel
  7554 00006305 E952000000          <1> 		jmp dragicon
  7555                              <1> 	nodragiconcheck:
  7556 0000630A 663905[E34E0000]    <1> 		cmp [mousecursorposition], ax
  7557 00006311 0F82B5030000        <1> 		jb near nexticonsel
  7558 00006317 66054000            <1> 		add ax, 64
  7559 0000631B 663905[E34E0000]    <1> 		cmp [mousecursorposition], ax
  7560 00006322 0F87A4030000        <1> 		ja near nexticonsel
  7561 00006328 6629D0              <1> 		sub ax, dx
  7562 0000632B 66390D[E54E0000]    <1> 		cmp [mousecursorposition + 2], cx
  7563 00006332 0F8294030000        <1> 		jb near nexticonsel
  7564 00006338 66391D[E54E0000]    <1> 		cmp [mousecursorposition + 2], bx
  7565 0000633F 0F8787030000        <1> 		ja near nexticonsel
  7566 00006345 668B460A            <1> 		mov ax, [esi + 10]
  7567 00006349 66250100            <1> 		and ax, 1
  7568 0000634D 663D0100            <1> 		cmp ax, 1
  7569 00006351 0F84B6000000        <1> 		je near unselecticon
  7570 00006357 E98D000000          <1> 		jmp nodragicon
  7571                              <1> 	dragicon:
  7572 0000635C 663905[DF4E0000]    <1> 		cmp [lastmouseposition], ax
  7573 00006363 0F8263030000        <1> 		jb near nexticonsel
  7574 00006369 66054000            <1> 		add ax, 64
  7575 0000636D 663905[DF4E0000]    <1> 		cmp [lastmouseposition], ax
  7576 00006374 0F8752030000        <1> 		ja near nexticonsel
  7577 0000637A 6629D0              <1> 		sub ax, dx
  7578 0000637D 66390D[E14E0000]    <1> 		cmp [lastmouseposition + 2], cx
  7579 00006384 0F8242030000        <1> 		jb near nexticonsel
  7580 0000638A 66391D[E14E0000]    <1> 		cmp [lastmouseposition + 2], bx
  7581 00006391 0F8735030000        <1> 		ja near nexticonsel
  7582 00006397 668B460A            <1> 		mov ax, [esi + 10]
  7583 0000639B 2410                <1> 		and al, 00010000b
  7584 0000639D 3C10                <1> 		cmp al, 00010000b
  7585 0000639F 7448                <1> 		je nodragicon
  7586 000063A1 8935[22620000]      <1> 		mov [dragging], esi
  7587 000063A7 66D1E2              <1> 		shl dx, 1
  7588 000063AA 662B15[DF4E0000]    <1> 		sub dx, [lastmouseposition]
  7589 000063B1 660315[E34E0000]    <1> 		add dx, [mousecursorposition]
  7590 000063B8 66D1EA              <1> 		shr dx, 1
  7591 000063BB 66030D[E54E0000]    <1> 		add cx, [mousecursorposition + 2]
  7592 000063C2 662B0D[E14E0000]    <1> 		sub cx, [lastmouseposition + 2]
  7593 000063C9 663B15[FE4C0000]    <1> 		cmp dx, [resolutionx2]
  7594 000063D0 7607                <1> 		jbe chkyresdrgicn
  7595 000063D2 668B15[E34E0000]    <1> 		mov dx, [mousecursorposition]
  7596                              <1> 	chkyresdrgicn:
  7597 000063D9 663B0D[124C0000]    <1> 		cmp cx, [resolutiony]
  7598 000063E0 7607                <1> 		jbe nodragicon
  7599 000063E2 668B0D[E54E0000]    <1> 		mov cx, [mousecursorposition + 2]
  7600                              <1> 	nodragicon:
  7601 000063E9 66814E0A0100        <1> 		or word [esi + 10], 1
  7602 000063EF 8B5E0C              <1> 		mov ebx, [esi + 12]
  7603 000063F2 668B460A            <1> 		mov ax, [esi + 10]
  7604 000063F6 8B7602              <1> 		mov esi, [esi + 2]
  7605 000063F9 C705[11730000]0000- <1> 		mov dword [codepointer], 0
  7606 00006401 0000                <1>
  7607 00006403 E8510B0000          <1> 		call showicon
  7608 00006408 E9D8020000          <1> 		jmp doneiconsel
  7609                              <1> 	unselecticon:
  7610 0000640D 6681660AFEFF        <1> 		and word [esi + 10], 0xFFFE
  7611 00006413 8B5E0C              <1> 		mov ebx, [esi + 12]
  7612 00006416 668B460A            <1> 		mov ax, [esi + 10]
  7613 0000641A 8B7602              <1> 		mov esi, [esi + 2]
  7614 0000641D 891D[11730000]      <1> 		mov [codepointer], ebx
  7615 00006423 E8310B0000          <1> 		call showicon
  7616 00006428 E9B8020000          <1> 		jmp doneiconsel
  7617                              <1> 	textselected:
  7618 0000642D 8B5E02              <1> 		mov ebx, [esi + 2]
  7619 00006430 668B5606            <1> 		mov dx, [esi + 6]
  7620 00006434 6689D0              <1> 		mov ax, dx
  7621 00006437 668B4E08            <1> 		mov cx, [esi + 8]
  7622                              <1> 	lengthtesttext:
  7623 0000643B 803B00              <1> 		cmp byte [ebx], 0
  7624 0000643E 7407                <1> 		je donetesttextlength
  7625 00006440 43                  <1> 		inc ebx
  7626 00006441 66051000            <1> 		add ax, 16
  7627 00006445 EBF4                <1> 		jmp lengthtesttext
  7628                              <1> 	donetesttextlength:
  7629 00006447 6689CB              <1> 		mov bx, cx
  7630 0000644A 6681C30F00          <1> 		add bx, 15
  7631 0000644F 813D[22620000]0100- <1> 		cmp dword [dragging], 1
  7632 00006457 0000                <1>
  7633 00006459 7468                <1> 		je dragtext
  7634 0000645B 813D[22620000]0000- <1> 		cmp dword [dragging], 0
  7635 00006463 0000                <1>
  7636 00006465 7411                <1> 		je nodragtextcheck
  7637 00006467 3935[22620000]      <1> 		cmp dword [dragging], esi
  7638 0000646D 0F8559020000        <1> 		jne near nexticonsel
  7639 00006473 E94B000000          <1> 		jmp dragtext
  7640                              <1> 	nodragtextcheck:
  7641 00006478 663915[E34E0000]    <1> 		cmp [mousecursorposition], dx
  7642 0000647F 0F8247020000        <1> 		jb near nexticonsel
  7643 00006485 663905[E34E0000]    <1> 		cmp [mousecursorposition], ax
  7644 0000648C 0F873A020000        <1> 		ja near nexticonsel
  7645 00006492 66390D[E54E0000]    <1> 		cmp [mousecursorposition + 2], cx
  7646 00006499 0F822D020000        <1> 		jb near nexticonsel
  7647 0000649F 66391D[E54E0000]    <1> 		cmp [mousecursorposition + 2], bx
  7648 000064A6 0F8720020000        <1> 		ja near nexticonsel
  7649 000064AC 668B460A            <1> 		mov ax, [esi + 10]
  7650 000064B0 66250100            <1> 		and ax, 1
  7651 000064B4 663D0100            <1> 		cmp ax, 1
  7652 000064B8 0F84AB000000        <1> 		je near unselecttext
  7653 000064BE E986000000          <1> 		jmp nodragtext
  7654                              <1> 	dragtext:
  7655 000064C3 663915[DF4E0000]    <1> 		cmp [lastmouseposition], dx
  7656 000064CA 0F82FC010000        <1> 		jb near nexticonsel
  7657 000064D0 663905[DF4E0000]    <1> 		cmp [lastmouseposition], ax
  7658 000064D7 0F87EF010000        <1> 		ja near nexticonsel
  7659 000064DD 66390D[E14E0000]    <1> 		cmp [lastmouseposition + 2], cx
  7660 000064E4 0F82E2010000        <1> 		jb near nexticonsel
  7661 000064EA 66391D[E14E0000]    <1> 		cmp [lastmouseposition + 2], bx
  7662 000064F1 0F87D5010000        <1> 		ja near nexticonsel
  7663 000064F7 668B460A            <1> 		mov ax, [esi + 10]
  7664 000064FB 2410                <1> 		and al, 00010000b
  7665 000064FD 663D1000            <1> 		cmp ax, 00010000b
  7666 00006501 0F8442000000        <1> 		je near nodragtext
  7667 00006507 8935[22620000]      <1> 		mov [dragging], esi
  7668 0000650D 662B15[DF4E0000]    <1> 		sub dx, [lastmouseposition]
  7669 00006514 660315[E34E0000]    <1> 		add dx, [mousecursorposition]
  7670 0000651B 66030D[E54E0000]    <1> 		add cx, [mousecursorposition + 2]
  7671 00006522 662B0D[E14E0000]    <1> 		sub cx, [lastmouseposition + 2]
  7672 00006529 663B15[FE4C0000]    <1> 		cmp dx, [resolutionx2]
  7673 00006530 7607                <1> 		jbe chkyresdrgtxt
  7674 00006532 668B15[E34E0000]    <1> 		mov dx, [mousecursorposition]
  7675                              <1> 	chkyresdrgtxt:
  7676 00006539 663B0D[124C0000]    <1> 		cmp cx, [resolutiony]
  7677 00006540 7607                <1> 		jbe nodragtext
  7678 00006542 668B0D[E54E0000]    <1> 		mov cx, [mousecursorposition + 2]
  7679                              <1> 	nodragtext:
  7680 00006549 66814E0A0100        <1> 		or word [esi + 10], 1
  7681 0000654F 8B5E0C              <1> 		mov ebx, [esi + 12]
  7682 00006552 891D[11730000]      <1> 		mov [codepointer], ebx
  7683 00006558 668B460A            <1> 		mov ax, [esi + 10]
  7684 0000655C 8B7602              <1> 		mov esi, [esi + 2]
  7685 0000655F E84B050000          <1> 		call showstring
  7686 00006564 E97C010000          <1> 		jmp doneiconsel
  7687                              <1> 	unselecttext:
  7688 00006569 6681660AFEFF        <1> 		and word [esi + 10], 0xFFFE
  7689 0000656F 8B5E0C              <1> 		mov ebx, [esi + 12]
  7690 00006572 668B460A            <1> 		mov ax, [esi + 10]
  7691 00006576 8B7602              <1> 		mov esi, [esi + 2]
  7692 00006579 C705[11730000]0000- <1> 		mov dword [codepointer], 0
  7693 00006581 0000                <1>
  7694 00006583 E827050000          <1> 		call showstring
  7695 00006588 E958010000          <1> 		jmp doneiconsel
  7696                              <1> windowselect:
  7697 0000658D 8B7E02              <1> 		mov edi, [esi + 2]
  7698 00006590 668B5606            <1> 		mov dx, [esi + 6]
  7699 00006594 6689D0              <1> 		mov ax, dx
  7700 00006597 668B4E08            <1> 		mov cx, [esi + 8]
  7701 0000659B 6689CB              <1> 		mov bx, cx
  7702 0000659E 6681C31000          <1> 		add bx, 16
  7703 000065A3 813D[22620000]0100- <1> 		cmp dword [dragging], 1
  7704 000065AB 0000                <1>
  7705 000065AD 746D                <1> 		je dragwin
  7706 000065AF 813D[22620000]0000- <1> 		cmp dword [dragging], 0
  7707 000065B7 0000                <1>
  7708 000065B9 7411                <1> 		je nodragwincheck
  7709 000065BB 3935[22620000]      <1> 		cmp dword [dragging], esi
  7710 000065C1 0F8505010000        <1> 		jne near nexticonsel
  7711 000065C7 E950000000          <1> 		jmp dragwin
  7712                              <1> 	nodragwincheck:
  7713 000065CC 663905[E34E0000]    <1> 		cmp [mousecursorposition], ax
  7714 000065D3 0F82F3000000        <1> 		jb near nexticonsel
  7715 000065D9 660307              <1> 		add ax, [edi]
  7716 000065DC 660307              <1> 		add ax, [edi]
  7717 000065DF 663905[E34E0000]    <1> 		cmp [mousecursorposition], ax
  7718 000065E6 0F87E0000000        <1> 		ja near nexticonsel
  7719 000065EC 66390D[E54E0000]    <1> 		cmp [mousecursorposition + 2], cx
  7720 000065F3 0F82D3000000        <1> 		jb near nexticonsel
  7721 000065F9 66391D[E54E0000]    <1> 		cmp [mousecursorposition + 2], bx
  7722 00006600 0F87C6000000        <1> 		ja near nexticonsel
  7723 00006606 662D1400            <1> 		sub ax, 20
  7724 0000660A 663905[E34E0000]    <1> 		cmp [mousecursorposition], ax
  7725 00006611 0F8795000000        <1> 		ja near killwin
  7726 00006617 E97C000000          <1> 		jmp nodragwin
  7727                              <1> 	dragwin:
  7728 0000661C 663905[DF4E0000]    <1> 		cmp [lastmouseposition], ax
  7729 00006623 0F82A3000000        <1> 		jb near nexticonsel
  7730 00006629 660307              <1> 		add ax, [edi]
  7731 0000662C 660307              <1> 		add ax, [edi]
  7732 0000662F 663905[DF4E0000]    <1> 		cmp [lastmouseposition], ax
  7733 00006636 0F8790000000        <1> 		ja near nexticonsel
  7734 0000663C 66390D[E14E0000]    <1> 		cmp [lastmouseposition + 2], cx
  7735 00006643 0F8283000000        <1> 		jb near nexticonsel
  7736 00006649 66391D[E14E0000]    <1> 		cmp [lastmouseposition + 2], bx
  7737 00006650 0F8776000000        <1> 		ja near nexticonsel
  7738 00006656 8935[22620000]      <1> 		mov [dragging], esi
  7739 0000665C 662B15[DF4E0000]    <1> 		sub dx, [lastmouseposition]
  7740 00006663 660315[E34E0000]    <1> 		add dx, [mousecursorposition]
  7741 0000666A 66030D[E54E0000]    <1> 		add cx, [mousecursorposition + 2]
  7742 00006671 662B0D[E14E0000]    <1> 		sub cx, [lastmouseposition + 2]
  7743 00006678 663B15[FE4C0000]    <1> 		cmp dx, [resolutionx2]
  7744 0000667F 7607                <1> 		jbe chkyresdrgwin
  7745 00006681 668B15[E34E0000]    <1> 		mov dx, [mousecursorposition]
  7746                              <1> 	chkyresdrgwin:
  7747 00006688 663B0D[124C0000]    <1> 		cmp cx, [resolutiony]
  7748 0000668F 7607                <1> 		jbe nodragwin
  7749 00006691 668B0D[E54E0000]    <1> 		mov cx, [mousecursorposition + 2]
  7750                              <1> 	nodragwin:
  7751 00006698 8B5E0C              <1> 		mov ebx, [esi + 12]
  7752 0000669B 668B460A            <1> 		mov ax, [esi + 10]
  7753 0000669F 8B7602              <1> 		mov esi, [esi + 2]
  7754 000066A2 E870040000          <1> 		call showwindow
  7755 000066A7 E939000000          <1> 		jmp doneiconsel
  7756                              <1> 	killwin:
  7757 000066AC 66C7060000          <1> 		mov word [esi], 0
  7758 000066B1 C605[99230000]00    <1> 		mov byte [termguion], 0
  7759 000066B8 E8CDF8FFFF          <1> 		call guiclear
  7760 000066BD E8A7000000          <1> 		call reloadallgraphics
  7761 000066C2 E914F9FFFF          <1> 		jmp guistart
  7762 000066C7 E93A000000          <1> 		jmp doneiconsel2
  7763                              <1> 	nexticonsel:
  7764 000066CC 6681660AFEFF        <1> 		and word [esi + 10], 0xFFFE
  7765 000066D2 81C610000000        <1> 		add esi, 16
  7766 000066D8 81FE[4FBB0000]      <1> 		cmp esi, graphicstableend
  7767 000066DE 7305                <1> 		jae doneiconsel
  7768 000066E0 E9BCFBFFFF          <1> 		jmp clicon2
  7769                              <1> 	doneiconsel:
  7770 000066E5 813D[22620000]0100- <1> 		cmp dword [dragging], 1
  7771 000066ED 0000                <1>
  7772 000066EF 7315                <1> 		jae doneiconsel2
  7773 000066F1 813D[11730000]0000- <1> 		cmp dword [codepointer], 0
  7774 000066F9 0000                <1>
  7775 000066FB 7409                <1> 		je doneiconsel2
  7776 000066FD 8B1D[11730000]      <1> 		mov ebx, [codepointer]
  7777 00006703 FFD3                <1> 		call ebx 
  7778 00006705 C3                  <1> 		ret
  7779                              <1> 	doneiconsel2:
  7780 00006706 A0[F44F0000]        <1> 		mov al, [LBUTTON]
  7781 0000670B A2[20620000]        <1> 		mov [pLBUTTON], al
  7782 00006710 A0[F54F0000]        <1> 		mov al, [RBUTTON]
  7783 00006715 A2[21620000]        <1> 		mov [pRBUTTON], al
  7784 0000671A 66813D[22620000]01- <1> 		cmp word [dragging], 1
  7785 00006722 00                  <1>
  7786 00006723 0F860A000000        <1> 		jbe near noreloadgraphicsclick
  7787 00006729 E8D6F9FFFF          <1> call clearmousecursor
  7788 0000672E E836000000          <1> call reloadallgraphics
  7789                              <1> noreloadgraphicsclick:
  7790 00006733 31C9                <1> 		xor ecx, ecx
  7791 00006735 31D2                <1> 		xor edx, edx
  7792 00006737 30E4                <1> 		xor ah, ah
  7793 00006739 B0FE                <1> 		mov al, 254
  7794 0000673B 668B15[E34E0000]    <1> 		mov dx, [mousecursorposition]
  7795 00006742 668B0D[E54E0000]    <1> 		mov cx, [mousecursorposition + 2]
  7796 00006749 66BBE738            <1> 		mov bx, 0011100011100111b
  7797 0000674D C605[01610000]01    <1> 		mov byte [showcursorfonton], 1
  7798 00006754 E8DA080000          <1> 		call showfontvesa
  7799 00006759 C605[01610000]00    <1> 		mov byte [showcursorfonton], 0
  7800 00006760 C3                  <1> 		ret
  7801 00006761 00000000            <1> lastdrag dw 0,0
  7802 00006765 00000000            <1> grpctblpos dw 0,0
  7803                              <1> 
  7804                              <1> reloadallgraphics:
  7805 00006769 BF[4FB90000]        <1> 		mov edi, graphicstable
  7806                              <1> reloadgraphicsloop:
  7807 0000676E 8B7702              <1> 		mov esi, [edi + 2]
  7808 00006771 668B5706            <1> 		mov dx, [edi + 6]
  7809 00006775 668B4F08            <1> 		mov cx, [edi + 8]
  7810 00006779 668B07              <1> 		mov ax, [edi]
  7811 0000677C 668B5F0A            <1> 		mov bx, [edi + 10]
  7812 00006780 893D[65670000]      <1> 		mov [grpctblpos], edi
  7813 00006786 3B3D[22620000]      <1> 		cmp edi, [dragging]
  7814 0000678C 741E                <1> 		je loadedgraphic
  7815 0000678E 663D0100            <1> 		cmp ax, 1
  7816 00006792 0F8436000000        <1> 		je near icongraphic
  7817 00006798 663D0200            <1> 		cmp ax, 2
  7818 0000679C 0F843C000000        <1> 		je near stringgraphic
  7819 000067A2 663D0300            <1> 		cmp ax, 3
  7820 000067A6 0F8416000000        <1> 		je near windowgraphic
  7821 000067AC 8B3D[65670000]      <1> loadedgraphic:  mov edi, [grpctblpos]
  7822 000067B2 81C710000000        <1> 		add edi, 16
  7823 000067B8 81FF[4FBB0000]      <1> 		cmp edi, graphicstableend
  7824 000067BE 732E                <1> 		jae donereloadgraphics
  7825 000067C0 EBAC                <1> 		jmp reloadgraphicsloop
  7826 000067C2 E8F8030000          <1> windowgraphic:	call showwindow2
  7827 000067C7 E8B4B7FFFF          <1> 		call cleardouble
  7828 000067CC EBDE                <1> 		jmp loadedgraphic
  7829 000067CE 80E301              <1> icongraphic:	and bl, 1
  7830 000067D1 881D[15730000]      <1> 		mov [iconselected], bl
  7831 000067D7 E890070000          <1> 		call showicon2
  7832 000067DC EBCE                <1> 		jmp loadedgraphic
  7833 000067DE 80E301              <1> stringgraphic:  and bl, 1
  7834 000067E1 881D[03610000]      <1> 		mov [mouseselecton], bl
  7835 000067E7 E8D6020000          <1> 		call showstring2
  7836 000067EC EBBE                <1> 		jmp loadedgraphic
  7837                              <1> donereloadgraphics:
  7838 000067EE 8B3D[22620000]      <1> 		mov edi, [dragging]
  7839 000067F4 81FF[4FB90000]      <1> 		cmp edi, graphicstable
  7840 000067FA 7226                <1> 		jb notcorrectdrag
  7841 000067FC 668B07              <1> 		mov ax, [edi]
  7842 000067FF 8B7702              <1> 		mov esi, [edi + 2]
  7843 00006802 668B5706            <1> 		mov dx, [edi + 6]
  7844 00006806 668B4F08            <1> 		mov cx, [edi + 8]
  7845 0000680A 668B5F0A            <1> 		mov bx, [edi + 10]
  7846 0000680E 663D0100            <1> 		cmp ax, 1
  7847 00006812 750F                <1> 		jne noticondragging
  7848 00006814 80E301              <1> 		and bl, 1
  7849 00006817 881D[15730000]      <1> 		mov [iconselected], bl
  7850 0000681D E84A070000          <1> 		call showicon2
  7851                              <1> notcorrectdrag:
  7852 00006822 C3                  <1> 		ret
  7853                              <1> 
  7854                              <1> 	noticondragging:
  7855 00006823 663D0200            <1> 		cmp ax, 2
  7856 00006827 75F9                <1> 		jne notcorrectdrag
  7857 00006829 80E301              <1> 		and bl, 1
  7858 0000682C 881D[03610000]      <1> 		mov [mouseselecton], bl
  7859 00006832 E88B020000          <1> 		call showstring2
  7860 00006837 EBE9                <1> 		jmp notcorrectdrag
  7861                              <1> 
  7862 00006839 00<rept>            <1> grphbuf times 16 db 0
  7863                              <1> 	graphicsadd:
  7864 00006849 BF[4FB90000]        <1> 		mov edi, graphicstable
  7865                              <1> 	shwgrph1:
  7866 0000684E 397702              <1> 		cmp dword [edi + 2], esi
  7867 00006851 7414                <1> 		je showgraphicsreplace2
  7868 00006853 81C710000000        <1> 		add edi, 16
  7869 00006859 81FF[4FBB0000]      <1> 		cmp edi, graphicstableend
  7870 0000685F 0F832F020000        <1> 		jae near showgraphicsnew
  7871 00006865 EBE7                <1> 		jmp shwgrph1
  7872                              <1> 	showgraphicsreplace2:
  7873 00006867 8935[3B680000]      <1> 		mov [grphbuf + 2], esi
  7874 0000686D 668915[3F680000]    <1> 		mov [grphbuf + 6], dx
  7875 00006874 66890D[41680000]    <1> 		mov [grphbuf + 8], cx
  7876 0000687B 891D[45680000]      <1> 		mov [grphbuf + 12], ebx
  7877 00006881 30FF                <1> 		xor bh, bh
  7878 00006883 88E3                <1> 		mov bl, ah
  7879 00006885 30E4                <1> 		xor ah, ah
  7880 00006887 66A3[43680000]      <1> 		mov [grphbuf + 10], ax	
  7881 0000688D 66891D[39680000]    <1> 		mov [grphbuf], bx
  7882 00006894 66A1[39680000]      <1> 		mov ax, [grphbuf]
  7883 0000689A 663D0100            <1> 		cmp ax, 1
  7884 0000689E 0F8419000000        <1> 		je near replaceicon
  7885 000068A4 663D0200            <1> 		cmp ax, 2
  7886 000068A8 0F8493000000        <1> 		je near replacestring
  7887 000068AE 663D0300            <1> 		cmp ax, 3
  7888 000068B2 0F840F010000        <1> 		je near replacewindow
  7889 000068B8 E9B4010000          <1> 		jmp showgraphicsreplace
  7890                              <1> 	replaceicon:
  7891 000068BD 893D[26620000]      <1> 		mov [lastpos], edi
  7892 000068C3 8935[2A620000]      <1> 		mov [lastpos + 4], esi
  7893 000068C9 8B7702              <1> 		mov esi, [edi + 2]
  7894 000068CC 668B5F0C            <1> 		mov bx, [edi + 12]
  7895 000068D0 668B5706            <1> 		mov dx, [edi + 6]
  7896 000068D4 668B4F08            <1> 		mov cx, [edi + 8]
  7897 000068D8 668B06              <1> 		mov ax, [esi]
  7898 000068DB 66A3[2E620000]      <1> 		mov [colorbuf], ax
  7899 000068E1 66A1[C75F0000]      <1> 		mov ax, [background]
  7900 000068E7 668906              <1> 		mov [esi], ax
  7901 000068EA 8B5F0C              <1> 		mov ebx, [edi + 12]
  7902 000068ED 668B470A            <1> 		mov ax, [edi + 10]
  7903 000068F1 2401                <1> 		and al, 1
  7904 000068F3 A2[15730000]        <1> 		mov [iconselected], al
  7905 000068F8 668B470A            <1> 		mov ax, [edi + 10]
  7906 000068FC E86B060000          <1> 		call showicon2
  7907 00006901 8B3D[26620000]      <1> 		mov edi, [lastpos]
  7908 00006907 8B7702              <1> 		mov esi, [edi + 2]
  7909 0000690A 66A1[2E620000]      <1> 		mov ax, [colorbuf]
  7910 00006910 668906              <1> 		mov [esi], ax
  7911 00006913 8B35[2A620000]      <1> 		mov esi, [lastpos + 4]
  7912 00006919 668B15[3F680000]    <1> 		mov dx, [grphbuf + 6]
  7913 00006920 668B0D[41680000]    <1> 		mov cx, [grphbuf + 8]
  7914 00006927 668B1D[39680000]    <1> 		mov bx, [grphbuf]
  7915 0000692E 66A1[43680000]      <1> 		mov ax, [grphbuf + 10]
  7916 00006934 88DC                <1> 		mov ah, bl
  7917 00006936 8B1D[45680000]      <1> 		mov ebx, [grphbuf + 12]
  7918 0000693C E930010000          <1> 		jmp showgraphicsreplace
  7919                              <1> 	replacestring:
  7920 00006941 893D[26620000]      <1> 		mov [lastpos], edi
  7921 00006947 8935[2A620000]      <1> 		mov [lastpos + 4], esi
  7922 0000694D 8B5F0C              <1> 		mov ebx, [edi + 12]
  7923 00006950 8B7702              <1> 		mov esi, [edi + 2]
  7924 00006953 668B5706            <1> 		mov dx, [edi + 6]
  7925 00006957 668B4F08            <1> 		mov cx, [edi + 8]
  7926 0000695B 66A1[FA6A0000]      <1> 		mov ax, [colorfont2]
  7927 00006961 66A3[2E620000]      <1> 		mov [colorbuf], ax
  7928 00006967 66A1[C75F0000]      <1> 		mov ax, [background]
  7929 0000696D 66A3[FA6A0000]      <1> 		mov [colorfont2], ax		
  7930 00006973 8B5F0C              <1> 		mov ebx, [edi + 12]
  7931 00006976 668B470A            <1> 		mov ax, [edi + 10]
  7932 0000697A 2401                <1> 		and al, 1
  7933 0000697C A2[03610000]        <1> 		mov [mouseselecton], al
  7934 00006981 668B470A            <1> 		mov ax, [edi + 10]
  7935 00006985 E838010000          <1> 		call showstring2
  7936 0000698A 66A1[2E620000]      <1> 		mov ax, [colorbuf]
  7937 00006990 66A3[FA6A0000]      <1> 		mov [colorfont2], ax
  7938 00006996 8B3D[26620000]      <1> 		mov edi, [lastpos]
  7939 0000699C 8B7702              <1> 		mov esi, [edi + 2]
  7940 0000699F 668B15[3F680000]    <1> 		mov dx, [grphbuf + 6]
  7941 000069A6 668B0D[41680000]    <1> 		mov cx, [grphbuf + 8]
  7942 000069AD 668B1D[39680000]    <1> 		mov bx, [grphbuf]
  7943 000069B4 66A1[43680000]      <1> 		mov ax, [grphbuf + 10]
  7944 000069BA 88DC                <1> 		mov ah, bl
  7945 000069BC 8B1D[45680000]      <1> 		mov ebx, [grphbuf + 12]
  7946 000069C2 E9AA000000          <1> 		jmp showgraphicsreplace
  7947                              <1> 	replacewindow:
  7948 000069C7 893D[26620000]      <1> 		mov [lastpos], edi
  7949 000069CD 8935[2A620000]      <1> 		mov [lastpos + 4], esi
  7950 000069D3 8B7702              <1> 		mov esi, [edi + 2]
  7951 000069D6 8B3D[096B0000]      <1> 		mov edi, [windowbufloc]
  7952 000069DC 31D2                <1> 		xor edx, edx
  7953 000069DE 668B15[FE4C0000]    <1> 		mov dx, [resolutionx2]
  7954 000069E5 C1E204              <1> 		shl edx, 4
  7955 000069E8 29D7                <1> 		sub edi, edx
  7956 000069EA 31D2                <1> 		xor edx, edx
  7957 000069EC 668B16              <1> 		mov dx, [esi]
  7958 000069EF 660316              <1> 		add dx, [esi]
  7959 000069F2 668B4E02            <1> 		mov cx, [esi + 2]
  7960 000069F6 6681C11000          <1> 		add cx, 16
  7961 000069FB 66A1[C75F0000]      <1> 		mov ax, [background]
  7962                              <1> 	clearwindow:
  7963 00006A01 668907              <1> 		mov [edi], ax
  7964 00006A04 81C702000000        <1> 		add edi, 2
  7965 00006A0A 81EA02000000        <1> 		sub edx, 2
  7966 00006A10 81FA00000000        <1> 		cmp edx, 0
  7967 00006A16 75E9                <1> 		jne clearwindow
  7968 00006A18 6649                <1> 		dec cx
  7969 00006A1A 668B15[FE4C0000]    <1> 		mov dx, [resolutionx2]
  7970 00006A21 662B16              <1> 		sub dx, [esi]
  7971 00006A24 662B16              <1> 		sub dx, [esi]
  7972 00006A27 01D7                <1> 		add edi, edx
  7973 00006A29 668B16              <1> 		mov dx, [esi]
  7974 00006A2C 660316              <1> 		add dx, [esi]
  7975 00006A2F 6681F90000          <1> 		cmp cx, 0
  7976 00006A34 75CB                <1> 		jne clearwindow
  7977 00006A36 C605[9A230000]00    <1> 		mov byte [termcopyon], 0
  7978 00006A3D 8B3D[26620000]      <1> 		mov edi, [lastpos]
  7979 00006A43 8B35[3B680000]      <1> 		mov esi, [grphbuf + 2]
  7980 00006A49 668B15[3F680000]    <1> 		mov dx, [grphbuf + 6]
  7981 00006A50 668B0D[41680000]    <1> 		mov cx, [grphbuf + 8]
  7982 00006A57 668B1D[39680000]    <1> 		mov bx, [grphbuf]
  7983 00006A5E 66A1[43680000]      <1> 		mov ax, [grphbuf + 10]
  7984 00006A64 88DC                <1> 		mov ah, bl
  7985 00006A66 8B1D[45680000]      <1> 		mov ebx, [grphbuf + 12]
  7986 00006A6C E900000000          <1> 		jmp showgraphicsreplace
  7987                              <1> 	showgraphicsreplace:
  7988 00006A71 897702              <1> 		mov [edi + 2], esi
  7989 00006A74 66895706            <1> 		mov [edi + 6], dx
  7990 00006A78 66894F08            <1> 		mov [edi + 8], cx
  7991 00006A7C 895F0C              <1> 		mov [edi + 12], ebx
  7992 00006A7F 30FF                <1> 		xor bh, bh
  7993 00006A81 88E3                <1> 		mov bl, ah
  7994 00006A83 30E4                <1> 		xor ah, ah
  7995 00006A85 6689470A            <1> 		mov [edi + 10], ax
  7996 00006A89 66891F              <1> 		mov [edi], bx
  7997 00006A8C 8B5F0C              <1> 		mov ebx, [edi + 12]
  7998 00006A8F 668B470A            <1> 		mov ax, [edi + 10]
  7999 00006A93 C3                  <1> 		ret
  8000                              <1> 	showgraphicsnew:
  8001 00006A94 BF[4FB90000]        <1> 		mov edi, graphicstable
  8002                              <1> 	shwgrph2:
  8003 00006A99 66813F0000          <1> 		cmp word [edi], 0
  8004 00006A9E 74D1                <1> 		je showgraphicsreplace
  8005 00006AA0 81C710000000        <1> 		add edi, 16
  8006 00006AA6 81FF[4FBB0000]      <1> 		cmp edi, graphicstableend
  8007 00006AAC 72EB                <1> 		jb shwgrph2
  8008                              <1> 	showgraphicsdone:
  8009 00006AAE C3                  <1> 		ret
  8010                              <1> 
  8011                              <1> 	showstring:
  8012 00006AAF A2[03610000]        <1> 		mov [mouseselecton], al
  8013 00006AB4 8025[03610000]01    <1> 		and byte [mouseselecton], 1
  8014 00006ABB B402                <1> 		mov ah, 2
  8015 00006ABD E887FDFFFF          <1> 		call graphicsadd
  8016                              <1> 	showstring2:
  8017 00006AC2 30E4                <1> 		xor ah, ah
  8018 00006AC4 8A06                <1> 		mov al, [esi]
  8019 00006AC6 3C00                <1> 		cmp al, 0
  8020 00006AC8 7428                <1> 		je doneshowstring
  8021 00006ACA 46                  <1> 		inc esi
  8022 00006ACB 3CFF                <1> 		cmp al, 255
  8023 00006ACD 74F3                <1> 		je showstring2
  8024 00006ACF 8935[C2720000]      <1> 		mov [showstringesi], esi
  8025 00006AD5 668B1D[FA6A0000]    <1> 		mov bx, [colorfont2]
  8026 00006ADC E852050000          <1> 		call showfontvesa
  8027 00006AE1 3C0A                <1> 		cmp al, 10
  8028 00006AE3 7405                <1> 		je noproceedshst
  8029 00006AE5 6681C20800          <1> 		add dx, 8
  8030                              <1> 	noproceedshst:
  8031 00006AEA 8B35[C2720000]      <1> 		mov esi, [showstringesi]
  8032 00006AF0 EBD0                <1> 		jmp showstring2
  8033                              <1> 	doneshowstring:
  8034 00006AF2 C605[03610000]00    <1> 		mov byte [mouseselecton], 0
  8035 00006AF9 C3                  <1> 		ret
  8036                              <1> 
  8037 00006AFA FFFF                <1> colorfont2 dw 0xFFFF
  8038 00006AFC 00                  <1> colorcache db 0
  8039 00006AFD 0000                <1> winvcopystx dw 0
  8040 00006AFF 0000                <1> winvcopysty dw 0
  8041 00006B01 0000                <1> winvcopydx dw 0
  8042 00006B03 0000                <1> winvcopycx dw 0
  8043 00006B05 FFFF0000            <1> windowcolor dw 0xFFFF,0x0
  8044 00006B09 00000000            <1> windowbufloc: dw 0,0
  8045 00006B0D 00000000            <1> windowinfobuf dd 0
  8046 00006B11 0000                <1> termcol dw 0
  8047 00006B13 00000000            <1> wincopyendpos dd 0
  8048                              <1> 
  8049                              <1> 	showwindow:	;;windowstuff in si, position in (dx, cx), nothing in ax, code in bx
  8050 00006B17 C605[99230000]01    <1> 		mov byte [termguion], 1
  8051 00006B1E 6681C11000          <1> 		add cx, 16
  8052 00006B23 668915[FD6A0000]    <1> 		mov [winvcopystx], dx
  8053 00006B2A 66890D[FF6A0000]    <1> 		mov [winvcopysty], cx
  8054 00006B31 8935[0D6B0000]      <1> 		mov [windowinfobuf], esi
  8055 00006B37 668B16              <1> 		mov dx, [esi]
  8056 00006B3A 668B4E02            <1> 		mov cx, [esi + 2]
  8057 00006B3E 31C0                <1> 		xor eax, eax
  8058 00006B40 31DB                <1> 		xor ebx, ebx
  8059 00006B42 6689D0              <1> 		mov ax, dx
  8060 00006B45 6689CB              <1> 		mov bx, cx
  8061 00006B48 66C1E803            <1> 		shr ax, 3
  8062 00006B4C 66C1EB04            <1> 		shr bx, 4
  8063 00006B50 66A3[116B0000]      <1> 		mov [termcol], ax
  8064 00006B56 A2[5D250000]        <1> 		mov [charxy], al
  8065 00006B5B 881D[5E250000]      <1> 		mov [charxy + 1], bl
  8066 00006B61 BF[50BC0000]        <1> 		mov edi, videobuf
  8067 00006B66 81FB00000000        <1> 		cmp ebx, 0
  8068 00006B6C 0F84CD030000        <1> 		je near donewincopynow	;AAAAAAAAA!!!!!
  8069                              <1> 	findendposwin:
  8070 00006B72 01C7                <1> 		add edi, eax
  8071 00006B74 01C7                <1> 		add edi, eax
  8072 00006B76 4B                  <1> 		dec ebx
  8073 00006B77 81FB00000000        <1> 		cmp ebx, 0
  8074 00006B7D 77F3                <1> 		ja findendposwin
  8075 00006B7F 893D[136B0000]      <1> 		mov [wincopyendpos], edi
  8076 00006B85 31FF                <1> 		xor edi, edi
  8077 00006B87 6631C0              <1> 		xor ax, ax
  8078 00006B8A 6631DB              <1> 		xor bx, bx
  8079 00006B8D 6601D2              <1> 		add dx, dx
  8080 00006B90 668915[016B0000]    <1> 		mov [winvcopydx], dx
  8081 00006B97 66890D[036B0000]    <1> 		mov [winvcopycx], cx
  8082 00006B9E 668B0D[FF6A0000]    <1> 		mov cx, [winvcopysty]
  8083 00006BA5 6681E91000          <1> 		sub cx, 16
  8084 00006BAA 668B15[FD6A0000]    <1> 		mov dx, [winvcopystx]
  8085 00006BB1 C605[9A230000]00    <1> 		mov byte [termcopyon], 0
  8086 00006BB8 B403                <1> 		mov ah, 3
  8087 00006BBA E88AFCFFFF          <1> 		call graphicsadd
  8088                              <1> 	showwindow2:
  8089 00006BBF 6681C11000          <1> 		add cx, 16
  8090 00006BC4 668915[FD6A0000]    <1> 		mov [winvcopystx], dx
  8091 00006BCB 66890D[FF6A0000]    <1> 		mov [winvcopysty], cx
  8092 00006BD2 668B16              <1> 		mov dx, [esi]
  8093 00006BD5 668B4E02            <1> 		mov cx, [esi + 2]
  8094 00006BD9 6601D2              <1> 		add dx, dx
  8095 00006BDC 668915[016B0000]    <1> 		mov [winvcopydx], dx
  8096 00006BE3 66890D[036B0000]    <1> 		mov [winvcopycx], cx
  8097 00006BEA 8B3D[096B0000]      <1> 		mov edi, [windowbufloc]
  8098 00006BF0 31D2                <1> 		xor edx, edx
  8099 00006BF2 668B15[FE4C0000]    <1> 		mov dx, [resolutionx2]
  8100 00006BF9 C1E204              <1> 		shl edx, 4
  8101 00006BFC 29D7                <1> 		sub edi, edx
  8102 00006BFE 803D[9A230000]00    <1> 		cmp byte [termcopyon], 0
  8103 00006C05 7538                <1> 		jne nocleartitlebarpos
  8104 00006C07 8B3D[264C0000]      <1> 		mov edi, [physbaseptr]
  8105 00006C0D 31D2                <1> 		xor edx, edx
  8106 00006C0F 668B15[FD6A0000]    <1> 		mov dx, [winvcopystx]
  8107 00006C16 01D7                <1> 		add edi, edx
  8108 00006C18 668B0D[FF6A0000]    <1> 		mov cx, [winvcopysty]
  8109 00006C1F 6681E91000          <1> 		sub cx, 16
  8110 00006C24 6681F90000          <1> 		cmp cx, 0
  8111 00006C29 7414                <1> 		je nocleartitlebarpos
  8112                              <1> 	cleartitlebarpos:
  8113 00006C2B 31D2                <1> 		xor edx, edx
  8114 00006C2D 668B15[FE4C0000]    <1> 		mov dx, [resolutionx2]
  8115 00006C34 01D7                <1> 		add edi, edx
  8116 00006C36 6649                <1> 		dec cx
  8117 00006C38 6681F90000          <1> 		cmp cx, 0
  8118 00006C3D 75EC                <1> 		jne cleartitlebarpos
  8119                              <1> 	nocleartitlebarpos:
  8120 00006C3F 66B91000            <1> 		mov cx, 16
  8121 00006C43 668B15[016B0000]    <1> 		mov dx, [winvcopydx]
  8122 00006C4A 6681F90000          <1> 		cmp cx, 0
  8123 00006C4F 0F8448000000        <1> 		je near canceltitlebarput
  8124 00006C55 6681FA0000          <1> 		cmp dx, 0
  8125 00006C5A 0F843D000000        <1> 		je near canceltitlebarput
  8126                              <1> 	titlebarput:
  8127 00006C60 66A1[056B0000]      <1> 		mov ax, [windowcolor]
  8128 00006C66 668907              <1> 		mov [edi], ax
  8129 00006C69 6681EA0200          <1> 		sub dx, 2
  8130 00006C6E 81C702000000        <1> 		add edi, 2
  8131 00006C74 6681FA0000          <1> 		cmp dx, 0
  8132 00006C79 75E5                <1> 		jne titlebarput
  8133 00006C7B 31D2                <1> 		xor edx, edx
  8134 00006C7D 668B15[FE4C0000]    <1> 		mov dx, [resolutionx2]
  8135 00006C84 6649                <1> 		dec cx
  8136 00006C86 662B15[016B0000]    <1> 		sub dx, [winvcopydx]
  8137 00006C8D 01D7                <1> 		add edi, edx
  8138 00006C8F 668B15[016B0000]    <1> 		mov dx, [winvcopydx]
  8139 00006C96 6681F90000          <1> 		cmp cx, 0
  8140 00006C9B 75C3                <1> 		jne titlebarput
  8141                              <1> 	canceltitlebarput:
  8142 00006C9D 893D[096B0000]      <1> 		mov [windowbufloc], edi
  8143 00006CA3 803D[9A230000]02    <1> 		cmp byte [termcopyon], 2
  8144 00006CAA 0F8461000000        <1> 		je near winvcpst
  8145 00006CB0 6631C0              <1> 		xor ax, ax
  8146 00006CB3 81C604000000        <1> 		add esi, 4
  8147 00006CB9 668B15[FD6A0000]    <1> 		mov dx, [winvcopystx]
  8148 00006CC0 668B0D[FF6A0000]    <1> 		mov cx, [winvcopysty]
  8149 00006CC7 6681E91000          <1> 		sub cx, 16
  8150 00006CCC 6631DB              <1> 		xor bx, bx
  8151 00006CCF C605[03610000]01    <1> 		mov byte [mouseselecton], 1
  8152 00006CD6 E8E7FDFFFF          <1> 		call showstring2
  8153 00006CDB B058                <1> 		mov al, "X"
  8154 00006CDD 30E4                <1> 		xor ah, ah
  8155 00006CDF 668B1D[FA6A0000]    <1> 		mov bx, [colorfont2]
  8156 00006CE6 668B15[FD6A0000]    <1> 		mov dx, [winvcopystx]
  8157 00006CED 668B0D[FF6A0000]    <1> 		mov cx, [winvcopysty]
  8158 00006CF4 6681E91000          <1> 		sub cx, 16
  8159 00006CF9 6681EA1400          <1> 		sub dx, 20
  8160 00006CFE 660315[016B0000]    <1> 		add dx, [winvcopydx]
  8161 00006D05 C605[03610000]01    <1> 		mov byte [mouseselecton], 1
  8162 00006D0C E822030000          <1> 		call showfontvesa
  8163                              <1> 	winvcpst:
  8164 00006D11 8B3D[096B0000]      <1> 		mov edi, [windowbufloc]
  8165 00006D17 E97E000000          <1> 		jmp windowvideocopyset
  8166                              <1> 
  8167                              <1> 	windowvideocopy:
  8168 00006D1C 8B35[0D6B0000]      <1> 		mov esi, [windowinfobuf]
  8169 00006D22 668B16              <1> 		mov dx, [esi]
  8170 00006D25 668B4E02            <1> 		mov cx, [esi + 2]
  8171 00006D29 31C0                <1> 		xor eax, eax
  8172 00006D2B 31DB                <1> 		xor ebx, ebx
  8173 00006D2D 6689D0              <1> 		mov ax, dx
  8174 00006D30 6689CB              <1> 		mov bx, cx
  8175 00006D33 66C1E803            <1> 		shr ax, 3
  8176 00006D37 66C1EB04            <1> 		shr bx, 4
  8177 00006D3B 66A3[116B0000]      <1> 		mov [termcol], ax
  8178 00006D41 A2[5D250000]        <1> 		mov [charxy], al
  8179 00006D46 881D[5E250000]      <1> 		mov [charxy + 1], bl
  8180 00006D4C 8B3D[096B0000]      <1> 		mov edi, [windowbufloc]
  8181 00006D52 3B3D[264C0000]      <1> 		cmp edi, [physbaseptr]
  8182 00006D58 0F833C000000        <1> 		jae near windowvideocopyset
  8183 00006D5E 31C9                <1> 		xor ecx, ecx
  8184 00006D60 31D2                <1> 		xor edx, edx
  8185 00006D62 668B15[FD6A0000]    <1> 		mov dx, [winvcopystx]
  8186 00006D69 668B0D[FF6A0000]    <1> 		mov cx, [winvcopysty]
  8187 00006D70 8B3D[264C0000]      <1> 		mov edi, [physbaseptr]
  8188 00006D76 01D7                <1> 		add edi, edx
  8189 00006D78 81F900000000        <1> 		cmp ecx, 0
  8190 00006D7E 741A                <1> 		je windowvideocopyset
  8191                              <1> 	yrescopylp:
  8192 00006D80 31D2                <1> 		xor edx, edx
  8193 00006D82 668B15[FE4C0000]    <1> 		mov dx, [resolutionx2]
  8194 00006D89 01D7                <1> 		add edi, edx
  8195 00006D8B 6649                <1> 		dec cx
  8196 00006D8D 6681F90000          <1> 		cmp cx, 0
  8197 00006D92 75EC                <1> 		jne yrescopylp
  8198 00006D94 893D[096B0000]      <1> 		mov [windowbufloc], edi
  8199                              <1> 	windowvideocopyset:
  8200 00006D9A 6631C9              <1> 		xor cx, cx
  8201 00006D9D 6649                <1> 		dec cx
  8202 00006D9F 66890D[516F0000]    <1> 		mov [charposline], cx
  8203 00006DA6 89FE                <1> 		mov esi, edi
  8204 00006DA8 81EE10000000        <1> 		sub esi, 16
  8205 00006DAE 31D2                <1> 		xor edx, edx
  8206 00006DB0 668B15[FE4C0000]    <1> 		mov dx, [resolutionx2]
  8207 00006DB7 C1E204              <1> 		shl edx, 4
  8208 00006DBA 01D6                <1> 		add esi, edx
  8209 00006DBC BF[50BC0000]        <1> 		mov edi, videobuf
  8210 00006DC1 81EF02000000        <1> 		sub edi, 2
  8211 00006DC7 893D[536F0000]      <1> 		mov [charposvbuf], edi
  8212 00006DCD E96E000000          <1> 		jmp nextcharwin
  8213                              <1> 	copywindow:
  8214 00006DD2 B201                <1> 		mov dl, 1
  8215 00006DD4 D0C6                <1> 		rol dh, 1
  8216 00006DD6 20F2                <1> 		and dl, dh
  8217 00006DD8 803D[FC6A0000]10    <1> 		cmp byte [colorcache], 0x10
  8218 00006DDF 731C                <1> 		jae switchwincolors
  8219 00006DE1 66A1[076B0000]      <1> 		mov ax, [windowcolor + 2]
  8220 00006DE7 668907              <1> 		mov [edi], ax
  8221 00006DEA 80FA00              <1> 		cmp dl, 0
  8222 00006DED 7425                <1> 		je nowritewin
  8223 00006DEF 66A1[056B0000]      <1> 		mov ax, [windowcolor]
  8224 00006DF5 668907              <1> 		mov [edi], ax
  8225 00006DF8 E917000000          <1> 		jmp nowritewin
  8226                              <1> 	switchwincolors:
  8227 00006DFD 66A1[056B0000]      <1> 		mov ax, [windowcolor]
  8228 00006E03 668907              <1> 		mov [edi], ax
  8229 00006E06 80FA00              <1> 		cmp dl, 0
  8230 00006E09 7409                <1> 		je nowritewin
  8231 00006E0B 66A1[076B0000]      <1> 		mov ax, [windowcolor + 2]
  8232 00006E11 668907              <1> 		mov [edi], ax
  8233                              <1> 	nowritewin:
  8234 00006E14 81C702000000        <1> 		add edi, 2
  8235 00006E1A FEC1                <1> 		inc cl
  8236 00006E1C 80F908              <1> 		cmp cl, 8
  8237 00006E1F 75B1                <1> 		jne copywindow
  8238 00006E21 6643                <1> 		inc bx
  8239 00006E23 30C9                <1> 		xor cl, cl
  8240 00006E25 31D2                <1> 		xor edx, edx
  8241 00006E27 668B15[FE4C0000]    <1> 		mov dx, [resolutionx2]
  8242 00006E2E 01D6                <1> 		add esi, edx
  8243 00006E30 89F7                <1> 		mov edi, esi
  8244 00006E32 678AB7[0D77]        <1> 		mov dh, [fonts + bx]
  8245 00006E37 D0CE                <1> 		ror dh, 1
  8246 00006E39 FEC5                <1> 		inc ch
  8247 00006E3B 80FD10              <1> 		cmp ch, 16
  8248 00006E3E 7592                <1> 		jne copywindow
  8249                              <1> 	nextcharwin:
  8250 00006E40 6631C9              <1> 		xor cx, cx
  8251 00006E43 8B3D[536F0000]      <1> 		mov edi, [charposvbuf]
  8252 00006E49 81C702000000        <1> 		add edi, 2
  8253 00006E4F 3B3D[136B0000]      <1> 		cmp edi, [wincopyendpos]
  8254 00006E55 0F83E4000000        <1> 		jae near donewincopynow
  8255 00006E5B 8A7F01              <1> 		mov bh, [edi + 1]
  8256 00006E5E 80FF00              <1> 		cmp bh, 0
  8257 00006E61 7505                <1> 		jne nofixcolorwin
  8258 00006E63 B707                <1> 		mov bh, 7
  8259 00006E65 887F01              <1> 		mov [edi + 1], bh
  8260                              <1> 	nofixcolorwin:
  8261 00006E68 883D[FC6A0000]      <1> 		mov [colorcache], bh
  8262 00006E6E 8A1F                <1> 		mov bl, [edi]
  8263 00006E70 893D[536F0000]      <1> 		mov [charposvbuf], edi
  8264 00006E76 81EF[50BC0000]      <1> 		sub edi, videobuf
  8265 00006E7C 81C7[500C0100]      <1> 		add edi, videobuf2
  8266 00006E82 8A6701              <1> 		mov ah, [edi + 1]
  8267 00006E85 8A07                <1> 		mov al, [edi]
  8268 00006E87 6639D8              <1> 		cmp ax, bx
  8269 00006E8A 7543                <1> 		jne noskipcharcopy
  8270                              <1> 	skipcharcopy:
  8271 00006E8C 81C610000000        <1> 		add esi, 16
  8272 00006E92 668B0D[516F0000]    <1> 		mov cx, [charposline]
  8273 00006E99 6641                <1> 		inc cx
  8274 00006E9B 66890D[516F0000]    <1> 		mov [charposline], cx
  8275 00006EA2 663B0D[116B0000]    <1> 		cmp cx, [termcol]
  8276 00006EA9 7295                <1> 		jb nextcharwin
  8277 00006EAB 6631C9              <1> 		xor cx, cx
  8278 00006EAE 66890D[516F0000]    <1> 		mov [charposline], cx
  8279 00006EB5 31D2                <1> 		xor edx, edx
  8280 00006EB7 668B15[FE4C0000]    <1> 		mov dx, [resolutionx2]
  8281 00006EBE C1E204              <1> 		shl edx, 4
  8282 00006EC1 662B15[016B0000]    <1> 		sub dx, [winvcopydx]
  8283 00006EC8 01D6                <1> 		add esi, edx
  8284 00006ECA E971FFFFFF          <1> 		jmp nextcharwin
  8285                              <1> 	noskipcharcopy:
  8286 00006ECF 881F                <1> 		mov [edi], bl
  8287 00006ED1 887F01              <1> 		mov [edi + 1], bh
  8288 00006ED4 8B3D[536F0000]      <1> 		mov edi, [charposvbuf]
  8289 00006EDA 30FF                <1> 		xor bh, bh
  8290 00006EDC 66C1E304            <1> 		shl bx, 4
  8291 00006EE0 31D2                <1> 		xor edx, edx
  8292 00006EE2 668B15[FE4C0000]    <1> 		mov dx, [resolutionx2]
  8293 00006EE9 C1E204              <1> 		shl edx, 4
  8294 00006EEC 29D6                <1> 		sub esi, edx
  8295 00006EEE 81C610000000        <1> 		add esi, 16
  8296 00006EF4 89F7                <1> 		mov edi, esi
  8297 00006EF6 668B0D[516F0000]    <1> 		mov cx, [charposline]
  8298 00006EFD 6641                <1> 		inc cx
  8299 00006EFF 663B0D[116B0000]    <1> 		cmp cx, [termcol]
  8300 00006F06 7316                <1> 		jae fixwindowcopy
  8301 00006F08 66890D[516F0000]    <1> 		mov [charposline], cx
  8302 00006F0F 6631C9              <1> 		xor cx, cx
  8303 00006F12 678AB7[0D77]        <1> 		mov dh, [fonts + bx]
  8304 00006F17 D0CE                <1> 		ror dh, 1
  8305 00006F19 E9B4FEFFFF          <1> 		jmp copywindow
  8306                              <1> fixwindowcopy:
  8307 00006F1E 6631C9              <1> 		xor cx, cx
  8308 00006F21 66890D[516F0000]    <1> 		mov [charposline], cx
  8309 00006F28 662B15[016B0000]    <1> 		sub dx, [winvcopydx]
  8310 00006F2F 01D6                <1> 		add esi, edx
  8311 00006F31 89F7                <1> 		mov edi, esi
  8312 00006F33 678AB7[0D77]        <1> 		mov dh, [fonts + bx]
  8313 00006F38 D0CE                <1> 		ror dh, 1
  8314 00006F3A E993FEFFFF          <1> 		jmp copywindow
  8315                              <1> donewincopynow:
  8316 00006F3F 803D[9A230000]01    <1> 		cmp byte [termcopyon], 1
  8317 00006F46 7501                <1> 		jne forgetresetstuff
  8318 00006F48 61                  <1> 		popa
  8319                              <1> forgetresetstuff:
  8320 00006F49 C605[9A230000]00    <1> 		mov byte [termcopyon], 0
  8321 00006F50 C3                  <1> 		ret
  8322                              <1> 		
  8323 00006F51 0000                <1> charposline dw 0
  8324 00006F53 00000000            <1> charposvbuf dw 0,0
  8325 00006F57 0000                <1> iconcolor dw 0
  8326                              <1> 	showicon:	;;icon in si, position in (dx,cx), selected in ax, code in bx
  8327 00006F59 A2[15730000]        <1> 		mov [iconselected], al
  8328 00006F5E 8025[15730000]01    <1> 		and byte [iconselected], 1
  8329 00006F65 B401                <1> 		mov ah, 1
  8330 00006F67 E8DDF8FFFF          <1> 		call graphicsadd
  8331                              <1> 	showicon2:
  8332 00006F6C 8B3D[264C0000]      <1> 		mov edi, [physbaseptr]
  8333 00006F72 6601D2              <1> 		add dx, dx
  8334 00006F75 663B15[FE4C0000]    <1> 		cmp dx, [resolutionx2]
  8335 00006F7C 720C                <1> 		jb screenxgood
  8336 00006F7E 668B15[FE4C0000]    <1> 		mov dx, [resolutionx2]
  8337 00006F85 6681EA4000          <1> 		sub dx, 64
  8338                              <1> 	screenxgood:
  8339 00006F8A 6681F90000          <1> 		cmp cx, 0
  8340 00006F8F 7422                <1> 		je noscreenygoodchk
  8341 00006F91 663B0D[124C0000]    <1> 		cmp cx, [resolutiony]
  8342 00006F98 720C                <1> 		jb screenygood
  8343 00006F9A 668B0D[124C0000]    <1> 		mov cx, [resolutiony]
  8344 00006FA1 6681E92000          <1> 		sub cx, 32
  8345                              <1> 	screenygood:
  8346 00006FA6 31DB                <1> 		xor ebx, ebx
  8347 00006FA8 668B1D[FE4C0000]    <1> 		mov bx, [resolutionx2]
  8348 00006FAF 01DF                <1> 		add edi, ebx
  8349 00006FB1 E2F3                <1> 		loop screenygood
  8350                              <1> 	noscreenygoodchk:
  8351 00006FB3 31DB                <1> 		xor ebx, ebx
  8352 00006FB5 6689D3              <1> 		mov bx, dx
  8353 00006FB8 01DF                <1> 		add edi, ebx
  8354 00006FBA 6631C9              <1> 		xor cx, cx
  8355 00006FBD 668B06              <1> 		mov ax, [esi]
  8356 00006FC0 81C602000000        <1> 		add esi, 2
  8357 00006FC6 66A3[576F0000]      <1> 		mov [iconcolor], ax
  8358                              <1> 	writeicon:
  8359 00006FCC 8B06                <1> 		mov eax, [esi]
  8360 00006FCE D1C0                <1> 		rol eax, 1
  8361 00006FD0 30C9                <1> 		xor cl, cl
  8362                              <1> 	writeiconline:
  8363 00006FD2 B201                <1> 		mov dl, 1
  8364 00006FD4 20C2                <1> 		and dl, al
  8365 00006FD6 3215[15730000]      <1> 		xor dl, [iconselected]
  8366 00006FDC 668B1D[C75F0000]    <1> 		mov bx, [background]
  8367 00006FE3 66891F              <1> 		mov [edi], bx
  8368 00006FE6 80FA00              <1> 		cmp dl, 0
  8369 00006FE9 740A                <1> 		je noiconline
  8370 00006FEB 668B15[576F0000]    <1> 		mov dx, [iconcolor]
  8371 00006FF2 668917              <1> 		mov [edi], dx
  8372                              <1> 	noiconline:
  8373 00006FF5 81C702000000        <1> 		add edi, 2
  8374 00006FFB D1C0                <1> 		rol eax, 1
  8375 00006FFD FEC1                <1> 		inc cl
  8376 00006FFF 80F920              <1> 		cmp cl, 32
  8377 00007002 72CE                <1> 		jb writeiconline
  8378 00007004 81C604000000        <1> 		add esi, 4
  8379 0000700A FEC5                <1> 		inc ch
  8380 0000700C 31D2                <1> 		xor edx, edx
  8381 0000700E 668B15[FE4C0000]    <1> 		mov dx, [resolutionx2]
  8382 00007015 01D7                <1> 		add edi, edx
  8383 00007017 81EF40000000        <1> 		sub edi, 64
  8384 0000701D 80FD20              <1> 		cmp ch, 32
  8385 00007020 72AA                <1> 		jb writeicon
  8386 00007022 31C0                <1> 		xor eax, eax
  8387 00007024 C3                  <1> 		ret
  8388                              <1> 
  8389 00007025 02                  <1> resolutionbytes db 2
  8390 00007026 0000                <1> posxvesa dw 0
  8391 00007028 0000                <1> posyvesa dw 0
  8392 0000702A FFFF                <1> colorfont dw 0xFFFF
  8393                              <1> savefontvesa:		;;same rules as showfontvesa
  8394 0000702C C605[02610000]01    <1> 	mov byte [savefonton], 1
  8395                              <1> showfontvesa:		;;position in (dx,cx), color in bx, char in al
  8396 00007033 3CFF                <1> 	cmp al, 255
  8397 00007035 7501                <1> 	jne nostopshowfont
  8398 00007037 C3                  <1> 	ret
  8399                              <1> nostopshowfont:
  8400 00007038 66890D[28700000]    <1> 	mov [posyvesa], cx
  8401 0000703F 3C0A                <1> 	cmp al, 10
  8402 00007041 0F8424000000        <1> 	je near goodvesafontx
  8403 00007047 31C9                <1> 	xor ecx, ecx
  8404 00007049 668B0D[FE4C0000]    <1> 	mov cx, [resolutionx2]
  8405 00007050 6639CA              <1> 	cmp dx, cx
  8406 00007053 7616                <1> 	jbe goodvesafontx
  8407 00007055 6631D2              <1> 	xor dx, dx
  8408 00007058 668B0D[28700000]    <1> 	mov cx, [posyvesa]
  8409 0000705F 6681C11000          <1> 	add cx, 16
  8410 00007064 66890D[28700000]    <1> 	mov [posyvesa], cx
  8411                              <1> goodvesafontx:
  8412 0000706B 668B0D[28700000]    <1> 	mov cx, [posyvesa]
  8413 00007072 668915[26700000]    <1> 	mov [posxvesa], dx
  8414 00007079 8B3D[264C0000]      <1> 	mov edi, [physbaseptr]
  8415 0000707F 66891D[2A700000]    <1> 	mov [colorfont], bx
  8416 00007086 31DB                <1> 	xor ebx, ebx
  8417 00007088 88C3                <1> 	mov bl, al
  8418 0000708A 31C0                <1> 	xor eax, eax
  8419 0000708C 88D8                <1> 	mov al, bl
  8420 0000708E 6689D3              <1> 	mov bx, dx
  8421 00007091 89DA                <1> 	mov edx, ebx
  8422 00007093 31DB                <1> 	xor ebx, ebx
  8423 00007095 6681F90000          <1> 	cmp cx, 0
  8424 0000709A 7415                <1> 	je vesaposloopdn
  8425 0000709C 668B1D[FE4C0000]    <1> 	mov bx, [resolutionx2]
  8426                              <1> vesaposloop:
  8427 000070A3 01DA                <1> 	add edx, ebx
  8428 000070A5 6681E90100          <1> 	sub cx, 1
  8429 000070AA 6681F90000          <1> 	cmp cx, 0
  8430 000070AF 75F2                <1> 	jne vesaposloop
  8431                              <1> vesaposloopdn:
  8432 000070B1 01D7                <1> 	add edi, edx
  8433 000070B3 BE[0D770000]        <1> 	mov esi, fonts
  8434                              <1> findfontvesa:
  8435 000070B8 30E4                <1> 	xor ah, ah
  8436 000070BA 3C0A                <1> 	cmp al, 10
  8437 000070BC 0F84FE000000        <1> 	je near nwlinevesa
  8438 000070C2 C1E004              <1> 	shl eax, 4
  8439 000070C5 01C6                <1> 	add esi, eax
  8440 000070C7 C1E804              <1> 	shr eax, 4
  8441 000070CA 81FE[0D870000]      <1> 	cmp esi, fontend
  8442 000070D0 0F83B9000000        <1> 	jae near donefontvesa
  8443 000070D6 4E                  <1> 	dec esi
  8444                              <1> foundfontvesa:
  8445 000070D7 46                  <1> 	inc esi
  8446 000070D8 803D[02610000]01    <1> 	cmp byte [savefonton], 1
  8447 000070DF 0F8401010000        <1> 	je near vesafontsaver
  8448 000070E5 30C9                <1> 	xor cl, cl
  8449 000070E7 8A06                <1> 	mov al, [esi]
  8450 000070E9 668B15[FE4C0000]    <1> 	mov dx, [resolutionx2]
  8451 000070F0 662B15[26700000]    <1> 	sub dx, [posxvesa]
  8452 000070F7 6681FA1000          <1> 	cmp dx, 16
  8453 000070FC 7708                <1> 	ja paintfontvesa
  8454 000070FE D0EA                <1> 	shr dl, 1
  8455 00007100 8815[BF710000]      <1> 	mov [charwidth], dl
  8456                              <1> paintfontvesa:
  8457 00007106 B201                <1> 	mov dl, 1
  8458 00007108 20C2                <1> 	and dl, al
  8459 0000710A 803D[01610000]01    <1> 	cmp byte [showcursorfonton], 1
  8460 00007111 0F8435000000        <1> 	je near nodelpaintedfont
  8461 00007117 803D[01610000]02    <1> 	cmp byte [showcursorfonton], 2
  8462 0000711E 0F8518000000        <1> 	jne near noswitchcursorfonton
  8463 00007124 80FA00              <1> 	cmp dl, 0
  8464 00007127 0F842E000000        <1> 	je near nopixelset
  8465 0000712D 668B1D[2A700000]    <1> 	mov bx, [colorfont]
  8466 00007134 66891F              <1> 	mov [edi], bx
  8467 00007137 E91F000000          <1> 	jmp nopixelset
  8468                              <1> noswitchcursorfonton:
  8469 0000713C 3215[03610000]      <1> 	xor dl, [mouseselecton]
  8470 00007142 668B1D[C75F0000]    <1> 	mov bx, [background]
  8471 00007149 66891F              <1> 	mov [edi], bx
  8472                              <1> nodelpaintedfont:
  8473 0000714C 80FA00              <1> 	cmp dl, 0
  8474 0000714F 740A                <1> 	je nopixelset
  8475 00007151 668B15[2A700000]    <1> 	mov dx, [colorfont]
  8476 00007158 668917              <1> 	mov [edi], dx
  8477                              <1> nopixelset:
  8478 0000715B 81C702000000        <1> 	add edi, 2
  8479 00007161 D0C0                <1> 	rol al, 1
  8480 00007163 FEC1                <1> 	inc cl
  8481 00007165 3A0D[BF710000]      <1> 	cmp cl, [charwidth]
  8482 0000716B 7299                <1> 	jb paintfontvesa
  8483 0000716D FEC5                <1> 	inc ch
  8484 0000716F 31D2                <1> 	xor edx, edx
  8485 00007171 668B15[FE4C0000]    <1> 	mov dx, [resolutionx2]
  8486 00007178 01D7                <1> 	add edi, edx
  8487 0000717A 31D2                <1> 	xor edx, edx
  8488 0000717C 8A15[BF710000]      <1> 	mov dl, [charwidth]
  8489 00007182 00D2                <1> 	add dl, dl
  8490 00007184 29D7                <1> 	sub edi, edx
  8491 00007186 80FD10              <1> 	cmp ch, 16
  8492 00007189 0F8248FFFFFF        <1> 	jb foundfontvesa
  8493                              <1> donefontvesa:
  8494 0000718F B208                <1> 	mov dl, 8
  8495 00007191 8815[BF710000]      <1> 	mov [charwidth], dl
  8496 00007197 668B15[26700000]    <1> 	mov dx, [posxvesa]
  8497 0000719E 8A1D[BF710000]      <1> 	mov bl, [charwidth]
  8498 000071A4 30FF                <1> 	xor bh, bh
  8499 000071A6 6601DA              <1> 	add dx, bx
  8500 000071A9 668B1D[2A700000]    <1> 	mov bx, [colorfont]
  8501 000071B0 668B0D[28700000]    <1> 	mov cx, [posyvesa]
  8502 000071B7 C605[02610000]00    <1> 	mov byte [savefonton], 0
  8503 000071BE C3                  <1> 	ret
  8504 000071BF 08                  <1> charwidth db 8
  8505                              <1> nwlinevesa:
  8506 000071C0 668B15[26700000]    <1> 	mov dx, [posxvesa]
  8507 000071C7 6631D2              <1> 	xor dx, dx
  8508 000071CA 668915[26700000]    <1> 	mov [posxvesa], dx
  8509 000071D1 668B0D[28700000]    <1> 	mov cx, [posyvesa]
  8510 000071D8 6681C11000          <1> 	add cx, 16
  8511 000071DD 66890D[28700000]    <1> 	mov [posyvesa], cx
  8512 000071E4 EBA9                <1> 	jmp donefontvesa
  8513                              <1> vesafontsaver:
  8514 000071E6 30C0                <1> 	xor al, al
  8515 000071E8 30C9                <1> 	xor cl, cl
  8516                              <1> vesafontsaver2:
  8517 000071EA 668B17              <1> 	mov dx, [edi]
  8518 000071ED 663B15[2A700000]    <1> 	cmp dx, [colorfont]
  8519 000071F4 742F                <1> 	je colorfontmatch
  8520                              <1> donecolormatch:
  8521 000071F6 81C702000000        <1> 	add edi, 2
  8522 000071FC D0C0                <1> 	rol al, 1
  8523 000071FE FEC1                <1> 	inc cl
  8524 00007200 80F908              <1> 	cmp cl, 8
  8525 00007203 72E5                <1> 	jb vesafontsaver2
  8526 00007205 8806                <1> 	mov [esi], al
  8527 00007207 46                  <1> 	inc esi
  8528 00007208 FEC5                <1> 	inc ch
  8529 0000720A 31D2                <1> 	xor edx, edx
  8530 0000720C 668B15[FE4C0000]    <1> 	mov dx, [resolutionx2]
  8531 00007213 01D7                <1> 	add edi, edx
  8532 00007215 81EF10000000        <1> 	sub edi, 16
  8533 0000721B 80FD10              <1> 	cmp ch, 16
  8534 0000721E 72C6                <1> 	jb vesafontsaver
  8535 00007220 E96AFFFFFF          <1> 	jmp donefontvesa
  8536                              <1> colorfontmatch:
  8537 00007225 0401                <1> 	add al, 1
  8538 00007227 EBCD                <1> 	jmp donecolormatch
  8539                              <1> 	
  8540                              <1> showbmp:
  8541 00007229 668B06              <1> 	mov ax, [esi]
  8542 0000722C 663D424D            <1> 	cmp ax, "BM"
  8543 00007230 0F8582000000        <1> 	jne near endedbmp
  8544 00007236 8B3D[264C0000]      <1> 	mov edi, [physbaseptr]
  8545 0000723C 6689D0              <1> 	mov ax, dx
  8546 0000723F 6689CB              <1> 	mov bx, cx
  8547 00007242 31C9                <1> 	xor ecx, ecx
  8548 00007244 31D2                <1> 	xor edx, edx
  8549 00007246 6689D9              <1> 	mov cx, bx
  8550 00007249 6689C2              <1> 	mov dx, ax
  8551 0000724C 01D7                <1> 	add edi, edx
  8552 0000724E 01D7                <1> 	add edi, edx
  8553 00007250 31D2                <1> 	xor edx, edx
  8554 00007252 668B15[FE4C0000]    <1> 	mov dx, [resolutionx2]
  8555 00007259 41                  <1> 	inc ecx
  8556 0000725A 034E16              <1> 	add ecx, [esi + 22]
  8557                              <1> bmplocloop:
  8558 0000725D 01D7                <1> 	add edi, edx
  8559 0000725F E2FC                <1> 	loop bmplocloop
  8560 00007261 29D7                <1> 	sub edi, edx
  8561 00007263 8B5612              <1> 	mov edx, [esi + 18]
  8562 00007266 8B4E16              <1> 	mov ecx, [esi + 22]
  8563 00007269 8B460A              <1> 	mov eax, [esi + 10]
  8564 0000726C 8B5E02              <1> 	mov ebx, [esi + 2]
  8565 0000726F 01F3                <1> 	add ebx, esi
  8566 00007271 891D[BE720000]      <1> 	mov [bmpend], ebx
  8567 00007277 89D3                <1> 	mov ebx, edx
  8568 00007279 01C6                <1> 	add esi, eax
  8569                              <1> ldxbmp:
  8570 0000727B 668B06              <1> 	mov ax, [esi]
  8571 0000727E 668907              <1> 	mov [edi], ax
  8572 00007281 81C702000000        <1> 	add edi, 2
  8573 00007287 81C602000000        <1> 	add esi, 2
  8574 0000728D 3B35[BE720000]      <1> 	cmp esi, [bmpend]
  8575 00007293 7723                <1> 	ja endedbmp
  8576 00007295 4A                  <1> 	dec edx
  8577 00007296 81FA00000000        <1> 	cmp edx, 0
  8578 0000729C 77DD                <1> 	ja ldxbmp
  8579 0000729E 31D2                <1> 	xor edx, edx
  8580 000072A0 668B15[FE4C0000]    <1> 	mov dx, [resolutionx2]
  8581 000072A7 29DF                <1> 	sub edi, ebx
  8582 000072A9 29DF                <1> 	sub edi, ebx
  8583 000072AB 29D7                <1> 	sub edi, edx
  8584 000072AD 49                  <1> 	dec ecx
  8585 000072AE 89DA                <1> 	mov edx, ebx
  8586 000072B0 81F900000000        <1> 	cmp ecx, 0
  8587 000072B6 77C3                <1> 	ja ldxbmp
  8588                              <1> endedbmp:
  8589 000072B8 E801EFFFFF          <1> 	call switchmousepos2
  8590 000072BD C3                  <1> 	ret
  8591                              <1> 	
  8592 000072BE 00000000            <1> 	bmpend dd 0
  8593                              <1> 
  8594                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;Here are some vars;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  8595 000072C2 00000000            <1> 	showstringesi dw 0,0
  8596 000072C6 00                  <1> 	mouseon db 0
  8597 000072C7 737461727400        <1> 	start	db "start",0
  8598 000072CD 536F6C6C65724F5300  <1> 	gotomenu db "SollerOS",0
  8599 000072D6 506F776572204F6666- <1> 	turnoffmsg db "Power Off",0
  8600 000072DF 00                  <1>
  8601 000072E0 426F6F2100          <1> 	boomsg db "Boo!",0
  8602 000072E5 5061636D616E207761- <1> 	pacmsg	db "Pacman was easy to draw.",0
  8603 000072EE 73206561737920746F- <1>
  8604 000072F7 20647261772E00      <1>
  8605 000072FE 4F6D206E6F6D206E6F- <1> 	pacnom  db "Om nom nom nom",0
  8606 00007307 6D206E6F6D00        <1>
  8607 0000730D 5800                <1> 	xmsg db "X",0
  8608 0000730F 0000                <1> 	icon dw 0	;pointer to icon
  8609 00007311 00000000            <1> 	codepointer dw 0,0 ;pointer to code
  8610 00007315 00                  <1> 	iconselected db 0
  8611                              <1> 	
  8612                              <1> 	boo:
  8613 00007316 BE[E0720000]        <1> 		mov esi, boomsg
  8614 0000731B 66BA6400            <1> 		mov dx, 100
  8615 0000731F 66B94001            <1> 		mov cx, 320
  8616 00007323 31DB                <1> 		xor ebx, ebx
  8617 00007325 6631C0              <1> 		xor ax, ax
  8618 00007328 E982F7FFFF          <1> 		jmp showstring
  8619                              <1> 
  8620                              <1> 	pacmannomnom:
  8621 0000732D BE[FE720000]        <1> 		mov esi, pacnom
  8622 00007332 66BA8200            <1> 		mov dx, 130
  8623 00007336 66B93C00            <1> 		mov cx, 60
  8624 0000733A 31DB                <1> 		xor ebx, ebx
  8625 0000733C 6631C0              <1> 		xor ax, ax
  8626 0000733F E96BF7FFFF          <1> 		jmp showstring	
  8627                              <1> 	
  8628                              <1> 	noie:
  8629 00007344 66C705[03740000]80- <1> 		mov word [termwindow], 640
  8630 0000734C 02                  <1>
  8631 0000734D 66C705[05740000]E0- <1> 		mov word [termwindow + 2], 480	;the previous lines of code make a large terminal window that is 4 characters smaller than the screen
  8632 00007355 01                  <1>
  8633 00007356 BE[03740000]        <1> 		mov esi, termwindow
  8634 0000735B 66BA1000            <1> 		mov dx, 16
  8635 0000735F 66B91000            <1> 		mov cx, 16
  8636 00007363 BB[32280000]        <1> 		mov ebx, os
  8637 00007368 6631C0              <1> 		xor ax, ax
  8638 0000736B E8A7F7FFFF          <1> 		call showwindow
  8639 00007370 E9BDB4FFFF          <1> 		jmp os
  8640                              <1> 
  8641                              <1> 	gotomenuboot:
  8642 00007375 31D2                <1> 		xor edx, edx
  8643 00007377 31C9                <1> 		xor ecx, ecx
  8644 00007379 668B15[104C0000]    <1> 		mov dx, [resolutionx]
  8645 00007380 668B0D[124C0000]    <1> 		mov cx, [resolutiony]
  8646 00007387 66C1E904            <1> 		shr cx, 4
  8647 0000738B 6681E90100          <1> 		sub cx, 1
  8648 00007390 66C1E104            <1> 		shl cx, 4
  8649 00007394 668915[03740000]    <1> 		mov [termwindow], dx
  8650 0000739B 66890D[05740000]    <1> 		mov [termwindow + 2], cx	;the previous lines of code make a large terminal window that is fullscreen
  8651 000073A2 BE[03740000]        <1> 		mov esi, termwindow
  8652 000073A7 6631D2              <1> 		xor dx, dx
  8653 000073AA 6631C9              <1> 		xor cx, cx
  8654 000073AD BB[32280000]        <1> 		mov ebx, os
  8655 000073B2 6631C0              <1> 		xor ax, ax
  8656 000073B5 E85DF7FFFF          <1> 		call showwindow
  8657 000073BA E973B4FFFF          <1> 		jmp os
  8658                              <1> 		;ret
  8659                              <1> 
  8660                              <1> 	winblows:
  8661 000073BF BE[D6720000]        <1> 		mov esi, turnoffmsg
  8662 000073C4 BB[61470000]        <1> 		mov ebx, turnoff
  8663 000073C9 668B0D[124C0000]    <1> 		mov cx, [resolutiony]
  8664 000073D0 6681E92000          <1> 		sub cx, 32
  8665 000073D5 6631D2              <1> 		xor dx, dx
  8666 000073D8 30E4                <1> 		xor ah, ah
  8667 000073DA B010                <1> 		mov al, 00010000b
  8668 000073DC E8CEF6FFFF          <1> 		call showstring
  8669 000073E1 BE[CD720000]        <1> 		mov esi, gotomenu
  8670 000073E6 668B0D[124C0000]    <1> 		mov cx, [resolutiony]
  8671 000073ED 6681E93000          <1> 		sub cx, 48
  8672 000073F2 6631D2              <1> 		xor dx, dx
  8673 000073F5 30E4                <1> 		xor ah, ah
  8674 000073F7 B010                <1> 		mov al, 00010000b
  8675 000073F9 BB[75730000]        <1> 		mov ebx, gotomenuboot
  8676 000073FE E9ACF6FFFF          <1> 		jmp showstring
  8677                              <1> 
  8678 00007403 20035802            <1> 	termwindow:	dw 800,600	;;window size
  8679 00007407 53757065725465726D- <1> 	termmsg:	db "SuperTerminal",0	;;window title
  8680 00007410 696E616C00          <1>
  8681                              <1> 	
  8682 00007410 <incbin>            <1> interneticon: 	incbin 'source/gui/icons/internet'
  8683 00007410 <incbin>            <1> wordicon: 	incbin 'source/gui/icons/word'
  8684 00007410 <incbin>            <1> pacmanpellet: incbin 'source/gui/icons/pellet'
  8685 00007410 <incbin>            <1> ghostie	incbin 'source/gui/icons/ghostie'
  8686 00007410 <incbin>            <1> pacman	incbin 'source/gui/icons/pacman'
  8687                                  %endif
  8688                                      %include "source/data.asm"
  8689 0000769F 626F6F742E736800    <1> 	bootfilename db "boot.sh",0
  8690 000076A7 73687573683A2000    <1> 	notfound1 db "shush: ",0
  8691 000076AF 3A20636F6D6D616E64- <1> 	notfound2 db  ": command not found",10,0
  8692 000076B8 206E6F7420666F756E- <1>
  8693 000076C1 640A00              <1>
  8694 000076C4 757365726E616D653A- <1> 	userask db "username:",0
  8695 000076CD 00                  <1>
  8696 000076CE 70617373776F72643A- <1> 	pwdask	db	"password:",0
  8697 000076D7 00                  <1>
  8698 000076D8 40                  <1> 	computer db "@"
  8699 000076D9 536F6C6C65724F5320- <1> 	computername	db	"SollerOS ",0
  8700 000076E2 00                  <1>
  8701 000076E3 5D242000            <1> 	endprompt db "]$ ",0
  8702 000076E7 0D                  <1> 	crlf 	db  13
  8703 000076E8 0A00                <1> 	line	db	10,0
  8704                              <1> 	userlst:
  8705 000076EA 726F6F7400          <1> 			db "root",0
  8706 000076EF 617765736F6D65706F- <1> 			db "awesomepower",0
  8707 000076F8 77657200            <1>
  8708 000076FC 7573657200          <1> 			db "user",0
  8709 00007701 70617373776F726400  <1> 			db "password",0
  8710 0000770A 6E00                <1> 			db "n",0	;;abuse for quick entry-a quick double n followed by a double enter will get you in
  8711 0000770C 00                  <1> 			db 0
  8712                              <1> 	userlstend:
  8713                              <1> 	
  8714 0000770C <incbin>            <1> fonts:	incbin "source/precompiled/fonts.pak"
  8715                              <1> fontend:
  8716                              <1> osend:	;this is the end of the operating system's space on disk
  8717                                      %include "build/fileindex.asm"
  8718                              <1> diskfileindex:
  8719 0000870D 617267746573742E65- <1> db "argtest.elf",0
  8720 00008716 6C6600              <1>
  8721 00008719 45000000            <1> dd (f0-$$)/512
  8722 0000871D 06010000            <1> dd (f1-f0)/512
  8723 00008721 626F6F7400          <1> db "boot",0
  8724 00008726 4B010000            <1> dd (f1-$$)/512
  8725 0000872A 01000000            <1> dd (f2-f1)/512
  8726 0000872E 63686172746573742E- <1> db "chartest.elf",0
  8727 00008737 656C6600            <1>
  8728 0000873B 4C010000            <1> dd (f2-$$)/512
  8729 0000873F 26010000            <1> dd (f3-f2)/512
  8730 00008743 646F73746573742E63- <1> db "dostest.com",0
  8731 0000874C 6F6D00              <1>
  8732 0000874F 72020000            <1> dd (f3-$$)/512
  8733 00008753 01000000            <1> dd (f4-f3)/512
  8734 00008757 66696E616C636F756E- <1> db "finalcount.snd",0
  8735 00008760 742E736E6400        <1>
  8736 00008766 73020000            <1> dd (f4-$$)/512
  8737 0000876A 01000000            <1> dd (f5-f4)/512
  8738 0000876E 68656C6C6F776F726C- <1> db "helloworld.elf",0
  8739 00008777 642E656C6600        <1>
  8740 0000877D 74020000            <1> dd (f5-$$)/512
  8741 00008781 D6010000            <1> dd (f6-f5)/512
  8742 00008785 696E7400            <1> db "int",0
  8743 00008789 4A040000            <1> dd (f6-$$)/512
  8744 0000878D 01000000            <1> dd (f7-f6)/512
  8745 00008791 6C6F7374776F6F6473- <1> db "lostwoods.snd",0
  8746 0000879A 2E736E6400          <1>
  8747 0000879F 4B040000            <1> dd (f7-$$)/512
  8748 000087A3 01000000            <1> dd (f8-f7)/512
  8749 000087A7 6D6172696F2E736E64- <1> db "mario.snd",0
  8750 000087B0 00                  <1>
  8751 000087B1 4C040000            <1> dd (f8-$$)/512
  8752 000087B5 01000000            <1> dd (f9-f8)/512
  8753 000087B9 736F6C6C65726F732E- <1> db "solleros.bmp",0
  8754 000087C2 626D7000            <1>
  8755 000087C6 4D040000            <1> dd (f9-$$)/512
  8756 000087CA B0020000            <1> dd (f10-f9)/512
  8757 000087CE 736F6C6C65726F732E- <1> db "solleros.txt",0
  8758 000087D7 74787400            <1>
  8759 000087DB FD060000            <1> dd (f10-$$)/512
  8760 000087DF 01000000            <1> dd (f11-f10)/512
  8761 000087E3 736F6E676F74696D65- <1> db "songotime.snd",0
  8762 000087EC 2E736E6400          <1>
  8763 000087F1 FE060000            <1> dd (f11-$$)/512
  8764 000087F5 01000000            <1> dd (f12-f11)/512
  8765 000087F9 737464696F74657374- <1> db "stdiotest.elf",0
  8766 00008802 2E656C6600          <1>
  8767 00008807 FF060000            <1> dd (f12-$$)/512
  8768 0000880B 27010000            <1> dd (f13-f12)/512
  8769 0000880F 74656C7900          <1> db "tely",0
  8770 00008814 26080000            <1> dd (f13-$$)/512
  8771 00008818 01000000            <1> dd (f14-f13)/512
  8772 0000881C 74696D65746573742E- <1> db "timetest.elf",0
  8773 00008825 656C6600            <1>
  8774 00008829 27080000            <1> dd (f14-$$)/512
  8775 0000882D 06010000            <1> dd (f15-f14)/512
  8776 00008831 7475746F7269616C2E- <1> db "tutorial.sh",0
  8777 0000883A 736800              <1>
  8778 0000883D 2D090000            <1> dd (f15-$$)/512
  8779 00008841 03000000            <1> dd (f16-f15)/512
  8780 00008845 756E667300          <1> db "unfs",0
  8781 0000884A 30090000            <1> dd (f16-$$)/512
  8782 0000884E 02000000            <1> dd (f17-f16)/512
  8783 00008852 766963746F72792E77- <1> db "victory.wav",0
  8784 0000885B 617600              <1>
  8785 0000885E 32090000            <1> dd (f17-$$)/512
  8786 00008862 16000000            <1> dd (f18-f17)/512
  8787 00008866 5F696D672E62696E00  <1> db "_img.bin",0
  8788 0000886F 48090000            <1> dd (f18-$$)/512
  8789 00008873 D7020000            <1> dd (f19-f18)/512
  8790                              <1> enddiskfileindex:
  8791                              <1> 
  8792                                      %include "source/bss.asm"
  8793 00008877 90                  <1> align 4, nop
  8794                              <1> bssstart: equ $
  8795                              <1> guion equ bssstart
  8796                              <1> DriveNumber equ guion + 1
  8797                              <1> lbaad equ DriveNumber + 1
  8798                              <1> memlistbuf equ lbaad + 4
  8799                              <1> memlistend equ memlistbuf + 576
  8800                              <1> bsscopy equ memlistend
  8801                              <1> initialstack equ bsscopy
  8802                              <1> stackend equ initialstack + 4000
  8803                              <1> fileindex: equ stackend + 96
  8804                              <1> fileindexend: equ fileindex + 1024
  8805                              <1> lastfolderloc equ fileindexend
  8806                              <1> currentfolderloc equ lastfolderloc + 4
  8807                              <1> currentfolder equ currentfolderloc + 4
  8808                              <1> currentfolderend equ currentfolder + 512
  8809                              <1> uid equ currentfolderend
  8810                              <1> ranboot equ uid + 4
  8811                              <1> IFON equ ranboot + 1
  8812                              <1> IFTRUE equ IFON + 1
  8813                              <1> BATCHPOS equ IFTRUE + 100
  8814                              <1> BATCHISON equ BATCHPOS + 4
  8815                              <1> LOOPON equ BATCHISON + 1
  8816                              <1> LOOPPOS	equ LOOPON + 1
  8817                              <1> variables: equ LOOPPOS + 4
  8818                              <1> varend: equ variables + 4096
  8819                              <1> buftxt2: equ varend
  8820                              <1> buftxt: equ buftxt2 + 1024
  8821                              <1> buftxtend: equ buftxt + 1024
  8822                              <1> buf2: equ buftxtend
  8823                              <1> numbuf: equ buf2 + 20
  8824                              <1> %ifdef gui.included
  8825                              <1> 	graphicstable equ numbuf + 1 ;w type, dw datalocation, w locationx, w locationy, w selected, dw code
  8826                              <1> 	graphicstableend equ graphicstable + 200h
  8827                              <1> 	mousecolorbuf equ graphicstableend ;where the gui under the mouse is stored
  8828                              <1> 	mcolorend equ mousecolorbuf + 256
  8829                              <1> 	videobuf equ mcolorend + 1	;1280x1024pixels in characters
  8830                              <1> 	videobufend	equ videobuf + 160*64*2
  8831                              <1> 	videobuf2 equ videobufend
  8832                              <1> 	videobuf2end equ videobuf2 + 160*64*2
  8833                              <1> %else
  8834                              <1> 	videobuf equ numbuf + 1
  8835                              <1> 	videobufend equ videobuf + 80*30*2
  8836                              <1> 	videobuf2 equ videobufend
  8837                              <1> 	videobuf2end equ videobuf2 + 160*64*2
  8838                              <1> %endif
  8839                              <1> lastcommandpos: equ videobuf2end
  8840                              <1> commandbufpos: equ lastcommandpos + 4
  8841                              <1> commandbuf: equ commandbufpos + 4
  8842                              <1> commandbufend: equ commandbuf + 4096 ;this is where kernel space only ends, the rest is for threading
  8843                              <1> %ifdef rtl8139.included
  8844                              <1> 	rbuffstart: equ commandbufend ;for use with networking
  8845                              <1> 	rbuffend equ rbuffstart + 8212
  8846                              <1> %else
  8847                              <1> 	rbuffstart equ commandbufend
  8848                              <1> 	rbuffend equ commandbufend
  8849                              <1> %endif
  8850                              <1> threadlist: equ rbuffend ;this buffer will hold the stack locations of all of the threads, up to 2048
  8851                              <1> threadlistend: equ threadlist + 1024*4
  8852                              <1> stacks:	equ threadlistend ;i use SS now for proper stack management. This makes sure stacks never screw with other memory
  8853                              <1> stackdummy: equ stacks + 1024
  8854                              <1> stack1: equ stackdummy + 1024  ;woah, thats a lot of space for stacks
  8855                              <1> bssend equ stack1 + 1024*1024
  8856                              <1> dosprogloc equ 0x400000 ;from here on, it is not kernel space so apps can be loaded here.
  8857                                      %include "build/files.asm"
  8858 00008878 00<rept>            <1> align 512,db 0
  8859                              <1> f0:
  8860 00008878 <incbin>            <1> incbin "included/argtest.elf"
  8861 000294F2 00<rept>            <1> align 512,db 0
  8862                              <1> f1:
  8863 000294F2 <incbin>            <1> incbin "included/boot"
  8864 00029615 00<rept>            <1> align 512,db 0
  8865                              <1> f2:
  8866 00029615 <incbin>            <1> incbin "included/chartest.elf"
  8867 0004E2DB 00<rept>            <1> align 512,db 0
  8868                              <1> f3:
  8869 0004E2DB <incbin>            <1> incbin "included/dostest.com"
  8870 0004E52B 00<rept>            <1> align 512,db 0
  8871                              <1> f4:
  8872 0004E52B <incbin>            <1> incbin "included/finalcount.snd"
  8873 0004E702 00<rept>            <1> align 512,db 0
  8874                              <1> f5:
  8875 0004E702 <incbin>            <1> incbin "included/helloworld.elf"
  8876 000893E3 00<rept>            <1> align 512,db 0
  8877                              <1> f6:
  8878 000893E3 <incbin>            <1> incbin "included/int"
  8879 0008959B 00<rept>            <1> align 512,db 0
  8880                              <1> f7:
  8881 0008959B <incbin>            <1> incbin "included/lostwoods.snd"
  8882 00089656 00<rept>            <1> align 512,db 0
  8883                              <1> f8:
  8884 00089656 <incbin>            <1> incbin "included/mario.snd"
  8885 0008983A 00<rept>            <1> align 512,db 0
  8886                              <1> f9:
  8887 0008983A <incbin>            <1> incbin "included/solleros.bmp"
  8888 000DF9E6 00<rept>            <1> align 512,db 0
  8889                              <1> f10:
  8890 000DF9E6 <incbin>            <1> incbin "included/solleros.txt"
  8891 000DFB76 00<rept>            <1> align 512,db 0
  8892                              <1> f11:
  8893 000DFB76 <incbin>            <1> incbin "included/songotime.snd"
  8894 000DFC4A 00<rept>            <1> align 512,db 0
  8895                              <1> f12:
  8896 000DFC4A <incbin>            <1> incbin "included/stdiotest.elf"
  8897 00104A43 00<rept>            <1> align 512,db 0
  8898                              <1> f13:
  8899 00104A43 <incbin>            <1> incbin "included/tely"
  8900 00104DAD 00<rept>            <1> align 512,db 0
  8901                              <1> f14:
  8902 00104DAD <incbin>            <1> incbin "included/timetest.elf"
  8903 00125909 00<rept>            <1> align 512,db 0
  8904                              <1> f15:
  8905 00125909 <incbin>            <1> incbin "included/tutorial.sh"
  8906 00125F52 00<rept>            <1> align 512,db 0
  8907                              <1> f16:
  8908 00125F52 <incbin>            <1> incbin "included/unfs"
  8909                              <1> align 512,db 0
  8910                              <1> f17:
  8911 00125F52 <incbin>            <1> incbin "included/victory.wav"
  8912 00128F48 00<rept>            <1> align 512,db 0
  8913                              <1> f18:
  8914 00128F48 <incbin>            <1> incbin "included/_img.bin"
  8915                              <1> align 512,db 0
  8916                              <1> f19:
