     1                                  [map symbols build/kernel.map]
     2                                  %include "config.asm"
     3                              <1> ;These flags are used to configure options as on, put a simicolon in front of it to not configure it
     4                              <1> 
     5                              <1> %define gui.included
     6                              <1> ;Turn on the gui
     7                              <1> 
     8                              <1> %define gui.alphablending
     9                              <1> ;Make the terminal in the GUI 25% transparent
    10                              <1> 
    11                              <1> %define gui.background
    12                              <1> ;Make the GUI have a loadable background
    13                              <1> 
    14                              <1> ;%define io.serial "1"
    15                              <1> ;Use the specified serial port for input and output instead of the keyboard and screen
    16                              <1> ;If the gui is included this should not be enabled
    17                              <1> 
    18                              <1> %define threads.included
    19                              <1> ;Include the thread testing stuff-this uses a relatively large amount of memory
    20                              <1> 
    21                              <1> %define exceptions.included
    22                              <1> ;Display debugging information should crashes occur-also uses quite a bit of memory
    23                              <1> 
    24                              <1> ;%define disk.protected
    25                              <1> ;Use protected mode instead of real mode for disk access
    26                              <1> 
    27                              <1> %define disk.real
    28                              <1> ;Use real mode for disk access
    29                              <1> 
    30                              <1> %define sound.included
    31                              <1> ;This includes the sound drivers
    32                              <1> 
    33                              <1> ;%define rtl8139.included
    34                              <1> ;This includes the RTL8139 drivers
    35                              <1> 
    36                              <1> ;%define sector.debug
    37                              <1> ;Dump the contents of the first sector of SollerOS
    38                              <1> 
    39                              <1> ;FIX DEPENDANCIES
    40                              <1> %ifdef gui.included
    41                              <1> 	%undef io.serial
    42                              <1> %else
    43                              <1> 	%undef gui.alphablending
    44                              <1> 	%undef gui.background
    45                              <1> %endif
    46                              <1> %ifdef disk.protected
    47                              <1> %undef disk.real
    48                              <1> %endif
    49                                  [BITS 16]
    50                                      %include "source/boot.asm"
    51                              <1>     ; MENU.ASM
    52                              <1> %include 'source/signature.asm'
    53                              <2> signature:
    54 00000000 536F6C6C65724F53    <2> db "SollerOS" ;Operating system name
    55 00000008 20416C706861204275- <2> db " Alpha Build ",0	;Soller OS development level
    56 00000011 696C642000          <2>
    57 00000016 DC000000            <2> dd 220	;version number
    58                              <2> signatureend:
    59                              <1> menustart:	
    60 0000001A 8CC8                <1> 	mov ax, cs
    61 0000001C 8ED8                <1> 	mov ds, ax
    62 0000001E 8EC0                <1> 	mov es, ax
    63 00000020 8ED0                <1> 	mov ss, ax
    64 00000022 880E[F584]          <1> 	mov [DriveNumber], cl
    65 00000026 668916[F684]        <1> 	mov [lbaad], edx
    66                              <1> %ifdef io.serial
    67                              <1> 	call getmemorysize
    68                              <1> 	mov si, serialmsg
    69                              <1> 	call printrm
    70                              <1> 	jmp pmode
    71                              <1> serialmsg: db "SollerOS: Using serial port ",io.serial," for I/O.",0
    72                              <1> %else
    73 0000002B E80300              <1> 	call vgaset	;make users switch using a command-this leads to very fast boots
    74 0000002E E95700              <1> 	jmp pmode
    75                              <1> %endif
    76                              <1> 	
    77                              <1> vgaset:
    78 00000031 B81200              <1> 	mov ax, 12h
    79 00000034 31DB                <1> 	xor bx, bx
    80 00000036 CD10                <1> 	int 10h
    81 00000038 C606[F484]00        <1> 	mov byte [guion], 0
    82 0000003D E80100              <1> 	call getmemorysize;get the memory map after the video is initialized
    83 00000040 C3                  <1> 	ret
    84                              <1> 
    85                              <1> getmemorysize:
    86 00000041 BF[FA84]            <1> 	mov di, memlistbuf
    87 00000044 6631DB              <1> 	xor ebx, ebx
    88                              <1> getmemsizeloop:
    89 00000047 66B820E80000        <1> 	mov eax, 0xE820
    90 0000004D 66BA50414D53        <1> 	mov edx, 0x0534D4150
    91 00000053 66B918000000        <1> 	mov ecx, 24
    92 00000059 CD15                <1> 	int 0x15
    93 0000005B 81C71800            <1> 	add di, 24
    94 0000005F 81FF[3A87]          <1> 	cmp di, memlistend
    95 00000063 7309                <1> 	jae nomoregetmemsize
    96 00000065 6681FB00000000      <1> 	cmp ebx, 0
    97 0000006C 75D9                <1> 	jne getmemsizeloop
    98                              <1> nomoregetmemsize:
    99 0000006E 81EF[FA84]          <1> 	sub di, memlistbuf
   100 00000072 893E[3A87]          <1> 	mov [memlistend], di
   101 00000076 C3                  <1> 	ret
   102                              <1> 	
   103                              <1> printrm:			; 'si' comes in with string address
   104 00000077 BB0700              <1>     mov bx,07		; write to display
   105 0000007A B40E                <1>     mov ah,0Eh		; screen function
   106 0000007C 8A04                <1>    .lp:    mov al,[si]         ; get next character
   107 0000007E 3C00                <1>     cmp al,0		; look for terminator 
   108 00000080 7405                <1>     je .done		; zero byte at end of string
   109 00000082 CD10                <1>     int 10h		; write character to screen.    
   110 00000084 46                  <1> 	inc si	     	; move to next character
   111 00000085 EBF5                <1>     jmp .lp		; loop
   112 00000087 C3                  <1> .done: ret
   113                                      %include "source/pmode.asm"
   114                              <1> [BITS 16]
   115                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   116                              <1> ;	16-bit real mode
   117                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   118                              <1> 
   119                              <1> pmode:
   120 00000088 6631C0              <1> 	xor eax, eax
   121 0000008B 6631DB              <1> 	xor ebx, ebx
   122 0000008E 6631C9              <1> 	xor ecx, ecx
   123 00000091 6631D2              <1> 	xor edx, edx
   124 00000094 6631F6              <1> 	xor esi, esi
   125 00000097 6631FF              <1> 	xor edi, edi
   126 0000009A BA9200              <1> 	mov dx, 0x92
   127 0000009D EC                  <1> 	in al, dx	;;A20
   128 0000009E 0C02                <1> 	or al, 2
   129 000000A0 EE                  <1> 	out dx, al
   130 000000A1 8CCB                <1> 	mov bx,cs		; EBX=segment
   131 000000A3 66C1E304            <1> 	shl ebx,4		;	<< 4
   132 000000A7 67668D03            <1> 	lea eax,[ebx]		; EAX=linear address of segment base
   133 000000AB A3[5803]            <1> 	mov [gdt2 + 2],ax
   134 000000AE A3[6003]            <1> 	mov [gdt3 + 2],ax
   135 000000B1 66C1E810            <1> 	shr eax,16
   136 000000B5 A2[5A03]            <1> 	mov [gdt2 + 4],al
   137 000000B8 A2[6203]            <1> 	mov [gdt3 + 4],al
   138 000000BB 8826[5D03]          <1> 	mov [gdt2 + 7],ah
   139 000000BF 8826[6503]          <1> 	mov [gdt3 + 7],ah
   140                              <1> 
   141 000000C3 66B8[3A870000]      <1> 	mov eax, initialstack
   142 000000C9 660306[4202]        <1> 	add eax, [newcodecache]
   143 000000CE A3[5003]            <1> 	mov [gdts + 2],ax
   144 000000D1 66C1E810            <1> 	shr eax, 16
   145 000000D5 A2[5203]            <1> 	mov [gdts + 4],al
   146 000000D8 8826[5503]          <1> 	mov [gdts + 7], ah
   147                              <1> 	
   148 000000DC 66A1[4202]          <1> 	mov eax, [newcodecache]
   149 000000E0 A3[6803]            <1> 	mov [gdt4 + 2],ax
   150 000000E3 A3[7003]            <1> 	mov [gdt5 + 2],ax
   151 000000E6 A3[7803]            <1> 	mov [gdtv8086 + 2], ax
   152 000000E9 A3[8003]            <1> 	mov [gdtv80862 + 2], ax
   153 000000EC 66C1E810            <1> 	shr eax,16
   154 000000F0 A2[6A03]            <1> 	mov [gdt4 + 4],al
   155 000000F3 A2[7203]            <1> 	mov [gdt5 + 4],al
   156 000000F6 A2[7A03]            <1> 	mov [gdtv8086 + 4],al
   157 000000F9 A2[8203]            <1> 	mov [gdtv80862 + 4],al
   158 000000FC 8826[6D03]          <1> 	mov [gdt4 + 7],ah
   159 00000100 8826[7503]          <1> 	mov [gdt5 + 7],ah
   160 00000104 8826[7D03]          <1> 	mov [gdtv8086 + 7],ah
   161 00000108 8826[8503]          <1> 	mov [gdtv80862 + 7],ah
   162                              <1> 	
   163 0000010C 66B800004000        <1> 	mov eax, dosprogloc
   164 00000112 660306[4202]        <1> 	add eax, [newcodecache]
   165 00000117 A3[8803]            <1> 	mov [gdtdos + 2],ax
   166 0000011A A3[9003]            <1> 	mov [gdtdos2 + 2],ax
   167 0000011D 66C1E810            <1> 	shr eax,16
   168 00000121 A2[8A03]            <1> 	mov [gdtdos + 4],al
   169 00000124 A2[9203]            <1> 	mov [gdtdos2 + 4],al
   170 00000127 8826[8D03]          <1> 	mov [gdtdos + 7],ah
   171 0000012B 8826[9503]          <1> 	mov [gdtdos2 + 7],ah
   172                              <1> 	
   173                              <1> ; fix up gdt and idt
   174 0000012F 67668D83[3E030000]  <1> 	lea eax,[ebx + gdt]	; EAX=linear address of gdt
   175 00000137 66A3[3403]          <1> 	mov [gdtr + 2],eax
   176 0000013B 67668D83[96030000]  <1> 	lea eax,[ebx + idt]	; EAX=linear address of idt
   177 00000143 66A3[3A03]          <1> 	mov [idtr + 2],eax
   178 00000147 FA                  <1> 	cli
   179 00000148 0F0116[3203]        <1> 	lgdt [gdtr]
   180 0000014D 0F011E[3803]        <1> 	lidt [idtr]
   181 00000152 6631DB              <1> 	xor ebx, ebx
   182 00000155 8CDB                <1> 	mov bx, ds
   183 00000157 66891E[3E02]        <1> 	mov [basecache], ebx
   184 0000015C 0F20C0              <1> 	mov eax,cr0
   185 0000015F 0C01                <1> 	or al,1
   186 00000161 0F22C0              <1> 	mov cr0,eax
   187 00000164 EA[6901]1800        <1> 	jmp SYS_CODE_SEL:do_pm
   188                              <1> [BITS 32]
   189                              <1> do_pm:
   190 00000169 31C0                <1> 	xor eax, eax
   191 0000016B 66B82000            <1> 	mov ax, SYS_DATA_SEL
   192 0000016F 8ED8                <1> 	mov ds, ax
   193 00000171 8EC0                <1> 	mov es, ax
   194 00000173 8EE0                <1> 	mov fs, ax
   195 00000175 66B83000            <1> 	mov ax, NEW_DATA_SEL
   196 00000179 8EE8                <1> 	mov gs, ax
   197                              <1> 	
   198                              <1> copykernel:
   199 0000017B 648B06              <1> 	mov eax, [fs:esi]
   200 0000017E 658906              <1> 	mov [gs:esi], eax
   201 00000181 81C604000000        <1> 	add esi, 4
   202 00000187 81FE[3A870000]      <1> 	cmp esi, bsscopy
   203 0000018D 72EC                <1> 	jb copykernel
   204 0000018F EA[96010000]2800    <1> 	jmp NEW_CODE_SEL:done_copy
   205                              <1> 	
   206                              <1> done_copy:
   207 00000196 66B83000            <1> 	mov ax, NEW_DATA_SEL	;;these MUST be setup AFTER the kernel switches places!!!
   208 0000019A 8ED8                <1> 	mov ds, ax
   209 0000019C 8EC0                <1> 	mov es, ax
   210 0000019E 8EE0                <1> 	mov fs, ax
   211                              <1> 	;mov ax, STACK_SEL
   212 000001A0 8ED0                <1> 	mov ss, ax
   213 000001A2 BC[DA960000]        <1> 	mov esp, stackend
   214 000001A7 66B82000            <1> 	mov ax, SYS_DATA_SEL
   215 000001AB 8EE8                <1> 	mov gs, ax
   216                              <1> 	
   217 000001AD E8F5520000          <1> 	call initialize	;initialize drivers
   218                              <1> 	
   219 000001B2 A1[42020000]        <1> 	mov eax, [newcodecache]
   220 000001B7 C1E804              <1> 	shr eax, 4
   221 000001BA A3[3E020000]        <1> 	mov [basecache], eax
   222                              <1> 	
   223 000001BF BE[20BC3900]        <1> 	mov esi, bssend
   224 000001C4 31C0                <1> 	xor eax, eax
   225                              <1> clearkernelbuffers:
   226 000001C6 8906                <1> 	mov [esi], eax
   227 000001C8 81EE04000000        <1> 	sub esi, 4
   228 000001CE 81FE[3A870000]      <1> 	cmp esi, bsscopy
   229 000001D4 77F0                <1> 	ja clearkernelbuffers
   230 000001D6 FB                  <1> 	sti
   231                              <1> 
   232                              <1> getmemoryspace:
   233 000001D7 BE[FA840000]        <1> 	mov esi, memlistbuf
   234 000001DC 31FF                <1> 	xor edi, edi
   235 000001DE 668B3D[3A870000]    <1> 	mov di, [memlistend]
   236 000001E5 01F7                <1> 	add edi, esi
   237 000001E7 31C0                <1> 	xor eax, eax
   238                              <1> memoryspaceaddition:
   239 000001E9 39FE                <1> 	cmp esi, edi
   240 000001EB 7322                <1> 	jae finishedmemspacecalc
   241 000001ED 81C608000000        <1> 	add esi, 8
   242 000001F3 8B0E                <1> 	mov ecx, [esi]
   243 000001F5 81C608000000        <1> 	add esi, 8
   244 000001FB 8B1E                <1> 	mov ebx, [esi]
   245 000001FD 81C608000000        <1> 	add esi, 8
   246 00000203 81FB01000000        <1> 	cmp ebx, 1
   247 00000209 75DE                <1> 	jne memoryspaceaddition
   248 0000020B 01C8                <1> 	add eax, ecx
   249 0000020D EBDA                <1> 	jmp memoryspaceaddition
   250                              <1> finishedmemspacecalc:
   251 0000020F A3[4B020000]        <1> 	mov [memoryspace], eax
   252                              <1> %ifdef gui.included
   253 00000214 803D[F4840000]00    <1> 	cmp byte [guion], 0
   254 0000021B 741C                <1> 	je normalstartup
   255 0000021D 8B1D[3E020000]      <1> 	mov ebx, [basecache]
   256 00000223 C1E304              <1> 	shl ebx, 4
   257 00000226 8B3D[3D4B0000]      <1> 	mov edi, [physbaseptr]
   258 0000022C 29DF                <1> 	sub edi, ebx
   259 0000022E 893D[3D4B0000]      <1> 	mov [physbaseptr], edi
   260 00000234 E9B2570000          <1> 	jmp guiboot
   261                              <1> %endif
   262                              <1> normalstartup:
   263 00000239 E9EE240000          <1> 	jmp os
   264                              <1> 	
   265 0000023E 00000000            <1> basecache dd 0
   266 00000242 00001000            <1> newcodecache dd 0x100000
   267                              <1> 
   268 00000246 00                  <1> testingcpuspeed db 0
   269 00000247 00000000            <1> cpuspeedperint dd 0
   270 0000024B 00000000            <1> memoryspace dd 0
   271 0000024F 7D0A                <1> pitdiv dw 2685
   272 00000251 2E562200            <1> timeinterval dd 2250286
   273 00000255 00000000            <1> timeseconds dd 0
   274 00000259 00000000            <1> timenanoseconds dd 0
   275 0000025D 00                  <1> soundon db 0
   276 0000025E 0000                <1> soundrepititions dw 0
   277 00000260 00000000            <1> soundpos dd 0
   278 00000264 00000000            <1> soundendpos dd 0
   279                              <1> 
   280                              <1> cpuspeedend:
   281 00000268 C605[46020000]00    <1> 	mov byte [testingcpuspeed], 0
   282 0000026F A3[47020000]        <1> 	mov [cpuspeedperint], eax
   283 00000274 B8[70420000]        <1> 	mov eax, cpuspeedloopend
   284 00000279 890424              <1> 	mov [esp], eax
   285 0000027C E9AA000000          <1> 	jmp handled
   286                              <1> 
   287                              <1> ;if using the rtc, the default frequency yeilds a period of 976562.5ns
   288                              <1> ;if using the pit, div=451 is 377981.0004, div=5370 is 4500572.00007ns
   289                              <1> ;div=55483 is 46500044.000006ns, div=2685 is 2250286.00004ns, div=902 is 755962.0008
   290                              <1> 
   291                              <1> pitinterrupt: ;this controls threading
   292 00000281 FA                  <1> 	cli
   293 00000282 803D[46020000]01    <1> 	cmp byte [testingcpuspeed], 1	;check to see if the cpu speed test is running
   294 00000289 74DD                <1> 	je cpuspeedend
   295                              <1> 		
   296 0000028B E874000000          <1> 	call timekeeper ;this updates the internal time
   297                              <1> 	
   298 00000290 803D[5D020000]01    <1> 	cmp byte [soundon], 1
   299 00000297 0F847F4C0000        <1> 	je near PCSpeakerRAW
   300                              <1> timerinterrupt:	;put this into the interrupt handler that controls threading
   301                              <1> %ifdef threads.included
   302 0000029D 803D[61590000]01    <1> 	cmp byte [threadson], 1
   303 000002A4 0F8457560000        <1> 	je near threadswitch
   304                              <1> %endif
   305                              <1> keyinterrupt:		;checks for escape, if pressed, it quits the program currently running
   306 000002AA 803D[61590000]00    <1> 	cmp byte [threadson], 0
   307 000002B1 0F8474000000        <1> 	je near handled
   308                              <1> %ifdef io.serial
   309                              <1> 	jmp handled
   310                              <1> %else
   311 000002B7 FA                  <1> 	cli
   312 000002B8 60                  <1> 	pusha
   313 000002B9 E460                <1> 	in al, 60h
   314 000002BB 3C01                <1> 	cmp al, 1		;escape
   315 000002BD 7405                <1> 	je userint
   316 000002BF E965000000          <1> 	jmp handled2
   317                              <1> userint:
   318                              <1> 	;UNMASK ALL INTS
   319 000002C4 30C0                <1> 	xor al, al
   320 000002C6 E621                <1> 	out 0x21, al
   321 000002C8 30C0                <1> 	xor al, al
   322 000002CA E6A1                <1> 	out 0xA1, al
   323 000002CC B020                <1> 	mov al, 0x20
   324 000002CE E6A0                <1> 	out 0xA0, al
   325 000002D0 E620                <1> 	out 0x20, al
   326                              <1> 	;RESET PIT DIVISOR
   327 000002D2 66A1[4F020000]      <1> 	mov ax, [pitdiv]
   328 000002D8 E640                <1> 	out 0x40, al
   329 000002DA 66C1C008            <1> 	rol ax, 8
   330 000002DE E640                <1> 	out 0x40, al
   331                              <1> 	;RESET PIC
   332 000002E0 B020                <1> 	mov al, 0x20
   333 000002E2 E620                <1> 	out 0x20, al
   334 000002E4 61                  <1> 	popa
   335 000002E5 FB                  <1> 	sti
   336 000002E6 BC[DA960000]        <1> 	mov esp, stackend ;reset stack
   337 000002EB E9F5250000          <1> 	jmp nwcmd
   338                              <1> %endif
   339                              <1> %ifdef rtl8139.included
   340                              <1> rtl8139.irq:
   341                              <1> 	cli
   342                              <1> 	pusha
   343                              <1> 	mov edx, [basenicaddr]
   344                              <1> 	add edx, rtl8139.ISR
   345                              <1> 	xor eax, eax
   346                              <1> 	in ax, dx
   347                              <1> 	mov ecx, eax
   348                              <1> 	call showhex
   349                              <1> 	jmp handled2
   350                              <1> %endif
   351                              <1> %ifdef sound.included
   352                              <1> sblaster.irq:
   353 000002F0 FA                  <1> 	cli
   354 000002F1 60                  <1> 	pusha
   355 000002F2 803D[68510000]01    <1> 	cmp byte [SoundBlaster], 1
   356 000002F9 0F84EA4C0000        <1> 	je near sblastercont
   357 000002FF E925000000          <1> 	jmp handled2
   358                              <1> %endif
   359                              <1> 	
   360                              <1> timekeeper:
   361 00000304 50                  <1> 	push eax
   362 00000305 A1[59020000]        <1> 	mov eax, [timenanoseconds]
   363 0000030A 0305[51020000]      <1> 	add eax, [timeinterval]
   364 00000310 3D00CA9A3B          <1> 	cmp eax, 1000000000
   365 00000315 720B                <1> 	jb nonanosecondrollover
   366 00000317 FF05[55020000]      <1> 	inc dword [timeseconds]
   367 0000031D 2D00CA9A3B          <1> 	sub eax, 1000000000
   368                              <1> nonanosecondrollover:
   369 00000322 A3[59020000]        <1> 	mov [timenanoseconds], eax
   370 00000327 58                  <1> 	pop eax
   371 00000328 C3                  <1> 	ret
   372                              <1> 	
   373                              <1> handled2:
   374 00000329 61                  <1> 	popa
   375                              <1> handled3:
   376 0000032A FB                  <1> 	sti
   377                              <1> handled:
   378 0000032B 50                  <1> 	push eax
   379 0000032C B020                <1> 	mov al, 0x20
   380 0000032E E620                <1> 	out 0x20, al
   381 00000330 58                  <1> 	pop eax
   382 00000331 CF                  <1> 	iret
   383                              <1> [BITS 16]
   384                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   385                              <1> ;	16-bit limit/32-bit linear base address of GDT and IDT
   386                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   387 00000332 5700                <1> gdtr:	dw gdt_end - gdt - 1	; GDT limit
   388 00000334 00000000            <1> 	dd 0    		; filled with linear, physical address of GDT
   389                              <1> 
   390 00000338 FF07                <1> idtr:	dw idt_end - idt - 1	; IDT limit
   391 0000033A 00000000            <1> 	dd 0			; filled with linear, physical address of IDT
   392                              <1> 
   393                              <1> 
   394 0000033E 0000                <1> gdt:	dw 0			; limit 15:0
   395 00000340 0000                <1> 	dw 0			; base 15:0
   396 00000342 00                  <1> 	db 0			; base 23:16
   397 00000343 00                  <1> 	db 0			; type
   398 00000344 00                  <1> 	db 0			; limit 19:16, flags
   399 00000345 00                  <1> 	db 0			; base 31:24
   400                              <1> ; linear data segment descriptor
   401                              <1> LINEAR_SEL	equ	$-gdt
   402 00000346 FFFF                <1> 	dw 0xFFFF		; limit 0xFFFFF
   403 00000348 0000                <1> 	dw 0			; base for this one is always 0
   404 0000034A 00                  <1> 	db 0
   405 0000034B 92                  <1> 	db 0x92			; present, ring 0, data, expand-up, writable
   406 0000034C CF                  <1> 	db 0xCF			; page-granular, 32-bit
   407 0000034D 00                  <1> 	db 0
   408                              <1> STACK_SEL	equ $-gdt
   409 0000034E 0200                <1> gdts:	dw 2;(stackend)/4096
   410 00000350 0000                <1> 	dw 0
   411 00000352 00                  <1> 	db 0
   412 00000353 92                  <1> 	db 0x92
   413 00000354 CF                  <1> 	db 0xCF
   414 00000355 00                  <1> 	db 0
   415                              <1> ; code segment descriptor
   416                              <1> SYS_CODE_SEL	equ	$-gdt
   417 00000356 FFFF                <1> gdt2:	dw 0xFFFF
   418 00000358 0000                <1> 	dw 0			; (base gets set above)
   419 0000035A 00                  <1> 	db 0
   420 0000035B 9A                  <1> 	db 0x9A			; present, ring 0, code, non-conforming, readable
   421 0000035C CF                  <1> 	db 0xCF
   422 0000035D 00                  <1> 	db 0
   423                              <1> ; data segment descriptor
   424                              <1> SYS_DATA_SEL	equ	$-gdt
   425 0000035E FFFF                <1> gdt3:	dw 0xFFFF
   426 00000360 0000                <1> 	dw 0			; (base gets set above)
   427 00000362 00                  <1> 	db 0
   428 00000363 92                  <1> 	db 0x92			; present, ring 0, data, expand-up, writable
   429 00000364 CF                  <1> 	db 0xCF
   430 00000365 00                  <1> 	db 0
   431                              <1> NEW_CODE_SEL	equ	$-gdt
   432 00000366 FFFF                <1> gdt4:	dw 0xFFFF
   433 00000368 0000                <1> 	dw 0			; (base gets set above)
   434 0000036A 00                  <1> 	db 0
   435 0000036B 9A                  <1> 	db 0x9A			; present, ring 0, code, non-conforming, readable
   436 0000036C CF                  <1> 	db 0xCF
   437 0000036D 00                  <1> 	db 0
   438                              <1> ; data segment descriptor
   439                              <1> NEW_DATA_SEL	equ	$-gdt
   440 0000036E FFFF                <1> gdt5:	dw 0xFFFF
   441 00000370 0000                <1> 	dw 0			; (base gets set above)
   442 00000372 00                  <1> 	db 0
   443 00000373 92                  <1> 	db 0x92			; present, ring 0, data, expand-up, writable
   444 00000374 CF                  <1> 	db 0xCF
   445 00000375 00                  <1> 	db 0
   446                              <1> V8086_CODE_SEL	equ $-gdt
   447 00000376 FFFF                <1> gdtv8086: dw 0xFFFF
   448 00000378 0000                <1> 	dw 0
   449 0000037A 00                  <1> 	db 0
   450 0000037B 9A                  <1> 	db 0x9A
   451 0000037C 8F                  <1> 	db 0x8F
   452 0000037D 00                  <1> 	db 0
   453                              <1> V8086_DATA_SEL	equ $-gdt
   454 0000037E FFFF                <1> gdtv80862: dw 0xFFFF
   455 00000380 0000                <1> 	dw 0
   456 00000382 00                  <1> 	db 0
   457 00000383 92                  <1> 	db 0x92
   458 00000384 8F                  <1> 	db 0x8F
   459 00000385 00                  <1> 	db 0
   460                              <1> DOS_CODE_SEL	equ $-gdt	;this gives dos programs complete access to one megabyte at the beginning of memory
   461 00000386 0001                <1> gdtdos:	dw 256	;give it 1 MB
   462 00000388 0000                <1> 	dw 0
   463 0000038A 00                  <1> 	db 0
   464 0000038B 9A                  <1> 	db 0x9A
   465 0000038C 8F                  <1> 	db 0x8F ;16 bit
   466 0000038D 00                  <1> 	db 0
   467                              <1> DOS_DATA_SEL 	equ $-gdt
   468 0000038E 0001                <1> gdtdos2:	dw 256
   469 00000390 0000                <1> 	dw 0
   470 00000392 00                  <1> 	db 0
   471 00000393 92                  <1> 	db 0x92
   472 00000394 8F                  <1> 	db 0x8F ;16 bit
   473 00000395 00                  <1> 	db 0
   474                              <1> gdt_end:
   475                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   476                              <1> ;	interrupt descriptor table (IDT)
   477                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   478                              <1> ; 32 reserved interrupts:
   479                              <1> idt:	
   480                              <1> %assign i 0
   481                              <1> %rep    32
   482                              <1> 		dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   483                              <1> %assign i i+1
   484                              <1> %endrep
   485 00000396 [B70C]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   486                              <2> %assign i i+1
   487 0000039E [C30C]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   488                              <2> %assign i i+1
   489 000003A6 [CF0C]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   490                              <2> %assign i i+1
   491 000003AE [DB0C]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   492                              <2> %assign i i+1
   493 000003B6 [E70C]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   494                              <2> %assign i i+1
   495 000003BE [F30C]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   496                              <2> %assign i i+1
   497 000003C6 [FF0C]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   498                              <2> %assign i i+1
   499 000003CE [0B0D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   500                              <2> %assign i i+1
   501 000003D6 [170D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   502                              <2> %assign i i+1
   503 000003DE [230D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   504                              <2> %assign i i+1
   505 000003E6 [2F0D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   506                              <2> %assign i i+1
   507 000003EE [3B0D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   508                              <2> %assign i i+1
   509 000003F6 [470D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   510                              <2> %assign i i+1
   511 000003FE [530D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   512                              <2> %assign i i+1
   513 00000406 [5F0D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   514                              <2> %assign i i+1
   515 0000040E [6B0D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   516                              <2> %assign i i+1
   517 00000416 [770D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   518                              <2> %assign i i+1
   519 0000041E [830D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   520                              <2> %assign i i+1
   521 00000426 [8F0D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   522                              <2> %assign i i+1
   523 0000042E [9B0D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   524                              <2> %assign i i+1
   525 00000436 [A70D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   526                              <2> %assign i i+1
   527 0000043E [B30D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   528                              <2> %assign i i+1
   529 00000446 [BF0D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   530                              <2> %assign i i+1
   531 0000044E [CB0D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   532                              <2> %assign i i+1
   533 00000456 [D70D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   534                              <2> %assign i i+1
   535 0000045E [E30D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   536                              <2> %assign i i+1
   537 00000466 [EF0D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   538                              <2> %assign i i+1
   539 0000046E [FB0D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   540                              <2> %assign i i+1
   541 00000476 [070E]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   542                              <2> %assign i i+1
   543 0000047E [130E]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   544                              <2> %assign i i+1
   545 00000486 [1F0E]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   546                              <2> %assign i i+1
   547 0000048E [2B0E]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   548                              <2> %assign i i+1
   549 00000496 [FD25]2800008E0000  <1> 		dw int20h,NEW_CODE_SEL,0x8E00,0
   550 0000049E [0126]2800008E0000  <1> 		dw int21h,NEW_CODE_SEL,0x8E00,0
   551                              <1> %assign i 0x22
   552                              <1> %rep 14
   553                              <1> 		dw handled,NEW_CODE_SEL,0x8E00,0
   554                              <1> %assign i +1
   555                              <1> %endrep
   556 000004A6 [2B03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   557                              <2> %assign i +1
   558 000004AE [2B03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   559                              <2> %assign i +1
   560 000004B6 [2B03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   561                              <2> %assign i +1
   562 000004BE [2B03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   563                              <2> %assign i +1
   564 000004C6 [2B03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   565                              <2> %assign i +1
   566 000004CE [2B03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   567                              <2> %assign i +1
   568 000004D6 [2B03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   569                              <2> %assign i +1
   570 000004DE [2B03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   571                              <2> %assign i +1
   572 000004E6 [2B03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   573                              <2> %assign i +1
   574 000004EE [2B03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   575                              <2> %assign i +1
   576 000004F6 [2B03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   577                              <2> %assign i +1
   578 000004FE [2B03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   579                              <2> %assign i +1
   580 00000506 [2B03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   581                              <2> %assign i +1
   582 0000050E [2B03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   583                              <2> %assign i +1
   584                              <1> ;INT 30h for os use and 3rd party use:
   585 00000516 [AA1B]2800008E0000  <1> 		dw newints,NEW_CODE_SEL,0x8E00,0
   586                              <1> %assign i 0x31
   587                              <1> %rep 15
   588                              <1> 		dw handled,NEW_CODE_SEL,0x8E00,0
   589                              <1> %assign i +1
   590                              <1> %endrep
   591 0000051E [2B03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   592                              <2> %assign i +1
   593 00000526 [2B03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   594                              <2> %assign i +1
   595 0000052E [2B03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   596                              <2> %assign i +1
   597 00000536 [2B03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   598                              <2> %assign i +1
   599 0000053E [2B03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   600                              <2> %assign i +1
   601 00000546 [2B03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   602                              <2> %assign i +1
   603 0000054E [2B03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   604                              <2> %assign i +1
   605 00000556 [2B03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   606                              <2> %assign i +1
   607 0000055E [2B03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   608                              <2> %assign i +1
   609 00000566 [2B03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   610                              <2> %assign i +1
   611 0000056E [2B03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   612                              <2> %assign i +1
   613 00000576 [2B03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   614                              <2> %assign i +1
   615 0000057E [2B03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   616                              <2> %assign i +1
   617 00000586 [2B03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   618                              <2> %assign i +1
   619 0000058E [2B03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   620                              <2> %assign i +1
   621                              <1> ;and here we are at 0x40
   622                              <1> ;here are all the irq's
   623 00000596 [8102]2800008E0000  <1> 		dw pitinterrupt,NEW_CODE_SEL,0x8E00,0 ;IRQ 0 = PIT
   624 0000059E [2B03]2800008E0000  <1> 		dw handled,NEW_CODE_SEL,0x8E00,0 ;IRQ 1 = keyboard
   625 000005A6 [2B03]2800008E0000  <1> 		dw handled,NEW_CODE_SEL,0x8E00,0 ;IRQ 2
   626 000005AE [2B03]2800008E0000  <1> 		dw handled,NEW_CODE_SEL,0x8E00,0 ;IRQ 3
   627 000005B6 [2B03]2800008E0000  <1> 		dw handled,NEW_CODE_SEL,0x8E00,0 ;IRQ 4
   628                              <1> 	%ifdef sound.included
   629 000005BE [F002]2800008E0000  <1> 		dw sblaster.irq,NEW_CODE_SEL,0x8E00,0 ;IRQ 5 = default SoundBlaster
   630                              <1> 	%else
   631                              <1> 		dw handled,NEW_CODE_SEL,0x8E00,0 ;IRQ 5
   632                              <1> 	%endif
   633 000005C6 [2B03]2800008E0000  <1> 		dw handled,NEW_CODE_SEL,0x8E00,0 ;IRQ 6
   634 000005CE [2B03]2800008E0000  <1> 		dw handled,NEW_CODE_SEL,0x8E00,0 ;IRQ 7
   635 000005D6 [2B03]2800008E0000  <1> 		dw handled,NEW_CODE_SEL,0x8E00,0 ;IRQ 8 = RTC
   636 000005DE [2B03]2800008E0000  <1> 		dw handled,NEW_CODE_SEL,0x8E00,0 ;IRQ 9
   637 000005E6 [2B03]2800008E0000  <1> 		dw handled,NEW_CODE_SEL,0x8E00,0 ;IRQ 10
   638                              <1> 	%ifdef rtl8139.included
   639                              <1> 		dw rtl8139.irq,NEW_CODE_SEL,0x8E00,0 ;IRQ 11 = default RTL8139
   640                              <1> 	%else
   641 000005EE [2B03]2800008E0000  <1> 		dw handled,NEW_CODE_SEL,0x8E00,0 ;IRQ 11
   642                              <1> 	%endif
   643 000005F6 [2B03]2800008E0000  <1> 		dw handled,NEW_CODE_SEL,0x8E00,0 ;IRQ 12
   644 000005FE [2B03]2800008E0000  <1> 		dw handled,NEW_CODE_SEL,0x8E00,0 ;IRQ 13
   645 00000606 [2B03]2800008E0000  <1> 		dw handled,NEW_CODE_SEL,0x8E00,0 ;IRQ 14
   646 0000060E [2B03]2800008E0000  <1> 		dw handled,NEW_CODE_SEL,0x8E00,0 ;IRQ 15
   647                              <1> ;This brings me up to 0x50
   648                              <1> %assign i 0x50
   649                              <1> %rep 176
   650                              <1> 		dw handled, NEW_CODE_SEL,0x8E00,0
   651                              <1> 		;dw unhand + i*12, NEW_CODE_SEL,0x8E00,0
   652                              <1> %assign i +1
   653                              <1> %endrep
   654 00000616 [2B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   655                              <2> 
   656                              <2> %assign i +1
   657 0000061E [2B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   658                              <2> 
   659                              <2> %assign i +1
   660 00000626 [2B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   661                              <2> 
   662                              <2> %assign i +1
   663 0000062E [2B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   664                              <2> 
   665                              <2> %assign i +1
   666 00000636 [2B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   667                              <2> 
   668                              <2> %assign i +1
   669 0000063E [2B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   670                              <2> 
   671                              <2> %assign i +1
   672 00000646 [2B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   673                              <2> 
   674                              <2> %assign i +1
   675 0000064E [2B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   676                              <2> 
   677                              <2> %assign i +1
   678 00000656 [2B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   679                              <2> 
   680                              <2> %assign i +1
   681 0000065E [2B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   682                              <2> 
   683                              <2> %assign i +1
   684 00000666 [2B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   685                              <2> 
   686                              <2> %assign i +1
   687 0000066E [2B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   688                              <2> 
   689                              <2> %assign i +1
   690 00000676 [2B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   691                              <2> 
   692                              <2> %assign i +1
   693 0000067E [2B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   694                              <2> 
   695                              <2> %assign i +1
   696 00000686 [2B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   697                              <2> 
   698                              <2> %assign i +1
   699 0000068E [2B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   700                              <2> 
   701                              <2> %assign i +1
   702 00000696 [2B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   703                              <2> 
   704                              <2> %assign i +1
   705 0000069E [2B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   706                              <2> 
   707                              <2> %assign i +1
   708 000006A6 [2B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   709                              <2> 
   710                              <2> %assign i +1
   711 000006AE [2B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   712                              <2> 
   713                              <2> %assign i +1
   714 000006B6 [2B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   715                              <2> 
   716                              <2> %assign i +1
   717 000006BE [2B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   718                              <2> 
   719                              <2> %assign i +1
   720 000006C6 [2B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   721                              <2> 
   722                              <2> %assign i +1
   723 000006CE [2B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   724                              <2> 
   725                              <2> %assign i +1
   726 000006D6 [2B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   727                              <2> 
   728                              <2> %assign i +1
   729 000006DE [2B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   730                              <2> 
   731                              <2> %assign i +1
   732 000006E6 [2B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   733                              <2> 
   734                              <2> %assign i +1
   735 000006EE [2B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   736                              <2> 
   737                              <2> %assign i +1
   738 000006F6 [2B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   739                              <2> 
   740                              <2> %assign i +1
   741 000006FE [2B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   742                              <2> 
   743                              <2> %assign i +1
   744 00000706 [2B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   745                              <2> 
   746                              <2> %assign i +1
   747 0000070E [2B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   748                              <2> 
   749                              <2> %assign i +1
   750 00000716 [2B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   751                              <2> 
   752                              <2> %assign i +1
   753 0000071E [2B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   754                              <2> 
   755                              <2> %assign i +1
   756 00000726 [2B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   757                              <2> 
   758                              <2> %assign i +1
   759 0000072E [2B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   760                              <2> 
   761                              <2> %assign i +1
   762 00000736 [2B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   763                              <2> 
   764                              <2> %assign i +1
   765 0000073E [2B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   766                              <2> 
   767                              <2> %assign i +1
   768 00000746 [2B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   769                              <2> 
   770                              <2> %assign i +1
   771 0000074E [2B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   772                              <2> 
   773                              <2> %assign i +1
   774 00000756 [2B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   775                              <2> 
   776                              <2> %assign i +1
   777 0000075E [2B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   778                              <2> 
   779                              <2> %assign i +1
   780 00000766 [2B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   781                              <2> 
   782                              <2> %assign i +1
   783 0000076E [2B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   784                              <2> 
   785                              <2> %assign i +1
   786 00000776 [2B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   787                              <2> 
   788                              <2> %assign i +1
   789 0000077E [2B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   790                              <2> 
   791                              <2> %assign i +1
   792 00000786 [2B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   793                              <2> 
   794                              <2> %assign i +1
   795 0000078E [2B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   796                              <2> 
   797                              <2> %assign i +1
   798 00000796 [2B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   799                              <2> 
   800                              <2> %assign i +1
   801 0000079E [2B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   802                              <2> 
   803                              <2> %assign i +1
   804 000007A6 [2B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   805                              <2> 
   806                              <2> %assign i +1
   807 000007AE [2B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   808                              <2> 
   809                              <2> %assign i +1
   810 000007B6 [2B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   811                              <2> 
   812                              <2> %assign i +1
   813 000007BE [2B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   814                              <2> 
   815                              <2> %assign i +1
   816 000007C6 [2B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   817                              <2> 
   818                              <2> %assign i +1
   819 000007CE [2B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   820                              <2> 
   821                              <2> %assign i +1
   822 000007D6 [2B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   823                              <2> 
   824                              <2> %assign i +1
   825 000007DE [2B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   826                              <2> 
   827                              <2> %assign i +1
   828 000007E6 [2B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   829                              <2> 
   830                              <2> %assign i +1
   831 000007EE [2B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   832                              <2> 
   833                              <2> %assign i +1
   834 000007F6 [2B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   835                              <2> 
   836                              <2> %assign i +1
   837 000007FE [2B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   838                              <2> 
   839                              <2> %assign i +1
   840 00000806 [2B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   841                              <2> 
   842                              <2> %assign i +1
   843 0000080E [2B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   844                              <2> 
   845                              <2> %assign i +1
   846 00000816 [2B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   847                              <2> 
   848                              <2> %assign i +1
   849 0000081E [2B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   850                              <2> 
   851                              <2> %assign i +1
   852 00000826 [2B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   853                              <2> 
   854                              <2> %assign i +1
   855 0000082E [2B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   856                              <2> 
   857                              <2> %assign i +1
   858 00000836 [2B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   859                              <2> 
   860                              <2> %assign i +1
   861 0000083E [2B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   862                              <2> 
   863                              <2> %assign i +1
   864 00000846 [2B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   865                              <2> 
   866                              <2> %assign i +1
   867 0000084E [2B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   868                              <2> 
   869                              <2> %assign i +1
   870 00000856 [2B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   871                              <2> 
   872                              <2> %assign i +1
   873 0000085E [2B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   874                              <2> 
   875                              <2> %assign i +1
   876 00000866 [2B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   877                              <2> 
   878                              <2> %assign i +1
   879 0000086E [2B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   880                              <2> 
   881                              <2> %assign i +1
   882 00000876 [2B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   883                              <2> 
   884                              <2> %assign i +1
   885 0000087E [2B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   886                              <2> 
   887                              <2> %assign i +1
   888 00000886 [2B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   889                              <2> 
   890                              <2> %assign i +1
   891 0000088E [2B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   892                              <2> 
   893                              <2> %assign i +1
   894 00000896 [2B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   895                              <2> 
   896                              <2> %assign i +1
   897 0000089E [2B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   898                              <2> 
   899                              <2> %assign i +1
   900 000008A6 [2B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   901                              <2> 
   902                              <2> %assign i +1
   903 000008AE [2B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   904                              <2> 
   905                              <2> %assign i +1
   906 000008B6 [2B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   907                              <2> 
   908                              <2> %assign i +1
   909 000008BE [2B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   910                              <2> 
   911                              <2> %assign i +1
   912 000008C6 [2B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   913                              <2> 
   914                              <2> %assign i +1
   915 000008CE [2B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   916                              <2> 
   917                              <2> %assign i +1
   918 000008D6 [2B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   919                              <2> 
   920                              <2> %assign i +1
   921 000008DE [2B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   922                              <2> 
   923                              <2> %assign i +1
   924 000008E6 [2B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   925                              <2> 
   926                              <2> %assign i +1
   927 000008EE [2B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   928                              <2> 
   929                              <2> %assign i +1
   930 000008F6 [2B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   931                              <2> 
   932                              <2> %assign i +1
   933 000008FE [2B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   934                              <2> 
   935                              <2> %assign i +1
   936 00000906 [2B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   937                              <2> 
   938                              <2> %assign i +1
   939 0000090E [2B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   940                              <2> 
   941                              <2> %assign i +1
   942 00000916 [2B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   943                              <2> 
   944                              <2> %assign i +1
   945 0000091E [2B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   946                              <2> 
   947                              <2> %assign i +1
   948 00000926 [2B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   949                              <2> 
   950                              <2> %assign i +1
   951 0000092E [2B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   952                              <2> 
   953                              <2> %assign i +1
   954 00000936 [2B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   955                              <2> 
   956                              <2> %assign i +1
   957 0000093E [2B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   958                              <2> 
   959                              <2> %assign i +1
   960 00000946 [2B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   961                              <2> 
   962                              <2> %assign i +1
   963 0000094E [2B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   964                              <2> 
   965                              <2> %assign i +1
   966 00000956 [2B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   967                              <2> 
   968                              <2> %assign i +1
   969 0000095E [2B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   970                              <2> 
   971                              <2> %assign i +1
   972 00000966 [2B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   973                              <2> 
   974                              <2> %assign i +1
   975 0000096E [2B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   976                              <2> 
   977                              <2> %assign i +1
   978 00000976 [2B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   979                              <2> 
   980                              <2> %assign i +1
   981 0000097E [2B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   982                              <2> 
   983                              <2> %assign i +1
   984 00000986 [2B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   985                              <2> 
   986                              <2> %assign i +1
   987 0000098E [2B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   988                              <2> 
   989                              <2> %assign i +1
   990 00000996 [2B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   991                              <2> 
   992                              <2> %assign i +1
   993 0000099E [2B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   994                              <2> 
   995                              <2> %assign i +1
   996 000009A6 [2B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   997                              <2> 
   998                              <2> %assign i +1
   999 000009AE [2B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1000                              <2> 
  1001                              <2> %assign i +1
  1002 000009B6 [2B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1003                              <2> 
  1004                              <2> %assign i +1
  1005 000009BE [2B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1006                              <2> 
  1007                              <2> %assign i +1
  1008 000009C6 [2B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1009                              <2> 
  1010                              <2> %assign i +1
  1011 000009CE [2B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1012                              <2> 
  1013                              <2> %assign i +1
  1014 000009D6 [2B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1015                              <2> 
  1016                              <2> %assign i +1
  1017 000009DE [2B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1018                              <2> 
  1019                              <2> %assign i +1
  1020 000009E6 [2B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1021                              <2> 
  1022                              <2> %assign i +1
  1023 000009EE [2B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1024                              <2> 
  1025                              <2> %assign i +1
  1026 000009F6 [2B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1027                              <2> 
  1028                              <2> %assign i +1
  1029 000009FE [2B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1030                              <2> 
  1031                              <2> %assign i +1
  1032 00000A06 [2B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1033                              <2> 
  1034                              <2> %assign i +1
  1035 00000A0E [2B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1036                              <2> 
  1037                              <2> %assign i +1
  1038 00000A16 [2B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1039                              <2> 
  1040                              <2> %assign i +1
  1041 00000A1E [2B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1042                              <2> 
  1043                              <2> %assign i +1
  1044 00000A26 [2B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1045                              <2> 
  1046                              <2> %assign i +1
  1047 00000A2E [2B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1048                              <2> 
  1049                              <2> %assign i +1
  1050 00000A36 [2B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1051                              <2> 
  1052                              <2> %assign i +1
  1053 00000A3E [2B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1054                              <2> 
  1055                              <2> %assign i +1
  1056 00000A46 [2B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1057                              <2> 
  1058                              <2> %assign i +1
  1059 00000A4E [2B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1060                              <2> 
  1061                              <2> %assign i +1
  1062 00000A56 [2B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1063                              <2> 
  1064                              <2> %assign i +1
  1065 00000A5E [2B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1066                              <2> 
  1067                              <2> %assign i +1
  1068 00000A66 [2B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1069                              <2> 
  1070                              <2> %assign i +1
  1071 00000A6E [2B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1072                              <2> 
  1073                              <2> %assign i +1
  1074 00000A76 [2B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1075                              <2> 
  1076                              <2> %assign i +1
  1077 00000A7E [2B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1078                              <2> 
  1079                              <2> %assign i +1
  1080 00000A86 [2B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1081                              <2> 
  1082                              <2> %assign i +1
  1083 00000A8E [2B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1084                              <2> 
  1085                              <2> %assign i +1
  1086 00000A96 [2B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1087                              <2> 
  1088                              <2> %assign i +1
  1089 00000A9E [2B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1090                              <2> 
  1091                              <2> %assign i +1
  1092 00000AA6 [2B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1093                              <2> 
  1094                              <2> %assign i +1
  1095 00000AAE [2B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1096                              <2> 
  1097                              <2> %assign i +1
  1098 00000AB6 [2B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1099                              <2> 
  1100                              <2> %assign i +1
  1101 00000ABE [2B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1102                              <2> 
  1103                              <2> %assign i +1
  1104 00000AC6 [2B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1105                              <2> 
  1106                              <2> %assign i +1
  1107 00000ACE [2B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1108                              <2> 
  1109                              <2> %assign i +1
  1110 00000AD6 [2B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1111                              <2> 
  1112                              <2> %assign i +1
  1113 00000ADE [2B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1114                              <2> 
  1115                              <2> %assign i +1
  1116 00000AE6 [2B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1117                              <2> 
  1118                              <2> %assign i +1
  1119 00000AEE [2B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1120                              <2> 
  1121                              <2> %assign i +1
  1122 00000AF6 [2B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1123                              <2> 
  1124                              <2> %assign i +1
  1125 00000AFE [2B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1126                              <2> 
  1127                              <2> %assign i +1
  1128 00000B06 [2B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1129                              <2> 
  1130                              <2> %assign i +1
  1131 00000B0E [2B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1132                              <2> 
  1133                              <2> %assign i +1
  1134 00000B16 [2B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1135                              <2> 
  1136                              <2> %assign i +1
  1137 00000B1E [2B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1138                              <2> 
  1139                              <2> %assign i +1
  1140 00000B26 [2B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1141                              <2> 
  1142                              <2> %assign i +1
  1143 00000B2E [2B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1144                              <2> 
  1145                              <2> %assign i +1
  1146 00000B36 [2B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1147                              <2> 
  1148                              <2> %assign i +1
  1149 00000B3E [2B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1150                              <2> 
  1151                              <2> %assign i +1
  1152 00000B46 [2B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1153                              <2> 
  1154                              <2> %assign i +1
  1155 00000B4E [2B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1156                              <2> 
  1157                              <2> %assign i +1
  1158 00000B56 [2B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1159                              <2> 
  1160                              <2> %assign i +1
  1161 00000B5E [2B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1162                              <2> 
  1163                              <2> %assign i +1
  1164 00000B66 [2B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1165                              <2> 
  1166                              <2> %assign i +1
  1167 00000B6E [2B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1168                              <2> 
  1169                              <2> %assign i +1
  1170 00000B76 [2B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1171                              <2> 
  1172                              <2> %assign i +1
  1173 00000B7E [2B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1174                              <2> 
  1175                              <2> %assign i +1
  1176 00000B86 [2B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1177                              <2> 
  1178                              <2> %assign i +1
  1179 00000B8E [2B03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1180                              <2> 
  1181                              <2> %assign i +1
  1182                              <1> idt_end:
  1183                              <1> [BITS 32]
  1184                                  	%include "source/realmode.asm"
  1185                              <1> realmode:	;make sure the real mode program's address is in realmodeptr 
  1186                              <1> 			;and the return address is in realmodereturn
  1187 00000B96 FA                  <1> 	cli
  1188 00000B97 A3[A90C0000]        <1> 	mov [realmodeeax], eax
  1189 00000B9C 891D[A50C0000]      <1> 	mov [realmodeebx], ebx
  1190 00000BA2 8925[970C0000]      <1> 	mov [pmodeesp], esp
  1191                              <1> 
  1192 00000BA8 BB[A10C0000]        <1> 	mov ebx, cr0old
  1193                              <1> rmcopytofirstmbyte:
  1194 00000BAD 8B03                <1> 	mov eax, [ebx]
  1195 00000BAF 658903              <1> 	mov [gs:ebx], eax
  1196 00000BB2 81C304000000        <1> 	add ebx, 4
  1197 00000BB8 81FB[B10C0000]      <1> 	cmp ebx, realmodeptr
  1198 00000BBE 76ED                <1> 	jbe rmcopytofirstmbyte
  1199                              <1> 
  1200 00000BC0 EA[C70B0000]3800    <1> 	jmp V8086_CODE_SEL:protected16bit
  1201                              <1> 
  1202                              <1> [BITS 16]
  1203                              <1> protected16bit:
  1204 00000BC7 B84000              <1> 	mov ax, V8086_DATA_SEL
  1205 00000BCA 8ED8                <1> 	mov ds, ax
  1206 00000BCC 8EC0                <1> 	mov es, ax
  1207 00000BCE 8EE0                <1> 	mov fs, ax
  1208 00000BD0 8EE8                <1> 	mov gs, ax
  1209 00000BD2 8ED0                <1> 	mov ss, ax
  1210 00000BD4 66BC[DA960000]      <1> 	mov esp, stackend
  1211 00000BDA 0F20C0              <1> 	mov eax, cr0
  1212 00000BDD 66A3[A10C]          <1> 	mov [cr0old], eax
  1213 00000BE1 6625FEFFFF7F        <1> 	and eax, 0x7FFFFFFE
  1214 00000BE7 0F22C0              <1> 	mov cr0, eax	;now in real mode
  1215 00000BEA EA[EF0B]0010        <1> 	jmp 0x1000:inrealmode
  1216                              <1> 
  1217                              <1> inrealmode:
  1218 00000BEF 8CC8                <1> 	mov ax, cs
  1219 00000BF1 8ED8                <1> 	mov ds, ax
  1220 00000BF3 8EC0                <1> 	mov es, ax
  1221 00000BF5 8EE0                <1> 	mov fs, ax
  1222 00000BF7 8EE8                <1> 	mov gs, ax
  1223 00000BF9 8ED0                <1> 	mov ss, ax
  1224 00000BFB BC[DA96]            <1> 	mov sp, stackend ;because this is at 0x1000: and not 0x10000: it works
  1225                              <1> 	
  1226 00000BFE B011                <1> 	mov al, 0x11
  1227 00000C00 E620                <1> 	out 0x20, al
  1228 00000C02 E6A0                <1> 	out 0xA0, al
  1229 00000C04 B008                <1> 	mov al, 0x8		;interrupt for master
  1230 00000C06 E621                <1> 	out 0x21, al
  1231 00000C08 B070                <1> 	mov al, 0x70	;interrupt for slave
  1232 00000C0A E6A1                <1> 	out 0xA1, al
  1233 00000C0C B004                <1> 	mov al, 4
  1234 00000C0E E621                <1> 	out 0x21, al
  1235 00000C10 B002                <1> 	mov al, 2
  1236 00000C12 E6A1                <1> 	out 0xA1, al
  1237 00000C14 B001                <1> 	mov al, 0x1
  1238 00000C16 E621                <1> 	out 0x21, al
  1239 00000C18 B001                <1> 	mov al, 0x1
  1240 00000C1A E6A1                <1> 	out 0xA1, al
  1241                              <1> 	
  1242 00000C1C 0F011E[9B0C]        <1> 	lidt [idt_real]
  1243 00000C21 FB                  <1> 	sti
  1244                              <1> 
  1245 00000C22 66A1[A90C]          <1> 	mov eax, [realmodeeax]
  1246 00000C26 668B1E[A50C]        <1> 	mov ebx, [realmodeebx]
  1247                              <1> 
  1248 00000C2B FF16[B10C]          <1> 	call word [realmodeptr] ;call the real mode program here
  1249                              <1> 
  1250 00000C2F 66A3[A90C]          <1> 	mov [realmodeeax], eax
  1251 00000C33 66891E[A50C]        <1> 	mov [realmodeebx], ebx
  1252                              <1> 
  1253 00000C38 FA                  <1> 	cli
  1254 00000C39 0F0116[3203]        <1> 	lgdt [gdtr]
  1255 00000C3E 0F011E[3803]        <1> 	lidt [idtr]
  1256 00000C43 0F20C0              <1> 	mov eax, cr0
  1257 00000C46 0C01                <1> 	or al, 1
  1258 00000C48 0F22C0              <1> 	mov cr0,eax
  1259 00000C4B EA[500C]2800        <1> 	jmp NEW_CODE_SEL:returntopmode
  1260                              <1> 
  1261                              <1> [BITS 32]
  1262                              <1> returntopmode:
  1263 00000C50 66B83000            <1> 	mov ax, NEW_DATA_SEL
  1264 00000C54 8ED8                <1> 	mov ds, ax
  1265 00000C56 8EC0                <1> 	mov es, ax
  1266 00000C58 8EE0                <1> 	mov fs, ax
  1267 00000C5A 8ED0                <1> 	mov ss, ax
  1268 00000C5C 8B25[970C0000]      <1> 	mov esp, [pmodeesp]
  1269 00000C62 66B82000            <1> 	mov ax, SYS_DATA_SEL
  1270 00000C66 8EE8                <1> 	mov gs, ax
  1271                              <1> 
  1272 00000C68 BB[A10C0000]        <1> 	mov ebx, cr0old
  1273                              <1> rmcopyfromfirstmbyte:
  1274 00000C6D 658B03              <1> 	mov eax, [gs:ebx]
  1275 00000C70 8903                <1> 	mov [ebx], eax
  1276 00000C72 81C304000000        <1> 	add ebx, 4
  1277 00000C78 81FB[B10C0000]      <1> 	cmp ebx, realmodeptr
  1278 00000C7E 76ED                <1> 	jbe rmcopyfromfirstmbyte
  1279                              <1> 
  1280 00000C80 E840480000          <1> 	call initialize.pic ;reset irq's and masks
  1281 00000C85 FB                  <1> 	sti
  1282 00000C86 A1[A90C0000]        <1> 	mov eax, [realmodeeax]
  1283 00000C8B 8B1D[A50C0000]      <1> 	mov ebx, [realmodeebx]
  1284 00000C91 FF25[AD0C0000]      <1> 	jmp dword [realmodereturn]
  1285                              <1> 	
  1286 00000C97 00000000            <1> pmodeesp dd 0
  1287                              <1> idt_real:
  1288 00000C9B FF03                <1> 	dw 0x3FF
  1289 00000C9D 00000000            <1> 	dd 0
  1290 00000CA1 00000000            <1> cr0old dd 0
  1291 00000CA5 00000000            <1> realmodeebx dd 0
  1292 00000CA9 00000000            <1> realmodeeax dd 0
  1293 00000CAD 00000000            <1> realmodereturn dd 0
  1294 00000CB1 0000                <1> realmodeptr dw 0
  1295 00000CB3 00000000            <1> dd 0 ;make sure the copy thing doesnt overflow
  1296                                  [BITS 32]
  1297                                      %include "source/exception.asm"
  1298                              <1> %ifdef exceptions.included
  1299                              <1> unhand:	
  1300                              <1> 	%assign i 0
  1301                              <1> 	%rep 32
  1302                              <1> 	mov byte [intprob], i
  1303                              <1> 	jmp unhand2
  1304                              <1> 	%assign i i+1
  1305                              <1> 	%endrep
  1306 00000CB7 C605[69110000]00    <2>  mov byte [intprob], i
  1307 00000CBE E974010000          <2>  jmp unhand2
  1308                              <2>  %assign i i+1
  1309 00000CC3 C605[69110000]01    <2>  mov byte [intprob], i
  1310 00000CCA E968010000          <2>  jmp unhand2
  1311                              <2>  %assign i i+1
  1312 00000CCF C605[69110000]02    <2>  mov byte [intprob], i
  1313 00000CD6 E95C010000          <2>  jmp unhand2
  1314                              <2>  %assign i i+1
  1315 00000CDB C605[69110000]03    <2>  mov byte [intprob], i
  1316 00000CE2 E950010000          <2>  jmp unhand2
  1317                              <2>  %assign i i+1
  1318 00000CE7 C605[69110000]04    <2>  mov byte [intprob], i
  1319 00000CEE E944010000          <2>  jmp unhand2
  1320                              <2>  %assign i i+1
  1321 00000CF3 C605[69110000]05    <2>  mov byte [intprob], i
  1322 00000CFA E938010000          <2>  jmp unhand2
  1323                              <2>  %assign i i+1
  1324 00000CFF C605[69110000]06    <2>  mov byte [intprob], i
  1325 00000D06 E92C010000          <2>  jmp unhand2
  1326                              <2>  %assign i i+1
  1327 00000D0B C605[69110000]07    <2>  mov byte [intprob], i
  1328 00000D12 E920010000          <2>  jmp unhand2
  1329                              <2>  %assign i i+1
  1330 00000D17 C605[69110000]08    <2>  mov byte [intprob], i
  1331 00000D1E E914010000          <2>  jmp unhand2
  1332                              <2>  %assign i i+1
  1333 00000D23 C605[69110000]09    <2>  mov byte [intprob], i
  1334 00000D2A E908010000          <2>  jmp unhand2
  1335                              <2>  %assign i i+1
  1336 00000D2F C605[69110000]0A    <2>  mov byte [intprob], i
  1337 00000D36 E9FC000000          <2>  jmp unhand2
  1338                              <2>  %assign i i+1
  1339 00000D3B C605[69110000]0B    <2>  mov byte [intprob], i
  1340 00000D42 E9F0000000          <2>  jmp unhand2
  1341                              <2>  %assign i i+1
  1342 00000D47 C605[69110000]0C    <2>  mov byte [intprob], i
  1343 00000D4E E9E4000000          <2>  jmp unhand2
  1344                              <2>  %assign i i+1
  1345 00000D53 C605[69110000]0D    <2>  mov byte [intprob], i
  1346 00000D5A E9D8000000          <2>  jmp unhand2
  1347                              <2>  %assign i i+1
  1348 00000D5F C605[69110000]0E    <2>  mov byte [intprob], i
  1349 00000D66 E9CC000000          <2>  jmp unhand2
  1350                              <2>  %assign i i+1
  1351 00000D6B C605[69110000]0F    <2>  mov byte [intprob], i
  1352 00000D72 E9C0000000          <2>  jmp unhand2
  1353                              <2>  %assign i i+1
  1354 00000D77 C605[69110000]10    <2>  mov byte [intprob], i
  1355 00000D7E E9B4000000          <2>  jmp unhand2
  1356                              <2>  %assign i i+1
  1357 00000D83 C605[69110000]11    <2>  mov byte [intprob], i
  1358 00000D8A E9A8000000          <2>  jmp unhand2
  1359                              <2>  %assign i i+1
  1360 00000D8F C605[69110000]12    <2>  mov byte [intprob], i
  1361 00000D96 E99C000000          <2>  jmp unhand2
  1362                              <2>  %assign i i+1
  1363 00000D9B C605[69110000]13    <2>  mov byte [intprob], i
  1364 00000DA2 E990000000          <2>  jmp unhand2
  1365                              <2>  %assign i i+1
  1366 00000DA7 C605[69110000]14    <2>  mov byte [intprob], i
  1367 00000DAE E984000000          <2>  jmp unhand2
  1368                              <2>  %assign i i+1
  1369 00000DB3 C605[69110000]15    <2>  mov byte [intprob], i
  1370 00000DBA E978000000          <2>  jmp unhand2
  1371                              <2>  %assign i i+1
  1372 00000DBF C605[69110000]16    <2>  mov byte [intprob], i
  1373 00000DC6 E96C000000          <2>  jmp unhand2
  1374                              <2>  %assign i i+1
  1375 00000DCB C605[69110000]17    <2>  mov byte [intprob], i
  1376 00000DD2 E960000000          <2>  jmp unhand2
  1377                              <2>  %assign i i+1
  1378 00000DD7 C605[69110000]18    <2>  mov byte [intprob], i
  1379 00000DDE E954000000          <2>  jmp unhand2
  1380                              <2>  %assign i i+1
  1381 00000DE3 C605[69110000]19    <2>  mov byte [intprob], i
  1382 00000DEA E948000000          <2>  jmp unhand2
  1383                              <2>  %assign i i+1
  1384 00000DEF C605[69110000]1A    <2>  mov byte [intprob], i
  1385 00000DF6 E93C000000          <2>  jmp unhand2
  1386                              <2>  %assign i i+1
  1387 00000DFB C605[69110000]1B    <2>  mov byte [intprob], i
  1388 00000E02 E930000000          <2>  jmp unhand2
  1389                              <2>  %assign i i+1
  1390 00000E07 C605[69110000]1C    <2>  mov byte [intprob], i
  1391 00000E0E E924000000          <2>  jmp unhand2
  1392                              <2>  %assign i i+1
  1393 00000E13 C605[69110000]1D    <2>  mov byte [intprob], i
  1394 00000E1A E918000000          <2>  jmp unhand2
  1395                              <2>  %assign i i+1
  1396 00000E1F C605[69110000]1E    <2>  mov byte [intprob], i
  1397 00000E26 E90C000000          <2>  jmp unhand2
  1398                              <2>  %assign i i+1
  1399 00000E2B C605[69110000]1F    <2>  mov byte [intprob], i
  1400 00000E32 E900000000          <2>  jmp unhand2
  1401                              <2>  %assign i i+1
  1402                              <1> unhand2:
  1403 00000E37 FA                  <1> 	cli
  1404 00000E38 1E                  <1> 	push ds
  1405 00000E39 06                  <1> 	push es
  1406 00000E3A 0FA0                <1> 	push fs
  1407 00000E3C 0FA8                <1> 	push gs
  1408 00000E3E 16                  <1> 	push ss
  1409 00000E3F 60                  <1> 	pushad
  1410                              <1> %ifdef gui.included
  1411 00000E40 803D[F4840000]00    <1> 	cmp byte [guion], 0
  1412 00000E47 0F8432000000        <1> 	je near noguiunhandstuff
  1413 00000E4D 66C705[63110000]08- <1> 	mov word [locunhandy], 8
  1414 00000E55 00                  <1>
  1415 00000E56 66C705[65110000]08- <1> 	mov word [locunhandx], 8
  1416 00000E5E 00                  <1>
  1417 00000E5F 668B1D[E7590000]    <1> 	mov bx, [background]
  1418 00000E66 66891D[67110000]    <1> 	mov [backgroundcache], bx
  1419 00000E6D C605[174C0000]01    <1> 	mov byte [mousedisabled],1
  1420 00000E74 66BB00F8            <1> 	mov bx, 1111100000000000b
  1421 00000E78 66891D[E7590000]    <1> 	mov [background], bx
  1422                              <1> noguiunhandstuff:
  1423                              <1> %endif
  1424 00000E7F 89E6                <1> 	mov esi, esp
  1425 00000E81 8935[57110000]      <1> 	mov [espfirst], esi
  1426 00000E87 81C6BC000000        <1> 	add esi, ((unhndrgend - unhndrg)/15)*4
  1427 00000E8D 8935[53110000]      <1> 	mov [esploc], esi
  1428 00000E93 BE[78110000]        <1> 	mov esi, unhandmsg
  1429 00000E98 8935[5B110000]      <1> 	mov [esiloc], esi
  1430 00000E9E 31C9                <1> 	xor ecx, ecx
  1431 00000EA0 8A0D[69110000]      <1> 	mov cl, [intprob]
  1432 00000EA6 BB[47150000]        <1> 	mov ebx, errortypes
  1433 00000EAB C1E102              <1> 	shl ecx, 2
  1434 00000EAE 01CB                <1> 	add ebx, ecx
  1435 00000EB0 81FB[87150000]      <1> 	cmp ebx, errortypesend
  1436 00000EB6 7205                <1> 	jb gooderrortype
  1437 00000EB8 BB[87150000]        <1> 	mov ebx, errortypesend
  1438                              <1> gooderrortype:
  1439 00000EBD 8B33                <1> 	mov esi, [ebx]
  1440                              <1> %ifdef gui.included
  1441 00000EBF 803D[F4840000]00    <1> 	cmp byte [guion], 0
  1442 00000EC6 0F842D000000        <1> 	je near errortext
  1443 00000ECC 668B0D[63110000]    <1> 	mov cx, [locunhandy]
  1444 00000ED3 668B15[65110000]    <1> 	mov dx, [locunhandx]
  1445 00000EDA 66B80100            <1> 	mov ax, 1
  1446 00000EDE 6631DB              <1> 	xor bx, bx
  1447 00000EE1 E882560000          <1> 	call showstring2
  1448 00000EE6 66890D[63110000]    <1> 	mov [locunhandy], cx
  1449 00000EED 668915[65110000]    <1> 	mov [locunhandx], dx
  1450 00000EF4 E905000000          <1> 	jmp errortextdone
  1451                              <1> %endif
  1452                              <1> errortext:
  1453 00000EF9 E8E40D0000          <1> 	call print		;;get the error message and print it
  1454                              <1> errortextdone:
  1455 00000EFE 31C9                <1> 	xor ecx, ecx
  1456 00000F00 8A0D[69110000]      <1> 	mov cl, [intprob]
  1457 00000F06 E8E1010000          <1> 	call expdump
  1458                              <1> dumpstack:
  1459 00000F0B 8B35[53110000]      <1> 	mov esi, [esploc]
  1460 00000F11 39E6                <1> 	cmp esi, esp
  1461 00000F13 7216                <1> 	jb donedump
  1462 00000F15 368B0E              <1> 	mov ecx, [ss:esi]
  1463 00000F18 81EE04000000        <1> 	sub esi, 4
  1464 00000F1E 8935[53110000]      <1> 	mov [esploc], esi
  1465 00000F24 E8C3010000          <1> 	call expdump
  1466 00000F29 EBE0                <1> 	jmp dumpstack
  1467                              <1> donedump:
  1468 00000F2B 0F20C1              <1> 	mov ecx, cr0
  1469 00000F2E E8B9010000          <1> 	call expdump
  1470 00000F33 0F20D1              <1> 	mov ecx, cr2
  1471 00000F36 E8B1010000          <1> 	call expdump
  1472 00000F3B 0F20D9              <1> 	mov ecx, cr3
  1473 00000F3E E8A9010000          <1> 	call expdump
  1474 00000F43 0F20E1              <1> 	mov ecx, cr4
  1475 00000F46 E8A1010000          <1> 	call expdump
  1476 00000F4B 0F00C9              <1> 	str ecx
  1477 00000F4E E899010000          <1> 	call expdump
  1478 00000F53 0F010D[72110000]    <1> 	sidt [igdtcache]
  1479 00000F5A 8B0D[74110000]      <1> 	mov ecx, [igdtcache + 2]
  1480 00000F60 E887010000          <1> 	call expdump
  1481 00000F65 0F0105[72110000]    <1> 	sgdt [igdtcache]
  1482 00000F6C 8B0D[74110000]      <1> 	mov ecx, [igdtcache + 2]
  1483 00000F72 E875010000          <1> 	call expdump
  1484 00000F77 0F00C1              <1> 	sldt ecx
  1485 00000F7A E86D010000          <1> 	call expdump
  1486 00000F7F 8B35[53110000]      <1> 	mov esi, [esploc]
  1487 00000F85 368B7C2434          <1> 	mov edi, [ss:esp + 52]
  1488 00000F8A 81C710000000        <1> 	add edi, 16
  1489 00000F90 893D[6E110000]      <1> 	mov [codelocend], edi
  1490 00000F96 81EF20000000        <1> 	sub edi, 32
  1491                              <1> dumpcodeloop:
  1492 00000F9C 893D[6A110000]      <1> 	mov [codeloc], edi
  1493 00000FA2 8B0F                <1> 	mov ecx, [edi]
  1494 00000FA4 E843010000          <1> 	call expdump
  1495 00000FA9 8B3D[6A110000]      <1> 	mov edi, [codeloc]
  1496 00000FAF 81C704000000        <1> 	add edi, 4
  1497 00000FB5 3B3D[6E110000]      <1> 	cmp edi, [codelocend]
  1498 00000FBB 72DF                <1> 	jb dumpcodeloop
  1499 00000FBD BE[7D100000]        <1> 	mov esi, backtoosmsg
  1500                              <1> %ifdef gui.included
  1501 00000FC2 803D[F4840000]00    <1> 	cmp byte [guion], 0
  1502 00000FC9 741F                <1> 	je backtomsg
  1503                              <1> guibacktomsg:
  1504 00000FCB 668B15[65110000]    <1> 	mov dx, [locunhandx]
  1505 00000FD2 668B0D[63110000]    <1> 	mov cx, [locunhandy]
  1506 00000FD9 66B80100            <1> 	mov ax, 1
  1507 00000FDD 6631DB              <1> 	xor bx, bx
  1508 00000FE0 E883550000          <1> 	call showstring2
  1509 00000FE5 E905000000          <1> 	jmp backtomsgdone
  1510                              <1> backtomsg:
  1511                              <1> %endif
  1512 00000FEA E8F30C0000          <1> 	call print
  1513                              <1> backtomsgdone:
  1514 00000FEF 30C0                <1> 	xor al, al
  1515 00000FF1 E84E110000          <1> 	call rdcharint
  1516 00000FF6 803D[69110000]03    <1> 	cmp byte [intprob], 3
  1517 00000FFD 7541                <1> 	jne nodebugint
  1518                              <1> %ifdef gui.included
  1519 00000FFF 803D[F4840000]00    <1> 	cmp byte [guion], 0
  1520 00001006 7427                <1> 	je nodebuggui
  1521 00001008 668B1D[67110000]    <1> 	mov bx, [backgroundcache]
  1522 0000100F 66891D[E7590000]    <1> 	mov [background], bx
  1523 00001016 6631DB              <1> 	xor bx, bx
  1524 00001019 C605[174C0000]00    <1> 	mov byte [mousedisabled], 0
  1525 00001020 E841490000          <1> 	call guiclear
  1526 00001025 E8C0510000          <1> 	call reloadallgraphics
  1527 0000102A E8C2140000          <1> 	call termcopy
  1528                              <1> nodebuggui:
  1529                              <1> %endif
  1530 0000102F 8B35[57110000]      <1> 	mov esi, [espfirst]
  1531 00001035 89F4                <1> 	mov esp, esi
  1532 00001037 61                  <1> 	popad
  1533 00001038 17                  <1> 	pop ss
  1534 00001039 0FA9                <1> 	pop gs
  1535 0000103B 0FA1                <1> 	pop fs
  1536 0000103D 07                  <1> 	pop es
  1537 0000103E 1F                  <1> 	pop ds
  1538 0000103F CF                  <1> 	iret
  1539                              <1> nodebugint:
  1540 00001040 61                  <1> 	popad
  1541 00001041 17                  <1> 	pop ss
  1542 00001042 0FA9                <1> 	pop gs
  1543 00001044 0FA1                <1> 	pop fs
  1544 00001046 07                  <1> 	pop es
  1545 00001047 1F                  <1> 	pop ds
  1546                              <1> %ifdef gui.included
  1547 00001048 803D[F4840000]00    <1> 	cmp byte [guion], 0
  1548 0000104F 7427                <1> 	je returnunhandgui
  1549 00001051 668B1D[67110000]    <1> 	mov bx, [backgroundcache]
  1550 00001058 66891D[E7590000]    <1> 	mov [background], bx
  1551 0000105F 6631DB              <1> 	xor bx, bx
  1552 00001062 C605[174C0000]00    <1> 	mov byte [mousedisabled], 0
  1553 00001069 E8F8480000          <1> 	call guiclear
  1554 0000106E E877510000          <1> 	call reloadallgraphics
  1555 00001073 E879140000          <1> 	call termcopy
  1556                              <1> %endif
  1557                              <1> returnunhandgui:
  1558 00001078 E968180000          <1> 	jmp nwcmd
  1559 0000107D 506C6561736520706F- <1> backtoosmsg db "Please post any problems in the Issues section at solleros.googlecode.com",10
  1560 00001086 737420616E79207072- <1>
  1561 0000108F 6F626C656D7320696E- <1>
  1562 00001098 207468652049737375- <1>
  1563 000010A1 65732073656374696F- <1>
  1564 000010AA 6E20617420736F6C6C- <1>
  1565 000010B3 65726F732E676F6F67- <1>
  1566 000010BC 6C65636F64652E636F- <1>
  1567 000010C5 6D0A                <1>
  1568 000010C7 507265737320616E79- <1> 			db "Press any key to return to SollerOS",10,0
  1569 000010D0 206B657920746F2072- <1>
  1570 000010D9 657475726E20746F20- <1>
  1571 000010E2 536F6C6C65724F530A- <1>
  1572 000010EB 00                  <1>
  1573                              <1> expdump:
  1574 000010EC 8B35[5B110000]      <1> 	mov esi, [esiloc]
  1575 000010F2 89F7                <1> 	mov edi, esi
  1576 000010F4 81C70F000000        <1> 	add edi, 15
  1577 000010FA 81C604000000        <1> 	add esi, 4
  1578 00001100 893D[5B110000]      <1> 	mov [esiloc], edi
  1579 00001106 81EF03000000        <1> 	sub edi, 3
  1580 0000110C E8351C0000          <1> 	call converthex
  1581 00001111 81EE04000000        <1> 	sub esi, 4
  1582                              <1> %ifdef gui.included
  1583 00001117 803D[F4840000]00    <1> 	cmp byte [guion], 0
  1584 0000111E 0F8429000000        <1> 	je near expdumptext
  1585 00001124 668B0D[63110000]    <1> 	mov cx, [locunhandy]
  1586 0000112B 668B15[65110000]    <1> 	mov dx, [locunhandx]
  1587 00001132 66B80100            <1> 	mov ax, 1
  1588 00001136 6631DB              <1> 	xor bx, bx
  1589 00001139 E82A540000          <1> 	call showstring2
  1590 0000113E 66890D[63110000]    <1> 	mov [locunhandy], cx
  1591 00001145 668915[65110000]    <1> 	mov [locunhandx], dx
  1592 0000114C C3                  <1> 	ret
  1593                              <1> %endif
  1594                              <1> expdumptext:
  1595 0000114D E8900B0000          <1> 	call print
  1596 00001152 C3                  <1> 	ret
  1597 00001153 00000000            <1> esploc dd 0
  1598 00001157 00000000            <1> espfirst dd 0
  1599 0000115B 00000000            <1> esiloc dd 0
  1600 0000115F 00000000            <1> esiregbuf dd 0
  1601 00001163 0100                <1> locunhandy dw 1
  1602 00001165 0100                <1> locunhandx dw 1
  1603 00001167 0000                <1> backgroundcache dw 0
  1604 00001169 00                  <1> intprob db 0
  1605 0000116A 00000000            <1> codeloc dd 0
  1606 0000116E 00000000            <1> codelocend dd 0
  1607 00001172 000000000000        <1> igdtcache dw 0,0,0
  1608                              <1> 	unhandmsg:	
  1609 00001178 494E543D3030303030- <1> 			db "INT=00000000",255,10,0
  1610 00001181 303030FF0A00        <1>
  1611                              <1> unhndrg:
  1612 00001187 FFFFFFFF3030303030- <1> 	times 7 db 255,255,255,255,"00000000  ",0	;;this dumps the stack before the stack frame in question
  1613 00001190 303030202000<rept>  <1>
  1614 000011F0 FFFFFFFF3030303030- <1> 			db 255,255,255,255,"00000000",255,10,0
  1615 000011F9 303030FF0A00        <1>
  1616 000011FF FFFFFFFF3030303030- <1> 	times 7 db 255,255,255,255,"00000000  ",0	;;this dumps the stack before the stack frame in question
  1617 00001208 303030202000<rept>  <1>
  1618 00001268 FFFFFFFF3030303030- <1> 			db 255,255,255,255,"00000000",255,10,0
  1619 00001271 303030FF0A00        <1>
  1620 00001277 FFFFFFFF3030303030- <1> 	times 7 db 255,255,255,255,"00000000  ",0	;;this dumps the stack before the stack frame in question
  1621 00001280 303030202000<rept>  <1>
  1622 000012E0 FFFFFFFF3030303030- <1> 			db 255,255,255,255,"00000000",255,10,0
  1623 000012E9 303030FF0A00        <1>
  1624 000012EF FFFFFFFF3030303030- <1> 	times 7 db 255,255,255,255,"00000000  ",0	;;this dumps the stack before the stack frame in question
  1625 000012F8 303030202000<rept>  <1>
  1626 00001358 FFFFFFFF3030303030- <1> 			db 255,255,255,255,"00000000",255,10,0
  1627 00001361 303030FF0A00        <1>
  1628                              <1> unhandregs:
  1629 00001367 45464C3D3030303030- <1> 			db "EFL=00000000  ",0
  1630 00001370 303030202000        <1>
  1631 00001376 43533A3D3030303030- <1> 			db "CS:=00000000  ",0
  1632 0000137F 303030202000        <1>
  1633 00001385 4549503D3030303030- <1> 			db "EIP=00000000",255,10,0
  1634 0000138E 303030FF0A00        <1>
  1635 00001394 44533A3D3030303030- <1> 			db "DS:=00000000  ",0
  1636 0000139D 303030202000        <1>
  1637 000013A3 45533A3D3030303030- <1> 			db "ES:=00000000  ",0
  1638 000013AC 303030202000        <1>
  1639 000013B2 46533A3D3030303030- <1> 			db "FS:=00000000  ",0
  1640 000013BB 303030202000        <1>
  1641 000013C1 47533A3D3030303030- <1> 			db "GS:=00000000  ",0
  1642 000013CA 303030202000        <1>
  1643 000013D0 53533A3D3030303030- <1> 			db "SS:=00000000",255,10,0
  1644 000013D9 303030FF0A00        <1>
  1645 000013DF 4541583D3030303030- <1> 			db "EAX=00000000  ",0
  1646 000013E8 303030202000        <1>
  1647 000013EE 4543583D3030303030- <1> 			db "ECX=00000000  ",0
  1648 000013F7 303030202000        <1>
  1649 000013FD 4544583D3030303030- <1> 			db "EDX=00000000  ",0
  1650 00001406 303030202000        <1>
  1651 0000140C 4542583D3030303030- <1> 			db "EBX=00000000",255,10,0
  1652 00001415 303030FF0A00        <1>
  1653 0000141B 4553503D3030303030- <1> 			db "ESP=00000000  ",0
  1654 00001424 303030202000        <1>
  1655 0000142A 4542503D3030303030- <1> 			db "EBP=00000000  ",0
  1656 00001433 303030202000        <1>
  1657 00001439 4553493D3030303030- <1> 			db "ESI=00000000  ",0
  1658 00001442 303030202000        <1>
  1659 00001448 4544493D3030303030- <1> unhndrgend:	db "EDI=00000000",255,10,0
  1660 00001451 303030FF0A00        <1>
  1661 00001457 4352303D3030303030- <1> 			db "CR0=00000000  ",0
  1662 00001460 303030202000        <1>
  1663 00001466 4352323D3030303030- <1> 			db "CR2=00000000  ",0
  1664 0000146F 303030202000        <1>
  1665 00001475 4352333D3030303030- <1> 			db "CR3=00000000  ",0
  1666 0000147E 303030202000        <1>
  1667 00001484 4352343D3030303030- <1> 			db "CR4=00000000",255,10,0
  1668 0000148D 303030FF0A00        <1>
  1669 00001493 54523A3D3030303030- <1> 			db "TR:=00000000  ",0
  1670 0000149C 303030202000        <1>
  1671 000014A2 4944543D3030303030- <1> 			db "IDT=00000000  ",0
  1672 000014AB 303030202000        <1>
  1673 000014B1 4744543D3030303030- <1> 			db "GDT=00000000  ",0
  1674 000014BA 303030202000        <1>
  1675 000014C0 4C44543D3030303030- <1> 			db "LDT=00000000",255,10,0
  1676 000014C9 303030FF0A00        <1>
  1677 000014CF FFFFFFFF3030303030- <1> unhandcode: times 2 db 255,255,255,255,"00000000  ",0	;;this dumps the code before and after the interrupt in question
  1678 000014D8 303030202000<rept>  <1>
  1679 000014ED FFFFFFFF3030303030- <1> 			db 255,255,255,255,"00000000 ",255,0
  1680 000014F6 30303020FF00        <1>
  1681 000014FC FFFFFF5B3030303030- <1> 			db 255,255,255,"[00000000] ",0
  1682 00001505 3030305D2000        <1>
  1683 0000150B FFFFFFFF3030303030- <1> 			times 3 db 255,255,255,255,"00000000  ",0
  1684 00001514 303030202000<rept>  <1>
  1685 00001538 FFFFFFFF3030303030- <1> 			db 255,255,255,255,"00000000",255,10,0
  1686 00001541 303030FF0A00        <1>
  1687                              <1> unhandmsgend:
  1688                              <1> 
  1689                              <1> errortypes:
  1690 00001547 [8B150000]          <1> 			dd err0
  1691 0000154B [EF150000]          <1> 			dd err1
  1692 0000154F [50160000]          <1> 			dd err2
  1693 00001553 [A5160000]          <1> 			dd err3
  1694 00001557 [09170000]          <1> 			dd err4
  1695 0000155B [5B170000]          <1> 			dd err5
  1696 0000155F [C5170000]          <1> 			dd err6
  1697 00001563 [2D180000]          <1> 			dd err7
  1698 00001567 [77180000]          <1> 			dd err8
  1699 0000156B [D4180000]          <1> 			dd err9
  1700 0000156F [2D190000]          <1> 			dd err10
  1701 00001573 [78190000]          <1> 			dd err11
  1702 00001577 [C8190000]          <1> 			dd err12
  1703 0000157B [211A0000]          <1> 			dd err13
  1704 0000157F [841A0000]          <1> 			dd err14
  1705 00001583 [C01A0000]          <1> 			dd err15
  1706                              <1> errortypesend:
  1707 00001587 [4B1B0000]          <1> 			dd unknownerror
  1708                              <1> 			
  1709 0000158B 4469766973696F6E20- <1> err0	db "Division by zero:",10
  1710 00001594 6279207A65726F3A0A  <1>
  1711 0000159D 546563686E6963616C- <1> 		db "Technically lim a",246,"x = ",236," when a is any real number. Happy Easter!",10
  1712 000015A6 6C79206C696D2061F6- <1>
  1713 000015AF 78203D20EC20776865- <1>
  1714 000015B8 6E206120697320616E- <1>
  1715 000015C1 79207265616C206E75- <1>
  1716 000015CA 6D6265722E20486170- <1>
  1717 000015D3 707920456173746572- <1>
  1718 000015DC 210A                <1>
  1719 000015DE 202020202020202020- <1> 		db "            x",26,"0",10,0
  1720 000015E7 202020781A300A00    <1>
  1721                              <1> 		
  1722 000015EF 53696E676C652D7374- <1> err1	db "Single-step/Breakpoint:",10
  1723 000015F8 65702F427265616B70- <1>
  1724 00001601 6F696E743A0A        <1>
  1725 00001607 4120627265616B706F- <1> 		db "A breakpoint fault, breakpoint trap, or single-step trap was triggered.",10,0
  1726 00001610 696E74206661756C74- <1>
  1727 00001619 2C20627265616B706F- <1>
  1728 00001622 696E7420747261702C- <1>
  1729 0000162B 206F722073696E676C- <1>
  1730 00001634 652D73746570207472- <1>
  1731 0000163D 617020776173207472- <1>
  1732 00001646 696767657265642E0A- <1>
  1733 0000164F 00                  <1>
  1734                              <1> 		
  1735 00001650 4E6F6E6D61736B6162- <1> err2	db "Nonmaskable interrupt:",10
  1736 00001659 6C6520696E74657272- <1>
  1737 00001662 7570743A0A          <1>
  1738 00001667 412068617264776172- <1> 		db "A hardware interrupt was triggered that could not be masked.",10,0
  1739 00001670 6520696E7465727275- <1>
  1740 00001679 707420776173207472- <1>
  1741 00001682 696767657265642074- <1>
  1742 0000168B 68617420636F756C64- <1>
  1743 00001694 206E6F74206265206D- <1>
  1744 0000169D 61736B65642E0A00    <1>
  1745                              <1> 		
  1746 000016A5 427265616B706F696E- <1> err3	db "Breakpoint:",10
  1747 000016AE 743A0A              <1>
  1748 000016B1 5468697320696E7465- <1> 		db "This interrupt is used in programs to show the stack and registers and can be",10
  1749 000016BA 727275707420697320- <1>
  1750 000016C3 7573656420696E2070- <1>
  1751 000016CC 726F6772616D732074- <1>
  1752 000016D5 6F2073686F77207468- <1>
  1753 000016DE 6520737461636B2061- <1>
  1754 000016E7 6E6420726567697374- <1>
  1755 000016F0 65727320616E642063- <1>
  1756 000016F9 616E2062650A        <1>
  1757 000016FF 69676E6F7265642E0A- <1> 		db "ignored.",10,0
  1758 00001708 00                  <1>
  1759                              <1> 		
  1760 00001709 4F766572666C6F773A- <1> err4	db "Overflow:",10
  1761 00001712 0A                  <1>
  1762 00001713 5468652070726F6365- <1> 		db "The processor ran into an INTO instruction with the overflow flag set.",10,0
  1763 0000171C 73736F722072616E20- <1>
  1764 00001725 696E746F20616E2049- <1>
  1765 0000172E 4E544F20696E737472- <1>
  1766 00001737 756374696F6E207769- <1>
  1767 00001740 746820746865206F76- <1>
  1768 00001749 6572666C6F7720666C- <1>
  1769 00001752 6167207365742E0A00  <1>
  1770                              <1> 		
  1771 0000175B 426F756E6473206368- <1> err5	db "Bounds check:",10
  1772 00001764 65636B3A0A          <1>
  1773 00001769 5468652070726F6365- <1> 		db "The processor rebounded from a BOUND instruction run on an operand that was out",10
  1774 00001772 73736F72207265626F- <1>
  1775 0000177B 756E6465642066726F- <1>
  1776 00001784 6D206120424F554E44- <1>
  1777 0000178D 20696E737472756374- <1>
  1778 00001796 696F6E2072756E206F- <1>
  1779 0000179F 6E20616E206F706572- <1>
  1780 000017A8 616E64207468617420- <1>
  1781 000017B1 776173206F75740A    <1>
  1782 000017B9 6F6620626F756E6473- <1> 		db "of bounds.",10,0
  1783 000017C2 2E0A00              <1>
  1784                              <1> 		
  1785 000017C5 496E76616C6964206F- <1> err6	db "Invalid opcode:",10
  1786 000017CE 70636F64653A0A      <1>
  1787 000017D5 5468652070726F6365- <1> 		db "The processor has no idea what it was trying to execute. Don't run SSE4 code",10
  1788 000017DE 73736F722068617320- <1>
  1789 000017E7 6E6F20696465612077- <1>
  1790 000017F0 686174206974207761- <1>
  1791 000017F9 7320747279696E6720- <1>
  1792 00001802 746F20657865637574- <1>
  1793 0000180B 652E20446F6E277420- <1>
  1794 00001814 72756E205353453420- <1>
  1795 0000181D 636F64650A          <1>
  1796 00001822 6F6E20343836277321- <1> 		db "on 486's!",10,0
  1797 0000182B 0A00                <1>
  1798                              <1> 		
  1799 0000182D 436F70726F63657373- <1> err7	db "Coprocessor not available:",10
  1800 00001836 6F72206E6F74206176- <1>
  1801 0000183F 61696C61626C653A0A  <1>
  1802 00001848 446F6E277420796F75- <1> 		db "Don't you know they don't make those anymore!",10,0
  1803 00001851 206B6E6F7720746865- <1>
  1804 0000185A 7920646F6E2774206D- <1>
  1805 00001863 616B652074686F7365- <1>
  1806 0000186C 20616E796D6F726521- <1>
  1807 00001875 0A00                <1>
  1808                              <1> 		
  1809 00001877 446F75626C65206661- <1> err8	db "Double fault:",10
  1810 00001880 756C743A0A          <1>
  1811 00001885 546865206578636570- <1> 		db "The exception handler could not handle that it could not handle an exception.",10,0
  1812 0000188E 74696F6E2068616E64- <1>
  1813 00001897 6C657220636F756C64- <1>
  1814 000018A0 206E6F742068616E64- <1>
  1815 000018A9 6C6520746861742069- <1>
  1816 000018B2 7420636F756C64206E- <1>
  1817 000018BB 6F742068616E646C65- <1>
  1818 000018C4 20616E206578636570- <1>
  1819 000018CD 74696F6E2E0A00      <1>
  1820                              <1> 		
  1821 000018D4 436F70726F63657373- <1> err9	db "Coprocessor segment overrun:",10,0
  1822 000018DD 6F72207365676D656E- <1>
  1823 000018E6 74206F76657272756E- <1>
  1824 000018EF 3A0A00              <1>
  1825 000018F2 54686973206E657665- <1> 		db "This never happens in modern computers, and never should.",10,0
  1826 000018FB 722068617070656E73- <1>
  1827 00001904 20696E206D6F646572- <1>
  1828 0000190D 6E20636F6D70757465- <1>
  1829 00001916 72732C20616E64206E- <1>
  1830 0000191F 657665722073686F75- <1>
  1831 00001928 6C642E0A00          <1>
  1832                              <1> 
  1833 0000192D 496E76616C69642054- <1> err10	db "Invalid TSS:",10
  1834 00001936 53533A0A            <1>
  1835 0000193A 546865205453532074- <1> 		db "The TSS that was switched to is invalid. Nothing funny here.",10,0
  1836 00001943 686174207761732073- <1>
  1837 0000194C 776974636865642074- <1>
  1838 00001955 6F20697320696E7661- <1>
  1839 0000195E 6C69642E204E6F7468- <1>
  1840 00001967 696E672066756E6E79- <1>
  1841 00001970 20686572652E0A00    <1>
  1842                              <1> 		
  1843 00001978 5365676D656E74206E- <1> err11	db "Segment not present:",10
  1844 00001981 6F742070726573656E- <1>
  1845 0000198A 743A0A              <1>
  1846 0000198D 546865207072657365- <1> 		db "The present bit of the segment descriptor is set to zero.",10,0
  1847 00001996 6E7420626974206F66- <1>
  1848 0000199F 20746865207365676D- <1>
  1849 000019A8 656E74206465736372- <1>
  1850 000019B1 6970746F7220697320- <1>
  1851 000019BA 73657420746F207A65- <1>
  1852 000019C3 726F2E0A00          <1>
  1853                              <1> 		
  1854 000019C8 537461636B20657863- <1> err12	db "Stack exception:",10
  1855 000019D1 657074696F6E3A0A    <1>
  1856 000019D9 546865205353206465- <1> 		db "The SS descriptor is invalid or not present or its limit is too small.",10,0
  1857 000019E2 7363726970746F7220- <1>
  1858 000019EB 697320696E76616C69- <1>
  1859 000019F4 64206F72206E6F7420- <1>
  1860 000019FD 70726573656E74206F- <1>
  1861 00001A06 7220697473206C696D- <1>
  1862 00001A0F 697420697320746F6F- <1>
  1863 00001A18 20736D616C6C2E0A00  <1>
  1864                              <1> 		
  1865 00001A21 47656E6572616C2070- <1> err13	db "General protection violation:",10
  1866 00001A2A 726F74656374696F6E- <1>
  1867 00001A33 2076696F6C6174696F- <1>
  1868 00001A3C 6E3A0A              <1>
  1869 00001A3F 596F752076696F6C61- <1> 		db "You violated the computer. Step away slowly. The FBI is on its way.",10,0
  1870 00001A48 746564207468652063- <1>
  1871 00001A51 6F6D70757465722E20- <1>
  1872 00001A5A 537465702061776179- <1>
  1873 00001A63 20736C6F776C792E20- <1>
  1874 00001A6C 546865204642492069- <1>
  1875 00001A75 73206F6E2069747320- <1>
  1876 00001A7E 7761792E0A00        <1>
  1877                              <1> 		
  1878 00001A84 50616765206661756C- <1> err14	db "Page fault:",10
  1879 00001A8D 743A0A              <1>
  1880 00001A90 546865207061676520- <1> 		db "The page that was requested was not available.",10,0
  1881 00001A99 746861742077617320- <1>
  1882 00001AA2 726571756573746564- <1>
  1883 00001AAB 20776173206E6F7420- <1>
  1884 00001AB4 617661696C61626C65- <1>
  1885 00001ABD 2E0A00              <1>
  1886                              <1> 		
  1887 00001AC0 526573657276656420- <1> err15	db "Reserved for Plan R:",10
  1888 00001AC9 666F7220506C616E20- <1>
  1889 00001AD2 523A0A              <1>
  1890 00001AD5 5468697320696E7465- <1> 		db "This interrupt is reserved for usage only by the military when it is necessary",10
  1891 00001ADE 727275707420697320- <1>
  1892 00001AE7 726573657276656420- <1>
  1893 00001AF0 666F72207573616765- <1>
  1894 00001AF9 206F6E6C7920627920- <1>
  1895 00001B02 746865206D696C6974- <1>
  1896 00001B0B 617279207768656E20- <1>
  1897 00001B14 6974206973206E6563- <1>
  1898 00001B1D 6573736172790A      <1>
  1899 00001B24 746F20696E69746961- <1> 		db "to initiate a full-scale coup d'",130,"tat.",10,0
  1900 00001B2D 746520612066756C6C- <1>
  1901 00001B36 2D7363616C6520636F- <1>
  1902 00001B3F 757020642782746174- <1>
  1903 00001B48 2E0A00              <1>
  1904                              <1> 		
  1905 00001B4B 576861742074686520- <1> unknownerror db "What the hell just happened? Is everyone okay? Hard drive? Video card?",10
  1906 00001B54 68656C6C206A757374- <1>
  1907 00001B5D 2068617070656E6564- <1>
  1908 00001B66 3F2049732065766572- <1>
  1909 00001B6F 796F6E65206F6B6179- <1>
  1910 00001B78 3F2048617264206472- <1>
  1911 00001B81 6976653F2056696465- <1>
  1912 00001B8A 6F20636172643F0A    <1>
  1913 00001B92 4D656D6F72793F2041- <1> 			db	"Memory? Are you there?",10,0
  1914 00001B9B 726520796F75207468- <1>
  1915 00001BA4 6572653F0A00        <1>
  1916                              <1> %else
  1917                              <1> unhand:	
  1918                              <1> 	%assign i 0
  1919                              <1> 	%rep 32
  1920                              <1> 	mov byte [intprob], i
  1921                              <1> 	jmp unhand2
  1922                              <1> 	%assign i i+1
  1923                              <1> 	%endrep
  1924                              <1> unhand2:
  1925                              <1> 	cmp byte [intprob], 3
  1926                              <1> 	je handled	;if it is a debug interrupt, it is auto handled
  1927                              <1> 	mov ebx, 0xDEADCD00 ;this shows that an exception occured even though more detailed info cannot be shown
  1928                              <1> 						;CD stands for the interrupt code, DEAD shows that the program died because of the int
  1929                              <1> 	mov bl, [intprob]
  1930                              <1> 	jmp exitprog
  1931                              <1> intprob db 0
  1932                              <1> %endif
  1933                                      %include "source/ints.asm"
  1934                              <1> newints:	;;for great justice
  1935 00001BAA 80FC00              <1> 	cmp ah, 0
  1936 00001BAD 0F847F000000        <1> 	je near intx0   ;kills app
  1937 00001BB3 80FC01              <1> 	cmp ah, 1
  1938 00001BB6 0F84FE000000        <1> 	je near intx1   ;print string
  1939 00001BBC 80FC02              <1> 	cmp ah, 2
  1940 00001BBF 0F8450010000        <1> 	je near intx2	;read string
  1941 00001BC5 80FC03              <1> 	cmp ah, 3
  1942 00001BC8 0F8470010000        <1> 	je near intx3	;clear screen
  1943 00001BCE 80FC04              <1> 	cmp ah, 4
  1944 00001BD1 0F84E5010000        <1> 	je near intx4	;read and print string
  1945 00001BD7 80FC05              <1> 	cmp ah, 5
  1946 00001BDA 0F8458050000        <1> 	je near intx5	;get char
  1947 00001BE0 80FC06              <1> 	cmp ah, 6
  1948 00001BE3 0F84AA050000        <1> 	je near intx6	;print char
  1949 00001BE9 80FC07              <1> 	cmp ah, 7
  1950 00001BEC 0F848C070000        <1> 	je near intx7	;read file
  1951                              <1> ;	cmp ah, 8
  1952                              <1> ;	je near intx8	;write file
  1953 00001BF2 80FC09              <1> 	cmp ah, 9
  1954 00001BF5 0F848D070000        <1> 	je near intx9	;convert number to string
  1955 00001BFB 80FC0A              <1> 	cmp ah, 10
  1956 00001BFE 0F849C070000        <1> 	je near intx10	;convert string to number
  1957                              <1> %ifdef threads.included
  1958 00001C04 80FC0B              <1> 	cmp ah, 11
  1959 00001C07 0F849D070000        <1> 	je near intx11	;create thread
  1960                              <1> %endif
  1961 00001C0D 80FC0C              <1> 	cmp ah, 12
  1962 00001C10 0F846B080000        <1> 	je near intx12	;get time
  1963 00001C16 80FC0D              <1> 	cmp ah, 13
  1964 00001C19 0F8477080000        <1> 	je near intx13	;set time
  1965 00001C1F 80FC0E              <1> 	cmp ah, 14
  1966 00001C22 0F847E080000        <1> 	je near intx14	;run program
  1967 00001C28 80FC0F              <1> 	cmp ah, 15
  1968 00001C2B 0F848A080000        <1> 	je near intx15	;get program info-location of name/options/number of options/environmental vars
  1969 00001C31 C3                  <1> 	ret
  1970                              <1> 	
  1971                              <1> ;;the jmp timerinterrupt's ensure that task switches occur
  1972                              <1> intx0:
  1973                              <1> 	%include 'source/interrupts/0_exit.asm'
  1974                              <2> exitprog:
  1975 00001C32 66B83000            <2> 	mov ax, NEW_DATA_SEL
  1976 00001C36 8ED8                <2> 	mov ds, ax
  1977 00001C38 8EC0                <2> 	mov es, ax
  1978 00001C3A 8EE0                <2> 	mov fs, ax
  1979 00001C3C 66B82000            <2> 	mov ax, SYS_DATA_SEL
  1980 00001C40 8EE8                <2> 	mov gs, ax
  1981 00001C42 C705[62590000]0000- <2> 	mov dword [currentthread], 0
  1982 00001C4A 0000                <2>
  1983 00001C4C C705[5D590000]0400- <2> 	mov dword [lastthread], 4
  1984 00001C54 0000                <2>
  1985 00001C56 C605[61590000]00    <2> 	mov byte [threadson], 0 ;for now i need to use this
  1986 00001C5D 8B25[3A9B0000]      <2> 	mov esp, [previousstack] ;and this
  1987 00001C63 81FB00000000        <2> 	cmp ebx, 0
  1988 00001C69 0F8501000000        <2> 	jne near .error
  1989 00001C6F C3                  <2> 	ret
  1990                              <2> .error:
  1991 00001C70 89D9                <2> 	mov ecx, ebx
  1992 00001C72 B006                <2> 	mov al, 6
  1993 00001C74 A2[A42D0000]        <2> 	mov [firsthexshown], al
  1994 00001C79 51                  <2> 	push ecx
  1995 00001C7A BE[951C0000]        <2> 	mov esi, .msg1
  1996 00001C7F E840000000          <2> 	call printhighlight
  1997 00001C84 59                  <2> 	pop ecx
  1998 00001C85 E82F110000          <2> 	call showhex
  1999 00001C8A BE[AA1C0000]        <2> 	mov esi, .msg2
  2000 00001C8F E830000000          <2> 	call printhighlight
  2001 00001C94 C3                  <2> 	ret
  2002                              <2> 	
  2003 00001C95 416E20657869742073- <2> .msg1 db "An exit status of 0x",0
  2004 00001C9E 7461747573206F6620- <2>
  2005 00001CA7 307800              <2>
  2006 00001CAA 087761732072657475- <2> .msg2 db 8,"was returned.",10,0
  2007 00001CB3 726E65642E0A00      <2>
  2008                              <1> intx1:
  2009                              <1> 	%include 'source/interrupts/1_prntstr.asm'
  2010 00001CBA E82A000000          <2> call printint
  2011 00001CBF E9D9E5FFFF          <2> jmp timerinterrupt
  2012                              <2> 
  2013                              <2> 	printhighlight:
  2014 00001CC4 6631C0              <2> 		xor ax, ax
  2015 00001CC7 66BBF000            <2> 		mov bx, 0xF0
  2016 00001CCB E919000000          <2> 		jmp printint
  2017                              <2> 	printquiet:
  2018 00001CD0 6631C0              <2> 		xor ax, ax
  2019 00001CD3 A2[141D0000]        <2> 		mov [endkeyprint], al
  2020 00001CD8 66BB0700            <2> 		mov bx, 7
  2021 00001CDC E820000000          <2> 		call printint.b
  2022 00001CE1 C3                  <2> 		ret
  2023                              <2>     print:
  2024 00001CE2 6631C0              <2> 		xor ax, ax
  2025 00001CE5 66BB0700            <2> 		mov bx, 7
  2026                              <2> 	printint:	;;print line, al=last key,bl=modifier, esi=buffer
  2027 00001CE9 56                  <2> 		push esi
  2028 00001CEA A2[141D0000]        <2> 		mov [endkeyprint], al
  2029 00001CEF E80D000000          <2> 		call .b
  2030 00001CF4 89F1                <2> 		mov ecx, esi
  2031 00001CF6 5F                  <2> 		pop edi
  2032 00001CF7 29F9                <2> 		sub ecx, edi
  2033 00001CF9 51                  <2> 		push ecx
  2034 00001CFA E8F2070000          <2> 		call termcopy
  2035 00001CFF 59                  <2> 		pop ecx
  2036 00001D00 C3                  <2> 		ret
  2037                              <2> 	.b:
  2038 00001D01 8A06                <2> 		mov al, [esi]
  2039 00001D03 3A05[141D0000]      <2> 		cmp al, [endkeyprint]
  2040 00001D09 7408                <2> 		je .done
  2041 00001D0B E8A8040000          <2> 		call prcharq
  2042 00001D10 46                  <2> 		inc esi
  2043 00001D11 EBEE                <2> 		jmp .b
  2044                              <2> 	.done:
  2045 00001D13 C3                  <2> 		ret
  2046                              <2> 
  2047 00001D14 00                  <2> endkeyprint db 0
  2048                              <1> intx2:
  2049                              <1> 	%include 'source/interrupts/2_readstr.asm'
  2050 00001D15 E805000000          <2> call readint
  2051 00001D1A E97EE5FFFF          <2> jmp timerinterrupt
  2052                              <2> 
  2053                              <2> 	readint:	;;get line, al=last key, esi = buffer, edi = endbuffer	
  2054 00001D1F 89C3                <2> 		mov ebx, eax
  2055                              <2> 	.b:
  2056 00001D21 53                  <2> 		push ebx
  2057 00001D22 57                  <2> 		push edi
  2058 00001D23 56                  <2> 		push esi
  2059 00001D24 30C0                <2> 		xor al, al
  2060 00001D26 E819040000          <2> 		call rdcharint
  2061 00001D2B 5E                  <2> 		pop esi
  2062 00001D2C 8806                <2> 		mov [esi], al
  2063 00001D2E 46                  <2> 		inc esi
  2064 00001D2F 5F                  <2> 		pop edi
  2065 00001D30 5B                  <2> 		pop ebx
  2066 00001D31 39FE                <2> 		cmp esi, edi
  2067 00001D33 7304                <2> 		jae .done
  2068 00001D35 38D8                <2> 		cmp al, bl
  2069 00001D37 75E8                <2> 		jne .b
  2070                              <2> 	.done:
  2071 00001D39 4E                  <2> 		dec esi
  2072 00001D3A C60600              <2> 		mov byte [esi], 0
  2073 00001D3D C3                  <2> 		ret
  2074                              <1> intx3:
  2075                              <1> 	%include 'source/interrupts/3_clearscrn.asm'
  2076 00001D3E E805000000          <2> call clear
  2077 00001D43 E955E5FFFF          <2> jmp timerinterrupt
  2078                              <2> %ifdef io.serial
  2079                              <2> clear:
  2080                              <2> 	ret
  2081                              <2> %else
  2082                              <2> clear:		
  2083 00001D48 668B0D[7A230000]    <2> 		mov cx, [charxy]
  2084 00001D4F BF[D0C22800]        <2> 		mov edi, videobuf
  2085 00001D54 6631C0              <2> 		xor ax, ax
  2086 00001D57 66A3[74230000]      <2> 		mov [linebeginpos], ax
  2087 00001D5D 66A3[76230000]      <2> 		mov [videobufpos], ax
  2088 00001D63 6631D2              <2> 		xor dx, dx
  2089 00001D66 66A3[78230000]      <2> 		mov [charpos], ax
  2090 00001D6C B407                <2> 		mov ah, 7
  2091                              <2> 	clearb:
  2092 00001D6E 668907              <2> 		mov [edi], ax
  2093 00001D71 81C702000000        <2> 		add edi, 2
  2094 00001D77 FEC9                <2> 		dec cl
  2095 00001D79 80F900              <2> 		cmp cl, 0
  2096 00001D7C 75F0                <2> 		jne clearb
  2097 00001D7E 8A0D[7A230000]      <2> 		mov cl, [charxy]
  2098 00001D84 FECD                <2> 		dec ch
  2099 00001D86 80FD00              <2> 		cmp ch, 0
  2100 00001D89 75E3                <2> 		jne clearb
  2101                              <2> 	cleardouble:
  2102 00001D8B BF[742D2900]        <2> 		mov edi, videobuf2
  2103 00001D90 668B0D[7A230000]    <2> 		mov cx, [charxy]
  2104 00001D97 31C0                <2> 		xor eax, eax
  2105                              <2> 	clearc:
  2106 00001D99 8907                <2> 		mov [edi], eax
  2107 00001D9B 81C704000000        <2> 		add edi, 4
  2108 00001DA1 80E902              <2> 		sub cl, 2
  2109 00001DA4 80F900              <2> 		cmp cl, 0
  2110 00001DA7 75F0                <2> 		jne clearc
  2111 00001DA9 8A0D[7A230000]      <2> 		mov cl, [charxy]
  2112 00001DAF FECD                <2> 		dec ch
  2113 00001DB1 80FD00              <2> 		cmp ch, 0
  2114 00001DB4 75E3                <2> 		jne clearc
  2115 00001DB6 E836070000          <2> 		call termcopy
  2116 00001DBB C3                  <2> 		ret
  2117                              <2> %endif
  2118                              <2> 		
  2119                              <1> intx4:
  2120                              <1> 	%include 'source/interrupts/4_prntreadstr.asm'
  2121 00001DBC E809000000          <2> call rdprint
  2122 00001DC1 E9D7E4FFFF          <2> jmp timerinterrupt
  2123                              <2> 
  2124                              <2> readline:
  2125 00001DC6 B00A                <2>   mov al, 10
  2126 00001DC8 B307                <2>   mov bl, 7
  2127                              <2> 	rdprint:	;;print and get line, al=last key, bl=modifier, esi=buffer, edi=bufferend
  2128 00001DCA 8935[2D210000]      <2> 		mov [buftxtloc], esi
  2129 00001DD0 A2[25210000]        <2> 		mov [endkeyrdpr], al
  2130 00001DD5 881D[26210000]      <2> 		mov [modkeyrdpr], bl
  2131 00001DDB 8935[27210000]      <2> 		mov [firstesirdpr], esi
  2132 00001DE1 893D[31210000]      <2> 		mov [endbufferrdpr], edi
  2133                              <2> 	rdprintb:
  2134 00001DE7 56                  <2> 		push esi
  2135 00001DE8 B001                <2> 		mov al, 1
  2136 00001DEA E855030000          <2> 		call rdcharint
  2137 00001DEF 5E                  <2> 		pop esi
  2138                              <2> %ifdef io.serial
  2139                              <2> 		cmp ah, 0x41
  2140                              <2> 		je near rdprup
  2141                              <2> 		cmp ah, 0x42
  2142                              <2> 		je near rdprdown
  2143                              <2> 		cmp ah, 0x43
  2144                              <2> 		je near rdprright
  2145                              <2> 		cmp ah, 0x44
  2146                              <2> 		je near rdprleft
  2147                              <2> 		cmp ah, 0x31
  2148                              <2> 		je near rdprhome
  2149                              <2> 		cmp ah, 0x48
  2150                              <2> 		je near rdprhome
  2151                              <2> 		cmp ah, 0x46
  2152                              <2> 		je near rdprend
  2153                              <2> 		cmp ah, 0x33
  2154                              <2> 		je near rdprdel
  2155                              <2> 		cmp ah, 0x34
  2156                              <2> 		je near rdprend
  2157                              <2> %else
  2158 00001DF0 803D[69510000]E0    <2> 		cmp byte [specialkey], 0xE0
  2159 00001DF7 751B                <2> 		jne notspecialrdprnt
  2160 00001DF9 80FC53              <2> 		cmp ah, 0x53
  2161 00001DFC 0F84E8020000        <2> 		je near rdprdel
  2162 00001E02 80FC47              <2> 		cmp ah, 0x47
  2163 00001E05 0F8407010000        <2> 		je near rdprhome
  2164 00001E0B 80FC4F              <2> 		cmp ah, 0x4F
  2165 00001E0E 0F841D010000        <2> 		je near rdprend
  2166                              <2> 	notspecialrdprnt:
  2167 00001E14 80FC48              <2> 		cmp ah, 0x48
  2168 00001E17 0F84D5010000        <2> 		je near rdprup
  2169 00001E1D 80FC50              <2> 		cmp ah, 0x50
  2170 00001E20 0F84AF010000        <2> 		je near rdprdown
  2171 00001E26 80FC4D              <2> 		cmp ah, 0x4D
  2172 00001E29 0F845E010000        <2> 		je near rdprright
  2173 00001E2F 80FC4B              <2> 		cmp ah, 0x4B
  2174 00001E32 0F8416010000        <2> 		je near rdprleft
  2175                              <2> %endif
  2176 00001E38 3C08                <2> 		cmp al, 8
  2177 00001E3A 0F84C5020000        <2> 		je near rdprbscheck
  2178 00001E40 3C00                <2> 		cmp al, 0
  2179 00001E42 74A3                <2> 		je rdprintb
  2180 00001E44 80FC00              <2> 		cmp ah, 0
  2181 00001E47 749E                <2> 		je rdprintb
  2182 00001E49 8806                <2> 		mov [esi], al
  2183 00001E4B 46                  <2> 		inc esi
  2184                              <2> 	bscheckequal:
  2185 00001E4C 8A1D[26210000]      <2> 		mov bl, [modkeyrdpr]
  2186 00001E52 8A3D[2C210000]      <2> 		mov bh, [txtmask]
  2187 00001E58 80FF00              <2> 		cmp bh, 0
  2188 00001E5B 7404                <2> 		je nomasktxt
  2189 00001E5D 88F8                <2> 		mov al, bh
  2190 00001E5F 30FF                <2> 		xor bh, bh
  2191                              <2> 	nomasktxt:
  2192 00001E61 E841030000          <2> 		call prcharint
  2193 00001E66 56                  <2> 		push esi
  2194 00001E67 66A3[23210000]      <2> 		mov [axcache], ax
  2195 00001E6D 8A25[25210000]      <2> 		mov ah, [endkeyrdpr]
  2196 00001E73 38E0                <2> 		cmp al, ah
  2197 00001E75 7429                <2> 		je nobackprintbuftxt2
  2198 00001E77 BE[BAAD0000]        <2> 		mov esi, buftxt2
  2199 00001E7C E84FFEFFFF          <2> 		call printquiet
  2200 00001E81 B020                <2> 		mov al, " "
  2201 00001E83 E830030000          <2> 		call prcharq
  2202 00001E88 B008                <2> 		mov al, 8
  2203 00001E8A 81FE[BAAD0000]      <2> 		cmp esi, buftxt2
  2204 00001E90 740E                <2> 		je nobackprintbuftxt2
  2205                              <2> 	backprintbuftxt2:
  2206 00001E92 E821030000          <2> 		call prcharq
  2207 00001E97 4E                  <2> 		dec esi
  2208 00001E98 81FE[BAAD0000]      <2> 		cmp esi, buftxt2
  2209 00001E9E 77F2                <2> 		ja backprintbuftxt2
  2210                              <2> 	nobackprintbuftxt2:
  2211 00001EA0 3C0A                <2> 		cmp al, 10
  2212 00001EA2 7405                <2> 		je nonobackprint
  2213 00001EA4 E8FE020000          <2> 		call prcharint
  2214                              <2> 	nonobackprint:
  2215 00001EA9 5E                  <2> 		pop esi
  2216 00001EAA 3B35[31210000]      <2> 		cmp esi, [endbufferrdpr]
  2217 00001EB0 0F8319000000        <2> 		jae near donerdprinc
  2218 00001EB6 66A1[23210000]      <2> 		mov ax, [axcache]
  2219 00001EBC 8A25[25210000]      <2> 		mov ah, [endkeyrdpr]
  2220 00001EC2 38E0                <2> 		cmp al, ah
  2221 00001EC4 0F851DFFFFFF        <2> 		jne rdprintb
  2222 00001ECA E901000000          <2> 		jmp donerdprint
  2223                              <2> 	donerdprinc:
  2224 00001ECF 46                  <2> 		inc esi
  2225                              <2> 	donerdprint:
  2226 00001ED0 4E                  <2> 		dec esi
  2227 00001ED1 BF[BAAD0000]        <2> 		mov edi, buftxt2
  2228                              <2> 	copylaterstuff:
  2229 00001ED6 8A07                <2> 		mov al, [edi]
  2230 00001ED8 3C00                <2> 		cmp al, 0
  2231 00001EDA 7406                <2> 		je nocopylaterstuff
  2232 00001EDC 8806                <2> 		mov [esi], al
  2233 00001EDE 47                  <2> 		inc edi
  2234 00001EDF 46                  <2> 		inc esi
  2235 00001EE0 EBF4                <2> 		jmp copylaterstuff
  2236                              <2> 	nocopylaterstuff:
  2237 00001EE2 C60600              <2> 		mov byte [esi], 0
  2238 00001EE5 E80B000000          <2> 		call clearbuftxt2
  2239 00001EEA 89F1                <2> 		mov ecx, esi
  2240 00001EEC 8B3D[27210000]      <2> 		mov edi, [firstesirdpr]
  2241 00001EF2 29F9                <2> 		sub ecx, edi
  2242 00001EF4 C3                  <2> 		ret
  2243                              <2> 	
  2244                              <2> 	clearbuftxt2:
  2245 00001EF5 30C0                <2> 		xor al, al
  2246 00001EF7 BF[BAAD0000]        <2> 		mov edi, buftxt2
  2247                              <2> 	clearbuftxt2lp:
  2248 00001EFC 8807                <2> 		mov [edi], al
  2249 00001EFE 47                  <2> 		inc edi
  2250 00001EFF 81FF[BAB10000]      <2> 		cmp edi, buftxt
  2251 00001F05 75F5                <2> 		jne clearbuftxt2lp
  2252 00001F07 C3                  <2> 		ret
  2253                              <2> 	
  2254                              <2> 	rdprintb2:
  2255 00001F08 E8E4050000          <2> 		call termcopy
  2256 00001F0D E9D5FEFFFF          <2> 		jmp rdprintb
  2257                              <2> 	
  2258                              <2> 	rdprhome:
  2259 00001F12 3B35[2D210000]      <2> 		cmp esi, [buftxtloc]
  2260 00001F18 0F84EAFFFFFF        <2> 		je near rdprintb2
  2261 00001F1E BF[BAAD0000]        <2> 		mov edi, buftxt2
  2262 00001F23 8A07                <2> 		mov al, [edi]
  2263 00001F25 E846000000          <2> 		call shiftbuftxt2
  2264 00001F2A E889020000          <2> 		call prcharq
  2265 00001F2F EBE1                <2> 		jmp rdprhome
  2266                              <2> 		
  2267                              <2> 	rdprend:
  2268 00001F31 BF[BAAD0000]        <2> 		mov edi, buftxt2
  2269 00001F36 8A07                <2> 		mov al, [edi]
  2270 00001F38 3C00                <2> 		cmp al, 0
  2271 00001F3A 0F84C8FFFFFF        <2> 		je near rdprintb2
  2272 00001F40 8806                <2> 		mov [esi], al
  2273 00001F42 E866000000          <2> 		call shiftbuftxt2lft
  2274 00001F47 E86C020000          <2> 		call prcharq
  2275 00001F4C EBE3                <2> 		jmp rdprend
  2276                              <2> 	
  2277                              <2> 	rdprleft:
  2278 00001F4E 3B35[2D210000]      <2> 		cmp esi, [buftxtloc]
  2279 00001F54 0F848DFEFFFF        <2> 		je near rdprintb
  2280 00001F5A BF[BAAD0000]        <2> 		mov edi, buftxt2
  2281 00001F5F 8A07                <2> 		mov al, [edi]
  2282 00001F61 E80A000000          <2> 		call shiftbuftxt2
  2283 00001F66 E83C020000          <2> 		call prcharint
  2284 00001F6B E977FEFFFF          <2> 		jmp rdprintb
  2285                              <2> 	shiftbuftxt2:
  2286 00001F70 3C00                <2> 		cmp al, 0
  2287 00001F72 7409                <2> 		je noshiftbuftxt2
  2288 00001F74 47                  <2> 		inc edi
  2289 00001F75 8A27                <2> 		mov ah, [edi]
  2290 00001F77 8807                <2> 		mov [edi], al
  2291 00001F79 88E0                <2> 		mov al, ah
  2292 00001F7B EBF3                <2> 		jmp shiftbuftxt2
  2293                              <2> 	noshiftbuftxt2:
  2294 00001F7D BF[BAAD0000]        <2> 		mov edi, buftxt2
  2295 00001F82 4E                  <2> 		dec esi
  2296 00001F83 8A06                <2> 		mov al, [esi]
  2297 00001F85 8807                <2> 		mov [edi], al
  2298 00001F87 C60600              <2> 		mov byte [esi], 0
  2299 00001F8A B008                <2> 		mov al, 8
  2300 00001F8C C3                  <2> 		ret
  2301                              <2> 		
  2302                              <2> 	rdprright:
  2303 00001F8D BF[BAAD0000]        <2> 		mov edi, buftxt2
  2304 00001F92 8A07                <2> 		mov al, [edi]
  2305 00001F94 3C00                <2> 		cmp al, 0
  2306 00001F96 0F844BFEFFFF        <2> 		je near rdprintb
  2307 00001F9C 8806                <2> 		mov [esi], al
  2308 00001F9E E80A000000          <2> 		call shiftbuftxt2lft
  2309 00001FA3 E8FF010000          <2> 		call prcharint
  2310 00001FA8 E93AFEFFFF          <2> 		jmp rdprintb
  2311                              <2> 	shiftbuftxt2lft:
  2312 00001FAD 3C00                <2> 		cmp al, 0
  2313 00001FAF 7408                <2> 		je noshiftbuftxt2lft
  2314 00001FB1 47                  <2> 		inc edi
  2315 00001FB2 8A07                <2> 		mov al, [edi]
  2316 00001FB4 8847FF              <2> 		mov [edi - 1], al
  2317 00001FB7 EBF4                <2> 		jmp shiftbuftxt2lft
  2318                              <2> 	noshiftbuftxt2lft:
  2319 00001FB9 8A06                <2> 		mov al, [esi]
  2320 00001FBB 46                  <2> 		inc esi
  2321 00001FBC 8A1D[26210000]      <2> 		mov bl, [modkeyrdpr]
  2322 00001FC2 C3                  <2> 		ret
  2323                              <2> 		
  2324                              <2> 	rdprdownbck:
  2325 00001FC3 FECC                <2> 		dec ah
  2326 00001FC5 8825[2B210000]      <2> 		mov [commandedit], ah
  2327 00001FCB E83A000000          <2> 		call rdprbckspc
  2328 00001FD0 E912FEFFFF          <2> 		jmp rdprintb
  2329                              <2> 	
  2330                              <2> 	rdprdown:
  2331 00001FD5 8A25[2B210000]      <2> 		mov ah, [commandedit]
  2332 00001FDB 80FC01              <2> 		cmp ah, 1
  2333 00001FDE 0F8603FEFFFF        <2> 		jbe near rdprintb
  2334 00001FE4 80FC02              <2> 		cmp ah, 2
  2335 00001FE7 74DA                <2> 		je rdprdownbck
  2336 00001FE9 80EC02              <2> 		sub ah, 2
  2337 00001FEC 8825[2B210000]      <2> 		mov [commandedit], ah
  2338                              <2> 		
  2339                              <2> 	rdprup:
  2340 00001FF2 30C0                <2> 		xor al, al
  2341 00001FF4 3805[2B210000]      <2> 		cmp [commandedit], al
  2342 00001FFA 0F84E7FDFFFF        <2> 		je near rdprintb
  2343 00002000 E805000000          <2> 		call rdprbckspc
  2344 00002005 E941000000          <2> 		jmp getcurrentcommandstr
  2345                              <2> 	rdprbckspc:
  2346 0000200A 3B35[2D210000]      <2> 		cmp esi, [buftxtloc]
  2347 00002010 742B                <2> 		je nordprupbck
  2348                              <2> 	rdprupbckspclp:
  2349 00002012 B008                <2> 		mov al, 8
  2350 00002014 8A1D[26210000]      <2> 		mov bl, [modkeyrdpr]
  2351 0000201A E899010000          <2> 		call prcharq
  2352 0000201F B020                <2> 		mov al, ' '
  2353 00002021 E892010000          <2> 		call prcharq
  2354 00002026 B008                <2> 		mov al, 8
  2355 00002028 E88B010000          <2> 		call prcharq
  2356 0000202D 4E                  <2> 		dec esi
  2357 0000202E 3B35[2D210000]      <2> 		cmp esi, [buftxtloc]
  2358 00002034 7402                <2> 		je nordprupbck2
  2359 00002036 EBDA                <2> 		jmp rdprupbckspclp
  2360                              <2> 	nordprupbck2:
  2361 00002038 E8B4040000          <2> 		call termcopy
  2362                              <2> 	nordprupbck:
  2363 0000203D 8B3D[1C982900]      <2> 		mov edi, [commandbufpos]
  2364 00002043 81C7[20982900]      <2> 		add edi, commandbuf
  2365 00002049 4F                  <2> 		dec edi
  2366 0000204A C3                  <2> 		ret
  2367                              <2> 	getcurrentcommandstr:
  2368 0000204B 8A25[2B210000]      <2> 		mov ah, [commandedit]
  2369 00002051 FE05[2B210000]      <2> 		inc byte [commandedit]
  2370                              <2> 	getccmdlp:
  2371 00002057 4F                  <2> 		dec edi
  2372 00002058 8A07                <2> 		mov al, [edi]
  2373 0000205A 81FF[20982900]      <2> 		cmp edi, commandbuf
  2374 00002060 7231                <2> 		jb getcmdresetcommandbuf
  2375 00002062 81EF[20982900]      <2> 		sub edi, commandbuf
  2376 00002068 3B3D[1C982900]      <2> 		cmp edi, [commandbufpos]
  2377 0000206E 0F8473FDFFFF        <2> 		je near rdprintb
  2378 00002074 81C7[20982900]      <2> 		add edi, commandbuf
  2379 0000207A 3C00                <2> 		cmp al, 0
  2380 0000207C 75D9                <2> 		jne getccmdlp
  2381 0000207E FECC                <2> 		dec ah
  2382 00002080 80FC00              <2> 		cmp ah, 0
  2383 00002083 77D2                <2> 		ja getccmdlp
  2384 00002085 47                  <2> 		inc edi
  2385 00002086 81FF[20A82900]      <2> 		cmp edi, commandbufend
  2386 0000208C 770D                <2> 		ja fixcmdbufb4morerdpr
  2387 0000208E E915000000          <2> 		jmp morerdprup
  2388                              <2> 	getcmdresetcommandbuf:
  2389 00002093 BF[20A82900]        <2> 		mov edi, commandbufend
  2390 00002098 47                  <2> 		inc edi
  2391 00002099 EBBC                <2> 		jmp getccmdlp
  2392                              <2> 	fixcmdbufb4morerdpr:
  2393 0000209B 4F                  <2> 		dec edi
  2394 0000209C 81EF[20A82900]      <2> 		sub edi, commandbufend
  2395 000020A2 81C7[20982900]      <2> 		add edi, commandbuf
  2396                              <2> 	morerdprup:
  2397 000020A8 8A07                <2> 		mov al, [edi]
  2398 000020AA 47                  <2> 		inc edi
  2399 000020AB 81EF[20982900]      <2> 		sub edi, commandbuf
  2400 000020B1 3C00                <2> 		cmp al, 0
  2401 000020B3 0F844FFEFFFF        <2> 		je near rdprintb2
  2402 000020B9 3B3D[1C982900]      <2> 		cmp edi, [commandbufpos]
  2403 000020BF 0F8343FEFFFF        <2> 		jae near rdprintb2
  2404 000020C5 81C7[20982900]      <2> 		add edi, commandbuf
  2405 000020CB 8806                <2> 		mov [esi], al
  2406 000020CD 46                  <2> 		inc esi
  2407 000020CE 57                  <2> 		push edi
  2408 000020CF 8A1D[26210000]      <2> 		mov bl, [modkeyrdpr]
  2409 000020D5 E8DE000000          <2> 		call prcharq
  2410 000020DA 5F                  <2> 		pop edi
  2411 000020DB 81FF[20A82900]      <2> 		cmp edi, commandbufend
  2412 000020E1 76C5                <2> 		jbe morerdprup
  2413 000020E3 BF[20982900]        <2> 		mov edi, commandbuf
  2414 000020E8 EBBE                <2> 		jmp morerdprup
  2415                              <2> 		
  2416                              <2> 	rdprdel:
  2417 000020EA BF[BAAD0000]        <2> 		mov edi, buftxt2
  2418 000020EF 8A07                <2> 		mov al, [edi]
  2419 000020F1 3C00                <2> 		cmp al, 0
  2420 000020F3 0F84EEFCFFFF        <2> 		je near rdprintb
  2421 000020F9 8806                <2> 		mov [esi], al
  2422 000020FB E8ADFEFFFF          <2> 		call shiftbuftxt2lft
  2423 00002100 E8B3000000          <2> 		call prcharq
  2424                              <2> 		
  2425                              <2> 	rdprbscheck:
  2426 00002105 3B35[27210000]      <2> 		cmp esi, [firstesirdpr]
  2427 0000210B 7705                <2> 		ja goodbscheck
  2428 0000210D E9D5FCFFFF          <2> 		jmp rdprintb
  2429                              <2> 	goodbscheck:
  2430 00002112 4E                  <2> 		dec esi
  2431 00002113 C60600              <2> 		mov byte [esi], 0
  2432 00002116 8A1D[26210000]      <2> 		mov bl, [modkeyrdpr]
  2433 0000211C B008                <2> 		mov al, 8
  2434 0000211E E929FDFFFF          <2> 		jmp bscheckequal
  2435                              <2> 		
  2436 00002123 0000                <2> axcache dw 0
  2437 00002125 00                  <2> endkeyrdpr db 0
  2438 00002126 00                  <2> modkeyrdpr db 0
  2439 00002127 00000000            <2> firstesirdpr dd 0
  2440 0000212B 00                  <2> commandedit db 0
  2441 0000212C 00                  <2> txtmask db 0
  2442 0000212D 00000000            <2> buftxtloc dd 0
  2443 00002131 00000000            <2> endbufferrdpr dd 0
  2444 00002135 082000              <2> backcursor db 8," ",0
  2445                              <1> intx5:
  2446                              <1> 	%include 'source/interrupts/5_readchar.asm'
  2447 00002138 E807000000          <2> 	call rdcharint
  2448 0000213D E95BE1FFFF          <2> 	jmp timerinterrupt
  2449                              <2> getchar:
  2450 00002142 30C0                <2> 	xor al, al
  2451                              <2> 	rdcharint:		;;get char, if al is 0, wait for key
  2452 00002144 C605[92210000]01    <2> 		mov byte [trans], 1
  2453 0000214B 3C00                <2> 		cmp al, 0
  2454 0000214D 7507                <2> 		jne transcheck
  2455 0000214F C605[92210000]00    <2> 		mov byte [trans], 0
  2456                              <2> 	transcheck:
  2457                              <2> 	%ifdef io.serial
  2458                              <2> 		call serial.receive
  2459                              <2> 		cmp al, 13
  2460                              <2> 		je rdenter
  2461                              <2> 	%else
  2462 00002156 E82E300000          <2> 		call getkey
  2463 0000215B 66A1[90210000]      <2> 		mov ax, [lastkey]
  2464 00002161 80FC1C              <2> 		cmp ah, 0x1C
  2465 00002164 741F                <2> 		je rdenter
  2466                              <2> 	%endif
  2467 00002166 8A3D[92210000]      <2> 		mov bh, [trans]
  2468 0000216C 803D[69510000]E0    <2> 		cmp byte [specialkey], 0xE0
  2469 00002173 7504                <2> 		jne nospecialtrans
  2470 00002175 88C3                <2> 		mov bl, al
  2471 00002177 30C0                <2> 		xor al, al
  2472                              <2> 	nospecialtrans:
  2473 00002179 08C7                <2> 		or bh, al
  2474 0000217B 80FF00              <2> 		cmp bh, 0
  2475 0000217E 74D6                <2> 		je transcheck
  2476 00002180 E90A000000          <2> 		jmp rdend
  2477                              <2> 	rdenter:
  2478 00002185 B41C                <2> 		mov ah, 0x1C
  2479 00002187 B00A                <2> 		mov al, 10
  2480 00002189 66A3[90210000]      <2> 		mov [lastkey], ax
  2481                              <2> 	rdend:
  2482 0000218F C3                  <2> 		ret
  2483                              <2> 		
  2484 00002190 0000                <2> lastkey db 0,0
  2485 00002192 00                  <2> trans db 0
  2486                              <1> intx6:
  2487                              <1> 	%include 'source/interrupts/6_prntchar.asm'
  2488                              <2> %ifdef io.serial
  2489                              <2> 	cmp bl, bh
  2490                              <2> 	call prcharint
  2491                              <2> 	jmp timerinterrupt
  2492                              <2> prcharint:	
  2493                              <2> prcharq:
  2494                              <2> 	call serial.send
  2495                              <2> 	ret
  2496                              <2> %else
  2497 00002193 38FB                <2> cmp bl, bh
  2498 00002195 740A                <2> je prchar.notimer
  2499 00002197 E80B000000          <2> call prcharint
  2500 0000219C E9FCE0FFFF          <2> jmp timerinterrupt
  2501                              <2> prchar.notimer:
  2502 000021A1 E812000000          <2> 	call prcharq
  2503 000021A6 CF                  <2> 	iret
  2504                              <2> 	
  2505                              <2> prcharint:	;;print char, char in al, modifier in bl, if bh = bl then termcopy will not happen, will run termcopy if called as is
  2506 000021A7 38FB                <2> 	cmp bl, bh
  2507 000021A9 740D                <2> 	je prcharq
  2508 000021AB E808000000          <2> 	call prcharq
  2509 000021B0 E83C030000          <2> 	call termcopy
  2510 000021B5 C3                  <2> 	ret
  2511 000021B6 00                  <2> termguion db 0
  2512 000021B7 00                  <2> termcopyon db 0
  2513                              <2> prcharq:
  2514 000021B8 88DC                <2> 	mov ah, bl
  2515 000021BA 66A3[7C230000]      <2> 	mov [charbuf], ax
  2516 000021C0 31DB                <2> 	xor ebx, ebx
  2517 000021C2 668B1D[76230000]    <2> 	mov bx, [videobufpos]
  2518 000021C9 BF[D0C22800]        <2> 	mov edi, videobuf
  2519 000021CE 01DF                <2> 	add edi, ebx
  2520 000021D0 66A1[EF240000]      <2> 	mov ax, [removedvideo]
  2521 000021D6 668907              <2> 	mov [edi], ax
  2522 000021D9 66A1[7C230000]      <2> 	mov ax, [charbuf]
  2523 000021DF 31D2                <2> 	xor edx, edx
  2524 000021E1 668B15[78230000]    <2> 	mov dx, [charpos]
  2525 000021E8 31C9                <2> 	xor ecx, ecx
  2526 000021EA 668B0D[7A230000]    <2> 	mov cx, [charxy]
  2527 000021F1 3C09                <2> 	cmp al, 9
  2528 000021F3 0F8463000000        <2> 	je near prtab
  2529 000021F9 3C0D                <2> 	cmp al, 13		;I am phasing this out-it is used by windows but not unix based systems
  2530 000021FB 0F848B000000        <2> 	je near prcr
  2531 00002201 3C0A                <2> 	cmp al, 10
  2532 00002203 0F84B7000000        <2> 	je near prnlcr
  2533 00002209 3C08                <2> 	cmp al, 8
  2534 0000220B 0F848F000000        <2> 	je near prbs
  2535 00002211 3CFF                <2> 	cmp al, 255		;;null character
  2536 00002213 0F841B000000        <2> 	je near donescr
  2537 00002219 668907              <2> 	mov [edi], ax
  2538 0000221C 81C702000000        <2> 	add edi, 2
  2539 00002222 FEC2                <2> 	inc dl
  2540                              <2> donecrnl:
  2541 00002224 38CA                <2> 	cmp dl, cl
  2542 00002226 0F83B9000000        <2> 	jae near preol
  2543                              <2> doneeol:
  2544 0000222C 38EE                <2> 	cmp dh, ch
  2545 0000222E 0F83CF000000        <2> 	jae near prscr	
  2546                              <2> donescr:
  2547 00002234 89FB                <2> 	mov ebx, edi
  2548 00002236 668B07              <2> 	mov ax, [edi]
  2549 00002239 66A3[EF240000]      <2> 	mov [removedvideo], ax
  2550 0000223F 81EB[D0C22800]      <2> 	sub ebx, videobuf
  2551 00002245 66891D[76230000]    <2> 	mov [videobufpos], bx
  2552 0000224C 668915[78230000]    <2> 	mov [charpos], dx
  2553 00002253 66A1[7C230000]      <2> 	mov ax, [charbuf]
  2554 00002259 88E3                <2> 	mov bl, ah
  2555 0000225B C3                  <2> 	ret
  2556                              <2> 	
  2557                              <2> 	prtab:
  2558 0000225C 31DB                <2> 		xor ebx, ebx
  2559 0000225E 668B1D[74230000]    <2> 		mov bx, [linebeginpos]
  2560 00002265 81EF[D0C22800]      <2> 		sub edi, videobuf
  2561 0000226B 29DF                <2> 		sub edi, ebx
  2562 0000226D C1EF04              <2> 		shr edi, 4
  2563 00002270 C1E704              <2> 		shl edi, 4
  2564 00002273 81C710000000        <2> 		add edi, 16
  2565 00002279 C0EA03              <2> 		shr dl, 3
  2566 0000227C C0E203              <2> 		shl dl, 3
  2567 0000227F 80C208              <2> 		add dl, 8
  2568 00002282 81C7[D0C22800]      <2> 		add edi, videobuf
  2569 00002288 01DF                <2> 		add edi, ebx
  2570 0000228A EB98                <2> 		jmp donecrnl
  2571                              <2> 	
  2572                              <2> 	prcr:
  2573 0000228C 30D2                <2> 		xor dl, dl
  2574 0000228E 31DB                <2> 		xor ebx, ebx
  2575 00002290 BF[D0C22800]        <2> 		mov edi, videobuf
  2576 00002295 668B1D[74230000]    <2> 		mov bx, [linebeginpos]
  2577 0000229C 01DF                <2> 		add edi, ebx
  2578 0000229E EB84                <2> 		jmp donecrnl
  2579                              <2> 			
  2580                              <2> 	prbs:
  2581 000022A0 80FA00              <2> 		cmp dl, 0
  2582 000022A3 7410                <2> 		je prbackline
  2583                              <2> 	prnobmr:
  2584 000022A5 FECA                <2> 		dec dl
  2585 000022A7 6631C0              <2> 		xor ax, ax
  2586 000022AA 81EF02000000        <2> 		sub edi, 2
  2587 000022B0 E96FFFFFFF          <2> 		jmp donecrnl
  2588                              <2> 	prbackline:
  2589 000022B5 88CA                <2> 		mov dl, cl
  2590 000022B7 80FE00              <2> 		cmp dh, 0
  2591 000022BA 74E9                <2> 		je prnobmr
  2592 000022BC FECE                <2> 		dec dh
  2593 000022BE EBE5                <2> 		jmp prnobmr
  2594                              <2> 		
  2595                              <2> 	prnlcr:
  2596 000022C0 FEC6                <2> 		inc dh
  2597 000022C2 31DB                <2> 		xor ebx, ebx
  2598 000022C4 30D2                <2> 		xor dl, dl
  2599 000022C6 88CB                <2> 		mov bl, cl
  2600 000022C8 66D1E3              <2> 		shl bx, 1
  2601 000022CB BF[D0C22800]        <2> 		mov edi, videobuf
  2602 000022D0 66031D[74230000]    <2> 		add bx, [linebeginpos]
  2603 000022D7 66891D[74230000]    <2> 		mov [linebeginpos], bx
  2604 000022DE 01DF                <2> 		add edi, ebx
  2605 000022E0 E93FFFFFFF          <2> 		jmp donecrnl
  2606                              <2> 		
  2607                              <2> 	preol:
  2608 000022E5 30D2                <2> 		xor dl, dl
  2609 000022E7 FEC6                <2> 		inc dh
  2610 000022E9 31DB                <2> 		xor ebx, ebx
  2611 000022EB 88CB                <2> 		mov bl, cl
  2612 000022ED 66D1E3              <2> 		shl bx, 1
  2613 000022F0 66031D[74230000]    <2> 		add bx, [linebeginpos]
  2614 000022F7 66891D[74230000]    <2> 		mov [linebeginpos], bx
  2615 000022FE E929FFFFFF          <2> 		jmp doneeol
  2616                              <2> 	prscr:
  2617 00002303 FECE                <2> 		dec dh
  2618 00002305 BF[D0C22800]        <2> 		mov edi, videobuf
  2619 0000230A 31DB                <2> 		xor ebx, ebx
  2620 0000230C 88CB                <2> 		mov bl, cl
  2621 0000230E 66D1E3              <2> 		shl bx, 1
  2622 00002311 01FB                <2> 		add ebx, edi
  2623                              <2> 	intscrollloop:
  2624 00002313 668B03              <2> 		mov ax, [ebx]
  2625 00002316 668907              <2> 		mov [edi], ax
  2626 00002319 81C702000000        <2> 		add edi, 2
  2627 0000231F 81C302000000        <2> 		add ebx, 2
  2628 00002325 FEC9                <2> 		dec cl
  2629 00002327 80F900              <2> 		cmp cl, 0
  2630 0000232A 75E7                <2> 		jne intscrollloop
  2631 0000232C 8A0D[7A230000]      <2> 		mov cl, [charxy]
  2632 00002332 FECD                <2> 		dec ch
  2633 00002334 80FD01              <2> 		cmp ch, 1
  2634 00002337 77DA                <2> 		ja intscrollloop
  2635 00002339 6631C0              <2> 		xor ax, ax
  2636 0000233C 81EF[D0C22800]      <2> 		sub edi, videobuf
  2637 00002342 66893D[74230000]    <2> 		mov [linebeginpos], di
  2638 00002349 81C7[D0C22800]      <2> 		add edi, videobuf
  2639 0000234F 89FB                <2> 		mov ebx, edi
  2640                              <2> 	intloopclear:
  2641 00002351 668903              <2> 		mov [ebx], ax
  2642 00002354 81C302000000        <2> 		add ebx, 2
  2643 0000235A FEC9                <2> 		dec cl
  2644 0000235C 80F900              <2> 		cmp cl, 0
  2645 0000235F 75F0                <2> 		jne intloopclear
  2646 00002361 FECD                <2> 		dec ch
  2647 00002363 80FD00              <2> 		cmp ch, 0
  2648 00002366 75E9                <2> 		jne intloopclear
  2649 00002368 668B0D[7A230000]    <2> 		mov cx, [charxy]
  2650 0000236F E9C0FEFFFF          <2> 		jmp donescr
  2651                              <2> 		
  2652 00002374 0000                <2> linebeginpos dw 0
  2653 00002376 0000                <2> videobufpos: dw 0
  2654 00002378 0000                <2> charpos db 0,0
  2655 0000237A 501E                <2> charxy db 80,30
  2656 0000237C 0000                <2> charbuf dw 0
  2657                              <2> %endif
  2658                              <1> intx7:
  2659                              <1> 	%include 'source/interrupts/7_openfile.asm'
  2660 0000237E E83F340000          <2> 	call loadfile
  2661 00002383 E915DFFFFF          <2> 	jmp timerinterrupt
  2662                              <1> intx9:
  2663                              <1> 	%include 'source/interrupts/9_num2str.asm'
  2664 00002388 3C00                <2> 	cmp al, 0
  2665 0000238A 750A                <2> 	jne num2strb
  2666 0000238C E8F20A0000          <2> 	call showdec
  2667 00002391 E907DFFFFF          <2> 	jmp timerinterrupt
  2668                              <2> num2strb:
  2669 00002396 E81E0A0000          <2> 	call showhex
  2670 0000239B E9FDDEFFFF          <2> 	jmp timerinterrupt
  2671                              <1> intx10:
  2672                              <1> 	%include 'source/interrupts/10_str2num.asm'
  2673 000023A0 E8C00B0000          <2> 	call cnvrttxt	;the string goes into esi, number into ecx
  2674 000023A5 E9F3DEFFFF          <2> 	jmp timerinterrupt
  2675                              <2> 	
  2676                              <1> %ifdef threads.included
  2677                              <1> intx11:
  2678                              <1> 	%include 'source/interrupts/11_forkthread.asm'
  2679                              <2> threadfork: ;esi is next thread's start address, if 0, fork current thread
  2680                              <2> 			;returns the PID of the new fork in ebx
  2681                              <2> ;WARNING:THIS WILL NOT WORK IN C UNTIL IT COPIES THE ENTIRE STACK
  2682 000023AA FA                  <2> 	cli
  2683 000023AB 60                  <2> 	pushad
  2684 000023AC 8925[79240000]      <2> 	mov [.espold], esp
  2685 000023B2 C605[61590000]01    <2> 	mov byte [threadson], 1
  2686 000023B9 8B1D[62590000]      <2> 	mov ebx, [currentthread]
  2687 000023BF C1E302              <2> 	shl ebx, 2
  2688 000023C2 89A3[20A82900]      <2> 	mov [threadlist + ebx], esp
  2689 000023C8 C1EB02              <2> 	shr ebx, 2
  2690 000023CB 81FB00000000        <2> 	cmp ebx, 0
  2691 000023D1 750C                <2> 	jne .simplestack
  2692 000023D3 BB[DA960000]        <2> 	mov ebx, stackend
  2693 000023D8 29E3                <2> 	sub ebx, esp
  2694 000023DA E90B000000          <2> 	jmp .stackcalcdone
  2695                              <2> .simplestack:
  2696 000023DF C1E30A              <2> 	shl ebx, 10
  2697 000023E2 81C3[20BC2900]      <2> 	add ebx, stack1
  2698 000023E8 29E3                <2> 	sub ebx, esp
  2699                              <2> .stackcalcdone:
  2700 000023EA 29DC                <2> 	sub esp, ebx
  2701 000023EC 81C4[20BC2900]      <2> 	add esp, stack1
  2702 000023F2 8B1D[5D590000]      <2> 	mov ebx, [lastthread]
  2703 000023F8 C1E308              <2> 	shl ebx, 8
  2704 000023FB 01DC                <2> 	add esp, ebx
  2705 000023FD 891D[7D240000]      <2> 	mov [.stackend], ebx
  2706                              <2> 
  2707 00002403 89E5                <2> 	mov ebp, esp
  2708 00002405 8B25[79240000]      <2> 	mov esp, [.espold]
  2709                              <2> 
  2710 0000240B C1EB0A              <2> 	shr ebx, 10 ;get pid then push it
  2711 0000240E 895C2410            <2> 	mov [esp + 16], ebx ;set the old ebx to the new PID
  2712                              <2> 
  2713 00002412 31DB                <2> 	xor ebx, ebx
  2714                              <2> .stackcopy:
  2715 00002414 668B041C            <2> 	mov ax, [esp + ebx]
  2716 00002418 6689441D00          <2> 	mov [ebp + ebx], ax
  2717 0000241D 81C302000000        <2> 	add ebx, 2
  2718 00002423 3B1D[7D240000]      <2> 	cmp ebx, [.stackend]
  2719 00002429 72E9                <2> 	jb .stackcopy
  2720                              <2> 
  2721 0000242B 31C0                <2> 	xor eax, eax
  2722 0000242D 668CC8              <2> 	mov ax, cs
  2723 00002430 89C2                <2> 	mov edx, eax
  2724 00002432 8B4C2428            <2> 	mov ecx, [esp + 40]
  2725 00002436 81C900020000        <2> 	or ecx, 0x200
  2726                              <2> 	
  2727 0000243C 81FE00000000        <2> 	cmp esi, 0
  2728 00002442 7504                <2> 	jne .nochangestack
  2729 00002444 8B742420            <2> 	mov esi, [esp + 32]
  2730                              <2> .nochangestack:
  2731 00002448 89F0                <2> 	mov eax, esi
  2732 0000244A 89EC                <2> 	mov esp, ebp
  2733                              <2> 
  2734 0000244C 89442420            <2> 	mov [esp + 32], eax
  2735 00002450 89542424            <2> 	mov [esp + 36], edx
  2736 00002454 894C2428            <2> 	mov [esp + 40], ecx
  2737                              <2> 
  2738 00002458 8B1D[5D590000]      <2> 	mov ebx, [lastthread]
  2739 0000245E 89A3[20A82900]      <2> 	mov [threadlist + ebx], esp
  2740 00002464 81C304000000        <2> 	add ebx, 4
  2741 0000246A 891D[5D590000]      <2> 	mov [lastthread], ebx
  2742 00002470 8B25[79240000]      <2> 	mov esp, [.espold]
  2743 00002476 61                  <2> 	popad
  2744 00002477 FB                  <2> 	sti
  2745 00002478 CF                  <2> 	iret
  2746                              <2> 
  2747 00002479 00000000            <2> .espold dd 0
  2748 0000247D 00000000            <2> .stackend dd 0
  2749                              <1> %endif
  2750                              <1> intx12:
  2751                              <1> 	%include 'source/interrupts/12_gettime.asm'
  2752 00002481 A1[55020000]        <2> 	mov eax, [timeseconds]
  2753 00002486 8B1D[59020000]      <2> 	mov ebx, [timenanoseconds]
  2754 0000248C 89D9                <2> 	mov ecx, ebx
  2755 0000248E C1E90A              <2> 	shr ecx, 10	;this is in microseconds
  2756 00002491 E907DEFFFF          <2> 	jmp timerinterrupt
  2757                              <1> intx13:
  2758                              <1> 	%include 'source/interrupts/13_settime.asm'
  2759 00002496 A3[55020000]        <2> 	mov [timeseconds], eax
  2760 0000249B 891D[59020000]      <2> 	mov [timenanoseconds], ebx
  2761 000024A1 E9F7DDFFFF          <2> 	jmp timerinterrupt
  2762                              <2> 	
  2763                              <1> intx14:
  2764                              <1> 	%include 'source/interrupts/14_runcmd.asm'
  2765 000024A6 BF[BAB10000]        <2> 	mov edi, buftxt
  2766                              <2> cpcmd:
  2767 000024AB 8A06                <2> 	mov al, [esi]
  2768 000024AD 8807                <2> 	mov [edi], al
  2769 000024AF 46                  <2> 	inc esi
  2770 000024B0 47                  <2> 	inc edi
  2771 000024B1 3C00                <2> 	cmp al, 0
  2772 000024B3 75F6                <2> 	jne cpcmd
  2773 000024B5 E802060000          <2> 	call run
  2774 000024BA CF                  <2> 	iret
  2775                              <1> intx15:
  2776                              <1> 	%include 'source/interrupts/15_proginfo.asm'
  2777 000024BB BB[BA9D0000]        <2> 	mov ebx, variables
  2778 000024C0 8B35[922B0000]      <2> 	mov esi, [currentcommandloc]
  2779 000024C6 89F7                <2> 	mov edi, esi
  2780 000024C8 31C9                <2> 	xor ecx, ecx
  2781                              <2> getcommandzeroes:
  2782 000024CA 8A07                <2> 	mov al, [edi]
  2783 000024CC 47                  <2> 	inc edi
  2784 000024CD 3C3B                <2> 	cmp al, ';'
  2785 000024CF 740B                <2> 	je nomorezeroes
  2786 000024D1 3C00                <2> 	cmp al, 0
  2787 000024D3 7407                <2> 	je nomorezeroes
  2788 000024D5 3C20                <2> 	cmp al, ' '
  2789 000024D7 75F1                <2> 	jne getcommandzeroes
  2790 000024D9 41                  <2> 	inc ecx
  2791 000024DA EBEE                <2> 	jmp getcommandzeroes
  2792                              <2> nomorezeroes:
  2793 000024DC 41                  <2> 	inc ecx
  2794 000024DD 4F                  <2> 	dec edi
  2795 000024DE 8B1D[469D0000]      <2> 	mov ebx, [uid]
  2796 000024E4 8B15[62590000]      <2> 	mov edx, [currentthread]
  2797 000024EA CF                  <2> 	iret
  2798                              <2> 	
  2799                              <1> 		
  2800                              <1> %ifdef io.serial
  2801                              <1> termcopy:
  2802                              <1> 		ret
  2803                              <1> %else
  2804 000024EB 00000000            <1> 	termcursorpos dd 0
  2805 000024EF 0000                <1> 	removedvideo dw 0
  2806                              <1> termcopy:	
  2807 000024F1 60                  <1> 	pusha
  2808 000024F2 BF[D0C22800]        <1> 	mov edi, videobuf
  2809 000024F7 31DB                <1> 	xor ebx, ebx
  2810 000024F9 668B1D[76230000]    <1> 	mov bx, [videobufpos]
  2811 00002500 01DF                <1> 	add edi, ebx
  2812 00002502 893D[EB240000]      <1> 	mov [termcursorpos], edi
  2813 00002508 E8CB000000          <1> 	call switchtermcursor
  2814 0000250D 803D[F4840000]00    <1> 	cmp byte [guion], 0
  2815 00002514 0F8420000000        <1> 	je near nowincopy
  2816                              <1> %ifdef gui.included
  2817 0000251A C605[295B0000]00    <1> 	mov byte [mouseselecton], 0
  2818 00002521 C605[B7210000]01    <1> 	mov byte [termcopyon], 1
  2819 00002528 803D[B6210000]01    <1> 	cmp byte [termguion], 1
  2820 0000252F 0F849A420000        <1> 	je near windowvideocopy
  2821                              <1> %endif
  2822 00002535 E997000000          <1> 	jmp nocopytermatall
  2823                              <1> nowincopy:
  2824 0000253A BE00000A00          <1> 	mov esi, 0xA0000
  2825 0000253F A1[3E020000]        <1> 	mov eax, [basecache]
  2826 00002544 C1E004              <1> 	shl eax, 4
  2827 00002547 29C6                <1> 	sub esi, eax
  2828 00002549 BF[D0C22800]        <1> 	mov edi, videobuf
  2829 0000254E 31C9                <1> 	xor ecx, ecx
  2830 00002550 668B0D[7A230000]    <1> 	mov cx, [charxy]
  2831                              <1> nowincopy2:
  2832 00002557 668B07              <1> 	mov ax, [edi]
  2833 0000255A 81C7A46A0000        <1> 	add edi, (videobuf2 - videobuf)
  2834 00002560 668B1F              <1> 	mov bx, [edi]
  2835 00002563 668907              <1> 	mov [edi], ax
  2836 00002566 81EFA46A0000        <1> 	sub edi, (videobuf2 - videobuf)
  2837 0000256C 47                  <1> 	inc edi
  2838 0000256D 6639D8              <1> 	cmp ax, bx
  2839 00002570 743E                <1> 	je nopresentwinfont
  2840 00002572 4F                  <1> 	dec edi
  2841 00002573 BB[4A730000]        <1> 	mov ebx, fonts
  2842 00002578 31C0                <1> 	xor eax, eax
  2843 0000257A 8A07                <1> 	mov al, [edi]
  2844 0000257C C1E004              <1> 	shl eax, 4
  2845 0000257F 01C3                <1> 	add ebx, eax
  2846 00002581 47                  <1> 	inc edi
  2847 00002582 8A27                <1> 	mov ah, [edi]
  2848 00002584 31D2                <1> 	xor edx, edx
  2849 00002586 8A15[7A230000]      <1> 	mov dl, [charxy]
  2850 0000258C C1C110              <1> 	rol ecx, 16
  2851 0000258F B110                <1> 	mov cl, 16
  2852                              <1> nowinfont:
  2853 00002591 8A03                <1> 	mov al, [ebx]
  2854 00002593 D0C8                <1> 	ror al, 1
  2855 00002595 80FC07              <1> 	cmp ah, 7
  2856 00002598 7602                <1> 	jbe notnotfont
  2857 0000259A F6D0                <1> 	not al
  2858                              <1> notnotfont:
  2859 0000259C 8806                <1> 	mov [esi], al
  2860 0000259E 01D6                <1> 	add esi, edx
  2861 000025A0 43                  <1> 	inc ebx
  2862 000025A1 FEC9                <1> 	dec cl
  2863 000025A3 80F900              <1> 	cmp cl, 0
  2864 000025A6 75E9                <1> 	jne nowinfont
  2865 000025A8 C1E204              <1> 	shl edx, 4
  2866 000025AB 29D6                <1> 	sub esi, edx
  2867 000025AD C1C110              <1> 	rol ecx, 16
  2868                              <1> nopresentwinfont:
  2869 000025B0 47                  <1> 	inc edi
  2870 000025B1 46                  <1> 	inc esi
  2871 000025B2 FEC9                <1> 	dec cl
  2872 000025B4 80F900              <1> 	cmp cl, 0
  2873 000025B7 759E                <1> 	jne nowincopy2
  2874 000025B9 8A0D[7A230000]      <1> 	mov cl, [charxy]
  2875 000025BF 31D2                <1> 	xor edx, edx
  2876 000025C1 88CA                <1> 	mov dl, cl
  2877 000025C3 29D6                <1> 	sub esi, edx
  2878 000025C5 C1E204              <1> 	shl edx, 4
  2879 000025C8 01D6                <1> 	add esi, edx
  2880 000025CA FECD                <1> 	dec ch
  2881 000025CC 80FD00              <1> 	cmp ch, 0
  2882 000025CF 7586                <1> 	jne nowincopy2
  2883                              <1> nocopytermatall:
  2884 000025D1 E802000000          <1> 	call switchtermcursor
  2885 000025D6 61                  <1> 	popa
  2886 000025D7 C3                  <1> 	ret
  2887                              <1> 	
  2888                              <1> switchtermcursor:
  2889 000025D8 8B3D[EB240000]      <1> 	mov edi, [termcursorpos]
  2890 000025DE 8A4701              <1> 	mov al, [edi + 1]
  2891 000025E1 8A27                <1> 	mov ah, [edi]
  2892 000025E3 3C07                <1> 	cmp al, 7
  2893 000025E5 7607                <1> 	jbe movlargecursorterm
  2894 000025E7 B007                <1> 	mov al, 7
  2895 000025E9 E902000000          <1> 	jmp movedcursorterm
  2896                              <1> movlargecursorterm:
  2897 000025EE B0F0                <1> 	mov al, 0xF0
  2898                              <1> movedcursorterm:
  2899 000025F0 884701              <1> 	mov [edi + 1], al
  2900 000025F3 80FC00              <1> 	cmp ah, 0
  2901 000025F6 7504                <1> 	jne fixednocursorterm
  2902 000025F8 B420                <1> 	mov ah, " "
  2903 000025FA 8827                <1> 	mov [edi], ah
  2904                              <1> fixednocursorterm:
  2905 000025FC C3                  <1> 	ret
  2906                              <1> %endif
  2907                                      %include "source/dosints.asm"
  2908                              <1> int20h:
  2909 000025FD 66B8004C            <1> mov ax, 0x4C00
  2910                              <1> int21h:
  2911                              <1> dostosolleros:
  2912 00002601 6650                <1> 	push ax
  2913 00002603 66B83000            <1> 	mov ax, NEW_DATA_SEL
  2914 00002607 8ED8                <1> 	mov ds, ax
  2915 00002609 8EC0                <1> 	mov es, ax
  2916 0000260B 8EE0                <1> 	mov fs, ax
  2917 0000260D 66B82000            <1> 	mov ax, SYS_DATA_SEL
  2918 00002611 8EE8                <1> 	mov gs, ax
  2919 00002613 6658                <1> 	pop ax
  2920 00002615 9C                  <1> 	pushf
  2921 00002616 60                  <1> 	pusha
  2922 00002617 80FC01              <1> 	cmp ah, 1
  2923 0000261A 0F8449000000        <1> 	je near dosgchar
  2924 00002620 80FC02              <1> 	cmp ah, 2
  2925 00002623 0F8447000000        <1> 	je near doswchar
  2926 00002629 80FC09              <1> 	cmp ah, 9
  2927 0000262C 0F8449000000        <1> 	je near dosprintstr
  2928 00002632 80FC0A              <1> 	cmp ah, 0xA
  2929 00002635 0F8456000000        <1> 	je near dosgetstr
  2930 0000263B 80FC2B              <1> 	cmp ah, 0x2B
  2931 0000263E 0F8492000000        <1> 	je near dosgetdate
  2932 00002644 80FC2C              <1> 	cmp ah, 0x2C
  2933 00002647 0F84AC000000        <1> 	je near dosgettime
  2934 0000264D 80FC4C              <1> 	cmp ah, 0x4C
  2935 00002650 0F84C1000000        <1> 	je near dosexit
  2936                              <1> backtodos:
  2937 00002656 61                  <1> 	popa
  2938 00002657 9D                  <1> 	popf
  2939 00002658 6650                <1> 	push ax
  2940 0000265A 66B85000            <1> 	mov ax, DOS_DATA_SEL
  2941 0000265E 8ED8                <1> 	mov ds, ax
  2942 00002660 8EC0                <1> 	mov es, ax
  2943 00002662 8EE0                <1> 	mov fs, ax
  2944 00002664 8EE8                <1> 	mov gs, ax
  2945 00002666 6658                <1> 	pop ax
  2946 00002668 CF                  <1> 	iret
  2947                              <1> 
  2948                              <1> dosgchar:
  2949 00002669 E8D4FAFFFF          <1> 	call getchar
  2950 0000266E EBE6                <1> 	jmp backtodos
  2951                              <1> 	
  2952                              <1> doswchar:
  2953 00002670 88D0                <1> 	mov al, dl
  2954 00002672 B307                <1> 	mov bl, 7
  2955 00002674 E82EFBFFFF          <1> 	call prcharint
  2956 00002679 EBDB                <1> 	jmp backtodos
  2957                              <1> 	
  2958                              <1> dosprintstr:
  2959 0000267B 31F6                <1> 	xor esi, esi
  2960 0000267D 6689D6              <1> 	mov si, dx
  2961 00002680 81C600004000        <1> 	add esi, dosprogloc
  2962 00002686 B024                <1> 	mov al, "$"
  2963 00002688 B307                <1> 	mov bl, 7
  2964 0000268A E85AF6FFFF          <1> 	call printint
  2965 0000268F EBC5                <1> 	jmp backtodos
  2966                              <1> 	
  2967                              <1> dosgetstr:
  2968 00002691 31F6                <1> 	xor esi, esi
  2969 00002693 6689D6              <1> 	mov si, dx
  2970 00002696 81C600004000        <1> 	add esi, dosprogloc
  2971 0000269C B900000000          <1> 	mov ecx, 0
  2972 000026A1 8A0E                <1> 	mov cl, [esi]
  2973 000026A3 81C603000000        <1> 	add esi, 3
  2974 000026A9 89F7                <1> 	mov edi, esi
  2975 000026AB 8935[D2260000]      <1> 	mov [stringstart], esi
  2976 000026B1 01CF                <1> 	add edi, ecx
  2977 000026B3 B00A                <1> 	mov al, 10
  2978 000026B5 B307                <1> 	mov bl, 7
  2979 000026B7 E80EF7FFFF          <1> 	call rdprint
  2980 000026BC 89F1                <1> 	mov ecx, esi
  2981 000026BE 2B0D[D2260000]      <1> 	sub ecx, [stringstart]
  2982 000026C4 8B35[D2260000]      <1> 	mov esi, [stringstart]
  2983 000026CA 884EFF              <1> 	mov [esi - 1], cl
  2984 000026CD 884EFE              <1> 	mov [esi - 2], cl
  2985 000026D0 EB84                <1> 	jmp backtodos
  2986 000026D2 00000000            <1> stringstart dd 0
  2987                              <1> 
  2988                              <1> dosgetdate:
  2989 000026D6 E8521D0000          <1> 	call time
  2990 000026DB 8A0D[F5450000]      <1> 	mov cl, [RTCtimeYear]
  2991 000026E1 B500                <1> 	mov ch, 0
  2992 000026E3 6681C1D007          <1> 	add cx, 2000
  2993 000026E8 8A35[F4450000]      <1> 	mov dh, [RTCtimeMonth]
  2994 000026EE 8A15[F3450000]      <1> 	mov dl, [RTCtimeDay]
  2995 000026F4 E95DFFFFFF          <1> 	jmp backtodos
  2996                              <1> 
  2997                              <1> dosgettime:
  2998 000026F9 E82F1D0000          <1> 	call time
  2999 000026FE 8A2D[F2450000]      <1> 	mov ch, [RTCtimeHour]
  3000 00002704 8A0D[F1450000]      <1> 	mov cl, [RTCtimeMinute]
  3001 0000270A 8A35[F0450000]      <1> 	mov dh, [RTCtimeSecond]
  3002 00002710 B200                <1> 	mov dl, 0
  3003 00002712 E93FFFFFFF          <1> 	jmp backtodos
  3004                              <1> 	
  3005                              <1> dosexit:
  3006 00002717 61                  <1> 	popa
  3007 00002718 8B25[3A9B0000]      <1> 	mov esp, [previousstack]
  3008 0000271E 31DB                <1> 	xor ebx, ebx
  3009 00002720 88C3                <1> 	mov bl, al
  3010 00002722 80FB00              <1> 	cmp bl, 0
  3011 00002725 0F8545F5FFFF        <1> 	jne near exitprog.error
  3012 0000272B C3                  <1> 	ret
  3013                                      %include "source/solleros.asm"
  3014                              <1> 	;SOLLEROS.ASM
  3015                              <1> os:
  3016                              <1> setdefenv:
  3017 0000272C B02F                <1> 	mov al, '/'
  3018 0000272E A2[469B0000]        <1> 	mov [currentfolder], al
  3019 00002733 B801000000          <1> 	mov eax, 1
  3020 00002738 A3[429B0000]        <1> 	mov [currentfolderloc], eax
  3021 0000273D E806F6FFFF          <1> 	call clear
  3022                              <1> bootfilecheck:
  3023 00002742 803D[4A9D0000]01    <1> 	cmp byte [ranboot], 1
  3024 00002749 0F8427000000        <1> 	je near nobootfile
  3025 0000274F C605[4A9D0000]01    <1> 	mov byte [ranboot], 1
  3026 00002756 BF[DC720000]        <1> 	mov edi, bootfilename
  3027 0000275B BE00004000          <1> 	mov esi, 0x400000
  3028 00002760 E85D300000          <1> 	call loadfile
  3029 00002765 81FA94010000        <1> 	cmp edx, 404
  3030 0000276B 0F8405000000        <1> 	je near nobootfile
  3031 00002771 E89A0D0000          <1> 	call progbatchfound
  3032                              <1> nobootfile:	
  3033                              <1> 
  3034 00002776 BE[00000000]        <1> 	mov esi, signature
  3035                              <1> .sigcopyloop:	;this prevents an odd error
  3036 0000277B 658A06              <1> 	mov al, [gs:esi]
  3037 0000277E 8806                <1> 	mov [esi], al
  3038 00002780 46                  <1> 	inc esi
  3039 00002781 81FE[1A000000]      <1> 	cmp esi, signatureend
  3040 00002787 72F2                <1> 	jb .sigcopyloop
  3041 00002789 BE[00000000]        <1> 	mov esi, signature
  3042 0000278E E84FF5FFFF          <1> 	call print
  3043 00002793 8B0D[16000000]      <1> 	mov ecx, [signatureend - 4]
  3044 00002799 E8E5060000          <1> 	call showdec
  3045 0000279E BE[25730000]        <1> 	mov esi, line
  3046 000027A3 E83AF5FFFF          <1> 	call print
  3047 000027A8 BE[01730000]        <1> 	mov esi, userask
  3048 000027AD E830F5FFFF          <1> 	call print
  3049                              <1> usercheck:
  3050 000027B2 BE[BAB10000]        <1> 	mov esi, buftxt
  3051 000027B7 BF[BAB50000]        <1> 	mov edi, buftxtend
  3052 000027BC B00A                <1> 	mov al, 10
  3053 000027BE E807F6FFFF          <1> 	call rdprint
  3054 000027C3 56                  <1> 	push esi
  3055 000027C4 BE[0B730000]        <1> 	mov esi, pwdask
  3056 000027C9 E814F5FFFF          <1> 	call print
  3057 000027CE 5E                  <1> 	pop esi
  3058 000027CF 46                  <1> 	inc esi
  3059 000027D0 8935[BA280000]      <1> 	mov [esipass], esi
  3060                              <1> passcheck:
  3061 000027D6 E867F9FFFF          <1> 	call getchar
  3062 000027DB 3C0A                <1> 	cmp al, 10
  3063 000027DD 0F8436000000        <1> 	je near gotpass
  3064 000027E3 3C08                <1> 	cmp al, 8
  3065 000027E5 0F8410000000        <1> 	je near backpass
  3066 000027EB 8806                <1> 	mov [esi], al
  3067 000027ED 46                  <1> 	inc esi
  3068 000027EE B02A                <1> 	mov al, '*'
  3069 000027F0 E8B2F9FFFF          <1> 	call prcharint
  3070 000027F5 EBDF                <1> 	jmp passcheck
  3071 000027F7 08200800            <1> backcursor2 db 8," ",8,0
  3072                              <1> backpass:
  3073 000027FB 3B35[BA280000]      <1> 	cmp esi, [esipass]
  3074 00002801 0F84CFFFFFFF        <1> 	je near passcheck
  3075 00002807 4E                  <1> 	dec esi
  3076 00002808 C60600              <1> 	mov byte [esi], 0
  3077 0000280B 56                  <1> 	push esi
  3078 0000280C BE[F7270000]        <1> 	mov esi, backcursor2
  3079 00002811 E8CCF4FFFF          <1> 	call print
  3080 00002816 5E                  <1> 	pop esi
  3081 00002817 EBBD                <1> 	jmp passcheck
  3082                              <1> gotpass:
  3083 00002819 B00A                <1> 	mov al, 10
  3084 0000281B E887F9FFFF          <1> 	call prcharint
  3085 00002820 30C0                <1> 	xor al, al
  3086 00002822 31C9                <1> 	xor ecx, ecx
  3087 00002824 8806                <1> 	mov [esi], al
  3088 00002826 BB[27730000]        <1> 	mov ebx, userlst
  3089                              <1> userfind:
  3090 0000282B BE[BAB10000]        <1> 	mov esi, buftxt
  3091 00002830 8A06                <1> 	mov al, [esi]
  3092 00002832 3C00                <1> 	cmp al, 0
  3093 00002834 0F84F2FEFFFF        <1> 	je near os
  3094 0000283A 891D[BE280000]      <1> 	mov [usercache], ebx
  3095 00002840 E851030000          <1> 	call tester
  3096 00002845 3C01                <1> 	cmp al, 1
  3097 00002847 7416                <1> 	je pwdtest
  3098 00002849 41                  <1> 	inc ecx
  3099                              <1> nxtuser:
  3100 0000284A 8A03                <1> 	mov al, [ebx]
  3101 0000284C 43                  <1> 	inc ebx
  3102 0000284D 3C00                <1> 	cmp al, 0
  3103 0000284F 75F9                <1> 	jne nxtuser
  3104 00002851 81FB[4A730000]      <1> 	cmp ebx, userlstend
  3105 00002857 0F83CFFEFFFF        <1> 	jae near os
  3106 0000285D EBCC                <1> 	jmp userfind
  3107                              <1> pwdtest:
  3108 0000285F 46                  <1> 	inc esi
  3109 00002860 43                  <1> 	inc ebx
  3110 00002861 E830030000          <1> 	call tester
  3111 00002866 3C01                <1> 	cmp al, 1
  3112 00002868 7402                <1> 	je pwdrgt
  3113 0000286A EBDE                <1> 	jmp nxtuser
  3114                              <1> pwdrgt:
  3115 0000286C D1E9                <1> 	shr ecx, 1
  3116 0000286E 890D[469D0000]      <1> 	mov [uid], ecx
  3117 00002874 E8CFF4FFFF          <1> 	call clear
  3118 00002879 66B90002            <1> 	mov cx, 200h
  3119 0000287D BE[BAB10000]        <1> 	mov esi, buftxt
  3120 00002882 8935[922B0000]      <1> 	mov [currentcommandloc], esi
  3121 00002888 E825000000          <1> 	call bufclr
  3122                              <1> clearolddata:
  3123 0000288D 31C0                <1> 	xor eax, eax
  3124 0000288F A2[4B9D0000]        <1> 	mov [IFON], al
  3125 00002894 A2[4C9D0000]        <1> 	mov [IFTRUE], al
  3126 00002899 A2[B49D0000]        <1> 	mov [BATCHISON], al
  3127 0000289E A3[B09D0000]        <1> 	mov [BATCHPOS], eax
  3128 000028A3 A2[B59D0000]        <1> 	mov [LOOPON], al
  3129 000028A8 A3[B69D0000]        <1> 	mov [LOOPPOS], eax
  3130 000028AD E933000000          <1> 	jmp nwcmd
  3131                              <1> bufclr:	
  3132 000028B2 30C0                <1> 	xor al, al
  3133 000028B4 8806                <1> 	mov [esi], al
  3134 000028B6 46                  <1> 	inc esi
  3135 000028B7 E2F9                <1> 	loop bufclr
  3136 000028B9 C3                  <1> 	ret
  3137                              <1> 
  3138 000028BA 00000000            <1> esipass dd 0
  3139 000028BE [27730000]          <1> usercache dd userlst
  3140                              <1> 	
  3141                              <1> buftxtclear:
  3142 000028C2 30C0                <1> 	xor al, al
  3143 000028C4 BE[BAB10000]        <1> 	mov esi, buftxt
  3144 000028C9 81FE[BAB50000]      <1> clearbuftxt: cmp esi, buf2
  3145 000028CF 730E                <1> 	jae retbufclr
  3146 000028D1 8806                <1> 	mov [esi], al
  3147 000028D3 46                  <1> 	inc esi
  3148 000028D4 EBF3                <1> 	jmp clearbuftxt
  3149                              <1> 
  3150 000028D6 39DE                <1> clearitbuf: cmp esi, ebx
  3151 000028D8 7305                <1> 	jae retbufclr
  3152 000028DA 8806                <1> 	mov [esi], al
  3153 000028DC 46                  <1> 	inc esi
  3154 000028DD EBF7                <1> 	jmp clearitbuf
  3155 000028DF C3                  <1> retbufclr: ret
  3156                              <1> 
  3157 000028E0 E900000000          <1> full:	jmp nwcmd
  3158                              <1> 
  3159                              <1> shush:	;SollerOS Hardly Unix-compatible Shell
  3160                              <1> nwcmd:
  3161 000028E5 FB                  <1> 	sti
  3162 000028E6 31C0                <1> 	xor eax, eax
  3163 000028E8 3905[B42A0000]      <1> 	cmp [nextcommandloc], eax
  3164 000028EE 7413                <1> 	je nomultiplecommand
  3165 000028F0 8B35[B42A0000]      <1> 	mov esi, [nextcommandloc]
  3166 000028F6 8935[B82A0000]      <1> 	mov [thiscommandloc], esi
  3167 000028FC E8C0010000          <1> 	call fixvariables
  3168 00002901 EBE2                <1> 	jmp nwcmd
  3169                              <1> nomultiplecommand:
  3170 00002903 A3[B82A0000]        <1> 	mov [thiscommandloc], eax
  3171 00002908 3805[61590000]      <1> 	cmp [threadson], al
  3172 0000290E 7405                <1> 	je noclinwcmd
  3173 00002910 A2[61590000]        <1> 	mov [threadson], al
  3174                              <1> noclinwcmd:
  3175 00002915 B001                <1> 	mov al, 1
  3176 00002917 3805[B49D0000]      <1> 	cmp [BATCHISON], al
  3177 0000291D 7501                <1> 	jne cancel
  3178 0000291F C3                  <1> 	ret
  3179 00002920 30C0                <1> cancel:	xor al, al
  3180 00002922 A2[4B9D0000]        <1> 	mov [IFON], al
  3181 00002927 A2[B49D0000]        <1> 	mov [BATCHISON], al
  3182 0000292C B05B                <1> 	mov al, '['
  3183 0000292E 66BB0700            <1> 	mov bx, 7
  3184 00002932 E881F8FFFF          <1> 	call prcharq
  3185 00002937 8B35[BE280000]      <1> 	mov esi, [usercache]
  3186 0000293D E88EF3FFFF          <1> 	call printquiet
  3187 00002942 BE[15730000]        <1> 	mov esi, computer
  3188 00002947 E884F3FFFF          <1> 	call printquiet
  3189 0000294C BE[469B0000]        <1> 	mov esi, currentfolder
  3190 00002951 0335[3E9B0000]      <1> 	add esi, [lastfolderloc]
  3191 00002957 E874F3FFFF          <1> 	call printquiet
  3192 0000295C BE[20730000]        <1> 	mov esi, endprompt
  3193 00002961 E87CF3FFFF          <1> 	call print
  3194 00002966 E857FFFFFF          <1> 	call buftxtclear
  3195 0000296B BE[BAB10000]        <1> 	mov esi, buftxt
  3196 00002970 C605[2B210000]01    <1> 	mov byte [commandedit], 1
  3197 00002977 B00A                <1> 	mov al, 10
  3198 00002979 66BB0700            <1> 	mov bx, 7
  3199 0000297D BF[BAB50000]        <1> 	mov edi, buftxtend
  3200 00002982 E843F4FFFF          <1> 	call rdprint
  3201 00002987 C605[2B210000]00    <1> 	mov byte [commandedit], 0
  3202 0000298E 803D[BAB10000]00    <1> 	cmp byte [buftxt], 0
  3203 00002995 0F844AFFFFFF        <1> 	je near nwcmd
  3204 0000299B 8B35[1C982900]      <1> gotcmd:	mov esi, [commandbufpos]
  3205 000029A1 8935[18982900]      <1> 	mov [lastcommandpos], esi
  3206 000029A7 BF[BAB10000]        <1> 	mov edi, buftxt
  3207 000029AC 81C6[20982900]      <1> 	add esi, commandbuf
  3208 000029B2 81FE[20A82900]      <1> 	cmp esi, commandbufend
  3209 000029B8 7605                <1> 	jbe copycommand
  3210 000029BA BE[20982900]        <1> 	mov esi, commandbuf
  3211                              <1> copycommand:
  3212 000029BF 8A07                <1> 	mov al, [edi]
  3213 000029C1 8806                <1> 	mov [esi], al
  3214 000029C3 47                  <1> 	inc edi
  3215 000029C4 46                  <1> 	inc esi
  3216 000029C5 3C00                <1> 	cmp al, 0
  3217 000029C7 740F                <1> 	je donecopy
  3218 000029C9 81FE[20A82900]      <1> 	cmp esi, commandbufend
  3219 000029CF 76EE                <1> 	jbe copycommand
  3220 000029D1 BE[20982900]        <1> 	mov esi, commandbuf
  3221 000029D6 EBE7                <1> 	jmp copycommand
  3222                              <1> donecopy:
  3223 000029D8 81EE[20982900]      <1> 	sub esi, commandbuf
  3224 000029DE 8935[1C982900]      <1> 	mov [commandbufpos], esi
  3225 000029E4 E8D3000000          <1> 	call run
  3226 000029E9 E9F7FEFFFF          <1> 	jmp nwcmd
  3227                              <1> 
  3228 000029EE E8CFFEFFFF          <1> input:	call buftxtclear
  3229 000029F3 BE[BAB10000]        <1> 	mov esi, buftxt		;puts input into buftxt AND onto screen
  3230 000029F8 BF[BAB50000]        <1> 	mov edi, buftxtend
  3231 000029FD B00A                <1> stdin:	mov al, 10
  3232 000029FF B307                <1> 	mov bl, 7
  3233 00002A01 E8C4F3FFFF          <1> 	call rdprint
  3234 00002A06 C3                  <1> 	ret
  3235                              <1> 
  3236                              <1> replacevariable:
  3237 00002A07 8A4601              <1> 	mov al, [esi + 1]
  3238 00002A0A C64601FF            <1> 	mov byte [esi + 1], 255
  3239 00002A0E 3C24                <1> 	cmp al, "$"
  3240 00002A10 0F84AB000000        <1> 	je near fixvariables
  3241 00002A16 884601              <1> 	mov [esi + 1], al
  3242 00002A19 56                  <1> 	push esi
  3243 00002A1A 81EE[BAB10000]      <1> 	sub esi, buftxt
  3244 00002A20 89F7                <1> 	mov edi, esi
  3245 00002A22 81C6[BAB10000]      <1> 	add esi, buftxt
  3246 00002A28 47                  <1> 	inc edi
  3247 00002A29 BB[BA9D0000]        <1> 	mov ebx, variables
  3248 00002A2E E832110000          <1> 	call nxtvrech
  3249 00002A33 89F7                <1> 	mov edi, esi
  3250 00002A35 31DB                <1> 	xor ebx, ebx
  3251 00002A37 4E                  <1> 	dec esi
  3252                              <1> findvarname:
  3253 00002A38 4E                  <1> 	dec esi
  3254 00002A39 8A06                <1> 	mov al, [esi]
  3255 00002A3B 43                  <1> 	inc ebx
  3256 00002A3C 3C04                <1> 	cmp al, 4
  3257 00002A3E 75F8                <1> 	jne findvarname
  3258 00002A40 5E                  <1> 	pop esi
  3259                              <1> replacevarloop:
  3260 00002A41 8A07                <1> 	mov al, [edi]
  3261 00002A43 81FB00000000        <1> 	cmp ebx, 0
  3262 00002A49 0F841E000000        <1> 	je near expandbuftxt
  3263 00002A4F 3C00                <1> 	cmp al, 0
  3264 00002A51 0F8407000000        <1> 	je near compressbuftxt
  3265 00002A57 8806                <1> 	mov [esi], al
  3266 00002A59 4B                  <1> 	dec ebx
  3267 00002A5A 46                  <1> 	inc esi
  3268 00002A5B 47                  <1> 	inc edi
  3269 00002A5C EBE3                <1> 	jmp replacevarloop
  3270                              <1> compressbuftxt:	
  3271 00002A5E 8A041E              <1> 	mov al, [esi + ebx]
  3272 00002A61 8806                <1> 	mov [esi], al
  3273 00002A63 46                  <1> 	inc esi
  3274 00002A64 3C00                <1> 	cmp al, 0
  3275 00002A66 75F6                <1> 	jne compressbuftxt
  3276 00002A68 E954000000          <1> 	jmp fixvariables
  3277                              <1> expandbuftxt:
  3278 00002A6D 89F1                <1> 	mov ecx, esi
  3279 00002A6F 8A26                <1> 	mov ah, [esi]
  3280                              <1> expandbuftxtlp:
  3281 00002A71 8A1E                <1> 	mov bl, [esi]
  3282 00002A73 46                  <1> 	inc esi
  3283 00002A74 8A3E                <1> 	mov bh, [esi]
  3284 00002A76 8826                <1> 	mov [esi], ah
  3285 00002A78 88FC                <1> 	mov ah, bh
  3286 00002A7A 80FB00              <1> 	cmp bl, 0
  3287 00002A7D 75F2                <1> 	jne expandbuftxtlp
  3288 00002A7F 89CE                <1> 	mov esi, ecx
  3289 00002A81 8806                <1> 	mov [esi], al
  3290 00002A83 47                  <1> 	inc edi
  3291 00002A84 8A07                <1> 	mov al, [edi]
  3292 00002A86 3C00                <1> 	cmp al, 0
  3293 00002A88 0F8433000000        <1> 	je near fixvariables
  3294 00002A8E 46                  <1> 	inc esi
  3295 00002A8F EBDC                <1> 	jmp expandbuftxt
  3296                              <1> multipleprogline:
  3297 00002A91 30E4                <1> 	xor ah, ah
  3298 00002A93 8826                <1> 	mov [esi], ah
  3299 00002A95 46                  <1> 	inc esi
  3300 00002A96 8935[B42A0000]      <1> 	mov [nextcommandloc], esi
  3301 00002A9C E93E000000          <1> 	jmp donefixvariables
  3302                              <1> inlinecomment:	;if the following char is #, include a #, otherwise end the line
  3303 00002AA1 46                  <1> 	inc esi
  3304 00002AA2 8A06                <1> 	mov al, [esi]
  3305 00002AA4 C606FF              <1> 	mov byte [esi], 255
  3306 00002AA7 3C23                <1> 	cmp al, '#'
  3307 00002AA9 7416                <1> 	je fixvariables
  3308 00002AAB 4E                  <1> 	dec esi
  3309 00002AAC C60600              <1> 	mov byte [esi], 0
  3310 00002AAF E90D000000          <1> 	jmp fixvariables
  3311                              <1> 	
  3312 00002AB4 00000000            <1> nextcommandloc dd 0
  3313 00002AB8 00000000            <1> thiscommandloc dd 0	
  3314                              <1> run:
  3315 00002ABC BE[BAB10000]        <1> 	mov esi, buftxt
  3316                              <1> fixvariables:
  3317 00002AC1 46                  <1> 	inc esi
  3318 00002AC2 8A06                <1> 	mov al, [esi]
  3319 00002AC4 3C23                <1> 	cmp al, '#'	;inline comment
  3320 00002AC6 74D9                <1> 	je inlinecomment
  3321 00002AC8 3C24                <1> 	cmp al, '$' ;variable
  3322 00002ACA 0F8437FFFFFF        <1> 	je near replacevariable
  3323 00002AD0 3C3B                <1> 	cmp al, ';' ;program list
  3324 00002AD2 74BD                <1> 	je multipleprogline
  3325 00002AD4 3C00                <1> 	cmp al, 0
  3326 00002AD6 75E9                <1> 	jne fixvariables
  3327 00002AD8 31C0                <1> 	xor eax, eax
  3328 00002ADA A3[B42A0000]        <1> 	mov [nextcommandloc], eax
  3329                              <1> donefixvariables:
  3330 00002ADF 803D[7D300000]00    <1> 	cmp byte [indexdone], 0
  3331 00002AE6 7505                <1> 	jne progtest
  3332 00002AE8 E8FB040000          <1> 	call indexfiles
  3333                              <1> progtest:
  3334 00002AED 31C0                <1> 	xor eax, eax
  3335 00002AEF BB[3A970000]        <1> 	mov ebx, fileindex
  3336 00002AF4 668B03              <1> prgnxt:	mov ax, [ebx]
  3337 00002AF7 B1FF                <1> 	mov cl, 255
  3338 00002AF9 B52C                <1> 	mov ch, 44
  3339 00002AFB 6639C8              <1> 	cmp ax, cx
  3340 00002AFE 740B                <1> 	je fndprg
  3341 00002B00 43                  <1> 	inc ebx
  3342 00002B01 81FB[3A9B0000]      <1> 	cmp ebx, fileindexend
  3343 00002B07 735D                <1> 	jae prgnf
  3344 00002B09 EBE9                <1> 	jmp prgnxt
  3345 00002B0B 81C302000000        <1> fndprg: add ebx, 2
  3346 00002B11 31C9                <1> 	xor ecx, ecx
  3347 00002B13 BE[BAB10000]        <1> 	mov esi, buftxt
  3348 00002B18 390D[B82A0000]      <1> 	cmp [thiscommandloc], ecx
  3349 00002B1E 7406                <1> 	je noprgtstmultiple
  3350 00002B20 8B35[B82A0000]      <1> 	mov esi, [thiscommandloc]
  3351                              <1> noprgtstmultiple:
  3352 00002B26 E8A6000000          <1> 	call cndtest
  3353 00002B2B 3C01                <1> 	cmp al, 1
  3354 00002B2D 7302                <1> 	jae prggood
  3355 00002B2F EBC3                <1> 	jmp prgnxt
  3356 00002B31 81FB[3A9B0000]      <1> prggood: cmp ebx, fileindexend
  3357 00002B37 7358                <1> 	jae prgdn
  3358 00002B39 31C0                <1> 	xor eax, eax
  3359 00002B3B BE[BAB10000]        <1> 	mov esi, buftxt
  3360 00002B40 3905[B82A0000]      <1> 	cmp [thiscommandloc], eax
  3361 00002B46 7406                <1> 	je noprggoodmul
  3362 00002B48 8B35[B82A0000]      <1> 	mov esi, [thiscommandloc]
  3363                              <1> noprggoodmul:
  3364 00002B4E 8935[922B0000]      <1> 	mov [currentcommandloc], esi
  3365 00002B54 81C303000000        <1> 	add ebx, 3
  3366 00002B5A 8B3B                <1> 	mov edi, [ebx]
  3367 00002B5C C605[61590000]02    <1> 	mov byte [threadson], 2
  3368 00002B63 FFD7                <1> 	call edi
  3369 00002B65 C3                  <1> 	ret
  3370                              <1> prgnf:	
  3371 00002B66 8B35[922B0000]      <1> 	mov esi, [currentcommandloc]
  3372 00002B6C 8A06                <1> 	mov al, [esi]
  3373 00002B6E 3C00                <1> 	cmp al, 0
  3374 00002B70 741F                <1> 	je prgdn
  3375 00002B72 BE[E4720000]        <1> 	mov esi, notfound1
  3376 00002B77 E866F1FFFF          <1> 	call print
  3377 00002B7C 8B35[922B0000]      <1> 	mov esi, [currentcommandloc]
  3378 00002B82 E85BF1FFFF          <1> 	call print
  3379 00002B87 BE[EC720000]        <1> 	mov esi, notfound2
  3380 00002B8C E851F1FFFF          <1> 	call print
  3381 00002B91 C3                  <1> prgdn:	ret
  3382                              <1> 
  3383 00002B92 00000000            <1> currentcommandloc dd 0
  3384                              <1> 
  3385                              <1> tester:			;si=user bx=prog returns 1 in al if true
  3386 00002B96 6631C0              <1> 	xor ax, ax
  3387 00002B99 8A06                <1> retest:	mov al, [esi]
  3388 00002B9B 8A23                <1> 	mov ah, [ebx]
  3389 00002B9D 3C00                <1> 	cmp al, 0
  3390 00002B9F 7408                <1> 	je testtrue
  3391 00002BA1 38E0                <1> 	cmp al, ah
  3392 00002BA3 750C                <1> 	jne testfalse
  3393 00002BA5 43                  <1> 	inc ebx
  3394 00002BA6 46                  <1> 	inc esi
  3395 00002BA7 EBF0                <1> 	jmp retest
  3396                              <1> testtrue:
  3397 00002BA9 80FC00              <1> 	cmp ah, 0
  3398 00002BAC 7503                <1> 	jne testfalse
  3399 00002BAE B001                <1> 	mov al, 1
  3400 00002BB0 C3                  <1> 	ret
  3401                              <1> testfalse:
  3402 00002BB1 30C0                <1> 	xor al, al
  3403 00002BB3 C3                  <1> 	ret
  3404                              <1> 
  3405                              <1> optest:			;si=user bx=prog returns 1 in al if true
  3406 00002BB4 30C0                <1> 	xor al, al
  3407                              <1> opretest:
  3408 00002BB6 8A06                <1> 	mov al, [esi]
  3409 00002BB8 8A23                <1> 	mov ah, [ebx]
  3410 00002BBA 38E0                <1> 	cmp al, ah
  3411 00002BBC 7510                <1> 	jne optestfalse
  3412 00002BBE 80FC00              <1> 	cmp ah, 0
  3413 00002BC1 7404                <1> 	je optesttrue
  3414 00002BC3 43                  <1> 	inc ebx
  3415 00002BC4 46                  <1> 	inc esi
  3416 00002BC5 EBEF                <1> 	jmp opretest
  3417                              <1> optesttrue:
  3418 00002BC7 3C00                <1> 	cmp al, 0
  3419 00002BC9 7503                <1> 	jne optestfalse
  3420 00002BCB B001                <1> 	mov al, 1
  3421 00002BCD C3                  <1> 	ret
  3422                              <1> optestfalse:
  3423 00002BCE 30C0                <1> 	xor al, al
  3424 00002BD0 C3                  <1> 	ret
  3425                              <1> 
  3426                              <1> cndtest:			;si=user bx=prog cl=endchar returns 1 in al if true
  3427 00002BD1 30C0                <1> 	xor al, al
  3428 00002BD3 8A06                <1> cndretest:	mov al, [esi]
  3429 00002BD5 8A23                <1> 	mov ah, [ebx]
  3430 00002BD7 38CC                <1> 	cmp ah, cl
  3431 00002BD9 7408                <1> 	je cndtesttrue
  3432 00002BDB 38E0                <1> 	cmp al, ah
  3433 00002BDD 750B                <1> 	jne cndtestfalse
  3434 00002BDF 43                  <1> 	inc ebx
  3435 00002BE0 46                  <1> 	inc esi
  3436 00002BE1 EBF0                <1> 	jmp cndretest
  3437                              <1> cndtesttrue:
  3438 00002BE3 38C8                <1> 	cmp al, cl
  3439 00002BE5 7506                <1> 	jne cndtestalmost
  3440 00002BE7 B001                <1> 	mov al, 1
  3441 00002BE9 C3                  <1> 	ret
  3442                              <1> cndtestfalse:
  3443 00002BEA 30C0                <1> 	xor al, al
  3444 00002BEC C3                  <1> 	ret
  3445                              <1> cndtestalmost:
  3446 00002BED B002                <1> 	mov al, 2
  3447 00002BEF C3                  <1> 	ret
  3448                              <1> 	
  3449                              <1> array:				;arraystart in si, arrayend in bx, arrayseperator in cx
  3450                              <1> 		                ;ends if array seperator is found backwards after 0
  3451                              <1> 	arnxt:	      
  3452 00002BF0 88E8                <1> 		mov al, ch
  3453 00002BF2 88CC                <1> 		mov ah, cl        
  3454 00002BF4 663906              <1> 		cmp [esi], ax
  3455 00002BF7 744D                <1> 		je ardn
  3456 00002BF9 66390E              <1> 		cmp [esi], cx
  3457 00002BFC 7407                <1> 		je arfnd
  3458 00002BFE 46                  <1> 		inc esi
  3459 00002BFF 39DE                <1> 		cmp esi, ebx
  3460 00002C01 7343                <1> 		jae ardn
  3461 00002C03 EBEB                <1> 		jmp arnxt
  3462 00002C05 81C602000000        <1> 	arfnd: add esi, 2
  3463 00002C0B 891D[472C0000]      <1> 		mov [arbx], ebx
  3464 00002C11 890D[4B2C0000]      <1> 		mov [arcx], ecx
  3465 00002C17 E8C6F0FFFF          <1> 		call print
  3466 00002C1C 8935[4D2C0000]      <1> 		mov [arsi], esi
  3467 00002C22 BE[25730000]        <1> 		mov esi, line
  3468 00002C27 E8B6F0FFFF          <1> 		call print
  3469 00002C2C 8B1D[472C0000]      <1> 		mov ebx, [arbx]
  3470 00002C32 668B0D[4B2C0000]    <1> 		mov cx, [arcx]
  3471 00002C39 8B35[4D2C0000]      <1> 		mov esi, [arsi]
  3472 00002C3F 46                  <1> 		inc esi
  3473 00002C40 39DE                <1> 		cmp esi, ebx
  3474 00002C42 7302                <1> 		jae ardn
  3475 00002C44 EBAA                <1> 		jmp arnxt
  3476 00002C46 C3                  <1> 	ardn:	ret
  3477 00002C47 00000000            <1> arbx:	dw 0,0
  3478 00002C4B 0000                <1> arcx:	db 0,0
  3479 00002C4D 00000000            <1> arsi:	dw 0,0
  3480                              <1> 
  3481                              <1> clearbuffer:
  3482 00002C51 BE[BAB50000]        <1> 	mov esi, buf2
  3483 00002C56 B030                <1> 	mov al, '0'
  3484 00002C58 81FE[CEB50000]      <1> clearbuf: cmp esi, numbuf
  3485 00002C5E 7305                <1> 	jae doneclearbuff
  3486 00002C60 8806                <1> 	mov [esi], al
  3487 00002C62 46                  <1> 	inc esi
  3488 00002C63 EBF3                <1> 	jmp clearbuf
  3489                              <1> doneclearbuff: 
  3490 00002C65 C3                  <1> 		ret
  3491                              <1> 
  3492                              <1> convert:
  3493 00002C66 4E                  <1> 	dec esi
  3494 00002C67 89F3                <1> 	mov ebx, esi		;place to convert into must be in esi, number to convert must be in ecx
  3495                              <1> .lp:
  3496 00002C69 89DE                <1> 	mov esi, ebx
  3497 00002C6B 81EE09000000        <1> 	sub esi, 9
  3498 00002C71 81F900CA9A3B        <1> 	cmp ecx, 1000000000
  3499 00002C77 720A                <1> 	jb .8
  3500 00002C79 81E900CA9A3B        <1> 	sub ecx, 1000000000
  3501 00002C7F FE06                <1> 	inc byte [esi]
  3502 00002C81 EBE6                <1> 	jmp .lp
  3503 00002C83 46                  <1> .8:	inc esi
  3504 00002C84 81F900E1F505        <1> 	cmp ecx, 100000000
  3505 00002C8A 720A                <1> 	jb .7
  3506 00002C8C 81E900E1F505        <1> 	sub ecx, 100000000
  3507 00002C92 FE06                <1> 	inc byte [esi]
  3508 00002C94 EBD3                <1> 	jmp .lp
  3509 00002C96 46                  <1> .7:	inc esi
  3510 00002C97 81F980969800        <1> 	cmp ecx, 10000000
  3511 00002C9D 720A                <1> 	jb .6
  3512 00002C9F 81E980969800        <1> 	sub ecx, 10000000
  3513 00002CA5 FE06                <1> 	inc byte [esi]
  3514 00002CA7 EBC0                <1> 	jmp .lp
  3515 00002CA9 46                  <1> .6:	inc esi
  3516 00002CAA 81F940420F00        <1> 	cmp ecx, 1000000
  3517 00002CB0 720A                <1> 	jb .5
  3518 00002CB2 81E940420F00        <1> 	sub ecx, 1000000
  3519 00002CB8 FE06                <1> 	inc byte [esi]
  3520 00002CBA EBAD                <1> 	jmp .lp
  3521 00002CBC 46                  <1> .5:	inc esi
  3522 00002CBD 81F9A0860100        <1> 	cmp ecx, 100000
  3523 00002CC3 720A                <1> 	jb .4
  3524 00002CC5 81E9A0860100        <1> 	sub ecx, 100000
  3525 00002CCB FE06                <1> 	inc byte [esi]
  3526 00002CCD EB9A                <1> 	jmp .lp
  3527 00002CCF 46                  <1> .4:	inc esi
  3528 00002CD0 81F910270000        <1> 	cmp ecx, 10000
  3529 00002CD6 720A                <1> 	jb .3
  3530 00002CD8 81E910270000        <1> 	sub ecx, 10000
  3531 00002CDE FE06                <1> 	inc byte [esi]
  3532 00002CE0 EB87                <1> 	jmp .lp
  3533 00002CE2 46                  <1> .3:	inc esi
  3534 00002CE3 81F9E8030000        <1> 	cmp ecx, 1000
  3535 00002CE9 720D                <1> 	jb .2
  3536 00002CEB 81E9E8030000        <1> 	sub ecx, 1000
  3537 00002CF1 FE06                <1> 	inc byte [esi]
  3538 00002CF3 E971FFFFFF          <1> 	jmp .lp
  3539 00002CF8 46                  <1> .2:	inc esi
  3540 00002CF9 81F964000000        <1> 	cmp ecx, 100
  3541 00002CFF 720D                <1> 	jb .1
  3542 00002D01 81E964000000        <1> 	sub ecx, 100
  3543 00002D07 FE06                <1> 	inc byte [esi]
  3544 00002D09 E95BFFFFFF          <1> 	jmp .lp
  3545 00002D0E 46                  <1> .1:	inc esi
  3546 00002D0F 81F90A000000        <1> 	cmp ecx, 10
  3547 00002D15 720D                <1> 	jb .0
  3548 00002D17 81E90A000000        <1> 	sub ecx, 10
  3549 00002D1D FE06                <1> 	inc byte [esi]
  3550 00002D1F E945FFFFFF          <1> 	jmp .lp
  3551 00002D24 46                  <1> .0:	inc esi
  3552 00002D25 81F901000000        <1> 	cmp ecx, 1
  3553 00002D2B 720D                <1> 	jb .dn
  3554 00002D2D 81E901000000        <1> 	sub ecx, 1
  3555 00002D33 FE06                <1> 	inc byte [esi]
  3556 00002D35 E92FFFFFFF          <1> 	jmp .lp
  3557                              <1> .dn:
  3558 00002D3A C3                  <1> 	ret
  3559                              <1> 
  3560                              <1> 	
  3561                              <1> 
  3562 00002D3B 00<rept>            <1> hexnumber times 8 db 0
  3563 00002D43 202000              <1> hexnumberend db "  ",0
  3564                              <1> 
  3565                              <1> converthex:
  3566                              <1> .clear:	;place to convert to in esi, end of buffer in edi number in ecx
  3567 00002D46 56                  <1> 	push esi
  3568 00002D47 B030                <1> 	mov al, "0"
  3569 00002D49 39FE                <1> .clearlp: cmp esi, edi
  3570 00002D4B 7305                <1> 	jae .doneclear
  3571 00002D4D 8806                <1> 	mov [esi], al
  3572 00002D4F 46                  <1> 	inc esi
  3573 00002D50 EBF7                <1> 	jmp .clearlp
  3574                              <1> .doneclear:
  3575 00002D52 81EE02000000        <1> 	sub esi, 2
  3576 00002D58 89C8                <1> 	mov eax, ecx
  3577                              <1> .loop:
  3578 00002D5A 30FF                <1> 	xor bh, bh
  3579 00002D5C 88C3                <1> 	mov bl, al
  3580 00002D5E 66C1E304            <1> 	shl bx, 4
  3581 00002D62 C0EB04              <1> 	shr bl, 4
  3582 00002D65 86DF                <1> 	xchg bl, bh ;they are backwards
  3583 00002D67 80C330              <1> 	add bl, 48
  3584 00002D6A 80FB39              <1> 	cmp bl, "9"
  3585 00002D6D 7609                <1> 	jbe .goodbl
  3586 00002D6F 80EB30              <1> 	sub bl, 48
  3587 00002D72 80EB0A              <1> 	sub bl, 0xA
  3588 00002D75 80C341              <1> 	add bl, "A"
  3589                              <1> .goodbl:
  3590 00002D78 80C730              <1> 	add bh, 48
  3591 00002D7B 80FF39              <1> 	cmp bh, "9"
  3592 00002D7E 7609                <1> 	jbe .goodbh
  3593 00002D80 80EF30              <1> 	sub bh, 48
  3594 00002D83 80EF0A              <1> 	sub bh, 0xA
  3595 00002D86 80C741              <1> 	add bh, "A"
  3596                              <1> .goodbh:
  3597 00002D89 C1E808              <1> 	shr eax, 8
  3598 00002D8C 66891E              <1> 	mov [esi], bx
  3599 00002D8F 81EE02000000        <1> 	sub esi, 2
  3600 00002D95 3B3424              <1> 	cmp esi, [esp]
  3601 00002D98 7207                <1> 	jb .done
  3602 00002D9A 3D00000000          <1> 	cmp eax, 0
  3603 00002D9F 75B9                <1> 	jne .loop
  3604                              <1> .done:
  3605 00002DA1 5E                  <1> 	pop esi
  3606 00002DA2 C3                  <1> 	ret
  3607                              <1> 	
  3608                              <1> 	
  3609 00002DA3 00                  <1> smallhex db 0
  3610 00002DA4 01                  <1> firsthexshown db 1
  3611                              <1> showhexsmall:
  3612 00002DA5 C605[A32D0000]01    <1> 	mov byte [smallhex], 1
  3613 00002DAC E808000000          <1> 	call showhex
  3614 00002DB1 C605[A32D0000]00    <1> 	mov byte [smallhex], 0
  3615 00002DB8 C3                  <1> 	ret
  3616                              <1> showhex:
  3617 00002DB9 60                  <1> 	pusha
  3618 00002DBA BE[3B2D0000]        <1> 	mov esi, hexnumber
  3619 00002DBF BF[432D0000]        <1> 	mov edi, hexnumberend
  3620 00002DC4 E87DFFFFFF          <1> 	call converthex
  3621 00002DC9 803D[A42D0000]01    <1> 	cmp byte [firsthexshown], 1
  3622 00002DD0 7503                <1> 	jne .show
  3623 00002DD2 6631D2              <1> 	xor dx, dx
  3624                              <1> .show:
  3625 00002DD5 803D[A42D0000]03    <1> 	cmp byte [firsthexshown], 3
  3626 00002DDC 750A                <1> 	jne .nonewhexline
  3627 00002DDE BE[25730000]        <1> 	mov esi, line
  3628 00002DE3 E8FAEEFFFF          <1> 	call print
  3629                              <1> .nonewhexline:
  3630 00002DE8 803D[A42D0000]04    <1> 	cmp byte [firsthexshown], 4
  3631 00002DEF 7527                <1> 	jne .notab
  3632 00002DF1 B1A0                <1> 	mov cl, 160
  3633 00002DF3 28D1                <1> 	sub cl, dl
  3634 00002DF5 C0E905              <1> 	shr cl, 5
  3635 00002DF8 C0E105              <1> 	shl cl, 5
  3636 00002DFB 80F900              <1> 	cmp cl, 0
  3637 00002DFE 750F                <1> 	jne .nonewline
  3638 00002E00 BE[25730000]        <1> 	mov esi, line
  3639 00002E05 E8D8EEFFFF          <1> 	call print
  3640 00002E0A E909000000          <1> 	jmp .notab
  3641                              <1> .nonewline:
  3642 00002E0F 80C20F              <1> 	add dl, 15
  3643 00002E12 C0EA04              <1> 	shr dl, 4
  3644 00002E15 C0E204              <1> 	shl dl, 4
  3645                              <1> .notab:
  3646 00002E18 BE[3B2D0000]        <1> 	mov esi, hexnumber
  3647 00002E1D 803D[A32D0000]01    <1> 	cmp byte [smallhex],1
  3648 00002E24 7506                <1> 	jne .nosmall
  3649 00002E26 81C606000000        <1> 	add esi, 6
  3650                              <1> .nosmall:
  3651 00002E2C 803D[A42D0000]05    <1> 	cmp byte [firsthexshown], 5
  3652 00002E33 750A                <1> 	jne .noquiet
  3653 00002E35 E896EEFFFF          <1> 	call printquiet
  3654 00002E3A E918000000          <1> 	jmp .donequiet
  3655                              <1> .noquiet:
  3656 00002E3F 803D[A42D0000]06    <1> 	cmp byte [firsthexshown], 6
  3657 00002E46 750A                <1> 	jne .normal
  3658 00002E48 E877EEFFFF          <1> 	call printhighlight
  3659 00002E4D E905000000          <1> 	jmp .donequiet
  3660                              <1> .normal:
  3661 00002E52 E88BEEFFFF          <1> 	call print
  3662                              <1> .donequiet:
  3663 00002E57 803D[A42D0000]02    <1> 	cmp byte [firsthexshown], 2
  3664 00002E5E 750A                <1> 	jne .shown
  3665 00002E60 BE[25730000]        <1> 	mov esi, line
  3666 00002E65 E878EEFFFF          <1> 	call print
  3667                              <1> .shown:
  3668 00002E6A C605[A42D0000]00    <1> 	mov byte [firsthexshown], 0
  3669 00002E71 61                  <1> 	popa
  3670 00002E72 C3                  <1> 	ret
  3671                              <1> 
  3672                              <1> 
  3673 00002E73 303030303030303030- <1> decnumber db "00000000000000"
  3674 00002E7C 3030303030          <1>
  3675 00002E81 2000                <1> decnumberend: db " ",0
  3676                              <1> 
  3677                              <1> showdec: ;;same as showhex, just uses decimal conversion
  3678 00002E83 60                  <1> 	pusha
  3679 00002E84 BF[732E0000]        <1> 	mov edi, decnumber
  3680 00002E89 BE[812E0000]        <1> 	mov esi, decnumberend
  3681                              <1> .clear:
  3682 00002E8E C60730              <1> 	mov byte [edi], '0'
  3683 00002E91 47                  <1> 	inc edi
  3684 00002E92 39F7                <1> 	cmp edi, esi
  3685 00002E94 72F8                <1> 	jb .clear
  3686 00002E96 BF[732E0000]        <1> 	mov edi, decnumber
  3687 00002E9B E8C6FDFFFF          <1> 	call convert
  3688 00002EA0 803D[A42D0000]01    <1> 	cmp byte [firsthexshown], 1
  3689 00002EA7 7503                <1> 	jne .show
  3690 00002EA9 6631D2              <1> 	xor dx, dx
  3691                              <1> .show:
  3692 00002EAC 803D[A42D0000]03    <1> 	cmp byte [firsthexshown], 3
  3693 00002EB3 750A                <1> 	jne .nonewdecline
  3694 00002EB5 BE[25730000]        <1> 	mov esi, line
  3695 00002EBA E823EEFFFF          <1> 	call print
  3696                              <1> .nonewdecline:
  3697 00002EBF 803D[A42D0000]04    <1> 	cmp byte [firsthexshown], 4
  3698 00002EC6 7527                <1> 	jne .notab
  3699 00002EC8 B1A0                <1> 	mov cl, 160
  3700 00002ECA 28D1                <1> 	sub cl, dl
  3701 00002ECC C0E905              <1> 	shr cl, 5
  3702 00002ECF C0E105              <1> 	shl cl, 5
  3703 00002ED2 80F900              <1> 	cmp cl, 0
  3704 00002ED5 750F                <1> 	jne .nonewline
  3705 00002ED7 BE[25730000]        <1> 	mov esi, line
  3706 00002EDC E801EEFFFF          <1> 	call print
  3707 00002EE1 E909000000          <1> 	jmp .notab
  3708                              <1> .nonewline:
  3709 00002EE6 80C20F              <1> 	add dl, 15
  3710 00002EE9 C0EA04              <1> 	shr dl, 4
  3711 00002EEC C0E204              <1> 	shl dl, 4
  3712                              <1> .notab:
  3713 00002EEF BE[732E0000]        <1> 	mov esi, decnumber
  3714 00002EF4 4E                  <1> 	dec esi
  3715                              <1> .sifind:
  3716 00002EF5 46                  <1> 	inc esi
  3717 00002EF6 803E30              <1> 	cmp byte [esi], '0'
  3718 00002EF9 74FA                <1> 	je .sifind
  3719 00002EFB E8E2EDFFFF          <1> 	call print
  3720 00002F00 803D[A42D0000]02    <1> 	cmp byte [firsthexshown], 2
  3721 00002F07 750A                <1> 	jne .shown
  3722 00002F09 BE[25730000]        <1> 	mov esi, line
  3723 00002F0E E8CFEDFFFF          <1> 	call print
  3724                              <1> .shown:
  3725 00002F13 C605[A42D0000]00    <1> 	mov byte [firsthexshown], 0
  3726 00002F1A 61                  <1> 	popa
  3727 00002F1B C3                  <1> 	ret
  3728                              <1> 	
  3729                              <1> cnvrthextxt:
  3730 00002F1C 31C9                <1> 	xor ecx, ecx
  3731 00002F1E 31C0                <1> 	xor eax, eax
  3732 00002F20 31D2                <1> 	xor edx, edx
  3733 00002F22 31DB                <1> 	xor ebx, ebx
  3734 00002F24 4E                  <1> 	dec esi
  3735                              <1> .end:
  3736 00002F25 46                  <1> 	inc esi
  3737 00002F26 8A06                <1> 	mov al, [esi]
  3738 00002F28 3C00                <1> 	cmp al, 0
  3739 00002F2A 75F9                <1> 	jne .end
  3740                              <1> .loop:
  3741 00002F2C 4E                  <1> 	dec esi
  3742 00002F2D 8A06                <1> 	mov al, [esi]
  3743 00002F2F 3C41                <1> 	cmp al, "A"
  3744 00002F31 7328                <1> 	jae .char
  3745 00002F33 2C30                <1> 	sub al, 48
  3746 00002F35 3C10                <1> 	cmp al, 16
  3747 00002F37 7721                <1> 	ja .done
  3748                              <1> .donechar:
  3749 00002F39 81FA00000000        <1> 	cmp edx, 0
  3750 00002F3F 740E                <1> 	je .noshl
  3751 00002F41 89D3                <1> 	mov ebx, edx
  3752                              <1> .shl:
  3753 00002F43 C1E004              <1> 	shl eax, 4
  3754 00002F46 4B                  <1> 	dec ebx
  3755 00002F47 81FB00000000        <1> 	cmp ebx, 0
  3756 00002F4D 75F4                <1> 	jne .shl
  3757                              <1> .noshl:
  3758 00002F4F 42                  <1> 	inc edx
  3759 00002F50 01C1                <1> 	add ecx, eax
  3760 00002F52 81FA08000000        <1> 	cmp edx, 8
  3761 00002F58 72D2                <1> 	jb .loop
  3762                              <1> .done:
  3763 00002F5A C3                  <1> 	ret
  3764                              <1> .char:
  3765 00002F5B 3C46                <1> 	cmp al, "F"
  3766 00002F5D 77FB                <1> 	ja .done
  3767 00002F5F 2C41                <1> 	sub al, "A"
  3768 00002F61 040A                <1> 	add al, 0xA
  3769 00002F63 EBD4                <1> 	jmp .donechar
  3770                              <1> 	
  3771                              <1> 	
  3772                              <1> cnvrttxt: 
  3773 00002F65 31C9                <1> 	xor ecx, ecx
  3774 00002F67 31C0                <1> 	xor eax, eax
  3775 00002F69 31D2                <1> 	xor edx, edx
  3776 00002F6B 31DB                <1> 	xor ebx, ebx
  3777 00002F6D 4E                  <1> 	dec esi
  3778                              <1> .lp:
  3779 00002F6E 46                  <1> 	inc esi
  3780 00002F6F 8A06                <1> 	mov al, [esi]
  3781 00002F71 3C00                <1> 	cmp al, 0
  3782 00002F73 75F9                <1> 	jne .lp
  3783 00002F75 4E                  <1> 	dec esi
  3784 00002F76 8A06                <1> 	mov al, [esi]
  3785 00002F78 3C2E                <1> 	cmp al, '.'
  3786 00002F7A 7503                <1> 	jne .dot
  3787 00002F7C 46                  <1> 	inc esi
  3788 00002F7D EBEF                <1> 	jmp .lp
  3789                              <1> .dot:
  3790 00002F7F 3C20                <1> 	cmp al, ' '
  3791 00002F81 7404                <1> 	je .zero
  3792 00002F83 3C30                <1> 	cmp al, '0'
  3793 00002F85 7504                <1> 	jne .txtlp
  3794                              <1> .zero: 
  3795 00002F87 39FE                <1> 		cmp esi, edi
  3796 00002F89 7458                <1> 		je .done
  3797                              <1> .txtlp:
  3798 00002F8B 31C0                <1> 	xor eax, eax
  3799 00002F8D 8A06                <1> 	mov al, [esi]
  3800 00002F8F 3C3D                <1> 	cmp al, '='
  3801 00002F91 7450                <1> 	je .done
  3802 00002F93 3C30                <1> 	cmp al, 48
  3803 00002F95 724C                <1> 	jb .done
  3804 00002F97 3C23                <1> 	cmp al, '#'
  3805 00002F99 7448                <1> 	je .done
  3806 00002F9B 39FE                <1> 	cmp esi, edi
  3807 00002F9D 7244                <1> 	jb .done
  3808 00002F9F 81F900000000        <1> 	cmp ecx, 0
  3809 00002FA5 7708                <1> 	ja .exp
  3810 00002FA7 2C30                <1> .noexp:	sub al, 48
  3811 00002FA9 01C2                <1> 	add edx, eax
  3812 00002FAB 4E                  <1> 	dec esi
  3813 00002FAC 41                  <1> 	inc ecx
  3814 00002FAD EBDC                <1> 	jmp .txtlp
  3815 00002FAF 81F900000000        <1> .exp:	cmp ecx, 0
  3816 00002FB5 74F0                <1> 	je .noexp
  3817 00002FB7 2C30                <1> 	sub al, 48
  3818 00002FB9 51                  <1> 	push ecx
  3819 00002FBA 89C3                <1> .expmul:	mov ebx, eax
  3820 00002FBC 01D8                <1> 	add eax, ebx
  3821 00002FBE 01D8                <1> 	add eax, ebx
  3822 00002FC0 01D8                <1> 	add eax, ebx
  3823 00002FC2 01D8                <1> 	add eax, ebx
  3824 00002FC4 01D8                <1> 	add eax, ebx
  3825 00002FC6 01D8                <1> 	add eax, ebx
  3826 00002FC8 01D8                <1> 	add eax, ebx
  3827 00002FCA 01D8                <1> 	add eax, ebx
  3828 00002FCC 01D8                <1> 	add eax, ebx
  3829 00002FCE 81E901000000        <1> 	sub ecx, 1
  3830 00002FD4 81F900000000        <1> 	cmp ecx, 0
  3831 00002FDA 77DE                <1> 	ja .expmul
  3832 00002FDC 01C2                <1> 	add edx, eax
  3833 00002FDE 59                  <1> 	pop ecx
  3834 00002FDF 4E                  <1> 	dec esi
  3835 00002FE0 41                  <1> 	inc ecx
  3836 00002FE1 EBA8                <1> 	jmp .txtlp
  3837 00002FE3 89D1                <1> .done: mov ecx, edx
  3838 00002FE5 C3                  <1> 	ret
  3839                                      %include "source/programs.asm"
  3840 00002FE6 FF2C                <1> filetypes db 255,44
  3841                              <1> progstart:		;programs start here
  3842                              <1> indexfiles:
  3843 00002FE8 BE[E82F0000]        <1> 	mov esi, progstart
  3844 00002FED BB[3A970000]        <1> 	mov ebx, fileindex
  3845 00002FF2 BF[E82F0000]        <1> 	mov edi, progstart
  3846 00002FF7 81EF02000000        <1> 	sub edi, 2
  3847                              <1> indexloop:
  3848 00002FFD 668B0E              <1> 	mov cx, [esi]
  3849                              <1> 	indexloop2:
  3850 00003000 663B0F              <1> 		cmp cx, [edi]
  3851 00003003 7424                <1> 		je indexloop2done
  3852 00003005 81EF02000000        <1> 		sub edi, 2
  3853 0000300B 81FF[E62F0000]      <1> 		cmp edi, filetypes
  3854 00003011 73ED                <1> 		jae indexloop2
  3855 00003013 BF[E82F0000]        <1> 	mov edi, progstart
  3856 00003018 81EF02000000        <1> 	sub edi, 2
  3857 0000301E 46                  <1> 	inc esi
  3858 0000301F 81FE[37470000]      <1> 	cmp esi, batchprogend
  3859 00003025 734E                <1> 	jae indexloopdone
  3860 00003027 EBD4                <1> 	jmp indexloop
  3861                              <1> indexloop2done:
  3862 00003029 66890B              <1> 	mov [ebx], cx
  3863 0000302C 81C302000000        <1> 	add ebx, 2
  3864 00003032 81C602000000        <1> 	add esi, 2
  3865                              <1> 	nameindex:
  3866 00003038 8A0E                <1> 		mov cl, [esi]
  3867 0000303A 80F900              <1> 		cmp cl, 0
  3868 0000303D 7406                <1> 		je nameindexdone
  3869 0000303F 880B                <1> 		mov [ebx], cl
  3870 00003041 46                  <1> 		inc esi
  3871 00003042 43                  <1> 		inc ebx
  3872 00003043 EBF3                <1> 		jmp nameindex
  3873                              <1> 	nameindexdone:
  3874 00003045 43                  <1> 		inc ebx
  3875 00003046 66C7030000          <1> 		mov word [ebx], 0
  3876 0000304B 81C302000000        <1> 		add ebx, 2
  3877 00003051 46                  <1> 		inc esi
  3878 00003052 8933                <1> 		mov [ebx], esi
  3879 00003054 81C304000000        <1> 		add ebx, 4
  3880 0000305A 66C7030000          <1> 		mov word [ebx], 0
  3881 0000305F 81C302000000        <1> 		add ebx, 2
  3882 00003065 81FB[3A9B0000]      <1> 		cmp ebx, fileindexend
  3883 0000306B 7308                <1> 		jae indexloopdone
  3884 0000306D 81C601000000        <1> 		add esi, 1
  3885 00003073 EB88                <1> 		jmp indexloop
  3886 00003075 C605[7D300000]01    <1> indexloopdone: 	mov byte [indexdone], 1
  3887 0000307C C3                  <1> 		ret
  3888                              <1> 
  3889 0000307D 00                  <1> indexdone db 0
  3890                              <1> %include 'source/programs/_comment.asm' ;#
  3891 0000307E FF2C2300            <2> 	db 255,44,"#",0	;this lets you rem stuff
  3892 00003082 C3                  <2> 	ret 
  3893                              <1> %include 'source/programs/_math.asm' ;!
  3894 00003083 FF2C2100            <2> db 255,44,"!",0
  3895                              <2> 	num:	
  3896 00003087 E8C5FBFFFF          <2> 		call clearbuffer
  3897 0000308C C605[0D330000]00    <2> 		mov byte [decimal], 0
  3898 00003093 C605[0E330000]00    <2> 		mov byte [decimal2], 0
  3899 0000309A 8B35[922B0000]      <2> 		mov esi, [currentcommandloc]
  3900 000030A0 31C0                <2> 		xor eax, eax
  3901 000030A2 31C9                <2> 		xor ecx, ecx
  3902 000030A4 31DB                <2> 		xor ebx, ebx
  3903 000030A6 8A06                <2> 	num2:	mov al, [esi]
  3904 000030A8 3C2B                <2> 		cmp al, '+'
  3905 000030AA 741B                <2> 		je operatorfound
  3906 000030AC 3C2D                <2> 		cmp al, '-'
  3907 000030AE 7417                <2> 		je operatorfound
  3908 000030B0 3C2A                <2> 		cmp al, '*'
  3909 000030B2 7413                <2> 		je operatorfound
  3910 000030B4 3C2F                <2> 		cmp al, '/'
  3911 000030B6 740F                <2> 		je operatorfound
  3912 000030B8 3C5E                <2> 		cmp al, '^'
  3913 000030BA 740B                <2> 		je operatorfound
  3914 000030BC 46                  <2> 		inc esi
  3915 000030BD 3C00                <2> 		cmp al, 0
  3916 000030BF 0F8420F8FFFF        <2> 		je near nwcmd
  3917 000030C5 EBDF                <2> 		jmp num2
  3918 000030C7 50                  <2> 	operatorfound: push eax
  3919 000030C8 30E4                <2> 		xor ah, ah
  3920 000030CA 8826                <2> 		mov [esi], ah
  3921 000030CC 89F7                <2> 		mov edi, esi
  3922 000030CE 46                  <2> 		inc esi
  3923 000030CF 8A06                <2> 		mov al, [esi]
  3924 000030D1 3C25                <2> 		cmp al, '%'
  3925 000030D3 0F8462000000        <2> 		je near resultnum1
  3926                              <2> 	varnum2: 
  3927 000030D9 57                  <2> 		push edi
  3928 000030DA E8A4000000          <2> 		call checkdecimal
  3929 000030DF 5F                  <2> 		pop edi
  3930 000030E0 E880FEFFFF          <2> 		call cnvrttxt
  3931                              <2> 	vrnm2:
  3932 000030E5 89CB                <2> 		mov ebx, ecx
  3933 000030E7 53                  <2> 		push ebx
  3934 000030E8 E864FBFFFF          <2> 		call clearbuffer
  3935 000030ED 8B35[922B0000]      <2> 		mov esi, [currentcommandloc]
  3936 000030F3 89F7                <2> 		mov edi, esi
  3937 000030F5 46                  <2> 		inc esi
  3938 000030F6 8A06                <2> 		mov al, [esi]
  3939 000030F8 3C25                <2> 		cmp al, '%'
  3940 000030FA 0F844F000000        <2> 		je near resultnum2
  3941                              <2> 	varnum4: 
  3942 00003100 57                  <2> 		push edi
  3943 00003101 E869000000          <2> 		call checkdecimal2
  3944 00003106 5F                  <2> 		pop edi
  3945 00003107 E859FEFFFF          <2> 		call cnvrttxt
  3946                              <2> 	vrnm4:
  3947 0000310C 5B                  <2> 		pop ebx
  3948 0000310D 58                  <2> 		pop eax
  3949 0000310E 3C2B                <2> 		cmp al, '+'
  3950 00003110 0F849B000000        <2> 		je near plusnum
  3951 00003116 3C2D                <2> 		cmp al, '-'
  3952 00003118 0F849F000000        <2> 		je near subnum
  3953 0000311E 3C2A                <2> 		cmp al, '*'
  3954 00003120 0F84A3000000        <2> 		je near mulnum
  3955 00003126 3C2F                <2> 		cmp al, '/'
  3956 00003128 0F84B1000000        <2> 		je near divnum
  3957 0000312E 3C5E                <2> 		cmp al, '^'
  3958 00003130 0F84CE000000        <2> 		je near expnum
  3959 00003136 E9AAF7FFFF          <2> 		jmp nwcmd
  3960                              <2> 	resultnum1:
  3961 0000313B 8A0D[0F330000]      <2> 		mov cl, [decimalresult]
  3962 00003141 880D[0D330000]      <2> 		mov [decimal], cl
  3963 00003147 8B0D[10330000]      <2> 		mov ecx, [result]
  3964 0000314D EB96                <2> 		jmp vrnm2
  3965                              <2> 	resultnum2:
  3966 0000314F 8A0D[0D330000]      <2> 		mov cl, [decimal]
  3967 00003155 880D[0E330000]      <2> 		mov [decimal2], cl
  3968 0000315B 8A0D[0F330000]      <2> 		mov cl, [decimalresult]
  3969 00003161 880D[0D330000]      <2> 		mov [decimal], cl
  3970 00003167 8B0D[10330000]      <2> 		mov ecx, [result]
  3971 0000316D EB9D                <2> 		jmp vrnm4
  3972                              <2> 	checkdecimal2:
  3973 0000316F 8A25[0D330000]      <2> 		mov ah, [decimal]
  3974 00003175 8825[0E330000]      <2> 		mov [decimal2], ah
  3975 0000317B 30E4                <2> 		xor ah, ah
  3976 0000317D 8825[0D330000]      <2> 		mov [decimal], ah
  3977                              <2> 	checkdecimal:
  3978 00003183 89F7                <2> 		mov edi, esi
  3979                              <2> 	chkdec1:
  3980 00003185 8A07                <2> 		mov al, [edi]
  3981 00003187 3C2E                <2> 		cmp al, '.'
  3982 00003189 0F840B000000        <2> 		je near fnddec
  3983 0000318F 3C00                <2> 		cmp al, 0
  3984 00003191 0F8419000000        <2> 		je near nodecimal
  3985 00003197 47                  <2> 		inc edi
  3986 00003198 EBEB                <2> 		jmp chkdec1
  3987                              <2> 	fnddec:
  3988 0000319A 8A4701              <2> 		mov al, [edi + 1]
  3989 0000319D 8807                <2> 		mov [edi], al
  3990 0000319F 3C00                <2> 		cmp al, 0
  3991 000031A1 0F8409000000        <2> 		je near nodecimal
  3992 000031A7 FE05[0D330000]      <2> 		inc byte [decimal]
  3993 000031AD 47                  <2> 		inc edi
  3994 000031AE EBEA                <2> 		jmp fnddec
  3995                              <2> 	nodecimal:
  3996 000031B0 C3                  <2> 		ret
  3997                              <2> 	plusnum:
  3998 000031B1 E815010000          <2> 		call decaddfix
  3999 000031B6 01D9                <2> 		add ecx, ebx
  4000 000031B8 E98A000000          <2> 		jmp retnum
  4001                              <2> 	subnum:
  4002 000031BD E809010000          <2> 		call decaddfix
  4003 000031C2 29D9                <2> 		sub ecx, ebx
  4004 000031C4 E97E000000          <2> 		jmp retnum
  4005                              <2> 	mulnum:
  4006 000031C9 A0[0E330000]        <2> 		mov al, [decimal2]
  4007 000031CE 0005[0D330000]      <2> 		add [decimal], al
  4008 000031D4 89C8                <2> 		mov eax, ecx
  4009 000031D6 F7E3                <2> 		mul ebx
  4010 000031D8 89C1                <2> 		mov ecx, eax
  4011 000031DA E968000000          <2> 		jmp retnum
  4012                              <2> 	divnum:
  4013 000031DF E8E7000000          <2> 		call decaddfix
  4014 000031E4 30C0                <2> 		xor al, al
  4015 000031E6 A2[0D330000]        <2> 		mov [decimal], al
  4016 000031EB 31D2                <2> 		xor edx, edx
  4017 000031ED 89C8                <2> 		mov eax, ecx
  4018 000031EF 81FB00000000        <2> 		cmp ebx, 0
  4019 000031F5 0F844C000000        <2> 		je near retnum
  4020 000031FB F7F3                <2> 		div ebx
  4021 000031FD 89C1                <2> 		mov ecx, eax
  4022 000031FF E943000000          <2> 		jmp retnum
  4023                              <2> 	expnum:
  4024 00003204 8A15[0D330000]      <2> 		mov dl, [decimal]
  4025 0000320A 8815[0E330000]      <2> 		mov [decimal2], dl
  4026 00003210 31D2                <2> 		xor edx, edx
  4027 00003212 89C8                <2> 		mov eax, ecx
  4028 00003214 89D9                <2> 		mov ecx, ebx
  4029 00003216 89C3                <2> 		mov ebx, eax
  4030 00003218 81F900000000        <2> 		cmp ecx, 0
  4031 0000321E 7422                <2> 		je noexpnum
  4032 00003220 49                  <2> 		dec ecx
  4033 00003221 81F900000000        <2> 		cmp ecx, 0
  4034 00003227 7412                <2> 		je noexpnumlp
  4035 00003229 F7E3                <2> 	expnumlp: mul ebx
  4036 0000322B 8A15[0E330000]      <2> 		mov dl, [decimal2]
  4037 00003231 0015[0D330000]      <2> 		add [decimal], dl
  4038 00003237 31D2                <2> 		xor edx, edx
  4039 00003239 E2EE                <2> 		loop expnumlp
  4040                              <2> 	noexpnumlp:
  4041 0000323B 89C1                <2> 		mov ecx, eax
  4042 0000323D E905000000          <2> 		jmp retnum
  4043                              <2> 	noexpnum:
  4044 00003242 B901000000          <2> 		mov ecx, 1
  4045                              <2> 	retnum: 
  4046 00003247 BE[CEB50000]        <2> 		mov esi, numbuf
  4047 0000324C 890D[10330000]      <2> 		mov [result], ecx
  4048 00003252 E80FFAFFFF          <2> 		call convert
  4049 00003257 BE[CEB50000]        <2> 		mov esi, numbuf
  4050 0000325C 8A25[0D330000]      <2> 		mov ah, [decimal]
  4051 00003262 8825[0F330000]      <2> 		mov [decimalresult], ah
  4052 00003268 80FC00              <2> 		cmp ah, 0
  4053 0000326B 0F8425000000        <2> 		je near noputdecimal
  4054                              <2> 	putdecimal:
  4055 00003271 4E                  <2> 		dec esi
  4056 00003272 FECC                <2> 		dec ah
  4057 00003274 80FC00              <2> 		cmp ah, 0
  4058 00003277 0F87F4FFFFFF        <2> 		ja near putdecimal
  4059 0000327D 4E                  <2> 		dec esi
  4060 0000327E 8A06                <2> 		mov al, [esi]
  4061 00003280 C6062E              <2> 		mov byte [esi], '.'
  4062                              <2> 	decputloop:
  4063 00003283 4E                  <2> 		dec esi
  4064 00003284 8A26                <2> 		mov ah, [esi]
  4065 00003286 8806                <2> 		mov [esi], al
  4066 00003288 88E0                <2> 		mov al, ah
  4067 0000328A 81FE[BAB50000]      <2> 		cmp esi, buf2
  4068 00003290 0F87EDFFFFFF        <2> 		ja near decputloop
  4069                              <2> 	noputdecimal:
  4070 00003296 BE[BAB50000]        <2> 		mov esi, buf2
  4071 0000329B E809000000          <2> 		call chkadd
  4072 000032A0 E940F6FFFF          <2> 		jmp nwcmd
  4073 000032A5 00000000            <2> edxnumbuf dw 0,0
  4074 000032A9 8A06                <2> 	chkadd: mov al, [esi]
  4075 000032AB 3C30                <2> 		cmp al, '0'
  4076 000032AD 750C                <2> 		jne dnadd
  4077 000032AF 46                  <2> 		inc esi
  4078 000032B0 81FE[CEB50000]      <2> 		cmp esi, numbuf
  4079 000032B6 7402                <2> 		je dnaddm1
  4080 000032B8 EBEF                <2> 		jmp chkadd
  4081 000032BA 4E                  <2> 	dnaddm1: dec esi
  4082 000032BB E822EAFFFF          <2> 	dnadd:	call print
  4083 000032C0 BE[25730000]        <2> 		mov esi, line
  4084 000032C5 E818EAFFFF          <2> 		call print
  4085 000032CA C3                  <2> 		ret
  4086                              <2> 		
  4087                              <2> 	decaddfix:
  4088 000032CB A0[0E330000]        <2> 		mov al, [decimal2]
  4089 000032D0 8A25[0D330000]      <2> 		mov ah, [decimal]
  4090 000032D6 38E0                <2> 		cmp al, ah
  4091 000032D8 7432                <2> 		je gooddecadd
  4092 000032DA 38E0                <2> 		cmp al, ah
  4093 000032DC 721A                <2> 		jb lowdecadd
  4094                              <2> 	highdecadd:
  4095 000032DE FEC4                <2> 		inc ah
  4096 000032E0 89CA                <2> 		mov edx, ecx
  4097 000032E2 C1E103              <2> 		shl ecx, 3
  4098 000032E5 01D1                <2> 		add ecx, edx
  4099 000032E7 01D1                <2> 		add ecx, edx
  4100 000032E9 38E0                <2> 		cmp al, ah
  4101 000032EB 77F1                <2> 		ja highdecadd
  4102 000032ED 8825[0D330000]      <2> 		mov [decimal], ah
  4103 000032F3 E914000000          <2> 		jmp gooddecadd
  4104                              <2> 	lowdecadd:
  4105 000032F8 FEC0                <2> 		inc al
  4106 000032FA 89DA                <2> 		mov edx, ebx
  4107 000032FC C1E303              <2> 		shl ebx, 3
  4108 000032FF 01D3                <2> 		add ebx, edx
  4109 00003301 01D3                <2> 		add ebx, edx
  4110 00003303 38E0                <2> 		cmp al, ah
  4111 00003305 72F1                <2> 		jb lowdecadd
  4112 00003307 A2[0D330000]        <2> 		mov [decimal], al
  4113                              <2> 	gooddecadd:
  4114 0000330C C3                  <2> 		ret
  4115                              <2> 		
  4116 0000330D 00                  <2> decimal db 0
  4117 0000330E 00                  <2> decimal2 db 0
  4118 0000330F 00                  <2> decimalresult db 0
  4119 00003310 00000000            <2> result dd 0
  4120                              <1> %include 'source/programs/_variables.asm' ;% and $
  4121 00003314 FF2C2500            <2> db 255,44,"%",0
  4122                              <2> 	ans:
  4123 00003318 BE[BAB50000]        <2> 		mov esi, buf2
  4124 0000331D E887FFFFFF          <2> 		call chkadd
  4125 00003322 C3                  <2> 		ret
  4126                              <2> 		
  4127 00003323 FF2C2400            <2> db 255,44,"$",0
  4128 00003327 8B35[922B0000]      <2> var: mov esi, [currentcommandloc]
  4129 0000332D BB[BA9D0000]        <2> 	mov ebx, variables
  4130 00003332 8A06                <2> lkeq:	mov al, [esi]
  4131 00003334 3C3D                <2> 	cmp al, '='
  4132 00003336 741B                <2> 	je eqfnd	;is there an '=' sign?
  4133 00003338 3C00                <2> 	cmp al, 0
  4134 0000333A 7403                <2> 	je echovars
  4135 0000333C 46                  <2> 	inc esi
  4136 0000333D EBF3                <2> 	jmp lkeq
  4137 0000333F BE[BA9D0000]        <2> echovars: mov esi, variables
  4138 00003344 BB[BAAD0000]        <2> 	mov ebx, varend
  4139 00003349 B105                <2> 	mov cl, 5
  4140 0000334B B504                <2> 	mov ch, 4
  4141 0000334D E89EF8FFFF          <2> 	call array
  4142 00003352 C3                  <2> 	ret
  4143 00003353 46                  <2> eqfnd:	inc esi
  4144 00003354 8A06                <2> 	mov al, [esi]
  4145 00003356 3C00                <2> 	cmp al, 0
  4146 00003358 7410                <2> 	je readvar
  4147 0000335A 8B35[922B0000]      <2> 	mov esi, [currentcommandloc]
  4148 00003360 BB[BA9D0000]        <2> 	mov ebx, variables
  4149 00003365 E919000000          <2> 	jmp seek
  4150                              <2> readvar:
  4151 0000336A B00A                <2> 	mov al, 10
  4152 0000336C 66BB0700            <2> 	mov bx, 7
  4153 00003370 C605[2B210000]00    <2> 	mov byte [commandedit], 0
  4154 00003377 BF[BAB50000]        <2> 	mov edi, buftxtend
  4155 0000337C E849EAFFFF          <2> 	call rdprint
  4156 00003381 EBA4                <2> 	jmp var
  4157 00003383 668B03              <2> seek:	mov ax, [ebx]
  4158 00003386 B105                <2> 	mov cl, 5
  4159 00003388 B504                <2> 	mov ch, 4
  4160 0000338A 663D0000            <2> 	cmp ax, 0
  4161 0000338E 0F845B000000        <2> 	je near save
  4162 00003394 6639C8              <2> 	cmp ax, cx
  4163 00003397 7403                <2> 	je skfnd
  4164 00003399 43                  <2> 	inc ebx
  4165 0000339A EBE7                <2> 	jmp seek
  4166 0000339C 8B35[922B0000]      <2> skfnd:	mov esi, [currentcommandloc]
  4167 000033A2 46                  <2> 	inc esi
  4168 000033A3 81C302000000        <2> 	add ebx, 2
  4169 000033A9 89DF                <2> 	mov edi, ebx
  4170 000033AB B13D                <2> 	mov cl, '='
  4171 000033AD E81FF8FFFF          <2> 	call cndtest
  4172 000033B2 3C01                <2> 	cmp al, 1	
  4173 000033B4 7418                <2> 	je varfnd
  4174 000033B6 89FB                <2> 	mov ebx, edi
  4175 000033B8 8B35[922B0000]      <2> 	mov esi, [currentcommandloc]
  4176 000033BE 668B03              <2> 	mov ax, [ebx]
  4177 000033C1 663D0000            <2> 	cmp ax, 0
  4178 000033C5 0F8424000000        <2> 	je near save
  4179 000033CB 43                  <2> 	inc ebx
  4180 000033CC EBB5                <2> 	jmp seek
  4181 000033CE 8A03                <2> varfnd:	mov al, [ebx]
  4182 000033D0 3C04                <2> 	cmp al, 4
  4183 000033D2 7404                <2> 	je save2
  4184 000033D4 4B                  <2> 	dec ebx
  4185 000033D5 4E                  <2> 	dec esi
  4186 000033D6 EBF6                <2> 	jmp varfnd
  4187 000033D8 4B                  <2> save2:	dec ebx
  4188 000033D9 4E                  <2> 	dec esi
  4189 000033DA 8A03                <2> 	mov al, [ebx]
  4190 000033DC 3C05                <2> 	cmp al, 5
  4191 000033DE 7402                <2> 	je remove
  4192 000033E0 EBEC                <2> 	jmp varfnd
  4193 000033E2 8A03                <2> remove: mov al, [ebx]
  4194 000033E4 3C00                <2> 	cmp al, 0
  4195 000033E6 749B                <2> 	je seek
  4196 000033E8 30C0                <2> 	xor al, al
  4197 000033EA 8803                <2> 	mov [ebx], al
  4198 000033EC 43                  <2> 	inc ebx
  4199 000033ED EBF3                <2> 	jmp remove	;do not need for now-need defragmentation
  4200 000033EF 8B35[922B0000]      <2> save:	mov esi, [currentcommandloc]
  4201 000033F5 43                  <2> 	inc ebx
  4202 000033F6 B005                <2> 	mov al, 5
  4203 000033F8 B404                <2> 	mov ah, 4
  4204 000033FA 668903              <2> 	mov [ebx], ax
  4205 000033FD 43                  <2> 	inc ebx
  4206 000033FE 43                  <2> svhere:	inc ebx
  4207 000033FF 46                  <2> 	inc esi
  4208 00003400 8A06                <2> 	mov al, [esi]
  4209 00003402 3C00                <2> 	cmp al, 0
  4210 00003404 0F844A000000        <2> 	je near svdone
  4211 0000340A 3C25                <2> 	cmp al, '%'
  4212 0000340C 7404                <2> 	je ans2
  4213 0000340E 8803                <2> 	mov [ebx], al	
  4214 00003410 EBEC                <2> 	jmp svhere
  4215 00003412 56                  <2> ans2:	push esi
  4216 00003413 BE[BAB50000]        <2> 	mov esi, buf2
  4217 00003418 E823000000          <2> 	call ansfnd
  4218 0000341D E803000000          <2> 	call anscp
  4219 00003422 5E                  <2> 	pop esi
  4220 00003423 EBD9                <2> 	jmp svhere
  4221 00003425 8A06                <2> anscp:	mov al, [esi]
  4222 00003427 8803                <2> 	mov [ebx], al
  4223 00003429 81FE[CEB50000]      <2> 	cmp esi, numbuf
  4224 0000342F 74CD                <2> 	je svhere
  4225 00003431 3C00                <2> 	cmp al, 0
  4226 00003433 74C9                <2> 	je svhere
  4227 00003435 43                  <2> 	inc ebx
  4228 00003436 46                  <2> 	inc esi
  4229 00003437 EBEC                <2> 	jmp anscp
  4230 00003439 5E                  <2> ansnf:	pop esi
  4231 0000343A 8A06                <2> 	mov al, [esi]
  4232 0000343C 8803                <2> 	mov [ebx], al
  4233 0000343E EBBE                <2> 	jmp svhere
  4234 00003440 46                  <2> ansfnd:	inc esi
  4235 00003441 81FE[CDB50000]      <2> 	cmp esi, numbuf - 1
  4236 00003447 740A                <2> 	je fndans
  4237 00003449 8A06                <2> 	mov al, [esi]
  4238 0000344B 3C00                <2> 	cmp al, 0
  4239 0000344D 74EA                <2> 	je ansnf
  4240 0000344F 3C30                <2> 	cmp al, '0'
  4241 00003451 74ED                <2> 	je ansfnd
  4242                              <2> fndans:
  4243 00003453 C3                  <2> 	ret
  4244 00003454 30C0                <2> svdone:	xor al, al
  4245 00003456 8803                <2> 	mov [ebx], al
  4246 00003458 C3                  <2> 	ret
  4247                              <1> %include 'source/programs/_run.asm' ;./
  4248                              <2> 
  4249 00003459 7F454C46            <2> 	elfstart db 0x7F,"ELF"
  4250 0000345D FF2C2E2F00          <2> 	db 255,44,"./",0
  4251                              <2> rundiskprog:
  4252 00003462 8B3D[922B0000]      <2> 	mov edi, [currentcommandloc]
  4253 00003468 81C702000000        <2> 	add edi, 2
  4254 0000346E BE00004000          <2> 	mov esi, 0x400000
  4255 00003473 E84A230000          <2> 	call loadfile
  4256 00003478 81FA94010000        <2> 	cmp edx, 404
  4257 0000347E 746A                <2> 	je noprogfound
  4258 00003480 BB00004000          <2> 	mov ebx, 0x400000
  4259 00003485 A1[59340000]        <2> 	mov eax, [elfstart]
  4260 0000348A 3903                <2> 	cmp [ebx], eax
  4261 0000348C 0F8437000000        <2> 	je near runelf
  4262 00003492 66813B4558          <2> 	cmp word [ebx], "EX"
  4263 00003497 7577                <2> 	jne progbatchfound
  4264 00003499 81C302000000        <2> 	add ebx, 2
  4265 0000349F 8B3D[922B0000]      <2> 	mov edi, [currentcommandloc]
  4266 000034A5 81C702000000        <2> 	add edi, 2
  4267                              <2> findspaceprog:
  4268 000034AB 8A07                <2> 	mov al, [edi]
  4269 000034AD 47                  <2> 	inc edi
  4270 000034AE 3C20                <2> 	cmp al, " "
  4271 000034B0 75F9                <2> 	jne findspaceprog
  4272                              <2> findnonspaceprog:
  4273 000034B2 8A07                <2> 	mov al, [edi]
  4274 000034B4 47                  <2> 	inc edi
  4275 000034B5 3C20                <2> 	cmp al, " "
  4276 000034B7 74F9                <2> 	je findnonspaceprog
  4277 000034B9 4F                  <2> 	dec edi
  4278 000034BA 8925[3A9B0000]      <2> 	mov [previousstack], esp
  4279 000034C0 FFD3                <2> 	call ebx
  4280 000034C2 8B25[3A9B0000]      <2> 	mov esp, [previousstack]
  4281 000034C8 C3                  <2> 	ret
  4282                              <2> runelf:
  4283 000034C9 8B3D[922B0000]      <2> 	mov edi, [currentcommandloc]
  4284 000034CF 81C702000000        <2> 	add edi, 2
  4285 000034D5 81C380000000        <2> 	add ebx, 0x80
  4286 000034DB 8925[3A9B0000]      <2> 	mov [previousstack], esp
  4287 000034E1 FFD3                <2> 	call ebx
  4288 000034E3 8B25[3A9B0000]      <2> 	mov esp, [previousstack]
  4289 000034E9 C3                  <2> 	ret
  4290                              <2> noprogfound:
  4291 000034EA BE[E4720000]        <2> 	mov esi, notfound1
  4292 000034EF E8EEE7FFFF          <2> 	call print
  4293 000034F4 8B35[922B0000]      <2> 	mov esi, [currentcommandloc]
  4294 000034FA 81C602000000        <2> 	add esi, 2
  4295 00003500 E8DDE7FFFF          <2> 	call print
  4296 00003505 BE[EC720000]        <2> 	mov esi, notfound2
  4297 0000350A E8D3E7FFFF          <2> 	call print
  4298 0000350F C3                  <2> 	ret
  4299                              <2> progbatchfound:
  4300 00003510 BF00004000          <2> 		mov edi, 0x400000
  4301 00003515 C605[B49D0000]01    <2> 		mov byte [BATCHISON], 1
  4302                              <2> 	batchrunloop:
  4303 0000351C E8A1F3FFFF          <2> 		call buftxtclear
  4304 00003521 BE[BAB10000]        <2> 		mov esi, buftxt
  4305 00003526 8935[922B0000]      <2> 		mov [currentcommandloc], esi
  4306                              <2> 	batchrunloop2:
  4307 0000352C B10A                <2> 		mov cl, 10
  4308 0000352E B50D                <2> 		mov ch, 13
  4309 00003530 380F                <2> 		cmp [edi], cl
  4310 00003532 0F8419000000        <2> 		je near nxtbatchrunline
  4311 00003538 382F                <2> 		cmp [edi], ch
  4312 0000353A 0F8411000000        <2> 		je near nxtbatchrunline
  4313 00003540 803F00              <2> 		cmp byte [edi], 0
  4314 00003543 0F8408000000        <2> 		je near nxtbatchrunline
  4315 00003549 8A07                <2> 		mov al, [edi]
  4316 0000354B 8806                <2> 		mov [esi], al
  4317 0000354D 46                  <2> 		inc esi
  4318 0000354E 47                  <2> 		inc edi
  4319 0000354F EBDB                <2> 		jmp batchrunloop2
  4320                              <2> 	nxtbatchrunline:
  4321 00003551 47                  <2> 		inc edi
  4322 00003552 380F                <2> 		cmp [edi], cl
  4323 00003554 74FB                <2> 		je nxtbatchrunline
  4324 00003556 382F                <2> 		cmp [edi], ch
  4325 00003558 74F7                <2> 		je nxtbatchrunline
  4326 0000355A 893D[B8350000]      <2> 		mov [batchedi], edi
  4327 00003560 893D[B09D0000]      <2> 		mov [BATCHPOS], edi
  4328 00003566 C60600              <2> 		mov byte [esi], 0
  4329 00003569 BE[BAB10000]        <2> 		mov esi, buftxt
  4330 0000356E 803E00              <2> 		cmp byte [esi], 0
  4331 00003571 0F8439000000        <2> 		je near nobatchfoundrun
  4332 00003577 31DB                <2> 		xor ebx, ebx
  4333 00003579 8A1D[4B9D0000]      <2> 		mov bl, [IFON]
  4334 0000357F 80FB00              <2> 		cmp bl, 0
  4335 00003582 0F8534000000        <2> 		jne near iftestbatch
  4336                              <2> 	doneiftest:
  4337 00003588 803D[8E360000]00    <2> 		cmp byte [runnextline], 0
  4338 0000358F 0F8405000000        <2> 		je near noruniftest
  4339 00003595 E822F5FFFF          <2> 		call run
  4340                              <2> 	noruniftest:
  4341 0000359A C605[8E360000]01    <2> 		mov byte [runnextline], 1
  4342 000035A1 8B3D[B8350000]      <2> 		mov edi, [batchedi]
  4343 000035A7 803F00              <2> 		cmp byte [edi], 0
  4344 000035AA 0F856CFFFFFF        <2> 		jne near batchrunloop
  4345                              <2> 	nobatchfoundrun:
  4346 000035B0 C605[B49D0000]00    <2> 		mov byte [BATCHISON], 0
  4347 000035B7 C3                  <2> 		ret
  4348                              <2> 	
  4349 000035B8 00000000            <2> batchedi dd 0	
  4350                              <2> 	
  4351                              <2> 	iftestbatch:
  4352 000035BC BE[4C9D0000]        <2> 		mov esi, IFTRUE
  4353 000035C1 01DE                <2> 		add esi, ebx
  4354 000035C3 803E00              <2> 		cmp byte [esi], 0
  4355 000035C6 0F85BCFFFFFF        <2> 		jne near doneiftest
  4356 000035CC 881D[8F360000]      <2> 		mov [iffalsebuf], bl
  4357 000035D2 803D[B59D0000]01    <2> 		cmp byte [LOOPON], 1
  4358 000035D9 0F8513000000        <2> 		jne near fifindbatch
  4359 000035DF E938FFFFFF          <2> 		jmp batchrunloop
  4360                              <2> 	elsetestbatch:
  4361 000035E4 C60601              <2> 		mov byte [esi], 1
  4362 000035E7 81C705000000        <2> 		add edi, 5
  4363 000035ED E92AFFFFFF          <2> 		jmp batchrunloop
  4364                              <2> 	fifindbatch:
  4365 000035F2 66B96966            <2> 		mov cx, "if"
  4366 000035F6 66B86669            <2> 		mov ax, "fi"
  4367 000035FA 663907              <2> 		cmp [edi], ax
  4368 000035FD 0F8424000000        <2> 		je near fifoundbatch
  4369 00003603 66390F              <2> 		cmp [edi], cx
  4370 00003606 0F8465000000        <2> 		je near iffoundbatch
  4371 0000360C 803F00              <2> 		cmp byte [edi], 0
  4372 0000360F 0F8412000000        <2> 		je near fifoundbatch
  4373 00003615 B8656C7365          <2> 		mov eax, "else"
  4374 0000361A 3907                <2> 		cmp [edi], eax
  4375 0000361C 0F84C2FFFFFF        <2> 		je near elsetestbatch
  4376 00003622 E973FFFFFF          <2> 		jmp noruniftest
  4377                              <2> 	fifoundbatch:
  4378 00003627 81C702000000        <2> 		add edi, 2
  4379 0000362D B00A                <2> 		mov al, 10
  4380 0000362F 3807                <2> 		cmp [edi], al
  4381 00003631 0F840B000000        <2> 		je near goodfibatch
  4382 00003637 803F00              <2> 		cmp byte [edi], 0
  4383 0000363A 0F8470FFFFFF        <2> 		je near nobatchfoundrun
  4384 00003640 EBB0                <2> 		jmp fifindbatch
  4385                              <2> 	goodfibatch:
  4386 00003642 B001                <2> 		mov al, 1
  4387 00003644 2805[4B9D0000]      <2> 		sub [IFON], al 
  4388 0000364A A0[4B9D0000]        <2> 		mov al, [IFON]
  4389 0000364F 8A1D[8F360000]      <2> 		mov bl, [iffalsebuf]
  4390 00003655 38D8                <2> 		cmp al, bl
  4391 00003657 7799                <2> 		ja fifindbatch
  4392 00003659 8B35[922B0000]      <2> 		mov esi, [currentcommandloc]
  4393 0000365F 81EF02000000        <2> 		sub edi, 2
  4394 00003665 C605[8E360000]00    <2> 		mov byte [runnextline], 0
  4395 0000366C E9ABFEFFFF          <2> 		jmp batchrunloop
  4396                              <2> 	iffoundbatch:
  4397 00003671 B020                <2> 		mov al, ' '
  4398 00003673 81C702000000        <2> 		add edi, 2
  4399 00003679 3807                <2> 		cmp [edi], al
  4400 0000367B 0F8571FFFFFF        <2> 		jne near fifindbatch
  4401 00003681 B001                <2> 		mov al, 1
  4402 00003683 0005[4B9D0000]      <2> 		add [IFON], al
  4403 00003689 E964FFFFFF          <2> 		jmp fifindbatch
  4404                              <2> 		
  4405                              <2> 		
  4406 0000368E 01                  <2> runnextline db 1
  4407 0000368F 00                  <2> iffalsebuf db 0
  4408                              <2> 
  4409 00003690 C3                  <2> notbatch: ret 
  4410                              <1> %ifdef rtl8139.included
  4411                              <1> 	%include 'source/programs/arp.asm'
  4412                              <1> %endif
  4413                              <1> %include 'source/programs/batch.asm'
  4414 00003691 FF2C626174636800    <2> db 255,44,"batch",0
  4415                              <2> 	batchst: 
  4416 00003699 8B3D[922B0000]      <2> 		mov edi, [currentcommandloc]
  4417 0000369F 81C706000000        <2> 		add edi, 6
  4418 000036A5 803F00              <2> 		cmp byte [edi], 0
  4419 000036A8 0F846D000000        <2> 		je near nonamefound
  4420 000036AE BE00004000          <2> 		mov esi, 0x400000
  4421 000036B3 E80A210000          <2> 		call loadfile
  4422 000036B8 89D0                <2> 		mov eax, edx
  4423 000036BA 3D94010000          <2> 		cmp eax, 404
  4424 000036BF 7465                <2> 		je goodbatchname
  4425 000036C1 BE[CC360000]        <2> 		mov esi, badbatchname
  4426 000036C6 E817E6FFFF          <2> 		call print
  4427 000036CB C3                  <2> 		ret
  4428 000036CC 546869732066696C65- <2> 		badbatchname db "This file already exists!",10,0
  4429 000036D5 20616C726561647920- <2>
  4430 000036DE 657869737473210A00  <2>
  4431 000036E7 596F75206861766520- <2> 		namenotfoundbatch db "You have to type a name after the command.",10,0
  4432 000036F0 746F20747970652061- <2>
  4433 000036F9 206E616D6520616674- <2>
  4434 00003702 65722074686520636F- <2>
  4435 0000370B 6D6D616E642E0A00    <2>
  4436 00003713 00000000            <2> 		esicache3 dd 0
  4437 00003717 00000000            <2> 		esicache2 dd 0
  4438                              <2> 	nonamefound:
  4439 0000371B BE[E7360000]        <2> 		mov esi, namenotfoundbatch
  4440 00003720 E8BDE5FFFF          <2> 		call print
  4441 00003725 C3                  <2> 		ret
  4442                              <2> 	goodbatchname:
  4443 00003726 BE00004000          <2> 		mov esi, 0x400000
  4444                              <2> 	batchcreate:
  4445 0000372B 8935[13370000]      <2> 		mov [esicache3], esi
  4446 00003731 BF00008000          <2> 		mov edi, 0x800000
  4447 00003736 B00A                <2> 		mov al, 10
  4448 00003738 B307                <2> 		mov bl, 7
  4449 0000373A B404                <2> 		mov ah, 4
  4450 0000373C CD30                <2> 		int 30h
  4451 0000373E 8935[17370000]      <2> 		mov [esicache2], esi
  4452 00003744 8A0E                <2> 		mov cl, [esi]
  4453 00003746 8B35[13370000]      <2> 		mov esi, [esicache3]
  4454 0000374C BB[80370000]        <2> 		mov ebx, exitword
  4455 00003751 E87BF4FFFF          <2> 		call cndtest
  4456 00003756 3C01                <2> 		cmp al, 1
  4457 00003758 7411                <2> 		je endbatchcreate
  4458 0000375A 3C02                <2> 		cmp al, 2
  4459 0000375C 740D                <2> 		je endbatchcreate
  4460 0000375E 8B35[17370000]      <2> 		mov esi, [esicache2]
  4461 00003764 B00A                <2> 		mov al, 10
  4462 00003766 8806                <2> 		mov [esi], al
  4463 00003768 46                  <2> 		inc esi
  4464 00003769 EBC0                <2> 		jmp batchcreate
  4465                              <2> 	endbatchcreate:
  4466 0000376B 8B35[13370000]      <2> 		mov esi, [esicache3]
  4467 00003771 31C0                <2> 		xor eax, eax
  4468 00003773 8806                <2> 		mov [esi], al
  4469 00003775 BE00004000          <2> 		mov esi, 0x400000
  4470 0000377A E863E5FFFF          <2> 		call print
  4471 0000377F C3                  <2> 		ret
  4472                              <2> 	
  4473 00003780 5C7800              <2> 	exitword db "\x",0
  4474 00003783 54797065205C782074- <2> 	wordmsg db "Type \x to exit.",10,0
  4475 0000378C 6F20657869742E0A00  <2>
  4476                              <1> %ifdef gui.background
  4477                              <1> 	%include 'source/programs/background.asm'
  4478 00003795 FF2C6261636B67726F- <2> db 255,44,"background",0
  4479 0000379E 756E6400            <2>
  4480 000037A2 8B3D[922B0000]      <2> 		mov edi, [currentcommandloc]
  4481 000037A8 81C70B000000        <2> 		add edi, 11
  4482 000037AE BE00008000          <2> 		mov esi, 0x800000
  4483 000037B3 E80A200000          <2> 		call loadfile
  4484 000037B8 81FA94010000        <2> 		cmp edx, 404
  4485 000037BE 0F8490090000        <2> 		je near filenotfound
  4486 000037C4 BE00008000          <2> 		mov esi, 0x800000
  4487 000037C9 66813E424D          <2> 		cmp word [esi], "BM"
  4488 000037CE 7401                <2> 		je .bmpfound
  4489 000037D0 C3                  <2> 		ret
  4490                              <2> .bmpfound:
  4491 000037D1 8B3D[3D4B0000]      <2> 		mov edi, [physbaseptr]
  4492 000037D7 57                  <2> 		push edi
  4493 000037D8 BE[CFB70000]        <2> 		mov esi, backgroundbuffer
  4494 000037DD 8935[B9590000]      <2> 		mov [backgroundimage], esi
  4495 000037E3 8935[3D4B0000]      <2> 		mov [physbaseptr], esi
  4496 000037E9 BE00008000          <2> 		mov esi, 0x800000
  4497 000037EE 31C9                <2> 		xor ecx, ecx
  4498 000037F0 31D2                <2> 		xor edx, edx
  4499 000037F2 31C0                <2> 		xor eax, eax
  4500 000037F4 31DB                <2> 		xor ebx, ebx
  4501 000037F6 E88C350000          <2> 		call showbmp
  4502 000037FB 5F                  <2> 		pop edi
  4503 000037FC 893D[3D4B0000]      <2> 		mov [physbaseptr], edi
  4504 00003802 E85F210000          <2> 		call guiclear
  4505 00003807 E81E230000          <2> 		call clearmousecursor
  4506 0000380C E8D9290000          <2> 		call reloadallgraphics
  4507 00003811 C3                  <2> 		ret
  4508                              <1> %endif
  4509                              <1> %include 'source/programs/beep.asm'
  4510 00003812 FF2C6265657000      <2> 	db 255,44,"beep",0
  4511 00003819 B8[3E380000]        <2> 	mov eax, beepstart
  4512 0000381E A3[60020000]        <2> 	mov [soundpos], eax
  4513 00003823 B8[42380000]        <2> 	mov eax, beepend
  4514 00003828 A3[64020000]        <2> 	mov [soundendpos], eax
  4515 0000382D C605[5D020000]01    <2> 	mov byte [soundon], 1
  4516                              <2> waitforsoundendbeep:
  4517 00003834 A0[5D020000]        <2> 	mov al, [soundon]
  4518 00003839 3C00                <2> 	cmp al, 0
  4519 0000383B 75F7                <2> 	jne waitforsoundendbeep
  4520 0000383D C3                  <2> 	ret
  4521                              <2> 	
  4522                              <2> beepstart:
  4523 0000383E 3200D111            <2> 	dw 50, 4561
  4524                              <2> beepend:
  4525                              <1> %include 'source/programs/cd.asm'
  4526 00003842 FF2C636400          <2> db 255,44,"cd",0
  4527                              <2> cd:
  4528 00003847 8B35[922B0000]      <2> 	mov esi, [currentcommandloc]
  4529 0000384D 81C603000000        <2> 	add esi, 3
  4530 00003853 8B3D[429B0000]      <2> 	mov edi, [currentfolderloc]
  4531 00003859 893D[3E9B0000]      <2> 	mov [lastfolderloc], edi
  4532 0000385F 81C7[469B0000]      <2> 	add edi, currentfolder
  4533                              <2> 	;cmp word [esi], ".."
  4534                              <2> 	;je .moveup
  4535                              <2> .movedown:
  4536 00003865 8A06                <2> 	mov al, [esi]
  4537 00003867 8807                <2> 	mov [edi], al
  4538 00003869 47                  <2> 	inc edi
  4539 0000386A 46                  <2> 	inc esi
  4540 0000386B 3C00                <2> 	cmp al, 0
  4541 0000386D 740A                <2> 	je .donecd
  4542 0000386F 81FF[469D0000]      <2> 	cmp edi, currentfolderend
  4543 00003875 72EE                <2> 	jb .movedown
  4544 00003877 30C0                <2> 	xor al, al
  4545                              <2> .donecd:
  4546 00003879 4F                  <2> 	dec edi
  4547 0000387A C6072F              <2> 	mov byte [edi], '/'
  4548 0000387D 47                  <2> 	inc edi
  4549 0000387E 81EF[469B0000]      <2> 	sub edi, currentfolder
  4550 00003884 893D[429B0000]      <2> 	mov [currentfolderloc], edi
  4551 0000388A C3                  <2> 	ret
  4552                              <2> ;.moveup:
  4553                              <2> ;	ret
  4554                              <1> %include 'source/programs/charmap.asm'
  4555 0000388B FF2C636861726D6170- <2> db 255,44,"charmap",0
  4556 00003894 00                  <2>
  4557 00003895 66BB0700            <2> 	mov bx, 7
  4558 00003899 B020                <2> 	mov al, " "
  4559 0000389B E818E9FFFF          <2> 	call prcharq
  4560 000038A0 E813E9FFFF          <2> 	call prcharq
  4561 000038A5 E80EE9FFFF          <2> 	call prcharq
  4562 000038AA E809E9FFFF          <2> 	call prcharq
  4563 000038AF B030                <2> 	mov al, "0"
  4564                              <2> charmapnumprnt:
  4565 000038B1 E802E9FFFF          <2> 	call prcharq
  4566 000038B6 FEC0                <2> 	inc al
  4567 000038B8 6650                <2> 	push ax
  4568 000038BA B020                <2> 	mov al, " "
  4569 000038BC E8F7E8FFFF          <2> 	call prcharq
  4570 000038C1 6658                <2> 	pop ax
  4571 000038C3 3C39                <2> 	cmp al, "9"
  4572 000038C5 76EA                <2> 	jbe charmapnumprnt
  4573 000038C7 B041                <2> 	mov al, "A"
  4574                              <2> charmapnumprnt2:
  4575 000038C9 E8EAE8FFFF          <2> 	call prcharq
  4576 000038CE FEC0                <2> 	inc al
  4577 000038D0 6650                <2> 	push ax
  4578 000038D2 B020                <2> 	mov al, " "
  4579 000038D4 E8DFE8FFFF          <2> 	call prcharq
  4580 000038D9 6658                <2> 	pop ax
  4581 000038DB 3C47                <2> 	cmp al, "G"
  4582 000038DD 72EA                <2> 	jb charmapnumprnt2
  4583                              <2> 	
  4584 000038DF BE[25730000]        <2> 	mov esi, line
  4585 000038E4 E8E7E3FFFF          <2> 	call printquiet
  4586 000038E9 6631C0              <2> 	xor ax, ax
  4587 000038EC 88C1                <2> 	mov cl, al
  4588 000038EE E8B2F4FFFF          <2> 	call showhexsmall
  4589 000038F3 E955000000          <2> 	jmp charmapnocopy ;the first char is 0 which is unprintable
  4590                              <2> charmapcopy:
  4591 000038F8 FEC0                <2> 	inc al
  4592 000038FA 6650                <2> 	push ax
  4593 000038FC 3C08                <2> 	cmp al, 8
  4594 000038FE 744D                <2> 	je charmapnocopy
  4595 00003900 3C09                <2> 	cmp al, 9
  4596 00003902 7449                <2> 	je charmapnocopy
  4597 00003904 3C0A                <2> 	cmp al, 10
  4598 00003906 7445                <2> 	je charmapnocopy
  4599 00003908 3C0D                <2> 	cmp al, 13
  4600 0000390A 7441                <2> 	je charmapnocopy
  4601 0000390C 3CFF                <2> 	cmp al, 255
  4602 0000390E 743D                <2> 	je charmapnocopy
  4603 00003910 3C00                <2> 	cmp al, 0
  4604 00003912 7434                <2> 	je nomorecharmap
  4605 00003914 E89FE8FFFF          <2> 	call prcharq
  4606 00003919 B020                <2> 	mov al, " "
  4607 0000391B E898E8FFFF          <2> 	call prcharq
  4608 00003920 6658                <2> 	pop ax
  4609                              <2> charmapcopycheck:
  4610 00003922 FEC4                <2> 	inc ah
  4611 00003924 80FC10              <2> 	cmp ah, 16
  4612 00003927 72CF                <2> 	jb charmapcopy
  4613 00003929 6650                <2> 	push ax
  4614 0000392B BE[25730000]        <2> 	mov esi, line
  4615 00003930 E89BE3FFFF          <2> 	call printquiet
  4616 00003935 6658                <2> 	pop ax
  4617 00003937 3CFF                <2> 	cmp al, 255
  4618 00003939 740D                <2> 	je nomorecharmap
  4619 0000393B 88C1                <2> 	mov cl, al
  4620 0000393D FEC1                <2> 	inc cl
  4621 0000393F E861F4FFFF          <2> 	call showhexsmall
  4622 00003944 30E4                <2> 	xor ah, ah
  4623 00003946 EBB0                <2> 	jmp charmapcopy
  4624                              <2> nomorecharmap:
  4625 00003948 E998EFFFFF          <2> 	jmp nwcmd
  4626                              <2> charmapnocopy:
  4627 0000394D 6650                <2> 	push ax
  4628 0000394F B020                <2> 	mov al, " "
  4629 00003951 E862E8FFFF          <2> 	call prcharq
  4630 00003956 E85DE8FFFF          <2> 	call prcharq
  4631 0000395B 6658                <2> 	pop ax
  4632 0000395D EBC3                <2> 	jmp charmapcopycheck
  4633                              <1> %include 'source/programs/clear.asm'
  4634 0000395F FF2C636C65617200    <2> db 255,44,"clear",0
  4635 00003967 E8DCE3FFFF          <2> 		call clear
  4636 0000396C C3                  <2> 		ret 
  4637                              <1> %include 'source/programs/cpuid.asm'
  4638 0000396D FF2C637075696400    <2> db 255,44,"cpuid",0
  4639 00003975 31C0                <2> 	xor eax, eax
  4640 00003977 0FA2                <2> 	cpuid
  4641 00003979 891D[CA390000]      <2> 	mov [cpuidbuf], ebx
  4642 0000397F 8915[CE390000]      <2> 	mov [cpuidbuf + 4], edx
  4643 00003985 890D[D2390000]      <2> 	mov [cpuidbuf + 8], ecx
  4644 0000398B BE[CA390000]        <2> 	mov esi, cpuidbuf
  4645 00003990 E84DE3FFFF          <2> 	call print
  4646 00003995 BE[25730000]        <2> 	mov esi, line
  4647 0000399A E843E3FFFF          <2> 	call print
  4648 0000399F B801000000          <2> 	mov eax, 1
  4649 000039A4 0FA2                <2> 	cpuid
  4650 000039A6 89C1                <2> 	mov ecx, eax
  4651 000039A8 C605[A42D0000]02    <2> 	mov byte [firsthexshown], 2
  4652 000039AF E805F4FFFF          <2> 	call showhex
  4653 000039B4 B808000080          <2> 	mov eax, 0x80000008
  4654 000039B9 0FA2                <2> 	cpuid
  4655 000039BB 89C1                <2> 	mov ecx, eax
  4656 000039BD C605[A42D0000]02    <2> 	mov byte [firsthexshown], 2
  4657 000039C4 E8F0F3FFFF          <2> 	call showhex
  4658 000039C9 C3                  <2> 	ret
  4659                              <2> 	
  4660 000039CA 00<rept>            <2> cpuidbuf times 13 db 0
  4661                              <2> cpuidvendorend:
  4662                              <1> %include 'source/programs/dos.asm'
  4663 000039D7 FF2C646F7300        <2> db 255,44,"dos",0
  4664                              <2> dosrunner:
  4665 000039DD 8925[3A9B0000]      <2> 	mov [previousstack], esp
  4666 000039E3 8B3D[922B0000]      <2> 	mov edi, [currentcommandloc]
  4667 000039E9 81C704000000        <2> 	add edi, 4
  4668 000039EF BE00014000          <2> 	mov esi,  0x100 + dosprogloc	;this should be the beginning of memory
  4669 000039F4 E8C91D0000          <2> 	call loadfile
  4670 000039F9 8B3D[922B0000]      <2> 	mov edi, [currentcommandloc]
  4671 000039FF 81C704000000        <2> 	add edi, 4
  4672 00003A05 81FA94010000        <2> 	cmp edx, 404
  4673 00003A0B 0F845E000000        <2> 	je near .noprogfound
  4674 00003A11 BB81004000          <2> 	mov ebx, 0x81 + dosprogloc
  4675 00003A16 31C9                <2> 	xor ecx, ecx
  4676                              <2> .findparams:
  4677 00003A18 47                  <2> 	inc edi
  4678 00003A19 8A07                <2> 	mov al, [edi]
  4679 00003A1B 3C20                <2> 	cmp al, " "
  4680 00003A1D 75F9                <2> 	jne .findparams
  4681                              <2> .copyparams:
  4682 00003A1F 8A07                <2> 	mov al, [edi]
  4683 00003A21 8803                <2> 	mov [ebx], al
  4684 00003A23 43                  <2> 	inc ebx
  4685 00003A24 47                  <2> 	inc edi
  4686 00003A25 41                  <2> 	inc ecx
  4687 00003A26 81FB00014000        <2> 	cmp ebx, 0x100 + dosprogloc
  4688 00003A2C 7304                <2> 	jae .nomoreparams
  4689 00003A2E 3C00                <2> 	cmp al, 0
  4690 00003A30 75ED                <2> 	jne .copyparams
  4691                              <2> .nomoreparams:
  4692 00003A32 880D80004000        <2> 	mov [0x80 + dosprogloc], cl
  4693 00003A38 66B85000            <2> 	mov ax, DOS_DATA_SEL
  4694 00003A3C 8ED8                <2> 	mov ds, ax
  4695 00003A3E 8EC0                <2> 	mov es, ax
  4696 00003A40 8EE0                <2> 	mov fs, ax
  4697 00003A42 8EE8                <2> 	mov gs, ax
  4698 00003A44 31C0                <2> 	xor eax, eax
  4699 00003A46 31DB                <2> 	xor ebx, ebx
  4700 00003A48 31C9                <2> 	xor ecx, ecx
  4701 00003A4A 31D2                <2> 	xor edx, edx
  4702 00003A4C 31FF                <2> 	xor edi, edi
  4703 00003A4E 31F6                <2> 	xor esi, esi
  4704 00003A50 9A000100004800      <2> 	call DOS_CODE_SEL:0x100
  4705 00003A57 66BB3000            <2> 	mov bx, NEW_DATA_SEL
  4706 00003A5B 6689DA              <2> 	mov dx, bx
  4707 00003A5E 8EC3                <2> 	mov es, bx
  4708 00003A60 8EE3                <2> 	mov fs, bx
  4709 00003A62 66BB2000            <2> 	mov bx, SYS_DATA_SEL
  4710 00003A66 8EEB                <2> 	mov gs, bx
  4711 00003A68 8B25[3A9B0000]      <2> 	mov esp, [previousstack]
  4712 00003A6E C3                  <2> 	ret
  4713                              <2> .noprogfound:
  4714 00003A6F BE[E4720000]        <2> 	mov esi, notfound1
  4715 00003A74 E869E2FFFF          <2> 	call print
  4716 00003A79 8B35[922B0000]      <2> 	mov esi, [currentcommandloc]
  4717 00003A7F 81C604000000        <2> 	add esi, 4
  4718 00003A85 E858E2FFFF          <2> 	call print
  4719 00003A8A BE[EC720000]        <2> 	mov esi, notfound2
  4720 00003A8F E84EE2FFFF          <2> 	call print
  4721 00003A94 C3                  <2> 	ret
  4722                              <2> 	
  4723                              <1> %include 'source/programs/dump.asm'
  4724 00003A95 FF2C64756D7000      <2> db 255,44,"dump",0
  4725 00003A9C 8B35[922B0000]      <2> 	mov esi, [currentcommandloc]
  4726 00003AA2 81C605000000        <2> 	add esi, 5
  4727 00003AA8 31C9                <2> 	xor ecx, ecx
  4728 00003AAA 66B83078            <2> 	mov ax, "0x"
  4729 00003AAE 663906              <2> 	cmp [esi], ax
  4730 00003AB1 740A                <2> 	je dumphexin
  4731 00003AB3 E8ADF4FFFF          <2> 	call cnvrttxt
  4732 00003AB8 E910000000          <2> 	jmp dumphexnow
  4733                              <2> dumphexin:
  4734 00003ABD 81C602000000        <2> 	add esi, 2
  4735 00003AC3 E854F4FFFF          <2> 	call cnvrthextxt
  4736 00003AC8 E900000000          <2> 	jmp dumphexnow
  4737                              <2> dumphexnow:
  4738 00003ACD 89CF                <2> 	mov edi, ecx
  4739 00003ACF 89FE                <2> 	mov esi, edi
  4740 00003AD1 81C680030000        <2> 	add esi, 896
  4741                              <2> dumphexloop:
  4742 00003AD7 8B0F                <2> 	mov ecx, [edi]
  4743 00003AD9 C605[A42D0000]05    <2> 	mov byte [firsthexshown],5
  4744 00003AE0 E8D4F2FFFF          <2> 	call showhex
  4745 00003AE5 81C704000000        <2> 	add edi, 4
  4746 00003AEB 39F7                <2> 	cmp edi, esi
  4747 00003AED 72E8                <2> 	jb dumphexloop
  4748 00003AEF E8FDE9FFFF          <2> 	call termcopy
  4749 00003AF4 C3                  <2> 	ret 
  4750                              <1> %include 'source/programs/echo.asm'
  4751                              <2> 
  4752 00003AF5 FF2C6563686F00      <2> db 255,44,"echo",0
  4753                              <2> 	echoprog:
  4754 00003AFC 8B35[922B0000]      <2> 		mov esi, [currentcommandloc]
  4755 00003B02 81C605000000        <2> 		add esi, 5
  4756 00003B08 8A06                <2> 		mov al, [esi]
  4757 00003B0A E8D3E1FFFF          <2> 		call print
  4758 00003B0F BE[25730000]        <2> 		mov esi, line
  4759 00003B14 E8C9E1FFFF          <2> 		call print
  4760 00003B19 C3                  <2> 		ret
  4761 00003B1A BB[BA9D0000]        <2> 	echovr:	mov ebx, variables
  4762 00003B1F BF06000000          <2> 		mov edi, 6
  4763 00003B24 E83C000000          <2> 		call nxtvrech
  4764 00003B29 E954000000          <2> 		jmp prntvr2
  4765 00003B2E B13D                <2> 	echvar:	mov cl, '='
  4766 00003B30 43                  <2> 		inc ebx
  4767 00003B31 8A03                <2> 		mov al, [ebx]
  4768 00003B33 3C00                <2> 		cmp al, 0
  4769 00003B35 742E                <2> 		je nxtvrech
  4770 00003B37 3C3D                <2> 		cmp al, '='
  4771 00003B39 7422                <2> 		je nxtvrechb1
  4772 00003B3B 8B35[922B0000]      <2> 		mov esi, [currentcommandloc]
  4773 00003B41 01FE                <2> 		add esi, edi
  4774 00003B43 E889F0FFFF          <2> 		call cndtest
  4775 00003B48 3C02                <2> 		cmp al, 2
  4776 00003B4A 7432                <2> 		je prntvr
  4777 00003B4C 3C01                <2> 		cmp al, 1
  4778 00003B4E 742E                <2> 		je prntvr
  4779 00003B50 8B35[922B0000]      <2> 		mov esi, [currentcommandloc]
  4780 00003B56 01FE                <2> 		add esi, edi
  4781 00003B58 E908000000          <2> 		jmp nxtvrech
  4782                              <2> 	nxtvrechb1:
  4783 00003B5D 81EB02000000        <2> 		sub ebx, 2
  4784 00003B63 EBC9                <2> 		jmp echvar
  4785 00003B65 8A03                <2> 	nxtvrech: mov al, [ebx]
  4786 00003B67 3C05                <2> 		cmp al, 5
  4787 00003B69 740A                <2> 		je nxtvrec2
  4788 00003B6B 43                  <2> 		inc ebx
  4789 00003B6C 81FB[BAAD0000]      <2> 		cmp ebx, varend
  4790 00003B72 72F1                <2> 		jb nxtvrech
  4791 00003B74 C3                  <2> 		ret
  4792 00003B75 43                  <2> 	nxtvrec2: inc ebx
  4793 00003B76 8A03                <2> 		mov al, [ebx]
  4794 00003B78 3C04                <2> 		cmp al, 4
  4795 00003B7A 74B2                <2> 		je echvar
  4796 00003B7C EBE7                <2> 		jmp nxtvrech
  4797 00003B7E 43                  <2> 	prntvr: inc ebx
  4798 00003B7F 89DE                <2> 		mov esi, ebx
  4799 00003B81 C3                  <2> 		ret
  4800 00003B82 E85BE1FFFF          <2> 	prntvr2: call print
  4801 00003B87 BE[25730000]        <2> 		mov esi, line
  4802 00003B8C E851E1FFFF          <2> 		call print
  4803 00003B91 C3                  <2> 		ret 
  4804                              <1> %include 'source/programs/else.asm'
  4805 00003B92 FF2C656C736500      <2> 	db 255,44,"else",0
  4806 00003B99 31C0                <2> elsecmd:	xor eax, eax
  4807 00003B9B 3805[B49D0000]      <2> 	cmp [BATCHISON], al
  4808 00003BA1 0F84E9FAFFFF        <2> 	je near notbatch
  4809 00003BA7 A0[4B9D0000]        <2> 	mov al, [IFON]
  4810 00003BAC BE[4C9D0000]        <2> 	mov esi, IFTRUE
  4811 00003BB1 01C6                <2> 	add esi, eax
  4812 00003BB3 8A06                <2> 	mov al, [esi]
  4813 00003BB5 3401                <2> 	xor al, 1
  4814 00003BB7 8806                <2> 	mov [esi], al
  4815 00003BB9 C3                  <2> 	ret 
  4816                              <1> %include 'source/programs/fi.asm'
  4817 00003BBA FF2C666900          <2> 	db 255,44,"fi",0
  4818 00003BBF 30C0                <2> 	xor al, al
  4819 00003BC1 3805[B49D0000]      <2> 	cmp [BATCHISON], al
  4820 00003BC7 0F84C3FAFFFF        <2> 	je near notbatch
  4821 00003BCD B001                <2> fi:	mov al, 1
  4822 00003BCF 2805[4B9D0000]      <2> 	sub [IFON],al
  4823 00003BD5 C3                  <2> 	ret 
  4824                              <1> %ifdef gui.included
  4825                              <1> 	%include 'source/programs/gui.asm'
  4826 00003BD6 FF2C67756900        <2> db 255,44,"gui",0
  4827                              <2> guiswitcher:
  4828 00003BDC 8B35[922B0000]      <2> 	mov esi, [currentcommandloc]
  4829 00003BE2 81C604000000        <2> 	add esi, 4
  4830 00003BE8 31C9                <2> 	xor ecx, ecx
  4831 00003BEA 803E00              <2> 	cmp byte [esi], 0
  4832 00003BED 740A                <2> 	je .nomodepref
  4833 00003BEF E828F3FFFF          <2> 	call cnvrthextxt ;switches arg on cline to vesa mode in ecx
  4834 00003BF4 E907000000          <2> 	jmp .modepref
  4835                              <2> .nomodepref:
  4836 00003BF9 51                  <2> 	push ecx
  4837 00003BFA E849E1FFFF          <2> 	call clear
  4838 00003BFF 59                  <2> 	pop ecx
  4839                              <2> .modepref:
  4840 00003C00 66BB[3747]          <2> 	mov bx, guiswitch
  4841 00003C04 66891D[B10C0000]    <2> 	mov [realmodeptr], bx
  4842 00003C0B BB[1B3C0000]        <2> 	mov ebx, guiswitchret
  4843 00003C10 891D[AD0C0000]      <2> 	mov [realmodereturn], ebx
  4844 00003C16 E97BCFFFFF          <2> 	jmp realmode
  4845                              <2> guiswitchret:
  4846 00003C1B 65803D[F4840000]01  <2> 	cmp byte [gs:guion], 1
  4847 00003C23 7401                <2> 	je .cont
  4848 00003C25 C3                  <2> 	ret
  4849                              <2> .cont:
  4850 00003C26 BF[15490000]        <2> 	mov edi, VBEMODEBLOCK
  4851                              <2> .loop:
  4852 00003C2B 658B07              <2> 	mov eax, [gs:edi]
  4853 00003C2E 8907                <2> 	mov [edi], eax
  4854 00003C30 47                  <2> 	inc edi
  4855 00003C31 81FF[174C0000]      <2> 	cmp edi, VBEEND
  4856 00003C37 72F2                <2> 	jb .loop
  4857 00003C39 A1[3D4B0000]        <2> 	mov eax, [physbaseptr]
  4858 00003C3E 2D00001000          <2> 	sub eax, 0x100000
  4859 00003C43 A3[3D4B0000]        <2> 	mov [physbaseptr], eax
  4860 00003C48 C605[B6210000]00    <2> 	mov byte [termguion], 0
  4861 00003C4F BE[CFB50000]        <2> 	mov esi, graphicstable
  4862 00003C54 30C0                <2> 	xor al, al
  4863                              <2> .clear:
  4864 00003C56 8806                <2> 	mov [esi], al
  4865 00003C58 46                  <2> 	inc esi
  4866 00003C59 81FE[CFB70000]      <2> 	cmp esi, graphicstableend
  4867 00003C5F 72F5                <2> 	jb .clear
  4868 00003C61 E8A51D0000          <2> 	call guisetup
  4869                              <2> 	;The next few lines center a window that is 3/4ths of the full screen
  4870 00003C66 668B15[274B0000]    <2> 	mov dx, [resolutionx]
  4871 00003C6D 668B0D[294B0000]    <2> 	mov cx, [resolutiony]
  4872 00003C74 6689D3              <2> 	mov bx, dx
  4873 00003C77 6689C8              <2> 	mov ax, cx
  4874 00003C7A 66D1EB              <2> 	shr bx, 1
  4875 00003C7D 66D1E8              <2> 	shr ax, 1
  4876 00003C80 6689DA              <2> 	mov dx, bx
  4877 00003C83 66D1EA              <2> 	shr dx, 1
  4878 00003C86 6689C1              <2> 	mov cx, ax
  4879 00003C89 66D1E9              <2> 	shr cx, 1
  4880 00003C8C 6601D3              <2> 	add bx, dx
  4881 00003C8F 6601C8              <2> 	add ax, cx
  4882 00003C92 66D1E9              <2> 	shr cx, 1
  4883 00003C95 66891D[48700000]    <2> 	mov [termwindow], bx
  4884 00003C9C 66A3[4A700000]      <2> 	mov [termwindow + 2], ax	;the previous lines of code make a large terminal window that is 4 characters smaller than the screen
  4885 00003CA2 BE[48700000]        <2> 	mov esi, termwindow
  4886 00003CA7 31DB                <2> 	xor ebx, ebx
  4887 00003CA9 6631C0              <2> 	xor ax, ax
  4888 00003CAC E80C290000          <2> 	call showwindow
  4889 00003CB1 E8620F0000          <2> 	call cursorgui
  4890 00003CB6 E88DE0FFFF          <2> 	call clear
  4891 00003CBB C3                  <2> 	ret
  4892                              <2> 	
  4893                              <1> %endif
  4894                              <1> %include 'source/programs/help.asm'
  4895 00003CBC FF2C68656C7000      <2> db 255,44,"help",0
  4896                              <2> lscmd:	
  4897 00003CC3 B00D                <2> 		mov al, 13
  4898 00003CC5 E8EEE4FFFF          <2> 		call prcharq
  4899 00003CCA BE[E82F0000]        <2> 		mov esi, progstart
  4900 00003CCF BB[37470000]        <2> 		mov ebx, progend
  4901 00003CD4 BE[3A970000]        <2> dir:	mov esi, fileindex
  4902 00003CD9 8A06                <2> 	dirnxt:	mov al, [esi]
  4903 00003CDB 30E4                <2> 		xor ah, ah
  4904 00003CDD 3CFF                <2> 		cmp al, 255
  4905 00003CDF 7415                <2> 		je dirfnd
  4906 00003CE1 46                  <2> 		inc esi
  4907 00003CE2 81FE[3A9B0000]      <2> 		cmp esi,  fileindexend
  4908 00003CE8 7339                <2> 		jae dirdn
  4909 00003CEA EBED                <2> 		jmp dirnxt
  4910                              <2> 	dirfnd3:
  4911 00003CEC 46                  <2> 		inc esi
  4912 00003CED 81FE[3A9B0000]      <2> 		cmp esi, fileindexend
  4913 00003CF3 76E4                <2> 		jbe dirnxt
  4914 00003CF5 4E                  <2> 		dec esi
  4915 00003CF6 46                  <2> 	dirfnd:	inc esi
  4916 00003CF7 8A06                <2> 		mov al, [esi]
  4917 00003CF9 30E4                <2> 		xor ah, ah
  4918 00003CFB 3C2C                <2> 		cmp al, 44
  4919 00003CFD 740B                <2> 		je dirfnd2
  4920 00003CFF 46                  <2> 		inc esi
  4921 00003D00 81FE[3A9B0000]      <2> 		cmp esi,  fileindexend
  4922 00003D06 731B                <2> 		jae dirdn
  4923 00003D08 EBCF                <2> 		jmp dirnxt
  4924 00003D0A 46                  <2> 	dirfnd2: inc esi
  4925 00003D0B E8C0DFFFFF          <2> 		call printquiet
  4926 00003D10 56                  <2> 		push esi
  4927 00003D11 B009                <2> 		mov al, 9
  4928 00003D13 E8A0E4FFFF          <2> 		call prcharq
  4929 00003D18 5E                  <2> 		pop esi
  4930 00003D19 81FE[3A9B0000]      <2> 		cmp esi,  fileindexend
  4931 00003D1F 7302                <2> 		jae dirdn
  4932 00003D21 EBB6                <2> 		jmp dirnxt
  4933 00003D23 BE[25730000]        <2> 	dirdn:	mov esi, line
  4934 00003D28 E8B5DFFFFF          <2> 			call print
  4935 00003D2D C3                  <2> 			ret
  4936 00003D2E 00                  <2> currentdir db 0
  4937                              <1> %include 'source/programs/if.asm'
  4938 00003D2F FF2C696600          <2> 	db 255,44,"if",0
  4939 00003D34 30C0                <2> ifcmd:	xor al, al
  4940 00003D36 3805[B49D0000]      <2> 	cmp [BATCHISON], al
  4941 00003D3C 0F844EF9FFFF        <2> 	je near notbatch
  4942 00003D42 8B1D[922B0000]      <2> 	mov ebx, [currentcommandloc]
  4943 00003D48 81C303000000        <2> 	add ebx, 3
  4944 00003D4E 89DE                <2> 	mov esi, ebx
  4945 00003D50 8A06                <2> chkeqsn: mov al, [esi]
  4946 00003D52 3C00                <2> 	cmp al, 0
  4947 00003D54 0F8436F9FFFF        <2> 	je near notbatch
  4948 00003D5A 3C3D                <2> 	cmp al, '='
  4949 00003D5C 0F8403000000        <2> 	je near chkeqdn
  4950 00003D62 46                  <2> 	inc esi
  4951 00003D63 EBEB                <2> 	jmp chkeqsn
  4952 00003D65 B000                <2> chkeqdn: mov al, 0 
  4953 00003D67 8806                <2> 	mov [esi], al
  4954 00003D69 46                  <2> 	inc esi
  4955 00003D6A E827EEFFFF          <2> 	call tester
  4956 00003D6F 3C01                <2> 	cmp al, 1
  4957 00003D71 0F8405000000        <2> 	je near trueif
  4958 00003D77 E91C000000          <2> 	jmp falseif
  4959 00003D7C 31C0                <2> trueif:	xor eax, eax
  4960 00003D7E A0[4B9D0000]        <2> 	mov al, [IFON]
  4961 00003D83 FEC0                <2> 	inc al
  4962 00003D85 A2[4B9D0000]        <2> 	mov [IFON], al
  4963 00003D8A 30E4                <2> 	xor ah, ah
  4964 00003D8C BE[4C9D0000]        <2> 	mov esi, IFTRUE
  4965 00003D91 01C6                <2> 	add esi, eax
  4966 00003D93 B401                <2> 	mov ah, 1
  4967 00003D95 8826                <2> 	mov [esi], ah
  4968 00003D97 C3                  <2> 	ret 
  4969 00003D98 31C0                <2> falseif: xor eax, eax
  4970 00003D9A A0[4B9D0000]        <2> 	mov al, [IFON]
  4971 00003D9F FEC0                <2> 	inc al
  4972 00003DA1 A2[4B9D0000]        <2> 	mov [IFON], al
  4973 00003DA6 30E4                <2> 	xor ah, ah
  4974 00003DA8 BE[4C9D0000]        <2> 	mov esi, IFTRUE
  4975 00003DAD 01C6                <2> 	add esi, eax
  4976 00003DAF 30E4                <2> 	xor ah, ah
  4977 00003DB1 8826                <2> 	mov [esi], ah
  4978 00003DB3 C3                  <2> 	ret 
  4979                              <1> %include 'source/programs/keycode.asm'
  4980 00003DB4 FF2C6B6579636F6465- <2> db 255,44,"keycode",0
  4981 00003DBD 00                  <2>
  4982                              <2> keycode:
  4983 00003DBE C605[92210000]00    <2> 	mov byte [trans], 0
  4984 00003DC5 C605[61590000]00    <2> 	mov byte [threadson], 0
  4985                              <2> %ifdef io.serial
  4986                              <2> .noserial:
  4987                              <2> 	hlt
  4988                              <2> 	mov dx, [serial.address]
  4989                              <2> 	in al, dx
  4990                              <2> 	cmp al, 0
  4991                              <2> 	je .noserial
  4992                              <2> 	mov cl, al
  4993                              <2> 	call showhexsmall
  4994                              <2> 	cmp al, 0x1B
  4995                              <2> 	jne .noserial
  4996                              <2> 	in al, dx
  4997                              <2> 	mov cl, al
  4998                              <2> 	call showhexsmall
  4999                              <2> 	cmp cl, 0x5B
  5000                              <2> 	je .noserial
  5001                              <2> 	ret
  5002                              <2> %else
  5003 00003DCC E8B8130000          <2> 	call getkey
  5004 00003DD1 31C0                <2> 	xor eax, eax
  5005 00003DD3 31C9                <2> 	xor ecx, ecx
  5006 00003DD5 8A0D[69510000]      <2> 	mov cl, [specialkey]
  5007 00003DDB 80F900              <2> 	cmp cl, 0
  5008 00003DDE 0F8405000000        <2> 	je near .nospecialkeycode
  5009 00003DE4 E8BCEFFFFF          <2> 	call showhexsmall
  5010                              <2> .nospecialkeycode:
  5011 00003DE9 66A1[90210000]      <2> 	mov ax, [lastkey]
  5012 00003DEF 88E1                <2> 	mov cl, ah
  5013 00003DF1 E8AFEFFFFF          <2> 	call showhexsmall
  5014 00003DF6 80FC01              <2> 	cmp ah, 1
  5015 00003DF9 75C3                <2> 	jne keycode
  5016 00003DFB C3                  <2> 	ret
  5017                              <2> %endif
  5018                              <1> %include 'source/programs/logout.asm'
  5019 00003DFC FF2C6C6F676F757400  <2> 	db 255,44,"logout",0
  5020 00003E05 E922E9FFFF          <2> 	jmp os
  5021                              <1> %include 'source/programs/loop.asm'
  5022 00003E0A FF2C6C6F6F7000      <2> 	db 255,44,"loop",0
  5023 00003E11 803D[B59D0000]00    <2> 	cmp byte [LOOPON], 0
  5024 00003E18 0F8501000000        <2> 	jne near filoop
  5025 00003E1E C3                  <2> 	ret
  5026 00003E1F 8B35[B69D0000]      <2> filoop: mov esi, [LOOPPOS]
  5027 00003E25 FE0D[4B9D0000]      <2> 	dec byte [IFON]
  5028 00003E2B C605[B59D0000]00    <2> 	mov byte [LOOPON], 0
  5029 00003E32 8935[B09D0000]      <2> 	mov [BATCHPOS], esi
  5030 00003E38 8935[B8350000]      <2> 	mov [batchedi], esi
  5031 00003E3E C3                  <2> 	ret 
  5032                              <1> %include 'source/programs/ls.asm'
  5033 00003E3F FF2C6C7300          <2> db 255,44,"ls",0
  5034 00003E44 BE[4A830000]        <2> 		mov esi, diskfileindex
  5035                              <2> 	diskindexdir:
  5036 00003E49 803E5F              <2> 		cmp byte [esi], '_'
  5037 00003E4C 7440                <2> 		je nextdiskindexdir
  5038 00003E4E E87DDEFFFF          <2> 		call printquiet
  5039 00003E53 56                  <2> 		push esi
  5040 00003E54 BE[AE3E0000]        <2> 		mov esi, disktab
  5041 00003E59 E872DEFFFF          <2> 		call printquiet
  5042 00003E5E 5E                  <2> 		pop esi
  5043 00003E5F 8B4E05              <2> 		mov ecx, [esi + 5]
  5044 00003E62 C605[A42D0000]05    <2> 		mov byte [firsthexshown], 5
  5045 00003E69 E815F0FFFF          <2> 		call showdec
  5046 00003E6E 56                  <2> 		push esi
  5047 00003E6F BE[25730000]        <2> 		mov esi, line
  5048 00003E74 E857DEFFFF          <2> 		call printquiet
  5049 00003E79 5E                  <2> 		pop esi
  5050 00003E7A 81C609000000        <2> 		add esi, 9
  5051 00003E80 81FE[F4840000]      <2> 		cmp esi, enddiskfileindex
  5052 00003E86 72C1                <2> 		jb diskindexdir
  5053 00003E88 E864E6FFFF          <2> 		call termcopy
  5054 00003E8D C3                  <2> 		ret
  5055                              <2> 	nextdiskindexdir:
  5056 00003E8E 46                  <2> 		inc esi
  5057 00003E8F 803E00              <2> 		cmp byte [esi], 0
  5058 00003E92 75FA                <2> 		jne nextdiskindexdir
  5059 00003E94 81C609000000        <2> 		add esi, 9
  5060 00003E9A 81FE[F4840000]      <2> 		cmp esi, enddiskfileindex
  5061 00003EA0 72A7                <2> 		jb diskindexdir
  5062 00003EA2 E84AE6FFFF          <2> 		call termcopy
  5063 00003EA7 C3                  <2> 		ret
  5064                              <2> 		
  5065 00003EA8 4469736B2000        <2> 		diskmsg db "Disk ",0
  5066 00003EAE 0D09090900          <2> 		disktab db 13,9,9,9,0
  5067                              <1> %include 'source/programs/memory.asm'
  5068 00003EB3 FF2C6D656D6F727900  <2> db 255,44,"memory",0
  5069 00003EBC BE[FA840000]        <2> 	mov esi, memlistbuf
  5070 00003EC1 31FF                <2> 	xor edi, edi
  5071 00003EC3 668B3D[3A870000]    <2> 	mov di, [memlistend]
  5072 00003ECA 01F7                <2> 	add edi, esi
  5073                              <2> printmemmap:
  5074 00003ECC 8B0E                <2> 	mov ecx, [esi]
  5075 00003ECE E8E6EEFFFF          <2> 	call showhex
  5076 00003ED3 81C608000000        <2> 	add esi, 8
  5077 00003ED9 8B0E                <2> 	mov ecx, [esi]
  5078 00003EDB E8D9EEFFFF          <2> 	call showhex
  5079 00003EE0 81C608000000        <2> 	add esi, 8
  5080 00003EE6 8B0E                <2> 	mov ecx, [esi]
  5081 00003EE8 E8CCEEFFFF          <2> 	call showhex
  5082 00003EED 81C608000000        <2> 	add esi, 8
  5083 00003EF3 57                  <2> 	push edi
  5084 00003EF4 56                  <2> 	push esi
  5085 00003EF5 BE[25730000]        <2> 	mov esi, line
  5086 00003EFA E8E3DDFFFF          <2> 	call print
  5087 00003EFF 5E                  <2> 	pop esi
  5088 00003F00 5F                  <2> 	pop edi
  5089 00003F01 39FE                <2> 	cmp esi, edi
  5090 00003F03 72C7                <2> 	jb printmemmap
  5091 00003F05 C3                  <2> 	ret
  5092                              <2> 	
  5093                              <1> %include 'source/programs/pci.asm'
  5094 00003F06 FF2C70636900        <2> db 255,44,"pci",0
  5095 00003F0C E844160000          <2> 	call pcidump
  5096 00003F11 C3                  <2> 	ret 
  5097                              <1> %include 'source/programs/play.asm'
  5098 00003F12 FF2C706C617900      <2> db 255,44,"play",0
  5099 00003F19 E801000000          <2> 	call playsync
  5100 00003F1E C3                  <2> 	ret
  5101                              <2> playsync:
  5102 00003F1F 8B3D[922B0000]      <2> 	mov edi, [currentcommandloc]
  5103 00003F25 81C705000000        <2> 	add edi, 5
  5104 00003F2B BE00004000          <2> 	mov esi, 0x400000
  5105 00003F30 E88D180000          <2> 	call loadfile
  5106 00003F35 81FA94010000        <2> 	cmp edx, 404
  5107 00003F3B 7448                <2> 	je nosoundfound
  5108 00003F3D BB00004000          <2> 	mov ebx, 0x400000
  5109 00003F42 817B0857415645      <2> 	cmp dword [ebx + 8], "WAVE"
  5110 00003F49 0F84B8000000        <2> 	je near wave_player
  5111 00003F4F 66813B534E          <2> 	cmp word [ebx], "SN"
  5112 00003F54 752F                <2> 	jne nosoundfound
  5113 00003F56 81C306000000        <2> 	add ebx, 6
  5114 00003F5C 891D[60020000]      <2> 	mov [soundpos], ebx
  5115 00003F62 035BFC              <2> 	add ebx, [ebx - 4]
  5116 00003F65 891D[64020000]      <2> 	mov [soundendpos], ebx
  5117 00003F6B 66C705[5E020000]00- <2> 	mov word [soundrepititions], 0
  5118 00003F73 00                  <2>
  5119 00003F74 C605[5D020000]01    <2> 	mov byte [soundon], 1
  5120                              <2> waitforsoundendplay:
  5121 00003F7B A0[5D020000]        <2> 	mov al, [soundon]
  5122 00003F80 3C00                <2> 	cmp al, 0
  5123 00003F82 75F7                <2> 	jne waitforsoundendplay
  5124 00003F84 C3                  <2> 	ret
  5125                              <2> nosoundfound:
  5126 00003F85 BE[AB3F0000]        <2> 	mov esi, notfoundsound
  5127 00003F8A E853DDFFFF          <2> 	call print
  5128 00003F8F 8B35[922B0000]      <2> 	mov esi, [currentcommandloc]
  5129 00003F95 81C605000000        <2> 	add esi, 5
  5130 00003F9B E842DDFFFF          <2> 	call print
  5131 00003FA0 BE[EC720000]        <2> 	mov esi, notfound2
  5132 00003FA5 E838DDFFFF          <2> 	call print
  5133 00003FAA C3                  <2> 	ret
  5134 00003FAB 536F756E64202200    <2> notfoundsound db "Sound ",34,0
  5135                              <2> 
  5136                              <2> %ifdef sound.included
  5137                              <2> sbplay:
  5138 00003FB3 BE00004000          <2> 		mov esi, 0x400000
  5139 00003FB8 89F3                <2> 		mov ebx, esi
  5140 00003FBA 81C62C000000        <2> 		add esi, 44
  5141 00003FC0 29F7                <2> 		sub edi, esi
  5142 00003FC2 66893D[58510000]    <2> 		mov [Length1], di
  5143 00003FC9 C1EF10              <2> 		shr edi, 16
  5144 00003FCC 66893D[56510000]    <2> 		mov [Length0], di
  5145 00003FD3 8B4B18              <2> 		mov ecx, [ebx + 24]
  5146 00003FD6 890D[63510000]      <2> 		mov [Freq], ecx
  5147 00003FDC 31C0                <2> 		xor eax, eax
  5148 00003FDE BA00004000          <2> 		mov	edx, 0x400000 ;location of sound
  5149 00003FE3 81C200080000        <2> 		add edx, 2048
  5150 00003FE9 01D0                <2> 		add	eax,edx
  5151 00003FEB 31DB                <2> 		xor ebx, ebx
  5152 00003FED 668B1D[58510000]    <2> 		mov bx, [Length1]
  5153 00003FF4 01C3                <2> 		add ebx, eax
  5154 00003FF6 891D[5A510000]      <2> 		mov [NextMemLoc], ebx
  5155 00003FFC A3[5E510000]        <2> 		mov	[MemLoc],eax
  5156 00004001 E82A100000          <2> 		call DMAPlay
  5157 00004006 C3                  <2> 		ret
  5158                              <2> 
  5159                              <2> wave_player:
  5160 00004007 803D[68510000]01    <2> 	cmp byte [SoundBlaster], 1
  5161 0000400E 0F849FFFFFFF        <2> 	je near sbplay
  5162 00004014 BE[1F400000]        <2> 	mov esi, nosoundblaster
  5163 00004019 E8C4DCFFFF          <2> 	call print
  5164 0000401E C3                  <2> 	ret
  5165                              <2> %else
  5166                              <2> 	wave_player:
  5167                              <2> 		mov esi, nosoundblaster
  5168                              <2> 		call print
  5169                              <2> 		ret
  5170                              <2> %endif
  5171 0000401F 4E6F20536F756E6420- <2> nosoundblaster db "No Sound Blaster detected.",10,0
  5172 00004028 426C61737465722064- <2>
  5173 00004031 657465637465642E0A- <2>
  5174 0000403A 00                  <2>
  5175                              <1> %include 'source/programs/pwd.asm'
  5176 0000403B FF2C70776400        <2> db 255,44,"pwd",0
  5177 00004041 BE[469B0000]        <2> 	mov esi, currentfolder
  5178 00004046 E885DCFFFF          <2> 	call printquiet
  5179 0000404B BE[25730000]        <2> 	mov esi, line
  5180 00004050 E88DDCFFFF          <2> 	call print
  5181 00004055 C3                  <2> 	ret
  5182                              <2> 	
  5183                              <1> %include 'source/programs/reboot.asm'
  5184 00004056 FF2C7265626F6F7400  <2> 	db 255,44,"reboot",0
  5185 0000405F 0F011D[69400000]    <2> 		lidt [idtreboot]
  5186 00004066 CD00                <2> 		int 0
  5187 00004068 F4                  <2> 		hlt
  5188                              <2> 	
  5189 00004069 0000                <2> 	idtreboot dw 0
  5190 0000406B 00000000            <2> 			  dd 0
  5191                              <2> 
  5192                              <2> 	coldboot:
  5193 0000406F 66B84000            <2> 		MOV AX, 0040h
  5194 00004073 8EC0                <2> 		MOV ES, AX
  5195 00004075 2666C7057200000000- <2> 		MOV WORD [ES:00072h], 0h
  5196 0000407E 00                  <2>
  5197 0000407F EA00000000FFFF      <2> 		JMP 0FFFFh:0000h
  5198 00004086 CF                  <2> 		IRET
  5199                              <2> 
  5200                              <2> 	warmboot:
  5201 00004087 66B84000            <2> 		MOV AX, 0040h
  5202 0000408B 8EC0                <2> 		MOV ES, AX
  5203 0000408D 2666C7057200000034- <2> 		MOV WORD [ES:00072h], 01234h
  5204 00004096 12                  <2>
  5205 00004097 EA00000000FFFF      <2> 		JMP 0FFFFh:0000h
  5206 0000409E CF                  <2> 		IRET
  5207                              <2> 		
  5208                              <1> %include 'source/programs/reg.asm'
  5209 0000409F FF2C72656700        <2> db 255,44,"reg",0
  5210 000040A5 CD03                <2> 	int 3
  5211 000040A7 C3                  <2> 	ret 
  5212                              <1> %include 'source/programs/show.asm'
  5213 000040A8 FF2C73686F7700      <2> db 255,44,"show",0
  5214 000040AF 8B3D[922B0000]      <2> 		mov edi, [currentcommandloc]
  5215 000040B5 81C705000000        <2> 		add edi, 5
  5216 000040BB BE00008000          <2> 		mov esi, 0x800000
  5217 000040C0 E8FD160000          <2> 		call loadfile
  5218 000040C5 81FA94010000        <2> 		cmp edx, 404
  5219 000040CB 0F8483000000        <2> 		je near filenotfound
  5220 000040D1 BE00008000          <2> 		mov esi, 0x800000
  5221                              <2> %ifdef gui.included
  5222 000040D6 66813E424D          <2> 		cmp word [esi], "BM"
  5223 000040DB 7410                <2> 		je bmpfound
  5224                              <2> %endif
  5225 000040DD E800DCFFFF          <2> 		call print
  5226 000040E2 BE[25730000]        <2> 		mov esi, line
  5227 000040E7 E8F6DBFFFF          <2> 		call print
  5228 000040EC C3                  <2> 		ret
  5229                              <2> %ifdef gui.included
  5230                              <2> bmpfound:
  5231 000040ED 803D[F4840000]00    <2> 		cmp byte [guion], 0
  5232 000040F4 0F8428000000        <2> 		je near noguibmp
  5233 000040FA BE00008000          <2> 		mov esi, 0x800000
  5234 000040FF 31C9                <2> 		xor ecx, ecx
  5235 00004101 31D2                <2> 		xor edx, edx
  5236 00004103 31C0                <2> 		xor eax, eax
  5237 00004105 31DB                <2> 		xor ebx, ebx
  5238 00004107 E87B2C0000          <2> 		call showbmp
  5239 0000410C 30C0                <2> 		xor al, al
  5240 0000410E B405                <2> 		mov ah, 5
  5241 00004110 CD30                <2> 		int 30h
  5242 00004112 E84F180000          <2> 		call guiclear
  5243 00004117 E80E1A0000          <2> 		call clearmousecursor
  5244 0000411C E8C9200000          <2> 		call reloadallgraphics
  5245 00004121 C3                  <2> 		ret
  5246                              <2> noguibmp:
  5247 00004122 BE[2D410000]        <2> 		mov esi, warnguimsg
  5248 00004127 E8B6DBFFFF          <2> 		call print
  5249 0000412C C3                  <2> 		ret
  5250 0000412D 546869732063616E20- <2> warnguimsg db "This can not be done without the GUI.",10,0
  5251 00004136 6E6F7420626520646F- <2>
  5252 0000413F 6E6520776974686F75- <2>
  5253 00004148 742074686520475549- <2>
  5254 00004151 2E0A00              <2>
  5255                              <2> %endif
  5256                              <2> 
  5257                              <2> filenotfound:
  5258 00004154 BE[87410000]        <2> 		mov esi, filenf
  5259 00004159 E884DBFFFF          <2> 		call print
  5260 0000415E 8B35[922B0000]      <2> 		mov esi, [currentcommandloc]
  5261                              <2> findfilenotfoundzero:
  5262 00004164 8A06                <2> 		mov al, [esi]
  5263 00004166 46                  <2> 		inc esi
  5264 00004167 3C00                <2> 		cmp al, 0
  5265 00004169 7411                <2> 		je nofilenamenotfound
  5266 0000416B 81FE[BAB50000]      <2> 		cmp esi, buftxtend
  5267 00004171 7309                <2> 		jae nofilenamenotfound
  5268 00004173 3C20                <2> 		cmp al, " "
  5269 00004175 75ED                <2> 		jne findfilenotfoundzero
  5270 00004177 E866DBFFFF          <2> 		call print
  5271                              <2> nofilenamenotfound:
  5272 0000417C BE[92410000]        <2> 		mov esi, filenf2
  5273 00004181 E85CDBFFFF          <2> 		call print
  5274 00004186 C3                  <2> 		ret
  5275 00004187 5468652066696C6520- <2> filenf db "The file ",34,0
  5276 00004190 2200                <2>
  5277 00004192 2220636F756C64206E- <2> filenf2 db 34," could not be found.",10,0
  5278 0000419B 6F7420626520666F75- <2>
  5279 000041A4 6E642E0A00          <2>
  5280                              <1> %include 'source/programs/shush.asm'
  5281 000041A9 FF2C736875736800    <2> db 255,44,"shush",0
  5282 000041B1 BE[BC410000]        <2> 	mov esi, shushmsg
  5283 000041B6 E827DBFFFF          <2> 	call print
  5284 000041BB C3                  <2> 	ret
  5285 000041BC 57656C636F6D652074- <2> 	shushmsg db "Welcome to the SollerOS Hardly Unix-Compatible Shell!",10,0
  5286 000041C5 6F2074686520536F6C- <2>
  5287 000041CE 6C65724F5320486172- <2>
  5288 000041D7 646C7920556E69782D- <2>
  5289 000041E0 436F6D70617469626C- <2>
  5290 000041E9 65205368656C6C210A- <2>
  5291 000041F2 00                  <2>
  5292                              <1> %include 'source/programs/stop.asm'
  5293 000041F3 FF2C73746F7000      <2> 	db 255,44,"stop",0
  5294 000041FA 30C0                <2> stop:	xor al, al
  5295 000041FC A2[B49D0000]        <2> 	mov [BATCHISON], al
  5296 00004201 A2[4B9D0000]        <2> 	mov [IFON], al
  5297 00004206 A2[4C9D0000]        <2> 	mov [IFTRUE], al
  5298 0000420B A2[B59D0000]        <2> 	mov [LOOPON], al
  5299 00004210 C3                  <2> 	ret 
  5300                              <1> %include 'source/programs/system.asm'
  5301 00004211 FF2C73797374656D00  <2> 	db 255,44,"system",0
  5302 0000421A BE[CC420000]        <2> 	mov esi, systeminfomsg
  5303 0000421F E8ACDAFFFF          <2> 	call printquiet
  5304 00004224 B9[4A830000]        <2> 	mov ecx, osend
  5305 00004229 E855ECFFFF          <2> 	call showdec
  5306 0000422E BE[E1420000]        <2> 	mov esi, diskbytemsg
  5307 00004233 E898DAFFFF          <2> 	call printquiet
  5308 00004238 B9[4A830000]        <2> 	mov ecx, osend
  5309 0000423D 81C1[20A82900]      <2> 	add ecx, commandbufend
  5310 00004243 81E9[F4840000]      <2> 	sub ecx, bssstart	;add the extra buffer space
  5311 00004249 E835ECFFFF          <2> 	call showdec
  5312 0000424E BE[F8420000]        <2> 	mov esi, membytemsg
  5313 00004253 E878DAFFFF          <2> 	call printquiet
  5314                              <2> getcpuspeed:
  5315 00004258 B8FE000000          <2> 	mov eax, 0xFE
  5316 0000425D E621                <2> 	out 0x21, al ;mask off all but timer interrupt
  5317 0000425F B020                <2> 	mov al, 0x20
  5318 00004261 E620                <2> 	out 0x20, al
  5319 00004263 31C0                <2> 	xor eax, eax
  5320 00004265 F4                  <2> 	hlt
  5321 00004266 C605[46020000]01    <2> 	mov byte [testingcpuspeed], 1
  5322                              <2> cpuspeedloop:	;wait until next timer interrupt, then inc eax until the next
  5323 0000426D 40                  <2> 	inc eax
  5324 0000426E EBFD                <2> 	jmp cpuspeedloop
  5325                              <2> cpuspeedloopend:
  5326 00004270 31C0                <2> 	xor eax, eax
  5327 00004272 E621                <2> 	out 0x21, al
  5328 00004274 B020                <2> 	mov al, 0x20
  5329 00004276 E620                <2> 	out 0x20, al
  5330 00004278 31D2                <2> 	xor edx, edx
  5331 0000427A 31C0                <2> 	xor eax, eax
  5332 0000427C A1[47020000]        <2> 	mov eax, [cpuspeedperint]
  5333 00004281 D1E0                <2> 	shl eax, 1	;the cpu speed loop actually contains 2 commands so multiply the
  5334                              <2> 				;result by 2
  5335 00004283 8B1D[51020000]      <2> 	mov ebx, [timeinterval]
  5336 00004289 C1EB0A              <2> 	shr ebx, 10 ;divide the interval by 1024
  5337 0000428C F7F3                <2> 	div ebx	;quotient in eax, remainder in edx
  5338 0000428E 89C1                <2> 	mov ecx, eax
  5339 00004290 E8EEEBFFFF          <2> 	call showdec
  5340 00004295 BE[3D430000]        <2> 	mov esi, cpuspeedmsg
  5341 0000429A E831DAFFFF          <2> 	call printquiet
  5342 0000429F 8B0D[4B020000]      <2> 	mov ecx, [memoryspace]
  5343 000042A5 C1E914              <2> 	shr ecx, 20
  5344 000042A8 41                  <2> 	inc ecx	;the reading is one MB behind
  5345 000042A9 E8D5EBFFFF          <2> 	call showdec
  5346 000042AE BE[43430000]        <2> 	mov esi, memoryspacemsg
  5347 000042B3 E82ADAFFFF          <2> 	call print
  5348                              <2> %ifdef sound.included
  5349 000042B8 803D[68510000]00    <2> 	cmp byte [SoundBlaster], 0
  5350 000042BF 740A                <2> 	je .nosb
  5351 000042C1 BE[25430000]        <2> 	mov esi, soundblastermsg
  5352 000042C6 E817DAFFFF          <2> 	call print
  5353                              <2> .nosb:
  5354                              <2> %endif
  5355 000042CB C3                  <2> 	ret
  5356                              <2> 
  5357 000042CC 4B65726E656C20496E- <2> systeminfomsg db "Kernel Information:",10,0
  5358 000042D5 666F726D6174696F6E- <2>
  5359 000042DE 3A0A00              <2>
  5360 000042E1 427974657320446973- <2> diskbytemsg db "Bytes Disk Space Used",10,0
  5361 000042EA 6B2053706163652055- <2>
  5362 000042F3 7365640A00          <2>
  5363 000042F8 4279746573204D656D- <2> membytemsg db "Bytes Memory Space Used",10,"System Information:",10,0
  5364 00004301 6F7279205370616365- <2>
  5365 0000430A 20557365640A537973- <2>
  5366 00004313 74656D20496E666F72- <2>
  5367 0000431C 6D6174696F6E3A0A00  <2>
  5368                              <2> %ifdef sound.included
  5369 00004325 536F756E64626C6173- <2> 	soundblastermsg db "Soundblaster Detected.",10,0
  5370 0000432E 746572204465746563- <2>
  5371 00004337 7465642E0A00        <2>
  5372                              <2> %endif
  5373 0000433D 4D4950530A00        <2> cpuspeedmsg db "MIPS",10,0
  5374 00004343 4D42204D656D6F7279- <2> memoryspacemsg db "MB Memory Space Free",10,0
  5375 0000434C 205370616365204672- <2>
  5376 00004355 65650A00            <2>
  5377                              <1> %include 'source/programs/time.asm'
  5378 00004359 082E30303030303030- <2> timenscache db 8,".000000000"
  5379 00004362 3030                <2>
  5380 00004364 200A00              <2> timenscacheend: db " ",10,0
  5381 00004367 00                  <2> istimeset db 0
  5382 00004368 456E74657220746865- <2> settimemsg db "Enter the current UNIX time:",10,0
  5383 00004371 2063757272656E7420- <2>
  5384 0000437A 554E49582074696D65- <2>
  5385 00004383 3A0A00              <2>
  5386 00004386 00<rept>            <2> timeinputbuffer times 12 db 0
  5387 00004392 00                  <2> timeinputbend: db 0
  5388                              <2> 
  5389 00004393 FF2C74696D6500      <2> db 255,44,"time",0
  5390 0000439A 803D[67430000]00    <2> 	cmp byte [istimeset], 0
  5391 000043A1 753A                <2> 	jne timeisset
  5392 000043A3 BE[68430000]        <2> 	mov esi, settimemsg
  5393 000043A8 E835D9FFFF          <2> 	call print
  5394 000043AD BE[86430000]        <2> 	mov esi, timeinputbuffer
  5395 000043B2 BF[92430000]        <2> 	mov edi, timeinputbend
  5396 000043B7 E80ADAFFFF          <2> 	call readline
  5397 000043BC BE[86430000]        <2> 	mov esi, timeinputbuffer
  5398 000043C1 31FF                <2> 	xor edi, edi
  5399 000043C3 E89DEBFFFF          <2> 	call cnvrttxt
  5400 000043C8 890D[55020000]      <2> 	mov [timeseconds], ecx
  5401 000043CE 31C9                <2> 	xor ecx, ecx
  5402 000043D0 890D[59020000]      <2> 	mov [timenanoseconds], ecx
  5403 000043D6 C605[67430000]01    <2> 	mov byte [istimeset], 1
  5404                              <2> timeisset:
  5405 000043DD 8B0D[55020000]      <2> 	mov ecx, [timeseconds]
  5406 000043E3 E89BEAFFFF          <2> 	call showdec
  5407                              <2> 	
  5408 000043E8 8B0D[59020000]      <2> 	mov ecx, [timenanoseconds]
  5409 000043EE BE[59430000]        <2> 	mov esi, timenscache
  5410 000043F3 C7460230303030      <2> 	mov dword [esi+ 2], "0000"
  5411 000043FA C7460630303030      <2> 	mov dword [esi + 6], "0000"
  5412 00004401 C6460A30            <2> 	mov byte [esi + 10], "0"
  5413 00004405 BE[64430000]        <2> 	mov esi, timenscacheend
  5414 0000440A E857E8FFFF          <2> 	call convert
  5415 0000440F BE[59430000]        <2> 	mov esi, timenscache
  5416 00004414 E8C9D8FFFF          <2> 	call print
  5417                              <2> 	
  5418 00004419 E80F000000          <2> 	call time
  5419 0000441E BE[F9450000]        <2> 	mov esi, timeshow
  5420 00004423 E8BAD8FFFF          <2> 	call print
  5421 00004428 E9BC000000          <2> 	jmp findday
  5422                              <2> time:
  5423 0000442D E84F010000          <2> 	call tstackput1
  5424 00004432 B00A                <2> 	mov al,10			;Get RTC register A
  5425 00004434 E879010000          <2> 	call tget1
  5426 00004439 A880                <2> 	test al,0x80			;Is update in progress?
  5427 0000443B 75F0                <2> 	jne time				; yes, wait
  5428                              <2> 
  5429 0000443D B000                <2> 	mov al,0			;Get seconds (00 to 59)
  5430 0000443F E86E010000          <2> 	call tget1
  5431 00004444 A2[F0450000]        <2> 	mov [RTCtimeSecond],al
  5432                              <2> 
  5433 00004449 B002                <2> 	mov al,0x02			;Get minutes (00 to 59)
  5434 0000444B E862010000          <2> 	call tget1
  5435 00004450 A2[F1450000]        <2> 	mov [RTCtimeMinute],al
  5436                              <2> 
  5437 00004455 B004                <2> 	mov al,0x04			;Get hours (see notes)
  5438 00004457 E856010000          <2> 	call tget1
  5439 0000445C A2[F2450000]        <2> 	mov [RTCtimeHour],al
  5440                              <2> 
  5441 00004461 B007                <2> 	mov al,0x07			;Get day of month (01 to 31)
  5442 00004463 E84A010000          <2> 	call tget1
  5443 00004468 A2[F3450000]        <2> 	mov [RTCtimeDay],al
  5444                              <2> 
  5445 0000446D B008                <2> 	mov al,0x08			;Get month (01 to 12)
  5446 0000446F E83E010000          <2> 	call tget1
  5447 00004474 A2[F4450000]        <2> 	mov [RTCtimeMonth],al
  5448                              <2> 
  5449 00004479 B009                <2> 	mov al,0x09			;Get year (00 to 99)
  5450 0000447B E832010000          <2> 	call tget1
  5451 00004480 A2[F5450000]        <2> 	mov [RTCtimeYear],al
  5452                              <2> 	
  5453 00004485 BE[F9450000]        <2> 	mov esi, timeshow
  5454 0000448A 8A2D[F2450000]      <2> 	mov ch, [RTCtimeHour]
  5455 00004490 E828010000          <2> 	call tput1
  5456 00004495 8A2D[F1450000]      <2> 	mov ch, [RTCtimeMinute]
  5457 0000449B E81D010000          <2> 	call tput1
  5458 000044A0 8A2D[F0450000]      <2> 	mov ch, [RTCtimeSecond]
  5459 000044A6 E812010000          <2> 	call tput1
  5460 000044AB BE[02460000]        <2> 	mov esi, dateshow
  5461 000044B0 8A2D[F4450000]      <2> 	mov ch, [RTCtimeMonth]
  5462 000044B6 E802010000          <2> 	call tput1
  5463 000044BB 8A2D[F3450000]      <2> 	mov ch, [RTCtimeDay]
  5464 000044C1 E8F7000000          <2> 	call tput1
  5465 000044C6 B520                <2> 	mov ch, 0x20
  5466 000044C8 E8F0000000          <2> 	call tput1
  5467 000044CD 4E                  <2> 	dec esi
  5468 000044CE 8A2D[F5450000]      <2> 	mov ch, [RTCtimeYear]
  5469 000044D4 E8E4000000          <2> 	call tput1
  5470 000044D9 E8BD000000          <2> 	call tstackget1
  5471 000044DE C3                  <2> 	ret
  5472 000044DF BE[F9450000]        <2> 	mov esi, timeshow
  5473 000044E4 E8F9D7FFFF          <2> 	call print
  5474                              <2> ;;get day of week
  5475                              <2> ;;add these:
  5476                              <2> ;;century value
  5477                              <2> ;;last 2 digits of year
  5478                              <2> ;;last 2 digits of year right shifted twice
  5479                              <2> ;;month table value
  5480                              <2> ;;day of the month
  5481                              <2> ;;divide these by 7
  5482                              <2> ;;the remainder is the day
  5483                              <2> findday:
  5484 000044E9 31C0                <2> 	xor eax, eax
  5485                              <2> ;;first convert the values from BCD to hex
  5486 000044EB A0[F3450000]        <2> 	mov al, [RTCtimeDay]
  5487 000044F0 E873000000          <2> 	call converttohex
  5488 000044F5 8825[F6450000]      <2> 	mov [dayhex], ah
  5489 000044FB A0[F4450000]        <2> 	mov al, [RTCtimeMonth]
  5490 00004500 E863000000          <2> 	call converttohex
  5491 00004505 8825[F7450000]      <2> 	mov [monthhex], ah
  5492 0000450B A0[F5450000]        <2> 	mov al, [RTCtimeYear]
  5493 00004510 E853000000          <2> 	call converttohex
  5494 00004515 8825[F8450000]      <2> 	mov [yearhex], ah
  5495 0000451B 31C0                <2> 	xor eax, eax
  5496 0000451D A0[F8450000]        <2> 	mov al, [yearhex]
  5497 00004522 C0E802              <2> 	shr al, 2
  5498 00004525 0205[F8450000]      <2> 	add al, [yearhex]
  5499 0000452B 0506000000          <2> 	add eax, 6
  5500 00004530 31DB                <2> 	xor ebx, ebx
  5501 00004532 8A1D[F7450000]      <2> 	mov bl, [monthhex]
  5502 00004538 FECB                <2> 	dec bl
  5503 0000453A 81C3[17460000]      <2> 	add ebx, month
  5504 00004540 31C9                <2> 	xor ecx, ecx
  5505 00004542 8A0B                <2> 	mov cl, [ebx]
  5506 00004544 01C8                <2> 	add eax, ecx
  5507 00004546 8A0D[F6450000]      <2> 	mov cl, [dayhex]
  5508 0000454C 01C8                <2> 	add eax, ecx
  5509 0000454E 66BB0700            <2> 	mov bx, 7
  5510 00004552 31D2                <2> 	xor edx, edx
  5511 00004554 66F7F3              <2> 	div bx
  5512 00004557 C1E202              <2> 	shl edx, 2
  5513 0000455A 81C2[23460000]      <2> 	add edx, day
  5514 00004560 8B32                <2> 	mov esi, [edx]
  5515 00004562 E87BD7FFFF          <2> 	call print
  5516 00004567 C3                  <2> 	ret
  5517                              <2> 	
  5518                              <2> converttohex:
  5519 00004568 88C4                <2> 	mov ah, al
  5520 0000456A C0E804              <2> 	shr al, 4
  5521 0000456D C0E404              <2> 	shl ah, 4
  5522 00004570 C0EC04              <2> 	shr ah, 4
  5523 00004573 3C00                <2> 	cmp al, 0
  5524 00004575 7409                <2> 	je noconverttohex
  5525                              <2> converttohexlp:
  5526 00004577 80C40A              <2> 	add ah, 10
  5527 0000457A FEC8                <2> 	dec al
  5528 0000457C 3C00                <2> 	cmp al, 0
  5529 0000457E 75F7                <2> 	jne converttohexlp
  5530                              <2> noconverttohex:
  5531 00004580 C3                  <2> 	ret
  5532                              <2> 	
  5533                              <2> tstackput1:
  5534 00004581 8935[EC450000]      <2> 	mov [tstack + 20], esi
  5535 00004587 BE[D8450000]        <2> 	mov esi, tstack
  5536 0000458C 8906                <2> 	mov [esi], eax
  5537 0000458E 895E04              <2> 	mov [esi + 4], ebx
  5538 00004591 894E08              <2> 	mov [esi + 8], ecx
  5539 00004594 89560C              <2> 	mov [esi + 12], edx
  5540 00004597 897E10              <2> 	mov [esi + 16], edi
  5541 0000459A C3                  <2> 	ret
  5542                              <2> 	
  5543                              <2> tstackget1:
  5544 0000459B BE[D8450000]        <2> 	mov esi, tstack
  5545 000045A0 8B06                <2> 	mov eax, [esi]
  5546 000045A2 8B5E04              <2> 	mov ebx, [esi + 4]
  5547 000045A5 8B4E08              <2> 	mov ecx, [esi + 8]
  5548 000045A8 8B560C              <2> 	mov edx, [esi + 12]
  5549 000045AB 8B7E10              <2> 	mov edi, [esi + 16]
  5550 000045AE 8B7614              <2> 	mov esi, [esi + 20]
  5551 000045B1 C3                  <2> 	ret
  5552                              <2> 	
  5553                              <2> tget1:
  5554 000045B2 66BA7000            <2> 	mov dx, 0x70
  5555 000045B6 EE                  <2> 	out dx, al
  5556 000045B7 6642                <2> 	inc dx
  5557 000045B9 EC                  <2> 	in al, dx
  5558 000045BA 664A                <2> 	dec dx
  5559 000045BC C3                  <2> 	ret
  5560                              <2> 	
  5561                              <2> tput1:
  5562 000045BD 66C1E904            <2> 	shr cx, 4
  5563 000045C1 B030                <2> 	mov al, 48
  5564 000045C3 00E8                <2> 	add al, ch
  5565 000045C5 8806                <2> 	mov [esi], al
  5566 000045C7 46                  <2> 	inc esi
  5567 000045C8 B030                <2> 	mov al, 48
  5568 000045CA C0E904              <2> 	shr cl, 4
  5569 000045CD 00C8                <2> 	add al, cl
  5570 000045CF 8806                <2> 	mov [esi], al
  5571 000045D1 81C602000000        <2> 	add esi, 2
  5572 000045D7 C3                  <2> 	ret
  5573                              <2> 		
  5574 000045D8 000000000000000000- <2> 	tstack dd 0,0,0,0,0,0
  5575 000045E1 000000000000000000- <2>
  5576 000045EA 000000000000        <2>
  5577 000045F0 00                  <2> 	RTCtimeSecond db 0
  5578 000045F1 00                  <2> 	RTCtimeMinute db 0
  5579 000045F2 00                  <2> 	RTCtimeHour db 0
  5580 000045F3 00                  <2> 	RTCtimeDay db 0
  5581 000045F4 00                  <2> 	RTCtimeMonth db 0
  5582 000045F5 00                  <2> 	RTCtimeYear db 0
  5583 000045F6 00                  <2> 	dayhex db 0
  5584 000045F7 00                  <2> 	monthhex db 0
  5585 000045F8 00                  <2> 	yearhex db 0
  5586 000045F9 30303A30303A30300A  <2> 	timeshow db "00:00:00",10
  5587 00004602 30302D30302D303030- <2> 	dateshow db "00-00-0000",10,0
  5588 0000460B 300A00              <2>
  5589                              <2> 	oldcentury:	;;from 1700 to 1900
  5590 0000460E 040200              <2> 	db 4,2,0
  5591                              <2> 	century:	;;from 2000 to 2500
  5592 00004611 060402000604        <2> 	db 6,4,2,0,6,4
  5593                              <2> 	month:
  5594 00004617 000303060104060205- <2> 	db 0,3,3,6,1,4,6,2,5,0,3,5
  5595 00004620 000305              <2>
  5596                              <2> 	day:
  5597 00004623 [3F460000]          <2> 	dd sunday
  5598 00004627 [47460000]          <2> 	dd monday
  5599 0000462B [4F460000]          <2> 	dd tuesday
  5600 0000462F [58460000]          <2> 	dd wednesday
  5601 00004633 [63460000]          <2> 	dd thursday
  5602 00004637 [6D460000]          <2> 	dd friday
  5603 0000463B [75460000]          <2> 	dd saturday
  5604                              <2> sunday:
  5605 0000463F 53756E6461790A00    <2> 	db "Sunday",10,0
  5606                              <2> monday:
  5607 00004647 4D6F6E6461790A00    <2> 	db "Monday",10,0
  5608                              <2> tuesday:
  5609 0000464F 547565736461790A00  <2> 	db "Tuesday",10,0
  5610                              <2> wednesday:
  5611 00004658 5765646E6573646179- <2> 	db "Wednesday",10,0
  5612 00004661 0A00                <2>
  5613                              <2> thursday:
  5614 00004663 54687572736461790A- <2> 	db "Thursday",10,0
  5615 0000466C 00                  <2>
  5616                              <2> friday:
  5617 0000466D 4672696461790A00    <2> 	db "Friday",10,0
  5618                              <2> saturday:
  5619 00004675 53617475726461790A- <2> 	db "Saturday",10,0
  5620 0000467E 00                  <2>
  5621                              <1> %include 'source/programs/turnoff.asm'
  5622 0000467F FF2C7475726E6F6666- <2> 	db 255,44,"turnoff",0
  5623 00004688 00                  <2>
  5624                              <2> 	turnoff:
  5625 00004689 66BB[A446]          <2> 			mov bx, shutdown
  5626 0000468D 66891D[B10C0000]    <2> 			mov [realmodeptr], bx
  5627 00004694 BB[CE460000]        <2> 			mov ebx, halt
  5628 00004699 891D[AD0C0000]      <2> 			mov [realmodereturn], ebx
  5629 0000469F E9F2C4FFFF          <2> 			jmp realmode
  5630                              <2> 
  5631                              <2> [BITS 16]
  5632                              <2> 		shutdown:
  5633 000046A4 B453                <2> 			mov ah, 0x53
  5634 000046A6 B004                <2> 			mov al, 4
  5635 000046A8 31DB                <2> 			xor bx, bx
  5636 000046AA CD15                <2> 			int 0x15
  5637                              <2> 			
  5638 000046AC B453                <2> 			mov ah, 0x53
  5639 000046AE B001                <2> 			mov al, 1
  5640 000046B0 31DB                <2> 			xor bx, bx
  5641 000046B2 CD15                <2> 			int 0x15
  5642                              <2> 			
  5643 000046B4 B453                <2> 			mov ah, 0x53
  5644 000046B6 B008                <2> 			mov al, 8
  5645 000046B8 BB0100              <2> 			mov bx, 1
  5646 000046BB B90100              <2> 			mov cx, 1
  5647 000046BE CD15                <2> 			int 0x15
  5648                              <2> 			
  5649 000046C0 B453                <2> 			mov ah, 0x53
  5650 000046C2 B007                <2> 			mov al, 7
  5651 000046C4 BB0100              <2> 			mov bx, 1
  5652 000046C7 B90300              <2> 			mov cx, 3
  5653 000046CA CD15                <2> 			int 0x15
  5654 000046CC EBFE                <2> 			jmp $
  5655                              <2> 			[BITS 32]
  5656 000046CE EBFE                <2> halt: jmp $
  5657                              <1> %include 'source/programs/wait.asm'
  5658 000046D0 FF2C7761697400      <2> db 255,44,"wait",0
  5659                              <2> waitkey:
  5660 000046D7 E866DAFFFF          <2> 		call getchar
  5661 000046DC C3                  <2> 		ret
  5662                              <1> %include 'source/programs/while.asm'
  5663 000046DD FF2C7768696C6500    <2> db 255,44,"while",0
  5664 000046E5 30C0                <2> whilecmd:  xor al, al
  5665 000046E7 3805[B49D0000]      <2> 	cmp [BATCHISON], al
  5666 000046ED 0F849DEFFFFF        <2> 	je near notbatch
  5667 000046F3 8B35[B09D0000]      <2> 	mov esi, [BATCHPOS]
  5668 000046F9 81EE02000000        <2> 	sub esi, 2
  5669 000046FF 4E                  <2> whilefnd: dec esi
  5670 00004700 8A06                <2> 	mov al, [esi]
  5671 00004702 3C0A                <2> 	cmp al, 10
  5672 00004704 0F840A000000        <2> 	je near whilefnd2
  5673 0000470A 3C00                <2> 	cmp al, 0
  5674 0000470C 0F8402000000        <2> 	je near whilefnd2
  5675 00004712 EBEB                <2> 	jmp whilefnd
  5676                              <2> whilefnd2:
  5677 00004714 46                  <2> 	inc esi
  5678 00004715 8935[B69D0000]      <2> 	mov [LOOPPOS], esi
  5679 0000471B C605[B59D0000]01    <2> 	mov BYTE [LOOPON], 1
  5680 00004722 BE[BAB10000]        <2> 	mov esi, buftxt
  5681 00004727 BB[BAB10000]        <2> 	mov ebx, buftxt
  5682 0000472C 81C306000000        <2> 	add ebx, 6
  5683 00004732 E919F6FFFF          <2> 	jmp chkeqsn
  5684                              <1> progend:		;programs end here	
  5685                              <1> batchprogend:
  5686                                  	%include "source/hardware.asm"
  5687                              <1> %ifdef gui.included
  5688                              <1> 	%include "source/drivers/video/vesa.asm"
  5689                              <2> [BITS 16]
  5690                              <2> guiswitch:
  5691 00004737 81F90000            <2> 	cmp cx, 0
  5692 0000473B 750B                <2> 	jne guiswitchdefnum
  5693 0000473D B81200              <2> 	mov ax, 12h
  5694 00004740 31DB                <2> 	xor bx, bx
  5695 00004742 CD10                <2> 	int 10h
  5696 00004744 E85100              <2> 	call guiloadagain
  5697                              <2> guiswitchnocando:
  5698 00004747 C3                  <2> 	ret	;return without switching as mode number is bad
  5699                              <2> guiswitchdefnum:	;switch to a defined mode number
  5700 00004748 B8004F              <2> 	mov ax, 0x4F00
  5701 0000474B BF[1549]            <2> 	mov di, VBEMODEBLOCK
  5702 0000474E CD10                <2> 	int 10h
  5703 00004750 BE[3749]            <2> 	mov si, reserved
  5704 00004753 81EE0200            <2> 	sub si, 2
  5705                              <2> .loop:
  5706 00004757 81C60200            <2> 	add si, 2
  5707 0000475B 81FE[154A]          <2> 	cmp si, oemdata
  5708 0000475F 74E6                <2> 	je guiswitchnocando
  5709 00004761 813CFFFF            <2> 	cmp word [si], 0xFFFF
  5710 00004765 74E0                <2> 	je guiswitchnocando
  5711 00004767 390C                <2> 	cmp [si], cx
  5712 00004769 75EC                <2> 	jne .loop
  5713 0000476B 8936[6F48]          <2> 	mov [videomodecache], si
  5714 0000476F 81C90040            <2> 	or cx, 0x4000	;make sure linear frame buffer is selected
  5715 00004773 B8014F              <2> 	mov ax, 0x4F01
  5716 00004776 BF[154B]            <2> 	mov di, VBEMODEINFOBLOCK
  5717 00004779 890E[6D48]          <2> 	mov [vesamode], cx
  5718 0000477D CD10                <2> 	int 10h
  5719 0000477F E9CB00              <2> 	jmp selectedvesa
  5720                              <2> guiload:
  5721 00004782 BE[ED48]            <2> 	mov si, bootmsg
  5722 00004785 E8EFB8              <2> 	call printrm
  5723 00004788 31C0                <2> 	xor ax, ax
  5724 0000478A CD16                <2> 	int 16h
  5725 0000478C 3C79                <2> 	cmp al, "y"
  5726 0000478E 0F859FB8            <2> 	jne near vgaset
  5727 00004792 BE[2473]            <2> 	mov si, crlf
  5728 00004795 E8DFB8              <2> 	call printrm
  5729                              <2> guiloadagain:
  5730 00004798 B8004F              <2> 	mov ax, 04F00h
  5731 0000479B BF[1549]            <2> 	mov di, VBEMODEBLOCK
  5732 0000479E CD10                <2> 	int 10h
  5733 000047A0 BE[3749]            <2> 	mov si, reserved
  5734 000047A3 81EE0200            <2> 	sub si, 2
  5735                              <2> findvideomodes:
  5736 000047A7 81C60200            <2> 	add si, 2
  5737 000047AB 8B0C                <2> 	mov cx, [si]
  5738 000047AD 81F9FFFF            <2> 	cmp cx, 0xFFFF
  5739 000047B1 0F840A00            <2> 	je near nextvmode
  5740 000047B5 81FE[154A]          <2> 	cmp si, oemdata
  5741 000047B9 0F8374B8            <2> 	jae near vgaset	;;kill if no valid list is found
  5742 000047BD EBE8                <2> 	jmp findvideomodes 	
  5743                              <2> ;;debug,shows vmodes available
  5744                              <2> nextvmode:
  5745 000047BF 81EE0200            <2> 	sub si, 2
  5746 000047C3 81FE[3749]          <2> 	cmp si, reserved
  5747 000047C7 0F82CDFF            <2> 	jb near guiloadagain
  5748 000047CB 8B0C                <2> 	mov cx, [si]
  5749 000047CD 81F9FFFF            <2> 	cmp cx, 0xFFFF
  5750 000047D1 0F84EAFF            <2> 	je near nextvmode
  5751 000047D5 81C90040            <2> 	or cx, 0x4000 		;;Linear Frame Buffer
  5752 000047D9 B8014F              <2> 	mov ax, 04F01h
  5753 000047DC BF[154B]            <2> 	mov di, VBEMODEINFOBLOCK
  5754 000047DF 890E[6D48]          <2> 	mov [vesamode], cx
  5755 000047E3 CD10                <2> 	int 10h
  5756 000047E5 A0[2E4B]            <2> 	mov al, [bitsperpixel]
  5757 000047E8 3C10                <2> 	cmp al, 16
  5758 000047EA 75D3                <2> 	jne nextvmode
  5759 000047EC 8936[6F48]          <2> 	mov [videomodecache], si
  5760 000047F0 84E4                <2> 	test ah, ah
  5761 000047F2 0F842200            <2> 	jz near setvesamode
  5762 000047F6 EBC7                <2> 	jmp nextvmode
  5763 000047F8 0A0D49732074686973- <2> isthisvideook db 10,13,"Is this video mode OK?(y/n)",13,10,0
  5764 00004801 20766964656F206D6F- <2>
  5765 0000480A 6465204F4B3F28792F- <2>
  5766 00004813 6E290D0A00          <2>
  5767                              <2> setvesamode:
  5768 00004818 8B0E[274B]          <2> 	mov cx, [resolutionx]
  5769 0000481C E85900              <2> 	call decshow
  5770 0000481F B078                <2> 	mov al, "x"
  5771 00004821 E8C100              <2> 	call char
  5772 00004824 8B0E[294B]          <2> 	mov cx, [resolutiony]
  5773 00004828 E84D00              <2> 	call decshow
  5774 0000482B B040                <2> 	mov al, "@"
  5775 0000482D E8B500              <2> 	call char
  5776 00004830 31C9                <2> 	xor cx, cx
  5777 00004832 8A0E[2E4B]          <2> 	mov cl, [bitsperpixel]
  5778 00004836 E83F00              <2> 	call decshow
  5779 00004839 BE[F847]            <2> 	mov si, isthisvideook
  5780 0000483C E838B8              <2> 	call printrm
  5781 0000483F 31C0                <2> 	xor ax, ax
  5782 00004841 CD16                <2> 	int 16h
  5783 00004843 8B36[6F48]          <2> 	mov si, [videomodecache]
  5784 00004847 3C79                <2> 	cmp al, "y"
  5785 00004849 0F8572FF            <2> 	jne near nextvmode
  5786                              <2> selectedvesa:
  5787 0000484D 8B16[274B]          <2> 	mov dx, [resolutionx]
  5788 00004851 01D2                <2> 	add dx, dx
  5789 00004853 8916[154C]          <2> 	mov [resolutionx2], dx
  5790 00004857 31D2                <2> 	xor dx, dx
  5791 00004859 31C9                <2> 	xor cx, cx
  5792 0000485B B8024F              <2> 	mov ax, 04F02h
  5793 0000485E 8B1E[6D48]          <2> 	mov bx, [vesamode]
  5794 00004862 CD10                <2> 	int 10h		;;enter VESA mode
  5795 00004864 C606[F484]01        <2> 	mov byte [guion], 1
  5796 00004869 E8D5B7              <2> 	call getmemorysize;get the memory map after the video is initialized
  5797 0000486C C3                  <2> 	ret
  5798                              <2> 	
  5799 0000486D 0000                <2> vesamode dw 0
  5800 0000486F 0000                <2> videomodecache dw 0
  5801                              <2> 
  5802 00004871 0000000000          <2> dcnm db 0,0,0,0,0
  5803 00004876 0000                <2> dcnmend db 0,0
  5804                              <2> 
  5805                              <2> 
  5806                              <2> decshow:
  5807 00004878 BE[7148]            <2> 	mov si, dcnm
  5808                              <2> decclear:
  5809 0000487B B030                <2> 	mov al, "0"
  5810 0000487D 8804                <2> 	mov [si], al
  5811 0000487F 46                  <2> 	inc si
  5812 00004880 81FE[7648]          <2> 	cmp si, dcnmend
  5813 00004884 76F5                <2> 	jbe decclear
  5814 00004886 4E                  <2> 	dec si
  5815 00004887 E81500              <2> 	call convertrm
  5816 0000488A BE[7148]            <2> 	mov si, dcnm
  5817                              <2> dectst:
  5818 0000488D 8A04                <2> 	mov al, [si]
  5819 0000488F 46                  <2> 	inc si
  5820 00004890 81FE[7648]          <2> 	cmp si, dcnmend
  5821 00004894 7704                <2> 	ja dectstend
  5822 00004896 3C30                <2> 	cmp al, "0"
  5823 00004898 76F3                <2> 	jbe dectst
  5824                              <2> dectstend:
  5825 0000489A 4E                  <2> 	dec si
  5826 0000489B E8D9B7              <2> 	call printrm
  5827 0000489E C3                  <2> 	ret
  5828                              <2> 	
  5829                              <2> 	
  5830                              <2> convertrm:
  5831 0000489F 4E                  <2> 	dec si
  5832 000048A0 89F3                <2> 	mov bx, si		;place to convert into must be in si, number to convert must be in cx
  5833                              <2> cnvrtrm:
  5834 000048A2 89DE                <2> 	mov si, bx
  5835 000048A4 81EE0300            <2> 	sub si, 3
  5836 000048A8 46                  <2> ten3rm:	inc si
  5837 000048A9 81F9E803            <2> 	cmp cx, 1000
  5838 000048AD 7208                <2> 	jb ten2rm
  5839 000048AF 81E9E803            <2> 	sub cx, 1000
  5840 000048B3 FE04                <2> 	inc byte [si]
  5841 000048B5 EBEB                <2> 	jmp cnvrtrm
  5842 000048B7 46                  <2> ten2rm:	inc si
  5843 000048B8 81F96400            <2> 	cmp cx, 100
  5844 000048BC 7208                <2> 	jb ten1rm
  5845 000048BE 81E96400            <2> 	sub cx, 100
  5846 000048C2 FE04                <2> 	inc byte [si]
  5847 000048C4 EBDC                <2> 	jmp cnvrtrm
  5848 000048C6 46                  <2> ten1rm:	inc si
  5849 000048C7 81F90A00            <2> 	cmp cx, 10
  5850 000048CB 7208                <2> 	jb ten0rm
  5851 000048CD 81E90A00            <2> 	sub cx, 10
  5852 000048D1 FE04                <2> 	inc byte [si]
  5853 000048D3 EBCD                <2> 	jmp cnvrtrm
  5854 000048D5 46                  <2> ten0rm:	inc si
  5855 000048D6 81F90100            <2> 	cmp cx, 1
  5856 000048DA 7208                <2> 	jb tendnrm
  5857 000048DC 81E90100            <2> 	sub cx, 1
  5858 000048E0 FE04                <2> 	inc byte [si]
  5859 000048E2 EBBE                <2> 	jmp cnvrtrm
  5860                              <2> tendnrm:
  5861 000048E4 C3                  <2> 	ret
  5862                              <2> 
  5863                              <2>     char: 		    ;char must be in al
  5864 000048E5 BB0700              <2>        mov bx, 07
  5865 000048E8 B40E                <2> 	   mov ah, 0Eh
  5866 000048EA CD10                <2> 	   int 10h
  5867 000048EC C3                  <2> 	   ret
  5868                              <2> 
  5869 000048ED 426F6F7420696E746F- <2> bootmsg:	db "Boot into the GUI?(y/n)",0
  5870 000048F6 20746865204755493F- <2>
  5871 000048FF 28792F6E2900        <2>
  5872                              <2> 
  5873                              <2> 
  5874                              <2> mcursor:
  5875 00004905 01                  <2> 	db	00000001b
  5876 00004906 81                  <2> 	db	10000001b
  5877 00004907 C1                  <2> 	db	11000001b
  5878 00004908 E1                  <2> 	db	11100001b
  5879 00004909 F1                  <2> 	db	11110001b
  5880 0000490A F9                  <2> 	db	11111001b
  5881 0000490B FD                  <2> 	db	11111101b
  5882 0000490C FF                  <2> 	db	11111111b
  5883 0000490D F9                  <2> 	db	11111001b
  5884 0000490E B9                  <2> 	db	10111001b
  5885 0000490F 39                  <2> 	db	00111001b
  5886 00004910 1C                  <2> 	db	00011100b
  5887 00004911 1C                  <2> 	db	00011100b
  5888 00004912 0E                  <2> 	db	00001110b
  5889 00004913 0E                  <2> 	db	00001110b
  5890 00004914 0C                  <2> 	db	00001100b
  5891                              <2> mcursorend:
  5892                              <2> 
  5893                              <2> 
  5894                              <2> VBEMODEBLOCK:
  5895 00004915 00<rept>            <2> vbesignature 		times  4 db 0 	;VBE Signature
  5896 00004919 00<rept>            <2> vbeversion  		times  2 db 0	;VBE Version
  5897 0000491B 00<rept>            <2> oemstringptr  		times  4 db 0	;Pointer to OEM String
  5898 0000491F 00<rept>            <2> capabilities 		times  4 db 0	;Capabilities of graphics cont.
  5899 00004923 00<rept>            <2> videomodeptr 		times  4 db 0	;Pointer to Video Mode List
  5900 00004927 00<rept>            <2> totalmemory   		times  2 db 0	;number of 64Kb memory blocks
  5901 00004929 00<rept>            <2> oemsoftwarerev  	times  2 db 0	;VBE implementation Software revision
  5902 0000492B 00<rept>            <2> oemvendornameptr 	times  4 db 0	;Pointer to Vendor Name String
  5903 0000492F 00<rept>            <2> oemproductnameptr 	times  4 db 0	;Pointer to Product Name String
  5904 00004933 00<rept>            <2> oemproductrevptr 	times  4 db 0	;Pointer to Product Revision String
  5905 00004937 00<rept>            <2> reserved			times  222 db 0	;Reserved for VBE implementation scratch area
  5906 00004A15 00<rept>            <2> oemdata 			times  256 db 0	;Data Area for OEM Strings
  5907                              <2> 
  5908                              <2> VBEMODEINFOBLOCK:
  5909                              <2> ;Mandatory information for all VBE revision
  5910 00004B15 00<rept>            <2> modeattributes   	times  2 db 0	;Mode attributes
  5911 00004B17 00                  <2> winaattributes   	times  1 db 0	;Window A attributes
  5912 00004B18 00                  <2> winbattributes   	times  1 db 0	;Window B attributes
  5913 00004B19 00<rept>            <2> wingranularity   	times  2 db 0	;Window granularity
  5914 00004B1B 00<rept>            <2> winsize          	times  2 db 0	;Window size
  5915 00004B1D 00<rept>            <2> winasegment      	times  2 db 0	;Window A start segment
  5916 00004B1F 00<rept>            <2> winbsegment      	times  2 db 0	;Window B start segment
  5917 00004B21 00<rept>            <2> winfuncptr       	times  4 db 0	;pointer to window function
  5918 00004B25 00<rept>            <2> bytesperscanline 	times  2 db 0	;Bytes per scan line
  5919                              <2> 
  5920                              <2> ;Mandatory information for VBE 1.2 and above
  5921 00004B27 00<rept>            <2> resolutionx     	times  2 db 0	;Horizontal resolution in pixel or chars
  5922 00004B29 00<rept>            <2> resolutiony	    	times  2 db 0	;Vertical resolution in pixel or chars
  5923 00004B2B 00                  <2> xcharsize       	times  1 db 0	;Character cell width in pixel
  5924 00004B2C 00                  <2> ycharsize       	times  1 db 0	;Character cell height in pixel
  5925 00004B2D 00                  <2> numberofplanes  	times  1 db 0	;Number of memory planes
  5926 00004B2E 00                  <2> bitsperpixel    	times  1 db 0	;Bits per pixel
  5927 00004B2F 00                  <2> numberofbanks   	times  1 db 0	;Number of banks
  5928 00004B30 00                  <2> memorymodel     	times  1 db 0	;Memory model type
  5929 00004B31 00                  <2> banksize        	times  1 db 0	;Bank size in KB
  5930 00004B32 00                  <2> numberofimagepages	times  1 db 0	;Number of images
  5931 00004B33 00                  <2> reserved1       	times  1 db 0	;Reserved for page function
  5932                              <2> 
  5933                              <2> ;Direct Color fields (required for direct/6 and YUV/7 memory models)
  5934 00004B34 00                  <2> redmasksize			times  1 db 0	;Size of direct color red mask in bits
  5935 00004B35 00                  <2> redfieldposition	times  1 db 0	;Bit position of lsb of red bask
  5936 00004B36 00                  <2> greenmasksize   	times  1 db 0	;Size of direct color green mask in bits
  5937 00004B37 00                  <2> greenfieldposition	times  1 db 0	;Bit position of lsb of green bask
  5938 00004B38 00                  <2> bluemasksize		times  1 db 0	;Size of direct color blue mask in bits
  5939 00004B39 00                  <2> bluefieldposition	times  1 db 0	;Bit position of lsb of blue bask
  5940 00004B3A 00                  <2> rsvdmasksize        times  1 db 0		;Size of direct color reserved mask in bits
  5941 00004B3B 00                  <2> rsvdfieldposition	times  1 db 0		;Bit position of lsb of reserved bask
  5942 00004B3C 00                  <2> directcolormodeinfo	times  1 db 0	;Direct color mode attributes
  5943                              <2> 
  5944                              <2> ;Mandatory information for VBE 2.0 and above
  5945 00004B3D 00<rept>            <2> physbaseptr 		times  4 db 0	;Physical address for flat frame buffer
  5946 00004B41 00<rept>            <2> offscreenmemoffset 	times  4 db 0	;Pointer to start of off screen memory
  5947 00004B45 00<rept>            <2> offscreenmemsize 	times  2 db 0    ;Amount of off screen memory in 1Kb units
  5948 00004B47 00<rept>            <2> reserved2 			times  206 db 0  ;Remainder of ModeInfoBlock
  5949                              <2> 
  5950 00004C15 0000                <2> resolutionx2 dw 0	;this is not part of the VBE but is necessary GUI info
  5951                              <2> VBEEND:
  5952                              <2> [BITS 32]
  5953                              <1> 	%include "source/drivers/input/mouse.asm"
  5954 00004C17 00                  <2> mousedisabled db 0
  5955                              <2> 	
  5956                              <2> 	cursorgui:
  5957 00004C18 803D[116F0000]01    <2> 		cmp byte [mouseon], 1
  5958 00004C1F 0F8432000000        <2> 		je near mousedaemon
  5959 00004C25 803D[F4840000]00    <2> 		cmp byte [guion], 0
  5960 00004C2C 0F8478060000        <2> 		je near entdown
  5961                              <2> 	initmouse:
  5962 00004C32 803D[F4840000]00    <2> 		cmp byte [guion], 0
  5963 00004C39 7405                <2> 		je noswmsposinit
  5964 00004C3B E8E80F0000          <2> 		call switchmousepos2
  5965                              <2> 	noswmsposinit:
  5966 00004C40 E85A020000          <2> 	  	call PS2SET
  5967 00004C45 E883020000          <2> 		call ACTMOUS
  5968 00004C4A C605[116F0000]01    <2> 		mov byte [mouseon],1
  5969 00004C51 E89C020000          <2> 		call GETB 	;;Get the responce byte of the mouse (like: Hey i am active)
  5970                              <2> 		;call GETB
  5971                              <2> 				;;If the bytes are mixed up,
  5972                              <2> 				;;remove this line or add another of this line.
  5973                              <2> 	nomouse:
  5974 00004C56 C3                  <2> 		ret
  5975                              <2> 		
  5976                              <2> 	mousedaemon:
  5977 00004C57 803D[116F0000]01    <2> 		cmp byte [mouseon], 1
  5978 00004C5E 75D2                <2> 		jne initmouse
  5979 00004C60 E464                <2> 		in al, 64h ; Status
  5980 00004C62 A820                <2> 		test al, 20h ; PS2-Mouse?
  5981 00004C64 0F8502000000        <2> 		jnz near moused
  5982 00004C6A F4                  <2> 		hlt
  5983 00004C6B C3                  <2> 		ret
  5984                              <2> 	moused:
  5985 00004C6C 803D[174C0000]01    <2> 		cmp byte [mousedisabled], 1
  5986 00004C73 74E1                <2> 		je nomouse
  5987 00004C75 E878020000          <2> 		  call GETB
  5988 00004C7A 88C3                <2> 		  mov  bl, al
  5989 00004C7C 80E301              <2> 		  and  bl, 1
  5990 00004C7F 881D[174F0000]      <2> 		  mov  BYTE [LBUTTON], bl
  5991 00004C85 88C3                <2> 		  mov  bl, al
  5992 00004C87 80E302              <2> 		  and  bl, 2
  5993 00004C8A D0EB                <2> 		  shr  bl, 1
  5994 00004C8C 881D[184F0000]      <2> 		  mov  BYTE [RBUTTON], bl
  5995 00004C92 88C3                <2> 		  mov  bl, al
  5996 00004C94 80E304              <2> 		  and  bl, 4
  5997 00004C97 C0EB02              <2> 		  shr  bl, 2
  5998 00004C9A 881D[194F0000]      <2> 		  mov  BYTE [MBUTTON], bl
  5999 00004CA0 E84D020000          <2> 		  call GETB
  6000 00004CA5 A2[1A4F0000]        <2> 		  mov  BYTE [XCOORD], al
  6001 00004CAA E843020000          <2> 		  call GETB
  6002 00004CAF A2[1B4F0000]        <2> 		  mov  BYTE [YCOORD], al
  6003                              <2> 
  6004                              <2> 	showpixelcursor:
  6005 00004CB4 668B15[064E0000]    <2> 		mov dx, [mousecursorposition]
  6006 00004CBB 668B0D[084E0000]    <2> 		mov cx, [mousecursorposition + 2]
  6007 00004CC2 668915[024E0000]    <2> 		mov [lastmouseposition], dx
  6008 00004CC9 66890D[044E0000]    <2> 		mov [lastmouseposition + 2], cx
  6009 00004CD0 A0[1A4F0000]        <2> 		mov al, [XCOORD]
  6010 00004CD5 3C80                <2> 		cmp al, 128
  6011 00004CD7 730C                <2> 		jae subxcoord
  6012 00004CD9 00C0                <2> 		add al, al
  6013 00004CDB 30E4                <2> 		xor ah, ah
  6014 00004CDD 6601C2              <2> 		add dx, ax
  6015 00004CE0 E90B000000          <2> 		jmp subxcoorddn
  6016                              <2> 	subxcoord:
  6017 00004CE5 00C0                <2> 		add al, al
  6018 00004CE7 30DB                <2> 		xor bl, bl
  6019 00004CE9 28C3                <2> 		sub bl, al
  6020 00004CEB 30FF                <2> 		xor bh, bh
  6021 00004CED 6629DA              <2> 		sub dx, bx
  6022                              <2> 	subxcoorddn:
  6023 00004CF0 8A1D[1B4F0000]      <2> 		mov bl, [YCOORD]
  6024 00004CF6 30C0                <2> 		xor al, al
  6025 00004CF8 28D8                <2> 		sub al, bl
  6026 00004CFA 3C80                <2> 		cmp al, 128
  6027 00004CFC 730A                <2> 		jae subycoord
  6028 00004CFE 30E4                <2> 		xor ah, ah
  6029 00004D00 6601C1              <2> 		add cx, ax
  6030 00004D03 E909000000          <2> 		jmp subycoorddn
  6031                              <2> 	subycoord:
  6032 00004D08 30DB                <2> 		xor bl, bl
  6033 00004D0A 28C3                <2> 		sub bl, al
  6034 00004D0C 30FF                <2> 		xor bh, bh
  6035 00004D0E 6629D9              <2> 		sub cx, bx
  6036                              <2> 	subycoorddn:
  6037 00004D11 6681FA204E          <2> 		cmp dx, 20000
  6038 00004D16 7603                <2> 		jbe nooriginx2
  6039 00004D18 6631D2              <2> 		xor dx, dx
  6040                              <2> 	nooriginx2:
  6041 00004D1B 6681F9204E          <2> 		cmp cx, 20000
  6042 00004D20 7603                <2> 		jbe nooriginy2
  6043 00004D22 6631C9              <2> 		xor cx, cx
  6044                              <2> 	nooriginy2:
  6045 00004D25 6681FA0000          <2> 		cmp dx, 0
  6046 00004D2A 7415                <2> 		je nofixxcolumn2
  6047 00004D2C 663B15[154C0000]    <2> 		cmp dx, [resolutionx2]
  6048 00004D33 720C                <2> 		jb nofixxcolumn2
  6049 00004D35 668B15[154C0000]    <2> 		mov dx, [resolutionx2]
  6050 00004D3C 6681EA0200          <2> 		sub dx, 2
  6051                              <2> 	nofixxcolumn2:
  6052 00004D41 6681F90000          <2> 		cmp cx, 0
  6053 00004D46 7415                <2> 		je nofixyrow2
  6054 00004D48 663B0D[294B0000]    <2> 		cmp cx, [resolutiony]
  6055 00004D4F 720C                <2> 		jb nofixyrow2
  6056 00004D51 668B0D[294B0000]    <2> 		mov cx, [resolutiony]
  6057 00004D58 6681E90100          <2> 		sub cx, 1
  6058                              <2> 	nofixyrow2:
  6059 00004D5D 668915[064E0000]    <2> 		mov [mousecursorposition], dx
  6060 00004D64 66890D[084E0000]    <2> 		mov [mousecursorposition + 2], cx
  6061 00004D6B 803D[F4840000]00    <2> 		cmp byte [guion], 0
  6062 00004D72 0F8492000000        <2> 		je near termmouse
  6063 00004D78 E84B0E0000          <2> 		call switchmousepos ;;use dragging code to ensure proper icon drag
  6064 00004D7D 803D[174F0000]01    <2> 		cmp byte [LBUTTON], 1
  6065 00004D84 0F84120F0000        <2> 		je near clickicon
  6066 00004D8A 803D[184F0000]01    <2> 		cmp byte [RBUTTON], 1
  6067 00004D91 0F84050F0000        <2> 		je near clickicon
  6068 00004D97 A0[895C0000]        <2> 		mov al, [pbutton]
  6069 00004D9C C705[8C5C0000]0000- <2> 		mov dword [dragging], 0
  6070 00004DA4 0000                <2>
  6071 00004DA6 3C00                <2> 		cmp al, 0
  6072 00004DA8 740F                <2> 		je nopreviousbutton
  6073 00004DAA E87B0D0000          <2> 		call clearmousecursor
  6074 00004DAF E836140000          <2> 		call reloadallgraphics
  6075                              <2> 	windowtermcopyend:
  6076 00004DB4 E86F0E0000          <2> 		call switchmousepos2
  6077                              <2> 	nopreviousbutton:
  6078 00004DB9 30C0                <2> 		xor al, al
  6079 00004DBB A2[895C0000]        <2> 		mov [pbutton], al
  6080 00004DC0 A0[174F0000]        <2> 		mov al, [LBUTTON]
  6081 00004DC5 A2[8A5C0000]        <2> 		mov [pLBUTTON], al
  6082 00004DCA A0[184F0000]        <2> 		mov al, [RBUTTON]
  6083 00004DCF A2[8B5C0000]        <2> 		mov [pRBUTTON], al
  6084 00004DD4 31C9                <2> 		xor ecx, ecx
  6085 00004DD6 31D2                <2> 		xor edx, edx
  6086 00004DD8 668B15[064E0000]    <2> 		mov dx, [mousecursorposition]
  6087 00004DDF 668B0D[084E0000]    <2> 		mov cx, [mousecursorposition + 2]
  6088 00004DE6 66BB18C7            <2> 		mov bx, 1100011100011000b
  6089 00004DEA 30E4                <2> 		xor ah, ah
  6090 00004DEC B0FE                <2> 		mov al, 254
  6091 00004DEE C605[275B0000]01    <2> 		mov byte [showcursorfonton], 1
  6092 00004DF5 E8981D0000          <2> 		call showfontvesa
  6093 00004DFA C605[275B0000]00    <2> 		mov byte [showcursorfonton], 0
  6094 00004E01 C3                  <2> 		ret
  6095                              <2> 
  6096 00004E02 84008400            <2> lastmouseposition dw 132,132
  6097 00004E06 84008400            <2> mousecursorposition dw 132,132	
  6098                              <2> 
  6099                              <2> termmouse:
  6100 00004E0A BE[D0C22800]        <2> 		mov esi, videobuf
  6101 00004E0F 31D2                <2> 		xor edx, edx
  6102 00004E11 668B15[024E0000]    <2> 		mov dx, [lastmouseposition]
  6103 00004E18 668B0D[044E0000]    <2> 		mov cx, [lastmouseposition + 2]
  6104 00004E1F 66A1[9D4E0000]      <2> 		mov ax, [cursorcache]
  6105 00004E25 663D0000            <2> 		cmp ax, 0
  6106 00004E29 7425                <2> 		je nocopycursorcache
  6107 00004E2B 66C1E104            <2> 		shl cx, 4
  6108 00004E2F 66C1E203            <2> 		shl dx, 3
  6109 00004E33 01D6                <2> 		add esi, edx
  6110 00004E35 6631D2              <2> 		xor dx, dx
  6111 00004E38 8A15[7A230000]      <2> 		mov dl, [charxy]
  6112 00004E3E 6641                <2> 		inc cx
  6113                              <2> termmousecplp1:
  6114 00004E40 01D6                <2> 		add esi, edx
  6115 00004E42 6649                <2> 		dec cx
  6116 00004E44 6681F90000          <2> 		cmp cx, 0
  6117 00004E49 75F5                <2> 		jne termmousecplp1
  6118 00004E4B 29D6                <2> 		sub esi, edx
  6119 00004E4D 668906              <2> 		mov [esi], ax
  6120                              <2> nocopycursorcache:
  6121 00004E50 BE[D0C22800]        <2> 		mov esi, videobuf
  6122 00004E55 31D2                <2> 		xor edx, edx
  6123 00004E57 668B15[064E0000]    <2> 		mov dx, [mousecursorposition]
  6124 00004E5E 668B0D[084E0000]    <2> 		mov cx, [mousecursorposition + 2]
  6125 00004E65 66C1E104            <2> 		shl cx, 4
  6126 00004E69 66C1E203            <2> 		shl dx, 3
  6127 00004E6D 01D6                <2> 		add esi, edx
  6128 00004E6F 6631D2              <2> 		xor dx, dx
  6129 00004E72 8A15[7A230000]      <2> 		mov dl, [charxy]
  6130 00004E78 6641                <2> 		inc cx
  6131                              <2> termmousecplp2:
  6132 00004E7A 01D6                <2> 		add esi, edx
  6133 00004E7C 6649                <2> 		dec cx
  6134 00004E7E 6681F90000          <2> 		cmp cx, 0
  6135 00004E83 75F5                <2> 		jne termmousecplp2
  6136 00004E85 29D6                <2> 		sub esi, edx
  6137 00004E87 668B06              <2> 		mov ax, [esi]
  6138 00004E8A 66A3[9D4E0000]      <2> 		mov [cursorcache], ax
  6139 00004E90 B080                <2> 		mov al, 128
  6140 00004E92 B407                <2> 		mov ah, 7
  6141 00004E94 668906              <2> 		mov [esi], ax
  6142 00004E97 E855D6FFFF          <2> 		call termcopy
  6143 00004E9C C3                  <2> 		ret
  6144 00004E9D 0000                <2> cursorcache db 0,0
  6145                              <2> 
  6146                              <2> PS2SET:
  6147 00004E9F B0A8                <2>   mov  al, 0xa8		; enable mouse port
  6148 00004EA1 E664                <2>   out  0x64, al		; write to keyboardcontroller
  6149 00004EA3 E801000000          <2>   call CHKPRT		; check if command is progressed (demand!)
  6150 00004EA8 C3                  <2> ret
  6151                              <2> 
  6152                              <2> CHKPRT:
  6153 00004EA9 66B96400            <2>   mov  cx, 100
  6154                              <2>  .again:
  6155 00004EAD E464                <2>   in   al, 0x64		; read from keyboardcontroller
  6156 00004EAF A802                <2>   test al, 2		; Check if input buffer is empty
  6157 00004EB1 7402                <2>   je .go
  6158 00004EB3 E2F8                <2>   loop .again
  6159                              <2>  .go:
  6160 00004EB5 C3                  <2> ret
  6161                              <2> 
  6162                              <2> WMOUS:
  6163 00004EB6 B0D4                <2>   mov  al, 0xd4		; write to mouse device instead of to keyboard
  6164 00004EB8 E664                <2>   out  0x64, al		; write to keyboardcontroller
  6165 00004EBA E8EAFFFFFF          <2>   call CHKPRT		; check if command is progressed (demand!)
  6166 00004EBF C3                  <2> ret
  6167                              <2> 
  6168                              <2> MBUFFUL:
  6169 00004EC0 66B96400            <2>   mov cx, 100
  6170                              <2>  .mn:
  6171 00004EC4 E464                <2>   in   al, 0x64		; read from keyboardcontroller
  6172 00004EC6 A820                <2>   test al, 0x20		; check if mouse output buffer is full
  6173 00004EC8 7402                <2>   jz  .mnn
  6174 00004ECA E2F8                <2>   loop .mn
  6175                              <2>  .mnn:
  6176 00004ECC C3                  <2> ret
  6177                              <2> 
  6178                              <2> 
  6179                              <2> ACTMOUS:
  6180 00004ECD E8E4FFFFFF          <2>   call WMOUS
  6181 00004ED2 B0F4                <2>   mov  al, 0xf4 	; Command to activate mouse itselve (Stream mode)
  6182 00004ED4 E660                <2>   out  0x60, al		; write ps/2 controller output port (activate mouse)
  6183 00004ED6 E8CEFFFFFF          <2>   call CHKPRT		; check if command is progressed (demand!)
  6184 00004EDB E801000000          <2>   call CHKMOUS		; check if a byte is available
  6185 00004EE0 C3                  <2> ret
  6186                              <2> 
  6187                              <2> CHKMOUS:
  6188 00004EE1 B300                <2>   mov  bl, 0
  6189 00004EE3 66B96400            <2>   mov cx, 100
  6190                              <2>  .vrd:
  6191 00004EE7 E464                <2>   in   al, 0x64		; read from keyboardcontroller
  6192 00004EE9 A801                <2>   test al, 1		; check if controller buffer (60h) has data
  6193 00004EEB 7504                <2>   jnz .yy
  6194 00004EED E2F8                <2>   loop .vrd
  6195 00004EEF B301                <2>   mov  bl, 1
  6196                              <2>  .yy:
  6197 00004EF1 C3                  <2> ret
  6198                              <2> 
  6199                              <2> GETB:
  6200                              <2>  .cagain:
  6201 00004EF2 E8EAFFFFFF          <2>   call CHKMOUS		; check if a byte is available
  6202 00004EF7 08DB                <2>   or bl, bl
  6203 00004EF9 75F7                <2>   jnz .cagain
  6204 00004EFB B0AD                <2>   mov  al, 0xad		; Disable Keyboard
  6205 00004EFD E664                <2>   out  0x64, al		; write to keyboardcontroller
  6206 00004EFF E8A5FFFFFF          <2>   call CHKPRT		; check if command is progressed (demand!)
  6207 00004F04 6631C0              <2>   xor  ax, ax
  6208 00004F07 E460                <2>   in   al, 0x60		; read ps/2 controller output port (mousebyte)
  6209 00004F09 88C2                <2>   mov  dl, al
  6210 00004F0B B0AE                <2>   mov  al, 0xae		; Enable Keyboard
  6211 00004F0D E664                <2>   out  0x64, al		; write to keyboardcontroller
  6212 00004F0F E895FFFFFF          <2>   call CHKPRT		; check if command is progressed (demand!)
  6213 00004F14 88D0                <2>   mov  al, dl
  6214 00004F16 C3                  <2> ret
  6215                              <2> 
  6216 00004F17 00                  <2> LBUTTON db 0x00	;	Left   button status 1=PRESSED 0=RELEASED
  6217 00004F18 00                  <2> RBUTTON db 0x00	;	Right  button status 1=PRESSED 0=RELEASED
  6218 00004F19 00                  <2> MBUTTON db 0x00	;	Middle button status 1=PRESSED 0=RELEASED
  6219 00004F1A 00                  <2> XCOORD  db 0x00	;	the moved distance  (horizontal)
  6220 00004F1B 00                  <2> YCOORD  db 0x00	;	the moved distance  (vertical)
  6221                              <1> %endif
  6222                              <1> %include "source/drivers/sound/pcspkr.asm"
  6223                              <2> ;PC Speaker Drivers
  6224                              <2> PCSpeakerRAW:
  6225 00004F1C 60                  <2> 	pusha
  6226                              <2> nosoundrep:
  6227 00004F1D 8B35[60020000]      <2> 	mov esi, [soundpos]
  6228 00004F23 31C9                <2> 	xor ecx, ecx
  6229 00004F25 668B0D[5E020000]    <2> 	mov cx, [soundrepititions]
  6230 00004F2C 6681F90000          <2> 	cmp cx, 0
  6231 00004F31 0F8548000000        <2> 	jne near donesetpitch
  6232 00004F37 668B0E              <2> 	mov cx, [esi]
  6233 00004F3A 668B5E02            <2> 	mov bx, [esi + 2]
  6234 00004F3E 66890D[5E020000]    <2> 	mov [soundrepititions], cx
  6235 00004F45 81C604000000        <2> 	add esi, 4
  6236 00004F4B 8935[60020000]      <2> 	mov [soundpos], esi
  6237 00004F51 3B35[64020000]      <2> 	cmp esi, [soundendpos]
  6238 00004F57 7735                <2> 	ja stopsound
  6239 00004F59 66813D[5E020000]00- <2> 	cmp word [soundrepititions], 0
  6240 00004F61 00                  <2>
  6241 00004F62 74B9                <2> 	je nosoundrep
  6242 00004F64 6681FB0000          <2> 	cmp bx, 0
  6243 00004F69 740F                <2> 	je nosoundplay
  6244 00004F6B E840000000          <2> 	call setpitch
  6245 00004F70 E849000000          <2> 	call startsound
  6246 00004F75 E905000000          <2> 	jmp donesetpitch
  6247                              <2> nosoundplay:
  6248 00004F7A E846000000          <2> 	call killsound
  6249                              <2> donesetpitch:
  6250 00004F7F 6649                <2> 	dec cx
  6251 00004F81 66890D[5E020000]    <2> 	mov [soundrepititions], cx
  6252 00004F88 61                  <2> 	popa
  6253 00004F89 E90FB3FFFF          <2> 	jmp timerinterrupt
  6254                              <2> stopsound:
  6255 00004F8E 31C0                <2> 	xor eax, eax
  6256 00004F90 66A3[5E020000]      <2> 	mov [soundrepititions], ax
  6257 00004F96 A2[5D020000]        <2> 	mov [soundon], al
  6258 00004F9B A3[60020000]        <2> 	mov [soundpos], eax
  6259 00004FA0 A3[64020000]        <2> 	mov [soundendpos], eax
  6260 00004FA5 E81B000000          <2> 	call killsound
  6261 00004FAA 61                  <2> 	popa
  6262 00004FAB E9EDB2FFFF          <2> 	jmp timerinterrupt
  6263                              <2> 
  6264                              <2> 
  6265                              <2> setpitch:
  6266 00004FB0 B0B6                <2> 	mov al, 0xB6
  6267 00004FB2 E643                <2> 	out 0x43, al
  6268 00004FB4 6689D8              <2> 	mov ax, bx
  6269 00004FB7 E642                <2> 	out 0x42, al
  6270 00004FB9 88E0                <2> 	mov al, ah
  6271 00004FBB E642                <2> 	out 0x42, al
  6272 00004FBD C3                  <2> 	ret
  6273                              <2> startsound:
  6274 00004FBE E461                <2> 	in al, 0x61
  6275 00004FC0 0C03                <2> 	or al, 3
  6276 00004FC2 E661                <2> 	out 0x61, al
  6277 00004FC4 C3                  <2> 	ret
  6278                              <2> killsound:
  6279 00004FC5 E461                <2> 	in al, 0x61
  6280 00004FC7 24FC                <2> 	and al, 0xFC
  6281 00004FC9 E661                <2> 	out 0x61, al
  6282 00004FCB C3                  <2> 	ret
  6283                              <2> 	
  6284                              <1> %ifdef sound.included
  6285                              <1> 	%include "source/drivers/sound/sblaster.asm"
  6286                              <2> ;Sound Blaster Drivers
  6287                              <2> sblaster:
  6288                              <2> .init:
  6289 00004FCC E842010000          <2> 		call ResetDSP			;If the system is Sound Blaster 16 compatible, reset the DSP
  6290 00004FD1 A2[68510000]        <2> 		mov [SoundBlaster], al	;if the reset worked, show an available card
  6291 00004FD6 3C00                <2> 		cmp al, 0
  6292 00004FD8 740E                <2> 		je .noinit
  6293 00004FDA B0D1                <2> 		mov	al,0D1h 		; turn speaker(s) on
  6294 00004FDC E866010000          <2> 		call WriteDSP
  6295 00004FE1 B088                <2> 		mov	al,088h 		; Left = 8, Right = 8 (15-highest)
  6296 00004FE3 E81C010000          <2> 		call MstrVol 		; L = Hi Nibble, R = Lo Nibble
  6297                              <2> .noinit:
  6298 00004FE8 C3                  <2> 		ret
  6299                              <2> sblastercont: ;this function goes to the next available portion of a sound, if necessary
  6300 00004FE9 66813D[56510000]00- <2> 	cmp word [Length0], 0
  6301 00004FF1 00                  <2>
  6302 00004FF2 0F8431B3FFFF        <2> 	je near handled2
  6303 00004FF8 668B3D[56510000]    <2> 	mov di, [Length0]
  6304 00004FFF 664F                <2> 	dec di
  6305 00005001 66893D[56510000]    <2> 	mov [Length0], di
  6306 00005008 A1[5A510000]        <2> 	mov eax, [NextMemLoc]
  6307 0000500D A3[5E510000]        <2> 	mov [MemLoc], eax
  6308 00005012 31C9                <2> 	xor ecx, ecx
  6309 00005014 66B9FFFF            <2> 	mov cx, 0xFFFF
  6310 00005018 66890D[58510000]    <2> 	mov [Length1], cx
  6311 0000501F 01C8                <2> 	add eax, ecx
  6312 00005021 A3[5A510000]        <2> 	mov [NextMemLoc], eax
  6313 00005026 E805000000          <2> 	call DMAPlay
  6314 0000502B E9F9B2FFFF          <2> 	jmp handled2 ;it is part of an interrupt routine
  6315                              <2> 
  6316                              <2> DMAPlay:    ;uses eax ebx edx
  6317 00005030 66FF0D[58510000]    <2> 		dec	word [Length1]
  6318 00005037 C605[62510000]00    <2> 		mov	byte [Page1],00h
  6319                              <2> 
  6320 0000503E B005                <2> 		mov	al,(Channel+4)
  6321 00005040 66BA0A00            <2> 		mov	dx,0Ah
  6322 00005044 EE                  <2> 		out	dx,al
  6323 00005045 30C0                <2> 		xor	al,al
  6324 00005047 66BA0C00            <2> 		mov	dx,0Ch
  6325 0000504B EE                  <2> 		out	dx,al
  6326 0000504C B049                <2> 		mov	al,ModeReg
  6327 0000504E 66BA0B00            <2> 		mov	dx,0Bh
  6328 00005052 EE                  <2> 		out	dx,al
  6329 00005053 A1[5E510000]        <2> 		mov	eax,[MemLoc]
  6330 00005058 66BA0200            <2> 		mov	dx,AddPort
  6331 0000505C EE                  <2> 		out	dx,al
  6332 0000505D 86C4                <2> 		xchg al,ah
  6333 0000505F EE                  <2> 		out	dx,al
  6334 00005060 A1[5E510000]        <2> 		mov	eax,[MemLoc]
  6335 00005065 89C2                <2> 		mov	edx,eax
  6336 00005067 2500000100          <2> 		and	eax,65536
  6337 0000506C 7406                <2> 		jz	MemLocN1
  6338 0000506E FE05[62510000]      <2> 		inc	byte [Page1]
  6339                              <2> MemLocN1:
  6340 00005074 89D0                <2> 		mov	eax,edx
  6341 00005076 2500000200          <2> 		and	eax,131072
  6342 0000507B 7407                <2> 		jz	MemLocN2
  6343 0000507D 8005[62510000]02    <2> 		add	byte [Page1],02
  6344                              <2> MemLocN2:
  6345 00005084 89D0                <2> 		mov	eax,edx
  6346 00005086 2500000400          <2> 		and	eax,262144
  6347 0000508B 7407                <2> 		jz	MemLocN3
  6348 0000508D 8005[62510000]04    <2> 		add	byte [Page1],04
  6349                              <2> MemLocN3:
  6350 00005094 89D0                <2> 		mov	eax,edx
  6351 00005096 2500000800          <2> 		and	eax,524288
  6352 0000509B 7407                <2> 		jz	MemLocN4
  6353 0000509D 8005[62510000]08    <2> 		add	byte [Page1],08
  6354                              <2> MemLocN4:
  6355 000050A4 66BA8300            <2> 		mov	dx,PgPort
  6356 000050A8 A0[62510000]        <2> 		mov	al,[Page1]
  6357 000050AD EE                  <2> 		out	dx,al
  6358 000050AE 66BA0300            <2> 		mov	dx,LenPort
  6359 000050B2 66A1[58510000]      <2> 		mov	ax,[Length1]
  6360 000050B8 EE                  <2> 		out	dx,al
  6361 000050B9 86C4                <2> 		xchg al,ah
  6362 000050BB EE                  <2> 		out	dx,al
  6363 000050BC 66BA0A00            <2> 		mov	dx,0Ah
  6364 000050C0 B001                <2> 		mov	al,Channel
  6365 000050C2 EE                  <2> 		out	dx,al
  6366                              <2> 		
  6367 000050C3 B040                <2> 		mov	al,40h
  6368 000050C5 E87D000000          <2> 		call WriteDSP
  6369 000050CA 31D2                <2> 		xor	edx,edx
  6370 000050CC B840420F00          <2> 		mov	eax,1000000
  6371 000050D1 8B1D[63510000]      <2> 		mov	ebx,[Freq]
  6372 000050D7 F7F3                <2> 		div	ebx
  6373 000050D9 89C3                <2> 		mov	ebx,eax
  6374 000050DB B800010000          <2> 		mov	eax,256
  6375 000050E0 29D8                <2> 		sub	eax,ebx
  6376 000050E2 E860000000          <2> 		call WriteDSP
  6377 000050E7 A0[67510000]        <2> 		mov	al,[WAVEMode]	;write the mode
  6378 000050EC E856000000          <2> 		call WriteDSP
  6379 000050F1 66A1[58510000]      <2> 		mov	ax,[Length1]
  6380 000050F7 E84B000000          <2> 		call WriteDSP
  6381 000050FC 86C4                <2> 		xchg al,ah
  6382 000050FE E844000000          <2> 		call WriteDSP
  6383 00005103 C3                  <2> 		ret
  6384                              <2> 
  6385                              <2> MstrVol:    ;uses ax dx
  6386 00005104 6650                <2> 	   push ax
  6387 00005106 66BA2402            <2> 	   mov	dx,(BasePort+4)
  6388 0000510A B022                <2> 	   mov	al,22h
  6389 0000510C EE                  <2> 	   out	dx,al
  6390 0000510D 6658                <2> 	   pop	ax
  6391 0000510F 6642                <2> 	   inc	dx
  6392 00005111 EE                  <2> 	   out	dx,al
  6393 00005112 C3                  <2> 	   ret
  6394                              <2> 	   
  6395                              <2> ResetDSP:   ; uses cx dx
  6396 00005113 66BA2602            <2> 			mov	dx,(BasePort+6)
  6397 00005117 B001                <2> 			mov	al,01
  6398 00005119 EE                  <2> 			out	dx,al
  6399 0000511A 66B93200            <2> 			mov	cx,50
  6400 0000511E EC                  <2> WaitIt1:	in	al,dx
  6401 0000511F E2FD                <2> 			loop WaitIt1
  6402 00005121 30C0                <2> 			xor	al,al
  6403 00005123 EE                  <2> 			out	dx,al
  6404 00005124 66B93200            <2> 			mov	cx,50
  6405 00005128 EC                  <2> WaitIt2:	in	al,dx
  6406 00005129 E2FD                <2> 			loop WaitIt2
  6407 0000512B B4FF                <2> 			mov	ah,0FFh 		; part of Return Code
  6408 0000512D 66BA2E02            <2> 			mov	dx,(BasePort+14)
  6409 00005131 EC                  <2> 			in	al,dx
  6410 00005132 2480                <2> 			and	al,80h
  6411 00005134 3C80                <2> 			cmp	al,80h
  6412 00005136 750C                <2> 			jne	ResetErr
  6413 00005138 66BA2A02            <2> 			mov	dx,(BasePort+10)
  6414 0000513C EC                  <2> 			in	al,dx
  6415 0000513D 3CAA                <2> 			cmp	al,0AAh
  6416 0000513F 7503                <2> 			jne	ResetErr
  6417 00005141 B001                <2> ResetOK:	mov al, 1		; return ax = 0 if reset ok
  6418 00005143 C3                  <2> 			ret
  6419 00005144 30C0                <2> ResetErr:	xor al, al
  6420 00005146 C3                  <2> 			ret
  6421                              <2> 
  6422                              <2> WriteDSP:   ;uses ax dx
  6423 00005147 6650                <2> 		push ax
  6424 00005149 66BA2C02            <2> 		mov	dx,(BasePort+12)
  6425 0000514D EC                  <2> WaitIt:	in	al,dx
  6426 0000514E 2480                <2> 		and	al,80h
  6427 00005150 75FB                <2> 		jnz	WaitIt
  6428 00005152 6658                <2> 		pop	ax
  6429 00005154 EE                  <2> 		out	dx,al
  6430 00005155 C3                  <2> 		ret
  6431                              <2> 
  6432 00005156 0000                <2> Length0 dw	0
  6433 00005158 0000                <2> Length1	dw  0
  6434 0000515A 00000000            <2> NextMemLoc dd 0
  6435 0000515E 00000000            <2> MemLoc	dd  0
  6436 00005162 00                  <2> Page1	db  0
  6437 00005163 00000000            <2> Freq	dd	0
  6438 00005167 14                  <2> WAVEMode db 14h
  6439                              <2> PgPort	equ 83h
  6440                              <2> AddPort	equ 02h
  6441                              <2> LenPort	equ 03h
  6442                              <2> ModeReg	equ 49h
  6443                              <2> Channel	equ 01h
  6444                              <2> BasePort	equ 220h
  6445 00005168 00                  <2> SoundBlaster	db 0
  6446                              <1> %endif
  6447                              <1> %ifdef rtl8139.included
  6448                              <1> 	%include "source/drivers/network/rtl8139.asm"
  6449                              <1> %endif
  6450                              <1> %ifdef io.serial
  6451                              <1> 	%include "source/drivers/input/serial.asm"
  6452                              <1> %else
  6453                              <1> 	%include "source/drivers/input/keyboard.asm"
  6454 00005169 00                  <2> specialkey db 0
  6455 0000516A 00                  <2> charregion db 0
  6456                              <2> waitforinput:		;;this is basically the idle process
  6457                              <2> 					;;this halts the cpu for a small amount of time and then sees if there was a keypress
  6458                              <2> 					;;this lets the cpu stay at close to 0% instead of 100%
  6459 0000516B 6631C0              <2> 	xor ax, ax
  6460 0000516E A0[61590000]        <2> 	mov al, [threadson]
  6461 00005173 8825[61590000]      <2> 	mov [threadson], ah
  6462 00005179 FB                  <2> 	sti
  6463 0000517A F4                  <2> 	hlt
  6464 0000517B A2[61590000]        <2> 	mov [threadson], al
  6465 00005180 3A25[92210000]      <2> 	cmp ah, [trans]
  6466 00005186 7401                <2> 	je getkey
  6467 00005188 C3                  <2> 	ret
  6468                              <2> getkey:
  6469 00005189 31C0                <2> 		xor eax, eax
  6470 0000518B A2[69510000]        <2> 		mov [specialkey], al
  6471 00005190 66A3[90210000]      <2> 		mov [lastkey], ax
  6472 00005196 E464                <2> 		in al, 64h ; Status
  6473                              <2> 	%ifdef gui.included
  6474 00005198 A820                <2> 		test al, 20h ; PS2-Mouse?
  6475 0000519A 0F85CCFAFFFF        <2> 		jnz near moused
  6476                              <2> 	%endif
  6477 000051A0 A801                <2> 		test al, 1 
  6478 000051A2 74C7                <2> 		jz waitforinput ; if output buffer full or no keypress, jump to idle process
  6479                              <2> 	calckey:
  6480 000051A4 E460                <2> 		in al, 60h
  6481 000051A6 88C4                <2> 		mov ah, al
  6482 000051A8 30C0                <2> 		xor al, al
  6483 000051AA 8825[91210000]      <2> 		mov [lastkey + 1], ah
  6484 000051B0 88E0                <2> 		mov al, ah
  6485 000051B2 BF[4B530000]        <2> 		mov edi, scancode
  6486                              <2> 	searchscan: 
  6487 000051B7 3C3A                <2> 		cmp al, 3Ah
  6488 000051B9 731A                <2> 		jae scanother
  6489 000051BB 30E4                <2> 		xor ah, ah
  6490 000051BD C0E002              <2> 		shl al, 2
  6491 000051C0 01C7                <2> 		add edi, eax
  6492 000051C2 D0E8                <2> 		shr al, 1
  6493 000051C4 01C7                <2> 		add edi, eax
  6494 000051C6 D0E8                <2> 		shr al, 1
  6495 000051C8 8A27                <2> 		mov ah, [edi]
  6496 000051CA 80FC00              <2> 		cmp ah, 0
  6497 000051CD 7406                <2> 		je scanother
  6498 000051CF E9D7000000          <2> 		jmp scanfound
  6499 000051D4 00                  <2> uppercase db 0
  6500                              <2> scanother:
  6501 000051D5 88C4                <2> 		mov ah, al
  6502 000051D7 30C0                <2> 		xor al, al
  6503 000051D9 66A3[90210000]      <2> 		mov [lastkey], ax
  6504 000051DF 80FCE0              <2> 		cmp ah, 0E0h
  6505 000051E2 0F847D000000        <2> 		je near getkeyspecial
  6506 000051E8 803D[69510000]E0    <2> 		cmp byte [specialkey], 0xE0
  6507 000051EF 752B                <2> 		jne nospecialkey
  6508 000051F1 80FC38              <2> 		cmp ah, 38h
  6509 000051F4 0F84A0000000        <2> 		je near alton
  6510 000051FA 80FCB8              <2> 		cmp ah, 0B8h
  6511 000051FD 0F849F000000        <2> 		je near altoff
  6512 00005203 80FC1D              <2> 		cmp ah, 1Dh
  6513 00005206 0F847E000000        <2> 		je near ctron
  6514 0000520C 80FC9D              <2> 		cmp ah, 9Dh
  6515 0000520F 0F847D000000        <2> 		je near ctroff
  6516 00005215 66A3[90210000]      <2> 		mov [lastkey], ax
  6517 0000521B C3                  <2> 		ret
  6518                              <2> nospecialkey:
  6519 0000521C 80FC2A              <2> 		cmp ah, 2Ah
  6520 0000521F 0F8455000000        <2> 		je near shifton
  6521 00005225 80FC36              <2> 		cmp ah, 36h
  6522 00005228 0F844C000000        <2> 		je near shifton
  6523 0000522E 80FC1C              <2> 		cmp ah, 1Ch
  6524 00005231 0F8473000000        <2> 		je near entdown
  6525 00005237 80FCAA              <2> 		cmp ah, 0AAh
  6526 0000523A 0F8442000000        <2> 		je near shiftoff
  6527 00005240 80FCB6              <2> 		cmp ah, 0B6h
  6528 00005243 0F8439000000        <2> 		je near shiftoff
  6529 00005249 80FC3A              <2> 		cmp ah, 3Ah
  6530 0000524C 0F84A5000000        <2> 		je near capslock
  6531 00005252 80FC45              <2> 		cmp ah, 0x45
  6532 00005255 0F84AD000000        <2> 		je near numlock
  6533 0000525B 80FC46              <2> 		cmp ah, 0x46
  6534 0000525E 0F84BC000000        <2> 		je near scrolllock
  6535 00005264 C3                  <2> 		ret
  6536                              <2> 	getkeyspecial:
  6537 00005265 C605[69510000]E0    <2> 		mov byte [specialkey], 0xE0
  6538 0000526C E933FFFFFF          <2> 		jmp calckey
  6539                              <2> 	shift:
  6540 00005271 A0[D4510000]        <2> 		mov al, [uppercase]
  6541 00005276 3C01                <2> 		cmp al, 1
  6542 00005278 7308                <2> 		jae shiftoff
  6543                              <2> 	shifton:
  6544 0000527A C605[D4510000]01    <2> 		mov byte [uppercase], 1
  6545 00005281 C3                  <2> 		ret
  6546                              <2> 	shiftoff:
  6547 00005282 C605[D4510000]00    <2> 		mov byte [uppercase], 0
  6548 00005289 C3                  <2> 		ret
  6549                              <2> 	ctron:
  6550 0000528A C605[F6520000]01    <2> 		mov byte [ctrkey], 1
  6551 00005291 C3                  <2> 		ret
  6552                              <2> 	ctroff:
  6553 00005292 C605[F6520000]00    <2> 		mov byte [ctrkey], 0
  6554 00005299 C3                  <2> 		ret
  6555                              <2> 	alton:
  6556 0000529A C605[F5520000]01    <2> 		mov byte [altkey], 1
  6557 000052A1 C3                  <2> 		ret
  6558                              <2> 	altoff:
  6559 000052A2 C605[F5520000]00    <2> 		mov byte [altkey], 0
  6560 000052A9 C3                  <2> 		ret
  6561                              <2> 	entdown:
  6562 000052AA C3                  <2> 		ret
  6563                              <2> 	scanfound:
  6564 000052AB 81C704000000        <2> 		add edi, 4
  6565 000052B1 803D[F6520000]01    <2> 		cmp byte [ctrkey], 1
  6566 000052B8 731B                <2> 		jae altin
  6567 000052BA 81EF04000000        <2> 		sub edi, 4
  6568 000052C0 81C702000000        <2> 		add edi, 2
  6569 000052C6 803D[F5520000]01    <2> 		cmp byte [altkey], 1
  6570 000052CD 7306                <2> 		jae altin
  6571 000052CF 81EF02000000        <2> 		sub edi, 2
  6572                              <2> altin:
  6573 000052D5 81C701000000        <2> 		add edi, 1
  6574 000052DB 803D[D4510000]01    <2> 		cmp byte [uppercase], 1
  6575 000052E2 7306                <2> 		jae uppercaseon
  6576 000052E4 81EF01000000        <2> 		sub edi, 1
  6577                              <2> uppercaseon:
  6578 000052EA 8A07                <2> 		mov al,[edi]
  6579 000052EC A2[90210000]        <2> 		mov [lastkey], al
  6580 000052F1 C3                  <2> 		ret
  6581                              <2> 		
  6582 000052F2 00                  <2> keyboardstatus db 0
  6583 000052F3 00                  <2> numlockstatus db 0
  6584 000052F4 00                  <2> scrolllockstatus db 0
  6585 000052F5 00                  <2> altkey db 0
  6586 000052F6 00                  <2> ctrkey db 0
  6587                              <2> 	capslock:
  6588 000052F7 8035[F2520000]04    <2> 		xor byte [keyboardstatus], 00000100b
  6589 000052FE E835000000          <2> 		call updatekblights
  6590 00005303 E969FFFFFF          <2> 		jmp shift
  6591                              <2> 		
  6592                              <2> 	numlock:
  6593 00005308 8035[F2520000]02    <2> 		xor byte [keyboardstatus], 00000010b
  6594 0000530F 8035[F3520000]01    <2> 		xor byte [numlockstatus], 1
  6595 00005316 E81D000000          <2> 		call updatekblights
  6596 0000531B E969FEFFFF          <2> 		jmp getkey
  6597                              <2> 	
  6598                              <2> 	scrolllock:
  6599 00005320 8035[F2520000]01    <2> 		xor byte [keyboardstatus], 00000001b
  6600 00005327 8035[F4520000]01    <2> 		xor byte [scrolllockstatus], 1
  6601 0000532E E805000000          <2> 		call updatekblights
  6602 00005333 E951FEFFFF          <2> 		jmp getkey
  6603                              <2> 		
  6604                              <2> 	updatekblights:
  6605 00005338 B0ED                <2> 		mov al, 0xED
  6606 0000533A 66BA6000            <2> 		mov dx, 0x60
  6607 0000533E EE                  <2> 		out dx, al
  6608                              <2> 	chkkbdack:
  6609 0000533F EC                  <2> 		in al, dx
  6610 00005340 3CFA                <2> 		cmp al, 0xFA
  6611 00005342 75FB                <2> 		jne chkkbdack
  6612 00005344 A0[F2520000]        <2> 		mov al, [keyboardstatus]
  6613 00005349 EE                  <2> 		out dx, al
  6614 0000534A C3                  <2> 		ret
  6615                              <2> 		
  6616                              <2> scancode:
  6617 0000534B 000000000000        <2> 	db 0,0,0,0,0,0				;0h
  6618 00005351 000000000000        <2> 	db 0,0,0,0,0,0				;1h
  6619 00005357 3121AD000000        <2> 	db '1','!',0xAD,0,0,0		;2h
  6620 0000535D 3240FDFB0000        <2> 	db '2','@',0xFD,0xFB,0,0	;3h
  6621 00005363 332300000000        <2> 	db '3','#',0,0,0,0			;4h
  6622 00005369 34249B9C0000        <2> 	db '4','$',0x9B,0x9C,0,0	;5h
  6623 0000536F 3525EE000000        <2> 	db '5','%',0xEE,0,0,0		;6h
  6624 00005375 365EAC000000        <2> 	db '6','^',0xAC,0,0,0		;7h
  6625 0000537B 3726AB000000        <2> 	db '7','&',0xAB,0,0,0		;8h
  6626 00005381 382AEC000000        <2> 	db '8','*',0xEC,0,0,0		;9h
  6627 00005387 392800000000        <2> 	db '9','(',0,0,0,0			;0Ah
  6628 0000538D 302900000000        <2> 	db '0',')',0,0,0,0			;0Bh
  6629 00005393 2D5F9DF10000        <2> 	db '-','_',0x9D,0xF1,0,0	;0Ch
  6630 00005399 3D2BF7F60000        <2> 	db '=','+',0xF7,0xF6,0,0	;0Dh
  6631 0000539F 080800000000        <2> 	db 8,8,0,0,0,0				;0Eh
  6632 000053A5 000000000000        <2> 	db 0,0,0,0,0,0				;0Fh
  6633 000053AB 7151848E0000        <2> 	db 'q','Q',0x84,0x8E,0,0	;10h
  6634 000053B1 7757868F0000        <2> 	db 'w','W',0x86,0x8F,0,0	;11h
  6635 000053B7 65458290EE45        <2> 	db 'e','E',0x82,0x90,0xEE,'E'	;12h
  6636 000053BD 7252898A7050        <2> 	db 'r','R',0x89,0x8A,'p','P'	;13h
  6637 000053C3 7454819AE754        <2> 	db 't','T',0x81,0x9A,0xE7,'T'	;14h
  6638 000053C9 795998007559        <2> 	db 'y','Y',0x98,0,'u','Y'	;15h
  6639 000053CF 7555A3970000        <2> 	db 'u','U',0xA3,0x97,0,0		;16h
  6640 000053D5 6949A18D6949        <2> 	db 'i','I',0xA1,0x8D,'i','I'	;17h
  6641 000053DB 6F4FA29577EA        <2> 	db 'o','O',0xA2,0x95,'w',0xEA	;18h
  6642 000053E1 70509499E3EF        <2> 	db 'p','P',0x94,0x99,0xE3,0xEF	;19h
  6643 000053E7 5B7BF4000000        <2> 	db '[','{',0xF4,0,0,0		;1Ah
  6644 000053ED 5D7DF5000000        <2> 	db ']','}',0xF5,0,0,0		;1Bh
  6645 000053F3 000000000000        <2> 	db 0,0,0,0,0,0				;1Ch
  6646 000053F9 000000000000        <2> 	db 0,0,0,0,0,0				;1Dh
  6647 000053FF 6141A085E041        <2> 	db 'a','A',0xA0,133,224,'A'	;1Eh
  6648 00005405 73531500E5E4        <2> 	db 's','S',21,0,229,228		;1Fh
  6649 0000540B 6444F800EB7F        <2> 	db 'd','D',0xF8,0,235,127	;20h
  6650 00005411 66469F00EDE8        <2> 	db 'f','F',159,0,237,232	;21h
  6651 00005417 6747000079E2        <2> 	db 'g','G',0,0,'y',226		;22h
  6652 0000541D 684800006E48        <2> 	db 'h','H',0,0,'n','H'		;23h
  6653 00005423 6A4A00000000        <2> 	db 'j','J',0,0,0,0			;24h
  6654 00005429 6B4B00006B4B        <2> 	db 'k','K',0,0,'k','K'		;25h
  6655 0000542F 6C4C0000E9E9        <2> 	db 'l','L',0,0,233,233		;26h
  6656 00005435 3B3A14000000        <2> 	db ';',':',20,0,0,0			;27h
  6657 0000543B 272200000000        <2> 	db 27h,22h,0,0,0,0			;28h
  6658 00005441 607E00000000        <2> 	db '`','~',0,0,0,0			;29h
  6659 00005447 000000000000        <2> 	db 0,0,0,0,0,0				;2Ah
  6660 0000544D 5C7CAAB30000        <2> 	db 92,'|',170,179,0,0		;2Bh
  6661 00005453 7A5A91927A5A        <2> 	db 'z','Z',145,146,'z','Z'	;2Ch
  6662 00005459 7858000000F0        <2> 	db 'x','X',0,0,0,240		;2Dh
  6663 0000545F 634387800000        <2> 	db 'c','C',135,128,0,0		;2Eh
  6664 00005465 765600000000        <2> 	db 'v','V',0,0,0,0			;2Fh
  6665 0000546B 62420000E142        <2> 	db 'b','B',0,0,225,'B'		;30h
  6666 00005471 6E4EA4A5764E        <2> 	db 'n','N',0xA4,0xA5,'v','N'	;31h
  6667 00005477 6D4D0000E64D        <2> 	db 'm','M',0,0,230,'M'		;32h
  6668 0000547D 2C3CF3AE0000        <2> 	db ',','<',0xF3,174,0,0		;33h
  6669 00005483 2E3EF2AF0000        <2> 	db '.','>',0xF2,175,0,0		;34h
  6670 00005489 2F3FA8000000        <2> 	db '/','?',0xA8,0,0,0		;35h
  6671 0000548F 000000000000        <2> 	db 0,0,0,0,0,0				;36h
  6672 00005495 000000000000        <2> 	db 0,0,0,0,0,0				;37h
  6673 0000549B 000000000000        <2> 	db 0,0,0,0,0,0				;38h
  6674 000054A1 202000000000        <2> 	db ' ',' ',0,0,0,0			;39h
  6675                              <2> noscan:
  6676                              <2> 
  6677                              <1> %endif
  6678                              <1> ;drivers will soon be handled intelligently
  6679                              <1> ;every driver's source will be scanned for a .init function
  6680                              <1> ;that will be called and if it returns 0
  6681                              <1> ;the hardware was found and the driver initialized properly
  6682                              <1> initialize:
  6683                              <1> ;Now I will initialise the interrupt controllers and remap irq's
  6684 000054A7 E819000000          <1> 	call .pic
  6685 000054AC E841000000          <1> 	call .pit
  6686 000054B1 E863000000          <1> 	call .fpu
  6687 000054B6 E874000000          <1> 	call .sse
  6688 000054BB 31C0                <1> 	xor eax, eax
  6689 000054BD 31C9                <1> 	xor ecx, ecx
  6690                              <1> %ifdef sound.included
  6691 000054BF E808FBFFFF          <1> 	call sblaster.init
  6692                              <1> %endif
  6693                              <1> %ifdef io.serial
  6694                              <1> 	call serial.init
  6695                              <1> %endif
  6696 000054C4 C3                  <1> 	ret
  6697                              <1> 	
  6698                              <1> .pic:
  6699 000054C5 B011                <1> 	mov al, 0x11
  6700 000054C7 E620                <1> 	out 0x20, al
  6701 000054C9 E6A0                <1> 	out 0xA0, al
  6702 000054CB B040                <1> 	mov al, 0x40	;interrupt for master
  6703 000054CD E621                <1> 	out 0x21, al
  6704 000054CF B048                <1> 	mov al, 0x48	;interrupt for slave
  6705 000054D1 E6A1                <1> 	out 0xA1, al
  6706 000054D3 B004                <1> 	mov al, 4
  6707 000054D5 E621                <1> 	out 0x21, al
  6708 000054D7 B002                <1> 	mov al, 2
  6709 000054D9 E6A1                <1> 	out 0xA1, al
  6710 000054DB B001                <1> 	mov al, 0x1
  6711 000054DD E621                <1> 	out 0x21, al
  6712 000054DF B001                <1> 	mov al, 0x1
  6713 000054E1 E6A1                <1> 	out 0xA1, al
  6714                              <1> 	;masks are set to zero so as not to mask
  6715 000054E3 30C0                <1> 	xor al, al
  6716 000054E5 E621                <1> 	out 0x21, al
  6717 000054E7 30C0                <1> 	xor al, al
  6718 000054E9 E6A1                <1> 	out 0xA1, al
  6719 000054EB B020                <1> 	mov al, 0x20
  6720 000054ED E6A0                <1> 	out 0xA0, al
  6721 000054EF E620                <1> 	out 0x20, al
  6722 000054F1 C3                  <1> 	ret
  6723                              <1> .pit:
  6724                              <1> 	;initialize the PIT
  6725 000054F2 66A1[4F020000]      <1> 	mov ax, [pitdiv] ;this is the divider for the PIT
  6726 000054F8 E640                <1> 	out 0x40, al
  6727 000054FA 66C1C008            <1> 	rol ax, 8
  6728 000054FE E640                <1> 	out 0x40, al
  6729                              <1> 	;enable rtc interrupt
  6730 00005500 B00B                <1> 	mov al, 0xB
  6731 00005502 E670                <1> 	out 0x70, al
  6732 00005504 66C1C008            <1> 	rol ax, 8
  6733 00005508 E471                <1> 	in al, 0x71
  6734 0000550A 66C1C008            <1> 	rol ax, 8
  6735 0000550E E670                <1> 	out 0x70, al
  6736 00005510 66C1C008            <1> 	rol ax, 8
  6737 00005514 0C40                <1> 	or al, 0x40
  6738 00005516 E671                <1> 	out 0x71, al
  6739 00005518 C3                  <1> 	ret
  6740                              <1> .fpu:
  6741                              <1> 	;And now to initialize the fpu
  6742 00005519 0F20E0              <1> 	mov eax, cr4
  6743 0000551C 0D00020000          <1> 	or eax, 0x200
  6744 00005521 0F22E0              <1> 	mov cr4, eax
  6745 00005524 B87F0B0000          <1> 	mov eax, 0xB7F
  6746 00005529 50                  <1> 	push eax
  6747 0000552A D92C24              <1> 	fldcw [esp]
  6748 0000552D 58                  <1> 	pop eax
  6749 0000552E C3                  <1> 	ret
  6750                              <1> 	
  6751                              <1> .sse:
  6752 0000552F 0F20C0              <1> 	mov eax, cr0
  6753 00005532 24FB                <1> 	and al, 11111011b
  6754 00005534 0C02                <1> 	or al, 00000010b
  6755 00005536 0F22C0              <1> 	mov cr0, eax
  6756 00005539 0F20E0              <1> 	mov eax, cr4
  6757 0000553C 660D0006            <1> 	or ax, 0000011000000000b
  6758 00005540 0F22E0              <1> 	mov cr4, eax
  6759 00005543 C3                  <1> 	ret
  6760                                      %include "source/pci.asm"
  6761 00005544 00                  <1> pcibus		db 0
  6762 00005545 00                  <1> pcidevice	db 0
  6763 00005546 00                  <1> pcifunction	db 0
  6764 00005547 00                  <1> pciregister	db 0
  6765 00005548 00                  <1> pcireqtype db 0
  6766                              <1> 
  6767                              <1> getpciport:
  6768 00005549 B001                <1> 	mov al, 1
  6769 0000554B A2[48550000]        <1> 	mov [pcireqtype], al
  6770 00005550 E916000000          <1> 	jmp searchpci
  6771                              <1> pcidump:
  6772 00005555 31C0                <1> 	xor eax, eax
  6773 00005557 A2[46550000]        <1> 	mov [pcifunction], al
  6774 0000555C A2[44550000]        <1> 	mov [pcibus], al
  6775 00005561 A2[45550000]        <1> 	mov [pcidevice], al
  6776 00005566 A2[48550000]        <1> 	mov [pcireqtype], al
  6777                              <1> searchpci:		;;return in ebx, start X in pciX
  6778 0000556B 30C0                <1> 	xor al, al
  6779 0000556D A2[47550000]        <1> 	mov [pciregister], al
  6780 00005572 E855010000          <1> 	call getpciaddr
  6781 00005577 BAF80C0000          <1> 	mov edx, 0xCF8
  6782 0000557C EF                  <1> 	out dx, eax	;;request pci config
  6783 0000557D BAFC0C0000          <1> 	mov edx, 0xCFC
  6784 00005582 ED                  <1> 	in eax, dx 	;;read in pci config
  6785 00005583 3D0000FFFF          <1> 	cmp eax, 0xFFFF0000
  6786 00005588 0F8237000000        <1> 	jb near checkpcidevice
  6787                              <1> searchpciret:
  6788                              <1> nextpcidevice:
  6789 0000558E 30C0                <1> 	xor al, al
  6790 00005590 A2[46550000]        <1> 	mov [pcifunction], al
  6791 00005595 A0[45550000]        <1> 	mov al, [pcidevice]
  6792 0000559A 3C1F                <1> 	cmp al, 11111b
  6793 0000559C 0F83C1000000        <1> 	jae near nextpcibus
  6794 000055A2 FEC0                <1> 	inc al
  6795 000055A4 A2[45550000]        <1> 	mov [pcidevice], al
  6796 000055A9 EBC0                <1> 	jmp searchpci
  6797 000055AB A0[46550000]        <1> 	mov al, [pcifunction]
  6798 000055B0 3C07                <1> 	cmp al, 111b
  6799 000055B2 0F83D6FFFFFF        <1> 	jae near nextpcidevice
  6800 000055B8 FEC0                <1> 	inc al
  6801 000055BA A2[46550000]        <1> 	mov [pcifunction], al
  6802 000055BF EBAA                <1> 	jmp searchpci
  6803 000055C1 00000000            <1> pcitype: db 0,0,0,0
  6804                              <1> checkpcidevice:
  6805 000055C5 30C0                <1> 	xor al, al
  6806 000055C7 3805[48550000]      <1> 	cmp [pcireqtype], al
  6807 000055CD 0F842B000000        <1> 	je near dumppcidevice
  6808 000055D3 B008                <1> 	mov al, 0x08
  6809 000055D5 A2[47550000]        <1> 	mov [pciregister], al	;;class code, subclass, revision id
  6810 000055DA E8ED000000          <1> 	call getpciaddr
  6811 000055DF BAF80C0000          <1> 	mov edx, 0xCF8
  6812 000055E4 EF                  <1> 	out dx, eax
  6813 000055E5 BAFC0C0000          <1> 	mov edx, 0xCFC
  6814 000055EA ED                  <1> 	in eax, dx
  6815 000055EB C1C008              <1> 	rol eax, 8
  6816 000055EE 8A1D[C1550000]      <1> 	mov bl, [pcitype]
  6817 000055F4 38D8                <1> 	cmp al, bl
  6818 000055F6 0F8486000000        <1> 	je near foundpciaddr
  6819 000055FC EB90                <1> 	jmp searchpciret
  6820                              <1> dumppcidevice:
  6821 000055FE 30C0                <1> 	xor al, al
  6822 00005600 A2[47550000]        <1> 	mov [pciregister], al
  6823 00005605 E8C2000000          <1> 	call getpciaddr
  6824 0000560A 89C1                <1> 	mov ecx, eax
  6825 0000560C C605[A42D0000]05    <1> 	mov byte [firsthexshown], 5
  6826 00005613 E8A1D7FFFF          <1> 	call showhex
  6827                              <1> dumppcidevicelp:
  6828 00005618 A2[47550000]        <1> 	mov [pciregister], al
  6829 0000561D E8AA000000          <1> 	call getpciaddr
  6830 00005622 BAF80C0000          <1> 	mov edx, 0xCF8
  6831 00005627 EF                  <1> 	out dx, eax
  6832 00005628 BAFC0C0000          <1> 	mov edx, 0xCFC
  6833 0000562D ED                  <1> 	in eax, dx
  6834 0000562E 89C1                <1> 	mov ecx, eax
  6835 00005630 A0[47550000]        <1> 	mov al, [pciregister]
  6836 00005635 0404                <1> 	add al, 4
  6837 00005637 C605[A42D0000]05    <1> 	mov byte [firsthexshown], 5
  6838 0000563E E876D7FFFF          <1> 	call showhex
  6839 00005643 3C3C                <1> 	cmp al, 0x3C
  6840 00005645 72D1                <1> 	jb dumppcidevicelp
  6841                              <1> dumppcidn:
  6842                              <1> %ifdef io.serial
  6843                              <1> 	mov esi, line
  6844                              <1> 	call print
  6845                              <1> %else
  6846 00005647 803D[78230000]00    <1> 	cmp byte [charpos], 0
  6847 0000564E 0F843AFFFFFF        <1> 	je near searchpciret
  6848 00005654 BE[25730000]        <1> 	mov esi, line
  6849 00005659 E884C6FFFF          <1> 	call print
  6850                              <1> %endif
  6851 0000565E E92BFFFFFF          <1> 	jmp searchpciret
  6852                              <1> nextpcibus:
  6853 00005663 30C0                <1> 	xor al, al
  6854 00005665 A2[45550000]        <1> 	mov [pcidevice], al
  6855 0000566A A0[44550000]        <1> 	mov al, [pcibus]
  6856 0000566F 3C7F                <1> 	cmp al, 1111111b
  6857 00005671 730C                <1> 	jae donesearchpci
  6858 00005673 FEC0                <1> 	inc al
  6859 00005675 A2[44550000]        <1> 	mov [pcibus], al
  6860 0000567A E9ECFEFFFF          <1> 	jmp searchpci
  6861                              <1> donesearchpci:
  6862 0000567F 31D2                <1> 	xor edx, edx
  6863 00005681 C3                  <1> 	ret
  6864                              <1> foundpciaddr:
  6865 00005682 B010                <1> 	mov al, 0x10
  6866 00005684 A2[47550000]        <1> 	mov [pciregister], al
  6867                              <1> findpciioaddr:
  6868 00005689 E83E000000          <1> 	call getpciaddr
  6869 0000568E BAF80C0000          <1> 	mov edx, 0xCF8
  6870 00005693 EF                  <1> 	out dx, eax
  6871 00005694 BAFC0C0000          <1> 	mov edx, 0xCFC
  6872 00005699 ED                  <1> 	in eax, dx
  6873 0000569A 89C3                <1> 	mov ebx, eax
  6874 0000569C 81E301000000        <1> 	and ebx, 1
  6875 000056A2 81FB00000000        <1> 	cmp ebx, 0
  6876 000056A8 0F8408000000        <1> 	je near notpciioaddr
  6877 000056AE 2D01000000          <1> 	sub eax, 1
  6878 000056B3 89C2                <1> 	mov edx, eax
  6879 000056B5 C3                  <1> 	ret
  6880                              <1> notpciioaddr:
  6881 000056B6 A0[47550000]        <1> 	mov al, [pciregister]
  6882 000056BB 0404                <1> 	add al, 4
  6883 000056BD 3C28                <1> 	cmp al, 0x28
  6884 000056BF 0F87C9FEFFFF        <1> 	ja near searchpciret
  6885 000056C5 A2[47550000]        <1> 	mov [pciregister], al
  6886 000056CA EBBD                <1> 	jmp findpciioaddr
  6887                              <1> getpciaddr:		;;puts it in eax and ebx
  6888 000056CC 31C0                <1> 			xor eax, eax
  6889 000056CE BB00000080          <1> 			mov ebx, 0x80000000
  6890 000056D3 A0[44550000]        <1> 			mov al, [pcibus]
  6891 000056D8 C1E010              <1> 			shl eax, 16
  6892 000056DB 01C3                <1> 			add ebx, eax
  6893 000056DD 31C0                <1> 			xor eax, eax
  6894 000056DF A0[45550000]        <1> 			mov al, [pcidevice]
  6895 000056E4 C1E00B              <1> 			shl eax, 11
  6896 000056E7 01C3                <1> 			add ebx, eax
  6897 000056E9 31C0                <1> 			xor eax, eax
  6898 000056EB A0[46550000]        <1> 			mov al, [pcifunction]
  6899 000056F0 C1E008              <1> 			shl eax, 8
  6900 000056F3 01C3                <1> 			add ebx, eax
  6901 000056F5 31C0                <1> 			xor eax, eax
  6902 000056F7 A0[47550000]        <1> 			mov al, [pciregister]
  6903 000056FC 01C3                <1> 			add ebx, eax
  6904 000056FE 89D8                <1> 			mov eax, ebx
  6905 00005700 C3                  <1> 			ret
  6906                                      %include "source/disk.asm"
  6907                              <1> ;This loads files using the methods in the loaded driver
  6908                              <1> %ifdef disk.real
  6909                              <1> %include "source/drivers/disk/realmode.asm"
  6910                              <2> diskr:
  6911                              <2> 			;read from disk using real mode-it does not work with large files
  6912                              <2> 			;sector count in cl
  6913                              <2> 			;disk number in ch
  6914                              <2> 			;48 bit address with last 32 bits in ebx
  6915                              <2> 			;buffer in esi
  6916                              <2> 			;puts end of buffer in edi and end lba address in edx
  6917 00005701 880D[2E570000]      <2> 	mov [sdlength], cl
  6918 00005707 891D[2F570000]      <2> 	mov [sdaddress], ebx
  6919 0000570D 8935[8D580000]      <2> 	mov [oldesireal], esi
  6920 00005713 66BE[3357]          <2> 	mov si, readdiskreal
  6921 00005717 668935[B10C0000]    <2> 	mov [realmodeptr], si
  6922 0000571E BE[6F570000]        <2> 	mov esi, backfromrealread
  6923 00005723 8935[AD0C0000]      <2> 	mov [realmodereturn], esi
  6924 00005729 E968B4FFFF          <2> 	jmp realmode
  6925 0000572E 00                  <2> sdlength db 0
  6926 0000572F 00000000            <2> sdaddress dd 0
  6927                              <2> 
  6928                              <2> [BITS 16]
  6929                              <2> readdiskreal:
  6930 00005733 C706[5F57]1000      <2> 	mov word [dlen], 0x10
  6931 00005739 C706[6357]0000      <2> 	mov word [daddress], 0
  6932 0000573F C706[6557]0001      <2> 	mov word [dsegm], 0x100
  6933 00005745 66891E[6757]        <2> 	mov [dlbaad], ebx
  6934 0000574A 880E[6157]          <2> 	mov [dreadlen], cl
  6935                              <2> ReadHardDisk:
  6936 0000574E BE[5F57]            <2> 	mov si, diskaddresspacket
  6937 00005751 31C0                <2> 	xor ax, ax
  6938 00005753 B442                <2> 	mov ah, 0x42
  6939 00005755 8A16[5E57]          <2> 	mov dl, [dnumber]
  6940 00005759 CD13                <2> 	int 0x13
  6941 0000575B 72F1                <2> 	jc ReadHardDisk
  6942 0000575D C3                  <2> 	ret
  6943                              <2> 
  6944 0000575E 80                  <2> dnumber db 0x80
  6945                              <2> diskaddresspacket:
  6946 0000575F 10                  <2> dlen:	db 0x10 ;size of packet
  6947 00005760 00                  <2> 		db 0
  6948 00005761 7F00                <2> dreadlen:	dw 0x7F	;blocks to read=maximum
  6949 00005763 0000                <2> daddress:	dw 0x0	;address 0
  6950 00005765 0001                <2> dsegm:		dw 0x100	;segment
  6951                              <2> 		;start with known value for hd
  6952                              <2> dlbaad:
  6953 00005767 00000000            <2> 	dd 0	;lba address
  6954 0000576B 00000000            <2> 	dd 0
  6955                              <2> [BITS 32]
  6956                              <2> backfromrealread:
  6957 0000576F 8B35[8D580000]      <2> 	mov esi, [oldesireal]
  6958 00005775 8B1D[2F570000]      <2> 	mov ebx, [sdaddress]
  6959 0000577B 31C9                <2> 	xor ecx, ecx
  6960 0000577D 8A0D[2E570000]      <2> 	mov cl, [sdlength]
  6961 00005783 01CB                <2> 	add ebx, ecx
  6962 00005785 66B80800            <2> 	mov ax, LINEAR_SEL
  6963 00005789 8EE0                <2> 	mov fs, ax
  6964 0000578B BF00100000          <2> 	mov edi, 0x1000
  6965 00005790 B200                <2> 	mov dl, 0
  6966 00005792 D0E1                <2> 	shl cl, 1
  6967                              <2> copyfromrmodedisk:
  6968 00005794 648A07              <2> 	mov al, [fs:edi]
  6969 00005797 8806                <2> 	mov [esi], al
  6970 00005799 47                  <2> 	inc edi
  6971 0000579A 46                  <2> 	inc esi
  6972 0000579B FECA                <2> 	dec dl
  6973 0000579D 80FA00              <2> 	cmp dl, 0
  6974 000057A0 75F2                <2> 	jne copyfromrmodedisk
  6975 000057A2 FEC9                <2> 	dec cl
  6976 000057A4 B200                <2> 	mov dl, 0
  6977 000057A6 80F900              <2> 	cmp cl, 0
  6978 000057A9 75E9                <2> 	jne copyfromrmodedisk
  6979 000057AB 66B83000            <2> 	mov ax, NEW_DATA_SEL
  6980 000057AF 8EE0                <2> 	mov fs, ax
  6981 000057B1 89F7                <2> 	mov edi, esi
  6982 000057B3 8B35[8D580000]      <2> 	mov esi, [oldesireal]
  6983 000057B9 89DA                <2> 	mov edx, ebx
  6984 000057BB 8B1D[2F570000]      <2> 	mov ebx, [sdaddress]
  6985 000057C1 C3                  <2> 	ret
  6986                              <2> 	
  6987                              <1> %else
  6988                              <1> 	%ifdef disk.protected
  6989                              <1> 	%include "source/drivers/disk/pata.asm"
  6990                              <1> 	%endif
  6991                              <1> %endif
  6992                              <1> loadfile:	;loads a file with the name buffer's location in edi into location in esi
  6993                              <1> 			;returns with err code in edx and file end in edi
  6994 000057C2 803F00              <1> 	cmp byte [edi], 0
  6995 000057C5 0F8448000000        <1> 	je near nofileload
  6996 000057CB 89FA                <1> 	mov edx, edi
  6997 000057CD BB[4A830000]        <1> 	mov ebx, diskfileindex
  6998                              <1> nextnamechar:
  6999 000057D2 8A07                <1> 	mov al, [edi]
  7000 000057D4 3C26                <1> 	cmp al, '&'
  7001 000057D6 7440                <1> 	je nullfile
  7002 000057D8 8A23                <1> 	mov ah, [ebx]
  7003 000057DA 47                  <1> 	inc edi
  7004 000057DB 43                  <1> 	inc ebx
  7005 000057DC 88C1                <1> 	mov cl, al
  7006 000057DE 08E1                <1> 	or cl, ah
  7007 000057E0 80F900              <1> 	cmp cl, 0
  7008 000057E3 744E                <1> 	je equalfilenames
  7009 000057E5 80F920              <1> 	cmp cl, ' '
  7010 000057E8 7449                <1> 	je equalfilenames
  7011 000057EA 3C2A                <1> 	cmp al, '*'
  7012 000057EC 742B                <1> 	je equalfilenames2
  7013 000057EE 80FC00              <1> 	cmp ah, 0
  7014 000057F1 7410                <1> 	je nextfilename
  7015 000057F3 3C00                <1> 	cmp al, 0
  7016 000057F5 7404                <1> 	je getebxzero
  7017 000057F7 38E0                <1> 	cmp al, ah
  7018 000057F9 74D7                <1> 	je nextnamechar
  7019                              <1> getebxzero:
  7020 000057FB 8A23                <1> 	mov ah, [ebx]
  7021 000057FD 43                  <1> 	inc ebx
  7022 000057FE 80FC00              <1> 	cmp ah, 0
  7023 00005801 75F8                <1> 	jne getebxzero
  7024                              <1> nextfilename:
  7025 00005803 81C308000000        <1> 	add ebx, 8		;next descriptor
  7026 00005809 89D7                <1> 	mov edi, edx
  7027 0000580B 81FB[F4840000]      <1> 	cmp ebx, enddiskfileindex
  7028 00005811 72BF                <1> 	jb nextnamechar
  7029                              <1> nofileload:
  7030 00005813 BA94010000          <1> 	mov edx, 404	;indicate not found error
  7031                              <1> nullfile:
  7032 00005818 C3                  <1> 	ret
  7033                              <1> equalfilenames2:
  7034 00005819 81EB02000000        <1> 	sub ebx, 2
  7035                              <1> eqfilefind:
  7036 0000581F 43                  <1> 	inc ebx
  7037 00005820 81FB[F4840000]      <1> 	cmp ebx, enddiskfileindex
  7038 00005826 0F83E7FFFFFF        <1> 	jae near nofileload
  7039 0000582C 8A03                <1> 	mov al, [ebx]
  7040 0000582E 3C00                <1> 	cmp al, 0
  7041 00005830 75ED                <1> 	jne eqfilefind
  7042 00005832 43                  <1> 	inc ebx
  7043                              <1> equalfilenames:
  7044 00005833 8B4304              <1> 	mov eax, [ebx + 4] 	;put file size in eax
  7045 00005836 8B1B                <1> 	mov ebx, [ebx]		;put file beginning in ebx
  7046 00005838 031D[F6840000]      <1> 	add ebx, [lbaad]	;add offset to solleros
  7047 0000583E 31C9                <1> 	xor ecx, ecx
  7048 00005840 88C1                <1> 	mov cl, al			;get excess number of sectors
  7049 00005842 C0E102              <1> 	shl cl, 2
  7050 00005845 C0E902              <1> 	shr cl, 2			;cut off at 64
  7051 00005848 29C8                <1> 	sub eax, ecx		;get rid of excess sectors
  7052 0000584A B500                <1> 	mov ch, 0			;drive 0
  7053 0000584C C1E806              <1> 	shr eax, 6			;get number of 64 sector tracks
  7054                              <1> loaddiskfile:			;tracks in eax, excess sectors in cl, drive in ch, buffer in esi, address in ebx
  7055 0000584F A3[91580000]        <1> 	mov [filetracks], eax
  7056 00005854 89F7                <1> 	mov edi, esi		;just in case cl is 0
  7057 00005856 89DA                <1> 	mov edx, ebx
  7058 00005858 80F900              <1> 	cmp cl, 0
  7059 0000585B 7405                <1> 	je copytracksforfile
  7060 0000585D E89FFEFFFF          <1> 	call diskr	;take care of excess sectors
  7061                              <1> copytracksforfile:
  7062 00005862 A1[91580000]        <1> 	mov eax, [filetracks]
  7063 00005867 3D00000000          <1> 	cmp eax, 0
  7064 0000586C 7419                <1> 	je donecopyfile
  7065 0000586E 48                  <1> 	dec eax
  7066 0000586F A3[91580000]        <1> 	mov [filetracks], eax
  7067 00005874 89D3                <1> 	mov ebx, edx	;get end lba
  7068 00005876 B140                <1> 	mov cl, 0x40 ;for compatability with BIOS it uses 64 instead of 128
  7069 00005878 8A2D[F5840000]      <1> 	mov ch, [DriveNumber]
  7070 0000587E 89FE                <1> 	mov esi, edi	;reset buffer
  7071 00005880 E87CFEFFFF          <1> 	call diskr
  7072 00005885 EBDB                <1> 	jmp copytracksforfile
  7073                              <1> donecopyfile:
  7074 00005887 BA00000000          <1> 	mov edx, 0	;no error
  7075 0000588C C3                  <1> 	ret
  7076                              <1> 
  7077 0000588D 00000000            <1> oldesireal dd 0
  7078 00005891 00000000            <1> filetracks dd 0
  7079 00005895 00                  <1> lbad1 db 0
  7080 00005896 00                  <1> lbad2 db 0
  7081 00005897 00                  <1> lbad3 db 0
  7082 00005898 00                  <1> lbad4 db 0
  7083 00005899 00                  <1> lbad5 db 0
  7084 0000589A 00                  <1> lbad6 db 0
  7085 0000589B 6400                <1> segments dw 100
  7086                              <1> 
  7087                              <1> 
  7088                              <1> 	
  7089                                      %include "source/threads.asm"
  7090                              <1> %ifdef threads.included	
  7091                              <1> nwcmdst:
  7092 0000589D 31C0                <1> 	xor eax, eax
  7093 0000589F BC[DA960000]        <1> 	mov esp, stackend
  7094 000058A4 A2[61590000]        <1> 	mov [threadson], al
  7095 000058A9 A3[62590000]        <1> 	mov [currentthread], eax
  7096 000058AE 0504000000          <1> 	add eax, 4
  7097 000058B3 A3[5D590000]        <1> 	mov [lastthread], eax
  7098 000058B8 FB                  <1> 	sti
  7099 000058B9 E927D0FFFF          <1> 	jmp nwcmd
  7100                              <1> 
  7101                              <1> nomorethreadspace:
  7102 000058BE BE[D4580000]        <1> 	mov esi, nmts
  7103 000058C3 E81AC4FFFF          <1> 	call print
  7104 000058C8 C605[61590000]00    <1> 	mov byte [threadson], 0
  7105 000058CF E911D0FFFF          <1> 	jmp nwcmd
  7106 000058D4 546872656164204F76- <1> nmts	db "Thread Overflow",10,0
  7107 000058DD 6572666C6F770A00    <1>
  7108                              <1> 
  7109                              <1> nomorestackspace:
  7110 000058E5 BE[F1580000]        <1> 	mov esi, nmss
  7111 000058EA E8F3C3FFFF          <1> 	call print
  7112 000058EF EBAC                <1> 	jmp nwcmdst
  7113 000058F1 537461636B204F7665- <1> nmss	db "Stack Overflow",10,0
  7114 000058FA 72666C6F770A00      <1>
  7115                              <1> 	
  7116                              <1> threadswitch:
  7117 00005901 FA                  <1> 	cli
  7118 00005902 60                  <1> 	pushad
  7119 00005903 BF[20A82900]        <1> 	mov edi, threadlist
  7120 00005908 A1[62590000]        <1> 	mov eax, [currentthread]
  7121 0000590D 40                  <1> 	inc eax
  7122 0000590E A3[62590000]        <1> 	mov [currentthread], eax
  7123 00005913 6648                <1> 	dec ax
  7124 00005915 C1E002              <1> 	shl eax, 2
  7125 00005918 01C7                <1> 	add edi, eax
  7126 0000591A 8927                <1> 	mov [edi], esp
  7127 0000591C 81C704000000        <1> 	add edi, 4
  7128 00005922 81FF[20B82900]      <1> 	cmp edi, threadlistend
  7129 00005928 0F830D000000        <1> 	jae near nookespthread
  7130 0000592E 8B07                <1> 	mov eax, [edi]
  7131 00005930 3D00000000          <1> 	cmp eax, 0
  7132 00005935 0F8519000000        <1> 	jne near okespthread
  7133                              <1> nookespthread:
  7134 0000593B BF[20A82900]        <1> 	mov edi, threadlist
  7135 00005940 31C0                <1> 	xor eax, eax
  7136 00005942 A3[62590000]        <1> 	mov [currentthread], eax
  7137 00005947 8B07                <1> 	mov eax, [edi]
  7138 00005949 3D00000000          <1> 	cmp eax, 0
  7139 0000594E 0F8449FFFFFF        <1> 	je near nwcmdst
  7140                              <1> okespthread:
  7141 00005954 89C4                <1> 	mov esp, eax
  7142 00005956 B020                <1> 	mov al, 0x20
  7143 00005958 E620                <1> 	out 0x20, al
  7144 0000595A 61                  <1> 	popad
  7145 0000595B FB                  <1> 	sti
  7146 0000595C CF                  <1> 	iret
  7147                              <1> 
  7148                              <1> %endif
  7149 0000595D 04000000            <1> 	lastthread dd 4
  7150 00005961 00                  <1> 	threadson db 0
  7151 00005962 00000000            <1> 	currentthread dd 0
  7152                                  %ifdef gui.included
  7153                                      %include "source/gui/gui.asm"
  7154                              <1> guiclear:
  7155 00005966 8B3D[3D4B0000]      <1> 	mov edi, [physbaseptr]
  7156 0000596C 668B15[274B0000]    <1> 	mov dx, [resolutionx]
  7157 00005973 668B0D[294B0000]    <1> 	mov cx, [resolutiony]
  7158                              <1> %ifdef gui.background
  7159 0000597A 813D[B9590000]0000- <1> 	cmp dword [backgroundimage], 0
  7160 00005982 0000                <1>
  7161 00005984 7437                <1> 	je guiclear.noback
  7162 00005986 8B35[B9590000]      <1> 		mov esi, [backgroundimage]
  7163                              <1> 	.lp:
  7164                              <1> 		;movdqa xmm0, [esi]	;the next 4 lines are for SSE
  7165                              <1> 		;movdqa [edi], xmm0
  7166                              <1> 		;add esi, 16
  7167                              <1> 		;add edi, 16
  7168                              <1> 		;sub dx, 8
  7169 0000598C 8B06                <1> 		mov eax, [esi]
  7170 0000598E 8907                <1> 		mov [edi], eax
  7171 00005990 81C604000000        <1> 		add esi, 4
  7172 00005996 81C704000000        <1> 		add edi, 4
  7173 0000599C 6681EA0200          <1> 		sub dx, 2
  7174 000059A1 6681FA0000          <1> 		cmp dx, 0
  7175 000059A6 77E4                <1> 		ja .lp
  7176 000059A8 6649                <1> 		dec cx
  7177 000059AA 668B15[274B0000]    <1> 		mov dx, [resolutionx]
  7178 000059B1 6681F90000          <1> 		cmp cx, 0
  7179 000059B6 77D4                <1> 		ja .lp
  7180 000059B8 C3                  <1> 		ret
  7181 000059B9 00000000            <1> 	backgroundimage dd 0
  7182                              <1> %endif
  7183                              <1> guiclear.noback:
  7184 000059BD A1[E7590000]        <1> 	mov eax, [background]
  7185                              <1> guiclearloop:
  7186 000059C2 8907                <1> 	mov [edi], eax
  7187 000059C4 81C704000000        <1> 	add edi, 4
  7188 000059CA 6681EA0200          <1> 	sub dx, 2
  7189 000059CF 6681FA0000          <1> 	cmp dx, 0
  7190 000059D4 77EC                <1> 	ja guiclearloop
  7191 000059D6 6649                <1> 	dec cx
  7192 000059D8 668B15[274B0000]    <1> 	mov dx, [resolutionx]
  7193 000059DF 6681F90000          <1> 	cmp cx, 0
  7194 000059E4 77DC                <1> 	ja guiclearloop
  7195 000059E6 C3                  <1> 	ret
  7196                              <1> 
  7197 000059E7 CF7B<rept>          <1> background times 2 dw 0111101111001111b
  7198                              <1> 
  7199                              <1> guiboot:	;Let's see what I can do, I am going to try to make this as freestanding as possible
  7200 000059EB 31C0                <1> 	xor eax, eax
  7201 000059ED 31DB                <1> 	xor ebx, ebx
  7202 000059EF 31C9                <1> 	xor ecx, ecx
  7203 000059F1 31D2                <1> 	xor edx, edx
  7204 000059F3 E813000000          <1> 	call guisetup
  7205                              <1> guiloop:
  7206 000059F8 E81BF2FFFF          <1> 	call cursorgui
  7207                              <1> guistart:
  7208 000059FD E887F7FFFF          <1> 	call getkey
  7209 00005A02 C605[235B0000]00    <1> 	mov byte [copygui], 0
  7210 00005A09 EBF2                <1> 	jmp guistart
  7211                              <1> guisetup:
  7212 00005A0B 8B3D[3D4B0000]      <1> 	mov edi, [physbaseptr]
  7213 00005A11 668B15[274B0000]    <1> 	mov dx, [resolutionx]
  7214 00005A18 668B0D[294B0000]    <1> 	mov cx, [resolutiony]
  7215 00005A1F 668B1D[E7590000]    <1> 	mov bx, [background]
  7216                              <1> guiclearloop2:
  7217 00005A26 66891F              <1> 	mov [edi], bx
  7218 00005A29 81C702000000        <1> 	add edi, 2
  7219 00005A2F 664A                <1> 	dec dx
  7220 00005A31 6681FA0000          <1> 	cmp dx, 0
  7221 00005A36 0F85EAFFFFFF        <1> 	jne near guiclearloop2
  7222 00005A3C 6649                <1> 	dec cx
  7223 00005A3E 668B15[274B0000]    <1> 	mov dx, [resolutionx]
  7224 00005A45 6681F90000          <1> 	cmp cx, 0
  7225 00005A4A 0F85D6FFFFFF        <1> 	jne near guiclearloop2
  7226 00005A50 C605[F4840000]01    <1> 	mov byte [guion], 1
  7227 00005A57 C605[295B0000]00    <1> 	mov byte [mouseselecton], 0
  7228 00005A5E 31C0                <1> 	xor eax, eax
  7229 00005A60 31DB                <1> 	xor ebx, ebx
  7230 00005A62 31C9                <1> 	xor ecx, ecx
  7231 00005A64 31D2                <1> 	xor edx, edx
  7232                              <1> 	
  7233 00005A66 BE[306F0000]        <1> 	mov esi, pacmsg
  7234 00005A6B 30E4                <1> 	xor ah, ah
  7235 00005A6D B010                <1> 	mov al, 00010000b
  7236 00005A6F 31DB                <1> 	xor ebx, ebx
  7237 00005A71 66B99000            <1> 	mov cx, 144
  7238 00005A75 66BA0400            <1> 	mov dx, 4
  7239 00005A79 E8D70A0000          <1> 	call showstring
  7240                              <1> 	
  7241 00005A7E BE[52700000]        <1> 	mov esi, interneticon
  7242 00005A83 30E4                <1> 	xor ah, ah
  7243 00005A85 B010                <1> 	mov al, 00010000b
  7244 00005A87 BB[8F6F0000]        <1> 	mov ebx, noie
  7245 00005A8C 66B91800            <1> 	mov cx, 24
  7246 00005A90 66BA0400            <1> 	mov dx, 4
  7247 00005A94 E816100000          <1> 	call showicon
  7248                              <1> 	
  7249 00005A99 BE[D4700000]        <1> 	mov esi, wordicon
  7250 00005A9E 30E4                <1> 	xor ah, ah
  7251 00005AA0 B010                <1> 	mov al, 00010000b
  7252 00005AA2 31DB                <1> 	xor ebx, ebx
  7253 00005AA4 66B91800            <1> 	mov cx, 24
  7254 00005AA8 66BA3000            <1> 	mov dx, 48
  7255 00005AAC E8FE0F0000          <1> 	call showicon
  7256                              <1> 	
  7257 00005AB1 BE[56710000]        <1> 	mov esi, pacmanpellet
  7258 00005AB6 30E4                <1> 	xor ah, ah
  7259 00005AB8 B010                <1> 	mov al, 00010000b
  7260 00005ABA 31DB                <1> 	xor ebx, ebx
  7261 00005ABC 66B94000            <1> 	mov cx, 64
  7262 00005AC0 66BA0400            <1> 	mov dx, 4
  7263 00005AC4 E8E60F0000          <1> 	call showicon
  7264                              <1> 	
  7265 00005AC9 BE[5A720000]        <1> 	mov esi, pacman
  7266 00005ACE 30E4                <1> 	xor ah, ah
  7267 00005AD0 B010                <1> 	mov al, 00010000b
  7268 00005AD2 BB[786F0000]        <1> 	mov ebx, pacmannomnom
  7269 00005AD7 66B94000            <1> 	mov cx, 64
  7270 00005ADB 66BA3000            <1> 	mov dx, 48
  7271 00005ADF E8CB0F0000          <1> 	call showicon
  7272                              <1> 	
  7273 00005AE4 BE[D8710000]        <1> 	mov esi, ghostie
  7274 00005AE9 30E4                <1> 	xor ah, ah
  7275 00005AEB B010                <1> 	mov al, 00010000b
  7276 00005AED BB[616F0000]        <1> 	mov ebx, boo
  7277 00005AF2 66B96C00            <1> 	mov cx, 108
  7278 00005AF6 66BA0400            <1> 	mov dx, 4
  7279 00005AFA E8B00F0000          <1> 	call showicon
  7280                              <1> 
  7281 00005AFF BE[126F0000]        <1> 	mov esi, start
  7282 00005B04 668B0D[294B0000]    <1> 	mov cx, [resolutiony]
  7283 00005B0B 6681E91000          <1> 	sub cx, 16
  7284 00005B10 66BA0200            <1> 	mov dx, 2
  7285 00005B14 30E4                <1> 	xor ah, ah
  7286 00005B16 B010                <1> 	mov al, 00010000b
  7287 00005B18 BB[04700000]        <1> 	mov ebx, winblows
  7288 00005B1D E8330A0000          <1> 	call showstring
  7289 00005B22 C3                  <1> 	ret
  7290                              <1> 	
  7291                              <1> ; guicopy:	;;for double buffering
  7292                              <1> 	; mov byte [copygui], 1
  7293                              <1> 	; mov edi, [offscreenmemoffset]
  7294                              <1> 	; xor edx, edx
  7295                              <1> 	; xor ecx, ecx
  7296                              <1> 	; mov dx, [mousecursorposition]
  7297                              <1> 	; mov cx, [mousecursorposition + 2]
  7298                              <1> 	; add edi, edx
  7299                              <1> 	; mov dx, [resolutionx2]
  7300                              <1> 	; inc cx
  7301                              <1> ; guicp2:
  7302                              <1> 	; add edi, edx
  7303                              <1> 	; dec cx
  7304                              <1> 	; cmp cx, 0
  7305                              <1> 	; jne guicp2
  7306                              <1> 	; sub edi, edx
  7307                              <1> 	; mov [cursorloc], edi
  7308                              <1> 	; mov ebx, cursorbmp
  7309                              <1> 	; mov cx, [resolutiony]
  7310                              <1> 	; rol ecx, 16
  7311                              <1> 	; mov cx, [resolutionx]
  7312                              <1> 	; mov esi, [physbaseptr]
  7313                              <1> 	; mov edi, [offscreenmemoffset]
  7314                              <1> ; guicp1:
  7315                              <1> 	; mov ax, [esi]
  7316                              <1> 	; mov [edi], ax
  7317                              <1> 	; add esi, 2
  7318                              <1> 	; add edi, 2
  7319                              <1> 	; cmp edi, [cursorloc]
  7320                              <1> 	; je copycursor
  7321                              <1> ; dncopycursor:
  7322                              <1> 	; dec cx
  7323                              <1> 	; cmp cx, 0
  7324                              <1> 	; jne guicp1
  7325                              <1> 	; mov cx, [resolutionx]
  7326                              <1> 	; rol ecx, 16
  7327                              <1> 	; dec cx
  7328                              <1> 	; cmp cx, 0
  7329                              <1> 	; rol ecx, 16
  7330                              <1> 	; jne guicp1
  7331                              <1> 	; mov byte [copygui], 0
  7332                              <1> 	; ret
  7333                              <1> ; copycursor:
  7334                              <1> 	; cmp ebx, cursorbmpend
  7335                              <1> 	; jae dncopycursor
  7336                              <1> 	; mov dx, [resolutionx2]
  7337                              <1> 	; add edi, edx
  7338                              <1> 	; mov [cursorloc], edi
  7339                              <1> 	; sub edi, edx
  7340                              <1> 	; dec ebx
  7341                              <1> 	; sub edi, 2
  7342                              <1> 	; sub esi, 2
  7343                              <1> 	; mov dx, 9
  7344                              <1> ; curscplp:
  7345                              <1> 	; inc ebx
  7346                              <1> 	; add esi, 2
  7347                              <1> 	; add edi, 2
  7348                              <1> 	; mov ax, [esi]
  7349                              <1> 	; mov [edi], ax
  7350                              <1> 	; mov al, [ebx]
  7351                              <1> 	; cmp al, 0
  7352                              <1> 	; je curscplp2
  7353                              <1> 	; mov word [edi], 1110011110011100b
  7354                              <1> ; curscplp2:
  7355                              <1> 	; dec cx
  7356                              <1> 	; cmp cx, 0
  7357                              <1> 	; je dncopycursor
  7358                              <1> 	; dec dx
  7359                              <1> 	; cmp dx, 0
  7360                              <1> ;	jne curscplp
  7361                              <1> ;	jmp dncopycursor
  7362                              <1> 	
  7363                              <1> 	
  7364                              <1> ;cursorloc: dd 0
  7365                              <1> 				
  7366 00005B23 00                  <1> copygui db 0
  7367 00005B24 00                  <1> graphicsset db 0
  7368 00005B25 0000                <1> graphicspos db 0,0
  7369 00005B27 00                  <1> showcursorfonton db 0
  7370 00005B28 00                  <1> savefonton db 0
  7371 00005B29 00                  <1> mouseselecton db 0
  7372                              <1> 
  7373                              <1> 		
  7374                              <1> clearmousecursor:
  7375 00005B2A BE[E7590000]        <1> 		mov esi, background
  7376 00005B2F 8B3D[3D4B0000]      <1> 		mov edi, [physbaseptr]
  7377 00005B35 31D2                <1> 		xor edx, edx
  7378 00005B37 31C9                <1> 		xor ecx, ecx
  7379 00005B39 668B15[024E0000]    <1> 		mov dx, [lastmouseposition]
  7380 00005B40 668B0D[044E0000]    <1> 		mov cx, [lastmouseposition + 2]
  7381 00005B47 01D7                <1> 		add edi, edx
  7382 00005B49 31D2                <1> 		xor edx, edx
  7383 00005B4B 668B15[154C0000]    <1> 		mov dx, [resolutionx2]
  7384 00005B52 6681F90000          <1> 		cmp cx, 0
  7385 00005B57 744F                <1> 		je .noyclr
  7386 00005B59 01D7                <1> .yclr:	add edi, edx
  7387 00005B5B 6649                <1> 		dec cx
  7388 00005B5D 6681F90000          <1> 		cmp cx, 0
  7389 00005B62 75F5                <1> 		jne .yclr
  7390                              <1> %ifdef gui.background
  7391 00005B64 813D[B9590000]0000- <1> 		cmp dword [backgroundimage], 0
  7392 00005B6C 0000                <1>
  7393 00005B6E 7438                <1> 		je .noyclr
  7394 00005B70 8B35[B9590000]      <1> 		mov esi, [backgroundimage]
  7395 00005B76 2B3D[3D4B0000]      <1> 		sub edi, [physbaseptr]
  7396 00005B7C 01FE                <1> 		add esi, edi
  7397 00005B7E 033D[3D4B0000]      <1> 		add edi, [physbaseptr]
  7398                              <1> .backlp:
  7399 00005B84 31DB                <1> 		xor ebx, ebx
  7400                              <1> .noyback:
  7401 00005B86 8B041E              <1> 		mov eax, [esi + ebx]
  7402 00005B89 89041F              <1> 		mov [edi + ebx], eax
  7403 00005B8C 81C304000000        <1> 		add ebx, 4
  7404 00005B92 81FB10000000        <1> 		cmp ebx, 16
  7405 00005B98 75EC                <1> 		jne .noyback
  7406 00005B9A 01D7                <1> 		add edi, edx
  7407 00005B9C 01D6                <1> 		add esi, edx
  7408 00005B9E 6641                <1> 		inc cx
  7409 00005BA0 6681F91000          <1> 		cmp cx, 16
  7410 00005BA5 72DD                <1> 		jb .backlp
  7411 00005BA7 C3                  <1> 		ret
  7412                              <1> %endif
  7413 00005BA8 668B06              <1> .noyclr:	mov ax, [esi]
  7414 00005BAB C1C010              <1> 		rol eax, 16
  7415 00005BAE 668B06              <1> 		mov ax, [esi]
  7416 00005BB1 8907                <1> 		mov [edi], eax
  7417 00005BB3 894704              <1> 		mov [edi + 4], eax
  7418 00005BB6 894708              <1> 		mov [edi + 8], eax
  7419 00005BB9 89470C              <1> 		mov [edi + 12], eax
  7420 00005BBC 01D7                <1> 		add edi, edx
  7421 00005BBE 6641                <1> 		inc cx
  7422 00005BC0 6681F91000          <1> 		cmp cx, 16
  7423 00005BC5 72E1                <1> 		jb .noyclr
  7424 00005BC7 C3                  <1> 		ret
  7425                              <1> 
  7426                              <1> switchmousepos:		;;switch were the mouse is located
  7427 00005BC8 BE[CFC12800]        <1> 		mov esi, mousecolorbuf
  7428 00005BCD 8B3D[3D4B0000]      <1> 		mov edi, [physbaseptr]
  7429 00005BD3 31D2                <1> 		xor edx, edx
  7430 00005BD5 31C9                <1> 		xor ecx, ecx
  7431 00005BD7 668B15[024E0000]    <1> 		mov dx, [lastmouseposition]
  7432 00005BDE 668B0D[044E0000]    <1> 		mov cx, [lastmouseposition + 2]
  7433 00005BE5 01D7                <1> 		add edi, edx
  7434 00005BE7 31D2                <1> 		xor edx, edx
  7435 00005BE9 668B15[154C0000]    <1> 		mov dx, [resolutionx2]
  7436 00005BF0 6681F90000          <1> 		cmp cx, 0
  7437 00005BF5 740B                <1> 		je noswmsy
  7438 00005BF7 01D7                <1> swmsy:		add edi, edx
  7439 00005BF9 6649                <1> 		dec cx
  7440 00005BFB 6681F90000          <1> 		cmp cx, 0
  7441 00005C00 75F5                <1> 		jne swmsy
  7442 00005C02 8B06                <1> noswmsy:	mov eax, [esi]
  7443 00005C04 8B5E04              <1> 		mov ebx, [esi + 4]
  7444 00005C07 8907                <1> 		mov [edi], eax
  7445 00005C09 895F04              <1> 		mov [edi + 4], ebx
  7446 00005C0C 8B4608              <1> 		mov eax, [esi + 8]
  7447 00005C0F 8B5E0C              <1> 		mov ebx, [esi + 12]
  7448 00005C12 894708              <1> 		mov [edi + 8], eax
  7449 00005C15 895F0C              <1> 		mov [edi + 12], ebx
  7450 00005C18 01D7                <1> 		add edi, edx
  7451 00005C1A 81C610000000        <1> 		add esi, 16
  7452 00005C20 81FE[CFC22800]      <1> 		cmp esi, mcolorend
  7453 00005C26 72DA                <1> 		jb noswmsy
  7454                              <1> 		
  7455                              <1> switchmousepos2:
  7456 00005C28 BE[CFC12800]        <1> 		mov esi, mousecolorbuf
  7457 00005C2D 8B3D[3D4B0000]      <1> 		mov edi, [physbaseptr]
  7458 00005C33 31D2                <1> 		xor edx, edx
  7459 00005C35 31C9                <1> 		xor ecx, ecx
  7460 00005C37 668B15[064E0000]    <1> 		mov dx, [mousecursorposition]
  7461 00005C3E 668B0D[084E0000]    <1> 		mov cx, [mousecursorposition + 2]
  7462 00005C45 01D7                <1> 		add edi, edx
  7463 00005C47 31D2                <1> 		xor edx, edx
  7464 00005C49 668B15[154C0000]    <1> 		mov dx, [resolutionx2]
  7465 00005C50 6681F90000          <1> 		cmp cx, 0
  7466 00005C55 740B                <1> 		je noswmsy2
  7467 00005C57 01D7                <1> swmsy2:		add edi, edx
  7468 00005C59 6649                <1> 		dec cx
  7469 00005C5B 6681F90000          <1> 		cmp cx, 0
  7470 00005C60 75F5                <1> 		jne swmsy2
  7471 00005C62 8B07                <1> noswmsy2:	mov eax, [edi]
  7472 00005C64 8B5F04              <1> 		mov ebx, [edi + 4]
  7473 00005C67 8906                <1> 		mov [esi], eax
  7474 00005C69 895E04              <1> 		mov [esi + 4], ebx
  7475 00005C6C 8B4708              <1> 		mov eax, [edi + 8]
  7476 00005C6F 8B5F0C              <1> 		mov ebx, [edi + 12]
  7477 00005C72 894608              <1> 		mov [esi + 8], eax
  7478 00005C75 895E0C              <1> 		mov [esi + 12], ebx
  7479 00005C78 01D7                <1> 		add edi, edx
  7480 00005C7A 81C610000000        <1> 		add esi, 16
  7481 00005C80 81FE[CFC22800]      <1> 		cmp esi, mcolorend
  7482 00005C86 72DA                <1> 		jb noswmsy2
  7483 00005C88 C3                  <1> 		ret
  7484                              <1> 
  7485 00005C89 00                  <1> pbutton db 0
  7486 00005C8A 00                  <1> pLBUTTON db 0
  7487 00005C8B 00                  <1> pRBUTTON db 0
  7488 00005C8C 00000000            <1> dragging dw 0,0
  7489 00005C90 0000000000000000    <1> lastpos dw 0,0,0,0
  7490 00005C98 00000000            <1> colorbuf dw 0,0
  7491                              <1> 	
  7492                              <1> 	clickicon:
  7493 00005C9C B001                <1> 		mov al, 1
  7494 00005C9E A2[895C0000]        <1> 		mov [pbutton], al
  7495 00005CA3 A0[8A5C0000]        <1> 		mov al, [pLBUTTON]
  7496 00005CA8 2205[174F0000]      <1> 		and al, [LBUTTON]
  7497 00005CAE 8A25[8B5C0000]      <1> 		mov ah, [pRBUTTON]
  7498 00005CB4 2225[184F0000]      <1> 		and ah, [RBUTTON]
  7499 00005CBA 08E0                <1> 		or al, ah
  7500 00005CBC 3C00                <1> 		cmp al, 0
  7501 00005CBE 741B                <1> 		je nodragclick
  7502 00005CC0 813D[8C5C0000]0100- <1> 		cmp dword [dragging], 1
  7503 00005CC8 0000                <1>
  7504 00005CCA 732D                <1> 		jae dragclick
  7505 00005CCC C705[8C5C0000]0100- <1> 		mov dword [dragging], 1
  7506 00005CD4 0000                <1>
  7507 00005CD6 E91E000000          <1> 		jmp dragclick
  7508                              <1> 	nodragclick:
  7509 00005CDB C705[8C5C0000]0000- <1> 		mov dword [dragging], 0
  7510 00005CE3 0000                <1>
  7511 00005CE5 A0[174F0000]        <1> 		mov al, [LBUTTON]
  7512 00005CEA A2[8A5C0000]        <1> 		mov [pLBUTTON], al
  7513 00005CEF A0[184F0000]        <1> 		mov al, [RBUTTON]
  7514 00005CF4 A2[8B5C0000]        <1> 		mov [pRBUTTON], al
  7515                              <1> 	dragclick:
  7516 00005CF9 6631C0              <1> 		xor ax, ax
  7517 00005CFC BE[CFB50000]        <1> 		mov esi, graphicstable
  7518 00005D01 C705[5C6F0000]0000- <1> 		mov dword [codepointer], 0
  7519 00005D09 0000                <1>
  7520                              <1> 	clicon2:
  7521 00005D0B 31D2                <1> 		xor edx, edx
  7522 00005D0D 31C9                <1> 		xor ecx, ecx
  7523 00005D0F 66813E0100          <1> 		cmp word [esi], 1
  7524 00005D14 0F841B000000        <1> 		je near iconselect
  7525 00005D1A 66813E0200          <1> 		cmp word [esi], 2
  7526 00005D1F 0F8472010000        <1> 		je near textselected
  7527 00005D25 66813E0300          <1> 		cmp word [esi], 3
  7528 00005D2A 0F84C7020000        <1> 		je near windowselect
  7529 00005D30 E908040000          <1> 		jmp nexticonsel
  7530                              <1> 	iconselect:
  7531 00005D35 668B5606            <1> 		mov dx, [esi + 6]
  7532 00005D39 6689D0              <1> 		mov ax, dx
  7533 00005D3C 668B4E08            <1> 		mov cx, [esi + 8]
  7534 00005D40 6689CB              <1> 		mov bx, cx
  7535 00005D43 6681C32000          <1> 		add bx, 32
  7536 00005D48 6601D0              <1> 		add ax, dx
  7537 00005D4B 813D[8C5C0000]0100- <1> 		cmp dword [dragging], 1
  7538 00005D53 0000                <1>
  7539 00005D55 746F                <1> 		je dragicon
  7540 00005D57 813D[8C5C0000]0000- <1> 		cmp dword [dragging], 0
  7541 00005D5F 0000                <1>
  7542 00005D61 7411                <1> 		je nodragiconcheck
  7543 00005D63 3935[8C5C0000]      <1> 		cmp dword [dragging], esi
  7544 00005D69 0F85CE030000        <1> 		jne near nexticonsel
  7545 00005D6F E952000000          <1> 		jmp dragicon
  7546                              <1> 	nodragiconcheck:
  7547 00005D74 663905[064E0000]    <1> 		cmp [mousecursorposition], ax
  7548 00005D7B 0F82BC030000        <1> 		jb near nexticonsel
  7549 00005D81 66054000            <1> 		add ax, 64
  7550 00005D85 663905[064E0000]    <1> 		cmp [mousecursorposition], ax
  7551 00005D8C 0F87AB030000        <1> 		ja near nexticonsel
  7552 00005D92 6629D0              <1> 		sub ax, dx
  7553 00005D95 66390D[084E0000]    <1> 		cmp [mousecursorposition + 2], cx
  7554 00005D9C 0F829B030000        <1> 		jb near nexticonsel
  7555 00005DA2 66391D[084E0000]    <1> 		cmp [mousecursorposition + 2], bx
  7556 00005DA9 0F878E030000        <1> 		ja near nexticonsel
  7557 00005DAF 668B460A            <1> 		mov ax, [esi + 10]
  7558 00005DB3 66250100            <1> 		and ax, 1
  7559 00005DB7 663D0100            <1> 		cmp ax, 1
  7560 00005DBB 0F84B6000000        <1> 		je near unselecticon
  7561 00005DC1 E98D000000          <1> 		jmp nodragicon
  7562                              <1> 	dragicon:
  7563 00005DC6 663905[024E0000]    <1> 		cmp [lastmouseposition], ax
  7564 00005DCD 0F826A030000        <1> 		jb near nexticonsel
  7565 00005DD3 66054000            <1> 		add ax, 64
  7566 00005DD7 663905[024E0000]    <1> 		cmp [lastmouseposition], ax
  7567 00005DDE 0F8759030000        <1> 		ja near nexticonsel
  7568 00005DE4 6629D0              <1> 		sub ax, dx
  7569 00005DE7 66390D[044E0000]    <1> 		cmp [lastmouseposition + 2], cx
  7570 00005DEE 0F8249030000        <1> 		jb near nexticonsel
  7571 00005DF4 66391D[044E0000]    <1> 		cmp [lastmouseposition + 2], bx
  7572 00005DFB 0F873C030000        <1> 		ja near nexticonsel
  7573 00005E01 668B460A            <1> 		mov ax, [esi + 10]
  7574 00005E05 2410                <1> 		and al, 00010000b
  7575 00005E07 3C10                <1> 		cmp al, 00010000b
  7576 00005E09 7448                <1> 		je nodragicon
  7577 00005E0B 8935[8C5C0000]      <1> 		mov [dragging], esi
  7578 00005E11 66D1E2              <1> 		shl dx, 1
  7579 00005E14 662B15[024E0000]    <1> 		sub dx, [lastmouseposition]
  7580 00005E1B 660315[064E0000]    <1> 		add dx, [mousecursorposition]
  7581 00005E22 66D1EA              <1> 		shr dx, 1
  7582 00005E25 66030D[084E0000]    <1> 		add cx, [mousecursorposition + 2]
  7583 00005E2C 662B0D[044E0000]    <1> 		sub cx, [lastmouseposition + 2]
  7584 00005E33 663B15[154C0000]    <1> 		cmp dx, [resolutionx2]
  7585 00005E3A 7607                <1> 		jbe chkyresdrgicn
  7586 00005E3C 668B15[064E0000]    <1> 		mov dx, [mousecursorposition]
  7587                              <1> 	chkyresdrgicn:
  7588 00005E43 663B0D[294B0000]    <1> 		cmp cx, [resolutiony]
  7589 00005E4A 7607                <1> 		jbe nodragicon
  7590 00005E4C 668B0D[084E0000]    <1> 		mov cx, [mousecursorposition + 2]
  7591                              <1> 	nodragicon:
  7592 00005E53 66814E0A0100        <1> 		or word [esi + 10], 1
  7593 00005E59 8B5E0C              <1> 		mov ebx, [esi + 12]
  7594 00005E5C 668B460A            <1> 		mov ax, [esi + 10]
  7595 00005E60 8B7602              <1> 		mov esi, [esi + 2]
  7596 00005E63 C705[5C6F0000]0000- <1> 		mov dword [codepointer], 0
  7597 00005E6B 0000                <1>
  7598 00005E6D E83D0C0000          <1> 		call showicon
  7599 00005E72 E9DF020000          <1> 		jmp doneiconsel
  7600                              <1> 	unselecticon:
  7601 00005E77 6681660AFEFF        <1> 		and word [esi + 10], 0xFFFE
  7602 00005E7D 8B5E0C              <1> 		mov ebx, [esi + 12]
  7603 00005E80 668B460A            <1> 		mov ax, [esi + 10]
  7604 00005E84 8B7602              <1> 		mov esi, [esi + 2]
  7605 00005E87 891D[5C6F0000]      <1> 		mov [codepointer], ebx
  7606 00005E8D E81D0C0000          <1> 		call showicon
  7607 00005E92 E9BF020000          <1> 		jmp doneiconsel
  7608                              <1> 	textselected:
  7609 00005E97 8B5E02              <1> 		mov ebx, [esi + 2]
  7610 00005E9A 668B5606            <1> 		mov dx, [esi + 6]
  7611 00005E9E 6689D0              <1> 		mov ax, dx
  7612 00005EA1 668B4E08            <1> 		mov cx, [esi + 8]
  7613                              <1> 	lengthtesttext:
  7614 00005EA5 803B00              <1> 		cmp byte [ebx], 0
  7615 00005EA8 7407                <1> 		je donetesttextlength
  7616 00005EAA 43                  <1> 		inc ebx
  7617 00005EAB 66051000            <1> 		add ax, 16
  7618 00005EAF EBF4                <1> 		jmp lengthtesttext
  7619                              <1> 	donetesttextlength:
  7620 00005EB1 6689CB              <1> 		mov bx, cx
  7621 00005EB4 6681C30F00          <1> 		add bx, 15
  7622 00005EB9 813D[8C5C0000]0100- <1> 		cmp dword [dragging], 1
  7623 00005EC1 0000                <1>
  7624 00005EC3 7468                <1> 		je dragtext
  7625 00005EC5 813D[8C5C0000]0000- <1> 		cmp dword [dragging], 0
  7626 00005ECD 0000                <1>
  7627 00005ECF 7411                <1> 		je nodragtextcheck
  7628 00005ED1 3935[8C5C0000]      <1> 		cmp dword [dragging], esi
  7629 00005ED7 0F8560020000        <1> 		jne near nexticonsel
  7630 00005EDD E94B000000          <1> 		jmp dragtext
  7631                              <1> 	nodragtextcheck:
  7632 00005EE2 663915[064E0000]    <1> 		cmp [mousecursorposition], dx
  7633 00005EE9 0F824E020000        <1> 		jb near nexticonsel
  7634 00005EEF 663905[064E0000]    <1> 		cmp [mousecursorposition], ax
  7635 00005EF6 0F8741020000        <1> 		ja near nexticonsel
  7636 00005EFC 66390D[084E0000]    <1> 		cmp [mousecursorposition + 2], cx
  7637 00005F03 0F8234020000        <1> 		jb near nexticonsel
  7638 00005F09 66391D[084E0000]    <1> 		cmp [mousecursorposition + 2], bx
  7639 00005F10 0F8727020000        <1> 		ja near nexticonsel
  7640 00005F16 668B460A            <1> 		mov ax, [esi + 10]
  7641 00005F1A 66250100            <1> 		and ax, 1
  7642 00005F1E 663D0100            <1> 		cmp ax, 1
  7643 00005F22 0F84AB000000        <1> 		je near unselecttext
  7644 00005F28 E986000000          <1> 		jmp nodragtext
  7645                              <1> 	dragtext:
  7646 00005F2D 663915[024E0000]    <1> 		cmp [lastmouseposition], dx
  7647 00005F34 0F8203020000        <1> 		jb near nexticonsel
  7648 00005F3A 663905[024E0000]    <1> 		cmp [lastmouseposition], ax
  7649 00005F41 0F87F6010000        <1> 		ja near nexticonsel
  7650 00005F47 66390D[044E0000]    <1> 		cmp [lastmouseposition + 2], cx
  7651 00005F4E 0F82E9010000        <1> 		jb near nexticonsel
  7652 00005F54 66391D[044E0000]    <1> 		cmp [lastmouseposition + 2], bx
  7653 00005F5B 0F87DC010000        <1> 		ja near nexticonsel
  7654 00005F61 668B460A            <1> 		mov ax, [esi + 10]
  7655 00005F65 2410                <1> 		and al, 00010000b
  7656 00005F67 663D1000            <1> 		cmp ax, 00010000b
  7657 00005F6B 0F8442000000        <1> 		je near nodragtext
  7658 00005F71 8935[8C5C0000]      <1> 		mov [dragging], esi
  7659 00005F77 662B15[024E0000]    <1> 		sub dx, [lastmouseposition]
  7660 00005F7E 660315[064E0000]    <1> 		add dx, [mousecursorposition]
  7661 00005F85 66030D[084E0000]    <1> 		add cx, [mousecursorposition + 2]
  7662 00005F8C 662B0D[044E0000]    <1> 		sub cx, [lastmouseposition + 2]
  7663 00005F93 663B15[154C0000]    <1> 		cmp dx, [resolutionx2]
  7664 00005F9A 7607                <1> 		jbe chkyresdrgtxt
  7665 00005F9C 668B15[064E0000]    <1> 		mov dx, [mousecursorposition]
  7666                              <1> 	chkyresdrgtxt:
  7667 00005FA3 663B0D[294B0000]    <1> 		cmp cx, [resolutiony]
  7668 00005FAA 7607                <1> 		jbe nodragtext
  7669 00005FAC 668B0D[084E0000]    <1> 		mov cx, [mousecursorposition + 2]
  7670                              <1> 	nodragtext:
  7671 00005FB3 66814E0A0100        <1> 		or word [esi + 10], 1
  7672 00005FB9 8B5E0C              <1> 		mov ebx, [esi + 12]
  7673 00005FBC 891D[5C6F0000]      <1> 		mov [codepointer], ebx
  7674 00005FC2 668B460A            <1> 		mov ax, [esi + 10]
  7675 00005FC6 8B7602              <1> 		mov esi, [esi + 2]
  7676 00005FC9 E887050000          <1> 		call showstring
  7677 00005FCE E983010000          <1> 		jmp doneiconsel
  7678                              <1> 	unselecttext:
  7679 00005FD3 6681660AFEFF        <1> 		and word [esi + 10], 0xFFFE
  7680 00005FD9 8B5E0C              <1> 		mov ebx, [esi + 12]
  7681 00005FDC 668B460A            <1> 		mov ax, [esi + 10]
  7682 00005FE0 8B7602              <1> 		mov esi, [esi + 2]
  7683 00005FE3 C705[5C6F0000]0000- <1> 		mov dword [codepointer], 0
  7684 00005FEB 0000                <1>
  7685 00005FED E863050000          <1> 		call showstring
  7686 00005FF2 E95F010000          <1> 		jmp doneiconsel
  7687                              <1> windowselect:
  7688 00005FF7 8B7E02              <1> 		mov edi, [esi + 2]
  7689 00005FFA 668B5606            <1> 		mov dx, [esi + 6]
  7690 00005FFE 6689D0              <1> 		mov ax, dx
  7691 00006001 668B4E08            <1> 		mov cx, [esi + 8]
  7692 00006005 6689CB              <1> 		mov bx, cx
  7693 00006008 6681C31000          <1> 		add bx, 16
  7694 0000600D 813D[8C5C0000]0100- <1> 		cmp dword [dragging], 1
  7695 00006015 0000                <1>
  7696 00006017 746D                <1> 		je dragwin
  7697 00006019 813D[8C5C0000]0000- <1> 		cmp dword [dragging], 0
  7698 00006021 0000                <1>
  7699 00006023 7411                <1> 		je nodragwincheck
  7700 00006025 3935[8C5C0000]      <1> 		cmp dword [dragging], esi
  7701 0000602B 0F850C010000        <1> 		jne near nexticonsel
  7702 00006031 E950000000          <1> 		jmp dragwin
  7703                              <1> 	nodragwincheck:
  7704 00006036 663905[064E0000]    <1> 		cmp [mousecursorposition], ax
  7705 0000603D 0F82FA000000        <1> 		jb near nexticonsel
  7706 00006043 660307              <1> 		add ax, [edi]
  7707 00006046 660307              <1> 		add ax, [edi]
  7708 00006049 663905[064E0000]    <1> 		cmp [mousecursorposition], ax
  7709 00006050 0F87E7000000        <1> 		ja near nexticonsel
  7710 00006056 66390D[084E0000]    <1> 		cmp [mousecursorposition + 2], cx
  7711 0000605D 0F82DA000000        <1> 		jb near nexticonsel
  7712 00006063 66391D[084E0000]    <1> 		cmp [mousecursorposition + 2], bx
  7713 0000606A 0F87CD000000        <1> 		ja near nexticonsel
  7714 00006070 662D1400            <1> 		sub ax, 20
  7715 00006074 663905[064E0000]    <1> 		cmp [mousecursorposition], ax
  7716 0000607B 0F879C000000        <1> 		ja near killwin
  7717 00006081 E983000000          <1> 		jmp nodragwin
  7718                              <1> 	dragwin:
  7719 00006086 C605[E1610000]01    <1> 		mov byte [windrag], 1
  7720 0000608D 663905[024E0000]    <1> 		cmp [lastmouseposition], ax
  7721 00006094 0F82A3000000        <1> 		jb near nexticonsel
  7722 0000609A 660307              <1> 		add ax, [edi]
  7723 0000609D 660307              <1> 		add ax, [edi]
  7724 000060A0 663905[024E0000]    <1> 		cmp [lastmouseposition], ax
  7725 000060A7 0F8790000000        <1> 		ja near nexticonsel
  7726 000060AD 66390D[044E0000]    <1> 		cmp [lastmouseposition + 2], cx
  7727 000060B4 0F8283000000        <1> 		jb near nexticonsel
  7728 000060BA 66391D[044E0000]    <1> 		cmp [lastmouseposition + 2], bx
  7729 000060C1 0F8776000000        <1> 		ja near nexticonsel
  7730 000060C7 8935[8C5C0000]      <1> 		mov [dragging], esi
  7731 000060CD 662B15[024E0000]    <1> 		sub dx, [lastmouseposition]
  7732 000060D4 660315[064E0000]    <1> 		add dx, [mousecursorposition]
  7733 000060DB 66030D[084E0000]    <1> 		add cx, [mousecursorposition + 2]
  7734 000060E2 662B0D[044E0000]    <1> 		sub cx, [lastmouseposition + 2]
  7735 000060E9 663B15[154C0000]    <1> 		cmp dx, [resolutionx2]
  7736 000060F0 7607                <1> 		jbe chkyresdrgwin
  7737 000060F2 668B15[064E0000]    <1> 		mov dx, [mousecursorposition]
  7738                              <1> 	chkyresdrgwin:
  7739 000060F9 663B0D[294B0000]    <1> 		cmp cx, [resolutiony]
  7740 00006100 7607                <1> 		jbe nodragwin
  7741 00006102 668B0D[084E0000]    <1> 		mov cx, [mousecursorposition + 2]
  7742                              <1> 	nodragwin:
  7743 00006109 8B5E0C              <1> 		mov ebx, [esi + 12]
  7744 0000610C 668B460A            <1> 		mov ax, [esi + 10]
  7745 00006110 8B7602              <1> 		mov esi, [esi + 2]
  7746 00006113 E8A5040000          <1> 		call showwindow
  7747 00006118 E939000000          <1> 		jmp doneiconsel
  7748                              <1> 	killwin:
  7749 0000611D 66C7060000          <1> 		mov word [esi], 0
  7750 00006122 C605[B6210000]00    <1> 		mov byte [termguion], 0
  7751 00006129 E838F8FFFF          <1> 		call guiclear
  7752 0000612E E8B7000000          <1> 		call reloadallgraphics
  7753 00006133 E9C5F8FFFF          <1> 		jmp guistart
  7754 00006138 E93A000000          <1> 		jmp doneiconsel2
  7755                              <1> 	nexticonsel:
  7756 0000613D 6681660AFEFF        <1> 		and word [esi + 10], 0xFFFE
  7757 00006143 81C610000000        <1> 		add esi, 16
  7758 00006149 81FE[CFB70000]      <1> 		cmp esi, graphicstableend
  7759 0000614F 7305                <1> 		jae doneiconsel
  7760 00006151 E9B5FBFFFF          <1> 		jmp clicon2
  7761                              <1> 	doneiconsel:
  7762 00006156 813D[8C5C0000]0100- <1> 		cmp dword [dragging], 1
  7763 0000615E 0000                <1>
  7764 00006160 7315                <1> 		jae doneiconsel2
  7765 00006162 813D[5C6F0000]0000- <1> 		cmp dword [codepointer], 0
  7766 0000616A 0000                <1>
  7767 0000616C 7409                <1> 		je doneiconsel2
  7768 0000616E 8B1D[5C6F0000]      <1> 		mov ebx, [codepointer]
  7769 00006174 FFD3                <1> 		call ebx
  7770 00006176 C3                  <1> 		ret
  7771                              <1> 	doneiconsel2:
  7772 00006177 A0[174F0000]        <1> 		mov al, [LBUTTON]
  7773 0000617C A2[8A5C0000]        <1> 		mov [pLBUTTON], al
  7774 00006181 A0[184F0000]        <1> 		mov al, [RBUTTON]
  7775 00006186 A2[8B5C0000]        <1> 		mov [pRBUTTON], al
  7776 0000618B 66813D[8C5C0000]01- <1> 		cmp word [dragging], 1
  7777 00006193 00                  <1>
  7778 00006194 0F8613000000        <1> 		jbe near noreloadgraphicsclick
  7779 0000619A 803D[E1610000]01    <1> 		cmp byte [windrag], 1
  7780 000061A1 7405                <1> 		je noclearcursorcl
  7781 000061A3 E882F9FFFF          <1> 		call clearmousecursor
  7782                              <1> noclearcursorcl:
  7783 000061A8 E83D000000          <1> 		call reloadallgraphics
  7784                              <1> noreloadgraphicsclick:
  7785 000061AD 31C9                <1> 		xor ecx, ecx
  7786 000061AF 31D2                <1> 		xor edx, edx
  7787 000061B1 30E4                <1> 		xor ah, ah
  7788 000061B3 8825[E1610000]      <1> 		mov [windrag], ah
  7789 000061B9 B0FE                <1> 		mov al, 254
  7790 000061BB 668B15[064E0000]    <1> 		mov dx, [mousecursorposition]
  7791 000061C2 668B0D[084E0000]    <1> 		mov cx, [mousecursorposition + 2]
  7792 000061C9 66BBE738            <1> 		mov bx, 0011100011100111b
  7793 000061CD C605[275B0000]01    <1> 		mov byte [showcursorfonton], 1
  7794 000061D4 E8B9090000          <1> 		call showfontvesa
  7795 000061D9 C605[275B0000]00    <1> 		mov byte [showcursorfonton], 0
  7796 000061E0 C3                  <1> 		ret
  7797 000061E1 00                  <1> windrag db 0
  7798 000061E2 00000000            <1> lastdrag dw 0,0
  7799 000061E6 00000000            <1> grpctblpos dw 0,0
  7800                              <1> 
  7801                              <1> reloadallgraphics:
  7802 000061EA BF[CFB50000]        <1> 		mov edi, graphicstable
  7803                              <1> reloadgraphicsloop:
  7804 000061EF 8B7702              <1> 		mov esi, [edi + 2]
  7805 000061F2 668B5706            <1> 		mov dx, [edi + 6]
  7806 000061F6 668B4F08            <1> 		mov cx, [edi + 8]
  7807 000061FA 668B07              <1> 		mov ax, [edi]
  7808 000061FD 668B5F0A            <1> 		mov bx, [edi + 10]
  7809 00006201 893D[E6610000]      <1> 		mov [grpctblpos], edi
  7810 00006207 3B3D[8C5C0000]      <1> 		cmp edi, [dragging]
  7811 0000620D 741E                <1> 		je loadedgraphic
  7812 0000620F 663D0100            <1> 		cmp ax, 1
  7813 00006213 0F8436000000        <1> 		je near icongraphic
  7814 00006219 663D0200            <1> 		cmp ax, 2
  7815 0000621D 0F843C000000        <1> 		je near stringgraphic
  7816 00006223 663D0300            <1> 		cmp ax, 3
  7817 00006227 0F8416000000        <1> 		je near windowgraphic
  7818 0000622D 8B3D[E6610000]      <1> loadedgraphic:  mov edi, [grpctblpos]
  7819 00006233 81C710000000        <1> 		add edi, 16
  7820 00006239 81FF[CFB70000]      <1> 		cmp edi, graphicstableend
  7821 0000623F 732E                <1> 		jae donereloadgraphics
  7822 00006241 EBAC                <1> 		jmp reloadgraphicsloop
  7823 00006243 E81D040000          <1> windowgraphic:	call showwindow2
  7824 00006248 E83EBBFFFF          <1> 		call cleardouble
  7825 0000624D EBDE                <1> 		jmp loadedgraphic
  7826 0000624F 80E301              <1> icongraphic:	and bl, 1
  7827 00006252 881D[606F0000]      <1> 		mov [iconselected], bl
  7828 00006258 E865080000          <1> 		call showicon2
  7829 0000625D EBCE                <1> 		jmp loadedgraphic
  7830 0000625F 80E301              <1> stringgraphic:  and bl, 1
  7831 00006262 881D[295B0000]      <1> 		mov [mouseselecton], bl
  7832 00006268 E8FB020000          <1> 		call showstring2
  7833 0000626D EBBE                <1> 		jmp loadedgraphic
  7834                              <1> donereloadgraphics:
  7835 0000626F 8B3D[8C5C0000]      <1> 		mov edi, [dragging]
  7836 00006275 81FF[CFB50000]      <1> 		cmp edi, graphicstable
  7837 0000627B 7226                <1> 		jb notcorrectdrag
  7838 0000627D 668B07              <1> 		mov ax, [edi]
  7839 00006280 8B7702              <1> 		mov esi, [edi + 2]
  7840 00006283 668B5706            <1> 		mov dx, [edi + 6]
  7841 00006287 668B4F08            <1> 		mov cx, [edi + 8]
  7842 0000628B 668B5F0A            <1> 		mov bx, [edi + 10]
  7843 0000628F 663D0100            <1> 		cmp ax, 1
  7844 00006293 750F                <1> 		jne noticondragging
  7845 00006295 80E301              <1> 		and bl, 1
  7846 00006298 881D[606F0000]      <1> 		mov [iconselected], bl
  7847 0000629E E81F080000          <1> 		call showicon2
  7848                              <1> notcorrectdrag:
  7849 000062A3 C3                  <1> 		ret
  7850                              <1> 
  7851                              <1> 	noticondragging:
  7852 000062A4 663D0200            <1> 		cmp ax, 2
  7853 000062A8 75F9                <1> 		jne notcorrectdrag
  7854 000062AA 80E301              <1> 		and bl, 1
  7855 000062AD 881D[295B0000]      <1> 		mov [mouseselecton], bl
  7856 000062B3 E8B0020000          <1> 		call showstring2
  7857 000062B8 EBE9                <1> 		jmp notcorrectdrag
  7858                              <1> 
  7859 000062BA 00<rept>            <1> grphbuf times 16 db 0
  7860                              <1> 	graphicsadd:
  7861 000062CA BF[CFB50000]        <1> 		mov edi, graphicstable
  7862                              <1> 	shwgrph1:
  7863 000062CF 397702              <1> 		cmp dword [edi + 2], esi
  7864 000062D2 7414                <1> 		je showgraphicsreplace2
  7865 000062D4 81C710000000        <1> 		add edi, 16
  7866 000062DA 81FF[CFB70000]      <1> 		cmp edi, graphicstableend
  7867 000062E0 0F8354020000        <1> 		jae near showgraphicsnew
  7868 000062E6 EBE7                <1> 		jmp shwgrph1
  7869                              <1> 	showgraphicsreplace2:
  7870 000062E8 8935[BC620000]      <1> 		mov [grphbuf + 2], esi
  7871 000062EE 668915[C0620000]    <1> 		mov [grphbuf + 6], dx
  7872 000062F5 66890D[C2620000]    <1> 		mov [grphbuf + 8], cx
  7873 000062FC 891D[C6620000]      <1> 		mov [grphbuf + 12], ebx
  7874 00006302 30FF                <1> 		xor bh, bh
  7875 00006304 88E3                <1> 		mov bl, ah
  7876 00006306 30E4                <1> 		xor ah, ah
  7877 00006308 66A3[C4620000]      <1> 		mov [grphbuf + 10], ax	
  7878 0000630E 66891D[BA620000]    <1> 		mov [grphbuf], bx
  7879 00006315 66A1[BA620000]      <1> 		mov ax, [grphbuf]
  7880 0000631B 663D0100            <1> 		cmp ax, 1
  7881 0000631F 0F8419000000        <1> 		je near replaceicon
  7882 00006325 663D0200            <1> 		cmp ax, 2
  7883 00006329 0F8493000000        <1> 		je near replacestring
  7884 0000632F 663D0300            <1> 		cmp ax, 3
  7885 00006333 0F840F010000        <1> 		je near replacewindow
  7886 00006339 E9D9010000          <1> 		jmp showgraphicsreplace
  7887                              <1> 	replaceicon:
  7888 0000633E 893D[905C0000]      <1> 		mov [lastpos], edi
  7889 00006344 8935[945C0000]      <1> 		mov [lastpos + 4], esi
  7890 0000634A 8B7702              <1> 		mov esi, [edi + 2]
  7891 0000634D 668B5F0C            <1> 		mov bx, [edi + 12]
  7892 00006351 668B5706            <1> 		mov dx, [edi + 6]
  7893 00006355 668B4F08            <1> 		mov cx, [edi + 8]
  7894 00006359 668B06              <1> 		mov ax, [esi]
  7895 0000635C 66A3[985C0000]      <1> 		mov [colorbuf], ax
  7896 00006362 66A1[E7590000]      <1> 		mov ax, [background]
  7897 00006368 668906              <1> 		mov [esi], ax
  7898 0000636B 8B5F0C              <1> 		mov ebx, [edi + 12]
  7899 0000636E 668B470A            <1> 		mov ax, [edi + 10]
  7900 00006372 2401                <1> 		and al, 1
  7901 00006374 A2[606F0000]        <1> 		mov [iconselected], al
  7902 00006379 668B470A            <1> 		mov ax, [edi + 10]
  7903 0000637D E840070000          <1> 		call showicon2
  7904 00006382 8B3D[905C0000]      <1> 		mov edi, [lastpos]
  7905 00006388 8B7702              <1> 		mov esi, [edi + 2]
  7906 0000638B 66A1[985C0000]      <1> 		mov ax, [colorbuf]
  7907 00006391 668906              <1> 		mov [esi], ax
  7908 00006394 8B35[945C0000]      <1> 		mov esi, [lastpos + 4]
  7909 0000639A 668B15[C0620000]    <1> 		mov dx, [grphbuf + 6]
  7910 000063A1 668B0D[C2620000]    <1> 		mov cx, [grphbuf + 8]
  7911 000063A8 668B1D[BA620000]    <1> 		mov bx, [grphbuf]
  7912 000063AF 66A1[C4620000]      <1> 		mov ax, [grphbuf + 10]
  7913 000063B5 88DC                <1> 		mov ah, bl
  7914 000063B7 8B1D[C6620000]      <1> 		mov ebx, [grphbuf + 12]
  7915 000063BD E955010000          <1> 		jmp showgraphicsreplace
  7916                              <1> 	replacestring:
  7917 000063C2 893D[905C0000]      <1> 		mov [lastpos], edi
  7918 000063C8 8935[945C0000]      <1> 		mov [lastpos + 4], esi
  7919 000063CE 8B5F0C              <1> 		mov ebx, [edi + 12]
  7920 000063D1 8B7702              <1> 		mov esi, [edi + 2]
  7921 000063D4 668B5706            <1> 		mov dx, [edi + 6]
  7922 000063D8 668B4F08            <1> 		mov cx, [edi + 8]
  7923 000063DC 66A1[A0650000]      <1> 		mov ax, [colorfont2]
  7924 000063E2 66A3[985C0000]      <1> 		mov [colorbuf], ax
  7925 000063E8 66A1[E7590000]      <1> 		mov ax, [background]
  7926 000063EE 66A3[A0650000]      <1> 		mov [colorfont2], ax		
  7927 000063F4 8B5F0C              <1> 		mov ebx, [edi + 12]
  7928 000063F7 668B470A            <1> 		mov ax, [edi + 10]
  7929 000063FB 2401                <1> 		and al, 1
  7930 000063FD A2[295B0000]        <1> 		mov [mouseselecton], al
  7931 00006402 668B470A            <1> 		mov ax, [edi + 10]
  7932 00006406 E85D010000          <1> 		call showstring2
  7933 0000640B 66A1[985C0000]      <1> 		mov ax, [colorbuf]
  7934 00006411 66A3[A0650000]      <1> 		mov [colorfont2], ax
  7935 00006417 8B3D[905C0000]      <1> 		mov edi, [lastpos]
  7936 0000641D 8B7702              <1> 		mov esi, [edi + 2]
  7937 00006420 668B15[C0620000]    <1> 		mov dx, [grphbuf + 6]
  7938 00006427 668B0D[C2620000]    <1> 		mov cx, [grphbuf + 8]
  7939 0000642E 668B1D[BA620000]    <1> 		mov bx, [grphbuf]
  7940 00006435 66A1[C4620000]      <1> 		mov ax, [grphbuf + 10]
  7941 0000643B 88DC                <1> 		mov ah, bl
  7942 0000643D 8B1D[C6620000]      <1> 		mov ebx, [grphbuf + 12]
  7943 00006443 E9CF000000          <1> 		jmp showgraphicsreplace
  7944                              <1> 	replacewindow:
  7945 00006448 893D[905C0000]      <1> 		mov [lastpos], edi
  7946 0000644E 8935[945C0000]      <1> 		mov [lastpos + 4], esi
  7947 00006454 8B7702              <1> 		mov esi, [edi + 2]
  7948 00006457 8B3D[AF650000]      <1> 		mov edi, [windowbufloc]
  7949 0000645D 31D2                <1> 		xor edx, edx
  7950 0000645F 668B15[154C0000]    <1> 		mov dx, [resolutionx2]
  7951 00006466 C1E204              <1> 		shl edx, 4
  7952 00006469 29D7                <1> 		sub edi, edx
  7953 0000646B 31D2                <1> 		xor edx, edx
  7954 0000646D 668B16              <1> 		mov dx, [esi]
  7955 00006470 660316              <1> 		add dx, [esi]
  7956 00006473 668B4E02            <1> 		mov cx, [esi + 2]
  7957 00006477 6681C11000          <1> 		add cx, 16
  7958 0000647C 66A1[E7590000]      <1> 		mov ax, [background]
  7959                              <1> 	clearwindow:
  7960                              <1> 		%ifdef gui.background
  7961 00006482 813D[B9590000]0000- <1> 			cmp dword [backgroundimage], 0
  7962 0000648A 0000                <1>
  7963 0000648C 7419                <1> 			je .noback
  7964 0000648E 56                  <1> 			push esi
  7965 0000648F 8B35[B9590000]      <1> 			mov esi, [backgroundimage]
  7966 00006495 2B3D[3D4B0000]      <1> 			sub edi, [physbaseptr]
  7967 0000649B 01FE                <1> 			add esi, edi
  7968 0000649D 033D[3D4B0000]      <1> 			add edi, [physbaseptr]
  7969 000064A3 668B06              <1> 			mov ax, [esi]
  7970 000064A6 5E                  <1> 			pop esi
  7971                              <1> 		.noback:
  7972                              <1> 		%endif
  7973 000064A7 668907              <1> 		mov [edi], ax
  7974 000064AA 81C702000000        <1> 		add edi, 2
  7975 000064B0 81EA02000000        <1> 		sub edx, 2
  7976 000064B6 81FA00000000        <1> 		cmp edx, 0
  7977 000064BC 75C4                <1> 		jne clearwindow
  7978 000064BE 6649                <1> 		dec cx
  7979 000064C0 668B15[154C0000]    <1> 		mov dx, [resolutionx2]
  7980 000064C7 662B16              <1> 		sub dx, [esi]
  7981 000064CA 662B16              <1> 		sub dx, [esi]
  7982 000064CD 01D7                <1> 		add edi, edx
  7983 000064CF 668B16              <1> 		mov dx, [esi]
  7984 000064D2 660316              <1> 		add dx, [esi]
  7985 000064D5 6681F90000          <1> 		cmp cx, 0
  7986 000064DA 75A6                <1> 		jne clearwindow
  7987 000064DC C605[B7210000]00    <1> 		mov byte [termcopyon], 0
  7988 000064E3 8B3D[905C0000]      <1> 		mov edi, [lastpos]
  7989 000064E9 8B35[BC620000]      <1> 		mov esi, [grphbuf + 2]
  7990 000064EF 668B15[C0620000]    <1> 		mov dx, [grphbuf + 6]
  7991 000064F6 668B0D[C2620000]    <1> 		mov cx, [grphbuf + 8]
  7992 000064FD 668B1D[BA620000]    <1> 		mov bx, [grphbuf]
  7993 00006504 66A1[C4620000]      <1> 		mov ax, [grphbuf + 10]
  7994 0000650A 88DC                <1> 		mov ah, bl
  7995 0000650C 8B1D[C6620000]      <1> 		mov ebx, [grphbuf + 12]
  7996 00006512 E900000000          <1> 		jmp showgraphicsreplace
  7997                              <1> 	showgraphicsreplace:
  7998 00006517 897702              <1> 		mov [edi + 2], esi
  7999 0000651A 66895706            <1> 		mov [edi + 6], dx
  8000 0000651E 66894F08            <1> 		mov [edi + 8], cx
  8001 00006522 895F0C              <1> 		mov [edi + 12], ebx
  8002 00006525 30FF                <1> 		xor bh, bh
  8003 00006527 88E3                <1> 		mov bl, ah
  8004 00006529 30E4                <1> 		xor ah, ah
  8005 0000652B 6689470A            <1> 		mov [edi + 10], ax
  8006 0000652F 66891F              <1> 		mov [edi], bx
  8007 00006532 8B5F0C              <1> 		mov ebx, [edi + 12]
  8008 00006535 668B470A            <1> 		mov ax, [edi + 10]
  8009 00006539 C3                  <1> 		ret
  8010                              <1> 	showgraphicsnew:
  8011 0000653A BF[CFB50000]        <1> 		mov edi, graphicstable
  8012                              <1> 	shwgrph2:
  8013 0000653F 66813F0000          <1> 		cmp word [edi], 0
  8014 00006544 74D1                <1> 		je showgraphicsreplace
  8015 00006546 81C710000000        <1> 		add edi, 16
  8016 0000654C 81FF[CFB70000]      <1> 		cmp edi, graphicstableend
  8017 00006552 72EB                <1> 		jb shwgrph2
  8018                              <1> 	showgraphicsdone:
  8019 00006554 C3                  <1> 		ret
  8020                              <1> 
  8021                              <1> 	showstring:
  8022 00006555 A2[295B0000]        <1> 		mov [mouseselecton], al
  8023 0000655A 8025[295B0000]01    <1> 		and byte [mouseselecton], 1
  8024 00006561 B402                <1> 		mov ah, 2
  8025 00006563 E862FDFFFF          <1> 		call graphicsadd
  8026                              <1> 	showstring2:
  8027 00006568 30E4                <1> 		xor ah, ah
  8028 0000656A 8A06                <1> 		mov al, [esi]
  8029 0000656C 3C00                <1> 		cmp al, 0
  8030 0000656E 7428                <1> 		je doneshowstring
  8031 00006570 46                  <1> 		inc esi
  8032 00006571 3CFF                <1> 		cmp al, 255
  8033 00006573 74F3                <1> 		je showstring2
  8034 00006575 8935[0D6F0000]      <1> 		mov [showstringesi], esi
  8035 0000657B 668B1D[A0650000]    <1> 		mov bx, [colorfont2]
  8036 00006582 E80B060000          <1> 		call showfontvesa
  8037 00006587 3C0A                <1> 		cmp al, 10
  8038 00006589 7405                <1> 		je noproceedshst
  8039 0000658B 6681C20800          <1> 		add dx, 8
  8040                              <1> 	noproceedshst:
  8041 00006590 8B35[0D6F0000]      <1> 		mov esi, [showstringesi]
  8042 00006596 EBD0                <1> 		jmp showstring2
  8043                              <1> 	doneshowstring:
  8044 00006598 C605[295B0000]00    <1> 		mov byte [mouseselecton], 0
  8045 0000659F C3                  <1> 		ret
  8046                              <1> 
  8047 000065A0 FFFF                <1> colorfont2 dw 0xFFFF
  8048 000065A2 00                  <1> colorcache db 0
  8049 000065A3 0000                <1> winvcopystx dw 0
  8050 000065A5 0000                <1> winvcopysty dw 0
  8051 000065A7 0000                <1> winvcopydx dw 0
  8052 000065A9 0000                <1> winvcopycx dw 0
  8053 000065AB FFFF0000            <1> windowcolor dw 0xFFFF,0
  8054                              <1> ;alpha blend white w/ background, black w/ background
  8055 000065AF 00000000            <1> windowbufloc: dw 0,0
  8056 000065B3 00000000            <1> windowinfobuf dd 0
  8057 000065B7 0000                <1> termcol dw 0
  8058 000065B9 00000000            <1> wincopyendpos dd 0
  8059                              <1> 
  8060                              <1> 	showwindow:	;;windowstuff in si, position in (dx, cx), nothing in ax, code in bx
  8061 000065BD C605[B6210000]01    <1> 		mov byte [termguion], 1
  8062 000065C4 6681C11000          <1> 		add cx, 16
  8063 000065C9 668915[A3650000]    <1> 		mov [winvcopystx], dx
  8064 000065D0 66890D[A5650000]    <1> 		mov [winvcopysty], cx
  8065 000065D7 8935[B3650000]      <1> 		mov [windowinfobuf], esi
  8066 000065DD 668B16              <1> 		mov dx, [esi]
  8067 000065E0 668B4E02            <1> 		mov cx, [esi + 2]
  8068 000065E4 31C0                <1> 		xor eax, eax
  8069 000065E6 31DB                <1> 		xor ebx, ebx
  8070 000065E8 6689D0              <1> 		mov ax, dx
  8071 000065EB 6689CB              <1> 		mov bx, cx
  8072 000065EE 66C1E803            <1> 		shr ax, 3
  8073 000065F2 66C1EB04            <1> 		shr bx, 4
  8074 000065F6 66A3[B7650000]      <1> 		mov [termcol], ax
  8075 000065FC A2[7A230000]        <1> 		mov [charxy], al
  8076 00006601 881D[7B230000]      <1> 		mov [charxy + 1], bl
  8077 00006607 BF[D0C22800]        <1> 		mov edi, videobuf
  8078 0000660C 81FB00000000        <1> 		cmp ebx, 0
  8079 00006612 0F847D040000        <1> 		je near donewincopynow	;AAAAAAAAA!!!!!
  8080                              <1> 	findendposwin:
  8081 00006618 01C7                <1> 		add edi, eax
  8082 0000661A 01C7                <1> 		add edi, eax
  8083 0000661C 4B                  <1> 		dec ebx
  8084 0000661D 81FB00000000        <1> 		cmp ebx, 0
  8085 00006623 77F3                <1> 		ja findendposwin
  8086 00006625 893D[B9650000]      <1> 		mov [wincopyendpos], edi
  8087 0000662B 31FF                <1> 		xor edi, edi
  8088 0000662D 6631C0              <1> 		xor ax, ax
  8089 00006630 6631DB              <1> 		xor bx, bx
  8090 00006633 6601D2              <1> 		add dx, dx
  8091 00006636 668915[A7650000]    <1> 		mov [winvcopydx], dx
  8092 0000663D 66890D[A9650000]    <1> 		mov [winvcopycx], cx
  8093 00006644 668B0D[A5650000]    <1> 		mov cx, [winvcopysty]
  8094 0000664B 6681E91000          <1> 		sub cx, 16
  8095 00006650 668B15[A3650000]    <1> 		mov dx, [winvcopystx]
  8096 00006657 C605[B7210000]00    <1> 		mov byte [termcopyon], 0
  8097 0000665E B403                <1> 		mov ah, 3
  8098 00006660 E865FCFFFF          <1> 		call graphicsadd
  8099                              <1> 	showwindow2:
  8100 00006665 6681C11000          <1> 		add cx, 16
  8101 0000666A 668915[A3650000]    <1> 		mov [winvcopystx], dx
  8102 00006671 66890D[A5650000]    <1> 		mov [winvcopysty], cx
  8103 00006678 668B16              <1> 		mov dx, [esi]
  8104 0000667B 668B4E02            <1> 		mov cx, [esi + 2]
  8105 0000667F 6601D2              <1> 		add dx, dx
  8106 00006682 668915[A7650000]    <1> 		mov [winvcopydx], dx
  8107 00006689 66890D[A9650000]    <1> 		mov [winvcopycx], cx
  8108 00006690 8B3D[AF650000]      <1> 		mov edi, [windowbufloc]
  8109 00006696 31D2                <1> 		xor edx, edx
  8110 00006698 668B15[154C0000]    <1> 		mov dx, [resolutionx2]
  8111 0000669F C1E204              <1> 		shl edx, 4
  8112 000066A2 29D7                <1> 		sub edi, edx
  8113 000066A4 803D[B7210000]00    <1> 		cmp byte [termcopyon], 0
  8114 000066AB 7538                <1> 		jne nocleartitlebarpos
  8115 000066AD 8B3D[3D4B0000]      <1> 		mov edi, [physbaseptr]
  8116 000066B3 31D2                <1> 		xor edx, edx
  8117 000066B5 668B15[A3650000]    <1> 		mov dx, [winvcopystx]
  8118 000066BC 01D7                <1> 		add edi, edx
  8119 000066BE 668B0D[A5650000]    <1> 		mov cx, [winvcopysty]
  8120 000066C5 6681E91000          <1> 		sub cx, 16
  8121 000066CA 6681F90000          <1> 		cmp cx, 0
  8122 000066CF 7414                <1> 		je nocleartitlebarpos
  8123                              <1> 	cleartitlebarpos:
  8124 000066D1 31D2                <1> 		xor edx, edx
  8125 000066D3 668B15[154C0000]    <1> 		mov dx, [resolutionx2]
  8126 000066DA 01D7                <1> 		add edi, edx
  8127 000066DC 6649                <1> 		dec cx
  8128 000066DE 6681F90000          <1> 		cmp cx, 0
  8129 000066E3 75EC                <1> 		jne cleartitlebarpos
  8130                              <1> 	nocleartitlebarpos:
  8131 000066E5 66B91000            <1> 		mov cx, 16
  8132 000066E9 668B15[A7650000]    <1> 		mov dx, [winvcopydx]
  8133 000066F0 6681F90000          <1> 		cmp cx, 0
  8134 000066F5 0F8448000000        <1> 		je near canceltitlebarput
  8135 000066FB 6681FA0000          <1> 		cmp dx, 0
  8136 00006700 0F843D000000        <1> 		je near canceltitlebarput
  8137                              <1> 	titlebarput:
  8138 00006706 66A1[AB650000]      <1> 		mov ax, [windowcolor]
  8139 0000670C 668907              <1> 		mov [edi], ax
  8140 0000670F 6681EA0200          <1> 		sub dx, 2
  8141 00006714 81C702000000        <1> 		add edi, 2
  8142 0000671A 6681FA0000          <1> 		cmp dx, 0
  8143 0000671F 75E5                <1> 		jne titlebarput
  8144 00006721 31D2                <1> 		xor edx, edx
  8145 00006723 668B15[154C0000]    <1> 		mov dx, [resolutionx2]
  8146 0000672A 6649                <1> 		dec cx
  8147 0000672C 662B15[A7650000]    <1> 		sub dx, [winvcopydx]
  8148 00006733 01D7                <1> 		add edi, edx
  8149 00006735 668B15[A7650000]    <1> 		mov dx, [winvcopydx]
  8150 0000673C 6681F90000          <1> 		cmp cx, 0
  8151 00006741 75C3                <1> 		jne titlebarput
  8152                              <1> 	canceltitlebarput:
  8153 00006743 893D[AF650000]      <1> 		mov [windowbufloc], edi
  8154 00006749 803D[B7210000]02    <1> 		cmp byte [termcopyon], 2
  8155 00006750 0F8461000000        <1> 		je near winvcpst
  8156 00006756 6631C0              <1> 		xor ax, ax
  8157 00006759 81C604000000        <1> 		add esi, 4
  8158 0000675F 668B15[A3650000]    <1> 		mov dx, [winvcopystx]
  8159 00006766 668B0D[A5650000]    <1> 		mov cx, [winvcopysty]
  8160 0000676D 6681E91000          <1> 		sub cx, 16
  8161 00006772 6631DB              <1> 		xor bx, bx
  8162 00006775 C605[295B0000]01    <1> 		mov byte [mouseselecton], 1
  8163 0000677C E8E7FDFFFF          <1> 		call showstring2
  8164 00006781 B058                <1> 		mov al, "X"
  8165 00006783 30E4                <1> 		xor ah, ah
  8166 00006785 668B1D[A0650000]    <1> 		mov bx, [colorfont2]
  8167 0000678C 668B15[A3650000]    <1> 		mov dx, [winvcopystx]
  8168 00006793 668B0D[A5650000]    <1> 		mov cx, [winvcopysty]
  8169 0000679A 6681E91000          <1> 		sub cx, 16
  8170 0000679F 6681EA1400          <1> 		sub dx, 20
  8171 000067A4 660315[A7650000]    <1> 		add dx, [winvcopydx]
  8172 000067AB C605[295B0000]01    <1> 		mov byte [mouseselecton], 1
  8173 000067B2 E8DB030000          <1> 		call showfontvesa
  8174                              <1> 	winvcpst:
  8175 000067B7 803D[E1610000]01    <1> 		cmp byte [windrag], 1
  8176 000067BE 0F84DB020000        <1> 		je near forgetresetstuff
  8177 000067C4 8B3D[AF650000]      <1> 		mov edi, [windowbufloc]
  8178 000067CA E976000000          <1> 		jmp windowvideocopyset
  8179                              <1> 
  8180                              <1> 	windowvideocopy:
  8181 000067CF 8B35[B3650000]      <1> 		mov esi, [windowinfobuf]
  8182 000067D5 668B16              <1> 		mov dx, [esi]
  8183 000067D8 668B4E02            <1> 		mov cx, [esi + 2]
  8184 000067DC 31C0                <1> 		xor eax, eax
  8185 000067DE 31DB                <1> 		xor ebx, ebx
  8186 000067E0 6689D0              <1> 		mov ax, dx
  8187 000067E3 6689CB              <1> 		mov bx, cx
  8188 000067E6 66C1E803            <1> 		shr ax, 3
  8189 000067EA 66C1EB04            <1> 		shr bx, 4
  8190 000067EE 66A3[B7650000]      <1> 		mov [termcol], ax
  8191 000067F4 A2[7A230000]        <1> 		mov [charxy], al
  8192 000067F9 881D[7B230000]      <1> 		mov [charxy + 1], bl
  8193 000067FF 8B3D[AF650000]      <1> 		mov edi, [windowbufloc]
  8194 00006805 3B3D[3D4B0000]      <1> 		cmp edi, [physbaseptr]
  8195 0000680B 0F8334000000        <1> 		jae near windowvideocopyset
  8196 00006811 31C9                <1> 		xor ecx, ecx
  8197 00006813 31D2                <1> 		xor edx, edx
  8198 00006815 668B15[A3650000]    <1> 		mov dx, [winvcopystx]
  8199 0000681C 668B0D[A5650000]    <1> 		mov cx, [winvcopysty]
  8200 00006823 8B3D[3D4B0000]      <1> 		mov edi, [physbaseptr]
  8201 00006829 01D7                <1> 		add edi, edx
  8202 0000682B 81F900000000        <1> 		cmp ecx, 0
  8203 00006831 7412                <1> 		je windowvideocopyset
  8204                              <1> 	yrescopylp:
  8205 00006833 31C0                <1> 		xor eax, eax
  8206 00006835 66A1[154C0000]      <1> 		mov ax, [resolutionx2]
  8207 0000683B F7E1                <1> 		mul ecx
  8208 0000683D 01C7                <1> 		add edi, eax
  8209 0000683F 893D[AF650000]      <1> 		mov [windowbufloc], edi
  8210                              <1> 	windowvideocopyset:
  8211 00006845 6631C9              <1> 		xor cx, cx
  8212 00006848 6649                <1> 		dec cx
  8213 0000684A 66890D[A76A0000]    <1> 		mov [charposline], cx
  8214 00006851 89FE                <1> 		mov esi, edi
  8215 00006853 81EE10000000        <1> 		sub esi, 16
  8216 00006859 31D2                <1> 		xor edx, edx
  8217 0000685B 668B15[154C0000]    <1> 		mov dx, [resolutionx2]
  8218 00006862 C1E204              <1> 		shl edx, 4
  8219 00006865 01D6                <1> 		add esi, edx
  8220 00006867 BF[D0C22800]        <1> 		mov edi, videobuf
  8221 0000686C 81EF02000000        <1> 		sub edi, 2
  8222 00006872 893D[A96A0000]      <1> 		mov [charposvbuf], edi
  8223 00006878 E919010000          <1> 		jmp nextcharwin
  8224                              <1> 	win.write:	;adjusted this to use alpha
  8225                              <1> 				;5R, 6G, 5B
  8226                              <1> %ifdef gui.alphablending
  8227 0000687D 56                  <1> 		push esi
  8228 0000687E 6653                <1> 		push bx
  8229 00006880 6651                <1> 		push cx
  8230 00006882 6652                <1> 		push dx
  8231                              <1> %ifdef gui.background
  8232 00006884 89FE                <1> 		mov esi, edi
  8233 00006886 2B35[3D4B0000]      <1> 		sub esi, [physbaseptr]
  8234 0000688C 0335[B9590000]      <1> 		add esi, [backgroundimage]
  8235 00006892 813D[B9590000]0000- <1> 		cmp dword [backgroundimage], 0
  8236 0000689A 0000                <1>
  8237 0000689C 7505                <1> 		jne .red
  8238                              <1> %endif
  8239 0000689E BE[E7590000]        <1> 		mov esi, background
  8240                              <1> 	.red:
  8241 000068A3 668B0E              <1> 		mov cx, [esi]
  8242 000068A6 66C1E90B            <1> 		shr cx, 11
  8243 000068AA 6689C3              <1> 		mov bx, ax
  8244 000068AD 66C1EB0B            <1> 		shr bx, 11
  8245 000068B1 6601D9              <1> 		add cx, bx
  8246 000068B4 6601D9              <1> 		add cx, bx
  8247 000068B7 6601D9              <1> 		add cx, bx
  8248 000068BA 66C1E902            <1> 		shr cx, 2
  8249 000068BE 66C1E10B            <1> 		shl cx, 11
  8250 000068C2 6689CA              <1> 		mov dx, cx
  8251                              <1> 	.green:
  8252 000068C5 668B0E              <1> 		mov cx, [esi]
  8253 000068C8 66C1E105            <1> 		shl cx, 5
  8254 000068CC 66C1E90A            <1> 		shr cx, 10
  8255 000068D0 6689C3              <1> 		mov bx, ax
  8256 000068D3 66C1E305            <1> 		shl bx, 5
  8257 000068D7 66C1EB0A            <1> 		shr bx, 10
  8258 000068DB 6601D9              <1> 		add cx, bx
  8259 000068DE 6601D9              <1> 		add cx, bx
  8260 000068E1 6601D9              <1> 		add cx, bx
  8261 000068E4 66C1E902            <1> 		shr cx, 2
  8262 000068E8 66C1E105            <1> 		shl cx, 5
  8263 000068EC 6601CA              <1> 		add dx, cx
  8264                              <1> 	.blue:
  8265 000068EF 668B0E              <1> 		mov cx, [esi]
  8266 000068F2 66C1E10B            <1> 		shl cx, 11
  8267 000068F6 66C1E90B            <1> 		shr cx, 11
  8268 000068FA 6689C3              <1> 		mov bx, ax
  8269 000068FD 66C1E30B            <1> 		shl bx, 11
  8270 00006901 66C1EB0B            <1> 		shr bx, 11
  8271 00006905 6601D9              <1> 		add cx, bx
  8272 00006908 6601D9              <1> 		add cx, bx
  8273 0000690B 6601D9              <1> 		add cx, bx
  8274 0000690E 66C1E902            <1> 		shr cx, 2
  8275 00006912 6601CA              <1> 		add dx, cx
  8276 00006915 668917              <1> 		mov [edi], dx
  8277 00006918 665A                <1> 		pop dx
  8278 0000691A 6659                <1> 		pop cx
  8279 0000691C 665B                <1> 		pop bx
  8280 0000691E 5E                  <1> 		pop esi
  8281                              <1> %else
  8282                              <1> 		mov [edi], ax
  8283                              <1> %endif
  8284 0000691F C3                  <1> 		ret
  8285                              <1> 	copywindow:
  8286 00006920 B201                <1> 		mov dl, 1
  8287 00006922 D0C6                <1> 		rol dh, 1
  8288 00006924 20F2                <1> 		and dl, dh
  8289 00006926 803D[A2650000]10    <1> 		cmp byte [colorcache], 0x10
  8290 0000692D 7320                <1> 		jae switchwincolors
  8291 0000692F 66A1[AD650000]      <1> 		mov ax, [windowcolor + 2]
  8292 00006935 E843FFFFFF          <1> 		call win.write
  8293 0000693A 80FA00              <1> 		cmp dl, 0
  8294 0000693D 742B                <1> 		je nowritewin
  8295 0000693F 66A1[AB650000]      <1> 		mov ax, [windowcolor]
  8296 00006945 E833FFFFFF          <1> 		call win.write
  8297 0000694A E91B000000          <1> 		jmp nowritewin
  8298                              <1> 	switchwincolors:
  8299 0000694F 66A1[AB650000]      <1> 		mov ax, [windowcolor]
  8300 00006955 E823FFFFFF          <1> 		call win.write
  8301 0000695A 80FA00              <1> 		cmp dl, 0
  8302 0000695D 740B                <1> 		je nowritewin
  8303 0000695F 66A1[AD650000]      <1> 		mov ax, [windowcolor + 2]
  8304 00006965 E813FFFFFF          <1> 		call win.write
  8305                              <1> 	nowritewin:
  8306 0000696A 81C702000000        <1> 		add edi, 2
  8307 00006970 FEC1                <1> 		inc cl
  8308 00006972 80F908              <1> 		cmp cl, 8
  8309 00006975 75A9                <1> 		jne copywindow
  8310 00006977 6643                <1> 		inc bx
  8311 00006979 30C9                <1> 		xor cl, cl
  8312 0000697B 31D2                <1> 		xor edx, edx
  8313 0000697D 668B15[154C0000]    <1> 		mov dx, [resolutionx2]
  8314 00006984 01D6                <1> 		add esi, edx
  8315 00006986 89F7                <1> 		mov edi, esi
  8316 00006988 678AB7[4A73]        <1> 		mov dh, [fonts + bx]
  8317 0000698D D0CE                <1> 		ror dh, 1
  8318 0000698F FEC5                <1> 		inc ch
  8319 00006991 80FD10              <1> 		cmp ch, 16
  8320 00006994 758A                <1> 		jne copywindow
  8321                              <1> 	nextcharwin:
  8322 00006996 6631C9              <1> 		xor cx, cx
  8323 00006999 8B3D[A96A0000]      <1> 		mov edi, [charposvbuf]
  8324 0000699F 81C702000000        <1> 		add edi, 2
  8325 000069A5 3B3D[B9650000]      <1> 		cmp edi, [wincopyendpos]
  8326 000069AB 0F83E4000000        <1> 		jae near donewincopynow
  8327 000069B1 8A7F01              <1> 		mov bh, [edi + 1]
  8328 000069B4 80FF00              <1> 		cmp bh, 0
  8329 000069B7 7505                <1> 		jne nofixcolorwin
  8330 000069B9 B707                <1> 		mov bh, 7
  8331 000069BB 887F01              <1> 		mov [edi + 1], bh
  8332                              <1> 	nofixcolorwin:
  8333 000069BE 883D[A2650000]      <1> 		mov [colorcache], bh
  8334 000069C4 8A1F                <1> 		mov bl, [edi]
  8335 000069C6 893D[A96A0000]      <1> 		mov [charposvbuf], edi
  8336 000069CC 81EF[D0C22800]      <1> 		sub edi, videobuf
  8337 000069D2 81C7[742D2900]      <1> 		add edi, videobuf2
  8338 000069D8 8A6701              <1> 		mov ah, [edi + 1]
  8339 000069DB 8A07                <1> 		mov al, [edi]
  8340 000069DD 6639D8              <1> 		cmp ax, bx
  8341 000069E0 7543                <1> 		jne noskipcharcopy
  8342                              <1> 	skipcharcopy:
  8343 000069E2 81C610000000        <1> 		add esi, 16
  8344 000069E8 668B0D[A76A0000]    <1> 		mov cx, [charposline]
  8345 000069EF 6641                <1> 		inc cx
  8346 000069F1 66890D[A76A0000]    <1> 		mov [charposline], cx
  8347 000069F8 663B0D[B7650000]    <1> 		cmp cx, [termcol]
  8348 000069FF 7295                <1> 		jb nextcharwin
  8349 00006A01 6631C9              <1> 		xor cx, cx
  8350 00006A04 66890D[A76A0000]    <1> 		mov [charposline], cx
  8351 00006A0B 31D2                <1> 		xor edx, edx
  8352 00006A0D 668B15[154C0000]    <1> 		mov dx, [resolutionx2]
  8353 00006A14 C1E204              <1> 		shl edx, 4
  8354 00006A17 662B15[A7650000]    <1> 		sub dx, [winvcopydx]
  8355 00006A1E 01D6                <1> 		add esi, edx
  8356 00006A20 E971FFFFFF          <1> 		jmp nextcharwin
  8357                              <1> 	noskipcharcopy:
  8358 00006A25 881F                <1> 		mov [edi], bl
  8359 00006A27 887F01              <1> 		mov [edi + 1], bh
  8360 00006A2A 8B3D[A96A0000]      <1> 		mov edi, [charposvbuf]
  8361 00006A30 30FF                <1> 		xor bh, bh
  8362 00006A32 66C1E304            <1> 		shl bx, 4
  8363 00006A36 31D2                <1> 		xor edx, edx
  8364 00006A38 668B15[154C0000]    <1> 		mov dx, [resolutionx2]
  8365 00006A3F C1E204              <1> 		shl edx, 4
  8366 00006A42 29D6                <1> 		sub esi, edx
  8367 00006A44 81C610000000        <1> 		add esi, 16
  8368 00006A4A 89F7                <1> 		mov edi, esi
  8369 00006A4C 668B0D[A76A0000]    <1> 		mov cx, [charposline]
  8370 00006A53 6641                <1> 		inc cx
  8371 00006A55 663B0D[B7650000]    <1> 		cmp cx, [termcol]
  8372 00006A5C 7316                <1> 		jae fixwindowcopy
  8373 00006A5E 66890D[A76A0000]    <1> 		mov [charposline], cx
  8374 00006A65 6631C9              <1> 		xor cx, cx
  8375 00006A68 678AB7[4A73]        <1> 		mov dh, [fonts + bx]
  8376 00006A6D D0CE                <1> 		ror dh, 1
  8377 00006A6F E9ACFEFFFF          <1> 		jmp copywindow
  8378                              <1> fixwindowcopy:
  8379 00006A74 6631C9              <1> 		xor cx, cx
  8380 00006A77 66890D[A76A0000]    <1> 		mov [charposline], cx
  8381 00006A7E 662B15[A7650000]    <1> 		sub dx, [winvcopydx]
  8382 00006A85 01D6                <1> 		add esi, edx
  8383 00006A87 89F7                <1> 		mov edi, esi
  8384 00006A89 678AB7[4A73]        <1> 		mov dh, [fonts + bx]
  8385 00006A8E D0CE                <1> 		ror dh, 1
  8386 00006A90 E98BFEFFFF          <1> 		jmp copywindow
  8387                              <1> donewincopynow:
  8388 00006A95 803D[B7210000]01    <1> 		cmp byte [termcopyon], 1
  8389 00006A9C 7501                <1> 		jne forgetresetstuff
  8390 00006A9E 61                  <1> 		popa
  8391                              <1> forgetresetstuff:
  8392 00006A9F C605[B7210000]00    <1> 		mov byte [termcopyon], 0
  8393 00006AA6 C3                  <1> 		ret
  8394                              <1> 		
  8395 00006AA7 0000                <1> charposline dw 0
  8396 00006AA9 00000000            <1> charposvbuf dw 0,0
  8397 00006AAD 0000                <1> iconcolor dw 0
  8398                              <1> 	showicon:	;;icon in si, position in (dx,cx), selected in ax, code in bx
  8399 00006AAF A2[606F0000]        <1> 		mov [iconselected], al
  8400 00006AB4 8025[606F0000]01    <1> 		and byte [iconselected], 1
  8401 00006ABB B401                <1> 		mov ah, 1
  8402 00006ABD E808F8FFFF          <1> 		call graphicsadd
  8403                              <1> 	showicon2:
  8404 00006AC2 8B3D[3D4B0000]      <1> 		mov edi, [physbaseptr]
  8405 00006AC8 6601D2              <1> 		add dx, dx
  8406 00006ACB 663B15[154C0000]    <1> 		cmp dx, [resolutionx2]
  8407 00006AD2 720C                <1> 		jb screenxgood
  8408 00006AD4 668B15[154C0000]    <1> 		mov dx, [resolutionx2]
  8409 00006ADB 6681EA4000          <1> 		sub dx, 64
  8410                              <1> 	screenxgood:
  8411 00006AE0 6681F90000          <1> 		cmp cx, 0
  8412 00006AE5 742B                <1> 		je noscreenygoodchk
  8413 00006AE7 663B0D[294B0000]    <1> 		cmp cx, [resolutiony]
  8414 00006AEE 720C                <1> 		jb screenygood
  8415 00006AF0 668B0D[294B0000]    <1> 		mov cx, [resolutiony]
  8416 00006AF7 6681E92000          <1> 		sub cx, 32
  8417                              <1> 	screenygood:
  8418 00006AFC 50                  <1> 		push eax
  8419 00006AFD 52                  <1> 		push edx
  8420 00006AFE 31C0                <1> 		xor eax, eax
  8421 00006B00 31DB                <1> 		xor ebx, ebx
  8422 00006B02 668B1D[154C0000]    <1> 		mov bx, [resolutionx2]
  8423 00006B09 6689C8              <1> 		mov ax, cx
  8424 00006B0C F7E3                <1> 		mul ebx
  8425 00006B0E 01C7                <1> 		add edi, eax
  8426 00006B10 5A                  <1> 		pop edx
  8427 00006B11 58                  <1> 		pop eax
  8428                              <1> 	noscreenygoodchk:
  8429 00006B12 31DB                <1> 		xor ebx, ebx
  8430 00006B14 6689D3              <1> 		mov bx, dx
  8431 00006B17 01DF                <1> 		add edi, ebx
  8432 00006B19 6631C9              <1> 		xor cx, cx
  8433 00006B1C 668B06              <1> 		mov ax, [esi]
  8434 00006B1F 81C602000000        <1> 		add esi, 2
  8435 00006B25 66A3[AD6A0000]      <1> 		mov [iconcolor], ax
  8436                              <1> 	writeicon:
  8437 00006B2B 8B06                <1> 		mov eax, [esi]
  8438 00006B2D D1C0                <1> 		rol eax, 1
  8439 00006B2F 30C9                <1> 		xor cl, cl
  8440                              <1> 	writeiconline:
  8441 00006B31 B201                <1> 		mov dl, 1
  8442 00006B33 20C2                <1> 		and dl, al
  8443 00006B35 3215[606F0000]      <1> 		xor dl, [iconselected]
  8444 00006B3B 668B1D[E7590000]    <1> 		mov bx, [background]
  8445 00006B42 66891F              <1> 		mov [edi], bx
  8446 00006B45 80FA00              <1> 		cmp dl, 0
  8447 00006B48 740A                <1> 		je noiconline
  8448 00006B4A 668B15[AD6A0000]    <1> 		mov dx, [iconcolor]
  8449 00006B51 668917              <1> 		mov [edi], dx
  8450                              <1> 	noiconline:
  8451 00006B54 81C702000000        <1> 		add edi, 2
  8452 00006B5A D1C0                <1> 		rol eax, 1
  8453 00006B5C FEC1                <1> 		inc cl
  8454 00006B5E 80F920              <1> 		cmp cl, 32
  8455 00006B61 72CE                <1> 		jb writeiconline
  8456 00006B63 81C604000000        <1> 		add esi, 4
  8457 00006B69 FEC5                <1> 		inc ch
  8458 00006B6B 31D2                <1> 		xor edx, edx
  8459 00006B6D 668B15[154C0000]    <1> 		mov dx, [resolutionx2]
  8460 00006B74 01D7                <1> 		add edi, edx
  8461 00006B76 81EF40000000        <1> 		sub edi, 64
  8462 00006B7C 80FD20              <1> 		cmp ch, 32
  8463 00006B7F 72AA                <1> 		jb writeicon
  8464 00006B81 31C0                <1> 		xor eax, eax
  8465 00006B83 C3                  <1> 		ret
  8466                              <1> 
  8467 00006B84 02                  <1> resolutionbytes db 2
  8468 00006B85 0000                <1> posxvesa dw 0
  8469 00006B87 0000                <1> posyvesa dw 0
  8470 00006B89 FFFF                <1> colorfont dw 0xFFFF
  8471                              <1> savefontvesa:		;;same rules as showfontvesa
  8472 00006B8B C605[285B0000]01    <1> 	mov byte [savefonton], 1
  8473                              <1> showfontvesa:		;;position in (dx,cx), color in bx, char in al
  8474 00006B92 3CFF                <1> 	cmp al, 255
  8475 00006B94 7501                <1> 	jne nostopshowfont
  8476 00006B96 C3                  <1> 	ret
  8477                              <1> nostopshowfont:
  8478 00006B97 66890D[876B0000]    <1> 	mov [posyvesa], cx
  8479 00006B9E 3C0A                <1> 	cmp al, 10
  8480 00006BA0 0F8424000000        <1> 	je near goodvesafontx
  8481 00006BA6 31C9                <1> 	xor ecx, ecx
  8482 00006BA8 668B0D[154C0000]    <1> 	mov cx, [resolutionx2]
  8483 00006BAF 6639CA              <1> 	cmp dx, cx
  8484 00006BB2 7616                <1> 	jbe goodvesafontx
  8485 00006BB4 6631D2              <1> 	xor dx, dx
  8486 00006BB7 668B0D[876B0000]    <1> 	mov cx, [posyvesa]
  8487 00006BBE 6681C11000          <1> 	add cx, 16
  8488 00006BC3 66890D[876B0000]    <1> 	mov [posyvesa], cx
  8489                              <1> goodvesafontx:
  8490 00006BCA 668B0D[876B0000]    <1> 	mov cx, [posyvesa]
  8491 00006BD1 668915[856B0000]    <1> 	mov [posxvesa], dx
  8492 00006BD8 8B3D[3D4B0000]      <1> 	mov edi, [physbaseptr]
  8493 00006BDE 66891D[896B0000]    <1> 	mov [colorfont], bx
  8494 00006BE5 31DB                <1> 	xor ebx, ebx
  8495 00006BE7 88C3                <1> 	mov bl, al
  8496 00006BE9 31C0                <1> 	xor eax, eax
  8497 00006BEB 88D8                <1> 	mov al, bl
  8498 00006BED 6689D3              <1> 	mov bx, dx
  8499 00006BF0 89DA                <1> 	mov edx, ebx
  8500 00006BF2 31DB                <1> 	xor ebx, ebx
  8501 00006BF4 6681F90000          <1> 	cmp cx, 0
  8502 00006BF9 7416                <1> 	je vesaposloopdn
  8503 00006BFB 668B1D[154C0000]    <1> 	mov bx, [resolutionx2]
  8504                              <1> vesaposloop:
  8505 00006C02 52                  <1> 	push edx
  8506 00006C03 50                  <1> 	push eax
  8507 00006C04 31C0                <1> 	xor eax, eax
  8508 00006C06 6689C8              <1> 	mov ax, cx
  8509 00006C09 F7E3                <1> 	mul ebx
  8510 00006C0B 01C7                <1> 	add edi, eax
  8511 00006C0D 58                  <1> 	pop eax
  8512 00006C0E 5A                  <1> 	pop edx
  8513 00006C0F 01D7                <1> 	add edi, edx
  8514                              <1> vesaposloopdn:
  8515 00006C11 BE[4A730000]        <1> 	mov esi, fonts
  8516                              <1> findfontvesa:
  8517 00006C16 30E4                <1> 	xor ah, ah
  8518 00006C18 3C0A                <1> 	cmp al, 10
  8519 00006C1A 0F84FE000000        <1> 	je near nwlinevesa
  8520 00006C20 C1E004              <1> 	shl eax, 4
  8521 00006C23 01C6                <1> 	add esi, eax
  8522 00006C25 C1E804              <1> 	shr eax, 4
  8523 00006C28 81FE[4A830000]      <1> 	cmp esi, fontend
  8524 00006C2E 0F83B9000000        <1> 	jae near donefontvesa
  8525 00006C34 4E                  <1> 	dec esi
  8526                              <1> foundfontvesa:
  8527 00006C35 46                  <1> 	inc esi
  8528 00006C36 803D[285B0000]01    <1> 	cmp byte [savefonton], 1
  8529 00006C3D 0F8401010000        <1> 	je near vesafontsaver
  8530 00006C43 30C9                <1> 	xor cl, cl
  8531 00006C45 8A06                <1> 	mov al, [esi]
  8532 00006C47 668B15[154C0000]    <1> 	mov dx, [resolutionx2]
  8533 00006C4E 662B15[856B0000]    <1> 	sub dx, [posxvesa]
  8534 00006C55 6681FA1000          <1> 	cmp dx, 16
  8535 00006C5A 7708                <1> 	ja paintfontvesa
  8536 00006C5C D0EA                <1> 	shr dl, 1
  8537 00006C5E 8815[1D6D0000]      <1> 	mov [charwidth], dl
  8538                              <1> paintfontvesa:
  8539 00006C64 B201                <1> 	mov dl, 1
  8540 00006C66 20C2                <1> 	and dl, al
  8541 00006C68 803D[275B0000]01    <1> 	cmp byte [showcursorfonton], 1
  8542 00006C6F 0F8435000000        <1> 	je near nodelpaintedfont
  8543 00006C75 803D[275B0000]02    <1> 	cmp byte [showcursorfonton], 2
  8544 00006C7C 0F8518000000        <1> 	jne near noswitchcursorfonton
  8545 00006C82 80FA00              <1> 	cmp dl, 0
  8546 00006C85 0F842E000000        <1> 	je near nopixelset
  8547 00006C8B 668B1D[896B0000]    <1> 	mov bx, [colorfont]
  8548 00006C92 66891F              <1> 	mov [edi], bx
  8549 00006C95 E91F000000          <1> 	jmp nopixelset
  8550                              <1> noswitchcursorfonton:
  8551 00006C9A 3215[295B0000]      <1> 	xor dl, [mouseselecton]
  8552 00006CA0 668B1D[E7590000]    <1> 	mov bx, [background]
  8553 00006CA7 66891F              <1> 	mov [edi], bx
  8554                              <1> nodelpaintedfont:
  8555 00006CAA 80FA00              <1> 	cmp dl, 0
  8556 00006CAD 740A                <1> 	je nopixelset
  8557 00006CAF 668B15[896B0000]    <1> 	mov dx, [colorfont]
  8558 00006CB6 668917              <1> 	mov [edi], dx
  8559                              <1> nopixelset:
  8560 00006CB9 81C702000000        <1> 	add edi, 2
  8561 00006CBF D0C0                <1> 	rol al, 1
  8562 00006CC1 FEC1                <1> 	inc cl
  8563 00006CC3 3A0D[1D6D0000]      <1> 	cmp cl, [charwidth]
  8564 00006CC9 7299                <1> 	jb paintfontvesa
  8565 00006CCB FEC5                <1> 	inc ch
  8566 00006CCD 31D2                <1> 	xor edx, edx
  8567 00006CCF 668B15[154C0000]    <1> 	mov dx, [resolutionx2]
  8568 00006CD6 01D7                <1> 	add edi, edx
  8569 00006CD8 31D2                <1> 	xor edx, edx
  8570 00006CDA 8A15[1D6D0000]      <1> 	mov dl, [charwidth]
  8571 00006CE0 00D2                <1> 	add dl, dl
  8572 00006CE2 29D7                <1> 	sub edi, edx
  8573 00006CE4 80FD10              <1> 	cmp ch, 16
  8574 00006CE7 0F8248FFFFFF        <1> 	jb foundfontvesa
  8575                              <1> donefontvesa:
  8576 00006CED B208                <1> 	mov dl, 8
  8577 00006CEF 8815[1D6D0000]      <1> 	mov [charwidth], dl
  8578 00006CF5 668B15[856B0000]    <1> 	mov dx, [posxvesa]
  8579 00006CFC 8A1D[1D6D0000]      <1> 	mov bl, [charwidth]
  8580 00006D02 30FF                <1> 	xor bh, bh
  8581 00006D04 6601DA              <1> 	add dx, bx
  8582 00006D07 668B1D[896B0000]    <1> 	mov bx, [colorfont]
  8583 00006D0E 668B0D[876B0000]    <1> 	mov cx, [posyvesa]
  8584 00006D15 C605[285B0000]00    <1> 	mov byte [savefonton], 0
  8585 00006D1C C3                  <1> 	ret
  8586 00006D1D 08                  <1> charwidth db 8
  8587                              <1> nwlinevesa:
  8588 00006D1E 668B15[856B0000]    <1> 	mov dx, [posxvesa]
  8589 00006D25 6631D2              <1> 	xor dx, dx
  8590 00006D28 668915[856B0000]    <1> 	mov [posxvesa], dx
  8591 00006D2F 668B0D[876B0000]    <1> 	mov cx, [posyvesa]
  8592 00006D36 6681C11000          <1> 	add cx, 16
  8593 00006D3B 66890D[876B0000]    <1> 	mov [posyvesa], cx
  8594 00006D42 EBA9                <1> 	jmp donefontvesa
  8595                              <1> vesafontsaver:
  8596 00006D44 30C0                <1> 	xor al, al
  8597 00006D46 30C9                <1> 	xor cl, cl
  8598                              <1> vesafontsaver2:
  8599 00006D48 668B17              <1> 	mov dx, [edi]
  8600 00006D4B 663B15[896B0000]    <1> 	cmp dx, [colorfont]
  8601 00006D52 742F                <1> 	je colorfontmatch
  8602                              <1> donecolormatch:
  8603 00006D54 81C702000000        <1> 	add edi, 2
  8604 00006D5A D0C0                <1> 	rol al, 1
  8605 00006D5C FEC1                <1> 	inc cl
  8606 00006D5E 80F908              <1> 	cmp cl, 8
  8607 00006D61 72E5                <1> 	jb vesafontsaver2
  8608 00006D63 8806                <1> 	mov [esi], al
  8609 00006D65 46                  <1> 	inc esi
  8610 00006D66 FEC5                <1> 	inc ch
  8611 00006D68 31D2                <1> 	xor edx, edx
  8612 00006D6A 668B15[154C0000]    <1> 	mov dx, [resolutionx2]
  8613 00006D71 01D7                <1> 	add edi, edx
  8614 00006D73 81EF10000000        <1> 	sub edi, 16
  8615 00006D79 80FD10              <1> 	cmp ch, 16
  8616 00006D7C 72C6                <1> 	jb vesafontsaver
  8617 00006D7E E96AFFFFFF          <1> 	jmp donefontvesa
  8618                              <1> colorfontmatch:
  8619 00006D83 0401                <1> 	add al, 1
  8620 00006D85 EBCD                <1> 	jmp donecolormatch
  8621                              <1> 	
  8622                              <1> showbmp:
  8623 00006D87 668B06              <1> 	mov ax, [esi]
  8624 00006D8A 663D424D            <1> 	cmp ax, "BM"
  8625 00006D8E 0F8586000000        <1> 	jne near endedbmp
  8626 00006D94 8B3D[3D4B0000]      <1> 	mov edi, [physbaseptr]
  8627 00006D9A 6689D0              <1> 	mov ax, dx
  8628 00006D9D 6689CB              <1> 	mov bx, cx
  8629 00006DA0 31C9                <1> 	xor ecx, ecx
  8630 00006DA2 31D2                <1> 	xor edx, edx
  8631 00006DA4 6689D9              <1> 	mov cx, bx
  8632 00006DA7 6689C2              <1> 	mov dx, ax
  8633 00006DAA 01D7                <1> 	add edi, edx
  8634 00006DAC 01D7                <1> 	add edi, edx
  8635 00006DAE 31D2                <1> 	xor edx, edx
  8636 00006DB0 668B15[154C0000]    <1> 	mov dx, [resolutionx2]
  8637 00006DB7 034E16              <1> 	add ecx, [esi + 22]
  8638                              <1> bmplocloop:
  8639 00006DBA 52                  <1> 	push edx
  8640 00006DBB 31C0                <1> 	xor eax, eax
  8641 00006DBD 6689D0              <1> 	mov ax, dx
  8642 00006DC0 F7E1                <1> 	mul ecx
  8643 00006DC2 5A                  <1> 	pop edx
  8644 00006DC3 01C7                <1> 	add edi, eax
  8645 00006DC5 8B5612              <1> 	mov edx, [esi + 18]
  8646 00006DC8 8B4E16              <1> 	mov ecx, [esi + 22]
  8647 00006DCB 8B460A              <1> 	mov eax, [esi + 10]
  8648 00006DCE 8B5E02              <1> 	mov ebx, [esi + 2]
  8649 00006DD1 01F3                <1> 	add ebx, esi
  8650 00006DD3 891D[206E0000]      <1> 	mov [bmpend], ebx
  8651 00006DD9 89D3                <1> 	mov ebx, edx
  8652 00006DDB 01C6                <1> 	add esi, eax
  8653                              <1> ldxbmp:
  8654 00006DDD 668B06              <1> 	mov ax, [esi]
  8655 00006DE0 668907              <1> 	mov [edi], ax
  8656 00006DE3 81C702000000        <1> 	add edi, 2
  8657 00006DE9 81C602000000        <1> 	add esi, 2
  8658 00006DEF 3B35[206E0000]      <1> 	cmp esi, [bmpend]
  8659 00006DF5 7723                <1> 	ja endedbmp
  8660 00006DF7 4A                  <1> 	dec edx
  8661 00006DF8 81FA00000000        <1> 	cmp edx, 0
  8662 00006DFE 77DD                <1> 	ja ldxbmp
  8663 00006E00 31D2                <1> 	xor edx, edx
  8664 00006E02 668B15[154C0000]    <1> 	mov dx, [resolutionx2]
  8665 00006E09 29DF                <1> 	sub edi, ebx
  8666 00006E0B 29DF                <1> 	sub edi, ebx
  8667 00006E0D 29D7                <1> 	sub edi, edx
  8668 00006E0F 49                  <1> 	dec ecx
  8669 00006E10 89DA                <1> 	mov edx, ebx
  8670 00006E12 81F900000000        <1> 	cmp ecx, 0
  8671 00006E18 77C3                <1> 	ja ldxbmp
  8672                              <1> endedbmp:
  8673 00006E1A E809EEFFFF          <1> 	call switchmousepos2
  8674 00006E1F C3                  <1> 	ret
  8675                              <1> 	
  8676 00006E20 00000000            <1> 	bmpend dd 0
  8677                              <1> 	
  8678                              <1> drawline:	;from (bx,ax) to (dx,cx), color in si
  8679 00006E24 668935[D26E0000]    <1> 	mov [.color], si
  8680 00006E2B C605[D46E0000]00    <1> 	mov byte [.steep], 0
  8681 00006E32 C605[D56E0000]00    <1> 	mov byte [.yreversed], 0
  8682 00006E39 E907000000          <1> 	jmp .notsteep
  8683                              <1> .steeploop:
  8684 00006E3E C605[D46E0000]01    <1> 	mov byte [.steep], 1
  8685                              <1> .notsteep:
  8686 00006E45 31FF                <1> 	xor edi, edi
  8687 00006E47 31F6                <1> 	xor esi, esi
  8688 00006E49 6639DA              <1> 	cmp dx, bx
  8689 00006E4C 7705                <1> 	ja .noreversex
  8690 00006E4E 6687D3              <1> 	xchg dx, bx
  8691 00006E51 6691                <1> 	xchg cx, ax
  8692                              <1> .noreversex:
  8693 00006E53 6689D7              <1> 	mov di, dx
  8694 00006E56 6629DF              <1> 	sub di, bx
  8695                              <1> 	
  8696 00006E59 6639C1              <1> 	cmp cx, ax
  8697 00006E5C 720B                <1> 	jb .reversey
  8698 00006E5E 6689CE              <1> 	mov si, cx
  8699 00006E61 6629C6              <1> 	sub si, ax
  8700 00006E64 E90D000000          <1> 	jmp .normal
  8701                              <1> .reversey:
  8702 00006E69 C605[D56E0000]01    <1> 	mov byte [.yreversed], 1
  8703 00006E70 6689C6              <1> 	mov si, ax
  8704 00006E73 6629CE              <1> 	sub si, cx	
  8705                              <1> .normal:
  8706 00006E76 6687CA              <1> 	xchg cx, dx
  8707 00006E79 6693                <1> 	xchg ax, bx
  8708 00006E7B 6639FE              <1> 	cmp si, di
  8709 00006E7E 77BE                <1> 	ja .steeploop
  8710 00006E80 6687CA              <1> 	xchg cx, dx
  8711 00006E83 6693                <1> 	xchg ax, bx
  8712                              <1> 	
  8713 00006E85 6691                <1> 	xchg ax, cx
  8714 00006E87 6687DA              <1> 	xchg bx, dx
  8715 00006E8A 31C0                <1> 	xor eax, eax
  8716 00006E8C 6689F8              <1> 	mov ax, di
  8717 00006E8F 66D1E8              <1> 	shr ax, 1
  8718                              <1> .lp:
  8719 00006E92 60                  <1> 	pusha
  8720 00006E93 6687CA              <1> 	xchg cx, dx
  8721 00006E96 803D[D46E0000]01    <1> 	cmp byte [.steep], 1
  8722 00006E9D 7403                <1> 	je .xchg
  8723 00006E9F 6687D1              <1> 	xchg dx, cx
  8724                              <1> .xchg:
  8725 00006EA2 668B35[D26E0000]    <1> 	mov si, [.color]
  8726 00006EA9 E828000000          <1> 	call putpixel
  8727 00006EAE 61                  <1> 	popa
  8728 00006EAF 6639F0              <1> 	cmp ax, si
  8729 00006EB2 7313                <1> 	jae .noaddx
  8730 00006EB4 803D[D56E0000]01    <1> 	cmp byte [.yreversed], 1
  8731 00006EBB 7505                <1> 	jne .nodecy
  8732 00006EBD 6681E90200          <1> 	sub cx, 2
  8733                              <1> .nodecy:
  8734 00006EC2 6641                <1> 	inc cx
  8735 00006EC4 6601F8              <1> 	add ax, di
  8736                              <1> .noaddx:
  8737 00006EC7 6629F0              <1> 	sub ax, si
  8738                              <1> 	
  8739 00006ECA 6642                <1> 	inc dx
  8740 00006ECC 6639DA              <1> 	cmp dx, bx
  8741 00006ECF 72C1                <1> 	jb .lp
  8742                              <1> 	
  8743                              <1> .done:
  8744 00006ED1 C3                  <1> 	ret
  8745                              <1> 	
  8746 00006ED2 0000                <1> .color dw 0
  8747 00006ED4 00                  <1> .steep db 0
  8748 00006ED5 00                  <1> .yreversed db 0
  8749                              <1> 	
  8750                              <1> putpixel: ;color in si, point is (dx,cx)
  8751 00006ED6 8B3D[3D4B0000]      <1> 	mov edi, [physbaseptr]
  8752 00006EDC 31C0                <1> 	xor eax, eax
  8753 00006EDE 31DB                <1> 	xor ebx, ebx
  8754 00006EE0 668B1D[294B0000]    <1> 	mov bx, [resolutiony]
  8755 00006EE7 66A1[154C0000]      <1> 	mov ax, [resolutionx2]
  8756 00006EED 66D1E2              <1> 	shl dx, 1
  8757 00006EF0 6639C2              <1> 	cmp dx, ax
  8758 00006EF3 7717                <1> 	ja .doneput
  8759 00006EF5 6639D9              <1> 	cmp cx, bx
  8760 00006EF8 7712                <1> 	ja .doneput
  8761 00006EFA 6689CB              <1> 	mov bx, cx
  8762 00006EFD 6689D1              <1> 	mov cx, dx
  8763 00006F00 F7E3                <1> 	mul ebx
  8764 00006F02 6689CB              <1> 	mov bx, cx
  8765 00006F05 01D8                <1> 	add eax, ebx
  8766 00006F07 01C7                <1> 	add edi, eax
  8767 00006F09 668937              <1> 	mov [edi], si
  8768                              <1> .doneput:
  8769 00006F0C C3                  <1> 	ret
  8770                              <1> 
  8771                              <1> 
  8772                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;Here are some vars;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  8773 00006F0D 00000000            <1> 	showstringesi dw 0,0
  8774 00006F11 00                  <1> 	mouseon db 0
  8775 00006F12 737461727400        <1> 	start	db "start",0
  8776 00006F18 536F6C6C65724F5300  <1> 	gotomenu db "SollerOS",0
  8777 00006F21 506F776572204F6666- <1> 	turnoffmsg db "Power Off",0
  8778 00006F2A 00                  <1>
  8779 00006F2B 426F6F2100          <1> 	boomsg db "Boo!",0
  8780 00006F30 5061636D616E207761- <1> 	pacmsg	db "Pacman was easy to draw.",0
  8781 00006F39 73206561737920746F- <1>
  8782 00006F42 20647261772E00      <1>
  8783 00006F49 4F6D206E6F6D206E6F- <1> 	pacnom  db "Om nom nom nom",0
  8784 00006F52 6D206E6F6D00        <1>
  8785 00006F58 5800                <1> 	xmsg db "X",0
  8786 00006F5A 0000                <1> 	icon dw 0	;pointer to icon
  8787 00006F5C 00000000            <1> 	codepointer dw 0,0 ;pointer to code
  8788 00006F60 00                  <1> 	iconselected db 0
  8789                              <1> 	
  8790                              <1> 	boo:
  8791 00006F61 BE[2B6F0000]        <1> 		mov esi, boomsg
  8792 00006F66 66BA6400            <1> 		mov dx, 100
  8793 00006F6A 66B94001            <1> 		mov cx, 320
  8794 00006F6E 31DB                <1> 		xor ebx, ebx
  8795 00006F70 6631C0              <1> 		xor ax, ax
  8796 00006F73 E9DDF5FFFF          <1> 		jmp showstring
  8797                              <1> 
  8798                              <1> 	pacmannomnom:
  8799 00006F78 BE[496F0000]        <1> 		mov esi, pacnom
  8800 00006F7D 66BA8200            <1> 		mov dx, 130
  8801 00006F81 66B93C00            <1> 		mov cx, 60
  8802 00006F85 31DB                <1> 		xor ebx, ebx
  8803 00006F87 6631C0              <1> 		xor ax, ax
  8804 00006F8A E9C6F5FFFF          <1> 		jmp showstring	
  8805                              <1> 	
  8806                              <1> 	noie:
  8807 00006F8F 66C705[48700000]80- <1> 		mov word [termwindow], 640
  8808 00006F97 02                  <1>
  8809 00006F98 66C705[4A700000]E0- <1> 		mov word [termwindow + 2], 480	;the previous lines of code make a large terminal window that is 4 characters smaller than the screen
  8810 00006FA0 01                  <1>
  8811 00006FA1 BE[48700000]        <1> 		mov esi, termwindow
  8812 00006FA6 66BA1000            <1> 		mov dx, 16
  8813 00006FAA 66B91000            <1> 		mov cx, 16
  8814 00006FAE 31DB                <1> 		xor ebx, ebx
  8815 00006FB0 6631C0              <1> 		xor ax, ax
  8816 00006FB3 E805F6FFFF          <1> 		call showwindow
  8817 00006FB8 E96FB7FFFF          <1> 		jmp os
  8818                              <1> 
  8819                              <1> 	gotomenuboot:
  8820 00006FBD 31D2                <1> 		xor edx, edx
  8821 00006FBF 31C9                <1> 		xor ecx, ecx
  8822 00006FC1 668B15[274B0000]    <1> 		mov dx, [resolutionx]
  8823 00006FC8 668B0D[294B0000]    <1> 		mov cx, [resolutiony]
  8824 00006FCF 66C1E904            <1> 		shr cx, 4
  8825 00006FD3 6681E90100          <1> 		sub cx, 1
  8826 00006FD8 66C1E104            <1> 		shl cx, 4
  8827 00006FDC 668915[48700000]    <1> 		mov [termwindow], dx
  8828 00006FE3 66890D[4A700000]    <1> 		mov [termwindow + 2], cx	;the previous lines of code make a large terminal window that is fullscreen
  8829 00006FEA BE[48700000]        <1> 		mov esi, termwindow
  8830 00006FEF 6631D2              <1> 		xor dx, dx
  8831 00006FF2 6631C9              <1> 		xor cx, cx
  8832 00006FF5 31DB                <1> 		xor ebx, ebx
  8833 00006FF7 6631C0              <1> 		xor ax, ax
  8834 00006FFA E8BEF5FFFF          <1> 		call showwindow
  8835 00006FFF E928B7FFFF          <1> 		jmp os
  8836                              <1> 
  8837                              <1> 	winblows:
  8838 00007004 BE[216F0000]        <1> 		mov esi, turnoffmsg
  8839 00007009 BB[89460000]        <1> 		mov ebx, turnoff
  8840 0000700E 668B0D[294B0000]    <1> 		mov cx, [resolutiony]
  8841 00007015 6681E92000          <1> 		sub cx, 32
  8842 0000701A 6631D2              <1> 		xor dx, dx
  8843 0000701D 30E4                <1> 		xor ah, ah
  8844 0000701F B010                <1> 		mov al, 00010000b
  8845 00007021 E82FF5FFFF          <1> 		call showstring
  8846 00007026 BE[186F0000]        <1> 		mov esi, gotomenu
  8847 0000702B 668B0D[294B0000]    <1> 		mov cx, [resolutiony]
  8848 00007032 6681E93000          <1> 		sub cx, 48
  8849 00007037 6631D2              <1> 		xor dx, dx
  8850 0000703A 30E4                <1> 		xor ah, ah
  8851 0000703C B010                <1> 		mov al, 00010000b
  8852 0000703E BB[BD6F0000]        <1> 		mov ebx, gotomenuboot
  8853 00007043 E90DF5FFFF          <1> 		jmp showstring
  8854                              <1> 
  8855 00007048 20035802            <1> 	termwindow:	dw 800,600	;;window size
  8856 0000704C 534855536800        <1> 	termmsg:	db "SHUSh",0	;;window title
  8857                              <1> 	
  8858 0000704C <incbin>            <1> interneticon: 	incbin 'source/gui/icons/internet'
  8859 0000704C <incbin>            <1> wordicon: 	incbin 'source/gui/icons/word'
  8860 0000704C <incbin>            <1> pacmanpellet: incbin 'source/gui/icons/pellet'
  8861 0000704C <incbin>            <1> ghostie	incbin 'source/gui/icons/ghostie'
  8862 0000704C <incbin>            <1> pacman	incbin 'source/gui/icons/pacman'
  8863                                  %endif
  8864                                      %include "source/data.asm"
  8865 000072DC 626F6F742E736800    <1> 	bootfilename db "boot.sh",0
  8866 000072E4 73687573683A2000    <1> 	notfound1 db "shush: ",0
  8867 000072EC 3A20636F6D6D616E64- <1> 	notfound2 db  ": command not found",10,0
  8868 000072F5 206E6F7420666F756E- <1>
  8869 000072FE 640A00              <1>
  8870 00007301 757365726E616D653A- <1> 	userask db "username:",0
  8871 0000730A 00                  <1>
  8872 0000730B 70617373776F72643A- <1> 	pwdask	db	"password:",0
  8873 00007314 00                  <1>
  8874 00007315 40                  <1> 	computer db "@"
  8875                              <1> %ifdef io.serial
  8876                              <1> 	computername	db	"SollerOS.",io.serial," ",0
  8877                              <1> %else
  8878 00007316 536F6C6C65724F5320- <1> 	computername	db	"SollerOS ",0
  8879 0000731F 00                  <1>
  8880                              <1> %endif
  8881 00007320 5D242000            <1> 	endprompt db "]$ ",0
  8882 00007324 0D                  <1> 	crlf 	db  13
  8883 00007325 0A00                <1> 	line	db	10,0
  8884                              <1> 	userlst:
  8885 00007327 726F6F7400          <1> 			db "root",0
  8886 0000732C 617765736F6D65706F- <1> 			db "awesomepower",0
  8887 00007335 77657200            <1>
  8888 00007339 7573657200          <1> 			db "user",0
  8889 0000733E 70617373776F726400  <1> 			db "password",0
  8890 00007347 6E00                <1> 			db "n",0	;;abuse for quick entry-a quick double n followed by a double enter will get you in
  8891 00007349 00                  <1> 			db 0
  8892                              <1> 	userlstend:
  8893                              <1> 	
  8894                              <1> %ifdef io.serial
  8895                              <1> %else
  8896 00007349 <incbin>            <1> fonts:	incbin "source/precompiled/fonts.pak"
  8897                              <1> fontend:
  8898                              <1> %endif
  8899                              <1> osend:	;this is the end of the operating system's space on disk
  8900                                      %include "build/fileindex.asm"
  8901                              <1> diskfileindex:
  8902 0000834A 617267746573742E65- <1> db "argtest.elf",0
  8903 00008353 6C6600              <1>
  8904 00008356 43000000            <1> dd (f0-$$)/512
  8905 0000835A 06010000            <1> dd (f1-f0)/512
  8906 0000835E 6261636B67726F756E- <1> db "background.bmp",0
  8907 00008367 642E626D7000        <1>
  8908 0000836D 49010000            <1> dd (f1-$$)/512
  8909 00008371 01140000            <1> dd (f2-f1)/512
  8910 00008375 626F6F742E736800    <1> db "boot.sh",0
  8911 0000837D 4A150000            <1> dd (f2-$$)/512
  8912 00008381 01000000            <1> dd (f3-f2)/512
  8913 00008385 63686172746573742E- <1> db "chartest.elf",0
  8914 0000838E 656C6600            <1>
  8915 00008392 4B150000            <1> dd (f3-$$)/512
  8916 00008396 26010000            <1> dd (f4-f3)/512
  8917 0000839A 646F73746573742E63- <1> db "dostest.com",0
  8918 000083A3 6F6D00              <1>
  8919 000083A6 71160000            <1> dd (f4-$$)/512
  8920 000083AA 01000000            <1> dd (f5-f4)/512
  8921 000083AE 6578656300          <1> db "exec",0
  8922 000083B3 72160000            <1> dd (f5-$$)/512
  8923 000083B7 01000000            <1> dd (f6-f5)/512
  8924 000083BB 66696E616C636F756E- <1> db "finalcount.snd",0
  8925 000083C4 742E736E6400        <1>
  8926 000083CA 73160000            <1> dd (f6-$$)/512
  8927 000083CE 01000000            <1> dd (f7-f6)/512
  8928 000083D2 666F726B00          <1> db "fork",0
  8929 000083D7 74160000            <1> dd (f7-$$)/512
  8930 000083DB 01000000            <1> dd (f8-f7)/512
  8931 000083DF 68656C6C6F776F726C- <1> db "helloworld.elf",0
  8932 000083E8 642E656C6600        <1>
  8933 000083EE 75160000            <1> dd (f8-$$)/512
  8934 000083F2 D6010000            <1> dd (f9-f8)/512
  8935 000083F6 696E7400            <1> db "int",0
  8936 000083FA 4B180000            <1> dd (f9-$$)/512
  8937 000083FE 01000000            <1> dd (f10-f9)/512
  8938 00008402 6C6F7374776F6F6473- <1> db "lostwoods.snd",0
  8939 0000840B 2E736E6400          <1>
  8940 00008410 4C180000            <1> dd (f10-$$)/512
  8941 00008414 01000000            <1> dd (f11-f10)/512
  8942 00008418 6D6172696F2E736E64- <1> db "mario.snd",0
  8943 00008421 00                  <1>
  8944 00008422 4D180000            <1> dd (f11-$$)/512
  8945 00008426 01000000            <1> dd (f12-f11)/512
  8946 0000842A 736F6C6C65726F732E- <1> db "solleros.bmp",0
  8947 00008433 626D7000            <1>
  8948 00008437 4E180000            <1> dd (f12-$$)/512
  8949 0000843B B0020000            <1> dd (f13-f12)/512
  8950 0000843F 736F6C6C65726F732E- <1> db "solleros.txt",0
  8951 00008448 74787400            <1>
  8952 0000844C FE1A0000            <1> dd (f13-$$)/512
  8953 00008450 01000000            <1> dd (f14-f13)/512
  8954 00008454 736F6E676F74696D65- <1> db "songotime.snd",0
  8955 0000845D 2E736E6400          <1>
  8956 00008462 FF1A0000            <1> dd (f14-$$)/512
  8957 00008466 01000000            <1> dd (f15-f14)/512
  8958 0000846A 73736500            <1> db "sse",0
  8959 0000846E 001B0000            <1> dd (f15-$$)/512
  8960 00008472 02000000            <1> dd (f16-f15)/512
  8961 00008476 737464696F74657374- <1> db "stdiotest.elf",0
  8962 0000847F 2E656C6600          <1>
  8963 00008484 021B0000            <1> dd (f16-$$)/512
  8964 00008488 27010000            <1> dd (f17-f16)/512
  8965 0000848C 74656C7900          <1> db "tely",0
  8966 00008491 291C0000            <1> dd (f17-$$)/512
  8967 00008495 01000000            <1> dd (f18-f17)/512
  8968 00008499 74696D65746573742E- <1> db "timetest.elf",0
  8969 000084A2 656C6600            <1>
  8970 000084A6 2A1C0000            <1> dd (f18-$$)/512
  8971 000084AA 04010000            <1> dd (f19-f18)/512
  8972 000084AE 7475746F7269616C2E- <1> db "tutorial.sh",0
  8973 000084B7 736800              <1>
  8974 000084BA 2E1D0000            <1> dd (f19-$$)/512
  8975 000084BE 03000000            <1> dd (f20-f19)/512
  8976 000084C2 756E667300          <1> db "unfs",0
  8977 000084C7 311D0000            <1> dd (f20-$$)/512
  8978 000084CB 02000000            <1> dd (f21-f20)/512
  8979 000084CF 766963746F72792E77- <1> db "victory.wav",0
  8980 000084D8 617600              <1>
  8981 000084DB 331D0000            <1> dd (f21-$$)/512
  8982 000084DF 16000000            <1> dd (f22-f21)/512
  8983 000084E3 5F696D672E62696E00  <1> db "_img.bin",0
  8984 000084EC 491D0000            <1> dd (f22-$$)/512
  8985 000084F0 D7020000            <1> dd (f23-f22)/512
  8986                              <1> enddiskfileindex:
  8987                              <1> 
  8988                                      %include "source/bss.asm"
  8989                              <1> align 4, nop
  8990                              <1> bssstart: equ $
  8991                              <1> guion equ bssstart
  8992                              <1> DriveNumber equ guion + 1
  8993                              <1> lbaad equ DriveNumber + 1
  8994                              <1> memlistbuf equ lbaad + 4
  8995                              <1> memlistend equ memlistbuf + 576
  8996                              <1> bsscopy equ memlistend
  8997                              <1> initialstack equ bsscopy
  8998                              <1> stackend equ initialstack + 4000
  8999                              <1> fileindex: equ stackend + 96
  9000                              <1> fileindexend: equ fileindex + 1024
  9001                              <1> previousstack equ fileindexend
  9002                              <1> lastfolderloc equ previousstack + 4
  9003                              <1> currentfolderloc equ lastfolderloc + 4
  9004                              <1> currentfolder equ currentfolderloc + 4
  9005                              <1> currentfolderend equ currentfolder + 512
  9006                              <1> uid equ currentfolderend
  9007                              <1> ranboot equ uid + 4
  9008                              <1> IFON equ ranboot + 1
  9009                              <1> IFTRUE equ IFON + 1
  9010                              <1> BATCHPOS equ IFTRUE + 100
  9011                              <1> BATCHISON equ BATCHPOS + 4
  9012                              <1> LOOPON equ BATCHISON + 1
  9013                              <1> LOOPPOS	equ LOOPON + 1
  9014                              <1> variables: equ LOOPPOS + 4
  9015                              <1> varend: equ variables + 4096
  9016                              <1> buftxt2: equ varend
  9017                              <1> buftxt: equ buftxt2 + 1024
  9018                              <1> buftxtend: equ buftxt + 1024
  9019                              <1> buf2: equ buftxtend
  9020                              <1> numbuf: equ buf2 + 20
  9021                              <1> %ifdef io.serial
  9022                              <1> 	lastcommandpos equ numbuf + 1
  9023                              <1> %else
  9024                              <1> 	%ifdef gui.included
  9025                              <1> 		graphicstable equ numbuf + 1 ;w type, dw datalocation, w locationx, w locationy, w selected, dw code
  9026                              <1> 		graphicstableend equ graphicstable + 200h
  9027                              <1> 		%ifdef gui.background
  9028                              <1> 			backgroundbuffer equ graphicstableend
  9029                              <1> 			mousecolorbuf equ backgroundbuffer + 1280*1025*2
  9030                              <1> 		%else
  9031                              <1> 			mousecolorbuf equ graphicstableend ;where the gui under the mouse is stored
  9032                              <1> 		%endif
  9033                              <1> 		mcolorend equ mousecolorbuf + 256
  9034                              <1> 		videobuf equ mcolorend + 1	;1680x1050 pixels in characters
  9035                              <1> 		videobufend	equ videobuf + 210*65*2
  9036                              <1> 		videobuf2 equ videobufend
  9037                              <1> 		videobuf2end equ videobuf2 + 210*65*2
  9038                              <1> 	%else
  9039                              <1> 		videobuf equ numbuf + 1
  9040                              <1> 		videobufend equ videobuf + 80*30*2
  9041                              <1> 		videobuf2 equ videobufend
  9042                              <1> 		videobuf2end equ videobuf2 + 160*64*2
  9043                              <1> 	%endif
  9044                              <1> 	lastcommandpos: equ videobuf2end
  9045                              <1> %endif
  9046                              <1> 	commandbufpos: equ lastcommandpos + 4
  9047                              <1> 	commandbuf: equ commandbufpos + 4
  9048                              <1> 	commandbufend: equ commandbuf + 4096 ;this is where kernel space only ends, the rest is for threading
  9049                              <1> %ifdef rtl8139.included
  9050                              <1> 	rbuffstart: equ commandbufend ;for use with networking
  9051                              <1> 	rbuffend equ rbuffstart + 8212
  9052                              <1> %else
  9053                              <1> 	rbuffstart equ commandbufend
  9054                              <1> 	rbuffend equ commandbufend
  9055                              <1> %endif
  9056                              <1> %ifdef threads.included
  9057                              <1> 	threadlist: equ rbuffend ;this buffer will hold the stack locations of all of the threads, up to 2048
  9058                              <1> 	threadlistend: equ threadlist + 1024*4
  9059                              <1> 	stacks:	equ threadlistend ;i use SS now for proper stack management. This makes sure stacks never screw with other memory
  9060                              <1> 	stack1: equ stacks + 1024  ;woah, thats a lot of space for stacks
  9061                              <1> 	bssend equ stack1 + 1024*1024
  9062                              <1> %else
  9063                              <1> 	bssend equ rbuffend
  9064                              <1> %endif
  9065                              <1> dosprogloc equ 0x400000 ;from here on, it is not kernel space so apps can be loaded here.
  9066                                      %include "build/files.asm"
  9067 000084F4 00<rept>            <1> align 512,db 0
  9068                              <1> f0:
  9069 000084F4 <incbin>            <1> incbin "included/argtest.elf"
  9070 000290F2 00<rept>            <1> align 512,db 0
  9071                              <1> f1:
  9072 000290F2 <incbin>            <1> incbin "included/background.bmp"
  9073 002A9246 00<rept>            <1> align 512,db 0
  9074                              <1> f2:
  9075 002A9246 <incbin>            <1> incbin "included/boot.sh"
  9076 002A950F 00<rept>            <1> align 512,db 0
  9077                              <1> f3:
  9078 002A950F <incbin>            <1> incbin "included/chartest.elf"
  9079 002CE0DB 00<rept>            <1> align 512,db 0
  9080                              <1> f4:
  9081 002CE0DB <incbin>            <1> incbin "included/dostest.com"
  9082 002CE32B 00<rept>            <1> align 512,db 0
  9083                              <1> f5:
  9084 002CE32B <incbin>            <1> incbin "included/exec"
  9085 002CE4E9 00<rept>            <1> align 512,db 0
  9086                              <1> f6:
  9087 002CE4E9 <incbin>            <1> incbin "included/finalcount.snd"
  9088 002CE702 00<rept>            <1> align 512,db 0
  9089                              <1> f7:
  9090 002CE702 <incbin>            <1> incbin "included/fork"
  9091 002CE962 00<rept>            <1> align 512,db 0
  9092                              <1> f8:
  9093 002CE962 <incbin>            <1> incbin "included/helloworld.elf"
  9094 003095E3 00<rept>            <1> align 512,db 0
  9095                              <1> f9:
  9096 003095E3 <incbin>            <1> incbin "included/int"
  9097 003097A9 00<rept>            <1> align 512,db 0
  9098                              <1> f10:
  9099 003097A9 <incbin>            <1> incbin "included/lostwoods.snd"
  9100 00309856 00<rept>            <1> align 512,db 0
  9101                              <1> f11:
  9102 00309856 <incbin>            <1> incbin "included/mario.snd"
  9103 00309A3A 00<rept>            <1> align 512,db 0
  9104                              <1> f12:
  9105 00309A3A <incbin>            <1> incbin "included/solleros.bmp"
  9106 0035FBE6 00<rept>            <1> align 512,db 0
  9107                              <1> f13:
  9108 0035FBE6 <incbin>            <1> incbin "included/solleros.txt"
  9109 0035FD76 00<rept>            <1> align 512,db 0
  9110                              <1> f14:
  9111 0035FD76 <incbin>            <1> incbin "included/songotime.snd"
  9112 0035FE4A 00<rept>            <1> align 512,db 0
  9113                              <1> f15:
  9114 0035FE4A <incbin>            <1> incbin "included/sse"
  9115 003602A8 00<rept>            <1> align 512,db 0
  9116                              <1> f16:
  9117 003602A8 <incbin>            <1> incbin "included/stdiotest.elf"
  9118 00385043 00<rept>            <1> align 512,db 0
  9119                              <1> f17:
  9120 00385043 <incbin>            <1> incbin "included/tely"
  9121 003853C0 00<rept>            <1> align 512,db 0
  9122                              <1> f18:
  9123 003853C0 <incbin>            <1> incbin "included/timetest.elf"
  9124 003A5A3D 00<rept>            <1> align 512,db 0
  9125                              <1> f19:
  9126 003A5A3D <incbin>            <1> incbin "included/tutorial.sh"
  9127 003A6152 00<rept>            <1> align 512,db 0
  9128                              <1> f20:
  9129 003A6152 <incbin>            <1> incbin "included/unfs"
  9130                              <1> align 512,db 0
  9131                              <1> f21:
  9132 003A6152 <incbin>            <1> incbin "included/victory.wav"
  9133 003A9148 00<rept>            <1> align 512,db 0
  9134                              <1> f22:
  9135 003A9148 <incbin>            <1> incbin "included/_img.bin"
  9136                              <1> align 512,db 0
  9137                              <1> f23:
