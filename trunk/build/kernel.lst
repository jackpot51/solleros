     1                                  [map symbols build/kernel.map]
     2                                  %include "config.asm"
     3                              <1> ;These flags are used to configure options as on, put a simicolon in front of it to not configure it
     4                              <1> 
     5                              <1> %define gui.included
     6                              <1> ;Turn on the gui
     7                              <1> 
     8                              <1> %define gui.alphablending
     9                              <1> ;Make the terminal in the GUI 25% transparent
    10                              <1> 
    11                              <1> %define gui.background
    12                              <1> ;Make the GUI have a loadable background
    13                              <1> 
    14                              <1> ;%define gui.time
    15                              <1> ;Show time in top right corner of screen
    16                              <1> 
    17                              <1> ;%define io.serial "1"
    18                              <1> ;Use the specified serial port for input and output instead of the keyboard and screen
    19                              <1> ;If the gui is included this should not be enabled
    20                              <1> 
    21                              <1> ;%define terminal.vsync
    22                              <1> ;Uses the RTC to automatically update the terminal at ~64Hz
    23                              <1> 	;WARNING:
    24                              <1> 	;This may cause problems on systems with non-standard RTC's
    25                              <1> 	;It is therefore recommended that you do not enable it even
    26                              <1> 	;though it gives a large speed improvement for character output
    27                              <1> 
    28                              <1> %define hardware.automatic
    29                              <1> ;Automatically load the sound and network drivers.
    30                              <1> 
    31                              <1> %define threads.included
    32                              <1> ;Include the thread testing stuff-this uses a relatively large amount of memory
    33                              <1> 
    34                              <1> %define exceptions.included
    35                              <1> ;Display debugging information should crashes occur-also uses quite a bit of memory
    36                              <1> 
    37                              <1> ;%define disk.protected
    38                              <1> ;Use protected mode instead of real mode for disk access-this allows for multitasking with disk reads
    39                              <1> 
    40                              <1> %define disk.real
    41                              <1> ;Use real mode for disk access-this gives greater compatibility
    42                              <1> 
    43                              <1> ;%define sound.included
    44                              <1> ;This includes the sound drivers
    45                              <1> 
    46                              <1> %define network.included
    47                              <1> ;This includes the network stack
    48                              <1> 
    49                              <1> %define rtl8169.included
    50                              <1> ;This includes the RTL8169 drivers
    51                              <1> 
    52                              <1> ;%define rtl8139.included
    53                              <1> ;This includes the RTL8139 drivers
    54                              <1> 
    55                              <1> ;%define ne2000.included
    56                              <1> ;This includes the ne2000 drivers
    57                              <1> 
    58                              <1> ;%define i8254x.included
    59                              <1> ;This includes the Intel 8254x drivers
    60                              <1> 
    61                              <1> ;%define sector.debug
    62                              <1> ;Dump the contents of the first sector of SollerOS
    63                              <1> 
    64                              <1> ;%define dos.compatible
    65                              <1> ;Make the kernel loadable by dos.
    66                              <1> 
    67                              <1> ;%define system.simple
    68                              <1> ;The smallest possible system, overrides all options
    69                              <1> 
    70                              <1> ;FIX DEPENDANCIES
    71                              <1> %ifdef system.simple
    72                              <1> 	%undef dos.compatible	;overides all including dos.compatible
    73                              <1> 	%define UNDEFALL
    74                              <1> %endif
    75                              <1> %ifdef dos.compatible
    76                              <1> 	%define UNDEFALL
    77                              <1> %endif
    78                              <1> %ifdef UNDEFALL
    79                              <1> 	%undef io.serial
    80                              <1> 	%undef disk.real
    81                              <1> 	%undef gui.included
    82                              <1> 	%undef gui.alphablending
    83                              <1> 	%undef gui.background
    84                              <1> 	%undef terminal.vsync
    85                              <1> 	%undef hardware.automatic
    86                              <1> 	%undef threads.included
    87                              <1> 	%undef exceptions.included
    88                              <1> 	%undef disk.protected
    89                              <1> 	%undef sound.included
    90                              <1> 	%undef network.included
    91                              <1> 	%undef rtl8139.included
    92                              <1> 	%undef rtl8169.included
    93                              <1> 	%undef ne2000.included
    94                              <1> 	%undef i8254x.included
    95                              <1> 	%undef sector.debug
    96                              <1> 	%undef UNDEFALL
    97                              <1> %endif
    98                              <1> %ifdef system.simple
    99                              <1> 	%define io.serial "1"
   100                              <1> 	%define disk.real
   101                              <1> %endif
   102                              <1> %ifdef gui.included
   103                              <1> 	%undef io.serial
   104                              <1> %else
   105                              <1> 	%undef gui.alphablending
   106                              <1> 	%undef gui.background
   107                              <1> %endif
   108                              <1> %ifdef network.included
   109                              <1> %else
   110                              <1> 	%undef i8254x.included
   111                              <1> 	%undef ne2000.included
   112                              <1> 	%undef rtl8139.included
   113                              <1> 	%undef rtl8169.included
   114                              <1> %endif
   115                              <1> %ifdef disk.protected
   116                              <1> 	%undef disk.real
   117                              <1> %else
   118                              <1> 	%ifdef disk.real
   119                              <1> 	%else
   120                              <1> 		%define disk.none
   121                              <1> 	%endif
   122                              <1> %endif
   123                                  [ORG 0x100]
   124                                  	%include "source/signature.asm"
   125                              <1> sigjump:
   126 00000000 E91A00              <1> 	jmp signatureend
   127                              <1> signature:
   128 00000003 536F6C6C65724F53    <1> db "SollerOS" ;Operating system name
   129 0000000B 20416C706861204275- <1> db " Alpha Build ",0	;Soller OS development level
   130 00000014 696C642000          <1>
   131 00000019 00010000            <1> dd 256	;version number
   132                              <1> signatureend:
   133                                  [BITS 16]
   134                                      %include "source/boot.asm"
   135                              <1>     ; MENU.ASM
   136                              <1> boot:
   137 0000001D 8CC8                <1> 	mov ax, cs
   138 0000001F 8ED8                <1> 	mov ds, ax
   139 00000021 8EC0                <1> 	mov es, ax
   140 00000023 8ED0                <1> 	mov ss, ax
   141 00000025 880E[9D8B]          <1> 	mov [DriveNumber], cl
   142 00000029 668916[9E8B]        <1> 	mov [lbaad], edx
   143                              <1> %ifdef io.serial
   144                              <1> 	call getmemorysize
   145                              <1> 	mov si, serialmsg
   146                              <1> 	call printrm
   147                              <1> 	jmp pmode
   148                              <1> serialmsg: db "SollerOS: Using serial port ",io.serial," for I/O.",0
   149                              <1> %else
   150 0000002E E80300              <1> 	call vgaset	;make users switch using a command-this leads to very fast boots
   151 00000031 E95700              <1> 	jmp pmode
   152                              <1> %endif
   153                              <1> 	
   154                              <1> vgaset:
   155 00000034 B81200              <1> 	mov ax, 12h
   156 00000037 31DB                <1> 	xor bx, bx
   157 00000039 CD10                <1> 	int 10h
   158 0000003B C606[9C8B]00        <1> 	mov byte [guion], 0
   159 00000040 E80100              <1> 	call getmemorysize;get the memory map after the video is initialized
   160 00000043 C3                  <1> 	ret
   161                              <1> 
   162                              <1> getmemorysize:
   163 00000044 BF[A28B]            <1> 	mov di, memlistbuf
   164 00000047 6631DB              <1> 	xor ebx, ebx
   165                              <1> getmemsizeloop:
   166 0000004A 66B820E80000        <1> 	mov eax, 0xE820
   167 00000050 66BA50414D53        <1> 	mov edx, 0x0534D4150
   168 00000056 66B918000000        <1> 	mov ecx, 24
   169 0000005C CD15                <1> 	int 0x15
   170 0000005E 81C71800            <1> 	add di, 24
   171 00000062 81FF[E28D]          <1> 	cmp di, memlistend
   172 00000066 7309                <1> 	jae nomoregetmemsize
   173 00000068 6681FB00000000      <1> 	cmp ebx, 0
   174 0000006F 75D9                <1> 	jne getmemsizeloop
   175                              <1> nomoregetmemsize:
   176 00000071 81EF[A28B]          <1> 	sub di, memlistbuf
   177 00000075 893E[E28D]          <1> 	mov [memlistend], di
   178 00000079 C3                  <1> 	ret
   179                              <1> 	
   180                              <1> printrm:			; 'si' comes in with string address
   181 0000007A BB0700              <1>     mov bx,07		; write to display
   182 0000007D B40E                <1>     mov ah,0Eh		; screen function
   183 0000007F 8A04                <1>    .lp:    mov al,[si]         ; get next character
   184 00000081 3C00                <1>     cmp al,0		; look for terminator 
   185 00000083 7405                <1>     je .done		; zero byte at end of string
   186 00000085 CD10                <1>     int 10h		; write character to screen.    
   187 00000087 46                  <1> 	inc si	     	; move to next character
   188 00000088 EBF5                <1>     jmp .lp		; loop
   189 0000008A C3                  <1> .done: ret
   190                                      %include "source/pmode.asm"
   191                              <1> [BITS 16]
   192                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   193                              <1> ;	16-bit real mode
   194                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   195                              <1> 
   196                              <1> pmode:
   197 0000008B 6631C0              <1> 	xor eax, eax
   198 0000008E 6631DB              <1> 	xor ebx, ebx
   199 00000091 6631C9              <1> 	xor ecx, ecx
   200 00000094 6631D2              <1> 	xor edx, edx
   201 00000097 6631F6              <1> 	xor esi, esi
   202 0000009A 6631FF              <1> 	xor edi, edi
   203 0000009D BA9200              <1> 	mov dx, 0x92
   204 000000A0 EC                  <1> 	in al, dx	;;A20
   205 000000A1 0C02                <1> 	or al, 2
   206 000000A3 EE                  <1> 	out dx, al
   207 000000A4 8CCB                <1> 	mov bx,cs		; EBX=segment
   208 000000A6 66C1E304            <1> 	shl ebx,4		;	<< 4
   209 000000AA 67668D03            <1> 	lea eax,[ebx]		; EAX=linear address of segment base
   210 000000AE A3[7E03]            <1> 	mov [gdt2 + 2],ax
   211 000000B1 A3[8603]            <1> 	mov [gdt3 + 2],ax
   212 000000B4 66C1E810            <1> 	shr eax,16
   213 000000B8 A2[8003]            <1> 	mov [gdt2 + 4],al
   214 000000BB A2[8803]            <1> 	mov [gdt3 + 4],al
   215 000000BE 8826[8303]          <1> 	mov [gdt2 + 7],ah
   216 000000C2 8826[8B03]          <1> 	mov [gdt3 + 7],ah
   217                              <1> 
   218 000000C6 66B8[E40F0100]      <1> 	mov eax, initialstack
   219 000000CC 660306[4502]        <1> 	add eax, [newcodecache]
   220 000000D1 A3[7603]            <1> 	mov [gdts + 2],ax
   221 000000D4 66C1E810            <1> 	shr eax, 16
   222 000000D8 A2[7803]            <1> 	mov [gdts + 4],al
   223 000000DB 8826[7B03]          <1> 	mov [gdts + 7], ah
   224                              <1> 	
   225 000000DF 66A1[4502]          <1> 	mov eax, [newcodecache]
   226 000000E3 A3[8E03]            <1> 	mov [gdt4 + 2],ax
   227 000000E6 A3[9603]            <1> 	mov [gdt5 + 2],ax
   228 000000E9 A3[9E03]            <1> 	mov [gdtv8086 + 2], ax
   229 000000EC A3[A603]            <1> 	mov [gdtv80862 + 2], ax
   230 000000EF 66C1E810            <1> 	shr eax,16
   231 000000F3 A2[9003]            <1> 	mov [gdt4 + 4],al
   232 000000F6 A2[9803]            <1> 	mov [gdt5 + 4],al
   233 000000F9 A2[A003]            <1> 	mov [gdtv8086 + 4],al
   234 000000FC A2[A803]            <1> 	mov [gdtv80862 + 4],al
   235 000000FF 8826[9303]          <1> 	mov [gdt4 + 7],ah
   236 00000103 8826[9B03]          <1> 	mov [gdt5 + 7],ah
   237 00000107 8826[A303]          <1> 	mov [gdtv8086 + 7],ah
   238 0000010B 8826[AB03]          <1> 	mov [gdtv80862 + 7],ah
   239                              <1> 	
   240 0000010F 66B800004000        <1> 	mov eax, dosprogloc
   241 00000115 660306[4502]        <1> 	add eax, [newcodecache]
   242 0000011A A3[AE03]            <1> 	mov [gdtdos + 2],ax
   243 0000011D A3[B603]            <1> 	mov [gdtdos2 + 2],ax
   244 00000120 66C1E810            <1> 	shr eax,16
   245 00000124 A2[B003]            <1> 	mov [gdtdos + 4],al
   246 00000127 A2[B803]            <1> 	mov [gdtdos2 + 4],al
   247 0000012A 8826[B303]          <1> 	mov [gdtdos + 7],ah
   248 0000012E 8826[BB03]          <1> 	mov [gdtdos2 + 7],ah
   249                              <1> 	
   250                              <1> ; fix up gdt and idt
   251 00000132 67668D83[64030000]  <1> 	lea eax,[ebx + gdt]	; EAX=linear address of gdt
   252 0000013A 66A3[5A03]          <1> 	mov [gdtr + 2],eax
   253 0000013E 67668D83[BC030000]  <1> 	lea eax,[ebx + idt]	; EAX=linear address of idt
   254 00000146 66A3[6003]          <1> 	mov [idtr + 2],eax
   255 0000014A FA                  <1> 	cli
   256 0000014B 0F0116[5803]        <1> 	lgdt [gdtr]
   257 00000150 0F011E[5E03]        <1> 	lidt [idtr]
   258 00000155 6631DB              <1> 	xor ebx, ebx
   259 00000158 8CDB                <1> 	mov bx, ds
   260 0000015A 66891E[4102]        <1> 	mov [basecache], ebx
   261 0000015F 0F20C0              <1> 	mov eax,cr0
   262 00000162 0C01                <1> 	or al,1
   263 00000164 0F22C0              <1> 	mov cr0,eax
   264 00000167 EA[6C01]1800        <1> 	jmp SYS_CODE_SEL:do_pm
   265                              <1> [BITS 32]
   266                              <1> do_pm:
   267 0000016C 31C0                <1> 	xor eax, eax
   268 0000016E 66B82000            <1> 	mov ax, SYS_DATA_SEL
   269 00000172 8ED8                <1> 	mov ds, ax
   270 00000174 8EC0                <1> 	mov es, ax
   271 00000176 8EE0                <1> 	mov fs, ax
   272 00000178 66B83000            <1> 	mov ax, NEW_DATA_SEL
   273 0000017C 8EE8                <1> 	mov gs, ax
   274                              <1> 	
   275                              <1> copykernel:
   276 0000017E 648B06              <1> 	mov eax, [fs:esi]
   277 00000181 658906              <1> 	mov [gs:esi], eax
   278 00000184 81C604000000        <1> 	add esi, 4
   279 0000018A 81FE[E40F0100]      <1> 	cmp esi, bsscopy
   280 00000190 72EC                <1> 	jb copykernel
   281 00000192 EA[99010000]2800    <1> 	jmp NEW_CODE_SEL:done_copy
   282                              <1> 	
   283                              <1> done_copy:
   284 00000199 66B83000            <1> 	mov ax, NEW_DATA_SEL	;;these MUST be setup AFTER the kernel switches places!!!
   285 0000019D 8ED8                <1> 	mov ds, ax
   286 0000019F 8EC0                <1> 	mov es, ax
   287 000001A1 8EE0                <1> 	mov fs, ax
   288                              <1> 	;mov ax, STACK_SEL
   289 000001A3 8ED0                <1> 	mov ss, ax
   290 000001A5 BC[841F0100]        <1> 	mov esp, stackend
   291 000001AA 66B82000            <1> 	mov ax, SYS_DATA_SEL
   292 000001AE 8EE8                <1> 	mov gs, ax
   293                              <1> 	
   294 000001B0 E865600000          <1> 	call initialize	;initialize drivers
   295                              <1> 	
   296 000001B5 A1[45020000]        <1> 	mov eax, [newcodecache]
   297 000001BA C1E804              <1> 	shr eax, 4
   298 000001BD A3[41020000]        <1> 	mov [basecache], eax
   299                              <1> 	
   300 000001C2 BE[32443B00]        <1> 	mov esi, bssend
   301 000001C7 31C0                <1> 	xor eax, eax
   302                              <1> clearkernelbuffers:
   303 000001C9 8906                <1> 	mov [esi], eax
   304 000001CB 81EE04000000        <1> 	sub esi, 4
   305 000001D1 81FE[E40F0100]      <1> 	cmp esi, bsscopy
   306 000001D7 77F0                <1> 	ja clearkernelbuffers
   307 000001D9 FB                  <1> 	sti
   308                              <1> 
   309                              <1> getmemoryspace:
   310 000001DA BE[A28B0000]        <1> 	mov esi, memlistbuf
   311 000001DF 31FF                <1> 	xor edi, edi
   312 000001E1 668B3D[E28D0000]    <1> 	mov di, [memlistend]
   313 000001E8 01F7                <1> 	add edi, esi
   314 000001EA 31C0                <1> 	xor eax, eax
   315                              <1> memoryspaceaddition:
   316 000001EC 39FE                <1> 	cmp esi, edi
   317 000001EE 7322                <1> 	jae finishedmemspacecalc
   318 000001F0 81C608000000        <1> 	add esi, 8
   319 000001F6 8B0E                <1> 	mov ecx, [esi]
   320 000001F8 81C608000000        <1> 	add esi, 8
   321 000001FE 8B1E                <1> 	mov ebx, [esi]
   322 00000200 81C608000000        <1> 	add esi, 8
   323 00000206 81FB01000000        <1> 	cmp ebx, 1
   324 0000020C 75DE                <1> 	jne memoryspaceaddition
   325 0000020E 01C8                <1> 	add eax, ecx
   326 00000210 EBDA                <1> 	jmp memoryspaceaddition
   327                              <1> finishedmemspacecalc:
   328 00000212 A3[56020000]        <1> 	mov [memoryspace], eax
   329                              <1> %ifdef gui.included
   330 00000217 803D[9C8B0000]00    <1> 	cmp byte [guion], 0
   331 0000021E 741C                <1> 	je normalstartup
   332 00000220 8B1D[41020000]      <1> 	mov ebx, [basecache]
   333 00000226 C1E304              <1> 	shl ebx, 4
   334 00000229 8B3D[08580000]      <1> 	mov edi, [physbaseptr]
   335 0000022F 29DF                <1> 	sub edi, ebx
   336 00000231 893D[08580000]      <1> 	mov [physbaseptr], edi
   337 00000237 E9A9650000          <1> 	jmp guiboot
   338                              <1> %endif
   339                              <1> normalstartup:
   340 0000023C E9F0280000          <1> 	jmp os
   341                              <1> 	
   342 00000241 00000000            <1> basecache dd 0
   343 00000245 00001000            <1> newcodecache dd 0x100000
   344                              <1> 
   345 00000249 00                  <1> testingcpuspeed db 0
   346 0000024A 00000000            <1> cpuspeedperint dd 0
   347 0000024E 0000000000000000    <1> cpuclocksperint dd 0,0
   348 00000256 00000000            <1> memoryspace dd 0
   349 0000025A 7D0A                <1> pitdiv dw 2685
   350 0000025C 2E562200            <1> timeinterval dd 2250286
   351 00000260 00000000            <1> timeseconds dd 0
   352 00000264 00000000            <1> timenanoseconds dd 0
   353 00000268 00                  <1> soundon db 0
   354 00000269 0000                <1> soundrepititions dw 0
   355 0000026B 00000000            <1> soundpos dd 0
   356 0000026F 00000000            <1> soundendpos dd 0
   357                              <1> 
   358                              <1> cpuspeedend:
   359 00000273 C605[49020000]00    <1> 	mov byte [testingcpuspeed], 0
   360 0000027A A3[4A020000]        <1> 	mov [cpuspeedperint], eax
   361 0000027F B8[F44E0000]        <1> 	mov eax, cpuspeedloopend
   362 00000284 890424              <1> 	mov [esp], eax
   363 00000287 E9BC000000          <1> 	jmp handled
   364                              <1> 
   365                              <1> ;if using the rtc, the default frequency yeilds a period of 976562.5ns
   366                              <1> ;if using the pit, div=451 is 377981.0004, div=5370 is 4500572.00007ns
   367                              <1> ;div=55483 is 46500044.000006ns, div=2685 is 2250286.00004ns, div=902 is 755962.0008
   368                              <1> 
   369                              <1> pitinterrupt: ;this controls threading
   370 0000028C FA                  <1> 	cli
   371 0000028D 803D[49020000]01    <1> 	cmp byte [testingcpuspeed], 1	;check to see if the cpu speed test is running
   372 00000294 74DD                <1> 	je cpuspeedend
   373                              <1> 		
   374 00000296 E886000000          <1> 	call timekeeper ;this updates the internal time
   375                              <1> 	
   376 0000029B 803D[68020000]01    <1> 	cmp byte [soundon], 1
   377 000002A2 0F8444590000        <1> 	je near PCSpeakerRAW
   378                              <1> timerinterrupt:	;put this into the interrupt handler that controls threading
   379                              <1> %ifdef threads.included
   380 000002A8 803D[E0670000]01    <1> 	cmp byte [threadson], 1
   381 000002AF 0F84CB640000        <1> 	je near threadswitch
   382                              <1> %endif
   383                              <1> keyinterrupt:		;checks for escape, if pressed, it quits the program currently running
   384 000002B5 803D[E0670000]00    <1> 	cmp byte [threadson], 0
   385 000002BC 0F8486000000        <1> 	je near handled
   386                              <1> %ifdef io.serial
   387                              <1> 	jmp handled
   388                              <1> %else
   389 000002C2 60                  <1> 	pusha
   390 000002C3 E464                <1> 	in al, 64h
   391 000002C5 A820                <1> 	test al, 20h
   392 000002C7 0F8579000000        <1> 	jnz near handled2
   393 000002CD E460                <1> 	in al, 60h
   394 000002CF 3C01                <1> 	cmp al, 1		;escape
   395 000002D1 7405                <1> 	je userint
   396 000002D3 E96E000000          <1> 	jmp handled2
   397                              <1> ;	cmp al, 0x57
   398                              <1> ;	jne near handled2
   399                              <1> ;pauseint:	;F11 pauses
   400                              <1> ;	in al, 64h
   401                              <1> ;	test al, 20h
   402                              <1> ;	jnz pauseint
   403                              <1> ;	in al, 60h
   404                              <1> ;	cmp al, 0xD7
   405                              <1> ;	jne pauseint
   406                              <1> ;	mov esi, pausemsg
   407                              <1> ;	call print
   408                              <1> ;	cli
   409                              <1> ;pauselp:
   410                              <1> ;	nop
   411                              <1> ;	in al, 64h
   412                              <1> ;	test al, 20h
   413                              <1> ;	jnz pauselp
   414                              <1> ;	in al, 60h
   415                              <1> ;	cmp al, 0x57
   416                              <1> ;	je near handled2
   417                              <1> ;	jmp pauselp
   418                              <1> ;pausemsg db "Paused",10,0
   419                              <1> userint:
   420 000002D8 31C0                <1> 	xor eax, eax
   421 000002DA 3905[E41F0100]      <1> 	cmp [sigtable], eax
   422 000002E0 7411                <1> 	je .nosighook
   423 000002E2 8B1D[E41F0100]      <1> 	mov ebx, [sigtable]
   424 000002E8 895C2420            <1> 	mov [esp + 32], ebx
   425                              <1> ;	mov [sigtable], eax
   426 000002EC B020                <1> 	mov al, 0x20
   427 000002EE E620                <1> 	out 0x20, al
   428 000002F0 61                  <1> 	popa
   429 000002F1 FB                  <1> 	sti
   430 000002F2 CF                  <1> 	iret
   431                              <1> .nosighook:
   432                              <1> 		;UNMASK ALL INTS
   433 000002F3 E621                <1> 	out 0x21, al
   434 000002F5 E6A1                <1> 	out 0xA1, al
   435 000002F7 B020                <1> 	mov al, 0x20
   436 000002F9 E6A0                <1> 	out 0xA0, al
   437 000002FB E620                <1> 	out 0x20, al
   438                              <1> 		;RESET PIT DIVISOR
   439 000002FD 66A1[5A020000]      <1> 	mov ax, [pitdiv]
   440 00000303 E640                <1> 	out 0x40, al
   441 00000305 66C1C008            <1> 	rol ax, 8
   442 00000309 E640                <1> 	out 0x40, al
   443                              <1> 		;RESET PIC
   444 0000030B B020                <1> 	mov al, 0x20
   445 0000030D E620                <1> 	out 0x20, al
   446 0000030F 61                  <1> 	popa
   447 00000310 FB                  <1> 	sti
   448 00000311 BC[841F0100]        <1> 	mov esp, stackend ;reset stack
   449 00000316 E96F290000          <1> 	jmp returnfromexp
   450                              <1> %endif
   451 0000031B 0A                  <1> rtcrate db 10
   452                              <1> rtcint:	;this runs at 64Hz which is perfect for 60Hz displays
   453                              <1> %ifdef io.serial
   454                              <1> %else
   455                              <1> %ifdef terminal.vsync
   456                              <1> 	cli
   457                              <1> 	cmp byte [termcopyneeded], 0
   458                              <1> 	je .nocopy
   459                              <1> 	call newtermcopy
   460                              <1> .nocopy
   461                              <1> 	push eax
   462                              <1> 	mov al, 0xC
   463                              <1> 	out 0x70, al
   464                              <1> 	in al, 0x71
   465                              <1> 	pop eax
   466                              <1> 	sti
   467                              <1> %endif
   468                              <1> %endif
   469 0000031C E92E000000          <1> 	jmp handled4
   470                              <1> %ifdef rtl8139.included
   471                              <1> rtl8139.irq:
   472                              <1> 	cli
   473                              <1> 	push edx
   474                              <1> 	push eax
   475                              <1> 	mov edx, [rtl8139.basenicaddr]
   476                              <1> 	add edx, rtl8139.ISR
   477                              <1> 	xor eax, eax
   478                              <1> 	in ax, dx
   479                              <1> 	out dx, ax
   480                              <1> 	pop eax
   481                              <1> 	pop edx
   482                              <1> 	sti
   483                              <1> 	jmp handled4
   484                              <1> %endif
   485                              <1> %ifdef sound.included
   486                              <1> sblaster.irq:
   487                              <1> 	cli
   488                              <1> 	pusha
   489                              <1> 	cmp byte [SoundBlaster], 1
   490                              <1> 	je near sblaster.cont
   491                              <1> 	jmp handled2
   492                              <1> %endif
   493                              <1> 	
   494                              <1> timekeeper:
   495 00000321 50                  <1> 	push eax
   496 00000322 A1[64020000]        <1> 	mov eax, [timenanoseconds]
   497 00000327 0305[5C020000]      <1> 	add eax, [timeinterval]
   498 0000032D 3D00CA9A3B          <1> 	cmp eax, 1000000000
   499 00000332 720B                <1> 	jb nonanosecondrollover
   500 00000334 FF05[60020000]      <1> 	inc dword [timeseconds]
   501 0000033A 2D00CA9A3B          <1> 	sub eax, 1000000000
   502                              <1> 	%ifdef gui.time
   503                              <1> 		;REMOVE THIS IT IS NOT EFFICIENT
   504                              <1> 		cmp byte [guion], 1
   505                              <1> 		jne nonanosecondrollover
   506                              <1> 		cmp dword [dragging], 0
   507                              <1> 		jne nonanosecondrollover
   508                              <1> 		pusha
   509                              <1> 		call guitime
   510                              <1> 		popa
   511                              <1> 	%endif
   512                              <1> nonanosecondrollover:
   513 0000033F A3[64020000]        <1> 	mov [timenanoseconds], eax
   514 00000344 58                  <1> 	pop eax
   515 00000345 C3                  <1> 	ret
   516                              <1> 	
   517                              <1> handled2:
   518 00000346 61                  <1> 	popa
   519                              <1> handled3:
   520 00000347 FB                  <1> 	sti
   521                              <1> handled:
   522 00000348 50                  <1> 	push eax
   523 00000349 B020                <1> 	mov al, 0x20
   524 0000034B E620                <1> 	out 0x20, al
   525 0000034D 58                  <1> 	pop eax
   526 0000034E CF                  <1> 	iret
   527                              <1> handled4:
   528 0000034F 50                  <1> 	push eax
   529 00000350 B020                <1> 	mov al, 0x20
   530 00000352 E6A0                <1> 	out 0xA0, al
   531 00000354 E620                <1> 	out 0x20, al
   532 00000356 58                  <1> 	pop eax
   533 00000357 CF                  <1> 	iret
   534                              <1> [BITS 16]
   535                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   536                              <1> ;	16-bit limit/32-bit linear base address of GDT and IDT
   537                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   538 00000358 5700                <1> gdtr:	dw gdt_end - gdt - 1	; GDT limit
   539 0000035A 00000000            <1> 	dd 0    		; filled with linear, physical address of GDT
   540                              <1> 
   541 0000035E FF07                <1> idtr:	dw idt_end - idt - 1	; IDT limit
   542 00000360 00000000            <1> 	dd 0			; filled with linear, physical address of IDT
   543                              <1> 
   544                              <1> 
   545 00000364 0000                <1> gdt:	dw 0			; limit 15:0
   546 00000366 0000                <1> 	dw 0			; base 15:0
   547 00000368 00                  <1> 	db 0			; base 23:16
   548 00000369 00                  <1> 	db 0			; type
   549 0000036A 00                  <1> 	db 0			; limit 19:16, flags
   550 0000036B 00                  <1> 	db 0			; base 31:24
   551                              <1> ; linear data segment descriptor
   552                              <1> LINEAR_SEL	equ	$-gdt
   553 0000036C FFFF                <1> 	dw 0xFFFF		; limit 0xFFFFF
   554 0000036E 0000                <1> 	dw 0			; base for this one is always 0
   555 00000370 00                  <1> 	db 0
   556 00000371 92                  <1> 	db 0x92			; present, ring 0, data, expand-up, writable
   557 00000372 CF                  <1> 	db 0xCF			; page-granular, 32-bit
   558 00000373 00                  <1> 	db 0
   559                              <1> STACK_SEL	equ $-gdt
   560 00000374 0200                <1> gdts:	dw 2;(stackend)/4096
   561 00000376 0000                <1> 	dw 0
   562 00000378 00                  <1> 	db 0
   563 00000379 92                  <1> 	db 0x92
   564 0000037A CF                  <1> 	db 0xCF
   565 0000037B 00                  <1> 	db 0
   566                              <1> ; code segment descriptor
   567                              <1> SYS_CODE_SEL	equ	$-gdt
   568 0000037C FFFF                <1> gdt2:	dw 0xFFFF
   569 0000037E 0000                <1> 	dw 0			; (base gets set above)
   570 00000380 00                  <1> 	db 0
   571 00000381 9A                  <1> 	db 0x9A			; present, ring 0, code, non-conforming, readable
   572 00000382 CF                  <1> 	db 0xCF
   573 00000383 00                  <1> 	db 0
   574                              <1> ; data segment descriptor
   575                              <1> SYS_DATA_SEL	equ	$-gdt
   576 00000384 FFFF                <1> gdt3:	dw 0xFFFF
   577 00000386 0000                <1> 	dw 0			; (base gets set above)
   578 00000388 00                  <1> 	db 0
   579 00000389 92                  <1> 	db 0x92			; present, ring 0, data, expand-up, writable
   580 0000038A CF                  <1> 	db 0xCF
   581 0000038B 00                  <1> 	db 0
   582                              <1> NEW_CODE_SEL	equ	$-gdt
   583 0000038C FFFF                <1> gdt4:	dw 0xFFFF
   584 0000038E 0000                <1> 	dw 0			; (base gets set above)
   585 00000390 00                  <1> 	db 0
   586 00000391 9A                  <1> 	db 0x9A			; present, ring 0, code, non-conforming, readable
   587 00000392 CF                  <1> 	db 0xCF
   588 00000393 00                  <1> 	db 0
   589                              <1> ; data segment descriptor
   590                              <1> NEW_DATA_SEL	equ	$-gdt
   591 00000394 FFFF                <1> gdt5:	dw 0xFFFF
   592 00000396 0000                <1> 	dw 0			; (base gets set above)
   593 00000398 00                  <1> 	db 0
   594 00000399 92                  <1> 	db 0x92			; present, ring 0, data, expand-up, writable
   595 0000039A CF                  <1> 	db 0xCF
   596 0000039B 00                  <1> 	db 0
   597                              <1> V8086_CODE_SEL	equ $-gdt
   598 0000039C FFFF                <1> gdtv8086: dw 0xFFFF
   599 0000039E 0000                <1> 	dw 0
   600 000003A0 00                  <1> 	db 0
   601 000003A1 9A                  <1> 	db 0x9A
   602 000003A2 8F                  <1> 	db 0x8F
   603 000003A3 00                  <1> 	db 0
   604                              <1> V8086_DATA_SEL	equ $-gdt
   605 000003A4 FFFF                <1> gdtv80862: dw 0xFFFF
   606 000003A6 0000                <1> 	dw 0
   607 000003A8 00                  <1> 	db 0
   608 000003A9 92                  <1> 	db 0x92
   609 000003AA 8F                  <1> 	db 0x8F
   610 000003AB 00                  <1> 	db 0
   611                              <1> DOS_CODE_SEL	equ $-gdt	;this gives dos programs complete access to one megabyte at the beginning of memory
   612 000003AC 0001                <1> gdtdos:	dw 256	;give it 1 MB
   613 000003AE 0000                <1> 	dw 0
   614 000003B0 00                  <1> 	db 0
   615 000003B1 9A                  <1> 	db 0x9A
   616 000003B2 8F                  <1> 	db 0x8F ;16 bit
   617 000003B3 00                  <1> 	db 0
   618                              <1> DOS_DATA_SEL 	equ $-gdt
   619 000003B4 0001                <1> gdtdos2:	dw 256
   620 000003B6 0000                <1> 	dw 0
   621 000003B8 00                  <1> 	db 0
   622 000003B9 92                  <1> 	db 0x92
   623 000003BA 8F                  <1> 	db 0x8F ;16 bit
   624 000003BB 00                  <1> 	db 0
   625                              <1> gdt_end:
   626                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   627                              <1> ;	interrupt descriptor table (IDT)
   628                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   629                              <1> ; 32 reserved interrupts:
   630                              <1> idt:	
   631                              <1> %assign i 0
   632                              <1> %rep    8
   633                              <1> 		dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   634                              <1> %assign i i+1
   635                              <1> %endrep
   636 000003BC [DD0C]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   637                              <2> %assign i i+1
   638 000003C4 [E90C]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   639                              <2> %assign i i+1
   640 000003CC [F50C]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   641                              <2> %assign i i+1
   642 000003D4 [010D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   643                              <2> %assign i i+1
   644 000003DC [0D0D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   645                              <2> %assign i i+1
   646 000003E4 [190D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   647                              <2> %assign i i+1
   648 000003EC [250D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   649                              <2> %assign i i+1
   650 000003F4 [310D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   651                              <2> %assign i i+1
   652 000003FC [3D0D]1800008E0000  <1> 		dw unhand + 8*12,SYS_CODE_SEL,0x8E00,0	;double fault handler in original memory
   653                              <1> %assign i 9
   654                              <1> %rep    23
   655                              <1> 		dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   656                              <1> %assign i i+1
   657                              <1> %endrep
   658 00000404 [490D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   659                              <2> %assign i i+1
   660 0000040C [550D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   661                              <2> %assign i i+1
   662 00000414 [610D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   663                              <2> %assign i i+1
   664 0000041C [6D0D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   665                              <2> %assign i i+1
   666 00000424 [790D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   667                              <2> %assign i i+1
   668 0000042C [850D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   669                              <2> %assign i i+1
   670 00000434 [910D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   671                              <2> %assign i i+1
   672 0000043C [9D0D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   673                              <2> %assign i i+1
   674 00000444 [A90D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   675                              <2> %assign i i+1
   676 0000044C [B50D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   677                              <2> %assign i i+1
   678 00000454 [C10D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   679                              <2> %assign i i+1
   680 0000045C [CD0D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   681                              <2> %assign i i+1
   682 00000464 [D90D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   683                              <2> %assign i i+1
   684 0000046C [E50D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   685                              <2> %assign i i+1
   686 00000474 [F10D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   687                              <2> %assign i i+1
   688 0000047C [FD0D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   689                              <2> %assign i i+1
   690 00000484 [090E]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   691                              <2> %assign i i+1
   692 0000048C [150E]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   693                              <2> %assign i i+1
   694 00000494 [210E]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   695                              <2> %assign i i+1
   696 0000049C [2D0E]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   697                              <2> %assign i i+1
   698 000004A4 [390E]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   699                              <2> %assign i i+1
   700 000004AC [450E]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   701                              <2> %assign i i+1
   702 000004B4 [510E]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   703                              <2> %assign i i+1
   704 000004BC [F729]2800008E0000  <1> 		dw int20h,NEW_CODE_SEL,0x8E00,0
   705 000004C4 [FB29]2800008E0000  <1> 		dw int21h,NEW_CODE_SEL,0x8E00,0
   706                              <1> %assign i 0x22
   707                              <1> %rep 14
   708                              <1> 		dw handled,NEW_CODE_SEL,0x8E00,0
   709                              <1> %assign i +1
   710                              <1> %endrep
   711 000004CC [4803]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   712                              <2> %assign i +1
   713 000004D4 [4803]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   714                              <2> %assign i +1
   715 000004DC [4803]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   716                              <2> %assign i +1
   717 000004E4 [4803]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   718                              <2> %assign i +1
   719 000004EC [4803]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   720                              <2> %assign i +1
   721 000004F4 [4803]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   722                              <2> %assign i +1
   723 000004FC [4803]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   724                              <2> %assign i +1
   725 00000504 [4803]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   726                              <2> %assign i +1
   727 0000050C [4803]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   728                              <2> %assign i +1
   729 00000514 [4803]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   730                              <2> %assign i +1
   731 0000051C [4803]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   732                              <2> %assign i +1
   733 00000524 [4803]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   734                              <2> %assign i +1
   735 0000052C [4803]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   736                              <2> %assign i +1
   737 00000534 [4803]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   738                              <2> %assign i +1
   739                              <1> ;INT 30h for os use and 3rd party use:
   740 0000053C [D51B]2800008E0000  <1> 		dw newints,NEW_CODE_SEL,0x8E00,0
   741                              <1> %assign i 0x31
   742                              <1> %rep 15
   743                              <1> 		dw handled,NEW_CODE_SEL,0x8E00,0
   744                              <1> %assign i +1
   745                              <1> %endrep
   746 00000544 [4803]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   747                              <2> %assign i +1
   748 0000054C [4803]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   749                              <2> %assign i +1
   750 00000554 [4803]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   751                              <2> %assign i +1
   752 0000055C [4803]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   753                              <2> %assign i +1
   754 00000564 [4803]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   755                              <2> %assign i +1
   756 0000056C [4803]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   757                              <2> %assign i +1
   758 00000574 [4803]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   759                              <2> %assign i +1
   760 0000057C [4803]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   761                              <2> %assign i +1
   762 00000584 [4803]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   763                              <2> %assign i +1
   764 0000058C [4803]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   765                              <2> %assign i +1
   766 00000594 [4803]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   767                              <2> %assign i +1
   768 0000059C [4803]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   769                              <2> %assign i +1
   770 000005A4 [4803]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   771                              <2> %assign i +1
   772 000005AC [4803]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   773                              <2> %assign i +1
   774 000005B4 [4803]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   775                              <2> %assign i +1
   776                              <1> ;and here we are at 0x40
   777                              <1> ;here are all the irq's
   778 000005BC [8C02]2800008E0000  <1> 		dw pitinterrupt,NEW_CODE_SEL,0x8E00,0 ;IRQ 0 = PIT
   779 000005C4 [4803]2800008E0000  <1> 		dw handled,NEW_CODE_SEL,0x8E00,0 ;IRQ 1 = keyboard
   780 000005CC [4803]2800008E0000  <1> 		dw handled,NEW_CODE_SEL,0x8E00,0 ;IRQ 2
   781 000005D4 [4803]2800008E0000  <1> 		dw handled,NEW_CODE_SEL,0x8E00,0 ;IRQ 3
   782 000005DC [4803]2800008E0000  <1> 		dw handled,NEW_CODE_SEL,0x8E00,0 ;IRQ 4
   783                              <1> 	%ifdef sound.included
   784                              <1> 		dw sblaster.irq,NEW_CODE_SEL,0x8E00,0 ;IRQ 5 = default SoundBlaster
   785                              <1> 	%else
   786 000005E4 [4803]2800008E0000  <1> 		dw handled,NEW_CODE_SEL,0x8E00,0 ;IRQ 5
   787                              <1> 	%endif
   788 000005EC [4803]2800008E0000  <1> 		dw handled,NEW_CODE_SEL,0x8E00,0 ;IRQ 6
   789 000005F4 [4803]2800008E0000  <1> 		dw handled,NEW_CODE_SEL,0x8E00,0 ;IRQ 7
   790 000005FC [1C03]2800008E0000  <1> 		dw rtcint,NEW_CODE_SEL,0x8E00,0 ;IRQ 8 = RTC
   791 00000604 [4F03]2800008E0000  <1> 		dw handled4,NEW_CODE_SEL,0x8E00,0 ;IRQ 9 = default NE2000
   792 0000060C [4F03]2800008E0000  <1> 		dw handled4,NEW_CODE_SEL,0x8E00,0 ;IRQ 10
   793                              <1> 	%ifdef rtl8139.included
   794                              <1> 		dw rtl8139.irq,NEW_CODE_SEL,0x8E00,0 ;IRQ 11 = default RTL8139
   795                              <1> 	%else
   796 00000614 [4F03]2800008E0000  <1> 		dw handled4,NEW_CODE_SEL,0x8E00,0 ;IRQ 11
   797                              <1> 	%endif
   798 0000061C [4F03]2800008E0000  <1> 		dw handled4,NEW_CODE_SEL,0x8E00,0 ;IRQ 12
   799 00000624 [4F03]2800008E0000  <1> 		dw handled4,NEW_CODE_SEL,0x8E00,0 ;IRQ 13
   800 0000062C [4F03]2800008E0000  <1> 		dw handled4,NEW_CODE_SEL,0x8E00,0 ;IRQ 14
   801 00000634 [4F03]2800008E0000  <1> 		dw handled4,NEW_CODE_SEL,0x8E00,0 ;IRQ 15
   802                              <1> ;This brings me up to 0x50
   803                              <1> %assign i 0x50
   804                              <1> %rep 176
   805                              <1> 		dw handled, NEW_CODE_SEL,0x8E00,0
   806                              <1> 		;dw unhand + i*12, NEW_CODE_SEL,0x8E00,0
   807                              <1> %assign i +1
   808                              <1> %endrep
   809 0000063C [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   810                              <2> 
   811                              <2> %assign i +1
   812 00000644 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   813                              <2> 
   814                              <2> %assign i +1
   815 0000064C [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   816                              <2> 
   817                              <2> %assign i +1
   818 00000654 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   819                              <2> 
   820                              <2> %assign i +1
   821 0000065C [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   822                              <2> 
   823                              <2> %assign i +1
   824 00000664 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   825                              <2> 
   826                              <2> %assign i +1
   827 0000066C [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   828                              <2> 
   829                              <2> %assign i +1
   830 00000674 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   831                              <2> 
   832                              <2> %assign i +1
   833 0000067C [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   834                              <2> 
   835                              <2> %assign i +1
   836 00000684 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   837                              <2> 
   838                              <2> %assign i +1
   839 0000068C [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   840                              <2> 
   841                              <2> %assign i +1
   842 00000694 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   843                              <2> 
   844                              <2> %assign i +1
   845 0000069C [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   846                              <2> 
   847                              <2> %assign i +1
   848 000006A4 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   849                              <2> 
   850                              <2> %assign i +1
   851 000006AC [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   852                              <2> 
   853                              <2> %assign i +1
   854 000006B4 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   855                              <2> 
   856                              <2> %assign i +1
   857 000006BC [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   858                              <2> 
   859                              <2> %assign i +1
   860 000006C4 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   861                              <2> 
   862                              <2> %assign i +1
   863 000006CC [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   864                              <2> 
   865                              <2> %assign i +1
   866 000006D4 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   867                              <2> 
   868                              <2> %assign i +1
   869 000006DC [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   870                              <2> 
   871                              <2> %assign i +1
   872 000006E4 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   873                              <2> 
   874                              <2> %assign i +1
   875 000006EC [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   876                              <2> 
   877                              <2> %assign i +1
   878 000006F4 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   879                              <2> 
   880                              <2> %assign i +1
   881 000006FC [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   882                              <2> 
   883                              <2> %assign i +1
   884 00000704 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   885                              <2> 
   886                              <2> %assign i +1
   887 0000070C [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   888                              <2> 
   889                              <2> %assign i +1
   890 00000714 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   891                              <2> 
   892                              <2> %assign i +1
   893 0000071C [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   894                              <2> 
   895                              <2> %assign i +1
   896 00000724 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   897                              <2> 
   898                              <2> %assign i +1
   899 0000072C [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   900                              <2> 
   901                              <2> %assign i +1
   902 00000734 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   903                              <2> 
   904                              <2> %assign i +1
   905 0000073C [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   906                              <2> 
   907                              <2> %assign i +1
   908 00000744 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   909                              <2> 
   910                              <2> %assign i +1
   911 0000074C [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   912                              <2> 
   913                              <2> %assign i +1
   914 00000754 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   915                              <2> 
   916                              <2> %assign i +1
   917 0000075C [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   918                              <2> 
   919                              <2> %assign i +1
   920 00000764 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   921                              <2> 
   922                              <2> %assign i +1
   923 0000076C [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   924                              <2> 
   925                              <2> %assign i +1
   926 00000774 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   927                              <2> 
   928                              <2> %assign i +1
   929 0000077C [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   930                              <2> 
   931                              <2> %assign i +1
   932 00000784 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   933                              <2> 
   934                              <2> %assign i +1
   935 0000078C [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   936                              <2> 
   937                              <2> %assign i +1
   938 00000794 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   939                              <2> 
   940                              <2> %assign i +1
   941 0000079C [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   942                              <2> 
   943                              <2> %assign i +1
   944 000007A4 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   945                              <2> 
   946                              <2> %assign i +1
   947 000007AC [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   948                              <2> 
   949                              <2> %assign i +1
   950 000007B4 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   951                              <2> 
   952                              <2> %assign i +1
   953 000007BC [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   954                              <2> 
   955                              <2> %assign i +1
   956 000007C4 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   957                              <2> 
   958                              <2> %assign i +1
   959 000007CC [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   960                              <2> 
   961                              <2> %assign i +1
   962 000007D4 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   963                              <2> 
   964                              <2> %assign i +1
   965 000007DC [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   966                              <2> 
   967                              <2> %assign i +1
   968 000007E4 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   969                              <2> 
   970                              <2> %assign i +1
   971 000007EC [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   972                              <2> 
   973                              <2> %assign i +1
   974 000007F4 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   975                              <2> 
   976                              <2> %assign i +1
   977 000007FC [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   978                              <2> 
   979                              <2> %assign i +1
   980 00000804 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   981                              <2> 
   982                              <2> %assign i +1
   983 0000080C [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   984                              <2> 
   985                              <2> %assign i +1
   986 00000814 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   987                              <2> 
   988                              <2> %assign i +1
   989 0000081C [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   990                              <2> 
   991                              <2> %assign i +1
   992 00000824 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   993                              <2> 
   994                              <2> %assign i +1
   995 0000082C [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   996                              <2> 
   997                              <2> %assign i +1
   998 00000834 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   999                              <2> 
  1000                              <2> %assign i +1
  1001 0000083C [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1002                              <2> 
  1003                              <2> %assign i +1
  1004 00000844 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1005                              <2> 
  1006                              <2> %assign i +1
  1007 0000084C [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1008                              <2> 
  1009                              <2> %assign i +1
  1010 00000854 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1011                              <2> 
  1012                              <2> %assign i +1
  1013 0000085C [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1014                              <2> 
  1015                              <2> %assign i +1
  1016 00000864 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1017                              <2> 
  1018                              <2> %assign i +1
  1019 0000086C [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1020                              <2> 
  1021                              <2> %assign i +1
  1022 00000874 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1023                              <2> 
  1024                              <2> %assign i +1
  1025 0000087C [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1026                              <2> 
  1027                              <2> %assign i +1
  1028 00000884 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1029                              <2> 
  1030                              <2> %assign i +1
  1031 0000088C [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1032                              <2> 
  1033                              <2> %assign i +1
  1034 00000894 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1035                              <2> 
  1036                              <2> %assign i +1
  1037 0000089C [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1038                              <2> 
  1039                              <2> %assign i +1
  1040 000008A4 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1041                              <2> 
  1042                              <2> %assign i +1
  1043 000008AC [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1044                              <2> 
  1045                              <2> %assign i +1
  1046 000008B4 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1047                              <2> 
  1048                              <2> %assign i +1
  1049 000008BC [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1050                              <2> 
  1051                              <2> %assign i +1
  1052 000008C4 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1053                              <2> 
  1054                              <2> %assign i +1
  1055 000008CC [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1056                              <2> 
  1057                              <2> %assign i +1
  1058 000008D4 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1059                              <2> 
  1060                              <2> %assign i +1
  1061 000008DC [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1062                              <2> 
  1063                              <2> %assign i +1
  1064 000008E4 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1065                              <2> 
  1066                              <2> %assign i +1
  1067 000008EC [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1068                              <2> 
  1069                              <2> %assign i +1
  1070 000008F4 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1071                              <2> 
  1072                              <2> %assign i +1
  1073 000008FC [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1074                              <2> 
  1075                              <2> %assign i +1
  1076 00000904 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1077                              <2> 
  1078                              <2> %assign i +1
  1079 0000090C [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1080                              <2> 
  1081                              <2> %assign i +1
  1082 00000914 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1083                              <2> 
  1084                              <2> %assign i +1
  1085 0000091C [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1086                              <2> 
  1087                              <2> %assign i +1
  1088 00000924 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1089                              <2> 
  1090                              <2> %assign i +1
  1091 0000092C [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1092                              <2> 
  1093                              <2> %assign i +1
  1094 00000934 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1095                              <2> 
  1096                              <2> %assign i +1
  1097 0000093C [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1098                              <2> 
  1099                              <2> %assign i +1
  1100 00000944 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1101                              <2> 
  1102                              <2> %assign i +1
  1103 0000094C [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1104                              <2> 
  1105                              <2> %assign i +1
  1106 00000954 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1107                              <2> 
  1108                              <2> %assign i +1
  1109 0000095C [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1110                              <2> 
  1111                              <2> %assign i +1
  1112 00000964 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1113                              <2> 
  1114                              <2> %assign i +1
  1115 0000096C [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1116                              <2> 
  1117                              <2> %assign i +1
  1118 00000974 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1119                              <2> 
  1120                              <2> %assign i +1
  1121 0000097C [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1122                              <2> 
  1123                              <2> %assign i +1
  1124 00000984 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1125                              <2> 
  1126                              <2> %assign i +1
  1127 0000098C [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1128                              <2> 
  1129                              <2> %assign i +1
  1130 00000994 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1131                              <2> 
  1132                              <2> %assign i +1
  1133 0000099C [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1134                              <2> 
  1135                              <2> %assign i +1
  1136 000009A4 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1137                              <2> 
  1138                              <2> %assign i +1
  1139 000009AC [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1140                              <2> 
  1141                              <2> %assign i +1
  1142 000009B4 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1143                              <2> 
  1144                              <2> %assign i +1
  1145 000009BC [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1146                              <2> 
  1147                              <2> %assign i +1
  1148 000009C4 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1149                              <2> 
  1150                              <2> %assign i +1
  1151 000009CC [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1152                              <2> 
  1153                              <2> %assign i +1
  1154 000009D4 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1155                              <2> 
  1156                              <2> %assign i +1
  1157 000009DC [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1158                              <2> 
  1159                              <2> %assign i +1
  1160 000009E4 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1161                              <2> 
  1162                              <2> %assign i +1
  1163 000009EC [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1164                              <2> 
  1165                              <2> %assign i +1
  1166 000009F4 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1167                              <2> 
  1168                              <2> %assign i +1
  1169 000009FC [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1170                              <2> 
  1171                              <2> %assign i +1
  1172 00000A04 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1173                              <2> 
  1174                              <2> %assign i +1
  1175 00000A0C [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1176                              <2> 
  1177                              <2> %assign i +1
  1178 00000A14 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1179                              <2> 
  1180                              <2> %assign i +1
  1181 00000A1C [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1182                              <2> 
  1183                              <2> %assign i +1
  1184 00000A24 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1185                              <2> 
  1186                              <2> %assign i +1
  1187 00000A2C [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1188                              <2> 
  1189                              <2> %assign i +1
  1190 00000A34 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1191                              <2> 
  1192                              <2> %assign i +1
  1193 00000A3C [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1194                              <2> 
  1195                              <2> %assign i +1
  1196 00000A44 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1197                              <2> 
  1198                              <2> %assign i +1
  1199 00000A4C [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1200                              <2> 
  1201                              <2> %assign i +1
  1202 00000A54 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1203                              <2> 
  1204                              <2> %assign i +1
  1205 00000A5C [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1206                              <2> 
  1207                              <2> %assign i +1
  1208 00000A64 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1209                              <2> 
  1210                              <2> %assign i +1
  1211 00000A6C [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1212                              <2> 
  1213                              <2> %assign i +1
  1214 00000A74 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1215                              <2> 
  1216                              <2> %assign i +1
  1217 00000A7C [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1218                              <2> 
  1219                              <2> %assign i +1
  1220 00000A84 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1221                              <2> 
  1222                              <2> %assign i +1
  1223 00000A8C [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1224                              <2> 
  1225                              <2> %assign i +1
  1226 00000A94 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1227                              <2> 
  1228                              <2> %assign i +1
  1229 00000A9C [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1230                              <2> 
  1231                              <2> %assign i +1
  1232 00000AA4 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1233                              <2> 
  1234                              <2> %assign i +1
  1235 00000AAC [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1236                              <2> 
  1237                              <2> %assign i +1
  1238 00000AB4 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1239                              <2> 
  1240                              <2> %assign i +1
  1241 00000ABC [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1242                              <2> 
  1243                              <2> %assign i +1
  1244 00000AC4 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1245                              <2> 
  1246                              <2> %assign i +1
  1247 00000ACC [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1248                              <2> 
  1249                              <2> %assign i +1
  1250 00000AD4 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1251                              <2> 
  1252                              <2> %assign i +1
  1253 00000ADC [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1254                              <2> 
  1255                              <2> %assign i +1
  1256 00000AE4 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1257                              <2> 
  1258                              <2> %assign i +1
  1259 00000AEC [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1260                              <2> 
  1261                              <2> %assign i +1
  1262 00000AF4 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1263                              <2> 
  1264                              <2> %assign i +1
  1265 00000AFC [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1266                              <2> 
  1267                              <2> %assign i +1
  1268 00000B04 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1269                              <2> 
  1270                              <2> %assign i +1
  1271 00000B0C [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1272                              <2> 
  1273                              <2> %assign i +1
  1274 00000B14 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1275                              <2> 
  1276                              <2> %assign i +1
  1277 00000B1C [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1278                              <2> 
  1279                              <2> %assign i +1
  1280 00000B24 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1281                              <2> 
  1282                              <2> %assign i +1
  1283 00000B2C [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1284                              <2> 
  1285                              <2> %assign i +1
  1286 00000B34 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1287                              <2> 
  1288                              <2> %assign i +1
  1289 00000B3C [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1290                              <2> 
  1291                              <2> %assign i +1
  1292 00000B44 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1293                              <2> 
  1294                              <2> %assign i +1
  1295 00000B4C [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1296                              <2> 
  1297                              <2> %assign i +1
  1298 00000B54 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1299                              <2> 
  1300                              <2> %assign i +1
  1301 00000B5C [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1302                              <2> 
  1303                              <2> %assign i +1
  1304 00000B64 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1305                              <2> 
  1306                              <2> %assign i +1
  1307 00000B6C [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1308                              <2> 
  1309                              <2> %assign i +1
  1310 00000B74 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1311                              <2> 
  1312                              <2> %assign i +1
  1313 00000B7C [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1314                              <2> 
  1315                              <2> %assign i +1
  1316 00000B84 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1317                              <2> 
  1318                              <2> %assign i +1
  1319 00000B8C [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1320                              <2> 
  1321                              <2> %assign i +1
  1322 00000B94 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1323                              <2> 
  1324                              <2> %assign i +1
  1325 00000B9C [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1326                              <2> 
  1327                              <2> %assign i +1
  1328 00000BA4 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1329                              <2> 
  1330                              <2> %assign i +1
  1331 00000BAC [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1332                              <2> 
  1333                              <2> %assign i +1
  1334 00000BB4 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1335                              <2> 
  1336                              <2> %assign i +1
  1337                              <1> idt_end:
  1338                              <1> [BITS 32]
  1339                                  	%include "source/realmode.asm"
  1340                              <1> realmode:	;make sure the real mode program's address is in realmodeptr 
  1341                              <1> 			;and the return address is in realmodereturn
  1342 00000BBC FA                  <1> 	cli
  1343 00000BBD A3[CF0C0000]        <1> 	mov [realmodeeax], eax
  1344 00000BC2 891D[CB0C0000]      <1> 	mov [realmodeebx], ebx
  1345 00000BC8 8925[BD0C0000]      <1> 	mov [pmodeesp], esp
  1346                              <1> 
  1347 00000BCE BB[C70C0000]        <1> 	mov ebx, cr0old
  1348                              <1> rmcopytofirstmbyte:
  1349 00000BD3 8B03                <1> 	mov eax, [ebx]
  1350 00000BD5 658903              <1> 	mov [gs:ebx], eax
  1351 00000BD8 81C304000000        <1> 	add ebx, 4
  1352 00000BDE 81FB[D70C0000]      <1> 	cmp ebx, realmodeptr
  1353 00000BE4 76ED                <1> 	jbe rmcopytofirstmbyte
  1354                              <1> 
  1355 00000BE6 EA[ED0B0000]3800    <1> 	jmp V8086_CODE_SEL:protected16bit
  1356                              <1> 
  1357                              <1> [BITS 16]
  1358                              <1> protected16bit:
  1359 00000BED B84000              <1> 	mov ax, V8086_DATA_SEL
  1360 00000BF0 8ED8                <1> 	mov ds, ax
  1361 00000BF2 8EC0                <1> 	mov es, ax
  1362 00000BF4 8EE0                <1> 	mov fs, ax
  1363 00000BF6 8EE8                <1> 	mov gs, ax
  1364 00000BF8 8ED0                <1> 	mov ss, ax
  1365 00000BFA 66BC[841F0100]      <1> 	mov esp, stackend
  1366 00000C00 0F20C0              <1> 	mov eax, cr0
  1367 00000C03 66A3[C70C]          <1> 	mov [cr0old], eax
  1368 00000C07 6625FEFFFF7F        <1> 	and eax, 0x7FFFFFFE
  1369 00000C0D 0F22C0              <1> 	mov cr0, eax	;now in real mode
  1370 00000C10 EA[150C]0010        <1> 	jmp 0x1000:inrealmode
  1371                              <1> 
  1372                              <1> inrealmode:
  1373 00000C15 8CC8                <1> 	mov ax, cs
  1374 00000C17 8ED8                <1> 	mov ds, ax
  1375 00000C19 8EC0                <1> 	mov es, ax
  1376 00000C1B 8EE0                <1> 	mov fs, ax
  1377 00000C1D 8EE8                <1> 	mov gs, ax
  1378 00000C1F 8ED0                <1> 	mov ss, ax
  1379 00000C21 BC[841F]            <1> 	mov sp, stackend ;because this is at 0x1000: and not 0x10000: it works
  1380                              <1> 	
  1381 00000C24 B011                <1> 	mov al, 0x11
  1382 00000C26 E620                <1> 	out 0x20, al
  1383 00000C28 E6A0                <1> 	out 0xA0, al
  1384 00000C2A B008                <1> 	mov al, 0x8		;interrupt for master
  1385 00000C2C E621                <1> 	out 0x21, al
  1386 00000C2E B070                <1> 	mov al, 0x70	;interrupt for slave
  1387 00000C30 E6A1                <1> 	out 0xA1, al
  1388 00000C32 B004                <1> 	mov al, 4
  1389 00000C34 E621                <1> 	out 0x21, al
  1390 00000C36 B002                <1> 	mov al, 2
  1391 00000C38 E6A1                <1> 	out 0xA1, al
  1392 00000C3A B001                <1> 	mov al, 0x1
  1393 00000C3C E621                <1> 	out 0x21, al
  1394 00000C3E B001                <1> 	mov al, 0x1
  1395 00000C40 E6A1                <1> 	out 0xA1, al
  1396                              <1> 	
  1397 00000C42 0F011E[C10C]        <1> 	lidt [idt_real]
  1398 00000C47 FB                  <1> 	sti
  1399                              <1> 
  1400 00000C48 66A1[CF0C]          <1> 	mov eax, [realmodeeax]
  1401 00000C4C 668B1E[CB0C]        <1> 	mov ebx, [realmodeebx]
  1402                              <1> 
  1403 00000C51 FF16[D70C]          <1> 	call word [realmodeptr] ;call the real mode program here
  1404                              <1> 
  1405 00000C55 66A3[CF0C]          <1> 	mov [realmodeeax], eax
  1406 00000C59 66891E[CB0C]        <1> 	mov [realmodeebx], ebx
  1407                              <1> 
  1408 00000C5E FA                  <1> 	cli
  1409 00000C5F 0F0116[5803]        <1> 	lgdt [gdtr]
  1410 00000C64 0F011E[5E03]        <1> 	lidt [idtr]
  1411 00000C69 0F20C0              <1> 	mov eax, cr0
  1412 00000C6C 0C01                <1> 	or al, 1
  1413 00000C6E 0F22C0              <1> 	mov cr0,eax
  1414 00000C71 EA[760C]2800        <1> 	jmp NEW_CODE_SEL:returntopmode
  1415                              <1> 
  1416                              <1> [BITS 32]
  1417                              <1> returntopmode:
  1418 00000C76 66B83000            <1> 	mov ax, NEW_DATA_SEL
  1419 00000C7A 8ED8                <1> 	mov ds, ax
  1420 00000C7C 8EC0                <1> 	mov es, ax
  1421 00000C7E 8EE0                <1> 	mov fs, ax
  1422 00000C80 8ED0                <1> 	mov ss, ax
  1423 00000C82 8B25[BD0C0000]      <1> 	mov esp, [pmodeesp]
  1424 00000C88 66B82000            <1> 	mov ax, SYS_DATA_SEL
  1425 00000C8C 8EE8                <1> 	mov gs, ax
  1426                              <1> 
  1427 00000C8E BB[C70C0000]        <1> 	mov ebx, cr0old
  1428                              <1> rmcopyfromfirstmbyte:
  1429 00000C93 658B03              <1> 	mov eax, [gs:ebx]
  1430 00000C96 8903                <1> 	mov [ebx], eax
  1431 00000C98 81C304000000        <1> 	add ebx, 4
  1432 00000C9E 81FB[D70C0000]      <1> 	cmp ebx, realmodeptr
  1433 00000CA4 76ED                <1> 	jbe rmcopyfromfirstmbyte
  1434                              <1> 
  1435 00000CA6 E888550000          <1> 	call initialize.pic ;reset irq's and masks
  1436 00000CAB FB                  <1> 	sti
  1437 00000CAC A1[CF0C0000]        <1> 	mov eax, [realmodeeax]
  1438 00000CB1 8B1D[CB0C0000]      <1> 	mov ebx, [realmodeebx]
  1439 00000CB7 FF25[D30C0000]      <1> 	jmp dword [realmodereturn]
  1440                              <1> 	
  1441 00000CBD 00000000            <1> pmodeesp dd 0
  1442                              <1> idt_real:
  1443 00000CC1 FF03                <1> 	dw 0x3FF
  1444 00000CC3 00000000            <1> 	dd 0
  1445 00000CC7 00000000            <1> cr0old dd 0
  1446 00000CCB 00000000            <1> realmodeebx dd 0
  1447 00000CCF 00000000            <1> realmodeeax dd 0
  1448 00000CD3 00000000            <1> realmodereturn dd 0
  1449 00000CD7 0000                <1> realmodeptr dw 0
  1450 00000CD9 00000000            <1> dd 0 ;make sure the copy thing doesnt overflow
  1451                                  [BITS 32]
  1452                                      %include "source/exception.asm"
  1453                              <1> %ifdef exceptions.included
  1454                              <1> unhand:	
  1455                              <1> 	%assign i 0
  1456                              <1> 	%rep 32
  1457                              <1> 	mov byte [intprob], i
  1458                              <1> 	jmp unhand2
  1459                              <1> 	%assign i i+1
  1460                              <1> 	%endrep
  1461 00000CDD C605[8F110000]00    <2>  mov byte [intprob], i
  1462 00000CE4 E974010000          <2>  jmp unhand2
  1463                              <2>  %assign i i+1
  1464 00000CE9 C605[8F110000]01    <2>  mov byte [intprob], i
  1465 00000CF0 E968010000          <2>  jmp unhand2
  1466                              <2>  %assign i i+1
  1467 00000CF5 C605[8F110000]02    <2>  mov byte [intprob], i
  1468 00000CFC E95C010000          <2>  jmp unhand2
  1469                              <2>  %assign i i+1
  1470 00000D01 C605[8F110000]03    <2>  mov byte [intprob], i
  1471 00000D08 E950010000          <2>  jmp unhand2
  1472                              <2>  %assign i i+1
  1473 00000D0D C605[8F110000]04    <2>  mov byte [intprob], i
  1474 00000D14 E944010000          <2>  jmp unhand2
  1475                              <2>  %assign i i+1
  1476 00000D19 C605[8F110000]05    <2>  mov byte [intprob], i
  1477 00000D20 E938010000          <2>  jmp unhand2
  1478                              <2>  %assign i i+1
  1479 00000D25 C605[8F110000]06    <2>  mov byte [intprob], i
  1480 00000D2C E92C010000          <2>  jmp unhand2
  1481                              <2>  %assign i i+1
  1482 00000D31 C605[8F110000]07    <2>  mov byte [intprob], i
  1483 00000D38 E920010000          <2>  jmp unhand2
  1484                              <2>  %assign i i+1
  1485 00000D3D C605[8F110000]08    <2>  mov byte [intprob], i
  1486 00000D44 E914010000          <2>  jmp unhand2
  1487                              <2>  %assign i i+1
  1488 00000D49 C605[8F110000]09    <2>  mov byte [intprob], i
  1489 00000D50 E908010000          <2>  jmp unhand2
  1490                              <2>  %assign i i+1
  1491 00000D55 C605[8F110000]0A    <2>  mov byte [intprob], i
  1492 00000D5C E9FC000000          <2>  jmp unhand2
  1493                              <2>  %assign i i+1
  1494 00000D61 C605[8F110000]0B    <2>  mov byte [intprob], i
  1495 00000D68 E9F0000000          <2>  jmp unhand2
  1496                              <2>  %assign i i+1
  1497 00000D6D C605[8F110000]0C    <2>  mov byte [intprob], i
  1498 00000D74 E9E4000000          <2>  jmp unhand2
  1499                              <2>  %assign i i+1
  1500 00000D79 C605[8F110000]0D    <2>  mov byte [intprob], i
  1501 00000D80 E9D8000000          <2>  jmp unhand2
  1502                              <2>  %assign i i+1
  1503 00000D85 C605[8F110000]0E    <2>  mov byte [intprob], i
  1504 00000D8C E9CC000000          <2>  jmp unhand2
  1505                              <2>  %assign i i+1
  1506 00000D91 C605[8F110000]0F    <2>  mov byte [intprob], i
  1507 00000D98 E9C0000000          <2>  jmp unhand2
  1508                              <2>  %assign i i+1
  1509 00000D9D C605[8F110000]10    <2>  mov byte [intprob], i
  1510 00000DA4 E9B4000000          <2>  jmp unhand2
  1511                              <2>  %assign i i+1
  1512 00000DA9 C605[8F110000]11    <2>  mov byte [intprob], i
  1513 00000DB0 E9A8000000          <2>  jmp unhand2
  1514                              <2>  %assign i i+1
  1515 00000DB5 C605[8F110000]12    <2>  mov byte [intprob], i
  1516 00000DBC E99C000000          <2>  jmp unhand2
  1517                              <2>  %assign i i+1
  1518 00000DC1 C605[8F110000]13    <2>  mov byte [intprob], i
  1519 00000DC8 E990000000          <2>  jmp unhand2
  1520                              <2>  %assign i i+1
  1521 00000DCD C605[8F110000]14    <2>  mov byte [intprob], i
  1522 00000DD4 E984000000          <2>  jmp unhand2
  1523                              <2>  %assign i i+1
  1524 00000DD9 C605[8F110000]15    <2>  mov byte [intprob], i
  1525 00000DE0 E978000000          <2>  jmp unhand2
  1526                              <2>  %assign i i+1
  1527 00000DE5 C605[8F110000]16    <2>  mov byte [intprob], i
  1528 00000DEC E96C000000          <2>  jmp unhand2
  1529                              <2>  %assign i i+1
  1530 00000DF1 C605[8F110000]17    <2>  mov byte [intprob], i
  1531 00000DF8 E960000000          <2>  jmp unhand2
  1532                              <2>  %assign i i+1
  1533 00000DFD C605[8F110000]18    <2>  mov byte [intprob], i
  1534 00000E04 E954000000          <2>  jmp unhand2
  1535                              <2>  %assign i i+1
  1536 00000E09 C605[8F110000]19    <2>  mov byte [intprob], i
  1537 00000E10 E948000000          <2>  jmp unhand2
  1538                              <2>  %assign i i+1
  1539 00000E15 C605[8F110000]1A    <2>  mov byte [intprob], i
  1540 00000E1C E93C000000          <2>  jmp unhand2
  1541                              <2>  %assign i i+1
  1542 00000E21 C605[8F110000]1B    <2>  mov byte [intprob], i
  1543 00000E28 E930000000          <2>  jmp unhand2
  1544                              <2>  %assign i i+1
  1545 00000E2D C605[8F110000]1C    <2>  mov byte [intprob], i
  1546 00000E34 E924000000          <2>  jmp unhand2
  1547                              <2>  %assign i i+1
  1548 00000E39 C605[8F110000]1D    <2>  mov byte [intprob], i
  1549 00000E40 E918000000          <2>  jmp unhand2
  1550                              <2>  %assign i i+1
  1551 00000E45 C605[8F110000]1E    <2>  mov byte [intprob], i
  1552 00000E4C E90C000000          <2>  jmp unhand2
  1553                              <2>  %assign i i+1
  1554 00000E51 C605[8F110000]1F    <2>  mov byte [intprob], i
  1555 00000E58 E900000000          <2>  jmp unhand2
  1556                              <2>  %assign i i+1
  1557                              <1> unhand2:
  1558 00000E5D FA                  <1> 	cli
  1559 00000E5E 1E                  <1> 	push ds
  1560 00000E5F 06                  <1> 	push es
  1561 00000E60 0FA0                <1> 	push fs
  1562 00000E62 0FA8                <1> 	push gs
  1563 00000E64 16                  <1> 	push ss
  1564 00000E65 60                  <1> 	pushad
  1565                              <1> %ifdef gui.included
  1566 00000E66 803D[9C8B0000]00    <1> 	cmp byte [guion], 0
  1567 00000E6D 0F8432000000        <1> 	je near noguiunhandstuff
  1568 00000E73 66C705[89110000]08- <1> 	mov word [locunhandy], 8
  1569 00000E7B 00                  <1>
  1570 00000E7C 66C705[8B110000]08- <1> 	mov word [locunhandx], 8
  1571 00000E84 00                  <1>
  1572 00000E85 668B1D[4D6F0000]    <1> 	mov bx, [background]
  1573 00000E8C 66891D[8D110000]    <1> 	mov [backgroundcache], bx
  1574 00000E93 C605[E4580000]01    <1> 	mov byte [mousedisabled],1
  1575 00000E9A 66BB00F8            <1> 	mov bx, 1111100000000000b
  1576 00000E9E 66891D[4D6F0000]    <1> 	mov [background], bx
  1577                              <1> noguiunhandstuff:
  1578                              <1> %endif
  1579 00000EA5 89E6                <1> 	mov esi, esp
  1580 00000EA7 8935[7D110000]      <1> 	mov [espfirst], esi
  1581 00000EAD 81C6BC000000        <1> 	add esi, ((unhndrgend - unhndrg)/15)*4
  1582 00000EB3 8935[79110000]      <1> 	mov [esploc], esi
  1583 00000EB9 BE[9E110000]        <1> 	mov esi, unhandmsg
  1584 00000EBE 8935[81110000]      <1> 	mov [esiloc], esi
  1585 00000EC4 31C9                <1> 	xor ecx, ecx
  1586 00000EC6 8A0D[8F110000]      <1> 	mov cl, [intprob]
  1587 00000ECC BB[6D150000]        <1> 	mov ebx, errortypes
  1588 00000ED1 C1E102              <1> 	shl ecx, 2
  1589 00000ED4 01CB                <1> 	add ebx, ecx
  1590 00000ED6 81FB[AD150000]      <1> 	cmp ebx, errortypesend
  1591 00000EDC 7205                <1> 	jb gooderrortype
  1592 00000EDE BB[AD150000]        <1> 	mov ebx, errortypesend
  1593                              <1> gooderrortype:
  1594 00000EE3 8B33                <1> 	mov esi, [ebx]
  1595                              <1> %ifdef gui.included
  1596 00000EE5 803D[9C8B0000]00    <1> 	cmp byte [guion], 0
  1597 00000EEC 0F842D000000        <1> 	je near errortext
  1598 00000EF2 668B0D[89110000]    <1> 	mov cx, [locunhandy]
  1599 00000EF9 668B15[8B110000]    <1> 	mov dx, [locunhandx]
  1600 00000F00 66B80100            <1> 	mov ax, 1
  1601 00000F04 6631DB              <1> 	xor bx, bx
  1602 00000F07 E89E660000          <1> 	call showstring2
  1603 00000F0C 66890D[89110000]    <1> 	mov [locunhandy], cx
  1604 00000F13 668915[8B110000]    <1> 	mov [locunhandx], dx
  1605 00000F1A E905000000          <1> 	jmp errortextdone
  1606                              <1> %endif
  1607                              <1> errortext:
  1608 00000F1F E8070E0000          <1> 	call print		;;get the error message and print it
  1609                              <1> errortextdone:
  1610 00000F24 31C9                <1> 	xor ecx, ecx
  1611 00000F26 8A0D[8F110000]      <1> 	mov cl, [intprob]
  1612 00000F2C E8E1010000          <1> 	call expdump
  1613                              <1> dumpstack:
  1614 00000F31 8B35[79110000]      <1> 	mov esi, [esploc]
  1615 00000F37 39E6                <1> 	cmp esi, esp
  1616 00000F39 7216                <1> 	jb donedump
  1617 00000F3B 368B0E              <1> 	mov ecx, [ss:esi]
  1618 00000F3E 81EE04000000        <1> 	sub esi, 4
  1619 00000F44 8935[79110000]      <1> 	mov [esploc], esi
  1620 00000F4A E8C3010000          <1> 	call expdump
  1621 00000F4F EBE0                <1> 	jmp dumpstack
  1622                              <1> donedump:
  1623 00000F51 0F20C1              <1> 	mov ecx, cr0
  1624 00000F54 E8B9010000          <1> 	call expdump
  1625 00000F59 0F20D1              <1> 	mov ecx, cr2
  1626 00000F5C E8B1010000          <1> 	call expdump
  1627 00000F61 0F20D9              <1> 	mov ecx, cr3
  1628 00000F64 E8A9010000          <1> 	call expdump
  1629 00000F69 0F20E1              <1> 	mov ecx, cr4
  1630 00000F6C E8A1010000          <1> 	call expdump
  1631 00000F71 0F00C9              <1> 	str ecx
  1632 00000F74 E899010000          <1> 	call expdump
  1633 00000F79 0F010D[98110000]    <1> 	sidt [igdtcache]
  1634 00000F80 8B0D[9A110000]      <1> 	mov ecx, [igdtcache + 2]
  1635 00000F86 E887010000          <1> 	call expdump
  1636 00000F8B 0F0105[98110000]    <1> 	sgdt [igdtcache]
  1637 00000F92 8B0D[9A110000]      <1> 	mov ecx, [igdtcache + 2]
  1638 00000F98 E875010000          <1> 	call expdump
  1639 00000F9D 0F00C1              <1> 	sldt ecx
  1640 00000FA0 E86D010000          <1> 	call expdump
  1641 00000FA5 8B35[79110000]      <1> 	mov esi, [esploc]
  1642 00000FAB 368B7C2434          <1> 	mov edi, [ss:esp + 52]
  1643 00000FB0 81C710000000        <1> 	add edi, 16
  1644 00000FB6 893D[94110000]      <1> 	mov [codelocend], edi
  1645 00000FBC 81EF20000000        <1> 	sub edi, 32
  1646                              <1> dumpcodeloop:
  1647 00000FC2 893D[90110000]      <1> 	mov [codeloc], edi
  1648 00000FC8 8B0F                <1> 	mov ecx, [edi]
  1649 00000FCA E843010000          <1> 	call expdump
  1650 00000FCF 8B3D[90110000]      <1> 	mov edi, [codeloc]
  1651 00000FD5 81C704000000        <1> 	add edi, 4
  1652 00000FDB 3B3D[94110000]      <1> 	cmp edi, [codelocend]
  1653 00000FE1 72DF                <1> 	jb dumpcodeloop
  1654 00000FE3 BE[A3100000]        <1> 	mov esi, backtoosmsg
  1655                              <1> %ifdef gui.included
  1656 00000FE8 803D[9C8B0000]00    <1> 	cmp byte [guion], 0
  1657 00000FEF 741F                <1> 	je backtomsg
  1658                              <1> guibacktomsg:
  1659 00000FF1 668B15[8B110000]    <1> 	mov dx, [locunhandx]
  1660 00000FF8 668B0D[89110000]    <1> 	mov cx, [locunhandy]
  1661 00000FFF 66B80100            <1> 	mov ax, 1
  1662 00001003 6631DB              <1> 	xor bx, bx
  1663 00001006 E89F650000          <1> 	call showstring2
  1664 0000100B E905000000          <1> 	jmp backtomsgdone
  1665                              <1> backtomsg:
  1666                              <1> %endif
  1667 00001010 E8160D0000          <1> 	call print
  1668                              <1> backtomsgdone:
  1669 00001015 30C0                <1> 	xor al, al
  1670 00001017 E806130000          <1> 	call rdcharint
  1671 0000101C 803D[8F110000]03    <1> 	cmp byte [intprob], 3
  1672 00001023 7541                <1> 	jne nodebugint
  1673                              <1> %ifdef gui.included
  1674 00001025 803D[9C8B0000]00    <1> 	cmp byte [guion], 0
  1675 0000102C 7427                <1> 	je nodebuggui
  1676 0000102E 668B1D[8D110000]    <1> 	mov bx, [backgroundcache]
  1677 00001035 66891D[4D6F0000]    <1> 	mov [background], bx
  1678 0000103C 6631DB              <1> 	xor bx, bx
  1679 0000103F C605[E4580000]00    <1> 	mov byte [mousedisabled], 0
  1680 00001046 E8735E0000          <1> 	call guiclear
  1681 0000104B E8015F0000          <1> 	call reloadallgraphics
  1682 00001050 E85D180000          <1> 	call termcopy
  1683                              <1> nodebuggui:
  1684                              <1> %endif
  1685 00001055 8B35[7D110000]      <1> 	mov esi, [espfirst]
  1686 0000105B 89F4                <1> 	mov esp, esi
  1687 0000105D 61                  <1> 	popad
  1688 0000105E 17                  <1> 	pop ss
  1689 0000105F 0FA9                <1> 	pop gs
  1690 00001061 0FA1                <1> 	pop fs
  1691 00001063 07                  <1> 	pop es
  1692 00001064 1F                  <1> 	pop ds
  1693 00001065 CF                  <1> 	iret
  1694                              <1> nodebugint:
  1695 00001066 61                  <1> 	popad
  1696 00001067 17                  <1> 	pop ss
  1697 00001068 0FA9                <1> 	pop gs
  1698 0000106A 0FA1                <1> 	pop fs
  1699 0000106C 07                  <1> 	pop es
  1700 0000106D 1F                  <1> 	pop ds
  1701                              <1> %ifdef gui.included
  1702 0000106E 803D[9C8B0000]00    <1> 	cmp byte [guion], 0
  1703 00001075 7427                <1> 	je returnunhandgui
  1704 00001077 668B1D[8D110000]    <1> 	mov bx, [backgroundcache]
  1705 0000107E 66891D[4D6F0000]    <1> 	mov [background], bx
  1706 00001085 6631DB              <1> 	xor bx, bx
  1707 00001088 C605[E4580000]00    <1> 	mov byte [mousedisabled], 0
  1708 0000108F E82A5E0000          <1> 	call guiclear
  1709 00001094 E8B85E0000          <1> 	call reloadallgraphics
  1710 00001099 E814180000          <1> 	call termcopy
  1711                              <1> %endif
  1712                              <1> returnunhandgui:
  1713 0000109E E9531C0000          <1> 	jmp nwcmd
  1714 000010A3 506C6561736520706F- <1> backtoosmsg db "Please post any problems in the Issues section at solleros.googlecode.com",10
  1715 000010AC 737420616E79207072- <1>
  1716 000010B5 6F626C656D7320696E- <1>
  1717 000010BE 207468652049737375- <1>
  1718 000010C7 65732073656374696F- <1>
  1719 000010D0 6E20617420736F6C6C- <1>
  1720 000010D9 65726F732E676F6F67- <1>
  1721 000010E2 6C65636F64652E636F- <1>
  1722 000010EB 6D0A                <1>
  1723 000010ED 507265737320616E79- <1> 			db "Press any key to return to SollerOS",10,0
  1724 000010F6 206B657920746F2072- <1>
  1725 000010FF 657475726E20746F20- <1>
  1726 00001108 536F6C6C65724F530A- <1>
  1727 00001111 00                  <1>
  1728                              <1> expdump:
  1729 00001112 8B35[81110000]      <1> 	mov esi, [esiloc]
  1730 00001118 89F7                <1> 	mov edi, esi
  1731 0000111A 81C70F000000        <1> 	add edi, 15
  1732 00001120 81C604000000        <1> 	add esi, 4
  1733 00001126 893D[81110000]      <1> 	mov [esiloc], edi
  1734 0000112C 81EF03000000        <1> 	sub edi, 3
  1735 00001132 E826200000          <1> 	call converthex
  1736 00001137 81EE04000000        <1> 	sub esi, 4
  1737                              <1> %ifdef gui.included
  1738 0000113D 803D[9C8B0000]00    <1> 	cmp byte [guion], 0
  1739 00001144 0F8429000000        <1> 	je near expdumptext
  1740 0000114A 668B0D[89110000]    <1> 	mov cx, [locunhandy]
  1741 00001151 668B15[8B110000]    <1> 	mov dx, [locunhandx]
  1742 00001158 66B80100            <1> 	mov ax, 1
  1743 0000115C 6631DB              <1> 	xor bx, bx
  1744 0000115F E846640000          <1> 	call showstring2
  1745 00001164 66890D[89110000]    <1> 	mov [locunhandy], cx
  1746 0000116B 668915[8B110000]    <1> 	mov [locunhandx], dx
  1747 00001172 C3                  <1> 	ret
  1748                              <1> %endif
  1749                              <1> expdumptext:
  1750 00001173 E8B30B0000          <1> 	call print
  1751 00001178 C3                  <1> 	ret
  1752 00001179 00000000            <1> esploc dd 0
  1753 0000117D 00000000            <1> espfirst dd 0
  1754 00001181 00000000            <1> esiloc dd 0
  1755 00001185 00000000            <1> esiregbuf dd 0
  1756 00001189 0100                <1> locunhandy dw 1
  1757 0000118B 0100                <1> locunhandx dw 1
  1758 0000118D 0000                <1> backgroundcache dw 0
  1759 0000118F 00                  <1> intprob db 0
  1760 00001190 00000000            <1> codeloc dd 0
  1761 00001194 00000000            <1> codelocend dd 0
  1762 00001198 000000000000        <1> igdtcache dw 0,0,0
  1763                              <1> 	unhandmsg:	
  1764 0000119E 494E543D3030303030- <1> 			db "INT=00000000",255,10,0
  1765 000011A7 303030FF0A00        <1>
  1766                              <1> unhndrg:
  1767 000011AD FFFFFFFF3030303030- <1> 	times 7 db 255,255,255,255,"00000000  ",0	;;this dumps the stack before the stack frame in question
  1768 000011B6 303030202000<rept>  <1>
  1769 00001216 FFFFFFFF3030303030- <1> 			db 255,255,255,255,"00000000",255,10,0
  1770 0000121F 303030FF0A00        <1>
  1771 00001225 FFFFFFFF3030303030- <1> 	times 7 db 255,255,255,255,"00000000  ",0	;;this dumps the stack before the stack frame in question
  1772 0000122E 303030202000<rept>  <1>
  1773 0000128E FFFFFFFF3030303030- <1> 			db 255,255,255,255,"00000000",255,10,0
  1774 00001297 303030FF0A00        <1>
  1775 0000129D FFFFFFFF3030303030- <1> 	times 7 db 255,255,255,255,"00000000  ",0	;;this dumps the stack before the stack frame in question
  1776 000012A6 303030202000<rept>  <1>
  1777 00001306 FFFFFFFF3030303030- <1> 			db 255,255,255,255,"00000000",255,10,0
  1778 0000130F 303030FF0A00        <1>
  1779 00001315 FFFFFFFF3030303030- <1> 	times 7 db 255,255,255,255,"00000000  ",0	;;this dumps the stack before the stack frame in question
  1780 0000131E 303030202000<rept>  <1>
  1781 0000137E FFFFFFFF3030303030- <1> 			db 255,255,255,255,"00000000",255,10,0
  1782 00001387 303030FF0A00        <1>
  1783                              <1> unhandregs:
  1784 0000138D 45464C3D3030303030- <1> 			db "EFL=00000000  ",0
  1785 00001396 303030202000        <1>
  1786 0000139C 43533A3D3030303030- <1> 			db "CS:=00000000  ",0
  1787 000013A5 303030202000        <1>
  1788 000013AB 4549503D3030303030- <1> 			db "EIP=00000000",255,10,0
  1789 000013B4 303030FF0A00        <1>
  1790 000013BA 44533A3D3030303030- <1> 			db "DS:=00000000  ",0
  1791 000013C3 303030202000        <1>
  1792 000013C9 45533A3D3030303030- <1> 			db "ES:=00000000  ",0
  1793 000013D2 303030202000        <1>
  1794 000013D8 46533A3D3030303030- <1> 			db "FS:=00000000  ",0
  1795 000013E1 303030202000        <1>
  1796 000013E7 47533A3D3030303030- <1> 			db "GS:=00000000  ",0
  1797 000013F0 303030202000        <1>
  1798 000013F6 53533A3D3030303030- <1> 			db "SS:=00000000",255,10,0
  1799 000013FF 303030FF0A00        <1>
  1800 00001405 4541583D3030303030- <1> 			db "EAX=00000000  ",0
  1801 0000140E 303030202000        <1>
  1802 00001414 4543583D3030303030- <1> 			db "ECX=00000000  ",0
  1803 0000141D 303030202000        <1>
  1804 00001423 4544583D3030303030- <1> 			db "EDX=00000000  ",0
  1805 0000142C 303030202000        <1>
  1806 00001432 4542583D3030303030- <1> 			db "EBX=00000000",255,10,0
  1807 0000143B 303030FF0A00        <1>
  1808 00001441 4553503D3030303030- <1> 			db "ESP=00000000  ",0
  1809 0000144A 303030202000        <1>
  1810 00001450 4542503D3030303030- <1> 			db "EBP=00000000  ",0
  1811 00001459 303030202000        <1>
  1812 0000145F 4553493D3030303030- <1> 			db "ESI=00000000  ",0
  1813 00001468 303030202000        <1>
  1814 0000146E 4544493D3030303030- <1> unhndrgend:	db "EDI=00000000",255,10,0
  1815 00001477 303030FF0A00        <1>
  1816 0000147D 4352303D3030303030- <1> 			db "CR0=00000000  ",0
  1817 00001486 303030202000        <1>
  1818 0000148C 4352323D3030303030- <1> 			db "CR2=00000000  ",0
  1819 00001495 303030202000        <1>
  1820 0000149B 4352333D3030303030- <1> 			db "CR3=00000000  ",0
  1821 000014A4 303030202000        <1>
  1822 000014AA 4352343D3030303030- <1> 			db "CR4=00000000",255,10,0
  1823 000014B3 303030FF0A00        <1>
  1824 000014B9 54523A3D3030303030- <1> 			db "TR:=00000000  ",0
  1825 000014C2 303030202000        <1>
  1826 000014C8 4944543D3030303030- <1> 			db "IDT=00000000  ",0
  1827 000014D1 303030202000        <1>
  1828 000014D7 4744543D3030303030- <1> 			db "GDT=00000000  ",0
  1829 000014E0 303030202000        <1>
  1830 000014E6 4C44543D3030303030- <1> 			db "LDT=00000000",255,10,0
  1831 000014EF 303030FF0A00        <1>
  1832 000014F5 FFFFFFFF3030303030- <1> unhandcode: times 2 db 255,255,255,255,"00000000  ",0	;;this dumps the code before and after the interrupt in question
  1833 000014FE 303030202000<rept>  <1>
  1834 00001513 FFFFFFFF3030303030- <1> 			db 255,255,255,255,"00000000 ",255,0
  1835 0000151C 30303020FF00        <1>
  1836 00001522 FFFFFF5B3030303030- <1> 			db 255,255,255,"[00000000] ",0
  1837 0000152B 3030305D2000        <1>
  1838 00001531 FFFFFFFF3030303030- <1> 			times 3 db 255,255,255,255,"00000000  ",0
  1839 0000153A 303030202000<rept>  <1>
  1840 0000155E FFFFFFFF3030303030- <1> 			db 255,255,255,255,"00000000",255,10,0
  1841 00001567 303030FF0A00        <1>
  1842                              <1> unhandmsgend:
  1843                              <1> 
  1844                              <1> errortypes:
  1845 0000156D [B1150000]          <1> 			dd err0
  1846 00001571 [1A160000]          <1> 			dd err1
  1847 00001575 [7B160000]          <1> 			dd err2
  1848 00001579 [D0160000]          <1> 			dd err3
  1849 0000157D [34170000]          <1> 			dd err4
  1850 00001581 [86170000]          <1> 			dd err5
  1851 00001585 [F0170000]          <1> 			dd err6
  1852 00001589 [58180000]          <1> 			dd err7
  1853 0000158D [A2180000]          <1> 			dd err8
  1854 00001591 [FF180000]          <1> 			dd err9
  1855 00001595 [58190000]          <1> 			dd err10
  1856 00001599 [A3190000]          <1> 			dd err11
  1857 0000159D [F3190000]          <1> 			dd err12
  1858 000015A1 [4C1A0000]          <1> 			dd err13
  1859 000015A5 [AF1A0000]          <1> 			dd err14
  1860 000015A9 [EB1A0000]          <1> 			dd err15
  1861                              <1> errortypesend:
  1862 000015AD [761B0000]          <1> 			dd unknownerror
  1863                              <1> 			
  1864 000015B1 4469766973696F6E20- <1> err0	db "Division by zero:",10
  1865 000015BA 6279207A65726F3A0A  <1>
  1866 000015C3 546563686E6963616C- <1> 		db "Technically lim a÷x = ∞ when a is any real number. Happy Easter!",10
  1867 000015CC 6C79206C696D2061C3- <1>
  1868 000015D5 B778203D20E2889E20- <1>
  1869 000015DE 7768656E2061206973- <1>
  1870 000015E7 20616E79207265616C- <1>
  1871 000015F0 206E756D6265722E20- <1>
  1872 000015F9 486170707920456173- <1>
  1873 00001602 746572210A          <1>
  1874 00001607 202020202020202020- <1> 		db "            x→0",10,0
  1875 00001610 20202078E28692300A- <1>
  1876 00001619 00                  <1>
  1877                              <1> 		
  1878 0000161A 53696E676C652D7374- <1> err1	db "Single-step/Breakpoint:",10
  1879 00001623 65702F427265616B70- <1>
  1880 0000162C 6F696E743A0A        <1>
  1881 00001632 4120627265616B706F- <1> 		db "A breakpoint fault, breakpoint trap, or single-step trap was triggered.",10,0
  1882 0000163B 696E74206661756C74- <1>
  1883 00001644 2C20627265616B706F- <1>
  1884 0000164D 696E7420747261702C- <1>
  1885 00001656 206F722073696E676C- <1>
  1886 0000165F 652D73746570207472- <1>
  1887 00001668 617020776173207472- <1>
  1888 00001671 696767657265642E0A- <1>
  1889 0000167A 00                  <1>
  1890                              <1> 		
  1891 0000167B 4E6F6E6D61736B6162- <1> err2	db "Nonmaskable interrupt:",10
  1892 00001684 6C6520696E74657272- <1>
  1893 0000168D 7570743A0A          <1>
  1894 00001692 412068617264776172- <1> 		db "A hardware interrupt was triggered that could not be masked.",10,0
  1895 0000169B 6520696E7465727275- <1>
  1896 000016A4 707420776173207472- <1>
  1897 000016AD 696767657265642074- <1>
  1898 000016B6 68617420636F756C64- <1>
  1899 000016BF 206E6F74206265206D- <1>
  1900 000016C8 61736B65642E0A00    <1>
  1901                              <1> 		
  1902 000016D0 427265616B706F696E- <1> err3	db "Breakpoint:",10
  1903 000016D9 743A0A              <1>
  1904 000016DC 5468697320696E7465- <1> 		db "This interrupt is used in programs to show the stack and registers and can be",10
  1905 000016E5 727275707420697320- <1>
  1906 000016EE 7573656420696E2070- <1>
  1907 000016F7 726F6772616D732074- <1>
  1908 00001700 6F2073686F77207468- <1>
  1909 00001709 6520737461636B2061- <1>
  1910 00001712 6E6420726567697374- <1>
  1911 0000171B 65727320616E642063- <1>
  1912 00001724 616E2062650A        <1>
  1913 0000172A 69676E6F7265642E0A- <1> 		db "ignored.",10,0
  1914 00001733 00                  <1>
  1915                              <1> 		
  1916 00001734 4F766572666C6F773A- <1> err4	db "Overflow:",10
  1917 0000173D 0A                  <1>
  1918 0000173E 5468652070726F6365- <1> 		db "The processor ran into an INTO instruction with the overflow flag set.",10,0
  1919 00001747 73736F722072616E20- <1>
  1920 00001750 696E746F20616E2049- <1>
  1921 00001759 4E544F20696E737472- <1>
  1922 00001762 756374696F6E207769- <1>
  1923 0000176B 746820746865206F76- <1>
  1924 00001774 6572666C6F7720666C- <1>
  1925 0000177D 6167207365742E0A00  <1>
  1926                              <1> 		
  1927 00001786 426F756E6473206368- <1> err5	db "Bounds check:",10
  1928 0000178F 65636B3A0A          <1>
  1929 00001794 5468652070726F6365- <1> 		db "The processor rebounded from a BOUND instruction run on an operand that was out",10
  1930 0000179D 73736F72207265626F- <1>
  1931 000017A6 756E6465642066726F- <1>
  1932 000017AF 6D206120424F554E44- <1>
  1933 000017B8 20696E737472756374- <1>
  1934 000017C1 696F6E2072756E206F- <1>
  1935 000017CA 6E20616E206F706572- <1>
  1936 000017D3 616E64207468617420- <1>
  1937 000017DC 776173206F75740A    <1>
  1938 000017E4 6F6620626F756E6473- <1> 		db "of bounds.",10,0
  1939 000017ED 2E0A00              <1>
  1940                              <1> 		
  1941 000017F0 496E76616C6964206F- <1> err6	db "Invalid opcode:",10
  1942 000017F9 70636F64653A0A      <1>
  1943 00001800 5468652070726F6365- <1> 		db "The processor has no idea what it was trying to execute. Don't run SSE4 code",10
  1944 00001809 73736F722068617320- <1>
  1945 00001812 6E6F20696465612077- <1>
  1946 0000181B 686174206974207761- <1>
  1947 00001824 7320747279696E6720- <1>
  1948 0000182D 746F20657865637574- <1>
  1949 00001836 652E20446F6E277420- <1>
  1950 0000183F 72756E205353453420- <1>
  1951 00001848 636F64650A          <1>
  1952 0000184D 6F6E20343836277321- <1> 		db "on 486's!",10,0
  1953 00001856 0A00                <1>
  1954                              <1> 		
  1955 00001858 436F70726F63657373- <1> err7	db "Coprocessor not available:",10
  1956 00001861 6F72206E6F74206176- <1>
  1957 0000186A 61696C61626C653A0A  <1>
  1958 00001873 446F6E277420796F75- <1> 		db "Don't you know they don't make those anymore!",10,0
  1959 0000187C 206B6E6F7720746865- <1>
  1960 00001885 7920646F6E2774206D- <1>
  1961 0000188E 616B652074686F7365- <1>
  1962 00001897 20616E796D6F726521- <1>
  1963 000018A0 0A00                <1>
  1964                              <1> 		
  1965 000018A2 446F75626C65206661- <1> err8	db "Double fault:",10
  1966 000018AB 756C743A0A          <1>
  1967 000018B0 546865206578636570- <1> 		db "The exception handler could not handle that it could not handle an exception.",10,0
  1968 000018B9 74696F6E2068616E64- <1>
  1969 000018C2 6C657220636F756C64- <1>
  1970 000018CB 206E6F742068616E64- <1>
  1971 000018D4 6C6520746861742069- <1>
  1972 000018DD 7420636F756C64206E- <1>
  1973 000018E6 6F742068616E646C65- <1>
  1974 000018EF 20616E206578636570- <1>
  1975 000018F8 74696F6E2E0A00      <1>
  1976                              <1> 		
  1977 000018FF 436F70726F63657373- <1> err9	db "Coprocessor segment overrun:",10,0
  1978 00001908 6F72207365676D656E- <1>
  1979 00001911 74206F76657272756E- <1>
  1980 0000191A 3A0A00              <1>
  1981 0000191D 54686973206E657665- <1> 		db "This never happens in modern computers, and never should.",10,0
  1982 00001926 722068617070656E73- <1>
  1983 0000192F 20696E206D6F646572- <1>
  1984 00001938 6E20636F6D70757465- <1>
  1985 00001941 72732C20616E64206E- <1>
  1986 0000194A 657665722073686F75- <1>
  1987 00001953 6C642E0A00          <1>
  1988                              <1> 
  1989 00001958 496E76616C69642054- <1> err10	db "Invalid TSS:",10
  1990 00001961 53533A0A            <1>
  1991 00001965 546865205453532074- <1> 		db "The TSS that was switched to is invalid. Nothing funny here.",10,0
  1992 0000196E 686174207761732073- <1>
  1993 00001977 776974636865642074- <1>
  1994 00001980 6F20697320696E7661- <1>
  1995 00001989 6C69642E204E6F7468- <1>
  1996 00001992 696E672066756E6E79- <1>
  1997 0000199B 20686572652E0A00    <1>
  1998                              <1> 		
  1999 000019A3 5365676D656E74206E- <1> err11	db "Segment not present:",10
  2000 000019AC 6F742070726573656E- <1>
  2001 000019B5 743A0A              <1>
  2002 000019B8 546865207072657365- <1> 		db "The present bit of the segment descriptor is set to zero.",10,0
  2003 000019C1 6E7420626974206F66- <1>
  2004 000019CA 20746865207365676D- <1>
  2005 000019D3 656E74206465736372- <1>
  2006 000019DC 6970746F7220697320- <1>
  2007 000019E5 73657420746F207A65- <1>
  2008 000019EE 726F2E0A00          <1>
  2009                              <1> 		
  2010 000019F3 537461636B20657863- <1> err12	db "Stack exception:",10
  2011 000019FC 657074696F6E3A0A    <1>
  2012 00001A04 546865205353206465- <1> 		db "The SS descriptor is invalid or not present or its limit is too small.",10,0
  2013 00001A0D 7363726970746F7220- <1>
  2014 00001A16 697320696E76616C69- <1>
  2015 00001A1F 64206F72206E6F7420- <1>
  2016 00001A28 70726573656E74206F- <1>
  2017 00001A31 7220697473206C696D- <1>
  2018 00001A3A 697420697320746F6F- <1>
  2019 00001A43 20736D616C6C2E0A00  <1>
  2020                              <1> 		
  2021 00001A4C 47656E6572616C2070- <1> err13	db "General protection violation:",10
  2022 00001A55 726F74656374696F6E- <1>
  2023 00001A5E 2076696F6C6174696F- <1>
  2024 00001A67 6E3A0A              <1>
  2025 00001A6A 596F752076696F6C61- <1> 		db "You violated the computer. Step away slowly. The FBI is on its way.",10,0
  2026 00001A73 746564207468652063- <1>
  2027 00001A7C 6F6D70757465722E20- <1>
  2028 00001A85 537465702061776179- <1>
  2029 00001A8E 20736C6F776C792E20- <1>
  2030 00001A97 546865204642492069- <1>
  2031 00001AA0 73206F6E2069747320- <1>
  2032 00001AA9 7761792E0A00        <1>
  2033                              <1> 		
  2034 00001AAF 50616765206661756C- <1> err14	db "Page fault:",10
  2035 00001AB8 743A0A              <1>
  2036 00001ABB 546865207061676520- <1> 		db "The page that was requested was not available.",10,0
  2037 00001AC4 746861742077617320- <1>
  2038 00001ACD 726571756573746564- <1>
  2039 00001AD6 20776173206E6F7420- <1>
  2040 00001ADF 617661696C61626C65- <1>
  2041 00001AE8 2E0A00              <1>
  2042                              <1> 		
  2043 00001AEB 526573657276656420- <1> err15	db "Reserved for Plan R:",10
  2044 00001AF4 666F7220506C616E20- <1>
  2045 00001AFD 523A0A              <1>
  2046 00001B00 5468697320696E7465- <1> 		db "This interrupt is reserved for usage only by the military when it is necessary",10
  2047 00001B09 727275707420697320- <1>
  2048 00001B12 726573657276656420- <1>
  2049 00001B1B 666F72207573616765- <1>
  2050 00001B24 206F6E6C7920627920- <1>
  2051 00001B2D 746865206D696C6974- <1>
  2052 00001B36 617279207768656E20- <1>
  2053 00001B3F 6974206973206E6563- <1>
  2054 00001B48 6573736172790A      <1>
  2055 00001B4F 746F20696E69746961- <1> 		db "to initiate a full-scale coup d'",130,"tat.",10,0
  2056 00001B58 746520612066756C6C- <1>
  2057 00001B61 2D7363616C6520636F- <1>
  2058 00001B6A 757020642782746174- <1>
  2059 00001B73 2E0A00              <1>
  2060                              <1> 		
  2061 00001B76 576861742074686520- <1> unknownerror db "What the hell just happened? Is everyone okay? Hard drive? Video card?",10
  2062 00001B7F 68656C6C206A757374- <1>
  2063 00001B88 2068617070656E6564- <1>
  2064 00001B91 3F2049732065766572- <1>
  2065 00001B9A 796F6E65206F6B6179- <1>
  2066 00001BA3 3F2048617264206472- <1>
  2067 00001BAC 6976653F2056696465- <1>
  2068 00001BB5 6F20636172643F0A    <1>
  2069 00001BBD 4D656D6F72793F2041- <1> 			db	"Memory? Are you there?",10,0
  2070 00001BC6 726520796F75207468- <1>
  2071 00001BCF 6572653F0A00        <1>
  2072                              <1> %else
  2073                              <1> unhand:	
  2074                              <1> 	%assign i 0
  2075                              <1> 	%rep 32
  2076                              <1> 	mov byte [intprob], i
  2077                              <1> 	jmp unhand2
  2078                              <1> 	%assign i i+1
  2079                              <1> 	%endrep
  2080                              <1> unhand2:
  2081                              <1> 	cmp byte [intprob], 3
  2082                              <1> 	je handled	;if it is a debug interrupt, it is auto handled
  2083                              <1> 	mov ebx, 0xDEADCD00 ;this shows that an exception occured even though more detailed info cannot be shown
  2084                              <1> 						;CD stands for the interrupt code, DEAD shows that the program died because of the int
  2085                              <1> 	mov bl, [intprob]
  2086                              <1> 	jmp exitprog
  2087                              <1> intprob db 0
  2088                              <1> %endif
  2089                                      %include "source/ints.asm"
  2090                              <1> newints:	;for great justice
  2091 00001BD5 80FC00              <1> 	cmp ah, 0
  2092 00001BD8 0F849A000000        <1> 	je near exitprog   ;kills app
  2093 00001BDE 80FC01              <1> 	cmp ah, 1
  2094 00001BE1 0F8419010000        <1> 	je near prntstr  ;print string
  2095 00001BE7 80FC02              <1> 	cmp ah, 2
  2096 00001BEA 0F84B1010000        <1> 	je near readstr	;read string
  2097 00001BF0 80FC03              <1> 	cmp ah, 3
  2098 00001BF3 0F84D1010000        <1> 	je near clearscrn	;clear screen
  2099 00001BF9 80FC04              <1> 	cmp ah, 4
  2100 00001BFC 0F8446020000        <1> 	je near prntreadstr	;read and print string
  2101 00001C02 80FC05              <1> 	cmp ah, 5
  2102 00001C05 0F840B070000        <1> 	je near readchar	;get char
  2103 00001C0B 80FC06              <1> 	cmp ah, 6
  2104 00001C0E 0F8472070000        <1> 	je near prntchar	;print char
  2105 00001C14 80FC07              <1> 	cmp ah, 7
  2106 00001C17 0F8489090000        <1> 	je near openfile	;read file
  2107                              <1> ;	cmp ah, 8
  2108                              <1> ;	je near closefile	;close file
  2109 00001C1D 80FC09              <1> 	cmp ah, 9
  2110 00001C20 0F848A090000        <1> 	je near num2str	;convert number to string
  2111 00001C26 80FC0A              <1> 	cmp ah, 10
  2112 00001C29 0F8499090000        <1> 	je near str2num	;convert string to number
  2113                              <1> %ifdef threads.included
  2114 00001C2F 80FC0B              <1> 	cmp ah, 11
  2115 00001C32 0F849C090000        <1> 	je near forkthread	;create thread
  2116                              <1> %endif
  2117 00001C38 80FC0C              <1> 	cmp ah, 12
  2118 00001C3B 0F846A0A0000        <1> 	je near gettime	;get time
  2119 00001C41 80FC0D              <1> 	cmp ah, 13
  2120 00001C44 0F84760A0000        <1> 	je near settime	;set time
  2121 00001C4A 80FC0E              <1> 	cmp ah, 14
  2122 00001C4D 0F847D0A0000        <1> 	je near runcmd	;run program
  2123 00001C53 80FC0F              <1> 	cmp ah, 15
  2124 00001C56 0F84890A0000        <1> 	je near proginfo ;get program info-location of name/options/number of options/environmental vars
  2125 00001C5C 80FC10              <1> 	cmp ah, 16
  2126 00001C5F 0F84AB0A0000        <1> 	je near hooksig	;hook code to a signal
  2127                              <1> %ifdef gui.included
  2128 00001C65 80FC11              <1> 	cmp ah, 17
  2129 00001C68 0F84B20A0000        <1> 	je near guiint	;GUI operations
  2130                              <1> %endif
  2131                              <1> %ifdef sound.included
  2132                              <1> 	cmp ah, 18
  2133                              <1> 	je near soundint	;sound operations
  2134                              <1> %endif
  2135                              <1> %ifdef network.included
  2136 00001C6E 80FC13              <1> 	cmp ah, 19
  2137 00001C71 0F84360C0000        <1> 	je near netint	;networking operations
  2138                              <1> %endif
  2139 00001C77 CF                  <1> 	iret
  2140                              <1> 	%include 'source/interrupts/0_exitprog.asm'
  2141                              <2> exitprog:
  2142 00001C78 66B83000            <2> 	mov ax, NEW_DATA_SEL
  2143 00001C7C 8ED8                <2> 	mov ds, ax
  2144 00001C7E 8EC0                <2> 	mov es, ax
  2145 00001C80 8EE0                <2> 	mov fs, ax
  2146 00001C82 66B82000            <2> 	mov ax, SYS_DATA_SEL
  2147 00001C86 8EE8                <2> 	mov gs, ax
  2148 00001C88 C705[E1670000]0000- <2> 	mov dword [currentthread], 0
  2149 00001C90 0000                <2>
  2150 00001C92 C705[DC670000]0400- <2> 	mov dword [lastthread], 4
  2151 00001C9A 0000                <2>
  2152 00001C9C C605[E0670000]00    <2> 	mov byte [threadson], 0 ;for now i need to use this
  2153 00001CA3 8B25[E8230100]      <2> 	mov esp, [previousstack] ;and this
  2154 00001CA9 81FB00000000        <2> 	cmp ebx, 0
  2155 00001CAF 0F8501000000        <2> 	jne near .error
  2156 00001CB5 C3                  <2> 	ret
  2157                              <2> .error:
  2158 00001CB6 89D9                <2> 	mov ecx, ebx
  2159 00001CB8 B006                <2> 	mov al, 6
  2160 00001CBA A2[BB310000]        <2> 	mov [firsthexshown], al
  2161 00001CBF 51                  <2> 	push ecx
  2162 00001CC0 BE[DB1C0000]        <2> 	mov esi, .msg1
  2163 00001CC5 E855000000          <2> 	call printhighlight
  2164 00001CCA 59                  <2> 	pop ecx
  2165 00001CCB E800150000          <2> 	call showhex
  2166 00001CD0 BE[F01C0000]        <2> 	mov esi, .msg2
  2167 00001CD5 E845000000          <2> 	call printhighlight
  2168 00001CDA C3                  <2> 	ret
  2169                              <2> 	
  2170 00001CDB 416E20657869742073- <2> .msg1 db "An exit status of 0x",0
  2171 00001CE4 7461747573206F6620- <2>
  2172 00001CED 307800              <2>
  2173 00001CF0 087761732072657475- <2> .msg2 db 8,"was returned.",10,0
  2174 00001CF9 726E65642E0A00      <2>
  2175                              <1> 	%include 'source/interrupts/1_prntstr.asm'
  2176                              <2> prntstr:
  2177 00001D00 30E4                <2> xor ah, ah
  2178 00001D02 E82B000000          <2> call printint
  2179 00001D07 E99CE5FFFF          <2> jmp timerinterrupt
  2180                              <2> 
  2181                              <2> 	printquiet:
  2182 00001D0C 6631C0              <2> 		xor ax, ax
  2183 00001D0F 66A3[9F1D0000]      <2> 		mov [endkeyprint], ax
  2184 00001D15 66BB0700            <2> 		mov bx, 7
  2185 00001D19 E82D000000          <2> 		call printint.b
  2186 00001D1E C3                  <2> 		ret
  2187                              <2> 
  2188                              <2> 	printhighlight:
  2189 00001D1F 6631C0              <2> 		xor ax, ax
  2190 00001D22 66BBF000            <2> 		mov bx, 0xF0
  2191 00001D26 E907000000          <2> 		jmp printint
  2192                              <2> 
  2193                              <2>     print:
  2194 00001D2B 6631C0              <2> 		xor ax, ax
  2195 00001D2E 66BB0700            <2> 		mov bx, 7
  2196                              <2> 	printint:	;print line, ax=last key,bx=modifier, esi=buffer
  2197 00001D32 56                  <2> 		push esi
  2198 00001D33 66A3[9F1D0000]      <2> 		mov [endkeyprint], ax
  2199 00001D39 E80D000000          <2> 		call .b
  2200 00001D3E 89F1                <2> 		mov ecx, esi
  2201 00001D40 5F                  <2> 		pop edi
  2202 00001D41 29F9                <2> 		sub ecx, edi
  2203 00001D43 51                  <2> 		push ecx
  2204 00001D44 E8690B0000          <2> 		call termcopy
  2205 00001D49 59                  <2> 		pop ecx
  2206 00001D4A C3                  <2> 		ret
  2207                              <2> 	.b:	
  2208 00001D4B 53                  <2> 		push ebx
  2209 00001D4C 31C0                <2> 		xor eax, eax
  2210 00001D4E 8A06                <2> 		mov al, [esi]
  2211 00001D50 3CFF                <2> 		cmp al, 0xFF
  2212 00001D52 7438                <2> 		je .doneutf
  2213 00001D54 3CC0                <2> 		cmp al, 0xC0
  2214 00001D56 7234                <2> 		jb .doneutf
  2215 00001D58 3CE0                <2> 		cmp al, 0xE0
  2216 00001D5A 721D                <2> 		jb .two
  2217 00001D5C 46                  <2> 		inc esi
  2218 00001D5D 668B0E              <2> 		mov cx, [esi]
  2219 00001D60 46                  <2> 		inc esi
  2220 00001D61 C0E004              <2> 		shl al, 4
  2221 00001D64 66C1E102            <2> 		shl cx, 2
  2222 00001D68 C0ED02              <2> 		shr ch, 2
  2223 00001D6B 66C1E902            <2> 		shr cx, 2
  2224 00001D6F 08C5                <2> 		or ch, al
  2225 00001D71 6689C8              <2> 		mov ax, cx
  2226 00001D74 E913000000          <2> 		jmp .doneutf
  2227                              <2> 	.two:
  2228 00001D79 8A2E                <2> 		mov ch, [esi]
  2229 00001D7B 46                  <2> 		inc esi
  2230 00001D7C 8A0E                <2> 		mov cl, [esi]
  2231 00001D7E 66C1E102            <2> 		shl cx, 2
  2232 00001D82 C0ED02              <2> 		shr ch, 2
  2233 00001D85 66C1E902            <2> 		shr cx, 2
  2234 00001D89 6689C8              <2> 		mov ax, cx
  2235                              <2> 	.doneutf:
  2236 00001D8C 5B                  <2> 		pop ebx
  2237 00001D8D 663B05[9F1D0000]    <2> 		cmp ax, [endkeyprint]
  2238 00001D94 7408                <2> 		je .done
  2239 00001D96 E812060000          <2> 		call prcharq
  2240 00001D9B 46                  <2> 		inc esi
  2241 00001D9C EBAD                <2> 		jmp .b
  2242                              <2> 	.done:
  2243 00001D9E C3                  <2> 		ret
  2244                              <2> 
  2245 00001D9F 0000                <2> endkeyprint dw 0
  2246                              <1> 	%include 'source/interrupts/2_readstr.asm'
  2247                              <2> readstr:
  2248 00001DA1 E805000000          <2> call readint
  2249 00001DA6 E9FDE4FFFF          <2> jmp timerinterrupt
  2250                              <2> 
  2251                              <2> 	readint:	;;get line, al=last key, esi = buffer, edi = endbuffer	
  2252 00001DAB 89C3                <2> 		mov ebx, eax
  2253                              <2> 	.b:
  2254 00001DAD 53                  <2> 		push ebx
  2255 00001DAE 57                  <2> 		push edi
  2256 00001DAF 56                  <2> 		push esi
  2257 00001DB0 30C0                <2> 		xor al, al
  2258 00001DB2 E86B050000          <2> 		call rdcharint
  2259 00001DB7 5E                  <2> 		pop esi
  2260 00001DB8 8806                <2> 		mov [esi], al
  2261 00001DBA 46                  <2> 		inc esi
  2262 00001DBB 5F                  <2> 		pop edi
  2263 00001DBC 5B                  <2> 		pop ebx
  2264 00001DBD 39FE                <2> 		cmp esi, edi
  2265 00001DBF 7304                <2> 		jae .done
  2266 00001DC1 38D8                <2> 		cmp al, bl
  2267 00001DC3 75E8                <2> 		jne .b
  2268                              <2> 	.done:
  2269 00001DC5 4E                  <2> 		dec esi
  2270 00001DC6 C60600              <2> 		mov byte [esi], 0
  2271 00001DC9 C3                  <2> 		ret
  2272                              <1> 	%include 'source/interrupts/3_clearscrn.asm'
  2273                              <2> clearscrn:
  2274 00001DCA E805000000          <2> call clear
  2275 00001DCF E9D4E4FFFF          <2> jmp timerinterrupt
  2276                              <2> %ifdef io.serial
  2277                              <2> clear:
  2278                              <2> 	ret
  2279                              <2> %else
  2280                              <2> clear:
  2281 00001DD4 668B0D[A0250000]    <2> 		mov cx, [charxy]
  2282 00001DDB BF[7E552900]        <2> 		mov edi, videobuf
  2283 00001DE0 31C0                <2> 		xor eax, eax
  2284 00001DE2 A3[96250000]        <2> 		mov [linebeginpos], eax
  2285 00001DE7 A3[9A250000]        <2> 		mov [videobufpos], eax
  2286 00001DEC 6631D2              <2> 		xor dx, dx
  2287 00001DEF 66A3[9E250000]      <2> 		mov [charpos], ax
  2288 00001DF5 66B80700            <2> 		mov ax, 7
  2289 00001DF9 C1E010              <2> 		shl eax, 16
  2290                              <2> 	clearb:
  2291 00001DFC 8907                <2> 		mov [edi], eax
  2292 00001DFE 81C704000000        <2> 		add edi, 4
  2293 00001E04 FEC9                <2> 		dec cl
  2294 00001E06 80F900              <2> 		cmp cl, 0
  2295 00001E09 75F1                <2> 		jne clearb
  2296 00001E0B 8A0D[A0250000]      <2> 		mov cl, [charxy]
  2297 00001E11 FECD                <2> 		dec ch
  2298 00001E13 80FD00              <2> 		cmp ch, 0
  2299 00001E16 75E4                <2> 		jne clearb
  2300                              <2> 	cleardouble:
  2301 00001E18 BF[C62A2A00]        <2> 		mov edi, videobuf2
  2302 00001E1D 668B0D[A0250000]    <2> 		mov cx, [charxy]
  2303 00001E24 31C0                <2> 		xor eax, eax
  2304                              <2> 	clearc:
  2305 00001E26 8907                <2> 		mov [edi], eax
  2306 00001E28 81C704000000        <2> 		add edi, 4
  2307 00001E2E FEC9                <2> 		dec cl
  2308 00001E30 80F900              <2> 		cmp cl, 0
  2309 00001E33 75F1                <2> 		jne clearc
  2310 00001E35 8A0D[A0250000]      <2> 		mov cl, [charxy]
  2311 00001E3B FECD                <2> 		dec ch
  2312 00001E3D 80FD00              <2> 		cmp ch, 0
  2313 00001E40 75E4                <2> 		jne clearc
  2314 00001E42 E86B0A0000          <2> 		call termcopy
  2315 00001E47 C3                  <2> 		ret
  2316                              <2> %endif
  2317                              <2> 		
  2318                              <1> 	%include 'source/interrupts/4_prntreadstr.asm'
  2319                              <2> prntreadstr:
  2320 00001E48 E80B000000          <2> call rdprint
  2321 00001E4D E956E4FFFF          <2> jmp timerinterrupt
  2322                              <2> 
  2323                              <2> readline:
  2324 00001E52 B00A                <2>   mov al, 10
  2325 00001E54 66BB0700            <2>   mov bx, 7
  2326                              <2> rdprint:	;print and get line, al=last key, bx=modifier, esi=buffer, edi=bufferend
  2327 00001E58 E80F000000          <2> 	call rdprintdos
  2328 00001E5D 50                  <2> 	push eax
  2329 00001E5E A0[01230000]        <2> 	mov al, [endkeyrdpr]
  2330 00001E63 30E4                <2> 	xor ah, ah
  2331 00001E65 E832050000          <2> 	call prcharint
  2332 00001E6A 58                  <2> 	pop eax
  2333 00001E6B C3                  <2> 	ret
  2334                              <2> 
  2335                              <2> 	rdprintdos: ;allows dos compatibility with read function
  2336 00001E6C 8935[0B230000]      <2> 		mov [buftxtloc], esi
  2337 00001E72 A2[01230000]        <2> 		mov [endkeyrdpr], al
  2338 00001E77 66891D[03230000]    <2> 		mov [modkeyrdpr], bx
  2339 00001E7E 8935[05230000]      <2> 		mov [firstesirdpr], esi
  2340 00001E84 893D[0F230000]      <2> 		mov [endbufferrdpr], edi
  2341 00001E8A 8B3D[1A002B00]      <2> 		mov edi, [commandsentered]
  2342 00001E90 893D[16002B00]      <2> 		mov [commandlistentries], edi
  2343                              <2> 	rdprintb:
  2344 00001E96 56                  <2> 		push esi
  2345 00001E97 B001                <2> 		mov al, 1
  2346 00001E99 E884040000          <2> 		call rdcharint
  2347 00001E9E 8A25[82230000]      <2> 		mov ah, [lastkey + 2]
  2348 00001EA4 88E1                <2> 		mov cl, ah
  2349 00001EA6 5E                  <2> 		pop esi
  2350                              <2> %ifdef io.serial
  2351                              <2> 		cmp ah, 0x41
  2352                              <2> 		je near rdprup
  2353                              <2> 		cmp ah, 0x42
  2354                              <2> 		je near rdprdown
  2355                              <2> 		cmp ah, 0x43
  2356                              <2> 		je near rdprright
  2357                              <2> 		cmp ah, 0x44
  2358                              <2> 		je near rdprleft
  2359                              <2> 		cmp ah, 0x31
  2360                              <2> 		je near rdprhome
  2361                              <2> 		cmp ah, 0x48
  2362                              <2> 		je near rdprhome
  2363                              <2> 		cmp ah, 0x46
  2364                              <2> 		je near rdprend
  2365                              <2> 		cmp ah, 0x33
  2366                              <2> 		je near rdprdel
  2367                              <2> 		cmp ah, 0x34
  2368                              <2> 		je near rdprend
  2369                              <2> %else
  2370 00001EA7 803D[9C5C0000]E0    <2> 		cmp byte [specialkey], 0xE0
  2371 00001EAE 753F                <2> 		jne notspecialrdprnt
  2372 00001EB0 80FC53              <2> 		cmp ah, 0x53
  2373 00001EB3 0F84B1030000        <2> 		je near rdprdel
  2374 00001EB9 80FC47              <2> 		cmp ah, 0x47
  2375 00001EBC 0F847E010000        <2> 		je near rdprhome
  2376 00001EC2 80FC4F              <2> 		cmp ah, 0x4F
  2377 00001EC5 0F8494010000        <2> 		je near rdprend
  2378 00001ECB 80FC50              <2> 		cmp ah, 0x50
  2379 00001ECE 0F8424020000        <2> 		je near rdprdown
  2380 00001ED4 80FC4D              <2> 		cmp ah, 0x4D
  2381 00001ED7 0F84C1010000        <2> 		je near rdprright
  2382 00001EDD 80FC4B              <2> 		cmp ah, 0x4B
  2383 00001EE0 0F8496010000        <2> 		je near rdprleft
  2384 00001EE6 80FC48              <2> 		cmp ah, 0x48
  2385 00001EE9 0F844C020000        <2> 		je near rdprup
  2386                              <2> 	notspecialrdprnt:
  2387                              <2> %endif
  2388 00001EEF 66A1[80230000]      <2> 		mov ax, [lastkey]
  2389 00001EF5 663D0800            <2> 		cmp ax, 8
  2390 00001EF9 0F84A0030000        <2> 		je near rdprbscheck
  2391 00001EFF 663D0000            <2> 		cmp ax, 0
  2392 00001F03 7491                <2> 		je rdprintb
  2393 00001F05 80F900              <2> 		cmp cl, 0
  2394 00001F08 748C                <2> 		je rdprintb
  2395 00001F0A 663D8000            <2> 		cmp ax, 0x80
  2396 00001F0E 7257                <2> 		jb .normal
  2397 00001F10 663D0008            <2> 		cmp ax, 0x800
  2398 00001F14 7321                <2> 		jae .three
  2399 00001F16 46                  <2> 		inc esi
  2400 00001F17 3B35[0F230000]      <2> 		cmp esi, [endbufferrdpr]
  2401 00001F1D 0F83DA000000        <2> 		jae near donerdprinc
  2402 00001F23 66C1E002            <2> 		shl ax, 2
  2403 00001F27 C0E802              <2> 		shr al, 2
  2404 00001F2A 0C80                <2> 		or al, 10000000b
  2405 00001F2C 80CCC0              <2> 		or ah, 11000000b
  2406 00001F2F 8866FF              <2> 		mov [esi - 1], ah
  2407 00001F32 E930000000          <2> 		jmp .normal
  2408                              <2> .three:	
  2409 00001F37 81C602000000        <2> 		add esi, 2
  2410 00001F3D 3B35[0F230000]      <2> 		cmp esi, [endbufferrdpr]
  2411 00001F43 0F83B4000000        <2> 		jae near donerdprinc
  2412 00001F49 88E1                <2> 		mov cl, ah
  2413 00001F4B C0E904              <2> 		shr cl, 4
  2414 00001F4E 80C9E0              <2> 		or cl, 11100000b
  2415 00001F51 884EFE              <2> 		mov [esi - 2], cl
  2416 00001F54 66C1E004            <2> 		shl ax, 4
  2417 00001F58 66C1E802            <2> 		shr ax, 2
  2418 00001F5C 80CC80              <2> 		or ah, 10000000b
  2419 00001F5F C0E802              <2> 		shr al, 2
  2420 00001F62 0C80                <2> 		or al, 10000000b
  2421 00001F64 8866FF              <2> 		mov [esi - 1], ah
  2422                              <2> .normal:
  2423 00001F67 8806                <2> 		mov [esi], al
  2424 00001F69 46                  <2> 		inc esi
  2425 00001F6A 66A1[80230000]      <2> 		mov ax, [lastkey]
  2426                              <2> 	bscheckequal:
  2427 00001F70 668B1D[03230000]    <2> 		mov bx, [modkeyrdpr]
  2428 00001F77 803D[0A230000]00    <2> 		cmp byte [txtmask], 0
  2429 00001F7E 7407                <2> 		je nomasktxt
  2430 00001F80 30E4                <2> 		xor ah, ah
  2431 00001F82 A0[0A230000]        <2> 		mov al, [txtmask]
  2432                              <2> 	nomasktxt:
  2433 00001F87 56                  <2> 		push esi
  2434 00001F88 66A3[FF220000]      <2> 		mov [axcache], ax
  2435 00001F8E 668B1D[01230000]    <2> 		mov bx, [endkeyrdpr]
  2436 00001F95 6639D8              <2> 		cmp ax, bx
  2437 00001F98 7432                <2> 		je nobackprintbuftxt2
  2438 00001F9A E8FD030000          <2> 		call prcharint
  2439 00001F9F BE[68360100]        <2> 		mov esi, buftxt2
  2440 00001FA4 E863FDFFFF          <2> 		call printquiet
  2441 00001FA9 66B82000            <2> 		mov ax, " "
  2442 00001FAD E8FB030000          <2> 		call prcharq
  2443 00001FB2 66B80800            <2> 		mov ax, 8
  2444 00001FB6 81FE[68360100]      <2> 		cmp esi, buftxt2
  2445 00001FBC 740E                <2> 		je nobackprintbuftxt2
  2446                              <2> 	backprintbuftxt2:
  2447 00001FBE E8EA030000          <2> 		call prcharq
  2448 00001FC3 4E                  <2> 		dec esi
  2449 00001FC4 81FE[68360100]      <2> 		cmp esi, buftxt2
  2450 00001FCA 77F2                <2> 		ja backprintbuftxt2
  2451                              <2> 	nobackprintbuftxt2:
  2452 00001FCC 663D0A00            <2> 		cmp ax, 10
  2453 00001FD0 7405                <2> 		je nonobackprint
  2454 00001FD2 E8C5030000          <2> 		call prcharint
  2455                              <2> 	nonobackprint:
  2456 00001FD7 5E                  <2> 		pop esi
  2457 00001FD8 3B35[0F230000]      <2> 		cmp esi, [endbufferrdpr]
  2458 00001FDE 0F8319000000        <2> 		jae near donerdprinc
  2459 00001FE4 66A1[FF220000]      <2> 		mov ax, [axcache]
  2460 00001FEA 8A25[01230000]      <2> 		mov ah, [endkeyrdpr]
  2461 00001FF0 38E0                <2> 		cmp al, ah
  2462 00001FF2 0F859EFEFFFF        <2> 		jne rdprintb
  2463 00001FF8 E901000000          <2> 		jmp donerdprint
  2464                              <2> 	donerdprinc:
  2465 00001FFD 46                  <2> 		inc esi
  2466                              <2> 	donerdprint:
  2467 00001FFE 4E                  <2> 		dec esi
  2468 00001FFF BF[68360100]        <2> 		mov edi, buftxt2
  2469                              <2> 	copylaterstuff:
  2470 00002004 8A07                <2> 		mov al, [edi]
  2471 00002006 3C00                <2> 		cmp al, 0
  2472 00002008 7406                <2> 		je nocopylaterstuff
  2473 0000200A 8806                <2> 		mov [esi], al
  2474 0000200C 47                  <2> 		inc edi
  2475 0000200D 46                  <2> 		inc esi
  2476 0000200E EBF4                <2> 		jmp copylaterstuff
  2477                              <2> 	nocopylaterstuff:
  2478 00002010 C60600              <2> 		mov byte [esi], 0
  2479 00002013 E80B000000          <2> 		call clearbuftxt2
  2480 00002018 89F1                <2> 		mov ecx, esi
  2481 0000201A 8B3D[05230000]      <2> 		mov edi, [firstesirdpr]
  2482 00002020 29F9                <2> 		sub ecx, edi
  2483 00002022 C3                  <2> 		ret
  2484                              <2> 	
  2485                              <2> 	clearbuftxt2:
  2486 00002023 30C0                <2> 		xor al, al
  2487 00002025 BF[68360100]        <2> 		mov edi, buftxt2
  2488                              <2> 	clearbuftxt2lp:
  2489 0000202A 8807                <2> 		mov [edi], al
  2490 0000202C 47                  <2> 		inc edi
  2491 0000202D 81FF[683A0100]      <2> 		cmp edi, buftxt
  2492 00002033 75F5                <2> 		jne clearbuftxt2lp
  2493 00002035 C3                  <2> 		ret
  2494                              <2> 	
  2495                              <2> 	rdprintb2:
  2496 00002036 E877080000          <2> 		call termcopy
  2497 0000203B E956FEFFFF          <2> 		jmp rdprintb
  2498                              <2> 	
  2499                              <2> 	rdprhome:
  2500 00002040 3B35[0B230000]      <2> 		cmp esi, [buftxtloc]
  2501 00002046 0F84EAFFFFFF        <2> 		je near rdprintb2
  2502 0000204C BF[68360100]        <2> 		mov edi, buftxt2
  2503 00002051 8A07                <2> 		mov al, [edi]
  2504 00002053 E879020000          <2> 		call shiftbuftxt2
  2505 00002058 E850030000          <2> 		call prcharq
  2506 0000205D EBE1                <2> 		jmp rdprhome
  2507                              <2> 		
  2508                              <2> 	rdprend:
  2509 0000205F BF[68360100]        <2> 		mov edi, buftxt2
  2510 00002064 8A07                <2> 		mov al, [edi]
  2511 00002066 3C00                <2> 		cmp al, 0
  2512 00002068 0F84C8FFFFFF        <2> 		je near rdprintb2
  2513 0000206E 8806                <2> 		mov [esi], al
  2514 00002070 E849000000          <2> 		call shiftbuftxt2lft
  2515 00002075 E833030000          <2> 		call prcharq
  2516 0000207A EBE3                <2> 		jmp rdprend
  2517                              <2> 	
  2518                              <2> 	rdprleft:
  2519 0000207C 3B35[0B230000]      <2> 		cmp esi, [buftxtloc]
  2520 00002082 0F840EFEFFFF        <2> 		je near rdprintb
  2521 00002088 BF[68360100]        <2> 		mov edi, buftxt2
  2522 0000208D 8A07                <2> 		mov al, [edi]
  2523 0000208F E83D020000          <2> 		call shiftbuftxt2
  2524 00002094 E803030000          <2> 		call prcharint
  2525 00002099 E9F8FDFFFF          <2> 		jmp rdprintb
  2526                              <2> 		
  2527                              <2> 	rdprright:
  2528 0000209E BF[68360100]        <2> 		mov edi, buftxt2
  2529 000020A3 8A07                <2> 		mov al, [edi]
  2530 000020A5 3C00                <2> 		cmp al, 0
  2531 000020A7 0F84E9FDFFFF        <2> 		je near rdprintb
  2532 000020AD 8806                <2> 		mov [esi], al
  2533 000020AF E80A000000          <2> 		call shiftbuftxt2lft
  2534 000020B4 E8E3020000          <2> 		call prcharint
  2535 000020B9 E9D8FDFFFF          <2> 		jmp rdprintb
  2536                              <2> 		
  2537                              <2> 	shiftbuftxt2lft:
  2538 000020BE 55                  <2> 		push ebp
  2539 000020BF 89FD                <2> 		mov ebp, edi
  2540                              <2> 	.lp:
  2541 000020C1 3C00                <2> 		cmp al, 0
  2542 000020C3 7408                <2> 		je noshiftbuftxt2lft
  2543 000020C5 47                  <2> 		inc edi
  2544 000020C6 8A07                <2> 		mov al, [edi]
  2545 000020C8 8847FF              <2> 		mov [edi - 1], al
  2546 000020CB EBF4                <2> 		jmp .lp
  2547                              <2> 	noshiftbuftxt2lft:
  2548 000020CD 8A4500              <2> 		mov al, [ebp]
  2549 000020D0 5D                  <2> 		pop ebp
  2550 000020D1 3CC0                <2> 		cmp al, 0xC0
  2551 000020D3 7304                <2> 		jae .nofix
  2552 000020D5 3C80                <2> 		cmp al, 0x80
  2553 000020D7 73E5                <2> 		jae shiftbuftxt2lft
  2554                              <2> 	.nofix:
  2555 000020D9 8A06                <2> 		mov al, [esi]
  2556 000020DB 30E4                <2> 		xor ah, ah
  2557 000020DD 46                  <2> 		inc esi
  2558 000020DE 668B1D[03230000]    <2> 		mov bx, [modkeyrdpr]
  2559 000020E5 C3                  <2> 		ret
  2560                              <2> 		
  2561                              <2> 	rdprdownbck:
  2562 000020E6 FECC                <2> 		dec ah
  2563 000020E8 8825[09230000]      <2> 		mov [commandedit], ah
  2564 000020EE E88D000000          <2> 		call rdprbckspc
  2565 000020F3 E99EFDFFFF          <2> 		jmp rdprintb
  2566                              <2> 	
  2567                              <2> 	rdprdown:
  2568 000020F8 8A25[09230000]      <2> 		mov ah, [commandedit]
  2569 000020FE 80FC01              <2> 		cmp ah, 1
  2570 00002101 0F868FFDFFFF        <2> 		jbe near rdprintb
  2571 00002107 8B3D[1A002B00]      <2> 		mov edi, [commandsentered]
  2572 0000210D 3B3D[16002B00]      <2> 		cmp edi, [commandlistentries]
  2573 00002113 7618                <2> 		jbe .nofix
  2574 00002115 8105[16002B00]0200- <2> 		add dword [commandlistentries], 2
  2575 0000211D 0000                <2>
  2576 0000211F 3B3D[16002B00]      <2> 		cmp edi, [commandlistentries]
  2577 00002125 7706                <2> 		ja .nofix
  2578 00002127 893D[16002B00]      <2> 		mov [commandlistentries], edi
  2579                              <2> 	.nofix:
  2580 0000212D 80FC02              <2> 		cmp ah, 2
  2581 00002130 74B4                <2> 		je rdprdownbck
  2582 00002132 80EC02              <2> 		sub ah, 2
  2583 00002135 8825[09230000]      <2> 		mov [commandedit], ah
  2584                              <2> 		
  2585                              <2> 	rdprup:
  2586 0000213B 3805[09230000]      <2> 		cmp [commandedit], al
  2587 00002141 0F844FFDFFFF        <2> 		je near rdprintb
  2588 00002147 813D[16002B00]0000- <2> 		cmp dword [commandlistentries], 0
  2589 0000214F 0000                <2>
  2590 00002151 0F843FFDFFFF        <2> 		je near rdprintb
  2591 00002157 FF0D[16002B00]      <2> 		dec dword [commandlistentries]
  2592                              <2> 	.lp:
  2593 0000215D BF[68360100]        <2> 		mov edi, buftxt2
  2594 00002162 8A07                <2> 		mov al, [edi]
  2595 00002164 3C00                <2> 		cmp al, 0
  2596 00002166 740E                <2> 		je .start
  2597 00002168 8806                <2> 		mov [esi], al
  2598 0000216A E84FFFFFFF          <2> 		call shiftbuftxt2lft
  2599 0000216F E839020000          <2> 		call prcharq
  2600 00002174 EBE7                <2> 		jmp .lp
  2601                              <2> 	.start:
  2602 00002176 E805000000          <2> 		call rdprbckspc
  2603 0000217B E948000000          <2> 		jmp getcurrentcommandstr
  2604                              <2> 	rdprbckspc:
  2605 00002180 3B35[0B230000]      <2> 		cmp esi, [buftxtloc]
  2606 00002186 7432                <2> 		je nordprupbck
  2607                              <2> 	rdprupbckspclp:
  2608 00002188 66B80800            <2> 		mov ax, 8
  2609 0000218C 668B1D[03230000]    <2> 		mov bx, [modkeyrdpr]
  2610 00002193 E815020000          <2> 		call prcharq
  2611 00002198 66B82000            <2> 		mov ax, ' '
  2612 0000219C E80C020000          <2> 		call prcharq
  2613 000021A1 66B80800            <2> 		mov ax, 8
  2614 000021A5 E803020000          <2> 		call prcharq
  2615 000021AA 4E                  <2> 		dec esi
  2616 000021AB 3B35[0B230000]      <2> 		cmp esi, [buftxtloc]
  2617 000021B1 7402                <2> 		je nordprupbck2
  2618 000021B3 EBD3                <2> 		jmp rdprupbckspclp
  2619                              <2> 	nordprupbck2:
  2620 000021B5 E8F8060000          <2> 		call termcopy
  2621                              <2> 	nordprupbck:
  2622 000021BA 8B3D[12002B00]      <2> 		mov edi, [commandbufpos]
  2623 000021C0 81C7[1E002B00]      <2> 		add edi, commandbuf
  2624 000021C6 4F                  <2> 		dec edi
  2625 000021C7 C3                  <2> 		ret
  2626                              <2> 	getcurrentcommandstr:
  2627 000021C8 8A25[09230000]      <2> 		mov ah, [commandedit]
  2628 000021CE FE05[09230000]      <2> 		inc byte [commandedit]
  2629                              <2> 	getccmdlp:
  2630 000021D4 4F                  <2> 		dec edi
  2631 000021D5 8A07                <2> 		mov al, [edi]
  2632 000021D7 81FF[1E002B00]      <2> 		cmp edi, commandbuf
  2633 000021DD 7231                <2> 		jb getcmdresetcommandbuf
  2634 000021DF 81EF[1E002B00]      <2> 		sub edi, commandbuf
  2635 000021E5 3B3D[12002B00]      <2> 		cmp edi, [commandbufpos]
  2636 000021EB 0F84A5FCFFFF        <2> 		je near rdprintb
  2637 000021F1 81C7[1E002B00]      <2> 		add edi, commandbuf
  2638 000021F7 3C00                <2> 		cmp al, 0
  2639 000021F9 75D9                <2> 		jne getccmdlp
  2640 000021FB FECC                <2> 		dec ah
  2641 000021FD 80FC00              <2> 		cmp ah, 0
  2642 00002200 77D2                <2> 		ja getccmdlp
  2643 00002202 47                  <2> 		inc edi
  2644 00002203 81FF[1E102B00]      <2> 		cmp edi, commandbufend
  2645 00002209 770D                <2> 		ja fixcmdbufb4morerdpr
  2646 0000220B E915000000          <2> 		jmp morerdprup
  2647                              <2> 	getcmdresetcommandbuf:
  2648 00002210 BF[1E102B00]        <2> 		mov edi, commandbufend
  2649 00002215 47                  <2> 		inc edi
  2650 00002216 EBBC                <2> 		jmp getccmdlp
  2651                              <2> 	fixcmdbufb4morerdpr:
  2652 00002218 4F                  <2> 		dec edi
  2653 00002219 81EF[1E102B00]      <2> 		sub edi, commandbufend
  2654 0000221F 81C7[1E002B00]      <2> 		add edi, commandbuf
  2655                              <2> 	morerdprup:
  2656 00002225 8A07                <2> 		mov al, [edi]
  2657 00002227 47                  <2> 		inc edi
  2658 00002228 81EF[1E002B00]      <2> 		sub edi, commandbuf
  2659 0000222E 3C00                <2> 		cmp al, 0
  2660 00002230 0F8400FEFFFF        <2> 		je near rdprintb2
  2661 00002236 3B3D[12002B00]      <2> 		cmp edi, [commandbufpos]
  2662 0000223C 0F83F4FDFFFF        <2> 		jae near rdprintb2
  2663 00002242 81C7[1E002B00]      <2> 		add edi, commandbuf
  2664 00002248 8806                <2> 		mov [esi], al
  2665 0000224A 46                  <2> 		inc esi
  2666 0000224B 57                  <2> 		push edi
  2667 0000224C 668B1D[03230000]    <2> 		mov bx, [modkeyrdpr]
  2668 00002253 30E4                <2> 		xor ah, ah
  2669 00002255 E853010000          <2> 		call prcharq
  2670 0000225A 5F                  <2> 		pop edi
  2671 0000225B 81FF[1E102B00]      <2> 		cmp edi, commandbufend
  2672 00002261 76C2                <2> 		jbe morerdprup
  2673 00002263 BF[1E002B00]        <2> 		mov edi, commandbuf
  2674 00002268 EBBB                <2> 		jmp morerdprup
  2675                              <2> 
  2676                              <2> 	rdprdel:
  2677 0000226A BF[68360100]        <2> 		mov edi, buftxt2
  2678 0000226F 8A07                <2> 		mov al, [edi]
  2679 00002271 3C00                <2> 		cmp al, 0
  2680 00002273 0F841DFCFFFF        <2> 		je near rdprintb
  2681 00002279 8806                <2> 		mov [esi], al
  2682 0000227B 3C80                <2> 		cmp al, 0x80
  2683 0000227D 7216                <2> 		jb .fn
  2684                              <2> 	.lp:
  2685 0000227F 46                  <2> 		inc esi
  2686 00002280 47                  <2> 		inc edi
  2687 00002281 8A07                <2> 		mov al, [edi]
  2688 00002283 3C00                <2> 		cmp al, 0
  2689 00002285 0F840BFCFFFF        <2> 		je near rdprintb
  2690 0000228B 8806                <2> 		mov [esi], al
  2691 0000228D 3C80                <2> 		cmp al, 0x80
  2692 0000228F 7204                <2> 		jb .fn
  2693 00002291 3CC0                <2> 		cmp al, 0xC0
  2694 00002293 72EA                <2> 		jb .lp
  2695                              <2> 	.fn:
  2696 00002295 E824FEFFFF          <2> 		call shiftbuftxt2lft
  2697 0000229A E80E010000          <2> 		call prcharq
  2698                              <2> 		
  2699                              <2> 	rdprbscheck:
  2700 0000229F 3B35[05230000]      <2> 		cmp esi, [firstesirdpr]
  2701 000022A5 0F86EBFBFFFF        <2> 		jbe near rdprintb
  2702                              <2> 	goodbscheck:
  2703 000022AB 4E                  <2> 		dec esi
  2704 000022AC 8A46FF              <2> 		mov al, [esi - 1]
  2705 000022AF C60600              <2> 		mov byte [esi], 0
  2706 000022B2 3CC0                <2> 		cmp al, 0xC0
  2707 000022B4 7309                <2> 		jae .onemore
  2708 000022B6 3C80                <2> 		cmp al, 0x80
  2709 000022B8 73F1                <2> 		jae goodbscheck
  2710 000022BA E904000000          <2> 		jmp .nomore
  2711                              <2> 	.onemore:
  2712 000022BF 4E                  <2> 		dec esi
  2713 000022C0 C60600              <2> 		mov byte [esi], 0		
  2714                              <2> 	.nomore:
  2715 000022C3 668B1D[03230000]    <2> 		mov bx, [modkeyrdpr]
  2716 000022CA B008                <2> 		mov al, 8
  2717 000022CC E99FFCFFFF          <2> 		jmp bscheckequal
  2718                              <2> 		
  2719                              <2> 	shiftbuftxt2:
  2720 000022D1 55                  <2> 		push ebp
  2721 000022D2 89FD                <2> 		mov ebp, edi
  2722                              <2> 	.lp
  2723 000022D4 3C00                <2> 		cmp al, 0
  2724 000022D6 7409                <2> 		je noshiftbuftxt2
  2725 000022D8 47                  <2> 		inc edi
  2726 000022D9 8A27                <2> 		mov ah, [edi]
  2727 000022DB 8807                <2> 		mov [edi], al
  2728 000022DD 88E0                <2> 		mov al, ah
  2729 000022DF EBF3                <2> 		jmp .lp
  2730                              <2> 	noshiftbuftxt2:
  2731 000022E1 8A4500              <2> 		mov al, [ebp]
  2732 000022E4 5D                  <2> 		pop ebp
  2733 000022E5 3CC0                <2> 		cmp al, 0xC0
  2734 000022E7 7304                <2> 		jae .nofix
  2735 000022E9 3C80                <2> 		cmp al, 0x80
  2736 000022EB 73E4                <2> 		jae shiftbuftxt2
  2737                              <2> 	.nofix:
  2738 000022ED BF[68360100]        <2> 		mov edi, buftxt2
  2739 000022F2 4E                  <2> 		dec esi
  2740 000022F3 8A06                <2> 		mov al, [esi]
  2741 000022F5 8807                <2> 		mov [edi], al
  2742 000022F7 C60600              <2> 		mov byte [esi], 0
  2743 000022FA 66B80800            <2> 		mov ax, 8
  2744 000022FE C3                  <2> 		ret
  2745                              <2> 		
  2746 000022FF 0000                <2> axcache dw 0
  2747 00002301 0000                <2> endkeyrdpr dw 0
  2748 00002303 0000                <2> modkeyrdpr dw 0
  2749 00002305 00000000            <2> firstesirdpr dd 0
  2750 00002309 00                  <2> commandedit db 0
  2751 0000230A 00                  <2> txtmask db 0
  2752 0000230B 00000000            <2> buftxtloc dd 0
  2753 0000230F 00000000            <2> endbufferrdpr dd 0
  2754 00002313 082000              <2> backcursor db 8," ",0
  2755                              <1> 	%include 'source/interrupts/5_readchar.asm'
  2756                              <2> readchar:
  2757 00002316 E807000000          <2> 	call rdcharint
  2758 0000231B E988DFFFFF          <2> 	jmp timerinterrupt
  2759                              <2> getchar:
  2760 00002320 30C0                <2> 	xor al, al
  2761                              <2> 	rdcharint:		;get char, if al is 0, wait for key
  2762 00002322 66C705[84230000]01- <2> 		mov word [trans], 1
  2763 0000232A 00                  <2>
  2764 0000232B 3C00                <2> 		cmp al, 0
  2765 0000232D 7509                <2> 		jne transcheck
  2766 0000232F 66C705[84230000]00- <2> 		mov word [trans], 0
  2767 00002337 00                  <2>
  2768                              <2> 	transcheck:
  2769                              <2> 	%ifdef io.serial
  2770                              <2> 		call serial.receive
  2771                              <2> 		xor ah, ah
  2772                              <2> 		cmp al, 13
  2773                              <2> 		je rdenter
  2774                              <2> 	%else
  2775 00002338 E881390000          <2> 		call getkey
  2776 0000233D 66A1[82230000]      <2> 		mov ax, [lastkey + 2]
  2777 00002343 663D1C00            <2> 		cmp ax, 0x1C
  2778 00002347 7425                <2> 		je rdenter
  2779                              <2> 	%endif
  2780 00002349 66A1[80230000]      <2> 		mov ax, [lastkey]
  2781 0000234F 668B1D[84230000]    <2> 		mov bx, [trans]
  2782 00002356 803D[9C5C0000]E0    <2> 		cmp byte [specialkey], 0xE0
  2783 0000235D 7500                <2> 		jne nospecialtrans
  2784                              <2> 	nospecialtrans:
  2785 0000235F 6609C3              <2> 		or bx, ax
  2786 00002362 6681FB0000          <2> 		cmp bx, 0
  2787 00002367 74CF                <2> 		je transcheck
  2788 00002369 E90C000000          <2> 		jmp rdend
  2789                              <2> 	rdenter:
  2790 0000236E C1E010              <2> 		shl eax, 16
  2791 00002371 66B80A00            <2> 		mov ax, 10
  2792 00002375 A3[80230000]        <2> 		mov [lastkey], eax
  2793                              <2> 	rdend:
  2794 0000237A A1[80230000]        <2> 		mov eax, [lastkey]
  2795 0000237F C3                  <2> 		ret
  2796                              <2> 		
  2797 00002380 00000000            <2> lastkey dd 0
  2798 00002384 0000                <2> trans dw 0
  2799                              <1> 	%include 'source/interrupts/6_prntchar.asm'
  2800                              <2> prntchar:
  2801 00002386 30E4                <2> 	xor ah, ah
  2802                              <2> %ifdef io.serial
  2803                              <2> 	call prcharint
  2804                              <2> 	jmp timerinterrupt
  2805                              <2> prcharint:	
  2806                              <2> prcharq:
  2807                              <2> 	call serial.send
  2808                              <2> 	ret
  2809                              <2> %else
  2810 00002388 38FB                <2> cmp bl, bh
  2811 0000238A 740A                <2> je prchar.notimer
  2812 0000238C E80B000000          <2> call prcharint
  2813 00002391 E912DFFFFF          <2> jmp timerinterrupt
  2814                              <2> prchar.notimer:
  2815 00002396 E812000000          <2> 	call prcharq
  2816 0000239B CF                  <2> 	iret
  2817                              <2> 	
  2818                              <2> prcharint:	;print char, char in ax, modifier in bx, if bl = bh  then termcopy will not happen, will run termcopy if called as is
  2819 0000239C 38FB                <2> 	cmp bl, bh
  2820 0000239E 740D                <2> 	je prcharq
  2821 000023A0 E808000000          <2> 	call prcharq
  2822 000023A5 E808050000          <2> 	call termcopy
  2823 000023AA C3                  <2> 	ret
  2824 000023AB 00                  <2> termguion db 0
  2825 000023AC 00                  <2> termcopyon db 0
  2826                              <2> prcharq:
  2827 000023AD C1E310              <2> 	shl ebx, 16
  2828 000023B0 6689C3              <2> 	mov bx, ax
  2829 000023B3 89D8                <2> 	mov eax, ebx
  2830 000023B5 A3[A2250000]        <2> 	mov [charbuf], eax
  2831 000023BA 8B1D[9A250000]      <2> 	mov ebx, [videobufpos]
  2832 000023C0 BF[7E552900]        <2> 	mov edi, videobuf
  2833 000023C5 01DF                <2> 	add edi, ebx
  2834 000023C7 A1[BD280000]        <2> 	mov eax, [removedvideo]
  2835 000023CC 8907                <2> 	mov [edi], eax
  2836 000023CE A1[A2250000]        <2> 	mov eax, [charbuf]
  2837 000023D3 31D2                <2> 	xor edx, edx
  2838 000023D5 668B15[9E250000]    <2> 	mov dx, [charpos]
  2839 000023DC 31C9                <2> 	xor ecx, ecx
  2840 000023DE 668B0D[A0250000]    <2> 	mov cx, [charxy]
  2841 000023E5 663D0900            <2> 	cmp ax, 9
  2842 000023E9 0F8479000000        <2> 	je near prtab
  2843 000023EF 663D0D00            <2> 	cmp ax, 13		;I am phasing this out-it is used by windows but not unix based systems
  2844 000023F3 0F849C000000        <2> 	je near prcr
  2845 000023F9 663D0A00            <2> 	cmp ax, 10
  2846 000023FD 0F84E5000000        <2> 	je near prnlcr
  2847 00002403 663D0800            <2> 	cmp ax, 8
  2848 00002407 0F8499000000        <2> 	je near prbs
  2849 0000240D 663DFF00            <2> 	cmp ax, 255		;null character
  2850 00002411 0F8424000000        <2> 	je near donescr
  2851 00002417 663D0008            <2> 	cmp ax, (fontend - fonts)/16
  2852 0000241B 0F8341000000        <2> 	jae near prnofont
  2853                              <2> donepr:
  2854 00002421 8907                <2> 	mov [edi], eax
  2855 00002423 81C704000000        <2> 	add edi, 4
  2856 00002429 FEC2                <2> 	inc dl
  2857                              <2> donecrnl:
  2858 0000242B 38CA                <2> 	cmp dl, cl
  2859 0000242D 0F83D9000000        <2> 	jae near preol
  2860                              <2> doneeol:
  2861 00002433 38EE                <2> 	cmp dh, ch
  2862 00002435 0F83EE000000        <2> 	jae near prscr	
  2863                              <2> donescr:
  2864 0000243B 89FB                <2> 	mov ebx, edi
  2865 0000243D 8B07                <2> 	mov eax, [edi]
  2866 0000243F A3[BD280000]        <2> 	mov [removedvideo], eax
  2867 00002444 81EB[7E552900]      <2> 	sub ebx, videobuf
  2868 0000244A 891D[9A250000]      <2> 	mov [videobufpos], ebx
  2869 00002450 668915[9E250000]    <2> 	mov [charpos], dx
  2870 00002457 A1[A2250000]        <2> 	mov eax, [charbuf]
  2871 0000245C 89C3                <2> 	mov ebx, eax
  2872 0000245E C1EB10              <2> 	shr ebx, 16
  2873 00002461 C3                  <2> 	ret
  2874                              <2> 	
  2875                              <2> 	prnofont:
  2876 00002462 66B80200            <2> 		mov ax, 2
  2877 00002466 EBB9                <2> 		jmp donepr
  2878                              <2> 	prtab:
  2879 00002468 8B1D[96250000]      <2> 		mov ebx, [linebeginpos]
  2880 0000246E 81EF[7E552900]      <2> 		sub edi, videobuf
  2881 00002474 29DF                <2> 		sub edi, ebx
  2882 00002476 C1EF05              <2> 		shr edi, 5
  2883 00002479 C1E705              <2> 		shl edi, 5
  2884 0000247C 81C720000000        <2> 		add edi, 32
  2885 00002482 C0EA03              <2> 		shr dl, 3
  2886 00002485 C0E203              <2> 		shl dl, 3
  2887 00002488 80C208              <2> 		add dl, 8
  2888 0000248B 81C7[7E552900]      <2> 		add edi, videobuf
  2889 00002491 01DF                <2> 		add edi, ebx
  2890 00002493 EB96                <2> 		jmp donecrnl
  2891                              <2> 	
  2892                              <2> 	prcr:
  2893 00002495 30D2                <2> 		xor dl, dl
  2894 00002497 BF[7E552900]        <2> 		mov edi, videobuf
  2895 0000249C 8B1D[96250000]      <2> 		mov ebx, [linebeginpos]
  2896 000024A2 01DF                <2> 		add edi, ebx
  2897 000024A4 EB85                <2> 		jmp donecrnl
  2898                              <2> 			
  2899                              <2> 	prbs:
  2900 000024A6 8B1D[96250000]      <2> 		mov ebx, [linebeginpos]
  2901 000024AC 80FA00              <2> 		cmp dl, 0
  2902 000024AF 7415                <2> 		je prbackline
  2903                              <2> 	prnobmr:
  2904 000024B1 891D[96250000]      <2> 		mov [linebeginpos], ebx
  2905 000024B7 FECA                <2> 		dec dl
  2906 000024B9 31C0                <2> 		xor eax, eax
  2907 000024BB 81EF04000000        <2> 		sub edi, 4
  2908 000024C1 E965FFFFFF          <2> 		jmp donecrnl
  2909                              <2> 	prbackline:
  2910 000024C6 6631DB              <2> 		xor bx, bx
  2911 000024C9 88CA                <2> 		mov dl, cl
  2912 000024CB 80FE00              <2> 		cmp dh, 0
  2913 000024CE 74E1                <2> 		je prnobmr
  2914 000024D0 8B1D[96250000]      <2> 		mov ebx, [linebeginpos]
  2915 000024D6 6651                <2> 		push cx
  2916 000024D8 31C9                <2> 		xor ecx, ecx
  2917 000024DA 8A0C24              <2> 		mov cl, [esp]
  2918 000024DD C1E102              <2> 		shl ecx, 2
  2919 000024E0 29CB                <2> 		sub ebx, ecx
  2920 000024E2 6659                <2> 		pop cx
  2921 000024E4 FECE                <2> 		dec dh
  2922 000024E6 EBC9                <2> 		jmp prnobmr
  2923                              <2> 		
  2924                              <2> 	prnlcr:
  2925 000024E8 FEC6                <2> 		inc dh
  2926 000024EA 31DB                <2> 		xor ebx, ebx
  2927 000024EC 30D2                <2> 		xor dl, dl
  2928 000024EE 88CB                <2> 		mov bl, cl
  2929 000024F0 66C1E302            <2> 		shl bx, 2
  2930 000024F4 BF[7E552900]        <2> 		mov edi, videobuf
  2931 000024F9 031D[96250000]      <2> 		add ebx, [linebeginpos]
  2932 000024FF 891D[96250000]      <2> 		mov [linebeginpos], ebx
  2933 00002505 01DF                <2> 		add edi, ebx
  2934 00002507 E91FFFFFFF          <2> 		jmp donecrnl
  2935                              <2> 		
  2936                              <2> 	preol:
  2937 0000250C 30D2                <2> 		xor dl, dl
  2938 0000250E FEC6                <2> 		inc dh
  2939 00002510 31DB                <2> 		xor ebx, ebx
  2940 00002512 88CB                <2> 		mov bl, cl
  2941 00002514 66C1E302            <2> 		shl bx, 2
  2942 00002518 031D[96250000]      <2> 		add ebx, [linebeginpos]
  2943 0000251E 891D[96250000]      <2> 		mov [linebeginpos], ebx
  2944 00002524 E90AFFFFFF          <2> 		jmp doneeol
  2945                              <2> 	prscr:
  2946 00002529 FECE                <2> 		dec dh
  2947 0000252B BF[7E552900]        <2> 		mov edi, videobuf
  2948 00002530 31DB                <2> 		xor ebx, ebx
  2949 00002532 88CB                <2> 		mov bl, cl
  2950 00002534 66C1E302            <2> 		shl bx, 2
  2951 00002538 01FB                <2> 		add ebx, edi
  2952                              <2> 	intscrollloop:
  2953 0000253A 8B03                <2> 		mov eax, [ebx]
  2954 0000253C 8907                <2> 		mov [edi], eax
  2955 0000253E 81C704000000        <2> 		add edi, 4
  2956 00002544 81C304000000        <2> 		add ebx, 4
  2957 0000254A FEC9                <2> 		dec cl
  2958 0000254C 80F900              <2> 		cmp cl, 0
  2959 0000254F 75E9                <2> 		jne intscrollloop
  2960 00002551 8A0D[A0250000]      <2> 		mov cl, [charxy]
  2961 00002557 FECD                <2> 		dec ch
  2962 00002559 80FD01              <2> 		cmp ch, 1
  2963 0000255C 77DC                <2> 		ja intscrollloop
  2964 0000255E 31C0                <2> 		xor eax, eax
  2965 00002560 81EF[7E552900]      <2> 		sub edi, videobuf
  2966 00002566 893D[96250000]      <2> 		mov [linebeginpos], edi
  2967 0000256C 81C7[7E552900]      <2> 		add edi, videobuf
  2968 00002572 89FB                <2> 		mov ebx, edi
  2969                              <2> 	intloopclear:
  2970 00002574 8903                <2> 		mov [ebx], eax
  2971 00002576 81C304000000        <2> 		add ebx, 4
  2972 0000257C FEC9                <2> 		dec cl
  2973 0000257E 80F900              <2> 		cmp cl, 0
  2974 00002581 75F1                <2> 		jne intloopclear
  2975 00002583 FECD                <2> 		dec ch
  2976 00002585 80FD00              <2> 		cmp ch, 0
  2977 00002588 75EA                <2> 		jne intloopclear
  2978 0000258A 668B0D[A0250000]    <2> 		mov cx, [charxy]
  2979 00002591 E9A5FEFFFF          <2> 		jmp donescr
  2980                              <2> 		
  2981 00002596 00000000            <2> linebeginpos dd 0
  2982 0000259A 00000000            <2> videobufpos: dd 0
  2983 0000259E 0000                <2> charpos db 0,0
  2984 000025A0 501E                <2> charxy db 80,30
  2985 000025A2 00000000            <2> charbuf dd 0
  2986                              <2> %endif
  2987                              <1> 	%include 'source/interrupts/7_openfile.asm'
  2988                              <2> openfile:
  2989 000025A6 E896400000          <2> 	call loadfile
  2990 000025AB E9F8DCFFFF          <2> 	jmp timerinterrupt
  2991                              <1> 	%include 'source/interrupts/9_num2str.asm'
  2992                              <2> num2str:
  2993 000025B0 3C00                <2> 	cmp al, 0
  2994 000025B2 750A                <2> 	jne num2strb
  2995 000025B4 E8E10C0000          <2> 	call showdec
  2996 000025B9 E9EADCFFFF          <2> 	jmp timerinterrupt
  2997                              <2> num2strb:
  2998 000025BE E80D0C0000          <2> 	call showhex
  2999 000025C3 E9E0DCFFFF          <2> 	jmp timerinterrupt
  3000                              <1> 	%include 'source/interrupts/10_str2num.asm'
  3001                              <2> str2num:
  3002 000025C8 89F7                <2> 	mov edi, esi
  3003 000025CA E8AD0D0000          <2> 	call cnvrttxt	;the string goes into esi, number into ecx
  3004 000025CF E9D4DCFFFF          <2> 	jmp timerinterrupt
  3005                              <2> 	
  3006                              <1> %ifdef threads.included
  3007                              <1> 	%include 'source/interrupts/11_forkthread.asm'
  3008                              <2> forkthread:
  3009                              <2> 			 ;esi is next thread's start address, if 0, fork current thread
  3010                              <2> 			;returns the PID of the new fork in ebx
  3011                              <2> ;WARNING:THIS WILL NOT WORK IN C UNTIL IT COPIES THE ENTIRE STACK
  3012 000025D4 FA                  <2> 	cli
  3013 000025D5 60                  <2> 	pushad
  3014 000025D6 8925[A3260000]      <2> 	mov [.espold], esp
  3015 000025DC C605[E0670000]01    <2> 	mov byte [threadson], 1
  3016 000025E3 8B1D[E1670000]      <2> 	mov ebx, [currentthread]
  3017 000025E9 C1E302              <2> 	shl ebx, 2
  3018 000025EC 89A3[32302B00]      <2> 	mov [threadlist + ebx], esp
  3019 000025F2 C1EB02              <2> 	shr ebx, 2
  3020 000025F5 81FB00000000        <2> 	cmp ebx, 0
  3021 000025FB 750C                <2> 	jne .simplestack
  3022 000025FD BB[841F0100]        <2> 	mov ebx, stackend
  3023 00002602 29E3                <2> 	sub ebx, esp
  3024 00002604 E90B000000          <2> 	jmp .stackcalcdone
  3025                              <2> .simplestack:
  3026 00002609 C1E30A              <2> 	shl ebx, 10
  3027 0000260C 81C3[32442B00]      <2> 	add ebx, stack1
  3028 00002612 29E3                <2> 	sub ebx, esp
  3029                              <2> .stackcalcdone:
  3030 00002614 29DC                <2> 	sub esp, ebx
  3031 00002616 81C4[32442B00]      <2> 	add esp, stack1
  3032 0000261C 8B1D[DC670000]      <2> 	mov ebx, [lastthread]
  3033 00002622 C1E308              <2> 	shl ebx, 8
  3034 00002625 01DC                <2> 	add esp, ebx
  3035 00002627 891D[A7260000]      <2> 	mov [.stackend], ebx
  3036                              <2> 
  3037 0000262D 89E5                <2> 	mov ebp, esp
  3038 0000262F 8B25[A3260000]      <2> 	mov esp, [.espold]
  3039                              <2> 
  3040 00002635 C1EB0A              <2> 	shr ebx, 10 ;get pid then push it
  3041 00002638 895C2410            <2> 	mov [esp + 16], ebx ;set the old ebx to the new PID
  3042                              <2> 
  3043 0000263C 31DB                <2> 	xor ebx, ebx
  3044                              <2> .stackcopy:
  3045 0000263E 668B041C            <2> 	mov ax, [esp + ebx]
  3046 00002642 6689441D00          <2> 	mov [ebp + ebx], ax
  3047 00002647 81C302000000        <2> 	add ebx, 2
  3048 0000264D 3B1D[A7260000]      <2> 	cmp ebx, [.stackend]
  3049 00002653 72E9                <2> 	jb .stackcopy
  3050                              <2> 
  3051 00002655 31C0                <2> 	xor eax, eax
  3052 00002657 668CC8              <2> 	mov ax, cs
  3053 0000265A 89C2                <2> 	mov edx, eax
  3054 0000265C 8B4C2428            <2> 	mov ecx, [esp + 40]
  3055 00002660 81C900020000        <2> 	or ecx, 0x200
  3056                              <2> 	
  3057 00002666 81FE00000000        <2> 	cmp esi, 0
  3058 0000266C 7504                <2> 	jne .nochangestack
  3059 0000266E 8B742420            <2> 	mov esi, [esp + 32]
  3060                              <2> .nochangestack:
  3061 00002672 89F0                <2> 	mov eax, esi
  3062 00002674 89EC                <2> 	mov esp, ebp
  3063                              <2> 
  3064 00002676 89442420            <2> 	mov [esp + 32], eax
  3065 0000267A 89542424            <2> 	mov [esp + 36], edx
  3066 0000267E 894C2428            <2> 	mov [esp + 40], ecx
  3067                              <2> 
  3068 00002682 8B1D[DC670000]      <2> 	mov ebx, [lastthread]
  3069 00002688 89A3[32302B00]      <2> 	mov [threadlist + ebx], esp
  3070 0000268E 81C304000000        <2> 	add ebx, 4
  3071 00002694 891D[DC670000]      <2> 	mov [lastthread], ebx
  3072 0000269A 8B25[A3260000]      <2> 	mov esp, [.espold]
  3073 000026A0 61                  <2> 	popad
  3074 000026A1 FB                  <2> 	sti
  3075 000026A2 CF                  <2> 	iret
  3076                              <2> 
  3077 000026A3 00000000            <2> .espold dd 0
  3078 000026A7 00000000            <2> .stackend dd 0
  3079                              <1> %endif
  3080                              <1> 	%include 'source/interrupts/12_gettime.asm'
  3081                              <2> gettime:
  3082 000026AB A1[60020000]        <2> 	mov eax, [timeseconds]
  3083 000026B0 8B1D[64020000]      <2> 	mov ebx, [timenanoseconds]
  3084 000026B6 89D9                <2> 	mov ecx, ebx
  3085 000026B8 C1E90A              <2> 	shr ecx, 10	;this is in microseconds
  3086 000026BB E9E8DBFFFF          <2> 	jmp timerinterrupt
  3087                              <1> 	%include 'source/interrupts/13_settime.asm'
  3088                              <2> settime:
  3089 000026C0 A3[60020000]        <2> 	mov [timeseconds], eax
  3090 000026C5 891D[64020000]      <2> 	mov [timenanoseconds], ebx
  3091 000026CB E9D8DBFFFF          <2> 	jmp timerinterrupt
  3092                              <2> 	
  3093                              <1> 	%include 'source/interrupts/14_runcmd.asm'
  3094                              <2> runcmd:
  3095 000026D0 BF[683A0100]        <2> 	mov edi, buftxt
  3096                              <2> cpcmd:
  3097 000026D5 8A06                <2> 	mov al, [esi]
  3098 000026D7 8807                <2> 	mov [edi], al
  3099 000026D9 46                  <2> 	inc esi
  3100 000026DA 47                  <2> 	inc edi
  3101 000026DB 3C00                <2> 	cmp al, 0
  3102 000026DD 75F6                <2> 	jne cpcmd
  3103 000026DF E8EF070000          <2> 	call run
  3104 000026E4 CF                  <2> 	iret
  3105                              <1> 	%include 'source/interrupts/15_proginfo.asm'
  3106                              <2> proginfo:
  3107                              <2> 	;mov ebx, variables
  3108 000026E5 8B35[A92F0000]      <2> 	mov esi, [currentcommandloc]
  3109 000026EB 89F7                <2> 	mov edi, esi
  3110 000026ED 31C9                <2> 	xor ecx, ecx
  3111                              <2> getcommandzeroes:
  3112 000026EF 8A07                <2> 	mov al, [edi]
  3113 000026F1 47                  <2> 	inc edi
  3114 000026F2 3C3B                <2> 	cmp al, ';'
  3115 000026F4 740B                <2> 	je nomorezeroes
  3116 000026F6 3C00                <2> 	cmp al, 0
  3117 000026F8 7407                <2> 	je nomorezeroes
  3118 000026FA 3C20                <2> 	cmp al, ' '
  3119 000026FC 75F1                <2> 	jne getcommandzeroes
  3120 000026FE 41                  <2> 	inc ecx
  3121 000026FF EBEE                <2> 	jmp getcommandzeroes
  3122                              <2> nomorezeroes:
  3123 00002701 41                  <2> 	inc ecx
  3124 00002702 4F                  <2> 	dec edi
  3125 00002703 8B1D[F4250100]      <2> 	mov ebx, [uid]
  3126 00002709 8B15[E1670000]      <2> 	mov edx, [currentthread]
  3127 0000270F CF                  <2> 	iret
  3128                              <2> 	
  3129                              <1> 	%include 'source/interrupts/16_hooksig.asm'
  3130                              <2> hooksig: ;hook code in ESI to signal in AL
  3131 00002710 3C00                <2> 	cmp al, 0
  3132 00002712 7507                <2> 	jne .quit	;only sig 0, the escape key, is handled, and only for one app
  3133                              <2> ;	xor ebx, ebx
  3134                              <2> ;	mov bl, al
  3135                              <2> ;	shl bl, 2
  3136 00002714 BF[E41F0100]        <2> 	mov edi, sigtable
  3137 00002719 8937                <2> 	mov [edi], esi
  3138                              <2> .quit:
  3139 0000271B E988DBFFFF          <2> 	jmp timerinterrupt
  3140                              <1> %ifdef gui.included
  3141                              <1> 	%include 'source/interrupts/17_guiint.asm'
  3142                              <2> guiint:
  3143 00002720 3CFD                <2> 	cmp al, 253
  3144 00002722 0F8491000000        <2> 	je near .getinfo
  3145 00002728 803D[9C8B0000]01    <2> 	cmp byte [guion], 1
  3146 0000272F 0F8550000000        <2> 	jne near .nogui
  3147 00002735 3C00                <2> 	cmp al, 0
  3148 00002737 0F844D000000        <2> 	je near .clear
  3149 0000273D 3C01                <2> 	cmp al, 1
  3150 0000273F 0F84E7000000        <2> 	je near .putpixel
  3151 00002745 3C02                <2> 	cmp al, 2
  3152 00002747 0F84EC000000        <2> 	je near .drawtext
  3153 0000274D 3C03                <2> 	cmp al, 3
  3154 0000274F 0F84FF000000        <2> 	je near .drawline
  3155 00002755 3C04                <2> 	cmp al, 4
  3156 00002757 0F840A010000        <2> 	je near .drawcircle
  3157 0000275D 3C05                <2> 	cmp al, 5
  3158 0000275F 0F8412010000        <2> 	je near .fillcircle
  3159 00002765 3C06                <2> 	cmp al, 6
  3160 00002767 0F841A010000        <2> 	je near .drawsquare
  3161 0000276D 3C07                <2> 	cmp al, 7
  3162 0000276F 0F8425010000        <2> 	je near .fillsquare
  3163 00002775 3CFE                <2> 	cmp al, 254
  3164 00002777 0F8467000000        <2> 	je near .setinfo
  3165 0000277D 3CFF                <2> 	cmp al, 255
  3166 0000277F 0F8464000000        <2> 	je near .reset
  3167                              <2> .nogui:
  3168 00002785 E91EDBFFFF          <2> 	jmp timerinterrupt
  3169                              <2> 
  3170                              <2> .clear:		;color in bx
  3171 0000278A 66891D[4D6F0000]    <2> 	mov [background], bx
  3172                              <2> %ifdef gui.background
  3173 00002791 8B1D[1F6F0000]      <2> 	mov ebx, [backgroundimage]
  3174 00002797 81FB00000000        <2> 	cmp ebx, 0
  3175 0000279D 7410                <2> 	je .clearit
  3176 0000279F C705[1F6F0000]0000- <2> 	mov dword [backgroundimage], 0
  3177 000027A7 0000                <2>
  3178 000027A9 891D[28280000]      <2> 	mov [.bgi], ebx
  3179                              <2> .clearit:
  3180                              <2> %endif
  3181 000027AF E80A470000          <2> 	call guiclear
  3182 000027B4 E9EFDAFFFF          <2> 	jmp timerinterrupt
  3183                              <2> 	
  3184                              <2> .getinfo:	;puts screen size in (dx, cx), background color in bx, and will put other stuff in other places
  3185 000027B9 6631DB              <2> 	xor bx, bx
  3186 000027BC 6631C9              <2> 	xor cx, cx
  3187 000027BF 6631D2              <2> 	xor dx, dx
  3188 000027C2 381D[9C8B0000]      <2> 	cmp [guion], bl
  3189 000027C8 74BB                <2> 	je .nogui
  3190 000027CA 668B1D[4D6F0000]    <2> 	mov bx, [background]
  3191 000027D1 668B15[F2570000]    <2> 	mov dx, [resolutionx]
  3192 000027D8 668B0D[F4570000]    <2> 	mov cx, [resolutiony]
  3193 000027DF E9C4DAFFFF          <2> 	jmp timerinterrupt
  3194                              <2> 	
  3195                              <2> .setinfo:	;does nothing yet. will get screen size in (dx, cx), background color in bx, and will put other stuff in other places
  3196 000027E4 E9BFDAFFFF          <2> 	jmp timerinterrupt
  3197                              <2> .reset:		;resets the screen to the original settings
  3198 000027E9 66BBCF7B            <2> 	mov bx, background.original
  3199 000027ED 66891D[4D6F0000]    <2> 	mov [background], bx
  3200 000027F4 66BBFFFF            <2> 	mov bx, 0xFFFF
  3201 000027F8 66891D[12760000]    <2> 	mov [colorfont2], bx
  3202                              <2> %ifdef gui.background
  3203 000027FF 8B1D[1F6F0000]      <2> 	mov ebx, [backgroundimage]
  3204 00002805 81FB00000000        <2> 	cmp ebx, 0
  3205 0000280B 750C                <2> 	jne .resetit
  3206 0000280D 8B1D[28280000]      <2> 	mov ebx, [.bgi]
  3207 00002813 891D[1F6F0000]      <2> 	mov [backgroundimage], ebx
  3208                              <2> .resetit:
  3209                              <2> %endif
  3210 00002819 E8A0460000          <2> 	call guiclear
  3211 0000281E E82E470000          <2> 	call reloadallgraphics
  3212 00002823 E980DAFFFF          <2> 	jmp timerinterrupt
  3213                              <2> 
  3214                              <2> %ifdef gui.background
  3215 00002828 00000000            <2> 	.bgi dd 0
  3216                              <2> %endif
  3217                              <2> 	
  3218                              <2> .putpixel:	;pixel location in (dx, cx), color in bx
  3219 0000282C 6689DE              <2> 	mov si, bx
  3220 0000282F E8F85D0000          <2> 	call putpixel
  3221 00002834 E96FDAFFFF          <2> 	jmp timerinterrupt
  3222                              <2> 
  3223                              <2> .drawtext:	;background in di, foreground in bx, location in (dx,cx), string in esi
  3224 00002839 66D1E2              <2> 	shl dx, 1
  3225 0000283C 66891D[12760000]    <2> 	mov [colorfont2], bx
  3226 00002843 66893D[4D6F0000]    <2> 	mov [background], di
  3227 0000284A E85B4D0000          <2> 	call showstring2
  3228 0000284F E954DAFFFF          <2> 	jmp timerinterrupt
  3229                              <2> 
  3230                              <2> .drawline:	;color in bx, start in (dx,cx), end in (di,si)
  3231 00002854 6689F0              <2> 	mov ax, si
  3232 00002857 6689DE              <2> 	mov si, bx
  3233 0000285A 6689FB              <2> 	mov bx, di
  3234 0000285D E830450000          <2> 	call drawline
  3235 00002862 E941DAFFFF          <2> 	jmp timerinterrupt
  3236                              <2> 
  3237                              <2> .drawcircle: ;color in bx, radius in si, center in (dx,cx)
  3238 00002867 6689F0              <2> 	mov ax, si
  3239 0000286A 6689DE              <2> 	mov si, bx
  3240 0000286D E865400000          <2> 	call drawcircle
  3241 00002872 E931DAFFFF          <2> 	jmp timerinterrupt
  3242                              <2> 
  3243                              <2> .fillcircle: ;color in bx, radius in si, center in (dx,cx)
  3244 00002877 6689F0              <2> 	mov ax, si
  3245 0000287A 6689DE              <2> 	mov si, bx
  3246 0000287D E867410000          <2> 	call fillcircle
  3247 00002882 E921DAFFFF          <2> 	jmp timerinterrupt
  3248                              <2> 	
  3249                              <2> .drawsquare: ;color in bx, start in (dx, cx), end in (di, si)
  3250 00002887 6689F0              <2> 	mov ax, si
  3251 0000288A 6689DE              <2> 	mov si, bx
  3252 0000288D 6689FB              <2> 	mov bx, di
  3253 00002890 E88C470000          <2> 	call drawsquare
  3254 00002895 E90EDAFFFF          <2> 	jmp timerinterrupt
  3255                              <2> 
  3256                              <2> .fillsquare: ;color in bx, start in (dx, cx), end in (di, si)
  3257 0000289A 6689F0              <2> 	mov ax, si
  3258 0000289D 6689DE              <2> 	mov si, bx
  3259 000028A0 6689FB              <2> 	mov bx, di
  3260 000028A3 E8EE470000          <2> 	call fillsquare
  3261 000028A8 E9FBD9FFFF          <2> 	jmp timerinterrupt
  3262                              <1> %endif
  3263                              <1> %ifdef sound.included
  3264                              <1> 	%include 'source/interrupts/18_soundint.asm'
  3265                              <1> %endif
  3266                              <1> %ifdef network.included
  3267                              <1> 	%include 'source/interrupts/19_netint.asm'
  3268                              <2> netint:
  3269 000028AD E9F6D9FFFF          <2> 	jmp timerinterrupt
  3270                              <1> %endif
  3271                              <1> 
  3272                              <1> termcopy:
  3273                              <1> %ifdef io.serial
  3274                              <1> 	ret
  3275                              <1> %else
  3276                              <1> %ifdef terminal.vsync
  3277                              <1> 	mov byte [termcopyneeded], 1
  3278                              <1> 	ret
  3279                              <1> %else
  3280 000028B2 E80A000000          <1> 	call newtermcopy
  3281 000028B7 C3                  <1> 	ret
  3282                              <1> %endif
  3283 000028B8 00                  <1> 	termcopyneeded db 0
  3284 000028B9 00000000            <1> 	termcursorpos dd 0
  3285 000028BD 00000000            <1> 	removedvideo dd 0
  3286                              <1> newtermcopy:
  3287 000028C1 60                  <1> 	pusha
  3288 000028C2 BF[7E552900]        <1> 	mov edi, videobuf
  3289 000028C7 31DB                <1> 	xor ebx, ebx
  3290 000028C9 881D[B8280000]      <1> 	mov [termcopyneeded], bl
  3291 000028CF 8B1D[9A250000]      <1> 	mov ebx, [videobufpos]
  3292 000028D5 01DF                <1> 	add edi, ebx
  3293 000028D7 893D[B9280000]      <1> 	mov [termcursorpos], edi
  3294 000028DD E8E2000000          <1> 	call switchtermcursor
  3295 000028E2 803D[9C8B0000]00    <1> 	cmp byte [guion], 0
  3296 000028E9 0F8420000000        <1> 	je near nowincopy
  3297                              <1> %ifdef gui.included
  3298 000028EF C605[187E0000]00    <1> 	mov byte [mouseselecton], 0
  3299 000028F6 C605[AC230000]01    <1> 	mov byte [termcopyon], 1
  3300 000028FD 803D[AB230000]01    <1> 	cmp byte [termguion], 1
  3301 00002904 0F84F9510000        <1> 	je near windowvideocopy
  3302                              <1> %endif
  3303 0000290A E9AE000000          <1> 	jmp nocopytermatall
  3304                              <1> nowincopy:
  3305 0000290F BE00000A00          <1> 	mov esi, 0xA0000
  3306 00002914 A1[41020000]        <1> 	mov eax, [basecache]
  3307 00002919 C1E004              <1> 	shl eax, 4
  3308 0000291C 29C6                <1> 	sub esi, eax
  3309 0000291E BF[7E552900]        <1> 	mov edi, videobuf
  3310 00002923 31C9                <1> 	xor ecx, ecx
  3311 00002925 668B0D[A0250000]    <1> 	mov cx, [charxy]
  3312                              <1> nowincopy2:
  3313 0000292C 8B07                <1> 	mov eax, [edi]
  3314 0000292E 81C748D50000        <1> 	add edi, (videobuf2 - videobuf)
  3315 00002934 8B1F                <1> 	mov ebx, [edi]
  3316 00002936 8907                <1> 	mov [edi], eax
  3317 00002938 81EF48D50000        <1> 	sub edi, (videobuf2 - videobuf)
  3318 0000293E 81C702000000        <1> 	add edi, 2
  3319 00002944 39D8                <1> 	cmp eax, ebx
  3320 00002946 744B                <1> 	je nopresentwinfont
  3321 00002948 81EF02000000        <1> 	sub edi, 2
  3322 0000294E BD[E68D0000]        <1> 	mov ebp, fonts
  3323 00002953 31C0                <1> 	xor eax, eax
  3324 00002955 668B07              <1> 	mov ax, [edi]
  3325 00002958 C1E004              <1> 	shl eax, 4
  3326 0000295B 01C5                <1> 	add ebp, eax
  3327 0000295D 81C702000000        <1> 	add edi, 2
  3328 00002963 668B1F              <1> 	mov bx, [edi]
  3329 00002966 31D2                <1> 	xor edx, edx
  3330 00002968 8A15[A0250000]      <1> 	mov dl, [charxy]
  3331 0000296E C1C110              <1> 	rol ecx, 16
  3332 00002971 B110                <1> 	mov cl, 16
  3333                              <1> nowinfont:
  3334 00002973 8A4500              <1> 	mov al, [ebp]
  3335 00002976 D0C8                <1> 	ror al, 1
  3336 00002978 80FB80              <1> 	cmp bl, 0x80
  3337 0000297B 7202                <1> 	jb notnotfont
  3338 0000297D F6D0                <1> 	not al
  3339                              <1> notnotfont:
  3340 0000297F 8806                <1> 	mov [esi], al
  3341 00002981 01D6                <1> 	add esi, edx
  3342 00002983 45                  <1> 	inc ebp
  3343 00002984 FEC9                <1> 	dec cl
  3344 00002986 80F900              <1> 	cmp cl, 0
  3345 00002989 75E8                <1> 	jne nowinfont
  3346 0000298B C1E204              <1> 	shl edx, 4
  3347 0000298E 29D6                <1> 	sub esi, edx
  3348 00002990 C1C110              <1> 	rol ecx, 16
  3349                              <1> nopresentwinfont:
  3350 00002993 81C702000000        <1> 	add edi, 2
  3351 00002999 46                  <1> 	inc esi
  3352 0000299A FEC9                <1> 	dec cl
  3353 0000299C 80F900              <1> 	cmp cl, 0
  3354 0000299F 758B                <1> 	jne nowincopy2
  3355 000029A1 8A0D[A0250000]      <1> 	mov cl, [charxy]
  3356 000029A7 31D2                <1> 	xor edx, edx
  3357 000029A9 88CA                <1> 	mov dl, cl
  3358 000029AB 29D6                <1> 	sub esi, edx
  3359 000029AD C1E204              <1> 	shl edx, 4
  3360 000029B0 01D6                <1> 	add esi, edx
  3361 000029B2 FECD                <1> 	dec ch
  3362 000029B4 80FD00              <1> 	cmp ch, 0
  3363 000029B7 0F856FFFFFFF        <1> 	jne nowincopy2
  3364                              <1> nocopytermatall:
  3365 000029BD E802000000          <1> 	call switchtermcursor
  3366 000029C2 61                  <1> 	popa
  3367 000029C3 C3                  <1> 	ret
  3368                              <1> 	
  3369                              <1> switchtermcursor:
  3370 000029C4 8B3D[B9280000]      <1> 	mov edi, [termcursorpos]
  3371 000029CA 668B4702            <1> 	mov ax, [edi + 2]
  3372 000029CE 668B1F              <1> 	mov bx, [edi]
  3373 000029D1 663D8000            <1> 	cmp ax, 0x80
  3374 000029D5 7209                <1> 	jb movlargecursorterm
  3375 000029D7 66B80700            <1> 	mov ax, 7
  3376 000029DB E904000000          <1> 	jmp movedcursorterm
  3377                              <1> movlargecursorterm:
  3378 000029E0 66B8F000            <1> 	mov ax, 0xF0
  3379                              <1> movedcursorterm:
  3380 000029E4 66894702            <1> 	mov [edi + 2], ax
  3381 000029E8 6681FB0000          <1> 	cmp bx, 0
  3382 000029ED 7507                <1> 	jne fixednocursorterm
  3383 000029EF 66BB2000            <1> 	mov bx, ' '
  3384 000029F3 66891F              <1> 	mov [edi], bx
  3385                              <1> fixednocursorterm:
  3386 000029F6 C3                  <1> 	ret
  3387                              <1> %endif
  3388                                      %include "source/dosints.asm"
  3389                              <1> int20h:
  3390 000029F7 66B8004C            <1> mov ax, 0x4C00
  3391                              <1> int21h:
  3392                              <1> dostosolleros:
  3393 000029FB 6650                <1> 	push ax
  3394 000029FD 66B83000            <1> 	mov ax, NEW_DATA_SEL
  3395 00002A01 8ED8                <1> 	mov ds, ax
  3396 00002A03 8EC0                <1> 	mov es, ax
  3397 00002A05 8EE0                <1> 	mov fs, ax
  3398 00002A07 66B82000            <1> 	mov ax, SYS_DATA_SEL
  3399 00002A0B 8EE8                <1> 	mov gs, ax
  3400 00002A0D 6658                <1> 	pop ax
  3401 00002A0F 9C                  <1> 	pushf
  3402 00002A10 60                  <1> 	pusha
  3403 00002A11 80FC01              <1> 	cmp ah, 1
  3404 00002A14 0F8449000000        <1> 	je near dosgchar
  3405 00002A1A 80FC02              <1> 	cmp ah, 2
  3406 00002A1D 0F8447000000        <1> 	je near doswchar
  3407 00002A23 80FC09              <1> 	cmp ah, 9
  3408 00002A26 0F8449000000        <1> 	je near dosprintstr
  3409 00002A2C 80FC0A              <1> 	cmp ah, 0xA
  3410 00002A2F 0F8456000000        <1> 	je near dosgetstr
  3411 00002A35 80FC2B              <1> 	cmp ah, 0x2B
  3412 00002A38 0F8492000000        <1> 	je near dosgetdate
  3413 00002A3E 80FC2C              <1> 	cmp ah, 0x2C
  3414 00002A41 0F84AC000000        <1> 	je near dosgettime
  3415 00002A47 80FC4C              <1> 	cmp ah, 0x4C
  3416 00002A4A 0F84C1000000        <1> 	je near dosexit
  3417                              <1> backtodos:
  3418 00002A50 61                  <1> 	popa
  3419 00002A51 9D                  <1> 	popf
  3420 00002A52 6650                <1> 	push ax
  3421 00002A54 66B85000            <1> 	mov ax, DOS_DATA_SEL
  3422 00002A58 8ED8                <1> 	mov ds, ax
  3423 00002A5A 8EC0                <1> 	mov es, ax
  3424 00002A5C 8EE0                <1> 	mov fs, ax
  3425 00002A5E 8EE8                <1> 	mov gs, ax
  3426 00002A60 6658                <1> 	pop ax
  3427 00002A62 CF                  <1> 	iret
  3428                              <1> 
  3429                              <1> dosgchar:
  3430 00002A63 E8B8F8FFFF          <1> 	call getchar
  3431 00002A68 EBE6                <1> 	jmp backtodos
  3432                              <1> 	
  3433                              <1> doswchar:
  3434 00002A6A 88D0                <1> 	mov al, dl
  3435 00002A6C B307                <1> 	mov bl, 7
  3436 00002A6E E829F9FFFF          <1> 	call prcharint
  3437 00002A73 EBDB                <1> 	jmp backtodos
  3438                              <1> 	
  3439                              <1> dosprintstr:
  3440 00002A75 31F6                <1> 	xor esi, esi
  3441 00002A77 6689D6              <1> 	mov si, dx
  3442 00002A7A 81C600004000        <1> 	add esi, dosprogloc
  3443 00002A80 B024                <1> 	mov al, "$"
  3444 00002A82 B307                <1> 	mov bl, 7
  3445 00002A84 E8A9F2FFFF          <1> 	call printint
  3446 00002A89 EBC5                <1> 	jmp backtodos
  3447                              <1> 	
  3448                              <1> dosgetstr:
  3449 00002A8B 31F6                <1> 	xor esi, esi
  3450 00002A8D 6689D6              <1> 	mov si, dx
  3451 00002A90 81C600004000        <1> 	add esi, dosprogloc
  3452 00002A96 B900000000          <1> 	mov ecx, 0
  3453 00002A9B 8A0E                <1> 	mov cl, [esi]
  3454 00002A9D 81C602000000        <1> 	add esi, 2
  3455 00002AA3 89F7                <1> 	mov edi, esi
  3456 00002AA5 8935[CC2A0000]      <1> 	mov [stringstart], esi
  3457 00002AAB 01CF                <1> 	add edi, ecx
  3458 00002AAD B00A                <1> 	mov al, 10
  3459 00002AAF B307                <1> 	mov bl, 7
  3460 00002AB1 E8B6F3FFFF          <1> 	call rdprintdos
  3461 00002AB6 89F1                <1> 	mov ecx, esi
  3462 00002AB8 2B0D[CC2A0000]      <1> 	sub ecx, [stringstart]
  3463 00002ABE 8B35[CC2A0000]      <1> 	mov esi, [stringstart]
  3464 00002AC4 884EFF              <1> 	mov [esi - 1], cl
  3465 00002AC7 884EFE              <1> 	mov [esi - 2], cl
  3466 00002ACA EB84                <1> 	jmp backtodos
  3467 00002ACC 00000000            <1> stringstart dd 0
  3468                              <1> 
  3469                              <1> dosgetdate:
  3470 00002AD0 E823260000          <1> 	call time
  3471 00002AD5 8A0D[C0520000]      <1> 	mov cl, [RTCtimeYear]
  3472 00002ADB B500                <1> 	mov ch, 0
  3473 00002ADD 6681C1D007          <1> 	add cx, 2000
  3474 00002AE2 8A35[BF520000]      <1> 	mov dh, [RTCtimeMonth]
  3475 00002AE8 8A15[BE520000]      <1> 	mov dl, [RTCtimeDay]
  3476 00002AEE E95DFFFFFF          <1> 	jmp backtodos
  3477                              <1> 
  3478                              <1> dosgettime:
  3479 00002AF3 E800260000          <1> 	call time
  3480 00002AF8 8A2D[BD520000]      <1> 	mov ch, [RTCtimeHour]
  3481 00002AFE 8A0D[BC520000]      <1> 	mov cl, [RTCtimeMinute]
  3482 00002B04 8A35[BB520000]      <1> 	mov dh, [RTCtimeSecond]
  3483 00002B0A B200                <1> 	mov dl, 0
  3484 00002B0C E93FFFFFFF          <1> 	jmp backtodos
  3485                              <1> 	
  3486                              <1> dosexit:
  3487 00002B11 BE[778B0000]        <1> 	mov esi, line
  3488 00002B16 E810F2FFFF          <1> 	call print
  3489 00002B1B 61                  <1> 	popa
  3490 00002B1C 9D                  <1> 	popf
  3491 00002B1D 8B25[E8230100]      <1> 	mov esp, [previousstack]
  3492 00002B23 31DB                <1> 	xor ebx, ebx
  3493 00002B25 88C3                <1> 	mov bl, al
  3494 00002B27 80FB00              <1> 	cmp bl, 0
  3495 00002B2A 0F8586F1FFFF        <1> 	jne near exitprog.error
  3496 00002B30 C3                  <1> 	ret
  3497                                      %include "source/solleros.asm"
  3498                              <1> 	;SOLLEROS.ASM
  3499                              <1> os:
  3500                              <1> setdefenv:
  3501 00002B31 B02F                <1> 	mov al, '/'
  3502 00002B33 A2[F4230100]        <1> 	mov [currentfolder], al
  3503 00002B38 B801000000          <1> 	mov eax, 1
  3504 00002B3D A3[F0230100]        <1> 	mov [currentfolderloc], eax
  3505 00002B42 E88DF2FFFF          <1> 	call clear
  3506                              <1> 	
  3507                              <1> bootfilecheck:
  3508 00002B47 803D[F8250100]01    <1> 	cmp byte [ranboot], 1
  3509 00002B4E 0F8421000000        <1> 	je near nobootfile
  3510                              <1> 	%ifdef hardware.automatic
  3511 00002B54 E8BB360000          <1> 		call initializelater ;Initialize components that have debug messages
  3512                              <1> 	%endif
  3513 00002B59 BF[368B0000]        <1> 	mov edi, bootfilename
  3514 00002B5E BE00004000          <1> 	mov esi, 0x400000
  3515 00002B63 E8D93A0000          <1> 	call loadfile
  3516 00002B68 81FA00000000        <1> 	cmp edx, 0
  3517 00002B6E 7505                <1> 	jne nobootfile
  3518 00002B70 E8B20D0000          <1> 	call progbatchfound
  3519                              <1> nobootfile:	
  3520 00002B75 C605[F8250100]01    <1> 	mov byte [ranboot], 1
  3521                              <1> 
  3522 00002B7C BE[03000000]        <1> 	mov esi, signature
  3523                              <1> .sigcopyloop:	;this prevents an odd error
  3524 00002B81 658A06              <1> 	mov al, [gs:esi]
  3525 00002B84 8806                <1> 	mov [esi], al
  3526 00002B86 46                  <1> 	inc esi
  3527 00002B87 81FE[1D000000]      <1> 	cmp esi, signatureend
  3528 00002B8D 72F2                <1> 	jb .sigcopyloop
  3529                              <1> 	
  3530 00002B8F BE[03000000]        <1> 	mov esi, signature
  3531 00002B94 E892F1FFFF          <1> 	call print
  3532 00002B99 8B0D[19000000]      <1> 	mov ecx, [signatureend - 4]
  3533 00002B9F E8F6060000          <1> 	call showdec
  3534 00002BA4 BE[778B0000]        <1> 	mov esi, line
  3535 00002BA9 E87DF1FFFF          <1> 	call print
  3536 00002BAE BE[538B0000]        <1> 	mov esi, userask
  3537 00002BB3 E873F1FFFF          <1> 	call print
  3538                              <1> usercheck:
  3539 00002BB8 BE[683A0100]        <1> 	mov esi, buftxt
  3540 00002BBD BF[683E0100]        <1> 	mov edi, buftxtend
  3541 00002BC2 B00A                <1> 	mov al, 10
  3542 00002BC4 E88FF2FFFF          <1> 	call rdprint
  3543 00002BC9 56                  <1> 	push esi
  3544 00002BCA BE[5D8B0000]        <1> 	mov esi, pwdask
  3545 00002BCF E857F1FFFF          <1> 	call print
  3546 00002BD4 5E                  <1> 	pop esi
  3547 00002BD5 46                  <1> 	inc esi
  3548 00002BD6 8935[CB2C0000]      <1> 	mov [esipass], esi
  3549                              <1> passcheck:
  3550 00002BDC E83FF7FFFF          <1> 	call getchar
  3551 00002BE1 3C0A                <1> 	cmp al, 10
  3552 00002BE3 0F8438000000        <1> 	je near gotpass
  3553 00002BE9 3C08                <1> 	cmp al, 8
  3554 00002BEB 0F8412000000        <1> 	je near backpass
  3555 00002BF1 8806                <1> 	mov [esi], al
  3556 00002BF3 46                  <1> 	inc esi
  3557 00002BF4 30E4                <1> 	xor ah, ah
  3558 00002BF6 B02A                <1> 	mov al, "*"
  3559 00002BF8 E89FF7FFFF          <1> 	call prcharint
  3560 00002BFD EBDD                <1> 	jmp passcheck
  3561 00002BFF 08200800            <1> backcursor2 db 8," ",8,0
  3562                              <1> backpass:
  3563 00002C03 3B35[CB2C0000]      <1> 	cmp esi, [esipass]
  3564 00002C09 0F84CDFFFFFF        <1> 	je near passcheck
  3565 00002C0F 4E                  <1> 	dec esi
  3566 00002C10 C60600              <1> 	mov byte [esi], 0
  3567 00002C13 56                  <1> 	push esi
  3568 00002C14 BE[FF2B0000]        <1> 	mov esi, backcursor2
  3569 00002C19 E80DF1FFFF          <1> 	call print
  3570 00002C1E 5E                  <1> 	pop esi
  3571 00002C1F EBBB                <1> 	jmp passcheck
  3572                              <1> gotpass:
  3573 00002C21 B00A                <1> 	mov al, 10
  3574 00002C23 E874F7FFFF          <1> 	call prcharint
  3575 00002C28 30C0                <1> 	xor al, al
  3576 00002C2A 31C9                <1> 	xor ecx, ecx
  3577 00002C2C 8806                <1> 	mov [esi], al
  3578 00002C2E BB[798B0000]        <1> 	mov ebx, userlst
  3579                              <1> userfind:
  3580 00002C33 BE[683A0100]        <1> 	mov esi, buftxt
  3581 00002C38 8A06                <1> 	mov al, [esi]
  3582 00002C3A 3C00                <1> 	cmp al, 0
  3583 00002C3C 0F84EFFEFFFF        <1> 	je near os
  3584 00002C42 891D[CF2C0000]      <1> 	mov [usercache], ebx
  3585 00002C48 E860030000          <1> 	call tester
  3586 00002C4D 3C01                <1> 	cmp al, 1
  3587 00002C4F 7416                <1> 	je pwdtest
  3588 00002C51 41                  <1> 	inc ecx
  3589                              <1> nxtuser:
  3590 00002C52 8A03                <1> 	mov al, [ebx]
  3591 00002C54 43                  <1> 	inc ebx
  3592 00002C55 3C00                <1> 	cmp al, 0
  3593 00002C57 75F9                <1> 	jne nxtuser
  3594 00002C59 81FB[9C8B0000]      <1> 	cmp ebx, userlstend
  3595 00002C5F 0F83CCFEFFFF        <1> 	jae near os
  3596 00002C65 EBCC                <1> 	jmp userfind
  3597                              <1> pwdtest:
  3598 00002C67 46                  <1> 	inc esi
  3599 00002C68 43                  <1> 	inc ebx
  3600 00002C69 E83F030000          <1> 	call tester
  3601 00002C6E 3C01                <1> 	cmp al, 1
  3602 00002C70 7402                <1> 	je pwdrgt
  3603 00002C72 EBDE                <1> 	jmp nxtuser
  3604                              <1> pwdrgt:
  3605 00002C74 D1E9                <1> 	shr ecx, 1
  3606 00002C76 890D[F4250100]      <1> 	mov [uid], ecx
  3607 00002C7C E853F1FFFF          <1> 	call clear
  3608 00002C81 31C9                <1> 	xor ecx, ecx
  3609 00002C83 41                  <1> 	inc ecx
  3610 00002C84 890D[12002B00]      <1> 	mov [commandbufpos], ecx
  3611                              <1> returnfromexp:
  3612 00002C8A 66B90002            <1> 	mov cx, 200h
  3613 00002C8E BE[683A0100]        <1> 	mov esi, buftxt
  3614 00002C93 8935[A92F0000]      <1> 	mov [currentcommandloc], esi
  3615 00002C99 E825000000          <1> 	call bufclr
  3616                              <1> clearolddata:
  3617 00002C9E 31C0                <1> 	xor eax, eax
  3618 00002CA0 A2[F9250100]        <1> 	mov [IFON], al
  3619 00002CA5 A2[FA250100]        <1> 	mov [IFTRUE], al
  3620 00002CAA A2[62260100]        <1> 	mov [BATCHISON], al
  3621 00002CAF A3[5E260100]        <1> 	mov [BATCHPOS], eax
  3622 00002CB4 A2[63260100]        <1> 	mov [LOOPON], al
  3623 00002CB9 A3[64260100]        <1> 	mov [LOOPPOS], eax
  3624 00002CBE E933000000          <1> 	jmp nwcmd
  3625                              <1> bufclr:	
  3626 00002CC3 30C0                <1> 	xor al, al
  3627 00002CC5 8806                <1> 	mov [esi], al
  3628 00002CC7 46                  <1> 	inc esi
  3629 00002CC8 E2F9                <1> 	loop bufclr
  3630 00002CCA C3                  <1> 	ret
  3631                              <1> 
  3632 00002CCB 00000000            <1> esipass dd 0
  3633 00002CCF [798B0000]          <1> usercache dd userlst
  3634                              <1> 	
  3635                              <1> buftxtclear:
  3636 00002CD3 30C0                <1> 	xor al, al
  3637 00002CD5 BE[683A0100]        <1> 	mov esi, buftxt
  3638 00002CDA 81FE[683E0100]      <1> clearbuftxt: cmp esi, buf2
  3639 00002CE0 730E                <1> 	jae retbufclr
  3640 00002CE2 8806                <1> 	mov [esi], al
  3641 00002CE4 46                  <1> 	inc esi
  3642 00002CE5 EBF3                <1> 	jmp clearbuftxt
  3643                              <1> 
  3644 00002CE7 39DE                <1> clearitbuf: cmp esi, ebx
  3645 00002CE9 7305                <1> 	jae retbufclr
  3646 00002CEB 8806                <1> 	mov [esi], al
  3647 00002CED 46                  <1> 	inc esi
  3648 00002CEE EBF7                <1> 	jmp clearitbuf
  3649 00002CF0 C3                  <1> retbufclr: ret
  3650                              <1> 
  3651 00002CF1 E900000000          <1> full:	jmp nwcmd
  3652                              <1> 
  3653                              <1> shush:	;SollerOS Hardly Unix-compatible Shell
  3654                              <1> nwcmd:
  3655 00002CF6 FB                  <1> 	sti
  3656 00002CF7 31C0                <1> 	xor eax, eax
  3657 00002CF9 3905[CB2E0000]      <1> 	cmp [nextcommandloc], eax
  3658 00002CFF 7413                <1> 	je nomultiplecommand
  3659 00002D01 8B35[CB2E0000]      <1> 	mov esi, [nextcommandloc]
  3660 00002D07 8935[CF2E0000]      <1> 	mov [thiscommandloc], esi
  3661 00002D0D E8C6010000          <1> 	call fixvariables
  3662 00002D12 EBE2                <1> 	jmp nwcmd
  3663                              <1> nomultiplecommand:
  3664 00002D14 A3[CF2E0000]        <1> 	mov [thiscommandloc], eax
  3665 00002D19 3805[E0670000]      <1> 	cmp [threadson], al
  3666 00002D1F 7405                <1> 	je noclinwcmd
  3667 00002D21 A2[E0670000]        <1> 	mov [threadson], al
  3668                              <1> noclinwcmd:
  3669 00002D26 B001                <1> 	mov al, 1
  3670 00002D28 3805[62260100]      <1> 	cmp [BATCHISON], al
  3671 00002D2E 7501                <1> 	jne cancel
  3672 00002D30 C3                  <1> 	ret
  3673 00002D31 30C0                <1> cancel:	xor al, al
  3674 00002D33 A2[F9250100]        <1> 	mov [IFON], al
  3675 00002D38 A2[62260100]        <1> 	mov [BATCHISON], al
  3676 00002D3D B05B                <1> 	mov al, '['
  3677 00002D3F 66BB0700            <1> 	mov bx, 7
  3678 00002D43 E865F6FFFF          <1> 	call prcharq
  3679 00002D48 8B35[CF2C0000]      <1> 	mov esi, [usercache]
  3680 00002D4E E8B9EFFFFF          <1> 	call printquiet
  3681 00002D53 BE[678B0000]        <1> 	mov esi, computer
  3682 00002D58 E8AFEFFFFF          <1> 	call printquiet
  3683 00002D5D BE[F4230100]        <1> 	mov esi, currentfolder
  3684 00002D62 0335[EC230100]      <1> 	add esi, [lastfolderloc]
  3685 00002D68 E89FEFFFFF          <1> 	call printquiet
  3686 00002D6D BE[728B0000]        <1> 	mov esi, endprompt
  3687 00002D72 E8B4EFFFFF          <1> 	call print
  3688 00002D77 E857FFFFFF          <1> 	call buftxtclear
  3689 00002D7C BE[683A0100]        <1> 	mov esi, buftxt
  3690 00002D81 C605[09230000]01    <1> 	mov byte [commandedit], 1
  3691 00002D88 B00A                <1> 	mov al, 10
  3692 00002D8A 66BB0700            <1> 	mov bx, 7
  3693 00002D8E BF[683E0100]        <1> 	mov edi, buftxtend
  3694 00002D93 E8C0F0FFFF          <1> 	call rdprint
  3695 00002D98 C605[09230000]00    <1> 	mov byte [commandedit], 0
  3696 00002D9F 803D[683A0100]00    <1> 	cmp byte [buftxt], 0
  3697 00002DA6 0F844AFFFFFF        <1> 	je near nwcmd
  3698 00002DAC 8B35[12002B00]      <1> gotcmd:	mov esi, [commandbufpos]
  3699 00002DB2 8935[0E002B00]      <1> 	mov [lastcommandpos], esi
  3700 00002DB8 FF05[1A002B00]      <1> 	inc dword [commandsentered]
  3701 00002DBE BF[683A0100]        <1> 	mov edi, buftxt
  3702 00002DC3 81C6[1E002B00]      <1> 	add esi, commandbuf
  3703 00002DC9 81FE[1E102B00]      <1> 	cmp esi, commandbufend
  3704 00002DCF 7605                <1> 	jbe copycommand
  3705 00002DD1 BE[1E002B00]        <1> 	mov esi, commandbuf
  3706                              <1> copycommand:
  3707 00002DD6 8A07                <1> 	mov al, [edi]
  3708 00002DD8 8806                <1> 	mov [esi], al
  3709 00002DDA 47                  <1> 	inc edi
  3710 00002DDB 46                  <1> 	inc esi
  3711 00002DDC 3C00                <1> 	cmp al, 0
  3712 00002DDE 740F                <1> 	je donecopy
  3713 00002DE0 81FE[1E102B00]      <1> 	cmp esi, commandbufend
  3714 00002DE6 76EE                <1> 	jbe copycommand
  3715 00002DE8 BE[1E002B00]        <1> 	mov esi, commandbuf
  3716 00002DED EBE7                <1> 	jmp copycommand
  3717                              <1> donecopy:
  3718 00002DEF 81EE[1E002B00]      <1> 	sub esi, commandbuf
  3719 00002DF5 8935[12002B00]      <1> 	mov [commandbufpos], esi
  3720 00002DFB E8D3000000          <1> 	call run
  3721 00002E00 E9F1FEFFFF          <1> 	jmp nwcmd
  3722                              <1> 
  3723 00002E05 E8C9FEFFFF          <1> input:	call buftxtclear
  3724 00002E0A BE[683A0100]        <1> 	mov esi, buftxt		;puts input into buftxt AND onto screen
  3725 00002E0F BF[683E0100]        <1> 	mov edi, buftxtend
  3726 00002E14 B00A                <1> stdin:	mov al, 10
  3727 00002E16 B307                <1> 	mov bl, 7
  3728 00002E18 E83BF0FFFF          <1> 	call rdprint
  3729 00002E1D C3                  <1> 	ret
  3730                              <1> 
  3731                              <1> replacevariable:
  3732 00002E1E 8A4601              <1> 	mov al, [esi + 1]
  3733 00002E21 C64601FF            <1> 	mov byte [esi + 1], 255
  3734 00002E25 3C24                <1> 	cmp al, "$"
  3735 00002E27 0F84AB000000        <1> 	je near fixvariables
  3736 00002E2D 884601              <1> 	mov [esi + 1], al
  3737 00002E30 56                  <1> 	push esi
  3738 00002E31 81EE[683A0100]      <1> 	sub esi, buftxt
  3739 00002E37 89F7                <1> 	mov edi, esi
  3740 00002E39 81C6[683A0100]      <1> 	add esi, buftxt
  3741 00002E3F 47                  <1> 	inc edi
  3742 00002E40 BB[68260100]        <1> 	mov ebx, variables
  3743 00002E45 E8CA150000          <1> 	call nxtvrech
  3744 00002E4A 89F7                <1> 	mov edi, esi
  3745 00002E4C 31DB                <1> 	xor ebx, ebx
  3746 00002E4E 4E                  <1> 	dec esi
  3747                              <1> findvarname:
  3748 00002E4F 4E                  <1> 	dec esi
  3749 00002E50 8A06                <1> 	mov al, [esi]
  3750 00002E52 43                  <1> 	inc ebx
  3751 00002E53 3C04                <1> 	cmp al, 4
  3752 00002E55 75F8                <1> 	jne findvarname
  3753 00002E57 5E                  <1> 	pop esi
  3754                              <1> replacevarloop:
  3755 00002E58 8A07                <1> 	mov al, [edi]
  3756 00002E5A 3C00                <1> 	cmp al, 0
  3757 00002E5C 0F8413000000        <1> 	je near compressbuftxt
  3758 00002E62 81FB00000000        <1> 	cmp ebx, 0
  3759 00002E68 0F8416000000        <1> 	je near expandbuftxt
  3760 00002E6E 8806                <1> 	mov [esi], al
  3761 00002E70 4B                  <1> 	dec ebx
  3762 00002E71 46                  <1> 	inc esi
  3763 00002E72 47                  <1> 	inc edi
  3764 00002E73 EBE3                <1> 	jmp replacevarloop
  3765                              <1> compressbuftxt:
  3766 00002E75 8A041E              <1> 	mov al, [esi + ebx]
  3767 00002E78 8806                <1> 	mov [esi], al
  3768 00002E7A 46                  <1> 	inc esi
  3769 00002E7B 3C00                <1> 	cmp al, 0
  3770 00002E7D 75F6                <1> 	jne compressbuftxt
  3771 00002E7F E954000000          <1> 	jmp fixvariables
  3772                              <1> expandbuftxt:
  3773 00002E84 89F1                <1> 	mov ecx, esi
  3774 00002E86 8A26                <1> 	mov ah, [esi]
  3775                              <1> expandbuftxtlp:
  3776 00002E88 8A1E                <1> 	mov bl, [esi]
  3777 00002E8A 46                  <1> 	inc esi
  3778 00002E8B 8A3E                <1> 	mov bh, [esi]
  3779 00002E8D 8826                <1> 	mov [esi], ah
  3780 00002E8F 88FC                <1> 	mov ah, bh
  3781 00002E91 80FB00              <1> 	cmp bl, 0
  3782 00002E94 75F2                <1> 	jne expandbuftxtlp
  3783 00002E96 89CE                <1> 	mov esi, ecx
  3784 00002E98 8806                <1> 	mov [esi], al
  3785 00002E9A 47                  <1> 	inc edi
  3786 00002E9B 8A07                <1> 	mov al, [edi]
  3787 00002E9D 3C00                <1> 	cmp al, 0
  3788 00002E9F 0F8433000000        <1> 	je near fixvariables
  3789 00002EA5 46                  <1> 	inc esi
  3790 00002EA6 EBDC                <1> 	jmp expandbuftxt
  3791                              <1> multipleprogline:
  3792 00002EA8 30E4                <1> 	xor ah, ah
  3793 00002EAA 8826                <1> 	mov [esi], ah
  3794 00002EAC 46                  <1> 	inc esi
  3795 00002EAD 8935[CB2E0000]      <1> 	mov [nextcommandloc], esi
  3796 00002EB3 E93E000000          <1> 	jmp donefixvariables
  3797                              <1> inlinecomment:	;if the following char is #, include a #, otherwise end the line
  3798 00002EB8 46                  <1> 	inc esi
  3799 00002EB9 8A06                <1> 	mov al, [esi]
  3800 00002EBB C606FF              <1> 	mov byte [esi], 255
  3801 00002EBE 3C23                <1> 	cmp al, '#'
  3802 00002EC0 7416                <1> 	je fixvariables
  3803 00002EC2 4E                  <1> 	dec esi
  3804 00002EC3 C60600              <1> 	mov byte [esi], 0
  3805 00002EC6 E90D000000          <1> 	jmp fixvariables
  3806                              <1> 	
  3807 00002ECB 00000000            <1> nextcommandloc dd 0
  3808 00002ECF 00000000            <1> thiscommandloc dd 0	
  3809                              <1> run:
  3810 00002ED3 BE[683A0100]        <1> 	mov esi, buftxt
  3811 00002ED8 46                  <1> fixvariables:	inc esi
  3812 00002ED9 8A06                <1> 	mov al, [esi]
  3813 00002EDB 3C23                <1> 	cmp al, '#'	;inline comment
  3814 00002EDD 74D9                <1> 	je inlinecomment
  3815 00002EDF 3C24                <1> 	cmp al, '$' ;variable
  3816 00002EE1 0F8437FFFFFF        <1> 	je near replacevariable
  3817 00002EE7 3C3B                <1> 	cmp al, ';' ;program list
  3818 00002EE9 74BD                <1> 	je multipleprogline
  3819 00002EEB 3C00                <1> 	cmp al, 0
  3820 00002EED 75E9                <1> 	jne fixvariables
  3821 00002EEF 31C0                <1> 	xor eax, eax
  3822 00002EF1 A3[CB2E0000]        <1> 	mov [nextcommandloc], eax
  3823                              <1> donefixvariables:
  3824 00002EF6 803D[94340000]00    <1> 	cmp byte [indexdone], 0
  3825 00002EFD 7505                <1> 	jne progtest
  3826 00002EFF E8FB040000          <1> 	call indexfiles
  3827                              <1> progtest:
  3828 00002F04 31C0                <1> 	xor eax, eax
  3829 00002F06 BB[E81F0100]        <1> 	mov ebx, fileindex
  3830 00002F0B 668B03              <1> prgnxt:	mov ax, [ebx]
  3831 00002F0E B1FF                <1> 	mov cl, 255
  3832 00002F10 B52C                <1> 	mov ch, 44
  3833 00002F12 6639C8              <1> 	cmp ax, cx
  3834 00002F15 740B                <1> 	je fndprg
  3835 00002F17 43                  <1> 	inc ebx
  3836 00002F18 81FB[E8230100]      <1> 	cmp ebx, fileindexend
  3837 00002F1E 735D                <1> 	jae prgnf
  3838 00002F20 EBE9                <1> 	jmp prgnxt
  3839 00002F22 81C302000000        <1> fndprg: add ebx, 2
  3840 00002F28 31C9                <1> 	xor ecx, ecx
  3841 00002F2A BE[683A0100]        <1> 	mov esi, buftxt
  3842 00002F2F 390D[CF2E0000]      <1> 	cmp [thiscommandloc], ecx
  3843 00002F35 7406                <1> 	je noprgtstmultiple
  3844 00002F37 8B35[CF2E0000]      <1> 	mov esi, [thiscommandloc]
  3845                              <1> noprgtstmultiple:
  3846 00002F3D E8A6000000          <1> 	call cndtest
  3847 00002F42 3C01                <1> 	cmp al, 1
  3848 00002F44 7302                <1> 	jae prggood
  3849 00002F46 EBC3                <1> 	jmp prgnxt
  3850 00002F48 81FB[E8230100]      <1> prggood: cmp ebx, fileindexend
  3851 00002F4E 7358                <1> 	jae prgdn
  3852 00002F50 31C0                <1> 	xor eax, eax
  3853 00002F52 BE[683A0100]        <1> 	mov esi, buftxt
  3854 00002F57 3905[CF2E0000]      <1> 	cmp [thiscommandloc], eax
  3855 00002F5D 7406                <1> 	je noprggoodmul
  3856 00002F5F 8B35[CF2E0000]      <1> 	mov esi, [thiscommandloc]
  3857                              <1> noprggoodmul:
  3858 00002F65 8935[A92F0000]      <1> 	mov [currentcommandloc], esi
  3859 00002F6B 81C303000000        <1> 	add ebx, 3
  3860 00002F71 8B3B                <1> 	mov edi, [ebx]
  3861 00002F73 C605[E0670000]02    <1> 	mov byte [threadson], 2
  3862 00002F7A FFD7                <1> 	call edi
  3863 00002F7C C3                  <1> 	ret
  3864                              <1> prgnf:	
  3865 00002F7D 8B35[A92F0000]      <1> 	mov esi, [currentcommandloc]
  3866 00002F83 8A06                <1> 	mov al, [esi]
  3867 00002F85 3C00                <1> 	cmp al, 0
  3868 00002F87 741F                <1> 	je prgdn
  3869 00002F89 BE[3E8B0000]        <1> 	mov esi, notfound1
  3870 00002F8E E898EDFFFF          <1> 	call print
  3871 00002F93 8B35[A92F0000]      <1> 	mov esi, [currentcommandloc]
  3872 00002F99 E88DEDFFFF          <1> 	call print
  3873 00002F9E BE[468B0000]        <1> 	mov esi, notfound2
  3874 00002FA3 E883EDFFFF          <1> 	call print
  3875 00002FA8 C3                  <1> prgdn:	ret
  3876                              <1> 
  3877 00002FA9 00000000            <1> currentcommandloc dd 0
  3878                              <1> 
  3879                              <1> tester:			;si=user bx=prog returns 1 in al if true
  3880 00002FAD 6631C0              <1> 	xor ax, ax
  3881 00002FB0 8A06                <1> retest:	mov al, [esi]
  3882 00002FB2 8A23                <1> 	mov ah, [ebx]
  3883 00002FB4 3C00                <1> 	cmp al, 0
  3884 00002FB6 7408                <1> 	je testtrue
  3885 00002FB8 38E0                <1> 	cmp al, ah
  3886 00002FBA 750C                <1> 	jne testfalse
  3887 00002FBC 43                  <1> 	inc ebx
  3888 00002FBD 46                  <1> 	inc esi
  3889 00002FBE EBF0                <1> 	jmp retest
  3890                              <1> testtrue:
  3891 00002FC0 80FC00              <1> 	cmp ah, 0
  3892 00002FC3 7503                <1> 	jne testfalse
  3893 00002FC5 B001                <1> 	mov al, 1
  3894 00002FC7 C3                  <1> 	ret
  3895                              <1> testfalse:
  3896 00002FC8 30C0                <1> 	xor al, al
  3897 00002FCA C3                  <1> 	ret
  3898                              <1> 
  3899                              <1> optest:			;si=user bx=prog returns 1 in al if true
  3900 00002FCB 30C0                <1> 	xor al, al
  3901                              <1> opretest:
  3902 00002FCD 8A06                <1> 	mov al, [esi]
  3903 00002FCF 8A23                <1> 	mov ah, [ebx]
  3904 00002FD1 38E0                <1> 	cmp al, ah
  3905 00002FD3 7510                <1> 	jne optestfalse
  3906 00002FD5 80FC00              <1> 	cmp ah, 0
  3907 00002FD8 7404                <1> 	je optesttrue
  3908 00002FDA 43                  <1> 	inc ebx
  3909 00002FDB 46                  <1> 	inc esi
  3910 00002FDC EBEF                <1> 	jmp opretest
  3911                              <1> optesttrue:
  3912 00002FDE 3C00                <1> 	cmp al, 0
  3913 00002FE0 7503                <1> 	jne optestfalse
  3914 00002FE2 B001                <1> 	mov al, 1
  3915 00002FE4 C3                  <1> 	ret
  3916                              <1> optestfalse:
  3917 00002FE5 30C0                <1> 	xor al, al
  3918 00002FE7 C3                  <1> 	ret
  3919                              <1> 
  3920                              <1> cndtest:			;si=user bx=prog cl=endchar returns 1 in al if true
  3921 00002FE8 30C0                <1> 	xor al, al
  3922 00002FEA 8A06                <1> cndretest:	mov al, [esi]
  3923 00002FEC 8A23                <1> 	mov ah, [ebx]
  3924 00002FEE 38CC                <1> 	cmp ah, cl
  3925 00002FF0 7408                <1> 	je cndtesttrue
  3926 00002FF2 38E0                <1> 	cmp al, ah
  3927 00002FF4 750B                <1> 	jne cndtestfalse
  3928 00002FF6 43                  <1> 	inc ebx
  3929 00002FF7 46                  <1> 	inc esi
  3930 00002FF8 EBF0                <1> 	jmp cndretest
  3931                              <1> cndtesttrue:
  3932 00002FFA 38C8                <1> 	cmp al, cl
  3933 00002FFC 7506                <1> 	jne cndtestalmost
  3934 00002FFE B001                <1> 	mov al, 1
  3935 00003000 C3                  <1> 	ret
  3936                              <1> cndtestfalse:
  3937 00003001 30C0                <1> 	xor al, al
  3938 00003003 C3                  <1> 	ret
  3939                              <1> cndtestalmost:
  3940 00003004 B002                <1> 	mov al, 2
  3941 00003006 C3                  <1> 	ret
  3942                              <1> 	
  3943                              <1> array:				;arraystart in si, arrayend in bx, arrayseperator in cx
  3944                              <1> 		                ;ends if array seperator is found backwards after 0
  3945                              <1> 	arnxt:	      
  3946 00003007 88E8                <1> 		mov al, ch
  3947 00003009 88CC                <1> 		mov ah, cl        
  3948 0000300B 663906              <1> 		cmp [esi], ax
  3949 0000300E 744D                <1> 		je ardn
  3950 00003010 66390E              <1> 		cmp [esi], cx
  3951 00003013 7407                <1> 		je arfnd
  3952 00003015 46                  <1> 		inc esi
  3953 00003016 39DE                <1> 		cmp esi, ebx
  3954 00003018 7343                <1> 		jae ardn
  3955 0000301A EBEB                <1> 		jmp arnxt
  3956 0000301C 81C602000000        <1> 	arfnd: add esi, 2
  3957 00003022 891D[5E300000]      <1> 		mov [arbx], ebx
  3958 00003028 890D[62300000]      <1> 		mov [arcx], ecx
  3959 0000302E E8F8ECFFFF          <1> 		call print
  3960 00003033 8935[64300000]      <1> 		mov [arsi], esi
  3961 00003039 BE[778B0000]        <1> 		mov esi, line
  3962 0000303E E8E8ECFFFF          <1> 		call print
  3963 00003043 8B1D[5E300000]      <1> 		mov ebx, [arbx]
  3964 00003049 668B0D[62300000]    <1> 		mov cx, [arcx]
  3965 00003050 8B35[64300000]      <1> 		mov esi, [arsi]
  3966 00003056 46                  <1> 		inc esi
  3967 00003057 39DE                <1> 		cmp esi, ebx
  3968 00003059 7302                <1> 		jae ardn
  3969 0000305B EBAA                <1> 		jmp arnxt
  3970 0000305D C3                  <1> 	ardn:	ret
  3971 0000305E 00000000            <1> arbx:	dw 0,0
  3972 00003062 0000                <1> arcx:	db 0,0
  3973 00003064 00000000            <1> arsi:	dw 0,0
  3974                              <1> 
  3975                              <1> clearbuffer:
  3976 00003068 BE[683E0100]        <1> 	mov esi, buf2
  3977 0000306D B030                <1> 	mov al, '0'
  3978 0000306F 81FE[7C3E0100]      <1> clearbuf: cmp esi, numbuf
  3979 00003075 7305                <1> 	jae doneclearbuff
  3980 00003077 8806                <1> 	mov [esi], al
  3981 00003079 46                  <1> 	inc esi
  3982 0000307A EBF3                <1> 	jmp clearbuf
  3983                              <1> doneclearbuff: 
  3984 0000307C C3                  <1> 		ret
  3985                              <1> 
  3986                              <1> convert:
  3987 0000307D 4E                  <1> 	dec esi
  3988 0000307E 89F3                <1> 	mov ebx, esi		;place to convert into must be in esi, number to convert must be in ecx
  3989                              <1> .lp:
  3990 00003080 89DE                <1> 	mov esi, ebx
  3991 00003082 81EE09000000        <1> 	sub esi, 9
  3992 00003088 81F900CA9A3B        <1> 	cmp ecx, 1000000000
  3993 0000308E 720A                <1> 	jb .8
  3994 00003090 81E900CA9A3B        <1> 	sub ecx, 1000000000
  3995 00003096 FE06                <1> 	inc byte [esi]
  3996 00003098 EBE6                <1> 	jmp .lp
  3997 0000309A 46                  <1> .8:	inc esi
  3998 0000309B 81F900E1F505        <1> 	cmp ecx, 100000000
  3999 000030A1 720A                <1> 	jb .7
  4000 000030A3 81E900E1F505        <1> 	sub ecx, 100000000
  4001 000030A9 FE06                <1> 	inc byte [esi]
  4002 000030AB EBD3                <1> 	jmp .lp
  4003 000030AD 46                  <1> .7:	inc esi
  4004 000030AE 81F980969800        <1> 	cmp ecx, 10000000
  4005 000030B4 720A                <1> 	jb .6
  4006 000030B6 81E980969800        <1> 	sub ecx, 10000000
  4007 000030BC FE06                <1> 	inc byte [esi]
  4008 000030BE EBC0                <1> 	jmp .lp
  4009 000030C0 46                  <1> .6:	inc esi
  4010 000030C1 81F940420F00        <1> 	cmp ecx, 1000000
  4011 000030C7 720A                <1> 	jb .5
  4012 000030C9 81E940420F00        <1> 	sub ecx, 1000000
  4013 000030CF FE06                <1> 	inc byte [esi]
  4014 000030D1 EBAD                <1> 	jmp .lp
  4015 000030D3 46                  <1> .5:	inc esi
  4016 000030D4 81F9A0860100        <1> 	cmp ecx, 100000
  4017 000030DA 720A                <1> 	jb .4
  4018 000030DC 81E9A0860100        <1> 	sub ecx, 100000
  4019 000030E2 FE06                <1> 	inc byte [esi]
  4020 000030E4 EB9A                <1> 	jmp .lp
  4021 000030E6 46                  <1> .4:	inc esi
  4022 000030E7 81F910270000        <1> 	cmp ecx, 10000
  4023 000030ED 720A                <1> 	jb .3
  4024 000030EF 81E910270000        <1> 	sub ecx, 10000
  4025 000030F5 FE06                <1> 	inc byte [esi]
  4026 000030F7 EB87                <1> 	jmp .lp
  4027 000030F9 46                  <1> .3:	inc esi
  4028 000030FA 81F9E8030000        <1> 	cmp ecx, 1000
  4029 00003100 720D                <1> 	jb .2
  4030 00003102 81E9E8030000        <1> 	sub ecx, 1000
  4031 00003108 FE06                <1> 	inc byte [esi]
  4032 0000310A E971FFFFFF          <1> 	jmp .lp
  4033 0000310F 46                  <1> .2:	inc esi
  4034 00003110 81F964000000        <1> 	cmp ecx, 100
  4035 00003116 720D                <1> 	jb .1
  4036 00003118 81E964000000        <1> 	sub ecx, 100
  4037 0000311E FE06                <1> 	inc byte [esi]
  4038 00003120 E95BFFFFFF          <1> 	jmp .lp
  4039 00003125 46                  <1> .1:	inc esi
  4040 00003126 81F90A000000        <1> 	cmp ecx, 10
  4041 0000312C 720D                <1> 	jb .0
  4042 0000312E 81E90A000000        <1> 	sub ecx, 10
  4043 00003134 FE06                <1> 	inc byte [esi]
  4044 00003136 E945FFFFFF          <1> 	jmp .lp
  4045 0000313B 46                  <1> .0:	inc esi
  4046 0000313C 81F901000000        <1> 	cmp ecx, 1
  4047 00003142 720D                <1> 	jb .dn
  4048 00003144 81E901000000        <1> 	sub ecx, 1
  4049 0000314A FE06                <1> 	inc byte [esi]
  4050 0000314C E92FFFFFFF          <1> 	jmp .lp
  4051                              <1> .dn:
  4052 00003151 C3                  <1> 	ret
  4053                              <1> 
  4054                              <1> 	
  4055                              <1> 
  4056 00003152 00<rept>            <1> hexnumber times 8 db 0
  4057 0000315A 202000              <1> hexnumberend db "  ",0
  4058                              <1> 
  4059                              <1> converthex:
  4060                              <1> .clear:	;place to convert to in esi, end of buffer in edi number in ecx
  4061 0000315D 56                  <1> 	push esi
  4062 0000315E B030                <1> 	mov al, "0"
  4063 00003160 39FE                <1> .clearlp: cmp esi, edi
  4064 00003162 7305                <1> 	jae .doneclear
  4065 00003164 8806                <1> 	mov [esi], al
  4066 00003166 46                  <1> 	inc esi
  4067 00003167 EBF7                <1> 	jmp .clearlp
  4068                              <1> .doneclear:
  4069 00003169 81EE02000000        <1> 	sub esi, 2
  4070 0000316F 89C8                <1> 	mov eax, ecx
  4071                              <1> .loop:
  4072 00003171 30FF                <1> 	xor bh, bh
  4073 00003173 88C3                <1> 	mov bl, al
  4074 00003175 66C1E304            <1> 	shl bx, 4
  4075 00003179 C0EB04              <1> 	shr bl, 4
  4076 0000317C 86DF                <1> 	xchg bl, bh ;they are backwards
  4077 0000317E 80C330              <1> 	add bl, 48
  4078 00003181 80FB39              <1> 	cmp bl, "9"
  4079 00003184 7609                <1> 	jbe .goodbl
  4080 00003186 80EB30              <1> 	sub bl, 48
  4081 00003189 80EB0A              <1> 	sub bl, 0xA
  4082 0000318C 80C341              <1> 	add bl, "A"
  4083                              <1> .goodbl:
  4084 0000318F 80C730              <1> 	add bh, 48
  4085 00003192 80FF39              <1> 	cmp bh, "9"
  4086 00003195 7609                <1> 	jbe .goodbh
  4087 00003197 80EF30              <1> 	sub bh, 48
  4088 0000319A 80EF0A              <1> 	sub bh, 0xA
  4089 0000319D 80C741              <1> 	add bh, "A"
  4090                              <1> .goodbh:
  4091 000031A0 C1E808              <1> 	shr eax, 8
  4092 000031A3 66891E              <1> 	mov [esi], bx
  4093 000031A6 81EE02000000        <1> 	sub esi, 2
  4094 000031AC 3B3424              <1> 	cmp esi, [esp]
  4095 000031AF 7207                <1> 	jb .done
  4096 000031B1 3D00000000          <1> 	cmp eax, 0
  4097 000031B6 75B9                <1> 	jne .loop
  4098                              <1> .done:
  4099 000031B8 5E                  <1> 	pop esi
  4100 000031B9 C3                  <1> 	ret
  4101                              <1> 	
  4102                              <1> 	
  4103 000031BA 00                  <1> smallhex db 0
  4104 000031BB 01                  <1> firsthexshown db 1
  4105                              <1> showhexsmall:
  4106 000031BC C605[BA310000]01    <1> 	mov byte [smallhex], 1
  4107 000031C3 E808000000          <1> 	call showhex
  4108 000031C8 C605[BA310000]00    <1> 	mov byte [smallhex], 0
  4109 000031CF C3                  <1> 	ret
  4110                              <1> showhex:
  4111 000031D0 60                  <1> 	pusha
  4112 000031D1 BE[52310000]        <1> 	mov esi, hexnumber
  4113 000031D6 BF[5A310000]        <1> 	mov edi, hexnumberend
  4114 000031DB E87DFFFFFF          <1> 	call converthex
  4115 000031E0 803D[BB310000]01    <1> 	cmp byte [firsthexshown], 1
  4116 000031E7 7503                <1> 	jne .show
  4117 000031E9 6631D2              <1> 	xor dx, dx
  4118                              <1> .show:
  4119 000031EC 803D[BB310000]03    <1> 	cmp byte [firsthexshown], 3
  4120 000031F3 750A                <1> 	jne .nonewhexline
  4121 000031F5 BE[778B0000]        <1> 	mov esi, line
  4122 000031FA E82CEBFFFF          <1> 	call print
  4123                              <1> .nonewhexline:
  4124 000031FF 803D[BB310000]04    <1> 	cmp byte [firsthexshown], 4
  4125 00003206 7527                <1> 	jne .notab
  4126 00003208 B1A0                <1> 	mov cl, 160
  4127 0000320A 28D1                <1> 	sub cl, dl
  4128 0000320C C0E905              <1> 	shr cl, 5
  4129 0000320F C0E105              <1> 	shl cl, 5
  4130 00003212 80F900              <1> 	cmp cl, 0
  4131 00003215 750F                <1> 	jne .nonewline
  4132 00003217 BE[778B0000]        <1> 	mov esi, line
  4133 0000321C E80AEBFFFF          <1> 	call print
  4134 00003221 E909000000          <1> 	jmp .notab
  4135                              <1> .nonewline:
  4136 00003226 80C20F              <1> 	add dl, 15
  4137 00003229 C0EA04              <1> 	shr dl, 4
  4138 0000322C C0E204              <1> 	shl dl, 4
  4139                              <1> .notab:
  4140 0000322F BE[52310000]        <1> 	mov esi, hexnumber
  4141 00003234 803D[BA310000]01    <1> 	cmp byte [smallhex],1
  4142 0000323B 7506                <1> 	jne .nosmall
  4143 0000323D 81C606000000        <1> 	add esi, 6
  4144                              <1> .nosmall:
  4145 00003243 803D[BB310000]05    <1> 	cmp byte [firsthexshown], 5
  4146 0000324A 750A                <1> 	jne .noquiet
  4147 0000324C E8BBEAFFFF          <1> 	call printquiet
  4148 00003251 E918000000          <1> 	jmp .donequiet
  4149                              <1> .noquiet:
  4150 00003256 803D[BB310000]06    <1> 	cmp byte [firsthexshown], 6
  4151 0000325D 750A                <1> 	jne .normal
  4152 0000325F E8BBEAFFFF          <1> 	call printhighlight
  4153 00003264 E905000000          <1> 	jmp .donequiet
  4154                              <1> .normal:
  4155 00003269 E8BDEAFFFF          <1> 	call print
  4156                              <1> .donequiet:
  4157 0000326E 803D[BB310000]02    <1> 	cmp byte [firsthexshown], 2
  4158 00003275 750A                <1> 	jne .shown
  4159 00003277 BE[778B0000]        <1> 	mov esi, line
  4160 0000327C E8AAEAFFFF          <1> 	call print
  4161                              <1> .shown:
  4162 00003281 C605[BB310000]00    <1> 	mov byte [firsthexshown], 0
  4163 00003288 61                  <1> 	popa
  4164 00003289 C3                  <1> 	ret
  4165                              <1> 
  4166                              <1> 
  4167 0000328A 303030303030303030- <1> decnumber db "00000000000000"
  4168 00003293 3030303030          <1>
  4169 00003298 2000                <1> decnumberend: db " ",0
  4170                              <1> 
  4171                              <1> showdec: ;;same as showhex, just uses decimal conversion
  4172 0000329A 60                  <1> 	pusha
  4173 0000329B BF[8A320000]        <1> 	mov edi, decnumber
  4174 000032A0 BE[98320000]        <1> 	mov esi, decnumberend
  4175                              <1> .clear:
  4176 000032A5 C60730              <1> 	mov byte [edi], '0'
  4177 000032A8 47                  <1> 	inc edi
  4178 000032A9 39F7                <1> 	cmp edi, esi
  4179 000032AB 72F8                <1> 	jb .clear
  4180 000032AD BF[8A320000]        <1> 	mov edi, decnumber
  4181 000032B2 E8C6FDFFFF          <1> 	call convert
  4182 000032B7 803D[BB310000]01    <1> 	cmp byte [firsthexshown], 1
  4183 000032BE 7503                <1> 	jne .show
  4184 000032C0 6631D2              <1> 	xor dx, dx
  4185                              <1> .show:
  4186 000032C3 803D[BB310000]03    <1> 	cmp byte [firsthexshown], 3
  4187 000032CA 750A                <1> 	jne .nonewdecline
  4188 000032CC BE[778B0000]        <1> 	mov esi, line
  4189 000032D1 E855EAFFFF          <1> 	call print
  4190                              <1> .nonewdecline:
  4191 000032D6 803D[BB310000]04    <1> 	cmp byte [firsthexshown], 4
  4192 000032DD 7527                <1> 	jne .notab
  4193 000032DF B1A0                <1> 	mov cl, 160
  4194 000032E1 28D1                <1> 	sub cl, dl
  4195 000032E3 C0E905              <1> 	shr cl, 5
  4196 000032E6 C0E105              <1> 	shl cl, 5
  4197 000032E9 80F900              <1> 	cmp cl, 0
  4198 000032EC 750F                <1> 	jne .nonewline
  4199 000032EE BE[778B0000]        <1> 	mov esi, line
  4200 000032F3 E833EAFFFF          <1> 	call print
  4201 000032F8 E909000000          <1> 	jmp .notab
  4202                              <1> .nonewline:
  4203 000032FD 80C20F              <1> 	add dl, 15
  4204 00003300 C0EA04              <1> 	shr dl, 4
  4205 00003303 C0E204              <1> 	shl dl, 4
  4206                              <1> .notab:
  4207 00003306 BE[8A320000]        <1> 	mov esi, decnumber
  4208 0000330B 4E                  <1> 	dec esi
  4209                              <1> .sifind:
  4210 0000330C 46                  <1> 	inc esi
  4211 0000330D 803E30              <1> 	cmp byte [esi], '0'
  4212 00003310 74FA                <1> 	je .sifind
  4213 00003312 E814EAFFFF          <1> 	call print
  4214 00003317 803D[BB310000]02    <1> 	cmp byte [firsthexshown], 2
  4215 0000331E 750A                <1> 	jne .shown
  4216 00003320 BE[778B0000]        <1> 	mov esi, line
  4217 00003325 E801EAFFFF          <1> 	call print
  4218                              <1> .shown:
  4219 0000332A C605[BB310000]00    <1> 	mov byte [firsthexshown], 0
  4220 00003331 61                  <1> 	popa
  4221 00003332 C3                  <1> 	ret
  4222                              <1> 	
  4223                              <1> cnvrthextxt:
  4224 00003333 31C9                <1> 	xor ecx, ecx
  4225 00003335 31C0                <1> 	xor eax, eax
  4226 00003337 31D2                <1> 	xor edx, edx
  4227 00003339 31DB                <1> 	xor ebx, ebx
  4228 0000333B 4E                  <1> 	dec esi
  4229                              <1> .end:
  4230 0000333C 46                  <1> 	inc esi
  4231 0000333D 8A06                <1> 	mov al, [esi]
  4232 0000333F 3C00                <1> 	cmp al, 0
  4233 00003341 75F9                <1> 	jne .end
  4234                              <1> .loop:
  4235 00003343 4E                  <1> 	dec esi
  4236 00003344 8A06                <1> 	mov al, [esi]
  4237 00003346 3C41                <1> 	cmp al, "A"
  4238 00003348 7328                <1> 	jae .char
  4239 0000334A 2C30                <1> 	sub al, 48
  4240 0000334C 3C10                <1> 	cmp al, 16
  4241 0000334E 7721                <1> 	ja .done
  4242                              <1> .donechar:
  4243 00003350 81FA00000000        <1> 	cmp edx, 0
  4244 00003356 740E                <1> 	je .noshl
  4245 00003358 89D3                <1> 	mov ebx, edx
  4246                              <1> .shl:
  4247 0000335A C1E004              <1> 	shl eax, 4
  4248 0000335D 4B                  <1> 	dec ebx
  4249 0000335E 81FB00000000        <1> 	cmp ebx, 0
  4250 00003364 75F4                <1> 	jne .shl
  4251                              <1> .noshl:
  4252 00003366 42                  <1> 	inc edx
  4253 00003367 01C1                <1> 	add ecx, eax
  4254 00003369 81FA08000000        <1> 	cmp edx, 8
  4255 0000336F 72D2                <1> 	jb .loop
  4256                              <1> .done:
  4257 00003371 C3                  <1> 	ret
  4258                              <1> .char:
  4259 00003372 3C46                <1> 	cmp al, "F"
  4260 00003374 77FB                <1> 	ja .done
  4261 00003376 2C41                <1> 	sub al, "A"
  4262 00003378 040A                <1> 	add al, 0xA
  4263 0000337A EBD4                <1> 	jmp .donechar
  4264                              <1> 	
  4265                              <1> 	
  4266                              <1> cnvrttxt: ;text to convert in esi, first part or 0 in edi
  4267 0000337C 31C9                <1> 	xor ecx, ecx
  4268 0000337E 31C0                <1> 	xor eax, eax
  4269 00003380 31D2                <1> 	xor edx, edx
  4270 00003382 31DB                <1> 	xor ebx, ebx
  4271 00003384 4E                  <1> 	dec esi
  4272                              <1> .lp:
  4273 00003385 46                  <1> 	inc esi
  4274 00003386 8A06                <1> 	mov al, [esi]
  4275 00003388 3C00                <1> 	cmp al, 0
  4276 0000338A 75F9                <1> 	jne .lp
  4277 0000338C 4E                  <1> 	dec esi
  4278 0000338D 8A06                <1> 	mov al, [esi]
  4279 0000338F 3C2E                <1> 	cmp al, '.'
  4280 00003391 7503                <1> 	jne .dot
  4281 00003393 46                  <1> 	inc esi
  4282 00003394 EBEF                <1> 	jmp .lp
  4283                              <1> .dot:
  4284 00003396 3C20                <1> 	cmp al, ' '
  4285 00003398 7404                <1> 	je .zero
  4286 0000339A 3C30                <1> 	cmp al, '0'
  4287 0000339C 7504                <1> 	jne .txtlp
  4288                              <1> .zero: 
  4289 0000339E 39FE                <1> 		cmp esi, edi
  4290 000033A0 7458                <1> 		je .done
  4291                              <1> .txtlp:
  4292 000033A2 31C0                <1> 	xor eax, eax
  4293 000033A4 8A06                <1> 	mov al, [esi]
  4294 000033A6 3C3D                <1> 	cmp al, '='
  4295 000033A8 7450                <1> 	je .done
  4296 000033AA 3C30                <1> 	cmp al, 48
  4297 000033AC 724C                <1> 	jb .done
  4298 000033AE 3C23                <1> 	cmp al, '#'
  4299 000033B0 7448                <1> 	je .done
  4300 000033B2 39FE                <1> 	cmp esi, edi
  4301 000033B4 7244                <1> 	jb .done
  4302 000033B6 81F900000000        <1> 	cmp ecx, 0
  4303 000033BC 7708                <1> 	ja .exp
  4304 000033BE 2C30                <1> .noexp:	sub al, 48
  4305 000033C0 01C2                <1> 	add edx, eax
  4306 000033C2 4E                  <1> 	dec esi
  4307 000033C3 41                  <1> 	inc ecx
  4308 000033C4 EBDC                <1> 	jmp .txtlp
  4309 000033C6 81F900000000        <1> .exp:	cmp ecx, 0
  4310 000033CC 74F0                <1> 	je .noexp
  4311 000033CE 2C30                <1> 	sub al, 48
  4312 000033D0 51                  <1> 	push ecx
  4313 000033D1 89C3                <1> .expmul:	mov ebx, eax
  4314 000033D3 01D8                <1> 	add eax, ebx
  4315 000033D5 01D8                <1> 	add eax, ebx
  4316 000033D7 01D8                <1> 	add eax, ebx
  4317 000033D9 01D8                <1> 	add eax, ebx
  4318 000033DB 01D8                <1> 	add eax, ebx
  4319 000033DD 01D8                <1> 	add eax, ebx
  4320 000033DF 01D8                <1> 	add eax, ebx
  4321 000033E1 01D8                <1> 	add eax, ebx
  4322 000033E3 01D8                <1> 	add eax, ebx
  4323 000033E5 81E901000000        <1> 	sub ecx, 1
  4324 000033EB 81F900000000        <1> 	cmp ecx, 0
  4325 000033F1 77DE                <1> 	ja .expmul
  4326 000033F3 01C2                <1> 	add edx, eax
  4327 000033F5 59                  <1> 	pop ecx
  4328 000033F6 4E                  <1> 	dec esi
  4329 000033F7 41                  <1> 	inc ecx
  4330 000033F8 EBA8                <1> 	jmp .txtlp
  4331 000033FA 89D1                <1> .done: mov ecx, edx
  4332 000033FC C3                  <1> 	ret
  4333                                      %include "source/programs.asm"
  4334 000033FD FF2C                <1> filetypes db 255,44
  4335                              <1> progstart:		;programs start here
  4336                              <1> indexfiles:
  4337 000033FF BE[FF330000]        <1> 	mov esi, progstart
  4338 00003404 BB[E81F0100]        <1> 	mov ebx, fileindex
  4339 00003409 BF[FF330000]        <1> 	mov edi, progstart
  4340 0000340E 81EF02000000        <1> 	sub edi, 2
  4341                              <1> indexloop:
  4342 00003414 668B0E              <1> 	mov cx, [esi]
  4343                              <1> 	indexloop2:
  4344 00003417 663B0F              <1> 		cmp cx, [edi]
  4345 0000341A 7424                <1> 		je indexloop2done
  4346 0000341C 81EF02000000        <1> 		sub edi, 2
  4347 00003422 81FF[FD330000]      <1> 		cmp edi, filetypes
  4348 00003428 73ED                <1> 		jae indexloop2
  4349 0000342A BF[FF330000]        <1> 	mov edi, progstart
  4350 0000342F 81EF02000000        <1> 	sub edi, 2
  4351 00003435 46                  <1> 	inc esi
  4352 00003436 81FE[02540000]      <1> 	cmp esi, batchprogend
  4353 0000343C 734E                <1> 	jae indexloopdone
  4354 0000343E EBD4                <1> 	jmp indexloop
  4355                              <1> indexloop2done:
  4356 00003440 66890B              <1> 	mov [ebx], cx
  4357 00003443 81C302000000        <1> 	add ebx, 2
  4358 00003449 81C602000000        <1> 	add esi, 2
  4359                              <1> 	nameindex:
  4360 0000344F 8A0E                <1> 		mov cl, [esi]
  4361 00003451 80F900              <1> 		cmp cl, 0
  4362 00003454 7406                <1> 		je nameindexdone
  4363 00003456 880B                <1> 		mov [ebx], cl
  4364 00003458 46                  <1> 		inc esi
  4365 00003459 43                  <1> 		inc ebx
  4366 0000345A EBF3                <1> 		jmp nameindex
  4367                              <1> 	nameindexdone:
  4368 0000345C 43                  <1> 		inc ebx
  4369 0000345D 66C7030000          <1> 		mov word [ebx], 0
  4370 00003462 81C302000000        <1> 		add ebx, 2
  4371 00003468 46                  <1> 		inc esi
  4372 00003469 8933                <1> 		mov [ebx], esi
  4373 0000346B 81C304000000        <1> 		add ebx, 4
  4374 00003471 66C7030000          <1> 		mov word [ebx], 0
  4375 00003476 81C302000000        <1> 		add ebx, 2
  4376 0000347C 81FB[E8230100]      <1> 		cmp ebx, fileindexend
  4377 00003482 7308                <1> 		jae indexloopdone
  4378 00003484 81C601000000        <1> 		add esi, 1
  4379 0000348A EB88                <1> 		jmp indexloop
  4380 0000348C C605[94340000]01    <1> indexloopdone: 	mov byte [indexdone], 1
  4381 00003493 C3                  <1> 		ret
  4382 00003494 00                  <1> indexdone db 0
  4383                              <1> %include 'source/programs/_comment.asm' ;#
  4384 00003495 FF2C2300            <2> 	db 255,44,"#",0	;this lets you rem stuff
  4385 00003499 C3                  <2> 	ret 
  4386                              <1> %include 'source/programs/_math.asm' ;!
  4387 0000349A FF2C2100            <2> db 255,44,"!",0
  4388                              <2> 	num:	
  4389 0000349E E8C5FBFFFF          <2> 		call clearbuffer
  4390 000034A3 C605[24370000]00    <2> 		mov byte [decimal], 0
  4391 000034AA C605[25370000]00    <2> 		mov byte [decimal2], 0
  4392 000034B1 8B35[A92F0000]      <2> 		mov esi, [currentcommandloc]
  4393 000034B7 31C0                <2> 		xor eax, eax
  4394 000034B9 31C9                <2> 		xor ecx, ecx
  4395 000034BB 31DB                <2> 		xor ebx, ebx
  4396 000034BD 8A06                <2> 	num2:	mov al, [esi]
  4397 000034BF 3C2B                <2> 		cmp al, '+'
  4398 000034C1 741B                <2> 		je operatorfound
  4399 000034C3 3C2D                <2> 		cmp al, '-'
  4400 000034C5 7417                <2> 		je operatorfound
  4401 000034C7 3C2A                <2> 		cmp al, '*'
  4402 000034C9 7413                <2> 		je operatorfound
  4403 000034CB 3C2F                <2> 		cmp al, '/'
  4404 000034CD 740F                <2> 		je operatorfound
  4405 000034CF 3C5E                <2> 		cmp al, '^'
  4406 000034D1 740B                <2> 		je operatorfound
  4407 000034D3 46                  <2> 		inc esi
  4408 000034D4 3C00                <2> 		cmp al, 0
  4409 000034D6 0F841AF8FFFF        <2> 		je near nwcmd
  4410 000034DC EBDF                <2> 		jmp num2
  4411 000034DE 50                  <2> 	operatorfound: push eax
  4412 000034DF 30E4                <2> 		xor ah, ah
  4413 000034E1 8826                <2> 		mov [esi], ah
  4414 000034E3 89F7                <2> 		mov edi, esi
  4415 000034E5 46                  <2> 		inc esi
  4416 000034E6 8A06                <2> 		mov al, [esi]
  4417 000034E8 3C25                <2> 		cmp al, '%'
  4418 000034EA 0F8462000000        <2> 		je near resultnum1
  4419                              <2> 	varnum2: 
  4420 000034F0 57                  <2> 		push edi
  4421 000034F1 E8A4000000          <2> 		call checkdecimal
  4422 000034F6 5F                  <2> 		pop edi
  4423 000034F7 E880FEFFFF          <2> 		call cnvrttxt
  4424                              <2> 	vrnm2:
  4425 000034FC 89CB                <2> 		mov ebx, ecx
  4426 000034FE 53                  <2> 		push ebx
  4427 000034FF E864FBFFFF          <2> 		call clearbuffer
  4428 00003504 8B35[A92F0000]      <2> 		mov esi, [currentcommandloc]
  4429 0000350A 89F7                <2> 		mov edi, esi
  4430 0000350C 46                  <2> 		inc esi
  4431 0000350D 8A06                <2> 		mov al, [esi]
  4432 0000350F 3C25                <2> 		cmp al, '%'
  4433 00003511 0F844F000000        <2> 		je near resultnum2
  4434                              <2> 	varnum4: 
  4435 00003517 57                  <2> 		push edi
  4436 00003518 E869000000          <2> 		call checkdecimal2
  4437 0000351D 5F                  <2> 		pop edi
  4438 0000351E E859FEFFFF          <2> 		call cnvrttxt
  4439                              <2> 	vrnm4:
  4440 00003523 5B                  <2> 		pop ebx
  4441 00003524 58                  <2> 		pop eax
  4442 00003525 3C2B                <2> 		cmp al, '+'
  4443 00003527 0F849B000000        <2> 		je near plusnum
  4444 0000352D 3C2D                <2> 		cmp al, '-'
  4445 0000352F 0F849F000000        <2> 		je near subnum
  4446 00003535 3C2A                <2> 		cmp al, '*'
  4447 00003537 0F84A3000000        <2> 		je near mulnum
  4448 0000353D 3C2F                <2> 		cmp al, '/'
  4449 0000353F 0F84B1000000        <2> 		je near divnum
  4450 00003545 3C5E                <2> 		cmp al, '^'
  4451 00003547 0F84CE000000        <2> 		je near expnum
  4452 0000354D E9A4F7FFFF          <2> 		jmp nwcmd
  4453                              <2> 	resultnum1:
  4454 00003552 8A0D[26370000]      <2> 		mov cl, [decimalresult]
  4455 00003558 880D[24370000]      <2> 		mov [decimal], cl
  4456 0000355E 8B0D[27370000]      <2> 		mov ecx, [result]
  4457 00003564 EB96                <2> 		jmp vrnm2
  4458                              <2> 	resultnum2:
  4459 00003566 8A0D[24370000]      <2> 		mov cl, [decimal]
  4460 0000356C 880D[25370000]      <2> 		mov [decimal2], cl
  4461 00003572 8A0D[26370000]      <2> 		mov cl, [decimalresult]
  4462 00003578 880D[24370000]      <2> 		mov [decimal], cl
  4463 0000357E 8B0D[27370000]      <2> 		mov ecx, [result]
  4464 00003584 EB9D                <2> 		jmp vrnm4
  4465                              <2> 	checkdecimal2:
  4466 00003586 8A25[24370000]      <2> 		mov ah, [decimal]
  4467 0000358C 8825[25370000]      <2> 		mov [decimal2], ah
  4468 00003592 30E4                <2> 		xor ah, ah
  4469 00003594 8825[24370000]      <2> 		mov [decimal], ah
  4470                              <2> 	checkdecimal:
  4471 0000359A 89F7                <2> 		mov edi, esi
  4472                              <2> 	chkdec1:
  4473 0000359C 8A07                <2> 		mov al, [edi]
  4474 0000359E 3C2E                <2> 		cmp al, '.'
  4475 000035A0 0F840B000000        <2> 		je near fnddec
  4476 000035A6 3C00                <2> 		cmp al, 0
  4477 000035A8 0F8419000000        <2> 		je near nodecimal
  4478 000035AE 47                  <2> 		inc edi
  4479 000035AF EBEB                <2> 		jmp chkdec1
  4480                              <2> 	fnddec:
  4481 000035B1 8A4701              <2> 		mov al, [edi + 1]
  4482 000035B4 8807                <2> 		mov [edi], al
  4483 000035B6 3C00                <2> 		cmp al, 0
  4484 000035B8 0F8409000000        <2> 		je near nodecimal
  4485 000035BE FE05[24370000]      <2> 		inc byte [decimal]
  4486 000035C4 47                  <2> 		inc edi
  4487 000035C5 EBEA                <2> 		jmp fnddec
  4488                              <2> 	nodecimal:
  4489 000035C7 C3                  <2> 		ret
  4490                              <2> 	plusnum:
  4491 000035C8 E815010000          <2> 		call decaddfix
  4492 000035CD 01D9                <2> 		add ecx, ebx
  4493 000035CF E98A000000          <2> 		jmp retnum
  4494                              <2> 	subnum:
  4495 000035D4 E809010000          <2> 		call decaddfix
  4496 000035D9 29D9                <2> 		sub ecx, ebx
  4497 000035DB E97E000000          <2> 		jmp retnum
  4498                              <2> 	mulnum:
  4499 000035E0 A0[25370000]        <2> 		mov al, [decimal2]
  4500 000035E5 0005[24370000]      <2> 		add [decimal], al
  4501 000035EB 89C8                <2> 		mov eax, ecx
  4502 000035ED F7E3                <2> 		mul ebx
  4503 000035EF 89C1                <2> 		mov ecx, eax
  4504 000035F1 E968000000          <2> 		jmp retnum
  4505                              <2> 	divnum:
  4506 000035F6 E8E7000000          <2> 		call decaddfix
  4507 000035FB 30C0                <2> 		xor al, al
  4508 000035FD A2[24370000]        <2> 		mov [decimal], al
  4509 00003602 31D2                <2> 		xor edx, edx
  4510 00003604 89C8                <2> 		mov eax, ecx
  4511 00003606 81FB00000000        <2> 		cmp ebx, 0
  4512 0000360C 0F844C000000        <2> 		je near retnum
  4513 00003612 F7F3                <2> 		div ebx
  4514 00003614 89C1                <2> 		mov ecx, eax
  4515 00003616 E943000000          <2> 		jmp retnum
  4516                              <2> 	expnum:
  4517 0000361B 8A15[24370000]      <2> 		mov dl, [decimal]
  4518 00003621 8815[25370000]      <2> 		mov [decimal2], dl
  4519 00003627 31D2                <2> 		xor edx, edx
  4520 00003629 89C8                <2> 		mov eax, ecx
  4521 0000362B 89D9                <2> 		mov ecx, ebx
  4522 0000362D 89C3                <2> 		mov ebx, eax
  4523 0000362F 81F900000000        <2> 		cmp ecx, 0
  4524 00003635 7422                <2> 		je noexpnum
  4525 00003637 49                  <2> 		dec ecx
  4526 00003638 81F900000000        <2> 		cmp ecx, 0
  4527 0000363E 7412                <2> 		je noexpnumlp
  4528 00003640 F7E3                <2> 	expnumlp: mul ebx
  4529 00003642 8A15[25370000]      <2> 		mov dl, [decimal2]
  4530 00003648 0015[24370000]      <2> 		add [decimal], dl
  4531 0000364E 31D2                <2> 		xor edx, edx
  4532 00003650 E2EE                <2> 		loop expnumlp
  4533                              <2> 	noexpnumlp:
  4534 00003652 89C1                <2> 		mov ecx, eax
  4535 00003654 E905000000          <2> 		jmp retnum
  4536                              <2> 	noexpnum:
  4537 00003659 B901000000          <2> 		mov ecx, 1
  4538                              <2> 	retnum: 
  4539 0000365E BE[7C3E0100]        <2> 		mov esi, numbuf
  4540 00003663 890D[27370000]      <2> 		mov [result], ecx
  4541 00003669 E80FFAFFFF          <2> 		call convert
  4542 0000366E BE[7C3E0100]        <2> 		mov esi, numbuf
  4543 00003673 8A25[24370000]      <2> 		mov ah, [decimal]
  4544 00003679 8825[26370000]      <2> 		mov [decimalresult], ah
  4545 0000367F 80FC00              <2> 		cmp ah, 0
  4546 00003682 0F8425000000        <2> 		je near noputdecimal
  4547                              <2> 	putdecimal:
  4548 00003688 4E                  <2> 		dec esi
  4549 00003689 FECC                <2> 		dec ah
  4550 0000368B 80FC00              <2> 		cmp ah, 0
  4551 0000368E 0F87F4FFFFFF        <2> 		ja near putdecimal
  4552 00003694 4E                  <2> 		dec esi
  4553 00003695 8A06                <2> 		mov al, [esi]
  4554 00003697 C6062E              <2> 		mov byte [esi], '.'
  4555                              <2> 	decputloop:
  4556 0000369A 4E                  <2> 		dec esi
  4557 0000369B 8A26                <2> 		mov ah, [esi]
  4558 0000369D 8806                <2> 		mov [esi], al
  4559 0000369F 88E0                <2> 		mov al, ah
  4560 000036A1 81FE[683E0100]      <2> 		cmp esi, buf2
  4561 000036A7 0F87EDFFFFFF        <2> 		ja near decputloop
  4562                              <2> 	noputdecimal:
  4563 000036AD BE[683E0100]        <2> 		mov esi, buf2
  4564 000036B2 E809000000          <2> 		call chkadd
  4565 000036B7 E93AF6FFFF          <2> 		jmp nwcmd
  4566 000036BC 00000000            <2> edxnumbuf dw 0,0
  4567 000036C0 8A06                <2> 	chkadd: mov al, [esi]
  4568 000036C2 3C30                <2> 		cmp al, '0'
  4569 000036C4 750C                <2> 		jne dnadd
  4570 000036C6 46                  <2> 		inc esi
  4571 000036C7 81FE[7C3E0100]      <2> 		cmp esi, numbuf
  4572 000036CD 7402                <2> 		je dnaddm1
  4573 000036CF EBEF                <2> 		jmp chkadd
  4574 000036D1 4E                  <2> 	dnaddm1: dec esi
  4575 000036D2 E854E6FFFF          <2> 	dnadd:	call print
  4576 000036D7 BE[778B0000]        <2> 		mov esi, line
  4577 000036DC E84AE6FFFF          <2> 		call print
  4578 000036E1 C3                  <2> 		ret
  4579                              <2> 		
  4580                              <2> 	decaddfix:
  4581 000036E2 A0[25370000]        <2> 		mov al, [decimal2]
  4582 000036E7 8A25[24370000]      <2> 		mov ah, [decimal]
  4583 000036ED 38E0                <2> 		cmp al, ah
  4584 000036EF 7432                <2> 		je gooddecadd
  4585 000036F1 38E0                <2> 		cmp al, ah
  4586 000036F3 721A                <2> 		jb lowdecadd
  4587                              <2> 	highdecadd:
  4588 000036F5 FEC4                <2> 		inc ah
  4589 000036F7 89CA                <2> 		mov edx, ecx
  4590 000036F9 C1E103              <2> 		shl ecx, 3
  4591 000036FC 01D1                <2> 		add ecx, edx
  4592 000036FE 01D1                <2> 		add ecx, edx
  4593 00003700 38E0                <2> 		cmp al, ah
  4594 00003702 77F1                <2> 		ja highdecadd
  4595 00003704 8825[24370000]      <2> 		mov [decimal], ah
  4596 0000370A E914000000          <2> 		jmp gooddecadd
  4597                              <2> 	lowdecadd:
  4598 0000370F FEC0                <2> 		inc al
  4599 00003711 89DA                <2> 		mov edx, ebx
  4600 00003713 C1E303              <2> 		shl ebx, 3
  4601 00003716 01D3                <2> 		add ebx, edx
  4602 00003718 01D3                <2> 		add ebx, edx
  4603 0000371A 38E0                <2> 		cmp al, ah
  4604 0000371C 72F1                <2> 		jb lowdecadd
  4605 0000371E A2[24370000]        <2> 		mov [decimal], al
  4606                              <2> 	gooddecadd:
  4607 00003723 C3                  <2> 		ret
  4608                              <2> 		
  4609 00003724 00                  <2> decimal db 0
  4610 00003725 00                  <2> decimal2 db 0
  4611 00003726 00                  <2> decimalresult db 0
  4612 00003727 00000000            <2> result dd 0
  4613                              <1> %include 'source/programs/_variables.asm' ;% and $
  4614 0000372B FF2C2500            <2> db 255,44,"%",0
  4615                              <2> 	ans:
  4616 0000372F BE[683E0100]        <2> 		mov esi, buf2
  4617 00003734 E887FFFFFF          <2> 		call chkadd
  4618 00003739 C3                  <2> 		ret
  4619                              <2> 		
  4620 0000373A FF2C2400            <2> db 255,44,"$",0
  4621 0000373E 8B35[A92F0000]      <2> var: mov esi, [currentcommandloc]
  4622 00003744 BB[68260100]        <2> 	mov ebx, variables
  4623 00003749 8A06                <2> lkeq:	mov al, [esi]
  4624 0000374B 3C3D                <2> 	cmp al, '='
  4625 0000374D 741B                <2> 	je eqfnd	;is there an '=' sign?
  4626 0000374F 3C00                <2> 	cmp al, 0
  4627 00003751 7403                <2> 	je echovars
  4628 00003753 46                  <2> 	inc esi
  4629 00003754 EBF3                <2> 	jmp lkeq
  4630 00003756 BE[68260100]        <2> echovars: mov esi, variables
  4631 0000375B BB[68360100]        <2> 	mov ebx, varend
  4632 00003760 B105                <2> 	mov cl, 5
  4633 00003762 B504                <2> 	mov ch, 4
  4634 00003764 E89EF8FFFF          <2> 	call array
  4635 00003769 C3                  <2> 	ret
  4636 0000376A 46                  <2> eqfnd:	inc esi
  4637 0000376B 8A06                <2> 	mov al, [esi]
  4638 0000376D 3C00                <2> 	cmp al, 0
  4639 0000376F 7410                <2> 	je readvar
  4640 00003771 8B35[A92F0000]      <2> 	mov esi, [currentcommandloc]
  4641 00003777 BB[68260100]        <2> 	mov ebx, variables
  4642 0000377C E919000000          <2> 	jmp seek
  4643                              <2> readvar:
  4644 00003781 B00A                <2> 	mov al, 10
  4645 00003783 66BB0700            <2> 	mov bx, 7
  4646 00003787 C605[09230000]00    <2> 	mov byte [commandedit], 0
  4647 0000378E BF[683E0100]        <2> 	mov edi, buftxtend
  4648 00003793 E8C0E6FFFF          <2> 	call rdprint
  4649 00003798 EBA4                <2> 	jmp var
  4650 0000379A 668B03              <2> seek:	mov ax, [ebx]
  4651 0000379D B105                <2> 	mov cl, 5
  4652 0000379F B504                <2> 	mov ch, 4
  4653 000037A1 663D0000            <2> 	cmp ax, 0
  4654 000037A5 0F845B000000        <2> 	je near save
  4655 000037AB 6639C8              <2> 	cmp ax, cx
  4656 000037AE 7403                <2> 	je skfnd
  4657 000037B0 43                  <2> 	inc ebx
  4658 000037B1 EBE7                <2> 	jmp seek
  4659 000037B3 8B35[A92F0000]      <2> skfnd:	mov esi, [currentcommandloc]
  4660 000037B9 46                  <2> 	inc esi
  4661 000037BA 81C302000000        <2> 	add ebx, 2
  4662 000037C0 89DF                <2> 	mov edi, ebx
  4663 000037C2 B13D                <2> 	mov cl, '='
  4664 000037C4 E81FF8FFFF          <2> 	call cndtest
  4665 000037C9 3C01                <2> 	cmp al, 1	
  4666 000037CB 7418                <2> 	je varfnd
  4667 000037CD 89FB                <2> 	mov ebx, edi
  4668 000037CF 8B35[A92F0000]      <2> 	mov esi, [currentcommandloc]
  4669 000037D5 668B03              <2> 	mov ax, [ebx]
  4670 000037D8 663D0000            <2> 	cmp ax, 0
  4671 000037DC 0F8424000000        <2> 	je near save
  4672 000037E2 43                  <2> 	inc ebx
  4673 000037E3 EBB5                <2> 	jmp seek
  4674 000037E5 8A03                <2> varfnd:	mov al, [ebx]
  4675 000037E7 3C04                <2> 	cmp al, 4
  4676 000037E9 7404                <2> 	je save2
  4677 000037EB 4B                  <2> 	dec ebx
  4678 000037EC 4E                  <2> 	dec esi
  4679 000037ED EBF6                <2> 	jmp varfnd
  4680 000037EF 4B                  <2> save2:	dec ebx
  4681 000037F0 4E                  <2> 	dec esi
  4682 000037F1 8A03                <2> 	mov al, [ebx]
  4683 000037F3 3C05                <2> 	cmp al, 5
  4684 000037F5 7402                <2> 	je remove
  4685 000037F7 EBEC                <2> 	jmp varfnd
  4686 000037F9 8A03                <2> remove: mov al, [ebx]
  4687 000037FB 3C00                <2> 	cmp al, 0
  4688 000037FD 749B                <2> 	je seek
  4689 000037FF 30C0                <2> 	xor al, al
  4690 00003801 8803                <2> 	mov [ebx], al
  4691 00003803 43                  <2> 	inc ebx
  4692 00003804 EBF3                <2> 	jmp remove	;do not need for now-need defragmentation
  4693 00003806 8B35[A92F0000]      <2> save:	mov esi, [currentcommandloc]
  4694 0000380C 43                  <2> 	inc ebx
  4695 0000380D B005                <2> 	mov al, 5
  4696 0000380F B404                <2> 	mov ah, 4
  4697 00003811 668903              <2> 	mov [ebx], ax
  4698 00003814 43                  <2> 	inc ebx
  4699 00003815 43                  <2> svhere:	inc ebx
  4700 00003816 46                  <2> 	inc esi
  4701 00003817 8A06                <2> 	mov al, [esi]
  4702 00003819 3C00                <2> 	cmp al, 0
  4703 0000381B 0F844A000000        <2> 	je near svdone
  4704 00003821 3C25                <2> 	cmp al, '%'
  4705 00003823 7404                <2> 	je ans2
  4706 00003825 8803                <2> 	mov [ebx], al	
  4707 00003827 EBEC                <2> 	jmp svhere
  4708 00003829 56                  <2> ans2:	push esi
  4709 0000382A BE[683E0100]        <2> 	mov esi, buf2
  4710 0000382F E823000000          <2> 	call ansfnd
  4711 00003834 E803000000          <2> 	call anscp
  4712 00003839 5E                  <2> 	pop esi
  4713 0000383A EBD9                <2> 	jmp svhere
  4714 0000383C 8A06                <2> anscp:	mov al, [esi]
  4715 0000383E 8803                <2> 	mov [ebx], al
  4716 00003840 81FE[7C3E0100]      <2> 	cmp esi, numbuf
  4717 00003846 74CD                <2> 	je svhere
  4718 00003848 3C00                <2> 	cmp al, 0
  4719 0000384A 74C9                <2> 	je svhere
  4720 0000384C 43                  <2> 	inc ebx
  4721 0000384D 46                  <2> 	inc esi
  4722 0000384E EBEC                <2> 	jmp anscp
  4723 00003850 5E                  <2> ansnf:	pop esi
  4724 00003851 8A06                <2> 	mov al, [esi]
  4725 00003853 8803                <2> 	mov [ebx], al
  4726 00003855 EBBE                <2> 	jmp svhere
  4727 00003857 46                  <2> ansfnd:	inc esi
  4728 00003858 81FE[7B3E0100]      <2> 	cmp esi, numbuf - 1
  4729 0000385E 740A                <2> 	je fndans
  4730 00003860 8A06                <2> 	mov al, [esi]
  4731 00003862 3C00                <2> 	cmp al, 0
  4732 00003864 74EA                <2> 	je ansnf
  4733 00003866 3C30                <2> 	cmp al, '0'
  4734 00003868 74ED                <2> 	je ansfnd
  4735                              <2> fndans:
  4736 0000386A C3                  <2> 	ret
  4737 0000386B 30C0                <2> svdone:	xor al, al
  4738 0000386D 8803                <2> 	mov [ebx], al
  4739 0000386F C3                  <2> 	ret
  4740                              <1> %include 'source/programs/_run.asm' ;./
  4741                              <2> 
  4742 00003870 7F454C46            <2> 	elfstart db 0x7F,"ELF"
  4743 00003874 FF2C2E2F00          <2> 	db 255,44,"./",0
  4744                              <2> rundiskprog:
  4745 00003879 8B3D[A92F0000]      <2> 	mov edi, [currentcommandloc]
  4746 0000387F 81C702000000        <2> 	add edi, 2
  4747 00003885 BE00004000          <2> 	mov esi, 0x400000
  4748 0000388A E8B22D0000          <2> 	call loadfile
  4749 0000388F 81FA94010000        <2> 	cmp edx, 404
  4750 00003895 746A                <2> 	je noprogfound
  4751 00003897 BB00004000          <2> 	mov ebx, 0x400000
  4752 0000389C A1[70380000]        <2> 	mov eax, [elfstart]
  4753 000038A1 3903                <2> 	cmp [ebx], eax
  4754 000038A3 0F8437000000        <2> 	je near runelf
  4755 000038A9 66813B4558          <2> 	cmp word [ebx], "EX"
  4756 000038AE 7577                <2> 	jne progbatchfound
  4757 000038B0 81C302000000        <2> 	add ebx, 2
  4758 000038B6 8B3D[A92F0000]      <2> 	mov edi, [currentcommandloc]
  4759 000038BC 81C702000000        <2> 	add edi, 2
  4760                              <2> findspaceprog:
  4761 000038C2 8A07                <2> 	mov al, [edi]
  4762 000038C4 47                  <2> 	inc edi
  4763 000038C5 3C20                <2> 	cmp al, " "
  4764 000038C7 75F9                <2> 	jne findspaceprog
  4765                              <2> findnonspaceprog:
  4766 000038C9 8A07                <2> 	mov al, [edi]
  4767 000038CB 47                  <2> 	inc edi
  4768 000038CC 3C20                <2> 	cmp al, " "
  4769 000038CE 74F9                <2> 	je findnonspaceprog
  4770 000038D0 4F                  <2> 	dec edi
  4771 000038D1 8925[E8230100]      <2> 	mov [previousstack], esp
  4772 000038D7 FFD3                <2> 	call ebx
  4773 000038D9 8B25[E8230100]      <2> 	mov esp, [previousstack]
  4774 000038DF C3                  <2> 	ret
  4775                              <2> runelf:
  4776 000038E0 8B3D[A92F0000]      <2> 	mov edi, [currentcommandloc]
  4777 000038E6 81C702000000        <2> 	add edi, 2
  4778 000038EC 81C380000000        <2> 	add ebx, 0x80
  4779 000038F2 8925[E8230100]      <2> 	mov [previousstack], esp
  4780 000038F8 FFD3                <2> 	call ebx
  4781 000038FA 8B25[E8230100]      <2> 	mov esp, [previousstack]
  4782 00003900 C3                  <2> 	ret
  4783                              <2> noprogfound:
  4784 00003901 BE[3E8B0000]        <2> 	mov esi, notfound1
  4785 00003906 E820E4FFFF          <2> 	call print
  4786 0000390B 8B35[A92F0000]      <2> 	mov esi, [currentcommandloc]
  4787 00003911 81C602000000        <2> 	add esi, 2
  4788 00003917 E80FE4FFFF          <2> 	call print
  4789 0000391C BE[468B0000]        <2> 	mov esi, notfound2
  4790 00003921 E805E4FFFF          <2> 	call print
  4791 00003926 C3                  <2> 	ret
  4792                              <2> progbatchfound:
  4793 00003927 BF00004000          <2> 		mov edi, 0x400000
  4794 0000392C C605[62260100]01    <2> 		mov byte [BATCHISON], 1
  4795                              <2> 	batchrunloop:
  4796 00003933 E89BF3FFFF          <2> 		call buftxtclear
  4797 00003938 BE[683A0100]        <2> 		mov esi, buftxt
  4798 0000393D 8935[A92F0000]      <2> 		mov [currentcommandloc], esi
  4799                              <2> 	batchrunloop2:
  4800 00003943 B10A                <2> 		mov cl, 10
  4801 00003945 B50D                <2> 		mov ch, 13
  4802 00003947 380F                <2> 		cmp [edi], cl
  4803 00003949 0F8419000000        <2> 		je near nxtbatchrunline
  4804 0000394F 382F                <2> 		cmp [edi], ch
  4805 00003951 0F8411000000        <2> 		je near nxtbatchrunline
  4806 00003957 803F00              <2> 		cmp byte [edi], 0
  4807 0000395A 0F8408000000        <2> 		je near nxtbatchrunline
  4808 00003960 8A07                <2> 		mov al, [edi]
  4809 00003962 8806                <2> 		mov [esi], al
  4810 00003964 46                  <2> 		inc esi
  4811 00003965 47                  <2> 		inc edi
  4812 00003966 EBDB                <2> 		jmp batchrunloop2
  4813                              <2> 	nxtbatchrunline:
  4814 00003968 47                  <2> 		inc edi
  4815 00003969 380F                <2> 		cmp [edi], cl
  4816 0000396B 74FB                <2> 		je nxtbatchrunline
  4817 0000396D 382F                <2> 		cmp [edi], ch
  4818 0000396F 74F7                <2> 		je nxtbatchrunline
  4819 00003971 893D[CF390000]      <2> 		mov [batchedi], edi
  4820 00003977 893D[5E260100]      <2> 		mov [BATCHPOS], edi
  4821 0000397D C60600              <2> 		mov byte [esi], 0
  4822 00003980 BE[683A0100]        <2> 		mov esi, buftxt
  4823 00003985 803E00              <2> 		cmp byte [esi], 0
  4824 00003988 0F8439000000        <2> 		je near nobatchfoundrun
  4825 0000398E 31DB                <2> 		xor ebx, ebx
  4826 00003990 8A1D[F9250100]      <2> 		mov bl, [IFON]
  4827 00003996 80FB00              <2> 		cmp bl, 0
  4828 00003999 0F8534000000        <2> 		jne near iftestbatch
  4829                              <2> 	doneiftest:
  4830 0000399F 803D[A53A0000]00    <2> 		cmp byte [runnextline], 0
  4831 000039A6 0F8405000000        <2> 		je near noruniftest
  4832 000039AC E822F5FFFF          <2> 		call run
  4833                              <2> 	noruniftest:
  4834 000039B1 C605[A53A0000]01    <2> 		mov byte [runnextline], 1
  4835 000039B8 8B3D[CF390000]      <2> 		mov edi, [batchedi]
  4836 000039BE 803F00              <2> 		cmp byte [edi], 0
  4837 000039C1 0F856CFFFFFF        <2> 		jne near batchrunloop
  4838                              <2> 	nobatchfoundrun:
  4839 000039C7 C605[62260100]00    <2> 		mov byte [BATCHISON], 0
  4840 000039CE C3                  <2> 		ret
  4841                              <2> 	
  4842 000039CF 00000000            <2> batchedi dd 0	
  4843                              <2> 	
  4844                              <2> 	iftestbatch:
  4845 000039D3 BE[FA250100]        <2> 		mov esi, IFTRUE
  4846 000039D8 01DE                <2> 		add esi, ebx
  4847 000039DA 803E00              <2> 		cmp byte [esi], 0
  4848 000039DD 0F85BCFFFFFF        <2> 		jne near doneiftest
  4849 000039E3 881D[A63A0000]      <2> 		mov [iffalsebuf], bl
  4850 000039E9 803D[63260100]01    <2> 		cmp byte [LOOPON], 1
  4851 000039F0 0F8513000000        <2> 		jne near fifindbatch
  4852 000039F6 E938FFFFFF          <2> 		jmp batchrunloop
  4853                              <2> 	elsetestbatch:
  4854 000039FB C60601              <2> 		mov byte [esi], 1
  4855 000039FE 81C705000000        <2> 		add edi, 5
  4856 00003A04 E92AFFFFFF          <2> 		jmp batchrunloop
  4857                              <2> 	fifindbatch:
  4858 00003A09 66B96966            <2> 		mov cx, "if"
  4859 00003A0D 66B86669            <2> 		mov ax, "fi"
  4860 00003A11 663907              <2> 		cmp [edi], ax
  4861 00003A14 0F8424000000        <2> 		je near fifoundbatch
  4862 00003A1A 66390F              <2> 		cmp [edi], cx
  4863 00003A1D 0F8465000000        <2> 		je near iffoundbatch
  4864 00003A23 803F00              <2> 		cmp byte [edi], 0
  4865 00003A26 0F8412000000        <2> 		je near fifoundbatch
  4866 00003A2C B8656C7365          <2> 		mov eax, "else"
  4867 00003A31 3907                <2> 		cmp [edi], eax
  4868 00003A33 0F84C2FFFFFF        <2> 		je near elsetestbatch
  4869 00003A39 E973FFFFFF          <2> 		jmp noruniftest
  4870                              <2> 	fifoundbatch:
  4871 00003A3E 81C702000000        <2> 		add edi, 2
  4872 00003A44 B00A                <2> 		mov al, 10
  4873 00003A46 3807                <2> 		cmp [edi], al
  4874 00003A48 0F840B000000        <2> 		je near goodfibatch
  4875 00003A4E 803F00              <2> 		cmp byte [edi], 0
  4876 00003A51 0F8470FFFFFF        <2> 		je near nobatchfoundrun
  4877 00003A57 EBB0                <2> 		jmp fifindbatch
  4878                              <2> 	goodfibatch:
  4879 00003A59 B001                <2> 		mov al, 1
  4880 00003A5B 2805[F9250100]      <2> 		sub [IFON], al 
  4881 00003A61 A0[F9250100]        <2> 		mov al, [IFON]
  4882 00003A66 8A1D[A63A0000]      <2> 		mov bl, [iffalsebuf]
  4883 00003A6C 38D8                <2> 		cmp al, bl
  4884 00003A6E 7799                <2> 		ja fifindbatch
  4885 00003A70 8B35[A92F0000]      <2> 		mov esi, [currentcommandloc]
  4886 00003A76 81EF02000000        <2> 		sub edi, 2
  4887 00003A7C C605[A53A0000]00    <2> 		mov byte [runnextline], 0
  4888 00003A83 E9ABFEFFFF          <2> 		jmp batchrunloop
  4889                              <2> 	iffoundbatch:
  4890 00003A88 B020                <2> 		mov al, ' '
  4891 00003A8A 81C702000000        <2> 		add edi, 2
  4892 00003A90 3807                <2> 		cmp [edi], al
  4893 00003A92 0F8571FFFFFF        <2> 		jne near fifindbatch
  4894 00003A98 B001                <2> 		mov al, 1
  4895 00003A9A 0005[F9250100]      <2> 		add [IFON], al
  4896 00003AA0 E964FFFFFF          <2> 		jmp fifindbatch
  4897                              <2> 		
  4898                              <2> 		
  4899 00003AA5 01                  <2> runnextline db 1
  4900 00003AA6 00                  <2> iffalsebuf db 0
  4901 00003AA7 C3                  <2> notbatch: ret 
  4902                              <1> %ifdef network.included
  4903                              <1> 	%include 'source/programs/arp.asm'
  4904 00003AA8 FF2C61727000        <2> db 255,44,"arp",0
  4905                              <2> 	;ARP TESTING
  4906                              <2> arptest:
  4907 00003AAE 8B35[A92F0000]      <2> 	mov esi, [currentcommandloc]
  4908 00003AB4 81C604000000        <2> 	add esi, 4
  4909 00003ABA E8844F0000          <2> 	call strtoip
  4910 00003ABF 890D[663B0000]      <2> 	mov [arptargetinfo + 6], ecx ;move to next ip
  4911 00003AC5 E8BF4F0000          <2> 	call showip
  4912 00003ACA 803D[6A3B0000]01    <2> 	cmp byte [arpconfig], 1
  4913 00003AD1 7405                <2> 	je arptest2
  4914 00003AD3 E841000000          <2> 	call arpinit
  4915                              <2> arptest2:	;try to reach 192.168.0.1
  4916 00003AD8 8B0D[308B0000]      <2> 	mov ecx, [sysmac]
  4917 00003ADE 668B1D[348B0000]    <2> 	mov bx, [sysmac + 4]
  4918 00003AE5 890D[463B0000]      <2> 	mov [sourcemac], ecx
  4919 00003AEB 66891D[4A3B0000]    <2> 	mov [sourcemac + 4],bx
  4920 00003AF2 890D[563B0000]      <2> 	mov [arpsenderinfo], ecx
  4921 00003AF8 66891D[5A3B0000]    <2> 	mov [arpsenderinfo + 4], bx
  4922 00003AFF BF[403B0000]        <2> 	mov edi, frame
  4923 00003B04 BE[6A3B0000]        <2> 	mov esi, framend
  4924 00003B09 E8034F0000          <2> 	call sendpacket
  4925 00003B0E BE[778B0000]        <2> 	mov esi, line
  4926 00003B13 E813E2FFFF          <2> 	call print
  4927 00003B18 C3                  <2> 	ret
  4928                              <2> 	
  4929                              <2> arpinit:
  4930 00003B19 BE[6B3B0000]        <2> 	mov esi, arptable
  4931 00003B1E BF[308B0000]        <2> 	mov edi, sysmac
  4932 00003B23 BB[2C8B0000]        <2> 	mov ebx, sysip
  4933 00003B28 8B0F                <2> 	mov ecx, [edi]
  4934 00003B2A 890E                <2> 	mov [esi], ecx
  4935 00003B2C 668B4F04            <2> 	mov cx, [edi + 4]
  4936 00003B30 894E04              <2> 	mov [esi + 4], ecx
  4937 00003B33 8B0B                <2> 	mov ecx, [ebx]
  4938 00003B35 894E06              <2> 	mov [esi + 6], ecx
  4939 00003B38 C605[6A3B0000]01    <2> 	mov byte [arpconfig], 1
  4940 00003B3F C3                  <2> 	ret
  4941                              <2> 	
  4942                              <2> ;example frame
  4943                              <2> frame:
  4944 00003B40 FFFFFFFFFFFF        <2> destinationmac:	db 0xFF,0xFF,0xFF,0xFF,0xFF,0xFF
  4945 00003B46 000000000000        <2> sourcemac:		db 0,0,0,0,0,0
  4946 00003B4C 0806                <2> ethertype:		db 8,6			;arp is 0x806
  4947                              <2> 	;;example packet
  4948 00003B4E 0100                <2> 	arppacket: 		dw 1			;ethernet is 1
  4949 00003B50 0800                <2> 	arpprotocol: 	db 8,0			;ip is 0x800
  4950 00003B52 0604                <2> 					db 6,4			;length of mac, length of ip
  4951 00003B54 0001                <2> 	arpoperation: 	db 0,1			;one for arp request
  4952 00003B56 000000000000        <2> 	arpsenderinfo:	db 0x00,0x00,0x00,0x00,0x00,0x00	;mac
  4953 00003B5C C0A80073            <2> 					db 192,168,0,115		;ip
  4954 00003B60 000000000000        <2> 	arptargetinfo:	db 0x00,0x00,0x00,0x00,0x00,0x00	;ignored in requests
  4955 00003B66 C0A80000            <2> 					db 192,168,0,0			;ip
  4956                              <2> framend:
  4957                              <2> 
  4958 00003B6A 00                  <2> arpconfig db 0
  4959                              <2> arptable:	;;mac,ip
  4960 00003B6B 000000000000000000- <2> 	times 10 db 0,0,0,0,0,0,0,0,0,0
  4961 00003B74 00<rept>            <2>
  4962                              <2> arptableend:	
  4963                              <1> %endif
  4964                              <1> %include 'source/programs/batch.asm'
  4965 00003BCF FF2C626174636800    <2> db 255,44,"batch",0
  4966                              <2> 	batchst: 
  4967 00003BD7 8B3D[A92F0000]      <2> 		mov edi, [currentcommandloc]
  4968 00003BDD 81C706000000        <2> 		add edi, 6
  4969 00003BE3 803F00              <2> 		cmp byte [edi], 0
  4970 00003BE6 0F846D000000        <2> 		je near nonamefound
  4971 00003BEC BE00004000          <2> 		mov esi, 0x400000
  4972 00003BF1 E84B2A0000          <2> 		call loadfile
  4973 00003BF6 89D0                <2> 		mov eax, edx
  4974 00003BF8 3D94010000          <2> 		cmp eax, 404
  4975 00003BFD 7465                <2> 		je goodbatchname
  4976 00003BFF BE[0A3C0000]        <2> 		mov esi, badbatchname
  4977 00003C04 E822E1FFFF          <2> 		call print
  4978 00003C09 C3                  <2> 		ret
  4979 00003C0A 546869732066696C65- <2> 		badbatchname db "This file already exists!",10,0
  4980 00003C13 20616C726561647920- <2>
  4981 00003C1C 657869737473210A00  <2>
  4982 00003C25 596F75206861766520- <2> 		namenotfoundbatch db "You have to type a name after the command.",10,0
  4983 00003C2E 746F20747970652061- <2>
  4984 00003C37 206E616D6520616674- <2>
  4985 00003C40 65722074686520636F- <2>
  4986 00003C49 6D6D616E642E0A00    <2>
  4987 00003C51 00000000            <2> 		esicache3 dd 0
  4988 00003C55 00000000            <2> 		esicache2 dd 0
  4989                              <2> 	nonamefound:
  4990 00003C59 BE[253C0000]        <2> 		mov esi, namenotfoundbatch
  4991 00003C5E E8C8E0FFFF          <2> 		call print
  4992 00003C63 C3                  <2> 		ret
  4993                              <2> 	goodbatchname:
  4994 00003C64 BE00004000          <2> 		mov esi, 0x400000
  4995                              <2> 	batchcreate:
  4996 00003C69 8935[513C0000]      <2> 		mov [esicache3], esi
  4997 00003C6F BF00008000          <2> 		mov edi, 0x800000
  4998 00003C74 B00A                <2> 		mov al, 10
  4999 00003C76 B307                <2> 		mov bl, 7
  5000 00003C78 B404                <2> 		mov ah, 4
  5001 00003C7A CD30                <2> 		int 30h
  5002 00003C7C 8935[553C0000]      <2> 		mov [esicache2], esi
  5003 00003C82 8A0E                <2> 		mov cl, [esi]
  5004 00003C84 8B35[513C0000]      <2> 		mov esi, [esicache3]
  5005 00003C8A BB[BE3C0000]        <2> 		mov ebx, exitword
  5006 00003C8F E854F3FFFF          <2> 		call cndtest
  5007 00003C94 3C01                <2> 		cmp al, 1
  5008 00003C96 7411                <2> 		je endbatchcreate
  5009 00003C98 3C02                <2> 		cmp al, 2
  5010 00003C9A 740D                <2> 		je endbatchcreate
  5011 00003C9C 8B35[553C0000]      <2> 		mov esi, [esicache2]
  5012 00003CA2 B00A                <2> 		mov al, 10
  5013 00003CA4 8806                <2> 		mov [esi], al
  5014 00003CA6 46                  <2> 		inc esi
  5015 00003CA7 EBC0                <2> 		jmp batchcreate
  5016                              <2> 	endbatchcreate:
  5017 00003CA9 8B35[513C0000]      <2> 		mov esi, [esicache3]
  5018 00003CAF 31C0                <2> 		xor eax, eax
  5019 00003CB1 8806                <2> 		mov [esi], al
  5020 00003CB3 BE00004000          <2> 		mov esi, 0x400000
  5021 00003CB8 E86EE0FFFF          <2> 		call print
  5022 00003CBD C3                  <2> 		ret
  5023                              <2> 	
  5024 00003CBE 5C7800              <2> 	exitword db "\x",0
  5025 00003CC1 54797065205C782074- <2> 	wordmsg db "Type \x to exit.",10,0
  5026 00003CCA 6F20657869742E0A00  <2>
  5027                              <1> %ifdef gui.background
  5028                              <1> 	%include 'source/programs/background.asm'
  5029 00003CD3 FF2C6261636B67726F- <2> db 255,44,"background",0
  5030 00003CDC 756E6400            <2>
  5031 00003CE0 8B3D[A92F0000]      <2> 		mov edi, [currentcommandloc]
  5032 00003CE6 81C70B000000        <2> 		add edi, 11
  5033 00003CEC BE00008000          <2> 		mov esi, 0x800000
  5034 00003CF1 E84B290000          <2> 		call loadfile
  5035 00003CF6 81FA94010000        <2> 		cmp edx, 404
  5036 00003CFC 0F840A100000        <2> 		je near filenotfound
  5037 00003D02 BE00008000          <2> 		mov esi, 0x800000
  5038 00003D07 66813E424D          <2> 		cmp word [esi], "BM"
  5039 00003D0C 7401                <2> 		je .bmpfound
  5040 00003D0E C3                  <2> 		ret
  5041                              <2> .bmpfound:
  5042 00003D0F 8B3D[08580000]      <2> 		mov edi, [physbaseptr]
  5043 00003D15 57                  <2> 		push edi
  5044 00003D16 BE[7D400100]        <2> 		mov esi, backgroundbuffer
  5045 00003D1B 8935[1F6F0000]      <2> 		mov [backgroundimage], esi
  5046 00003D21 8935[08580000]      <2> 		mov [physbaseptr], esi
  5047 00003D27 31C0                <2> 		xor eax, eax
  5048                              <2> .clearlp:
  5049 00003D29 8906                <2> 		mov [esi], eax
  5050 00003D2B 81C604000000        <2> 		add esi, 4
  5051 00003D31 81FE[7D542900]      <2> 		cmp esi, backgroundbufferend
  5052 00003D37 72F0                <2> 		jb .clearlp
  5053 00003D39 BE00008000          <2> 		mov esi, 0x800000
  5054 00003D3E 31C9                <2> 		xor ecx, ecx
  5055 00003D40 31D2                <2> 		xor edx, edx
  5056 00003D42 31DB                <2> 		xor ebx, ebx
  5057 00003D44 E8BC2A0000          <2> 		call showbmp
  5058 00003D49 5F                  <2> 		pop edi
  5059 00003D4A 893D[08580000]      <2> 		mov [physbaseptr], edi
  5060 00003D50 803D[9C8B0000]00    <2> 		cmp byte [guion], 0
  5061 00003D57 740F                <2> 		je .noclear
  5062 00003D59 E860310000          <2> 		call guiclear
  5063 00003D5E E8FB2D0000          <2> 		call clearmousecursor
  5064 00003D63 E8E9310000          <2> 		call reloadallgraphics
  5065                              <2> .noclear:
  5066 00003D68 C3                  <2> 		ret
  5067                              <1> %endif
  5068                              <1> %include 'source/programs/beep.asm'
  5069 00003D69 FF2C6265657000      <2> 	db 255,44,"beep",0
  5070                              <2> beep:
  5071 00003D70 B8[953D0000]        <2> 	mov eax, beepstart
  5072 00003D75 A3[6B020000]        <2> 	mov [soundpos], eax
  5073 00003D7A B8[993D0000]        <2> 	mov eax, beepend
  5074 00003D7F A3[6F020000]        <2> 	mov [soundendpos], eax
  5075 00003D84 C605[68020000]01    <2> 	mov byte [soundon], 1
  5076                              <2> waitforsoundendbeep:
  5077 00003D8B A0[68020000]        <2> 	mov al, [soundon]
  5078 00003D90 3C00                <2> 	cmp al, 0
  5079 00003D92 75F7                <2> 	jne waitforsoundendbeep
  5080 00003D94 C3                  <2> 	ret
  5081                              <2> 	
  5082                              <2> beepstart:
  5083 00003D95 3200D111            <2> 	dw 50, 4561
  5084                              <2> beepend:
  5085                              <1> %include 'source/programs/cd.asm'
  5086 00003D99 FF2C636400          <2> db 255,44,"cd",0
  5087                              <2> cd:
  5088 00003D9E 8B35[A92F0000]      <2> 	mov esi, [currentcommandloc]
  5089 00003DA4 81C603000000        <2> 	add esi, 3
  5090 00003DAA 8B3D[F0230100]      <2> 	mov edi, [currentfolderloc]
  5091 00003DB0 893D[EC230100]      <2> 	mov [lastfolderloc], edi
  5092 00003DB6 81C7[F4230100]      <2> 	add edi, currentfolder
  5093 00003DBC 4F                  <2> 	dec edi
  5094 00003DBD 66813E2E2E          <2> 	cmp word [esi], ".."
  5095 00003DC2 742A                <2> 	je .moveup
  5096 00003DC4 47                  <2> 	inc edi
  5097                              <2> .movedown:
  5098 00003DC5 8A06                <2> 	mov al, [esi]
  5099 00003DC7 8807                <2> 	mov [edi], al
  5100 00003DC9 47                  <2> 	inc edi
  5101 00003DCA 46                  <2> 	inc esi
  5102 00003DCB 3C00                <2> 	cmp al, 0
  5103 00003DCD 740A                <2> 	je .donecd
  5104 00003DCF 81FF[F4250100]      <2> 	cmp edi, currentfolderend
  5105 00003DD5 72EE                <2> 	jb .movedown
  5106 00003DD7 30C0                <2> 	xor al, al
  5107                              <2> .donecd:
  5108 00003DD9 4F                  <2> 	dec edi
  5109 00003DDA C6072F              <2> 	mov byte [edi], '/'
  5110 00003DDD 47                  <2> 	inc edi
  5111 00003DDE C60700              <2> 	mov byte [edi], 0
  5112 00003DE1 81EF[F4230100]      <2> 	sub edi, currentfolder
  5113 00003DE7 893D[F0230100]      <2> 	mov [currentfolderloc], edi
  5114 00003DED C3                  <2> 	ret
  5115                              <2> .moveup:
  5116 00003DEE 31C0                <2> 	xor eax, eax
  5117 00003DF0 A3[EC230100]        <2> 	mov [lastfolderloc], eax
  5118                              <2> .moveuploop:
  5119 00003DF5 4F                  <2> 	dec edi
  5120 00003DF6 8A07                <2> 	mov al, [edi]
  5121 00003DF8 81FF[F4230100]      <2> 	cmp edi, currentfolder
  5122 00003DFE 763B                <2> 	jbe .moveupover
  5123 00003E00 3C2F                <2> 	cmp al, '/'
  5124 00003E02 75F1                <2> 	jne .moveuploop
  5125 00003E04 C6072F              <2> 	mov byte [edi], '/'
  5126 00003E07 47                  <2> 	inc edi
  5127 00003E08 C60700              <2> 	mov byte [edi], 0
  5128 00003E0B 81EF[F4230100]      <2> 	sub edi, currentfolder
  5129 00003E11 893D[F0230100]      <2> 	mov [currentfolderloc], edi
  5130 00003E17 81C7[F4230100]      <2> 	add edi, currentfolder
  5131 00003E1D 4F                  <2> 	dec edi
  5132                              <2> .lastfolder:
  5133 00003E1E 4F                  <2> 	dec edi
  5134 00003E1F 8A07                <2> 	mov al, [edi]
  5135 00003E21 81FF[F4230100]      <2> 	cmp edi, currentfolder
  5136 00003E27 7604                <2> 	jbe .donemoveup
  5137 00003E29 3C2F                <2> 	cmp al, '/'
  5138 00003E2B 75F1                <2> 	jne .lastfolder
  5139                              <2> .donemoveup:
  5140 00003E2D 47                  <2> 	inc edi
  5141 00003E2E 81EF[F4230100]      <2> 	sub edi, currentfolder
  5142 00003E34 893D[EC230100]      <2> 	mov [lastfolderloc], edi
  5143 00003E3A C3                  <2> 	ret
  5144                              <2> .moveupover:
  5145 00003E3B BF[F4230100]        <2> 	mov edi, currentfolder
  5146 00003E40 C6072F              <2> 	mov byte [edi], '/'
  5147 00003E43 47                  <2> 	inc edi
  5148 00003E44 C60700              <2> 	mov byte [edi], 0
  5149 00003E47 31C0                <2> 	xor eax, eax
  5150 00003E49 A3[EC230100]        <2> 	mov [lastfolderloc], eax
  5151 00003E4E 40                  <2> 	inc eax
  5152 00003E4F A3[F0230100]        <2> 	mov [currentfolderloc], eax
  5153 00003E54 C3                  <2> 	ret
  5154                              <1> %include 'source/programs/charmap.asm'
  5155 00003E55 00                  <2> charmapnum db 0
  5156 00003E56 FF2C636861726D6170- <2> db 255,44,"charmap",0
  5157 00003E5F 00                  <2>
  5158 00003E60 66BB0700            <2> 	mov bx, 7
  5159 00003E64 66B82000            <2> 	mov ax, " "
  5160 00003E68 C605[553E0000]00    <2> 	mov byte [charmapnum], 0
  5161 00003E6F E839E5FFFF          <2> 	call prcharq
  5162 00003E74 E834E5FFFF          <2> 	call prcharq
  5163 00003E79 E82FE5FFFF          <2> 	call prcharq
  5164 00003E7E E82AE5FFFF          <2> 	call prcharq
  5165 00003E83 66B83000            <2> 	mov ax, "0"
  5166                              <2> charmapnumprnt:
  5167 00003E87 E821E5FFFF          <2> 	call prcharq
  5168 00003E8C 6640                <2> 	inc ax
  5169 00003E8E 6650                <2> 	push ax
  5170 00003E90 66B82000            <2> 	mov ax, " "
  5171 00003E94 E814E5FFFF          <2> 	call prcharq
  5172 00003E99 6658                <2> 	pop ax
  5173 00003E9B 663D3900            <2> 	cmp ax, "9"
  5174 00003E9F 76E6                <2> 	jbe charmapnumprnt
  5175 00003EA1 66B84100            <2> 	mov ax, "A"
  5176                              <2> charmapnumprnt2:
  5177 00003EA5 E803E5FFFF          <2> 	call prcharq
  5178 00003EAA 6640                <2> 	inc ax
  5179 00003EAC 6650                <2> 	push ax
  5180 00003EAE 66B82000            <2> 	mov ax, " "
  5181 00003EB2 E8F6E4FFFF          <2> 	call prcharq
  5182 00003EB7 6658                <2> 	pop ax
  5183 00003EB9 663D4700            <2> 	cmp ax, "G"
  5184 00003EBD 72E6                <2> 	jb charmapnumprnt2
  5185                              <2> 	
  5186 00003EBF BE[778B0000]        <2> 	mov esi, line
  5187 00003EC4 E843DEFFFF          <2> 	call printquiet
  5188 00003EC9 6631C0              <2> 	xor ax, ax
  5189 00003ECC 6689C1              <2> 	mov cx, ax
  5190 00003ECF E8E8F2FFFF          <2> 	call showhexsmall
  5191 00003ED4 E970000000          <2> 	jmp charmapnocopy ;the first char is 0 which is unprintable
  5192                              <2> charmapcopy:
  5193 00003ED9 6640                <2> 	inc ax
  5194 00003EDB 6650                <2> 	push ax
  5195 00003EDD 663D0800            <2> 	cmp ax, 8
  5196 00003EE1 7466                <2> 	je charmapnocopy
  5197 00003EE3 663D0900            <2> 	cmp ax, 9
  5198 00003EE7 7460                <2> 	je charmapnocopy
  5199 00003EE9 663D0A00            <2> 	cmp ax, 10
  5200 00003EED 745A                <2> 	je charmapnocopy
  5201 00003EEF 663D0D00            <2> 	cmp ax, 13
  5202 00003EF3 7454                <2> 	je charmapnocopy
  5203 00003EF5 663DFF00            <2> 	cmp ax, 255
  5204 00003EF9 744E                <2> 	je charmapnocopy
  5205 00003EFB 663D0001            <2> 	cmp ax, 256
  5206 00003EFF 7443                <2> 	je nomorecharmap
  5207 00003F01 E8A7E4FFFF          <2> 	call prcharq
  5208 00003F06 66B82000            <2> 	mov ax, " "
  5209 00003F0A E89EE4FFFF          <2> 	call prcharq
  5210 00003F0F 6658                <2> 	pop ax
  5211                              <2> charmapcopycheck:
  5212 00003F11 FE05[553E0000]      <2> 	inc byte [charmapnum]
  5213 00003F17 803D[553E0000]10    <2> 	cmp byte [charmapnum], 16
  5214 00003F1E 72B9                <2> 	jb charmapcopy
  5215 00003F20 6650                <2> 	push ax
  5216 00003F22 BE[778B0000]        <2> 	mov esi, line
  5217 00003F27 E8E0DDFFFF          <2> 	call printquiet
  5218 00003F2C 6658                <2> 	pop ax
  5219 00003F2E 3CFF                <2> 	cmp al, 255
  5220 00003F30 7412                <2> 	je nomorecharmap
  5221 00003F32 88C1                <2> 	mov cl, al
  5222 00003F34 FEC1                <2> 	inc cl
  5223 00003F36 E881F2FFFF          <2> 	call showhexsmall
  5224 00003F3B C605[553E0000]00    <2> 	mov byte [charmapnum], 0
  5225 00003F42 EB95                <2> 	jmp charmapcopy
  5226                              <2> nomorecharmap:
  5227 00003F44 E9ADEDFFFF          <2> 	jmp nwcmd
  5228                              <2> charmapnocopy:
  5229 00003F49 6650                <2> 	push ax
  5230 00003F4B 66B82000            <2> 	mov ax, " "
  5231 00003F4F E859E4FFFF          <2> 	call prcharq
  5232 00003F54 E854E4FFFF          <2> 	call prcharq
  5233 00003F59 6658                <2> 	pop ax
  5234 00003F5B EBB4                <2> 	jmp charmapcopycheck
  5235                              <1> %ifdef gui.included
  5236                              <1> 	%include 'source/programs/circle.asm'
  5237 00003F5D FF2C636972636C6500  <2> db 255,44,"circle",0
  5238                              <2> circle:
  5239 00003F66 8B35[A92F0000]      <2> 	mov esi, [currentcommandloc]
  5240 00003F6C 81C607000000        <2> 	add esi, 7
  5241 00003F72 66B91000            <2> 	mov cx, 16
  5242 00003F76 30C0                <2> 	xor al, al
  5243 00003F78 3806                <2> 	cmp [esi], al
  5244 00003F7A 7405                <2> 	je .nocmdline
  5245 00003F7C E8FBF3FFFF          <2> 	call cnvrttxt
  5246                              <2> .nocmdline:
  5247 00003F81 E8C5080000          <2> 	call linetester.stime
  5248 00003F86 E857000000          <2> 	call fcircle.nocmdline
  5249 00003F8B E8D3080000          <2> 	call linetester.etime
  5250 00003F90 53                  <2> 	push ebx
  5251 00003F91 57                  <2> 	push edi
  5252 00003F92 E889E3FFFF          <2> 	call getchar
  5253 00003F97 59                  <2> 	pop ecx
  5254 00003F98 E8FDF2FFFF          <2> 	call showdec
  5255 00003F9D BE[F1480000]        <2> 	mov esi, linetester.msgcircle
  5256 00003FA2 E865DDFFFF          <2> 	call printquiet
  5257 00003FA7 59                  <2> 	pop ecx
  5258 00003FA8 E8EDF2FFFF          <2> 	call showdec
  5259 00003FAD BE[08490000]        <2> 	mov esi, linetester.msgtime
  5260 00003FB2 E855DDFFFF          <2> 	call printquiet
  5261 00003FB7 E8952F0000          <2> 	call reloadallgraphics
  5262 00003FBC C3                  <2> 	ret
  5263                              <2> 	
  5264 00003FBD FF2C66636972636C65- <2> db 255,44,"fcircle",0	;attempts to draw many circles without refreshing screen or showing time
  5265 00003FC6 00                  <2>
  5266                              <2> fcircle:	
  5267 00003FC7 8B35[A92F0000]      <2> 	mov esi, [currentcommandloc]
  5268 00003FCD 81C608000000        <2> 	add esi, 8
  5269 00003FD3 66B91000            <2> 	mov cx, 16
  5270 00003FD7 30C0                <2> 	xor al, al
  5271 00003FD9 3806                <2> 	cmp [esi], al
  5272 00003FDB 7405                <2> 	je .nocmdline
  5273 00003FDD E89AF3FFFF          <2> 	call cnvrttxt
  5274                              <2> .nocmdline:
  5275 00003FE2 6689C8              <2> 	mov ax, cx
  5276 00003FE5 66D1E1              <2> 	shl cx, 1
  5277 00003FE8 6689CA              <2> 	mov dx, cx
  5278 00003FEB 663B15[F2570000]    <2> 	cmp dx, [resolutionx]
  5279 00003FF2 731B                <2> 	jae .done
  5280 00003FF4 663B0D[F4570000]    <2> 	cmp cx, [resolutiony]
  5281 00003FFB 7312                <2> 	jae .done
  5282 00003FFD 668B35[66020000]    <2> 	mov si, [timenanoseconds + 2]
  5283 00004004 31FF                <2> 	xor edi, edi
  5284 00004006 803D[9C8B0000]01    <2> 	cmp byte [guion], 1
  5285 0000400D 7401                <2> 	je .lp
  5286 0000400F C3                  <2> .done ret
  5287                              <2> .lp:
  5288 00004010 6629C2              <2> 	sub dx, ax
  5289 00004013 6629C1              <2> 	sub cx, ax
  5290 00004016 60                  <2> 	pusha
  5291 00004017 E8CD290000          <2> 	call fillcircle
  5292 0000401C 61                  <2> 	popa
  5293 0000401D 47                  <2> 	inc edi
  5294 0000401E 660335[64020000]    <2> 	add si, [timenanoseconds]
  5295 00004025 6601C2              <2> 	add dx, ax
  5296 00004028 6601C2              <2> 	add dx, ax
  5297 0000402B 6601C2              <2> 	add dx, ax
  5298 0000402E 6601C1              <2> 	add cx, ax
  5299 00004031 663B15[F2570000]    <2> 	cmp dx, [resolutionx]
  5300 00004038 72D6                <2> 	jb .lp
  5301 0000403A 6689C2              <2> 	mov dx, ax
  5302 0000403D 6601C2              <2> 	add dx, ax
  5303 00004040 6601C1              <2> 	add cx, ax
  5304 00004043 6601C1              <2> 	add cx, ax
  5305 00004046 663B0D[F4570000]    <2> 	cmp cx, [resolutiony]
  5306 0000404D 72C1                <2> 	jb .lp
  5307 0000404F C3                  <2> 	ret
  5308                              <1> %endif
  5309                              <1> %include 'source/programs/clear.asm'
  5310 00004050 FF2C636C65617200    <2> db 255,44,"clear",0
  5311 00004058 E877DDFFFF          <2> 		call clear
  5312 0000405D C3                  <2> 		ret 
  5313                              <1> %include 'source/programs/cpuid.asm'
  5314 0000405E FF2C637075696400    <2> db 255,44,"cpuid",0
  5315 00004066 31C0                <2> 	xor eax, eax
  5316 00004068 0FA2                <2> 	cpuid
  5317 0000406A 891D[BB400000]      <2> 	mov [cpuidbuf], ebx
  5318 00004070 8915[BF400000]      <2> 	mov [cpuidbuf + 4], edx
  5319 00004076 890D[C3400000]      <2> 	mov [cpuidbuf + 8], ecx
  5320 0000407C BE[BB400000]        <2> 	mov esi, cpuidbuf
  5321 00004081 E8A5DCFFFF          <2> 	call print
  5322 00004086 BE[778B0000]        <2> 	mov esi, line
  5323 0000408B E89BDCFFFF          <2> 	call print
  5324 00004090 B801000000          <2> 	mov eax, 1
  5325 00004095 0FA2                <2> 	cpuid
  5326 00004097 89C1                <2> 	mov ecx, eax
  5327 00004099 C605[BB310000]02    <2> 	mov byte [firsthexshown], 2
  5328 000040A0 E82BF1FFFF          <2> 	call showhex
  5329 000040A5 B808000080          <2> 	mov eax, 0x80000008
  5330 000040AA 0FA2                <2> 	cpuid
  5331 000040AC 89C1                <2> 	mov ecx, eax
  5332 000040AE C605[BB310000]02    <2> 	mov byte [firsthexshown], 2
  5333 000040B5 E816F1FFFF          <2> 	call showhex
  5334 000040BA C3                  <2> 	ret
  5335                              <2> 	
  5336 000040BB 00<rept>            <2> cpuidbuf times 13 db 0
  5337                              <2> cpuidvendorend:
  5338                              <1> %ifdef network.included
  5339                              <1> 	%include 'source/programs/dhcp.asm'
  5340 000040C8 FF2C6468637000      <2> db 255,44,"dhcp",0
  5341                              <2> dhcp:
  5342 000040CF BE[8F410000]        <2> 	mov esi, .dhcp.mac
  5343 000040D4 BB[6F420000]        <2> 	mov ebx, .dhcp.option.mac
  5344 000040D9 BF[4F410000]        <2> 	mov edi, .mac
  5345 000040DE 31C9                <2> 	xor ecx, ecx
  5346 000040E0 66890D[61410000]    <2> 	mov [.ip.checksum], cx
  5347 000040E7 66890D[71410000]    <2> 	mov [.udp.checksum], cx
  5348 000040EE 8B0D[308B0000]      <2> 	mov ecx, [sysmac]
  5349 000040F4 890B                <2> 	mov [ebx], ecx
  5350 000040F6 890F                <2> 	mov [edi], ecx
  5351 000040F8 890E                <2> 	mov [esi], ecx
  5352 000040FA 668B0D[348B0000]    <2> 	mov cx, [sysmac + 4]
  5353 00004101 66894B04            <2> 	mov [ebx + 4], cx
  5354 00004105 66894E04            <2> 	mov [esi + 4], cx
  5355 00004109 66894F04            <2> 	mov [edi + 4], cx
  5356 0000410D BF[57410000]        <2> 	mov edi, .ip.header
  5357 00004112 BE[6B410000]        <2> 	mov esi, .ip.headerend
  5358 00004117 E8FF480000          <2> 	call getchecksum
  5359 0000411C 66890D[61410000]    <2> 	mov [.ip.checksum], cx
  5360 00004123 BF[6B410000]        <2> 	mov edi, .udp.header
  5361 00004128 BE[86420000]        <2> 	mov esi, .udp.end
  5362 0000412D E8E9480000          <2> 	call getchecksum
  5363 00004132 66890D[71410000]    <2> 	mov [.udp.checksum], cx
  5364 00004139 BF[49410000]        <2> 	mov edi, .frame
  5365 0000413E BE[86420000]        <2> 	mov esi, .udp.end
  5366 00004143 E8C9480000          <2> 	call sendpacket
  5367 00004148 C3                  <2> 	ret
  5368                              <2> .frame:
  5369 00004149 FFFFFFFFFFFF        <2> 	.destmac db 0xFF,0xFF,0xFF,0xFF,0xFF,0xFF
  5370 0000414F 000000000000        <2> 	.mac db 0,0,0,0,0,0
  5371 00004155 0800                <2> 	db 8,0
  5372                              <2> .ip.header:
  5373 00004157 45                  <2> 	db (0x40 | (.ip.headerend - .ip.header)/4)
  5374 00004158 00                  <2> 	db 0
  5375 00004159 012F                <2> 	db (.udp.end - .ip.header)/256, (.udp.end - .ip.header)
  5376 0000415B 0000                <2> 	dw 0
  5377 0000415D 0000                <2> 	dw 0
  5378 0000415F 80                  <2> 	db 0x80
  5379 00004160 11                  <2> 	db 17
  5380 00004161 0000                <2> .ip.checksum dw 0
  5381 00004163 00000000            <2> 	db 0,0,0,0
  5382 00004167 FFFFFFFF            <2> 	db 255,255,255,255	
  5383                              <2> .ip.headerend:
  5384                              <2> .udp.header:
  5385 0000416B 0044                <2> 	db 0,68	;source port
  5386 0000416D 0043                <2> 	db 0,67 ;destination port
  5387 0000416F 011B                <2> 	db (.udp.end - .udp.header)/256, (.udp.end - .udp.header)
  5388 00004171 0000                <2> .udp.checksum dw 0
  5389                              <2> .udp.headerend:
  5390                              <2> .dhcp.data:
  5391 00004173 01                  <2> 	db 1	;message type
  5392 00004174 01                  <2> 	db 1	;hardware type
  5393 00004175 06                  <2> 	db 6	;hardware address length
  5394 00004176 00                  <2> 	db 0	;hops
  5395 00004177 EC2B2369            <2> 	db 0xEC,0x2B,0x23,0x69	;transaction ID
  5396 0000417B 0000                <2> 	db 0,0	;seconds elapsed
  5397 0000417D 0000                <2> 	db 0,0	;flags
  5398 0000417F 00000000            <2> 	db 0,0,0,0	;client ip address
  5399 00004183 00000000            <2> 	db 0,0,0,0	;your ip address
  5400 00004187 00000000            <2> 	db 0,0,0,0	;server ip address
  5401 0000418B 00000000            <2> 	db 0,0,0,0	;relay agent ip address
  5402 0000418F 000000000000        <2> .dhcp.mac db 0,0,0,0,0,0	;client hardware address
  5403 00004195 00<rept>            <2> 	times 10 db 0	;padding
  5404 0000419F 00<rept>            <2> 	times 64 db 0	;server host name
  5405 000041DF 00<rept>            <2> 	times 128 db 0	;boot file name
  5406 0000425F 63825363            <2> 	db 0x63,0x82,0x53,0x63	;magic cookie
  5407                              <2> .dhcp.option.type:
  5408 00004263 350103              <2> 	db 53,1,3	;DHCP Request
  5409 00004266 3204C0A80002        <2> 	db 50,4,192,168,0,2	;requested IP
  5410 0000426C 3D07                <2> 	db 61,7 ;client id(mac)
  5411 0000426E 01                  <2> 	db 1	;Type=Ethernet
  5412 0000426F 000000000000        <2> .dhcp.option.mac:	db 0,0,0,0,0,0
  5413 00004275 0C08                <2> 	db 12,8 ;host name
  5414 00004277 536F6C6C65724F53    <2> .dhcp.option.name 	db "SollerOS"
  5415 0000427F 370401030F06        <2> 	db 55,4,1,3,15,6	;request subnet, router, domain name, name server
  5416 00004285 FF                  <2> 	db 0xFF	;end DHCP options
  5417                              <2> .dhcp.end:
  5418                              <2> .udp.end:
  5419                              <2> 	
  5420                              <1> %endif
  5421                              <1> %ifdef disk.none
  5422                              <1> %else
  5423                              <1> 	%include 'source/programs/dos.asm'
  5424 00004286 FF2C646F7300        <2> db 255,44,"dos",0
  5425                              <2> dosrunner:
  5426 0000428C 8925[E8230100]      <2> 	mov [previousstack], esp
  5427 00004292 8B3D[A92F0000]      <2> 	mov edi, [currentcommandloc]
  5428 00004298 81C704000000        <2> 	add edi, 4
  5429 0000429E BE00014000          <2> 	mov esi,  0x100 + dosprogloc	;this should be the beginning of memory
  5430 000042A3 E899230000          <2> 	call loadfile
  5431 000042A8 8B3D[A92F0000]      <2> 	mov edi, [currentcommandloc]
  5432 000042AE 81C704000000        <2> 	add edi, 4
  5433 000042B4 81FA94010000        <2> 	cmp edx, 404
  5434 000042BA 0F845E000000        <2> 	je near .noprogfound
  5435 000042C0 BB81004000          <2> 	mov ebx, 0x81 + dosprogloc
  5436 000042C5 31C9                <2> 	xor ecx, ecx
  5437                              <2> .findparams:
  5438 000042C7 47                  <2> 	inc edi
  5439 000042C8 8A07                <2> 	mov al, [edi]
  5440 000042CA 3C20                <2> 	cmp al, " "
  5441 000042CC 75F9                <2> 	jne .findparams
  5442                              <2> .copyparams:
  5443 000042CE 8A07                <2> 	mov al, [edi]
  5444 000042D0 8803                <2> 	mov [ebx], al
  5445 000042D2 43                  <2> 	inc ebx
  5446 000042D3 47                  <2> 	inc edi
  5447 000042D4 41                  <2> 	inc ecx
  5448 000042D5 81FB00014000        <2> 	cmp ebx, 0x100 + dosprogloc
  5449 000042DB 7304                <2> 	jae .nomoreparams
  5450 000042DD 3C00                <2> 	cmp al, 0
  5451 000042DF 75ED                <2> 	jne .copyparams
  5452                              <2> .nomoreparams:
  5453 000042E1 880D80004000        <2> 	mov [0x80 + dosprogloc], cl
  5454 000042E7 66B85000            <2> 	mov ax, DOS_DATA_SEL
  5455 000042EB 8ED8                <2> 	mov ds, ax
  5456 000042ED 8EC0                <2> 	mov es, ax
  5457 000042EF 8EE0                <2> 	mov fs, ax
  5458 000042F1 8EE8                <2> 	mov gs, ax
  5459 000042F3 31C0                <2> 	xor eax, eax
  5460 000042F5 31DB                <2> 	xor ebx, ebx
  5461 000042F7 31C9                <2> 	xor ecx, ecx
  5462 000042F9 31D2                <2> 	xor edx, edx
  5463 000042FB 31FF                <2> 	xor edi, edi
  5464 000042FD 31F6                <2> 	xor esi, esi
  5465 000042FF 9A000100004800      <2> 	call DOS_CODE_SEL:0x100
  5466 00004306 66BB3000            <2> 	mov bx, NEW_DATA_SEL
  5467 0000430A 6689DA              <2> 	mov dx, bx
  5468 0000430D 8EC3                <2> 	mov es, bx
  5469 0000430F 8EE3                <2> 	mov fs, bx
  5470 00004311 66BB2000            <2> 	mov bx, SYS_DATA_SEL
  5471 00004315 8EEB                <2> 	mov gs, bx
  5472 00004317 8B25[E8230100]      <2> 	mov esp, [previousstack]
  5473 0000431D C3                  <2> 	ret
  5474                              <2> .noprogfound:
  5475 0000431E BE[3E8B0000]        <2> 	mov esi, notfound1
  5476 00004323 E803DAFFFF          <2> 	call print
  5477 00004328 8B35[A92F0000]      <2> 	mov esi, [currentcommandloc]
  5478 0000432E 81C604000000        <2> 	add esi, 4
  5479 00004334 E8F2D9FFFF          <2> 	call print
  5480 00004339 BE[468B0000]        <2> 	mov esi, notfound2
  5481 0000433E E8E8D9FFFF          <2> 	call print
  5482 00004343 C3                  <2> 	ret
  5483                              <2> 	
  5484                              <1> %endif
  5485                              <1> %include 'source/programs/dump.asm'
  5486 00004344 FF2C64756D7000      <2> db 255,44,"dump",0
  5487 0000434B 8B35[A92F0000]      <2> 	mov esi, [currentcommandloc]
  5488 00004351 81C605000000        <2> 	add esi, 5
  5489 00004357 31C9                <2> 	xor ecx, ecx
  5490 00004359 66B83078            <2> 	mov ax, "0x"
  5491 0000435D 663906              <2> 	cmp [esi], ax
  5492 00004360 740A                <2> 	je dumphexin
  5493 00004362 E815F0FFFF          <2> 	call cnvrttxt
  5494 00004367 E910000000          <2> 	jmp dumphexnow
  5495                              <2> dumphexin:
  5496 0000436C 81C602000000        <2> 	add esi, 2
  5497 00004372 E8BCEFFFFF          <2> 	call cnvrthextxt
  5498 00004377 E900000000          <2> 	jmp dumphexnow
  5499                              <2> dumphexnow:
  5500 0000437C 89CF                <2> 	mov edi, ecx
  5501 0000437E 89FE                <2> 	mov esi, edi
  5502 00004380 81C680030000        <2> 	add esi, 896
  5503                              <2> dumphexloop:
  5504 00004386 8B0F                <2> 	mov ecx, [edi]
  5505 00004388 C605[BB310000]05    <2> 	mov byte [firsthexshown],5
  5506 0000438F E83CEEFFFF          <2> 	call showhex
  5507 00004394 81C704000000        <2> 	add edi, 4
  5508 0000439A 39F7                <2> 	cmp edi, esi
  5509 0000439C 72E8                <2> 	jb dumphexloop
  5510 0000439E E80FE5FFFF          <2> 	call termcopy
  5511 000043A3 C3                  <2> 	ret 
  5512                              <1> %include 'source/programs/echo.asm'
  5513                              <2> 
  5514 000043A4 FF2C6563686F00      <2> db 255,44,"echo",0
  5515                              <2> 	echoprog:
  5516 000043AB 8B35[A92F0000]      <2> 		mov esi, [currentcommandloc]
  5517 000043B1 81C605000000        <2> 		add esi, 5
  5518 000043B7 8A06                <2> 		mov al, [esi]
  5519 000043B9 E86DD9FFFF          <2> 		call print
  5520 000043BE BE[778B0000]        <2> 		mov esi, line
  5521 000043C3 E863D9FFFF          <2> 		call print
  5522 000043C8 C3                  <2> 		ret
  5523 000043C9 BB[68260100]        <2> 	echovr:	mov ebx, variables
  5524 000043CE BF06000000          <2> 		mov edi, 6
  5525 000043D3 E83C000000          <2> 		call nxtvrech
  5526 000043D8 E954000000          <2> 		jmp prntvr2
  5527 000043DD B13D                <2> 	echvar:	mov cl, '='
  5528 000043DF 43                  <2> 		inc ebx
  5529 000043E0 8A03                <2> 		mov al, [ebx]
  5530 000043E2 3C00                <2> 		cmp al, 0
  5531 000043E4 742E                <2> 		je nxtvrech
  5532 000043E6 3C3D                <2> 		cmp al, '='
  5533 000043E8 7422                <2> 		je nxtvrechb1
  5534 000043EA 8B35[A92F0000]      <2> 		mov esi, [currentcommandloc]
  5535 000043F0 01FE                <2> 		add esi, edi
  5536 000043F2 E8F1EBFFFF          <2> 		call cndtest
  5537 000043F7 3C02                <2> 		cmp al, 2
  5538 000043F9 7432                <2> 		je prntvr
  5539 000043FB 3C01                <2> 		cmp al, 1
  5540 000043FD 742E                <2> 		je prntvr
  5541 000043FF 8B35[A92F0000]      <2> 		mov esi, [currentcommandloc]
  5542 00004405 01FE                <2> 		add esi, edi
  5543 00004407 E908000000          <2> 		jmp nxtvrech
  5544                              <2> 	nxtvrechb1:
  5545 0000440C 81EB02000000        <2> 		sub ebx, 2
  5546 00004412 EBC9                <2> 		jmp echvar
  5547 00004414 8A03                <2> 	nxtvrech: mov al, [ebx]
  5548 00004416 3C05                <2> 		cmp al, 5
  5549 00004418 740A                <2> 		je nxtvrec2
  5550 0000441A 43                  <2> 		inc ebx
  5551 0000441B 81FB[68360100]      <2> 		cmp ebx, varend
  5552 00004421 72F1                <2> 		jb nxtvrech
  5553 00004423 C3                  <2> 		ret
  5554 00004424 43                  <2> 	nxtvrec2: inc ebx
  5555 00004425 8A03                <2> 		mov al, [ebx]
  5556 00004427 3C04                <2> 		cmp al, 4
  5557 00004429 74B2                <2> 		je echvar
  5558 0000442B EBE7                <2> 		jmp nxtvrech
  5559 0000442D 43                  <2> 	prntvr: inc ebx
  5560 0000442E 89DE                <2> 		mov esi, ebx
  5561 00004430 C3                  <2> 		ret
  5562 00004431 E8F5D8FFFF          <2> 	prntvr2: call print
  5563 00004436 BE[778B0000]        <2> 		mov esi, line
  5564 0000443B E8EBD8FFFF          <2> 		call print
  5565 00004440 C3                  <2> 		ret 
  5566                              <1> %include 'source/programs/else.asm'
  5567 00004441 FF2C656C736500      <2> 	db 255,44,"else",0
  5568 00004448 31C0                <2> elsecmd:	xor eax, eax
  5569 0000444A 3805[62260100]      <2> 	cmp [BATCHISON], al
  5570 00004450 0F8451F6FFFF        <2> 	je near notbatch
  5571 00004456 A0[F9250100]        <2> 	mov al, [IFON]
  5572 0000445B BE[FA250100]        <2> 	mov esi, IFTRUE
  5573 00004460 01C6                <2> 	add esi, eax
  5574 00004462 8A06                <2> 	mov al, [esi]
  5575 00004464 3401                <2> 	xor al, 1
  5576 00004466 8806                <2> 	mov [esi], al
  5577 00004468 C3                  <2> 	ret 
  5578                              <1> %include 'source/programs/exit.asm'
  5579 00004469 FF2C6578697400      <2> db 255,44,"exit",0
  5580 00004470 803D[F8250100]01    <2> 	cmp byte [ranboot], 1
  5581 00004477 0F840DE8FFFF        <2> 	je near returnfromexp
  5582 0000447D E9F3E6FFFF          <2> 	jmp nobootfile
  5583                              <1> %include 'source/programs/fi.asm'
  5584 00004482 FF2C666900          <2> 	db 255,44,"fi",0
  5585 00004487 30C0                <2> 	xor al, al
  5586 00004489 3805[62260100]      <2> 	cmp [BATCHISON], al
  5587 0000448F 0F8412F6FFFF        <2> 	je near notbatch
  5588 00004495 B001                <2> fi:	mov al, 1
  5589 00004497 2805[F9250100]      <2> 	sub [IFON],al
  5590 0000449D C3                  <2> 	ret 
  5591                              <1> %ifdef gui.included
  5592                              <1> 	%include 'source/programs/gui.asm'
  5593 0000449E FF2C67756900        <2> db 255,44,"gui",0
  5594                              <2> guiswitcher:
  5595 000044A4 8B35[A92F0000]      <2> 	mov esi, [currentcommandloc]
  5596 000044AA 81C604000000        <2> 	add esi, 4
  5597 000044B0 31C9                <2> 	xor ecx, ecx
  5598 000044B2 803E00              <2> 	cmp byte [esi], 0
  5599 000044B5 740A                <2> 	je .nomodepref
  5600 000044B7 E877EEFFFF          <2> 	call cnvrthextxt ;switches arg on cline to vesa mode in ecx
  5601 000044BC E907000000          <2> 	jmp .modepref
  5602                              <2> .nomodepref:
  5603 000044C1 51                  <2> 	push ecx
  5604 000044C2 E80DD9FFFF          <2> 	call clear
  5605 000044C7 59                  <2> 	pop ecx
  5606                              <2> .modepref:
  5607 000044C8 66BB[0254]          <2> 	mov bx, guiswitch
  5608 000044CC 66891D[D70C0000]    <2> 	mov [realmodeptr], bx
  5609 000044D3 BB[E3440000]        <2> 	mov ebx, guiswitchret
  5610 000044D8 891D[D30C0000]      <2> 	mov [realmodereturn], ebx
  5611 000044DE E9D9C6FFFF          <2> 	jmp realmode
  5612                              <2> guiswitchret:
  5613 000044E3 65803D[9C8B0000]01  <2> 	cmp byte [gs:guion], 1
  5614 000044EB 7401                <2> 	je .cont
  5615 000044ED C3                  <2> 	ret
  5616                              <2> .cont:
  5617 000044EE BF[E0550000]        <2> 	mov edi, VBEMODEBLOCK
  5618                              <2> .loop:
  5619 000044F3 658B07              <2> 	mov eax, [gs:edi]
  5620 000044F6 8907                <2> 	mov [edi], eax
  5621 000044F8 47                  <2> 	inc edi
  5622 000044F9 81FF[E4580000]      <2> 	cmp edi, VBEEND
  5623 000044FF 72F2                <2> 	jb .loop
  5624 00004501 A1[08580000]        <2> 	mov eax, [physbaseptr]
  5625 00004506 8B1D[41020000]      <2> 	mov ebx, [basecache]
  5626 0000450C C1E304              <2> 	shl ebx, 4
  5627 0000450F 29D8                <2> 	sub eax, ebx
  5628 00004511 A3[08580000]        <2> 	mov [physbaseptr], eax
  5629 00004516 C605[AB230000]00    <2> 	mov byte [termguion], 0
  5630 0000451D BE[7D3E0100]        <2> 	mov esi, graphicstable
  5631 00004522 30C0                <2> 	xor al, al
  5632                              <2> .clear:
  5633 00004524 8806                <2> 	mov [esi], al
  5634 00004526 46                  <2> 	inc esi
  5635 00004527 81FE[7D400100]      <2> 	cmp esi, graphicstableend
  5636 0000452D 72F5                <2> 	jb .clear
  5637 0000452F E8B62B0000          <2> 	call guisetup
  5638                              <2> 	;The next few lines center a window that is 3/4ths of the full screen
  5639 00004534 668B15[F2570000]    <2> 	mov dx, [resolutionx]
  5640 0000453B 668B0D[F4570000]    <2> 	mov cx, [resolutiony]
  5641 00004542 6689D3              <2> 	mov bx, dx
  5642 00004545 6689C8              <2> 	mov ax, cx
  5643 00004548 66D1EB              <2> 	shr bx, 1
  5644 0000454B 66D1E8              <2> 	shr ax, 1
  5645 0000454E 6689DA              <2> 	mov dx, bx
  5646 00004551 66D1EA              <2> 	shr dx, 1
  5647 00004554 6689C1              <2> 	mov cx, ax
  5648 00004557 66D1E9              <2> 	shr cx, 1
  5649 0000455A 6601D3              <2> 	add bx, dx
  5650 0000455D 6601C8              <2> 	add ax, cx
  5651 00004560 66D1E9              <2> 	shr cx, 1
  5652 00004563 66C1EB03            <2> 	shr bx, 3
  5653 00004567 66C1E303            <2> 	shl bx, 3
  5654 0000456B 66C1E804            <2> 	shr ax, 4
  5655 0000456F 66C1E004            <2> 	shl ax, 4
  5656 00004573 66891D[F7720000]    <2> 	mov [termwindow], bx
  5657 0000457A 66A3[F9720000]      <2> 	mov [termwindow + 2], ax	;the previous lines of code make a large terminal window that is 4 characters smaller than the screen
  5658 00004580 BE[F7720000]        <2> 	mov esi, termwindow
  5659 00004585 31DB                <2> 	xor ebx, ebx
  5660 00004587 6631C0              <2> 	xor ax, ax
  5661 0000458A E895320000          <2> 	call showwindow
  5662 0000458F E851130000          <2> 	call cursorgui
  5663 00004594 E83BD8FFFF          <2> 	call clear
  5664 00004599 C3                  <2> 	ret
  5665                              <2> 	
  5666                              <1> %endif
  5667                              <1> %include 'source/programs/help.asm'
  5668 0000459A FF2C68656C7000      <2> db 255,44,"help",0
  5669                              <2> lscmd:	
  5670 000045A1 B00D                <2> 		mov al, 13
  5671 000045A3 E805DEFFFF          <2> 		call prcharq
  5672 000045A8 BE[FF330000]        <2> 		mov esi, progstart
  5673 000045AD BB[02540000]        <2> 		mov ebx, progend
  5674 000045B2 BE[E81F0100]        <2> dir:	mov esi, fileindex
  5675 000045B7 8A06                <2> 	dirnxt:	mov al, [esi]
  5676 000045B9 30E4                <2> 		xor ah, ah
  5677 000045BB 3CFF                <2> 		cmp al, 255
  5678 000045BD 7415                <2> 		je dirfnd
  5679 000045BF 46                  <2> 		inc esi
  5680 000045C0 81FE[E8230100]      <2> 		cmp esi,  fileindexend
  5681 000045C6 7339                <2> 		jae dirdn
  5682 000045C8 EBED                <2> 		jmp dirnxt
  5683                              <2> 	dirfnd3:
  5684 000045CA 46                  <2> 		inc esi
  5685 000045CB 81FE[E8230100]      <2> 		cmp esi, fileindexend
  5686 000045D1 76E4                <2> 		jbe dirnxt
  5687 000045D3 4E                  <2> 		dec esi
  5688 000045D4 46                  <2> 	dirfnd:	inc esi
  5689 000045D5 8A06                <2> 		mov al, [esi]
  5690 000045D7 30E4                <2> 		xor ah, ah
  5691 000045D9 3C2C                <2> 		cmp al, 44
  5692 000045DB 740B                <2> 		je dirfnd2
  5693 000045DD 46                  <2> 		inc esi
  5694 000045DE 81FE[E8230100]      <2> 		cmp esi,  fileindexend
  5695 000045E4 731B                <2> 		jae dirdn
  5696 000045E6 EBCF                <2> 		jmp dirnxt
  5697 000045E8 46                  <2> 	dirfnd2: inc esi
  5698 000045E9 E81ED7FFFF          <2> 		call printquiet
  5699 000045EE 56                  <2> 		push esi
  5700 000045EF B009                <2> 		mov al, 9
  5701 000045F1 E8B7DDFFFF          <2> 		call prcharq
  5702 000045F6 5E                  <2> 		pop esi
  5703 000045F7 81FE[E8230100]      <2> 		cmp esi,  fileindexend
  5704 000045FD 7302                <2> 		jae dirdn
  5705 000045FF EBB6                <2> 		jmp dirnxt
  5706 00004601 BE[778B0000]        <2> 	dirdn:	mov esi, line
  5707 00004606 E820D7FFFF          <2> 			call print
  5708 0000460B C3                  <2> 			ret
  5709 0000460C 00                  <2> currentdir db 0
  5710                              <1> %include 'source/programs/if.asm'
  5711 0000460D FF2C696600          <2> 	db 255,44,"if",0
  5712 00004612 30C0                <2> ifcmd:	xor al, al
  5713 00004614 3805[62260100]      <2> 	cmp [BATCHISON], al
  5714 0000461A 0F8487F4FFFF        <2> 	je near notbatch
  5715 00004620 8B1D[A92F0000]      <2> 	mov ebx, [currentcommandloc]
  5716 00004626 81C303000000        <2> 	add ebx, 3
  5717 0000462C 89DE                <2> 	mov esi, ebx
  5718 0000462E 8A06                <2> chkeqsn: mov al, [esi]
  5719 00004630 3C00                <2> 	cmp al, 0
  5720 00004632 0F846FF4FFFF        <2> 	je near notbatch
  5721 00004638 3C3D                <2> 	cmp al, '='
  5722 0000463A 0F8403000000        <2> 	je near chkeqdn
  5723 00004640 46                  <2> 	inc esi
  5724 00004641 EBEB                <2> 	jmp chkeqsn
  5725 00004643 B000                <2> chkeqdn: mov al, 0 
  5726 00004645 8806                <2> 	mov [esi], al
  5727 00004647 46                  <2> 	inc esi
  5728 00004648 E860E9FFFF          <2> 	call tester
  5729 0000464D 3C01                <2> 	cmp al, 1
  5730 0000464F 0F8405000000        <2> 	je near trueif
  5731 00004655 E91C000000          <2> 	jmp falseif
  5732 0000465A 31C0                <2> trueif:	xor eax, eax
  5733 0000465C A0[F9250100]        <2> 	mov al, [IFON]
  5734 00004661 FEC0                <2> 	inc al
  5735 00004663 A2[F9250100]        <2> 	mov [IFON], al
  5736 00004668 30E4                <2> 	xor ah, ah
  5737 0000466A BE[FA250100]        <2> 	mov esi, IFTRUE
  5738 0000466F 01C6                <2> 	add esi, eax
  5739 00004671 B401                <2> 	mov ah, 1
  5740 00004673 8826                <2> 	mov [esi], ah
  5741 00004675 C3                  <2> 	ret 
  5742 00004676 31C0                <2> falseif: xor eax, eax
  5743 00004678 A0[F9250100]        <2> 	mov al, [IFON]
  5744 0000467D FEC0                <2> 	inc al
  5745 0000467F A2[F9250100]        <2> 	mov [IFON], al
  5746 00004684 30E4                <2> 	xor ah, ah
  5747 00004686 BE[FA250100]        <2> 	mov esi, IFTRUE
  5748 0000468B 01C6                <2> 	add esi, eax
  5749 0000468D 30E4                <2> 	xor ah, ah
  5750 0000468F 8826                <2> 	mov [esi], ah
  5751 00004691 C3                  <2> 	ret 
  5752                              <1> %ifdef network.included
  5753                              <1> 	%include 'source/programs/ipconfig.asm'
  5754 00004692 FF2C6970636F6E6669- <2> db 255,44,"ipconfig",0
  5755 0000469B 6700                <2>
  5756                              <2> ifconfig:
  5757 0000469D 8B35[A92F0000]      <2> 	mov esi, [currentcommandloc]
  5758 000046A3 81C609000000        <2> 	add esi, 9
  5759 000046A9 803E00              <2> 	cmp byte [esi], 0
  5760 000046AC 740B                <2> 	je .noip
  5761 000046AE E890430000          <2> 	call strtoip
  5762 000046B3 890D[2C8B0000]      <2> 	mov [sysip], ecx
  5763                              <2> .noip:
  5764                              <2> %ifdef ne2000.included
  5765                              <2> 	cmp byte [ne2000.nicconfig], 1
  5766                              <2> 	jne .none2000
  5767                              <2> 	mov esi, ne2000.name
  5768                              <2> 	call print
  5769                              <2> 	mov ecx, ne2000.mac
  5770                              <2> 	call showmac
  5771                              <2> 	mov esi, line
  5772                              <2> 	call print
  5773                              <2> .none2000:
  5774                              <2> %endif
  5775                              <2> %ifdef rtl8139.included
  5776                              <2> 	cmp byte [rtl8139.nicconfig], 1
  5777                              <2> 	jne .nortl8139
  5778                              <2> 	mov esi, rtl8139.name
  5779                              <2> 	call print
  5780                              <2> 	mov ecx, rtl8139.mac
  5781                              <2> 	call showmac
  5782                              <2> 	mov esi, line
  5783                              <2> 	call print
  5784                              <2> .nortl8139:
  5785                              <2> %endif
  5786                              <2> %ifdef rtl8169.included
  5787 000046B9 803D[7A880000]01    <2> 	cmp byte [rtl8169.nicconfig], 1
  5788 000046C0 751E                <2> 	jne .nortl8169
  5789 000046C2 BE[81880000]        <2> 	mov esi, rtl8169.name
  5790 000046C7 E85FD6FFFF          <2> 	call print
  5791 000046CC B9[7B880000]        <2> 	mov ecx, rtl8169.mac
  5792 000046D1 E8EF430000          <2> 	call showmac
  5793 000046D6 BE[778B0000]        <2> 	mov esi, line
  5794 000046DB E84BD6FFFF          <2> 	call print
  5795                              <2> .nortl8169:
  5796                              <2> %endif
  5797                              <2> %ifdef i8254x.included
  5798                              <2> 	cmp byte [i8254x.nicconfig], 1
  5799                              <2> 	jne .noi8254x
  5800                              <2> 	mov esi, i8254x.name
  5801                              <2> 	call print
  5802                              <2> 	mov ecx, i8254x.mac
  5803                              <2> 	call showmac
  5804                              <2> 	mov esi, line
  5805                              <2> 	call print
  5806                              <2> .noi8254x:
  5807                              <2> %endif
  5808 000046E0 8B0D[2C8B0000]      <2> 	mov ecx, [sysip]
  5809 000046E6 E89E430000          <2> 	call showip
  5810 000046EB BE[778B0000]        <2> 	mov esi, line
  5811 000046F0 E836D6FFFF          <2> 	call print
  5812 000046F5 C3                  <2> 	ret
  5813                              <2> 	
  5814                              <1> %endif
  5815                              <1> %include 'source/programs/keycode.asm'
  5816 000046F6 FF2C6B6579636F6465- <2> db 255,44,"keycode",0
  5817 000046FF 00                  <2>
  5818                              <2> keycode:
  5819 00004700 66C705[84230000]00- <2> 	mov word [trans], 0
  5820 00004708 00                  <2>
  5821 00004709 C605[E0670000]00    <2> 	mov byte [threadson], 0
  5822                              <2> %ifdef io.serial
  5823                              <2> .noserial:
  5824                              <2> 	hlt
  5825                              <2> 	mov dx, [serial.address]
  5826                              <2> 	in al, dx
  5827                              <2> 	cmp al, 0
  5828                              <2> 	je .noserial
  5829                              <2> 	mov cl, al
  5830                              <2> 	call showhexsmall
  5831                              <2> 	cmp al, 0x1B
  5832                              <2> 	jne .noserial
  5833                              <2> 	in al, dx
  5834                              <2> 	mov cl, al
  5835                              <2> 	call showhexsmall
  5836                              <2> 	cmp cl, 0x5B
  5837                              <2> 	je .noserial
  5838                              <2> 	ret
  5839                              <2> %else
  5840 00004710 E8A9150000          <2> 	call getkey
  5841 00004715 31C0                <2> 	xor eax, eax
  5842 00004717 31C9                <2> 	xor ecx, ecx
  5843 00004719 8A0D[9C5C0000]      <2> 	mov cl, [specialkey]
  5844 0000471F 80F900              <2> 	cmp cl, 0
  5845 00004722 0F8405000000        <2> 	je near .nospecialkeycode
  5846 00004728 E88FEAFFFF          <2> 	call showhexsmall
  5847                              <2> .nospecialkeycode:
  5848 0000472D 668B0D[82230000]    <2> 	mov cx, [lastkey + 2]
  5849 00004734 E883EAFFFF          <2> 	call showhexsmall
  5850 00004739 80F901              <2> 	cmp cl, 1
  5851 0000473C 75C2                <2> 	jne keycode
  5852 0000473E C3                  <2> 	ret
  5853                              <2> %endif
  5854                              <1> %ifdef gui.included
  5855                              <1> 	%include 'source/programs/line.asm'
  5856 0000473F FF2C6C696E6500      <2> db 255,44,"line",0
  5857                              <2> linetester:
  5858 00004746 803D[9C8B0000]00    <2> 	cmp byte [guion], 0
  5859 0000474D 0F841B000000        <2> 	je near .done
  5860 00004753 668B35[66020000]    <2> 	mov si, [timenanoseconds + 2];essentially load a random value
  5861 0000475A BB38000000          <2> 	mov ebx, 28*2;the line test draws ~28/6 times more lines in a 4:3 display mode than circles
  5862 0000475F E868000000          <2> 	call .circletest
  5863 00004764 BB0C000000          <2> 	mov ebx, 6*2 ;this makes them draw the same amount of lines as circles
  5864 00004769 E801000000          <2> 	call .linetest
  5865                              <2> .done:
  5866 0000476E C3                  <2> 	ret
  5867                              <2> 
  5868                              <2> .linetest:
  5869 0000476F 53                  <2> 	push ebx
  5870 00004770 E8D6000000          <2> 	call .stime
  5871 00004775 5B                  <2> 	pop ebx
  5872 00004776 31FF                <2> 	xor edi, edi
  5873                              <2> .ltlp:
  5874 00004778 53                  <2> 	push ebx
  5875 00004779 E81C010000          <2> 	call .st
  5876 0000477E 66F7D6              <2> 	not si
  5877 00004781 E814010000          <2> 	call .st
  5878 00004786 5B                  <2> 	pop ebx
  5879 00004787 66F7D6              <2> 	not si
  5880 0000478A 660335[64020000]    <2> 	add si, [timenanoseconds]
  5881 00004791 4B                  <2> 	dec ebx
  5882 00004792 81FB00000000        <2> 	cmp ebx, 0
  5883 00004798 77DE                <2> 	ja .ltlp
  5884 0000479A E8C4000000          <2> 	call .etime
  5885 0000479F 53                  <2> 	push ebx	
  5886 000047A0 57                  <2> 	push edi
  5887 000047A1 E818270000          <2> 	call guiclear
  5888 000047A6 E8A6270000          <2> 	call reloadallgraphics
  5889 000047AB 59                  <2> 	pop ecx
  5890 000047AC E8E9EAFFFF          <2> 	call showdec
  5891 000047B1 BE[DC480000]        <2> 	mov esi, .msg
  5892 000047B6 E870D5FFFF          <2> 	call print
  5893 000047BB 59                  <2> 	pop ecx
  5894 000047BC E8D9EAFFFF          <2> 	call showdec
  5895 000047C1 BE[08490000]        <2> 	mov esi, .msgtime
  5896 000047C6 E860D5FFFF          <2> 	call print
  5897 000047CB C3                  <2> 	ret
  5898                              <2> 	
  5899                              <2> .circletest:
  5900 000047CC 53                  <2> 	push ebx
  5901 000047CD E879000000          <2> 	call .stime
  5902 000047D2 5B                  <2> 	pop ebx
  5903 000047D3 31FF                <2> 	xor edi, edi
  5904                              <2> .ctlp:
  5905 000047D5 53                  <2> 	push ebx
  5906 000047D6 668B0D[F4570000]    <2> 	mov cx, [resolutiony]
  5907 000047DD 66D1E9              <2> 	shr cx, 1
  5908 000047E0 668B15[F2570000]    <2> 	mov dx, [resolutionx]
  5909 000047E7 66D1EA              <2> 	shr dx, 1
  5910 000047EA 6689C8              <2> 	mov ax, cx
  5911                              <2> .circle:
  5912 000047ED 60                  <2> 	pusha
  5913 000047EE E8E4200000          <2> 	call drawcircle
  5914 000047F3 61                  <2> 	popa
  5915 000047F4 6648                <2> 	dec ax
  5916 000047F6 47                  <2> 	inc edi
  5917 000047F7 663D0100            <2> 	cmp ax, 1
  5918 000047FB 77F0                <2> 	ja .circle
  5919 000047FD 66F7D6              <2> 	not si
  5920                              <2> .circle2:
  5921 00004800 60                  <2> 	pusha
  5922 00004801 E8D1200000          <2> 	call drawcircle
  5923 00004806 61                  <2> 	popa
  5924 00004807 47                  <2> 	inc edi
  5925 00004808 6640                <2> 	inc ax
  5926 0000480A 6639C8              <2> 	cmp ax, cx
  5927 0000480D 76F1                <2> 	jbe .circle2
  5928 0000480F 5B                  <2> 	pop ebx
  5929 00004810 66F7D6              <2> 	not si
  5930 00004813 660335[64020000]    <2> 	add si, [timenanoseconds]
  5931 0000481A 4B                  <2> 	dec ebx
  5932 0000481B 81FB00000000        <2> 	cmp ebx, 0
  5933 00004821 77B2                <2> 	ja .ctlp
  5934 00004823 E83B000000          <2> 	call .etime
  5935 00004828 53                  <2> 	push ebx
  5936 00004829 57                  <2> 	push edi
  5937 0000482A 59                  <2> 	pop ecx
  5938 0000482B E86AEAFFFF          <2> 	call showdec
  5939 00004830 BE[F1480000]        <2> 	mov esi, .msgcircle
  5940 00004835 E8F1D4FFFF          <2> 	call print
  5941 0000483A 59                  <2> 	pop ecx
  5942 0000483B E85AEAFFFF          <2> 	call showdec
  5943 00004840 BE[08490000]        <2> 	mov esi, .msgtime
  5944 00004845 E8E1D4FFFF          <2> 	call print
  5945 0000484A C3                  <2> 	ret
  5946                              <2> 	
  5947                              <2> .stime:
  5948 0000484B F4                  <2> 	hlt
  5949 0000484C A1[60020000]        <2> 	mov eax, [timeseconds]
  5950 00004851 8B1D[64020000]      <2> 	mov ebx, [timenanoseconds]
  5951 00004857 A3[17490000]        <2> 	mov [.time], eax
  5952 0000485C 891D[1B490000]      <2> 	mov [.time + 4], ebx
  5953 00004862 C3                  <2> 	ret
  5954                              <2> 	
  5955                              <2> .etime:
  5956 00004863 A1[60020000]        <2> 	mov eax, [timeseconds]
  5957 00004868 8B1D[64020000]      <2> 	mov ebx, [timenanoseconds]
  5958 0000486E 8B0D[17490000]      <2> 	mov ecx, [.time]
  5959 00004874 8B15[1B490000]      <2> 	mov edx, [.time + 4]
  5960 0000487A C1EA0A              <2> 	shr edx, 10
  5961 0000487D C1EB0A              <2> 	shr ebx, 10
  5962 00004880 29C8                <2> 	sub eax, ecx
  5963 00004882 3D00000000          <2> 	cmp eax, 0
  5964 00004887 740E                <2> 	je .notclp
  5965                              <2> .tclp:
  5966 00004889 81C340420F00        <2> 	add ebx, 1000000
  5967 0000488F 48                  <2> 	dec eax
  5968 00004890 3D00000000          <2> 	cmp eax, 0
  5969 00004895 75F2                <2> 	jne .tclp
  5970                              <2> .notclp:
  5971 00004897 29D3                <2> 	sub ebx, edx
  5972 00004899 C3                  <2> 	ret
  5973                              <2> 	
  5974                              <2> .st:
  5975 0000489A 6631C0              <2> 	xor ax, ax
  5976 0000489D 6631DB              <2> 	xor bx, bx
  5977 000048A0 668B0D[F4570000]    <2> 	mov cx, [resolutiony]
  5978 000048A7 668B15[F2570000]    <2> 	mov dx, [resolutionx]
  5979                              <2> .lp:
  5980 000048AE 60                  <2> 	pusha
  5981 000048AF E8DE240000          <2> 	call drawline
  5982 000048B4 61                  <2> 	popa
  5983                              <2> .noswitch:
  5984 000048B5 47                  <2> 	inc edi
  5985 000048B6 6643                <2> 	inc bx
  5986 000048B8 664A                <2> 	dec dx
  5987 000048BA 6681FB0000          <2> 	cmp bx, 0
  5988 000048BF 74ED                <2> 	je .lp
  5989 000048C1 6681FA0000          <2> 	cmp dx, 0
  5990 000048C6 75E6                <2> 	jne .lp
  5991                              <2> .lp2:
  5992 000048C8 60                  <2> 	pusha
  5993 000048C9 E8C4240000          <2> 	call drawline
  5994 000048CE 61                  <2> 	popa
  5995 000048CF 47                  <2> 	inc edi
  5996 000048D0 6640                <2> 	inc ax
  5997 000048D2 6649                <2> 	dec cx
  5998 000048D4 6681F90000          <2> 	cmp cx, 0
  5999 000048D9 75ED                <2> 	jne .lp2
  6000 000048DB C3                  <2> 	ret
  6001                              <2> 	
  6002 000048DC 6C696E657320776572- <2> .msg db "lines were drawn in ",0
  6003 000048E5 6520647261776E2069- <2>
  6004 000048EE 6E2000              <2>
  6005 000048F1 636972636C65732077- <2> .msgcircle db "circles were drawn in ",0
  6006 000048FA 65726520647261776E- <2>
  6007 00004903 20696E2000          <2>
  6008 00004908 6D6963726F7365636F- <2> .msgtime db "microseconds.",10,0
  6009 00004911 6E64732E0A00        <2>
  6010 00004917 0000000000000000    <2> .time dd 0,0	
  6011                              <1> %endif
  6012                              <1> %include 'source/programs/logout.asm'
  6013 0000491F FF2C6C6F676F757400  <2> 	db 255,44,"logout",0
  6014 00004928 E904E2FFFF          <2> 	jmp os
  6015                              <1> %include 'source/programs/loop.asm'
  6016 0000492D FF2C6C6F6F7000      <2> 	db 255,44,"loop",0
  6017 00004934 803D[63260100]00    <2> 	cmp byte [LOOPON], 0
  6018 0000493B 0F8501000000        <2> 	jne near filoop
  6019 00004941 C3                  <2> 	ret
  6020 00004942 8B35[64260100]      <2> filoop: mov esi, [LOOPPOS]
  6021 00004948 FE0D[F9250100]      <2> 	dec byte [IFON]
  6022 0000494E C605[63260100]00    <2> 	mov byte [LOOPON], 0
  6023 00004955 8935[5E260100]      <2> 	mov [BATCHPOS], esi
  6024 0000495B 8935[CF390000]      <2> 	mov [batchedi], esi
  6025 00004961 C3                  <2> 	ret 
  6026                              <1> %ifdef disk.none
  6027                              <1> %else
  6028                              <1> 	%include 'source/programs/ls.asm'
  6029 00004962 FF2C6C7300          <2> db 255,44,"ls",0
  6030 00004967 BE[E60D0100]        <2> 		mov esi, diskfileindex
  6031                              <2> 	diskindexdir:
  6032 0000496C 803E5F              <2> 		cmp byte [esi], '_'
  6033 0000496F 7440                <2> 		je nextdiskindexdir
  6034 00004971 E896D3FFFF          <2> 		call printquiet
  6035 00004976 56                  <2> 		push esi
  6036 00004977 BE[D1490000]        <2> 		mov esi, disktab
  6037 0000497C E88BD3FFFF          <2> 		call printquiet
  6038 00004981 5E                  <2> 		pop esi
  6039 00004982 8B4E05              <2> 		mov ecx, [esi + 5]
  6040 00004985 C605[BB310000]05    <2> 		mov byte [firsthexshown], 5
  6041 0000498C E809E9FFFF          <2> 		call showdec
  6042 00004991 56                  <2> 		push esi
  6043 00004992 BE[778B0000]        <2> 		mov esi, line
  6044 00004997 E870D3FFFF          <2> 		call printquiet
  6045 0000499C 5E                  <2> 		pop esi
  6046 0000499D 81C609000000        <2> 		add esi, 9
  6047 000049A3 81FE[E40F0100]      <2> 		cmp esi, enddiskfileindex
  6048 000049A9 72C1                <2> 		jb diskindexdir
  6049 000049AB E802DFFFFF          <2> 		call termcopy
  6050 000049B0 C3                  <2> 		ret
  6051                              <2> 	nextdiskindexdir:
  6052 000049B1 46                  <2> 		inc esi
  6053 000049B2 803E00              <2> 		cmp byte [esi], 0
  6054 000049B5 75FA                <2> 		jne nextdiskindexdir
  6055 000049B7 81C609000000        <2> 		add esi, 9
  6056 000049BD 81FE[E40F0100]      <2> 		cmp esi, enddiskfileindex
  6057 000049C3 72A7                <2> 		jb diskindexdir
  6058 000049C5 E8E8DEFFFF          <2> 		call termcopy
  6059 000049CA C3                  <2> 		ret
  6060                              <2> 		
  6061 000049CB 4469736B2000        <2> 		diskmsg db "Disk ",0
  6062 000049D1 0D09090900          <2> 		disktab db 13,9,9,9,0
  6063                              <1> %endif
  6064                              <1> %include 'source/programs/memory.asm'
  6065 000049D6 FF2C6D656D6F727900  <2> db 255,44,"memory",0
  6066 000049DF BE[A28B0000]        <2> 	mov esi, memlistbuf
  6067 000049E4 31FF                <2> 	xor edi, edi
  6068 000049E6 668B3D[E28D0000]    <2> 	mov di, [memlistend]
  6069 000049ED 01F7                <2> 	add edi, esi
  6070                              <2> printmemmap:
  6071 000049EF 8B0E                <2> 	mov ecx, [esi]
  6072 000049F1 E8DAE7FFFF          <2> 	call showhex
  6073 000049F6 81C608000000        <2> 	add esi, 8
  6074 000049FC 8B0E                <2> 	mov ecx, [esi]
  6075 000049FE E8CDE7FFFF          <2> 	call showhex
  6076 00004A03 81C608000000        <2> 	add esi, 8
  6077 00004A09 8B0E                <2> 	mov ecx, [esi]
  6078 00004A0B E8C0E7FFFF          <2> 	call showhex
  6079 00004A10 81C608000000        <2> 	add esi, 8
  6080 00004A16 57                  <2> 	push edi
  6081 00004A17 56                  <2> 	push esi
  6082 00004A18 BE[778B0000]        <2> 	mov esi, line
  6083 00004A1D E809D3FFFF          <2> 	call print
  6084 00004A22 5E                  <2> 	pop esi
  6085 00004A23 5F                  <2> 	pop edi
  6086 00004A24 39FE                <2> 	cmp esi, edi
  6087 00004A26 72C7                <2> 	jb printmemmap
  6088 00004A28 C3                  <2> 	ret
  6089                              <2> 	
  6090                              <1> %include 'source/programs/pci.asm'
  6091 00004A29 FF2C70636900        <2> db 255,44,"pci",0
  6092 00004A2F E8D8180000          <2> 	call pcidump
  6093 00004A34 C3                  <2> 	ret 
  6094                              <1> %ifdef network.included
  6095                              <1> 	%include 'source/programs/ping.asm'
  6096 00004A35 FF2C70696E6700      <2> db 255,44,"ping",0
  6097                              <2> ping:
  6098 00004A3C 8B35[A92F0000]      <2> 	mov esi, [currentcommandloc]
  6099 00004A42 81C605000000        <2> 	add esi, 5
  6100 00004A48 E8F63F0000          <2> 	call strtoip
  6101 00004A4D 890D[D84A0000]      <2> 	mov [.destip], ecx
  6102 00004A53 E831400000          <2> 	call showip
  6103 00004A58 8B0D[2C8B0000]      <2> 	mov ecx, [sysip]
  6104 00004A5E 890D[D44A0000]      <2> 	mov [.sourceip]. ecx
  6105 00004A64 31C0                <2> 	xor eax, eax
  6106 00004A66 31DB                <2> 	xor ebx, ebx
  6107 00004A68 66A3[D24A0000]      <2> 	mov [.checksum], ax
  6108 00004A6E 66A3[DE4A0000]      <2> 	mov [.icmpchecksum], ax
  6109 00004A74 BF[C84A0000]        <2> 	mov edi, .header
  6110 00004A79 BE[DC4A0000]        <2> 	mov esi, .headerend
  6111 00004A7E E8983F0000          <2> 	call getchecksum
  6112 00004A83 66890D[D24A0000]    <2> 	mov [.checksum], cx
  6113 00004A8A BF[DC4A0000]        <2> 	mov edi, .icmp
  6114 00004A8F BE[044B0000]        <2> 	mov esi, .packetend
  6115 00004A94 E8823F0000          <2> 	call getchecksum
  6116 00004A99 66890D[DE4A0000]    <2> 	mov [.icmpchecksum], cx
  6117 00004AA0 BF[BA4A0000]        <2> 	mov edi, .packet
  6118 00004AA5 BE[044B0000]        <2> 	mov esi, .packetend
  6119 00004AAA E8623F0000          <2> 	call sendpacket
  6120 00004AAF BE[778B0000]        <2> 	mov esi, line
  6121 00004AB4 E872D2FFFF          <2> 	call print
  6122 00004AB9 C3                  <2> 	ret
  6123                              <2> 	
  6124                              <2> 	
  6125                              <2> 	
  6126                              <2> .packet:
  6127 00004ABA FFFFFFFFFFFF        <2> .destinationmac db 0xFF,0xFF,0xFF,0xFF,0xFF,0xFF
  6128 00004AC0 000000000000        <2> .sourcemac	db 0,0,0,0,0,0
  6129 00004AC6 0800                <2> .ethertype	db 8,0	;ip is 0x800
  6130                              <2> .header:
  6131 00004AC8 45                  <2> .version	db 0x45
  6132 00004AC9 00                  <2> .services	db 0
  6133 00004ACA 003C                <2> .length	db 0,0x3C
  6134 00004ACC 0000                <2> .id		dw 0
  6135 00004ACE 00                  <2> .flags	db 0
  6136 00004ACF 00                  <2> .fragment db 0
  6137 00004AD0 80                  <2> .ttl	db 128
  6138 00004AD1 01                  <2> .protocol db 1 ;ICMP
  6139 00004AD2 0000                <2> .checksum dw 0
  6140 00004AD4 00000000            <2> .sourceip dd 0
  6141 00004AD8 00000000            <2> .destip dd 0
  6142                              <2> .headerend:
  6143                              <2> .icmp:
  6144 00004ADC 08                  <2> .icmptype db 8 ;Ping request
  6145 00004ADD 00                  <2> .icmpcode db 0
  6146 00004ADE 0000                <2> .icmpchecksum dw 0
  6147 00004AE0 0001                <2> .icmpid db 0,1
  6148 00004AE2 0000                <2> .sequence dw 0
  6149 00004AE4 616263646566676869- <2> db "abcdefghijklmnopqrstuvwabcdefghi" ;this is what microsoft includes
  6150 00004AED 6A6B6C6D6E6F707172- <2>
  6151 00004AF6 737475767761626364- <2>
  6152 00004AFF 6566676869          <2>
  6153                              <2> .packetend:
  6154                              <1> %endif
  6155                              <1> %ifdef disk.none
  6156                              <1> %else
  6157                              <1> 	%include 'source/programs/play.asm'
  6158 00004B04 FF2C706C61796100    <2> db 255,44,"playa",0
  6159 00004B0C 8B3D[A92F0000]      <2> 	mov edi, [currentcommandloc]
  6160 00004B12 81C706000000        <2> 	add edi, 6
  6161 00004B18 E827000000          <2> 	call playasync
  6162 00004B1D C3                  <2> 	ret
  6163 00004B1E FF2C706C617900      <2> db 255,44,"play",0
  6164                              <2> play:
  6165 00004B25 8B3D[A92F0000]      <2> 	mov edi, [currentcommandloc]
  6166 00004B2B 81C705000000        <2> 	add edi, 5
  6167 00004B31 E80E000000          <2> 	call playasync
  6168                              <2> .waitforsound:
  6169                              <2> %ifdef sound.included
  6170                              <2> 	mov eax, [Length0]
  6171                              <2> 	or ax, [Length1]
  6172                              <2> %endif
  6173 00004B36 0A05[68020000]      <2> 	or al, [soundon]
  6174 00004B3C 3D00000000          <2> 	cmp eax, 0
  6175 00004B41 75F3                <2> 	jne .waitforsound
  6176 00004B43 C3                  <2> 	ret
  6177                              <2> playasync:
  6178 00004B44 BE0000C000          <2> 	mov esi, 0xC00000
  6179 00004B49 E8F31A0000          <2> 	call loadfile
  6180 00004B4E 81FA94010000        <2> 	cmp edx, 404
  6181 00004B54 743F                <2> 	je nosoundfound
  6182 00004B56 BB0000C000          <2> 	mov ebx, 0xC00000
  6183 00004B5B 817B0857415645      <2> 	cmp dword [ebx + 8], "WAVE"
  6184 00004B62 0F845A000000        <2> 	je near wave_player
  6185 00004B68 66813B534E          <2> 	cmp word [ebx], "SN"
  6186 00004B6D 7526                <2> 	jne nosoundfound
  6187 00004B6F 81C306000000        <2> 	add ebx, 6
  6188 00004B75 891D[6B020000]      <2> 	mov [soundpos], ebx
  6189 00004B7B 035BFC              <2> 	add ebx, [ebx - 4]
  6190 00004B7E 891D[6F020000]      <2> 	mov [soundendpos], ebx
  6191 00004B84 66C705[69020000]00- <2> 	mov word [soundrepititions], 0
  6192 00004B8C 00                  <2>
  6193 00004B8D C605[68020000]01    <2> 	mov byte [soundon], 1
  6194 00004B94 C3                  <2> 	ret
  6195                              <2> nosoundfound:
  6196 00004B95 BE[BB4B0000]        <2> 	mov esi, notfoundsound
  6197 00004B9A E88CD1FFFF          <2> 	call print
  6198 00004B9F 8B35[A92F0000]      <2> 	mov esi, [currentcommandloc]
  6199 00004BA5 81C605000000        <2> 	add esi, 5
  6200 00004BAB E87BD1FFFF          <2> 	call print
  6201 00004BB0 BE[468B0000]        <2> 	mov esi, notfound2
  6202 00004BB5 E871D1FFFF          <2> 	call print
  6203 00004BBA C3                  <2> 	ret
  6204 00004BBB 706C61793A2000      <2> notfoundsound db "play: ",0
  6205                              <2> 
  6206                              <2> %ifdef sound.included
  6207                              <2> sbplay:
  6208                              <2> 		mov esi, 0xC00000
  6209                              <2> 		mov ebx, esi
  6210                              <2> 		add esi, WAVSTART
  6211                              <2> 		sub edi, esi
  6212                              <2> 		mov [Length1], di
  6213                              <2> 		shr edi, 15
  6214                              <2> 		mov [Length0], edi
  6215                              <2> 		mov ecx, [ebx + 24]
  6216                              <2> 		mov [Freq], ecx
  6217                              <2> 		xor eax, eax
  6218                              <2> 		mov	edx, 0xC00000 ;physical location of sound
  6219                              <2> 		add edx, WAVSTART
  6220                              <2> 		add	eax, edx
  6221                              <2> 		mov esi, eax
  6222                              <2> 		xor ecx, ecx
  6223                              <2> 		xor ebx, ebx
  6224                              <2> 		mov [SegLoc], bx
  6225                              <2> 		add ebx, 0x80000
  6226                              <2> 		mov cx, 0xFFFF
  6227                              <2> 		cmp di, 0
  6228                              <2> 		jne .autoinit
  6229                              <2> 		mov cx, [Length1]
  6230                              <2> 		mov byte [OddLength], 1
  6231                              <2> 		cmp cx, 32768
  6232                              <2> 		jae .autoinit
  6233                              <2> 		mov byte [OddLength], 0
  6234                              <2> 		shl cx, 1
  6235                              <2> 		inc edi
  6236                              <2> .autoinit:
  6237                              <2> 		dec edi
  6238                              <2> 		mov [Length0], edi
  6239                              <2> 		mov [Length1], cx
  6240                              <2> 		shr cx, 1
  6241                              <2> 		inc cx
  6242                              <2> 		add eax, ecx
  6243                              <2> 		mov [NextMemLoc], eax
  6244                              <2> 		mov	[MemLoc], esi
  6245                              <2> 		call DMACopy
  6246                              <2> 		xor ebx, ebx
  6247                              <2> 		mov bx, [SegLoc]
  6248                              <2> 		xor ecx, ecx
  6249                              <2> 		mov cx, [Length1]
  6250                              <2> 		shr cx, 1
  6251                              <2> 		inc cx
  6252                              <2> 		add ebx, ecx
  6253                              <2> 		mov [SegLoc], bx
  6254                              <2> 		add ebx, 0x80000
  6255                              <2> 		mov esi, [NextMemLoc]
  6256                              <2> 		mov eax, esi
  6257                              <2> 		add eax, ecx
  6258                              <2> 		mov [NextMemLoc], eax
  6259                              <2> 		mov	[MemLoc], esi
  6260                              <2> 		call DMACopy
  6261                              <2> 		call DMAPlay
  6262                              <2> 		call PlayDSP
  6263                              <2> 		ret
  6264                              <2> WAVSTART equ 64;44
  6265                              <2> wave_player:
  6266                              <2> 	cmp byte [SoundBlaster], 1
  6267                              <2> 	je near sbplay
  6268                              <2> 	mov esi, nosoundblaster
  6269                              <2> 	call print
  6270                              <2> 	ret
  6271                              <2> %else
  6272                              <2> 	wave_player:
  6273 00004BC2 BE[CD4B0000]        <2> 		mov esi, nosoundblaster
  6274 00004BC7 E85FD1FFFF          <2> 		call print
  6275 00004BCC C3                  <2> 		ret
  6276                              <2> %endif
  6277 00004BCD 4E6F20536F756E6420- <2> nosoundblaster db "No Sound Blaster detected.",10,0
  6278 00004BD6 426C61737465722064- <2>
  6279 00004BDF 657465637465642E0A- <2>
  6280 00004BE8 00                  <2>
  6281                              <1> %endif
  6282                              <1> %include 'source/programs/pwd.asm'
  6283 00004BE9 FF2C70776400        <2> db 255,44,"pwd",0
  6284 00004BEF BE[F4230100]        <2> 	mov esi, currentfolder
  6285 00004BF4 E813D1FFFF          <2> 	call printquiet
  6286 00004BF9 BE[778B0000]        <2> 	mov esi, line
  6287 00004BFE E828D1FFFF          <2> 	call print
  6288 00004C03 C3                  <2> 	ret
  6289                              <2> 	
  6290                              <1> %include 'source/programs/reboot.asm'
  6291 00004C04 FF2C7265626F6F7400  <2> 	db 255,44,"reboot",0
  6292 00004C0D 0F011D[174C0000]    <2> 		lidt [idtreboot]
  6293 00004C14 CD00                <2> 		int 0
  6294 00004C16 F4                  <2> 		hlt
  6295                              <2> 	
  6296 00004C17 0000                <2> 	idtreboot dw 0
  6297 00004C19 00000000            <2> 			  dd 0
  6298                              <2> 
  6299                              <2> 	coldboot:
  6300 00004C1D 66B84000            <2> 		MOV AX, 0040h
  6301 00004C21 8EC0                <2> 		MOV ES, AX
  6302 00004C23 2666C7057200000000- <2> 		MOV WORD [ES:00072h], 0h
  6303 00004C2C 00                  <2>
  6304 00004C2D EA00000000FFFF      <2> 		JMP 0FFFFh:0000h
  6305 00004C34 CF                  <2> 		IRET
  6306                              <2> 
  6307                              <2> 	warmboot:
  6308 00004C35 66B84000            <2> 		MOV AX, 0040h
  6309 00004C39 8EC0                <2> 		MOV ES, AX
  6310 00004C3B 2666C7057200000034- <2> 		MOV WORD [ES:00072h], 01234h
  6311 00004C44 12                  <2>
  6312 00004C45 EA00000000FFFF      <2> 		JMP 0FFFFh:0000h
  6313 00004C4C CF                  <2> 		IRET
  6314                              <2> 		
  6315                              <1> %include 'source/programs/reg.asm'
  6316 00004C4D FF2C72656700        <2> db 255,44,"reg",0
  6317 00004C53 CD03                <2> 	int 3
  6318 00004C55 C3                  <2> 	ret 
  6319                              <1> %ifdef disk.none
  6320                              <1> %else
  6321                              <1> 	%include 'source/programs/show.asm'
  6322 00004C56 FF2C73686F7700      <2> db 255,44,"show",0
  6323                              <2> showprog:
  6324 00004C5D 8B3D[A92F0000]      <2> 		mov edi, [currentcommandloc]
  6325 00004C63 81C705000000        <2> 		add edi, 5
  6326 00004C69 BE00004000          <2> 		mov esi, 0x400000
  6327 00004C6E 803F26              <2> 		cmp byte [edi], '&'
  6328 00004C71 741B                <2> 		je .nullfile
  6329 00004C73 BE00008000          <2> 		mov esi, 0x800000
  6330 00004C78 E8C4190000          <2> 		call loadfile
  6331 00004C7D 81FA94010000        <2> 		cmp edx, 404
  6332 00004C83 0F8483000000        <2> 		je near filenotfound
  6333 00004C89 BE00008000          <2> 		mov esi, 0x800000
  6334                              <2> .nullfile:
  6335                              <2> %ifdef gui.included
  6336 00004C8E 66813E424D          <2> 		cmp word [esi], "BM"
  6337 00004C93 7410                <2> 		je bmpfound
  6338                              <2> %endif
  6339 00004C95 E891D0FFFF          <2> 		call print
  6340 00004C9A BE[778B0000]        <2> 		mov esi, line
  6341 00004C9F E887D0FFFF          <2> 		call print
  6342 00004CA4 C3                  <2> 		ret
  6343                              <2> %ifdef gui.included
  6344                              <2> bmpfound:
  6345 00004CA5 803D[9C8B0000]00    <2> 		cmp byte [guion], 0
  6346 00004CAC 0F8428000000        <2> 		je near noguibmp
  6347 00004CB2 BE00008000          <2> 		mov esi, 0x800000
  6348 00004CB7 31C9                <2> 		xor ecx, ecx
  6349 00004CB9 31D2                <2> 		xor edx, edx
  6350 00004CBB 31C0                <2> 		xor eax, eax
  6351 00004CBD 31DB                <2> 		xor ebx, ebx
  6352 00004CBF E8411B0000          <2> 		call showbmp
  6353 00004CC4 30C0                <2> 		xor al, al
  6354 00004CC6 B405                <2> 		mov ah, 5
  6355 00004CC8 CD30                <2> 		int 30h
  6356 00004CCA E8EF210000          <2> 		call guiclear
  6357 00004CCF E88A1E0000          <2> 		call clearmousecursor
  6358 00004CD4 E878220000          <2> 		call reloadallgraphics
  6359 00004CD9 C3                  <2> 		ret
  6360                              <2> noguibmp:
  6361 00004CDA BE[E54C0000]        <2> 		mov esi, warnguimsg
  6362 00004CDF E847D0FFFF          <2> 		call print
  6363 00004CE4 C3                  <2> 		ret
  6364 00004CE5 546869732063616E20- <2> warnguimsg db "This can not be done without the GUI.",10,0
  6365 00004CEE 6E6F7420626520646F- <2>
  6366 00004CF7 6E6520776974686F75- <2>
  6367 00004D00 742074686520475549- <2>
  6368 00004D09 2E0A00              <2>
  6369                              <2> %endif
  6370                              <2> 
  6371                              <2> filenotfound:
  6372 00004D0C BE[3F4D0000]        <2> 		mov esi, filenf
  6373 00004D11 E815D0FFFF          <2> 		call print
  6374 00004D16 8B35[A92F0000]      <2> 		mov esi, [currentcommandloc]
  6375                              <2> findfilenotfoundzero:
  6376 00004D1C 8A06                <2> 		mov al, [esi]
  6377 00004D1E 46                  <2> 		inc esi
  6378 00004D1F 3C00                <2> 		cmp al, 0
  6379 00004D21 7411                <2> 		je nofilenamenotfound
  6380 00004D23 81FE[683E0100]      <2> 		cmp esi, buftxtend
  6381 00004D29 7309                <2> 		jae nofilenamenotfound
  6382 00004D2B 3C20                <2> 		cmp al, " "
  6383 00004D2D 75ED                <2> 		jne findfilenotfoundzero
  6384 00004D2F E8F7CFFFFF          <2> 		call print
  6385                              <2> nofilenamenotfound:
  6386 00004D34 BE[4A4D0000]        <2> 		mov esi, filenf2
  6387 00004D39 E8EDCFFFFF          <2> 		call print
  6388 00004D3E C3                  <2> 		ret
  6389 00004D3F 5468652066696C6520- <2> filenf db "The file ",34,0
  6390 00004D48 2200                <2>
  6391 00004D4A 2220636F756C64206E- <2> filenf2 db 34," could not be found.",10,0
  6392 00004D53 6F7420626520666F75- <2>
  6393 00004D5C 6E642E0A00          <2>
  6394                              <1> %endif
  6395                              <1> %include 'source/programs/shush.asm'
  6396 00004D61 FF2C736875736800    <2> db 255,44,"shush",0	;if you add 2 values it will switch size using the first as X in chars and the second as Y in chars
  6397                              <2> shushprog:
  6398                              <2> %ifdef gui.included
  6399 00004D69 803D[9C8B0000]00    <2> 	cmp byte [guion], 0
  6400 00004D70 0F84B9000000        <2> 	je near .noswitchsize
  6401 00004D76 8B35[A92F0000]      <2> 	mov esi, [currentcommandloc]
  6402 00004D7C 81C606000000        <2> 	add esi, 6
  6403 00004D82 56                  <2> 	push esi
  6404 00004D83 4E                  <2> 	dec esi
  6405                              <2> .findspace:
  6406 00004D84 46                  <2> 	inc esi
  6407 00004D85 8A06                <2> 	mov al, [esi]
  6408 00004D87 3C00                <2> 	cmp al, 0
  6409 00004D89 0F84A0000000        <2> 	je near .noswitchsize
  6410 00004D8F 3C58                <2> 	cmp al, "X"
  6411 00004D91 7408                <2> 	je .donefind
  6412 00004D93 3C78                <2> 	cmp al, "x"
  6413 00004D95 7404                <2> 	je .donefind
  6414 00004D97 3C20                <2> 	cmp al, " "
  6415 00004D99 75E9                <2> 	jne .findspace
  6416                              <2> .donefind:
  6417 00004D9B 30C0                <2> 	xor al, al
  6418 00004D9D 8806                <2> 	mov [esi], al
  6419 00004D9F 46                  <2> 	inc esi
  6420 00004DA0 89F7                <2> 	mov edi, esi
  6421 00004DA2 E8D5E5FFFF          <2> 	call cnvrttxt
  6422 00004DA7 89C8                <2> 	mov eax, ecx
  6423 00004DA9 5E                  <2> 	pop esi
  6424 00004DAA 50                  <2> 	push eax
  6425 00004DAB 89F7                <2> 	mov edi, esi
  6426 00004DAD E8CAE5FFFF          <2> 	call cnvrttxt
  6427 00004DB2 89CB                <2> 	mov ebx, ecx
  6428 00004DB4 58                  <2> 	pop eax	
  6429 00004DB5 6681FB0000          <2> 	cmp bx, 0
  6430 00004DBA 0F846F000000        <2> 	je near .noswitchsize
  6431 00004DC0 663D0000            <2> 	cmp ax, 0
  6432 00004DC4 0F8465000000        <2> 	je near .noswitchsize
  6433 00004DCA 66C1E303            <2> 	shl bx, 3
  6434 00004DCE 66C1E004            <2> 	shl ax, 4
  6435 00004DD2 663B1D[F2570000]    <2> 	cmp bx, [resolutionx]
  6436 00004DD9 7607                <2> 	jbe .nofixx
  6437 00004DDB 668B1D[F2570000]    <2> 	mov bx, [resolutionx]
  6438                              <2> .nofixx:
  6439 00004DE2 66051000            <2> 	add ax, 16
  6440 00004DE6 663B05[F4570000]    <2> 	cmp ax, [resolutiony]
  6441 00004DED 7606                <2> 	jbe .nofixy
  6442 00004DEF 66A1[F4570000]      <2> 	mov ax, [resolutiony]
  6443                              <2> .nofixy:
  6444 00004DF5 662D1000            <2> 	sub ax, 16
  6445 00004DF9 6631C9              <2> 	xor cx, cx
  6446 00004DFC 6631D2              <2> 	xor dx, dx
  6447 00004DFF 66891D[F7720000]    <2> 	mov [termwindow], bx
  6448 00004E06 66A3[F9720000]      <2> 	mov [termwindow + 2], ax	;the previous lines of code make a large terminal window that is 4 characters smaller than the screen
  6449 00004E0C BE[F7720000]        <2> 	mov esi, termwindow
  6450 00004E11 31DB                <2> 	xor ebx, ebx
  6451 00004E13 6631C0              <2> 	xor ax, ax
  6452 00004E16 E8092A0000          <2> 	call showwindow
  6453 00004E1B E89E200000          <2> 	call guiclear
  6454 00004E20 E8AFCFFFFF          <2> 	call clear
  6455 00004E25 E827210000          <2> 	call reloadallgraphics
  6456 00004E2A E82B1E0000          <2> 	call switchmousepos2
  6457                              <2> .noswitchsize:
  6458                              <2> %endif
  6459 00004E2F BE[3A4E0000]        <2> 	mov esi, shushmsg
  6460 00004E34 E8F2CEFFFF          <2> 	call print
  6461 00004E39 C3                  <2> 	ret
  6462 00004E3A 57656C636F6D652074- <2> 	shushmsg db "Welcome to the SollerOS Hardly Unix-Compatible Shell!",10,0
  6463 00004E43 6F2074686520536F6C- <2>
  6464 00004E4C 6C65724F5320486172- <2>
  6465 00004E55 646C7920556E69782D- <2>
  6466 00004E5E 436F6D70617469626C- <2>
  6467 00004E67 65205368656C6C210A- <2>
  6468 00004E70 00                  <2>
  6469                              <1> %include 'source/programs/system.asm'
  6470 00004E71 FF2C73797374656D00  <2> 	db 255,44,"system",0
  6471 00004E7A BE[774F0000]        <2> 	mov esi, kernelinfomsg
  6472 00004E7F E888CEFFFF          <2> 	call printquiet
  6473 00004E84 B9[E60D0100]        <2> 	mov ecx, osend
  6474 00004E89 E80CE4FFFF          <2> 	call showdec
  6475 00004E8E BE[8C4F0000]        <2> 	mov esi, diskbytemsg
  6476 00004E93 E874CEFFFF          <2> 	call printquiet
  6477 00004E98 B9[E60D0100]        <2> 	mov ecx, osend
  6478 00004E9D 81C1[1E102B00]      <2> 	add ecx, commandbufend
  6479 00004EA3 81E9[E40F0100]      <2> 	sub ecx, bssstart	;add the extra buffer space
  6480 00004EA9 E8ECE3FFFF          <2> 	call showdec
  6481 00004EAE BE[A34F0000]        <2> 	mov esi, membytemsg
  6482 00004EB3 E854CEFFFF          <2> 	call printquiet
  6483 00004EB8 BE[EE4F0000]        <2> 	mov esi, endofmemmsg
  6484 00004EBD E84ACEFFFF          <2> 	call printquiet
  6485 00004EC2 B9[32443B00]        <2> 	mov ecx, bssend
  6486 00004EC7 E804E3FFFF          <2> 	call showhex
  6487 00004ECC BE[BC4F0000]        <2> 	mov esi, systeminfomsg
  6488 00004ED1 E836CEFFFF          <2> 	call printquiet
  6489                              <2> getcpuspeed:
  6490 00004ED6 B8FE000000          <2> 	mov eax, 0xFE
  6491 00004EDB E621                <2> 	out 0x21, al ;mask off all but timer interrupt
  6492 00004EDD B020                <2> 	mov al, 0x20
  6493 00004EDF E620                <2> 	out 0x20, al
  6494 00004EE1 F4                  <2> 	hlt
  6495 00004EE2 0F31                <2> 	rdtsc
  6496 00004EE4 89D6                <2> 	mov esi, edx
  6497 00004EE6 89C7                <2> 	mov edi, eax
  6498 00004EE8 31C0                <2> 	xor eax, eax
  6499 00004EEA C605[49020000]01    <2> 	mov byte [testingcpuspeed], 1
  6500                              <2> cpuspeedloop:	;wait until next timer interrupt, then inc eax until the next
  6501 00004EF1 40                  <2> 	inc eax
  6502 00004EF2 EBFD                <2> 	jmp cpuspeedloop
  6503                              <2> cpuspeedloopend:
  6504 00004EF4 0F31                <2> 	rdtsc
  6505 00004EF6 29F8                <2> 	sub eax, edi
  6506 00004EF8 29F2                <2> 	sub edx, esi
  6507 00004EFA 8915[52020000]      <2> 	mov [cpuclocksperint + 4], edx
  6508 00004F00 A3[4E020000]        <2> 	mov [cpuclocksperint], eax
  6509 00004F05 31C0                <2> 	xor eax, eax
  6510 00004F07 E621                <2> 	out 0x21, al
  6511 00004F09 B020                <2> 	mov al, 0x20
  6512 00004F0B E620                <2> 	out 0x20, al
  6513 00004F0D 31D2                <2> 	xor edx, edx
  6514 00004F0F 31C0                <2> 	xor eax, eax
  6515 00004F11 A1[4A020000]        <2> 	mov eax, [cpuspeedperint]
  6516 00004F16 D1E0                <2> 	shl eax, 1	;the cpu speed loop actually contains 2 commands so multiply the
  6517                              <2> 				;result by 2
  6518 00004F18 8B1D[5C020000]      <2> 	mov ebx, [timeinterval]
  6519 00004F1E C1EB0A              <2> 	shr ebx, 10 ;divide the interval by 1024
  6520 00004F21 F7F3                <2> 	div ebx	;quotient in eax, remainder in edx
  6521 00004F23 89C1                <2> 	mov ecx, eax
  6522 00004F25 E870E3FFFF          <2> 	call showdec
  6523 00004F2A BE[D24F0000]        <2> 	mov esi, cpuspeedmsg
  6524 00004F2F E8D8CDFFFF          <2> 	call printquiet
  6525 00004F34 31D2                <2> 	xor edx, edx
  6526 00004F36 A1[4E020000]        <2> 	mov eax, [cpuclocksperint]
  6527 00004F3B 8B15[52020000]      <2> 	mov edx, [cpuclocksperint + 4]
  6528 00004F41 8B1D[5C020000]      <2> 	mov ebx, [timeinterval]
  6529 00004F47 C1EB0A              <2> 	shr ebx, 10
  6530 00004F4A F7F3                <2> 	div ebx
  6531 00004F4C 89C1                <2> 	mov ecx, eax
  6532 00004F4E E847E3FFFF          <2> 	call showdec
  6533 00004F53 BE[D84F0000]        <2> 	mov esi, cpuclockmsg
  6534 00004F58 E8AFCDFFFF          <2> 	call printquiet
  6535 00004F5D 8B0D[56020000]      <2> 	mov ecx, [memoryspace]
  6536 00004F63 C1E914              <2> 	shr ecx, 20
  6537 00004F66 41                  <2> 	inc ecx	;the reading is one MB behind
  6538 00004F67 E82EE3FFFF          <2> 	call showdec
  6539 00004F6C BE[DD4F0000]        <2> 	mov esi, memoryspacemsg
  6540 00004F71 E8B5CDFFFF          <2> 	call print
  6541                              <2> %ifdef sound.included
  6542                              <2> 	cmp byte [SoundBlaster], 0
  6543                              <2> 	je .nosb
  6544                              <2> 	mov esi, soundblastermsg
  6545                              <2> 	call print
  6546                              <2> .nosb:
  6547                              <2> %endif
  6548 00004F76 C3                  <2> 	ret
  6549                              <2> 
  6550 00004F77 4B65726E656C20496E- <2> kernelinfomsg db "Kernel Information:",10,0
  6551 00004F80 666F726D6174696F6E- <2>
  6552 00004F89 3A0A00              <2>
  6553 00004F8C 427974657320446973- <2> diskbytemsg db "Bytes Disk Space Used",10,0
  6554 00004F95 6B2053706163652055- <2>
  6555 00004F9E 7365640A00          <2>
  6556 00004FA3 4279746573204D656D- <2> membytemsg db "Bytes Memory Space Used",10,0
  6557 00004FAC 6F7279205370616365- <2>
  6558 00004FB5 20557365640A00      <2>
  6559 00004FBC 0A53797374656D2049- <2> systeminfomsg db 10,"System Information:",10,0
  6560 00004FC5 6E666F726D6174696F- <2>
  6561 00004FCE 6E3A0A00            <2>
  6562                              <2> %ifdef sound.included
  6563                              <2> 	soundblastermsg db "Soundblaster Detected.",10,0
  6564                              <2> %endif
  6565 00004FD2 4D4950530A00        <2> cpuspeedmsg db "MIPS",10,0
  6566 00004FD8 4D487A0A00          <2> cpuclockmsg db "MHz",10,0
  6567 00004FDD 4D42204D656D6F7279- <2> memoryspacemsg db "MB Memory Space",10,0
  6568 00004FE6 2053706163650A00    <2>
  6569 00004FEE 456E64206F66204D65- <2> endofmemmsg: db "End of Memory Space: 0x",0
  6570 00004FF7 6D6F72792053706163- <2>
  6571 00005000 653A20307800        <2>
  6572                              <1> %include 'source/programs/time.asm'
  6573 00005006 082E30303030303030- <2> timenscache db 8,".000000000"
  6574 0000500F 3030                <2>
  6575 00005011 200A00              <2> timenscacheend: db " ",10,0
  6576 00005014 00                  <2> istimeset db 0
  6577 00005015 456E74657220746865- <2> settimemsg db "Enter the current UNIX time:",10,0
  6578 0000501E 2063757272656E7420- <2>
  6579 00005027 554E49582074696D65- <2>
  6580 00005030 3A0A00              <2>
  6581 00005033 00<rept>            <2> timeinputbuffer times 12 db 0
  6582 0000503F 00                  <2> timeinputbend: db 0
  6583                              <2> 
  6584 00005040 FF2C74696D6500      <2> db 255,44,"time",0
  6585 00005047 803D[14500000]00    <2> 	cmp byte [istimeset], 0
  6586 0000504E 753A                <2> 	jne timeisset
  6587 00005050 BE[15500000]        <2> 	mov esi, settimemsg
  6588 00005055 E8D1CCFFFF          <2> 	call print
  6589 0000505A BE[33500000]        <2> 	mov esi, timeinputbuffer
  6590 0000505F BF[3F500000]        <2> 	mov edi, timeinputbend
  6591 00005064 E8E9CDFFFF          <2> 	call readline
  6592 00005069 BE[33500000]        <2> 	mov esi, timeinputbuffer
  6593 0000506E 31FF                <2> 	xor edi, edi
  6594 00005070 E807E3FFFF          <2> 	call cnvrttxt
  6595 00005075 890D[60020000]      <2> 	mov [timeseconds], ecx
  6596 0000507B 31C9                <2> 	xor ecx, ecx
  6597 0000507D 890D[64020000]      <2> 	mov [timenanoseconds], ecx
  6598 00005083 C605[14500000]01    <2> 	mov byte [istimeset], 1
  6599                              <2> timeisset:
  6600 0000508A 8B0D[60020000]      <2> 	mov ecx, [timeseconds]
  6601 00005090 E805E2FFFF          <2> 	call showdec
  6602                              <2> 	
  6603 00005095 8B0D[64020000]      <2> 	mov ecx, [timenanoseconds]
  6604 0000509B BE[06500000]        <2> 	mov esi, timenscache
  6605 000050A0 C7460230303030      <2> 	mov dword [esi+ 2], "0000"
  6606 000050A7 C7460630303030      <2> 	mov dword [esi + 6], "0000"
  6607 000050AE C6460A30            <2> 	mov byte [esi + 10], "0"
  6608 000050B2 BE[11500000]        <2> 	mov esi, timenscacheend
  6609 000050B7 E8C1DFFFFF          <2> 	call convert
  6610 000050BC BE[06500000]        <2> 	mov esi, timenscache
  6611 000050C1 E846CCFFFF          <2> 	call printquiet
  6612                              <2> 	
  6613 000050C6 E82D000000          <2> 	call time
  6614 000050CB BE[C4520000]        <2> 	mov esi, timeshow
  6615 000050D0 E837CCFFFF          <2> 	call printquiet
  6616 000050D5 BE[778B0000]        <2> 	mov esi, line
  6617 000050DA E82DCCFFFF          <2> 	call printquiet
  6618 000050DF BE[CD520000]        <2> 	mov esi, dateshow
  6619 000050E4 E823CCFFFF          <2> 	call printquiet
  6620 000050E9 BE[778B0000]        <2> 	mov esi, line
  6621 000050EE E819CCFFFF          <2> 	call printquiet
  6622 000050F3 E9BC000000          <2> 	jmp findday
  6623                              <2> time:
  6624 000050F8 E84F010000          <2> 	call tstackput1
  6625 000050FD B00A                <2> 	mov al,10			;Get RTC register A
  6626 000050FF E879010000          <2> 	call tget1
  6627 00005104 A880                <2> 	test al,0x80			;Is update in progress?
  6628 00005106 75F0                <2> 	jne time				; yes, wait
  6629                              <2> 
  6630 00005108 B000                <2> 	mov al,0			;Get seconds (00 to 59)
  6631 0000510A E86E010000          <2> 	call tget1
  6632 0000510F A2[BB520000]        <2> 	mov [RTCtimeSecond],al
  6633                              <2> 
  6634 00005114 B002                <2> 	mov al,0x02			;Get minutes (00 to 59)
  6635 00005116 E862010000          <2> 	call tget1
  6636 0000511B A2[BC520000]        <2> 	mov [RTCtimeMinute],al
  6637                              <2> 
  6638 00005120 B004                <2> 	mov al,0x04			;Get hours (see notes)
  6639 00005122 E856010000          <2> 	call tget1
  6640 00005127 A2[BD520000]        <2> 	mov [RTCtimeHour],al
  6641                              <2> 
  6642 0000512C B007                <2> 	mov al,0x07			;Get day of month (01 to 31)
  6643 0000512E E84A010000          <2> 	call tget1
  6644 00005133 A2[BE520000]        <2> 	mov [RTCtimeDay],al
  6645                              <2> 
  6646 00005138 B008                <2> 	mov al,0x08			;Get month (01 to 12)
  6647 0000513A E83E010000          <2> 	call tget1
  6648 0000513F A2[BF520000]        <2> 	mov [RTCtimeMonth],al
  6649                              <2> 
  6650 00005144 B009                <2> 	mov al,0x09			;Get year (00 to 99)
  6651 00005146 E832010000          <2> 	call tget1
  6652 0000514B A2[C0520000]        <2> 	mov [RTCtimeYear],al
  6653                              <2> 	
  6654 00005150 BE[C4520000]        <2> 	mov esi, timeshow
  6655 00005155 8A2D[BD520000]      <2> 	mov ch, [RTCtimeHour]
  6656 0000515B E828010000          <2> 	call tput1
  6657 00005160 8A2D[BC520000]      <2> 	mov ch, [RTCtimeMinute]
  6658 00005166 E81D010000          <2> 	call tput1
  6659 0000516B 8A2D[BB520000]      <2> 	mov ch, [RTCtimeSecond]
  6660 00005171 E812010000          <2> 	call tput1
  6661 00005176 BE[CD520000]        <2> 	mov esi, dateshow
  6662 0000517B 8A2D[BF520000]      <2> 	mov ch, [RTCtimeMonth]
  6663 00005181 E802010000          <2> 	call tput1
  6664 00005186 8A2D[BE520000]      <2> 	mov ch, [RTCtimeDay]
  6665 0000518C E8F7000000          <2> 	call tput1
  6666 00005191 B520                <2> 	mov ch, 0x20
  6667 00005193 E8F0000000          <2> 	call tput1
  6668 00005198 4E                  <2> 	dec esi
  6669 00005199 8A2D[C0520000]      <2> 	mov ch, [RTCtimeYear]
  6670 0000519F E8E4000000          <2> 	call tput1
  6671 000051A4 E8BD000000          <2> 	call tstackget1
  6672 000051A9 C3                  <2> 	ret
  6673 000051AA BE[C4520000]        <2> 	mov esi, timeshow
  6674 000051AF E877CBFFFF          <2> 	call print
  6675                              <2> ;;get day of week
  6676                              <2> ;;add these:
  6677                              <2> ;;century value
  6678                              <2> ;;last 2 digits of year
  6679                              <2> ;;last 2 digits of year right shifted twice
  6680                              <2> ;;month table value
  6681                              <2> ;;day of the month
  6682                              <2> ;;divide these by 7
  6683                              <2> ;;the remainder is the day
  6684                              <2> findday:
  6685 000051B4 31C0                <2> 	xor eax, eax
  6686                              <2> ;;first convert the values from BCD to hex
  6687 000051B6 A0[BE520000]        <2> 	mov al, [RTCtimeDay]
  6688 000051BB E873000000          <2> 	call converttohex
  6689 000051C0 8825[C1520000]      <2> 	mov [dayhex], ah
  6690 000051C6 A0[BF520000]        <2> 	mov al, [RTCtimeMonth]
  6691 000051CB E863000000          <2> 	call converttohex
  6692 000051D0 8825[C2520000]      <2> 	mov [monthhex], ah
  6693 000051D6 A0[C0520000]        <2> 	mov al, [RTCtimeYear]
  6694 000051DB E853000000          <2> 	call converttohex
  6695 000051E0 8825[C3520000]      <2> 	mov [yearhex], ah
  6696 000051E6 31C0                <2> 	xor eax, eax
  6697 000051E8 A0[C3520000]        <2> 	mov al, [yearhex]
  6698 000051ED C0E802              <2> 	shr al, 2
  6699 000051F0 0205[C3520000]      <2> 	add al, [yearhex]
  6700 000051F6 0506000000          <2> 	add eax, 6
  6701 000051FB 31DB                <2> 	xor ebx, ebx
  6702 000051FD 8A1D[C2520000]      <2> 	mov bl, [monthhex]
  6703 00005203 FECB                <2> 	dec bl
  6704 00005205 81C3[E2520000]      <2> 	add ebx, month
  6705 0000520B 31C9                <2> 	xor ecx, ecx
  6706 0000520D 8A0B                <2> 	mov cl, [ebx]
  6707 0000520F 01C8                <2> 	add eax, ecx
  6708 00005211 8A0D[C1520000]      <2> 	mov cl, [dayhex]
  6709 00005217 01C8                <2> 	add eax, ecx
  6710 00005219 66BB0700            <2> 	mov bx, 7
  6711 0000521D 31D2                <2> 	xor edx, edx
  6712 0000521F 66F7F3              <2> 	div bx
  6713 00005222 C1E202              <2> 	shl edx, 2
  6714 00005225 81C2[EE520000]      <2> 	add edx, day
  6715 0000522B 8B32                <2> 	mov esi, [edx]
  6716 0000522D E8F9CAFFFF          <2> 	call print
  6717 00005232 C3                  <2> 	ret
  6718                              <2> 	
  6719                              <2> converttohex:
  6720 00005233 88C4                <2> 	mov ah, al
  6721 00005235 C0E804              <2> 	shr al, 4
  6722 00005238 C0E404              <2> 	shl ah, 4
  6723 0000523B C0EC04              <2> 	shr ah, 4
  6724 0000523E 3C00                <2> 	cmp al, 0
  6725 00005240 7409                <2> 	je noconverttohex
  6726                              <2> converttohexlp:
  6727 00005242 80C40A              <2> 	add ah, 10
  6728 00005245 FEC8                <2> 	dec al
  6729 00005247 3C00                <2> 	cmp al, 0
  6730 00005249 75F7                <2> 	jne converttohexlp
  6731                              <2> noconverttohex:
  6732 0000524B C3                  <2> 	ret
  6733                              <2> 	
  6734                              <2> tstackput1:
  6735 0000524C 8935[B7520000]      <2> 	mov [tstack + 20], esi
  6736 00005252 BE[A3520000]        <2> 	mov esi, tstack
  6737 00005257 8906                <2> 	mov [esi], eax
  6738 00005259 895E04              <2> 	mov [esi + 4], ebx
  6739 0000525C 894E08              <2> 	mov [esi + 8], ecx
  6740 0000525F 89560C              <2> 	mov [esi + 12], edx
  6741 00005262 897E10              <2> 	mov [esi + 16], edi
  6742 00005265 C3                  <2> 	ret
  6743                              <2> 	
  6744                              <2> tstackget1:
  6745 00005266 BE[A3520000]        <2> 	mov esi, tstack
  6746 0000526B 8B06                <2> 	mov eax, [esi]
  6747 0000526D 8B5E04              <2> 	mov ebx, [esi + 4]
  6748 00005270 8B4E08              <2> 	mov ecx, [esi + 8]
  6749 00005273 8B560C              <2> 	mov edx, [esi + 12]
  6750 00005276 8B7E10              <2> 	mov edi, [esi + 16]
  6751 00005279 8B7614              <2> 	mov esi, [esi + 20]
  6752 0000527C C3                  <2> 	ret
  6753                              <2> 	
  6754                              <2> tget1:
  6755 0000527D 66BA7000            <2> 	mov dx, 0x70
  6756 00005281 EE                  <2> 	out dx, al
  6757 00005282 6642                <2> 	inc dx
  6758 00005284 EC                  <2> 	in al, dx
  6759 00005285 664A                <2> 	dec dx
  6760 00005287 C3                  <2> 	ret
  6761                              <2> 	
  6762                              <2> tput1:
  6763 00005288 66C1E904            <2> 	shr cx, 4
  6764 0000528C B030                <2> 	mov al, 48
  6765 0000528E 00E8                <2> 	add al, ch
  6766 00005290 8806                <2> 	mov [esi], al
  6767 00005292 46                  <2> 	inc esi
  6768 00005293 B030                <2> 	mov al, 48
  6769 00005295 C0E904              <2> 	shr cl, 4
  6770 00005298 00C8                <2> 	add al, cl
  6771 0000529A 8806                <2> 	mov [esi], al
  6772 0000529C 81C602000000        <2> 	add esi, 2
  6773 000052A2 C3                  <2> 	ret
  6774                              <2> 		
  6775 000052A3 000000000000000000- <2> 	tstack dd 0,0,0,0,0,0
  6776 000052AC 000000000000000000- <2>
  6777 000052B5 000000000000        <2>
  6778 000052BB 00                  <2> 	RTCtimeSecond db 0
  6779 000052BC 00                  <2> 	RTCtimeMinute db 0
  6780 000052BD 00                  <2> 	RTCtimeHour db 0
  6781 000052BE 00                  <2> 	RTCtimeDay db 0
  6782 000052BF 00                  <2> 	RTCtimeMonth db 0
  6783 000052C0 00                  <2> 	RTCtimeYear db 0
  6784 000052C1 00                  <2> 	dayhex db 0
  6785 000052C2 00                  <2> 	monthhex db 0
  6786 000052C3 00                  <2> 	yearhex db 0
  6787 000052C4 30303A30303A303000  <2> 	timeshow db "00:00:00",0
  6788 000052CD 30302D30302D303030- <2> 	dateshow db "00-00-0000 ",0
  6789 000052D6 302000              <2>
  6790                              <2> 	oldcentury:	;;from 1700 to 1900
  6791 000052D9 040200              <2> 	db 4,2,0
  6792                              <2> 	century:	;;from 2000 to 2500
  6793 000052DC 060402000604        <2> 	db 6,4,2,0,6,4
  6794                              <2> 	month:
  6795 000052E2 000303060104060205- <2> 	db 0,3,3,6,1,4,6,2,5,0,3,5
  6796 000052EB 000305              <2>
  6797                              <2> 	day:
  6798 000052EE [0A530000]          <2> 	dd sunday
  6799 000052F2 [12530000]          <2> 	dd monday
  6800 000052F6 [1A530000]          <2> 	dd tuesday
  6801 000052FA [23530000]          <2> 	dd wednesday
  6802 000052FE [2E530000]          <2> 	dd thursday
  6803 00005302 [38530000]          <2> 	dd friday
  6804 00005306 [40530000]          <2> 	dd saturday
  6805                              <2> sunday:
  6806 0000530A 53756E6461790A00    <2> 	db "Sunday",10,0
  6807                              <2> monday:
  6808 00005312 4D6F6E6461790A00    <2> 	db "Monday",10,0
  6809                              <2> tuesday:
  6810 0000531A 547565736461790A00  <2> 	db "Tuesday",10,0
  6811                              <2> wednesday:
  6812 00005323 5765646E6573646179- <2> 	db "Wednesday",10,0
  6813 0000532C 0A00                <2>
  6814                              <2> thursday:
  6815 0000532E 54687572736461790A- <2> 	db "Thursday",10,0
  6816 00005337 00                  <2>
  6817                              <2> friday:
  6818 00005338 4672696461790A00    <2> 	db "Friday",10,0
  6819                              <2> saturday:
  6820 00005340 53617475726461790A- <2> 	db "Saturday",10,0
  6821 00005349 00                  <2>
  6822                              <1> %include 'source/programs/turnoff.asm'
  6823 0000534A FF2C7475726E6F6666- <2> 	db 255,44,"turnoff",0
  6824 00005353 00                  <2>
  6825                              <2> 	turnoff:
  6826 00005354 66BB[6F53]          <2> 			mov bx, shutdown
  6827 00005358 66891D[D70C0000]    <2> 			mov [realmodeptr], bx
  6828 0000535F BB[99530000]        <2> 			mov ebx, halt
  6829 00005364 891D[D30C0000]      <2> 			mov [realmodereturn], ebx
  6830 0000536A E94DB8FFFF          <2> 			jmp realmode
  6831                              <2> 
  6832                              <2> [BITS 16]
  6833                              <2> 		shutdown:
  6834 0000536F B453                <2> 			mov ah, 0x53
  6835 00005371 B004                <2> 			mov al, 4
  6836 00005373 31DB                <2> 			xor bx, bx
  6837 00005375 CD15                <2> 			int 0x15
  6838                              <2> 			
  6839 00005377 B453                <2> 			mov ah, 0x53
  6840 00005379 B001                <2> 			mov al, 1
  6841 0000537B 31DB                <2> 			xor bx, bx
  6842 0000537D CD15                <2> 			int 0x15
  6843                              <2> 			
  6844 0000537F B453                <2> 			mov ah, 0x53
  6845 00005381 B008                <2> 			mov al, 8
  6846 00005383 BB0100              <2> 			mov bx, 1
  6847 00005386 B90100              <2> 			mov cx, 1
  6848 00005389 CD15                <2> 			int 0x15
  6849                              <2> 			
  6850 0000538B B453                <2> 			mov ah, 0x53
  6851 0000538D B007                <2> 			mov al, 7
  6852 0000538F BB0100              <2> 			mov bx, 1
  6853 00005392 B90300              <2> 			mov cx, 3
  6854 00005395 CD15                <2> 			int 0x15
  6855 00005397 EBFE                <2> 			jmp $
  6856                              <2> 			[BITS 32]
  6857 00005399 EBFE                <2> halt: jmp $
  6858                              <1> %include 'source/programs/wait.asm'
  6859 0000539B FF2C7761697400      <2> db 255,44,"wait",0
  6860                              <2> waitkey:
  6861 000053A2 E879CFFFFF          <2> 		call getchar
  6862 000053A7 C3                  <2> 		ret
  6863                              <1> %include 'source/programs/while.asm'
  6864 000053A8 FF2C7768696C6500    <2> db 255,44,"while",0
  6865 000053B0 30C0                <2> whilecmd:  xor al, al
  6866 000053B2 3805[62260100]      <2> 	cmp [BATCHISON], al
  6867 000053B8 0F84E9E6FFFF        <2> 	je near notbatch
  6868 000053BE 8B35[5E260100]      <2> 	mov esi, [BATCHPOS]
  6869 000053C4 81EE02000000        <2> 	sub esi, 2
  6870 000053CA 4E                  <2> whilefnd: dec esi
  6871 000053CB 8A06                <2> 	mov al, [esi]
  6872 000053CD 3C0A                <2> 	cmp al, 10
  6873 000053CF 0F840A000000        <2> 	je near whilefnd2
  6874 000053D5 3C00                <2> 	cmp al, 0
  6875 000053D7 0F8402000000        <2> 	je near whilefnd2
  6876 000053DD EBEB                <2> 	jmp whilefnd
  6877                              <2> whilefnd2:
  6878 000053DF 46                  <2> 	inc esi
  6879 000053E0 8935[64260100]      <2> 	mov [LOOPPOS], esi
  6880 000053E6 C605[63260100]01    <2> 	mov BYTE [LOOPON], 1
  6881 000053ED BE[683A0100]        <2> 	mov esi, buftxt
  6882 000053F2 BB[683A0100]        <2> 	mov ebx, buftxt
  6883 000053F7 81C306000000        <2> 	add ebx, 6
  6884 000053FD E92CF2FFFF          <2> 	jmp chkeqsn
  6885                              <1> progend:		;programs end here	
  6886                              <1> batchprogend:
  6887                                  	%include "source/hardware.asm"
  6888                              <1> %ifdef gui.included
  6889                              <1> 	%include "source/drivers/video/vesa.asm"
  6890                              <2> [BITS 16]
  6891                              <2> guiswitch:
  6892 00005402 81F90000            <2> 	cmp cx, 0
  6893 00005406 750B                <2> 	jne guiswitchdefnum
  6894 00005408 B81200              <2> 	mov ax, 12h
  6895 0000540B 31DB                <2> 	xor bx, bx
  6896 0000540D CD10                <2> 	int 10h
  6897 0000540F E85100              <2> 	call guiloadagain
  6898                              <2> guiswitchnocando:
  6899 00005412 C3                  <2> 	ret	;return without switching as mode number is bad
  6900                              <2> guiswitchdefnum:	;switch to a defined mode number
  6901 00005413 B8004F              <2> 	mov ax, 0x4F00
  6902 00005416 BF[E055]            <2> 	mov di, VBEMODEBLOCK
  6903 00005419 CD10                <2> 	int 10h
  6904 0000541B BE[0256]            <2> 	mov si, reserved
  6905 0000541E 81EE0200            <2> 	sub si, 2
  6906                              <2> .loop:
  6907 00005422 81C60200            <2> 	add si, 2
  6908 00005426 81FE[E056]          <2> 	cmp si, oemdata
  6909 0000542A 74E6                <2> 	je guiswitchnocando
  6910 0000542C 813CFFFF            <2> 	cmp word [si], 0xFFFF
  6911 00005430 74E0                <2> 	je guiswitchnocando
  6912 00005432 390C                <2> 	cmp [si], cx
  6913 00005434 75EC                <2> 	jne .loop
  6914 00005436 8936[3A55]          <2> 	mov [videomodecache], si
  6915 0000543A 81C90040            <2> 	or cx, 0x4000	;make sure linear frame buffer is selected
  6916 0000543E B8014F              <2> 	mov ax, 0x4F01
  6917 00005441 BF[E057]            <2> 	mov di, VBEMODEINFOBLOCK
  6918 00005444 890E[3855]          <2> 	mov [vesamode], cx
  6919 00005448 CD10                <2> 	int 10h
  6920 0000544A E9CB00              <2> 	jmp selectedvesa
  6921                              <2> guiload:
  6922 0000544D BE[B855]            <2> 	mov si, bootmsg
  6923 00005450 E827AC              <2> 	call printrm
  6924 00005453 31C0                <2> 	xor ax, ax
  6925 00005455 CD16                <2> 	int 16h
  6926 00005457 3C79                <2> 	cmp al, "y"
  6927 00005459 0F85D7AB            <2> 	jne near vgaset
  6928 0000545D BE[768B]            <2> 	mov si, crlf
  6929 00005460 E817AC              <2> 	call printrm
  6930                              <2> guiloadagain:
  6931 00005463 B8004F              <2> 	mov ax, 04F00h
  6932 00005466 BF[E055]            <2> 	mov di, VBEMODEBLOCK
  6933 00005469 CD10                <2> 	int 10h
  6934 0000546B BE[0256]            <2> 	mov si, reserved
  6935 0000546E 81EE0200            <2> 	sub si, 2
  6936                              <2> findvideomodes:
  6937 00005472 81C60200            <2> 	add si, 2
  6938 00005476 8B0C                <2> 	mov cx, [si]
  6939 00005478 81F9FFFF            <2> 	cmp cx, 0xFFFF
  6940 0000547C 0F840A00            <2> 	je near nextvmode
  6941 00005480 81FE[E056]          <2> 	cmp si, oemdata
  6942 00005484 0F83ACAB            <2> 	jae near vgaset	;;kill if no valid list is found
  6943 00005488 EBE8                <2> 	jmp findvideomodes 	
  6944                              <2> ;;debug,shows vmodes available
  6945                              <2> nextvmode:
  6946 0000548A 81EE0200            <2> 	sub si, 2
  6947 0000548E 81FE[0256]          <2> 	cmp si, reserved
  6948 00005492 0F82CDFF            <2> 	jb near guiloadagain
  6949 00005496 8B0C                <2> 	mov cx, [si]
  6950 00005498 81F9FFFF            <2> 	cmp cx, 0xFFFF
  6951 0000549C 0F84EAFF            <2> 	je near nextvmode
  6952 000054A0 81C90040            <2> 	or cx, 0x4000 		;;Linear Frame Buffer
  6953 000054A4 B8014F              <2> 	mov ax, 04F01h
  6954 000054A7 BF[E057]            <2> 	mov di, VBEMODEINFOBLOCK
  6955 000054AA 890E[3855]          <2> 	mov [vesamode], cx
  6956 000054AE CD10                <2> 	int 10h
  6957 000054B0 A0[F957]            <2> 	mov al, [bitsperpixel]
  6958 000054B3 3C10                <2> 	cmp al, 16
  6959 000054B5 75D3                <2> 	jne nextvmode
  6960 000054B7 8936[3A55]          <2> 	mov [videomodecache], si
  6961 000054BB 84E4                <2> 	test ah, ah
  6962 000054BD 0F842200            <2> 	jz near setvesamode
  6963 000054C1 EBC7                <2> 	jmp nextvmode
  6964 000054C3 0A0D49732074686973- <2> isthisvideook db 10,13,"Is this video mode OK?(y/n)",13,10,0
  6965 000054CC 20766964656F206D6F- <2>
  6966 000054D5 6465204F4B3F28792F- <2>
  6967 000054DE 6E290D0A00          <2>
  6968                              <2> setvesamode:
  6969 000054E3 8B0E[F257]          <2> 	mov cx, [resolutionx]
  6970 000054E7 E85900              <2> 	call decshow
  6971 000054EA B078                <2> 	mov al, "x"
  6972 000054EC E8C100              <2> 	call char
  6973 000054EF 8B0E[F457]          <2> 	mov cx, [resolutiony]
  6974 000054F3 E84D00              <2> 	call decshow
  6975 000054F6 B040                <2> 	mov al, "@"
  6976 000054F8 E8B500              <2> 	call char
  6977 000054FB 31C9                <2> 	xor cx, cx
  6978 000054FD 8A0E[F957]          <2> 	mov cl, [bitsperpixel]
  6979 00005501 E83F00              <2> 	call decshow
  6980 00005504 BE[C354]            <2> 	mov si, isthisvideook
  6981 00005507 E870AB              <2> 	call printrm
  6982 0000550A 31C0                <2> 	xor ax, ax
  6983 0000550C CD16                <2> 	int 16h
  6984 0000550E 8B36[3A55]          <2> 	mov si, [videomodecache]
  6985 00005512 3C79                <2> 	cmp al, "y"
  6986 00005514 0F8572FF            <2> 	jne near nextvmode
  6987                              <2> selectedvesa:
  6988 00005518 8B16[F257]          <2> 	mov dx, [resolutionx]
  6989 0000551C 01D2                <2> 	add dx, dx
  6990 0000551E 8916[E058]          <2> 	mov [resolutionx2], dx
  6991 00005522 31D2                <2> 	xor dx, dx
  6992 00005524 31C9                <2> 	xor cx, cx
  6993 00005526 B8024F              <2> 	mov ax, 04F02h
  6994 00005529 8B1E[3855]          <2> 	mov bx, [vesamode]
  6995 0000552D CD10                <2> 	int 10h		;;enter VESA mode
  6996 0000552F C606[9C8B]01        <2> 	mov byte [guion], 1
  6997 00005534 E80DAB              <2> 	call getmemorysize;get the memory map after the video is initialized
  6998 00005537 C3                  <2> 	ret
  6999                              <2> 	
  7000 00005538 0000                <2> vesamode dw 0
  7001 0000553A 0000                <2> videomodecache dw 0
  7002                              <2> 
  7003 0000553C 0000000000          <2> dcnm db 0,0,0,0,0
  7004 00005541 0000                <2> dcnmend db 0,0
  7005                              <2> 
  7006                              <2> 
  7007                              <2> decshow:
  7008 00005543 BE[3C55]            <2> 	mov si, dcnm
  7009                              <2> decclear:
  7010 00005546 B030                <2> 	mov al, "0"
  7011 00005548 8804                <2> 	mov [si], al
  7012 0000554A 46                  <2> 	inc si
  7013 0000554B 81FE[4155]          <2> 	cmp si, dcnmend
  7014 0000554F 76F5                <2> 	jbe decclear
  7015 00005551 4E                  <2> 	dec si
  7016 00005552 E81500              <2> 	call convertrm
  7017 00005555 BE[3C55]            <2> 	mov si, dcnm
  7018                              <2> dectst:
  7019 00005558 8A04                <2> 	mov al, [si]
  7020 0000555A 46                  <2> 	inc si
  7021 0000555B 81FE[4155]          <2> 	cmp si, dcnmend
  7022 0000555F 7704                <2> 	ja dectstend
  7023 00005561 3C30                <2> 	cmp al, "0"
  7024 00005563 76F3                <2> 	jbe dectst
  7025                              <2> dectstend:
  7026 00005565 4E                  <2> 	dec si
  7027 00005566 E811AB              <2> 	call printrm
  7028 00005569 C3                  <2> 	ret
  7029                              <2> 	
  7030                              <2> 	
  7031                              <2> convertrm:
  7032 0000556A 4E                  <2> 	dec si
  7033 0000556B 89F3                <2> 	mov bx, si		;place to convert into must be in si, number to convert must be in cx
  7034                              <2> cnvrtrm:
  7035 0000556D 89DE                <2> 	mov si, bx
  7036 0000556F 81EE0300            <2> 	sub si, 3
  7037 00005573 46                  <2> ten3rm:	inc si
  7038 00005574 81F9E803            <2> 	cmp cx, 1000
  7039 00005578 7208                <2> 	jb ten2rm
  7040 0000557A 81E9E803            <2> 	sub cx, 1000
  7041 0000557E FE04                <2> 	inc byte [si]
  7042 00005580 EBEB                <2> 	jmp cnvrtrm
  7043 00005582 46                  <2> ten2rm:	inc si
  7044 00005583 81F96400            <2> 	cmp cx, 100
  7045 00005587 7208                <2> 	jb ten1rm
  7046 00005589 81E96400            <2> 	sub cx, 100
  7047 0000558D FE04                <2> 	inc byte [si]
  7048 0000558F EBDC                <2> 	jmp cnvrtrm
  7049 00005591 46                  <2> ten1rm:	inc si
  7050 00005592 81F90A00            <2> 	cmp cx, 10
  7051 00005596 7208                <2> 	jb ten0rm
  7052 00005598 81E90A00            <2> 	sub cx, 10
  7053 0000559C FE04                <2> 	inc byte [si]
  7054 0000559E EBCD                <2> 	jmp cnvrtrm
  7055 000055A0 46                  <2> ten0rm:	inc si
  7056 000055A1 81F90100            <2> 	cmp cx, 1
  7057 000055A5 7208                <2> 	jb tendnrm
  7058 000055A7 81E90100            <2> 	sub cx, 1
  7059 000055AB FE04                <2> 	inc byte [si]
  7060 000055AD EBBE                <2> 	jmp cnvrtrm
  7061                              <2> tendnrm:
  7062 000055AF C3                  <2> 	ret
  7063                              <2> 
  7064                              <2>     char: 		    ;char must be in al
  7065 000055B0 BB0700              <2>        mov bx, 07
  7066 000055B3 B40E                <2> 	   mov ah, 0Eh
  7067 000055B5 CD10                <2> 	   int 10h
  7068 000055B7 C3                  <2> 	   ret
  7069                              <2> 
  7070 000055B8 426F6F7420696E746F- <2> bootmsg:	db "Boot into the GUI?(y/n)",0
  7071 000055C1 20746865204755493F- <2>
  7072 000055CA 28792F6E2900        <2>
  7073                              <2> 
  7074                              <2> 
  7075                              <2> mcursor:
  7076 000055D0 01                  <2> 	db	00000001b
  7077 000055D1 81                  <2> 	db	10000001b
  7078 000055D2 C1                  <2> 	db	11000001b
  7079 000055D3 E1                  <2> 	db	11100001b
  7080 000055D4 F1                  <2> 	db	11110001b
  7081 000055D5 F9                  <2> 	db	11111001b
  7082 000055D6 FD                  <2> 	db	11111101b
  7083 000055D7 FF                  <2> 	db	11111111b
  7084 000055D8 F9                  <2> 	db	11111001b
  7085 000055D9 B9                  <2> 	db	10111001b
  7086 000055DA 39                  <2> 	db	00111001b
  7087 000055DB 1C                  <2> 	db	00011100b
  7088 000055DC 1C                  <2> 	db	00011100b
  7089 000055DD 0E                  <2> 	db	00001110b
  7090 000055DE 0E                  <2> 	db	00001110b
  7091 000055DF 0C                  <2> 	db	00001100b
  7092                              <2> mcursorend:
  7093                              <2> 
  7094                              <2> 
  7095                              <2> VBEMODEBLOCK:
  7096 000055E0 00<rept>            <2> vbesignature 		times  4 db 0 	;VBE Signature
  7097 000055E4 00<rept>            <2> vbeversion  		times  2 db 0	;VBE Version
  7098 000055E6 00<rept>            <2> oemstringptr  		times  4 db 0	;Pointer to OEM String
  7099 000055EA 00<rept>            <2> capabilities 		times  4 db 0	;Capabilities of graphics cont.
  7100 000055EE 00<rept>            <2> videomodeptr 		times  4 db 0	;Pointer to Video Mode List
  7101 000055F2 00<rept>            <2> totalmemory   		times  2 db 0	;number of 64Kb memory blocks
  7102 000055F4 00<rept>            <2> oemsoftwarerev  	times  2 db 0	;VBE implementation Software revision
  7103 000055F6 00<rept>            <2> oemvendornameptr 	times  4 db 0	;Pointer to Vendor Name String
  7104 000055FA 00<rept>            <2> oemproductnameptr 	times  4 db 0	;Pointer to Product Name String
  7105 000055FE 00<rept>            <2> oemproductrevptr 	times  4 db 0	;Pointer to Product Revision String
  7106 00005602 00<rept>            <2> reserved			times  222 db 0	;Reserved for VBE implementation scratch area
  7107 000056E0 00<rept>            <2> oemdata 			times  256 db 0	;Data Area for OEM Strings
  7108                              <2> 
  7109                              <2> VBEMODEINFOBLOCK:
  7110                              <2> ;Mandatory information for all VBE revision
  7111 000057E0 00<rept>            <2> modeattributes   	times  2 db 0	;Mode attributes
  7112 000057E2 00                  <2> winaattributes   	times  1 db 0	;Window A attributes
  7113 000057E3 00                  <2> winbattributes   	times  1 db 0	;Window B attributes
  7114 000057E4 00<rept>            <2> wingranularity   	times  2 db 0	;Window granularity
  7115 000057E6 00<rept>            <2> winsize          	times  2 db 0	;Window size
  7116 000057E8 00<rept>            <2> winasegment      	times  2 db 0	;Window A start segment
  7117 000057EA 00<rept>            <2> winbsegment      	times  2 db 0	;Window B start segment
  7118 000057EC 00<rept>            <2> winfuncptr       	times  4 db 0	;pointer to window function
  7119 000057F0 00<rept>            <2> bytesperscanline 	times  2 db 0	;Bytes per scan line
  7120                              <2> 
  7121                              <2> ;Mandatory information for VBE 1.2 and above
  7122 000057F2 00<rept>            <2> resolutionx     	times  2 db 0	;Horizontal resolution in pixel or chars
  7123 000057F4 00<rept>            <2> resolutiony	    	times  2 db 0	;Vertical resolution in pixel or chars
  7124 000057F6 00                  <2> xcharsize       	times  1 db 0	;Character cell width in pixel
  7125 000057F7 00                  <2> ycharsize       	times  1 db 0	;Character cell height in pixel
  7126 000057F8 00                  <2> numberofplanes  	times  1 db 0	;Number of memory planes
  7127 000057F9 00                  <2> bitsperpixel    	times  1 db 0	;Bits per pixel
  7128 000057FA 00                  <2> numberofbanks   	times  1 db 0	;Number of banks
  7129 000057FB 00                  <2> memorymodel     	times  1 db 0	;Memory model type
  7130 000057FC 00                  <2> banksize        	times  1 db 0	;Bank size in KB
  7131 000057FD 00                  <2> numberofimagepages	times  1 db 0	;Number of images
  7132 000057FE 00                  <2> reserved1       	times  1 db 0	;Reserved for page function
  7133                              <2> 
  7134                              <2> ;Direct Color fields (required for direct/6 and YUV/7 memory models)
  7135 000057FF 00                  <2> redmasksize			times  1 db 0	;Size of direct color red mask in bits
  7136 00005800 00                  <2> redfieldposition	times  1 db 0	;Bit position of lsb of red bask
  7137 00005801 00                  <2> greenmasksize   	times  1 db 0	;Size of direct color green mask in bits
  7138 00005802 00                  <2> greenfieldposition	times  1 db 0	;Bit position of lsb of green bask
  7139 00005803 00                  <2> bluemasksize		times  1 db 0	;Size of direct color blue mask in bits
  7140 00005804 00                  <2> bluefieldposition	times  1 db 0	;Bit position of lsb of blue bask
  7141 00005805 00                  <2> rsvdmasksize        times  1 db 0		;Size of direct color reserved mask in bits
  7142 00005806 00                  <2> rsvdfieldposition	times  1 db 0		;Bit position of lsb of reserved bask
  7143 00005807 00                  <2> directcolormodeinfo	times  1 db 0	;Direct color mode attributes
  7144                              <2> 
  7145                              <2> ;Mandatory information for VBE 2.0 and above
  7146 00005808 00<rept>            <2> physbaseptr 		times  4 db 0	;Physical address for flat frame buffer
  7147 0000580C 00<rept>            <2> offscreenmemoffset 	times  4 db 0	;Pointer to start of off screen memory
  7148 00005810 00<rept>            <2> offscreenmemsize 	times  2 db 0    ;Amount of off screen memory in 1Kb units
  7149 00005812 00<rept>            <2> reserved2 			times  206 db 0  ;Remainder of ModeInfoBlock
  7150                              <2> 
  7151 000058E0 00000000            <2> resolutionx2 dd 0	;this is not part of the VBE but is necessary GUI info
  7152                              <2> VBEEND:
  7153                              <2> [BITS 32]
  7154                              <1> 	%include "source/drivers/input/mouse.asm"
  7155 000058E4 00                  <2> mousedisabled db 0
  7156                              <2> 	
  7157                              <2> 	cursorgui:
  7158 000058E5 803D[8E860000]01    <2> 		cmp byte [mouseon], 1
  7159 000058EC 0F8432000000        <2> 		je near mousedaemon
  7160 000058F2 803D[9C8B0000]00    <2> 		cmp byte [guion], 0
  7161 000058F9 0F84D2040000        <2> 		je near entdown
  7162                              <2> 	initmouse:
  7163 000058FF 803D[9C8B0000]00    <2> 		cmp byte [guion], 0
  7164 00005906 7405                <2> 		je noswmsposinit
  7165 00005908 E84D130000          <2> 		call switchmousepos2
  7166                              <2> 	noswmsposinit:
  7167 0000590D E85D020000          <2> 	  	call PS2SET
  7168 00005912 E886020000          <2> 		call ACTMOUS
  7169 00005917 C605[8E860000]01    <2> 		mov byte [mouseon],1
  7170 0000591E E89F020000          <2> 		call GETB 	;;Get the responce byte of the mouse (like: Hey i am active)
  7171                              <2> 		;call GETB
  7172                              <2> 				;;If the bytes are mixed up,
  7173                              <2> 				;;remove this line or add another of this line.
  7174                              <2> 	nomouse:
  7175 00005923 C3                  <2> 		ret
  7176                              <2> 		
  7177                              <2> 	mousedaemon:
  7178 00005924 803D[8E860000]01    <2> 		cmp byte [mouseon], 1
  7179 0000592B 75D2                <2> 		jne initmouse
  7180 0000592D E464                <2> 		in al, 64h ; Status
  7181 0000592F A820                <2> 		test al, 20h ; PS2-Mouse?
  7182 00005931 0F8502000000        <2> 		jnz near moused
  7183 00005937 F4                  <2> 		hlt
  7184 00005938 C3                  <2> 		ret
  7185                              <2> 	moused:
  7186 00005939 803D[E4580000]01    <2> 		cmp byte [mousedisabled], 1
  7187 00005940 74E1                <2> 		je nomouse
  7188 00005942 E87B020000          <2> 		  call GETB
  7189 00005947 88C3                <2> 		  mov  bl, al
  7190 00005949 80E301              <2> 		  and  bl, 1
  7191 0000594C 881D[E75B0000]      <2> 		  mov  BYTE [LBUTTON], bl
  7192 00005952 88C3                <2> 		  mov  bl, al
  7193 00005954 80E302              <2> 		  and  bl, 2
  7194 00005957 D0EB                <2> 		  shr  bl, 1
  7195 00005959 881D[E85B0000]      <2> 		  mov  BYTE [RBUTTON], bl
  7196 0000595F 88C3                <2> 		  mov  bl, al
  7197 00005961 80E304              <2> 		  and  bl, 4
  7198 00005964 C0EB02              <2> 		  shr  bl, 2
  7199 00005967 881D[E95B0000]      <2> 		  mov  BYTE [MBUTTON], bl
  7200 0000596D E850020000          <2> 		  call GETB
  7201 00005972 A2[EA5B0000]        <2> 		  mov  BYTE [XCOORD], al
  7202 00005977 E846020000          <2> 		  call GETB
  7203 0000597C A2[EB5B0000]        <2> 		  mov  BYTE [YCOORD], al
  7204                              <2> 
  7205                              <2> 	showpixelcursor:
  7206 00005981 668B15[D65A0000]    <2> 		mov dx, [mousecursorposition]
  7207 00005988 668B0D[D85A0000]    <2> 		mov cx, [mousecursorposition + 2]
  7208 0000598F 668915[D25A0000]    <2> 		mov [lastmouseposition], dx
  7209 00005996 66890D[D45A0000]    <2> 		mov [lastmouseposition + 2], cx
  7210 0000599D A0[EA5B0000]        <2> 		mov al, [XCOORD]
  7211 000059A2 3C80                <2> 		cmp al, 128
  7212 000059A4 730C                <2> 		jae subxcoord
  7213 000059A6 00C0                <2> 		add al, al
  7214 000059A8 30E4                <2> 		xor ah, ah
  7215 000059AA 6601C2              <2> 		add dx, ax
  7216 000059AD E90B000000          <2> 		jmp subxcoorddn
  7217                              <2> 	subxcoord:
  7218 000059B2 00C0                <2> 		add al, al
  7219 000059B4 30DB                <2> 		xor bl, bl
  7220 000059B6 28C3                <2> 		sub bl, al
  7221 000059B8 30FF                <2> 		xor bh, bh
  7222 000059BA 6629DA              <2> 		sub dx, bx
  7223                              <2> 	subxcoorddn:
  7224 000059BD 8A1D[EB5B0000]      <2> 		mov bl, [YCOORD]
  7225 000059C3 30C0                <2> 		xor al, al
  7226 000059C5 28D8                <2> 		sub al, bl
  7227 000059C7 3C80                <2> 		cmp al, 128
  7228 000059C9 730A                <2> 		jae subycoord
  7229 000059CB 30E4                <2> 		xor ah, ah
  7230 000059CD 6601C1              <2> 		add cx, ax
  7231 000059D0 E909000000          <2> 		jmp subycoorddn
  7232                              <2> 	subycoord:
  7233 000059D5 30DB                <2> 		xor bl, bl
  7234 000059D7 28C3                <2> 		sub bl, al
  7235 000059D9 30FF                <2> 		xor bh, bh
  7236 000059DB 6629D9              <2> 		sub cx, bx
  7237                              <2> 	subycoorddn:
  7238 000059DE 6681FA204E          <2> 		cmp dx, 20000
  7239 000059E3 7603                <2> 		jbe nooriginx2
  7240 000059E5 6631D2              <2> 		xor dx, dx
  7241                              <2> 	nooriginx2:
  7242 000059E8 6681F9204E          <2> 		cmp cx, 20000
  7243 000059ED 7603                <2> 		jbe nooriginy2
  7244 000059EF 6631C9              <2> 		xor cx, cx
  7245                              <2> 	nooriginy2:
  7246 000059F2 6681FA0000          <2> 		cmp dx, 0
  7247 000059F7 7415                <2> 		je nofixxcolumn2
  7248 000059F9 663B15[E0580000]    <2> 		cmp dx, [resolutionx2]
  7249 00005A00 720C                <2> 		jb nofixxcolumn2
  7250 00005A02 668B15[E0580000]    <2> 		mov dx, [resolutionx2]
  7251 00005A09 6681EA0200          <2> 		sub dx, 2
  7252                              <2> 	nofixxcolumn2:
  7253 00005A0E 6681F90000          <2> 		cmp cx, 0
  7254 00005A13 7415                <2> 		je nofixyrow2
  7255 00005A15 663B0D[F4570000]    <2> 		cmp cx, [resolutiony]
  7256 00005A1C 720C                <2> 		jb nofixyrow2
  7257 00005A1E 668B0D[F4570000]    <2> 		mov cx, [resolutiony]
  7258 00005A25 6681E90100          <2> 		sub cx, 1
  7259                              <2> 	nofixyrow2:
  7260 00005A2A 668915[D65A0000]    <2> 		mov [mousecursorposition], dx
  7261 00005A31 66890D[D85A0000]    <2> 		mov [mousecursorposition + 2], cx
  7262 00005A38 803D[9C8B0000]00    <2> 		cmp byte [guion], 0
  7263 00005A3F 0F8495000000        <2> 		je near termmouse
  7264 00005A45 E8B0110000          <2> 		call switchmousepos ;;use dragging code to ensure proper icon drag
  7265 00005A4A 803D[E75B0000]01    <2> 		cmp byte [LBUTTON], 1
  7266 00005A51 0F84D5230000        <2> 		je near clickicon
  7267 00005A57 803D[E85B0000]01    <2> 		cmp byte [RBUTTON], 1
  7268 00005A5E 0F84C8230000        <2> 		je near clickicon
  7269 00005A64 A0[197E0000]        <2> 		mov al, [pbutton]
  7270 00005A69 C705[1C7E0000]0000- <2> 		mov dword [dragging], 0
  7271 00005A71 0000                <2>
  7272 00005A73 3C00                <2> 		cmp al, 0
  7273 00005A75 740F                <2> 		je nopreviousbutton
  7274 00005A77 E8E2100000          <2> 		call clearmousecursor
  7275 00005A7C E8D0140000          <2> 		call reloadallgraphics
  7276                              <2> 	windowtermcopyend:
  7277 00005A81 E8D4110000          <2> 		call switchmousepos2
  7278                              <2> 	nopreviousbutton:
  7279 00005A86 30C0                <2> 		xor al, al
  7280 00005A88 A2[197E0000]        <2> 		mov [pbutton], al
  7281 00005A8D A2[80830000]        <2> 		mov [windrag], al
  7282 00005A92 A0[E75B0000]        <2> 		mov al, [LBUTTON]
  7283 00005A97 A2[1A7E0000]        <2> 		mov [pLBUTTON], al
  7284 00005A9C A0[E85B0000]        <2> 		mov al, [RBUTTON]
  7285 00005AA1 A2[1B7E0000]        <2> 		mov [pRBUTTON], al
  7286 00005AA6 31D2                <2> 		xor edx, edx
  7287 00005AA8 668B15[D65A0000]    <2> 		mov dx, [mousecursorposition]
  7288 00005AAF 668B0D[D85A0000]    <2> 		mov cx, [mousecursorposition + 2]
  7289 00005AB6 66BB18C7            <2> 		mov bx, 1100011100011000b
  7290 00005ABA 66B80100            <2> 		mov ax, 1
  7291 00005ABE C605[167E0000]01    <2> 		mov byte [showcursorfonton], 1
  7292 00005AC5 E8591B0000          <2> 		call showfontvesa
  7293 00005ACA C605[167E0000]00    <2> 		mov byte [showcursorfonton], 0
  7294 00005AD1 C3                  <2> 		ret
  7295                              <2> 
  7296 00005AD2 00000000            <2> lastmouseposition dw 0,0
  7297 00005AD6 00000000            <2> mousecursorposition dw 0,0	
  7298                              <2> 
  7299                              <2> termmouse:
  7300 00005ADA BE[7E552900]        <2> 		mov esi, videobuf
  7301 00005ADF 31D2                <2> 		xor edx, edx
  7302 00005AE1 668B15[D25A0000]    <2> 		mov dx, [lastmouseposition]
  7303 00005AE8 668B0D[D45A0000]    <2> 		mov cx, [lastmouseposition + 2]
  7304 00005AEF 66A1[6D5B0000]      <2> 		mov ax, [cursorcache]
  7305 00005AF5 663D0000            <2> 		cmp ax, 0
  7306 00005AF9 7425                <2> 		je nocopycursorcache
  7307 00005AFB 66C1E104            <2> 		shl cx, 4
  7308 00005AFF 66C1E203            <2> 		shl dx, 3
  7309 00005B03 01D6                <2> 		add esi, edx
  7310 00005B05 6631D2              <2> 		xor dx, dx
  7311 00005B08 8A15[A0250000]      <2> 		mov dl, [charxy]
  7312 00005B0E 6641                <2> 		inc cx
  7313                              <2> termmousecplp1:
  7314 00005B10 01D6                <2> 		add esi, edx
  7315 00005B12 6649                <2> 		dec cx
  7316 00005B14 6681F90000          <2> 		cmp cx, 0
  7317 00005B19 75F5                <2> 		jne termmousecplp1
  7318 00005B1B 29D6                <2> 		sub esi, edx
  7319 00005B1D 668906              <2> 		mov [esi], ax
  7320                              <2> nocopycursorcache:
  7321 00005B20 BE[7E552900]        <2> 		mov esi, videobuf
  7322 00005B25 31D2                <2> 		xor edx, edx
  7323 00005B27 668B15[D65A0000]    <2> 		mov dx, [mousecursorposition]
  7324 00005B2E 668B0D[D85A0000]    <2> 		mov cx, [mousecursorposition + 2]
  7325 00005B35 66C1E104            <2> 		shl cx, 4
  7326 00005B39 66C1E203            <2> 		shl dx, 3
  7327 00005B3D 01D6                <2> 		add esi, edx
  7328 00005B3F 6631D2              <2> 		xor dx, dx
  7329 00005B42 8A15[A0250000]      <2> 		mov dl, [charxy]
  7330 00005B48 6641                <2> 		inc cx
  7331                              <2> termmousecplp2:
  7332 00005B4A 01D6                <2> 		add esi, edx
  7333 00005B4C 6649                <2> 		dec cx
  7334 00005B4E 6681F90000          <2> 		cmp cx, 0
  7335 00005B53 75F5                <2> 		jne termmousecplp2
  7336 00005B55 29D6                <2> 		sub esi, edx
  7337 00005B57 668B06              <2> 		mov ax, [esi]
  7338 00005B5A 66A3[6D5B0000]      <2> 		mov [cursorcache], ax
  7339 00005B60 B080                <2> 		mov al, 128
  7340 00005B62 B407                <2> 		mov ah, 7
  7341 00005B64 668906              <2> 		mov [esi], ax
  7342 00005B67 E846CDFFFF          <2> 		call termcopy
  7343 00005B6C C3                  <2> 		ret
  7344 00005B6D 0000                <2> cursorcache db 0,0
  7345                              <2> 
  7346                              <2> PS2SET:
  7347 00005B6F B0A8                <2>   mov  al, 0xa8		; enable mouse port
  7348 00005B71 E664                <2>   out  0x64, al		; write to keyboardcontroller
  7349 00005B73 E801000000          <2>   call CHKPRT		; check if command is progressed (demand!)
  7350 00005B78 C3                  <2> ret
  7351                              <2> 
  7352                              <2> CHKPRT:
  7353 00005B79 66B96400            <2>   mov  cx, 100
  7354                              <2>  .again:
  7355 00005B7D E464                <2>   in   al, 0x64		; read from keyboardcontroller
  7356 00005B7F A802                <2>   test al, 2		; Check if input buffer is empty
  7357 00005B81 7402                <2>   je .go
  7358 00005B83 E2F8                <2>   loop .again
  7359                              <2>  .go:
  7360 00005B85 C3                  <2> ret
  7361                              <2> 
  7362                              <2> WMOUS:
  7363 00005B86 B0D4                <2>   mov  al, 0xd4		; write to mouse device instead of to keyboard
  7364 00005B88 E664                <2>   out  0x64, al		; write to keyboardcontroller
  7365 00005B8A E8EAFFFFFF          <2>   call CHKPRT		; check if command is progressed (demand!)
  7366 00005B8F C3                  <2> ret
  7367                              <2> 
  7368                              <2> MBUFFUL:
  7369 00005B90 66B96400            <2>   mov cx, 100
  7370                              <2>  .mn:
  7371 00005B94 E464                <2>   in   al, 0x64		; read from keyboardcontroller
  7372 00005B96 A820                <2>   test al, 0x20		; check if mouse output buffer is full
  7373 00005B98 7402                <2>   jz  .mnn
  7374 00005B9A E2F8                <2>   loop .mn
  7375                              <2>  .mnn:
  7376 00005B9C C3                  <2> ret
  7377                              <2> 
  7378                              <2> 
  7379                              <2> ACTMOUS:
  7380 00005B9D E8E4FFFFFF          <2>   call WMOUS
  7381 00005BA2 B0F4                <2>   mov  al, 0xf4 	; Command to activate mouse itselve (Stream mode)
  7382 00005BA4 E660                <2>   out  0x60, al		; write ps/2 controller output port (activate mouse)
  7383 00005BA6 E8CEFFFFFF          <2>   call CHKPRT		; check if command is progressed (demand!)
  7384 00005BAB E801000000          <2>   call CHKMOUS		; check if a byte is available
  7385 00005BB0 C3                  <2> ret
  7386                              <2> 
  7387                              <2> CHKMOUS:
  7388 00005BB1 B300                <2>   mov  bl, 0
  7389 00005BB3 66B96400            <2>   mov cx, 100
  7390                              <2>  .vrd:
  7391 00005BB7 E464                <2>   in   al, 0x64		; read from keyboardcontroller
  7392 00005BB9 A801                <2>   test al, 1		; check if controller buffer (60h) has data
  7393 00005BBB 7504                <2>   jnz .yy
  7394 00005BBD E2F8                <2>   loop .vrd
  7395 00005BBF B301                <2>   mov  bl, 1
  7396                              <2>  .yy:
  7397 00005BC1 C3                  <2> ret
  7398                              <2> 
  7399                              <2> GETB:
  7400                              <2>  .cagain:
  7401 00005BC2 E8EAFFFFFF          <2>   call CHKMOUS		; check if a byte is available
  7402 00005BC7 08DB                <2>   or bl, bl
  7403 00005BC9 75F7                <2>   jnz .cagain
  7404 00005BCB B0AD                <2>   mov  al, 0xad		; Disable Keyboard
  7405 00005BCD E664                <2>   out  0x64, al		; write to keyboardcontroller
  7406 00005BCF E8A5FFFFFF          <2>   call CHKPRT		; check if command is progressed (demand!)
  7407 00005BD4 6631C0              <2>   xor  ax, ax
  7408 00005BD7 E460                <2>   in   al, 0x60		; read ps/2 controller output port (mousebyte)
  7409 00005BD9 88C2                <2>   mov  dl, al
  7410 00005BDB B0AE                <2>   mov  al, 0xae		; Enable Keyboard
  7411 00005BDD E664                <2>   out  0x64, al		; write to keyboardcontroller
  7412 00005BDF E895FFFFFF          <2>   call CHKPRT		; check if command is progressed (demand!)
  7413 00005BE4 88D0                <2>   mov  al, dl
  7414 00005BE6 C3                  <2> ret
  7415                              <2> 
  7416 00005BE7 00                  <2> LBUTTON db 0x00	;	Left   button status 1=PRESSED 0=RELEASED
  7417 00005BE8 00                  <2> RBUTTON db 0x00	;	Right  button status 1=PRESSED 0=RELEASED
  7418 00005BE9 00                  <2> MBUTTON db 0x00	;	Middle button status 1=PRESSED 0=RELEASED
  7419 00005BEA 00                  <2> XCOORD  db 0x00	;	the moved distance  (horizontal)
  7420 00005BEB 00                  <2> YCOORD  db 0x00	;	the moved distance  (vertical)
  7421                              <1> %endif
  7422                              <1> %include "source/drivers/sound/pcspkr.asm"
  7423                              <2> ;PC Speaker Drivers
  7424                              <2> PCSpeakerRAW:
  7425 00005BEC 60                  <2> 	pusha
  7426                              <2> nosoundrep:
  7427 00005BED 8B35[6B020000]      <2> 	mov esi, [soundpos]
  7428 00005BF3 31C9                <2> 	xor ecx, ecx
  7429 00005BF5 668B0D[69020000]    <2> 	mov cx, [soundrepititions]
  7430 00005BFC 6681F90000          <2> 	cmp cx, 0
  7431 00005C01 0F8548000000        <2> 	jne near donesetpitch
  7432 00005C07 668B0E              <2> 	mov cx, [esi]
  7433 00005C0A 668B5E02            <2> 	mov bx, [esi + 2]
  7434 00005C0E 66890D[69020000]    <2> 	mov [soundrepititions], cx
  7435 00005C15 81C604000000        <2> 	add esi, 4
  7436 00005C1B 8935[6B020000]      <2> 	mov [soundpos], esi
  7437 00005C21 3B35[6F020000]      <2> 	cmp esi, [soundendpos]
  7438 00005C27 7735                <2> 	ja stopsound
  7439 00005C29 66813D[69020000]00- <2> 	cmp word [soundrepititions], 0
  7440 00005C31 00                  <2>
  7441 00005C32 74B9                <2> 	je nosoundrep
  7442 00005C34 6681FB0000          <2> 	cmp bx, 0
  7443 00005C39 740F                <2> 	je nosoundplay
  7444 00005C3B E840000000          <2> 	call setpitch
  7445 00005C40 E849000000          <2> 	call startsound
  7446 00005C45 E905000000          <2> 	jmp donesetpitch
  7447                              <2> nosoundplay:
  7448 00005C4A E846000000          <2> 	call killsound
  7449                              <2> donesetpitch:
  7450 00005C4F 6649                <2> 	dec cx
  7451 00005C51 66890D[69020000]    <2> 	mov [soundrepititions], cx
  7452 00005C58 61                  <2> 	popa
  7453 00005C59 E94AA6FFFF          <2> 	jmp timerinterrupt
  7454                              <2> stopsound:
  7455 00005C5E 31C0                <2> 	xor eax, eax
  7456 00005C60 66A3[69020000]      <2> 	mov [soundrepititions], ax
  7457 00005C66 A2[68020000]        <2> 	mov [soundon], al
  7458 00005C6B A3[6B020000]        <2> 	mov [soundpos], eax
  7459 00005C70 A3[6F020000]        <2> 	mov [soundendpos], eax
  7460 00005C75 E81B000000          <2> 	call killsound
  7461 00005C7A 61                  <2> 	popa
  7462 00005C7B E928A6FFFF          <2> 	jmp timerinterrupt
  7463                              <2> 
  7464                              <2> 
  7465                              <2> setpitch:
  7466 00005C80 B0B6                <2> 	mov al, 0xB6
  7467 00005C82 E643                <2> 	out 0x43, al
  7468 00005C84 6689D8              <2> 	mov ax, bx
  7469 00005C87 E642                <2> 	out 0x42, al
  7470 00005C89 88E0                <2> 	mov al, ah
  7471 00005C8B E642                <2> 	out 0x42, al
  7472 00005C8D C3                  <2> 	ret
  7473                              <2> startsound:
  7474 00005C8E E461                <2> 	in al, 0x61
  7475 00005C90 0C03                <2> 	or al, 3
  7476 00005C92 E661                <2> 	out 0x61, al
  7477 00005C94 C3                  <2> 	ret
  7478                              <2> killsound:
  7479 00005C95 E461                <2> 	in al, 0x61
  7480 00005C97 24FC                <2> 	and al, 0xFC
  7481 00005C99 E661                <2> 	out 0x61, al
  7482 00005C9B C3                  <2> 	ret
  7483                              <2> 	
  7484                              <1> %ifdef sound.included
  7485                              <1> 	%include "source/drivers/sound/sblaster.asm"
  7486                              <1> %endif
  7487                              <1> %ifdef io.serial
  7488                              <1> 	%include "source/drivers/input/serial.asm"
  7489                              <1> %else
  7490                              <1> 	%include "source/drivers/input/keyboard.asm"
  7491 00005C9C 00                  <2> specialkey db 0
  7492                              <2> ;charregion db 0
  7493                              <2> waitforinput:		;this is basically the idle process
  7494                              <2> 					;this halts the cpu for a small amount of time and then sees if there was a keypress
  7495                              <2> 					;this lets the cpu stay at close to 0% instead of 100%
  7496 00005C9D 6631C0              <2> 	xor ax, ax
  7497 00005CA0 A0[E0670000]        <2> 	mov al, [threadson]
  7498 00005CA5 8825[E0670000]      <2> 	mov [threadson], ah
  7499 00005CAB FB                  <2> 	sti
  7500 00005CAC F4                  <2> 	hlt
  7501 00005CAD A2[E0670000]        <2> 	mov [threadson], al
  7502 00005CB2 66813D[84230000]00- <2> 	cmp word [trans], 0
  7503 00005CBA 00                  <2>
  7504 00005CBB 7401                <2> 	je getkey
  7505 00005CBD C3                  <2> 	ret
  7506                              <2> getkey:
  7507 00005CBE 31C0                <2> 		xor eax, eax
  7508 00005CC0 A2[9C5C0000]        <2> 		mov [specialkey], al
  7509 00005CC5 A3[80230000]        <2> 		mov [lastkey], eax
  7510 00005CCA E464                <2> 		in al, 64h ; Status
  7511                              <2> 	%ifdef gui.included
  7512 00005CCC A820                <2> 		test al, 20h ; PS2-Mouse?
  7513 00005CCE 0F8565FCFFFF        <2> 		jnz near moused
  7514                              <2> 	%endif
  7515 00005CD4 A801                <2> 		test al, 1 
  7516 00005CD6 74C5                <2> 		jz waitforinput ; if output buffer full or no keypress, jump to idle process
  7517                              <2> 	calckey:
  7518 00005CD8 E460                <2> 		in al, 60h
  7519 00005CDA 30E4                <2> 		xor ah, ah
  7520 00005CDC 6689C3              <2> 		mov bx, ax
  7521 00005CDF 66A3[82230000]      <2> 		mov [lastkey + 2], ax
  7522 00005CE5 BF[745E0000]        <2> 		mov edi, scancode
  7523                              <2> 	searchscan: 
  7524 00005CEA 80FB3A              <2> 		cmp bl, 3Ah
  7525 00005CED 7314                <2> 		jae scanother
  7526 00005CEF C1E004              <2> 		shl eax, 4
  7527 00005CF2 01C7                <2> 		add edi, eax
  7528 00005CF4 668B07              <2> 		mov ax, [edi]
  7529 00005CF7 663D0000            <2> 		cmp ax, 0
  7530 00005CFB 7406                <2> 		je scanother
  7531 00005CFD E9D0000000          <2> 		jmp scanfound
  7532 00005D02 00                  <2> uppercase db 0
  7533                              <2> scanother:
  7534 00005D03 6631C0              <2> 		xor ax, ax
  7535 00005D06 66A3[80230000]      <2> 		mov [lastkey], ax
  7536 00005D0C 80FBE0              <2> 		cmp bl, 0E0h
  7537 00005D0F 0F8477000000        <2> 		je near getkeyspecial
  7538 00005D15 803D[9C5C0000]E0    <2> 		cmp byte [specialkey], 0xE0
  7539 00005D1C 7525                <2> 		jne nospecialkey
  7540 00005D1E 80FB38              <2> 		cmp bl, 38h
  7541 00005D21 0F849A000000        <2> 		je near alton
  7542 00005D27 80FBB8              <2> 		cmp bl, 0B8h
  7543 00005D2A 0F8499000000        <2> 		je near altoff
  7544 00005D30 80FB1D              <2> 		cmp bl, 1Dh
  7545 00005D33 0F8478000000        <2> 		je near ctron
  7546 00005D39 80FB9D              <2> 		cmp bl, 9Dh
  7547 00005D3C 0F8477000000        <2> 		je near ctroff
  7548 00005D42 C3                  <2> 		ret
  7549                              <2> nospecialkey:
  7550 00005D43 80FB2A              <2> 		cmp bl, 2Ah
  7551 00005D46 0F8455000000        <2> 		je near shifton
  7552 00005D4C 80FB36              <2> 		cmp bl, 36h
  7553 00005D4F 0F844C000000        <2> 		je near shifton
  7554 00005D55 80FB1C              <2> 		cmp bl, 1Ch
  7555 00005D58 0F8473000000        <2> 		je near entdown
  7556 00005D5E 80FBAA              <2> 		cmp bl, 0AAh
  7557 00005D61 0F8442000000        <2> 		je near shiftoff
  7558 00005D67 80FBB6              <2> 		cmp bl, 0B6h
  7559 00005D6A 0F8439000000        <2> 		je near shiftoff
  7560 00005D70 80FB3A              <2> 		cmp bl, 3Ah
  7561 00005D73 0F84A7000000        <2> 		je near capslock
  7562 00005D79 80FB45              <2> 		cmp bl, 0x45
  7563 00005D7C 0F84AF000000        <2> 		je near numlock
  7564 00005D82 80FB46              <2> 		cmp bl, 0x46
  7565 00005D85 0F84BE000000        <2> 		je near scrolllock
  7566 00005D8B C3                  <2> 		ret
  7567                              <2> 	getkeyspecial:
  7568 00005D8C C605[9C5C0000]E0    <2> 		mov byte [specialkey], 0xE0
  7569 00005D93 E940FFFFFF          <2> 		jmp calckey
  7570                              <2> 	shift:
  7571 00005D98 A0[025D0000]        <2> 		mov al, [uppercase]
  7572 00005D9D 3C01                <2> 		cmp al, 1
  7573 00005D9F 7308                <2> 		jae shiftoff
  7574                              <2> 	shifton:
  7575 00005DA1 C605[025D0000]01    <2> 		mov byte [uppercase], 1
  7576 00005DA8 C3                  <2> 		ret
  7577                              <2> 	shiftoff:
  7578 00005DA9 C605[025D0000]00    <2> 		mov byte [uppercase], 0
  7579 00005DB0 C3                  <2> 		ret
  7580                              <2> 	ctron:
  7581 00005DB1 C605[1F5E0000]01    <2> 		mov byte [ctrkey], 1
  7582 00005DB8 C3                  <2> 		ret
  7583                              <2> 	ctroff:
  7584 00005DB9 C605[1F5E0000]00    <2> 		mov byte [ctrkey], 0
  7585 00005DC0 C3                  <2> 		ret
  7586                              <2> 	alton:
  7587 00005DC1 C605[1E5E0000]01    <2> 		mov byte [altkey], 1
  7588 00005DC8 C3                  <2> 		ret
  7589                              <2> 	altoff:
  7590 00005DC9 C605[1E5E0000]00    <2> 		mov byte [altkey], 0
  7591 00005DD0 C3                  <2> 		ret
  7592                              <2> 	entdown:
  7593 00005DD1 C3                  <2> 		ret
  7594                              <2> scanfound:
  7595 00005DD2 81C708000000        <2> 		add edi, 8
  7596 00005DD8 803D[1F5E0000]01    <2> 		cmp byte [ctrkey], 1
  7597 00005DDF 7306                <2> 		jae ctrlin
  7598 00005DE1 81EF08000000        <2> 		sub edi, 8
  7599                              <2> 	ctrlin:
  7600 00005DE7 81C704000000        <2> 		add edi, 4
  7601 00005DED 803D[1E5E0000]01    <2> 		cmp byte [altkey], 1
  7602 00005DF4 7306                <2> 		jae altin
  7603 00005DF6 81EF04000000        <2> 		sub edi, 4
  7604                              <2> 	altin:
  7605 00005DFC 81C702000000        <2> 		add edi, 2
  7606 00005E02 803D[025D0000]01    <2> 		cmp byte [uppercase], 1
  7607 00005E09 7306                <2> 		jae uppercaseon
  7608 00005E0B 81EF02000000        <2> 		sub edi, 2
  7609                              <2> 	uppercaseon:
  7610 00005E11 668B07              <2> 		mov ax,[edi]
  7611 00005E14 66A3[80230000]      <2> 		mov [lastkey], ax
  7612 00005E1A C3                  <2> 		ret
  7613                              <2> 		
  7614 00005E1B 00                  <2> keyboardstatus db 0
  7615 00005E1C 00                  <2> numlockstatus db 0
  7616 00005E1D 00                  <2> scrolllockstatus db 0
  7617 00005E1E 00                  <2> altkey db 0
  7618 00005E1F 00                  <2> ctrkey db 0
  7619                              <2> 	capslock:
  7620 00005E20 8035[1B5E0000]04    <2> 		xor byte [keyboardstatus], 00000100b
  7621 00005E27 E835000000          <2> 		call updatekblights
  7622 00005E2C E967FFFFFF          <2> 		jmp shift
  7623                              <2> 		
  7624                              <2> 	numlock:
  7625 00005E31 8035[1B5E0000]02    <2> 		xor byte [keyboardstatus], 00000010b
  7626 00005E38 8035[1C5E0000]01    <2> 		xor byte [numlockstatus], 1
  7627 00005E3F E81D000000          <2> 		call updatekblights
  7628 00005E44 E975FEFFFF          <2> 		jmp getkey
  7629                              <2> 	
  7630                              <2> 	scrolllock:
  7631 00005E49 8035[1B5E0000]01    <2> 		xor byte [keyboardstatus], 00000001b
  7632 00005E50 8035[1D5E0000]01    <2> 		xor byte [scrolllockstatus], 1
  7633 00005E57 E805000000          <2> 		call updatekblights
  7634 00005E5C E95DFEFFFF          <2> 		jmp getkey
  7635                              <2> 		
  7636                              <2> 	updatekblights:
  7637 00005E61 B0ED                <2> 		mov al, 0xED
  7638 00005E63 66BA6000            <2> 		mov dx, 0x60
  7639 00005E67 EE                  <2> 		out dx, al
  7640                              <2> 	chkkbdack:
  7641 00005E68 EC                  <2> 		in al, dx
  7642 00005E69 3CFA                <2> 		cmp al, 0xFA
  7643 00005E6B 75FB                <2> 		jne chkkbdack
  7644 00005E6D A0[1B5E0000]        <2> 		mov al, [keyboardstatus]
  7645 00005E72 EE                  <2> 		out dx, al
  7646 00005E73 C3                  <2> 		ret
  7647                              <2> 		
  7648                              <2> scancode:
  7649                              <2> 	;key, KEY, alt key, ALT KEY, ctrl key, CTRL KEY, ctrl-alt, CTRL-ALT
  7650 00005E74 000000000000000000- <2> 	dw 0,0,0,0,0,0,0,0
  7651 00005E7D 00000000000000      <2>
  7652 00005E84 000000000000000000- <2> 	dw 0,0,0,0,0,0,0,0
  7653 00005E8D 00000000000000      <2>
  7654 00005E94 31002100A1003C2000- <2> 	dw '1','!',0xA1,0x203C,0,0,0,0
  7655 00005E9D 00000000000000      <2>
  7656 00005EA4 32004000B2001A2200- <2> 	dw '2','@',0xB2,0x221A,0,0,0,0
  7657 00005EAD 00000000000000      <2>
  7658 00005EB4 33002300B3002B2200- <2> 	dw '3','#',0xB3,0x222B,0,0,0,0
  7659 00005EBD 00000000000000      <2>
  7660 00005EC4 34002400A300A20000- <2> 	dw '4','$',0xA3,0xA2,0,0,0,0
  7661 00005ECD 00000000000000      <2>
  7662 00005ED4 35002500AC20000000- <2> 	dw '5','%',0x20AC,0,0,0,0,0
  7663 00005EDD 00000000000000      <2>
  7664 00005EE4 36005E00BC007F2000- <2> 	dw '6','^',0xBC,0x207F,0,0,0,0
  7665 00005EED 00000000000000      <2>
  7666 00005EF4 37002600BD00000000- <2> 	dw '7','&',0xBD,0,0,0,0,0
  7667 00005EFD 00000000000000      <2>
  7668 00005F04 38002A001E22950000- <2> 	dw '8','*',0x221E,0x95,0,0,0,0
  7669 00005F0D 00000000000000      <2>
  7670 00005F14 39002800AE00990000- <2> 	dw '9','(',0xAE,0x99,0,0,0,0
  7671 00005F1D 00000000000000      <2>
  7672 00005F24 30002900A900000000- <2> 	dw '0',')',0xA9,0,0,0,0,0
  7673 00005F2D 00000000000000      <2>
  7674 00005F34 2D005F00A500B10000- <2> 	dw '-','_',0xA5,0xB1,0,0,0,0
  7675 00005F3D 00000000000000      <2>
  7676 00005F44 3D002B00F700482200- <2> 	dw '=','+',0xF7,0x2248,0,0,0,0
  7677 00005F4D 00000000000000      <2>
  7678 00005F54 080008000000000000- <2> 	dw 8,8,0,0,0,0,0,0
  7679 00005F5D 00000000000000      <2>
  7680 00005F64 000000000000000000- <2> 	dw 0,0,0,0,0,0,0,0
  7681 00005F6D 00000000000000      <2>
  7682 00005F74 71005100E400C4003B- <2> 	dw 'q','Q',0xE4,0xC4,';',':',0x439,0x419
  7683 00005F7C 003A0039041904      <2>
  7684 00005F84 77005700E500C500C2- <2> 	dw 'w','W',0xE5,0xC5,0x3C2,0,0x446,0x426
  7685 00005F8D 03000046042604      <2>
  7686 00005F94 65004500E900C900B5- <2> 	dw 'e','E',0xE9,0xC9,0x3B5,0x395,0x443,0x423
  7687 00005F9D 03950343042304      <2>
  7688 00005FA4 72005200EB00E800C1- <2> 	dw 'r','R',0xEB,0xE8,0x3C1,0x3A1,0x43A,0x41A
  7689 00005FAD 03A1033A041A04      <2>
  7690 00005FB4 74005400FC00DC00C4- <2> 	dw 't','T',0xFC,0xDC,0x3C4,0x3A4,0x435,0x415
  7691 00005FBD 03A40335041504      <2>
  7692 00005FC4 79005900FF009F00C5- <2> 	dw 'y','Y',0xFF,0x9F,0x3C5,0x3A5,0x43D,0x41D
  7693 00005FCD 03A5033D041D04      <2>
  7694 00005FD4 75005500FA00F900B8- <2> 	dw 'u','U',0xFA,0xF9,0x3B8,0x398,0x433,0x413
  7695 00005FDD 03980333041304      <2>
  7696 00005FE4 69004900ED00EC00B9- <2> 	dw 'i','I',0xED,0xEC,0x3B9,0x399,0x448,0x428
  7697 00005FED 03990348042804      <2>
  7698 00005FF4 6F004F00F300F200BF- <2> 	dw 'o','O',0xF3,0xF2,0x3BF,0x39F,0x449,0x429
  7699 00005FFD 039F0349042904      <2>
  7700 00006004 70005000F600D600C0- <2> 	dw 'p','P',0xF6,0xD6,0x3C0,0x3A0,0x437,0x417
  7701 0000600D 03A00337041704      <2>
  7702 00006014 5B007B00AB00000000- <2> 	dw '[','{',0xAB,0,0,0,0x445,0x425
  7703 0000601D 00000045042504      <2>
  7704 00006024 5D007D00BB00000000- <2> 	dw ']','}',0xBB,0,0,0,0x44A,0x42A
  7705 0000602D 0000004A042A04      <2>
  7706 00006034 000000000000000000- <2> 	dw 0,0,0,0,0,0,0,0
  7707 0000603D 00000000000000      <2>
  7708 00006044 000000000000000000- <2> 	dw 0,0,0,0,0,0,0,0
  7709 0000604D 00000000000000      <2>
  7710 00006054 61004100E100E000B1- <2> 	dw 'a','A',0xE1,0xE0,0x3B1,0x391,0x444,0x424
  7711 0000605D 03910344042404      <2>
  7712 00006064 73005300A7000000C3- <2> 	dw 's','S',0xA7,0,0x3C3,0x3A3,0x44B,0x42B
  7713 0000606D 03A3034B042B04      <2>
  7714 00006074 64004400B0000000B4- <2> 	dw 'd','D',0xB0,0,0x3B4,0x394,0x432,0x412
  7715 0000607D 03940332041204      <2>
  7716 00006084 6600460083004026C6- <2> 	dw 'f','F',0x83,0x2640,0x3C6,0x3A6,0x430,0x410
  7717 0000608D 03A60330041004      <2>
  7718 00006094 6700470000000000B3- <2> 	dw 'g','G',0,0,0x3B3,0x393,0x43F,0x41F
  7719 0000609D 0393033F041F04      <2>
  7720 000060A4 6800480000000000B7- <2> 	dw 'h','H',0,0,0x3B7,0x397,0x440,0x420
  7721 000060AD 03970340042004      <2>
  7722 000060B4 6A004A0000000000BE- <2> 	dw 'j','J',0,0,0x3BE,0x39E,0x43E,0x41E
  7723 000060BD 039E033E041E04      <2>
  7724 000060C4 6B004B0000000000BA- <2> 	dw 'k','K',0,0,0x3BA,0x39A,0x43B,0x41B
  7725 000060CD 039A033B041B04      <2>
  7726 000060D4 6C004C0000000000BB- <2> 	dw 'l','L',0,0,0x3BB,0x39B,0x434,0x414
  7727 000060DD 039B0334041404      <2>
  7728 000060E4 3B003A00B6000E2200- <2> 	dw ';',':',0xB6,0x220E,0,0,0x436,0x416
  7729 000060ED 00000036041604      <2>
  7730 000060F4 270022000000000000- <2> 	dw "'",'"',0,0,0,0,0x44D,0x42D
  7731 000060FD 0000004D042D04      <2>
  7732 00006104 60007E000000000000- <2> 	dw '`','~',0,0,0,0,0x451,0x401
  7733 0000610D 00000051040104      <2>
  7734 00006114 000000000000000000- <2> 	dw 0,0,0,0,0,0,0,0
  7735 0000611D 00000000000000      <2>
  7736 00006124 5C007C00AC00A60000- <2> 	dw "\",'|',0xAC,0xA6,0,0,"/","\"
  7737 0000612D 0000002F005C00      <2>
  7738 00006134 7A005A00E600C600B6- <2> 	dw 'z','Z',0xE6,0xC6,0x3B6,0x396,0x44F,0x42F
  7739 0000613D 0396034F042F04      <2>
  7740 00006144 7800580000000000C7- <2> 	dw 'x','X',0,0,0x3C7,0x3A7,0x447,0x427
  7741 0000614D 03A70347042704      <2>
  7742 00006154 63004300E700C700C8- <2> 	dw 'c','C',0xE7,0xC7,0x3C8,0x3A8,0x441,0x421
  7743 0000615D 03A80341042104      <2>
  7744 00006164 7600560000000000C9- <2> 	dw 'v','V',0,0,0x3C9,0x3A9,0x43C,0x41C
  7745 0000616D 03A9033C041C04      <2>
  7746 00006174 6200420000000000B2- <2> 	dw 'b','B',0,0,0x3B2,0x392,0x438,0x418
  7747 0000617D 03920338041804      <2>
  7748 00006184 6E004E00F100D100BD- <2> 	dw 'n','N',0xF1,0xD1,0x3BD,0x39D,0x442,0x422
  7749 0000618D 039D0342042204      <2>
  7750 00006194 6D004D006C264226BC- <2> 	dw 'm','M',0x266C,0x2642,0x3BC,0x39C,0x44C,0x42C
  7751 0000619D 039C034C042C04      <2>
  7752 000061A4 2C003C006422000000- <2> 	dw ',','<',0x2264,0,0,0,0x431,0x411
  7753 000061AD 00000031041104      <2>
  7754 000061B4 2E003E006522000000- <2> 	dw '.','>',0x2265,0,0,0,0x44E,0x42E
  7755 000061BD 0000004E042E04      <2>
  7756 000061C4 2F003F00BF00000000- <2> 	dw '/','?',0xBF,0,0,0,'.',','
  7757 000061CD 0000002E002C00      <2>
  7758 000061D4 000000000000000000- <2> 	dw 0,0,0,0,0,0,0,0
  7759 000061DD 00000000000000      <2>
  7760 000061E4 000000000000000000- <2> 	dw 0,0,0,0,0,0,0,0
  7761 000061ED 00000000000000      <2>
  7762 000061F4 000000000000000000- <2> 	dw 0,0,0,0,0,0,0,0
  7763 000061FD 00000000000000      <2>
  7764 00006204 200020000000000000- <2> 	dw ' ',' ',0,0,0,0,0,0
  7765 0000620D 00000000000000      <2>
  7766                              <2> noscan:
  7767                              <2> 
  7768                              <1> %endif
  7769                              <1> ;drivers will soon be handled intelligently
  7770                              <1> ;every driver's source will be scanned for a .init function
  7771                              <1> ;that will be called and if it returns 0
  7772                              <1> ;the hardware was found and the driver initialized properly
  7773                              <1> initializelater: ;these have debugging messages and should be initialized after the screen
  7774                              <1> 	%ifdef sound.included
  7775                              <1> 		call sblaster.init
  7776                              <1> 	%endif
  7777                              <1> 	%ifdef network.included
  7778 00006214 E87D240000          <1> 		call network.init
  7779                              <1> 	%endif
  7780 00006219 C3                  <1> 	ret
  7781                              <1> initialize:
  7782                              <1> ;Now I will initialise the interrupt controllers and remap irq's
  7783 0000621A E814000000          <1> 	call .pic
  7784                              <1> %ifdef terminal.vsync
  7785                              <1> 	call .rtc
  7786                              <1> %endif
  7787 0000621F E871000000          <1> 	call .pit
  7788 00006224 E893000000          <1> 	call .fpu
  7789 00006229 E8A4000000          <1> 	call .sse
  7790 0000622E 31C0                <1> 	xor eax, eax
  7791 00006230 31C9                <1> 	xor ecx, ecx
  7792                              <1> %ifdef io.serial
  7793                              <1> 	call serial.init
  7794                              <1> %endif
  7795 00006232 C3                  <1> 	ret
  7796                              <1> 	
  7797                              <1> .pic:
  7798 00006233 B011                <1> 	mov al, 0x11
  7799 00006235 E620                <1> 	out 0x20, al
  7800 00006237 E6A0                <1> 	out 0xA0, al
  7801 00006239 B040                <1> 	mov al, 0x40	;interrupt for master
  7802 0000623B E621                <1> 	out 0x21, al
  7803 0000623D B048                <1> 	mov al, 0x48	;interrupt for slave
  7804 0000623F E6A1                <1> 	out 0xA1, al
  7805 00006241 B004                <1> 	mov al, 4
  7806 00006243 E621                <1> 	out 0x21, al
  7807 00006245 B002                <1> 	mov al, 2
  7808 00006247 E6A1                <1> 	out 0xA1, al
  7809 00006249 B001                <1> 	mov al, 0x1
  7810 0000624B E621                <1> 	out 0x21, al
  7811 0000624D B001                <1> 	mov al, 0x1
  7812 0000624F E6A1                <1> 	out 0xA1, al
  7813                              <1> 	;masks are set to zero so as not to mask
  7814 00006251 30C0                <1> 	xor al, al
  7815 00006253 E621                <1> 	out 0x21, al
  7816 00006255 30C0                <1> 	xor al, al
  7817 00006257 E6A1                <1> 	out 0xA1, al
  7818 00006259 B020                <1> 	mov al, 0x20
  7819 0000625B E6A0                <1> 	out 0xA0, al
  7820 0000625D E620                <1> 	out 0x20, al
  7821 0000625F C3                  <1> 	ret
  7822                              <1> .rtc:
  7823 00006260 B008                <1> 	mov al, 0x8
  7824 00006262 88C4                <1> 	mov ah, al
  7825 00006264 66BA7000            <1> 	mov dx, 0x70
  7826 00006268 EE                  <1> 	out dx, al
  7827 00006269 6642                <1> 	inc dx
  7828 0000626B EC                  <1> 	in al, dx
  7829 0000626C 86C4                <1> 	xchg al, ah
  7830 0000626E 664A                <1> 	dec dx
  7831 00006270 EE                  <1> 	out dx, al
  7832 00006271 6642                <1> 	inc dx
  7833 00006273 86C4                <1> 	xchg al, ah
  7834 00006275 0C40                <1> 	or al, 0x40
  7835 00006277 EE                  <1> 	out dx, al
  7836                              <1> 	
  7837 00006278 B00A                <1> 	mov al, 0xA
  7838 0000627A 664A                <1> 	dec dx
  7839 0000627C EE                  <1> 	out dx, al
  7840 0000627D 86C4                <1> 	xchg al, ah
  7841 0000627F 6642                <1> 	inc dx
  7842 00006281 EC                  <1> 	in al, dx
  7843 00006282 24F0                <1> 	and al, 0xF0
  7844 00006284 0A05[1B030000]      <1> 	or al, [rtcrate]
  7845 0000628A 86C4                <1> 	xchg al, ah
  7846 0000628C 664A                <1> 	dec dx
  7847 0000628E EE                  <1> 	out dx, al
  7848 0000628F 6642                <1> 	inc dx
  7849 00006291 86C4                <1> 	xchg al, ah
  7850 00006293 EE                  <1> 	out dx, al
  7851 00006294 C3                  <1> 	ret
  7852                              <1> 	
  7853                              <1> .pit:
  7854                              <1> 	;initialize the PIT
  7855 00006295 66A1[5A020000]      <1> 	mov ax, [pitdiv] ;this is the divider for the PIT
  7856 0000629B E640                <1> 	out 0x40, al
  7857 0000629D 66C1C008            <1> 	rol ax, 8
  7858 000062A1 E640                <1> 	out 0x40, al
  7859                              <1> 	;enable rtc interrupt
  7860 000062A3 B00B                <1> 	mov al, 0xB
  7861 000062A5 E670                <1> 	out 0x70, al
  7862 000062A7 66C1C008            <1> 	rol ax, 8
  7863 000062AB E471                <1> 	in al, 0x71
  7864 000062AD 66C1C008            <1> 	rol ax, 8
  7865 000062B1 E670                <1> 	out 0x70, al
  7866 000062B3 66C1C008            <1> 	rol ax, 8
  7867 000062B7 0C40                <1> 	or al, 0x40
  7868 000062B9 E671                <1> 	out 0x71, al
  7869 000062BB C3                  <1> 	ret
  7870                              <1> .fpu:
  7871                              <1> 	;And now to initialize the fpu
  7872 000062BC 0F20E0              <1> 	mov eax, cr4
  7873 000062BF 0D00020000          <1> 	or eax, 0x200
  7874 000062C4 0F22E0              <1> 	mov cr4, eax
  7875 000062C7 B87F0B0000          <1> 	mov eax, 0xB7F
  7876 000062CC 50                  <1> 	push eax
  7877 000062CD D92C24              <1> 	fldcw [esp]
  7878 000062D0 58                  <1> 	pop eax
  7879 000062D1 C3                  <1> 	ret
  7880                              <1> 	
  7881                              <1> .sse:
  7882 000062D2 0F20C0              <1> 	mov eax, cr0
  7883 000062D5 24FB                <1> 	and al, 11111011b
  7884 000062D7 0C02                <1> 	or al, 00000010b
  7885 000062D9 0F22C0              <1> 	mov cr0, eax
  7886 000062DC 0F20E0              <1> 	mov eax, cr4
  7887 000062DF 660D0006            <1> 	or ax, 0000011000000000b
  7888 000062E3 0F22E0              <1> 	mov cr4, eax
  7889 000062E6 C3                  <1> 	ret
  7890                                      %include "source/pci.asm"
  7891 000062E7 00                  <1> pcibus		db 0
  7892 000062E8 00                  <1> pcidevice	db 0
  7893 000062E9 00                  <1> pcifunction	db 0
  7894 000062EA 00                  <1> pciregister	db 0
  7895 000062EB 00                  <1> pcireqtype	db 0
  7896 000062EC 00000000            <1> pcidevid	dd 0
  7897 000062F0 FFFFFFFF            <1> pcidevidmask dd 0xFFFFFFFF
  7898                              <1> getpcimem:
  7899 000062F4 B002                <1> 	mov al, 2
  7900 000062F6 A2[EB620000]        <1> 	mov [pcireqtype], al
  7901 000062FB E922000000          <1> 	jmp searchpci
  7902                              <1> getpciport:
  7903 00006300 B001                <1> 	mov al, 1
  7904 00006302 A2[EB620000]        <1> 	mov [pcireqtype], al
  7905 00006307 E916000000          <1> 	jmp searchpci
  7906                              <1> pcidump:
  7907 0000630C 31C0                <1> 	xor eax, eax
  7908 0000630E A2[E9620000]        <1> 	mov [pcifunction], al
  7909 00006313 A2[E7620000]        <1> 	mov [pcibus], al
  7910 00006318 A2[E8620000]        <1> 	mov [pcidevice], al
  7911 0000631D A2[EB620000]        <1> 	mov [pcireqtype], al
  7912                              <1> searchpci:		;;return in ebx, start X in pciX
  7913 00006322 30C0                <1> 	xor al, al
  7914 00006324 A2[EA620000]        <1> 	mov [pciregister], al
  7915 00006329 E81D020000          <1> 	call getpciaddr
  7916 0000632E BAF80C0000          <1> 	mov edx, 0xCF8
  7917 00006333 EF                  <1> 	out dx, eax	;;request pci config
  7918 00006334 BAFC0C0000          <1> 	mov edx, 0xCFC
  7919 00006339 ED                  <1> 	in eax, dx 	;;read in pci config
  7920 0000633A 3D0000FFFF          <1> 	cmp eax, 0xFFFF0000
  7921 0000633F 0F8237000000        <1> 	jb near checkpcidevice
  7922                              <1> searchpciret:
  7923                              <1> nextpcidevice:
  7924 00006345 30C0                <1> 	xor al, al
  7925 00006347 A2[E9620000]        <1> 	mov [pcifunction], al
  7926 0000634C A0[E8620000]        <1> 	mov al, [pcidevice]
  7927 00006351 3C1F                <1> 	cmp al, 11111b
  7928 00006353 0F8300010000        <1> 	jae near nextpcibus
  7929 00006359 FEC0                <1> 	inc al
  7930 0000635B A2[E8620000]        <1> 	mov [pcidevice], al
  7931 00006360 EBC0                <1> 	jmp searchpci
  7932 00006362 A0[E9620000]        <1> 	mov al, [pcifunction]
  7933 00006367 3C07                <1> 	cmp al, 111b
  7934 00006369 0F83D6FFFFFF        <1> 	jae near nextpcidevice
  7935 0000636F FEC0                <1> 	inc al
  7936 00006371 A2[E9620000]        <1> 	mov [pcifunction], al
  7937 00006376 EBAA                <1> 	jmp searchpci
  7938 00006378 00000000            <1> pcitype: db 0,0,0,0
  7939                              <1> checkpcidevice:
  7940 0000637C 31C0                <1> 	xor eax, eax
  7941 0000637E 3905[EC620000]      <1> 	cmp [pcidevid], eax
  7942 00006384 0F8430000000        <1> 	je near .good
  7943 0000638A A2[EA620000]        <1> 	mov [pciregister], al	;device id, vendor id
  7944 0000638F E8B7010000          <1> 	call getpciaddr
  7945 00006394 BAF80C0000          <1> 	mov edx, 0xCF8
  7946 00006399 EF                  <1> 	out dx, eax
  7947 0000639A BAFC0C0000          <1> 	mov edx, 0xCFC
  7948 0000639F ED                  <1> 	in eax, dx
  7949 000063A0 2305[F0620000]      <1> 	and eax, [pcidevidmask]
  7950 000063A6 8B1D[EC620000]      <1> 	mov ebx, [pcidevid]
  7951 000063AC 231D[F0620000]      <1> 	and ebx, [pcidevidmask]
  7952 000063B2 39D8                <1> 	cmp eax, ebx
  7953 000063B4 0F858BFFFFFF        <1> 	jne near searchpciret
  7954                              <1> .good:
  7955 000063BA 30C0                <1> 	xor al, al
  7956 000063BC 3805[EB620000]      <1> 	cmp [pcireqtype], al
  7957 000063C2 0F842C000000        <1> 	je near dumppcidevice
  7958 000063C8 B008                <1> 	mov al, 0x08
  7959 000063CA A2[EA620000]        <1> 	mov [pciregister], al	;;class code, subclass, revision id
  7960 000063CF E877010000          <1> 	call getpciaddr
  7961 000063D4 BAF80C0000          <1> 	mov edx, 0xCF8
  7962 000063D9 EF                  <1> 	out dx, eax
  7963 000063DA BAFC0C0000          <1> 	mov edx, 0xCFC
  7964 000063DF ED                  <1> 	in eax, dx
  7965 000063E0 C1C008              <1> 	rol eax, 8
  7966 000063E3 3A05[78630000]      <1> 	cmp al, [pcitype]
  7967 000063E9 0F84A0000000        <1> 	je near foundpciaddr
  7968 000063EF E951FFFFFF          <1> 	jmp searchpciret
  7969                              <1> dumppcidevice:
  7970 000063F4 30C0                <1> 	xor al, al
  7971 000063F6 A2[EA620000]        <1> 	mov [pciregister], al
  7972 000063FB E84B010000          <1> 	call getpciaddr
  7973 00006400 89C1                <1> 	mov ecx, eax
  7974 00006402 C605[BB310000]05    <1> 	mov byte [firsthexshown], 5
  7975 00006409 E8C2CDFFFF          <1> 	call showhex
  7976                              <1> dumppcidevicelp:
  7977 0000640E A2[EA620000]        <1> 	mov [pciregister], al
  7978 00006413 E833010000          <1> 	call getpciaddr
  7979 00006418 BAF80C0000          <1> 	mov edx, 0xCF8
  7980 0000641D EF                  <1> 	out dx, eax
  7981 0000641E BAFC0C0000          <1> 	mov edx, 0xCFC
  7982 00006423 ED                  <1> 	in eax, dx
  7983 00006424 89C1                <1> 	mov ecx, eax
  7984 00006426 A0[EA620000]        <1> 	mov al, [pciregister]
  7985 0000642B 0404                <1> 	add al, 4
  7986 0000642D C605[BB310000]05    <1> 	mov byte [firsthexshown], 5
  7987 00006434 E897CDFFFF          <1> 	call showhex
  7988 00006439 3C3C                <1> 	cmp al, 0x3C
  7989 0000643B 72D1                <1> 	jb dumppcidevicelp
  7990                              <1> dumppcidn:
  7991                              <1> %ifdef io.serial
  7992                              <1> 	mov esi, line
  7993                              <1> 	call print
  7994                              <1> %else
  7995 0000643D 803D[9E250000]00    <1> 	cmp byte [charpos], 0
  7996 00006444 0F84FBFEFFFF        <1> 	je near searchpciret
  7997 0000644A BE[778B0000]        <1> 	mov esi, line
  7998 0000644F E8D7B8FFFF          <1> 	call print
  7999                              <1> %endif
  8000 00006454 E9ECFEFFFF          <1> 	jmp searchpciret
  8001                              <1> nextpcibus:
  8002 00006459 30C0                <1> 	xor al, al
  8003 0000645B A2[E8620000]        <1> 	mov [pcidevice], al
  8004 00006460 A0[E7620000]        <1> 	mov al, [pcibus]
  8005 00006465 3C7F                <1> 	cmp al, 1111111b
  8006 00006467 730C                <1> 	jae donesearchpci
  8007 00006469 FEC0                <1> 	inc al
  8008 0000646B A2[E7620000]        <1> 	mov [pcibus], al
  8009 00006470 E9ADFEFFFF          <1> 	jmp searchpci
  8010                              <1> donesearchpci:
  8011 00006475 BBFFFFFFFF          <1> 	mov ebx, 0xFFFFFFFF
  8012 0000647A 31D2                <1> 	xor edx, edx
  8013 0000647C 8815[78630000]      <1> 	mov [pcitype], dl
  8014 00006482 8915[EC620000]      <1> 	mov [pcidevid], edx
  8015 00006488 891D[F0620000]      <1> 	mov [pcidevidmask], ebx
  8016 0000648E C3                  <1> 	ret
  8017                              <1> foundpciaddr:
  8018 0000648F B010                <1> 	mov al, 0x10
  8019 00006491 A2[EA620000]        <1> 	mov [pciregister], al
  8020 00006496 803D[EB620000]02    <1> 	cmp byte [pcireqtype], 2
  8021 0000649D 7443                <1> 	je findpcimemaddr
  8022                              <1> findpciioaddr:
  8023 0000649F E8A7000000          <1> 	call getpciaddr
  8024 000064A4 BAF80C0000          <1> 	mov edx, 0xCF8
  8025 000064A9 EF                  <1> 	out dx, eax
  8026 000064AA BAFC0C0000          <1> 	mov edx, 0xCFC
  8027 000064AF ED                  <1> 	in eax, dx
  8028 000064B0 89C3                <1> 	mov ebx, eax
  8029 000064B2 81E301000000        <1> 	and ebx, 1
  8030 000064B8 81FB00000000        <1> 	cmp ebx, 0
  8031 000064BE 0F846E000000        <1> 	je near notpciioaddr
  8032 000064C4 2D01000000          <1> 	sub eax, 1
  8033 000064C9 89C2                <1> 	mov edx, eax
  8034 000064CB 31DB                <1> 	xor ebx, ebx
  8035 000064CD 4B                  <1> 	dec ebx
  8036 000064CE 891D[F0620000]      <1> 	mov [pcidevidmask], ebx
  8037 000064D4 43                  <1> 	inc ebx
  8038 000064D5 881D[78630000]      <1> 	mov [pcitype], bl
  8039 000064DB 891D[EC620000]      <1> 	mov [pcidevid], ebx
  8040 000064E1 C3                  <1> 	ret
  8041                              <1> findpcimemaddr:
  8042 000064E2 E864000000          <1> 	call getpciaddr
  8043 000064E7 BAF80C0000          <1> 	mov edx, 0xCF8
  8044 000064EC EF                  <1> 	out dx, eax
  8045 000064ED BAFC0C0000          <1> 	mov edx, 0xCFC
  8046 000064F2 ED                  <1> 	in eax, dx
  8047 000064F3 89C3                <1> 	mov ebx, eax
  8048 000064F5 81E301000000        <1> 	and ebx, 1
  8049 000064FB 81FB01000000        <1> 	cmp ebx, 1
  8050 00006501 0F842B000000        <1> 	je near notpciioaddr
  8051 00006507 C1E804              <1> 	shr eax, 4
  8052 0000650A C1E004              <1> 	shl eax, 4	;remove prefetch and type
  8053 0000650D 89C2                <1> 	mov edx, eax
  8054 0000650F 50                  <1> 	push eax
  8055 00006510 A1[41020000]        <1> 	mov eax, [basecache]
  8056 00006515 C1E004              <1> 	shl eax, 4
  8057 00006518 29C2                <1> 	sub edx, eax
  8058 0000651A 58                  <1> 	pop eax
  8059 0000651B 31DB                <1> 	xor ebx, ebx
  8060 0000651D 4B                  <1> 	dec ebx
  8061 0000651E 891D[F0620000]      <1> 	mov [pcidevidmask], ebx
  8062 00006524 43                  <1> 	inc ebx
  8063 00006525 881D[78630000]      <1> 	mov [pcitype], bl
  8064 0000652B 891D[EC620000]      <1> 	mov [pcidevid], ebx
  8065 00006531 C3                  <1> 	ret
  8066                              <1> notpciioaddr:
  8067 00006532 A0[EA620000]        <1> 	mov al, [pciregister]
  8068 00006537 0404                <1> 	add al, 4
  8069 00006539 3C28                <1> 	cmp al, 0x28
  8070 0000653B 0F8704FEFFFF        <1> 	ja near searchpciret
  8071 00006541 A2[EA620000]        <1> 	mov [pciregister], al
  8072 00006546 E954FFFFFF          <1> 	jmp findpciioaddr
  8073                              <1> getpciaddr:		;;puts it in eax and ebx
  8074 0000654B 31C0                <1> 			xor eax, eax
  8075 0000654D BB00000080          <1> 			mov ebx, 0x80000000
  8076 00006552 A0[E7620000]        <1> 			mov al, [pcibus]
  8077 00006557 C1E010              <1> 			shl eax, 16
  8078 0000655A 01C3                <1> 			add ebx, eax
  8079 0000655C 31C0                <1> 			xor eax, eax
  8080 0000655E A0[E8620000]        <1> 			mov al, [pcidevice]
  8081 00006563 C1E00B              <1> 			shl eax, 11
  8082 00006566 01C3                <1> 			add ebx, eax
  8083 00006568 31C0                <1> 			xor eax, eax
  8084 0000656A A0[E9620000]        <1> 			mov al, [pcifunction]
  8085 0000656F C1E008              <1> 			shl eax, 8
  8086 00006572 01C3                <1> 			add ebx, eax
  8087 00006574 31C0                <1> 			xor eax, eax
  8088 00006576 A0[EA620000]        <1> 			mov al, [pciregister]
  8089 0000657B 01C3                <1> 			add ebx, eax
  8090 0000657D 89D8                <1> 			mov eax, ebx
  8091 0000657F C3                  <1> 			ret
  8092                                      %include "source/disk.asm"
  8093                              <1> %ifdef disk.real
  8094                              <1> 	%include "source/drivers/disk/realmode.asm"
  8095                              <2> diskr:
  8096                              <2> 			;read from disk using real mode-it does not work with large files
  8097                              <2> 			;sector count in cl
  8098                              <2> 			;disk number in ch
  8099                              <2> 			;48 bit address with last 32 bits in ebx
  8100                              <2> 			;buffer in esi
  8101                              <2> 			;puts end of buffer in edi and end lba address in edx
  8102 00006580 880D[AD650000]      <2> 	mov [sdlength], cl
  8103 00006586 891D[AE650000]      <2> 	mov [sdaddress], ebx
  8104 0000658C 8935[0C670000]      <2> 	mov [oldesireal], esi
  8105 00006592 66BE[B265]          <2> 	mov si, readdiskreal
  8106 00006596 668935[D70C0000]    <2> 	mov [realmodeptr], si
  8107 0000659D BE[EE650000]        <2> 	mov esi, backfromrealread
  8108 000065A2 8935[D30C0000]      <2> 	mov [realmodereturn], esi
  8109 000065A8 E90FA6FFFF          <2> 	jmp realmode
  8110 000065AD 00                  <2> sdlength db 0
  8111 000065AE 00000000            <2> sdaddress dd 0
  8112                              <2> 
  8113                              <2> [BITS 16]
  8114                              <2> readdiskreal:
  8115 000065B2 C706[DE65]1000      <2> 	mov word [dlen], 0x10
  8116 000065B8 C706[E265]0000      <2> 	mov word [daddress], 0
  8117 000065BE C706[E465]0001      <2> 	mov word [dsegm], 0x100
  8118 000065C4 66891E[E665]        <2> 	mov [dlbaad], ebx
  8119 000065C9 880E[E065]          <2> 	mov [dreadlen], cl
  8120                              <2> ReadHardDisk:
  8121 000065CD BE[DE65]            <2> 	mov si, diskaddresspacket
  8122 000065D0 31C0                <2> 	xor ax, ax
  8123 000065D2 B442                <2> 	mov ah, 0x42
  8124 000065D4 8A16[DD65]          <2> 	mov dl, [dnumber]
  8125 000065D8 CD13                <2> 	int 0x13
  8126 000065DA 72F1                <2> 	jc ReadHardDisk
  8127 000065DC C3                  <2> 	ret
  8128                              <2> 
  8129 000065DD 80                  <2> dnumber db 0x80
  8130                              <2> diskaddresspacket:
  8131 000065DE 10                  <2> dlen:	db 0x10 ;size of packet
  8132 000065DF 00                  <2> 		db 0
  8133 000065E0 7F00                <2> dreadlen:	dw 0x7F	;blocks to read=maximum
  8134 000065E2 0000                <2> daddress:	dw 0	;address 0
  8135 000065E4 0001                <2> dsegm:		dw 0x100	;segment
  8136                              <2> 		;start with known value for hd
  8137                              <2> dlbaad:
  8138 000065E6 00000000            <2> 	dd 0	;lba address
  8139 000065EA 00000000            <2> 	dd 0
  8140                              <2> [BITS 32]
  8141                              <2> backfromrealread:
  8142 000065EE 8B35[0C670000]      <2> 	mov esi, [oldesireal]
  8143 000065F4 8B1D[AE650000]      <2> 	mov ebx, [sdaddress]
  8144 000065FA 31C9                <2> 	xor ecx, ecx
  8145 000065FC 8A0D[AD650000]      <2> 	mov cl, [sdlength]
  8146 00006602 01CB                <2> 	add ebx, ecx
  8147 00006604 66B80800            <2> 	mov ax, LINEAR_SEL
  8148 00006608 8EE0                <2> 	mov fs, ax
  8149 0000660A BF00100000          <2> 	mov edi, 0x1000
  8150 0000660F B200                <2> 	mov dl, 0
  8151 00006611 D0E1                <2> 	shl cl, 1
  8152                              <2> copyfromrmodedisk:
  8153 00006613 648A07              <2> 	mov al, [fs:edi]
  8154 00006616 8806                <2> 	mov [esi], al
  8155 00006618 47                  <2> 	inc edi
  8156 00006619 46                  <2> 	inc esi
  8157 0000661A FECA                <2> 	dec dl
  8158 0000661C 80FA00              <2> 	cmp dl, 0
  8159 0000661F 75F2                <2> 	jne copyfromrmodedisk
  8160 00006621 FEC9                <2> 	dec cl
  8161 00006623 B200                <2> 	mov dl, 0
  8162 00006625 80F900              <2> 	cmp cl, 0
  8163 00006628 75E9                <2> 	jne copyfromrmodedisk
  8164 0000662A 66B83000            <2> 	mov ax, NEW_DATA_SEL
  8165 0000662E 8EE0                <2> 	mov fs, ax
  8166 00006630 89F7                <2> 	mov edi, esi
  8167 00006632 8B35[0C670000]      <2> 	mov esi, [oldesireal]
  8168 00006638 89DA                <2> 	mov edx, ebx
  8169 0000663A 8B1D[AE650000]      <2> 	mov ebx, [sdaddress]
  8170 00006640 C3                  <2> 	ret
  8171                              <2> 	
  8172                              <1> %else
  8173                              <1> 	%ifdef disk.protected
  8174                              <1> 		%include "source/drivers/disk/pata.asm"
  8175                              <1> 	%endif
  8176                              <1> %endif
  8177                              <1> %ifdef disk.none
  8178                              <1> loadfile:	xor edx, edx
  8179                              <1> 			cmp byte [edi], '&'
  8180                              <1> 			je .ret
  8181                              <1> 			mov edx, 404	;no files are found except &
  8182                              <1> 		.ret:
  8183                              <1> 			ret
  8184                              <1> %else
  8185                              <1> ;This loads files using the methods in the loaded driver
  8186                              <1> loadfile:	;loads a file with the name buffer's location in edi into location in esi
  8187                              <1> 			;returns with err code in edx and file end in edi
  8188 00006641 803F00              <1> 	cmp byte [edi], 0
  8189 00006644 0F8448000000        <1> 	je near nofileload
  8190 0000664A 89FA                <1> 	mov edx, edi
  8191 0000664C BB[E60D0100]        <1> 	mov ebx, diskfileindex
  8192                              <1> nextnamechar:
  8193 00006651 8A07                <1> 	mov al, [edi]
  8194 00006653 3C26                <1> 	cmp al, '&'
  8195 00006655 7440                <1> 	je nullfile
  8196 00006657 8A23                <1> 	mov ah, [ebx]
  8197 00006659 47                  <1> 	inc edi
  8198 0000665A 43                  <1> 	inc ebx
  8199 0000665B 88C1                <1> 	mov cl, al
  8200 0000665D 08E1                <1> 	or cl, ah
  8201 0000665F 80F900              <1> 	cmp cl, 0
  8202 00006662 744E                <1> 	je equalfilenames
  8203 00006664 80F920              <1> 	cmp cl, ' '
  8204 00006667 7449                <1> 	je equalfilenames
  8205 00006669 3C2A                <1> 	cmp al, '*'
  8206 0000666B 742B                <1> 	je equalfilenames2
  8207 0000666D 80FC00              <1> 	cmp ah, 0
  8208 00006670 7410                <1> 	je nextfilename
  8209 00006672 3C00                <1> 	cmp al, 0
  8210 00006674 7404                <1> 	je getebxzero
  8211 00006676 38E0                <1> 	cmp al, ah
  8212 00006678 74D7                <1> 	je nextnamechar
  8213                              <1> getebxzero:
  8214 0000667A 8A23                <1> 	mov ah, [ebx]
  8215 0000667C 43                  <1> 	inc ebx
  8216 0000667D 80FC00              <1> 	cmp ah, 0
  8217 00006680 75F8                <1> 	jne getebxzero
  8218                              <1> nextfilename:
  8219 00006682 81C308000000        <1> 	add ebx, 8		;next descriptor
  8220 00006688 89D7                <1> 	mov edi, edx
  8221 0000668A 81FB[E40F0100]      <1> 	cmp ebx, enddiskfileindex
  8222 00006690 72BF                <1> 	jb nextnamechar
  8223                              <1> nofileload:
  8224 00006692 BA94010000          <1> 	mov edx, 404	;indicate not found error
  8225                              <1> nullfile:
  8226 00006697 C3                  <1> 	ret
  8227                              <1> equalfilenames2:
  8228 00006698 81EB02000000        <1> 	sub ebx, 2
  8229                              <1> eqfilefind:
  8230 0000669E 43                  <1> 	inc ebx
  8231 0000669F 81FB[E40F0100]      <1> 	cmp ebx, enddiskfileindex
  8232 000066A5 0F83E7FFFFFF        <1> 	jae near nofileload
  8233 000066AB 8A03                <1> 	mov al, [ebx]
  8234 000066AD 3C00                <1> 	cmp al, 0
  8235 000066AF 75ED                <1> 	jne eqfilefind
  8236 000066B1 43                  <1> 	inc ebx
  8237                              <1> equalfilenames:
  8238 000066B2 8B4304              <1> 	mov eax, [ebx + 4] 	;put file size in eax
  8239 000066B5 8B1B                <1> 	mov ebx, [ebx]		;put file beginning in ebx
  8240 000066B7 031D[9E8B0000]      <1> 	add ebx, [lbaad]	;add offset to solleros start
  8241 000066BD 31C9                <1> 	xor ecx, ecx
  8242 000066BF 88C1                <1> 	mov cl, al			;get excess number of sectors
  8243 000066C1 C0E102              <1> 	shl cl, 2
  8244 000066C4 C0E902              <1> 	shr cl, 2			;cut off at 64
  8245 000066C7 29C8                <1> 	sub eax, ecx		;get rid of excess sectors
  8246 000066C9 B500                <1> 	mov ch, 0			;drive 0
  8247 000066CB C1E806              <1> 	shr eax, 6			;get number of 64 sector tracks
  8248                              <1> loaddiskfile:			;tracks in eax, excess sectors in cl, drive in ch, buffer in esi, address in ebx
  8249 000066CE A3[10670000]        <1> 	mov [filetracks], eax
  8250 000066D3 89F7                <1> 	mov edi, esi		;just in case cl is 0
  8251 000066D5 89DA                <1> 	mov edx, ebx
  8252 000066D7 80F900              <1> 	cmp cl, 0
  8253 000066DA 7405                <1> 	je copytracksforfile
  8254 000066DC E89FFEFFFF          <1> 	call diskr	;take care of excess sectors
  8255                              <1> copytracksforfile:
  8256 000066E1 A1[10670000]        <1> 	mov eax, [filetracks]
  8257 000066E6 3D00000000          <1> 	cmp eax, 0
  8258 000066EB 7419                <1> 	je donecopyfile
  8259 000066ED 48                  <1> 	dec eax
  8260 000066EE A3[10670000]        <1> 	mov [filetracks], eax
  8261 000066F3 89D3                <1> 	mov ebx, edx	;get end lba
  8262 000066F5 B140                <1> 	mov cl, 0x40 ;for compatability with BIOS it uses 64 instead of 128
  8263 000066F7 8A2D[9D8B0000]      <1> 	mov ch, [DriveNumber]
  8264 000066FD 89FE                <1> 	mov esi, edi	;reset buffer
  8265 000066FF E87CFEFFFF          <1> 	call diskr
  8266 00006704 EBDB                <1> 	jmp copytracksforfile
  8267                              <1> donecopyfile:
  8268 00006706 BA00000000          <1> 	mov edx, 0	;no error
  8269 0000670B C3                  <1> 	ret
  8270                              <1> 
  8271 0000670C 00000000            <1> oldesireal dd 0
  8272 00006710 00000000            <1> filetracks dd 0
  8273 00006714 00                  <1> lbad1 db 0
  8274 00006715 00                  <1> lbad2 db 0
  8275 00006716 00                  <1> lbad3 db 0
  8276 00006717 00                  <1> lbad4 db 0
  8277 00006718 00                  <1> lbad5 db 0
  8278 00006719 00                  <1> lbad6 db 0
  8279 0000671A 6400                <1> segments dw 100
  8280                              <1> %endif
  8281                                      %include "source/threads.asm"
  8282                              <1> %ifdef threads.included	
  8283                              <1> nwcmdst:
  8284 0000671C 31C0                <1> 	xor eax, eax
  8285 0000671E BC[841F0100]        <1> 	mov esp, stackend
  8286 00006723 A2[E0670000]        <1> 	mov [threadson], al
  8287 00006728 A3[E1670000]        <1> 	mov [currentthread], eax
  8288 0000672D 0504000000          <1> 	add eax, 4
  8289 00006732 A3[DC670000]        <1> 	mov [lastthread], eax
  8290 00006737 FB                  <1> 	sti
  8291 00006738 E9B9C5FFFF          <1> 	jmp nwcmd
  8292                              <1> 
  8293                              <1> nomorethreadspace:
  8294 0000673D BE[53670000]        <1> 	mov esi, nmts
  8295 00006742 E8E4B5FFFF          <1> 	call print
  8296 00006747 C605[E0670000]00    <1> 	mov byte [threadson], 0
  8297 0000674E E9A3C5FFFF          <1> 	jmp nwcmd
  8298 00006753 546872656164204F76- <1> nmts	db "Thread Overflow",10,0
  8299 0000675C 6572666C6F770A00    <1>
  8300                              <1> 
  8301                              <1> nomorestackspace:
  8302 00006764 BE[70670000]        <1> 	mov esi, nmss
  8303 00006769 E8BDB5FFFF          <1> 	call print
  8304 0000676E EBAC                <1> 	jmp nwcmdst
  8305 00006770 537461636B204F7665- <1> nmss	db "Stack Overflow",10,0
  8306 00006779 72666C6F770A00      <1>
  8307                              <1> 	
  8308                              <1> threadswitch:
  8309 00006780 FA                  <1> 	cli
  8310 00006781 60                  <1> 	pushad
  8311 00006782 BF[32302B00]        <1> 	mov edi, threadlist
  8312 00006787 A1[E1670000]        <1> 	mov eax, [currentthread]
  8313 0000678C 40                  <1> 	inc eax
  8314 0000678D A3[E1670000]        <1> 	mov [currentthread], eax
  8315 00006792 6648                <1> 	dec ax
  8316 00006794 C1E002              <1> 	shl eax, 2
  8317 00006797 01C7                <1> 	add edi, eax
  8318 00006799 8927                <1> 	mov [edi], esp
  8319 0000679B 81C704000000        <1> 	add edi, 4
  8320 000067A1 81FF[32402B00]      <1> 	cmp edi, threadlistend
  8321 000067A7 0F830D000000        <1> 	jae near nookespthread
  8322 000067AD 8B07                <1> 	mov eax, [edi]
  8323 000067AF 3D00000000          <1> 	cmp eax, 0
  8324 000067B4 0F8519000000        <1> 	jne near okespthread
  8325                              <1> nookespthread:
  8326 000067BA BF[32302B00]        <1> 	mov edi, threadlist
  8327 000067BF 31C0                <1> 	xor eax, eax
  8328 000067C1 A3[E1670000]        <1> 	mov [currentthread], eax
  8329 000067C6 8B07                <1> 	mov eax, [edi]
  8330 000067C8 3D00000000          <1> 	cmp eax, 0
  8331 000067CD 0F8449FFFFFF        <1> 	je near nwcmdst
  8332                              <1> okespthread:
  8333 000067D3 89C4                <1> 	mov esp, eax
  8334 000067D5 B020                <1> 	mov al, 0x20
  8335 000067D7 E620                <1> 	out 0x20, al
  8336 000067D9 61                  <1> 	popad
  8337 000067DA FB                  <1> 	sti
  8338 000067DB CF                  <1> 	iret
  8339                              <1> 
  8340                              <1> %endif
  8341 000067DC 04000000            <1> 	lastthread dd 4
  8342 000067E0 00                  <1> 	threadson db 0
  8343 000067E1 00000000            <1> 	currentthread dd 0
  8344                                  %ifdef gui.included
  8345                                      %include "source/gui/gui.asm"
  8346                              <1> guiboot:	;Let's see what I can do, I am going to try to make this as freestanding as possible
  8347 000067E5 31C0                <1> 	xor eax, eax
  8348 000067E7 31DB                <1> 	xor ebx, ebx
  8349 000067E9 31C9                <1> 	xor ecx, ecx
  8350 000067EB 31D2                <1> 	xor edx, edx
  8351 000067ED E8F8080000          <1> 	call guisetup
  8352                              <1> guiloop:
  8353 000067F2 E8EEF0FFFF          <1> 	call cursorgui
  8354                              <1> guistart:
  8355 000067F7 E8C2F4FFFF          <1> 	call getkey
  8356 000067FC C605[127E0000]00    <1> 	mov byte [copygui], 0
  8357 00006803 EBF2                <1> 	jmp guistart
  8358                              <1> 
  8359                              <1> %include "source/gui/bmp.asm"
  8360                              <2> showbmp:
  8361 00006805 668B06              <2> 	mov ax, [esi]
  8362 00006808 663D424D            <2> 	cmp ax, "BM"
  8363 0000680C 0F85BB000000        <2> 	jne near endedbmp
  8364 00006812 8B3D[08580000]      <2> 	mov edi, [physbaseptr]
  8365 00006818 6689D0              <2> 	mov ax, dx
  8366 0000681B 6689CB              <2> 	mov bx, cx
  8367 0000681E 31C9                <2> 	xor ecx, ecx
  8368 00006820 31D2                <2> 	xor edx, edx
  8369 00006822 6689D9              <2> 	mov cx, bx
  8370 00006825 6689C2              <2> 	mov dx, ax
  8371 00006828 01D7                <2> 	add edi, edx
  8372 0000682A 01D7                <2> 	add edi, edx
  8373 0000682C 31D2                <2> 	xor edx, edx
  8374 0000682E 668B15[E0580000]    <2> 	mov dx, [resolutionx2]
  8375 00006835 034E16              <2> 	add ecx, [esi + 22]
  8376                              <2> bmplocloop:
  8377 00006838 52                  <2> 	push edx
  8378 00006839 31C0                <2> 	xor eax, eax
  8379 0000683B 6689D0              <2> 	mov ax, dx
  8380 0000683E F7E1                <2> 	mul ecx
  8381 00006840 5A                  <2> 	pop edx
  8382 00006841 663B0D[F4570000]    <2> 	cmp cx, [resolutiony]
  8383 00006848 7609                <2> 	jbe .nofixy
  8384 0000684A 31C9                <2> 	xor ecx, ecx
  8385 0000684C 668B0D[F4570000]    <2> 	mov cx, [resolutiony]
  8386                              <2> .nofixy:
  8387 00006853 01C7                <2> 	add edi, eax
  8388 00006855 8B5612              <2> 	mov edx, [esi + 18]
  8389 00006858 8B4E16              <2> 	mov ecx, [esi + 22]
  8390 0000685B 8B460A              <2> 	mov eax, [esi + 10]
  8391 0000685E 8B5E02              <2> 	mov ebx, [esi + 2]
  8392 00006861 01F3                <2> 	add ebx, esi
  8393 00006863 891D[D3680000]      <2> 	mov [bmpend], ebx
  8394 00006869 89D3                <2> 	mov ebx, edx
  8395 0000686B 01C6                <2> 	add esi, eax
  8396                              <2> ldxbmp2:
  8397 0000686D 31D2                <2> 	xor edx, edx
  8398 0000686F 668B15[F2570000]    <2> 	mov dx, [resolutionx]
  8399 00006876 39D3                <2> 	cmp ebx, edx
  8400 00006878 7702                <2> 	ja ldxbmp
  8401 0000687A 89DA                <2> 	mov edx, ebx
  8402                              <2> ldxbmp:
  8403 0000687C 668B06              <2> 	mov ax, [esi]
  8404 0000687F 668907              <2> 	mov [edi], ax
  8405 00006882 81C702000000        <2> 	add edi, 2
  8406 00006888 81C602000000        <2> 	add esi, 2
  8407 0000688E 3B35[D3680000]      <2> 	cmp esi, [bmpend]
  8408 00006894 7737                <2> 	ja endedbmp
  8409 00006896 4A                  <2> 	dec edx
  8410 00006897 81FA00000000        <2> 	cmp edx, 0
  8411 0000689D 77DD                <2> 	ja ldxbmp
  8412 0000689F 31D2                <2> 	xor edx, edx
  8413 000068A1 668B15[F2570000]    <2> 	mov dx, [resolutionx]
  8414 000068A8 39D3                <2> 	cmp ebx, edx
  8415 000068AA 7610                <2> 	jbe .notover
  8416                              <2> .over:
  8417 000068AC 01DE                <2> 	add esi, ebx
  8418 000068AE 01DE                <2> 	add esi, ebx
  8419 000068B0 29D6                <2> 	sub esi, edx
  8420 000068B2 29D6                <2> 	sub esi, edx
  8421 000068B4 01DF                <2> 	add edi, ebx
  8422 000068B6 01DF                <2> 	add edi, ebx
  8423 000068B8 29D7                <2> 	sub edi, edx
  8424 000068BA 29D7                <2> 	sub edi, edx
  8425                              <2> .notover:
  8426 000068BC 29DF                <2> 	sub edi, ebx
  8427 000068BE 29DF                <2> 	sub edi, ebx
  8428 000068C0 29D7                <2> 	sub edi, edx
  8429 000068C2 29D7                <2> 	sub edi, edx
  8430 000068C4 49                  <2> 	dec ecx
  8431 000068C5 81F900000000        <2> 	cmp ecx, 0
  8432 000068CB 77A0                <2> 	ja ldxbmp2
  8433                              <2> endedbmp:
  8434 000068CD E888030000          <2> 	call switchmousepos2
  8435 000068D2 C3                  <2> 	ret
  8436                              <2> 	
  8437 000068D3 00000000            <2> 	bmpend dd 0
  8438                              <1> %include "source/gui/circle.asm"
  8439                              <2> drawcircle:	;center in (dx,cx), color in si, radius in ax
  8440 000068D7 55                  <2> 	push ebp
  8441 000068D8 663D0000            <2> 	cmp ax, 0
  8442 000068DC 770A                <2> 	ja .nozerocircle
  8443 000068DE E8491D0000          <2> 	call putpixel	;the easiest circle ever
  8444 000068E3 E9F7000000          <2> 	jmp .done
  8445                              <2> .nozerocircle:
  8446 000068E8 6689F5              <2> 	mov bp, si
  8447 000068EB 6650                <2> 	push ax
  8448 000068ED E87B1D0000          <2> 	call getpixelmem
  8449 000068F2 31C0                <2> 	xor eax, eax
  8450 000068F4 6658                <2> 	pop ax
  8451 000068F6 BE01000000          <2> 	mov esi, 1
  8452 000068FB 29C6                <2> 	sub esi, eax
  8453 000068FD 89C1                <2> 	mov ecx, eax
  8454 000068FF 31C0                <2> 	xor eax, eax
  8455 00006901 66A1[E0580000]      <2> 	mov ax, [resolutionx2]
  8456 00006907 F7E1                <2> 	mul ecx
  8457 00006909 50                  <2> 	push eax
  8458 0000690A 31D2                <2> 	xor edx, edx
  8459 0000690C 01C7                <2> 	add edi, eax
  8460 0000690E 66892F              <2> 	mov [edi], bp
  8461 00006911 29C7                <2> 	sub edi, eax
  8462 00006913 29C7                <2> 	sub edi, eax
  8463 00006915 66892F              <2> 	mov [edi], bp
  8464 00006918 01C7                <2> 	add edi, eax
  8465 0000691A D1E1                <2> 	shl ecx, 1
  8466 0000691C 01CF                <2> 	add edi, ecx
  8467 0000691E 66892F              <2> 	mov [edi], bp
  8468 00006921 D1E1                <2> 	shl ecx, 1
  8469 00006923 29CF                <2> 	sub edi, ecx
  8470 00006925 66892F              <2> 	mov [edi], bp
  8471 00006928 D1E9                <2> 	shr ecx, 1
  8472 0000692A 01CF                <2> 	add edi, ecx
  8473 0000692C D1E9                <2> 	shr ecx, 1
  8474 0000692E B802000000          <2> 	mov eax, 2
  8475 00006933 F7E1                <2> 	mul ecx
  8476 00006935 48                  <2> 	dec eax
  8477 00006936 F7D0                <2> 	not eax ;make it negative
  8478 00006938 A3[E5690000]        <2> 	mov [.ddF_y], eax
  8479 0000693D 58                  <2> 	pop eax
  8480 0000693E BB01000000          <2> 	mov ebx, 1
  8481 00006943 891D[E1690000]      <2> 	mov [.ddF_x], ebx
  8482 00006949 4B                  <2> 	dec ebx
  8483 0000694A 31D2                <2> 	xor edx, edx
  8484 0000694C E904000000          <2> 	jmp .lp
  8485                              <2> .lpb:
  8486 00006951 D1EA                <2> 	shr edx, 1
  8487 00006953 D1E9                <2> 	shr ecx, 1
  8488                              <2> .lp:	;it starts this with the center in edi
  8489                              <2> 		;color in bp
  8490                              <2> 		;ddF_x in memory
  8491                              <2> 		;x*resolutionx2 in ebx
  8492                              <2> 		;x in edx
  8493                              <2> 		;ddF_y in memory
  8494                              <2> 		;y*resolutionx2 in eax
  8495                              <2> 		;f in esi
  8496                              <2> 		;y in ecx
  8497 00006955 81FE00000080        <2> 	cmp esi, 0x80000000 ;this means it is not negative
  8498 0000695B 7717                <2> 	ja	.noddF_y
  8499 0000695D 49                  <2> 	dec ecx
  8500 0000695E 2B05[E0580000]      <2> 	sub eax, [resolutionx2]
  8501 00006964 8105[E5690000]0200- <2> 	add dword [.ddF_y], 2
  8502 0000696C 0000                <2>
  8503 0000696E 0335[E5690000]      <2> 	add esi, [.ddF_y]
  8504                              <2> .noddF_y:
  8505 00006974 42                  <2> 	inc edx
  8506 00006975 031D[E0580000]      <2> 	add ebx, [resolutionx2]
  8507 0000697B 8105[E1690000]0200- <2> 	add dword [.ddF_x], 2
  8508 00006983 0000                <2>
  8509 00006985 0335[E1690000]      <2> 	add esi, [.ddF_x]
  8510                              <2> 
  8511 0000698B D1E2                <2> 	shl edx, 1
  8512 0000698D D1E1                <2> 	shl ecx, 1
  8513 0000698F 01D7                <2> 	add edi, edx
  8514 00006991 01C7                <2> 	add edi, eax
  8515 00006993 66892F              <2> 	mov [edi], bp	;(cx+x,cy+y)
  8516 00006996 D1E2                <2> 	shl edx, 1
  8517 00006998 29D7                <2> 	sub edi, edx
  8518 0000699A 66892F              <2> 	mov [edi], bp	;(cx-x,cy+y)
  8519 0000699D D1E0                <2> 	shl eax, 1
  8520 0000699F 29C7                <2> 	sub edi, eax
  8521 000069A1 66892F              <2> 	mov [edi], bp	;(cx-x,cy-y)
  8522 000069A4 01D7                <2> 	add edi, edx
  8523 000069A6 66892F              <2> 	mov [edi], bp	;(cx+x,cy-y)
  8524 000069A9 D1E8                <2> 	shr eax, 1
  8525 000069AB D1EA                <2> 	shr edx, 1
  8526 000069AD 01C7                <2> 	add edi, eax
  8527 000069AF 29D7                <2> 	sub edi, edx
  8528                              <2> 
  8529 000069B1 39D1                <2> 	cmp ecx, edx
  8530 000069B3 749C                <2> 	je .lpb
  8531                              <2> 
  8532 000069B5 01DF                <2> 	add edi, ebx
  8533 000069B7 01CF                <2> 	add edi, ecx
  8534 000069B9 66892F              <2> 	mov [edi], bp	;(cx+y,cy+x)
  8535 000069BC D1E1                <2> 	shl ecx, 1
  8536 000069BE 29CF                <2> 	sub edi, ecx
  8537 000069C0 66892F              <2> 	mov [edi], bp	;(cx-y,cy+x)
  8538 000069C3 D1E3                <2> 	shl ebx, 1
  8539 000069C5 29DF                <2> 	sub edi, ebx
  8540 000069C7 66892F              <2> 	mov [edi], bp	;(cx-y,cy-x)
  8541 000069CA 01CF                <2> 	add edi, ecx
  8542 000069CC 66892F              <2> 	mov [edi], bp	;(cx+y,cy-x)
  8543 000069CF D1EB                <2> 	shr ebx, 1
  8544 000069D1 D1E9                <2> 	shr ecx, 1
  8545 000069D3 01DF                <2> 	add edi, ebx
  8546 000069D5 29CF                <2> 	sub edi, ecx
  8547 000069D7 39CA                <2> 	cmp edx, ecx
  8548 000069D9 0F8272FFFFFF        <2> 	jb .lpb
  8549                              <2> .done:
  8550 000069DF 5D                  <2> 	pop ebp
  8551 000069E0 C3                  <2> 	ret
  8552                              <2> 	
  8553 000069E1 00000000            <2> .ddF_x dd 0
  8554 000069E5 00000000            <2> .ddF_y dd 0
  8555                              <2> 
  8556                              <2> fillcircle:	;center in (dx,cx), color in si, radius in ax
  8557 000069E9 55                  <2> 	push ebp
  8558 000069EA 663D0000            <2> 	cmp ax, 0
  8559 000069EE 770A                <2> 	ja .nozerocircle
  8560 000069F0 E8371C0000          <2> 	call putpixel	;the easiest circle ever
  8561 000069F5 E95A010000          <2> 	jmp .done
  8562                              <2> .nozerocircle:
  8563 000069FA 6689F5              <2> 	mov bp, si
  8564 000069FD 6650                <2> 	push ax
  8565 000069FF E8691C0000          <2> 	call getpixelmem
  8566 00006A04 31C0                <2> 	xor eax, eax
  8567 00006A06 6658                <2> 	pop ax
  8568 00006A08 BE01000000          <2> 	mov esi, 1
  8569 00006A0D 29C6                <2> 	sub esi, eax
  8570 00006A0F 89C1                <2> 	mov ecx, eax
  8571 00006A11 31C0                <2> 	xor eax, eax
  8572 00006A13 66A1[E0580000]      <2> 	mov ax, [resolutionx2]
  8573 00006A19 F7E1                <2> 	mul ecx
  8574 00006A1B 50                  <2> 	push eax
  8575 00006A1C 31D2                <2> 	xor edx, edx
  8576 00006A1E 01C7                <2> 	add edi, eax
  8577 00006A20 66892F              <2> 	mov [edi], bp
  8578 00006A23 29C7                <2> 	sub edi, eax
  8579 00006A25 29C7                <2> 	sub edi, eax
  8580 00006A27 66892F              <2> 	mov [edi], bp
  8581 00006A2A 01C7                <2> 	add edi, eax
  8582 00006A2C D1E1                <2> 	shl ecx, 1
  8583 00006A2E 01CF                <2> 	add edi, ecx
  8584 00006A30 51                  <2> 	push ecx
  8585                              <2> .s0:
  8586 00006A31 66892F              <2> 	mov [edi], bp
  8587 00006A34 81EF02000000        <2> 	sub edi, 2
  8588 00006A3A 49                  <2> 	dec ecx
  8589 00006A3B 81F900000000        <2> 	cmp ecx, 0
  8590 00006A41 75EE                <2> 	jne .s0
  8591 00006A43 66892F              <2> 	mov [edi], bp
  8592 00006A46 59                  <2> 	pop ecx
  8593 00006A47 01CF                <2> 	add edi, ecx
  8594 00006A49 D1E9                <2> 	shr ecx, 1
  8595 00006A4B B802000000          <2> 	mov eax, 2
  8596 00006A50 F7E1                <2> 	mul ecx
  8597 00006A52 48                  <2> 	dec eax
  8598 00006A53 F7D0                <2> 	not eax ;make it negative
  8599 00006A55 A3[5A6B0000]        <2> 	mov [.ddF_y], eax
  8600 00006A5A 58                  <2> 	pop eax
  8601 00006A5B BB01000000          <2> 	mov ebx, 1
  8602 00006A60 891D[566B0000]      <2> 	mov [.ddF_x], ebx
  8603 00006A66 4B                  <2> 	dec ebx
  8604 00006A67 31D2                <2> 	xor edx, edx
  8605 00006A69 E904000000          <2> 	jmp .lp
  8606                              <2> .lpb:
  8607 00006A6E D1EA                <2> 	shr edx, 1
  8608 00006A70 D1E9                <2> 	shr ecx, 1
  8609                              <2> .lp:	;it starts this with the center in edi
  8610                              <2> 		;color in bp
  8611                              <2> 		;ddF_x in memory
  8612                              <2> 		;x*resolutionx2 in ebx
  8613                              <2> 		;x in edx
  8614                              <2> 		;ddF_y in memory
  8615                              <2> 		;y*resolutionx2 in eax
  8616                              <2> 		;f in esi
  8617                              <2> 		;y in ecx
  8618 00006A72 81FE00000080        <2> 	cmp esi, 0x80000000 ;this means it is not negative
  8619 00006A78 7717                <2> 	ja	.noddF_y
  8620 00006A7A 49                  <2> 	dec ecx
  8621 00006A7B 2B05[E0580000]      <2> 	sub eax, [resolutionx2]
  8622 00006A81 8105[5A6B0000]0200- <2> 	add dword [.ddF_y], 2
  8623 00006A89 0000                <2>
  8624 00006A8B 0335[5A6B0000]      <2> 	add esi, [.ddF_y]
  8625                              <2> .noddF_y:
  8626 00006A91 42                  <2> 	inc edx
  8627 00006A92 031D[E0580000]      <2> 	add ebx, [resolutionx2]
  8628 00006A98 8105[566B0000]0200- <2> 	add dword [.ddF_x], 2
  8629 00006AA0 0000                <2>
  8630 00006AA2 0335[566B0000]      <2> 	add esi, [.ddF_x]
  8631                              <2> 
  8632 00006AA8 D1E2                <2> 	shl edx, 1
  8633 00006AAA D1E1                <2> 	shl ecx, 1
  8634 00006AAC 52                  <2> 	push edx
  8635 00006AAD 29D7                <2> 	sub edi, edx
  8636 00006AAF 01C7                <2> 	add edi, eax
  8637 00006AB1 81FA00000000        <2> 	cmp edx, 0
  8638 00006AB7 7412                <2> 	je .nos1
  8639                              <2> .s1:
  8640 00006AB9 66892F              <2> 	mov [edi], bp	;(cx-x,cy+y)
  8641 00006ABC 81C702000000        <2> 	add edi, 2
  8642 00006AC2 4A                  <2> 	dec edx
  8643 00006AC3 81FA00000000        <2> 	cmp edx, 0
  8644 00006AC9 75EE                <2> 	jne .s1
  8645                              <2> .nos1:
  8646 00006ACB 66892F              <2> 	mov [edi], bp
  8647 00006ACE 5A                  <2> 	pop edx
  8648 00006ACF 52                  <2> 	push edx
  8649 00006AD0 29C7                <2> 	sub edi, eax
  8650 00006AD2 29C7                <2> 	sub edi, eax
  8651 00006AD4 81FA00000000        <2> 	cmp edx, 0
  8652 00006ADA 7412                <2> 	je .nos2
  8653                              <2> .s2:
  8654 00006ADC 66892F              <2> 	mov [edi], bp	;(cx+x,cy-y)
  8655 00006ADF 81EF02000000        <2> 	sub edi, 2
  8656 00006AE5 4A                  <2> 	dec edx
  8657 00006AE6 81FA00000000        <2> 	cmp edx, 0
  8658 00006AEC 75EE                <2> 	jne .s2
  8659                              <2> .nos2:
  8660 00006AEE 66892F              <2> 	mov [edi], bp
  8661 00006AF1 5A                  <2> 	pop edx
  8662 00006AF2 01C7                <2> 	add edi, eax	;(cx-x,cy-y)
  8663 00006AF4 01D7                <2> 	add edi, edx
  8664                              <2> 
  8665 00006AF6 39D1                <2> 	cmp ecx, edx
  8666 00006AF8 0F8470FFFFFF        <2> 	je .lpb
  8667                              <2> 
  8668 00006AFE 51                  <2> 	push ecx
  8669 00006AFF 01DF                <2> 	add edi, ebx
  8670 00006B01 29CF                <2> 	sub edi, ecx
  8671 00006B03 81F900000000        <2> 	cmp ecx, 0
  8672 00006B09 7412                <2> 	je .nos3
  8673                              <2> .s3:
  8674 00006B0B 66892F              <2> 	mov [edi], bp	;(cx-y,cy+x)
  8675 00006B0E 81C702000000        <2> 	add edi, 2
  8676 00006B14 49                  <2> 	dec ecx
  8677 00006B15 81F900000000        <2> 	cmp ecx, 0
  8678 00006B1B 75EE                <2> 	jne .s3
  8679                              <2> .nos3:
  8680 00006B1D 66892F              <2> 	mov [edi], bp
  8681 00006B20 59                  <2> 	pop ecx
  8682 00006B21 51                  <2> 	push ecx
  8683 00006B22 29DF                <2> 	sub edi, ebx
  8684 00006B24 29DF                <2> 	sub edi, ebx
  8685 00006B26 81F900000000        <2> 	cmp ecx, 0
  8686 00006B2C 7412                <2> 	je .nos4
  8687                              <2> .s4:
  8688 00006B2E 66892F              <2> 	mov [edi], bp	;(cx+y,cy-x)
  8689 00006B31 81EF02000000        <2> 	sub edi, 2
  8690 00006B37 49                  <2> 	dec ecx
  8691 00006B38 81F900000000        <2> 	cmp ecx, 0
  8692 00006B3E 75EE                <2> 	jne .s4
  8693                              <2> .nos4:
  8694 00006B40 66892F              <2> 	mov [edi], bp
  8695 00006B43 59                  <2> 	pop ecx
  8696 00006B44 01DF                <2> 	add edi, ebx	;(cx-y,cy-x)
  8697 00006B46 01CF                <2> 	add edi, ecx
  8698                              <2> 
  8699 00006B48 D1EA                <2> 	shr edx, 1
  8700 00006B4A D1E9                <2> 	shr ecx, 1
  8701 00006B4C 39CA                <2> 	cmp edx, ecx
  8702 00006B4E 0F821EFFFFFF        <2> 	jb .lp
  8703                              <2> .done:
  8704 00006B54 5D                  <2> 	pop ebp
  8705 00006B55 C3                  <2> 	ret
  8706                              <2> 	
  8707 00006B56 00000000            <2> .ddF_x dd 0
  8708 00006B5A 00000000            <2> .ddF_y dd 0
  8709                              <1> %include "source/gui/cursor.asm"
  8710                              <2> clearmousecursor:
  8711 00006B5E BE[4D6F0000]        <2> 		mov esi, background
  8712 00006B63 8B3D[08580000]      <2> 		mov edi, [physbaseptr]
  8713 00006B69 31D2                <2> 		xor edx, edx
  8714 00006B6B 31C9                <2> 		xor ecx, ecx
  8715 00006B6D 668B15[D25A0000]    <2> 		mov dx, [lastmouseposition]
  8716 00006B74 668B0D[D45A0000]    <2> 		mov cx, [lastmouseposition + 2]
  8717 00006B7B 01D7                <2> 		add edi, edx
  8718 00006B7D 31D2                <2> 		xor edx, edx
  8719 00006B7F 668B15[E0580000]    <2> 		mov dx, [resolutionx2]
  8720 00006B86 81F900000000        <2> 		cmp ecx, 0
  8721 00006B8C 7408                <2> 		je .nomul
  8722 00006B8E 52                  <2> 		push edx
  8723 00006B8F 89D0                <2> 		mov eax, edx
  8724 00006B91 F7E1                <2> 		mul ecx
  8725 00006B93 01C7                <2> 		add edi, eax
  8726 00006B95 5A                  <2> 		pop edx
  8727                              <2> .nomul:
  8728                              <2> %ifdef 	gui.background
  8729 00006B96 813D[1F6F0000]0000- <2> 		cmp dword [backgroundimage], 0
  8730 00006B9E 0000                <2>
  8731 00006BA0 7438                <2> 		je .noyclr
  8732 00006BA2 8B35[1F6F0000]      <2> 		mov esi, [backgroundimage]
  8733 00006BA8 2B3D[08580000]      <2> 		sub edi, [physbaseptr]
  8734 00006BAE 01FE                <2> 		add esi, edi
  8735 00006BB0 033D[08580000]      <2> 		add edi, [physbaseptr]
  8736                              <2> .backlp:
  8737 00006BB6 31DB                <2> 		xor ebx, ebx
  8738                              <2> .noyback:
  8739 00006BB8 8B041E              <2> 		mov eax, [esi + ebx]
  8740 00006BBB 89041F              <2> 		mov [edi + ebx], eax
  8741 00006BBE 81C304000000        <2> 		add ebx, 4
  8742 00006BC4 81FB10000000        <2> 		cmp ebx, 16
  8743 00006BCA 75EC                <2> 		jne .noyback
  8744 00006BCC 01D7                <2> 		add edi, edx
  8745 00006BCE 01D6                <2> 		add esi, edx
  8746 00006BD0 6641                <2> 		inc cx
  8747 00006BD2 6681F91000          <2> 		cmp cx, 16
  8748 00006BD7 72DD                <2> 		jb .backlp
  8749 00006BD9 C3                  <2> 		ret
  8750                              <2> %endif
  8751                              <2> .noyclr:
  8752 00006BDA 668B06              <2> 		mov ax, [esi]
  8753 00006BDD C1C010              <2> 		rol eax, 16
  8754 00006BE0 668B06              <2> 		mov ax, [esi]
  8755 00006BE3 8907                <2> 		mov [edi], eax
  8756 00006BE5 894704              <2> 		mov [edi + 4], eax
  8757 00006BE8 894708              <2> 		mov [edi + 8], eax
  8758 00006BEB 89470C              <2> 		mov [edi + 12], eax
  8759 00006BEE 01D7                <2> 		add edi, edx
  8760 00006BF0 6641                <2> 		inc cx
  8761 00006BF2 6681F91000          <2> 		cmp cx, 16
  8762 00006BF7 72E1                <2> 		jb .noyclr
  8763 00006BF9 C3                  <2> 		ret
  8764                              <2> 
  8765                              <2> switchmousepos:		;;switch were the mouse is located
  8766 00006BFA BE[7D542900]        <2> 		mov esi, mousecolorbuf
  8767 00006BFF 8B3D[08580000]      <2> 		mov edi, [physbaseptr]
  8768 00006C05 31D2                <2> 		xor edx, edx
  8769 00006C07 31C9                <2> 		xor ecx, ecx
  8770 00006C09 668B15[D25A0000]    <2> 		mov dx, [lastmouseposition]
  8771 00006C10 668B0D[D45A0000]    <2> 		mov cx, [lastmouseposition + 2]
  8772 00006C17 01D7                <2> 		add edi, edx
  8773 00006C19 31D2                <2> 		xor edx, edx
  8774 00006C1B 668B15[E0580000]    <2> 		mov dx, [resolutionx2]
  8775 00006C22 6681F90000          <2> 		cmp cx, 0
  8776 00006C27 740B                <2> 		je noswmsy
  8777 00006C29 01D7                <2> swmsy:		add edi, edx
  8778 00006C2B 6649                <2> 		dec cx
  8779 00006C2D 6681F90000          <2> 		cmp cx, 0
  8780 00006C32 75F5                <2> 		jne swmsy
  8781 00006C34 8B06                <2> noswmsy:	mov eax, [esi]
  8782 00006C36 8B5E04              <2> 		mov ebx, [esi + 4]
  8783 00006C39 8907                <2> 		mov [edi], eax
  8784 00006C3B 895F04              <2> 		mov [edi + 4], ebx
  8785 00006C3E 8B4608              <2> 		mov eax, [esi + 8]
  8786 00006C41 8B5E0C              <2> 		mov ebx, [esi + 12]
  8787 00006C44 894708              <2> 		mov [edi + 8], eax
  8788 00006C47 895F0C              <2> 		mov [edi + 12], ebx
  8789 00006C4A 01D7                <2> 		add edi, edx
  8790 00006C4C 81C610000000        <2> 		add esi, 16
  8791 00006C52 81FE[7D552900]      <2> 		cmp esi, mcolorend
  8792 00006C58 72DA                <2> 		jb noswmsy
  8793                              <2> 		
  8794                              <2> switchmousepos2:
  8795 00006C5A BE[7D542900]        <2> 		mov esi, mousecolorbuf
  8796 00006C5F 8B3D[08580000]      <2> 		mov edi, [physbaseptr]
  8797 00006C65 31D2                <2> 		xor edx, edx
  8798 00006C67 31C9                <2> 		xor ecx, ecx
  8799 00006C69 668B15[D65A0000]    <2> 		mov dx, [mousecursorposition]
  8800 00006C70 668B0D[D85A0000]    <2> 		mov cx, [mousecursorposition + 2]
  8801 00006C77 01D7                <2> 		add edi, edx
  8802 00006C79 31D2                <2> 		xor edx, edx
  8803 00006C7B 668B15[E0580000]    <2> 		mov dx, [resolutionx2]
  8804 00006C82 6681F90000          <2> 		cmp cx, 0
  8805 00006C87 740B                <2> 		je noswmsy2
  8806 00006C89 01D7                <2> swmsy2:		add edi, edx
  8807 00006C8B 6649                <2> 		dec cx
  8808 00006C8D 6681F90000          <2> 		cmp cx, 0
  8809 00006C92 75F5                <2> 		jne swmsy2
  8810 00006C94 8B07                <2> noswmsy2:	mov eax, [edi]
  8811 00006C96 8B5F04              <2> 		mov ebx, [edi + 4]
  8812 00006C99 8906                <2> 		mov [esi], eax
  8813 00006C9B 895E04              <2> 		mov [esi + 4], ebx
  8814 00006C9E 8B4708              <2> 		mov eax, [edi + 8]
  8815 00006CA1 8B5F0C              <2> 		mov ebx, [edi + 12]
  8816 00006CA4 894608              <2> 		mov [esi + 8], eax
  8817 00006CA7 895E0C              <2> 		mov [esi + 12], ebx
  8818 00006CAA 01D7                <2> 		add edi, edx
  8819 00006CAC 81C610000000        <2> 		add esi, 16
  8820 00006CB2 81FE[7D552900]      <2> 		cmp esi, mcolorend
  8821 00006CB8 72DA                <2> 		jb noswmsy2
  8822 00006CBA C3                  <2> 		ret
  8823                              <2> 		
  8824                              <1> %include "source/gui/icon.asm"
  8825 00006CBB 0000                <2> iconcolor dw 0
  8826                              <2> 	showicon:	;;icon in si, position in (dx,cx), selected in ax, code in bx
  8827 00006CBD A2[95860000]        <2> 		mov [iconselected], al
  8828 00006CC2 8025[95860000]01    <2> 		and byte [iconselected], 1
  8829 00006CC9 B401                <2> 		mov ah, 1
  8830 00006CCB E8C9160000          <2> 		call graphicsadd
  8831                              <2> 	showicon2:
  8832 00006CD0 8B3D[08580000]      <2> 		mov edi, [physbaseptr]
  8833 00006CD6 6601D2              <2> 		add dx, dx
  8834 00006CD9 663B15[E0580000]    <2> 		cmp dx, [resolutionx2]
  8835 00006CE0 720C                <2> 		jb screenxgood
  8836 00006CE2 668B15[E0580000]    <2> 		mov dx, [resolutionx2]
  8837 00006CE9 6681EA4000          <2> 		sub dx, 64
  8838                              <2> 	screenxgood:
  8839 00006CEE 6681F90000          <2> 		cmp cx, 0
  8840 00006CF3 742B                <2> 		je noscreenygoodchk
  8841 00006CF5 663B0D[F4570000]    <2> 		cmp cx, [resolutiony]
  8842 00006CFC 720C                <2> 		jb screenygood
  8843 00006CFE 668B0D[F4570000]    <2> 		mov cx, [resolutiony]
  8844 00006D05 6681E92000          <2> 		sub cx, 32
  8845                              <2> 	screenygood:
  8846 00006D0A 50                  <2> 		push eax
  8847 00006D0B 52                  <2> 		push edx
  8848 00006D0C 31C0                <2> 		xor eax, eax
  8849 00006D0E 31DB                <2> 		xor ebx, ebx
  8850 00006D10 668B1D[E0580000]    <2> 		mov bx, [resolutionx2]
  8851 00006D17 6689C8              <2> 		mov ax, cx
  8852 00006D1A F7E3                <2> 		mul ebx
  8853 00006D1C 01C7                <2> 		add edi, eax
  8854 00006D1E 5A                  <2> 		pop edx
  8855 00006D1F 58                  <2> 		pop eax
  8856                              <2> 	noscreenygoodchk:
  8857 00006D20 31DB                <2> 		xor ebx, ebx
  8858 00006D22 6689D3              <2> 		mov bx, dx
  8859 00006D25 01DF                <2> 		add edi, ebx
  8860 00006D27 6631C9              <2> 		xor cx, cx
  8861 00006D2A 668B06              <2> 		mov ax, [esi]
  8862 00006D2D 81C602000000        <2> 		add esi, 2
  8863 00006D33 66A3[BB6C0000]      <2> 		mov [iconcolor], ax
  8864                              <2> 	writeicon:
  8865 00006D39 8B06                <2> 		mov eax, [esi]
  8866 00006D3B D1C0                <2> 		rol eax, 1
  8867 00006D3D 30C9                <2> 		xor cl, cl
  8868                              <2> 	writeiconline:
  8869 00006D3F B201                <2> 		mov dl, 1
  8870 00006D41 20C2                <2> 		and dl, al
  8871 00006D43 3215[95860000]      <2> 		xor dl, [iconselected]
  8872 00006D49 668B1D[4D6F0000]    <2> 		mov bx, [background]
  8873 00006D50 66891F              <2> 		mov [edi], bx
  8874 00006D53 80FA00              <2> 		cmp dl, 0
  8875 00006D56 740A                <2> 		je noiconline
  8876 00006D58 668B15[BB6C0000]    <2> 		mov dx, [iconcolor]
  8877 00006D5F 668917              <2> 		mov [edi], dx
  8878                              <2> 	noiconline:
  8879 00006D62 81C702000000        <2> 		add edi, 2
  8880 00006D68 D1C0                <2> 		rol eax, 1
  8881 00006D6A FEC1                <2> 		inc cl
  8882 00006D6C 80F920              <2> 		cmp cl, 32
  8883 00006D6F 72CE                <2> 		jb writeiconline
  8884 00006D71 81C604000000        <2> 		add esi, 4
  8885 00006D77 FEC5                <2> 		inc ch
  8886 00006D79 31D2                <2> 		xor edx, edx
  8887 00006D7B 668B15[E0580000]    <2> 		mov dx, [resolutionx2]
  8888 00006D82 01D7                <2> 		add edi, edx
  8889 00006D84 81EF40000000        <2> 		sub edi, 64
  8890 00006D8A 80FD20              <2> 		cmp ch, 32
  8891 00006D8D 72AA                <2> 		jb writeicon
  8892 00006D8F 31C0                <2> 		xor eax, eax
  8893 00006D91 C3                  <2> 		ret
  8894                              <1> %include "source/gui/line.asm"
  8895                              <2> drawline:	;from (bx,ax) to (dx,cx), color in si
  8896 00006D92 668935[B46E0000]    <2> 	mov [.color], si
  8897 00006D99 C605[B66E0000]00    <2> 	mov byte [.steep], 0
  8898 00006DA0 C605[B76E0000]00    <2> 	mov byte [.yreversed], 0
  8899 00006DA7 E907000000          <2> 	jmp .notsteep
  8900                              <2> .steeploop:
  8901 00006DAC C605[B66E0000]01    <2> 	mov byte [.steep], 1
  8902                              <2> .notsteep:
  8903 00006DB3 31FF                <2> 	xor edi, edi
  8904 00006DB5 31F6                <2> 	xor esi, esi
  8905 00006DB7 6639DA              <2> 	cmp dx, bx
  8906 00006DBA 7705                <2> 	ja .noreversex
  8907 00006DBC 6687D3              <2> 	xchg dx, bx
  8908 00006DBF 6691                <2> 	xchg cx, ax
  8909                              <2> .noreversex:
  8910 00006DC1 6689D7              <2> 	mov di, dx
  8911 00006DC4 6629DF              <2> 	sub di, bx
  8912                              <2> 	
  8913 00006DC7 6639C1              <2> 	cmp cx, ax
  8914 00006DCA 720B                <2> 	jb .reversey
  8915 00006DCC 6689CE              <2> 	mov si, cx
  8916 00006DCF 6629C6              <2> 	sub si, ax
  8917 00006DD2 E90D000000          <2> 	jmp .normal
  8918                              <2> .reversey:
  8919 00006DD7 C605[B76E0000]02    <2> 	mov byte [.yreversed], 2
  8920 00006DDE 6689C6              <2> 	mov si, ax
  8921 00006DE1 6629CE              <2> 	sub si, cx	
  8922                              <2> .normal:
  8923 00006DE4 6687CA              <2> 	xchg cx, dx
  8924 00006DE7 6693                <2> 	xchg ax, bx
  8925 00006DE9 6639FE              <2> 	cmp si, di
  8926 00006DEC 77BE                <2> 	ja .steeploop
  8927 00006DEE 6687CA              <2> 	xchg cx, dx
  8928 00006DF1 6693                <2> 	xchg ax, bx
  8929                              <2> 	
  8930 00006DF3 6691                <2> 	xchg ax, cx
  8931 00006DF5 6687DA              <2> 	xchg bx, dx
  8932 00006DF8 66893D[BA6E0000]    <2> 	mov [.xdelta], di
  8933 00006DFF 668935[BC6E0000]    <2> 	mov [.ydelta], si
  8934 00006E06 668B35[B46E0000]    <2> 	mov si, [.color]
  8935 00006E0D 66891D[B86E0000]    <2> 	mov [.endline], bx
  8936 00006E14 6652                <2> 	push dx
  8937 00006E16 6651                <2> 	push cx
  8938 00006E18 6687CA              <2> 	xchg cx, dx
  8939 00006E1B 803D[B66E0000]01    <2> 	cmp byte [.steep], 1
  8940 00006E22 7403                <2> 	je .xchg
  8941 00006E24 6687D1              <2> 	xchg dx, cx
  8942                              <2> .xchg:
  8943 00006E27 E841180000          <2> 	call getpixelmem	;get pointer to pixel in edi from (dx,cx)
  8944 00006E2C 6659                <2> 	pop cx
  8945 00006E2E 665A                <2> 	pop dx
  8946 00006E30 31C0                <2> 	xor eax, eax
  8947 00006E32 66A1[BA6E0000]      <2> 	mov ax, [.xdelta]
  8948 00006E38 66D1E8              <2> 	shr ax, 1
  8949 00006E3B 8A0D[B66E0000]      <2> 	mov cl, [.steep]
  8950 00006E41 0A0D[B76E0000]      <2> 	or cl, [.yreversed]
  8951 00006E47 55                  <2> 	push ebp
  8952 00006E48 668B2D[B86E0000]    <2> 	mov bp, [.endline]
  8953 00006E4F 6629D5              <2> 	sub bp, dx
  8954 00006E52 668B15[BC6E0000]    <2> 	mov dx, [.ydelta]
  8955                              <2> .lp:
  8956 00006E59 668937              <2> 	mov [edi], si
  8957 00006E5C 6639D0              <2> 	cmp ax, dx
  8958 00006E5F 7332                <2> 	jae .noaddx
  8959 00006E61 F6C102              <2> 	test cl, 2
  8960 00006E64 7414                <2> 	jz .nodecy
  8961 00006E66 F6C101              <2> 	test cl, 1
  8962 00006E69 7509                <2> 	jnz .steepy
  8963 00006E6B 29DF                <2> 	sub edi, ebx
  8964 00006E6D 29DF                <2> 	sub edi, ebx
  8965 00006E6F E906000000          <2> 	jmp .nodecy
  8966                              <2> .steepy:
  8967 00006E74 81EF04000000        <2> 	sub edi, 4
  8968                              <2> .nodecy:
  8969 00006E7A 660305[BA6E0000]    <2> 	add ax, [.xdelta]
  8970 00006E81 F6C101              <2> 	test cl, 1
  8971 00006E84 7507                <2> 	jnz .steepx
  8972 00006E86 01DF                <2> 	add edi, ebx
  8973 00006E88 E906000000          <2> 	jmp .noaddx
  8974                              <2> .steepx:
  8975 00006E8D 81C702000000        <2> 	add edi, 2
  8976                              <2> .noaddx:
  8977 00006E93 6629D0              <2> 	sub ax, dx
  8978 00006E96 664D                <2> 	dec bp
  8979 00006E98 81C702000000        <2> 	add edi, 2
  8980 00006E9E F6C101              <2> 	test cl, 1
  8981 00006EA1 7408                <2> 	jz .nosteepx
  8982 00006EA3 81EF02000000        <2> 	sub edi, 2
  8983 00006EA9 01DF                <2> 	add edi, ebx
  8984                              <2> .nosteepx:
  8985 00006EAB 6681FD0000          <2> 	cmp bp, 0
  8986 00006EB0 75A7                <2> 	jne .lp
  8987                              <2> .done:
  8988 00006EB2 5D                  <2> 	pop ebp
  8989 00006EB3 C3                  <2> 	ret
  8990                              <2> 	
  8991 00006EB4 0000                <2> .color dw 0
  8992 00006EB6 00                  <2> .steep db 0
  8993 00006EB7 00                  <2> .yreversed db 0
  8994 00006EB8 0000                <2> .endline dw 0
  8995 00006EBA 0000                <2> .xdelta dw 0
  8996 00006EBC 0000                <2> .ydelta dw 0
  8997                              <1> %include "source/gui/refresh.asm"
  8998                              <2> guiclear:
  8999 00006EBE 8B3D[08580000]      <2> 	mov edi, [physbaseptr]
  9000 00006EC4 668B15[F2570000]    <2> 	mov dx, [resolutionx]
  9001 00006ECB 668B0D[F4570000]    <2> 	mov cx, [resolutiony]
  9002 00006ED2 668B1D[4D6F0000]    <2> 	mov bx, [background]
  9003 00006ED9 66891D[4F6F0000]    <2> 	mov [background + 2], bx
  9004                              <2> %ifdef gui.background
  9005 00006EE0 813D[1F6F0000]0000- <2> 	cmp dword [backgroundimage], 0
  9006 00006EE8 0000                <2>
  9007 00006EEA 7437                <2> 	je guiclear.noback
  9008 00006EEC 8B35[1F6F0000]      <2> 		mov esi, [backgroundimage]
  9009                              <2> 	.lp:
  9010                              <2> 		;movdqa xmm0, [esi]	;the next 4 lines are for SSE
  9011                              <2> 		;movdqa [edi], xmm0
  9012                              <2> 		;add esi, 16
  9013                              <2> 		;add edi, 16
  9014                              <2> 		;sub dx, 8
  9015 00006EF2 8B06                <2> 		mov eax, [esi]
  9016 00006EF4 8907                <2> 		mov [edi], eax
  9017 00006EF6 81C604000000        <2> 		add esi, 4
  9018 00006EFC 81C704000000        <2> 		add edi, 4
  9019 00006F02 6681EA0200          <2> 		sub dx, 2
  9020 00006F07 6681FA0000          <2> 		cmp dx, 0
  9021 00006F0C 77E4                <2> 		ja .lp
  9022 00006F0E 6649                <2> 		dec cx
  9023 00006F10 668B15[F2570000]    <2> 		mov dx, [resolutionx]
  9024 00006F17 6681F90000          <2> 		cmp cx, 0
  9025 00006F1C 77D4                <2> 		ja .lp
  9026 00006F1E C3                  <2> 		ret
  9027 00006F1F 00000000            <2> 	backgroundimage dd 0
  9028                              <2> %endif
  9029                              <2> guiclear.noback:
  9030 00006F23 A1[4D6F0000]        <2> 	mov eax, [background]
  9031                              <2> guiclearloop:
  9032 00006F28 8907                <2> 	mov [edi], eax
  9033 00006F2A 81C704000000        <2> 	add edi, 4
  9034 00006F30 6681EA0200          <2> 	sub dx, 2
  9035 00006F35 6681FA0000          <2> 	cmp dx, 0
  9036 00006F3A 77EC                <2> 	ja guiclearloop
  9037 00006F3C 6649                <2> 	dec cx
  9038 00006F3E 668B15[F2570000]    <2> 	mov dx, [resolutionx]
  9039 00006F45 6681F90000          <2> 	cmp cx, 0
  9040 00006F4A 77DC                <2> 	ja guiclearloop
  9041 00006F4C C3                  <2> 	ret
  9042                              <2> 
  9043 00006F4D CF7B<rept>          <2> background times 2 dw 0111101111001111b
  9044                              <2> 	.original equ 0111101111001111b
  9045                              <2> 
  9046                              <2> reloadallgraphics:
  9047 00006F51 BF[7D3E0100]        <2> 		mov edi, graphicstable
  9048                              <2> reloadgraphicsloop:
  9049 00006F56 8B7702              <2> 		mov esi, [edi + 2]
  9050 00006F59 668B5706            <2> 		mov dx, [edi + 6]
  9051 00006F5D 668B4F08            <2> 		mov cx, [edi + 8]
  9052 00006F61 668B07              <2> 		mov ax, [edi]
  9053 00006F64 668B5F0A            <2> 		mov bx, [edi + 10]
  9054 00006F68 893D[85830000]      <2> 		mov [grpctblpos], edi
  9055 00006F6E 3B3D[1C7E0000]      <2> 		cmp edi, [dragging]
  9056 00006F74 741E                <2> 		je loadedgraphic
  9057 00006F76 663D0100            <2> 		cmp ax, 1
  9058 00006F7A 0F8436000000        <2> 		je near icongraphic
  9059 00006F80 663D0200            <2> 		cmp ax, 2
  9060 00006F84 0F843C000000        <2> 		je near stringgraphic
  9061 00006F8A 663D0300            <2> 		cmp ax, 3
  9062 00006F8E 0F8416000000        <2> 		je near windowgraphic
  9063 00006F94 8B3D[85830000]      <2> loadedgraphic:  mov edi, [grpctblpos]
  9064 00006F9A 81C710000000        <2> 		add edi, 16
  9065 00006FA0 81FF[7D400100]      <2> 		cmp edi, graphicstableend
  9066 00006FA6 732E                <2> 		jae donereloadgraphics
  9067 00006FA8 EBAC                <2> 		jmp reloadgraphicsloop
  9068                              <2> windowgraphic:
  9069 00006FAA E82F090000          <2> 		call showwindow2
  9070 00006FAF E864AEFFFF          <2> 		call cleardouble
  9071 00006FB4 EBDE                <2> 		jmp loadedgraphic
  9072 00006FB6 80E301              <2> icongraphic:	and bl, 1
  9073 00006FB9 881D[95860000]      <2> 		mov [iconselected], bl
  9074 00006FBF E80CFDFFFF          <2> 		call showicon2
  9075 00006FC4 EBCE                <2> 		jmp loadedgraphic
  9076 00006FC6 80E301              <2> stringgraphic:  and bl, 1
  9077 00006FC9 881D[187E0000]      <2> 		mov [mouseselecton], bl
  9078 00006FCF E8D6050000          <2> 		call showstring2
  9079 00006FD4 EBBE                <2> 		jmp loadedgraphic
  9080                              <2> donereloadgraphics:
  9081 00006FD6 8B3D[1C7E0000]      <2> 		mov edi, [dragging]
  9082 00006FDC 81FF[7D3E0100]      <2> 		cmp edi, graphicstable
  9083 00006FE2 7226                <2> 		jb notcorrectdrag
  9084 00006FE4 668B07              <2> 		mov ax, [edi]
  9085 00006FE7 8B7702              <2> 		mov esi, [edi + 2]
  9086 00006FEA 668B5706            <2> 		mov dx, [edi + 6]
  9087 00006FEE 668B4F08            <2> 		mov cx, [edi + 8]
  9088 00006FF2 668B5F0A            <2> 		mov bx, [edi + 10]
  9089 00006FF6 663D0100            <2> 		cmp ax, 1
  9090 00006FFA 750F                <2> 		jne noticondragging
  9091 00006FFC 80E301              <2> 		and bl, 1
  9092 00006FFF 881D[95860000]      <2> 		mov [iconselected], bl
  9093 00007005 E8C6FCFFFF          <2> 		call showicon2
  9094                              <2> notcorrectdrag:
  9095 0000700A C3                  <2> 		ret
  9096                              <2> 
  9097                              <2> 	noticondragging:
  9098 0000700B 663D0200            <2> 		cmp ax, 2
  9099 0000700F 75F9                <2> 		jne notcorrectdrag
  9100 00007011 80E301              <2> 		and bl, 1
  9101 00007014 881D[187E0000]      <2> 		mov [mouseselecton], bl
  9102 0000701A E88B050000          <2> 		call showstring2
  9103 0000701F EBE9                <2> 		jmp notcorrectdrag
  9104                              <1> %include "source/gui/square.asm"
  9105                              <2> drawsquare:	;from (bx,ax) to (dx,cx), color in si
  9106 00007021 6639D3              <2> 	cmp bx, dx
  9107 00007024 7303                <2> 	jae .noxchgx
  9108 00007026 6687DA              <2> 	xchg bx, dx
  9109                              <2> .noxchgx:
  9110 00007029 6639C8              <2> 	cmp ax, cx
  9111 0000702C 7302                <2> 	jae .noxchgy
  9112 0000702E 6691                <2> 	xchg ax, cx
  9113                              <2> .noxchgy:
  9114 00007030 6650                <2> 	push ax
  9115 00007032 6653                <2> 	push bx
  9116 00007034 6652                <2> 	push dx
  9117 00007036 E832160000          <2> 	call getpixelmem	;get pointer to pixel in edi from (dx,cx)
  9118 0000703B 31D2                <2> 	xor edx, edx
  9119 0000703D 665A                <2> 	pop dx
  9120 0000703F 31DB                <2> 	xor ebx, ebx
  9121 00007041 665B                <2> 	pop bx
  9122 00007043 6658                <2> 	pop ax
  9123                              <2> .lp0:
  9124 00007045 6652                <2> 	push dx
  9125                              <2> .lp:
  9126 00007047 668937              <2> 	mov [edi], si
  9127 0000704A 81C702000000        <2> 	add edi, 2
  9128 00007050 6642                <2> 	inc dx
  9129 00007052 6639DA              <2> 	cmp dx, bx
  9130 00007055 76F0                <2> 	jbe .lp
  9131 00007057 665A                <2> 	pop dx
  9132 00007059 81EF02000000        <2> 	sub edi, 2
  9133 0000705F 29DF                <2> 	sub edi, ebx
  9134 00007061 29DF                <2> 	sub edi, ebx
  9135 00007063 01D7                <2> 	add edi, edx
  9136 00007065 01D7                <2> 	add edi, edx
  9137 00007067 033D[E0580000]      <2> 	add edi, [resolutionx2]
  9138 0000706D 6641                <2> 	inc cx
  9139 0000706F 6639C1              <2> 	cmp cx, ax
  9140 00007072 7203                <2> 	jb .lp2
  9141 00007074 74CF                <2> 	je .lp0
  9142 00007076 C3                  <2> 	ret
  9143                              <2> .lp2:
  9144 00007077 57                  <2> 	push edi
  9145 00007078 668937              <2> 	mov [edi], si
  9146 0000707B 29D7                <2> 	sub edi, edx
  9147 0000707D 29D7                <2> 	sub edi, edx
  9148 0000707F 01DF                <2> 	add edi, ebx
  9149 00007081 01DF                <2> 	add edi, ebx
  9150 00007083 668937              <2> 	mov [edi], si
  9151 00007086 5F                  <2> 	pop edi
  9152 00007087 033D[E0580000]      <2> 	add edi, [resolutionx2]
  9153 0000708D 6641                <2> 	inc cx
  9154 0000708F 6639C1              <2> 	cmp cx, ax
  9155 00007092 72E3                <2> 	jb .lp2
  9156 00007094 EBAF                <2> 	jmp .lp0
  9157                              <2> 
  9158                              <2> fillsquare:	;from (bx,ax) to (dx,cx), color in si
  9159 00007096 6639D3              <2> 	cmp bx, dx
  9160 00007099 7303                <2> 	jae .noxchgx
  9161 0000709B 6687DA              <2> 	xchg bx, dx
  9162                              <2> .noxchgx:
  9163 0000709E 6639C8              <2> 	cmp ax, cx
  9164 000070A1 7302                <2> 	jae .noxchgy
  9165 000070A3 6691                <2> 	xchg ax, cx
  9166                              <2> .noxchgy:
  9167 000070A5 6650                <2> 	push ax
  9168 000070A7 6653                <2> 	push bx
  9169 000070A9 6652                <2> 	push dx
  9170 000070AB E8BD150000          <2> 	call getpixelmem	;get pointer to pixel in edi from (dx,cx)
  9171 000070B0 31D2                <2> 	xor edx, edx
  9172 000070B2 665A                <2> 	pop dx
  9173 000070B4 31DB                <2> 	xor ebx, ebx
  9174 000070B6 665B                <2> 	pop bx
  9175 000070B8 6658                <2> 	pop ax
  9176                              <2> .lp2
  9177 000070BA 6652                <2> 	push dx
  9178                              <2> .lp:
  9179 000070BC 668937              <2> 	mov [edi], si
  9180 000070BF 81C702000000        <2> 	add edi, 2
  9181 000070C5 6642                <2> 	inc dx
  9182 000070C7 6639DA              <2> 	cmp dx, bx
  9183 000070CA 76F0                <2> 	jbe .lp
  9184 000070CC 665A                <2> 	pop dx
  9185 000070CE 81EF02000000        <2> 	sub edi, 2
  9186 000070D4 29DF                <2> 	sub edi, ebx
  9187 000070D6 29DF                <2> 	sub edi, ebx
  9188 000070D8 01D7                <2> 	add edi, edx
  9189 000070DA 01D7                <2> 	add edi, edx
  9190 000070DC 033D[E0580000]      <2> 	add edi, [resolutionx2]
  9191 000070E2 6641                <2> 	inc cx
  9192 000070E4 6639C1              <2> 	cmp cx, ax
  9193 000070E7 76D1                <2> 	jbe .lp2
  9194 000070E9 C3                  <2> 	ret
  9195                              <1> %include "source/gui/startup.asm"
  9196                              <2> guisetup:
  9197                              <2> 	%ifdef gui.background
  9198 000070EA 31DB                <2> 	xor ebx, ebx
  9199 000070EC 891D[1F6F0000]      <2> 	mov [backgroundimage], ebx
  9200                              <2> 	%endif
  9201 000070F2 E8C7FDFFFF          <2> 	call guiclear
  9202 000070F7 C605[9C8B0000]01    <2> 	mov byte [guion], 1
  9203 000070FE C605[187E0000]00    <2> 	mov byte [mouseselecton], 0
  9204 00007105 31C0                <2> 	xor eax, eax
  9205 00007107 31DB                <2> 	xor ebx, ebx
  9206 00007109 31C9                <2> 	xor ecx, ecx
  9207 0000710B 31D2                <2> 	xor edx, edx
  9208                              <2> 	
  9209 0000710D BE[CF720000]        <2> 	mov esi, pacmsg
  9210 00007112 30E4                <2> 	xor ah, ah
  9211 00007114 B010                <2> 	mov al, 00010000b
  9212 00007116 31DB                <2> 	xor ebx, ebx
  9213 00007118 66B99000            <2> 	mov cx, 144
  9214 0000711C 66BA0400            <2> 	mov dx, 4
  9215 00007120 E872040000          <2> 	call showstring
  9216                              <2> 	
  9217 00007125 BE[0D730000]        <2> 	mov esi, interneticon
  9218 0000712A 30E4                <2> 	xor ah, ah
  9219 0000712C B010                <2> 	mov al, 00010000b
  9220 0000712E BB[F8710000]        <2> 	mov ebx, noie
  9221 00007133 66B91800            <2> 	mov cx, 24
  9222 00007137 66BA0400            <2> 	mov dx, 4
  9223 0000713B E87DFBFFFF          <2> 	call showicon
  9224                              <2> 	
  9225 00007140 BE[8F730000]        <2> 	mov esi, wordicon
  9226 00007145 30E4                <2> 	xor ah, ah
  9227 00007147 B010                <2> 	mov al, 00010000b
  9228 00007149 31DB                <2> 	xor ebx, ebx
  9229 0000714B 66B91800            <2> 	mov cx, 24
  9230 0000714F 66BA3000            <2> 	mov dx, 48
  9231 00007153 E865FBFFFF          <2> 	call showicon
  9232                              <2> 	
  9233 00007158 BE[11740000]        <2> 	mov esi, pacmanpellet
  9234 0000715D 30E4                <2> 	xor ah, ah
  9235 0000715F B010                <2> 	mov al, 00010000b
  9236 00007161 31DB                <2> 	xor ebx, ebx
  9237 00007163 66B94000            <2> 	mov cx, 64
  9238 00007167 66BA0400            <2> 	mov dx, 4
  9239 0000716B E84DFBFFFF          <2> 	call showicon
  9240                              <2> 	
  9241 00007170 BE[15750000]        <2> 	mov esi, pacman
  9242 00007175 30E4                <2> 	xor ah, ah
  9243 00007177 B010                <2> 	mov al, 00010000b
  9244 00007179 BB[E1710000]        <2> 	mov ebx, pacmannomnom
  9245 0000717E 66B94000            <2> 	mov cx, 64
  9246 00007182 66BA3000            <2> 	mov dx, 48
  9247 00007186 E832FBFFFF          <2> 	call showicon
  9248                              <2> 	
  9249 0000718B BE[93740000]        <2> 	mov esi, ghostie
  9250 00007190 30E4                <2> 	xor ah, ah
  9251 00007192 B010                <2> 	mov al, 00010000b
  9252 00007194 BB[CA710000]        <2> 	mov ebx, boo
  9253 00007199 66B96C00            <2> 	mov cx, 108
  9254 0000719D 66BA0400            <2> 	mov dx, 4
  9255 000071A1 E817FBFFFF          <2> 	call showicon
  9256                              <2> 	
  9257 000071A6 BE[B1720000]        <2> 	mov esi, start
  9258 000071AB 668B0D[F4570000]    <2> 	mov cx, [resolutiony]
  9259 000071B2 6681E91000          <2> 	sub cx, 16
  9260 000071B7 66BA0200            <2> 	mov dx, 2
  9261 000071BB 30E4                <2> 	xor ah, ah
  9262 000071BD B010                <2> 	mov al, 00010000b
  9263 000071BF BB[6D720000]        <2> 	mov ebx, winblows
  9264 000071C4 E8CE030000          <2> 	call showstring
  9265                              <2> 
  9266                              <2> %ifdef gui.time	
  9267                              <2> 	call guitime	;load time into timeshow/dateshow and show it
  9268                              <2> %endif
  9269 000071C9 C3                  <2> 	ret
  9270                              <2> 
  9271                              <2> 	boo:
  9272 000071CA BE[CA720000]        <2> 		mov esi, boomsg
  9273 000071CF 66BA6400            <2> 		mov dx, 100
  9274 000071D3 66B94001            <2> 		mov cx, 320
  9275 000071D7 31DB                <2> 		xor ebx, ebx
  9276 000071D9 6631C0              <2> 		xor ax, ax
  9277 000071DC E9B6030000          <2> 		jmp showstring
  9278                              <2> 
  9279                              <2> 	pacmannomnom:
  9280 000071E1 BE[E8720000]        <2> 		mov esi, pacnom
  9281 000071E6 66BA8200            <2> 		mov dx, 130
  9282 000071EA 66B93C00            <2> 		mov cx, 60
  9283 000071EE 31DB                <2> 		xor ebx, ebx
  9284 000071F0 6631C0              <2> 		xor ax, ax
  9285 000071F3 E99F030000          <2> 		jmp showstring	
  9286                              <2> 	
  9287                              <2> 	noie:
  9288 000071F8 66C705[F7720000]80- <2> 		mov word [termwindow], 640
  9289 00007200 02                  <2>
  9290 00007201 66C705[F9720000]E0- <2> 		mov word [termwindow + 2], 480	;the previous lines of code make a large terminal window that is 4 characters smaller than the screen
  9291 00007209 01                  <2>
  9292 0000720A BE[F7720000]        <2> 		mov esi, termwindow
  9293 0000720F 66BA1000            <2> 		mov dx, 16
  9294 00007213 66B91000            <2> 		mov cx, 16
  9295 00007217 31DB                <2> 		xor ebx, ebx
  9296 00007219 6631C0              <2> 		xor ax, ax
  9297 0000721C E803060000          <2> 		call showwindow
  9298 00007221 E90BB9FFFF          <2> 		jmp os
  9299                              <2> 
  9300                              <2> 	gotomenuboot:
  9301 00007226 31D2                <2> 		xor edx, edx
  9302 00007228 31C9                <2> 		xor ecx, ecx
  9303 0000722A 668B15[F2570000]    <2> 		mov dx, [resolutionx]
  9304 00007231 668B0D[F4570000]    <2> 		mov cx, [resolutiony]
  9305 00007238 66C1E904            <2> 		shr cx, 4
  9306 0000723C 6681E90100          <2> 		sub cx, 1
  9307 00007241 66C1E104            <2> 		shl cx, 4
  9308 00007245 668915[F7720000]    <2> 		mov [termwindow], dx
  9309 0000724C 66890D[F9720000]    <2> 		mov [termwindow + 2], cx	;the previous lines of code make a large terminal window that is fullscreen
  9310 00007253 BE[F7720000]        <2> 		mov esi, termwindow
  9311 00007258 6631D2              <2> 		xor dx, dx
  9312 0000725B 6631C9              <2> 		xor cx, cx
  9313 0000725E 31DB                <2> 		xor ebx, ebx
  9314 00007260 6631C0              <2> 		xor ax, ax
  9315 00007263 E8BC050000          <2> 		call showwindow
  9316 00007268 E9C4B8FFFF          <2> 		jmp os
  9317                              <2> 
  9318                              <2> 	winblows:
  9319 0000726D BE[C0720000]        <2> 		mov esi, turnoffmsg
  9320 00007272 BB[54530000]        <2> 		mov ebx, turnoff
  9321 00007277 668B0D[F4570000]    <2> 		mov cx, [resolutiony]
  9322 0000727E 6681E92000          <2> 		sub cx, 32
  9323 00007283 6631D2              <2> 		xor dx, dx
  9324 00007286 30E4                <2> 		xor ah, ah
  9325 00007288 B010                <2> 		mov al, 00010000b
  9326 0000728A E808030000          <2> 		call showstring
  9327 0000728F BE[B7720000]        <2> 		mov esi, gotomenu
  9328 00007294 668B0D[F4570000]    <2> 		mov cx, [resolutiony]
  9329 0000729B 6681E93000          <2> 		sub cx, 48
  9330 000072A0 6631D2              <2> 		xor dx, dx
  9331 000072A3 30E4                <2> 		xor ah, ah
  9332 000072A5 B010                <2> 		mov al, 00010000b
  9333 000072A7 BB[26720000]        <2> 		mov ebx, gotomenuboot
  9334 000072AC E9E6020000          <2> 		jmp showstring
  9335                              <2> 		
  9336                              <2> 
  9337 000072B1 737461727400        <2> 	start	db "start",0
  9338 000072B7 536F6C6C65724F5300  <2> 	gotomenu db "SollerOS",0
  9339 000072C0 506F776572204F6666- <2> 	turnoffmsg db "Power Off",0
  9340 000072C9 00                  <2>
  9341 000072CA 426F6F2100          <2> 	boomsg db "Boo!",0
  9342 000072CF 5061636D616E207761- <2> 	pacmsg	db "Pacman was easy to draw.",0
  9343 000072D8 73206561737920746F- <2>
  9344 000072E1 20647261772E00      <2>
  9345 000072E8 4F6D206E6F6D206E6F- <2> 	pacnom  db "Om nom nom nom",0
  9346 000072F1 6D206E6F6D00        <2>
  9347                              <2> 
  9348 000072F7 20035802            <2> 	termwindow:	dw 800,600	;window size
  9349 000072FB FFFF0000            <2> 				dw 0xFFFF,0	;colors(FG,BG)
  9350 000072FF [7E552900]-         <2> 				dd videobuf,videobuf2 ;location of buffers
  9351 00007303 [C62A2A00]          <2>
  9352 00007307 534855536800        <2> 	termmsg:	db "SHUSh",0	;;window title
  9353                              <2> 	
  9354 00007307 <incbin>            <2> interneticon: 	incbin 'source/gui/icons/internet'
  9355 00007307 <incbin>            <2> wordicon: 	incbin 'source/gui/icons/word'
  9356 00007307 <incbin>            <2> pacmanpellet: incbin 'source/gui/icons/pellet'
  9357 00007307 <incbin>            <2> ghostie	incbin 'source/gui/icons/ghostie'
  9358 00007307 <incbin>            <2> pacman	incbin 'source/gui/icons/pacman'
  9359                              <2> 
  9360                              <2> %ifdef gui.time
  9361                              <2> guitime:
  9362                              <2> 		call time	;get rtc in timeshow & dateshow
  9363                              <2> 		xor ebx, ebx
  9364                              <2> 		mov dx, [resolutionx2]
  9365                              <2> 		xor cx, cx
  9366                              <2> 		sub dx, 304
  9367                              <2> 		mov esi, dateshow
  9368                              <2> 		mov al, 00010001b
  9369                              <2> 		call showstring
  9370                              <2> 		mov esi, timeshow
  9371                              <2> 		xor ebx, ebx
  9372                              <2> 		mov al, 00010001b
  9373                              <2> 		call showstring
  9374                              <2> 		ret
  9375                              <2> %endif
  9376                              <1> %include "source/gui/text.asm"
  9377                              <2> 	showstring:
  9378 00007597 A2[187E0000]        <2> 		mov [mouseselecton], al
  9379 0000759C 8025[187E0000]01    <2> 		and byte [mouseselecton], 1
  9380 000075A3 B402                <2> 		mov ah, 2
  9381 000075A5 E8EF0D0000          <2> 		call graphicsadd
  9382                              <2> 	showstring2:	;location in (dx,cx), color in [colorfont2] and [background]
  9383 000075AA 30E4                <2> 		xor ah, ah
  9384 000075AC 8A06                <2> 		mov al, [esi]
  9385 000075AE 3CC0                <2> 		cmp al, 0xC0
  9386 000075B0 7234                <2> 		jb .doneutf
  9387 000075B2 3CE0                <2> 		cmp al, 0xE0
  9388 000075B4 721D                <2> 		jb .two
  9389 000075B6 46                  <2> 		inc esi
  9390 000075B7 668B1E              <2> 		mov bx, [esi]
  9391 000075BA 46                  <2> 		inc esi
  9392 000075BB C0E004              <2> 		shl al, 4
  9393 000075BE 66C1E302            <2> 		shl bx, 2
  9394 000075C2 C0EF02              <2> 		shr bh, 2
  9395 000075C5 66C1EB02            <2> 		shr bx, 2
  9396 000075C9 08C7                <2> 		or bh, al
  9397 000075CB 6689D8              <2> 		mov ax, bx
  9398 000075CE E913000000          <2> 		jmp .doneutf
  9399                              <2> 	.two:
  9400 000075D3 8A3E                <2> 		mov bh, [esi]
  9401 000075D5 46                  <2> 		inc esi
  9402 000075D6 8A1E                <2> 		mov bl, [esi]
  9403 000075D8 66C1E302            <2> 		shl bx, 2
  9404 000075DC C0EF02              <2> 		shr bh, 2
  9405 000075DF 66C1EB02            <2> 		shr bx, 2
  9406 000075E3 6689D8              <2> 		mov ax, bx
  9407                              <2> 	.doneutf:
  9408 000075E6 3C00                <2> 		cmp al, 0
  9409 000075E8 7420                <2> 		je doneshowstring
  9410 000075EA 46                  <2> 		inc esi
  9411 000075EB 3CFF                <2> 		cmp al, 255
  9412 000075ED 74BB                <2> 		je showstring2
  9413 000075EF 56                  <2> 		push esi
  9414 000075F0 668B1D[12760000]    <2> 		mov bx, [colorfont2]
  9415 000075F7 E827000000          <2> 		call showfontvesa
  9416 000075FC 663D0A00            <2> 		cmp ax, 10
  9417 00007600 7405                <2> 		je noproceedshst
  9418 00007602 6681C20800          <2> 		add dx, 8
  9419                              <2> 	noproceedshst:
  9420 00007607 5E                  <2> 		pop esi
  9421 00007608 EBA0                <2> 		jmp showstring2
  9422                              <2> 	doneshowstring:
  9423 0000760A C605[187E0000]00    <2> 		mov byte [mouseselecton], 0
  9424 00007611 C3                  <2> 		ret
  9425                              <2> 
  9426 00007612 FFFF                <2> colorfont2 dw 0xFFFF
  9427 00007614 00                  <2> colorcache db 0
  9428                              <2> 
  9429 00007615 02                  <2> resolutionbytes db 2
  9430 00007616 0000                <2> posxvesa dw 0
  9431 00007618 0000                <2> posyvesa dw 0
  9432 0000761A FFFF                <2> colorfont dw 0xFFFF
  9433                              <2> savefontvesa:		;same rules as showfontvesa
  9434 0000761C C605[177E0000]01    <2> 	mov byte [savefonton], 1
  9435                              <2> showfontvesa:		;position in (dx,cx), color in bx, char in ax
  9436 00007623 663DFF00            <2> 	cmp ax, 255
  9437 00007627 7501                <2> 	jne nostopshowfont
  9438 00007629 C3                  <2> 	ret
  9439                              <2> nostopshowfont:
  9440 0000762A 55                  <2> 	push ebp
  9441 0000762B 66890D[18760000]    <2> 	mov [posyvesa], cx
  9442 00007632 663D0A00            <2> 	cmp ax, 10
  9443 00007636 0F8424000000        <2> 	je near goodvesafontx
  9444 0000763C 31C9                <2> 	xor ecx, ecx
  9445 0000763E 668B0D[E0580000]    <2> 	mov cx, [resolutionx2]
  9446 00007645 6639CA              <2> 	cmp dx, cx
  9447 00007648 7616                <2> 	jbe goodvesafontx
  9448 0000764A 6631D2              <2> 	xor dx, dx
  9449 0000764D 668B0D[18760000]    <2> 	mov cx, [posyvesa]
  9450 00007654 6681C11000          <2> 	add cx, 16
  9451 00007659 66890D[18760000]    <2> 	mov [posyvesa], cx
  9452                              <2> goodvesafontx:
  9453 00007660 668B0D[18760000]    <2> 	mov cx, [posyvesa]
  9454 00007667 668915[16760000]    <2> 	mov [posxvesa], dx
  9455 0000766E 8B3D[08580000]      <2> 	mov edi, [physbaseptr]
  9456 00007674 66891D[1A760000]    <2> 	mov [colorfont], bx
  9457 0000767B 668B2D[1A760000]    <2> 	mov bp, [colorfont]
  9458 00007682 31DB                <2> 	xor ebx, ebx
  9459 00007684 6689C3              <2> 	mov bx, ax
  9460 00007687 31C0                <2> 	xor eax, eax
  9461 00007689 6689D8              <2> 	mov ax, bx
  9462 0000768C 6689D3              <2> 	mov bx, dx
  9463 0000768F 89DA                <2> 	mov edx, ebx
  9464 00007691 31DB                <2> 	xor ebx, ebx
  9465 00007693 6681F90000          <2> 	cmp cx, 0
  9466 00007698 7414                <2> 	je vesaposloopdn
  9467 0000769A 668B1D[E0580000]    <2> 	mov bx, [resolutionx2]
  9468                              <2> vesaposloop:
  9469 000076A1 52                  <2> 	push edx
  9470 000076A2 50                  <2> 	push eax
  9471 000076A3 31C0                <2> 	xor eax, eax
  9472 000076A5 6689C8              <2> 	mov ax, cx
  9473 000076A8 F7E3                <2> 	mul ebx
  9474 000076AA 01C7                <2> 	add edi, eax
  9475 000076AC 58                  <2> 	pop eax
  9476 000076AD 5A                  <2> 	pop edx
  9477                              <2> vesaposloopdn:
  9478 000076AE 01D7                <2> 	add edi, edx
  9479 000076B0 BE[E68D0000]        <2> 	mov esi, fonts
  9480                              <2> findfontvesa:
  9481 000076B5 663D0A00            <2> 	cmp ax, 10
  9482 000076B9 0F84EB000000        <2> 	je near nwlinevesa
  9483 000076BF C1E004              <2> 	shl eax, 4
  9484 000076C2 01C6                <2> 	add esi, eax
  9485 000076C4 C1E804              <2> 	shr eax, 4
  9486 000076C7 81FE[E60D0100]      <2> 	cmp esi, fontend
  9487 000076CD 0F83AB000000        <2> 	jae near donefontvesa
  9488 000076D3 4E                  <2> 	dec esi
  9489                              <2> foundfontvesa:
  9490 000076D4 46                  <2> 	inc esi
  9491 000076D5 803D[177E0000]01    <2> 	cmp byte [savefonton], 1
  9492 000076DC 0F84E7000000        <2> 	je near vesafontsaver
  9493 000076E2 30C9                <2> 	xor cl, cl
  9494 000076E4 8A06                <2> 	mov al, [esi]
  9495 000076E6 668B15[E0580000]    <2> 	mov dx, [resolutionx2]
  9496 000076ED 662B15[16760000]    <2> 	sub dx, [posxvesa]
  9497 000076F4 6681FA1000          <2> 	cmp dx, 16
  9498 000076F9 7708                <2> 	ja paintfontvesa
  9499 000076FB D0EA                <2> 	shr dl, 1
  9500 000076FD 8815[A9770000]      <2> 	mov [charwidth], dl
  9501                              <2> paintfontvesa:
  9502 00007703 B201                <2> 	mov dl, 1
  9503 00007705 20C2                <2> 	and dl, al
  9504 00007707 803D[167E0000]01    <2> 	cmp byte [showcursorfonton], 1
  9505 0000770E 0F842E000000        <2> 	je near nodelpaintedfont
  9506 00007714 803D[167E0000]02    <2> 	cmp byte [showcursorfonton], 2
  9507 0000771B 0F8511000000        <2> 	jne near noswitchcursorfonton
  9508 00007721 80FA00              <2> 	cmp dl, 0
  9509 00007724 0F8420000000        <2> 	je near nopixelset
  9510 0000772A 66892F              <2> 	mov [edi], bp
  9511 0000772D E918000000          <2> 	jmp nopixelset
  9512                              <2> noswitchcursorfonton:
  9513 00007732 3215[187E0000]      <2> 	xor dl, [mouseselecton]
  9514 00007738 668B1D[4D6F0000]    <2> 	mov bx, [background]
  9515 0000773F 66891F              <2> 	mov [edi], bx
  9516                              <2> nodelpaintedfont:
  9517 00007742 80FA00              <2> 	cmp dl, 0
  9518 00007745 7403                <2> 	je nopixelset
  9519 00007747 66892F              <2> 	mov [edi], bp
  9520                              <2> nopixelset:
  9521 0000774A 81C702000000        <2> 	add edi, 2
  9522 00007750 D0C0                <2> 	rol al, 1
  9523 00007752 FEC1                <2> 	inc cl
  9524 00007754 3A0D[A9770000]      <2> 	cmp cl, [charwidth]
  9525 0000775A 72A7                <2> 	jb paintfontvesa
  9526 0000775C FEC5                <2> 	inc ch
  9527 0000775E 31D2                <2> 	xor edx, edx
  9528 00007760 668B15[E0580000]    <2> 	mov dx, [resolutionx2]
  9529 00007767 01D7                <2> 	add edi, edx
  9530 00007769 31D2                <2> 	xor edx, edx
  9531 0000776B 8A15[A9770000]      <2> 	mov dl, [charwidth]
  9532 00007771 00D2                <2> 	add dl, dl
  9533 00007773 29D7                <2> 	sub edi, edx
  9534 00007775 80FD10              <2> 	cmp ch, 16
  9535 00007778 0F8256FFFFFF        <2> 	jb foundfontvesa
  9536                              <2> donefontvesa:
  9537 0000777E C605[A9770000]08    <2> 	mov byte [charwidth], 8
  9538 00007785 668B15[16760000]    <2> 	mov dx, [posxvesa]
  9539 0000778C 8A1D[A9770000]      <2> 	mov bl, [charwidth]
  9540 00007792 30FF                <2> 	xor bh, bh
  9541 00007794 6601DA              <2> 	add dx, bx
  9542 00007797 6689EB              <2> 	mov bx, bp
  9543 0000779A 668B0D[18760000]    <2> 	mov cx, [posyvesa]
  9544 000077A1 883D[177E0000]      <2> 	mov [savefonton], bh
  9545 000077A7 5D                  <2> 	pop ebp
  9546 000077A8 C3                  <2> 	ret
  9547 000077A9 08                  <2> charwidth db 8
  9548                              <2> nwlinevesa:
  9549 000077AA 6631D2              <2> 	xor dx, dx
  9550 000077AD 668915[16760000]    <2> 	mov [posxvesa], dx
  9551 000077B4 668B0D[18760000]    <2> 	mov cx, [posyvesa]
  9552 000077BB 6681C11000          <2> 	add cx, 16
  9553 000077C0 66890D[18760000]    <2> 	mov [posyvesa], cx
  9554 000077C7 EBB5                <2> 	jmp donefontvesa
  9555                              <2> vesafontsaver:
  9556 000077C9 30C0                <2> 	xor al, al
  9557 000077CB 30C9                <2> 	xor cl, cl
  9558                              <2> vesafontsaver2:
  9559 000077CD 66392F              <2> 	cmp [edi], bp
  9560 000077D0 742C                <2> 	je colorfontmatch
  9561                              <2> donecolormatch:
  9562 000077D2 81C702000000        <2> 	add edi, 2
  9563 000077D8 D0C0                <2> 	rol al, 1
  9564 000077DA FEC1                <2> 	inc cl
  9565 000077DC 80F908              <2> 	cmp cl, 8
  9566 000077DF 72EC                <2> 	jb vesafontsaver2
  9567 000077E1 8806                <2> 	mov [esi], al
  9568 000077E3 46                  <2> 	inc esi
  9569 000077E4 FEC5                <2> 	inc ch
  9570 000077E6 31D2                <2> 	xor edx, edx
  9571 000077E8 668B15[E0580000]    <2> 	mov dx, [resolutionx2]
  9572 000077EF 01D7                <2> 	add edi, edx
  9573 000077F1 81EF10000000        <2> 	sub edi, 16
  9574 000077F7 80FD10              <2> 	cmp ch, 16
  9575 000077FA 72CD                <2> 	jb vesafontsaver
  9576 000077FC EB80                <2> 	jmp donefontvesa
  9577                              <2> colorfontmatch:
  9578 000077FE 0401                <2> 	add al, 1
  9579 00007800 EBD0                <2> 	jmp donecolormatch
  9580                              <1> %include "source/gui/window.asm"
  9581 00007802 0000                <2> winvcopystx dw 0
  9582 00007804 0000                <2> winvcopysty dw 0
  9583 00007806 0000                <2> winvcopydx dw 0
  9584 00007808 0000                <2> winvcopycx dw 0
  9585 0000780A FFFF0000            <2> windowcolor dw 0xFFFF,0
  9586 0000780E 00000000            <2> windowbufloc: dd 0
  9587 00007812 00000000            <2> windowvideobuf dd 0
  9588 00007816 00000000            <2> windowvideobuf2 dd 0
  9589 0000781A 00000000            <2> windowinfobuf dd 0
  9590 0000781E 0000                <2> termcol dw 0
  9591 00007820 00000000            <2> wincopyendpos dd 0
  9592                              <2> 
  9593                              <2> 	showwindow:	;windowstuff in esi, position in (dx, cx), nothing in ax, code in ebx
  9594 00007824 C605[AB230000]01    <2> 		mov byte [termguion], 1
  9595 0000782B 6681C11000          <2> 		add cx, 16
  9596 00007830 668915[02780000]    <2> 		mov [winvcopystx], dx
  9597 00007837 66890D[04780000]    <2> 		mov [winvcopysty], cx
  9598 0000783E 8935[1A780000]      <2> 		mov [windowinfobuf], esi
  9599 00007844 668B16              <2> 		mov dx, [esi]
  9600 00007847 668B4E02            <2> 		mov cx, [esi + 2]
  9601 0000784B 31C0                <2> 		xor eax, eax
  9602 0000784D 31DB                <2> 		xor ebx, ebx
  9603 0000784F 6689D0              <2> 		mov ax, dx
  9604 00007852 6689CB              <2> 		mov bx, cx
  9605 00007855 66C1E803            <2> 		shr ax, 3
  9606 00007859 66C1EB04            <2> 		shr bx, 4
  9607 0000785D 66A3[1E780000]      <2> 		mov [termcol], ax
  9608 00007863 A2[A0250000]        <2> 		mov [charxy], al
  9609 00007868 881D[A1250000]      <2> 		mov [charxy + 1], bl
  9610 0000786E 8B7E04              <2> 		mov edi, [esi + 4]
  9611 00007871 893D[0A780000]      <2> 		mov [windowcolor], edi
  9612 00007877 8B7E0C              <2> 		mov edi, [esi + 12]
  9613 0000787A 893D[16780000]      <2> 		mov [windowvideobuf2], edi
  9614 00007880 8B7E08              <2> 		mov edi, [esi + 8]
  9615 00007883 893D[12780000]      <2> 		mov [windowvideobuf], edi
  9616 00007889 81FB00000000        <2> 		cmp ebx, 0
  9617 0000788F 0F8460050000        <2> 		je near donewincopynow
  9618                              <2> 	findendposwin:
  9619 00007895 C1E002              <2> 		shl eax, 2
  9620 00007898 31D2                <2> 		xor edx, edx
  9621 0000789A F7E3                <2> 		mul ebx
  9622 0000789C 01C7                <2> 		add edi, eax
  9623 0000789E 893D[20780000]      <2> 		mov [wincopyendpos], edi
  9624 000078A4 31FF                <2> 		xor edi, edi
  9625 000078A6 6631C0              <2> 		xor ax, ax
  9626 000078A9 6631DB              <2> 		xor bx, bx
  9627 000078AC 6601D2              <2> 		add dx, dx
  9628 000078AF 668915[06780000]    <2> 		mov [winvcopydx], dx
  9629 000078B6 66890D[08780000]    <2> 		mov [winvcopycx], cx
  9630 000078BD 668B0D[04780000]    <2> 		mov cx, [winvcopysty]
  9631 000078C4 6681E91000          <2> 		sub cx, 16
  9632 000078C9 668B15[02780000]    <2> 		mov dx, [winvcopystx]
  9633 000078D0 C605[AC230000]00    <2> 		mov byte [termcopyon], 0
  9634 000078D7 B403                <2> 		mov ah, 3
  9635 000078D9 E8BB0A0000          <2> 		call graphicsadd
  9636                              <2> 	showwindow2:
  9637 000078DE 6681C11000          <2> 		add cx, 16
  9638 000078E3 668915[02780000]    <2> 		mov [winvcopystx], dx
  9639 000078EA 66890D[04780000]    <2> 		mov [winvcopysty], cx
  9640 000078F1 668B16              <2> 		mov dx, [esi]
  9641 000078F4 668B4E02            <2> 		mov cx, [esi + 2]
  9642 000078F8 6601D2              <2> 		add dx, dx
  9643 000078FB 668915[06780000]    <2> 		mov [winvcopydx], dx
  9644 00007902 66890D[08780000]    <2> 		mov [winvcopycx], cx
  9645 00007909 E818000000          <2> 		call reloadwindowtitle
  9646 0000790E 803D[80830000]01    <2> 		cmp byte [windrag], 1
  9647 00007915 0F83E9040000        <2> 		jae near forgetresetstuff
  9648 0000791B 8B3D[0E780000]      <2> 		mov edi, [windowbufloc]
  9649 00007921 E96E020000          <2> 		jmp windowvideocopyset
  9650                              <2> 		
  9651                              <2> 	reloadwindowtitle:
  9652 00007926 8B3D[0E780000]      <2> 		mov edi, [windowbufloc]
  9653 0000792C 31D2                <2> 		xor edx, edx
  9654 0000792E 668B15[E0580000]    <2> 		mov dx, [resolutionx2]
  9655 00007935 C1E204              <2> 		shl edx, 4
  9656 00007938 29D7                <2> 		sub edi, edx
  9657 0000793A 803D[AC230000]00    <2> 		cmp byte [termcopyon], 0
  9658 00007941 7532                <2> 		jne nocleartitlebarpos
  9659 00007943 8B3D[08580000]      <2> 		mov edi, [physbaseptr]
  9660 00007949 31D2                <2> 		xor edx, edx
  9661 0000794B 668B15[02780000]    <2> 		mov dx, [winvcopystx]
  9662 00007952 01D7                <2> 		add edi, edx
  9663 00007954 31C9                <2> 		xor ecx, ecx
  9664 00007956 668B0D[04780000]    <2> 		mov cx, [winvcopysty]
  9665 0000795D 6681E91000          <2> 		sub cx, 16
  9666 00007962 6681F90000          <2> 		cmp cx, 0
  9667 00007967 740C                <2> 		je nocleartitlebarpos
  9668                              <2> 	cleartitlebarpos:
  9669 00007969 31C0                <2> 		xor eax, eax
  9670 0000796B 66A1[E0580000]      <2> 		mov ax, [resolutionx2]
  9671 00007971 F7E1                <2> 		mul ecx
  9672 00007973 01C7                <2> 		add edi, eax
  9673                              <2> 	nocleartitlebarpos:
  9674 00007975 66B91000            <2> 		mov cx, 16
  9675 00007979 668B15[06780000]    <2> 		mov dx, [winvcopydx]
  9676 00007980 6681F90000          <2> 		cmp cx, 0
  9677 00007985 0F8448000000        <2> 		je near canceltitlebarput
  9678 0000798B 6681FA0000          <2> 		cmp dx, 0
  9679 00007990 0F843D000000        <2> 		je near canceltitlebarput
  9680                              <2> 	titlebarput:
  9681 00007996 66A1[0A780000]      <2> 		mov ax, [windowcolor]
  9682 0000799C 668907              <2> 		mov [edi], ax
  9683 0000799F 6681EA0200          <2> 		sub dx, 2
  9684 000079A4 81C702000000        <2> 		add edi, 2
  9685 000079AA 6681FA0000          <2> 		cmp dx, 0
  9686 000079AF 75E5                <2> 		jne titlebarput
  9687 000079B1 31D2                <2> 		xor edx, edx
  9688 000079B3 668B15[E0580000]    <2> 		mov dx, [resolutionx2]
  9689 000079BA 6649                <2> 		dec cx
  9690 000079BC 662B15[06780000]    <2> 		sub dx, [winvcopydx]
  9691 000079C3 01D7                <2> 		add edi, edx
  9692 000079C5 668B15[06780000]    <2> 		mov dx, [winvcopydx]
  9693 000079CC 6681F90000          <2> 		cmp cx, 0
  9694 000079D1 75C3                <2> 		jne titlebarput
  9695                              <2> 	canceltitlebarput:
  9696 000079D3 893D[0E780000]      <2> 		mov [windowbufloc], edi
  9697 000079D9 803D[AC230000]02    <2> 		cmp byte [termcopyon], 2
  9698 000079E0 0F841C010000        <2> 		je near winvcpst
  9699 000079E6 668B1D[4D6F0000]    <2> 		mov bx, [background]
  9700 000079ED 6653                <2> 		push bx
  9701 000079EF 6631DB              <2> 		xor bx, bx
  9702 000079F2 66891D[4D6F0000]    <2> 		mov [background], bx
  9703 000079F9 6631C0              <2> 		xor ax, ax
  9704 000079FC 81C610000000        <2> 		add esi, 16
  9705 00007A02 668B15[02780000]    <2> 		mov dx, [winvcopystx]
  9706 00007A09 668B0D[04780000]    <2> 		mov cx, [winvcopysty]
  9707 00007A10 6681E91000          <2> 		sub cx, 16
  9708 00007A15 668B1D[0A780000]    <2> 		mov bx, [windowcolor]
  9709 00007A1C C605[187E0000]01    <2> 		mov byte [mouseselecton], 1
  9710 00007A23 E882FBFFFF          <2> 		call showstring2	;Show window title
  9711 00007A28 8B35[CF2C0000]      <2> 		mov esi, [usercache]
  9712 00007A2E 6681C21000          <2> 		add dx, 16
  9713 00007A33 C605[187E0000]01    <2> 		mov byte [mouseselecton], 1
  9714 00007A3A E86BFBFFFF          <2> 		call showstring2	;Show user name
  9715 00007A3F BE[678B0000]        <2> 		mov esi, computer
  9716 00007A44 C605[187E0000]01    <2> 		mov byte [mouseselecton], 1
  9717 00007A4B E85AFBFFFF          <2> 		call showstring2	;Show computer name
  9718 00007A50 66B85800            <2> 		mov ax, "X"
  9719 00007A54 66BB00F8            <2> 		mov bx, 1111100000000000b
  9720 00007A58 668B15[02780000]    <2> 		mov dx, [winvcopystx]
  9721 00007A5F 668B0D[04780000]    <2> 		mov cx, [winvcopysty]
  9722 00007A66 6681E91000          <2> 		sub cx, 16
  9723 00007A6B 6681EA1000          <2> 		sub dx, 16
  9724 00007A70 660315[06780000]    <2> 		add dx, [winvcopydx]
  9725 00007A77 C605[187E0000]01    <2> 		mov byte [mouseselecton], 1
  9726 00007A7E 663B15[E0580000]    <2> 		cmp dx, [resolutionx2]
  9727 00007A85 7305                <2> 		jae .nox
  9728 00007A87 E897FBFFFF          <2> 		call showfontvesa
  9729                              <2> .nox:
  9730 00007A8C 668B1D[4D6F0000]    <2> 		mov bx, [background]
  9731 00007A93 6681EA1800          <2> 		sub dx, 24
  9732 00007A98 66B82B00            <2> 		mov ax, "+"
  9733 00007A9C 66BBE007            <2> 		mov bx, 0000011111100000b
  9734 00007AA0 C605[187E0000]01    <2> 		mov byte [mouseselecton], 1
  9735 00007AA7 663B15[E0580000]    <2> 		cmp dx, [resolutionx2]
  9736 00007AAE 7305                <2> 		jae .noplus
  9737 00007AB0 E86EFBFFFF          <2> 		call showfontvesa
  9738                              <2> .noplus:
  9739 00007AB5 6681EA1800          <2> 		sub dx, 24
  9740 00007ABA 66B82D00            <2> 		mov ax, "-"
  9741 00007ABE 66BBE0FF            <2> 		mov bx, 1111111111100000b
  9742 00007AC2 C605[187E0000]01    <2> 		mov byte [mouseselecton], 1
  9743 00007AC9 663B15[E0580000]    <2> 		cmp dx, [resolutionx2]
  9744 00007AD0 7305                <2> 		jae .nominus
  9745 00007AD2 E84CFBFFFF          <2> 		call showfontvesa
  9746                              <2> .nominus:
  9747 00007AD7 6681EA1800          <2> 		sub dx, 24
  9748 00007ADC 66B83F00            <2> 		mov ax, "?"
  9749 00007AE0 66BB1F00            <2> 		mov bx, 0000000000011111b
  9750 00007AE4 C605[187E0000]01    <2> 		mov byte [mouseselecton], 1
  9751 00007AEB 663B15[E0580000]    <2> 		cmp dx, [resolutionx2]
  9752 00007AF2 7305                <2> 		jae .noquestion
  9753 00007AF4 E82AFBFFFF          <2> 		call showfontvesa
  9754                              <2> .noquestion:
  9755 00007AF9 665B                <2> 		pop bx
  9756 00007AFB 66891D[4D6F0000]    <2> 		mov [background], bx
  9757                              <2> 	winvcpst:
  9758 00007B02 C3                  <2> 		ret
  9759                              <2> 
  9760                              <2> 	windowvideocopy:
  9761 00007B03 8B35[1A780000]      <2> 		mov esi, [windowinfobuf]
  9762 00007B09 668B16              <2> 		mov dx, [esi]
  9763 00007B0C 668B4E02            <2> 		mov cx, [esi + 2]
  9764 00007B10 8B7E04              <2> 		mov edi, [esi + 4]
  9765 00007B13 893D[0A780000]      <2> 		mov [windowcolor], edi
  9766 00007B19 8B7E08              <2> 		mov edi, [esi + 8]
  9767 00007B1C 8B5E0C              <2> 		mov ebx, [esi + 12]
  9768 00007B1F 893D[12780000]      <2> 		mov [windowvideobuf], edi
  9769 00007B25 891D[16780000]      <2> 		mov [windowvideobuf2], ebx
  9770 00007B2B 31C0                <2> 		xor eax, eax
  9771 00007B2D 31DB                <2> 		xor ebx, ebx
  9772 00007B2F 6689D0              <2> 		mov ax, dx
  9773 00007B32 6689CB              <2> 		mov bx, cx
  9774 00007B35 66C1E803            <2> 		shr ax, 3
  9775 00007B39 66C1EB04            <2> 		shr bx, 4
  9776 00007B3D 66A3[1E780000]      <2> 		mov [termcol], ax
  9777 00007B43 A2[A0250000]        <2> 		mov [charxy], al
  9778 00007B48 881D[A1250000]      <2> 		mov [charxy + 1], bl
  9779 00007B4E 8B3D[0E780000]      <2> 		mov edi, [windowbufloc]
  9780 00007B54 3B3D[08580000]      <2> 		cmp edi, [physbaseptr]
  9781 00007B5A 0F8334000000        <2> 		jae near windowvideocopyset
  9782 00007B60 31C9                <2> 		xor ecx, ecx
  9783 00007B62 31D2                <2> 		xor edx, edx
  9784 00007B64 668B15[02780000]    <2> 		mov dx, [winvcopystx]
  9785 00007B6B 668B0D[04780000]    <2> 		mov cx, [winvcopysty]
  9786 00007B72 8B3D[08580000]      <2> 		mov edi, [physbaseptr]
  9787 00007B78 01D7                <2> 		add edi, edx
  9788 00007B7A 81F900000000        <2> 		cmp ecx, 0
  9789 00007B80 7412                <2> 		je windowvideocopyset
  9790                              <2> 	yrescopylp:
  9791 00007B82 31C0                <2> 		xor eax, eax
  9792 00007B84 66A1[E0580000]      <2> 		mov ax, [resolutionx2]
  9793 00007B8A F7E1                <2> 		mul ecx
  9794 00007B8C 01C7                <2> 		add edi, eax
  9795 00007B8E 893D[0E780000]      <2> 		mov [windowbufloc], edi
  9796                              <2> 	windowvideocopyset:
  9797 00007B94 6631C9              <2> 		xor cx, cx
  9798 00007B97 6649                <2> 		dec cx
  9799 00007B99 66890D[0C7E0000]    <2> 		mov [charposline], cx
  9800 00007BA0 89FE                <2> 		mov esi, edi
  9801 00007BA2 81EE10000000        <2> 		sub esi, 16
  9802 00007BA8 31D2                <2> 		xor edx, edx
  9803 00007BAA 668B15[E0580000]    <2> 		mov dx, [resolutionx2]
  9804 00007BB1 C1E204              <2> 		shl edx, 4
  9805 00007BB4 01D6                <2> 		add esi, edx
  9806 00007BB6 8B3D[12780000]      <2> 		mov edi, [windowvideobuf]
  9807 00007BBC 81EF04000000        <2> 		sub edi, 4
  9808 00007BC2 893D[0E7E0000]      <2> 		mov [charposvbuf], edi
  9809 00007BC8 E91B010000          <2> 		jmp nextcharwin
  9810                              <2> 	win.write:	;adjusted this to use alpha
  9811                              <2> 				;5R, 6G, 5B
  9812                              <2> %ifdef gui.alphablending
  9813 00007BCD 56                  <2> 		push esi
  9814 00007BCE 6653                <2> 		push bx
  9815 00007BD0 6651                <2> 		push cx
  9816 00007BD2 6652                <2> 		push dx
  9817                              <2> %ifdef gui.background
  9818 00007BD4 89FE                <2> 		mov esi, edi
  9819 00007BD6 2B35[08580000]      <2> 		sub esi, [physbaseptr]
  9820 00007BDC 0335[1F6F0000]      <2> 		add esi, [backgroundimage]
  9821 00007BE2 813D[1F6F0000]0000- <2> 		cmp dword [backgroundimage], 0
  9822 00007BEA 0000                <2>
  9823 00007BEC 7505                <2> 		jne .red
  9824                              <2> %endif
  9825 00007BEE BE[4D6F0000]        <2> 		mov esi, background
  9826                              <2> 	.red:
  9827 00007BF3 668B0E              <2> 		mov cx, [esi]
  9828 00007BF6 66C1E90B            <2> 		shr cx, 11
  9829 00007BFA 6689C3              <2> 		mov bx, ax
  9830 00007BFD 66C1EB0B            <2> 		shr bx, 11
  9831 00007C01 6601D9              <2> 		add cx, bx
  9832 00007C04 6601D9              <2> 		add cx, bx
  9833 00007C07 6601D9              <2> 		add cx, bx
  9834 00007C0A 66C1E902            <2> 		shr cx, 2
  9835 00007C0E 66C1E10B            <2> 		shl cx, 11
  9836 00007C12 6689CA              <2> 		mov dx, cx
  9837                              <2> 	.green:
  9838 00007C15 668B0E              <2> 		mov cx, [esi]
  9839 00007C18 66C1E105            <2> 		shl cx, 5
  9840 00007C1C 66C1E90A            <2> 		shr cx, 10
  9841 00007C20 6689C3              <2> 		mov bx, ax
  9842 00007C23 66C1E305            <2> 		shl bx, 5
  9843 00007C27 66C1EB0A            <2> 		shr bx, 10
  9844 00007C2B 6601D9              <2> 		add cx, bx
  9845 00007C2E 6601D9              <2> 		add cx, bx
  9846 00007C31 6601D9              <2> 		add cx, bx
  9847 00007C34 66C1E902            <2> 		shr cx, 2
  9848 00007C38 66C1E105            <2> 		shl cx, 5
  9849 00007C3C 6601CA              <2> 		add dx, cx
  9850                              <2> 	.blue:
  9851 00007C3F 668B0E              <2> 		mov cx, [esi]
  9852 00007C42 66C1E10B            <2> 		shl cx, 11
  9853 00007C46 66C1E90B            <2> 		shr cx, 11
  9854 00007C4A 6689C3              <2> 		mov bx, ax
  9855 00007C4D 66C1E30B            <2> 		shl bx, 11
  9856 00007C51 66C1EB0B            <2> 		shr bx, 11
  9857 00007C55 6601D9              <2> 		add cx, bx
  9858 00007C58 6601D9              <2> 		add cx, bx
  9859 00007C5B 6601D9              <2> 		add cx, bx
  9860 00007C5E 66C1E902            <2> 		shr cx, 2
  9861 00007C62 6601CA              <2> 		add dx, cx
  9862 00007C65 668917              <2> 		mov [edi], dx
  9863 00007C68 665A                <2> 		pop dx
  9864 00007C6A 6659                <2> 		pop cx
  9865 00007C6C 665B                <2> 		pop bx
  9866 00007C6E 5E                  <2> 		pop esi
  9867                              <2> %else
  9868                              <2> 		mov [edi], ax
  9869                              <2> %endif
  9870 00007C6F C3                  <2> 		ret
  9871                              <2> 	copywindow:
  9872 00007C70 B201                <2> 		mov dl, 1
  9873 00007C72 D0C6                <2> 		rol dh, 1
  9874 00007C74 20F2                <2> 		and dl, dh
  9875 00007C76 66813D[14760000]80- <2> 		cmp word [colorcache], 0x80
  9876 00007C7E 00                  <2>
  9877 00007C7F 7320                <2> 		jae switchwincolors
  9878 00007C81 66A1[0C780000]      <2> 		mov ax, [windowcolor + 2]
  9879 00007C87 E841FFFFFF          <2> 		call win.write
  9880 00007C8C 80FA00              <2> 		cmp dl, 0
  9881 00007C8F 742B                <2> 		je nowritewin
  9882 00007C91 66A1[0A780000]      <2> 		mov ax, [windowcolor]
  9883 00007C97 E831FFFFFF          <2> 		call win.write
  9884 00007C9C E91B000000          <2> 		jmp nowritewin
  9885                              <2> 	switchwincolors:
  9886 00007CA1 66A1[0A780000]      <2> 		mov ax, [windowcolor]
  9887 00007CA7 E821FFFFFF          <2> 		call win.write
  9888 00007CAC 80FA00              <2> 		cmp dl, 0
  9889 00007CAF 740B                <2> 		je nowritewin
  9890 00007CB1 66A1[0C780000]      <2> 		mov ax, [windowcolor + 2]
  9891 00007CB7 E811FFFFFF          <2> 		call win.write
  9892                              <2> 	nowritewin:
  9893 00007CBC 81C702000000        <2> 		add edi, 2
  9894 00007CC2 FEC1                <2> 		inc cl
  9895 00007CC4 80F908              <2> 		cmp cl, 8
  9896 00007CC7 75A7                <2> 		jne copywindow
  9897 00007CC9 43                  <2> 		inc ebx
  9898 00007CCA 30C9                <2> 		xor cl, cl
  9899 00007CCC 31D2                <2> 		xor edx, edx
  9900 00007CCE 668B15[E0580000]    <2> 		mov dx, [resolutionx2]
  9901 00007CD5 01D6                <2> 		add esi, edx
  9902 00007CD7 89F7                <2> 		mov edi, esi
  9903 00007CD9 8AB3[E68D0000]      <2> 		mov dh, [fonts + ebx]
  9904 00007CDF D0CE                <2> 		ror dh, 1
  9905 00007CE1 FEC5                <2> 		inc ch
  9906 00007CE3 80FD10              <2> 		cmp ch, 16
  9907 00007CE6 7588                <2> 		jne copywindow
  9908                              <2> 	nextcharwin:
  9909 00007CE8 6631C9              <2> 		xor cx, cx
  9910 00007CEB 8B3D[0E7E0000]      <2> 		mov edi, [charposvbuf]
  9911 00007CF1 81C704000000        <2> 		add edi, 4
  9912 00007CF7 3B3D[20780000]      <2> 		cmp edi, [wincopyendpos]
  9913 00007CFD 0F83F2000000        <2> 		jae near donewincopynow
  9914 00007D03 668B5F02            <2> 		mov bx, [edi + 2]
  9915 00007D07 6681FB0000          <2> 		cmp bx, 0
  9916 00007D0C 7508                <2> 		jne nofixcolorwin
  9917 00007D0E 66BB0700            <2> 		mov bx, 7
  9918 00007D12 66895F02            <2> 		mov [edi + 2], bx
  9919                              <2> 	nofixcolorwin:
  9920 00007D16 66891D[14760000]    <2> 		mov [colorcache], bx
  9921 00007D1D 8B1F                <2> 		mov ebx, [edi]
  9922 00007D1F 893D[0E7E0000]      <2> 		mov [charposvbuf], edi
  9923 00007D25 813D[16780000]0000- <2> 		cmp dword [windowvideobuf2], 0
  9924 00007D2D 0000                <2>
  9925 00007D2F 7455                <2> 		je noskipcharcopy
  9926 00007D31 2B3D[12780000]      <2> 		sub edi, [windowvideobuf]
  9927 00007D37 033D[16780000]      <2> 		add edi, [windowvideobuf2]
  9928 00007D3D 8B07                <2> 		mov eax, [edi]
  9929 00007D3F 39D8                <2> 		cmp eax, ebx
  9930 00007D41 7543                <2> 		jne noskipcharcopy
  9931                              <2> 	skipcharcopy:
  9932 00007D43 81C610000000        <2> 		add esi, 16
  9933 00007D49 668B0D[0C7E0000]    <2> 		mov cx, [charposline]
  9934 00007D50 6641                <2> 		inc cx
  9935 00007D52 66890D[0C7E0000]    <2> 		mov [charposline], cx
  9936 00007D59 663B0D[1E780000]    <2> 		cmp cx, [termcol]
  9937 00007D60 7286                <2> 		jb nextcharwin
  9938 00007D62 6631C9              <2> 		xor cx, cx
  9939 00007D65 66890D[0C7E0000]    <2> 		mov [charposline], cx
  9940 00007D6C 31D2                <2> 		xor edx, edx
  9941 00007D6E 668B15[E0580000]    <2> 		mov dx, [resolutionx2]
  9942 00007D75 C1E204              <2> 		shl edx, 4
  9943 00007D78 662B15[06780000]    <2> 		sub dx, [winvcopydx]
  9944 00007D7F 01D6                <2> 		add esi, edx
  9945 00007D81 E962FFFFFF          <2> 		jmp nextcharwin
  9946                              <2> 	noskipcharcopy:
  9947 00007D86 891F                <2> 		mov [edi], ebx
  9948 00007D88 8B3D[0E7E0000]      <2> 		mov edi, [charposvbuf]
  9949 00007D8E C1E310              <2> 		shl ebx, 16
  9950 00007D91 C1EB0C              <2> 		shr ebx, 12
  9951 00007D94 31D2                <2> 		xor edx, edx
  9952 00007D96 668B15[E0580000]    <2> 		mov dx, [resolutionx2]
  9953 00007D9D C1E204              <2> 		shl edx, 4
  9954 00007DA0 29D6                <2> 		sub esi, edx
  9955 00007DA2 81C610000000        <2> 		add esi, 16
  9956 00007DA8 89F7                <2> 		mov edi, esi
  9957 00007DAA 668B0D[0C7E0000]    <2> 		mov cx, [charposline]
  9958 00007DB1 6641                <2> 		inc cx
  9959 00007DB3 663B0D[1E780000]    <2> 		cmp cx, [termcol]
  9960 00007DBA 7317                <2> 		jae fixwindowcopy
  9961 00007DBC 66890D[0C7E0000]    <2> 		mov [charposline], cx
  9962 00007DC3 6631C9              <2> 		xor cx, cx
  9963 00007DC6 8AB3[E68D0000]      <2> 		mov dh, [fonts + ebx]
  9964 00007DCC D0CE                <2> 		ror dh, 1
  9965 00007DCE E99DFEFFFF          <2> 		jmp copywindow
  9966                              <2> fixwindowcopy:
  9967 00007DD3 6631C9              <2> 		xor cx, cx
  9968 00007DD6 66890D[0C7E0000]    <2> 		mov [charposline], cx
  9969 00007DDD 662B15[06780000]    <2> 		sub dx, [winvcopydx]
  9970 00007DE4 01D6                <2> 		add esi, edx
  9971 00007DE6 89F7                <2> 		mov edi, esi
  9972 00007DE8 8AB3[E68D0000]      <2> 		mov dh, [fonts + ebx]
  9973 00007DEE D0CE                <2> 		ror dh, 1
  9974 00007DF0 E97BFEFFFF          <2> 		jmp copywindow
  9975                              <2> donewincopynow:
  9976 00007DF5 803D[AC230000]01    <2> 		cmp byte [termcopyon], 1
  9977 00007DFC 7506                <2> 		jne forgetresetstuff
  9978 00007DFE E8C1ABFFFF          <2> 		call switchtermcursor
  9979 00007E03 61                  <2> 		popa
  9980                              <2> forgetresetstuff:
  9981 00007E04 C605[AC230000]00    <2> 		mov byte [termcopyon], 0
  9982 00007E0B C3                  <2> 		ret
  9983                              <2> 		
  9984 00007E0C 0000                <2> charposline dw 0
  9985 00007E0E 00000000            <2> charposvbuf dw 0,0
  9986                              <1> 				
  9987 00007E12 00                  <1> copygui db 0
  9988 00007E13 00                  <1> graphicsset db 0
  9989 00007E14 0000                <1> graphicspos db 0,0
  9990 00007E16 00                  <1> showcursorfonton db 0
  9991 00007E17 00                  <1> savefonton db 0
  9992 00007E18 00                  <1> mouseselecton db 0
  9993                              <1> 
  9994 00007E19 00                  <1> pbutton db 0
  9995 00007E1A 00                  <1> pLBUTTON db 0
  9996 00007E1B 00                  <1> pRBUTTON db 0
  9997 00007E1C 00000000            <1> dragging dw 0,0
  9998 00007E20 0000000000000000    <1> lastpos dw 0,0,0,0
  9999 00007E28 00000000            <1> colorbuf dw 0,0
 10000                              <1> 	
 10001                              <1> 	clickicon:
 10002 00007E2C B001                <1> 		mov al, 1
 10003 00007E2E A2[197E0000]        <1> 		mov [pbutton], al
 10004 00007E33 A0[1A7E0000]        <1> 		mov al, [pLBUTTON]
 10005 00007E38 2205[E75B0000]      <1> 		and al, [LBUTTON]
 10006 00007E3E 8A25[1B7E0000]      <1> 		mov ah, [pRBUTTON]
 10007 00007E44 2225[E85B0000]      <1> 		and ah, [RBUTTON]
 10008 00007E4A 08E0                <1> 		or al, ah
 10009 00007E4C 3C00                <1> 		cmp al, 0
 10010 00007E4E 741B                <1> 		je nodragclick
 10011 00007E50 813D[1C7E0000]0100- <1> 		cmp dword [dragging], 1
 10012 00007E58 0000                <1>
 10013 00007E5A 732F                <1> 		jae dragclick
 10014 00007E5C C705[1C7E0000]0100- <1> 		mov dword [dragging], 1
 10015 00007E64 0000                <1>
 10016 00007E66 E920000000          <1> 		jmp dragclick
 10017                              <1> 	nodragclick:
 10018 00007E6B 31C0                <1> 		xor eax, eax
 10019 00007E6D A3[1C7E0000]        <1> 		mov dword [dragging], eax
 10020 00007E72 A2[197E0000]        <1> 		mov [pbutton], al
 10021 00007E77 A0[E75B0000]        <1> 		mov al, [LBUTTON]
 10022 00007E7C A2[1A7E0000]        <1> 		mov [pLBUTTON], al
 10023 00007E81 A0[E85B0000]        <1> 		mov al, [RBUTTON]
 10024 00007E86 A2[1B7E0000]        <1> 		mov [pRBUTTON], al
 10025                              <1> 	dragclick:
 10026 00007E8B 6631C0              <1> 		xor ax, ax
 10027 00007E8E BE[7D3E0100]        <1> 		mov esi, graphicstable
 10028 00007E93 C705[91860000]0000- <1> 		mov dword [codepointer], 0
 10029 00007E9B 0000                <1>
 10030                              <1> 	clicon2:
 10031 00007E9D 31D2                <1> 		xor edx, edx
 10032 00007E9F 31C9                <1> 		xor ecx, ecx
 10033 00007EA1 66813E0100          <1> 		cmp word [esi], 1
 10034 00007EA6 0F841B000000        <1> 		je near iconselect
 10035 00007EAC 66813E0200          <1> 		cmp word [esi], 2
 10036 00007EB1 0F8472010000        <1> 		je near textselected
 10037 00007EB7 66813E0300          <1> 		cmp word [esi], 3
 10038 00007EBC 0F84C7020000        <1> 		je near windowselect
 10039 00007EC2 E910040000          <1> 		jmp nexticonsel
 10040                              <1> 	iconselect:
 10041 00007EC7 668B5606            <1> 		mov dx, [esi + 6]
 10042 00007ECB 6689D0              <1> 		mov ax, dx
 10043 00007ECE 668B4E08            <1> 		mov cx, [esi + 8]
 10044 00007ED2 6689CB              <1> 		mov bx, cx
 10045 00007ED5 6681C32000          <1> 		add bx, 32
 10046 00007EDA 6601D0              <1> 		add ax, dx
 10047 00007EDD 813D[1C7E0000]0100- <1> 		cmp dword [dragging], 1
 10048 00007EE5 0000                <1>
 10049 00007EE7 746F                <1> 		je dragicon
 10050 00007EE9 813D[1C7E0000]0000- <1> 		cmp dword [dragging], 0
 10051 00007EF1 0000                <1>
 10052 00007EF3 7411                <1> 		je nodragiconcheck
 10053 00007EF5 3935[1C7E0000]      <1> 		cmp dword [dragging], esi
 10054 00007EFB 0F85D6030000        <1> 		jne near nexticonsel
 10055 00007F01 E952000000          <1> 		jmp dragicon
 10056                              <1> 	nodragiconcheck:
 10057 00007F06 663905[D65A0000]    <1> 		cmp [mousecursorposition], ax
 10058 00007F0D 0F82C4030000        <1> 		jb near nexticonsel
 10059 00007F13 66054000            <1> 		add ax, 64
 10060 00007F17 663905[D65A0000]    <1> 		cmp [mousecursorposition], ax
 10061 00007F1E 0F87B3030000        <1> 		ja near nexticonsel
 10062 00007F24 6629D0              <1> 		sub ax, dx
 10063 00007F27 66390D[D85A0000]    <1> 		cmp [mousecursorposition + 2], cx
 10064 00007F2E 0F82A3030000        <1> 		jb near nexticonsel
 10065 00007F34 66391D[D85A0000]    <1> 		cmp [mousecursorposition + 2], bx
 10066 00007F3B 0F8796030000        <1> 		ja near nexticonsel
 10067 00007F41 668B460A            <1> 		mov ax, [esi + 10]
 10068 00007F45 66250100            <1> 		and ax, 1
 10069 00007F49 663D0100            <1> 		cmp ax, 1
 10070 00007F4D 0F84B6000000        <1> 		je near unselecticon
 10071 00007F53 E98D000000          <1> 		jmp nodragicon
 10072                              <1> 	dragicon:
 10073 00007F58 663905[D25A0000]    <1> 		cmp [lastmouseposition], ax
 10074 00007F5F 0F8272030000        <1> 		jb near nexticonsel
 10075 00007F65 66054000            <1> 		add ax, 64
 10076 00007F69 663905[D25A0000]    <1> 		cmp [lastmouseposition], ax
 10077 00007F70 0F8761030000        <1> 		ja near nexticonsel
 10078 00007F76 6629D0              <1> 		sub ax, dx
 10079 00007F79 66390D[D45A0000]    <1> 		cmp [lastmouseposition + 2], cx
 10080 00007F80 0F8251030000        <1> 		jb near nexticonsel
 10081 00007F86 66391D[D45A0000]    <1> 		cmp [lastmouseposition + 2], bx
 10082 00007F8D 0F8744030000        <1> 		ja near nexticonsel
 10083 00007F93 668B460A            <1> 		mov ax, [esi + 10]
 10084 00007F97 2410                <1> 		and al, 00010000b
 10085 00007F99 3C10                <1> 		cmp al, 00010000b
 10086 00007F9B 7448                <1> 		je nodragicon
 10087 00007F9D 8935[1C7E0000]      <1> 		mov [dragging], esi
 10088 00007FA3 66D1E2              <1> 		shl dx, 1
 10089 00007FA6 662B15[D25A0000]    <1> 		sub dx, [lastmouseposition]
 10090 00007FAD 660315[D65A0000]    <1> 		add dx, [mousecursorposition]
 10091 00007FB4 66D1EA              <1> 		shr dx, 1
 10092 00007FB7 66030D[D85A0000]    <1> 		add cx, [mousecursorposition + 2]
 10093 00007FBE 662B0D[D45A0000]    <1> 		sub cx, [lastmouseposition + 2]
 10094 00007FC5 663B15[E0580000]    <1> 		cmp dx, [resolutionx2]
 10095 00007FCC 7607                <1> 		jbe chkyresdrgicn
 10096 00007FCE 668B15[D65A0000]    <1> 		mov dx, [mousecursorposition]
 10097                              <1> 	chkyresdrgicn:
 10098 00007FD5 663B0D[F4570000]    <1> 		cmp cx, [resolutiony]
 10099 00007FDC 7607                <1> 		jbe nodragicon
 10100 00007FDE 668B0D[D85A0000]    <1> 		mov cx, [mousecursorposition + 2]
 10101                              <1> 	nodragicon:
 10102 00007FE5 66814E0A0100        <1> 		or word [esi + 10], 1
 10103 00007FEB 8B5E0C              <1> 		mov ebx, [esi + 12]
 10104 00007FEE 668B460A            <1> 		mov ax, [esi + 10]
 10105 00007FF2 8B7602              <1> 		mov esi, [esi + 2]
 10106 00007FF5 C705[91860000]0000- <1> 		mov dword [codepointer], 0
 10107 00007FFD 0000                <1>
 10108 00007FFF E8B9ECFFFF          <1> 		call showicon
 10109 00008004 E9E7020000          <1> 		jmp doneiconsel
 10110                              <1> 	unselecticon:
 10111 00008009 6681660AFEFF        <1> 		and word [esi + 10], 0xFFFE
 10112 0000800F 8B5E0C              <1> 		mov ebx, [esi + 12]
 10113 00008012 668B460A            <1> 		mov ax, [esi + 10]
 10114 00008016 8B7602              <1> 		mov esi, [esi + 2]
 10115 00008019 891D[91860000]      <1> 		mov [codepointer], ebx
 10116 0000801F E899ECFFFF          <1> 		call showicon
 10117 00008024 E9C7020000          <1> 		jmp doneiconsel
 10118                              <1> 	textselected:
 10119 00008029 8B5E02              <1> 		mov ebx, [esi + 2]
 10120 0000802C 668B5606            <1> 		mov dx, [esi + 6]
 10121 00008030 6689D0              <1> 		mov ax, dx
 10122 00008033 668B4E08            <1> 		mov cx, [esi + 8]
 10123                              <1> 	lengthtesttext:
 10124 00008037 803B00              <1> 		cmp byte [ebx], 0
 10125 0000803A 7407                <1> 		je donetesttextlength
 10126 0000803C 43                  <1> 		inc ebx
 10127 0000803D 66051000            <1> 		add ax, 16
 10128 00008041 EBF4                <1> 		jmp lengthtesttext
 10129                              <1> 	donetesttextlength:
 10130 00008043 6689CB              <1> 		mov bx, cx
 10131 00008046 6681C30F00          <1> 		add bx, 15
 10132 0000804B 813D[1C7E0000]0100- <1> 		cmp dword [dragging], 1
 10133 00008053 0000                <1>
 10134 00008055 7468                <1> 		je dragtext
 10135 00008057 813D[1C7E0000]0000- <1> 		cmp dword [dragging], 0
 10136 0000805F 0000                <1>
 10137 00008061 7411                <1> 		je nodragtextcheck
 10138 00008063 3935[1C7E0000]      <1> 		cmp dword [dragging], esi
 10139 00008069 0F8568020000        <1> 		jne near nexticonsel
 10140 0000806F E94B000000          <1> 		jmp dragtext
 10141                              <1> 	nodragtextcheck:
 10142 00008074 663915[D65A0000]    <1> 		cmp [mousecursorposition], dx
 10143 0000807B 0F8256020000        <1> 		jb near nexticonsel
 10144 00008081 663905[D65A0000]    <1> 		cmp [mousecursorposition], ax
 10145 00008088 0F8749020000        <1> 		ja near nexticonsel
 10146 0000808E 66390D[D85A0000]    <1> 		cmp [mousecursorposition + 2], cx
 10147 00008095 0F823C020000        <1> 		jb near nexticonsel
 10148 0000809B 66391D[D85A0000]    <1> 		cmp [mousecursorposition + 2], bx
 10149 000080A2 0F872F020000        <1> 		ja near nexticonsel
 10150 000080A8 668B460A            <1> 		mov ax, [esi + 10]
 10151 000080AC 66250100            <1> 		and ax, 1
 10152 000080B0 663D0100            <1> 		cmp ax, 1
 10153 000080B4 0F84AB000000        <1> 		je near unselecttext
 10154 000080BA E986000000          <1> 		jmp nodragtext
 10155                              <1> 	dragtext:
 10156 000080BF 663915[D25A0000]    <1> 		cmp [lastmouseposition], dx
 10157 000080C6 0F820B020000        <1> 		jb near nexticonsel
 10158 000080CC 663905[D25A0000]    <1> 		cmp [lastmouseposition], ax
 10159 000080D3 0F87FE010000        <1> 		ja near nexticonsel
 10160 000080D9 66390D[D45A0000]    <1> 		cmp [lastmouseposition + 2], cx
 10161 000080E0 0F82F1010000        <1> 		jb near nexticonsel
 10162 000080E6 66391D[D45A0000]    <1> 		cmp [lastmouseposition + 2], bx
 10163 000080ED 0F87E4010000        <1> 		ja near nexticonsel
 10164 000080F3 668B460A            <1> 		mov ax, [esi + 10]
 10165 000080F7 2410                <1> 		and al, 00010000b
 10166 000080F9 663D1000            <1> 		cmp ax, 00010000b
 10167 000080FD 0F8442000000        <1> 		je near nodragtext
 10168 00008103 8935[1C7E0000]      <1> 		mov [dragging], esi
 10169 00008109 662B15[D25A0000]    <1> 		sub dx, [lastmouseposition]
 10170 00008110 660315[D65A0000]    <1> 		add dx, [mousecursorposition]
 10171 00008117 66030D[D85A0000]    <1> 		add cx, [mousecursorposition + 2]
 10172 0000811E 662B0D[D45A0000]    <1> 		sub cx, [lastmouseposition + 2]
 10173 00008125 663B15[E0580000]    <1> 		cmp dx, [resolutionx2]
 10174 0000812C 7607                <1> 		jbe chkyresdrgtxt
 10175 0000812E 668B15[D65A0000]    <1> 		mov dx, [mousecursorposition]
 10176                              <1> 	chkyresdrgtxt:
 10177 00008135 663B0D[F4570000]    <1> 		cmp cx, [resolutiony]
 10178 0000813C 7607                <1> 		jbe nodragtext
 10179 0000813E 668B0D[D85A0000]    <1> 		mov cx, [mousecursorposition + 2]
 10180                              <1> 	nodragtext:
 10181 00008145 66814E0A0100        <1> 		or word [esi + 10], 1
 10182 0000814B 8B5E0C              <1> 		mov ebx, [esi + 12]
 10183 0000814E 891D[91860000]      <1> 		mov [codepointer], ebx
 10184 00008154 668B460A            <1> 		mov ax, [esi + 10]
 10185 00008158 8B7602              <1> 		mov esi, [esi + 2]
 10186 0000815B E837F4FFFF          <1> 		call showstring
 10187 00008160 E98B010000          <1> 		jmp doneiconsel
 10188                              <1> 	unselecttext:
 10189 00008165 6681660AFEFF        <1> 		and word [esi + 10], 0xFFFE
 10190 0000816B 8B5E0C              <1> 		mov ebx, [esi + 12]
 10191 0000816E 668B460A            <1> 		mov ax, [esi + 10]
 10192 00008172 8B7602              <1> 		mov esi, [esi + 2]
 10193 00008175 C705[91860000]0000- <1> 		mov dword [codepointer], 0
 10194 0000817D 0000                <1>
 10195 0000817F E813F4FFFF          <1> 		call showstring
 10196 00008184 E967010000          <1> 		jmp doneiconsel
 10197                              <1> windowselect:
 10198 00008189 8B7E02              <1> 		mov edi, [esi + 2]
 10199 0000818C 668B5606            <1> 		mov dx, [esi + 6]
 10200 00008190 6689D0              <1> 		mov ax, dx
 10201 00008193 668B4E08            <1> 		mov cx, [esi + 8]
 10202 00008197 6689CB              <1> 		mov bx, cx
 10203 0000819A 6681C31000          <1> 		add bx, 16
 10204 0000819F 813D[1C7E0000]0100- <1> 		cmp dword [dragging], 1
 10205 000081A7 0000                <1>
 10206 000081A9 746D                <1> 		je dragwin
 10207 000081AB 813D[1C7E0000]0000- <1> 		cmp dword [dragging], 0
 10208 000081B3 0000                <1>
 10209 000081B5 7411                <1> 		je nodragwincheck
 10210 000081B7 3935[1C7E0000]      <1> 		cmp dword [dragging], esi
 10211 000081BD 0F8514010000        <1> 		jne near nexticonsel
 10212 000081C3 E950000000          <1> 		jmp dragwin
 10213                              <1> 	nodragwincheck:
 10214 000081C8 663905[D65A0000]    <1> 		cmp [mousecursorposition], ax
 10215 000081CF 0F8202010000        <1> 		jb near nexticonsel
 10216 000081D5 660307              <1> 		add ax, [edi]
 10217 000081D8 660307              <1> 		add ax, [edi]
 10218 000081DB 663905[D65A0000]    <1> 		cmp [mousecursorposition], ax
 10219 000081E2 0F87EF000000        <1> 		ja near nexticonsel
 10220 000081E8 66390D[D85A0000]    <1> 		cmp [mousecursorposition + 2], cx
 10221 000081EF 0F82E2000000        <1> 		jb near nexticonsel
 10222 000081F5 66391D[D85A0000]    <1> 		cmp [mousecursorposition + 2], bx
 10223 000081FC 0F87D5000000        <1> 		ja near nexticonsel
 10224 00008202 662D1400            <1> 		sub ax, 20
 10225 00008206 663905[D65A0000]    <1> 		cmp [mousecursorposition], ax
 10226 0000820D 0F87A4000000        <1> 		ja near killwin
 10227 00008213 E98B000000          <1> 		jmp nodragwin
 10228                              <1> 	dragwin:
 10229 00008218 663905[D25A0000]    <1> 		cmp [lastmouseposition], ax
 10230 0000821F 0F82B2000000        <1> 		jb near nexticonsel
 10231 00008225 660307              <1> 		add ax, [edi]
 10232 00008228 660307              <1> 		add ax, [edi]
 10233 0000822B 663905[D25A0000]    <1> 		cmp [lastmouseposition], ax
 10234 00008232 0F879F000000        <1> 		ja near nexticonsel
 10235 00008238 66390D[D45A0000]    <1> 		cmp [lastmouseposition + 2], cx
 10236 0000823F 0F8292000000        <1> 		jb near nexticonsel
 10237 00008245 66391D[D45A0000]    <1> 		cmp [lastmouseposition + 2], bx
 10238 0000824C 0F8785000000        <1> 		ja near nexticonsel
 10239 00008252 8935[1C7E0000]      <1> 		mov [dragging], esi
 10240 00008258 803D[80830000]01    <1> 		cmp byte [windrag], 1
 10241 0000825F 7706                <1> 		ja .nochangewindrag
 10242 00008261 FE05[80830000]      <1> 		inc byte [windrag]
 10243                              <1> 	.nochangewindrag:
 10244 00008267 662B15[D25A0000]    <1> 		sub dx, [lastmouseposition]
 10245 0000826E 660315[D65A0000]    <1> 		add dx, [mousecursorposition]
 10246 00008275 66030D[D85A0000]    <1> 		add cx, [mousecursorposition + 2]
 10247 0000827C 662B0D[D45A0000]    <1> 		sub cx, [lastmouseposition + 2]
 10248 00008283 663B15[E0580000]    <1> 		cmp dx, [resolutionx2]
 10249 0000828A 7607                <1> 		jbe chkyresdrgwin
 10250 0000828C 668B15[D65A0000]    <1> 		mov dx, [mousecursorposition]
 10251                              <1> 	chkyresdrgwin:
 10252 00008293 663B0D[F4570000]    <1> 		cmp cx, [resolutiony]
 10253 0000829A 7607                <1> 		jbe nodragwin
 10254 0000829C 668B0D[D85A0000]    <1> 		mov cx, [mousecursorposition + 2]
 10255                              <1> 	nodragwin:
 10256 000082A3 8B5E0C              <1> 		mov ebx, [esi + 12]
 10257 000082A6 668B460A            <1> 		mov ax, [esi + 10]
 10258 000082AA 8B7602              <1> 		mov esi, [esi + 2]
 10259 000082AD E872F5FFFF          <1> 		call showwindow
 10260 000082B2 E939000000          <1> 		jmp doneiconsel
 10261                              <1> 	killwin:
 10262 000082B7 66C7060000          <1> 		mov word [esi], 0
 10263 000082BC C605[AB230000]00    <1> 		mov byte [termguion], 0
 10264 000082C3 E8F6EBFFFF          <1> 		call guiclear
 10265 000082C8 E884ECFFFF          <1> 		call reloadallgraphics
 10266 000082CD E888E9FFFF          <1> 		call switchmousepos2 ;Copy what is now under the mouse
 10267 000082D2 E920E5FFFF          <1> 		jmp guistart
 10268                              <1> 	nexticonsel:
 10269 000082D7 6681660AFEFF        <1> 		and word [esi + 10], 0xFFFE
 10270 000082DD 81C610000000        <1> 		add esi, 16
 10271 000082E3 81FE[7D400100]      <1> 		cmp esi, graphicstableend
 10272 000082E9 7305                <1> 		jae doneiconsel
 10273 000082EB E9ADFBFFFF          <1> 		jmp clicon2
 10274                              <1> 	doneiconsel:
 10275 000082F0 813D[1C7E0000]0100- <1> 		cmp dword [dragging], 1
 10276 000082F8 0000                <1>
 10277 000082FA 731A                <1> 		jae doneiconsel2
 10278 000082FC A2[80830000]        <1> 		mov [windrag], al
 10279 00008301 813D[91860000]0000- <1> 		cmp dword [codepointer], 0
 10280 00008309 0000                <1>
 10281 0000830B 7409                <1> 		je doneiconsel2
 10282 0000830D 8B1D[91860000]      <1> 		mov ebx, [codepointer]
 10283 00008313 FFD3                <1> 		call ebx
 10284 00008315 C3                  <1> 		ret
 10285                              <1> 	doneiconsel2:
 10286 00008316 A0[E75B0000]        <1> 		mov al, [LBUTTON]
 10287 0000831B A2[1A7E0000]        <1> 		mov [pLBUTTON], al
 10288 00008320 A0[E85B0000]        <1> 		mov al, [RBUTTON]
 10289 00008325 A2[1B7E0000]        <1> 		mov [pRBUTTON], al
 10290 0000832A 813D[1C7E0000]0100- <1> 		cmp dword [dragging], 1
 10291 00008332 0000                <1>
 10292 00008334 0F8618000000        <1> 		jbe near noreloadgraphicsclick
 10293 0000833A E81BE9FFFF          <1> 		call switchmousepos2
 10294 0000833F 803D[80830000]01    <1> 		cmp byte [windrag], 1
 10295 00008346 7305                <1> 		jae noclearcursorcl
 10296 00008348 E811E8FFFF          <1> 		call clearmousecursor
 10297                              <1> noclearcursorcl:
 10298 0000834D E8FFEBFFFF          <1> 		call reloadallgraphics
 10299                              <1> noreloadgraphicsclick:
 10300 00008352 30E4                <1> 		xor ah, ah
 10301 00008354 31C9                <1> 		xor ecx, ecx
 10302 00008356 31D2                <1> 		xor edx, edx
 10303 00008358 B001                <1> 		mov al, 1
 10304 0000835A 668B15[D65A0000]    <1> 		mov dx, [mousecursorposition]
 10305 00008361 668B0D[D85A0000]    <1> 		mov cx, [mousecursorposition + 2]
 10306 00008368 66BBE738            <1> 		mov bx, 0011100011100111b
 10307 0000836C C605[167E0000]01    <1> 		mov byte [showcursorfonton], 1
 10308 00008373 E8ABF2FFFF          <1> 		call showfontvesa
 10309 00008378 C605[167E0000]00    <1> 		mov byte [showcursorfonton], 0
 10310 0000837F C3                  <1> 		ret
 10311 00008380 00                  <1> windrag db 0
 10312 00008381 00000000            <1> lastdrag dw 0,0
 10313 00008385 00000000            <1> grpctblpos dw 0,0
 10314                              <1> 
 10315                              <1> 
 10316                              <1> 
 10317 00008389 00<rept>            <1> grphbuf times 16 db 0
 10318                              <1> 	graphicsadd:
 10319 00008399 BF[7D3E0100]        <1> 		mov edi, graphicstable
 10320                              <1> 	shwgrph1:
 10321 0000839E 397702              <1> 		cmp dword [edi + 2], esi
 10322 000083A1 7414                <1> 		je showgraphicsreplace2
 10323 000083A3 81C710000000        <1> 		add edi, 16
 10324 000083A9 81FF[7D400100]      <1> 		cmp edi, graphicstableend
 10325 000083AF 0F835C020000        <1> 		jae near showgraphicsnew
 10326 000083B5 EBE7                <1> 		jmp shwgrph1
 10327                              <1> 	showgraphicsreplace2:
 10328 000083B7 8935[8B830000]      <1> 		mov [grphbuf + 2], esi
 10329 000083BD 668915[8F830000]    <1> 		mov [grphbuf + 6], dx
 10330 000083C4 66890D[91830000]    <1> 		mov [grphbuf + 8], cx
 10331 000083CB 891D[95830000]      <1> 		mov [grphbuf + 12], ebx
 10332 000083D1 30FF                <1> 		xor bh, bh
 10333 000083D3 88E3                <1> 		mov bl, ah
 10334 000083D5 30E4                <1> 		xor ah, ah
 10335 000083D7 66A3[93830000]      <1> 		mov [grphbuf + 10], ax	
 10336 000083DD 66891D[89830000]    <1> 		mov [grphbuf], bx
 10337 000083E4 66A1[89830000]      <1> 		mov ax, [grphbuf]
 10338 000083EA 663D0100            <1> 		cmp ax, 1
 10339 000083EE 0F8419000000        <1> 		je near replaceicon
 10340 000083F4 663D0200            <1> 		cmp ax, 2
 10341 000083F8 0F8493000000        <1> 		je near replacestring
 10342 000083FE 663D0300            <1> 		cmp ax, 3
 10343 00008402 0F840F010000        <1> 		je near replacewindow
 10344 00008408 E9E1010000          <1> 		jmp showgraphicsreplace
 10345                              <1> 	replaceicon:
 10346 0000840D 893D[207E0000]      <1> 		mov [lastpos], edi
 10347 00008413 8935[247E0000]      <1> 		mov [lastpos + 4], esi
 10348 00008419 8B7702              <1> 		mov esi, [edi + 2]
 10349 0000841C 668B5F0C            <1> 		mov bx, [edi + 12]
 10350 00008420 668B5706            <1> 		mov dx, [edi + 6]
 10351 00008424 668B4F08            <1> 		mov cx, [edi + 8]
 10352 00008428 668B06              <1> 		mov ax, [esi]
 10353 0000842B 66A3[287E0000]      <1> 		mov [colorbuf], ax
 10354 00008431 66A1[4D6F0000]      <1> 		mov ax, [background]
 10355 00008437 668906              <1> 		mov [esi], ax
 10356 0000843A 8B5F0C              <1> 		mov ebx, [edi + 12]
 10357 0000843D 668B470A            <1> 		mov ax, [edi + 10]
 10358 00008441 2401                <1> 		and al, 1
 10359 00008443 A2[95860000]        <1> 		mov [iconselected], al
 10360 00008448 668B470A            <1> 		mov ax, [edi + 10]
 10361 0000844C E87FE8FFFF          <1> 		call showicon2
 10362 00008451 8B3D[207E0000]      <1> 		mov edi, [lastpos]
 10363 00008457 8B7702              <1> 		mov esi, [edi + 2]
 10364 0000845A 66A1[287E0000]      <1> 		mov ax, [colorbuf]
 10365 00008460 668906              <1> 		mov [esi], ax
 10366 00008463 8B35[247E0000]      <1> 		mov esi, [lastpos + 4]
 10367 00008469 668B15[8F830000]    <1> 		mov dx, [grphbuf + 6]
 10368 00008470 668B0D[91830000]    <1> 		mov cx, [grphbuf + 8]
 10369 00008477 668B1D[89830000]    <1> 		mov bx, [grphbuf]
 10370 0000847E 66A1[93830000]      <1> 		mov ax, [grphbuf + 10]
 10371 00008484 88DC                <1> 		mov ah, bl
 10372 00008486 8B1D[95830000]      <1> 		mov ebx, [grphbuf + 12]
 10373 0000848C E95D010000          <1> 		jmp showgraphicsreplace
 10374                              <1> 	replacestring:
 10375 00008491 893D[207E0000]      <1> 		mov [lastpos], edi
 10376 00008497 8935[247E0000]      <1> 		mov [lastpos + 4], esi
 10377 0000849D 8B5F0C              <1> 		mov ebx, [edi + 12]
 10378 000084A0 8B7702              <1> 		mov esi, [edi + 2]
 10379 000084A3 668B5706            <1> 		mov dx, [edi + 6]
 10380 000084A7 668B4F08            <1> 		mov cx, [edi + 8]
 10381 000084AB 66A1[12760000]      <1> 		mov ax, [colorfont2]
 10382 000084B1 66A3[287E0000]      <1> 		mov [colorbuf], ax
 10383 000084B7 66A1[4D6F0000]      <1> 		mov ax, [background]
 10384 000084BD 66A3[12760000]      <1> 		mov [colorfont2], ax		
 10385 000084C3 8B5F0C              <1> 		mov ebx, [edi + 12]
 10386 000084C6 668B470A            <1> 		mov ax, [edi + 10]
 10387 000084CA 2401                <1> 		and al, 1
 10388 000084CC A2[187E0000]        <1> 		mov [mouseselecton], al
 10389 000084D1 668B470A            <1> 		mov ax, [edi + 10]
 10390 000084D5 E8D0F0FFFF          <1> 		call showstring2
 10391 000084DA 66A1[287E0000]      <1> 		mov ax, [colorbuf]
 10392 000084E0 66A3[12760000]      <1> 		mov [colorfont2], ax
 10393 000084E6 8B3D[207E0000]      <1> 		mov edi, [lastpos]
 10394 000084EC 8B7702              <1> 		mov esi, [edi + 2]
 10395 000084EF 668B15[8F830000]    <1> 		mov dx, [grphbuf + 6]
 10396 000084F6 668B0D[91830000]    <1> 		mov cx, [grphbuf + 8]
 10397 000084FD 668B1D[89830000]    <1> 		mov bx, [grphbuf]
 10398 00008504 66A1[93830000]      <1> 		mov ax, [grphbuf + 10]
 10399 0000850A 88DC                <1> 		mov ah, bl
 10400 0000850C 8B1D[95830000]      <1> 		mov ebx, [grphbuf + 12]
 10401 00008512 E9D7000000          <1> 		jmp showgraphicsreplace
 10402                              <1> 	replacewindow:
 10403 00008517 893D[207E0000]      <1> 		mov [lastpos], edi
 10404 0000851D 8935[247E0000]      <1> 		mov [lastpos + 4], esi
 10405 00008523 8B7702              <1> 		mov esi, [edi + 2]
 10406 00008526 8B3D[0E780000]      <1> 		mov edi, [windowbufloc]
 10407 0000852C 31D2                <1> 		xor edx, edx
 10408 0000852E 668B15[E0580000]    <1> 		mov dx, [resolutionx2]
 10409 00008535 C1E204              <1> 		shl edx, 4
 10410 00008538 29D7                <1> 		sub edi, edx
 10411 0000853A 31D2                <1> 		xor edx, edx
 10412 0000853C 668B16              <1> 		mov dx, [esi]
 10413 0000853F 660316              <1> 		add dx, [esi]
 10414 00008542 668B4E02            <1> 		mov cx, [esi + 2]
 10415 00008546 6681C11000          <1> 		add cx, 16
 10416 0000854B 66A1[4D6F0000]      <1> 		mov ax, [background]
 10417 00008551 803D[80830000]01    <1> 		cmp byte [windrag], 1
 10418 00008558 7604                <1> 		jbe clearwindow
 10419 0000855A 662B4E02            <1> 		sub cx, [esi + 2]
 10420                              <1> 	clearwindow:
 10421                              <1> 		%ifdef gui.background
 10422 0000855E 813D[1F6F0000]0000- <1> 			cmp dword [backgroundimage], 0
 10423 00008566 0000                <1>
 10424 00008568 7419                <1> 			je .noback
 10425 0000856A 56                  <1> 			push esi
 10426 0000856B 8B35[1F6F0000]      <1> 			mov esi, [backgroundimage]
 10427 00008571 2B3D[08580000]      <1> 			sub edi, [physbaseptr]
 10428 00008577 01FE                <1> 			add esi, edi
 10429 00008579 033D[08580000]      <1> 			add edi, [physbaseptr]
 10430 0000857F 668B06              <1> 			mov ax, [esi]
 10431 00008582 5E                  <1> 			pop esi
 10432                              <1> 		.noback:
 10433                              <1> 		%endif
 10434 00008583 668907              <1> 		mov [edi], ax
 10435 00008586 81C702000000        <1> 		add edi, 2
 10436 0000858C 81EA02000000        <1> 		sub edx, 2
 10437 00008592 81FA00000000        <1> 		cmp edx, 0
 10438 00008598 75C4                <1> 		jne clearwindow
 10439 0000859A 6649                <1> 		dec cx
 10440 0000859C 668B15[E0580000]    <1> 		mov dx, [resolutionx2]
 10441 000085A3 662B16              <1> 		sub dx, [esi]
 10442 000085A6 662B16              <1> 		sub dx, [esi]
 10443 000085A9 01D7                <1> 		add edi, edx
 10444 000085AB 668B16              <1> 		mov dx, [esi]
 10445 000085AE 660316              <1> 		add dx, [esi]
 10446 000085B1 6681F90000          <1> 		cmp cx, 0
 10447 000085B6 75A6                <1> 		jne clearwindow
 10448                              <1> 	endwindowclear:
 10449 000085B8 C605[AC230000]00    <1> 		mov byte [termcopyon], 0
 10450 000085BF 8B3D[207E0000]      <1> 		mov edi, [lastpos]
 10451 000085C5 8B35[8B830000]      <1> 		mov esi, [grphbuf + 2]
 10452 000085CB 668B15[8F830000]    <1> 		mov dx, [grphbuf + 6]
 10453 000085D2 668B0D[91830000]    <1> 		mov cx, [grphbuf + 8]
 10454 000085D9 668B1D[89830000]    <1> 		mov bx, [grphbuf]
 10455 000085E0 66A1[93830000]      <1> 		mov ax, [grphbuf + 10]
 10456 000085E6 88DC                <1> 		mov ah, bl
 10457 000085E8 8B1D[95830000]      <1> 		mov ebx, [grphbuf + 12]
 10458                              <1> 	showgraphicsreplace:
 10459 000085EE 897702              <1> 		mov [edi + 2], esi
 10460 000085F1 66895706            <1> 		mov [edi + 6], dx
 10461 000085F5 66894F08            <1> 		mov [edi + 8], cx
 10462 000085F9 895F0C              <1> 		mov [edi + 12], ebx
 10463 000085FC 30FF                <1> 		xor bh, bh
 10464 000085FE 88E3                <1> 		mov bl, ah
 10465 00008600 30E4                <1> 		xor ah, ah
 10466 00008602 6689470A            <1> 		mov [edi + 10], ax
 10467 00008606 66891F              <1> 		mov [edi], bx
 10468 00008609 8B5F0C              <1> 		mov ebx, [edi + 12]
 10469 0000860C 668B470A            <1> 		mov ax, [edi + 10]
 10470 00008610 C3                  <1> 		ret
 10471                              <1> 	showgraphicsnew:
 10472 00008611 BF[7D3E0100]        <1> 		mov edi, graphicstable
 10473                              <1> 	shwgrph2:
 10474 00008616 66813F0000          <1> 		cmp word [edi], 0
 10475 0000861B 74D1                <1> 		je showgraphicsreplace
 10476 0000861D 81C710000000        <1> 		add edi, 16
 10477 00008623 81FF[7D400100]      <1> 		cmp edi, graphicstableend
 10478 00008629 72EB                <1> 		jb shwgrph2
 10479                              <1> 	showgraphicsdone:
 10480 0000862B C3                  <1> 		ret
 10481                              <1> 	
 10482                              <1> putpixel: ;color in si, point is (dx,cx)
 10483                              <1> 		;destroys edi, ebx, eax
 10484 0000862C 6650                <1> 	push ax
 10485 0000862E 6653                <1> 	push bx
 10486 00008630 31C0                <1> 	xor eax, eax
 10487 00008632 31DB                <1> 	xor ebx, ebx
 10488 00008634 31FF                <1> 	xor edi, edi
 10489 00008636 668B1D[F4570000]    <1> 	mov bx, [resolutiony]
 10490 0000863D 66A1[F2570000]      <1> 	mov ax, [resolutionx]
 10491 00008643 6639C2              <1> 	cmp dx, ax
 10492 00008646 7720                <1> 	ja .doneput
 10493 00008648 66D1E0              <1> 	shl ax, 1
 10494 0000864B 6639D9              <1> 	cmp cx, bx
 10495 0000864E 7718                <1> 	ja .doneput
 10496 00008650 6689CB              <1> 	mov bx, cx
 10497 00008653 52                  <1> 	push edx
 10498 00008654 F7E3                <1> 	mul ebx
 10499 00008656 5A                  <1> 	pop edx
 10500 00008657 6601D7              <1> 	add di, dx
 10501 0000865A 6601D7              <1> 	add di, dx
 10502 0000865D 01C7                <1> 	add edi, eax
 10503 0000865F 033D[08580000]      <1> 	add edi, [physbaseptr]
 10504 00008665 668937              <1> 	mov [edi], si
 10505                              <1> .doneput:
 10506 00008668 665B                <1> 	pop bx
 10507 0000866A 6658                <1> 	pop ax
 10508 0000866C C3                  <1> 	ret
 10509                              <1> 	
 10510                              <1> getpixelmem:	;pixel in (dx, cx), outputs memory location in edi
 10511 0000866D 31FF                <1> 	xor edi, edi
 10512 0000866F 31C0                <1> 	xor eax, eax
 10513 00008671 31DB                <1> 	xor ebx, ebx
 10514 00008673 668B1D[E0580000]    <1> 	mov bx, [resolutionx2]
 10515 0000867A 6689D7              <1> 	mov di, dx
 10516 0000867D 6601D7              <1> 	add di, dx
 10517 00008680 6689C8              <1> 	mov ax, cx
 10518 00008683 F7E3                <1> 	mul ebx
 10519 00008685 01C7                <1> 	add edi, eax
 10520 00008687 033D[08580000]      <1> 	add edi, [physbaseptr]
 10521 0000868D C3                  <1> 	ret
 10522                              <1> 
 10523 0000868E 00                  <1> 	mouseon db 0
 10524 0000868F 0000                <1> 	icon dw 0	;pointer to icon
 10525 00008691 00000000            <1> 	codepointer dd 0 ;pointer to code
 10526 00008695 00                  <1> 	iconselected db 0
 10527                                  %endif
 10528                                  %ifdef network.included
 10529                                  	%include "source/network.asm"
 10530                              <1> network.init:
 10531                              <1> %ifdef rtl8139.included
 10532                              <1> 	%include "source/drivers/network/rtl8139.asm"
 10533                              <1> %endif
 10534                              <1> %ifdef rtl8169.included
 10535                              <1> 	%include "source/drivers/network/rtl8169.asm"
 10536                              <2> ;RTL8169 NIC DRIVER
 10537                              <2> rtl8169:
 10538 00008696 E805000000          <2> 	call .init
 10539 0000869B E970030000          <2> 	jmp .end
 10540                              <2> 
 10541                              <2> ;REGISTERS
 10542                              <2> .CMD equ 0x37
 10543                              <2> .TXPOLL equ 0x38
 10544                              <2> .TCR equ 0x40
 10545                              <2> .RCR equ 0x44
 10546                              <2> .IMR equ 0x3C
 10547                              <2> .ISR equ 0x3E
 10548                              <2> .LOCK equ 0x50
 10549                              <2> .CONFIG1 equ 0x52
 10550                              <2> .TDSAR equ 0x20
 10551                              <2> .RDSAR equ 0xE4
 10552                              <2> .MAXRX equ 0xDA
 10553                              <2> .MAXTX equ 0xEC
 10554                              <2> ;IMPORTANT VALUES
 10555                              <2> .OWN equ 0x80000000
 10556                              <2> .EOR equ 0x40000000
 10557                              <2> .POLLING equ 0x40
 10558                              <2> ;CODE
 10559                              <2> .init:	;should find card, get mac, and initialize card
 10560 000086A0 31C0                <2> 	xor eax, eax
 10561 000086A2 A2[E9620000]        <2> 	mov [pcifunction], al
 10562 000086A7 A2[E7620000]        <2> 	mov [pcibus], al
 10563 000086AC A2[E8620000]        <2> 	mov [pcidevice], al
 10564 000086B1 B002                <2> 	mov al, 0x02 ;type code
 10565 000086B3 A2[78630000]        <2> 	mov [pcitype], al
 10566 000086B8 B8EC106981          <2> 	mov eax, 0x816910EC
 10567 000086BD A3[EC620000]        <2> 	mov [pcidevid], eax
 10568 000086C2 BBFFFFF0FF          <2> 	mov ebx, 0xFFF0FFFF
 10569 000086C7 891D[F0620000]      <2> 	mov [pcidevidmask], ebx
 10570 000086CD E82EDCFFFF          <2> 	call getpciport
 10571 000086D2 81FBFFFFFFFF        <2> 	cmp ebx, 0xFFFFFFFF
 10572 000086D8 7501                <2> 	jne .initnic
 10573 000086DA C3                  <2> 	ret
 10574                              <2> .initnic:
 10575 000086DB 8915[76880000]      <2> 	mov [.basenicaddr], edx
 10576 000086E1 89D1                <2> 	mov ecx, edx
 10577 000086E3 E8E8AAFFFF          <2> 	call showhex	;for debugging, please remove
 10578 000086E8 BE[1E102B00]        <2> 	mov esi, rbuffstart
 10579 000086ED B900200000          <2> 	mov ecx, 8192
 10580 000086F2 31C0                <2> 	xor eax, eax
 10581                              <2> .clearrbuff:		;clear receive buffer which starts at rbuffstart
 10582 000086F4 8806                <2> 	mov [esi], al
 10583 000086F6 46                  <2> 	inc esi
 10584 000086F7 6649                <2> 	dec cx
 10585 000086F9 6681F90000          <2> 	cmp cx, 0
 10586 000086FE 75F4                <2> 	jne .clearrbuff
 10587                              <2> .findmac:
 10588 00008700 8B15[76880000]      <2> 	mov edx, [.basenicaddr]
 10589 00008706 BF[7B880000]        <2> 	mov edi, .mac
 10590 0000870B B906000000          <2> 	mov ecx, 6
 10591                              <2> .macputloop:
 10592 00008710 EC                  <2> 	in al, dx
 10593 00008711 8807                <2> 	mov [edi], al
 10594 00008713 47                  <2> 	inc edi
 10595 00008714 42                  <2> 	inc edx
 10596 00008715 49                  <2> 	dec ecx
 10597 00008716 75F8                <2> 	jnz .macputloop
 10598 00008718 B9[7B880000]        <2> 	mov ecx, .mac
 10599 0000871D E8A3030000          <2> 	call showmac
 10600 00008722 E817000000          <2> 	call .resetnic
 10601 00008727 BE[81880000]        <2> 	mov esi, .name
 10602 0000872C E8FA95FFFF          <2> 	call print
 10603 00008731 BE[8A880000]        <2> 	mov esi, .initmsg
 10604 00008736 E8F095FFFF          <2> 	call print
 10605 0000873B 31DB                <2> 	xor ebx, ebx
 10606 0000873D C3                  <2> 	ret
 10607                              <2> .resetnic:
 10608 0000873E 8B15[76880000]      <2> 	mov edx, [.basenicaddr]
 10609 00008744 81C237000000        <2> 	add edx, .CMD
 10610 0000874A B010                <2> 	mov al, 0x10
 10611 0000874C EE                  <2> 	out dx, al	;Reset
 10612                              <2> .resetnicwait:
 10613 0000874D EC                  <2> 	in al, dx
 10614 0000874E A810                <2> 	test al, 0x10
 10615 00008750 0F85F7FFFFFF        <2> 	jnz near .resetnicwait
 10616 00008756 8B15[76880000]      <2> 	mov edx, [.basenicaddr]
 10617 0000875C 81C250000000        <2> 	add edx, .LOCK
 10618 00008762 B0C0                <2> 	mov al, 0xC0
 10619 00008764 EE                  <2> 	out dx, al	;unlock config registers
 10620 00008765 8B15[76880000]      <2> 	mov edx, [.basenicaddr]
 10621 0000876B 81C244000000        <2> 	add edx, .RCR
 10622 00008771 B80FE70000          <2> 	mov eax, 0x0000E70F
 10623 00008776 EF                  <2> 	out dx, eax	;recieve packets from all matches
 10624 00008777 8B15[76880000]      <2> 	mov edx, [.basenicaddr]
 10625 0000877D 81C240000000        <2> 	add edx, .TCR
 10626 00008783 B800070003          <2> 	mov eax, 0x03000700
 10627 00008788 EF                  <2> 	out dx, eax	;set up tcr
 10628 00008789 8B15[76880000]      <2> 	mov edx, [.basenicaddr]
 10629 0000878F 81C2DA000000        <2> 	add edx, .MAXRX
 10630 00008795 66B8FF1F            <2> 	mov ax, 0x1FFF
 10631 00008799 66EF                <2> 	out dx, ax	;setup max rx size
 10632 0000879B 8B15[76880000]      <2> 	mov edx, [.basenicaddr]
 10633 000087A1 81C2EC000000        <2> 	add edx, .MAXTX
 10634 000087A7 B03B                <2> 	mov al, 0x3B
 10635 000087A9 EE                  <2> 	out dx, al	;setup max tx size
 10636 000087AA 8B15[76880000]      <2> 	mov edx, [.basenicaddr]
 10637 000087B0 81C220000000        <2> 	add edx, .TDSAR
 10638 000087B6 A1[41020000]        <2> 	mov eax, [basecache]
 10639 000087BB C1E004              <2> 	shl eax, 4
 10640 000087BE 05[00890000]        <2> 	add eax, .txdesc
 10641 000087C3 EF                  <2> 	out dx, eax
 10642 000087C4 8B15[76880000]      <2> 	mov edx, [.basenicaddr]
 10643 000087CA 81C2E4000000        <2> 	add edx, .RDSAR
 10644 000087D0 A1[41020000]        <2> 	mov eax, [basecache]
 10645 000087D5 C1E004              <2> 	shl eax, 4
 10646 000087D8 05[008A0000]        <2> 	add eax, .rxdesc
 10647 000087DD EF                  <2> 	out dx, eax
 10648 000087DE 8B15[76880000]      <2> 	mov edx, [.basenicaddr]
 10649 000087E4 81C237000000        <2> 	add edx, .CMD
 10650 000087EA B00C                <2> 	mov al, 0x0C
 10651 000087EC EE                  <2> 	out dx, al	;use transmit and receive
 10652 000087ED 8B15[76880000]      <2> 	mov edx, [.basenicaddr]
 10653 000087F3 81C250000000        <2> 	add edx, .LOCK
 10654 000087F9 30C0                <2> 	xor al, al
 10655 000087FB EE                  <2> 	out dx, al
 10656 000087FC C605[7A880000]01    <2> 	mov byte [.nicconfig], 1
 10657 00008803 C3                  <2> 	ret
 10658                              <2> 	
 10659                              <2> .sendpacket:	;packet with beginning in edi and end in esi
 10660 00008804 803D[7A880000]01    <2> 	cmp byte [.nicconfig], 1
 10661 0000880B 7412                <2> 	je .sendcachedata
 10662 0000880D 56                  <2> 	push esi
 10663 0000880E 57                  <2> 	push edi
 10664 0000880F E88CFEFFFF          <2> 	call .init
 10665 00008814 5F                  <2> 	pop edi
 10666 00008815 5E                  <2> 	pop esi
 10667 00008816 81FBFFFFFFFF        <2> 	cmp ebx, 0xFFFFFFFF
 10668 0000881C 75E6                <2> 	jne .sendpacket
 10669 0000881E C3                  <2> 	ret
 10670                              <2> .sendcachedata:
 10671 0000881F 8B0D[7B880000]      <2> 	mov ecx, [.mac]
 10672 00008825 894F06              <2> 	mov [edi + 6], ecx
 10673 00008828 668B0D[7F880000]    <2> 	mov cx, [.mac + 4]
 10674 0000882F 66894F0A            <2> 	mov [edi + 10], cx	;copy the correct mac
 10675 00008833 A1[41020000]        <2> 	mov eax, [basecache]
 10676 00008838 C1E004              <2> 	shl eax, 4
 10677 0000883B 01F8                <2> 	add eax, edi
 10678 0000883D A3[08890000]        <2> 	mov [.txdesc + 8], eax	;put packet start in tx descriptor
 10679 00008842 29FE                <2> 	sub esi, edi
 10680 00008844 668935[00890000]    <2> 	mov [.txdesc], si	;put packet size in tx descriptor
 10681 0000884B 810D[00890000]0000- <2> 	or dword [.txdesc], .OWN	;set own bit
 10682 00008853 0080                <2>
 10683 00008855 8B15[76880000]      <2> 	mov edx, [.basenicaddr]
 10684 0000885B 81C238000000        <2> 	add edx, .TXPOLL
 10685 00008861 B040                <2> 	mov al, .POLLING
 10686 00008863 EE                  <2> 	out dx, al	;set up TX Polling
 10687                              <2> .sendloop:
 10688 00008864 A1[00890000]        <2> 	mov eax, [.txdesc]
 10689 00008869 2500000080          <2> 	and eax, .OWN
 10690 0000886E 3D00000080          <2> 	cmp eax, .OWN
 10691 00008873 74EF                <2> 	je .sendloop
 10692 00008875 C3                  <2> 	ret
 10693                              <2> 	
 10694 00008876 00000000            <2> .basenicaddr dd 0
 10695 0000887A 00                  <2> .nicconfig db 0
 10696 0000887B 000000000000        <2> .mac db 0,0,0,0,0,0
 10697 00008881 52544C383136392000  <2> .name db "RTL8169 ",0
 10698 0000888A 496E697469616C697A- <2> .initmsg db "Initialized",10,0
 10699 00008893 65640A00            <2>
 10700 00008897 90<rept>            <2> align 256, nop
 10701                              <2> .txdesc:
 10702 00008900 00000040            <2> 	dd .EOR	;command
 10703 00008904 00000000            <2> 	dd 0	;vlan
 10704 00008908 00000000            <2> 	dd 0	;low buf
 10705 0000890C 00000000            <2> 	dd 0	;high buf
 10706 00008910 90<rept>            <2> align 256, nop
 10707                              <2> .rxdesc:
 10708 00008A00 142000C0            <2> 	dd .OWN | .EOR | (rbuffend - rbuffstart)	;command
 10709 00008A04 00000000            <2> 	dd 0	;vlan
 10710 00008A08 [1E102B00]          <2> 	dd rbuffstart	;low buf
 10711 00008A0C 00000000            <2> 	dd 0	;high buf
 10712                              <2> .end:
 10713                              <1> %endif
 10714                              <1> %ifdef ne2000.included
 10715                              <1> 	%include "source/drivers/network/ne2000.asm"
 10716                              <1> %endif
 10717                              <1> %ifdef i8254x.included
 10718                              <1> 	%include "source/drivers/network/i8254x.asm"
 10719                              <1> %endif
 10720 00008A10 C3                  <1> 	ret
 10721                              <1> 
 10722                              <1> sendpacket: ;packet start in edi, end in esi
 10723                              <1> 	%ifdef rtl8139.included
 10724                              <1> 		push edi
 10725                              <1> 		push esi
 10726                              <1> 		call rtl8139.sendpacket
 10727                              <1> 		pop esi
 10728                              <1> 		pop edi
 10729                              <1> 	%endif
 10730                              <1> 	%ifdef rtl8169.included
 10731 00008A11 57                  <1> 		push edi
 10732 00008A12 56                  <1> 		push esi
 10733 00008A13 E8ECFDFFFF          <1> 		call rtl8169.sendpacket
 10734 00008A18 5E                  <1> 		pop esi
 10735 00008A19 5F                  <1> 		pop edi
 10736                              <1> 	%endif
 10737                              <1> 	%ifdef ne2000.included
 10738                              <1> 		push edi
 10739                              <1> 		push esi
 10740                              <1> 		call ne2000.sendpacket
 10741                              <1> 		pop esi
 10742                              <1> 		pop edi
 10743                              <1> 	%endif
 10744                              <1> 	%ifdef i8254x.included
 10745                              <1> 		call i8254x.sendpacket
 10746                              <1> 	%endif
 10747 00008A1A C3                  <1> 	ret
 10748                              <1> 
 10749                              <1> getchecksum: ;start in edi, end in esi, checksum put in ecx
 10750 00008A1B 31C0                <1> 	xor eax, eax
 10751 00008A1D 31DB                <1> 	xor ebx, ebx
 10752 00008A1F 31C9                <1> 	xor ecx, ecx
 10753                              <1> .lp:
 10754 00008A21 8A07                <1> 	mov al, [edi]
 10755 00008A23 8A6701              <1> 	mov ah, [edi + 1]
 10756 00008A26 01C3                <1> 	add ebx, eax
 10757 00008A28 81C702000000        <1> 	add edi, 2
 10758 00008A2E 39F7                <1> 	cmp edi, esi
 10759 00008A30 72EF                <1> 	jb .lp
 10760 00008A32 66B9FFFF            <1> 	mov cx, 0xFFFF
 10761 00008A36 6689D8              <1> 	mov ax, bx
 10762 00008A39 C1EB10              <1> 	shr ebx, 16
 10763 00008A3C 6601D8              <1> 	add ax, bx
 10764 00008A3F 6629C1              <1> 	sub cx, ax
 10765 00008A42 C3                  <1> 	ret
 10766                              <1> 	
 10767                              <1> strtoip:	;string in esi with format X.X.X.X converted to number in ecx
 10768 00008A43 31DB                <1> 	xor ebx, ebx
 10769 00008A45 31C9                <1> 	xor ecx, ecx
 10770 00008A47 31D2                <1> 	xor edx, edx
 10771                              <1> .mlp:
 10772 00008A49 89F7                <1> 	mov edi, esi
 10773 00008A4B 4F                  <1> 	dec edi
 10774                              <1> .lp:
 10775 00008A4C 47                  <1> 	inc edi
 10776 00008A4D 8A07                <1> 	mov al, [edi]
 10777 00008A4F 3C20                <1> 	cmp al, " "
 10778 00008A51 7408                <1> 	je .dnlp
 10779 00008A53 3C00                <1> 	cmp al, 0
 10780 00008A55 7404                <1> 	je .dnlp
 10781 00008A57 3C2E                <1> 	cmp al, "."
 10782 00008A59 75F1                <1> 	jne .lp
 10783                              <1> .dnlp:
 10784 00008A5B 30C0                <1> 	xor al, al
 10785 00008A5D 8807                <1> 	mov [edi], al
 10786 00008A5F 53                  <1> 	push ebx
 10787 00008A60 56                  <1> 	push esi
 10788 00008A61 57                  <1> 	push edi
 10789 00008A62 31FF                <1> 	xor edi, edi
 10790 00008A64 E813A9FFFF          <1> 	call cnvrttxt
 10791 00008A69 5E                  <1> 	pop esi
 10792 00008A6A 5F                  <1> 	pop edi ;i intentionally switch them
 10793 00008A6B 5B                  <1> 	pop ebx
 10794 00008A6C 46                  <1> 	inc esi
 10795 00008A6D BF[858A0000]        <1> 	mov edi, ipstr
 10796 00008A72 880C1F              <1> 	mov [edi + ebx], cl
 10797 00008A75 43                  <1> 	inc ebx
 10798 00008A76 81FB04000000        <1> 	cmp ebx, 4
 10799 00008A7C 72CB                <1> 	jb .mlp
 10800 00008A7E 8B0D[858A0000]      <1> 	mov ecx, [ipstr]
 10801 00008A84 C3                  <1> 	ret
 10802 00008A85 00000000            <1> ipstr dd 0
 10803                              <1> showip: 	;put the ip address in ecx
 10804 00008A89 89C8                <1> 	mov eax, ecx
 10805 00008A8B 30DB                <1> 	xor bl, bl
 10806                              <1> .lp:
 10807 00008A8D 3C00                <1> 	cmp al, 0
 10808 00008A8F 750B                <1> 	jne .nozeroprint
 10809 00008A91 B030                <1> 	mov al, "0"
 10810 00008A93 50                  <1> 	push eax
 10811 00008A94 E81499FFFF          <1> 	call prcharq
 10812 00008A99 58                  <1> 	pop eax
 10813 00008A9A 30C0                <1> 	xor al, al
 10814                              <1> .nozeroprint:
 10815 00008A9C 31C9                <1> 	xor ecx, ecx
 10816 00008A9E 88C1                <1> 	mov cl, al
 10817 00008AA0 E8F5A7FFFF          <1> 	call showdec
 10818 00008AA5 C1E808              <1> 	shr eax, 8
 10819 00008AA8 FEC3                <1> 	inc bl
 10820 00008AAA 80FB04              <1> 	cmp bl, 4
 10821 00008AAD 7312                <1> 	jae .done
 10822 00008AAF 50                  <1> 	push eax
 10823 00008AB0 6653                <1> 	push bx
 10824 00008AB2 BE[C28A0000]        <1> 	mov esi, .dot
 10825 00008AB7 E86F92FFFF          <1> 	call print
 10826 00008ABC 665B                <1> 	pop bx
 10827 00008ABE 58                  <1> 	pop eax
 10828 00008ABF EBCC                <1> 	jmp .lp
 10829                              <1> .done:
 10830 00008AC1 C3                  <1> 	ret
 10831 00008AC2 082E00              <1> .dot db 8,".",0
 10832                              <1> showmac:	;mac begins in [ecx]
 10833 00008AC5 BE[158B0000]        <1> 	mov esi, macprint
 10834 00008ACA 89CF                <1> 	mov edi, ecx
 10835 00008ACC 81C106000000        <1> 	add ecx, 6
 10836                              <1> showmacloop:
 10837 00008AD2 8A07                <1> 	mov al, [edi]
 10838 00008AD4 8A27                <1> 	mov ah, [edi]
 10839 00008AD6 C0E804              <1> 	shr al, 4
 10840 00008AD9 C0E404              <1> 	shl ah, 4
 10841 00008ADC C0EC04              <1> 	shr ah, 4
 10842 00008ADF 0430                <1> 	add al, 48
 10843 00008AE1 3C39                <1> 	cmp al, "9"
 10844 00008AE3 7606                <1> 	jbe .goodal
 10845 00008AE5 2C30                <1> 	sub al, 48
 10846 00008AE7 2C0A                <1> 	sub al, 0xA
 10847 00008AE9 0441                <1> 	add al, "A"
 10848                              <1> .goodal:
 10849 00008AEB 80C430              <1> 	add ah, 48
 10850 00008AEE 80FC39              <1> 	cmp ah, "9"
 10851 00008AF1 7609                <1> 	jbe .goodah
 10852 00008AF3 80EC30              <1> 	sub ah, 48
 10853 00008AF6 80EC0A              <1> 	sub ah, 0xA
 10854 00008AF9 80C441              <1> 	add ah, "A"
 10855                              <1> .goodah:
 10856 00008AFC 668906              <1> 	mov [esi], ax
 10857 00008AFF 81C603000000        <1> 	add esi, 3
 10858 00008B05 47                  <1> 	inc edi
 10859 00008B06 39CF                <1> 	cmp edi, ecx
 10860 00008B08 72C8                <1> 	jb showmacloop
 10861 00008B0A BE[158B0000]        <1> 	mov esi, macprint
 10862 00008B0F E81792FFFF          <1> 	call print
 10863 00008B14 C3                  <1> 	ret
 10864                              <1> 	
 10865 00008B15 30303A30303A30303A- <1> macprint db "00:00:00:00:00:00 ",0
 10866 00008B1E 30303A30303A303020- <1>
 10867 00008B27 00                  <1>
 10868 00008B28 00000000            <1> ethernetend dw 0,0
 10869 00008B2C C0A80002            <1> sysip db 192,168,0,2
 10870 00008B30 000000000000        <1> sysmac	db 0,0,0,0,0,0		;my mac address
 10871                                  %endif
 10872                                      %include "source/data.asm"
 10873 00008B36 626F6F742E736800    <1> 	bootfilename db "boot.sh",0
 10874 00008B3E 73687573683A2000    <1> 	notfound1 db "shush: ",0
 10875 00008B46 3A206E6F7420666F75- <1> 	notfound2 db  ": not found",10,0
 10876 00008B4F 6E640A00            <1>
 10877 00008B53 757365726E616D653A- <1> 	userask db "username:",0
 10878 00008B5C 00                  <1>
 10879 00008B5D 70617373776F72643A- <1> 	pwdask	db	"password:",0
 10880 00008B66 00                  <1>
 10881 00008B67 40                  <1> 	computer db "@"
 10882                              <1> %ifdef io.serial
 10883                              <1> 	computername	db	"SollerOS.",io.serial," ",0
 10884                              <1> %else
 10885 00008B68 536F6C6C65724F5320- <1> 	computername	db	"SollerOS ",0
 10886 00008B71 00                  <1>
 10887                              <1> %endif
 10888 00008B72 5D242000            <1> 	endprompt db "]$ ",0
 10889 00008B76 0D                  <1> 	crlf 	db  13
 10890 00008B77 0A00                <1> 	line	db	10,0
 10891                              <1> 	userlst:
 10892 00008B79 726F6F7400          <1> 			db "root",0
 10893 00008B7E 617765736F6D65706F- <1> 			db "awesomepower",0
 10894 00008B87 77657200            <1>
 10895 00008B8B 7573657200          <1> 			db "user",0
 10896 00008B90 70617373776F726400  <1> 			db "password",0
 10897 00008B99 6E00                <1> 			db "n",0	;;abuse for quick entry-a quick double n followed by a double enter will get you in
 10898 00008B9B 00                  <1> 			db 0
 10899                              <1> 	userlstend:
 10900                              <1> 	
 10901 00008B9C 00                  <1> 	guion db 0
 10902 00008B9D 00                  <1> 	DriveNumber db 0
 10903 00008B9E 00000000            <1> 	lbaad dd 0
 10904 00008BA2 00<rept>            <1> 	memlistbuf times 576 db 0
 10905 00008DE2 00000000            <1> 	memlistend: dd 0
 10906                              <1> %ifdef io.serial
 10907                              <1> %else
 10908 00008DE2 <incbin>            <1> fonts:	incbin "source/fonts/fonts.pak"
 10909                              <1> fontend:
 10910                              <1> %endif
 10911                              <1> osend:	;this is the end of the operating system's space on disk
 10912                                  %ifdef disk.none
 10913                                  	diskfileindex:
 10914                                  	enddiskfileindex:
 10915                                  	align 512, db 0
 10916                                      %include "source/bss.asm"
 10917                                  %else
 10918                                      %include "build/fileindex.asm"
 10919                              <1> diskfileindex:
 10920 00010DE6 617267746573742E65- <1> db "argtest.elf",0
 10921 00010DEF 6C6600              <1>
 10922 00010DF2 88000000            <1> dd (f0-$$)/512
 10923 00010DF6 06010000            <1> dd (f1-f0)/512
 10924 00010DFA 6261636B67726F756E- <1> db "background.bmp",0
 10925 00010E03 642E626D7000        <1>
 10926 00010E09 8E010000            <1> dd (f1-$$)/512
 10927 00010E0D 01140000            <1> dd (f2-f1)/512
 10928 00010E11 626F6F742E736800    <1> db "boot.sh",0
 10929 00010E19 8F150000            <1> dd (f2-$$)/512
 10930 00010E1D 01000000            <1> dd (f3-f2)/512
 10931 00010E21 63686172746573742E- <1> db "chartest.elf",0
 10932 00010E2A 656C6600            <1>
 10933 00010E2E 90150000            <1> dd (f3-$$)/512
 10934 00010E32 26010000            <1> dd (f4-f3)/512
 10935 00010E36 646F73746573742E63- <1> db "dostest.com",0
 10936 00010E3F 6F6D00              <1>
 10937 00010E42 B6160000            <1> dd (f4-$$)/512
 10938 00010E46 01000000            <1> dd (f5-f4)/512
 10939 00010E4A 6578656300          <1> db "exec",0
 10940 00010E4F B7160000            <1> dd (f5-$$)/512
 10941 00010E53 01000000            <1> dd (f6-f5)/512
 10942 00010E57 66696E616C636F756E- <1> db "finalcount.sn",0
 10943 00010E60 742E736E00          <1>
 10944 00010E65 B8160000            <1> dd (f6-$$)/512
 10945 00010E69 01000000            <1> dd (f7-f6)/512
 10946 00010E6D 666F726B00          <1> db "fork",0
 10947 00010E72 B9160000            <1> dd (f7-$$)/512
 10948 00010E76 01000000            <1> dd (f8-f7)/512
 10949 00010E7A 677261766974792E65- <1> db "gravity.elf",0
 10950 00010E83 6C6600              <1>
 10951 00010E86 BA160000            <1> dd (f8-$$)/512
 10952 00010E8A E0000000            <1> dd (f9-f8)/512
 10953 00010E8E 6775697465737400    <1> db "guitest",0
 10954 00010E96 9A170000            <1> dd (f9-$$)/512
 10955 00010E9A 03000000            <1> dd (f10-f9)/512
 10956 00010E9E 68656C6C6F776F726C- <1> db "helloworld.elf",0
 10957 00010EA7 642E656C6600        <1>
 10958 00010EAD 9D170000            <1> dd (f10-$$)/512
 10959 00010EB1 D6010000            <1> dd (f11-f10)/512
 10960 00010EB5 696E7400            <1> db "int",0
 10961 00010EB9 73190000            <1> dd (f11-$$)/512
 10962 00010EBD 01000000            <1> dd (f12-f11)/512
 10963 00010EC1 6C6F7374776F6F6473- <1> db "lostwoods.sn",0
 10964 00010ECA 2E736E00            <1>
 10965 00010ECE 74190000            <1> dd (f12-$$)/512
 10966 00010ED2 01000000            <1> dd (f13-f12)/512
 10967 00010ED6 6D6172696F2E736E00  <1> db "mario.sn",0
 10968 00010EDF 75190000            <1> dd (f13-$$)/512
 10969 00010EE3 01000000            <1> dd (f14-f13)/512
 10970 00010EE7 6D6F6D656E742E7761- <1> db "moment.wav",0
 10971 00010EF0 7600                <1>
 10972 00010EF2 76190000            <1> dd (f14-$$)/512
 10973 00010EF6 34040000            <1> dd (f15-f14)/512
 10974 00010EFA 70692E656C6600      <1> db "pi.elf",0
 10975 00010F01 AA1D0000            <1> dd (f15-$$)/512
 10976 00010F05 1F010000            <1> dd (f16-f15)/512
 10977 00010F09 736F6C6C65726F732E- <1> db "solleros.bmp",0
 10978 00010F12 626D7000            <1>
 10979 00010F16 C91E0000            <1> dd (f16-$$)/512
 10980 00010F1A B0020000            <1> dd (f17-f16)/512
 10981 00010F1E 736F6C6C65726F732E- <1> db "solleros.txt",0
 10982 00010F27 74787400            <1>
 10983 00010F2B 79210000            <1> dd (f17-$$)/512
 10984 00010F2F 01000000            <1> dd (f18-f17)/512
 10985 00010F33 736F6E676F74696D65- <1> db "songotime.sn",0
 10986 00010F3C 2E736E00            <1>
 10987 00010F40 7A210000            <1> dd (f18-$$)/512
 10988 00010F44 01000000            <1> dd (f19-f18)/512
 10989 00010F48 73736500            <1> db "sse",0
 10990 00010F4C 7B210000            <1> dd (f19-$$)/512
 10991 00010F50 02000000            <1> dd (f20-f19)/512
 10992 00010F54 737464696F74657374- <1> db "stdiotest.elf",0
 10993 00010F5D 2E656C6600          <1>
 10994 00010F62 7D210000            <1> dd (f20-$$)/512
 10995 00010F66 27010000            <1> dd (f21-f20)/512
 10996 00010F6A 74656C7900          <1> db "tely",0
 10997 00010F6F A4220000            <1> dd (f21-$$)/512
 10998 00010F73 01000000            <1> dd (f22-f21)/512
 10999 00010F77 74696D65746573742E- <1> db "timetest.elf",0
 11000 00010F80 656C6600            <1>
 11001 00010F84 A5220000            <1> dd (f22-$$)/512
 11002 00010F88 04010000            <1> dd (f23-f22)/512
 11003 00010F8C 7475746F7269616C2E- <1> db "tutorial.sh",0
 11004 00010F95 736800              <1>
 11005 00010F98 A9230000            <1> dd (f23-$$)/512
 11006 00010F9C 03000000            <1> dd (f24-f23)/512
 11007 00010FA0 756E667300          <1> db "unfs",0
 11008 00010FA5 AC230000            <1> dd (f24-$$)/512
 11009 00010FA9 02000000            <1> dd (f25-f24)/512
 11010 00010FAD 7574662D382E747874- <1> db "utf-8.txt",0
 11011 00010FB6 00                  <1>
 11012 00010FB7 AE230000            <1> dd (f25-$$)/512
 11013 00010FBB 01000000            <1> dd (f26-f25)/512
 11014 00010FBF 766963746F72792E77- <1> db "victory.wav",0
 11015 00010FC8 617600              <1>
 11016 00010FCB AF230000            <1> dd (f26-$$)/512
 11017 00010FCF 16000000            <1> dd (f27-f26)/512
 11018 00010FD3 5F696D672E62696E00  <1> db "_img.bin",0
 11019 00010FDC C5230000            <1> dd (f27-$$)/512
 11020 00010FE0 D7020000            <1> dd (f28-f27)/512
 11021                              <1> enddiskfileindex:
 11022                              <1> 
 11023                                      %include "source/bss.asm"
 11024                              <1> align 4, nop
 11025                              <1> bssstart: equ $
 11026                              <1> bsscopy equ $
 11027                              <1> initialstack equ bsscopy
 11028                              <1> stackend equ initialstack + 4000
 11029                              <1> sigtable equ stackend + 96
 11030                              <1> fileindex: equ sigtable + 4
 11031                              <1> fileindexend: equ fileindex + 1024
 11032                              <1> previousstack equ fileindexend
 11033                              <1> lastfolderloc equ previousstack + 4
 11034                              <1> currentfolderloc equ lastfolderloc + 4
 11035                              <1> currentfolder equ currentfolderloc + 4
 11036                              <1> currentfolderend equ currentfolder + 512
 11037                              <1> uid equ currentfolderend
 11038                              <1> ranboot equ uid + 4
 11039                              <1> IFON equ ranboot + 1
 11040                              <1> IFTRUE equ IFON + 1
 11041                              <1> BATCHPOS equ IFTRUE + 100
 11042                              <1> BATCHISON equ BATCHPOS + 4
 11043                              <1> LOOPON equ BATCHISON + 1
 11044                              <1> LOOPPOS	equ LOOPON + 1
 11045                              <1> variables: equ LOOPPOS + 4
 11046                              <1> varend: equ variables + 4096
 11047                              <1> buftxt2: equ varend
 11048                              <1> buftxt: equ buftxt2 + 1024
 11049                              <1> buftxtend: equ buftxt + 1024
 11050                              <1> buf2: equ buftxtend
 11051                              <1> numbuf: equ buf2 + 20
 11052                              <1> %ifdef io.serial
 11053                              <1> 	lastcommandpos equ numbuf + 1
 11054                              <1> %else
 11055                              <1> 	%ifdef gui.included
 11056                              <1> 		graphicstable equ numbuf + 1 ;w type, dw datalocation, w locationx, w locationy, w selected, dw code
 11057                              <1> 		graphicstableend equ graphicstable + 200h
 11058                              <1> 		%ifdef gui.background
 11059                              <1> 			backgroundbuffer equ graphicstableend
 11060                              <1> 			backgroundbufferend equ backgroundbuffer + 1280*1026*2
 11061                              <1> 			mousecolorbuf equ backgroundbufferend
 11062                              <1> 		%else
 11063                              <1> 			mousecolorbuf equ graphicstableend ;where the gui under the mouse is stored
 11064                              <1> 		%endif
 11065                              <1> 		mcolorend equ mousecolorbuf + 256
 11066                              <1> 		videobuf equ mcolorend + 1	;1680x1050 pixels in characters
 11067                              <1> 		videobufend	equ videobuf + 210*65*4;2
 11068                              <1> 		videobuf2 equ videobufend
 11069                              <1> 		videobuf2end equ videobuf2 + 210*65*4;2
 11070                              <1> 	%else
 11071                              <1> 		videobuf equ numbuf + 1
 11072                              <1> 		videobufend equ videobuf + 80*30*4
 11073                              <1> 		videobuf2 equ videobufend
 11074                              <1> 		videobuf2end equ videobuf2 + 80*30*4
 11075                              <1> 	%endif
 11076                              <1> 	lastcommandpos: equ videobuf2end
 11077                              <1> %endif
 11078                              <1> 	commandbufpos: equ lastcommandpos + 4
 11079                              <1> 	commandlistentries: equ commandbufpos + 4
 11080                              <1> 	commandsentered: equ commandlistentries + 4
 11081                              <1> 	commandbuf: equ commandsentered + 4
 11082                              <1> 	commandbufend: equ commandbuf + 4096 ;this is where kernel space only ends, the rest is for threading
 11083                              <1> %ifdef network.included
 11084                              <1> 	rbuffstart: equ commandbufend ;for use with networking
 11085                              <1> 	rbuffend equ rbuffstart + 8212
 11086                              <1> %else
 11087                              <1> 	rbuffstart equ commandbufend
 11088                              <1> 	rbuffend equ commandbufend
 11089                              <1> %endif
 11090                              <1> %ifdef threads.included
 11091                              <1> 	threadlist: equ rbuffend ;this buffer will hold the stack locations of all of the threads, up to 2048
 11092                              <1> 	threadlistend: equ threadlist + 1024*4
 11093                              <1> 	stacks:	equ threadlistend ;i use SS now for proper stack management. This makes sure stacks never screw with other memory
 11094                              <1> 	stack1: equ stacks + 1024  ;woah, thats a lot of space for stacks
 11095                              <1> 	bssend equ stack1 + 1024*1024
 11096                              <1> %else
 11097                              <1> 	bssend equ rbuffend
 11098                              <1> %endif
 11099                              <1> dosprogloc equ 0x400000 ;from here on, it is not kernel space so apps can be loaded here.
 11100                                      %include "build/files.asm"
 11101 00010FE4 00<rept>            <1> align 512,db 0
 11102                              <1> f0:
 11103 00010FE4 <incbin>            <1> incbin "included/argtest.elf"
 11104 00031AF2 00<rept>            <1> align 512,db 0
 11105                              <1> f1:
 11106 00031AF2 <incbin>            <1> incbin "included/background.bmp"
 11107 002B1C46 00<rept>            <1> align 512,db 0
 11108                              <1> f2:
 11109 002B1C46 <incbin>            <1> incbin "included/boot.sh"
 11110 002B1EFD 00<rept>            <1> align 512,db 0
 11111                              <1> f3:
 11112 002B1EFD <incbin>            <1> incbin "included/chartest.elf"
 11113 002D6ADB 00<rept>            <1> align 512,db 0
 11114                              <1> f4:
 11115 002D6ADB <incbin>            <1> incbin "included/dostest.com"
 11116 002D6D31 00<rept>            <1> align 512,db 0
 11117                              <1> f5:
 11118 002D6D31 <incbin>            <1> incbin "included/exec"
 11119 002D6EE1 00<rept>            <1> align 512,db 0
 11120                              <1> f6:
 11121 002D6EE1 <incbin>            <1> incbin "included/finalcount.sn"
 11122 002D7102 00<rept>            <1> align 512,db 0
 11123                              <1> f7:
 11124 002D7102 <incbin>            <1> incbin "included/fork"
 11125 002D7358 00<rept>            <1> align 512,db 0
 11126                              <1> f8:
 11127 002D7358 <incbin>            <1> incbin "included/gravity.elf"
 11128 002F32D9 00<rept>            <1> align 512,db 0
 11129                              <1> f9:
 11130 002F32D9 <incbin>            <1> incbin "included/guitest"
 11131 002F382B 00<rept>            <1> align 512,db 0
 11132                              <1> f10:
 11133 002F382B <incbin>            <1> incbin "included/helloworld.elf"
 11134 0032E5E3 00<rept>            <1> align 512,db 0
 11135                              <1> f11:
 11136 0032E5E3 <incbin>            <1> incbin "included/int"
 11137 0032E7AF 00<rept>            <1> align 512,db 0
 11138                              <1> f12:
 11139 0032E7AF <incbin>            <1> incbin "included/lostwoods.sn"
 11140 0032E856 00<rept>            <1> align 512,db 0
 11141                              <1> f13:
 11142 0032E856 <incbin>            <1> incbin "included/mario.sn"
 11143 0032EA3A 00<rept>            <1> align 512,db 0
 11144                              <1> f14:
 11145 0032EA3A <incbin>            <1> incbin "included/moment.wav"
 11146 003B521A 00<rept>            <1> align 512,db 0
 11147                              <1> f15:
 11148 003B521A <incbin>            <1> incbin "included/pi.elf"
 11149 003D9131 00<rept>            <1> align 512,db 0
 11150                              <1> f16:
 11151 003D9131 <incbin>            <1> incbin "included/solleros.bmp"
 11152 0042F1E6 00<rept>            <1> align 512,db 0
 11153                              <1> f17:
 11154 0042F1E6 <incbin>            <1> incbin "included/solleros.txt"
 11155 0042F374 00<rept>            <1> align 512,db 0
 11156                              <1> f18:
 11157 0042F374 <incbin>            <1> incbin "included/songotime.sn"
 11158 0042F44A 00<rept>            <1> align 512,db 0
 11159                              <1> f19:
 11160 0042F44A <incbin>            <1> incbin "included/sse"
 11161 0042F8A8 00<rept>            <1> align 512,db 0
 11162                              <1> f20:
 11163 0042F8A8 <incbin>            <1> incbin "included/stdiotest.elf"
 11164 00454643 00<rept>            <1> align 512,db 0
 11165                              <1> f21:
 11166 00454643 <incbin>            <1> incbin "included/tely"
 11167 004549BA 00<rept>            <1> align 512,db 0
 11168                              <1> f22:
 11169 004549BA <incbin>            <1> incbin "included/timetest.elf"
 11170 0047503D 00<rept>            <1> align 512,db 0
 11171                              <1> f23:
 11172 0047503D <incbin>            <1> incbin "included/tutorial.sh"
 11173 00475752 00<rept>            <1> align 512,db 0
 11174                              <1> f24:
 11175 00475752 <incbin>            <1> incbin "included/unfs"
 11176                              <1> align 512,db 0
 11177                              <1> f25:
 11178 00475752 <incbin>            <1> incbin "included/utf-8.txt"
 11179 00475D2F 00<rept>            <1> align 512,db 0
 11180                              <1> f26:
 11181 00475D2F <incbin>            <1> incbin "included/victory.wav"
 11182 00478948 00<rept>            <1> align 512,db 0
 11183                              <1> f27:
 11184 00478948 <incbin>            <1> incbin "included/_img.bin"
 11185                              <1> align 512,db 0
 11186                              <1> f28:
 11187                                  %endif
