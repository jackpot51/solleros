     1                                  [map symbols build/kernel.map]
     2                                  %include "config.asm"
     3                              <1> ;These flags are used to configure options as on, put a simicolon in front of it to not configure it
     4                              <1> 
     5                              <1> %define gui.included
     6                              <1> ;Turn on the gui
     7                              <1> 
     8                              <1> ;%define gui.alphablending
     9                              <1> ;Make the terminal in the GUI 25% transparent
    10                              <1> 
    11                              <1> ;%define gui.background
    12                              <1> ;Make the GUI have a loadable background
    13                              <1> 
    14                              <1> ;%define gui.time
    15                              <1> ;Show time in top right corner of screen
    16                              <1> 
    17                              <1> ;%define io.serial "1"
    18                              <1> ;Use the specified serial port for input and output instead of the keyboard and screen
    19                              <1> ;If the gui is included this should not be enabled
    20                              <1> 
    21                              <1> ;%define terminal.vsync
    22                              <1> ;Uses the RTC to automatically update the terminal at ~64Hz
    23                              <1> 	;WARNING:
    24                              <1> 	;This may cause problems on systems with non-standard RTC's
    25                              <1> 	;It is therefore recommended that you do not enable it even
    26                              <1> 	;though it gives a large speed improvement for character output
    27                              <1> 
    28                              <1> %define hardware.automatic
    29                              <1> ;Automatically load the sound and network drivers.
    30                              <1> 
    31                              <1> %define threads.included
    32                              <1> ;Include the thread testing stuff-this uses a relatively large amount of memory
    33                              <1> 
    34                              <1> %define exceptions.included
    35                              <1> ;Display debugging information should crashes occur-also uses quite a bit of memory
    36                              <1> 
    37                              <1> ;%define disk.protected
    38                              <1> ;Use protected mode instead of real mode for disk access-this allows for multitasking with disk reads
    39                              <1> 
    40                              <1> %define disk.real
    41                              <1> ;Use real mode for disk access-this gives greater compatibility
    42                              <1> 
    43                              <1> %define sound.included
    44                              <1> ;This includes the sound drivers
    45                              <1> 
    46                              <1> ;%define network.included
    47                              <1> ;This includes the network stack
    48                              <1> 
    49                              <1> ;%define rtl8169.included
    50                              <1> ;This includes the RTL8169 drivers
    51                              <1> 
    52                              <1> ;%define rtl8139.included
    53                              <1> ;This includes the RTL8139 drivers
    54                              <1> 
    55                              <1> ;%define ne2000.included
    56                              <1> ;This includes the ne2000 drivers
    57                              <1> 
    58                              <1> ;%define i8254x.included
    59                              <1> ;This includes the Intel 8254x drivers
    60                              <1> 
    61                              <1> ;%define sector.debug
    62                              <1> ;Dump the contents of the first sector of SollerOS
    63                              <1> 
    64                              <1> ;%define dos.compatible
    65                              <1> ;Make the kernel loadable by dos.
    66                              <1> 
    67                              <1> ;%define system.simple
    68                              <1> ;The smallest possible system, overrides all options
    69                              <1> 
    70                              <1> ;FIX DEPENDANCIES
    71                              <1> %ifdef system.simple
    72                              <1> 	%undef dos.compatible	;overides all including dos.compatible
    73                              <1> 	%define UNDEFALL
    74                              <1> %endif
    75                              <1> %ifdef dos.compatible
    76                              <1> 	%define UNDEFALL
    77                              <1> %endif
    78                              <1> %ifdef UNDEFALL
    79                              <1> 	%undef io.serial
    80                              <1> 	%undef disk.real
    81                              <1> 	%undef gui.included
    82                              <1> 	%undef gui.alphablending
    83                              <1> 	%undef gui.background
    84                              <1> 	%undef terminal.vsync
    85                              <1> 	%undef hardware.automatic
    86                              <1> 	%undef threads.included
    87                              <1> 	%undef exceptions.included
    88                              <1> 	%undef disk.protected
    89                              <1> 	%undef sound.included
    90                              <1> 	%undef network.included
    91                              <1> 	%undef rtl8139.included
    92                              <1> 	%undef rtl8169.included
    93                              <1> 	%undef ne2000.included
    94                              <1> 	%undef i8254x.included
    95                              <1> 	%undef sector.debug
    96                              <1> 	%undef UNDEFALL
    97                              <1> %endif
    98                              <1> %ifdef system.simple
    99                              <1> 	%define io.serial "1"
   100                              <1> 	%define disk.real
   101                              <1> %endif
   102                              <1> %ifdef gui.included
   103                              <1> 	%undef io.serial
   104                              <1> %else
   105                              <1> 	%undef gui.alphablending
   106                              <1> 	%undef gui.background
   107                              <1> %endif
   108                              <1> %ifdef network.included
   109                              <1> %else
   110                              <1> 	%undef i8254x.included
   111                              <1> 	%undef ne2000.included
   112                              <1> 	%undef rtl8139.included
   113                              <1> 	%undef rtl8169.included
   114                              <1> %endif
   115                              <1> %ifdef disk.protected
   116                              <1> 	%undef disk.real
   117                              <1> %else
   118                              <1> 	%ifdef disk.real
   119                              <1> 	%else
   120                              <1> 		%define disk.none
   121                              <1> 	%endif
   122                              <1> %endif
   123                                  [ORG 0x100]
   124                                  	%include "source/signature.asm"
   125                              <1> sigjump:
   126 00000000 E90E00              <1> 	jmp signatureend
   127                              <1> signature:
   128 00000003 536F6C6C65724F5320- <1> db "SollerOS ",0 ;Operating system name
   129 0000000C 00                  <1>
   130 0000000D 09010000            <1> dd 265	;version number
   131                              <1> signatureend:
   132                                  [BITS 16]
   133                                      %include "source/boot.asm"
   134                              <1>     ; MENU.ASM
   135                              <1> boot:
   136 00000011 8CC8                <1> 	mov ax, cs
   137 00000013 8ED8                <1> 	mov ds, ax
   138 00000015 8EC0                <1> 	mov es, ax
   139 00000017 8ED0                <1> 	mov ss, ax
   140 00000019 880E[CF87]          <1> 	mov [DriveNumber], cl
   141 0000001D 668916[D087]        <1> 	mov [lbaad], edx
   142                              <1> %ifdef io.serial
   143                              <1> 	call getmemorysize
   144                              <1> 	mov si, serialmsg
   145                              <1> 	call printrm
   146                              <1> 	jmp pmode
   147                              <1> serialmsg: db 10,13,"SollerOS: Using serial port ",io.serial," for I/O.",0
   148                              <1> %else
   149 00000022 E80300              <1> 	call vgaset	;make users switch using a command-this leads to very fast boots
   150 00000025 E95800              <1> 	jmp pmode
   151                              <1> %endif
   152                              <1> 	
   153                              <1> vgaset:
   154 00000028 B81200              <1> 	mov ax, 12h
   155 0000002B 31DB                <1> 	xor bx, bx
   156 0000002D CD10                <1> 	int 10h
   157 0000002F C606[CE87]00        <1> 	mov byte [guion], 0
   158 00000034 E80100              <1> 	call getmemorysize;get the memory map after the video is initialized
   159 00000037 C3                  <1> 	ret
   160                              <1> 
   161                              <1> getmemorysize:
   162 00000038 BF[D487]            <1> 	mov di, memlistbuf
   163 0000003B 6631DB              <1> 	xor ebx, ebx
   164                              <1> getmemsizeloop:
   165 0000003E 66B820E80000        <1> 	mov eax, 0xE820
   166 00000044 66BA50414D53        <1> 	mov edx, 0x0534D4150
   167 0000004A 66B918000000        <1> 	mov ecx, 24
   168 00000050 CD15                <1> 	int 0x15
   169 00000052 81C71800            <1> 	add di, 24
   170 00000056 81FF[148A]          <1> 	cmp di, memlistend
   171 0000005A 7309                <1> 	jae nomoregetmemsize
   172 0000005C 6681FB00000000      <1> 	cmp ebx, 0
   173 00000063 75D9                <1> 	jne getmemsizeloop
   174                              <1> nomoregetmemsize:
   175 00000065 81EF[D487]          <1> 	sub di, memlistbuf
   176 00000069 893E[148A]          <1> 	mov [memlistend], di
   177 0000006D C3                  <1> 	ret
   178                              <1> 	
   179                              <1> printrm:			; 'si' comes in with string address
   180 0000006E BB0700              <1>     mov bx,07		; write to display
   181 00000071 B40E                <1>     mov ah,0Eh		; screen function
   182 00000073 8A04                <1>    .lp:    mov al,[si]         ; get next character
   183 00000075 3C00                <1>     cmp al,0		; look for terminator 
   184 00000077 7406                <1>     je .done		; zero byte at end of string
   185 00000079 CD10                <1>     int 10h		; write character to screen.    
   186 0000007B 46                  <1> 	inc si	     	; move to next character
   187 0000007C E9F4FF              <1>     jmp .lp		; loop
   188 0000007F C3                  <1> .done: ret
   189                                      %include "source/pmode.asm"
   190                              <1> [BITS 16]
   191                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   192                              <1> ;	16-bit real mode
   193                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   194                              <1> 
   195                              <1> pmode:
   196 00000080 6631C0              <1> 	xor eax, eax
   197 00000083 6631DB              <1> 	xor ebx, ebx
   198 00000086 6631C9              <1> 	xor ecx, ecx
   199 00000089 6631D2              <1> 	xor edx, edx
   200 0000008C 6631F6              <1> 	xor esi, esi
   201 0000008F 6631FF              <1> 	xor edi, edi
   202 00000092 BA9200              <1> 	mov dx, 0x92
   203 00000095 EC                  <1> 	in al, dx	;;A20
   204 00000096 0C02                <1> 	or al, 2
   205 00000098 EE                  <1> 	out dx, al
   206 00000099 8CCB                <1> 	mov bx,cs		; EBX=segment
   207 0000009B 66C1E304            <1> 	shl ebx,4		;	<< 4
   208 0000009F 67668D03            <1> 	lea eax,[ebx]		; EAX=linear address of segment base
   209 000000A3 A3[8A03]            <1> 	mov [gdt2 + 2],ax
   210 000000A6 A3[9203]            <1> 	mov [gdt3 + 2],ax
   211 000000A9 66C1E810            <1> 	shr eax,16
   212 000000AD A2[8C03]            <1> 	mov [gdt2 + 4],al
   213 000000B0 A2[9403]            <1> 	mov [gdt3 + 4],al
   214 000000B3 8826[8F03]          <1> 	mov [gdt2 + 7],ah
   215 000000B7 8826[9703]          <1> 	mov [gdt3 + 7],ah
   216                              <1> 
   217 000000BB 66B8[DC8A0300]      <1> 	mov eax, initialstack
   218 000000C1 660306[3D02]        <1> 	add eax, [newcodecache]
   219 000000C6 A3[8203]            <1> 	mov [gdts + 2],ax
   220 000000C9 66C1E810            <1> 	shr eax, 16
   221 000000CD A2[8403]            <1> 	mov [gdts + 4],al
   222 000000D0 8826[8703]          <1> 	mov [gdts + 7], ah
   223                              <1> 	
   224 000000D4 66A1[3D02]          <1> 	mov eax, [newcodecache]
   225 000000D8 A3[9A03]            <1> 	mov [gdt4 + 2],ax
   226 000000DB A3[A203]            <1> 	mov [gdt5 + 2],ax
   227 000000DE A3[AA03]            <1> 	mov [gdtv8086 + 2], ax
   228 000000E1 A3[B203]            <1> 	mov [gdtv80862 + 2], ax
   229 000000E4 66C1E810            <1> 	shr eax,16
   230 000000E8 A2[9C03]            <1> 	mov [gdt4 + 4],al
   231 000000EB A2[A403]            <1> 	mov [gdt5 + 4],al
   232 000000EE A2[AC03]            <1> 	mov [gdtv8086 + 4],al
   233 000000F1 A2[B403]            <1> 	mov [gdtv80862 + 4],al
   234 000000F4 8826[9F03]          <1> 	mov [gdt4 + 7],ah
   235 000000F8 8826[A703]          <1> 	mov [gdt5 + 7],ah
   236 000000FC 8826[AF03]          <1> 	mov [gdtv8086 + 7],ah
   237 00000100 8826[B703]          <1> 	mov [gdtv80862 + 7],ah
   238                              <1> 	
   239 00000104 66B800004000        <1> 	mov eax, dosprogloc
   240 0000010A 660306[3D02]        <1> 	add eax, [newcodecache]
   241 0000010F A3[BA03]            <1> 	mov [gdtdos + 2],ax
   242 00000112 A3[C203]            <1> 	mov [gdtdos2 + 2],ax
   243 00000115 66C1E810            <1> 	shr eax,16
   244 00000119 A2[BC03]            <1> 	mov [gdtdos + 4],al
   245 0000011C A2[C403]            <1> 	mov [gdtdos2 + 4],al
   246 0000011F 8826[BF03]          <1> 	mov [gdtdos + 7],ah
   247 00000123 8826[C703]          <1> 	mov [gdtdos2 + 7],ah
   248                              <1> 	
   249                              <1> ; fix up gdt and idt
   250 00000127 67668D83[70030000]  <1> 	lea eax,[ebx + gdt]	; EAX=linear address of gdt
   251 0000012F 66A3[6603]          <1> 	mov [gdtr + 2],eax
   252 00000133 67668D83[C8030000]  <1> 	lea eax,[ebx + idt]	; EAX=linear address of idt
   253 0000013B 66A3[6C03]          <1> 	mov [idtr + 2],eax
   254 0000013F FA                  <1> 	cli
   255 00000140 0F0116[6403]        <1> 	lgdt [gdtr]
   256 00000145 0F011E[6A03]        <1> 	lidt [idtr]
   257 0000014A 6631DB              <1> 	xor ebx, ebx
   258 0000014D 8CDB                <1> 	mov bx, ds
   259 0000014F 66891E[3902]        <1> 	mov [basecache], ebx
   260 00000154 0F20C0              <1> 	mov eax,cr0
   261 00000157 0C01                <1> 	or al,1
   262 00000159 0F22C0              <1> 	mov cr0,eax
   263 0000015C EA[6101]1800        <1> 	jmp SYS_CODE_SEL:do_pm
   264                              <1> [BITS 32]
   265                              <1> do_pm:
   266 00000161 31C0                <1> 	xor eax, eax
   267 00000163 66B82000            <1> 	mov ax, SYS_DATA_SEL
   268 00000167 8ED8                <1> 	mov ds, ax
   269 00000169 8EC0                <1> 	mov es, ax
   270 0000016B 8EE0                <1> 	mov fs, ax
   271 0000016D 66B83000            <1> 	mov ax, NEW_DATA_SEL
   272 00000171 8EE8                <1> 	mov gs, ax
   273                              <1> 	
   274                              <1> copykernel:
   275 00000173 648B06              <1> 	mov eax, [fs:esi]
   276 00000176 658906              <1> 	mov [gs:esi], eax
   277 00000179 81C604000000        <1> 	add esi, 4
   278 0000017F 81FE[DC8A0300]      <1> 	cmp esi, bsscopy
   279 00000185 72EC                <1> 	jb copykernel
   280 00000187 EA[8E010000]2800    <1> 	jmp NEW_CODE_SEL:done_copy
   281                              <1> 	
   282                              <1> done_copy:
   283 0000018E 66B83000            <1> 	mov ax, NEW_DATA_SEL	;;these MUST be setup AFTER the kernel switches places!!!
   284 00000192 8ED8                <1> 	mov ds, ax
   285 00000194 8EC0                <1> 	mov es, ax
   286 00000196 8EE0                <1> 	mov fs, ax
   287                              <1> 	;mov ax, STACK_SEL
   288 00000198 8ED0                <1> 	mov ss, ax
   289 0000019A BC[7C9A0300]        <1> 	mov esp, stackend
   290 0000019F 66B82000            <1> 	mov ax, SYS_DATA_SEL
   291 000001A3 8EE8                <1> 	mov gs, ax
   292                              <1> 	
   293 000001A5 E81D620000          <1> 	call initialize	;initialize drivers
   294                              <1> 	
   295 000001AA A1[3D020000]        <1> 	mov eax, [newcodecache]
   296 000001AF C1E804              <1> 	shr eax, 4
   297 000001B2 A3[39020000]        <1> 	mov [basecache], eax
   298                              <1> 	
   299 000001B7 BE[168B1500]        <1> 	mov esi, bssend
   300 000001BC 31C0                <1> 	xor eax, eax
   301                              <1> clearkernelbuffers:
   302 000001BE 8906                <1> 	mov [esi], eax
   303 000001C0 81EE04000000        <1> 	sub esi, 4
   304 000001C6 81FE[DC8A0300]      <1> 	cmp esi, bsscopy
   305 000001CC 77F0                <1> 	ja clearkernelbuffers
   306 000001CE FB                  <1> 	sti
   307                              <1> 
   308                              <1> getmemoryspace:
   309 000001CF BE[D4870000]        <1> 	mov esi, memlistbuf
   310 000001D4 31FF                <1> 	xor edi, edi
   311 000001D6 668B3D[148A0000]    <1> 	mov di, [memlistend]
   312 000001DD 01F7                <1> 	add edi, esi
   313 000001DF 31C0                <1> 	xor eax, eax
   314                              <1> memoryspaceaddition:
   315 000001E1 39FE                <1> 	cmp esi, edi
   316 000001E3 7325                <1> 	jae finishedmemspacecalc
   317 000001E5 81C608000000        <1> 	add esi, 8
   318 000001EB 8B0E                <1> 	mov ecx, [esi]
   319 000001ED 81C608000000        <1> 	add esi, 8
   320 000001F3 8B1E                <1> 	mov ebx, [esi]
   321 000001F5 81C608000000        <1> 	add esi, 8
   322 000001FB 81FB01000000        <1> 	cmp ebx, 1
   323 00000201 75DE                <1> 	jne memoryspaceaddition
   324 00000203 01C8                <1> 	add eax, ecx
   325 00000205 E9D7FFFFFF          <1> 	jmp memoryspaceaddition
   326                              <1> finishedmemspacecalc:
   327 0000020A A3[4E020000]        <1> 	mov [memoryspace], eax
   328                              <1> %ifdef gui.included
   329 0000020F 803D[CE870000]00    <1> 	cmp byte [guion], 0
   330 00000216 741C                <1> 	je normalstartup
   331 00000218 8B1D[39020000]      <1> 	mov ebx, [basecache]
   332 0000021E C1E304              <1> 	shl ebx, 4
   333 00000221 8B3D[6D570000]      <1> 	mov edi, [physbaseptr]
   334 00000227 29DF                <1> 	sub edi, ebx
   335 00000229 893D[6D570000]      <1> 	mov [physbaseptr], edi
   336 0000022F E9AF670000          <1> 	jmp guiboot
   337                              <1> %endif
   338                              <1> normalstartup:
   339 00000234 E917290000          <1> 	jmp os
   340                              <1> 	
   341 00000239 00000000            <1> basecache dd 0
   342 0000023D 00001000            <1> newcodecache dd 0x100000
   343                              <1> 
   344 00000241 00                  <1> testingcpuspeed db 0
   345 00000242 00000000            <1> cpuspeedperint dd 0
   346 00000246 0000000000000000    <1> cpuclocksperint dd 0,0
   347 0000024E 00000000            <1> memoryspace dd 0
   348 00000252 7D0A                <1> pitdiv dw 2685
   349 00000254 2E562200            <1> timeinterval dd 2250286
   350 00000258 00000000            <1> timeseconds dd 0
   351 0000025C 00000000            <1> timenanoseconds dd 0
   352 00000260 00                  <1> soundon db 0
   353 00000261 0000                <1> soundrepititions dw 0
   354 00000263 00000000            <1> soundpos dd 0
   355 00000267 00000000            <1> soundendpos dd 0
   356                              <1> 
   357                              <1> cpuspeedend:
   358 0000026B C605[41020000]00    <1> 	mov byte [testingcpuspeed], 0
   359 00000272 A3[42020000]        <1> 	mov [cpuspeedperint], eax
   360 00000277 B8[C8500000]        <1> 	mov eax, cpuspeedloopend
   361 0000027C 890424              <1> 	mov [esp], eax
   362 0000027F E9D0000000          <1> 	jmp handled
   363                              <1> 
   364                              <1> ;if using the rtc, the default frequency yeilds a period of 976562.5ns
   365                              <1> ;if using the pit, div=451 is 377981.0004, div=5370 is 4500572.00007ns
   366                              <1> ;div=55483 is 46500044.000006ns, div=2685 is 2250286.00004ns, div=902 is 755962.0008
   367                              <1> 
   368                              <1> pitinterrupt: ;this controls threading
   369 00000284 FA                  <1> 	cli
   370 00000285 803D[41020000]01    <1> 	cmp byte [testingcpuspeed], 1	;check to see if the cpu speed test is running
   371 0000028C 74DD                <1> 	je cpuspeedend
   372                              <1> 		
   373 0000028E E89A000000          <1> 	call timekeeper ;this updates the internal time
   374                              <1> 	
   375 00000293 803D[60020000]01    <1> 	cmp byte [soundon], 1
   376 0000029A 0F84B1580000        <1> 	je near PCSpeakerRAW
   377                              <1> timerinterrupt:	;put this into the interrupt handler that controls threading
   378                              <1> %ifdef threads.included
   379 000002A0 803D[DE690000]01    <1> 	cmp byte [threadson], 1
   380 000002A7 0F84D1660000        <1> 	je near threadswitch
   381                              <1> %endif
   382                              <1> keyinterrupt:		;checks for escape, if pressed, it quits the program currently running
   383 000002AD 803D[DE690000]00    <1> 	cmp byte [threadson], 0
   384 000002B4 0F849A000000        <1> 	je near handled
   385                              <1> %ifdef io.serial
   386                              <1> 	jmp handled
   387                              <1> %else
   388 000002BA 60                  <1> 	pusha
   389 000002BB E464                <1> 	in al, 64h
   390 000002BD A820                <1> 	test al, 20h
   391 000002BF 0F858D000000        <1> 	jnz near handled2
   392 000002C5 E460                <1> 	in al, 60h
   393 000002C7 3C01                <1> 	cmp al, 1		;escape
   394 000002C9 7405                <1> 	je userint
   395 000002CB E982000000          <1> 	jmp handled2
   396                              <1> ;	cmp al, 0x57
   397                              <1> ;	jne near handled2
   398                              <1> ;pauseint:	;F11 pauses
   399                              <1> ;	in al, 64h
   400                              <1> ;	test al, 20h
   401                              <1> ;	jnz pauseint
   402                              <1> ;	in al, 60h
   403                              <1> ;	cmp al, 0xD7
   404                              <1> ;	jne pauseint
   405                              <1> ;	mov esi, pausemsg
   406                              <1> ;	call print
   407                              <1> ;	cli
   408                              <1> ;pauselp:
   409                              <1> ;	nop
   410                              <1> ;	in al, 64h
   411                              <1> ;	test al, 20h
   412                              <1> ;	jnz pauselp
   413                              <1> ;	in al, 60h
   414                              <1> ;	cmp al, 0x57
   415                              <1> ;	je near handled2
   416                              <1> ;	jmp pauselp
   417                              <1> ;pausemsg db "Paused",10,0
   418                              <1> userint:
   419 000002D0 31C0                <1> 	xor eax, eax
   420 000002D2 3905[DC9A0300]      <1> 	cmp [sigtable], eax
   421 000002D8 7411                <1> 	je .nosighook
   422 000002DA 8B1D[DC9A0300]      <1> 	mov ebx, [sigtable]
   423 000002E0 895C2420            <1> 	mov [esp + 32], ebx
   424                              <1> ;	mov [sigtable], eax
   425 000002E4 B020                <1> 	mov al, 0x20
   426 000002E6 E620                <1> 	out 0x20, al
   427 000002E8 61                  <1> 	popa
   428 000002E9 FB                  <1> 	sti
   429 000002EA CF                  <1> 	iret
   430                              <1> .nosighook:
   431                              <1> 		;UNMASK ALL INTS
   432 000002EB E621                <1> 	out 0x21, al
   433 000002ED E6A1                <1> 	out 0xA1, al
   434 000002EF B020                <1> 	mov al, 0x20
   435 000002F1 E6A0                <1> 	out 0xA0, al
   436 000002F3 E620                <1> 	out 0x20, al
   437                              <1> 		;RESET PIT DIVISOR
   438 000002F5 66A1[52020000]      <1> 	mov ax, [pitdiv]
   439 000002FB E640                <1> 	out 0x40, al
   440 000002FD 66C1C008            <1> 	rol ax, 8
   441 00000301 E640                <1> 	out 0x40, al
   442                              <1> 		;RESET PIC
   443 00000303 B020                <1> 	mov al, 0x20
   444 00000305 E620                <1> 	out 0x20, al
   445 00000307 61                  <1> 	popa
   446 00000308 FB                  <1> 	sti
   447 00000309 BC[7C9A0300]        <1> 	mov esp, stackend ;reset stack
   448 0000030E E9A2290000          <1> 	jmp returnfromexp
   449                              <1> %endif
   450 00000313 0A                  <1> rtcrate db 10
   451                              <1> rtcint:	;this runs at 64Hz which is perfect for 60Hz displays
   452                              <1> %ifdef io.serial
   453                              <1> %else
   454                              <1> %ifdef terminal.vsync
   455                              <1> 	cli
   456                              <1> 	cmp byte [termcopyneeded], 0
   457                              <1> 	je .nocopy
   458                              <1> 	call newtermcopy
   459                              <1> .nocopy
   460                              <1> 	push eax
   461                              <1> 	mov al, 0xC
   462                              <1> 	out 0x70, al
   463                              <1> 	in al, 0x71
   464                              <1> 	pop eax
   465                              <1> 	sti
   466                              <1> %endif
   467                              <1> %endif
   468 00000314 E942000000          <1> 	jmp handled4
   469                              <1> %ifdef rtl8139.included
   470                              <1> rtl8139.irq:
   471                              <1> 	cli
   472                              <1> 	push edx
   473                              <1> 	push eax
   474                              <1> 	mov edx, [rtl8139.basenicaddr]
   475                              <1> 	add edx, rtl8139.ISR
   476                              <1> 	xor eax, eax
   477                              <1> 	in ax, dx
   478                              <1> 	out dx, ax
   479                              <1> 	pop eax
   480                              <1> 	pop edx
   481                              <1> 	sti
   482                              <1> 	jmp handled4
   483                              <1> %endif
   484                              <1> %ifdef sound.included
   485                              <1> sblaster.irq:
   486 00000319 FA                  <1> 	cli
   487 0000031A 60                  <1> 	pusha
   488 0000031B 803D[485E0000]01    <1> 	cmp byte [SoundBlaster], 1
   489 00000322 0F841A590000        <1> 	je near sblaster.cont
   490 00000328 E925000000          <1> 	jmp handled2
   491                              <1> %endif
   492                              <1> 	
   493                              <1> timekeeper:
   494 0000032D 50                  <1> 	push eax
   495 0000032E A1[5C020000]        <1> 	mov eax, [timenanoseconds]
   496 00000333 0305[54020000]      <1> 	add eax, [timeinterval]
   497 00000339 3D00CA9A3B          <1> 	cmp eax, 1000000000
   498 0000033E 720B                <1> 	jb nonanosecondrollover
   499 00000340 FF05[58020000]      <1> 	inc dword [timeseconds]
   500 00000346 2D00CA9A3B          <1> 	sub eax, 1000000000
   501                              <1> 	%ifdef gui.time
   502                              <1> 		;REMOVE THIS IT IS NOT EFFICIENT
   503                              <1> 		cmp byte [guion], 1
   504                              <1> 		jne nonanosecondrollover
   505                              <1> 		cmp dword [dragging], 0
   506                              <1> 		jne nonanosecondrollover
   507                              <1> 		pusha
   508                              <1> 		call guitime
   509                              <1> 		popa
   510                              <1> 	%endif
   511                              <1> nonanosecondrollover:
   512 0000034B A3[5C020000]        <1> 	mov [timenanoseconds], eax
   513 00000350 58                  <1> 	pop eax
   514 00000351 C3                  <1> 	ret
   515                              <1> 	
   516                              <1> handled2:
   517 00000352 61                  <1> 	popa
   518                              <1> handled3:
   519 00000353 FB                  <1> 	sti
   520                              <1> handled:
   521 00000354 50                  <1> 	push eax
   522 00000355 B020                <1> 	mov al, 0x20
   523 00000357 E620                <1> 	out 0x20, al
   524 00000359 58                  <1> 	pop eax
   525 0000035A CF                  <1> 	iret
   526                              <1> handled4:
   527 0000035B 50                  <1> 	push eax
   528 0000035C B020                <1> 	mov al, 0x20
   529 0000035E E6A0                <1> 	out 0xA0, al
   530 00000360 E620                <1> 	out 0x20, al
   531 00000362 58                  <1> 	pop eax
   532 00000363 CF                  <1> 	iret
   533                              <1> [BITS 16]
   534                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   535                              <1> ;	16-bit limit/32-bit linear base address of GDT and IDT
   536                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   537 00000364 5700                <1> gdtr:	dw gdt_end - gdt - 1	; GDT limit
   538 00000366 00000000            <1> 	dd 0    		; filled with linear, physical address of GDT
   539                              <1> 
   540 0000036A FF07                <1> idtr:	dw idt_end - idt - 1	; IDT limit
   541 0000036C 00000000            <1> 	dd 0			; filled with linear, physical address of IDT
   542                              <1> 
   543                              <1> 
   544 00000370 0000                <1> gdt:	dw 0			; limit 15:0
   545 00000372 0000                <1> 	dw 0			; base 15:0
   546 00000374 00                  <1> 	db 0			; base 23:16
   547 00000375 00                  <1> 	db 0			; type
   548 00000376 00                  <1> 	db 0			; limit 19:16, flags
   549 00000377 00                  <1> 	db 0			; base 31:24
   550                              <1> ; linear data segment descriptor
   551                              <1> LINEAR_SEL	equ	$-gdt
   552 00000378 FFFF                <1> 	dw 0xFFFF		; limit 0xFFFFF
   553 0000037A 0000                <1> 	dw 0			; base for this one is always 0
   554 0000037C 00                  <1> 	db 0
   555 0000037D 92                  <1> 	db 0x92			; present, ring 0, data, expand-up, writable
   556 0000037E CF                  <1> 	db 0xCF			; page-granular, 32-bit
   557 0000037F 00                  <1> 	db 0
   558                              <1> STACK_SEL	equ $-gdt
   559 00000380 0200                <1> gdts:	dw 2;(stackend)/4096
   560 00000382 0000                <1> 	dw 0
   561 00000384 00                  <1> 	db 0
   562 00000385 92                  <1> 	db 0x92
   563 00000386 CF                  <1> 	db 0xCF
   564 00000387 00                  <1> 	db 0
   565                              <1> ; code segment descriptor
   566                              <1> SYS_CODE_SEL	equ	$-gdt
   567 00000388 FFFF                <1> gdt2:	dw 0xFFFF
   568 0000038A 0000                <1> 	dw 0			; (base gets set above)
   569 0000038C 00                  <1> 	db 0
   570 0000038D 9A                  <1> 	db 0x9A			; present, ring 0, code, non-conforming, readable
   571 0000038E CF                  <1> 	db 0xCF
   572 0000038F 00                  <1> 	db 0
   573                              <1> ; data segment descriptor
   574                              <1> SYS_DATA_SEL	equ	$-gdt
   575 00000390 FFFF                <1> gdt3:	dw 0xFFFF
   576 00000392 0000                <1> 	dw 0			; (base gets set above)
   577 00000394 00                  <1> 	db 0
   578 00000395 92                  <1> 	db 0x92			; present, ring 0, data, expand-up, writable
   579 00000396 CF                  <1> 	db 0xCF
   580 00000397 00                  <1> 	db 0
   581                              <1> NEW_CODE_SEL	equ	$-gdt
   582 00000398 FFFF                <1> gdt4:	dw 0xFFFF
   583 0000039A 0000                <1> 	dw 0			; (base gets set above)
   584 0000039C 00                  <1> 	db 0
   585 0000039D 9A                  <1> 	db 0x9A			; present, ring 0, code, non-conforming, readable
   586 0000039E CF                  <1> 	db 0xCF
   587 0000039F 00                  <1> 	db 0
   588                              <1> ; data segment descriptor
   589                              <1> NEW_DATA_SEL	equ	$-gdt
   590 000003A0 FFFF                <1> gdt5:	dw 0xFFFF
   591 000003A2 0000                <1> 	dw 0			; (base gets set above)
   592 000003A4 00                  <1> 	db 0
   593 000003A5 92                  <1> 	db 0x92			; present, ring 0, data, expand-up, writable
   594 000003A6 CF                  <1> 	db 0xCF
   595 000003A7 00                  <1> 	db 0
   596                              <1> V8086_CODE_SEL	equ $-gdt
   597 000003A8 FFFF                <1> gdtv8086: dw 0xFFFF
   598 000003AA 0000                <1> 	dw 0
   599 000003AC 00                  <1> 	db 0
   600 000003AD 9A                  <1> 	db 0x9A
   601 000003AE 8F                  <1> 	db 0x8F
   602 000003AF 00                  <1> 	db 0
   603                              <1> V8086_DATA_SEL	equ $-gdt
   604 000003B0 FFFF                <1> gdtv80862: dw 0xFFFF
   605 000003B2 0000                <1> 	dw 0
   606 000003B4 00                  <1> 	db 0
   607 000003B5 92                  <1> 	db 0x92
   608 000003B6 8F                  <1> 	db 0x8F
   609 000003B7 00                  <1> 	db 0
   610                              <1> DOS_CODE_SEL	equ $-gdt	;this gives dos programs complete access to one megabyte at the beginning of memory
   611 000003B8 0001                <1> gdtdos:	dw 256	;give it 1 MB
   612 000003BA 0000                <1> 	dw 0
   613 000003BC 00                  <1> 	db 0
   614 000003BD 9A                  <1> 	db 0x9A
   615 000003BE 8F                  <1> 	db 0x8F ;16 bit
   616 000003BF 00                  <1> 	db 0
   617                              <1> DOS_DATA_SEL 	equ $-gdt
   618 000003C0 0001                <1> gdtdos2:	dw 256
   619 000003C2 0000                <1> 	dw 0
   620 000003C4 00                  <1> 	db 0
   621 000003C5 92                  <1> 	db 0x92
   622 000003C6 8F                  <1> 	db 0x8F ;16 bit
   623 000003C7 00                  <1> 	db 0
   624                              <1> gdt_end:
   625                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   626                              <1> ;	interrupt descriptor table (IDT)
   627                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   628                              <1> ; 32 reserved interrupts:
   629                              <1> idt:	
   630                              <1> %assign i 0
   631                              <1> %rep    8
   632                              <1> 		dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   633                              <1> %assign i i+1
   634                              <1> %endrep
   635 000003C8 [E90C]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   636                              <2> %assign i i+1
   637 000003D0 [F50C]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   638                              <2> %assign i i+1
   639 000003D8 [010D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   640                              <2> %assign i i+1
   641 000003E0 [0D0D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   642                              <2> %assign i i+1
   643 000003E8 [190D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   644                              <2> %assign i i+1
   645 000003F0 [250D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   646                              <2> %assign i i+1
   647 000003F8 [310D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   648                              <2> %assign i i+1
   649 00000400 [3D0D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   650                              <2> %assign i i+1
   651 00000408 [490D]1800008E0000  <1> 		dw unhand + 8*12,SYS_CODE_SEL,0x8E00,0	;double fault handler in original memory
   652                              <1> %assign i 9
   653                              <1> %rep    23
   654                              <1> 		dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   655                              <1> %assign i i+1
   656                              <1> %endrep
   657 00000410 [550D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   658                              <2> %assign i i+1
   659 00000418 [610D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   660                              <2> %assign i i+1
   661 00000420 [6D0D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   662                              <2> %assign i i+1
   663 00000428 [790D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   664                              <2> %assign i i+1
   665 00000430 [850D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   666                              <2> %assign i i+1
   667 00000438 [910D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   668                              <2> %assign i i+1
   669 00000440 [9D0D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   670                              <2> %assign i i+1
   671 00000448 [A90D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   672                              <2> %assign i i+1
   673 00000450 [B50D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   674                              <2> %assign i i+1
   675 00000458 [C10D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   676                              <2> %assign i i+1
   677 00000460 [CD0D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   678                              <2> %assign i i+1
   679 00000468 [D90D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   680                              <2> %assign i i+1
   681 00000470 [E50D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   682                              <2> %assign i i+1
   683 00000478 [F10D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   684                              <2> %assign i i+1
   685 00000480 [FD0D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   686                              <2> %assign i i+1
   687 00000488 [090E]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   688                              <2> %assign i i+1
   689 00000490 [150E]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   690                              <2> %assign i i+1
   691 00000498 [210E]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   692                              <2> %assign i i+1
   693 000004A0 [2D0E]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   694                              <2> %assign i i+1
   695 000004A8 [390E]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   696                              <2> %assign i i+1
   697 000004B0 [450E]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   698                              <2> %assign i i+1
   699 000004B8 [510E]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   700                              <2> %assign i i+1
   701 000004C0 [5D0E]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   702                              <2> %assign i i+1
   703 000004C8 [062A]2800008E0000  <1> 		dw int20h,NEW_CODE_SEL,0x8E00,0
   704 000004D0 [0A2A]2800008E0000  <1> 		dw int21h,NEW_CODE_SEL,0x8E00,0
   705                              <1> %assign i 0x22
   706                              <1> %rep 14
   707                              <1> 		dw handled,NEW_CODE_SEL,0x8E00,0
   708                              <1> %assign i +1
   709                              <1> %endrep
   710 000004D8 [5403]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   711                              <2> %assign i +1
   712 000004E0 [5403]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   713                              <2> %assign i +1
   714 000004E8 [5403]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   715                              <2> %assign i +1
   716 000004F0 [5403]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   717                              <2> %assign i +1
   718 000004F8 [5403]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   719                              <2> %assign i +1
   720 00000500 [5403]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   721                              <2> %assign i +1
   722 00000508 [5403]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   723                              <2> %assign i +1
   724 00000510 [5403]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   725                              <2> %assign i +1
   726 00000518 [5403]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   727                              <2> %assign i +1
   728 00000520 [5403]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   729                              <2> %assign i +1
   730 00000528 [5403]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   731                              <2> %assign i +1
   732 00000530 [5403]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   733                              <2> %assign i +1
   734 00000538 [5403]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   735                              <2> %assign i +1
   736 00000540 [5403]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   737                              <2> %assign i +1
   738                              <1> ;INT 30h for os use and 3rd party use:
   739 00000548 [EA1B]2800008E0000  <1> 		dw newints,NEW_CODE_SEL,0x8E00,0
   740                              <1> %assign i 0x31
   741                              <1> %rep 15
   742                              <1> 		dw handled,NEW_CODE_SEL,0x8E00,0
   743                              <1> %assign i +1
   744                              <1> %endrep
   745 00000550 [5403]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   746                              <2> %assign i +1
   747 00000558 [5403]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   748                              <2> %assign i +1
   749 00000560 [5403]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   750                              <2> %assign i +1
   751 00000568 [5403]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   752                              <2> %assign i +1
   753 00000570 [5403]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   754                              <2> %assign i +1
   755 00000578 [5403]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   756                              <2> %assign i +1
   757 00000580 [5403]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   758                              <2> %assign i +1
   759 00000588 [5403]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   760                              <2> %assign i +1
   761 00000590 [5403]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   762                              <2> %assign i +1
   763 00000598 [5403]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   764                              <2> %assign i +1
   765 000005A0 [5403]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   766                              <2> %assign i +1
   767 000005A8 [5403]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   768                              <2> %assign i +1
   769 000005B0 [5403]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   770                              <2> %assign i +1
   771 000005B8 [5403]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   772                              <2> %assign i +1
   773 000005C0 [5403]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   774                              <2> %assign i +1
   775                              <1> ;and here we are at 0x40
   776                              <1> ;here are all the irq's
   777 000005C8 [8402]2800008E0000  <1> 		dw pitinterrupt,NEW_CODE_SEL,0x8E00,0 ;IRQ 0 = PIT
   778 000005D0 [5403]2800008E0000  <1> 		dw handled,NEW_CODE_SEL,0x8E00,0 ;IRQ 1 = keyboard
   779 000005D8 [5403]2800008E0000  <1> 		dw handled,NEW_CODE_SEL,0x8E00,0 ;IRQ 2
   780 000005E0 [5403]2800008E0000  <1> 		dw handled,NEW_CODE_SEL,0x8E00,0 ;IRQ 3
   781 000005E8 [5403]2800008E0000  <1> 		dw handled,NEW_CODE_SEL,0x8E00,0 ;IRQ 4
   782                              <1> 	%ifdef sound.included
   783 000005F0 [1903]2800008E0000  <1> 		dw sblaster.irq,NEW_CODE_SEL,0x8E00,0 ;IRQ 5 = default SoundBlaster
   784                              <1> 	%else
   785                              <1> 		dw handled,NEW_CODE_SEL,0x8E00,0 ;IRQ 5
   786                              <1> 	%endif
   787 000005F8 [5403]2800008E0000  <1> 		dw handled,NEW_CODE_SEL,0x8E00,0 ;IRQ 6
   788 00000600 [5403]2800008E0000  <1> 		dw handled,NEW_CODE_SEL,0x8E00,0 ;IRQ 7
   789 00000608 [1403]2800008E0000  <1> 		dw rtcint,NEW_CODE_SEL,0x8E00,0 ;IRQ 8 = RTC
   790 00000610 [5B03]2800008E0000  <1> 		dw handled4,NEW_CODE_SEL,0x8E00,0 ;IRQ 9 = default NE2000
   791 00000618 [5B03]2800008E0000  <1> 		dw handled4,NEW_CODE_SEL,0x8E00,0 ;IRQ 10
   792                              <1> 	%ifdef rtl8139.included
   793                              <1> 		dw rtl8139.irq,NEW_CODE_SEL,0x8E00,0 ;IRQ 11 = default RTL8139
   794                              <1> 	%else
   795 00000620 [5B03]2800008E0000  <1> 		dw handled4,NEW_CODE_SEL,0x8E00,0 ;IRQ 11
   796                              <1> 	%endif
   797 00000628 [5B03]2800008E0000  <1> 		dw handled4,NEW_CODE_SEL,0x8E00,0 ;IRQ 12
   798 00000630 [5B03]2800008E0000  <1> 		dw handled4,NEW_CODE_SEL,0x8E00,0 ;IRQ 13
   799 00000638 [5B03]2800008E0000  <1> 		dw handled4,NEW_CODE_SEL,0x8E00,0 ;IRQ 14
   800 00000640 [5B03]2800008E0000  <1> 		dw handled4,NEW_CODE_SEL,0x8E00,0 ;IRQ 15
   801                              <1> ;This brings me up to 0x50
   802                              <1> %assign i 0x50
   803                              <1> %rep 176
   804                              <1> 		dw handled, NEW_CODE_SEL,0x8E00,0
   805                              <1> 		;dw unhand + i*12, NEW_CODE_SEL,0x8E00,0
   806                              <1> %assign i +1
   807                              <1> %endrep
   808 00000648 [5403]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   809                              <2> 
   810                              <2> %assign i +1
   811 00000650 [5403]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   812                              <2> 
   813                              <2> %assign i +1
   814 00000658 [5403]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   815                              <2> 
   816                              <2> %assign i +1
   817 00000660 [5403]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   818                              <2> 
   819                              <2> %assign i +1
   820 00000668 [5403]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   821                              <2> 
   822                              <2> %assign i +1
   823 00000670 [5403]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   824                              <2> 
   825                              <2> %assign i +1
   826 00000678 [5403]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   827                              <2> 
   828                              <2> %assign i +1
   829 00000680 [5403]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   830                              <2> 
   831                              <2> %assign i +1
   832 00000688 [5403]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   833                              <2> 
   834                              <2> %assign i +1
   835 00000690 [5403]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   836                              <2> 
   837                              <2> %assign i +1
   838 00000698 [5403]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   839                              <2> 
   840                              <2> %assign i +1
   841 000006A0 [5403]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   842                              <2> 
   843                              <2> %assign i +1
   844 000006A8 [5403]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   845                              <2> 
   846                              <2> %assign i +1
   847 000006B0 [5403]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   848                              <2> 
   849                              <2> %assign i +1
   850 000006B8 [5403]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   851                              <2> 
   852                              <2> %assign i +1
   853 000006C0 [5403]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   854                              <2> 
   855                              <2> %assign i +1
   856 000006C8 [5403]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   857                              <2> 
   858                              <2> %assign i +1
   859 000006D0 [5403]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   860                              <2> 
   861                              <2> %assign i +1
   862 000006D8 [5403]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   863                              <2> 
   864                              <2> %assign i +1
   865 000006E0 [5403]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   866                              <2> 
   867                              <2> %assign i +1
   868 000006E8 [5403]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   869                              <2> 
   870                              <2> %assign i +1
   871 000006F0 [5403]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   872                              <2> 
   873                              <2> %assign i +1
   874 000006F8 [5403]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   875                              <2> 
   876                              <2> %assign i +1
   877 00000700 [5403]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   878                              <2> 
   879                              <2> %assign i +1
   880 00000708 [5403]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   881                              <2> 
   882                              <2> %assign i +1
   883 00000710 [5403]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   884                              <2> 
   885                              <2> %assign i +1
   886 00000718 [5403]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   887                              <2> 
   888                              <2> %assign i +1
   889 00000720 [5403]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   890                              <2> 
   891                              <2> %assign i +1
   892 00000728 [5403]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   893                              <2> 
   894                              <2> %assign i +1
   895 00000730 [5403]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   896                              <2> 
   897                              <2> %assign i +1
   898 00000738 [5403]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   899                              <2> 
   900                              <2> %assign i +1
   901 00000740 [5403]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   902                              <2> 
   903                              <2> %assign i +1
   904 00000748 [5403]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   905                              <2> 
   906                              <2> %assign i +1
   907 00000750 [5403]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   908                              <2> 
   909                              <2> %assign i +1
   910 00000758 [5403]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   911                              <2> 
   912                              <2> %assign i +1
   913 00000760 [5403]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   914                              <2> 
   915                              <2> %assign i +1
   916 00000768 [5403]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   917                              <2> 
   918                              <2> %assign i +1
   919 00000770 [5403]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   920                              <2> 
   921                              <2> %assign i +1
   922 00000778 [5403]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   923                              <2> 
   924                              <2> %assign i +1
   925 00000780 [5403]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   926                              <2> 
   927                              <2> %assign i +1
   928 00000788 [5403]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   929                              <2> 
   930                              <2> %assign i +1
   931 00000790 [5403]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   932                              <2> 
   933                              <2> %assign i +1
   934 00000798 [5403]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   935                              <2> 
   936                              <2> %assign i +1
   937 000007A0 [5403]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   938                              <2> 
   939                              <2> %assign i +1
   940 000007A8 [5403]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   941                              <2> 
   942                              <2> %assign i +1
   943 000007B0 [5403]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   944                              <2> 
   945                              <2> %assign i +1
   946 000007B8 [5403]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   947                              <2> 
   948                              <2> %assign i +1
   949 000007C0 [5403]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   950                              <2> 
   951                              <2> %assign i +1
   952 000007C8 [5403]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   953                              <2> 
   954                              <2> %assign i +1
   955 000007D0 [5403]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   956                              <2> 
   957                              <2> %assign i +1
   958 000007D8 [5403]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   959                              <2> 
   960                              <2> %assign i +1
   961 000007E0 [5403]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   962                              <2> 
   963                              <2> %assign i +1
   964 000007E8 [5403]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   965                              <2> 
   966                              <2> %assign i +1
   967 000007F0 [5403]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   968                              <2> 
   969                              <2> %assign i +1
   970 000007F8 [5403]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   971                              <2> 
   972                              <2> %assign i +1
   973 00000800 [5403]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   974                              <2> 
   975                              <2> %assign i +1
   976 00000808 [5403]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   977                              <2> 
   978                              <2> %assign i +1
   979 00000810 [5403]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   980                              <2> 
   981                              <2> %assign i +1
   982 00000818 [5403]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   983                              <2> 
   984                              <2> %assign i +1
   985 00000820 [5403]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   986                              <2> 
   987                              <2> %assign i +1
   988 00000828 [5403]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   989                              <2> 
   990                              <2> %assign i +1
   991 00000830 [5403]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   992                              <2> 
   993                              <2> %assign i +1
   994 00000838 [5403]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   995                              <2> 
   996                              <2> %assign i +1
   997 00000840 [5403]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   998                              <2> 
   999                              <2> %assign i +1
  1000 00000848 [5403]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1001                              <2> 
  1002                              <2> %assign i +1
  1003 00000850 [5403]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1004                              <2> 
  1005                              <2> %assign i +1
  1006 00000858 [5403]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1007                              <2> 
  1008                              <2> %assign i +1
  1009 00000860 [5403]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1010                              <2> 
  1011                              <2> %assign i +1
  1012 00000868 [5403]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1013                              <2> 
  1014                              <2> %assign i +1
  1015 00000870 [5403]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1016                              <2> 
  1017                              <2> %assign i +1
  1018 00000878 [5403]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1019                              <2> 
  1020                              <2> %assign i +1
  1021 00000880 [5403]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1022                              <2> 
  1023                              <2> %assign i +1
  1024 00000888 [5403]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1025                              <2> 
  1026                              <2> %assign i +1
  1027 00000890 [5403]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1028                              <2> 
  1029                              <2> %assign i +1
  1030 00000898 [5403]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1031                              <2> 
  1032                              <2> %assign i +1
  1033 000008A0 [5403]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1034                              <2> 
  1035                              <2> %assign i +1
  1036 000008A8 [5403]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1037                              <2> 
  1038                              <2> %assign i +1
  1039 000008B0 [5403]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1040                              <2> 
  1041                              <2> %assign i +1
  1042 000008B8 [5403]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1043                              <2> 
  1044                              <2> %assign i +1
  1045 000008C0 [5403]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1046                              <2> 
  1047                              <2> %assign i +1
  1048 000008C8 [5403]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1049                              <2> 
  1050                              <2> %assign i +1
  1051 000008D0 [5403]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1052                              <2> 
  1053                              <2> %assign i +1
  1054 000008D8 [5403]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1055                              <2> 
  1056                              <2> %assign i +1
  1057 000008E0 [5403]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1058                              <2> 
  1059                              <2> %assign i +1
  1060 000008E8 [5403]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1061                              <2> 
  1062                              <2> %assign i +1
  1063 000008F0 [5403]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1064                              <2> 
  1065                              <2> %assign i +1
  1066 000008F8 [5403]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1067                              <2> 
  1068                              <2> %assign i +1
  1069 00000900 [5403]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1070                              <2> 
  1071                              <2> %assign i +1
  1072 00000908 [5403]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1073                              <2> 
  1074                              <2> %assign i +1
  1075 00000910 [5403]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1076                              <2> 
  1077                              <2> %assign i +1
  1078 00000918 [5403]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1079                              <2> 
  1080                              <2> %assign i +1
  1081 00000920 [5403]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1082                              <2> 
  1083                              <2> %assign i +1
  1084 00000928 [5403]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1085                              <2> 
  1086                              <2> %assign i +1
  1087 00000930 [5403]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1088                              <2> 
  1089                              <2> %assign i +1
  1090 00000938 [5403]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1091                              <2> 
  1092                              <2> %assign i +1
  1093 00000940 [5403]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1094                              <2> 
  1095                              <2> %assign i +1
  1096 00000948 [5403]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1097                              <2> 
  1098                              <2> %assign i +1
  1099 00000950 [5403]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1100                              <2> 
  1101                              <2> %assign i +1
  1102 00000958 [5403]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1103                              <2> 
  1104                              <2> %assign i +1
  1105 00000960 [5403]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1106                              <2> 
  1107                              <2> %assign i +1
  1108 00000968 [5403]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1109                              <2> 
  1110                              <2> %assign i +1
  1111 00000970 [5403]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1112                              <2> 
  1113                              <2> %assign i +1
  1114 00000978 [5403]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1115                              <2> 
  1116                              <2> %assign i +1
  1117 00000980 [5403]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1118                              <2> 
  1119                              <2> %assign i +1
  1120 00000988 [5403]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1121                              <2> 
  1122                              <2> %assign i +1
  1123 00000990 [5403]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1124                              <2> 
  1125                              <2> %assign i +1
  1126 00000998 [5403]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1127                              <2> 
  1128                              <2> %assign i +1
  1129 000009A0 [5403]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1130                              <2> 
  1131                              <2> %assign i +1
  1132 000009A8 [5403]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1133                              <2> 
  1134                              <2> %assign i +1
  1135 000009B0 [5403]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1136                              <2> 
  1137                              <2> %assign i +1
  1138 000009B8 [5403]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1139                              <2> 
  1140                              <2> %assign i +1
  1141 000009C0 [5403]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1142                              <2> 
  1143                              <2> %assign i +1
  1144 000009C8 [5403]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1145                              <2> 
  1146                              <2> %assign i +1
  1147 000009D0 [5403]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1148                              <2> 
  1149                              <2> %assign i +1
  1150 000009D8 [5403]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1151                              <2> 
  1152                              <2> %assign i +1
  1153 000009E0 [5403]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1154                              <2> 
  1155                              <2> %assign i +1
  1156 000009E8 [5403]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1157                              <2> 
  1158                              <2> %assign i +1
  1159 000009F0 [5403]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1160                              <2> 
  1161                              <2> %assign i +1
  1162 000009F8 [5403]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1163                              <2> 
  1164                              <2> %assign i +1
  1165 00000A00 [5403]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1166                              <2> 
  1167                              <2> %assign i +1
  1168 00000A08 [5403]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1169                              <2> 
  1170                              <2> %assign i +1
  1171 00000A10 [5403]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1172                              <2> 
  1173                              <2> %assign i +1
  1174 00000A18 [5403]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1175                              <2> 
  1176                              <2> %assign i +1
  1177 00000A20 [5403]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1178                              <2> 
  1179                              <2> %assign i +1
  1180 00000A28 [5403]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1181                              <2> 
  1182                              <2> %assign i +1
  1183 00000A30 [5403]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1184                              <2> 
  1185                              <2> %assign i +1
  1186 00000A38 [5403]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1187                              <2> 
  1188                              <2> %assign i +1
  1189 00000A40 [5403]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1190                              <2> 
  1191                              <2> %assign i +1
  1192 00000A48 [5403]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1193                              <2> 
  1194                              <2> %assign i +1
  1195 00000A50 [5403]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1196                              <2> 
  1197                              <2> %assign i +1
  1198 00000A58 [5403]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1199                              <2> 
  1200                              <2> %assign i +1
  1201 00000A60 [5403]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1202                              <2> 
  1203                              <2> %assign i +1
  1204 00000A68 [5403]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1205                              <2> 
  1206                              <2> %assign i +1
  1207 00000A70 [5403]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1208                              <2> 
  1209                              <2> %assign i +1
  1210 00000A78 [5403]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1211                              <2> 
  1212                              <2> %assign i +1
  1213 00000A80 [5403]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1214                              <2> 
  1215                              <2> %assign i +1
  1216 00000A88 [5403]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1217                              <2> 
  1218                              <2> %assign i +1
  1219 00000A90 [5403]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1220                              <2> 
  1221                              <2> %assign i +1
  1222 00000A98 [5403]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1223                              <2> 
  1224                              <2> %assign i +1
  1225 00000AA0 [5403]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1226                              <2> 
  1227                              <2> %assign i +1
  1228 00000AA8 [5403]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1229                              <2> 
  1230                              <2> %assign i +1
  1231 00000AB0 [5403]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1232                              <2> 
  1233                              <2> %assign i +1
  1234 00000AB8 [5403]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1235                              <2> 
  1236                              <2> %assign i +1
  1237 00000AC0 [5403]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1238                              <2> 
  1239                              <2> %assign i +1
  1240 00000AC8 [5403]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1241                              <2> 
  1242                              <2> %assign i +1
  1243 00000AD0 [5403]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1244                              <2> 
  1245                              <2> %assign i +1
  1246 00000AD8 [5403]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1247                              <2> 
  1248                              <2> %assign i +1
  1249 00000AE0 [5403]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1250                              <2> 
  1251                              <2> %assign i +1
  1252 00000AE8 [5403]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1253                              <2> 
  1254                              <2> %assign i +1
  1255 00000AF0 [5403]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1256                              <2> 
  1257                              <2> %assign i +1
  1258 00000AF8 [5403]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1259                              <2> 
  1260                              <2> %assign i +1
  1261 00000B00 [5403]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1262                              <2> 
  1263                              <2> %assign i +1
  1264 00000B08 [5403]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1265                              <2> 
  1266                              <2> %assign i +1
  1267 00000B10 [5403]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1268                              <2> 
  1269                              <2> %assign i +1
  1270 00000B18 [5403]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1271                              <2> 
  1272                              <2> %assign i +1
  1273 00000B20 [5403]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1274                              <2> 
  1275                              <2> %assign i +1
  1276 00000B28 [5403]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1277                              <2> 
  1278                              <2> %assign i +1
  1279 00000B30 [5403]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1280                              <2> 
  1281                              <2> %assign i +1
  1282 00000B38 [5403]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1283                              <2> 
  1284                              <2> %assign i +1
  1285 00000B40 [5403]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1286                              <2> 
  1287                              <2> %assign i +1
  1288 00000B48 [5403]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1289                              <2> 
  1290                              <2> %assign i +1
  1291 00000B50 [5403]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1292                              <2> 
  1293                              <2> %assign i +1
  1294 00000B58 [5403]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1295                              <2> 
  1296                              <2> %assign i +1
  1297 00000B60 [5403]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1298                              <2> 
  1299                              <2> %assign i +1
  1300 00000B68 [5403]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1301                              <2> 
  1302                              <2> %assign i +1
  1303 00000B70 [5403]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1304                              <2> 
  1305                              <2> %assign i +1
  1306 00000B78 [5403]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1307                              <2> 
  1308                              <2> %assign i +1
  1309 00000B80 [5403]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1310                              <2> 
  1311                              <2> %assign i +1
  1312 00000B88 [5403]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1313                              <2> 
  1314                              <2> %assign i +1
  1315 00000B90 [5403]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1316                              <2> 
  1317                              <2> %assign i +1
  1318 00000B98 [5403]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1319                              <2> 
  1320                              <2> %assign i +1
  1321 00000BA0 [5403]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1322                              <2> 
  1323                              <2> %assign i +1
  1324 00000BA8 [5403]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1325                              <2> 
  1326                              <2> %assign i +1
  1327 00000BB0 [5403]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1328                              <2> 
  1329                              <2> %assign i +1
  1330 00000BB8 [5403]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1331                              <2> 
  1332                              <2> %assign i +1
  1333 00000BC0 [5403]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1334                              <2> 
  1335                              <2> %assign i +1
  1336                              <1> idt_end:
  1337                              <1> [BITS 32]
  1338                                  	%include "source/realmode.asm"
  1339                              <1> realmode:	;make sure the real mode program's address is in realmodeptr 
  1340                              <1> 			;and the return address is in realmodereturn
  1341 00000BC8 FA                  <1> 	cli
  1342 00000BC9 A3[DB0C0000]        <1> 	mov [realmodeeax], eax
  1343 00000BCE 891D[D70C0000]      <1> 	mov [realmodeebx], ebx
  1344 00000BD4 8925[C90C0000]      <1> 	mov [pmodeesp], esp
  1345                              <1> 
  1346 00000BDA BB[D30C0000]        <1> 	mov ebx, cr0old
  1347                              <1> rmcopytofirstmbyte:
  1348 00000BDF 8B03                <1> 	mov eax, [ebx]
  1349 00000BE1 658903              <1> 	mov [gs:ebx], eax
  1350 00000BE4 81C304000000        <1> 	add ebx, 4
  1351 00000BEA 81FB[E30C0000]      <1> 	cmp ebx, realmodeptr
  1352 00000BF0 76ED                <1> 	jbe rmcopytofirstmbyte
  1353                              <1> 
  1354 00000BF2 EA[F90B0000]3800    <1> 	jmp V8086_CODE_SEL:protected16bit
  1355                              <1> 
  1356                              <1> [BITS 16]
  1357                              <1> protected16bit:
  1358 00000BF9 B84000              <1> 	mov ax, V8086_DATA_SEL
  1359 00000BFC 8ED8                <1> 	mov ds, ax
  1360 00000BFE 8EC0                <1> 	mov es, ax
  1361 00000C00 8EE0                <1> 	mov fs, ax
  1362 00000C02 8EE8                <1> 	mov gs, ax
  1363 00000C04 8ED0                <1> 	mov ss, ax
  1364 00000C06 66BC[7C9A0300]      <1> 	mov esp, stackend
  1365 00000C0C 0F20C0              <1> 	mov eax, cr0
  1366 00000C0F 66A3[D30C]          <1> 	mov [cr0old], eax
  1367 00000C13 6625FEFFFF7F        <1> 	and eax, 0x7FFFFFFE
  1368 00000C19 0F22C0              <1> 	mov cr0, eax	;now in real mode
  1369 00000C1C EA[210C]0010        <1> 	jmp 0x1000:inrealmode
  1370                              <1> 
  1371                              <1> inrealmode:
  1372 00000C21 8CC8                <1> 	mov ax, cs
  1373 00000C23 8ED8                <1> 	mov ds, ax
  1374 00000C25 8EC0                <1> 	mov es, ax
  1375 00000C27 8EE0                <1> 	mov fs, ax
  1376 00000C29 8EE8                <1> 	mov gs, ax
  1377 00000C2B 8ED0                <1> 	mov ss, ax
  1378 00000C2D BC[7C9A]            <1> 	mov sp, stackend ;because this is at 0x1000: and not 0x10000: it works
  1379                              <1> 	
  1380 00000C30 B011                <1> 	mov al, 0x11
  1381 00000C32 E620                <1> 	out 0x20, al
  1382 00000C34 E6A0                <1> 	out 0xA0, al
  1383 00000C36 B008                <1> 	mov al, 0x8		;interrupt for master
  1384 00000C38 E621                <1> 	out 0x21, al
  1385 00000C3A B070                <1> 	mov al, 0x70	;interrupt for slave
  1386 00000C3C E6A1                <1> 	out 0xA1, al
  1387 00000C3E B004                <1> 	mov al, 4
  1388 00000C40 E621                <1> 	out 0x21, al
  1389 00000C42 B002                <1> 	mov al, 2
  1390 00000C44 E6A1                <1> 	out 0xA1, al
  1391 00000C46 B001                <1> 	mov al, 0x1
  1392 00000C48 E621                <1> 	out 0x21, al
  1393 00000C4A B001                <1> 	mov al, 0x1
  1394 00000C4C E6A1                <1> 	out 0xA1, al
  1395                              <1> 	
  1396 00000C4E 0F011E[CD0C]        <1> 	lidt [idt_real]
  1397 00000C53 FB                  <1> 	sti
  1398                              <1> 
  1399 00000C54 66A1[DB0C]          <1> 	mov eax, [realmodeeax]
  1400 00000C58 668B1E[D70C]        <1> 	mov ebx, [realmodeebx]
  1401                              <1> 
  1402 00000C5D FF16[E30C]          <1> 	call word [realmodeptr] ;call the real mode program here
  1403                              <1> 
  1404 00000C61 66A3[DB0C]          <1> 	mov [realmodeeax], eax
  1405 00000C65 66891E[D70C]        <1> 	mov [realmodeebx], ebx
  1406                              <1> 
  1407 00000C6A FA                  <1> 	cli
  1408 00000C6B 0F0116[6403]        <1> 	lgdt [gdtr]
  1409 00000C70 0F011E[6A03]        <1> 	lidt [idtr]
  1410 00000C75 0F20C0              <1> 	mov eax, cr0
  1411 00000C78 0C01                <1> 	or al, 1
  1412 00000C7A 0F22C0              <1> 	mov cr0,eax
  1413 00000C7D EA[820C]2800        <1> 	jmp NEW_CODE_SEL:returntopmode
  1414                              <1> 
  1415                              <1> [BITS 32]
  1416                              <1> returntopmode:
  1417 00000C82 66B83000            <1> 	mov ax, NEW_DATA_SEL
  1418 00000C86 8ED8                <1> 	mov ds, ax
  1419 00000C88 8EC0                <1> 	mov es, ax
  1420 00000C8A 8EE0                <1> 	mov fs, ax
  1421 00000C8C 8ED0                <1> 	mov ss, ax
  1422 00000C8E 8B25[C90C0000]      <1> 	mov esp, [pmodeesp]
  1423 00000C94 66B82000            <1> 	mov ax, SYS_DATA_SEL
  1424 00000C98 8EE8                <1> 	mov gs, ax
  1425                              <1> 
  1426 00000C9A BB[D30C0000]        <1> 	mov ebx, cr0old
  1427                              <1> rmcopyfromfirstmbyte:
  1428 00000C9F 658B03              <1> 	mov eax, [gs:ebx]
  1429 00000CA2 8903                <1> 	mov [ebx], eax
  1430 00000CA4 81C304000000        <1> 	add ebx, 4
  1431 00000CAA 81FB[E30C0000]      <1> 	cmp ebx, realmodeptr
  1432 00000CB0 76ED                <1> 	jbe rmcopyfromfirstmbyte
  1433                              <1> 
  1434 00000CB2 E84E570000          <1> 	call initialize.pic ;reset irq's and masks
  1435 00000CB7 FB                  <1> 	sti
  1436 00000CB8 A1[DB0C0000]        <1> 	mov eax, [realmodeeax]
  1437 00000CBD 8B1D[D70C0000]      <1> 	mov ebx, [realmodeebx]
  1438 00000CC3 FF25[DF0C0000]      <1> 	jmp dword [realmodereturn]
  1439                              <1> 	
  1440 00000CC9 00000000            <1> pmodeesp dd 0
  1441                              <1> idt_real:
  1442 00000CCD FF03                <1> 	dw 0x3FF
  1443 00000CCF 00000000            <1> 	dd 0
  1444 00000CD3 00000000            <1> cr0old dd 0
  1445 00000CD7 00000000            <1> realmodeebx dd 0
  1446 00000CDB 00000000            <1> realmodeeax dd 0
  1447 00000CDF 00000000            <1> realmodereturn dd 0
  1448 00000CE3 0000                <1> realmodeptr dw 0
  1449 00000CE5 00000000            <1> dd 0 ;make sure the copy thing doesnt overflow
  1450                                  [BITS 32]
  1451                                      %include "source/exception.asm"
  1452                              <1> %ifdef exceptions.included
  1453                              <1> unhand:	
  1454                              <1> 	%assign i 0
  1455                              <1> 	%rep 32
  1456                              <1> 	mov byte [intprob], i
  1457                              <1> 	jmp unhand2
  1458                              <1> 	%assign i i+1
  1459                              <1> 	%endrep
  1460 00000CE9 C605[A4110000]00    <2>  mov byte [intprob], i
  1461 00000CF0 E974010000          <2>  jmp unhand2
  1462                              <2>  %assign i i+1
  1463 00000CF5 C605[A4110000]01    <2>  mov byte [intprob], i
  1464 00000CFC E968010000          <2>  jmp unhand2
  1465                              <2>  %assign i i+1
  1466 00000D01 C605[A4110000]02    <2>  mov byte [intprob], i
  1467 00000D08 E95C010000          <2>  jmp unhand2
  1468                              <2>  %assign i i+1
  1469 00000D0D C605[A4110000]03    <2>  mov byte [intprob], i
  1470 00000D14 E950010000          <2>  jmp unhand2
  1471                              <2>  %assign i i+1
  1472 00000D19 C605[A4110000]04    <2>  mov byte [intprob], i
  1473 00000D20 E944010000          <2>  jmp unhand2
  1474                              <2>  %assign i i+1
  1475 00000D25 C605[A4110000]05    <2>  mov byte [intprob], i
  1476 00000D2C E938010000          <2>  jmp unhand2
  1477                              <2>  %assign i i+1
  1478 00000D31 C605[A4110000]06    <2>  mov byte [intprob], i
  1479 00000D38 E92C010000          <2>  jmp unhand2
  1480                              <2>  %assign i i+1
  1481 00000D3D C605[A4110000]07    <2>  mov byte [intprob], i
  1482 00000D44 E920010000          <2>  jmp unhand2
  1483                              <2>  %assign i i+1
  1484 00000D49 C605[A4110000]08    <2>  mov byte [intprob], i
  1485 00000D50 E914010000          <2>  jmp unhand2
  1486                              <2>  %assign i i+1
  1487 00000D55 C605[A4110000]09    <2>  mov byte [intprob], i
  1488 00000D5C E908010000          <2>  jmp unhand2
  1489                              <2>  %assign i i+1
  1490 00000D61 C605[A4110000]0A    <2>  mov byte [intprob], i
  1491 00000D68 E9FC000000          <2>  jmp unhand2
  1492                              <2>  %assign i i+1
  1493 00000D6D C605[A4110000]0B    <2>  mov byte [intprob], i
  1494 00000D74 E9F0000000          <2>  jmp unhand2
  1495                              <2>  %assign i i+1
  1496 00000D79 C605[A4110000]0C    <2>  mov byte [intprob], i
  1497 00000D80 E9E4000000          <2>  jmp unhand2
  1498                              <2>  %assign i i+1
  1499 00000D85 C605[A4110000]0D    <2>  mov byte [intprob], i
  1500 00000D8C E9D8000000          <2>  jmp unhand2
  1501                              <2>  %assign i i+1
  1502 00000D91 C605[A4110000]0E    <2>  mov byte [intprob], i
  1503 00000D98 E9CC000000          <2>  jmp unhand2
  1504                              <2>  %assign i i+1
  1505 00000D9D C605[A4110000]0F    <2>  mov byte [intprob], i
  1506 00000DA4 E9C0000000          <2>  jmp unhand2
  1507                              <2>  %assign i i+1
  1508 00000DA9 C605[A4110000]10    <2>  mov byte [intprob], i
  1509 00000DB0 E9B4000000          <2>  jmp unhand2
  1510                              <2>  %assign i i+1
  1511 00000DB5 C605[A4110000]11    <2>  mov byte [intprob], i
  1512 00000DBC E9A8000000          <2>  jmp unhand2
  1513                              <2>  %assign i i+1
  1514 00000DC1 C605[A4110000]12    <2>  mov byte [intprob], i
  1515 00000DC8 E99C000000          <2>  jmp unhand2
  1516                              <2>  %assign i i+1
  1517 00000DCD C605[A4110000]13    <2>  mov byte [intprob], i
  1518 00000DD4 E990000000          <2>  jmp unhand2
  1519                              <2>  %assign i i+1
  1520 00000DD9 C605[A4110000]14    <2>  mov byte [intprob], i
  1521 00000DE0 E984000000          <2>  jmp unhand2
  1522                              <2>  %assign i i+1
  1523 00000DE5 C605[A4110000]15    <2>  mov byte [intprob], i
  1524 00000DEC E978000000          <2>  jmp unhand2
  1525                              <2>  %assign i i+1
  1526 00000DF1 C605[A4110000]16    <2>  mov byte [intprob], i
  1527 00000DF8 E96C000000          <2>  jmp unhand2
  1528                              <2>  %assign i i+1
  1529 00000DFD C605[A4110000]17    <2>  mov byte [intprob], i
  1530 00000E04 E960000000          <2>  jmp unhand2
  1531                              <2>  %assign i i+1
  1532 00000E09 C605[A4110000]18    <2>  mov byte [intprob], i
  1533 00000E10 E954000000          <2>  jmp unhand2
  1534                              <2>  %assign i i+1
  1535 00000E15 C605[A4110000]19    <2>  mov byte [intprob], i
  1536 00000E1C E948000000          <2>  jmp unhand2
  1537                              <2>  %assign i i+1
  1538 00000E21 C605[A4110000]1A    <2>  mov byte [intprob], i
  1539 00000E28 E93C000000          <2>  jmp unhand2
  1540                              <2>  %assign i i+1
  1541 00000E2D C605[A4110000]1B    <2>  mov byte [intprob], i
  1542 00000E34 E930000000          <2>  jmp unhand2
  1543                              <2>  %assign i i+1
  1544 00000E39 C605[A4110000]1C    <2>  mov byte [intprob], i
  1545 00000E40 E924000000          <2>  jmp unhand2
  1546                              <2>  %assign i i+1
  1547 00000E45 C605[A4110000]1D    <2>  mov byte [intprob], i
  1548 00000E4C E918000000          <2>  jmp unhand2
  1549                              <2>  %assign i i+1
  1550 00000E51 C605[A4110000]1E    <2>  mov byte [intprob], i
  1551 00000E58 E90C000000          <2>  jmp unhand2
  1552                              <2>  %assign i i+1
  1553 00000E5D C605[A4110000]1F    <2>  mov byte [intprob], i
  1554 00000E64 E900000000          <2>  jmp unhand2
  1555                              <2>  %assign i i+1
  1556                              <1> unhand2:
  1557 00000E69 FA                  <1> 	cli
  1558 00000E6A 1E                  <1> 	push ds
  1559 00000E6B 06                  <1> 	push es
  1560 00000E6C 0FA0                <1> 	push fs
  1561 00000E6E 0FA8                <1> 	push gs
  1562 00000E70 16                  <1> 	push ss
  1563 00000E71 60                  <1> 	pushad
  1564                              <1> %ifdef gui.included
  1565 00000E72 803D[CE870000]00    <1> 	cmp byte [guion], 0
  1566 00000E79 0F8432000000        <1> 	je near noguiunhandstuff
  1567 00000E7F 66C705[9E110000]08- <1> 	mov word [locunhandy], 8
  1568 00000E87 00                  <1>
  1569 00000E88 66C705[A0110000]08- <1> 	mov word [locunhandx], 8
  1570 00000E90 00                  <1>
  1571 00000E91 668B1D[C7700000]    <1> 	mov bx, [background]
  1572 00000E98 66891D[A2110000]    <1> 	mov [backgroundcache], bx
  1573 00000E9F C605[49580000]01    <1> 	mov byte [mousedisabled],1
  1574 00000EA6 66BB00F8            <1> 	mov bx, 1111100000000000b
  1575 00000EAA 66891D[C7700000]    <1> 	mov [background], bx
  1576                              <1> noguiunhandstuff:
  1577                              <1> %endif
  1578 00000EB1 89E6                <1> 	mov esi, esp
  1579 00000EB3 8935[92110000]      <1> 	mov [espfirst], esi
  1580 00000EB9 81C6BC000000        <1> 	add esi, ((unhndrgend - unhndrg)/15)*4
  1581 00000EBF 8935[8E110000]      <1> 	mov [esploc], esi
  1582 00000EC5 BE[B3110000]        <1> 	mov esi, unhandmsg
  1583 00000ECA 8935[96110000]      <1> 	mov [esiloc], esi
  1584 00000ED0 31C9                <1> 	xor ecx, ecx
  1585 00000ED2 8A0D[A4110000]      <1> 	mov cl, [intprob]
  1586 00000ED8 BB[82150000]        <1> 	mov ebx, errortypes
  1587 00000EDD C1E102              <1> 	shl ecx, 2
  1588 00000EE0 01CB                <1> 	add ebx, ecx
  1589 00000EE2 81FB[C2150000]      <1> 	cmp ebx, errortypesend
  1590 00000EE8 7205                <1> 	jb gooderrortype
  1591 00000EEA BB[C2150000]        <1> 	mov ebx, errortypesend
  1592                              <1> gooderrortype:
  1593 00000EEF 8B33                <1> 	mov esi, [ebx]
  1594                              <1> %ifdef gui.included
  1595 00000EF1 803D[CE870000]00    <1> 	cmp byte [guion], 0
  1596 00000EF8 0F842D000000        <1> 	je near errortext
  1597 00000EFE 668B0D[9E110000]    <1> 	mov cx, [locunhandy]
  1598 00000F05 668B15[A0110000]    <1> 	mov dx, [locunhandx]
  1599 00000F0C 66B80100            <1> 	mov ax, 1
  1600 00000F10 6631DB              <1> 	xor bx, bx
  1601 00000F13 E816680000          <1> 	call showstring2
  1602 00000F18 66890D[9E110000]    <1> 	mov [locunhandy], cx
  1603 00000F1F 668915[A0110000]    <1> 	mov [locunhandx], dx
  1604 00000F26 E905000000          <1> 	jmp errortextdone
  1605                              <1> %endif
  1606                              <1> errortext:
  1607 00000F2B E8100E0000          <1> 	call print		;;get the error message and print it
  1608                              <1> errortextdone:
  1609 00000F30 31C9                <1> 	xor ecx, ecx
  1610 00000F32 8A0D[A4110000]      <1> 	mov cl, [intprob]
  1611 00000F38 E8EA010000          <1> 	call expdump
  1612                              <1> dumpstack:
  1613 00000F3D 8B35[8E110000]      <1> 	mov esi, [esploc]
  1614 00000F43 39E6                <1> 	cmp esi, esp
  1615 00000F45 7219                <1> 	jb donedump
  1616 00000F47 368B0E              <1> 	mov ecx, [ss:esi]
  1617 00000F4A 81EE04000000        <1> 	sub esi, 4
  1618 00000F50 8935[8E110000]      <1> 	mov [esploc], esi
  1619 00000F56 E8CC010000          <1> 	call expdump
  1620 00000F5B E9DDFFFFFF          <1> 	jmp dumpstack
  1621                              <1> donedump:
  1622 00000F60 0F20C1              <1> 	mov ecx, cr0
  1623 00000F63 E8BF010000          <1> 	call expdump
  1624 00000F68 0F20D1              <1> 	mov ecx, cr2
  1625 00000F6B E8B7010000          <1> 	call expdump
  1626 00000F70 0F20D9              <1> 	mov ecx, cr3
  1627 00000F73 E8AF010000          <1> 	call expdump
  1628 00000F78 0F20E1              <1> 	mov ecx, cr4
  1629 00000F7B E8A7010000          <1> 	call expdump
  1630 00000F80 0F00C9              <1> 	str ecx
  1631 00000F83 E89F010000          <1> 	call expdump
  1632 00000F88 0F010D[AD110000]    <1> 	sidt [igdtcache]
  1633 00000F8F 8B0D[AF110000]      <1> 	mov ecx, [igdtcache + 2]
  1634 00000F95 E88D010000          <1> 	call expdump
  1635 00000F9A 0F0105[AD110000]    <1> 	sgdt [igdtcache]
  1636 00000FA1 8B0D[AF110000]      <1> 	mov ecx, [igdtcache + 2]
  1637 00000FA7 E87B010000          <1> 	call expdump
  1638 00000FAC 0F00C1              <1> 	sldt ecx
  1639 00000FAF E873010000          <1> 	call expdump
  1640 00000FB4 8B35[8E110000]      <1> 	mov esi, [esploc]
  1641 00000FBA 368B7C2434          <1> 	mov edi, [ss:esp + 52]
  1642 00000FBF 81C710000000        <1> 	add edi, 16
  1643 00000FC5 893D[A9110000]      <1> 	mov [codelocend], edi
  1644 00000FCB 81EF20000000        <1> 	sub edi, 32
  1645                              <1> dumpcodeloop:
  1646 00000FD1 893D[A5110000]      <1> 	mov [codeloc], edi
  1647 00000FD7 8B0F                <1> 	mov ecx, [edi]
  1648 00000FD9 E849010000          <1> 	call expdump
  1649 00000FDE 8B3D[A5110000]      <1> 	mov edi, [codeloc]
  1650 00000FE4 81C704000000        <1> 	add edi, 4
  1651 00000FEA 3B3D[A9110000]      <1> 	cmp edi, [codelocend]
  1652 00000FF0 72DF                <1> 	jb dumpcodeloop
  1653 00000FF2 BE[B8100000]        <1> 	mov esi, backtoosmsg
  1654                              <1> %ifdef gui.included
  1655 00000FF7 803D[CE870000]00    <1> 	cmp byte [guion], 0
  1656 00000FFE 741F                <1> 	je backtomsg
  1657                              <1> guibacktomsg:
  1658 00001000 668B15[A0110000]    <1> 	mov dx, [locunhandx]
  1659 00001007 668B0D[9E110000]    <1> 	mov cx, [locunhandy]
  1660 0000100E 66B80100            <1> 	mov ax, 1
  1661 00001012 6631DB              <1> 	xor bx, bx
  1662 00001015 E814670000          <1> 	call showstring2
  1663 0000101A E905000000          <1> 	jmp backtomsgdone
  1664                              <1> backtomsg:
  1665                              <1> %endif
  1666 0000101F E81C0D0000          <1> 	call print
  1667                              <1> backtomsgdone:
  1668 00001024 30C0                <1> 	xor al, al
  1669 00001026 E830130000          <1> 	call rdcharint
  1670 0000102B 803D[A4110000]03    <1> 	cmp byte [intprob], 3
  1671 00001032 7541                <1> 	jne nodebugint
  1672                              <1> %ifdef gui.included
  1673 00001034 803D[CE870000]00    <1> 	cmp byte [guion], 0
  1674 0000103B 7427                <1> 	je nodebuggui
  1675 0000103D 668B1D[A2110000]    <1> 	mov bx, [backgroundcache]
  1676 00001044 66891D[C7700000]    <1> 	mov [background], bx
  1677 0000104B 6631DB              <1> 	xor bx, bx
  1678 0000104E C605[49580000]00    <1> 	mov byte [mousedisabled], 0
  1679 00001055 E821600000          <1> 	call guiclear
  1680 0000105A E86C600000          <1> 	call reloadallgraphics
  1681 0000105F E85D180000          <1> 	call termcopy
  1682                              <1> nodebuggui:
  1683                              <1> %endif
  1684 00001064 8B35[92110000]      <1> 	mov esi, [espfirst]
  1685 0000106A 89F4                <1> 	mov esp, esi
  1686 0000106C 61                  <1> 	popad
  1687 0000106D 17                  <1> 	pop ss
  1688 0000106E 0FA9                <1> 	pop gs
  1689 00001070 0FA1                <1> 	pop fs
  1690 00001072 07                  <1> 	pop es
  1691 00001073 1F                  <1> 	pop ds
  1692 00001074 CF                  <1> 	iret
  1693                              <1> nodebugint:
  1694 00001075 61                  <1> 	popad
  1695 00001076 17                  <1> 	pop ss
  1696 00001077 0FA9                <1> 	pop gs
  1697 00001079 0FA1                <1> 	pop fs
  1698 0000107B 07                  <1> 	pop es
  1699 0000107C 1F                  <1> 	pop ds
  1700 0000107D 81C408000000        <1> 	add esp, 8
  1701                              <1> ;	popf ;pop the cs segment selector into eflags
  1702                              <1> ;	popf ;then pop the flags
  1703                              <1> %ifdef gui.included
  1704 00001083 803D[CE870000]00    <1> 	cmp byte [guion], 0
  1705 0000108A 7427                <1> 	je returnunhandgui
  1706 0000108C 668B1D[A2110000]    <1> 	mov bx, [backgroundcache]
  1707 00001093 66891D[C7700000]    <1> 	mov [background], bx
  1708 0000109A 6631DB              <1> 	xor bx, bx
  1709 0000109D C605[49580000]00    <1> 	mov byte [mousedisabled], 0
  1710 000010A4 E8D25F0000          <1> 	call guiclear
  1711 000010A9 E81D600000          <1> 	call reloadallgraphics
  1712 000010AE E80E180000          <1> 	call termcopy
  1713                              <1> %endif
  1714                              <1> returnunhandgui:
  1715 000010B3 E96F1C0000          <1> 	jmp nwcmd
  1716 000010B8 506C6561736520706F- <1> backtoosmsg db "Please post any problems in the Issues section at solleros.googlecode.com",10
  1717 000010C1 737420616E79207072- <1>
  1718 000010CA 6F626C656D7320696E- <1>
  1719 000010D3 207468652049737375- <1>
  1720 000010DC 65732073656374696F- <1>
  1721 000010E5 6E20617420736F6C6C- <1>
  1722 000010EE 65726F732E676F6F67- <1>
  1723 000010F7 6C65636F64652E636F- <1>
  1724 00001100 6D0A                <1>
  1725 00001102 507265737320616E79- <1> 			db "Press any key to return to SollerOS",10,0
  1726 0000110B 206B657920746F2072- <1>
  1727 00001114 657475726E20746F20- <1>
  1728 0000111D 536F6C6C65724F530A- <1>
  1729 00001126 00                  <1>
  1730                              <1> expdump:
  1731 00001127 8B35[96110000]      <1> 	mov esi, [esiloc]
  1732 0000112D 89F7                <1> 	mov edi, esi
  1733 0000112F 81C70F000000        <1> 	add edi, 15
  1734 00001135 81C604000000        <1> 	add esi, 4
  1735 0000113B 893D[96110000]      <1> 	mov [esiloc], edi
  1736 00001141 81EF03000000        <1> 	sub edi, 3
  1737 00001147 E878200000          <1> 	call converthex
  1738 0000114C 81EE04000000        <1> 	sub esi, 4
  1739                              <1> %ifdef gui.included
  1740 00001152 803D[CE870000]00    <1> 	cmp byte [guion], 0
  1741 00001159 0F8429000000        <1> 	je near expdumptext
  1742 0000115F 668B0D[9E110000]    <1> 	mov cx, [locunhandy]
  1743 00001166 668B15[A0110000]    <1> 	mov dx, [locunhandx]
  1744 0000116D 66B80100            <1> 	mov ax, 1
  1745 00001171 6631DB              <1> 	xor bx, bx
  1746 00001174 E8B5650000          <1> 	call showstring2
  1747 00001179 66890D[9E110000]    <1> 	mov [locunhandy], cx
  1748 00001180 668915[A0110000]    <1> 	mov [locunhandx], dx
  1749 00001187 C3                  <1> 	ret
  1750                              <1> %endif
  1751                              <1> expdumptext:
  1752 00001188 E8B30B0000          <1> 	call print
  1753 0000118D C3                  <1> 	ret
  1754 0000118E 00000000            <1> esploc dd 0
  1755 00001192 00000000            <1> espfirst dd 0
  1756 00001196 00000000            <1> esiloc dd 0
  1757 0000119A 00000000            <1> esiregbuf dd 0
  1758 0000119E 0100                <1> locunhandy dw 1
  1759 000011A0 0100                <1> locunhandx dw 1
  1760 000011A2 0000                <1> backgroundcache dw 0
  1761 000011A4 00                  <1> intprob db 0
  1762 000011A5 00000000            <1> codeloc dd 0
  1763 000011A9 00000000            <1> codelocend dd 0
  1764 000011AD 000000000000        <1> igdtcache dw 0,0,0
  1765                              <1> 	unhandmsg:	
  1766 000011B3 494E543D3030303030- <1> 			db "INT=00000000",255,10,0
  1767 000011BC 303030FF0A00        <1>
  1768                              <1> unhndrg:
  1769 000011C2 FFFFFFFF3030303030- <1> 	times 7 db 255,255,255,255,"00000000  ",0	;;this dumps the stack before the stack frame in question
  1770 000011CB 303030202000<rept>  <1>
  1771 0000122B FFFFFFFF3030303030- <1> 			db 255,255,255,255,"00000000",255,10,0
  1772 00001234 303030FF0A00        <1>
  1773 0000123A FFFFFFFF3030303030- <1> 	times 7 db 255,255,255,255,"00000000  ",0	;;this dumps the stack before the stack frame in question
  1774 00001243 303030202000<rept>  <1>
  1775 000012A3 FFFFFFFF3030303030- <1> 			db 255,255,255,255,"00000000",255,10,0
  1776 000012AC 303030FF0A00        <1>
  1777 000012B2 FFFFFFFF3030303030- <1> 	times 7 db 255,255,255,255,"00000000  ",0	;;this dumps the stack before the stack frame in question
  1778 000012BB 303030202000<rept>  <1>
  1779 0000131B FFFFFFFF3030303030- <1> 			db 255,255,255,255,"00000000",255,10,0
  1780 00001324 303030FF0A00        <1>
  1781 0000132A FFFFFFFF3030303030- <1> 	times 7 db 255,255,255,255,"00000000  ",0	;;this dumps the stack before the stack frame in question
  1782 00001333 303030202000<rept>  <1>
  1783 00001393 FFFFFFFF3030303030- <1> 			db 255,255,255,255,"00000000",255,10,0
  1784 0000139C 303030FF0A00        <1>
  1785                              <1> unhandregs:
  1786 000013A2 45464C3D3030303030- <1> 			db "EFL=00000000  ",0
  1787 000013AB 303030202000        <1>
  1788 000013B1 43533A3D3030303030- <1> 			db "CS:=00000000  ",0
  1789 000013BA 303030202000        <1>
  1790 000013C0 4549503D3030303030- <1> 			db "EIP=00000000",255,10,0
  1791 000013C9 303030FF0A00        <1>
  1792 000013CF 44533A3D3030303030- <1> 			db "DS:=00000000  ",0
  1793 000013D8 303030202000        <1>
  1794 000013DE 45533A3D3030303030- <1> 			db "ES:=00000000  ",0
  1795 000013E7 303030202000        <1>
  1796 000013ED 46533A3D3030303030- <1> 			db "FS:=00000000  ",0
  1797 000013F6 303030202000        <1>
  1798 000013FC 47533A3D3030303030- <1> 			db "GS:=00000000  ",0
  1799 00001405 303030202000        <1>
  1800 0000140B 53533A3D3030303030- <1> 			db "SS:=00000000",255,10,0
  1801 00001414 303030FF0A00        <1>
  1802 0000141A 4541583D3030303030- <1> 			db "EAX=00000000  ",0
  1803 00001423 303030202000        <1>
  1804 00001429 4543583D3030303030- <1> 			db "ECX=00000000  ",0
  1805 00001432 303030202000        <1>
  1806 00001438 4544583D3030303030- <1> 			db "EDX=00000000  ",0
  1807 00001441 303030202000        <1>
  1808 00001447 4542583D3030303030- <1> 			db "EBX=00000000",255,10,0
  1809 00001450 303030FF0A00        <1>
  1810 00001456 4553503D3030303030- <1> 			db "ESP=00000000  ",0
  1811 0000145F 303030202000        <1>
  1812 00001465 4542503D3030303030- <1> 			db "EBP=00000000  ",0
  1813 0000146E 303030202000        <1>
  1814 00001474 4553493D3030303030- <1> 			db "ESI=00000000  ",0
  1815 0000147D 303030202000        <1>
  1816 00001483 4544493D3030303030- <1> unhndrgend:	db "EDI=00000000",255,10,0
  1817 0000148C 303030FF0A00        <1>
  1818 00001492 4352303D3030303030- <1> 			db "CR0=00000000  ",0
  1819 0000149B 303030202000        <1>
  1820 000014A1 4352323D3030303030- <1> 			db "CR2=00000000  ",0
  1821 000014AA 303030202000        <1>
  1822 000014B0 4352333D3030303030- <1> 			db "CR3=00000000  ",0
  1823 000014B9 303030202000        <1>
  1824 000014BF 4352343D3030303030- <1> 			db "CR4=00000000",255,10,0
  1825 000014C8 303030FF0A00        <1>
  1826 000014CE 54523A3D3030303030- <1> 			db "TR:=00000000  ",0
  1827 000014D7 303030202000        <1>
  1828 000014DD 4944543D3030303030- <1> 			db "IDT=00000000  ",0
  1829 000014E6 303030202000        <1>
  1830 000014EC 4744543D3030303030- <1> 			db "GDT=00000000  ",0
  1831 000014F5 303030202000        <1>
  1832 000014FB 4C44543D3030303030- <1> 			db "LDT=00000000",255,10,0
  1833 00001504 303030FF0A00        <1>
  1834 0000150A FFFFFFFF3030303030- <1> unhandcode: times 2 db 255,255,255,255,"00000000  ",0	;;this dumps the code before and after the interrupt in question
  1835 00001513 303030202000<rept>  <1>
  1836 00001528 FFFFFFFF3030303030- <1> 			db 255,255,255,255,"00000000 ",255,0
  1837 00001531 30303020FF00        <1>
  1838 00001537 FFFFFF5B3030303030- <1> 			db 255,255,255,"[00000000] ",0
  1839 00001540 3030305D2000        <1>
  1840 00001546 FFFFFFFF3030303030- <1> 			times 3 db 255,255,255,255,"00000000  ",0
  1841 0000154F 303030202000<rept>  <1>
  1842 00001573 FFFFFFFF3030303030- <1> 			db 255,255,255,255,"00000000",255,10,0
  1843 0000157C 303030FF0A00        <1>
  1844                              <1> unhandmsgend:
  1845                              <1> 
  1846                              <1> errortypes:
  1847 00001582 [C6150000]          <1> 			dd err0
  1848 00001586 [2F160000]          <1> 			dd err1
  1849 0000158A [90160000]          <1> 			dd err2
  1850 0000158E [E5160000]          <1> 			dd err3
  1851 00001592 [49170000]          <1> 			dd err4
  1852 00001596 [9B170000]          <1> 			dd err5
  1853 0000159A [05180000]          <1> 			dd err6
  1854 0000159E [6D180000]          <1> 			dd err7
  1855 000015A2 [B7180000]          <1> 			dd err8
  1856 000015A6 [14190000]          <1> 			dd err9
  1857 000015AA [6D190000]          <1> 			dd err10
  1858 000015AE [B8190000]          <1> 			dd err11
  1859 000015B2 [081A0000]          <1> 			dd err12
  1860 000015B6 [611A0000]          <1> 			dd err13
  1861 000015BA [C41A0000]          <1> 			dd err14
  1862 000015BE [001B0000]          <1> 			dd err15
  1863                              <1> errortypesend:
  1864 000015C2 [8B1B0000]          <1> 			dd unknownerror
  1865                              <1> 			
  1866 000015C6 4469766973696F6E20- <1> err0	db "Division by zero:",10
  1867 000015CF 6279207A65726F3A0A  <1>
  1868 000015D8 546563686E6963616C- <1> 		db "Technically lim a÷x = ∞ when a is any real number. Happy Easter!",10
  1869 000015E1 6C79206C696D2061C3- <1>
  1870 000015EA B778203D20E2889E20- <1>
  1871 000015F3 7768656E2061206973- <1>
  1872 000015FC 20616E79207265616C- <1>
  1873 00001605 206E756D6265722E20- <1>
  1874 0000160E 486170707920456173- <1>
  1875 00001617 746572210A          <1>
  1876 0000161C 202020202020202020- <1> 		db "            x→0",10,0
  1877 00001625 20202078E28692300A- <1>
  1878 0000162E 00                  <1>
  1879                              <1> 		
  1880 0000162F 53696E676C652D7374- <1> err1	db "Single-step/Breakpoint:",10
  1881 00001638 65702F427265616B70- <1>
  1882 00001641 6F696E743A0A        <1>
  1883 00001647 4120627265616B706F- <1> 		db "A breakpoint fault, breakpoint trap, or single-step trap was triggered.",10,0
  1884 00001650 696E74206661756C74- <1>
  1885 00001659 2C20627265616B706F- <1>
  1886 00001662 696E7420747261702C- <1>
  1887 0000166B 206F722073696E676C- <1>
  1888 00001674 652D73746570207472- <1>
  1889 0000167D 617020776173207472- <1>
  1890 00001686 696767657265642E0A- <1>
  1891 0000168F 00                  <1>
  1892                              <1> 		
  1893 00001690 4E6F6E6D61736B6162- <1> err2	db "Nonmaskable interrupt:",10
  1894 00001699 6C6520696E74657272- <1>
  1895 000016A2 7570743A0A          <1>
  1896 000016A7 412068617264776172- <1> 		db "A hardware interrupt was triggered that could not be masked.",10,0
  1897 000016B0 6520696E7465727275- <1>
  1898 000016B9 707420776173207472- <1>
  1899 000016C2 696767657265642074- <1>
  1900 000016CB 68617420636F756C64- <1>
  1901 000016D4 206E6F74206265206D- <1>
  1902 000016DD 61736B65642E0A00    <1>
  1903                              <1> 		
  1904 000016E5 427265616B706F696E- <1> err3	db "Breakpoint:",10
  1905 000016EE 743A0A              <1>
  1906 000016F1 5468697320696E7465- <1> 		db "This interrupt is used in programs to show the stack and registers and can be",10
  1907 000016FA 727275707420697320- <1>
  1908 00001703 7573656420696E2070- <1>
  1909 0000170C 726F6772616D732074- <1>
  1910 00001715 6F2073686F77207468- <1>
  1911 0000171E 6520737461636B2061- <1>
  1912 00001727 6E6420726567697374- <1>
  1913 00001730 65727320616E642063- <1>
  1914 00001739 616E2062650A        <1>
  1915 0000173F 69676E6F7265642E0A- <1> 		db "ignored.",10,0
  1916 00001748 00                  <1>
  1917                              <1> 		
  1918 00001749 4F766572666C6F773A- <1> err4	db "Overflow:",10
  1919 00001752 0A                  <1>
  1920 00001753 5468652070726F6365- <1> 		db "The processor ran into an INTO instruction with the overflow flag set.",10,0
  1921 0000175C 73736F722072616E20- <1>
  1922 00001765 696E746F20616E2049- <1>
  1923 0000176E 4E544F20696E737472- <1>
  1924 00001777 756374696F6E207769- <1>
  1925 00001780 746820746865206F76- <1>
  1926 00001789 6572666C6F7720666C- <1>
  1927 00001792 6167207365742E0A00  <1>
  1928                              <1> 		
  1929 0000179B 426F756E6473206368- <1> err5	db "Bounds check:",10
  1930 000017A4 65636B3A0A          <1>
  1931 000017A9 5468652070726F6365- <1> 		db "The processor rebounded from a BOUND instruction run on an operand that was out",10
  1932 000017B2 73736F72207265626F- <1>
  1933 000017BB 756E6465642066726F- <1>
  1934 000017C4 6D206120424F554E44- <1>
  1935 000017CD 20696E737472756374- <1>
  1936 000017D6 696F6E2072756E206F- <1>
  1937 000017DF 6E20616E206F706572- <1>
  1938 000017E8 616E64207468617420- <1>
  1939 000017F1 776173206F75740A    <1>
  1940 000017F9 6F6620626F756E6473- <1> 		db "of bounds.",10,0
  1941 00001802 2E0A00              <1>
  1942                              <1> 		
  1943 00001805 496E76616C6964206F- <1> err6	db "Invalid opcode:",10
  1944 0000180E 70636F64653A0A      <1>
  1945 00001815 5468652070726F6365- <1> 		db "The processor has no idea what it was trying to execute. Don't run SSE4 code",10
  1946 0000181E 73736F722068617320- <1>
  1947 00001827 6E6F20696465612077- <1>
  1948 00001830 686174206974207761- <1>
  1949 00001839 7320747279696E6720- <1>
  1950 00001842 746F20657865637574- <1>
  1951 0000184B 652E20446F6E277420- <1>
  1952 00001854 72756E205353453420- <1>
  1953 0000185D 636F64650A          <1>
  1954 00001862 6F6E20343836277321- <1> 		db "on 486's!",10,0
  1955 0000186B 0A00                <1>
  1956                              <1> 		
  1957 0000186D 436F70726F63657373- <1> err7	db "Coprocessor not available:",10
  1958 00001876 6F72206E6F74206176- <1>
  1959 0000187F 61696C61626C653A0A  <1>
  1960 00001888 446F6E277420796F75- <1> 		db "Don't you know they don't make those anymore!",10,0
  1961 00001891 206B6E6F7720746865- <1>
  1962 0000189A 7920646F6E2774206D- <1>
  1963 000018A3 616B652074686F7365- <1>
  1964 000018AC 20616E796D6F726521- <1>
  1965 000018B5 0A00                <1>
  1966                              <1> 		
  1967 000018B7 446F75626C65206661- <1> err8	db "Double fault:",10
  1968 000018C0 756C743A0A          <1>
  1969 000018C5 546865206578636570- <1> 		db "The exception handler could not handle that it could not handle an exception.",10,0
  1970 000018CE 74696F6E2068616E64- <1>
  1971 000018D7 6C657220636F756C64- <1>
  1972 000018E0 206E6F742068616E64- <1>
  1973 000018E9 6C6520746861742069- <1>
  1974 000018F2 7420636F756C64206E- <1>
  1975 000018FB 6F742068616E646C65- <1>
  1976 00001904 20616E206578636570- <1>
  1977 0000190D 74696F6E2E0A00      <1>
  1978                              <1> 		
  1979 00001914 436F70726F63657373- <1> err9	db "Coprocessor segment overrun:",10,0
  1980 0000191D 6F72207365676D656E- <1>
  1981 00001926 74206F76657272756E- <1>
  1982 0000192F 3A0A00              <1>
  1983 00001932 54686973206E657665- <1> 		db "This never happens in modern computers, and never should.",10,0
  1984 0000193B 722068617070656E73- <1>
  1985 00001944 20696E206D6F646572- <1>
  1986 0000194D 6E20636F6D70757465- <1>
  1987 00001956 72732C20616E64206E- <1>
  1988 0000195F 657665722073686F75- <1>
  1989 00001968 6C642E0A00          <1>
  1990                              <1> 
  1991 0000196D 496E76616C69642054- <1> err10	db "Invalid TSS:",10
  1992 00001976 53533A0A            <1>
  1993 0000197A 546865205453532074- <1> 		db "The TSS that was switched to is invalid. Nothing funny here.",10,0
  1994 00001983 686174207761732073- <1>
  1995 0000198C 776974636865642074- <1>
  1996 00001995 6F20697320696E7661- <1>
  1997 0000199E 6C69642E204E6F7468- <1>
  1998 000019A7 696E672066756E6E79- <1>
  1999 000019B0 20686572652E0A00    <1>
  2000                              <1> 		
  2001 000019B8 5365676D656E74206E- <1> err11	db "Segment not present:",10
  2002 000019C1 6F742070726573656E- <1>
  2003 000019CA 743A0A              <1>
  2004 000019CD 546865207072657365- <1> 		db "The present bit of the segment descriptor is set to zero.",10,0
  2005 000019D6 6E7420626974206F66- <1>
  2006 000019DF 20746865207365676D- <1>
  2007 000019E8 656E74206465736372- <1>
  2008 000019F1 6970746F7220697320- <1>
  2009 000019FA 73657420746F207A65- <1>
  2010 00001A03 726F2E0A00          <1>
  2011                              <1> 		
  2012 00001A08 537461636B20657863- <1> err12	db "Stack exception:",10
  2013 00001A11 657074696F6E3A0A    <1>
  2014 00001A19 546865205353206465- <1> 		db "The SS descriptor is invalid or not present or its limit is too small.",10,0
  2015 00001A22 7363726970746F7220- <1>
  2016 00001A2B 697320696E76616C69- <1>
  2017 00001A34 64206F72206E6F7420- <1>
  2018 00001A3D 70726573656E74206F- <1>
  2019 00001A46 7220697473206C696D- <1>
  2020 00001A4F 697420697320746F6F- <1>
  2021 00001A58 20736D616C6C2E0A00  <1>
  2022                              <1> 		
  2023 00001A61 47656E6572616C2070- <1> err13	db "General protection violation:",10
  2024 00001A6A 726F74656374696F6E- <1>
  2025 00001A73 2076696F6C6174696F- <1>
  2026 00001A7C 6E3A0A              <1>
  2027 00001A7F 596F752076696F6C61- <1> 		db "You violated the computer. Step away slowly. The FBI is on its way.",10,0
  2028 00001A88 746564207468652063- <1>
  2029 00001A91 6F6D70757465722E20- <1>
  2030 00001A9A 537465702061776179- <1>
  2031 00001AA3 20736C6F776C792E20- <1>
  2032 00001AAC 546865204642492069- <1>
  2033 00001AB5 73206F6E2069747320- <1>
  2034 00001ABE 7761792E0A00        <1>
  2035                              <1> 		
  2036 00001AC4 50616765206661756C- <1> err14	db "Page fault:",10
  2037 00001ACD 743A0A              <1>
  2038 00001AD0 546865207061676520- <1> 		db "The page that was requested was not available.",10,0
  2039 00001AD9 746861742077617320- <1>
  2040 00001AE2 726571756573746564- <1>
  2041 00001AEB 20776173206E6F7420- <1>
  2042 00001AF4 617661696C61626C65- <1>
  2043 00001AFD 2E0A00              <1>
  2044                              <1> 		
  2045 00001B00 526573657276656420- <1> err15	db "Reserved for Plan R:",10
  2046 00001B09 666F7220506C616E20- <1>
  2047 00001B12 523A0A              <1>
  2048 00001B15 5468697320696E7465- <1> 		db "This interrupt is reserved for usage only by the military when it is necessary",10
  2049 00001B1E 727275707420697320- <1>
  2050 00001B27 726573657276656420- <1>
  2051 00001B30 666F72207573616765- <1>
  2052 00001B39 206F6E6C7920627920- <1>
  2053 00001B42 746865206D696C6974- <1>
  2054 00001B4B 617279207768656E20- <1>
  2055 00001B54 6974206973206E6563- <1>
  2056 00001B5D 6573736172790A      <1>
  2057 00001B64 746F20696E69746961- <1> 		db "to initiate a full-scale coup d'",130,"tat.",10,0
  2058 00001B6D 746520612066756C6C- <1>
  2059 00001B76 2D7363616C6520636F- <1>
  2060 00001B7F 757020642782746174- <1>
  2061 00001B88 2E0A00              <1>
  2062                              <1> 		
  2063 00001B8B 576861742074686520- <1> unknownerror db "What the hell just happened? Is everyone okay? Hard drive? Video card?",10
  2064 00001B94 68656C6C206A757374- <1>
  2065 00001B9D 2068617070656E6564- <1>
  2066 00001BA6 3F2049732065766572- <1>
  2067 00001BAF 796F6E65206F6B6179- <1>
  2068 00001BB8 3F2048617264206472- <1>
  2069 00001BC1 6976653F2056696465- <1>
  2070 00001BCA 6F20636172643F0A    <1>
  2071 00001BD2 4D656D6F72793F2041- <1> 			db	"Memory? Are you there?",10,0
  2072 00001BDB 726520796F75207468- <1>
  2073 00001BE4 6572653F0A00        <1>
  2074                              <1> %else
  2075                              <1> unhand:	
  2076                              <1> 	%assign i 0
  2077                              <1> 	%rep 32
  2078                              <1> 	mov byte [intprob], i
  2079                              <1> 	jmp unhand2
  2080                              <1> 	%assign i i+1
  2081                              <1> 	%endrep
  2082                              <1> unhand2:
  2083                              <1> 	cmp byte [intprob], 3
  2084                              <1> 	je handled	;if it is a debug interrupt, it is auto handled
  2085                              <1> 	mov ebx, 0xDEADCD00 ;this shows that an exception occured even though more detailed info cannot be shown
  2086                              <1> 						;CD stands for the interrupt code, DEAD shows that the program died because of the int
  2087                              <1> 	mov bl, [intprob]
  2088                              <1> 	jmp exitprog
  2089                              <1> intprob db 0
  2090                              <1> %endif
  2091                                      %include "source/ints.asm"
  2092                              <1> newints:	;for great justice
  2093 00001BEA 80FC00              <1> 	cmp ah, 0
  2094 00001BED 0F849A000000        <1> 	je near exitprog   ;kills app
  2095 00001BF3 80FC01              <1> 	cmp ah, 1
  2096 00001BF6 0F8419010000        <1> 	je near prntstr  ;print string
  2097 00001BFC 80FC02              <1> 	cmp ah, 2
  2098 00001BFF 0F84BA010000        <1> 	je near readstr	;read string
  2099 00001C05 80FC03              <1> 	cmp ah, 3
  2100 00001C08 0F84DA010000        <1> 	je near clearscrn	;clear screen
  2101 00001C0E 80FC04              <1> 	cmp ah, 4
  2102 00001C11 0F844F020000        <1> 	je near prntreadstr	;read and print string
  2103 00001C17 80FC05              <1> 	cmp ah, 5
  2104 00001C1A 0F842F070000        <1> 	je near readchar	;get char
  2105 00001C20 80FC06              <1> 	cmp ah, 6
  2106 00001C23 0F8496070000        <1> 	je near prntchar	;print char
  2107 00001C29 80FC07              <1> 	cmp ah, 7
  2108 00001C2C 0F84BF090000        <1> 	je near openfile	;read file
  2109                              <1> ;	cmp ah, 8
  2110                              <1> ;	je near closefile	;close file
  2111 00001C32 80FC09              <1> 	cmp ah, 9
  2112 00001C35 0F84C0090000        <1> 	je near num2str	;convert number to string
  2113 00001C3B 80FC0A              <1> 	cmp ah, 10
  2114 00001C3E 0F84CF090000        <1> 	je near str2num	;convert string to number
  2115                              <1> %ifdef threads.included
  2116 00001C44 80FC0B              <1> 	cmp ah, 11
  2117 00001C47 0F84D2090000        <1> 	je near forkthread	;create thread
  2118                              <1> %endif
  2119 00001C4D 80FC0C              <1> 	cmp ah, 12
  2120 00001C50 0F84A00A0000        <1> 	je near gettime	;get time
  2121 00001C56 80FC0D              <1> 	cmp ah, 13
  2122 00001C59 0F84AC0A0000        <1> 	je near settime	;set time
  2123 00001C5F 80FC0E              <1> 	cmp ah, 14
  2124 00001C62 0F84B30A0000        <1> 	je near runcmd	;run program
  2125 00001C68 80FC0F              <1> 	cmp ah, 15
  2126 00001C6B 0F84BF0A0000        <1> 	je near proginfo ;get program info-location of name/options/number of options/environmental vars
  2127 00001C71 80FC10              <1> 	cmp ah, 16
  2128 00001C74 0F84E40A0000        <1> 	je near hooksig	;hook code to a signal
  2129                              <1> %ifdef gui.included
  2130 00001C7A 80FC11              <1> 	cmp ah, 17
  2131 00001C7D 0F84EB0A0000        <1> 	je near guiint	;GUI operations
  2132                              <1> %endif
  2133                              <1> %ifdef sound.included
  2134 00001C83 80FC12              <1> 	cmp ah, 18
  2135 00001C86 0F84300C0000        <1> 	je near soundint	;sound operations
  2136                              <1> %endif
  2137                              <1> %ifdef network.included
  2138                              <1> 	cmp ah, 19
  2139                              <1> 	je near netint	;networking operations
  2140                              <1> %endif
  2141 00001C8C CF                  <1> 	iret
  2142                              <1> 	%include 'source/interrupts/0_exitprog.asm'
  2143                              <2> exitprog:
  2144 00001C8D 66B83000            <2> 	mov ax, NEW_DATA_SEL
  2145 00001C91 8ED8                <2> 	mov ds, ax
  2146 00001C93 8EC0                <2> 	mov es, ax
  2147 00001C95 8EE0                <2> 	mov fs, ax
  2148 00001C97 66B82000            <2> 	mov ax, SYS_DATA_SEL
  2149 00001C9B 8EE8                <2> 	mov gs, ax
  2150 00001C9D C705[DF690000]0000- <2> 	mov dword [currentthread], 0
  2151 00001CA5 0000                <2>
  2152 00001CA7 C705[DA690000]0400- <2> 	mov dword [lastthread], 4
  2153 00001CAF 0000                <2>
  2154 00001CB1 C605[DE690000]00    <2> 	mov byte [threadson], 0 ;for now i need to use this
  2155 00001CB8 8B25[E09E0300]      <2> 	mov esp, [previousstack] ;and this
  2156 00001CBE 81FB00000000        <2> 	cmp ebx, 0
  2157 00001CC4 0F8501000000        <2> 	jne near .error
  2158 00001CCA C3                  <2> 	ret
  2159                              <2> .error:
  2160 00001CCB 89D9                <2> 	mov ecx, ebx
  2161 00001CCD B006                <2> 	mov al, 6
  2162 00001CCF A2[25320000]        <2> 	mov [firsthexshown], al
  2163 00001CD4 51                  <2> 	push ecx
  2164 00001CD5 BE[F01C0000]        <2> 	mov esi, .msg1
  2165 00001CDA E855000000          <2> 	call printhighlight
  2166 00001CDF 59                  <2> 	pop ecx
  2167 00001CE0 E855150000          <2> 	call showhex
  2168 00001CE5 BE[051D0000]        <2> 	mov esi, .msg2
  2169 00001CEA E845000000          <2> 	call printhighlight
  2170 00001CEF C3                  <2> 	ret
  2171                              <2> 	
  2172 00001CF0 416E20657869742073- <2> .msg1 db "An exit status of 0x",0
  2173 00001CF9 7461747573206F6620- <2>
  2174 00001D02 307800              <2>
  2175 00001D05 087761732072657475- <2> .msg2 db 8,"was returned.",10,0
  2176 00001D0E 726E65642E0A00      <2>
  2177                              <1> 	%include 'source/interrupts/1_prntstr.asm'
  2178                              <2> prntstr:
  2179 00001D15 30E4                <2> xor ah, ah
  2180 00001D17 E82B000000          <2> call printint
  2181 00001D1C E97FE5FFFF          <2> jmp timerinterrupt
  2182                              <2> 
  2183                              <2> 	printquiet:
  2184 00001D21 6631C0              <2> 		xor ax, ax
  2185 00001D24 66A3[BD1D0000]      <2> 		mov [endkeyprint], ax
  2186 00001D2A 66BB0700            <2> 		mov bx, 7
  2187 00001D2E E82D000000          <2> 		call printint.b
  2188 00001D33 C3                  <2> 		ret
  2189                              <2> 
  2190                              <2> 	printhighlight:
  2191 00001D34 6631C0              <2> 		xor ax, ax
  2192 00001D37 66BBF000            <2> 		mov bx, 0xF0
  2193 00001D3B E907000000          <2> 		jmp printint
  2194                              <2> 
  2195                              <2>     print:
  2196 00001D40 6631C0              <2> 		xor ax, ax
  2197 00001D43 66BB0700            <2> 		mov bx, 7
  2198                              <2> 	printint:	;print line, ax=last key,bx=modifier, esi=buffer
  2199 00001D47 56                  <2> 		push esi
  2200 00001D48 66A3[BD1D0000]      <2> 		mov [endkeyprint], ax
  2201 00001D4E E80D000000          <2> 		call .b
  2202 00001D53 89F1                <2> 		mov ecx, esi
  2203 00001D55 5F                  <2> 		pop edi
  2204 00001D56 29F9                <2> 		sub ecx, edi
  2205 00001D58 51                  <2> 		push ecx
  2206 00001D59 E8630B0000          <2> 		call termcopy
  2207 00001D5E 59                  <2> 		pop ecx
  2208 00001D5F C3                  <2> 		ret
  2209                              <2> 	.b:	
  2210 00001D60 53                  <2> 		push ebx
  2211 00001D61 31C0                <2> 		xor eax, eax
  2212 00001D63 8A06                <2> 		mov al, [esi]
  2213 00001D65 3CFF                <2> 		cmp al, 0xFF
  2214 00001D67 7438                <2> 		je .doneutf
  2215 00001D69 3CC0                <2> 		cmp al, 0xC0
  2216 00001D6B 7234                <2> 		jb .doneutf
  2217 00001D6D 3CE0                <2> 		cmp al, 0xE0
  2218 00001D6F 721D                <2> 		jb .two
  2219 00001D71 46                  <2> 		inc esi
  2220 00001D72 668B0E              <2> 		mov cx, [esi]
  2221 00001D75 46                  <2> 		inc esi
  2222 00001D76 C0E004              <2> 		shl al, 4
  2223 00001D79 66C1E102            <2> 		shl cx, 2
  2224 00001D7D C0ED02              <2> 		shr ch, 2
  2225 00001D80 66C1E902            <2> 		shr cx, 2
  2226 00001D84 08C5                <2> 		or ch, al
  2227 00001D86 6689C8              <2> 		mov ax, cx
  2228 00001D89 E913000000          <2> 		jmp .doneutf
  2229                              <2> 	.two:
  2230 00001D8E 8A2E                <2> 		mov ch, [esi]
  2231 00001D90 46                  <2> 		inc esi
  2232 00001D91 8A0E                <2> 		mov cl, [esi]
  2233 00001D93 66C1E102            <2> 		shl cx, 2
  2234 00001D97 C0ED02              <2> 		shr ch, 2
  2235 00001D9A 66C1E902            <2> 		shr cx, 2
  2236 00001D9E 6689C8              <2> 		mov ax, cx
  2237                              <2> 	.doneutf:
  2238 00001DA1 5B                  <2> 		pop ebx
  2239 00001DA2 663B05[BD1D0000]    <2> 		cmp ax, [endkeyprint]
  2240 00001DA9 7411                <2> 		je .done
  2241 00001DAB 663DFFFE            <2> 		cmp ax, 0xFEFF
  2242 00001DAF 7405                <2> 		je .noprint
  2243 00001DB1 E836060000          <2> 		call prcharq
  2244                              <2> 	.noprint:
  2245 00001DB6 46                  <2> 		inc esi
  2246 00001DB7 E9A4FFFFFF          <2> 		jmp .b
  2247                              <2> 	.done:
  2248 00001DBC C3                  <2> 		ret
  2249                              <2> 
  2250 00001DBD 0000                <2> endkeyprint dw 0
  2251                              <1> 	%include 'source/interrupts/2_readstr.asm'
  2252                              <2> readstr:
  2253 00001DBF E805000000          <2> call readint
  2254 00001DC4 E9D7E4FFFF          <2> jmp timerinterrupt
  2255                              <2> 
  2256                              <2> 	readint:	;;get line, al=last key, esi = buffer, edi = endbuffer	
  2257 00001DC9 89C3                <2> 		mov ebx, eax
  2258                              <2> 	.b:
  2259 00001DCB 53                  <2> 		push ebx
  2260 00001DCC 57                  <2> 		push edi
  2261 00001DCD 56                  <2> 		push esi
  2262 00001DCE 30C0                <2> 		xor al, al
  2263 00001DD0 E886050000          <2> 		call rdcharint
  2264 00001DD5 5E                  <2> 		pop esi
  2265 00001DD6 8806                <2> 		mov [esi], al
  2266 00001DD8 46                  <2> 		inc esi
  2267 00001DD9 5F                  <2> 		pop edi
  2268 00001DDA 5B                  <2> 		pop ebx
  2269 00001DDB 39FE                <2> 		cmp esi, edi
  2270 00001DDD 7304                <2> 		jae .done
  2271 00001DDF 38D8                <2> 		cmp al, bl
  2272 00001DE1 75E8                <2> 		jne .b
  2273                              <2> 	.done:
  2274 00001DE3 4E                  <2> 		dec esi
  2275 00001DE4 C60600              <2> 		mov byte [esi], 0
  2276 00001DE7 C3                  <2> 		ret
  2277                              <1> 	%include 'source/interrupts/3_clearscrn.asm'
  2278                              <2> clearscrn:
  2279 00001DE8 E805000000          <2> call clear
  2280 00001DED E9AEE4FFFF          <2> jmp timerinterrupt
  2281                              <2> %ifdef io.serial
  2282                              <2> clear:
  2283                              <2> 	ret
  2284                              <2> %else
  2285                              <2> clear:
  2286 00001DF2 668B0D[EB250000]    <2> 		mov cx, [charxy]
  2287 00001DF9 BF[76BC0300]        <2> 		mov edi, videobuf
  2288 00001DFE 31C0                <2> 		xor eax, eax
  2289 00001E00 A3[E1250000]        <2> 		mov [linebeginpos], eax
  2290 00001E05 A3[E5250000]        <2> 		mov [videobufpos], eax
  2291 00001E0A 6631D2              <2> 		xor dx, dx
  2292 00001E0D 66A3[E9250000]      <2> 		mov [charpos], ax
  2293 00001E13 66B80700            <2> 		mov ax, 7
  2294 00001E17 C1E010              <2> 		shl eax, 16
  2295                              <2> 	clearb:
  2296 00001E1A 8907                <2> 		mov [edi], eax
  2297 00001E1C 81C704000000        <2> 		add edi, 4
  2298 00001E22 FEC9                <2> 		dec cl
  2299 00001E24 80F900              <2> 		cmp cl, 0
  2300 00001E27 75F1                <2> 		jne clearb
  2301 00001E29 8A0D[EB250000]      <2> 		mov cl, [charxy]
  2302 00001E2F FECD                <2> 		dec ch
  2303 00001E31 80FD00              <2> 		cmp ch, 0
  2304 00001E34 75E4                <2> 		jne clearb
  2305                              <2> 	cleardouble:
  2306 00001E36 BF[BE910400]        <2> 		mov edi, videobuf2
  2307 00001E3B 668B0D[EB250000]    <2> 		mov cx, [charxy]
  2308 00001E42 31C0                <2> 		xor eax, eax
  2309                              <2> 	clearc:
  2310 00001E44 8907                <2> 		mov [edi], eax
  2311 00001E46 81C704000000        <2> 		add edi, 4
  2312 00001E4C FEC9                <2> 		dec cl
  2313 00001E4E 80F900              <2> 		cmp cl, 0
  2314 00001E51 75F1                <2> 		jne clearc
  2315 00001E53 8A0D[EB250000]      <2> 		mov cl, [charxy]
  2316 00001E59 FECD                <2> 		dec ch
  2317 00001E5B 80FD00              <2> 		cmp ch, 0
  2318 00001E5E 75E4                <2> 		jne clearc
  2319 00001E60 E85C0A0000          <2> 		call termcopy
  2320 00001E65 C3                  <2> 		ret
  2321                              <2> %endif
  2322                              <2> 		
  2323                              <1> 	%include 'source/interrupts/4_prntreadstr.asm'
  2324                              <2> prntreadstr:
  2325 00001E66 E80B000000          <2> call rdprint
  2326 00001E6B E930E4FFFF          <2> jmp timerinterrupt
  2327                              <2> 
  2328                              <2> readline:
  2329 00001E70 B00A                <2>   mov al, 10
  2330 00001E72 66BB0700            <2>   mov bx, 7
  2331                              <2> rdprint:	;print and get line, al=last key, bx=modifier, esi=buffer, edi=bufferend
  2332 00001E76 E80F000000          <2> 	call rdprintdos
  2333 00001E7B 50                  <2> 	push eax
  2334 00001E7C A0[3A230000]        <2> 	mov al, [endkeyrdpr]
  2335 00001E81 30E4                <2> 	xor ah, ah
  2336 00001E83 E84D050000          <2> 	call prcharint
  2337 00001E88 58                  <2> 	pop eax
  2338 00001E89 C3                  <2> 	ret
  2339                              <2> 
  2340                              <2> 	rdprintdos: ;allows dos compatibility with read function
  2341 00001E8A 8935[44230000]      <2> 		mov [buftxtloc], esi
  2342 00001E90 A2[3A230000]        <2> 		mov [endkeyrdpr], al
  2343 00001E95 66891D[3C230000]    <2> 		mov [modkeyrdpr], bx
  2344 00001E9C 8935[3E230000]      <2> 		mov [firstesirdpr], esi
  2345 00001EA2 893D[48230000]      <2> 		mov [endbufferrdpr], edi
  2346 00001EA8 8B3D[12670500]      <2> 		mov edi, [commandsentered]
  2347 00001EAE 893D[0E670500]      <2> 		mov [commandlistentries], edi
  2348                              <2> 	rdprintb:
  2349 00001EB4 56                  <2> 		push esi
  2350 00001EB5 B001                <2> 		mov al, 1
  2351 00001EB7 E89F040000          <2> 		call rdcharint
  2352 00001EBC 8A25[BB230000]      <2> 		mov ah, [lastkey + 2]
  2353 00001EC2 88E1                <2> 		mov cl, ah
  2354 00001EC4 5E                  <2> 		pop esi
  2355                              <2> %ifdef io.serial
  2356                              <2> 		cmp ah, 0x41
  2357                              <2> 		je near rdprup
  2358                              <2> 		cmp ah, 0x42
  2359                              <2> 		je near rdprdown
  2360                              <2> 		cmp ah, 0x43
  2361                              <2> 		je near rdprright
  2362                              <2> 		cmp ah, 0x44
  2363                              <2> 		je near rdprleft
  2364                              <2> 		cmp ah, 0x31
  2365                              <2> 		je near rdprhome
  2366                              <2> 		cmp ah, 0x48
  2367                              <2> 		je near rdprhome
  2368                              <2> 		cmp ah, 0x46
  2369                              <2> 		je near rdprend
  2370                              <2> 		cmp ah, 0x33
  2371                              <2> 		je near rdprdel
  2372                              <2> 		cmp ah, 0x34
  2373                              <2> 		je near rdprend
  2374                              <2> %else
  2375 00001EC5 803D[495E0000]E0    <2> 		cmp byte [specialkey], 0xE0
  2376 00001ECC 753F                <2> 		jne notspecialrdprnt
  2377 00001ECE 80FC53              <2> 		cmp ah, 0x53
  2378 00001ED1 0F84C9030000        <2> 		je near rdprdel
  2379 00001ED7 80FC47              <2> 		cmp ah, 0x47
  2380 00001EDA 0F8481010000        <2> 		je near rdprhome
  2381 00001EE0 80FC4F              <2> 		cmp ah, 0x4F
  2382 00001EE3 0F849A010000        <2> 		je near rdprend
  2383 00001EE9 80FC50              <2> 		cmp ah, 0x50
  2384 00001EEC 0F8430020000        <2> 		je near rdprdown
  2385 00001EF2 80FC4D              <2> 		cmp ah, 0x4D
  2386 00001EF5 0F84CA010000        <2> 		je near rdprright
  2387 00001EFB 80FC4B              <2> 		cmp ah, 0x4B
  2388 00001EFE 0F849F010000        <2> 		je near rdprleft
  2389 00001F04 80FC48              <2> 		cmp ah, 0x48
  2390 00001F07 0F8458020000        <2> 		je near rdprup
  2391                              <2> 	notspecialrdprnt:
  2392                              <2> %endif
  2393 00001F0D 66A1[B9230000]      <2> 		mov ax, [lastkey]
  2394 00001F13 663D0800            <2> 		cmp ax, 8
  2395 00001F17 0F84B8030000        <2> 		je near rdprbscheck
  2396 00001F1D 663D0000            <2> 		cmp ax, 0
  2397 00001F21 7491                <2> 		je rdprintb
  2398 00001F23 80F900              <2> 		cmp cl, 0
  2399 00001F26 748C                <2> 		je rdprintb
  2400 00001F28 663D8000            <2> 		cmp ax, 0x80
  2401 00001F2C 7257                <2> 		jb .normal
  2402 00001F2E 663D0008            <2> 		cmp ax, 0x800
  2403 00001F32 7321                <2> 		jae .three
  2404 00001F34 46                  <2> 		inc esi
  2405 00001F35 3B35[48230000]      <2> 		cmp esi, [endbufferrdpr]
  2406 00001F3B 0F83DA000000        <2> 		jae near donerdprinc
  2407 00001F41 66C1E002            <2> 		shl ax, 2
  2408 00001F45 C0E802              <2> 		shr al, 2
  2409 00001F48 0C80                <2> 		or al, 10000000b
  2410 00001F4A 80CCC0              <2> 		or ah, 11000000b
  2411 00001F4D 8866FF              <2> 		mov [esi - 1], ah
  2412 00001F50 E930000000          <2> 		jmp .normal
  2413                              <2> .three:	
  2414 00001F55 81C602000000        <2> 		add esi, 2
  2415 00001F5B 3B35[48230000]      <2> 		cmp esi, [endbufferrdpr]
  2416 00001F61 0F83B4000000        <2> 		jae near donerdprinc
  2417 00001F67 88E1                <2> 		mov cl, ah
  2418 00001F69 C0E904              <2> 		shr cl, 4
  2419 00001F6C 80C9E0              <2> 		or cl, 11100000b
  2420 00001F6F 884EFE              <2> 		mov [esi - 2], cl
  2421 00001F72 66C1E004            <2> 		shl ax, 4
  2422 00001F76 66C1E802            <2> 		shr ax, 2
  2423 00001F7A 80CC80              <2> 		or ah, 10000000b
  2424 00001F7D C0E802              <2> 		shr al, 2
  2425 00001F80 0C80                <2> 		or al, 10000000b
  2426 00001F82 8866FF              <2> 		mov [esi - 1], ah
  2427                              <2> .normal:
  2428 00001F85 8806                <2> 		mov [esi], al
  2429 00001F87 46                  <2> 		inc esi
  2430 00001F88 66A1[B9230000]      <2> 		mov ax, [lastkey]
  2431                              <2> 	bscheckequal:
  2432 00001F8E 668B1D[3C230000]    <2> 		mov bx, [modkeyrdpr]
  2433 00001F95 803D[43230000]00    <2> 		cmp byte [txtmask], 0
  2434 00001F9C 7407                <2> 		je nomasktxt
  2435 00001F9E 30E4                <2> 		xor ah, ah
  2436 00001FA0 A0[43230000]        <2> 		mov al, [txtmask]
  2437                              <2> 	nomasktxt:
  2438 00001FA5 56                  <2> 		push esi
  2439 00001FA6 66A3[38230000]      <2> 		mov [axcache], ax
  2440 00001FAC 668B1D[3A230000]    <2> 		mov bx, [endkeyrdpr]
  2441 00001FB3 6639D8              <2> 		cmp ax, bx
  2442 00001FB6 7432                <2> 		je nobackprintbuftxt2
  2443 00001FB8 E818040000          <2> 		call prcharint
  2444 00001FBD BE[60B10300]        <2> 		mov esi, buftxt2
  2445 00001FC2 E85AFDFFFF          <2> 		call printquiet
  2446 00001FC7 66B82000            <2> 		mov ax, " "
  2447 00001FCB E81C040000          <2> 		call prcharq
  2448 00001FD0 66B80800            <2> 		mov ax, 8
  2449 00001FD4 81FE[60B10300]      <2> 		cmp esi, buftxt2
  2450 00001FDA 740E                <2> 		je nobackprintbuftxt2
  2451                              <2> 	backprintbuftxt2:
  2452 00001FDC E80B040000          <2> 		call prcharq
  2453 00001FE1 4E                  <2> 		dec esi
  2454 00001FE2 81FE[60B10300]      <2> 		cmp esi, buftxt2
  2455 00001FE8 77F2                <2> 		ja backprintbuftxt2
  2456                              <2> 	nobackprintbuftxt2:
  2457 00001FEA 663D0A00            <2> 		cmp ax, 10
  2458 00001FEE 7405                <2> 		je nonobackprint
  2459 00001FF0 E8E0030000          <2> 		call prcharint
  2460                              <2> 	nonobackprint:
  2461 00001FF5 5E                  <2> 		pop esi
  2462 00001FF6 3B35[48230000]      <2> 		cmp esi, [endbufferrdpr]
  2463 00001FFC 0F8319000000        <2> 		jae near donerdprinc
  2464 00002002 66A1[38230000]      <2> 		mov ax, [axcache]
  2465 00002008 8A25[3A230000]      <2> 		mov ah, [endkeyrdpr]
  2466 0000200E 38E0                <2> 		cmp al, ah
  2467 00002010 0F859EFEFFFF        <2> 		jne rdprintb
  2468 00002016 E901000000          <2> 		jmp donerdprint
  2469                              <2> 	donerdprinc:
  2470 0000201B 46                  <2> 		inc esi
  2471                              <2> 	donerdprint:
  2472 0000201C 4E                  <2> 		dec esi
  2473 0000201D BF[60B10300]        <2> 		mov edi, buftxt2
  2474                              <2> 	copylaterstuff:
  2475 00002022 8A07                <2> 		mov al, [edi]
  2476 00002024 3C00                <2> 		cmp al, 0
  2477 00002026 7409                <2> 		je nocopylaterstuff
  2478 00002028 8806                <2> 		mov [esi], al
  2479 0000202A 47                  <2> 		inc edi
  2480 0000202B 46                  <2> 		inc esi
  2481 0000202C E9F1FFFFFF          <2> 		jmp copylaterstuff
  2482                              <2> 	nocopylaterstuff:
  2483 00002031 C60600              <2> 		mov byte [esi], 0
  2484 00002034 E80B000000          <2> 		call clearbuftxt2
  2485 00002039 89F1                <2> 		mov ecx, esi
  2486 0000203B 8B3D[3E230000]      <2> 		mov edi, [firstesirdpr]
  2487 00002041 29F9                <2> 		sub ecx, edi
  2488 00002043 C3                  <2> 		ret
  2489                              <2> 	
  2490                              <2> 	clearbuftxt2:
  2491 00002044 30C0                <2> 		xor al, al
  2492 00002046 BF[60B10300]        <2> 		mov edi, buftxt2
  2493                              <2> 	clearbuftxt2lp:
  2494 0000204B 8807                <2> 		mov [edi], al
  2495 0000204D 47                  <2> 		inc edi
  2496 0000204E 81FF[60B50300]      <2> 		cmp edi, buftxt
  2497 00002054 75F5                <2> 		jne clearbuftxt2lp
  2498 00002056 C3                  <2> 		ret
  2499                              <2> 	
  2500                              <2> 	rdprintb2:
  2501 00002057 E865080000          <2> 		call termcopy
  2502 0000205C E953FEFFFF          <2> 		jmp rdprintb
  2503                              <2> 	
  2504                              <2> 	rdprhome:
  2505 00002061 3B35[44230000]      <2> 		cmp esi, [buftxtloc]
  2506 00002067 0F84EAFFFFFF        <2> 		je near rdprintb2
  2507 0000206D BF[60B10300]        <2> 		mov edi, buftxt2
  2508 00002072 8A07                <2> 		mov al, [edi]
  2509 00002074 E88E020000          <2> 		call shiftbuftxt2
  2510 00002079 E86E030000          <2> 		call prcharq
  2511 0000207E E9DEFFFFFF          <2> 		jmp rdprhome
  2512                              <2> 		
  2513                              <2> 	rdprend:
  2514 00002083 BF[60B10300]        <2> 		mov edi, buftxt2
  2515 00002088 8A07                <2> 		mov al, [edi]
  2516 0000208A 3C00                <2> 		cmp al, 0
  2517 0000208C 0F84C5FFFFFF        <2> 		je near rdprintb2
  2518 00002092 8806                <2> 		mov [esi], al
  2519 00002094 E84C000000          <2> 		call shiftbuftxt2lft
  2520 00002099 E84E030000          <2> 		call prcharq
  2521 0000209E E9E0FFFFFF          <2> 		jmp rdprend
  2522                              <2> 	
  2523                              <2> 	rdprleft:
  2524 000020A3 3B35[44230000]      <2> 		cmp esi, [buftxtloc]
  2525 000020A9 0F8405FEFFFF        <2> 		je near rdprintb
  2526 000020AF BF[60B10300]        <2> 		mov edi, buftxt2
  2527 000020B4 8A07                <2> 		mov al, [edi]
  2528 000020B6 E84C020000          <2> 		call shiftbuftxt2
  2529 000020BB E815030000          <2> 		call prcharint
  2530 000020C0 E9EFFDFFFF          <2> 		jmp rdprintb
  2531                              <2> 		
  2532                              <2> 	rdprright:
  2533 000020C5 BF[60B10300]        <2> 		mov edi, buftxt2
  2534 000020CA 8A07                <2> 		mov al, [edi]
  2535 000020CC 3C00                <2> 		cmp al, 0
  2536 000020CE 0F84E0FDFFFF        <2> 		je near rdprintb
  2537 000020D4 8806                <2> 		mov [esi], al
  2538 000020D6 E80A000000          <2> 		call shiftbuftxt2lft
  2539 000020DB E8F5020000          <2> 		call prcharint
  2540 000020E0 E9CFFDFFFF          <2> 		jmp rdprintb
  2541                              <2> 		
  2542                              <2> 	shiftbuftxt2lft:
  2543 000020E5 55                  <2> 		push ebp
  2544 000020E6 89FD                <2> 		mov ebp, edi
  2545                              <2> 	.lp:
  2546 000020E8 3C00                <2> 		cmp al, 0
  2547 000020EA 740B                <2> 		je noshiftbuftxt2lft
  2548 000020EC 47                  <2> 		inc edi
  2549 000020ED 8A07                <2> 		mov al, [edi]
  2550 000020EF 8847FF              <2> 		mov [edi - 1], al
  2551 000020F2 E9F1FFFFFF          <2> 		jmp .lp
  2552                              <2> 	noshiftbuftxt2lft:
  2553 000020F7 8A4500              <2> 		mov al, [ebp]
  2554 000020FA 5D                  <2> 		pop ebp
  2555 000020FB 3CC0                <2> 		cmp al, 0xC0
  2556 000020FD 7304                <2> 		jae .nofix
  2557 000020FF 3C80                <2> 		cmp al, 0x80
  2558 00002101 73E2                <2> 		jae shiftbuftxt2lft
  2559                              <2> 	.nofix:
  2560 00002103 8A06                <2> 		mov al, [esi]
  2561 00002105 30E4                <2> 		xor ah, ah
  2562 00002107 46                  <2> 		inc esi
  2563 00002108 668B1D[3C230000]    <2> 		mov bx, [modkeyrdpr]
  2564 0000210F C3                  <2> 		ret
  2565                              <2> 		
  2566                              <2> 	rdprdownbck:
  2567 00002110 FECC                <2> 		dec ah
  2568 00002112 8825[42230000]      <2> 		mov [commandedit], ah
  2569 00002118 E890000000          <2> 		call rdprbckspc
  2570 0000211D E992FDFFFF          <2> 		jmp rdprintb
  2571                              <2> 	
  2572                              <2> 	rdprdown:
  2573 00002122 8A25[42230000]      <2> 		mov ah, [commandedit]
  2574 00002128 80FC01              <2> 		cmp ah, 1
  2575 0000212B 0F8683FDFFFF        <2> 		jbe near rdprintb
  2576 00002131 8B3D[12670500]      <2> 		mov edi, [commandsentered]
  2577 00002137 3B3D[0E670500]      <2> 		cmp edi, [commandlistentries]
  2578 0000213D 7618                <2> 		jbe .nofix
  2579 0000213F 8105[0E670500]0200- <2> 		add dword [commandlistentries], 2
  2580 00002147 0000                <2>
  2581 00002149 3B3D[0E670500]      <2> 		cmp edi, [commandlistentries]
  2582 0000214F 7706                <2> 		ja .nofix
  2583 00002151 893D[0E670500]      <2> 		mov [commandlistentries], edi
  2584                              <2> 	.nofix:
  2585 00002157 80FC02              <2> 		cmp ah, 2
  2586 0000215A 74B4                <2> 		je rdprdownbck
  2587 0000215C 80EC02              <2> 		sub ah, 2
  2588 0000215F 8825[42230000]      <2> 		mov [commandedit], ah
  2589                              <2> 		
  2590                              <2> 	rdprup:
  2591 00002165 3805[42230000]      <2> 		cmp [commandedit], al
  2592 0000216B 0F8443FDFFFF        <2> 		je near rdprintb
  2593 00002171 813D[0E670500]0000- <2> 		cmp dword [commandlistentries], 0
  2594 00002179 0000                <2>
  2595 0000217B 0F8433FDFFFF        <2> 		je near rdprintb
  2596 00002181 FF0D[0E670500]      <2> 		dec dword [commandlistentries]
  2597                              <2> 	.lp:
  2598 00002187 BF[60B10300]        <2> 		mov edi, buftxt2
  2599 0000218C 8A07                <2> 		mov al, [edi]
  2600 0000218E 3C00                <2> 		cmp al, 0
  2601 00002190 7411                <2> 		je .start
  2602 00002192 8806                <2> 		mov [esi], al
  2603 00002194 E84CFFFFFF          <2> 		call shiftbuftxt2lft
  2604 00002199 E84E020000          <2> 		call prcharq
  2605 0000219E E9E4FFFFFF          <2> 		jmp .lp
  2606                              <2> 	.start:
  2607 000021A3 E805000000          <2> 		call rdprbckspc
  2608 000021A8 E94B000000          <2> 		jmp getcurrentcommandstr
  2609                              <2> 	rdprbckspc:
  2610 000021AD 3B35[44230000]      <2> 		cmp esi, [buftxtloc]
  2611 000021B3 7435                <2> 		je nordprupbck
  2612                              <2> 	rdprupbckspclp:
  2613 000021B5 66B80800            <2> 		mov ax, 8
  2614 000021B9 668B1D[3C230000]    <2> 		mov bx, [modkeyrdpr]
  2615 000021C0 E827020000          <2> 		call prcharq
  2616 000021C5 66B82000            <2> 		mov ax, ' '
  2617 000021C9 E81E020000          <2> 		call prcharq
  2618 000021CE 66B80800            <2> 		mov ax, 8
  2619 000021D2 E815020000          <2> 		call prcharq
  2620 000021D7 4E                  <2> 		dec esi
  2621 000021D8 3B35[44230000]      <2> 		cmp esi, [buftxtloc]
  2622 000021DE 7405                <2> 		je nordprupbck2
  2623 000021E0 E9D0FFFFFF          <2> 		jmp rdprupbckspclp
  2624                              <2> 	nordprupbck2:
  2625 000021E5 E8D7060000          <2> 		call termcopy
  2626                              <2> 	nordprupbck:
  2627 000021EA 8B3D[0A670500]      <2> 		mov edi, [commandbufpos]
  2628 000021F0 81C7[16670500]      <2> 		add edi, commandbuf
  2629 000021F6 4F                  <2> 		dec edi
  2630 000021F7 C3                  <2> 		ret
  2631                              <2> 	getcurrentcommandstr:
  2632 000021F8 8A25[42230000]      <2> 		mov ah, [commandedit]
  2633 000021FE FE05[42230000]      <2> 		inc byte [commandedit]
  2634                              <2> 	getccmdlp:
  2635 00002204 4F                  <2> 		dec edi
  2636 00002205 8A07                <2> 		mov al, [edi]
  2637 00002207 81FF[16670500]      <2> 		cmp edi, commandbuf
  2638 0000220D 7231                <2> 		jb getcmdresetcommandbuf
  2639 0000220F 81EF[16670500]      <2> 		sub edi, commandbuf
  2640 00002215 3B3D[0A670500]      <2> 		cmp edi, [commandbufpos]
  2641 0000221B 0F8493FCFFFF        <2> 		je near rdprintb
  2642 00002221 81C7[16670500]      <2> 		add edi, commandbuf
  2643 00002227 3C00                <2> 		cmp al, 0
  2644 00002229 75D9                <2> 		jne getccmdlp
  2645 0000222B FECC                <2> 		dec ah
  2646 0000222D 80FC00              <2> 		cmp ah, 0
  2647 00002230 77D2                <2> 		ja getccmdlp
  2648 00002232 47                  <2> 		inc edi
  2649 00002233 81FF[16770500]      <2> 		cmp edi, commandbufend
  2650 00002239 7710                <2> 		ja fixcmdbufb4morerdpr
  2651 0000223B E918000000          <2> 		jmp morerdprup
  2652                              <2> 	getcmdresetcommandbuf:
  2653 00002240 BF[16770500]        <2> 		mov edi, commandbufend
  2654 00002245 47                  <2> 		inc edi
  2655 00002246 E9B9FFFFFF          <2> 		jmp getccmdlp
  2656                              <2> 	fixcmdbufb4morerdpr:
  2657 0000224B 4F                  <2> 		dec edi
  2658 0000224C 81EF[16770500]      <2> 		sub edi, commandbufend
  2659 00002252 81C7[16670500]      <2> 		add edi, commandbuf
  2660                              <2> 	morerdprup:
  2661 00002258 8A07                <2> 		mov al, [edi]
  2662 0000225A 47                  <2> 		inc edi
  2663 0000225B 81EF[16670500]      <2> 		sub edi, commandbuf
  2664 00002261 3C00                <2> 		cmp al, 0
  2665 00002263 0F84EEFDFFFF        <2> 		je near rdprintb2
  2666 00002269 3B3D[0A670500]      <2> 		cmp edi, [commandbufpos]
  2667 0000226F 0F83E2FDFFFF        <2> 		jae near rdprintb2
  2668 00002275 81C7[16670500]      <2> 		add edi, commandbuf
  2669 0000227B 8806                <2> 		mov [esi], al
  2670 0000227D 46                  <2> 		inc esi
  2671 0000227E 57                  <2> 		push edi
  2672 0000227F 668B1D[3C230000]    <2> 		mov bx, [modkeyrdpr]
  2673 00002286 30E4                <2> 		xor ah, ah
  2674 00002288 E85F010000          <2> 		call prcharq
  2675 0000228D 5F                  <2> 		pop edi
  2676 0000228E 81FF[16770500]      <2> 		cmp edi, commandbufend
  2677 00002294 76C2                <2> 		jbe morerdprup
  2678 00002296 BF[16670500]        <2> 		mov edi, commandbuf
  2679 0000229B E9B8FFFFFF          <2> 		jmp morerdprup
  2680                              <2> 
  2681                              <2> 	rdprdel:
  2682 000022A0 BF[60B10300]        <2> 		mov edi, buftxt2
  2683 000022A5 8A07                <2> 		mov al, [edi]
  2684 000022A7 3C00                <2> 		cmp al, 0
  2685 000022A9 0F8405FCFFFF        <2> 		je near rdprintb
  2686 000022AF 8806                <2> 		mov [esi], al
  2687 000022B1 3C80                <2> 		cmp al, 0x80
  2688 000022B3 7216                <2> 		jb .fn
  2689                              <2> 	.lp:
  2690 000022B5 46                  <2> 		inc esi
  2691 000022B6 47                  <2> 		inc edi
  2692 000022B7 8A07                <2> 		mov al, [edi]
  2693 000022B9 3C00                <2> 		cmp al, 0
  2694 000022BB 0F84F3FBFFFF        <2> 		je near rdprintb
  2695 000022C1 8806                <2> 		mov [esi], al
  2696 000022C3 3C80                <2> 		cmp al, 0x80
  2697 000022C5 7204                <2> 		jb .fn
  2698 000022C7 3CC0                <2> 		cmp al, 0xC0
  2699 000022C9 72EA                <2> 		jb .lp
  2700                              <2> 	.fn:
  2701 000022CB E815FEFFFF          <2> 		call shiftbuftxt2lft
  2702 000022D0 E817010000          <2> 		call prcharq
  2703                              <2> 		
  2704                              <2> 	rdprbscheck:
  2705 000022D5 3B35[3E230000]      <2> 		cmp esi, [firstesirdpr]
  2706 000022DB 0F86D3FBFFFF        <2> 		jbe near rdprintb
  2707                              <2> 	goodbscheck:
  2708 000022E1 4E                  <2> 		dec esi
  2709 000022E2 8A46FF              <2> 		mov al, [esi - 1]
  2710 000022E5 C60600              <2> 		mov byte [esi], 0
  2711 000022E8 3CC0                <2> 		cmp al, 0xC0
  2712 000022EA 7309                <2> 		jae .onemore
  2713 000022EC 3C80                <2> 		cmp al, 0x80
  2714 000022EE 73F1                <2> 		jae goodbscheck
  2715 000022F0 E904000000          <2> 		jmp .nomore
  2716                              <2> 	.onemore:
  2717 000022F5 4E                  <2> 		dec esi
  2718 000022F6 C60600              <2> 		mov byte [esi], 0		
  2719                              <2> 	.nomore:
  2720 000022F9 668B1D[3C230000]    <2> 		mov bx, [modkeyrdpr]
  2721 00002300 B008                <2> 		mov al, 8
  2722 00002302 E987FCFFFF          <2> 		jmp bscheckequal
  2723                              <2> 		
  2724                              <2> 	shiftbuftxt2:
  2725 00002307 55                  <2> 		push ebp
  2726 00002308 89FD                <2> 		mov ebp, edi
  2727                              <2> 	.lp:
  2728 0000230A 3C00                <2> 		cmp al, 0
  2729 0000230C 740C                <2> 		je noshiftbuftxt2
  2730 0000230E 47                  <2> 		inc edi
  2731 0000230F 8A27                <2> 		mov ah, [edi]
  2732 00002311 8807                <2> 		mov [edi], al
  2733 00002313 88E0                <2> 		mov al, ah
  2734 00002315 E9F0FFFFFF          <2> 		jmp .lp
  2735                              <2> 	noshiftbuftxt2:
  2736 0000231A 8A4500              <2> 		mov al, [ebp]
  2737 0000231D 5D                  <2> 		pop ebp
  2738 0000231E 3CC0                <2> 		cmp al, 0xC0
  2739 00002320 7304                <2> 		jae .nofix
  2740 00002322 3C80                <2> 		cmp al, 0x80
  2741 00002324 73E1                <2> 		jae shiftbuftxt2
  2742                              <2> 	.nofix:
  2743 00002326 BF[60B10300]        <2> 		mov edi, buftxt2
  2744 0000232B 4E                  <2> 		dec esi
  2745 0000232C 8A06                <2> 		mov al, [esi]
  2746 0000232E 8807                <2> 		mov [edi], al
  2747 00002330 C60600              <2> 		mov byte [esi], 0
  2748 00002333 66B80800            <2> 		mov ax, 8
  2749 00002337 C3                  <2> 		ret
  2750                              <2> 		
  2751 00002338 0000                <2> axcache dw 0
  2752 0000233A 0000                <2> endkeyrdpr dw 0
  2753 0000233C 0000                <2> modkeyrdpr dw 0
  2754 0000233E 00000000            <2> firstesirdpr dd 0
  2755 00002342 00                  <2> commandedit db 0
  2756 00002343 00                  <2> txtmask db 0
  2757 00002344 00000000            <2> buftxtloc dd 0
  2758 00002348 00000000            <2> endbufferrdpr dd 0
  2759 0000234C 082000              <2> backcursor db 8," ",0
  2760                              <1> 	%include 'source/interrupts/5_readchar.asm'
  2761                              <2> readchar:
  2762 0000234F E807000000          <2> 	call rdcharint
  2763 00002354 E947DFFFFF          <2> 	jmp timerinterrupt
  2764                              <2> getchar:
  2765 00002359 30C0                <2> 	xor al, al
  2766                              <2> 	rdcharint:		;get char, if al is 0, wait for key
  2767 0000235B 66C705[BD230000]01- <2> 		mov word [trans], 1
  2768 00002363 00                  <2>
  2769 00002364 3C00                <2> 		cmp al, 0
  2770 00002366 7509                <2> 		jne transcheck
  2771 00002368 66C705[BD230000]00- <2> 		mov word [trans], 0
  2772 00002370 00                  <2>
  2773                              <2> 	transcheck:
  2774                              <2> 	%ifdef io.serial
  2775                              <2> 		call serial.receive
  2776                              <2> 		xor ah, ah
  2777                              <2> 		cmp al, 13
  2778                              <2> 		je rdenter
  2779                              <2> 	%else
  2780 00002371 E8F53A0000          <2> 		call getkey
  2781 00002376 66A1[BB230000]      <2> 		mov ax, [lastkey + 2]
  2782 0000237C 663D1C00            <2> 		cmp ax, 0x1C
  2783 00002380 7425                <2> 		je rdenter
  2784                              <2> 	%endif
  2785 00002382 66A1[B9230000]      <2> 		mov ax, [lastkey]
  2786 00002388 668B1D[BD230000]    <2> 		mov bx, [trans]
  2787 0000238F 803D[495E0000]E0    <2> 		cmp byte [specialkey], 0xE0
  2788 00002396 7500                <2> 		jne nospecialtrans
  2789                              <2> 	nospecialtrans:
  2790 00002398 6609C3              <2> 		or bx, ax
  2791 0000239B 6681FB0000          <2> 		cmp bx, 0
  2792 000023A0 74CF                <2> 		je transcheck
  2793 000023A2 E90C000000          <2> 		jmp rdend
  2794                              <2> 	rdenter:
  2795 000023A7 C1E010              <2> 		shl eax, 16
  2796 000023AA 66B80A00            <2> 		mov ax, 10
  2797 000023AE A3[B9230000]        <2> 		mov [lastkey], eax
  2798                              <2> 	rdend:
  2799 000023B3 A1[B9230000]        <2> 		mov eax, [lastkey]
  2800 000023B8 C3                  <2> 		ret
  2801                              <2> 		
  2802 000023B9 00000000            <2> lastkey dd 0
  2803 000023BD 0000                <2> trans dw 0
  2804                              <1> 	%include 'source/interrupts/6_prntchar.asm'
  2805                              <2> prntchar:
  2806 000023BF 30E4                <2> 	xor ah, ah ;this kills unicode from the outside unfortunately
  2807                              <2> %ifdef io.serial
  2808                              <2> 	call prcharint
  2809                              <2> 	jmp timerinterrupt
  2810                              <2> prcharint:	
  2811                              <2> prcharq:
  2812                              <2> 	call serial.send
  2813                              <2> 	ret
  2814                              <2> %else
  2815 000023C1 38FB                <2> cmp bl, bh
  2816 000023C3 740A                <2> je prchar.notimer
  2817 000023C5 E80B000000          <2> call prcharint
  2818 000023CA E9D1DEFFFF          <2> jmp timerinterrupt
  2819                              <2> prchar.notimer:
  2820 000023CF E818000000          <2> 	call prcharq
  2821 000023D4 CF                  <2> 	iret
  2822                              <2> 	
  2823                              <2> prcharint:	;print char, char in ax, modifier in bx, if ecx is eax then termcopy will not happen, will run termcopy if called as is
  2824 000023D5 663DFFFE            <2> 	cmp ax, 0xFEFF
  2825 000023D9 740E                <2> 	je .ret
  2826 000023DB 39C1                <2> 	cmp ecx, eax
  2827 000023DD 740D                <2> 	je prcharq
  2828 000023DF E808000000          <2> 	call prcharq
  2829 000023E4 E8D8040000          <2> 	call termcopy
  2830                              <2> .ret:
  2831 000023E9 C3                  <2> 	ret
  2832 000023EA 00                  <2> termguion db 0
  2833 000023EB 00                  <2> termcopyon db 0
  2834                              <2> prcharq:
  2835 000023EC C1E310              <2> 	shl ebx, 16
  2836 000023EF 6689C3              <2> 	mov bx, ax
  2837 000023F2 89D8                <2> 	mov eax, ebx
  2838 000023F4 A3[ED250000]        <2> 	mov [charbuf], eax
  2839 000023F9 8B1D[E5250000]      <2> 	mov ebx, [videobufpos]
  2840 000023FF BF[76BC0300]        <2> 	mov edi, videobuf
  2841 00002404 01DF                <2> 	add edi, ebx
  2842 00002406 A1[CC280000]        <2> 	mov eax, [removedvideo]
  2843 0000240B 8907                <2> 	mov [edi], eax
  2844 0000240D A1[ED250000]        <2> 	mov eax, [charbuf]
  2845 00002412 31D2                <2> 	xor edx, edx
  2846 00002414 668B15[E9250000]    <2> 	mov dx, [charpos]
  2847 0000241B 31C9                <2> 	xor ecx, ecx
  2848 0000241D 668B0D[EB250000]    <2> 	mov cx, [charxy]
  2849 00002424 663D0900            <2> 	cmp ax, 9
  2850 00002428 0F847C000000        <2> 	je near prtab
  2851 0000242E 663D0D00            <2> 	cmp ax, 13		;I am phasing this out-it is used by windows but not unix based systems
  2852 00002432 0F84A2000000        <2> 	je near prcr
  2853 00002438 663D0A00            <2> 	cmp ax, 10
  2854 0000243C 0F84F1000000        <2> 	je near prnlcr
  2855 00002442 663D0800            <2> 	cmp ax, 8
  2856 00002446 0F84A2000000        <2> 	je near prbs
  2857 0000244C 663DFF00            <2> 	cmp ax, 255		;null character
  2858 00002450 0F8424000000        <2> 	je near donescr
  2859 00002456 663D0030            <2> 	cmp ax, (fontend - fonts)/16
  2860 0000245A 0F8341000000        <2> 	jae near prnofont
  2861                              <2> donepr:
  2862 00002460 8907                <2> 	mov [edi], eax
  2863 00002462 81C704000000        <2> 	add edi, 4
  2864 00002468 FEC2                <2> 	inc dl
  2865                              <2> donecrnl:
  2866 0000246A 38CA                <2> 	cmp dl, cl
  2867 0000246C 0F83E5000000        <2> 	jae near preol
  2868                              <2> doneeol:
  2869 00002472 38EE                <2> 	cmp dh, ch
  2870 00002474 0F83FA000000        <2> 	jae near prscr	
  2871                              <2> donescr:
  2872 0000247A 89FB                <2> 	mov ebx, edi
  2873 0000247C 8B07                <2> 	mov eax, [edi]
  2874 0000247E A3[CC280000]        <2> 	mov [removedvideo], eax
  2875 00002483 81EB[76BC0300]      <2> 	sub ebx, videobuf
  2876 00002489 891D[E5250000]      <2> 	mov [videobufpos], ebx
  2877 0000248F 668915[E9250000]    <2> 	mov [charpos], dx
  2878 00002496 A1[ED250000]        <2> 	mov eax, [charbuf]
  2879 0000249B 89C3                <2> 	mov ebx, eax
  2880 0000249D C1EB10              <2> 	shr ebx, 16
  2881 000024A0 C3                  <2> 	ret
  2882                              <2> 	
  2883                              <2> 	prnofont:
  2884 000024A1 66B80200            <2> 		mov ax, 2
  2885 000024A5 E9B6FFFFFF          <2> 		jmp donepr
  2886                              <2> 	prtab:
  2887 000024AA 8B1D[E1250000]      <2> 		mov ebx, [linebeginpos]
  2888 000024B0 81EF[76BC0300]      <2> 		sub edi, videobuf
  2889 000024B6 29DF                <2> 		sub edi, ebx
  2890 000024B8 C1EF05              <2> 		shr edi, 5
  2891 000024BB C1E705              <2> 		shl edi, 5
  2892 000024BE 81C720000000        <2> 		add edi, 32
  2893 000024C4 C0EA03              <2> 		shr dl, 3
  2894 000024C7 C0E203              <2> 		shl dl, 3
  2895 000024CA 80C208              <2> 		add dl, 8
  2896 000024CD 81C7[76BC0300]      <2> 		add edi, videobuf
  2897 000024D3 01DF                <2> 		add edi, ebx
  2898 000024D5 E990FFFFFF          <2> 		jmp donecrnl
  2899                              <2> 	
  2900                              <2> 	prcr:
  2901 000024DA 30D2                <2> 		xor dl, dl
  2902 000024DC BF[76BC0300]        <2> 		mov edi, videobuf
  2903 000024E1 8B1D[E1250000]      <2> 		mov ebx, [linebeginpos]
  2904 000024E7 01DF                <2> 		add edi, ebx
  2905 000024E9 E97CFFFFFF          <2> 		jmp donecrnl
  2906                              <2> 			
  2907                              <2> 	prbs:
  2908 000024EE 8B1D[E1250000]      <2> 		mov ebx, [linebeginpos]
  2909 000024F4 80FA00              <2> 		cmp dl, 0
  2910 000024F7 7415                <2> 		je prbackline
  2911                              <2> 	prnobmr:
  2912 000024F9 891D[E1250000]      <2> 		mov [linebeginpos], ebx
  2913 000024FF FECA                <2> 		dec dl
  2914 00002501 31C0                <2> 		xor eax, eax
  2915 00002503 81EF04000000        <2> 		sub edi, 4
  2916 00002509 E95CFFFFFF          <2> 		jmp donecrnl
  2917                              <2> 	prbackline:
  2918 0000250E 6631DB              <2> 		xor bx, bx
  2919 00002511 88CA                <2> 		mov dl, cl
  2920 00002513 80FE00              <2> 		cmp dh, 0
  2921 00002516 74E1                <2> 		je prnobmr
  2922 00002518 8B1D[E1250000]      <2> 		mov ebx, [linebeginpos]
  2923 0000251E 6651                <2> 		push cx
  2924 00002520 31C9                <2> 		xor ecx, ecx
  2925 00002522 8A0C24              <2> 		mov cl, [esp]
  2926 00002525 C1E102              <2> 		shl ecx, 2
  2927 00002528 29CB                <2> 		sub ebx, ecx
  2928 0000252A 6659                <2> 		pop cx
  2929 0000252C FECE                <2> 		dec dh
  2930 0000252E E9C6FFFFFF          <2> 		jmp prnobmr
  2931                              <2> 		
  2932                              <2> 	prnlcr:
  2933 00002533 FEC6                <2> 		inc dh
  2934 00002535 31DB                <2> 		xor ebx, ebx
  2935 00002537 30D2                <2> 		xor dl, dl
  2936 00002539 88CB                <2> 		mov bl, cl
  2937 0000253B 66C1E302            <2> 		shl bx, 2
  2938 0000253F BF[76BC0300]        <2> 		mov edi, videobuf
  2939 00002544 031D[E1250000]      <2> 		add ebx, [linebeginpos]
  2940 0000254A 891D[E1250000]      <2> 		mov [linebeginpos], ebx
  2941 00002550 01DF                <2> 		add edi, ebx
  2942 00002552 E913FFFFFF          <2> 		jmp donecrnl
  2943                              <2> 		
  2944                              <2> 	preol:
  2945 00002557 30D2                <2> 		xor dl, dl
  2946 00002559 FEC6                <2> 		inc dh
  2947 0000255B 31DB                <2> 		xor ebx, ebx
  2948 0000255D 88CB                <2> 		mov bl, cl
  2949 0000255F 66C1E302            <2> 		shl bx, 2
  2950 00002563 031D[E1250000]      <2> 		add ebx, [linebeginpos]
  2951 00002569 891D[E1250000]      <2> 		mov [linebeginpos], ebx
  2952 0000256F E9FEFEFFFF          <2> 		jmp doneeol
  2953                              <2> 	prscr:
  2954 00002574 FECE                <2> 		dec dh
  2955 00002576 BF[76BC0300]        <2> 		mov edi, videobuf
  2956 0000257B 31DB                <2> 		xor ebx, ebx
  2957 0000257D 88CB                <2> 		mov bl, cl
  2958 0000257F 66C1E302            <2> 		shl bx, 2
  2959 00002583 01FB                <2> 		add ebx, edi
  2960                              <2> 	intscrollloop:
  2961 00002585 8B03                <2> 		mov eax, [ebx]
  2962 00002587 8907                <2> 		mov [edi], eax
  2963 00002589 81C704000000        <2> 		add edi, 4
  2964 0000258F 81C304000000        <2> 		add ebx, 4
  2965 00002595 FEC9                <2> 		dec cl
  2966 00002597 80F900              <2> 		cmp cl, 0
  2967 0000259A 75E9                <2> 		jne intscrollloop
  2968 0000259C 8A0D[EB250000]      <2> 		mov cl, [charxy]
  2969 000025A2 FECD                <2> 		dec ch
  2970 000025A4 80FD01              <2> 		cmp ch, 1
  2971 000025A7 77DC                <2> 		ja intscrollloop
  2972 000025A9 31C0                <2> 		xor eax, eax
  2973 000025AB 81EF[76BC0300]      <2> 		sub edi, videobuf
  2974 000025B1 893D[E1250000]      <2> 		mov [linebeginpos], edi
  2975 000025B7 81C7[76BC0300]      <2> 		add edi, videobuf
  2976 000025BD 89FB                <2> 		mov ebx, edi
  2977                              <2> 	intloopclear:
  2978 000025BF 8903                <2> 		mov [ebx], eax
  2979 000025C1 81C304000000        <2> 		add ebx, 4
  2980 000025C7 FEC9                <2> 		dec cl
  2981 000025C9 80F900              <2> 		cmp cl, 0
  2982 000025CC 75F1                <2> 		jne intloopclear
  2983 000025CE FECD                <2> 		dec ch
  2984 000025D0 80FD00              <2> 		cmp ch, 0
  2985 000025D3 75EA                <2> 		jne intloopclear
  2986 000025D5 668B0D[EB250000]    <2> 		mov cx, [charxy]
  2987 000025DC E999FEFFFF          <2> 		jmp donescr
  2988                              <2> 		
  2989 000025E1 00000000            <2> linebeginpos dd 0
  2990 000025E5 00000000            <2> videobufpos: dd 0
  2991 000025E9 0000                <2> charpos db 0,0
  2992 000025EB 501E                <2> charxy db 80,30
  2993 000025ED 00000000            <2> charbuf dd 0
  2994                              <2> %endif
  2995                              <1> 	%include 'source/interrupts/7_openfile.asm'
  2996                              <2> openfile:
  2997 000025F1 E823420000          <2> 	call loadfile
  2998 000025F6 E9A5DCFFFF          <2> 	jmp timerinterrupt
  2999                              <1> 	%include 'source/interrupts/9_num2str.asm'
  3000                              <2> num2str:
  3001 000025FB 3C00                <2> 	cmp al, 0
  3002 000025FD 750A                <2> 	jne num2strb
  3003 000025FF E8000D0000          <2> 	call showdec
  3004 00002604 E997DCFFFF          <2> 	jmp timerinterrupt
  3005                              <2> num2strb:
  3006 00002609 E82C0C0000          <2> 	call showhex
  3007 0000260E E98DDCFFFF          <2> 	jmp timerinterrupt
  3008                              <1> 	%include 'source/interrupts/10_str2num.asm'
  3009                              <2> str2num:
  3010 00002613 89F7                <2> 	mov edi, esi
  3011 00002615 E8CF0D0000          <2> 	call cnvrttxt	;the string goes into esi, number into ecx
  3012 0000261A E981DCFFFF          <2> 	jmp timerinterrupt
  3013                              <2> 	
  3014                              <1> %ifdef threads.included
  3015                              <1> 	%include 'source/interrupts/11_forkthread.asm'
  3016                              <2> forkthread:
  3017                              <2> 			 ;esi is next thread's start address, if 0, fork current thread
  3018                              <2> 			;returns the PID of the new fork in ebx
  3019                              <2> ;WARNING:THIS WILL NOT WORK IN C UNTIL IT COPIES THE ENTIRE STACK
  3020 0000261F FA                  <2> 	cli
  3021 00002620 60                  <2> 	pushad
  3022 00002621 8925[EE260000]      <2> 	mov [.espold], esp
  3023 00002627 C605[DE690000]01    <2> 	mov byte [threadson], 1
  3024 0000262E 8B1D[DF690000]      <2> 	mov ebx, [currentthread]
  3025 00002634 C1E302              <2> 	shl ebx, 2
  3026 00002637 89A3[16770500]      <2> 	mov [threadlist + ebx], esp
  3027 0000263D C1EB02              <2> 	shr ebx, 2
  3028 00002640 81FB00000000        <2> 	cmp ebx, 0
  3029 00002646 750C                <2> 	jne .simplestack
  3030 00002648 BB[7C9A0300]        <2> 	mov ebx, stackend
  3031 0000264D 29E3                <2> 	sub ebx, esp
  3032 0000264F E90B000000          <2> 	jmp .stackcalcdone
  3033                              <2> .simplestack:
  3034 00002654 C1E30A              <2> 	shl ebx, 10
  3035 00002657 81C3[168B0500]      <2> 	add ebx, stack1
  3036 0000265D 29E3                <2> 	sub ebx, esp
  3037                              <2> .stackcalcdone:
  3038 0000265F 29DC                <2> 	sub esp, ebx
  3039 00002661 81C4[168B0500]      <2> 	add esp, stack1
  3040 00002667 8B1D[DA690000]      <2> 	mov ebx, [lastthread]
  3041 0000266D C1E308              <2> 	shl ebx, 8
  3042 00002670 01DC                <2> 	add esp, ebx
  3043 00002672 891D[F2260000]      <2> 	mov [.stackend], ebx
  3044                              <2> 
  3045 00002678 89E5                <2> 	mov ebp, esp
  3046 0000267A 8B25[EE260000]      <2> 	mov esp, [.espold]
  3047                              <2> 
  3048 00002680 C1EB0A              <2> 	shr ebx, 10 ;get pid then push it
  3049 00002683 895C2410            <2> 	mov [esp + 16], ebx ;set the old ebx to the new PID
  3050                              <2> 
  3051 00002687 31DB                <2> 	xor ebx, ebx
  3052                              <2> .stackcopy:
  3053 00002689 668B041C            <2> 	mov ax, [esp + ebx]
  3054 0000268D 6689441D00          <2> 	mov [ebp + ebx], ax
  3055 00002692 81C302000000        <2> 	add ebx, 2
  3056 00002698 3B1D[F2260000]      <2> 	cmp ebx, [.stackend]
  3057 0000269E 72E9                <2> 	jb .stackcopy
  3058                              <2> 
  3059 000026A0 31C0                <2> 	xor eax, eax
  3060 000026A2 668CC8              <2> 	mov ax, cs
  3061 000026A5 89C2                <2> 	mov edx, eax
  3062 000026A7 8B4C2428            <2> 	mov ecx, [esp + 40]
  3063 000026AB 81C900020000        <2> 	or ecx, 0x200
  3064                              <2> 	
  3065 000026B1 81FE00000000        <2> 	cmp esi, 0
  3066 000026B7 7504                <2> 	jne .nochangestack
  3067 000026B9 8B742420            <2> 	mov esi, [esp + 32]
  3068                              <2> .nochangestack:
  3069 000026BD 89F0                <2> 	mov eax, esi
  3070 000026BF 89EC                <2> 	mov esp, ebp
  3071                              <2> 
  3072 000026C1 89442420            <2> 	mov [esp + 32], eax
  3073 000026C5 89542424            <2> 	mov [esp + 36], edx
  3074 000026C9 894C2428            <2> 	mov [esp + 40], ecx
  3075                              <2> 
  3076 000026CD 8B1D[DA690000]      <2> 	mov ebx, [lastthread]
  3077 000026D3 89A3[16770500]      <2> 	mov [threadlist + ebx], esp
  3078 000026D9 81C304000000        <2> 	add ebx, 4
  3079 000026DF 891D[DA690000]      <2> 	mov [lastthread], ebx
  3080 000026E5 8B25[EE260000]      <2> 	mov esp, [.espold]
  3081 000026EB 61                  <2> 	popad
  3082 000026EC FB                  <2> 	sti
  3083 000026ED CF                  <2> 	iret
  3084                              <2> 
  3085 000026EE 00000000            <2> .espold dd 0
  3086 000026F2 00000000            <2> .stackend dd 0
  3087                              <1> %endif
  3088                              <1> 	%include 'source/interrupts/12_gettime.asm'
  3089                              <2> gettime:
  3090 000026F6 A1[58020000]        <2> 	mov eax, [timeseconds]
  3091 000026FB 8B1D[5C020000]      <2> 	mov ebx, [timenanoseconds]
  3092 00002701 89D9                <2> 	mov ecx, ebx
  3093 00002703 C1E90A              <2> 	shr ecx, 10	;this is in microseconds
  3094 00002706 E995DBFFFF          <2> 	jmp timerinterrupt
  3095                              <1> 	%include 'source/interrupts/13_settime.asm'
  3096                              <2> settime:
  3097 0000270B A3[58020000]        <2> 	mov [timeseconds], eax
  3098 00002710 891D[5C020000]      <2> 	mov [timenanoseconds], ebx
  3099 00002716 E985DBFFFF          <2> 	jmp timerinterrupt
  3100                              <2> 	
  3101                              <1> 	%include 'source/interrupts/14_runcmd.asm'
  3102                              <2> runcmd:
  3103 0000271B BF[60B50300]        <2> 	mov edi, buftxt
  3104                              <2> cpcmd:
  3105 00002720 8A06                <2> 	mov al, [esi]
  3106 00002722 8807                <2> 	mov [edi], al
  3107 00002724 46                  <2> 	inc esi
  3108 00002725 47                  <2> 	inc edi
  3109 00002726 3C00                <2> 	cmp al, 0
  3110 00002728 75F6                <2> 	jne cpcmd
  3111 0000272A E8E1070000          <2> 	call run
  3112 0000272F CF                  <2> 	iret
  3113                              <1> 	%include 'source/interrupts/15_proginfo.asm'
  3114                              <2> proginfo:
  3115                              <2> 	;mov ebx, variables
  3116 00002730 8B35[EC2F0000]      <2> 	mov esi, [currentcommandloc]
  3117 00002736 89F7                <2> 	mov edi, esi
  3118 00002738 31C9                <2> 	xor ecx, ecx
  3119                              <2> getcommandzeroes:
  3120 0000273A 8A07                <2> 	mov al, [edi]
  3121 0000273C 47                  <2> 	inc edi
  3122 0000273D 3C3B                <2> 	cmp al, ';'
  3123 0000273F 740E                <2> 	je nomorezeroes
  3124 00002741 3C00                <2> 	cmp al, 0
  3125 00002743 740A                <2> 	je nomorezeroes
  3126 00002745 3C20                <2> 	cmp al, ' '
  3127 00002747 75F1                <2> 	jne getcommandzeroes
  3128 00002749 41                  <2> 	inc ecx
  3129 0000274A E9EBFFFFFF          <2> 	jmp getcommandzeroes
  3130                              <2> nomorezeroes:
  3131 0000274F 41                  <2> 	inc ecx
  3132 00002750 4F                  <2> 	dec edi
  3133 00002751 8B1D[ECA00300]      <2> 	mov ebx, [uid]
  3134 00002757 8B15[DF690000]      <2> 	mov edx, [currentthread]
  3135 0000275D CF                  <2> 	iret
  3136                              <2> 	
  3137                              <1> 	%include 'source/interrupts/16_hooksig.asm'
  3138                              <2> hooksig: ;hook code in ESI to signal in AL
  3139 0000275E 3C00                <2> 	cmp al, 0
  3140 00002760 7507                <2> 	jne .quit	;only sig 0, the escape key, is handled, and only for one app
  3141                              <2> ;	xor ebx, ebx
  3142                              <2> ;	mov bl, al
  3143                              <2> ;	shl bl, 2
  3144 00002762 BF[DC9A0300]        <2> 	mov edi, sigtable
  3145 00002767 8937                <2> 	mov [edi], esi
  3146                              <2> .quit:
  3147 00002769 E932DBFFFF          <2> 	jmp timerinterrupt
  3148                              <1> %ifdef gui.included
  3149                              <1> 	%include 'source/interrupts/17_guiint.asm'
  3150                              <2> guiint:
  3151 0000276E 3CFD                <2> 	cmp al, 253
  3152 00002770 0F8473000000        <2> 	je near .getinfo
  3153 00002776 803D[CE870000]01    <2> 	cmp byte [guion], 1
  3154 0000277D 0F8550000000        <2> 	jne near .nogui
  3155 00002783 3C00                <2> 	cmp al, 0
  3156 00002785 0F844D000000        <2> 	je near .clear
  3157 0000278B 3C01                <2> 	cmp al, 1
  3158 0000278D 0F84A8000000        <2> 	je near .putpixel
  3159 00002793 3C02                <2> 	cmp al, 2
  3160 00002795 0F84AD000000        <2> 	je near .drawtext
  3161 0000279B 3C03                <2> 	cmp al, 3
  3162 0000279D 0F84C0000000        <2> 	je near .drawline
  3163 000027A3 3C04                <2> 	cmp al, 4
  3164 000027A5 0F84CB000000        <2> 	je near .drawcircle
  3165 000027AB 3C05                <2> 	cmp al, 5
  3166 000027AD 0F84D3000000        <2> 	je near .fillcircle
  3167 000027B3 3C06                <2> 	cmp al, 6
  3168 000027B5 0F84DB000000        <2> 	je near .drawsquare
  3169 000027BB 3C07                <2> 	cmp al, 7
  3170 000027BD 0F84E6000000        <2> 	je near .fillsquare
  3171 000027C3 3CFE                <2> 	cmp al, 254
  3172 000027C5 0F8446000000        <2> 	je near .setinfo
  3173 000027CB 3CFF                <2> 	cmp al, 255
  3174 000027CD 0F8443000000        <2> 	je near .reset
  3175                              <2> .nogui:
  3176 000027D3 E9C8DAFFFF          <2> 	jmp timerinterrupt
  3177                              <2> 
  3178                              <2> .clear:		;color in bx
  3179 000027D8 66891D[C7700000]    <2> 	mov [background], bx
  3180                              <2> %ifdef gui.background
  3181                              <2> 	mov ebx, [backgroundimage]
  3182                              <2> 	cmp ebx, 0
  3183                              <2> 	je .clearit
  3184                              <2> 	mov dword [backgroundimage], 0
  3185                              <2> 	mov [.bgi], ebx
  3186                              <2> .clearit:
  3187                              <2> %endif
  3188 000027DF E897480000          <2> 	call guiclear
  3189 000027E4 E9B7DAFFFF          <2> 	jmp timerinterrupt
  3190                              <2> 	
  3191                              <2> .getinfo:	;puts screen size in (dx, cx), background color in bx, and will put other stuff in other places
  3192 000027E9 31DB                <2> 	xor ebx, ebx
  3193 000027EB 31C9                <2> 	xor ecx, ecx
  3194 000027ED 31D2                <2> 	xor edx, edx
  3195 000027EF 381D[CE870000]      <2> 	cmp [guion], bl
  3196 000027F5 74DC                <2> 	je .nogui
  3197 000027F7 668B1D[C7700000]    <2> 	mov bx, [background]
  3198 000027FE 668B15[57570000]    <2> 	mov dx, [resolutionx]
  3199 00002805 668B0D[59570000]    <2> 	mov cx, [resolutiony]
  3200 0000280C E98FDAFFFF          <2> 	jmp timerinterrupt
  3201                              <2> 	
  3202                              <2> .setinfo:	;does nothing yet. will get screen size in (dx, cx), background color in bx, and will put other stuff in other places
  3203 00002811 E98ADAFFFF          <2> 	jmp timerinterrupt
  3204                              <2> .reset:		;resets the screen to the original settings
  3205 00002816 66BBCF7B            <2> 	mov bx, background.original
  3206 0000281A 66891D[C7700000]    <2> 	mov [background], bx
  3207 00002821 66BBFFFF            <2> 	mov bx, 0xFFFF
  3208 00002825 66891D[99770000]    <2> 	mov [colorfont2], bx
  3209                              <2> %ifdef gui.background
  3210                              <2> 	mov ebx, [backgroundimage]
  3211                              <2> 	cmp ebx, 0
  3212                              <2> 	jne .resetit
  3213                              <2> 	mov ebx, [.bgi]
  3214                              <2> 	mov [backgroundimage], ebx
  3215                              <2> .resetit:
  3216                              <2> %endif
  3217 0000282C E84A480000          <2> 	call guiclear
  3218 00002831 E895480000          <2> 	call reloadallgraphics
  3219 00002836 E965DAFFFF          <2> 	jmp timerinterrupt
  3220                              <2> 
  3221                              <2> %ifdef gui.background
  3222                              <2> 	.bgi dd 0
  3223                              <2> %endif
  3224                              <2> 	
  3225                              <2> .putpixel:	;pixel location in (dx, cx), color in bx
  3226 0000283B 6689DE              <2> 	mov si, bx
  3227 0000283E E8BB5E0000          <2> 	call putpixel
  3228 00002843 E958DAFFFF          <2> 	jmp timerinterrupt
  3229                              <2> 
  3230                              <2> .drawtext:	;background in di, foreground in bx, location in (dx,cx), string in esi
  3231 00002848 66D1E2              <2> 	shl dx, 1
  3232 0000284B 66891D[99770000]    <2> 	mov [colorfont2], bx
  3233 00002852 66893D[C7700000]    <2> 	mov [background], di
  3234 00002859 E8D04E0000          <2> 	call showstring2
  3235 0000285E E93DDAFFFF          <2> 	jmp timerinterrupt
  3236                              <2> 
  3237                              <2> .drawline:	;color in bx, start in (dx,cx), end in (di,si)
  3238 00002863 6689F0              <2> 	mov ax, si
  3239 00002866 6689DE              <2> 	mov si, bx
  3240 00002869 6689FB              <2> 	mov bx, di
  3241 0000286C E8DE460000          <2> 	call drawline
  3242 00002871 E92ADAFFFF          <2> 	jmp timerinterrupt
  3243                              <2> 
  3244                              <2> .drawcircle: ;color in bx, radius in si, center in (dx,cx)
  3245 00002876 6689F0              <2> 	mov ax, si
  3246 00002879 6689DE              <2> 	mov si, bx
  3247 0000287C E857420000          <2> 	call drawcircle
  3248 00002881 E91ADAFFFF          <2> 	jmp timerinterrupt
  3249                              <2> 
  3250                              <2> .fillcircle: ;color in bx, radius in si, center in (dx,cx)
  3251 00002886 6689F0              <2> 	mov ax, si
  3252 00002889 6689DE              <2> 	mov si, bx
  3253 0000288C E859430000          <2> 	call fillcircle
  3254 00002891 E90ADAFFFF          <2> 	jmp timerinterrupt
  3255                              <2> 	
  3256                              <2> .drawsquare: ;color in bx, start in (dx, cx), end in (di, si)
  3257 00002896 6689F0              <2> 	mov ax, si
  3258 00002899 6689DE              <2> 	mov si, bx
  3259 0000289C 6689FB              <2> 	mov bx, di
  3260 0000289F E806490000          <2> 	call drawsquare
  3261 000028A4 E9F7D9FFFF          <2> 	jmp timerinterrupt
  3262                              <2> 
  3263                              <2> .fillsquare: ;color in bx, start in (dx, cx), end in (di, si)
  3264 000028A9 6689F0              <2> 	mov ax, si
  3265 000028AC 6689DE              <2> 	mov si, bx
  3266 000028AF 6689FB              <2> 	mov bx, di
  3267 000028B2 E86B490000          <2> 	call fillsquare
  3268 000028B7 E9E4D9FFFF          <2> 	jmp timerinterrupt
  3269                              <1> %endif
  3270                              <1> %ifdef sound.included
  3271                              <1> 	%include 'source/interrupts/18_soundint.asm'
  3272                              <2> soundint:
  3273 000028BC E9DFD9FFFF          <2> 	jmp timerinterrupt
  3274                              <1> %endif
  3275                              <1> %ifdef network.included
  3276                              <1> 	%include 'source/interrupts/19_netint.asm'
  3277                              <1> %endif
  3278                              <1> 
  3279                              <1> termcopy:
  3280                              <1> %ifdef io.serial
  3281                              <1> 	ret
  3282                              <1> %else
  3283                              <1> %ifdef terminal.vsync
  3284                              <1> 	mov byte [termcopyneeded], 1
  3285                              <1> 	ret
  3286                              <1> %else
  3287 000028C1 E80A000000          <1> 	call newtermcopy
  3288 000028C6 C3                  <1> 	ret
  3289                              <1> %endif
  3290 000028C7 00                  <1> 	termcopyneeded db 0
  3291 000028C8 00000000            <1> 	termcursorpos dd 0
  3292 000028CC 00000000            <1> 	removedvideo dd 0
  3293                              <1> newtermcopy:
  3294 000028D0 60                  <1> 	pusha
  3295 000028D1 BF[76BC0300]        <1> 	mov edi, videobuf
  3296 000028D6 31DB                <1> 	xor ebx, ebx
  3297 000028D8 881D[C7280000]      <1> 	mov [termcopyneeded], bl
  3298 000028DE 8B1D[E5250000]      <1> 	mov ebx, [videobufpos]
  3299 000028E4 01DF                <1> 	add edi, ebx
  3300 000028E6 893D[C8280000]      <1> 	mov [termcursorpos], edi
  3301 000028EC E8E2000000          <1> 	call switchtermcursor
  3302 000028F1 803D[CE870000]00    <1> 	cmp byte [guion], 0
  3303 000028F8 0F8420000000        <1> 	je near nowincopy
  3304                              <1> %ifdef gui.included
  3305 000028FE C605[097F0000]00    <1> 	mov byte [mouseselecton], 0
  3306 00002905 C605[EB230000]01    <1> 	mov byte [termcopyon], 1
  3307 0000290C 803D[EA230000]01    <1> 	cmp byte [termguion], 1
  3308 00002913 0F847A530000        <1> 	je near windowvideocopy
  3309                              <1> %endif
  3310 00002919 E9AE000000          <1> 	jmp nocopytermatall
  3311                              <1> nowincopy:
  3312 0000291E BE00000A00          <1> 	mov esi, 0xA0000
  3313 00002923 A1[39020000]        <1> 	mov eax, [basecache]
  3314 00002928 C1E004              <1> 	shl eax, 4
  3315 0000292B 29C6                <1> 	sub esi, eax
  3316 0000292D BF[76BC0300]        <1> 	mov edi, videobuf
  3317 00002932 31C9                <1> 	xor ecx, ecx
  3318 00002934 668B0D[EB250000]    <1> 	mov cx, [charxy]
  3319                              <1> nowincopy2:
  3320 0000293B 8B07                <1> 	mov eax, [edi]
  3321 0000293D 81C748D50000        <1> 	add edi, (videobuf2 - videobuf)
  3322 00002943 8B1F                <1> 	mov ebx, [edi]
  3323 00002945 8907                <1> 	mov [edi], eax
  3324 00002947 81EF48D50000        <1> 	sub edi, (videobuf2 - videobuf)
  3325 0000294D 81C702000000        <1> 	add edi, 2
  3326 00002953 39D8                <1> 	cmp eax, ebx
  3327 00002955 744B                <1> 	je nopresentwinfont
  3328 00002957 81EF02000000        <1> 	sub edi, 2
  3329 0000295D BD[188A0000]        <1> 	mov ebp, fonts
  3330 00002962 31C0                <1> 	xor eax, eax
  3331 00002964 668B07              <1> 	mov ax, [edi]
  3332 00002967 C1E004              <1> 	shl eax, 4
  3333 0000296A 01C5                <1> 	add ebp, eax
  3334 0000296C 81C702000000        <1> 	add edi, 2
  3335 00002972 668B1F              <1> 	mov bx, [edi]
  3336 00002975 31D2                <1> 	xor edx, edx
  3337 00002977 8A15[EB250000]      <1> 	mov dl, [charxy]
  3338 0000297D C1C110              <1> 	rol ecx, 16
  3339 00002980 B110                <1> 	mov cl, 16
  3340                              <1> nowinfont:
  3341 00002982 8A4500              <1> 	mov al, [ebp]
  3342 00002985 D0C8                <1> 	ror al, 1
  3343 00002987 80FB80              <1> 	cmp bl, 0x80
  3344 0000298A 7202                <1> 	jb notnotfont
  3345 0000298C F6D0                <1> 	not al
  3346                              <1> notnotfont:
  3347 0000298E 8806                <1> 	mov [esi], al
  3348 00002990 01D6                <1> 	add esi, edx
  3349 00002992 45                  <1> 	inc ebp
  3350 00002993 FEC9                <1> 	dec cl
  3351 00002995 80F900              <1> 	cmp cl, 0
  3352 00002998 75E8                <1> 	jne nowinfont
  3353 0000299A C1E204              <1> 	shl edx, 4
  3354 0000299D 29D6                <1> 	sub esi, edx
  3355 0000299F C1C110              <1> 	rol ecx, 16
  3356                              <1> nopresentwinfont:
  3357 000029A2 81C702000000        <1> 	add edi, 2
  3358 000029A8 46                  <1> 	inc esi
  3359 000029A9 FEC9                <1> 	dec cl
  3360 000029AB 80F900              <1> 	cmp cl, 0
  3361 000029AE 758B                <1> 	jne nowincopy2
  3362 000029B0 8A0D[EB250000]      <1> 	mov cl, [charxy]
  3363 000029B6 31D2                <1> 	xor edx, edx
  3364 000029B8 88CA                <1> 	mov dl, cl
  3365 000029BA 29D6                <1> 	sub esi, edx
  3366 000029BC C1E204              <1> 	shl edx, 4
  3367 000029BF 01D6                <1> 	add esi, edx
  3368 000029C1 FECD                <1> 	dec ch
  3369 000029C3 80FD00              <1> 	cmp ch, 0
  3370 000029C6 0F856FFFFFFF        <1> 	jne nowincopy2
  3371                              <1> nocopytermatall:
  3372 000029CC E802000000          <1> 	call switchtermcursor
  3373 000029D1 61                  <1> 	popa
  3374 000029D2 C3                  <1> 	ret
  3375                              <1> 	
  3376                              <1> switchtermcursor:
  3377 000029D3 8B3D[C8280000]      <1> 	mov edi, [termcursorpos]
  3378 000029D9 668B4702            <1> 	mov ax, [edi + 2]
  3379 000029DD 668B1F              <1> 	mov bx, [edi]
  3380 000029E0 663D8000            <1> 	cmp ax, 0x80
  3381 000029E4 7209                <1> 	jb movlargecursorterm
  3382 000029E6 66B80700            <1> 	mov ax, 7
  3383 000029EA E904000000          <1> 	jmp movedcursorterm
  3384                              <1> movlargecursorterm:
  3385 000029EF 66B8F000            <1> 	mov ax, 0xF0
  3386                              <1> movedcursorterm:
  3387 000029F3 66894702            <1> 	mov [edi + 2], ax
  3388 000029F7 6681FB0000          <1> 	cmp bx, 0
  3389 000029FC 7507                <1> 	jne fixednocursorterm
  3390 000029FE 66BB2000            <1> 	mov bx, ' '
  3391 00002A02 66891F              <1> 	mov [edi], bx
  3392                              <1> fixednocursorterm:
  3393 00002A05 C3                  <1> 	ret
  3394                              <1> %endif
  3395                                      %include "source/dosints.asm"
  3396                              <1> int20h:
  3397 00002A06 66B8004C            <1> mov ax, 0x4C00
  3398                              <1> int21h:
  3399                              <1> dostosolleros:
  3400 00002A0A 6650                <1> 	push ax
  3401 00002A0C 66B83000            <1> 	mov ax, NEW_DATA_SEL
  3402 00002A10 8ED8                <1> 	mov ds, ax
  3403 00002A12 8EC0                <1> 	mov es, ax
  3404 00002A14 8EE0                <1> 	mov fs, ax
  3405 00002A16 66B82000            <1> 	mov ax, SYS_DATA_SEL
  3406 00002A1A 8EE8                <1> 	mov gs, ax
  3407 00002A1C 6658                <1> 	pop ax
  3408 00002A1E 9C                  <1> 	pushf
  3409 00002A1F 60                  <1> 	pusha
  3410 00002A20 80FC01              <1> 	cmp ah, 1
  3411 00002A23 0F8449000000        <1> 	je near dosgchar
  3412 00002A29 80FC02              <1> 	cmp ah, 2
  3413 00002A2C 0F844A000000        <1> 	je near doswchar
  3414 00002A32 80FC09              <1> 	cmp ah, 9
  3415 00002A35 0F8451000000        <1> 	je near dosprintstr
  3416 00002A3B 80FC0A              <1> 	cmp ah, 0xA
  3417 00002A3E 0F8463000000        <1> 	je near dosgetstr
  3418 00002A44 80FC2B              <1> 	cmp ah, 0x2B
  3419 00002A47 0F84A2000000        <1> 	je near dosgetdate
  3420 00002A4D 80FC2C              <1> 	cmp ah, 0x2C
  3421 00002A50 0F84BC000000        <1> 	je near dosgettime
  3422 00002A56 80FC4C              <1> 	cmp ah, 0x4C
  3423 00002A59 0F84D1000000        <1> 	je near dosexit
  3424                              <1> backtodos:
  3425 00002A5F 61                  <1> 	popa
  3426 00002A60 9D                  <1> 	popf
  3427 00002A61 6650                <1> 	push ax
  3428 00002A63 66B85000            <1> 	mov ax, DOS_DATA_SEL
  3429 00002A67 8ED8                <1> 	mov ds, ax
  3430 00002A69 8EC0                <1> 	mov es, ax
  3431 00002A6B 8EE0                <1> 	mov fs, ax
  3432 00002A6D 8EE8                <1> 	mov gs, ax
  3433 00002A6F 6658                <1> 	pop ax
  3434 00002A71 CF                  <1> 	iret
  3435                              <1> 
  3436                              <1> dosgchar:
  3437 00002A72 E8E2F8FFFF          <1> 	call getchar
  3438 00002A77 E9E3FFFFFF          <1> 	jmp backtodos
  3439                              <1> 	
  3440                              <1> doswchar:
  3441 00002A7C 88D0                <1> 	mov al, dl
  3442 00002A7E 30E4                <1> 	xor ah, ah
  3443 00002A80 B307                <1> 	mov bl, 7
  3444 00002A82 E84EF9FFFF          <1> 	call prcharint
  3445 00002A87 E9D3FFFFFF          <1> 	jmp backtodos
  3446                              <1> 	
  3447                              <1> dosprintstr:
  3448 00002A8C 31F6                <1> 	xor esi, esi
  3449 00002A8E 6689D6              <1> 	mov si, dx
  3450 00002A91 81C600004000        <1> 	add esi, dosprogloc
  3451 00002A97 66B82400            <1> 	mov ax, "$"
  3452 00002A9B B307                <1> 	mov bl, 7
  3453 00002A9D E8A5F2FFFF          <1> 	call printint
  3454 00002AA2 E9B8FFFFFF          <1> 	jmp backtodos
  3455                              <1> 	
  3456                              <1> dosgetstr:
  3457 00002AA7 31F6                <1> 	xor esi, esi
  3458 00002AA9 6689D6              <1> 	mov si, dx
  3459 00002AAC 81C600004000        <1> 	add esi, dosprogloc
  3460 00002AB2 B900000000          <1> 	mov ecx, 0
  3461 00002AB7 8A0E                <1> 	mov cl, [esi]
  3462 00002AB9 81C602000000        <1> 	add esi, 2
  3463 00002ABF 89F7                <1> 	mov edi, esi
  3464 00002AC1 8935[EB2A0000]      <1> 	mov [stringstart], esi
  3465 00002AC7 01CF                <1> 	add edi, ecx
  3466 00002AC9 B00A                <1> 	mov al, 10
  3467 00002ACB B307                <1> 	mov bl, 7
  3468 00002ACD E8B8F3FFFF          <1> 	call rdprintdos
  3469 00002AD2 89F1                <1> 	mov ecx, esi
  3470 00002AD4 2B0D[EB2A0000]      <1> 	sub ecx, [stringstart]
  3471 00002ADA 8B35[EB2A0000]      <1> 	mov esi, [stringstart]
  3472 00002AE0 884EFF              <1> 	mov [esi - 1], cl
  3473 00002AE3 884EFE              <1> 	mov [esi - 2], cl
  3474 00002AE6 E974FFFFFF          <1> 	jmp backtodos
  3475 00002AEB 00000000            <1> stringstart dd 0
  3476                              <1> 
  3477                              <1> dosgetdate:
  3478 00002AEF E8E4150000          <1> 	call time
  3479 00002AF4 8A0D[EF430000]      <1> 	mov cl, [RTCtimeYear]
  3480 00002AFA B500                <1> 	mov ch, 0
  3481 00002AFC 6681C1D007          <1> 	add cx, 2000
  3482 00002B01 8A35[EE430000]      <1> 	mov dh, [RTCtimeMonth]
  3483 00002B07 8A15[ED430000]      <1> 	mov dl, [RTCtimeDay]
  3484 00002B0D E94DFFFFFF          <1> 	jmp backtodos
  3485                              <1> 
  3486                              <1> dosgettime:
  3487 00002B12 E8C1150000          <1> 	call time
  3488 00002B17 8A2D[EC430000]      <1> 	mov ch, [RTCtimeHour]
  3489 00002B1D 8A0D[EB430000]      <1> 	mov cl, [RTCtimeMinute]
  3490 00002B23 8A35[EA430000]      <1> 	mov dh, [RTCtimeSecond]
  3491 00002B29 B200                <1> 	mov dl, 0
  3492 00002B2B E92FFFFFFF          <1> 	jmp backtodos
  3493                              <1> 	
  3494                              <1> dosexit:
  3495 00002B30 BE[A9870000]        <1> 	mov esi, line
  3496 00002B35 E806F2FFFF          <1> 	call print
  3497 00002B3A 61                  <1> 	popa
  3498 00002B3B 9D                  <1> 	popf
  3499 00002B3C 8B25[E09E0300]      <1> 	mov esp, [previousstack]
  3500 00002B42 31DB                <1> 	xor ebx, ebx
  3501 00002B44 88C3                <1> 	mov bl, al
  3502 00002B46 80FB00              <1> 	cmp bl, 0
  3503 00002B49 0F857CF1FFFF        <1> 	jne near exitprog.error
  3504 00002B4F C3                  <1> 	ret
  3505                                      %include "source/solleros.asm"
  3506                              <1> 	;SOLLEROS.ASM
  3507                              <1> os:
  3508                              <1> setdefenv:
  3509 00002B50 B02F                <1> 	mov al, '/'
  3510 00002B52 A2[EC9E0300]        <1> 	mov [currentfolder], al
  3511 00002B57 B801000000          <1> 	mov eax, 1
  3512 00002B5C A3[E89E0300]        <1> 	mov [currentfolderloc], eax
  3513 00002B61 E88CF2FFFF          <1> 	call clear
  3514                              <1> 	
  3515                              <1> bootfilecheck:
  3516 00002B66 803D[F0A00300]01    <1> 	cmp byte [ranboot], 1
  3517 00002B6D 0F8421000000        <1> 	je near nobootfile
  3518                              <1> 	%ifdef hardware.automatic
  3519 00002B73 E849380000          <1> 		call initializelater ;Initialize components that have debug messages
  3520                              <1> 	%endif
  3521 00002B78 BF[68870000]        <1> 	mov edi, bootfilename
  3522 00002B7D BE00004000          <1> 	mov esi, 0x400000
  3523 00002B82 E8923C0000          <1> 	call loadfile
  3524 00002B87 81FA00000000        <1> 	cmp edx, 0
  3525 00002B8D 7505                <1> 	jne nobootfile
  3526 00002B8F E8450E0000          <1> 	call progbatchfound
  3527                              <1> nobootfile:	
  3528 00002B94 C605[F0A00300]01    <1> 	mov byte [ranboot], 1
  3529                              <1> 
  3530 00002B9B BE[03000000]        <1> 	mov esi, signature
  3531                              <1> .sigcopyloop:	;this prevents an odd error
  3532 00002BA0 658A06              <1> 	mov al, [gs:esi]
  3533 00002BA3 8806                <1> 	mov [esi], al
  3534 00002BA5 46                  <1> 	inc esi
  3535 00002BA6 81FE[11000000]      <1> 	cmp esi, signatureend
  3536 00002BAC 72F2                <1> 	jb .sigcopyloop
  3537                              <1> 	
  3538 00002BAE BE[03000000]        <1> 	mov esi, signature
  3539 00002BB3 E888F1FFFF          <1> 	call print
  3540 00002BB8 8B0D[0D000000]      <1> 	mov ecx, [signatureend - 4]
  3541 00002BBE E841070000          <1> 	call showdec
  3542 00002BC3 BE[A9870000]        <1> 	mov esi, line
  3543 00002BC8 E873F1FFFF          <1> 	call print
  3544 00002BCD BE[85870000]        <1> 	mov esi, userask
  3545 00002BD2 E869F1FFFF          <1> 	call print
  3546                              <1> usercheck:
  3547 00002BD7 BE[60B50300]        <1> 	mov esi, buftxt
  3548 00002BDC BF[60B90300]        <1> 	mov edi, buftxtend
  3549 00002BE1 B00A                <1> 	mov al, 10
  3550 00002BE3 E88EF2FFFF          <1> 	call rdprint
  3551 00002BE8 56                  <1> 	push esi
  3552 00002BE9 BE[8F870000]        <1> 	mov esi, pwdask
  3553 00002BEE E84DF1FFFF          <1> 	call print
  3554 00002BF3 5E                  <1> 	pop esi
  3555 00002BF4 46                  <1> 	inc esi
  3556 00002BF5 8935[F62C0000]      <1> 	mov [esipass], esi
  3557                              <1> passcheck:
  3558 00002BFB E859F7FFFF          <1> 	call getchar
  3559 00002C00 3C0A                <1> 	cmp al, 10
  3560 00002C02 0F843E000000        <1> 	je near gotpass
  3561 00002C08 3C08                <1> 	cmp al, 8
  3562 00002C0A 0F8415000000        <1> 	je near backpass
  3563 00002C10 8806                <1> 	mov [esi], al
  3564 00002C12 46                  <1> 	inc esi
  3565 00002C13 30E4                <1> 	xor ah, ah
  3566 00002C15 B02A                <1> 	mov al, "*"
  3567 00002C17 E8B9F7FFFF          <1> 	call prcharint
  3568 00002C1C E9DAFFFFFF          <1> 	jmp passcheck
  3569 00002C21 08200800            <1> backcursor2 db 8," ",8,0
  3570                              <1> backpass:
  3571 00002C25 3B35[F62C0000]      <1> 	cmp esi, [esipass]
  3572 00002C2B 0F84CAFFFFFF        <1> 	je near passcheck
  3573 00002C31 4E                  <1> 	dec esi
  3574 00002C32 C60600              <1> 	mov byte [esi], 0
  3575 00002C35 56                  <1> 	push esi
  3576 00002C36 BE[212C0000]        <1> 	mov esi, backcursor2
  3577 00002C3B E800F1FFFF          <1> 	call print
  3578 00002C40 5E                  <1> 	pop esi
  3579 00002C41 E9B5FFFFFF          <1> 	jmp passcheck
  3580                              <1> gotpass:
  3581 00002C46 B00A                <1> 	mov al, 10
  3582 00002C48 E888F7FFFF          <1> 	call prcharint
  3583 00002C4D 30C0                <1> 	xor al, al
  3584 00002C4F 31C9                <1> 	xor ecx, ecx
  3585 00002C51 8806                <1> 	mov [esi], al
  3586 00002C53 BB[AB870000]        <1> 	mov ebx, userlst
  3587                              <1> userfind:
  3588 00002C58 BE[60B50300]        <1> 	mov esi, buftxt
  3589 00002C5D 8A06                <1> 	mov al, [esi]
  3590 00002C5F 3C00                <1> 	cmp al, 0
  3591 00002C61 0F84E9FEFFFF        <1> 	je near os
  3592 00002C67 891D[FA2C0000]      <1> 	mov [usercache], ebx
  3593 00002C6D E87E030000          <1> 	call tester
  3594 00002C72 3C01                <1> 	cmp al, 1
  3595 00002C74 7419                <1> 	je pwdtest
  3596 00002C76 41                  <1> 	inc ecx
  3597                              <1> nxtuser:
  3598 00002C77 8A03                <1> 	mov al, [ebx]
  3599 00002C79 43                  <1> 	inc ebx
  3600 00002C7A 3C00                <1> 	cmp al, 0
  3601 00002C7C 75F9                <1> 	jne nxtuser
  3602 00002C7E 81FB[CE870000]      <1> 	cmp ebx, userlstend
  3603 00002C84 0F83C6FEFFFF        <1> 	jae near os
  3604 00002C8A E9C9FFFFFF          <1> 	jmp userfind
  3605                              <1> pwdtest:
  3606 00002C8F 46                  <1> 	inc esi
  3607 00002C90 43                  <1> 	inc ebx
  3608 00002C91 E85A030000          <1> 	call tester
  3609 00002C96 3C01                <1> 	cmp al, 1
  3610 00002C98 7405                <1> 	je pwdrgt
  3611 00002C9A E9D8FFFFFF          <1> 	jmp nxtuser
  3612                              <1> pwdrgt:
  3613 00002C9F D1E9                <1> 	shr ecx, 1
  3614 00002CA1 890D[ECA00300]      <1> 	mov [uid], ecx
  3615 00002CA7 E846F1FFFF          <1> 	call clear
  3616 00002CAC 31C9                <1> 	xor ecx, ecx
  3617 00002CAE 41                  <1> 	inc ecx
  3618 00002CAF 890D[0A670500]      <1> 	mov [commandbufpos], ecx
  3619                              <1> returnfromexp:
  3620 00002CB5 66B90002            <1> 	mov cx, 200h
  3621 00002CB9 BE[60B50300]        <1> 	mov esi, buftxt
  3622 00002CBE 8935[EC2F0000]      <1> 	mov [currentcommandloc], esi
  3623 00002CC4 E825000000          <1> 	call bufclr
  3624                              <1> clearolddata:
  3625 00002CC9 31C0                <1> 	xor eax, eax
  3626 00002CCB A2[F1A00300]        <1> 	mov [IFON], al
  3627 00002CD0 A2[F2A00300]        <1> 	mov [IFTRUE], al
  3628 00002CD5 A2[5AA10300]        <1> 	mov [BATCHISON], al
  3629 00002CDA A3[56A10300]        <1> 	mov [BATCHPOS], eax
  3630 00002CDF A2[5BA10300]        <1> 	mov [LOOPON], al
  3631 00002CE4 A3[5CA10300]        <1> 	mov [LOOPPOS], eax
  3632 00002CE9 E939000000          <1> 	jmp nwcmd
  3633                              <1> bufclr:	
  3634 00002CEE 30C0                <1> 	xor al, al
  3635 00002CF0 8806                <1> 	mov [esi], al
  3636 00002CF2 46                  <1> 	inc esi
  3637 00002CF3 E2F9                <1> 	loop bufclr
  3638 00002CF5 C3                  <1> 	ret
  3639                              <1> 
  3640 00002CF6 00000000            <1> esipass dd 0
  3641 00002CFA [AB870000]          <1> usercache dd userlst
  3642                              <1> 	
  3643                              <1> buftxtclear:
  3644 00002CFE 30C0                <1> 	xor al, al
  3645 00002D00 BE[60B50300]        <1> 	mov esi, buftxt
  3646 00002D05 81FE[60B90300]      <1> clearbuftxt: cmp esi, buf2
  3647 00002D0B 7314                <1> 	jae retbufclr
  3648 00002D0D 8806                <1> 	mov [esi], al
  3649 00002D0F 46                  <1> 	inc esi
  3650 00002D10 E9F0FFFFFF          <1> 	jmp clearbuftxt
  3651                              <1> 
  3652 00002D15 39DE                <1> clearitbuf: cmp esi, ebx
  3653 00002D17 7308                <1> 	jae retbufclr
  3654 00002D19 8806                <1> 	mov [esi], al
  3655 00002D1B 46                  <1> 	inc esi
  3656 00002D1C E9F4FFFFFF          <1> 	jmp clearitbuf
  3657 00002D21 C3                  <1> retbufclr: ret
  3658                              <1> 
  3659 00002D22 E900000000          <1> full:	jmp nwcmd
  3660                              <1> 
  3661                              <1> shush:	;SollerOS Hardly Unix-compatible Shell
  3662                              <1> nwcmd:
  3663 00002D27 FB                  <1> 	sti
  3664 00002D28 31C0                <1> 	xor eax, eax
  3665 00002D2A 3905[082F0000]      <1> 	cmp [nextcommandloc], eax
  3666 00002D30 7416                <1> 	je nomultiplecommand
  3667 00002D32 8B35[082F0000]      <1> 	mov esi, [nextcommandloc]
  3668 00002D38 8935[0C2F0000]      <1> 	mov [thiscommandloc], esi
  3669 00002D3E E8D2010000          <1> 	call fixvariables
  3670 00002D43 E9DFFFFFFF          <1> 	jmp nwcmd
  3671                              <1> nomultiplecommand:
  3672 00002D48 A3[0C2F0000]        <1> 	mov [thiscommandloc], eax
  3673 00002D4D 3805[DE690000]      <1> 	cmp [threadson], al
  3674 00002D53 7405                <1> 	je noclinwcmd
  3675 00002D55 A2[DE690000]        <1> 	mov [threadson], al
  3676                              <1> noclinwcmd:
  3677 00002D5A B001                <1> 	mov al, 1
  3678 00002D5C 3805[5AA10300]      <1> 	cmp [BATCHISON], al
  3679 00002D62 7501                <1> 	jne cancel
  3680 00002D64 C3                  <1> 	ret
  3681 00002D65 30C0                <1> cancel:	xor al, al
  3682 00002D67 A2[F1A00300]        <1> 	mov [IFON], al
  3683 00002D6C A2[5AA10300]        <1> 	mov [BATCHISON], al
  3684 00002D71 B05B                <1> 	mov al, '['
  3685 00002D73 66BB0700            <1> 	mov bx, 7
  3686 00002D77 E870F6FFFF          <1> 	call prcharq
  3687 00002D7C 8B35[FA2C0000]      <1> 	mov esi, [usercache]
  3688 00002D82 E89AEFFFFF          <1> 	call printquiet
  3689 00002D87 BE[99870000]        <1> 	mov esi, computer
  3690 00002D8C E890EFFFFF          <1> 	call printquiet
  3691 00002D91 BE[EC9E0300]        <1> 	mov esi, currentfolder
  3692 00002D96 0335[E49E0300]      <1> 	add esi, [lastfolderloc]
  3693 00002D9C E880EFFFFF          <1> 	call printquiet
  3694 00002DA1 BE[A4870000]        <1> 	mov esi, endprompt
  3695 00002DA6 E895EFFFFF          <1> 	call print
  3696 00002DAB E84EFFFFFF          <1> 	call buftxtclear
  3697 00002DB0 BE[60B50300]        <1> 	mov esi, buftxt
  3698 00002DB5 C605[42230000]01    <1> 	mov byte [commandedit], 1
  3699 00002DBC B00A                <1> 	mov al, 10
  3700 00002DBE 66BB0700            <1> 	mov bx, 7
  3701 00002DC2 BF[60B90300]        <1> 	mov edi, buftxtend
  3702 00002DC7 E8AAF0FFFF          <1> 	call rdprint
  3703 00002DCC C605[42230000]00    <1> 	mov byte [commandedit], 0
  3704 00002DD3 803D[60B50300]00    <1> 	cmp byte [buftxt], 0
  3705 00002DDA 0F8447FFFFFF        <1> 	je near nwcmd
  3706 00002DE0 8B35[0A670500]      <1> gotcmd:	mov esi, [commandbufpos]
  3707 00002DE6 8935[06670500]      <1> 	mov [lastcommandpos], esi
  3708 00002DEC FF05[12670500]      <1> 	inc dword [commandsentered]
  3709 00002DF2 BF[60B50300]        <1> 	mov edi, buftxt
  3710 00002DF7 81C6[16670500]      <1> 	add esi, commandbuf
  3711 00002DFD 81FE[16770500]      <1> 	cmp esi, commandbufend
  3712 00002E03 7605                <1> 	jbe copycommand
  3713 00002E05 BE[16670500]        <1> 	mov esi, commandbuf
  3714                              <1> copycommand:
  3715 00002E0A 8A07                <1> 	mov al, [edi]
  3716 00002E0C 8806                <1> 	mov [esi], al
  3717 00002E0E 47                  <1> 	inc edi
  3718 00002E0F 46                  <1> 	inc esi
  3719 00002E10 3C00                <1> 	cmp al, 0
  3720 00002E12 7412                <1> 	je donecopy
  3721 00002E14 81FE[16770500]      <1> 	cmp esi, commandbufend
  3722 00002E1A 76EE                <1> 	jbe copycommand
  3723 00002E1C BE[16670500]        <1> 	mov esi, commandbuf
  3724 00002E21 E9E4FFFFFF          <1> 	jmp copycommand
  3725                              <1> donecopy:
  3726 00002E26 81EE[16670500]      <1> 	sub esi, commandbuf
  3727 00002E2C 8935[0A670500]      <1> 	mov [commandbufpos], esi
  3728 00002E32 E8D9000000          <1> 	call run
  3729 00002E37 E9EBFEFFFF          <1> 	jmp nwcmd
  3730                              <1> 
  3731 00002E3C E8BDFEFFFF          <1> input:	call buftxtclear
  3732 00002E41 BE[60B50300]        <1> 	mov esi, buftxt		;puts input into buftxt AND onto screen
  3733 00002E46 BF[60B90300]        <1> 	mov edi, buftxtend
  3734 00002E4B B00A                <1> stdin:	mov al, 10
  3735 00002E4D B307                <1> 	mov bl, 7
  3736 00002E4F E822F0FFFF          <1> 	call rdprint
  3737 00002E54 C3                  <1> 	ret
  3738                              <1> 
  3739                              <1> replacevariable:
  3740 00002E55 8A4601              <1> 	mov al, [esi + 1]
  3741 00002E58 C64601FF            <1> 	mov byte [esi + 1], 255
  3742 00002E5C 3C24                <1> 	cmp al, "$"
  3743 00002E5E 0F84B1000000        <1> 	je near fixvariables
  3744 00002E64 884601              <1> 	mov [esi + 1], al
  3745 00002E67 56                  <1> 	push esi
  3746 00002E68 81EE[60B50300]      <1> 	sub esi, buftxt
  3747 00002E6E 89F7                <1> 	mov edi, esi
  3748 00002E70 81C6[60B50300]      <1> 	add esi, buftxt
  3749 00002E76 47                  <1> 	inc edi
  3750 00002E77 BB[60A10300]        <1> 	mov ebx, variables
  3751 00002E7C E889170000          <1> 	call nxtvrech
  3752 00002E81 89F7                <1> 	mov edi, esi
  3753 00002E83 31DB                <1> 	xor ebx, ebx
  3754 00002E85 4E                  <1> 	dec esi
  3755                              <1> findvarname:
  3756 00002E86 4E                  <1> 	dec esi
  3757 00002E87 8A06                <1> 	mov al, [esi]
  3758 00002E89 43                  <1> 	inc ebx
  3759 00002E8A 3C04                <1> 	cmp al, 4
  3760 00002E8C 75F8                <1> 	jne findvarname
  3761 00002E8E 5E                  <1> 	pop esi
  3762                              <1> replacevarloop:
  3763 00002E8F 8A07                <1> 	mov al, [edi]
  3764 00002E91 3C00                <1> 	cmp al, 0
  3765 00002E93 0F8416000000        <1> 	je near compressbuftxt
  3766 00002E99 81FB00000000        <1> 	cmp ebx, 0
  3767 00002E9F 0F8419000000        <1> 	je near expandbuftxt
  3768 00002EA5 8806                <1> 	mov [esi], al
  3769 00002EA7 4B                  <1> 	dec ebx
  3770 00002EA8 46                  <1> 	inc esi
  3771 00002EA9 47                  <1> 	inc edi
  3772 00002EAA E9E0FFFFFF          <1> 	jmp replacevarloop
  3773                              <1> compressbuftxt:
  3774 00002EAF 8A041E              <1> 	mov al, [esi + ebx]
  3775 00002EB2 8806                <1> 	mov [esi], al
  3776 00002EB4 46                  <1> 	inc esi
  3777 00002EB5 3C00                <1> 	cmp al, 0
  3778 00002EB7 75F6                <1> 	jne compressbuftxt
  3779 00002EB9 E957000000          <1> 	jmp fixvariables
  3780                              <1> expandbuftxt:
  3781 00002EBE 89F1                <1> 	mov ecx, esi
  3782 00002EC0 8A26                <1> 	mov ah, [esi]
  3783                              <1> expandbuftxtlp:
  3784 00002EC2 8A1E                <1> 	mov bl, [esi]
  3785 00002EC4 46                  <1> 	inc esi
  3786 00002EC5 8A3E                <1> 	mov bh, [esi]
  3787 00002EC7 8826                <1> 	mov [esi], ah
  3788 00002EC9 88FC                <1> 	mov ah, bh
  3789 00002ECB 80FB00              <1> 	cmp bl, 0
  3790 00002ECE 75F2                <1> 	jne expandbuftxtlp
  3791 00002ED0 89CE                <1> 	mov esi, ecx
  3792 00002ED2 8806                <1> 	mov [esi], al
  3793 00002ED4 47                  <1> 	inc edi
  3794 00002ED5 8A07                <1> 	mov al, [edi]
  3795 00002ED7 3C00                <1> 	cmp al, 0
  3796 00002ED9 0F8436000000        <1> 	je near fixvariables
  3797 00002EDF 46                  <1> 	inc esi
  3798 00002EE0 E9D9FFFFFF          <1> 	jmp expandbuftxt
  3799                              <1> multipleprogline:
  3800 00002EE5 30E4                <1> 	xor ah, ah
  3801 00002EE7 8826                <1> 	mov [esi], ah
  3802 00002EE9 46                  <1> 	inc esi
  3803 00002EEA 8935[082F0000]      <1> 	mov [nextcommandloc], esi
  3804 00002EF0 E93E000000          <1> 	jmp donefixvariables
  3805                              <1> inlinecomment:	;if the following char is #, include a #, otherwise end the line
  3806 00002EF5 46                  <1> 	inc esi
  3807 00002EF6 8A06                <1> 	mov al, [esi]
  3808 00002EF8 C606FF              <1> 	mov byte [esi], 255
  3809 00002EFB 3C23                <1> 	cmp al, '#'
  3810 00002EFD 7416                <1> 	je fixvariables
  3811 00002EFF 4E                  <1> 	dec esi
  3812 00002F00 C60600              <1> 	mov byte [esi], 0
  3813 00002F03 E90D000000          <1> 	jmp fixvariables
  3814                              <1> 	
  3815 00002F08 00000000            <1> nextcommandloc dd 0
  3816 00002F0C 00000000            <1> thiscommandloc dd 0	
  3817                              <1> run:
  3818 00002F10 BE[60B50300]        <1> 	mov esi, buftxt
  3819 00002F15 46                  <1> fixvariables:	inc esi
  3820 00002F16 8A06                <1> 	mov al, [esi]
  3821 00002F18 3C23                <1> 	cmp al, '#'	;inline comment
  3822 00002F1A 74D9                <1> 	je inlinecomment
  3823 00002F1C 3C24                <1> 	cmp al, '$' ;variable
  3824 00002F1E 0F8431FFFFFF        <1> 	je near replacevariable
  3825 00002F24 3C3B                <1> 	cmp al, ';' ;program list
  3826 00002F26 74BD                <1> 	je multipleprogline
  3827 00002F28 3C00                <1> 	cmp al, 0
  3828 00002F2A 75E9                <1> 	jne fixvariables
  3829 00002F2C 31C0                <1> 	xor eax, eax
  3830 00002F2E A3[082F0000]        <1> 	mov [nextcommandloc], eax
  3831                              <1> donefixvariables:
  3832 00002F33 803D[13350000]00    <1> 	cmp byte [indexdone], 0
  3833 00002F3A 7505                <1> 	jne progtest
  3834 00002F3C E834050000          <1> 	call indexfiles
  3835                              <1> progtest:
  3836 00002F41 31C0                <1> 	xor eax, eax
  3837 00002F43 BB[E09A0300]        <1> 	mov ebx, fileindex
  3838 00002F48 668B03              <1> prgnxt:	mov ax, [ebx]
  3839 00002F4B B1FF                <1> 	mov cl, 255
  3840 00002F4D B52C                <1> 	mov ch, 44
  3841 00002F4F 6639C8              <1> 	cmp ax, cx
  3842 00002F52 740E                <1> 	je fndprg
  3843 00002F54 43                  <1> 	inc ebx
  3844 00002F55 81FB[E09E0300]      <1> 	cmp ebx, fileindexend
  3845 00002F5B 7363                <1> 	jae prgnf
  3846 00002F5D E9E6FFFFFF          <1> 	jmp prgnxt
  3847 00002F62 81C302000000        <1> fndprg: add ebx, 2
  3848 00002F68 31C9                <1> 	xor ecx, ecx
  3849 00002F6A BE[60B50300]        <1> 	mov esi, buftxt
  3850 00002F6F 390D[0C2F0000]      <1> 	cmp [thiscommandloc], ecx
  3851 00002F75 7406                <1> 	je noprgtstmultiple
  3852 00002F77 8B35[0C2F0000]      <1> 	mov esi, [thiscommandloc]
  3853                              <1> noprgtstmultiple:
  3854 00002F7D E8AF000000          <1> 	call cndtest
  3855 00002F82 3C01                <1> 	cmp al, 1
  3856 00002F84 7305                <1> 	jae prggood
  3857 00002F86 E9BDFFFFFF          <1> 	jmp prgnxt
  3858 00002F8B 81FB[E09E0300]      <1> prggood: cmp ebx, fileindexend
  3859 00002F91 7358                <1> 	jae prgdn
  3860 00002F93 31C0                <1> 	xor eax, eax
  3861 00002F95 BE[60B50300]        <1> 	mov esi, buftxt
  3862 00002F9A 3905[0C2F0000]      <1> 	cmp [thiscommandloc], eax
  3863 00002FA0 7406                <1> 	je noprggoodmul
  3864 00002FA2 8B35[0C2F0000]      <1> 	mov esi, [thiscommandloc]
  3865                              <1> noprggoodmul:
  3866 00002FA8 8935[EC2F0000]      <1> 	mov [currentcommandloc], esi
  3867 00002FAE 81C303000000        <1> 	add ebx, 3
  3868 00002FB4 8B3B                <1> 	mov edi, [ebx]
  3869 00002FB6 C605[DE690000]02    <1> 	mov byte [threadson], 2
  3870 00002FBD FFD7                <1> 	call edi
  3871 00002FBF C3                  <1> 	ret
  3872                              <1> prgnf:	
  3873 00002FC0 8B35[EC2F0000]      <1> 	mov esi, [currentcommandloc]
  3874 00002FC6 8A06                <1> 	mov al, [esi]
  3875 00002FC8 3C00                <1> 	cmp al, 0
  3876 00002FCA 741F                <1> 	je prgdn
  3877 00002FCC BE[70870000]        <1> 	mov esi, notfound1
  3878 00002FD1 E86AEDFFFF          <1> 	call print
  3879 00002FD6 8B35[EC2F0000]      <1> 	mov esi, [currentcommandloc]
  3880 00002FDC E85FEDFFFF          <1> 	call print
  3881 00002FE1 BE[78870000]        <1> 	mov esi, notfound2
  3882 00002FE6 E855EDFFFF          <1> 	call print
  3883 00002FEB C3                  <1> prgdn:	ret
  3884                              <1> 
  3885 00002FEC 00000000            <1> currentcommandloc dd 0
  3886                              <1> 
  3887                              <1> tester:			;si=user bx=prog returns 1 in al if true
  3888 00002FF0 6631C0              <1> 	xor ax, ax
  3889 00002FF3 8A06                <1> retest:	mov al, [esi]
  3890 00002FF5 8A23                <1> 	mov ah, [ebx]
  3891 00002FF7 3C00                <1> 	cmp al, 0
  3892 00002FF9 740B                <1> 	je testtrue
  3893 00002FFB 38E0                <1> 	cmp al, ah
  3894 00002FFD 750F                <1> 	jne testfalse
  3895 00002FFF 43                  <1> 	inc ebx
  3896 00003000 46                  <1> 	inc esi
  3897 00003001 E9EDFFFFFF          <1> 	jmp retest
  3898                              <1> testtrue:
  3899 00003006 80FC00              <1> 	cmp ah, 0
  3900 00003009 7503                <1> 	jne testfalse
  3901 0000300B B001                <1> 	mov al, 1
  3902 0000300D C3                  <1> 	ret
  3903                              <1> testfalse:
  3904 0000300E 30C0                <1> 	xor al, al
  3905 00003010 C3                  <1> 	ret
  3906                              <1> 
  3907                              <1> optest:			;si=user bx=prog returns 1 in al if true
  3908 00003011 30C0                <1> 	xor al, al
  3909                              <1> opretest:
  3910 00003013 8A06                <1> 	mov al, [esi]
  3911 00003015 8A23                <1> 	mov ah, [ebx]
  3912 00003017 38E0                <1> 	cmp al, ah
  3913 00003019 7513                <1> 	jne optestfalse
  3914 0000301B 80FC00              <1> 	cmp ah, 0
  3915 0000301E 7407                <1> 	je optesttrue
  3916 00003020 43                  <1> 	inc ebx
  3917 00003021 46                  <1> 	inc esi
  3918 00003022 E9ECFFFFFF          <1> 	jmp opretest
  3919                              <1> optesttrue:
  3920 00003027 3C00                <1> 	cmp al, 0
  3921 00003029 7503                <1> 	jne optestfalse
  3922 0000302B B001                <1> 	mov al, 1
  3923 0000302D C3                  <1> 	ret
  3924                              <1> optestfalse:
  3925 0000302E 30C0                <1> 	xor al, al
  3926 00003030 C3                  <1> 	ret
  3927                              <1> 
  3928                              <1> cndtest:			;si=user bx=prog cl=endchar returns 1 in al if true
  3929 00003031 30C0                <1> 	xor al, al
  3930 00003033 8A06                <1> cndretest:	mov al, [esi]
  3931 00003035 8A23                <1> 	mov ah, [ebx]
  3932 00003037 38CC                <1> 	cmp ah, cl
  3933 00003039 740B                <1> 	je cndtesttrue
  3934 0000303B 38E0                <1> 	cmp al, ah
  3935 0000303D 750E                <1> 	jne cndtestfalse
  3936 0000303F 43                  <1> 	inc ebx
  3937 00003040 46                  <1> 	inc esi
  3938 00003041 E9EDFFFFFF          <1> 	jmp cndretest
  3939                              <1> cndtesttrue:
  3940 00003046 38C8                <1> 	cmp al, cl
  3941 00003048 7506                <1> 	jne cndtestalmost
  3942 0000304A B001                <1> 	mov al, 1
  3943 0000304C C3                  <1> 	ret
  3944                              <1> cndtestfalse:
  3945 0000304D 30C0                <1> 	xor al, al
  3946 0000304F C3                  <1> 	ret
  3947                              <1> cndtestalmost:
  3948 00003050 B002                <1> 	mov al, 2
  3949 00003052 C3                  <1> 	ret
  3950                              <1> 	
  3951                              <1> array:				;arraystart in si, arrayend in bx, arrayseperator in cx
  3952                              <1> 		                ;ends if array seperator is found backwards after 0
  3953                              <1> 	arnxt:	      
  3954 00003053 88E8                <1> 		mov al, ch
  3955 00003055 88CC                <1> 		mov ah, cl        
  3956 00003057 663906              <1> 		cmp [esi], ax
  3957 0000305A 7453                <1> 		je ardn
  3958 0000305C 66390E              <1> 		cmp [esi], cx
  3959 0000305F 740A                <1> 		je arfnd
  3960 00003061 46                  <1> 		inc esi
  3961 00003062 39DE                <1> 		cmp esi, ebx
  3962 00003064 7349                <1> 		jae ardn
  3963 00003066 E9E8FFFFFF          <1> 		jmp arnxt
  3964 0000306B 81C602000000        <1> 	arfnd: add esi, 2
  3965 00003071 891D[B0300000]      <1> 		mov [arbx], ebx
  3966 00003077 890D[B4300000]      <1> 		mov [arcx], ecx
  3967 0000307D E8BEECFFFF          <1> 		call print
  3968 00003082 8935[B6300000]      <1> 		mov [arsi], esi
  3969 00003088 BE[A9870000]        <1> 		mov esi, line
  3970 0000308D E8AEECFFFF          <1> 		call print
  3971 00003092 8B1D[B0300000]      <1> 		mov ebx, [arbx]
  3972 00003098 668B0D[B4300000]    <1> 		mov cx, [arcx]
  3973 0000309F 8B35[B6300000]      <1> 		mov esi, [arsi]
  3974 000030A5 46                  <1> 		inc esi
  3975 000030A6 39DE                <1> 		cmp esi, ebx
  3976 000030A8 7305                <1> 		jae ardn
  3977 000030AA E9A4FFFFFF          <1> 		jmp arnxt
  3978 000030AF C3                  <1> 	ardn:	ret
  3979 000030B0 00000000            <1> arbx:	dw 0,0
  3980 000030B4 0000                <1> arcx:	db 0,0
  3981 000030B6 00000000            <1> arsi:	dw 0,0
  3982                              <1> 
  3983                              <1> clearbuffer:
  3984 000030BA BE[60B90300]        <1> 	mov esi, buf2
  3985 000030BF B030                <1> 	mov al, '0'
  3986 000030C1 81FE[74B90300]      <1> clearbuf: cmp esi, numbuf
  3987 000030C7 7308                <1> 	jae doneclearbuff
  3988 000030C9 8806                <1> 	mov [esi], al
  3989 000030CB 46                  <1> 	inc esi
  3990 000030CC E9F0FFFFFF          <1> 	jmp clearbuf
  3991                              <1> doneclearbuff: 
  3992 000030D1 C3                  <1> 		ret
  3993                              <1> 
  3994                              <1> convert:
  3995 000030D2 4E                  <1> 	dec esi
  3996 000030D3 89F3                <1> 	mov ebx, esi		;place to convert into must be in esi, number to convert must be in ecx
  3997                              <1> .lp:
  3998 000030D5 89DE                <1> 	mov esi, ebx
  3999 000030D7 81EE09000000        <1> 	sub esi, 9
  4000 000030DD 81F900CA9A3B        <1> 	cmp ecx, 1000000000
  4001 000030E3 720D                <1> 	jb .8
  4002 000030E5 81E900CA9A3B        <1> 	sub ecx, 1000000000
  4003 000030EB FE06                <1> 	inc byte [esi]
  4004 000030ED E9E3FFFFFF          <1> 	jmp .lp
  4005 000030F2 46                  <1> .8:	inc esi
  4006 000030F3 81F900E1F505        <1> 	cmp ecx, 100000000
  4007 000030F9 720D                <1> 	jb .7
  4008 000030FB 81E900E1F505        <1> 	sub ecx, 100000000
  4009 00003101 FE06                <1> 	inc byte [esi]
  4010 00003103 E9CDFFFFFF          <1> 	jmp .lp
  4011 00003108 46                  <1> .7:	inc esi
  4012 00003109 81F980969800        <1> 	cmp ecx, 10000000
  4013 0000310F 720D                <1> 	jb .6
  4014 00003111 81E980969800        <1> 	sub ecx, 10000000
  4015 00003117 FE06                <1> 	inc byte [esi]
  4016 00003119 E9B7FFFFFF          <1> 	jmp .lp
  4017 0000311E 46                  <1> .6:	inc esi
  4018 0000311F 81F940420F00        <1> 	cmp ecx, 1000000
  4019 00003125 720D                <1> 	jb .5
  4020 00003127 81E940420F00        <1> 	sub ecx, 1000000
  4021 0000312D FE06                <1> 	inc byte [esi]
  4022 0000312F E9A1FFFFFF          <1> 	jmp .lp
  4023 00003134 46                  <1> .5:	inc esi
  4024 00003135 81F9A0860100        <1> 	cmp ecx, 100000
  4025 0000313B 720D                <1> 	jb .4
  4026 0000313D 81E9A0860100        <1> 	sub ecx, 100000
  4027 00003143 FE06                <1> 	inc byte [esi]
  4028 00003145 E98BFFFFFF          <1> 	jmp .lp
  4029 0000314A 46                  <1> .4:	inc esi
  4030 0000314B 81F910270000        <1> 	cmp ecx, 10000
  4031 00003151 720D                <1> 	jb .3
  4032 00003153 81E910270000        <1> 	sub ecx, 10000
  4033 00003159 FE06                <1> 	inc byte [esi]
  4034 0000315B E975FFFFFF          <1> 	jmp .lp
  4035 00003160 46                  <1> .3:	inc esi
  4036 00003161 81F9E8030000        <1> 	cmp ecx, 1000
  4037 00003167 720D                <1> 	jb .2
  4038 00003169 81E9E8030000        <1> 	sub ecx, 1000
  4039 0000316F FE06                <1> 	inc byte [esi]
  4040 00003171 E95FFFFFFF          <1> 	jmp .lp
  4041 00003176 46                  <1> .2:	inc esi
  4042 00003177 81F964000000        <1> 	cmp ecx, 100
  4043 0000317D 720D                <1> 	jb .1
  4044 0000317F 81E964000000        <1> 	sub ecx, 100
  4045 00003185 FE06                <1> 	inc byte [esi]
  4046 00003187 E949FFFFFF          <1> 	jmp .lp
  4047 0000318C 46                  <1> .1:	inc esi
  4048 0000318D 81F90A000000        <1> 	cmp ecx, 10
  4049 00003193 720D                <1> 	jb .0
  4050 00003195 81E90A000000        <1> 	sub ecx, 10
  4051 0000319B FE06                <1> 	inc byte [esi]
  4052 0000319D E933FFFFFF          <1> 	jmp .lp
  4053 000031A2 46                  <1> .0:	inc esi
  4054 000031A3 81F901000000        <1> 	cmp ecx, 1
  4055 000031A9 720D                <1> 	jb .dn
  4056 000031AB 81E901000000        <1> 	sub ecx, 1
  4057 000031B1 FE06                <1> 	inc byte [esi]
  4058 000031B3 E91DFFFFFF          <1> 	jmp .lp
  4059                              <1> .dn:
  4060 000031B8 C3                  <1> 	ret
  4061                              <1> 
  4062                              <1> 	
  4063                              <1> 
  4064 000031B9 00<rept>            <1> hexnumber times 8 db 0
  4065 000031C1 202000              <1> hexnumberend db "  ",0
  4066                              <1> 
  4067                              <1> converthex:
  4068                              <1> .clear:	;place to convert to in esi, end of buffer in edi number in ecx
  4069 000031C4 56                  <1> 	push esi
  4070 000031C5 B030                <1> 	mov al, "0"
  4071 000031C7 39FE                <1> .clearlp: cmp esi, edi
  4072 000031C9 7308                <1> 	jae .doneclear
  4073 000031CB 8806                <1> 	mov [esi], al
  4074 000031CD 46                  <1> 	inc esi
  4075 000031CE E9F4FFFFFF          <1> 	jmp .clearlp
  4076                              <1> .doneclear:
  4077 000031D3 81EE02000000        <1> 	sub esi, 2
  4078 000031D9 89C8                <1> 	mov eax, ecx
  4079                              <1> .loop:
  4080 000031DB 30FF                <1> 	xor bh, bh
  4081 000031DD 88C3                <1> 	mov bl, al
  4082 000031DF 66C1E304            <1> 	shl bx, 4
  4083 000031E3 C0EB04              <1> 	shr bl, 4
  4084 000031E6 86DF                <1> 	xchg bl, bh ;they are backwards
  4085 000031E8 80C330              <1> 	add bl, 48
  4086 000031EB 80FB39              <1> 	cmp bl, "9"
  4087 000031EE 7609                <1> 	jbe .goodbl
  4088 000031F0 80EB30              <1> 	sub bl, 48
  4089 000031F3 80EB0A              <1> 	sub bl, 0xA
  4090 000031F6 80C341              <1> 	add bl, "A"
  4091                              <1> .goodbl:
  4092 000031F9 80C730              <1> 	add bh, 48
  4093 000031FC 80FF39              <1> 	cmp bh, "9"
  4094 000031FF 7609                <1> 	jbe .goodbh
  4095 00003201 80EF30              <1> 	sub bh, 48
  4096 00003204 80EF0A              <1> 	sub bh, 0xA
  4097 00003207 80C741              <1> 	add bh, "A"
  4098                              <1> .goodbh:
  4099 0000320A C1E808              <1> 	shr eax, 8
  4100 0000320D 66891E              <1> 	mov [esi], bx
  4101 00003210 81EE02000000        <1> 	sub esi, 2
  4102 00003216 3B3424              <1> 	cmp esi, [esp]
  4103 00003219 7207                <1> 	jb .done
  4104 0000321B 3D00000000          <1> 	cmp eax, 0
  4105 00003220 75B9                <1> 	jne .loop
  4106                              <1> .done:
  4107 00003222 5E                  <1> 	pop esi
  4108 00003223 C3                  <1> 	ret
  4109                              <1> 	
  4110                              <1> 	
  4111 00003224 00                  <1> smallhex db 0
  4112 00003225 01                  <1> firsthexshown db 1
  4113                              <1> showhexsmall:
  4114 00003226 C605[24320000]01    <1> 	mov byte [smallhex], 1
  4115 0000322D E808000000          <1> 	call showhex
  4116 00003232 C605[24320000]00    <1> 	mov byte [smallhex], 0
  4117 00003239 C3                  <1> 	ret
  4118                              <1> showhex:
  4119 0000323A 60                  <1> 	pusha
  4120 0000323B BE[B9310000]        <1> 	mov esi, hexnumber
  4121 00003240 BF[C1310000]        <1> 	mov edi, hexnumberend
  4122 00003245 E87AFFFFFF          <1> 	call converthex
  4123 0000324A 803D[25320000]01    <1> 	cmp byte [firsthexshown], 1
  4124 00003251 7503                <1> 	jne .show
  4125 00003253 6631D2              <1> 	xor dx, dx
  4126                              <1> .show:
  4127 00003256 803D[25320000]03    <1> 	cmp byte [firsthexshown], 3
  4128 0000325D 750A                <1> 	jne .nonewhexline
  4129 0000325F BE[A9870000]        <1> 	mov esi, line
  4130 00003264 E8D7EAFFFF          <1> 	call print
  4131                              <1> .nonewhexline:
  4132 00003269 803D[25320000]04    <1> 	cmp byte [firsthexshown], 4
  4133 00003270 7527                <1> 	jne .notab
  4134 00003272 B1A0                <1> 	mov cl, 160
  4135 00003274 28D1                <1> 	sub cl, dl
  4136 00003276 C0E905              <1> 	shr cl, 5
  4137 00003279 C0E105              <1> 	shl cl, 5
  4138 0000327C 80F900              <1> 	cmp cl, 0
  4139 0000327F 750F                <1> 	jne .nonewline
  4140 00003281 BE[A9870000]        <1> 	mov esi, line
  4141 00003286 E8B5EAFFFF          <1> 	call print
  4142 0000328B E909000000          <1> 	jmp .notab
  4143                              <1> .nonewline:
  4144 00003290 80C20F              <1> 	add dl, 15
  4145 00003293 C0EA04              <1> 	shr dl, 4
  4146 00003296 C0E204              <1> 	shl dl, 4
  4147                              <1> .notab:
  4148 00003299 BE[B9310000]        <1> 	mov esi, hexnumber
  4149 0000329E 803D[24320000]01    <1> 	cmp byte [smallhex],1
  4150 000032A5 7506                <1> 	jne .nosmall
  4151 000032A7 81C606000000        <1> 	add esi, 6
  4152                              <1> .nosmall:
  4153 000032AD 803D[25320000]05    <1> 	cmp byte [firsthexshown], 5
  4154 000032B4 750A                <1> 	jne .noquiet
  4155 000032B6 E866EAFFFF          <1> 	call printquiet
  4156 000032BB E918000000          <1> 	jmp .donequiet
  4157                              <1> .noquiet:
  4158 000032C0 803D[25320000]06    <1> 	cmp byte [firsthexshown], 6
  4159 000032C7 750A                <1> 	jne .normal
  4160 000032C9 E866EAFFFF          <1> 	call printhighlight
  4161 000032CE E905000000          <1> 	jmp .donequiet
  4162                              <1> .normal:
  4163 000032D3 E868EAFFFF          <1> 	call print
  4164                              <1> .donequiet:
  4165 000032D8 803D[25320000]02    <1> 	cmp byte [firsthexshown], 2
  4166 000032DF 750A                <1> 	jne .shown
  4167 000032E1 BE[A9870000]        <1> 	mov esi, line
  4168 000032E6 E855EAFFFF          <1> 	call print
  4169                              <1> .shown:
  4170 000032EB C605[25320000]00    <1> 	mov byte [firsthexshown], 0
  4171 000032F2 61                  <1> 	popa
  4172 000032F3 C3                  <1> 	ret
  4173                              <1> 
  4174                              <1> 
  4175 000032F4 303030303030303030- <1> decnumber db "00000000000000"
  4176 000032FD 3030303030          <1>
  4177 00003302 2000                <1> decnumberend: db " ",0
  4178                              <1> 
  4179                              <1> showdec: ;;same as showhex, just uses decimal conversion
  4180 00003304 60                  <1> 	pusha
  4181 00003305 BF[F4320000]        <1> 	mov edi, decnumber
  4182 0000330A BE[02330000]        <1> 	mov esi, decnumberend
  4183                              <1> .clear:
  4184 0000330F C60730              <1> 	mov byte [edi], '0'
  4185 00003312 47                  <1> 	inc edi
  4186 00003313 39F7                <1> 	cmp edi, esi
  4187 00003315 72F8                <1> 	jb .clear
  4188 00003317 BF[F4320000]        <1> 	mov edi, decnumber
  4189 0000331C E8B1FDFFFF          <1> 	call convert
  4190 00003321 803D[25320000]01    <1> 	cmp byte [firsthexshown], 1
  4191 00003328 7503                <1> 	jne .show
  4192 0000332A 6631D2              <1> 	xor dx, dx
  4193                              <1> .show:
  4194 0000332D 803D[25320000]03    <1> 	cmp byte [firsthexshown], 3
  4195 00003334 750A                <1> 	jne .nonewdecline
  4196 00003336 BE[A9870000]        <1> 	mov esi, line
  4197 0000333B E800EAFFFF          <1> 	call print
  4198                              <1> .nonewdecline:
  4199 00003340 803D[25320000]04    <1> 	cmp byte [firsthexshown], 4
  4200 00003347 7527                <1> 	jne .notab
  4201 00003349 B1A0                <1> 	mov cl, 160
  4202 0000334B 28D1                <1> 	sub cl, dl
  4203 0000334D C0E905              <1> 	shr cl, 5
  4204 00003350 C0E105              <1> 	shl cl, 5
  4205 00003353 80F900              <1> 	cmp cl, 0
  4206 00003356 750F                <1> 	jne .nonewline
  4207 00003358 BE[A9870000]        <1> 	mov esi, line
  4208 0000335D E8DEE9FFFF          <1> 	call print
  4209 00003362 E909000000          <1> 	jmp .notab
  4210                              <1> .nonewline:
  4211 00003367 80C20F              <1> 	add dl, 15
  4212 0000336A C0EA04              <1> 	shr dl, 4
  4213 0000336D C0E204              <1> 	shl dl, 4
  4214                              <1> .notab:
  4215 00003370 BE[F4320000]        <1> 	mov esi, decnumber
  4216 00003375 4E                  <1> 	dec esi
  4217                              <1> .sifind:
  4218 00003376 46                  <1> 	inc esi
  4219 00003377 803E30              <1> 	cmp byte [esi], '0'
  4220 0000337A 74FA                <1> 	je .sifind
  4221 0000337C E8BFE9FFFF          <1> 	call print
  4222 00003381 803D[25320000]02    <1> 	cmp byte [firsthexshown], 2
  4223 00003388 750A                <1> 	jne .shown
  4224 0000338A BE[A9870000]        <1> 	mov esi, line
  4225 0000338F E8ACE9FFFF          <1> 	call print
  4226                              <1> .shown:
  4227 00003394 C605[25320000]00    <1> 	mov byte [firsthexshown], 0
  4228 0000339B 61                  <1> 	popa
  4229 0000339C C3                  <1> 	ret
  4230                              <1> 	
  4231                              <1> cnvrthextxt:
  4232 0000339D 31C9                <1> 	xor ecx, ecx
  4233 0000339F 31C0                <1> 	xor eax, eax
  4234 000033A1 31D2                <1> 	xor edx, edx
  4235 000033A3 31DB                <1> 	xor ebx, ebx
  4236 000033A5 4E                  <1> 	dec esi
  4237                              <1> .end:
  4238 000033A6 46                  <1> 	inc esi
  4239 000033A7 8A06                <1> 	mov al, [esi]
  4240 000033A9 3C00                <1> 	cmp al, 0
  4241 000033AB 75F9                <1> 	jne .end
  4242                              <1> .loop:
  4243 000033AD 4E                  <1> 	dec esi
  4244 000033AE 8A06                <1> 	mov al, [esi]
  4245 000033B0 3C41                <1> 	cmp al, "A"
  4246 000033B2 7328                <1> 	jae .char
  4247 000033B4 2C30                <1> 	sub al, 48
  4248 000033B6 3C10                <1> 	cmp al, 16
  4249 000033B8 7721                <1> 	ja .done
  4250                              <1> .donechar:
  4251 000033BA 81FA00000000        <1> 	cmp edx, 0
  4252 000033C0 740E                <1> 	je .noshl
  4253 000033C2 89D3                <1> 	mov ebx, edx
  4254                              <1> .shl:
  4255 000033C4 C1E004              <1> 	shl eax, 4
  4256 000033C7 4B                  <1> 	dec ebx
  4257 000033C8 81FB00000000        <1> 	cmp ebx, 0
  4258 000033CE 75F4                <1> 	jne .shl
  4259                              <1> .noshl:
  4260 000033D0 42                  <1> 	inc edx
  4261 000033D1 01C1                <1> 	add ecx, eax
  4262 000033D3 81FA08000000        <1> 	cmp edx, 8
  4263 000033D9 72D2                <1> 	jb .loop
  4264                              <1> .done:
  4265 000033DB C3                  <1> 	ret
  4266                              <1> .char:
  4267 000033DC 3C46                <1> 	cmp al, "F"
  4268 000033DE 77FB                <1> 	ja .done
  4269 000033E0 2C41                <1> 	sub al, "A"
  4270 000033E2 040A                <1> 	add al, 0xA
  4271 000033E4 E9D1FFFFFF          <1> 	jmp .donechar
  4272                              <1> 	
  4273                              <1> 	
  4274                              <1> cnvrttxt: ;text to convert in esi, first part or 0 in edi
  4275 000033E9 31C9                <1> 	xor ecx, ecx
  4276 000033EB 31C0                <1> 	xor eax, eax
  4277 000033ED 31D2                <1> 	xor edx, edx
  4278 000033EF 31DB                <1> 	xor ebx, ebx
  4279 000033F1 4E                  <1> 	dec esi
  4280                              <1> .lp:
  4281 000033F2 46                  <1> 	inc esi
  4282 000033F3 8A06                <1> 	mov al, [esi]
  4283 000033F5 3C00                <1> 	cmp al, 0
  4284 000033F7 75F9                <1> 	jne .lp
  4285 000033F9 4E                  <1> 	dec esi
  4286 000033FA 8A06                <1> 	mov al, [esi]
  4287 000033FC 3C2E                <1> 	cmp al, '.'
  4288 000033FE 7506                <1> 	jne .dot
  4289 00003400 46                  <1> 	inc esi
  4290 00003401 E9ECFFFFFF          <1> 	jmp .lp
  4291                              <1> .dot:
  4292 00003406 3C20                <1> 	cmp al, ' '
  4293 00003408 7404                <1> 	je .zero
  4294 0000340A 3C30                <1> 	cmp al, '0'
  4295 0000340C 7504                <1> 	jne .txtlp
  4296                              <1> .zero: 
  4297 0000340E 39FE                <1> 		cmp esi, edi
  4298 00003410 745E                <1> 		je .done
  4299                              <1> .txtlp:
  4300 00003412 31C0                <1> 	xor eax, eax
  4301 00003414 8A06                <1> 	mov al, [esi]
  4302 00003416 3C3D                <1> 	cmp al, '='
  4303 00003418 7456                <1> 	je .done
  4304 0000341A 3C30                <1> 	cmp al, 48
  4305 0000341C 7252                <1> 	jb .done
  4306 0000341E 3C23                <1> 	cmp al, '#'
  4307 00003420 744E                <1> 	je .done
  4308 00003422 39FE                <1> 	cmp esi, edi
  4309 00003424 724A                <1> 	jb .done
  4310 00003426 81F900000000        <1> 	cmp ecx, 0
  4311 0000342C 770B                <1> 	ja .exp
  4312 0000342E 2C30                <1> .noexp:	sub al, 48
  4313 00003430 01C2                <1> 	add edx, eax
  4314 00003432 4E                  <1> 	dec esi
  4315 00003433 41                  <1> 	inc ecx
  4316 00003434 E9D9FFFFFF          <1> 	jmp .txtlp
  4317 00003439 81F900000000        <1> .exp:	cmp ecx, 0
  4318 0000343F 74ED                <1> 	je .noexp
  4319 00003441 2C30                <1> 	sub al, 48
  4320 00003443 51                  <1> 	push ecx
  4321 00003444 89C3                <1> .expmul:	mov ebx, eax
  4322 00003446 01D8                <1> 	add eax, ebx
  4323 00003448 01D8                <1> 	add eax, ebx
  4324 0000344A 01D8                <1> 	add eax, ebx
  4325 0000344C 01D8                <1> 	add eax, ebx
  4326 0000344E 01D8                <1> 	add eax, ebx
  4327 00003450 01D8                <1> 	add eax, ebx
  4328 00003452 01D8                <1> 	add eax, ebx
  4329 00003454 01D8                <1> 	add eax, ebx
  4330 00003456 01D8                <1> 	add eax, ebx
  4331 00003458 81E901000000        <1> 	sub ecx, 1
  4332 0000345E 81F900000000        <1> 	cmp ecx, 0
  4333 00003464 77DE                <1> 	ja .expmul
  4334 00003466 01C2                <1> 	add edx, eax
  4335 00003468 59                  <1> 	pop ecx
  4336 00003469 4E                  <1> 	dec esi
  4337 0000346A 41                  <1> 	inc ecx
  4338 0000346B E9A2FFFFFF          <1> 	jmp .txtlp
  4339 00003470 89D1                <1> .done: mov ecx, edx
  4340 00003472 C3                  <1> 	ret
  4341                                      %include "source/programs.asm"
  4342 00003473 FF2C                <1> filetypes db 255,44
  4343                              <1> progstart:		;programs start here
  4344                              <1> indexfiles:
  4345 00003475 BE[75340000]        <1> 	mov esi, progstart
  4346 0000347A BB[E09A0300]        <1> 	mov ebx, fileindex
  4347 0000347F BF[75340000]        <1> 	mov edi, progstart
  4348 00003484 81EF02000000        <1> 	sub edi, 2
  4349                              <1> indexloop:
  4350 0000348A 668B0E              <1> 	mov cx, [esi]
  4351                              <1> 	indexloop2:
  4352 0000348D 663B0F              <1> 		cmp cx, [edi]
  4353 00003490 7427                <1> 		je indexloop2done
  4354 00003492 81EF02000000        <1> 		sub edi, 2
  4355 00003498 81FF[73340000]      <1> 		cmp edi, filetypes
  4356 0000349E 73ED                <1> 		jae indexloop2
  4357 000034A0 BF[75340000]        <1> 	mov edi, progstart
  4358 000034A5 81EF02000000        <1> 	sub edi, 2
  4359 000034AB 46                  <1> 	inc esi
  4360 000034AC 81FE[53530000]      <1> 	cmp esi, batchprogend
  4361 000034B2 7357                <1> 	jae indexloopdone
  4362 000034B4 E9D1FFFFFF          <1> 	jmp indexloop
  4363                              <1> indexloop2done:
  4364 000034B9 66890B              <1> 	mov [ebx], cx
  4365 000034BC 81C302000000        <1> 	add ebx, 2
  4366 000034C2 81C602000000        <1> 	add esi, 2
  4367                              <1> 	nameindex:
  4368 000034C8 8A0E                <1> 		mov cl, [esi]
  4369 000034CA 80F900              <1> 		cmp cl, 0
  4370 000034CD 7409                <1> 		je nameindexdone
  4371 000034CF 880B                <1> 		mov [ebx], cl
  4372 000034D1 46                  <1> 		inc esi
  4373 000034D2 43                  <1> 		inc ebx
  4374 000034D3 E9F0FFFFFF          <1> 		jmp nameindex
  4375                              <1> 	nameindexdone:
  4376 000034D8 43                  <1> 		inc ebx
  4377 000034D9 66C7030000          <1> 		mov word [ebx], 0
  4378 000034DE 81C302000000        <1> 		add ebx, 2
  4379 000034E4 46                  <1> 		inc esi
  4380 000034E5 8933                <1> 		mov [ebx], esi
  4381 000034E7 81C304000000        <1> 		add ebx, 4
  4382 000034ED 66C7030000          <1> 		mov word [ebx], 0
  4383 000034F2 81C302000000        <1> 		add ebx, 2
  4384 000034F8 81FB[E09E0300]      <1> 		cmp ebx, fileindexend
  4385 000034FE 730B                <1> 		jae indexloopdone
  4386 00003500 81C601000000        <1> 		add esi, 1
  4387 00003506 E97FFFFFFF          <1> 		jmp indexloop
  4388 0000350B C605[13350000]01    <1> indexloopdone: 	mov byte [indexdone], 1
  4389 00003512 C3                  <1> 		ret
  4390 00003513 00                  <1> indexdone db 0
  4391                              <1> %include 'source/programs/_comment.asm' ;#
  4392 00003514 FF2C2300            <2> 	db 255,44,"#",0	;this lets you rem stuff
  4393 00003518 C3                  <2> 	ret 
  4394                              <1> %include 'source/programs/_math.asm' ;!
  4395 00003519 FF2C2100            <2> db 255,44,"!",0
  4396                              <2> 	num:	
  4397 0000351D E898FBFFFF          <2> 		call clearbuffer
  4398 00003522 C605[B5370000]00    <2> 		mov byte [decimal], 0
  4399 00003529 C605[B6370000]00    <2> 		mov byte [decimal2], 0
  4400 00003530 8B35[EC2F0000]      <2> 		mov esi, [currentcommandloc]
  4401 00003536 31C0                <2> 		xor eax, eax
  4402 00003538 31C9                <2> 		xor ecx, ecx
  4403 0000353A 31DB                <2> 		xor ebx, ebx
  4404 0000353C 8A06                <2> 	num2:	mov al, [esi]
  4405 0000353E 3C2B                <2> 		cmp al, '+'
  4406 00003540 741E                <2> 		je operatorfound
  4407 00003542 3C2D                <2> 		cmp al, '-'
  4408 00003544 741A                <2> 		je operatorfound
  4409 00003546 3C2A                <2> 		cmp al, '*'
  4410 00003548 7416                <2> 		je operatorfound
  4411 0000354A 3C2F                <2> 		cmp al, '/'
  4412 0000354C 7412                <2> 		je operatorfound
  4413 0000354E 3C5E                <2> 		cmp al, '^'
  4414 00003550 740E                <2> 		je operatorfound
  4415 00003552 46                  <2> 		inc esi
  4416 00003553 3C00                <2> 		cmp al, 0
  4417 00003555 0F84CCF7FFFF        <2> 		je near nwcmd
  4418 0000355B E9DCFFFFFF          <2> 		jmp num2
  4419 00003560 50                  <2> 	operatorfound: push eax
  4420 00003561 30E4                <2> 		xor ah, ah
  4421 00003563 8826                <2> 		mov [esi], ah
  4422 00003565 89F7                <2> 		mov edi, esi
  4423 00003567 46                  <2> 		inc esi
  4424 00003568 8A06                <2> 		mov al, [esi]
  4425 0000356A 3C25                <2> 		cmp al, '%'
  4426 0000356C 0F8462000000        <2> 		je near resultnum1
  4427                              <2> 	varnum2: 
  4428 00003572 57                  <2> 		push edi
  4429 00003573 E8AA000000          <2> 		call checkdecimal
  4430 00003578 5F                  <2> 		pop edi
  4431 00003579 E86BFEFFFF          <2> 		call cnvrttxt
  4432                              <2> 	vrnm2:
  4433 0000357E 89CB                <2> 		mov ebx, ecx
  4434 00003580 53                  <2> 		push ebx
  4435 00003581 E834FBFFFF          <2> 		call clearbuffer
  4436 00003586 8B35[EC2F0000]      <2> 		mov esi, [currentcommandloc]
  4437 0000358C 89F7                <2> 		mov edi, esi
  4438 0000358E 46                  <2> 		inc esi
  4439 0000358F 8A06                <2> 		mov al, [esi]
  4440 00003591 3C25                <2> 		cmp al, '%'
  4441 00003593 0F8452000000        <2> 		je near resultnum2
  4442                              <2> 	varnum4: 
  4443 00003599 57                  <2> 		push edi
  4444 0000359A E86F000000          <2> 		call checkdecimal2
  4445 0000359F 5F                  <2> 		pop edi
  4446 000035A0 E844FEFFFF          <2> 		call cnvrttxt
  4447                              <2> 	vrnm4:
  4448 000035A5 5B                  <2> 		pop ebx
  4449 000035A6 58                  <2> 		pop eax
  4450 000035A7 3C2B                <2> 		cmp al, '+'
  4451 000035A9 0F84A7000000        <2> 		je near plusnum
  4452 000035AF 3C2D                <2> 		cmp al, '-'
  4453 000035B1 0F84AB000000        <2> 		je near subnum
  4454 000035B7 3C2A                <2> 		cmp al, '*'
  4455 000035B9 0F84AF000000        <2> 		je near mulnum
  4456 000035BF 3C2F                <2> 		cmp al, '/'
  4457 000035C1 0F84BD000000        <2> 		je near divnum
  4458 000035C7 3C5E                <2> 		cmp al, '^'
  4459 000035C9 0F84DA000000        <2> 		je near expnum
  4460 000035CF E953F7FFFF          <2> 		jmp nwcmd
  4461                              <2> 	resultnum1:
  4462 000035D4 8A0D[B7370000]      <2> 		mov cl, [decimalresult]
  4463 000035DA 880D[B5370000]      <2> 		mov [decimal], cl
  4464 000035E0 8B0D[B8370000]      <2> 		mov ecx, [result]
  4465 000035E6 E993FFFFFF          <2> 		jmp vrnm2
  4466                              <2> 	resultnum2:
  4467 000035EB 8A0D[B5370000]      <2> 		mov cl, [decimal]
  4468 000035F1 880D[B6370000]      <2> 		mov [decimal2], cl
  4469 000035F7 8A0D[B7370000]      <2> 		mov cl, [decimalresult]
  4470 000035FD 880D[B5370000]      <2> 		mov [decimal], cl
  4471 00003603 8B0D[B8370000]      <2> 		mov ecx, [result]
  4472 00003609 E997FFFFFF          <2> 		jmp vrnm4
  4473                              <2> 	checkdecimal2:
  4474 0000360E 8A25[B5370000]      <2> 		mov ah, [decimal]
  4475 00003614 8825[B6370000]      <2> 		mov [decimal2], ah
  4476 0000361A 30E4                <2> 		xor ah, ah
  4477 0000361C 8825[B5370000]      <2> 		mov [decimal], ah
  4478                              <2> 	checkdecimal:
  4479 00003622 89F7                <2> 		mov edi, esi
  4480                              <2> 	chkdec1:
  4481 00003624 8A07                <2> 		mov al, [edi]
  4482 00003626 3C2E                <2> 		cmp al, '.'
  4483 00003628 0F840E000000        <2> 		je near fnddec
  4484 0000362E 3C00                <2> 		cmp al, 0
  4485 00003630 0F841F000000        <2> 		je near nodecimal
  4486 00003636 47                  <2> 		inc edi
  4487 00003637 E9E8FFFFFF          <2> 		jmp chkdec1
  4488                              <2> 	fnddec:
  4489 0000363C 8A4701              <2> 		mov al, [edi + 1]
  4490 0000363F 8807                <2> 		mov [edi], al
  4491 00003641 3C00                <2> 		cmp al, 0
  4492 00003643 0F840C000000        <2> 		je near nodecimal
  4493 00003649 FE05[B5370000]      <2> 		inc byte [decimal]
  4494 0000364F 47                  <2> 		inc edi
  4495 00003650 E9E7FFFFFF          <2> 		jmp fnddec
  4496                              <2> 	nodecimal:
  4497 00003655 C3                  <2> 		ret
  4498                              <2> 	plusnum:
  4499 00003656 E818010000          <2> 		call decaddfix
  4500 0000365B 01D9                <2> 		add ecx, ebx
  4501 0000365D E98A000000          <2> 		jmp retnum
  4502                              <2> 	subnum:
  4503 00003662 E80C010000          <2> 		call decaddfix
  4504 00003667 29D9                <2> 		sub ecx, ebx
  4505 00003669 E97E000000          <2> 		jmp retnum
  4506                              <2> 	mulnum:
  4507 0000366E A0[B6370000]        <2> 		mov al, [decimal2]
  4508 00003673 0005[B5370000]      <2> 		add [decimal], al
  4509 00003679 89C8                <2> 		mov eax, ecx
  4510 0000367B F7E3                <2> 		mul ebx
  4511 0000367D 89C1                <2> 		mov ecx, eax
  4512 0000367F E968000000          <2> 		jmp retnum
  4513                              <2> 	divnum:
  4514 00003684 E8EA000000          <2> 		call decaddfix
  4515 00003689 30C0                <2> 		xor al, al
  4516 0000368B A2[B5370000]        <2> 		mov [decimal], al
  4517 00003690 31D2                <2> 		xor edx, edx
  4518 00003692 89C8                <2> 		mov eax, ecx
  4519 00003694 81FB00000000        <2> 		cmp ebx, 0
  4520 0000369A 0F844C000000        <2> 		je near retnum
  4521 000036A0 F7F3                <2> 		div ebx
  4522 000036A2 89C1                <2> 		mov ecx, eax
  4523 000036A4 E943000000          <2> 		jmp retnum
  4524                              <2> 	expnum:
  4525 000036A9 8A15[B5370000]      <2> 		mov dl, [decimal]
  4526 000036AF 8815[B6370000]      <2> 		mov [decimal2], dl
  4527 000036B5 31D2                <2> 		xor edx, edx
  4528 000036B7 89C8                <2> 		mov eax, ecx
  4529 000036B9 89D9                <2> 		mov ecx, ebx
  4530 000036BB 89C3                <2> 		mov ebx, eax
  4531 000036BD 81F900000000        <2> 		cmp ecx, 0
  4532 000036C3 7422                <2> 		je noexpnum
  4533 000036C5 49                  <2> 		dec ecx
  4534 000036C6 81F900000000        <2> 		cmp ecx, 0
  4535 000036CC 7412                <2> 		je noexpnumlp
  4536 000036CE F7E3                <2> 	expnumlp: mul ebx
  4537 000036D0 8A15[B6370000]      <2> 		mov dl, [decimal2]
  4538 000036D6 0015[B5370000]      <2> 		add [decimal], dl
  4539 000036DC 31D2                <2> 		xor edx, edx
  4540 000036DE E2EE                <2> 		loop expnumlp
  4541                              <2> 	noexpnumlp:
  4542 000036E0 89C1                <2> 		mov ecx, eax
  4543 000036E2 E905000000          <2> 		jmp retnum
  4544                              <2> 	noexpnum:
  4545 000036E7 B901000000          <2> 		mov ecx, 1
  4546                              <2> 	retnum: 
  4547 000036EC BE[74B90300]        <2> 		mov esi, numbuf
  4548 000036F1 890D[B8370000]      <2> 		mov [result], ecx
  4549 000036F7 E8D6F9FFFF          <2> 		call convert
  4550 000036FC BE[74B90300]        <2> 		mov esi, numbuf
  4551 00003701 8A25[B5370000]      <2> 		mov ah, [decimal]
  4552 00003707 8825[B7370000]      <2> 		mov [decimalresult], ah
  4553 0000370D 80FC00              <2> 		cmp ah, 0
  4554 00003710 0F8425000000        <2> 		je near noputdecimal
  4555                              <2> 	putdecimal:
  4556 00003716 4E                  <2> 		dec esi
  4557 00003717 FECC                <2> 		dec ah
  4558 00003719 80FC00              <2> 		cmp ah, 0
  4559 0000371C 0F87F4FFFFFF        <2> 		ja near putdecimal
  4560 00003722 4E                  <2> 		dec esi
  4561 00003723 8A06                <2> 		mov al, [esi]
  4562 00003725 C6062E              <2> 		mov byte [esi], '.'
  4563                              <2> 	decputloop:
  4564 00003728 4E                  <2> 		dec esi
  4565 00003729 8A26                <2> 		mov ah, [esi]
  4566 0000372B 8806                <2> 		mov [esi], al
  4567 0000372D 88E0                <2> 		mov al, ah
  4568 0000372F 81FE[60B90300]      <2> 		cmp esi, buf2
  4569 00003735 0F87EDFFFFFF        <2> 		ja near decputloop
  4570                              <2> 	noputdecimal:
  4571 0000373B BE[60B90300]        <2> 		mov esi, buf2
  4572 00003740 E809000000          <2> 		call chkadd
  4573 00003745 E9DDF5FFFF          <2> 		jmp nwcmd
  4574 0000374A 00000000            <2> edxnumbuf dw 0,0
  4575 0000374E 8A06                <2> 	chkadd: mov al, [esi]
  4576 00003750 3C30                <2> 		cmp al, '0'
  4577 00003752 750F                <2> 		jne dnadd
  4578 00003754 46                  <2> 		inc esi
  4579 00003755 81FE[74B90300]      <2> 		cmp esi, numbuf
  4580 0000375B 7405                <2> 		je dnaddm1
  4581 0000375D E9ECFFFFFF          <2> 		jmp chkadd
  4582 00003762 4E                  <2> 	dnaddm1: dec esi
  4583 00003763 E8D8E5FFFF          <2> 	dnadd:	call print
  4584 00003768 BE[A9870000]        <2> 		mov esi, line
  4585 0000376D E8CEE5FFFF          <2> 		call print
  4586 00003772 C3                  <2> 		ret
  4587                              <2> 		
  4588                              <2> 	decaddfix:
  4589 00003773 A0[B6370000]        <2> 		mov al, [decimal2]
  4590 00003778 8A25[B5370000]      <2> 		mov ah, [decimal]
  4591 0000377E 38E0                <2> 		cmp al, ah
  4592 00003780 7432                <2> 		je gooddecadd
  4593 00003782 38E0                <2> 		cmp al, ah
  4594 00003784 721A                <2> 		jb lowdecadd
  4595                              <2> 	highdecadd:
  4596 00003786 FEC4                <2> 		inc ah
  4597 00003788 89CA                <2> 		mov edx, ecx
  4598 0000378A C1E103              <2> 		shl ecx, 3
  4599 0000378D 01D1                <2> 		add ecx, edx
  4600 0000378F 01D1                <2> 		add ecx, edx
  4601 00003791 38E0                <2> 		cmp al, ah
  4602 00003793 77F1                <2> 		ja highdecadd
  4603 00003795 8825[B5370000]      <2> 		mov [decimal], ah
  4604 0000379B E914000000          <2> 		jmp gooddecadd
  4605                              <2> 	lowdecadd:
  4606 000037A0 FEC0                <2> 		inc al
  4607 000037A2 89DA                <2> 		mov edx, ebx
  4608 000037A4 C1E303              <2> 		shl ebx, 3
  4609 000037A7 01D3                <2> 		add ebx, edx
  4610 000037A9 01D3                <2> 		add ebx, edx
  4611 000037AB 38E0                <2> 		cmp al, ah
  4612 000037AD 72F1                <2> 		jb lowdecadd
  4613 000037AF A2[B5370000]        <2> 		mov [decimal], al
  4614                              <2> 	gooddecadd:
  4615 000037B4 C3                  <2> 		ret
  4616                              <2> 		
  4617 000037B5 00                  <2> decimal db 0
  4618 000037B6 00                  <2> decimal2 db 0
  4619 000037B7 00                  <2> decimalresult db 0
  4620 000037B8 00000000            <2> result dd 0
  4621                              <1> %include 'source/programs/_variables.asm' ;% and $
  4622 000037BC FF2C2500            <2> db 255,44,"%",0
  4623                              <2> 	ans:
  4624 000037C0 BE[60B90300]        <2> 		mov esi, buf2
  4625 000037C5 E884FFFFFF          <2> 		call chkadd
  4626 000037CA C3                  <2> 		ret
  4627                              <2> 		
  4628 000037CB FF2C2400            <2> db 255,44,"$",0
  4629 000037CF 8B35[EC2F0000]      <2> var: mov esi, [currentcommandloc]
  4630 000037D5 BB[60A10300]        <2> 	mov ebx, variables
  4631 000037DA 8A06                <2> lkeq:	mov al, [esi]
  4632 000037DC 3C3D                <2> 	cmp al, '='
  4633 000037DE 741E                <2> 	je eqfnd	;is there an '=' sign?
  4634 000037E0 3C00                <2> 	cmp al, 0
  4635 000037E2 7406                <2> 	je echovars
  4636 000037E4 46                  <2> 	inc esi
  4637 000037E5 E9F0FFFFFF          <2> 	jmp lkeq
  4638 000037EA BE[60A10300]        <2> echovars: mov esi, variables
  4639 000037EF BB[60B10300]        <2> 	mov ebx, varend
  4640 000037F4 B105                <2> 	mov cl, 5
  4641 000037F6 B504                <2> 	mov ch, 4
  4642 000037F8 E856F8FFFF          <2> 	call array
  4643 000037FD C3                  <2> 	ret
  4644 000037FE 46                  <2> eqfnd:	inc esi
  4645 000037FF 8A06                <2> 	mov al, [esi]
  4646 00003801 3C00                <2> 	cmp al, 0
  4647 00003803 7410                <2> 	je readvar
  4648 00003805 8B35[EC2F0000]      <2> 	mov esi, [currentcommandloc]
  4649 0000380B BB[60A10300]        <2> 	mov ebx, variables
  4650 00003810 E91C000000          <2> 	jmp seek
  4651                              <2> readvar:
  4652 00003815 B00A                <2> 	mov al, 10
  4653 00003817 66BB0700            <2> 	mov bx, 7
  4654 0000381B C605[42230000]00    <2> 	mov byte [commandedit], 0
  4655 00003822 BF[60B90300]        <2> 	mov edi, buftxtend
  4656 00003827 E84AE6FFFF          <2> 	call rdprint
  4657 0000382C E99EFFFFFF          <2> 	jmp var
  4658 00003831 668B03              <2> seek:	mov ax, [ebx]
  4659 00003834 B105                <2> 	mov cl, 5
  4660 00003836 B504                <2> 	mov ch, 4
  4661 00003838 663D0000            <2> 	cmp ax, 0
  4662 0000383C 0F846A000000        <2> 	je near save
  4663 00003842 6639C8              <2> 	cmp ax, cx
  4664 00003845 7406                <2> 	je skfnd
  4665 00003847 43                  <2> 	inc ebx
  4666 00003848 E9E4FFFFFF          <2> 	jmp seek
  4667 0000384D 8B35[EC2F0000]      <2> skfnd:	mov esi, [currentcommandloc]
  4668 00003853 46                  <2> 	inc esi
  4669 00003854 81C302000000        <2> 	add ebx, 2
  4670 0000385A 89DF                <2> 	mov edi, ebx
  4671 0000385C B13D                <2> 	mov cl, '='
  4672 0000385E E8CEF7FFFF          <2> 	call cndtest
  4673 00003863 3C01                <2> 	cmp al, 1	
  4674 00003865 741B                <2> 	je varfnd
  4675 00003867 89FB                <2> 	mov ebx, edi
  4676 00003869 8B35[EC2F0000]      <2> 	mov esi, [currentcommandloc]
  4677 0000386F 668B03              <2> 	mov ax, [ebx]
  4678 00003872 663D0000            <2> 	cmp ax, 0
  4679 00003876 0F8430000000        <2> 	je near save
  4680 0000387C 43                  <2> 	inc ebx
  4681 0000387D E9AFFFFFFF          <2> 	jmp seek
  4682 00003882 8A03                <2> varfnd:	mov al, [ebx]
  4683 00003884 3C04                <2> 	cmp al, 4
  4684 00003886 7407                <2> 	je save2
  4685 00003888 4B                  <2> 	dec ebx
  4686 00003889 4E                  <2> 	dec esi
  4687 0000388A E9F3FFFFFF          <2> 	jmp varfnd
  4688 0000388F 4B                  <2> save2:	dec ebx
  4689 00003890 4E                  <2> 	dec esi
  4690 00003891 8A03                <2> 	mov al, [ebx]
  4691 00003893 3C05                <2> 	cmp al, 5
  4692 00003895 7405                <2> 	je remove
  4693 00003897 E9E6FFFFFF          <2> 	jmp varfnd
  4694 0000389C 8A03                <2> remove: mov al, [ebx]
  4695 0000389E 3C00                <2> 	cmp al, 0
  4696 000038A0 748F                <2> 	je seek
  4697 000038A2 30C0                <2> 	xor al, al
  4698 000038A4 8803                <2> 	mov [ebx], al
  4699 000038A6 43                  <2> 	inc ebx
  4700 000038A7 E9F0FFFFFF          <2> 	jmp remove	;do not need for now-need defragmentation
  4701 000038AC 8B35[EC2F0000]      <2> save:	mov esi, [currentcommandloc]
  4702 000038B2 43                  <2> 	inc ebx
  4703 000038B3 B005                <2> 	mov al, 5
  4704 000038B5 B404                <2> 	mov ah, 4
  4705 000038B7 668903              <2> 	mov [ebx], ax
  4706 000038BA 43                  <2> 	inc ebx
  4707 000038BB 43                  <2> svhere:	inc ebx
  4708 000038BC 46                  <2> 	inc esi
  4709 000038BD 8A06                <2> 	mov al, [esi]
  4710 000038BF 3C00                <2> 	cmp al, 0
  4711 000038C1 0F8456000000        <2> 	je near svdone
  4712 000038C7 3C25                <2> 	cmp al, '%'
  4713 000038C9 7407                <2> 	je ans2
  4714 000038CB 8803                <2> 	mov [ebx], al	
  4715 000038CD E9E9FFFFFF          <2> 	jmp svhere
  4716 000038D2 56                  <2> ans2:	push esi
  4717 000038D3 BE[60B90300]        <2> 	mov esi, buf2
  4718 000038D8 E82C000000          <2> 	call ansfnd
  4719 000038DD E806000000          <2> 	call anscp
  4720 000038E2 5E                  <2> 	pop esi
  4721 000038E3 E9D3FFFFFF          <2> 	jmp svhere
  4722 000038E8 8A06                <2> anscp:	mov al, [esi]
  4723 000038EA 8803                <2> 	mov [ebx], al
  4724 000038EC 81FE[74B90300]      <2> 	cmp esi, numbuf
  4725 000038F2 74C7                <2> 	je svhere
  4726 000038F4 3C00                <2> 	cmp al, 0
  4727 000038F6 74C3                <2> 	je svhere
  4728 000038F8 43                  <2> 	inc ebx
  4729 000038F9 46                  <2> 	inc esi
  4730 000038FA E9E9FFFFFF          <2> 	jmp anscp
  4731 000038FF 5E                  <2> ansnf:	pop esi
  4732 00003900 8A06                <2> 	mov al, [esi]
  4733 00003902 8803                <2> 	mov [ebx], al
  4734 00003904 E9B2FFFFFF          <2> 	jmp svhere
  4735 00003909 46                  <2> ansfnd:	inc esi
  4736 0000390A 81FE[73B90300]      <2> 	cmp esi, numbuf - 1
  4737 00003910 740A                <2> 	je fndans
  4738 00003912 8A06                <2> 	mov al, [esi]
  4739 00003914 3C00                <2> 	cmp al, 0
  4740 00003916 74E7                <2> 	je ansnf
  4741 00003918 3C30                <2> 	cmp al, '0'
  4742 0000391A 74ED                <2> 	je ansfnd
  4743                              <2> fndans:
  4744 0000391C C3                  <2> 	ret
  4745 0000391D 30C0                <2> svdone:	xor al, al
  4746 0000391F 8803                <2> 	mov [ebx], al
  4747 00003921 C3                  <2> 	ret
  4748                              <1> %include 'source/programs/_run.asm' ;./
  4749                              <2> 
  4750 00003922 7F454C46            <2> 	elfstart db 0x7F,"ELF"
  4751 00003926 FF2C2E2F00          <2> 	db 255,44,"./",0
  4752                              <2> rundiskprog:
  4753 0000392B 8B3D[EC2F0000]      <2> 	mov edi, [currentcommandloc]
  4754 00003931 81C702000000        <2> 	add edi, 2
  4755 00003937 BE00004000          <2> 	mov esi, 0x400000
  4756 0000393C E8D82E0000          <2> 	call loadfile
  4757 00003941 81FA94010000        <2> 	cmp edx, 404
  4758 00003947 746A                <2> 	je noprogfound
  4759 00003949 BB00004000          <2> 	mov ebx, 0x400000
  4760 0000394E A1[22390000]        <2> 	mov eax, [elfstart]
  4761 00003953 3903                <2> 	cmp [ebx], eax
  4762 00003955 0F8437000000        <2> 	je near runelf
  4763 0000395B 66813B4558          <2> 	cmp word [ebx], "EX"
  4764 00003960 7577                <2> 	jne progbatchfound
  4765 00003962 81C302000000        <2> 	add ebx, 2
  4766 00003968 8B3D[EC2F0000]      <2> 	mov edi, [currentcommandloc]
  4767 0000396E 81C702000000        <2> 	add edi, 2
  4768                              <2> findspaceprog:
  4769 00003974 8A07                <2> 	mov al, [edi]
  4770 00003976 47                  <2> 	inc edi
  4771 00003977 3C20                <2> 	cmp al, " "
  4772 00003979 75F9                <2> 	jne findspaceprog
  4773                              <2> findnonspaceprog:
  4774 0000397B 8A07                <2> 	mov al, [edi]
  4775 0000397D 47                  <2> 	inc edi
  4776 0000397E 3C20                <2> 	cmp al, " "
  4777 00003980 74F9                <2> 	je findnonspaceprog
  4778 00003982 4F                  <2> 	dec edi
  4779 00003983 8925[E09E0300]      <2> 	mov [previousstack], esp
  4780 00003989 FFD3                <2> 	call ebx
  4781 0000398B 8B25[E09E0300]      <2> 	mov esp, [previousstack]
  4782 00003991 C3                  <2> 	ret
  4783                              <2> runelf:
  4784 00003992 8B3D[EC2F0000]      <2> 	mov edi, [currentcommandloc]
  4785 00003998 81C702000000        <2> 	add edi, 2
  4786 0000399E 81C380000000        <2> 	add ebx, 0x80
  4787 000039A4 8925[E09E0300]      <2> 	mov [previousstack], esp
  4788 000039AA FFD3                <2> 	call ebx
  4789 000039AC 8B25[E09E0300]      <2> 	mov esp, [previousstack]
  4790 000039B2 C3                  <2> 	ret
  4791                              <2> noprogfound:
  4792 000039B3 BE[70870000]        <2> 	mov esi, notfound1
  4793 000039B8 E883E3FFFF          <2> 	call print
  4794 000039BD 8B35[EC2F0000]      <2> 	mov esi, [currentcommandloc]
  4795 000039C3 81C602000000        <2> 	add esi, 2
  4796 000039C9 E872E3FFFF          <2> 	call print
  4797 000039CE BE[78870000]        <2> 	mov esi, notfound2
  4798 000039D3 E868E3FFFF          <2> 	call print
  4799 000039D8 C3                  <2> 	ret
  4800                              <2> progbatchfound:
  4801 000039D9 BF00004000          <2> 		mov edi, 0x400000
  4802 000039DE C605[5AA10300]01    <2> 		mov byte [BATCHISON], 1
  4803                              <2> 	batchrunloop:
  4804 000039E5 E814F3FFFF          <2> 		call buftxtclear
  4805 000039EA BE[60B50300]        <2> 		mov esi, buftxt
  4806 000039EF 8935[EC2F0000]      <2> 		mov [currentcommandloc], esi
  4807                              <2> 	batchrunloop2:
  4808 000039F5 B10A                <2> 		mov cl, 10
  4809 000039F7 B50D                <2> 		mov ch, 13
  4810 000039F9 380F                <2> 		cmp [edi], cl
  4811 000039FB 0F841C000000        <2> 		je near nxtbatchrunline
  4812 00003A01 382F                <2> 		cmp [edi], ch
  4813 00003A03 0F8414000000        <2> 		je near nxtbatchrunline
  4814 00003A09 803F00              <2> 		cmp byte [edi], 0
  4815 00003A0C 0F840B000000        <2> 		je near nxtbatchrunline
  4816 00003A12 8A07                <2> 		mov al, [edi]
  4817 00003A14 8806                <2> 		mov [esi], al
  4818 00003A16 46                  <2> 		inc esi
  4819 00003A17 47                  <2> 		inc edi
  4820 00003A18 E9D8FFFFFF          <2> 		jmp batchrunloop2
  4821                              <2> 	nxtbatchrunline:
  4822 00003A1D 47                  <2> 		inc edi
  4823 00003A1E 380F                <2> 		cmp [edi], cl
  4824 00003A20 74FB                <2> 		je nxtbatchrunline
  4825 00003A22 382F                <2> 		cmp [edi], ch
  4826 00003A24 74F7                <2> 		je nxtbatchrunline
  4827 00003A26 893D[843A0000]      <2> 		mov [batchedi], edi
  4828 00003A2C 893D[56A10300]      <2> 		mov [BATCHPOS], edi
  4829 00003A32 C60600              <2> 		mov byte [esi], 0
  4830 00003A35 BE[60B50300]        <2> 		mov esi, buftxt
  4831 00003A3A 803E00              <2> 		cmp byte [esi], 0
  4832 00003A3D 0F8439000000        <2> 		je near nobatchfoundrun
  4833 00003A43 31DB                <2> 		xor ebx, ebx
  4834 00003A45 8A1D[F1A00300]      <2> 		mov bl, [IFON]
  4835 00003A4B 80FB00              <2> 		cmp bl, 0
  4836 00003A4E 0F8534000000        <2> 		jne near iftestbatch
  4837                              <2> 	doneiftest:
  4838 00003A54 803D[5D3B0000]00    <2> 		cmp byte [runnextline], 0
  4839 00003A5B 0F8405000000        <2> 		je near noruniftest
  4840 00003A61 E8AAF4FFFF          <2> 		call run
  4841                              <2> 	noruniftest:
  4842 00003A66 C605[5D3B0000]01    <2> 		mov byte [runnextline], 1
  4843 00003A6D 8B3D[843A0000]      <2> 		mov edi, [batchedi]
  4844 00003A73 803F00              <2> 		cmp byte [edi], 0
  4845 00003A76 0F8569FFFFFF        <2> 		jne near batchrunloop
  4846                              <2> 	nobatchfoundrun:
  4847 00003A7C C605[5AA10300]00    <2> 		mov byte [BATCHISON], 0
  4848 00003A83 C3                  <2> 		ret
  4849                              <2> 	
  4850 00003A84 00000000            <2> batchedi dd 0	
  4851                              <2> 	
  4852                              <2> 	iftestbatch:
  4853 00003A88 BE[F2A00300]        <2> 		mov esi, IFTRUE
  4854 00003A8D 01DE                <2> 		add esi, ebx
  4855 00003A8F 803E00              <2> 		cmp byte [esi], 0
  4856 00003A92 0F85BCFFFFFF        <2> 		jne near doneiftest
  4857 00003A98 881D[5E3B0000]      <2> 		mov [iffalsebuf], bl
  4858 00003A9E 803D[5BA10300]01    <2> 		cmp byte [LOOPON], 1
  4859 00003AA5 0F8513000000        <2> 		jne near fifindbatch
  4860 00003AAB E935FFFFFF          <2> 		jmp batchrunloop
  4861                              <2> 	elsetestbatch:
  4862 00003AB0 C60601              <2> 		mov byte [esi], 1
  4863 00003AB3 81C705000000        <2> 		add edi, 5
  4864 00003AB9 E927FFFFFF          <2> 		jmp batchrunloop
  4865                              <2> 	fifindbatch:
  4866 00003ABE 66B96966            <2> 		mov cx, "if"
  4867 00003AC2 66B86669            <2> 		mov ax, "fi"
  4868 00003AC6 663907              <2> 		cmp [edi], ax
  4869 00003AC9 0F8424000000        <2> 		je near fifoundbatch
  4870 00003ACF 66390F              <2> 		cmp [edi], cx
  4871 00003AD2 0F8468000000        <2> 		je near iffoundbatch
  4872 00003AD8 803F00              <2> 		cmp byte [edi], 0
  4873 00003ADB 0F8412000000        <2> 		je near fifoundbatch
  4874 00003AE1 B8656C7365          <2> 		mov eax, "else"
  4875 00003AE6 3907                <2> 		cmp [edi], eax
  4876 00003AE8 0F84C2FFFFFF        <2> 		je near elsetestbatch
  4877 00003AEE E973FFFFFF          <2> 		jmp noruniftest
  4878                              <2> 	fifoundbatch:
  4879 00003AF3 81C702000000        <2> 		add edi, 2
  4880 00003AF9 B00A                <2> 		mov al, 10
  4881 00003AFB 3807                <2> 		cmp [edi], al
  4882 00003AFD 0F840E000000        <2> 		je near goodfibatch
  4883 00003B03 803F00              <2> 		cmp byte [edi], 0
  4884 00003B06 0F8470FFFFFF        <2> 		je near nobatchfoundrun
  4885 00003B0C E9ADFFFFFF          <2> 		jmp fifindbatch
  4886                              <2> 	goodfibatch:
  4887 00003B11 B001                <2> 		mov al, 1
  4888 00003B13 2805[F1A00300]      <2> 		sub [IFON], al 
  4889 00003B19 A0[F1A00300]        <2> 		mov al, [IFON]
  4890 00003B1E 8A1D[5E3B0000]      <2> 		mov bl, [iffalsebuf]
  4891 00003B24 38D8                <2> 		cmp al, bl
  4892 00003B26 7796                <2> 		ja fifindbatch
  4893 00003B28 8B35[EC2F0000]      <2> 		mov esi, [currentcommandloc]
  4894 00003B2E 81EF02000000        <2> 		sub edi, 2
  4895 00003B34 C605[5D3B0000]00    <2> 		mov byte [runnextline], 0
  4896 00003B3B E9A5FEFFFF          <2> 		jmp batchrunloop
  4897                              <2> 	iffoundbatch:
  4898 00003B40 B020                <2> 		mov al, ' '
  4899 00003B42 81C702000000        <2> 		add edi, 2
  4900 00003B48 3807                <2> 		cmp [edi], al
  4901 00003B4A 0F856EFFFFFF        <2> 		jne near fifindbatch
  4902 00003B50 B001                <2> 		mov al, 1
  4903 00003B52 0005[F1A00300]      <2> 		add [IFON], al
  4904 00003B58 E961FFFFFF          <2> 		jmp fifindbatch
  4905                              <2> 		
  4906                              <2> 		
  4907 00003B5D 01                  <2> runnextline db 1
  4908 00003B5E 00                  <2> iffalsebuf db 0
  4909 00003B5F C3                  <2> notbatch: ret 
  4910                              <1> %ifdef network.included
  4911                              <1> 	%include 'source/programs/arp.asm'
  4912                              <1> %endif
  4913                              <1> %include 'source/programs/batch.asm'
  4914 00003B60 FF2C626174636800    <2> db 255,44,"batch",0
  4915                              <2> 	batchst: 
  4916 00003B68 8B3D[EC2F0000]      <2> 		mov edi, [currentcommandloc]
  4917 00003B6E 81C706000000        <2> 		add edi, 6
  4918 00003B74 803F00              <2> 		cmp byte [edi], 0
  4919 00003B77 0F846D000000        <2> 		je near nonamefound
  4920 00003B7D BE00004000          <2> 		mov esi, 0x400000
  4921 00003B82 E8922C0000          <2> 		call loadfile
  4922 00003B87 89D0                <2> 		mov eax, edx
  4923 00003B89 3D94010000          <2> 		cmp eax, 404
  4924 00003B8E 7465                <2> 		je goodbatchname
  4925 00003B90 BE[9B3B0000]        <2> 		mov esi, badbatchname
  4926 00003B95 E8A6E1FFFF          <2> 		call print
  4927 00003B9A C3                  <2> 		ret
  4928 00003B9B 546869732066696C65- <2> 		badbatchname db "This file already exists!",10,0
  4929 00003BA4 20616C726561647920- <2>
  4930 00003BAD 657869737473210A00  <2>
  4931 00003BB6 596F75206861766520- <2> 		namenotfoundbatch db "You have to type a name after the command.",10,0
  4932 00003BBF 746F20747970652061- <2>
  4933 00003BC8 206E616D6520616674- <2>
  4934 00003BD1 65722074686520636F- <2>
  4935 00003BDA 6D6D616E642E0A00    <2>
  4936 00003BE2 00000000            <2> 		esicache3 dd 0
  4937 00003BE6 00000000            <2> 		esicache2 dd 0
  4938                              <2> 	nonamefound:
  4939 00003BEA BE[B63B0000]        <2> 		mov esi, namenotfoundbatch
  4940 00003BEF E84CE1FFFF          <2> 		call print
  4941 00003BF4 C3                  <2> 		ret
  4942                              <2> 	goodbatchname:
  4943 00003BF5 BE00004000          <2> 		mov esi, 0x400000
  4944                              <2> 	batchcreate:
  4945 00003BFA 8935[E23B0000]      <2> 		mov [esicache3], esi
  4946 00003C00 BF00008000          <2> 		mov edi, 0x800000
  4947 00003C05 B00A                <2> 		mov al, 10
  4948 00003C07 B307                <2> 		mov bl, 7
  4949 00003C09 B404                <2> 		mov ah, 4
  4950 00003C0B CD30                <2> 		int 30h
  4951 00003C0D 8935[E63B0000]      <2> 		mov [esicache2], esi
  4952 00003C13 8A0E                <2> 		mov cl, [esi]
  4953 00003C15 8B35[E23B0000]      <2> 		mov esi, [esicache3]
  4954 00003C1B BB[523C0000]        <2> 		mov ebx, exitword
  4955 00003C20 E80CF4FFFF          <2> 		call cndtest
  4956 00003C25 3C01                <2> 		cmp al, 1
  4957 00003C27 7414                <2> 		je endbatchcreate
  4958 00003C29 3C02                <2> 		cmp al, 2
  4959 00003C2B 7410                <2> 		je endbatchcreate
  4960 00003C2D 8B35[E63B0000]      <2> 		mov esi, [esicache2]
  4961 00003C33 B00A                <2> 		mov al, 10
  4962 00003C35 8806                <2> 		mov [esi], al
  4963 00003C37 46                  <2> 		inc esi
  4964 00003C38 E9BDFFFFFF          <2> 		jmp batchcreate
  4965                              <2> 	endbatchcreate:
  4966 00003C3D 8B35[E23B0000]      <2> 		mov esi, [esicache3]
  4967 00003C43 31C0                <2> 		xor eax, eax
  4968 00003C45 8806                <2> 		mov [esi], al
  4969 00003C47 BE00004000          <2> 		mov esi, 0x400000
  4970 00003C4C E8EFE0FFFF          <2> 		call print
  4971 00003C51 C3                  <2> 		ret
  4972                              <2> 	
  4973 00003C52 5C7800              <2> 	exitword db "\x",0
  4974 00003C55 54797065205C782074- <2> 	wordmsg db "Type \x to exit.",10,0
  4975 00003C5E 6F20657869742E0A00  <2>
  4976                              <1> %ifdef gui.background
  4977                              <1> 	%include 'source/programs/background.asm'
  4978                              <1> %endif
  4979                              <1> %include 'source/programs/beep.asm'
  4980 00003C67 FF2C6265657000      <2> 	db 255,44,"beep",0
  4981                              <2> beep:
  4982 00003C6E B8[933C0000]        <2> 	mov eax, beepstart
  4983 00003C73 A3[63020000]        <2> 	mov [soundpos], eax
  4984 00003C78 B8[973C0000]        <2> 	mov eax, beepend
  4985 00003C7D A3[67020000]        <2> 	mov [soundendpos], eax
  4986 00003C82 C605[60020000]01    <2> 	mov byte [soundon], 1
  4987                              <2> waitforsoundendbeep:
  4988 00003C89 A0[60020000]        <2> 	mov al, [soundon]
  4989 00003C8E 3C00                <2> 	cmp al, 0
  4990 00003C90 75F7                <2> 	jne waitforsoundendbeep
  4991 00003C92 C3                  <2> 	ret
  4992                              <2> 	
  4993                              <2> beepstart:
  4994 00003C93 3200D111            <2> 	dw 50, 4561
  4995                              <2> beepend:
  4996                              <1> %ifdef dos.compatible
  4997                              <1> %else
  4998                              <1> 	%include 'source/programs/boot.asm'
  4999 00003C97 FF2C626F6F7400      <2> db 255,44,"boot",0
  5000                              <2> quickboot:
  5001                              <2> 	;load and jump to the bootloader
  5002                              <2> 	; mov ecx, 1
  5003                              <2> 	; xor ebx, ebx
  5004                              <2> 	; mov esi, 0x400000
  5005                              <2> 	; call diskr
  5006                              <2> 	; mov ax, LINEAR_SEL
  5007                              <2> 	; mov fs, ax
  5008                              <2> 	; mov esi, 0x400000
  5009                              <2> 	; mov edi, 0x7C00
  5010                              <2> 	; xor ebx, ebx
  5011                              <2> ; .lp:
  5012                              <2> 	; mov ecx, [esi+ebx]
  5013                              <2> 	; mov [fs:edi+ebx], ecx
  5014                              <2> 	; add ebx, 4
  5015                              <2> 	; cmp ebx, 512
  5016                              <2> 	; jb .lp
  5017 00003C9E 66BB[AE3C]          <2> 	mov bx, bootload
  5018 00003CA2 66891D[E30C0000]    <2> 	mov [realmodeptr], bx
  5019 00003CA9 E91ACFFFFF          <2> 	jmp realmode
  5020                              <2> [BITS 16]
  5021                              <2> bootload:
  5022 00003CAE B80300              <2> 	mov ax, 3
  5023 00003CB1 31DB                <2> 	xor bx, bx
  5024 00003CB3 CD10                <2> 	int 10h
  5025 00003CB5 EA007C0000          <2> 	jmp 0:0x7C00
  5026                              <2> [BITS 32]
  5027                              <1> %endif
  5028                              <1> %include 'source/programs/cd.asm'
  5029 00003CBA FF2C636400          <2> db 255,44,"cd",0
  5030                              <2> cd:
  5031 00003CBF 8B35[EC2F0000]      <2> 	mov esi, [currentcommandloc]
  5032 00003CC5 81C603000000        <2> 	add esi, 3
  5033 00003CCB 8B3D[E89E0300]      <2> 	mov edi, [currentfolderloc]
  5034 00003CD1 893D[E49E0300]      <2> 	mov [lastfolderloc], edi
  5035 00003CD7 81C7[EC9E0300]      <2> 	add edi, currentfolder
  5036 00003CDD 4F                  <2> 	dec edi
  5037 00003CDE 66813E2E2E          <2> 	cmp word [esi], ".."
  5038 00003CE3 742A                <2> 	je .moveup
  5039 00003CE5 47                  <2> 	inc edi
  5040                              <2> .movedown:
  5041 00003CE6 8A06                <2> 	mov al, [esi]
  5042 00003CE8 8807                <2> 	mov [edi], al
  5043 00003CEA 47                  <2> 	inc edi
  5044 00003CEB 46                  <2> 	inc esi
  5045 00003CEC 3C00                <2> 	cmp al, 0
  5046 00003CEE 740A                <2> 	je .donecd
  5047 00003CF0 81FF[ECA00300]      <2> 	cmp edi, currentfolderend
  5048 00003CF6 72EE                <2> 	jb .movedown
  5049 00003CF8 30C0                <2> 	xor al, al
  5050                              <2> .donecd:
  5051 00003CFA 4F                  <2> 	dec edi
  5052 00003CFB C6072F              <2> 	mov byte [edi], '/'
  5053 00003CFE 47                  <2> 	inc edi
  5054 00003CFF C60700              <2> 	mov byte [edi], 0
  5055 00003D02 81EF[EC9E0300]      <2> 	sub edi, currentfolder
  5056 00003D08 893D[E89E0300]      <2> 	mov [currentfolderloc], edi
  5057 00003D0E C3                  <2> 	ret
  5058                              <2> .moveup:
  5059 00003D0F 31C0                <2> 	xor eax, eax
  5060 00003D11 A3[E49E0300]        <2> 	mov [lastfolderloc], eax
  5061                              <2> .moveuploop:
  5062 00003D16 4F                  <2> 	dec edi
  5063 00003D17 8A07                <2> 	mov al, [edi]
  5064 00003D19 81FF[EC9E0300]      <2> 	cmp edi, currentfolder
  5065 00003D1F 763B                <2> 	jbe .moveupover
  5066 00003D21 3C2F                <2> 	cmp al, '/'
  5067 00003D23 75F1                <2> 	jne .moveuploop
  5068 00003D25 C6072F              <2> 	mov byte [edi], '/'
  5069 00003D28 47                  <2> 	inc edi
  5070 00003D29 C60700              <2> 	mov byte [edi], 0
  5071 00003D2C 81EF[EC9E0300]      <2> 	sub edi, currentfolder
  5072 00003D32 893D[E89E0300]      <2> 	mov [currentfolderloc], edi
  5073 00003D38 81C7[EC9E0300]      <2> 	add edi, currentfolder
  5074 00003D3E 4F                  <2> 	dec edi
  5075                              <2> .lastfolder:
  5076 00003D3F 4F                  <2> 	dec edi
  5077 00003D40 8A07                <2> 	mov al, [edi]
  5078 00003D42 81FF[EC9E0300]      <2> 	cmp edi, currentfolder
  5079 00003D48 7604                <2> 	jbe .donemoveup
  5080 00003D4A 3C2F                <2> 	cmp al, '/'
  5081 00003D4C 75F1                <2> 	jne .lastfolder
  5082                              <2> .donemoveup:
  5083 00003D4E 47                  <2> 	inc edi
  5084 00003D4F 81EF[EC9E0300]      <2> 	sub edi, currentfolder
  5085 00003D55 893D[E49E0300]      <2> 	mov [lastfolderloc], edi
  5086 00003D5B C3                  <2> 	ret
  5087                              <2> .moveupover:
  5088 00003D5C BF[EC9E0300]        <2> 	mov edi, currentfolder
  5089 00003D61 C6072F              <2> 	mov byte [edi], '/'
  5090 00003D64 47                  <2> 	inc edi
  5091 00003D65 C60700              <2> 	mov byte [edi], 0
  5092 00003D68 31C0                <2> 	xor eax, eax
  5093 00003D6A A3[E49E0300]        <2> 	mov [lastfolderloc], eax
  5094 00003D6F 40                  <2> 	inc eax
  5095 00003D70 A3[E89E0300]        <2> 	mov [currentfolderloc], eax
  5096 00003D75 C3                  <2> 	ret
  5097                              <1> %include 'source/programs/charmap.asm'
  5098 00003D76 00                  <2> charmapnum db 0
  5099 00003D77 FF2C636861726D6170- <2> db 255,44,"charmap",0
  5100 00003D80 00                  <2>
  5101 00003D81 8B35[EC2F0000]      <2> 	mov esi, [currentcommandloc]
  5102 00003D87 81C609000000        <2> 	add esi, 9
  5103 00003D8D 803E00              <2> 	cmp byte [esi], 0
  5104 00003D90 7412                <2> 	je .nospecific
  5105 00003D92 E806F6FFFF          <2> 	call cnvrthextxt
  5106 00003D97 6689C8              <2> 	mov ax, cx
  5107 00003D9A 66BB0700            <2> 	mov bx, 7
  5108 00003D9E E849E6FFFF          <2> 	call prcharq
  5109 00003DA3 C3                  <2> 	ret
  5110                              <2> .nospecific:
  5111 00003DA4 66BB0700            <2> 	mov bx, 7
  5112 00003DA8 66B82000            <2> 	mov ax, " "
  5113 00003DAC C605[763D0000]00    <2> 	mov byte [charmapnum], 0
  5114 00003DB3 E834E6FFFF          <2> 	call prcharq
  5115 00003DB8 E82FE6FFFF          <2> 	call prcharq
  5116 00003DBD E82AE6FFFF          <2> 	call prcharq
  5117 00003DC2 E825E6FFFF          <2> 	call prcharq
  5118 00003DC7 66B83000            <2> 	mov ax, "0"
  5119                              <2> charmapnumprnt:
  5120 00003DCB E81CE6FFFF          <2> 	call prcharq
  5121 00003DD0 6640                <2> 	inc ax
  5122 00003DD2 6650                <2> 	push ax
  5123 00003DD4 66B82000            <2> 	mov ax, " "
  5124 00003DD8 E80FE6FFFF          <2> 	call prcharq
  5125 00003DDD 6658                <2> 	pop ax
  5126 00003DDF 663D3900            <2> 	cmp ax, "9"
  5127 00003DE3 76E6                <2> 	jbe charmapnumprnt
  5128 00003DE5 66B84100            <2> 	mov ax, "A"
  5129                              <2> charmapnumprnt2:
  5130 00003DE9 E8FEE5FFFF          <2> 	call prcharq
  5131 00003DEE 6640                <2> 	inc ax
  5132 00003DF0 6650                <2> 	push ax
  5133 00003DF2 66B82000            <2> 	mov ax, " "
  5134 00003DF6 E8F1E5FFFF          <2> 	call prcharq
  5135 00003DFB 6658                <2> 	pop ax
  5136 00003DFD 663D4700            <2> 	cmp ax, "G"
  5137 00003E01 72E6                <2> 	jb charmapnumprnt2
  5138                              <2> 	
  5139 00003E03 BE[A9870000]        <2> 	mov esi, line
  5140 00003E08 E814DFFFFF          <2> 	call printquiet
  5141 00003E0D 6631C0              <2> 	xor ax, ax
  5142 00003E10 6689C1              <2> 	mov cx, ax
  5143 00003E13 E80EF4FFFF          <2> 	call showhexsmall
  5144 00003E18 E973000000          <2> 	jmp charmapnocopy ;the first char is 0 which is unprintable
  5145                              <2> charmapcopy:
  5146 00003E1D 6640                <2> 	inc ax
  5147 00003E1F 6650                <2> 	push ax
  5148 00003E21 663D0800            <2> 	cmp ax, 8
  5149 00003E25 7469                <2> 	je charmapnocopy
  5150 00003E27 663D0900            <2> 	cmp ax, 9
  5151 00003E2B 7463                <2> 	je charmapnocopy
  5152 00003E2D 663D0A00            <2> 	cmp ax, 10
  5153 00003E31 745D                <2> 	je charmapnocopy
  5154 00003E33 663D0D00            <2> 	cmp ax, 13
  5155 00003E37 7457                <2> 	je charmapnocopy
  5156 00003E39 663DFF00            <2> 	cmp ax, 255
  5157 00003E3D 7451                <2> 	je charmapnocopy
  5158 00003E3F 663D0001            <2> 	cmp ax, 256
  5159 00003E43 7446                <2> 	je nomorecharmap
  5160 00003E45 E8A2E5FFFF          <2> 	call prcharq
  5161 00003E4A 66B82000            <2> 	mov ax, " "
  5162 00003E4E E899E5FFFF          <2> 	call prcharq
  5163 00003E53 6658                <2> 	pop ax
  5164                              <2> charmapcopycheck:
  5165 00003E55 FE05[763D0000]      <2> 	inc byte [charmapnum]
  5166 00003E5B 803D[763D0000]10    <2> 	cmp byte [charmapnum], 16
  5167 00003E62 72B9                <2> 	jb charmapcopy
  5168 00003E64 6650                <2> 	push ax
  5169 00003E66 BE[A9870000]        <2> 	mov esi, line
  5170 00003E6B E8B1DEFFFF          <2> 	call printquiet
  5171 00003E70 6658                <2> 	pop ax
  5172 00003E72 3CFF                <2> 	cmp al, 255
  5173 00003E74 7415                <2> 	je nomorecharmap
  5174 00003E76 88C1                <2> 	mov cl, al
  5175 00003E78 FEC1                <2> 	inc cl
  5176 00003E7A E8A7F3FFFF          <2> 	call showhexsmall
  5177 00003E7F C605[763D0000]00    <2> 	mov byte [charmapnum], 0
  5178 00003E86 E992FFFFFF          <2> 	jmp charmapcopy
  5179                              <2> nomorecharmap:
  5180 00003E8B E997EEFFFF          <2> 	jmp nwcmd
  5181                              <2> charmapnocopy:
  5182 00003E90 6650                <2> 	push ax
  5183 00003E92 66B82000            <2> 	mov ax, " "
  5184 00003E96 E851E5FFFF          <2> 	call prcharq
  5185 00003E9B E84CE5FFFF          <2> 	call prcharq
  5186 00003EA0 6658                <2> 	pop ax
  5187 00003EA2 E9AEFFFFFF          <2> 	jmp charmapcopycheck
  5188                              <1> %ifdef gui.included
  5189                              <1> 	%include 'source/programs/circle.asm'
  5190 00003EA7 FF2C636972636C6500  <2> db 255,44,"circle",0
  5191                              <2> circle:
  5192 00003EB0 8B35[EC2F0000]      <2> 	mov esi, [currentcommandloc]
  5193 00003EB6 81C607000000        <2> 	add esi, 7
  5194 00003EBC 66B91000            <2> 	mov cx, 16
  5195 00003EC0 30C0                <2> 	xor al, al
  5196 00003EC2 3806                <2> 	cmp [esi], al
  5197 00003EC4 7405                <2> 	je .nocmdline
  5198 00003EC6 E81EF5FFFF          <2> 	call cnvrttxt
  5199                              <2> .nocmdline:
  5200 00003ECB E81C0B0000          <2> 	call linetester.stime
  5201 00003ED0 E857000000          <2> 	call fcircle.nocmdline
  5202 00003ED5 E82A0B0000          <2> 	call linetester.etime
  5203 00003EDA 53                  <2> 	push ebx
  5204 00003EDB 57                  <2> 	push edi
  5205 00003EDC E878E4FFFF          <2> 	call getchar
  5206 00003EE1 59                  <2> 	pop ecx
  5207 00003EE2 E81DF4FFFF          <2> 	call showdec
  5208 00003EE7 BE[924A0000]        <2> 	mov esi, linetester.msgcircle
  5209 00003EEC E830DEFFFF          <2> 	call printquiet
  5210 00003EF1 59                  <2> 	pop ecx
  5211 00003EF2 E80DF4FFFF          <2> 	call showdec
  5212 00003EF7 BE[A94A0000]        <2> 	mov esi, linetester.msgtime
  5213 00003EFC E820DEFFFF          <2> 	call printquiet
  5214 00003F01 E8C5310000          <2> 	call reloadallgraphics
  5215 00003F06 C3                  <2> 	ret
  5216                              <2> 	
  5217 00003F07 FF2C66636972636C65- <2> db 255,44,"fcircle",0	;attempts to draw many circles without refreshing screen or showing time
  5218 00003F10 00                  <2>
  5219                              <2> fcircle:	
  5220 00003F11 8B35[EC2F0000]      <2> 	mov esi, [currentcommandloc]
  5221 00003F17 81C608000000        <2> 	add esi, 8
  5222 00003F1D 66B91000            <2> 	mov cx, 16
  5223 00003F21 30C0                <2> 	xor al, al
  5224 00003F23 3806                <2> 	cmp [esi], al
  5225 00003F25 7405                <2> 	je .nocmdline
  5226 00003F27 E8BDF4FFFF          <2> 	call cnvrttxt
  5227                              <2> .nocmdline:
  5228 00003F2C 6689C8              <2> 	mov ax, cx
  5229 00003F2F 66D1E1              <2> 	shl cx, 1
  5230 00003F32 6689CA              <2> 	mov dx, cx
  5231 00003F35 663B15[57570000]    <2> 	cmp dx, [resolutionx]
  5232 00003F3C 731B                <2> 	jae .done
  5233 00003F3E 663B0D[59570000]    <2> 	cmp cx, [resolutiony]
  5234 00003F45 7312                <2> 	jae .done
  5235 00003F47 668B35[5E020000]    <2> 	mov si, [timenanoseconds + 2]
  5236 00003F4E 31FF                <2> 	xor edi, edi
  5237 00003F50 803D[CE870000]01    <2> 	cmp byte [guion], 1
  5238 00003F57 7401                <2> 	je .lp
  5239 00003F59 C3                  <2> .done ret
  5240                              <2> .lp:
  5241 00003F5A 6629C2              <2> 	sub dx, ax
  5242 00003F5D 6629C1              <2> 	sub cx, ax
  5243 00003F60 60                  <2> 	pusha
  5244 00003F61 E8842C0000          <2> 	call fillcircle
  5245 00003F66 61                  <2> 	popa
  5246 00003F67 47                  <2> 	inc edi
  5247 00003F68 660335[5C020000]    <2> 	add si, [timenanoseconds]
  5248 00003F6F 6601C2              <2> 	add dx, ax
  5249 00003F72 6601C2              <2> 	add dx, ax
  5250 00003F75 6601C2              <2> 	add dx, ax
  5251 00003F78 6601C1              <2> 	add cx, ax
  5252 00003F7B 663B15[57570000]    <2> 	cmp dx, [resolutionx]
  5253 00003F82 72D6                <2> 	jb .lp
  5254 00003F84 6689C2              <2> 	mov dx, ax
  5255 00003F87 6601C2              <2> 	add dx, ax
  5256 00003F8A 6601C1              <2> 	add cx, ax
  5257 00003F8D 6601C1              <2> 	add cx, ax
  5258 00003F90 663B0D[59570000]    <2> 	cmp cx, [resolutiony]
  5259 00003F97 72C1                <2> 	jb .lp
  5260 00003F99 C3                  <2> 	ret
  5261                              <1> %endif
  5262                              <1> %include 'source/programs/clear.asm'
  5263 00003F9A FF2C636C65617200    <2> db 255,44,"clear",0
  5264 00003FA2 E84BDEFFFF          <2> 		call clear
  5265 00003FA7 C3                  <2> 		ret 
  5266                              <1> %include 'source/programs/cpuid.asm'
  5267 00003FA8 FF2C637075696400    <2> db 255,44,"cpuid",0
  5268 00003FB0 31C0                <2> 	xor eax, eax
  5269 00003FB2 0FA2                <2> 	cpuid
  5270 00003FB4 891D[05400000]      <2> 	mov [cpuidbuf], ebx
  5271 00003FBA 8915[09400000]      <2> 	mov [cpuidbuf + 4], edx
  5272 00003FC0 890D[0D400000]      <2> 	mov [cpuidbuf + 8], ecx
  5273 00003FC6 BE[05400000]        <2> 	mov esi, cpuidbuf
  5274 00003FCB E870DDFFFF          <2> 	call print
  5275 00003FD0 BE[A9870000]        <2> 	mov esi, line
  5276 00003FD5 E866DDFFFF          <2> 	call print
  5277 00003FDA B801000000          <2> 	mov eax, 1
  5278 00003FDF 0FA2                <2> 	cpuid
  5279 00003FE1 89C1                <2> 	mov ecx, eax
  5280 00003FE3 C605[25320000]02    <2> 	mov byte [firsthexshown], 2
  5281 00003FEA E84BF2FFFF          <2> 	call showhex
  5282 00003FEF B808000080          <2> 	mov eax, 0x80000008
  5283 00003FF4 0FA2                <2> 	cpuid
  5284 00003FF6 89C1                <2> 	mov ecx, eax
  5285 00003FF8 C605[25320000]02    <2> 	mov byte [firsthexshown], 2
  5286 00003FFF E836F2FFFF          <2> 	call showhex
  5287 00004004 C3                  <2> 	ret
  5288                              <2> 	
  5289 00004005 00<rept>            <2> cpuidbuf times 13 db 0
  5290                              <2> cpuidvendorend:
  5291                              <1> %include 'source/programs/date.asm'
  5292 00004012 082E30303030303030- <2> timenscache db 8,".000000000"
  5293 0000401B 3030                <2>
  5294 0000401D 200A00              <2> timenscacheend: db " ",10,0
  5295 00004020 00                  <2> istimeset db 0
  5296 00004021 456E74657220746865- <2> settimemsg db "Enter the current UNIX time:",10,0
  5297 0000402A 2063757272656E7420- <2>
  5298 00004033 554E49582074696D65- <2>
  5299 0000403C 3A0A00              <2>
  5300 0000403F 00<rept>            <2> timeinputbuffer times 12 db 0
  5301 0000404B 00                  <2> timeinputbend: db 0
  5302                              <2> 
  5303 0000404C FF2C6461746500      <2> db 255,44,"date",0
  5304                              <2> 	;cmp byte [istimeset], 0
  5305                              <2> 	;jne timeisset
  5306 00004053 E880000000          <2> 	call time
  5307 00004058 E828020000          <2> 	call timeconvert	
  5308                              <2> 	; mov esi, settimemsg
  5309                              <2> 	; call print
  5310                              <2> 	; mov esi, timeinputbuffer
  5311                              <2> 	; mov edi, timeinputbend
  5312                              <2> 	; call readline
  5313                              <2> 	; mov esi, timeinputbuffer
  5314                              <2> 	; xor edi, edi
  5315                              <2> 	; call cnvrttxt
  5316 0000405D 890D[58020000]      <2> 	mov [timeseconds], ecx
  5317                              <2> 	;xor ecx, ecx
  5318                              <2> 	;mov [timenanoseconds], ecx
  5319 00004063 C605[20400000]01    <2> 	mov byte [istimeset], 1
  5320                              <2> timeisset:
  5321 0000406A 8B0D[58020000]      <2> 	mov ecx, [timeseconds]
  5322 00004070 E88FF2FFFF          <2> 	call showdec
  5323                              <2> 	
  5324 00004075 8B0D[5C020000]      <2> 	mov ecx, [timenanoseconds]
  5325 0000407B BE[12400000]        <2> 	mov esi, timenscache
  5326 00004080 C7460230303030      <2> 	mov dword [esi+ 2], "0000"
  5327 00004087 C7460630303030      <2> 	mov dword [esi + 6], "0000"
  5328 0000408E C6460A30            <2> 	mov byte [esi + 10], "0"
  5329 00004092 BE[1D400000]        <2> 	mov esi, timenscacheend
  5330 00004097 E836F0FFFF          <2> 	call convert
  5331 0000409C BE[12400000]        <2> 	mov esi, timenscache
  5332 000040A1 E87BDCFFFF          <2> 	call printquiet
  5333                              <2> 	
  5334 000040A6 E82D000000          <2> 	call time
  5335 000040AB BE[F3430000]        <2> 	mov esi, timeshow
  5336 000040B0 E86CDCFFFF          <2> 	call printquiet
  5337 000040B5 BE[A9870000]        <2> 	mov esi, line
  5338 000040BA E862DCFFFF          <2> 	call printquiet
  5339 000040BF BE[FC430000]        <2> 	mov esi, dateshow
  5340 000040C4 E858DCFFFF          <2> 	call printquiet
  5341 000040C9 BE[A9870000]        <2> 	mov esi, line
  5342 000040CE E84EDCFFFF          <2> 	call printquiet
  5343 000040D3 E9BE000000          <2> 	jmp findday
  5344                              <2> time:
  5345 000040D8 E851010000          <2> 	call tstackput1
  5346 000040DD B00A                <2> 	mov al,10			;Get RTC register A
  5347 000040DF E87B010000          <2> 	call tget1
  5348 000040E4 A880                <2> 	test al,0x80			;Is update in progress?
  5349 000040E6 75F0                <2> 	jne time				; yes, wait
  5350                              <2> 
  5351 000040E8 B000                <2> 	mov al,0			;Get seconds (00 to 59)
  5352 000040EA E870010000          <2> 	call tget1
  5353 000040EF A2[EA430000]        <2> 	mov [RTCtimeSecond],al
  5354                              <2> 
  5355 000040F4 B002                <2> 	mov al,0x02			;Get minutes (00 to 59)
  5356 000040F6 E864010000          <2> 	call tget1
  5357 000040FB A2[EB430000]        <2> 	mov [RTCtimeMinute],al
  5358                              <2> 
  5359 00004100 B004                <2> 	mov al,0x04			;Get hours (see notes)
  5360 00004102 E858010000          <2> 	call tget1
  5361 00004107 A2[EC430000]        <2> 	mov [RTCtimeHour],al
  5362                              <2> 
  5363 0000410C B007                <2> 	mov al,0x07			;Get day of month (01 to 31)
  5364 0000410E E84C010000          <2> 	call tget1
  5365 00004113 A2[ED430000]        <2> 	mov [RTCtimeDay],al
  5366                              <2> 
  5367 00004118 B008                <2> 	mov al,0x08			;Get month (01 to 12)
  5368 0000411A E840010000          <2> 	call tget1
  5369 0000411F 241F                <2> 	and al, 11111b
  5370 00004121 A2[EE430000]        <2> 	mov [RTCtimeMonth],al
  5371                              <2> 
  5372 00004126 B009                <2> 	mov al,0x09			;Get year (00 to 99)
  5373 00004128 E832010000          <2> 	call tget1
  5374 0000412D A2[EF430000]        <2> 	mov [RTCtimeYear],al
  5375                              <2> 	
  5376 00004132 BE[F3430000]        <2> 	mov esi, timeshow
  5377 00004137 8A2D[EC430000]      <2> 	mov ch, [RTCtimeHour]
  5378 0000413D E828010000          <2> 	call tput1
  5379 00004142 8A2D[EB430000]      <2> 	mov ch, [RTCtimeMinute]
  5380 00004148 E81D010000          <2> 	call tput1
  5381 0000414D 8A2D[EA430000]      <2> 	mov ch, [RTCtimeSecond]
  5382 00004153 E812010000          <2> 	call tput1
  5383 00004158 BE[FC430000]        <2> 	mov esi, dateshow
  5384 0000415D 8A2D[EE430000]      <2> 	mov ch, [RTCtimeMonth]
  5385 00004163 E802010000          <2> 	call tput1
  5386 00004168 8A2D[ED430000]      <2> 	mov ch, [RTCtimeDay]
  5387 0000416E E8F7000000          <2> 	call tput1
  5388 00004173 B520                <2> 	mov ch, 0x20
  5389 00004175 E8F0000000          <2> 	call tput1
  5390 0000417A 4E                  <2> 	dec esi
  5391 0000417B 8A2D[EF430000]      <2> 	mov ch, [RTCtimeYear]
  5392 00004181 E8E4000000          <2> 	call tput1
  5393 00004186 E8BD000000          <2> 	call tstackget1
  5394 0000418B C3                  <2> 	ret
  5395 0000418C BE[F3430000]        <2> 	mov esi, timeshow
  5396 00004191 E8AADBFFFF          <2> 	call print
  5397                              <2> ;;get day of week
  5398                              <2> ;;add these:
  5399                              <2> ;;century value
  5400                              <2> ;;last 2 digits of year
  5401                              <2> ;;last 2 digits of year right shifted twice
  5402                              <2> ;;month table value
  5403                              <2> ;;day of the month
  5404                              <2> ;;divide these by 7
  5405                              <2> ;;the remainder is the day
  5406                              <2> findday:
  5407 00004196 31C0                <2> 	xor eax, eax
  5408                              <2> ;;first convert the values from BCD to hex
  5409 00004198 A0[ED430000]        <2> 	mov al, [RTCtimeDay]
  5410 0000419D E873000000          <2> 	call converttohex
  5411 000041A2 8825[F0430000]      <2> 	mov [dayhex], ah
  5412 000041A8 A0[EE430000]        <2> 	mov al, [RTCtimeMonth]
  5413 000041AD E863000000          <2> 	call converttohex
  5414 000041B2 8825[F1430000]      <2> 	mov [monthhex], ah
  5415 000041B8 A0[EF430000]        <2> 	mov al, [RTCtimeYear]
  5416 000041BD E853000000          <2> 	call converttohex
  5417 000041C2 8825[F2430000]      <2> 	mov [yearhex], ah
  5418 000041C8 31C0                <2> 	xor eax, eax
  5419 000041CA A0[F2430000]        <2> 	mov al, [yearhex]
  5420 000041CF C0E802              <2> 	shr al, 2
  5421 000041D2 0205[F2430000]      <2> 	add al, [yearhex]
  5422 000041D8 0506000000          <2> 	add eax, 6
  5423 000041DD 31DB                <2> 	xor ebx, ebx
  5424 000041DF 8A1D[F1430000]      <2> 	mov bl, [monthhex]
  5425 000041E5 FECB                <2> 	dec bl
  5426 000041E7 81C3[11440000]      <2> 	add ebx, month
  5427 000041ED 31C9                <2> 	xor ecx, ecx
  5428 000041EF 8A0B                <2> 	mov cl, [ebx]
  5429 000041F1 01C8                <2> 	add eax, ecx
  5430 000041F3 8A0D[F0430000]      <2> 	mov cl, [dayhex]
  5431 000041F9 01C8                <2> 	add eax, ecx
  5432 000041FB 66BB0700            <2> 	mov bx, 7
  5433 000041FF 31D2                <2> 	xor edx, edx
  5434 00004201 66F7F3              <2> 	div bx
  5435 00004204 C1E202              <2> 	shl edx, 2
  5436 00004207 81C2[1D440000]      <2> 	add edx, day
  5437 0000420D 8B32                <2> 	mov esi, [edx]
  5438 0000420F E82CDBFFFF          <2> 	call print
  5439 00004214 C3                  <2> 	ret
  5440                              <2> 	
  5441                              <2> converttohex:
  5442 00004215 88C4                <2> 	mov ah, al
  5443 00004217 C0E804              <2> 	shr al, 4
  5444 0000421A C0E404              <2> 	shl ah, 4
  5445 0000421D C0EC04              <2> 	shr ah, 4
  5446 00004220 3C00                <2> 	cmp al, 0
  5447 00004222 7409                <2> 	je noconverttohex
  5448                              <2> converttohexlp:
  5449 00004224 80C40A              <2> 	add ah, 10
  5450 00004227 FEC8                <2> 	dec al
  5451 00004229 3C00                <2> 	cmp al, 0
  5452 0000422B 75F7                <2> 	jne converttohexlp
  5453                              <2> noconverttohex:
  5454 0000422D C3                  <2> 	ret
  5455                              <2> 	
  5456                              <2> tstackput1:
  5457 0000422E 8935[E6430000]      <2> 	mov [tstack + 20], esi
  5458 00004234 BE[D2430000]        <2> 	mov esi, tstack
  5459 00004239 8906                <2> 	mov [esi], eax
  5460 0000423B 895E04              <2> 	mov [esi + 4], ebx
  5461 0000423E 894E08              <2> 	mov [esi + 8], ecx
  5462 00004241 89560C              <2> 	mov [esi + 12], edx
  5463 00004244 897E10              <2> 	mov [esi + 16], edi
  5464 00004247 C3                  <2> 	ret
  5465                              <2> 	
  5466                              <2> tstackget1:
  5467 00004248 BE[D2430000]        <2> 	mov esi, tstack
  5468 0000424D 8B06                <2> 	mov eax, [esi]
  5469 0000424F 8B5E04              <2> 	mov ebx, [esi + 4]
  5470 00004252 8B4E08              <2> 	mov ecx, [esi + 8]
  5471 00004255 8B560C              <2> 	mov edx, [esi + 12]
  5472 00004258 8B7E10              <2> 	mov edi, [esi + 16]
  5473 0000425B 8B7614              <2> 	mov esi, [esi + 20]
  5474 0000425E C3                  <2> 	ret
  5475                              <2> 	
  5476                              <2> tget1:
  5477 0000425F 66BA7000            <2> 	mov dx, 0x70
  5478 00004263 EE                  <2> 	out dx, al
  5479 00004264 6642                <2> 	inc dx
  5480 00004266 EC                  <2> 	in al, dx
  5481 00004267 664A                <2> 	dec dx
  5482 00004269 C3                  <2> 	ret
  5483                              <2> 	
  5484                              <2> tput1:
  5485 0000426A 66C1E904            <2> 	shr cx, 4
  5486 0000426E B030                <2> 	mov al, 48
  5487 00004270 00E8                <2> 	add al, ch
  5488 00004272 8806                <2> 	mov [esi], al
  5489 00004274 46                  <2> 	inc esi
  5490 00004275 B030                <2> 	mov al, 48
  5491 00004277 C0E904              <2> 	shr cl, 4
  5492 0000427A 00C8                <2> 	add al, cl
  5493 0000427C 8806                <2> 	mov [esi], al
  5494 0000427E 81C602000000        <2> 	add esi, 2
  5495 00004284 C3                  <2> 	ret
  5496                              <2> 	
  5497                              <2> timeconvert: ;return time in the RTCtime stuff in ecx
  5498 00004285 31DB                <2> 	xor ebx, ebx
  5499 00004287 31C9                <2> 	xor ecx, ecx
  5500 00004289 31FF                <2> 	xor edi, edi
  5501 0000428B 31F6                <2> 	xor esi, esi
  5502                              <2> 	
  5503 0000428D A0[EA430000]        <2> 	mov al, [RTCtimeSecond]
  5504 00004292 E87EFFFFFF          <2> 	call converttohex
  5505 00004297 88E1                <2> 	mov cl, ah
  5506                              <2> 	
  5507 00004299 A0[EB430000]        <2> 	mov al, [RTCtimeMinute]
  5508 0000429E E872FFFFFF          <2> 	call converttohex
  5509 000042A3 88E3                <2> 	mov bl, ah
  5510 000042A5 B83C000000          <2> 	mov eax, 60
  5511 000042AA 31D2                <2> 	xor edx, edx
  5512 000042AC F7E3                <2> 	mul ebx
  5513 000042AE 01C1                <2> 	add ecx, eax
  5514                              <2> 	
  5515 000042B0 A0[EC430000]        <2> 	mov al, [RTCtimeHour]
  5516 000042B5 E85BFFFFFF          <2> 	call converttohex
  5517 000042BA 88E3                <2> 	mov bl, ah
  5518 000042BC B8100E0000          <2> 	mov eax, 3600
  5519 000042C1 31D2                <2> 	xor edx, edx
  5520 000042C3 F7E3                <2> 	mul ebx
  5521 000042C5 01C1                <2> 	add ecx, eax
  5522                              <2> 		
  5523 000042C7 31C0                <2> 	xor eax, eax
  5524 000042C9 A0[EF430000]        <2> 	mov al, [RTCtimeYear]
  5525 000042CE E842FFFFFF          <2> 	call converttohex
  5526 000042D3 6689C6              <2> 	mov si, ax
  5527 000042D6 66C1EE08            <2> 	shr si, 8
  5528 000042DA 6681FE4600          <2> 	cmp si, 70
  5529 000042DF 7705                <2> 	ja .no100
  5530 000042E1 6681C66400          <2> 	add si, 100
  5531                              <2> .no100:
  5532 000042E6 6681C66C07          <2> 	add si, 1900
  5533                              <2> 	
  5534 000042EB BB[C4430000]        <2> 	mov ebx, .month
  5535 000042F0 A0[ED430000]        <2> 	mov al, [RTCtimeDay]
  5536 000042F5 E81BFFFFFF          <2> 	call converttohex
  5537 000042FA 88E0                <2> 	mov al, ah
  5538 000042FC FEC8                <2> 	dec al
  5539 000042FE 31D2                <2> 	xor edx, edx
  5540 00004300 88C2                <2> 	mov dl, al
  5541 00004302 A0[EE430000]        <2> 	mov al, [RTCtimeMonth]
  5542 00004307 E809FFFFFF          <2> 	call converttohex
  5543 0000430C 88D0                <2> 	mov al, dl
  5544 0000430E 88E2                <2> 	mov dl, ah
  5545 00004310 30E4                <2> 	xor ah, ah
  5546 00004312 6689D5              <2> 	mov bp, dx
  5547                              <2> 	
  5548 00004315 6689F7              <2> 	mov di, si
  5549 00004318 66C1EF02            <2> 	shr di, 2
  5550 0000431C 66C1E702            <2> 	shl di, 2
  5551 00004320 C605[C5430000]1C    <2> 	mov byte [.month + 1], 28
  5552 00004327 6639F7              <2> 	cmp di, si
  5553 0000432A 7506                <2> 	jne .nofebmod
  5554 0000432C FE05[C5430000]      <2> 	inc byte [.month + 1]
  5555                              <2> .nofebmod:
  5556 00004332 664D                <2> 	dec bp
  5557 00004334 6681FD0000          <2> 	cmp bp, 0
  5558 00004339 740A                <2> 	je .ylp
  5559 0000433B 8A13                <2> 	mov dl, [ebx]
  5560 0000433D 01D0                <2> 	add eax, edx
  5561 0000433F 43                  <2> 	inc ebx
  5562 00004340 E9EDFFFFFF          <2> 	jmp .nofebmod
  5563                              <2> 	
  5564                              <2> .ylp:
  5565 00004345 6689F7              <2> 	mov di, si
  5566 00004348 66C1EF02            <2> 	shr di, 2
  5567 0000434C 66C1E702            <2> 	shl di, 2
  5568 00004350 81C18033E101        <2> 	add ecx, 31536000
  5569 00004356 6639F7              <2> 	cmp di, si
  5570 00004359 7506                <2> 	jne .noymod
  5571 0000435B 81C180510100        <2> 	add ecx, 86400
  5572                              <2> .noymod:
  5573 00004361 664E                <2> 	dec si
  5574 00004363 6681FEB207          <2> 	cmp si, 1970
  5575 00004368 77DB                <2> 	ja .ylp
  5576                              <2> 	
  5577 0000436A BB80510100          <2> 	mov ebx, 86400
  5578 0000436F 31D2                <2> 	xor edx, edx
  5579 00004371 F7E3                <2> 	mul ebx
  5580 00004373 01C1                <2> 	add ecx, eax
  5581                              <2> 	
  5582 00004375 31DB                <2> 	xor ebx, ebx
  5583 00004377 31D2                <2> 	xor edx, edx
  5584 00004379 B8100E0000          <2> 	mov eax, 3600
  5585 0000437E 8A3D[D0430000]      <2> 	mov bh, [timezoneh]
  5586 00004384 80FF80              <2> 	cmp bh, 128
  5587 00004387 720D                <2> 	jb .posh
  5588 00004389 28FB                <2> 	sub bl, bh
  5589 0000438B 30FF                <2> 	xor bh, bh
  5590 0000438D F7E3                <2> 	mul ebx
  5591 0000438F 01C1                <2> 	add ecx, eax
  5592 00004391 E906000000          <2> 	jmp .doneth
  5593                              <2> .posh:
  5594 00004396 86DF                <2> 	xchg bl, bh
  5595 00004398 F7E3                <2> 	mul ebx
  5596 0000439A 29C1                <2> 	sub ecx, eax
  5597                              <2> .doneth:
  5598                              <2> 
  5599 0000439C 31DB                <2> 	xor ebx, ebx	
  5600 0000439E 31D2                <2> 	xor edx, edx
  5601 000043A0 B83C000000          <2> 	mov eax, 60
  5602 000043A5 8A3D[D1430000]      <2> 	mov bh, [timezonem]
  5603 000043AB 80FF80              <2> 	cmp bh, 128
  5604 000043AE 720D                <2> 	jb .posm
  5605 000043B0 28FB                <2> 	sub bl, bh
  5606 000043B2 30FF                <2> 	xor bh, bh
  5607 000043B4 F7E3                <2> 	mul ebx
  5608 000043B6 01C1                <2> 	add ecx, eax
  5609 000043B8 E906000000          <2> 	jmp .donetm
  5610                              <2> .posm:
  5611 000043BD 86DF                <2> 	xchg bl, bh
  5612 000043BF F7E3                <2> 	mul ebx
  5613 000043C1 29C1                <2> 	sub ecx, eax
  5614                              <2> .donetm:
  5615                              <2> 
  5616 000043C3 C3                  <2> 	ret
  5617                              <2> 	
  5618                              <2> 
  5619 000043C4 1F1C1F1E1F1E1F1F1E- <2> .month db 31,28,31,30,31,30,31,31,30,31,30,31
  5620 000043CD 1F1E1F              <2>
  5621                              <2> 
  5622 000043D0 FA                  <2> 	timezoneh db -6
  5623 000043D1 00                  <2> 	timezonem db 0
  5624 000043D2 000000000000000000- <2> 	tstack dd 0,0,0,0,0,0
  5625 000043DB 000000000000000000- <2>
  5626 000043E4 000000000000        <2>
  5627 000043EA 00                  <2> 	RTCtimeSecond db 0
  5628 000043EB 00                  <2> 	RTCtimeMinute db 0
  5629 000043EC 00                  <2> 	RTCtimeHour db 0
  5630 000043ED 00                  <2> 	RTCtimeDay db 0
  5631 000043EE 00                  <2> 	RTCtimeMonth db 0
  5632 000043EF 00                  <2> 	RTCtimeYear db 0
  5633 000043F0 00                  <2> 	dayhex db 0
  5634 000043F1 00                  <2> 	monthhex db 0
  5635 000043F2 00                  <2> 	yearhex db 0
  5636 000043F3 30303A30303A303000  <2> 	timeshow db "00:00:00",0
  5637 000043FC 30302D30302D303030- <2> 	dateshow db "00-00-0000 ",0
  5638 00004405 302000              <2>
  5639                              <2> 	oldcentury:	;;from 1700 to 1900
  5640 00004408 040200              <2> 	db 4,2,0
  5641                              <2> 	century:	;;from 2000 to 2500
  5642 0000440B 060402000604        <2> 	db 6,4,2,0,6,4
  5643                              <2> 	month:
  5644 00004411 000303060104060205- <2> 	db 0,3,3,6,1,4,6,2,5,0,3,5
  5645 0000441A 000305              <2>
  5646                              <2> 	day:
  5647 0000441D [39440000]          <2> 	dd sunday
  5648 00004421 [41440000]          <2> 	dd monday
  5649 00004425 [49440000]          <2> 	dd tuesday
  5650 00004429 [52440000]          <2> 	dd wednesday
  5651 0000442D [5D440000]          <2> 	dd thursday
  5652 00004431 [67440000]          <2> 	dd friday
  5653 00004435 [6F440000]          <2> 	dd saturday
  5654                              <2> sunday:
  5655 00004439 53756E6461790A00    <2> 	db "Sunday",10,0
  5656                              <2> monday:
  5657 00004441 4D6F6E6461790A00    <2> 	db "Monday",10,0
  5658                              <2> tuesday:
  5659 00004449 547565736461790A00  <2> 	db "Tuesday",10,0
  5660                              <2> wednesday:
  5661 00004452 5765646E6573646179- <2> 	db "Wednesday",10,0
  5662 0000445B 0A00                <2>
  5663                              <2> thursday:
  5664 0000445D 54687572736461790A- <2> 	db "Thursday",10,0
  5665 00004466 00                  <2>
  5666                              <2> friday:
  5667 00004467 4672696461790A00    <2> 	db "Friday",10,0
  5668                              <2> saturday:
  5669 0000446F 53617475726461790A- <2> 	db "Saturday",10,0
  5670 00004478 00                  <2>
  5671                              <1> %ifdef network.included
  5672                              <1> 	%include 'source/programs/dhcp.asm'
  5673                              <1> %endif
  5674                              <1> %ifdef disk.none
  5675                              <1> %else
  5676                              <1> 	%include 'source/programs/dos.asm'
  5677 00004479 FF2C646F7300        <2> db 255,44,"dos",0
  5678                              <2> dosrunner:
  5679 0000447F 8925[E09E0300]      <2> 	mov [previousstack], esp
  5680 00004485 8B3D[EC2F0000]      <2> 	mov edi, [currentcommandloc]
  5681 0000448B 81C704000000        <2> 	add edi, 4
  5682 00004491 BE00014000          <2> 	mov esi,  0x100 + dosprogloc	;this should be the beginning of memory
  5683 00004496 E87E230000          <2> 	call loadfile
  5684 0000449B 8B3D[EC2F0000]      <2> 	mov edi, [currentcommandloc]
  5685 000044A1 81C704000000        <2> 	add edi, 4
  5686 000044A7 81FA94010000        <2> 	cmp edx, 404
  5687 000044AD 0F845E000000        <2> 	je near .noprogfound
  5688 000044B3 BB81004000          <2> 	mov ebx, 0x81 + dosprogloc
  5689 000044B8 31C9                <2> 	xor ecx, ecx
  5690                              <2> .findparams:
  5691 000044BA 47                  <2> 	inc edi
  5692 000044BB 8A07                <2> 	mov al, [edi]
  5693 000044BD 3C20                <2> 	cmp al, " "
  5694 000044BF 75F9                <2> 	jne .findparams
  5695                              <2> .copyparams:
  5696 000044C1 8A07                <2> 	mov al, [edi]
  5697 000044C3 8803                <2> 	mov [ebx], al
  5698 000044C5 43                  <2> 	inc ebx
  5699 000044C6 47                  <2> 	inc edi
  5700 000044C7 41                  <2> 	inc ecx
  5701 000044C8 81FB00014000        <2> 	cmp ebx, 0x100 + dosprogloc
  5702 000044CE 7304                <2> 	jae .nomoreparams
  5703 000044D0 3C00                <2> 	cmp al, 0
  5704 000044D2 75ED                <2> 	jne .copyparams
  5705                              <2> .nomoreparams:
  5706 000044D4 880D80004000        <2> 	mov [0x80 + dosprogloc], cl
  5707 000044DA 66B85000            <2> 	mov ax, DOS_DATA_SEL
  5708 000044DE 8ED8                <2> 	mov ds, ax
  5709 000044E0 8EC0                <2> 	mov es, ax
  5710 000044E2 8EE0                <2> 	mov fs, ax
  5711 000044E4 8EE8                <2> 	mov gs, ax
  5712 000044E6 31C0                <2> 	xor eax, eax
  5713 000044E8 31DB                <2> 	xor ebx, ebx
  5714 000044EA 31C9                <2> 	xor ecx, ecx
  5715 000044EC 31D2                <2> 	xor edx, edx
  5716 000044EE 31FF                <2> 	xor edi, edi
  5717 000044F0 31F6                <2> 	xor esi, esi
  5718 000044F2 9A000100004800      <2> 	call DOS_CODE_SEL:0x100
  5719 000044F9 66BB3000            <2> 	mov bx, NEW_DATA_SEL
  5720 000044FD 6689DA              <2> 	mov dx, bx
  5721 00004500 8EC3                <2> 	mov es, bx
  5722 00004502 8EE3                <2> 	mov fs, bx
  5723 00004504 66BB2000            <2> 	mov bx, SYS_DATA_SEL
  5724 00004508 8EEB                <2> 	mov gs, bx
  5725 0000450A 8B25[E09E0300]      <2> 	mov esp, [previousstack]
  5726 00004510 C3                  <2> 	ret
  5727                              <2> .noprogfound:
  5728 00004511 BE[70870000]        <2> 	mov esi, notfound1
  5729 00004516 E825D8FFFF          <2> 	call print
  5730 0000451B 8B35[EC2F0000]      <2> 	mov esi, [currentcommandloc]
  5731 00004521 81C604000000        <2> 	add esi, 4
  5732 00004527 E814D8FFFF          <2> 	call print
  5733 0000452C BE[78870000]        <2> 	mov esi, notfound2
  5734 00004531 E80AD8FFFF          <2> 	call print
  5735 00004536 C3                  <2> 	ret
  5736                              <2> 	
  5737                              <1> %endif
  5738                              <1> %include 'source/programs/dump.asm'
  5739 00004537 FF2C64756D7000      <2> db 255,44,"dump",0
  5740 0000453E 8B35[EC2F0000]      <2> 	mov esi, [currentcommandloc]
  5741 00004544 81C605000000        <2> 	add esi, 5
  5742 0000454A 31C9                <2> 	xor ecx, ecx
  5743 0000454C 66B83078            <2> 	mov ax, "0x"
  5744 00004550 663906              <2> 	cmp [esi], ax
  5745 00004553 740A                <2> 	je dumphexin
  5746 00004555 E88FEEFFFF          <2> 	call cnvrttxt
  5747 0000455A E910000000          <2> 	jmp dumphexnow
  5748                              <2> dumphexin:
  5749 0000455F 81C602000000        <2> 	add esi, 2
  5750 00004565 E833EEFFFF          <2> 	call cnvrthextxt
  5751 0000456A E900000000          <2> 	jmp dumphexnow
  5752                              <2> dumphexnow:
  5753 0000456F 89CF                <2> 	mov edi, ecx
  5754 00004571 89FE                <2> 	mov esi, edi
  5755 00004573 81C680030000        <2> 	add esi, 896
  5756                              <2> dumphexloop:
  5757 00004579 8B0F                <2> 	mov ecx, [edi]
  5758 0000457B C605[25320000]05    <2> 	mov byte [firsthexshown],5
  5759 00004582 E8B3ECFFFF          <2> 	call showhex
  5760 00004587 81C704000000        <2> 	add edi, 4
  5761 0000458D 39F7                <2> 	cmp edi, esi
  5762 0000458F 72E8                <2> 	jb dumphexloop
  5763 00004591 E82BE3FFFF          <2> 	call termcopy
  5764 00004596 C3                  <2> 	ret 
  5765                              <1> %include 'source/programs/echo.asm'
  5766                              <2> 
  5767 00004597 FF2C6563686F00      <2> db 255,44,"echo",0
  5768                              <2> 	echoprog:
  5769 0000459E 8B35[EC2F0000]      <2> 		mov esi, [currentcommandloc]
  5770 000045A4 81C605000000        <2> 		add esi, 5
  5771 000045AA 8A06                <2> 		mov al, [esi]
  5772 000045AC E88FD7FFFF          <2> 		call print
  5773 000045B1 BE[A9870000]        <2> 		mov esi, line
  5774 000045B6 E885D7FFFF          <2> 		call print
  5775 000045BB C3                  <2> 		ret
  5776 000045BC BB[60A10300]        <2> 	echovr:	mov ebx, variables
  5777 000045C1 BF06000000          <2> 		mov edi, 6
  5778 000045C6 E83F000000          <2> 		call nxtvrech
  5779 000045CB E95A000000          <2> 		jmp prntvr2
  5780 000045D0 B13D                <2> 	echvar:	mov cl, '='
  5781 000045D2 43                  <2> 		inc ebx
  5782 000045D3 8A03                <2> 		mov al, [ebx]
  5783 000045D5 3C00                <2> 		cmp al, 0
  5784 000045D7 7431                <2> 		je nxtvrech
  5785 000045D9 3C3D                <2> 		cmp al, '='
  5786 000045DB 7422                <2> 		je nxtvrechb1
  5787 000045DD 8B35[EC2F0000]      <2> 		mov esi, [currentcommandloc]
  5788 000045E3 01FE                <2> 		add esi, edi
  5789 000045E5 E847EAFFFF          <2> 		call cndtest
  5790 000045EA 3C02                <2> 		cmp al, 2
  5791 000045EC 7438                <2> 		je prntvr
  5792 000045EE 3C01                <2> 		cmp al, 1
  5793 000045F0 7434                <2> 		je prntvr
  5794 000045F2 8B35[EC2F0000]      <2> 		mov esi, [currentcommandloc]
  5795 000045F8 01FE                <2> 		add esi, edi
  5796 000045FA E90B000000          <2> 		jmp nxtvrech
  5797                              <2> 	nxtvrechb1:
  5798 000045FF 81EB02000000        <2> 		sub ebx, 2
  5799 00004605 E9C6FFFFFF          <2> 		jmp echvar
  5800 0000460A 8A03                <2> 	nxtvrech: mov al, [ebx]
  5801 0000460C 3C05                <2> 		cmp al, 5
  5802 0000460E 740A                <2> 		je nxtvrec2
  5803 00004610 43                  <2> 		inc ebx
  5804 00004611 81FB[60B10300]      <2> 		cmp ebx, varend
  5805 00004617 72F1                <2> 		jb nxtvrech
  5806 00004619 C3                  <2> 		ret
  5807 0000461A 43                  <2> 	nxtvrec2: inc ebx
  5808 0000461B 8A03                <2> 		mov al, [ebx]
  5809 0000461D 3C04                <2> 		cmp al, 4
  5810 0000461F 74AF                <2> 		je echvar
  5811 00004621 E9E4FFFFFF          <2> 		jmp nxtvrech
  5812 00004626 43                  <2> 	prntvr: inc ebx
  5813 00004627 89DE                <2> 		mov esi, ebx
  5814 00004629 C3                  <2> 		ret
  5815 0000462A E811D7FFFF          <2> 	prntvr2: call print
  5816 0000462F BE[A9870000]        <2> 		mov esi, line
  5817 00004634 E807D7FFFF          <2> 		call print
  5818 00004639 C3                  <2> 		ret 
  5819                              <1> %include 'source/programs/else.asm'
  5820 0000463A FF2C656C736500      <2> 	db 255,44,"else",0
  5821 00004641 31C0                <2> elsecmd:	xor eax, eax
  5822 00004643 3805[5AA10300]      <2> 	cmp [BATCHISON], al
  5823 00004649 0F8410F5FFFF        <2> 	je near notbatch
  5824 0000464F A0[F1A00300]        <2> 	mov al, [IFON]
  5825 00004654 BE[F2A00300]        <2> 	mov esi, IFTRUE
  5826 00004659 01C6                <2> 	add esi, eax
  5827 0000465B 8A06                <2> 	mov al, [esi]
  5828 0000465D 3401                <2> 	xor al, 1
  5829 0000465F 8806                <2> 	mov [esi], al
  5830 00004661 C3                  <2> 	ret 
  5831                              <1> %include 'source/programs/exit.asm'
  5832 00004662 FF2C6578697400      <2> db 255,44,"exit",0
  5833 00004669 803D[F0A00300]01    <2> 	cmp byte [ranboot], 1
  5834 00004670 0F843FE6FFFF        <2> 	je near returnfromexp
  5835 00004676 E919E5FFFF          <2> 	jmp nobootfile
  5836                              <1> %include 'source/programs/fi.asm'
  5837 0000467B FF2C666900          <2> 	db 255,44,"fi",0
  5838 00004680 30C0                <2> 	xor al, al
  5839 00004682 3805[5AA10300]      <2> 	cmp [BATCHISON], al
  5840 00004688 0F84D1F4FFFF        <2> 	je near notbatch
  5841 0000468E B001                <2> fi:	mov al, 1
  5842 00004690 2805[F1A00300]      <2> 	sub [IFON],al
  5843 00004696 C3                  <2> 	ret 
  5844                              <1> %ifdef gui.included
  5845                              <1> 	%include 'source/programs/gui.asm'
  5846 00004697 FF2C67756900        <2> db 255,44,"gui",0
  5847                              <2> guiswitcher:
  5848 0000469D 8B35[EC2F0000]      <2> 	mov esi, [currentcommandloc]
  5849 000046A3 81C604000000        <2> 	add esi, 4
  5850 000046A9 31C9                <2> 	xor ecx, ecx
  5851 000046AB 803E00              <2> 	cmp byte [esi], 0
  5852 000046AE 740A                <2> 	je .nomodepref
  5853 000046B0 E8E8ECFFFF          <2> 	call cnvrthextxt ;switches arg on cline to vesa mode in ecx
  5854 000046B5 E907000000          <2> 	jmp .modepref
  5855                              <2> .nomodepref:
  5856 000046BA 51                  <2> 	push ecx
  5857 000046BB E832D7FFFF          <2> 	call clear
  5858 000046C0 59                  <2> 	pop ecx
  5859                              <2> .modepref:
  5860 000046C1 66BB[5353]          <2> 	mov bx, guiswitch
  5861 000046C5 66891D[E30C0000]    <2> 	mov [realmodeptr], bx
  5862 000046CC BB[DC460000]        <2> 	mov ebx, guiswitchret
  5863 000046D1 891D[DF0C0000]      <2> 	mov [realmodereturn], ebx
  5864 000046D7 E9ECC4FFFF          <2> 	jmp realmode
  5865                              <2> guiswitchret:
  5866 000046DC 65803D[CE870000]01  <2> 	cmp byte [gs:guion], 1
  5867 000046E4 7401                <2> 	je .cont
  5868 000046E6 C3                  <2> 	ret
  5869                              <2> .cont:
  5870 000046E7 BF[45550000]        <2> 	mov edi, VBEMODEBLOCK
  5871                              <2> .loop:
  5872 000046EC 658B07              <2> 	mov eax, [gs:edi]
  5873 000046EF 8907                <2> 	mov [edi], eax
  5874 000046F1 47                  <2> 	inc edi
  5875 000046F2 81FF[49580000]      <2> 	cmp edi, VBEEND
  5876 000046F8 72F2                <2> 	jb .loop
  5877 000046FA A1[6D570000]        <2> 	mov eax, [physbaseptr]
  5878 000046FF 8B1D[39020000]      <2> 	mov ebx, [basecache]
  5879 00004705 C1E304              <2> 	shl ebx, 4
  5880 00004708 29D8                <2> 	sub eax, ebx
  5881 0000470A A3[6D570000]        <2> 	mov [physbaseptr], eax
  5882 0000470F C605[EA230000]00    <2> 	mov byte [termguion], 0
  5883 00004716 BE[75B90300]        <2> 	mov esi, graphicstable
  5884 0000471B 30C0                <2> 	xor al, al
  5885                              <2> .clear:
  5886 0000471D 8806                <2> 	mov [esi], al
  5887 0000471F 46                  <2> 	inc esi
  5888 00004720 81FE[75BB0300]      <2> 	cmp esi, graphicstableend
  5889 00004726 72F5                <2> 	jb .clear
  5890 00004728 E8492B0000          <2> 	call guisetup
  5891                              <2> 	;The next few lines center a window that is 3/4ths of the full screen
  5892 0000472D 668B15[57570000]    <2> 	mov dx, [resolutionx]
  5893 00004734 668B0D[59570000]    <2> 	mov cx, [resolutiony]
  5894 0000473B 6689D3              <2> 	mov bx, dx
  5895 0000473E 6689C8              <2> 	mov ax, cx
  5896 00004741 66D1EB              <2> 	shr bx, 1
  5897 00004744 66D1E8              <2> 	shr ax, 1
  5898 00004747 6689DA              <2> 	mov dx, bx
  5899 0000474A 66D1EA              <2> 	shr dx, 1
  5900 0000474D 6689C1              <2> 	mov cx, ax
  5901 00004750 66D1E9              <2> 	shr cx, 1
  5902 00004753 6601D3              <2> 	add bx, dx
  5903 00004756 6601C8              <2> 	add ax, cx
  5904 00004759 66D1E9              <2> 	shr cx, 1
  5905 0000475C 66C1EB03            <2> 	shr bx, 3
  5906 00004760 66C1E303            <2> 	shl bx, 3
  5907 00004764 66C1E804            <2> 	shr ax, 4
  5908 00004768 66C1E004            <2> 	shl ax, 4
  5909 0000476C 66891D[7B740000]    <2> 	mov [termwindow], bx
  5910 00004773 66A3[7D740000]      <2> 	mov [termwindow + 2], ax	;the previous lines of code make a large terminal window that is 4 characters smaller than the screen
  5911 00004779 BE[7B740000]        <2> 	mov esi, termwindow
  5912 0000477E 31DB                <2> 	xor ebx, ebx
  5913 00004780 6631C0              <2> 	xor ax, ax
  5914 00004783 E82C320000          <2> 	call showwindow
  5915 00004788 E8BD100000          <2> 	call cursorgui
  5916 0000478D E860D6FFFF          <2> 	call clear
  5917 00004792 C3                  <2> 	ret
  5918                              <2> 	
  5919                              <1> %endif
  5920                              <1> %include 'source/programs/help.asm'
  5921 00004793 FF2C68656C7000      <2> db 255,44,"help",0
  5922                              <2> lscmd:	
  5923 0000479A B00D                <2> 		mov al, 13
  5924 0000479C E84BDCFFFF          <2> 		call prcharq
  5925 000047A1 BE[75340000]        <2> 		mov esi, progstart
  5926 000047A6 BB[53530000]        <2> 		mov ebx, progend
  5927 000047AB BE[E09A0300]        <2> dir:	mov esi, fileindex
  5928 000047B0 8A06                <2> 	dirnxt:	mov al, [esi]
  5929 000047B2 30E4                <2> 		xor ah, ah
  5930 000047B4 3CFF                <2> 		cmp al, 255
  5931 000047B6 7418                <2> 		je dirfnd
  5932 000047B8 46                  <2> 		inc esi
  5933 000047B9 81FE[E09E0300]      <2> 		cmp esi,  fileindexend
  5934 000047BF 7342                <2> 		jae dirdn
  5935 000047C1 E9EAFFFFFF          <2> 		jmp dirnxt
  5936                              <2> 	dirfnd3:
  5937 000047C6 46                  <2> 		inc esi
  5938 000047C7 81FE[E09E0300]      <2> 		cmp esi, fileindexend
  5939 000047CD 76E1                <2> 		jbe dirnxt
  5940 000047CF 4E                  <2> 		dec esi
  5941 000047D0 46                  <2> 	dirfnd:	inc esi
  5942 000047D1 8A06                <2> 		mov al, [esi]
  5943 000047D3 30E4                <2> 		xor ah, ah
  5944 000047D5 3C2C                <2> 		cmp al, 44
  5945 000047D7 740E                <2> 		je dirfnd2
  5946 000047D9 46                  <2> 		inc esi
  5947 000047DA 81FE[E09E0300]      <2> 		cmp esi,  fileindexend
  5948 000047E0 7321                <2> 		jae dirdn
  5949 000047E2 E9C9FFFFFF          <2> 		jmp dirnxt
  5950 000047E7 46                  <2> 	dirfnd2: inc esi
  5951 000047E8 E834D5FFFF          <2> 		call printquiet
  5952 000047ED 56                  <2> 		push esi
  5953 000047EE B009                <2> 		mov al, 9
  5954 000047F0 E8F7DBFFFF          <2> 		call prcharq
  5955 000047F5 5E                  <2> 		pop esi
  5956 000047F6 81FE[E09E0300]      <2> 		cmp esi,  fileindexend
  5957 000047FC 7305                <2> 		jae dirdn
  5958 000047FE E9ADFFFFFF          <2> 		jmp dirnxt
  5959 00004803 BE[A9870000]        <2> 	dirdn:	mov esi, line
  5960 00004808 E833D5FFFF          <2> 			call print
  5961 0000480D C3                  <2> 			ret
  5962 0000480E 00                  <2> currentdir db 0
  5963                              <1> %include 'source/programs/if.asm'
  5964 0000480F FF2C696600          <2> 	db 255,44,"if",0
  5965 00004814 30C0                <2> ifcmd:	xor al, al
  5966 00004816 3805[5AA10300]      <2> 	cmp [BATCHISON], al
  5967 0000481C 0F843DF3FFFF        <2> 	je near notbatch
  5968 00004822 8B1D[EC2F0000]      <2> 	mov ebx, [currentcommandloc]
  5969 00004828 81C303000000        <2> 	add ebx, 3
  5970 0000482E 89DE                <2> 	mov esi, ebx
  5971 00004830 8A06                <2> chkeqsn: mov al, [esi]
  5972 00004832 3C00                <2> 	cmp al, 0
  5973 00004834 0F8425F3FFFF        <2> 	je near notbatch
  5974 0000483A 3C3D                <2> 	cmp al, '='
  5975 0000483C 0F8406000000        <2> 	je near chkeqdn
  5976 00004842 46                  <2> 	inc esi
  5977 00004843 E9E8FFFFFF          <2> 	jmp chkeqsn
  5978 00004848 B000                <2> chkeqdn: mov al, 0 
  5979 0000484A 8806                <2> 	mov [esi], al
  5980 0000484C 46                  <2> 	inc esi
  5981 0000484D E89EE7FFFF          <2> 	call tester
  5982 00004852 3C01                <2> 	cmp al, 1
  5983 00004854 0F8405000000        <2> 	je near trueif
  5984 0000485A E91C000000          <2> 	jmp falseif
  5985 0000485F 31C0                <2> trueif:	xor eax, eax
  5986 00004861 A0[F1A00300]        <2> 	mov al, [IFON]
  5987 00004866 FEC0                <2> 	inc al
  5988 00004868 A2[F1A00300]        <2> 	mov [IFON], al
  5989 0000486D 30E4                <2> 	xor ah, ah
  5990 0000486F BE[F2A00300]        <2> 	mov esi, IFTRUE
  5991 00004874 01C6                <2> 	add esi, eax
  5992 00004876 B401                <2> 	mov ah, 1
  5993 00004878 8826                <2> 	mov [esi], ah
  5994 0000487A C3                  <2> 	ret 
  5995 0000487B 31C0                <2> falseif: xor eax, eax
  5996 0000487D A0[F1A00300]        <2> 	mov al, [IFON]
  5997 00004882 FEC0                <2> 	inc al
  5998 00004884 A2[F1A00300]        <2> 	mov [IFON], al
  5999 00004889 30E4                <2> 	xor ah, ah
  6000 0000488B BE[F2A00300]        <2> 	mov esi, IFTRUE
  6001 00004890 01C6                <2> 	add esi, eax
  6002 00004892 30E4                <2> 	xor ah, ah
  6003 00004894 8826                <2> 	mov [esi], ah
  6004 00004896 C3                  <2> 	ret 
  6005                              <1> %ifdef network.included
  6006                              <1> 	%include 'source/programs/ipconfig.asm'
  6007                              <1> %endif
  6008                              <1> %include 'source/programs/keycode.asm'
  6009 00004897 FF2C6B6579636F6465- <2> db 255,44,"keycode",0
  6010 000048A0 00                  <2>
  6011                              <2> keycode:
  6012 000048A1 66C705[BD230000]00- <2> 	mov word [trans], 0
  6013 000048A9 00                  <2>
  6014 000048AA C605[DE690000]00    <2> 	mov byte [threadson], 0
  6015                              <2> %ifdef io.serial
  6016                              <2> .noserial:
  6017                              <2> 	hlt
  6018                              <2> 	mov dx, [serial.address]
  6019                              <2> 	in al, dx
  6020                              <2> 	cmp al, 0
  6021                              <2> 	je .noserial
  6022                              <2> 	mov cl, al
  6023                              <2> 	call showhexsmall
  6024                              <2> 	cmp al, 0x1B
  6025                              <2> 	jne .noserial
  6026                              <2> 	in al, dx
  6027                              <2> 	mov cl, al
  6028                              <2> 	call showhexsmall
  6029                              <2> 	cmp cl, 0x5B
  6030                              <2> 	je .noserial
  6031                              <2> 	ret
  6032                              <2> %else
  6033 000048B1 E8B5150000          <2> 	call getkey
  6034 000048B6 31C0                <2> 	xor eax, eax
  6035 000048B8 31C9                <2> 	xor ecx, ecx
  6036 000048BA 8A0D[495E0000]      <2> 	mov cl, [specialkey]
  6037 000048C0 80F900              <2> 	cmp cl, 0
  6038 000048C3 0F8405000000        <2> 	je near .nospecialkeycode
  6039 000048C9 E858E9FFFF          <2> 	call showhexsmall
  6040                              <2> .nospecialkeycode:
  6041 000048CE 668B0D[BB230000]    <2> 	mov cx, [lastkey + 2]
  6042 000048D5 E84CE9FFFF          <2> 	call showhexsmall
  6043 000048DA 80F901              <2> 	cmp cl, 1
  6044 000048DD 75C2                <2> 	jne keycode
  6045 000048DF C3                  <2> 	ret
  6046                              <2> %endif
  6047                              <1> %ifdef gui.included
  6048                              <1> 	%include 'source/programs/line.asm'
  6049 000048E0 FF2C6C696E6500      <2> db 255,44,"line",0
  6050                              <2> linetester:
  6051 000048E7 803D[CE870000]00    <2> 	cmp byte [guion], 0
  6052 000048EE 0F841B000000        <2> 	je near .done
  6053 000048F4 668B35[5E020000]    <2> 	mov si, [timenanoseconds + 2];essentially load a random value
  6054 000048FB BB38000000          <2> 	mov ebx, 28*2;the line test draws ~28/6 times more lines in a 4:3 display mode than circles
  6055 00004900 E868000000          <2> 	call .circletest
  6056 00004905 BB0C000000          <2> 	mov ebx, 6*2 ;this makes them draw the same amount of lines as circles
  6057 0000490A E801000000          <2> 	call .linetest
  6058                              <2> .done:
  6059 0000490F C3                  <2> 	ret
  6060                              <2> 
  6061                              <2> .linetest:
  6062 00004910 53                  <2> 	push ebx
  6063 00004911 E8D6000000          <2> 	call .stime
  6064 00004916 5B                  <2> 	pop ebx
  6065 00004917 31FF                <2> 	xor edi, edi
  6066                              <2> .ltlp:
  6067 00004919 53                  <2> 	push ebx
  6068 0000491A E81C010000          <2> 	call .st
  6069 0000491F 66F7D6              <2> 	not si
  6070 00004922 E814010000          <2> 	call .st
  6071 00004927 5B                  <2> 	pop ebx
  6072 00004928 66F7D6              <2> 	not si
  6073 0000492B 660335[5C020000]    <2> 	add si, [timenanoseconds]
  6074 00004932 4B                  <2> 	dec ebx
  6075 00004933 81FB00000000        <2> 	cmp ebx, 0
  6076 00004939 77DE                <2> 	ja .ltlp
  6077 0000493B E8C4000000          <2> 	call .etime
  6078 00004940 53                  <2> 	push ebx	
  6079 00004941 57                  <2> 	push edi
  6080 00004942 E834270000          <2> 	call guiclear
  6081 00004947 E87F270000          <2> 	call reloadallgraphics
  6082 0000494C 59                  <2> 	pop ecx
  6083 0000494D E8B2E9FFFF          <2> 	call showdec
  6084 00004952 BE[7D4A0000]        <2> 	mov esi, .msg
  6085 00004957 E8E4D3FFFF          <2> 	call print
  6086 0000495C 59                  <2> 	pop ecx
  6087 0000495D E8A2E9FFFF          <2> 	call showdec
  6088 00004962 BE[A94A0000]        <2> 	mov esi, .msgtime
  6089 00004967 E8D4D3FFFF          <2> 	call print
  6090 0000496C C3                  <2> 	ret
  6091                              <2> 	
  6092                              <2> .circletest:
  6093 0000496D 53                  <2> 	push ebx
  6094 0000496E E879000000          <2> 	call .stime
  6095 00004973 5B                  <2> 	pop ebx
  6096 00004974 31FF                <2> 	xor edi, edi
  6097                              <2> .ctlp:
  6098 00004976 53                  <2> 	push ebx
  6099 00004977 668B0D[59570000]    <2> 	mov cx, [resolutiony]
  6100 0000497E 66D1E9              <2> 	shr cx, 1
  6101 00004981 668B15[57570000]    <2> 	mov dx, [resolutionx]
  6102 00004988 66D1EA              <2> 	shr dx, 1
  6103 0000498B 6689C8              <2> 	mov ax, cx
  6104                              <2> .circle:
  6105 0000498E 60                  <2> 	pusha
  6106 0000498F E844210000          <2> 	call drawcircle
  6107 00004994 61                  <2> 	popa
  6108 00004995 6648                <2> 	dec ax
  6109 00004997 47                  <2> 	inc edi
  6110 00004998 663D0100            <2> 	cmp ax, 1
  6111 0000499C 77F0                <2> 	ja .circle
  6112 0000499E 66F7D6              <2> 	not si
  6113                              <2> .circle2:
  6114 000049A1 60                  <2> 	pusha
  6115 000049A2 E831210000          <2> 	call drawcircle
  6116 000049A7 61                  <2> 	popa
  6117 000049A8 47                  <2> 	inc edi
  6118 000049A9 6640                <2> 	inc ax
  6119 000049AB 6639C8              <2> 	cmp ax, cx
  6120 000049AE 76F1                <2> 	jbe .circle2
  6121 000049B0 5B                  <2> 	pop ebx
  6122 000049B1 66F7D6              <2> 	not si
  6123 000049B4 660335[5C020000]    <2> 	add si, [timenanoseconds]
  6124 000049BB 4B                  <2> 	dec ebx
  6125 000049BC 81FB00000000        <2> 	cmp ebx, 0
  6126 000049C2 77B2                <2> 	ja .ctlp
  6127 000049C4 E83B000000          <2> 	call .etime
  6128 000049C9 53                  <2> 	push ebx
  6129 000049CA 57                  <2> 	push edi
  6130 000049CB 59                  <2> 	pop ecx
  6131 000049CC E833E9FFFF          <2> 	call showdec
  6132 000049D1 BE[924A0000]        <2> 	mov esi, .msgcircle
  6133 000049D6 E865D3FFFF          <2> 	call print
  6134 000049DB 59                  <2> 	pop ecx
  6135 000049DC E823E9FFFF          <2> 	call showdec
  6136 000049E1 BE[A94A0000]        <2> 	mov esi, .msgtime
  6137 000049E6 E855D3FFFF          <2> 	call print
  6138 000049EB C3                  <2> 	ret
  6139                              <2> 	
  6140                              <2> .stime:
  6141 000049EC F4                  <2> 	hlt
  6142 000049ED A1[58020000]        <2> 	mov eax, [timeseconds]
  6143 000049F2 8B1D[5C020000]      <2> 	mov ebx, [timenanoseconds]
  6144 000049F8 A3[B84A0000]        <2> 	mov [.time], eax
  6145 000049FD 891D[BC4A0000]      <2> 	mov [.time + 4], ebx
  6146 00004A03 C3                  <2> 	ret
  6147                              <2> 	
  6148                              <2> .etime:
  6149 00004A04 A1[58020000]        <2> 	mov eax, [timeseconds]
  6150 00004A09 8B1D[5C020000]      <2> 	mov ebx, [timenanoseconds]
  6151 00004A0F 8B0D[B84A0000]      <2> 	mov ecx, [.time]
  6152 00004A15 8B15[BC4A0000]      <2> 	mov edx, [.time + 4]
  6153 00004A1B C1EA0A              <2> 	shr edx, 10
  6154 00004A1E C1EB0A              <2> 	shr ebx, 10
  6155 00004A21 29C8                <2> 	sub eax, ecx
  6156 00004A23 3D00000000          <2> 	cmp eax, 0
  6157 00004A28 740E                <2> 	je .notclp
  6158                              <2> .tclp:
  6159 00004A2A 81C340420F00        <2> 	add ebx, 1000000
  6160 00004A30 48                  <2> 	dec eax
  6161 00004A31 3D00000000          <2> 	cmp eax, 0
  6162 00004A36 75F2                <2> 	jne .tclp
  6163                              <2> .notclp:
  6164 00004A38 29D3                <2> 	sub ebx, edx
  6165 00004A3A C3                  <2> 	ret
  6166                              <2> 	
  6167                              <2> .st:
  6168 00004A3B 6631C0              <2> 	xor ax, ax
  6169 00004A3E 6631DB              <2> 	xor bx, bx
  6170 00004A41 668B0D[59570000]    <2> 	mov cx, [resolutiony]
  6171 00004A48 668B15[57570000]    <2> 	mov dx, [resolutionx]
  6172                              <2> .lp:
  6173 00004A4F 60                  <2> 	pusha
  6174 00004A50 E8FA240000          <2> 	call drawline
  6175 00004A55 61                  <2> 	popa
  6176                              <2> .noswitch:
  6177 00004A56 47                  <2> 	inc edi
  6178 00004A57 6643                <2> 	inc bx
  6179 00004A59 664A                <2> 	dec dx
  6180 00004A5B 6681FB0000          <2> 	cmp bx, 0
  6181 00004A60 74ED                <2> 	je .lp
  6182 00004A62 6681FA0000          <2> 	cmp dx, 0
  6183 00004A67 75E6                <2> 	jne .lp
  6184                              <2> .lp2:
  6185 00004A69 60                  <2> 	pusha
  6186 00004A6A E8E0240000          <2> 	call drawline
  6187 00004A6F 61                  <2> 	popa
  6188 00004A70 47                  <2> 	inc edi
  6189 00004A71 6640                <2> 	inc ax
  6190 00004A73 6649                <2> 	dec cx
  6191 00004A75 6681F90000          <2> 	cmp cx, 0
  6192 00004A7A 75ED                <2> 	jne .lp2
  6193 00004A7C C3                  <2> 	ret
  6194                              <2> 	
  6195 00004A7D 6C696E657320776572- <2> .msg db "lines were drawn in ",0
  6196 00004A86 6520647261776E2069- <2>
  6197 00004A8F 6E2000              <2>
  6198 00004A92 636972636C65732077- <2> .msgcircle db "circles were drawn in ",0
  6199 00004A9B 65726520647261776E- <2>
  6200 00004AA4 20696E2000          <2>
  6201 00004AA9 6D6963726F7365636F- <2> .msgtime db "microseconds.",10,0
  6202 00004AB2 6E64732E0A00        <2>
  6203 00004AB8 0000000000000000    <2> .time dd 0,0	
  6204                              <1> %endif
  6205                              <1> %include 'source/programs/logout.asm'
  6206 00004AC0 FF2C6C6F676F757400  <2> 	db 255,44,"logout",0
  6207 00004AC9 E982E0FFFF          <2> 	jmp os
  6208                              <1> %include 'source/programs/loop.asm'
  6209 00004ACE FF2C6C6F6F7000      <2> 	db 255,44,"loop",0
  6210 00004AD5 803D[5BA10300]00    <2> 	cmp byte [LOOPON], 0
  6211 00004ADC 0F8501000000        <2> 	jne near filoop
  6212 00004AE2 C3                  <2> 	ret
  6213 00004AE3 8B35[5CA10300]      <2> filoop: mov esi, [LOOPPOS]
  6214 00004AE9 FE0D[F1A00300]      <2> 	dec byte [IFON]
  6215 00004AEF C605[5BA10300]00    <2> 	mov byte [LOOPON], 0
  6216 00004AF6 8935[56A10300]      <2> 	mov [BATCHPOS], esi
  6217 00004AFC 8935[843A0000]      <2> 	mov [batchedi], esi
  6218 00004B02 C3                  <2> 	ret 
  6219                              <1> %ifdef disk.none
  6220                              <1> %else
  6221                              <1> 	%include 'source/programs/ls.asm'
  6222 00004B03 FF2C6C7300          <2> db 255,44,"ls",0
  6223 00004B08 BE[188A0300]        <2> 		mov esi, diskfileindex
  6224                              <2> 	diskindexdir:
  6225 00004B0D 803E5F              <2> 		cmp byte [esi], '_'
  6226 00004B10 7440                <2> 		je nextdiskindexdir
  6227 00004B12 E80AD2FFFF          <2> 		call printquiet
  6228 00004B17 56                  <2> 		push esi
  6229 00004B18 BE[724B0000]        <2> 		mov esi, disktab
  6230 00004B1D E8FFD1FFFF          <2> 		call printquiet
  6231 00004B22 5E                  <2> 		pop esi
  6232 00004B23 8B4E05              <2> 		mov ecx, [esi + 5]
  6233 00004B26 C605[25320000]05    <2> 		mov byte [firsthexshown], 5
  6234 00004B2D E8D2E7FFFF          <2> 		call showdec
  6235 00004B32 56                  <2> 		push esi
  6236 00004B33 BE[A9870000]        <2> 		mov esi, line
  6237 00004B38 E8E4D1FFFF          <2> 		call printquiet
  6238 00004B3D 5E                  <2> 		pop esi
  6239 00004B3E 81C609000000        <2> 		add esi, 9
  6240 00004B44 81FE[D98A0300]      <2> 		cmp esi, enddiskfileindex
  6241 00004B4A 72C1                <2> 		jb diskindexdir
  6242 00004B4C E870DDFFFF          <2> 		call termcopy
  6243 00004B51 C3                  <2> 		ret
  6244                              <2> 	nextdiskindexdir:
  6245 00004B52 46                  <2> 		inc esi
  6246 00004B53 803E00              <2> 		cmp byte [esi], 0
  6247 00004B56 75FA                <2> 		jne nextdiskindexdir
  6248 00004B58 81C609000000        <2> 		add esi, 9
  6249 00004B5E 81FE[D98A0300]      <2> 		cmp esi, enddiskfileindex
  6250 00004B64 72A7                <2> 		jb diskindexdir
  6251 00004B66 E856DDFFFF          <2> 		call termcopy
  6252 00004B6B C3                  <2> 		ret
  6253                              <2> 		
  6254 00004B6C 4469736B2000        <2> 		diskmsg db "Disk ",0
  6255 00004B72 0D09090900          <2> 		disktab db 13,9,9,9,0
  6256                              <1> %endif
  6257                              <1> %include 'source/programs/memory.asm'
  6258 00004B77 FF2C6D656D6F727900  <2> db 255,44,"memory",0
  6259 00004B80 BE[D4870000]        <2> 	mov esi, memlistbuf
  6260 00004B85 31FF                <2> 	xor edi, edi
  6261 00004B87 668B3D[148A0000]    <2> 	mov di, [memlistend]
  6262 00004B8E 01F7                <2> 	add edi, esi
  6263                              <2> printmemmap:
  6264 00004B90 8B0E                <2> 	mov ecx, [esi]
  6265 00004B92 E8A3E6FFFF          <2> 	call showhex
  6266 00004B97 81C608000000        <2> 	add esi, 8
  6267 00004B9D 8B0E                <2> 	mov ecx, [esi]
  6268 00004B9F E896E6FFFF          <2> 	call showhex
  6269 00004BA4 81C608000000        <2> 	add esi, 8
  6270 00004BAA 8B0E                <2> 	mov ecx, [esi]
  6271 00004BAC E889E6FFFF          <2> 	call showhex
  6272 00004BB1 81C608000000        <2> 	add esi, 8
  6273 00004BB7 57                  <2> 	push edi
  6274 00004BB8 56                  <2> 	push esi
  6275 00004BB9 BE[A9870000]        <2> 	mov esi, line
  6276 00004BBE E87DD1FFFF          <2> 	call print
  6277 00004BC3 5E                  <2> 	pop esi
  6278 00004BC4 5F                  <2> 	pop edi
  6279 00004BC5 39FE                <2> 	cmp esi, edi
  6280 00004BC7 72C7                <2> 	jb printmemmap
  6281 00004BC9 C3                  <2> 	ret
  6282                              <2> 	
  6283                              <1> %include 'source/programs/pci.asm'
  6284 00004BCA FF2C70636900        <2> db 255,44,"pci",0
  6285 00004BD0 E809190000          <2> 	call pcidump
  6286 00004BD5 C3                  <2> 	ret 
  6287                              <1> %ifdef network.included
  6288                              <1> 	%include 'source/programs/ping.asm'
  6289                              <1> %endif
  6290                              <1> %ifdef disk.none
  6291                              <1> %else
  6292                              <1> 	%include 'source/programs/play.asm'
  6293 00004BD6 FF2C706C61796100    <2> db 255,44,"playa",0
  6294 00004BDE 8B3D[EC2F0000]      <2> 	mov edi, [currentcommandloc]
  6295 00004BE4 81C706000000        <2> 	add edi, 6
  6296 00004BEA E834000000          <2> 	call playasync
  6297 00004BEF C3                  <2> 	ret
  6298 00004BF0 FF2C706C617900      <2> db 255,44,"play",0
  6299                              <2> play:
  6300 00004BF7 8B3D[EC2F0000]      <2> 	mov edi, [currentcommandloc]
  6301 00004BFD 81C705000000        <2> 	add edi, 5
  6302 00004C03 E81B000000          <2> 	call playasync
  6303                              <2> .waitforsound:
  6304 00004C08 F4                  <2> 	hlt
  6305                              <2> %ifdef sound.included
  6306 00004C09 A1[335E0000]        <2> 	mov eax, [Length0]
  6307 00004C0E 660B05[375E0000]    <2> 	or ax, [Length1]
  6308                              <2> %endif
  6309 00004C15 0A05[60020000]      <2> 	or al, [soundon]
  6310 00004C1B 3D00000000          <2> 	cmp eax, 0
  6311 00004C20 75E6                <2> 	jne .waitforsound
  6312 00004C22 C3                  <2> 	ret
  6313                              <2> playasync:
  6314 00004C23 BE0000C000          <2> 	mov esi, 0xC00000
  6315 00004C28 E8EC1B0000          <2> 	call loadfile
  6316 00004C2D 81FA94010000        <2> 	cmp edx, 404
  6317 00004C33 743F                <2> 	je nosoundfound
  6318 00004C35 BB0000C000          <2> 	mov ebx, 0xC00000
  6319 00004C3A 817B0857415645      <2> 	cmp dword [ebx + 8], "WAVE"
  6320 00004C41 0F843F010000        <2> 	je near wave_player
  6321 00004C47 66813B534E          <2> 	cmp word [ebx], "SN"
  6322 00004C4C 7526                <2> 	jne nosoundfound
  6323 00004C4E 81C306000000        <2> 	add ebx, 6
  6324 00004C54 891D[63020000]      <2> 	mov [soundpos], ebx
  6325 00004C5A 035BFC              <2> 	add ebx, [ebx - 4]
  6326 00004C5D 891D[67020000]      <2> 	mov [soundendpos], ebx
  6327 00004C63 66C705[61020000]00- <2> 	mov word [soundrepititions], 0
  6328 00004C6B 00                  <2>
  6329 00004C6C C605[60020000]01    <2> 	mov byte [soundon], 1
  6330 00004C73 C3                  <2> 	ret
  6331                              <2> nosoundfound:
  6332 00004C74 BE[9A4C0000]        <2> 	mov esi, notfoundsound
  6333 00004C79 E8C2D0FFFF          <2> 	call print
  6334 00004C7E 8B35[EC2F0000]      <2> 	mov esi, [currentcommandloc]
  6335 00004C84 81C605000000        <2> 	add esi, 5
  6336 00004C8A E8B1D0FFFF          <2> 	call print
  6337 00004C8F BE[78870000]        <2> 	mov esi, notfound2
  6338 00004C94 E8A7D0FFFF          <2> 	call print
  6339 00004C99 C3                  <2> 	ret
  6340 00004C9A 706C61793A2000      <2> notfoundsound db "play: ",0
  6341                              <2> 
  6342                              <2> %ifdef sound.included
  6343                              <2> sbplay:
  6344 00004CA1 BE0000C000          <2> 		mov esi, 0xC00000
  6345 00004CA6 89F3                <2> 		mov ebx, esi
  6346 00004CA8 81C62C000000        <2> 		add esi, WAVSTART
  6347 00004CAE 29F7                <2> 		sub edi, esi
  6348 00004CB0 66893D[375E0000]    <2> 		mov [Length1], di
  6349 00004CB7 C1EF0F              <2> 		shr edi, 15
  6350 00004CBA 893D[335E0000]      <2> 		mov [Length0], edi
  6351 00004CC0 8B4B18              <2> 		mov ecx, [ebx + 24]
  6352 00004CC3 890D[445E0000]      <2> 		mov [Freq], ecx
  6353 00004CC9 31C0                <2> 		xor eax, eax
  6354 00004CCB BA0000C000          <2> 		mov	edx, 0xC00000 ;physical location of sound
  6355 00004CD0 81C22C000000        <2> 		add edx, WAVSTART
  6356 00004CD6 01D0                <2> 		add	eax, edx
  6357 00004CD8 89C6                <2> 		mov esi, eax
  6358 00004CDA 31C9                <2> 		xor ecx, ecx
  6359 00004CDC 31DB                <2> 		xor ebx, ebx
  6360 00004CDE 66891D[415E0000]    <2> 		mov [SegLoc], bx
  6361 00004CE5 81C300000800        <2> 		add ebx, 0x80000
  6362 00004CEB 66B9FFFF            <2> 		mov cx, 0xFFFF
  6363 00004CEF 6681FF0000          <2> 		cmp di, 0
  6364 00004CF4 7520                <2> 		jne .autoinit
  6365 00004CF6 668B0D[375E0000]    <2> 		mov cx, [Length1]
  6366 00004CFD C605[325E0000]01    <2> 		mov byte [OddLength], 1
  6367 00004D04 6681F90080          <2> 		cmp cx, 32768
  6368 00004D09 730B                <2> 		jae .autoinit
  6369 00004D0B C605[325E0000]00    <2> 		mov byte [OddLength], 0
  6370 00004D12 66D1E1              <2> 		shl cx, 1
  6371 00004D15 47                  <2> 		inc edi
  6372                              <2> .autoinit:
  6373 00004D16 4F                  <2> 		dec edi
  6374 00004D17 893D[335E0000]      <2> 		mov [Length0], edi
  6375 00004D1D 66890D[375E0000]    <2> 		mov [Length1], cx
  6376 00004D24 66D1E9              <2> 		shr cx, 1
  6377 00004D27 6641                <2> 		inc cx
  6378 00004D29 01C8                <2> 		add eax, ecx
  6379 00004D2B A3[395E0000]        <2> 		mov [NextMemLoc], eax
  6380 00004D30 8935[3D5E0000]      <2> 		mov	[MemLoc], esi
  6381 00004D36 E89D0F0000          <2> 		call DMACopy
  6382 00004D3B 31DB                <2> 		xor ebx, ebx
  6383 00004D3D 668B1D[415E0000]    <2> 		mov bx, [SegLoc]
  6384 00004D44 31C9                <2> 		xor ecx, ecx
  6385 00004D46 668B0D[375E0000]    <2> 		mov cx, [Length1]
  6386 00004D4D 66D1E9              <2> 		shr cx, 1
  6387 00004D50 6641                <2> 		inc cx
  6388 00004D52 01CB                <2> 		add ebx, ecx
  6389 00004D54 66891D[415E0000]    <2> 		mov [SegLoc], bx
  6390 00004D5B 81C300000800        <2> 		add ebx, 0x80000
  6391 00004D61 8B35[395E0000]      <2> 		mov esi, [NextMemLoc]
  6392 00004D67 89F0                <2> 		mov eax, esi
  6393 00004D69 01C8                <2> 		add eax, ecx
  6394 00004D6B A3[395E0000]        <2> 		mov [NextMemLoc], eax
  6395 00004D70 8935[3D5E0000]      <2> 		mov	[MemLoc], esi
  6396 00004D76 E85D0F0000          <2> 		call DMACopy
  6397 00004D7B E87B0F0000          <2> 		call DMAPlay
  6398 00004D80 E805100000          <2> 		call PlayDSP
  6399 00004D85 C3                  <2> 		ret
  6400                              <2> WAVSTART equ 44
  6401                              <2> wave_player:
  6402 00004D86 803D[485E0000]01    <2> 	cmp byte [SoundBlaster], 1
  6403 00004D8D 0F840EFFFFFF        <2> 	je near sbplay
  6404 00004D93 BE[9E4D0000]        <2> 	mov esi, nosoundblaster
  6405 00004D98 E8A3CFFFFF          <2> 	call print
  6406 00004D9D C3                  <2> 	ret
  6407                              <2> %else
  6408                              <2> 	wave_player:
  6409                              <2> 		mov esi, nosoundblaster
  6410                              <2> 		call print
  6411                              <2> 		ret
  6412                              <2> %endif
  6413 00004D9E 4E6F20536F756E6420- <2> nosoundblaster db "No Sound Blaster detected.",10,0
  6414 00004DA7 426C61737465722064- <2>
  6415 00004DB0 657465637465642E0A- <2>
  6416 00004DB9 00                  <2>
  6417                              <1> %endif
  6418                              <1> %include 'source/programs/pwd.asm'
  6419 00004DBA FF2C70776400        <2> db 255,44,"pwd",0
  6420 00004DC0 BE[EC9E0300]        <2> 	mov esi, currentfolder
  6421 00004DC5 E857CFFFFF          <2> 	call printquiet
  6422 00004DCA BE[A9870000]        <2> 	mov esi, line
  6423 00004DCF E86CCFFFFF          <2> 	call print
  6424 00004DD4 C3                  <2> 	ret
  6425                              <2> 	
  6426                              <1> %include 'source/programs/reboot.asm'
  6427 00004DD5 FF2C7265626F6F7400  <2> 	db 255,44,"reboot",0
  6428 00004DDE 0F011D[E84D0000]    <2> 		lidt [idtreboot]
  6429 00004DE5 CD00                <2> 		int 0
  6430 00004DE7 F4                  <2> 		hlt
  6431                              <2> 	
  6432 00004DE8 0000                <2> 	idtreboot dw 0
  6433 00004DEA 00000000            <2> 			  dd 0
  6434                              <2> 
  6435                              <2> 	coldboot:
  6436 00004DEE 66B84000            <2> 		MOV AX, 0040h
  6437 00004DF2 8EC0                <2> 		MOV ES, AX
  6438 00004DF4 2666C7057200000000- <2> 		MOV WORD [ES:00072h], 0h
  6439 00004DFD 00                  <2>
  6440 00004DFE EA00000000FFFF      <2> 		JMP 0FFFFh:0000h
  6441 00004E05 CF                  <2> 		IRET
  6442                              <2> 
  6443                              <2> 	warmboot:
  6444 00004E06 66B84000            <2> 		MOV AX, 0040h
  6445 00004E0A 8EC0                <2> 		MOV ES, AX
  6446 00004E0C 2666C7057200000034- <2> 		MOV WORD [ES:00072h], 01234h
  6447 00004E15 12                  <2>
  6448 00004E16 EA00000000FFFF      <2> 		JMP 0FFFFh:0000h
  6449 00004E1D CF                  <2> 		IRET
  6450                              <2> 		
  6451                              <1> %include 'source/programs/reg.asm'
  6452 00004E1E FF2C72656700        <2> db 255,44,"reg",0
  6453 00004E24 CD03                <2> 	int 3
  6454 00004E26 C3                  <2> 	ret 
  6455                              <1> %ifdef disk.none
  6456                              <1> %else
  6457                              <1> 	%include 'source/programs/show.asm'
  6458 00004E27 FF2C73686F7700      <2> db 255,44,"show",0
  6459                              <2> showprog:
  6460 00004E2E 8B3D[EC2F0000]      <2> 		mov edi, [currentcommandloc]
  6461 00004E34 81C705000000        <2> 		add edi, 5
  6462 00004E3A BE00004000          <2> 		mov esi, 0x400000
  6463 00004E3F 803F26              <2> 		cmp byte [edi], '&'
  6464 00004E42 741B                <2> 		je .nullfile
  6465 00004E44 BE00008000          <2> 		mov esi, 0x800000
  6466 00004E49 E8CB190000          <2> 		call loadfile
  6467 00004E4E 81FA94010000        <2> 		cmp edx, 404
  6468 00004E54 0F8483000000        <2> 		je near filenotfound
  6469 00004E5A BE00008000          <2> 		mov esi, 0x800000
  6470                              <2> .nullfile:
  6471                              <2> %ifdef gui.included
  6472 00004E5F 66813E424D          <2> 		cmp word [esi], "BM"
  6473 00004E64 7410                <2> 		je bmpfound
  6474                              <2> %endif
  6475 00004E66 E8D5CEFFFF          <2> 		call print
  6476 00004E6B BE[A9870000]        <2> 		mov esi, line
  6477 00004E70 E8CBCEFFFF          <2> 		call print
  6478 00004E75 C3                  <2> 		ret
  6479                              <2> %ifdef gui.included
  6480                              <2> bmpfound:
  6481 00004E76 803D[CE870000]00    <2> 		cmp byte [guion], 0
  6482 00004E7D 0F8428000000        <2> 		je near noguibmp
  6483 00004E83 BE00008000          <2> 		mov esi, 0x800000
  6484 00004E88 31C9                <2> 		xor ecx, ecx
  6485 00004E8A 31D2                <2> 		xor edx, edx
  6486 00004E8C 31C0                <2> 		xor eax, eax
  6487 00004E8E 31DB                <2> 		xor ebx, ebx
  6488 00004E90 E8711B0000          <2> 		call showbmp
  6489 00004E95 30C0                <2> 		xor al, al
  6490 00004E97 B405                <2> 		mov ah, 5
  6491 00004E99 CD30                <2> 		int 30h
  6492 00004E9B E8DB210000          <2> 		call guiclear
  6493 00004EA0 E8BA1E0000          <2> 		call clearmousecursor
  6494 00004EA5 E821220000          <2> 		call reloadallgraphics
  6495 00004EAA C3                  <2> 		ret
  6496                              <2> noguibmp:
  6497 00004EAB BE[B64E0000]        <2> 		mov esi, warnguimsg
  6498 00004EB0 E88BCEFFFF          <2> 		call print
  6499 00004EB5 C3                  <2> 		ret
  6500 00004EB6 546869732063616E20- <2> warnguimsg db "This can not be done without the GUI.",10,0
  6501 00004EBF 6E6F7420626520646F- <2>
  6502 00004EC8 6E6520776974686F75- <2>
  6503 00004ED1 742074686520475549- <2>
  6504 00004EDA 2E0A00              <2>
  6505                              <2> %endif
  6506                              <2> 
  6507                              <2> filenotfound:
  6508 00004EDD BE[104F0000]        <2> 		mov esi, filenf
  6509 00004EE2 E859CEFFFF          <2> 		call print
  6510 00004EE7 8B35[EC2F0000]      <2> 		mov esi, [currentcommandloc]
  6511                              <2> findfilenotfoundzero:
  6512 00004EED 8A06                <2> 		mov al, [esi]
  6513 00004EEF 46                  <2> 		inc esi
  6514 00004EF0 3C00                <2> 		cmp al, 0
  6515 00004EF2 7411                <2> 		je nofilenamenotfound
  6516 00004EF4 81FE[60B90300]      <2> 		cmp esi, buftxtend
  6517 00004EFA 7309                <2> 		jae nofilenamenotfound
  6518 00004EFC 3C20                <2> 		cmp al, " "
  6519 00004EFE 75ED                <2> 		jne findfilenotfoundzero
  6520 00004F00 E83BCEFFFF          <2> 		call print
  6521                              <2> nofilenamenotfound:
  6522 00004F05 BE[1B4F0000]        <2> 		mov esi, filenf2
  6523 00004F0A E831CEFFFF          <2> 		call print
  6524 00004F0F C3                  <2> 		ret
  6525 00004F10 5468652066696C6520- <2> filenf db "The file ",34,0
  6526 00004F19 2200                <2>
  6527 00004F1B 2220636F756C64206E- <2> filenf2 db 34," could not be found.",10,0
  6528 00004F24 6F7420626520666F75- <2>
  6529 00004F2D 6E642E0A00          <2>
  6530                              <1> %endif
  6531                              <1> %include 'source/programs/shush.asm'
  6532 00004F32 FF2C736875736800    <2> db 255,44,"shush",0	;if you add 2 values it will switch size using the first as X in chars and the second as Y in chars
  6533                              <2> shushprog:
  6534                              <2> %ifdef gui.included
  6535 00004F3A 803D[CE870000]00    <2> 	cmp byte [guion], 0
  6536 00004F41 0F84B9000000        <2> 	je near .noswitchsize
  6537 00004F47 8B35[EC2F0000]      <2> 	mov esi, [currentcommandloc]
  6538 00004F4D 81C606000000        <2> 	add esi, 6
  6539 00004F53 56                  <2> 	push esi
  6540 00004F54 4E                  <2> 	dec esi
  6541                              <2> .findspace:
  6542 00004F55 46                  <2> 	inc esi
  6543 00004F56 8A06                <2> 	mov al, [esi]
  6544 00004F58 3C00                <2> 	cmp al, 0
  6545 00004F5A 0F84A0000000        <2> 	je near .noswitchsize
  6546 00004F60 3C58                <2> 	cmp al, "X"
  6547 00004F62 7408                <2> 	je .donefind
  6548 00004F64 3C78                <2> 	cmp al, "x"
  6549 00004F66 7404                <2> 	je .donefind
  6550 00004F68 3C20                <2> 	cmp al, " "
  6551 00004F6A 75E9                <2> 	jne .findspace
  6552                              <2> .donefind:
  6553 00004F6C 30C0                <2> 	xor al, al
  6554 00004F6E 8806                <2> 	mov [esi], al
  6555 00004F70 46                  <2> 	inc esi
  6556 00004F71 89F7                <2> 	mov edi, esi
  6557 00004F73 E871E4FFFF          <2> 	call cnvrttxt
  6558 00004F78 89C8                <2> 	mov eax, ecx
  6559 00004F7A 5E                  <2> 	pop esi
  6560 00004F7B 50                  <2> 	push eax
  6561 00004F7C 89F7                <2> 	mov edi, esi
  6562 00004F7E E866E4FFFF          <2> 	call cnvrttxt
  6563 00004F83 89CB                <2> 	mov ebx, ecx
  6564 00004F85 58                  <2> 	pop eax	
  6565 00004F86 6681FB0000          <2> 	cmp bx, 0
  6566 00004F8B 0F846F000000        <2> 	je near .noswitchsize
  6567 00004F91 663D0000            <2> 	cmp ax, 0
  6568 00004F95 0F8465000000        <2> 	je near .noswitchsize
  6569 00004F9B 66C1E303            <2> 	shl bx, 3
  6570 00004F9F 66C1E004            <2> 	shl ax, 4
  6571 00004FA3 663B1D[57570000]    <2> 	cmp bx, [resolutionx]
  6572 00004FAA 7607                <2> 	jbe .nofixx
  6573 00004FAC 668B1D[57570000]    <2> 	mov bx, [resolutionx]
  6574                              <2> .nofixx:
  6575 00004FB3 66051000            <2> 	add ax, 16
  6576 00004FB7 663B05[59570000]    <2> 	cmp ax, [resolutiony]
  6577 00004FBE 7606                <2> 	jbe .nofixy
  6578 00004FC0 66A1[59570000]      <2> 	mov ax, [resolutiony]
  6579                              <2> .nofixy:
  6580 00004FC6 662D1000            <2> 	sub ax, 16
  6581 00004FCA 6631C9              <2> 	xor cx, cx
  6582 00004FCD 6631D2              <2> 	xor dx, dx
  6583 00004FD0 66891D[7B740000]    <2> 	mov [termwindow], bx
  6584 00004FD7 66A3[7D740000]      <2> 	mov [termwindow + 2], ax	;the previous lines of code make a large terminal window that is 4 characters smaller than the screen
  6585 00004FDD BE[7B740000]        <2> 	mov esi, termwindow
  6586 00004FE2 31DB                <2> 	xor ebx, ebx
  6587 00004FE4 6631C0              <2> 	xor ax, ax
  6588 00004FE7 E8C8290000          <2> 	call showwindow
  6589 00004FEC E88A200000          <2> 	call guiclear
  6590 00004FF1 E8FCCDFFFF          <2> 	call clear
  6591 00004FF6 E8D0200000          <2> 	call reloadallgraphics
  6592 00004FFB E8171E0000          <2> 	call switchmousepos2
  6593                              <2> .noswitchsize:
  6594                              <2> %endif
  6595 00005000 BE[0B500000]        <2> 	mov esi, shushmsg
  6596 00005005 E836CDFFFF          <2> 	call print
  6597 0000500A C3                  <2> 	ret
  6598 0000500B 57656C636F6D652074- <2> 	shushmsg db "Welcome to the SollerOS Hardly Unix-Compatible Shell!",10,0
  6599 00005014 6F2074686520536F6C- <2>
  6600 0000501D 6C65724F5320486172- <2>
  6601 00005026 646C7920556E69782D- <2>
  6602 0000502F 436F6D70617469626C- <2>
  6603 00005038 65205368656C6C210A- <2>
  6604 00005041 00                  <2>
  6605                              <1> %include 'source/programs/system.asm'
  6606 00005042 FF2C73797374656D00  <2> 	db 255,44,"system",0
  6607 0000504B BE[5E510000]        <2> 	mov esi, kernelinfomsg
  6608 00005050 E8CCCCFFFF          <2> 	call printquiet
  6609 00005055 B9[188A0300]        <2> 	mov ecx, osend
  6610 0000505A E8A5E2FFFF          <2> 	call showdec
  6611 0000505F BE[73510000]        <2> 	mov esi, diskbytemsg
  6612 00005064 E8B8CCFFFF          <2> 	call printquiet
  6613 00005069 B9[188A0300]        <2> 	mov ecx, osend
  6614 0000506E 81C1[16770500]      <2> 	add ecx, commandbufend
  6615 00005074 81E9[DC8A0300]      <2> 	sub ecx, bssstart	;add the extra buffer space
  6616 0000507A E885E2FFFF          <2> 	call showdec
  6617 0000507F BE[8A510000]        <2> 	mov esi, membytemsg
  6618 00005084 E898CCFFFF          <2> 	call printquiet
  6619 00005089 BE[ED510000]        <2> 	mov esi, endofmemmsg
  6620 0000508E E88ECCFFFF          <2> 	call printquiet
  6621 00005093 B9[168B1500]        <2> 	mov ecx, bssend
  6622 00005098 E89DE1FFFF          <2> 	call showhex
  6623 0000509D BE[A3510000]        <2> 	mov esi, systeminfomsg
  6624 000050A2 E87ACCFFFF          <2> 	call printquiet
  6625                              <2> getcpuspeed:
  6626 000050A7 B8FE000000          <2> 	mov eax, 0xFE
  6627 000050AC E621                <2> 	out 0x21, al ;mask off all but timer interrupt
  6628 000050AE B020                <2> 	mov al, 0x20
  6629 000050B0 E620                <2> 	out 0x20, al
  6630 000050B2 F4                  <2> 	hlt
  6631 000050B3 0F31                <2> 	rdtsc
  6632 000050B5 89D6                <2> 	mov esi, edx
  6633 000050B7 89C7                <2> 	mov edi, eax
  6634 000050B9 31C0                <2> 	xor eax, eax
  6635 000050BB C605[41020000]01    <2> 	mov byte [testingcpuspeed], 1
  6636                              <2> cpuspeedloop:	;wait until next timer interrupt, then inc eax until the next
  6637 000050C2 40                  <2> 	inc eax
  6638 000050C3 E9FAFFFFFF          <2> 	jmp cpuspeedloop
  6639                              <2> cpuspeedloopend:
  6640 000050C8 0F31                <2> 	rdtsc
  6641 000050CA 29F8                <2> 	sub eax, edi
  6642 000050CC 29F2                <2> 	sub edx, esi
  6643 000050CE 8915[4A020000]      <2> 	mov [cpuclocksperint + 4], edx
  6644 000050D4 A3[46020000]        <2> 	mov [cpuclocksperint], eax
  6645 000050D9 31C0                <2> 	xor eax, eax
  6646 000050DB E621                <2> 	out 0x21, al
  6647 000050DD B020                <2> 	mov al, 0x20
  6648 000050DF E620                <2> 	out 0x20, al
  6649 000050E1 31D2                <2> 	xor edx, edx
  6650 000050E3 31C0                <2> 	xor eax, eax
  6651 000050E5 A1[42020000]        <2> 	mov eax, [cpuspeedperint]
  6652 000050EA D1E0                <2> 	shl eax, 1	;the cpu speed loop actually contains 2 commands so multiply the
  6653                              <2> 				;result by 2
  6654 000050EC 8B1D[54020000]      <2> 	mov ebx, [timeinterval]
  6655 000050F2 C1EB0A              <2> 	shr ebx, 10 ;divide the interval by 1024
  6656 000050F5 F7F3                <2> 	div ebx	;quotient in eax, remainder in edx
  6657 000050F7 89C1                <2> 	mov ecx, eax
  6658 000050F9 E806E2FFFF          <2> 	call showdec
  6659 000050FE BE[D1510000]        <2> 	mov esi, cpuspeedmsg
  6660 00005103 E819CCFFFF          <2> 	call printquiet
  6661 00005108 31D2                <2> 	xor edx, edx
  6662 0000510A A1[46020000]        <2> 	mov eax, [cpuclocksperint]
  6663 0000510F 8B15[4A020000]      <2> 	mov edx, [cpuclocksperint + 4]
  6664 00005115 8B1D[54020000]      <2> 	mov ebx, [timeinterval]
  6665 0000511B C1EB0A              <2> 	shr ebx, 10
  6666 0000511E F7F3                <2> 	div ebx
  6667 00005120 89C1                <2> 	mov ecx, eax
  6668 00005122 E8DDE1FFFF          <2> 	call showdec
  6669 00005127 BE[D7510000]        <2> 	mov esi, cpuclockmsg
  6670 0000512C E8F0CBFFFF          <2> 	call printquiet
  6671 00005131 8B0D[4E020000]      <2> 	mov ecx, [memoryspace]
  6672 00005137 C1E914              <2> 	shr ecx, 20
  6673 0000513A 41                  <2> 	inc ecx	;the reading is one MB behind
  6674 0000513B E8C4E1FFFF          <2> 	call showdec
  6675 00005140 BE[DC510000]        <2> 	mov esi, memoryspacemsg
  6676 00005145 E8F6CBFFFF          <2> 	call print
  6677                              <2> %ifdef sound.included
  6678 0000514A 803D[485E0000]00    <2> 	cmp byte [SoundBlaster], 0
  6679 00005151 740A                <2> 	je .nosb
  6680 00005153 BE[B9510000]        <2> 	mov esi, soundblastermsg
  6681 00005158 E8E3CBFFFF          <2> 	call print
  6682                              <2> .nosb:
  6683                              <2> %endif
  6684 0000515D C3                  <2> 	ret
  6685                              <2> 
  6686 0000515E 4B65726E656C20496E- <2> kernelinfomsg db "Kernel Information:",10,0
  6687 00005167 666F726D6174696F6E- <2>
  6688 00005170 3A0A00              <2>
  6689 00005173 427974657320446973- <2> diskbytemsg db "Bytes Disk Space Used",10,0
  6690 0000517C 6B2053706163652055- <2>
  6691 00005185 7365640A00          <2>
  6692 0000518A 4279746573204D656D- <2> membytemsg db "Bytes Memory Space Used",10,0
  6693 00005193 6F7279205370616365- <2>
  6694 0000519C 20557365640A00      <2>
  6695 000051A3 0A53797374656D2049- <2> systeminfomsg db 10,"System Information:",10,0
  6696 000051AC 6E666F726D6174696F- <2>
  6697 000051B5 6E3A0A00            <2>
  6698                              <2> %ifdef sound.included
  6699 000051B9 536F756E64626C6173- <2> 	soundblastermsg db "Soundblaster Detected.",10,0
  6700 000051C2 746572204465746563- <2>
  6701 000051CB 7465642E0A00        <2>
  6702                              <2> %endif
  6703 000051D1 4D4950530A00        <2> cpuspeedmsg db "MIPS",10,0
  6704 000051D7 4D487A0A00          <2> cpuclockmsg db "MHz",10,0
  6705 000051DC 4D42204D656D6F7279- <2> memoryspacemsg db "MB Memory Space",10,0
  6706 000051E5 2053706163650A00    <2>
  6707 000051ED 456E64206F66204D65- <2> endofmemmsg: db "End of Memory Space: 0x",0
  6708 000051F6 6D6F72792053706163- <2>
  6709 000051FF 653A20307800        <2>
  6710                              <1> %include 'source/programs/time.asm'
  6711 00005205 FF2C74696D6500      <2> db 255,44,"time",0	
  6712                              <2> timer:
  6713 0000520C 8B0D[58020000]      <2> 	mov ecx, [timeseconds]
  6714 00005212 51                  <2> 	push ecx
  6715 00005213 8B0D[5C020000]      <2> 	mov ecx, [timenanoseconds]
  6716 00005219 51                  <2> 	push ecx
  6717 0000521A 8B35[EC2F0000]      <2> 	mov esi, [currentcommandloc]
  6718 00005220 81C605000000        <2> 	add esi, 5
  6719 00005226 803E00              <2> 	cmp byte [esi], 0
  6720 00005229 7414                <2> 	je .norun
  6721 0000522B BF[60B50300]        <2> 	mov edi, buftxt
  6722                              <2> .cpcmd:
  6723 00005230 8A06                <2> 	mov al, [esi]
  6724 00005232 8807                <2> 	mov [edi], al
  6725 00005234 46                  <2> 	inc esi
  6726 00005235 47                  <2> 	inc edi
  6727 00005236 3C00                <2> 	cmp al, 0
  6728 00005238 75F6                <2> 	jne .cpcmd
  6729 0000523A E8D1DCFFFF          <2> 	call run
  6730                              <2> .norun:
  6731 0000523F 5A                  <2> 	pop edx
  6732 00005240 58                  <2> 	pop eax
  6733                              <2> 
  6734 00005241 8B0D[58020000]      <2> 	mov ecx, [timeseconds]
  6735 00005247 29C1                <2> 	sub ecx, eax
  6736 00005249 8B1D[5C020000]      <2> 	mov ebx, [timenanoseconds]
  6737 0000524F 29D3                <2> 	sub ebx, edx
  6738 00005251 7307                <2> 	jae .nosign
  6739 00005253 81C300CA9A3B        <2> 	add ebx, 1000000000
  6740 00005259 49                  <2> 	dec ecx
  6741                              <2> .nosign:
  6742 0000525A E8A5E0FFFF          <2> 	call showdec
  6743                              <2> 	
  6744 0000525F 89D9                <2> 	mov ecx, ebx
  6745 00005261 BE[12400000]        <2> 	mov esi, timenscache
  6746 00005266 C7460230303030      <2> 	mov dword [esi+ 2], "0000"
  6747 0000526D C7460630303030      <2> 	mov dword [esi + 6], "0000"
  6748 00005274 C6460A30            <2> 	mov byte [esi + 10], "0"
  6749 00005278 BE[1D400000]        <2> 	mov esi, timenscacheend
  6750 0000527D E850DEFFFF          <2> 	call convert
  6751 00005282 BE[12400000]        <2> 	mov esi, timenscache
  6752 00005287 E8B4CAFFFF          <2> 	call print
  6753 0000528C C605[12400000]08    <2> 	mov byte [timenscache], 8
  6754 00005293 C3                  <2> 	ret
  6755                              <2> 	
  6756                              <1> %include 'source/programs/turnoff.asm'
  6757 00005294 FF2C7475726E6F6666- <2> 	db 255,44,"turnoff",0
  6758 0000529D 00                  <2>
  6759                              <2> 	turnoff:
  6760 0000529E 66BB[B952]          <2> 			mov bx, shutdown
  6761 000052A2 66891D[E30C0000]    <2> 			mov [realmodeptr], bx
  6762 000052A9 BB[E4520000]        <2> 			mov ebx, halt
  6763 000052AE 891D[DF0C0000]      <2> 			mov [realmodereturn], ebx
  6764 000052B4 E90FB9FFFF          <2> 			jmp realmode
  6765                              <2> 
  6766                              <2> [BITS 16]
  6767                              <2> 		shutdown:
  6768 000052B9 B453                <2> 			mov ah, 0x53
  6769 000052BB B004                <2> 			mov al, 4
  6770 000052BD 31DB                <2> 			xor bx, bx
  6771 000052BF CD15                <2> 			int 0x15
  6772                              <2> 			
  6773 000052C1 B453                <2> 			mov ah, 0x53
  6774 000052C3 B001                <2> 			mov al, 1
  6775 000052C5 31DB                <2> 			xor bx, bx
  6776 000052C7 CD15                <2> 			int 0x15
  6777                              <2> 			
  6778 000052C9 B453                <2> 			mov ah, 0x53
  6779 000052CB B008                <2> 			mov al, 8
  6780 000052CD BB0100              <2> 			mov bx, 1
  6781 000052D0 B90100              <2> 			mov cx, 1
  6782 000052D3 CD15                <2> 			int 0x15
  6783                              <2> 			
  6784 000052D5 B453                <2> 			mov ah, 0x53
  6785 000052D7 B007                <2> 			mov al, 7
  6786 000052D9 BB0100              <2> 			mov bx, 1
  6787 000052DC B90300              <2> 			mov cx, 3
  6788 000052DF CD15                <2> 			int 0x15
  6789 000052E1 E9FDFF              <2> 			jmp $
  6790                              <2> 			[BITS 32]
  6791 000052E4 E9FBFFFFFF          <2> halt: jmp $
  6792                              <1> %include 'source/programs/wait.asm'
  6793 000052E9 FF2C7761697400      <2> db 255,44,"wait",0
  6794                              <2> waitkey:
  6795 000052F0 E864D0FFFF          <2> 		call getchar
  6796 000052F5 C3                  <2> 		ret
  6797                              <1> %include 'source/programs/while.asm'
  6798 000052F6 FF2C7768696C6500    <2> db 255,44,"while",0
  6799 000052FE 30C0                <2> whilecmd:  xor al, al
  6800 00005300 3805[5AA10300]      <2> 	cmp [BATCHISON], al
  6801 00005306 0F8453E8FFFF        <2> 	je near notbatch
  6802 0000530C 8B35[56A10300]      <2> 	mov esi, [BATCHPOS]
  6803 00005312 81EE02000000        <2> 	sub esi, 2
  6804 00005318 4E                  <2> whilefnd: dec esi
  6805 00005319 8A06                <2> 	mov al, [esi]
  6806 0000531B 3C0A                <2> 	cmp al, 10
  6807 0000531D 0F840D000000        <2> 	je near whilefnd2
  6808 00005323 3C00                <2> 	cmp al, 0
  6809 00005325 0F8405000000        <2> 	je near whilefnd2
  6810 0000532B E9E8FFFFFF          <2> 	jmp whilefnd
  6811                              <2> whilefnd2:
  6812 00005330 46                  <2> 	inc esi
  6813 00005331 8935[5CA10300]      <2> 	mov [LOOPPOS], esi
  6814 00005337 C605[5BA10300]01    <2> 	mov BYTE [LOOPON], 1
  6815 0000533E BE[60B50300]        <2> 	mov esi, buftxt
  6816 00005343 BB[60B50300]        <2> 	mov ebx, buftxt
  6817 00005348 81C306000000        <2> 	add ebx, 6
  6818 0000534E E9DDF4FFFF          <2> 	jmp chkeqsn
  6819                              <1> progend:		;programs end here	
  6820                              <1> batchprogend:
  6821                                  	%include "source/hardware.asm"
  6822                              <1> %ifdef gui.included
  6823                              <1> 	%include "source/drivers/video/vesa.asm"
  6824                              <2> [BITS 16]
  6825                              <2> guiswitch:
  6826 00005353 81F90000            <2> 	cmp cx, 0
  6827 00005357 750B                <2> 	jne guiswitchdefnum
  6828 00005359 B81200              <2> 	mov ax, 12h
  6829 0000535C 31DB                <2> 	xor bx, bx
  6830 0000535E CD10                <2> 	int 10h
  6831 00005360 E85100              <2> 	call guiloadagain
  6832                              <2> guiswitchnocando:
  6833 00005363 C3                  <2> 	ret	;return without switching as mode number is bad
  6834                              <2> guiswitchdefnum:	;switch to a defined mode number
  6835 00005364 B8004F              <2> 	mov ax, 0x4F00
  6836 00005367 BF[4555]            <2> 	mov di, VBEMODEBLOCK
  6837 0000536A CD10                <2> 	int 10h
  6838 0000536C BE[6755]            <2> 	mov si, reserved
  6839 0000536F 81EE0200            <2> 	sub si, 2
  6840                              <2> .loop:
  6841 00005373 81C60200            <2> 	add si, 2
  6842 00005377 81FE[4556]          <2> 	cmp si, oemdata
  6843 0000537B 74E6                <2> 	je guiswitchnocando
  6844 0000537D 813CFFFF            <2> 	cmp word [si], 0xFFFF
  6845 00005381 74E0                <2> 	je guiswitchnocando
  6846 00005383 390C                <2> 	cmp [si], cx
  6847 00005385 75EC                <2> 	jne .loop
  6848 00005387 8936[9B54]          <2> 	mov [videomodecache], si
  6849 0000538B 81C90040            <2> 	or cx, 0x4000	;make sure linear frame buffer is selected
  6850 0000538F B8014F              <2> 	mov ax, 0x4F01
  6851 00005392 BF[4557]            <2> 	mov di, VBEMODEINFOBLOCK
  6852 00005395 890E[9954]          <2> 	mov [vesamode], cx
  6853 00005399 CD10                <2> 	int 10h
  6854 0000539B E9DB00              <2> 	jmp selectedvesa
  6855                              <2> guiload:
  6856 0000539E BE[1D55]            <2> 	mov si, bootmsg
  6857 000053A1 E8CAAC              <2> 	call printrm
  6858 000053A4 31C0                <2> 	xor ax, ax
  6859 000053A6 CD16                <2> 	int 16h
  6860 000053A8 3C79                <2> 	cmp al, "y"
  6861 000053AA 0F857AAC            <2> 	jne near vgaset
  6862 000053AE BE[A887]            <2> 	mov si, crlf
  6863 000053B1 E8BAAC              <2> 	call printrm
  6864                              <2> guiloadagain:
  6865 000053B4 B8004F              <2> 	mov ax, 04F00h
  6866 000053B7 BF[4555]            <2> 	mov di, VBEMODEBLOCK
  6867 000053BA CD10                <2> 	int 10h
  6868 000053BC BE[6755]            <2> 	mov si, reserved
  6869 000053BF 81EE0200            <2> 	sub si, 2
  6870                              <2> findvideomodes:
  6871 000053C3 81C60200            <2> 	add si, 2
  6872 000053C7 8B0C                <2> 	mov cx, [si]
  6873 000053C9 81F9FFFF            <2> 	cmp cx, 0xFFFF
  6874 000053CD 0F840B00            <2> 	je near nextvmode
  6875 000053D1 81FE[4556]          <2> 	cmp si, oemdata
  6876 000053D5 0F834FAC            <2> 	jae near vgaset	;;kill if no valid list is found
  6877 000053D9 E9E7FF              <2> 	jmp findvideomodes 	
  6878                              <2> ;;debug,shows vmodes available
  6879                              <2> nextvmode:
  6880 000053DC 81EE0200            <2> 	sub si, 2
  6881 000053E0 81FE[6755]          <2> 	cmp si, reserved
  6882 000053E4 0F82CCFF            <2> 	jb near guiloadagain
  6883 000053E8 8B0C                <2> 	mov cx, [si]
  6884 000053EA 81F9FFFF            <2> 	cmp cx, 0xFFFF
  6885 000053EE 0F84EAFF            <2> 	je near nextvmode
  6886 000053F2 81C90040            <2> 	or cx, 0x4000 		;;Linear Frame Buffer
  6887 000053F6 B8014F              <2> 	mov ax, 04F01h
  6888 000053F9 BF[4557]            <2> 	mov di, VBEMODEINFOBLOCK
  6889 000053FC 890E[9954]          <2> 	mov [vesamode], cx
  6890 00005400 CD10                <2> 	int 10h
  6891 00005402 A0[5E57]            <2> 	mov al, [bitsperpixel]
  6892 00005405 3C10                <2> 	cmp al, 16
  6893 00005407 75D3                <2> 	jne nextvmode
  6894 00005409 8936[9B54]          <2> 	mov [videomodecache], si
  6895 0000540D 84E4                <2> 	test ah, ah
  6896 0000540F 0F842300            <2> 	jz near setvesamode
  6897 00005413 E9C6FF              <2> 	jmp nextvmode
  6898 00005416 0A0D49732074686973- <2> isthisvideook db 10,13,"Is this video mode OK?(y/n)",13,10,0
  6899 0000541F 20766964656F206D6F- <2>
  6900 00005428 6465204F4B3F28792F- <2>
  6901 00005431 6E290D0A00          <2>
  6902                              <2> setvesamode:
  6903 00005436 8B36[9B54]          <2> 	mov si, [videomodecache]
  6904 0000543A 8B0C                <2> 	mov cx, [si]
  6905 0000543C E86500              <2> 	call decshow
  6906 0000543F B03A                <2> 	mov al, ':'
  6907 00005441 E8D100              <2> 	call char
  6908 00005444 8B0E[5757]          <2> 	mov cx, [resolutionx]
  6909 00005448 E85900              <2> 	call decshow
  6910 0000544B B078                <2> 	mov al, "x"
  6911 0000544D E8C500              <2> 	call char
  6912 00005450 8B0E[5957]          <2> 	mov cx, [resolutiony]
  6913 00005454 E84D00              <2> 	call decshow
  6914 00005457 B040                <2> 	mov al, "@"
  6915 00005459 E8B900              <2> 	call char
  6916 0000545C 31C9                <2> 	xor cx, cx
  6917 0000545E 8A0E[5E57]          <2> 	mov cl, [bitsperpixel]
  6918 00005462 E83F00              <2> 	call decshow
  6919 00005465 BE[1654]            <2> 	mov si, isthisvideook
  6920 00005468 E803AC              <2> 	call printrm
  6921 0000546B 31C0                <2> 	xor ax, ax
  6922 0000546D CD16                <2> 	int 16h
  6923 0000546F 8B36[9B54]          <2> 	mov si, [videomodecache]
  6924 00005473 3C79                <2> 	cmp al, "y"
  6925 00005475 0F8563FF            <2> 	jne near nextvmode
  6926                              <2> selectedvesa:
  6927 00005479 8B16[5757]          <2> 	mov dx, [resolutionx]
  6928 0000547D 01D2                <2> 	add dx, dx
  6929 0000547F 8916[4558]          <2> 	mov [resolutionx2], dx
  6930 00005483 31D2                <2> 	xor dx, dx
  6931 00005485 31C9                <2> 	xor cx, cx
  6932 00005487 B8024F              <2> 	mov ax, 04F02h
  6933 0000548A 8B1E[9954]          <2> 	mov bx, [vesamode]
  6934 0000548E CD10                <2> 	int 10h		;;enter VESA mode
  6935 00005490 C606[CE87]01        <2> 	mov byte [guion], 1
  6936 00005495 E8A0AB              <2> 	call getmemorysize;get the memory map after the video is initialized
  6937 00005498 C3                  <2> 	ret
  6938                              <2> 	
  6939 00005499 0000                <2> vesamode dw 0
  6940 0000549B 0000                <2> videomodecache dw 0
  6941                              <2> 
  6942 0000549D 0000000000          <2> dcnm db 0,0,0,0,0
  6943 000054A2 0000                <2> dcnmend db 0,0
  6944                              <2> 
  6945                              <2> 
  6946                              <2> decshow:
  6947 000054A4 BE[9D54]            <2> 	mov si, dcnm
  6948                              <2> decclear:
  6949 000054A7 B030                <2> 	mov al, "0"
  6950 000054A9 8804                <2> 	mov [si], al
  6951 000054AB 46                  <2> 	inc si
  6952 000054AC 81FE[A254]          <2> 	cmp si, dcnmend
  6953 000054B0 76F5                <2> 	jbe decclear
  6954 000054B2 4E                  <2> 	dec si
  6955 000054B3 E81500              <2> 	call convertrm
  6956 000054B6 BE[9D54]            <2> 	mov si, dcnm
  6957                              <2> dectst:
  6958 000054B9 8A04                <2> 	mov al, [si]
  6959 000054BB 46                  <2> 	inc si
  6960 000054BC 81FE[A254]          <2> 	cmp si, dcnmend
  6961 000054C0 7704                <2> 	ja dectstend
  6962 000054C2 3C30                <2> 	cmp al, "0"
  6963 000054C4 76F3                <2> 	jbe dectst
  6964                              <2> dectstend:
  6965 000054C6 4E                  <2> 	dec si
  6966 000054C7 E8A4AB              <2> 	call printrm
  6967 000054CA C3                  <2> 	ret
  6968                              <2> 	
  6969                              <2> 	
  6970                              <2> convertrm:
  6971 000054CB 4E                  <2> 	dec si
  6972 000054CC 89F3                <2> 	mov bx, si		;place to convert into must be in si, number to convert must be in cx
  6973                              <2> cnvrtrm:
  6974 000054CE 89DE                <2> 	mov si, bx
  6975 000054D0 81EE0300            <2> 	sub si, 3
  6976 000054D4 46                  <2> ten3rm:	inc si
  6977 000054D5 81F9E803            <2> 	cmp cx, 1000
  6978 000054D9 7209                <2> 	jb ten2rm
  6979 000054DB 81E9E803            <2> 	sub cx, 1000
  6980 000054DF FE04                <2> 	inc byte [si]
  6981 000054E1 E9EAFF              <2> 	jmp cnvrtrm
  6982 000054E4 46                  <2> ten2rm:	inc si
  6983 000054E5 81F96400            <2> 	cmp cx, 100
  6984 000054E9 7209                <2> 	jb ten1rm
  6985 000054EB 81E96400            <2> 	sub cx, 100
  6986 000054EF FE04                <2> 	inc byte [si]
  6987 000054F1 E9DAFF              <2> 	jmp cnvrtrm
  6988 000054F4 46                  <2> ten1rm:	inc si
  6989 000054F5 81F90A00            <2> 	cmp cx, 10
  6990 000054F9 7209                <2> 	jb ten0rm
  6991 000054FB 81E90A00            <2> 	sub cx, 10
  6992 000054FF FE04                <2> 	inc byte [si]
  6993 00005501 E9CAFF              <2> 	jmp cnvrtrm
  6994 00005504 46                  <2> ten0rm:	inc si
  6995 00005505 81F90100            <2> 	cmp cx, 1
  6996 00005509 7209                <2> 	jb tendnrm
  6997 0000550B 81E90100            <2> 	sub cx, 1
  6998 0000550F FE04                <2> 	inc byte [si]
  6999 00005511 E9BAFF              <2> 	jmp cnvrtrm
  7000                              <2> tendnrm:
  7001 00005514 C3                  <2> 	ret
  7002                              <2> 
  7003                              <2>     char: 		    ;char must be in al
  7004 00005515 BB0700              <2>        mov bx, 07
  7005 00005518 B40E                <2> 	   mov ah, 0Eh
  7006 0000551A CD10                <2> 	   int 10h
  7007 0000551C C3                  <2> 	   ret
  7008                              <2> 
  7009 0000551D 426F6F7420696E746F- <2> bootmsg:	db "Boot into the GUI?(y/n)",0
  7010 00005526 20746865204755493F- <2>
  7011 0000552F 28792F6E2900        <2>
  7012                              <2> 
  7013                              <2> 
  7014                              <2> mcursor:
  7015 00005535 01                  <2> 	db	00000001b
  7016 00005536 81                  <2> 	db	10000001b
  7017 00005537 C1                  <2> 	db	11000001b
  7018 00005538 E1                  <2> 	db	11100001b
  7019 00005539 F1                  <2> 	db	11110001b
  7020 0000553A F9                  <2> 	db	11111001b
  7021 0000553B FD                  <2> 	db	11111101b
  7022 0000553C FF                  <2> 	db	11111111b
  7023 0000553D F9                  <2> 	db	11111001b
  7024 0000553E B9                  <2> 	db	10111001b
  7025 0000553F 39                  <2> 	db	00111001b
  7026 00005540 1C                  <2> 	db	00011100b
  7027 00005541 1C                  <2> 	db	00011100b
  7028 00005542 0E                  <2> 	db	00001110b
  7029 00005543 0E                  <2> 	db	00001110b
  7030 00005544 0C                  <2> 	db	00001100b
  7031                              <2> mcursorend:
  7032                              <2> 
  7033                              <2> 
  7034                              <2> VBEMODEBLOCK:
  7035 00005545 00<rept>            <2> vbesignature 		times  4 db 0 	;VBE Signature
  7036 00005549 00<rept>            <2> vbeversion  		times  2 db 0	;VBE Version
  7037 0000554B 00<rept>            <2> oemstringptr  		times  4 db 0	;Pointer to OEM String
  7038 0000554F 00<rept>            <2> capabilities 		times  4 db 0	;Capabilities of graphics cont.
  7039 00005553 00<rept>            <2> videomodeptr 		times  4 db 0	;Pointer to Video Mode List
  7040 00005557 00<rept>            <2> totalmemory   		times  2 db 0	;number of 64Kb memory blocks
  7041 00005559 00<rept>            <2> oemsoftwarerev  	times  2 db 0	;VBE implementation Software revision
  7042 0000555B 00<rept>            <2> oemvendornameptr 	times  4 db 0	;Pointer to Vendor Name String
  7043 0000555F 00<rept>            <2> oemproductnameptr 	times  4 db 0	;Pointer to Product Name String
  7044 00005563 00<rept>            <2> oemproductrevptr 	times  4 db 0	;Pointer to Product Revision String
  7045 00005567 00<rept>            <2> reserved			times  222 db 0	;Reserved for VBE implementation scratch area
  7046 00005645 00<rept>            <2> oemdata 			times  256 db 0	;Data Area for OEM Strings
  7047                              <2> 
  7048                              <2> VBEMODEINFOBLOCK:
  7049                              <2> ;Mandatory information for all VBE revision
  7050 00005745 00<rept>            <2> modeattributes   	times  2 db 0	;Mode attributes
  7051 00005747 00                  <2> winaattributes   	times  1 db 0	;Window A attributes
  7052 00005748 00                  <2> winbattributes   	times  1 db 0	;Window B attributes
  7053 00005749 00<rept>            <2> wingranularity   	times  2 db 0	;Window granularity
  7054 0000574B 00<rept>            <2> winsize          	times  2 db 0	;Window size
  7055 0000574D 00<rept>            <2> winasegment      	times  2 db 0	;Window A start segment
  7056 0000574F 00<rept>            <2> winbsegment      	times  2 db 0	;Window B start segment
  7057 00005751 00<rept>            <2> winfuncptr       	times  4 db 0	;pointer to window function
  7058 00005755 00<rept>            <2> bytesperscanline 	times  2 db 0	;Bytes per scan line
  7059                              <2> 
  7060                              <2> ;Mandatory information for VBE 1.2 and above
  7061 00005757 00<rept>            <2> resolutionx     	times  2 db 0	;Horizontal resolution in pixel or chars
  7062 00005759 00<rept>            <2> resolutiony	    	times  2 db 0	;Vertical resolution in pixel or chars
  7063 0000575B 00                  <2> xcharsize       	times  1 db 0	;Character cell width in pixel
  7064 0000575C 00                  <2> ycharsize       	times  1 db 0	;Character cell height in pixel
  7065 0000575D 00                  <2> numberofplanes  	times  1 db 0	;Number of memory planes
  7066 0000575E 00                  <2> bitsperpixel    	times  1 db 0	;Bits per pixel
  7067 0000575F 00                  <2> numberofbanks   	times  1 db 0	;Number of banks
  7068 00005760 00                  <2> memorymodel     	times  1 db 0	;Memory model type
  7069 00005761 00                  <2> banksize        	times  1 db 0	;Bank size in KB
  7070 00005762 00                  <2> numberofimagepages	times  1 db 0	;Number of images
  7071 00005763 00                  <2> reserved1       	times  1 db 0	;Reserved for page function
  7072                              <2> 
  7073                              <2> ;Direct Color fields (required for direct/6 and YUV/7 memory models)
  7074 00005764 00                  <2> redmasksize			times  1 db 0	;Size of direct color red mask in bits
  7075 00005765 00                  <2> redfieldposition	times  1 db 0	;Bit position of lsb of red bask
  7076 00005766 00                  <2> greenmasksize   	times  1 db 0	;Size of direct color green mask in bits
  7077 00005767 00                  <2> greenfieldposition	times  1 db 0	;Bit position of lsb of green bask
  7078 00005768 00                  <2> bluemasksize		times  1 db 0	;Size of direct color blue mask in bits
  7079 00005769 00                  <2> bluefieldposition	times  1 db 0	;Bit position of lsb of blue bask
  7080 0000576A 00                  <2> rsvdmasksize        times  1 db 0		;Size of direct color reserved mask in bits
  7081 0000576B 00                  <2> rsvdfieldposition	times  1 db 0		;Bit position of lsb of reserved bask
  7082 0000576C 00                  <2> directcolormodeinfo	times  1 db 0	;Direct color mode attributes
  7083                              <2> 
  7084                              <2> ;Mandatory information for VBE 2.0 and above
  7085 0000576D 00<rept>            <2> physbaseptr 		times  4 db 0	;Physical address for flat frame buffer
  7086 00005771 00<rept>            <2> offscreenmemoffset 	times  4 db 0	;Pointer to start of off screen memory
  7087 00005775 00<rept>            <2> offscreenmemsize 	times  2 db 0    ;Amount of off screen memory in 1Kb units
  7088 00005777 00<rept>            <2> reserved2 			times  206 db 0  ;Remainder of ModeInfoBlock
  7089                              <2> 
  7090 00005845 00000000            <2> resolutionx2 dd 0	;this is not part of the VBE but is necessary GUI info
  7091                              <2> VBEEND:
  7092                              <2> [BITS 32]
  7093                              <1> 	%include "source/drivers/input/mouse.asm"
  7094 00005849 00                  <2> mousedisabled db 0
  7095                              <2> 	
  7096                              <2> 	cursorgui:
  7097 0000584A 803D[60870000]01    <2> 		cmp byte [mouseon], 1
  7098 00005851 0F8432000000        <2> 		je near mousedaemon
  7099 00005857 803D[CE870000]00    <2> 		cmp byte [guion], 0
  7100 0000585E 0F841A070000        <2> 		je near entdown
  7101                              <2> 	initmouse:
  7102 00005864 803D[CE870000]00    <2> 		cmp byte [guion], 0
  7103 0000586B 7405                <2> 		je noswmsposinit
  7104 0000586D E8A5150000          <2> 		call switchmousepos2
  7105                              <2> 	noswmsposinit:
  7106 00005872 E85D020000          <2> 	  	call PS2SET
  7107 00005877 E886020000          <2> 		call ACTMOUS
  7108 0000587C C605[60870000]01    <2> 		mov byte [mouseon],1
  7109 00005883 E89F020000          <2> 		call GETB 	;;Get the responce byte of the mouse (like: Hey i am active)
  7110                              <2> 		;call GETB
  7111                              <2> 				;;If the bytes are mixed up,
  7112                              <2> 				;;remove this line or add another of this line.
  7113                              <2> 	nomouse:
  7114 00005888 C3                  <2> 		ret
  7115                              <2> 		
  7116                              <2> 	mousedaemon:
  7117 00005889 803D[60870000]01    <2> 		cmp byte [mouseon], 1
  7118 00005890 75D2                <2> 		jne initmouse
  7119 00005892 E464                <2> 		in al, 64h ; Status
  7120 00005894 A820                <2> 		test al, 20h ; PS2-Mouse?
  7121 00005896 0F8502000000        <2> 		jnz near moused
  7122 0000589C F4                  <2> 		hlt
  7123 0000589D C3                  <2> 		ret
  7124                              <2> 	moused:
  7125 0000589E 803D[49580000]01    <2> 		cmp byte [mousedisabled], 1
  7126 000058A5 74E1                <2> 		je nomouse
  7127 000058A7 E87B020000          <2> 		  call GETB
  7128 000058AC 88C3                <2> 		  mov  bl, al
  7129 000058AE 80E301              <2> 		  and  bl, 1
  7130 000058B1 881D[4C5B0000]      <2> 		  mov  BYTE [LBUTTON], bl
  7131 000058B7 88C3                <2> 		  mov  bl, al
  7132 000058B9 80E302              <2> 		  and  bl, 2
  7133 000058BC D0EB                <2> 		  shr  bl, 1
  7134 000058BE 881D[4D5B0000]      <2> 		  mov  BYTE [RBUTTON], bl
  7135 000058C4 88C3                <2> 		  mov  bl, al
  7136 000058C6 80E304              <2> 		  and  bl, 4
  7137 000058C9 C0EB02              <2> 		  shr  bl, 2
  7138 000058CC 881D[4E5B0000]      <2> 		  mov  BYTE [MBUTTON], bl
  7139 000058D2 E850020000          <2> 		  call GETB
  7140 000058D7 A2[4F5B0000]        <2> 		  mov  BYTE [XCOORD], al
  7141 000058DC E846020000          <2> 		  call GETB
  7142 000058E1 A2[505B0000]        <2> 		  mov  BYTE [YCOORD], al
  7143                              <2> 
  7144                              <2> 	showpixelcursor:
  7145 000058E6 668B15[3B5A0000]    <2> 		mov dx, [mousecursorposition]
  7146 000058ED 668B0D[3D5A0000]    <2> 		mov cx, [mousecursorposition + 2]
  7147 000058F4 668915[375A0000]    <2> 		mov [lastmouseposition], dx
  7148 000058FB 66890D[395A0000]    <2> 		mov [lastmouseposition + 2], cx
  7149 00005902 A0[4F5B0000]        <2> 		mov al, [XCOORD]
  7150 00005907 3C80                <2> 		cmp al, 128
  7151 00005909 730C                <2> 		jae subxcoord
  7152 0000590B 00C0                <2> 		add al, al
  7153 0000590D 30E4                <2> 		xor ah, ah
  7154 0000590F 6601C2              <2> 		add dx, ax
  7155 00005912 E90B000000          <2> 		jmp subxcoorddn
  7156                              <2> 	subxcoord:
  7157 00005917 00C0                <2> 		add al, al
  7158 00005919 30DB                <2> 		xor bl, bl
  7159 0000591B 28C3                <2> 		sub bl, al
  7160 0000591D 30FF                <2> 		xor bh, bh
  7161 0000591F 6629DA              <2> 		sub dx, bx
  7162                              <2> 	subxcoorddn:
  7163 00005922 8A1D[505B0000]      <2> 		mov bl, [YCOORD]
  7164 00005928 30C0                <2> 		xor al, al
  7165 0000592A 28D8                <2> 		sub al, bl
  7166 0000592C 3C80                <2> 		cmp al, 128
  7167 0000592E 730A                <2> 		jae subycoord
  7168 00005930 30E4                <2> 		xor ah, ah
  7169 00005932 6601C1              <2> 		add cx, ax
  7170 00005935 E909000000          <2> 		jmp subycoorddn
  7171                              <2> 	subycoord:
  7172 0000593A 30DB                <2> 		xor bl, bl
  7173 0000593C 28C3                <2> 		sub bl, al
  7174 0000593E 30FF                <2> 		xor bh, bh
  7175 00005940 6629D9              <2> 		sub cx, bx
  7176                              <2> 	subycoorddn:
  7177 00005943 6681FA204E          <2> 		cmp dx, 20000
  7178 00005948 7603                <2> 		jbe nooriginx2
  7179 0000594A 6631D2              <2> 		xor dx, dx
  7180                              <2> 	nooriginx2:
  7181 0000594D 6681F9204E          <2> 		cmp cx, 20000
  7182 00005952 7603                <2> 		jbe nooriginy2
  7183 00005954 6631C9              <2> 		xor cx, cx
  7184                              <2> 	nooriginy2:
  7185 00005957 6681FA0000          <2> 		cmp dx, 0
  7186 0000595C 7415                <2> 		je nofixxcolumn2
  7187 0000595E 663B15[45580000]    <2> 		cmp dx, [resolutionx2]
  7188 00005965 720C                <2> 		jb nofixxcolumn2
  7189 00005967 668B15[45580000]    <2> 		mov dx, [resolutionx2]
  7190 0000596E 6681EA0200          <2> 		sub dx, 2
  7191                              <2> 	nofixxcolumn2:
  7192 00005973 6681F90000          <2> 		cmp cx, 0
  7193 00005978 7415                <2> 		je nofixyrow2
  7194 0000597A 663B0D[59570000]    <2> 		cmp cx, [resolutiony]
  7195 00005981 720C                <2> 		jb nofixyrow2
  7196 00005983 668B0D[59570000]    <2> 		mov cx, [resolutiony]
  7197 0000598A 6681E90100          <2> 		sub cx, 1
  7198                              <2> 	nofixyrow2:
  7199 0000598F 668915[3B5A0000]    <2> 		mov [mousecursorposition], dx
  7200 00005996 66890D[3D5A0000]    <2> 		mov [mousecursorposition + 2], cx
  7201 0000599D 803D[CE870000]00    <2> 		cmp byte [guion], 0
  7202 000059A4 0F8495000000        <2> 		je near termmouse
  7203 000059AA E808140000          <2> 		call switchmousepos ;;use dragging code to ensure proper icon drag
  7204 000059AF 803D[4C5B0000]01    <2> 		cmp byte [LBUTTON], 1
  7205 000059B6 0F8461250000        <2> 		je near clickicon
  7206 000059BC 803D[4D5B0000]01    <2> 		cmp byte [RBUTTON], 1
  7207 000059C3 0F8454250000        <2> 		je near clickicon
  7208 000059C9 A0[0A7F0000]        <2> 		mov al, [pbutton]
  7209 000059CE C705[0D7F0000]0000- <2> 		mov dword [dragging], 0
  7210 000059D6 0000                <2>
  7211 000059D8 3C00                <2> 		cmp al, 0
  7212 000059DA 740F                <2> 		je nopreviousbutton
  7213 000059DC E87E130000          <2> 		call clearmousecursor
  7214 000059E1 E8E5160000          <2> 		call reloadallgraphics
  7215                              <2> 	windowtermcopyend:
  7216 000059E6 E82C140000          <2> 		call switchmousepos2
  7217                              <2> 	nopreviousbutton:
  7218 000059EB 30C0                <2> 		xor al, al
  7219 000059ED A2[0A7F0000]        <2> 		mov [pbutton], al
  7220 000059F2 A2[74840000]        <2> 		mov [windrag], al
  7221 000059F7 A0[4C5B0000]        <2> 		mov al, [LBUTTON]
  7222 000059FC A2[0B7F0000]        <2> 		mov [pLBUTTON], al
  7223 00005A01 A0[4D5B0000]        <2> 		mov al, [RBUTTON]
  7224 00005A06 A2[0C7F0000]        <2> 		mov [pRBUTTON], al
  7225 00005A0B 31D2                <2> 		xor edx, edx
  7226 00005A0D 668B15[3B5A0000]    <2> 		mov dx, [mousecursorposition]
  7227 00005A14 668B0D[3D5A0000]    <2> 		mov cx, [mousecursorposition + 2]
  7228 00005A1B 66BB18C7            <2> 		mov bx, 1100011100011000b
  7229 00005A1F 66B80100            <2> 		mov ax, 1
  7230 00005A23 C605[077F0000]01    <2> 		mov byte [showcursorfonton], 1
  7231 00005A2A E87B1D0000          <2> 		call showfontvesa
  7232 00005A2F C605[077F0000]00    <2> 		mov byte [showcursorfonton], 0
  7233 00005A36 C3                  <2> 		ret
  7234                              <2> 
  7235 00005A37 00000000            <2> lastmouseposition dw 0,0
  7236 00005A3B 00000000            <2> mousecursorposition dw 0,0	
  7237                              <2> 
  7238                              <2> termmouse:
  7239 00005A3F BE[76BC0300]        <2> 		mov esi, videobuf
  7240 00005A44 31D2                <2> 		xor edx, edx
  7241 00005A46 668B15[375A0000]    <2> 		mov dx, [lastmouseposition]
  7242 00005A4D 668B0D[395A0000]    <2> 		mov cx, [lastmouseposition + 2]
  7243 00005A54 66A1[D25A0000]      <2> 		mov ax, [cursorcache]
  7244 00005A5A 663D0000            <2> 		cmp ax, 0
  7245 00005A5E 7425                <2> 		je nocopycursorcache
  7246 00005A60 66C1E104            <2> 		shl cx, 4
  7247 00005A64 66C1E203            <2> 		shl dx, 3
  7248 00005A68 01D6                <2> 		add esi, edx
  7249 00005A6A 6631D2              <2> 		xor dx, dx
  7250 00005A6D 8A15[EB250000]      <2> 		mov dl, [charxy]
  7251 00005A73 6641                <2> 		inc cx
  7252                              <2> termmousecplp1:
  7253 00005A75 01D6                <2> 		add esi, edx
  7254 00005A77 6649                <2> 		dec cx
  7255 00005A79 6681F90000          <2> 		cmp cx, 0
  7256 00005A7E 75F5                <2> 		jne termmousecplp1
  7257 00005A80 29D6                <2> 		sub esi, edx
  7258 00005A82 668906              <2> 		mov [esi], ax
  7259                              <2> nocopycursorcache:
  7260 00005A85 BE[76BC0300]        <2> 		mov esi, videobuf
  7261 00005A8A 31D2                <2> 		xor edx, edx
  7262 00005A8C 668B15[3B5A0000]    <2> 		mov dx, [mousecursorposition]
  7263 00005A93 668B0D[3D5A0000]    <2> 		mov cx, [mousecursorposition + 2]
  7264 00005A9A 66C1E104            <2> 		shl cx, 4
  7265 00005A9E 66C1E203            <2> 		shl dx, 3
  7266 00005AA2 01D6                <2> 		add esi, edx
  7267 00005AA4 6631D2              <2> 		xor dx, dx
  7268 00005AA7 8A15[EB250000]      <2> 		mov dl, [charxy]
  7269 00005AAD 6641                <2> 		inc cx
  7270                              <2> termmousecplp2:
  7271 00005AAF 01D6                <2> 		add esi, edx
  7272 00005AB1 6649                <2> 		dec cx
  7273 00005AB3 6681F90000          <2> 		cmp cx, 0
  7274 00005AB8 75F5                <2> 		jne termmousecplp2
  7275 00005ABA 29D6                <2> 		sub esi, edx
  7276 00005ABC 668B06              <2> 		mov ax, [esi]
  7277 00005ABF 66A3[D25A0000]      <2> 		mov [cursorcache], ax
  7278 00005AC5 B080                <2> 		mov al, 128
  7279 00005AC7 B407                <2> 		mov ah, 7
  7280 00005AC9 668906              <2> 		mov [esi], ax
  7281 00005ACC E8F0CDFFFF          <2> 		call termcopy
  7282 00005AD1 C3                  <2> 		ret
  7283 00005AD2 0000                <2> cursorcache db 0,0
  7284                              <2> 
  7285                              <2> PS2SET:
  7286 00005AD4 B0A8                <2>   mov  al, 0xa8		; enable mouse port
  7287 00005AD6 E664                <2>   out  0x64, al		; write to keyboardcontroller
  7288 00005AD8 E801000000          <2>   call CHKPRT		; check if command is progressed (demand!)
  7289 00005ADD C3                  <2> ret
  7290                              <2> 
  7291                              <2> CHKPRT:
  7292 00005ADE 66B96400            <2>   mov  cx, 100
  7293                              <2>  .again:
  7294 00005AE2 E464                <2>   in   al, 0x64		; read from keyboardcontroller
  7295 00005AE4 A802                <2>   test al, 2		; Check if input buffer is empty
  7296 00005AE6 7402                <2>   je .go
  7297 00005AE8 E2F8                <2>   loop .again
  7298                              <2>  .go:
  7299 00005AEA C3                  <2> ret
  7300                              <2> 
  7301                              <2> WMOUS:
  7302 00005AEB B0D4                <2>   mov  al, 0xd4		; write to mouse device instead of to keyboard
  7303 00005AED E664                <2>   out  0x64, al		; write to keyboardcontroller
  7304 00005AEF E8EAFFFFFF          <2>   call CHKPRT		; check if command is progressed (demand!)
  7305 00005AF4 C3                  <2> ret
  7306                              <2> 
  7307                              <2> MBUFFUL:
  7308 00005AF5 66B96400            <2>   mov cx, 100
  7309                              <2>  .mn:
  7310 00005AF9 E464                <2>   in   al, 0x64		; read from keyboardcontroller
  7311 00005AFB A820                <2>   test al, 0x20		; check if mouse output buffer is full
  7312 00005AFD 7402                <2>   jz  .mnn
  7313 00005AFF E2F8                <2>   loop .mn
  7314                              <2>  .mnn:
  7315 00005B01 C3                  <2> ret
  7316                              <2> 
  7317                              <2> 
  7318                              <2> ACTMOUS:
  7319 00005B02 E8E4FFFFFF          <2>   call WMOUS
  7320 00005B07 B0F4                <2>   mov  al, 0xf4 	; Command to activate mouse itselve (Stream mode)
  7321 00005B09 E660                <2>   out  0x60, al		; write ps/2 controller output port (activate mouse)
  7322 00005B0B E8CEFFFFFF          <2>   call CHKPRT		; check if command is progressed (demand!)
  7323 00005B10 E801000000          <2>   call CHKMOUS		; check if a byte is available
  7324 00005B15 C3                  <2> ret
  7325                              <2> 
  7326                              <2> CHKMOUS:
  7327 00005B16 B300                <2>   mov  bl, 0
  7328 00005B18 66B96400            <2>   mov cx, 100
  7329                              <2>  .vrd:
  7330 00005B1C E464                <2>   in   al, 0x64		; read from keyboardcontroller
  7331 00005B1E A801                <2>   test al, 1		; check if controller buffer (60h) has data
  7332 00005B20 7504                <2>   jnz .yy
  7333 00005B22 E2F8                <2>   loop .vrd
  7334 00005B24 B301                <2>   mov  bl, 1
  7335                              <2>  .yy:
  7336 00005B26 C3                  <2> ret
  7337                              <2> 
  7338                              <2> GETB:
  7339                              <2>  .cagain:
  7340 00005B27 E8EAFFFFFF          <2>   call CHKMOUS		; check if a byte is available
  7341 00005B2C 08DB                <2>   or bl, bl
  7342 00005B2E 75F7                <2>   jnz .cagain
  7343 00005B30 B0AD                <2>   mov  al, 0xad		; Disable Keyboard
  7344 00005B32 E664                <2>   out  0x64, al		; write to keyboardcontroller
  7345 00005B34 E8A5FFFFFF          <2>   call CHKPRT		; check if command is progressed (demand!)
  7346 00005B39 6631C0              <2>   xor  ax, ax
  7347 00005B3C E460                <2>   in   al, 0x60		; read ps/2 controller output port (mousebyte)
  7348 00005B3E 88C2                <2>   mov  dl, al
  7349 00005B40 B0AE                <2>   mov  al, 0xae		; Enable Keyboard
  7350 00005B42 E664                <2>   out  0x64, al		; write to keyboardcontroller
  7351 00005B44 E895FFFFFF          <2>   call CHKPRT		; check if command is progressed (demand!)
  7352 00005B49 88D0                <2>   mov  al, dl
  7353 00005B4B C3                  <2> ret
  7354                              <2> 
  7355 00005B4C 00                  <2> LBUTTON db 0x00	;	Left   button status 1=PRESSED 0=RELEASED
  7356 00005B4D 00                  <2> RBUTTON db 0x00	;	Right  button status 1=PRESSED 0=RELEASED
  7357 00005B4E 00                  <2> MBUTTON db 0x00	;	Middle button status 1=PRESSED 0=RELEASED
  7358 00005B4F 00                  <2> XCOORD  db 0x00	;	the moved distance  (horizontal)
  7359 00005B50 00                  <2> YCOORD  db 0x00	;	the moved distance  (vertical)
  7360                              <1> %endif
  7361                              <1> %include "source/drivers/sound/pcspkr.asm"
  7362                              <2> ;PC Speaker Drivers
  7363                              <2> PCSpeakerRAW:
  7364 00005B51 60                  <2> 	pusha
  7365                              <2> nosoundrep:
  7366 00005B52 8B35[63020000]      <2> 	mov esi, [soundpos]
  7367 00005B58 31C9                <2> 	xor ecx, ecx
  7368 00005B5A 668B0D[61020000]    <2> 	mov cx, [soundrepititions]
  7369 00005B61 6681F90000          <2> 	cmp cx, 0
  7370 00005B66 0F8548000000        <2> 	jne near donesetpitch
  7371 00005B6C 668B0E              <2> 	mov cx, [esi]
  7372 00005B6F 668B5E02            <2> 	mov bx, [esi + 2]
  7373 00005B73 66890D[61020000]    <2> 	mov [soundrepititions], cx
  7374 00005B7A 81C604000000        <2> 	add esi, 4
  7375 00005B80 8935[63020000]      <2> 	mov [soundpos], esi
  7376 00005B86 3B35[67020000]      <2> 	cmp esi, [soundendpos]
  7377 00005B8C 7735                <2> 	ja stopsound
  7378 00005B8E 66813D[61020000]00- <2> 	cmp word [soundrepititions], 0
  7379 00005B96 00                  <2>
  7380 00005B97 74B9                <2> 	je nosoundrep
  7381 00005B99 6681FB0000          <2> 	cmp bx, 0
  7382 00005B9E 740F                <2> 	je nosoundplay
  7383 00005BA0 E840000000          <2> 	call setpitch
  7384 00005BA5 E849000000          <2> 	call startsound
  7385 00005BAA E905000000          <2> 	jmp donesetpitch
  7386                              <2> nosoundplay:
  7387 00005BAF E846000000          <2> 	call killsound
  7388                              <2> donesetpitch:
  7389 00005BB4 6649                <2> 	dec cx
  7390 00005BB6 66890D[61020000]    <2> 	mov [soundrepititions], cx
  7391 00005BBD 61                  <2> 	popa
  7392 00005BBE E9DDA6FFFF          <2> 	jmp timerinterrupt
  7393                              <2> stopsound:
  7394 00005BC3 31C0                <2> 	xor eax, eax
  7395 00005BC5 66A3[61020000]      <2> 	mov [soundrepititions], ax
  7396 00005BCB A2[60020000]        <2> 	mov [soundon], al
  7397 00005BD0 A3[63020000]        <2> 	mov [soundpos], eax
  7398 00005BD5 A3[67020000]        <2> 	mov [soundendpos], eax
  7399 00005BDA E81B000000          <2> 	call killsound
  7400 00005BDF 61                  <2> 	popa
  7401 00005BE0 E9BBA6FFFF          <2> 	jmp timerinterrupt
  7402                              <2> 
  7403                              <2> 
  7404                              <2> setpitch:
  7405 00005BE5 B0B6                <2> 	mov al, 0xB6
  7406 00005BE7 E643                <2> 	out 0x43, al
  7407 00005BE9 6689D8              <2> 	mov ax, bx
  7408 00005BEC E642                <2> 	out 0x42, al
  7409 00005BEE 88E0                <2> 	mov al, ah
  7410 00005BF0 E642                <2> 	out 0x42, al
  7411 00005BF2 C3                  <2> 	ret
  7412                              <2> startsound:
  7413 00005BF3 E461                <2> 	in al, 0x61
  7414 00005BF5 0C03                <2> 	or al, 3
  7415 00005BF7 E661                <2> 	out 0x61, al
  7416 00005BF9 C3                  <2> 	ret
  7417                              <2> killsound:
  7418 00005BFA E461                <2> 	in al, 0x61
  7419 00005BFC 24FC                <2> 	and al, 0xFC
  7420 00005BFE E661                <2> 	out 0x61, al
  7421 00005C00 C3                  <2> 	ret
  7422                              <2> 	
  7423                              <1> %ifdef sound.included
  7424                              <1> 	%include "source/drivers/sound/sblaster.asm"
  7425                              <2> ;Sound Blaster Drivers
  7426                              <2> sblaster:
  7427                              <2> .init:
  7428 00005C01 E8E8010000          <2> 		call ResetDSP			;If the system is Sound Blaster 16 compatible, reset the DSP
  7429 00005C06 A2[485E0000]        <2> 		mov [SoundBlaster], al	;if the reset worked, show an available card
  7430 00005C0B 3C00                <2> 		cmp al, 0
  7431 00005C0D 7418                <2> 		je .noinit
  7432 00005C0F B0D1                <2> 		mov	al,0D1h 		; turn speaker(s) on
  7433 00005C11 E80C020000          <2> 		call WriteDSP
  7434 00005C16 B088                <2> 		mov	al,088h 		; Left = 8, Right = 8 (15-highest)
  7435 00005C18 E8C2010000          <2> 		call MstrVol 		; L = Hi Nibble, R = Lo Nibble
  7436 00005C1D BE[285C0000]        <2> 		mov esi, .initmsg
  7437 00005C22 E819C1FFFF          <2> 		call print
  7438                              <2> .noinit:
  7439 00005C27 C3                  <2> 		ret
  7440 00005C28 536F756E64626C6173- <2> .initmsg db "Soundblaster Initialized",10,0
  7441 00005C31 74657220496E697469- <2>
  7442 00005C3A 616C697A65640A00    <2>
  7443                              <2> sblaster.cont: ;this function goes to the next available portion of a sound, if necessary
  7444 00005C42 813D[335E0000]0000- <2> 	cmp dword [Length0], 0
  7445 00005C4A 0000                <2>
  7446 00005C4C 0F8462000000        <2> 	je near .done
  7447 00005C52 FF0D[335E0000]      <2> 	dec dword [Length0]
  7448 00005C58 E908000000          <2> 	jmp .notodd
  7449                              <2> .oddlength:
  7450 00005C5D 31C9                <2> 	xor ecx, ecx
  7451 00005C5F 880D[325E0000]      <2> 	mov [OddLength], cl
  7452                              <2> .notodd:
  7453 00005C65 8B35[395E0000]      <2> 	mov esi, [NextMemLoc]
  7454 00005C6B 31C9                <2> 	xor ecx, ecx
  7455 00005C6D 668B0D[375E0000]    <2> 	mov cx, [Length1]
  7456 00005C74 D1E9                <2> 	shr ecx, 1
  7457 00005C76 6641                <2> 	inc cx
  7458 00005C78 31DB                <2> 	xor ebx, ebx
  7459 00005C7A 668B1D[415E0000]    <2> 	mov bx, [SegLoc]
  7460 00005C81 6601CB              <2> 	add bx, cx
  7461 00005C84 66891D[415E0000]    <2> 	mov [SegLoc], bx
  7462 00005C8B 81C300000800        <2> 	add ebx, 0x80000 ;linear address of sb buffer
  7463 00005C91 8935[3D5E0000]      <2> 	mov [MemLoc], esi
  7464 00005C97 89C8                <2> 	mov eax, ecx
  7465 00005C99 01F0                <2> 	add eax, esi
  7466 00005C9B A3[395E0000]        <2> 	mov [NextMemLoc], eax
  7467 00005CA0 E833000000          <2> 	call DMACopy
  7468                              <2> 	;call DMAPlay
  7469 00005CA5 E8E0000000          <2> 	call PlayDSP
  7470 00005CAA 66BA2E02            <2> 	mov dx, (BasePort+0xE)
  7471 00005CAE EC                  <2> 	in al, dx ;acknowledge the interrupt 
  7472 00005CAF E99EA6FFFF          <2> 	jmp handled2 ;it is part of an interrupt routine
  7473                              <2> .done:
  7474 00005CB4 803D[325E0000]01    <2> 	cmp byte [OddLength], 1
  7475 00005CBB 74A0                <2> 	je .oddlength
  7476 00005CBD 31C0                <2> 	xor eax, eax
  7477 00005CBF 66A3[375E0000]      <2> 	mov [Length1], ax
  7478 00005CC5 66B8D000            <2> 	mov ax, 0xD0
  7479 00005CC9 E854010000          <2> 	call WriteDSP
  7480 00005CCE 66BA2E02            <2> 	mov dx, (BasePort+0xE)
  7481 00005CD2 EC                  <2> 	in al, dx ;acknowledge the interrupt 
  7482 00005CD3 E97AA6FFFF          <2> 	jmp handled2
  7483                              <2> 	
  7484                              <2> DMACopy:
  7485 00005CD8 66B80800            <2> 		mov ax, LINEAR_SEL
  7486 00005CDC 8EE0                <2> 		mov fs, ax
  7487 00005CDE C1E902              <2> 		shr ecx, 2
  7488                              <2> .loop:
  7489 00005CE1 8B06                <2> 		mov eax, [esi]
  7490 00005CE3 648903              <2> 		mov [fs:ebx], eax
  7491 00005CE6 81C604000000        <2> 		add esi, 4
  7492 00005CEC 81C304000000        <2> 		add ebx, 4
  7493 00005CF2 E2ED                <2> 		loop .loop
  7494 00005CF4 66B83000            <2> 		mov ax, NEW_DATA_SEL
  7495 00005CF8 8EE0                <2> 		mov fs, ax
  7496 00005CFA C3                  <2> 		ret
  7497                              <2> 		
  7498                              <2> 
  7499                              <2> DMAPlay:    ;uses eax ebx edx
  7500 00005CFB C605[435E0000]00    <2> 		mov	byte [Page1],00h
  7501                              <2> 
  7502 00005D02 B005                <2> 		mov	al,(Channel+4)
  7503 00005D04 66BA0A00            <2> 		mov	dx,0Ah
  7504 00005D08 EE                  <2> 		out	dx,al
  7505 00005D09 30C0                <2> 		xor	al,al
  7506 00005D0B 66BA0C00            <2> 		mov	dx,0Ch
  7507 00005D0F EE                  <2> 		out	dx,al
  7508 00005D10 B059                <2> 		mov	al,ModeReg
  7509 00005D12 66BA0B00            <2> 		mov	dx,0Bh
  7510 00005D16 EE                  <2> 		out	dx,al
  7511 00005D17 B800000800          <2> 		mov	eax,0x80000
  7512 00005D1C 66BA0200            <2> 		mov	dx,AddPort
  7513 00005D20 EE                  <2> 		out	dx,al
  7514 00005D21 86C4                <2> 		xchg al,ah
  7515 00005D23 EE                  <2> 		out	dx,al
  7516 00005D24 B800000800          <2> 		mov	eax,0x80000
  7517 00005D29 89C2                <2> 		mov	edx,eax
  7518 00005D2B 2500000100          <2> 		and	eax,65536
  7519 00005D30 7406                <2> 		jz	MemLocN1
  7520 00005D32 FE05[435E0000]      <2> 		inc	byte [Page1]
  7521                              <2> MemLocN1:
  7522 00005D38 89D0                <2> 		mov	eax,edx
  7523 00005D3A 2500000200          <2> 		and	eax,131072
  7524 00005D3F 7407                <2> 		jz	MemLocN2
  7525 00005D41 8005[435E0000]02    <2> 		add	byte [Page1],02
  7526                              <2> MemLocN2:
  7527 00005D48 89D0                <2> 		mov	eax,edx
  7528 00005D4A 2500000400          <2> 		and	eax,262144
  7529 00005D4F 7407                <2> 		jz	MemLocN3
  7530 00005D51 8005[435E0000]04    <2> 		add	byte [Page1],04
  7531                              <2> MemLocN3:
  7532 00005D58 89D0                <2> 		mov	eax,edx
  7533 00005D5A 2500000800          <2> 		and	eax,524288
  7534 00005D5F 7407                <2> 		jz	MemLocN4
  7535 00005D61 8005[435E0000]08    <2> 		add	byte [Page1],08
  7536                              <2> MemLocN4:
  7537 00005D68 66BA8300            <2> 		mov	dx,PgPort
  7538 00005D6C A0[435E0000]        <2> 		mov	al,[Page1]
  7539 00005D71 EE                  <2> 		out	dx,al
  7540 00005D72 66BA0300            <2> 		mov	dx,LenPort
  7541 00005D76 66A1[375E0000]      <2> 		mov	ax,[Length1]
  7542 00005D7C 6648                <2> 		dec ax
  7543 00005D7E EE                  <2> 		out	dx,al
  7544 00005D7F 86C4                <2> 		xchg al,ah
  7545 00005D81 EE                  <2> 		out	dx,al
  7546 00005D82 66BA0A00            <2> 		mov	dx,0Ah
  7547 00005D86 B001                <2> 		mov	al,Channel
  7548 00005D88 EE                  <2> 		out	dx,al
  7549 00005D89 C3                  <2> 		ret
  7550                              <2> 		
  7551                              <2> PlayDSP:
  7552 00005D8A B040                <2> 		mov	al,40h
  7553 00005D8C E891000000          <2> 		call WriteDSP
  7554 00005D91 31D2                <2> 		xor	edx,edx
  7555 00005D93 B840420F00          <2> 		mov	eax,1000000
  7556 00005D98 8B1D[445E0000]      <2> 		mov	ebx,[Freq]
  7557 00005D9E 803D[315E0000]00    <2> 		cmp byte [Stereo], 0
  7558 00005DA5 7402                <2> 		je .nost
  7559 00005DA7 D1E3                <2> 		shl ebx, 1
  7560                              <2> .nost:
  7561 00005DA9 F7F3                <2> 		div	ebx
  7562 00005DAB 89C3                <2> 		mov	ebx,eax
  7563 00005DAD B800010000          <2> 		mov	eax,256
  7564 00005DB2 29D8                <2> 		sub	eax,ebx
  7565 00005DB4 E869000000          <2> 		call WriteDSP
  7566 00005DB9 B014                <2> 		mov	al,14h	;write the mode
  7567 00005DBB 803D[315E0000]00    <2> 		cmp byte [Stereo], 0
  7568 00005DC2 7400                <2> 		je .nost2
  7569                              <2> 		
  7570                              <2> .nost2:
  7571 00005DC4 E859000000          <2> 		call WriteDSP
  7572 00005DC9 66A1[375E0000]      <2> 		mov	ax,[Length1]
  7573 00005DCF 66D1E8              <2> 		shr ax, 1
  7574 00005DD2 E84B000000          <2> 		call WriteDSP
  7575 00005DD7 86C4                <2> 		xchg al,ah
  7576 00005DD9 E844000000          <2> 		call WriteDSP
  7577 00005DDE C3                  <2> 		ret
  7578                              <2> 
  7579                              <2> MstrVol:    ;uses ax dx
  7580 00005DDF 6650                <2> 	   push ax
  7581 00005DE1 66BA2402            <2> 	   mov	dx,(BasePort+4)
  7582 00005DE5 B022                <2> 	   mov	al,22h
  7583 00005DE7 EE                  <2> 	   out	dx,al
  7584 00005DE8 6658                <2> 	   pop	ax
  7585 00005DEA 6642                <2> 	   inc	dx
  7586 00005DEC EE                  <2> 	   out	dx,al
  7587 00005DED C3                  <2> 	   ret
  7588                              <2> 	   
  7589                              <2> ResetDSP:   ; uses cx dx
  7590 00005DEE 66BA2602            <2> 			mov	dx,(BasePort+6)
  7591 00005DF2 B001                <2> 			mov	al,01
  7592 00005DF4 EE                  <2> 			out	dx,al
  7593 00005DF5 66B93200            <2> 			mov	cx,50
  7594 00005DF9 EC                  <2> WaitIt1:	in	al,dx
  7595 00005DFA E2FD                <2> 			loop WaitIt1
  7596 00005DFC 30C0                <2> 			xor	al,al
  7597 00005DFE EE                  <2> 			out	dx,al
  7598 00005DFF 66B93200            <2> 			mov	cx,50
  7599 00005E03 EC                  <2> WaitIt2:	in	al,dx
  7600 00005E04 E2FD                <2> 			loop WaitIt2
  7601 00005E06 B4FF                <2> 			mov	ah,0FFh 		; part of Return Code
  7602 00005E08 66BA2E02            <2> 			mov	dx,(BasePort+14)
  7603 00005E0C EC                  <2> 			in	al,dx
  7604 00005E0D 2480                <2> 			and	al,80h
  7605 00005E0F 3C80                <2> 			cmp	al,80h
  7606 00005E11 750C                <2> 			jne	ResetErr
  7607 00005E13 66BA2A02            <2> 			mov	dx,(BasePort+10)
  7608 00005E17 EC                  <2> 			in	al,dx
  7609 00005E18 3CAA                <2> 			cmp	al,0AAh
  7610 00005E1A 7503                <2> 			jne	ResetErr
  7611 00005E1C B001                <2> ResetOK:	mov al, 1		; return ax = 0 if reset ok
  7612 00005E1E C3                  <2> 			ret
  7613 00005E1F 30C0                <2> ResetErr:	xor al, al
  7614 00005E21 C3                  <2> 			ret
  7615                              <2> 
  7616                              <2> WriteDSP:   ;uses ax dx
  7617 00005E22 6650                <2> 		push ax
  7618 00005E24 66BA2C02            <2> 		mov	dx,(BasePort+12)
  7619 00005E28 EC                  <2> WaitIt:	in	al,dx
  7620 00005E29 2480                <2> 		and	al,80h
  7621 00005E2B 75FB                <2> 		jnz	WaitIt
  7622 00005E2D 6658                <2> 		pop	ax
  7623 00005E2F EE                  <2> 		out	dx,al
  7624 00005E30 C3                  <2> 		ret
  7625                              <2> 
  7626 00005E31 00                  <2> Stereo db 0
  7627 00005E32 00                  <2> OddLength db 0
  7628 00005E33 00000000            <2> Length0 dd	0
  7629 00005E37 0000                <2> Length1	dw  0
  7630 00005E39 00000000            <2> NextMemLoc dd 0
  7631 00005E3D 00000000            <2> MemLoc	dd  0
  7632 00005E41 0000                <2> SegLoc  dw 0
  7633 00005E43 00                  <2> Page1	db  0
  7634 00005E44 00000000            <2> Freq	dd	0
  7635                              <2> PgPort	equ 83h
  7636                              <2> AddPort	equ 02h
  7637                              <2> LenPort	equ 03h
  7638                              <2> ModeReg	equ 59h
  7639                              <2> Channel	equ 01h
  7640                              <2> BasePort	equ 220h
  7641 00005E48 00                  <2> SoundBlaster	db 0
  7642                              <1> %endif
  7643                              <1> %ifdef io.serial
  7644                              <1> 	%include "source/drivers/input/serial.asm"
  7645                              <1> %else
  7646                              <1> 	%include "source/drivers/input/keyboard.asm"
  7647 00005E49 00                  <2> specialkey db 0
  7648                              <2> ;charregion db 0
  7649                              <2> waitforinput:		;this is basically the idle process
  7650                              <2> 					;this halts the cpu for a small amount of time and then sees if there was a keypress
  7651                              <2> 					;this lets the cpu stay at close to 0% instead of 100%
  7652 00005E4A 6631C0              <2> 	xor ax, ax
  7653 00005E4D A0[DE690000]        <2> 	mov al, [threadson]
  7654 00005E52 8825[DE690000]      <2> 	mov [threadson], ah
  7655 00005E58 FB                  <2> 	sti
  7656 00005E59 F4                  <2> 	hlt
  7657 00005E5A A2[DE690000]        <2> 	mov [threadson], al
  7658 00005E5F 66813D[BD230000]00- <2> 	cmp word [trans], 0
  7659 00005E67 00                  <2>
  7660 00005E68 7401                <2> 	je getkey
  7661 00005E6A C3                  <2> 	ret
  7662                              <2> getkey:
  7663 00005E6B 31C0                <2> 		xor eax, eax
  7664 00005E6D A2[495E0000]        <2> 		mov [specialkey], al
  7665 00005E72 A3[B9230000]        <2> 		mov [lastkey], eax
  7666 00005E77 E464                <2> 		in al, 64h ; Status
  7667                              <2> 	%ifdef gui.included
  7668 00005E79 A820                <2> 		test al, 20h ; PS2-Mouse?
  7669 00005E7B 0F851DFAFFFF        <2> 		jnz near moused
  7670                              <2> 	%endif
  7671 00005E81 A801                <2> 		test al, 1 
  7672 00005E83 74C5                <2> 		jz waitforinput ; if output buffer full or no keypress, jump to idle process
  7673                              <2> 	calckey:
  7674 00005E85 E460                <2> 		in al, 60h
  7675 00005E87 30E4                <2> 		xor ah, ah
  7676 00005E89 6689C3              <2> 		mov bx, ax
  7677 00005E8C 66A3[BB230000]      <2> 		mov [lastkey + 2], ax
  7678 00005E92 BF[21600000]        <2> 		mov edi, scancode
  7679                              <2> 	searchscan: 
  7680 00005E97 80FB3A              <2> 		cmp bl, 3Ah
  7681 00005E9A 7314                <2> 		jae scanother
  7682 00005E9C C1E004              <2> 		shl eax, 4
  7683 00005E9F 01C7                <2> 		add edi, eax
  7684 00005EA1 668B07              <2> 		mov ax, [edi]
  7685 00005EA4 663D0000            <2> 		cmp ax, 0
  7686 00005EA8 7406                <2> 		je scanother
  7687 00005EAA E9D0000000          <2> 		jmp scanfound
  7688 00005EAF 00                  <2> uppercase db 0
  7689                              <2> scanother:
  7690 00005EB0 6631C0              <2> 		xor ax, ax
  7691 00005EB3 66A3[B9230000]      <2> 		mov [lastkey], ax
  7692 00005EB9 80FBE0              <2> 		cmp bl, 0E0h
  7693 00005EBC 0F8477000000        <2> 		je near getkeyspecial
  7694 00005EC2 803D[495E0000]E0    <2> 		cmp byte [specialkey], 0xE0
  7695 00005EC9 7525                <2> 		jne nospecialkey
  7696 00005ECB 80FB38              <2> 		cmp bl, 38h
  7697 00005ECE 0F849A000000        <2> 		je near alton
  7698 00005ED4 80FBB8              <2> 		cmp bl, 0B8h
  7699 00005ED7 0F8499000000        <2> 		je near altoff
  7700 00005EDD 80FB1D              <2> 		cmp bl, 1Dh
  7701 00005EE0 0F8478000000        <2> 		je near ctron
  7702 00005EE6 80FB9D              <2> 		cmp bl, 9Dh
  7703 00005EE9 0F8477000000        <2> 		je near ctroff
  7704 00005EEF C3                  <2> 		ret
  7705                              <2> nospecialkey:
  7706 00005EF0 80FB2A              <2> 		cmp bl, 2Ah
  7707 00005EF3 0F8455000000        <2> 		je near shifton
  7708 00005EF9 80FB36              <2> 		cmp bl, 36h
  7709 00005EFC 0F844C000000        <2> 		je near shifton
  7710 00005F02 80FB1C              <2> 		cmp bl, 1Ch
  7711 00005F05 0F8473000000        <2> 		je near entdown
  7712 00005F0B 80FBAA              <2> 		cmp bl, 0AAh
  7713 00005F0E 0F8442000000        <2> 		je near shiftoff
  7714 00005F14 80FBB6              <2> 		cmp bl, 0B6h
  7715 00005F17 0F8439000000        <2> 		je near shiftoff
  7716 00005F1D 80FB3A              <2> 		cmp bl, 3Ah
  7717 00005F20 0F84A7000000        <2> 		je near capslock
  7718 00005F26 80FB45              <2> 		cmp bl, 0x45
  7719 00005F29 0F84AF000000        <2> 		je near numlock
  7720 00005F2F 80FB46              <2> 		cmp bl, 0x46
  7721 00005F32 0F84BE000000        <2> 		je near scrolllock
  7722 00005F38 C3                  <2> 		ret
  7723                              <2> 	getkeyspecial:
  7724 00005F39 C605[495E0000]E0    <2> 		mov byte [specialkey], 0xE0
  7725 00005F40 E940FFFFFF          <2> 		jmp calckey
  7726                              <2> 	shift:
  7727 00005F45 A0[AF5E0000]        <2> 		mov al, [uppercase]
  7728 00005F4A 3C01                <2> 		cmp al, 1
  7729 00005F4C 7308                <2> 		jae shiftoff
  7730                              <2> 	shifton:
  7731 00005F4E C605[AF5E0000]01    <2> 		mov byte [uppercase], 1
  7732 00005F55 C3                  <2> 		ret
  7733                              <2> 	shiftoff:
  7734 00005F56 C605[AF5E0000]00    <2> 		mov byte [uppercase], 0
  7735 00005F5D C3                  <2> 		ret
  7736                              <2> 	ctron:
  7737 00005F5E C605[CC5F0000]01    <2> 		mov byte [ctrkey], 1
  7738 00005F65 C3                  <2> 		ret
  7739                              <2> 	ctroff:
  7740 00005F66 C605[CC5F0000]00    <2> 		mov byte [ctrkey], 0
  7741 00005F6D C3                  <2> 		ret
  7742                              <2> 	alton:
  7743 00005F6E C605[CB5F0000]01    <2> 		mov byte [altkey], 1
  7744 00005F75 C3                  <2> 		ret
  7745                              <2> 	altoff:
  7746 00005F76 C605[CB5F0000]00    <2> 		mov byte [altkey], 0
  7747 00005F7D C3                  <2> 		ret
  7748                              <2> 	entdown:
  7749 00005F7E C3                  <2> 		ret
  7750                              <2> scanfound:
  7751 00005F7F 81C708000000        <2> 		add edi, 8
  7752 00005F85 803D[CC5F0000]01    <2> 		cmp byte [ctrkey], 1
  7753 00005F8C 7306                <2> 		jae ctrlin
  7754 00005F8E 81EF08000000        <2> 		sub edi, 8
  7755                              <2> 	ctrlin:
  7756 00005F94 81C704000000        <2> 		add edi, 4
  7757 00005F9A 803D[CB5F0000]01    <2> 		cmp byte [altkey], 1
  7758 00005FA1 7306                <2> 		jae altin
  7759 00005FA3 81EF04000000        <2> 		sub edi, 4
  7760                              <2> 	altin:
  7761 00005FA9 81C702000000        <2> 		add edi, 2
  7762 00005FAF 803D[AF5E0000]01    <2> 		cmp byte [uppercase], 1
  7763 00005FB6 7306                <2> 		jae uppercaseon
  7764 00005FB8 81EF02000000        <2> 		sub edi, 2
  7765                              <2> 	uppercaseon:
  7766 00005FBE 668B07              <2> 		mov ax,[edi]
  7767 00005FC1 66A3[B9230000]      <2> 		mov [lastkey], ax
  7768 00005FC7 C3                  <2> 		ret
  7769                              <2> 		
  7770 00005FC8 00                  <2> keyboardstatus db 0
  7771 00005FC9 00                  <2> numlockstatus db 0
  7772 00005FCA 00                  <2> scrolllockstatus db 0
  7773 00005FCB 00                  <2> altkey db 0
  7774 00005FCC 00                  <2> ctrkey db 0
  7775                              <2> 	capslock:
  7776 00005FCD 8035[C85F0000]04    <2> 		xor byte [keyboardstatus], 00000100b
  7777 00005FD4 E835000000          <2> 		call updatekblights
  7778 00005FD9 E967FFFFFF          <2> 		jmp shift
  7779                              <2> 		
  7780                              <2> 	numlock:
  7781 00005FDE 8035[C85F0000]02    <2> 		xor byte [keyboardstatus], 00000010b
  7782 00005FE5 8035[C95F0000]01    <2> 		xor byte [numlockstatus], 1
  7783 00005FEC E81D000000          <2> 		call updatekblights
  7784 00005FF1 E975FEFFFF          <2> 		jmp getkey
  7785                              <2> 	
  7786                              <2> 	scrolllock:
  7787 00005FF6 8035[C85F0000]01    <2> 		xor byte [keyboardstatus], 00000001b
  7788 00005FFD 8035[CA5F0000]01    <2> 		xor byte [scrolllockstatus], 1
  7789 00006004 E805000000          <2> 		call updatekblights
  7790 00006009 E95DFEFFFF          <2> 		jmp getkey
  7791                              <2> 		
  7792                              <2> 	updatekblights:
  7793 0000600E B0ED                <2> 		mov al, 0xED
  7794 00006010 66BA6000            <2> 		mov dx, 0x60
  7795 00006014 EE                  <2> 		out dx, al
  7796                              <2> 	chkkbdack:
  7797 00006015 EC                  <2> 		in al, dx
  7798 00006016 3CFA                <2> 		cmp al, 0xFA
  7799 00006018 75FB                <2> 		jne chkkbdack
  7800 0000601A A0[C85F0000]        <2> 		mov al, [keyboardstatus]
  7801 0000601F EE                  <2> 		out dx, al
  7802 00006020 C3                  <2> 		ret
  7803                              <2> 		
  7804                              <2> scancode:
  7805                              <2> 	;key, KEY, alt key, ALT KEY, ctrl key, CTRL KEY, ctrl-alt, CTRL-ALT
  7806 00006021 000000000000000000- <2> 	dw 0,0,0,0,0,0,0,0
  7807 0000602A 00000000000000      <2>
  7808 00006031 000000000000000000- <2> 	dw 0,0,0,0,0,0,0,0
  7809 0000603A 00000000000000      <2>
  7810 00006041 31002100A1003C2000- <2> 	dw '1','!',0xA1,0x203C,0,0,0,0
  7811 0000604A 00000000000000      <2>
  7812 00006051 32004000B2001A2200- <2> 	dw '2','@',0xB2,0x221A,0,0,0,0
  7813 0000605A 00000000000000      <2>
  7814 00006061 33002300B3002B2200- <2> 	dw '3','#',0xB3,0x222B,0,0,0,0
  7815 0000606A 00000000000000      <2>
  7816 00006071 34002400A300A20000- <2> 	dw '4','$',0xA3,0xA2,0,0,0,0
  7817 0000607A 00000000000000      <2>
  7818 00006081 35002500AC20000000- <2> 	dw '5','%',0x20AC,0,0,0,0,0
  7819 0000608A 00000000000000      <2>
  7820 00006091 36005E00BC007F2000- <2> 	dw '6','^',0xBC,0x207F,0,0,0,0
  7821 0000609A 00000000000000      <2>
  7822 000060A1 37002600BD00000000- <2> 	dw '7','&',0xBD,0,0,0,0,0
  7823 000060AA 00000000000000      <2>
  7824 000060B1 38002A001E22950000- <2> 	dw '8','*',0x221E,0x95,0,0,0,0
  7825 000060BA 00000000000000      <2>
  7826 000060C1 39002800AE00990000- <2> 	dw '9','(',0xAE,0x99,0,0,0,0
  7827 000060CA 00000000000000      <2>
  7828 000060D1 30002900A900000000- <2> 	dw '0',')',0xA9,0,0,0,0,0
  7829 000060DA 00000000000000      <2>
  7830 000060E1 2D005F00A500B10000- <2> 	dw '-','_',0xA5,0xB1,0,0,0,0
  7831 000060EA 00000000000000      <2>
  7832 000060F1 3D002B00F700482200- <2> 	dw '=','+',0xF7,0x2248,0,0,0,0
  7833 000060FA 00000000000000      <2>
  7834 00006101 080008000000000000- <2> 	dw 8,8,0,0,0,0,0,0
  7835 0000610A 00000000000000      <2>
  7836 00006111 000000000000000000- <2> 	dw 0,0,0,0,0,0,0,0
  7837 0000611A 00000000000000      <2>
  7838 00006121 71005100E400C4003B- <2> 	dw 'q','Q',0xE4,0xC4,';',':',0x439,0x419
  7839 00006129 003A0039041904      <2>
  7840 00006131 77005700E500C500C2- <2> 	dw 'w','W',0xE5,0xC5,0x3C2,0,0x446,0x426
  7841 0000613A 03000046042604      <2>
  7842 00006141 65004500E900C900B5- <2> 	dw 'e','E',0xE9,0xC9,0x3B5,0x395,0x443,0x423
  7843 0000614A 03950343042304      <2>
  7844 00006151 72005200EB00E800C1- <2> 	dw 'r','R',0xEB,0xE8,0x3C1,0x3A1,0x43A,0x41A
  7845 0000615A 03A1033A041A04      <2>
  7846 00006161 74005400FC00DC00C4- <2> 	dw 't','T',0xFC,0xDC,0x3C4,0x3A4,0x435,0x415
  7847 0000616A 03A40335041504      <2>
  7848 00006171 79005900FF009F00C5- <2> 	dw 'y','Y',0xFF,0x9F,0x3C5,0x3A5,0x43D,0x41D
  7849 0000617A 03A5033D041D04      <2>
  7850 00006181 75005500FA00F900B8- <2> 	dw 'u','U',0xFA,0xF9,0x3B8,0x398,0x433,0x413
  7851 0000618A 03980333041304      <2>
  7852 00006191 69004900ED00EC00B9- <2> 	dw 'i','I',0xED,0xEC,0x3B9,0x399,0x448,0x428
  7853 0000619A 03990348042804      <2>
  7854 000061A1 6F004F00F300F200BF- <2> 	dw 'o','O',0xF3,0xF2,0x3BF,0x39F,0x449,0x429
  7855 000061AA 039F0349042904      <2>
  7856 000061B1 70005000F600D600C0- <2> 	dw 'p','P',0xF6,0xD6,0x3C0,0x3A0,0x437,0x417
  7857 000061BA 03A00337041704      <2>
  7858 000061C1 5B007B00AB00000000- <2> 	dw '[','{',0xAB,0,0,0,0x445,0x425
  7859 000061CA 00000045042504      <2>
  7860 000061D1 5D007D00BB00000000- <2> 	dw ']','}',0xBB,0,0,0,0x44A,0x42A
  7861 000061DA 0000004A042A04      <2>
  7862 000061E1 000000000000000000- <2> 	dw 0,0,0,0,0,0,0,0
  7863 000061EA 00000000000000      <2>
  7864 000061F1 000000000000000000- <2> 	dw 0,0,0,0,0,0,0,0
  7865 000061FA 00000000000000      <2>
  7866 00006201 61004100E100E000B1- <2> 	dw 'a','A',0xE1,0xE0,0x3B1,0x391,0x444,0x424
  7867 0000620A 03910344042404      <2>
  7868 00006211 73005300A7000000C3- <2> 	dw 's','S',0xA7,0,0x3C3,0x3A3,0x44B,0x42B
  7869 0000621A 03A3034B042B04      <2>
  7870 00006221 64004400B0000000B4- <2> 	dw 'd','D',0xB0,0,0x3B4,0x394,0x432,0x412
  7871 0000622A 03940332041204      <2>
  7872 00006231 6600460083004026C6- <2> 	dw 'f','F',0x83,0x2640,0x3C6,0x3A6,0x430,0x410
  7873 0000623A 03A60330041004      <2>
  7874 00006241 6700470000000000B3- <2> 	dw 'g','G',0,0,0x3B3,0x393,0x43F,0x41F
  7875 0000624A 0393033F041F04      <2>
  7876 00006251 6800480000000000B7- <2> 	dw 'h','H',0,0,0x3B7,0x397,0x440,0x420
  7877 0000625A 03970340042004      <2>
  7878 00006261 6A004A0000000000BE- <2> 	dw 'j','J',0,0,0x3BE,0x39E,0x43E,0x41E
  7879 0000626A 039E033E041E04      <2>
  7880 00006271 6B004B0000000000BA- <2> 	dw 'k','K',0,0,0x3BA,0x39A,0x43B,0x41B
  7881 0000627A 039A033B041B04      <2>
  7882 00006281 6C004C0000000000BB- <2> 	dw 'l','L',0,0,0x3BB,0x39B,0x434,0x414
  7883 0000628A 039B0334041404      <2>
  7884 00006291 3B003A00B6000E2200- <2> 	dw ';',':',0xB6,0x220E,0,0,0x436,0x416
  7885 0000629A 00000036041604      <2>
  7886 000062A1 270022000000000000- <2> 	dw "'",'"',0,0,0,0,0x44D,0x42D
  7887 000062AA 0000004D042D04      <2>
  7888 000062B1 60007E000000000000- <2> 	dw '`','~',0,0,0,0,0x451,0x401
  7889 000062BA 00000051040104      <2>
  7890 000062C1 000000000000000000- <2> 	dw 0,0,0,0,0,0,0,0
  7891 000062CA 00000000000000      <2>
  7892 000062D1 5C007C00AC00A60000- <2> 	dw "\",'|',0xAC,0xA6,0,0,"/","\"
  7893 000062DA 0000002F005C00      <2>
  7894 000062E1 7A005A00E600C600B6- <2> 	dw 'z','Z',0xE6,0xC6,0x3B6,0x396,0x44F,0x42F
  7895 000062EA 0396034F042F04      <2>
  7896 000062F1 7800580000000000C7- <2> 	dw 'x','X',0,0,0x3C7,0x3A7,0x447,0x427
  7897 000062FA 03A70347042704      <2>
  7898 00006301 63004300E700C700C8- <2> 	dw 'c','C',0xE7,0xC7,0x3C8,0x3A8,0x441,0x421
  7899 0000630A 03A80341042104      <2>
  7900 00006311 7600560000000000C9- <2> 	dw 'v','V',0,0,0x3C9,0x3A9,0x43C,0x41C
  7901 0000631A 03A9033C041C04      <2>
  7902 00006321 6200420000000000B2- <2> 	dw 'b','B',0,0,0x3B2,0x392,0x438,0x418
  7903 0000632A 03920338041804      <2>
  7904 00006331 6E004E00F100D100BD- <2> 	dw 'n','N',0xF1,0xD1,0x3BD,0x39D,0x442,0x422
  7905 0000633A 039D0342042204      <2>
  7906 00006341 6D004D006C264226BC- <2> 	dw 'm','M',0x266C,0x2642,0x3BC,0x39C,0x44C,0x42C
  7907 0000634A 039C034C042C04      <2>
  7908 00006351 2C003C006422000000- <2> 	dw ',','<',0x2264,0,0,0,0x431,0x411
  7909 0000635A 00000031041104      <2>
  7910 00006361 2E003E006522000000- <2> 	dw '.','>',0x2265,0,0,0,0x44E,0x42E
  7911 0000636A 0000004E042E04      <2>
  7912 00006371 2F003F00BF00000000- <2> 	dw '/','?',0xBF,0,0,0,'.',','
  7913 0000637A 0000002E002C00      <2>
  7914 00006381 000000000000000000- <2> 	dw 0,0,0,0,0,0,0,0
  7915 0000638A 00000000000000      <2>
  7916 00006391 000000000000000000- <2> 	dw 0,0,0,0,0,0,0,0
  7917 0000639A 00000000000000      <2>
  7918 000063A1 000000000000000000- <2> 	dw 0,0,0,0,0,0,0,0
  7919 000063AA 00000000000000      <2>
  7920 000063B1 200020000000000000- <2> 	dw ' ',' ',0,0,0,0,0,0
  7921 000063BA 00000000000000      <2>
  7922                              <2> noscan:
  7923                              <2> 
  7924                              <1> %endif
  7925                              <1> ;drivers will soon be handled intelligently
  7926                              <1> ;every driver's source will be scanned for a .init function
  7927                              <1> ;that will be called and if it returns 0
  7928                              <1> ;the hardware was found and the driver initialized properly
  7929                              <1> initializelater: ;these have debugging messages and should be initialized after the screen
  7930                              <1> 	%ifdef sound.included
  7931 000063C1 E83BF8FFFF          <1> 		call sblaster.init
  7932                              <1> 	%endif
  7933                              <1> 	%ifdef network.included
  7934                              <1> 		call network.init
  7935                              <1> 	%endif
  7936 000063C6 C3                  <1> 	ret
  7937                              <1> initialize:
  7938                              <1> ;Now I will initialise the interrupt controllers and remap irq's
  7939 000063C7 E839000000          <1> 	call .pic
  7940                              <1> %ifdef terminal.vsync
  7941                              <1> 	call .rtc
  7942                              <1> %endif
  7943 000063CC E896000000          <1> 	call .pit
  7944 000063D1 E8B8000000          <1> 	call .fpu
  7945 000063D6 E8C9000000          <1> 	call .sse
  7946 000063DB 31C0                <1> 	xor eax, eax
  7947 000063DD 31C9                <1> 	xor ecx, ecx
  7948                              <1> %ifdef io.serial
  7949                              <1> 	call serial.init
  7950                              <1> %endif
  7951 000063DF E801000000          <1> 	call .time
  7952 000063E4 C3                  <1> 	ret
  7953                              <1> 	
  7954                              <1> .time:
  7955 000063E5 E8EEDCFFFF          <1> 	call time
  7956 000063EA E896DEFFFF          <1> 	call timeconvert
  7957 000063EF 890D[58020000]      <1> 	mov [timeseconds], ecx
  7958 000063F5 31C9                <1> 	xor ecx, ecx
  7959 000063F7 890D[5C020000]      <1> 	mov [timenanoseconds], ecx
  7960 000063FD C605[20400000]01    <1> 	mov byte [istimeset], 1
  7961 00006404 C3                  <1> 	ret
  7962                              <1> 	
  7963                              <1> .pic:
  7964 00006405 B011                <1> 	mov al, 0x11
  7965 00006407 E620                <1> 	out 0x20, al
  7966 00006409 E6A0                <1> 	out 0xA0, al
  7967 0000640B B040                <1> 	mov al, 0x40	;interrupt for master
  7968 0000640D E621                <1> 	out 0x21, al
  7969 0000640F B048                <1> 	mov al, 0x48	;interrupt for slave
  7970 00006411 E6A1                <1> 	out 0xA1, al
  7971 00006413 B004                <1> 	mov al, 4
  7972 00006415 E621                <1> 	out 0x21, al
  7973 00006417 B002                <1> 	mov al, 2
  7974 00006419 E6A1                <1> 	out 0xA1, al
  7975 0000641B B001                <1> 	mov al, 0x1
  7976 0000641D E621                <1> 	out 0x21, al
  7977 0000641F B001                <1> 	mov al, 0x1
  7978 00006421 E6A1                <1> 	out 0xA1, al
  7979                              <1> 	;masks are set to zero so as not to mask
  7980 00006423 30C0                <1> 	xor al, al
  7981 00006425 E621                <1> 	out 0x21, al
  7982 00006427 30C0                <1> 	xor al, al
  7983 00006429 E6A1                <1> 	out 0xA1, al
  7984 0000642B B020                <1> 	mov al, 0x20
  7985 0000642D E6A0                <1> 	out 0xA0, al
  7986 0000642F E620                <1> 	out 0x20, al
  7987 00006431 C3                  <1> 	ret
  7988                              <1> .rtc:
  7989 00006432 B008                <1> 	mov al, 0x8
  7990 00006434 88C4                <1> 	mov ah, al
  7991 00006436 66BA7000            <1> 	mov dx, 0x70
  7992 0000643A EE                  <1> 	out dx, al
  7993 0000643B 6642                <1> 	inc dx
  7994 0000643D EC                  <1> 	in al, dx
  7995 0000643E 86C4                <1> 	xchg al, ah
  7996 00006440 664A                <1> 	dec dx
  7997 00006442 EE                  <1> 	out dx, al
  7998 00006443 6642                <1> 	inc dx
  7999 00006445 86C4                <1> 	xchg al, ah
  8000 00006447 0C40                <1> 	or al, 0x40
  8001 00006449 EE                  <1> 	out dx, al
  8002                              <1> 	
  8003 0000644A B00A                <1> 	mov al, 0xA
  8004 0000644C 664A                <1> 	dec dx
  8005 0000644E EE                  <1> 	out dx, al
  8006 0000644F 86C4                <1> 	xchg al, ah
  8007 00006451 6642                <1> 	inc dx
  8008 00006453 EC                  <1> 	in al, dx
  8009 00006454 24F0                <1> 	and al, 0xF0
  8010 00006456 0A05[13030000]      <1> 	or al, [rtcrate]
  8011 0000645C 86C4                <1> 	xchg al, ah
  8012 0000645E 664A                <1> 	dec dx
  8013 00006460 EE                  <1> 	out dx, al
  8014 00006461 6642                <1> 	inc dx
  8015 00006463 86C4                <1> 	xchg al, ah
  8016 00006465 EE                  <1> 	out dx, al
  8017 00006466 C3                  <1> 	ret
  8018                              <1> 	
  8019                              <1> .pit:
  8020                              <1> 	;initialize the PIT
  8021 00006467 66A1[52020000]      <1> 	mov ax, [pitdiv] ;this is the divider for the PIT
  8022 0000646D E640                <1> 	out 0x40, al
  8023 0000646F 66C1C008            <1> 	rol ax, 8
  8024 00006473 E640                <1> 	out 0x40, al
  8025                              <1> 	;enable rtc interrupt
  8026 00006475 B00B                <1> 	mov al, 0xB
  8027 00006477 E670                <1> 	out 0x70, al
  8028 00006479 66C1C008            <1> 	rol ax, 8
  8029 0000647D E471                <1> 	in al, 0x71
  8030 0000647F 66C1C008            <1> 	rol ax, 8
  8031 00006483 E670                <1> 	out 0x70, al
  8032 00006485 66C1C008            <1> 	rol ax, 8
  8033 00006489 0C40                <1> 	or al, 0x40
  8034 0000648B E671                <1> 	out 0x71, al
  8035 0000648D C3                  <1> 	ret
  8036                              <1> .fpu:
  8037                              <1> 	;And now to initialize the fpu
  8038 0000648E 0F20E0              <1> 	mov eax, cr4
  8039 00006491 0D00020000          <1> 	or eax, 0x200
  8040 00006496 0F22E0              <1> 	mov cr4, eax
  8041 00006499 B87F0B0000          <1> 	mov eax, 0xB7F
  8042 0000649E 50                  <1> 	push eax
  8043 0000649F D92C24              <1> 	fldcw [esp]
  8044 000064A2 58                  <1> 	pop eax
  8045 000064A3 C3                  <1> 	ret
  8046                              <1> 	
  8047                              <1> .sse:
  8048 000064A4 0F20C0              <1> 	mov eax, cr0
  8049 000064A7 24FB                <1> 	and al, 11111011b
  8050 000064A9 0C02                <1> 	or al, 00000010b
  8051 000064AB 0F22C0              <1> 	mov cr0, eax
  8052 000064AE 0F20E0              <1> 	mov eax, cr4
  8053 000064B1 660D0006            <1> 	or ax, 0000011000000000b
  8054 000064B5 0F22E0              <1> 	mov cr4, eax
  8055 000064B8 C3                  <1> 	ret
  8056                                      %include "source/pci.asm"
  8057 000064B9 00                  <1> pcibus		db 0
  8058 000064BA 00                  <1> pcidevice	db 0
  8059 000064BB 00                  <1> pcifunction	db 0
  8060 000064BC 00                  <1> pciregister	db 0
  8061 000064BD 00                  <1> pcireqtype	db 0
  8062 000064BE 00000000            <1> pcidevid	dd 0
  8063 000064C2 FFFFFFFF            <1> pcidevidmask dd 0xFFFFFFFF
  8064                              <1> getpcimem:
  8065 000064C6 B002                <1> 	mov al, 2
  8066 000064C8 A2[BD640000]        <1> 	mov [pcireqtype], al
  8067 000064CD E922000000          <1> 	jmp searchpci
  8068                              <1> getpciport:
  8069 000064D2 B001                <1> 	mov al, 1
  8070 000064D4 A2[BD640000]        <1> 	mov [pcireqtype], al
  8071 000064D9 E916000000          <1> 	jmp searchpci
  8072                              <1> pcidump:
  8073 000064DE 31C0                <1> 	xor eax, eax
  8074 000064E0 A2[BB640000]        <1> 	mov [pcifunction], al
  8075 000064E5 A2[B9640000]        <1> 	mov [pcibus], al
  8076 000064EA A2[BA640000]        <1> 	mov [pcidevice], al
  8077 000064EF A2[BD640000]        <1> 	mov [pcireqtype], al
  8078                              <1> searchpci:		;;return in ebx, start X in pciX
  8079 000064F4 30C0                <1> 	xor al, al
  8080 000064F6 A2[BC640000]        <1> 	mov [pciregister], al
  8081 000064FB E823020000          <1> 	call getpciaddr
  8082 00006500 BAF80C0000          <1> 	mov edx, 0xCF8
  8083 00006505 EF                  <1> 	out dx, eax	;;request pci config
  8084 00006506 BAFC0C0000          <1> 	mov edx, 0xCFC
  8085 0000650B ED                  <1> 	in eax, dx 	;;read in pci config
  8086 0000650C 3D0000FFFF          <1> 	cmp eax, 0xFFFF0000
  8087 00006511 0F823D000000        <1> 	jb near checkpcidevice
  8088                              <1> searchpciret:
  8089                              <1> nextpcidevice:
  8090 00006517 30C0                <1> 	xor al, al
  8091 00006519 A2[BB640000]        <1> 	mov [pcifunction], al
  8092 0000651E A0[BA640000]        <1> 	mov al, [pcidevice]
  8093 00006523 3C1F                <1> 	cmp al, 11111b
  8094 00006525 0F8306010000        <1> 	jae near nextpcibus
  8095 0000652B FEC0                <1> 	inc al
  8096 0000652D A2[BA640000]        <1> 	mov [pcidevice], al
  8097 00006532 E9BDFFFFFF          <1> 	jmp searchpci
  8098 00006537 A0[BB640000]        <1> 	mov al, [pcifunction]
  8099 0000653C 3C07                <1> 	cmp al, 111b
  8100 0000653E 0F83D3FFFFFF        <1> 	jae near nextpcidevice
  8101 00006544 FEC0                <1> 	inc al
  8102 00006546 A2[BB640000]        <1> 	mov [pcifunction], al
  8103 0000654B E9A4FFFFFF          <1> 	jmp searchpci
  8104 00006550 00000000            <1> pcitype: db 0,0,0,0
  8105                              <1> checkpcidevice:
  8106 00006554 31C0                <1> 	xor eax, eax
  8107 00006556 3905[BE640000]      <1> 	cmp [pcidevid], eax
  8108 0000655C 0F8430000000        <1> 	je near .good
  8109 00006562 A2[BC640000]        <1> 	mov [pciregister], al	;device id, vendor id
  8110 00006567 E8B7010000          <1> 	call getpciaddr
  8111 0000656C BAF80C0000          <1> 	mov edx, 0xCF8
  8112 00006571 EF                  <1> 	out dx, eax
  8113 00006572 BAFC0C0000          <1> 	mov edx, 0xCFC
  8114 00006577 ED                  <1> 	in eax, dx
  8115 00006578 2305[C2640000]      <1> 	and eax, [pcidevidmask]
  8116 0000657E 8B1D[BE640000]      <1> 	mov ebx, [pcidevid]
  8117 00006584 231D[C2640000]      <1> 	and ebx, [pcidevidmask]
  8118 0000658A 39D8                <1> 	cmp eax, ebx
  8119 0000658C 0F8585FFFFFF        <1> 	jne near searchpciret
  8120                              <1> .good:
  8121 00006592 30C0                <1> 	xor al, al
  8122 00006594 3805[BD640000]      <1> 	cmp [pcireqtype], al
  8123 0000659A 0F842C000000        <1> 	je near dumppcidevice
  8124 000065A0 B008                <1> 	mov al, 0x08
  8125 000065A2 A2[BC640000]        <1> 	mov [pciregister], al	;;class code, subclass, revision id
  8126 000065A7 E877010000          <1> 	call getpciaddr
  8127 000065AC BAF80C0000          <1> 	mov edx, 0xCF8
  8128 000065B1 EF                  <1> 	out dx, eax
  8129 000065B2 BAFC0C0000          <1> 	mov edx, 0xCFC
  8130 000065B7 ED                  <1> 	in eax, dx
  8131 000065B8 C1C008              <1> 	rol eax, 8
  8132 000065BB 3A05[50650000]      <1> 	cmp al, [pcitype]
  8133 000065C1 0F84A0000000        <1> 	je near foundpciaddr
  8134 000065C7 E94BFFFFFF          <1> 	jmp searchpciret
  8135                              <1> dumppcidevice:
  8136 000065CC 30C0                <1> 	xor al, al
  8137 000065CE A2[BC640000]        <1> 	mov [pciregister], al
  8138 000065D3 E84B010000          <1> 	call getpciaddr
  8139 000065D8 89C1                <1> 	mov ecx, eax
  8140 000065DA C605[25320000]05    <1> 	mov byte [firsthexshown], 5
  8141 000065E1 E854CCFFFF          <1> 	call showhex
  8142                              <1> dumppcidevicelp:
  8143 000065E6 A2[BC640000]        <1> 	mov [pciregister], al
  8144 000065EB E833010000          <1> 	call getpciaddr
  8145 000065F0 BAF80C0000          <1> 	mov edx, 0xCF8
  8146 000065F5 EF                  <1> 	out dx, eax
  8147 000065F6 BAFC0C0000          <1> 	mov edx, 0xCFC
  8148 000065FB ED                  <1> 	in eax, dx
  8149 000065FC 89C1                <1> 	mov ecx, eax
  8150 000065FE A0[BC640000]        <1> 	mov al, [pciregister]
  8151 00006603 0404                <1> 	add al, 4
  8152 00006605 C605[25320000]05    <1> 	mov byte [firsthexshown], 5
  8153 0000660C E829CCFFFF          <1> 	call showhex
  8154 00006611 3C3C                <1> 	cmp al, 0x3C
  8155 00006613 72D1                <1> 	jb dumppcidevicelp
  8156                              <1> dumppcidn:
  8157                              <1> %ifdef io.serial
  8158                              <1> 	mov esi, line
  8159                              <1> 	call print
  8160                              <1> %else
  8161 00006615 803D[E9250000]00    <1> 	cmp byte [charpos], 0
  8162 0000661C 0F84F5FEFFFF        <1> 	je near searchpciret
  8163 00006622 BE[A9870000]        <1> 	mov esi, line
  8164 00006627 E814B7FFFF          <1> 	call print
  8165                              <1> %endif
  8166 0000662C E9E6FEFFFF          <1> 	jmp searchpciret
  8167                              <1> nextpcibus:
  8168 00006631 30C0                <1> 	xor al, al
  8169 00006633 A2[BA640000]        <1> 	mov [pcidevice], al
  8170 00006638 A0[B9640000]        <1> 	mov al, [pcibus]
  8171 0000663D 3C7F                <1> 	cmp al, 1111111b
  8172 0000663F 730C                <1> 	jae donesearchpci
  8173 00006641 FEC0                <1> 	inc al
  8174 00006643 A2[B9640000]        <1> 	mov [pcibus], al
  8175 00006648 E9A7FEFFFF          <1> 	jmp searchpci
  8176                              <1> donesearchpci:
  8177 0000664D BBFFFFFFFF          <1> 	mov ebx, 0xFFFFFFFF
  8178 00006652 31D2                <1> 	xor edx, edx
  8179 00006654 8815[50650000]      <1> 	mov [pcitype], dl
  8180 0000665A 8915[BE640000]      <1> 	mov [pcidevid], edx
  8181 00006660 891D[C2640000]      <1> 	mov [pcidevidmask], ebx
  8182 00006666 C3                  <1> 	ret
  8183                              <1> foundpciaddr:
  8184 00006667 B010                <1> 	mov al, 0x10
  8185 00006669 A2[BC640000]        <1> 	mov [pciregister], al
  8186 0000666E 803D[BD640000]02    <1> 	cmp byte [pcireqtype], 2
  8187 00006675 7443                <1> 	je findpcimemaddr
  8188                              <1> findpciioaddr:
  8189 00006677 E8A7000000          <1> 	call getpciaddr
  8190 0000667C BAF80C0000          <1> 	mov edx, 0xCF8
  8191 00006681 EF                  <1> 	out dx, eax
  8192 00006682 BAFC0C0000          <1> 	mov edx, 0xCFC
  8193 00006687 ED                  <1> 	in eax, dx
  8194 00006688 89C3                <1> 	mov ebx, eax
  8195 0000668A 81E301000000        <1> 	and ebx, 1
  8196 00006690 81FB00000000        <1> 	cmp ebx, 0
  8197 00006696 0F846E000000        <1> 	je near notpciioaddr
  8198 0000669C 2D01000000          <1> 	sub eax, 1
  8199 000066A1 89C2                <1> 	mov edx, eax
  8200 000066A3 31DB                <1> 	xor ebx, ebx
  8201 000066A5 4B                  <1> 	dec ebx
  8202 000066A6 891D[C2640000]      <1> 	mov [pcidevidmask], ebx
  8203 000066AC 43                  <1> 	inc ebx
  8204 000066AD 881D[50650000]      <1> 	mov [pcitype], bl
  8205 000066B3 891D[BE640000]      <1> 	mov [pcidevid], ebx
  8206 000066B9 C3                  <1> 	ret
  8207                              <1> findpcimemaddr:
  8208 000066BA E864000000          <1> 	call getpciaddr
  8209 000066BF BAF80C0000          <1> 	mov edx, 0xCF8
  8210 000066C4 EF                  <1> 	out dx, eax
  8211 000066C5 BAFC0C0000          <1> 	mov edx, 0xCFC
  8212 000066CA ED                  <1> 	in eax, dx
  8213 000066CB 89C3                <1> 	mov ebx, eax
  8214 000066CD 81E301000000        <1> 	and ebx, 1
  8215 000066D3 81FB01000000        <1> 	cmp ebx, 1
  8216 000066D9 0F842B000000        <1> 	je near notpciioaddr
  8217 000066DF C1E804              <1> 	shr eax, 4
  8218 000066E2 C1E004              <1> 	shl eax, 4	;remove prefetch and type
  8219 000066E5 89C2                <1> 	mov edx, eax
  8220 000066E7 50                  <1> 	push eax
  8221 000066E8 A1[39020000]        <1> 	mov eax, [basecache]
  8222 000066ED C1E004              <1> 	shl eax, 4
  8223 000066F0 29C2                <1> 	sub edx, eax
  8224 000066F2 58                  <1> 	pop eax
  8225 000066F3 31DB                <1> 	xor ebx, ebx
  8226 000066F5 4B                  <1> 	dec ebx
  8227 000066F6 891D[C2640000]      <1> 	mov [pcidevidmask], ebx
  8228 000066FC 43                  <1> 	inc ebx
  8229 000066FD 881D[50650000]      <1> 	mov [pcitype], bl
  8230 00006703 891D[BE640000]      <1> 	mov [pcidevid], ebx
  8231 00006709 C3                  <1> 	ret
  8232                              <1> notpciioaddr:
  8233 0000670A A0[BC640000]        <1> 	mov al, [pciregister]
  8234 0000670F 0404                <1> 	add al, 4
  8235 00006711 3C28                <1> 	cmp al, 0x28
  8236 00006713 0F87FEFDFFFF        <1> 	ja near searchpciret
  8237 00006719 A2[BC640000]        <1> 	mov [pciregister], al
  8238 0000671E E954FFFFFF          <1> 	jmp findpciioaddr
  8239                              <1> getpciaddr:		;;puts it in eax and ebx
  8240 00006723 31C0                <1> 			xor eax, eax
  8241 00006725 BB00000080          <1> 			mov ebx, 0x80000000
  8242 0000672A A0[B9640000]        <1> 			mov al, [pcibus]
  8243 0000672F C1E010              <1> 			shl eax, 16
  8244 00006732 01C3                <1> 			add ebx, eax
  8245 00006734 31C0                <1> 			xor eax, eax
  8246 00006736 A0[BA640000]        <1> 			mov al, [pcidevice]
  8247 0000673B C1E00B              <1> 			shl eax, 11
  8248 0000673E 01C3                <1> 			add ebx, eax
  8249 00006740 31C0                <1> 			xor eax, eax
  8250 00006742 A0[BB640000]        <1> 			mov al, [pcifunction]
  8251 00006747 C1E008              <1> 			shl eax, 8
  8252 0000674A 01C3                <1> 			add ebx, eax
  8253 0000674C 31C0                <1> 			xor eax, eax
  8254 0000674E A0[BC640000]        <1> 			mov al, [pciregister]
  8255 00006753 01C3                <1> 			add ebx, eax
  8256 00006755 89D8                <1> 			mov eax, ebx
  8257 00006757 C3                  <1> 			ret
  8258                                      %include "source/disk.asm"
  8259                              <1> %ifdef disk.real
  8260                              <1> 	%include "source/drivers/disk/realmode.asm"
  8261                              <2> diskr:
  8262                              <2> 			;sector count in cl
  8263                              <2> 			;disk number in ch
  8264                              <2> 			;48 bit address with last 32 bits in ebx
  8265                              <2> 			;buffer in esi
  8266                              <2> 			;puts end of buffer in edi and end lba address in edx
  8267 00006758 880D[85670000]      <2> 	mov [sdlength], cl
  8268 0000675E 891D[86670000]      <2> 	mov [sdaddress], ebx
  8269 00006764 8935[07690000]      <2> 	mov [oldesireal], esi
  8270 0000676A 66BE[8A67]          <2> 	mov si, readdiskreal
  8271 0000676E 668935[E30C0000]    <2> 	mov [realmodeptr], si
  8272 00006775 BE[C6670000]        <2> 	mov esi, backfromrealread
  8273 0000677A 8935[DF0C0000]      <2> 	mov [realmodereturn], esi
  8274 00006780 E943A4FFFF          <2> 	jmp realmode
  8275 00006785 00                  <2> sdlength db 0
  8276 00006786 00000000            <2> sdaddress dd 0
  8277                              <2> 
  8278                              <2> [BITS 16]
  8279                              <2> readdiskreal:
  8280 0000678A C706[B667]1000      <2> 	mov word [dlen], 0x10
  8281 00006790 C706[BA67]0000      <2> 	mov word [daddress], 0
  8282 00006796 C706[BC67]0001      <2> 	mov word [dsegm], 0x100
  8283 0000679C 66891E[BE67]        <2> 	mov [dlbaad], ebx
  8284 000067A1 880E[B867]          <2> 	mov [dreadlen], cl
  8285                              <2> ReadHardDisk:
  8286 000067A5 BE[B667]            <2> 	mov si, diskaddresspacket
  8287 000067A8 31C0                <2> 	xor ax, ax
  8288 000067AA B442                <2> 	mov ah, 0x42
  8289 000067AC 8A16[B567]          <2> 	mov dl, [dnumber]
  8290 000067B0 CD13                <2> 	int 0x13
  8291 000067B2 72F1                <2> 	jc ReadHardDisk
  8292 000067B4 C3                  <2> 	ret
  8293                              <2> 
  8294 000067B5 80                  <2> dnumber db 0x80
  8295                              <2> diskaddresspacket:
  8296 000067B6 10                  <2> dlen:	db 0x10 ;size of packet
  8297 000067B7 00                  <2> 		db 0
  8298 000067B8 7F00                <2> dreadlen:	dw 0x7F	;blocks to read=maximum
  8299 000067BA 0000                <2> daddress:	dw 0	;address 0
  8300 000067BC 0001                <2> dsegm:		dw 0x100	;segment
  8301                              <2> 		;start with known value for hd
  8302                              <2> dlbaad:
  8303 000067BE 00000000            <2> 	dd 0	;lba address
  8304 000067C2 00000000            <2> 	dd 0
  8305                              <2> [BITS 32]
  8306                              <2> backfromrealread:
  8307 000067C6 8B35[07690000]      <2> 	mov esi, [oldesireal]
  8308 000067CC 8B1D[86670000]      <2> 	mov ebx, [sdaddress]
  8309 000067D2 31C9                <2> 	xor ecx, ecx
  8310 000067D4 8A0D[85670000]      <2> 	mov cl, [sdlength]
  8311 000067DA 01CB                <2> 	add ebx, ecx
  8312 000067DC 66B80800            <2> 	mov ax, LINEAR_SEL
  8313 000067E0 8EE0                <2> 	mov fs, ax
  8314 000067E2 BF00100000          <2> 	mov edi, 0x1000
  8315 000067E7 B200                <2> 	mov dl, 0
  8316 000067E9 D0E1                <2> 	shl cl, 1
  8317                              <2> copyfromrmodedisk:
  8318 000067EB 648A07              <2> 	mov al, [fs:edi]
  8319 000067EE 8806                <2> 	mov [esi], al
  8320 000067F0 47                  <2> 	inc edi
  8321 000067F1 46                  <2> 	inc esi
  8322 000067F2 FECA                <2> 	dec dl
  8323 000067F4 80FA00              <2> 	cmp dl, 0
  8324 000067F7 75F2                <2> 	jne copyfromrmodedisk
  8325 000067F9 FEC9                <2> 	dec cl
  8326 000067FB B200                <2> 	mov dl, 0
  8327 000067FD 80F900              <2> 	cmp cl, 0
  8328 00006800 75E9                <2> 	jne copyfromrmodedisk
  8329 00006802 66B83000            <2> 	mov ax, NEW_DATA_SEL
  8330 00006806 8EE0                <2> 	mov fs, ax
  8331 00006808 89F7                <2> 	mov edi, esi
  8332 0000680A 8B35[07690000]      <2> 	mov esi, [oldesireal]
  8333 00006810 89DA                <2> 	mov edx, ebx
  8334 00006812 8B1D[86670000]      <2> 	mov ebx, [sdaddress]
  8335 00006818 C3                  <2> 	ret
  8336                              <2> 	
  8337                              <1> %else
  8338                              <1> 	%ifdef disk.protected
  8339                              <1> 		%include "source/drivers/disk/pata.asm"
  8340                              <1> 	%endif
  8341                              <1> %endif
  8342                              <1> %ifdef disk.none
  8343                              <1> loadfile:	xor edx, edx
  8344                              <1> 			cmp byte [edi], '&'
  8345                              <1> 			je .ret
  8346                              <1> 			mov edx, 404	;no files are found except &
  8347                              <1> 		.ret:
  8348                              <1> 			ret
  8349                              <1> %else
  8350                              <1> ;This loads files using the methods in the loaded driver
  8351                              <1> loadfile:	;loads a file with the name buffer's location in edi into location in esi
  8352                              <1> 			;returns with err code in edx and file end in edi
  8353 00006819 803F00              <1> 	cmp byte [edi], 0
  8354 0000681C 0F8448000000        <1> 	je near nofileload
  8355 00006822 89FA                <1> 	mov edx, edi
  8356 00006824 BB[188A0300]        <1> 	mov ebx, diskfileindex
  8357                              <1> nextnamechar:
  8358 00006829 8A07                <1> 	mov al, [edi]
  8359 0000682B 3C26                <1> 	cmp al, '&'
  8360 0000682D 7440                <1> 	je nullfile
  8361 0000682F 8A23                <1> 	mov ah, [ebx]
  8362 00006831 47                  <1> 	inc edi
  8363 00006832 43                  <1> 	inc ebx
  8364 00006833 88C1                <1> 	mov cl, al
  8365 00006835 08E1                <1> 	or cl, ah
  8366 00006837 80F900              <1> 	cmp cl, 0
  8367 0000683A 746E                <1> 	je equalfilenames
  8368 0000683C 80F920              <1> 	cmp cl, ' '
  8369 0000683F 7469                <1> 	je equalfilenames
  8370 00006841 3C2A                <1> 	cmp al, '*'
  8371 00006843 742B                <1> 	je asteriskcheck
  8372 00006845 80FC00              <1> 	cmp ah, 0
  8373 00006848 7410                <1> 	je nextfilename
  8374 0000684A 3C00                <1> 	cmp al, 0
  8375 0000684C 7404                <1> 	je getebxzero
  8376 0000684E 38E0                <1> 	cmp al, ah
  8377 00006850 74D7                <1> 	je nextnamechar
  8378                              <1> getebxzero:
  8379 00006852 8A23                <1> 	mov ah, [ebx]
  8380 00006854 43                  <1> 	inc ebx
  8381 00006855 80FC00              <1> 	cmp ah, 0
  8382 00006858 75F8                <1> 	jne getebxzero
  8383                              <1> nextfilename:
  8384 0000685A 81C308000000        <1> 	add ebx, 8		;next descriptor
  8385 00006860 89D7                <1> 	mov edi, edx
  8386 00006862 81FB[D98A0300]      <1> 	cmp ebx, enddiskfileindex
  8387 00006868 72BF                <1> 	jb nextnamechar
  8388                              <1> nofileload:
  8389 0000686A BA94010000          <1> 	mov edx, 404	;indicate not found error
  8390                              <1> nullfile:
  8391 0000686F C3                  <1> 	ret
  8392                              <1> asteriskcheck:
  8393 00006870 4B                  <1> 	dec ebx
  8394 00006871 8A07                <1> 	mov al, [edi]
  8395 00006873 3C2A                <1> 	cmp al, '*'
  8396 00006875 74F9                <1> 	je asteriskcheck ;remove multiple asterisks
  8397 00006877 3C20                <1> 	cmp al, ' '
  8398 00006879 7415                <1> 	je equalfilenames2
  8399 0000687B 3C00                <1> 	cmp al, 0
  8400 0000687D 7411                <1> 	je equalfilenames2
  8401                              <1> .lp:
  8402 0000687F 8A23                <1> 	mov ah, [ebx]
  8403 00006881 80FC00              <1> 	cmp ah, 0
  8404 00006884 74D4                <1> 	je nextfilename
  8405 00006886 38E0                <1> 	cmp al, ah
  8406 00006888 749F                <1> 	je nextnamechar
  8407 0000688A 43                  <1> 	inc ebx
  8408 0000688B E9EFFFFFFF          <1> 	jmp .lp
  8409                              <1> equalfilenames2:
  8410 00006890 81EB02000000        <1> 	sub ebx, 2
  8411                              <1> eqfilefind:
  8412 00006896 43                  <1> 	inc ebx
  8413 00006897 81FB[D98A0300]      <1> 	cmp ebx, enddiskfileindex
  8414 0000689D 0F83C7FFFFFF        <1> 	jae near nofileload
  8415 000068A3 8A03                <1> 	mov al, [ebx]
  8416 000068A5 3C00                <1> 	cmp al, 0
  8417 000068A7 75ED                <1> 	jne eqfilefind
  8418 000068A9 43                  <1> 	inc ebx
  8419                              <1> equalfilenames:
  8420 000068AA 8B4304              <1> 	mov eax, [ebx + 4] 	;put file size in eax
  8421 000068AD 8B1B                <1> 	mov ebx, [ebx]		;put file beginning in ebx
  8422 000068AF 031D[D0870000]      <1> 	add ebx, [lbaad]	;add offset to solleros start
  8423 000068B5 31C9                <1> 	xor ecx, ecx
  8424 000068B7 88C1                <1> 	mov cl, al			;get excess number of sectors
  8425 000068B9 C0E102              <1> 	shl cl, 2
  8426 000068BC C0E902              <1> 	shr cl, 2			;cut off at 64
  8427 000068BF 29C8                <1> 	sub eax, ecx		;get rid of excess sectors
  8428 000068C1 B500                <1> 	mov ch, 0			;drive 0
  8429 000068C3 C1E806              <1> 	shr eax, 6			;get number of 64 sector tracks
  8430                              <1> loaddiskfile:			;tracks in eax, excess sectors in cl, drive in ch, buffer in esi, address in ebx
  8431 000068C6 A3[0B690000]        <1> 	mov [filetracks], eax
  8432 000068CB 89F7                <1> 	mov edi, esi		;just in case cl is 0
  8433 000068CD 89DA                <1> 	mov edx, ebx
  8434 000068CF 80F900              <1> 	cmp cl, 0
  8435 000068D2 7405                <1> 	je copytracksforfile
  8436 000068D4 E87FFEFFFF          <1> 	call diskr	;take care of excess sectors
  8437                              <1> copytracksforfile:
  8438 000068D9 A1[0B690000]        <1> 	mov eax, [filetracks]
  8439 000068DE 3D00000000          <1> 	cmp eax, 0
  8440 000068E3 741C                <1> 	je donecopyfile
  8441 000068E5 48                  <1> 	dec eax
  8442 000068E6 A3[0B690000]        <1> 	mov [filetracks], eax
  8443 000068EB 89D3                <1> 	mov ebx, edx	;get end lba
  8444 000068ED B140                <1> 	mov cl, 0x40 ;for compatability with BIOS it uses 64 instead of 128
  8445 000068EF 8A2D[CF870000]      <1> 	mov ch, [DriveNumber]
  8446 000068F5 89FE                <1> 	mov esi, edi	;reset buffer
  8447 000068F7 E85CFEFFFF          <1> 	call diskr
  8448 000068FC E9D8FFFFFF          <1> 	jmp copytracksforfile
  8449                              <1> donecopyfile:
  8450 00006901 BA00000000          <1> 	mov edx, 0	;no error
  8451 00006906 C3                  <1> 	ret
  8452                              <1> 
  8453 00006907 00000000            <1> oldesireal dd 0
  8454 0000690B 00000000            <1> filetracks dd 0
  8455 0000690F 00                  <1> lbad1 db 0
  8456 00006910 00                  <1> lbad2 db 0
  8457 00006911 00                  <1> lbad3 db 0
  8458 00006912 00                  <1> lbad4 db 0
  8459 00006913 00                  <1> lbad5 db 0
  8460 00006914 00                  <1> lbad6 db 0
  8461 00006915 6400                <1> segments dw 100
  8462                              <1> %endif
  8463                                      %include "source/threads.asm"
  8464                              <1> %ifdef threads.included	
  8465                              <1> nwcmdst:
  8466 00006917 31C0                <1> 	xor eax, eax
  8467 00006919 BC[7C9A0300]        <1> 	mov esp, stackend
  8468 0000691E A2[DE690000]        <1> 	mov [threadson], al
  8469 00006923 A3[DF690000]        <1> 	mov [currentthread], eax
  8470 00006928 0504000000          <1> 	add eax, 4
  8471 0000692D A3[DA690000]        <1> 	mov [lastthread], eax
  8472 00006932 FB                  <1> 	sti
  8473 00006933 E9EFC3FFFF          <1> 	jmp nwcmd
  8474                              <1> 
  8475                              <1> nomorethreadspace:
  8476 00006938 BE[4E690000]        <1> 	mov esi, nmts
  8477 0000693D E8FEB3FFFF          <1> 	call print
  8478 00006942 C605[DE690000]00    <1> 	mov byte [threadson], 0
  8479 00006949 E9D9C3FFFF          <1> 	jmp nwcmd
  8480 0000694E 546872656164204F76- <1> nmts	db "Thread Overflow",10,0
  8481 00006957 6572666C6F770A00    <1>
  8482                              <1> 
  8483                              <1> nomorestackspace:
  8484 0000695F BE[6E690000]        <1> 	mov esi, nmss
  8485 00006964 E8D7B3FFFF          <1> 	call print
  8486 00006969 E9A9FFFFFF          <1> 	jmp nwcmdst
  8487 0000696E 537461636B204F7665- <1> nmss	db "Stack Overflow",10,0
  8488 00006977 72666C6F770A00      <1>
  8489                              <1> 	
  8490                              <1> threadswitch:
  8491 0000697E FA                  <1> 	cli
  8492 0000697F 60                  <1> 	pushad
  8493 00006980 BF[16770500]        <1> 	mov edi, threadlist
  8494 00006985 A1[DF690000]        <1> 	mov eax, [currentthread]
  8495 0000698A 40                  <1> 	inc eax
  8496 0000698B A3[DF690000]        <1> 	mov [currentthread], eax
  8497 00006990 6648                <1> 	dec ax
  8498 00006992 C1E002              <1> 	shl eax, 2
  8499 00006995 01C7                <1> 	add edi, eax
  8500 00006997 8927                <1> 	mov [edi], esp
  8501 00006999 81C704000000        <1> 	add edi, 4
  8502 0000699F 81FF[16870500]      <1> 	cmp edi, threadlistend
  8503 000069A5 0F830D000000        <1> 	jae near nookespthread
  8504 000069AB 8B07                <1> 	mov eax, [edi]
  8505 000069AD 3D00000000          <1> 	cmp eax, 0
  8506 000069B2 0F8519000000        <1> 	jne near okespthread
  8507                              <1> nookespthread:
  8508 000069B8 BF[16770500]        <1> 	mov edi, threadlist
  8509 000069BD 31C0                <1> 	xor eax, eax
  8510 000069BF A3[DF690000]        <1> 	mov [currentthread], eax
  8511 000069C4 8B07                <1> 	mov eax, [edi]
  8512 000069C6 3D00000000          <1> 	cmp eax, 0
  8513 000069CB 0F8446FFFFFF        <1> 	je near nwcmdst
  8514                              <1> okespthread:
  8515 000069D1 89C4                <1> 	mov esp, eax
  8516 000069D3 B020                <1> 	mov al, 0x20
  8517 000069D5 E620                <1> 	out 0x20, al
  8518 000069D7 61                  <1> 	popad
  8519 000069D8 FB                  <1> 	sti
  8520 000069D9 CF                  <1> 	iret
  8521                              <1> 
  8522                              <1> %endif
  8523 000069DA 04000000            <1> 	lastthread dd 4
  8524 000069DE 00                  <1> 	threadson db 0
  8525 000069DF 00000000            <1> 	currentthread dd 0
  8526                                  %ifdef gui.included
  8527                                      %include "source/gui/gui.asm"
  8528                              <1> guiboot:	;Let's see what I can do, I am going to try to make this as freestanding as possible
  8529 000069E3 31C0                <1> 	xor eax, eax
  8530 000069E5 31DB                <1> 	xor ebx, ebx
  8531 000069E7 31C9                <1> 	xor ecx, ecx
  8532 000069E9 31D2                <1> 	xor edx, edx
  8533 000069EB E886080000          <1> 	call guisetup
  8534                              <1> guiloop:
  8535 000069F0 E855EEFFFF          <1> 	call cursorgui
  8536                              <1> guistart:
  8537 000069F5 E871F4FFFF          <1> 	call getkey
  8538 000069FA C605[037F0000]00    <1> 	mov byte [copygui], 0
  8539 00006A01 E9EFFFFFFF          <1> 	jmp guistart
  8540                              <1> 
  8541                              <1> %include "source/gui/bmp.asm"
  8542                              <2> showbmp:
  8543 00006A06 668B06              <2> 	mov ax, [esi]
  8544 00006A09 663D424D            <2> 	cmp ax, "BM"
  8545 00006A0D 0F85BB000000        <2> 	jne near endedbmp
  8546 00006A13 8B3D[6D570000]      <2> 	mov edi, [physbaseptr]
  8547 00006A19 6689D0              <2> 	mov ax, dx
  8548 00006A1C 6689CB              <2> 	mov bx, cx
  8549 00006A1F 31C9                <2> 	xor ecx, ecx
  8550 00006A21 31D2                <2> 	xor edx, edx
  8551 00006A23 6689D9              <2> 	mov cx, bx
  8552 00006A26 6689C2              <2> 	mov dx, ax
  8553 00006A29 01D7                <2> 	add edi, edx
  8554 00006A2B 01D7                <2> 	add edi, edx
  8555 00006A2D 31D2                <2> 	xor edx, edx
  8556 00006A2F 668B15[45580000]    <2> 	mov dx, [resolutionx2]
  8557 00006A36 034E16              <2> 	add ecx, [esi + 22]
  8558                              <2> bmplocloop:
  8559 00006A39 52                  <2> 	push edx
  8560 00006A3A 31C0                <2> 	xor eax, eax
  8561 00006A3C 6689D0              <2> 	mov ax, dx
  8562 00006A3F F7E1                <2> 	mul ecx
  8563 00006A41 5A                  <2> 	pop edx
  8564 00006A42 663B0D[59570000]    <2> 	cmp cx, [resolutiony]
  8565 00006A49 7609                <2> 	jbe .nofixy
  8566 00006A4B 31C9                <2> 	xor ecx, ecx
  8567 00006A4D 668B0D[59570000]    <2> 	mov cx, [resolutiony]
  8568                              <2> .nofixy:
  8569 00006A54 01C7                <2> 	add edi, eax
  8570 00006A56 8B5612              <2> 	mov edx, [esi + 18]
  8571 00006A59 8B4E16              <2> 	mov ecx, [esi + 22]
  8572 00006A5C 8B460A              <2> 	mov eax, [esi + 10]
  8573 00006A5F 8B5E02              <2> 	mov ebx, [esi + 2]
  8574 00006A62 01F3                <2> 	add ebx, esi
  8575 00006A64 891D[D46A0000]      <2> 	mov [bmpend], ebx
  8576 00006A6A 89D3                <2> 	mov ebx, edx
  8577 00006A6C 01C6                <2> 	add esi, eax
  8578                              <2> ldxbmp2:
  8579 00006A6E 31D2                <2> 	xor edx, edx
  8580 00006A70 668B15[57570000]    <2> 	mov dx, [resolutionx]
  8581 00006A77 39D3                <2> 	cmp ebx, edx
  8582 00006A79 7702                <2> 	ja ldxbmp
  8583 00006A7B 89DA                <2> 	mov edx, ebx
  8584                              <2> ldxbmp:
  8585 00006A7D 668B06              <2> 	mov ax, [esi]
  8586 00006A80 668907              <2> 	mov [edi], ax
  8587 00006A83 81C702000000        <2> 	add edi, 2
  8588 00006A89 81C602000000        <2> 	add esi, 2
  8589 00006A8F 3B35[D46A0000]      <2> 	cmp esi, [bmpend]
  8590 00006A95 7737                <2> 	ja endedbmp
  8591 00006A97 4A                  <2> 	dec edx
  8592 00006A98 81FA00000000        <2> 	cmp edx, 0
  8593 00006A9E 77DD                <2> 	ja ldxbmp
  8594 00006AA0 31D2                <2> 	xor edx, edx
  8595 00006AA2 668B15[57570000]    <2> 	mov dx, [resolutionx]
  8596 00006AA9 39D3                <2> 	cmp ebx, edx
  8597 00006AAB 7610                <2> 	jbe .notover
  8598                              <2> .over:
  8599 00006AAD 01DE                <2> 	add esi, ebx
  8600 00006AAF 01DE                <2> 	add esi, ebx
  8601 00006AB1 29D6                <2> 	sub esi, edx
  8602 00006AB3 29D6                <2> 	sub esi, edx
  8603 00006AB5 01DF                <2> 	add edi, ebx
  8604 00006AB7 01DF                <2> 	add edi, ebx
  8605 00006AB9 29D7                <2> 	sub edi, edx
  8606 00006ABB 29D7                <2> 	sub edi, edx
  8607                              <2> .notover:
  8608 00006ABD 29DF                <2> 	sub edi, ebx
  8609 00006ABF 29DF                <2> 	sub edi, ebx
  8610 00006AC1 29D7                <2> 	sub edi, edx
  8611 00006AC3 29D7                <2> 	sub edi, edx
  8612 00006AC5 49                  <2> 	dec ecx
  8613 00006AC6 81F900000000        <2> 	cmp ecx, 0
  8614 00006ACC 77A0                <2> 	ja ldxbmp2
  8615                              <2> endedbmp:
  8616 00006ACE E844030000          <2> 	call switchmousepos2
  8617 00006AD3 C3                  <2> 	ret
  8618                              <2> 	
  8619 00006AD4 00000000            <2> 	bmpend dd 0
  8620                              <1> %include "source/gui/circle.asm"
  8621                              <2> drawcircle:	;center in (dx,cx), color in si, radius in ax
  8622 00006AD8 55                  <2> 	push ebp
  8623 00006AD9 663D0000            <2> 	cmp ax, 0
  8624 00006ADD 770A                <2> 	ja .nozerocircle
  8625 00006ADF E81A1C0000          <2> 	call putpixel	;the easiest circle ever
  8626 00006AE4 E9F7000000          <2> 	jmp .done
  8627                              <2> .nozerocircle:
  8628 00006AE9 6689F5              <2> 	mov bp, si
  8629 00006AEC 6650                <2> 	push ax
  8630 00006AEE E84C1C0000          <2> 	call getpixelmem
  8631 00006AF3 31C0                <2> 	xor eax, eax
  8632 00006AF5 6658                <2> 	pop ax
  8633 00006AF7 BE01000000          <2> 	mov esi, 1
  8634 00006AFC 29C6                <2> 	sub esi, eax
  8635 00006AFE 89C1                <2> 	mov ecx, eax
  8636 00006B00 31C0                <2> 	xor eax, eax
  8637 00006B02 66A1[45580000]      <2> 	mov ax, [resolutionx2]
  8638 00006B08 F7E1                <2> 	mul ecx
  8639 00006B0A 50                  <2> 	push eax
  8640 00006B0B 31D2                <2> 	xor edx, edx
  8641 00006B0D 01C7                <2> 	add edi, eax
  8642 00006B0F 66892F              <2> 	mov [edi], bp
  8643 00006B12 29C7                <2> 	sub edi, eax
  8644 00006B14 29C7                <2> 	sub edi, eax
  8645 00006B16 66892F              <2> 	mov [edi], bp
  8646 00006B19 01C7                <2> 	add edi, eax
  8647 00006B1B D1E1                <2> 	shl ecx, 1
  8648 00006B1D 01CF                <2> 	add edi, ecx
  8649 00006B1F 66892F              <2> 	mov [edi], bp
  8650 00006B22 D1E1                <2> 	shl ecx, 1
  8651 00006B24 29CF                <2> 	sub edi, ecx
  8652 00006B26 66892F              <2> 	mov [edi], bp
  8653 00006B29 D1E9                <2> 	shr ecx, 1
  8654 00006B2B 01CF                <2> 	add edi, ecx
  8655 00006B2D D1E9                <2> 	shr ecx, 1
  8656 00006B2F B802000000          <2> 	mov eax, 2
  8657 00006B34 F7E1                <2> 	mul ecx
  8658 00006B36 48                  <2> 	dec eax
  8659 00006B37 F7D0                <2> 	not eax ;make it negative
  8660 00006B39 A3[E66B0000]        <2> 	mov [.ddF_y], eax
  8661 00006B3E 58                  <2> 	pop eax
  8662 00006B3F BB01000000          <2> 	mov ebx, 1
  8663 00006B44 891D[E26B0000]      <2> 	mov [.ddF_x], ebx
  8664 00006B4A 4B                  <2> 	dec ebx
  8665 00006B4B 31D2                <2> 	xor edx, edx
  8666 00006B4D E904000000          <2> 	jmp .lp
  8667                              <2> .lpb:
  8668 00006B52 D1EA                <2> 	shr edx, 1
  8669 00006B54 D1E9                <2> 	shr ecx, 1
  8670                              <2> .lp:	;it starts this with the center in edi
  8671                              <2> 		;color in bp
  8672                              <2> 		;ddF_x in memory
  8673                              <2> 		;x*resolutionx2 in ebx
  8674                              <2> 		;x in edx
  8675                              <2> 		;ddF_y in memory
  8676                              <2> 		;y*resolutionx2 in eax
  8677                              <2> 		;f in esi
  8678                              <2> 		;y in ecx
  8679 00006B56 81FE00000080        <2> 	cmp esi, 0x80000000 ;this means it is not negative
  8680 00006B5C 7717                <2> 	ja	.noddF_y
  8681 00006B5E 49                  <2> 	dec ecx
  8682 00006B5F 2B05[45580000]      <2> 	sub eax, [resolutionx2]
  8683 00006B65 8105[E66B0000]0200- <2> 	add dword [.ddF_y], 2
  8684 00006B6D 0000                <2>
  8685 00006B6F 0335[E66B0000]      <2> 	add esi, [.ddF_y]
  8686                              <2> .noddF_y:
  8687 00006B75 42                  <2> 	inc edx
  8688 00006B76 031D[45580000]      <2> 	add ebx, [resolutionx2]
  8689 00006B7C 8105[E26B0000]0200- <2> 	add dword [.ddF_x], 2
  8690 00006B84 0000                <2>
  8691 00006B86 0335[E26B0000]      <2> 	add esi, [.ddF_x]
  8692                              <2> 
  8693 00006B8C D1E2                <2> 	shl edx, 1
  8694 00006B8E D1E1                <2> 	shl ecx, 1
  8695 00006B90 01D7                <2> 	add edi, edx
  8696 00006B92 01C7                <2> 	add edi, eax
  8697 00006B94 66892F              <2> 	mov [edi], bp	;(cx+x,cy+y)
  8698 00006B97 D1E2                <2> 	shl edx, 1
  8699 00006B99 29D7                <2> 	sub edi, edx
  8700 00006B9B 66892F              <2> 	mov [edi], bp	;(cx-x,cy+y)
  8701 00006B9E D1E0                <2> 	shl eax, 1
  8702 00006BA0 29C7                <2> 	sub edi, eax
  8703 00006BA2 66892F              <2> 	mov [edi], bp	;(cx-x,cy-y)
  8704 00006BA5 01D7                <2> 	add edi, edx
  8705 00006BA7 66892F              <2> 	mov [edi], bp	;(cx+x,cy-y)
  8706 00006BAA D1E8                <2> 	shr eax, 1
  8707 00006BAC D1EA                <2> 	shr edx, 1
  8708 00006BAE 01C7                <2> 	add edi, eax
  8709 00006BB0 29D7                <2> 	sub edi, edx
  8710                              <2> 
  8711 00006BB2 39D1                <2> 	cmp ecx, edx
  8712 00006BB4 749C                <2> 	je .lpb
  8713                              <2> 
  8714 00006BB6 01DF                <2> 	add edi, ebx
  8715 00006BB8 01CF                <2> 	add edi, ecx
  8716 00006BBA 66892F              <2> 	mov [edi], bp	;(cx+y,cy+x)
  8717 00006BBD D1E1                <2> 	shl ecx, 1
  8718 00006BBF 29CF                <2> 	sub edi, ecx
  8719 00006BC1 66892F              <2> 	mov [edi], bp	;(cx-y,cy+x)
  8720 00006BC4 D1E3                <2> 	shl ebx, 1
  8721 00006BC6 29DF                <2> 	sub edi, ebx
  8722 00006BC8 66892F              <2> 	mov [edi], bp	;(cx-y,cy-x)
  8723 00006BCB 01CF                <2> 	add edi, ecx
  8724 00006BCD 66892F              <2> 	mov [edi], bp	;(cx+y,cy-x)
  8725 00006BD0 D1EB                <2> 	shr ebx, 1
  8726 00006BD2 D1E9                <2> 	shr ecx, 1
  8727 00006BD4 01DF                <2> 	add edi, ebx
  8728 00006BD6 29CF                <2> 	sub edi, ecx
  8729 00006BD8 39CA                <2> 	cmp edx, ecx
  8730 00006BDA 0F8272FFFFFF        <2> 	jb .lpb
  8731                              <2> .done:
  8732 00006BE0 5D                  <2> 	pop ebp
  8733 00006BE1 C3                  <2> 	ret
  8734                              <2> 	
  8735 00006BE2 00000000            <2> .ddF_x dd 0
  8736 00006BE6 00000000            <2> .ddF_y dd 0
  8737                              <2> 
  8738                              <2> fillcircle:	;center in (dx,cx), color in si, radius in ax
  8739 00006BEA 55                  <2> 	push ebp
  8740 00006BEB 663D0000            <2> 	cmp ax, 0
  8741 00006BEF 770A                <2> 	ja .nozerocircle
  8742 00006BF1 E8081B0000          <2> 	call putpixel	;the easiest circle ever
  8743 00006BF6 E95A010000          <2> 	jmp .done
  8744                              <2> .nozerocircle:
  8745 00006BFB 6689F5              <2> 	mov bp, si
  8746 00006BFE 6650                <2> 	push ax
  8747 00006C00 E83A1B0000          <2> 	call getpixelmem
  8748 00006C05 31C0                <2> 	xor eax, eax
  8749 00006C07 6658                <2> 	pop ax
  8750 00006C09 BE01000000          <2> 	mov esi, 1
  8751 00006C0E 29C6                <2> 	sub esi, eax
  8752 00006C10 89C1                <2> 	mov ecx, eax
  8753 00006C12 31C0                <2> 	xor eax, eax
  8754 00006C14 66A1[45580000]      <2> 	mov ax, [resolutionx2]
  8755 00006C1A F7E1                <2> 	mul ecx
  8756 00006C1C 50                  <2> 	push eax
  8757 00006C1D 31D2                <2> 	xor edx, edx
  8758 00006C1F 01C7                <2> 	add edi, eax
  8759 00006C21 66892F              <2> 	mov [edi], bp
  8760 00006C24 29C7                <2> 	sub edi, eax
  8761 00006C26 29C7                <2> 	sub edi, eax
  8762 00006C28 66892F              <2> 	mov [edi], bp
  8763 00006C2B 01C7                <2> 	add edi, eax
  8764 00006C2D D1E1                <2> 	shl ecx, 1
  8765 00006C2F 01CF                <2> 	add edi, ecx
  8766 00006C31 51                  <2> 	push ecx
  8767                              <2> .s0:
  8768 00006C32 66892F              <2> 	mov [edi], bp
  8769 00006C35 81EF02000000        <2> 	sub edi, 2
  8770 00006C3B 49                  <2> 	dec ecx
  8771 00006C3C 81F900000000        <2> 	cmp ecx, 0
  8772 00006C42 75EE                <2> 	jne .s0
  8773 00006C44 66892F              <2> 	mov [edi], bp
  8774 00006C47 59                  <2> 	pop ecx
  8775 00006C48 01CF                <2> 	add edi, ecx
  8776 00006C4A D1E9                <2> 	shr ecx, 1
  8777 00006C4C B802000000          <2> 	mov eax, 2
  8778 00006C51 F7E1                <2> 	mul ecx
  8779 00006C53 48                  <2> 	dec eax
  8780 00006C54 F7D0                <2> 	not eax ;make it negative
  8781 00006C56 A3[5B6D0000]        <2> 	mov [.ddF_y], eax
  8782 00006C5B 58                  <2> 	pop eax
  8783 00006C5C BB01000000          <2> 	mov ebx, 1
  8784 00006C61 891D[576D0000]      <2> 	mov [.ddF_x], ebx
  8785 00006C67 4B                  <2> 	dec ebx
  8786 00006C68 31D2                <2> 	xor edx, edx
  8787 00006C6A E904000000          <2> 	jmp .lp
  8788                              <2> .lpb:
  8789 00006C6F D1EA                <2> 	shr edx, 1
  8790 00006C71 D1E9                <2> 	shr ecx, 1
  8791                              <2> .lp:	;it starts this with the center in edi
  8792                              <2> 		;color in bp
  8793                              <2> 		;ddF_x in memory
  8794                              <2> 		;x*resolutionx2 in ebx
  8795                              <2> 		;x in edx
  8796                              <2> 		;ddF_y in memory
  8797                              <2> 		;y*resolutionx2 in eax
  8798                              <2> 		;f in esi
  8799                              <2> 		;y in ecx
  8800 00006C73 81FE00000080        <2> 	cmp esi, 0x80000000 ;this means it is not negative
  8801 00006C79 7717                <2> 	ja	.noddF_y
  8802 00006C7B 49                  <2> 	dec ecx
  8803 00006C7C 2B05[45580000]      <2> 	sub eax, [resolutionx2]
  8804 00006C82 8105[5B6D0000]0200- <2> 	add dword [.ddF_y], 2
  8805 00006C8A 0000                <2>
  8806 00006C8C 0335[5B6D0000]      <2> 	add esi, [.ddF_y]
  8807                              <2> .noddF_y:
  8808 00006C92 42                  <2> 	inc edx
  8809 00006C93 031D[45580000]      <2> 	add ebx, [resolutionx2]
  8810 00006C99 8105[576D0000]0200- <2> 	add dword [.ddF_x], 2
  8811 00006CA1 0000                <2>
  8812 00006CA3 0335[576D0000]      <2> 	add esi, [.ddF_x]
  8813                              <2> 
  8814 00006CA9 D1E2                <2> 	shl edx, 1
  8815 00006CAB D1E1                <2> 	shl ecx, 1
  8816 00006CAD 52                  <2> 	push edx
  8817 00006CAE 29D7                <2> 	sub edi, edx
  8818 00006CB0 01C7                <2> 	add edi, eax
  8819 00006CB2 81FA00000000        <2> 	cmp edx, 0
  8820 00006CB8 7412                <2> 	je .nos1
  8821                              <2> .s1:
  8822 00006CBA 66892F              <2> 	mov [edi], bp	;(cx-x,cy+y)
  8823 00006CBD 81C702000000        <2> 	add edi, 2
  8824 00006CC3 4A                  <2> 	dec edx
  8825 00006CC4 81FA00000000        <2> 	cmp edx, 0
  8826 00006CCA 75EE                <2> 	jne .s1
  8827                              <2> .nos1:
  8828 00006CCC 66892F              <2> 	mov [edi], bp
  8829 00006CCF 5A                  <2> 	pop edx
  8830 00006CD0 52                  <2> 	push edx
  8831 00006CD1 29C7                <2> 	sub edi, eax
  8832 00006CD3 29C7                <2> 	sub edi, eax
  8833 00006CD5 81FA00000000        <2> 	cmp edx, 0
  8834 00006CDB 7412                <2> 	je .nos2
  8835                              <2> .s2:
  8836 00006CDD 66892F              <2> 	mov [edi], bp	;(cx+x,cy-y)
  8837 00006CE0 81EF02000000        <2> 	sub edi, 2
  8838 00006CE6 4A                  <2> 	dec edx
  8839 00006CE7 81FA00000000        <2> 	cmp edx, 0
  8840 00006CED 75EE                <2> 	jne .s2
  8841                              <2> .nos2:
  8842 00006CEF 66892F              <2> 	mov [edi], bp
  8843 00006CF2 5A                  <2> 	pop edx
  8844 00006CF3 01C7                <2> 	add edi, eax	;(cx-x,cy-y)
  8845 00006CF5 01D7                <2> 	add edi, edx
  8846                              <2> 
  8847 00006CF7 39D1                <2> 	cmp ecx, edx
  8848 00006CF9 0F8470FFFFFF        <2> 	je .lpb
  8849                              <2> 
  8850 00006CFF 51                  <2> 	push ecx
  8851 00006D00 01DF                <2> 	add edi, ebx
  8852 00006D02 29CF                <2> 	sub edi, ecx
  8853 00006D04 81F900000000        <2> 	cmp ecx, 0
  8854 00006D0A 7412                <2> 	je .nos3
  8855                              <2> .s3:
  8856 00006D0C 66892F              <2> 	mov [edi], bp	;(cx-y,cy+x)
  8857 00006D0F 81C702000000        <2> 	add edi, 2
  8858 00006D15 49                  <2> 	dec ecx
  8859 00006D16 81F900000000        <2> 	cmp ecx, 0
  8860 00006D1C 75EE                <2> 	jne .s3
  8861                              <2> .nos3:
  8862 00006D1E 66892F              <2> 	mov [edi], bp
  8863 00006D21 59                  <2> 	pop ecx
  8864 00006D22 51                  <2> 	push ecx
  8865 00006D23 29DF                <2> 	sub edi, ebx
  8866 00006D25 29DF                <2> 	sub edi, ebx
  8867 00006D27 81F900000000        <2> 	cmp ecx, 0
  8868 00006D2D 7412                <2> 	je .nos4
  8869                              <2> .s4:
  8870 00006D2F 66892F              <2> 	mov [edi], bp	;(cx+y,cy-x)
  8871 00006D32 81EF02000000        <2> 	sub edi, 2
  8872 00006D38 49                  <2> 	dec ecx
  8873 00006D39 81F900000000        <2> 	cmp ecx, 0
  8874 00006D3F 75EE                <2> 	jne .s4
  8875                              <2> .nos4:
  8876 00006D41 66892F              <2> 	mov [edi], bp
  8877 00006D44 59                  <2> 	pop ecx
  8878 00006D45 01DF                <2> 	add edi, ebx	;(cx-y,cy-x)
  8879 00006D47 01CF                <2> 	add edi, ecx
  8880                              <2> 
  8881 00006D49 D1EA                <2> 	shr edx, 1
  8882 00006D4B D1E9                <2> 	shr ecx, 1
  8883 00006D4D 39CA                <2> 	cmp edx, ecx
  8884 00006D4F 0F821EFFFFFF        <2> 	jb .lp
  8885                              <2> .done:
  8886 00006D55 5D                  <2> 	pop ebp
  8887 00006D56 C3                  <2> 	ret
  8888                              <2> 	
  8889 00006D57 00000000            <2> .ddF_x dd 0
  8890 00006D5B 00000000            <2> .ddF_y dd 0
  8891                              <1> %include "source/gui/cursor.asm"
  8892                              <2> clearmousecursor:
  8893 00006D5F BE[C7700000]        <2> 		mov esi, background
  8894 00006D64 8B3D[6D570000]      <2> 		mov edi, [physbaseptr]
  8895 00006D6A 31D2                <2> 		xor edx, edx
  8896 00006D6C 31C9                <2> 		xor ecx, ecx
  8897 00006D6E 668B15[375A0000]    <2> 		mov dx, [lastmouseposition]
  8898 00006D75 668B0D[395A0000]    <2> 		mov cx, [lastmouseposition + 2]
  8899 00006D7C 01D7                <2> 		add edi, edx
  8900 00006D7E 31D2                <2> 		xor edx, edx
  8901 00006D80 668B15[45580000]    <2> 		mov dx, [resolutionx2]
  8902 00006D87 81F900000000        <2> 		cmp ecx, 0
  8903 00006D8D 7408                <2> 		je .nomul
  8904 00006D8F 52                  <2> 		push edx
  8905 00006D90 89D0                <2> 		mov eax, edx
  8906 00006D92 F7E1                <2> 		mul ecx
  8907 00006D94 01C7                <2> 		add edi, eax
  8908 00006D96 5A                  <2> 		pop edx
  8909                              <2> .nomul:
  8910                              <2> %ifdef 	gui.background
  8911                              <2> 		cmp dword [backgroundimage], 0
  8912                              <2> 		je .noyclr
  8913                              <2> 		mov esi, [backgroundimage]
  8914                              <2> 		sub edi, [physbaseptr]
  8915                              <2> 		add esi, edi
  8916                              <2> 		add edi, [physbaseptr]
  8917                              <2> .backlp:
  8918                              <2> 		xor ebx, ebx
  8919                              <2> .noyback:
  8920                              <2> 		mov eax, [esi + ebx]
  8921                              <2> 		mov [edi + ebx], eax
  8922                              <2> 		add ebx, 4
  8923                              <2> 		cmp ebx, 16
  8924                              <2> 		jne .noyback
  8925                              <2> 		add edi, edx
  8926                              <2> 		add esi, edx
  8927                              <2> 		inc cx
  8928                              <2> 		cmp cx, 16
  8929                              <2> 		jb .backlp
  8930                              <2> 		ret
  8931                              <2> %endif
  8932                              <2> .noyclr:
  8933 00006D97 668B06              <2> 		mov ax, [esi]
  8934 00006D9A C1C010              <2> 		rol eax, 16
  8935 00006D9D 668B06              <2> 		mov ax, [esi]
  8936 00006DA0 8907                <2> 		mov [edi], eax
  8937 00006DA2 894704              <2> 		mov [edi + 4], eax
  8938 00006DA5 894708              <2> 		mov [edi + 8], eax
  8939 00006DA8 89470C              <2> 		mov [edi + 12], eax
  8940 00006DAB 01D7                <2> 		add edi, edx
  8941 00006DAD 6641                <2> 		inc cx
  8942 00006DAF 6681F91000          <2> 		cmp cx, 16
  8943 00006DB4 72E1                <2> 		jb .noyclr
  8944 00006DB6 C3                  <2> 		ret
  8945                              <2> 
  8946                              <2> switchmousepos:		;;switch were the mouse is located
  8947 00006DB7 BE[75BB0300]        <2> 		mov esi, mousecolorbuf
  8948 00006DBC 8B3D[6D570000]      <2> 		mov edi, [physbaseptr]
  8949 00006DC2 31D2                <2> 		xor edx, edx
  8950 00006DC4 31C9                <2> 		xor ecx, ecx
  8951 00006DC6 668B15[375A0000]    <2> 		mov dx, [lastmouseposition]
  8952 00006DCD 668B0D[395A0000]    <2> 		mov cx, [lastmouseposition + 2]
  8953 00006DD4 01D7                <2> 		add edi, edx
  8954 00006DD6 31D2                <2> 		xor edx, edx
  8955 00006DD8 668B15[45580000]    <2> 		mov dx, [resolutionx2]
  8956 00006DDF 6681F90000          <2> 		cmp cx, 0
  8957 00006DE4 740B                <2> 		je noswmsy
  8958 00006DE6 01D7                <2> swmsy:		add edi, edx
  8959 00006DE8 6649                <2> 		dec cx
  8960 00006DEA 6681F90000          <2> 		cmp cx, 0
  8961 00006DEF 75F5                <2> 		jne swmsy
  8962 00006DF1 8B06                <2> noswmsy:	mov eax, [esi]
  8963 00006DF3 8B5E04              <2> 		mov ebx, [esi + 4]
  8964 00006DF6 8907                <2> 		mov [edi], eax
  8965 00006DF8 895F04              <2> 		mov [edi + 4], ebx
  8966 00006DFB 8B4608              <2> 		mov eax, [esi + 8]
  8967 00006DFE 8B5E0C              <2> 		mov ebx, [esi + 12]
  8968 00006E01 894708              <2> 		mov [edi + 8], eax
  8969 00006E04 895F0C              <2> 		mov [edi + 12], ebx
  8970 00006E07 01D7                <2> 		add edi, edx
  8971 00006E09 81C610000000        <2> 		add esi, 16
  8972 00006E0F 81FE[75BC0300]      <2> 		cmp esi, mcolorend
  8973 00006E15 72DA                <2> 		jb noswmsy
  8974                              <2> 		
  8975                              <2> switchmousepos2:
  8976 00006E17 BE[75BB0300]        <2> 		mov esi, mousecolorbuf
  8977 00006E1C 8B3D[6D570000]      <2> 		mov edi, [physbaseptr]
  8978 00006E22 31D2                <2> 		xor edx, edx
  8979 00006E24 31C9                <2> 		xor ecx, ecx
  8980 00006E26 668B15[3B5A0000]    <2> 		mov dx, [mousecursorposition]
  8981 00006E2D 668B0D[3D5A0000]    <2> 		mov cx, [mousecursorposition + 2]
  8982 00006E34 01D7                <2> 		add edi, edx
  8983 00006E36 31D2                <2> 		xor edx, edx
  8984 00006E38 668B15[45580000]    <2> 		mov dx, [resolutionx2]
  8985 00006E3F 6681F90000          <2> 		cmp cx, 0
  8986 00006E44 740B                <2> 		je noswmsy2
  8987 00006E46 01D7                <2> swmsy2:		add edi, edx
  8988 00006E48 6649                <2> 		dec cx
  8989 00006E4A 6681F90000          <2> 		cmp cx, 0
  8990 00006E4F 75F5                <2> 		jne swmsy2
  8991 00006E51 8B07                <2> noswmsy2:	mov eax, [edi]
  8992 00006E53 8B5F04              <2> 		mov ebx, [edi + 4]
  8993 00006E56 8906                <2> 		mov [esi], eax
  8994 00006E58 895E04              <2> 		mov [esi + 4], ebx
  8995 00006E5B 8B4708              <2> 		mov eax, [edi + 8]
  8996 00006E5E 8B5F0C              <2> 		mov ebx, [edi + 12]
  8997 00006E61 894608              <2> 		mov [esi + 8], eax
  8998 00006E64 895E0C              <2> 		mov [esi + 12], ebx
  8999 00006E67 01D7                <2> 		add edi, edx
  9000 00006E69 81C610000000        <2> 		add esi, 16
  9001 00006E6F 81FE[75BC0300]      <2> 		cmp esi, mcolorend
  9002 00006E75 72DA                <2> 		jb noswmsy2
  9003 00006E77 C3                  <2> 		ret
  9004                              <2> 		
  9005                              <1> %include "source/gui/icon.asm"
  9006 00006E78 0000                <2> iconcolor dw 0
  9007                              <2> 	showicon:	;;icon in si, position in (dx,cx), selected in ax, code in bx
  9008 00006E7A A2[67870000]        <2> 		mov [iconselected], al
  9009 00006E7F 8025[67870000]01    <2> 		and byte [iconselected], 1
  9010 00006E86 B401                <2> 		mov ah, 1
  9011 00006E88 E800160000          <2> 		call graphicsadd
  9012                              <2> 	showicon2:
  9013 00006E8D 8B3D[6D570000]      <2> 		mov edi, [physbaseptr]
  9014 00006E93 6601D2              <2> 		add dx, dx
  9015 00006E96 663B15[45580000]    <2> 		cmp dx, [resolutionx2]
  9016 00006E9D 720C                <2> 		jb screenxgood
  9017 00006E9F 668B15[45580000]    <2> 		mov dx, [resolutionx2]
  9018 00006EA6 6681EA4000          <2> 		sub dx, 64
  9019                              <2> 	screenxgood:
  9020 00006EAB 6681F90000          <2> 		cmp cx, 0
  9021 00006EB0 742B                <2> 		je noscreenygoodchk
  9022 00006EB2 663B0D[59570000]    <2> 		cmp cx, [resolutiony]
  9023 00006EB9 720C                <2> 		jb screenygood
  9024 00006EBB 668B0D[59570000]    <2> 		mov cx, [resolutiony]
  9025 00006EC2 6681E92000          <2> 		sub cx, 32
  9026                              <2> 	screenygood:
  9027 00006EC7 50                  <2> 		push eax
  9028 00006EC8 52                  <2> 		push edx
  9029 00006EC9 31C0                <2> 		xor eax, eax
  9030 00006ECB 31DB                <2> 		xor ebx, ebx
  9031 00006ECD 668B1D[45580000]    <2> 		mov bx, [resolutionx2]
  9032 00006ED4 6689C8              <2> 		mov ax, cx
  9033 00006ED7 F7E3                <2> 		mul ebx
  9034 00006ED9 01C7                <2> 		add edi, eax
  9035 00006EDB 5A                  <2> 		pop edx
  9036 00006EDC 58                  <2> 		pop eax
  9037                              <2> 	noscreenygoodchk:
  9038 00006EDD 31DB                <2> 		xor ebx, ebx
  9039 00006EDF 6689D3              <2> 		mov bx, dx
  9040 00006EE2 01DF                <2> 		add edi, ebx
  9041 00006EE4 6631C9              <2> 		xor cx, cx
  9042 00006EE7 668B06              <2> 		mov ax, [esi]
  9043 00006EEA 81C602000000        <2> 		add esi, 2
  9044 00006EF0 66A3[786E0000]      <2> 		mov [iconcolor], ax
  9045                              <2> 	writeicon:
  9046 00006EF6 8B06                <2> 		mov eax, [esi]
  9047 00006EF8 D1C0                <2> 		rol eax, 1
  9048 00006EFA 30C9                <2> 		xor cl, cl
  9049                              <2> 	writeiconline:
  9050 00006EFC B201                <2> 		mov dl, 1
  9051 00006EFE 20C2                <2> 		and dl, al
  9052 00006F00 3215[67870000]      <2> 		xor dl, [iconselected]
  9053 00006F06 668B1D[C7700000]    <2> 		mov bx, [background]
  9054 00006F0D 66891F              <2> 		mov [edi], bx
  9055 00006F10 80FA00              <2> 		cmp dl, 0
  9056 00006F13 740A                <2> 		je noiconline
  9057 00006F15 668B15[786E0000]    <2> 		mov dx, [iconcolor]
  9058 00006F1C 668917              <2> 		mov [edi], dx
  9059                              <2> 	noiconline:
  9060 00006F1F 81C702000000        <2> 		add edi, 2
  9061 00006F25 D1C0                <2> 		rol eax, 1
  9062 00006F27 FEC1                <2> 		inc cl
  9063 00006F29 80F920              <2> 		cmp cl, 32
  9064 00006F2C 72CE                <2> 		jb writeiconline
  9065 00006F2E 81C604000000        <2> 		add esi, 4
  9066 00006F34 FEC5                <2> 		inc ch
  9067 00006F36 31D2                <2> 		xor edx, edx
  9068 00006F38 668B15[45580000]    <2> 		mov dx, [resolutionx2]
  9069 00006F3F 01D7                <2> 		add edi, edx
  9070 00006F41 81EF40000000        <2> 		sub edi, 64
  9071 00006F47 80FD20              <2> 		cmp ch, 32
  9072 00006F4A 72AA                <2> 		jb writeicon
  9073 00006F4C 31C0                <2> 		xor eax, eax
  9074 00006F4E C3                  <2> 		ret
  9075                              <1> %include "source/gui/line.asm"
  9076                              <2> drawline:	;from (bx,ax) to (dx,cx), color in si
  9077 00006F4F 668935[71700000]    <2> 	mov [.color], si
  9078 00006F56 C605[73700000]00    <2> 	mov byte [.steep], 0
  9079 00006F5D C605[74700000]00    <2> 	mov byte [.yreversed], 0
  9080 00006F64 E907000000          <2> 	jmp .notsteep
  9081                              <2> .steeploop:
  9082 00006F69 C605[73700000]01    <2> 	mov byte [.steep], 1
  9083                              <2> .notsteep:
  9084 00006F70 31FF                <2> 	xor edi, edi
  9085 00006F72 31F6                <2> 	xor esi, esi
  9086 00006F74 6639DA              <2> 	cmp dx, bx
  9087 00006F77 7705                <2> 	ja .noreversex
  9088 00006F79 6687D3              <2> 	xchg dx, bx
  9089 00006F7C 6691                <2> 	xchg cx, ax
  9090                              <2> .noreversex:
  9091 00006F7E 6689D7              <2> 	mov di, dx
  9092 00006F81 6629DF              <2> 	sub di, bx
  9093                              <2> 	
  9094 00006F84 6639C1              <2> 	cmp cx, ax
  9095 00006F87 720B                <2> 	jb .reversey
  9096 00006F89 6689CE              <2> 	mov si, cx
  9097 00006F8C 6629C6              <2> 	sub si, ax
  9098 00006F8F E90D000000          <2> 	jmp .normal
  9099                              <2> .reversey:
  9100 00006F94 C605[74700000]02    <2> 	mov byte [.yreversed], 2
  9101 00006F9B 6689C6              <2> 	mov si, ax
  9102 00006F9E 6629CE              <2> 	sub si, cx	
  9103                              <2> .normal:
  9104 00006FA1 6687CA              <2> 	xchg cx, dx
  9105 00006FA4 6693                <2> 	xchg ax, bx
  9106 00006FA6 6639FE              <2> 	cmp si, di
  9107 00006FA9 77BE                <2> 	ja .steeploop
  9108 00006FAB 6687CA              <2> 	xchg cx, dx
  9109 00006FAE 6693                <2> 	xchg ax, bx
  9110                              <2> 	
  9111 00006FB0 6691                <2> 	xchg ax, cx
  9112 00006FB2 6687DA              <2> 	xchg bx, dx
  9113 00006FB5 66893D[77700000]    <2> 	mov [.xdelta], di
  9114 00006FBC 668935[79700000]    <2> 	mov [.ydelta], si
  9115 00006FC3 668B35[71700000]    <2> 	mov si, [.color]
  9116 00006FCA 66891D[75700000]    <2> 	mov [.endline], bx
  9117 00006FD1 6652                <2> 	push dx
  9118 00006FD3 6651                <2> 	push cx
  9119 00006FD5 6687CA              <2> 	xchg cx, dx
  9120 00006FD8 803D[73700000]01    <2> 	cmp byte [.steep], 1
  9121 00006FDF 7403                <2> 	je .xchg
  9122 00006FE1 6687D1              <2> 	xchg dx, cx
  9123                              <2> .xchg:
  9124 00006FE4 E856170000          <2> 	call getpixelmem	;get pointer to pixel in edi from (dx,cx)
  9125 00006FE9 6659                <2> 	pop cx
  9126 00006FEB 665A                <2> 	pop dx
  9127 00006FED 31C0                <2> 	xor eax, eax
  9128 00006FEF 66A1[77700000]      <2> 	mov ax, [.xdelta]
  9129 00006FF5 66D1E8              <2> 	shr ax, 1
  9130 00006FF8 8A0D[73700000]      <2> 	mov cl, [.steep]
  9131 00006FFE 0A0D[74700000]      <2> 	or cl, [.yreversed]
  9132 00007004 55                  <2> 	push ebp
  9133 00007005 668B2D[75700000]    <2> 	mov bp, [.endline]
  9134 0000700C 6629D5              <2> 	sub bp, dx
  9135 0000700F 668B15[79700000]    <2> 	mov dx, [.ydelta]
  9136                              <2> .lp:
  9137 00007016 668937              <2> 	mov [edi], si
  9138 00007019 6639D0              <2> 	cmp ax, dx
  9139 0000701C 7332                <2> 	jae .noaddx
  9140 0000701E F6C102              <2> 	test cl, 2
  9141 00007021 7414                <2> 	jz .nodecy
  9142 00007023 F6C101              <2> 	test cl, 1
  9143 00007026 7509                <2> 	jnz .steepy
  9144 00007028 29DF                <2> 	sub edi, ebx
  9145 0000702A 29DF                <2> 	sub edi, ebx
  9146 0000702C E906000000          <2> 	jmp .nodecy
  9147                              <2> .steepy:
  9148 00007031 81EF04000000        <2> 	sub edi, 4
  9149                              <2> .nodecy:
  9150 00007037 660305[77700000]    <2> 	add ax, [.xdelta]
  9151 0000703E F6C101              <2> 	test cl, 1
  9152 00007041 7507                <2> 	jnz .steepx
  9153 00007043 01DF                <2> 	add edi, ebx
  9154 00007045 E906000000          <2> 	jmp .noaddx
  9155                              <2> .steepx:
  9156 0000704A 81C702000000        <2> 	add edi, 2
  9157                              <2> .noaddx:
  9158 00007050 6629D0              <2> 	sub ax, dx
  9159 00007053 664D                <2> 	dec bp
  9160 00007055 81C702000000        <2> 	add edi, 2
  9161 0000705B F6C101              <2> 	test cl, 1
  9162 0000705E 7408                <2> 	jz .nosteepx
  9163 00007060 81EF02000000        <2> 	sub edi, 2
  9164 00007066 01DF                <2> 	add edi, ebx
  9165                              <2> .nosteepx:
  9166 00007068 6681FD0000          <2> 	cmp bp, 0
  9167 0000706D 75A7                <2> 	jne .lp
  9168                              <2> .done:
  9169 0000706F 5D                  <2> 	pop ebp
  9170 00007070 C3                  <2> 	ret
  9171                              <2> 	
  9172 00007071 0000                <2> .color dw 0
  9173 00007073 00                  <2> .steep db 0
  9174 00007074 00                  <2> .yreversed db 0
  9175 00007075 0000                <2> .endline dw 0
  9176 00007077 0000                <2> .xdelta dw 0
  9177 00007079 0000                <2> .ydelta dw 0
  9178                              <1> %include "source/gui/refresh.asm"
  9179                              <2> guiclear:
  9180 0000707B 8B3D[6D570000]      <2> 	mov edi, [physbaseptr]
  9181 00007081 668B15[57570000]    <2> 	mov dx, [resolutionx]
  9182 00007088 668B0D[59570000]    <2> 	mov cx, [resolutiony]
  9183 0000708F 668B1D[C7700000]    <2> 	mov bx, [background]
  9184 00007096 66891D[C9700000]    <2> 	mov [background + 2], bx
  9185                              <2> %ifdef gui.background
  9186                              <2> 	cmp dword [backgroundimage], 0
  9187                              <2> 	je guiclear.noback
  9188                              <2> 		mov esi, [backgroundimage]
  9189                              <2> 	.lp:
  9190                              <2> 		;movdqa xmm0, [esi]	;the next 4 lines are for SSE
  9191                              <2> 		;movdqa [edi], xmm0
  9192                              <2> 		;add esi, 16
  9193                              <2> 		;add edi, 16
  9194                              <2> 		;sub dx, 8
  9195                              <2> 		mov eax, [esi]
  9196                              <2> 		mov [edi], eax
  9197                              <2> 		add esi, 4
  9198                              <2> 		add edi, 4
  9199                              <2> 		sub dx, 2
  9200                              <2> 		cmp dx, 0
  9201                              <2> 		ja .lp
  9202                              <2> 		dec cx
  9203                              <2> 		mov dx, [resolutionx]
  9204                              <2> 		cmp cx, 0
  9205                              <2> 		ja .lp
  9206                              <2> 		ret
  9207                              <2> 	backgroundimage dd 0
  9208                              <2> %endif
  9209                              <2> guiclear.noback:
  9210 0000709D A1[C7700000]        <2> 	mov eax, [background]
  9211                              <2> guiclearloop:
  9212 000070A2 8907                <2> 	mov [edi], eax
  9213 000070A4 81C704000000        <2> 	add edi, 4
  9214 000070AA 6681EA0200          <2> 	sub dx, 2
  9215 000070AF 6681FA0000          <2> 	cmp dx, 0
  9216 000070B4 77EC                <2> 	ja guiclearloop
  9217 000070B6 6649                <2> 	dec cx
  9218 000070B8 668B15[57570000]    <2> 	mov dx, [resolutionx]
  9219 000070BF 6681F90000          <2> 	cmp cx, 0
  9220 000070C4 77DC                <2> 	ja guiclearloop
  9221 000070C6 C3                  <2> 	ret
  9222                              <2> 
  9223 000070C7 CF7B<rept>          <2> background times 2 dw 0111101111001111b
  9224                              <2> 	.original equ 0111101111001111b
  9225                              <2> 
  9226                              <2> reloadallgraphics:
  9227 000070CB BF[75B90300]        <2> 		mov edi, graphicstable
  9228                              <2> reloadgraphicsloop:
  9229 000070D0 8B7702              <2> 		mov esi, [edi + 2]
  9230 000070D3 668B5706            <2> 		mov dx, [edi + 6]
  9231 000070D7 668B4F08            <2> 		mov cx, [edi + 8]
  9232 000070DB 668B07              <2> 		mov ax, [edi]
  9233 000070DE 668B5F0A            <2> 		mov bx, [edi + 10]
  9234 000070E2 893D[79840000]      <2> 		mov [grpctblpos], edi
  9235 000070E8 3B3D[0D7F0000]      <2> 		cmp edi, [dragging]
  9236 000070EE 741E                <2> 		je loadedgraphic
  9237 000070F0 663D0100            <2> 		cmp ax, 1
  9238 000070F4 0F843C000000        <2> 		je near icongraphic
  9239 000070FA 663D0200            <2> 		cmp ax, 2
  9240 000070FE 0F8445000000        <2> 		je near stringgraphic
  9241 00007104 663D0300            <2> 		cmp ax, 3
  9242 00007108 0F8419000000        <2> 		je near windowgraphic
  9243 0000710E 8B3D[79840000]      <2> loadedgraphic:  mov edi, [grpctblpos]
  9244 00007114 81C710000000        <2> 		add edi, 16
  9245 0000711A 81FF[75BB0300]      <2> 		cmp edi, graphicstableend
  9246 00007120 733A                <2> 		jae donereloadgraphics
  9247 00007122 E9A9FFFFFF          <2> 		jmp reloadgraphicsloop
  9248                              <2> windowgraphic:
  9249 00007127 E842090000          <2> 		call showwindow2
  9250 0000712C E805ADFFFF          <2> 		call cleardouble
  9251 00007131 E9D8FFFFFF          <2> 		jmp loadedgraphic
  9252 00007136 80E301              <2> icongraphic:	and bl, 1
  9253 00007139 881D[67870000]      <2> 		mov [iconselected], bl
  9254 0000713F E849FDFFFF          <2> 		call showicon2
  9255 00007144 E9C5FFFFFF          <2> 		jmp loadedgraphic
  9256 00007149 80E301              <2> stringgraphic:  and bl, 1
  9257 0000714C 881D[097F0000]      <2> 		mov [mouseselecton], bl
  9258 00007152 E8D7050000          <2> 		call showstring2
  9259 00007157 E9B2FFFFFF          <2> 		jmp loadedgraphic
  9260                              <2> donereloadgraphics:
  9261 0000715C 8B3D[0D7F0000]      <2> 		mov edi, [dragging]
  9262 00007162 81FF[75B90300]      <2> 		cmp edi, graphicstable
  9263 00007168 7226                <2> 		jb notcorrectdrag
  9264 0000716A 668B07              <2> 		mov ax, [edi]
  9265 0000716D 8B7702              <2> 		mov esi, [edi + 2]
  9266 00007170 668B5706            <2> 		mov dx, [edi + 6]
  9267 00007174 668B4F08            <2> 		mov cx, [edi + 8]
  9268 00007178 668B5F0A            <2> 		mov bx, [edi + 10]
  9269 0000717C 663D0100            <2> 		cmp ax, 1
  9270 00007180 750F                <2> 		jne noticondragging
  9271 00007182 80E301              <2> 		and bl, 1
  9272 00007185 881D[67870000]      <2> 		mov [iconselected], bl
  9273 0000718B E8FDFCFFFF          <2> 		call showicon2
  9274                              <2> notcorrectdrag:
  9275 00007190 C3                  <2> 		ret
  9276                              <2> 
  9277                              <2> 	noticondragging:
  9278 00007191 663D0200            <2> 		cmp ax, 2
  9279 00007195 75F9                <2> 		jne notcorrectdrag
  9280 00007197 80E301              <2> 		and bl, 1
  9281 0000719A 881D[097F0000]      <2> 		mov [mouseselecton], bl
  9282 000071A0 E889050000          <2> 		call showstring2
  9283 000071A5 E9E6FFFFFF          <2> 		jmp notcorrectdrag
  9284                              <1> %include "source/gui/square.asm"
  9285                              <2> drawsquare:	;from (bx,ax) to (dx,cx), color in si
  9286 000071AA 6639D3              <2> 	cmp bx, dx
  9287 000071AD 7303                <2> 	jae .noxchgx
  9288 000071AF 6687DA              <2> 	xchg bx, dx
  9289                              <2> .noxchgx:
  9290 000071B2 6639C8              <2> 	cmp ax, cx
  9291 000071B5 7302                <2> 	jae .noxchgy
  9292 000071B7 6691                <2> 	xchg ax, cx
  9293                              <2> .noxchgy:
  9294 000071B9 6650                <2> 	push ax
  9295 000071BB 6653                <2> 	push bx
  9296 000071BD 6652                <2> 	push dx
  9297 000071BF E87B150000          <2> 	call getpixelmem	;get pointer to pixel in edi from (dx,cx)
  9298 000071C4 31D2                <2> 	xor edx, edx
  9299 000071C6 665A                <2> 	pop dx
  9300 000071C8 31DB                <2> 	xor ebx, ebx
  9301 000071CA 665B                <2> 	pop bx
  9302 000071CC 6658                <2> 	pop ax
  9303                              <2> .lp0:
  9304 000071CE 6652                <2> 	push dx
  9305                              <2> .lp:
  9306 000071D0 668937              <2> 	mov [edi], si
  9307 000071D3 81C702000000        <2> 	add edi, 2
  9308 000071D9 6642                <2> 	inc dx
  9309 000071DB 6639DA              <2> 	cmp dx, bx
  9310 000071DE 76F0                <2> 	jbe .lp
  9311 000071E0 665A                <2> 	pop dx
  9312 000071E2 81EF02000000        <2> 	sub edi, 2
  9313 000071E8 29DF                <2> 	sub edi, ebx
  9314 000071EA 29DF                <2> 	sub edi, ebx
  9315 000071EC 01D7                <2> 	add edi, edx
  9316 000071EE 01D7                <2> 	add edi, edx
  9317 000071F0 033D[45580000]      <2> 	add edi, [resolutionx2]
  9318 000071F6 6641                <2> 	inc cx
  9319 000071F8 6639C1              <2> 	cmp cx, ax
  9320 000071FB 7203                <2> 	jb .lp2
  9321 000071FD 74CF                <2> 	je .lp0
  9322 000071FF C3                  <2> 	ret
  9323                              <2> .lp2:
  9324 00007200 57                  <2> 	push edi
  9325 00007201 668937              <2> 	mov [edi], si
  9326 00007204 29D7                <2> 	sub edi, edx
  9327 00007206 29D7                <2> 	sub edi, edx
  9328 00007208 01DF                <2> 	add edi, ebx
  9329 0000720A 01DF                <2> 	add edi, ebx
  9330 0000720C 668937              <2> 	mov [edi], si
  9331 0000720F 5F                  <2> 	pop edi
  9332 00007210 033D[45580000]      <2> 	add edi, [resolutionx2]
  9333 00007216 6641                <2> 	inc cx
  9334 00007218 6639C1              <2> 	cmp cx, ax
  9335 0000721B 72E3                <2> 	jb .lp2
  9336 0000721D E9ACFFFFFF          <2> 	jmp .lp0
  9337                              <2> 
  9338                              <2> fillsquare:	;from (bx,ax) to (dx,cx), color in si
  9339 00007222 6639D3              <2> 	cmp bx, dx
  9340 00007225 7303                <2> 	jae .noxchgx
  9341 00007227 6687DA              <2> 	xchg bx, dx
  9342                              <2> .noxchgx:
  9343 0000722A 6639C8              <2> 	cmp ax, cx
  9344 0000722D 7302                <2> 	jae .noxchgy
  9345 0000722F 6691                <2> 	xchg ax, cx
  9346                              <2> .noxchgy:
  9347 00007231 6650                <2> 	push ax
  9348 00007233 6653                <2> 	push bx
  9349 00007235 6652                <2> 	push dx
  9350 00007237 E803150000          <2> 	call getpixelmem	;get pointer to pixel in edi from (dx,cx)
  9351 0000723C 31D2                <2> 	xor edx, edx
  9352 0000723E 665A                <2> 	pop dx
  9353 00007240 31DB                <2> 	xor ebx, ebx
  9354 00007242 665B                <2> 	pop bx
  9355 00007244 6658                <2> 	pop ax
  9356                              <2> .lp2:
  9357 00007246 6652                <2> 	push dx
  9358                              <2> .lp:
  9359 00007248 668937              <2> 	mov [edi], si
  9360 0000724B 81C702000000        <2> 	add edi, 2
  9361 00007251 6642                <2> 	inc dx
  9362 00007253 6639DA              <2> 	cmp dx, bx
  9363 00007256 76F0                <2> 	jbe .lp
  9364 00007258 665A                <2> 	pop dx
  9365 0000725A 81EF02000000        <2> 	sub edi, 2
  9366 00007260 29DF                <2> 	sub edi, ebx
  9367 00007262 29DF                <2> 	sub edi, ebx
  9368 00007264 01D7                <2> 	add edi, edx
  9369 00007266 01D7                <2> 	add edi, edx
  9370 00007268 033D[45580000]      <2> 	add edi, [resolutionx2]
  9371 0000726E 6641                <2> 	inc cx
  9372 00007270 6639C1              <2> 	cmp cx, ax
  9373 00007273 76D1                <2> 	jbe .lp2
  9374 00007275 C3                  <2> 	ret
  9375                              <1> %include "source/gui/startup.asm"
  9376                              <2> guisetup:
  9377                              <2> 	%ifdef gui.background
  9378                              <2> 	xor ebx, ebx
  9379                              <2> 	mov [backgroundimage], ebx
  9380                              <2> 	%endif
  9381 00007276 E800FEFFFF          <2> 	call guiclear
  9382 0000727B C605[CE870000]01    <2> 	mov byte [guion], 1
  9383 00007282 C605[097F0000]00    <2> 	mov byte [mouseselecton], 0
  9384 00007289 31C0                <2> 	xor eax, eax
  9385 0000728B 31DB                <2> 	xor ebx, ebx
  9386 0000728D 31C9                <2> 	xor ecx, ecx
  9387 0000728F 31D2                <2> 	xor edx, edx
  9388                              <2> 	
  9389 00007291 BE[53740000]        <2> 	mov esi, pacmsg
  9390 00007296 30E4                <2> 	xor ah, ah
  9391 00007298 B010                <2> 	mov al, 00010000b
  9392 0000729A 31DB                <2> 	xor ebx, ebx
  9393 0000729C 66B99000            <2> 	mov cx, 144
  9394 000072A0 66BA0400            <2> 	mov dx, 4
  9395 000072A4 E872040000          <2> 	call showstring
  9396                              <2> 	
  9397 000072A9 BE[91740000]        <2> 	mov esi, interneticon
  9398 000072AE 30E4                <2> 	xor ah, ah
  9399 000072B0 B010                <2> 	mov al, 00010000b
  9400 000072B2 BB[7C730000]        <2> 	mov ebx, noie
  9401 000072B7 66B91800            <2> 	mov cx, 24
  9402 000072BB 66BA0400            <2> 	mov dx, 4
  9403 000072BF E8B6FBFFFF          <2> 	call showicon
  9404                              <2> 	
  9405 000072C4 BE[13750000]        <2> 	mov esi, wordicon
  9406 000072C9 30E4                <2> 	xor ah, ah
  9407 000072CB B010                <2> 	mov al, 00010000b
  9408 000072CD 31DB                <2> 	xor ebx, ebx
  9409 000072CF 66B91800            <2> 	mov cx, 24
  9410 000072D3 66BA3000            <2> 	mov dx, 48
  9411 000072D7 E89EFBFFFF          <2> 	call showicon
  9412                              <2> 	
  9413 000072DC BE[95750000]        <2> 	mov esi, pacmanpellet
  9414 000072E1 30E4                <2> 	xor ah, ah
  9415 000072E3 B010                <2> 	mov al, 00010000b
  9416 000072E5 31DB                <2> 	xor ebx, ebx
  9417 000072E7 66B94000            <2> 	mov cx, 64
  9418 000072EB 66BA0400            <2> 	mov dx, 4
  9419 000072EF E886FBFFFF          <2> 	call showicon
  9420                              <2> 	
  9421 000072F4 BE[99760000]        <2> 	mov esi, pacman
  9422 000072F9 30E4                <2> 	xor ah, ah
  9423 000072FB B010                <2> 	mov al, 00010000b
  9424 000072FD BB[65730000]        <2> 	mov ebx, pacmannomnom
  9425 00007302 66B94000            <2> 	mov cx, 64
  9426 00007306 66BA3000            <2> 	mov dx, 48
  9427 0000730A E86BFBFFFF          <2> 	call showicon
  9428                              <2> 	
  9429 0000730F BE[17760000]        <2> 	mov esi, ghostie
  9430 00007314 30E4                <2> 	xor ah, ah
  9431 00007316 B010                <2> 	mov al, 00010000b
  9432 00007318 BB[4E730000]        <2> 	mov ebx, boo
  9433 0000731D 66B96C00            <2> 	mov cx, 108
  9434 00007321 66BA0400            <2> 	mov dx, 4
  9435 00007325 E850FBFFFF          <2> 	call showicon
  9436                              <2> 	
  9437 0000732A BE[35740000]        <2> 	mov esi, start
  9438 0000732F 668B0D[59570000]    <2> 	mov cx, [resolutiony]
  9439 00007336 6681E91000          <2> 	sub cx, 16
  9440 0000733B 66BA0200            <2> 	mov dx, 2
  9441 0000733F 30E4                <2> 	xor ah, ah
  9442 00007341 B010                <2> 	mov al, 00010000b
  9443 00007343 BB[F1730000]        <2> 	mov ebx, winblows
  9444 00007348 E8CE030000          <2> 	call showstring
  9445                              <2> 
  9446                              <2> %ifdef gui.time	
  9447                              <2> 	call guitime	;load time into timeshow/dateshow and show it
  9448                              <2> %endif
  9449 0000734D C3                  <2> 	ret
  9450                              <2> 
  9451                              <2> 	boo:
  9452 0000734E BE[4E740000]        <2> 		mov esi, boomsg
  9453 00007353 66BA6400            <2> 		mov dx, 100
  9454 00007357 66B94001            <2> 		mov cx, 320
  9455 0000735B 31DB                <2> 		xor ebx, ebx
  9456 0000735D 6631C0              <2> 		xor ax, ax
  9457 00007360 E9B6030000          <2> 		jmp showstring
  9458                              <2> 
  9459                              <2> 	pacmannomnom:
  9460 00007365 BE[6C740000]        <2> 		mov esi, pacnom
  9461 0000736A 66BA8200            <2> 		mov dx, 130
  9462 0000736E 66B93C00            <2> 		mov cx, 60
  9463 00007372 31DB                <2> 		xor ebx, ebx
  9464 00007374 6631C0              <2> 		xor ax, ax
  9465 00007377 E99F030000          <2> 		jmp showstring	
  9466                              <2> 	
  9467                              <2> 	noie:
  9468 0000737C 66C705[7B740000]80- <2> 		mov word [termwindow], 640
  9469 00007384 02                  <2>
  9470 00007385 66C705[7D740000]E0- <2> 		mov word [termwindow + 2], 480	;the previous lines of code make a large terminal window that is 4 characters smaller than the screen
  9471 0000738D 01                  <2>
  9472 0000738E BE[7B740000]        <2> 		mov esi, termwindow
  9473 00007393 66BA1000            <2> 		mov dx, 16
  9474 00007397 66B91000            <2> 		mov cx, 16
  9475 0000739B 31DB                <2> 		xor ebx, ebx
  9476 0000739D 6631C0              <2> 		xor ax, ax
  9477 000073A0 E80F060000          <2> 		call showwindow
  9478 000073A5 E9A6B7FFFF          <2> 		jmp os
  9479                              <2> 
  9480                              <2> 	gotomenuboot:
  9481 000073AA 31D2                <2> 		xor edx, edx
  9482 000073AC 31C9                <2> 		xor ecx, ecx
  9483 000073AE 668B15[57570000]    <2> 		mov dx, [resolutionx]
  9484 000073B5 668B0D[59570000]    <2> 		mov cx, [resolutiony]
  9485 000073BC 66C1E904            <2> 		shr cx, 4
  9486 000073C0 6681E90100          <2> 		sub cx, 1
  9487 000073C5 66C1E104            <2> 		shl cx, 4
  9488 000073C9 668915[7B740000]    <2> 		mov [termwindow], dx
  9489 000073D0 66890D[7D740000]    <2> 		mov [termwindow + 2], cx	;the previous lines of code make a large terminal window that is fullscreen
  9490 000073D7 BE[7B740000]        <2> 		mov esi, termwindow
  9491 000073DC 6631D2              <2> 		xor dx, dx
  9492 000073DF 6631C9              <2> 		xor cx, cx
  9493 000073E2 31DB                <2> 		xor ebx, ebx
  9494 000073E4 6631C0              <2> 		xor ax, ax
  9495 000073E7 E8C8050000          <2> 		call showwindow
  9496 000073EC E95FB7FFFF          <2> 		jmp os
  9497                              <2> 
  9498                              <2> 	winblows:
  9499 000073F1 BE[44740000]        <2> 		mov esi, turnoffmsg
  9500 000073F6 BB[9E520000]        <2> 		mov ebx, turnoff
  9501 000073FB 668B0D[59570000]    <2> 		mov cx, [resolutiony]
  9502 00007402 6681E92000          <2> 		sub cx, 32
  9503 00007407 6631D2              <2> 		xor dx, dx
  9504 0000740A 30E4                <2> 		xor ah, ah
  9505 0000740C B010                <2> 		mov al, 00010000b
  9506 0000740E E808030000          <2> 		call showstring
  9507 00007413 BE[3B740000]        <2> 		mov esi, gotomenu
  9508 00007418 668B0D[59570000]    <2> 		mov cx, [resolutiony]
  9509 0000741F 6681E93000          <2> 		sub cx, 48
  9510 00007424 6631D2              <2> 		xor dx, dx
  9511 00007427 30E4                <2> 		xor ah, ah
  9512 00007429 B010                <2> 		mov al, 00010000b
  9513 0000742B BB[AA730000]        <2> 		mov ebx, gotomenuboot
  9514 00007430 E9E6020000          <2> 		jmp showstring
  9515                              <2> 		
  9516                              <2> 
  9517 00007435 737461727400        <2> 	start	db "start",0
  9518 0000743B 536F6C6C65724F5300  <2> 	gotomenu db "SollerOS",0
  9519 00007444 506F776572204F6666- <2> 	turnoffmsg db "Power Off",0
  9520 0000744D 00                  <2>
  9521 0000744E 426F6F2100          <2> 	boomsg db "Boo!",0
  9522 00007453 5061636D616E207761- <2> 	pacmsg	db "Pacman was easy to draw.",0
  9523 0000745C 73206561737920746F- <2>
  9524 00007465 20647261772E00      <2>
  9525 0000746C 4F6D206E6F6D206E6F- <2> 	pacnom  db "Om nom nom nom",0
  9526 00007475 6D206E6F6D00        <2>
  9527                              <2> 
  9528 0000747B 20035802            <2> 	termwindow:	dw 800,600	;window size
  9529 0000747F FFFF0000            <2> 				dw 0xFFFF,0	;colors(FG,BG)
  9530 00007483 [76BC0300]-         <2> 				dd videobuf,videobuf2 ;location of buffers
  9531 00007487 [BE910400]          <2>
  9532 0000748B 534855536800        <2> 	termmsg:	db "SHUSh",0	;;window title
  9533                              <2> 	
  9534 00007491 <incbin>            <2> interneticon: 	incbin 'source/gui/icons/internet'
  9535 00007513 <incbin>            <2> wordicon: 	incbin 'source/gui/icons/word'
  9536 00007595 <incbin>            <2> pacmanpellet: incbin 'source/gui/icons/pellet'
  9537 00007617 <incbin>            <2> ghostie	incbin 'source/gui/icons/ghostie'
  9538 00007699 <incbin>            <2> pacman	incbin 'source/gui/icons/pacman'
  9539                              <2> 
  9540                              <2> %ifdef gui.time
  9541                              <2> guitime:
  9542                              <2> 		call time	;get rtc in timeshow & dateshow
  9543                              <2> 		xor ebx, ebx
  9544                              <2> 		mov dx, [resolutionx2]
  9545                              <2> 		xor cx, cx
  9546                              <2> 		sub dx, 304
  9547                              <2> 		mov esi, dateshow
  9548                              <2> 		mov al, 00010001b
  9549                              <2> 		call showstring
  9550                              <2> 		mov esi, timeshow
  9551                              <2> 		xor ebx, ebx
  9552                              <2> 		mov al, 00010001b
  9553                              <2> 		call showstring
  9554                              <2> 		ret
  9555                              <2> %endif
  9556                              <1> %include "source/gui/text.asm"
  9557                              <2> 	showstring:
  9558 0000771B A2[097F0000]        <2> 		mov [mouseselecton], al
  9559 00007720 8025[097F0000]01    <2> 		and byte [mouseselecton], 1
  9560 00007727 B402                <2> 		mov ah, 2
  9561 00007729 E85F0D0000          <2> 		call graphicsadd
  9562                              <2> 	showstring2:	;location in (dx,cx), color in [colorfont2] and [background]
  9563 0000772E 30E4                <2> 		xor ah, ah
  9564 00007730 8A06                <2> 		mov al, [esi]
  9565 00007732 3CC0                <2> 		cmp al, 0xC0
  9566 00007734 7234                <2> 		jb .doneutf
  9567 00007736 3CE0                <2> 		cmp al, 0xE0
  9568 00007738 721D                <2> 		jb .two
  9569 0000773A 46                  <2> 		inc esi
  9570 0000773B 668B1E              <2> 		mov bx, [esi]
  9571 0000773E 46                  <2> 		inc esi
  9572 0000773F C0E004              <2> 		shl al, 4
  9573 00007742 66C1E302            <2> 		shl bx, 2
  9574 00007746 C0EF02              <2> 		shr bh, 2
  9575 00007749 66C1EB02            <2> 		shr bx, 2
  9576 0000774D 08C7                <2> 		or bh, al
  9577 0000774F 6689D8              <2> 		mov ax, bx
  9578 00007752 E913000000          <2> 		jmp .doneutf
  9579                              <2> 	.two:
  9580 00007757 8A3E                <2> 		mov bh, [esi]
  9581 00007759 46                  <2> 		inc esi
  9582 0000775A 8A1E                <2> 		mov bl, [esi]
  9583 0000775C 66C1E302            <2> 		shl bx, 2
  9584 00007760 C0EF02              <2> 		shr bh, 2
  9585 00007763 66C1EB02            <2> 		shr bx, 2
  9586 00007767 6689D8              <2> 		mov ax, bx
  9587                              <2> 	.doneutf:
  9588 0000776A 3C00                <2> 		cmp al, 0
  9589 0000776C 7423                <2> 		je doneshowstring
  9590 0000776E 46                  <2> 		inc esi
  9591 0000776F 3CFF                <2> 		cmp al, 255
  9592 00007771 74BB                <2> 		je showstring2
  9593 00007773 56                  <2> 		push esi
  9594 00007774 668B1D[99770000]    <2> 		mov bx, [colorfont2]
  9595 0000777B E82A000000          <2> 		call showfontvesa
  9596 00007780 663D0A00            <2> 		cmp ax, 10
  9597 00007784 7405                <2> 		je noproceedshst
  9598 00007786 6681C20800          <2> 		add dx, 8
  9599                              <2> 	noproceedshst:
  9600 0000778B 5E                  <2> 		pop esi
  9601 0000778C E99DFFFFFF          <2> 		jmp showstring2
  9602                              <2> 	doneshowstring:
  9603 00007791 C605[097F0000]00    <2> 		mov byte [mouseselecton], 0
  9604 00007798 C3                  <2> 		ret
  9605                              <2> 
  9606 00007799 FFFF                <2> colorfont2 dw 0xFFFF
  9607 0000779B 00                  <2> colorcache db 0
  9608                              <2> 
  9609 0000779C 02                  <2> resolutionbytes db 2
  9610 0000779D 0000                <2> posxvesa dw 0
  9611 0000779F 0000                <2> posyvesa dw 0
  9612 000077A1 FFFF                <2> colorfont dw 0xFFFF
  9613                              <2> savefontvesa:		;same rules as showfontvesa
  9614 000077A3 C605[087F0000]01    <2> 	mov byte [savefonton], 1
  9615                              <2> showfontvesa:		;position in (dx,cx), color in bx, char in ax
  9616 000077AA 663DFF00            <2> 	cmp ax, 255
  9617 000077AE 7501                <2> 	jne nostopshowfont
  9618 000077B0 C3                  <2> 	ret
  9619                              <2> nostopshowfont:
  9620 000077B1 55                  <2> 	push ebp
  9621 000077B2 66890D[9F770000]    <2> 	mov [posyvesa], cx
  9622 000077B9 663D0A00            <2> 	cmp ax, 10
  9623 000077BD 0F8424000000        <2> 	je near goodvesafontx
  9624 000077C3 31C9                <2> 	xor ecx, ecx
  9625 000077C5 668B0D[45580000]    <2> 	mov cx, [resolutionx2]
  9626 000077CC 6639CA              <2> 	cmp dx, cx
  9627 000077CF 7616                <2> 	jbe goodvesafontx
  9628 000077D1 6631D2              <2> 	xor dx, dx
  9629 000077D4 668B0D[9F770000]    <2> 	mov cx, [posyvesa]
  9630 000077DB 6681C11000          <2> 	add cx, 16
  9631 000077E0 66890D[9F770000]    <2> 	mov [posyvesa], cx
  9632                              <2> goodvesafontx:
  9633 000077E7 668B0D[9F770000]    <2> 	mov cx, [posyvesa]
  9634 000077EE 668915[9D770000]    <2> 	mov [posxvesa], dx
  9635 000077F5 8B3D[6D570000]      <2> 	mov edi, [physbaseptr]
  9636 000077FB 66891D[A1770000]    <2> 	mov [colorfont], bx
  9637 00007802 668B2D[A1770000]    <2> 	mov bp, [colorfont]
  9638 00007809 31DB                <2> 	xor ebx, ebx
  9639 0000780B 6689C3              <2> 	mov bx, ax
  9640 0000780E 31C0                <2> 	xor eax, eax
  9641 00007810 6689D8              <2> 	mov ax, bx
  9642 00007813 6689D3              <2> 	mov bx, dx
  9643 00007816 89DA                <2> 	mov edx, ebx
  9644 00007818 31DB                <2> 	xor ebx, ebx
  9645 0000781A 6681F90000          <2> 	cmp cx, 0
  9646 0000781F 7414                <2> 	je vesaposloopdn
  9647 00007821 668B1D[45580000]    <2> 	mov bx, [resolutionx2]
  9648                              <2> vesaposloop:
  9649 00007828 52                  <2> 	push edx
  9650 00007829 50                  <2> 	push eax
  9651 0000782A 31C0                <2> 	xor eax, eax
  9652 0000782C 6689C8              <2> 	mov ax, cx
  9653 0000782F F7E3                <2> 	mul ebx
  9654 00007831 01C7                <2> 	add edi, eax
  9655 00007833 58                  <2> 	pop eax
  9656 00007834 5A                  <2> 	pop edx
  9657                              <2> vesaposloopdn:
  9658 00007835 01D7                <2> 	add edi, edx
  9659 00007837 BE[188A0000]        <2> 	mov esi, fonts
  9660                              <2> findfontvesa:
  9661 0000783C 663D0A00            <2> 	cmp ax, 10
  9662 00007840 0F84EB000000        <2> 	je near nwlinevesa
  9663 00007846 C1E004              <2> 	shl eax, 4
  9664 00007849 01C6                <2> 	add esi, eax
  9665 0000784B C1E804              <2> 	shr eax, 4
  9666 0000784E 81FE[188A0300]      <2> 	cmp esi, fontend
  9667 00007854 0F83AB000000        <2> 	jae near donefontvesa
  9668 0000785A 4E                  <2> 	dec esi
  9669                              <2> foundfontvesa:
  9670 0000785B 46                  <2> 	inc esi
  9671 0000785C 803D[087F0000]01    <2> 	cmp byte [savefonton], 1
  9672 00007863 0F84EA000000        <2> 	je near vesafontsaver
  9673 00007869 30C9                <2> 	xor cl, cl
  9674 0000786B 8A06                <2> 	mov al, [esi]
  9675 0000786D 668B15[45580000]    <2> 	mov dx, [resolutionx2]
  9676 00007874 662B15[9D770000]    <2> 	sub dx, [posxvesa]
  9677 0000787B 6681FA1000          <2> 	cmp dx, 16
  9678 00007880 7708                <2> 	ja paintfontvesa
  9679 00007882 D0EA                <2> 	shr dl, 1
  9680 00007884 8815[30790000]      <2> 	mov [charwidth], dl
  9681                              <2> paintfontvesa:
  9682 0000788A B201                <2> 	mov dl, 1
  9683 0000788C 20C2                <2> 	and dl, al
  9684 0000788E 803D[077F0000]01    <2> 	cmp byte [showcursorfonton], 1
  9685 00007895 0F842E000000        <2> 	je near nodelpaintedfont
  9686 0000789B 803D[077F0000]02    <2> 	cmp byte [showcursorfonton], 2
  9687 000078A2 0F8511000000        <2> 	jne near noswitchcursorfonton
  9688 000078A8 80FA00              <2> 	cmp dl, 0
  9689 000078AB 0F8420000000        <2> 	je near nopixelset
  9690 000078B1 66892F              <2> 	mov [edi], bp
  9691 000078B4 E918000000          <2> 	jmp nopixelset
  9692                              <2> noswitchcursorfonton:
  9693 000078B9 3215[097F0000]      <2> 	xor dl, [mouseselecton]
  9694 000078BF 668B1D[C7700000]    <2> 	mov bx, [background]
  9695 000078C6 66891F              <2> 	mov [edi], bx
  9696                              <2> nodelpaintedfont:
  9697 000078C9 80FA00              <2> 	cmp dl, 0
  9698 000078CC 7403                <2> 	je nopixelset
  9699 000078CE 66892F              <2> 	mov [edi], bp
  9700                              <2> nopixelset:
  9701 000078D1 81C702000000        <2> 	add edi, 2
  9702 000078D7 D0C0                <2> 	rol al, 1
  9703 000078D9 FEC1                <2> 	inc cl
  9704 000078DB 3A0D[30790000]      <2> 	cmp cl, [charwidth]
  9705 000078E1 72A7                <2> 	jb paintfontvesa
  9706 000078E3 FEC5                <2> 	inc ch
  9707 000078E5 31D2                <2> 	xor edx, edx
  9708 000078E7 668B15[45580000]    <2> 	mov dx, [resolutionx2]
  9709 000078EE 01D7                <2> 	add edi, edx
  9710 000078F0 31D2                <2> 	xor edx, edx
  9711 000078F2 8A15[30790000]      <2> 	mov dl, [charwidth]
  9712 000078F8 00D2                <2> 	add dl, dl
  9713 000078FA 29D7                <2> 	sub edi, edx
  9714 000078FC 80FD10              <2> 	cmp ch, 16
  9715 000078FF 0F8256FFFFFF        <2> 	jb foundfontvesa
  9716                              <2> donefontvesa:
  9717 00007905 C605[30790000]08    <2> 	mov byte [charwidth], 8
  9718 0000790C 668B15[9D770000]    <2> 	mov dx, [posxvesa]
  9719 00007913 8A1D[30790000]      <2> 	mov bl, [charwidth]
  9720 00007919 30FF                <2> 	xor bh, bh
  9721 0000791B 6601DA              <2> 	add dx, bx
  9722 0000791E 6689EB              <2> 	mov bx, bp
  9723 00007921 668B0D[9F770000]    <2> 	mov cx, [posyvesa]
  9724 00007928 883D[087F0000]      <2> 	mov [savefonton], bh
  9725 0000792E 5D                  <2> 	pop ebp
  9726 0000792F C3                  <2> 	ret
  9727 00007930 08                  <2> charwidth db 8
  9728                              <2> nwlinevesa:
  9729 00007931 6631D2              <2> 	xor dx, dx
  9730 00007934 668915[9D770000]    <2> 	mov [posxvesa], dx
  9731 0000793B 668B0D[9F770000]    <2> 	mov cx, [posyvesa]
  9732 00007942 6681C11000          <2> 	add cx, 16
  9733 00007947 66890D[9F770000]    <2> 	mov [posyvesa], cx
  9734 0000794E E9B2FFFFFF          <2> 	jmp donefontvesa
  9735                              <2> vesafontsaver:
  9736 00007953 30C0                <2> 	xor al, al
  9737 00007955 30C9                <2> 	xor cl, cl
  9738                              <2> vesafontsaver2:
  9739 00007957 66392F              <2> 	cmp [edi], bp
  9740 0000795A 742F                <2> 	je colorfontmatch
  9741                              <2> donecolormatch:
  9742 0000795C 81C702000000        <2> 	add edi, 2
  9743 00007962 D0C0                <2> 	rol al, 1
  9744 00007964 FEC1                <2> 	inc cl
  9745 00007966 80F908              <2> 	cmp cl, 8
  9746 00007969 72EC                <2> 	jb vesafontsaver2
  9747 0000796B 8806                <2> 	mov [esi], al
  9748 0000796D 46                  <2> 	inc esi
  9749 0000796E FEC5                <2> 	inc ch
  9750 00007970 31D2                <2> 	xor edx, edx
  9751 00007972 668B15[45580000]    <2> 	mov dx, [resolutionx2]
  9752 00007979 01D7                <2> 	add edi, edx
  9753 0000797B 81EF10000000        <2> 	sub edi, 16
  9754 00007981 80FD10              <2> 	cmp ch, 16
  9755 00007984 72CD                <2> 	jb vesafontsaver
  9756 00007986 E97AFFFFFF          <2> 	jmp donefontvesa
  9757                              <2> colorfontmatch:
  9758 0000798B 0401                <2> 	add al, 1
  9759 0000798D E9CAFFFFFF          <2> 	jmp donecolormatch
  9760                              <1> %include "source/gui/window.asm"
  9761 00007992 0000                <2> winvcopystx dw 0
  9762 00007994 0000                <2> winvcopysty dw 0
  9763 00007996 0000                <2> winvcopydx dw 0
  9764 00007998 0000                <2> winvcopycx dw 0
  9765 0000799A FFFF0000            <2> windowcolor dw 0xFFFF,0
  9766 0000799E 00000000            <2> windowbufloc: dd 0
  9767 000079A2 00000000            <2> windowvideobuf dd 0
  9768 000079A6 00000000            <2> windowvideobuf2 dd 0
  9769 000079AA 00000000            <2> windowinfobuf dd 0
  9770 000079AE 0000                <2> termcol dw 0
  9771 000079B0 00000000            <2> wincopyendpos dd 0
  9772                              <2> 
  9773                              <2> 	showwindow:	;windowstuff in esi, position in (dx, cx), nothing in ax, code in ebx
  9774 000079B4 C605[EA230000]01    <2> 		mov byte [termguion], 1
  9775 000079BB 6681C11000          <2> 		add cx, 16
  9776 000079C0 668915[92790000]    <2> 		mov [winvcopystx], dx
  9777 000079C7 66890D[94790000]    <2> 		mov [winvcopysty], cx
  9778 000079CE 8935[AA790000]      <2> 		mov [windowinfobuf], esi
  9779 000079D4 668B16              <2> 		mov dx, [esi]
  9780 000079D7 668B4E02            <2> 		mov cx, [esi + 2]
  9781 000079DB 31C0                <2> 		xor eax, eax
  9782 000079DD 31DB                <2> 		xor ebx, ebx
  9783 000079DF 6689D0              <2> 		mov ax, dx
  9784 000079E2 6689CB              <2> 		mov bx, cx
  9785 000079E5 66C1E803            <2> 		shr ax, 3
  9786 000079E9 66C1EB04            <2> 		shr bx, 4
  9787 000079ED 66A3[AE790000]      <2> 		mov [termcol], ax
  9788 000079F3 A2[EB250000]        <2> 		mov [charxy], al
  9789 000079F8 881D[EC250000]      <2> 		mov [charxy + 1], bl
  9790 000079FE 8B7E04              <2> 		mov edi, [esi + 4]
  9791 00007A01 893D[9A790000]      <2> 		mov [windowcolor], edi
  9792 00007A07 8B7E0C              <2> 		mov edi, [esi + 12]
  9793 00007A0A 893D[A6790000]      <2> 		mov [windowvideobuf2], edi
  9794 00007A10 8B7E08              <2> 		mov edi, [esi + 8]
  9795 00007A13 893D[A2790000]      <2> 		mov [windowvideobuf], edi
  9796 00007A19 81FB00000000        <2> 		cmp ebx, 0
  9797 00007A1F 0F84C1040000        <2> 		je near donewincopynow
  9798                              <2> 	findendposwin:
  9799 00007A25 C1E002              <2> 		shl eax, 2
  9800 00007A28 31D2                <2> 		xor edx, edx
  9801 00007A2A F7E3                <2> 		mul ebx
  9802 00007A2C 01C7                <2> 		add edi, eax
  9803 00007A2E 893D[B0790000]      <2> 		mov [wincopyendpos], edi
  9804 00007A34 31FF                <2> 		xor edi, edi
  9805 00007A36 6631C0              <2> 		xor ax, ax
  9806 00007A39 6631DB              <2> 		xor bx, bx
  9807 00007A3C 6601D2              <2> 		add dx, dx
  9808 00007A3F 668915[96790000]    <2> 		mov [winvcopydx], dx
  9809 00007A46 66890D[98790000]    <2> 		mov [winvcopycx], cx
  9810 00007A4D 668B0D[94790000]    <2> 		mov cx, [winvcopysty]
  9811 00007A54 6681E91000          <2> 		sub cx, 16
  9812 00007A59 668B15[92790000]    <2> 		mov dx, [winvcopystx]
  9813 00007A60 C605[EB230000]00    <2> 		mov byte [termcopyon], 0
  9814 00007A67 B403                <2> 		mov ah, 3
  9815 00007A69 E81F0A0000          <2> 		call graphicsadd
  9816                              <2> 	showwindow2:
  9817 00007A6E 6681C11000          <2> 		add cx, 16
  9818 00007A73 668915[92790000]    <2> 		mov [winvcopystx], dx
  9819 00007A7A 66890D[94790000]    <2> 		mov [winvcopysty], cx
  9820 00007A81 668B16              <2> 		mov dx, [esi]
  9821 00007A84 668B4E02            <2> 		mov cx, [esi + 2]
  9822 00007A88 6601D2              <2> 		add dx, dx
  9823 00007A8B 668915[96790000]    <2> 		mov [winvcopydx], dx
  9824 00007A92 66890D[98790000]    <2> 		mov [winvcopycx], cx
  9825 00007A99 E818000000          <2> 		call reloadwindowtitle
  9826 00007A9E 803D[74840000]01    <2> 		cmp byte [windrag], 1
  9827 00007AA5 0F834A040000        <2> 		jae near forgetresetstuff
  9828 00007AAB 8B3D[9E790000]      <2> 		mov edi, [windowbufloc]
  9829 00007AB1 E96E020000          <2> 		jmp windowvideocopyset
  9830                              <2> 		
  9831                              <2> 	reloadwindowtitle:
  9832 00007AB6 8B3D[9E790000]      <2> 		mov edi, [windowbufloc]
  9833 00007ABC 31D2                <2> 		xor edx, edx
  9834 00007ABE 668B15[45580000]    <2> 		mov dx, [resolutionx2]
  9835 00007AC5 C1E204              <2> 		shl edx, 4
  9836 00007AC8 29D7                <2> 		sub edi, edx
  9837 00007ACA 803D[EB230000]00    <2> 		cmp byte [termcopyon], 0
  9838 00007AD1 7532                <2> 		jne nocleartitlebarpos
  9839 00007AD3 8B3D[6D570000]      <2> 		mov edi, [physbaseptr]
  9840 00007AD9 31D2                <2> 		xor edx, edx
  9841 00007ADB 668B15[92790000]    <2> 		mov dx, [winvcopystx]
  9842 00007AE2 01D7                <2> 		add edi, edx
  9843 00007AE4 31C9                <2> 		xor ecx, ecx
  9844 00007AE6 668B0D[94790000]    <2> 		mov cx, [winvcopysty]
  9845 00007AED 6681E91000          <2> 		sub cx, 16
  9846 00007AF2 6681F90000          <2> 		cmp cx, 0
  9847 00007AF7 740C                <2> 		je nocleartitlebarpos
  9848                              <2> 	cleartitlebarpos:
  9849 00007AF9 31C0                <2> 		xor eax, eax
  9850 00007AFB 66A1[45580000]      <2> 		mov ax, [resolutionx2]
  9851 00007B01 F7E1                <2> 		mul ecx
  9852 00007B03 01C7                <2> 		add edi, eax
  9853                              <2> 	nocleartitlebarpos:
  9854 00007B05 66B91000            <2> 		mov cx, 16
  9855 00007B09 668B15[96790000]    <2> 		mov dx, [winvcopydx]
  9856 00007B10 6681F90000          <2> 		cmp cx, 0
  9857 00007B15 0F8448000000        <2> 		je near canceltitlebarput
  9858 00007B1B 6681FA0000          <2> 		cmp dx, 0
  9859 00007B20 0F843D000000        <2> 		je near canceltitlebarput
  9860                              <2> 	titlebarput:
  9861 00007B26 66A1[9A790000]      <2> 		mov ax, [windowcolor]
  9862 00007B2C 668907              <2> 		mov [edi], ax
  9863 00007B2F 6681EA0200          <2> 		sub dx, 2
  9864 00007B34 81C702000000        <2> 		add edi, 2
  9865 00007B3A 6681FA0000          <2> 		cmp dx, 0
  9866 00007B3F 75E5                <2> 		jne titlebarput
  9867 00007B41 31D2                <2> 		xor edx, edx
  9868 00007B43 668B15[45580000]    <2> 		mov dx, [resolutionx2]
  9869 00007B4A 6649                <2> 		dec cx
  9870 00007B4C 662B15[96790000]    <2> 		sub dx, [winvcopydx]
  9871 00007B53 01D7                <2> 		add edi, edx
  9872 00007B55 668B15[96790000]    <2> 		mov dx, [winvcopydx]
  9873 00007B5C 6681F90000          <2> 		cmp cx, 0
  9874 00007B61 75C3                <2> 		jne titlebarput
  9875                              <2> 	canceltitlebarput:
  9876 00007B63 893D[9E790000]      <2> 		mov [windowbufloc], edi
  9877 00007B69 803D[EB230000]02    <2> 		cmp byte [termcopyon], 2
  9878 00007B70 0F841C010000        <2> 		je near winvcpst
  9879 00007B76 668B1D[C7700000]    <2> 		mov bx, [background]
  9880 00007B7D 6653                <2> 		push bx
  9881 00007B7F 6631DB              <2> 		xor bx, bx
  9882 00007B82 66891D[C7700000]    <2> 		mov [background], bx
  9883 00007B89 6631C0              <2> 		xor ax, ax
  9884 00007B8C 81C610000000        <2> 		add esi, 16
  9885 00007B92 668B15[92790000]    <2> 		mov dx, [winvcopystx]
  9886 00007B99 668B0D[94790000]    <2> 		mov cx, [winvcopysty]
  9887 00007BA0 6681E91000          <2> 		sub cx, 16
  9888 00007BA5 668B1D[9A790000]    <2> 		mov bx, [windowcolor]
  9889 00007BAC C605[097F0000]01    <2> 		mov byte [mouseselecton], 1
  9890 00007BB3 E876FBFFFF          <2> 		call showstring2	;Show window title
  9891 00007BB8 8B35[FA2C0000]      <2> 		mov esi, [usercache]
  9892 00007BBE 6681C21000          <2> 		add dx, 16
  9893 00007BC3 C605[097F0000]01    <2> 		mov byte [mouseselecton], 1
  9894 00007BCA E85FFBFFFF          <2> 		call showstring2	;Show user name
  9895 00007BCF BE[99870000]        <2> 		mov esi, computer
  9896 00007BD4 C605[097F0000]01    <2> 		mov byte [mouseselecton], 1
  9897 00007BDB E84EFBFFFF          <2> 		call showstring2	;Show computer name
  9898 00007BE0 66B85800            <2> 		mov ax, "X"
  9899 00007BE4 66BB00F8            <2> 		mov bx, 1111100000000000b
  9900 00007BE8 668B15[92790000]    <2> 		mov dx, [winvcopystx]
  9901 00007BEF 668B0D[94790000]    <2> 		mov cx, [winvcopysty]
  9902 00007BF6 6681E91000          <2> 		sub cx, 16
  9903 00007BFB 6681EA1000          <2> 		sub dx, 16
  9904 00007C00 660315[96790000]    <2> 		add dx, [winvcopydx]
  9905 00007C07 C605[097F0000]01    <2> 		mov byte [mouseselecton], 1
  9906 00007C0E 663B15[45580000]    <2> 		cmp dx, [resolutionx2]
  9907 00007C15 7305                <2> 		jae .nox
  9908 00007C17 E88EFBFFFF          <2> 		call showfontvesa
  9909                              <2> .nox:
  9910 00007C1C 668B1D[C7700000]    <2> 		mov bx, [background]
  9911 00007C23 6681EA1800          <2> 		sub dx, 24
  9912 00007C28 66B82B00            <2> 		mov ax, "+"
  9913 00007C2C 66BBE007            <2> 		mov bx, 0000011111100000b
  9914 00007C30 C605[097F0000]01    <2> 		mov byte [mouseselecton], 1
  9915 00007C37 663B15[45580000]    <2> 		cmp dx, [resolutionx2]
  9916 00007C3E 7305                <2> 		jae .noplus
  9917 00007C40 E865FBFFFF          <2> 		call showfontvesa
  9918                              <2> .noplus:
  9919 00007C45 6681EA1800          <2> 		sub dx, 24
  9920 00007C4A 66B82D00            <2> 		mov ax, "-"
  9921 00007C4E 66BBE0FF            <2> 		mov bx, 1111111111100000b
  9922 00007C52 C605[097F0000]01    <2> 		mov byte [mouseselecton], 1
  9923 00007C59 663B15[45580000]    <2> 		cmp dx, [resolutionx2]
  9924 00007C60 7305                <2> 		jae .nominus
  9925 00007C62 E843FBFFFF          <2> 		call showfontvesa
  9926                              <2> .nominus:
  9927 00007C67 6681EA1800          <2> 		sub dx, 24
  9928 00007C6C 66B83F00            <2> 		mov ax, "?"
  9929 00007C70 66BB1F00            <2> 		mov bx, 0000000000011111b
  9930 00007C74 C605[097F0000]01    <2> 		mov byte [mouseselecton], 1
  9931 00007C7B 663B15[45580000]    <2> 		cmp dx, [resolutionx2]
  9932 00007C82 7305                <2> 		jae .noquestion
  9933 00007C84 E821FBFFFF          <2> 		call showfontvesa
  9934                              <2> .noquestion:
  9935 00007C89 665B                <2> 		pop bx
  9936 00007C8B 66891D[C7700000]    <2> 		mov [background], bx
  9937                              <2> 	winvcpst:
  9938 00007C92 C3                  <2> 		ret
  9939                              <2> 
  9940                              <2> 	windowvideocopy:
  9941 00007C93 8B35[AA790000]      <2> 		mov esi, [windowinfobuf]
  9942 00007C99 668B16              <2> 		mov dx, [esi]
  9943 00007C9C 668B4E02            <2> 		mov cx, [esi + 2]
  9944 00007CA0 8B7E04              <2> 		mov edi, [esi + 4]
  9945 00007CA3 893D[9A790000]      <2> 		mov [windowcolor], edi
  9946 00007CA9 8B7E08              <2> 		mov edi, [esi + 8]
  9947 00007CAC 8B5E0C              <2> 		mov ebx, [esi + 12]
  9948 00007CAF 893D[A2790000]      <2> 		mov [windowvideobuf], edi
  9949 00007CB5 891D[A6790000]      <2> 		mov [windowvideobuf2], ebx
  9950 00007CBB 31C0                <2> 		xor eax, eax
  9951 00007CBD 31DB                <2> 		xor ebx, ebx
  9952 00007CBF 6689D0              <2> 		mov ax, dx
  9953 00007CC2 6689CB              <2> 		mov bx, cx
  9954 00007CC5 66C1E803            <2> 		shr ax, 3
  9955 00007CC9 66C1EB04            <2> 		shr bx, 4
  9956 00007CCD 66A3[AE790000]      <2> 		mov [termcol], ax
  9957 00007CD3 A2[EB250000]        <2> 		mov [charxy], al
  9958 00007CD8 881D[EC250000]      <2> 		mov [charxy + 1], bl
  9959 00007CDE 8B3D[9E790000]      <2> 		mov edi, [windowbufloc]
  9960 00007CE4 3B3D[6D570000]      <2> 		cmp edi, [physbaseptr]
  9961 00007CEA 0F8334000000        <2> 		jae near windowvideocopyset
  9962 00007CF0 31C9                <2> 		xor ecx, ecx
  9963 00007CF2 31D2                <2> 		xor edx, edx
  9964 00007CF4 668B15[92790000]    <2> 		mov dx, [winvcopystx]
  9965 00007CFB 668B0D[94790000]    <2> 		mov cx, [winvcopysty]
  9966 00007D02 8B3D[6D570000]      <2> 		mov edi, [physbaseptr]
  9967 00007D08 01D7                <2> 		add edi, edx
  9968 00007D0A 81F900000000        <2> 		cmp ecx, 0
  9969 00007D10 7412                <2> 		je windowvideocopyset
  9970                              <2> 	yrescopylp:
  9971 00007D12 31C0                <2> 		xor eax, eax
  9972 00007D14 66A1[45580000]      <2> 		mov ax, [resolutionx2]
  9973 00007D1A F7E1                <2> 		mul ecx
  9974 00007D1C 01C7                <2> 		add edi, eax
  9975 00007D1E 893D[9E790000]      <2> 		mov [windowbufloc], edi
  9976                              <2> 	windowvideocopyset:
  9977 00007D24 6631C9              <2> 		xor cx, cx
  9978 00007D27 6649                <2> 		dec cx
  9979 00007D29 66890D[FD7E0000]    <2> 		mov [charposline], cx
  9980 00007D30 89FE                <2> 		mov esi, edi
  9981 00007D32 81EE10000000        <2> 		sub esi, 16
  9982 00007D38 31D2                <2> 		xor edx, edx
  9983 00007D3A 668B15[45580000]    <2> 		mov dx, [resolutionx2]
  9984 00007D41 C1E204              <2> 		shl edx, 4
  9985 00007D44 01D6                <2> 		add esi, edx
  9986 00007D46 8B3D[A2790000]      <2> 		mov edi, [windowvideobuf]
  9987 00007D4C 81EF04000000        <2> 		sub edi, 4
  9988 00007D52 893D[FF7E0000]      <2> 		mov [charposvbuf], edi
  9989 00007D58 E97C000000          <2> 		jmp nextcharwin
  9990                              <2> 	win.write:	;adjusted this to use alpha
  9991                              <2> 				;5R, 6G, 5B
  9992                              <2> %ifdef gui.alphablending
  9993                              <2> 		push esi
  9994                              <2> 		push bx
  9995                              <2> 		push cx
  9996                              <2> 		push dx
  9997                              <2> %ifdef gui.background
  9998                              <2> 		mov esi, edi
  9999                              <2> 		sub esi, [physbaseptr]
 10000                              <2> 		add esi, [backgroundimage]
 10001                              <2> 		cmp dword [backgroundimage], 0
 10002                              <2> 		jne .red
 10003                              <2> %endif
 10004                              <2> 		mov esi, background
 10005                              <2> 	.red:
 10006                              <2> 		mov cx, [esi]
 10007                              <2> 		shr cx, 11
 10008                              <2> 		mov bx, ax
 10009                              <2> 		shr bx, 11
 10010                              <2> 		add cx, bx
 10011                              <2> 		add cx, bx
 10012                              <2> 		add cx, bx
 10013                              <2> 		shr cx, 2
 10014                              <2> 		shl cx, 11
 10015                              <2> 		mov dx, cx
 10016                              <2> 	.green:
 10017                              <2> 		mov cx, [esi]
 10018                              <2> 		shl cx, 5
 10019                              <2> 		shr cx, 10
 10020                              <2> 		mov bx, ax
 10021                              <2> 		shl bx, 5
 10022                              <2> 		shr bx, 10
 10023                              <2> 		add cx, bx
 10024                              <2> 		add cx, bx
 10025                              <2> 		add cx, bx
 10026                              <2> 		shr cx, 2
 10027                              <2> 		shl cx, 5
 10028                              <2> 		add dx, cx
 10029                              <2> 	.blue:
 10030                              <2> 		mov cx, [esi]
 10031                              <2> 		shl cx, 11
 10032                              <2> 		shr cx, 11
 10033                              <2> 		mov bx, ax
 10034                              <2> 		shl bx, 11
 10035                              <2> 		shr bx, 11
 10036                              <2> 		add cx, bx
 10037                              <2> 		add cx, bx
 10038                              <2> 		add cx, bx
 10039                              <2> 		shr cx, 2
 10040                              <2> 		add dx, cx
 10041                              <2> 		mov [edi], dx
 10042                              <2> 		pop dx
 10043                              <2> 		pop cx
 10044                              <2> 		pop bx
 10045                              <2> 		pop esi
 10046                              <2> %else
 10047 00007D5D 668907              <2> 		mov [edi], ax
 10048                              <2> %endif
 10049 00007D60 C3                  <2> 		ret
 10050                              <2> 	copywindow:
 10051 00007D61 B201                <2> 		mov dl, 1
 10052 00007D63 D0C6                <2> 		rol dh, 1
 10053 00007D65 20F2                <2> 		and dl, dh
 10054 00007D67 66813D[9B770000]80- <2> 		cmp word [colorcache], 0x80
 10055 00007D6F 00                  <2>
 10056 00007D70 7320                <2> 		jae switchwincolors
 10057 00007D72 66A1[9C790000]      <2> 		mov ax, [windowcolor + 2]
 10058 00007D78 E8E0FFFFFF          <2> 		call win.write
 10059 00007D7D 80FA00              <2> 		cmp dl, 0
 10060 00007D80 742B                <2> 		je nowritewin
 10061 00007D82 66A1[9A790000]      <2> 		mov ax, [windowcolor]
 10062 00007D88 E8D0FFFFFF          <2> 		call win.write
 10063 00007D8D E91B000000          <2> 		jmp nowritewin
 10064                              <2> 	switchwincolors:
 10065 00007D92 66A1[9A790000]      <2> 		mov ax, [windowcolor]
 10066 00007D98 E8C0FFFFFF          <2> 		call win.write
 10067 00007D9D 80FA00              <2> 		cmp dl, 0
 10068 00007DA0 740B                <2> 		je nowritewin
 10069 00007DA2 66A1[9C790000]      <2> 		mov ax, [windowcolor + 2]
 10070 00007DA8 E8B0FFFFFF          <2> 		call win.write
 10071                              <2> 	nowritewin:
 10072 00007DAD 81C702000000        <2> 		add edi, 2
 10073 00007DB3 FEC1                <2> 		inc cl
 10074 00007DB5 80F908              <2> 		cmp cl, 8
 10075 00007DB8 75A7                <2> 		jne copywindow
 10076 00007DBA 43                  <2> 		inc ebx
 10077 00007DBB 30C9                <2> 		xor cl, cl
 10078 00007DBD 31D2                <2> 		xor edx, edx
 10079 00007DBF 668B15[45580000]    <2> 		mov dx, [resolutionx2]
 10080 00007DC6 01D6                <2> 		add esi, edx
 10081 00007DC8 89F7                <2> 		mov edi, esi
 10082 00007DCA 8AB3[188A0000]      <2> 		mov dh, [fonts + ebx]
 10083 00007DD0 D0CE                <2> 		ror dh, 1
 10084 00007DD2 FEC5                <2> 		inc ch
 10085 00007DD4 80FD10              <2> 		cmp ch, 16
 10086 00007DD7 7588                <2> 		jne copywindow
 10087                              <2> 	nextcharwin:
 10088 00007DD9 6631C9              <2> 		xor cx, cx
 10089 00007DDC 8B3D[FF7E0000]      <2> 		mov edi, [charposvbuf]
 10090 00007DE2 81C704000000        <2> 		add edi, 4
 10091 00007DE8 3B3D[B0790000]      <2> 		cmp edi, [wincopyendpos]
 10092 00007DEE 0F83F2000000        <2> 		jae near donewincopynow
 10093 00007DF4 668B5F02            <2> 		mov bx, [edi + 2]
 10094 00007DF8 6681FB0000          <2> 		cmp bx, 0
 10095 00007DFD 7508                <2> 		jne nofixcolorwin
 10096 00007DFF 66BB0700            <2> 		mov bx, 7
 10097 00007E03 66895F02            <2> 		mov [edi + 2], bx
 10098                              <2> 	nofixcolorwin:
 10099 00007E07 66891D[9B770000]    <2> 		mov [colorcache], bx
 10100 00007E0E 8B1F                <2> 		mov ebx, [edi]
 10101 00007E10 893D[FF7E0000]      <2> 		mov [charposvbuf], edi
 10102 00007E16 813D[A6790000]0000- <2> 		cmp dword [windowvideobuf2], 0
 10103 00007E1E 0000                <2>
 10104 00007E20 7455                <2> 		je noskipcharcopy
 10105 00007E22 2B3D[A2790000]      <2> 		sub edi, [windowvideobuf]
 10106 00007E28 033D[A6790000]      <2> 		add edi, [windowvideobuf2]
 10107 00007E2E 8B07                <2> 		mov eax, [edi]
 10108 00007E30 39D8                <2> 		cmp eax, ebx
 10109 00007E32 7543                <2> 		jne noskipcharcopy
 10110                              <2> 	skipcharcopy:
 10111 00007E34 81C610000000        <2> 		add esi, 16
 10112 00007E3A 668B0D[FD7E0000]    <2> 		mov cx, [charposline]
 10113 00007E41 6641                <2> 		inc cx
 10114 00007E43 66890D[FD7E0000]    <2> 		mov [charposline], cx
 10115 00007E4A 663B0D[AE790000]    <2> 		cmp cx, [termcol]
 10116 00007E51 7286                <2> 		jb nextcharwin
 10117 00007E53 6631C9              <2> 		xor cx, cx
 10118 00007E56 66890D[FD7E0000]    <2> 		mov [charposline], cx
 10119 00007E5D 31D2                <2> 		xor edx, edx
 10120 00007E5F 668B15[45580000]    <2> 		mov dx, [resolutionx2]
 10121 00007E66 C1E204              <2> 		shl edx, 4
 10122 00007E69 662B15[96790000]    <2> 		sub dx, [winvcopydx]
 10123 00007E70 01D6                <2> 		add esi, edx
 10124 00007E72 E962FFFFFF          <2> 		jmp nextcharwin
 10125                              <2> 	noskipcharcopy:
 10126 00007E77 891F                <2> 		mov [edi], ebx
 10127 00007E79 8B3D[FF7E0000]      <2> 		mov edi, [charposvbuf]
 10128 00007E7F C1E310              <2> 		shl ebx, 16
 10129 00007E82 C1EB0C              <2> 		shr ebx, 12
 10130 00007E85 31D2                <2> 		xor edx, edx
 10131 00007E87 668B15[45580000]    <2> 		mov dx, [resolutionx2]
 10132 00007E8E C1E204              <2> 		shl edx, 4
 10133 00007E91 29D6                <2> 		sub esi, edx
 10134 00007E93 81C610000000        <2> 		add esi, 16
 10135 00007E99 89F7                <2> 		mov edi, esi
 10136 00007E9B 668B0D[FD7E0000]    <2> 		mov cx, [charposline]
 10137 00007EA2 6641                <2> 		inc cx
 10138 00007EA4 663B0D[AE790000]    <2> 		cmp cx, [termcol]
 10139 00007EAB 7317                <2> 		jae fixwindowcopy
 10140 00007EAD 66890D[FD7E0000]    <2> 		mov [charposline], cx
 10141 00007EB4 6631C9              <2> 		xor cx, cx
 10142 00007EB7 8AB3[188A0000]      <2> 		mov dh, [fonts + ebx]
 10143 00007EBD D0CE                <2> 		ror dh, 1
 10144 00007EBF E99DFEFFFF          <2> 		jmp copywindow
 10145                              <2> fixwindowcopy:
 10146 00007EC4 6631C9              <2> 		xor cx, cx
 10147 00007EC7 66890D[FD7E0000]    <2> 		mov [charposline], cx
 10148 00007ECE 662B15[96790000]    <2> 		sub dx, [winvcopydx]
 10149 00007ED5 01D6                <2> 		add esi, edx
 10150 00007ED7 89F7                <2> 		mov edi, esi
 10151 00007ED9 8AB3[188A0000]      <2> 		mov dh, [fonts + ebx]
 10152 00007EDF D0CE                <2> 		ror dh, 1
 10153 00007EE1 E97BFEFFFF          <2> 		jmp copywindow
 10154                              <2> donewincopynow:
 10155 00007EE6 803D[EB230000]01    <2> 		cmp byte [termcopyon], 1
 10156 00007EED 7506                <2> 		jne forgetresetstuff
 10157 00007EEF E8DFAAFFFF          <2> 		call switchtermcursor
 10158 00007EF4 61                  <2> 		popa
 10159                              <2> forgetresetstuff:
 10160 00007EF5 C605[EB230000]00    <2> 		mov byte [termcopyon], 0
 10161 00007EFC C3                  <2> 		ret
 10162                              <2> 		
 10163 00007EFD 0000                <2> charposline dw 0
 10164 00007EFF 00000000            <2> charposvbuf dw 0,0
 10165                              <1> 				
 10166 00007F03 00                  <1> copygui db 0
 10167 00007F04 00                  <1> graphicsset db 0
 10168 00007F05 0000                <1> graphicspos db 0,0
 10169 00007F07 00                  <1> showcursorfonton db 0
 10170 00007F08 00                  <1> savefonton db 0
 10171 00007F09 00                  <1> mouseselecton db 0
 10172                              <1> 
 10173 00007F0A 00                  <1> pbutton db 0
 10174 00007F0B 00                  <1> pLBUTTON db 0
 10175 00007F0C 00                  <1> pRBUTTON db 0
 10176 00007F0D 00000000            <1> dragging dw 0,0
 10177 00007F11 0000000000000000    <1> lastpos dw 0,0,0,0
 10178 00007F19 00000000            <1> colorbuf dw 0,0
 10179                              <1> 	
 10180                              <1> 	clickicon:
 10181 00007F1D B001                <1> 		mov al, 1
 10182 00007F1F A2[0A7F0000]        <1> 		mov [pbutton], al
 10183 00007F24 A0[0B7F0000]        <1> 		mov al, [pLBUTTON]
 10184 00007F29 2205[4C5B0000]      <1> 		and al, [LBUTTON]
 10185 00007F2F 8A25[0C7F0000]      <1> 		mov ah, [pRBUTTON]
 10186 00007F35 2225[4D5B0000]      <1> 		and ah, [RBUTTON]
 10187 00007F3B 08E0                <1> 		or al, ah
 10188 00007F3D 3C00                <1> 		cmp al, 0
 10189 00007F3F 741B                <1> 		je nodragclick
 10190 00007F41 813D[0D7F0000]0100- <1> 		cmp dword [dragging], 1
 10191 00007F49 0000                <1>
 10192 00007F4B 732F                <1> 		jae dragclick
 10193 00007F4D C705[0D7F0000]0100- <1> 		mov dword [dragging], 1
 10194 00007F55 0000                <1>
 10195 00007F57 E920000000          <1> 		jmp dragclick
 10196                              <1> 	nodragclick:
 10197 00007F5C 31C0                <1> 		xor eax, eax
 10198 00007F5E A3[0D7F0000]        <1> 		mov dword [dragging], eax
 10199 00007F63 A2[0A7F0000]        <1> 		mov [pbutton], al
 10200 00007F68 A0[4C5B0000]        <1> 		mov al, [LBUTTON]
 10201 00007F6D A2[0B7F0000]        <1> 		mov [pLBUTTON], al
 10202 00007F72 A0[4D5B0000]        <1> 		mov al, [RBUTTON]
 10203 00007F77 A2[0C7F0000]        <1> 		mov [pRBUTTON], al
 10204                              <1> 	dragclick:
 10205 00007F7C 6631C0              <1> 		xor ax, ax
 10206 00007F7F BE[75B90300]        <1> 		mov esi, graphicstable
 10207 00007F84 C705[63870000]0000- <1> 		mov dword [codepointer], 0
 10208 00007F8C 0000                <1>
 10209                              <1> 	clicon2:
 10210 00007F8E 31D2                <1> 		xor edx, edx
 10211 00007F90 31C9                <1> 		xor ecx, ecx
 10212 00007F92 66813E0100          <1> 		cmp word [esi], 1
 10213 00007F97 0F841B000000        <1> 		je near iconselect
 10214 00007F9D 66813E0200          <1> 		cmp word [esi], 2
 10215 00007FA2 0F8472010000        <1> 		je near textselected
 10216 00007FA8 66813E0300          <1> 		cmp word [esi], 3
 10217 00007FAD 0F84CA020000        <1> 		je near windowselect
 10218 00007FB3 E913040000          <1> 		jmp nexticonsel
 10219                              <1> 	iconselect:
 10220 00007FB8 668B5606            <1> 		mov dx, [esi + 6]
 10221 00007FBC 6689D0              <1> 		mov ax, dx
 10222 00007FBF 668B4E08            <1> 		mov cx, [esi + 8]
 10223 00007FC3 6689CB              <1> 		mov bx, cx
 10224 00007FC6 6681C32000          <1> 		add bx, 32
 10225 00007FCB 6601D0              <1> 		add ax, dx
 10226 00007FCE 813D[0D7F0000]0100- <1> 		cmp dword [dragging], 1
 10227 00007FD6 0000                <1>
 10228 00007FD8 746F                <1> 		je dragicon
 10229 00007FDA 813D[0D7F0000]0000- <1> 		cmp dword [dragging], 0
 10230 00007FE2 0000                <1>
 10231 00007FE4 7411                <1> 		je nodragiconcheck
 10232 00007FE6 3935[0D7F0000]      <1> 		cmp dword [dragging], esi
 10233 00007FEC 0F85D9030000        <1> 		jne near nexticonsel
 10234 00007FF2 E952000000          <1> 		jmp dragicon
 10235                              <1> 	nodragiconcheck:
 10236 00007FF7 663905[3B5A0000]    <1> 		cmp [mousecursorposition], ax
 10237 00007FFE 0F82C7030000        <1> 		jb near nexticonsel
 10238 00008004 66054000            <1> 		add ax, 64
 10239 00008008 663905[3B5A0000]    <1> 		cmp [mousecursorposition], ax
 10240 0000800F 0F87B6030000        <1> 		ja near nexticonsel
 10241 00008015 6629D0              <1> 		sub ax, dx
 10242 00008018 66390D[3D5A0000]    <1> 		cmp [mousecursorposition + 2], cx
 10243 0000801F 0F82A6030000        <1> 		jb near nexticonsel
 10244 00008025 66391D[3D5A0000]    <1> 		cmp [mousecursorposition + 2], bx
 10245 0000802C 0F8799030000        <1> 		ja near nexticonsel
 10246 00008032 668B460A            <1> 		mov ax, [esi + 10]
 10247 00008036 66250100            <1> 		and ax, 1
 10248 0000803A 663D0100            <1> 		cmp ax, 1
 10249 0000803E 0F84B6000000        <1> 		je near unselecticon
 10250 00008044 E98D000000          <1> 		jmp nodragicon
 10251                              <1> 	dragicon:
 10252 00008049 663905[375A0000]    <1> 		cmp [lastmouseposition], ax
 10253 00008050 0F8275030000        <1> 		jb near nexticonsel
 10254 00008056 66054000            <1> 		add ax, 64
 10255 0000805A 663905[375A0000]    <1> 		cmp [lastmouseposition], ax
 10256 00008061 0F8764030000        <1> 		ja near nexticonsel
 10257 00008067 6629D0              <1> 		sub ax, dx
 10258 0000806A 66390D[395A0000]    <1> 		cmp [lastmouseposition + 2], cx
 10259 00008071 0F8254030000        <1> 		jb near nexticonsel
 10260 00008077 66391D[395A0000]    <1> 		cmp [lastmouseposition + 2], bx
 10261 0000807E 0F8747030000        <1> 		ja near nexticonsel
 10262 00008084 668B460A            <1> 		mov ax, [esi + 10]
 10263 00008088 2410                <1> 		and al, 00010000b
 10264 0000808A 3C10                <1> 		cmp al, 00010000b
 10265 0000808C 7448                <1> 		je nodragicon
 10266 0000808E 8935[0D7F0000]      <1> 		mov [dragging], esi
 10267 00008094 66D1E2              <1> 		shl dx, 1
 10268 00008097 662B15[375A0000]    <1> 		sub dx, [lastmouseposition]
 10269 0000809E 660315[3B5A0000]    <1> 		add dx, [mousecursorposition]
 10270 000080A5 66D1EA              <1> 		shr dx, 1
 10271 000080A8 66030D[3D5A0000]    <1> 		add cx, [mousecursorposition + 2]
 10272 000080AF 662B0D[395A0000]    <1> 		sub cx, [lastmouseposition + 2]
 10273 000080B6 663B15[45580000]    <1> 		cmp dx, [resolutionx2]
 10274 000080BD 7607                <1> 		jbe chkyresdrgicn
 10275 000080BF 668B15[3B5A0000]    <1> 		mov dx, [mousecursorposition]
 10276                              <1> 	chkyresdrgicn:
 10277 000080C6 663B0D[59570000]    <1> 		cmp cx, [resolutiony]
 10278 000080CD 7607                <1> 		jbe nodragicon
 10279 000080CF 668B0D[3D5A0000]    <1> 		mov cx, [mousecursorposition + 2]
 10280                              <1> 	nodragicon:
 10281 000080D6 66814E0A0100        <1> 		or word [esi + 10], 1
 10282 000080DC 8B5E0C              <1> 		mov ebx, [esi + 12]
 10283 000080DF 668B460A            <1> 		mov ax, [esi + 10]
 10284 000080E3 8B7602              <1> 		mov esi, [esi + 2]
 10285 000080E6 C705[63870000]0000- <1> 		mov dword [codepointer], 0
 10286 000080EE 0000                <1>
 10287 000080F0 E885EDFFFF          <1> 		call showicon
 10288 000080F5 E9EA020000          <1> 		jmp doneiconsel
 10289                              <1> 	unselecticon:
 10290 000080FA 6681660AFEFF        <1> 		and word [esi + 10], 0xFFFE
 10291 00008100 8B5E0C              <1> 		mov ebx, [esi + 12]
 10292 00008103 668B460A            <1> 		mov ax, [esi + 10]
 10293 00008107 8B7602              <1> 		mov esi, [esi + 2]
 10294 0000810A 891D[63870000]      <1> 		mov [codepointer], ebx
 10295 00008110 E865EDFFFF          <1> 		call showicon
 10296 00008115 E9CA020000          <1> 		jmp doneiconsel
 10297                              <1> 	textselected:
 10298 0000811A 8B5E02              <1> 		mov ebx, [esi + 2]
 10299 0000811D 668B5606            <1> 		mov dx, [esi + 6]
 10300 00008121 6689D0              <1> 		mov ax, dx
 10301 00008124 668B4E08            <1> 		mov cx, [esi + 8]
 10302                              <1> 	lengthtesttext:
 10303 00008128 803B00              <1> 		cmp byte [ebx], 0
 10304 0000812B 740A                <1> 		je donetesttextlength
 10305 0000812D 43                  <1> 		inc ebx
 10306 0000812E 66051000            <1> 		add ax, 16
 10307 00008132 E9F1FFFFFF          <1> 		jmp lengthtesttext
 10308                              <1> 	donetesttextlength:
 10309 00008137 6689CB              <1> 		mov bx, cx
 10310 0000813A 6681C30F00          <1> 		add bx, 15
 10311 0000813F 813D[0D7F0000]0100- <1> 		cmp dword [dragging], 1
 10312 00008147 0000                <1>
 10313 00008149 7468                <1> 		je dragtext
 10314 0000814B 813D[0D7F0000]0000- <1> 		cmp dword [dragging], 0
 10315 00008153 0000                <1>
 10316 00008155 7411                <1> 		je nodragtextcheck
 10317 00008157 3935[0D7F0000]      <1> 		cmp dword [dragging], esi
 10318 0000815D 0F8568020000        <1> 		jne near nexticonsel
 10319 00008163 E94B000000          <1> 		jmp dragtext
 10320                              <1> 	nodragtextcheck:
 10321 00008168 663915[3B5A0000]    <1> 		cmp [mousecursorposition], dx
 10322 0000816F 0F8256020000        <1> 		jb near nexticonsel
 10323 00008175 663905[3B5A0000]    <1> 		cmp [mousecursorposition], ax
 10324 0000817C 0F8749020000        <1> 		ja near nexticonsel
 10325 00008182 66390D[3D5A0000]    <1> 		cmp [mousecursorposition + 2], cx
 10326 00008189 0F823C020000        <1> 		jb near nexticonsel
 10327 0000818F 66391D[3D5A0000]    <1> 		cmp [mousecursorposition + 2], bx
 10328 00008196 0F872F020000        <1> 		ja near nexticonsel
 10329 0000819C 668B460A            <1> 		mov ax, [esi + 10]
 10330 000081A0 66250100            <1> 		and ax, 1
 10331 000081A4 663D0100            <1> 		cmp ax, 1
 10332 000081A8 0F84AB000000        <1> 		je near unselecttext
 10333 000081AE E986000000          <1> 		jmp nodragtext
 10334                              <1> 	dragtext:
 10335 000081B3 663915[375A0000]    <1> 		cmp [lastmouseposition], dx
 10336 000081BA 0F820B020000        <1> 		jb near nexticonsel
 10337 000081C0 663905[375A0000]    <1> 		cmp [lastmouseposition], ax
 10338 000081C7 0F87FE010000        <1> 		ja near nexticonsel
 10339 000081CD 66390D[395A0000]    <1> 		cmp [lastmouseposition + 2], cx
 10340 000081D4 0F82F1010000        <1> 		jb near nexticonsel
 10341 000081DA 66391D[395A0000]    <1> 		cmp [lastmouseposition + 2], bx
 10342 000081E1 0F87E4010000        <1> 		ja near nexticonsel
 10343 000081E7 668B460A            <1> 		mov ax, [esi + 10]
 10344 000081EB 2410                <1> 		and al, 00010000b
 10345 000081ED 663D1000            <1> 		cmp ax, 00010000b
 10346 000081F1 0F8442000000        <1> 		je near nodragtext
 10347 000081F7 8935[0D7F0000]      <1> 		mov [dragging], esi
 10348 000081FD 662B15[375A0000]    <1> 		sub dx, [lastmouseposition]
 10349 00008204 660315[3B5A0000]    <1> 		add dx, [mousecursorposition]
 10350 0000820B 66030D[3D5A0000]    <1> 		add cx, [mousecursorposition + 2]
 10351 00008212 662B0D[395A0000]    <1> 		sub cx, [lastmouseposition + 2]
 10352 00008219 663B15[45580000]    <1> 		cmp dx, [resolutionx2]
 10353 00008220 7607                <1> 		jbe chkyresdrgtxt
 10354 00008222 668B15[3B5A0000]    <1> 		mov dx, [mousecursorposition]
 10355                              <1> 	chkyresdrgtxt:
 10356 00008229 663B0D[59570000]    <1> 		cmp cx, [resolutiony]
 10357 00008230 7607                <1> 		jbe nodragtext
 10358 00008232 668B0D[3D5A0000]    <1> 		mov cx, [mousecursorposition + 2]
 10359                              <1> 	nodragtext:
 10360 00008239 66814E0A0100        <1> 		or word [esi + 10], 1
 10361 0000823F 8B5E0C              <1> 		mov ebx, [esi + 12]
 10362 00008242 891D[63870000]      <1> 		mov [codepointer], ebx
 10363 00008248 668B460A            <1> 		mov ax, [esi + 10]
 10364 0000824C 8B7602              <1> 		mov esi, [esi + 2]
 10365 0000824F E8C7F4FFFF          <1> 		call showstring
 10366 00008254 E98B010000          <1> 		jmp doneiconsel
 10367                              <1> 	unselecttext:
 10368 00008259 6681660AFEFF        <1> 		and word [esi + 10], 0xFFFE
 10369 0000825F 8B5E0C              <1> 		mov ebx, [esi + 12]
 10370 00008262 668B460A            <1> 		mov ax, [esi + 10]
 10371 00008266 8B7602              <1> 		mov esi, [esi + 2]
 10372 00008269 C705[63870000]0000- <1> 		mov dword [codepointer], 0
 10373 00008271 0000                <1>
 10374 00008273 E8A3F4FFFF          <1> 		call showstring
 10375 00008278 E967010000          <1> 		jmp doneiconsel
 10376                              <1> windowselect:
 10377 0000827D 8B7E02              <1> 		mov edi, [esi + 2]
 10378 00008280 668B5606            <1> 		mov dx, [esi + 6]
 10379 00008284 6689D0              <1> 		mov ax, dx
 10380 00008287 668B4E08            <1> 		mov cx, [esi + 8]
 10381 0000828B 6689CB              <1> 		mov bx, cx
 10382 0000828E 6681C31000          <1> 		add bx, 16
 10383 00008293 813D[0D7F0000]0100- <1> 		cmp dword [dragging], 1
 10384 0000829B 0000                <1>
 10385 0000829D 746D                <1> 		je dragwin
 10386 0000829F 813D[0D7F0000]0000- <1> 		cmp dword [dragging], 0
 10387 000082A7 0000                <1>
 10388 000082A9 7411                <1> 		je nodragwincheck
 10389 000082AB 3935[0D7F0000]      <1> 		cmp dword [dragging], esi
 10390 000082B1 0F8514010000        <1> 		jne near nexticonsel
 10391 000082B7 E950000000          <1> 		jmp dragwin
 10392                              <1> 	nodragwincheck:
 10393 000082BC 663905[3B5A0000]    <1> 		cmp [mousecursorposition], ax
 10394 000082C3 0F8202010000        <1> 		jb near nexticonsel
 10395 000082C9 660307              <1> 		add ax, [edi]
 10396 000082CC 660307              <1> 		add ax, [edi]
 10397 000082CF 663905[3B5A0000]    <1> 		cmp [mousecursorposition], ax
 10398 000082D6 0F87EF000000        <1> 		ja near nexticonsel
 10399 000082DC 66390D[3D5A0000]    <1> 		cmp [mousecursorposition + 2], cx
 10400 000082E3 0F82E2000000        <1> 		jb near nexticonsel
 10401 000082E9 66391D[3D5A0000]    <1> 		cmp [mousecursorposition + 2], bx
 10402 000082F0 0F87D5000000        <1> 		ja near nexticonsel
 10403 000082F6 662D1400            <1> 		sub ax, 20
 10404 000082FA 663905[3B5A0000]    <1> 		cmp [mousecursorposition], ax
 10405 00008301 0F87A4000000        <1> 		ja near killwin
 10406 00008307 E98B000000          <1> 		jmp nodragwin
 10407                              <1> 	dragwin:
 10408 0000830C 663905[375A0000]    <1> 		cmp [lastmouseposition], ax
 10409 00008313 0F82B2000000        <1> 		jb near nexticonsel
 10410 00008319 660307              <1> 		add ax, [edi]
 10411 0000831C 660307              <1> 		add ax, [edi]
 10412 0000831F 663905[375A0000]    <1> 		cmp [lastmouseposition], ax
 10413 00008326 0F879F000000        <1> 		ja near nexticonsel
 10414 0000832C 66390D[395A0000]    <1> 		cmp [lastmouseposition + 2], cx
 10415 00008333 0F8292000000        <1> 		jb near nexticonsel
 10416 00008339 66391D[395A0000]    <1> 		cmp [lastmouseposition + 2], bx
 10417 00008340 0F8785000000        <1> 		ja near nexticonsel
 10418 00008346 8935[0D7F0000]      <1> 		mov [dragging], esi
 10419 0000834C 803D[74840000]01    <1> 		cmp byte [windrag], 1
 10420 00008353 7706                <1> 		ja .nochangewindrag
 10421 00008355 FE05[74840000]      <1> 		inc byte [windrag]
 10422                              <1> 	.nochangewindrag:
 10423 0000835B 662B15[375A0000]    <1> 		sub dx, [lastmouseposition]
 10424 00008362 660315[3B5A0000]    <1> 		add dx, [mousecursorposition]
 10425 00008369 66030D[3D5A0000]    <1> 		add cx, [mousecursorposition + 2]
 10426 00008370 662B0D[395A0000]    <1> 		sub cx, [lastmouseposition + 2]
 10427 00008377 663B15[45580000]    <1> 		cmp dx, [resolutionx2]
 10428 0000837E 7607                <1> 		jbe chkyresdrgwin
 10429 00008380 668B15[3B5A0000]    <1> 		mov dx, [mousecursorposition]
 10430                              <1> 	chkyresdrgwin:
 10431 00008387 663B0D[59570000]    <1> 		cmp cx, [resolutiony]
 10432 0000838E 7607                <1> 		jbe nodragwin
 10433 00008390 668B0D[3D5A0000]    <1> 		mov cx, [mousecursorposition + 2]
 10434                              <1> 	nodragwin:
 10435 00008397 8B5E0C              <1> 		mov ebx, [esi + 12]
 10436 0000839A 668B460A            <1> 		mov ax, [esi + 10]
 10437 0000839E 8B7602              <1> 		mov esi, [esi + 2]
 10438 000083A1 E80EF6FFFF          <1> 		call showwindow
 10439 000083A6 E939000000          <1> 		jmp doneiconsel
 10440                              <1> 	killwin:
 10441 000083AB 66C7060000          <1> 		mov word [esi], 0
 10442 000083B0 C605[EA230000]00    <1> 		mov byte [termguion], 0
 10443 000083B7 E8BFECFFFF          <1> 		call guiclear
 10444 000083BC E80AEDFFFF          <1> 		call reloadallgraphics
 10445 000083C1 E851EAFFFF          <1> 		call switchmousepos2 ;Copy what is now under the mouse
 10446 000083C6 E92AE6FFFF          <1> 		jmp guistart
 10447                              <1> 	nexticonsel:
 10448 000083CB 6681660AFEFF        <1> 		and word [esi + 10], 0xFFFE
 10449 000083D1 81C610000000        <1> 		add esi, 16
 10450 000083D7 81FE[75BB0300]      <1> 		cmp esi, graphicstableend
 10451 000083DD 7305                <1> 		jae doneiconsel
 10452 000083DF E9AAFBFFFF          <1> 		jmp clicon2
 10453                              <1> 	doneiconsel:
 10454 000083E4 813D[0D7F0000]0100- <1> 		cmp dword [dragging], 1
 10455 000083EC 0000                <1>
 10456 000083EE 731A                <1> 		jae doneiconsel2
 10457 000083F0 A2[74840000]        <1> 		mov [windrag], al
 10458 000083F5 813D[63870000]0000- <1> 		cmp dword [codepointer], 0
 10459 000083FD 0000                <1>
 10460 000083FF 7409                <1> 		je doneiconsel2
 10461 00008401 8B1D[63870000]      <1> 		mov ebx, [codepointer]
 10462 00008407 FFD3                <1> 		call ebx
 10463 00008409 C3                  <1> 		ret
 10464                              <1> 	doneiconsel2:
 10465 0000840A A0[4C5B0000]        <1> 		mov al, [LBUTTON]
 10466 0000840F A2[0B7F0000]        <1> 		mov [pLBUTTON], al
 10467 00008414 A0[4D5B0000]        <1> 		mov al, [RBUTTON]
 10468 00008419 A2[0C7F0000]        <1> 		mov [pRBUTTON], al
 10469 0000841E 813D[0D7F0000]0100- <1> 		cmp dword [dragging], 1
 10470 00008426 0000                <1>
 10471 00008428 0F8618000000        <1> 		jbe near noreloadgraphicsclick
 10472 0000842E E8E4E9FFFF          <1> 		call switchmousepos2
 10473 00008433 803D[74840000]01    <1> 		cmp byte [windrag], 1
 10474 0000843A 7305                <1> 		jae noclearcursorcl
 10475 0000843C E81EE9FFFF          <1> 		call clearmousecursor
 10476                              <1> noclearcursorcl:
 10477 00008441 E885ECFFFF          <1> 		call reloadallgraphics
 10478                              <1> noreloadgraphicsclick:
 10479 00008446 30E4                <1> 		xor ah, ah
 10480 00008448 31C9                <1> 		xor ecx, ecx
 10481 0000844A 31D2                <1> 		xor edx, edx
 10482 0000844C B001                <1> 		mov al, 1
 10483 0000844E 668B15[3B5A0000]    <1> 		mov dx, [mousecursorposition]
 10484 00008455 668B0D[3D5A0000]    <1> 		mov cx, [mousecursorposition + 2]
 10485 0000845C 66BBE738            <1> 		mov bx, 0011100011100111b
 10486 00008460 C605[077F0000]01    <1> 		mov byte [showcursorfonton], 1
 10487 00008467 E83EF3FFFF          <1> 		call showfontvesa
 10488 0000846C C605[077F0000]00    <1> 		mov byte [showcursorfonton], 0
 10489 00008473 C3                  <1> 		ret
 10490 00008474 00                  <1> windrag db 0
 10491 00008475 00000000            <1> lastdrag dw 0,0
 10492 00008479 00000000            <1> grpctblpos dw 0,0
 10493                              <1> 
 10494                              <1> 
 10495                              <1> 
 10496 0000847D 00<rept>            <1> grphbuf times 16 db 0
 10497                              <1> 	graphicsadd:
 10498 0000848D BF[75B90300]        <1> 		mov edi, graphicstable
 10499                              <1> 	shwgrph1:
 10500 00008492 397702              <1> 		cmp dword [edi + 2], esi
 10501 00008495 7417                <1> 		je showgraphicsreplace2
 10502 00008497 81C710000000        <1> 		add edi, 16
 10503 0000849D 81FF[75BB0300]      <1> 		cmp edi, graphicstableend
 10504 000084A3 0F833A020000        <1> 		jae near showgraphicsnew
 10505 000084A9 E9E4FFFFFF          <1> 		jmp shwgrph1
 10506                              <1> 	showgraphicsreplace2:
 10507 000084AE 8935[7F840000]      <1> 		mov [grphbuf + 2], esi
 10508 000084B4 668915[83840000]    <1> 		mov [grphbuf + 6], dx
 10509 000084BB 66890D[85840000]    <1> 		mov [grphbuf + 8], cx
 10510 000084C2 891D[89840000]      <1> 		mov [grphbuf + 12], ebx
 10511 000084C8 30FF                <1> 		xor bh, bh
 10512 000084CA 88E3                <1> 		mov bl, ah
 10513 000084CC 30E4                <1> 		xor ah, ah
 10514 000084CE 66A3[87840000]      <1> 		mov [grphbuf + 10], ax	
 10515 000084D4 66891D[7D840000]    <1> 		mov [grphbuf], bx
 10516 000084DB 66A1[7D840000]      <1> 		mov ax, [grphbuf]
 10517 000084E1 663D0100            <1> 		cmp ax, 1
 10518 000084E5 0F8419000000        <1> 		je near replaceicon
 10519 000084EB 663D0200            <1> 		cmp ax, 2
 10520 000084EF 0F8493000000        <1> 		je near replacestring
 10521 000084F5 663D0300            <1> 		cmp ax, 3
 10522 000084F9 0F840F010000        <1> 		je near replacewindow
 10523 000084FF E9BC010000          <1> 		jmp showgraphicsreplace
 10524                              <1> 	replaceicon:
 10525 00008504 893D[117F0000]      <1> 		mov [lastpos], edi
 10526 0000850A 8935[157F0000]      <1> 		mov [lastpos + 4], esi
 10527 00008510 8B7702              <1> 		mov esi, [edi + 2]
 10528 00008513 668B5F0C            <1> 		mov bx, [edi + 12]
 10529 00008517 668B5706            <1> 		mov dx, [edi + 6]
 10530 0000851B 668B4F08            <1> 		mov cx, [edi + 8]
 10531 0000851F 668B06              <1> 		mov ax, [esi]
 10532 00008522 66A3[197F0000]      <1> 		mov [colorbuf], ax
 10533 00008528 66A1[C7700000]      <1> 		mov ax, [background]
 10534 0000852E 668906              <1> 		mov [esi], ax
 10535 00008531 8B5F0C              <1> 		mov ebx, [edi + 12]
 10536 00008534 668B470A            <1> 		mov ax, [edi + 10]
 10537 00008538 2401                <1> 		and al, 1
 10538 0000853A A2[67870000]        <1> 		mov [iconselected], al
 10539 0000853F 668B470A            <1> 		mov ax, [edi + 10]
 10540 00008543 E845E9FFFF          <1> 		call showicon2
 10541 00008548 8B3D[117F0000]      <1> 		mov edi, [lastpos]
 10542 0000854E 8B7702              <1> 		mov esi, [edi + 2]
 10543 00008551 66A1[197F0000]      <1> 		mov ax, [colorbuf]
 10544 00008557 668906              <1> 		mov [esi], ax
 10545 0000855A 8B35[157F0000]      <1> 		mov esi, [lastpos + 4]
 10546 00008560 668B15[83840000]    <1> 		mov dx, [grphbuf + 6]
 10547 00008567 668B0D[85840000]    <1> 		mov cx, [grphbuf + 8]
 10548 0000856E 668B1D[7D840000]    <1> 		mov bx, [grphbuf]
 10549 00008575 66A1[87840000]      <1> 		mov ax, [grphbuf + 10]
 10550 0000857B 88DC                <1> 		mov ah, bl
 10551 0000857D 8B1D[89840000]      <1> 		mov ebx, [grphbuf + 12]
 10552 00008583 E938010000          <1> 		jmp showgraphicsreplace
 10553                              <1> 	replacestring:
 10554 00008588 893D[117F0000]      <1> 		mov [lastpos], edi
 10555 0000858E 8935[157F0000]      <1> 		mov [lastpos + 4], esi
 10556 00008594 8B5F0C              <1> 		mov ebx, [edi + 12]
 10557 00008597 8B7702              <1> 		mov esi, [edi + 2]
 10558 0000859A 668B5706            <1> 		mov dx, [edi + 6]
 10559 0000859E 668B4F08            <1> 		mov cx, [edi + 8]
 10560 000085A2 66A1[99770000]      <1> 		mov ax, [colorfont2]
 10561 000085A8 66A3[197F0000]      <1> 		mov [colorbuf], ax
 10562 000085AE 66A1[C7700000]      <1> 		mov ax, [background]
 10563 000085B4 66A3[99770000]      <1> 		mov [colorfont2], ax		
 10564 000085BA 8B5F0C              <1> 		mov ebx, [edi + 12]
 10565 000085BD 668B470A            <1> 		mov ax, [edi + 10]
 10566 000085C1 2401                <1> 		and al, 1
 10567 000085C3 A2[097F0000]        <1> 		mov [mouseselecton], al
 10568 000085C8 668B470A            <1> 		mov ax, [edi + 10]
 10569 000085CC E85DF1FFFF          <1> 		call showstring2
 10570 000085D1 66A1[197F0000]      <1> 		mov ax, [colorbuf]
 10571 000085D7 66A3[99770000]      <1> 		mov [colorfont2], ax
 10572 000085DD 8B3D[117F0000]      <1> 		mov edi, [lastpos]
 10573 000085E3 8B7702              <1> 		mov esi, [edi + 2]
 10574 000085E6 668B15[83840000]    <1> 		mov dx, [grphbuf + 6]
 10575 000085ED 668B0D[85840000]    <1> 		mov cx, [grphbuf + 8]
 10576 000085F4 668B1D[7D840000]    <1> 		mov bx, [grphbuf]
 10577 000085FB 66A1[87840000]      <1> 		mov ax, [grphbuf + 10]
 10578 00008601 88DC                <1> 		mov ah, bl
 10579 00008603 8B1D[89840000]      <1> 		mov ebx, [grphbuf + 12]
 10580 00008609 E9B2000000          <1> 		jmp showgraphicsreplace
 10581                              <1> 	replacewindow:
 10582 0000860E 893D[117F0000]      <1> 		mov [lastpos], edi
 10583 00008614 8935[157F0000]      <1> 		mov [lastpos + 4], esi
 10584 0000861A 8B7702              <1> 		mov esi, [edi + 2]
 10585 0000861D 8B3D[9E790000]      <1> 		mov edi, [windowbufloc]
 10586 00008623 31D2                <1> 		xor edx, edx
 10587 00008625 668B15[45580000]    <1> 		mov dx, [resolutionx2]
 10588 0000862C C1E204              <1> 		shl edx, 4
 10589 0000862F 29D7                <1> 		sub edi, edx
 10590 00008631 31D2                <1> 		xor edx, edx
 10591 00008633 668B16              <1> 		mov dx, [esi]
 10592 00008636 660316              <1> 		add dx, [esi]
 10593 00008639 668B4E02            <1> 		mov cx, [esi + 2]
 10594 0000863D 6681C11000          <1> 		add cx, 16
 10595 00008642 66A1[C7700000]      <1> 		mov ax, [background]
 10596 00008648 803D[74840000]01    <1> 		cmp byte [windrag], 1
 10597 0000864F 7604                <1> 		jbe clearwindow
 10598 00008651 662B4E02            <1> 		sub cx, [esi + 2]
 10599                              <1> 	clearwindow:
 10600                              <1> 		%ifdef gui.background
 10601                              <1> 			cmp dword [backgroundimage], 0
 10602                              <1> 			je .noback
 10603                              <1> 			push esi
 10604                              <1> 			mov esi, [backgroundimage]
 10605                              <1> 			sub edi, [physbaseptr]
 10606                              <1> 			add esi, edi
 10607                              <1> 			add edi, [physbaseptr]
 10608                              <1> 			mov ax, [esi]
 10609                              <1> 			pop esi
 10610                              <1> 		.noback:
 10611                              <1> 		%endif
 10612 00008655 668907              <1> 		mov [edi], ax
 10613 00008658 81C702000000        <1> 		add edi, 2
 10614 0000865E 81EA02000000        <1> 		sub edx, 2
 10615 00008664 81FA00000000        <1> 		cmp edx, 0
 10616 0000866A 75E9                <1> 		jne clearwindow
 10617 0000866C 6649                <1> 		dec cx
 10618 0000866E 668B15[45580000]    <1> 		mov dx, [resolutionx2]
 10619 00008675 662B16              <1> 		sub dx, [esi]
 10620 00008678 662B16              <1> 		sub dx, [esi]
 10621 0000867B 01D7                <1> 		add edi, edx
 10622 0000867D 668B16              <1> 		mov dx, [esi]
 10623 00008680 660316              <1> 		add dx, [esi]
 10624 00008683 6681F90000          <1> 		cmp cx, 0
 10625 00008688 75CB                <1> 		jne clearwindow
 10626                              <1> 	endwindowclear:
 10627 0000868A C605[EB230000]00    <1> 		mov byte [termcopyon], 0
 10628 00008691 8B3D[117F0000]      <1> 		mov edi, [lastpos]
 10629 00008697 8B35[7F840000]      <1> 		mov esi, [grphbuf + 2]
 10630 0000869D 668B15[83840000]    <1> 		mov dx, [grphbuf + 6]
 10631 000086A4 668B0D[85840000]    <1> 		mov cx, [grphbuf + 8]
 10632 000086AB 668B1D[7D840000]    <1> 		mov bx, [grphbuf]
 10633 000086B2 66A1[87840000]      <1> 		mov ax, [grphbuf + 10]
 10634 000086B8 88DC                <1> 		mov ah, bl
 10635 000086BA 8B1D[89840000]      <1> 		mov ebx, [grphbuf + 12]
 10636                              <1> 	showgraphicsreplace:
 10637 000086C0 897702              <1> 		mov [edi + 2], esi
 10638 000086C3 66895706            <1> 		mov [edi + 6], dx
 10639 000086C7 66894F08            <1> 		mov [edi + 8], cx
 10640 000086CB 895F0C              <1> 		mov [edi + 12], ebx
 10641 000086CE 30FF                <1> 		xor bh, bh
 10642 000086D0 88E3                <1> 		mov bl, ah
 10643 000086D2 30E4                <1> 		xor ah, ah
 10644 000086D4 6689470A            <1> 		mov [edi + 10], ax
 10645 000086D8 66891F              <1> 		mov [edi], bx
 10646 000086DB 8B5F0C              <1> 		mov ebx, [edi + 12]
 10647 000086DE 668B470A            <1> 		mov ax, [edi + 10]
 10648 000086E2 C3                  <1> 		ret
 10649                              <1> 	showgraphicsnew:
 10650 000086E3 BF[75B90300]        <1> 		mov edi, graphicstable
 10651                              <1> 	shwgrph2:
 10652 000086E8 66813F0000          <1> 		cmp word [edi], 0
 10653 000086ED 74D1                <1> 		je showgraphicsreplace
 10654 000086EF 81C710000000        <1> 		add edi, 16
 10655 000086F5 81FF[75BB0300]      <1> 		cmp edi, graphicstableend
 10656 000086FB 72EB                <1> 		jb shwgrph2
 10657                              <1> 	showgraphicsdone:
 10658 000086FD C3                  <1> 		ret
 10659                              <1> 	
 10660                              <1> putpixel: ;color in si, point is (dx,cx)
 10661                              <1> 		;destroys edi, ebx, eax
 10662 000086FE 6650                <1> 	push ax
 10663 00008700 6653                <1> 	push bx
 10664 00008702 31C0                <1> 	xor eax, eax
 10665 00008704 31DB                <1> 	xor ebx, ebx
 10666 00008706 31FF                <1> 	xor edi, edi
 10667 00008708 668B1D[59570000]    <1> 	mov bx, [resolutiony]
 10668 0000870F 66A1[57570000]      <1> 	mov ax, [resolutionx]
 10669 00008715 6639C2              <1> 	cmp dx, ax
 10670 00008718 7720                <1> 	ja .doneput
 10671 0000871A 66D1E0              <1> 	shl ax, 1
 10672 0000871D 6639D9              <1> 	cmp cx, bx
 10673 00008720 7718                <1> 	ja .doneput
 10674 00008722 6689CB              <1> 	mov bx, cx
 10675 00008725 52                  <1> 	push edx
 10676 00008726 F7E3                <1> 	mul ebx
 10677 00008728 5A                  <1> 	pop edx
 10678 00008729 6601D7              <1> 	add di, dx
 10679 0000872C 6601D7              <1> 	add di, dx
 10680 0000872F 01C7                <1> 	add edi, eax
 10681 00008731 033D[6D570000]      <1> 	add edi, [physbaseptr]
 10682 00008737 668937              <1> 	mov [edi], si
 10683                              <1> .doneput:
 10684 0000873A 665B                <1> 	pop bx
 10685 0000873C 6658                <1> 	pop ax
 10686 0000873E C3                  <1> 	ret
 10687                              <1> 	
 10688                              <1> getpixelmem:	;pixel in (dx, cx), outputs memory location in edi
 10689 0000873F 31FF                <1> 	xor edi, edi
 10690 00008741 31C0                <1> 	xor eax, eax
 10691 00008743 31DB                <1> 	xor ebx, ebx
 10692 00008745 668B1D[45580000]    <1> 	mov bx, [resolutionx2]
 10693 0000874C 6689D7              <1> 	mov di, dx
 10694 0000874F 6601D7              <1> 	add di, dx
 10695 00008752 6689C8              <1> 	mov ax, cx
 10696 00008755 F7E3                <1> 	mul ebx
 10697 00008757 01C7                <1> 	add edi, eax
 10698 00008759 033D[6D570000]      <1> 	add edi, [physbaseptr]
 10699 0000875F C3                  <1> 	ret
 10700                              <1> 
 10701 00008760 00                  <1> 	mouseon db 0
 10702 00008761 0000                <1> 	icon dw 0	;pointer to icon
 10703 00008763 00000000            <1> 	codepointer dd 0 ;pointer to code
 10704 00008767 00                  <1> 	iconselected db 0
 10705                                  %endif
 10706                                  %ifdef network.included
 10707                                  	%include "source/network.asm"
 10708                                  %endif
 10709                                      %include "source/data.asm"
 10710 00008768 626F6F742E736800    <1> 	bootfilename db "boot.sh",0
 10711 00008770 73687573683A2000    <1> 	notfound1 db "shush: ",0
 10712 00008778 3A206E6F7420666F75- <1> 	notfound2 db  ": not found",10,0
 10713 00008781 6E640A00            <1>
 10714 00008785 757365726E616D653A- <1> 	userask db "username:",0
 10715 0000878E 00                  <1>
 10716 0000878F 70617373776F72643A- <1> 	pwdask	db	"password:",0
 10717 00008798 00                  <1>
 10718 00008799 40                  <1> 	computer db "@"
 10719                              <1> %ifdef io.serial
 10720                              <1> 	computername	db	"SollerOS.",io.serial," ",0
 10721                              <1> %else
 10722 0000879A 536F6C6C65724F5320- <1> 	computername	db	"SollerOS ",0
 10723 000087A3 00                  <1>
 10724                              <1> %endif
 10725 000087A4 5D242000            <1> 	endprompt db "]$ ",0
 10726 000087A8 0D                  <1> 	crlf 	db  13
 10727 000087A9 0A00                <1> 	line	db	10,0
 10728                              <1> 	userlst:
 10729 000087AB 726F6F7400          <1> 			db "root",0
 10730 000087B0 617765736F6D65706F- <1> 			db "awesomepower",0
 10731 000087B9 77657200            <1>
 10732 000087BD 7573657200          <1> 			db "user",0
 10733 000087C2 70617373776F726400  <1> 			db "password",0
 10734 000087CB 6E00                <1> 			db "n",0	;;abuse for quick entry-a quick double n followed by a double enter will get you in
 10735 000087CD 00                  <1> 			db 0
 10736                              <1> 	userlstend:
 10737                              <1> 	
 10738 000087CE 00                  <1> 	guion db 0
 10739 000087CF 00                  <1> 	DriveNumber db 0
 10740 000087D0 00000000            <1> 	lbaad dd 0
 10741 000087D4 00<rept>            <1> 	memlistbuf times 576 db 0
 10742 00008A14 00000000            <1> 	memlistend: dd 0
 10743                              <1> %ifdef io.serial
 10744                              <1> %else
 10745 00008A18 <incbin>            <1> fonts:	incbin "source/fonts/fonts.pak"
 10746                              <1> fontend:
 10747                              <1> %endif
 10748                              <1> osend:	;this is the end of the operating system's space on disk
 10749                                  %ifdef disk.none
 10750                                  	diskfileindex:
 10751                                  	enddiskfileindex:
 10752                                  	align 512, db 0
 10753                                      %include "source/bss.asm"
 10754                                  %else
 10755                                      %include "build/fileindex.asm"
 10756                              <1> diskfileindex:
 10757 00038A18 646F73746573742E63- <1> db "dostest.com",0
 10758 00038A21 6F6D00              <1>
 10759 00038A24 C6010000            <1> dd (f0-$$)/512
 10760 00038A28 01000000            <1> dd (f1-f0)/512
 10761 00038A2C 6578656300          <1> db "exec",0
 10762 00038A31 C7010000            <1> dd (f1-$$)/512
 10763 00038A35 01000000            <1> dd (f2-f1)/512
 10764 00038A39 66696E616C636F756E- <1> db "finalcount.sn",0
 10765 00038A42 742E736E00          <1>
 10766 00038A47 C8010000            <1> dd (f2-$$)/512
 10767 00038A4B 01000000            <1> dd (f3-f2)/512
 10768 00038A4F 666F726B00          <1> db "fork",0
 10769 00038A54 C9010000            <1> dd (f3-$$)/512
 10770 00038A58 01000000            <1> dd (f4-f3)/512
 10771 00038A5C 6775697465737400    <1> db "guitest",0
 10772 00038A64 CA010000            <1> dd (f4-$$)/512
 10773 00038A68 03000000            <1> dd (f5-f4)/512
 10774 00038A6C 696E7400            <1> db "int",0
 10775 00038A70 CD010000            <1> dd (f5-$$)/512
 10776 00038A74 01000000            <1> dd (f6-f5)/512
 10777 00038A78 6C6F7374776F6F6473- <1> db "lostwoods.sn",0
 10778 00038A81 2E736E00            <1>
 10779 00038A85 CE010000            <1> dd (f6-$$)/512
 10780 00038A89 01000000            <1> dd (f7-f6)/512
 10781 00038A8D 6D6172696F2E736E00  <1> db "mario.sn",0
 10782 00038A96 CF010000            <1> dd (f7-$$)/512
 10783 00038A9A 01000000            <1> dd (f8-f7)/512
 10784 00038A9E 736F6E676F74696D65- <1> db "songotime.sn",0
 10785 00038AA7 2E736E00            <1>
 10786 00038AAB D0010000            <1> dd (f8-$$)/512
 10787 00038AAF 01000000            <1> dd (f9-f8)/512
 10788 00038AB3 73736500            <1> db "sse",0
 10789 00038AB7 D1010000            <1> dd (f9-$$)/512
 10790 00038ABB 02000000            <1> dd (f10-f9)/512
 10791 00038ABF 74656C7900          <1> db "tely",0
 10792 00038AC4 D3010000            <1> dd (f10-$$)/512
 10793 00038AC8 01000000            <1> dd (f11-f10)/512
 10794 00038ACC 756E667300          <1> db "unfs",0
 10795 00038AD1 D4010000            <1> dd (f11-$$)/512
 10796 00038AD5 02000000            <1> dd (f12-f11)/512
 10797                              <1> enddiskfileindex:
 10798                              <1> 
 10799                                      %include "source/bss.asm"
 10800 00038AD9 90<rept>            <1> align 4, nop
 10801                              <1> bssstart: equ $
 10802                              <1> bsscopy equ $
 10803                              <1> initialstack equ bsscopy
 10804                              <1> stackend equ initialstack + 4000
 10805                              <1> sigtable equ stackend + 96
 10806                              <1> fileindex: equ sigtable + 4
 10807                              <1> fileindexend: equ fileindex + 1024
 10808                              <1> previousstack equ fileindexend
 10809                              <1> lastfolderloc equ previousstack + 4
 10810                              <1> currentfolderloc equ lastfolderloc + 4
 10811                              <1> currentfolder equ currentfolderloc + 4
 10812                              <1> currentfolderend equ currentfolder + 512
 10813                              <1> uid equ currentfolderend
 10814                              <1> ranboot equ uid + 4
 10815                              <1> IFON equ ranboot + 1
 10816                              <1> IFTRUE equ IFON + 1
 10817                              <1> BATCHPOS equ IFTRUE + 100
 10818                              <1> BATCHISON equ BATCHPOS + 4
 10819                              <1> LOOPON equ BATCHISON + 1
 10820                              <1> LOOPPOS	equ LOOPON + 1
 10821                              <1> variables: equ LOOPPOS + 4
 10822                              <1> varend: equ variables + 4096
 10823                              <1> buftxt2: equ varend
 10824                              <1> buftxt: equ buftxt2 + 1024
 10825                              <1> buftxtend: equ buftxt + 1024
 10826                              <1> buf2: equ buftxtend
 10827                              <1> numbuf: equ buf2 + 20
 10828                              <1> %ifdef io.serial
 10829                              <1> 	lastcommandpos equ numbuf + 1
 10830                              <1> %else
 10831                              <1> 	%ifdef gui.included
 10832                              <1> 		graphicstable equ numbuf + 1 ;w type, dw datalocation, w locationx, w locationy, w selected, dw code
 10833                              <1> 		graphicstableend equ graphicstable + 200h
 10834                              <1> 		%ifdef gui.background
 10835                              <1> 			backgroundbuffer equ graphicstableend
 10836                              <1> 			backgroundbufferend equ backgroundbuffer + 1280*1026*2
 10837                              <1> 			mousecolorbuf equ backgroundbufferend
 10838                              <1> 		%else
 10839                              <1> 			mousecolorbuf equ graphicstableend ;where the gui under the mouse is stored
 10840                              <1> 		%endif
 10841                              <1> 		mcolorend equ mousecolorbuf + 256
 10842                              <1> 		videobuf equ mcolorend + 1	;1680x1050 pixels in characters
 10843                              <1> 		videobufend	equ videobuf + 210*65*4;2
 10844                              <1> 		videobuf2 equ videobufend
 10845                              <1> 		videobuf2end equ videobuf2 + 210*65*4;2
 10846                              <1> 	%else
 10847                              <1> 		videobuf equ numbuf + 1
 10848                              <1> 		videobufend equ videobuf + 80*30*4
 10849                              <1> 		videobuf2 equ videobufend
 10850                              <1> 		videobuf2end equ videobuf2 + 80*30*4
 10851                              <1> 	%endif
 10852                              <1> 	lastcommandpos: equ videobuf2end
 10853                              <1> %endif
 10854                              <1> 	commandbufpos: equ lastcommandpos + 4
 10855                              <1> 	commandlistentries: equ commandbufpos + 4
 10856                              <1> 	commandsentered: equ commandlistentries + 4
 10857                              <1> 	commandbuf: equ commandsentered + 4
 10858                              <1> 	commandbufend: equ commandbuf + 4096 ;this is where kernel space only ends, the rest is for threading
 10859                              <1> %ifdef network.included
 10860                              <1> 	rbuffstart: equ commandbufend ;for use with networking
 10861                              <1> 	rbuffend equ rbuffstart + 8212
 10862                              <1> %else
 10863                              <1> 	rbuffstart equ commandbufend
 10864                              <1> 	rbuffend equ commandbufend
 10865                              <1> %endif
 10866                              <1> %ifdef threads.included
 10867                              <1> 	threadlist: equ rbuffend ;this buffer will hold the stack locations of all of the threads, up to 2048
 10868                              <1> 	threadlistend: equ threadlist + 1024*4
 10869                              <1> 	stacks:	equ threadlistend ;i use SS now for proper stack management. This makes sure stacks never screw with other memory
 10870                              <1> 	stack1: equ stacks + 1024  ;woah, thats a lot of space for stacks
 10871                              <1> 	bssend equ stack1 + 1024*1024
 10872                              <1> %else
 10873                              <1> 	bssend equ rbuffend
 10874                              <1> %endif
 10875                              <1> dosprogloc equ 0x400000 ;from here on, it is not kernel space so apps can be loaded here.
 10876                                      %include "build/files.asm"
 10877 00038ADC 00<rept>            <1> align 512,db 0
 10878                              <1> f0:
 10879 00038C00 <incbin>            <1> incbin "included/dostest.com"
 10880 00038D31 00<rept>            <1> align 512,db 0
 10881                              <1> f1:
 10882 00038E00 <incbin>            <1> incbin "included/exec"
 10883 00038EE9 00<rept>            <1> align 512,db 0
 10884                              <1> f2:
 10885 00039000 <incbin>            <1> incbin "included/finalcount.sn"
 10886 00039102 00<rept>            <1> align 512,db 0
 10887                              <1> f3:
 10888 00039200 <incbin>            <1> incbin "included/fork"
 10889 00039361 00<rept>            <1> align 512,db 0
 10890                              <1> f4:
 10891 00039400 <incbin>            <1> incbin "included/guitest"
 10892 0003982E 00<rept>            <1> align 512,db 0
 10893                              <1> f5:
 10894 00039A00 <incbin>            <1> incbin "included/int"
 10895 00039BB2 00<rept>            <1> align 512,db 0
 10896                              <1> f6:
 10897 00039C00 <incbin>            <1> incbin "included/lostwoods.sn"
 10898 00039C56 00<rept>            <1> align 512,db 0
 10899                              <1> f7:
 10900 00039E00 <incbin>            <1> incbin "included/mario.sn"
 10901 00039E3A 00<rept>            <1> align 512,db 0
 10902                              <1> f8:
 10903 0003A000 <incbin>            <1> incbin "included/songotime.sn"
 10904 0003A04A 00<rept>            <1> align 512,db 0
 10905                              <1> f9:
 10906 0003A200 <incbin>            <1> incbin "included/sse"
 10907 0003A4A8 00<rept>            <1> align 512,db 0
 10908                              <1> f10:
 10909 0003A600 <incbin>            <1> incbin "included/tely"
 10910 0003A7C6 00<rept>            <1> align 512,db 0
 10911                              <1> f11:
 10912 0003A800 <incbin>            <1> incbin "included/unfs"
 10913                              <1> align 512,db 0
 10914                              <1> f12:
 10915                                  %endif
