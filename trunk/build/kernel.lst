     1                                  [map symbols build/kernel.map]
     2                                  %include "config.asm"
     3                              <1> ;These flags are used to configure options as on, put a simicolon in front of it to not configure it
     4                              <1> 
     5                              <1> %define gui.included
     6                              <1> ;Turn on the gui
     7                              <1> 
     8                              <1> ;%define gui.alphablending
     9                              <1> ;Make the terminal in the GUI 25% transparent
    10                              <1> 
    11                              <1> ;%define gui.background
    12                              <1> ;Make the GUI have a loadable background
    13                              <1> 
    14                              <1> ;%define gui.time
    15                              <1> ;Show time in top right corner of screen
    16                              <1> 
    17                              <1> ;%define io.serial "1"
    18                              <1> ;Use the specified serial port for input and output instead of the keyboard and screen
    19                              <1> ;If the gui is included this should not be enabled
    20                              <1> 
    21                              <1> ;%define terminal.vsync
    22                              <1> ;Uses the RTC to automatically update the terminal at ~64Hz
    23                              <1> 	;WARNING:
    24                              <1> 	;This may cause problems on systems with non-standard RTC's
    25                              <1> 	;It is therefore recommended that you do not enable it even
    26                              <1> 	;though it gives a large speed improvement for character output
    27                              <1> 
    28                              <1> %define hardware.automatic
    29                              <1> ;Automatically load the sound and network drivers.
    30                              <1> 
    31                              <1> %define threads.included
    32                              <1> ;Include the thread testing stuff-this uses a relatively large amount of memory
    33                              <1> 
    34                              <1> %define exceptions.included
    35                              <1> ;Display debugging information should crashes occur-also uses quite a bit of memory
    36                              <1> 
    37                              <1> ;%define disk.protected
    38                              <1> ;Use protected mode instead of real mode for disk access-this allows for multitasking with disk reads
    39                              <1> 
    40                              <1> %define disk.real
    41                              <1> ;Use real mode for disk access-this gives greater compatibility
    42                              <1> 
    43                              <1> ;%define sound.included
    44                              <1> ;This includes the sound drivers
    45                              <1> 
    46                              <1> %define network.included
    47                              <1> ;This includes the network stack
    48                              <1> 
    49                              <1> %define rtl8169.included
    50                              <1> ;This includes the RTL8169 drivers
    51                              <1> 
    52                              <1> ;%define rtl8139.included
    53                              <1> ;This includes the RTL8139 drivers
    54                              <1> 
    55                              <1> ;%define ne2000.included
    56                              <1> ;This includes the ne2000 drivers
    57                              <1> 
    58                              <1> ;%define i8254x.included
    59                              <1> ;This includes the Intel 8254x drivers
    60                              <1> 
    61                              <1> %define sector.debug
    62                              <1> ;Dump the contents of the first sector of SollerOS
    63                              <1> 
    64                              <1> ;%define dos.compatible
    65                              <1> ;Make the kernel loadable by dos.
    66                              <1> 
    67                              <1> ;%define system.simple
    68                              <1> ;The smallest possible system, overrides all options
    69                              <1> 
    70                              <1> ;FIX DEPENDANCIES
    71                              <1> %ifdef system.simple
    72                              <1> 	%undef dos.compatible	;overides all including dos.compatible
    73                              <1> 	%define UNDEFALL
    74                              <1> %endif
    75                              <1> %ifdef dos.compatible
    76                              <1> 	%define UNDEFALL
    77                              <1> %endif
    78                              <1> %ifdef UNDEFALL
    79                              <1> 	%undef io.serial
    80                              <1> 	%undef disk.real
    81                              <1> 	%undef gui.included
    82                              <1> 	%undef gui.alphablending
    83                              <1> 	%undef gui.background
    84                              <1> 	%undef terminal.vsync
    85                              <1> 	%undef hardware.automatic
    86                              <1> 	%undef threads.included
    87                              <1> 	%undef exceptions.included
    88                              <1> 	%undef disk.protected
    89                              <1> 	%undef sound.included
    90                              <1> 	%undef network.included
    91                              <1> 	%undef rtl8139.included
    92                              <1> 	%undef rtl8169.included
    93                              <1> 	%undef ne2000.included
    94                              <1> 	%undef i8254x.included
    95                              <1> 	%undef sector.debug
    96                              <1> 	%undef UNDEFALL
    97                              <1> %endif
    98                              <1> %ifdef system.simple
    99                              <1> 	%define io.serial "1"
   100                              <1> 	%define disk.real
   101                              <1> %endif
   102                              <1> %ifdef gui.included
   103                              <1> 	%undef io.serial
   104                              <1> %else
   105                              <1> 	%undef gui.alphablending
   106                              <1> 	%undef gui.background
   107                              <1> %endif
   108                              <1> %ifdef network.included
   109                              <1> %else
   110                              <1> 	%undef i8254x.included
   111                              <1> 	%undef ne2000.included
   112                              <1> 	%undef rtl8139.included
   113                              <1> 	%undef rtl8169.included
   114                              <1> %endif
   115                              <1> %ifdef disk.protected
   116                              <1> 	%undef disk.real
   117                              <1> %else
   118                              <1> 	%ifdef disk.real
   119                              <1> 	%else
   120                              <1> 		%define disk.none
   121                              <1> 	%endif
   122                              <1> %endif
   123                                  [ORG 0x100]
   124                                  	%include "source/signature.asm"
   125                              <1> sigjump:
   126 00000000 E91A00              <1> 	jmp signatureend
   127                              <1> signature:
   128 00000003 536F6C6C65724F53    <1> db "SollerOS" ;Operating system name
   129 0000000B 20416C706861204275- <1> db " Alpha Build ",0	;Soller OS development level
   130 00000014 696C642000          <1>
   131 00000019 FF000000            <1> dd 255	;version number
   132                              <1> signatureend:
   133                                  [BITS 16]
   134                                      %include "source/boot.asm"
   135                              <1>     ; MENU.ASM
   136                              <1> boot:
   137 0000001D 8CC8                <1> 	mov ax, cs
   138 0000001F 8ED8                <1> 	mov ds, ax
   139 00000021 8EC0                <1> 	mov es, ax
   140 00000023 8ED0                <1> 	mov ss, ax
   141 00000025 880E[9DDB]          <1> 	mov [DriveNumber], cl
   142 00000029 668916[9EDB]        <1> 	mov [lbaad], edx
   143                              <1> %ifdef io.serial
   144                              <1> 	call getmemorysize
   145                              <1> 	mov si, serialmsg
   146                              <1> 	call printrm
   147                              <1> 	jmp pmode
   148                              <1> serialmsg: db "SollerOS: Using serial port ",io.serial," for I/O.",0
   149                              <1> %else
   150 0000002E E80300              <1> 	call vgaset	;make users switch using a command-this leads to very fast boots
   151 00000031 E95700              <1> 	jmp pmode
   152                              <1> %endif
   153                              <1> 	
   154                              <1> vgaset:
   155 00000034 B81200              <1> 	mov ax, 12h
   156 00000037 31DB                <1> 	xor bx, bx
   157 00000039 CD10                <1> 	int 10h
   158 0000003B C606[9CDB]00        <1> 	mov byte [guion], 0
   159 00000040 E80100              <1> 	call getmemorysize;get the memory map after the video is initialized
   160 00000043 C3                  <1> 	ret
   161                              <1> 
   162                              <1> getmemorysize:
   163 00000044 BF[A2DB]            <1> 	mov di, memlistbuf
   164 00000047 6631DB              <1> 	xor ebx, ebx
   165                              <1> getmemsizeloop:
   166 0000004A 66B820E80000        <1> 	mov eax, 0xE820
   167 00000050 66BA50414D53        <1> 	mov edx, 0x0534D4150
   168 00000056 66B918000000        <1> 	mov ecx, 24
   169 0000005C CD15                <1> 	int 0x15
   170 0000005E 81C71800            <1> 	add di, 24
   171 00000062 81FF[E2DD]          <1> 	cmp di, memlistend
   172 00000066 7309                <1> 	jae nomoregetmemsize
   173 00000068 6681FB00000000      <1> 	cmp ebx, 0
   174 0000006F 75D9                <1> 	jne getmemsizeloop
   175                              <1> nomoregetmemsize:
   176 00000071 81EF[A2DB]          <1> 	sub di, memlistbuf
   177 00000075 893E[E2DD]          <1> 	mov [memlistend], di
   178 00000079 C3                  <1> 	ret
   179                              <1> 	
   180                              <1> printrm:			; 'si' comes in with string address
   181 0000007A BB0700              <1>     mov bx,07		; write to display
   182 0000007D B40E                <1>     mov ah,0Eh		; screen function
   183 0000007F 8A04                <1>    .lp:    mov al,[si]         ; get next character
   184 00000081 3C00                <1>     cmp al,0		; look for terminator 
   185 00000083 7405                <1>     je .done		; zero byte at end of string
   186 00000085 CD10                <1>     int 10h		; write character to screen.    
   187 00000087 46                  <1> 	inc si	     	; move to next character
   188 00000088 EBF5                <1>     jmp .lp		; loop
   189 0000008A C3                  <1> .done: ret
   190                                      %include "source/pmode.asm"
   191                              <1> [BITS 16]
   192                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   193                              <1> ;	16-bit real mode
   194                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   195                              <1> 
   196                              <1> pmode:
   197 0000008B 6631C0              <1> 	xor eax, eax
   198 0000008E 6631DB              <1> 	xor ebx, ebx
   199 00000091 6631C9              <1> 	xor ecx, ecx
   200 00000094 6631D2              <1> 	xor edx, edx
   201 00000097 6631F6              <1> 	xor esi, esi
   202 0000009A 6631FF              <1> 	xor edi, edi
   203 0000009D BA9200              <1> 	mov dx, 0x92
   204 000000A0 EC                  <1> 	in al, dx	;;A20
   205 000000A1 0C02                <1> 	or al, 2
   206 000000A3 EE                  <1> 	out dx, al
   207 000000A4 8CCB                <1> 	mov bx,cs		; EBX=segment
   208 000000A6 66C1E304            <1> 	shl ebx,4		;	<< 4
   209 000000AA 67668D03            <1> 	lea eax,[ebx]		; EAX=linear address of segment base
   210 000000AE A3[7E03]            <1> 	mov [gdt2 + 2],ax
   211 000000B1 A3[8603]            <1> 	mov [gdt3 + 2],ax
   212 000000B4 66C1E810            <1> 	shr eax,16
   213 000000B8 A2[8003]            <1> 	mov [gdt2 + 4],al
   214 000000BB A2[8803]            <1> 	mov [gdt3 + 4],al
   215 000000BE 8826[8303]          <1> 	mov [gdt2 + 7],ah
   216 000000C2 8826[8B03]          <1> 	mov [gdt3 + 7],ah
   217                              <1> 
   218 000000C6 66B8[E2DD0000]      <1> 	mov eax, initialstack
   219 000000CC 660306[4502]        <1> 	add eax, [newcodecache]
   220 000000D1 A3[7603]            <1> 	mov [gdts + 2],ax
   221 000000D4 66C1E810            <1> 	shr eax, 16
   222 000000D8 A2[7803]            <1> 	mov [gdts + 4],al
   223 000000DB 8826[7B03]          <1> 	mov [gdts + 7], ah
   224                              <1> 	
   225 000000DF 66A1[4502]          <1> 	mov eax, [newcodecache]
   226 000000E3 A3[8E03]            <1> 	mov [gdt4 + 2],ax
   227 000000E6 A3[9603]            <1> 	mov [gdt5 + 2],ax
   228 000000E9 A3[9E03]            <1> 	mov [gdtv8086 + 2], ax
   229 000000EC A3[A603]            <1> 	mov [gdtv80862 + 2], ax
   230 000000EF 66C1E810            <1> 	shr eax,16
   231 000000F3 A2[9003]            <1> 	mov [gdt4 + 4],al
   232 000000F6 A2[9803]            <1> 	mov [gdt5 + 4],al
   233 000000F9 A2[A003]            <1> 	mov [gdtv8086 + 4],al
   234 000000FC A2[A803]            <1> 	mov [gdtv80862 + 4],al
   235 000000FF 8826[9303]          <1> 	mov [gdt4 + 7],ah
   236 00000103 8826[9B03]          <1> 	mov [gdt5 + 7],ah
   237 00000107 8826[A303]          <1> 	mov [gdtv8086 + 7],ah
   238 0000010B 8826[AB03]          <1> 	mov [gdtv80862 + 7],ah
   239                              <1> 	
   240 0000010F 66B800004000        <1> 	mov eax, dosprogloc
   241 00000115 660306[4502]        <1> 	add eax, [newcodecache]
   242 0000011A A3[AE03]            <1> 	mov [gdtdos + 2],ax
   243 0000011D A3[B603]            <1> 	mov [gdtdos2 + 2],ax
   244 00000120 66C1E810            <1> 	shr eax,16
   245 00000124 A2[B003]            <1> 	mov [gdtdos + 4],al
   246 00000127 A2[B803]            <1> 	mov [gdtdos2 + 4],al
   247 0000012A 8826[B303]          <1> 	mov [gdtdos + 7],ah
   248 0000012E 8826[BB03]          <1> 	mov [gdtdos2 + 7],ah
   249                              <1> 	
   250                              <1> ; fix up gdt and idt
   251 00000132 67668D83[64030000]  <1> 	lea eax,[ebx + gdt]	; EAX=linear address of gdt
   252 0000013A 66A3[5A03]          <1> 	mov [gdtr + 2],eax
   253 0000013E 67668D83[BC030000]  <1> 	lea eax,[ebx + idt]	; EAX=linear address of idt
   254 00000146 66A3[6003]          <1> 	mov [idtr + 2],eax
   255 0000014A FA                  <1> 	cli
   256 0000014B 0F0116[5803]        <1> 	lgdt [gdtr]
   257 00000150 0F011E[5E03]        <1> 	lidt [idtr]
   258 00000155 6631DB              <1> 	xor ebx, ebx
   259 00000158 8CDB                <1> 	mov bx, ds
   260 0000015A 66891E[4102]        <1> 	mov [basecache], ebx
   261 0000015F 0F20C0              <1> 	mov eax,cr0
   262 00000162 0C01                <1> 	or al,1
   263 00000164 0F22C0              <1> 	mov cr0,eax
   264 00000167 EA[6C01]1800        <1> 	jmp SYS_CODE_SEL:do_pm
   265                              <1> [BITS 32]
   266                              <1> do_pm:
   267 0000016C 31C0                <1> 	xor eax, eax
   268 0000016E 66B82000            <1> 	mov ax, SYS_DATA_SEL
   269 00000172 8ED8                <1> 	mov ds, ax
   270 00000174 8EC0                <1> 	mov es, ax
   271 00000176 8EE0                <1> 	mov fs, ax
   272 00000178 66B83000            <1> 	mov ax, NEW_DATA_SEL
   273 0000017C 8EE8                <1> 	mov gs, ax
   274                              <1> 	
   275                              <1> copykernel:
   276 0000017E 648B06              <1> 	mov eax, [fs:esi]
   277 00000181 658906              <1> 	mov [gs:esi], eax
   278 00000184 81C604000000        <1> 	add esi, 4
   279 0000018A 81FE[E2DD0000]      <1> 	cmp esi, bsscopy
   280 00000190 72EC                <1> 	jb copykernel
   281 00000192 EA[99010000]2800    <1> 	jmp NEW_CODE_SEL:done_copy
   282                              <1> 	
   283                              <1> done_copy:
   284 00000199 66B83000            <1> 	mov ax, NEW_DATA_SEL	;;these MUST be setup AFTER the kernel switches places!!!
   285 0000019D 8ED8                <1> 	mov ds, ax
   286 0000019F 8EC0                <1> 	mov es, ax
   287 000001A1 8EE0                <1> 	mov fs, ax
   288                              <1> 	;mov ax, STACK_SEL
   289 000001A3 8ED0                <1> 	mov ss, ax
   290 000001A5 BC[82ED0000]        <1> 	mov esp, stackend
   291 000001AA 66B82000            <1> 	mov ax, SYS_DATA_SEL
   292 000001AE 8EE8                <1> 	mov gs, ax
   293                              <1> 	
   294 000001B0 E8935F0000          <1> 	call initialize	;initialize drivers
   295                              <1> 	
   296 000001B5 A1[45020000]        <1> 	mov eax, [newcodecache]
   297 000001BA C1E804              <1> 	shr eax, 4
   298 000001BD A3[41020000]        <1> 	mov [basecache], eax
   299                              <1> 	
   300 000001C2 BE[30FE1200]        <1> 	mov esi, bssend
   301 000001C7 31C0                <1> 	xor eax, eax
   302                              <1> clearkernelbuffers:
   303 000001C9 8906                <1> 	mov [esi], eax
   304 000001CB 81EE04000000        <1> 	sub esi, 4
   305 000001D1 81FE[E2DD0000]      <1> 	cmp esi, bsscopy
   306 000001D7 77F0                <1> 	ja clearkernelbuffers
   307 000001D9 FB                  <1> 	sti
   308                              <1> 
   309                              <1> getmemoryspace:
   310 000001DA BE[A2DB0000]        <1> 	mov esi, memlistbuf
   311 000001DF 31FF                <1> 	xor edi, edi
   312 000001E1 668B3D[E2DD0000]    <1> 	mov di, [memlistend]
   313 000001E8 01F7                <1> 	add edi, esi
   314 000001EA 31C0                <1> 	xor eax, eax
   315                              <1> memoryspaceaddition:
   316 000001EC 39FE                <1> 	cmp esi, edi
   317 000001EE 7322                <1> 	jae finishedmemspacecalc
   318 000001F0 81C608000000        <1> 	add esi, 8
   319 000001F6 8B0E                <1> 	mov ecx, [esi]
   320 000001F8 81C608000000        <1> 	add esi, 8
   321 000001FE 8B1E                <1> 	mov ebx, [esi]
   322 00000200 81C608000000        <1> 	add esi, 8
   323 00000206 81FB01000000        <1> 	cmp ebx, 1
   324 0000020C 75DE                <1> 	jne memoryspaceaddition
   325 0000020E 01C8                <1> 	add eax, ecx
   326 00000210 EBDA                <1> 	jmp memoryspaceaddition
   327                              <1> finishedmemspacecalc:
   328 00000212 A3[56020000]        <1> 	mov [memoryspace], eax
   329                              <1> %ifdef gui.included
   330 00000217 803D[9CDB0000]00    <1> 	cmp byte [guion], 0
   331 0000021E 741C                <1> 	je normalstartup
   332 00000220 8B1D[41020000]      <1> 	mov ebx, [basecache]
   333 00000226 C1E304              <1> 	shl ebx, 4
   334 00000229 8B3D[36570000]      <1> 	mov edi, [physbaseptr]
   335 0000022F 29DF                <1> 	sub edi, ebx
   336 00000231 893D[36570000]      <1> 	mov [physbaseptr], edi
   337 00000237 E9D7640000          <1> 	jmp guiboot
   338                              <1> %endif
   339                              <1> normalstartup:
   340 0000023C E9B4280000          <1> 	jmp os
   341                              <1> 	
   342 00000241 00000000            <1> basecache dd 0
   343 00000245 00001000            <1> newcodecache dd 0x100000
   344                              <1> 
   345 00000249 00                  <1> testingcpuspeed db 0
   346 0000024A 00000000            <1> cpuspeedperint dd 0
   347 0000024E 0000000000000000    <1> cpuclocksperint dd 0,0
   348 00000256 00000000            <1> memoryspace dd 0
   349 0000025A 7D0A                <1> pitdiv dw 2685
   350 0000025C 2E562200            <1> timeinterval dd 2250286
   351 00000260 00000000            <1> timeseconds dd 0
   352 00000264 00000000            <1> timenanoseconds dd 0
   353 00000268 00                  <1> soundon db 0
   354 00000269 0000                <1> soundrepititions dw 0
   355 0000026B 00000000            <1> soundpos dd 0
   356 0000026F 00000000            <1> soundendpos dd 0
   357                              <1> 
   358                              <1> cpuspeedend:
   359 00000273 C605[49020000]00    <1> 	mov byte [testingcpuspeed], 0
   360 0000027A A3[4A020000]        <1> 	mov [cpuspeedperint], eax
   361 0000027F B8[224E0000]        <1> 	mov eax, cpuspeedloopend
   362 00000284 890424              <1> 	mov [esp], eax
   363 00000287 E9BC000000          <1> 	jmp handled
   364                              <1> 
   365                              <1> ;if using the rtc, the default frequency yeilds a period of 976562.5ns
   366                              <1> ;if using the pit, div=451 is 377981.0004, div=5370 is 4500572.00007ns
   367                              <1> ;div=55483 is 46500044.000006ns, div=2685 is 2250286.00004ns, div=902 is 755962.0008
   368                              <1> 
   369                              <1> pitinterrupt: ;this controls threading
   370 0000028C FA                  <1> 	cli
   371 0000028D 803D[49020000]01    <1> 	cmp byte [testingcpuspeed], 1	;check to see if the cpu speed test is running
   372 00000294 74DD                <1> 	je cpuspeedend
   373                              <1> 		
   374 00000296 E886000000          <1> 	call timekeeper ;this updates the internal time
   375                              <1> 	
   376 0000029B 803D[68020000]01    <1> 	cmp byte [soundon], 1
   377 000002A2 0F8472580000        <1> 	je near PCSpeakerRAW
   378                              <1> timerinterrupt:	;put this into the interrupt handler that controls threading
   379                              <1> %ifdef threads.included
   380 000002A8 803D[0E670000]01    <1> 	cmp byte [threadson], 1
   381 000002AF 0F84F9630000        <1> 	je near threadswitch
   382                              <1> %endif
   383                              <1> keyinterrupt:		;checks for escape, if pressed, it quits the program currently running
   384 000002B5 803D[0E670000]00    <1> 	cmp byte [threadson], 0
   385 000002BC 0F8486000000        <1> 	je near handled
   386                              <1> %ifdef io.serial
   387                              <1> 	jmp handled
   388                              <1> %else
   389 000002C2 60                  <1> 	pusha
   390 000002C3 E464                <1> 	in al, 64h
   391 000002C5 A820                <1> 	test al, 20h
   392 000002C7 0F8579000000        <1> 	jnz near handled2
   393 000002CD E460                <1> 	in al, 60h
   394 000002CF 3C01                <1> 	cmp al, 1		;escape
   395 000002D1 7405                <1> 	je userint
   396 000002D3 E96E000000          <1> 	jmp handled2
   397                              <1> ;	cmp al, 0x57
   398                              <1> ;	jne near handled2
   399                              <1> ;pauseint:	;F11 pauses
   400                              <1> ;	in al, 64h
   401                              <1> ;	test al, 20h
   402                              <1> ;	jnz pauseint
   403                              <1> ;	in al, 60h
   404                              <1> ;	cmp al, 0xD7
   405                              <1> ;	jne pauseint
   406                              <1> ;	mov esi, pausemsg
   407                              <1> ;	call print
   408                              <1> ;	cli
   409                              <1> ;pauselp:
   410                              <1> ;	nop
   411                              <1> ;	in al, 64h
   412                              <1> ;	test al, 20h
   413                              <1> ;	jnz pauselp
   414                              <1> ;	in al, 60h
   415                              <1> ;	cmp al, 0x57
   416                              <1> ;	je near handled2
   417                              <1> ;	jmp pauselp
   418                              <1> ;pausemsg db "Paused",10,0
   419                              <1> userint:
   420 000002D8 31C0                <1> 	xor eax, eax
   421 000002DA 3905[E2ED0000]      <1> 	cmp [sigtable], eax
   422 000002E0 7411                <1> 	je .nosighook
   423 000002E2 8B1D[E2ED0000]      <1> 	mov ebx, [sigtable]
   424 000002E8 895C2420            <1> 	mov [esp + 32], ebx
   425                              <1> ;	mov [sigtable], eax
   426 000002EC B020                <1> 	mov al, 0x20
   427 000002EE E620                <1> 	out 0x20, al
   428 000002F0 61                  <1> 	popa
   429 000002F1 FB                  <1> 	sti
   430 000002F2 CF                  <1> 	iret
   431                              <1> .nosighook:
   432                              <1> 		;UNMASK ALL INTS
   433 000002F3 E621                <1> 	out 0x21, al
   434 000002F5 E6A1                <1> 	out 0xA1, al
   435 000002F7 B020                <1> 	mov al, 0x20
   436 000002F9 E6A0                <1> 	out 0xA0, al
   437 000002FB E620                <1> 	out 0x20, al
   438                              <1> 		;RESET PIT DIVISOR
   439 000002FD 66A1[5A020000]      <1> 	mov ax, [pitdiv]
   440 00000303 E640                <1> 	out 0x40, al
   441 00000305 66C1C008            <1> 	rol ax, 8
   442 00000309 E640                <1> 	out 0x40, al
   443                              <1> 		;RESET PIC
   444 0000030B B020                <1> 	mov al, 0x20
   445 0000030D E620                <1> 	out 0x20, al
   446 0000030F 61                  <1> 	popa
   447 00000310 FB                  <1> 	sti
   448 00000311 BC[82ED0000]        <1> 	mov esp, stackend ;reset stack
   449 00000316 E933290000          <1> 	jmp returnfromexp
   450                              <1> %endif
   451 0000031B 0A                  <1> rtcrate db 10
   452                              <1> rtcint:	;this runs at 64Hz which is perfect for 60Hz displays
   453                              <1> %ifdef io.serial
   454                              <1> %else
   455                              <1> %ifdef terminal.vsync
   456                              <1> 	cli
   457                              <1> 	cmp byte [termcopyneeded], 0
   458                              <1> 	je .nocopy
   459                              <1> 	call newtermcopy
   460                              <1> .nocopy
   461                              <1> 	push eax
   462                              <1> 	mov al, 0xC
   463                              <1> 	out 0x70, al
   464                              <1> 	in al, 0x71
   465                              <1> 	pop eax
   466                              <1> 	sti
   467                              <1> %endif
   468                              <1> %endif
   469 0000031C E92E000000          <1> 	jmp handled4
   470                              <1> %ifdef rtl8139.included
   471                              <1> rtl8139.irq:
   472                              <1> 	cli
   473                              <1> 	push edx
   474                              <1> 	push eax
   475                              <1> 	mov edx, [rtl8139.basenicaddr]
   476                              <1> 	add edx, rtl8139.ISR
   477                              <1> 	xor eax, eax
   478                              <1> 	in ax, dx
   479                              <1> 	out dx, ax
   480                              <1> 	pop eax
   481                              <1> 	pop edx
   482                              <1> 	sti
   483                              <1> 	jmp handled4
   484                              <1> %endif
   485                              <1> %ifdef sound.included
   486                              <1> sblaster.irq:
   487                              <1> 	cli
   488                              <1> 	pusha
   489                              <1> 	cmp byte [SoundBlaster], 1
   490                              <1> 	je near sblaster.cont
   491                              <1> 	jmp handled2
   492                              <1> %endif
   493                              <1> 	
   494                              <1> timekeeper:
   495 00000321 50                  <1> 	push eax
   496 00000322 A1[64020000]        <1> 	mov eax, [timenanoseconds]
   497 00000327 0305[5C020000]      <1> 	add eax, [timeinterval]
   498 0000032D 3D00CA9A3B          <1> 	cmp eax, 1000000000
   499 00000332 720B                <1> 	jb nonanosecondrollover
   500 00000334 FF05[60020000]      <1> 	inc dword [timeseconds]
   501 0000033A 2D00CA9A3B          <1> 	sub eax, 1000000000
   502                              <1> 	%ifdef gui.time
   503                              <1> 		;REMOVE THIS IT IS NOT EFFICIENT
   504                              <1> 		cmp byte [guion], 1
   505                              <1> 		jne nonanosecondrollover
   506                              <1> 		cmp dword [dragging], 0
   507                              <1> 		jne nonanosecondrollover
   508                              <1> 		pusha
   509                              <1> 		call guitime
   510                              <1> 		popa
   511                              <1> 	%endif
   512                              <1> nonanosecondrollover:
   513 0000033F A3[64020000]        <1> 	mov [timenanoseconds], eax
   514 00000344 58                  <1> 	pop eax
   515 00000345 C3                  <1> 	ret
   516                              <1> 	
   517                              <1> handled2:
   518 00000346 61                  <1> 	popa
   519                              <1> handled3:
   520 00000347 FB                  <1> 	sti
   521                              <1> handled:
   522 00000348 50                  <1> 	push eax
   523 00000349 B020                <1> 	mov al, 0x20
   524 0000034B E620                <1> 	out 0x20, al
   525 0000034D 58                  <1> 	pop eax
   526 0000034E CF                  <1> 	iret
   527                              <1> handled4:
   528 0000034F 50                  <1> 	push eax
   529 00000350 B020                <1> 	mov al, 0x20
   530 00000352 E6A0                <1> 	out 0xA0, al
   531 00000354 E620                <1> 	out 0x20, al
   532 00000356 58                  <1> 	pop eax
   533 00000357 CF                  <1> 	iret
   534                              <1> [BITS 16]
   535                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   536                              <1> ;	16-bit limit/32-bit linear base address of GDT and IDT
   537                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   538 00000358 5700                <1> gdtr:	dw gdt_end - gdt - 1	; GDT limit
   539 0000035A 00000000            <1> 	dd 0    		; filled with linear, physical address of GDT
   540                              <1> 
   541 0000035E FF07                <1> idtr:	dw idt_end - idt - 1	; IDT limit
   542 00000360 00000000            <1> 	dd 0			; filled with linear, physical address of IDT
   543                              <1> 
   544                              <1> 
   545 00000364 0000                <1> gdt:	dw 0			; limit 15:0
   546 00000366 0000                <1> 	dw 0			; base 15:0
   547 00000368 00                  <1> 	db 0			; base 23:16
   548 00000369 00                  <1> 	db 0			; type
   549 0000036A 00                  <1> 	db 0			; limit 19:16, flags
   550 0000036B 00                  <1> 	db 0			; base 31:24
   551                              <1> ; linear data segment descriptor
   552                              <1> LINEAR_SEL	equ	$-gdt
   553 0000036C FFFF                <1> 	dw 0xFFFF		; limit 0xFFFFF
   554 0000036E 0000                <1> 	dw 0			; base for this one is always 0
   555 00000370 00                  <1> 	db 0
   556 00000371 92                  <1> 	db 0x92			; present, ring 0, data, expand-up, writable
   557 00000372 CF                  <1> 	db 0xCF			; page-granular, 32-bit
   558 00000373 00                  <1> 	db 0
   559                              <1> STACK_SEL	equ $-gdt
   560 00000374 0200                <1> gdts:	dw 2;(stackend)/4096
   561 00000376 0000                <1> 	dw 0
   562 00000378 00                  <1> 	db 0
   563 00000379 92                  <1> 	db 0x92
   564 0000037A CF                  <1> 	db 0xCF
   565 0000037B 00                  <1> 	db 0
   566                              <1> ; code segment descriptor
   567                              <1> SYS_CODE_SEL	equ	$-gdt
   568 0000037C FFFF                <1> gdt2:	dw 0xFFFF
   569 0000037E 0000                <1> 	dw 0			; (base gets set above)
   570 00000380 00                  <1> 	db 0
   571 00000381 9A                  <1> 	db 0x9A			; present, ring 0, code, non-conforming, readable
   572 00000382 CF                  <1> 	db 0xCF
   573 00000383 00                  <1> 	db 0
   574                              <1> ; data segment descriptor
   575                              <1> SYS_DATA_SEL	equ	$-gdt
   576 00000384 FFFF                <1> gdt3:	dw 0xFFFF
   577 00000386 0000                <1> 	dw 0			; (base gets set above)
   578 00000388 00                  <1> 	db 0
   579 00000389 92                  <1> 	db 0x92			; present, ring 0, data, expand-up, writable
   580 0000038A CF                  <1> 	db 0xCF
   581 0000038B 00                  <1> 	db 0
   582                              <1> NEW_CODE_SEL	equ	$-gdt
   583 0000038C FFFF                <1> gdt4:	dw 0xFFFF
   584 0000038E 0000                <1> 	dw 0			; (base gets set above)
   585 00000390 00                  <1> 	db 0
   586 00000391 9A                  <1> 	db 0x9A			; present, ring 0, code, non-conforming, readable
   587 00000392 CF                  <1> 	db 0xCF
   588 00000393 00                  <1> 	db 0
   589                              <1> ; data segment descriptor
   590                              <1> NEW_DATA_SEL	equ	$-gdt
   591 00000394 FFFF                <1> gdt5:	dw 0xFFFF
   592 00000396 0000                <1> 	dw 0			; (base gets set above)
   593 00000398 00                  <1> 	db 0
   594 00000399 92                  <1> 	db 0x92			; present, ring 0, data, expand-up, writable
   595 0000039A CF                  <1> 	db 0xCF
   596 0000039B 00                  <1> 	db 0
   597                              <1> V8086_CODE_SEL	equ $-gdt
   598 0000039C FFFF                <1> gdtv8086: dw 0xFFFF
   599 0000039E 0000                <1> 	dw 0
   600 000003A0 00                  <1> 	db 0
   601 000003A1 9A                  <1> 	db 0x9A
   602 000003A2 8F                  <1> 	db 0x8F
   603 000003A3 00                  <1> 	db 0
   604                              <1> V8086_DATA_SEL	equ $-gdt
   605 000003A4 FFFF                <1> gdtv80862: dw 0xFFFF
   606 000003A6 0000                <1> 	dw 0
   607 000003A8 00                  <1> 	db 0
   608 000003A9 92                  <1> 	db 0x92
   609 000003AA 8F                  <1> 	db 0x8F
   610 000003AB 00                  <1> 	db 0
   611                              <1> DOS_CODE_SEL	equ $-gdt	;this gives dos programs complete access to one megabyte at the beginning of memory
   612 000003AC 0001                <1> gdtdos:	dw 256	;give it 1 MB
   613 000003AE 0000                <1> 	dw 0
   614 000003B0 00                  <1> 	db 0
   615 000003B1 9A                  <1> 	db 0x9A
   616 000003B2 8F                  <1> 	db 0x8F ;16 bit
   617 000003B3 00                  <1> 	db 0
   618                              <1> DOS_DATA_SEL 	equ $-gdt
   619 000003B4 0001                <1> gdtdos2:	dw 256
   620 000003B6 0000                <1> 	dw 0
   621 000003B8 00                  <1> 	db 0
   622 000003B9 92                  <1> 	db 0x92
   623 000003BA 8F                  <1> 	db 0x8F ;16 bit
   624 000003BB 00                  <1> 	db 0
   625                              <1> gdt_end:
   626                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   627                              <1> ;	interrupt descriptor table (IDT)
   628                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   629                              <1> ; 32 reserved interrupts:
   630                              <1> idt:	
   631                              <1> %assign i 0
   632                              <1> %rep    8
   633                              <1> 		dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   634                              <1> %assign i i+1
   635                              <1> %endrep
   636 000003BC [DD0C]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   637                              <2> %assign i i+1
   638 000003C4 [E90C]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   639                              <2> %assign i i+1
   640 000003CC [F50C]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   641                              <2> %assign i i+1
   642 000003D4 [010D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   643                              <2> %assign i i+1
   644 000003DC [0D0D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   645                              <2> %assign i i+1
   646 000003E4 [190D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   647                              <2> %assign i i+1
   648 000003EC [250D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   649                              <2> %assign i i+1
   650 000003F4 [310D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   651                              <2> %assign i i+1
   652 000003FC [3D0D]1800008E0000  <1> 		dw unhand + 8*12,SYS_CODE_SEL,0x8E00,0	;double fault handler in original memory
   653                              <1> %assign i 9
   654                              <1> %rep    23
   655                              <1> 		dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   656                              <1> %assign i i+1
   657                              <1> %endrep
   658 00000404 [490D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   659                              <2> %assign i i+1
   660 0000040C [550D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   661                              <2> %assign i i+1
   662 00000414 [610D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   663                              <2> %assign i i+1
   664 0000041C [6D0D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   665                              <2> %assign i i+1
   666 00000424 [790D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   667                              <2> %assign i i+1
   668 0000042C [850D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   669                              <2> %assign i i+1
   670 00000434 [910D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   671                              <2> %assign i i+1
   672 0000043C [9D0D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   673                              <2> %assign i i+1
   674 00000444 [A90D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   675                              <2> %assign i i+1
   676 0000044C [B50D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   677                              <2> %assign i i+1
   678 00000454 [C10D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   679                              <2> %assign i i+1
   680 0000045C [CD0D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   681                              <2> %assign i i+1
   682 00000464 [D90D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   683                              <2> %assign i i+1
   684 0000046C [E50D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   685                              <2> %assign i i+1
   686 00000474 [F10D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   687                              <2> %assign i i+1
   688 0000047C [FD0D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   689                              <2> %assign i i+1
   690 00000484 [090E]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   691                              <2> %assign i i+1
   692 0000048C [150E]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   693                              <2> %assign i i+1
   694 00000494 [210E]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   695                              <2> %assign i i+1
   696 0000049C [2D0E]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   697                              <2> %assign i i+1
   698 000004A4 [390E]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   699                              <2> %assign i i+1
   700 000004AC [450E]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   701                              <2> %assign i i+1
   702 000004B4 [510E]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   703                              <2> %assign i i+1
   704 000004BC [BB29]2800008E0000  <1> 		dw int20h,NEW_CODE_SEL,0x8E00,0
   705 000004C4 [BF29]2800008E0000  <1> 		dw int21h,NEW_CODE_SEL,0x8E00,0
   706                              <1> %assign i 0x22
   707                              <1> %rep 14
   708                              <1> 		dw handled,NEW_CODE_SEL,0x8E00,0
   709                              <1> %assign i +1
   710                              <1> %endrep
   711 000004CC [4803]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   712                              <2> %assign i +1
   713 000004D4 [4803]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   714                              <2> %assign i +1
   715 000004DC [4803]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   716                              <2> %assign i +1
   717 000004E4 [4803]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   718                              <2> %assign i +1
   719 000004EC [4803]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   720                              <2> %assign i +1
   721 000004F4 [4803]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   722                              <2> %assign i +1
   723 000004FC [4803]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   724                              <2> %assign i +1
   725 00000504 [4803]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   726                              <2> %assign i +1
   727 0000050C [4803]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   728                              <2> %assign i +1
   729 00000514 [4803]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   730                              <2> %assign i +1
   731 0000051C [4803]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   732                              <2> %assign i +1
   733 00000524 [4803]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   734                              <2> %assign i +1
   735 0000052C [4803]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   736                              <2> %assign i +1
   737 00000534 [4803]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   738                              <2> %assign i +1
   739                              <1> ;INT 30h for os use and 3rd party use:
   740 0000053C [D51B]2800008E0000  <1> 		dw newints,NEW_CODE_SEL,0x8E00,0
   741                              <1> %assign i 0x31
   742                              <1> %rep 15
   743                              <1> 		dw handled,NEW_CODE_SEL,0x8E00,0
   744                              <1> %assign i +1
   745                              <1> %endrep
   746 00000544 [4803]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   747                              <2> %assign i +1
   748 0000054C [4803]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   749                              <2> %assign i +1
   750 00000554 [4803]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   751                              <2> %assign i +1
   752 0000055C [4803]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   753                              <2> %assign i +1
   754 00000564 [4803]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   755                              <2> %assign i +1
   756 0000056C [4803]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   757                              <2> %assign i +1
   758 00000574 [4803]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   759                              <2> %assign i +1
   760 0000057C [4803]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   761                              <2> %assign i +1
   762 00000584 [4803]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   763                              <2> %assign i +1
   764 0000058C [4803]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   765                              <2> %assign i +1
   766 00000594 [4803]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   767                              <2> %assign i +1
   768 0000059C [4803]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   769                              <2> %assign i +1
   770 000005A4 [4803]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   771                              <2> %assign i +1
   772 000005AC [4803]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   773                              <2> %assign i +1
   774 000005B4 [4803]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   775                              <2> %assign i +1
   776                              <1> ;and here we are at 0x40
   777                              <1> ;here are all the irq's
   778 000005BC [8C02]2800008E0000  <1> 		dw pitinterrupt,NEW_CODE_SEL,0x8E00,0 ;IRQ 0 = PIT
   779 000005C4 [4803]2800008E0000  <1> 		dw handled,NEW_CODE_SEL,0x8E00,0 ;IRQ 1 = keyboard
   780 000005CC [4803]2800008E0000  <1> 		dw handled,NEW_CODE_SEL,0x8E00,0 ;IRQ 2
   781 000005D4 [4803]2800008E0000  <1> 		dw handled,NEW_CODE_SEL,0x8E00,0 ;IRQ 3
   782 000005DC [4803]2800008E0000  <1> 		dw handled,NEW_CODE_SEL,0x8E00,0 ;IRQ 4
   783                              <1> 	%ifdef sound.included
   784                              <1> 		dw sblaster.irq,NEW_CODE_SEL,0x8E00,0 ;IRQ 5 = default SoundBlaster
   785                              <1> 	%else
   786 000005E4 [4803]2800008E0000  <1> 		dw handled,NEW_CODE_SEL,0x8E00,0 ;IRQ 5
   787                              <1> 	%endif
   788 000005EC [4803]2800008E0000  <1> 		dw handled,NEW_CODE_SEL,0x8E00,0 ;IRQ 6
   789 000005F4 [4803]2800008E0000  <1> 		dw handled,NEW_CODE_SEL,0x8E00,0 ;IRQ 7
   790 000005FC [1C03]2800008E0000  <1> 		dw rtcint,NEW_CODE_SEL,0x8E00,0 ;IRQ 8 = RTC
   791 00000604 [4F03]2800008E0000  <1> 		dw handled4,NEW_CODE_SEL,0x8E00,0 ;IRQ 9 = default NE2000
   792 0000060C [4F03]2800008E0000  <1> 		dw handled4,NEW_CODE_SEL,0x8E00,0 ;IRQ 10
   793                              <1> 	%ifdef rtl8139.included
   794                              <1> 		dw rtl8139.irq,NEW_CODE_SEL,0x8E00,0 ;IRQ 11 = default RTL8139
   795                              <1> 	%else
   796 00000614 [4F03]2800008E0000  <1> 		dw handled4,NEW_CODE_SEL,0x8E00,0 ;IRQ 11
   797                              <1> 	%endif
   798 0000061C [4F03]2800008E0000  <1> 		dw handled4,NEW_CODE_SEL,0x8E00,0 ;IRQ 12
   799 00000624 [4F03]2800008E0000  <1> 		dw handled4,NEW_CODE_SEL,0x8E00,0 ;IRQ 13
   800 0000062C [4F03]2800008E0000  <1> 		dw handled4,NEW_CODE_SEL,0x8E00,0 ;IRQ 14
   801 00000634 [4F03]2800008E0000  <1> 		dw handled4,NEW_CODE_SEL,0x8E00,0 ;IRQ 15
   802                              <1> ;This brings me up to 0x50
   803                              <1> %assign i 0x50
   804                              <1> %rep 176
   805                              <1> 		dw handled, NEW_CODE_SEL,0x8E00,0
   806                              <1> 		;dw unhand + i*12, NEW_CODE_SEL,0x8E00,0
   807                              <1> %assign i +1
   808                              <1> %endrep
   809 0000063C [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   810                              <2> 
   811                              <2> %assign i +1
   812 00000644 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   813                              <2> 
   814                              <2> %assign i +1
   815 0000064C [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   816                              <2> 
   817                              <2> %assign i +1
   818 00000654 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   819                              <2> 
   820                              <2> %assign i +1
   821 0000065C [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   822                              <2> 
   823                              <2> %assign i +1
   824 00000664 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   825                              <2> 
   826                              <2> %assign i +1
   827 0000066C [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   828                              <2> 
   829                              <2> %assign i +1
   830 00000674 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   831                              <2> 
   832                              <2> %assign i +1
   833 0000067C [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   834                              <2> 
   835                              <2> %assign i +1
   836 00000684 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   837                              <2> 
   838                              <2> %assign i +1
   839 0000068C [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   840                              <2> 
   841                              <2> %assign i +1
   842 00000694 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   843                              <2> 
   844                              <2> %assign i +1
   845 0000069C [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   846                              <2> 
   847                              <2> %assign i +1
   848 000006A4 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   849                              <2> 
   850                              <2> %assign i +1
   851 000006AC [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   852                              <2> 
   853                              <2> %assign i +1
   854 000006B4 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   855                              <2> 
   856                              <2> %assign i +1
   857 000006BC [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   858                              <2> 
   859                              <2> %assign i +1
   860 000006C4 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   861                              <2> 
   862                              <2> %assign i +1
   863 000006CC [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   864                              <2> 
   865                              <2> %assign i +1
   866 000006D4 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   867                              <2> 
   868                              <2> %assign i +1
   869 000006DC [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   870                              <2> 
   871                              <2> %assign i +1
   872 000006E4 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   873                              <2> 
   874                              <2> %assign i +1
   875 000006EC [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   876                              <2> 
   877                              <2> %assign i +1
   878 000006F4 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   879                              <2> 
   880                              <2> %assign i +1
   881 000006FC [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   882                              <2> 
   883                              <2> %assign i +1
   884 00000704 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   885                              <2> 
   886                              <2> %assign i +1
   887 0000070C [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   888                              <2> 
   889                              <2> %assign i +1
   890 00000714 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   891                              <2> 
   892                              <2> %assign i +1
   893 0000071C [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   894                              <2> 
   895                              <2> %assign i +1
   896 00000724 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   897                              <2> 
   898                              <2> %assign i +1
   899 0000072C [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   900                              <2> 
   901                              <2> %assign i +1
   902 00000734 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   903                              <2> 
   904                              <2> %assign i +1
   905 0000073C [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   906                              <2> 
   907                              <2> %assign i +1
   908 00000744 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   909                              <2> 
   910                              <2> %assign i +1
   911 0000074C [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   912                              <2> 
   913                              <2> %assign i +1
   914 00000754 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   915                              <2> 
   916                              <2> %assign i +1
   917 0000075C [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   918                              <2> 
   919                              <2> %assign i +1
   920 00000764 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   921                              <2> 
   922                              <2> %assign i +1
   923 0000076C [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   924                              <2> 
   925                              <2> %assign i +1
   926 00000774 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   927                              <2> 
   928                              <2> %assign i +1
   929 0000077C [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   930                              <2> 
   931                              <2> %assign i +1
   932 00000784 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   933                              <2> 
   934                              <2> %assign i +1
   935 0000078C [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   936                              <2> 
   937                              <2> %assign i +1
   938 00000794 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   939                              <2> 
   940                              <2> %assign i +1
   941 0000079C [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   942                              <2> 
   943                              <2> %assign i +1
   944 000007A4 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   945                              <2> 
   946                              <2> %assign i +1
   947 000007AC [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   948                              <2> 
   949                              <2> %assign i +1
   950 000007B4 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   951                              <2> 
   952                              <2> %assign i +1
   953 000007BC [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   954                              <2> 
   955                              <2> %assign i +1
   956 000007C4 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   957                              <2> 
   958                              <2> %assign i +1
   959 000007CC [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   960                              <2> 
   961                              <2> %assign i +1
   962 000007D4 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   963                              <2> 
   964                              <2> %assign i +1
   965 000007DC [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   966                              <2> 
   967                              <2> %assign i +1
   968 000007E4 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   969                              <2> 
   970                              <2> %assign i +1
   971 000007EC [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   972                              <2> 
   973                              <2> %assign i +1
   974 000007F4 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   975                              <2> 
   976                              <2> %assign i +1
   977 000007FC [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   978                              <2> 
   979                              <2> %assign i +1
   980 00000804 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   981                              <2> 
   982                              <2> %assign i +1
   983 0000080C [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   984                              <2> 
   985                              <2> %assign i +1
   986 00000814 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   987                              <2> 
   988                              <2> %assign i +1
   989 0000081C [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   990                              <2> 
   991                              <2> %assign i +1
   992 00000824 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   993                              <2> 
   994                              <2> %assign i +1
   995 0000082C [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   996                              <2> 
   997                              <2> %assign i +1
   998 00000834 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   999                              <2> 
  1000                              <2> %assign i +1
  1001 0000083C [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1002                              <2> 
  1003                              <2> %assign i +1
  1004 00000844 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1005                              <2> 
  1006                              <2> %assign i +1
  1007 0000084C [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1008                              <2> 
  1009                              <2> %assign i +1
  1010 00000854 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1011                              <2> 
  1012                              <2> %assign i +1
  1013 0000085C [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1014                              <2> 
  1015                              <2> %assign i +1
  1016 00000864 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1017                              <2> 
  1018                              <2> %assign i +1
  1019 0000086C [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1020                              <2> 
  1021                              <2> %assign i +1
  1022 00000874 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1023                              <2> 
  1024                              <2> %assign i +1
  1025 0000087C [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1026                              <2> 
  1027                              <2> %assign i +1
  1028 00000884 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1029                              <2> 
  1030                              <2> %assign i +1
  1031 0000088C [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1032                              <2> 
  1033                              <2> %assign i +1
  1034 00000894 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1035                              <2> 
  1036                              <2> %assign i +1
  1037 0000089C [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1038                              <2> 
  1039                              <2> %assign i +1
  1040 000008A4 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1041                              <2> 
  1042                              <2> %assign i +1
  1043 000008AC [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1044                              <2> 
  1045                              <2> %assign i +1
  1046 000008B4 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1047                              <2> 
  1048                              <2> %assign i +1
  1049 000008BC [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1050                              <2> 
  1051                              <2> %assign i +1
  1052 000008C4 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1053                              <2> 
  1054                              <2> %assign i +1
  1055 000008CC [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1056                              <2> 
  1057                              <2> %assign i +1
  1058 000008D4 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1059                              <2> 
  1060                              <2> %assign i +1
  1061 000008DC [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1062                              <2> 
  1063                              <2> %assign i +1
  1064 000008E4 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1065                              <2> 
  1066                              <2> %assign i +1
  1067 000008EC [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1068                              <2> 
  1069                              <2> %assign i +1
  1070 000008F4 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1071                              <2> 
  1072                              <2> %assign i +1
  1073 000008FC [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1074                              <2> 
  1075                              <2> %assign i +1
  1076 00000904 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1077                              <2> 
  1078                              <2> %assign i +1
  1079 0000090C [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1080                              <2> 
  1081                              <2> %assign i +1
  1082 00000914 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1083                              <2> 
  1084                              <2> %assign i +1
  1085 0000091C [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1086                              <2> 
  1087                              <2> %assign i +1
  1088 00000924 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1089                              <2> 
  1090                              <2> %assign i +1
  1091 0000092C [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1092                              <2> 
  1093                              <2> %assign i +1
  1094 00000934 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1095                              <2> 
  1096                              <2> %assign i +1
  1097 0000093C [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1098                              <2> 
  1099                              <2> %assign i +1
  1100 00000944 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1101                              <2> 
  1102                              <2> %assign i +1
  1103 0000094C [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1104                              <2> 
  1105                              <2> %assign i +1
  1106 00000954 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1107                              <2> 
  1108                              <2> %assign i +1
  1109 0000095C [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1110                              <2> 
  1111                              <2> %assign i +1
  1112 00000964 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1113                              <2> 
  1114                              <2> %assign i +1
  1115 0000096C [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1116                              <2> 
  1117                              <2> %assign i +1
  1118 00000974 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1119                              <2> 
  1120                              <2> %assign i +1
  1121 0000097C [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1122                              <2> 
  1123                              <2> %assign i +1
  1124 00000984 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1125                              <2> 
  1126                              <2> %assign i +1
  1127 0000098C [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1128                              <2> 
  1129                              <2> %assign i +1
  1130 00000994 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1131                              <2> 
  1132                              <2> %assign i +1
  1133 0000099C [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1134                              <2> 
  1135                              <2> %assign i +1
  1136 000009A4 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1137                              <2> 
  1138                              <2> %assign i +1
  1139 000009AC [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1140                              <2> 
  1141                              <2> %assign i +1
  1142 000009B4 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1143                              <2> 
  1144                              <2> %assign i +1
  1145 000009BC [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1146                              <2> 
  1147                              <2> %assign i +1
  1148 000009C4 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1149                              <2> 
  1150                              <2> %assign i +1
  1151 000009CC [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1152                              <2> 
  1153                              <2> %assign i +1
  1154 000009D4 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1155                              <2> 
  1156                              <2> %assign i +1
  1157 000009DC [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1158                              <2> 
  1159                              <2> %assign i +1
  1160 000009E4 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1161                              <2> 
  1162                              <2> %assign i +1
  1163 000009EC [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1164                              <2> 
  1165                              <2> %assign i +1
  1166 000009F4 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1167                              <2> 
  1168                              <2> %assign i +1
  1169 000009FC [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1170                              <2> 
  1171                              <2> %assign i +1
  1172 00000A04 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1173                              <2> 
  1174                              <2> %assign i +1
  1175 00000A0C [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1176                              <2> 
  1177                              <2> %assign i +1
  1178 00000A14 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1179                              <2> 
  1180                              <2> %assign i +1
  1181 00000A1C [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1182                              <2> 
  1183                              <2> %assign i +1
  1184 00000A24 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1185                              <2> 
  1186                              <2> %assign i +1
  1187 00000A2C [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1188                              <2> 
  1189                              <2> %assign i +1
  1190 00000A34 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1191                              <2> 
  1192                              <2> %assign i +1
  1193 00000A3C [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1194                              <2> 
  1195                              <2> %assign i +1
  1196 00000A44 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1197                              <2> 
  1198                              <2> %assign i +1
  1199 00000A4C [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1200                              <2> 
  1201                              <2> %assign i +1
  1202 00000A54 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1203                              <2> 
  1204                              <2> %assign i +1
  1205 00000A5C [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1206                              <2> 
  1207                              <2> %assign i +1
  1208 00000A64 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1209                              <2> 
  1210                              <2> %assign i +1
  1211 00000A6C [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1212                              <2> 
  1213                              <2> %assign i +1
  1214 00000A74 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1215                              <2> 
  1216                              <2> %assign i +1
  1217 00000A7C [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1218                              <2> 
  1219                              <2> %assign i +1
  1220 00000A84 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1221                              <2> 
  1222                              <2> %assign i +1
  1223 00000A8C [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1224                              <2> 
  1225                              <2> %assign i +1
  1226 00000A94 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1227                              <2> 
  1228                              <2> %assign i +1
  1229 00000A9C [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1230                              <2> 
  1231                              <2> %assign i +1
  1232 00000AA4 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1233                              <2> 
  1234                              <2> %assign i +1
  1235 00000AAC [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1236                              <2> 
  1237                              <2> %assign i +1
  1238 00000AB4 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1239                              <2> 
  1240                              <2> %assign i +1
  1241 00000ABC [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1242                              <2> 
  1243                              <2> %assign i +1
  1244 00000AC4 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1245                              <2> 
  1246                              <2> %assign i +1
  1247 00000ACC [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1248                              <2> 
  1249                              <2> %assign i +1
  1250 00000AD4 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1251                              <2> 
  1252                              <2> %assign i +1
  1253 00000ADC [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1254                              <2> 
  1255                              <2> %assign i +1
  1256 00000AE4 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1257                              <2> 
  1258                              <2> %assign i +1
  1259 00000AEC [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1260                              <2> 
  1261                              <2> %assign i +1
  1262 00000AF4 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1263                              <2> 
  1264                              <2> %assign i +1
  1265 00000AFC [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1266                              <2> 
  1267                              <2> %assign i +1
  1268 00000B04 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1269                              <2> 
  1270                              <2> %assign i +1
  1271 00000B0C [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1272                              <2> 
  1273                              <2> %assign i +1
  1274 00000B14 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1275                              <2> 
  1276                              <2> %assign i +1
  1277 00000B1C [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1278                              <2> 
  1279                              <2> %assign i +1
  1280 00000B24 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1281                              <2> 
  1282                              <2> %assign i +1
  1283 00000B2C [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1284                              <2> 
  1285                              <2> %assign i +1
  1286 00000B34 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1287                              <2> 
  1288                              <2> %assign i +1
  1289 00000B3C [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1290                              <2> 
  1291                              <2> %assign i +1
  1292 00000B44 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1293                              <2> 
  1294                              <2> %assign i +1
  1295 00000B4C [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1296                              <2> 
  1297                              <2> %assign i +1
  1298 00000B54 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1299                              <2> 
  1300                              <2> %assign i +1
  1301 00000B5C [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1302                              <2> 
  1303                              <2> %assign i +1
  1304 00000B64 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1305                              <2> 
  1306                              <2> %assign i +1
  1307 00000B6C [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1308                              <2> 
  1309                              <2> %assign i +1
  1310 00000B74 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1311                              <2> 
  1312                              <2> %assign i +1
  1313 00000B7C [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1314                              <2> 
  1315                              <2> %assign i +1
  1316 00000B84 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1317                              <2> 
  1318                              <2> %assign i +1
  1319 00000B8C [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1320                              <2> 
  1321                              <2> %assign i +1
  1322 00000B94 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1323                              <2> 
  1324                              <2> %assign i +1
  1325 00000B9C [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1326                              <2> 
  1327                              <2> %assign i +1
  1328 00000BA4 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1329                              <2> 
  1330                              <2> %assign i +1
  1331 00000BAC [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1332                              <2> 
  1333                              <2> %assign i +1
  1334 00000BB4 [4803]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1335                              <2> 
  1336                              <2> %assign i +1
  1337                              <1> idt_end:
  1338                              <1> [BITS 32]
  1339                                  	%include "source/realmode.asm"
  1340                              <1> realmode:	;make sure the real mode program's address is in realmodeptr 
  1341                              <1> 			;and the return address is in realmodereturn
  1342 00000BBC FA                  <1> 	cli
  1343 00000BBD A3[CF0C0000]        <1> 	mov [realmodeeax], eax
  1344 00000BC2 891D[CB0C0000]      <1> 	mov [realmodeebx], ebx
  1345 00000BC8 8925[BD0C0000]      <1> 	mov [pmodeesp], esp
  1346                              <1> 
  1347 00000BCE BB[C70C0000]        <1> 	mov ebx, cr0old
  1348                              <1> rmcopytofirstmbyte:
  1349 00000BD3 8B03                <1> 	mov eax, [ebx]
  1350 00000BD5 658903              <1> 	mov [gs:ebx], eax
  1351 00000BD8 81C304000000        <1> 	add ebx, 4
  1352 00000BDE 81FB[D70C0000]      <1> 	cmp ebx, realmodeptr
  1353 00000BE4 76ED                <1> 	jbe rmcopytofirstmbyte
  1354                              <1> 
  1355 00000BE6 EA[ED0B0000]3800    <1> 	jmp V8086_CODE_SEL:protected16bit
  1356                              <1> 
  1357                              <1> [BITS 16]
  1358                              <1> protected16bit:
  1359 00000BED B84000              <1> 	mov ax, V8086_DATA_SEL
  1360 00000BF0 8ED8                <1> 	mov ds, ax
  1361 00000BF2 8EC0                <1> 	mov es, ax
  1362 00000BF4 8EE0                <1> 	mov fs, ax
  1363 00000BF6 8EE8                <1> 	mov gs, ax
  1364 00000BF8 8ED0                <1> 	mov ss, ax
  1365 00000BFA 66BC[82ED0000]      <1> 	mov esp, stackend
  1366 00000C00 0F20C0              <1> 	mov eax, cr0
  1367 00000C03 66A3[C70C]          <1> 	mov [cr0old], eax
  1368 00000C07 6625FEFFFF7F        <1> 	and eax, 0x7FFFFFFE
  1369 00000C0D 0F22C0              <1> 	mov cr0, eax	;now in real mode
  1370 00000C10 EA[150C]0010        <1> 	jmp 0x1000:inrealmode
  1371                              <1> 
  1372                              <1> inrealmode:
  1373 00000C15 8CC8                <1> 	mov ax, cs
  1374 00000C17 8ED8                <1> 	mov ds, ax
  1375 00000C19 8EC0                <1> 	mov es, ax
  1376 00000C1B 8EE0                <1> 	mov fs, ax
  1377 00000C1D 8EE8                <1> 	mov gs, ax
  1378 00000C1F 8ED0                <1> 	mov ss, ax
  1379 00000C21 BC[82ED]            <1> 	mov sp, stackend ;because this is at 0x1000: and not 0x10000: it works
  1380                              <1> 	
  1381 00000C24 B011                <1> 	mov al, 0x11
  1382 00000C26 E620                <1> 	out 0x20, al
  1383 00000C28 E6A0                <1> 	out 0xA0, al
  1384 00000C2A B008                <1> 	mov al, 0x8		;interrupt for master
  1385 00000C2C E621                <1> 	out 0x21, al
  1386 00000C2E B070                <1> 	mov al, 0x70	;interrupt for slave
  1387 00000C30 E6A1                <1> 	out 0xA1, al
  1388 00000C32 B004                <1> 	mov al, 4
  1389 00000C34 E621                <1> 	out 0x21, al
  1390 00000C36 B002                <1> 	mov al, 2
  1391 00000C38 E6A1                <1> 	out 0xA1, al
  1392 00000C3A B001                <1> 	mov al, 0x1
  1393 00000C3C E621                <1> 	out 0x21, al
  1394 00000C3E B001                <1> 	mov al, 0x1
  1395 00000C40 E6A1                <1> 	out 0xA1, al
  1396                              <1> 	
  1397 00000C42 0F011E[C10C]        <1> 	lidt [idt_real]
  1398 00000C47 FB                  <1> 	sti
  1399                              <1> 
  1400 00000C48 66A1[CF0C]          <1> 	mov eax, [realmodeeax]
  1401 00000C4C 668B1E[CB0C]        <1> 	mov ebx, [realmodeebx]
  1402                              <1> 
  1403 00000C51 FF16[D70C]          <1> 	call word [realmodeptr] ;call the real mode program here
  1404                              <1> 
  1405 00000C55 66A3[CF0C]          <1> 	mov [realmodeeax], eax
  1406 00000C59 66891E[CB0C]        <1> 	mov [realmodeebx], ebx
  1407                              <1> 
  1408 00000C5E FA                  <1> 	cli
  1409 00000C5F 0F0116[5803]        <1> 	lgdt [gdtr]
  1410 00000C64 0F011E[5E03]        <1> 	lidt [idtr]
  1411 00000C69 0F20C0              <1> 	mov eax, cr0
  1412 00000C6C 0C01                <1> 	or al, 1
  1413 00000C6E 0F22C0              <1> 	mov cr0,eax
  1414 00000C71 EA[760C]2800        <1> 	jmp NEW_CODE_SEL:returntopmode
  1415                              <1> 
  1416                              <1> [BITS 32]
  1417                              <1> returntopmode:
  1418 00000C76 66B83000            <1> 	mov ax, NEW_DATA_SEL
  1419 00000C7A 8ED8                <1> 	mov ds, ax
  1420 00000C7C 8EC0                <1> 	mov es, ax
  1421 00000C7E 8EE0                <1> 	mov fs, ax
  1422 00000C80 8ED0                <1> 	mov ss, ax
  1423 00000C82 8B25[BD0C0000]      <1> 	mov esp, [pmodeesp]
  1424 00000C88 66B82000            <1> 	mov ax, SYS_DATA_SEL
  1425 00000C8C 8EE8                <1> 	mov gs, ax
  1426                              <1> 
  1427 00000C8E BB[C70C0000]        <1> 	mov ebx, cr0old
  1428                              <1> rmcopyfromfirstmbyte:
  1429 00000C93 658B03              <1> 	mov eax, [gs:ebx]
  1430 00000C96 8903                <1> 	mov [ebx], eax
  1431 00000C98 81C304000000        <1> 	add ebx, 4
  1432 00000C9E 81FB[D70C0000]      <1> 	cmp ebx, realmodeptr
  1433 00000CA4 76ED                <1> 	jbe rmcopyfromfirstmbyte
  1434                              <1> 
  1435 00000CA6 E8B6540000          <1> 	call initialize.pic ;reset irq's and masks
  1436 00000CAB FB                  <1> 	sti
  1437 00000CAC A1[CF0C0000]        <1> 	mov eax, [realmodeeax]
  1438 00000CB1 8B1D[CB0C0000]      <1> 	mov ebx, [realmodeebx]
  1439 00000CB7 FF25[D30C0000]      <1> 	jmp dword [realmodereturn]
  1440                              <1> 	
  1441 00000CBD 00000000            <1> pmodeesp dd 0
  1442                              <1> idt_real:
  1443 00000CC1 FF03                <1> 	dw 0x3FF
  1444 00000CC3 00000000            <1> 	dd 0
  1445 00000CC7 00000000            <1> cr0old dd 0
  1446 00000CCB 00000000            <1> realmodeebx dd 0
  1447 00000CCF 00000000            <1> realmodeeax dd 0
  1448 00000CD3 00000000            <1> realmodereturn dd 0
  1449 00000CD7 0000                <1> realmodeptr dw 0
  1450 00000CD9 00000000            <1> dd 0 ;make sure the copy thing doesnt overflow
  1451                                  [BITS 32]
  1452                                      %include "source/exception.asm"
  1453                              <1> %ifdef exceptions.included
  1454                              <1> unhand:	
  1455                              <1> 	%assign i 0
  1456                              <1> 	%rep 32
  1457                              <1> 	mov byte [intprob], i
  1458                              <1> 	jmp unhand2
  1459                              <1> 	%assign i i+1
  1460                              <1> 	%endrep
  1461 00000CDD C605[8F110000]00    <2>  mov byte [intprob], i
  1462 00000CE4 E974010000          <2>  jmp unhand2
  1463                              <2>  %assign i i+1
  1464 00000CE9 C605[8F110000]01    <2>  mov byte [intprob], i
  1465 00000CF0 E968010000          <2>  jmp unhand2
  1466                              <2>  %assign i i+1
  1467 00000CF5 C605[8F110000]02    <2>  mov byte [intprob], i
  1468 00000CFC E95C010000          <2>  jmp unhand2
  1469                              <2>  %assign i i+1
  1470 00000D01 C605[8F110000]03    <2>  mov byte [intprob], i
  1471 00000D08 E950010000          <2>  jmp unhand2
  1472                              <2>  %assign i i+1
  1473 00000D0D C605[8F110000]04    <2>  mov byte [intprob], i
  1474 00000D14 E944010000          <2>  jmp unhand2
  1475                              <2>  %assign i i+1
  1476 00000D19 C605[8F110000]05    <2>  mov byte [intprob], i
  1477 00000D20 E938010000          <2>  jmp unhand2
  1478                              <2>  %assign i i+1
  1479 00000D25 C605[8F110000]06    <2>  mov byte [intprob], i
  1480 00000D2C E92C010000          <2>  jmp unhand2
  1481                              <2>  %assign i i+1
  1482 00000D31 C605[8F110000]07    <2>  mov byte [intprob], i
  1483 00000D38 E920010000          <2>  jmp unhand2
  1484                              <2>  %assign i i+1
  1485 00000D3D C605[8F110000]08    <2>  mov byte [intprob], i
  1486 00000D44 E914010000          <2>  jmp unhand2
  1487                              <2>  %assign i i+1
  1488 00000D49 C605[8F110000]09    <2>  mov byte [intprob], i
  1489 00000D50 E908010000          <2>  jmp unhand2
  1490                              <2>  %assign i i+1
  1491 00000D55 C605[8F110000]0A    <2>  mov byte [intprob], i
  1492 00000D5C E9FC000000          <2>  jmp unhand2
  1493                              <2>  %assign i i+1
  1494 00000D61 C605[8F110000]0B    <2>  mov byte [intprob], i
  1495 00000D68 E9F0000000          <2>  jmp unhand2
  1496                              <2>  %assign i i+1
  1497 00000D6D C605[8F110000]0C    <2>  mov byte [intprob], i
  1498 00000D74 E9E4000000          <2>  jmp unhand2
  1499                              <2>  %assign i i+1
  1500 00000D79 C605[8F110000]0D    <2>  mov byte [intprob], i
  1501 00000D80 E9D8000000          <2>  jmp unhand2
  1502                              <2>  %assign i i+1
  1503 00000D85 C605[8F110000]0E    <2>  mov byte [intprob], i
  1504 00000D8C E9CC000000          <2>  jmp unhand2
  1505                              <2>  %assign i i+1
  1506 00000D91 C605[8F110000]0F    <2>  mov byte [intprob], i
  1507 00000D98 E9C0000000          <2>  jmp unhand2
  1508                              <2>  %assign i i+1
  1509 00000D9D C605[8F110000]10    <2>  mov byte [intprob], i
  1510 00000DA4 E9B4000000          <2>  jmp unhand2
  1511                              <2>  %assign i i+1
  1512 00000DA9 C605[8F110000]11    <2>  mov byte [intprob], i
  1513 00000DB0 E9A8000000          <2>  jmp unhand2
  1514                              <2>  %assign i i+1
  1515 00000DB5 C605[8F110000]12    <2>  mov byte [intprob], i
  1516 00000DBC E99C000000          <2>  jmp unhand2
  1517                              <2>  %assign i i+1
  1518 00000DC1 C605[8F110000]13    <2>  mov byte [intprob], i
  1519 00000DC8 E990000000          <2>  jmp unhand2
  1520                              <2>  %assign i i+1
  1521 00000DCD C605[8F110000]14    <2>  mov byte [intprob], i
  1522 00000DD4 E984000000          <2>  jmp unhand2
  1523                              <2>  %assign i i+1
  1524 00000DD9 C605[8F110000]15    <2>  mov byte [intprob], i
  1525 00000DE0 E978000000          <2>  jmp unhand2
  1526                              <2>  %assign i i+1
  1527 00000DE5 C605[8F110000]16    <2>  mov byte [intprob], i
  1528 00000DEC E96C000000          <2>  jmp unhand2
  1529                              <2>  %assign i i+1
  1530 00000DF1 C605[8F110000]17    <2>  mov byte [intprob], i
  1531 00000DF8 E960000000          <2>  jmp unhand2
  1532                              <2>  %assign i i+1
  1533 00000DFD C605[8F110000]18    <2>  mov byte [intprob], i
  1534 00000E04 E954000000          <2>  jmp unhand2
  1535                              <2>  %assign i i+1
  1536 00000E09 C605[8F110000]19    <2>  mov byte [intprob], i
  1537 00000E10 E948000000          <2>  jmp unhand2
  1538                              <2>  %assign i i+1
  1539 00000E15 C605[8F110000]1A    <2>  mov byte [intprob], i
  1540 00000E1C E93C000000          <2>  jmp unhand2
  1541                              <2>  %assign i i+1
  1542 00000E21 C605[8F110000]1B    <2>  mov byte [intprob], i
  1543 00000E28 E930000000          <2>  jmp unhand2
  1544                              <2>  %assign i i+1
  1545 00000E2D C605[8F110000]1C    <2>  mov byte [intprob], i
  1546 00000E34 E924000000          <2>  jmp unhand2
  1547                              <2>  %assign i i+1
  1548 00000E39 C605[8F110000]1D    <2>  mov byte [intprob], i
  1549 00000E40 E918000000          <2>  jmp unhand2
  1550                              <2>  %assign i i+1
  1551 00000E45 C605[8F110000]1E    <2>  mov byte [intprob], i
  1552 00000E4C E90C000000          <2>  jmp unhand2
  1553                              <2>  %assign i i+1
  1554 00000E51 C605[8F110000]1F    <2>  mov byte [intprob], i
  1555 00000E58 E900000000          <2>  jmp unhand2
  1556                              <2>  %assign i i+1
  1557                              <1> unhand2:
  1558 00000E5D FA                  <1> 	cli
  1559 00000E5E 1E                  <1> 	push ds
  1560 00000E5F 06                  <1> 	push es
  1561 00000E60 0FA0                <1> 	push fs
  1562 00000E62 0FA8                <1> 	push gs
  1563 00000E64 16                  <1> 	push ss
  1564 00000E65 60                  <1> 	pushad
  1565                              <1> %ifdef gui.included
  1566 00000E66 803D[9CDB0000]00    <1> 	cmp byte [guion], 0
  1567 00000E6D 0F8432000000        <1> 	je near noguiunhandstuff
  1568 00000E73 66C705[89110000]08- <1> 	mov word [locunhandy], 8
  1569 00000E7B 00                  <1>
  1570 00000E7C 66C705[8B110000]08- <1> 	mov word [locunhandx], 8
  1571 00000E84 00                  <1>
  1572 00000E85 668B1D[F46D0000]    <1> 	mov bx, [background]
  1573 00000E8C 66891D[8D110000]    <1> 	mov [backgroundcache], bx
  1574 00000E93 C605[12580000]01    <1> 	mov byte [mousedisabled],1
  1575 00000E9A 66BB00F8            <1> 	mov bx, 1111100000000000b
  1576 00000E9E 66891D[F46D0000]    <1> 	mov [background], bx
  1577                              <1> noguiunhandstuff:
  1578                              <1> %endif
  1579 00000EA5 89E6                <1> 	mov esi, esp
  1580 00000EA7 8935[7D110000]      <1> 	mov [espfirst], esi
  1581 00000EAD 81C6BC000000        <1> 	add esi, ((unhndrgend - unhndrg)/15)*4
  1582 00000EB3 8935[79110000]      <1> 	mov [esploc], esi
  1583 00000EB9 BE[9E110000]        <1> 	mov esi, unhandmsg
  1584 00000EBE 8935[81110000]      <1> 	mov [esiloc], esi
  1585 00000EC4 31C9                <1> 	xor ecx, ecx
  1586 00000EC6 8A0D[8F110000]      <1> 	mov cl, [intprob]
  1587 00000ECC BB[6D150000]        <1> 	mov ebx, errortypes
  1588 00000ED1 C1E102              <1> 	shl ecx, 2
  1589 00000ED4 01CB                <1> 	add ebx, ecx
  1590 00000ED6 81FB[AD150000]      <1> 	cmp ebx, errortypesend
  1591 00000EDC 7205                <1> 	jb gooderrortype
  1592 00000EDE BB[AD150000]        <1> 	mov ebx, errortypesend
  1593                              <1> gooderrortype:
  1594 00000EE3 8B33                <1> 	mov esi, [ebx]
  1595                              <1> %ifdef gui.included
  1596 00000EE5 803D[9CDB0000]00    <1> 	cmp byte [guion], 0
  1597 00000EEC 0F842D000000        <1> 	je near errortext
  1598 00000EF2 668B0D[89110000]    <1> 	mov cx, [locunhandy]
  1599 00000EF9 668B15[8B110000]    <1> 	mov dx, [locunhandx]
  1600 00000F00 66B80100            <1> 	mov ax, 1
  1601 00000F04 6631DB              <1> 	xor bx, bx
  1602 00000F07 E83D650000          <1> 	call showstring2
  1603 00000F0C 66890D[89110000]    <1> 	mov [locunhandy], cx
  1604 00000F13 668915[8B110000]    <1> 	mov [locunhandx], dx
  1605 00000F1A E905000000          <1> 	jmp errortextdone
  1606                              <1> %endif
  1607                              <1> errortext:
  1608 00000F1F E8070E0000          <1> 	call print		;;get the error message and print it
  1609                              <1> errortextdone:
  1610 00000F24 31C9                <1> 	xor ecx, ecx
  1611 00000F26 8A0D[8F110000]      <1> 	mov cl, [intprob]
  1612 00000F2C E8E1010000          <1> 	call expdump
  1613                              <1> dumpstack:
  1614 00000F31 8B35[79110000]      <1> 	mov esi, [esploc]
  1615 00000F37 39E6                <1> 	cmp esi, esp
  1616 00000F39 7216                <1> 	jb donedump
  1617 00000F3B 368B0E              <1> 	mov ecx, [ss:esi]
  1618 00000F3E 81EE04000000        <1> 	sub esi, 4
  1619 00000F44 8935[79110000]      <1> 	mov [esploc], esi
  1620 00000F4A E8C3010000          <1> 	call expdump
  1621 00000F4F EBE0                <1> 	jmp dumpstack
  1622                              <1> donedump:
  1623 00000F51 0F20C1              <1> 	mov ecx, cr0
  1624 00000F54 E8B9010000          <1> 	call expdump
  1625 00000F59 0F20D1              <1> 	mov ecx, cr2
  1626 00000F5C E8B1010000          <1> 	call expdump
  1627 00000F61 0F20D9              <1> 	mov ecx, cr3
  1628 00000F64 E8A9010000          <1> 	call expdump
  1629 00000F69 0F20E1              <1> 	mov ecx, cr4
  1630 00000F6C E8A1010000          <1> 	call expdump
  1631 00000F71 0F00C9              <1> 	str ecx
  1632 00000F74 E899010000          <1> 	call expdump
  1633 00000F79 0F010D[98110000]    <1> 	sidt [igdtcache]
  1634 00000F80 8B0D[9A110000]      <1> 	mov ecx, [igdtcache + 2]
  1635 00000F86 E887010000          <1> 	call expdump
  1636 00000F8B 0F0105[98110000]    <1> 	sgdt [igdtcache]
  1637 00000F92 8B0D[9A110000]      <1> 	mov ecx, [igdtcache + 2]
  1638 00000F98 E875010000          <1> 	call expdump
  1639 00000F9D 0F00C1              <1> 	sldt ecx
  1640 00000FA0 E86D010000          <1> 	call expdump
  1641 00000FA5 8B35[79110000]      <1> 	mov esi, [esploc]
  1642 00000FAB 368B7C2434          <1> 	mov edi, [ss:esp + 52]
  1643 00000FB0 81C710000000        <1> 	add edi, 16
  1644 00000FB6 893D[94110000]      <1> 	mov [codelocend], edi
  1645 00000FBC 81EF20000000        <1> 	sub edi, 32
  1646                              <1> dumpcodeloop:
  1647 00000FC2 893D[90110000]      <1> 	mov [codeloc], edi
  1648 00000FC8 8B0F                <1> 	mov ecx, [edi]
  1649 00000FCA E843010000          <1> 	call expdump
  1650 00000FCF 8B3D[90110000]      <1> 	mov edi, [codeloc]
  1651 00000FD5 81C704000000        <1> 	add edi, 4
  1652 00000FDB 3B3D[94110000]      <1> 	cmp edi, [codelocend]
  1653 00000FE1 72DF                <1> 	jb dumpcodeloop
  1654 00000FE3 BE[A3100000]        <1> 	mov esi, backtoosmsg
  1655                              <1> %ifdef gui.included
  1656 00000FE8 803D[9CDB0000]00    <1> 	cmp byte [guion], 0
  1657 00000FEF 741F                <1> 	je backtomsg
  1658                              <1> guibacktomsg:
  1659 00000FF1 668B15[8B110000]    <1> 	mov dx, [locunhandx]
  1660 00000FF8 668B0D[89110000]    <1> 	mov cx, [locunhandy]
  1661 00000FFF 66B80100            <1> 	mov ax, 1
  1662 00001003 6631DB              <1> 	xor bx, bx
  1663 00001006 E83E640000          <1> 	call showstring2
  1664 0000100B E905000000          <1> 	jmp backtomsgdone
  1665                              <1> backtomsg:
  1666                              <1> %endif
  1667 00001010 E8160D0000          <1> 	call print
  1668                              <1> backtomsgdone:
  1669 00001015 30C0                <1> 	xor al, al
  1670 00001017 E806130000          <1> 	call rdcharint
  1671 0000101C 803D[8F110000]03    <1> 	cmp byte [intprob], 3
  1672 00001023 7541                <1> 	jne nodebugint
  1673                              <1> %ifdef gui.included
  1674 00001025 803D[9CDB0000]00    <1> 	cmp byte [guion], 0
  1675 0000102C 7427                <1> 	je nodebuggui
  1676 0000102E 668B1D[8D110000]    <1> 	mov bx, [backgroundcache]
  1677 00001035 66891D[F46D0000]    <1> 	mov [background], bx
  1678 0000103C 6631DB              <1> 	xor bx, bx
  1679 0000103F C605[12580000]00    <1> 	mov byte [mousedisabled], 0
  1680 00001046 E85D5D0000          <1> 	call guiclear
  1681 0000104B E8A85D0000          <1> 	call reloadallgraphics
  1682 00001050 E821180000          <1> 	call termcopy
  1683                              <1> nodebuggui:
  1684                              <1> %endif
  1685 00001055 8B35[7D110000]      <1> 	mov esi, [espfirst]
  1686 0000105B 89F4                <1> 	mov esp, esi
  1687 0000105D 61                  <1> 	popad
  1688 0000105E 17                  <1> 	pop ss
  1689 0000105F 0FA9                <1> 	pop gs
  1690 00001061 0FA1                <1> 	pop fs
  1691 00001063 07                  <1> 	pop es
  1692 00001064 1F                  <1> 	pop ds
  1693 00001065 CF                  <1> 	iret
  1694                              <1> nodebugint:
  1695 00001066 61                  <1> 	popad
  1696 00001067 17                  <1> 	pop ss
  1697 00001068 0FA9                <1> 	pop gs
  1698 0000106A 0FA1                <1> 	pop fs
  1699 0000106C 07                  <1> 	pop es
  1700 0000106D 1F                  <1> 	pop ds
  1701                              <1> %ifdef gui.included
  1702 0000106E 803D[9CDB0000]00    <1> 	cmp byte [guion], 0
  1703 00001075 7427                <1> 	je returnunhandgui
  1704 00001077 668B1D[8D110000]    <1> 	mov bx, [backgroundcache]
  1705 0000107E 66891D[F46D0000]    <1> 	mov [background], bx
  1706 00001085 6631DB              <1> 	xor bx, bx
  1707 00001088 C605[12580000]00    <1> 	mov byte [mousedisabled], 0
  1708 0000108F E8145D0000          <1> 	call guiclear
  1709 00001094 E85F5D0000          <1> 	call reloadallgraphics
  1710 00001099 E8D8170000          <1> 	call termcopy
  1711                              <1> %endif
  1712                              <1> returnunhandgui:
  1713 0000109E E9171C0000          <1> 	jmp nwcmd
  1714 000010A3 506C6561736520706F- <1> backtoosmsg db "Please post any problems in the Issues section at solleros.googlecode.com",10
  1715 000010AC 737420616E79207072- <1>
  1716 000010B5 6F626C656D7320696E- <1>
  1717 000010BE 207468652049737375- <1>
  1718 000010C7 65732073656374696F- <1>
  1719 000010D0 6E20617420736F6C6C- <1>
  1720 000010D9 65726F732E676F6F67- <1>
  1721 000010E2 6C65636F64652E636F- <1>
  1722 000010EB 6D0A                <1>
  1723 000010ED 507265737320616E79- <1> 			db "Press any key to return to SollerOS",10,0
  1724 000010F6 206B657920746F2072- <1>
  1725 000010FF 657475726E20746F20- <1>
  1726 00001108 536F6C6C65724F530A- <1>
  1727 00001111 00                  <1>
  1728                              <1> expdump:
  1729 00001112 8B35[81110000]      <1> 	mov esi, [esiloc]
  1730 00001118 89F7                <1> 	mov edi, esi
  1731 0000111A 81C70F000000        <1> 	add edi, 15
  1732 00001120 81C604000000        <1> 	add esi, 4
  1733 00001126 893D[81110000]      <1> 	mov [esiloc], edi
  1734 0000112C 81EF03000000        <1> 	sub edi, 3
  1735 00001132 E8EA1F0000          <1> 	call converthex
  1736 00001137 81EE04000000        <1> 	sub esi, 4
  1737                              <1> %ifdef gui.included
  1738 0000113D 803D[9CDB0000]00    <1> 	cmp byte [guion], 0
  1739 00001144 0F8429000000        <1> 	je near expdumptext
  1740 0000114A 668B0D[89110000]    <1> 	mov cx, [locunhandy]
  1741 00001151 668B15[8B110000]    <1> 	mov dx, [locunhandx]
  1742 00001158 66B80100            <1> 	mov ax, 1
  1743 0000115C 6631DB              <1> 	xor bx, bx
  1744 0000115F E8E5620000          <1> 	call showstring2
  1745 00001164 66890D[89110000]    <1> 	mov [locunhandy], cx
  1746 0000116B 668915[8B110000]    <1> 	mov [locunhandx], dx
  1747 00001172 C3                  <1> 	ret
  1748                              <1> %endif
  1749                              <1> expdumptext:
  1750 00001173 E8B30B0000          <1> 	call print
  1751 00001178 C3                  <1> 	ret
  1752 00001179 00000000            <1> esploc dd 0
  1753 0000117D 00000000            <1> espfirst dd 0
  1754 00001181 00000000            <1> esiloc dd 0
  1755 00001185 00000000            <1> esiregbuf dd 0
  1756 00001189 0100                <1> locunhandy dw 1
  1757 0000118B 0100                <1> locunhandx dw 1
  1758 0000118D 0000                <1> backgroundcache dw 0
  1759 0000118F 00                  <1> intprob db 0
  1760 00001190 00000000            <1> codeloc dd 0
  1761 00001194 00000000            <1> codelocend dd 0
  1762 00001198 000000000000        <1> igdtcache dw 0,0,0
  1763                              <1> 	unhandmsg:	
  1764 0000119E 494E543D3030303030- <1> 			db "INT=00000000",255,10,0
  1765 000011A7 303030FF0A00        <1>
  1766                              <1> unhndrg:
  1767 000011AD FFFFFFFF3030303030- <1> 	times 7 db 255,255,255,255,"00000000  ",0	;;this dumps the stack before the stack frame in question
  1768 000011B6 303030202000<rept>  <1>
  1769 00001216 FFFFFFFF3030303030- <1> 			db 255,255,255,255,"00000000",255,10,0
  1770 0000121F 303030FF0A00        <1>
  1771 00001225 FFFFFFFF3030303030- <1> 	times 7 db 255,255,255,255,"00000000  ",0	;;this dumps the stack before the stack frame in question
  1772 0000122E 303030202000<rept>  <1>
  1773 0000128E FFFFFFFF3030303030- <1> 			db 255,255,255,255,"00000000",255,10,0
  1774 00001297 303030FF0A00        <1>
  1775 0000129D FFFFFFFF3030303030- <1> 	times 7 db 255,255,255,255,"00000000  ",0	;;this dumps the stack before the stack frame in question
  1776 000012A6 303030202000<rept>  <1>
  1777 00001306 FFFFFFFF3030303030- <1> 			db 255,255,255,255,"00000000",255,10,0
  1778 0000130F 303030FF0A00        <1>
  1779 00001315 FFFFFFFF3030303030- <1> 	times 7 db 255,255,255,255,"00000000  ",0	;;this dumps the stack before the stack frame in question
  1780 0000131E 303030202000<rept>  <1>
  1781 0000137E FFFFFFFF3030303030- <1> 			db 255,255,255,255,"00000000",255,10,0
  1782 00001387 303030FF0A00        <1>
  1783                              <1> unhandregs:
  1784 0000138D 45464C3D3030303030- <1> 			db "EFL=00000000  ",0
  1785 00001396 303030202000        <1>
  1786 0000139C 43533A3D3030303030- <1> 			db "CS:=00000000  ",0
  1787 000013A5 303030202000        <1>
  1788 000013AB 4549503D3030303030- <1> 			db "EIP=00000000",255,10,0
  1789 000013B4 303030FF0A00        <1>
  1790 000013BA 44533A3D3030303030- <1> 			db "DS:=00000000  ",0
  1791 000013C3 303030202000        <1>
  1792 000013C9 45533A3D3030303030- <1> 			db "ES:=00000000  ",0
  1793 000013D2 303030202000        <1>
  1794 000013D8 46533A3D3030303030- <1> 			db "FS:=00000000  ",0
  1795 000013E1 303030202000        <1>
  1796 000013E7 47533A3D3030303030- <1> 			db "GS:=00000000  ",0
  1797 000013F0 303030202000        <1>
  1798 000013F6 53533A3D3030303030- <1> 			db "SS:=00000000",255,10,0
  1799 000013FF 303030FF0A00        <1>
  1800 00001405 4541583D3030303030- <1> 			db "EAX=00000000  ",0
  1801 0000140E 303030202000        <1>
  1802 00001414 4543583D3030303030- <1> 			db "ECX=00000000  ",0
  1803 0000141D 303030202000        <1>
  1804 00001423 4544583D3030303030- <1> 			db "EDX=00000000  ",0
  1805 0000142C 303030202000        <1>
  1806 00001432 4542583D3030303030- <1> 			db "EBX=00000000",255,10,0
  1807 0000143B 303030FF0A00        <1>
  1808 00001441 4553503D3030303030- <1> 			db "ESP=00000000  ",0
  1809 0000144A 303030202000        <1>
  1810 00001450 4542503D3030303030- <1> 			db "EBP=00000000  ",0
  1811 00001459 303030202000        <1>
  1812 0000145F 4553493D3030303030- <1> 			db "ESI=00000000  ",0
  1813 00001468 303030202000        <1>
  1814 0000146E 4544493D3030303030- <1> unhndrgend:	db "EDI=00000000",255,10,0
  1815 00001477 303030FF0A00        <1>
  1816 0000147D 4352303D3030303030- <1> 			db "CR0=00000000  ",0
  1817 00001486 303030202000        <1>
  1818 0000148C 4352323D3030303030- <1> 			db "CR2=00000000  ",0
  1819 00001495 303030202000        <1>
  1820 0000149B 4352333D3030303030- <1> 			db "CR3=00000000  ",0
  1821 000014A4 303030202000        <1>
  1822 000014AA 4352343D3030303030- <1> 			db "CR4=00000000",255,10,0
  1823 000014B3 303030FF0A00        <1>
  1824 000014B9 54523A3D3030303030- <1> 			db "TR:=00000000  ",0
  1825 000014C2 303030202000        <1>
  1826 000014C8 4944543D3030303030- <1> 			db "IDT=00000000  ",0
  1827 000014D1 303030202000        <1>
  1828 000014D7 4744543D3030303030- <1> 			db "GDT=00000000  ",0
  1829 000014E0 303030202000        <1>
  1830 000014E6 4C44543D3030303030- <1> 			db "LDT=00000000",255,10,0
  1831 000014EF 303030FF0A00        <1>
  1832 000014F5 FFFFFFFF3030303030- <1> unhandcode: times 2 db 255,255,255,255,"00000000  ",0	;;this dumps the code before and after the interrupt in question
  1833 000014FE 303030202000<rept>  <1>
  1834 00001513 FFFFFFFF3030303030- <1> 			db 255,255,255,255,"00000000 ",255,0
  1835 0000151C 30303020FF00        <1>
  1836 00001522 FFFFFF5B3030303030- <1> 			db 255,255,255,"[00000000] ",0
  1837 0000152B 3030305D2000        <1>
  1838 00001531 FFFFFFFF3030303030- <1> 			times 3 db 255,255,255,255,"00000000  ",0
  1839 0000153A 303030202000<rept>  <1>
  1840 0000155E FFFFFFFF3030303030- <1> 			db 255,255,255,255,"00000000",255,10,0
  1841 00001567 303030FF0A00        <1>
  1842                              <1> unhandmsgend:
  1843                              <1> 
  1844                              <1> errortypes:
  1845 0000156D [B1150000]          <1> 			dd err0
  1846 00001571 [1A160000]          <1> 			dd err1
  1847 00001575 [7B160000]          <1> 			dd err2
  1848 00001579 [D0160000]          <1> 			dd err3
  1849 0000157D [34170000]          <1> 			dd err4
  1850 00001581 [86170000]          <1> 			dd err5
  1851 00001585 [F0170000]          <1> 			dd err6
  1852 00001589 [58180000]          <1> 			dd err7
  1853 0000158D [A2180000]          <1> 			dd err8
  1854 00001591 [FF180000]          <1> 			dd err9
  1855 00001595 [58190000]          <1> 			dd err10
  1856 00001599 [A3190000]          <1> 			dd err11
  1857 0000159D [F3190000]          <1> 			dd err12
  1858 000015A1 [4C1A0000]          <1> 			dd err13
  1859 000015A5 [AF1A0000]          <1> 			dd err14
  1860 000015A9 [EB1A0000]          <1> 			dd err15
  1861                              <1> errortypesend:
  1862 000015AD [761B0000]          <1> 			dd unknownerror
  1863                              <1> 			
  1864 000015B1 4469766973696F6E20- <1> err0	db "Division by zero:",10
  1865 000015BA 6279207A65726F3A0A  <1>
  1866 000015C3 546563686E6963616C- <1> 		db "Technically lim a÷x = ∞ when a is any real number. Happy Easter!",10
  1867 000015CC 6C79206C696D2061C3- <1>
  1868 000015D5 B778203D20E2889E20- <1>
  1869 000015DE 7768656E2061206973- <1>
  1870 000015E7 20616E79207265616C- <1>
  1871 000015F0 206E756D6265722E20- <1>
  1872 000015F9 486170707920456173- <1>
  1873 00001602 746572210A          <1>
  1874 00001607 202020202020202020- <1> 		db "            x→0",10,0
  1875 00001610 20202078E28692300A- <1>
  1876 00001619 00                  <1>
  1877                              <1> 		
  1878 0000161A 53696E676C652D7374- <1> err1	db "Single-step/Breakpoint:",10
  1879 00001623 65702F427265616B70- <1>
  1880 0000162C 6F696E743A0A        <1>
  1881 00001632 4120627265616B706F- <1> 		db "A breakpoint fault, breakpoint trap, or single-step trap was triggered.",10,0
  1882 0000163B 696E74206661756C74- <1>
  1883 00001644 2C20627265616B706F- <1>
  1884 0000164D 696E7420747261702C- <1>
  1885 00001656 206F722073696E676C- <1>
  1886 0000165F 652D73746570207472- <1>
  1887 00001668 617020776173207472- <1>
  1888 00001671 696767657265642E0A- <1>
  1889 0000167A 00                  <1>
  1890                              <1> 		
  1891 0000167B 4E6F6E6D61736B6162- <1> err2	db "Nonmaskable interrupt:",10
  1892 00001684 6C6520696E74657272- <1>
  1893 0000168D 7570743A0A          <1>
  1894 00001692 412068617264776172- <1> 		db "A hardware interrupt was triggered that could not be masked.",10,0
  1895 0000169B 6520696E7465727275- <1>
  1896 000016A4 707420776173207472- <1>
  1897 000016AD 696767657265642074- <1>
  1898 000016B6 68617420636F756C64- <1>
  1899 000016BF 206E6F74206265206D- <1>
  1900 000016C8 61736B65642E0A00    <1>
  1901                              <1> 		
  1902 000016D0 427265616B706F696E- <1> err3	db "Breakpoint:",10
  1903 000016D9 743A0A              <1>
  1904 000016DC 5468697320696E7465- <1> 		db "This interrupt is used in programs to show the stack and registers and can be",10
  1905 000016E5 727275707420697320- <1>
  1906 000016EE 7573656420696E2070- <1>
  1907 000016F7 726F6772616D732074- <1>
  1908 00001700 6F2073686F77207468- <1>
  1909 00001709 6520737461636B2061- <1>
  1910 00001712 6E6420726567697374- <1>
  1911 0000171B 65727320616E642063- <1>
  1912 00001724 616E2062650A        <1>
  1913 0000172A 69676E6F7265642E0A- <1> 		db "ignored.",10,0
  1914 00001733 00                  <1>
  1915                              <1> 		
  1916 00001734 4F766572666C6F773A- <1> err4	db "Overflow:",10
  1917 0000173D 0A                  <1>
  1918 0000173E 5468652070726F6365- <1> 		db "The processor ran into an INTO instruction with the overflow flag set.",10,0
  1919 00001747 73736F722072616E20- <1>
  1920 00001750 696E746F20616E2049- <1>
  1921 00001759 4E544F20696E737472- <1>
  1922 00001762 756374696F6E207769- <1>
  1923 0000176B 746820746865206F76- <1>
  1924 00001774 6572666C6F7720666C- <1>
  1925 0000177D 6167207365742E0A00  <1>
  1926                              <1> 		
  1927 00001786 426F756E6473206368- <1> err5	db "Bounds check:",10
  1928 0000178F 65636B3A0A          <1>
  1929 00001794 5468652070726F6365- <1> 		db "The processor rebounded from a BOUND instruction run on an operand that was out",10
  1930 0000179D 73736F72207265626F- <1>
  1931 000017A6 756E6465642066726F- <1>
  1932 000017AF 6D206120424F554E44- <1>
  1933 000017B8 20696E737472756374- <1>
  1934 000017C1 696F6E2072756E206F- <1>
  1935 000017CA 6E20616E206F706572- <1>
  1936 000017D3 616E64207468617420- <1>
  1937 000017DC 776173206F75740A    <1>
  1938 000017E4 6F6620626F756E6473- <1> 		db "of bounds.",10,0
  1939 000017ED 2E0A00              <1>
  1940                              <1> 		
  1941 000017F0 496E76616C6964206F- <1> err6	db "Invalid opcode:",10
  1942 000017F9 70636F64653A0A      <1>
  1943 00001800 5468652070726F6365- <1> 		db "The processor has no idea what it was trying to execute. Don't run SSE4 code",10
  1944 00001809 73736F722068617320- <1>
  1945 00001812 6E6F20696465612077- <1>
  1946 0000181B 686174206974207761- <1>
  1947 00001824 7320747279696E6720- <1>
  1948 0000182D 746F20657865637574- <1>
  1949 00001836 652E20446F6E277420- <1>
  1950 0000183F 72756E205353453420- <1>
  1951 00001848 636F64650A          <1>
  1952 0000184D 6F6E20343836277321- <1> 		db "on 486's!",10,0
  1953 00001856 0A00                <1>
  1954                              <1> 		
  1955 00001858 436F70726F63657373- <1> err7	db "Coprocessor not available:",10
  1956 00001861 6F72206E6F74206176- <1>
  1957 0000186A 61696C61626C653A0A  <1>
  1958 00001873 446F6E277420796F75- <1> 		db "Don't you know they don't make those anymore!",10,0
  1959 0000187C 206B6E6F7720746865- <1>
  1960 00001885 7920646F6E2774206D- <1>
  1961 0000188E 616B652074686F7365- <1>
  1962 00001897 20616E796D6F726521- <1>
  1963 000018A0 0A00                <1>
  1964                              <1> 		
  1965 000018A2 446F75626C65206661- <1> err8	db "Double fault:",10
  1966 000018AB 756C743A0A          <1>
  1967 000018B0 546865206578636570- <1> 		db "The exception handler could not handle that it could not handle an exception.",10,0
  1968 000018B9 74696F6E2068616E64- <1>
  1969 000018C2 6C657220636F756C64- <1>
  1970 000018CB 206E6F742068616E64- <1>
  1971 000018D4 6C6520746861742069- <1>
  1972 000018DD 7420636F756C64206E- <1>
  1973 000018E6 6F742068616E646C65- <1>
  1974 000018EF 20616E206578636570- <1>
  1975 000018F8 74696F6E2E0A00      <1>
  1976                              <1> 		
  1977 000018FF 436F70726F63657373- <1> err9	db "Coprocessor segment overrun:",10,0
  1978 00001908 6F72207365676D656E- <1>
  1979 00001911 74206F76657272756E- <1>
  1980 0000191A 3A0A00              <1>
  1981 0000191D 54686973206E657665- <1> 		db "This never happens in modern computers, and never should.",10,0
  1982 00001926 722068617070656E73- <1>
  1983 0000192F 20696E206D6F646572- <1>
  1984 00001938 6E20636F6D70757465- <1>
  1985 00001941 72732C20616E64206E- <1>
  1986 0000194A 657665722073686F75- <1>
  1987 00001953 6C642E0A00          <1>
  1988                              <1> 
  1989 00001958 496E76616C69642054- <1> err10	db "Invalid TSS:",10
  1990 00001961 53533A0A            <1>
  1991 00001965 546865205453532074- <1> 		db "The TSS that was switched to is invalid. Nothing funny here.",10,0
  1992 0000196E 686174207761732073- <1>
  1993 00001977 776974636865642074- <1>
  1994 00001980 6F20697320696E7661- <1>
  1995 00001989 6C69642E204E6F7468- <1>
  1996 00001992 696E672066756E6E79- <1>
  1997 0000199B 20686572652E0A00    <1>
  1998                              <1> 		
  1999 000019A3 5365676D656E74206E- <1> err11	db "Segment not present:",10
  2000 000019AC 6F742070726573656E- <1>
  2001 000019B5 743A0A              <1>
  2002 000019B8 546865207072657365- <1> 		db "The present bit of the segment descriptor is set to zero.",10,0
  2003 000019C1 6E7420626974206F66- <1>
  2004 000019CA 20746865207365676D- <1>
  2005 000019D3 656E74206465736372- <1>
  2006 000019DC 6970746F7220697320- <1>
  2007 000019E5 73657420746F207A65- <1>
  2008 000019EE 726F2E0A00          <1>
  2009                              <1> 		
  2010 000019F3 537461636B20657863- <1> err12	db "Stack exception:",10
  2011 000019FC 657074696F6E3A0A    <1>
  2012 00001A04 546865205353206465- <1> 		db "The SS descriptor is invalid or not present or its limit is too small.",10,0
  2013 00001A0D 7363726970746F7220- <1>
  2014 00001A16 697320696E76616C69- <1>
  2015 00001A1F 64206F72206E6F7420- <1>
  2016 00001A28 70726573656E74206F- <1>
  2017 00001A31 7220697473206C696D- <1>
  2018 00001A3A 697420697320746F6F- <1>
  2019 00001A43 20736D616C6C2E0A00  <1>
  2020                              <1> 		
  2021 00001A4C 47656E6572616C2070- <1> err13	db "General protection violation:",10
  2022 00001A55 726F74656374696F6E- <1>
  2023 00001A5E 2076696F6C6174696F- <1>
  2024 00001A67 6E3A0A              <1>
  2025 00001A6A 596F752076696F6C61- <1> 		db "You violated the computer. Step away slowly. The FBI is on its way.",10,0
  2026 00001A73 746564207468652063- <1>
  2027 00001A7C 6F6D70757465722E20- <1>
  2028 00001A85 537465702061776179- <1>
  2029 00001A8E 20736C6F776C792E20- <1>
  2030 00001A97 546865204642492069- <1>
  2031 00001AA0 73206F6E2069747320- <1>
  2032 00001AA9 7761792E0A00        <1>
  2033                              <1> 		
  2034 00001AAF 50616765206661756C- <1> err14	db "Page fault:",10
  2035 00001AB8 743A0A              <1>
  2036 00001ABB 546865207061676520- <1> 		db "The page that was requested was not available.",10,0
  2037 00001AC4 746861742077617320- <1>
  2038 00001ACD 726571756573746564- <1>
  2039 00001AD6 20776173206E6F7420- <1>
  2040 00001ADF 617661696C61626C65- <1>
  2041 00001AE8 2E0A00              <1>
  2042                              <1> 		
  2043 00001AEB 526573657276656420- <1> err15	db "Reserved for Plan R:",10
  2044 00001AF4 666F7220506C616E20- <1>
  2045 00001AFD 523A0A              <1>
  2046 00001B00 5468697320696E7465- <1> 		db "This interrupt is reserved for usage only by the military when it is necessary",10
  2047 00001B09 727275707420697320- <1>
  2048 00001B12 726573657276656420- <1>
  2049 00001B1B 666F72207573616765- <1>
  2050 00001B24 206F6E6C7920627920- <1>
  2051 00001B2D 746865206D696C6974- <1>
  2052 00001B36 617279207768656E20- <1>
  2053 00001B3F 6974206973206E6563- <1>
  2054 00001B48 6573736172790A      <1>
  2055 00001B4F 746F20696E69746961- <1> 		db "to initiate a full-scale coup d'",130,"tat.",10,0
  2056 00001B58 746520612066756C6C- <1>
  2057 00001B61 2D7363616C6520636F- <1>
  2058 00001B6A 757020642782746174- <1>
  2059 00001B73 2E0A00              <1>
  2060                              <1> 		
  2061 00001B76 576861742074686520- <1> unknownerror db "What the hell just happened? Is everyone okay? Hard drive? Video card?",10
  2062 00001B7F 68656C6C206A757374- <1>
  2063 00001B88 2068617070656E6564- <1>
  2064 00001B91 3F2049732065766572- <1>
  2065 00001B9A 796F6E65206F6B6179- <1>
  2066 00001BA3 3F2048617264206472- <1>
  2067 00001BAC 6976653F2056696465- <1>
  2068 00001BB5 6F20636172643F0A    <1>
  2069 00001BBD 4D656D6F72793F2041- <1> 			db	"Memory? Are you there?",10,0
  2070 00001BC6 726520796F75207468- <1>
  2071 00001BCF 6572653F0A00        <1>
  2072                              <1> %else
  2073                              <1> unhand:	
  2074                              <1> 	%assign i 0
  2075                              <1> 	%rep 32
  2076                              <1> 	mov byte [intprob], i
  2077                              <1> 	jmp unhand2
  2078                              <1> 	%assign i i+1
  2079                              <1> 	%endrep
  2080                              <1> unhand2:
  2081                              <1> 	cmp byte [intprob], 3
  2082                              <1> 	je handled	;if it is a debug interrupt, it is auto handled
  2083                              <1> 	mov ebx, 0xDEADCD00 ;this shows that an exception occured even though more detailed info cannot be shown
  2084                              <1> 						;CD stands for the interrupt code, DEAD shows that the program died because of the int
  2085                              <1> 	mov bl, [intprob]
  2086                              <1> 	jmp exitprog
  2087                              <1> intprob db 0
  2088                              <1> %endif
  2089                                      %include "source/ints.asm"
  2090                              <1> newints:	;for great justice
  2091 00001BD5 80FC00              <1> 	cmp ah, 0
  2092 00001BD8 0F849A000000        <1> 	je near exitprog   ;kills app
  2093 00001BDE 80FC01              <1> 	cmp ah, 1
  2094 00001BE1 0F8419010000        <1> 	je near prntstr  ;print string
  2095 00001BE7 80FC02              <1> 	cmp ah, 2
  2096 00001BEA 0F84B1010000        <1> 	je near readstr	;read string
  2097 00001BF0 80FC03              <1> 	cmp ah, 3
  2098 00001BF3 0F84D1010000        <1> 	je near clearscrn	;clear screen
  2099 00001BF9 80FC04              <1> 	cmp ah, 4
  2100 00001BFC 0F8446020000        <1> 	je near prntreadstr	;read and print string
  2101 00001C02 80FC05              <1> 	cmp ah, 5
  2102 00001C05 0F840B070000        <1> 	je near readchar	;get char
  2103 00001C0B 80FC06              <1> 	cmp ah, 6
  2104 00001C0E 0F8472070000        <1> 	je near prntchar	;print char
  2105 00001C14 80FC07              <1> 	cmp ah, 7
  2106 00001C17 0F8489090000        <1> 	je near openfile	;read file
  2107                              <1> ;	cmp ah, 8
  2108                              <1> ;	je near closefile	;close file
  2109 00001C1D 80FC09              <1> 	cmp ah, 9
  2110 00001C20 0F848A090000        <1> 	je near num2str	;convert number to string
  2111 00001C26 80FC0A              <1> 	cmp ah, 10
  2112 00001C29 0F8499090000        <1> 	je near str2num	;convert string to number
  2113                              <1> %ifdef threads.included
  2114 00001C2F 80FC0B              <1> 	cmp ah, 11
  2115 00001C32 0F849C090000        <1> 	je near forkthread	;create thread
  2116                              <1> %endif
  2117 00001C38 80FC0C              <1> 	cmp ah, 12
  2118 00001C3B 0F846A0A0000        <1> 	je near gettime	;get time
  2119 00001C41 80FC0D              <1> 	cmp ah, 13
  2120 00001C44 0F84760A0000        <1> 	je near settime	;set time
  2121 00001C4A 80FC0E              <1> 	cmp ah, 14
  2122 00001C4D 0F847D0A0000        <1> 	je near runcmd	;run program
  2123 00001C53 80FC0F              <1> 	cmp ah, 15
  2124 00001C56 0F84890A0000        <1> 	je near proginfo ;get program info-location of name/options/number of options/environmental vars
  2125 00001C5C 80FC10              <1> 	cmp ah, 16
  2126 00001C5F 0F84AB0A0000        <1> 	je near hooksig	;hook code to a signal
  2127                              <1> %ifdef gui.included
  2128 00001C65 80FC11              <1> 	cmp ah, 17
  2129 00001C68 0F84B20A0000        <1> 	je near guiint	;GUI operations
  2130                              <1> %endif
  2131                              <1> %ifdef sound.included
  2132                              <1> 	cmp ah, 18
  2133                              <1> 	je near soundint	;sound operations
  2134                              <1> %endif
  2135                              <1> %ifdef network.included
  2136 00001C6E 80FC13              <1> 	cmp ah, 19
  2137 00001C71 0F84FA0B0000        <1> 	je near netint	;networking operations
  2138                              <1> %endif
  2139 00001C77 CF                  <1> 	iret
  2140                              <1> 	%include 'source/interrupts/0_exitprog.asm'
  2141                              <2> exitprog:
  2142 00001C78 66B83000            <2> 	mov ax, NEW_DATA_SEL
  2143 00001C7C 8ED8                <2> 	mov ds, ax
  2144 00001C7E 8EC0                <2> 	mov es, ax
  2145 00001C80 8EE0                <2> 	mov fs, ax
  2146 00001C82 66B82000            <2> 	mov ax, SYS_DATA_SEL
  2147 00001C86 8EE8                <2> 	mov gs, ax
  2148 00001C88 C705[0F670000]0000- <2> 	mov dword [currentthread], 0
  2149 00001C90 0000                <2>
  2150 00001C92 C705[0A670000]0400- <2> 	mov dword [lastthread], 4
  2151 00001C9A 0000                <2>
  2152 00001C9C C605[0E670000]00    <2> 	mov byte [threadson], 0 ;for now i need to use this
  2153 00001CA3 8B25[E6F10000]      <2> 	mov esp, [previousstack] ;and this
  2154 00001CA9 81FB00000000        <2> 	cmp ebx, 0
  2155 00001CAF 0F8501000000        <2> 	jne near .error
  2156 00001CB5 C3                  <2> 	ret
  2157                              <2> .error:
  2158 00001CB6 89D9                <2> 	mov ecx, ebx
  2159 00001CB8 B006                <2> 	mov al, 6
  2160 00001CBA A2[7F310000]        <2> 	mov [firsthexshown], al
  2161 00001CBF 51                  <2> 	push ecx
  2162 00001CC0 BE[DB1C0000]        <2> 	mov esi, .msg1
  2163 00001CC5 E855000000          <2> 	call printhighlight
  2164 00001CCA 59                  <2> 	pop ecx
  2165 00001CCB E8C4140000          <2> 	call showhex
  2166 00001CD0 BE[F01C0000]        <2> 	mov esi, .msg2
  2167 00001CD5 E845000000          <2> 	call printhighlight
  2168 00001CDA C3                  <2> 	ret
  2169                              <2> 	
  2170 00001CDB 416E20657869742073- <2> .msg1 db "An exit status of 0x",0
  2171 00001CE4 7461747573206F6620- <2>
  2172 00001CED 307800              <2>
  2173 00001CF0 087761732072657475- <2> .msg2 db 8,"was returned.",10,0
  2174 00001CF9 726E65642E0A00      <2>
  2175                              <1> 	%include 'source/interrupts/1_prntstr.asm'
  2176                              <2> prntstr:
  2177 00001D00 30E4                <2> xor ah, ah
  2178 00001D02 E82B000000          <2> call printint
  2179 00001D07 E99CE5FFFF          <2> jmp timerinterrupt
  2180                              <2> 
  2181                              <2> 	printquiet:
  2182 00001D0C 6631C0              <2> 		xor ax, ax
  2183 00001D0F 66A3[9F1D0000]      <2> 		mov [endkeyprint], ax
  2184 00001D15 66BB0700            <2> 		mov bx, 7
  2185 00001D19 E82D000000          <2> 		call printint.b
  2186 00001D1E C3                  <2> 		ret
  2187                              <2> 
  2188                              <2> 	printhighlight:
  2189 00001D1F 6631C0              <2> 		xor ax, ax
  2190 00001D22 66BBF000            <2> 		mov bx, 0xF0
  2191 00001D26 E907000000          <2> 		jmp printint
  2192                              <2> 
  2193                              <2>     print:
  2194 00001D2B 6631C0              <2> 		xor ax, ax
  2195 00001D2E 66BB0700            <2> 		mov bx, 7
  2196                              <2> 	printint:	;print line, ax=last key,bx=modifier, esi=buffer
  2197 00001D32 56                  <2> 		push esi
  2198 00001D33 66A3[9F1D0000]      <2> 		mov [endkeyprint], ax
  2199 00001D39 E80D000000          <2> 		call .b
  2200 00001D3E 89F1                <2> 		mov ecx, esi
  2201 00001D40 5F                  <2> 		pop edi
  2202 00001D41 29F9                <2> 		sub ecx, edi
  2203 00001D43 51                  <2> 		push ecx
  2204 00001D44 E82D0B0000          <2> 		call termcopy
  2205 00001D49 59                  <2> 		pop ecx
  2206 00001D4A C3                  <2> 		ret
  2207                              <2> 	.b:	
  2208 00001D4B 53                  <2> 		push ebx
  2209 00001D4C 31C0                <2> 		xor eax, eax
  2210 00001D4E 8A06                <2> 		mov al, [esi]
  2211 00001D50 3CFF                <2> 		cmp al, 0xFF
  2212 00001D52 7438                <2> 		je .doneutf
  2213 00001D54 3CC0                <2> 		cmp al, 0xC0
  2214 00001D56 7234                <2> 		jb .doneutf
  2215 00001D58 3CE0                <2> 		cmp al, 0xE0
  2216 00001D5A 721D                <2> 		jb .two
  2217 00001D5C 46                  <2> 		inc esi
  2218 00001D5D 668B0E              <2> 		mov cx, [esi]
  2219 00001D60 46                  <2> 		inc esi
  2220 00001D61 C0E004              <2> 		shl al, 4
  2221 00001D64 66C1E102            <2> 		shl cx, 2
  2222 00001D68 C0ED02              <2> 		shr ch, 2
  2223 00001D6B 66C1E902            <2> 		shr cx, 2
  2224 00001D6F 08C5                <2> 		or ch, al
  2225 00001D71 6689C8              <2> 		mov ax, cx
  2226 00001D74 E913000000          <2> 		jmp .doneutf
  2227                              <2> 	.two:
  2228 00001D79 8A2E                <2> 		mov ch, [esi]
  2229 00001D7B 46                  <2> 		inc esi
  2230 00001D7C 8A0E                <2> 		mov cl, [esi]
  2231 00001D7E 66C1E102            <2> 		shl cx, 2
  2232 00001D82 C0ED02              <2> 		shr ch, 2
  2233 00001D85 66C1E902            <2> 		shr cx, 2
  2234 00001D89 6689C8              <2> 		mov ax, cx
  2235                              <2> 	.doneutf:
  2236 00001D8C 5B                  <2> 		pop ebx
  2237 00001D8D 663B05[9F1D0000]    <2> 		cmp ax, [endkeyprint]
  2238 00001D94 7408                <2> 		je .done
  2239 00001D96 E812060000          <2> 		call prcharq
  2240 00001D9B 46                  <2> 		inc esi
  2241 00001D9C EBAD                <2> 		jmp .b
  2242                              <2> 	.done:
  2243 00001D9E C3                  <2> 		ret
  2244                              <2> 
  2245 00001D9F 0000                <2> endkeyprint dw 0
  2246                              <1> 	%include 'source/interrupts/2_readstr.asm'
  2247                              <2> readstr:
  2248 00001DA1 E805000000          <2> call readint
  2249 00001DA6 E9FDE4FFFF          <2> jmp timerinterrupt
  2250                              <2> 
  2251                              <2> 	readint:	;;get line, al=last key, esi = buffer, edi = endbuffer	
  2252 00001DAB 89C3                <2> 		mov ebx, eax
  2253                              <2> 	.b:
  2254 00001DAD 53                  <2> 		push ebx
  2255 00001DAE 57                  <2> 		push edi
  2256 00001DAF 56                  <2> 		push esi
  2257 00001DB0 30C0                <2> 		xor al, al
  2258 00001DB2 E86B050000          <2> 		call rdcharint
  2259 00001DB7 5E                  <2> 		pop esi
  2260 00001DB8 8806                <2> 		mov [esi], al
  2261 00001DBA 46                  <2> 		inc esi
  2262 00001DBB 5F                  <2> 		pop edi
  2263 00001DBC 5B                  <2> 		pop ebx
  2264 00001DBD 39FE                <2> 		cmp esi, edi
  2265 00001DBF 7304                <2> 		jae .done
  2266 00001DC1 38D8                <2> 		cmp al, bl
  2267 00001DC3 75E8                <2> 		jne .b
  2268                              <2> 	.done:
  2269 00001DC5 4E                  <2> 		dec esi
  2270 00001DC6 C60600              <2> 		mov byte [esi], 0
  2271 00001DC9 C3                  <2> 		ret
  2272                              <1> 	%include 'source/interrupts/3_clearscrn.asm'
  2273                              <2> clearscrn:
  2274 00001DCA E805000000          <2> call clear
  2275 00001DCF E9D4E4FFFF          <2> jmp timerinterrupt
  2276                              <2> %ifdef io.serial
  2277                              <2> clear:
  2278                              <2> 	ret
  2279                              <2> %else
  2280                              <2> clear:
  2281 00001DD4 668B0D[A0250000]    <2> 		mov cx, [charxy]
  2282 00001DDB BF[7C0F0100]        <2> 		mov edi, videobuf
  2283 00001DE0 31C0                <2> 		xor eax, eax
  2284 00001DE2 A3[96250000]        <2> 		mov [linebeginpos], eax
  2285 00001DE7 A3[9A250000]        <2> 		mov [videobufpos], eax
  2286 00001DEC 6631D2              <2> 		xor dx, dx
  2287 00001DEF 66A3[9E250000]      <2> 		mov [charpos], ax
  2288 00001DF5 66B80700            <2> 		mov ax, 7
  2289 00001DF9 C1E010              <2> 		shl eax, 16
  2290                              <2> 	clearb:
  2291 00001DFC 8907                <2> 		mov [edi], eax
  2292 00001DFE 81C704000000        <2> 		add edi, 4
  2293 00001E04 FEC9                <2> 		dec cl
  2294 00001E06 80F900              <2> 		cmp cl, 0
  2295 00001E09 75F1                <2> 		jne clearb
  2296 00001E0B 8A0D[A0250000]      <2> 		mov cl, [charxy]
  2297 00001E11 FECD                <2> 		dec ch
  2298 00001E13 80FD00              <2> 		cmp ch, 0
  2299 00001E16 75E4                <2> 		jne clearb
  2300                              <2> 	cleardouble:
  2301 00001E18 BF[C4E40100]        <2> 		mov edi, videobuf2
  2302 00001E1D 668B0D[A0250000]    <2> 		mov cx, [charxy]
  2303 00001E24 31C0                <2> 		xor eax, eax
  2304                              <2> 	clearc:
  2305 00001E26 8907                <2> 		mov [edi], eax
  2306 00001E28 81C704000000        <2> 		add edi, 4
  2307 00001E2E FEC9                <2> 		dec cl
  2308 00001E30 80F900              <2> 		cmp cl, 0
  2309 00001E33 75F1                <2> 		jne clearc
  2310 00001E35 8A0D[A0250000]      <2> 		mov cl, [charxy]
  2311 00001E3B FECD                <2> 		dec ch
  2312 00001E3D 80FD00              <2> 		cmp ch, 0
  2313 00001E40 75E4                <2> 		jne clearc
  2314 00001E42 E82F0A0000          <2> 		call termcopy
  2315 00001E47 C3                  <2> 		ret
  2316                              <2> %endif
  2317                              <2> 		
  2318                              <1> 	%include 'source/interrupts/4_prntreadstr.asm'
  2319                              <2> prntreadstr:
  2320 00001E48 E80B000000          <2> call rdprint
  2321 00001E4D E956E4FFFF          <2> jmp timerinterrupt
  2322                              <2> 
  2323                              <2> readline:
  2324 00001E52 B00A                <2>   mov al, 10
  2325 00001E54 66BB0700            <2>   mov bx, 7
  2326                              <2> rdprint:	;print and get line, al=last key, bx=modifier, esi=buffer, edi=bufferend
  2327 00001E58 E80F000000          <2> 	call rdprintdos
  2328 00001E5D 50                  <2> 	push eax
  2329 00001E5E A0[01230000]        <2> 	mov al, [endkeyrdpr]
  2330 00001E63 30E4                <2> 	xor ah, ah
  2331 00001E65 E832050000          <2> 	call prcharint
  2332 00001E6A 58                  <2> 	pop eax
  2333 00001E6B C3                  <2> 	ret
  2334                              <2> 
  2335                              <2> 	rdprintdos: ;allows dos compatibility with read function
  2336 00001E6C 8935[0B230000]      <2> 		mov [buftxtloc], esi
  2337 00001E72 A2[01230000]        <2> 		mov [endkeyrdpr], al
  2338 00001E77 66891D[03230000]    <2> 		mov [modkeyrdpr], bx
  2339 00001E7E 8935[05230000]      <2> 		mov [firstesirdpr], esi
  2340 00001E84 893D[0F230000]      <2> 		mov [endbufferrdpr], edi
  2341 00001E8A 8B3D[18BA0200]      <2> 		mov edi, [commandsentered]
  2342 00001E90 893D[14BA0200]      <2> 		mov [commandlistentries], edi
  2343                              <2> 	rdprintb:
  2344 00001E96 56                  <2> 		push esi
  2345 00001E97 B001                <2> 		mov al, 1
  2346 00001E99 E884040000          <2> 		call rdcharint
  2347 00001E9E 8A25[82230000]      <2> 		mov ah, [lastkey + 2]
  2348 00001EA4 88E1                <2> 		mov cl, ah
  2349 00001EA6 5E                  <2> 		pop esi
  2350                              <2> %ifdef io.serial
  2351                              <2> 		cmp ah, 0x41
  2352                              <2> 		je near rdprup
  2353                              <2> 		cmp ah, 0x42
  2354                              <2> 		je near rdprdown
  2355                              <2> 		cmp ah, 0x43
  2356                              <2> 		je near rdprright
  2357                              <2> 		cmp ah, 0x44
  2358                              <2> 		je near rdprleft
  2359                              <2> 		cmp ah, 0x31
  2360                              <2> 		je near rdprhome
  2361                              <2> 		cmp ah, 0x48
  2362                              <2> 		je near rdprhome
  2363                              <2> 		cmp ah, 0x46
  2364                              <2> 		je near rdprend
  2365                              <2> 		cmp ah, 0x33
  2366                              <2> 		je near rdprdel
  2367                              <2> 		cmp ah, 0x34
  2368                              <2> 		je near rdprend
  2369                              <2> %else
  2370 00001EA7 803D[CA5B0000]E0    <2> 		cmp byte [specialkey], 0xE0
  2371 00001EAE 753F                <2> 		jne notspecialrdprnt
  2372 00001EB0 80FC53              <2> 		cmp ah, 0x53
  2373 00001EB3 0F84B1030000        <2> 		je near rdprdel
  2374 00001EB9 80FC47              <2> 		cmp ah, 0x47
  2375 00001EBC 0F847E010000        <2> 		je near rdprhome
  2376 00001EC2 80FC4F              <2> 		cmp ah, 0x4F
  2377 00001EC5 0F8494010000        <2> 		je near rdprend
  2378 00001ECB 80FC50              <2> 		cmp ah, 0x50
  2379 00001ECE 0F8424020000        <2> 		je near rdprdown
  2380 00001ED4 80FC4D              <2> 		cmp ah, 0x4D
  2381 00001ED7 0F84C1010000        <2> 		je near rdprright
  2382 00001EDD 80FC4B              <2> 		cmp ah, 0x4B
  2383 00001EE0 0F8496010000        <2> 		je near rdprleft
  2384 00001EE6 80FC48              <2> 		cmp ah, 0x48
  2385 00001EE9 0F844C020000        <2> 		je near rdprup
  2386                              <2> 	notspecialrdprnt:
  2387                              <2> %endif
  2388 00001EEF 66A1[80230000]      <2> 		mov ax, [lastkey]
  2389 00001EF5 663D0800            <2> 		cmp ax, 8
  2390 00001EF9 0F84A0030000        <2> 		je near rdprbscheck
  2391 00001EFF 663D0000            <2> 		cmp ax, 0
  2392 00001F03 7491                <2> 		je rdprintb
  2393 00001F05 80F900              <2> 		cmp cl, 0
  2394 00001F08 748C                <2> 		je rdprintb
  2395 00001F0A 663D8000            <2> 		cmp ax, 0x80
  2396 00001F0E 7257                <2> 		jb .normal
  2397 00001F10 663D0008            <2> 		cmp ax, 0x800
  2398 00001F14 7321                <2> 		jae .three
  2399 00001F16 46                  <2> 		inc esi
  2400 00001F17 3B35[0F230000]      <2> 		cmp esi, [endbufferrdpr]
  2401 00001F1D 0F83DA000000        <2> 		jae near donerdprinc
  2402 00001F23 66C1E002            <2> 		shl ax, 2
  2403 00001F27 C0E802              <2> 		shr al, 2
  2404 00001F2A 0C80                <2> 		or al, 10000000b
  2405 00001F2C 80CCC0              <2> 		or ah, 11000000b
  2406 00001F2F 8866FF              <2> 		mov [esi - 1], ah
  2407 00001F32 E930000000          <2> 		jmp .normal
  2408                              <2> .three:	
  2409 00001F37 81C602000000        <2> 		add esi, 2
  2410 00001F3D 3B35[0F230000]      <2> 		cmp esi, [endbufferrdpr]
  2411 00001F43 0F83B4000000        <2> 		jae near donerdprinc
  2412 00001F49 88E1                <2> 		mov cl, ah
  2413 00001F4B C0E904              <2> 		shr cl, 4
  2414 00001F4E 80C9E0              <2> 		or cl, 11100000b
  2415 00001F51 884EFE              <2> 		mov [esi - 2], cl
  2416 00001F54 66C1E004            <2> 		shl ax, 4
  2417 00001F58 66C1E802            <2> 		shr ax, 2
  2418 00001F5C 80CC80              <2> 		or ah, 10000000b
  2419 00001F5F C0E802              <2> 		shr al, 2
  2420 00001F62 0C80                <2> 		or al, 10000000b
  2421 00001F64 8866FF              <2> 		mov [esi - 1], ah
  2422                              <2> .normal:
  2423 00001F67 8806                <2> 		mov [esi], al
  2424 00001F69 46                  <2> 		inc esi
  2425 00001F6A 66A1[80230000]      <2> 		mov ax, [lastkey]
  2426                              <2> 	bscheckequal:
  2427 00001F70 668B1D[03230000]    <2> 		mov bx, [modkeyrdpr]
  2428 00001F77 803D[0A230000]00    <2> 		cmp byte [txtmask], 0
  2429 00001F7E 7407                <2> 		je nomasktxt
  2430 00001F80 30E4                <2> 		xor ah, ah
  2431 00001F82 A0[0A230000]        <2> 		mov al, [txtmask]
  2432                              <2> 	nomasktxt:
  2433 00001F87 56                  <2> 		push esi
  2434 00001F88 66A3[FF220000]      <2> 		mov [axcache], ax
  2435 00001F8E 668B1D[01230000]    <2> 		mov bx, [endkeyrdpr]
  2436 00001F95 6639D8              <2> 		cmp ax, bx
  2437 00001F98 7432                <2> 		je nobackprintbuftxt2
  2438 00001F9A E8FD030000          <2> 		call prcharint
  2439 00001F9F BE[66040100]        <2> 		mov esi, buftxt2
  2440 00001FA4 E863FDFFFF          <2> 		call printquiet
  2441 00001FA9 66B82000            <2> 		mov ax, " "
  2442 00001FAD E8FB030000          <2> 		call prcharq
  2443 00001FB2 66B80800            <2> 		mov ax, 8
  2444 00001FB6 81FE[66040100]      <2> 		cmp esi, buftxt2
  2445 00001FBC 740E                <2> 		je nobackprintbuftxt2
  2446                              <2> 	backprintbuftxt2:
  2447 00001FBE E8EA030000          <2> 		call prcharq
  2448 00001FC3 4E                  <2> 		dec esi
  2449 00001FC4 81FE[66040100]      <2> 		cmp esi, buftxt2
  2450 00001FCA 77F2                <2> 		ja backprintbuftxt2
  2451                              <2> 	nobackprintbuftxt2:
  2452 00001FCC 663D0A00            <2> 		cmp ax, 10
  2453 00001FD0 7405                <2> 		je nonobackprint
  2454 00001FD2 E8C5030000          <2> 		call prcharint
  2455                              <2> 	nonobackprint:
  2456 00001FD7 5E                  <2> 		pop esi
  2457 00001FD8 3B35[0F230000]      <2> 		cmp esi, [endbufferrdpr]
  2458 00001FDE 0F8319000000        <2> 		jae near donerdprinc
  2459 00001FE4 66A1[FF220000]      <2> 		mov ax, [axcache]
  2460 00001FEA 8A25[01230000]      <2> 		mov ah, [endkeyrdpr]
  2461 00001FF0 38E0                <2> 		cmp al, ah
  2462 00001FF2 0F859EFEFFFF        <2> 		jne rdprintb
  2463 00001FF8 E901000000          <2> 		jmp donerdprint
  2464                              <2> 	donerdprinc:
  2465 00001FFD 46                  <2> 		inc esi
  2466                              <2> 	donerdprint:
  2467 00001FFE 4E                  <2> 		dec esi
  2468 00001FFF BF[66040100]        <2> 		mov edi, buftxt2
  2469                              <2> 	copylaterstuff:
  2470 00002004 8A07                <2> 		mov al, [edi]
  2471 00002006 3C00                <2> 		cmp al, 0
  2472 00002008 7406                <2> 		je nocopylaterstuff
  2473 0000200A 8806                <2> 		mov [esi], al
  2474 0000200C 47                  <2> 		inc edi
  2475 0000200D 46                  <2> 		inc esi
  2476 0000200E EBF4                <2> 		jmp copylaterstuff
  2477                              <2> 	nocopylaterstuff:
  2478 00002010 C60600              <2> 		mov byte [esi], 0
  2479 00002013 E80B000000          <2> 		call clearbuftxt2
  2480 00002018 89F1                <2> 		mov ecx, esi
  2481 0000201A 8B3D[05230000]      <2> 		mov edi, [firstesirdpr]
  2482 00002020 29F9                <2> 		sub ecx, edi
  2483 00002022 C3                  <2> 		ret
  2484                              <2> 	
  2485                              <2> 	clearbuftxt2:
  2486 00002023 30C0                <2> 		xor al, al
  2487 00002025 BF[66040100]        <2> 		mov edi, buftxt2
  2488                              <2> 	clearbuftxt2lp:
  2489 0000202A 8807                <2> 		mov [edi], al
  2490 0000202C 47                  <2> 		inc edi
  2491 0000202D 81FF[66080100]      <2> 		cmp edi, buftxt
  2492 00002033 75F5                <2> 		jne clearbuftxt2lp
  2493 00002035 C3                  <2> 		ret
  2494                              <2> 	
  2495                              <2> 	rdprintb2:
  2496 00002036 E83B080000          <2> 		call termcopy
  2497 0000203B E956FEFFFF          <2> 		jmp rdprintb
  2498                              <2> 	
  2499                              <2> 	rdprhome:
  2500 00002040 3B35[0B230000]      <2> 		cmp esi, [buftxtloc]
  2501 00002046 0F84EAFFFFFF        <2> 		je near rdprintb2
  2502 0000204C BF[66040100]        <2> 		mov edi, buftxt2
  2503 00002051 8A07                <2> 		mov al, [edi]
  2504 00002053 E879020000          <2> 		call shiftbuftxt2
  2505 00002058 E850030000          <2> 		call prcharq
  2506 0000205D EBE1                <2> 		jmp rdprhome
  2507                              <2> 		
  2508                              <2> 	rdprend:
  2509 0000205F BF[66040100]        <2> 		mov edi, buftxt2
  2510 00002064 8A07                <2> 		mov al, [edi]
  2511 00002066 3C00                <2> 		cmp al, 0
  2512 00002068 0F84C8FFFFFF        <2> 		je near rdprintb2
  2513 0000206E 8806                <2> 		mov [esi], al
  2514 00002070 E849000000          <2> 		call shiftbuftxt2lft
  2515 00002075 E833030000          <2> 		call prcharq
  2516 0000207A EBE3                <2> 		jmp rdprend
  2517                              <2> 	
  2518                              <2> 	rdprleft:
  2519 0000207C 3B35[0B230000]      <2> 		cmp esi, [buftxtloc]
  2520 00002082 0F840EFEFFFF        <2> 		je near rdprintb
  2521 00002088 BF[66040100]        <2> 		mov edi, buftxt2
  2522 0000208D 8A07                <2> 		mov al, [edi]
  2523 0000208F E83D020000          <2> 		call shiftbuftxt2
  2524 00002094 E803030000          <2> 		call prcharint
  2525 00002099 E9F8FDFFFF          <2> 		jmp rdprintb
  2526                              <2> 		
  2527                              <2> 	rdprright:
  2528 0000209E BF[66040100]        <2> 		mov edi, buftxt2
  2529 000020A3 8A07                <2> 		mov al, [edi]
  2530 000020A5 3C00                <2> 		cmp al, 0
  2531 000020A7 0F84E9FDFFFF        <2> 		je near rdprintb
  2532 000020AD 8806                <2> 		mov [esi], al
  2533 000020AF E80A000000          <2> 		call shiftbuftxt2lft
  2534 000020B4 E8E3020000          <2> 		call prcharint
  2535 000020B9 E9D8FDFFFF          <2> 		jmp rdprintb
  2536                              <2> 		
  2537                              <2> 	shiftbuftxt2lft:
  2538 000020BE 55                  <2> 		push ebp
  2539 000020BF 89FD                <2> 		mov ebp, edi
  2540                              <2> 	.lp:
  2541 000020C1 3C00                <2> 		cmp al, 0
  2542 000020C3 7408                <2> 		je noshiftbuftxt2lft
  2543 000020C5 47                  <2> 		inc edi
  2544 000020C6 8A07                <2> 		mov al, [edi]
  2545 000020C8 8847FF              <2> 		mov [edi - 1], al
  2546 000020CB EBF4                <2> 		jmp .lp
  2547                              <2> 	noshiftbuftxt2lft:
  2548 000020CD 8A4500              <2> 		mov al, [ebp]
  2549 000020D0 5D                  <2> 		pop ebp
  2550 000020D1 3CC0                <2> 		cmp al, 0xC0
  2551 000020D3 7304                <2> 		jae .nofix
  2552 000020D5 3C80                <2> 		cmp al, 0x80
  2553 000020D7 73E5                <2> 		jae shiftbuftxt2lft
  2554                              <2> 	.nofix:
  2555 000020D9 8A06                <2> 		mov al, [esi]
  2556 000020DB 30E4                <2> 		xor ah, ah
  2557 000020DD 46                  <2> 		inc esi
  2558 000020DE 668B1D[03230000]    <2> 		mov bx, [modkeyrdpr]
  2559 000020E5 C3                  <2> 		ret
  2560                              <2> 		
  2561                              <2> 	rdprdownbck:
  2562 000020E6 FECC                <2> 		dec ah
  2563 000020E8 8825[09230000]      <2> 		mov [commandedit], ah
  2564 000020EE E88D000000          <2> 		call rdprbckspc
  2565 000020F3 E99EFDFFFF          <2> 		jmp rdprintb
  2566                              <2> 	
  2567                              <2> 	rdprdown:
  2568 000020F8 8A25[09230000]      <2> 		mov ah, [commandedit]
  2569 000020FE 80FC01              <2> 		cmp ah, 1
  2570 00002101 0F868FFDFFFF        <2> 		jbe near rdprintb
  2571 00002107 8B3D[18BA0200]      <2> 		mov edi, [commandsentered]
  2572 0000210D 3B3D[14BA0200]      <2> 		cmp edi, [commandlistentries]
  2573 00002113 7618                <2> 		jbe .nofix
  2574 00002115 8105[14BA0200]0200- <2> 		add dword [commandlistentries], 2
  2575 0000211D 0000                <2>
  2576 0000211F 3B3D[14BA0200]      <2> 		cmp edi, [commandlistentries]
  2577 00002125 7706                <2> 		ja .nofix
  2578 00002127 893D[14BA0200]      <2> 		mov [commandlistentries], edi
  2579                              <2> 	.nofix:
  2580 0000212D 80FC02              <2> 		cmp ah, 2
  2581 00002130 74B4                <2> 		je rdprdownbck
  2582 00002132 80EC02              <2> 		sub ah, 2
  2583 00002135 8825[09230000]      <2> 		mov [commandedit], ah
  2584                              <2> 		
  2585                              <2> 	rdprup:
  2586 0000213B 3805[09230000]      <2> 		cmp [commandedit], al
  2587 00002141 0F844FFDFFFF        <2> 		je near rdprintb
  2588 00002147 813D[14BA0200]0000- <2> 		cmp dword [commandlistentries], 0
  2589 0000214F 0000                <2>
  2590 00002151 0F843FFDFFFF        <2> 		je near rdprintb
  2591 00002157 FF0D[14BA0200]      <2> 		dec dword [commandlistentries]
  2592                              <2> 	.lp:
  2593 0000215D BF[66040100]        <2> 		mov edi, buftxt2
  2594 00002162 8A07                <2> 		mov al, [edi]
  2595 00002164 3C00                <2> 		cmp al, 0
  2596 00002166 740E                <2> 		je .start
  2597 00002168 8806                <2> 		mov [esi], al
  2598 0000216A E84FFFFFFF          <2> 		call shiftbuftxt2lft
  2599 0000216F E839020000          <2> 		call prcharq
  2600 00002174 EBE7                <2> 		jmp .lp
  2601                              <2> 	.start:
  2602 00002176 E805000000          <2> 		call rdprbckspc
  2603 0000217B E948000000          <2> 		jmp getcurrentcommandstr
  2604                              <2> 	rdprbckspc:
  2605 00002180 3B35[0B230000]      <2> 		cmp esi, [buftxtloc]
  2606 00002186 7432                <2> 		je nordprupbck
  2607                              <2> 	rdprupbckspclp:
  2608 00002188 66B80800            <2> 		mov ax, 8
  2609 0000218C 668B1D[03230000]    <2> 		mov bx, [modkeyrdpr]
  2610 00002193 E815020000          <2> 		call prcharq
  2611 00002198 66B82000            <2> 		mov ax, ' '
  2612 0000219C E80C020000          <2> 		call prcharq
  2613 000021A1 66B80800            <2> 		mov ax, 8
  2614 000021A5 E803020000          <2> 		call prcharq
  2615 000021AA 4E                  <2> 		dec esi
  2616 000021AB 3B35[0B230000]      <2> 		cmp esi, [buftxtloc]
  2617 000021B1 7402                <2> 		je nordprupbck2
  2618 000021B3 EBD3                <2> 		jmp rdprupbckspclp
  2619                              <2> 	nordprupbck2:
  2620 000021B5 E8BC060000          <2> 		call termcopy
  2621                              <2> 	nordprupbck:
  2622 000021BA 8B3D[10BA0200]      <2> 		mov edi, [commandbufpos]
  2623 000021C0 81C7[1CBA0200]      <2> 		add edi, commandbuf
  2624 000021C6 4F                  <2> 		dec edi
  2625 000021C7 C3                  <2> 		ret
  2626                              <2> 	getcurrentcommandstr:
  2627 000021C8 8A25[09230000]      <2> 		mov ah, [commandedit]
  2628 000021CE FE05[09230000]      <2> 		inc byte [commandedit]
  2629                              <2> 	getccmdlp:
  2630 000021D4 4F                  <2> 		dec edi
  2631 000021D5 8A07                <2> 		mov al, [edi]
  2632 000021D7 81FF[1CBA0200]      <2> 		cmp edi, commandbuf
  2633 000021DD 7231                <2> 		jb getcmdresetcommandbuf
  2634 000021DF 81EF[1CBA0200]      <2> 		sub edi, commandbuf
  2635 000021E5 3B3D[10BA0200]      <2> 		cmp edi, [commandbufpos]
  2636 000021EB 0F84A5FCFFFF        <2> 		je near rdprintb
  2637 000021F1 81C7[1CBA0200]      <2> 		add edi, commandbuf
  2638 000021F7 3C00                <2> 		cmp al, 0
  2639 000021F9 75D9                <2> 		jne getccmdlp
  2640 000021FB FECC                <2> 		dec ah
  2641 000021FD 80FC00              <2> 		cmp ah, 0
  2642 00002200 77D2                <2> 		ja getccmdlp
  2643 00002202 47                  <2> 		inc edi
  2644 00002203 81FF[1CCA0200]      <2> 		cmp edi, commandbufend
  2645 00002209 770D                <2> 		ja fixcmdbufb4morerdpr
  2646 0000220B E915000000          <2> 		jmp morerdprup
  2647                              <2> 	getcmdresetcommandbuf:
  2648 00002210 BF[1CCA0200]        <2> 		mov edi, commandbufend
  2649 00002215 47                  <2> 		inc edi
  2650 00002216 EBBC                <2> 		jmp getccmdlp
  2651                              <2> 	fixcmdbufb4morerdpr:
  2652 00002218 4F                  <2> 		dec edi
  2653 00002219 81EF[1CCA0200]      <2> 		sub edi, commandbufend
  2654 0000221F 81C7[1CBA0200]      <2> 		add edi, commandbuf
  2655                              <2> 	morerdprup:
  2656 00002225 8A07                <2> 		mov al, [edi]
  2657 00002227 47                  <2> 		inc edi
  2658 00002228 81EF[1CBA0200]      <2> 		sub edi, commandbuf
  2659 0000222E 3C00                <2> 		cmp al, 0
  2660 00002230 0F8400FEFFFF        <2> 		je near rdprintb2
  2661 00002236 3B3D[10BA0200]      <2> 		cmp edi, [commandbufpos]
  2662 0000223C 0F83F4FDFFFF        <2> 		jae near rdprintb2
  2663 00002242 81C7[1CBA0200]      <2> 		add edi, commandbuf
  2664 00002248 8806                <2> 		mov [esi], al
  2665 0000224A 46                  <2> 		inc esi
  2666 0000224B 57                  <2> 		push edi
  2667 0000224C 668B1D[03230000]    <2> 		mov bx, [modkeyrdpr]
  2668 00002253 30E4                <2> 		xor ah, ah
  2669 00002255 E853010000          <2> 		call prcharq
  2670 0000225A 5F                  <2> 		pop edi
  2671 0000225B 81FF[1CCA0200]      <2> 		cmp edi, commandbufend
  2672 00002261 76C2                <2> 		jbe morerdprup
  2673 00002263 BF[1CBA0200]        <2> 		mov edi, commandbuf
  2674 00002268 EBBB                <2> 		jmp morerdprup
  2675                              <2> 
  2676                              <2> 	rdprdel:
  2677 0000226A BF[66040100]        <2> 		mov edi, buftxt2
  2678 0000226F 8A07                <2> 		mov al, [edi]
  2679 00002271 3C00                <2> 		cmp al, 0
  2680 00002273 0F841DFCFFFF        <2> 		je near rdprintb
  2681 00002279 8806                <2> 		mov [esi], al
  2682 0000227B 3C80                <2> 		cmp al, 0x80
  2683 0000227D 7216                <2> 		jb .fn
  2684                              <2> 	.lp:
  2685 0000227F 46                  <2> 		inc esi
  2686 00002280 47                  <2> 		inc edi
  2687 00002281 8A07                <2> 		mov al, [edi]
  2688 00002283 3C00                <2> 		cmp al, 0
  2689 00002285 0F840BFCFFFF        <2> 		je near rdprintb
  2690 0000228B 8806                <2> 		mov [esi], al
  2691 0000228D 3C80                <2> 		cmp al, 0x80
  2692 0000228F 7204                <2> 		jb .fn
  2693 00002291 3CC0                <2> 		cmp al, 0xC0
  2694 00002293 72EA                <2> 		jb .lp
  2695                              <2> 	.fn:
  2696 00002295 E824FEFFFF          <2> 		call shiftbuftxt2lft
  2697 0000229A E80E010000          <2> 		call prcharq
  2698                              <2> 		
  2699                              <2> 	rdprbscheck:
  2700 0000229F 3B35[05230000]      <2> 		cmp esi, [firstesirdpr]
  2701 000022A5 0F86EBFBFFFF        <2> 		jbe near rdprintb
  2702                              <2> 	goodbscheck:
  2703 000022AB 4E                  <2> 		dec esi
  2704 000022AC 8A46FF              <2> 		mov al, [esi - 1]
  2705 000022AF C60600              <2> 		mov byte [esi], 0
  2706 000022B2 3CC0                <2> 		cmp al, 0xC0
  2707 000022B4 7309                <2> 		jae .onemore
  2708 000022B6 3C80                <2> 		cmp al, 0x80
  2709 000022B8 73F1                <2> 		jae goodbscheck
  2710 000022BA E904000000          <2> 		jmp .nomore
  2711                              <2> 	.onemore:
  2712 000022BF 4E                  <2> 		dec esi
  2713 000022C0 C60600              <2> 		mov byte [esi], 0		
  2714                              <2> 	.nomore:
  2715 000022C3 668B1D[03230000]    <2> 		mov bx, [modkeyrdpr]
  2716 000022CA B008                <2> 		mov al, 8
  2717 000022CC E99FFCFFFF          <2> 		jmp bscheckequal
  2718                              <2> 		
  2719                              <2> 	shiftbuftxt2:
  2720 000022D1 55                  <2> 		push ebp
  2721 000022D2 89FD                <2> 		mov ebp, edi
  2722                              <2> 	.lp
  2723 000022D4 3C00                <2> 		cmp al, 0
  2724 000022D6 7409                <2> 		je noshiftbuftxt2
  2725 000022D8 47                  <2> 		inc edi
  2726 000022D9 8A27                <2> 		mov ah, [edi]
  2727 000022DB 8807                <2> 		mov [edi], al
  2728 000022DD 88E0                <2> 		mov al, ah
  2729 000022DF EBF3                <2> 		jmp .lp
  2730                              <2> 	noshiftbuftxt2:
  2731 000022E1 8A4500              <2> 		mov al, [ebp]
  2732 000022E4 5D                  <2> 		pop ebp
  2733 000022E5 3CC0                <2> 		cmp al, 0xC0
  2734 000022E7 7304                <2> 		jae .nofix
  2735 000022E9 3C80                <2> 		cmp al, 0x80
  2736 000022EB 73E4                <2> 		jae shiftbuftxt2
  2737                              <2> 	.nofix:
  2738 000022ED BF[66040100]        <2> 		mov edi, buftxt2
  2739 000022F2 4E                  <2> 		dec esi
  2740 000022F3 8A06                <2> 		mov al, [esi]
  2741 000022F5 8807                <2> 		mov [edi], al
  2742 000022F7 C60600              <2> 		mov byte [esi], 0
  2743 000022FA 66B80800            <2> 		mov ax, 8
  2744 000022FE C3                  <2> 		ret
  2745                              <2> 		
  2746 000022FF 0000                <2> axcache dw 0
  2747 00002301 0000                <2> endkeyrdpr dw 0
  2748 00002303 0000                <2> modkeyrdpr dw 0
  2749 00002305 00000000            <2> firstesirdpr dd 0
  2750 00002309 00                  <2> commandedit db 0
  2751 0000230A 00                  <2> txtmask db 0
  2752 0000230B 00000000            <2> buftxtloc dd 0
  2753 0000230F 00000000            <2> endbufferrdpr dd 0
  2754 00002313 082000              <2> backcursor db 8," ",0
  2755                              <1> 	%include 'source/interrupts/5_readchar.asm'
  2756                              <2> readchar:
  2757 00002316 E807000000          <2> 	call rdcharint
  2758 0000231B E988DFFFFF          <2> 	jmp timerinterrupt
  2759                              <2> getchar:
  2760 00002320 30C0                <2> 	xor al, al
  2761                              <2> 	rdcharint:		;get char, if al is 0, wait for key
  2762 00002322 66C705[84230000]01- <2> 		mov word [trans], 1
  2763 0000232A 00                  <2>
  2764 0000232B 3C00                <2> 		cmp al, 0
  2765 0000232D 7509                <2> 		jne transcheck
  2766 0000232F 66C705[84230000]00- <2> 		mov word [trans], 0
  2767 00002337 00                  <2>
  2768                              <2> 	transcheck:
  2769                              <2> 	%ifdef io.serial
  2770                              <2> 		call serial.receive
  2771                              <2> 		xor ah, ah
  2772                              <2> 		cmp al, 13
  2773                              <2> 		je rdenter
  2774                              <2> 	%else
  2775 00002338 E8AF380000          <2> 		call getkey
  2776 0000233D 66A1[82230000]      <2> 		mov ax, [lastkey + 2]
  2777 00002343 663D1C00            <2> 		cmp ax, 0x1C
  2778 00002347 7425                <2> 		je rdenter
  2779                              <2> 	%endif
  2780 00002349 66A1[80230000]      <2> 		mov ax, [lastkey]
  2781 0000234F 668B1D[84230000]    <2> 		mov bx, [trans]
  2782 00002356 803D[CA5B0000]E0    <2> 		cmp byte [specialkey], 0xE0
  2783 0000235D 7500                <2> 		jne nospecialtrans
  2784                              <2> 	nospecialtrans:
  2785 0000235F 6609C3              <2> 		or bx, ax
  2786 00002362 6681FB0000          <2> 		cmp bx, 0
  2787 00002367 74CF                <2> 		je transcheck
  2788 00002369 E90C000000          <2> 		jmp rdend
  2789                              <2> 	rdenter:
  2790 0000236E C1E010              <2> 		shl eax, 16
  2791 00002371 66B80A00            <2> 		mov ax, 10
  2792 00002375 A3[80230000]        <2> 		mov [lastkey], eax
  2793                              <2> 	rdend:
  2794 0000237A A1[80230000]        <2> 		mov eax, [lastkey]
  2795 0000237F C3                  <2> 		ret
  2796                              <2> 		
  2797 00002380 00000000            <2> lastkey dd 0
  2798 00002384 0000                <2> trans dw 0
  2799                              <1> 	%include 'source/interrupts/6_prntchar.asm'
  2800                              <2> prntchar:
  2801 00002386 30E4                <2> 	xor ah, ah
  2802                              <2> %ifdef io.serial
  2803                              <2> 	call prcharint
  2804                              <2> 	jmp timerinterrupt
  2805                              <2> prcharint:	
  2806                              <2> prcharq:
  2807                              <2> 	call serial.send
  2808                              <2> 	ret
  2809                              <2> %else
  2810 00002388 38FB                <2> cmp bl, bh
  2811 0000238A 740A                <2> je prchar.notimer
  2812 0000238C E80B000000          <2> call prcharint
  2813 00002391 E912DFFFFF          <2> jmp timerinterrupt
  2814                              <2> prchar.notimer:
  2815 00002396 E812000000          <2> 	call prcharq
  2816 0000239B CF                  <2> 	iret
  2817                              <2> 	
  2818                              <2> prcharint:	;print char, char in ax, modifier in bx, if bl = bh  then termcopy will not happen, will run termcopy if called as is
  2819 0000239C 38FB                <2> 	cmp bl, bh
  2820 0000239E 740D                <2> 	je prcharq
  2821 000023A0 E808000000          <2> 	call prcharq
  2822 000023A5 E8CC040000          <2> 	call termcopy
  2823 000023AA C3                  <2> 	ret
  2824 000023AB 00                  <2> termguion db 0
  2825 000023AC 00                  <2> termcopyon db 0
  2826                              <2> prcharq:
  2827 000023AD C1E310              <2> 	shl ebx, 16
  2828 000023B0 6689C3              <2> 	mov bx, ax
  2829 000023B3 89D8                <2> 	mov eax, ebx
  2830 000023B5 A3[A2250000]        <2> 	mov [charbuf], eax
  2831 000023BA 8B1D[9A250000]      <2> 	mov ebx, [videobufpos]
  2832 000023C0 BF[7C0F0100]        <2> 	mov edi, videobuf
  2833 000023C5 01DF                <2> 	add edi, ebx
  2834 000023C7 A1[81280000]        <2> 	mov eax, [removedvideo]
  2835 000023CC 8907                <2> 	mov [edi], eax
  2836 000023CE A1[A2250000]        <2> 	mov eax, [charbuf]
  2837 000023D3 31D2                <2> 	xor edx, edx
  2838 000023D5 668B15[9E250000]    <2> 	mov dx, [charpos]
  2839 000023DC 31C9                <2> 	xor ecx, ecx
  2840 000023DE 668B0D[A0250000]    <2> 	mov cx, [charxy]
  2841 000023E5 663D0900            <2> 	cmp ax, 9
  2842 000023E9 0F8479000000        <2> 	je near prtab
  2843 000023EF 663D0D00            <2> 	cmp ax, 13		;I am phasing this out-it is used by windows but not unix based systems
  2844 000023F3 0F849C000000        <2> 	je near prcr
  2845 000023F9 663D0A00            <2> 	cmp ax, 10
  2846 000023FD 0F84E5000000        <2> 	je near prnlcr
  2847 00002403 663D0800            <2> 	cmp ax, 8
  2848 00002407 0F8499000000        <2> 	je near prbs
  2849 0000240D 663DFF00            <2> 	cmp ax, 255		;null character
  2850 00002411 0F8424000000        <2> 	je near donescr
  2851 00002417 663D0005            <2> 	cmp ax, (fontend - fonts)/16
  2852 0000241B 0F8341000000        <2> 	jae near prnofont
  2853                              <2> donepr:
  2854 00002421 8907                <2> 	mov [edi], eax
  2855 00002423 81C704000000        <2> 	add edi, 4
  2856 00002429 FEC2                <2> 	inc dl
  2857                              <2> donecrnl:
  2858 0000242B 38CA                <2> 	cmp dl, cl
  2859 0000242D 0F83D9000000        <2> 	jae near preol
  2860                              <2> doneeol:
  2861 00002433 38EE                <2> 	cmp dh, ch
  2862 00002435 0F83EE000000        <2> 	jae near prscr	
  2863                              <2> donescr:
  2864 0000243B 89FB                <2> 	mov ebx, edi
  2865 0000243D 8B07                <2> 	mov eax, [edi]
  2866 0000243F A3[81280000]        <2> 	mov [removedvideo], eax
  2867 00002444 81EB[7C0F0100]      <2> 	sub ebx, videobuf
  2868 0000244A 891D[9A250000]      <2> 	mov [videobufpos], ebx
  2869 00002450 668915[9E250000]    <2> 	mov [charpos], dx
  2870 00002457 A1[A2250000]        <2> 	mov eax, [charbuf]
  2871 0000245C 89C3                <2> 	mov ebx, eax
  2872 0000245E C1EB10              <2> 	shr ebx, 16
  2873 00002461 C3                  <2> 	ret
  2874                              <2> 	
  2875                              <2> 	prnofont:
  2876 00002462 66B80200            <2> 		mov ax, 2
  2877 00002466 EBB9                <2> 		jmp donepr
  2878                              <2> 	prtab:
  2879 00002468 8B1D[96250000]      <2> 		mov ebx, [linebeginpos]
  2880 0000246E 81EF[7C0F0100]      <2> 		sub edi, videobuf
  2881 00002474 29DF                <2> 		sub edi, ebx
  2882 00002476 C1EF05              <2> 		shr edi, 5
  2883 00002479 C1E705              <2> 		shl edi, 5
  2884 0000247C 81C720000000        <2> 		add edi, 32
  2885 00002482 C0EA03              <2> 		shr dl, 3
  2886 00002485 C0E203              <2> 		shl dl, 3
  2887 00002488 80C208              <2> 		add dl, 8
  2888 0000248B 81C7[7C0F0100]      <2> 		add edi, videobuf
  2889 00002491 01DF                <2> 		add edi, ebx
  2890 00002493 EB96                <2> 		jmp donecrnl
  2891                              <2> 	
  2892                              <2> 	prcr:
  2893 00002495 30D2                <2> 		xor dl, dl
  2894 00002497 BF[7C0F0100]        <2> 		mov edi, videobuf
  2895 0000249C 8B1D[96250000]      <2> 		mov ebx, [linebeginpos]
  2896 000024A2 01DF                <2> 		add edi, ebx
  2897 000024A4 EB85                <2> 		jmp donecrnl
  2898                              <2> 			
  2899                              <2> 	prbs:
  2900 000024A6 8B1D[96250000]      <2> 		mov ebx, [linebeginpos]
  2901 000024AC 80FA00              <2> 		cmp dl, 0
  2902 000024AF 7415                <2> 		je prbackline
  2903                              <2> 	prnobmr:
  2904 000024B1 891D[96250000]      <2> 		mov [linebeginpos], ebx
  2905 000024B7 FECA                <2> 		dec dl
  2906 000024B9 31C0                <2> 		xor eax, eax
  2907 000024BB 81EF04000000        <2> 		sub edi, 4
  2908 000024C1 E965FFFFFF          <2> 		jmp donecrnl
  2909                              <2> 	prbackline:
  2910 000024C6 6631DB              <2> 		xor bx, bx
  2911 000024C9 88CA                <2> 		mov dl, cl
  2912 000024CB 80FE00              <2> 		cmp dh, 0
  2913 000024CE 74E1                <2> 		je prnobmr
  2914 000024D0 8B1D[96250000]      <2> 		mov ebx, [linebeginpos]
  2915 000024D6 6651                <2> 		push cx
  2916 000024D8 31C9                <2> 		xor ecx, ecx
  2917 000024DA 8A0C24              <2> 		mov cl, [esp]
  2918 000024DD C1E102              <2> 		shl ecx, 2
  2919 000024E0 29CB                <2> 		sub ebx, ecx
  2920 000024E2 6659                <2> 		pop cx
  2921 000024E4 FECE                <2> 		dec dh
  2922 000024E6 EBC9                <2> 		jmp prnobmr
  2923                              <2> 		
  2924                              <2> 	prnlcr:
  2925 000024E8 FEC6                <2> 		inc dh
  2926 000024EA 31DB                <2> 		xor ebx, ebx
  2927 000024EC 30D2                <2> 		xor dl, dl
  2928 000024EE 88CB                <2> 		mov bl, cl
  2929 000024F0 66C1E302            <2> 		shl bx, 2
  2930 000024F4 BF[7C0F0100]        <2> 		mov edi, videobuf
  2931 000024F9 031D[96250000]      <2> 		add ebx, [linebeginpos]
  2932 000024FF 891D[96250000]      <2> 		mov [linebeginpos], ebx
  2933 00002505 01DF                <2> 		add edi, ebx
  2934 00002507 E91FFFFFFF          <2> 		jmp donecrnl
  2935                              <2> 		
  2936                              <2> 	preol:
  2937 0000250C 30D2                <2> 		xor dl, dl
  2938 0000250E FEC6                <2> 		inc dh
  2939 00002510 31DB                <2> 		xor ebx, ebx
  2940 00002512 88CB                <2> 		mov bl, cl
  2941 00002514 66C1E302            <2> 		shl bx, 2
  2942 00002518 031D[96250000]      <2> 		add ebx, [linebeginpos]
  2943 0000251E 891D[96250000]      <2> 		mov [linebeginpos], ebx
  2944 00002524 E90AFFFFFF          <2> 		jmp doneeol
  2945                              <2> 	prscr:
  2946 00002529 FECE                <2> 		dec dh
  2947 0000252B BF[7C0F0100]        <2> 		mov edi, videobuf
  2948 00002530 31DB                <2> 		xor ebx, ebx
  2949 00002532 88CB                <2> 		mov bl, cl
  2950 00002534 66C1E302            <2> 		shl bx, 2
  2951 00002538 01FB                <2> 		add ebx, edi
  2952                              <2> 	intscrollloop:
  2953 0000253A 8B03                <2> 		mov eax, [ebx]
  2954 0000253C 8907                <2> 		mov [edi], eax
  2955 0000253E 81C704000000        <2> 		add edi, 4
  2956 00002544 81C304000000        <2> 		add ebx, 4
  2957 0000254A FEC9                <2> 		dec cl
  2958 0000254C 80F900              <2> 		cmp cl, 0
  2959 0000254F 75E9                <2> 		jne intscrollloop
  2960 00002551 8A0D[A0250000]      <2> 		mov cl, [charxy]
  2961 00002557 FECD                <2> 		dec ch
  2962 00002559 80FD01              <2> 		cmp ch, 1
  2963 0000255C 77DC                <2> 		ja intscrollloop
  2964 0000255E 31C0                <2> 		xor eax, eax
  2965 00002560 81EF[7C0F0100]      <2> 		sub edi, videobuf
  2966 00002566 893D[96250000]      <2> 		mov [linebeginpos], edi
  2967 0000256C 81C7[7C0F0100]      <2> 		add edi, videobuf
  2968 00002572 89FB                <2> 		mov ebx, edi
  2969                              <2> 	intloopclear:
  2970 00002574 8903                <2> 		mov [ebx], eax
  2971 00002576 81C304000000        <2> 		add ebx, 4
  2972 0000257C FEC9                <2> 		dec cl
  2973 0000257E 80F900              <2> 		cmp cl, 0
  2974 00002581 75F1                <2> 		jne intloopclear
  2975 00002583 FECD                <2> 		dec ch
  2976 00002585 80FD00              <2> 		cmp ch, 0
  2977 00002588 75EA                <2> 		jne intloopclear
  2978 0000258A 668B0D[A0250000]    <2> 		mov cx, [charxy]
  2979 00002591 E9A5FEFFFF          <2> 		jmp donescr
  2980                              <2> 		
  2981 00002596 00000000            <2> linebeginpos dd 0
  2982 0000259A 00000000            <2> videobufpos: dd 0
  2983 0000259E 0000                <2> charpos db 0,0
  2984 000025A0 501E                <2> charxy db 80,30
  2985 000025A2 00000000            <2> charbuf dd 0
  2986                              <2> %endif
  2987                              <1> 	%include 'source/interrupts/7_openfile.asm'
  2988                              <2> openfile:
  2989 000025A6 E8C43F0000          <2> 	call loadfile
  2990 000025AB E9F8DCFFFF          <2> 	jmp timerinterrupt
  2991                              <1> 	%include 'source/interrupts/9_num2str.asm'
  2992                              <2> num2str:
  2993 000025B0 3C00                <2> 	cmp al, 0
  2994 000025B2 750A                <2> 	jne num2strb
  2995 000025B4 E8A50C0000          <2> 	call showdec
  2996 000025B9 E9EADCFFFF          <2> 	jmp timerinterrupt
  2997                              <2> num2strb:
  2998 000025BE E8D10B0000          <2> 	call showhex
  2999 000025C3 E9E0DCFFFF          <2> 	jmp timerinterrupt
  3000                              <1> 	%include 'source/interrupts/10_str2num.asm'
  3001                              <2> str2num:
  3002 000025C8 89F7                <2> 	mov edi, esi
  3003 000025CA E8710D0000          <2> 	call cnvrttxt	;the string goes into esi, number into ecx
  3004 000025CF E9D4DCFFFF          <2> 	jmp timerinterrupt
  3005                              <2> 	
  3006                              <1> %ifdef threads.included
  3007                              <1> 	%include 'source/interrupts/11_forkthread.asm'
  3008                              <2> forkthread:
  3009                              <2> 			 ;esi is next thread's start address, if 0, fork current thread
  3010                              <2> 			;returns the PID of the new fork in ebx
  3011                              <2> ;WARNING:THIS WILL NOT WORK IN C UNTIL IT COPIES THE ENTIRE STACK
  3012 000025D4 FA                  <2> 	cli
  3013 000025D5 60                  <2> 	pushad
  3014 000025D6 8925[A3260000]      <2> 	mov [.espold], esp
  3015 000025DC C605[0E670000]01    <2> 	mov byte [threadson], 1
  3016 000025E3 8B1D[0F670000]      <2> 	mov ebx, [currentthread]
  3017 000025E9 C1E302              <2> 	shl ebx, 2
  3018 000025EC 89A3[30EA0200]      <2> 	mov [threadlist + ebx], esp
  3019 000025F2 C1EB02              <2> 	shr ebx, 2
  3020 000025F5 81FB00000000        <2> 	cmp ebx, 0
  3021 000025FB 750C                <2> 	jne .simplestack
  3022 000025FD BB[82ED0000]        <2> 	mov ebx, stackend
  3023 00002602 29E3                <2> 	sub ebx, esp
  3024 00002604 E90B000000          <2> 	jmp .stackcalcdone
  3025                              <2> .simplestack:
  3026 00002609 C1E30A              <2> 	shl ebx, 10
  3027 0000260C 81C3[30FE0200]      <2> 	add ebx, stack1
  3028 00002612 29E3                <2> 	sub ebx, esp
  3029                              <2> .stackcalcdone:
  3030 00002614 29DC                <2> 	sub esp, ebx
  3031 00002616 81C4[30FE0200]      <2> 	add esp, stack1
  3032 0000261C 8B1D[0A670000]      <2> 	mov ebx, [lastthread]
  3033 00002622 C1E308              <2> 	shl ebx, 8
  3034 00002625 01DC                <2> 	add esp, ebx
  3035 00002627 891D[A7260000]      <2> 	mov [.stackend], ebx
  3036                              <2> 
  3037 0000262D 89E5                <2> 	mov ebp, esp
  3038 0000262F 8B25[A3260000]      <2> 	mov esp, [.espold]
  3039                              <2> 
  3040 00002635 C1EB0A              <2> 	shr ebx, 10 ;get pid then push it
  3041 00002638 895C2410            <2> 	mov [esp + 16], ebx ;set the old ebx to the new PID
  3042                              <2> 
  3043 0000263C 31DB                <2> 	xor ebx, ebx
  3044                              <2> .stackcopy:
  3045 0000263E 668B041C            <2> 	mov ax, [esp + ebx]
  3046 00002642 6689441D00          <2> 	mov [ebp + ebx], ax
  3047 00002647 81C302000000        <2> 	add ebx, 2
  3048 0000264D 3B1D[A7260000]      <2> 	cmp ebx, [.stackend]
  3049 00002653 72E9                <2> 	jb .stackcopy
  3050                              <2> 
  3051 00002655 31C0                <2> 	xor eax, eax
  3052 00002657 668CC8              <2> 	mov ax, cs
  3053 0000265A 89C2                <2> 	mov edx, eax
  3054 0000265C 8B4C2428            <2> 	mov ecx, [esp + 40]
  3055 00002660 81C900020000        <2> 	or ecx, 0x200
  3056                              <2> 	
  3057 00002666 81FE00000000        <2> 	cmp esi, 0
  3058 0000266C 7504                <2> 	jne .nochangestack
  3059 0000266E 8B742420            <2> 	mov esi, [esp + 32]
  3060                              <2> .nochangestack:
  3061 00002672 89F0                <2> 	mov eax, esi
  3062 00002674 89EC                <2> 	mov esp, ebp
  3063                              <2> 
  3064 00002676 89442420            <2> 	mov [esp + 32], eax
  3065 0000267A 89542424            <2> 	mov [esp + 36], edx
  3066 0000267E 894C2428            <2> 	mov [esp + 40], ecx
  3067                              <2> 
  3068 00002682 8B1D[0A670000]      <2> 	mov ebx, [lastthread]
  3069 00002688 89A3[30EA0200]      <2> 	mov [threadlist + ebx], esp
  3070 0000268E 81C304000000        <2> 	add ebx, 4
  3071 00002694 891D[0A670000]      <2> 	mov [lastthread], ebx
  3072 0000269A 8B25[A3260000]      <2> 	mov esp, [.espold]
  3073 000026A0 61                  <2> 	popad
  3074 000026A1 FB                  <2> 	sti
  3075 000026A2 CF                  <2> 	iret
  3076                              <2> 
  3077 000026A3 00000000            <2> .espold dd 0
  3078 000026A7 00000000            <2> .stackend dd 0
  3079                              <1> %endif
  3080                              <1> 	%include 'source/interrupts/12_gettime.asm'
  3081                              <2> gettime:
  3082 000026AB A1[60020000]        <2> 	mov eax, [timeseconds]
  3083 000026B0 8B1D[64020000]      <2> 	mov ebx, [timenanoseconds]
  3084 000026B6 89D9                <2> 	mov ecx, ebx
  3085 000026B8 C1E90A              <2> 	shr ecx, 10	;this is in microseconds
  3086 000026BB E9E8DBFFFF          <2> 	jmp timerinterrupt
  3087                              <1> 	%include 'source/interrupts/13_settime.asm'
  3088                              <2> settime:
  3089 000026C0 A3[60020000]        <2> 	mov [timeseconds], eax
  3090 000026C5 891D[64020000]      <2> 	mov [timenanoseconds], ebx
  3091 000026CB E9D8DBFFFF          <2> 	jmp timerinterrupt
  3092                              <2> 	
  3093                              <1> 	%include 'source/interrupts/14_runcmd.asm'
  3094                              <2> runcmd:
  3095 000026D0 BF[66080100]        <2> 	mov edi, buftxt
  3096                              <2> cpcmd:
  3097 000026D5 8A06                <2> 	mov al, [esi]
  3098 000026D7 8807                <2> 	mov [edi], al
  3099 000026D9 46                  <2> 	inc esi
  3100 000026DA 47                  <2> 	inc edi
  3101 000026DB 3C00                <2> 	cmp al, 0
  3102 000026DD 75F6                <2> 	jne cpcmd
  3103 000026DF E8B3070000          <2> 	call run
  3104 000026E4 CF                  <2> 	iret
  3105                              <1> 	%include 'source/interrupts/15_proginfo.asm'
  3106                              <2> proginfo:
  3107                              <2> 	;mov ebx, variables
  3108 000026E5 8B35[6D2F0000]      <2> 	mov esi, [currentcommandloc]
  3109 000026EB 89F7                <2> 	mov edi, esi
  3110 000026ED 31C9                <2> 	xor ecx, ecx
  3111                              <2> getcommandzeroes:
  3112 000026EF 8A07                <2> 	mov al, [edi]
  3113 000026F1 47                  <2> 	inc edi
  3114 000026F2 3C3B                <2> 	cmp al, ';'
  3115 000026F4 740B                <2> 	je nomorezeroes
  3116 000026F6 3C00                <2> 	cmp al, 0
  3117 000026F8 7407                <2> 	je nomorezeroes
  3118 000026FA 3C20                <2> 	cmp al, ' '
  3119 000026FC 75F1                <2> 	jne getcommandzeroes
  3120 000026FE 41                  <2> 	inc ecx
  3121 000026FF EBEE                <2> 	jmp getcommandzeroes
  3122                              <2> nomorezeroes:
  3123 00002701 41                  <2> 	inc ecx
  3124 00002702 4F                  <2> 	dec edi
  3125 00002703 8B1D[F2F30000]      <2> 	mov ebx, [uid]
  3126 00002709 8B15[0F670000]      <2> 	mov edx, [currentthread]
  3127 0000270F CF                  <2> 	iret
  3128                              <2> 	
  3129                              <1> 	%include 'source/interrupts/16_hooksig.asm'
  3130                              <2> hooksig: ;hook code in ESI to signal in AL
  3131 00002710 3C00                <2> 	cmp al, 0
  3132 00002712 7507                <2> 	jne .quit	;only sig 0, the escape key, is handled, and only for one app
  3133                              <2> ;	xor ebx, ebx
  3134                              <2> ;	mov bl, al
  3135                              <2> ;	shl bl, 2
  3136 00002714 BF[E2ED0000]        <2> 	mov edi, sigtable
  3137 00002719 8937                <2> 	mov [edi], esi
  3138                              <2> .quit:
  3139 0000271B E988DBFFFF          <2> 	jmp timerinterrupt
  3140                              <1> %ifdef gui.included
  3141                              <1> 	%include 'source/interrupts/17_guiint.asm'
  3142                              <2> guiint:
  3143 00002720 3CFD                <2> 	cmp al, 253
  3144 00002722 0F8473000000        <2> 	je near .getinfo
  3145 00002728 803D[9CDB0000]01    <2> 	cmp byte [guion], 1
  3146 0000272F 0F8550000000        <2> 	jne near .nogui
  3147 00002735 3C00                <2> 	cmp al, 0
  3148 00002737 0F844D000000        <2> 	je near .clear
  3149 0000273D 3C01                <2> 	cmp al, 1
  3150 0000273F 0F84AB000000        <2> 	je near .putpixel
  3151 00002745 3C02                <2> 	cmp al, 2
  3152 00002747 0F84B0000000        <2> 	je near .drawtext
  3153 0000274D 3C03                <2> 	cmp al, 3
  3154 0000274F 0F84C3000000        <2> 	je near .drawline
  3155 00002755 3C04                <2> 	cmp al, 4
  3156 00002757 0F84CE000000        <2> 	je near .drawcircle
  3157 0000275D 3C05                <2> 	cmp al, 5
  3158 0000275F 0F84D6000000        <2> 	je near .fillcircle
  3159 00002765 3C06                <2> 	cmp al, 6
  3160 00002767 0F84DE000000        <2> 	je near .drawsquare
  3161 0000276D 3C07                <2> 	cmp al, 7
  3162 0000276F 0F84E9000000        <2> 	je near .fillsquare
  3163 00002775 3CFE                <2> 	cmp al, 254
  3164 00002777 0F8449000000        <2> 	je near .setinfo
  3165 0000277D 3CFF                <2> 	cmp al, 255
  3166 0000277F 0F8446000000        <2> 	je near .reset
  3167                              <2> .nogui:
  3168 00002785 E91EDBFFFF          <2> 	jmp timerinterrupt
  3169                              <2> 
  3170                              <2> .clear:		;color in bx
  3171 0000278A 66891D[F46D0000]    <2> 	mov [background], bx
  3172                              <2> %ifdef gui.background
  3173                              <2> 	mov ebx, [backgroundimage]
  3174                              <2> 	cmp ebx, 0
  3175                              <2> 	je .clearit
  3176                              <2> 	mov dword [backgroundimage], 0
  3177                              <2> 	mov [.bgi], ebx
  3178                              <2> .clearit:
  3179                              <2> %endif
  3180 00002791 E812460000          <2> 	call guiclear
  3181 00002796 E90DDBFFFF          <2> 	jmp timerinterrupt
  3182                              <2> 	
  3183                              <2> .getinfo:	;puts screen size in (dx, cx), background color in bx, and will put other stuff in other places
  3184 0000279B 6631DB              <2> 	xor bx, bx
  3185 0000279E 6631C9              <2> 	xor cx, cx
  3186 000027A1 6631D2              <2> 	xor dx, dx
  3187 000027A4 381D[9CDB0000]      <2> 	cmp [guion], bl
  3188 000027AA 74D9                <2> 	je .nogui
  3189 000027AC 668B1D[F46D0000]    <2> 	mov bx, [background]
  3190 000027B3 668B15[20570000]    <2> 	mov dx, [resolutionx]
  3191 000027BA 668B0D[22570000]    <2> 	mov cx, [resolutiony]
  3192 000027C1 E9E2DAFFFF          <2> 	jmp timerinterrupt
  3193                              <2> 	
  3194                              <2> .setinfo:	;does nothing yet. will get screen size in (dx, cx), background color in bx, and will put other stuff in other places
  3195 000027C6 E9DDDAFFFF          <2> 	jmp timerinterrupt
  3196                              <2> .reset:		;resets the screen to the original settings
  3197 000027CB 66BBCF7B            <2> 	mov bx, background.original
  3198 000027CF 66891D[F46D0000]    <2> 	mov [background], bx
  3199 000027D6 66BBFFFF            <2> 	mov bx, 0xFFFF
  3200 000027DA 66891D[B1740000]    <2> 	mov [colorfont2], bx
  3201                              <2> %ifdef gui.background
  3202                              <2> 	mov ebx, [backgroundimage]
  3203                              <2> 	cmp ebx, 0
  3204                              <2> 	jne .resetit
  3205                              <2> 	mov ebx, [.bgi]
  3206                              <2> 	mov [backgroundimage], ebx
  3207                              <2> .resetit:
  3208                              <2> %endif
  3209 000027E1 E8C2450000          <2> 	call guiclear
  3210 000027E6 E80D460000          <2> 	call reloadallgraphics
  3211 000027EB E9B8DAFFFF          <2> 	jmp timerinterrupt
  3212                              <2> 
  3213                              <2> %ifdef gui.background
  3214                              <2> 	.bgi dd 0
  3215                              <2> %endif
  3216                              <2> 	
  3217                              <2> .putpixel:	;pixel location in (dx, cx), color in bx
  3218 000027F0 6689DE              <2> 	mov si, bx
  3219 000027F3 E80F5C0000          <2> 	call putpixel
  3220 000027F8 E9ABDAFFFF          <2> 	jmp timerinterrupt
  3221                              <2> 
  3222                              <2> .drawtext:	;background in di, foreground in bx, location in (dx,cx), string in esi
  3223 000027FD 66D1E2              <2> 	shl dx, 1
  3224 00002800 66891D[B1740000]    <2> 	mov [colorfont2], bx
  3225 00002807 66893D[F46D0000]    <2> 	mov [background], di
  3226 0000280E E8364C0000          <2> 	call showstring2
  3227 00002813 E990DAFFFF          <2> 	jmp timerinterrupt
  3228                              <2> 
  3229                              <2> .drawline:	;color in bx, start in (dx,cx), end in (di,si)
  3230 00002818 6689F0              <2> 	mov ax, si
  3231 0000281B 6689DE              <2> 	mov si, bx
  3232 0000281E 6689FB              <2> 	mov bx, di
  3233 00002821 E856440000          <2> 	call drawline
  3234 00002826 E97DDAFFFF          <2> 	jmp timerinterrupt
  3235                              <2> 
  3236                              <2> .drawcircle: ;color in bx, radius in si, center in (dx,cx)
  3237 0000282B 6689F0              <2> 	mov ax, si
  3238 0000282E 6689DE              <2> 	mov si, bx
  3239 00002831 E8CF3F0000          <2> 	call drawcircle
  3240 00002836 E96DDAFFFF          <2> 	jmp timerinterrupt
  3241                              <2> 
  3242                              <2> .fillcircle: ;color in bx, radius in si, center in (dx,cx)
  3243 0000283B 6689F0              <2> 	mov ax, si
  3244 0000283E 6689DE              <2> 	mov si, bx
  3245 00002841 E8D1400000          <2> 	call fillcircle
  3246 00002846 E95DDAFFFF          <2> 	jmp timerinterrupt
  3247                              <2> 	
  3248                              <2> .drawsquare: ;color in bx, start in (dx, cx), end in (di, si)
  3249 0000284B 6689F0              <2> 	mov ax, si
  3250 0000284E 6689DE              <2> 	mov si, bx
  3251 00002851 6689FB              <2> 	mov bx, di
  3252 00002854 E86F460000          <2> 	call drawsquare
  3253 00002859 E94ADAFFFF          <2> 	jmp timerinterrupt
  3254                              <2> 
  3255                              <2> .fillsquare: ;color in bx, start in (dx, cx), end in (di, si)
  3256 0000285E 6689F0              <2> 	mov ax, si
  3257 00002861 6689DE              <2> 	mov si, bx
  3258 00002864 6689FB              <2> 	mov bx, di
  3259 00002867 E8D1460000          <2> 	call fillsquare
  3260 0000286C E937DAFFFF          <2> 	jmp timerinterrupt
  3261                              <1> %endif
  3262                              <1> %ifdef sound.included
  3263                              <1> 	%include 'source/interrupts/18_soundint.asm'
  3264                              <1> %endif
  3265                              <1> %ifdef network.included
  3266                              <1> 	%include 'source/interrupts/19_netint.asm'
  3267                              <2> netint:
  3268 00002871 E932DAFFFF          <2> 	jmp timerinterrupt
  3269                              <1> %endif
  3270                              <1> 
  3271                              <1> termcopy:
  3272                              <1> %ifdef io.serial
  3273                              <1> 	ret
  3274                              <1> %else
  3275                              <1> %ifdef terminal.vsync
  3276                              <1> 	mov byte [termcopyneeded], 1
  3277                              <1> 	ret
  3278                              <1> %else
  3279 00002876 E80A000000          <1> 	call newtermcopy
  3280 0000287B C3                  <1> 	ret
  3281                              <1> %endif
  3282 0000287C 00                  <1> 	termcopyneeded db 0
  3283 0000287D 00000000            <1> 	termcursorpos dd 0
  3284 00002881 00000000            <1> 	removedvideo dd 0
  3285                              <1> newtermcopy:
  3286 00002885 60                  <1> 	pusha
  3287 00002886 BF[7C0F0100]        <1> 	mov edi, videobuf
  3288 0000288B 31DB                <1> 	xor ebx, ebx
  3289 0000288D 881D[7C280000]      <1> 	mov [termcopyneeded], bl
  3290 00002893 8B1D[9A250000]      <1> 	mov ebx, [videobufpos]
  3291 00002899 01DF                <1> 	add edi, ebx
  3292 0000289B 893D[7D280000]      <1> 	mov [termcursorpos], edi
  3293 000028A1 E8E2000000          <1> 	call switchtermcursor
  3294 000028A6 803D[9CDB0000]00    <1> 	cmp byte [guion], 0
  3295 000028AD 0F8420000000        <1> 	je near nowincopy
  3296                              <1> %ifdef gui.included
  3297 000028B3 C605[187C0000]00    <1> 	mov byte [mouseselecton], 0
  3298 000028BA C605[AC230000]01    <1> 	mov byte [termcopyon], 1
  3299 000028C1 803D[AB230000]01    <1> 	cmp byte [termguion], 1
  3300 000028C8 0F84D4500000        <1> 	je near windowvideocopy
  3301                              <1> %endif
  3302 000028CE E9AE000000          <1> 	jmp nocopytermatall
  3303                              <1> nowincopy:
  3304 000028D3 BE00000A00          <1> 	mov esi, 0xA0000
  3305 000028D8 A1[41020000]        <1> 	mov eax, [basecache]
  3306 000028DD C1E004              <1> 	shl eax, 4
  3307 000028E0 29C6                <1> 	sub esi, eax
  3308 000028E2 BF[7C0F0100]        <1> 	mov edi, videobuf
  3309 000028E7 31C9                <1> 	xor ecx, ecx
  3310 000028E9 668B0D[A0250000]    <1> 	mov cx, [charxy]
  3311                              <1> nowincopy2:
  3312 000028F0 8B07                <1> 	mov eax, [edi]
  3313 000028F2 81C748D50000        <1> 	add edi, (videobuf2 - videobuf)
  3314 000028F8 8B1F                <1> 	mov ebx, [edi]
  3315 000028FA 8907                <1> 	mov [edi], eax
  3316 000028FC 81EF48D50000        <1> 	sub edi, (videobuf2 - videobuf)
  3317 00002902 81C702000000        <1> 	add edi, 2
  3318 00002908 39D8                <1> 	cmp eax, ebx
  3319 0000290A 744B                <1> 	je nopresentwinfont
  3320 0000290C 81EF02000000        <1> 	sub edi, 2
  3321 00002912 BD[9C890000]        <1> 	mov ebp, fonts
  3322 00002917 31C0                <1> 	xor eax, eax
  3323 00002919 668B07              <1> 	mov ax, [edi]
  3324 0000291C C1E004              <1> 	shl eax, 4
  3325 0000291F 01C5                <1> 	add ebp, eax
  3326 00002921 81C702000000        <1> 	add edi, 2
  3327 00002927 668B1F              <1> 	mov bx, [edi]
  3328 0000292A 31D2                <1> 	xor edx, edx
  3329 0000292C 8A15[A0250000]      <1> 	mov dl, [charxy]
  3330 00002932 C1C110              <1> 	rol ecx, 16
  3331 00002935 B110                <1> 	mov cl, 16
  3332                              <1> nowinfont:
  3333 00002937 8A4500              <1> 	mov al, [ebp]
  3334 0000293A D0C8                <1> 	ror al, 1
  3335 0000293C 80FB80              <1> 	cmp bl, 0x80
  3336 0000293F 7202                <1> 	jb notnotfont
  3337 00002941 F6D0                <1> 	not al
  3338                              <1> notnotfont:
  3339 00002943 8806                <1> 	mov [esi], al
  3340 00002945 01D6                <1> 	add esi, edx
  3341 00002947 45                  <1> 	inc ebp
  3342 00002948 FEC9                <1> 	dec cl
  3343 0000294A 80F900              <1> 	cmp cl, 0
  3344 0000294D 75E8                <1> 	jne nowinfont
  3345 0000294F C1E204              <1> 	shl edx, 4
  3346 00002952 29D6                <1> 	sub esi, edx
  3347 00002954 C1C110              <1> 	rol ecx, 16
  3348                              <1> nopresentwinfont:
  3349 00002957 81C702000000        <1> 	add edi, 2
  3350 0000295D 46                  <1> 	inc esi
  3351 0000295E FEC9                <1> 	dec cl
  3352 00002960 80F900              <1> 	cmp cl, 0
  3353 00002963 758B                <1> 	jne nowincopy2
  3354 00002965 8A0D[A0250000]      <1> 	mov cl, [charxy]
  3355 0000296B 31D2                <1> 	xor edx, edx
  3356 0000296D 88CA                <1> 	mov dl, cl
  3357 0000296F 29D6                <1> 	sub esi, edx
  3358 00002971 C1E204              <1> 	shl edx, 4
  3359 00002974 01D6                <1> 	add esi, edx
  3360 00002976 FECD                <1> 	dec ch
  3361 00002978 80FD00              <1> 	cmp ch, 0
  3362 0000297B 0F856FFFFFFF        <1> 	jne nowincopy2
  3363                              <1> nocopytermatall:
  3364 00002981 E802000000          <1> 	call switchtermcursor
  3365 00002986 61                  <1> 	popa
  3366 00002987 C3                  <1> 	ret
  3367                              <1> 	
  3368                              <1> switchtermcursor:
  3369 00002988 8B3D[7D280000]      <1> 	mov edi, [termcursorpos]
  3370 0000298E 668B4702            <1> 	mov ax, [edi + 2]
  3371 00002992 668B1F              <1> 	mov bx, [edi]
  3372 00002995 663D8000            <1> 	cmp ax, 0x80
  3373 00002999 7209                <1> 	jb movlargecursorterm
  3374 0000299B 66B80700            <1> 	mov ax, 7
  3375 0000299F E904000000          <1> 	jmp movedcursorterm
  3376                              <1> movlargecursorterm:
  3377 000029A4 66B8F000            <1> 	mov ax, 0xF0
  3378                              <1> movedcursorterm:
  3379 000029A8 66894702            <1> 	mov [edi + 2], ax
  3380 000029AC 6681FB0000          <1> 	cmp bx, 0
  3381 000029B1 7507                <1> 	jne fixednocursorterm
  3382 000029B3 66BB2000            <1> 	mov bx, ' '
  3383 000029B7 66891F              <1> 	mov [edi], bx
  3384                              <1> fixednocursorterm:
  3385 000029BA C3                  <1> 	ret
  3386                              <1> %endif
  3387                                      %include "source/dosints.asm"
  3388                              <1> int20h:
  3389 000029BB 66B8004C            <1> mov ax, 0x4C00
  3390                              <1> int21h:
  3391                              <1> dostosolleros:
  3392 000029BF 6650                <1> 	push ax
  3393 000029C1 66B83000            <1> 	mov ax, NEW_DATA_SEL
  3394 000029C5 8ED8                <1> 	mov ds, ax
  3395 000029C7 8EC0                <1> 	mov es, ax
  3396 000029C9 8EE0                <1> 	mov fs, ax
  3397 000029CB 66B82000            <1> 	mov ax, SYS_DATA_SEL
  3398 000029CF 8EE8                <1> 	mov gs, ax
  3399 000029D1 6658                <1> 	pop ax
  3400 000029D3 9C                  <1> 	pushf
  3401 000029D4 60                  <1> 	pusha
  3402 000029D5 80FC01              <1> 	cmp ah, 1
  3403 000029D8 0F8449000000        <1> 	je near dosgchar
  3404 000029DE 80FC02              <1> 	cmp ah, 2
  3405 000029E1 0F8447000000        <1> 	je near doswchar
  3406 000029E7 80FC09              <1> 	cmp ah, 9
  3407 000029EA 0F8449000000        <1> 	je near dosprintstr
  3408 000029F0 80FC0A              <1> 	cmp ah, 0xA
  3409 000029F3 0F8456000000        <1> 	je near dosgetstr
  3410 000029F9 80FC2B              <1> 	cmp ah, 0x2B
  3411 000029FC 0F8492000000        <1> 	je near dosgetdate
  3412 00002A02 80FC2C              <1> 	cmp ah, 0x2C
  3413 00002A05 0F84AC000000        <1> 	je near dosgettime
  3414 00002A0B 80FC4C              <1> 	cmp ah, 0x4C
  3415 00002A0E 0F84C1000000        <1> 	je near dosexit
  3416                              <1> backtodos:
  3417 00002A14 61                  <1> 	popa
  3418 00002A15 9D                  <1> 	popf
  3419 00002A16 6650                <1> 	push ax
  3420 00002A18 66B85000            <1> 	mov ax, DOS_DATA_SEL
  3421 00002A1C 8ED8                <1> 	mov ds, ax
  3422 00002A1E 8EC0                <1> 	mov es, ax
  3423 00002A20 8EE0                <1> 	mov fs, ax
  3424 00002A22 8EE8                <1> 	mov gs, ax
  3425 00002A24 6658                <1> 	pop ax
  3426 00002A26 CF                  <1> 	iret
  3427                              <1> 
  3428                              <1> dosgchar:
  3429 00002A27 E8F4F8FFFF          <1> 	call getchar
  3430 00002A2C EBE6                <1> 	jmp backtodos
  3431                              <1> 	
  3432                              <1> doswchar:
  3433 00002A2E 88D0                <1> 	mov al, dl
  3434 00002A30 B307                <1> 	mov bl, 7
  3435 00002A32 E865F9FFFF          <1> 	call prcharint
  3436 00002A37 EBDB                <1> 	jmp backtodos
  3437                              <1> 	
  3438                              <1> dosprintstr:
  3439 00002A39 31F6                <1> 	xor esi, esi
  3440 00002A3B 6689D6              <1> 	mov si, dx
  3441 00002A3E 81C600004000        <1> 	add esi, dosprogloc
  3442 00002A44 B024                <1> 	mov al, "$"
  3443 00002A46 B307                <1> 	mov bl, 7
  3444 00002A48 E8E5F2FFFF          <1> 	call printint
  3445 00002A4D EBC5                <1> 	jmp backtodos
  3446                              <1> 	
  3447                              <1> dosgetstr:
  3448 00002A4F 31F6                <1> 	xor esi, esi
  3449 00002A51 6689D6              <1> 	mov si, dx
  3450 00002A54 81C600004000        <1> 	add esi, dosprogloc
  3451 00002A5A B900000000          <1> 	mov ecx, 0
  3452 00002A5F 8A0E                <1> 	mov cl, [esi]
  3453 00002A61 81C602000000        <1> 	add esi, 2
  3454 00002A67 89F7                <1> 	mov edi, esi
  3455 00002A69 8935[902A0000]      <1> 	mov [stringstart], esi
  3456 00002A6F 01CF                <1> 	add edi, ecx
  3457 00002A71 B00A                <1> 	mov al, 10
  3458 00002A73 B307                <1> 	mov bl, 7
  3459 00002A75 E8F2F3FFFF          <1> 	call rdprintdos
  3460 00002A7A 89F1                <1> 	mov ecx, esi
  3461 00002A7C 2B0D[902A0000]      <1> 	sub ecx, [stringstart]
  3462 00002A82 8B35[902A0000]      <1> 	mov esi, [stringstart]
  3463 00002A88 884EFF              <1> 	mov [esi - 1], cl
  3464 00002A8B 884EFE              <1> 	mov [esi - 2], cl
  3465 00002A8E EB84                <1> 	jmp backtodos
  3466 00002A90 00000000            <1> stringstart dd 0
  3467                              <1> 
  3468                              <1> dosgetdate:
  3469 00002A94 E88D250000          <1> 	call time
  3470 00002A99 8A0D[EE510000]      <1> 	mov cl, [RTCtimeYear]
  3471 00002A9F B500                <1> 	mov ch, 0
  3472 00002AA1 6681C1D007          <1> 	add cx, 2000
  3473 00002AA6 8A35[ED510000]      <1> 	mov dh, [RTCtimeMonth]
  3474 00002AAC 8A15[EC510000]      <1> 	mov dl, [RTCtimeDay]
  3475 00002AB2 E95DFFFFFF          <1> 	jmp backtodos
  3476                              <1> 
  3477                              <1> dosgettime:
  3478 00002AB7 E86A250000          <1> 	call time
  3479 00002ABC 8A2D[EB510000]      <1> 	mov ch, [RTCtimeHour]
  3480 00002AC2 8A0D[EA510000]      <1> 	mov cl, [RTCtimeMinute]
  3481 00002AC8 8A35[E9510000]      <1> 	mov dh, [RTCtimeSecond]
  3482 00002ACE B200                <1> 	mov dl, 0
  3483 00002AD0 E93FFFFFFF          <1> 	jmp backtodos
  3484                              <1> 	
  3485                              <1> dosexit:
  3486 00002AD5 BE[77890000]        <1> 	mov esi, line
  3487 00002ADA E84CF2FFFF          <1> 	call print
  3488 00002ADF 61                  <1> 	popa
  3489 00002AE0 9D                  <1> 	popf
  3490 00002AE1 8B25[E6F10000]      <1> 	mov esp, [previousstack]
  3491 00002AE7 31DB                <1> 	xor ebx, ebx
  3492 00002AE9 88C3                <1> 	mov bl, al
  3493 00002AEB 80FB00              <1> 	cmp bl, 0
  3494 00002AEE 0F85C2F1FFFF        <1> 	jne near exitprog.error
  3495 00002AF4 C3                  <1> 	ret
  3496                                      %include "source/solleros.asm"
  3497                              <1> 	;SOLLEROS.ASM
  3498                              <1> os:
  3499                              <1> setdefenv:
  3500 00002AF5 B02F                <1> 	mov al, '/'
  3501 00002AF7 A2[F2F10000]        <1> 	mov [currentfolder], al
  3502 00002AFC B801000000          <1> 	mov eax, 1
  3503 00002B01 A3[EEF10000]        <1> 	mov [currentfolderloc], eax
  3504 00002B06 E8C9F2FFFF          <1> 	call clear
  3505                              <1> 	
  3506                              <1> bootfilecheck:
  3507 00002B0B 803D[F6F30000]01    <1> 	cmp byte [ranboot], 1
  3508 00002B12 0F8421000000        <1> 	je near nobootfile
  3509                              <1> 	%ifdef hardware.automatic
  3510 00002B18 E825360000          <1> 		call initializelater ;Initialize components that have debug messages
  3511                              <1> 	%endif
  3512 00002B1D BF[36890000]        <1> 	mov edi, bootfilename
  3513 00002B22 BE00004000          <1> 	mov esi, 0x400000
  3514 00002B27 E8433A0000          <1> 	call loadfile
  3515 00002B2C 81FA00000000        <1> 	cmp edx, 0
  3516 00002B32 7505                <1> 	jne nobootfile
  3517 00002B34 E8B20D0000          <1> 	call progbatchfound
  3518                              <1> nobootfile:	
  3519 00002B39 C605[F6F30000]01    <1> 	mov byte [ranboot], 1
  3520                              <1> 
  3521 00002B40 BE[03000000]        <1> 	mov esi, signature
  3522                              <1> .sigcopyloop:	;this prevents an odd error
  3523 00002B45 658A06              <1> 	mov al, [gs:esi]
  3524 00002B48 8806                <1> 	mov [esi], al
  3525 00002B4A 46                  <1> 	inc esi
  3526 00002B4B 81FE[1D000000]      <1> 	cmp esi, signatureend
  3527 00002B51 72F2                <1> 	jb .sigcopyloop
  3528                              <1> 	
  3529 00002B53 BE[03000000]        <1> 	mov esi, signature
  3530 00002B58 E8CEF1FFFF          <1> 	call print
  3531 00002B5D 8B0D[19000000]      <1> 	mov ecx, [signatureend - 4]
  3532 00002B63 E8F6060000          <1> 	call showdec
  3533 00002B68 BE[77890000]        <1> 	mov esi, line
  3534 00002B6D E8B9F1FFFF          <1> 	call print
  3535 00002B72 BE[53890000]        <1> 	mov esi, userask
  3536 00002B77 E8AFF1FFFF          <1> 	call print
  3537                              <1> usercheck:
  3538 00002B7C BE[66080100]        <1> 	mov esi, buftxt
  3539 00002B81 BF[660C0100]        <1> 	mov edi, buftxtend
  3540 00002B86 B00A                <1> 	mov al, 10
  3541 00002B88 E8CBF2FFFF          <1> 	call rdprint
  3542 00002B8D 56                  <1> 	push esi
  3543 00002B8E BE[5D890000]        <1> 	mov esi, pwdask
  3544 00002B93 E893F1FFFF          <1> 	call print
  3545 00002B98 5E                  <1> 	pop esi
  3546 00002B99 46                  <1> 	inc esi
  3547 00002B9A 8935[8F2C0000]      <1> 	mov [esipass], esi
  3548                              <1> passcheck:
  3549 00002BA0 E87BF7FFFF          <1> 	call getchar
  3550 00002BA5 3C0A                <1> 	cmp al, 10
  3551 00002BA7 0F8438000000        <1> 	je near gotpass
  3552 00002BAD 3C08                <1> 	cmp al, 8
  3553 00002BAF 0F8412000000        <1> 	je near backpass
  3554 00002BB5 8806                <1> 	mov [esi], al
  3555 00002BB7 46                  <1> 	inc esi
  3556 00002BB8 30E4                <1> 	xor ah, ah
  3557 00002BBA B02A                <1> 	mov al, "*"
  3558 00002BBC E8DBF7FFFF          <1> 	call prcharint
  3559 00002BC1 EBDD                <1> 	jmp passcheck
  3560 00002BC3 08200800            <1> backcursor2 db 8," ",8,0
  3561                              <1> backpass:
  3562 00002BC7 3B35[8F2C0000]      <1> 	cmp esi, [esipass]
  3563 00002BCD 0F84CDFFFFFF        <1> 	je near passcheck
  3564 00002BD3 4E                  <1> 	dec esi
  3565 00002BD4 C60600              <1> 	mov byte [esi], 0
  3566 00002BD7 56                  <1> 	push esi
  3567 00002BD8 BE[C32B0000]        <1> 	mov esi, backcursor2
  3568 00002BDD E849F1FFFF          <1> 	call print
  3569 00002BE2 5E                  <1> 	pop esi
  3570 00002BE3 EBBB                <1> 	jmp passcheck
  3571                              <1> gotpass:
  3572 00002BE5 B00A                <1> 	mov al, 10
  3573 00002BE7 E8B0F7FFFF          <1> 	call prcharint
  3574 00002BEC 30C0                <1> 	xor al, al
  3575 00002BEE 31C9                <1> 	xor ecx, ecx
  3576 00002BF0 8806                <1> 	mov [esi], al
  3577 00002BF2 BB[79890000]        <1> 	mov ebx, userlst
  3578                              <1> userfind:
  3579 00002BF7 BE[66080100]        <1> 	mov esi, buftxt
  3580 00002BFC 8A06                <1> 	mov al, [esi]
  3581 00002BFE 3C00                <1> 	cmp al, 0
  3582 00002C00 0F84EFFEFFFF        <1> 	je near os
  3583 00002C06 891D[932C0000]      <1> 	mov [usercache], ebx
  3584 00002C0C E860030000          <1> 	call tester
  3585 00002C11 3C01                <1> 	cmp al, 1
  3586 00002C13 7416                <1> 	je pwdtest
  3587 00002C15 41                  <1> 	inc ecx
  3588                              <1> nxtuser:
  3589 00002C16 8A03                <1> 	mov al, [ebx]
  3590 00002C18 43                  <1> 	inc ebx
  3591 00002C19 3C00                <1> 	cmp al, 0
  3592 00002C1B 75F9                <1> 	jne nxtuser
  3593 00002C1D 81FB[9C890000]      <1> 	cmp ebx, userlstend
  3594 00002C23 0F83CCFEFFFF        <1> 	jae near os
  3595 00002C29 EBCC                <1> 	jmp userfind
  3596                              <1> pwdtest:
  3597 00002C2B 46                  <1> 	inc esi
  3598 00002C2C 43                  <1> 	inc ebx
  3599 00002C2D E83F030000          <1> 	call tester
  3600 00002C32 3C01                <1> 	cmp al, 1
  3601 00002C34 7402                <1> 	je pwdrgt
  3602 00002C36 EBDE                <1> 	jmp nxtuser
  3603                              <1> pwdrgt:
  3604 00002C38 D1E9                <1> 	shr ecx, 1
  3605 00002C3A 890D[F2F30000]      <1> 	mov [uid], ecx
  3606 00002C40 E88FF1FFFF          <1> 	call clear
  3607 00002C45 31C9                <1> 	xor ecx, ecx
  3608 00002C47 41                  <1> 	inc ecx
  3609 00002C48 890D[10BA0200]      <1> 	mov [commandbufpos], ecx
  3610                              <1> returnfromexp:
  3611 00002C4E 66B90002            <1> 	mov cx, 200h
  3612 00002C52 BE[66080100]        <1> 	mov esi, buftxt
  3613 00002C57 8935[6D2F0000]      <1> 	mov [currentcommandloc], esi
  3614 00002C5D E825000000          <1> 	call bufclr
  3615                              <1> clearolddata:
  3616 00002C62 31C0                <1> 	xor eax, eax
  3617 00002C64 A2[F7F30000]        <1> 	mov [IFON], al
  3618 00002C69 A2[F8F30000]        <1> 	mov [IFTRUE], al
  3619 00002C6E A2[60F40000]        <1> 	mov [BATCHISON], al
  3620 00002C73 A3[5CF40000]        <1> 	mov [BATCHPOS], eax
  3621 00002C78 A2[61F40000]        <1> 	mov [LOOPON], al
  3622 00002C7D A3[62F40000]        <1> 	mov [LOOPPOS], eax
  3623 00002C82 E933000000          <1> 	jmp nwcmd
  3624                              <1> bufclr:	
  3625 00002C87 30C0                <1> 	xor al, al
  3626 00002C89 8806                <1> 	mov [esi], al
  3627 00002C8B 46                  <1> 	inc esi
  3628 00002C8C E2F9                <1> 	loop bufclr
  3629 00002C8E C3                  <1> 	ret
  3630                              <1> 
  3631 00002C8F 00000000            <1> esipass dd 0
  3632 00002C93 [79890000]          <1> usercache dd userlst
  3633                              <1> 	
  3634                              <1> buftxtclear:
  3635 00002C97 30C0                <1> 	xor al, al
  3636 00002C99 BE[66080100]        <1> 	mov esi, buftxt
  3637 00002C9E 81FE[660C0100]      <1> clearbuftxt: cmp esi, buf2
  3638 00002CA4 730E                <1> 	jae retbufclr
  3639 00002CA6 8806                <1> 	mov [esi], al
  3640 00002CA8 46                  <1> 	inc esi
  3641 00002CA9 EBF3                <1> 	jmp clearbuftxt
  3642                              <1> 
  3643 00002CAB 39DE                <1> clearitbuf: cmp esi, ebx
  3644 00002CAD 7305                <1> 	jae retbufclr
  3645 00002CAF 8806                <1> 	mov [esi], al
  3646 00002CB1 46                  <1> 	inc esi
  3647 00002CB2 EBF7                <1> 	jmp clearitbuf
  3648 00002CB4 C3                  <1> retbufclr: ret
  3649                              <1> 
  3650 00002CB5 E900000000          <1> full:	jmp nwcmd
  3651                              <1> 
  3652                              <1> shush:	;SollerOS Hardly Unix-compatible Shell
  3653                              <1> nwcmd:
  3654 00002CBA FB                  <1> 	sti
  3655 00002CBB 31C0                <1> 	xor eax, eax
  3656 00002CBD 3905[8F2E0000]      <1> 	cmp [nextcommandloc], eax
  3657 00002CC3 7413                <1> 	je nomultiplecommand
  3658 00002CC5 8B35[8F2E0000]      <1> 	mov esi, [nextcommandloc]
  3659 00002CCB 8935[932E0000]      <1> 	mov [thiscommandloc], esi
  3660 00002CD1 E8C6010000          <1> 	call fixvariables
  3661 00002CD6 EBE2                <1> 	jmp nwcmd
  3662                              <1> nomultiplecommand:
  3663 00002CD8 A3[932E0000]        <1> 	mov [thiscommandloc], eax
  3664 00002CDD 3805[0E670000]      <1> 	cmp [threadson], al
  3665 00002CE3 7405                <1> 	je noclinwcmd
  3666 00002CE5 A2[0E670000]        <1> 	mov [threadson], al
  3667                              <1> noclinwcmd:
  3668 00002CEA B001                <1> 	mov al, 1
  3669 00002CEC 3805[60F40000]      <1> 	cmp [BATCHISON], al
  3670 00002CF2 7501                <1> 	jne cancel
  3671 00002CF4 C3                  <1> 	ret
  3672 00002CF5 30C0                <1> cancel:	xor al, al
  3673 00002CF7 A2[F7F30000]        <1> 	mov [IFON], al
  3674 00002CFC A2[60F40000]        <1> 	mov [BATCHISON], al
  3675 00002D01 B05B                <1> 	mov al, '['
  3676 00002D03 66BB0700            <1> 	mov bx, 7
  3677 00002D07 E8A1F6FFFF          <1> 	call prcharq
  3678 00002D0C 8B35[932C0000]      <1> 	mov esi, [usercache]
  3679 00002D12 E8F5EFFFFF          <1> 	call printquiet
  3680 00002D17 BE[67890000]        <1> 	mov esi, computer
  3681 00002D1C E8EBEFFFFF          <1> 	call printquiet
  3682 00002D21 BE[F2F10000]        <1> 	mov esi, currentfolder
  3683 00002D26 0335[EAF10000]      <1> 	add esi, [lastfolderloc]
  3684 00002D2C E8DBEFFFFF          <1> 	call printquiet
  3685 00002D31 BE[72890000]        <1> 	mov esi, endprompt
  3686 00002D36 E8F0EFFFFF          <1> 	call print
  3687 00002D3B E857FFFFFF          <1> 	call buftxtclear
  3688 00002D40 BE[66080100]        <1> 	mov esi, buftxt
  3689 00002D45 C605[09230000]01    <1> 	mov byte [commandedit], 1
  3690 00002D4C B00A                <1> 	mov al, 10
  3691 00002D4E 66BB0700            <1> 	mov bx, 7
  3692 00002D52 BF[660C0100]        <1> 	mov edi, buftxtend
  3693 00002D57 E8FCF0FFFF          <1> 	call rdprint
  3694 00002D5C C605[09230000]00    <1> 	mov byte [commandedit], 0
  3695 00002D63 803D[66080100]00    <1> 	cmp byte [buftxt], 0
  3696 00002D6A 0F844AFFFFFF        <1> 	je near nwcmd
  3697 00002D70 8B35[10BA0200]      <1> gotcmd:	mov esi, [commandbufpos]
  3698 00002D76 8935[0CBA0200]      <1> 	mov [lastcommandpos], esi
  3699 00002D7C FF05[18BA0200]      <1> 	inc dword [commandsentered]
  3700 00002D82 BF[66080100]        <1> 	mov edi, buftxt
  3701 00002D87 81C6[1CBA0200]      <1> 	add esi, commandbuf
  3702 00002D8D 81FE[1CCA0200]      <1> 	cmp esi, commandbufend
  3703 00002D93 7605                <1> 	jbe copycommand
  3704 00002D95 BE[1CBA0200]        <1> 	mov esi, commandbuf
  3705                              <1> copycommand:
  3706 00002D9A 8A07                <1> 	mov al, [edi]
  3707 00002D9C 8806                <1> 	mov [esi], al
  3708 00002D9E 47                  <1> 	inc edi
  3709 00002D9F 46                  <1> 	inc esi
  3710 00002DA0 3C00                <1> 	cmp al, 0
  3711 00002DA2 740F                <1> 	je donecopy
  3712 00002DA4 81FE[1CCA0200]      <1> 	cmp esi, commandbufend
  3713 00002DAA 76EE                <1> 	jbe copycommand
  3714 00002DAC BE[1CBA0200]        <1> 	mov esi, commandbuf
  3715 00002DB1 EBE7                <1> 	jmp copycommand
  3716                              <1> donecopy:
  3717 00002DB3 81EE[1CBA0200]      <1> 	sub esi, commandbuf
  3718 00002DB9 8935[10BA0200]      <1> 	mov [commandbufpos], esi
  3719 00002DBF E8D3000000          <1> 	call run
  3720 00002DC4 E9F1FEFFFF          <1> 	jmp nwcmd
  3721                              <1> 
  3722 00002DC9 E8C9FEFFFF          <1> input:	call buftxtclear
  3723 00002DCE BE[66080100]        <1> 	mov esi, buftxt		;puts input into buftxt AND onto screen
  3724 00002DD3 BF[660C0100]        <1> 	mov edi, buftxtend
  3725 00002DD8 B00A                <1> stdin:	mov al, 10
  3726 00002DDA B307                <1> 	mov bl, 7
  3727 00002DDC E877F0FFFF          <1> 	call rdprint
  3728 00002DE1 C3                  <1> 	ret
  3729                              <1> 
  3730                              <1> replacevariable:
  3731 00002DE2 8A4601              <1> 	mov al, [esi + 1]
  3732 00002DE5 C64601FF            <1> 	mov byte [esi + 1], 255
  3733 00002DE9 3C24                <1> 	cmp al, "$"
  3734 00002DEB 0F84AB000000        <1> 	je near fixvariables
  3735 00002DF1 884601              <1> 	mov [esi + 1], al
  3736 00002DF4 56                  <1> 	push esi
  3737 00002DF5 81EE[66080100]      <1> 	sub esi, buftxt
  3738 00002DFB 89F7                <1> 	mov edi, esi
  3739 00002DFD 81C6[66080100]      <1> 	add esi, buftxt
  3740 00002E03 47                  <1> 	inc edi
  3741 00002E04 BB[66F40000]        <1> 	mov ebx, variables
  3742 00002E09 E834150000          <1> 	call nxtvrech
  3743 00002E0E 89F7                <1> 	mov edi, esi
  3744 00002E10 31DB                <1> 	xor ebx, ebx
  3745 00002E12 4E                  <1> 	dec esi
  3746                              <1> findvarname:
  3747 00002E13 4E                  <1> 	dec esi
  3748 00002E14 8A06                <1> 	mov al, [esi]
  3749 00002E16 43                  <1> 	inc ebx
  3750 00002E17 3C04                <1> 	cmp al, 4
  3751 00002E19 75F8                <1> 	jne findvarname
  3752 00002E1B 5E                  <1> 	pop esi
  3753                              <1> replacevarloop:
  3754 00002E1C 8A07                <1> 	mov al, [edi]
  3755 00002E1E 3C00                <1> 	cmp al, 0
  3756 00002E20 0F8413000000        <1> 	je near compressbuftxt
  3757 00002E26 81FB00000000        <1> 	cmp ebx, 0
  3758 00002E2C 0F8416000000        <1> 	je near expandbuftxt
  3759 00002E32 8806                <1> 	mov [esi], al
  3760 00002E34 4B                  <1> 	dec ebx
  3761 00002E35 46                  <1> 	inc esi
  3762 00002E36 47                  <1> 	inc edi
  3763 00002E37 EBE3                <1> 	jmp replacevarloop
  3764                              <1> compressbuftxt:
  3765 00002E39 8A041E              <1> 	mov al, [esi + ebx]
  3766 00002E3C 8806                <1> 	mov [esi], al
  3767 00002E3E 46                  <1> 	inc esi
  3768 00002E3F 3C00                <1> 	cmp al, 0
  3769 00002E41 75F6                <1> 	jne compressbuftxt
  3770 00002E43 E954000000          <1> 	jmp fixvariables
  3771                              <1> expandbuftxt:
  3772 00002E48 89F1                <1> 	mov ecx, esi
  3773 00002E4A 8A26                <1> 	mov ah, [esi]
  3774                              <1> expandbuftxtlp:
  3775 00002E4C 8A1E                <1> 	mov bl, [esi]
  3776 00002E4E 46                  <1> 	inc esi
  3777 00002E4F 8A3E                <1> 	mov bh, [esi]
  3778 00002E51 8826                <1> 	mov [esi], ah
  3779 00002E53 88FC                <1> 	mov ah, bh
  3780 00002E55 80FB00              <1> 	cmp bl, 0
  3781 00002E58 75F2                <1> 	jne expandbuftxtlp
  3782 00002E5A 89CE                <1> 	mov esi, ecx
  3783 00002E5C 8806                <1> 	mov [esi], al
  3784 00002E5E 47                  <1> 	inc edi
  3785 00002E5F 8A07                <1> 	mov al, [edi]
  3786 00002E61 3C00                <1> 	cmp al, 0
  3787 00002E63 0F8433000000        <1> 	je near fixvariables
  3788 00002E69 46                  <1> 	inc esi
  3789 00002E6A EBDC                <1> 	jmp expandbuftxt
  3790                              <1> multipleprogline:
  3791 00002E6C 30E4                <1> 	xor ah, ah
  3792 00002E6E 8826                <1> 	mov [esi], ah
  3793 00002E70 46                  <1> 	inc esi
  3794 00002E71 8935[8F2E0000]      <1> 	mov [nextcommandloc], esi
  3795 00002E77 E93E000000          <1> 	jmp donefixvariables
  3796                              <1> inlinecomment:	;if the following char is #, include a #, otherwise end the line
  3797 00002E7C 46                  <1> 	inc esi
  3798 00002E7D 8A06                <1> 	mov al, [esi]
  3799 00002E7F C606FF              <1> 	mov byte [esi], 255
  3800 00002E82 3C23                <1> 	cmp al, '#'
  3801 00002E84 7416                <1> 	je fixvariables
  3802 00002E86 4E                  <1> 	dec esi
  3803 00002E87 C60600              <1> 	mov byte [esi], 0
  3804 00002E8A E90D000000          <1> 	jmp fixvariables
  3805                              <1> 	
  3806 00002E8F 00000000            <1> nextcommandloc dd 0
  3807 00002E93 00000000            <1> thiscommandloc dd 0	
  3808                              <1> run:
  3809 00002E97 BE[66080100]        <1> 	mov esi, buftxt
  3810 00002E9C 46                  <1> fixvariables:	inc esi
  3811 00002E9D 8A06                <1> 	mov al, [esi]
  3812 00002E9F 3C23                <1> 	cmp al, '#'	;inline comment
  3813 00002EA1 74D9                <1> 	je inlinecomment
  3814 00002EA3 3C24                <1> 	cmp al, '$' ;variable
  3815 00002EA5 0F8437FFFFFF        <1> 	je near replacevariable
  3816 00002EAB 3C3B                <1> 	cmp al, ';' ;program list
  3817 00002EAD 74BD                <1> 	je multipleprogline
  3818 00002EAF 3C00                <1> 	cmp al, 0
  3819 00002EB1 75E9                <1> 	jne fixvariables
  3820 00002EB3 31C0                <1> 	xor eax, eax
  3821 00002EB5 A3[8F2E0000]        <1> 	mov [nextcommandloc], eax
  3822                              <1> donefixvariables:
  3823 00002EBA 803D[58340000]00    <1> 	cmp byte [indexdone], 0
  3824 00002EC1 7505                <1> 	jne progtest
  3825 00002EC3 E8FB040000          <1> 	call indexfiles
  3826                              <1> progtest:
  3827 00002EC8 31C0                <1> 	xor eax, eax
  3828 00002ECA BB[E6ED0000]        <1> 	mov ebx, fileindex
  3829 00002ECF 668B03              <1> prgnxt:	mov ax, [ebx]
  3830 00002ED2 B1FF                <1> 	mov cl, 255
  3831 00002ED4 B52C                <1> 	mov ch, 44
  3832 00002ED6 6639C8              <1> 	cmp ax, cx
  3833 00002ED9 740B                <1> 	je fndprg
  3834 00002EDB 43                  <1> 	inc ebx
  3835 00002EDC 81FB[E6F10000]      <1> 	cmp ebx, fileindexend
  3836 00002EE2 735D                <1> 	jae prgnf
  3837 00002EE4 EBE9                <1> 	jmp prgnxt
  3838 00002EE6 81C302000000        <1> fndprg: add ebx, 2
  3839 00002EEC 31C9                <1> 	xor ecx, ecx
  3840 00002EEE BE[66080100]        <1> 	mov esi, buftxt
  3841 00002EF3 390D[932E0000]      <1> 	cmp [thiscommandloc], ecx
  3842 00002EF9 7406                <1> 	je noprgtstmultiple
  3843 00002EFB 8B35[932E0000]      <1> 	mov esi, [thiscommandloc]
  3844                              <1> noprgtstmultiple:
  3845 00002F01 E8A6000000          <1> 	call cndtest
  3846 00002F06 3C01                <1> 	cmp al, 1
  3847 00002F08 7302                <1> 	jae prggood
  3848 00002F0A EBC3                <1> 	jmp prgnxt
  3849 00002F0C 81FB[E6F10000]      <1> prggood: cmp ebx, fileindexend
  3850 00002F12 7358                <1> 	jae prgdn
  3851 00002F14 31C0                <1> 	xor eax, eax
  3852 00002F16 BE[66080100]        <1> 	mov esi, buftxt
  3853 00002F1B 3905[932E0000]      <1> 	cmp [thiscommandloc], eax
  3854 00002F21 7406                <1> 	je noprggoodmul
  3855 00002F23 8B35[932E0000]      <1> 	mov esi, [thiscommandloc]
  3856                              <1> noprggoodmul:
  3857 00002F29 8935[6D2F0000]      <1> 	mov [currentcommandloc], esi
  3858 00002F2F 81C303000000        <1> 	add ebx, 3
  3859 00002F35 8B3B                <1> 	mov edi, [ebx]
  3860 00002F37 C605[0E670000]02    <1> 	mov byte [threadson], 2
  3861 00002F3E FFD7                <1> 	call edi
  3862 00002F40 C3                  <1> 	ret
  3863                              <1> prgnf:	
  3864 00002F41 8B35[6D2F0000]      <1> 	mov esi, [currentcommandloc]
  3865 00002F47 8A06                <1> 	mov al, [esi]
  3866 00002F49 3C00                <1> 	cmp al, 0
  3867 00002F4B 741F                <1> 	je prgdn
  3868 00002F4D BE[3E890000]        <1> 	mov esi, notfound1
  3869 00002F52 E8D4EDFFFF          <1> 	call print
  3870 00002F57 8B35[6D2F0000]      <1> 	mov esi, [currentcommandloc]
  3871 00002F5D E8C9EDFFFF          <1> 	call print
  3872 00002F62 BE[46890000]        <1> 	mov esi, notfound2
  3873 00002F67 E8BFEDFFFF          <1> 	call print
  3874 00002F6C C3                  <1> prgdn:	ret
  3875                              <1> 
  3876 00002F6D 00000000            <1> currentcommandloc dd 0
  3877                              <1> 
  3878                              <1> tester:			;si=user bx=prog returns 1 in al if true
  3879 00002F71 6631C0              <1> 	xor ax, ax
  3880 00002F74 8A06                <1> retest:	mov al, [esi]
  3881 00002F76 8A23                <1> 	mov ah, [ebx]
  3882 00002F78 3C00                <1> 	cmp al, 0
  3883 00002F7A 7408                <1> 	je testtrue
  3884 00002F7C 38E0                <1> 	cmp al, ah
  3885 00002F7E 750C                <1> 	jne testfalse
  3886 00002F80 43                  <1> 	inc ebx
  3887 00002F81 46                  <1> 	inc esi
  3888 00002F82 EBF0                <1> 	jmp retest
  3889                              <1> testtrue:
  3890 00002F84 80FC00              <1> 	cmp ah, 0
  3891 00002F87 7503                <1> 	jne testfalse
  3892 00002F89 B001                <1> 	mov al, 1
  3893 00002F8B C3                  <1> 	ret
  3894                              <1> testfalse:
  3895 00002F8C 30C0                <1> 	xor al, al
  3896 00002F8E C3                  <1> 	ret
  3897                              <1> 
  3898                              <1> optest:			;si=user bx=prog returns 1 in al if true
  3899 00002F8F 30C0                <1> 	xor al, al
  3900                              <1> opretest:
  3901 00002F91 8A06                <1> 	mov al, [esi]
  3902 00002F93 8A23                <1> 	mov ah, [ebx]
  3903 00002F95 38E0                <1> 	cmp al, ah
  3904 00002F97 7510                <1> 	jne optestfalse
  3905 00002F99 80FC00              <1> 	cmp ah, 0
  3906 00002F9C 7404                <1> 	je optesttrue
  3907 00002F9E 43                  <1> 	inc ebx
  3908 00002F9F 46                  <1> 	inc esi
  3909 00002FA0 EBEF                <1> 	jmp opretest
  3910                              <1> optesttrue:
  3911 00002FA2 3C00                <1> 	cmp al, 0
  3912 00002FA4 7503                <1> 	jne optestfalse
  3913 00002FA6 B001                <1> 	mov al, 1
  3914 00002FA8 C3                  <1> 	ret
  3915                              <1> optestfalse:
  3916 00002FA9 30C0                <1> 	xor al, al
  3917 00002FAB C3                  <1> 	ret
  3918                              <1> 
  3919                              <1> cndtest:			;si=user bx=prog cl=endchar returns 1 in al if true
  3920 00002FAC 30C0                <1> 	xor al, al
  3921 00002FAE 8A06                <1> cndretest:	mov al, [esi]
  3922 00002FB0 8A23                <1> 	mov ah, [ebx]
  3923 00002FB2 38CC                <1> 	cmp ah, cl
  3924 00002FB4 7408                <1> 	je cndtesttrue
  3925 00002FB6 38E0                <1> 	cmp al, ah
  3926 00002FB8 750B                <1> 	jne cndtestfalse
  3927 00002FBA 43                  <1> 	inc ebx
  3928 00002FBB 46                  <1> 	inc esi
  3929 00002FBC EBF0                <1> 	jmp cndretest
  3930                              <1> cndtesttrue:
  3931 00002FBE 38C8                <1> 	cmp al, cl
  3932 00002FC0 7506                <1> 	jne cndtestalmost
  3933 00002FC2 B001                <1> 	mov al, 1
  3934 00002FC4 C3                  <1> 	ret
  3935                              <1> cndtestfalse:
  3936 00002FC5 30C0                <1> 	xor al, al
  3937 00002FC7 C3                  <1> 	ret
  3938                              <1> cndtestalmost:
  3939 00002FC8 B002                <1> 	mov al, 2
  3940 00002FCA C3                  <1> 	ret
  3941                              <1> 	
  3942                              <1> array:				;arraystart in si, arrayend in bx, arrayseperator in cx
  3943                              <1> 		                ;ends if array seperator is found backwards after 0
  3944                              <1> 	arnxt:	      
  3945 00002FCB 88E8                <1> 		mov al, ch
  3946 00002FCD 88CC                <1> 		mov ah, cl        
  3947 00002FCF 663906              <1> 		cmp [esi], ax
  3948 00002FD2 744D                <1> 		je ardn
  3949 00002FD4 66390E              <1> 		cmp [esi], cx
  3950 00002FD7 7407                <1> 		je arfnd
  3951 00002FD9 46                  <1> 		inc esi
  3952 00002FDA 39DE                <1> 		cmp esi, ebx
  3953 00002FDC 7343                <1> 		jae ardn
  3954 00002FDE EBEB                <1> 		jmp arnxt
  3955 00002FE0 81C602000000        <1> 	arfnd: add esi, 2
  3956 00002FE6 891D[22300000]      <1> 		mov [arbx], ebx
  3957 00002FEC 890D[26300000]      <1> 		mov [arcx], ecx
  3958 00002FF2 E834EDFFFF          <1> 		call print
  3959 00002FF7 8935[28300000]      <1> 		mov [arsi], esi
  3960 00002FFD BE[77890000]        <1> 		mov esi, line
  3961 00003002 E824EDFFFF          <1> 		call print
  3962 00003007 8B1D[22300000]      <1> 		mov ebx, [arbx]
  3963 0000300D 668B0D[26300000]    <1> 		mov cx, [arcx]
  3964 00003014 8B35[28300000]      <1> 		mov esi, [arsi]
  3965 0000301A 46                  <1> 		inc esi
  3966 0000301B 39DE                <1> 		cmp esi, ebx
  3967 0000301D 7302                <1> 		jae ardn
  3968 0000301F EBAA                <1> 		jmp arnxt
  3969 00003021 C3                  <1> 	ardn:	ret
  3970 00003022 00000000            <1> arbx:	dw 0,0
  3971 00003026 0000                <1> arcx:	db 0,0
  3972 00003028 00000000            <1> arsi:	dw 0,0
  3973                              <1> 
  3974                              <1> clearbuffer:
  3975 0000302C BE[660C0100]        <1> 	mov esi, buf2
  3976 00003031 B030                <1> 	mov al, '0'
  3977 00003033 81FE[7A0C0100]      <1> clearbuf: cmp esi, numbuf
  3978 00003039 7305                <1> 	jae doneclearbuff
  3979 0000303B 8806                <1> 	mov [esi], al
  3980 0000303D 46                  <1> 	inc esi
  3981 0000303E EBF3                <1> 	jmp clearbuf
  3982                              <1> doneclearbuff: 
  3983 00003040 C3                  <1> 		ret
  3984                              <1> 
  3985                              <1> convert:
  3986 00003041 4E                  <1> 	dec esi
  3987 00003042 89F3                <1> 	mov ebx, esi		;place to convert into must be in esi, number to convert must be in ecx
  3988                              <1> .lp:
  3989 00003044 89DE                <1> 	mov esi, ebx
  3990 00003046 81EE09000000        <1> 	sub esi, 9
  3991 0000304C 81F900CA9A3B        <1> 	cmp ecx, 1000000000
  3992 00003052 720A                <1> 	jb .8
  3993 00003054 81E900CA9A3B        <1> 	sub ecx, 1000000000
  3994 0000305A FE06                <1> 	inc byte [esi]
  3995 0000305C EBE6                <1> 	jmp .lp
  3996 0000305E 46                  <1> .8:	inc esi
  3997 0000305F 81F900E1F505        <1> 	cmp ecx, 100000000
  3998 00003065 720A                <1> 	jb .7
  3999 00003067 81E900E1F505        <1> 	sub ecx, 100000000
  4000 0000306D FE06                <1> 	inc byte [esi]
  4001 0000306F EBD3                <1> 	jmp .lp
  4002 00003071 46                  <1> .7:	inc esi
  4003 00003072 81F980969800        <1> 	cmp ecx, 10000000
  4004 00003078 720A                <1> 	jb .6
  4005 0000307A 81E980969800        <1> 	sub ecx, 10000000
  4006 00003080 FE06                <1> 	inc byte [esi]
  4007 00003082 EBC0                <1> 	jmp .lp
  4008 00003084 46                  <1> .6:	inc esi
  4009 00003085 81F940420F00        <1> 	cmp ecx, 1000000
  4010 0000308B 720A                <1> 	jb .5
  4011 0000308D 81E940420F00        <1> 	sub ecx, 1000000
  4012 00003093 FE06                <1> 	inc byte [esi]
  4013 00003095 EBAD                <1> 	jmp .lp
  4014 00003097 46                  <1> .5:	inc esi
  4015 00003098 81F9A0860100        <1> 	cmp ecx, 100000
  4016 0000309E 720A                <1> 	jb .4
  4017 000030A0 81E9A0860100        <1> 	sub ecx, 100000
  4018 000030A6 FE06                <1> 	inc byte [esi]
  4019 000030A8 EB9A                <1> 	jmp .lp
  4020 000030AA 46                  <1> .4:	inc esi
  4021 000030AB 81F910270000        <1> 	cmp ecx, 10000
  4022 000030B1 720A                <1> 	jb .3
  4023 000030B3 81E910270000        <1> 	sub ecx, 10000
  4024 000030B9 FE06                <1> 	inc byte [esi]
  4025 000030BB EB87                <1> 	jmp .lp
  4026 000030BD 46                  <1> .3:	inc esi
  4027 000030BE 81F9E8030000        <1> 	cmp ecx, 1000
  4028 000030C4 720D                <1> 	jb .2
  4029 000030C6 81E9E8030000        <1> 	sub ecx, 1000
  4030 000030CC FE06                <1> 	inc byte [esi]
  4031 000030CE E971FFFFFF          <1> 	jmp .lp
  4032 000030D3 46                  <1> .2:	inc esi
  4033 000030D4 81F964000000        <1> 	cmp ecx, 100
  4034 000030DA 720D                <1> 	jb .1
  4035 000030DC 81E964000000        <1> 	sub ecx, 100
  4036 000030E2 FE06                <1> 	inc byte [esi]
  4037 000030E4 E95BFFFFFF          <1> 	jmp .lp
  4038 000030E9 46                  <1> .1:	inc esi
  4039 000030EA 81F90A000000        <1> 	cmp ecx, 10
  4040 000030F0 720D                <1> 	jb .0
  4041 000030F2 81E90A000000        <1> 	sub ecx, 10
  4042 000030F8 FE06                <1> 	inc byte [esi]
  4043 000030FA E945FFFFFF          <1> 	jmp .lp
  4044 000030FF 46                  <1> .0:	inc esi
  4045 00003100 81F901000000        <1> 	cmp ecx, 1
  4046 00003106 720D                <1> 	jb .dn
  4047 00003108 81E901000000        <1> 	sub ecx, 1
  4048 0000310E FE06                <1> 	inc byte [esi]
  4049 00003110 E92FFFFFFF          <1> 	jmp .lp
  4050                              <1> .dn:
  4051 00003115 C3                  <1> 	ret
  4052                              <1> 
  4053                              <1> 	
  4054                              <1> 
  4055 00003116 00<rept>            <1> hexnumber times 8 db 0
  4056 0000311E 202000              <1> hexnumberend db "  ",0
  4057                              <1> 
  4058                              <1> converthex:
  4059                              <1> .clear:	;place to convert to in esi, end of buffer in edi number in ecx
  4060 00003121 56                  <1> 	push esi
  4061 00003122 B030                <1> 	mov al, "0"
  4062 00003124 39FE                <1> .clearlp: cmp esi, edi
  4063 00003126 7305                <1> 	jae .doneclear
  4064 00003128 8806                <1> 	mov [esi], al
  4065 0000312A 46                  <1> 	inc esi
  4066 0000312B EBF7                <1> 	jmp .clearlp
  4067                              <1> .doneclear:
  4068 0000312D 81EE02000000        <1> 	sub esi, 2
  4069 00003133 89C8                <1> 	mov eax, ecx
  4070                              <1> .loop:
  4071 00003135 30FF                <1> 	xor bh, bh
  4072 00003137 88C3                <1> 	mov bl, al
  4073 00003139 66C1E304            <1> 	shl bx, 4
  4074 0000313D C0EB04              <1> 	shr bl, 4
  4075 00003140 86DF                <1> 	xchg bl, bh ;they are backwards
  4076 00003142 80C330              <1> 	add bl, 48
  4077 00003145 80FB39              <1> 	cmp bl, "9"
  4078 00003148 7609                <1> 	jbe .goodbl
  4079 0000314A 80EB30              <1> 	sub bl, 48
  4080 0000314D 80EB0A              <1> 	sub bl, 0xA
  4081 00003150 80C341              <1> 	add bl, "A"
  4082                              <1> .goodbl:
  4083 00003153 80C730              <1> 	add bh, 48
  4084 00003156 80FF39              <1> 	cmp bh, "9"
  4085 00003159 7609                <1> 	jbe .goodbh
  4086 0000315B 80EF30              <1> 	sub bh, 48
  4087 0000315E 80EF0A              <1> 	sub bh, 0xA
  4088 00003161 80C741              <1> 	add bh, "A"
  4089                              <1> .goodbh:
  4090 00003164 C1E808              <1> 	shr eax, 8
  4091 00003167 66891E              <1> 	mov [esi], bx
  4092 0000316A 81EE02000000        <1> 	sub esi, 2
  4093 00003170 3B3424              <1> 	cmp esi, [esp]
  4094 00003173 7207                <1> 	jb .done
  4095 00003175 3D00000000          <1> 	cmp eax, 0
  4096 0000317A 75B9                <1> 	jne .loop
  4097                              <1> .done:
  4098 0000317C 5E                  <1> 	pop esi
  4099 0000317D C3                  <1> 	ret
  4100                              <1> 	
  4101                              <1> 	
  4102 0000317E 00                  <1> smallhex db 0
  4103 0000317F 01                  <1> firsthexshown db 1
  4104                              <1> showhexsmall:
  4105 00003180 C605[7E310000]01    <1> 	mov byte [smallhex], 1
  4106 00003187 E808000000          <1> 	call showhex
  4107 0000318C C605[7E310000]00    <1> 	mov byte [smallhex], 0
  4108 00003193 C3                  <1> 	ret
  4109                              <1> showhex:
  4110 00003194 60                  <1> 	pusha
  4111 00003195 BE[16310000]        <1> 	mov esi, hexnumber
  4112 0000319A BF[1E310000]        <1> 	mov edi, hexnumberend
  4113 0000319F E87DFFFFFF          <1> 	call converthex
  4114 000031A4 803D[7F310000]01    <1> 	cmp byte [firsthexshown], 1
  4115 000031AB 7503                <1> 	jne .show
  4116 000031AD 6631D2              <1> 	xor dx, dx
  4117                              <1> .show:
  4118 000031B0 803D[7F310000]03    <1> 	cmp byte [firsthexshown], 3
  4119 000031B7 750A                <1> 	jne .nonewhexline
  4120 000031B9 BE[77890000]        <1> 	mov esi, line
  4121 000031BE E868EBFFFF          <1> 	call print
  4122                              <1> .nonewhexline:
  4123 000031C3 803D[7F310000]04    <1> 	cmp byte [firsthexshown], 4
  4124 000031CA 7527                <1> 	jne .notab
  4125 000031CC B1A0                <1> 	mov cl, 160
  4126 000031CE 28D1                <1> 	sub cl, dl
  4127 000031D0 C0E905              <1> 	shr cl, 5
  4128 000031D3 C0E105              <1> 	shl cl, 5
  4129 000031D6 80F900              <1> 	cmp cl, 0
  4130 000031D9 750F                <1> 	jne .nonewline
  4131 000031DB BE[77890000]        <1> 	mov esi, line
  4132 000031E0 E846EBFFFF          <1> 	call print
  4133 000031E5 E909000000          <1> 	jmp .notab
  4134                              <1> .nonewline:
  4135 000031EA 80C20F              <1> 	add dl, 15
  4136 000031ED C0EA04              <1> 	shr dl, 4
  4137 000031F0 C0E204              <1> 	shl dl, 4
  4138                              <1> .notab:
  4139 000031F3 BE[16310000]        <1> 	mov esi, hexnumber
  4140 000031F8 803D[7E310000]01    <1> 	cmp byte [smallhex],1
  4141 000031FF 7506                <1> 	jne .nosmall
  4142 00003201 81C606000000        <1> 	add esi, 6
  4143                              <1> .nosmall:
  4144 00003207 803D[7F310000]05    <1> 	cmp byte [firsthexshown], 5
  4145 0000320E 750A                <1> 	jne .noquiet
  4146 00003210 E8F7EAFFFF          <1> 	call printquiet
  4147 00003215 E918000000          <1> 	jmp .donequiet
  4148                              <1> .noquiet:
  4149 0000321A 803D[7F310000]06    <1> 	cmp byte [firsthexshown], 6
  4150 00003221 750A                <1> 	jne .normal
  4151 00003223 E8F7EAFFFF          <1> 	call printhighlight
  4152 00003228 E905000000          <1> 	jmp .donequiet
  4153                              <1> .normal:
  4154 0000322D E8F9EAFFFF          <1> 	call print
  4155                              <1> .donequiet:
  4156 00003232 803D[7F310000]02    <1> 	cmp byte [firsthexshown], 2
  4157 00003239 750A                <1> 	jne .shown
  4158 0000323B BE[77890000]        <1> 	mov esi, line
  4159 00003240 E8E6EAFFFF          <1> 	call print
  4160                              <1> .shown:
  4161 00003245 C605[7F310000]00    <1> 	mov byte [firsthexshown], 0
  4162 0000324C 61                  <1> 	popa
  4163 0000324D C3                  <1> 	ret
  4164                              <1> 
  4165                              <1> 
  4166 0000324E 303030303030303030- <1> decnumber db "00000000000000"
  4167 00003257 3030303030          <1>
  4168 0000325C 2000                <1> decnumberend: db " ",0
  4169                              <1> 
  4170                              <1> showdec: ;;same as showhex, just uses decimal conversion
  4171 0000325E 60                  <1> 	pusha
  4172 0000325F BF[4E320000]        <1> 	mov edi, decnumber
  4173 00003264 BE[5C320000]        <1> 	mov esi, decnumberend
  4174                              <1> .clear:
  4175 00003269 C60730              <1> 	mov byte [edi], '0'
  4176 0000326C 47                  <1> 	inc edi
  4177 0000326D 39F7                <1> 	cmp edi, esi
  4178 0000326F 72F8                <1> 	jb .clear
  4179 00003271 BF[4E320000]        <1> 	mov edi, decnumber
  4180 00003276 E8C6FDFFFF          <1> 	call convert
  4181 0000327B 803D[7F310000]01    <1> 	cmp byte [firsthexshown], 1
  4182 00003282 7503                <1> 	jne .show
  4183 00003284 6631D2              <1> 	xor dx, dx
  4184                              <1> .show:
  4185 00003287 803D[7F310000]03    <1> 	cmp byte [firsthexshown], 3
  4186 0000328E 750A                <1> 	jne .nonewdecline
  4187 00003290 BE[77890000]        <1> 	mov esi, line
  4188 00003295 E891EAFFFF          <1> 	call print
  4189                              <1> .nonewdecline:
  4190 0000329A 803D[7F310000]04    <1> 	cmp byte [firsthexshown], 4
  4191 000032A1 7527                <1> 	jne .notab
  4192 000032A3 B1A0                <1> 	mov cl, 160
  4193 000032A5 28D1                <1> 	sub cl, dl
  4194 000032A7 C0E905              <1> 	shr cl, 5
  4195 000032AA C0E105              <1> 	shl cl, 5
  4196 000032AD 80F900              <1> 	cmp cl, 0
  4197 000032B0 750F                <1> 	jne .nonewline
  4198 000032B2 BE[77890000]        <1> 	mov esi, line
  4199 000032B7 E86FEAFFFF          <1> 	call print
  4200 000032BC E909000000          <1> 	jmp .notab
  4201                              <1> .nonewline:
  4202 000032C1 80C20F              <1> 	add dl, 15
  4203 000032C4 C0EA04              <1> 	shr dl, 4
  4204 000032C7 C0E204              <1> 	shl dl, 4
  4205                              <1> .notab:
  4206 000032CA BE[4E320000]        <1> 	mov esi, decnumber
  4207 000032CF 4E                  <1> 	dec esi
  4208                              <1> .sifind:
  4209 000032D0 46                  <1> 	inc esi
  4210 000032D1 803E30              <1> 	cmp byte [esi], '0'
  4211 000032D4 74FA                <1> 	je .sifind
  4212 000032D6 E850EAFFFF          <1> 	call print
  4213 000032DB 803D[7F310000]02    <1> 	cmp byte [firsthexshown], 2
  4214 000032E2 750A                <1> 	jne .shown
  4215 000032E4 BE[77890000]        <1> 	mov esi, line
  4216 000032E9 E83DEAFFFF          <1> 	call print
  4217                              <1> .shown:
  4218 000032EE C605[7F310000]00    <1> 	mov byte [firsthexshown], 0
  4219 000032F5 61                  <1> 	popa
  4220 000032F6 C3                  <1> 	ret
  4221                              <1> 	
  4222                              <1> cnvrthextxt:
  4223 000032F7 31C9                <1> 	xor ecx, ecx
  4224 000032F9 31C0                <1> 	xor eax, eax
  4225 000032FB 31D2                <1> 	xor edx, edx
  4226 000032FD 31DB                <1> 	xor ebx, ebx
  4227 000032FF 4E                  <1> 	dec esi
  4228                              <1> .end:
  4229 00003300 46                  <1> 	inc esi
  4230 00003301 8A06                <1> 	mov al, [esi]
  4231 00003303 3C00                <1> 	cmp al, 0
  4232 00003305 75F9                <1> 	jne .end
  4233                              <1> .loop:
  4234 00003307 4E                  <1> 	dec esi
  4235 00003308 8A06                <1> 	mov al, [esi]
  4236 0000330A 3C41                <1> 	cmp al, "A"
  4237 0000330C 7328                <1> 	jae .char
  4238 0000330E 2C30                <1> 	sub al, 48
  4239 00003310 3C10                <1> 	cmp al, 16
  4240 00003312 7721                <1> 	ja .done
  4241                              <1> .donechar:
  4242 00003314 81FA00000000        <1> 	cmp edx, 0
  4243 0000331A 740E                <1> 	je .noshl
  4244 0000331C 89D3                <1> 	mov ebx, edx
  4245                              <1> .shl:
  4246 0000331E C1E004              <1> 	shl eax, 4
  4247 00003321 4B                  <1> 	dec ebx
  4248 00003322 81FB00000000        <1> 	cmp ebx, 0
  4249 00003328 75F4                <1> 	jne .shl
  4250                              <1> .noshl:
  4251 0000332A 42                  <1> 	inc edx
  4252 0000332B 01C1                <1> 	add ecx, eax
  4253 0000332D 81FA08000000        <1> 	cmp edx, 8
  4254 00003333 72D2                <1> 	jb .loop
  4255                              <1> .done:
  4256 00003335 C3                  <1> 	ret
  4257                              <1> .char:
  4258 00003336 3C46                <1> 	cmp al, "F"
  4259 00003338 77FB                <1> 	ja .done
  4260 0000333A 2C41                <1> 	sub al, "A"
  4261 0000333C 040A                <1> 	add al, 0xA
  4262 0000333E EBD4                <1> 	jmp .donechar
  4263                              <1> 	
  4264                              <1> 	
  4265                              <1> cnvrttxt: ;text to convert in esi, first part or 0 in edi
  4266 00003340 31C9                <1> 	xor ecx, ecx
  4267 00003342 31C0                <1> 	xor eax, eax
  4268 00003344 31D2                <1> 	xor edx, edx
  4269 00003346 31DB                <1> 	xor ebx, ebx
  4270 00003348 4E                  <1> 	dec esi
  4271                              <1> .lp:
  4272 00003349 46                  <1> 	inc esi
  4273 0000334A 8A06                <1> 	mov al, [esi]
  4274 0000334C 3C00                <1> 	cmp al, 0
  4275 0000334E 75F9                <1> 	jne .lp
  4276 00003350 4E                  <1> 	dec esi
  4277 00003351 8A06                <1> 	mov al, [esi]
  4278 00003353 3C2E                <1> 	cmp al, '.'
  4279 00003355 7503                <1> 	jne .dot
  4280 00003357 46                  <1> 	inc esi
  4281 00003358 EBEF                <1> 	jmp .lp
  4282                              <1> .dot:
  4283 0000335A 3C20                <1> 	cmp al, ' '
  4284 0000335C 7404                <1> 	je .zero
  4285 0000335E 3C30                <1> 	cmp al, '0'
  4286 00003360 7504                <1> 	jne .txtlp
  4287                              <1> .zero: 
  4288 00003362 39FE                <1> 		cmp esi, edi
  4289 00003364 7458                <1> 		je .done
  4290                              <1> .txtlp:
  4291 00003366 31C0                <1> 	xor eax, eax
  4292 00003368 8A06                <1> 	mov al, [esi]
  4293 0000336A 3C3D                <1> 	cmp al, '='
  4294 0000336C 7450                <1> 	je .done
  4295 0000336E 3C30                <1> 	cmp al, 48
  4296 00003370 724C                <1> 	jb .done
  4297 00003372 3C23                <1> 	cmp al, '#'
  4298 00003374 7448                <1> 	je .done
  4299 00003376 39FE                <1> 	cmp esi, edi
  4300 00003378 7244                <1> 	jb .done
  4301 0000337A 81F900000000        <1> 	cmp ecx, 0
  4302 00003380 7708                <1> 	ja .exp
  4303 00003382 2C30                <1> .noexp:	sub al, 48
  4304 00003384 01C2                <1> 	add edx, eax
  4305 00003386 4E                  <1> 	dec esi
  4306 00003387 41                  <1> 	inc ecx
  4307 00003388 EBDC                <1> 	jmp .txtlp
  4308 0000338A 81F900000000        <1> .exp:	cmp ecx, 0
  4309 00003390 74F0                <1> 	je .noexp
  4310 00003392 2C30                <1> 	sub al, 48
  4311 00003394 51                  <1> 	push ecx
  4312 00003395 89C3                <1> .expmul:	mov ebx, eax
  4313 00003397 01D8                <1> 	add eax, ebx
  4314 00003399 01D8                <1> 	add eax, ebx
  4315 0000339B 01D8                <1> 	add eax, ebx
  4316 0000339D 01D8                <1> 	add eax, ebx
  4317 0000339F 01D8                <1> 	add eax, ebx
  4318 000033A1 01D8                <1> 	add eax, ebx
  4319 000033A3 01D8                <1> 	add eax, ebx
  4320 000033A5 01D8                <1> 	add eax, ebx
  4321 000033A7 01D8                <1> 	add eax, ebx
  4322 000033A9 81E901000000        <1> 	sub ecx, 1
  4323 000033AF 81F900000000        <1> 	cmp ecx, 0
  4324 000033B5 77DE                <1> 	ja .expmul
  4325 000033B7 01C2                <1> 	add edx, eax
  4326 000033B9 59                  <1> 	pop ecx
  4327 000033BA 4E                  <1> 	dec esi
  4328 000033BB 41                  <1> 	inc ecx
  4329 000033BC EBA8                <1> 	jmp .txtlp
  4330 000033BE 89D1                <1> .done: mov ecx, edx
  4331 000033C0 C3                  <1> 	ret
  4332                                      %include "source/programs.asm"
  4333 000033C1 FF2C                <1> filetypes db 255,44
  4334                              <1> progstart:		;programs start here
  4335                              <1> indexfiles:
  4336 000033C3 BE[C3330000]        <1> 	mov esi, progstart
  4337 000033C8 BB[E6ED0000]        <1> 	mov ebx, fileindex
  4338 000033CD BF[C3330000]        <1> 	mov edi, progstart
  4339 000033D2 81EF02000000        <1> 	sub edi, 2
  4340                              <1> indexloop:
  4341 000033D8 668B0E              <1> 	mov cx, [esi]
  4342                              <1> 	indexloop2:
  4343 000033DB 663B0F              <1> 		cmp cx, [edi]
  4344 000033DE 7424                <1> 		je indexloop2done
  4345 000033E0 81EF02000000        <1> 		sub edi, 2
  4346 000033E6 81FF[C1330000]      <1> 		cmp edi, filetypes
  4347 000033EC 73ED                <1> 		jae indexloop2
  4348 000033EE BF[C3330000]        <1> 	mov edi, progstart
  4349 000033F3 81EF02000000        <1> 	sub edi, 2
  4350 000033F9 46                  <1> 	inc esi
  4351 000033FA 81FE[30530000]      <1> 	cmp esi, batchprogend
  4352 00003400 734E                <1> 	jae indexloopdone
  4353 00003402 EBD4                <1> 	jmp indexloop
  4354                              <1> indexloop2done:
  4355 00003404 66890B              <1> 	mov [ebx], cx
  4356 00003407 81C302000000        <1> 	add ebx, 2
  4357 0000340D 81C602000000        <1> 	add esi, 2
  4358                              <1> 	nameindex:
  4359 00003413 8A0E                <1> 		mov cl, [esi]
  4360 00003415 80F900              <1> 		cmp cl, 0
  4361 00003418 7406                <1> 		je nameindexdone
  4362 0000341A 880B                <1> 		mov [ebx], cl
  4363 0000341C 46                  <1> 		inc esi
  4364 0000341D 43                  <1> 		inc ebx
  4365 0000341E EBF3                <1> 		jmp nameindex
  4366                              <1> 	nameindexdone:
  4367 00003420 43                  <1> 		inc ebx
  4368 00003421 66C7030000          <1> 		mov word [ebx], 0
  4369 00003426 81C302000000        <1> 		add ebx, 2
  4370 0000342C 46                  <1> 		inc esi
  4371 0000342D 8933                <1> 		mov [ebx], esi
  4372 0000342F 81C304000000        <1> 		add ebx, 4
  4373 00003435 66C7030000          <1> 		mov word [ebx], 0
  4374 0000343A 81C302000000        <1> 		add ebx, 2
  4375 00003440 81FB[E6F10000]      <1> 		cmp ebx, fileindexend
  4376 00003446 7308                <1> 		jae indexloopdone
  4377 00003448 81C601000000        <1> 		add esi, 1
  4378 0000344E EB88                <1> 		jmp indexloop
  4379 00003450 C605[58340000]01    <1> indexloopdone: 	mov byte [indexdone], 1
  4380 00003457 C3                  <1> 		ret
  4381 00003458 00                  <1> indexdone db 0
  4382                              <1> %include 'source/programs/_comment.asm' ;#
  4383 00003459 FF2C2300            <2> 	db 255,44,"#",0	;this lets you rem stuff
  4384 0000345D C3                  <2> 	ret 
  4385                              <1> %include 'source/programs/_math.asm' ;!
  4386 0000345E FF2C2100            <2> db 255,44,"!",0
  4387                              <2> 	num:	
  4388 00003462 E8C5FBFFFF          <2> 		call clearbuffer
  4389 00003467 C605[E8360000]00    <2> 		mov byte [decimal], 0
  4390 0000346E C605[E9360000]00    <2> 		mov byte [decimal2], 0
  4391 00003475 8B35[6D2F0000]      <2> 		mov esi, [currentcommandloc]
  4392 0000347B 31C0                <2> 		xor eax, eax
  4393 0000347D 31C9                <2> 		xor ecx, ecx
  4394 0000347F 31DB                <2> 		xor ebx, ebx
  4395 00003481 8A06                <2> 	num2:	mov al, [esi]
  4396 00003483 3C2B                <2> 		cmp al, '+'
  4397 00003485 741B                <2> 		je operatorfound
  4398 00003487 3C2D                <2> 		cmp al, '-'
  4399 00003489 7417                <2> 		je operatorfound
  4400 0000348B 3C2A                <2> 		cmp al, '*'
  4401 0000348D 7413                <2> 		je operatorfound
  4402 0000348F 3C2F                <2> 		cmp al, '/'
  4403 00003491 740F                <2> 		je operatorfound
  4404 00003493 3C5E                <2> 		cmp al, '^'
  4405 00003495 740B                <2> 		je operatorfound
  4406 00003497 46                  <2> 		inc esi
  4407 00003498 3C00                <2> 		cmp al, 0
  4408 0000349A 0F841AF8FFFF        <2> 		je near nwcmd
  4409 000034A0 EBDF                <2> 		jmp num2
  4410 000034A2 50                  <2> 	operatorfound: push eax
  4411 000034A3 30E4                <2> 		xor ah, ah
  4412 000034A5 8826                <2> 		mov [esi], ah
  4413 000034A7 89F7                <2> 		mov edi, esi
  4414 000034A9 46                  <2> 		inc esi
  4415 000034AA 8A06                <2> 		mov al, [esi]
  4416 000034AC 3C25                <2> 		cmp al, '%'
  4417 000034AE 0F8462000000        <2> 		je near resultnum1
  4418                              <2> 	varnum2: 
  4419 000034B4 57                  <2> 		push edi
  4420 000034B5 E8A4000000          <2> 		call checkdecimal
  4421 000034BA 5F                  <2> 		pop edi
  4422 000034BB E880FEFFFF          <2> 		call cnvrttxt
  4423                              <2> 	vrnm2:
  4424 000034C0 89CB                <2> 		mov ebx, ecx
  4425 000034C2 53                  <2> 		push ebx
  4426 000034C3 E864FBFFFF          <2> 		call clearbuffer
  4427 000034C8 8B35[6D2F0000]      <2> 		mov esi, [currentcommandloc]
  4428 000034CE 89F7                <2> 		mov edi, esi
  4429 000034D0 46                  <2> 		inc esi
  4430 000034D1 8A06                <2> 		mov al, [esi]
  4431 000034D3 3C25                <2> 		cmp al, '%'
  4432 000034D5 0F844F000000        <2> 		je near resultnum2
  4433                              <2> 	varnum4: 
  4434 000034DB 57                  <2> 		push edi
  4435 000034DC E869000000          <2> 		call checkdecimal2
  4436 000034E1 5F                  <2> 		pop edi
  4437 000034E2 E859FEFFFF          <2> 		call cnvrttxt
  4438                              <2> 	vrnm4:
  4439 000034E7 5B                  <2> 		pop ebx
  4440 000034E8 58                  <2> 		pop eax
  4441 000034E9 3C2B                <2> 		cmp al, '+'
  4442 000034EB 0F849B000000        <2> 		je near plusnum
  4443 000034F1 3C2D                <2> 		cmp al, '-'
  4444 000034F3 0F849F000000        <2> 		je near subnum
  4445 000034F9 3C2A                <2> 		cmp al, '*'
  4446 000034FB 0F84A3000000        <2> 		je near mulnum
  4447 00003501 3C2F                <2> 		cmp al, '/'
  4448 00003503 0F84B1000000        <2> 		je near divnum
  4449 00003509 3C5E                <2> 		cmp al, '^'
  4450 0000350B 0F84CE000000        <2> 		je near expnum
  4451 00003511 E9A4F7FFFF          <2> 		jmp nwcmd
  4452                              <2> 	resultnum1:
  4453 00003516 8A0D[EA360000]      <2> 		mov cl, [decimalresult]
  4454 0000351C 880D[E8360000]      <2> 		mov [decimal], cl
  4455 00003522 8B0D[EB360000]      <2> 		mov ecx, [result]
  4456 00003528 EB96                <2> 		jmp vrnm2
  4457                              <2> 	resultnum2:
  4458 0000352A 8A0D[E8360000]      <2> 		mov cl, [decimal]
  4459 00003530 880D[E9360000]      <2> 		mov [decimal2], cl
  4460 00003536 8A0D[EA360000]      <2> 		mov cl, [decimalresult]
  4461 0000353C 880D[E8360000]      <2> 		mov [decimal], cl
  4462 00003542 8B0D[EB360000]      <2> 		mov ecx, [result]
  4463 00003548 EB9D                <2> 		jmp vrnm4
  4464                              <2> 	checkdecimal2:
  4465 0000354A 8A25[E8360000]      <2> 		mov ah, [decimal]
  4466 00003550 8825[E9360000]      <2> 		mov [decimal2], ah
  4467 00003556 30E4                <2> 		xor ah, ah
  4468 00003558 8825[E8360000]      <2> 		mov [decimal], ah
  4469                              <2> 	checkdecimal:
  4470 0000355E 89F7                <2> 		mov edi, esi
  4471                              <2> 	chkdec1:
  4472 00003560 8A07                <2> 		mov al, [edi]
  4473 00003562 3C2E                <2> 		cmp al, '.'
  4474 00003564 0F840B000000        <2> 		je near fnddec
  4475 0000356A 3C00                <2> 		cmp al, 0
  4476 0000356C 0F8419000000        <2> 		je near nodecimal
  4477 00003572 47                  <2> 		inc edi
  4478 00003573 EBEB                <2> 		jmp chkdec1
  4479                              <2> 	fnddec:
  4480 00003575 8A4701              <2> 		mov al, [edi + 1]
  4481 00003578 8807                <2> 		mov [edi], al
  4482 0000357A 3C00                <2> 		cmp al, 0
  4483 0000357C 0F8409000000        <2> 		je near nodecimal
  4484 00003582 FE05[E8360000]      <2> 		inc byte [decimal]
  4485 00003588 47                  <2> 		inc edi
  4486 00003589 EBEA                <2> 		jmp fnddec
  4487                              <2> 	nodecimal:
  4488 0000358B C3                  <2> 		ret
  4489                              <2> 	plusnum:
  4490 0000358C E815010000          <2> 		call decaddfix
  4491 00003591 01D9                <2> 		add ecx, ebx
  4492 00003593 E98A000000          <2> 		jmp retnum
  4493                              <2> 	subnum:
  4494 00003598 E809010000          <2> 		call decaddfix
  4495 0000359D 29D9                <2> 		sub ecx, ebx
  4496 0000359F E97E000000          <2> 		jmp retnum
  4497                              <2> 	mulnum:
  4498 000035A4 A0[E9360000]        <2> 		mov al, [decimal2]
  4499 000035A9 0005[E8360000]      <2> 		add [decimal], al
  4500 000035AF 89C8                <2> 		mov eax, ecx
  4501 000035B1 F7E3                <2> 		mul ebx
  4502 000035B3 89C1                <2> 		mov ecx, eax
  4503 000035B5 E968000000          <2> 		jmp retnum
  4504                              <2> 	divnum:
  4505 000035BA E8E7000000          <2> 		call decaddfix
  4506 000035BF 30C0                <2> 		xor al, al
  4507 000035C1 A2[E8360000]        <2> 		mov [decimal], al
  4508 000035C6 31D2                <2> 		xor edx, edx
  4509 000035C8 89C8                <2> 		mov eax, ecx
  4510 000035CA 81FB00000000        <2> 		cmp ebx, 0
  4511 000035D0 0F844C000000        <2> 		je near retnum
  4512 000035D6 F7F3                <2> 		div ebx
  4513 000035D8 89C1                <2> 		mov ecx, eax
  4514 000035DA E943000000          <2> 		jmp retnum
  4515                              <2> 	expnum:
  4516 000035DF 8A15[E8360000]      <2> 		mov dl, [decimal]
  4517 000035E5 8815[E9360000]      <2> 		mov [decimal2], dl
  4518 000035EB 31D2                <2> 		xor edx, edx
  4519 000035ED 89C8                <2> 		mov eax, ecx
  4520 000035EF 89D9                <2> 		mov ecx, ebx
  4521 000035F1 89C3                <2> 		mov ebx, eax
  4522 000035F3 81F900000000        <2> 		cmp ecx, 0
  4523 000035F9 7422                <2> 		je noexpnum
  4524 000035FB 49                  <2> 		dec ecx
  4525 000035FC 81F900000000        <2> 		cmp ecx, 0
  4526 00003602 7412                <2> 		je noexpnumlp
  4527 00003604 F7E3                <2> 	expnumlp: mul ebx
  4528 00003606 8A15[E9360000]      <2> 		mov dl, [decimal2]
  4529 0000360C 0015[E8360000]      <2> 		add [decimal], dl
  4530 00003612 31D2                <2> 		xor edx, edx
  4531 00003614 E2EE                <2> 		loop expnumlp
  4532                              <2> 	noexpnumlp:
  4533 00003616 89C1                <2> 		mov ecx, eax
  4534 00003618 E905000000          <2> 		jmp retnum
  4535                              <2> 	noexpnum:
  4536 0000361D B901000000          <2> 		mov ecx, 1
  4537                              <2> 	retnum: 
  4538 00003622 BE[7A0C0100]        <2> 		mov esi, numbuf
  4539 00003627 890D[EB360000]      <2> 		mov [result], ecx
  4540 0000362D E80FFAFFFF          <2> 		call convert
  4541 00003632 BE[7A0C0100]        <2> 		mov esi, numbuf
  4542 00003637 8A25[E8360000]      <2> 		mov ah, [decimal]
  4543 0000363D 8825[EA360000]      <2> 		mov [decimalresult], ah
  4544 00003643 80FC00              <2> 		cmp ah, 0
  4545 00003646 0F8425000000        <2> 		je near noputdecimal
  4546                              <2> 	putdecimal:
  4547 0000364C 4E                  <2> 		dec esi
  4548 0000364D FECC                <2> 		dec ah
  4549 0000364F 80FC00              <2> 		cmp ah, 0
  4550 00003652 0F87F4FFFFFF        <2> 		ja near putdecimal
  4551 00003658 4E                  <2> 		dec esi
  4552 00003659 8A06                <2> 		mov al, [esi]
  4553 0000365B C6062E              <2> 		mov byte [esi], '.'
  4554                              <2> 	decputloop:
  4555 0000365E 4E                  <2> 		dec esi
  4556 0000365F 8A26                <2> 		mov ah, [esi]
  4557 00003661 8806                <2> 		mov [esi], al
  4558 00003663 88E0                <2> 		mov al, ah
  4559 00003665 81FE[660C0100]      <2> 		cmp esi, buf2
  4560 0000366B 0F87EDFFFFFF        <2> 		ja near decputloop
  4561                              <2> 	noputdecimal:
  4562 00003671 BE[660C0100]        <2> 		mov esi, buf2
  4563 00003676 E809000000          <2> 		call chkadd
  4564 0000367B E93AF6FFFF          <2> 		jmp nwcmd
  4565 00003680 00000000            <2> edxnumbuf dw 0,0
  4566 00003684 8A06                <2> 	chkadd: mov al, [esi]
  4567 00003686 3C30                <2> 		cmp al, '0'
  4568 00003688 750C                <2> 		jne dnadd
  4569 0000368A 46                  <2> 		inc esi
  4570 0000368B 81FE[7A0C0100]      <2> 		cmp esi, numbuf
  4571 00003691 7402                <2> 		je dnaddm1
  4572 00003693 EBEF                <2> 		jmp chkadd
  4573 00003695 4E                  <2> 	dnaddm1: dec esi
  4574 00003696 E890E6FFFF          <2> 	dnadd:	call print
  4575 0000369B BE[77890000]        <2> 		mov esi, line
  4576 000036A0 E886E6FFFF          <2> 		call print
  4577 000036A5 C3                  <2> 		ret
  4578                              <2> 		
  4579                              <2> 	decaddfix:
  4580 000036A6 A0[E9360000]        <2> 		mov al, [decimal2]
  4581 000036AB 8A25[E8360000]      <2> 		mov ah, [decimal]
  4582 000036B1 38E0                <2> 		cmp al, ah
  4583 000036B3 7432                <2> 		je gooddecadd
  4584 000036B5 38E0                <2> 		cmp al, ah
  4585 000036B7 721A                <2> 		jb lowdecadd
  4586                              <2> 	highdecadd:
  4587 000036B9 FEC4                <2> 		inc ah
  4588 000036BB 89CA                <2> 		mov edx, ecx
  4589 000036BD C1E103              <2> 		shl ecx, 3
  4590 000036C0 01D1                <2> 		add ecx, edx
  4591 000036C2 01D1                <2> 		add ecx, edx
  4592 000036C4 38E0                <2> 		cmp al, ah
  4593 000036C6 77F1                <2> 		ja highdecadd
  4594 000036C8 8825[E8360000]      <2> 		mov [decimal], ah
  4595 000036CE E914000000          <2> 		jmp gooddecadd
  4596                              <2> 	lowdecadd:
  4597 000036D3 FEC0                <2> 		inc al
  4598 000036D5 89DA                <2> 		mov edx, ebx
  4599 000036D7 C1E303              <2> 		shl ebx, 3
  4600 000036DA 01D3                <2> 		add ebx, edx
  4601 000036DC 01D3                <2> 		add ebx, edx
  4602 000036DE 38E0                <2> 		cmp al, ah
  4603 000036E0 72F1                <2> 		jb lowdecadd
  4604 000036E2 A2[E8360000]        <2> 		mov [decimal], al
  4605                              <2> 	gooddecadd:
  4606 000036E7 C3                  <2> 		ret
  4607                              <2> 		
  4608 000036E8 00                  <2> decimal db 0
  4609 000036E9 00                  <2> decimal2 db 0
  4610 000036EA 00                  <2> decimalresult db 0
  4611 000036EB 00000000            <2> result dd 0
  4612                              <1> %include 'source/programs/_variables.asm' ;% and $
  4613 000036EF FF2C2500            <2> db 255,44,"%",0
  4614                              <2> 	ans:
  4615 000036F3 BE[660C0100]        <2> 		mov esi, buf2
  4616 000036F8 E887FFFFFF          <2> 		call chkadd
  4617 000036FD C3                  <2> 		ret
  4618                              <2> 		
  4619 000036FE FF2C2400            <2> db 255,44,"$",0
  4620 00003702 8B35[6D2F0000]      <2> var: mov esi, [currentcommandloc]
  4621 00003708 BB[66F40000]        <2> 	mov ebx, variables
  4622 0000370D 8A06                <2> lkeq:	mov al, [esi]
  4623 0000370F 3C3D                <2> 	cmp al, '='
  4624 00003711 741B                <2> 	je eqfnd	;is there an '=' sign?
  4625 00003713 3C00                <2> 	cmp al, 0
  4626 00003715 7403                <2> 	je echovars
  4627 00003717 46                  <2> 	inc esi
  4628 00003718 EBF3                <2> 	jmp lkeq
  4629 0000371A BE[66F40000]        <2> echovars: mov esi, variables
  4630 0000371F BB[66040100]        <2> 	mov ebx, varend
  4631 00003724 B105                <2> 	mov cl, 5
  4632 00003726 B504                <2> 	mov ch, 4
  4633 00003728 E89EF8FFFF          <2> 	call array
  4634 0000372D C3                  <2> 	ret
  4635 0000372E 46                  <2> eqfnd:	inc esi
  4636 0000372F 8A06                <2> 	mov al, [esi]
  4637 00003731 3C00                <2> 	cmp al, 0
  4638 00003733 7410                <2> 	je readvar
  4639 00003735 8B35[6D2F0000]      <2> 	mov esi, [currentcommandloc]
  4640 0000373B BB[66F40000]        <2> 	mov ebx, variables
  4641 00003740 E919000000          <2> 	jmp seek
  4642                              <2> readvar:
  4643 00003745 B00A                <2> 	mov al, 10
  4644 00003747 66BB0700            <2> 	mov bx, 7
  4645 0000374B C605[09230000]00    <2> 	mov byte [commandedit], 0
  4646 00003752 BF[660C0100]        <2> 	mov edi, buftxtend
  4647 00003757 E8FCE6FFFF          <2> 	call rdprint
  4648 0000375C EBA4                <2> 	jmp var
  4649 0000375E 668B03              <2> seek:	mov ax, [ebx]
  4650 00003761 B105                <2> 	mov cl, 5
  4651 00003763 B504                <2> 	mov ch, 4
  4652 00003765 663D0000            <2> 	cmp ax, 0
  4653 00003769 0F845B000000        <2> 	je near save
  4654 0000376F 6639C8              <2> 	cmp ax, cx
  4655 00003772 7403                <2> 	je skfnd
  4656 00003774 43                  <2> 	inc ebx
  4657 00003775 EBE7                <2> 	jmp seek
  4658 00003777 8B35[6D2F0000]      <2> skfnd:	mov esi, [currentcommandloc]
  4659 0000377D 46                  <2> 	inc esi
  4660 0000377E 81C302000000        <2> 	add ebx, 2
  4661 00003784 89DF                <2> 	mov edi, ebx
  4662 00003786 B13D                <2> 	mov cl, '='
  4663 00003788 E81FF8FFFF          <2> 	call cndtest
  4664 0000378D 3C01                <2> 	cmp al, 1	
  4665 0000378F 7418                <2> 	je varfnd
  4666 00003791 89FB                <2> 	mov ebx, edi
  4667 00003793 8B35[6D2F0000]      <2> 	mov esi, [currentcommandloc]
  4668 00003799 668B03              <2> 	mov ax, [ebx]
  4669 0000379C 663D0000            <2> 	cmp ax, 0
  4670 000037A0 0F8424000000        <2> 	je near save
  4671 000037A6 43                  <2> 	inc ebx
  4672 000037A7 EBB5                <2> 	jmp seek
  4673 000037A9 8A03                <2> varfnd:	mov al, [ebx]
  4674 000037AB 3C04                <2> 	cmp al, 4
  4675 000037AD 7404                <2> 	je save2
  4676 000037AF 4B                  <2> 	dec ebx
  4677 000037B0 4E                  <2> 	dec esi
  4678 000037B1 EBF6                <2> 	jmp varfnd
  4679 000037B3 4B                  <2> save2:	dec ebx
  4680 000037B4 4E                  <2> 	dec esi
  4681 000037B5 8A03                <2> 	mov al, [ebx]
  4682 000037B7 3C05                <2> 	cmp al, 5
  4683 000037B9 7402                <2> 	je remove
  4684 000037BB EBEC                <2> 	jmp varfnd
  4685 000037BD 8A03                <2> remove: mov al, [ebx]
  4686 000037BF 3C00                <2> 	cmp al, 0
  4687 000037C1 749B                <2> 	je seek
  4688 000037C3 30C0                <2> 	xor al, al
  4689 000037C5 8803                <2> 	mov [ebx], al
  4690 000037C7 43                  <2> 	inc ebx
  4691 000037C8 EBF3                <2> 	jmp remove	;do not need for now-need defragmentation
  4692 000037CA 8B35[6D2F0000]      <2> save:	mov esi, [currentcommandloc]
  4693 000037D0 43                  <2> 	inc ebx
  4694 000037D1 B005                <2> 	mov al, 5
  4695 000037D3 B404                <2> 	mov ah, 4
  4696 000037D5 668903              <2> 	mov [ebx], ax
  4697 000037D8 43                  <2> 	inc ebx
  4698 000037D9 43                  <2> svhere:	inc ebx
  4699 000037DA 46                  <2> 	inc esi
  4700 000037DB 8A06                <2> 	mov al, [esi]
  4701 000037DD 3C00                <2> 	cmp al, 0
  4702 000037DF 0F844A000000        <2> 	je near svdone
  4703 000037E5 3C25                <2> 	cmp al, '%'
  4704 000037E7 7404                <2> 	je ans2
  4705 000037E9 8803                <2> 	mov [ebx], al	
  4706 000037EB EBEC                <2> 	jmp svhere
  4707 000037ED 56                  <2> ans2:	push esi
  4708 000037EE BE[660C0100]        <2> 	mov esi, buf2
  4709 000037F3 E823000000          <2> 	call ansfnd
  4710 000037F8 E803000000          <2> 	call anscp
  4711 000037FD 5E                  <2> 	pop esi
  4712 000037FE EBD9                <2> 	jmp svhere
  4713 00003800 8A06                <2> anscp:	mov al, [esi]
  4714 00003802 8803                <2> 	mov [ebx], al
  4715 00003804 81FE[7A0C0100]      <2> 	cmp esi, numbuf
  4716 0000380A 74CD                <2> 	je svhere
  4717 0000380C 3C00                <2> 	cmp al, 0
  4718 0000380E 74C9                <2> 	je svhere
  4719 00003810 43                  <2> 	inc ebx
  4720 00003811 46                  <2> 	inc esi
  4721 00003812 EBEC                <2> 	jmp anscp
  4722 00003814 5E                  <2> ansnf:	pop esi
  4723 00003815 8A06                <2> 	mov al, [esi]
  4724 00003817 8803                <2> 	mov [ebx], al
  4725 00003819 EBBE                <2> 	jmp svhere
  4726 0000381B 46                  <2> ansfnd:	inc esi
  4727 0000381C 81FE[790C0100]      <2> 	cmp esi, numbuf - 1
  4728 00003822 740A                <2> 	je fndans
  4729 00003824 8A06                <2> 	mov al, [esi]
  4730 00003826 3C00                <2> 	cmp al, 0
  4731 00003828 74EA                <2> 	je ansnf
  4732 0000382A 3C30                <2> 	cmp al, '0'
  4733 0000382C 74ED                <2> 	je ansfnd
  4734                              <2> fndans:
  4735 0000382E C3                  <2> 	ret
  4736 0000382F 30C0                <2> svdone:	xor al, al
  4737 00003831 8803                <2> 	mov [ebx], al
  4738 00003833 C3                  <2> 	ret
  4739                              <1> %include 'source/programs/_run.asm' ;./
  4740                              <2> 
  4741 00003834 7F454C46            <2> 	elfstart db 0x7F,"ELF"
  4742 00003838 FF2C2E2F00          <2> 	db 255,44,"./",0
  4743                              <2> rundiskprog:
  4744 0000383D 8B3D[6D2F0000]      <2> 	mov edi, [currentcommandloc]
  4745 00003843 81C702000000        <2> 	add edi, 2
  4746 00003849 BE00004000          <2> 	mov esi, 0x400000
  4747 0000384E E81C2D0000          <2> 	call loadfile
  4748 00003853 81FA94010000        <2> 	cmp edx, 404
  4749 00003859 746A                <2> 	je noprogfound
  4750 0000385B BB00004000          <2> 	mov ebx, 0x400000
  4751 00003860 A1[34380000]        <2> 	mov eax, [elfstart]
  4752 00003865 3903                <2> 	cmp [ebx], eax
  4753 00003867 0F8437000000        <2> 	je near runelf
  4754 0000386D 66813B4558          <2> 	cmp word [ebx], "EX"
  4755 00003872 7577                <2> 	jne progbatchfound
  4756 00003874 81C302000000        <2> 	add ebx, 2
  4757 0000387A 8B3D[6D2F0000]      <2> 	mov edi, [currentcommandloc]
  4758 00003880 81C702000000        <2> 	add edi, 2
  4759                              <2> findspaceprog:
  4760 00003886 8A07                <2> 	mov al, [edi]
  4761 00003888 47                  <2> 	inc edi
  4762 00003889 3C20                <2> 	cmp al, " "
  4763 0000388B 75F9                <2> 	jne findspaceprog
  4764                              <2> findnonspaceprog:
  4765 0000388D 8A07                <2> 	mov al, [edi]
  4766 0000388F 47                  <2> 	inc edi
  4767 00003890 3C20                <2> 	cmp al, " "
  4768 00003892 74F9                <2> 	je findnonspaceprog
  4769 00003894 4F                  <2> 	dec edi
  4770 00003895 8925[E6F10000]      <2> 	mov [previousstack], esp
  4771 0000389B FFD3                <2> 	call ebx
  4772 0000389D 8B25[E6F10000]      <2> 	mov esp, [previousstack]
  4773 000038A3 C3                  <2> 	ret
  4774                              <2> runelf:
  4775 000038A4 8B3D[6D2F0000]      <2> 	mov edi, [currentcommandloc]
  4776 000038AA 81C702000000        <2> 	add edi, 2
  4777 000038B0 81C380000000        <2> 	add ebx, 0x80
  4778 000038B6 8925[E6F10000]      <2> 	mov [previousstack], esp
  4779 000038BC FFD3                <2> 	call ebx
  4780 000038BE 8B25[E6F10000]      <2> 	mov esp, [previousstack]
  4781 000038C4 C3                  <2> 	ret
  4782                              <2> noprogfound:
  4783 000038C5 BE[3E890000]        <2> 	mov esi, notfound1
  4784 000038CA E85CE4FFFF          <2> 	call print
  4785 000038CF 8B35[6D2F0000]      <2> 	mov esi, [currentcommandloc]
  4786 000038D5 81C602000000        <2> 	add esi, 2
  4787 000038DB E84BE4FFFF          <2> 	call print
  4788 000038E0 BE[46890000]        <2> 	mov esi, notfound2
  4789 000038E5 E841E4FFFF          <2> 	call print
  4790 000038EA C3                  <2> 	ret
  4791                              <2> progbatchfound:
  4792 000038EB BF00004000          <2> 		mov edi, 0x400000
  4793 000038F0 C605[60F40000]01    <2> 		mov byte [BATCHISON], 1
  4794                              <2> 	batchrunloop:
  4795 000038F7 E89BF3FFFF          <2> 		call buftxtclear
  4796 000038FC BE[66080100]        <2> 		mov esi, buftxt
  4797 00003901 8935[6D2F0000]      <2> 		mov [currentcommandloc], esi
  4798                              <2> 	batchrunloop2:
  4799 00003907 B10A                <2> 		mov cl, 10
  4800 00003909 B50D                <2> 		mov ch, 13
  4801 0000390B 380F                <2> 		cmp [edi], cl
  4802 0000390D 0F8419000000        <2> 		je near nxtbatchrunline
  4803 00003913 382F                <2> 		cmp [edi], ch
  4804 00003915 0F8411000000        <2> 		je near nxtbatchrunline
  4805 0000391B 803F00              <2> 		cmp byte [edi], 0
  4806 0000391E 0F8408000000        <2> 		je near nxtbatchrunline
  4807 00003924 8A07                <2> 		mov al, [edi]
  4808 00003926 8806                <2> 		mov [esi], al
  4809 00003928 46                  <2> 		inc esi
  4810 00003929 47                  <2> 		inc edi
  4811 0000392A EBDB                <2> 		jmp batchrunloop2
  4812                              <2> 	nxtbatchrunline:
  4813 0000392C 47                  <2> 		inc edi
  4814 0000392D 380F                <2> 		cmp [edi], cl
  4815 0000392F 74FB                <2> 		je nxtbatchrunline
  4816 00003931 382F                <2> 		cmp [edi], ch
  4817 00003933 74F7                <2> 		je nxtbatchrunline
  4818 00003935 893D[93390000]      <2> 		mov [batchedi], edi
  4819 0000393B 893D[5CF40000]      <2> 		mov [BATCHPOS], edi
  4820 00003941 C60600              <2> 		mov byte [esi], 0
  4821 00003944 BE[66080100]        <2> 		mov esi, buftxt
  4822 00003949 803E00              <2> 		cmp byte [esi], 0
  4823 0000394C 0F8439000000        <2> 		je near nobatchfoundrun
  4824 00003952 31DB                <2> 		xor ebx, ebx
  4825 00003954 8A1D[F7F30000]      <2> 		mov bl, [IFON]
  4826 0000395A 80FB00              <2> 		cmp bl, 0
  4827 0000395D 0F8534000000        <2> 		jne near iftestbatch
  4828                              <2> 	doneiftest:
  4829 00003963 803D[693A0000]00    <2> 		cmp byte [runnextline], 0
  4830 0000396A 0F8405000000        <2> 		je near noruniftest
  4831 00003970 E822F5FFFF          <2> 		call run
  4832                              <2> 	noruniftest:
  4833 00003975 C605[693A0000]01    <2> 		mov byte [runnextline], 1
  4834 0000397C 8B3D[93390000]      <2> 		mov edi, [batchedi]
  4835 00003982 803F00              <2> 		cmp byte [edi], 0
  4836 00003985 0F856CFFFFFF        <2> 		jne near batchrunloop
  4837                              <2> 	nobatchfoundrun:
  4838 0000398B C605[60F40000]00    <2> 		mov byte [BATCHISON], 0
  4839 00003992 C3                  <2> 		ret
  4840                              <2> 	
  4841 00003993 00000000            <2> batchedi dd 0	
  4842                              <2> 	
  4843                              <2> 	iftestbatch:
  4844 00003997 BE[F8F30000]        <2> 		mov esi, IFTRUE
  4845 0000399C 01DE                <2> 		add esi, ebx
  4846 0000399E 803E00              <2> 		cmp byte [esi], 0
  4847 000039A1 0F85BCFFFFFF        <2> 		jne near doneiftest
  4848 000039A7 881D[6A3A0000]      <2> 		mov [iffalsebuf], bl
  4849 000039AD 803D[61F40000]01    <2> 		cmp byte [LOOPON], 1
  4850 000039B4 0F8513000000        <2> 		jne near fifindbatch
  4851 000039BA E938FFFFFF          <2> 		jmp batchrunloop
  4852                              <2> 	elsetestbatch:
  4853 000039BF C60601              <2> 		mov byte [esi], 1
  4854 000039C2 81C705000000        <2> 		add edi, 5
  4855 000039C8 E92AFFFFFF          <2> 		jmp batchrunloop
  4856                              <2> 	fifindbatch:
  4857 000039CD 66B96966            <2> 		mov cx, "if"
  4858 000039D1 66B86669            <2> 		mov ax, "fi"
  4859 000039D5 663907              <2> 		cmp [edi], ax
  4860 000039D8 0F8424000000        <2> 		je near fifoundbatch
  4861 000039DE 66390F              <2> 		cmp [edi], cx
  4862 000039E1 0F8465000000        <2> 		je near iffoundbatch
  4863 000039E7 803F00              <2> 		cmp byte [edi], 0
  4864 000039EA 0F8412000000        <2> 		je near fifoundbatch
  4865 000039F0 B8656C7365          <2> 		mov eax, "else"
  4866 000039F5 3907                <2> 		cmp [edi], eax
  4867 000039F7 0F84C2FFFFFF        <2> 		je near elsetestbatch
  4868 000039FD E973FFFFFF          <2> 		jmp noruniftest
  4869                              <2> 	fifoundbatch:
  4870 00003A02 81C702000000        <2> 		add edi, 2
  4871 00003A08 B00A                <2> 		mov al, 10
  4872 00003A0A 3807                <2> 		cmp [edi], al
  4873 00003A0C 0F840B000000        <2> 		je near goodfibatch
  4874 00003A12 803F00              <2> 		cmp byte [edi], 0
  4875 00003A15 0F8470FFFFFF        <2> 		je near nobatchfoundrun
  4876 00003A1B EBB0                <2> 		jmp fifindbatch
  4877                              <2> 	goodfibatch:
  4878 00003A1D B001                <2> 		mov al, 1
  4879 00003A1F 2805[F7F30000]      <2> 		sub [IFON], al 
  4880 00003A25 A0[F7F30000]        <2> 		mov al, [IFON]
  4881 00003A2A 8A1D[6A3A0000]      <2> 		mov bl, [iffalsebuf]
  4882 00003A30 38D8                <2> 		cmp al, bl
  4883 00003A32 7799                <2> 		ja fifindbatch
  4884 00003A34 8B35[6D2F0000]      <2> 		mov esi, [currentcommandloc]
  4885 00003A3A 81EF02000000        <2> 		sub edi, 2
  4886 00003A40 C605[693A0000]00    <2> 		mov byte [runnextline], 0
  4887 00003A47 E9ABFEFFFF          <2> 		jmp batchrunloop
  4888                              <2> 	iffoundbatch:
  4889 00003A4C B020                <2> 		mov al, ' '
  4890 00003A4E 81C702000000        <2> 		add edi, 2
  4891 00003A54 3807                <2> 		cmp [edi], al
  4892 00003A56 0F8571FFFFFF        <2> 		jne near fifindbatch
  4893 00003A5C B001                <2> 		mov al, 1
  4894 00003A5E 0005[F7F30000]      <2> 		add [IFON], al
  4895 00003A64 E964FFFFFF          <2> 		jmp fifindbatch
  4896                              <2> 		
  4897                              <2> 		
  4898 00003A69 01                  <2> runnextline db 1
  4899 00003A6A 00                  <2> iffalsebuf db 0
  4900 00003A6B C3                  <2> notbatch: ret 
  4901                              <1> %ifdef network.included
  4902                              <1> 	%include 'source/programs/arp.asm'
  4903 00003A6C FF2C61727000        <2> db 255,44,"arp",0
  4904                              <2> 	;ARP TESTING
  4905                              <2> arptest:
  4906 00003A72 8B35[6D2F0000]      <2> 	mov esi, [currentcommandloc]
  4907 00003A78 81C604000000        <2> 	add esi, 4
  4908 00003A7E E8C04D0000          <2> 	call strtoip
  4909 00003A83 890D[2A3B0000]      <2> 	mov [arptargetinfo + 6], ecx ;move to next ip
  4910 00003A89 E8FB4D0000          <2> 	call showip
  4911 00003A8E 803D[2E3B0000]01    <2> 	cmp byte [arpconfig], 1
  4912 00003A95 7405                <2> 	je arptest2
  4913 00003A97 E841000000          <2> 	call arpinit
  4914                              <2> arptest2:	;try to reach 192.168.0.1
  4915 00003A9C 8B0D[30890000]      <2> 	mov ecx, [sysmac]
  4916 00003AA2 668B1D[34890000]    <2> 	mov bx, [sysmac + 4]
  4917 00003AA9 890D[0A3B0000]      <2> 	mov [sourcemac], ecx
  4918 00003AAF 66891D[0E3B0000]    <2> 	mov [sourcemac + 4],bx
  4919 00003AB6 890D[1A3B0000]      <2> 	mov [arpsenderinfo], ecx
  4920 00003ABC 66891D[1E3B0000]    <2> 	mov [arpsenderinfo + 4], bx
  4921 00003AC3 BF[043B0000]        <2> 	mov edi, frame
  4922 00003AC8 BE[2E3B0000]        <2> 	mov esi, framend
  4923 00003ACD E83F4D0000          <2> 	call sendpacket
  4924 00003AD2 BE[77890000]        <2> 	mov esi, line
  4925 00003AD7 E84FE2FFFF          <2> 	call print
  4926 00003ADC C3                  <2> 	ret
  4927                              <2> 	
  4928                              <2> arpinit:
  4929 00003ADD BE[2F3B0000]        <2> 	mov esi, arptable
  4930 00003AE2 BF[30890000]        <2> 	mov edi, sysmac
  4931 00003AE7 BB[2C890000]        <2> 	mov ebx, sysip
  4932 00003AEC 8B0F                <2> 	mov ecx, [edi]
  4933 00003AEE 890E                <2> 	mov [esi], ecx
  4934 00003AF0 668B4F04            <2> 	mov cx, [edi + 4]
  4935 00003AF4 894E04              <2> 	mov [esi + 4], ecx
  4936 00003AF7 8B0B                <2> 	mov ecx, [ebx]
  4937 00003AF9 894E06              <2> 	mov [esi + 6], ecx
  4938 00003AFC C605[2E3B0000]01    <2> 	mov byte [arpconfig], 1
  4939 00003B03 C3                  <2> 	ret
  4940                              <2> 	
  4941                              <2> ;example frame
  4942                              <2> frame:
  4943 00003B04 FFFFFFFFFFFF        <2> destinationmac:	db 0xFF,0xFF,0xFF,0xFF,0xFF,0xFF
  4944 00003B0A 000000000000        <2> sourcemac:		db 0,0,0,0,0,0
  4945 00003B10 0806                <2> ethertype:		db 8,6			;arp is 0x806
  4946                              <2> 	;;example packet
  4947 00003B12 0100                <2> 	arppacket: 		dw 1			;ethernet is 1
  4948 00003B14 0800                <2> 	arpprotocol: 	db 8,0			;ip is 0x800
  4949 00003B16 0604                <2> 					db 6,4			;length of mac, length of ip
  4950 00003B18 0001                <2> 	arpoperation: 	db 0,1			;one for arp request
  4951 00003B1A 000000000000        <2> 	arpsenderinfo:	db 0x00,0x00,0x00,0x00,0x00,0x00	;mac
  4952 00003B20 C0A80073            <2> 					db 192,168,0,115		;ip
  4953 00003B24 000000000000        <2> 	arptargetinfo:	db 0x00,0x00,0x00,0x00,0x00,0x00	;ignored in requests
  4954 00003B2A C0A80000            <2> 					db 192,168,0,0			;ip
  4955                              <2> framend:
  4956                              <2> 
  4957 00003B2E 00                  <2> arpconfig db 0
  4958                              <2> arptable:	;;mac,ip
  4959 00003B2F 000000000000000000- <2> 	times 10 db 0,0,0,0,0,0,0,0,0,0
  4960 00003B38 00<rept>            <2>
  4961                              <2> arptableend:	
  4962                              <1> %endif
  4963                              <1> %include 'source/programs/batch.asm'
  4964 00003B93 FF2C626174636800    <2> db 255,44,"batch",0
  4965                              <2> 	batchst: 
  4966 00003B9B 8B3D[6D2F0000]      <2> 		mov edi, [currentcommandloc]
  4967 00003BA1 81C706000000        <2> 		add edi, 6
  4968 00003BA7 803F00              <2> 		cmp byte [edi], 0
  4969 00003BAA 0F846D000000        <2> 		je near nonamefound
  4970 00003BB0 BE00004000          <2> 		mov esi, 0x400000
  4971 00003BB5 E8B5290000          <2> 		call loadfile
  4972 00003BBA 89D0                <2> 		mov eax, edx
  4973 00003BBC 3D94010000          <2> 		cmp eax, 404
  4974 00003BC1 7465                <2> 		je goodbatchname
  4975 00003BC3 BE[CE3B0000]        <2> 		mov esi, badbatchname
  4976 00003BC8 E85EE1FFFF          <2> 		call print
  4977 00003BCD C3                  <2> 		ret
  4978 00003BCE 546869732066696C65- <2> 		badbatchname db "This file already exists!",10,0
  4979 00003BD7 20616C726561647920- <2>
  4980 00003BE0 657869737473210A00  <2>
  4981 00003BE9 596F75206861766520- <2> 		namenotfoundbatch db "You have to type a name after the command.",10,0
  4982 00003BF2 746F20747970652061- <2>
  4983 00003BFB 206E616D6520616674- <2>
  4984 00003C04 65722074686520636F- <2>
  4985 00003C0D 6D6D616E642E0A00    <2>
  4986 00003C15 00000000            <2> 		esicache3 dd 0
  4987 00003C19 00000000            <2> 		esicache2 dd 0
  4988                              <2> 	nonamefound:
  4989 00003C1D BE[E93B0000]        <2> 		mov esi, namenotfoundbatch
  4990 00003C22 E804E1FFFF          <2> 		call print
  4991 00003C27 C3                  <2> 		ret
  4992                              <2> 	goodbatchname:
  4993 00003C28 BE00004000          <2> 		mov esi, 0x400000
  4994                              <2> 	batchcreate:
  4995 00003C2D 8935[153C0000]      <2> 		mov [esicache3], esi
  4996 00003C33 BF00008000          <2> 		mov edi, 0x800000
  4997 00003C38 B00A                <2> 		mov al, 10
  4998 00003C3A B307                <2> 		mov bl, 7
  4999 00003C3C B404                <2> 		mov ah, 4
  5000 00003C3E CD30                <2> 		int 30h
  5001 00003C40 8935[193C0000]      <2> 		mov [esicache2], esi
  5002 00003C46 8A0E                <2> 		mov cl, [esi]
  5003 00003C48 8B35[153C0000]      <2> 		mov esi, [esicache3]
  5004 00003C4E BB[823C0000]        <2> 		mov ebx, exitword
  5005 00003C53 E854F3FFFF          <2> 		call cndtest
  5006 00003C58 3C01                <2> 		cmp al, 1
  5007 00003C5A 7411                <2> 		je endbatchcreate
  5008 00003C5C 3C02                <2> 		cmp al, 2
  5009 00003C5E 740D                <2> 		je endbatchcreate
  5010 00003C60 8B35[193C0000]      <2> 		mov esi, [esicache2]
  5011 00003C66 B00A                <2> 		mov al, 10
  5012 00003C68 8806                <2> 		mov [esi], al
  5013 00003C6A 46                  <2> 		inc esi
  5014 00003C6B EBC0                <2> 		jmp batchcreate
  5015                              <2> 	endbatchcreate:
  5016 00003C6D 8B35[153C0000]      <2> 		mov esi, [esicache3]
  5017 00003C73 31C0                <2> 		xor eax, eax
  5018 00003C75 8806                <2> 		mov [esi], al
  5019 00003C77 BE00004000          <2> 		mov esi, 0x400000
  5020 00003C7C E8AAE0FFFF          <2> 		call print
  5021 00003C81 C3                  <2> 		ret
  5022                              <2> 	
  5023 00003C82 5C7800              <2> 	exitword db "\x",0
  5024 00003C85 54797065205C782074- <2> 	wordmsg db "Type \x to exit.",10,0
  5025 00003C8E 6F20657869742E0A00  <2>
  5026                              <1> %ifdef gui.background
  5027                              <1> 	%include 'source/programs/background.asm'
  5028                              <1> %endif
  5029                              <1> %include 'source/programs/beep.asm'
  5030 00003C97 FF2C6265657000      <2> 	db 255,44,"beep",0
  5031                              <2> beep:
  5032 00003C9E B8[C33C0000]        <2> 	mov eax, beepstart
  5033 00003CA3 A3[6B020000]        <2> 	mov [soundpos], eax
  5034 00003CA8 B8[C73C0000]        <2> 	mov eax, beepend
  5035 00003CAD A3[6F020000]        <2> 	mov [soundendpos], eax
  5036 00003CB2 C605[68020000]01    <2> 	mov byte [soundon], 1
  5037                              <2> waitforsoundendbeep:
  5038 00003CB9 A0[68020000]        <2> 	mov al, [soundon]
  5039 00003CBE 3C00                <2> 	cmp al, 0
  5040 00003CC0 75F7                <2> 	jne waitforsoundendbeep
  5041 00003CC2 C3                  <2> 	ret
  5042                              <2> 	
  5043                              <2> beepstart:
  5044 00003CC3 3200D111            <2> 	dw 50, 4561
  5045                              <2> beepend:
  5046                              <1> %include 'source/programs/cd.asm'
  5047 00003CC7 FF2C636400          <2> db 255,44,"cd",0
  5048                              <2> cd:
  5049 00003CCC 8B35[6D2F0000]      <2> 	mov esi, [currentcommandloc]
  5050 00003CD2 81C603000000        <2> 	add esi, 3
  5051 00003CD8 8B3D[EEF10000]      <2> 	mov edi, [currentfolderloc]
  5052 00003CDE 893D[EAF10000]      <2> 	mov [lastfolderloc], edi
  5053 00003CE4 81C7[F2F10000]      <2> 	add edi, currentfolder
  5054 00003CEA 4F                  <2> 	dec edi
  5055 00003CEB 66813E2E2E          <2> 	cmp word [esi], ".."
  5056 00003CF0 742A                <2> 	je .moveup
  5057 00003CF2 47                  <2> 	inc edi
  5058                              <2> .movedown:
  5059 00003CF3 8A06                <2> 	mov al, [esi]
  5060 00003CF5 8807                <2> 	mov [edi], al
  5061 00003CF7 47                  <2> 	inc edi
  5062 00003CF8 46                  <2> 	inc esi
  5063 00003CF9 3C00                <2> 	cmp al, 0
  5064 00003CFB 740A                <2> 	je .donecd
  5065 00003CFD 81FF[F2F30000]      <2> 	cmp edi, currentfolderend
  5066 00003D03 72EE                <2> 	jb .movedown
  5067 00003D05 30C0                <2> 	xor al, al
  5068                              <2> .donecd:
  5069 00003D07 4F                  <2> 	dec edi
  5070 00003D08 C6072F              <2> 	mov byte [edi], '/'
  5071 00003D0B 47                  <2> 	inc edi
  5072 00003D0C C60700              <2> 	mov byte [edi], 0
  5073 00003D0F 81EF[F2F10000]      <2> 	sub edi, currentfolder
  5074 00003D15 893D[EEF10000]      <2> 	mov [currentfolderloc], edi
  5075 00003D1B C3                  <2> 	ret
  5076                              <2> .moveup:
  5077 00003D1C 31C0                <2> 	xor eax, eax
  5078 00003D1E A3[EAF10000]        <2> 	mov [lastfolderloc], eax
  5079                              <2> .moveuploop:
  5080 00003D23 4F                  <2> 	dec edi
  5081 00003D24 8A07                <2> 	mov al, [edi]
  5082 00003D26 81FF[F2F10000]      <2> 	cmp edi, currentfolder
  5083 00003D2C 763B                <2> 	jbe .moveupover
  5084 00003D2E 3C2F                <2> 	cmp al, '/'
  5085 00003D30 75F1                <2> 	jne .moveuploop
  5086 00003D32 C6072F              <2> 	mov byte [edi], '/'
  5087 00003D35 47                  <2> 	inc edi
  5088 00003D36 C60700              <2> 	mov byte [edi], 0
  5089 00003D39 81EF[F2F10000]      <2> 	sub edi, currentfolder
  5090 00003D3F 893D[EEF10000]      <2> 	mov [currentfolderloc], edi
  5091 00003D45 81C7[F2F10000]      <2> 	add edi, currentfolder
  5092 00003D4B 4F                  <2> 	dec edi
  5093                              <2> .lastfolder:
  5094 00003D4C 4F                  <2> 	dec edi
  5095 00003D4D 8A07                <2> 	mov al, [edi]
  5096 00003D4F 81FF[F2F10000]      <2> 	cmp edi, currentfolder
  5097 00003D55 7604                <2> 	jbe .donemoveup
  5098 00003D57 3C2F                <2> 	cmp al, '/'
  5099 00003D59 75F1                <2> 	jne .lastfolder
  5100                              <2> .donemoveup:
  5101 00003D5B 47                  <2> 	inc edi
  5102 00003D5C 81EF[F2F10000]      <2> 	sub edi, currentfolder
  5103 00003D62 893D[EAF10000]      <2> 	mov [lastfolderloc], edi
  5104 00003D68 C3                  <2> 	ret
  5105                              <2> .moveupover:
  5106 00003D69 BF[F2F10000]        <2> 	mov edi, currentfolder
  5107 00003D6E C6072F              <2> 	mov byte [edi], '/'
  5108 00003D71 47                  <2> 	inc edi
  5109 00003D72 C60700              <2> 	mov byte [edi], 0
  5110 00003D75 31C0                <2> 	xor eax, eax
  5111 00003D77 A3[EAF10000]        <2> 	mov [lastfolderloc], eax
  5112 00003D7C 40                  <2> 	inc eax
  5113 00003D7D A3[EEF10000]        <2> 	mov [currentfolderloc], eax
  5114 00003D82 C3                  <2> 	ret
  5115                              <1> %include 'source/programs/charmap.asm'
  5116 00003D83 00                  <2> charmapnum db 0
  5117 00003D84 FF2C636861726D6170- <2> db 255,44,"charmap",0
  5118 00003D8D 00                  <2>
  5119 00003D8E 66BB0700            <2> 	mov bx, 7
  5120 00003D92 66B82000            <2> 	mov ax, " "
  5121 00003D96 C605[833D0000]00    <2> 	mov byte [charmapnum], 0
  5122 00003D9D E80BE6FFFF          <2> 	call prcharq
  5123 00003DA2 E806E6FFFF          <2> 	call prcharq
  5124 00003DA7 E801E6FFFF          <2> 	call prcharq
  5125 00003DAC E8FCE5FFFF          <2> 	call prcharq
  5126 00003DB1 66B83000            <2> 	mov ax, "0"
  5127                              <2> charmapnumprnt:
  5128 00003DB5 E8F3E5FFFF          <2> 	call prcharq
  5129 00003DBA 6640                <2> 	inc ax
  5130 00003DBC 6650                <2> 	push ax
  5131 00003DBE 66B82000            <2> 	mov ax, " "
  5132 00003DC2 E8E6E5FFFF          <2> 	call prcharq
  5133 00003DC7 6658                <2> 	pop ax
  5134 00003DC9 663D3900            <2> 	cmp ax, "9"
  5135 00003DCD 76E6                <2> 	jbe charmapnumprnt
  5136 00003DCF 66B84100            <2> 	mov ax, "A"
  5137                              <2> charmapnumprnt2:
  5138 00003DD3 E8D5E5FFFF          <2> 	call prcharq
  5139 00003DD8 6640                <2> 	inc ax
  5140 00003DDA 6650                <2> 	push ax
  5141 00003DDC 66B82000            <2> 	mov ax, " "
  5142 00003DE0 E8C8E5FFFF          <2> 	call prcharq
  5143 00003DE5 6658                <2> 	pop ax
  5144 00003DE7 663D4700            <2> 	cmp ax, "G"
  5145 00003DEB 72E6                <2> 	jb charmapnumprnt2
  5146                              <2> 	
  5147 00003DED BE[77890000]        <2> 	mov esi, line
  5148 00003DF2 E815DFFFFF          <2> 	call printquiet
  5149 00003DF7 6631C0              <2> 	xor ax, ax
  5150 00003DFA 6689C1              <2> 	mov cx, ax
  5151 00003DFD E87EF3FFFF          <2> 	call showhexsmall
  5152 00003E02 E970000000          <2> 	jmp charmapnocopy ;the first char is 0 which is unprintable
  5153                              <2> charmapcopy:
  5154 00003E07 6640                <2> 	inc ax
  5155 00003E09 6650                <2> 	push ax
  5156 00003E0B 663D0800            <2> 	cmp ax, 8
  5157 00003E0F 7466                <2> 	je charmapnocopy
  5158 00003E11 663D0900            <2> 	cmp ax, 9
  5159 00003E15 7460                <2> 	je charmapnocopy
  5160 00003E17 663D0A00            <2> 	cmp ax, 10
  5161 00003E1B 745A                <2> 	je charmapnocopy
  5162 00003E1D 663D0D00            <2> 	cmp ax, 13
  5163 00003E21 7454                <2> 	je charmapnocopy
  5164 00003E23 663DFF00            <2> 	cmp ax, 255
  5165 00003E27 744E                <2> 	je charmapnocopy
  5166 00003E29 663D0001            <2> 	cmp ax, 256
  5167 00003E2D 7443                <2> 	je nomorecharmap
  5168 00003E2F E879E5FFFF          <2> 	call prcharq
  5169 00003E34 66B82000            <2> 	mov ax, " "
  5170 00003E38 E870E5FFFF          <2> 	call prcharq
  5171 00003E3D 6658                <2> 	pop ax
  5172                              <2> charmapcopycheck:
  5173 00003E3F FE05[833D0000]      <2> 	inc byte [charmapnum]
  5174 00003E45 803D[833D0000]10    <2> 	cmp byte [charmapnum], 16
  5175 00003E4C 72B9                <2> 	jb charmapcopy
  5176 00003E4E 6650                <2> 	push ax
  5177 00003E50 BE[77890000]        <2> 	mov esi, line
  5178 00003E55 E8B2DEFFFF          <2> 	call printquiet
  5179 00003E5A 6658                <2> 	pop ax
  5180 00003E5C 3CFF                <2> 	cmp al, 255
  5181 00003E5E 7412                <2> 	je nomorecharmap
  5182 00003E60 88C1                <2> 	mov cl, al
  5183 00003E62 FEC1                <2> 	inc cl
  5184 00003E64 E817F3FFFF          <2> 	call showhexsmall
  5185 00003E69 C605[833D0000]00    <2> 	mov byte [charmapnum], 0
  5186 00003E70 EB95                <2> 	jmp charmapcopy
  5187                              <2> nomorecharmap:
  5188 00003E72 E943EEFFFF          <2> 	jmp nwcmd
  5189                              <2> charmapnocopy:
  5190 00003E77 6650                <2> 	push ax
  5191 00003E79 66B82000            <2> 	mov ax, " "
  5192 00003E7D E82BE5FFFF          <2> 	call prcharq
  5193 00003E82 E826E5FFFF          <2> 	call prcharq
  5194 00003E87 6658                <2> 	pop ax
  5195 00003E89 EBB4                <2> 	jmp charmapcopycheck
  5196                              <1> %ifdef gui.included
  5197                              <1> 	%include 'source/programs/circle.asm'
  5198 00003E8B FF2C636972636C6500  <2> db 255,44,"circle",0
  5199                              <2> circle:
  5200 00003E94 8B35[6D2F0000]      <2> 	mov esi, [currentcommandloc]
  5201 00003E9A 81C607000000        <2> 	add esi, 7
  5202 00003EA0 66B91000            <2> 	mov cx, 16
  5203 00003EA4 30C0                <2> 	xor al, al
  5204 00003EA6 3806                <2> 	cmp [esi], al
  5205 00003EA8 7405                <2> 	je .nocmdline
  5206 00003EAA E891F4FFFF          <2> 	call cnvrttxt
  5207                              <2> .nocmdline:
  5208 00003EAF E8C5080000          <2> 	call linetester.stime
  5209 00003EB4 E857000000          <2> 	call fcircle.nocmdline
  5210 00003EB9 E8D3080000          <2> 	call linetester.etime
  5211 00003EBE 53                  <2> 	push ebx
  5212 00003EBF 57                  <2> 	push edi
  5213 00003EC0 E85BE4FFFF          <2> 	call getchar
  5214 00003EC5 59                  <2> 	pop ecx
  5215 00003EC6 E893F3FFFF          <2> 	call showdec
  5216 00003ECB BE[1F480000]        <2> 	mov esi, linetester.msgcircle
  5217 00003ED0 E837DEFFFF          <2> 	call printquiet
  5218 00003ED5 59                  <2> 	pop ecx
  5219 00003ED6 E883F3FFFF          <2> 	call showdec
  5220 00003EDB BE[36480000]        <2> 	mov esi, linetester.msgtime
  5221 00003EE0 E827DEFFFF          <2> 	call printquiet
  5222 00003EE5 E80E2F0000          <2> 	call reloadallgraphics
  5223 00003EEA C3                  <2> 	ret
  5224                              <2> 	
  5225 00003EEB FF2C66636972636C65- <2> db 255,44,"fcircle",0	;attempts to draw many circles without refreshing screen or showing time
  5226 00003EF4 00                  <2>
  5227                              <2> fcircle:	
  5228 00003EF5 8B35[6D2F0000]      <2> 	mov esi, [currentcommandloc]
  5229 00003EFB 81C608000000        <2> 	add esi, 8
  5230 00003F01 66B91000            <2> 	mov cx, 16
  5231 00003F05 30C0                <2> 	xor al, al
  5232 00003F07 3806                <2> 	cmp [esi], al
  5233 00003F09 7405                <2> 	je .nocmdline
  5234 00003F0B E830F4FFFF          <2> 	call cnvrttxt
  5235                              <2> .nocmdline:
  5236 00003F10 6689C8              <2> 	mov ax, cx
  5237 00003F13 66D1E1              <2> 	shl cx, 1
  5238 00003F16 6689CA              <2> 	mov dx, cx
  5239 00003F19 663B15[20570000]    <2> 	cmp dx, [resolutionx]
  5240 00003F20 731B                <2> 	jae .done
  5241 00003F22 663B0D[22570000]    <2> 	cmp cx, [resolutiony]
  5242 00003F29 7312                <2> 	jae .done
  5243 00003F2B 668B35[66020000]    <2> 	mov si, [timenanoseconds + 2]
  5244 00003F32 31FF                <2> 	xor edi, edi
  5245 00003F34 803D[9CDB0000]01    <2> 	cmp byte [guion], 1
  5246 00003F3B 7401                <2> 	je .lp
  5247 00003F3D C3                  <2> .done ret
  5248                              <2> .lp:
  5249 00003F3E 6629C2              <2> 	sub dx, ax
  5250 00003F41 6629C1              <2> 	sub cx, ax
  5251 00003F44 60                  <2> 	pusha
  5252 00003F45 E8CD290000          <2> 	call fillcircle
  5253 00003F4A 61                  <2> 	popa
  5254 00003F4B 47                  <2> 	inc edi
  5255 00003F4C 660335[64020000]    <2> 	add si, [timenanoseconds]
  5256 00003F53 6601C2              <2> 	add dx, ax
  5257 00003F56 6601C2              <2> 	add dx, ax
  5258 00003F59 6601C2              <2> 	add dx, ax
  5259 00003F5C 6601C1              <2> 	add cx, ax
  5260 00003F5F 663B15[20570000]    <2> 	cmp dx, [resolutionx]
  5261 00003F66 72D6                <2> 	jb .lp
  5262 00003F68 6689C2              <2> 	mov dx, ax
  5263 00003F6B 6601C2              <2> 	add dx, ax
  5264 00003F6E 6601C1              <2> 	add cx, ax
  5265 00003F71 6601C1              <2> 	add cx, ax
  5266 00003F74 663B0D[22570000]    <2> 	cmp cx, [resolutiony]
  5267 00003F7B 72C1                <2> 	jb .lp
  5268 00003F7D C3                  <2> 	ret
  5269                              <1> %endif
  5270                              <1> %include 'source/programs/clear.asm'
  5271 00003F7E FF2C636C65617200    <2> db 255,44,"clear",0
  5272 00003F86 E849DEFFFF          <2> 		call clear
  5273 00003F8B C3                  <2> 		ret 
  5274                              <1> %include 'source/programs/cpuid.asm'
  5275 00003F8C FF2C637075696400    <2> db 255,44,"cpuid",0
  5276 00003F94 31C0                <2> 	xor eax, eax
  5277 00003F96 0FA2                <2> 	cpuid
  5278 00003F98 891D[E93F0000]      <2> 	mov [cpuidbuf], ebx
  5279 00003F9E 8915[ED3F0000]      <2> 	mov [cpuidbuf + 4], edx
  5280 00003FA4 890D[F13F0000]      <2> 	mov [cpuidbuf + 8], ecx
  5281 00003FAA BE[E93F0000]        <2> 	mov esi, cpuidbuf
  5282 00003FAF E877DDFFFF          <2> 	call print
  5283 00003FB4 BE[77890000]        <2> 	mov esi, line
  5284 00003FB9 E86DDDFFFF          <2> 	call print
  5285 00003FBE B801000000          <2> 	mov eax, 1
  5286 00003FC3 0FA2                <2> 	cpuid
  5287 00003FC5 89C1                <2> 	mov ecx, eax
  5288 00003FC7 C605[7F310000]02    <2> 	mov byte [firsthexshown], 2
  5289 00003FCE E8C1F1FFFF          <2> 	call showhex
  5290 00003FD3 B808000080          <2> 	mov eax, 0x80000008
  5291 00003FD8 0FA2                <2> 	cpuid
  5292 00003FDA 89C1                <2> 	mov ecx, eax
  5293 00003FDC C605[7F310000]02    <2> 	mov byte [firsthexshown], 2
  5294 00003FE3 E8ACF1FFFF          <2> 	call showhex
  5295 00003FE8 C3                  <2> 	ret
  5296                              <2> 	
  5297 00003FE9 00<rept>            <2> cpuidbuf times 13 db 0
  5298                              <2> cpuidvendorend:
  5299                              <1> %ifdef network.included
  5300                              <1> 	%include 'source/programs/dhcp.asm'
  5301 00003FF6 FF2C6468637000      <2> db 255,44,"dhcp",0
  5302                              <2> dhcp:
  5303 00003FFD BE[BD400000]        <2> 	mov esi, .dhcp.mac
  5304 00004002 BB[9D410000]        <2> 	mov ebx, .dhcp.option.mac
  5305 00004007 BF[7D400000]        <2> 	mov edi, .mac
  5306 0000400C 31C9                <2> 	xor ecx, ecx
  5307 0000400E 66890D[8F400000]    <2> 	mov [.ip.checksum], cx
  5308 00004015 66890D[9F400000]    <2> 	mov [.udp.checksum], cx
  5309 0000401C 8B0D[30890000]      <2> 	mov ecx, [sysmac]
  5310 00004022 890B                <2> 	mov [ebx], ecx
  5311 00004024 890F                <2> 	mov [edi], ecx
  5312 00004026 890E                <2> 	mov [esi], ecx
  5313 00004028 668B0D[34890000]    <2> 	mov cx, [sysmac + 4]
  5314 0000402F 66894B04            <2> 	mov [ebx + 4], cx
  5315 00004033 66894E04            <2> 	mov [esi + 4], cx
  5316 00004037 66894F04            <2> 	mov [edi + 4], cx
  5317 0000403B BF[85400000]        <2> 	mov edi, .ip.header
  5318 00004040 BE[99400000]        <2> 	mov esi, .ip.headerend
  5319 00004045 E8D1470000          <2> 	call getchecksum
  5320 0000404A 66890D[8F400000]    <2> 	mov [.ip.checksum], cx
  5321 00004051 BF[99400000]        <2> 	mov edi, .udp.header
  5322 00004056 BE[B4410000]        <2> 	mov esi, .udp.end
  5323 0000405B E8BB470000          <2> 	call getchecksum
  5324 00004060 66890D[9F400000]    <2> 	mov [.udp.checksum], cx
  5325 00004067 BF[77400000]        <2> 	mov edi, .frame
  5326 0000406C BE[B4410000]        <2> 	mov esi, .udp.end
  5327 00004071 E89B470000          <2> 	call sendpacket
  5328 00004076 C3                  <2> 	ret
  5329                              <2> .frame:
  5330 00004077 FFFFFFFFFFFF        <2> 	.destmac db 0xFF,0xFF,0xFF,0xFF,0xFF,0xFF
  5331 0000407D 000000000000        <2> 	.mac db 0,0,0,0,0,0
  5332 00004083 0800                <2> 	db 8,0
  5333                              <2> .ip.header:
  5334 00004085 45                  <2> 	db (0x40 | (.ip.headerend - .ip.header)/4)
  5335 00004086 00                  <2> 	db 0
  5336 00004087 012F                <2> 	db (.udp.end - .ip.header)/256, (.udp.end - .ip.header)
  5337 00004089 0000                <2> 	dw 0
  5338 0000408B 0000                <2> 	dw 0
  5339 0000408D 80                  <2> 	db 0x80
  5340 0000408E 11                  <2> 	db 17
  5341 0000408F 0000                <2> .ip.checksum dw 0
  5342 00004091 00000000            <2> 	db 0,0,0,0
  5343 00004095 FFFFFFFF            <2> 	db 255,255,255,255	
  5344                              <2> .ip.headerend:
  5345                              <2> .udp.header:
  5346 00004099 0044                <2> 	db 0,68	;source port
  5347 0000409B 0043                <2> 	db 0,67 ;destination port
  5348 0000409D 011B                <2> 	db (.udp.end - .udp.header)/256, (.udp.end - .udp.header)
  5349 0000409F 0000                <2> .udp.checksum dw 0
  5350                              <2> .udp.headerend:
  5351                              <2> .dhcp.data:
  5352 000040A1 01                  <2> 	db 1	;message type
  5353 000040A2 01                  <2> 	db 1	;hardware type
  5354 000040A3 06                  <2> 	db 6	;hardware address length
  5355 000040A4 00                  <2> 	db 0	;hops
  5356 000040A5 EC2B2369            <2> 	db 0xEC,0x2B,0x23,0x69	;transaction ID
  5357 000040A9 0000                <2> 	db 0,0	;seconds elapsed
  5358 000040AB 0000                <2> 	db 0,0	;flags
  5359 000040AD 00000000            <2> 	db 0,0,0,0	;client ip address
  5360 000040B1 00000000            <2> 	db 0,0,0,0	;your ip address
  5361 000040B5 00000000            <2> 	db 0,0,0,0	;server ip address
  5362 000040B9 00000000            <2> 	db 0,0,0,0	;relay agent ip address
  5363 000040BD 000000000000        <2> .dhcp.mac db 0,0,0,0,0,0	;client hardware address
  5364 000040C3 00<rept>            <2> 	times 10 db 0	;padding
  5365 000040CD 00<rept>            <2> 	times 64 db 0	;server host name
  5366 0000410D 00<rept>            <2> 	times 128 db 0	;boot file name
  5367 0000418D 63825363            <2> 	db 0x63,0x82,0x53,0x63	;magic cookie
  5368                              <2> .dhcp.option.type:
  5369 00004191 350103              <2> 	db 53,1,3	;DHCP Request
  5370 00004194 3204C0A80002        <2> 	db 50,4,192,168,0,2	;requested IP
  5371 0000419A 3D07                <2> 	db 61,7 ;client id(mac)
  5372 0000419C 01                  <2> 	db 1	;Type=Ethernet
  5373 0000419D 000000000000        <2> .dhcp.option.mac:	db 0,0,0,0,0,0
  5374 000041A3 0C08                <2> 	db 12,8 ;host name
  5375 000041A5 536F6C6C65724F53    <2> .dhcp.option.name 	db "SollerOS"
  5376 000041AD 370401030F06        <2> 	db 55,4,1,3,15,6	;request subnet, router, domain name, name server
  5377 000041B3 FF                  <2> 	db 0xFF	;end DHCP options
  5378                              <2> .dhcp.end:
  5379                              <2> .udp.end:
  5380                              <2> 	
  5381                              <1> %endif
  5382                              <1> %ifdef disk.none
  5383                              <1> %else
  5384                              <1> 	%include 'source/programs/dos.asm'
  5385 000041B4 FF2C646F7300        <2> db 255,44,"dos",0
  5386                              <2> dosrunner:
  5387 000041BA 8925[E6F10000]      <2> 	mov [previousstack], esp
  5388 000041C0 8B3D[6D2F0000]      <2> 	mov edi, [currentcommandloc]
  5389 000041C6 81C704000000        <2> 	add edi, 4
  5390 000041CC BE00014000          <2> 	mov esi,  0x100 + dosprogloc	;this should be the beginning of memory
  5391 000041D1 E899230000          <2> 	call loadfile
  5392 000041D6 8B3D[6D2F0000]      <2> 	mov edi, [currentcommandloc]
  5393 000041DC 81C704000000        <2> 	add edi, 4
  5394 000041E2 81FA94010000        <2> 	cmp edx, 404
  5395 000041E8 0F845E000000        <2> 	je near .noprogfound
  5396 000041EE BB81004000          <2> 	mov ebx, 0x81 + dosprogloc
  5397 000041F3 31C9                <2> 	xor ecx, ecx
  5398                              <2> .findparams:
  5399 000041F5 47                  <2> 	inc edi
  5400 000041F6 8A07                <2> 	mov al, [edi]
  5401 000041F8 3C20                <2> 	cmp al, " "
  5402 000041FA 75F9                <2> 	jne .findparams
  5403                              <2> .copyparams:
  5404 000041FC 8A07                <2> 	mov al, [edi]
  5405 000041FE 8803                <2> 	mov [ebx], al
  5406 00004200 43                  <2> 	inc ebx
  5407 00004201 47                  <2> 	inc edi
  5408 00004202 41                  <2> 	inc ecx
  5409 00004203 81FB00014000        <2> 	cmp ebx, 0x100 + dosprogloc
  5410 00004209 7304                <2> 	jae .nomoreparams
  5411 0000420B 3C00                <2> 	cmp al, 0
  5412 0000420D 75ED                <2> 	jne .copyparams
  5413                              <2> .nomoreparams:
  5414 0000420F 880D80004000        <2> 	mov [0x80 + dosprogloc], cl
  5415 00004215 66B85000            <2> 	mov ax, DOS_DATA_SEL
  5416 00004219 8ED8                <2> 	mov ds, ax
  5417 0000421B 8EC0                <2> 	mov es, ax
  5418 0000421D 8EE0                <2> 	mov fs, ax
  5419 0000421F 8EE8                <2> 	mov gs, ax
  5420 00004221 31C0                <2> 	xor eax, eax
  5421 00004223 31DB                <2> 	xor ebx, ebx
  5422 00004225 31C9                <2> 	xor ecx, ecx
  5423 00004227 31D2                <2> 	xor edx, edx
  5424 00004229 31FF                <2> 	xor edi, edi
  5425 0000422B 31F6                <2> 	xor esi, esi
  5426 0000422D 9A000100004800      <2> 	call DOS_CODE_SEL:0x100
  5427 00004234 66BB3000            <2> 	mov bx, NEW_DATA_SEL
  5428 00004238 6689DA              <2> 	mov dx, bx
  5429 0000423B 8EC3                <2> 	mov es, bx
  5430 0000423D 8EE3                <2> 	mov fs, bx
  5431 0000423F 66BB2000            <2> 	mov bx, SYS_DATA_SEL
  5432 00004243 8EEB                <2> 	mov gs, bx
  5433 00004245 8B25[E6F10000]      <2> 	mov esp, [previousstack]
  5434 0000424B C3                  <2> 	ret
  5435                              <2> .noprogfound:
  5436 0000424C BE[3E890000]        <2> 	mov esi, notfound1
  5437 00004251 E8D5DAFFFF          <2> 	call print
  5438 00004256 8B35[6D2F0000]      <2> 	mov esi, [currentcommandloc]
  5439 0000425C 81C604000000        <2> 	add esi, 4
  5440 00004262 E8C4DAFFFF          <2> 	call print
  5441 00004267 BE[46890000]        <2> 	mov esi, notfound2
  5442 0000426C E8BADAFFFF          <2> 	call print
  5443 00004271 C3                  <2> 	ret
  5444                              <2> 	
  5445                              <1> %endif
  5446                              <1> %include 'source/programs/dump.asm'
  5447 00004272 FF2C64756D7000      <2> db 255,44,"dump",0
  5448 00004279 8B35[6D2F0000]      <2> 	mov esi, [currentcommandloc]
  5449 0000427F 81C605000000        <2> 	add esi, 5
  5450 00004285 31C9                <2> 	xor ecx, ecx
  5451 00004287 66B83078            <2> 	mov ax, "0x"
  5452 0000428B 663906              <2> 	cmp [esi], ax
  5453 0000428E 740A                <2> 	je dumphexin
  5454 00004290 E8ABF0FFFF          <2> 	call cnvrttxt
  5455 00004295 E910000000          <2> 	jmp dumphexnow
  5456                              <2> dumphexin:
  5457 0000429A 81C602000000        <2> 	add esi, 2
  5458 000042A0 E852F0FFFF          <2> 	call cnvrthextxt
  5459 000042A5 E900000000          <2> 	jmp dumphexnow
  5460                              <2> dumphexnow:
  5461 000042AA 89CF                <2> 	mov edi, ecx
  5462 000042AC 89FE                <2> 	mov esi, edi
  5463 000042AE 81C680030000        <2> 	add esi, 896
  5464                              <2> dumphexloop:
  5465 000042B4 8B0F                <2> 	mov ecx, [edi]
  5466 000042B6 C605[7F310000]05    <2> 	mov byte [firsthexshown],5
  5467 000042BD E8D2EEFFFF          <2> 	call showhex
  5468 000042C2 81C704000000        <2> 	add edi, 4
  5469 000042C8 39F7                <2> 	cmp edi, esi
  5470 000042CA 72E8                <2> 	jb dumphexloop
  5471 000042CC E8A5E5FFFF          <2> 	call termcopy
  5472 000042D1 C3                  <2> 	ret 
  5473                              <1> %include 'source/programs/echo.asm'
  5474                              <2> 
  5475 000042D2 FF2C6563686F00      <2> db 255,44,"echo",0
  5476                              <2> 	echoprog:
  5477 000042D9 8B35[6D2F0000]      <2> 		mov esi, [currentcommandloc]
  5478 000042DF 81C605000000        <2> 		add esi, 5
  5479 000042E5 8A06                <2> 		mov al, [esi]
  5480 000042E7 E83FDAFFFF          <2> 		call print
  5481 000042EC BE[77890000]        <2> 		mov esi, line
  5482 000042F1 E835DAFFFF          <2> 		call print
  5483 000042F6 C3                  <2> 		ret
  5484 000042F7 BB[66F40000]        <2> 	echovr:	mov ebx, variables
  5485 000042FC BF06000000          <2> 		mov edi, 6
  5486 00004301 E83C000000          <2> 		call nxtvrech
  5487 00004306 E954000000          <2> 		jmp prntvr2
  5488 0000430B B13D                <2> 	echvar:	mov cl, '='
  5489 0000430D 43                  <2> 		inc ebx
  5490 0000430E 8A03                <2> 		mov al, [ebx]
  5491 00004310 3C00                <2> 		cmp al, 0
  5492 00004312 742E                <2> 		je nxtvrech
  5493 00004314 3C3D                <2> 		cmp al, '='
  5494 00004316 7422                <2> 		je nxtvrechb1
  5495 00004318 8B35[6D2F0000]      <2> 		mov esi, [currentcommandloc]
  5496 0000431E 01FE                <2> 		add esi, edi
  5497 00004320 E887ECFFFF          <2> 		call cndtest
  5498 00004325 3C02                <2> 		cmp al, 2
  5499 00004327 7432                <2> 		je prntvr
  5500 00004329 3C01                <2> 		cmp al, 1
  5501 0000432B 742E                <2> 		je prntvr
  5502 0000432D 8B35[6D2F0000]      <2> 		mov esi, [currentcommandloc]
  5503 00004333 01FE                <2> 		add esi, edi
  5504 00004335 E908000000          <2> 		jmp nxtvrech
  5505                              <2> 	nxtvrechb1:
  5506 0000433A 81EB02000000        <2> 		sub ebx, 2
  5507 00004340 EBC9                <2> 		jmp echvar
  5508 00004342 8A03                <2> 	nxtvrech: mov al, [ebx]
  5509 00004344 3C05                <2> 		cmp al, 5
  5510 00004346 740A                <2> 		je nxtvrec2
  5511 00004348 43                  <2> 		inc ebx
  5512 00004349 81FB[66040100]      <2> 		cmp ebx, varend
  5513 0000434F 72F1                <2> 		jb nxtvrech
  5514 00004351 C3                  <2> 		ret
  5515 00004352 43                  <2> 	nxtvrec2: inc ebx
  5516 00004353 8A03                <2> 		mov al, [ebx]
  5517 00004355 3C04                <2> 		cmp al, 4
  5518 00004357 74B2                <2> 		je echvar
  5519 00004359 EBE7                <2> 		jmp nxtvrech
  5520 0000435B 43                  <2> 	prntvr: inc ebx
  5521 0000435C 89DE                <2> 		mov esi, ebx
  5522 0000435E C3                  <2> 		ret
  5523 0000435F E8C7D9FFFF          <2> 	prntvr2: call print
  5524 00004364 BE[77890000]        <2> 		mov esi, line
  5525 00004369 E8BDD9FFFF          <2> 		call print
  5526 0000436E C3                  <2> 		ret 
  5527                              <1> %include 'source/programs/else.asm'
  5528 0000436F FF2C656C736500      <2> 	db 255,44,"else",0
  5529 00004376 31C0                <2> elsecmd:	xor eax, eax
  5530 00004378 3805[60F40000]      <2> 	cmp [BATCHISON], al
  5531 0000437E 0F84E7F6FFFF        <2> 	je near notbatch
  5532 00004384 A0[F7F30000]        <2> 	mov al, [IFON]
  5533 00004389 BE[F8F30000]        <2> 	mov esi, IFTRUE
  5534 0000438E 01C6                <2> 	add esi, eax
  5535 00004390 8A06                <2> 	mov al, [esi]
  5536 00004392 3401                <2> 	xor al, 1
  5537 00004394 8806                <2> 	mov [esi], al
  5538 00004396 C3                  <2> 	ret 
  5539                              <1> %include 'source/programs/exit.asm'
  5540 00004397 FF2C6578697400      <2> db 255,44,"exit",0
  5541 0000439E 803D[F6F30000]01    <2> 	cmp byte [ranboot], 1
  5542 000043A5 0F84A3E8FFFF        <2> 	je near returnfromexp
  5543 000043AB E989E7FFFF          <2> 	jmp nobootfile
  5544                              <1> %include 'source/programs/fi.asm'
  5545 000043B0 FF2C666900          <2> 	db 255,44,"fi",0
  5546 000043B5 30C0                <2> 	xor al, al
  5547 000043B7 3805[60F40000]      <2> 	cmp [BATCHISON], al
  5548 000043BD 0F84A8F6FFFF        <2> 	je near notbatch
  5549 000043C3 B001                <2> fi:	mov al, 1
  5550 000043C5 2805[F7F30000]      <2> 	sub [IFON],al
  5551 000043CB C3                  <2> 	ret 
  5552                              <1> %ifdef gui.included
  5553                              <1> 	%include 'source/programs/gui.asm'
  5554 000043CC FF2C67756900        <2> db 255,44,"gui",0
  5555                              <2> guiswitcher:
  5556 000043D2 8B35[6D2F0000]      <2> 	mov esi, [currentcommandloc]
  5557 000043D8 81C604000000        <2> 	add esi, 4
  5558 000043DE 31C9                <2> 	xor ecx, ecx
  5559 000043E0 803E00              <2> 	cmp byte [esi], 0
  5560 000043E3 740A                <2> 	je .nomodepref
  5561 000043E5 E80DEFFFFF          <2> 	call cnvrthextxt ;switches arg on cline to vesa mode in ecx
  5562 000043EA E907000000          <2> 	jmp .modepref
  5563                              <2> .nomodepref:
  5564 000043EF 51                  <2> 	push ecx
  5565 000043F0 E8DFD9FFFF          <2> 	call clear
  5566 000043F5 59                  <2> 	pop ecx
  5567                              <2> .modepref:
  5568 000043F6 66BB[3053]          <2> 	mov bx, guiswitch
  5569 000043FA 66891D[D70C0000]    <2> 	mov [realmodeptr], bx
  5570 00004401 BB[11440000]        <2> 	mov ebx, guiswitchret
  5571 00004406 891D[D30C0000]      <2> 	mov [realmodereturn], ebx
  5572 0000440C E9ABC7FFFF          <2> 	jmp realmode
  5573                              <2> guiswitchret:
  5574 00004411 65803D[9CDB0000]01  <2> 	cmp byte [gs:guion], 1
  5575 00004419 7401                <2> 	je .cont
  5576 0000441B C3                  <2> 	ret
  5577                              <2> .cont:
  5578 0000441C BF[0E550000]        <2> 	mov edi, VBEMODEBLOCK
  5579                              <2> .loop:
  5580 00004421 658B07              <2> 	mov eax, [gs:edi]
  5581 00004424 8907                <2> 	mov [edi], eax
  5582 00004426 47                  <2> 	inc edi
  5583 00004427 81FF[12580000]      <2> 	cmp edi, VBEEND
  5584 0000442D 72F2                <2> 	jb .loop
  5585 0000442F A1[36570000]        <2> 	mov eax, [physbaseptr]
  5586 00004434 8B1D[41020000]      <2> 	mov ebx, [basecache]
  5587 0000443A C1E304              <2> 	shl ebx, 4
  5588 0000443D 29D8                <2> 	sub eax, ebx
  5589 0000443F A3[36570000]        <2> 	mov [physbaseptr], eax
  5590 00004444 C605[AB230000]00    <2> 	mov byte [termguion], 0
  5591 0000444B BE[7B0C0100]        <2> 	mov esi, graphicstable
  5592 00004450 30C0                <2> 	xor al, al
  5593                              <2> .clear:
  5594 00004452 8806                <2> 	mov [esi], al
  5595 00004454 46                  <2> 	inc esi
  5596 00004455 81FE[7B0E0100]      <2> 	cmp esi, graphicstableend
  5597 0000445B 72F5                <2> 	jb .clear
  5598 0000445D E82F2B0000          <2> 	call guisetup
  5599                              <2> 	;The next few lines center a window that is 3/4ths of the full screen
  5600 00004462 668B15[20570000]    <2> 	mov dx, [resolutionx]
  5601 00004469 668B0D[22570000]    <2> 	mov cx, [resolutiony]
  5602 00004470 6689D3              <2> 	mov bx, dx
  5603 00004473 6689C8              <2> 	mov ax, cx
  5604 00004476 66D1EB              <2> 	shr bx, 1
  5605 00004479 66D1E8              <2> 	shr ax, 1
  5606 0000447C 6689DA              <2> 	mov dx, bx
  5607 0000447F 66D1EA              <2> 	shr dx, 1
  5608 00004482 6689C1              <2> 	mov cx, ax
  5609 00004485 66D1E9              <2> 	shr cx, 1
  5610 00004488 6601D3              <2> 	add bx, dx
  5611 0000448B 6601C8              <2> 	add ax, cx
  5612 0000448E 66D1E9              <2> 	shr cx, 1
  5613 00004491 66C1EB03            <2> 	shr bx, 3
  5614 00004495 66C1E303            <2> 	shl bx, 3
  5615 00004499 66C1E804            <2> 	shr ax, 4
  5616 0000449D 66C1E004            <2> 	shl ax, 4
  5617 000044A1 66891D[96710000]    <2> 	mov [termwindow], bx
  5618 000044A8 66A3[98710000]      <2> 	mov [termwindow + 2], ax	;the previous lines of code make a large terminal window that is 4 characters smaller than the screen
  5619 000044AE BE[96710000]        <2> 	mov esi, termwindow
  5620 000044B3 31DB                <2> 	xor ebx, ebx
  5621 000044B5 6631C0              <2> 	xor ax, ax
  5622 000044B8 E806320000          <2> 	call showwindow
  5623 000044BD E851130000          <2> 	call cursorgui
  5624 000044C2 E80DD9FFFF          <2> 	call clear
  5625 000044C7 C3                  <2> 	ret
  5626                              <2> 	
  5627                              <1> %endif
  5628                              <1> %include 'source/programs/help.asm'
  5629 000044C8 FF2C68656C7000      <2> db 255,44,"help",0
  5630                              <2> lscmd:	
  5631 000044CF B00D                <2> 		mov al, 13
  5632 000044D1 E8D7DEFFFF          <2> 		call prcharq
  5633 000044D6 BE[C3330000]        <2> 		mov esi, progstart
  5634 000044DB BB[30530000]        <2> 		mov ebx, progend
  5635 000044E0 BE[E6ED0000]        <2> dir:	mov esi, fileindex
  5636 000044E5 8A06                <2> 	dirnxt:	mov al, [esi]
  5637 000044E7 30E4                <2> 		xor ah, ah
  5638 000044E9 3CFF                <2> 		cmp al, 255
  5639 000044EB 7415                <2> 		je dirfnd
  5640 000044ED 46                  <2> 		inc esi
  5641 000044EE 81FE[E6F10000]      <2> 		cmp esi,  fileindexend
  5642 000044F4 7339                <2> 		jae dirdn
  5643 000044F6 EBED                <2> 		jmp dirnxt
  5644                              <2> 	dirfnd3:
  5645 000044F8 46                  <2> 		inc esi
  5646 000044F9 81FE[E6F10000]      <2> 		cmp esi, fileindexend
  5647 000044FF 76E4                <2> 		jbe dirnxt
  5648 00004501 4E                  <2> 		dec esi
  5649 00004502 46                  <2> 	dirfnd:	inc esi
  5650 00004503 8A06                <2> 		mov al, [esi]
  5651 00004505 30E4                <2> 		xor ah, ah
  5652 00004507 3C2C                <2> 		cmp al, 44
  5653 00004509 740B                <2> 		je dirfnd2
  5654 0000450B 46                  <2> 		inc esi
  5655 0000450C 81FE[E6F10000]      <2> 		cmp esi,  fileindexend
  5656 00004512 731B                <2> 		jae dirdn
  5657 00004514 EBCF                <2> 		jmp dirnxt
  5658 00004516 46                  <2> 	dirfnd2: inc esi
  5659 00004517 E8F0D7FFFF          <2> 		call printquiet
  5660 0000451C 56                  <2> 		push esi
  5661 0000451D B009                <2> 		mov al, 9
  5662 0000451F E889DEFFFF          <2> 		call prcharq
  5663 00004524 5E                  <2> 		pop esi
  5664 00004525 81FE[E6F10000]      <2> 		cmp esi,  fileindexend
  5665 0000452B 7302                <2> 		jae dirdn
  5666 0000452D EBB6                <2> 		jmp dirnxt
  5667 0000452F BE[77890000]        <2> 	dirdn:	mov esi, line
  5668 00004534 E8F2D7FFFF          <2> 			call print
  5669 00004539 C3                  <2> 			ret
  5670 0000453A 00                  <2> currentdir db 0
  5671                              <1> %include 'source/programs/if.asm'
  5672 0000453B FF2C696600          <2> 	db 255,44,"if",0
  5673 00004540 30C0                <2> ifcmd:	xor al, al
  5674 00004542 3805[60F40000]      <2> 	cmp [BATCHISON], al
  5675 00004548 0F841DF5FFFF        <2> 	je near notbatch
  5676 0000454E 8B1D[6D2F0000]      <2> 	mov ebx, [currentcommandloc]
  5677 00004554 81C303000000        <2> 	add ebx, 3
  5678 0000455A 89DE                <2> 	mov esi, ebx
  5679 0000455C 8A06                <2> chkeqsn: mov al, [esi]
  5680 0000455E 3C00                <2> 	cmp al, 0
  5681 00004560 0F8405F5FFFF        <2> 	je near notbatch
  5682 00004566 3C3D                <2> 	cmp al, '='
  5683 00004568 0F8403000000        <2> 	je near chkeqdn
  5684 0000456E 46                  <2> 	inc esi
  5685 0000456F EBEB                <2> 	jmp chkeqsn
  5686 00004571 B000                <2> chkeqdn: mov al, 0 
  5687 00004573 8806                <2> 	mov [esi], al
  5688 00004575 46                  <2> 	inc esi
  5689 00004576 E8F6E9FFFF          <2> 	call tester
  5690 0000457B 3C01                <2> 	cmp al, 1
  5691 0000457D 0F8405000000        <2> 	je near trueif
  5692 00004583 E91C000000          <2> 	jmp falseif
  5693 00004588 31C0                <2> trueif:	xor eax, eax
  5694 0000458A A0[F7F30000]        <2> 	mov al, [IFON]
  5695 0000458F FEC0                <2> 	inc al
  5696 00004591 A2[F7F30000]        <2> 	mov [IFON], al
  5697 00004596 30E4                <2> 	xor ah, ah
  5698 00004598 BE[F8F30000]        <2> 	mov esi, IFTRUE
  5699 0000459D 01C6                <2> 	add esi, eax
  5700 0000459F B401                <2> 	mov ah, 1
  5701 000045A1 8826                <2> 	mov [esi], ah
  5702 000045A3 C3                  <2> 	ret 
  5703 000045A4 31C0                <2> falseif: xor eax, eax
  5704 000045A6 A0[F7F30000]        <2> 	mov al, [IFON]
  5705 000045AB FEC0                <2> 	inc al
  5706 000045AD A2[F7F30000]        <2> 	mov [IFON], al
  5707 000045B2 30E4                <2> 	xor ah, ah
  5708 000045B4 BE[F8F30000]        <2> 	mov esi, IFTRUE
  5709 000045B9 01C6                <2> 	add esi, eax
  5710 000045BB 30E4                <2> 	xor ah, ah
  5711 000045BD 8826                <2> 	mov [esi], ah
  5712 000045BF C3                  <2> 	ret 
  5713                              <1> %ifdef network.included
  5714                              <1> 	%include 'source/programs/ipconfig.asm'
  5715 000045C0 FF2C6970636F6E6669- <2> db 255,44,"ipconfig",0
  5716 000045C9 6700                <2>
  5717                              <2> ifconfig:
  5718 000045CB 8B35[6D2F0000]      <2> 	mov esi, [currentcommandloc]
  5719 000045D1 81C609000000        <2> 	add esi, 9
  5720 000045D7 803E00              <2> 	cmp byte [esi], 0
  5721 000045DA 740B                <2> 	je .noip
  5722 000045DC E862420000          <2> 	call strtoip
  5723 000045E1 890D[2C890000]      <2> 	mov [sysip], ecx
  5724                              <2> .noip:
  5725                              <2> %ifdef ne2000.included
  5726                              <2> 	cmp byte [ne2000.nicconfig], 1
  5727                              <2> 	jne .none2000
  5728                              <2> 	mov esi, ne2000.name
  5729                              <2> 	call print
  5730                              <2> 	mov ecx, ne2000.mac
  5731                              <2> 	call showmac
  5732                              <2> 	mov esi, line
  5733                              <2> 	call print
  5734                              <2> .none2000:
  5735                              <2> %endif
  5736                              <2> %ifdef rtl8139.included
  5737                              <2> 	cmp byte [rtl8139.nicconfig], 1
  5738                              <2> 	jne .nortl8139
  5739                              <2> 	mov esi, rtl8139.name
  5740                              <2> 	call print
  5741                              <2> 	mov ecx, rtl8139.mac
  5742                              <2> 	call showmac
  5743                              <2> 	mov esi, line
  5744                              <2> 	call print
  5745                              <2> .nortl8139:
  5746                              <2> %endif
  5747                              <2> %ifdef rtl8169.included
  5748 000045E7 803D[55860000]01    <2> 	cmp byte [rtl8169.nicconfig], 1
  5749 000045EE 751E                <2> 	jne .nortl8169
  5750 000045F0 BE[5C860000]        <2> 	mov esi, rtl8169.name
  5751 000045F5 E831D7FFFF          <2> 	call print
  5752 000045FA B9[56860000]        <2> 	mov ecx, rtl8169.mac
  5753 000045FF E8C1420000          <2> 	call showmac
  5754 00004604 BE[77890000]        <2> 	mov esi, line
  5755 00004609 E81DD7FFFF          <2> 	call print
  5756                              <2> .nortl8169:
  5757                              <2> %endif
  5758                              <2> %ifdef i8254x.included
  5759                              <2> 	cmp byte [i8254x.nicconfig], 1
  5760                              <2> 	jne .noi8254x
  5761                              <2> 	mov esi, i8254x.name
  5762                              <2> 	call print
  5763                              <2> 	mov ecx, i8254x.mac
  5764                              <2> 	call showmac
  5765                              <2> 	mov esi, line
  5766                              <2> 	call print
  5767                              <2> .noi8254x:
  5768                              <2> %endif
  5769 0000460E 8B0D[2C890000]      <2> 	mov ecx, [sysip]
  5770 00004614 E870420000          <2> 	call showip
  5771 00004619 BE[77890000]        <2> 	mov esi, line
  5772 0000461E E808D7FFFF          <2> 	call print
  5773 00004623 C3                  <2> 	ret
  5774                              <2> 	
  5775                              <1> %endif
  5776                              <1> %include 'source/programs/keycode.asm'
  5777 00004624 FF2C6B6579636F6465- <2> db 255,44,"keycode",0
  5778 0000462D 00                  <2>
  5779                              <2> keycode:
  5780 0000462E 66C705[84230000]00- <2> 	mov word [trans], 0
  5781 00004636 00                  <2>
  5782 00004637 C605[0E670000]00    <2> 	mov byte [threadson], 0
  5783                              <2> %ifdef io.serial
  5784                              <2> .noserial:
  5785                              <2> 	hlt
  5786                              <2> 	mov dx, [serial.address]
  5787                              <2> 	in al, dx
  5788                              <2> 	cmp al, 0
  5789                              <2> 	je .noserial
  5790                              <2> 	mov cl, al
  5791                              <2> 	call showhexsmall
  5792                              <2> 	cmp al, 0x1B
  5793                              <2> 	jne .noserial
  5794                              <2> 	in al, dx
  5795                              <2> 	mov cl, al
  5796                              <2> 	call showhexsmall
  5797                              <2> 	cmp cl, 0x5B
  5798                              <2> 	je .noserial
  5799                              <2> 	ret
  5800                              <2> %else
  5801 0000463E E8A9150000          <2> 	call getkey
  5802 00004643 31C0                <2> 	xor eax, eax
  5803 00004645 31C9                <2> 	xor ecx, ecx
  5804 00004647 8A0D[CA5B0000]      <2> 	mov cl, [specialkey]
  5805 0000464D 80F900              <2> 	cmp cl, 0
  5806 00004650 0F8405000000        <2> 	je near .nospecialkeycode
  5807 00004656 E825EBFFFF          <2> 	call showhexsmall
  5808                              <2> .nospecialkeycode:
  5809 0000465B 668B0D[82230000]    <2> 	mov cx, [lastkey + 2]
  5810 00004662 E819EBFFFF          <2> 	call showhexsmall
  5811 00004667 80F901              <2> 	cmp cl, 1
  5812 0000466A 75C2                <2> 	jne keycode
  5813 0000466C C3                  <2> 	ret
  5814                              <2> %endif
  5815                              <1> %ifdef gui.included
  5816                              <1> 	%include 'source/programs/line.asm'
  5817 0000466D FF2C6C696E6500      <2> db 255,44,"line",0
  5818                              <2> linetester:
  5819 00004674 803D[9CDB0000]00    <2> 	cmp byte [guion], 0
  5820 0000467B 0F841B000000        <2> 	je near .done
  5821 00004681 668B35[66020000]    <2> 	mov si, [timenanoseconds + 2];essentially load a random value
  5822 00004688 BB38000000          <2> 	mov ebx, 28*2;the line test draws ~28/6 times more lines in a 4:3 display mode than circles
  5823 0000468D E868000000          <2> 	call .circletest
  5824 00004692 BB0C000000          <2> 	mov ebx, 6*2 ;this makes them draw the same amount of lines as circles
  5825 00004697 E801000000          <2> 	call .linetest
  5826                              <2> .done:
  5827 0000469C C3                  <2> 	ret
  5828                              <2> 
  5829                              <2> .linetest:
  5830 0000469D 53                  <2> 	push ebx
  5831 0000469E E8D6000000          <2> 	call .stime
  5832 000046A3 5B                  <2> 	pop ebx
  5833 000046A4 31FF                <2> 	xor edi, edi
  5834                              <2> .ltlp:
  5835 000046A6 53                  <2> 	push ebx
  5836 000046A7 E81C010000          <2> 	call .st
  5837 000046AC 66F7D6              <2> 	not si
  5838 000046AF E814010000          <2> 	call .st
  5839 000046B4 5B                  <2> 	pop ebx
  5840 000046B5 66F7D6              <2> 	not si
  5841 000046B8 660335[64020000]    <2> 	add si, [timenanoseconds]
  5842 000046BF 4B                  <2> 	dec ebx
  5843 000046C0 81FB00000000        <2> 	cmp ebx, 0
  5844 000046C6 77DE                <2> 	ja .ltlp
  5845 000046C8 E8C4000000          <2> 	call .etime
  5846 000046CD 53                  <2> 	push ebx	
  5847 000046CE 57                  <2> 	push edi
  5848 000046CF E8D4260000          <2> 	call guiclear
  5849 000046D4 E81F270000          <2> 	call reloadallgraphics
  5850 000046D9 59                  <2> 	pop ecx
  5851 000046DA E87FEBFFFF          <2> 	call showdec
  5852 000046DF BE[0A480000]        <2> 	mov esi, .msg
  5853 000046E4 E842D6FFFF          <2> 	call print
  5854 000046E9 59                  <2> 	pop ecx
  5855 000046EA E86FEBFFFF          <2> 	call showdec
  5856 000046EF BE[36480000]        <2> 	mov esi, .msgtime
  5857 000046F4 E832D6FFFF          <2> 	call print
  5858 000046F9 C3                  <2> 	ret
  5859                              <2> 	
  5860                              <2> .circletest:
  5861 000046FA 53                  <2> 	push ebx
  5862 000046FB E879000000          <2> 	call .stime
  5863 00004700 5B                  <2> 	pop ebx
  5864 00004701 31FF                <2> 	xor edi, edi
  5865                              <2> .ctlp:
  5866 00004703 53                  <2> 	push ebx
  5867 00004704 668B0D[22570000]    <2> 	mov cx, [resolutiony]
  5868 0000470B 66D1E9              <2> 	shr cx, 1
  5869 0000470E 668B15[20570000]    <2> 	mov dx, [resolutionx]
  5870 00004715 66D1EA              <2> 	shr dx, 1
  5871 00004718 6689C8              <2> 	mov ax, cx
  5872                              <2> .circle:
  5873 0000471B 60                  <2> 	pusha
  5874 0000471C E8E4200000          <2> 	call drawcircle
  5875 00004721 61                  <2> 	popa
  5876 00004722 6648                <2> 	dec ax
  5877 00004724 47                  <2> 	inc edi
  5878 00004725 663D0100            <2> 	cmp ax, 1
  5879 00004729 77F0                <2> 	ja .circle
  5880 0000472B 66F7D6              <2> 	not si
  5881                              <2> .circle2:
  5882 0000472E 60                  <2> 	pusha
  5883 0000472F E8D1200000          <2> 	call drawcircle
  5884 00004734 61                  <2> 	popa
  5885 00004735 47                  <2> 	inc edi
  5886 00004736 6640                <2> 	inc ax
  5887 00004738 6639C8              <2> 	cmp ax, cx
  5888 0000473B 76F1                <2> 	jbe .circle2
  5889 0000473D 5B                  <2> 	pop ebx
  5890 0000473E 66F7D6              <2> 	not si
  5891 00004741 660335[64020000]    <2> 	add si, [timenanoseconds]
  5892 00004748 4B                  <2> 	dec ebx
  5893 00004749 81FB00000000        <2> 	cmp ebx, 0
  5894 0000474F 77B2                <2> 	ja .ctlp
  5895 00004751 E83B000000          <2> 	call .etime
  5896 00004756 53                  <2> 	push ebx
  5897 00004757 57                  <2> 	push edi
  5898 00004758 59                  <2> 	pop ecx
  5899 00004759 E800EBFFFF          <2> 	call showdec
  5900 0000475E BE[1F480000]        <2> 	mov esi, .msgcircle
  5901 00004763 E8C3D5FFFF          <2> 	call print
  5902 00004768 59                  <2> 	pop ecx
  5903 00004769 E8F0EAFFFF          <2> 	call showdec
  5904 0000476E BE[36480000]        <2> 	mov esi, .msgtime
  5905 00004773 E8B3D5FFFF          <2> 	call print
  5906 00004778 C3                  <2> 	ret
  5907                              <2> 	
  5908                              <2> .stime:
  5909 00004779 F4                  <2> 	hlt
  5910 0000477A A1[60020000]        <2> 	mov eax, [timeseconds]
  5911 0000477F 8B1D[64020000]      <2> 	mov ebx, [timenanoseconds]
  5912 00004785 A3[45480000]        <2> 	mov [.time], eax
  5913 0000478A 891D[49480000]      <2> 	mov [.time + 4], ebx
  5914 00004790 C3                  <2> 	ret
  5915                              <2> 	
  5916                              <2> .etime:
  5917 00004791 A1[60020000]        <2> 	mov eax, [timeseconds]
  5918 00004796 8B1D[64020000]      <2> 	mov ebx, [timenanoseconds]
  5919 0000479C 8B0D[45480000]      <2> 	mov ecx, [.time]
  5920 000047A2 8B15[49480000]      <2> 	mov edx, [.time + 4]
  5921 000047A8 C1EA0A              <2> 	shr edx, 10
  5922 000047AB C1EB0A              <2> 	shr ebx, 10
  5923 000047AE 29C8                <2> 	sub eax, ecx
  5924 000047B0 3D00000000          <2> 	cmp eax, 0
  5925 000047B5 740E                <2> 	je .notclp
  5926                              <2> .tclp:
  5927 000047B7 81C340420F00        <2> 	add ebx, 1000000
  5928 000047BD 48                  <2> 	dec eax
  5929 000047BE 3D00000000          <2> 	cmp eax, 0
  5930 000047C3 75F2                <2> 	jne .tclp
  5931                              <2> .notclp:
  5932 000047C5 29D3                <2> 	sub ebx, edx
  5933 000047C7 C3                  <2> 	ret
  5934                              <2> 	
  5935                              <2> .st:
  5936 000047C8 6631C0              <2> 	xor ax, ax
  5937 000047CB 6631DB              <2> 	xor bx, bx
  5938 000047CE 668B0D[22570000]    <2> 	mov cx, [resolutiony]
  5939 000047D5 668B15[20570000]    <2> 	mov dx, [resolutionx]
  5940                              <2> .lp:
  5941 000047DC 60                  <2> 	pusha
  5942 000047DD E89A240000          <2> 	call drawline
  5943 000047E2 61                  <2> 	popa
  5944                              <2> .noswitch:
  5945 000047E3 47                  <2> 	inc edi
  5946 000047E4 6643                <2> 	inc bx
  5947 000047E6 664A                <2> 	dec dx
  5948 000047E8 6681FB0000          <2> 	cmp bx, 0
  5949 000047ED 74ED                <2> 	je .lp
  5950 000047EF 6681FA0000          <2> 	cmp dx, 0
  5951 000047F4 75E6                <2> 	jne .lp
  5952                              <2> .lp2:
  5953 000047F6 60                  <2> 	pusha
  5954 000047F7 E880240000          <2> 	call drawline
  5955 000047FC 61                  <2> 	popa
  5956 000047FD 47                  <2> 	inc edi
  5957 000047FE 6640                <2> 	inc ax
  5958 00004800 6649                <2> 	dec cx
  5959 00004802 6681F90000          <2> 	cmp cx, 0
  5960 00004807 75ED                <2> 	jne .lp2
  5961 00004809 C3                  <2> 	ret
  5962                              <2> 	
  5963 0000480A 6C696E657320776572- <2> .msg db "lines were drawn in ",0
  5964 00004813 6520647261776E2069- <2>
  5965 0000481C 6E2000              <2>
  5966 0000481F 636972636C65732077- <2> .msgcircle db "circles were drawn in ",0
  5967 00004828 65726520647261776E- <2>
  5968 00004831 20696E2000          <2>
  5969 00004836 6D6963726F7365636F- <2> .msgtime db "microseconds.",10,0
  5970 0000483F 6E64732E0A00        <2>
  5971 00004845 0000000000000000    <2> .time dd 0,0	
  5972                              <1> %endif
  5973                              <1> %include 'source/programs/logout.asm'
  5974 0000484D FF2C6C6F676F757400  <2> 	db 255,44,"logout",0
  5975 00004856 E99AE2FFFF          <2> 	jmp os
  5976                              <1> %include 'source/programs/loop.asm'
  5977 0000485B FF2C6C6F6F7000      <2> 	db 255,44,"loop",0
  5978 00004862 803D[61F40000]00    <2> 	cmp byte [LOOPON], 0
  5979 00004869 0F8501000000        <2> 	jne near filoop
  5980 0000486F C3                  <2> 	ret
  5981 00004870 8B35[62F40000]      <2> filoop: mov esi, [LOOPPOS]
  5982 00004876 FE0D[F7F30000]      <2> 	dec byte [IFON]
  5983 0000487C C605[61F40000]00    <2> 	mov byte [LOOPON], 0
  5984 00004883 8935[5CF40000]      <2> 	mov [BATCHPOS], esi
  5985 00004889 8935[93390000]      <2> 	mov [batchedi], esi
  5986 0000488F C3                  <2> 	ret 
  5987                              <1> %ifdef disk.none
  5988                              <1> %else
  5989                              <1> 	%include 'source/programs/ls.asm'
  5990 00004890 FF2C6C7300          <2> db 255,44,"ls",0
  5991 00004895 BE[9CD90000]        <2> 		mov esi, diskfileindex
  5992                              <2> 	diskindexdir:
  5993 0000489A 803E5F              <2> 		cmp byte [esi], '_'
  5994 0000489D 7440                <2> 		je nextdiskindexdir
  5995 0000489F E868D4FFFF          <2> 		call printquiet
  5996 000048A4 56                  <2> 		push esi
  5997 000048A5 BE[FF480000]        <2> 		mov esi, disktab
  5998 000048AA E85DD4FFFF          <2> 		call printquiet
  5999 000048AF 5E                  <2> 		pop esi
  6000 000048B0 8B4E05              <2> 		mov ecx, [esi + 5]
  6001 000048B3 C605[7F310000]05    <2> 		mov byte [firsthexshown], 5
  6002 000048BA E89FE9FFFF          <2> 		call showdec
  6003 000048BF 56                  <2> 		push esi
  6004 000048C0 BE[77890000]        <2> 		mov esi, line
  6005 000048C5 E842D4FFFF          <2> 		call printquiet
  6006 000048CA 5E                  <2> 		pop esi
  6007 000048CB 81C609000000        <2> 		add esi, 9
  6008 000048D1 81FE[9ADB0000]      <2> 		cmp esi, enddiskfileindex
  6009 000048D7 72C1                <2> 		jb diskindexdir
  6010 000048D9 E898DFFFFF          <2> 		call termcopy
  6011 000048DE C3                  <2> 		ret
  6012                              <2> 	nextdiskindexdir:
  6013 000048DF 46                  <2> 		inc esi
  6014 000048E0 803E00              <2> 		cmp byte [esi], 0
  6015 000048E3 75FA                <2> 		jne nextdiskindexdir
  6016 000048E5 81C609000000        <2> 		add esi, 9
  6017 000048EB 81FE[9ADB0000]      <2> 		cmp esi, enddiskfileindex
  6018 000048F1 72A7                <2> 		jb diskindexdir
  6019 000048F3 E87EDFFFFF          <2> 		call termcopy
  6020 000048F8 C3                  <2> 		ret
  6021                              <2> 		
  6022 000048F9 4469736B2000        <2> 		diskmsg db "Disk ",0
  6023 000048FF 0D09090900          <2> 		disktab db 13,9,9,9,0
  6024                              <1> %endif
  6025                              <1> %include 'source/programs/memory.asm'
  6026 00004904 FF2C6D656D6F727900  <2> db 255,44,"memory",0
  6027 0000490D BE[A2DB0000]        <2> 	mov esi, memlistbuf
  6028 00004912 31FF                <2> 	xor edi, edi
  6029 00004914 668B3D[E2DD0000]    <2> 	mov di, [memlistend]
  6030 0000491B 01F7                <2> 	add edi, esi
  6031                              <2> printmemmap:
  6032 0000491D 8B0E                <2> 	mov ecx, [esi]
  6033 0000491F E870E8FFFF          <2> 	call showhex
  6034 00004924 81C608000000        <2> 	add esi, 8
  6035 0000492A 8B0E                <2> 	mov ecx, [esi]
  6036 0000492C E863E8FFFF          <2> 	call showhex
  6037 00004931 81C608000000        <2> 	add esi, 8
  6038 00004937 8B0E                <2> 	mov ecx, [esi]
  6039 00004939 E856E8FFFF          <2> 	call showhex
  6040 0000493E 81C608000000        <2> 	add esi, 8
  6041 00004944 57                  <2> 	push edi
  6042 00004945 56                  <2> 	push esi
  6043 00004946 BE[77890000]        <2> 	mov esi, line
  6044 0000494B E8DBD3FFFF          <2> 	call print
  6045 00004950 5E                  <2> 	pop esi
  6046 00004951 5F                  <2> 	pop edi
  6047 00004952 39FE                <2> 	cmp esi, edi
  6048 00004954 72C7                <2> 	jb printmemmap
  6049 00004956 C3                  <2> 	ret
  6050                              <2> 	
  6051                              <1> %include 'source/programs/pci.asm'
  6052 00004957 FF2C70636900        <2> db 255,44,"pci",0
  6053 0000495D E8D8180000          <2> 	call pcidump
  6054 00004962 C3                  <2> 	ret 
  6055                              <1> %ifdef network.included
  6056                              <1> 	%include 'source/programs/ping.asm'
  6057 00004963 FF2C70696E6700      <2> db 255,44,"ping",0
  6058                              <2> ping:
  6059 0000496A 8B35[6D2F0000]      <2> 	mov esi, [currentcommandloc]
  6060 00004970 81C605000000        <2> 	add esi, 5
  6061 00004976 E8C83E0000          <2> 	call strtoip
  6062 0000497B 890D[064A0000]      <2> 	mov [.destip], ecx
  6063 00004981 E8033F0000          <2> 	call showip
  6064 00004986 8B0D[2C890000]      <2> 	mov ecx, [sysip]
  6065 0000498C 890D[024A0000]      <2> 	mov [.sourceip]. ecx
  6066 00004992 31C0                <2> 	xor eax, eax
  6067 00004994 31DB                <2> 	xor ebx, ebx
  6068 00004996 66A3[004A0000]      <2> 	mov [.checksum], ax
  6069 0000499C 66A3[0C4A0000]      <2> 	mov [.icmpchecksum], ax
  6070 000049A2 BF[F6490000]        <2> 	mov edi, .header
  6071 000049A7 BE[0A4A0000]        <2> 	mov esi, .headerend
  6072 000049AC E86A3E0000          <2> 	call getchecksum
  6073 000049B1 66890D[004A0000]    <2> 	mov [.checksum], cx
  6074 000049B8 BF[0A4A0000]        <2> 	mov edi, .icmp
  6075 000049BD BE[324A0000]        <2> 	mov esi, .packetend
  6076 000049C2 E8543E0000          <2> 	call getchecksum
  6077 000049C7 66890D[0C4A0000]    <2> 	mov [.icmpchecksum], cx
  6078 000049CE BF[E8490000]        <2> 	mov edi, .packet
  6079 000049D3 BE[324A0000]        <2> 	mov esi, .packetend
  6080 000049D8 E8343E0000          <2> 	call sendpacket
  6081 000049DD BE[77890000]        <2> 	mov esi, line
  6082 000049E2 E844D3FFFF          <2> 	call print
  6083 000049E7 C3                  <2> 	ret
  6084                              <2> 	
  6085                              <2> 	
  6086                              <2> 	
  6087                              <2> .packet:
  6088 000049E8 FFFFFFFFFFFF        <2> .destinationmac db 0xFF,0xFF,0xFF,0xFF,0xFF,0xFF
  6089 000049EE 000000000000        <2> .sourcemac	db 0,0,0,0,0,0
  6090 000049F4 0800                <2> .ethertype	db 8,0	;ip is 0x800
  6091                              <2> .header:
  6092 000049F6 45                  <2> .version	db 0x45
  6093 000049F7 00                  <2> .services	db 0
  6094 000049F8 003C                <2> .length	db 0,0x3C
  6095 000049FA 0000                <2> .id		dw 0
  6096 000049FC 00                  <2> .flags	db 0
  6097 000049FD 00                  <2> .fragment db 0
  6098 000049FE 80                  <2> .ttl	db 128
  6099 000049FF 01                  <2> .protocol db 1 ;ICMP
  6100 00004A00 0000                <2> .checksum dw 0
  6101 00004A02 00000000            <2> .sourceip dd 0
  6102 00004A06 00000000            <2> .destip dd 0
  6103                              <2> .headerend:
  6104                              <2> .icmp:
  6105 00004A0A 08                  <2> .icmptype db 8 ;Ping request
  6106 00004A0B 00                  <2> .icmpcode db 0
  6107 00004A0C 0000                <2> .icmpchecksum dw 0
  6108 00004A0E 0001                <2> .icmpid db 0,1
  6109 00004A10 0000                <2> .sequence dw 0
  6110 00004A12 616263646566676869- <2> db "abcdefghijklmnopqrstuvwabcdefghi" ;this is what microsoft includes
  6111 00004A1B 6A6B6C6D6E6F707172- <2>
  6112 00004A24 737475767761626364- <2>
  6113 00004A2D 6566676869          <2>
  6114                              <2> .packetend:
  6115                              <1> %endif
  6116                              <1> %ifdef disk.none
  6117                              <1> %else
  6118                              <1> 	%include 'source/programs/play.asm'
  6119 00004A32 FF2C706C61796100    <2> db 255,44,"playa",0
  6120 00004A3A 8B3D[6D2F0000]      <2> 	mov edi, [currentcommandloc]
  6121 00004A40 81C706000000        <2> 	add edi, 6
  6122 00004A46 E827000000          <2> 	call playasync
  6123 00004A4B C3                  <2> 	ret
  6124 00004A4C FF2C706C617900      <2> db 255,44,"play",0
  6125                              <2> play:
  6126 00004A53 8B3D[6D2F0000]      <2> 	mov edi, [currentcommandloc]
  6127 00004A59 81C705000000        <2> 	add edi, 5
  6128 00004A5F E80E000000          <2> 	call playasync
  6129                              <2> .waitforsound:
  6130                              <2> %ifdef sound.included
  6131                              <2> 	mov eax, [Length0]
  6132                              <2> 	or ax, [Length1]
  6133                              <2> %endif
  6134 00004A64 0A05[68020000]      <2> 	or al, [soundon]
  6135 00004A6A 3D00000000          <2> 	cmp eax, 0
  6136 00004A6F 75F3                <2> 	jne .waitforsound
  6137 00004A71 C3                  <2> 	ret
  6138                              <2> playasync:
  6139 00004A72 BE0000C000          <2> 	mov esi, 0xC00000
  6140 00004A77 E8F31A0000          <2> 	call loadfile
  6141 00004A7C 81FA94010000        <2> 	cmp edx, 404
  6142 00004A82 743F                <2> 	je nosoundfound
  6143 00004A84 BB0000C000          <2> 	mov ebx, 0xC00000
  6144 00004A89 817B0857415645      <2> 	cmp dword [ebx + 8], "WAVE"
  6145 00004A90 0F845A000000        <2> 	je near wave_player
  6146 00004A96 66813B534E          <2> 	cmp word [ebx], "SN"
  6147 00004A9B 7526                <2> 	jne nosoundfound
  6148 00004A9D 81C306000000        <2> 	add ebx, 6
  6149 00004AA3 891D[6B020000]      <2> 	mov [soundpos], ebx
  6150 00004AA9 035BFC              <2> 	add ebx, [ebx - 4]
  6151 00004AAC 891D[6F020000]      <2> 	mov [soundendpos], ebx
  6152 00004AB2 66C705[69020000]00- <2> 	mov word [soundrepititions], 0
  6153 00004ABA 00                  <2>
  6154 00004ABB C605[68020000]01    <2> 	mov byte [soundon], 1
  6155 00004AC2 C3                  <2> 	ret
  6156                              <2> nosoundfound:
  6157 00004AC3 BE[E94A0000]        <2> 	mov esi, notfoundsound
  6158 00004AC8 E85ED2FFFF          <2> 	call print
  6159 00004ACD 8B35[6D2F0000]      <2> 	mov esi, [currentcommandloc]
  6160 00004AD3 81C605000000        <2> 	add esi, 5
  6161 00004AD9 E84DD2FFFF          <2> 	call print
  6162 00004ADE BE[46890000]        <2> 	mov esi, notfound2
  6163 00004AE3 E843D2FFFF          <2> 	call print
  6164 00004AE8 C3                  <2> 	ret
  6165 00004AE9 706C61793A2000      <2> notfoundsound db "play: ",0
  6166                              <2> 
  6167                              <2> %ifdef sound.included
  6168                              <2> sbplay:
  6169                              <2> 		mov esi, 0xC00000
  6170                              <2> 		mov ebx, esi
  6171                              <2> 		add esi, WAVSTART
  6172                              <2> 		sub edi, esi
  6173                              <2> 		mov [Length1], di
  6174                              <2> 		shr edi, 15
  6175                              <2> 		mov [Length0], edi
  6176                              <2> 		mov ecx, [ebx + 24]
  6177                              <2> 		mov [Freq], ecx
  6178                              <2> 		xor eax, eax
  6179                              <2> 		mov	edx, 0xC00000 ;physical location of sound
  6180                              <2> 		add edx, WAVSTART
  6181                              <2> 		add	eax, edx
  6182                              <2> 		mov esi, eax
  6183                              <2> 		xor ecx, ecx
  6184                              <2> 		xor ebx, ebx
  6185                              <2> 		mov [SegLoc], bx
  6186                              <2> 		add ebx, 0x80000
  6187                              <2> 		mov cx, 0xFFFF
  6188                              <2> 		cmp di, 0
  6189                              <2> 		jne .autoinit
  6190                              <2> 		mov cx, [Length1]
  6191                              <2> 		mov byte [OddLength], 1
  6192                              <2> 		cmp cx, 32768
  6193                              <2> 		jae .autoinit
  6194                              <2> 		mov byte [OddLength], 0
  6195                              <2> 		shl cx, 1
  6196                              <2> 		inc edi
  6197                              <2> .autoinit:
  6198                              <2> 		dec edi
  6199                              <2> 		mov [Length0], edi
  6200                              <2> 		mov [Length1], cx
  6201                              <2> 		shr cx, 1
  6202                              <2> 		inc cx
  6203                              <2> 		add eax, ecx
  6204                              <2> 		mov [NextMemLoc], eax
  6205                              <2> 		mov	[MemLoc], esi
  6206                              <2> 		call DMACopy
  6207                              <2> 		xor ebx, ebx
  6208                              <2> 		mov bx, [SegLoc]
  6209                              <2> 		xor ecx, ecx
  6210                              <2> 		mov cx, [Length1]
  6211                              <2> 		shr cx, 1
  6212                              <2> 		inc cx
  6213                              <2> 		add ebx, ecx
  6214                              <2> 		mov [SegLoc], bx
  6215                              <2> 		add ebx, 0x80000
  6216                              <2> 		mov esi, [NextMemLoc]
  6217                              <2> 		mov eax, esi
  6218                              <2> 		add eax, ecx
  6219                              <2> 		mov [NextMemLoc], eax
  6220                              <2> 		mov	[MemLoc], esi
  6221                              <2> 		call DMACopy
  6222                              <2> 		call DMAPlay
  6223                              <2> 		call PlayDSP
  6224                              <2> 		ret
  6225                              <2> WAVSTART equ 64;44
  6226                              <2> wave_player:
  6227                              <2> 	cmp byte [SoundBlaster], 1
  6228                              <2> 	je near sbplay
  6229                              <2> 	mov esi, nosoundblaster
  6230                              <2> 	call print
  6231                              <2> 	ret
  6232                              <2> %else
  6233                              <2> 	wave_player:
  6234 00004AF0 BE[FB4A0000]        <2> 		mov esi, nosoundblaster
  6235 00004AF5 E831D2FFFF          <2> 		call print
  6236 00004AFA C3                  <2> 		ret
  6237                              <2> %endif
  6238 00004AFB 4E6F20536F756E6420- <2> nosoundblaster db "No Sound Blaster detected.",10,0
  6239 00004B04 426C61737465722064- <2>
  6240 00004B0D 657465637465642E0A- <2>
  6241 00004B16 00                  <2>
  6242                              <1> %endif
  6243                              <1> %include 'source/programs/pwd.asm'
  6244 00004B17 FF2C70776400        <2> db 255,44,"pwd",0
  6245 00004B1D BE[F2F10000]        <2> 	mov esi, currentfolder
  6246 00004B22 E8E5D1FFFF          <2> 	call printquiet
  6247 00004B27 BE[77890000]        <2> 	mov esi, line
  6248 00004B2C E8FAD1FFFF          <2> 	call print
  6249 00004B31 C3                  <2> 	ret
  6250                              <2> 	
  6251                              <1> %include 'source/programs/reboot.asm'
  6252 00004B32 FF2C7265626F6F7400  <2> 	db 255,44,"reboot",0
  6253 00004B3B 0F011D[454B0000]    <2> 		lidt [idtreboot]
  6254 00004B42 CD00                <2> 		int 0
  6255 00004B44 F4                  <2> 		hlt
  6256                              <2> 	
  6257 00004B45 0000                <2> 	idtreboot dw 0
  6258 00004B47 00000000            <2> 			  dd 0
  6259                              <2> 
  6260                              <2> 	coldboot:
  6261 00004B4B 66B84000            <2> 		MOV AX, 0040h
  6262 00004B4F 8EC0                <2> 		MOV ES, AX
  6263 00004B51 2666C7057200000000- <2> 		MOV WORD [ES:00072h], 0h
  6264 00004B5A 00                  <2>
  6265 00004B5B EA00000000FFFF      <2> 		JMP 0FFFFh:0000h
  6266 00004B62 CF                  <2> 		IRET
  6267                              <2> 
  6268                              <2> 	warmboot:
  6269 00004B63 66B84000            <2> 		MOV AX, 0040h
  6270 00004B67 8EC0                <2> 		MOV ES, AX
  6271 00004B69 2666C7057200000034- <2> 		MOV WORD [ES:00072h], 01234h
  6272 00004B72 12                  <2>
  6273 00004B73 EA00000000FFFF      <2> 		JMP 0FFFFh:0000h
  6274 00004B7A CF                  <2> 		IRET
  6275                              <2> 		
  6276                              <1> %include 'source/programs/reg.asm'
  6277 00004B7B FF2C72656700        <2> db 255,44,"reg",0
  6278 00004B81 CD03                <2> 	int 3
  6279 00004B83 C3                  <2> 	ret 
  6280                              <1> %ifdef disk.none
  6281                              <1> %else
  6282                              <1> 	%include 'source/programs/show.asm'
  6283 00004B84 FF2C73686F7700      <2> db 255,44,"show",0
  6284                              <2> showprog:
  6285 00004B8B 8B3D[6D2F0000]      <2> 		mov edi, [currentcommandloc]
  6286 00004B91 81C705000000        <2> 		add edi, 5
  6287 00004B97 BE00004000          <2> 		mov esi, 0x400000
  6288 00004B9C 803F26              <2> 		cmp byte [edi], '&'
  6289 00004B9F 741B                <2> 		je .nullfile
  6290 00004BA1 BE00008000          <2> 		mov esi, 0x800000
  6291 00004BA6 E8C4190000          <2> 		call loadfile
  6292 00004BAB 81FA94010000        <2> 		cmp edx, 404
  6293 00004BB1 0F8483000000        <2> 		je near filenotfound
  6294 00004BB7 BE00008000          <2> 		mov esi, 0x800000
  6295                              <2> .nullfile:
  6296                              <2> %ifdef gui.included
  6297 00004BBC 66813E424D          <2> 		cmp word [esi], "BM"
  6298 00004BC1 7410                <2> 		je bmpfound
  6299                              <2> %endif
  6300 00004BC3 E863D1FFFF          <2> 		call print
  6301 00004BC8 BE[77890000]        <2> 		mov esi, line
  6302 00004BCD E859D1FFFF          <2> 		call print
  6303 00004BD2 C3                  <2> 		ret
  6304                              <2> %ifdef gui.included
  6305                              <2> bmpfound:
  6306 00004BD3 803D[9CDB0000]00    <2> 		cmp byte [guion], 0
  6307 00004BDA 0F8428000000        <2> 		je near noguibmp
  6308 00004BE0 BE00008000          <2> 		mov esi, 0x800000
  6309 00004BE5 31C9                <2> 		xor ecx, ecx
  6310 00004BE7 31D2                <2> 		xor edx, edx
  6311 00004BE9 31C0                <2> 		xor eax, eax
  6312 00004BEB 31DB                <2> 		xor ebx, ebx
  6313 00004BED E8411B0000          <2> 		call showbmp
  6314 00004BF2 30C0                <2> 		xor al, al
  6315 00004BF4 B405                <2> 		mov ah, 5
  6316 00004BF6 CD30                <2> 		int 30h
  6317 00004BF8 E8AB210000          <2> 		call guiclear
  6318 00004BFD E88A1E0000          <2> 		call clearmousecursor
  6319 00004C02 E8F1210000          <2> 		call reloadallgraphics
  6320 00004C07 C3                  <2> 		ret
  6321                              <2> noguibmp:
  6322 00004C08 BE[134C0000]        <2> 		mov esi, warnguimsg
  6323 00004C0D E819D1FFFF          <2> 		call print
  6324 00004C12 C3                  <2> 		ret
  6325 00004C13 546869732063616E20- <2> warnguimsg db "This can not be done without the GUI.",10,0
  6326 00004C1C 6E6F7420626520646F- <2>
  6327 00004C25 6E6520776974686F75- <2>
  6328 00004C2E 742074686520475549- <2>
  6329 00004C37 2E0A00              <2>
  6330                              <2> %endif
  6331                              <2> 
  6332                              <2> filenotfound:
  6333 00004C3A BE[6D4C0000]        <2> 		mov esi, filenf
  6334 00004C3F E8E7D0FFFF          <2> 		call print
  6335 00004C44 8B35[6D2F0000]      <2> 		mov esi, [currentcommandloc]
  6336                              <2> findfilenotfoundzero:
  6337 00004C4A 8A06                <2> 		mov al, [esi]
  6338 00004C4C 46                  <2> 		inc esi
  6339 00004C4D 3C00                <2> 		cmp al, 0
  6340 00004C4F 7411                <2> 		je nofilenamenotfound
  6341 00004C51 81FE[660C0100]      <2> 		cmp esi, buftxtend
  6342 00004C57 7309                <2> 		jae nofilenamenotfound
  6343 00004C59 3C20                <2> 		cmp al, " "
  6344 00004C5B 75ED                <2> 		jne findfilenotfoundzero
  6345 00004C5D E8C9D0FFFF          <2> 		call print
  6346                              <2> nofilenamenotfound:
  6347 00004C62 BE[784C0000]        <2> 		mov esi, filenf2
  6348 00004C67 E8BFD0FFFF          <2> 		call print
  6349 00004C6C C3                  <2> 		ret
  6350 00004C6D 5468652066696C6520- <2> filenf db "The file ",34,0
  6351 00004C76 2200                <2>
  6352 00004C78 2220636F756C64206E- <2> filenf2 db 34," could not be found.",10,0
  6353 00004C81 6F7420626520666F75- <2>
  6354 00004C8A 6E642E0A00          <2>
  6355                              <1> %endif
  6356                              <1> %include 'source/programs/shush.asm'
  6357 00004C8F FF2C736875736800    <2> db 255,44,"shush",0	;if you add 2 values it will switch size using the first as X in chars and the second as Y in chars
  6358                              <2> shushprog:
  6359                              <2> %ifdef gui.included
  6360 00004C97 803D[9CDB0000]00    <2> 	cmp byte [guion], 0
  6361 00004C9E 0F84B9000000        <2> 	je near .noswitchsize
  6362 00004CA4 8B35[6D2F0000]      <2> 	mov esi, [currentcommandloc]
  6363 00004CAA 81C606000000        <2> 	add esi, 6
  6364 00004CB0 56                  <2> 	push esi
  6365 00004CB1 4E                  <2> 	dec esi
  6366                              <2> .findspace:
  6367 00004CB2 46                  <2> 	inc esi
  6368 00004CB3 8A06                <2> 	mov al, [esi]
  6369 00004CB5 3C00                <2> 	cmp al, 0
  6370 00004CB7 0F84A0000000        <2> 	je near .noswitchsize
  6371 00004CBD 3C58                <2> 	cmp al, "X"
  6372 00004CBF 7408                <2> 	je .donefind
  6373 00004CC1 3C78                <2> 	cmp al, "x"
  6374 00004CC3 7404                <2> 	je .donefind
  6375 00004CC5 3C20                <2> 	cmp al, " "
  6376 00004CC7 75E9                <2> 	jne .findspace
  6377                              <2> .donefind:
  6378 00004CC9 30C0                <2> 	xor al, al
  6379 00004CCB 8806                <2> 	mov [esi], al
  6380 00004CCD 46                  <2> 	inc esi
  6381 00004CCE 89F7                <2> 	mov edi, esi
  6382 00004CD0 E86BE6FFFF          <2> 	call cnvrttxt
  6383 00004CD5 89C8                <2> 	mov eax, ecx
  6384 00004CD7 5E                  <2> 	pop esi
  6385 00004CD8 50                  <2> 	push eax
  6386 00004CD9 89F7                <2> 	mov edi, esi
  6387 00004CDB E860E6FFFF          <2> 	call cnvrttxt
  6388 00004CE0 89CB                <2> 	mov ebx, ecx
  6389 00004CE2 58                  <2> 	pop eax	
  6390 00004CE3 6681FB0000          <2> 	cmp bx, 0
  6391 00004CE8 0F846F000000        <2> 	je near .noswitchsize
  6392 00004CEE 663D0000            <2> 	cmp ax, 0
  6393 00004CF2 0F8465000000        <2> 	je near .noswitchsize
  6394 00004CF8 66C1E303            <2> 	shl bx, 3
  6395 00004CFC 66C1E004            <2> 	shl ax, 4
  6396 00004D00 663B1D[20570000]    <2> 	cmp bx, [resolutionx]
  6397 00004D07 7607                <2> 	jbe .nofixx
  6398 00004D09 668B1D[20570000]    <2> 	mov bx, [resolutionx]
  6399                              <2> .nofixx:
  6400 00004D10 66051000            <2> 	add ax, 16
  6401 00004D14 663B05[22570000]    <2> 	cmp ax, [resolutiony]
  6402 00004D1B 7606                <2> 	jbe .nofixy
  6403 00004D1D 66A1[22570000]      <2> 	mov ax, [resolutiony]
  6404                              <2> .nofixy:
  6405 00004D23 662D1000            <2> 	sub ax, 16
  6406 00004D27 6631C9              <2> 	xor cx, cx
  6407 00004D2A 6631D2              <2> 	xor dx, dx
  6408 00004D2D 66891D[96710000]    <2> 	mov [termwindow], bx
  6409 00004D34 66A3[98710000]      <2> 	mov [termwindow + 2], ax	;the previous lines of code make a large terminal window that is 4 characters smaller than the screen
  6410 00004D3A BE[96710000]        <2> 	mov esi, termwindow
  6411 00004D3F 31DB                <2> 	xor ebx, ebx
  6412 00004D41 6631C0              <2> 	xor ax, ax
  6413 00004D44 E87A290000          <2> 	call showwindow
  6414 00004D49 E85A200000          <2> 	call guiclear
  6415 00004D4E E881D0FFFF          <2> 	call clear
  6416 00004D53 E8A0200000          <2> 	call reloadallgraphics
  6417 00004D58 E8E71D0000          <2> 	call switchmousepos2
  6418                              <2> .noswitchsize:
  6419                              <2> %endif
  6420 00004D5D BE[684D0000]        <2> 	mov esi, shushmsg
  6421 00004D62 E8C4CFFFFF          <2> 	call print
  6422 00004D67 C3                  <2> 	ret
  6423 00004D68 57656C636F6D652074- <2> 	shushmsg db "Welcome to the SollerOS Hardly Unix-Compatible Shell!",10,0
  6424 00004D71 6F2074686520536F6C- <2>
  6425 00004D7A 6C65724F5320486172- <2>
  6426 00004D83 646C7920556E69782D- <2>
  6427 00004D8C 436F6D70617469626C- <2>
  6428 00004D95 65205368656C6C210A- <2>
  6429 00004D9E 00                  <2>
  6430                              <1> %include 'source/programs/system.asm'
  6431 00004D9F FF2C73797374656D00  <2> 	db 255,44,"system",0
  6432 00004DA8 BE[A54E0000]        <2> 	mov esi, kernelinfomsg
  6433 00004DAD E85ACFFFFF          <2> 	call printquiet
  6434 00004DB2 B9[9CD90000]        <2> 	mov ecx, osend
  6435 00004DB7 E8A2E4FFFF          <2> 	call showdec
  6436 00004DBC BE[BA4E0000]        <2> 	mov esi, diskbytemsg
  6437 00004DC1 E846CFFFFF          <2> 	call printquiet
  6438 00004DC6 B9[9CD90000]        <2> 	mov ecx, osend
  6439 00004DCB 81C1[1CCA0200]      <2> 	add ecx, commandbufend
  6440 00004DD1 81E9[9CDB0000]      <2> 	sub ecx, bssstart	;add the extra buffer space
  6441 00004DD7 E882E4FFFF          <2> 	call showdec
  6442 00004DDC BE[D14E0000]        <2> 	mov esi, membytemsg
  6443 00004DE1 E826CFFFFF          <2> 	call printquiet
  6444 00004DE6 BE[1C4F0000]        <2> 	mov esi, endofmemmsg
  6445 00004DEB E81CCFFFFF          <2> 	call printquiet
  6446 00004DF0 B9[30FE1200]        <2> 	mov ecx, bssend
  6447 00004DF5 E89AE3FFFF          <2> 	call showhex
  6448 00004DFA BE[EA4E0000]        <2> 	mov esi, systeminfomsg
  6449 00004DFF E808CFFFFF          <2> 	call printquiet
  6450                              <2> getcpuspeed:
  6451 00004E04 B8FE000000          <2> 	mov eax, 0xFE
  6452 00004E09 E621                <2> 	out 0x21, al ;mask off all but timer interrupt
  6453 00004E0B B020                <2> 	mov al, 0x20
  6454 00004E0D E620                <2> 	out 0x20, al
  6455 00004E0F F4                  <2> 	hlt
  6456 00004E10 0F31                <2> 	rdtsc
  6457 00004E12 89D6                <2> 	mov esi, edx
  6458 00004E14 89C7                <2> 	mov edi, eax
  6459 00004E16 31C0                <2> 	xor eax, eax
  6460 00004E18 C605[49020000]01    <2> 	mov byte [testingcpuspeed], 1
  6461                              <2> cpuspeedloop:	;wait until next timer interrupt, then inc eax until the next
  6462 00004E1F 40                  <2> 	inc eax
  6463 00004E20 EBFD                <2> 	jmp cpuspeedloop
  6464                              <2> cpuspeedloopend:
  6465 00004E22 0F31                <2> 	rdtsc
  6466 00004E24 29F8                <2> 	sub eax, edi
  6467 00004E26 29F2                <2> 	sub edx, esi
  6468 00004E28 8915[52020000]      <2> 	mov [cpuclocksperint + 4], edx
  6469 00004E2E A3[4E020000]        <2> 	mov [cpuclocksperint], eax
  6470 00004E33 31C0                <2> 	xor eax, eax
  6471 00004E35 E621                <2> 	out 0x21, al
  6472 00004E37 B020                <2> 	mov al, 0x20
  6473 00004E39 E620                <2> 	out 0x20, al
  6474 00004E3B 31D2                <2> 	xor edx, edx
  6475 00004E3D 31C0                <2> 	xor eax, eax
  6476 00004E3F A1[4A020000]        <2> 	mov eax, [cpuspeedperint]
  6477 00004E44 D1E0                <2> 	shl eax, 1	;the cpu speed loop actually contains 2 commands so multiply the
  6478                              <2> 				;result by 2
  6479 00004E46 8B1D[5C020000]      <2> 	mov ebx, [timeinterval]
  6480 00004E4C C1EB0A              <2> 	shr ebx, 10 ;divide the interval by 1024
  6481 00004E4F F7F3                <2> 	div ebx	;quotient in eax, remainder in edx
  6482 00004E51 89C1                <2> 	mov ecx, eax
  6483 00004E53 E806E4FFFF          <2> 	call showdec
  6484 00004E58 BE[004F0000]        <2> 	mov esi, cpuspeedmsg
  6485 00004E5D E8AACEFFFF          <2> 	call printquiet
  6486 00004E62 31D2                <2> 	xor edx, edx
  6487 00004E64 A1[4E020000]        <2> 	mov eax, [cpuclocksperint]
  6488 00004E69 8B15[52020000]      <2> 	mov edx, [cpuclocksperint + 4]
  6489 00004E6F 8B1D[5C020000]      <2> 	mov ebx, [timeinterval]
  6490 00004E75 C1EB0A              <2> 	shr ebx, 10
  6491 00004E78 F7F3                <2> 	div ebx
  6492 00004E7A 89C1                <2> 	mov ecx, eax
  6493 00004E7C E8DDE3FFFF          <2> 	call showdec
  6494 00004E81 BE[064F0000]        <2> 	mov esi, cpuclockmsg
  6495 00004E86 E881CEFFFF          <2> 	call printquiet
  6496 00004E8B 8B0D[56020000]      <2> 	mov ecx, [memoryspace]
  6497 00004E91 C1E914              <2> 	shr ecx, 20
  6498 00004E94 41                  <2> 	inc ecx	;the reading is one MB behind
  6499 00004E95 E8C4E3FFFF          <2> 	call showdec
  6500 00004E9A BE[0B4F0000]        <2> 	mov esi, memoryspacemsg
  6501 00004E9F E887CEFFFF          <2> 	call print
  6502                              <2> %ifdef sound.included
  6503                              <2> 	cmp byte [SoundBlaster], 0
  6504                              <2> 	je .nosb
  6505                              <2> 	mov esi, soundblastermsg
  6506                              <2> 	call print
  6507                              <2> .nosb:
  6508                              <2> %endif
  6509 00004EA4 C3                  <2> 	ret
  6510                              <2> 
  6511 00004EA5 4B65726E656C20496E- <2> kernelinfomsg db "Kernel Information:",10,0
  6512 00004EAE 666F726D6174696F6E- <2>
  6513 00004EB7 3A0A00              <2>
  6514 00004EBA 427974657320446973- <2> diskbytemsg db "Bytes Disk Space Used",10,0
  6515 00004EC3 6B2053706163652055- <2>
  6516 00004ECC 7365640A00          <2>
  6517 00004ED1 4279746573204D656D- <2> membytemsg db "Bytes Memory Space Used",10,0
  6518 00004EDA 6F7279205370616365- <2>
  6519 00004EE3 20557365640A00      <2>
  6520 00004EEA 0A53797374656D2049- <2> systeminfomsg db 10,"System Information:",10,0
  6521 00004EF3 6E666F726D6174696F- <2>
  6522 00004EFC 6E3A0A00            <2>
  6523                              <2> %ifdef sound.included
  6524                              <2> 	soundblastermsg db "Soundblaster Detected.",10,0
  6525                              <2> %endif
  6526 00004F00 4D4950530A00        <2> cpuspeedmsg db "MIPS",10,0
  6527 00004F06 4D487A0A00          <2> cpuclockmsg db "MHz",10,0
  6528 00004F0B 4D42204D656D6F7279- <2> memoryspacemsg db "MB Memory Space",10,0
  6529 00004F14 2053706163650A00    <2>
  6530 00004F1C 456E64206F66204D65- <2> endofmemmsg: db "End of Memory Space: 0x",0
  6531 00004F25 6D6F72792053706163- <2>
  6532 00004F2E 653A20307800        <2>
  6533                              <1> %include 'source/programs/time.asm'
  6534 00004F34 082E30303030303030- <2> timenscache db 8,".000000000"
  6535 00004F3D 3030                <2>
  6536 00004F3F 200A00              <2> timenscacheend: db " ",10,0
  6537 00004F42 00                  <2> istimeset db 0
  6538 00004F43 456E74657220746865- <2> settimemsg db "Enter the current UNIX time:",10,0
  6539 00004F4C 2063757272656E7420- <2>
  6540 00004F55 554E49582074696D65- <2>
  6541 00004F5E 3A0A00              <2>
  6542 00004F61 00<rept>            <2> timeinputbuffer times 12 db 0
  6543 00004F6D 00                  <2> timeinputbend: db 0
  6544                              <2> 
  6545 00004F6E FF2C74696D6500      <2> db 255,44,"time",0
  6546 00004F75 803D[424F0000]00    <2> 	cmp byte [istimeset], 0
  6547 00004F7C 753A                <2> 	jne timeisset
  6548 00004F7E BE[434F0000]        <2> 	mov esi, settimemsg
  6549 00004F83 E8A3CDFFFF          <2> 	call print
  6550 00004F88 BE[614F0000]        <2> 	mov esi, timeinputbuffer
  6551 00004F8D BF[6D4F0000]        <2> 	mov edi, timeinputbend
  6552 00004F92 E8BBCEFFFF          <2> 	call readline
  6553 00004F97 BE[614F0000]        <2> 	mov esi, timeinputbuffer
  6554 00004F9C 31FF                <2> 	xor edi, edi
  6555 00004F9E E89DE3FFFF          <2> 	call cnvrttxt
  6556 00004FA3 890D[60020000]      <2> 	mov [timeseconds], ecx
  6557 00004FA9 31C9                <2> 	xor ecx, ecx
  6558 00004FAB 890D[64020000]      <2> 	mov [timenanoseconds], ecx
  6559 00004FB1 C605[424F0000]01    <2> 	mov byte [istimeset], 1
  6560                              <2> timeisset:
  6561 00004FB8 8B0D[60020000]      <2> 	mov ecx, [timeseconds]
  6562 00004FBE E89BE2FFFF          <2> 	call showdec
  6563                              <2> 	
  6564 00004FC3 8B0D[64020000]      <2> 	mov ecx, [timenanoseconds]
  6565 00004FC9 BE[344F0000]        <2> 	mov esi, timenscache
  6566 00004FCE C7460230303030      <2> 	mov dword [esi+ 2], "0000"
  6567 00004FD5 C7460630303030      <2> 	mov dword [esi + 6], "0000"
  6568 00004FDC C6460A30            <2> 	mov byte [esi + 10], "0"
  6569 00004FE0 BE[3F4F0000]        <2> 	mov esi, timenscacheend
  6570 00004FE5 E857E0FFFF          <2> 	call convert
  6571 00004FEA BE[344F0000]        <2> 	mov esi, timenscache
  6572 00004FEF E818CDFFFF          <2> 	call printquiet
  6573                              <2> 	
  6574 00004FF4 E82D000000          <2> 	call time
  6575 00004FF9 BE[F2510000]        <2> 	mov esi, timeshow
  6576 00004FFE E809CDFFFF          <2> 	call printquiet
  6577 00005003 BE[77890000]        <2> 	mov esi, line
  6578 00005008 E8FFCCFFFF          <2> 	call printquiet
  6579 0000500D BE[FB510000]        <2> 	mov esi, dateshow
  6580 00005012 E8F5CCFFFF          <2> 	call printquiet
  6581 00005017 BE[77890000]        <2> 	mov esi, line
  6582 0000501C E8EBCCFFFF          <2> 	call printquiet
  6583 00005021 E9BC000000          <2> 	jmp findday
  6584                              <2> time:
  6585 00005026 E84F010000          <2> 	call tstackput1
  6586 0000502B B00A                <2> 	mov al,10			;Get RTC register A
  6587 0000502D E879010000          <2> 	call tget1
  6588 00005032 A880                <2> 	test al,0x80			;Is update in progress?
  6589 00005034 75F0                <2> 	jne time				; yes, wait
  6590                              <2> 
  6591 00005036 B000                <2> 	mov al,0			;Get seconds (00 to 59)
  6592 00005038 E86E010000          <2> 	call tget1
  6593 0000503D A2[E9510000]        <2> 	mov [RTCtimeSecond],al
  6594                              <2> 
  6595 00005042 B002                <2> 	mov al,0x02			;Get minutes (00 to 59)
  6596 00005044 E862010000          <2> 	call tget1
  6597 00005049 A2[EA510000]        <2> 	mov [RTCtimeMinute],al
  6598                              <2> 
  6599 0000504E B004                <2> 	mov al,0x04			;Get hours (see notes)
  6600 00005050 E856010000          <2> 	call tget1
  6601 00005055 A2[EB510000]        <2> 	mov [RTCtimeHour],al
  6602                              <2> 
  6603 0000505A B007                <2> 	mov al,0x07			;Get day of month (01 to 31)
  6604 0000505C E84A010000          <2> 	call tget1
  6605 00005061 A2[EC510000]        <2> 	mov [RTCtimeDay],al
  6606                              <2> 
  6607 00005066 B008                <2> 	mov al,0x08			;Get month (01 to 12)
  6608 00005068 E83E010000          <2> 	call tget1
  6609 0000506D A2[ED510000]        <2> 	mov [RTCtimeMonth],al
  6610                              <2> 
  6611 00005072 B009                <2> 	mov al,0x09			;Get year (00 to 99)
  6612 00005074 E832010000          <2> 	call tget1
  6613 00005079 A2[EE510000]        <2> 	mov [RTCtimeYear],al
  6614                              <2> 	
  6615 0000507E BE[F2510000]        <2> 	mov esi, timeshow
  6616 00005083 8A2D[EB510000]      <2> 	mov ch, [RTCtimeHour]
  6617 00005089 E828010000          <2> 	call tput1
  6618 0000508E 8A2D[EA510000]      <2> 	mov ch, [RTCtimeMinute]
  6619 00005094 E81D010000          <2> 	call tput1
  6620 00005099 8A2D[E9510000]      <2> 	mov ch, [RTCtimeSecond]
  6621 0000509F E812010000          <2> 	call tput1
  6622 000050A4 BE[FB510000]        <2> 	mov esi, dateshow
  6623 000050A9 8A2D[ED510000]      <2> 	mov ch, [RTCtimeMonth]
  6624 000050AF E802010000          <2> 	call tput1
  6625 000050B4 8A2D[EC510000]      <2> 	mov ch, [RTCtimeDay]
  6626 000050BA E8F7000000          <2> 	call tput1
  6627 000050BF B520                <2> 	mov ch, 0x20
  6628 000050C1 E8F0000000          <2> 	call tput1
  6629 000050C6 4E                  <2> 	dec esi
  6630 000050C7 8A2D[EE510000]      <2> 	mov ch, [RTCtimeYear]
  6631 000050CD E8E4000000          <2> 	call tput1
  6632 000050D2 E8BD000000          <2> 	call tstackget1
  6633 000050D7 C3                  <2> 	ret
  6634 000050D8 BE[F2510000]        <2> 	mov esi, timeshow
  6635 000050DD E849CCFFFF          <2> 	call print
  6636                              <2> ;;get day of week
  6637                              <2> ;;add these:
  6638                              <2> ;;century value
  6639                              <2> ;;last 2 digits of year
  6640                              <2> ;;last 2 digits of year right shifted twice
  6641                              <2> ;;month table value
  6642                              <2> ;;day of the month
  6643                              <2> ;;divide these by 7
  6644                              <2> ;;the remainder is the day
  6645                              <2> findday:
  6646 000050E2 31C0                <2> 	xor eax, eax
  6647                              <2> ;;first convert the values from BCD to hex
  6648 000050E4 A0[EC510000]        <2> 	mov al, [RTCtimeDay]
  6649 000050E9 E873000000          <2> 	call converttohex
  6650 000050EE 8825[EF510000]      <2> 	mov [dayhex], ah
  6651 000050F4 A0[ED510000]        <2> 	mov al, [RTCtimeMonth]
  6652 000050F9 E863000000          <2> 	call converttohex
  6653 000050FE 8825[F0510000]      <2> 	mov [monthhex], ah
  6654 00005104 A0[EE510000]        <2> 	mov al, [RTCtimeYear]
  6655 00005109 E853000000          <2> 	call converttohex
  6656 0000510E 8825[F1510000]      <2> 	mov [yearhex], ah
  6657 00005114 31C0                <2> 	xor eax, eax
  6658 00005116 A0[F1510000]        <2> 	mov al, [yearhex]
  6659 0000511B C0E802              <2> 	shr al, 2
  6660 0000511E 0205[F1510000]      <2> 	add al, [yearhex]
  6661 00005124 0506000000          <2> 	add eax, 6
  6662 00005129 31DB                <2> 	xor ebx, ebx
  6663 0000512B 8A1D[F0510000]      <2> 	mov bl, [monthhex]
  6664 00005131 FECB                <2> 	dec bl
  6665 00005133 81C3[10520000]      <2> 	add ebx, month
  6666 00005139 31C9                <2> 	xor ecx, ecx
  6667 0000513B 8A0B                <2> 	mov cl, [ebx]
  6668 0000513D 01C8                <2> 	add eax, ecx
  6669 0000513F 8A0D[EF510000]      <2> 	mov cl, [dayhex]
  6670 00005145 01C8                <2> 	add eax, ecx
  6671 00005147 66BB0700            <2> 	mov bx, 7
  6672 0000514B 31D2                <2> 	xor edx, edx
  6673 0000514D 66F7F3              <2> 	div bx
  6674 00005150 C1E202              <2> 	shl edx, 2
  6675 00005153 81C2[1C520000]      <2> 	add edx, day
  6676 00005159 8B32                <2> 	mov esi, [edx]
  6677 0000515B E8CBCBFFFF          <2> 	call print
  6678 00005160 C3                  <2> 	ret
  6679                              <2> 	
  6680                              <2> converttohex:
  6681 00005161 88C4                <2> 	mov ah, al
  6682 00005163 C0E804              <2> 	shr al, 4
  6683 00005166 C0E404              <2> 	shl ah, 4
  6684 00005169 C0EC04              <2> 	shr ah, 4
  6685 0000516C 3C00                <2> 	cmp al, 0
  6686 0000516E 7409                <2> 	je noconverttohex
  6687                              <2> converttohexlp:
  6688 00005170 80C40A              <2> 	add ah, 10
  6689 00005173 FEC8                <2> 	dec al
  6690 00005175 3C00                <2> 	cmp al, 0
  6691 00005177 75F7                <2> 	jne converttohexlp
  6692                              <2> noconverttohex:
  6693 00005179 C3                  <2> 	ret
  6694                              <2> 	
  6695                              <2> tstackput1:
  6696 0000517A 8935[E5510000]      <2> 	mov [tstack + 20], esi
  6697 00005180 BE[D1510000]        <2> 	mov esi, tstack
  6698 00005185 8906                <2> 	mov [esi], eax
  6699 00005187 895E04              <2> 	mov [esi + 4], ebx
  6700 0000518A 894E08              <2> 	mov [esi + 8], ecx
  6701 0000518D 89560C              <2> 	mov [esi + 12], edx
  6702 00005190 897E10              <2> 	mov [esi + 16], edi
  6703 00005193 C3                  <2> 	ret
  6704                              <2> 	
  6705                              <2> tstackget1:
  6706 00005194 BE[D1510000]        <2> 	mov esi, tstack
  6707 00005199 8B06                <2> 	mov eax, [esi]
  6708 0000519B 8B5E04              <2> 	mov ebx, [esi + 4]
  6709 0000519E 8B4E08              <2> 	mov ecx, [esi + 8]
  6710 000051A1 8B560C              <2> 	mov edx, [esi + 12]
  6711 000051A4 8B7E10              <2> 	mov edi, [esi + 16]
  6712 000051A7 8B7614              <2> 	mov esi, [esi + 20]
  6713 000051AA C3                  <2> 	ret
  6714                              <2> 	
  6715                              <2> tget1:
  6716 000051AB 66BA7000            <2> 	mov dx, 0x70
  6717 000051AF EE                  <2> 	out dx, al
  6718 000051B0 6642                <2> 	inc dx
  6719 000051B2 EC                  <2> 	in al, dx
  6720 000051B3 664A                <2> 	dec dx
  6721 000051B5 C3                  <2> 	ret
  6722                              <2> 	
  6723                              <2> tput1:
  6724 000051B6 66C1E904            <2> 	shr cx, 4
  6725 000051BA B030                <2> 	mov al, 48
  6726 000051BC 00E8                <2> 	add al, ch
  6727 000051BE 8806                <2> 	mov [esi], al
  6728 000051C0 46                  <2> 	inc esi
  6729 000051C1 B030                <2> 	mov al, 48
  6730 000051C3 C0E904              <2> 	shr cl, 4
  6731 000051C6 00C8                <2> 	add al, cl
  6732 000051C8 8806                <2> 	mov [esi], al
  6733 000051CA 81C602000000        <2> 	add esi, 2
  6734 000051D0 C3                  <2> 	ret
  6735                              <2> 		
  6736 000051D1 000000000000000000- <2> 	tstack dd 0,0,0,0,0,0
  6737 000051DA 000000000000000000- <2>
  6738 000051E3 000000000000        <2>
  6739 000051E9 00                  <2> 	RTCtimeSecond db 0
  6740 000051EA 00                  <2> 	RTCtimeMinute db 0
  6741 000051EB 00                  <2> 	RTCtimeHour db 0
  6742 000051EC 00                  <2> 	RTCtimeDay db 0
  6743 000051ED 00                  <2> 	RTCtimeMonth db 0
  6744 000051EE 00                  <2> 	RTCtimeYear db 0
  6745 000051EF 00                  <2> 	dayhex db 0
  6746 000051F0 00                  <2> 	monthhex db 0
  6747 000051F1 00                  <2> 	yearhex db 0
  6748 000051F2 30303A30303A303000  <2> 	timeshow db "00:00:00",0
  6749 000051FB 30302D30302D303030- <2> 	dateshow db "00-00-0000 ",0
  6750 00005204 302000              <2>
  6751                              <2> 	oldcentury:	;;from 1700 to 1900
  6752 00005207 040200              <2> 	db 4,2,0
  6753                              <2> 	century:	;;from 2000 to 2500
  6754 0000520A 060402000604        <2> 	db 6,4,2,0,6,4
  6755                              <2> 	month:
  6756 00005210 000303060104060205- <2> 	db 0,3,3,6,1,4,6,2,5,0,3,5
  6757 00005219 000305              <2>
  6758                              <2> 	day:
  6759 0000521C [38520000]          <2> 	dd sunday
  6760 00005220 [40520000]          <2> 	dd monday
  6761 00005224 [48520000]          <2> 	dd tuesday
  6762 00005228 [51520000]          <2> 	dd wednesday
  6763 0000522C [5C520000]          <2> 	dd thursday
  6764 00005230 [66520000]          <2> 	dd friday
  6765 00005234 [6E520000]          <2> 	dd saturday
  6766                              <2> sunday:
  6767 00005238 53756E6461790A00    <2> 	db "Sunday",10,0
  6768                              <2> monday:
  6769 00005240 4D6F6E6461790A00    <2> 	db "Monday",10,0
  6770                              <2> tuesday:
  6771 00005248 547565736461790A00  <2> 	db "Tuesday",10,0
  6772                              <2> wednesday:
  6773 00005251 5765646E6573646179- <2> 	db "Wednesday",10,0
  6774 0000525A 0A00                <2>
  6775                              <2> thursday:
  6776 0000525C 54687572736461790A- <2> 	db "Thursday",10,0
  6777 00005265 00                  <2>
  6778                              <2> friday:
  6779 00005266 4672696461790A00    <2> 	db "Friday",10,0
  6780                              <2> saturday:
  6781 0000526E 53617475726461790A- <2> 	db "Saturday",10,0
  6782 00005277 00                  <2>
  6783                              <1> %include 'source/programs/turnoff.asm'
  6784 00005278 FF2C7475726E6F6666- <2> 	db 255,44,"turnoff",0
  6785 00005281 00                  <2>
  6786                              <2> 	turnoff:
  6787 00005282 66BB[9D52]          <2> 			mov bx, shutdown
  6788 00005286 66891D[D70C0000]    <2> 			mov [realmodeptr], bx
  6789 0000528D BB[C7520000]        <2> 			mov ebx, halt
  6790 00005292 891D[D30C0000]      <2> 			mov [realmodereturn], ebx
  6791 00005298 E91FB9FFFF          <2> 			jmp realmode
  6792                              <2> 
  6793                              <2> [BITS 16]
  6794                              <2> 		shutdown:
  6795 0000529D B453                <2> 			mov ah, 0x53
  6796 0000529F B004                <2> 			mov al, 4
  6797 000052A1 31DB                <2> 			xor bx, bx
  6798 000052A3 CD15                <2> 			int 0x15
  6799                              <2> 			
  6800 000052A5 B453                <2> 			mov ah, 0x53
  6801 000052A7 B001                <2> 			mov al, 1
  6802 000052A9 31DB                <2> 			xor bx, bx
  6803 000052AB CD15                <2> 			int 0x15
  6804                              <2> 			
  6805 000052AD B453                <2> 			mov ah, 0x53
  6806 000052AF B008                <2> 			mov al, 8
  6807 000052B1 BB0100              <2> 			mov bx, 1
  6808 000052B4 B90100              <2> 			mov cx, 1
  6809 000052B7 CD15                <2> 			int 0x15
  6810                              <2> 			
  6811 000052B9 B453                <2> 			mov ah, 0x53
  6812 000052BB B007                <2> 			mov al, 7
  6813 000052BD BB0100              <2> 			mov bx, 1
  6814 000052C0 B90300              <2> 			mov cx, 3
  6815 000052C3 CD15                <2> 			int 0x15
  6816 000052C5 EBFE                <2> 			jmp $
  6817                              <2> 			[BITS 32]
  6818 000052C7 EBFE                <2> halt: jmp $
  6819                              <1> %include 'source/programs/wait.asm'
  6820 000052C9 FF2C7761697400      <2> db 255,44,"wait",0
  6821                              <2> waitkey:
  6822 000052D0 E84BD0FFFF          <2> 		call getchar
  6823 000052D5 C3                  <2> 		ret
  6824                              <1> %include 'source/programs/while.asm'
  6825 000052D6 FF2C7768696C6500    <2> db 255,44,"while",0
  6826 000052DE 30C0                <2> whilecmd:  xor al, al
  6827 000052E0 3805[60F40000]      <2> 	cmp [BATCHISON], al
  6828 000052E6 0F847FE7FFFF        <2> 	je near notbatch
  6829 000052EC 8B35[5CF40000]      <2> 	mov esi, [BATCHPOS]
  6830 000052F2 81EE02000000        <2> 	sub esi, 2
  6831 000052F8 4E                  <2> whilefnd: dec esi
  6832 000052F9 8A06                <2> 	mov al, [esi]
  6833 000052FB 3C0A                <2> 	cmp al, 10
  6834 000052FD 0F840A000000        <2> 	je near whilefnd2
  6835 00005303 3C00                <2> 	cmp al, 0
  6836 00005305 0F8402000000        <2> 	je near whilefnd2
  6837 0000530B EBEB                <2> 	jmp whilefnd
  6838                              <2> whilefnd2:
  6839 0000530D 46                  <2> 	inc esi
  6840 0000530E 8935[62F40000]      <2> 	mov [LOOPPOS], esi
  6841 00005314 C605[61F40000]01    <2> 	mov BYTE [LOOPON], 1
  6842 0000531B BE[66080100]        <2> 	mov esi, buftxt
  6843 00005320 BB[66080100]        <2> 	mov ebx, buftxt
  6844 00005325 81C306000000        <2> 	add ebx, 6
  6845 0000532B E92CF2FFFF          <2> 	jmp chkeqsn
  6846                              <1> progend:		;programs end here	
  6847                              <1> batchprogend:
  6848                                  	%include "source/hardware.asm"
  6849                              <1> %ifdef gui.included
  6850                              <1> 	%include "source/drivers/video/vesa.asm"
  6851                              <2> [BITS 16]
  6852                              <2> guiswitch:
  6853 00005330 81F90000            <2> 	cmp cx, 0
  6854 00005334 750B                <2> 	jne guiswitchdefnum
  6855 00005336 B81200              <2> 	mov ax, 12h
  6856 00005339 31DB                <2> 	xor bx, bx
  6857 0000533B CD10                <2> 	int 10h
  6858 0000533D E85100              <2> 	call guiloadagain
  6859                              <2> guiswitchnocando:
  6860 00005340 C3                  <2> 	ret	;return without switching as mode number is bad
  6861                              <2> guiswitchdefnum:	;switch to a defined mode number
  6862 00005341 B8004F              <2> 	mov ax, 0x4F00
  6863 00005344 BF[0E55]            <2> 	mov di, VBEMODEBLOCK
  6864 00005347 CD10                <2> 	int 10h
  6865 00005349 BE[3055]            <2> 	mov si, reserved
  6866 0000534C 81EE0200            <2> 	sub si, 2
  6867                              <2> .loop:
  6868 00005350 81C60200            <2> 	add si, 2
  6869 00005354 81FE[0E56]          <2> 	cmp si, oemdata
  6870 00005358 74E6                <2> 	je guiswitchnocando
  6871 0000535A 813CFFFF            <2> 	cmp word [si], 0xFFFF
  6872 0000535E 74E0                <2> 	je guiswitchnocando
  6873 00005360 390C                <2> 	cmp [si], cx
  6874 00005362 75EC                <2> 	jne .loop
  6875 00005364 8936[6854]          <2> 	mov [videomodecache], si
  6876 00005368 81C90040            <2> 	or cx, 0x4000	;make sure linear frame buffer is selected
  6877 0000536C B8014F              <2> 	mov ax, 0x4F01
  6878 0000536F BF[0E57]            <2> 	mov di, VBEMODEINFOBLOCK
  6879 00005372 890E[6654]          <2> 	mov [vesamode], cx
  6880 00005376 CD10                <2> 	int 10h
  6881 00005378 E9CB00              <2> 	jmp selectedvesa
  6882                              <2> guiload:
  6883 0000537B BE[E654]            <2> 	mov si, bootmsg
  6884 0000537E E8F9AC              <2> 	call printrm
  6885 00005381 31C0                <2> 	xor ax, ax
  6886 00005383 CD16                <2> 	int 16h
  6887 00005385 3C79                <2> 	cmp al, "y"
  6888 00005387 0F85A9AC            <2> 	jne near vgaset
  6889 0000538B BE[7689]            <2> 	mov si, crlf
  6890 0000538E E8E9AC              <2> 	call printrm
  6891                              <2> guiloadagain:
  6892 00005391 B8004F              <2> 	mov ax, 04F00h
  6893 00005394 BF[0E55]            <2> 	mov di, VBEMODEBLOCK
  6894 00005397 CD10                <2> 	int 10h
  6895 00005399 BE[3055]            <2> 	mov si, reserved
  6896 0000539C 81EE0200            <2> 	sub si, 2
  6897                              <2> findvideomodes:
  6898 000053A0 81C60200            <2> 	add si, 2
  6899 000053A4 8B0C                <2> 	mov cx, [si]
  6900 000053A6 81F9FFFF            <2> 	cmp cx, 0xFFFF
  6901 000053AA 0F840A00            <2> 	je near nextvmode
  6902 000053AE 81FE[0E56]          <2> 	cmp si, oemdata
  6903 000053B2 0F837EAC            <2> 	jae near vgaset	;;kill if no valid list is found
  6904 000053B6 EBE8                <2> 	jmp findvideomodes 	
  6905                              <2> ;;debug,shows vmodes available
  6906                              <2> nextvmode:
  6907 000053B8 81EE0200            <2> 	sub si, 2
  6908 000053BC 81FE[3055]          <2> 	cmp si, reserved
  6909 000053C0 0F82CDFF            <2> 	jb near guiloadagain
  6910 000053C4 8B0C                <2> 	mov cx, [si]
  6911 000053C6 81F9FFFF            <2> 	cmp cx, 0xFFFF
  6912 000053CA 0F84EAFF            <2> 	je near nextvmode
  6913 000053CE 81C90040            <2> 	or cx, 0x4000 		;;Linear Frame Buffer
  6914 000053D2 B8014F              <2> 	mov ax, 04F01h
  6915 000053D5 BF[0E57]            <2> 	mov di, VBEMODEINFOBLOCK
  6916 000053D8 890E[6654]          <2> 	mov [vesamode], cx
  6917 000053DC CD10                <2> 	int 10h
  6918 000053DE A0[2757]            <2> 	mov al, [bitsperpixel]
  6919 000053E1 3C10                <2> 	cmp al, 16
  6920 000053E3 75D3                <2> 	jne nextvmode
  6921 000053E5 8936[6854]          <2> 	mov [videomodecache], si
  6922 000053E9 84E4                <2> 	test ah, ah
  6923 000053EB 0F842200            <2> 	jz near setvesamode
  6924 000053EF EBC7                <2> 	jmp nextvmode
  6925 000053F1 0A0D49732074686973- <2> isthisvideook db 10,13,"Is this video mode OK?(y/n)",13,10,0
  6926 000053FA 20766964656F206D6F- <2>
  6927 00005403 6465204F4B3F28792F- <2>
  6928 0000540C 6E290D0A00          <2>
  6929                              <2> setvesamode:
  6930 00005411 8B0E[2057]          <2> 	mov cx, [resolutionx]
  6931 00005415 E85900              <2> 	call decshow
  6932 00005418 B078                <2> 	mov al, "x"
  6933 0000541A E8C100              <2> 	call char
  6934 0000541D 8B0E[2257]          <2> 	mov cx, [resolutiony]
  6935 00005421 E84D00              <2> 	call decshow
  6936 00005424 B040                <2> 	mov al, "@"
  6937 00005426 E8B500              <2> 	call char
  6938 00005429 31C9                <2> 	xor cx, cx
  6939 0000542B 8A0E[2757]          <2> 	mov cl, [bitsperpixel]
  6940 0000542F E83F00              <2> 	call decshow
  6941 00005432 BE[F153]            <2> 	mov si, isthisvideook
  6942 00005435 E842AC              <2> 	call printrm
  6943 00005438 31C0                <2> 	xor ax, ax
  6944 0000543A CD16                <2> 	int 16h
  6945 0000543C 8B36[6854]          <2> 	mov si, [videomodecache]
  6946 00005440 3C79                <2> 	cmp al, "y"
  6947 00005442 0F8572FF            <2> 	jne near nextvmode
  6948                              <2> selectedvesa:
  6949 00005446 8B16[2057]          <2> 	mov dx, [resolutionx]
  6950 0000544A 01D2                <2> 	add dx, dx
  6951 0000544C 8916[0E58]          <2> 	mov [resolutionx2], dx
  6952 00005450 31D2                <2> 	xor dx, dx
  6953 00005452 31C9                <2> 	xor cx, cx
  6954 00005454 B8024F              <2> 	mov ax, 04F02h
  6955 00005457 8B1E[6654]          <2> 	mov bx, [vesamode]
  6956 0000545B CD10                <2> 	int 10h		;;enter VESA mode
  6957 0000545D C606[9CDB]01        <2> 	mov byte [guion], 1
  6958 00005462 E8DFAB              <2> 	call getmemorysize;get the memory map after the video is initialized
  6959 00005465 C3                  <2> 	ret
  6960                              <2> 	
  6961 00005466 0000                <2> vesamode dw 0
  6962 00005468 0000                <2> videomodecache dw 0
  6963                              <2> 
  6964 0000546A 0000000000          <2> dcnm db 0,0,0,0,0
  6965 0000546F 0000                <2> dcnmend db 0,0
  6966                              <2> 
  6967                              <2> 
  6968                              <2> decshow:
  6969 00005471 BE[6A54]            <2> 	mov si, dcnm
  6970                              <2> decclear:
  6971 00005474 B030                <2> 	mov al, "0"
  6972 00005476 8804                <2> 	mov [si], al
  6973 00005478 46                  <2> 	inc si
  6974 00005479 81FE[6F54]          <2> 	cmp si, dcnmend
  6975 0000547D 76F5                <2> 	jbe decclear
  6976 0000547F 4E                  <2> 	dec si
  6977 00005480 E81500              <2> 	call convertrm
  6978 00005483 BE[6A54]            <2> 	mov si, dcnm
  6979                              <2> dectst:
  6980 00005486 8A04                <2> 	mov al, [si]
  6981 00005488 46                  <2> 	inc si
  6982 00005489 81FE[6F54]          <2> 	cmp si, dcnmend
  6983 0000548D 7704                <2> 	ja dectstend
  6984 0000548F 3C30                <2> 	cmp al, "0"
  6985 00005491 76F3                <2> 	jbe dectst
  6986                              <2> dectstend:
  6987 00005493 4E                  <2> 	dec si
  6988 00005494 E8E3AB              <2> 	call printrm
  6989 00005497 C3                  <2> 	ret
  6990                              <2> 	
  6991                              <2> 	
  6992                              <2> convertrm:
  6993 00005498 4E                  <2> 	dec si
  6994 00005499 89F3                <2> 	mov bx, si		;place to convert into must be in si, number to convert must be in cx
  6995                              <2> cnvrtrm:
  6996 0000549B 89DE                <2> 	mov si, bx
  6997 0000549D 81EE0300            <2> 	sub si, 3
  6998 000054A1 46                  <2> ten3rm:	inc si
  6999 000054A2 81F9E803            <2> 	cmp cx, 1000
  7000 000054A6 7208                <2> 	jb ten2rm
  7001 000054A8 81E9E803            <2> 	sub cx, 1000
  7002 000054AC FE04                <2> 	inc byte [si]
  7003 000054AE EBEB                <2> 	jmp cnvrtrm
  7004 000054B0 46                  <2> ten2rm:	inc si
  7005 000054B1 81F96400            <2> 	cmp cx, 100
  7006 000054B5 7208                <2> 	jb ten1rm
  7007 000054B7 81E96400            <2> 	sub cx, 100
  7008 000054BB FE04                <2> 	inc byte [si]
  7009 000054BD EBDC                <2> 	jmp cnvrtrm
  7010 000054BF 46                  <2> ten1rm:	inc si
  7011 000054C0 81F90A00            <2> 	cmp cx, 10
  7012 000054C4 7208                <2> 	jb ten0rm
  7013 000054C6 81E90A00            <2> 	sub cx, 10
  7014 000054CA FE04                <2> 	inc byte [si]
  7015 000054CC EBCD                <2> 	jmp cnvrtrm
  7016 000054CE 46                  <2> ten0rm:	inc si
  7017 000054CF 81F90100            <2> 	cmp cx, 1
  7018 000054D3 7208                <2> 	jb tendnrm
  7019 000054D5 81E90100            <2> 	sub cx, 1
  7020 000054D9 FE04                <2> 	inc byte [si]
  7021 000054DB EBBE                <2> 	jmp cnvrtrm
  7022                              <2> tendnrm:
  7023 000054DD C3                  <2> 	ret
  7024                              <2> 
  7025                              <2>     char: 		    ;char must be in al
  7026 000054DE BB0700              <2>        mov bx, 07
  7027 000054E1 B40E                <2> 	   mov ah, 0Eh
  7028 000054E3 CD10                <2> 	   int 10h
  7029 000054E5 C3                  <2> 	   ret
  7030                              <2> 
  7031 000054E6 426F6F7420696E746F- <2> bootmsg:	db "Boot into the GUI?(y/n)",0
  7032 000054EF 20746865204755493F- <2>
  7033 000054F8 28792F6E2900        <2>
  7034                              <2> 
  7035                              <2> 
  7036                              <2> mcursor:
  7037 000054FE 01                  <2> 	db	00000001b
  7038 000054FF 81                  <2> 	db	10000001b
  7039 00005500 C1                  <2> 	db	11000001b
  7040 00005501 E1                  <2> 	db	11100001b
  7041 00005502 F1                  <2> 	db	11110001b
  7042 00005503 F9                  <2> 	db	11111001b
  7043 00005504 FD                  <2> 	db	11111101b
  7044 00005505 FF                  <2> 	db	11111111b
  7045 00005506 F9                  <2> 	db	11111001b
  7046 00005507 B9                  <2> 	db	10111001b
  7047 00005508 39                  <2> 	db	00111001b
  7048 00005509 1C                  <2> 	db	00011100b
  7049 0000550A 1C                  <2> 	db	00011100b
  7050 0000550B 0E                  <2> 	db	00001110b
  7051 0000550C 0E                  <2> 	db	00001110b
  7052 0000550D 0C                  <2> 	db	00001100b
  7053                              <2> mcursorend:
  7054                              <2> 
  7055                              <2> 
  7056                              <2> VBEMODEBLOCK:
  7057 0000550E 00<rept>            <2> vbesignature 		times  4 db 0 	;VBE Signature
  7058 00005512 00<rept>            <2> vbeversion  		times  2 db 0	;VBE Version
  7059 00005514 00<rept>            <2> oemstringptr  		times  4 db 0	;Pointer to OEM String
  7060 00005518 00<rept>            <2> capabilities 		times  4 db 0	;Capabilities of graphics cont.
  7061 0000551C 00<rept>            <2> videomodeptr 		times  4 db 0	;Pointer to Video Mode List
  7062 00005520 00<rept>            <2> totalmemory   		times  2 db 0	;number of 64Kb memory blocks
  7063 00005522 00<rept>            <2> oemsoftwarerev  	times  2 db 0	;VBE implementation Software revision
  7064 00005524 00<rept>            <2> oemvendornameptr 	times  4 db 0	;Pointer to Vendor Name String
  7065 00005528 00<rept>            <2> oemproductnameptr 	times  4 db 0	;Pointer to Product Name String
  7066 0000552C 00<rept>            <2> oemproductrevptr 	times  4 db 0	;Pointer to Product Revision String
  7067 00005530 00<rept>            <2> reserved			times  222 db 0	;Reserved for VBE implementation scratch area
  7068 0000560E 00<rept>            <2> oemdata 			times  256 db 0	;Data Area for OEM Strings
  7069                              <2> 
  7070                              <2> VBEMODEINFOBLOCK:
  7071                              <2> ;Mandatory information for all VBE revision
  7072 0000570E 00<rept>            <2> modeattributes   	times  2 db 0	;Mode attributes
  7073 00005710 00                  <2> winaattributes   	times  1 db 0	;Window A attributes
  7074 00005711 00                  <2> winbattributes   	times  1 db 0	;Window B attributes
  7075 00005712 00<rept>            <2> wingranularity   	times  2 db 0	;Window granularity
  7076 00005714 00<rept>            <2> winsize          	times  2 db 0	;Window size
  7077 00005716 00<rept>            <2> winasegment      	times  2 db 0	;Window A start segment
  7078 00005718 00<rept>            <2> winbsegment      	times  2 db 0	;Window B start segment
  7079 0000571A 00<rept>            <2> winfuncptr       	times  4 db 0	;pointer to window function
  7080 0000571E 00<rept>            <2> bytesperscanline 	times  2 db 0	;Bytes per scan line
  7081                              <2> 
  7082                              <2> ;Mandatory information for VBE 1.2 and above
  7083 00005720 00<rept>            <2> resolutionx     	times  2 db 0	;Horizontal resolution in pixel or chars
  7084 00005722 00<rept>            <2> resolutiony	    	times  2 db 0	;Vertical resolution in pixel or chars
  7085 00005724 00                  <2> xcharsize       	times  1 db 0	;Character cell width in pixel
  7086 00005725 00                  <2> ycharsize       	times  1 db 0	;Character cell height in pixel
  7087 00005726 00                  <2> numberofplanes  	times  1 db 0	;Number of memory planes
  7088 00005727 00                  <2> bitsperpixel    	times  1 db 0	;Bits per pixel
  7089 00005728 00                  <2> numberofbanks   	times  1 db 0	;Number of banks
  7090 00005729 00                  <2> memorymodel     	times  1 db 0	;Memory model type
  7091 0000572A 00                  <2> banksize        	times  1 db 0	;Bank size in KB
  7092 0000572B 00                  <2> numberofimagepages	times  1 db 0	;Number of images
  7093 0000572C 00                  <2> reserved1       	times  1 db 0	;Reserved for page function
  7094                              <2> 
  7095                              <2> ;Direct Color fields (required for direct/6 and YUV/7 memory models)
  7096 0000572D 00                  <2> redmasksize			times  1 db 0	;Size of direct color red mask in bits
  7097 0000572E 00                  <2> redfieldposition	times  1 db 0	;Bit position of lsb of red bask
  7098 0000572F 00                  <2> greenmasksize   	times  1 db 0	;Size of direct color green mask in bits
  7099 00005730 00                  <2> greenfieldposition	times  1 db 0	;Bit position of lsb of green bask
  7100 00005731 00                  <2> bluemasksize		times  1 db 0	;Size of direct color blue mask in bits
  7101 00005732 00                  <2> bluefieldposition	times  1 db 0	;Bit position of lsb of blue bask
  7102 00005733 00                  <2> rsvdmasksize        times  1 db 0		;Size of direct color reserved mask in bits
  7103 00005734 00                  <2> rsvdfieldposition	times  1 db 0		;Bit position of lsb of reserved bask
  7104 00005735 00                  <2> directcolormodeinfo	times  1 db 0	;Direct color mode attributes
  7105                              <2> 
  7106                              <2> ;Mandatory information for VBE 2.0 and above
  7107 00005736 00<rept>            <2> physbaseptr 		times  4 db 0	;Physical address for flat frame buffer
  7108 0000573A 00<rept>            <2> offscreenmemoffset 	times  4 db 0	;Pointer to start of off screen memory
  7109 0000573E 00<rept>            <2> offscreenmemsize 	times  2 db 0    ;Amount of off screen memory in 1Kb units
  7110 00005740 00<rept>            <2> reserved2 			times  206 db 0  ;Remainder of ModeInfoBlock
  7111                              <2> 
  7112 0000580E 00000000            <2> resolutionx2 dd 0	;this is not part of the VBE but is necessary GUI info
  7113                              <2> VBEEND:
  7114                              <2> [BITS 32]
  7115                              <1> 	%include "source/drivers/input/mouse.asm"
  7116 00005812 00                  <2> mousedisabled db 0
  7117                              <2> 	
  7118                              <2> 	cursorgui:
  7119 00005813 803D[69840000]01    <2> 		cmp byte [mouseon], 1
  7120 0000581A 0F8432000000        <2> 		je near mousedaemon
  7121 00005820 803D[9CDB0000]00    <2> 		cmp byte [guion], 0
  7122 00005827 0F84D2040000        <2> 		je near entdown
  7123                              <2> 	initmouse:
  7124 0000582D 803D[9CDB0000]00    <2> 		cmp byte [guion], 0
  7125 00005834 7405                <2> 		je noswmsposinit
  7126 00005836 E809130000          <2> 		call switchmousepos2
  7127                              <2> 	noswmsposinit:
  7128 0000583B E85D020000          <2> 	  	call PS2SET
  7129 00005840 E886020000          <2> 		call ACTMOUS
  7130 00005845 C605[69840000]01    <2> 		mov byte [mouseon],1
  7131 0000584C E89F020000          <2> 		call GETB 	;;Get the responce byte of the mouse (like: Hey i am active)
  7132                              <2> 		;call GETB
  7133                              <2> 				;;If the bytes are mixed up,
  7134                              <2> 				;;remove this line or add another of this line.
  7135                              <2> 	nomouse:
  7136 00005851 C3                  <2> 		ret
  7137                              <2> 		
  7138                              <2> 	mousedaemon:
  7139 00005852 803D[69840000]01    <2> 		cmp byte [mouseon], 1
  7140 00005859 75D2                <2> 		jne initmouse
  7141 0000585B E464                <2> 		in al, 64h ; Status
  7142 0000585D A820                <2> 		test al, 20h ; PS2-Mouse?
  7143 0000585F 0F8502000000        <2> 		jnz near moused
  7144 00005865 F4                  <2> 		hlt
  7145 00005866 C3                  <2> 		ret
  7146                              <2> 	moused:
  7147 00005867 803D[12580000]01    <2> 		cmp byte [mousedisabled], 1
  7148 0000586E 74E1                <2> 		je nomouse
  7149 00005870 E87B020000          <2> 		  call GETB
  7150 00005875 88C3                <2> 		  mov  bl, al
  7151 00005877 80E301              <2> 		  and  bl, 1
  7152 0000587A 881D[155B0000]      <2> 		  mov  BYTE [LBUTTON], bl
  7153 00005880 88C3                <2> 		  mov  bl, al
  7154 00005882 80E302              <2> 		  and  bl, 2
  7155 00005885 D0EB                <2> 		  shr  bl, 1
  7156 00005887 881D[165B0000]      <2> 		  mov  BYTE [RBUTTON], bl
  7157 0000588D 88C3                <2> 		  mov  bl, al
  7158 0000588F 80E304              <2> 		  and  bl, 4
  7159 00005892 C0EB02              <2> 		  shr  bl, 2
  7160 00005895 881D[175B0000]      <2> 		  mov  BYTE [MBUTTON], bl
  7161 0000589B E850020000          <2> 		  call GETB
  7162 000058A0 A2[185B0000]        <2> 		  mov  BYTE [XCOORD], al
  7163 000058A5 E846020000          <2> 		  call GETB
  7164 000058AA A2[195B0000]        <2> 		  mov  BYTE [YCOORD], al
  7165                              <2> 
  7166                              <2> 	showpixelcursor:
  7167 000058AF 668B15[045A0000]    <2> 		mov dx, [mousecursorposition]
  7168 000058B6 668B0D[065A0000]    <2> 		mov cx, [mousecursorposition + 2]
  7169 000058BD 668915[005A0000]    <2> 		mov [lastmouseposition], dx
  7170 000058C4 66890D[025A0000]    <2> 		mov [lastmouseposition + 2], cx
  7171 000058CB A0[185B0000]        <2> 		mov al, [XCOORD]
  7172 000058D0 3C80                <2> 		cmp al, 128
  7173 000058D2 730C                <2> 		jae subxcoord
  7174 000058D4 00C0                <2> 		add al, al
  7175 000058D6 30E4                <2> 		xor ah, ah
  7176 000058D8 6601C2              <2> 		add dx, ax
  7177 000058DB E90B000000          <2> 		jmp subxcoorddn
  7178                              <2> 	subxcoord:
  7179 000058E0 00C0                <2> 		add al, al
  7180 000058E2 30DB                <2> 		xor bl, bl
  7181 000058E4 28C3                <2> 		sub bl, al
  7182 000058E6 30FF                <2> 		xor bh, bh
  7183 000058E8 6629DA              <2> 		sub dx, bx
  7184                              <2> 	subxcoorddn:
  7185 000058EB 8A1D[195B0000]      <2> 		mov bl, [YCOORD]
  7186 000058F1 30C0                <2> 		xor al, al
  7187 000058F3 28D8                <2> 		sub al, bl
  7188 000058F5 3C80                <2> 		cmp al, 128
  7189 000058F7 730A                <2> 		jae subycoord
  7190 000058F9 30E4                <2> 		xor ah, ah
  7191 000058FB 6601C1              <2> 		add cx, ax
  7192 000058FE E909000000          <2> 		jmp subycoorddn
  7193                              <2> 	subycoord:
  7194 00005903 30DB                <2> 		xor bl, bl
  7195 00005905 28C3                <2> 		sub bl, al
  7196 00005907 30FF                <2> 		xor bh, bh
  7197 00005909 6629D9              <2> 		sub cx, bx
  7198                              <2> 	subycoorddn:
  7199 0000590C 6681FA204E          <2> 		cmp dx, 20000
  7200 00005911 7603                <2> 		jbe nooriginx2
  7201 00005913 6631D2              <2> 		xor dx, dx
  7202                              <2> 	nooriginx2:
  7203 00005916 6681F9204E          <2> 		cmp cx, 20000
  7204 0000591B 7603                <2> 		jbe nooriginy2
  7205 0000591D 6631C9              <2> 		xor cx, cx
  7206                              <2> 	nooriginy2:
  7207 00005920 6681FA0000          <2> 		cmp dx, 0
  7208 00005925 7415                <2> 		je nofixxcolumn2
  7209 00005927 663B15[0E580000]    <2> 		cmp dx, [resolutionx2]
  7210 0000592E 720C                <2> 		jb nofixxcolumn2
  7211 00005930 668B15[0E580000]    <2> 		mov dx, [resolutionx2]
  7212 00005937 6681EA0200          <2> 		sub dx, 2
  7213                              <2> 	nofixxcolumn2:
  7214 0000593C 6681F90000          <2> 		cmp cx, 0
  7215 00005941 7415                <2> 		je nofixyrow2
  7216 00005943 663B0D[22570000]    <2> 		cmp cx, [resolutiony]
  7217 0000594A 720C                <2> 		jb nofixyrow2
  7218 0000594C 668B0D[22570000]    <2> 		mov cx, [resolutiony]
  7219 00005953 6681E90100          <2> 		sub cx, 1
  7220                              <2> 	nofixyrow2:
  7221 00005958 668915[045A0000]    <2> 		mov [mousecursorposition], dx
  7222 0000595F 66890D[065A0000]    <2> 		mov [mousecursorposition + 2], cx
  7223 00005966 803D[9CDB0000]00    <2> 		cmp byte [guion], 0
  7224 0000596D 0F8495000000        <2> 		je near termmouse
  7225 00005973 E86C110000          <2> 		call switchmousepos ;;use dragging code to ensure proper icon drag
  7226 00005978 803D[155B0000]01    <2> 		cmp byte [LBUTTON], 1
  7227 0000597F 0F84A7220000        <2> 		je near clickicon
  7228 00005985 803D[165B0000]01    <2> 		cmp byte [RBUTTON], 1
  7229 0000598C 0F849A220000        <2> 		je near clickicon
  7230 00005992 A0[197C0000]        <2> 		mov al, [pbutton]
  7231 00005997 C705[1C7C0000]0000- <2> 		mov dword [dragging], 0
  7232 0000599F 0000                <2>
  7233 000059A1 3C00                <2> 		cmp al, 0
  7234 000059A3 740F                <2> 		je nopreviousbutton
  7235 000059A5 E8E2100000          <2> 		call clearmousecursor
  7236 000059AA E849140000          <2> 		call reloadallgraphics
  7237                              <2> 	windowtermcopyend:
  7238 000059AF E890110000          <2> 		call switchmousepos2
  7239                              <2> 	nopreviousbutton:
  7240 000059B4 30C0                <2> 		xor al, al
  7241 000059B6 A2[197C0000]        <2> 		mov [pbutton], al
  7242 000059BB A2[80810000]        <2> 		mov [windrag], al
  7243 000059C0 A0[155B0000]        <2> 		mov al, [LBUTTON]
  7244 000059C5 A2[1A7C0000]        <2> 		mov [pLBUTTON], al
  7245 000059CA A0[165B0000]        <2> 		mov al, [RBUTTON]
  7246 000059CF A2[1B7C0000]        <2> 		mov [pRBUTTON], al
  7247 000059D4 31D2                <2> 		xor edx, edx
  7248 000059D6 668B15[045A0000]    <2> 		mov dx, [mousecursorposition]
  7249 000059DD 668B0D[065A0000]    <2> 		mov cx, [mousecursorposition + 2]
  7250 000059E4 66BB18C7            <2> 		mov bx, 1100011100011000b
  7251 000059E8 66B80100            <2> 		mov ax, 1
  7252 000059EC C605[167C0000]01    <2> 		mov byte [showcursorfonton], 1
  7253 000059F3 E8CA1A0000          <2> 		call showfontvesa
  7254 000059F8 C605[167C0000]00    <2> 		mov byte [showcursorfonton], 0
  7255 000059FF C3                  <2> 		ret
  7256                              <2> 
  7257 00005A00 00000000            <2> lastmouseposition dw 0,0
  7258 00005A04 00000000            <2> mousecursorposition dw 0,0	
  7259                              <2> 
  7260                              <2> termmouse:
  7261 00005A08 BE[7C0F0100]        <2> 		mov esi, videobuf
  7262 00005A0D 31D2                <2> 		xor edx, edx
  7263 00005A0F 668B15[005A0000]    <2> 		mov dx, [lastmouseposition]
  7264 00005A16 668B0D[025A0000]    <2> 		mov cx, [lastmouseposition + 2]
  7265 00005A1D 66A1[9B5A0000]      <2> 		mov ax, [cursorcache]
  7266 00005A23 663D0000            <2> 		cmp ax, 0
  7267 00005A27 7425                <2> 		je nocopycursorcache
  7268 00005A29 66C1E104            <2> 		shl cx, 4
  7269 00005A2D 66C1E203            <2> 		shl dx, 3
  7270 00005A31 01D6                <2> 		add esi, edx
  7271 00005A33 6631D2              <2> 		xor dx, dx
  7272 00005A36 8A15[A0250000]      <2> 		mov dl, [charxy]
  7273 00005A3C 6641                <2> 		inc cx
  7274                              <2> termmousecplp1:
  7275 00005A3E 01D6                <2> 		add esi, edx
  7276 00005A40 6649                <2> 		dec cx
  7277 00005A42 6681F90000          <2> 		cmp cx, 0
  7278 00005A47 75F5                <2> 		jne termmousecplp1
  7279 00005A49 29D6                <2> 		sub esi, edx
  7280 00005A4B 668906              <2> 		mov [esi], ax
  7281                              <2> nocopycursorcache:
  7282 00005A4E BE[7C0F0100]        <2> 		mov esi, videobuf
  7283 00005A53 31D2                <2> 		xor edx, edx
  7284 00005A55 668B15[045A0000]    <2> 		mov dx, [mousecursorposition]
  7285 00005A5C 668B0D[065A0000]    <2> 		mov cx, [mousecursorposition + 2]
  7286 00005A63 66C1E104            <2> 		shl cx, 4
  7287 00005A67 66C1E203            <2> 		shl dx, 3
  7288 00005A6B 01D6                <2> 		add esi, edx
  7289 00005A6D 6631D2              <2> 		xor dx, dx
  7290 00005A70 8A15[A0250000]      <2> 		mov dl, [charxy]
  7291 00005A76 6641                <2> 		inc cx
  7292                              <2> termmousecplp2:
  7293 00005A78 01D6                <2> 		add esi, edx
  7294 00005A7A 6649                <2> 		dec cx
  7295 00005A7C 6681F90000          <2> 		cmp cx, 0
  7296 00005A81 75F5                <2> 		jne termmousecplp2
  7297 00005A83 29D6                <2> 		sub esi, edx
  7298 00005A85 668B06              <2> 		mov ax, [esi]
  7299 00005A88 66A3[9B5A0000]      <2> 		mov [cursorcache], ax
  7300 00005A8E B080                <2> 		mov al, 128
  7301 00005A90 B407                <2> 		mov ah, 7
  7302 00005A92 668906              <2> 		mov [esi], ax
  7303 00005A95 E8DCCDFFFF          <2> 		call termcopy
  7304 00005A9A C3                  <2> 		ret
  7305 00005A9B 0000                <2> cursorcache db 0,0
  7306                              <2> 
  7307                              <2> PS2SET:
  7308 00005A9D B0A8                <2>   mov  al, 0xa8		; enable mouse port
  7309 00005A9F E664                <2>   out  0x64, al		; write to keyboardcontroller
  7310 00005AA1 E801000000          <2>   call CHKPRT		; check if command is progressed (demand!)
  7311 00005AA6 C3                  <2> ret
  7312                              <2> 
  7313                              <2> CHKPRT:
  7314 00005AA7 66B96400            <2>   mov  cx, 100
  7315                              <2>  .again:
  7316 00005AAB E464                <2>   in   al, 0x64		; read from keyboardcontroller
  7317 00005AAD A802                <2>   test al, 2		; Check if input buffer is empty
  7318 00005AAF 7402                <2>   je .go
  7319 00005AB1 E2F8                <2>   loop .again
  7320                              <2>  .go:
  7321 00005AB3 C3                  <2> ret
  7322                              <2> 
  7323                              <2> WMOUS:
  7324 00005AB4 B0D4                <2>   mov  al, 0xd4		; write to mouse device instead of to keyboard
  7325 00005AB6 E664                <2>   out  0x64, al		; write to keyboardcontroller
  7326 00005AB8 E8EAFFFFFF          <2>   call CHKPRT		; check if command is progressed (demand!)
  7327 00005ABD C3                  <2> ret
  7328                              <2> 
  7329                              <2> MBUFFUL:
  7330 00005ABE 66B96400            <2>   mov cx, 100
  7331                              <2>  .mn:
  7332 00005AC2 E464                <2>   in   al, 0x64		; read from keyboardcontroller
  7333 00005AC4 A820                <2>   test al, 0x20		; check if mouse output buffer is full
  7334 00005AC6 7402                <2>   jz  .mnn
  7335 00005AC8 E2F8                <2>   loop .mn
  7336                              <2>  .mnn:
  7337 00005ACA C3                  <2> ret
  7338                              <2> 
  7339                              <2> 
  7340                              <2> ACTMOUS:
  7341 00005ACB E8E4FFFFFF          <2>   call WMOUS
  7342 00005AD0 B0F4                <2>   mov  al, 0xf4 	; Command to activate mouse itselve (Stream mode)
  7343 00005AD2 E660                <2>   out  0x60, al		; write ps/2 controller output port (activate mouse)
  7344 00005AD4 E8CEFFFFFF          <2>   call CHKPRT		; check if command is progressed (demand!)
  7345 00005AD9 E801000000          <2>   call CHKMOUS		; check if a byte is available
  7346 00005ADE C3                  <2> ret
  7347                              <2> 
  7348                              <2> CHKMOUS:
  7349 00005ADF B300                <2>   mov  bl, 0
  7350 00005AE1 66B96400            <2>   mov cx, 100
  7351                              <2>  .vrd:
  7352 00005AE5 E464                <2>   in   al, 0x64		; read from keyboardcontroller
  7353 00005AE7 A801                <2>   test al, 1		; check if controller buffer (60h) has data
  7354 00005AE9 7504                <2>   jnz .yy
  7355 00005AEB E2F8                <2>   loop .vrd
  7356 00005AED B301                <2>   mov  bl, 1
  7357                              <2>  .yy:
  7358 00005AEF C3                  <2> ret
  7359                              <2> 
  7360                              <2> GETB:
  7361                              <2>  .cagain:
  7362 00005AF0 E8EAFFFFFF          <2>   call CHKMOUS		; check if a byte is available
  7363 00005AF5 08DB                <2>   or bl, bl
  7364 00005AF7 75F7                <2>   jnz .cagain
  7365 00005AF9 B0AD                <2>   mov  al, 0xad		; Disable Keyboard
  7366 00005AFB E664                <2>   out  0x64, al		; write to keyboardcontroller
  7367 00005AFD E8A5FFFFFF          <2>   call CHKPRT		; check if command is progressed (demand!)
  7368 00005B02 6631C0              <2>   xor  ax, ax
  7369 00005B05 E460                <2>   in   al, 0x60		; read ps/2 controller output port (mousebyte)
  7370 00005B07 88C2                <2>   mov  dl, al
  7371 00005B09 B0AE                <2>   mov  al, 0xae		; Enable Keyboard
  7372 00005B0B E664                <2>   out  0x64, al		; write to keyboardcontroller
  7373 00005B0D E895FFFFFF          <2>   call CHKPRT		; check if command is progressed (demand!)
  7374 00005B12 88D0                <2>   mov  al, dl
  7375 00005B14 C3                  <2> ret
  7376                              <2> 
  7377 00005B15 00                  <2> LBUTTON db 0x00	;	Left   button status 1=PRESSED 0=RELEASED
  7378 00005B16 00                  <2> RBUTTON db 0x00	;	Right  button status 1=PRESSED 0=RELEASED
  7379 00005B17 00                  <2> MBUTTON db 0x00	;	Middle button status 1=PRESSED 0=RELEASED
  7380 00005B18 00                  <2> XCOORD  db 0x00	;	the moved distance  (horizontal)
  7381 00005B19 00                  <2> YCOORD  db 0x00	;	the moved distance  (vertical)
  7382                              <1> %endif
  7383                              <1> %include "source/drivers/sound/pcspkr.asm"
  7384                              <2> ;PC Speaker Drivers
  7385                              <2> PCSpeakerRAW:
  7386 00005B1A 60                  <2> 	pusha
  7387                              <2> nosoundrep:
  7388 00005B1B 8B35[6B020000]      <2> 	mov esi, [soundpos]
  7389 00005B21 31C9                <2> 	xor ecx, ecx
  7390 00005B23 668B0D[69020000]    <2> 	mov cx, [soundrepititions]
  7391 00005B2A 6681F90000          <2> 	cmp cx, 0
  7392 00005B2F 0F8548000000        <2> 	jne near donesetpitch
  7393 00005B35 668B0E              <2> 	mov cx, [esi]
  7394 00005B38 668B5E02            <2> 	mov bx, [esi + 2]
  7395 00005B3C 66890D[69020000]    <2> 	mov [soundrepititions], cx
  7396 00005B43 81C604000000        <2> 	add esi, 4
  7397 00005B49 8935[6B020000]      <2> 	mov [soundpos], esi
  7398 00005B4F 3B35[6F020000]      <2> 	cmp esi, [soundendpos]
  7399 00005B55 7735                <2> 	ja stopsound
  7400 00005B57 66813D[69020000]00- <2> 	cmp word [soundrepititions], 0
  7401 00005B5F 00                  <2>
  7402 00005B60 74B9                <2> 	je nosoundrep
  7403 00005B62 6681FB0000          <2> 	cmp bx, 0
  7404 00005B67 740F                <2> 	je nosoundplay
  7405 00005B69 E840000000          <2> 	call setpitch
  7406 00005B6E E849000000          <2> 	call startsound
  7407 00005B73 E905000000          <2> 	jmp donesetpitch
  7408                              <2> nosoundplay:
  7409 00005B78 E846000000          <2> 	call killsound
  7410                              <2> donesetpitch:
  7411 00005B7D 6649                <2> 	dec cx
  7412 00005B7F 66890D[69020000]    <2> 	mov [soundrepititions], cx
  7413 00005B86 61                  <2> 	popa
  7414 00005B87 E91CA7FFFF          <2> 	jmp timerinterrupt
  7415                              <2> stopsound:
  7416 00005B8C 31C0                <2> 	xor eax, eax
  7417 00005B8E 66A3[69020000]      <2> 	mov [soundrepititions], ax
  7418 00005B94 A2[68020000]        <2> 	mov [soundon], al
  7419 00005B99 A3[6B020000]        <2> 	mov [soundpos], eax
  7420 00005B9E A3[6F020000]        <2> 	mov [soundendpos], eax
  7421 00005BA3 E81B000000          <2> 	call killsound
  7422 00005BA8 61                  <2> 	popa
  7423 00005BA9 E9FAA6FFFF          <2> 	jmp timerinterrupt
  7424                              <2> 
  7425                              <2> 
  7426                              <2> setpitch:
  7427 00005BAE B0B6                <2> 	mov al, 0xB6
  7428 00005BB0 E643                <2> 	out 0x43, al
  7429 00005BB2 6689D8              <2> 	mov ax, bx
  7430 00005BB5 E642                <2> 	out 0x42, al
  7431 00005BB7 88E0                <2> 	mov al, ah
  7432 00005BB9 E642                <2> 	out 0x42, al
  7433 00005BBB C3                  <2> 	ret
  7434                              <2> startsound:
  7435 00005BBC E461                <2> 	in al, 0x61
  7436 00005BBE 0C03                <2> 	or al, 3
  7437 00005BC0 E661                <2> 	out 0x61, al
  7438 00005BC2 C3                  <2> 	ret
  7439                              <2> killsound:
  7440 00005BC3 E461                <2> 	in al, 0x61
  7441 00005BC5 24FC                <2> 	and al, 0xFC
  7442 00005BC7 E661                <2> 	out 0x61, al
  7443 00005BC9 C3                  <2> 	ret
  7444                              <2> 	
  7445                              <1> %ifdef sound.included
  7446                              <1> 	%include "source/drivers/sound/sblaster.asm"
  7447                              <1> %endif
  7448                              <1> %ifdef io.serial
  7449                              <1> 	%include "source/drivers/input/serial.asm"
  7450                              <1> %else
  7451                              <1> 	%include "source/drivers/input/keyboard.asm"
  7452 00005BCA 00                  <2> specialkey db 0
  7453                              <2> ;charregion db 0
  7454                              <2> waitforinput:		;this is basically the idle process
  7455                              <2> 					;this halts the cpu for a small amount of time and then sees if there was a keypress
  7456                              <2> 					;this lets the cpu stay at close to 0% instead of 100%
  7457 00005BCB 6631C0              <2> 	xor ax, ax
  7458 00005BCE A0[0E670000]        <2> 	mov al, [threadson]
  7459 00005BD3 8825[0E670000]      <2> 	mov [threadson], ah
  7460 00005BD9 FB                  <2> 	sti
  7461 00005BDA F4                  <2> 	hlt
  7462 00005BDB A2[0E670000]        <2> 	mov [threadson], al
  7463 00005BE0 66813D[84230000]00- <2> 	cmp word [trans], 0
  7464 00005BE8 00                  <2>
  7465 00005BE9 7401                <2> 	je getkey
  7466 00005BEB C3                  <2> 	ret
  7467                              <2> getkey:
  7468 00005BEC 31C0                <2> 		xor eax, eax
  7469 00005BEE A2[CA5B0000]        <2> 		mov [specialkey], al
  7470 00005BF3 A3[80230000]        <2> 		mov [lastkey], eax
  7471 00005BF8 E464                <2> 		in al, 64h ; Status
  7472                              <2> 	%ifdef gui.included
  7473 00005BFA A820                <2> 		test al, 20h ; PS2-Mouse?
  7474 00005BFC 0F8565FCFFFF        <2> 		jnz near moused
  7475                              <2> 	%endif
  7476 00005C02 A801                <2> 		test al, 1 
  7477 00005C04 74C5                <2> 		jz waitforinput ; if output buffer full or no keypress, jump to idle process
  7478                              <2> 	calckey:
  7479 00005C06 E460                <2> 		in al, 60h
  7480 00005C08 30E4                <2> 		xor ah, ah
  7481 00005C0A 6689C3              <2> 		mov bx, ax
  7482 00005C0D 66A3[82230000]      <2> 		mov [lastkey + 2], ax
  7483 00005C13 BF[A25D0000]        <2> 		mov edi, scancode
  7484                              <2> 	searchscan: 
  7485 00005C18 80FB3A              <2> 		cmp bl, 3Ah
  7486 00005C1B 7314                <2> 		jae scanother
  7487 00005C1D C1E004              <2> 		shl eax, 4
  7488 00005C20 01C7                <2> 		add edi, eax
  7489 00005C22 668B07              <2> 		mov ax, [edi]
  7490 00005C25 663D0000            <2> 		cmp ax, 0
  7491 00005C29 7406                <2> 		je scanother
  7492 00005C2B E9D0000000          <2> 		jmp scanfound
  7493 00005C30 00                  <2> uppercase db 0
  7494                              <2> scanother:
  7495 00005C31 6631C0              <2> 		xor ax, ax
  7496 00005C34 66A3[80230000]      <2> 		mov [lastkey], ax
  7497 00005C3A 80FBE0              <2> 		cmp bl, 0E0h
  7498 00005C3D 0F8477000000        <2> 		je near getkeyspecial
  7499 00005C43 803D[CA5B0000]E0    <2> 		cmp byte [specialkey], 0xE0
  7500 00005C4A 7525                <2> 		jne nospecialkey
  7501 00005C4C 80FB38              <2> 		cmp bl, 38h
  7502 00005C4F 0F849A000000        <2> 		je near alton
  7503 00005C55 80FBB8              <2> 		cmp bl, 0B8h
  7504 00005C58 0F8499000000        <2> 		je near altoff
  7505 00005C5E 80FB1D              <2> 		cmp bl, 1Dh
  7506 00005C61 0F8478000000        <2> 		je near ctron
  7507 00005C67 80FB9D              <2> 		cmp bl, 9Dh
  7508 00005C6A 0F8477000000        <2> 		je near ctroff
  7509 00005C70 C3                  <2> 		ret
  7510                              <2> nospecialkey:
  7511 00005C71 80FB2A              <2> 		cmp bl, 2Ah
  7512 00005C74 0F8455000000        <2> 		je near shifton
  7513 00005C7A 80FB36              <2> 		cmp bl, 36h
  7514 00005C7D 0F844C000000        <2> 		je near shifton
  7515 00005C83 80FB1C              <2> 		cmp bl, 1Ch
  7516 00005C86 0F8473000000        <2> 		je near entdown
  7517 00005C8C 80FBAA              <2> 		cmp bl, 0AAh
  7518 00005C8F 0F8442000000        <2> 		je near shiftoff
  7519 00005C95 80FBB6              <2> 		cmp bl, 0B6h
  7520 00005C98 0F8439000000        <2> 		je near shiftoff
  7521 00005C9E 80FB3A              <2> 		cmp bl, 3Ah
  7522 00005CA1 0F84A7000000        <2> 		je near capslock
  7523 00005CA7 80FB45              <2> 		cmp bl, 0x45
  7524 00005CAA 0F84AF000000        <2> 		je near numlock
  7525 00005CB0 80FB46              <2> 		cmp bl, 0x46
  7526 00005CB3 0F84BE000000        <2> 		je near scrolllock
  7527 00005CB9 C3                  <2> 		ret
  7528                              <2> 	getkeyspecial:
  7529 00005CBA C605[CA5B0000]E0    <2> 		mov byte [specialkey], 0xE0
  7530 00005CC1 E940FFFFFF          <2> 		jmp calckey
  7531                              <2> 	shift:
  7532 00005CC6 A0[305C0000]        <2> 		mov al, [uppercase]
  7533 00005CCB 3C01                <2> 		cmp al, 1
  7534 00005CCD 7308                <2> 		jae shiftoff
  7535                              <2> 	shifton:
  7536 00005CCF C605[305C0000]01    <2> 		mov byte [uppercase], 1
  7537 00005CD6 C3                  <2> 		ret
  7538                              <2> 	shiftoff:
  7539 00005CD7 C605[305C0000]00    <2> 		mov byte [uppercase], 0
  7540 00005CDE C3                  <2> 		ret
  7541                              <2> 	ctron:
  7542 00005CDF C605[4D5D0000]01    <2> 		mov byte [ctrkey], 1
  7543 00005CE6 C3                  <2> 		ret
  7544                              <2> 	ctroff:
  7545 00005CE7 C605[4D5D0000]00    <2> 		mov byte [ctrkey], 0
  7546 00005CEE C3                  <2> 		ret
  7547                              <2> 	alton:
  7548 00005CEF C605[4C5D0000]01    <2> 		mov byte [altkey], 1
  7549 00005CF6 C3                  <2> 		ret
  7550                              <2> 	altoff:
  7551 00005CF7 C605[4C5D0000]00    <2> 		mov byte [altkey], 0
  7552 00005CFE C3                  <2> 		ret
  7553                              <2> 	entdown:
  7554 00005CFF C3                  <2> 		ret
  7555                              <2> scanfound:
  7556 00005D00 81C708000000        <2> 		add edi, 8
  7557 00005D06 803D[4D5D0000]01    <2> 		cmp byte [ctrkey], 1
  7558 00005D0D 7306                <2> 		jae ctrlin
  7559 00005D0F 81EF08000000        <2> 		sub edi, 8
  7560                              <2> 	ctrlin:
  7561 00005D15 81C704000000        <2> 		add edi, 4
  7562 00005D1B 803D[4C5D0000]01    <2> 		cmp byte [altkey], 1
  7563 00005D22 7306                <2> 		jae altin
  7564 00005D24 81EF04000000        <2> 		sub edi, 4
  7565                              <2> 	altin:
  7566 00005D2A 81C702000000        <2> 		add edi, 2
  7567 00005D30 803D[305C0000]01    <2> 		cmp byte [uppercase], 1
  7568 00005D37 7306                <2> 		jae uppercaseon
  7569 00005D39 81EF02000000        <2> 		sub edi, 2
  7570                              <2> 	uppercaseon:
  7571 00005D3F 668B07              <2> 		mov ax,[edi]
  7572 00005D42 66A3[80230000]      <2> 		mov [lastkey], ax
  7573 00005D48 C3                  <2> 		ret
  7574                              <2> 		
  7575 00005D49 00                  <2> keyboardstatus db 0
  7576 00005D4A 00                  <2> numlockstatus db 0
  7577 00005D4B 00                  <2> scrolllockstatus db 0
  7578 00005D4C 00                  <2> altkey db 0
  7579 00005D4D 00                  <2> ctrkey db 0
  7580                              <2> 	capslock:
  7581 00005D4E 8035[495D0000]04    <2> 		xor byte [keyboardstatus], 00000100b
  7582 00005D55 E835000000          <2> 		call updatekblights
  7583 00005D5A E967FFFFFF          <2> 		jmp shift
  7584                              <2> 		
  7585                              <2> 	numlock:
  7586 00005D5F 8035[495D0000]02    <2> 		xor byte [keyboardstatus], 00000010b
  7587 00005D66 8035[4A5D0000]01    <2> 		xor byte [numlockstatus], 1
  7588 00005D6D E81D000000          <2> 		call updatekblights
  7589 00005D72 E975FEFFFF          <2> 		jmp getkey
  7590                              <2> 	
  7591                              <2> 	scrolllock:
  7592 00005D77 8035[495D0000]01    <2> 		xor byte [keyboardstatus], 00000001b
  7593 00005D7E 8035[4B5D0000]01    <2> 		xor byte [scrolllockstatus], 1
  7594 00005D85 E805000000          <2> 		call updatekblights
  7595 00005D8A E95DFEFFFF          <2> 		jmp getkey
  7596                              <2> 		
  7597                              <2> 	updatekblights:
  7598 00005D8F B0ED                <2> 		mov al, 0xED
  7599 00005D91 66BA6000            <2> 		mov dx, 0x60
  7600 00005D95 EE                  <2> 		out dx, al
  7601                              <2> 	chkkbdack:
  7602 00005D96 EC                  <2> 		in al, dx
  7603 00005D97 3CFA                <2> 		cmp al, 0xFA
  7604 00005D99 75FB                <2> 		jne chkkbdack
  7605 00005D9B A0[495D0000]        <2> 		mov al, [keyboardstatus]
  7606 00005DA0 EE                  <2> 		out dx, al
  7607 00005DA1 C3                  <2> 		ret
  7608                              <2> 		
  7609                              <2> scancode:
  7610                              <2> 	;key, KEY, alt key, ALT KEY, ctrl key, CTRL KEY, ctrl-alt, CTRL-ALT
  7611 00005DA2 000000000000000000- <2> 	dw 0,0,0,0,0,0,0,0
  7612 00005DAB 00000000000000      <2>
  7613 00005DB2 000000000000000000- <2> 	dw 0,0,0,0,0,0,0,0
  7614 00005DBB 00000000000000      <2>
  7615 00005DC2 31002100A1003C2000- <2> 	dw '1','!',0xA1,0x203C,0,0,0,0
  7616 00005DCB 00000000000000      <2>
  7617 00005DD2 32004000B2001A2200- <2> 	dw '2','@',0xB2,0x221A,0,0,0,0
  7618 00005DDB 00000000000000      <2>
  7619 00005DE2 33002300B3002B2200- <2> 	dw '3','#',0xB3,0x222B,0,0,0,0
  7620 00005DEB 00000000000000      <2>
  7621 00005DF2 34002400A300A20000- <2> 	dw '4','$',0xA3,0xA2,0,0,0,0
  7622 00005DFB 00000000000000      <2>
  7623 00005E02 35002500AC20000000- <2> 	dw '5','%',0x20AC,0,0,0,0,0
  7624 00005E0B 00000000000000      <2>
  7625 00005E12 36005E00BC007F2000- <2> 	dw '6','^',0xBC,0x207F,0,0,0,0
  7626 00005E1B 00000000000000      <2>
  7627 00005E22 37002600BD00000000- <2> 	dw '7','&',0xBD,0,0,0,0,0
  7628 00005E2B 00000000000000      <2>
  7629 00005E32 38002A001E22950000- <2> 	dw '8','*',0x221E,0x95,0,0,0,0
  7630 00005E3B 00000000000000      <2>
  7631 00005E42 39002800AE00990000- <2> 	dw '9','(',0xAE,0x99,0,0,0,0
  7632 00005E4B 00000000000000      <2>
  7633 00005E52 30002900A900000000- <2> 	dw '0',')',0xA9,0,0,0,0,0
  7634 00005E5B 00000000000000      <2>
  7635 00005E62 2D005F00A500B10000- <2> 	dw '-','_',0xA5,0xB1,0,0,0,0
  7636 00005E6B 00000000000000      <2>
  7637 00005E72 3D002B00F700482200- <2> 	dw '=','+',0xF7,0x2248,0,0,0,0
  7638 00005E7B 00000000000000      <2>
  7639 00005E82 080008000000000000- <2> 	dw 8,8,0,0,0,0,0,0
  7640 00005E8B 00000000000000      <2>
  7641 00005E92 000000000000000000- <2> 	dw 0,0,0,0,0,0,0,0
  7642 00005E9B 00000000000000      <2>
  7643 00005EA2 71005100E400C4003B- <2> 	dw 'q','Q',0xE4,0xC4,';',':',0x438,0x418
  7644 00005EAA 003A0038041804      <2>
  7645 00005EB2 77005700E500C500C2- <2> 	dw 'w','W',0xE5,0xC5,0x3C2,0,0x446,0x426
  7646 00005EBB 03000046042604      <2>
  7647 00005EC2 65004500E900C900B5- <2> 	dw 'e','E',0xE9,0xC9,0x3B5,0x395,0x443,0x423
  7648 00005ECB 03950343042304      <2>
  7649 00005ED2 72005200EB00E800C1- <2> 	dw 'r','R',0xEB,0xE8,0x3C1,0x3A1,0x43A,0x41A
  7650 00005EDB 03A1033A041A04      <2>
  7651 00005EE2 74005400FC00DC00C4- <2> 	dw 't','T',0xFC,0xDC,0x3C4,0x3A4,0x435,0x415
  7652 00005EEB 03A40335041504      <2>
  7653 00005EF2 79005900FF009F00C5- <2> 	dw 'y','Y',0xFF,0x9F,0x3C5,0x3A5,0x43D,0x41D
  7654 00005EFB 03A5033D041D04      <2>
  7655 00005F02 75005500FA00F900B8- <2> 	dw 'u','U',0xFA,0xF9,0x3B8,0x398,0x433,0x413
  7656 00005F0B 03980333041304      <2>
  7657 00005F12 69004900ED00EC00B9- <2> 	dw 'i','I',0xED,0xEC,0x3B9,0x399,0x448,0x428
  7658 00005F1B 03990348042804      <2>
  7659 00005F22 6F004F00F300F200BF- <2> 	dw 'o','O',0xF3,0xF2,0x3BF,0x39F,0x449,0x429
  7660 00005F2B 039F0349042904      <2>
  7661 00005F32 70005000F600D600C0- <2> 	dw 'p','P',0xF6,0xD6,0x3C0,0x3A0,0x437,0x417
  7662 00005F3B 03A00337041704      <2>
  7663 00005F42 5B007B00AB00000000- <2> 	dw '[','{',0xAB,0,0,0,0x445,0x425
  7664 00005F4B 00000045042504      <2>
  7665 00005F52 5D007D00BB00000000- <2> 	dw ']','}',0xBB,0,0,0,0x44A,0x42A
  7666 00005F5B 0000004A042A04      <2>
  7667 00005F62 000000000000000000- <2> 	dw 0,0,0,0,0,0,0,0
  7668 00005F6B 00000000000000      <2>
  7669 00005F72 000000000000000000- <2> 	dw 0,0,0,0,0,0,0,0
  7670 00005F7B 00000000000000      <2>
  7671 00005F82 61004100E100E000B1- <2> 	dw 'a','A',0xE1,0xE0,0x3B1,0x391,0x444,0x424
  7672 00005F8B 03910344042404      <2>
  7673 00005F92 73005300A7000000C3- <2> 	dw 's','S',0xA7,0,0x3C3,0x3A3,0x44B,0x42B
  7674 00005F9B 03A3034B042B04      <2>
  7675 00005FA2 64004400B0000000B4- <2> 	dw 'd','D',0xB0,0,0x3B4,0x394,0x432,0x412
  7676 00005FAB 03940332041204      <2>
  7677 00005FB2 6600460083004026C6- <2> 	dw 'f','F',0x83,0x2640,0x3C6,0x3A6,0x430,0x410
  7678 00005FBB 03A60330041004      <2>
  7679 00005FC2 6700470000000000B3- <2> 	dw 'g','G',0,0,0x3B3,0x393,0x43F,0x41F
  7680 00005FCB 0393033F041F04      <2>
  7681 00005FD2 6800480000000000B7- <2> 	dw 'h','H',0,0,0x3B7,0x397,0x440,0x420
  7682 00005FDB 03970340042004      <2>
  7683 00005FE2 6A004A0000000000BE- <2> 	dw 'j','J',0,0,0x3BE,0x39E,0x43E,0x41E
  7684 00005FEB 039E033E041E04      <2>
  7685 00005FF2 6B004B0000000000BA- <2> 	dw 'k','K',0,0,0x3BA,0x39A,0x43B,0x41B
  7686 00005FFB 039A033B041B04      <2>
  7687 00006002 6C004C0000000000BB- <2> 	dw 'l','L',0,0,0x3BB,0x39B,0x434,0x414
  7688 0000600B 039B0334041404      <2>
  7689 00006012 3B003A00B6000E2200- <2> 	dw ';',':',0xB6,0x220E,0,0,0x436,0x416
  7690 0000601B 00000036041604      <2>
  7691 00006022 270022000000000000- <2> 	dw "'",'"',0,0,0,0,0x44D,0x42D
  7692 0000602B 0000004D042D04      <2>
  7693 00006032 60007E000000000000- <2> 	dw '`','~',0,0,0,0,0x451,0x401
  7694 0000603B 00000051040104      <2>
  7695 00006042 000000000000000000- <2> 	dw 0,0,0,0,0,0,0,0
  7696 0000604B 00000000000000      <2>
  7697 00006052 5C007C00AC00A60000- <2> 	dw "\",'|',0xAC,0xA6,0,0,"/","\"
  7698 0000605B 0000002F005C00      <2>
  7699 00006062 7A005A00E600C600B6- <2> 	dw 'z','Z',0xE6,0xC6,0x3B6,0x396,0x44F,0x42F
  7700 0000606B 0396034F042F04      <2>
  7701 00006072 7800580000000000C7- <2> 	dw 'x','X',0,0,0x3C7,0x3A7,0x447,0x427
  7702 0000607B 03A70347042704      <2>
  7703 00006082 63004300E700C700C8- <2> 	dw 'c','C',0xE7,0xC7,0x3C8,0x3A8,0x441,0x421
  7704 0000608B 03A80341042104      <2>
  7705 00006092 7600560000000000C9- <2> 	dw 'v','V',0,0,0x3C9,0x3A9,0x43C,0x41C
  7706 0000609B 03A9033C041C04      <2>
  7707 000060A2 6200420000000000B2- <2> 	dw 'b','B',0,0,0x3B2,0x392,0x438,0x418
  7708 000060AB 03920338041804      <2>
  7709 000060B2 6E004E00F100D100BD- <2> 	dw 'n','N',0xF1,0xD1,0x3BD,0x39D,0x442,0x422
  7710 000060BB 039D0342042204      <2>
  7711 000060C2 6D004D006C264226BC- <2> 	dw 'm','M',0x266C,0x2642,0x3BC,0x39C,0x44C,0x42C
  7712 000060CB 039C034C042C04      <2>
  7713 000060D2 2C003C006422000000- <2> 	dw ',','<',0x2264,0,0,0,0x431,0x411
  7714 000060DB 00000031041104      <2>
  7715 000060E2 2E003E006522000000- <2> 	dw '.','>',0x2265,0,0,0,0x44E,0x42E
  7716 000060EB 0000004E042E04      <2>
  7717 000060F2 2F003F00BF00000000- <2> 	dw '/','?',0xBF,0,0,0,'.',','
  7718 000060FB 0000002E002C00      <2>
  7719 00006102 000000000000000000- <2> 	dw 0,0,0,0,0,0,0,0
  7720 0000610B 00000000000000      <2>
  7721 00006112 000000000000000000- <2> 	dw 0,0,0,0,0,0,0,0
  7722 0000611B 00000000000000      <2>
  7723 00006122 000000000000000000- <2> 	dw 0,0,0,0,0,0,0,0
  7724 0000612B 00000000000000      <2>
  7725 00006132 200020000000000000- <2> 	dw ' ',' ',0,0,0,0,0,0
  7726 0000613B 00000000000000      <2>
  7727                              <2> noscan:
  7728                              <2> 
  7729                              <1> %endif
  7730                              <1> ;drivers will soon be handled intelligently
  7731                              <1> ;every driver's source will be scanned for a .init function
  7732                              <1> ;that will be called and if it returns 0
  7733                              <1> ;the hardware was found and the driver initialized properly
  7734                              <1> initializelater: ;these have debugging messages and should be initialized after the screen
  7735                              <1> 	%ifdef sound.included
  7736                              <1> 		call sblaster.init
  7737                              <1> 	%endif
  7738                              <1> 	%ifdef network.included
  7739 00006142 E82A230000          <1> 		call network.init
  7740                              <1> 	%endif
  7741 00006147 C3                  <1> 	ret
  7742                              <1> initialize:
  7743                              <1> ;Now I will initialise the interrupt controllers and remap irq's
  7744 00006148 E814000000          <1> 	call .pic
  7745                              <1> %ifdef terminal.vsync
  7746                              <1> 	call .rtc
  7747                              <1> %endif
  7748 0000614D E871000000          <1> 	call .pit
  7749 00006152 E893000000          <1> 	call .fpu
  7750 00006157 E8A4000000          <1> 	call .sse
  7751 0000615C 31C0                <1> 	xor eax, eax
  7752 0000615E 31C9                <1> 	xor ecx, ecx
  7753                              <1> %ifdef io.serial
  7754                              <1> 	call serial.init
  7755                              <1> %endif
  7756 00006160 C3                  <1> 	ret
  7757                              <1> 	
  7758                              <1> .pic:
  7759 00006161 B011                <1> 	mov al, 0x11
  7760 00006163 E620                <1> 	out 0x20, al
  7761 00006165 E6A0                <1> 	out 0xA0, al
  7762 00006167 B040                <1> 	mov al, 0x40	;interrupt for master
  7763 00006169 E621                <1> 	out 0x21, al
  7764 0000616B B048                <1> 	mov al, 0x48	;interrupt for slave
  7765 0000616D E6A1                <1> 	out 0xA1, al
  7766 0000616F B004                <1> 	mov al, 4
  7767 00006171 E621                <1> 	out 0x21, al
  7768 00006173 B002                <1> 	mov al, 2
  7769 00006175 E6A1                <1> 	out 0xA1, al
  7770 00006177 B001                <1> 	mov al, 0x1
  7771 00006179 E621                <1> 	out 0x21, al
  7772 0000617B B001                <1> 	mov al, 0x1
  7773 0000617D E6A1                <1> 	out 0xA1, al
  7774                              <1> 	;masks are set to zero so as not to mask
  7775 0000617F 30C0                <1> 	xor al, al
  7776 00006181 E621                <1> 	out 0x21, al
  7777 00006183 30C0                <1> 	xor al, al
  7778 00006185 E6A1                <1> 	out 0xA1, al
  7779 00006187 B020                <1> 	mov al, 0x20
  7780 00006189 E6A0                <1> 	out 0xA0, al
  7781 0000618B E620                <1> 	out 0x20, al
  7782 0000618D C3                  <1> 	ret
  7783                              <1> .rtc:
  7784 0000618E B008                <1> 	mov al, 0x8
  7785 00006190 88C4                <1> 	mov ah, al
  7786 00006192 66BA7000            <1> 	mov dx, 0x70
  7787 00006196 EE                  <1> 	out dx, al
  7788 00006197 6642                <1> 	inc dx
  7789 00006199 EC                  <1> 	in al, dx
  7790 0000619A 86C4                <1> 	xchg al, ah
  7791 0000619C 664A                <1> 	dec dx
  7792 0000619E EE                  <1> 	out dx, al
  7793 0000619F 6642                <1> 	inc dx
  7794 000061A1 86C4                <1> 	xchg al, ah
  7795 000061A3 0C40                <1> 	or al, 0x40
  7796 000061A5 EE                  <1> 	out dx, al
  7797                              <1> 	
  7798 000061A6 B00A                <1> 	mov al, 0xA
  7799 000061A8 664A                <1> 	dec dx
  7800 000061AA EE                  <1> 	out dx, al
  7801 000061AB 86C4                <1> 	xchg al, ah
  7802 000061AD 6642                <1> 	inc dx
  7803 000061AF EC                  <1> 	in al, dx
  7804 000061B0 24F0                <1> 	and al, 0xF0
  7805 000061B2 0A05[1B030000]      <1> 	or al, [rtcrate]
  7806 000061B8 86C4                <1> 	xchg al, ah
  7807 000061BA 664A                <1> 	dec dx
  7808 000061BC EE                  <1> 	out dx, al
  7809 000061BD 6642                <1> 	inc dx
  7810 000061BF 86C4                <1> 	xchg al, ah
  7811 000061C1 EE                  <1> 	out dx, al
  7812 000061C2 C3                  <1> 	ret
  7813                              <1> 	
  7814                              <1> .pit:
  7815                              <1> 	;initialize the PIT
  7816 000061C3 66A1[5A020000]      <1> 	mov ax, [pitdiv] ;this is the divider for the PIT
  7817 000061C9 E640                <1> 	out 0x40, al
  7818 000061CB 66C1C008            <1> 	rol ax, 8
  7819 000061CF E640                <1> 	out 0x40, al
  7820                              <1> 	;enable rtc interrupt
  7821 000061D1 B00B                <1> 	mov al, 0xB
  7822 000061D3 E670                <1> 	out 0x70, al
  7823 000061D5 66C1C008            <1> 	rol ax, 8
  7824 000061D9 E471                <1> 	in al, 0x71
  7825 000061DB 66C1C008            <1> 	rol ax, 8
  7826 000061DF E670                <1> 	out 0x70, al
  7827 000061E1 66C1C008            <1> 	rol ax, 8
  7828 000061E5 0C40                <1> 	or al, 0x40
  7829 000061E7 E671                <1> 	out 0x71, al
  7830 000061E9 C3                  <1> 	ret
  7831                              <1> .fpu:
  7832                              <1> 	;And now to initialize the fpu
  7833 000061EA 0F20E0              <1> 	mov eax, cr4
  7834 000061ED 0D00020000          <1> 	or eax, 0x200
  7835 000061F2 0F22E0              <1> 	mov cr4, eax
  7836 000061F5 B87F0B0000          <1> 	mov eax, 0xB7F
  7837 000061FA 50                  <1> 	push eax
  7838 000061FB D92C24              <1> 	fldcw [esp]
  7839 000061FE 58                  <1> 	pop eax
  7840 000061FF C3                  <1> 	ret
  7841                              <1> 	
  7842                              <1> .sse:
  7843 00006200 0F20C0              <1> 	mov eax, cr0
  7844 00006203 24FB                <1> 	and al, 11111011b
  7845 00006205 0C02                <1> 	or al, 00000010b
  7846 00006207 0F22C0              <1> 	mov cr0, eax
  7847 0000620A 0F20E0              <1> 	mov eax, cr4
  7848 0000620D 660D0006            <1> 	or ax, 0000011000000000b
  7849 00006211 0F22E0              <1> 	mov cr4, eax
  7850 00006214 C3                  <1> 	ret
  7851                                      %include "source/pci.asm"
  7852 00006215 00                  <1> pcibus		db 0
  7853 00006216 00                  <1> pcidevice	db 0
  7854 00006217 00                  <1> pcifunction	db 0
  7855 00006218 00                  <1> pciregister	db 0
  7856 00006219 00                  <1> pcireqtype	db 0
  7857 0000621A 00000000            <1> pcidevid	dd 0
  7858 0000621E FFFFFFFF            <1> pcidevidmask dd 0xFFFFFFFF
  7859                              <1> getpcimem:
  7860 00006222 B002                <1> 	mov al, 2
  7861 00006224 A2[19620000]        <1> 	mov [pcireqtype], al
  7862 00006229 E922000000          <1> 	jmp searchpci
  7863                              <1> getpciport:
  7864 0000622E B001                <1> 	mov al, 1
  7865 00006230 A2[19620000]        <1> 	mov [pcireqtype], al
  7866 00006235 E916000000          <1> 	jmp searchpci
  7867                              <1> pcidump:
  7868 0000623A 31C0                <1> 	xor eax, eax
  7869 0000623C A2[17620000]        <1> 	mov [pcifunction], al
  7870 00006241 A2[15620000]        <1> 	mov [pcibus], al
  7871 00006246 A2[16620000]        <1> 	mov [pcidevice], al
  7872 0000624B A2[19620000]        <1> 	mov [pcireqtype], al
  7873                              <1> searchpci:		;;return in ebx, start X in pciX
  7874 00006250 30C0                <1> 	xor al, al
  7875 00006252 A2[18620000]        <1> 	mov [pciregister], al
  7876 00006257 E81D020000          <1> 	call getpciaddr
  7877 0000625C BAF80C0000          <1> 	mov edx, 0xCF8
  7878 00006261 EF                  <1> 	out dx, eax	;;request pci config
  7879 00006262 BAFC0C0000          <1> 	mov edx, 0xCFC
  7880 00006267 ED                  <1> 	in eax, dx 	;;read in pci config
  7881 00006268 3D0000FFFF          <1> 	cmp eax, 0xFFFF0000
  7882 0000626D 0F8237000000        <1> 	jb near checkpcidevice
  7883                              <1> searchpciret:
  7884                              <1> nextpcidevice:
  7885 00006273 30C0                <1> 	xor al, al
  7886 00006275 A2[17620000]        <1> 	mov [pcifunction], al
  7887 0000627A A0[16620000]        <1> 	mov al, [pcidevice]
  7888 0000627F 3C1F                <1> 	cmp al, 11111b
  7889 00006281 0F8300010000        <1> 	jae near nextpcibus
  7890 00006287 FEC0                <1> 	inc al
  7891 00006289 A2[16620000]        <1> 	mov [pcidevice], al
  7892 0000628E EBC0                <1> 	jmp searchpci
  7893 00006290 A0[17620000]        <1> 	mov al, [pcifunction]
  7894 00006295 3C07                <1> 	cmp al, 111b
  7895 00006297 0F83D6FFFFFF        <1> 	jae near nextpcidevice
  7896 0000629D FEC0                <1> 	inc al
  7897 0000629F A2[17620000]        <1> 	mov [pcifunction], al
  7898 000062A4 EBAA                <1> 	jmp searchpci
  7899 000062A6 00000000            <1> pcitype: db 0,0,0,0
  7900                              <1> checkpcidevice:
  7901 000062AA 31C0                <1> 	xor eax, eax
  7902 000062AC 3905[1A620000]      <1> 	cmp [pcidevid], eax
  7903 000062B2 0F8430000000        <1> 	je near .good
  7904 000062B8 A2[18620000]        <1> 	mov [pciregister], al	;device id, vendor id
  7905 000062BD E8B7010000          <1> 	call getpciaddr
  7906 000062C2 BAF80C0000          <1> 	mov edx, 0xCF8
  7907 000062C7 EF                  <1> 	out dx, eax
  7908 000062C8 BAFC0C0000          <1> 	mov edx, 0xCFC
  7909 000062CD ED                  <1> 	in eax, dx
  7910 000062CE 2305[1E620000]      <1> 	and eax, [pcidevidmask]
  7911 000062D4 8B1D[1A620000]      <1> 	mov ebx, [pcidevid]
  7912 000062DA 231D[1E620000]      <1> 	and ebx, [pcidevidmask]
  7913 000062E0 39D8                <1> 	cmp eax, ebx
  7914 000062E2 0F858BFFFFFF        <1> 	jne near searchpciret
  7915                              <1> .good:
  7916 000062E8 30C0                <1> 	xor al, al
  7917 000062EA 3805[19620000]      <1> 	cmp [pcireqtype], al
  7918 000062F0 0F842C000000        <1> 	je near dumppcidevice
  7919 000062F6 B008                <1> 	mov al, 0x08
  7920 000062F8 A2[18620000]        <1> 	mov [pciregister], al	;;class code, subclass, revision id
  7921 000062FD E877010000          <1> 	call getpciaddr
  7922 00006302 BAF80C0000          <1> 	mov edx, 0xCF8
  7923 00006307 EF                  <1> 	out dx, eax
  7924 00006308 BAFC0C0000          <1> 	mov edx, 0xCFC
  7925 0000630D ED                  <1> 	in eax, dx
  7926 0000630E C1C008              <1> 	rol eax, 8
  7927 00006311 3A05[A6620000]      <1> 	cmp al, [pcitype]
  7928 00006317 0F84A0000000        <1> 	je near foundpciaddr
  7929 0000631D E951FFFFFF          <1> 	jmp searchpciret
  7930                              <1> dumppcidevice:
  7931 00006322 30C0                <1> 	xor al, al
  7932 00006324 A2[18620000]        <1> 	mov [pciregister], al
  7933 00006329 E84B010000          <1> 	call getpciaddr
  7934 0000632E 89C1                <1> 	mov ecx, eax
  7935 00006330 C605[7F310000]05    <1> 	mov byte [firsthexshown], 5
  7936 00006337 E858CEFFFF          <1> 	call showhex
  7937                              <1> dumppcidevicelp:
  7938 0000633C A2[18620000]        <1> 	mov [pciregister], al
  7939 00006341 E833010000          <1> 	call getpciaddr
  7940 00006346 BAF80C0000          <1> 	mov edx, 0xCF8
  7941 0000634B EF                  <1> 	out dx, eax
  7942 0000634C BAFC0C0000          <1> 	mov edx, 0xCFC
  7943 00006351 ED                  <1> 	in eax, dx
  7944 00006352 89C1                <1> 	mov ecx, eax
  7945 00006354 A0[18620000]        <1> 	mov al, [pciregister]
  7946 00006359 0404                <1> 	add al, 4
  7947 0000635B C605[7F310000]05    <1> 	mov byte [firsthexshown], 5
  7948 00006362 E82DCEFFFF          <1> 	call showhex
  7949 00006367 3C3C                <1> 	cmp al, 0x3C
  7950 00006369 72D1                <1> 	jb dumppcidevicelp
  7951                              <1> dumppcidn:
  7952                              <1> %ifdef io.serial
  7953                              <1> 	mov esi, line
  7954                              <1> 	call print
  7955                              <1> %else
  7956 0000636B 803D[9E250000]00    <1> 	cmp byte [charpos], 0
  7957 00006372 0F84FBFEFFFF        <1> 	je near searchpciret
  7958 00006378 BE[77890000]        <1> 	mov esi, line
  7959 0000637D E8A9B9FFFF          <1> 	call print
  7960                              <1> %endif
  7961 00006382 E9ECFEFFFF          <1> 	jmp searchpciret
  7962                              <1> nextpcibus:
  7963 00006387 30C0                <1> 	xor al, al
  7964 00006389 A2[16620000]        <1> 	mov [pcidevice], al
  7965 0000638E A0[15620000]        <1> 	mov al, [pcibus]
  7966 00006393 3C7F                <1> 	cmp al, 1111111b
  7967 00006395 730C                <1> 	jae donesearchpci
  7968 00006397 FEC0                <1> 	inc al
  7969 00006399 A2[15620000]        <1> 	mov [pcibus], al
  7970 0000639E E9ADFEFFFF          <1> 	jmp searchpci
  7971                              <1> donesearchpci:
  7972 000063A3 BBFFFFFFFF          <1> 	mov ebx, 0xFFFFFFFF
  7973 000063A8 31D2                <1> 	xor edx, edx
  7974 000063AA 8815[A6620000]      <1> 	mov [pcitype], dl
  7975 000063B0 8915[1A620000]      <1> 	mov [pcidevid], edx
  7976 000063B6 891D[1E620000]      <1> 	mov [pcidevidmask], ebx
  7977 000063BC C3                  <1> 	ret
  7978                              <1> foundpciaddr:
  7979 000063BD B010                <1> 	mov al, 0x10
  7980 000063BF A2[18620000]        <1> 	mov [pciregister], al
  7981 000063C4 803D[19620000]02    <1> 	cmp byte [pcireqtype], 2
  7982 000063CB 7443                <1> 	je findpcimemaddr
  7983                              <1> findpciioaddr:
  7984 000063CD E8A7000000          <1> 	call getpciaddr
  7985 000063D2 BAF80C0000          <1> 	mov edx, 0xCF8
  7986 000063D7 EF                  <1> 	out dx, eax
  7987 000063D8 BAFC0C0000          <1> 	mov edx, 0xCFC
  7988 000063DD ED                  <1> 	in eax, dx
  7989 000063DE 89C3                <1> 	mov ebx, eax
  7990 000063E0 81E301000000        <1> 	and ebx, 1
  7991 000063E6 81FB00000000        <1> 	cmp ebx, 0
  7992 000063EC 0F846E000000        <1> 	je near notpciioaddr
  7993 000063F2 2D01000000          <1> 	sub eax, 1
  7994 000063F7 89C2                <1> 	mov edx, eax
  7995 000063F9 31DB                <1> 	xor ebx, ebx
  7996 000063FB 4B                  <1> 	dec ebx
  7997 000063FC 891D[1E620000]      <1> 	mov [pcidevidmask], ebx
  7998 00006402 43                  <1> 	inc ebx
  7999 00006403 881D[A6620000]      <1> 	mov [pcitype], bl
  8000 00006409 891D[1A620000]      <1> 	mov [pcidevid], ebx
  8001 0000640F C3                  <1> 	ret
  8002                              <1> findpcimemaddr:
  8003 00006410 E864000000          <1> 	call getpciaddr
  8004 00006415 BAF80C0000          <1> 	mov edx, 0xCF8
  8005 0000641A EF                  <1> 	out dx, eax
  8006 0000641B BAFC0C0000          <1> 	mov edx, 0xCFC
  8007 00006420 ED                  <1> 	in eax, dx
  8008 00006421 89C3                <1> 	mov ebx, eax
  8009 00006423 81E301000000        <1> 	and ebx, 1
  8010 00006429 81FB01000000        <1> 	cmp ebx, 1
  8011 0000642F 0F842B000000        <1> 	je near notpciioaddr
  8012 00006435 C1E804              <1> 	shr eax, 4
  8013 00006438 C1E004              <1> 	shl eax, 4	;remove prefetch and type
  8014 0000643B 89C2                <1> 	mov edx, eax
  8015 0000643D 50                  <1> 	push eax
  8016 0000643E A1[41020000]        <1> 	mov eax, [basecache]
  8017 00006443 C1E004              <1> 	shl eax, 4
  8018 00006446 29C2                <1> 	sub edx, eax
  8019 00006448 58                  <1> 	pop eax
  8020 00006449 31DB                <1> 	xor ebx, ebx
  8021 0000644B 4B                  <1> 	dec ebx
  8022 0000644C 891D[1E620000]      <1> 	mov [pcidevidmask], ebx
  8023 00006452 43                  <1> 	inc ebx
  8024 00006453 881D[A6620000]      <1> 	mov [pcitype], bl
  8025 00006459 891D[1A620000]      <1> 	mov [pcidevid], ebx
  8026 0000645F C3                  <1> 	ret
  8027                              <1> notpciioaddr:
  8028 00006460 A0[18620000]        <1> 	mov al, [pciregister]
  8029 00006465 0404                <1> 	add al, 4
  8030 00006467 3C28                <1> 	cmp al, 0x28
  8031 00006469 0F8704FEFFFF        <1> 	ja near searchpciret
  8032 0000646F A2[18620000]        <1> 	mov [pciregister], al
  8033 00006474 E954FFFFFF          <1> 	jmp findpciioaddr
  8034                              <1> getpciaddr:		;;puts it in eax and ebx
  8035 00006479 31C0                <1> 			xor eax, eax
  8036 0000647B BB00000080          <1> 			mov ebx, 0x80000000
  8037 00006480 A0[15620000]        <1> 			mov al, [pcibus]
  8038 00006485 C1E010              <1> 			shl eax, 16
  8039 00006488 01C3                <1> 			add ebx, eax
  8040 0000648A 31C0                <1> 			xor eax, eax
  8041 0000648C A0[16620000]        <1> 			mov al, [pcidevice]
  8042 00006491 C1E00B              <1> 			shl eax, 11
  8043 00006494 01C3                <1> 			add ebx, eax
  8044 00006496 31C0                <1> 			xor eax, eax
  8045 00006498 A0[17620000]        <1> 			mov al, [pcifunction]
  8046 0000649D C1E008              <1> 			shl eax, 8
  8047 000064A0 01C3                <1> 			add ebx, eax
  8048 000064A2 31C0                <1> 			xor eax, eax
  8049 000064A4 A0[18620000]        <1> 			mov al, [pciregister]
  8050 000064A9 01C3                <1> 			add ebx, eax
  8051 000064AB 89D8                <1> 			mov eax, ebx
  8052 000064AD C3                  <1> 			ret
  8053                                      %include "source/disk.asm"
  8054                              <1> %ifdef disk.real
  8055                              <1> 	%include "source/drivers/disk/realmode.asm"
  8056                              <2> diskr:
  8057                              <2> 			;read from disk using real mode-it does not work with large files
  8058                              <2> 			;sector count in cl
  8059                              <2> 			;disk number in ch
  8060                              <2> 			;48 bit address with last 32 bits in ebx
  8061                              <2> 			;buffer in esi
  8062                              <2> 			;puts end of buffer in edi and end lba address in edx
  8063 000064AE 880D[DB640000]      <2> 	mov [sdlength], cl
  8064 000064B4 891D[DC640000]      <2> 	mov [sdaddress], ebx
  8065 000064BA 8935[3A660000]      <2> 	mov [oldesireal], esi
  8066 000064C0 66BE[E064]          <2> 	mov si, readdiskreal
  8067 000064C4 668935[D70C0000]    <2> 	mov [realmodeptr], si
  8068 000064CB BE[1C650000]        <2> 	mov esi, backfromrealread
  8069 000064D0 8935[D30C0000]      <2> 	mov [realmodereturn], esi
  8070 000064D6 E9E1A6FFFF          <2> 	jmp realmode
  8071 000064DB 00                  <2> sdlength db 0
  8072 000064DC 00000000            <2> sdaddress dd 0
  8073                              <2> 
  8074                              <2> [BITS 16]
  8075                              <2> readdiskreal:
  8076 000064E0 C706[0C65]1000      <2> 	mov word [dlen], 0x10
  8077 000064E6 C706[1065]0000      <2> 	mov word [daddress], 0
  8078 000064EC C706[1265]0001      <2> 	mov word [dsegm], 0x100
  8079 000064F2 66891E[1465]        <2> 	mov [dlbaad], ebx
  8080 000064F7 880E[0E65]          <2> 	mov [dreadlen], cl
  8081                              <2> ReadHardDisk:
  8082 000064FB BE[0C65]            <2> 	mov si, diskaddresspacket
  8083 000064FE 31C0                <2> 	xor ax, ax
  8084 00006500 B442                <2> 	mov ah, 0x42
  8085 00006502 8A16[0B65]          <2> 	mov dl, [dnumber]
  8086 00006506 CD13                <2> 	int 0x13
  8087 00006508 72F1                <2> 	jc ReadHardDisk
  8088 0000650A C3                  <2> 	ret
  8089                              <2> 
  8090 0000650B 80                  <2> dnumber db 0x80
  8091                              <2> diskaddresspacket:
  8092 0000650C 10                  <2> dlen:	db 0x10 ;size of packet
  8093 0000650D 00                  <2> 		db 0
  8094 0000650E 7F00                <2> dreadlen:	dw 0x7F	;blocks to read=maximum
  8095 00006510 0000                <2> daddress:	dw 0	;address 0
  8096 00006512 0001                <2> dsegm:		dw 0x100	;segment
  8097                              <2> 		;start with known value for hd
  8098                              <2> dlbaad:
  8099 00006514 00000000            <2> 	dd 0	;lba address
  8100 00006518 00000000            <2> 	dd 0
  8101                              <2> [BITS 32]
  8102                              <2> backfromrealread:
  8103 0000651C 8B35[3A660000]      <2> 	mov esi, [oldesireal]
  8104 00006522 8B1D[DC640000]      <2> 	mov ebx, [sdaddress]
  8105 00006528 31C9                <2> 	xor ecx, ecx
  8106 0000652A 8A0D[DB640000]      <2> 	mov cl, [sdlength]
  8107 00006530 01CB                <2> 	add ebx, ecx
  8108 00006532 66B80800            <2> 	mov ax, LINEAR_SEL
  8109 00006536 8EE0                <2> 	mov fs, ax
  8110 00006538 BF00100000          <2> 	mov edi, 0x1000
  8111 0000653D B200                <2> 	mov dl, 0
  8112 0000653F D0E1                <2> 	shl cl, 1
  8113                              <2> copyfromrmodedisk:
  8114 00006541 648A07              <2> 	mov al, [fs:edi]
  8115 00006544 8806                <2> 	mov [esi], al
  8116 00006546 47                  <2> 	inc edi
  8117 00006547 46                  <2> 	inc esi
  8118 00006548 FECA                <2> 	dec dl
  8119 0000654A 80FA00              <2> 	cmp dl, 0
  8120 0000654D 75F2                <2> 	jne copyfromrmodedisk
  8121 0000654F FEC9                <2> 	dec cl
  8122 00006551 B200                <2> 	mov dl, 0
  8123 00006553 80F900              <2> 	cmp cl, 0
  8124 00006556 75E9                <2> 	jne copyfromrmodedisk
  8125 00006558 66B83000            <2> 	mov ax, NEW_DATA_SEL
  8126 0000655C 8EE0                <2> 	mov fs, ax
  8127 0000655E 89F7                <2> 	mov edi, esi
  8128 00006560 8B35[3A660000]      <2> 	mov esi, [oldesireal]
  8129 00006566 89DA                <2> 	mov edx, ebx
  8130 00006568 8B1D[DC640000]      <2> 	mov ebx, [sdaddress]
  8131 0000656E C3                  <2> 	ret
  8132                              <2> 	
  8133                              <1> %else
  8134                              <1> 	%ifdef disk.protected
  8135                              <1> 		%include "source/drivers/disk/pata.asm"
  8136                              <1> 	%endif
  8137                              <1> %endif
  8138                              <1> %ifdef disk.none
  8139                              <1> loadfile:	xor edx, edx
  8140                              <1> 			cmp byte [edi], '&'
  8141                              <1> 			je .ret
  8142                              <1> 			mov edx, 404	;no files are found except &
  8143                              <1> 		.ret:
  8144                              <1> 			ret
  8145                              <1> %else
  8146                              <1> ;This loads files using the methods in the loaded driver
  8147                              <1> loadfile:	;loads a file with the name buffer's location in edi into location in esi
  8148                              <1> 			;returns with err code in edx and file end in edi
  8149 0000656F 803F00              <1> 	cmp byte [edi], 0
  8150 00006572 0F8448000000        <1> 	je near nofileload
  8151 00006578 89FA                <1> 	mov edx, edi
  8152 0000657A BB[9CD90000]        <1> 	mov ebx, diskfileindex
  8153                              <1> nextnamechar:
  8154 0000657F 8A07                <1> 	mov al, [edi]
  8155 00006581 3C26                <1> 	cmp al, '&'
  8156 00006583 7440                <1> 	je nullfile
  8157 00006585 8A23                <1> 	mov ah, [ebx]
  8158 00006587 47                  <1> 	inc edi
  8159 00006588 43                  <1> 	inc ebx
  8160 00006589 88C1                <1> 	mov cl, al
  8161 0000658B 08E1                <1> 	or cl, ah
  8162 0000658D 80F900              <1> 	cmp cl, 0
  8163 00006590 744E                <1> 	je equalfilenames
  8164 00006592 80F920              <1> 	cmp cl, ' '
  8165 00006595 7449                <1> 	je equalfilenames
  8166 00006597 3C2A                <1> 	cmp al, '*'
  8167 00006599 742B                <1> 	je equalfilenames2
  8168 0000659B 80FC00              <1> 	cmp ah, 0
  8169 0000659E 7410                <1> 	je nextfilename
  8170 000065A0 3C00                <1> 	cmp al, 0
  8171 000065A2 7404                <1> 	je getebxzero
  8172 000065A4 38E0                <1> 	cmp al, ah
  8173 000065A6 74D7                <1> 	je nextnamechar
  8174                              <1> getebxzero:
  8175 000065A8 8A23                <1> 	mov ah, [ebx]
  8176 000065AA 43                  <1> 	inc ebx
  8177 000065AB 80FC00              <1> 	cmp ah, 0
  8178 000065AE 75F8                <1> 	jne getebxzero
  8179                              <1> nextfilename:
  8180 000065B0 81C308000000        <1> 	add ebx, 8		;next descriptor
  8181 000065B6 89D7                <1> 	mov edi, edx
  8182 000065B8 81FB[9ADB0000]      <1> 	cmp ebx, enddiskfileindex
  8183 000065BE 72BF                <1> 	jb nextnamechar
  8184                              <1> nofileload:
  8185 000065C0 BA94010000          <1> 	mov edx, 404	;indicate not found error
  8186                              <1> nullfile:
  8187 000065C5 C3                  <1> 	ret
  8188                              <1> equalfilenames2:
  8189 000065C6 81EB02000000        <1> 	sub ebx, 2
  8190                              <1> eqfilefind:
  8191 000065CC 43                  <1> 	inc ebx
  8192 000065CD 81FB[9ADB0000]      <1> 	cmp ebx, enddiskfileindex
  8193 000065D3 0F83E7FFFFFF        <1> 	jae near nofileload
  8194 000065D9 8A03                <1> 	mov al, [ebx]
  8195 000065DB 3C00                <1> 	cmp al, 0
  8196 000065DD 75ED                <1> 	jne eqfilefind
  8197 000065DF 43                  <1> 	inc ebx
  8198                              <1> equalfilenames:
  8199 000065E0 8B4304              <1> 	mov eax, [ebx + 4] 	;put file size in eax
  8200 000065E3 8B1B                <1> 	mov ebx, [ebx]		;put file beginning in ebx
  8201 000065E5 031D[9EDB0000]      <1> 	add ebx, [lbaad]	;add offset to solleros start
  8202 000065EB 31C9                <1> 	xor ecx, ecx
  8203 000065ED 88C1                <1> 	mov cl, al			;get excess number of sectors
  8204 000065EF C0E102              <1> 	shl cl, 2
  8205 000065F2 C0E902              <1> 	shr cl, 2			;cut off at 64
  8206 000065F5 29C8                <1> 	sub eax, ecx		;get rid of excess sectors
  8207 000065F7 B500                <1> 	mov ch, 0			;drive 0
  8208 000065F9 C1E806              <1> 	shr eax, 6			;get number of 64 sector tracks
  8209                              <1> loaddiskfile:			;tracks in eax, excess sectors in cl, drive in ch, buffer in esi, address in ebx
  8210 000065FC A3[3E660000]        <1> 	mov [filetracks], eax
  8211 00006601 89F7                <1> 	mov edi, esi		;just in case cl is 0
  8212 00006603 89DA                <1> 	mov edx, ebx
  8213 00006605 80F900              <1> 	cmp cl, 0
  8214 00006608 7405                <1> 	je copytracksforfile
  8215 0000660A E89FFEFFFF          <1> 	call diskr	;take care of excess sectors
  8216                              <1> copytracksforfile:
  8217 0000660F A1[3E660000]        <1> 	mov eax, [filetracks]
  8218 00006614 3D00000000          <1> 	cmp eax, 0
  8219 00006619 7419                <1> 	je donecopyfile
  8220 0000661B 48                  <1> 	dec eax
  8221 0000661C A3[3E660000]        <1> 	mov [filetracks], eax
  8222 00006621 89D3                <1> 	mov ebx, edx	;get end lba
  8223 00006623 B140                <1> 	mov cl, 0x40 ;for compatability with BIOS it uses 64 instead of 128
  8224 00006625 8A2D[9DDB0000]      <1> 	mov ch, [DriveNumber]
  8225 0000662B 89FE                <1> 	mov esi, edi	;reset buffer
  8226 0000662D E87CFEFFFF          <1> 	call diskr
  8227 00006632 EBDB                <1> 	jmp copytracksforfile
  8228                              <1> donecopyfile:
  8229 00006634 BA00000000          <1> 	mov edx, 0	;no error
  8230 00006639 C3                  <1> 	ret
  8231                              <1> 
  8232 0000663A 00000000            <1> oldesireal dd 0
  8233 0000663E 00000000            <1> filetracks dd 0
  8234 00006642 00                  <1> lbad1 db 0
  8235 00006643 00                  <1> lbad2 db 0
  8236 00006644 00                  <1> lbad3 db 0
  8237 00006645 00                  <1> lbad4 db 0
  8238 00006646 00                  <1> lbad5 db 0
  8239 00006647 00                  <1> lbad6 db 0
  8240 00006648 6400                <1> segments dw 100
  8241                              <1> %endif
  8242                                      %include "source/threads.asm"
  8243                              <1> %ifdef threads.included	
  8244                              <1> nwcmdst:
  8245 0000664A 31C0                <1> 	xor eax, eax
  8246 0000664C BC[82ED0000]        <1> 	mov esp, stackend
  8247 00006651 A2[0E670000]        <1> 	mov [threadson], al
  8248 00006656 A3[0F670000]        <1> 	mov [currentthread], eax
  8249 0000665B 0504000000          <1> 	add eax, 4
  8250 00006660 A3[0A670000]        <1> 	mov [lastthread], eax
  8251 00006665 FB                  <1> 	sti
  8252 00006666 E94FC6FFFF          <1> 	jmp nwcmd
  8253                              <1> 
  8254                              <1> nomorethreadspace:
  8255 0000666B BE[81660000]        <1> 	mov esi, nmts
  8256 00006670 E8B6B6FFFF          <1> 	call print
  8257 00006675 C605[0E670000]00    <1> 	mov byte [threadson], 0
  8258 0000667C E939C6FFFF          <1> 	jmp nwcmd
  8259 00006681 546872656164204F76- <1> nmts	db "Thread Overflow",10,0
  8260 0000668A 6572666C6F770A00    <1>
  8261                              <1> 
  8262                              <1> nomorestackspace:
  8263 00006692 BE[9E660000]        <1> 	mov esi, nmss
  8264 00006697 E88FB6FFFF          <1> 	call print
  8265 0000669C EBAC                <1> 	jmp nwcmdst
  8266 0000669E 537461636B204F7665- <1> nmss	db "Stack Overflow",10,0
  8267 000066A7 72666C6F770A00      <1>
  8268                              <1> 	
  8269                              <1> threadswitch:
  8270 000066AE FA                  <1> 	cli
  8271 000066AF 60                  <1> 	pushad
  8272 000066B0 BF[30EA0200]        <1> 	mov edi, threadlist
  8273 000066B5 A1[0F670000]        <1> 	mov eax, [currentthread]
  8274 000066BA 40                  <1> 	inc eax
  8275 000066BB A3[0F670000]        <1> 	mov [currentthread], eax
  8276 000066C0 6648                <1> 	dec ax
  8277 000066C2 C1E002              <1> 	shl eax, 2
  8278 000066C5 01C7                <1> 	add edi, eax
  8279 000066C7 8927                <1> 	mov [edi], esp
  8280 000066C9 81C704000000        <1> 	add edi, 4
  8281 000066CF 81FF[30FA0200]      <1> 	cmp edi, threadlistend
  8282 000066D5 0F830D000000        <1> 	jae near nookespthread
  8283 000066DB 8B07                <1> 	mov eax, [edi]
  8284 000066DD 3D00000000          <1> 	cmp eax, 0
  8285 000066E2 0F8519000000        <1> 	jne near okespthread
  8286                              <1> nookespthread:
  8287 000066E8 BF[30EA0200]        <1> 	mov edi, threadlist
  8288 000066ED 31C0                <1> 	xor eax, eax
  8289 000066EF A3[0F670000]        <1> 	mov [currentthread], eax
  8290 000066F4 8B07                <1> 	mov eax, [edi]
  8291 000066F6 3D00000000          <1> 	cmp eax, 0
  8292 000066FB 0F8449FFFFFF        <1> 	je near nwcmdst
  8293                              <1> okespthread:
  8294 00006701 89C4                <1> 	mov esp, eax
  8295 00006703 B020                <1> 	mov al, 0x20
  8296 00006705 E620                <1> 	out 0x20, al
  8297 00006707 61                  <1> 	popad
  8298 00006708 FB                  <1> 	sti
  8299 00006709 CF                  <1> 	iret
  8300                              <1> 
  8301                              <1> %endif
  8302 0000670A 04000000            <1> 	lastthread dd 4
  8303 0000670E 00                  <1> 	threadson db 0
  8304 0000670F 00000000            <1> 	currentthread dd 0
  8305                                  %ifdef gui.included
  8306                                      %include "source/gui/gui.asm"
  8307                              <1> guiboot:	;Let's see what I can do, I am going to try to make this as freestanding as possible
  8308 00006713 31C0                <1> 	xor eax, eax
  8309 00006715 31DB                <1> 	xor ebx, ebx
  8310 00006717 31C9                <1> 	xor ecx, ecx
  8311 00006719 31D2                <1> 	xor edx, edx
  8312 0000671B E871080000          <1> 	call guisetup
  8313                              <1> guiloop:
  8314 00006720 E8EEF0FFFF          <1> 	call cursorgui
  8315                              <1> guistart:
  8316 00006725 E8C2F4FFFF          <1> 	call getkey
  8317 0000672A C605[127C0000]00    <1> 	mov byte [copygui], 0
  8318 00006731 EBF2                <1> 	jmp guistart
  8319                              <1> 
  8320                              <1> %include "source/gui/bmp.asm"
  8321                              <2> showbmp:
  8322 00006733 668B06              <2> 	mov ax, [esi]
  8323 00006736 663D424D            <2> 	cmp ax, "BM"
  8324 0000673A 0F85BB000000        <2> 	jne near endedbmp
  8325 00006740 8B3D[36570000]      <2> 	mov edi, [physbaseptr]
  8326 00006746 6689D0              <2> 	mov ax, dx
  8327 00006749 6689CB              <2> 	mov bx, cx
  8328 0000674C 31C9                <2> 	xor ecx, ecx
  8329 0000674E 31D2                <2> 	xor edx, edx
  8330 00006750 6689D9              <2> 	mov cx, bx
  8331 00006753 6689C2              <2> 	mov dx, ax
  8332 00006756 01D7                <2> 	add edi, edx
  8333 00006758 01D7                <2> 	add edi, edx
  8334 0000675A 31D2                <2> 	xor edx, edx
  8335 0000675C 668B15[0E580000]    <2> 	mov dx, [resolutionx2]
  8336 00006763 034E16              <2> 	add ecx, [esi + 22]
  8337                              <2> bmplocloop:
  8338 00006766 52                  <2> 	push edx
  8339 00006767 31C0                <2> 	xor eax, eax
  8340 00006769 6689D0              <2> 	mov ax, dx
  8341 0000676C F7E1                <2> 	mul ecx
  8342 0000676E 5A                  <2> 	pop edx
  8343 0000676F 663B0D[22570000]    <2> 	cmp cx, [resolutiony]
  8344 00006776 7609                <2> 	jbe .nofixy
  8345 00006778 31C9                <2> 	xor ecx, ecx
  8346 0000677A 668B0D[22570000]    <2> 	mov cx, [resolutiony]
  8347                              <2> .nofixy:
  8348 00006781 01C7                <2> 	add edi, eax
  8349 00006783 8B5612              <2> 	mov edx, [esi + 18]
  8350 00006786 8B4E16              <2> 	mov ecx, [esi + 22]
  8351 00006789 8B460A              <2> 	mov eax, [esi + 10]
  8352 0000678C 8B5E02              <2> 	mov ebx, [esi + 2]
  8353 0000678F 01F3                <2> 	add ebx, esi
  8354 00006791 891D[01680000]      <2> 	mov [bmpend], ebx
  8355 00006797 89D3                <2> 	mov ebx, edx
  8356 00006799 01C6                <2> 	add esi, eax
  8357                              <2> ldxbmp2:
  8358 0000679B 31D2                <2> 	xor edx, edx
  8359 0000679D 668B15[20570000]    <2> 	mov dx, [resolutionx]
  8360 000067A4 39D3                <2> 	cmp ebx, edx
  8361 000067A6 7702                <2> 	ja ldxbmp
  8362 000067A8 89DA                <2> 	mov edx, ebx
  8363                              <2> ldxbmp:
  8364 000067AA 668B06              <2> 	mov ax, [esi]
  8365 000067AD 668907              <2> 	mov [edi], ax
  8366 000067B0 81C702000000        <2> 	add edi, 2
  8367 000067B6 81C602000000        <2> 	add esi, 2
  8368 000067BC 3B35[01680000]      <2> 	cmp esi, [bmpend]
  8369 000067C2 7737                <2> 	ja endedbmp
  8370 000067C4 4A                  <2> 	dec edx
  8371 000067C5 81FA00000000        <2> 	cmp edx, 0
  8372 000067CB 77DD                <2> 	ja ldxbmp
  8373 000067CD 31D2                <2> 	xor edx, edx
  8374 000067CF 668B15[20570000]    <2> 	mov dx, [resolutionx]
  8375 000067D6 39D3                <2> 	cmp ebx, edx
  8376 000067D8 7610                <2> 	jbe .notover
  8377                              <2> .over:
  8378 000067DA 01DE                <2> 	add esi, ebx
  8379 000067DC 01DE                <2> 	add esi, ebx
  8380 000067DE 29D6                <2> 	sub esi, edx
  8381 000067E0 29D6                <2> 	sub esi, edx
  8382 000067E2 01DF                <2> 	add edi, ebx
  8383 000067E4 01DF                <2> 	add edi, ebx
  8384 000067E6 29D7                <2> 	sub edi, edx
  8385 000067E8 29D7                <2> 	sub edi, edx
  8386                              <2> .notover:
  8387 000067EA 29DF                <2> 	sub edi, ebx
  8388 000067EC 29DF                <2> 	sub edi, ebx
  8389 000067EE 29D7                <2> 	sub edi, edx
  8390 000067F0 29D7                <2> 	sub edi, edx
  8391 000067F2 49                  <2> 	dec ecx
  8392 000067F3 81F900000000        <2> 	cmp ecx, 0
  8393 000067F9 77A0                <2> 	ja ldxbmp2
  8394                              <2> endedbmp:
  8395 000067FB E844030000          <2> 	call switchmousepos2
  8396 00006800 C3                  <2> 	ret
  8397                              <2> 	
  8398 00006801 00000000            <2> 	bmpend dd 0
  8399                              <1> %include "source/gui/circle.asm"
  8400                              <2> drawcircle:	;center in (dx,cx), color in si, radius in ax
  8401 00006805 55                  <2> 	push ebp
  8402 00006806 663D0000            <2> 	cmp ax, 0
  8403 0000680A 770A                <2> 	ja .nozerocircle
  8404 0000680C E8F61B0000          <2> 	call putpixel	;the easiest circle ever
  8405 00006811 E9F7000000          <2> 	jmp .done
  8406                              <2> .nozerocircle:
  8407 00006816 6689F5              <2> 	mov bp, si
  8408 00006819 6650                <2> 	push ax
  8409 0000681B E8281C0000          <2> 	call getpixelmem
  8410 00006820 31C0                <2> 	xor eax, eax
  8411 00006822 6658                <2> 	pop ax
  8412 00006824 BE01000000          <2> 	mov esi, 1
  8413 00006829 29C6                <2> 	sub esi, eax
  8414 0000682B 89C1                <2> 	mov ecx, eax
  8415 0000682D 31C0                <2> 	xor eax, eax
  8416 0000682F 66A1[0E580000]      <2> 	mov ax, [resolutionx2]
  8417 00006835 F7E1                <2> 	mul ecx
  8418 00006837 50                  <2> 	push eax
  8419 00006838 31D2                <2> 	xor edx, edx
  8420 0000683A 01C7                <2> 	add edi, eax
  8421 0000683C 66892F              <2> 	mov [edi], bp
  8422 0000683F 29C7                <2> 	sub edi, eax
  8423 00006841 29C7                <2> 	sub edi, eax
  8424 00006843 66892F              <2> 	mov [edi], bp
  8425 00006846 01C7                <2> 	add edi, eax
  8426 00006848 D1E1                <2> 	shl ecx, 1
  8427 0000684A 01CF                <2> 	add edi, ecx
  8428 0000684C 66892F              <2> 	mov [edi], bp
  8429 0000684F D1E1                <2> 	shl ecx, 1
  8430 00006851 29CF                <2> 	sub edi, ecx
  8431 00006853 66892F              <2> 	mov [edi], bp
  8432 00006856 D1E9                <2> 	shr ecx, 1
  8433 00006858 01CF                <2> 	add edi, ecx
  8434 0000685A D1E9                <2> 	shr ecx, 1
  8435 0000685C B802000000          <2> 	mov eax, 2
  8436 00006861 F7E1                <2> 	mul ecx
  8437 00006863 48                  <2> 	dec eax
  8438 00006864 F7D0                <2> 	not eax ;make it negative
  8439 00006866 A3[13690000]        <2> 	mov [.ddF_y], eax
  8440 0000686B 58                  <2> 	pop eax
  8441 0000686C BB01000000          <2> 	mov ebx, 1
  8442 00006871 891D[0F690000]      <2> 	mov [.ddF_x], ebx
  8443 00006877 4B                  <2> 	dec ebx
  8444 00006878 31D2                <2> 	xor edx, edx
  8445 0000687A E904000000          <2> 	jmp .lp
  8446                              <2> .lpb:
  8447 0000687F D1EA                <2> 	shr edx, 1
  8448 00006881 D1E9                <2> 	shr ecx, 1
  8449                              <2> .lp:	;it starts this with the center in edi
  8450                              <2> 		;color in bp
  8451                              <2> 		;ddF_x in memory
  8452                              <2> 		;x*resolutionx2 in ebx
  8453                              <2> 		;x in edx
  8454                              <2> 		;ddF_y in memory
  8455                              <2> 		;y*resolutionx2 in eax
  8456                              <2> 		;f in esi
  8457                              <2> 		;y in ecx
  8458 00006883 81FE00000080        <2> 	cmp esi, 0x80000000 ;this means it is not negative
  8459 00006889 7717                <2> 	ja	.noddF_y
  8460 0000688B 49                  <2> 	dec ecx
  8461 0000688C 2B05[0E580000]      <2> 	sub eax, [resolutionx2]
  8462 00006892 8105[13690000]0200- <2> 	add dword [.ddF_y], 2
  8463 0000689A 0000                <2>
  8464 0000689C 0335[13690000]      <2> 	add esi, [.ddF_y]
  8465                              <2> .noddF_y:
  8466 000068A2 42                  <2> 	inc edx
  8467 000068A3 031D[0E580000]      <2> 	add ebx, [resolutionx2]
  8468 000068A9 8105[0F690000]0200- <2> 	add dword [.ddF_x], 2
  8469 000068B1 0000                <2>
  8470 000068B3 0335[0F690000]      <2> 	add esi, [.ddF_x]
  8471                              <2> 
  8472 000068B9 D1E2                <2> 	shl edx, 1
  8473 000068BB D1E1                <2> 	shl ecx, 1
  8474 000068BD 01D7                <2> 	add edi, edx
  8475 000068BF 01C7                <2> 	add edi, eax
  8476 000068C1 66892F              <2> 	mov [edi], bp	;(cx+x,cy+y)
  8477 000068C4 D1E2                <2> 	shl edx, 1
  8478 000068C6 29D7                <2> 	sub edi, edx
  8479 000068C8 66892F              <2> 	mov [edi], bp	;(cx-x,cy+y)
  8480 000068CB D1E0                <2> 	shl eax, 1
  8481 000068CD 29C7                <2> 	sub edi, eax
  8482 000068CF 66892F              <2> 	mov [edi], bp	;(cx-x,cy-y)
  8483 000068D2 01D7                <2> 	add edi, edx
  8484 000068D4 66892F              <2> 	mov [edi], bp	;(cx+x,cy-y)
  8485 000068D7 D1E8                <2> 	shr eax, 1
  8486 000068D9 D1EA                <2> 	shr edx, 1
  8487 000068DB 01C7                <2> 	add edi, eax
  8488 000068DD 29D7                <2> 	sub edi, edx
  8489                              <2> 
  8490 000068DF 39D1                <2> 	cmp ecx, edx
  8491 000068E1 749C                <2> 	je .lpb
  8492                              <2> 
  8493 000068E3 01DF                <2> 	add edi, ebx
  8494 000068E5 01CF                <2> 	add edi, ecx
  8495 000068E7 66892F              <2> 	mov [edi], bp	;(cx+y,cy+x)
  8496 000068EA D1E1                <2> 	shl ecx, 1
  8497 000068EC 29CF                <2> 	sub edi, ecx
  8498 000068EE 66892F              <2> 	mov [edi], bp	;(cx-y,cy+x)
  8499 000068F1 D1E3                <2> 	shl ebx, 1
  8500 000068F3 29DF                <2> 	sub edi, ebx
  8501 000068F5 66892F              <2> 	mov [edi], bp	;(cx-y,cy-x)
  8502 000068F8 01CF                <2> 	add edi, ecx
  8503 000068FA 66892F              <2> 	mov [edi], bp	;(cx+y,cy-x)
  8504 000068FD D1EB                <2> 	shr ebx, 1
  8505 000068FF D1E9                <2> 	shr ecx, 1
  8506 00006901 01DF                <2> 	add edi, ebx
  8507 00006903 29CF                <2> 	sub edi, ecx
  8508 00006905 39CA                <2> 	cmp edx, ecx
  8509 00006907 0F8272FFFFFF        <2> 	jb .lpb
  8510                              <2> .done:
  8511 0000690D 5D                  <2> 	pop ebp
  8512 0000690E C3                  <2> 	ret
  8513                              <2> 	
  8514 0000690F 00000000            <2> .ddF_x dd 0
  8515 00006913 00000000            <2> .ddF_y dd 0
  8516                              <2> 
  8517                              <2> fillcircle:	;center in (dx,cx), color in si, radius in ax
  8518 00006917 55                  <2> 	push ebp
  8519 00006918 663D0000            <2> 	cmp ax, 0
  8520 0000691C 770A                <2> 	ja .nozerocircle
  8521 0000691E E8E41A0000          <2> 	call putpixel	;the easiest circle ever
  8522 00006923 E95A010000          <2> 	jmp .done
  8523                              <2> .nozerocircle:
  8524 00006928 6689F5              <2> 	mov bp, si
  8525 0000692B 6650                <2> 	push ax
  8526 0000692D E8161B0000          <2> 	call getpixelmem
  8527 00006932 31C0                <2> 	xor eax, eax
  8528 00006934 6658                <2> 	pop ax
  8529 00006936 BE01000000          <2> 	mov esi, 1
  8530 0000693B 29C6                <2> 	sub esi, eax
  8531 0000693D 89C1                <2> 	mov ecx, eax
  8532 0000693F 31C0                <2> 	xor eax, eax
  8533 00006941 66A1[0E580000]      <2> 	mov ax, [resolutionx2]
  8534 00006947 F7E1                <2> 	mul ecx
  8535 00006949 50                  <2> 	push eax
  8536 0000694A 31D2                <2> 	xor edx, edx
  8537 0000694C 01C7                <2> 	add edi, eax
  8538 0000694E 66892F              <2> 	mov [edi], bp
  8539 00006951 29C7                <2> 	sub edi, eax
  8540 00006953 29C7                <2> 	sub edi, eax
  8541 00006955 66892F              <2> 	mov [edi], bp
  8542 00006958 01C7                <2> 	add edi, eax
  8543 0000695A D1E1                <2> 	shl ecx, 1
  8544 0000695C 01CF                <2> 	add edi, ecx
  8545 0000695E 51                  <2> 	push ecx
  8546                              <2> .s0:
  8547 0000695F 66892F              <2> 	mov [edi], bp
  8548 00006962 81EF02000000        <2> 	sub edi, 2
  8549 00006968 49                  <2> 	dec ecx
  8550 00006969 81F900000000        <2> 	cmp ecx, 0
  8551 0000696F 75EE                <2> 	jne .s0
  8552 00006971 66892F              <2> 	mov [edi], bp
  8553 00006974 59                  <2> 	pop ecx
  8554 00006975 01CF                <2> 	add edi, ecx
  8555 00006977 D1E9                <2> 	shr ecx, 1
  8556 00006979 B802000000          <2> 	mov eax, 2
  8557 0000697E F7E1                <2> 	mul ecx
  8558 00006980 48                  <2> 	dec eax
  8559 00006981 F7D0                <2> 	not eax ;make it negative
  8560 00006983 A3[886A0000]        <2> 	mov [.ddF_y], eax
  8561 00006988 58                  <2> 	pop eax
  8562 00006989 BB01000000          <2> 	mov ebx, 1
  8563 0000698E 891D[846A0000]      <2> 	mov [.ddF_x], ebx
  8564 00006994 4B                  <2> 	dec ebx
  8565 00006995 31D2                <2> 	xor edx, edx
  8566 00006997 E904000000          <2> 	jmp .lp
  8567                              <2> .lpb:
  8568 0000699C D1EA                <2> 	shr edx, 1
  8569 0000699E D1E9                <2> 	shr ecx, 1
  8570                              <2> .lp:	;it starts this with the center in edi
  8571                              <2> 		;color in bp
  8572                              <2> 		;ddF_x in memory
  8573                              <2> 		;x*resolutionx2 in ebx
  8574                              <2> 		;x in edx
  8575                              <2> 		;ddF_y in memory
  8576                              <2> 		;y*resolutionx2 in eax
  8577                              <2> 		;f in esi
  8578                              <2> 		;y in ecx
  8579 000069A0 81FE00000080        <2> 	cmp esi, 0x80000000 ;this means it is not negative
  8580 000069A6 7717                <2> 	ja	.noddF_y
  8581 000069A8 49                  <2> 	dec ecx
  8582 000069A9 2B05[0E580000]      <2> 	sub eax, [resolutionx2]
  8583 000069AF 8105[886A0000]0200- <2> 	add dword [.ddF_y], 2
  8584 000069B7 0000                <2>
  8585 000069B9 0335[886A0000]      <2> 	add esi, [.ddF_y]
  8586                              <2> .noddF_y:
  8587 000069BF 42                  <2> 	inc edx
  8588 000069C0 031D[0E580000]      <2> 	add ebx, [resolutionx2]
  8589 000069C6 8105[846A0000]0200- <2> 	add dword [.ddF_x], 2
  8590 000069CE 0000                <2>
  8591 000069D0 0335[846A0000]      <2> 	add esi, [.ddF_x]
  8592                              <2> 
  8593 000069D6 D1E2                <2> 	shl edx, 1
  8594 000069D8 D1E1                <2> 	shl ecx, 1
  8595 000069DA 52                  <2> 	push edx
  8596 000069DB 29D7                <2> 	sub edi, edx
  8597 000069DD 01C7                <2> 	add edi, eax
  8598 000069DF 81FA00000000        <2> 	cmp edx, 0
  8599 000069E5 7412                <2> 	je .nos1
  8600                              <2> .s1:
  8601 000069E7 66892F              <2> 	mov [edi], bp	;(cx-x,cy+y)
  8602 000069EA 81C702000000        <2> 	add edi, 2
  8603 000069F0 4A                  <2> 	dec edx
  8604 000069F1 81FA00000000        <2> 	cmp edx, 0
  8605 000069F7 75EE                <2> 	jne .s1
  8606                              <2> .nos1:
  8607 000069F9 66892F              <2> 	mov [edi], bp
  8608 000069FC 5A                  <2> 	pop edx
  8609 000069FD 52                  <2> 	push edx
  8610 000069FE 29C7                <2> 	sub edi, eax
  8611 00006A00 29C7                <2> 	sub edi, eax
  8612 00006A02 81FA00000000        <2> 	cmp edx, 0
  8613 00006A08 7412                <2> 	je .nos2
  8614                              <2> .s2:
  8615 00006A0A 66892F              <2> 	mov [edi], bp	;(cx+x,cy-y)
  8616 00006A0D 81EF02000000        <2> 	sub edi, 2
  8617 00006A13 4A                  <2> 	dec edx
  8618 00006A14 81FA00000000        <2> 	cmp edx, 0
  8619 00006A1A 75EE                <2> 	jne .s2
  8620                              <2> .nos2:
  8621 00006A1C 66892F              <2> 	mov [edi], bp
  8622 00006A1F 5A                  <2> 	pop edx
  8623 00006A20 01C7                <2> 	add edi, eax	;(cx-x,cy-y)
  8624 00006A22 01D7                <2> 	add edi, edx
  8625                              <2> 
  8626 00006A24 39D1                <2> 	cmp ecx, edx
  8627 00006A26 0F8470FFFFFF        <2> 	je .lpb
  8628                              <2> 
  8629 00006A2C 51                  <2> 	push ecx
  8630 00006A2D 01DF                <2> 	add edi, ebx
  8631 00006A2F 29CF                <2> 	sub edi, ecx
  8632 00006A31 81F900000000        <2> 	cmp ecx, 0
  8633 00006A37 7412                <2> 	je .nos3
  8634                              <2> .s3:
  8635 00006A39 66892F              <2> 	mov [edi], bp	;(cx-y,cy+x)
  8636 00006A3C 81C702000000        <2> 	add edi, 2
  8637 00006A42 49                  <2> 	dec ecx
  8638 00006A43 81F900000000        <2> 	cmp ecx, 0
  8639 00006A49 75EE                <2> 	jne .s3
  8640                              <2> .nos3:
  8641 00006A4B 66892F              <2> 	mov [edi], bp
  8642 00006A4E 59                  <2> 	pop ecx
  8643 00006A4F 51                  <2> 	push ecx
  8644 00006A50 29DF                <2> 	sub edi, ebx
  8645 00006A52 29DF                <2> 	sub edi, ebx
  8646 00006A54 81F900000000        <2> 	cmp ecx, 0
  8647 00006A5A 7412                <2> 	je .nos4
  8648                              <2> .s4:
  8649 00006A5C 66892F              <2> 	mov [edi], bp	;(cx+y,cy-x)
  8650 00006A5F 81EF02000000        <2> 	sub edi, 2
  8651 00006A65 49                  <2> 	dec ecx
  8652 00006A66 81F900000000        <2> 	cmp ecx, 0
  8653 00006A6C 75EE                <2> 	jne .s4
  8654                              <2> .nos4:
  8655 00006A6E 66892F              <2> 	mov [edi], bp
  8656 00006A71 59                  <2> 	pop ecx
  8657 00006A72 01DF                <2> 	add edi, ebx	;(cx-y,cy-x)
  8658 00006A74 01CF                <2> 	add edi, ecx
  8659                              <2> 
  8660 00006A76 D1EA                <2> 	shr edx, 1
  8661 00006A78 D1E9                <2> 	shr ecx, 1
  8662 00006A7A 39CA                <2> 	cmp edx, ecx
  8663 00006A7C 0F821EFFFFFF        <2> 	jb .lp
  8664                              <2> .done:
  8665 00006A82 5D                  <2> 	pop ebp
  8666 00006A83 C3                  <2> 	ret
  8667                              <2> 	
  8668 00006A84 00000000            <2> .ddF_x dd 0
  8669 00006A88 00000000            <2> .ddF_y dd 0
  8670                              <1> %include "source/gui/cursor.asm"
  8671                              <2> clearmousecursor:
  8672 00006A8C BE[F46D0000]        <2> 		mov esi, background
  8673 00006A91 8B3D[36570000]      <2> 		mov edi, [physbaseptr]
  8674 00006A97 31D2                <2> 		xor edx, edx
  8675 00006A99 31C9                <2> 		xor ecx, ecx
  8676 00006A9B 668B15[005A0000]    <2> 		mov dx, [lastmouseposition]
  8677 00006AA2 668B0D[025A0000]    <2> 		mov cx, [lastmouseposition + 2]
  8678 00006AA9 01D7                <2> 		add edi, edx
  8679 00006AAB 31D2                <2> 		xor edx, edx
  8680 00006AAD 668B15[0E580000]    <2> 		mov dx, [resolutionx2]
  8681 00006AB4 81F900000000        <2> 		cmp ecx, 0
  8682 00006ABA 7408                <2> 		je .nomul
  8683 00006ABC 52                  <2> 		push edx
  8684 00006ABD 89D0                <2> 		mov eax, edx
  8685 00006ABF F7E1                <2> 		mul ecx
  8686 00006AC1 01C7                <2> 		add edi, eax
  8687 00006AC3 5A                  <2> 		pop edx
  8688                              <2> .nomul:
  8689                              <2> %ifdef 	gui.background
  8690                              <2> 		cmp dword [backgroundimage], 0
  8691                              <2> 		je .noyclr
  8692                              <2> 		mov esi, [backgroundimage]
  8693                              <2> 		sub edi, [physbaseptr]
  8694                              <2> 		add esi, edi
  8695                              <2> 		add edi, [physbaseptr]
  8696                              <2> .backlp:
  8697                              <2> 		xor ebx, ebx
  8698                              <2> .noyback:
  8699                              <2> 		mov eax, [esi + ebx]
  8700                              <2> 		mov [edi + ebx], eax
  8701                              <2> 		add ebx, 4
  8702                              <2> 		cmp ebx, 16
  8703                              <2> 		jne .noyback
  8704                              <2> 		add edi, edx
  8705                              <2> 		add esi, edx
  8706                              <2> 		inc cx
  8707                              <2> 		cmp cx, 16
  8708                              <2> 		jb .backlp
  8709                              <2> 		ret
  8710                              <2> %endif
  8711                              <2> .noyclr:
  8712 00006AC4 668B06              <2> 		mov ax, [esi]
  8713 00006AC7 C1C010              <2> 		rol eax, 16
  8714 00006ACA 668B06              <2> 		mov ax, [esi]
  8715 00006ACD 8907                <2> 		mov [edi], eax
  8716 00006ACF 894704              <2> 		mov [edi + 4], eax
  8717 00006AD2 894708              <2> 		mov [edi + 8], eax
  8718 00006AD5 89470C              <2> 		mov [edi + 12], eax
  8719 00006AD8 01D7                <2> 		add edi, edx
  8720 00006ADA 6641                <2> 		inc cx
  8721 00006ADC 6681F91000          <2> 		cmp cx, 16
  8722 00006AE1 72E1                <2> 		jb .noyclr
  8723 00006AE3 C3                  <2> 		ret
  8724                              <2> 
  8725                              <2> switchmousepos:		;;switch were the mouse is located
  8726 00006AE4 BE[7B0E0100]        <2> 		mov esi, mousecolorbuf
  8727 00006AE9 8B3D[36570000]      <2> 		mov edi, [physbaseptr]
  8728 00006AEF 31D2                <2> 		xor edx, edx
  8729 00006AF1 31C9                <2> 		xor ecx, ecx
  8730 00006AF3 668B15[005A0000]    <2> 		mov dx, [lastmouseposition]
  8731 00006AFA 668B0D[025A0000]    <2> 		mov cx, [lastmouseposition + 2]
  8732 00006B01 01D7                <2> 		add edi, edx
  8733 00006B03 31D2                <2> 		xor edx, edx
  8734 00006B05 668B15[0E580000]    <2> 		mov dx, [resolutionx2]
  8735 00006B0C 6681F90000          <2> 		cmp cx, 0
  8736 00006B11 740B                <2> 		je noswmsy
  8737 00006B13 01D7                <2> swmsy:		add edi, edx
  8738 00006B15 6649                <2> 		dec cx
  8739 00006B17 6681F90000          <2> 		cmp cx, 0
  8740 00006B1C 75F5                <2> 		jne swmsy
  8741 00006B1E 8B06                <2> noswmsy:	mov eax, [esi]
  8742 00006B20 8B5E04              <2> 		mov ebx, [esi + 4]
  8743 00006B23 8907                <2> 		mov [edi], eax
  8744 00006B25 895F04              <2> 		mov [edi + 4], ebx
  8745 00006B28 8B4608              <2> 		mov eax, [esi + 8]
  8746 00006B2B 8B5E0C              <2> 		mov ebx, [esi + 12]
  8747 00006B2E 894708              <2> 		mov [edi + 8], eax
  8748 00006B31 895F0C              <2> 		mov [edi + 12], ebx
  8749 00006B34 01D7                <2> 		add edi, edx
  8750 00006B36 81C610000000        <2> 		add esi, 16
  8751 00006B3C 81FE[7B0F0100]      <2> 		cmp esi, mcolorend
  8752 00006B42 72DA                <2> 		jb noswmsy
  8753                              <2> 		
  8754                              <2> switchmousepos2:
  8755 00006B44 BE[7B0E0100]        <2> 		mov esi, mousecolorbuf
  8756 00006B49 8B3D[36570000]      <2> 		mov edi, [physbaseptr]
  8757 00006B4F 31D2                <2> 		xor edx, edx
  8758 00006B51 31C9                <2> 		xor ecx, ecx
  8759 00006B53 668B15[045A0000]    <2> 		mov dx, [mousecursorposition]
  8760 00006B5A 668B0D[065A0000]    <2> 		mov cx, [mousecursorposition + 2]
  8761 00006B61 01D7                <2> 		add edi, edx
  8762 00006B63 31D2                <2> 		xor edx, edx
  8763 00006B65 668B15[0E580000]    <2> 		mov dx, [resolutionx2]
  8764 00006B6C 6681F90000          <2> 		cmp cx, 0
  8765 00006B71 740B                <2> 		je noswmsy2
  8766 00006B73 01D7                <2> swmsy2:		add edi, edx
  8767 00006B75 6649                <2> 		dec cx
  8768 00006B77 6681F90000          <2> 		cmp cx, 0
  8769 00006B7C 75F5                <2> 		jne swmsy2
  8770 00006B7E 8B07                <2> noswmsy2:	mov eax, [edi]
  8771 00006B80 8B5F04              <2> 		mov ebx, [edi + 4]
  8772 00006B83 8906                <2> 		mov [esi], eax
  8773 00006B85 895E04              <2> 		mov [esi + 4], ebx
  8774 00006B88 8B4708              <2> 		mov eax, [edi + 8]
  8775 00006B8B 8B5F0C              <2> 		mov ebx, [edi + 12]
  8776 00006B8E 894608              <2> 		mov [esi + 8], eax
  8777 00006B91 895E0C              <2> 		mov [esi + 12], ebx
  8778 00006B94 01D7                <2> 		add edi, edx
  8779 00006B96 81C610000000        <2> 		add esi, 16
  8780 00006B9C 81FE[7B0F0100]      <2> 		cmp esi, mcolorend
  8781 00006BA2 72DA                <2> 		jb noswmsy2
  8782 00006BA4 C3                  <2> 		ret
  8783                              <2> 		
  8784                              <1> %include "source/gui/icon.asm"
  8785 00006BA5 0000                <2> iconcolor dw 0
  8786                              <2> 	showicon:	;;icon in si, position in (dx,cx), selected in ax, code in bx
  8787 00006BA7 A2[70840000]        <2> 		mov [iconselected], al
  8788 00006BAC 8025[70840000]01    <2> 		and byte [iconselected], 1
  8789 00006BB3 B401                <2> 		mov ah, 1
  8790 00006BB5 E8DF150000          <2> 		call graphicsadd
  8791                              <2> 	showicon2:
  8792 00006BBA 8B3D[36570000]      <2> 		mov edi, [physbaseptr]
  8793 00006BC0 6601D2              <2> 		add dx, dx
  8794 00006BC3 663B15[0E580000]    <2> 		cmp dx, [resolutionx2]
  8795 00006BCA 720C                <2> 		jb screenxgood
  8796 00006BCC 668B15[0E580000]    <2> 		mov dx, [resolutionx2]
  8797 00006BD3 6681EA4000          <2> 		sub dx, 64
  8798                              <2> 	screenxgood:
  8799 00006BD8 6681F90000          <2> 		cmp cx, 0
  8800 00006BDD 742B                <2> 		je noscreenygoodchk
  8801 00006BDF 663B0D[22570000]    <2> 		cmp cx, [resolutiony]
  8802 00006BE6 720C                <2> 		jb screenygood
  8803 00006BE8 668B0D[22570000]    <2> 		mov cx, [resolutiony]
  8804 00006BEF 6681E92000          <2> 		sub cx, 32
  8805                              <2> 	screenygood:
  8806 00006BF4 50                  <2> 		push eax
  8807 00006BF5 52                  <2> 		push edx
  8808 00006BF6 31C0                <2> 		xor eax, eax
  8809 00006BF8 31DB                <2> 		xor ebx, ebx
  8810 00006BFA 668B1D[0E580000]    <2> 		mov bx, [resolutionx2]
  8811 00006C01 6689C8              <2> 		mov ax, cx
  8812 00006C04 F7E3                <2> 		mul ebx
  8813 00006C06 01C7                <2> 		add edi, eax
  8814 00006C08 5A                  <2> 		pop edx
  8815 00006C09 58                  <2> 		pop eax
  8816                              <2> 	noscreenygoodchk:
  8817 00006C0A 31DB                <2> 		xor ebx, ebx
  8818 00006C0C 6689D3              <2> 		mov bx, dx
  8819 00006C0F 01DF                <2> 		add edi, ebx
  8820 00006C11 6631C9              <2> 		xor cx, cx
  8821 00006C14 668B06              <2> 		mov ax, [esi]
  8822 00006C17 81C602000000        <2> 		add esi, 2
  8823 00006C1D 66A3[A56B0000]      <2> 		mov [iconcolor], ax
  8824                              <2> 	writeicon:
  8825 00006C23 8B06                <2> 		mov eax, [esi]
  8826 00006C25 D1C0                <2> 		rol eax, 1
  8827 00006C27 30C9                <2> 		xor cl, cl
  8828                              <2> 	writeiconline:
  8829 00006C29 B201                <2> 		mov dl, 1
  8830 00006C2B 20C2                <2> 		and dl, al
  8831 00006C2D 3215[70840000]      <2> 		xor dl, [iconselected]
  8832 00006C33 668B1D[F46D0000]    <2> 		mov bx, [background]
  8833 00006C3A 66891F              <2> 		mov [edi], bx
  8834 00006C3D 80FA00              <2> 		cmp dl, 0
  8835 00006C40 740A                <2> 		je noiconline
  8836 00006C42 668B15[A56B0000]    <2> 		mov dx, [iconcolor]
  8837 00006C49 668917              <2> 		mov [edi], dx
  8838                              <2> 	noiconline:
  8839 00006C4C 81C702000000        <2> 		add edi, 2
  8840 00006C52 D1C0                <2> 		rol eax, 1
  8841 00006C54 FEC1                <2> 		inc cl
  8842 00006C56 80F920              <2> 		cmp cl, 32
  8843 00006C59 72CE                <2> 		jb writeiconline
  8844 00006C5B 81C604000000        <2> 		add esi, 4
  8845 00006C61 FEC5                <2> 		inc ch
  8846 00006C63 31D2                <2> 		xor edx, edx
  8847 00006C65 668B15[0E580000]    <2> 		mov dx, [resolutionx2]
  8848 00006C6C 01D7                <2> 		add edi, edx
  8849 00006C6E 81EF40000000        <2> 		sub edi, 64
  8850 00006C74 80FD20              <2> 		cmp ch, 32
  8851 00006C77 72AA                <2> 		jb writeicon
  8852 00006C79 31C0                <2> 		xor eax, eax
  8853 00006C7B C3                  <2> 		ret
  8854                              <1> %include "source/gui/line.asm"
  8855                              <2> drawline:	;from (bx,ax) to (dx,cx), color in si
  8856 00006C7C 668935[9E6D0000]    <2> 	mov [.color], si
  8857 00006C83 C605[A06D0000]00    <2> 	mov byte [.steep], 0
  8858 00006C8A C605[A16D0000]00    <2> 	mov byte [.yreversed], 0
  8859 00006C91 E907000000          <2> 	jmp .notsteep
  8860                              <2> .steeploop:
  8861 00006C96 C605[A06D0000]01    <2> 	mov byte [.steep], 1
  8862                              <2> .notsteep:
  8863 00006C9D 31FF                <2> 	xor edi, edi
  8864 00006C9F 31F6                <2> 	xor esi, esi
  8865 00006CA1 6639DA              <2> 	cmp dx, bx
  8866 00006CA4 7705                <2> 	ja .noreversex
  8867 00006CA6 6687D3              <2> 	xchg dx, bx
  8868 00006CA9 6691                <2> 	xchg cx, ax
  8869                              <2> .noreversex:
  8870 00006CAB 6689D7              <2> 	mov di, dx
  8871 00006CAE 6629DF              <2> 	sub di, bx
  8872                              <2> 	
  8873 00006CB1 6639C1              <2> 	cmp cx, ax
  8874 00006CB4 720B                <2> 	jb .reversey
  8875 00006CB6 6689CE              <2> 	mov si, cx
  8876 00006CB9 6629C6              <2> 	sub si, ax
  8877 00006CBC E90D000000          <2> 	jmp .normal
  8878                              <2> .reversey:
  8879 00006CC1 C605[A16D0000]02    <2> 	mov byte [.yreversed], 2
  8880 00006CC8 6689C6              <2> 	mov si, ax
  8881 00006CCB 6629CE              <2> 	sub si, cx	
  8882                              <2> .normal:
  8883 00006CCE 6687CA              <2> 	xchg cx, dx
  8884 00006CD1 6693                <2> 	xchg ax, bx
  8885 00006CD3 6639FE              <2> 	cmp si, di
  8886 00006CD6 77BE                <2> 	ja .steeploop
  8887 00006CD8 6687CA              <2> 	xchg cx, dx
  8888 00006CDB 6693                <2> 	xchg ax, bx
  8889                              <2> 	
  8890 00006CDD 6691                <2> 	xchg ax, cx
  8891 00006CDF 6687DA              <2> 	xchg bx, dx
  8892 00006CE2 66893D[A46D0000]    <2> 	mov [.xdelta], di
  8893 00006CE9 668935[A66D0000]    <2> 	mov [.ydelta], si
  8894 00006CF0 668B35[9E6D0000]    <2> 	mov si, [.color]
  8895 00006CF7 66891D[A26D0000]    <2> 	mov [.endline], bx
  8896 00006CFE 6652                <2> 	push dx
  8897 00006D00 6651                <2> 	push cx
  8898 00006D02 6687CA              <2> 	xchg cx, dx
  8899 00006D05 803D[A06D0000]01    <2> 	cmp byte [.steep], 1
  8900 00006D0C 7403                <2> 	je .xchg
  8901 00006D0E 6687D1              <2> 	xchg dx, cx
  8902                              <2> .xchg:
  8903 00006D11 E832170000          <2> 	call getpixelmem	;get pointer to pixel in edi from (dx,cx)
  8904 00006D16 6659                <2> 	pop cx
  8905 00006D18 665A                <2> 	pop dx
  8906 00006D1A 31C0                <2> 	xor eax, eax
  8907 00006D1C 66A1[A46D0000]      <2> 	mov ax, [.xdelta]
  8908 00006D22 66D1E8              <2> 	shr ax, 1
  8909 00006D25 8A0D[A06D0000]      <2> 	mov cl, [.steep]
  8910 00006D2B 0A0D[A16D0000]      <2> 	or cl, [.yreversed]
  8911 00006D31 55                  <2> 	push ebp
  8912 00006D32 668B2D[A26D0000]    <2> 	mov bp, [.endline]
  8913 00006D39 6629D5              <2> 	sub bp, dx
  8914 00006D3C 668B15[A66D0000]    <2> 	mov dx, [.ydelta]
  8915                              <2> .lp:
  8916 00006D43 668937              <2> 	mov [edi], si
  8917 00006D46 6639D0              <2> 	cmp ax, dx
  8918 00006D49 7332                <2> 	jae .noaddx
  8919 00006D4B F6C102              <2> 	test cl, 2
  8920 00006D4E 7414                <2> 	jz .nodecy
  8921 00006D50 F6C101              <2> 	test cl, 1
  8922 00006D53 7509                <2> 	jnz .steepy
  8923 00006D55 29DF                <2> 	sub edi, ebx
  8924 00006D57 29DF                <2> 	sub edi, ebx
  8925 00006D59 E906000000          <2> 	jmp .nodecy
  8926                              <2> .steepy:
  8927 00006D5E 81EF04000000        <2> 	sub edi, 4
  8928                              <2> .nodecy:
  8929 00006D64 660305[A46D0000]    <2> 	add ax, [.xdelta]
  8930 00006D6B F6C101              <2> 	test cl, 1
  8931 00006D6E 7507                <2> 	jnz .steepx
  8932 00006D70 01DF                <2> 	add edi, ebx
  8933 00006D72 E906000000          <2> 	jmp .noaddx
  8934                              <2> .steepx:
  8935 00006D77 81C702000000        <2> 	add edi, 2
  8936                              <2> .noaddx:
  8937 00006D7D 6629D0              <2> 	sub ax, dx
  8938 00006D80 664D                <2> 	dec bp
  8939 00006D82 81C702000000        <2> 	add edi, 2
  8940 00006D88 F6C101              <2> 	test cl, 1
  8941 00006D8B 7408                <2> 	jz .nosteepx
  8942 00006D8D 81EF02000000        <2> 	sub edi, 2
  8943 00006D93 01DF                <2> 	add edi, ebx
  8944                              <2> .nosteepx:
  8945 00006D95 6681FD0000          <2> 	cmp bp, 0
  8946 00006D9A 75A7                <2> 	jne .lp
  8947                              <2> .done:
  8948 00006D9C 5D                  <2> 	pop ebp
  8949 00006D9D C3                  <2> 	ret
  8950                              <2> 	
  8951 00006D9E 0000                <2> .color dw 0
  8952 00006DA0 00                  <2> .steep db 0
  8953 00006DA1 00                  <2> .yreversed db 0
  8954 00006DA2 0000                <2> .endline dw 0
  8955 00006DA4 0000                <2> .xdelta dw 0
  8956 00006DA6 0000                <2> .ydelta dw 0
  8957                              <1> %include "source/gui/refresh.asm"
  8958                              <2> guiclear:
  8959 00006DA8 8B3D[36570000]      <2> 	mov edi, [physbaseptr]
  8960 00006DAE 668B15[20570000]    <2> 	mov dx, [resolutionx]
  8961 00006DB5 668B0D[22570000]    <2> 	mov cx, [resolutiony]
  8962 00006DBC 668B1D[F46D0000]    <2> 	mov bx, [background]
  8963 00006DC3 66891D[F66D0000]    <2> 	mov [background + 2], bx
  8964                              <2> %ifdef gui.background
  8965                              <2> 	cmp dword [backgroundimage], 0
  8966                              <2> 	je guiclear.noback
  8967                              <2> 		mov esi, [backgroundimage]
  8968                              <2> 	.lp:
  8969                              <2> 		;movdqa xmm0, [esi]	;the next 4 lines are for SSE
  8970                              <2> 		;movdqa [edi], xmm0
  8971                              <2> 		;add esi, 16
  8972                              <2> 		;add edi, 16
  8973                              <2> 		;sub dx, 8
  8974                              <2> 		mov eax, [esi]
  8975                              <2> 		mov [edi], eax
  8976                              <2> 		add esi, 4
  8977                              <2> 		add edi, 4
  8978                              <2> 		sub dx, 2
  8979                              <2> 		cmp dx, 0
  8980                              <2> 		ja .lp
  8981                              <2> 		dec cx
  8982                              <2> 		mov dx, [resolutionx]
  8983                              <2> 		cmp cx, 0
  8984                              <2> 		ja .lp
  8985                              <2> 		ret
  8986                              <2> 	backgroundimage dd 0
  8987                              <2> %endif
  8988                              <2> guiclear.noback:
  8989 00006DCA A1[F46D0000]        <2> 	mov eax, [background]
  8990                              <2> guiclearloop:
  8991 00006DCF 8907                <2> 	mov [edi], eax
  8992 00006DD1 81C704000000        <2> 	add edi, 4
  8993 00006DD7 6681EA0200          <2> 	sub dx, 2
  8994 00006DDC 6681FA0000          <2> 	cmp dx, 0
  8995 00006DE1 77EC                <2> 	ja guiclearloop
  8996 00006DE3 6649                <2> 	dec cx
  8997 00006DE5 668B15[20570000]    <2> 	mov dx, [resolutionx]
  8998 00006DEC 6681F90000          <2> 	cmp cx, 0
  8999 00006DF1 77DC                <2> 	ja guiclearloop
  9000 00006DF3 C3                  <2> 	ret
  9001                              <2> 
  9002 00006DF4 CF7B<rept>          <2> background times 2 dw 0111101111001111b
  9003                              <2> 	.original equ 0111101111001111b
  9004                              <2> 
  9005                              <2> reloadallgraphics:
  9006 00006DF8 BF[7B0C0100]        <2> 		mov edi, graphicstable
  9007                              <2> reloadgraphicsloop:
  9008 00006DFD 8B7702              <2> 		mov esi, [edi + 2]
  9009 00006E00 668B5706            <2> 		mov dx, [edi + 6]
  9010 00006E04 668B4F08            <2> 		mov cx, [edi + 8]
  9011 00006E08 668B07              <2> 		mov ax, [edi]
  9012 00006E0B 668B5F0A            <2> 		mov bx, [edi + 10]
  9013 00006E0F 893D[85810000]      <2> 		mov [grpctblpos], edi
  9014 00006E15 3B3D[1C7C0000]      <2> 		cmp edi, [dragging]
  9015 00006E1B 741E                <2> 		je loadedgraphic
  9016 00006E1D 663D0100            <2> 		cmp ax, 1
  9017 00006E21 0F8436000000        <2> 		je near icongraphic
  9018 00006E27 663D0200            <2> 		cmp ax, 2
  9019 00006E2B 0F843C000000        <2> 		je near stringgraphic
  9020 00006E31 663D0300            <2> 		cmp ax, 3
  9021 00006E35 0F8416000000        <2> 		je near windowgraphic
  9022 00006E3B 8B3D[85810000]      <2> loadedgraphic:  mov edi, [grpctblpos]
  9023 00006E41 81C710000000        <2> 		add edi, 16
  9024 00006E47 81FF[7B0E0100]      <2> 		cmp edi, graphicstableend
  9025 00006E4D 732E                <2> 		jae donereloadgraphics
  9026 00006E4F EBAC                <2> 		jmp reloadgraphicsloop
  9027                              <2> windowgraphic:
  9028 00006E51 E827090000          <2> 		call showwindow2
  9029 00006E56 E8BDAFFFFF          <2> 		call cleardouble
  9030 00006E5B EBDE                <2> 		jmp loadedgraphic
  9031 00006E5D 80E301              <2> icongraphic:	and bl, 1
  9032 00006E60 881D[70840000]      <2> 		mov [iconselected], bl
  9033 00006E66 E84FFDFFFF          <2> 		call showicon2
  9034 00006E6B EBCE                <2> 		jmp loadedgraphic
  9035 00006E6D 80E301              <2> stringgraphic:  and bl, 1
  9036 00006E70 881D[187C0000]      <2> 		mov [mouseselecton], bl
  9037 00006E76 E8CE050000          <2> 		call showstring2
  9038 00006E7B EBBE                <2> 		jmp loadedgraphic
  9039                              <2> donereloadgraphics:
  9040 00006E7D 8B3D[1C7C0000]      <2> 		mov edi, [dragging]
  9041 00006E83 81FF[7B0C0100]      <2> 		cmp edi, graphicstable
  9042 00006E89 7226                <2> 		jb notcorrectdrag
  9043 00006E8B 668B07              <2> 		mov ax, [edi]
  9044 00006E8E 8B7702              <2> 		mov esi, [edi + 2]
  9045 00006E91 668B5706            <2> 		mov dx, [edi + 6]
  9046 00006E95 668B4F08            <2> 		mov cx, [edi + 8]
  9047 00006E99 668B5F0A            <2> 		mov bx, [edi + 10]
  9048 00006E9D 663D0100            <2> 		cmp ax, 1
  9049 00006EA1 750F                <2> 		jne noticondragging
  9050 00006EA3 80E301              <2> 		and bl, 1
  9051 00006EA6 881D[70840000]      <2> 		mov [iconselected], bl
  9052 00006EAC E809FDFFFF          <2> 		call showicon2
  9053                              <2> notcorrectdrag:
  9054 00006EB1 C3                  <2> 		ret
  9055                              <2> 
  9056                              <2> 	noticondragging:
  9057 00006EB2 663D0200            <2> 		cmp ax, 2
  9058 00006EB6 75F9                <2> 		jne notcorrectdrag
  9059 00006EB8 80E301              <2> 		and bl, 1
  9060 00006EBB 881D[187C0000]      <2> 		mov [mouseselecton], bl
  9061 00006EC1 E883050000          <2> 		call showstring2
  9062 00006EC6 EBE9                <2> 		jmp notcorrectdrag
  9063                              <1> %include "source/gui/square.asm"
  9064                              <2> drawsquare:	;from (bx,ax) to (dx,cx), color in si
  9065 00006EC8 6639D3              <2> 	cmp bx, dx
  9066 00006ECB 7303                <2> 	jae .noxchgx
  9067 00006ECD 6687DA              <2> 	xchg bx, dx
  9068                              <2> .noxchgx:
  9069 00006ED0 6639C8              <2> 	cmp ax, cx
  9070 00006ED3 7302                <2> 	jae .noxchgy
  9071 00006ED5 6691                <2> 	xchg ax, cx
  9072                              <2> .noxchgy:
  9073 00006ED7 6650                <2> 	push ax
  9074 00006ED9 6653                <2> 	push bx
  9075 00006EDB 6652                <2> 	push dx
  9076 00006EDD E866150000          <2> 	call getpixelmem	;get pointer to pixel in edi from (dx,cx)
  9077 00006EE2 31D2                <2> 	xor edx, edx
  9078 00006EE4 665A                <2> 	pop dx
  9079 00006EE6 31DB                <2> 	xor ebx, ebx
  9080 00006EE8 665B                <2> 	pop bx
  9081 00006EEA 6658                <2> 	pop ax
  9082                              <2> .lp0:
  9083 00006EEC 6652                <2> 	push dx
  9084                              <2> .lp:
  9085 00006EEE 668937              <2> 	mov [edi], si
  9086 00006EF1 81C702000000        <2> 	add edi, 2
  9087 00006EF7 6642                <2> 	inc dx
  9088 00006EF9 6639DA              <2> 	cmp dx, bx
  9089 00006EFC 76F0                <2> 	jbe .lp
  9090 00006EFE 665A                <2> 	pop dx
  9091 00006F00 81EF02000000        <2> 	sub edi, 2
  9092 00006F06 29DF                <2> 	sub edi, ebx
  9093 00006F08 29DF                <2> 	sub edi, ebx
  9094 00006F0A 01D7                <2> 	add edi, edx
  9095 00006F0C 01D7                <2> 	add edi, edx
  9096 00006F0E 033D[0E580000]      <2> 	add edi, [resolutionx2]
  9097 00006F14 6641                <2> 	inc cx
  9098 00006F16 6639C1              <2> 	cmp cx, ax
  9099 00006F19 7203                <2> 	jb .lp2
  9100 00006F1B 74CF                <2> 	je .lp0
  9101 00006F1D C3                  <2> 	ret
  9102                              <2> .lp2:
  9103 00006F1E 57                  <2> 	push edi
  9104 00006F1F 668937              <2> 	mov [edi], si
  9105 00006F22 29D7                <2> 	sub edi, edx
  9106 00006F24 29D7                <2> 	sub edi, edx
  9107 00006F26 01DF                <2> 	add edi, ebx
  9108 00006F28 01DF                <2> 	add edi, ebx
  9109 00006F2A 668937              <2> 	mov [edi], si
  9110 00006F2D 5F                  <2> 	pop edi
  9111 00006F2E 033D[0E580000]      <2> 	add edi, [resolutionx2]
  9112 00006F34 6641                <2> 	inc cx
  9113 00006F36 6639C1              <2> 	cmp cx, ax
  9114 00006F39 72E3                <2> 	jb .lp2
  9115 00006F3B EBAF                <2> 	jmp .lp0
  9116                              <2> 
  9117                              <2> fillsquare:	;from (bx,ax) to (dx,cx), color in si
  9118 00006F3D 6639D3              <2> 	cmp bx, dx
  9119 00006F40 7303                <2> 	jae .noxchgx
  9120 00006F42 6687DA              <2> 	xchg bx, dx
  9121                              <2> .noxchgx:
  9122 00006F45 6639C8              <2> 	cmp ax, cx
  9123 00006F48 7302                <2> 	jae .noxchgy
  9124 00006F4A 6691                <2> 	xchg ax, cx
  9125                              <2> .noxchgy:
  9126 00006F4C 6650                <2> 	push ax
  9127 00006F4E 6653                <2> 	push bx
  9128 00006F50 6652                <2> 	push dx
  9129 00006F52 E8F1140000          <2> 	call getpixelmem	;get pointer to pixel in edi from (dx,cx)
  9130 00006F57 31D2                <2> 	xor edx, edx
  9131 00006F59 665A                <2> 	pop dx
  9132 00006F5B 31DB                <2> 	xor ebx, ebx
  9133 00006F5D 665B                <2> 	pop bx
  9134 00006F5F 6658                <2> 	pop ax
  9135                              <2> .lp2
  9136 00006F61 6652                <2> 	push dx
  9137                              <2> .lp:
  9138 00006F63 668937              <2> 	mov [edi], si
  9139 00006F66 81C702000000        <2> 	add edi, 2
  9140 00006F6C 6642                <2> 	inc dx
  9141 00006F6E 6639DA              <2> 	cmp dx, bx
  9142 00006F71 76F0                <2> 	jbe .lp
  9143 00006F73 665A                <2> 	pop dx
  9144 00006F75 81EF02000000        <2> 	sub edi, 2
  9145 00006F7B 29DF                <2> 	sub edi, ebx
  9146 00006F7D 29DF                <2> 	sub edi, ebx
  9147 00006F7F 01D7                <2> 	add edi, edx
  9148 00006F81 01D7                <2> 	add edi, edx
  9149 00006F83 033D[0E580000]      <2> 	add edi, [resolutionx2]
  9150 00006F89 6641                <2> 	inc cx
  9151 00006F8B 6639C1              <2> 	cmp cx, ax
  9152 00006F8E 76D1                <2> 	jbe .lp2
  9153 00006F90 C3                  <2> 	ret
  9154                              <1> %include "source/gui/startup.asm"
  9155                              <2> guisetup:
  9156                              <2> 	%ifdef gui.background
  9157                              <2> 	xor ebx, ebx
  9158                              <2> 	mov [backgroundimage], ebx
  9159                              <2> 	%endif
  9160 00006F91 E812FEFFFF          <2> 	call guiclear
  9161 00006F96 C605[9CDB0000]01    <2> 	mov byte [guion], 1
  9162 00006F9D C605[187C0000]00    <2> 	mov byte [mouseselecton], 0
  9163 00006FA4 31C0                <2> 	xor eax, eax
  9164 00006FA6 31DB                <2> 	xor ebx, ebx
  9165 00006FA8 31C9                <2> 	xor ecx, ecx
  9166 00006FAA 31D2                <2> 	xor edx, edx
  9167                              <2> 	
  9168 00006FAC BE[6E710000]        <2> 	mov esi, pacmsg
  9169 00006FB1 30E4                <2> 	xor ah, ah
  9170 00006FB3 B010                <2> 	mov al, 00010000b
  9171 00006FB5 31DB                <2> 	xor ebx, ebx
  9172 00006FB7 66B99000            <2> 	mov cx, 144
  9173 00006FBB 66BA0400            <2> 	mov dx, 4
  9174 00006FBF E872040000          <2> 	call showstring
  9175                              <2> 	
  9176 00006FC4 BE[AC710000]        <2> 	mov esi, interneticon
  9177 00006FC9 30E4                <2> 	xor ah, ah
  9178 00006FCB B010                <2> 	mov al, 00010000b
  9179 00006FCD BB[97700000]        <2> 	mov ebx, noie
  9180 00006FD2 66B91800            <2> 	mov cx, 24
  9181 00006FD6 66BA0400            <2> 	mov dx, 4
  9182 00006FDA E8C8FBFFFF          <2> 	call showicon
  9183                              <2> 	
  9184 00006FDF BE[2E720000]        <2> 	mov esi, wordicon
  9185 00006FE4 30E4                <2> 	xor ah, ah
  9186 00006FE6 B010                <2> 	mov al, 00010000b
  9187 00006FE8 31DB                <2> 	xor ebx, ebx
  9188 00006FEA 66B91800            <2> 	mov cx, 24
  9189 00006FEE 66BA3000            <2> 	mov dx, 48
  9190 00006FF2 E8B0FBFFFF          <2> 	call showicon
  9191                              <2> 	
  9192 00006FF7 BE[B0720000]        <2> 	mov esi, pacmanpellet
  9193 00006FFC 30E4                <2> 	xor ah, ah
  9194 00006FFE B010                <2> 	mov al, 00010000b
  9195 00007000 31DB                <2> 	xor ebx, ebx
  9196 00007002 66B94000            <2> 	mov cx, 64
  9197 00007006 66BA0400            <2> 	mov dx, 4
  9198 0000700A E898FBFFFF          <2> 	call showicon
  9199                              <2> 	
  9200 0000700F BE[B4730000]        <2> 	mov esi, pacman
  9201 00007014 30E4                <2> 	xor ah, ah
  9202 00007016 B010                <2> 	mov al, 00010000b
  9203 00007018 BB[80700000]        <2> 	mov ebx, pacmannomnom
  9204 0000701D 66B94000            <2> 	mov cx, 64
  9205 00007021 66BA3000            <2> 	mov dx, 48
  9206 00007025 E87DFBFFFF          <2> 	call showicon
  9207                              <2> 	
  9208 0000702A BE[32730000]        <2> 	mov esi, ghostie
  9209 0000702F 30E4                <2> 	xor ah, ah
  9210 00007031 B010                <2> 	mov al, 00010000b
  9211 00007033 BB[69700000]        <2> 	mov ebx, boo
  9212 00007038 66B96C00            <2> 	mov cx, 108
  9213 0000703C 66BA0400            <2> 	mov dx, 4
  9214 00007040 E862FBFFFF          <2> 	call showicon
  9215                              <2> 	
  9216 00007045 BE[50710000]        <2> 	mov esi, start
  9217 0000704A 668B0D[22570000]    <2> 	mov cx, [resolutiony]
  9218 00007051 6681E91000          <2> 	sub cx, 16
  9219 00007056 66BA0200            <2> 	mov dx, 2
  9220 0000705A 30E4                <2> 	xor ah, ah
  9221 0000705C B010                <2> 	mov al, 00010000b
  9222 0000705E BB[0C710000]        <2> 	mov ebx, winblows
  9223 00007063 E8CE030000          <2> 	call showstring
  9224                              <2> 
  9225                              <2> %ifdef gui.time	
  9226                              <2> 	call guitime	;load time into timeshow/dateshow and show it
  9227                              <2> %endif
  9228 00007068 C3                  <2> 	ret
  9229                              <2> 
  9230                              <2> 	boo:
  9231 00007069 BE[69710000]        <2> 		mov esi, boomsg
  9232 0000706E 66BA6400            <2> 		mov dx, 100
  9233 00007072 66B94001            <2> 		mov cx, 320
  9234 00007076 31DB                <2> 		xor ebx, ebx
  9235 00007078 6631C0              <2> 		xor ax, ax
  9236 0000707B E9B6030000          <2> 		jmp showstring
  9237                              <2> 
  9238                              <2> 	pacmannomnom:
  9239 00007080 BE[87710000]        <2> 		mov esi, pacnom
  9240 00007085 66BA8200            <2> 		mov dx, 130
  9241 00007089 66B93C00            <2> 		mov cx, 60
  9242 0000708D 31DB                <2> 		xor ebx, ebx
  9243 0000708F 6631C0              <2> 		xor ax, ax
  9244 00007092 E99F030000          <2> 		jmp showstring	
  9245                              <2> 	
  9246                              <2> 	noie:
  9247 00007097 66C705[96710000]80- <2> 		mov word [termwindow], 640
  9248 0000709F 02                  <2>
  9249 000070A0 66C705[98710000]E0- <2> 		mov word [termwindow + 2], 480	;the previous lines of code make a large terminal window that is 4 characters smaller than the screen
  9250 000070A8 01                  <2>
  9251 000070A9 BE[96710000]        <2> 		mov esi, termwindow
  9252 000070AE 66BA1000            <2> 		mov dx, 16
  9253 000070B2 66B91000            <2> 		mov cx, 16
  9254 000070B6 31DB                <2> 		xor ebx, ebx
  9255 000070B8 6631C0              <2> 		xor ax, ax
  9256 000070BB E803060000          <2> 		call showwindow
  9257 000070C0 E930BAFFFF          <2> 		jmp os
  9258                              <2> 
  9259                              <2> 	gotomenuboot:
  9260 000070C5 31D2                <2> 		xor edx, edx
  9261 000070C7 31C9                <2> 		xor ecx, ecx
  9262 000070C9 668B15[20570000]    <2> 		mov dx, [resolutionx]
  9263 000070D0 668B0D[22570000]    <2> 		mov cx, [resolutiony]
  9264 000070D7 66C1E904            <2> 		shr cx, 4
  9265 000070DB 6681E90100          <2> 		sub cx, 1
  9266 000070E0 66C1E104            <2> 		shl cx, 4
  9267 000070E4 668915[96710000]    <2> 		mov [termwindow], dx
  9268 000070EB 66890D[98710000]    <2> 		mov [termwindow + 2], cx	;the previous lines of code make a large terminal window that is fullscreen
  9269 000070F2 BE[96710000]        <2> 		mov esi, termwindow
  9270 000070F7 6631D2              <2> 		xor dx, dx
  9271 000070FA 6631C9              <2> 		xor cx, cx
  9272 000070FD 31DB                <2> 		xor ebx, ebx
  9273 000070FF 6631C0              <2> 		xor ax, ax
  9274 00007102 E8BC050000          <2> 		call showwindow
  9275 00007107 E9E9B9FFFF          <2> 		jmp os
  9276                              <2> 
  9277                              <2> 	winblows:
  9278 0000710C BE[5F710000]        <2> 		mov esi, turnoffmsg
  9279 00007111 BB[82520000]        <2> 		mov ebx, turnoff
  9280 00007116 668B0D[22570000]    <2> 		mov cx, [resolutiony]
  9281 0000711D 6681E92000          <2> 		sub cx, 32
  9282 00007122 6631D2              <2> 		xor dx, dx
  9283 00007125 30E4                <2> 		xor ah, ah
  9284 00007127 B010                <2> 		mov al, 00010000b
  9285 00007129 E808030000          <2> 		call showstring
  9286 0000712E BE[56710000]        <2> 		mov esi, gotomenu
  9287 00007133 668B0D[22570000]    <2> 		mov cx, [resolutiony]
  9288 0000713A 6681E93000          <2> 		sub cx, 48
  9289 0000713F 6631D2              <2> 		xor dx, dx
  9290 00007142 30E4                <2> 		xor ah, ah
  9291 00007144 B010                <2> 		mov al, 00010000b
  9292 00007146 BB[C5700000]        <2> 		mov ebx, gotomenuboot
  9293 0000714B E9E6020000          <2> 		jmp showstring
  9294                              <2> 		
  9295                              <2> 
  9296 00007150 737461727400        <2> 	start	db "start",0
  9297 00007156 536F6C6C65724F5300  <2> 	gotomenu db "SollerOS",0
  9298 0000715F 506F776572204F6666- <2> 	turnoffmsg db "Power Off",0
  9299 00007168 00                  <2>
  9300 00007169 426F6F2100          <2> 	boomsg db "Boo!",0
  9301 0000716E 5061636D616E207761- <2> 	pacmsg	db "Pacman was easy to draw.",0
  9302 00007177 73206561737920746F- <2>
  9303 00007180 20647261772E00      <2>
  9304 00007187 4F6D206E6F6D206E6F- <2> 	pacnom  db "Om nom nom nom",0
  9305 00007190 6D206E6F6D00        <2>
  9306                              <2> 
  9307 00007196 20035802            <2> 	termwindow:	dw 800,600	;window size
  9308 0000719A FFFF0000            <2> 				dw 0xFFFF,0	;colors(FG,BG)
  9309 0000719E [7C0F0100]-         <2> 				dd videobuf,videobuf2 ;location of buffers
  9310 000071A2 [C4E40100]          <2>
  9311 000071A6 534855536800        <2> 	termmsg:	db "SHUSh",0	;;window title
  9312                              <2> 	
  9313 000071A6 <incbin>            <2> interneticon: 	incbin 'source/gui/icons/internet'
  9314 000071A6 <incbin>            <2> wordicon: 	incbin 'source/gui/icons/word'
  9315 000071A6 <incbin>            <2> pacmanpellet: incbin 'source/gui/icons/pellet'
  9316 000071A6 <incbin>            <2> ghostie	incbin 'source/gui/icons/ghostie'
  9317 000071A6 <incbin>            <2> pacman	incbin 'source/gui/icons/pacman'
  9318                              <2> 
  9319                              <2> %ifdef gui.time
  9320                              <2> guitime:
  9321                              <2> 		call time	;get rtc in timeshow & dateshow
  9322                              <2> 		xor ebx, ebx
  9323                              <2> 		mov dx, [resolutionx2]
  9324                              <2> 		xor cx, cx
  9325                              <2> 		sub dx, 304
  9326                              <2> 		mov esi, dateshow
  9327                              <2> 		mov al, 00010001b
  9328                              <2> 		call showstring
  9329                              <2> 		mov esi, timeshow
  9330                              <2> 		xor ebx, ebx
  9331                              <2> 		mov al, 00010001b
  9332                              <2> 		call showstring
  9333                              <2> 		ret
  9334                              <2> %endif
  9335                              <1> %include "source/gui/text.asm"
  9336                              <2> 	showstring:
  9337 00007436 A2[187C0000]        <2> 		mov [mouseselecton], al
  9338 0000743B 8025[187C0000]01    <2> 		and byte [mouseselecton], 1
  9339 00007442 B402                <2> 		mov ah, 2
  9340 00007444 E8500D0000          <2> 		call graphicsadd
  9341                              <2> 	showstring2:	;location in (dx,cx), color in [colorfont2] and [background]
  9342 00007449 30E4                <2> 		xor ah, ah
  9343 0000744B 8A06                <2> 		mov al, [esi]
  9344 0000744D 3CC0                <2> 		cmp al, 0xC0
  9345 0000744F 7234                <2> 		jb .doneutf
  9346 00007451 3CE0                <2> 		cmp al, 0xE0
  9347 00007453 721D                <2> 		jb .two
  9348 00007455 46                  <2> 		inc esi
  9349 00007456 668B1E              <2> 		mov bx, [esi]
  9350 00007459 46                  <2> 		inc esi
  9351 0000745A C0E004              <2> 		shl al, 4
  9352 0000745D 66C1E302            <2> 		shl bx, 2
  9353 00007461 C0EF02              <2> 		shr bh, 2
  9354 00007464 66C1EB02            <2> 		shr bx, 2
  9355 00007468 08C7                <2> 		or bh, al
  9356 0000746A 6689D8              <2> 		mov ax, bx
  9357 0000746D E913000000          <2> 		jmp .doneutf
  9358                              <2> 	.two:
  9359 00007472 8A3E                <2> 		mov bh, [esi]
  9360 00007474 46                  <2> 		inc esi
  9361 00007475 8A1E                <2> 		mov bl, [esi]
  9362 00007477 66C1E302            <2> 		shl bx, 2
  9363 0000747B C0EF02              <2> 		shr bh, 2
  9364 0000747E 66C1EB02            <2> 		shr bx, 2
  9365 00007482 6689D8              <2> 		mov ax, bx
  9366                              <2> 	.doneutf:
  9367 00007485 3C00                <2> 		cmp al, 0
  9368 00007487 7420                <2> 		je doneshowstring
  9369 00007489 46                  <2> 		inc esi
  9370 0000748A 3CFF                <2> 		cmp al, 255
  9371 0000748C 74BB                <2> 		je showstring2
  9372 0000748E 56                  <2> 		push esi
  9373 0000748F 668B1D[B1740000]    <2> 		mov bx, [colorfont2]
  9374 00007496 E827000000          <2> 		call showfontvesa
  9375 0000749B 663D0A00            <2> 		cmp ax, 10
  9376 0000749F 7405                <2> 		je noproceedshst
  9377 000074A1 6681C20800          <2> 		add dx, 8
  9378                              <2> 	noproceedshst:
  9379 000074A6 5E                  <2> 		pop esi
  9380 000074A7 EBA0                <2> 		jmp showstring2
  9381                              <2> 	doneshowstring:
  9382 000074A9 C605[187C0000]00    <2> 		mov byte [mouseselecton], 0
  9383 000074B0 C3                  <2> 		ret
  9384                              <2> 
  9385 000074B1 FFFF                <2> colorfont2 dw 0xFFFF
  9386 000074B3 00                  <2> colorcache db 0
  9387                              <2> 
  9388 000074B4 02                  <2> resolutionbytes db 2
  9389 000074B5 0000                <2> posxvesa dw 0
  9390 000074B7 0000                <2> posyvesa dw 0
  9391 000074B9 FFFF                <2> colorfont dw 0xFFFF
  9392                              <2> savefontvesa:		;same rules as showfontvesa
  9393 000074BB C605[177C0000]01    <2> 	mov byte [savefonton], 1
  9394                              <2> showfontvesa:		;position in (dx,cx), color in bx, char in ax
  9395 000074C2 663DFF00            <2> 	cmp ax, 255
  9396 000074C6 7501                <2> 	jne nostopshowfont
  9397 000074C8 C3                  <2> 	ret
  9398                              <2> nostopshowfont:
  9399 000074C9 55                  <2> 	push ebp
  9400 000074CA 66890D[B7740000]    <2> 	mov [posyvesa], cx
  9401 000074D1 663D0A00            <2> 	cmp ax, 10
  9402 000074D5 0F8424000000        <2> 	je near goodvesafontx
  9403 000074DB 31C9                <2> 	xor ecx, ecx
  9404 000074DD 668B0D[0E580000]    <2> 	mov cx, [resolutionx2]
  9405 000074E4 6639CA              <2> 	cmp dx, cx
  9406 000074E7 7616                <2> 	jbe goodvesafontx
  9407 000074E9 6631D2              <2> 	xor dx, dx
  9408 000074EC 668B0D[B7740000]    <2> 	mov cx, [posyvesa]
  9409 000074F3 6681C11000          <2> 	add cx, 16
  9410 000074F8 66890D[B7740000]    <2> 	mov [posyvesa], cx
  9411                              <2> goodvesafontx:
  9412 000074FF 668B0D[B7740000]    <2> 	mov cx, [posyvesa]
  9413 00007506 668915[B5740000]    <2> 	mov [posxvesa], dx
  9414 0000750D 8B3D[36570000]      <2> 	mov edi, [physbaseptr]
  9415 00007513 66891D[B9740000]    <2> 	mov [colorfont], bx
  9416 0000751A 668B2D[B9740000]    <2> 	mov bp, [colorfont]
  9417 00007521 31DB                <2> 	xor ebx, ebx
  9418 00007523 6689C3              <2> 	mov bx, ax
  9419 00007526 31C0                <2> 	xor eax, eax
  9420 00007528 6689D8              <2> 	mov ax, bx
  9421 0000752B 6689D3              <2> 	mov bx, dx
  9422 0000752E 89DA                <2> 	mov edx, ebx
  9423 00007530 31DB                <2> 	xor ebx, ebx
  9424 00007532 6681F90000          <2> 	cmp cx, 0
  9425 00007537 7414                <2> 	je vesaposloopdn
  9426 00007539 668B1D[0E580000]    <2> 	mov bx, [resolutionx2]
  9427                              <2> vesaposloop:
  9428 00007540 52                  <2> 	push edx
  9429 00007541 50                  <2> 	push eax
  9430 00007542 31C0                <2> 	xor eax, eax
  9431 00007544 6689C8              <2> 	mov ax, cx
  9432 00007547 F7E3                <2> 	mul ebx
  9433 00007549 01C7                <2> 	add edi, eax
  9434 0000754B 58                  <2> 	pop eax
  9435 0000754C 5A                  <2> 	pop edx
  9436                              <2> vesaposloopdn:
  9437 0000754D 01D7                <2> 	add edi, edx
  9438 0000754F BE[9C890000]        <2> 	mov esi, fonts
  9439                              <2> findfontvesa:
  9440 00007554 663D0A00            <2> 	cmp ax, 10
  9441 00007558 0F84EB000000        <2> 	je near nwlinevesa
  9442 0000755E C1E004              <2> 	shl eax, 4
  9443 00007561 01C6                <2> 	add esi, eax
  9444 00007563 C1E804              <2> 	shr eax, 4
  9445 00007566 81FE[9CD90000]      <2> 	cmp esi, fontend
  9446 0000756C 0F83AB000000        <2> 	jae near donefontvesa
  9447 00007572 4E                  <2> 	dec esi
  9448                              <2> foundfontvesa:
  9449 00007573 46                  <2> 	inc esi
  9450 00007574 803D[177C0000]01    <2> 	cmp byte [savefonton], 1
  9451 0000757B 0F84E7000000        <2> 	je near vesafontsaver
  9452 00007581 30C9                <2> 	xor cl, cl
  9453 00007583 8A06                <2> 	mov al, [esi]
  9454 00007585 668B15[0E580000]    <2> 	mov dx, [resolutionx2]
  9455 0000758C 662B15[B5740000]    <2> 	sub dx, [posxvesa]
  9456 00007593 6681FA1000          <2> 	cmp dx, 16
  9457 00007598 7708                <2> 	ja paintfontvesa
  9458 0000759A D0EA                <2> 	shr dl, 1
  9459 0000759C 8815[48760000]      <2> 	mov [charwidth], dl
  9460                              <2> paintfontvesa:
  9461 000075A2 B201                <2> 	mov dl, 1
  9462 000075A4 20C2                <2> 	and dl, al
  9463 000075A6 803D[167C0000]01    <2> 	cmp byte [showcursorfonton], 1
  9464 000075AD 0F842E000000        <2> 	je near nodelpaintedfont
  9465 000075B3 803D[167C0000]02    <2> 	cmp byte [showcursorfonton], 2
  9466 000075BA 0F8511000000        <2> 	jne near noswitchcursorfonton
  9467 000075C0 80FA00              <2> 	cmp dl, 0
  9468 000075C3 0F8420000000        <2> 	je near nopixelset
  9469 000075C9 66892F              <2> 	mov [edi], bp
  9470 000075CC E918000000          <2> 	jmp nopixelset
  9471                              <2> noswitchcursorfonton:
  9472 000075D1 3215[187C0000]      <2> 	xor dl, [mouseselecton]
  9473 000075D7 668B1D[F46D0000]    <2> 	mov bx, [background]
  9474 000075DE 66891F              <2> 	mov [edi], bx
  9475                              <2> nodelpaintedfont:
  9476 000075E1 80FA00              <2> 	cmp dl, 0
  9477 000075E4 7403                <2> 	je nopixelset
  9478 000075E6 66892F              <2> 	mov [edi], bp
  9479                              <2> nopixelset:
  9480 000075E9 81C702000000        <2> 	add edi, 2
  9481 000075EF D0C0                <2> 	rol al, 1
  9482 000075F1 FEC1                <2> 	inc cl
  9483 000075F3 3A0D[48760000]      <2> 	cmp cl, [charwidth]
  9484 000075F9 72A7                <2> 	jb paintfontvesa
  9485 000075FB FEC5                <2> 	inc ch
  9486 000075FD 31D2                <2> 	xor edx, edx
  9487 000075FF 668B15[0E580000]    <2> 	mov dx, [resolutionx2]
  9488 00007606 01D7                <2> 	add edi, edx
  9489 00007608 31D2                <2> 	xor edx, edx
  9490 0000760A 8A15[48760000]      <2> 	mov dl, [charwidth]
  9491 00007610 00D2                <2> 	add dl, dl
  9492 00007612 29D7                <2> 	sub edi, edx
  9493 00007614 80FD10              <2> 	cmp ch, 16
  9494 00007617 0F8256FFFFFF        <2> 	jb foundfontvesa
  9495                              <2> donefontvesa:
  9496 0000761D C605[48760000]08    <2> 	mov byte [charwidth], 8
  9497 00007624 668B15[B5740000]    <2> 	mov dx, [posxvesa]
  9498 0000762B 8A1D[48760000]      <2> 	mov bl, [charwidth]
  9499 00007631 30FF                <2> 	xor bh, bh
  9500 00007633 6601DA              <2> 	add dx, bx
  9501 00007636 6689EB              <2> 	mov bx, bp
  9502 00007639 668B0D[B7740000]    <2> 	mov cx, [posyvesa]
  9503 00007640 883D[177C0000]      <2> 	mov [savefonton], bh
  9504 00007646 5D                  <2> 	pop ebp
  9505 00007647 C3                  <2> 	ret
  9506 00007648 08                  <2> charwidth db 8
  9507                              <2> nwlinevesa:
  9508 00007649 6631D2              <2> 	xor dx, dx
  9509 0000764C 668915[B5740000]    <2> 	mov [posxvesa], dx
  9510 00007653 668B0D[B7740000]    <2> 	mov cx, [posyvesa]
  9511 0000765A 6681C11000          <2> 	add cx, 16
  9512 0000765F 66890D[B7740000]    <2> 	mov [posyvesa], cx
  9513 00007666 EBB5                <2> 	jmp donefontvesa
  9514                              <2> vesafontsaver:
  9515 00007668 30C0                <2> 	xor al, al
  9516 0000766A 30C9                <2> 	xor cl, cl
  9517                              <2> vesafontsaver2:
  9518 0000766C 66392F              <2> 	cmp [edi], bp
  9519 0000766F 742C                <2> 	je colorfontmatch
  9520                              <2> donecolormatch:
  9521 00007671 81C702000000        <2> 	add edi, 2
  9522 00007677 D0C0                <2> 	rol al, 1
  9523 00007679 FEC1                <2> 	inc cl
  9524 0000767B 80F908              <2> 	cmp cl, 8
  9525 0000767E 72EC                <2> 	jb vesafontsaver2
  9526 00007680 8806                <2> 	mov [esi], al
  9527 00007682 46                  <2> 	inc esi
  9528 00007683 FEC5                <2> 	inc ch
  9529 00007685 31D2                <2> 	xor edx, edx
  9530 00007687 668B15[0E580000]    <2> 	mov dx, [resolutionx2]
  9531 0000768E 01D7                <2> 	add edi, edx
  9532 00007690 81EF10000000        <2> 	sub edi, 16
  9533 00007696 80FD10              <2> 	cmp ch, 16
  9534 00007699 72CD                <2> 	jb vesafontsaver
  9535 0000769B EB80                <2> 	jmp donefontvesa
  9536                              <2> colorfontmatch:
  9537 0000769D 0401                <2> 	add al, 1
  9538 0000769F EBD0                <2> 	jmp donecolormatch
  9539                              <1> %include "source/gui/window.asm"
  9540 000076A1 0000                <2> winvcopystx dw 0
  9541 000076A3 0000                <2> winvcopysty dw 0
  9542 000076A5 0000                <2> winvcopydx dw 0
  9543 000076A7 0000                <2> winvcopycx dw 0
  9544 000076A9 FFFF0000            <2> windowcolor dw 0xFFFF,0
  9545 000076AD 00000000            <2> windowbufloc: dd 0
  9546 000076B1 00000000            <2> windowvideobuf dd 0
  9547 000076B5 00000000            <2> windowvideobuf2 dd 0
  9548 000076B9 00000000            <2> windowinfobuf dd 0
  9549 000076BD 0000                <2> termcol dw 0
  9550 000076BF 00000000            <2> wincopyendpos dd 0
  9551                              <2> 
  9552                              <2> 	showwindow:	;windowstuff in esi, position in (dx, cx), nothing in ax, code in ebx
  9553 000076C3 C605[AB230000]01    <2> 		mov byte [termguion], 1
  9554 000076CA 6681C11000          <2> 		add cx, 16
  9555 000076CF 668915[A1760000]    <2> 		mov [winvcopystx], dx
  9556 000076D6 66890D[A3760000]    <2> 		mov [winvcopysty], cx
  9557 000076DD 8935[B9760000]      <2> 		mov [windowinfobuf], esi
  9558 000076E3 668B16              <2> 		mov dx, [esi]
  9559 000076E6 668B4E02            <2> 		mov cx, [esi + 2]
  9560 000076EA 31C0                <2> 		xor eax, eax
  9561 000076EC 31DB                <2> 		xor ebx, ebx
  9562 000076EE 6689D0              <2> 		mov ax, dx
  9563 000076F1 6689CB              <2> 		mov bx, cx
  9564 000076F4 66C1E803            <2> 		shr ax, 3
  9565 000076F8 66C1EB04            <2> 		shr bx, 4
  9566 000076FC 66A3[BD760000]      <2> 		mov [termcol], ax
  9567 00007702 A2[A0250000]        <2> 		mov [charxy], al
  9568 00007707 881D[A1250000]      <2> 		mov [charxy + 1], bl
  9569 0000770D 8B7E04              <2> 		mov edi, [esi + 4]
  9570 00007710 893D[A9760000]      <2> 		mov [windowcolor], edi
  9571 00007716 8B7E0C              <2> 		mov edi, [esi + 12]
  9572 00007719 893D[B5760000]      <2> 		mov [windowvideobuf2], edi
  9573 0000771F 8B7E08              <2> 		mov edi, [esi + 8]
  9574 00007722 893D[B1760000]      <2> 		mov [windowvideobuf], edi
  9575 00007728 81FB00000000        <2> 		cmp ebx, 0
  9576 0000772E 0F84C1040000        <2> 		je near donewincopynow
  9577                              <2> 	findendposwin:
  9578 00007734 C1E002              <2> 		shl eax, 2
  9579 00007737 31D2                <2> 		xor edx, edx
  9580 00007739 F7E3                <2> 		mul ebx
  9581 0000773B 01C7                <2> 		add edi, eax
  9582 0000773D 893D[BF760000]      <2> 		mov [wincopyendpos], edi
  9583 00007743 31FF                <2> 		xor edi, edi
  9584 00007745 6631C0              <2> 		xor ax, ax
  9585 00007748 6631DB              <2> 		xor bx, bx
  9586 0000774B 6601D2              <2> 		add dx, dx
  9587 0000774E 668915[A5760000]    <2> 		mov [winvcopydx], dx
  9588 00007755 66890D[A7760000]    <2> 		mov [winvcopycx], cx
  9589 0000775C 668B0D[A3760000]    <2> 		mov cx, [winvcopysty]
  9590 00007763 6681E91000          <2> 		sub cx, 16
  9591 00007768 668B15[A1760000]    <2> 		mov dx, [winvcopystx]
  9592 0000776F C605[AC230000]00    <2> 		mov byte [termcopyon], 0
  9593 00007776 B403                <2> 		mov ah, 3
  9594 00007778 E81C0A0000          <2> 		call graphicsadd
  9595                              <2> 	showwindow2:
  9596 0000777D 6681C11000          <2> 		add cx, 16
  9597 00007782 668915[A1760000]    <2> 		mov [winvcopystx], dx
  9598 00007789 66890D[A3760000]    <2> 		mov [winvcopysty], cx
  9599 00007790 668B16              <2> 		mov dx, [esi]
  9600 00007793 668B4E02            <2> 		mov cx, [esi + 2]
  9601 00007797 6601D2              <2> 		add dx, dx
  9602 0000779A 668915[A5760000]    <2> 		mov [winvcopydx], dx
  9603 000077A1 66890D[A7760000]    <2> 		mov [winvcopycx], cx
  9604 000077A8 E818000000          <2> 		call reloadwindowtitle
  9605 000077AD 803D[80810000]01    <2> 		cmp byte [windrag], 1
  9606 000077B4 0F834A040000        <2> 		jae near forgetresetstuff
  9607 000077BA 8B3D[AD760000]      <2> 		mov edi, [windowbufloc]
  9608 000077C0 E96E020000          <2> 		jmp windowvideocopyset
  9609                              <2> 		
  9610                              <2> 	reloadwindowtitle:
  9611 000077C5 8B3D[AD760000]      <2> 		mov edi, [windowbufloc]
  9612 000077CB 31D2                <2> 		xor edx, edx
  9613 000077CD 668B15[0E580000]    <2> 		mov dx, [resolutionx2]
  9614 000077D4 C1E204              <2> 		shl edx, 4
  9615 000077D7 29D7                <2> 		sub edi, edx
  9616 000077D9 803D[AC230000]00    <2> 		cmp byte [termcopyon], 0
  9617 000077E0 7532                <2> 		jne nocleartitlebarpos
  9618 000077E2 8B3D[36570000]      <2> 		mov edi, [physbaseptr]
  9619 000077E8 31D2                <2> 		xor edx, edx
  9620 000077EA 668B15[A1760000]    <2> 		mov dx, [winvcopystx]
  9621 000077F1 01D7                <2> 		add edi, edx
  9622 000077F3 31C9                <2> 		xor ecx, ecx
  9623 000077F5 668B0D[A3760000]    <2> 		mov cx, [winvcopysty]
  9624 000077FC 6681E91000          <2> 		sub cx, 16
  9625 00007801 6681F90000          <2> 		cmp cx, 0
  9626 00007806 740C                <2> 		je nocleartitlebarpos
  9627                              <2> 	cleartitlebarpos:
  9628 00007808 31C0                <2> 		xor eax, eax
  9629 0000780A 66A1[0E580000]      <2> 		mov ax, [resolutionx2]
  9630 00007810 F7E1                <2> 		mul ecx
  9631 00007812 01C7                <2> 		add edi, eax
  9632                              <2> 	nocleartitlebarpos:
  9633 00007814 66B91000            <2> 		mov cx, 16
  9634 00007818 668B15[A5760000]    <2> 		mov dx, [winvcopydx]
  9635 0000781F 6681F90000          <2> 		cmp cx, 0
  9636 00007824 0F8448000000        <2> 		je near canceltitlebarput
  9637 0000782A 6681FA0000          <2> 		cmp dx, 0
  9638 0000782F 0F843D000000        <2> 		je near canceltitlebarput
  9639                              <2> 	titlebarput:
  9640 00007835 66A1[A9760000]      <2> 		mov ax, [windowcolor]
  9641 0000783B 668907              <2> 		mov [edi], ax
  9642 0000783E 6681EA0200          <2> 		sub dx, 2
  9643 00007843 81C702000000        <2> 		add edi, 2
  9644 00007849 6681FA0000          <2> 		cmp dx, 0
  9645 0000784E 75E5                <2> 		jne titlebarput
  9646 00007850 31D2                <2> 		xor edx, edx
  9647 00007852 668B15[0E580000]    <2> 		mov dx, [resolutionx2]
  9648 00007859 6649                <2> 		dec cx
  9649 0000785B 662B15[A5760000]    <2> 		sub dx, [winvcopydx]
  9650 00007862 01D7                <2> 		add edi, edx
  9651 00007864 668B15[A5760000]    <2> 		mov dx, [winvcopydx]
  9652 0000786B 6681F90000          <2> 		cmp cx, 0
  9653 00007870 75C3                <2> 		jne titlebarput
  9654                              <2> 	canceltitlebarput:
  9655 00007872 893D[AD760000]      <2> 		mov [windowbufloc], edi
  9656 00007878 803D[AC230000]02    <2> 		cmp byte [termcopyon], 2
  9657 0000787F 0F841C010000        <2> 		je near winvcpst
  9658 00007885 668B1D[F46D0000]    <2> 		mov bx, [background]
  9659 0000788C 6653                <2> 		push bx
  9660 0000788E 6631DB              <2> 		xor bx, bx
  9661 00007891 66891D[F46D0000]    <2> 		mov [background], bx
  9662 00007898 6631C0              <2> 		xor ax, ax
  9663 0000789B 81C610000000        <2> 		add esi, 16
  9664 000078A1 668B15[A1760000]    <2> 		mov dx, [winvcopystx]
  9665 000078A8 668B0D[A3760000]    <2> 		mov cx, [winvcopysty]
  9666 000078AF 6681E91000          <2> 		sub cx, 16
  9667 000078B4 668B1D[A9760000]    <2> 		mov bx, [windowcolor]
  9668 000078BB C605[187C0000]01    <2> 		mov byte [mouseselecton], 1
  9669 000078C2 E882FBFFFF          <2> 		call showstring2	;Show window title
  9670 000078C7 8B35[932C0000]      <2> 		mov esi, [usercache]
  9671 000078CD 6681C21000          <2> 		add dx, 16
  9672 000078D2 C605[187C0000]01    <2> 		mov byte [mouseselecton], 1
  9673 000078D9 E86BFBFFFF          <2> 		call showstring2	;Show user name
  9674 000078DE BE[67890000]        <2> 		mov esi, computer
  9675 000078E3 C605[187C0000]01    <2> 		mov byte [mouseselecton], 1
  9676 000078EA E85AFBFFFF          <2> 		call showstring2	;Show computer name
  9677 000078EF 66B85800            <2> 		mov ax, "X"
  9678 000078F3 66BB00F8            <2> 		mov bx, 1111100000000000b
  9679 000078F7 668B15[A1760000]    <2> 		mov dx, [winvcopystx]
  9680 000078FE 668B0D[A3760000]    <2> 		mov cx, [winvcopysty]
  9681 00007905 6681E91000          <2> 		sub cx, 16
  9682 0000790A 6681EA1000          <2> 		sub dx, 16
  9683 0000790F 660315[A5760000]    <2> 		add dx, [winvcopydx]
  9684 00007916 C605[187C0000]01    <2> 		mov byte [mouseselecton], 1
  9685 0000791D 663B15[0E580000]    <2> 		cmp dx, [resolutionx2]
  9686 00007924 7305                <2> 		jae .nox
  9687 00007926 E897FBFFFF          <2> 		call showfontvesa
  9688                              <2> .nox:
  9689 0000792B 668B1D[F46D0000]    <2> 		mov bx, [background]
  9690 00007932 6681EA1800          <2> 		sub dx, 24
  9691 00007937 66B82B00            <2> 		mov ax, "+"
  9692 0000793B 66BBE007            <2> 		mov bx, 0000011111100000b
  9693 0000793F C605[187C0000]01    <2> 		mov byte [mouseselecton], 1
  9694 00007946 663B15[0E580000]    <2> 		cmp dx, [resolutionx2]
  9695 0000794D 7305                <2> 		jae .noplus
  9696 0000794F E86EFBFFFF          <2> 		call showfontvesa
  9697                              <2> .noplus:
  9698 00007954 6681EA1800          <2> 		sub dx, 24
  9699 00007959 66B82D00            <2> 		mov ax, "-"
  9700 0000795D 66BBE0FF            <2> 		mov bx, 1111111111100000b
  9701 00007961 C605[187C0000]01    <2> 		mov byte [mouseselecton], 1
  9702 00007968 663B15[0E580000]    <2> 		cmp dx, [resolutionx2]
  9703 0000796F 7305                <2> 		jae .nominus
  9704 00007971 E84CFBFFFF          <2> 		call showfontvesa
  9705                              <2> .nominus:
  9706 00007976 6681EA1800          <2> 		sub dx, 24
  9707 0000797B 66B83F00            <2> 		mov ax, "?"
  9708 0000797F 66BB1F00            <2> 		mov bx, 0000000000011111b
  9709 00007983 C605[187C0000]01    <2> 		mov byte [mouseselecton], 1
  9710 0000798A 663B15[0E580000]    <2> 		cmp dx, [resolutionx2]
  9711 00007991 7305                <2> 		jae .noquestion
  9712 00007993 E82AFBFFFF          <2> 		call showfontvesa
  9713                              <2> .noquestion:
  9714 00007998 665B                <2> 		pop bx
  9715 0000799A 66891D[F46D0000]    <2> 		mov [background], bx
  9716                              <2> 	winvcpst:
  9717 000079A1 C3                  <2> 		ret
  9718                              <2> 
  9719                              <2> 	windowvideocopy:
  9720 000079A2 8B35[B9760000]      <2> 		mov esi, [windowinfobuf]
  9721 000079A8 668B16              <2> 		mov dx, [esi]
  9722 000079AB 668B4E02            <2> 		mov cx, [esi + 2]
  9723 000079AF 8B7E04              <2> 		mov edi, [esi + 4]
  9724 000079B2 893D[A9760000]      <2> 		mov [windowcolor], edi
  9725 000079B8 8B7E08              <2> 		mov edi, [esi + 8]
  9726 000079BB 8B5E0C              <2> 		mov ebx, [esi + 12]
  9727 000079BE 893D[B1760000]      <2> 		mov [windowvideobuf], edi
  9728 000079C4 891D[B5760000]      <2> 		mov [windowvideobuf2], ebx
  9729 000079CA 31C0                <2> 		xor eax, eax
  9730 000079CC 31DB                <2> 		xor ebx, ebx
  9731 000079CE 6689D0              <2> 		mov ax, dx
  9732 000079D1 6689CB              <2> 		mov bx, cx
  9733 000079D4 66C1E803            <2> 		shr ax, 3
  9734 000079D8 66C1EB04            <2> 		shr bx, 4
  9735 000079DC 66A3[BD760000]      <2> 		mov [termcol], ax
  9736 000079E2 A2[A0250000]        <2> 		mov [charxy], al
  9737 000079E7 881D[A1250000]      <2> 		mov [charxy + 1], bl
  9738 000079ED 8B3D[AD760000]      <2> 		mov edi, [windowbufloc]
  9739 000079F3 3B3D[36570000]      <2> 		cmp edi, [physbaseptr]
  9740 000079F9 0F8334000000        <2> 		jae near windowvideocopyset
  9741 000079FF 31C9                <2> 		xor ecx, ecx
  9742 00007A01 31D2                <2> 		xor edx, edx
  9743 00007A03 668B15[A1760000]    <2> 		mov dx, [winvcopystx]
  9744 00007A0A 668B0D[A3760000]    <2> 		mov cx, [winvcopysty]
  9745 00007A11 8B3D[36570000]      <2> 		mov edi, [physbaseptr]
  9746 00007A17 01D7                <2> 		add edi, edx
  9747 00007A19 81F900000000        <2> 		cmp ecx, 0
  9748 00007A1F 7412                <2> 		je windowvideocopyset
  9749                              <2> 	yrescopylp:
  9750 00007A21 31C0                <2> 		xor eax, eax
  9751 00007A23 66A1[0E580000]      <2> 		mov ax, [resolutionx2]
  9752 00007A29 F7E1                <2> 		mul ecx
  9753 00007A2B 01C7                <2> 		add edi, eax
  9754 00007A2D 893D[AD760000]      <2> 		mov [windowbufloc], edi
  9755                              <2> 	windowvideocopyset:
  9756 00007A33 6631C9              <2> 		xor cx, cx
  9757 00007A36 6649                <2> 		dec cx
  9758 00007A38 66890D[0C7C0000]    <2> 		mov [charposline], cx
  9759 00007A3F 89FE                <2> 		mov esi, edi
  9760 00007A41 81EE10000000        <2> 		sub esi, 16
  9761 00007A47 31D2                <2> 		xor edx, edx
  9762 00007A49 668B15[0E580000]    <2> 		mov dx, [resolutionx2]
  9763 00007A50 C1E204              <2> 		shl edx, 4
  9764 00007A53 01D6                <2> 		add esi, edx
  9765 00007A55 8B3D[B1760000]      <2> 		mov edi, [windowvideobuf]
  9766 00007A5B 81EF04000000        <2> 		sub edi, 4
  9767 00007A61 893D[0E7C0000]      <2> 		mov [charposvbuf], edi
  9768 00007A67 E97C000000          <2> 		jmp nextcharwin
  9769                              <2> 	win.write:	;adjusted this to use alpha
  9770                              <2> 				;5R, 6G, 5B
  9771                              <2> %ifdef gui.alphablending
  9772                              <2> 		push esi
  9773                              <2> 		push bx
  9774                              <2> 		push cx
  9775                              <2> 		push dx
  9776                              <2> %ifdef gui.background
  9777                              <2> 		mov esi, edi
  9778                              <2> 		sub esi, [physbaseptr]
  9779                              <2> 		add esi, [backgroundimage]
  9780                              <2> 		cmp dword [backgroundimage], 0
  9781                              <2> 		jne .red
  9782                              <2> %endif
  9783                              <2> 		mov esi, background
  9784                              <2> 	.red:
  9785                              <2> 		mov cx, [esi]
  9786                              <2> 		shr cx, 11
  9787                              <2> 		mov bx, ax
  9788                              <2> 		shr bx, 11
  9789                              <2> 		add cx, bx
  9790                              <2> 		add cx, bx
  9791                              <2> 		add cx, bx
  9792                              <2> 		shr cx, 2
  9793                              <2> 		shl cx, 11
  9794                              <2> 		mov dx, cx
  9795                              <2> 	.green:
  9796                              <2> 		mov cx, [esi]
  9797                              <2> 		shl cx, 5
  9798                              <2> 		shr cx, 10
  9799                              <2> 		mov bx, ax
  9800                              <2> 		shl bx, 5
  9801                              <2> 		shr bx, 10
  9802                              <2> 		add cx, bx
  9803                              <2> 		add cx, bx
  9804                              <2> 		add cx, bx
  9805                              <2> 		shr cx, 2
  9806                              <2> 		shl cx, 5
  9807                              <2> 		add dx, cx
  9808                              <2> 	.blue:
  9809                              <2> 		mov cx, [esi]
  9810                              <2> 		shl cx, 11
  9811                              <2> 		shr cx, 11
  9812                              <2> 		mov bx, ax
  9813                              <2> 		shl bx, 11
  9814                              <2> 		shr bx, 11
  9815                              <2> 		add cx, bx
  9816                              <2> 		add cx, bx
  9817                              <2> 		add cx, bx
  9818                              <2> 		shr cx, 2
  9819                              <2> 		add dx, cx
  9820                              <2> 		mov [edi], dx
  9821                              <2> 		pop dx
  9822                              <2> 		pop cx
  9823                              <2> 		pop bx
  9824                              <2> 		pop esi
  9825                              <2> %else
  9826 00007A6C 668907              <2> 		mov [edi], ax
  9827                              <2> %endif
  9828 00007A6F C3                  <2> 		ret
  9829                              <2> 	copywindow:
  9830 00007A70 B201                <2> 		mov dl, 1
  9831 00007A72 D0C6                <2> 		rol dh, 1
  9832 00007A74 20F2                <2> 		and dl, dh
  9833 00007A76 66813D[B3740000]80- <2> 		cmp word [colorcache], 0x80
  9834 00007A7E 00                  <2>
  9835 00007A7F 7320                <2> 		jae switchwincolors
  9836 00007A81 66A1[AB760000]      <2> 		mov ax, [windowcolor + 2]
  9837 00007A87 E8E0FFFFFF          <2> 		call win.write
  9838 00007A8C 80FA00              <2> 		cmp dl, 0
  9839 00007A8F 742B                <2> 		je nowritewin
  9840 00007A91 66A1[A9760000]      <2> 		mov ax, [windowcolor]
  9841 00007A97 E8D0FFFFFF          <2> 		call win.write
  9842 00007A9C E91B000000          <2> 		jmp nowritewin
  9843                              <2> 	switchwincolors:
  9844 00007AA1 66A1[A9760000]      <2> 		mov ax, [windowcolor]
  9845 00007AA7 E8C0FFFFFF          <2> 		call win.write
  9846 00007AAC 80FA00              <2> 		cmp dl, 0
  9847 00007AAF 740B                <2> 		je nowritewin
  9848 00007AB1 66A1[AB760000]      <2> 		mov ax, [windowcolor + 2]
  9849 00007AB7 E8B0FFFFFF          <2> 		call win.write
  9850                              <2> 	nowritewin:
  9851 00007ABC 81C702000000        <2> 		add edi, 2
  9852 00007AC2 FEC1                <2> 		inc cl
  9853 00007AC4 80F908              <2> 		cmp cl, 8
  9854 00007AC7 75A7                <2> 		jne copywindow
  9855 00007AC9 43                  <2> 		inc ebx
  9856 00007ACA 30C9                <2> 		xor cl, cl
  9857 00007ACC 31D2                <2> 		xor edx, edx
  9858 00007ACE 668B15[0E580000]    <2> 		mov dx, [resolutionx2]
  9859 00007AD5 01D6                <2> 		add esi, edx
  9860 00007AD7 89F7                <2> 		mov edi, esi
  9861 00007AD9 8AB3[9C890000]      <2> 		mov dh, [fonts + ebx]
  9862 00007ADF D0CE                <2> 		ror dh, 1
  9863 00007AE1 FEC5                <2> 		inc ch
  9864 00007AE3 80FD10              <2> 		cmp ch, 16
  9865 00007AE6 7588                <2> 		jne copywindow
  9866                              <2> 	nextcharwin:
  9867 00007AE8 6631C9              <2> 		xor cx, cx
  9868 00007AEB 8B3D[0E7C0000]      <2> 		mov edi, [charposvbuf]
  9869 00007AF1 81C704000000        <2> 		add edi, 4
  9870 00007AF7 3B3D[BF760000]      <2> 		cmp edi, [wincopyendpos]
  9871 00007AFD 0F83F2000000        <2> 		jae near donewincopynow
  9872 00007B03 668B5F02            <2> 		mov bx, [edi + 2]
  9873 00007B07 6681FB0000          <2> 		cmp bx, 0
  9874 00007B0C 7508                <2> 		jne nofixcolorwin
  9875 00007B0E 66BB0700            <2> 		mov bx, 7
  9876 00007B12 66895F02            <2> 		mov [edi + 2], bx
  9877                              <2> 	nofixcolorwin:
  9878 00007B16 66891D[B3740000]    <2> 		mov [colorcache], bx
  9879 00007B1D 8B1F                <2> 		mov ebx, [edi]
  9880 00007B1F 893D[0E7C0000]      <2> 		mov [charposvbuf], edi
  9881 00007B25 813D[B5760000]0000- <2> 		cmp dword [windowvideobuf2], 0
  9882 00007B2D 0000                <2>
  9883 00007B2F 7455                <2> 		je noskipcharcopy
  9884 00007B31 2B3D[B1760000]      <2> 		sub edi, [windowvideobuf]
  9885 00007B37 033D[B5760000]      <2> 		add edi, [windowvideobuf2]
  9886 00007B3D 8B07                <2> 		mov eax, [edi]
  9887 00007B3F 39D8                <2> 		cmp eax, ebx
  9888 00007B41 7543                <2> 		jne noskipcharcopy
  9889                              <2> 	skipcharcopy:
  9890 00007B43 81C610000000        <2> 		add esi, 16
  9891 00007B49 668B0D[0C7C0000]    <2> 		mov cx, [charposline]
  9892 00007B50 6641                <2> 		inc cx
  9893 00007B52 66890D[0C7C0000]    <2> 		mov [charposline], cx
  9894 00007B59 663B0D[BD760000]    <2> 		cmp cx, [termcol]
  9895 00007B60 7286                <2> 		jb nextcharwin
  9896 00007B62 6631C9              <2> 		xor cx, cx
  9897 00007B65 66890D[0C7C0000]    <2> 		mov [charposline], cx
  9898 00007B6C 31D2                <2> 		xor edx, edx
  9899 00007B6E 668B15[0E580000]    <2> 		mov dx, [resolutionx2]
  9900 00007B75 C1E204              <2> 		shl edx, 4
  9901 00007B78 662B15[A5760000]    <2> 		sub dx, [winvcopydx]
  9902 00007B7F 01D6                <2> 		add esi, edx
  9903 00007B81 E962FFFFFF          <2> 		jmp nextcharwin
  9904                              <2> 	noskipcharcopy:
  9905 00007B86 891F                <2> 		mov [edi], ebx
  9906 00007B88 8B3D[0E7C0000]      <2> 		mov edi, [charposvbuf]
  9907 00007B8E C1E310              <2> 		shl ebx, 16
  9908 00007B91 C1EB0C              <2> 		shr ebx, 12
  9909 00007B94 31D2                <2> 		xor edx, edx
  9910 00007B96 668B15[0E580000]    <2> 		mov dx, [resolutionx2]
  9911 00007B9D C1E204              <2> 		shl edx, 4
  9912 00007BA0 29D6                <2> 		sub esi, edx
  9913 00007BA2 81C610000000        <2> 		add esi, 16
  9914 00007BA8 89F7                <2> 		mov edi, esi
  9915 00007BAA 668B0D[0C7C0000]    <2> 		mov cx, [charposline]
  9916 00007BB1 6641                <2> 		inc cx
  9917 00007BB3 663B0D[BD760000]    <2> 		cmp cx, [termcol]
  9918 00007BBA 7317                <2> 		jae fixwindowcopy
  9919 00007BBC 66890D[0C7C0000]    <2> 		mov [charposline], cx
  9920 00007BC3 6631C9              <2> 		xor cx, cx
  9921 00007BC6 8AB3[9C890000]      <2> 		mov dh, [fonts + ebx]
  9922 00007BCC D0CE                <2> 		ror dh, 1
  9923 00007BCE E99DFEFFFF          <2> 		jmp copywindow
  9924                              <2> fixwindowcopy:
  9925 00007BD3 6631C9              <2> 		xor cx, cx
  9926 00007BD6 66890D[0C7C0000]    <2> 		mov [charposline], cx
  9927 00007BDD 662B15[A5760000]    <2> 		sub dx, [winvcopydx]
  9928 00007BE4 01D6                <2> 		add esi, edx
  9929 00007BE6 89F7                <2> 		mov edi, esi
  9930 00007BE8 8AB3[9C890000]      <2> 		mov dh, [fonts + ebx]
  9931 00007BEE D0CE                <2> 		ror dh, 1
  9932 00007BF0 E97BFEFFFF          <2> 		jmp copywindow
  9933                              <2> donewincopynow:
  9934 00007BF5 803D[AC230000]01    <2> 		cmp byte [termcopyon], 1
  9935 00007BFC 7506                <2> 		jne forgetresetstuff
  9936 00007BFE E885ADFFFF          <2> 		call switchtermcursor
  9937 00007C03 61                  <2> 		popa
  9938                              <2> forgetresetstuff:
  9939 00007C04 C605[AC230000]00    <2> 		mov byte [termcopyon], 0
  9940 00007C0B C3                  <2> 		ret
  9941                              <2> 		
  9942 00007C0C 0000                <2> charposline dw 0
  9943 00007C0E 00000000            <2> charposvbuf dw 0,0
  9944                              <1> 				
  9945 00007C12 00                  <1> copygui db 0
  9946 00007C13 00                  <1> graphicsset db 0
  9947 00007C14 0000                <1> graphicspos db 0,0
  9948 00007C16 00                  <1> showcursorfonton db 0
  9949 00007C17 00                  <1> savefonton db 0
  9950 00007C18 00                  <1> mouseselecton db 0
  9951                              <1> 
  9952 00007C19 00                  <1> pbutton db 0
  9953 00007C1A 00                  <1> pLBUTTON db 0
  9954 00007C1B 00                  <1> pRBUTTON db 0
  9955 00007C1C 00000000            <1> dragging dw 0,0
  9956 00007C20 0000000000000000    <1> lastpos dw 0,0,0,0
  9957 00007C28 00000000            <1> colorbuf dw 0,0
  9958                              <1> 	
  9959                              <1> 	clickicon:
  9960 00007C2C B001                <1> 		mov al, 1
  9961 00007C2E A2[197C0000]        <1> 		mov [pbutton], al
  9962 00007C33 A0[1A7C0000]        <1> 		mov al, [pLBUTTON]
  9963 00007C38 2205[155B0000]      <1> 		and al, [LBUTTON]
  9964 00007C3E 8A25[1B7C0000]      <1> 		mov ah, [pRBUTTON]
  9965 00007C44 2225[165B0000]      <1> 		and ah, [RBUTTON]
  9966 00007C4A 08E0                <1> 		or al, ah
  9967 00007C4C 3C00                <1> 		cmp al, 0
  9968 00007C4E 741B                <1> 		je nodragclick
  9969 00007C50 813D[1C7C0000]0100- <1> 		cmp dword [dragging], 1
  9970 00007C58 0000                <1>
  9971 00007C5A 732F                <1> 		jae dragclick
  9972 00007C5C C705[1C7C0000]0100- <1> 		mov dword [dragging], 1
  9973 00007C64 0000                <1>
  9974 00007C66 E920000000          <1> 		jmp dragclick
  9975                              <1> 	nodragclick:
  9976 00007C6B 31C0                <1> 		xor eax, eax
  9977 00007C6D A3[1C7C0000]        <1> 		mov dword [dragging], eax
  9978 00007C72 A2[197C0000]        <1> 		mov [pbutton], al
  9979 00007C77 A0[155B0000]        <1> 		mov al, [LBUTTON]
  9980 00007C7C A2[1A7C0000]        <1> 		mov [pLBUTTON], al
  9981 00007C81 A0[165B0000]        <1> 		mov al, [RBUTTON]
  9982 00007C86 A2[1B7C0000]        <1> 		mov [pRBUTTON], al
  9983                              <1> 	dragclick:
  9984 00007C8B 6631C0              <1> 		xor ax, ax
  9985 00007C8E BE[7B0C0100]        <1> 		mov esi, graphicstable
  9986 00007C93 C705[6C840000]0000- <1> 		mov dword [codepointer], 0
  9987 00007C9B 0000                <1>
  9988                              <1> 	clicon2:
  9989 00007C9D 31D2                <1> 		xor edx, edx
  9990 00007C9F 31C9                <1> 		xor ecx, ecx
  9991 00007CA1 66813E0100          <1> 		cmp word [esi], 1
  9992 00007CA6 0F841B000000        <1> 		je near iconselect
  9993 00007CAC 66813E0200          <1> 		cmp word [esi], 2
  9994 00007CB1 0F8472010000        <1> 		je near textselected
  9995 00007CB7 66813E0300          <1> 		cmp word [esi], 3
  9996 00007CBC 0F84C7020000        <1> 		je near windowselect
  9997 00007CC2 E910040000          <1> 		jmp nexticonsel
  9998                              <1> 	iconselect:
  9999 00007CC7 668B5606            <1> 		mov dx, [esi + 6]
 10000 00007CCB 6689D0              <1> 		mov ax, dx
 10001 00007CCE 668B4E08            <1> 		mov cx, [esi + 8]
 10002 00007CD2 6689CB              <1> 		mov bx, cx
 10003 00007CD5 6681C32000          <1> 		add bx, 32
 10004 00007CDA 6601D0              <1> 		add ax, dx
 10005 00007CDD 813D[1C7C0000]0100- <1> 		cmp dword [dragging], 1
 10006 00007CE5 0000                <1>
 10007 00007CE7 746F                <1> 		je dragicon
 10008 00007CE9 813D[1C7C0000]0000- <1> 		cmp dword [dragging], 0
 10009 00007CF1 0000                <1>
 10010 00007CF3 7411                <1> 		je nodragiconcheck
 10011 00007CF5 3935[1C7C0000]      <1> 		cmp dword [dragging], esi
 10012 00007CFB 0F85D6030000        <1> 		jne near nexticonsel
 10013 00007D01 E952000000          <1> 		jmp dragicon
 10014                              <1> 	nodragiconcheck:
 10015 00007D06 663905[045A0000]    <1> 		cmp [mousecursorposition], ax
 10016 00007D0D 0F82C4030000        <1> 		jb near nexticonsel
 10017 00007D13 66054000            <1> 		add ax, 64
 10018 00007D17 663905[045A0000]    <1> 		cmp [mousecursorposition], ax
 10019 00007D1E 0F87B3030000        <1> 		ja near nexticonsel
 10020 00007D24 6629D0              <1> 		sub ax, dx
 10021 00007D27 66390D[065A0000]    <1> 		cmp [mousecursorposition + 2], cx
 10022 00007D2E 0F82A3030000        <1> 		jb near nexticonsel
 10023 00007D34 66391D[065A0000]    <1> 		cmp [mousecursorposition + 2], bx
 10024 00007D3B 0F8796030000        <1> 		ja near nexticonsel
 10025 00007D41 668B460A            <1> 		mov ax, [esi + 10]
 10026 00007D45 66250100            <1> 		and ax, 1
 10027 00007D49 663D0100            <1> 		cmp ax, 1
 10028 00007D4D 0F84B6000000        <1> 		je near unselecticon
 10029 00007D53 E98D000000          <1> 		jmp nodragicon
 10030                              <1> 	dragicon:
 10031 00007D58 663905[005A0000]    <1> 		cmp [lastmouseposition], ax
 10032 00007D5F 0F8272030000        <1> 		jb near nexticonsel
 10033 00007D65 66054000            <1> 		add ax, 64
 10034 00007D69 663905[005A0000]    <1> 		cmp [lastmouseposition], ax
 10035 00007D70 0F8761030000        <1> 		ja near nexticonsel
 10036 00007D76 6629D0              <1> 		sub ax, dx
 10037 00007D79 66390D[025A0000]    <1> 		cmp [lastmouseposition + 2], cx
 10038 00007D80 0F8251030000        <1> 		jb near nexticonsel
 10039 00007D86 66391D[025A0000]    <1> 		cmp [lastmouseposition + 2], bx
 10040 00007D8D 0F8744030000        <1> 		ja near nexticonsel
 10041 00007D93 668B460A            <1> 		mov ax, [esi + 10]
 10042 00007D97 2410                <1> 		and al, 00010000b
 10043 00007D99 3C10                <1> 		cmp al, 00010000b
 10044 00007D9B 7448                <1> 		je nodragicon
 10045 00007D9D 8935[1C7C0000]      <1> 		mov [dragging], esi
 10046 00007DA3 66D1E2              <1> 		shl dx, 1
 10047 00007DA6 662B15[005A0000]    <1> 		sub dx, [lastmouseposition]
 10048 00007DAD 660315[045A0000]    <1> 		add dx, [mousecursorposition]
 10049 00007DB4 66D1EA              <1> 		shr dx, 1
 10050 00007DB7 66030D[065A0000]    <1> 		add cx, [mousecursorposition + 2]
 10051 00007DBE 662B0D[025A0000]    <1> 		sub cx, [lastmouseposition + 2]
 10052 00007DC5 663B15[0E580000]    <1> 		cmp dx, [resolutionx2]
 10053 00007DCC 7607                <1> 		jbe chkyresdrgicn
 10054 00007DCE 668B15[045A0000]    <1> 		mov dx, [mousecursorposition]
 10055                              <1> 	chkyresdrgicn:
 10056 00007DD5 663B0D[22570000]    <1> 		cmp cx, [resolutiony]
 10057 00007DDC 7607                <1> 		jbe nodragicon
 10058 00007DDE 668B0D[065A0000]    <1> 		mov cx, [mousecursorposition + 2]
 10059                              <1> 	nodragicon:
 10060 00007DE5 66814E0A0100        <1> 		or word [esi + 10], 1
 10061 00007DEB 8B5E0C              <1> 		mov ebx, [esi + 12]
 10062 00007DEE 668B460A            <1> 		mov ax, [esi + 10]
 10063 00007DF2 8B7602              <1> 		mov esi, [esi + 2]
 10064 00007DF5 C705[6C840000]0000- <1> 		mov dword [codepointer], 0
 10065 00007DFD 0000                <1>
 10066 00007DFF E8A3EDFFFF          <1> 		call showicon
 10067 00007E04 E9E7020000          <1> 		jmp doneiconsel
 10068                              <1> 	unselecticon:
 10069 00007E09 6681660AFEFF        <1> 		and word [esi + 10], 0xFFFE
 10070 00007E0F 8B5E0C              <1> 		mov ebx, [esi + 12]
 10071 00007E12 668B460A            <1> 		mov ax, [esi + 10]
 10072 00007E16 8B7602              <1> 		mov esi, [esi + 2]
 10073 00007E19 891D[6C840000]      <1> 		mov [codepointer], ebx
 10074 00007E1F E883EDFFFF          <1> 		call showicon
 10075 00007E24 E9C7020000          <1> 		jmp doneiconsel
 10076                              <1> 	textselected:
 10077 00007E29 8B5E02              <1> 		mov ebx, [esi + 2]
 10078 00007E2C 668B5606            <1> 		mov dx, [esi + 6]
 10079 00007E30 6689D0              <1> 		mov ax, dx
 10080 00007E33 668B4E08            <1> 		mov cx, [esi + 8]
 10081                              <1> 	lengthtesttext:
 10082 00007E37 803B00              <1> 		cmp byte [ebx], 0
 10083 00007E3A 7407                <1> 		je donetesttextlength
 10084 00007E3C 43                  <1> 		inc ebx
 10085 00007E3D 66051000            <1> 		add ax, 16
 10086 00007E41 EBF4                <1> 		jmp lengthtesttext
 10087                              <1> 	donetesttextlength:
 10088 00007E43 6689CB              <1> 		mov bx, cx
 10089 00007E46 6681C30F00          <1> 		add bx, 15
 10090 00007E4B 813D[1C7C0000]0100- <1> 		cmp dword [dragging], 1
 10091 00007E53 0000                <1>
 10092 00007E55 7468                <1> 		je dragtext
 10093 00007E57 813D[1C7C0000]0000- <1> 		cmp dword [dragging], 0
 10094 00007E5F 0000                <1>
 10095 00007E61 7411                <1> 		je nodragtextcheck
 10096 00007E63 3935[1C7C0000]      <1> 		cmp dword [dragging], esi
 10097 00007E69 0F8568020000        <1> 		jne near nexticonsel
 10098 00007E6F E94B000000          <1> 		jmp dragtext
 10099                              <1> 	nodragtextcheck:
 10100 00007E74 663915[045A0000]    <1> 		cmp [mousecursorposition], dx
 10101 00007E7B 0F8256020000        <1> 		jb near nexticonsel
 10102 00007E81 663905[045A0000]    <1> 		cmp [mousecursorposition], ax
 10103 00007E88 0F8749020000        <1> 		ja near nexticonsel
 10104 00007E8E 66390D[065A0000]    <1> 		cmp [mousecursorposition + 2], cx
 10105 00007E95 0F823C020000        <1> 		jb near nexticonsel
 10106 00007E9B 66391D[065A0000]    <1> 		cmp [mousecursorposition + 2], bx
 10107 00007EA2 0F872F020000        <1> 		ja near nexticonsel
 10108 00007EA8 668B460A            <1> 		mov ax, [esi + 10]
 10109 00007EAC 66250100            <1> 		and ax, 1
 10110 00007EB0 663D0100            <1> 		cmp ax, 1
 10111 00007EB4 0F84AB000000        <1> 		je near unselecttext
 10112 00007EBA E986000000          <1> 		jmp nodragtext
 10113                              <1> 	dragtext:
 10114 00007EBF 663915[005A0000]    <1> 		cmp [lastmouseposition], dx
 10115 00007EC6 0F820B020000        <1> 		jb near nexticonsel
 10116 00007ECC 663905[005A0000]    <1> 		cmp [lastmouseposition], ax
 10117 00007ED3 0F87FE010000        <1> 		ja near nexticonsel
 10118 00007ED9 66390D[025A0000]    <1> 		cmp [lastmouseposition + 2], cx
 10119 00007EE0 0F82F1010000        <1> 		jb near nexticonsel
 10120 00007EE6 66391D[025A0000]    <1> 		cmp [lastmouseposition + 2], bx
 10121 00007EED 0F87E4010000        <1> 		ja near nexticonsel
 10122 00007EF3 668B460A            <1> 		mov ax, [esi + 10]
 10123 00007EF7 2410                <1> 		and al, 00010000b
 10124 00007EF9 663D1000            <1> 		cmp ax, 00010000b
 10125 00007EFD 0F8442000000        <1> 		je near nodragtext
 10126 00007F03 8935[1C7C0000]      <1> 		mov [dragging], esi
 10127 00007F09 662B15[005A0000]    <1> 		sub dx, [lastmouseposition]
 10128 00007F10 660315[045A0000]    <1> 		add dx, [mousecursorposition]
 10129 00007F17 66030D[065A0000]    <1> 		add cx, [mousecursorposition + 2]
 10130 00007F1E 662B0D[025A0000]    <1> 		sub cx, [lastmouseposition + 2]
 10131 00007F25 663B15[0E580000]    <1> 		cmp dx, [resolutionx2]
 10132 00007F2C 7607                <1> 		jbe chkyresdrgtxt
 10133 00007F2E 668B15[045A0000]    <1> 		mov dx, [mousecursorposition]
 10134                              <1> 	chkyresdrgtxt:
 10135 00007F35 663B0D[22570000]    <1> 		cmp cx, [resolutiony]
 10136 00007F3C 7607                <1> 		jbe nodragtext
 10137 00007F3E 668B0D[065A0000]    <1> 		mov cx, [mousecursorposition + 2]
 10138                              <1> 	nodragtext:
 10139 00007F45 66814E0A0100        <1> 		or word [esi + 10], 1
 10140 00007F4B 8B5E0C              <1> 		mov ebx, [esi + 12]
 10141 00007F4E 891D[6C840000]      <1> 		mov [codepointer], ebx
 10142 00007F54 668B460A            <1> 		mov ax, [esi + 10]
 10143 00007F58 8B7602              <1> 		mov esi, [esi + 2]
 10144 00007F5B E8D6F4FFFF          <1> 		call showstring
 10145 00007F60 E98B010000          <1> 		jmp doneiconsel
 10146                              <1> 	unselecttext:
 10147 00007F65 6681660AFEFF        <1> 		and word [esi + 10], 0xFFFE
 10148 00007F6B 8B5E0C              <1> 		mov ebx, [esi + 12]
 10149 00007F6E 668B460A            <1> 		mov ax, [esi + 10]
 10150 00007F72 8B7602              <1> 		mov esi, [esi + 2]
 10151 00007F75 C705[6C840000]0000- <1> 		mov dword [codepointer], 0
 10152 00007F7D 0000                <1>
 10153 00007F7F E8B2F4FFFF          <1> 		call showstring
 10154 00007F84 E967010000          <1> 		jmp doneiconsel
 10155                              <1> windowselect:
 10156 00007F89 8B7E02              <1> 		mov edi, [esi + 2]
 10157 00007F8C 668B5606            <1> 		mov dx, [esi + 6]
 10158 00007F90 6689D0              <1> 		mov ax, dx
 10159 00007F93 668B4E08            <1> 		mov cx, [esi + 8]
 10160 00007F97 6689CB              <1> 		mov bx, cx
 10161 00007F9A 6681C31000          <1> 		add bx, 16
 10162 00007F9F 813D[1C7C0000]0100- <1> 		cmp dword [dragging], 1
 10163 00007FA7 0000                <1>
 10164 00007FA9 746D                <1> 		je dragwin
 10165 00007FAB 813D[1C7C0000]0000- <1> 		cmp dword [dragging], 0
 10166 00007FB3 0000                <1>
 10167 00007FB5 7411                <1> 		je nodragwincheck
 10168 00007FB7 3935[1C7C0000]      <1> 		cmp dword [dragging], esi
 10169 00007FBD 0F8514010000        <1> 		jne near nexticonsel
 10170 00007FC3 E950000000          <1> 		jmp dragwin
 10171                              <1> 	nodragwincheck:
 10172 00007FC8 663905[045A0000]    <1> 		cmp [mousecursorposition], ax
 10173 00007FCF 0F8202010000        <1> 		jb near nexticonsel
 10174 00007FD5 660307              <1> 		add ax, [edi]
 10175 00007FD8 660307              <1> 		add ax, [edi]
 10176 00007FDB 663905[045A0000]    <1> 		cmp [mousecursorposition], ax
 10177 00007FE2 0F87EF000000        <1> 		ja near nexticonsel
 10178 00007FE8 66390D[065A0000]    <1> 		cmp [mousecursorposition + 2], cx
 10179 00007FEF 0F82E2000000        <1> 		jb near nexticonsel
 10180 00007FF5 66391D[065A0000]    <1> 		cmp [mousecursorposition + 2], bx
 10181 00007FFC 0F87D5000000        <1> 		ja near nexticonsel
 10182 00008002 662D1400            <1> 		sub ax, 20
 10183 00008006 663905[045A0000]    <1> 		cmp [mousecursorposition], ax
 10184 0000800D 0F87A4000000        <1> 		ja near killwin
 10185 00008013 E98B000000          <1> 		jmp nodragwin
 10186                              <1> 	dragwin:
 10187 00008018 663905[005A0000]    <1> 		cmp [lastmouseposition], ax
 10188 0000801F 0F82B2000000        <1> 		jb near nexticonsel
 10189 00008025 660307              <1> 		add ax, [edi]
 10190 00008028 660307              <1> 		add ax, [edi]
 10191 0000802B 663905[005A0000]    <1> 		cmp [lastmouseposition], ax
 10192 00008032 0F879F000000        <1> 		ja near nexticonsel
 10193 00008038 66390D[025A0000]    <1> 		cmp [lastmouseposition + 2], cx
 10194 0000803F 0F8292000000        <1> 		jb near nexticonsel
 10195 00008045 66391D[025A0000]    <1> 		cmp [lastmouseposition + 2], bx
 10196 0000804C 0F8785000000        <1> 		ja near nexticonsel
 10197 00008052 8935[1C7C0000]      <1> 		mov [dragging], esi
 10198 00008058 803D[80810000]01    <1> 		cmp byte [windrag], 1
 10199 0000805F 7706                <1> 		ja .nochangewindrag
 10200 00008061 FE05[80810000]      <1> 		inc byte [windrag]
 10201                              <1> 	.nochangewindrag:
 10202 00008067 662B15[005A0000]    <1> 		sub dx, [lastmouseposition]
 10203 0000806E 660315[045A0000]    <1> 		add dx, [mousecursorposition]
 10204 00008075 66030D[065A0000]    <1> 		add cx, [mousecursorposition + 2]
 10205 0000807C 662B0D[025A0000]    <1> 		sub cx, [lastmouseposition + 2]
 10206 00008083 663B15[0E580000]    <1> 		cmp dx, [resolutionx2]
 10207 0000808A 7607                <1> 		jbe chkyresdrgwin
 10208 0000808C 668B15[045A0000]    <1> 		mov dx, [mousecursorposition]
 10209                              <1> 	chkyresdrgwin:
 10210 00008093 663B0D[22570000]    <1> 		cmp cx, [resolutiony]
 10211 0000809A 7607                <1> 		jbe nodragwin
 10212 0000809C 668B0D[065A0000]    <1> 		mov cx, [mousecursorposition + 2]
 10213                              <1> 	nodragwin:
 10214 000080A3 8B5E0C              <1> 		mov ebx, [esi + 12]
 10215 000080A6 668B460A            <1> 		mov ax, [esi + 10]
 10216 000080AA 8B7602              <1> 		mov esi, [esi + 2]
 10217 000080AD E811F6FFFF          <1> 		call showwindow
 10218 000080B2 E939000000          <1> 		jmp doneiconsel
 10219                              <1> 	killwin:
 10220 000080B7 66C7060000          <1> 		mov word [esi], 0
 10221 000080BC C605[AB230000]00    <1> 		mov byte [termguion], 0
 10222 000080C3 E8E0ECFFFF          <1> 		call guiclear
 10223 000080C8 E82BEDFFFF          <1> 		call reloadallgraphics
 10224 000080CD E872EAFFFF          <1> 		call switchmousepos2 ;Copy what is now under the mouse
 10225 000080D2 E94EE6FFFF          <1> 		jmp guistart
 10226                              <1> 	nexticonsel:
 10227 000080D7 6681660AFEFF        <1> 		and word [esi + 10], 0xFFFE
 10228 000080DD 81C610000000        <1> 		add esi, 16
 10229 000080E3 81FE[7B0E0100]      <1> 		cmp esi, graphicstableend
 10230 000080E9 7305                <1> 		jae doneiconsel
 10231 000080EB E9ADFBFFFF          <1> 		jmp clicon2
 10232                              <1> 	doneiconsel:
 10233 000080F0 813D[1C7C0000]0100- <1> 		cmp dword [dragging], 1
 10234 000080F8 0000                <1>
 10235 000080FA 731A                <1> 		jae doneiconsel2
 10236 000080FC A2[80810000]        <1> 		mov [windrag], al
 10237 00008101 813D[6C840000]0000- <1> 		cmp dword [codepointer], 0
 10238 00008109 0000                <1>
 10239 0000810B 7409                <1> 		je doneiconsel2
 10240 0000810D 8B1D[6C840000]      <1> 		mov ebx, [codepointer]
 10241 00008113 FFD3                <1> 		call ebx
 10242 00008115 C3                  <1> 		ret
 10243                              <1> 	doneiconsel2:
 10244 00008116 A0[155B0000]        <1> 		mov al, [LBUTTON]
 10245 0000811B A2[1A7C0000]        <1> 		mov [pLBUTTON], al
 10246 00008120 A0[165B0000]        <1> 		mov al, [RBUTTON]
 10247 00008125 A2[1B7C0000]        <1> 		mov [pRBUTTON], al
 10248 0000812A 813D[1C7C0000]0100- <1> 		cmp dword [dragging], 1
 10249 00008132 0000                <1>
 10250 00008134 0F8618000000        <1> 		jbe near noreloadgraphicsclick
 10251 0000813A E805EAFFFF          <1> 		call switchmousepos2
 10252 0000813F 803D[80810000]01    <1> 		cmp byte [windrag], 1
 10253 00008146 7305                <1> 		jae noclearcursorcl
 10254 00008148 E83FE9FFFF          <1> 		call clearmousecursor
 10255                              <1> noclearcursorcl:
 10256 0000814D E8A6ECFFFF          <1> 		call reloadallgraphics
 10257                              <1> noreloadgraphicsclick:
 10258 00008152 30E4                <1> 		xor ah, ah
 10259 00008154 31C9                <1> 		xor ecx, ecx
 10260 00008156 31D2                <1> 		xor edx, edx
 10261 00008158 B001                <1> 		mov al, 1
 10262 0000815A 668B15[045A0000]    <1> 		mov dx, [mousecursorposition]
 10263 00008161 668B0D[065A0000]    <1> 		mov cx, [mousecursorposition + 2]
 10264 00008168 66BBE738            <1> 		mov bx, 0011100011100111b
 10265 0000816C C605[167C0000]01    <1> 		mov byte [showcursorfonton], 1
 10266 00008173 E84AF3FFFF          <1> 		call showfontvesa
 10267 00008178 C605[167C0000]00    <1> 		mov byte [showcursorfonton], 0
 10268 0000817F C3                  <1> 		ret
 10269 00008180 00                  <1> windrag db 0
 10270 00008181 00000000            <1> lastdrag dw 0,0
 10271 00008185 00000000            <1> grpctblpos dw 0,0
 10272                              <1> 
 10273                              <1> 
 10274                              <1> 
 10275 00008189 00<rept>            <1> grphbuf times 16 db 0
 10276                              <1> 	graphicsadd:
 10277 00008199 BF[7B0C0100]        <1> 		mov edi, graphicstable
 10278                              <1> 	shwgrph1:
 10279 0000819E 397702              <1> 		cmp dword [edi + 2], esi
 10280 000081A1 7414                <1> 		je showgraphicsreplace2
 10281 000081A3 81C710000000        <1> 		add edi, 16
 10282 000081A9 81FF[7B0E0100]      <1> 		cmp edi, graphicstableend
 10283 000081AF 0F8337020000        <1> 		jae near showgraphicsnew
 10284 000081B5 EBE7                <1> 		jmp shwgrph1
 10285                              <1> 	showgraphicsreplace2:
 10286 000081B7 8935[8B810000]      <1> 		mov [grphbuf + 2], esi
 10287 000081BD 668915[8F810000]    <1> 		mov [grphbuf + 6], dx
 10288 000081C4 66890D[91810000]    <1> 		mov [grphbuf + 8], cx
 10289 000081CB 891D[95810000]      <1> 		mov [grphbuf + 12], ebx
 10290 000081D1 30FF                <1> 		xor bh, bh
 10291 000081D3 88E3                <1> 		mov bl, ah
 10292 000081D5 30E4                <1> 		xor ah, ah
 10293 000081D7 66A3[93810000]      <1> 		mov [grphbuf + 10], ax	
 10294 000081DD 66891D[89810000]    <1> 		mov [grphbuf], bx
 10295 000081E4 66A1[89810000]      <1> 		mov ax, [grphbuf]
 10296 000081EA 663D0100            <1> 		cmp ax, 1
 10297 000081EE 0F8419000000        <1> 		je near replaceicon
 10298 000081F4 663D0200            <1> 		cmp ax, 2
 10299 000081F8 0F8493000000        <1> 		je near replacestring
 10300 000081FE 663D0300            <1> 		cmp ax, 3
 10301 00008202 0F840F010000        <1> 		je near replacewindow
 10302 00008208 E9BC010000          <1> 		jmp showgraphicsreplace
 10303                              <1> 	replaceicon:
 10304 0000820D 893D[207C0000]      <1> 		mov [lastpos], edi
 10305 00008213 8935[247C0000]      <1> 		mov [lastpos + 4], esi
 10306 00008219 8B7702              <1> 		mov esi, [edi + 2]
 10307 0000821C 668B5F0C            <1> 		mov bx, [edi + 12]
 10308 00008220 668B5706            <1> 		mov dx, [edi + 6]
 10309 00008224 668B4F08            <1> 		mov cx, [edi + 8]
 10310 00008228 668B06              <1> 		mov ax, [esi]
 10311 0000822B 66A3[287C0000]      <1> 		mov [colorbuf], ax
 10312 00008231 66A1[F46D0000]      <1> 		mov ax, [background]
 10313 00008237 668906              <1> 		mov [esi], ax
 10314 0000823A 8B5F0C              <1> 		mov ebx, [edi + 12]
 10315 0000823D 668B470A            <1> 		mov ax, [edi + 10]
 10316 00008241 2401                <1> 		and al, 1
 10317 00008243 A2[70840000]        <1> 		mov [iconselected], al
 10318 00008248 668B470A            <1> 		mov ax, [edi + 10]
 10319 0000824C E869E9FFFF          <1> 		call showicon2
 10320 00008251 8B3D[207C0000]      <1> 		mov edi, [lastpos]
 10321 00008257 8B7702              <1> 		mov esi, [edi + 2]
 10322 0000825A 66A1[287C0000]      <1> 		mov ax, [colorbuf]
 10323 00008260 668906              <1> 		mov [esi], ax
 10324 00008263 8B35[247C0000]      <1> 		mov esi, [lastpos + 4]
 10325 00008269 668B15[8F810000]    <1> 		mov dx, [grphbuf + 6]
 10326 00008270 668B0D[91810000]    <1> 		mov cx, [grphbuf + 8]
 10327 00008277 668B1D[89810000]    <1> 		mov bx, [grphbuf]
 10328 0000827E 66A1[93810000]      <1> 		mov ax, [grphbuf + 10]
 10329 00008284 88DC                <1> 		mov ah, bl
 10330 00008286 8B1D[95810000]      <1> 		mov ebx, [grphbuf + 12]
 10331 0000828C E938010000          <1> 		jmp showgraphicsreplace
 10332                              <1> 	replacestring:
 10333 00008291 893D[207C0000]      <1> 		mov [lastpos], edi
 10334 00008297 8935[247C0000]      <1> 		mov [lastpos + 4], esi
 10335 0000829D 8B5F0C              <1> 		mov ebx, [edi + 12]
 10336 000082A0 8B7702              <1> 		mov esi, [edi + 2]
 10337 000082A3 668B5706            <1> 		mov dx, [edi + 6]
 10338 000082A7 668B4F08            <1> 		mov cx, [edi + 8]
 10339 000082AB 66A1[B1740000]      <1> 		mov ax, [colorfont2]
 10340 000082B1 66A3[287C0000]      <1> 		mov [colorbuf], ax
 10341 000082B7 66A1[F46D0000]      <1> 		mov ax, [background]
 10342 000082BD 66A3[B1740000]      <1> 		mov [colorfont2], ax		
 10343 000082C3 8B5F0C              <1> 		mov ebx, [edi + 12]
 10344 000082C6 668B470A            <1> 		mov ax, [edi + 10]
 10345 000082CA 2401                <1> 		and al, 1
 10346 000082CC A2[187C0000]        <1> 		mov [mouseselecton], al
 10347 000082D1 668B470A            <1> 		mov ax, [edi + 10]
 10348 000082D5 E86FF1FFFF          <1> 		call showstring2
 10349 000082DA 66A1[287C0000]      <1> 		mov ax, [colorbuf]
 10350 000082E0 66A3[B1740000]      <1> 		mov [colorfont2], ax
 10351 000082E6 8B3D[207C0000]      <1> 		mov edi, [lastpos]
 10352 000082EC 8B7702              <1> 		mov esi, [edi + 2]
 10353 000082EF 668B15[8F810000]    <1> 		mov dx, [grphbuf + 6]
 10354 000082F6 668B0D[91810000]    <1> 		mov cx, [grphbuf + 8]
 10355 000082FD 668B1D[89810000]    <1> 		mov bx, [grphbuf]
 10356 00008304 66A1[93810000]      <1> 		mov ax, [grphbuf + 10]
 10357 0000830A 88DC                <1> 		mov ah, bl
 10358 0000830C 8B1D[95810000]      <1> 		mov ebx, [grphbuf + 12]
 10359 00008312 E9B2000000          <1> 		jmp showgraphicsreplace
 10360                              <1> 	replacewindow:
 10361 00008317 893D[207C0000]      <1> 		mov [lastpos], edi
 10362 0000831D 8935[247C0000]      <1> 		mov [lastpos + 4], esi
 10363 00008323 8B7702              <1> 		mov esi, [edi + 2]
 10364 00008326 8B3D[AD760000]      <1> 		mov edi, [windowbufloc]
 10365 0000832C 31D2                <1> 		xor edx, edx
 10366 0000832E 668B15[0E580000]    <1> 		mov dx, [resolutionx2]
 10367 00008335 C1E204              <1> 		shl edx, 4
 10368 00008338 29D7                <1> 		sub edi, edx
 10369 0000833A 31D2                <1> 		xor edx, edx
 10370 0000833C 668B16              <1> 		mov dx, [esi]
 10371 0000833F 660316              <1> 		add dx, [esi]
 10372 00008342 668B4E02            <1> 		mov cx, [esi + 2]
 10373 00008346 6681C11000          <1> 		add cx, 16
 10374 0000834B 66A1[F46D0000]      <1> 		mov ax, [background]
 10375 00008351 803D[80810000]01    <1> 		cmp byte [windrag], 1
 10376 00008358 7604                <1> 		jbe clearwindow
 10377 0000835A 662B4E02            <1> 		sub cx, [esi + 2]
 10378                              <1> 	clearwindow:
 10379                              <1> 		%ifdef gui.background
 10380                              <1> 			cmp dword [backgroundimage], 0
 10381                              <1> 			je .noback
 10382                              <1> 			push esi
 10383                              <1> 			mov esi, [backgroundimage]
 10384                              <1> 			sub edi, [physbaseptr]
 10385                              <1> 			add esi, edi
 10386                              <1> 			add edi, [physbaseptr]
 10387                              <1> 			mov ax, [esi]
 10388                              <1> 			pop esi
 10389                              <1> 		.noback:
 10390                              <1> 		%endif
 10391 0000835E 668907              <1> 		mov [edi], ax
 10392 00008361 81C702000000        <1> 		add edi, 2
 10393 00008367 81EA02000000        <1> 		sub edx, 2
 10394 0000836D 81FA00000000        <1> 		cmp edx, 0
 10395 00008373 75E9                <1> 		jne clearwindow
 10396 00008375 6649                <1> 		dec cx
 10397 00008377 668B15[0E580000]    <1> 		mov dx, [resolutionx2]
 10398 0000837E 662B16              <1> 		sub dx, [esi]
 10399 00008381 662B16              <1> 		sub dx, [esi]
 10400 00008384 01D7                <1> 		add edi, edx
 10401 00008386 668B16              <1> 		mov dx, [esi]
 10402 00008389 660316              <1> 		add dx, [esi]
 10403 0000838C 6681F90000          <1> 		cmp cx, 0
 10404 00008391 75CB                <1> 		jne clearwindow
 10405                              <1> 	endwindowclear:
 10406 00008393 C605[AC230000]00    <1> 		mov byte [termcopyon], 0
 10407 0000839A 8B3D[207C0000]      <1> 		mov edi, [lastpos]
 10408 000083A0 8B35[8B810000]      <1> 		mov esi, [grphbuf + 2]
 10409 000083A6 668B15[8F810000]    <1> 		mov dx, [grphbuf + 6]
 10410 000083AD 668B0D[91810000]    <1> 		mov cx, [grphbuf + 8]
 10411 000083B4 668B1D[89810000]    <1> 		mov bx, [grphbuf]
 10412 000083BB 66A1[93810000]      <1> 		mov ax, [grphbuf + 10]
 10413 000083C1 88DC                <1> 		mov ah, bl
 10414 000083C3 8B1D[95810000]      <1> 		mov ebx, [grphbuf + 12]
 10415                              <1> 	showgraphicsreplace:
 10416 000083C9 897702              <1> 		mov [edi + 2], esi
 10417 000083CC 66895706            <1> 		mov [edi + 6], dx
 10418 000083D0 66894F08            <1> 		mov [edi + 8], cx
 10419 000083D4 895F0C              <1> 		mov [edi + 12], ebx
 10420 000083D7 30FF                <1> 		xor bh, bh
 10421 000083D9 88E3                <1> 		mov bl, ah
 10422 000083DB 30E4                <1> 		xor ah, ah
 10423 000083DD 6689470A            <1> 		mov [edi + 10], ax
 10424 000083E1 66891F              <1> 		mov [edi], bx
 10425 000083E4 8B5F0C              <1> 		mov ebx, [edi + 12]
 10426 000083E7 668B470A            <1> 		mov ax, [edi + 10]
 10427 000083EB C3                  <1> 		ret
 10428                              <1> 	showgraphicsnew:
 10429 000083EC BF[7B0C0100]        <1> 		mov edi, graphicstable
 10430                              <1> 	shwgrph2:
 10431 000083F1 66813F0000          <1> 		cmp word [edi], 0
 10432 000083F6 74D1                <1> 		je showgraphicsreplace
 10433 000083F8 81C710000000        <1> 		add edi, 16
 10434 000083FE 81FF[7B0E0100]      <1> 		cmp edi, graphicstableend
 10435 00008404 72EB                <1> 		jb shwgrph2
 10436                              <1> 	showgraphicsdone:
 10437 00008406 C3                  <1> 		ret
 10438                              <1> 	
 10439                              <1> putpixel: ;color in si, point is (dx,cx)
 10440                              <1> 		;destroys edi, ebx, eax
 10441 00008407 6650                <1> 	push ax
 10442 00008409 6653                <1> 	push bx
 10443 0000840B 31C0                <1> 	xor eax, eax
 10444 0000840D 31DB                <1> 	xor ebx, ebx
 10445 0000840F 31FF                <1> 	xor edi, edi
 10446 00008411 668B1D[22570000]    <1> 	mov bx, [resolutiony]
 10447 00008418 66A1[20570000]      <1> 	mov ax, [resolutionx]
 10448 0000841E 6639C2              <1> 	cmp dx, ax
 10449 00008421 7720                <1> 	ja .doneput
 10450 00008423 66D1E0              <1> 	shl ax, 1
 10451 00008426 6639D9              <1> 	cmp cx, bx
 10452 00008429 7718                <1> 	ja .doneput
 10453 0000842B 6689CB              <1> 	mov bx, cx
 10454 0000842E 52                  <1> 	push edx
 10455 0000842F F7E3                <1> 	mul ebx
 10456 00008431 5A                  <1> 	pop edx
 10457 00008432 6601D7              <1> 	add di, dx
 10458 00008435 6601D7              <1> 	add di, dx
 10459 00008438 01C7                <1> 	add edi, eax
 10460 0000843A 033D[36570000]      <1> 	add edi, [physbaseptr]
 10461 00008440 668937              <1> 	mov [edi], si
 10462                              <1> .doneput:
 10463 00008443 665B                <1> 	pop bx
 10464 00008445 6658                <1> 	pop ax
 10465 00008447 C3                  <1> 	ret
 10466                              <1> 	
 10467                              <1> getpixelmem:	;pixel in (dx, cx), outputs memory location in edi
 10468 00008448 31FF                <1> 	xor edi, edi
 10469 0000844A 31C0                <1> 	xor eax, eax
 10470 0000844C 31DB                <1> 	xor ebx, ebx
 10471 0000844E 668B1D[0E580000]    <1> 	mov bx, [resolutionx2]
 10472 00008455 6689D7              <1> 	mov di, dx
 10473 00008458 6601D7              <1> 	add di, dx
 10474 0000845B 6689C8              <1> 	mov ax, cx
 10475 0000845E F7E3                <1> 	mul ebx
 10476 00008460 01C7                <1> 	add edi, eax
 10477 00008462 033D[36570000]      <1> 	add edi, [physbaseptr]
 10478 00008468 C3                  <1> 	ret
 10479                              <1> 
 10480 00008469 00                  <1> 	mouseon db 0
 10481 0000846A 0000                <1> 	icon dw 0	;pointer to icon
 10482 0000846C 00000000            <1> 	codepointer dd 0 ;pointer to code
 10483 00008470 00                  <1> 	iconselected db 0
 10484                                  %endif
 10485                                  %ifdef network.included
 10486                                  	%include "source/network.asm"
 10487                              <1> network.init:
 10488                              <1> %ifdef rtl8139.included
 10489                              <1> 	%include "source/drivers/network/rtl8139.asm"
 10490                              <1> %endif
 10491                              <1> %ifdef rtl8169.included
 10492                              <1> 	%include "source/drivers/network/rtl8169.asm"
 10493                              <2> ;RTL8169 NIC DRIVER
 10494                              <2> rtl8169:
 10495 00008471 E805000000          <2> 	call .init
 10496 00008476 E995030000          <2> 	jmp .end
 10497                              <2> 
 10498                              <2> ;REGISTERS
 10499                              <2> .CMD equ 0x37
 10500                              <2> .TXPOLL equ 0x38
 10501                              <2> .TCR equ 0x40
 10502                              <2> .RCR equ 0x44
 10503                              <2> .IMR equ 0x3C
 10504                              <2> .ISR equ 0x3E
 10505                              <2> .LOCK equ 0x50
 10506                              <2> .CONFIG1 equ 0x52
 10507                              <2> .TDSAR equ 0x20
 10508                              <2> .RDSAR equ 0xE4
 10509                              <2> .MAXRX equ 0xDA
 10510                              <2> .MAXTX equ 0xEC
 10511                              <2> ;IMPORTANT VALUES
 10512                              <2> .OWN equ 0x80000000
 10513                              <2> .EOR equ 0x40000000
 10514                              <2> .POLLING equ 0x40
 10515                              <2> ;CODE
 10516                              <2> .init:	;should find card, get mac, and initialize card
 10517 0000847B 31C0                <2> 	xor eax, eax
 10518 0000847D A2[17620000]        <2> 	mov [pcifunction], al
 10519 00008482 A2[15620000]        <2> 	mov [pcibus], al
 10520 00008487 A2[16620000]        <2> 	mov [pcidevice], al
 10521 0000848C B002                <2> 	mov al, 0x02 ;type code
 10522 0000848E A2[A6620000]        <2> 	mov [pcitype], al
 10523 00008493 B8EC106981          <2> 	mov eax, 0x816910EC
 10524 00008498 A3[1A620000]        <2> 	mov [pcidevid], eax
 10525 0000849D BBFFFFF0FF          <2> 	mov ebx, 0xFFF0FFFF
 10526 000084A2 891D[1E620000]      <2> 	mov [pcidevidmask], ebx
 10527 000084A8 E881DDFFFF          <2> 	call getpciport
 10528 000084AD 81FBFFFFFFFF        <2> 	cmp ebx, 0xFFFFFFFF
 10529 000084B3 7501                <2> 	jne .initnic
 10530 000084B5 C3                  <2> 	ret
 10531                              <2> .initnic:
 10532 000084B6 8915[51860000]      <2> 	mov [.basenicaddr], edx
 10533 000084BC 89D1                <2> 	mov ecx, edx
 10534 000084BE E8D1ACFFFF          <2> 	call showhex	;for debugging, please remove
 10535 000084C3 BE[1CCA0200]        <2> 	mov esi, rbuffstart
 10536 000084C8 B900200000          <2> 	mov ecx, 8192
 10537 000084CD 31C0                <2> 	xor eax, eax
 10538                              <2> .clearrbuff:		;clear receive buffer which starts at rbuffstart
 10539 000084CF 8806                <2> 	mov [esi], al
 10540 000084D1 46                  <2> 	inc esi
 10541 000084D2 6649                <2> 	dec cx
 10542 000084D4 6681F90000          <2> 	cmp cx, 0
 10543 000084D9 75F4                <2> 	jne .clearrbuff
 10544                              <2> .findmac:
 10545 000084DB 8B15[51860000]      <2> 	mov edx, [.basenicaddr]
 10546 000084E1 BF[56860000]        <2> 	mov edi, .mac
 10547 000084E6 B906000000          <2> 	mov ecx, 6
 10548                              <2> .macputloop:
 10549 000084EB EC                  <2> 	in al, dx
 10550 000084EC 8807                <2> 	mov [edi], al
 10551 000084EE 47                  <2> 	inc edi
 10552 000084EF 42                  <2> 	inc edx
 10553 000084F0 49                  <2> 	dec ecx
 10554 000084F1 75F8                <2> 	jnz .macputloop
 10555 000084F3 B9[56860000]        <2> 	mov ecx, .mac
 10556 000084F8 E8C8030000          <2> 	call showmac
 10557 000084FD E817000000          <2> 	call .resetnic
 10558 00008502 BE[5C860000]        <2> 	mov esi, .name
 10559 00008507 E81F98FFFF          <2> 	call print
 10560 0000850C BE[65860000]        <2> 	mov esi, .initmsg
 10561 00008511 E81598FFFF          <2> 	call print
 10562 00008516 31DB                <2> 	xor ebx, ebx
 10563 00008518 C3                  <2> 	ret
 10564                              <2> .resetnic:
 10565 00008519 8B15[51860000]      <2> 	mov edx, [.basenicaddr]
 10566 0000851F 81C237000000        <2> 	add edx, .CMD
 10567 00008525 B010                <2> 	mov al, 0x10
 10568 00008527 EE                  <2> 	out dx, al	;Reset
 10569                              <2> .resetnicwait:
 10570 00008528 EC                  <2> 	in al, dx
 10571 00008529 A810                <2> 	test al, 0x10
 10572 0000852B 0F85F7FFFFFF        <2> 	jnz near .resetnicwait
 10573 00008531 8B15[51860000]      <2> 	mov edx, [.basenicaddr]
 10574 00008537 81C250000000        <2> 	add edx, .LOCK
 10575 0000853D B0C0                <2> 	mov al, 0xC0
 10576 0000853F EE                  <2> 	out dx, al	;unlock config registers
 10577 00008540 8B15[51860000]      <2> 	mov edx, [.basenicaddr]
 10578 00008546 81C244000000        <2> 	add edx, .RCR
 10579 0000854C B80FE70000          <2> 	mov eax, 0x0000E70F
 10580 00008551 EF                  <2> 	out dx, eax	;recieve packets from all matches
 10581 00008552 8B15[51860000]      <2> 	mov edx, [.basenicaddr]
 10582 00008558 81C240000000        <2> 	add edx, .TCR
 10583 0000855E B800070003          <2> 	mov eax, 0x03000700
 10584 00008563 EF                  <2> 	out dx, eax	;set up tcr
 10585 00008564 8B15[51860000]      <2> 	mov edx, [.basenicaddr]
 10586 0000856A 81C2DA000000        <2> 	add edx, .MAXRX
 10587 00008570 66B8FF1F            <2> 	mov ax, 0x1FFF
 10588 00008574 66EF                <2> 	out dx, ax	;setup max rx size
 10589 00008576 8B15[51860000]      <2> 	mov edx, [.basenicaddr]
 10590 0000857C 81C2EC000000        <2> 	add edx, .MAXTX
 10591 00008582 B03B                <2> 	mov al, 0x3B
 10592 00008584 EE                  <2> 	out dx, al	;setup max tx size
 10593 00008585 8B15[51860000]      <2> 	mov edx, [.basenicaddr]
 10594 0000858B 81C220000000        <2> 	add edx, .TDSAR
 10595 00008591 A1[41020000]        <2> 	mov eax, [basecache]
 10596 00008596 C1E004              <2> 	shl eax, 4
 10597 00008599 05[00870000]        <2> 	add eax, .txdesc
 10598 0000859E EF                  <2> 	out dx, eax
 10599 0000859F 8B15[51860000]      <2> 	mov edx, [.basenicaddr]
 10600 000085A5 81C2E4000000        <2> 	add edx, .RDSAR
 10601 000085AB A1[41020000]        <2> 	mov eax, [basecache]
 10602 000085B0 C1E004              <2> 	shl eax, 4
 10603 000085B3 05[00880000]        <2> 	add eax, .rxdesc
 10604 000085B8 EF                  <2> 	out dx, eax
 10605 000085B9 8B15[51860000]      <2> 	mov edx, [.basenicaddr]
 10606 000085BF 81C237000000        <2> 	add edx, .CMD
 10607 000085C5 B00C                <2> 	mov al, 0x0C
 10608 000085C7 EE                  <2> 	out dx, al	;use transmit and receive
 10609 000085C8 8B15[51860000]      <2> 	mov edx, [.basenicaddr]
 10610 000085CE 81C250000000        <2> 	add edx, .LOCK
 10611 000085D4 30C0                <2> 	xor al, al
 10612 000085D6 EE                  <2> 	out dx, al
 10613 000085D7 C605[55860000]01    <2> 	mov byte [.nicconfig], 1
 10614 000085DE C3                  <2> 	ret
 10615                              <2> 	
 10616                              <2> .sendpacket:	;packet with beginning in edi and end in esi
 10617 000085DF 803D[55860000]01    <2> 	cmp byte [.nicconfig], 1
 10618 000085E6 7412                <2> 	je .sendcachedata
 10619 000085E8 56                  <2> 	push esi
 10620 000085E9 57                  <2> 	push edi
 10621 000085EA E88CFEFFFF          <2> 	call .init
 10622 000085EF 5F                  <2> 	pop edi
 10623 000085F0 5E                  <2> 	pop esi
 10624 000085F1 81FBFFFFFFFF        <2> 	cmp ebx, 0xFFFFFFFF
 10625 000085F7 75E6                <2> 	jne .sendpacket
 10626 000085F9 C3                  <2> 	ret
 10627                              <2> .sendcachedata:
 10628 000085FA 8B0D[56860000]      <2> 	mov ecx, [.mac]
 10629 00008600 894F06              <2> 	mov [edi + 6], ecx
 10630 00008603 668B0D[5A860000]    <2> 	mov cx, [.mac + 4]
 10631 0000860A 66894F0A            <2> 	mov [edi + 10], cx	;copy the correct mac
 10632 0000860E A1[41020000]        <2> 	mov eax, [basecache]
 10633 00008613 C1E004              <2> 	shl eax, 4
 10634 00008616 01F8                <2> 	add eax, edi
 10635 00008618 A3[08870000]        <2> 	mov [.txdesc + 8], eax	;put packet start in tx descriptor
 10636 0000861D 29FE                <2> 	sub esi, edi
 10637 0000861F 668935[00870000]    <2> 	mov [.txdesc], si	;put packet size in tx descriptor
 10638 00008626 810D[00870000]0000- <2> 	or dword [.txdesc], .OWN	;set own bit
 10639 0000862E 0080                <2>
 10640 00008630 8B15[51860000]      <2> 	mov edx, [.basenicaddr]
 10641 00008636 81C238000000        <2> 	add edx, .TXPOLL
 10642 0000863C B040                <2> 	mov al, .POLLING
 10643 0000863E EE                  <2> 	out dx, al	;set up TX Polling
 10644                              <2> .sendloop:
 10645 0000863F A1[00870000]        <2> 	mov eax, [.txdesc]
 10646 00008644 2500000080          <2> 	and eax, .OWN
 10647 00008649 3D00000080          <2> 	cmp eax, .OWN
 10648 0000864E 74EF                <2> 	je .sendloop
 10649 00008650 C3                  <2> 	ret
 10650                              <2> 	
 10651 00008651 00000000            <2> .basenicaddr dd 0
 10652 00008655 00                  <2> .nicconfig db 0
 10653 00008656 000000000000        <2> .mac db 0,0,0,0,0,0
 10654 0000865C 52544C383136392000  <2> .name db "RTL8169 ",0
 10655 00008665 496E697469616C697A- <2> .initmsg db "Initialized",10,0
 10656 0000866E 65640A00            <2>
 10657 00008672 90<rept>            <2> align 256, nop
 10658                              <2> .txdesc:
 10659 00008700 00000040            <2> 	dd .EOR	;command
 10660 00008704 00000000            <2> 	dd 0	;vlan
 10661 00008708 00000000            <2> 	dd 0	;low buf
 10662 0000870C 00000000            <2> 	dd 0	;high buf
 10663 00008710 90<rept>            <2> align 256, nop
 10664                              <2> .rxdesc:
 10665 00008800 142000C0            <2> 	dd .OWN | .EOR | (rbuffend - rbuffstart)	;command
 10666 00008804 00000000            <2> 	dd 0	;vlan
 10667 00008808 [1CCA0200]          <2> 	dd rbuffstart	;low buf
 10668 0000880C 00000000            <2> 	dd 0	;high buf
 10669                              <2> .end:
 10670                              <1> %endif
 10671                              <1> %ifdef ne2000.included
 10672                              <1> 	%include "source/drivers/network/ne2000.asm"
 10673                              <1> %endif
 10674                              <1> %ifdef i8254x.included
 10675                              <1> 	%include "source/drivers/network/i8254x.asm"
 10676                              <1> %endif
 10677 00008810 C3                  <1> 	ret
 10678                              <1> 
 10679                              <1> sendpacket: ;packet start in edi, end in esi
 10680                              <1> 	%ifdef rtl8139.included
 10681                              <1> 		push edi
 10682                              <1> 		push esi
 10683                              <1> 		call rtl8139.sendpacket
 10684                              <1> 		pop esi
 10685                              <1> 		pop edi
 10686                              <1> 	%endif
 10687                              <1> 	%ifdef rtl8169.included
 10688 00008811 57                  <1> 		push edi
 10689 00008812 56                  <1> 		push esi
 10690 00008813 E8C7FDFFFF          <1> 		call rtl8169.sendpacket
 10691 00008818 5E                  <1> 		pop esi
 10692 00008819 5F                  <1> 		pop edi
 10693                              <1> 	%endif
 10694                              <1> 	%ifdef ne2000.included
 10695                              <1> 		push edi
 10696                              <1> 		push esi
 10697                              <1> 		call ne2000.sendpacket
 10698                              <1> 		pop esi
 10699                              <1> 		pop edi
 10700                              <1> 	%endif
 10701                              <1> 	%ifdef i8254x.included
 10702                              <1> 		call i8254x.sendpacket
 10703                              <1> 	%endif
 10704 0000881A C3                  <1> 	ret
 10705                              <1> 
 10706                              <1> getchecksum: ;start in edi, end in esi, checksum put in ecx
 10707 0000881B 31C0                <1> 	xor eax, eax
 10708 0000881D 31DB                <1> 	xor ebx, ebx
 10709 0000881F 31C9                <1> 	xor ecx, ecx
 10710                              <1> .lp:
 10711 00008821 8A07                <1> 	mov al, [edi]
 10712 00008823 8A6701              <1> 	mov ah, [edi + 1]
 10713 00008826 01C3                <1> 	add ebx, eax
 10714 00008828 81C702000000        <1> 	add edi, 2
 10715 0000882E 39F7                <1> 	cmp edi, esi
 10716 00008830 72EF                <1> 	jb .lp
 10717 00008832 66B9FFFF            <1> 	mov cx, 0xFFFF
 10718 00008836 6689D8              <1> 	mov ax, bx
 10719 00008839 C1EB10              <1> 	shr ebx, 16
 10720 0000883C 6601D8              <1> 	add ax, bx
 10721 0000883F 6629C1              <1> 	sub cx, ax
 10722 00008842 C3                  <1> 	ret
 10723                              <1> 	
 10724                              <1> strtoip:	;string in esi with format X.X.X.X converted to number in ecx
 10725 00008843 31DB                <1> 	xor ebx, ebx
 10726 00008845 31C9                <1> 	xor ecx, ecx
 10727 00008847 31D2                <1> 	xor edx, edx
 10728                              <1> .mlp:
 10729 00008849 89F7                <1> 	mov edi, esi
 10730 0000884B 4F                  <1> 	dec edi
 10731                              <1> .lp:
 10732 0000884C 47                  <1> 	inc edi
 10733 0000884D 8A07                <1> 	mov al, [edi]
 10734 0000884F 3C20                <1> 	cmp al, " "
 10735 00008851 7408                <1> 	je .dnlp
 10736 00008853 3C00                <1> 	cmp al, 0
 10737 00008855 7404                <1> 	je .dnlp
 10738 00008857 3C2E                <1> 	cmp al, "."
 10739 00008859 75F1                <1> 	jne .lp
 10740                              <1> .dnlp:
 10741 0000885B 30C0                <1> 	xor al, al
 10742 0000885D 8807                <1> 	mov [edi], al
 10743 0000885F 53                  <1> 	push ebx
 10744 00008860 56                  <1> 	push esi
 10745 00008861 57                  <1> 	push edi
 10746 00008862 31FF                <1> 	xor edi, edi
 10747 00008864 E8D7AAFFFF          <1> 	call cnvrttxt
 10748 00008869 5E                  <1> 	pop esi
 10749 0000886A 5F                  <1> 	pop edi ;i intentionally switch them
 10750 0000886B 5B                  <1> 	pop ebx
 10751 0000886C 46                  <1> 	inc esi
 10752 0000886D BF[85880000]        <1> 	mov edi, ipstr
 10753 00008872 880C1F              <1> 	mov [edi + ebx], cl
 10754 00008875 43                  <1> 	inc ebx
 10755 00008876 81FB04000000        <1> 	cmp ebx, 4
 10756 0000887C 72CB                <1> 	jb .mlp
 10757 0000887E 8B0D[85880000]      <1> 	mov ecx, [ipstr]
 10758 00008884 C3                  <1> 	ret
 10759 00008885 00000000            <1> ipstr dd 0
 10760                              <1> showip: 	;put the ip address in ecx
 10761 00008889 89C8                <1> 	mov eax, ecx
 10762 0000888B 30DB                <1> 	xor bl, bl
 10763                              <1> .lp:
 10764 0000888D 3C00                <1> 	cmp al, 0
 10765 0000888F 750B                <1> 	jne .nozeroprint
 10766 00008891 B030                <1> 	mov al, "0"
 10767 00008893 50                  <1> 	push eax
 10768 00008894 E8149BFFFF          <1> 	call prcharq
 10769 00008899 58                  <1> 	pop eax
 10770 0000889A 30C0                <1> 	xor al, al
 10771                              <1> .nozeroprint:
 10772 0000889C 31C9                <1> 	xor ecx, ecx
 10773 0000889E 88C1                <1> 	mov cl, al
 10774 000088A0 E8B9A9FFFF          <1> 	call showdec
 10775 000088A5 C1E808              <1> 	shr eax, 8
 10776 000088A8 FEC3                <1> 	inc bl
 10777 000088AA 80FB04              <1> 	cmp bl, 4
 10778 000088AD 7312                <1> 	jae .done
 10779 000088AF 50                  <1> 	push eax
 10780 000088B0 6653                <1> 	push bx
 10781 000088B2 BE[C2880000]        <1> 	mov esi, .dot
 10782 000088B7 E86F94FFFF          <1> 	call print
 10783 000088BC 665B                <1> 	pop bx
 10784 000088BE 58                  <1> 	pop eax
 10785 000088BF EBCC                <1> 	jmp .lp
 10786                              <1> .done:
 10787 000088C1 C3                  <1> 	ret
 10788 000088C2 082E00              <1> .dot db 8,".",0
 10789                              <1> showmac:	;mac begins in [ecx]
 10790 000088C5 BE[15890000]        <1> 	mov esi, macprint
 10791 000088CA 89CF                <1> 	mov edi, ecx
 10792 000088CC 81C106000000        <1> 	add ecx, 6
 10793                              <1> showmacloop:
 10794 000088D2 8A07                <1> 	mov al, [edi]
 10795 000088D4 8A27                <1> 	mov ah, [edi]
 10796 000088D6 C0E804              <1> 	shr al, 4
 10797 000088D9 C0E404              <1> 	shl ah, 4
 10798 000088DC C0EC04              <1> 	shr ah, 4
 10799 000088DF 0430                <1> 	add al, 48
 10800 000088E1 3C39                <1> 	cmp al, "9"
 10801 000088E3 7606                <1> 	jbe .goodal
 10802 000088E5 2C30                <1> 	sub al, 48
 10803 000088E7 2C0A                <1> 	sub al, 0xA
 10804 000088E9 0441                <1> 	add al, "A"
 10805                              <1> .goodal:
 10806 000088EB 80C430              <1> 	add ah, 48
 10807 000088EE 80FC39              <1> 	cmp ah, "9"
 10808 000088F1 7609                <1> 	jbe .goodah
 10809 000088F3 80EC30              <1> 	sub ah, 48
 10810 000088F6 80EC0A              <1> 	sub ah, 0xA
 10811 000088F9 80C441              <1> 	add ah, "A"
 10812                              <1> .goodah:
 10813 000088FC 668906              <1> 	mov [esi], ax
 10814 000088FF 81C603000000        <1> 	add esi, 3
 10815 00008905 47                  <1> 	inc edi
 10816 00008906 39CF                <1> 	cmp edi, ecx
 10817 00008908 72C8                <1> 	jb showmacloop
 10818 0000890A BE[15890000]        <1> 	mov esi, macprint
 10819 0000890F E81794FFFF          <1> 	call print
 10820 00008914 C3                  <1> 	ret
 10821                              <1> 	
 10822 00008915 30303A30303A30303A- <1> macprint db "00:00:00:00:00:00 ",0
 10823 0000891E 30303A30303A303020- <1>
 10824 00008927 00                  <1>
 10825 00008928 00000000            <1> ethernetend dw 0,0
 10826 0000892C C0A80002            <1> sysip db 192,168,0,2
 10827 00008930 000000000000        <1> sysmac	db 0,0,0,0,0,0		;my mac address
 10828                                  %endif
 10829                                      %include "source/data.asm"
 10830 00008936 626F6F742E736800    <1> 	bootfilename db "boot.sh",0
 10831 0000893E 73687573683A2000    <1> 	notfound1 db "shush: ",0
 10832 00008946 3A206E6F7420666F75- <1> 	notfound2 db  ": not found",10,0
 10833 0000894F 6E640A00            <1>
 10834 00008953 757365726E616D653A- <1> 	userask db "username:",0
 10835 0000895C 00                  <1>
 10836 0000895D 70617373776F72643A- <1> 	pwdask	db	"password:",0
 10837 00008966 00                  <1>
 10838 00008967 40                  <1> 	computer db "@"
 10839                              <1> %ifdef io.serial
 10840                              <1> 	computername	db	"SollerOS.",io.serial," ",0
 10841                              <1> %else
 10842 00008968 536F6C6C65724F5320- <1> 	computername	db	"SollerOS ",0
 10843 00008971 00                  <1>
 10844                              <1> %endif
 10845 00008972 5D242000            <1> 	endprompt db "]$ ",0
 10846 00008976 0D                  <1> 	crlf 	db  13
 10847 00008977 0A00                <1> 	line	db	10,0
 10848                              <1> 	userlst:
 10849 00008979 726F6F7400          <1> 			db "root",0
 10850 0000897E 617765736F6D65706F- <1> 			db "awesomepower",0
 10851 00008987 77657200            <1>
 10852 0000898B 7573657200          <1> 			db "user",0
 10853 00008990 70617373776F726400  <1> 			db "password",0
 10854 00008999 6E00                <1> 			db "n",0	;;abuse for quick entry-a quick double n followed by a double enter will get you in
 10855 0000899B 00                  <1> 			db 0
 10856                              <1> 	userlstend:
 10857                              <1> 	
 10858                              <1> %ifdef io.serial
 10859                              <1> %else
 10860 0000899B <incbin>            <1> fonts:	incbin "source/fonts/fonts.pak"
 10861                              <1> fontend:
 10862                              <1> %endif
 10863                              <1> osend:	;this is the end of the operating system's space on disk
 10864                                  %ifdef disk.none
 10865                                  	diskfileindex:
 10866                                  	enddiskfileindex:
 10867                                  	align 512, db 0
 10868                                      %include "source/bss.asm"
 10869                                  %else
 10870                                      %include "build/fileindex.asm"
 10871                              <1> diskfileindex:
 10872 0000D99C 617267746573742E65- <1> db "argtest.elf",0
 10873 0000D9A5 6C6600              <1>
 10874 0000D9A8 6E000000            <1> dd (f0-$$)/512
 10875 0000D9AC 06010000            <1> dd (f1-f0)/512
 10876 0000D9B0 6261636B67726F756E- <1> db "background.bmp",0
 10877 0000D9B9 642E626D7000        <1>
 10878 0000D9BF 74010000            <1> dd (f1-$$)/512
 10879 0000D9C3 01140000            <1> dd (f2-f1)/512
 10880 0000D9C7 626F6F742E736800    <1> db "boot.sh",0
 10881 0000D9CF 75150000            <1> dd (f2-$$)/512
 10882 0000D9D3 01000000            <1> dd (f3-f2)/512
 10883 0000D9D7 63686172746573742E- <1> db "chartest.elf",0
 10884 0000D9E0 656C6600            <1>
 10885 0000D9E4 76150000            <1> dd (f3-$$)/512
 10886 0000D9E8 26010000            <1> dd (f4-f3)/512
 10887 0000D9EC 646F73746573742E63- <1> db "dostest.com",0
 10888 0000D9F5 6F6D00              <1>
 10889 0000D9F8 9C160000            <1> dd (f4-$$)/512
 10890 0000D9FC 01000000            <1> dd (f5-f4)/512
 10891 0000DA00 6578656300          <1> db "exec",0
 10892 0000DA05 9D160000            <1> dd (f5-$$)/512
 10893 0000DA09 01000000            <1> dd (f6-f5)/512
 10894 0000DA0D 66696E616C636F756E- <1> db "finalcount.sn",0
 10895 0000DA16 742E736E00          <1>
 10896 0000DA1B 9E160000            <1> dd (f6-$$)/512
 10897 0000DA1F 01000000            <1> dd (f7-f6)/512
 10898 0000DA23 666F726B00          <1> db "fork",0
 10899 0000DA28 9F160000            <1> dd (f7-$$)/512
 10900 0000DA2C 01000000            <1> dd (f8-f7)/512
 10901 0000DA30 677261766974792E65- <1> db "gravity.elf",0
 10902 0000DA39 6C6600              <1>
 10903 0000DA3C A0160000            <1> dd (f8-$$)/512
 10904 0000DA40 E0000000            <1> dd (f9-f8)/512
 10905 0000DA44 6775697465737400    <1> db "guitest",0
 10906 0000DA4C 80170000            <1> dd (f9-$$)/512
 10907 0000DA50 03000000            <1> dd (f10-f9)/512
 10908 0000DA54 68656C6C6F776F726C- <1> db "helloworld.elf",0
 10909 0000DA5D 642E656C6600        <1>
 10910 0000DA63 83170000            <1> dd (f10-$$)/512
 10911 0000DA67 D6010000            <1> dd (f11-f10)/512
 10912 0000DA6B 696E7400            <1> db "int",0
 10913 0000DA6F 59190000            <1> dd (f11-$$)/512
 10914 0000DA73 01000000            <1> dd (f12-f11)/512
 10915 0000DA77 6C6F7374776F6F6473- <1> db "lostwoods.sn",0
 10916 0000DA80 2E736E00            <1>
 10917 0000DA84 5A190000            <1> dd (f12-$$)/512
 10918 0000DA88 01000000            <1> dd (f13-f12)/512
 10919 0000DA8C 6D6172696F2E736E00  <1> db "mario.sn",0
 10920 0000DA95 5B190000            <1> dd (f13-$$)/512
 10921 0000DA99 01000000            <1> dd (f14-f13)/512
 10922 0000DA9D 6D6F6D656E742E7761- <1> db "moment.wav",0
 10923 0000DAA6 7600                <1>
 10924 0000DAA8 5C190000            <1> dd (f14-$$)/512
 10925 0000DAAC 34040000            <1> dd (f15-f14)/512
 10926 0000DAB0 70692E656C6600      <1> db "pi.elf",0
 10927 0000DAB7 901D0000            <1> dd (f15-$$)/512
 10928 0000DABB 1F010000            <1> dd (f16-f15)/512
 10929 0000DABF 736F6C6C65726F732E- <1> db "solleros.bmp",0
 10930 0000DAC8 626D7000            <1>
 10931 0000DACC AF1E0000            <1> dd (f16-$$)/512
 10932 0000DAD0 B0020000            <1> dd (f17-f16)/512
 10933 0000DAD4 736F6C6C65726F732E- <1> db "solleros.txt",0
 10934 0000DADD 74787400            <1>
 10935 0000DAE1 5F210000            <1> dd (f17-$$)/512
 10936 0000DAE5 01000000            <1> dd (f18-f17)/512
 10937 0000DAE9 736F6E676F74696D65- <1> db "songotime.sn",0
 10938 0000DAF2 2E736E00            <1>
 10939 0000DAF6 60210000            <1> dd (f18-$$)/512
 10940 0000DAFA 01000000            <1> dd (f19-f18)/512
 10941 0000DAFE 73736500            <1> db "sse",0
 10942 0000DB02 61210000            <1> dd (f19-$$)/512
 10943 0000DB06 02000000            <1> dd (f20-f19)/512
 10944 0000DB0A 737464696F74657374- <1> db "stdiotest.elf",0
 10945 0000DB13 2E656C6600          <1>
 10946 0000DB18 63210000            <1> dd (f20-$$)/512
 10947 0000DB1C 27010000            <1> dd (f21-f20)/512
 10948 0000DB20 74656C7900          <1> db "tely",0
 10949 0000DB25 8A220000            <1> dd (f21-$$)/512
 10950 0000DB29 01000000            <1> dd (f22-f21)/512
 10951 0000DB2D 74696D65746573742E- <1> db "timetest.elf",0
 10952 0000DB36 656C6600            <1>
 10953 0000DB3A 8B220000            <1> dd (f22-$$)/512
 10954 0000DB3E 04010000            <1> dd (f23-f22)/512
 10955 0000DB42 7475746F7269616C2E- <1> db "tutorial.sh",0
 10956 0000DB4B 736800              <1>
 10957 0000DB4E 8F230000            <1> dd (f23-$$)/512
 10958 0000DB52 03000000            <1> dd (f24-f23)/512
 10959 0000DB56 756E667300          <1> db "unfs",0
 10960 0000DB5B 92230000            <1> dd (f24-$$)/512
 10961 0000DB5F 02000000            <1> dd (f25-f24)/512
 10962 0000DB63 7574662D382E747874- <1> db "utf-8.txt",0
 10963 0000DB6C 00                  <1>
 10964 0000DB6D 94230000            <1> dd (f25-$$)/512
 10965 0000DB71 01000000            <1> dd (f26-f25)/512
 10966 0000DB75 766963746F72792E77- <1> db "victory.wav",0
 10967 0000DB7E 617600              <1>
 10968 0000DB81 95230000            <1> dd (f26-$$)/512
 10969 0000DB85 16000000            <1> dd (f27-f26)/512
 10970 0000DB89 5F696D672E62696E00  <1> db "_img.bin",0
 10971 0000DB92 AB230000            <1> dd (f27-$$)/512
 10972 0000DB96 D7020000            <1> dd (f28-f27)/512
 10973                              <1> enddiskfileindex:
 10974                              <1> 
 10975                                      %include "source/bss.asm"
 10976 0000DB9A 90<rept>            <1> align 4, nop
 10977                              <1> bssstart: equ $
 10978                              <1> guion equ bssstart
 10979                              <1> DriveNumber equ guion + 1
 10980                              <1> lbaad equ DriveNumber + 1
 10981                              <1> memlistbuf equ lbaad + 4
 10982                              <1> memlistend equ memlistbuf + 576
 10983                              <1> bsscopy equ memlistend
 10984                              <1> initialstack equ bsscopy
 10985                              <1> stackend equ initialstack + 4000
 10986                              <1> sigtable equ stackend + 96
 10987                              <1> fileindex: equ sigtable + 4
 10988                              <1> fileindexend: equ fileindex + 1024
 10989                              <1> previousstack equ fileindexend
 10990                              <1> lastfolderloc equ previousstack + 4
 10991                              <1> currentfolderloc equ lastfolderloc + 4
 10992                              <1> currentfolder equ currentfolderloc + 4
 10993                              <1> currentfolderend equ currentfolder + 512
 10994                              <1> uid equ currentfolderend
 10995                              <1> ranboot equ uid + 4
 10996                              <1> IFON equ ranboot + 1
 10997                              <1> IFTRUE equ IFON + 1
 10998                              <1> BATCHPOS equ IFTRUE + 100
 10999                              <1> BATCHISON equ BATCHPOS + 4
 11000                              <1> LOOPON equ BATCHISON + 1
 11001                              <1> LOOPPOS	equ LOOPON + 1
 11002                              <1> variables: equ LOOPPOS + 4
 11003                              <1> varend: equ variables + 4096
 11004                              <1> buftxt2: equ varend
 11005                              <1> buftxt: equ buftxt2 + 1024
 11006                              <1> buftxtend: equ buftxt + 1024
 11007                              <1> buf2: equ buftxtend
 11008                              <1> numbuf: equ buf2 + 20
 11009                              <1> %ifdef io.serial
 11010                              <1> 	lastcommandpos equ numbuf + 1
 11011                              <1> %else
 11012                              <1> 	%ifdef gui.included
 11013                              <1> 		graphicstable equ numbuf + 1 ;w type, dw datalocation, w locationx, w locationy, w selected, dw code
 11014                              <1> 		graphicstableend equ graphicstable + 200h
 11015                              <1> 		%ifdef gui.background
 11016                              <1> 			backgroundbuffer equ graphicstableend
 11017                              <1> 			backgroundbufferend equ backgroundbuffer + 1280*1026*2
 11018                              <1> 			mousecolorbuf equ backgroundbufferend
 11019                              <1> 		%else
 11020                              <1> 			mousecolorbuf equ graphicstableend ;where the gui under the mouse is stored
 11021                              <1> 		%endif
 11022                              <1> 		mcolorend equ mousecolorbuf + 256
 11023                              <1> 		videobuf equ mcolorend + 1	;1680x1050 pixels in characters
 11024                              <1> 		videobufend	equ videobuf + 210*65*4;2
 11025                              <1> 		videobuf2 equ videobufend
 11026                              <1> 		videobuf2end equ videobuf2 + 210*65*4;2
 11027                              <1> 	%else
 11028                              <1> 		videobuf equ numbuf + 1
 11029                              <1> 		videobufend equ videobuf + 80*30*4
 11030                              <1> 		videobuf2 equ videobufend
 11031                              <1> 		videobuf2end equ videobuf2 + 80*30*4
 11032                              <1> 	%endif
 11033                              <1> 	lastcommandpos: equ videobuf2end
 11034                              <1> %endif
 11035                              <1> 	commandbufpos: equ lastcommandpos + 4
 11036                              <1> 	commandlistentries: equ commandbufpos + 4
 11037                              <1> 	commandsentered: equ commandlistentries + 4
 11038                              <1> 	commandbuf: equ commandsentered + 4
 11039                              <1> 	commandbufend: equ commandbuf + 4096 ;this is where kernel space only ends, the rest is for threading
 11040                              <1> %ifdef network.included
 11041                              <1> 	rbuffstart: equ commandbufend ;for use with networking
 11042                              <1> 	rbuffend equ rbuffstart + 8212
 11043                              <1> %else
 11044                              <1> 	rbuffstart equ commandbufend
 11045                              <1> 	rbuffend equ commandbufend
 11046                              <1> %endif
 11047                              <1> %ifdef threads.included
 11048                              <1> 	threadlist: equ rbuffend ;this buffer will hold the stack locations of all of the threads, up to 2048
 11049                              <1> 	threadlistend: equ threadlist + 1024*4
 11050                              <1> 	stacks:	equ threadlistend ;i use SS now for proper stack management. This makes sure stacks never screw with other memory
 11051                              <1> 	stack1: equ stacks + 1024  ;woah, thats a lot of space for stacks
 11052                              <1> 	bssend equ stack1 + 1024*1024
 11053                              <1> %else
 11054                              <1> 	bssend equ rbuffend
 11055                              <1> %endif
 11056                              <1> dosprogloc equ 0x400000 ;from here on, it is not kernel space so apps can be loaded here.
 11057                                      %include "build/files.asm"
 11058 0000DB9C 00<rept>            <1> align 512,db 0
 11059                              <1> f0:
 11060 0000DB9C <incbin>            <1> incbin "included/argtest.elf"
 11061 0002E6F2 00<rept>            <1> align 512,db 0
 11062                              <1> f1:
 11063 0002E6F2 <incbin>            <1> incbin "included/background.bmp"
 11064 002AE846 00<rept>            <1> align 512,db 0
 11065                              <1> f2:
 11066 002AE846 <incbin>            <1> incbin "included/boot.sh"
 11067 002AEAFD 00<rept>            <1> align 512,db 0
 11068                              <1> f3:
 11069 002AEAFD <incbin>            <1> incbin "included/chartest.elf"
 11070 002D36DB 00<rept>            <1> align 512,db 0
 11071                              <1> f4:
 11072 002D36DB <incbin>            <1> incbin "included/dostest.com"
 11073 002D3931 00<rept>            <1> align 512,db 0
 11074                              <1> f5:
 11075 002D3931 <incbin>            <1> incbin "included/exec"
 11076 002D3AE1 00<rept>            <1> align 512,db 0
 11077                              <1> f6:
 11078 002D3AE1 <incbin>            <1> incbin "included/finalcount.sn"
 11079 002D3D02 00<rept>            <1> align 512,db 0
 11080                              <1> f7:
 11081 002D3D02 <incbin>            <1> incbin "included/fork"
 11082 002D3F58 00<rept>            <1> align 512,db 0
 11083                              <1> f8:
 11084 002D3F58 <incbin>            <1> incbin "included/gravity.elf"
 11085 002EFED9 00<rept>            <1> align 512,db 0
 11086                              <1> f9:
 11087 002EFED9 <incbin>            <1> incbin "included/guitest"
 11088 002F042B 00<rept>            <1> align 512,db 0
 11089                              <1> f10:
 11090 002F042B <incbin>            <1> incbin "included/helloworld.elf"
 11091 0032B1E3 00<rept>            <1> align 512,db 0
 11092                              <1> f11:
 11093 0032B1E3 <incbin>            <1> incbin "included/int"
 11094 0032B3AF 00<rept>            <1> align 512,db 0
 11095                              <1> f12:
 11096 0032B3AF <incbin>            <1> incbin "included/lostwoods.sn"
 11097 0032B456 00<rept>            <1> align 512,db 0
 11098                              <1> f13:
 11099 0032B456 <incbin>            <1> incbin "included/mario.sn"
 11100 0032B63A 00<rept>            <1> align 512,db 0
 11101                              <1> f14:
 11102 0032B63A <incbin>            <1> incbin "included/moment.wav"
 11103 003B1E1A 00<rept>            <1> align 512,db 0
 11104                              <1> f15:
 11105 003B1E1A <incbin>            <1> incbin "included/pi.elf"
 11106 003D5D31 00<rept>            <1> align 512,db 0
 11107                              <1> f16:
 11108 003D5D31 <incbin>            <1> incbin "included/solleros.bmp"
 11109 0042BDE6 00<rept>            <1> align 512,db 0
 11110                              <1> f17:
 11111 0042BDE6 <incbin>            <1> incbin "included/solleros.txt"
 11112 0042BF74 00<rept>            <1> align 512,db 0
 11113                              <1> f18:
 11114 0042BF74 <incbin>            <1> incbin "included/songotime.sn"
 11115 0042C04A 00<rept>            <1> align 512,db 0
 11116                              <1> f19:
 11117 0042C04A <incbin>            <1> incbin "included/sse"
 11118 0042C4A8 00<rept>            <1> align 512,db 0
 11119                              <1> f20:
 11120 0042C4A8 <incbin>            <1> incbin "included/stdiotest.elf"
 11121 00451243 00<rept>            <1> align 512,db 0
 11122                              <1> f21:
 11123 00451243 <incbin>            <1> incbin "included/tely"
 11124 004515BA 00<rept>            <1> align 512,db 0
 11125                              <1> f22:
 11126 004515BA <incbin>            <1> incbin "included/timetest.elf"
 11127 00471C3D 00<rept>            <1> align 512,db 0
 11128                              <1> f23:
 11129 00471C3D <incbin>            <1> incbin "included/tutorial.sh"
 11130 00472352 00<rept>            <1> align 512,db 0
 11131                              <1> f24:
 11132 00472352 <incbin>            <1> incbin "included/unfs"
 11133                              <1> align 512,db 0
 11134                              <1> f25:
 11135 00472352 <incbin>            <1> incbin "included/utf-8.txt"
 11136 0047292F 00<rept>            <1> align 512,db 0
 11137                              <1> f26:
 11138 0047292F <incbin>            <1> incbin "included/victory.wav"
 11139 00475548 00<rept>            <1> align 512,db 0
 11140                              <1> f27:
 11141 00475548 <incbin>            <1> incbin "included/_img.bin"
 11142                              <1> align 512,db 0
 11143                              <1> f28:
 11144                                  %endif
