     1                                  [map symbols build/kernel.map]
     2                                  %include "config.asm"
     3                              <1> ;These flags are used to configure options as on, put a simicolon in front of it to not configure it
     4                              <1> 
     5                              <1> %define gui.included
     6                              <1> ;Turn on the gui
     7                              <1> 
     8                              <1> ;%define gui.alphablending
     9                              <1> ;Make the terminal in the GUI 25% transparent
    10                              <1> 
    11                              <1> ;%define gui.background
    12                              <1> ;Make the GUI have a loadable background
    13                              <1> 
    14                              <1> ;%define gui.time
    15                              <1> ;Show time in top right corner of screen
    16                              <1> 
    17                              <1> ;%define io.serial "1"
    18                              <1> ;Use the specified serial port for input and output instead of the keyboard and screen
    19                              <1> ;If the gui is included this should not be enabled
    20                              <1> 
    21                              <1> ;%define terminal.vsync
    22                              <1> ;Uses the RTC to automatically update the terminal at ~64Hz
    23                              <1> 	;WARNING:
    24                              <1> 	;This may cause problems on systems with non-standard RTC's
    25                              <1> 	;It is therefore recommended that you do not enable it even
    26                              <1> 	;though it gives a large speed improvement for character output
    27                              <1> 
    28                              <1> %define hardware.automatic
    29                              <1> ;Automatically load the sound and network drivers.
    30                              <1> 
    31                              <1> %define threads.included
    32                              <1> ;Include the thread testing stuff-this uses a relatively large amount of memory
    33                              <1> 
    34                              <1> %define exceptions.included
    35                              <1> ;Display debugging information should crashes occur-also uses quite a bit of memory
    36                              <1> 
    37                              <1> ;%define disk.protected
    38                              <1> ;Use protected mode instead of real mode for disk access-this allows for multitasking
    39                              <1> 
    40                              <1> %define disk.real
    41                              <1> ;Use real mode for disk access-this gives greater compatibility
    42                              <1> 
    43                              <1> %define sound.included
    44                              <1> ;This includes the sound drivers
    45                              <1> 
    46                              <1> %define network.included
    47                              <1> ;This includes the network stack
    48                              <1> %define rtl8169.included
    49                              <1> ;This includes the RTL8169 drivers
    50                              <1> 
    51                              <1> %define rtl8139.included
    52                              <1> ;This includes the RTL8139 drivers
    53                              <1> 
    54                              <1> %define ne2000.included
    55                              <1> ;This includes the ne2000 drivers
    56                              <1> 
    57                              <1> %define i8254x.included
    58                              <1> ;This includes the Intel 8254x drivers
    59                              <1> 
    60                              <1> ;%define sector.debug
    61                              <1> ;Dump the contents of the first sector of SollerOS
    62                              <1> 
    63                              <1> ;%define system.simple 
    64                              <1> ;The smallest possible system, overrides all options
    65                              <1> 
    66                              <1> ;FIX DEPENDANCIES
    67                              <1> %ifdef gui.included
    68                              <1> 	%undef io.serial
    69                              <1> %else
    70                              <1> 	%undef gui.alphablending
    71                              <1> 	%undef gui.background
    72                              <1> %endif
    73                              <1> %ifdef disk.protected
    74                              <1> 	%undef disk.real
    75                              <1> %endif
    76                              <1> %ifdef network.included
    77                              <1> %else
    78                              <1> 	%undef i8254x.included
    79                              <1> 	%undef ne2000.included
    80                              <1> 	%undef rtl8139.included
    81                              <1> 	%undef rtl8169.included
    82                              <1> %endif
    83                              <1> %ifdef system.simple
    84                              <1> 	%define io.serial "1"
    85                              <1> 	%define disk.real
    86                              <1> 	%undef gui.included
    87                              <1> 	%undef gui.alphablending
    88                              <1> 	%undef gui.background
    89                              <1> 	%undef terminal.vsync
    90                              <1> 	%undef hardware.automatic
    91                              <1> 	%undef threads.included
    92                              <1> 	%undef exceptions.included
    93                              <1> 	%undef disk.protected
    94                              <1> 	%undef sound.included
    95                              <1> 	%undef network.included
    96                              <1> 	%undef rtl8139.included
    97                              <1> 	%undef rtl8169.included
    98                              <1> 	%undef ne2000.included
    99                              <1> 	%undef i8254x.included
   100                              <1> 	%undef sector.debug
   101                              <1> %endif
   102                                  [BITS 16]
   103                                      %include "source/boot.asm"
   104                              <1>     ; MENU.ASM
   105                              <1> %include 'source/signature.asm'
   106                              <2> signature:
   107 00000000 536F6C6C65724F53    <2> db "SollerOS" ;Operating system name
   108 00000008 20416C706861204275- <2> db " Alpha Build ",0	;Soller OS development level
   109 00000011 696C642000          <2>
   110 00000016 E6000000            <2> dd 230	;version number
   111                              <2> signatureend:
   112                              <1> menustart:	
   113 0000001A 8CC8                <1> 	mov ax, cs
   114 0000001C 8ED8                <1> 	mov ds, ax
   115 0000001E 8EC0                <1> 	mov es, ax
   116 00000020 8ED0                <1> 	mov ss, ax
   117 00000022 880E[E59C]          <1> 	mov [DriveNumber], cl
   118 00000026 668916[E69C]        <1> 	mov [lbaad], edx
   119                              <1> %ifdef io.serial
   120                              <1> 	call getmemorysize
   121                              <1> 	mov si, serialmsg
   122                              <1> 	call printrm
   123                              <1> 	jmp pmode
   124                              <1> serialmsg: db "SollerOS: Using serial port ",io.serial," for I/O.",0
   125                              <1> %else
   126 0000002B E80300              <1> 	call vgaset	;make users switch using a command-this leads to very fast boots
   127 0000002E E95700              <1> 	jmp pmode
   128                              <1> %endif
   129                              <1> 	
   130                              <1> vgaset:
   131 00000031 B81200              <1> 	mov ax, 12h
   132 00000034 31DB                <1> 	xor bx, bx
   133 00000036 CD10                <1> 	int 10h
   134 00000038 C606[E49C]00        <1> 	mov byte [guion], 0
   135 0000003D E80100              <1> 	call getmemorysize;get the memory map after the video is initialized
   136 00000040 C3                  <1> 	ret
   137                              <1> 
   138                              <1> getmemorysize:
   139 00000041 BF[EA9C]            <1> 	mov di, memlistbuf
   140 00000044 6631DB              <1> 	xor ebx, ebx
   141                              <1> getmemsizeloop:
   142 00000047 66B820E80000        <1> 	mov eax, 0xE820
   143 0000004D 66BA50414D53        <1> 	mov edx, 0x0534D4150
   144 00000053 66B918000000        <1> 	mov ecx, 24
   145 00000059 CD15                <1> 	int 0x15
   146 0000005B 81C71800            <1> 	add di, 24
   147 0000005F 81FF[2A9F]          <1> 	cmp di, memlistend
   148 00000063 7309                <1> 	jae nomoregetmemsize
   149 00000065 6681FB00000000      <1> 	cmp ebx, 0
   150 0000006C 75D9                <1> 	jne getmemsizeloop
   151                              <1> nomoregetmemsize:
   152 0000006E 81EF[EA9C]          <1> 	sub di, memlistbuf
   153 00000072 893E[2A9F]          <1> 	mov [memlistend], di
   154 00000076 C3                  <1> 	ret
   155                              <1> 	
   156                              <1> printrm:			; 'si' comes in with string address
   157 00000077 BB0700              <1>     mov bx,07		; write to display
   158 0000007A B40E                <1>     mov ah,0Eh		; screen function
   159 0000007C 8A04                <1>    .lp:    mov al,[si]         ; get next character
   160 0000007E 3C00                <1>     cmp al,0		; look for terminator 
   161 00000080 7405                <1>     je .done		; zero byte at end of string
   162 00000082 CD10                <1>     int 10h		; write character to screen.    
   163 00000084 46                  <1> 	inc si	     	; move to next character
   164 00000085 EBF5                <1>     jmp .lp		; loop
   165 00000087 C3                  <1> .done: ret
   166                                      %include "source/pmode.asm"
   167                              <1> [BITS 16]
   168                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   169                              <1> ;	16-bit real mode
   170                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   171                              <1> 
   172                              <1> pmode:
   173 00000088 6631C0              <1> 	xor eax, eax
   174 0000008B 6631DB              <1> 	xor ebx, ebx
   175 0000008E 6631C9              <1> 	xor ecx, ecx
   176 00000091 6631D2              <1> 	xor edx, edx
   177 00000094 6631F6              <1> 	xor esi, esi
   178 00000097 6631FF              <1> 	xor edi, edi
   179 0000009A BA9200              <1> 	mov dx, 0x92
   180 0000009D EC                  <1> 	in al, dx	;;A20
   181 0000009E 0C02                <1> 	or al, 2
   182 000000A0 EE                  <1> 	out dx, al
   183 000000A1 8CCB                <1> 	mov bx,cs		; EBX=segment
   184 000000A3 66C1E304            <1> 	shl ebx,4		;	<< 4
   185 000000A7 67668D03            <1> 	lea eax,[ebx]		; EAX=linear address of segment base
   186 000000AB A3[9503]            <1> 	mov [gdt2 + 2],ax
   187 000000AE A3[9D03]            <1> 	mov [gdt3 + 2],ax
   188 000000B1 66C1E810            <1> 	shr eax,16
   189 000000B5 A2[9703]            <1> 	mov [gdt2 + 4],al
   190 000000B8 A2[9F03]            <1> 	mov [gdt3 + 4],al
   191 000000BB 8826[9A03]          <1> 	mov [gdt2 + 7],ah
   192 000000BF 8826[A203]          <1> 	mov [gdt3 + 7],ah
   193                              <1> 
   194 000000C3 66B8[2A9F0000]      <1> 	mov eax, initialstack
   195 000000C9 660306[4202]        <1> 	add eax, [newcodecache]
   196 000000CE A3[8D03]            <1> 	mov [gdts + 2],ax
   197 000000D1 66C1E810            <1> 	shr eax, 16
   198 000000D5 A2[8F03]            <1> 	mov [gdts + 4],al
   199 000000D8 8826[9203]          <1> 	mov [gdts + 7], ah
   200                              <1> 	
   201 000000DC 66A1[4202]          <1> 	mov eax, [newcodecache]
   202 000000E0 A3[A503]            <1> 	mov [gdt4 + 2],ax
   203 000000E3 A3[AD03]            <1> 	mov [gdt5 + 2],ax
   204 000000E6 A3[B503]            <1> 	mov [gdtv8086 + 2], ax
   205 000000E9 A3[BD03]            <1> 	mov [gdtv80862 + 2], ax
   206 000000EC 66C1E810            <1> 	shr eax,16
   207 000000F0 A2[A703]            <1> 	mov [gdt4 + 4],al
   208 000000F3 A2[AF03]            <1> 	mov [gdt5 + 4],al
   209 000000F6 A2[B703]            <1> 	mov [gdtv8086 + 4],al
   210 000000F9 A2[BF03]            <1> 	mov [gdtv80862 + 4],al
   211 000000FC 8826[AA03]          <1> 	mov [gdt4 + 7],ah
   212 00000100 8826[B203]          <1> 	mov [gdt5 + 7],ah
   213 00000104 8826[BA03]          <1> 	mov [gdtv8086 + 7],ah
   214 00000108 8826[C203]          <1> 	mov [gdtv80862 + 7],ah
   215                              <1> 	
   216 0000010C 66B800004000        <1> 	mov eax, dosprogloc
   217 00000112 660306[4202]        <1> 	add eax, [newcodecache]
   218 00000117 A3[C503]            <1> 	mov [gdtdos + 2],ax
   219 0000011A A3[CD03]            <1> 	mov [gdtdos2 + 2],ax
   220 0000011D 66C1E810            <1> 	shr eax,16
   221 00000121 A2[C703]            <1> 	mov [gdtdos + 4],al
   222 00000124 A2[CF03]            <1> 	mov [gdtdos2 + 4],al
   223 00000127 8826[CA03]          <1> 	mov [gdtdos + 7],ah
   224 0000012B 8826[D203]          <1> 	mov [gdtdos2 + 7],ah
   225                              <1> 	
   226                              <1> ; fix up gdt and idt
   227 0000012F 67668D83[7B030000]  <1> 	lea eax,[ebx + gdt]	; EAX=linear address of gdt
   228 00000137 66A3[7103]          <1> 	mov [gdtr + 2],eax
   229 0000013B 67668D83[D3030000]  <1> 	lea eax,[ebx + idt]	; EAX=linear address of idt
   230 00000143 66A3[7703]          <1> 	mov [idtr + 2],eax
   231 00000147 FA                  <1> 	cli
   232 00000148 0F0116[6F03]        <1> 	lgdt [gdtr]
   233 0000014D 0F011E[7503]        <1> 	lidt [idtr]
   234 00000152 6631DB              <1> 	xor ebx, ebx
   235 00000155 8CDB                <1> 	mov bx, ds
   236 00000157 66891E[3E02]        <1> 	mov [basecache], ebx
   237 0000015C 0F20C0              <1> 	mov eax,cr0
   238 0000015F 0C01                <1> 	or al,1
   239 00000161 0F22C0              <1> 	mov cr0,eax
   240 00000164 EA[6901]1800        <1> 	jmp SYS_CODE_SEL:do_pm
   241                              <1> [BITS 32]
   242                              <1> do_pm:
   243 00000169 31C0                <1> 	xor eax, eax
   244 0000016B 66B82000            <1> 	mov ax, SYS_DATA_SEL
   245 0000016F 8ED8                <1> 	mov ds, ax
   246 00000171 8EC0                <1> 	mov es, ax
   247 00000173 8EE0                <1> 	mov fs, ax
   248 00000175 66B83000            <1> 	mov ax, NEW_DATA_SEL
   249 00000179 8EE8                <1> 	mov gs, ax
   250                              <1> 	
   251                              <1> copykernel:
   252 0000017B 648B06              <1> 	mov eax, [fs:esi]
   253 0000017E 658906              <1> 	mov [gs:esi], eax
   254 00000181 81C604000000        <1> 	add esi, 4
   255 00000187 81FE[2A9F0000]      <1> 	cmp esi, bsscopy
   256 0000018D 72EC                <1> 	jb copykernel
   257 0000018F EA[96010000]2800    <1> 	jmp NEW_CODE_SEL:done_copy
   258                              <1> 	
   259                              <1> done_copy:
   260 00000196 66B83000            <1> 	mov ax, NEW_DATA_SEL	;;these MUST be setup AFTER the kernel switches places!!!
   261 0000019A 8ED8                <1> 	mov ds, ax
   262 0000019C 8EC0                <1> 	mov es, ax
   263 0000019E 8EE0                <1> 	mov fs, ax
   264                              <1> 	;mov ax, STACK_SEL
   265 000001A0 8ED0                <1> 	mov ss, ax
   266 000001A2 BC[CAAE0000]        <1> 	mov esp, stackend
   267 000001A7 66B82000            <1> 	mov ax, SYS_DATA_SEL
   268 000001AB 8EE8                <1> 	mov gs, ax
   269                              <1> 	
   270 000001AD E8185D0000          <1> 	call initialize	;initialize drivers
   271                              <1> 	
   272 000001B2 A1[42020000]        <1> 	mov eax, [newcodecache]
   273 000001B7 C1E804              <1> 	shr eax, 4
   274 000001BA A3[3E020000]        <1> 	mov [basecache], eax
   275                              <1> 	
   276 000001BF BE[2CEA1100]        <1> 	mov esi, bssend
   277 000001C4 31C0                <1> 	xor eax, eax
   278                              <1> clearkernelbuffers:
   279 000001C6 8906                <1> 	mov [esi], eax
   280 000001C8 81EE04000000        <1> 	sub esi, 4
   281 000001CE 81FE[2A9F0000]      <1> 	cmp esi, bsscopy
   282 000001D4 77F0                <1> 	ja clearkernelbuffers
   283 000001D6 FB                  <1> 	sti
   284                              <1> 
   285                              <1> getmemoryspace:
   286 000001D7 BE[EA9C0000]        <1> 	mov esi, memlistbuf
   287 000001DC 31FF                <1> 	xor edi, edi
   288 000001DE 668B3D[2A9F0000]    <1> 	mov di, [memlistend]
   289 000001E5 01F7                <1> 	add edi, esi
   290 000001E7 31C0                <1> 	xor eax, eax
   291                              <1> memoryspaceaddition:
   292 000001E9 39FE                <1> 	cmp esi, edi
   293 000001EB 7322                <1> 	jae finishedmemspacecalc
   294 000001ED 81C608000000        <1> 	add esi, 8
   295 000001F3 8B0E                <1> 	mov ecx, [esi]
   296 000001F5 81C608000000        <1> 	add esi, 8
   297 000001FB 8B1E                <1> 	mov ebx, [esi]
   298 000001FD 81C608000000        <1> 	add esi, 8
   299 00000203 81FB01000000        <1> 	cmp ebx, 1
   300 00000209 75DE                <1> 	jne memoryspaceaddition
   301 0000020B 01C8                <1> 	add eax, ecx
   302 0000020D EBDA                <1> 	jmp memoryspaceaddition
   303                              <1> finishedmemspacecalc:
   304 0000020F A3[53020000]        <1> 	mov [memoryspace], eax
   305                              <1> %ifdef gui.included
   306 00000214 803D[E49C0000]00    <1> 	cmp byte [guion], 0
   307 0000021B 741C                <1> 	je normalstartup
   308 0000021D 8B1D[3E020000]      <1> 	mov ebx, [basecache]
   309 00000223 C1E304              <1> 	shl ebx, 4
   310 00000226 8B3D[B6540000]      <1> 	mov edi, [physbaseptr]
   311 0000022C 29DF                <1> 	sub edi, ebx
   312 0000022E 893D[B6540000]      <1> 	mov [physbaseptr], edi
   313 00000234 E956620000          <1> 	jmp guiboot
   314                              <1> %endif
   315                              <1> normalstartup:
   316 00000239 E9D8250000          <1> 	jmp os
   317                              <1> 	
   318 0000023E 00000000            <1> basecache dd 0
   319 00000242 00001000            <1> newcodecache dd 0x100000
   320                              <1> 
   321 00000246 00                  <1> testingcpuspeed db 0
   322 00000247 00000000            <1> cpuspeedperint dd 0
   323 0000024B 0000000000000000    <1> cpuclocksperint dd 0,0
   324 00000253 00000000            <1> memoryspace dd 0
   325 00000257 7D0A                <1> pitdiv dw 2685
   326 00000259 2E562200            <1> timeinterval dd 2250286
   327 0000025D 00000000            <1> timeseconds dd 0
   328 00000261 00000000            <1> timenanoseconds dd 0
   329 00000265 00                  <1> soundon db 0
   330 00000266 0000                <1> soundrepititions dw 0
   331 00000268 00000000            <1> soundpos dd 0
   332 0000026C 00000000            <1> soundendpos dd 0
   333                              <1> 
   334                              <1> cpuspeedend:
   335 00000270 C605[46020000]00    <1> 	mov byte [testingcpuspeed], 0
   336 00000277 A3[47020000]        <1> 	mov [cpuspeedperint], eax
   337 0000027C B8[774B0000]        <1> 	mov eax, cpuspeedloopend
   338 00000281 890424              <1> 	mov [esp], eax
   339 00000284 E9D6000000          <1> 	jmp handled
   340                              <1> 
   341                              <1> ;if using the rtc, the default frequency yeilds a period of 976562.5ns
   342                              <1> ;if using the pit, div=451 is 377981.0004, div=5370 is 4500572.00007ns
   343                              <1> ;div=55483 is 46500044.000006ns, div=2685 is 2250286.00004ns, div=902 is 755962.0008
   344                              <1> 
   345                              <1> pitinterrupt: ;this controls threading
   346 00000289 FA                  <1> 	cli
   347 0000028A 803D[46020000]01    <1> 	cmp byte [testingcpuspeed], 1	;check to see if the cpu speed test is running
   348 00000291 74DD                <1> 	je cpuspeedend
   349                              <1> 		
   350 00000293 E8A0000000          <1> 	call timekeeper ;this updates the internal time
   351                              <1> 	
   352 00000298 803D[65020000]01    <1> 	cmp byte [soundon], 1
   353 0000029F 0F84F5550000        <1> 	je near PCSpeakerRAW
   354                              <1> timerinterrupt:	;put this into the interrupt handler that controls threading
   355                              <1> %ifdef threads.included
   356 000002A5 803D[8A640000]01    <1> 	cmp byte [threadson], 1
   357 000002AC 0F8478610000        <1> 	je near threadswitch
   358                              <1> %endif
   359                              <1> keyinterrupt:		;checks for escape, if pressed, it quits the program currently running
   360 000002B2 803D[8A640000]00    <1> 	cmp byte [threadson], 0
   361 000002B9 0F84A0000000        <1> 	je near handled
   362                              <1> %ifdef io.serial
   363                              <1> 	jmp handled
   364                              <1> %else
   365 000002BF 60                  <1> 	pusha
   366 000002C0 E464                <1> 	in al, 64h
   367 000002C2 A820                <1> 	test al, 20h
   368 000002C4 0F8593000000        <1> 	jnz near handled2
   369 000002CA E460                <1> 	in al, 60h
   370 000002CC 3C01                <1> 	cmp al, 1		;escape
   371 000002CE 7405                <1> 	je userint
   372 000002D0 E988000000          <1> 	jmp handled2
   373                              <1> userint:
   374                              <1> 	;UNMASK ALL INTS
   375 000002D5 30C0                <1> 	xor al, al
   376 000002D7 E621                <1> 	out 0x21, al
   377 000002D9 30C0                <1> 	xor al, al
   378 000002DB E6A1                <1> 	out 0xA1, al
   379 000002DD B020                <1> 	mov al, 0x20
   380 000002DF E6A0                <1> 	out 0xA0, al
   381 000002E1 E620                <1> 	out 0x20, al
   382                              <1> 	;RESET PIT DIVISOR
   383 000002E3 66A1[57020000]      <1> 	mov ax, [pitdiv]
   384 000002E9 E640                <1> 	out 0x40, al
   385 000002EB 66C1C008            <1> 	rol ax, 8
   386 000002EF E640                <1> 	out 0x40, al
   387                              <1> 	;RESET PIC
   388 000002F1 B020                <1> 	mov al, 0x20
   389 000002F3 E620                <1> 	out 0x20, al
   390 000002F5 61                  <1> 	popa
   391 000002F6 FB                  <1> 	sti
   392 000002F7 BC[CAAE0000]        <1> 	mov esp, stackend ;reset stack
   393 000002FC E96C260000          <1> 	jmp returnfromexp
   394                              <1> %endif
   395 00000301 0A                  <1> rtcrate db 10
   396                              <1> rtcint:	;this runs at 64Hz which is perfect for 60Hz displays
   397                              <1> %ifdef io.serial
   398                              <1> %else
   399                              <1> %ifdef terminal.vsync
   400                              <1> 	cli
   401                              <1> 	cmp byte [termcopyneeded], 0
   402                              <1> 	je .nocopy
   403                              <1> 	call newtermcopy
   404                              <1> .nocopy
   405                              <1> 	push eax
   406                              <1> 	mov al, 0xC
   407                              <1> 	out 0x70, al
   408                              <1> 	in al, 0x71
   409                              <1> 	pop eax
   410                              <1> 	sti
   411                              <1> %endif
   412                              <1> %endif
   413 00000302 E95F000000          <1> 	jmp handled4
   414                              <1> %ifdef rtl8139.included
   415                              <1> rtl8139.irq:
   416 00000307 FA                  <1> 	cli
   417 00000308 52                  <1> 	push edx
   418 00000309 50                  <1> 	push eax
   419 0000030A 8B15[24810000]      <1> 	mov edx, [rtl8139.basenicaddr]
   420 00000310 81C23E000000        <1> 	add edx, rtl8139.ISR
   421 00000316 31C0                <1> 	xor eax, eax
   422 00000318 66ED                <1> 	in ax, dx
   423 0000031A 66EF                <1> 	out dx, ax
   424 0000031C 58                  <1> 	pop eax
   425 0000031D 5A                  <1> 	pop edx
   426 0000031E FB                  <1> 	sti
   427 0000031F E942000000          <1> 	jmp handled4
   428                              <1> %endif
   429                              <1> %ifdef sound.included
   430                              <1> sblaster.irq:
   431 00000324 FA                  <1> 	cli
   432 00000325 60                  <1> 	pusha
   433 00000326 803D[805B0000]01    <1> 	cmp byte [SoundBlaster], 1
   434 0000032D 0F8458560000        <1> 	je near sblaster.cont
   435 00000333 E925000000          <1> 	jmp handled2
   436                              <1> %endif
   437                              <1> 	
   438                              <1> timekeeper:
   439 00000338 50                  <1> 	push eax
   440 00000339 A1[61020000]        <1> 	mov eax, [timenanoseconds]
   441 0000033E 0305[59020000]      <1> 	add eax, [timeinterval]
   442 00000344 3D00CA9A3B          <1> 	cmp eax, 1000000000
   443 00000349 720B                <1> 	jb nonanosecondrollover
   444 0000034B FF05[5D020000]      <1> 	inc dword [timeseconds]
   445 00000351 2D00CA9A3B          <1> 	sub eax, 1000000000
   446                              <1> 	%ifdef gui.time
   447                              <1> 		;REMOVE THIS IT IS NOT EFFICIENT
   448                              <1> 		cmp byte [guion], 1
   449                              <1> 		jne nonanosecondrollover
   450                              <1> 		cmp dword [dragging], 0
   451                              <1> 		jne nonanosecondrollover
   452                              <1> 		pusha
   453                              <1> 		call guitime
   454                              <1> 		popa
   455                              <1> 	%endif
   456                              <1> nonanosecondrollover:
   457 00000356 A3[61020000]        <1> 	mov [timenanoseconds], eax
   458 0000035B 58                  <1> 	pop eax
   459 0000035C C3                  <1> 	ret
   460                              <1> 	
   461                              <1> handled2:
   462 0000035D 61                  <1> 	popa
   463                              <1> handled3:
   464 0000035E FB                  <1> 	sti
   465                              <1> handled:
   466 0000035F 50                  <1> 	push eax
   467 00000360 B020                <1> 	mov al, 0x20
   468 00000362 E620                <1> 	out 0x20, al
   469 00000364 58                  <1> 	pop eax
   470 00000365 CF                  <1> 	iret
   471                              <1> handled4:
   472 00000366 50                  <1> 	push eax
   473 00000367 B020                <1> 	mov al, 0x20
   474 00000369 E6A0                <1> 	out 0xA0, al
   475 0000036B E620                <1> 	out 0x20, al
   476 0000036D 58                  <1> 	pop eax
   477 0000036E CF                  <1> 	iret
   478                              <1> [BITS 16]
   479                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   480                              <1> ;	16-bit limit/32-bit linear base address of GDT and IDT
   481                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   482 0000036F 5700                <1> gdtr:	dw gdt_end - gdt - 1	; GDT limit
   483 00000371 00000000            <1> 	dd 0    		; filled with linear, physical address of GDT
   484                              <1> 
   485 00000375 FF07                <1> idtr:	dw idt_end - idt - 1	; IDT limit
   486 00000377 00000000            <1> 	dd 0			; filled with linear, physical address of IDT
   487                              <1> 
   488                              <1> 
   489 0000037B 0000                <1> gdt:	dw 0			; limit 15:0
   490 0000037D 0000                <1> 	dw 0			; base 15:0
   491 0000037F 00                  <1> 	db 0			; base 23:16
   492 00000380 00                  <1> 	db 0			; type
   493 00000381 00                  <1> 	db 0			; limit 19:16, flags
   494 00000382 00                  <1> 	db 0			; base 31:24
   495                              <1> ; linear data segment descriptor
   496                              <1> LINEAR_SEL	equ	$-gdt
   497 00000383 FFFF                <1> 	dw 0xFFFF		; limit 0xFFFFF
   498 00000385 0000                <1> 	dw 0			; base for this one is always 0
   499 00000387 00                  <1> 	db 0
   500 00000388 92                  <1> 	db 0x92			; present, ring 0, data, expand-up, writable
   501 00000389 CF                  <1> 	db 0xCF			; page-granular, 32-bit
   502 0000038A 00                  <1> 	db 0
   503                              <1> STACK_SEL	equ $-gdt
   504 0000038B 0200                <1> gdts:	dw 2;(stackend)/4096
   505 0000038D 0000                <1> 	dw 0
   506 0000038F 00                  <1> 	db 0
   507 00000390 92                  <1> 	db 0x92
   508 00000391 CF                  <1> 	db 0xCF
   509 00000392 00                  <1> 	db 0
   510                              <1> ; code segment descriptor
   511                              <1> SYS_CODE_SEL	equ	$-gdt
   512 00000393 FFFF                <1> gdt2:	dw 0xFFFF
   513 00000395 0000                <1> 	dw 0			; (base gets set above)
   514 00000397 00                  <1> 	db 0
   515 00000398 9A                  <1> 	db 0x9A			; present, ring 0, code, non-conforming, readable
   516 00000399 CF                  <1> 	db 0xCF
   517 0000039A 00                  <1> 	db 0
   518                              <1> ; data segment descriptor
   519                              <1> SYS_DATA_SEL	equ	$-gdt
   520 0000039B FFFF                <1> gdt3:	dw 0xFFFF
   521 0000039D 0000                <1> 	dw 0			; (base gets set above)
   522 0000039F 00                  <1> 	db 0
   523 000003A0 92                  <1> 	db 0x92			; present, ring 0, data, expand-up, writable
   524 000003A1 CF                  <1> 	db 0xCF
   525 000003A2 00                  <1> 	db 0
   526                              <1> NEW_CODE_SEL	equ	$-gdt
   527 000003A3 FFFF                <1> gdt4:	dw 0xFFFF
   528 000003A5 0000                <1> 	dw 0			; (base gets set above)
   529 000003A7 00                  <1> 	db 0
   530 000003A8 9A                  <1> 	db 0x9A			; present, ring 0, code, non-conforming, readable
   531 000003A9 CF                  <1> 	db 0xCF
   532 000003AA 00                  <1> 	db 0
   533                              <1> ; data segment descriptor
   534                              <1> NEW_DATA_SEL	equ	$-gdt
   535 000003AB FFFF                <1> gdt5:	dw 0xFFFF
   536 000003AD 0000                <1> 	dw 0			; (base gets set above)
   537 000003AF 00                  <1> 	db 0
   538 000003B0 92                  <1> 	db 0x92			; present, ring 0, data, expand-up, writable
   539 000003B1 CF                  <1> 	db 0xCF
   540 000003B2 00                  <1> 	db 0
   541                              <1> V8086_CODE_SEL	equ $-gdt
   542 000003B3 FFFF                <1> gdtv8086: dw 0xFFFF
   543 000003B5 0000                <1> 	dw 0
   544 000003B7 00                  <1> 	db 0
   545 000003B8 9A                  <1> 	db 0x9A
   546 000003B9 8F                  <1> 	db 0x8F
   547 000003BA 00                  <1> 	db 0
   548                              <1> V8086_DATA_SEL	equ $-gdt
   549 000003BB FFFF                <1> gdtv80862: dw 0xFFFF
   550 000003BD 0000                <1> 	dw 0
   551 000003BF 00                  <1> 	db 0
   552 000003C0 92                  <1> 	db 0x92
   553 000003C1 8F                  <1> 	db 0x8F
   554 000003C2 00                  <1> 	db 0
   555                              <1> DOS_CODE_SEL	equ $-gdt	;this gives dos programs complete access to one megabyte at the beginning of memory
   556 000003C3 0001                <1> gdtdos:	dw 256	;give it 1 MB
   557 000003C5 0000                <1> 	dw 0
   558 000003C7 00                  <1> 	db 0
   559 000003C8 9A                  <1> 	db 0x9A
   560 000003C9 8F                  <1> 	db 0x8F ;16 bit
   561 000003CA 00                  <1> 	db 0
   562                              <1> DOS_DATA_SEL 	equ $-gdt
   563 000003CB 0001                <1> gdtdos2:	dw 256
   564 000003CD 0000                <1> 	dw 0
   565 000003CF 00                  <1> 	db 0
   566 000003D0 92                  <1> 	db 0x92
   567 000003D1 8F                  <1> 	db 0x8F ;16 bit
   568 000003D2 00                  <1> 	db 0
   569                              <1> gdt_end:
   570                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   571                              <1> ;	interrupt descriptor table (IDT)
   572                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   573                              <1> ; 32 reserved interrupts:
   574                              <1> idt:	
   575                              <1> %assign i 0
   576                              <1> %rep    8
   577                              <1> 		dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   578                              <1> %assign i i+1
   579                              <1> %endrep
   580 000003D3 [F40C]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   581                              <2> %assign i i+1
   582 000003DB [000D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   583                              <2> %assign i i+1
   584 000003E3 [0C0D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   585                              <2> %assign i i+1
   586 000003EB [180D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   587                              <2> %assign i i+1
   588 000003F3 [240D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   589                              <2> %assign i i+1
   590 000003FB [300D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   591                              <2> %assign i i+1
   592 00000403 [3C0D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   593                              <2> %assign i i+1
   594 0000040B [480D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   595                              <2> %assign i i+1
   596 00000413 [540D]1800008E0000  <1> 		dw unhand + 8*12,SYS_CODE_SEL,0x8E00,0	;double fault handler in original memory
   597                              <1> %assign i 9
   598                              <1> %rep    23
   599                              <1> 		dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   600                              <1> %assign i i+1
   601                              <1> %endrep
   602 0000041B [600D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   603                              <2> %assign i i+1
   604 00000423 [6C0D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   605                              <2> %assign i i+1
   606 0000042B [780D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   607                              <2> %assign i i+1
   608 00000433 [840D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   609                              <2> %assign i i+1
   610 0000043B [900D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   611                              <2> %assign i i+1
   612 00000443 [9C0D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   613                              <2> %assign i i+1
   614 0000044B [A80D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   615                              <2> %assign i i+1
   616 00000453 [B40D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   617                              <2> %assign i i+1
   618 0000045B [C00D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   619                              <2> %assign i i+1
   620 00000463 [CC0D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   621                              <2> %assign i i+1
   622 0000046B [D80D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   623                              <2> %assign i i+1
   624 00000473 [E40D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   625                              <2> %assign i i+1
   626 0000047B [F00D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   627                              <2> %assign i i+1
   628 00000483 [FC0D]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   629                              <2> %assign i i+1
   630 0000048B [080E]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   631                              <2> %assign i i+1
   632 00000493 [140E]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   633                              <2> %assign i i+1
   634 0000049B [200E]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   635                              <2> %assign i i+1
   636 000004A3 [2C0E]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   637                              <2> %assign i i+1
   638 000004AB [380E]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   639                              <2> %assign i i+1
   640 000004B3 [440E]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   641                              <2> %assign i i+1
   642 000004BB [500E]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   643                              <2> %assign i i+1
   644 000004C3 [5C0E]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   645                              <2> %assign i i+1
   646 000004CB [680E]2800008E0000  <2>  dw unhand + i*12,NEW_CODE_SEL,0x8E00,0
   647                              <2> %assign i i+1
   648 000004D3 [DC26]2800008E0000  <1> 		dw int20h,NEW_CODE_SEL,0x8E00,0
   649 000004DB [E026]2800008E0000  <1> 		dw int21h,NEW_CODE_SEL,0x8E00,0
   650                              <1> %assign i 0x22
   651                              <1> %rep 14
   652                              <1> 		dw handled,NEW_CODE_SEL,0x8E00,0
   653                              <1> %assign i +1
   654                              <1> %endrep
   655 000004E3 [5F03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   656                              <2> %assign i +1
   657 000004EB [5F03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   658                              <2> %assign i +1
   659 000004F3 [5F03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   660                              <2> %assign i +1
   661 000004FB [5F03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   662                              <2> %assign i +1
   663 00000503 [5F03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   664                              <2> %assign i +1
   665 0000050B [5F03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   666                              <2> %assign i +1
   667 00000513 [5F03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   668                              <2> %assign i +1
   669 0000051B [5F03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   670                              <2> %assign i +1
   671 00000523 [5F03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   672                              <2> %assign i +1
   673 0000052B [5F03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   674                              <2> %assign i +1
   675 00000533 [5F03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   676                              <2> %assign i +1
   677 0000053B [5F03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   678                              <2> %assign i +1
   679 00000543 [5F03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   680                              <2> %assign i +1
   681 0000054B [5F03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   682                              <2> %assign i +1
   683                              <1> ;INT 30h for os use and 3rd party use:
   684 00000553 [E71B]2800008E0000  <1> 		dw newints,NEW_CODE_SEL,0x8E00,0
   685                              <1> %assign i 0x31
   686                              <1> %rep 15
   687                              <1> 		dw handled,NEW_CODE_SEL,0x8E00,0
   688                              <1> %assign i +1
   689                              <1> %endrep
   690 0000055B [5F03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   691                              <2> %assign i +1
   692 00000563 [5F03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   693                              <2> %assign i +1
   694 0000056B [5F03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   695                              <2> %assign i +1
   696 00000573 [5F03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   697                              <2> %assign i +1
   698 0000057B [5F03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   699                              <2> %assign i +1
   700 00000583 [5F03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   701                              <2> %assign i +1
   702 0000058B [5F03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   703                              <2> %assign i +1
   704 00000593 [5F03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   705                              <2> %assign i +1
   706 0000059B [5F03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   707                              <2> %assign i +1
   708 000005A3 [5F03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   709                              <2> %assign i +1
   710 000005AB [5F03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   711                              <2> %assign i +1
   712 000005B3 [5F03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   713                              <2> %assign i +1
   714 000005BB [5F03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   715                              <2> %assign i +1
   716 000005C3 [5F03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   717                              <2> %assign i +1
   718 000005CB [5F03]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   719                              <2> %assign i +1
   720                              <1> ;and here we are at 0x40
   721                              <1> ;here are all the irq's
   722 000005D3 [8902]2800008E0000  <1> 		dw pitinterrupt,NEW_CODE_SEL,0x8E00,0 ;IRQ 0 = PIT
   723 000005DB [5F03]2800008E0000  <1> 		dw handled,NEW_CODE_SEL,0x8E00,0 ;IRQ 1 = keyboard
   724 000005E3 [5F03]2800008E0000  <1> 		dw handled,NEW_CODE_SEL,0x8E00,0 ;IRQ 2
   725 000005EB [5F03]2800008E0000  <1> 		dw handled,NEW_CODE_SEL,0x8E00,0 ;IRQ 3
   726 000005F3 [5F03]2800008E0000  <1> 		dw handled,NEW_CODE_SEL,0x8E00,0 ;IRQ 4
   727                              <1> 	%ifdef sound.included
   728 000005FB [2403]2800008E0000  <1> 		dw sblaster.irq,NEW_CODE_SEL,0x8E00,0 ;IRQ 5 = default SoundBlaster
   729                              <1> 	%else
   730                              <1> 		dw handled,NEW_CODE_SEL,0x8E00,0 ;IRQ 5
   731                              <1> 	%endif
   732 00000603 [5F03]2800008E0000  <1> 		dw handled,NEW_CODE_SEL,0x8E00,0 ;IRQ 6
   733 0000060B [5F03]2800008E0000  <1> 		dw handled,NEW_CODE_SEL,0x8E00,0 ;IRQ 7
   734 00000613 [0203]2800008E0000  <1> 		dw rtcint,NEW_CODE_SEL,0x8E00,0 ;IRQ 8 = RTC
   735 0000061B [6603]2800008E0000  <1> 		dw handled4,NEW_CODE_SEL,0x8E00,0 ;IRQ 9 = default NE2000
   736 00000623 [6603]2800008E0000  <1> 		dw handled4,NEW_CODE_SEL,0x8E00,0 ;IRQ 10
   737                              <1> 	%ifdef rtl8139.included
   738 0000062B [0703]2800008E0000  <1> 		dw rtl8139.irq,NEW_CODE_SEL,0x8E00,0 ;IRQ 11 = default RTL8139
   739                              <1> 	%else
   740                              <1> 		dw handled4,NEW_CODE_SEL,0x8E00,0 ;IRQ 11
   741                              <1> 	%endif
   742 00000633 [6603]2800008E0000  <1> 		dw handled4,NEW_CODE_SEL,0x8E00,0 ;IRQ 12
   743 0000063B [6603]2800008E0000  <1> 		dw handled4,NEW_CODE_SEL,0x8E00,0 ;IRQ 13
   744 00000643 [6603]2800008E0000  <1> 		dw handled4,NEW_CODE_SEL,0x8E00,0 ;IRQ 14
   745 0000064B [6603]2800008E0000  <1> 		dw handled4,NEW_CODE_SEL,0x8E00,0 ;IRQ 15
   746                              <1> ;This brings me up to 0x50
   747                              <1> %assign i 0x50
   748                              <1> %rep 176
   749                              <1> 		dw handled, NEW_CODE_SEL,0x8E00,0
   750                              <1> 		;dw unhand + i*12, NEW_CODE_SEL,0x8E00,0
   751                              <1> %assign i +1
   752                              <1> %endrep
   753 00000653 [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   754                              <2> 
   755                              <2> %assign i +1
   756 0000065B [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   757                              <2> 
   758                              <2> %assign i +1
   759 00000663 [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   760                              <2> 
   761                              <2> %assign i +1
   762 0000066B [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   763                              <2> 
   764                              <2> %assign i +1
   765 00000673 [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   766                              <2> 
   767                              <2> %assign i +1
   768 0000067B [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   769                              <2> 
   770                              <2> %assign i +1
   771 00000683 [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   772                              <2> 
   773                              <2> %assign i +1
   774 0000068B [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   775                              <2> 
   776                              <2> %assign i +1
   777 00000693 [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   778                              <2> 
   779                              <2> %assign i +1
   780 0000069B [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   781                              <2> 
   782                              <2> %assign i +1
   783 000006A3 [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   784                              <2> 
   785                              <2> %assign i +1
   786 000006AB [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   787                              <2> 
   788                              <2> %assign i +1
   789 000006B3 [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   790                              <2> 
   791                              <2> %assign i +1
   792 000006BB [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   793                              <2> 
   794                              <2> %assign i +1
   795 000006C3 [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   796                              <2> 
   797                              <2> %assign i +1
   798 000006CB [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   799                              <2> 
   800                              <2> %assign i +1
   801 000006D3 [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   802                              <2> 
   803                              <2> %assign i +1
   804 000006DB [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   805                              <2> 
   806                              <2> %assign i +1
   807 000006E3 [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   808                              <2> 
   809                              <2> %assign i +1
   810 000006EB [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   811                              <2> 
   812                              <2> %assign i +1
   813 000006F3 [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   814                              <2> 
   815                              <2> %assign i +1
   816 000006FB [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   817                              <2> 
   818                              <2> %assign i +1
   819 00000703 [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   820                              <2> 
   821                              <2> %assign i +1
   822 0000070B [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   823                              <2> 
   824                              <2> %assign i +1
   825 00000713 [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   826                              <2> 
   827                              <2> %assign i +1
   828 0000071B [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   829                              <2> 
   830                              <2> %assign i +1
   831 00000723 [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   832                              <2> 
   833                              <2> %assign i +1
   834 0000072B [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   835                              <2> 
   836                              <2> %assign i +1
   837 00000733 [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   838                              <2> 
   839                              <2> %assign i +1
   840 0000073B [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   841                              <2> 
   842                              <2> %assign i +1
   843 00000743 [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   844                              <2> 
   845                              <2> %assign i +1
   846 0000074B [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   847                              <2> 
   848                              <2> %assign i +1
   849 00000753 [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   850                              <2> 
   851                              <2> %assign i +1
   852 0000075B [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   853                              <2> 
   854                              <2> %assign i +1
   855 00000763 [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   856                              <2> 
   857                              <2> %assign i +1
   858 0000076B [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   859                              <2> 
   860                              <2> %assign i +1
   861 00000773 [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   862                              <2> 
   863                              <2> %assign i +1
   864 0000077B [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   865                              <2> 
   866                              <2> %assign i +1
   867 00000783 [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   868                              <2> 
   869                              <2> %assign i +1
   870 0000078B [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   871                              <2> 
   872                              <2> %assign i +1
   873 00000793 [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   874                              <2> 
   875                              <2> %assign i +1
   876 0000079B [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   877                              <2> 
   878                              <2> %assign i +1
   879 000007A3 [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   880                              <2> 
   881                              <2> %assign i +1
   882 000007AB [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   883                              <2> 
   884                              <2> %assign i +1
   885 000007B3 [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   886                              <2> 
   887                              <2> %assign i +1
   888 000007BB [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   889                              <2> 
   890                              <2> %assign i +1
   891 000007C3 [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   892                              <2> 
   893                              <2> %assign i +1
   894 000007CB [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   895                              <2> 
   896                              <2> %assign i +1
   897 000007D3 [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   898                              <2> 
   899                              <2> %assign i +1
   900 000007DB [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   901                              <2> 
   902                              <2> %assign i +1
   903 000007E3 [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   904                              <2> 
   905                              <2> %assign i +1
   906 000007EB [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   907                              <2> 
   908                              <2> %assign i +1
   909 000007F3 [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   910                              <2> 
   911                              <2> %assign i +1
   912 000007FB [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   913                              <2> 
   914                              <2> %assign i +1
   915 00000803 [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   916                              <2> 
   917                              <2> %assign i +1
   918 0000080B [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   919                              <2> 
   920                              <2> %assign i +1
   921 00000813 [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   922                              <2> 
   923                              <2> %assign i +1
   924 0000081B [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   925                              <2> 
   926                              <2> %assign i +1
   927 00000823 [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   928                              <2> 
   929                              <2> %assign i +1
   930 0000082B [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   931                              <2> 
   932                              <2> %assign i +1
   933 00000833 [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   934                              <2> 
   935                              <2> %assign i +1
   936 0000083B [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   937                              <2> 
   938                              <2> %assign i +1
   939 00000843 [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   940                              <2> 
   941                              <2> %assign i +1
   942 0000084B [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   943                              <2> 
   944                              <2> %assign i +1
   945 00000853 [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   946                              <2> 
   947                              <2> %assign i +1
   948 0000085B [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   949                              <2> 
   950                              <2> %assign i +1
   951 00000863 [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   952                              <2> 
   953                              <2> %assign i +1
   954 0000086B [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   955                              <2> 
   956                              <2> %assign i +1
   957 00000873 [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   958                              <2> 
   959                              <2> %assign i +1
   960 0000087B [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   961                              <2> 
   962                              <2> %assign i +1
   963 00000883 [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   964                              <2> 
   965                              <2> %assign i +1
   966 0000088B [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   967                              <2> 
   968                              <2> %assign i +1
   969 00000893 [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   970                              <2> 
   971                              <2> %assign i +1
   972 0000089B [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   973                              <2> 
   974                              <2> %assign i +1
   975 000008A3 [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   976                              <2> 
   977                              <2> %assign i +1
   978 000008AB [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   979                              <2> 
   980                              <2> %assign i +1
   981 000008B3 [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   982                              <2> 
   983                              <2> %assign i +1
   984 000008BB [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   985                              <2> 
   986                              <2> %assign i +1
   987 000008C3 [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   988                              <2> 
   989                              <2> %assign i +1
   990 000008CB [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   991                              <2> 
   992                              <2> %assign i +1
   993 000008D3 [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   994                              <2> 
   995                              <2> %assign i +1
   996 000008DB [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   997                              <2> 
   998                              <2> %assign i +1
   999 000008E3 [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1000                              <2> 
  1001                              <2> %assign i +1
  1002 000008EB [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1003                              <2> 
  1004                              <2> %assign i +1
  1005 000008F3 [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1006                              <2> 
  1007                              <2> %assign i +1
  1008 000008FB [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1009                              <2> 
  1010                              <2> %assign i +1
  1011 00000903 [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1012                              <2> 
  1013                              <2> %assign i +1
  1014 0000090B [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1015                              <2> 
  1016                              <2> %assign i +1
  1017 00000913 [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1018                              <2> 
  1019                              <2> %assign i +1
  1020 0000091B [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1021                              <2> 
  1022                              <2> %assign i +1
  1023 00000923 [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1024                              <2> 
  1025                              <2> %assign i +1
  1026 0000092B [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1027                              <2> 
  1028                              <2> %assign i +1
  1029 00000933 [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1030                              <2> 
  1031                              <2> %assign i +1
  1032 0000093B [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1033                              <2> 
  1034                              <2> %assign i +1
  1035 00000943 [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1036                              <2> 
  1037                              <2> %assign i +1
  1038 0000094B [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1039                              <2> 
  1040                              <2> %assign i +1
  1041 00000953 [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1042                              <2> 
  1043                              <2> %assign i +1
  1044 0000095B [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1045                              <2> 
  1046                              <2> %assign i +1
  1047 00000963 [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1048                              <2> 
  1049                              <2> %assign i +1
  1050 0000096B [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1051                              <2> 
  1052                              <2> %assign i +1
  1053 00000973 [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1054                              <2> 
  1055                              <2> %assign i +1
  1056 0000097B [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1057                              <2> 
  1058                              <2> %assign i +1
  1059 00000983 [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1060                              <2> 
  1061                              <2> %assign i +1
  1062 0000098B [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1063                              <2> 
  1064                              <2> %assign i +1
  1065 00000993 [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1066                              <2> 
  1067                              <2> %assign i +1
  1068 0000099B [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1069                              <2> 
  1070                              <2> %assign i +1
  1071 000009A3 [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1072                              <2> 
  1073                              <2> %assign i +1
  1074 000009AB [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1075                              <2> 
  1076                              <2> %assign i +1
  1077 000009B3 [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1078                              <2> 
  1079                              <2> %assign i +1
  1080 000009BB [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1081                              <2> 
  1082                              <2> %assign i +1
  1083 000009C3 [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1084                              <2> 
  1085                              <2> %assign i +1
  1086 000009CB [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1087                              <2> 
  1088                              <2> %assign i +1
  1089 000009D3 [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1090                              <2> 
  1091                              <2> %assign i +1
  1092 000009DB [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1093                              <2> 
  1094                              <2> %assign i +1
  1095 000009E3 [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1096                              <2> 
  1097                              <2> %assign i +1
  1098 000009EB [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1099                              <2> 
  1100                              <2> %assign i +1
  1101 000009F3 [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1102                              <2> 
  1103                              <2> %assign i +1
  1104 000009FB [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1105                              <2> 
  1106                              <2> %assign i +1
  1107 00000A03 [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1108                              <2> 
  1109                              <2> %assign i +1
  1110 00000A0B [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1111                              <2> 
  1112                              <2> %assign i +1
  1113 00000A13 [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1114                              <2> 
  1115                              <2> %assign i +1
  1116 00000A1B [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1117                              <2> 
  1118                              <2> %assign i +1
  1119 00000A23 [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1120                              <2> 
  1121                              <2> %assign i +1
  1122 00000A2B [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1123                              <2> 
  1124                              <2> %assign i +1
  1125 00000A33 [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1126                              <2> 
  1127                              <2> %assign i +1
  1128 00000A3B [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1129                              <2> 
  1130                              <2> %assign i +1
  1131 00000A43 [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1132                              <2> 
  1133                              <2> %assign i +1
  1134 00000A4B [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1135                              <2> 
  1136                              <2> %assign i +1
  1137 00000A53 [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1138                              <2> 
  1139                              <2> %assign i +1
  1140 00000A5B [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1141                              <2> 
  1142                              <2> %assign i +1
  1143 00000A63 [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1144                              <2> 
  1145                              <2> %assign i +1
  1146 00000A6B [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1147                              <2> 
  1148                              <2> %assign i +1
  1149 00000A73 [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1150                              <2> 
  1151                              <2> %assign i +1
  1152 00000A7B [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1153                              <2> 
  1154                              <2> %assign i +1
  1155 00000A83 [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1156                              <2> 
  1157                              <2> %assign i +1
  1158 00000A8B [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1159                              <2> 
  1160                              <2> %assign i +1
  1161 00000A93 [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1162                              <2> 
  1163                              <2> %assign i +1
  1164 00000A9B [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1165                              <2> 
  1166                              <2> %assign i +1
  1167 00000AA3 [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1168                              <2> 
  1169                              <2> %assign i +1
  1170 00000AAB [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1171                              <2> 
  1172                              <2> %assign i +1
  1173 00000AB3 [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1174                              <2> 
  1175                              <2> %assign i +1
  1176 00000ABB [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1177                              <2> 
  1178                              <2> %assign i +1
  1179 00000AC3 [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1180                              <2> 
  1181                              <2> %assign i +1
  1182 00000ACB [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1183                              <2> 
  1184                              <2> %assign i +1
  1185 00000AD3 [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1186                              <2> 
  1187                              <2> %assign i +1
  1188 00000ADB [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1189                              <2> 
  1190                              <2> %assign i +1
  1191 00000AE3 [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1192                              <2> 
  1193                              <2> %assign i +1
  1194 00000AEB [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1195                              <2> 
  1196                              <2> %assign i +1
  1197 00000AF3 [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1198                              <2> 
  1199                              <2> %assign i +1
  1200 00000AFB [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1201                              <2> 
  1202                              <2> %assign i +1
  1203 00000B03 [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1204                              <2> 
  1205                              <2> %assign i +1
  1206 00000B0B [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1207                              <2> 
  1208                              <2> %assign i +1
  1209 00000B13 [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1210                              <2> 
  1211                              <2> %assign i +1
  1212 00000B1B [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1213                              <2> 
  1214                              <2> %assign i +1
  1215 00000B23 [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1216                              <2> 
  1217                              <2> %assign i +1
  1218 00000B2B [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1219                              <2> 
  1220                              <2> %assign i +1
  1221 00000B33 [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1222                              <2> 
  1223                              <2> %assign i +1
  1224 00000B3B [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1225                              <2> 
  1226                              <2> %assign i +1
  1227 00000B43 [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1228                              <2> 
  1229                              <2> %assign i +1
  1230 00000B4B [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1231                              <2> 
  1232                              <2> %assign i +1
  1233 00000B53 [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1234                              <2> 
  1235                              <2> %assign i +1
  1236 00000B5B [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1237                              <2> 
  1238                              <2> %assign i +1
  1239 00000B63 [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1240                              <2> 
  1241                              <2> %assign i +1
  1242 00000B6B [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1243                              <2> 
  1244                              <2> %assign i +1
  1245 00000B73 [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1246                              <2> 
  1247                              <2> %assign i +1
  1248 00000B7B [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1249                              <2> 
  1250                              <2> %assign i +1
  1251 00000B83 [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1252                              <2> 
  1253                              <2> %assign i +1
  1254 00000B8B [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1255                              <2> 
  1256                              <2> %assign i +1
  1257 00000B93 [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1258                              <2> 
  1259                              <2> %assign i +1
  1260 00000B9B [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1261                              <2> 
  1262                              <2> %assign i +1
  1263 00000BA3 [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1264                              <2> 
  1265                              <2> %assign i +1
  1266 00000BAB [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1267                              <2> 
  1268                              <2> %assign i +1
  1269 00000BB3 [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1270                              <2> 
  1271                              <2> %assign i +1
  1272 00000BBB [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1273                              <2> 
  1274                              <2> %assign i +1
  1275 00000BC3 [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1276                              <2> 
  1277                              <2> %assign i +1
  1278 00000BCB [5F03]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1279                              <2> 
  1280                              <2> %assign i +1
  1281                              <1> idt_end:
  1282                              <1> [BITS 32]
  1283                                  	%include "source/realmode.asm"
  1284                              <1> realmode:	;make sure the real mode program's address is in realmodeptr 
  1285                              <1> 			;and the return address is in realmodereturn
  1286 00000BD3 FA                  <1> 	cli
  1287 00000BD4 A3[E60C0000]        <1> 	mov [realmodeeax], eax
  1288 00000BD9 891D[E20C0000]      <1> 	mov [realmodeebx], ebx
  1289 00000BDF 8925[D40C0000]      <1> 	mov [pmodeesp], esp
  1290                              <1> 
  1291 00000BE5 BB[DE0C0000]        <1> 	mov ebx, cr0old
  1292                              <1> rmcopytofirstmbyte:
  1293 00000BEA 8B03                <1> 	mov eax, [ebx]
  1294 00000BEC 658903              <1> 	mov [gs:ebx], eax
  1295 00000BEF 81C304000000        <1> 	add ebx, 4
  1296 00000BF5 81FB[EE0C0000]      <1> 	cmp ebx, realmodeptr
  1297 00000BFB 76ED                <1> 	jbe rmcopytofirstmbyte
  1298                              <1> 
  1299 00000BFD EA[040C0000]3800    <1> 	jmp V8086_CODE_SEL:protected16bit
  1300                              <1> 
  1301                              <1> [BITS 16]
  1302                              <1> protected16bit:
  1303 00000C04 B84000              <1> 	mov ax, V8086_DATA_SEL
  1304 00000C07 8ED8                <1> 	mov ds, ax
  1305 00000C09 8EC0                <1> 	mov es, ax
  1306 00000C0B 8EE0                <1> 	mov fs, ax
  1307 00000C0D 8EE8                <1> 	mov gs, ax
  1308 00000C0F 8ED0                <1> 	mov ss, ax
  1309 00000C11 66BC[CAAE0000]      <1> 	mov esp, stackend
  1310 00000C17 0F20C0              <1> 	mov eax, cr0
  1311 00000C1A 66A3[DE0C]          <1> 	mov [cr0old], eax
  1312 00000C1E 6625FEFFFF7F        <1> 	and eax, 0x7FFFFFFE
  1313 00000C24 0F22C0              <1> 	mov cr0, eax	;now in real mode
  1314 00000C27 EA[2C0C]0010        <1> 	jmp 0x1000:inrealmode
  1315                              <1> 
  1316                              <1> inrealmode:
  1317 00000C2C 8CC8                <1> 	mov ax, cs
  1318 00000C2E 8ED8                <1> 	mov ds, ax
  1319 00000C30 8EC0                <1> 	mov es, ax
  1320 00000C32 8EE0                <1> 	mov fs, ax
  1321 00000C34 8EE8                <1> 	mov gs, ax
  1322 00000C36 8ED0                <1> 	mov ss, ax
  1323 00000C38 BC[CAAE]            <1> 	mov sp, stackend ;because this is at 0x1000: and not 0x10000: it works
  1324                              <1> 	
  1325 00000C3B B011                <1> 	mov al, 0x11
  1326 00000C3D E620                <1> 	out 0x20, al
  1327 00000C3F E6A0                <1> 	out 0xA0, al
  1328 00000C41 B008                <1> 	mov al, 0x8		;interrupt for master
  1329 00000C43 E621                <1> 	out 0x21, al
  1330 00000C45 B070                <1> 	mov al, 0x70	;interrupt for slave
  1331 00000C47 E6A1                <1> 	out 0xA1, al
  1332 00000C49 B004                <1> 	mov al, 4
  1333 00000C4B E621                <1> 	out 0x21, al
  1334 00000C4D B002                <1> 	mov al, 2
  1335 00000C4F E6A1                <1> 	out 0xA1, al
  1336 00000C51 B001                <1> 	mov al, 0x1
  1337 00000C53 E621                <1> 	out 0x21, al
  1338 00000C55 B001                <1> 	mov al, 0x1
  1339 00000C57 E6A1                <1> 	out 0xA1, al
  1340                              <1> 	
  1341 00000C59 0F011E[D80C]        <1> 	lidt [idt_real]
  1342 00000C5E FB                  <1> 	sti
  1343                              <1> 
  1344 00000C5F 66A1[E60C]          <1> 	mov eax, [realmodeeax]
  1345 00000C63 668B1E[E20C]        <1> 	mov ebx, [realmodeebx]
  1346                              <1> 
  1347 00000C68 FF16[EE0C]          <1> 	call word [realmodeptr] ;call the real mode program here
  1348                              <1> 
  1349 00000C6C 66A3[E60C]          <1> 	mov [realmodeeax], eax
  1350 00000C70 66891E[E20C]        <1> 	mov [realmodeebx], ebx
  1351                              <1> 
  1352 00000C75 FA                  <1> 	cli
  1353 00000C76 0F0116[6F03]        <1> 	lgdt [gdtr]
  1354 00000C7B 0F011E[7503]        <1> 	lidt [idtr]
  1355 00000C80 0F20C0              <1> 	mov eax, cr0
  1356 00000C83 0C01                <1> 	or al, 1
  1357 00000C85 0F22C0              <1> 	mov cr0,eax
  1358 00000C88 EA[8D0C]2800        <1> 	jmp NEW_CODE_SEL:returntopmode
  1359                              <1> 
  1360                              <1> [BITS 32]
  1361                              <1> returntopmode:
  1362 00000C8D 66B83000            <1> 	mov ax, NEW_DATA_SEL
  1363 00000C91 8ED8                <1> 	mov ds, ax
  1364 00000C93 8EC0                <1> 	mov es, ax
  1365 00000C95 8EE0                <1> 	mov fs, ax
  1366 00000C97 8ED0                <1> 	mov ss, ax
  1367 00000C99 8B25[D40C0000]      <1> 	mov esp, [pmodeesp]
  1368 00000C9F 66B82000            <1> 	mov ax, SYS_DATA_SEL
  1369 00000CA3 8EE8                <1> 	mov gs, ax
  1370                              <1> 
  1371 00000CA5 BB[DE0C0000]        <1> 	mov ebx, cr0old
  1372                              <1> rmcopyfromfirstmbyte:
  1373 00000CAA 658B03              <1> 	mov eax, [gs:ebx]
  1374 00000CAD 8903                <1> 	mov [ebx], eax
  1375 00000CAF 81C304000000        <1> 	add ebx, 4
  1376 00000CB5 81FB[EE0C0000]      <1> 	cmp ebx, realmodeptr
  1377 00000CBB 76ED                <1> 	jbe rmcopyfromfirstmbyte
  1378                              <1> 
  1379 00000CBD E821520000          <1> 	call initialize.pic ;reset irq's and masks
  1380 00000CC2 FB                  <1> 	sti
  1381 00000CC3 A1[E60C0000]        <1> 	mov eax, [realmodeeax]
  1382 00000CC8 8B1D[E20C0000]      <1> 	mov ebx, [realmodeebx]
  1383 00000CCE FF25[EA0C0000]      <1> 	jmp dword [realmodereturn]
  1384                              <1> 	
  1385 00000CD4 00000000            <1> pmodeesp dd 0
  1386                              <1> idt_real:
  1387 00000CD8 FF03                <1> 	dw 0x3FF
  1388 00000CDA 00000000            <1> 	dd 0
  1389 00000CDE 00000000            <1> cr0old dd 0
  1390 00000CE2 00000000            <1> realmodeebx dd 0
  1391 00000CE6 00000000            <1> realmodeeax dd 0
  1392 00000CEA 00000000            <1> realmodereturn dd 0
  1393 00000CEE 0000                <1> realmodeptr dw 0
  1394 00000CF0 00000000            <1> dd 0 ;make sure the copy thing doesnt overflow
  1395                                  [BITS 32]
  1396                                      %include "source/exception.asm"
  1397                              <1> %ifdef exceptions.included
  1398                              <1> unhand:	
  1399                              <1> 	%assign i 0
  1400                              <1> 	%rep 32
  1401                              <1> 	mov byte [intprob], i
  1402                              <1> 	jmp unhand2
  1403                              <1> 	%assign i i+1
  1404                              <1> 	%endrep
  1405 00000CF4 C605[A6110000]00    <2>  mov byte [intprob], i
  1406 00000CFB E974010000          <2>  jmp unhand2
  1407                              <2>  %assign i i+1
  1408 00000D00 C605[A6110000]01    <2>  mov byte [intprob], i
  1409 00000D07 E968010000          <2>  jmp unhand2
  1410                              <2>  %assign i i+1
  1411 00000D0C C605[A6110000]02    <2>  mov byte [intprob], i
  1412 00000D13 E95C010000          <2>  jmp unhand2
  1413                              <2>  %assign i i+1
  1414 00000D18 C605[A6110000]03    <2>  mov byte [intprob], i
  1415 00000D1F E950010000          <2>  jmp unhand2
  1416                              <2>  %assign i i+1
  1417 00000D24 C605[A6110000]04    <2>  mov byte [intprob], i
  1418 00000D2B E944010000          <2>  jmp unhand2
  1419                              <2>  %assign i i+1
  1420 00000D30 C605[A6110000]05    <2>  mov byte [intprob], i
  1421 00000D37 E938010000          <2>  jmp unhand2
  1422                              <2>  %assign i i+1
  1423 00000D3C C605[A6110000]06    <2>  mov byte [intprob], i
  1424 00000D43 E92C010000          <2>  jmp unhand2
  1425                              <2>  %assign i i+1
  1426 00000D48 C605[A6110000]07    <2>  mov byte [intprob], i
  1427 00000D4F E920010000          <2>  jmp unhand2
  1428                              <2>  %assign i i+1
  1429 00000D54 C605[A6110000]08    <2>  mov byte [intprob], i
  1430 00000D5B E914010000          <2>  jmp unhand2
  1431                              <2>  %assign i i+1
  1432 00000D60 C605[A6110000]09    <2>  mov byte [intprob], i
  1433 00000D67 E908010000          <2>  jmp unhand2
  1434                              <2>  %assign i i+1
  1435 00000D6C C605[A6110000]0A    <2>  mov byte [intprob], i
  1436 00000D73 E9FC000000          <2>  jmp unhand2
  1437                              <2>  %assign i i+1
  1438 00000D78 C605[A6110000]0B    <2>  mov byte [intprob], i
  1439 00000D7F E9F0000000          <2>  jmp unhand2
  1440                              <2>  %assign i i+1
  1441 00000D84 C605[A6110000]0C    <2>  mov byte [intprob], i
  1442 00000D8B E9E4000000          <2>  jmp unhand2
  1443                              <2>  %assign i i+1
  1444 00000D90 C605[A6110000]0D    <2>  mov byte [intprob], i
  1445 00000D97 E9D8000000          <2>  jmp unhand2
  1446                              <2>  %assign i i+1
  1447 00000D9C C605[A6110000]0E    <2>  mov byte [intprob], i
  1448 00000DA3 E9CC000000          <2>  jmp unhand2
  1449                              <2>  %assign i i+1
  1450 00000DA8 C605[A6110000]0F    <2>  mov byte [intprob], i
  1451 00000DAF E9C0000000          <2>  jmp unhand2
  1452                              <2>  %assign i i+1
  1453 00000DB4 C605[A6110000]10    <2>  mov byte [intprob], i
  1454 00000DBB E9B4000000          <2>  jmp unhand2
  1455                              <2>  %assign i i+1
  1456 00000DC0 C605[A6110000]11    <2>  mov byte [intprob], i
  1457 00000DC7 E9A8000000          <2>  jmp unhand2
  1458                              <2>  %assign i i+1
  1459 00000DCC C605[A6110000]12    <2>  mov byte [intprob], i
  1460 00000DD3 E99C000000          <2>  jmp unhand2
  1461                              <2>  %assign i i+1
  1462 00000DD8 C605[A6110000]13    <2>  mov byte [intprob], i
  1463 00000DDF E990000000          <2>  jmp unhand2
  1464                              <2>  %assign i i+1
  1465 00000DE4 C605[A6110000]14    <2>  mov byte [intprob], i
  1466 00000DEB E984000000          <2>  jmp unhand2
  1467                              <2>  %assign i i+1
  1468 00000DF0 C605[A6110000]15    <2>  mov byte [intprob], i
  1469 00000DF7 E978000000          <2>  jmp unhand2
  1470                              <2>  %assign i i+1
  1471 00000DFC C605[A6110000]16    <2>  mov byte [intprob], i
  1472 00000E03 E96C000000          <2>  jmp unhand2
  1473                              <2>  %assign i i+1
  1474 00000E08 C605[A6110000]17    <2>  mov byte [intprob], i
  1475 00000E0F E960000000          <2>  jmp unhand2
  1476                              <2>  %assign i i+1
  1477 00000E14 C605[A6110000]18    <2>  mov byte [intprob], i
  1478 00000E1B E954000000          <2>  jmp unhand2
  1479                              <2>  %assign i i+1
  1480 00000E20 C605[A6110000]19    <2>  mov byte [intprob], i
  1481 00000E27 E948000000          <2>  jmp unhand2
  1482                              <2>  %assign i i+1
  1483 00000E2C C605[A6110000]1A    <2>  mov byte [intprob], i
  1484 00000E33 E93C000000          <2>  jmp unhand2
  1485                              <2>  %assign i i+1
  1486 00000E38 C605[A6110000]1B    <2>  mov byte [intprob], i
  1487 00000E3F E930000000          <2>  jmp unhand2
  1488                              <2>  %assign i i+1
  1489 00000E44 C605[A6110000]1C    <2>  mov byte [intprob], i
  1490 00000E4B E924000000          <2>  jmp unhand2
  1491                              <2>  %assign i i+1
  1492 00000E50 C605[A6110000]1D    <2>  mov byte [intprob], i
  1493 00000E57 E918000000          <2>  jmp unhand2
  1494                              <2>  %assign i i+1
  1495 00000E5C C605[A6110000]1E    <2>  mov byte [intprob], i
  1496 00000E63 E90C000000          <2>  jmp unhand2
  1497                              <2>  %assign i i+1
  1498 00000E68 C605[A6110000]1F    <2>  mov byte [intprob], i
  1499 00000E6F E900000000          <2>  jmp unhand2
  1500                              <2>  %assign i i+1
  1501                              <1> unhand2:
  1502 00000E74 FA                  <1> 	cli
  1503 00000E75 1E                  <1> 	push ds
  1504 00000E76 06                  <1> 	push es
  1505 00000E77 0FA0                <1> 	push fs
  1506 00000E79 0FA8                <1> 	push gs
  1507 00000E7B 16                  <1> 	push ss
  1508 00000E7C 60                  <1> 	pushad
  1509                              <1> %ifdef gui.included
  1510 00000E7D 803D[E49C0000]00    <1> 	cmp byte [guion], 0
  1511 00000E84 0F8432000000        <1> 	je near noguiunhandstuff
  1512 00000E8A 66C705[A0110000]08- <1> 	mov word [locunhandy], 8
  1513 00000E92 00                  <1>
  1514 00000E93 66C705[A2110000]08- <1> 	mov word [locunhandx], 8
  1515 00000E9B 00                  <1>
  1516 00000E9C 668B1D[E8690000]    <1> 	mov bx, [background]
  1517 00000EA3 66891D[A4110000]    <1> 	mov [backgroundcache], bx
  1518 00000EAA C605[92550000]01    <1> 	mov byte [mousedisabled],1
  1519 00000EB1 66BB00F8            <1> 	mov bx, 1111100000000000b
  1520 00000EB5 66891D[E8690000]    <1> 	mov [background], bx
  1521                              <1> noguiunhandstuff:
  1522                              <1> %endif
  1523 00000EBC 89E6                <1> 	mov esi, esp
  1524 00000EBE 8935[94110000]      <1> 	mov [espfirst], esi
  1525 00000EC4 81C6BC000000        <1> 	add esi, ((unhndrgend - unhndrg)/15)*4
  1526 00000ECA 8935[90110000]      <1> 	mov [esploc], esi
  1527 00000ED0 BE[B5110000]        <1> 	mov esi, unhandmsg
  1528 00000ED5 8935[98110000]      <1> 	mov [esiloc], esi
  1529 00000EDB 31C9                <1> 	xor ecx, ecx
  1530 00000EDD 8A0D[A6110000]      <1> 	mov cl, [intprob]
  1531 00000EE3 BB[84150000]        <1> 	mov ebx, errortypes
  1532 00000EE8 C1E102              <1> 	shl ecx, 2
  1533 00000EEB 01CB                <1> 	add ebx, ecx
  1534 00000EED 81FB[C4150000]      <1> 	cmp ebx, errortypesend
  1535 00000EF3 7205                <1> 	jb gooderrortype
  1536 00000EF5 BB[C4150000]        <1> 	mov ebx, errortypesend
  1537                              <1> gooderrortype:
  1538 00000EFA 8B33                <1> 	mov esi, [ebx]
  1539                              <1> %ifdef gui.included
  1540 00000EFC 803D[E49C0000]00    <1> 	cmp byte [guion], 0
  1541 00000F03 0F842D000000        <1> 	je near errortext
  1542 00000F09 668B0D[A0110000]    <1> 	mov cx, [locunhandy]
  1543 00000F10 668B15[A2110000]    <1> 	mov dx, [locunhandx]
  1544 00000F17 66B80100            <1> 	mov ax, 1
  1545 00000F1B 6631DB              <1> 	xor bx, bx
  1546 00000F1E E851600000          <1> 	call showstring2
  1547 00000F23 66890D[A0110000]    <1> 	mov [locunhandy], cx
  1548 00000F2A 668915[A2110000]    <1> 	mov [locunhandx], dx
  1549 00000F31 E905000000          <1> 	jmp errortextdone
  1550                              <1> %endif
  1551                              <1> errortext:
  1552 00000F36 E8E40D0000          <1> 	call print		;;get the error message and print it
  1553                              <1> errortextdone:
  1554 00000F3B 31C9                <1> 	xor ecx, ecx
  1555 00000F3D 8A0D[A6110000]      <1> 	mov cl, [intprob]
  1556 00000F43 E8E1010000          <1> 	call expdump
  1557                              <1> dumpstack:
  1558 00000F48 8B35[90110000]      <1> 	mov esi, [esploc]
  1559 00000F4E 39E6                <1> 	cmp esi, esp
  1560 00000F50 7216                <1> 	jb donedump
  1561 00000F52 368B0E              <1> 	mov ecx, [ss:esi]
  1562 00000F55 81EE04000000        <1> 	sub esi, 4
  1563 00000F5B 8935[90110000]      <1> 	mov [esploc], esi
  1564 00000F61 E8C3010000          <1> 	call expdump
  1565 00000F66 EBE0                <1> 	jmp dumpstack
  1566                              <1> donedump:
  1567 00000F68 0F20C1              <1> 	mov ecx, cr0
  1568 00000F6B E8B9010000          <1> 	call expdump
  1569 00000F70 0F20D1              <1> 	mov ecx, cr2
  1570 00000F73 E8B1010000          <1> 	call expdump
  1571 00000F78 0F20D9              <1> 	mov ecx, cr3
  1572 00000F7B E8A9010000          <1> 	call expdump
  1573 00000F80 0F20E1              <1> 	mov ecx, cr4
  1574 00000F83 E8A1010000          <1> 	call expdump
  1575 00000F88 0F00C9              <1> 	str ecx
  1576 00000F8B E899010000          <1> 	call expdump
  1577 00000F90 0F010D[AF110000]    <1> 	sidt [igdtcache]
  1578 00000F97 8B0D[B1110000]      <1> 	mov ecx, [igdtcache + 2]
  1579 00000F9D E887010000          <1> 	call expdump
  1580 00000FA2 0F0105[AF110000]    <1> 	sgdt [igdtcache]
  1581 00000FA9 8B0D[B1110000]      <1> 	mov ecx, [igdtcache + 2]
  1582 00000FAF E875010000          <1> 	call expdump
  1583 00000FB4 0F00C1              <1> 	sldt ecx
  1584 00000FB7 E86D010000          <1> 	call expdump
  1585 00000FBC 8B35[90110000]      <1> 	mov esi, [esploc]
  1586 00000FC2 368B7C2434          <1> 	mov edi, [ss:esp + 52]
  1587 00000FC7 81C710000000        <1> 	add edi, 16
  1588 00000FCD 893D[AB110000]      <1> 	mov [codelocend], edi
  1589 00000FD3 81EF20000000        <1> 	sub edi, 32
  1590                              <1> dumpcodeloop:
  1591 00000FD9 893D[A7110000]      <1> 	mov [codeloc], edi
  1592 00000FDF 8B0F                <1> 	mov ecx, [edi]
  1593 00000FE1 E843010000          <1> 	call expdump
  1594 00000FE6 8B3D[A7110000]      <1> 	mov edi, [codeloc]
  1595 00000FEC 81C704000000        <1> 	add edi, 4
  1596 00000FF2 3B3D[AB110000]      <1> 	cmp edi, [codelocend]
  1597 00000FF8 72DF                <1> 	jb dumpcodeloop
  1598 00000FFA BE[BA100000]        <1> 	mov esi, backtoosmsg
  1599                              <1> %ifdef gui.included
  1600 00000FFF 803D[E49C0000]00    <1> 	cmp byte [guion], 0
  1601 00001006 741F                <1> 	je backtomsg
  1602                              <1> guibacktomsg:
  1603 00001008 668B15[A2110000]    <1> 	mov dx, [locunhandx]
  1604 0000100F 668B0D[A0110000]    <1> 	mov cx, [locunhandy]
  1605 00001016 66B80100            <1> 	mov ax, 1
  1606 0000101A 6631DB              <1> 	xor bx, bx
  1607 0000101D E8525F0000          <1> 	call showstring2
  1608 00001022 E905000000          <1> 	jmp backtomsgdone
  1609                              <1> backtomsg:
  1610                              <1> %endif
  1611 00001027 E8F30C0000          <1> 	call print
  1612                              <1> backtomsgdone:
  1613 0000102C 30C0                <1> 	xor al, al
  1614 0000102E E8BF110000          <1> 	call rdcharint
  1615 00001033 803D[A6110000]03    <1> 	cmp byte [intprob], 3
  1616 0000103A 7541                <1> 	jne nodebugint
  1617                              <1> %ifdef gui.included
  1618 0000103C 803D[E49C0000]00    <1> 	cmp byte [guion], 0
  1619 00001043 7427                <1> 	je nodebuggui
  1620 00001045 668B1D[A4110000]    <1> 	mov bx, [backgroundcache]
  1621 0000104C 66891D[E8690000]    <1> 	mov [background], bx
  1622 00001053 6631DB              <1> 	xor bx, bx
  1623 00001056 C605[92550000]00    <1> 	mov byte [mousedisabled], 0
  1624 0000105D E848590000          <1> 	call guiclear
  1625 00001062 E885590000          <1> 	call reloadallgraphics
  1626 00001067 E851150000          <1> 	call termcopy
  1627                              <1> nodebuggui:
  1628                              <1> %endif
  1629 0000106C 8B35[94110000]      <1> 	mov esi, [espfirst]
  1630 00001072 89F4                <1> 	mov esp, esi
  1631 00001074 61                  <1> 	popad
  1632 00001075 17                  <1> 	pop ss
  1633 00001076 0FA9                <1> 	pop gs
  1634 00001078 0FA1                <1> 	pop fs
  1635 0000107A 07                  <1> 	pop es
  1636 0000107B 1F                  <1> 	pop ds
  1637 0000107C CF                  <1> 	iret
  1638                              <1> nodebugint:
  1639 0000107D 61                  <1> 	popad
  1640 0000107E 17                  <1> 	pop ss
  1641 0000107F 0FA9                <1> 	pop gs
  1642 00001081 0FA1                <1> 	pop fs
  1643 00001083 07                  <1> 	pop es
  1644 00001084 1F                  <1> 	pop ds
  1645                              <1> %ifdef gui.included
  1646 00001085 803D[E49C0000]00    <1> 	cmp byte [guion], 0
  1647 0000108C 7427                <1> 	je returnunhandgui
  1648 0000108E 668B1D[A4110000]    <1> 	mov bx, [backgroundcache]
  1649 00001095 66891D[E8690000]    <1> 	mov [background], bx
  1650 0000109C 6631DB              <1> 	xor bx, bx
  1651 0000109F C605[92550000]00    <1> 	mov byte [mousedisabled], 0
  1652 000010A6 E8FF580000          <1> 	call guiclear
  1653 000010AB E83C590000          <1> 	call reloadallgraphics
  1654 000010B0 E808150000          <1> 	call termcopy
  1655                              <1> %endif
  1656                              <1> returnunhandgui:
  1657 000010B5 E91F190000          <1> 	jmp nwcmd
  1658 000010BA 506C6561736520706F- <1> backtoosmsg db "Please post any problems in the Issues section at solleros.googlecode.com",10
  1659 000010C3 737420616E79207072- <1>
  1660 000010CC 6F626C656D7320696E- <1>
  1661 000010D5 207468652049737375- <1>
  1662 000010DE 65732073656374696F- <1>
  1663 000010E7 6E20617420736F6C6C- <1>
  1664 000010F0 65726F732E676F6F67- <1>
  1665 000010F9 6C65636F64652E636F- <1>
  1666 00001102 6D0A                <1>
  1667 00001104 507265737320616E79- <1> 			db "Press any key to return to SollerOS",10,0
  1668 0000110D 206B657920746F2072- <1>
  1669 00001116 657475726E20746F20- <1>
  1670 0000111F 536F6C6C65724F530A- <1>
  1671 00001128 00                  <1>
  1672                              <1> expdump:
  1673 00001129 8B35[98110000]      <1> 	mov esi, [esiloc]
  1674 0000112F 89F7                <1> 	mov edi, esi
  1675 00001131 81C70F000000        <1> 	add edi, 15
  1676 00001137 81C604000000        <1> 	add esi, 4
  1677 0000113D 893D[98110000]      <1> 	mov [esiloc], edi
  1678 00001143 81EF03000000        <1> 	sub edi, 3
  1679 00001149 E8F21C0000          <1> 	call converthex
  1680 0000114E 81EE04000000        <1> 	sub esi, 4
  1681                              <1> %ifdef gui.included
  1682 00001154 803D[E49C0000]00    <1> 	cmp byte [guion], 0
  1683 0000115B 0F8429000000        <1> 	je near expdumptext
  1684 00001161 668B0D[A0110000]    <1> 	mov cx, [locunhandy]
  1685 00001168 668B15[A2110000]    <1> 	mov dx, [locunhandx]
  1686 0000116F 66B80100            <1> 	mov ax, 1
  1687 00001173 6631DB              <1> 	xor bx, bx
  1688 00001176 E8F95D0000          <1> 	call showstring2
  1689 0000117B 66890D[A0110000]    <1> 	mov [locunhandy], cx
  1690 00001182 668915[A2110000]    <1> 	mov [locunhandx], dx
  1691 00001189 C3                  <1> 	ret
  1692                              <1> %endif
  1693                              <1> expdumptext:
  1694 0000118A E8900B0000          <1> 	call print
  1695 0000118F C3                  <1> 	ret
  1696 00001190 00000000            <1> esploc dd 0
  1697 00001194 00000000            <1> espfirst dd 0
  1698 00001198 00000000            <1> esiloc dd 0
  1699 0000119C 00000000            <1> esiregbuf dd 0
  1700 000011A0 0100                <1> locunhandy dw 1
  1701 000011A2 0100                <1> locunhandx dw 1
  1702 000011A4 0000                <1> backgroundcache dw 0
  1703 000011A6 00                  <1> intprob db 0
  1704 000011A7 00000000            <1> codeloc dd 0
  1705 000011AB 00000000            <1> codelocend dd 0
  1706 000011AF 000000000000        <1> igdtcache dw 0,0,0
  1707                              <1> 	unhandmsg:	
  1708 000011B5 494E543D3030303030- <1> 			db "INT=00000000",255,10,0
  1709 000011BE 303030FF0A00        <1>
  1710                              <1> unhndrg:
  1711 000011C4 FFFFFFFF3030303030- <1> 	times 7 db 255,255,255,255,"00000000  ",0	;;this dumps the stack before the stack frame in question
  1712 000011CD 303030202000<rept>  <1>
  1713 0000122D FFFFFFFF3030303030- <1> 			db 255,255,255,255,"00000000",255,10,0
  1714 00001236 303030FF0A00        <1>
  1715 0000123C FFFFFFFF3030303030- <1> 	times 7 db 255,255,255,255,"00000000  ",0	;;this dumps the stack before the stack frame in question
  1716 00001245 303030202000<rept>  <1>
  1717 000012A5 FFFFFFFF3030303030- <1> 			db 255,255,255,255,"00000000",255,10,0
  1718 000012AE 303030FF0A00        <1>
  1719 000012B4 FFFFFFFF3030303030- <1> 	times 7 db 255,255,255,255,"00000000  ",0	;;this dumps the stack before the stack frame in question
  1720 000012BD 303030202000<rept>  <1>
  1721 0000131D FFFFFFFF3030303030- <1> 			db 255,255,255,255,"00000000",255,10,0
  1722 00001326 303030FF0A00        <1>
  1723 0000132C FFFFFFFF3030303030- <1> 	times 7 db 255,255,255,255,"00000000  ",0	;;this dumps the stack before the stack frame in question
  1724 00001335 303030202000<rept>  <1>
  1725 00001395 FFFFFFFF3030303030- <1> 			db 255,255,255,255,"00000000",255,10,0
  1726 0000139E 303030FF0A00        <1>
  1727                              <1> unhandregs:
  1728 000013A4 45464C3D3030303030- <1> 			db "EFL=00000000  ",0
  1729 000013AD 303030202000        <1>
  1730 000013B3 43533A3D3030303030- <1> 			db "CS:=00000000  ",0
  1731 000013BC 303030202000        <1>
  1732 000013C2 4549503D3030303030- <1> 			db "EIP=00000000",255,10,0
  1733 000013CB 303030FF0A00        <1>
  1734 000013D1 44533A3D3030303030- <1> 			db "DS:=00000000  ",0
  1735 000013DA 303030202000        <1>
  1736 000013E0 45533A3D3030303030- <1> 			db "ES:=00000000  ",0
  1737 000013E9 303030202000        <1>
  1738 000013EF 46533A3D3030303030- <1> 			db "FS:=00000000  ",0
  1739 000013F8 303030202000        <1>
  1740 000013FE 47533A3D3030303030- <1> 			db "GS:=00000000  ",0
  1741 00001407 303030202000        <1>
  1742 0000140D 53533A3D3030303030- <1> 			db "SS:=00000000",255,10,0
  1743 00001416 303030FF0A00        <1>
  1744 0000141C 4541583D3030303030- <1> 			db "EAX=00000000  ",0
  1745 00001425 303030202000        <1>
  1746 0000142B 4543583D3030303030- <1> 			db "ECX=00000000  ",0
  1747 00001434 303030202000        <1>
  1748 0000143A 4544583D3030303030- <1> 			db "EDX=00000000  ",0
  1749 00001443 303030202000        <1>
  1750 00001449 4542583D3030303030- <1> 			db "EBX=00000000",255,10,0
  1751 00001452 303030FF0A00        <1>
  1752 00001458 4553503D3030303030- <1> 			db "ESP=00000000  ",0
  1753 00001461 303030202000        <1>
  1754 00001467 4542503D3030303030- <1> 			db "EBP=00000000  ",0
  1755 00001470 303030202000        <1>
  1756 00001476 4553493D3030303030- <1> 			db "ESI=00000000  ",0
  1757 0000147F 303030202000        <1>
  1758 00001485 4544493D3030303030- <1> unhndrgend:	db "EDI=00000000",255,10,0
  1759 0000148E 303030FF0A00        <1>
  1760 00001494 4352303D3030303030- <1> 			db "CR0=00000000  ",0
  1761 0000149D 303030202000        <1>
  1762 000014A3 4352323D3030303030- <1> 			db "CR2=00000000  ",0
  1763 000014AC 303030202000        <1>
  1764 000014B2 4352333D3030303030- <1> 			db "CR3=00000000  ",0
  1765 000014BB 303030202000        <1>
  1766 000014C1 4352343D3030303030- <1> 			db "CR4=00000000",255,10,0
  1767 000014CA 303030FF0A00        <1>
  1768 000014D0 54523A3D3030303030- <1> 			db "TR:=00000000  ",0
  1769 000014D9 303030202000        <1>
  1770 000014DF 4944543D3030303030- <1> 			db "IDT=00000000  ",0
  1771 000014E8 303030202000        <1>
  1772 000014EE 4744543D3030303030- <1> 			db "GDT=00000000  ",0
  1773 000014F7 303030202000        <1>
  1774 000014FD 4C44543D3030303030- <1> 			db "LDT=00000000",255,10,0
  1775 00001506 303030FF0A00        <1>
  1776 0000150C FFFFFFFF3030303030- <1> unhandcode: times 2 db 255,255,255,255,"00000000  ",0	;;this dumps the code before and after the interrupt in question
  1777 00001515 303030202000<rept>  <1>
  1778 0000152A FFFFFFFF3030303030- <1> 			db 255,255,255,255,"00000000 ",255,0
  1779 00001533 30303020FF00        <1>
  1780 00001539 FFFFFF5B3030303030- <1> 			db 255,255,255,"[00000000] ",0
  1781 00001542 3030305D2000        <1>
  1782 00001548 FFFFFFFF3030303030- <1> 			times 3 db 255,255,255,255,"00000000  ",0
  1783 00001551 303030202000<rept>  <1>
  1784 00001575 FFFFFFFF3030303030- <1> 			db 255,255,255,255,"00000000",255,10,0
  1785 0000157E 303030FF0A00        <1>
  1786                              <1> unhandmsgend:
  1787                              <1> 
  1788                              <1> errortypes:
  1789 00001584 [C8150000]          <1> 			dd err0
  1790 00001588 [2C160000]          <1> 			dd err1
  1791 0000158C [8D160000]          <1> 			dd err2
  1792 00001590 [E2160000]          <1> 			dd err3
  1793 00001594 [46170000]          <1> 			dd err4
  1794 00001598 [98170000]          <1> 			dd err5
  1795 0000159C [02180000]          <1> 			dd err6
  1796 000015A0 [6A180000]          <1> 			dd err7
  1797 000015A4 [B4180000]          <1> 			dd err8
  1798 000015A8 [11190000]          <1> 			dd err9
  1799 000015AC [6A190000]          <1> 			dd err10
  1800 000015B0 [B5190000]          <1> 			dd err11
  1801 000015B4 [051A0000]          <1> 			dd err12
  1802 000015B8 [5E1A0000]          <1> 			dd err13
  1803 000015BC [C11A0000]          <1> 			dd err14
  1804 000015C0 [FD1A0000]          <1> 			dd err15
  1805                              <1> errortypesend:
  1806 000015C4 [881B0000]          <1> 			dd unknownerror
  1807                              <1> 			
  1808 000015C8 4469766973696F6E20- <1> err0	db "Division by zero:",10
  1809 000015D1 6279207A65726F3A0A  <1>
  1810 000015DA 546563686E6963616C- <1> 		db "Technically lim a",246,"x = ",236," when a is any real number. Happy Easter!",10
  1811 000015E3 6C79206C696D2061F6- <1>
  1812 000015EC 78203D20EC20776865- <1>
  1813 000015F5 6E206120697320616E- <1>
  1814 000015FE 79207265616C206E75- <1>
  1815 00001607 6D6265722E20486170- <1>
  1816 00001610 707920456173746572- <1>
  1817 00001619 210A                <1>
  1818 0000161B 202020202020202020- <1> 		db "            x",26,"0",10,0
  1819 00001624 202020781A300A00    <1>
  1820                              <1> 		
  1821 0000162C 53696E676C652D7374- <1> err1	db "Single-step/Breakpoint:",10
  1822 00001635 65702F427265616B70- <1>
  1823 0000163E 6F696E743A0A        <1>
  1824 00001644 4120627265616B706F- <1> 		db "A breakpoint fault, breakpoint trap, or single-step trap was triggered.",10,0
  1825 0000164D 696E74206661756C74- <1>
  1826 00001656 2C20627265616B706F- <1>
  1827 0000165F 696E7420747261702C- <1>
  1828 00001668 206F722073696E676C- <1>
  1829 00001671 652D73746570207472- <1>
  1830 0000167A 617020776173207472- <1>
  1831 00001683 696767657265642E0A- <1>
  1832 0000168C 00                  <1>
  1833                              <1> 		
  1834 0000168D 4E6F6E6D61736B6162- <1> err2	db "Nonmaskable interrupt:",10
  1835 00001696 6C6520696E74657272- <1>
  1836 0000169F 7570743A0A          <1>
  1837 000016A4 412068617264776172- <1> 		db "A hardware interrupt was triggered that could not be masked.",10,0
  1838 000016AD 6520696E7465727275- <1>
  1839 000016B6 707420776173207472- <1>
  1840 000016BF 696767657265642074- <1>
  1841 000016C8 68617420636F756C64- <1>
  1842 000016D1 206E6F74206265206D- <1>
  1843 000016DA 61736B65642E0A00    <1>
  1844                              <1> 		
  1845 000016E2 427265616B706F696E- <1> err3	db "Breakpoint:",10
  1846 000016EB 743A0A              <1>
  1847 000016EE 5468697320696E7465- <1> 		db "This interrupt is used in programs to show the stack and registers and can be",10
  1848 000016F7 727275707420697320- <1>
  1849 00001700 7573656420696E2070- <1>
  1850 00001709 726F6772616D732074- <1>
  1851 00001712 6F2073686F77207468- <1>
  1852 0000171B 6520737461636B2061- <1>
  1853 00001724 6E6420726567697374- <1>
  1854 0000172D 65727320616E642063- <1>
  1855 00001736 616E2062650A        <1>
  1856 0000173C 69676E6F7265642E0A- <1> 		db "ignored.",10,0
  1857 00001745 00                  <1>
  1858                              <1> 		
  1859 00001746 4F766572666C6F773A- <1> err4	db "Overflow:",10
  1860 0000174F 0A                  <1>
  1861 00001750 5468652070726F6365- <1> 		db "The processor ran into an INTO instruction with the overflow flag set.",10,0
  1862 00001759 73736F722072616E20- <1>
  1863 00001762 696E746F20616E2049- <1>
  1864 0000176B 4E544F20696E737472- <1>
  1865 00001774 756374696F6E207769- <1>
  1866 0000177D 746820746865206F76- <1>
  1867 00001786 6572666C6F7720666C- <1>
  1868 0000178F 6167207365742E0A00  <1>
  1869                              <1> 		
  1870 00001798 426F756E6473206368- <1> err5	db "Bounds check:",10
  1871 000017A1 65636B3A0A          <1>
  1872 000017A6 5468652070726F6365- <1> 		db "The processor rebounded from a BOUND instruction run on an operand that was out",10
  1873 000017AF 73736F72207265626F- <1>
  1874 000017B8 756E6465642066726F- <1>
  1875 000017C1 6D206120424F554E44- <1>
  1876 000017CA 20696E737472756374- <1>
  1877 000017D3 696F6E2072756E206F- <1>
  1878 000017DC 6E20616E206F706572- <1>
  1879 000017E5 616E64207468617420- <1>
  1880 000017EE 776173206F75740A    <1>
  1881 000017F6 6F6620626F756E6473- <1> 		db "of bounds.",10,0
  1882 000017FF 2E0A00              <1>
  1883                              <1> 		
  1884 00001802 496E76616C6964206F- <1> err6	db "Invalid opcode:",10
  1885 0000180B 70636F64653A0A      <1>
  1886 00001812 5468652070726F6365- <1> 		db "The processor has no idea what it was trying to execute. Don't run SSE4 code",10
  1887 0000181B 73736F722068617320- <1>
  1888 00001824 6E6F20696465612077- <1>
  1889 0000182D 686174206974207761- <1>
  1890 00001836 7320747279696E6720- <1>
  1891 0000183F 746F20657865637574- <1>
  1892 00001848 652E20446F6E277420- <1>
  1893 00001851 72756E205353453420- <1>
  1894 0000185A 636F64650A          <1>
  1895 0000185F 6F6E20343836277321- <1> 		db "on 486's!",10,0
  1896 00001868 0A00                <1>
  1897                              <1> 		
  1898 0000186A 436F70726F63657373- <1> err7	db "Coprocessor not available:",10
  1899 00001873 6F72206E6F74206176- <1>
  1900 0000187C 61696C61626C653A0A  <1>
  1901 00001885 446F6E277420796F75- <1> 		db "Don't you know they don't make those anymore!",10,0
  1902 0000188E 206B6E6F7720746865- <1>
  1903 00001897 7920646F6E2774206D- <1>
  1904 000018A0 616B652074686F7365- <1>
  1905 000018A9 20616E796D6F726521- <1>
  1906 000018B2 0A00                <1>
  1907                              <1> 		
  1908 000018B4 446F75626C65206661- <1> err8	db "Double fault:",10
  1909 000018BD 756C743A0A          <1>
  1910 000018C2 546865206578636570- <1> 		db "The exception handler could not handle that it could not handle an exception.",10,0
  1911 000018CB 74696F6E2068616E64- <1>
  1912 000018D4 6C657220636F756C64- <1>
  1913 000018DD 206E6F742068616E64- <1>
  1914 000018E6 6C6520746861742069- <1>
  1915 000018EF 7420636F756C64206E- <1>
  1916 000018F8 6F742068616E646C65- <1>
  1917 00001901 20616E206578636570- <1>
  1918 0000190A 74696F6E2E0A00      <1>
  1919                              <1> 		
  1920 00001911 436F70726F63657373- <1> err9	db "Coprocessor segment overrun:",10,0
  1921 0000191A 6F72207365676D656E- <1>
  1922 00001923 74206F76657272756E- <1>
  1923 0000192C 3A0A00              <1>
  1924 0000192F 54686973206E657665- <1> 		db "This never happens in modern computers, and never should.",10,0
  1925 00001938 722068617070656E73- <1>
  1926 00001941 20696E206D6F646572- <1>
  1927 0000194A 6E20636F6D70757465- <1>
  1928 00001953 72732C20616E64206E- <1>
  1929 0000195C 657665722073686F75- <1>
  1930 00001965 6C642E0A00          <1>
  1931                              <1> 
  1932 0000196A 496E76616C69642054- <1> err10	db "Invalid TSS:",10
  1933 00001973 53533A0A            <1>
  1934 00001977 546865205453532074- <1> 		db "The TSS that was switched to is invalid. Nothing funny here.",10,0
  1935 00001980 686174207761732073- <1>
  1936 00001989 776974636865642074- <1>
  1937 00001992 6F20697320696E7661- <1>
  1938 0000199B 6C69642E204E6F7468- <1>
  1939 000019A4 696E672066756E6E79- <1>
  1940 000019AD 20686572652E0A00    <1>
  1941                              <1> 		
  1942 000019B5 5365676D656E74206E- <1> err11	db "Segment not present:",10
  1943 000019BE 6F742070726573656E- <1>
  1944 000019C7 743A0A              <1>
  1945 000019CA 546865207072657365- <1> 		db "The present bit of the segment descriptor is set to zero.",10,0
  1946 000019D3 6E7420626974206F66- <1>
  1947 000019DC 20746865207365676D- <1>
  1948 000019E5 656E74206465736372- <1>
  1949 000019EE 6970746F7220697320- <1>
  1950 000019F7 73657420746F207A65- <1>
  1951 00001A00 726F2E0A00          <1>
  1952                              <1> 		
  1953 00001A05 537461636B20657863- <1> err12	db "Stack exception:",10
  1954 00001A0E 657074696F6E3A0A    <1>
  1955 00001A16 546865205353206465- <1> 		db "The SS descriptor is invalid or not present or its limit is too small.",10,0
  1956 00001A1F 7363726970746F7220- <1>
  1957 00001A28 697320696E76616C69- <1>
  1958 00001A31 64206F72206E6F7420- <1>
  1959 00001A3A 70726573656E74206F- <1>
  1960 00001A43 7220697473206C696D- <1>
  1961 00001A4C 697420697320746F6F- <1>
  1962 00001A55 20736D616C6C2E0A00  <1>
  1963                              <1> 		
  1964 00001A5E 47656E6572616C2070- <1> err13	db "General protection violation:",10
  1965 00001A67 726F74656374696F6E- <1>
  1966 00001A70 2076696F6C6174696F- <1>
  1967 00001A79 6E3A0A              <1>
  1968 00001A7C 596F752076696F6C61- <1> 		db "You violated the computer. Step away slowly. The FBI is on its way.",10,0
  1969 00001A85 746564207468652063- <1>
  1970 00001A8E 6F6D70757465722E20- <1>
  1971 00001A97 537465702061776179- <1>
  1972 00001AA0 20736C6F776C792E20- <1>
  1973 00001AA9 546865204642492069- <1>
  1974 00001AB2 73206F6E2069747320- <1>
  1975 00001ABB 7761792E0A00        <1>
  1976                              <1> 		
  1977 00001AC1 50616765206661756C- <1> err14	db "Page fault:",10
  1978 00001ACA 743A0A              <1>
  1979 00001ACD 546865207061676520- <1> 		db "The page that was requested was not available.",10,0
  1980 00001AD6 746861742077617320- <1>
  1981 00001ADF 726571756573746564- <1>
  1982 00001AE8 20776173206E6F7420- <1>
  1983 00001AF1 617661696C61626C65- <1>
  1984 00001AFA 2E0A00              <1>
  1985                              <1> 		
  1986 00001AFD 526573657276656420- <1> err15	db "Reserved for Plan R:",10
  1987 00001B06 666F7220506C616E20- <1>
  1988 00001B0F 523A0A              <1>
  1989 00001B12 5468697320696E7465- <1> 		db "This interrupt is reserved for usage only by the military when it is necessary",10
  1990 00001B1B 727275707420697320- <1>
  1991 00001B24 726573657276656420- <1>
  1992 00001B2D 666F72207573616765- <1>
  1993 00001B36 206F6E6C7920627920- <1>
  1994 00001B3F 746865206D696C6974- <1>
  1995 00001B48 617279207768656E20- <1>
  1996 00001B51 6974206973206E6563- <1>
  1997 00001B5A 6573736172790A      <1>
  1998 00001B61 746F20696E69746961- <1> 		db "to initiate a full-scale coup d'",130,"tat.",10,0
  1999 00001B6A 746520612066756C6C- <1>
  2000 00001B73 2D7363616C6520636F- <1>
  2001 00001B7C 757020642782746174- <1>
  2002 00001B85 2E0A00              <1>
  2003                              <1> 		
  2004 00001B88 576861742074686520- <1> unknownerror db "What the hell just happened? Is everyone okay? Hard drive? Video card?",10
  2005 00001B91 68656C6C206A757374- <1>
  2006 00001B9A 2068617070656E6564- <1>
  2007 00001BA3 3F2049732065766572- <1>
  2008 00001BAC 796F6E65206F6B6179- <1>
  2009 00001BB5 3F2048617264206472- <1>
  2010 00001BBE 6976653F2056696465- <1>
  2011 00001BC7 6F20636172643F0A    <1>
  2012 00001BCF 4D656D6F72793F2041- <1> 			db	"Memory? Are you there?",10,0
  2013 00001BD8 726520796F75207468- <1>
  2014 00001BE1 6572653F0A00        <1>
  2015                              <1> %else
  2016                              <1> unhand:	
  2017                              <1> 	%assign i 0
  2018                              <1> 	%rep 32
  2019                              <1> 	mov byte [intprob], i
  2020                              <1> 	jmp unhand2
  2021                              <1> 	%assign i i+1
  2022                              <1> 	%endrep
  2023                              <1> unhand2:
  2024                              <1> 	cmp byte [intprob], 3
  2025                              <1> 	je handled	;if it is a debug interrupt, it is auto handled
  2026                              <1> 	mov ebx, 0xDEADCD00 ;this shows that an exception occured even though more detailed info cannot be shown
  2027                              <1> 						;CD stands for the interrupt code, DEAD shows that the program died because of the int
  2028                              <1> 	mov bl, [intprob]
  2029                              <1> 	jmp exitprog
  2030                              <1> intprob db 0
  2031                              <1> %endif
  2032                                      %include "source/ints.asm"
  2033                              <1> newints:	;for great justice
  2034 00001BE7 80FC00              <1> 	cmp ah, 0
  2035 00001BEA 0F847F000000        <1> 	je near intx0   ;kills app
  2036 00001BF0 80FC01              <1> 	cmp ah, 1
  2037 00001BF3 0F84FE000000        <1> 	je near intx1   ;print string
  2038 00001BF9 80FC02              <1> 	cmp ah, 2
  2039 00001BFC 0F8450010000        <1> 	je near intx2	;read string
  2040 00001C02 80FC03              <1> 	cmp ah, 3
  2041 00001C05 0F8470010000        <1> 	je near intx3	;clear screen
  2042 00001C0B 80FC04              <1> 	cmp ah, 4
  2043 00001C0E 0F84E5010000        <1> 	je near intx4	;read and print string
  2044 00001C14 80FC05              <1> 	cmp ah, 5
  2045 00001C17 0F84C9050000        <1> 	je near intx5	;get char
  2046 00001C1D 80FC06              <1> 	cmp ah, 6
  2047 00001C20 0F841B060000        <1> 	je near intx6	;print char
  2048 00001C26 80FC07              <1> 	cmp ah, 7
  2049 00001C29 0F8421080000        <1> 	je near intx7	;read file
  2050                              <1> ;	cmp ah, 8
  2051                              <1> ;	je near intx8	;write file
  2052 00001C2F 80FC09              <1> 	cmp ah, 9
  2053 00001C32 0F8422080000        <1> 	je near intx9	;convert number to string
  2054 00001C38 80FC0A              <1> 	cmp ah, 10
  2055 00001C3B 0F8431080000        <1> 	je near intx10	;convert string to number
  2056                              <1> %ifdef threads.included
  2057 00001C41 80FC0B              <1> 	cmp ah, 11
  2058 00001C44 0F8432080000        <1> 	je near intx11	;create thread
  2059                              <1> %endif
  2060 00001C4A 80FC0C              <1> 	cmp ah, 12
  2061 00001C4D 0F8400090000        <1> 	je near intx12	;get time
  2062 00001C53 80FC0D              <1> 	cmp ah, 13
  2063 00001C56 0F840C090000        <1> 	je near intx13	;set time
  2064 00001C5C 80FC0E              <1> 	cmp ah, 14
  2065 00001C5F 0F8413090000        <1> 	je near intx14	;run program
  2066 00001C65 80FC0F              <1> 	cmp ah, 15
  2067 00001C68 0F841F090000        <1> 	je near intx15	;get program info-location of name/options/number of options/environmental vars
  2068 00001C6E C3                  <1> 	ret
  2069                              <1> 	
  2070                              <1> ;;the jmp timerinterrupt's ensure that task switches occur
  2071                              <1> intx0:
  2072                              <1> 	%include 'source/interrupts/0_exit.asm'
  2073                              <2> exitprog:
  2074 00001C6F 66B83000            <2> 	mov ax, NEW_DATA_SEL
  2075 00001C73 8ED8                <2> 	mov ds, ax
  2076 00001C75 8EC0                <2> 	mov es, ax
  2077 00001C77 8EE0                <2> 	mov fs, ax
  2078 00001C79 66B82000            <2> 	mov ax, SYS_DATA_SEL
  2079 00001C7D 8EE8                <2> 	mov gs, ax
  2080 00001C7F C705[8B640000]0000- <2> 	mov dword [currentthread], 0
  2081 00001C87 0000                <2>
  2082 00001C89 C705[86640000]0400- <2> 	mov dword [lastthread], 4
  2083 00001C91 0000                <2>
  2084 00001C93 C605[8A640000]00    <2> 	mov byte [threadson], 0 ;for now i need to use this
  2085 00001C9A 8B25[2AB30000]      <2> 	mov esp, [previousstack] ;and this
  2086 00001CA0 81FB00000000        <2> 	cmp ebx, 0
  2087 00001CA6 0F8501000000        <2> 	jne near .error
  2088 00001CAC C3                  <2> 	ret
  2089                              <2> .error:
  2090 00001CAD 89D9                <2> 	mov ecx, ebx
  2091 00001CAF B006                <2> 	mov al, 6
  2092 00001CB1 A2[9E2E0000]        <2> 	mov [firsthexshown], al
  2093 00001CB6 51                  <2> 	push ecx
  2094 00001CB7 BE[D21C0000]        <2> 	mov esi, .msg1
  2095 00001CBC E840000000          <2> 	call printhighlight
  2096 00001CC1 59                  <2> 	pop ecx
  2097 00001CC2 E8EC110000          <2> 	call showhex
  2098 00001CC7 BE[E71C0000]        <2> 	mov esi, .msg2
  2099 00001CCC E830000000          <2> 	call printhighlight
  2100 00001CD1 C3                  <2> 	ret
  2101                              <2> 	
  2102 00001CD2 416E20657869742073- <2> .msg1 db "An exit status of 0x",0
  2103 00001CDB 7461747573206F6620- <2>
  2104 00001CE4 307800              <2>
  2105 00001CE7 087761732072657475- <2> .msg2 db 8,"was returned.",10,0
  2106 00001CF0 726E65642E0A00      <2>
  2107                              <1> intx1:
  2108                              <1> 	%include 'source/interrupts/1_prntstr.asm'
  2109 00001CF7 E82A000000          <2> call printint
  2110 00001CFC E9A4E5FFFF          <2> jmp timerinterrupt
  2111                              <2> 
  2112                              <2> 	printhighlight:
  2113 00001D01 6631C0              <2> 		xor ax, ax
  2114 00001D04 66BBF000            <2> 		mov bx, 0xF0
  2115 00001D08 E919000000          <2> 		jmp printint
  2116                              <2> 	printquiet:
  2117 00001D0D 6631C0              <2> 		xor ax, ax
  2118 00001D10 A2[511D0000]        <2> 		mov [endkeyprint], al
  2119 00001D15 66BB0700            <2> 		mov bx, 7
  2120 00001D19 E820000000          <2> 		call printint.b
  2121 00001D1E C3                  <2> 		ret
  2122                              <2>     print:
  2123 00001D1F 6631C0              <2> 		xor ax, ax
  2124 00001D22 66BB0700            <2> 		mov bx, 7
  2125                              <2> 	printint:	;;print line, al=last key,bl=modifier, esi=buffer
  2126 00001D26 56                  <2> 		push esi
  2127 00001D27 A2[511D0000]        <2> 		mov [endkeyprint], al
  2128 00001D2C E80D000000          <2> 		call .b
  2129 00001D31 89F1                <2> 		mov ecx, esi
  2130 00001D33 5F                  <2> 		pop edi
  2131 00001D34 29F9                <2> 		sub ecx, edi
  2132 00001D36 51                  <2> 		push ecx
  2133 00001D37 E881080000          <2> 		call termcopy
  2134 00001D3C 59                  <2> 		pop ecx
  2135 00001D3D C3                  <2> 		ret
  2136                              <2> 	.b:
  2137 00001D3E 8A06                <2> 		mov al, [esi]
  2138 00001D40 3A05[511D0000]      <2> 		cmp al, [endkeyprint]
  2139 00001D46 7408                <2> 		je .done
  2140 00001D48 E819050000          <2> 		call prcharq
  2141 00001D4D 46                  <2> 		inc esi
  2142 00001D4E EBEE                <2> 		jmp .b
  2143                              <2> 	.done:
  2144 00001D50 C3                  <2> 		ret
  2145                              <2> 
  2146 00001D51 00                  <2> endkeyprint db 0
  2147                              <1> intx2:
  2148                              <1> 	%include 'source/interrupts/2_readstr.asm'
  2149 00001D52 E805000000          <2> call readint
  2150 00001D57 E949E5FFFF          <2> jmp timerinterrupt
  2151                              <2> 
  2152                              <2> 	readint:	;;get line, al=last key, esi = buffer, edi = endbuffer	
  2153 00001D5C 89C3                <2> 		mov ebx, eax
  2154                              <2> 	.b:
  2155 00001D5E 53                  <2> 		push ebx
  2156 00001D5F 57                  <2> 		push edi
  2157 00001D60 56                  <2> 		push esi
  2158 00001D61 30C0                <2> 		xor al, al
  2159 00001D63 E88A040000          <2> 		call rdcharint
  2160 00001D68 5E                  <2> 		pop esi
  2161 00001D69 8806                <2> 		mov [esi], al
  2162 00001D6B 46                  <2> 		inc esi
  2163 00001D6C 5F                  <2> 		pop edi
  2164 00001D6D 5B                  <2> 		pop ebx
  2165 00001D6E 39FE                <2> 		cmp esi, edi
  2166 00001D70 7304                <2> 		jae .done
  2167 00001D72 38D8                <2> 		cmp al, bl
  2168 00001D74 75E8                <2> 		jne .b
  2169                              <2> 	.done:
  2170 00001D76 4E                  <2> 		dec esi
  2171 00001D77 C60600              <2> 		mov byte [esi], 0
  2172 00001D7A C3                  <2> 		ret
  2173                              <1> intx3:
  2174                              <1> 	%include 'source/interrupts/3_clearscrn.asm'
  2175 00001D7B E805000000          <2> call clear
  2176 00001D80 E920E5FFFF          <2> jmp timerinterrupt
  2177                              <2> %ifdef io.serial
  2178                              <2> clear:
  2179                              <2> 	ret
  2180                              <2> %else
  2181                              <2> clear:		
  2182 00001D85 668B0D[4C240000]    <2> 		mov cx, [charxy]
  2183 00001D8C BF[C0D00000]        <2> 		mov edi, videobuf
  2184 00001D91 6631C0              <2> 		xor ax, ax
  2185 00001D94 66A3[46240000]      <2> 		mov [linebeginpos], ax
  2186 00001D9A 66A3[48240000]      <2> 		mov [videobufpos], ax
  2187 00001DA0 6631D2              <2> 		xor dx, dx
  2188 00001DA3 66A3[4A240000]      <2> 		mov [charpos], ax
  2189 00001DA9 B407                <2> 		mov ah, 7
  2190                              <2> 	clearb:
  2191 00001DAB 668907              <2> 		mov [edi], ax
  2192 00001DAE 81C702000000        <2> 		add edi, 2
  2193 00001DB4 FEC9                <2> 		dec cl
  2194 00001DB6 80F900              <2> 		cmp cl, 0
  2195 00001DB9 75F0                <2> 		jne clearb
  2196 00001DBB 8A0D[4C240000]      <2> 		mov cl, [charxy]
  2197 00001DC1 FECD                <2> 		dec ch
  2198 00001DC3 80FD00              <2> 		cmp ch, 0
  2199 00001DC6 75E3                <2> 		jne clearb
  2200                              <2> 	cleardouble:
  2201 00001DC8 BF[643B0100]        <2> 		mov edi, videobuf2
  2202 00001DCD 668B0D[4C240000]    <2> 		mov cx, [charxy]
  2203 00001DD4 31C0                <2> 		xor eax, eax
  2204                              <2> 	clearc:
  2205 00001DD6 668907              <2> 		mov [edi], ax
  2206 00001DD9 81C702000000        <2> 		add edi, 2
  2207 00001DDF FEC9                <2> 		dec cl
  2208 00001DE1 80F900              <2> 		cmp cl, 0
  2209 00001DE4 75F0                <2> 		jne clearc
  2210 00001DE6 8A0D[4C240000]      <2> 		mov cl, [charxy]
  2211 00001DEC FECD                <2> 		dec ch
  2212 00001DEE 80FD00              <2> 		cmp ch, 0
  2213 00001DF1 75E3                <2> 		jne clearc
  2214 00001DF3 E8C5070000          <2> 		call termcopy
  2215 00001DF8 C3                  <2> 		ret
  2216                              <2> %endif
  2217                              <2> 		
  2218                              <1> intx4:
  2219                              <1> 	%include 'source/interrupts/4_prntreadstr.asm'
  2220 00001DF9 E809000000          <2> call rdprint
  2221 00001DFE E9A2E4FFFF          <2> jmp timerinterrupt
  2222                              <2> 
  2223                              <2> readline:
  2224 00001E03 B00A                <2>   mov al, 10
  2225 00001E05 B307                <2>   mov bl, 7
  2226                              <2> rdprint:	;;print and get line, al=last key, bl=modifier, esi=buffer, edi=bufferend
  2227 00001E07 E80D000000          <2> 	call rdprintdos
  2228 00001E0C 50                  <2> 	push eax
  2229 00001E0D A0[D3210000]        <2> 	mov al, [endkeyrdpr]
  2230 00001E12 E83E040000          <2> 	call prcharint
  2231 00001E17 58                  <2> 	pop eax
  2232 00001E18 C3                  <2> 	ret
  2233                              <2> 
  2234                              <2> 	rdprintdos:
  2235 00001E19 8935[DB210000]      <2> 		mov [buftxtloc], esi
  2236 00001E1F A2[D3210000]        <2> 		mov [endkeyrdpr], al
  2237 00001E24 881D[D4210000]      <2> 		mov [modkeyrdpr], bl
  2238 00001E2A 8935[D5210000]      <2> 		mov [firstesirdpr], esi
  2239 00001E30 893D[DF210000]      <2> 		mov [endbufferrdpr], edi
  2240 00001E36 8B3D[14A60100]      <2> 		mov edi, [commandsentered]
  2241 00001E3C 893D[10A60100]      <2> 		mov [commandlistentries], edi
  2242                              <2> 	rdprintb:
  2243 00001E42 56                  <2> 		push esi
  2244 00001E43 B001                <2> 		mov al, 1
  2245 00001E45 E8A8030000          <2> 		call rdcharint
  2246 00001E4A 5E                  <2> 		pop esi
  2247                              <2> %ifdef io.serial
  2248                              <2> 		cmp ah, 0x41
  2249                              <2> 		je near rdprup
  2250                              <2> 		cmp ah, 0x42
  2251                              <2> 		je near rdprdown
  2252                              <2> 		cmp ah, 0x43
  2253                              <2> 		je near rdprright
  2254                              <2> 		cmp ah, 0x44
  2255                              <2> 		je near rdprleft
  2256                              <2> 		cmp ah, 0x31
  2257                              <2> 		je near rdprhome
  2258                              <2> 		cmp ah, 0x48
  2259                              <2> 		je near rdprhome
  2260                              <2> 		cmp ah, 0x46
  2261                              <2> 		je near rdprend
  2262                              <2> 		cmp ah, 0x33
  2263                              <2> 		je near rdprdel
  2264                              <2> 		cmp ah, 0x34
  2265                              <2> 		je near rdprend
  2266                              <2> %else
  2267 00001E4B 803D[815B0000]E0    <2> 		cmp byte [specialkey], 0xE0
  2268 00001E52 751B                <2> 		jne notspecialrdprnt
  2269 00001E54 80FC53              <2> 		cmp ah, 0x53
  2270 00001E57 0F841E030000        <2> 		je near rdprdel
  2271 00001E5D 80FC47              <2> 		cmp ah, 0x47
  2272 00001E60 0F8407010000        <2> 		je near rdprhome
  2273 00001E66 80FC4F              <2> 		cmp ah, 0x4F
  2274 00001E69 0F841D010000        <2> 		je near rdprend
  2275                              <2> 	notspecialrdprnt:
  2276 00001E6F 80FC50              <2> 		cmp ah, 0x50
  2277 00001E72 0F849B010000        <2> 		je near rdprdown
  2278 00001E78 80FC4D              <2> 		cmp ah, 0x4D
  2279 00001E7B 0F844A010000        <2> 		je near rdprright
  2280 00001E81 80FC4B              <2> 		cmp ah, 0x4B
  2281 00001E84 0F841F010000        <2> 		je near rdprleft
  2282 00001E8A 80FC48              <2> 		cmp ah, 0x48
  2283 00001E8D 0F84C3010000        <2> 		je near rdprup
  2284                              <2> %endif
  2285 00001E93 3C08                <2> 		cmp al, 8
  2286 00001E95 0F84FB020000        <2> 		je near rdprbscheck
  2287 00001E9B 3C00                <2> 		cmp al, 0
  2288 00001E9D 74A3                <2> 		je rdprintb
  2289 00001E9F 80FC00              <2> 		cmp ah, 0
  2290 00001EA2 749E                <2> 		je rdprintb
  2291 00001EA4 8806                <2> 		mov [esi], al
  2292 00001EA6 46                  <2> 		inc esi
  2293                              <2> 	bscheckequal:
  2294 00001EA7 8A1D[D4210000]      <2> 		mov bl, [modkeyrdpr]
  2295 00001EAD 8A3D[DA210000]      <2> 		mov bh, [txtmask]
  2296 00001EB3 80FF00              <2> 		cmp bh, 0
  2297 00001EB6 7404                <2> 		je nomasktxt
  2298 00001EB8 88F8                <2> 		mov al, bh
  2299 00001EBA 30FF                <2> 		xor bh, bh
  2300                              <2> 	nomasktxt:
  2301 00001EBC 56                  <2> 		push esi
  2302 00001EBD 66A3[D1210000]      <2> 		mov [axcache], ax
  2303 00001EC3 8A25[D3210000]      <2> 		mov ah, [endkeyrdpr]
  2304 00001EC9 38E0                <2> 		cmp al, ah
  2305 00001ECB 742E                <2> 		je nobackprintbuftxt2
  2306 00001ECD E883030000          <2> 		call prcharint
  2307 00001ED2 BE[AAC50000]        <2> 		mov esi, buftxt2
  2308 00001ED7 E831FEFFFF          <2> 		call printquiet
  2309 00001EDC B020                <2> 		mov al, " "
  2310 00001EDE E883030000          <2> 		call prcharq
  2311 00001EE3 B008                <2> 		mov al, 8
  2312 00001EE5 81FE[AAC50000]      <2> 		cmp esi, buftxt2
  2313 00001EEB 740E                <2> 		je nobackprintbuftxt2
  2314                              <2> 	backprintbuftxt2:
  2315 00001EED E874030000          <2> 		call prcharq
  2316 00001EF2 4E                  <2> 		dec esi
  2317 00001EF3 81FE[AAC50000]      <2> 		cmp esi, buftxt2
  2318 00001EF9 77F2                <2> 		ja backprintbuftxt2
  2319                              <2> 	nobackprintbuftxt2:
  2320 00001EFB 3C0A                <2> 		cmp al, 10
  2321 00001EFD 7405                <2> 		je nonobackprint
  2322 00001EFF E851030000          <2> 		call prcharint
  2323                              <2> 	nonobackprint:
  2324 00001F04 5E                  <2> 		pop esi
  2325 00001F05 3B35[DF210000]      <2> 		cmp esi, [endbufferrdpr]
  2326 00001F0B 0F8319000000        <2> 		jae near donerdprinc
  2327 00001F11 66A1[D1210000]      <2> 		mov ax, [axcache]
  2328 00001F17 8A25[D3210000]      <2> 		mov ah, [endkeyrdpr]
  2329 00001F1D 38E0                <2> 		cmp al, ah
  2330 00001F1F 0F851DFFFFFF        <2> 		jne rdprintb
  2331 00001F25 E901000000          <2> 		jmp donerdprint
  2332                              <2> 	donerdprinc:
  2333 00001F2A 46                  <2> 		inc esi
  2334                              <2> 	donerdprint:
  2335 00001F2B 4E                  <2> 		dec esi
  2336 00001F2C BF[AAC50000]        <2> 		mov edi, buftxt2
  2337                              <2> 	copylaterstuff:
  2338 00001F31 8A07                <2> 		mov al, [edi]
  2339 00001F33 3C00                <2> 		cmp al, 0
  2340 00001F35 7406                <2> 		je nocopylaterstuff
  2341 00001F37 8806                <2> 		mov [esi], al
  2342 00001F39 47                  <2> 		inc edi
  2343 00001F3A 46                  <2> 		inc esi
  2344 00001F3B EBF4                <2> 		jmp copylaterstuff
  2345                              <2> 	nocopylaterstuff:
  2346 00001F3D C60600              <2> 		mov byte [esi], 0
  2347 00001F40 E80B000000          <2> 		call clearbuftxt2
  2348 00001F45 89F1                <2> 		mov ecx, esi
  2349 00001F47 8B3D[D5210000]      <2> 		mov edi, [firstesirdpr]
  2350 00001F4D 29F9                <2> 		sub ecx, edi
  2351 00001F4F C3                  <2> 		ret
  2352                              <2> 	
  2353                              <2> 	clearbuftxt2:
  2354 00001F50 30C0                <2> 		xor al, al
  2355 00001F52 BF[AAC50000]        <2> 		mov edi, buftxt2
  2356                              <2> 	clearbuftxt2lp:
  2357 00001F57 8807                <2> 		mov [edi], al
  2358 00001F59 47                  <2> 		inc edi
  2359 00001F5A 81FF[AAC90000]      <2> 		cmp edi, buftxt
  2360 00001F60 75F5                <2> 		jne clearbuftxt2lp
  2361 00001F62 C3                  <2> 		ret
  2362                              <2> 	
  2363                              <2> 	rdprintb2:
  2364 00001F63 E855060000          <2> 		call termcopy
  2365 00001F68 E9D5FEFFFF          <2> 		jmp rdprintb
  2366                              <2> 	
  2367                              <2> 	rdprhome:
  2368 00001F6D 3B35[DB210000]      <2> 		cmp esi, [buftxtloc]
  2369 00001F73 0F84EAFFFFFF        <2> 		je near rdprintb2
  2370 00001F79 BF[AAC50000]        <2> 		mov edi, buftxt2
  2371 00001F7E 8A07                <2> 		mov al, [edi]
  2372 00001F80 E82F020000          <2> 		call shiftbuftxt2
  2373 00001F85 E8DC020000          <2> 		call prcharq
  2374 00001F8A EBE1                <2> 		jmp rdprhome
  2375                              <2> 		
  2376                              <2> 	rdprend:
  2377 00001F8C BF[AAC50000]        <2> 		mov edi, buftxt2
  2378 00001F91 8A07                <2> 		mov al, [edi]
  2379 00001F93 3C00                <2> 		cmp al, 0
  2380 00001F95 0F84C8FFFFFF        <2> 		je near rdprintb2
  2381 00001F9B 8806                <2> 		mov [esi], al
  2382 00001F9D E849000000          <2> 		call shiftbuftxt2lft
  2383 00001FA2 E8BF020000          <2> 		call prcharq
  2384 00001FA7 EBE3                <2> 		jmp rdprend
  2385                              <2> 	
  2386                              <2> 	rdprleft:
  2387 00001FA9 3B35[DB210000]      <2> 		cmp esi, [buftxtloc]
  2388 00001FAF 0F848DFEFFFF        <2> 		je near rdprintb
  2389 00001FB5 BF[AAC50000]        <2> 		mov edi, buftxt2
  2390 00001FBA 8A07                <2> 		mov al, [edi]
  2391 00001FBC E8F3010000          <2> 		call shiftbuftxt2
  2392 00001FC1 E88F020000          <2> 		call prcharint
  2393 00001FC6 E977FEFFFF          <2> 		jmp rdprintb
  2394                              <2> 		
  2395                              <2> 	rdprright:
  2396 00001FCB BF[AAC50000]        <2> 		mov edi, buftxt2
  2397 00001FD0 8A07                <2> 		mov al, [edi]
  2398 00001FD2 3C00                <2> 		cmp al, 0
  2399 00001FD4 0F8468FEFFFF        <2> 		je near rdprintb
  2400 00001FDA 8806                <2> 		mov [esi], al
  2401 00001FDC E80A000000          <2> 		call shiftbuftxt2lft
  2402 00001FE1 E86F020000          <2> 		call prcharint
  2403 00001FE6 E957FEFFFF          <2> 		jmp rdprintb
  2404                              <2> 	shiftbuftxt2lft:
  2405 00001FEB 3C00                <2> 		cmp al, 0
  2406 00001FED 7408                <2> 		je noshiftbuftxt2lft
  2407 00001FEF 47                  <2> 		inc edi
  2408 00001FF0 8A07                <2> 		mov al, [edi]
  2409 00001FF2 8847FF              <2> 		mov [edi - 1], al
  2410 00001FF5 EBF4                <2> 		jmp shiftbuftxt2lft
  2411                              <2> 	noshiftbuftxt2lft:
  2412 00001FF7 8A06                <2> 		mov al, [esi]
  2413 00001FF9 46                  <2> 		inc esi
  2414 00001FFA 8A1D[D4210000]      <2> 		mov bl, [modkeyrdpr]
  2415 00002000 C3                  <2> 		ret
  2416                              <2> 		
  2417                              <2> 	rdprdownbck:
  2418 00002001 FECC                <2> 		dec ah
  2419 00002003 8825[D9210000]      <2> 		mov [commandedit], ah
  2420 00002009 E88D000000          <2> 		call rdprbckspc
  2421 0000200E E92FFEFFFF          <2> 		jmp rdprintb
  2422                              <2> 	
  2423                              <2> 	rdprdown:
  2424 00002013 8A25[D9210000]      <2> 		mov ah, [commandedit]
  2425 00002019 80FC01              <2> 		cmp ah, 1
  2426 0000201C 0F8620FEFFFF        <2> 		jbe near rdprintb
  2427 00002022 8B3D[14A60100]      <2> 		mov edi, [commandsentered]
  2428 00002028 3B3D[10A60100]      <2> 		cmp edi, [commandlistentries]
  2429 0000202E 7618                <2> 		jbe .nofix
  2430 00002030 8105[10A60100]0200- <2> 		add dword [commandlistentries], 2
  2431 00002038 0000                <2>
  2432 0000203A 3B3D[10A60100]      <2> 		cmp edi, [commandlistentries]
  2433 00002040 7706                <2> 		ja .nofix
  2434 00002042 893D[10A60100]      <2> 		mov [commandlistentries], edi
  2435                              <2> 	.nofix:
  2436 00002048 80FC02              <2> 		cmp ah, 2
  2437 0000204B 74B4                <2> 		je rdprdownbck
  2438 0000204D 80EC02              <2> 		sub ah, 2
  2439 00002050 8825[D9210000]      <2> 		mov [commandedit], ah
  2440                              <2> 		
  2441                              <2> 	rdprup:
  2442 00002056 3805[D9210000]      <2> 		cmp [commandedit], al
  2443 0000205C 0F84E0FDFFFF        <2> 		je near rdprintb
  2444 00002062 813D[10A60100]0000- <2> 		cmp dword [commandlistentries], 0
  2445 0000206A 0000                <2>
  2446 0000206C 0F84D0FDFFFF        <2> 		je near rdprintb
  2447 00002072 FF0D[10A60100]      <2> 		dec dword [commandlistentries]
  2448                              <2> 	.lp:
  2449 00002078 BF[AAC50000]        <2> 		mov edi, buftxt2
  2450 0000207D 8A07                <2> 		mov al, [edi]
  2451 0000207F 3C00                <2> 		cmp al, 0
  2452 00002081 740E                <2> 		je .start
  2453 00002083 8806                <2> 		mov [esi], al
  2454 00002085 E861FFFFFF          <2> 		call shiftbuftxt2lft
  2455 0000208A E8D7010000          <2> 		call prcharq
  2456 0000208F EBE7                <2> 		jmp .lp
  2457                              <2> 	.start:
  2458 00002091 E805000000          <2> 		call rdprbckspc
  2459 00002096 E941000000          <2> 		jmp getcurrentcommandstr
  2460                              <2> 	rdprbckspc:
  2461 0000209B 3B35[DB210000]      <2> 		cmp esi, [buftxtloc]
  2462 000020A1 742B                <2> 		je nordprupbck
  2463                              <2> 	rdprupbckspclp:
  2464 000020A3 B008                <2> 		mov al, 8
  2465 000020A5 8A1D[D4210000]      <2> 		mov bl, [modkeyrdpr]
  2466 000020AB E8B6010000          <2> 		call prcharq
  2467 000020B0 B020                <2> 		mov al, ' '
  2468 000020B2 E8AF010000          <2> 		call prcharq
  2469 000020B7 B008                <2> 		mov al, 8
  2470 000020B9 E8A8010000          <2> 		call prcharq
  2471 000020BE 4E                  <2> 		dec esi
  2472 000020BF 3B35[DB210000]      <2> 		cmp esi, [buftxtloc]
  2473 000020C5 7402                <2> 		je nordprupbck2
  2474 000020C7 EBDA                <2> 		jmp rdprupbckspclp
  2475                              <2> 	nordprupbck2:
  2476 000020C9 E8EF040000          <2> 		call termcopy
  2477                              <2> 	nordprupbck:
  2478 000020CE 8B3D[0CA60100]      <2> 		mov edi, [commandbufpos]
  2479 000020D4 81C7[18A60100]      <2> 		add edi, commandbuf
  2480 000020DA 4F                  <2> 		dec edi
  2481 000020DB C3                  <2> 		ret
  2482                              <2> 	getcurrentcommandstr:
  2483 000020DC 8A25[D9210000]      <2> 		mov ah, [commandedit]
  2484 000020E2 FE05[D9210000]      <2> 		inc byte [commandedit]
  2485                              <2> 	getccmdlp:
  2486 000020E8 4F                  <2> 		dec edi
  2487 000020E9 8A07                <2> 		mov al, [edi]
  2488 000020EB 81FF[18A60100]      <2> 		cmp edi, commandbuf
  2489 000020F1 7231                <2> 		jb getcmdresetcommandbuf
  2490 000020F3 81EF[18A60100]      <2> 		sub edi, commandbuf
  2491 000020F9 3B3D[0CA60100]      <2> 		cmp edi, [commandbufpos]
  2492 000020FF 0F843DFDFFFF        <2> 		je near rdprintb
  2493 00002105 81C7[18A60100]      <2> 		add edi, commandbuf
  2494 0000210B 3C00                <2> 		cmp al, 0
  2495 0000210D 75D9                <2> 		jne getccmdlp
  2496 0000210F FECC                <2> 		dec ah
  2497 00002111 80FC00              <2> 		cmp ah, 0
  2498 00002114 77D2                <2> 		ja getccmdlp
  2499 00002116 47                  <2> 		inc edi
  2500 00002117 81FF[18B60100]      <2> 		cmp edi, commandbufend
  2501 0000211D 770D                <2> 		ja fixcmdbufb4morerdpr
  2502 0000211F E915000000          <2> 		jmp morerdprup
  2503                              <2> 	getcmdresetcommandbuf:
  2504 00002124 BF[18B60100]        <2> 		mov edi, commandbufend
  2505 00002129 47                  <2> 		inc edi
  2506 0000212A EBBC                <2> 		jmp getccmdlp
  2507                              <2> 	fixcmdbufb4morerdpr:
  2508 0000212C 4F                  <2> 		dec edi
  2509 0000212D 81EF[18B60100]      <2> 		sub edi, commandbufend
  2510 00002133 81C7[18A60100]      <2> 		add edi, commandbuf
  2511                              <2> 	morerdprup:
  2512 00002139 8A07                <2> 		mov al, [edi]
  2513 0000213B 47                  <2> 		inc edi
  2514 0000213C 81EF[18A60100]      <2> 		sub edi, commandbuf
  2515 00002142 3C00                <2> 		cmp al, 0
  2516 00002144 0F8419FEFFFF        <2> 		je near rdprintb2
  2517 0000214A 3B3D[0CA60100]      <2> 		cmp edi, [commandbufpos]
  2518 00002150 0F830DFEFFFF        <2> 		jae near rdprintb2
  2519 00002156 81C7[18A60100]      <2> 		add edi, commandbuf
  2520 0000215C 8806                <2> 		mov [esi], al
  2521 0000215E 46                  <2> 		inc esi
  2522 0000215F 57                  <2> 		push edi
  2523 00002160 8A1D[D4210000]      <2> 		mov bl, [modkeyrdpr]
  2524 00002166 E8FB000000          <2> 		call prcharq
  2525 0000216B 5F                  <2> 		pop edi
  2526 0000216C 81FF[18B60100]      <2> 		cmp edi, commandbufend
  2527 00002172 76C5                <2> 		jbe morerdprup
  2528 00002174 BF[18A60100]        <2> 		mov edi, commandbuf
  2529 00002179 EBBE                <2> 		jmp morerdprup
  2530                              <2> 		
  2531                              <2> 	rdprdel:
  2532 0000217B BF[AAC50000]        <2> 		mov edi, buftxt2
  2533 00002180 8A07                <2> 		mov al, [edi]
  2534 00002182 3C00                <2> 		cmp al, 0
  2535 00002184 0F84B8FCFFFF        <2> 		je near rdprintb
  2536 0000218A 8806                <2> 		mov [esi], al
  2537 0000218C E85AFEFFFF          <2> 		call shiftbuftxt2lft
  2538 00002191 E8D0000000          <2> 		call prcharq
  2539                              <2> 		
  2540                              <2> 	rdprbscheck:
  2541 00002196 3B35[D5210000]      <2> 		cmp esi, [firstesirdpr]
  2542 0000219C 7705                <2> 		ja goodbscheck
  2543 0000219E E99FFCFFFF          <2> 		jmp rdprintb
  2544                              <2> 	goodbscheck:
  2545 000021A3 4E                  <2> 		dec esi
  2546 000021A4 C60600              <2> 		mov byte [esi], 0
  2547 000021A7 8A1D[D4210000]      <2> 		mov bl, [modkeyrdpr]
  2548 000021AD B008                <2> 		mov al, 8
  2549 000021AF E9F3FCFFFF          <2> 		jmp bscheckequal
  2550                              <2> 		
  2551                              <2> 	shiftbuftxt2:
  2552 000021B4 3C00                <2> 		cmp al, 0
  2553 000021B6 7409                <2> 		je noshiftbuftxt2
  2554 000021B8 47                  <2> 		inc edi
  2555 000021B9 8A27                <2> 		mov ah, [edi]
  2556 000021BB 8807                <2> 		mov [edi], al
  2557 000021BD 88E0                <2> 		mov al, ah
  2558 000021BF EBF3                <2> 		jmp shiftbuftxt2
  2559                              <2> 	noshiftbuftxt2:
  2560 000021C1 BF[AAC50000]        <2> 		mov edi, buftxt2
  2561 000021C6 4E                  <2> 		dec esi
  2562 000021C7 8A06                <2> 		mov al, [esi]
  2563 000021C9 8807                <2> 		mov [edi], al
  2564 000021CB C60600              <2> 		mov byte [esi], 0
  2565 000021CE B008                <2> 		mov al, 8
  2566 000021D0 C3                  <2> 		ret
  2567                              <2> 		
  2568 000021D1 0000                <2> axcache dw 0
  2569 000021D3 00                  <2> endkeyrdpr db 0
  2570 000021D4 00                  <2> modkeyrdpr db 0
  2571 000021D5 00000000            <2> firstesirdpr dd 0
  2572 000021D9 00                  <2> commandedit db 0
  2573 000021DA 00                  <2> txtmask db 0
  2574 000021DB 00000000            <2> buftxtloc dd 0
  2575 000021DF 00000000            <2> endbufferrdpr dd 0
  2576 000021E3 082000              <2> backcursor db 8," ",0
  2577                              <1> intx5:
  2578                              <1> 	%include 'source/interrupts/5_readchar.asm'
  2579 000021E6 E807000000          <2> 	call rdcharint
  2580 000021EB E9B5E0FFFF          <2> 	jmp timerinterrupt
  2581                              <2> getchar:
  2582 000021F0 30C0                <2> 	xor al, al
  2583                              <2> 	rdcharint:		;;get char, if al is 0, wait for key
  2584 000021F2 C605[40220000]01    <2> 		mov byte [trans], 1
  2585 000021F9 3C00                <2> 		cmp al, 0
  2586 000021FB 7507                <2> 		jne transcheck
  2587 000021FD C605[40220000]00    <2> 		mov byte [trans], 0
  2588                              <2> 	transcheck:
  2589                              <2> 	%ifdef io.serial
  2590                              <2> 		call serial.receive
  2591                              <2> 		cmp al, 13
  2592                              <2> 		je rdenter
  2593                              <2> 	%else
  2594 00002204 E898390000          <2> 		call getkey
  2595 00002209 66A1[3E220000]      <2> 		mov ax, [lastkey]
  2596 0000220F 80FC1C              <2> 		cmp ah, 0x1C
  2597 00002212 741F                <2> 		je rdenter
  2598                              <2> 	%endif
  2599 00002214 8A3D[40220000]      <2> 		mov bh, [trans]
  2600 0000221A 803D[815B0000]E0    <2> 		cmp byte [specialkey], 0xE0
  2601 00002221 7504                <2> 		jne nospecialtrans
  2602 00002223 88C3                <2> 		mov bl, al
  2603 00002225 30C0                <2> 		xor al, al
  2604                              <2> 	nospecialtrans:
  2605 00002227 08C7                <2> 		or bh, al
  2606 00002229 80FF00              <2> 		cmp bh, 0
  2607 0000222C 74D6                <2> 		je transcheck
  2608 0000222E E90A000000          <2> 		jmp rdend
  2609                              <2> 	rdenter:
  2610 00002233 B41C                <2> 		mov ah, 0x1C
  2611 00002235 B00A                <2> 		mov al, 10
  2612 00002237 66A3[3E220000]      <2> 		mov [lastkey], ax
  2613                              <2> 	rdend:
  2614 0000223D C3                  <2> 		ret
  2615                              <2> 		
  2616 0000223E 0000                <2> lastkey db 0,0
  2617 00002240 00                  <2> trans db 0
  2618                              <1> intx6:
  2619                              <1> 	%include 'source/interrupts/6_prntchar.asm'
  2620                              <2> %ifdef io.serial
  2621                              <2> 	cmp bl, bh
  2622                              <2> 	call prcharint
  2623                              <2> 	jmp timerinterrupt
  2624                              <2> prcharint:	
  2625                              <2> prcharq:
  2626                              <2> 	call serial.send
  2627                              <2> 	ret
  2628                              <2> %else
  2629 00002241 38FB                <2> cmp bl, bh
  2630 00002243 740A                <2> je prchar.notimer
  2631 00002245 E80B000000          <2> call prcharint
  2632 0000224A E956E0FFFF          <2> jmp timerinterrupt
  2633                              <2> prchar.notimer:
  2634 0000224F E812000000          <2> 	call prcharq
  2635 00002254 CF                  <2> 	iret
  2636                              <2> 	
  2637                              <2> prcharint:	;;print char, char in al, modifier in bl, if bh = bl then termcopy will not happen, will run termcopy if called as is
  2638 00002255 38FB                <2> 	cmp bl, bh
  2639 00002257 740D                <2> 	je prcharq
  2640 00002259 E808000000          <2> 	call prcharq
  2641 0000225E E85A030000          <2> 	call termcopy
  2642 00002263 C3                  <2> 	ret
  2643 00002264 00                  <2> termguion db 0
  2644 00002265 00                  <2> termcopyon db 0
  2645                              <2> prcharq:
  2646 00002266 88DC                <2> 	mov ah, bl
  2647 00002268 66A3[4E240000]      <2> 	mov [charbuf], ax
  2648 0000226E 31DB                <2> 	xor ebx, ebx
  2649 00002270 668B1D[48240000]    <2> 	mov bx, [videobufpos]
  2650 00002277 BF[C0D00000]        <2> 	mov edi, videobuf
  2651 0000227C 01DF                <2> 	add edi, ebx
  2652 0000227E 66A1[C8250000]      <2> 	mov ax, [removedvideo]
  2653 00002284 668907              <2> 	mov [edi], ax
  2654 00002287 66A1[4E240000]      <2> 	mov ax, [charbuf]
  2655 0000228D 31D2                <2> 	xor edx, edx
  2656 0000228F 668B15[4A240000]    <2> 	mov dx, [charpos]
  2657 00002296 31C9                <2> 	xor ecx, ecx
  2658 00002298 668B0D[4C240000]    <2> 	mov cx, [charxy]
  2659 0000229F 3C09                <2> 	cmp al, 9
  2660 000022A1 0F8463000000        <2> 	je near prtab
  2661 000022A7 3C0D                <2> 	cmp al, 13		;I am phasing this out-it is used by windows but not unix based systems
  2662 000022A9 0F848B000000        <2> 	je near prcr
  2663 000022AF 3C0A                <2> 	cmp al, 10
  2664 000022B1 0F84DB000000        <2> 	je near prnlcr
  2665 000022B7 3C08                <2> 	cmp al, 8
  2666 000022B9 0F848F000000        <2> 	je near prbs
  2667 000022BF 3CFF                <2> 	cmp al, 255		;;null character
  2668 000022C1 0F841B000000        <2> 	je near donescr
  2669 000022C7 668907              <2> 	mov [edi], ax
  2670 000022CA 81C702000000        <2> 	add edi, 2
  2671 000022D0 FEC2                <2> 	inc dl
  2672                              <2> donecrnl:
  2673 000022D2 38CA                <2> 	cmp dl, cl
  2674 000022D4 0F83DD000000        <2> 	jae near preol
  2675                              <2> doneeol:
  2676 000022DA 38EE                <2> 	cmp dh, ch
  2677 000022DC 0F83F3000000        <2> 	jae near prscr	
  2678                              <2> donescr:
  2679 000022E2 89FB                <2> 	mov ebx, edi
  2680 000022E4 668B07              <2> 	mov ax, [edi]
  2681 000022E7 66A3[C8250000]      <2> 	mov [removedvideo], ax
  2682 000022ED 81EB[C0D00000]      <2> 	sub ebx, videobuf
  2683 000022F3 66891D[48240000]    <2> 	mov [videobufpos], bx
  2684 000022FA 668915[4A240000]    <2> 	mov [charpos], dx
  2685 00002301 66A1[4E240000]      <2> 	mov ax, [charbuf]
  2686 00002307 88E3                <2> 	mov bl, ah
  2687 00002309 C3                  <2> 	ret
  2688                              <2> 	
  2689                              <2> 	prtab:
  2690 0000230A 31DB                <2> 		xor ebx, ebx
  2691 0000230C 668B1D[46240000]    <2> 		mov bx, [linebeginpos]
  2692 00002313 81EF[C0D00000]      <2> 		sub edi, videobuf
  2693 00002319 29DF                <2> 		sub edi, ebx
  2694 0000231B C1EF04              <2> 		shr edi, 4
  2695 0000231E C1E704              <2> 		shl edi, 4
  2696 00002321 81C710000000        <2> 		add edi, 16
  2697 00002327 C0EA03              <2> 		shr dl, 3
  2698 0000232A C0E203              <2> 		shl dl, 3
  2699 0000232D 80C208              <2> 		add dl, 8
  2700 00002330 81C7[C0D00000]      <2> 		add edi, videobuf
  2701 00002336 01DF                <2> 		add edi, ebx
  2702 00002338 EB98                <2> 		jmp donecrnl
  2703                              <2> 	
  2704                              <2> 	prcr:
  2705 0000233A 30D2                <2> 		xor dl, dl
  2706 0000233C 31DB                <2> 		xor ebx, ebx
  2707 0000233E BF[C0D00000]        <2> 		mov edi, videobuf
  2708 00002343 668B1D[46240000]    <2> 		mov bx, [linebeginpos]
  2709 0000234A 01DF                <2> 		add edi, ebx
  2710 0000234C EB84                <2> 		jmp donecrnl
  2711                              <2> 			
  2712                              <2> 	prbs:
  2713 0000234E 668B1D[46240000]    <2> 		mov bx, [linebeginpos]
  2714 00002355 80FA00              <2> 		cmp dl, 0
  2715 00002358 7417                <2> 		je prbackline
  2716                              <2> 	prnobmr:
  2717 0000235A 66891D[46240000]    <2> 		mov [linebeginpos], bx
  2718 00002361 FECA                <2> 		dec dl
  2719 00002363 6631C0              <2> 		xor ax, ax
  2720 00002366 81EF02000000        <2> 		sub edi, 2
  2721 0000236C E961FFFFFF          <2> 		jmp donecrnl
  2722                              <2> 	prbackline:
  2723 00002371 6631DB              <2> 		xor bx, bx
  2724 00002374 88CA                <2> 		mov dl, cl
  2725 00002376 80FE00              <2> 		cmp dh, 0
  2726 00002379 74DF                <2> 		je prnobmr
  2727 0000237B 668B1D[46240000]    <2> 		mov bx, [linebeginpos]
  2728 00002382 6651                <2> 		push cx
  2729 00002384 30ED                <2> 		xor ch, ch
  2730 00002386 6629CB              <2> 		sub bx, cx
  2731 00002389 6629CB              <2> 		sub bx, cx
  2732 0000238C 6659                <2> 		pop cx
  2733 0000238E FECE                <2> 		dec dh
  2734 00002390 EBC8                <2> 		jmp prnobmr
  2735                              <2> 		
  2736                              <2> 	prnlcr:
  2737 00002392 FEC6                <2> 		inc dh
  2738 00002394 31DB                <2> 		xor ebx, ebx
  2739 00002396 30D2                <2> 		xor dl, dl
  2740 00002398 88CB                <2> 		mov bl, cl
  2741 0000239A 66D1E3              <2> 		shl bx, 1
  2742 0000239D BF[C0D00000]        <2> 		mov edi, videobuf
  2743 000023A2 66031D[46240000]    <2> 		add bx, [linebeginpos]
  2744 000023A9 66891D[46240000]    <2> 		mov [linebeginpos], bx
  2745 000023B0 01DF                <2> 		add edi, ebx
  2746 000023B2 E91BFFFFFF          <2> 		jmp donecrnl
  2747                              <2> 		
  2748                              <2> 	preol:
  2749 000023B7 30D2                <2> 		xor dl, dl
  2750 000023B9 FEC6                <2> 		inc dh
  2751 000023BB 31DB                <2> 		xor ebx, ebx
  2752 000023BD 88CB                <2> 		mov bl, cl
  2753 000023BF 66D1E3              <2> 		shl bx, 1
  2754 000023C2 66031D[46240000]    <2> 		add bx, [linebeginpos]
  2755 000023C9 66891D[46240000]    <2> 		mov [linebeginpos], bx
  2756 000023D0 E905FFFFFF          <2> 		jmp doneeol
  2757                              <2> 	prscr:
  2758 000023D5 FECE                <2> 		dec dh
  2759 000023D7 BF[C0D00000]        <2> 		mov edi, videobuf
  2760 000023DC 31DB                <2> 		xor ebx, ebx
  2761 000023DE 88CB                <2> 		mov bl, cl
  2762 000023E0 66D1E3              <2> 		shl bx, 1
  2763 000023E3 01FB                <2> 		add ebx, edi
  2764                              <2> 	intscrollloop:
  2765 000023E5 668B03              <2> 		mov ax, [ebx]
  2766 000023E8 668907              <2> 		mov [edi], ax
  2767 000023EB 81C702000000        <2> 		add edi, 2
  2768 000023F1 81C302000000        <2> 		add ebx, 2
  2769 000023F7 FEC9                <2> 		dec cl
  2770 000023F9 80F900              <2> 		cmp cl, 0
  2771 000023FC 75E7                <2> 		jne intscrollloop
  2772 000023FE 8A0D[4C240000]      <2> 		mov cl, [charxy]
  2773 00002404 FECD                <2> 		dec ch
  2774 00002406 80FD01              <2> 		cmp ch, 1
  2775 00002409 77DA                <2> 		ja intscrollloop
  2776 0000240B 6631C0              <2> 		xor ax, ax
  2777 0000240E 81EF[C0D00000]      <2> 		sub edi, videobuf
  2778 00002414 66893D[46240000]    <2> 		mov [linebeginpos], di
  2779 0000241B 81C7[C0D00000]      <2> 		add edi, videobuf
  2780 00002421 89FB                <2> 		mov ebx, edi
  2781                              <2> 	intloopclear:
  2782 00002423 668903              <2> 		mov [ebx], ax
  2783 00002426 81C302000000        <2> 		add ebx, 2
  2784 0000242C FEC9                <2> 		dec cl
  2785 0000242E 80F900              <2> 		cmp cl, 0
  2786 00002431 75F0                <2> 		jne intloopclear
  2787 00002433 FECD                <2> 		dec ch
  2788 00002435 80FD00              <2> 		cmp ch, 0
  2789 00002438 75E9                <2> 		jne intloopclear
  2790 0000243A 668B0D[4C240000]    <2> 		mov cx, [charxy]
  2791 00002441 E99CFEFFFF          <2> 		jmp donescr
  2792                              <2> 		
  2793 00002446 0000                <2> linebeginpos dw 0
  2794 00002448 0000                <2> videobufpos: dw 0
  2795 0000244A 0000                <2> charpos db 0,0
  2796 0000244C 501E                <2> charxy db 80,30
  2797 0000244E 0000                <2> charbuf dw 0
  2798                              <2> %endif
  2799                              <1> intx7:
  2800                              <1> 	%include 'source/interrupts/7_openfile.asm'
  2801 00002450 E8963E0000          <2> 	call loadfile
  2802 00002455 E94BDEFFFF          <2> 	jmp timerinterrupt
  2803                              <1> intx9:
  2804                              <1> 	%include 'source/interrupts/9_num2str.asm'
  2805 0000245A 3C00                <2> 	cmp al, 0
  2806 0000245C 750A                <2> 	jne num2strb
  2807 0000245E E81A0B0000          <2> 	call showdec
  2808 00002463 E93DDEFFFF          <2> 	jmp timerinterrupt
  2809                              <2> num2strb:
  2810 00002468 E8460A0000          <2> 	call showhex
  2811 0000246D E933DEFFFF          <2> 	jmp timerinterrupt
  2812                              <1> intx10:
  2813                              <1> 	%include 'source/interrupts/10_str2num.asm'
  2814 00002472 E8E80B0000          <2> 	call cnvrttxt	;the string goes into esi, number into ecx
  2815 00002477 E929DEFFFF          <2> 	jmp timerinterrupt
  2816                              <2> 	
  2817                              <1> %ifdef threads.included
  2818                              <1> intx11:
  2819                              <1> 	%include 'source/interrupts/11_forkthread.asm'
  2820                              <2> threadfork: ;esi is next thread's start address, if 0, fork current thread
  2821                              <2> 			;returns the PID of the new fork in ebx
  2822                              <2> ;WARNING:THIS WILL NOT WORK IN C UNTIL IT COPIES THE ENTIRE STACK
  2823 0000247C FA                  <2> 	cli
  2824 0000247D 60                  <2> 	pushad
  2825 0000247E 8925[4B250000]      <2> 	mov [.espold], esp
  2826 00002484 C605[8A640000]01    <2> 	mov byte [threadson], 1
  2827 0000248B 8B1D[8B640000]      <2> 	mov ebx, [currentthread]
  2828 00002491 C1E302              <2> 	shl ebx, 2
  2829 00002494 89A3[2CD60100]      <2> 	mov [threadlist + ebx], esp
  2830 0000249A C1EB02              <2> 	shr ebx, 2
  2831 0000249D 81FB00000000        <2> 	cmp ebx, 0
  2832 000024A3 750C                <2> 	jne .simplestack
  2833 000024A5 BB[CAAE0000]        <2> 	mov ebx, stackend
  2834 000024AA 29E3                <2> 	sub ebx, esp
  2835 000024AC E90B000000          <2> 	jmp .stackcalcdone
  2836                              <2> .simplestack:
  2837 000024B1 C1E30A              <2> 	shl ebx, 10
  2838 000024B4 81C3[2CEA0100]      <2> 	add ebx, stack1
  2839 000024BA 29E3                <2> 	sub ebx, esp
  2840                              <2> .stackcalcdone:
  2841 000024BC 29DC                <2> 	sub esp, ebx
  2842 000024BE 81C4[2CEA0100]      <2> 	add esp, stack1
  2843 000024C4 8B1D[86640000]      <2> 	mov ebx, [lastthread]
  2844 000024CA C1E308              <2> 	shl ebx, 8
  2845 000024CD 01DC                <2> 	add esp, ebx
  2846 000024CF 891D[4F250000]      <2> 	mov [.stackend], ebx
  2847                              <2> 
  2848 000024D5 89E5                <2> 	mov ebp, esp
  2849 000024D7 8B25[4B250000]      <2> 	mov esp, [.espold]
  2850                              <2> 
  2851 000024DD C1EB0A              <2> 	shr ebx, 10 ;get pid then push it
  2852 000024E0 895C2410            <2> 	mov [esp + 16], ebx ;set the old ebx to the new PID
  2853                              <2> 
  2854 000024E4 31DB                <2> 	xor ebx, ebx
  2855                              <2> .stackcopy:
  2856 000024E6 668B041C            <2> 	mov ax, [esp + ebx]
  2857 000024EA 6689441D00          <2> 	mov [ebp + ebx], ax
  2858 000024EF 81C302000000        <2> 	add ebx, 2
  2859 000024F5 3B1D[4F250000]      <2> 	cmp ebx, [.stackend]
  2860 000024FB 72E9                <2> 	jb .stackcopy
  2861                              <2> 
  2862 000024FD 31C0                <2> 	xor eax, eax
  2863 000024FF 668CC8              <2> 	mov ax, cs
  2864 00002502 89C2                <2> 	mov edx, eax
  2865 00002504 8B4C2428            <2> 	mov ecx, [esp + 40]
  2866 00002508 81C900020000        <2> 	or ecx, 0x200
  2867                              <2> 	
  2868 0000250E 81FE00000000        <2> 	cmp esi, 0
  2869 00002514 7504                <2> 	jne .nochangestack
  2870 00002516 8B742420            <2> 	mov esi, [esp + 32]
  2871                              <2> .nochangestack:
  2872 0000251A 89F0                <2> 	mov eax, esi
  2873 0000251C 89EC                <2> 	mov esp, ebp
  2874                              <2> 
  2875 0000251E 89442420            <2> 	mov [esp + 32], eax
  2876 00002522 89542424            <2> 	mov [esp + 36], edx
  2877 00002526 894C2428            <2> 	mov [esp + 40], ecx
  2878                              <2> 
  2879 0000252A 8B1D[86640000]      <2> 	mov ebx, [lastthread]
  2880 00002530 89A3[2CD60100]      <2> 	mov [threadlist + ebx], esp
  2881 00002536 81C304000000        <2> 	add ebx, 4
  2882 0000253C 891D[86640000]      <2> 	mov [lastthread], ebx
  2883 00002542 8B25[4B250000]      <2> 	mov esp, [.espold]
  2884 00002548 61                  <2> 	popad
  2885 00002549 FB                  <2> 	sti
  2886 0000254A CF                  <2> 	iret
  2887                              <2> 
  2888 0000254B 00000000            <2> .espold dd 0
  2889 0000254F 00000000            <2> .stackend dd 0
  2890                              <1> %endif
  2891                              <1> intx12:
  2892                              <1> 	%include 'source/interrupts/12_gettime.asm'
  2893 00002553 A1[5D020000]        <2> 	mov eax, [timeseconds]
  2894 00002558 8B1D[61020000]      <2> 	mov ebx, [timenanoseconds]
  2895 0000255E 89D9                <2> 	mov ecx, ebx
  2896 00002560 C1E90A              <2> 	shr ecx, 10	;this is in microseconds
  2897 00002563 E93DDDFFFF          <2> 	jmp timerinterrupt
  2898                              <1> intx13:
  2899                              <1> 	%include 'source/interrupts/13_settime.asm'
  2900 00002568 A3[5D020000]        <2> 	mov [timeseconds], eax
  2901 0000256D 891D[61020000]      <2> 	mov [timenanoseconds], ebx
  2902 00002573 E92DDDFFFF          <2> 	jmp timerinterrupt
  2903                              <2> 	
  2904                              <1> intx14:
  2905                              <1> 	%include 'source/interrupts/14_runcmd.asm'
  2906 00002578 BF[AAC90000]        <2> 	mov edi, buftxt
  2907                              <2> cpcmd:
  2908 0000257D 8A06                <2> 	mov al, [esi]
  2909 0000257F 8807                <2> 	mov [edi], al
  2910 00002581 46                  <2> 	inc esi
  2911 00002582 47                  <2> 	inc edi
  2912 00002583 3C00                <2> 	cmp al, 0
  2913 00002585 75F6                <2> 	jne cpcmd
  2914 00002587 E82A060000          <2> 	call run
  2915 0000258C CF                  <2> 	iret
  2916                              <1> intx15:
  2917                              <1> 	%include 'source/interrupts/15_proginfo.asm'
  2918 0000258D BB[AAB50000]        <2> 	mov ebx, variables
  2919 00002592 8B35[8C2C0000]      <2> 	mov esi, [currentcommandloc]
  2920 00002598 89F7                <2> 	mov edi, esi
  2921 0000259A 31C9                <2> 	xor ecx, ecx
  2922                              <2> getcommandzeroes:
  2923 0000259C 8A07                <2> 	mov al, [edi]
  2924 0000259E 47                  <2> 	inc edi
  2925 0000259F 3C3B                <2> 	cmp al, ';'
  2926 000025A1 740B                <2> 	je nomorezeroes
  2927 000025A3 3C00                <2> 	cmp al, 0
  2928 000025A5 7407                <2> 	je nomorezeroes
  2929 000025A7 3C20                <2> 	cmp al, ' '
  2930 000025A9 75F1                <2> 	jne getcommandzeroes
  2931 000025AB 41                  <2> 	inc ecx
  2932 000025AC EBEE                <2> 	jmp getcommandzeroes
  2933                              <2> nomorezeroes:
  2934 000025AE 41                  <2> 	inc ecx
  2935 000025AF 4F                  <2> 	dec edi
  2936 000025B0 8B1D[36B50000]      <2> 	mov ebx, [uid]
  2937 000025B6 8B15[8B640000]      <2> 	mov edx, [currentthread]
  2938 000025BC CF                  <2> 	iret
  2939                              <2> 	
  2940                              <1> termcopy:
  2941                              <1> %ifdef io.serial
  2942                              <1> 	ret
  2943                              <1> %else
  2944                              <1> %ifdef terminal.vsync
  2945                              <1> 	mov byte [termcopyneeded], 1
  2946                              <1> 	ret
  2947                              <1> %else
  2948 000025BD E808000000          <1> 	call newtermcopy
  2949 000025C2 C3                  <1> 	ret
  2950                              <1> %endif
  2951 000025C3 00                  <1> 	termcopyneeded db 0
  2952 000025C4 00000000            <1> 	termcursorpos dd 0
  2953 000025C8 0000                <1> 	removedvideo dw 0
  2954                              <1> newtermcopy:
  2955 000025CA 60                  <1> 	pusha
  2956 000025CB BF[C0D00000]        <1> 	mov edi, videobuf
  2957 000025D0 31DB                <1> 	xor ebx, ebx
  2958 000025D2 881D[C3250000]      <1> 	mov [termcopyneeded], bl
  2959 000025D8 668B1D[48240000]    <1> 	mov bx, [videobufpos]
  2960 000025DF 01DF                <1> 	add edi, ebx
  2961 000025E1 893D[C4250000]      <1> 	mov [termcursorpos], edi
  2962 000025E7 E8CB000000          <1> 	call switchtermcursor
  2963 000025EC 803D[E49C0000]00    <1> 	cmp byte [guion], 0
  2964 000025F3 0F8420000000        <1> 	je near nowincopy
  2965                              <1> %ifdef gui.included
  2966 000025F9 C605[19770000]00    <1> 	mov byte [mouseselecton], 0
  2967 00002600 C605[65220000]01    <1> 	mov byte [termcopyon], 1
  2968 00002607 803D[64220000]01    <1> 	cmp byte [termguion], 1
  2969 0000260E 0F84934E0000        <1> 	je near windowvideocopy
  2970                              <1> %endif
  2971 00002614 E997000000          <1> 	jmp nocopytermatall
  2972                              <1> nowincopy:
  2973 00002619 BE00000A00          <1> 	mov esi, 0xA0000
  2974 0000261E A1[3E020000]        <1> 	mov eax, [basecache]
  2975 00002623 C1E004              <1> 	shl eax, 4
  2976 00002626 29C6                <1> 	sub esi, eax
  2977 00002628 BF[C0D00000]        <1> 	mov edi, videobuf
  2978 0000262D 31C9                <1> 	xor ecx, ecx
  2979 0000262F 668B0D[4C240000]    <1> 	mov cx, [charxy]
  2980                              <1> nowincopy2:
  2981 00002636 668B07              <1> 	mov ax, [edi]
  2982 00002639 81C7A46A0000        <1> 	add edi, (videobuf2 - videobuf)
  2983 0000263F 668B1F              <1> 	mov bx, [edi]
  2984 00002642 668907              <1> 	mov [edi], ax
  2985 00002645 81EFA46A0000        <1> 	sub edi, (videobuf2 - videobuf)
  2986 0000264B 47                  <1> 	inc edi
  2987 0000264C 6639D8              <1> 	cmp ax, bx
  2988 0000264F 743E                <1> 	je nopresentwinfont
  2989 00002651 4F                  <1> 	dec edi
  2990 00002652 BB[2D8B0000]        <1> 	mov ebx, fonts
  2991 00002657 31C0                <1> 	xor eax, eax
  2992 00002659 8A07                <1> 	mov al, [edi]
  2993 0000265B C1E004              <1> 	shl eax, 4
  2994 0000265E 01C3                <1> 	add ebx, eax
  2995 00002660 47                  <1> 	inc edi
  2996 00002661 8A27                <1> 	mov ah, [edi]
  2997 00002663 31D2                <1> 	xor edx, edx
  2998 00002665 8A15[4C240000]      <1> 	mov dl, [charxy]
  2999 0000266B C1C110              <1> 	rol ecx, 16
  3000 0000266E B110                <1> 	mov cl, 16
  3001                              <1> nowinfont:
  3002 00002670 8A03                <1> 	mov al, [ebx]
  3003 00002672 D0C8                <1> 	ror al, 1
  3004 00002674 80FC07              <1> 	cmp ah, 7
  3005 00002677 7602                <1> 	jbe notnotfont
  3006 00002679 F6D0                <1> 	not al
  3007                              <1> notnotfont:
  3008 0000267B 8806                <1> 	mov [esi], al
  3009 0000267D 01D6                <1> 	add esi, edx
  3010 0000267F 43                  <1> 	inc ebx
  3011 00002680 FEC9                <1> 	dec cl
  3012 00002682 80F900              <1> 	cmp cl, 0
  3013 00002685 75E9                <1> 	jne nowinfont
  3014 00002687 C1E204              <1> 	shl edx, 4
  3015 0000268A 29D6                <1> 	sub esi, edx
  3016 0000268C C1C110              <1> 	rol ecx, 16
  3017                              <1> nopresentwinfont:
  3018 0000268F 47                  <1> 	inc edi
  3019 00002690 46                  <1> 	inc esi
  3020 00002691 FEC9                <1> 	dec cl
  3021 00002693 80F900              <1> 	cmp cl, 0
  3022 00002696 759E                <1> 	jne nowincopy2
  3023 00002698 8A0D[4C240000]      <1> 	mov cl, [charxy]
  3024 0000269E 31D2                <1> 	xor edx, edx
  3025 000026A0 88CA                <1> 	mov dl, cl
  3026 000026A2 29D6                <1> 	sub esi, edx
  3027 000026A4 C1E204              <1> 	shl edx, 4
  3028 000026A7 01D6                <1> 	add esi, edx
  3029 000026A9 FECD                <1> 	dec ch
  3030 000026AB 80FD00              <1> 	cmp ch, 0
  3031 000026AE 7586                <1> 	jne nowincopy2
  3032                              <1> nocopytermatall:
  3033 000026B0 E802000000          <1> 	call switchtermcursor
  3034 000026B5 61                  <1> 	popa
  3035 000026B6 C3                  <1> 	ret
  3036                              <1> 	
  3037                              <1> switchtermcursor:
  3038 000026B7 8B3D[C4250000]      <1> 	mov edi, [termcursorpos]
  3039 000026BD 8A4701              <1> 	mov al, [edi + 1]
  3040 000026C0 8A27                <1> 	mov ah, [edi]
  3041 000026C2 3C07                <1> 	cmp al, 7
  3042 000026C4 7607                <1> 	jbe movlargecursorterm
  3043 000026C6 B007                <1> 	mov al, 7
  3044 000026C8 E902000000          <1> 	jmp movedcursorterm
  3045                              <1> movlargecursorterm:
  3046 000026CD B0F0                <1> 	mov al, 0xF0
  3047                              <1> movedcursorterm:
  3048 000026CF 884701              <1> 	mov [edi + 1], al
  3049 000026D2 80FC00              <1> 	cmp ah, 0
  3050 000026D5 7504                <1> 	jne fixednocursorterm
  3051 000026D7 B420                <1> 	mov ah, " "
  3052 000026D9 8827                <1> 	mov [edi], ah
  3053                              <1> fixednocursorterm:
  3054 000026DB C3                  <1> 	ret
  3055                              <1> %endif
  3056                                      %include "source/dosints.asm"
  3057                              <1> int20h:
  3058 000026DC 66B8004C            <1> mov ax, 0x4C00
  3059                              <1> int21h:
  3060                              <1> dostosolleros:
  3061 000026E0 6650                <1> 	push ax
  3062 000026E2 66B83000            <1> 	mov ax, NEW_DATA_SEL
  3063 000026E6 8ED8                <1> 	mov ds, ax
  3064 000026E8 8EC0                <1> 	mov es, ax
  3065 000026EA 8EE0                <1> 	mov fs, ax
  3066 000026EC 66B82000            <1> 	mov ax, SYS_DATA_SEL
  3067 000026F0 8EE8                <1> 	mov gs, ax
  3068 000026F2 6658                <1> 	pop ax
  3069 000026F4 9C                  <1> 	pushf
  3070 000026F5 60                  <1> 	pusha
  3071 000026F6 80FC01              <1> 	cmp ah, 1
  3072 000026F9 0F8449000000        <1> 	je near dosgchar
  3073 000026FF 80FC02              <1> 	cmp ah, 2
  3074 00002702 0F8447000000        <1> 	je near doswchar
  3075 00002708 80FC09              <1> 	cmp ah, 9
  3076 0000270B 0F8449000000        <1> 	je near dosprintstr
  3077 00002711 80FC0A              <1> 	cmp ah, 0xA
  3078 00002714 0F8456000000        <1> 	je near dosgetstr
  3079 0000271A 80FC2B              <1> 	cmp ah, 0x2B
  3080 0000271D 0F8492000000        <1> 	je near dosgetdate
  3081 00002723 80FC2C              <1> 	cmp ah, 0x2C
  3082 00002726 0F84AC000000        <1> 	je near dosgettime
  3083 0000272C 80FC4C              <1> 	cmp ah, 0x4C
  3084 0000272F 0F84C1000000        <1> 	je near dosexit
  3085                              <1> backtodos:
  3086 00002735 61                  <1> 	popa
  3087 00002736 9D                  <1> 	popf
  3088 00002737 6650                <1> 	push ax
  3089 00002739 66B85000            <1> 	mov ax, DOS_DATA_SEL
  3090 0000273D 8ED8                <1> 	mov ds, ax
  3091 0000273F 8EC0                <1> 	mov es, ax
  3092 00002741 8EE0                <1> 	mov fs, ax
  3093 00002743 8EE8                <1> 	mov gs, ax
  3094 00002745 6658                <1> 	pop ax
  3095 00002747 CF                  <1> 	iret
  3096                              <1> 
  3097                              <1> dosgchar:
  3098 00002748 E8A3FAFFFF          <1> 	call getchar
  3099 0000274D EBE6                <1> 	jmp backtodos
  3100                              <1> 	
  3101                              <1> doswchar:
  3102 0000274F 88D0                <1> 	mov al, dl
  3103 00002751 B307                <1> 	mov bl, 7
  3104 00002753 E8FDFAFFFF          <1> 	call prcharint
  3105 00002758 EBDB                <1> 	jmp backtodos
  3106                              <1> 	
  3107                              <1> dosprintstr:
  3108 0000275A 31F6                <1> 	xor esi, esi
  3109 0000275C 6689D6              <1> 	mov si, dx
  3110 0000275F 81C600004000        <1> 	add esi, dosprogloc
  3111 00002765 B024                <1> 	mov al, "$"
  3112 00002767 B307                <1> 	mov bl, 7
  3113 00002769 E8B8F5FFFF          <1> 	call printint
  3114 0000276E EBC5                <1> 	jmp backtodos
  3115                              <1> 	
  3116                              <1> dosgetstr:
  3117 00002770 31F6                <1> 	xor esi, esi
  3118 00002772 6689D6              <1> 	mov si, dx
  3119 00002775 81C600004000        <1> 	add esi, dosprogloc
  3120 0000277B B900000000          <1> 	mov ecx, 0
  3121 00002780 8A0E                <1> 	mov cl, [esi]
  3122 00002782 81C602000000        <1> 	add esi, 2
  3123 00002788 89F7                <1> 	mov edi, esi
  3124 0000278A 8935[B1270000]      <1> 	mov [stringstart], esi
  3125 00002790 01CF                <1> 	add edi, ecx
  3126 00002792 B00A                <1> 	mov al, 10
  3127 00002794 B307                <1> 	mov bl, 7
  3128 00002796 E87EF6FFFF          <1> 	call rdprintdos
  3129 0000279B 89F1                <1> 	mov ecx, esi
  3130 0000279D 2B0D[B1270000]      <1> 	sub ecx, [stringstart]
  3131 000027A3 8B35[B1270000]      <1> 	mov esi, [stringstart]
  3132 000027A9 884EFF              <1> 	mov [esi - 1], cl
  3133 000027AC 884EFE              <1> 	mov [esi - 2], cl
  3134 000027AF EB84                <1> 	jmp backtodos
  3135 000027B1 00000000            <1> stringstart dd 0
  3136                              <1> 
  3137                              <1> dosgetdate:
  3138 000027B5 E8EC250000          <1> 	call time
  3139 000027BA 8A0D[6E4F0000]      <1> 	mov cl, [RTCtimeYear]
  3140 000027C0 B500                <1> 	mov ch, 0
  3141 000027C2 6681C1D007          <1> 	add cx, 2000
  3142 000027C7 8A35[6D4F0000]      <1> 	mov dh, [RTCtimeMonth]
  3143 000027CD 8A15[6C4F0000]      <1> 	mov dl, [RTCtimeDay]
  3144 000027D3 E95DFFFFFF          <1> 	jmp backtodos
  3145                              <1> 
  3146                              <1> dosgettime:
  3147 000027D8 E8C9250000          <1> 	call time
  3148 000027DD 8A2D[6B4F0000]      <1> 	mov ch, [RTCtimeHour]
  3149 000027E3 8A0D[6A4F0000]      <1> 	mov cl, [RTCtimeMinute]
  3150 000027E9 8A35[694F0000]      <1> 	mov dh, [RTCtimeSecond]
  3151 000027EF B200                <1> 	mov dl, 0
  3152 000027F1 E93FFFFFFF          <1> 	jmp backtodos
  3153                              <1> 	
  3154                              <1> dosexit:
  3155 000027F6 BE[088B0000]        <1> 	mov esi, line
  3156 000027FB E81FF5FFFF          <1> 	call print
  3157 00002800 61                  <1> 	popa
  3158 00002801 9D                  <1> 	popf
  3159 00002802 8B25[2AB30000]      <1> 	mov esp, [previousstack]
  3160 00002808 31DB                <1> 	xor ebx, ebx
  3161 0000280A 88C3                <1> 	mov bl, al
  3162 0000280C 80FB00              <1> 	cmp bl, 0
  3163 0000280F 0F8598F4FFFF        <1> 	jne near exitprog.error
  3164 00002815 C3                  <1> 	ret
  3165                                      %include "source/solleros.asm"
  3166                              <1> 	;SOLLEROS.ASM
  3167                              <1> os:
  3168                              <1> setdefenv:
  3169 00002816 B02F                <1> 	mov al, '/'
  3170 00002818 A2[36B30000]        <1> 	mov [currentfolder], al
  3171 0000281D B801000000          <1> 	mov eax, 1
  3172 00002822 A3[32B30000]        <1> 	mov [currentfolderloc], eax
  3173 00002827 E859F5FFFF          <1> 	call clear
  3174                              <1> 	
  3175                              <1> bootfilecheck:
  3176 0000282C 803D[3AB50000]01    <1> 	cmp byte [ranboot], 1
  3177 00002833 0F8421000000        <1> 	je near nobootfile
  3178                              <1> 	%ifdef hardware.automatic
  3179 00002839 E881360000          <1> 		call initializelater ;Initialize components that have debug messages
  3180                              <1> 	%endif
  3181 0000283E BF[C78A0000]        <1> 	mov edi, bootfilename
  3182 00002843 BE00004000          <1> 	mov esi, 0x400000
  3183 00002848 E89E3A0000          <1> 	call loadfile
  3184 0000284D 81FA00000000        <1> 	cmp edx, 0
  3185 00002853 7505                <1> 	jne nobootfile
  3186 00002855 E8B00D0000          <1> 	call progbatchfound
  3187                              <1> nobootfile:	
  3188 0000285A C605[3AB50000]01    <1> 	mov byte [ranboot], 1
  3189                              <1> 
  3190 00002861 BE[00000000]        <1> 	mov esi, signature
  3191                              <1> .sigcopyloop:	;this prevents an odd error
  3192 00002866 658A06              <1> 	mov al, [gs:esi]
  3193 00002869 8806                <1> 	mov [esi], al
  3194 0000286B 46                  <1> 	inc esi
  3195 0000286C 81FE[1A000000]      <1> 	cmp esi, signatureend
  3196 00002872 72F2                <1> 	jb .sigcopyloop
  3197                              <1> 	
  3198 00002874 BE[00000000]        <1> 	mov esi, signature
  3199 00002879 E8A1F4FFFF          <1> 	call print
  3200 0000287E 8B0D[16000000]      <1> 	mov ecx, [signatureend - 4]
  3201 00002884 E8F4060000          <1> 	call showdec
  3202 00002889 BE[088B0000]        <1> 	mov esi, line
  3203 0000288E E88CF4FFFF          <1> 	call print
  3204 00002893 BE[E48A0000]        <1> 	mov esi, userask
  3205 00002898 E882F4FFFF          <1> 	call print
  3206                              <1> usercheck:
  3207 0000289D BE[AAC90000]        <1> 	mov esi, buftxt
  3208 000028A2 BF[AACD0000]        <1> 	mov edi, buftxtend
  3209 000028A7 B00A                <1> 	mov al, 10
  3210 000028A9 E859F5FFFF          <1> 	call rdprint
  3211 000028AE 56                  <1> 	push esi
  3212 000028AF BE[EE8A0000]        <1> 	mov esi, pwdask
  3213 000028B4 E866F4FFFF          <1> 	call print
  3214 000028B9 5E                  <1> 	pop esi
  3215 000028BA 46                  <1> 	inc esi
  3216 000028BB 8935[AE290000]      <1> 	mov [esipass], esi
  3217                              <1> passcheck:
  3218 000028C1 E82AF9FFFF          <1> 	call getchar
  3219 000028C6 3C0A                <1> 	cmp al, 10
  3220 000028C8 0F8436000000        <1> 	je near gotpass
  3221 000028CE 3C08                <1> 	cmp al, 8
  3222 000028D0 0F8410000000        <1> 	je near backpass
  3223 000028D6 8806                <1> 	mov [esi], al
  3224 000028D8 46                  <1> 	inc esi
  3225 000028D9 B02A                <1> 	mov al, "*"
  3226 000028DB E875F9FFFF          <1> 	call prcharint
  3227 000028E0 EBDF                <1> 	jmp passcheck
  3228 000028E2 08200800            <1> backcursor2 db 8," ",8,0
  3229                              <1> backpass:
  3230 000028E6 3B35[AE290000]      <1> 	cmp esi, [esipass]
  3231 000028EC 0F84CFFFFFFF        <1> 	je near passcheck
  3232 000028F2 4E                  <1> 	dec esi
  3233 000028F3 C60600              <1> 	mov byte [esi], 0
  3234 000028F6 56                  <1> 	push esi
  3235 000028F7 BE[E2280000]        <1> 	mov esi, backcursor2
  3236 000028FC E81EF4FFFF          <1> 	call print
  3237 00002901 5E                  <1> 	pop esi
  3238 00002902 EBBD                <1> 	jmp passcheck
  3239                              <1> gotpass:
  3240 00002904 B00A                <1> 	mov al, 10
  3241 00002906 E84AF9FFFF          <1> 	call prcharint
  3242 0000290B 30C0                <1> 	xor al, al
  3243 0000290D 31C9                <1> 	xor ecx, ecx
  3244 0000290F 8806                <1> 	mov [esi], al
  3245 00002911 BB[0A8B0000]        <1> 	mov ebx, userlst
  3246                              <1> userfind:
  3247 00002916 BE[AAC90000]        <1> 	mov esi, buftxt
  3248 0000291B 8A06                <1> 	mov al, [esi]
  3249 0000291D 3C00                <1> 	cmp al, 0
  3250 0000291F 0F84F1FEFFFF        <1> 	je near os
  3251 00002925 891D[B2290000]      <1> 	mov [usercache], ebx
  3252 0000292B E860030000          <1> 	call tester
  3253 00002930 3C01                <1> 	cmp al, 1
  3254 00002932 7416                <1> 	je pwdtest
  3255 00002934 41                  <1> 	inc ecx
  3256                              <1> nxtuser:
  3257 00002935 8A03                <1> 	mov al, [ebx]
  3258 00002937 43                  <1> 	inc ebx
  3259 00002938 3C00                <1> 	cmp al, 0
  3260 0000293A 75F9                <1> 	jne nxtuser
  3261 0000293C 81FB[2D8B0000]      <1> 	cmp ebx, userlstend
  3262 00002942 0F83CEFEFFFF        <1> 	jae near os
  3263 00002948 EBCC                <1> 	jmp userfind
  3264                              <1> pwdtest:
  3265 0000294A 46                  <1> 	inc esi
  3266 0000294B 43                  <1> 	inc ebx
  3267 0000294C E83F030000          <1> 	call tester
  3268 00002951 3C01                <1> 	cmp al, 1
  3269 00002953 7402                <1> 	je pwdrgt
  3270 00002955 EBDE                <1> 	jmp nxtuser
  3271                              <1> pwdrgt:
  3272 00002957 D1E9                <1> 	shr ecx, 1
  3273 00002959 890D[36B50000]      <1> 	mov [uid], ecx
  3274 0000295F E821F4FFFF          <1> 	call clear
  3275 00002964 31C9                <1> 	xor ecx, ecx
  3276 00002966 41                  <1> 	inc ecx
  3277 00002967 890D[0CA60100]      <1> 	mov [commandbufpos], ecx
  3278                              <1> returnfromexp:
  3279 0000296D 66B90002            <1> 	mov cx, 200h
  3280 00002971 BE[AAC90000]        <1> 	mov esi, buftxt
  3281 00002976 8935[8C2C0000]      <1> 	mov [currentcommandloc], esi
  3282 0000297C E825000000          <1> 	call bufclr
  3283                              <1> clearolddata:
  3284 00002981 31C0                <1> 	xor eax, eax
  3285 00002983 A2[3BB50000]        <1> 	mov [IFON], al
  3286 00002988 A2[3CB50000]        <1> 	mov [IFTRUE], al
  3287 0000298D A2[A4B50000]        <1> 	mov [BATCHISON], al
  3288 00002992 A3[A0B50000]        <1> 	mov [BATCHPOS], eax
  3289 00002997 A2[A5B50000]        <1> 	mov [LOOPON], al
  3290 0000299C A3[A6B50000]        <1> 	mov [LOOPPOS], eax
  3291 000029A1 E933000000          <1> 	jmp nwcmd
  3292                              <1> bufclr:	
  3293 000029A6 30C0                <1> 	xor al, al
  3294 000029A8 8806                <1> 	mov [esi], al
  3295 000029AA 46                  <1> 	inc esi
  3296 000029AB E2F9                <1> 	loop bufclr
  3297 000029AD C3                  <1> 	ret
  3298                              <1> 
  3299 000029AE 00000000            <1> esipass dd 0
  3300 000029B2 [0A8B0000]          <1> usercache dd userlst
  3301                              <1> 	
  3302                              <1> buftxtclear:
  3303 000029B6 30C0                <1> 	xor al, al
  3304 000029B8 BE[AAC90000]        <1> 	mov esi, buftxt
  3305 000029BD 81FE[AACD0000]      <1> clearbuftxt: cmp esi, buf2
  3306 000029C3 730E                <1> 	jae retbufclr
  3307 000029C5 8806                <1> 	mov [esi], al
  3308 000029C7 46                  <1> 	inc esi
  3309 000029C8 EBF3                <1> 	jmp clearbuftxt
  3310                              <1> 
  3311 000029CA 39DE                <1> clearitbuf: cmp esi, ebx
  3312 000029CC 7305                <1> 	jae retbufclr
  3313 000029CE 8806                <1> 	mov [esi], al
  3314 000029D0 46                  <1> 	inc esi
  3315 000029D1 EBF7                <1> 	jmp clearitbuf
  3316 000029D3 C3                  <1> retbufclr: ret
  3317                              <1> 
  3318 000029D4 E900000000          <1> full:	jmp nwcmd
  3319                              <1> 
  3320                              <1> shush:	;SollerOS Hardly Unix-compatible Shell
  3321                              <1> nwcmd:
  3322 000029D9 FB                  <1> 	sti
  3323 000029DA 31C0                <1> 	xor eax, eax
  3324 000029DC 3905[AE2B0000]      <1> 	cmp [nextcommandloc], eax
  3325 000029E2 7413                <1> 	je nomultiplecommand
  3326 000029E4 8B35[AE2B0000]      <1> 	mov esi, [nextcommandloc]
  3327 000029EA 8935[B22B0000]      <1> 	mov [thiscommandloc], esi
  3328 000029F0 E8C6010000          <1> 	call fixvariables
  3329 000029F5 EBE2                <1> 	jmp nwcmd
  3330                              <1> nomultiplecommand:
  3331 000029F7 A3[B22B0000]        <1> 	mov [thiscommandloc], eax
  3332 000029FC 3805[8A640000]      <1> 	cmp [threadson], al
  3333 00002A02 7405                <1> 	je noclinwcmd
  3334 00002A04 A2[8A640000]        <1> 	mov [threadson], al
  3335                              <1> noclinwcmd:
  3336 00002A09 B001                <1> 	mov al, 1
  3337 00002A0B 3805[A4B50000]      <1> 	cmp [BATCHISON], al
  3338 00002A11 7501                <1> 	jne cancel
  3339 00002A13 C3                  <1> 	ret
  3340 00002A14 30C0                <1> cancel:	xor al, al
  3341 00002A16 A2[3BB50000]        <1> 	mov [IFON], al
  3342 00002A1B A2[A4B50000]        <1> 	mov [BATCHISON], al
  3343 00002A20 B05B                <1> 	mov al, '['
  3344 00002A22 66BB0700            <1> 	mov bx, 7
  3345 00002A26 E83BF8FFFF          <1> 	call prcharq
  3346 00002A2B 8B35[B2290000]      <1> 	mov esi, [usercache]
  3347 00002A31 E8D7F2FFFF          <1> 	call printquiet
  3348 00002A36 BE[F88A0000]        <1> 	mov esi, computer
  3349 00002A3B E8CDF2FFFF          <1> 	call printquiet
  3350 00002A40 BE[36B30000]        <1> 	mov esi, currentfolder
  3351 00002A45 0335[2EB30000]      <1> 	add esi, [lastfolderloc]
  3352 00002A4B E8BDF2FFFF          <1> 	call printquiet
  3353 00002A50 BE[038B0000]        <1> 	mov esi, endprompt
  3354 00002A55 E8C5F2FFFF          <1> 	call print
  3355 00002A5A E857FFFFFF          <1> 	call buftxtclear
  3356 00002A5F BE[AAC90000]        <1> 	mov esi, buftxt
  3357 00002A64 C605[D9210000]01    <1> 	mov byte [commandedit], 1
  3358 00002A6B B00A                <1> 	mov al, 10
  3359 00002A6D 66BB0700            <1> 	mov bx, 7
  3360 00002A71 BF[AACD0000]        <1> 	mov edi, buftxtend
  3361 00002A76 E88CF3FFFF          <1> 	call rdprint
  3362 00002A7B C605[D9210000]00    <1> 	mov byte [commandedit], 0
  3363 00002A82 803D[AAC90000]00    <1> 	cmp byte [buftxt], 0
  3364 00002A89 0F844AFFFFFF        <1> 	je near nwcmd
  3365 00002A8F 8B35[0CA60100]      <1> gotcmd:	mov esi, [commandbufpos]
  3366 00002A95 8935[08A60100]      <1> 	mov [lastcommandpos], esi
  3367 00002A9B FF05[14A60100]      <1> 	inc dword [commandsentered]
  3368 00002AA1 BF[AAC90000]        <1> 	mov edi, buftxt
  3369 00002AA6 81C6[18A60100]      <1> 	add esi, commandbuf
  3370 00002AAC 81FE[18B60100]      <1> 	cmp esi, commandbufend
  3371 00002AB2 7605                <1> 	jbe copycommand
  3372 00002AB4 BE[18A60100]        <1> 	mov esi, commandbuf
  3373                              <1> copycommand:
  3374 00002AB9 8A07                <1> 	mov al, [edi]
  3375 00002ABB 8806                <1> 	mov [esi], al
  3376 00002ABD 47                  <1> 	inc edi
  3377 00002ABE 46                  <1> 	inc esi
  3378 00002ABF 3C00                <1> 	cmp al, 0
  3379 00002AC1 740F                <1> 	je donecopy
  3380 00002AC3 81FE[18B60100]      <1> 	cmp esi, commandbufend
  3381 00002AC9 76EE                <1> 	jbe copycommand
  3382 00002ACB BE[18A60100]        <1> 	mov esi, commandbuf
  3383 00002AD0 EBE7                <1> 	jmp copycommand
  3384                              <1> donecopy:
  3385 00002AD2 81EE[18A60100]      <1> 	sub esi, commandbuf
  3386 00002AD8 8935[0CA60100]      <1> 	mov [commandbufpos], esi
  3387 00002ADE E8D3000000          <1> 	call run
  3388 00002AE3 E9F1FEFFFF          <1> 	jmp nwcmd
  3389                              <1> 
  3390 00002AE8 E8C9FEFFFF          <1> input:	call buftxtclear
  3391 00002AED BE[AAC90000]        <1> 	mov esi, buftxt		;puts input into buftxt AND onto screen
  3392 00002AF2 BF[AACD0000]        <1> 	mov edi, buftxtend
  3393 00002AF7 B00A                <1> stdin:	mov al, 10
  3394 00002AF9 B307                <1> 	mov bl, 7
  3395 00002AFB E807F3FFFF          <1> 	call rdprint
  3396 00002B00 C3                  <1> 	ret
  3397                              <1> 
  3398                              <1> replacevariable:
  3399 00002B01 8A4601              <1> 	mov al, [esi + 1]
  3400 00002B04 C64601FF            <1> 	mov byte [esi + 1], 255
  3401 00002B08 3C24                <1> 	cmp al, "$"
  3402 00002B0A 0F84AB000000        <1> 	je near fixvariables
  3403 00002B10 884601              <1> 	mov [esi + 1], al
  3404 00002B13 56                  <1> 	push esi
  3405 00002B14 81EE[AAC90000]      <1> 	sub esi, buftxt
  3406 00002B1A 89F7                <1> 	mov edi, esi
  3407 00002B1C 81C6[AAC90000]      <1> 	add esi, buftxt
  3408 00002B22 47                  <1> 	inc edi
  3409 00002B23 BB[AAB50000]        <1> 	mov ebx, variables
  3410 00002B28 E80D140000          <1> 	call nxtvrech
  3411 00002B2D 89F7                <1> 	mov edi, esi
  3412 00002B2F 31DB                <1> 	xor ebx, ebx
  3413 00002B31 4E                  <1> 	dec esi
  3414                              <1> findvarname:
  3415 00002B32 4E                  <1> 	dec esi
  3416 00002B33 8A06                <1> 	mov al, [esi]
  3417 00002B35 43                  <1> 	inc ebx
  3418 00002B36 3C04                <1> 	cmp al, 4
  3419 00002B38 75F8                <1> 	jne findvarname
  3420 00002B3A 5E                  <1> 	pop esi
  3421                              <1> replacevarloop:
  3422 00002B3B 8A07                <1> 	mov al, [edi]
  3423 00002B3D 3C00                <1> 	cmp al, 0
  3424 00002B3F 0F8413000000        <1> 	je near compressbuftxt
  3425 00002B45 81FB00000000        <1> 	cmp ebx, 0
  3426 00002B4B 0F8416000000        <1> 	je near expandbuftxt
  3427 00002B51 8806                <1> 	mov [esi], al
  3428 00002B53 4B                  <1> 	dec ebx
  3429 00002B54 46                  <1> 	inc esi
  3430 00002B55 47                  <1> 	inc edi
  3431 00002B56 EBE3                <1> 	jmp replacevarloop
  3432                              <1> compressbuftxt:
  3433 00002B58 8A041E              <1> 	mov al, [esi + ebx]
  3434 00002B5B 8806                <1> 	mov [esi], al
  3435 00002B5D 46                  <1> 	inc esi
  3436 00002B5E 3C00                <1> 	cmp al, 0
  3437 00002B60 75F6                <1> 	jne compressbuftxt
  3438 00002B62 E954000000          <1> 	jmp fixvariables
  3439                              <1> expandbuftxt:
  3440 00002B67 89F1                <1> 	mov ecx, esi
  3441 00002B69 8A26                <1> 	mov ah, [esi]
  3442                              <1> expandbuftxtlp:
  3443 00002B6B 8A1E                <1> 	mov bl, [esi]
  3444 00002B6D 46                  <1> 	inc esi
  3445 00002B6E 8A3E                <1> 	mov bh, [esi]
  3446 00002B70 8826                <1> 	mov [esi], ah
  3447 00002B72 88FC                <1> 	mov ah, bh
  3448 00002B74 80FB00              <1> 	cmp bl, 0
  3449 00002B77 75F2                <1> 	jne expandbuftxtlp
  3450 00002B79 89CE                <1> 	mov esi, ecx
  3451 00002B7B 8806                <1> 	mov [esi], al
  3452 00002B7D 47                  <1> 	inc edi
  3453 00002B7E 8A07                <1> 	mov al, [edi]
  3454 00002B80 3C00                <1> 	cmp al, 0
  3455 00002B82 0F8433000000        <1> 	je near fixvariables
  3456 00002B88 46                  <1> 	inc esi
  3457 00002B89 EBDC                <1> 	jmp expandbuftxt
  3458                              <1> multipleprogline:
  3459 00002B8B 30E4                <1> 	xor ah, ah
  3460 00002B8D 8826                <1> 	mov [esi], ah
  3461 00002B8F 46                  <1> 	inc esi
  3462 00002B90 8935[AE2B0000]      <1> 	mov [nextcommandloc], esi
  3463 00002B96 E93E000000          <1> 	jmp donefixvariables
  3464                              <1> inlinecomment:	;if the following char is #, include a #, otherwise end the line
  3465 00002B9B 46                  <1> 	inc esi
  3466 00002B9C 8A06                <1> 	mov al, [esi]
  3467 00002B9E C606FF              <1> 	mov byte [esi], 255
  3468 00002BA1 3C23                <1> 	cmp al, '#'
  3469 00002BA3 7416                <1> 	je fixvariables
  3470 00002BA5 4E                  <1> 	dec esi
  3471 00002BA6 C60600              <1> 	mov byte [esi], 0
  3472 00002BA9 E90D000000          <1> 	jmp fixvariables
  3473                              <1> 	
  3474 00002BAE 00000000            <1> nextcommandloc dd 0
  3475 00002BB2 00000000            <1> thiscommandloc dd 0	
  3476                              <1> run:
  3477 00002BB6 BE[AAC90000]        <1> 	mov esi, buftxt
  3478 00002BBB 46                  <1> fixvariables:	inc esi
  3479 00002BBC 8A06                <1> 	mov al, [esi]
  3480 00002BBE 3C23                <1> 	cmp al, '#'	;inline comment
  3481 00002BC0 74D9                <1> 	je inlinecomment
  3482 00002BC2 3C24                <1> 	cmp al, '$' ;variable
  3483 00002BC4 0F8437FFFFFF        <1> 	je near replacevariable
  3484 00002BCA 3C3B                <1> 	cmp al, ';' ;program list
  3485 00002BCC 74BD                <1> 	je multipleprogline
  3486 00002BCE 3C00                <1> 	cmp al, 0
  3487 00002BD0 75E9                <1> 	jne fixvariables
  3488 00002BD2 31C0                <1> 	xor eax, eax
  3489 00002BD4 A3[AE2B0000]        <1> 	mov [nextcommandloc], eax
  3490                              <1> donefixvariables:
  3491 00002BD9 803D[77310000]00    <1> 	cmp byte [indexdone], 0
  3492 00002BE0 7505                <1> 	jne progtest
  3493 00002BE2 E8FB040000          <1> 	call indexfiles
  3494                              <1> progtest:
  3495 00002BE7 31C0                <1> 	xor eax, eax
  3496 00002BE9 BB[2AAF0000]        <1> 	mov ebx, fileindex
  3497 00002BEE 668B03              <1> prgnxt:	mov ax, [ebx]
  3498 00002BF1 B1FF                <1> 	mov cl, 255
  3499 00002BF3 B52C                <1> 	mov ch, 44
  3500 00002BF5 6639C8              <1> 	cmp ax, cx
  3501 00002BF8 740B                <1> 	je fndprg
  3502 00002BFA 43                  <1> 	inc ebx
  3503 00002BFB 81FB[2AB30000]      <1> 	cmp ebx, fileindexend
  3504 00002C01 735D                <1> 	jae prgnf
  3505 00002C03 EBE9                <1> 	jmp prgnxt
  3506 00002C05 81C302000000        <1> fndprg: add ebx, 2
  3507 00002C0B 31C9                <1> 	xor ecx, ecx
  3508 00002C0D BE[AAC90000]        <1> 	mov esi, buftxt
  3509 00002C12 390D[B22B0000]      <1> 	cmp [thiscommandloc], ecx
  3510 00002C18 7406                <1> 	je noprgtstmultiple
  3511 00002C1A 8B35[B22B0000]      <1> 	mov esi, [thiscommandloc]
  3512                              <1> noprgtstmultiple:
  3513 00002C20 E8A6000000          <1> 	call cndtest
  3514 00002C25 3C01                <1> 	cmp al, 1
  3515 00002C27 7302                <1> 	jae prggood
  3516 00002C29 EBC3                <1> 	jmp prgnxt
  3517 00002C2B 81FB[2AB30000]      <1> prggood: cmp ebx, fileindexend
  3518 00002C31 7358                <1> 	jae prgdn
  3519 00002C33 31C0                <1> 	xor eax, eax
  3520 00002C35 BE[AAC90000]        <1> 	mov esi, buftxt
  3521 00002C3A 3905[B22B0000]      <1> 	cmp [thiscommandloc], eax
  3522 00002C40 7406                <1> 	je noprggoodmul
  3523 00002C42 8B35[B22B0000]      <1> 	mov esi, [thiscommandloc]
  3524                              <1> noprggoodmul:
  3525 00002C48 8935[8C2C0000]      <1> 	mov [currentcommandloc], esi
  3526 00002C4E 81C303000000        <1> 	add ebx, 3
  3527 00002C54 8B3B                <1> 	mov edi, [ebx]
  3528 00002C56 C605[8A640000]02    <1> 	mov byte [threadson], 2
  3529 00002C5D FFD7                <1> 	call edi
  3530 00002C5F C3                  <1> 	ret
  3531                              <1> prgnf:	
  3532 00002C60 8B35[8C2C0000]      <1> 	mov esi, [currentcommandloc]
  3533 00002C66 8A06                <1> 	mov al, [esi]
  3534 00002C68 3C00                <1> 	cmp al, 0
  3535 00002C6A 741F                <1> 	je prgdn
  3536 00002C6C BE[CF8A0000]        <1> 	mov esi, notfound1
  3537 00002C71 E8A9F0FFFF          <1> 	call print
  3538 00002C76 8B35[8C2C0000]      <1> 	mov esi, [currentcommandloc]
  3539 00002C7C E89EF0FFFF          <1> 	call print
  3540 00002C81 BE[D78A0000]        <1> 	mov esi, notfound2
  3541 00002C86 E894F0FFFF          <1> 	call print
  3542 00002C8B C3                  <1> prgdn:	ret
  3543                              <1> 
  3544 00002C8C 00000000            <1> currentcommandloc dd 0
  3545                              <1> 
  3546                              <1> tester:			;si=user bx=prog returns 1 in al if true
  3547 00002C90 6631C0              <1> 	xor ax, ax
  3548 00002C93 8A06                <1> retest:	mov al, [esi]
  3549 00002C95 8A23                <1> 	mov ah, [ebx]
  3550 00002C97 3C00                <1> 	cmp al, 0
  3551 00002C99 7408                <1> 	je testtrue
  3552 00002C9B 38E0                <1> 	cmp al, ah
  3553 00002C9D 750C                <1> 	jne testfalse
  3554 00002C9F 43                  <1> 	inc ebx
  3555 00002CA0 46                  <1> 	inc esi
  3556 00002CA1 EBF0                <1> 	jmp retest
  3557                              <1> testtrue:
  3558 00002CA3 80FC00              <1> 	cmp ah, 0
  3559 00002CA6 7503                <1> 	jne testfalse
  3560 00002CA8 B001                <1> 	mov al, 1
  3561 00002CAA C3                  <1> 	ret
  3562                              <1> testfalse:
  3563 00002CAB 30C0                <1> 	xor al, al
  3564 00002CAD C3                  <1> 	ret
  3565                              <1> 
  3566                              <1> optest:			;si=user bx=prog returns 1 in al if true
  3567 00002CAE 30C0                <1> 	xor al, al
  3568                              <1> opretest:
  3569 00002CB0 8A06                <1> 	mov al, [esi]
  3570 00002CB2 8A23                <1> 	mov ah, [ebx]
  3571 00002CB4 38E0                <1> 	cmp al, ah
  3572 00002CB6 7510                <1> 	jne optestfalse
  3573 00002CB8 80FC00              <1> 	cmp ah, 0
  3574 00002CBB 7404                <1> 	je optesttrue
  3575 00002CBD 43                  <1> 	inc ebx
  3576 00002CBE 46                  <1> 	inc esi
  3577 00002CBF EBEF                <1> 	jmp opretest
  3578                              <1> optesttrue:
  3579 00002CC1 3C00                <1> 	cmp al, 0
  3580 00002CC3 7503                <1> 	jne optestfalse
  3581 00002CC5 B001                <1> 	mov al, 1
  3582 00002CC7 C3                  <1> 	ret
  3583                              <1> optestfalse:
  3584 00002CC8 30C0                <1> 	xor al, al
  3585 00002CCA C3                  <1> 	ret
  3586                              <1> 
  3587                              <1> cndtest:			;si=user bx=prog cl=endchar returns 1 in al if true
  3588 00002CCB 30C0                <1> 	xor al, al
  3589 00002CCD 8A06                <1> cndretest:	mov al, [esi]
  3590 00002CCF 8A23                <1> 	mov ah, [ebx]
  3591 00002CD1 38CC                <1> 	cmp ah, cl
  3592 00002CD3 7408                <1> 	je cndtesttrue
  3593 00002CD5 38E0                <1> 	cmp al, ah
  3594 00002CD7 750B                <1> 	jne cndtestfalse
  3595 00002CD9 43                  <1> 	inc ebx
  3596 00002CDA 46                  <1> 	inc esi
  3597 00002CDB EBF0                <1> 	jmp cndretest
  3598                              <1> cndtesttrue:
  3599 00002CDD 38C8                <1> 	cmp al, cl
  3600 00002CDF 7506                <1> 	jne cndtestalmost
  3601 00002CE1 B001                <1> 	mov al, 1
  3602 00002CE3 C3                  <1> 	ret
  3603                              <1> cndtestfalse:
  3604 00002CE4 30C0                <1> 	xor al, al
  3605 00002CE6 C3                  <1> 	ret
  3606                              <1> cndtestalmost:
  3607 00002CE7 B002                <1> 	mov al, 2
  3608 00002CE9 C3                  <1> 	ret
  3609                              <1> 	
  3610                              <1> array:				;arraystart in si, arrayend in bx, arrayseperator in cx
  3611                              <1> 		                ;ends if array seperator is found backwards after 0
  3612                              <1> 	arnxt:	      
  3613 00002CEA 88E8                <1> 		mov al, ch
  3614 00002CEC 88CC                <1> 		mov ah, cl        
  3615 00002CEE 663906              <1> 		cmp [esi], ax
  3616 00002CF1 744D                <1> 		je ardn
  3617 00002CF3 66390E              <1> 		cmp [esi], cx
  3618 00002CF6 7407                <1> 		je arfnd
  3619 00002CF8 46                  <1> 		inc esi
  3620 00002CF9 39DE                <1> 		cmp esi, ebx
  3621 00002CFB 7343                <1> 		jae ardn
  3622 00002CFD EBEB                <1> 		jmp arnxt
  3623 00002CFF 81C602000000        <1> 	arfnd: add esi, 2
  3624 00002D05 891D[412D0000]      <1> 		mov [arbx], ebx
  3625 00002D0B 890D[452D0000]      <1> 		mov [arcx], ecx
  3626 00002D11 E809F0FFFF          <1> 		call print
  3627 00002D16 8935[472D0000]      <1> 		mov [arsi], esi
  3628 00002D1C BE[088B0000]        <1> 		mov esi, line
  3629 00002D21 E8F9EFFFFF          <1> 		call print
  3630 00002D26 8B1D[412D0000]      <1> 		mov ebx, [arbx]
  3631 00002D2C 668B0D[452D0000]    <1> 		mov cx, [arcx]
  3632 00002D33 8B35[472D0000]      <1> 		mov esi, [arsi]
  3633 00002D39 46                  <1> 		inc esi
  3634 00002D3A 39DE                <1> 		cmp esi, ebx
  3635 00002D3C 7302                <1> 		jae ardn
  3636 00002D3E EBAA                <1> 		jmp arnxt
  3637 00002D40 C3                  <1> 	ardn:	ret
  3638 00002D41 00000000            <1> arbx:	dw 0,0
  3639 00002D45 0000                <1> arcx:	db 0,0
  3640 00002D47 00000000            <1> arsi:	dw 0,0
  3641                              <1> 
  3642                              <1> clearbuffer:
  3643 00002D4B BE[AACD0000]        <1> 	mov esi, buf2
  3644 00002D50 B030                <1> 	mov al, '0'
  3645 00002D52 81FE[BECD0000]      <1> clearbuf: cmp esi, numbuf
  3646 00002D58 7305                <1> 	jae doneclearbuff
  3647 00002D5A 8806                <1> 	mov [esi], al
  3648 00002D5C 46                  <1> 	inc esi
  3649 00002D5D EBF3                <1> 	jmp clearbuf
  3650                              <1> doneclearbuff: 
  3651 00002D5F C3                  <1> 		ret
  3652                              <1> 
  3653                              <1> convert:
  3654 00002D60 4E                  <1> 	dec esi
  3655 00002D61 89F3                <1> 	mov ebx, esi		;place to convert into must be in esi, number to convert must be in ecx
  3656                              <1> .lp:
  3657 00002D63 89DE                <1> 	mov esi, ebx
  3658 00002D65 81EE09000000        <1> 	sub esi, 9
  3659 00002D6B 81F900CA9A3B        <1> 	cmp ecx, 1000000000
  3660 00002D71 720A                <1> 	jb .8
  3661 00002D73 81E900CA9A3B        <1> 	sub ecx, 1000000000
  3662 00002D79 FE06                <1> 	inc byte [esi]
  3663 00002D7B EBE6                <1> 	jmp .lp
  3664 00002D7D 46                  <1> .8:	inc esi
  3665 00002D7E 81F900E1F505        <1> 	cmp ecx, 100000000
  3666 00002D84 720A                <1> 	jb .7
  3667 00002D86 81E900E1F505        <1> 	sub ecx, 100000000
  3668 00002D8C FE06                <1> 	inc byte [esi]
  3669 00002D8E EBD3                <1> 	jmp .lp
  3670 00002D90 46                  <1> .7:	inc esi
  3671 00002D91 81F980969800        <1> 	cmp ecx, 10000000
  3672 00002D97 720A                <1> 	jb .6
  3673 00002D99 81E980969800        <1> 	sub ecx, 10000000
  3674 00002D9F FE06                <1> 	inc byte [esi]
  3675 00002DA1 EBC0                <1> 	jmp .lp
  3676 00002DA3 46                  <1> .6:	inc esi
  3677 00002DA4 81F940420F00        <1> 	cmp ecx, 1000000
  3678 00002DAA 720A                <1> 	jb .5
  3679 00002DAC 81E940420F00        <1> 	sub ecx, 1000000
  3680 00002DB2 FE06                <1> 	inc byte [esi]
  3681 00002DB4 EBAD                <1> 	jmp .lp
  3682 00002DB6 46                  <1> .5:	inc esi
  3683 00002DB7 81F9A0860100        <1> 	cmp ecx, 100000
  3684 00002DBD 720A                <1> 	jb .4
  3685 00002DBF 81E9A0860100        <1> 	sub ecx, 100000
  3686 00002DC5 FE06                <1> 	inc byte [esi]
  3687 00002DC7 EB9A                <1> 	jmp .lp
  3688 00002DC9 46                  <1> .4:	inc esi
  3689 00002DCA 81F910270000        <1> 	cmp ecx, 10000
  3690 00002DD0 720A                <1> 	jb .3
  3691 00002DD2 81E910270000        <1> 	sub ecx, 10000
  3692 00002DD8 FE06                <1> 	inc byte [esi]
  3693 00002DDA EB87                <1> 	jmp .lp
  3694 00002DDC 46                  <1> .3:	inc esi
  3695 00002DDD 81F9E8030000        <1> 	cmp ecx, 1000
  3696 00002DE3 720D                <1> 	jb .2
  3697 00002DE5 81E9E8030000        <1> 	sub ecx, 1000
  3698 00002DEB FE06                <1> 	inc byte [esi]
  3699 00002DED E971FFFFFF          <1> 	jmp .lp
  3700 00002DF2 46                  <1> .2:	inc esi
  3701 00002DF3 81F964000000        <1> 	cmp ecx, 100
  3702 00002DF9 720D                <1> 	jb .1
  3703 00002DFB 81E964000000        <1> 	sub ecx, 100
  3704 00002E01 FE06                <1> 	inc byte [esi]
  3705 00002E03 E95BFFFFFF          <1> 	jmp .lp
  3706 00002E08 46                  <1> .1:	inc esi
  3707 00002E09 81F90A000000        <1> 	cmp ecx, 10
  3708 00002E0F 720D                <1> 	jb .0
  3709 00002E11 81E90A000000        <1> 	sub ecx, 10
  3710 00002E17 FE06                <1> 	inc byte [esi]
  3711 00002E19 E945FFFFFF          <1> 	jmp .lp
  3712 00002E1E 46                  <1> .0:	inc esi
  3713 00002E1F 81F901000000        <1> 	cmp ecx, 1
  3714 00002E25 720D                <1> 	jb .dn
  3715 00002E27 81E901000000        <1> 	sub ecx, 1
  3716 00002E2D FE06                <1> 	inc byte [esi]
  3717 00002E2F E92FFFFFFF          <1> 	jmp .lp
  3718                              <1> .dn:
  3719 00002E34 C3                  <1> 	ret
  3720                              <1> 
  3721                              <1> 	
  3722                              <1> 
  3723 00002E35 00<rept>            <1> hexnumber times 8 db 0
  3724 00002E3D 202000              <1> hexnumberend db "  ",0
  3725                              <1> 
  3726                              <1> converthex:
  3727                              <1> .clear:	;place to convert to in esi, end of buffer in edi number in ecx
  3728 00002E40 56                  <1> 	push esi
  3729 00002E41 B030                <1> 	mov al, "0"
  3730 00002E43 39FE                <1> .clearlp: cmp esi, edi
  3731 00002E45 7305                <1> 	jae .doneclear
  3732 00002E47 8806                <1> 	mov [esi], al
  3733 00002E49 46                  <1> 	inc esi
  3734 00002E4A EBF7                <1> 	jmp .clearlp
  3735                              <1> .doneclear:
  3736 00002E4C 81EE02000000        <1> 	sub esi, 2
  3737 00002E52 89C8                <1> 	mov eax, ecx
  3738                              <1> .loop:
  3739 00002E54 30FF                <1> 	xor bh, bh
  3740 00002E56 88C3                <1> 	mov bl, al
  3741 00002E58 66C1E304            <1> 	shl bx, 4
  3742 00002E5C C0EB04              <1> 	shr bl, 4
  3743 00002E5F 86DF                <1> 	xchg bl, bh ;they are backwards
  3744 00002E61 80C330              <1> 	add bl, 48
  3745 00002E64 80FB39              <1> 	cmp bl, "9"
  3746 00002E67 7609                <1> 	jbe .goodbl
  3747 00002E69 80EB30              <1> 	sub bl, 48
  3748 00002E6C 80EB0A              <1> 	sub bl, 0xA
  3749 00002E6F 80C341              <1> 	add bl, "A"
  3750                              <1> .goodbl:
  3751 00002E72 80C730              <1> 	add bh, 48
  3752 00002E75 80FF39              <1> 	cmp bh, "9"
  3753 00002E78 7609                <1> 	jbe .goodbh
  3754 00002E7A 80EF30              <1> 	sub bh, 48
  3755 00002E7D 80EF0A              <1> 	sub bh, 0xA
  3756 00002E80 80C741              <1> 	add bh, "A"
  3757                              <1> .goodbh:
  3758 00002E83 C1E808              <1> 	shr eax, 8
  3759 00002E86 66891E              <1> 	mov [esi], bx
  3760 00002E89 81EE02000000        <1> 	sub esi, 2
  3761 00002E8F 3B3424              <1> 	cmp esi, [esp]
  3762 00002E92 7207                <1> 	jb .done
  3763 00002E94 3D00000000          <1> 	cmp eax, 0
  3764 00002E99 75B9                <1> 	jne .loop
  3765                              <1> .done:
  3766 00002E9B 5E                  <1> 	pop esi
  3767 00002E9C C3                  <1> 	ret
  3768                              <1> 	
  3769                              <1> 	
  3770 00002E9D 00                  <1> smallhex db 0
  3771 00002E9E 01                  <1> firsthexshown db 1
  3772                              <1> showhexsmall:
  3773 00002E9F C605[9D2E0000]01    <1> 	mov byte [smallhex], 1
  3774 00002EA6 E808000000          <1> 	call showhex
  3775 00002EAB C605[9D2E0000]00    <1> 	mov byte [smallhex], 0
  3776 00002EB2 C3                  <1> 	ret
  3777                              <1> showhex:
  3778 00002EB3 60                  <1> 	pusha
  3779 00002EB4 BE[352E0000]        <1> 	mov esi, hexnumber
  3780 00002EB9 BF[3D2E0000]        <1> 	mov edi, hexnumberend
  3781 00002EBE E87DFFFFFF          <1> 	call converthex
  3782 00002EC3 803D[9E2E0000]01    <1> 	cmp byte [firsthexshown], 1
  3783 00002ECA 7503                <1> 	jne .show
  3784 00002ECC 6631D2              <1> 	xor dx, dx
  3785                              <1> .show:
  3786 00002ECF 803D[9E2E0000]03    <1> 	cmp byte [firsthexshown], 3
  3787 00002ED6 750A                <1> 	jne .nonewhexline
  3788 00002ED8 BE[088B0000]        <1> 	mov esi, line
  3789 00002EDD E83DEEFFFF          <1> 	call print
  3790                              <1> .nonewhexline:
  3791 00002EE2 803D[9E2E0000]04    <1> 	cmp byte [firsthexshown], 4
  3792 00002EE9 7527                <1> 	jne .notab
  3793 00002EEB B1A0                <1> 	mov cl, 160
  3794 00002EED 28D1                <1> 	sub cl, dl
  3795 00002EEF C0E905              <1> 	shr cl, 5
  3796 00002EF2 C0E105              <1> 	shl cl, 5
  3797 00002EF5 80F900              <1> 	cmp cl, 0
  3798 00002EF8 750F                <1> 	jne .nonewline
  3799 00002EFA BE[088B0000]        <1> 	mov esi, line
  3800 00002EFF E81BEEFFFF          <1> 	call print
  3801 00002F04 E909000000          <1> 	jmp .notab
  3802                              <1> .nonewline:
  3803 00002F09 80C20F              <1> 	add dl, 15
  3804 00002F0C C0EA04              <1> 	shr dl, 4
  3805 00002F0F C0E204              <1> 	shl dl, 4
  3806                              <1> .notab:
  3807 00002F12 BE[352E0000]        <1> 	mov esi, hexnumber
  3808 00002F17 803D[9D2E0000]01    <1> 	cmp byte [smallhex],1
  3809 00002F1E 7506                <1> 	jne .nosmall
  3810 00002F20 81C606000000        <1> 	add esi, 6
  3811                              <1> .nosmall:
  3812 00002F26 803D[9E2E0000]05    <1> 	cmp byte [firsthexshown], 5
  3813 00002F2D 750A                <1> 	jne .noquiet
  3814 00002F2F E8D9EDFFFF          <1> 	call printquiet
  3815 00002F34 E918000000          <1> 	jmp .donequiet
  3816                              <1> .noquiet:
  3817 00002F39 803D[9E2E0000]06    <1> 	cmp byte [firsthexshown], 6
  3818 00002F40 750A                <1> 	jne .normal
  3819 00002F42 E8BAEDFFFF          <1> 	call printhighlight
  3820 00002F47 E905000000          <1> 	jmp .donequiet
  3821                              <1> .normal:
  3822 00002F4C E8CEEDFFFF          <1> 	call print
  3823                              <1> .donequiet:
  3824 00002F51 803D[9E2E0000]02    <1> 	cmp byte [firsthexshown], 2
  3825 00002F58 750A                <1> 	jne .shown
  3826 00002F5A BE[088B0000]        <1> 	mov esi, line
  3827 00002F5F E8BBEDFFFF          <1> 	call print
  3828                              <1> .shown:
  3829 00002F64 C605[9E2E0000]00    <1> 	mov byte [firsthexshown], 0
  3830 00002F6B 61                  <1> 	popa
  3831 00002F6C C3                  <1> 	ret
  3832                              <1> 
  3833                              <1> 
  3834 00002F6D 303030303030303030- <1> decnumber db "00000000000000"
  3835 00002F76 3030303030          <1>
  3836 00002F7B 2000                <1> decnumberend: db " ",0
  3837                              <1> 
  3838                              <1> showdec: ;;same as showhex, just uses decimal conversion
  3839 00002F7D 60                  <1> 	pusha
  3840 00002F7E BF[6D2F0000]        <1> 	mov edi, decnumber
  3841 00002F83 BE[7B2F0000]        <1> 	mov esi, decnumberend
  3842                              <1> .clear:
  3843 00002F88 C60730              <1> 	mov byte [edi], '0'
  3844 00002F8B 47                  <1> 	inc edi
  3845 00002F8C 39F7                <1> 	cmp edi, esi
  3846 00002F8E 72F8                <1> 	jb .clear
  3847 00002F90 BF[6D2F0000]        <1> 	mov edi, decnumber
  3848 00002F95 E8C6FDFFFF          <1> 	call convert
  3849 00002F9A 803D[9E2E0000]01    <1> 	cmp byte [firsthexshown], 1
  3850 00002FA1 7503                <1> 	jne .show
  3851 00002FA3 6631D2              <1> 	xor dx, dx
  3852                              <1> .show:
  3853 00002FA6 803D[9E2E0000]03    <1> 	cmp byte [firsthexshown], 3
  3854 00002FAD 750A                <1> 	jne .nonewdecline
  3855 00002FAF BE[088B0000]        <1> 	mov esi, line
  3856 00002FB4 E866EDFFFF          <1> 	call print
  3857                              <1> .nonewdecline:
  3858 00002FB9 803D[9E2E0000]04    <1> 	cmp byte [firsthexshown], 4
  3859 00002FC0 7527                <1> 	jne .notab
  3860 00002FC2 B1A0                <1> 	mov cl, 160
  3861 00002FC4 28D1                <1> 	sub cl, dl
  3862 00002FC6 C0E905              <1> 	shr cl, 5
  3863 00002FC9 C0E105              <1> 	shl cl, 5
  3864 00002FCC 80F900              <1> 	cmp cl, 0
  3865 00002FCF 750F                <1> 	jne .nonewline
  3866 00002FD1 BE[088B0000]        <1> 	mov esi, line
  3867 00002FD6 E844EDFFFF          <1> 	call print
  3868 00002FDB E909000000          <1> 	jmp .notab
  3869                              <1> .nonewline:
  3870 00002FE0 80C20F              <1> 	add dl, 15
  3871 00002FE3 C0EA04              <1> 	shr dl, 4
  3872 00002FE6 C0E204              <1> 	shl dl, 4
  3873                              <1> .notab:
  3874 00002FE9 BE[6D2F0000]        <1> 	mov esi, decnumber
  3875 00002FEE 4E                  <1> 	dec esi
  3876                              <1> .sifind:
  3877 00002FEF 46                  <1> 	inc esi
  3878 00002FF0 803E30              <1> 	cmp byte [esi], '0'
  3879 00002FF3 74FA                <1> 	je .sifind
  3880 00002FF5 E825EDFFFF          <1> 	call print
  3881 00002FFA 803D[9E2E0000]02    <1> 	cmp byte [firsthexshown], 2
  3882 00003001 750A                <1> 	jne .shown
  3883 00003003 BE[088B0000]        <1> 	mov esi, line
  3884 00003008 E812EDFFFF          <1> 	call print
  3885                              <1> .shown:
  3886 0000300D C605[9E2E0000]00    <1> 	mov byte [firsthexshown], 0
  3887 00003014 61                  <1> 	popa
  3888 00003015 C3                  <1> 	ret
  3889                              <1> 	
  3890                              <1> cnvrthextxt:
  3891 00003016 31C9                <1> 	xor ecx, ecx
  3892 00003018 31C0                <1> 	xor eax, eax
  3893 0000301A 31D2                <1> 	xor edx, edx
  3894 0000301C 31DB                <1> 	xor ebx, ebx
  3895 0000301E 4E                  <1> 	dec esi
  3896                              <1> .end:
  3897 0000301F 46                  <1> 	inc esi
  3898 00003020 8A06                <1> 	mov al, [esi]
  3899 00003022 3C00                <1> 	cmp al, 0
  3900 00003024 75F9                <1> 	jne .end
  3901                              <1> .loop:
  3902 00003026 4E                  <1> 	dec esi
  3903 00003027 8A06                <1> 	mov al, [esi]
  3904 00003029 3C41                <1> 	cmp al, "A"
  3905 0000302B 7328                <1> 	jae .char
  3906 0000302D 2C30                <1> 	sub al, 48
  3907 0000302F 3C10                <1> 	cmp al, 16
  3908 00003031 7721                <1> 	ja .done
  3909                              <1> .donechar:
  3910 00003033 81FA00000000        <1> 	cmp edx, 0
  3911 00003039 740E                <1> 	je .noshl
  3912 0000303B 89D3                <1> 	mov ebx, edx
  3913                              <1> .shl:
  3914 0000303D C1E004              <1> 	shl eax, 4
  3915 00003040 4B                  <1> 	dec ebx
  3916 00003041 81FB00000000        <1> 	cmp ebx, 0
  3917 00003047 75F4                <1> 	jne .shl
  3918                              <1> .noshl:
  3919 00003049 42                  <1> 	inc edx
  3920 0000304A 01C1                <1> 	add ecx, eax
  3921 0000304C 81FA08000000        <1> 	cmp edx, 8
  3922 00003052 72D2                <1> 	jb .loop
  3923                              <1> .done:
  3924 00003054 C3                  <1> 	ret
  3925                              <1> .char:
  3926 00003055 3C46                <1> 	cmp al, "F"
  3927 00003057 77FB                <1> 	ja .done
  3928 00003059 2C41                <1> 	sub al, "A"
  3929 0000305B 040A                <1> 	add al, 0xA
  3930 0000305D EBD4                <1> 	jmp .donechar
  3931                              <1> 	
  3932                              <1> 	
  3933                              <1> cnvrttxt: ;text to convert in esi, first part or 0 in edi
  3934 0000305F 31C9                <1> 	xor ecx, ecx
  3935 00003061 31C0                <1> 	xor eax, eax
  3936 00003063 31D2                <1> 	xor edx, edx
  3937 00003065 31DB                <1> 	xor ebx, ebx
  3938 00003067 4E                  <1> 	dec esi
  3939                              <1> .lp:
  3940 00003068 46                  <1> 	inc esi
  3941 00003069 8A06                <1> 	mov al, [esi]
  3942 0000306B 3C00                <1> 	cmp al, 0
  3943 0000306D 75F9                <1> 	jne .lp
  3944 0000306F 4E                  <1> 	dec esi
  3945 00003070 8A06                <1> 	mov al, [esi]
  3946 00003072 3C2E                <1> 	cmp al, '.'
  3947 00003074 7503                <1> 	jne .dot
  3948 00003076 46                  <1> 	inc esi
  3949 00003077 EBEF                <1> 	jmp .lp
  3950                              <1> .dot:
  3951 00003079 3C20                <1> 	cmp al, ' '
  3952 0000307B 7404                <1> 	je .zero
  3953 0000307D 3C30                <1> 	cmp al, '0'
  3954 0000307F 7504                <1> 	jne .txtlp
  3955                              <1> .zero: 
  3956 00003081 39FE                <1> 		cmp esi, edi
  3957 00003083 7458                <1> 		je .done
  3958                              <1> .txtlp:
  3959 00003085 31C0                <1> 	xor eax, eax
  3960 00003087 8A06                <1> 	mov al, [esi]
  3961 00003089 3C3D                <1> 	cmp al, '='
  3962 0000308B 7450                <1> 	je .done
  3963 0000308D 3C30                <1> 	cmp al, 48
  3964 0000308F 724C                <1> 	jb .done
  3965 00003091 3C23                <1> 	cmp al, '#'
  3966 00003093 7448                <1> 	je .done
  3967 00003095 39FE                <1> 	cmp esi, edi
  3968 00003097 7244                <1> 	jb .done
  3969 00003099 81F900000000        <1> 	cmp ecx, 0
  3970 0000309F 7708                <1> 	ja .exp
  3971 000030A1 2C30                <1> .noexp:	sub al, 48
  3972 000030A3 01C2                <1> 	add edx, eax
  3973 000030A5 4E                  <1> 	dec esi
  3974 000030A6 41                  <1> 	inc ecx
  3975 000030A7 EBDC                <1> 	jmp .txtlp
  3976 000030A9 81F900000000        <1> .exp:	cmp ecx, 0
  3977 000030AF 74F0                <1> 	je .noexp
  3978 000030B1 2C30                <1> 	sub al, 48
  3979 000030B3 51                  <1> 	push ecx
  3980 000030B4 89C3                <1> .expmul:	mov ebx, eax
  3981 000030B6 01D8                <1> 	add eax, ebx
  3982 000030B8 01D8                <1> 	add eax, ebx
  3983 000030BA 01D8                <1> 	add eax, ebx
  3984 000030BC 01D8                <1> 	add eax, ebx
  3985 000030BE 01D8                <1> 	add eax, ebx
  3986 000030C0 01D8                <1> 	add eax, ebx
  3987 000030C2 01D8                <1> 	add eax, ebx
  3988 000030C4 01D8                <1> 	add eax, ebx
  3989 000030C6 01D8                <1> 	add eax, ebx
  3990 000030C8 81E901000000        <1> 	sub ecx, 1
  3991 000030CE 81F900000000        <1> 	cmp ecx, 0
  3992 000030D4 77DE                <1> 	ja .expmul
  3993 000030D6 01C2                <1> 	add edx, eax
  3994 000030D8 59                  <1> 	pop ecx
  3995 000030D9 4E                  <1> 	dec esi
  3996 000030DA 41                  <1> 	inc ecx
  3997 000030DB EBA8                <1> 	jmp .txtlp
  3998 000030DD 89D1                <1> .done: mov ecx, edx
  3999 000030DF C3                  <1> 	ret
  4000                                      %include "source/programs.asm"
  4001 000030E0 FF2C                <1> filetypes db 255,44
  4002                              <1> progstart:		;programs start here
  4003                              <1> indexfiles:
  4004 000030E2 BE[E2300000]        <1> 	mov esi, progstart
  4005 000030E7 BB[2AAF0000]        <1> 	mov ebx, fileindex
  4006 000030EC BF[E2300000]        <1> 	mov edi, progstart
  4007 000030F1 81EF02000000        <1> 	sub edi, 2
  4008                              <1> indexloop:
  4009 000030F7 668B0E              <1> 	mov cx, [esi]
  4010                              <1> 	indexloop2:
  4011 000030FA 663B0F              <1> 		cmp cx, [edi]
  4012 000030FD 7424                <1> 		je indexloop2done
  4013 000030FF 81EF02000000        <1> 		sub edi, 2
  4014 00003105 81FF[E0300000]      <1> 		cmp edi, filetypes
  4015 0000310B 73ED                <1> 		jae indexloop2
  4016 0000310D BF[E2300000]        <1> 	mov edi, progstart
  4017 00003112 81EF02000000        <1> 	sub edi, 2
  4018 00003118 46                  <1> 	inc esi
  4019 00003119 81FE[B0500000]      <1> 	cmp esi, batchprogend
  4020 0000311F 734E                <1> 	jae indexloopdone
  4021 00003121 EBD4                <1> 	jmp indexloop
  4022                              <1> indexloop2done:
  4023 00003123 66890B              <1> 	mov [ebx], cx
  4024 00003126 81C302000000        <1> 	add ebx, 2
  4025 0000312C 81C602000000        <1> 	add esi, 2
  4026                              <1> 	nameindex:
  4027 00003132 8A0E                <1> 		mov cl, [esi]
  4028 00003134 80F900              <1> 		cmp cl, 0
  4029 00003137 7406                <1> 		je nameindexdone
  4030 00003139 880B                <1> 		mov [ebx], cl
  4031 0000313B 46                  <1> 		inc esi
  4032 0000313C 43                  <1> 		inc ebx
  4033 0000313D EBF3                <1> 		jmp nameindex
  4034                              <1> 	nameindexdone:
  4035 0000313F 43                  <1> 		inc ebx
  4036 00003140 66C7030000          <1> 		mov word [ebx], 0
  4037 00003145 81C302000000        <1> 		add ebx, 2
  4038 0000314B 46                  <1> 		inc esi
  4039 0000314C 8933                <1> 		mov [ebx], esi
  4040 0000314E 81C304000000        <1> 		add ebx, 4
  4041 00003154 66C7030000          <1> 		mov word [ebx], 0
  4042 00003159 81C302000000        <1> 		add ebx, 2
  4043 0000315F 81FB[2AB30000]      <1> 		cmp ebx, fileindexend
  4044 00003165 7308                <1> 		jae indexloopdone
  4045 00003167 81C601000000        <1> 		add esi, 1
  4046 0000316D EB88                <1> 		jmp indexloop
  4047 0000316F C605[77310000]01    <1> indexloopdone: 	mov byte [indexdone], 1
  4048 00003176 C3                  <1> 		ret
  4049 00003177 00                  <1> indexdone db 0
  4050                              <1> %include 'source/programs/_comment.asm' ;#
  4051 00003178 FF2C2300            <2> 	db 255,44,"#",0	;this lets you rem stuff
  4052 0000317C C3                  <2> 	ret 
  4053                              <1> %include 'source/programs/_math.asm' ;!
  4054 0000317D FF2C2100            <2> db 255,44,"!",0
  4055                              <2> 	num:	
  4056 00003181 E8C5FBFFFF          <2> 		call clearbuffer
  4057 00003186 C605[07340000]00    <2> 		mov byte [decimal], 0
  4058 0000318D C605[08340000]00    <2> 		mov byte [decimal2], 0
  4059 00003194 8B35[8C2C0000]      <2> 		mov esi, [currentcommandloc]
  4060 0000319A 31C0                <2> 		xor eax, eax
  4061 0000319C 31C9                <2> 		xor ecx, ecx
  4062 0000319E 31DB                <2> 		xor ebx, ebx
  4063 000031A0 8A06                <2> 	num2:	mov al, [esi]
  4064 000031A2 3C2B                <2> 		cmp al, '+'
  4065 000031A4 741B                <2> 		je operatorfound
  4066 000031A6 3C2D                <2> 		cmp al, '-'
  4067 000031A8 7417                <2> 		je operatorfound
  4068 000031AA 3C2A                <2> 		cmp al, '*'
  4069 000031AC 7413                <2> 		je operatorfound
  4070 000031AE 3C2F                <2> 		cmp al, '/'
  4071 000031B0 740F                <2> 		je operatorfound
  4072 000031B2 3C5E                <2> 		cmp al, '^'
  4073 000031B4 740B                <2> 		je operatorfound
  4074 000031B6 46                  <2> 		inc esi
  4075 000031B7 3C00                <2> 		cmp al, 0
  4076 000031B9 0F841AF8FFFF        <2> 		je near nwcmd
  4077 000031BF EBDF                <2> 		jmp num2
  4078 000031C1 50                  <2> 	operatorfound: push eax
  4079 000031C2 30E4                <2> 		xor ah, ah
  4080 000031C4 8826                <2> 		mov [esi], ah
  4081 000031C6 89F7                <2> 		mov edi, esi
  4082 000031C8 46                  <2> 		inc esi
  4083 000031C9 8A06                <2> 		mov al, [esi]
  4084 000031CB 3C25                <2> 		cmp al, '%'
  4085 000031CD 0F8462000000        <2> 		je near resultnum1
  4086                              <2> 	varnum2: 
  4087 000031D3 57                  <2> 		push edi
  4088 000031D4 E8A4000000          <2> 		call checkdecimal
  4089 000031D9 5F                  <2> 		pop edi
  4090 000031DA E880FEFFFF          <2> 		call cnvrttxt
  4091                              <2> 	vrnm2:
  4092 000031DF 89CB                <2> 		mov ebx, ecx
  4093 000031E1 53                  <2> 		push ebx
  4094 000031E2 E864FBFFFF          <2> 		call clearbuffer
  4095 000031E7 8B35[8C2C0000]      <2> 		mov esi, [currentcommandloc]
  4096 000031ED 89F7                <2> 		mov edi, esi
  4097 000031EF 46                  <2> 		inc esi
  4098 000031F0 8A06                <2> 		mov al, [esi]
  4099 000031F2 3C25                <2> 		cmp al, '%'
  4100 000031F4 0F844F000000        <2> 		je near resultnum2
  4101                              <2> 	varnum4: 
  4102 000031FA 57                  <2> 		push edi
  4103 000031FB E869000000          <2> 		call checkdecimal2
  4104 00003200 5F                  <2> 		pop edi
  4105 00003201 E859FEFFFF          <2> 		call cnvrttxt
  4106                              <2> 	vrnm4:
  4107 00003206 5B                  <2> 		pop ebx
  4108 00003207 58                  <2> 		pop eax
  4109 00003208 3C2B                <2> 		cmp al, '+'
  4110 0000320A 0F849B000000        <2> 		je near plusnum
  4111 00003210 3C2D                <2> 		cmp al, '-'
  4112 00003212 0F849F000000        <2> 		je near subnum
  4113 00003218 3C2A                <2> 		cmp al, '*'
  4114 0000321A 0F84A3000000        <2> 		je near mulnum
  4115 00003220 3C2F                <2> 		cmp al, '/'
  4116 00003222 0F84B1000000        <2> 		je near divnum
  4117 00003228 3C5E                <2> 		cmp al, '^'
  4118 0000322A 0F84CE000000        <2> 		je near expnum
  4119 00003230 E9A4F7FFFF          <2> 		jmp nwcmd
  4120                              <2> 	resultnum1:
  4121 00003235 8A0D[09340000]      <2> 		mov cl, [decimalresult]
  4122 0000323B 880D[07340000]      <2> 		mov [decimal], cl
  4123 00003241 8B0D[0A340000]      <2> 		mov ecx, [result]
  4124 00003247 EB96                <2> 		jmp vrnm2
  4125                              <2> 	resultnum2:
  4126 00003249 8A0D[07340000]      <2> 		mov cl, [decimal]
  4127 0000324F 880D[08340000]      <2> 		mov [decimal2], cl
  4128 00003255 8A0D[09340000]      <2> 		mov cl, [decimalresult]
  4129 0000325B 880D[07340000]      <2> 		mov [decimal], cl
  4130 00003261 8B0D[0A340000]      <2> 		mov ecx, [result]
  4131 00003267 EB9D                <2> 		jmp vrnm4
  4132                              <2> 	checkdecimal2:
  4133 00003269 8A25[07340000]      <2> 		mov ah, [decimal]
  4134 0000326F 8825[08340000]      <2> 		mov [decimal2], ah
  4135 00003275 30E4                <2> 		xor ah, ah
  4136 00003277 8825[07340000]      <2> 		mov [decimal], ah
  4137                              <2> 	checkdecimal:
  4138 0000327D 89F7                <2> 		mov edi, esi
  4139                              <2> 	chkdec1:
  4140 0000327F 8A07                <2> 		mov al, [edi]
  4141 00003281 3C2E                <2> 		cmp al, '.'
  4142 00003283 0F840B000000        <2> 		je near fnddec
  4143 00003289 3C00                <2> 		cmp al, 0
  4144 0000328B 0F8419000000        <2> 		je near nodecimal
  4145 00003291 47                  <2> 		inc edi
  4146 00003292 EBEB                <2> 		jmp chkdec1
  4147                              <2> 	fnddec:
  4148 00003294 8A4701              <2> 		mov al, [edi + 1]
  4149 00003297 8807                <2> 		mov [edi], al
  4150 00003299 3C00                <2> 		cmp al, 0
  4151 0000329B 0F8409000000        <2> 		je near nodecimal
  4152 000032A1 FE05[07340000]      <2> 		inc byte [decimal]
  4153 000032A7 47                  <2> 		inc edi
  4154 000032A8 EBEA                <2> 		jmp fnddec
  4155                              <2> 	nodecimal:
  4156 000032AA C3                  <2> 		ret
  4157                              <2> 	plusnum:
  4158 000032AB E815010000          <2> 		call decaddfix
  4159 000032B0 01D9                <2> 		add ecx, ebx
  4160 000032B2 E98A000000          <2> 		jmp retnum
  4161                              <2> 	subnum:
  4162 000032B7 E809010000          <2> 		call decaddfix
  4163 000032BC 29D9                <2> 		sub ecx, ebx
  4164 000032BE E97E000000          <2> 		jmp retnum
  4165                              <2> 	mulnum:
  4166 000032C3 A0[08340000]        <2> 		mov al, [decimal2]
  4167 000032C8 0005[07340000]      <2> 		add [decimal], al
  4168 000032CE 89C8                <2> 		mov eax, ecx
  4169 000032D0 F7E3                <2> 		mul ebx
  4170 000032D2 89C1                <2> 		mov ecx, eax
  4171 000032D4 E968000000          <2> 		jmp retnum
  4172                              <2> 	divnum:
  4173 000032D9 E8E7000000          <2> 		call decaddfix
  4174 000032DE 30C0                <2> 		xor al, al
  4175 000032E0 A2[07340000]        <2> 		mov [decimal], al
  4176 000032E5 31D2                <2> 		xor edx, edx
  4177 000032E7 89C8                <2> 		mov eax, ecx
  4178 000032E9 81FB00000000        <2> 		cmp ebx, 0
  4179 000032EF 0F844C000000        <2> 		je near retnum
  4180 000032F5 F7F3                <2> 		div ebx
  4181 000032F7 89C1                <2> 		mov ecx, eax
  4182 000032F9 E943000000          <2> 		jmp retnum
  4183                              <2> 	expnum:
  4184 000032FE 8A15[07340000]      <2> 		mov dl, [decimal]
  4185 00003304 8815[08340000]      <2> 		mov [decimal2], dl
  4186 0000330A 31D2                <2> 		xor edx, edx
  4187 0000330C 89C8                <2> 		mov eax, ecx
  4188 0000330E 89D9                <2> 		mov ecx, ebx
  4189 00003310 89C3                <2> 		mov ebx, eax
  4190 00003312 81F900000000        <2> 		cmp ecx, 0
  4191 00003318 7422                <2> 		je noexpnum
  4192 0000331A 49                  <2> 		dec ecx
  4193 0000331B 81F900000000        <2> 		cmp ecx, 0
  4194 00003321 7412                <2> 		je noexpnumlp
  4195 00003323 F7E3                <2> 	expnumlp: mul ebx
  4196 00003325 8A15[08340000]      <2> 		mov dl, [decimal2]
  4197 0000332B 0015[07340000]      <2> 		add [decimal], dl
  4198 00003331 31D2                <2> 		xor edx, edx
  4199 00003333 E2EE                <2> 		loop expnumlp
  4200                              <2> 	noexpnumlp:
  4201 00003335 89C1                <2> 		mov ecx, eax
  4202 00003337 E905000000          <2> 		jmp retnum
  4203                              <2> 	noexpnum:
  4204 0000333C B901000000          <2> 		mov ecx, 1
  4205                              <2> 	retnum: 
  4206 00003341 BE[BECD0000]        <2> 		mov esi, numbuf
  4207 00003346 890D[0A340000]      <2> 		mov [result], ecx
  4208 0000334C E80FFAFFFF          <2> 		call convert
  4209 00003351 BE[BECD0000]        <2> 		mov esi, numbuf
  4210 00003356 8A25[07340000]      <2> 		mov ah, [decimal]
  4211 0000335C 8825[09340000]      <2> 		mov [decimalresult], ah
  4212 00003362 80FC00              <2> 		cmp ah, 0
  4213 00003365 0F8425000000        <2> 		je near noputdecimal
  4214                              <2> 	putdecimal:
  4215 0000336B 4E                  <2> 		dec esi
  4216 0000336C FECC                <2> 		dec ah
  4217 0000336E 80FC00              <2> 		cmp ah, 0
  4218 00003371 0F87F4FFFFFF        <2> 		ja near putdecimal
  4219 00003377 4E                  <2> 		dec esi
  4220 00003378 8A06                <2> 		mov al, [esi]
  4221 0000337A C6062E              <2> 		mov byte [esi], '.'
  4222                              <2> 	decputloop:
  4223 0000337D 4E                  <2> 		dec esi
  4224 0000337E 8A26                <2> 		mov ah, [esi]
  4225 00003380 8806                <2> 		mov [esi], al
  4226 00003382 88E0                <2> 		mov al, ah
  4227 00003384 81FE[AACD0000]      <2> 		cmp esi, buf2
  4228 0000338A 0F87EDFFFFFF        <2> 		ja near decputloop
  4229                              <2> 	noputdecimal:
  4230 00003390 BE[AACD0000]        <2> 		mov esi, buf2
  4231 00003395 E809000000          <2> 		call chkadd
  4232 0000339A E93AF6FFFF          <2> 		jmp nwcmd
  4233 0000339F 00000000            <2> edxnumbuf dw 0,0
  4234 000033A3 8A06                <2> 	chkadd: mov al, [esi]
  4235 000033A5 3C30                <2> 		cmp al, '0'
  4236 000033A7 750C                <2> 		jne dnadd
  4237 000033A9 46                  <2> 		inc esi
  4238 000033AA 81FE[BECD0000]      <2> 		cmp esi, numbuf
  4239 000033B0 7402                <2> 		je dnaddm1
  4240 000033B2 EBEF                <2> 		jmp chkadd
  4241 000033B4 4E                  <2> 	dnaddm1: dec esi
  4242 000033B5 E865E9FFFF          <2> 	dnadd:	call print
  4243 000033BA BE[088B0000]        <2> 		mov esi, line
  4244 000033BF E85BE9FFFF          <2> 		call print
  4245 000033C4 C3                  <2> 		ret
  4246                              <2> 		
  4247                              <2> 	decaddfix:
  4248 000033C5 A0[08340000]        <2> 		mov al, [decimal2]
  4249 000033CA 8A25[07340000]      <2> 		mov ah, [decimal]
  4250 000033D0 38E0                <2> 		cmp al, ah
  4251 000033D2 7432                <2> 		je gooddecadd
  4252 000033D4 38E0                <2> 		cmp al, ah
  4253 000033D6 721A                <2> 		jb lowdecadd
  4254                              <2> 	highdecadd:
  4255 000033D8 FEC4                <2> 		inc ah
  4256 000033DA 89CA                <2> 		mov edx, ecx
  4257 000033DC C1E103              <2> 		shl ecx, 3
  4258 000033DF 01D1                <2> 		add ecx, edx
  4259 000033E1 01D1                <2> 		add ecx, edx
  4260 000033E3 38E0                <2> 		cmp al, ah
  4261 000033E5 77F1                <2> 		ja highdecadd
  4262 000033E7 8825[07340000]      <2> 		mov [decimal], ah
  4263 000033ED E914000000          <2> 		jmp gooddecadd
  4264                              <2> 	lowdecadd:
  4265 000033F2 FEC0                <2> 		inc al
  4266 000033F4 89DA                <2> 		mov edx, ebx
  4267 000033F6 C1E303              <2> 		shl ebx, 3
  4268 000033F9 01D3                <2> 		add ebx, edx
  4269 000033FB 01D3                <2> 		add ebx, edx
  4270 000033FD 38E0                <2> 		cmp al, ah
  4271 000033FF 72F1                <2> 		jb lowdecadd
  4272 00003401 A2[07340000]        <2> 		mov [decimal], al
  4273                              <2> 	gooddecadd:
  4274 00003406 C3                  <2> 		ret
  4275                              <2> 		
  4276 00003407 00                  <2> decimal db 0
  4277 00003408 00                  <2> decimal2 db 0
  4278 00003409 00                  <2> decimalresult db 0
  4279 0000340A 00000000            <2> result dd 0
  4280                              <1> %include 'source/programs/_variables.asm' ;% and $
  4281 0000340E FF2C2500            <2> db 255,44,"%",0
  4282                              <2> 	ans:
  4283 00003412 BE[AACD0000]        <2> 		mov esi, buf2
  4284 00003417 E887FFFFFF          <2> 		call chkadd
  4285 0000341C C3                  <2> 		ret
  4286                              <2> 		
  4287 0000341D FF2C2400            <2> db 255,44,"$",0
  4288 00003421 8B35[8C2C0000]      <2> var: mov esi, [currentcommandloc]
  4289 00003427 BB[AAB50000]        <2> 	mov ebx, variables
  4290 0000342C 8A06                <2> lkeq:	mov al, [esi]
  4291 0000342E 3C3D                <2> 	cmp al, '='
  4292 00003430 741B                <2> 	je eqfnd	;is there an '=' sign?
  4293 00003432 3C00                <2> 	cmp al, 0
  4294 00003434 7403                <2> 	je echovars
  4295 00003436 46                  <2> 	inc esi
  4296 00003437 EBF3                <2> 	jmp lkeq
  4297 00003439 BE[AAB50000]        <2> echovars: mov esi, variables
  4298 0000343E BB[AAC50000]        <2> 	mov ebx, varend
  4299 00003443 B105                <2> 	mov cl, 5
  4300 00003445 B504                <2> 	mov ch, 4
  4301 00003447 E89EF8FFFF          <2> 	call array
  4302 0000344C C3                  <2> 	ret
  4303 0000344D 46                  <2> eqfnd:	inc esi
  4304 0000344E 8A06                <2> 	mov al, [esi]
  4305 00003450 3C00                <2> 	cmp al, 0
  4306 00003452 7410                <2> 	je readvar
  4307 00003454 8B35[8C2C0000]      <2> 	mov esi, [currentcommandloc]
  4308 0000345A BB[AAB50000]        <2> 	mov ebx, variables
  4309 0000345F E919000000          <2> 	jmp seek
  4310                              <2> readvar:
  4311 00003464 B00A                <2> 	mov al, 10
  4312 00003466 66BB0700            <2> 	mov bx, 7
  4313 0000346A C605[D9210000]00    <2> 	mov byte [commandedit], 0
  4314 00003471 BF[AACD0000]        <2> 	mov edi, buftxtend
  4315 00003476 E88CE9FFFF          <2> 	call rdprint
  4316 0000347B EBA4                <2> 	jmp var
  4317 0000347D 668B03              <2> seek:	mov ax, [ebx]
  4318 00003480 B105                <2> 	mov cl, 5
  4319 00003482 B504                <2> 	mov ch, 4
  4320 00003484 663D0000            <2> 	cmp ax, 0
  4321 00003488 0F845B000000        <2> 	je near save
  4322 0000348E 6639C8              <2> 	cmp ax, cx
  4323 00003491 7403                <2> 	je skfnd
  4324 00003493 43                  <2> 	inc ebx
  4325 00003494 EBE7                <2> 	jmp seek
  4326 00003496 8B35[8C2C0000]      <2> skfnd:	mov esi, [currentcommandloc]
  4327 0000349C 46                  <2> 	inc esi
  4328 0000349D 81C302000000        <2> 	add ebx, 2
  4329 000034A3 89DF                <2> 	mov edi, ebx
  4330 000034A5 B13D                <2> 	mov cl, '='
  4331 000034A7 E81FF8FFFF          <2> 	call cndtest
  4332 000034AC 3C01                <2> 	cmp al, 1	
  4333 000034AE 7418                <2> 	je varfnd
  4334 000034B0 89FB                <2> 	mov ebx, edi
  4335 000034B2 8B35[8C2C0000]      <2> 	mov esi, [currentcommandloc]
  4336 000034B8 668B03              <2> 	mov ax, [ebx]
  4337 000034BB 663D0000            <2> 	cmp ax, 0
  4338 000034BF 0F8424000000        <2> 	je near save
  4339 000034C5 43                  <2> 	inc ebx
  4340 000034C6 EBB5                <2> 	jmp seek
  4341 000034C8 8A03                <2> varfnd:	mov al, [ebx]
  4342 000034CA 3C04                <2> 	cmp al, 4
  4343 000034CC 7404                <2> 	je save2
  4344 000034CE 4B                  <2> 	dec ebx
  4345 000034CF 4E                  <2> 	dec esi
  4346 000034D0 EBF6                <2> 	jmp varfnd
  4347 000034D2 4B                  <2> save2:	dec ebx
  4348 000034D3 4E                  <2> 	dec esi
  4349 000034D4 8A03                <2> 	mov al, [ebx]
  4350 000034D6 3C05                <2> 	cmp al, 5
  4351 000034D8 7402                <2> 	je remove
  4352 000034DA EBEC                <2> 	jmp varfnd
  4353 000034DC 8A03                <2> remove: mov al, [ebx]
  4354 000034DE 3C00                <2> 	cmp al, 0
  4355 000034E0 749B                <2> 	je seek
  4356 000034E2 30C0                <2> 	xor al, al
  4357 000034E4 8803                <2> 	mov [ebx], al
  4358 000034E6 43                  <2> 	inc ebx
  4359 000034E7 EBF3                <2> 	jmp remove	;do not need for now-need defragmentation
  4360 000034E9 8B35[8C2C0000]      <2> save:	mov esi, [currentcommandloc]
  4361 000034EF 43                  <2> 	inc ebx
  4362 000034F0 B005                <2> 	mov al, 5
  4363 000034F2 B404                <2> 	mov ah, 4
  4364 000034F4 668903              <2> 	mov [ebx], ax
  4365 000034F7 43                  <2> 	inc ebx
  4366 000034F8 43                  <2> svhere:	inc ebx
  4367 000034F9 46                  <2> 	inc esi
  4368 000034FA 8A06                <2> 	mov al, [esi]
  4369 000034FC 3C00                <2> 	cmp al, 0
  4370 000034FE 0F844A000000        <2> 	je near svdone
  4371 00003504 3C25                <2> 	cmp al, '%'
  4372 00003506 7404                <2> 	je ans2
  4373 00003508 8803                <2> 	mov [ebx], al	
  4374 0000350A EBEC                <2> 	jmp svhere
  4375 0000350C 56                  <2> ans2:	push esi
  4376 0000350D BE[AACD0000]        <2> 	mov esi, buf2
  4377 00003512 E823000000          <2> 	call ansfnd
  4378 00003517 E803000000          <2> 	call anscp
  4379 0000351C 5E                  <2> 	pop esi
  4380 0000351D EBD9                <2> 	jmp svhere
  4381 0000351F 8A06                <2> anscp:	mov al, [esi]
  4382 00003521 8803                <2> 	mov [ebx], al
  4383 00003523 81FE[BECD0000]      <2> 	cmp esi, numbuf
  4384 00003529 74CD                <2> 	je svhere
  4385 0000352B 3C00                <2> 	cmp al, 0
  4386 0000352D 74C9                <2> 	je svhere
  4387 0000352F 43                  <2> 	inc ebx
  4388 00003530 46                  <2> 	inc esi
  4389 00003531 EBEC                <2> 	jmp anscp
  4390 00003533 5E                  <2> ansnf:	pop esi
  4391 00003534 8A06                <2> 	mov al, [esi]
  4392 00003536 8803                <2> 	mov [ebx], al
  4393 00003538 EBBE                <2> 	jmp svhere
  4394 0000353A 46                  <2> ansfnd:	inc esi
  4395 0000353B 81FE[BDCD0000]      <2> 	cmp esi, numbuf - 1
  4396 00003541 740A                <2> 	je fndans
  4397 00003543 8A06                <2> 	mov al, [esi]
  4398 00003545 3C00                <2> 	cmp al, 0
  4399 00003547 74EA                <2> 	je ansnf
  4400 00003549 3C30                <2> 	cmp al, '0'
  4401 0000354B 74ED                <2> 	je ansfnd
  4402                              <2> fndans:
  4403 0000354D C3                  <2> 	ret
  4404 0000354E 30C0                <2> svdone:	xor al, al
  4405 00003550 8803                <2> 	mov [ebx], al
  4406 00003552 C3                  <2> 	ret
  4407                              <1> %include 'source/programs/_run.asm' ;./
  4408                              <2> 
  4409 00003553 7F454C46            <2> 	elfstart db 0x7F,"ELF"
  4410 00003557 FF2C2E2F00          <2> 	db 255,44,"./",0
  4411                              <2> rundiskprog:
  4412 0000355C 8B3D[8C2C0000]      <2> 	mov edi, [currentcommandloc]
  4413 00003562 81C702000000        <2> 	add edi, 2
  4414 00003568 BE00004000          <2> 	mov esi, 0x400000
  4415 0000356D E8792D0000          <2> 	call loadfile
  4416 00003572 81FA94010000        <2> 	cmp edx, 404
  4417 00003578 746A                <2> 	je noprogfound
  4418 0000357A BB00004000          <2> 	mov ebx, 0x400000
  4419 0000357F A1[53350000]        <2> 	mov eax, [elfstart]
  4420 00003584 3903                <2> 	cmp [ebx], eax
  4421 00003586 0F8437000000        <2> 	je near runelf
  4422 0000358C 66813B4558          <2> 	cmp word [ebx], "EX"
  4423 00003591 7577                <2> 	jne progbatchfound
  4424 00003593 81C302000000        <2> 	add ebx, 2
  4425 00003599 8B3D[8C2C0000]      <2> 	mov edi, [currentcommandloc]
  4426 0000359F 81C702000000        <2> 	add edi, 2
  4427                              <2> findspaceprog:
  4428 000035A5 8A07                <2> 	mov al, [edi]
  4429 000035A7 47                  <2> 	inc edi
  4430 000035A8 3C20                <2> 	cmp al, " "
  4431 000035AA 75F9                <2> 	jne findspaceprog
  4432                              <2> findnonspaceprog:
  4433 000035AC 8A07                <2> 	mov al, [edi]
  4434 000035AE 47                  <2> 	inc edi
  4435 000035AF 3C20                <2> 	cmp al, " "
  4436 000035B1 74F9                <2> 	je findnonspaceprog
  4437 000035B3 4F                  <2> 	dec edi
  4438 000035B4 8925[2AB30000]      <2> 	mov [previousstack], esp
  4439 000035BA FFD3                <2> 	call ebx
  4440 000035BC 8B25[2AB30000]      <2> 	mov esp, [previousstack]
  4441 000035C2 C3                  <2> 	ret
  4442                              <2> runelf:
  4443 000035C3 8B3D[8C2C0000]      <2> 	mov edi, [currentcommandloc]
  4444 000035C9 81C702000000        <2> 	add edi, 2
  4445 000035CF 81C380000000        <2> 	add ebx, 0x80
  4446 000035D5 8925[2AB30000]      <2> 	mov [previousstack], esp
  4447 000035DB FFD3                <2> 	call ebx
  4448 000035DD 8B25[2AB30000]      <2> 	mov esp, [previousstack]
  4449 000035E3 C3                  <2> 	ret
  4450                              <2> noprogfound:
  4451 000035E4 BE[CF8A0000]        <2> 	mov esi, notfound1
  4452 000035E9 E831E7FFFF          <2> 	call print
  4453 000035EE 8B35[8C2C0000]      <2> 	mov esi, [currentcommandloc]
  4454 000035F4 81C602000000        <2> 	add esi, 2
  4455 000035FA E820E7FFFF          <2> 	call print
  4456 000035FF BE[D78A0000]        <2> 	mov esi, notfound2
  4457 00003604 E816E7FFFF          <2> 	call print
  4458 00003609 C3                  <2> 	ret
  4459                              <2> progbatchfound:
  4460 0000360A BF00004000          <2> 		mov edi, 0x400000
  4461 0000360F C605[A4B50000]01    <2> 		mov byte [BATCHISON], 1
  4462                              <2> 	batchrunloop:
  4463 00003616 E89BF3FFFF          <2> 		call buftxtclear
  4464 0000361B BE[AAC90000]        <2> 		mov esi, buftxt
  4465 00003620 8935[8C2C0000]      <2> 		mov [currentcommandloc], esi
  4466                              <2> 	batchrunloop2:
  4467 00003626 B10A                <2> 		mov cl, 10
  4468 00003628 B50D                <2> 		mov ch, 13
  4469 0000362A 380F                <2> 		cmp [edi], cl
  4470 0000362C 0F8419000000        <2> 		je near nxtbatchrunline
  4471 00003632 382F                <2> 		cmp [edi], ch
  4472 00003634 0F8411000000        <2> 		je near nxtbatchrunline
  4473 0000363A 803F00              <2> 		cmp byte [edi], 0
  4474 0000363D 0F8408000000        <2> 		je near nxtbatchrunline
  4475 00003643 8A07                <2> 		mov al, [edi]
  4476 00003645 8806                <2> 		mov [esi], al
  4477 00003647 46                  <2> 		inc esi
  4478 00003648 47                  <2> 		inc edi
  4479 00003649 EBDB                <2> 		jmp batchrunloop2
  4480                              <2> 	nxtbatchrunline:
  4481 0000364B 47                  <2> 		inc edi
  4482 0000364C 380F                <2> 		cmp [edi], cl
  4483 0000364E 74FB                <2> 		je nxtbatchrunline
  4484 00003650 382F                <2> 		cmp [edi], ch
  4485 00003652 74F7                <2> 		je nxtbatchrunline
  4486 00003654 893D[B2360000]      <2> 		mov [batchedi], edi
  4487 0000365A 893D[A0B50000]      <2> 		mov [BATCHPOS], edi
  4488 00003660 C60600              <2> 		mov byte [esi], 0
  4489 00003663 BE[AAC90000]        <2> 		mov esi, buftxt
  4490 00003668 803E00              <2> 		cmp byte [esi], 0
  4491 0000366B 0F8439000000        <2> 		je near nobatchfoundrun
  4492 00003671 31DB                <2> 		xor ebx, ebx
  4493 00003673 8A1D[3BB50000]      <2> 		mov bl, [IFON]
  4494 00003679 80FB00              <2> 		cmp bl, 0
  4495 0000367C 0F8534000000        <2> 		jne near iftestbatch
  4496                              <2> 	doneiftest:
  4497 00003682 803D[88370000]00    <2> 		cmp byte [runnextline], 0
  4498 00003689 0F8405000000        <2> 		je near noruniftest
  4499 0000368F E822F5FFFF          <2> 		call run
  4500                              <2> 	noruniftest:
  4501 00003694 C605[88370000]01    <2> 		mov byte [runnextline], 1
  4502 0000369B 8B3D[B2360000]      <2> 		mov edi, [batchedi]
  4503 000036A1 803F00              <2> 		cmp byte [edi], 0
  4504 000036A4 0F856CFFFFFF        <2> 		jne near batchrunloop
  4505                              <2> 	nobatchfoundrun:
  4506 000036AA C605[A4B50000]00    <2> 		mov byte [BATCHISON], 0
  4507 000036B1 C3                  <2> 		ret
  4508                              <2> 	
  4509 000036B2 00000000            <2> batchedi dd 0	
  4510                              <2> 	
  4511                              <2> 	iftestbatch:
  4512 000036B6 BE[3CB50000]        <2> 		mov esi, IFTRUE
  4513 000036BB 01DE                <2> 		add esi, ebx
  4514 000036BD 803E00              <2> 		cmp byte [esi], 0
  4515 000036C0 0F85BCFFFFFF        <2> 		jne near doneiftest
  4516 000036C6 881D[89370000]      <2> 		mov [iffalsebuf], bl
  4517 000036CC 803D[A5B50000]01    <2> 		cmp byte [LOOPON], 1
  4518 000036D3 0F8513000000        <2> 		jne near fifindbatch
  4519 000036D9 E938FFFFFF          <2> 		jmp batchrunloop
  4520                              <2> 	elsetestbatch:
  4521 000036DE C60601              <2> 		mov byte [esi], 1
  4522 000036E1 81C705000000        <2> 		add edi, 5
  4523 000036E7 E92AFFFFFF          <2> 		jmp batchrunloop
  4524                              <2> 	fifindbatch:
  4525 000036EC 66B96966            <2> 		mov cx, "if"
  4526 000036F0 66B86669            <2> 		mov ax, "fi"
  4527 000036F4 663907              <2> 		cmp [edi], ax
  4528 000036F7 0F8424000000        <2> 		je near fifoundbatch
  4529 000036FD 66390F              <2> 		cmp [edi], cx
  4530 00003700 0F8465000000        <2> 		je near iffoundbatch
  4531 00003706 803F00              <2> 		cmp byte [edi], 0
  4532 00003709 0F8412000000        <2> 		je near fifoundbatch
  4533 0000370F B8656C7365          <2> 		mov eax, "else"
  4534 00003714 3907                <2> 		cmp [edi], eax
  4535 00003716 0F84C2FFFFFF        <2> 		je near elsetestbatch
  4536 0000371C E973FFFFFF          <2> 		jmp noruniftest
  4537                              <2> 	fifoundbatch:
  4538 00003721 81C702000000        <2> 		add edi, 2
  4539 00003727 B00A                <2> 		mov al, 10
  4540 00003729 3807                <2> 		cmp [edi], al
  4541 0000372B 0F840B000000        <2> 		je near goodfibatch
  4542 00003731 803F00              <2> 		cmp byte [edi], 0
  4543 00003734 0F8470FFFFFF        <2> 		je near nobatchfoundrun
  4544 0000373A EBB0                <2> 		jmp fifindbatch
  4545                              <2> 	goodfibatch:
  4546 0000373C B001                <2> 		mov al, 1
  4547 0000373E 2805[3BB50000]      <2> 		sub [IFON], al 
  4548 00003744 A0[3BB50000]        <2> 		mov al, [IFON]
  4549 00003749 8A1D[89370000]      <2> 		mov bl, [iffalsebuf]
  4550 0000374F 38D8                <2> 		cmp al, bl
  4551 00003751 7799                <2> 		ja fifindbatch
  4552 00003753 8B35[8C2C0000]      <2> 		mov esi, [currentcommandloc]
  4553 00003759 81EF02000000        <2> 		sub edi, 2
  4554 0000375F C605[88370000]00    <2> 		mov byte [runnextline], 0
  4555 00003766 E9ABFEFFFF          <2> 		jmp batchrunloop
  4556                              <2> 	iffoundbatch:
  4557 0000376B B020                <2> 		mov al, ' '
  4558 0000376D 81C702000000        <2> 		add edi, 2
  4559 00003773 3807                <2> 		cmp [edi], al
  4560 00003775 0F8571FFFFFF        <2> 		jne near fifindbatch
  4561 0000377B B001                <2> 		mov al, 1
  4562 0000377D 0005[3BB50000]      <2> 		add [IFON], al
  4563 00003783 E964FFFFFF          <2> 		jmp fifindbatch
  4564                              <2> 		
  4565                              <2> 		
  4566 00003788 01                  <2> runnextline db 1
  4567 00003789 00                  <2> iffalsebuf db 0
  4568                              <2> 
  4569 0000378A C3                  <2> notbatch: ret 
  4570                              <1> %ifdef network.included
  4571                              <1> 	%include 'source/programs/arp.asm'
  4572 0000378B FF2C61727000        <2> db 255,44,"arp",0
  4573                              <2> 	;ARP TESTING
  4574                              <2> arptest:
  4575 00003791 8B35[8C2C0000]      <2> 	mov esi, [currentcommandloc]
  4576 00003797 81C604000000        <2> 	add esi, 4
  4577 0000379D E832520000          <2> 	call strtoip
  4578 000037A2 890D[49380000]      <2> 	mov [arptargetinfo + 6], ecx ;move to next ip
  4579 000037A8 E86D520000          <2> 	call showip
  4580 000037AD 803D[4D380000]01    <2> 	cmp byte [arpconfig], 1
  4581 000037B4 7405                <2> 	je arptest2
  4582 000037B6 E841000000          <2> 	call arpinit
  4583                              <2> arptest2:	;try to reach 192.168.0.1
  4584 000037BB 8B0D[C18A0000]      <2> 	mov ecx, [sysmac]
  4585 000037C1 668B1D[C58A0000]    <2> 	mov bx, [sysmac + 4]
  4586 000037C8 890D[29380000]      <2> 	mov [sourcemac], ecx
  4587 000037CE 66891D[2D380000]    <2> 	mov [sourcemac + 4],bx
  4588 000037D5 890D[39380000]      <2> 	mov [arpsenderinfo], ecx
  4589 000037DB 66891D[3D380000]    <2> 	mov [arpsenderinfo + 4], bx
  4590 000037E2 BF[23380000]        <2> 	mov edi, frame
  4591 000037E7 BE[4D380000]        <2> 	mov esi, framend
  4592 000037EC E8A3510000          <2> 	call sendpacket
  4593 000037F1 BE[088B0000]        <2> 	mov esi, line
  4594 000037F6 E824E5FFFF          <2> 	call print
  4595 000037FB C3                  <2> 	ret
  4596                              <2> 	
  4597                              <2> arpinit:
  4598 000037FC BE[4E380000]        <2> 	mov esi, arptable
  4599 00003801 BF[C18A0000]        <2> 	mov edi, sysmac
  4600 00003806 BB[BD8A0000]        <2> 	mov ebx, sysip
  4601 0000380B 8B0F                <2> 	mov ecx, [edi]
  4602 0000380D 890E                <2> 	mov [esi], ecx
  4603 0000380F 668B4F04            <2> 	mov cx, [edi + 4]
  4604 00003813 894E04              <2> 	mov [esi + 4], ecx
  4605 00003816 8B0B                <2> 	mov ecx, [ebx]
  4606 00003818 894E06              <2> 	mov [esi + 6], ecx
  4607 0000381B C605[4D380000]01    <2> 	mov byte [arpconfig], 1
  4608 00003822 C3                  <2> 	ret
  4609                              <2> 	
  4610                              <2> ;example frame
  4611                              <2> frame:
  4612 00003823 FFFFFFFFFFFF        <2> destinationmac:	db 0xFF,0xFF,0xFF,0xFF,0xFF,0xFF
  4613 00003829 000000000000        <2> sourcemac:		db 0,0,0,0,0,0
  4614 0000382F 0806                <2> ethertype:		db 8,6			;arp is 0x806
  4615                              <2> 	;;example packet
  4616 00003831 0100                <2> 	arppacket: 		dw 1			;ethernet is 1
  4617 00003833 0800                <2> 	arpprotocol: 	db 8,0			;ip is 0x800
  4618 00003835 0604                <2> 					db 6,4			;length of mac, length of ip
  4619 00003837 0001                <2> 	arpoperation: 	db 0,1			;one for arp request
  4620 00003839 000000000000        <2> 	arpsenderinfo:	db 0x00,0x00,0x00,0x00,0x00,0x00	;mac
  4621 0000383F C0A80073            <2> 					db 192,168,0,115		;ip
  4622 00003843 000000000000        <2> 	arptargetinfo:	db 0x00,0x00,0x00,0x00,0x00,0x00	;ignored in requests
  4623 00003849 C0A80000            <2> 					db 192,168,0,0			;ip
  4624                              <2> framend:
  4625                              <2> 
  4626 0000384D 00                  <2> arpconfig db 0
  4627                              <2> arptable:	;;mac,ip
  4628 0000384E 000000000000000000- <2> 	times 10 db 0,0,0,0,0,0,0,0,0,0
  4629 00003857 00<rept>            <2>
  4630                              <2> arptableend:	
  4631                              <1> %endif
  4632                              <1> %include 'source/programs/batch.asm'
  4633 000038B2 FF2C626174636800    <2> db 255,44,"batch",0
  4634                              <2> 	batchst: 
  4635 000038BA 8B3D[8C2C0000]      <2> 		mov edi, [currentcommandloc]
  4636 000038C0 81C706000000        <2> 		add edi, 6
  4637 000038C6 803F00              <2> 		cmp byte [edi], 0
  4638 000038C9 0F846D000000        <2> 		je near nonamefound
  4639 000038CF BE00004000          <2> 		mov esi, 0x400000
  4640 000038D4 E8122A0000          <2> 		call loadfile
  4641 000038D9 89D0                <2> 		mov eax, edx
  4642 000038DB 3D94010000          <2> 		cmp eax, 404
  4643 000038E0 7465                <2> 		je goodbatchname
  4644 000038E2 BE[ED380000]        <2> 		mov esi, badbatchname
  4645 000038E7 E833E4FFFF          <2> 		call print
  4646 000038EC C3                  <2> 		ret
  4647 000038ED 546869732066696C65- <2> 		badbatchname db "This file already exists!",10,0
  4648 000038F6 20616C726561647920- <2>
  4649 000038FF 657869737473210A00  <2>
  4650 00003908 596F75206861766520- <2> 		namenotfoundbatch db "You have to type a name after the command.",10,0
  4651 00003911 746F20747970652061- <2>
  4652 0000391A 206E616D6520616674- <2>
  4653 00003923 65722074686520636F- <2>
  4654 0000392C 6D6D616E642E0A00    <2>
  4655 00003934 00000000            <2> 		esicache3 dd 0
  4656 00003938 00000000            <2> 		esicache2 dd 0
  4657                              <2> 	nonamefound:
  4658 0000393C BE[08390000]        <2> 		mov esi, namenotfoundbatch
  4659 00003941 E8D9E3FFFF          <2> 		call print
  4660 00003946 C3                  <2> 		ret
  4661                              <2> 	goodbatchname:
  4662 00003947 BE00004000          <2> 		mov esi, 0x400000
  4663                              <2> 	batchcreate:
  4664 0000394C 8935[34390000]      <2> 		mov [esicache3], esi
  4665 00003952 BF00008000          <2> 		mov edi, 0x800000
  4666 00003957 B00A                <2> 		mov al, 10
  4667 00003959 B307                <2> 		mov bl, 7
  4668 0000395B B404                <2> 		mov ah, 4
  4669 0000395D CD30                <2> 		int 30h
  4670 0000395F 8935[38390000]      <2> 		mov [esicache2], esi
  4671 00003965 8A0E                <2> 		mov cl, [esi]
  4672 00003967 8B35[34390000]      <2> 		mov esi, [esicache3]
  4673 0000396D BB[A1390000]        <2> 		mov ebx, exitword
  4674 00003972 E854F3FFFF          <2> 		call cndtest
  4675 00003977 3C01                <2> 		cmp al, 1
  4676 00003979 7411                <2> 		je endbatchcreate
  4677 0000397B 3C02                <2> 		cmp al, 2
  4678 0000397D 740D                <2> 		je endbatchcreate
  4679 0000397F 8B35[38390000]      <2> 		mov esi, [esicache2]
  4680 00003985 B00A                <2> 		mov al, 10
  4681 00003987 8806                <2> 		mov [esi], al
  4682 00003989 46                  <2> 		inc esi
  4683 0000398A EBC0                <2> 		jmp batchcreate
  4684                              <2> 	endbatchcreate:
  4685 0000398C 8B35[34390000]      <2> 		mov esi, [esicache3]
  4686 00003992 31C0                <2> 		xor eax, eax
  4687 00003994 8806                <2> 		mov [esi], al
  4688 00003996 BE00004000          <2> 		mov esi, 0x400000
  4689 0000399B E87FE3FFFF          <2> 		call print
  4690 000039A0 C3                  <2> 		ret
  4691                              <2> 	
  4692 000039A1 5C7800              <2> 	exitword db "\x",0
  4693 000039A4 54797065205C782074- <2> 	wordmsg db "Type \x to exit.",10,0
  4694 000039AD 6F20657869742E0A00  <2>
  4695                              <1> %ifdef gui.background
  4696                              <1> 	%include 'source/programs/background.asm'
  4697                              <1> %endif
  4698                              <1> %include 'source/programs/beep.asm'
  4699 000039B6 FF2C6265657000      <2> 	db 255,44,"beep",0
  4700                              <2> beep:
  4701 000039BD B8[E2390000]        <2> 	mov eax, beepstart
  4702 000039C2 A3[68020000]        <2> 	mov [soundpos], eax
  4703 000039C7 B8[E6390000]        <2> 	mov eax, beepend
  4704 000039CC A3[6C020000]        <2> 	mov [soundendpos], eax
  4705 000039D1 C605[65020000]01    <2> 	mov byte [soundon], 1
  4706                              <2> waitforsoundendbeep:
  4707 000039D8 A0[65020000]        <2> 	mov al, [soundon]
  4708 000039DD 3C00                <2> 	cmp al, 0
  4709 000039DF 75F7                <2> 	jne waitforsoundendbeep
  4710 000039E1 C3                  <2> 	ret
  4711                              <2> 	
  4712                              <2> beepstart:
  4713 000039E2 3200D111            <2> 	dw 50, 4561
  4714                              <2> beepend:
  4715                              <1> %include 'source/programs/cd.asm'
  4716 000039E6 FF2C636400          <2> db 255,44,"cd",0
  4717                              <2> cd:
  4718 000039EB 8B35[8C2C0000]      <2> 	mov esi, [currentcommandloc]
  4719 000039F1 81C603000000        <2> 	add esi, 3
  4720 000039F7 8B3D[32B30000]      <2> 	mov edi, [currentfolderloc]
  4721 000039FD 893D[2EB30000]      <2> 	mov [lastfolderloc], edi
  4722 00003A03 81C7[36B30000]      <2> 	add edi, currentfolder
  4723 00003A09 4F                  <2> 	dec edi
  4724 00003A0A 66813E2E2E          <2> 	cmp word [esi], ".."
  4725 00003A0F 742A                <2> 	je .moveup
  4726 00003A11 47                  <2> 	inc edi
  4727                              <2> .movedown:
  4728 00003A12 8A06                <2> 	mov al, [esi]
  4729 00003A14 8807                <2> 	mov [edi], al
  4730 00003A16 47                  <2> 	inc edi
  4731 00003A17 46                  <2> 	inc esi
  4732 00003A18 3C00                <2> 	cmp al, 0
  4733 00003A1A 740A                <2> 	je .donecd
  4734 00003A1C 81FF[36B50000]      <2> 	cmp edi, currentfolderend
  4735 00003A22 72EE                <2> 	jb .movedown
  4736 00003A24 30C0                <2> 	xor al, al
  4737                              <2> .donecd:
  4738 00003A26 4F                  <2> 	dec edi
  4739 00003A27 C6072F              <2> 	mov byte [edi], '/'
  4740 00003A2A 47                  <2> 	inc edi
  4741 00003A2B C60700              <2> 	mov byte [edi], 0
  4742 00003A2E 81EF[36B30000]      <2> 	sub edi, currentfolder
  4743 00003A34 893D[32B30000]      <2> 	mov [currentfolderloc], edi
  4744 00003A3A C3                  <2> 	ret
  4745                              <2> .moveup:
  4746 00003A3B 31C0                <2> 	xor eax, eax
  4747 00003A3D A3[2EB30000]        <2> 	mov [lastfolderloc], eax
  4748                              <2> .moveuploop:
  4749 00003A42 4F                  <2> 	dec edi
  4750 00003A43 8A07                <2> 	mov al, [edi]
  4751 00003A45 81FF[36B30000]      <2> 	cmp edi, currentfolder
  4752 00003A4B 763B                <2> 	jbe .moveupover
  4753 00003A4D 3C2F                <2> 	cmp al, '/'
  4754 00003A4F 75F1                <2> 	jne .moveuploop
  4755 00003A51 C6072F              <2> 	mov byte [edi], '/'
  4756 00003A54 47                  <2> 	inc edi
  4757 00003A55 C60700              <2> 	mov byte [edi], 0
  4758 00003A58 81EF[36B30000]      <2> 	sub edi, currentfolder
  4759 00003A5E 893D[32B30000]      <2> 	mov [currentfolderloc], edi
  4760 00003A64 81C7[36B30000]      <2> 	add edi, currentfolder
  4761 00003A6A 4F                  <2> 	dec edi
  4762                              <2> .lastfolder:
  4763 00003A6B 4F                  <2> 	dec edi
  4764 00003A6C 8A07                <2> 	mov al, [edi]
  4765 00003A6E 81FF[36B30000]      <2> 	cmp edi, currentfolder
  4766 00003A74 7604                <2> 	jbe .donemoveup
  4767 00003A76 3C2F                <2> 	cmp al, '/'
  4768 00003A78 75F1                <2> 	jne .lastfolder
  4769                              <2> .donemoveup:
  4770 00003A7A 47                  <2> 	inc edi
  4771 00003A7B 81EF[36B30000]      <2> 	sub edi, currentfolder
  4772 00003A81 893D[2EB30000]      <2> 	mov [lastfolderloc], edi
  4773 00003A87 C3                  <2> 	ret
  4774                              <2> .moveupover:
  4775 00003A88 BF[36B30000]        <2> 	mov edi, currentfolder
  4776 00003A8D C6072F              <2> 	mov byte [edi], '/'
  4777 00003A90 47                  <2> 	inc edi
  4778 00003A91 C60700              <2> 	mov byte [edi], 0
  4779 00003A94 31C0                <2> 	xor eax, eax
  4780 00003A96 A3[2EB30000]        <2> 	mov [lastfolderloc], eax
  4781 00003A9B 40                  <2> 	inc eax
  4782 00003A9C A3[32B30000]        <2> 	mov [currentfolderloc], eax
  4783 00003AA1 C3                  <2> 	ret
  4784                              <1> %include 'source/programs/charmap.asm'
  4785 00003AA2 FF2C636861726D6170- <2> db 255,44,"charmap",0
  4786 00003AAB 00                  <2>
  4787 00003AAC 66BB0700            <2> 	mov bx, 7
  4788 00003AB0 B020                <2> 	mov al, " "
  4789 00003AB2 E8AFE7FFFF          <2> 	call prcharq
  4790 00003AB7 E8AAE7FFFF          <2> 	call prcharq
  4791 00003ABC E8A5E7FFFF          <2> 	call prcharq
  4792 00003AC1 E8A0E7FFFF          <2> 	call prcharq
  4793 00003AC6 B030                <2> 	mov al, "0"
  4794                              <2> charmapnumprnt:
  4795 00003AC8 E899E7FFFF          <2> 	call prcharq
  4796 00003ACD FEC0                <2> 	inc al
  4797 00003ACF 6650                <2> 	push ax
  4798 00003AD1 B020                <2> 	mov al, " "
  4799 00003AD3 E88EE7FFFF          <2> 	call prcharq
  4800 00003AD8 6658                <2> 	pop ax
  4801 00003ADA 3C39                <2> 	cmp al, "9"
  4802 00003ADC 76EA                <2> 	jbe charmapnumprnt
  4803 00003ADE B041                <2> 	mov al, "A"
  4804                              <2> charmapnumprnt2:
  4805 00003AE0 E881E7FFFF          <2> 	call prcharq
  4806 00003AE5 FEC0                <2> 	inc al
  4807 00003AE7 6650                <2> 	push ax
  4808 00003AE9 B020                <2> 	mov al, " "
  4809 00003AEB E876E7FFFF          <2> 	call prcharq
  4810 00003AF0 6658                <2> 	pop ax
  4811 00003AF2 3C47                <2> 	cmp al, "G"
  4812 00003AF4 72EA                <2> 	jb charmapnumprnt2
  4813                              <2> 	
  4814 00003AF6 BE[088B0000]        <2> 	mov esi, line
  4815 00003AFB E80DE2FFFF          <2> 	call printquiet
  4816 00003B00 6631C0              <2> 	xor ax, ax
  4817 00003B03 88C1                <2> 	mov cl, al
  4818 00003B05 E895F3FFFF          <2> 	call showhexsmall
  4819 00003B0A E955000000          <2> 	jmp charmapnocopy ;the first char is 0 which is unprintable
  4820                              <2> charmapcopy:
  4821 00003B0F FEC0                <2> 	inc al
  4822 00003B11 6650                <2> 	push ax
  4823 00003B13 3C08                <2> 	cmp al, 8
  4824 00003B15 744D                <2> 	je charmapnocopy
  4825 00003B17 3C09                <2> 	cmp al, 9
  4826 00003B19 7449                <2> 	je charmapnocopy
  4827 00003B1B 3C0A                <2> 	cmp al, 10
  4828 00003B1D 7445                <2> 	je charmapnocopy
  4829 00003B1F 3C0D                <2> 	cmp al, 13
  4830 00003B21 7441                <2> 	je charmapnocopy
  4831 00003B23 3CFF                <2> 	cmp al, 255
  4832 00003B25 743D                <2> 	je charmapnocopy
  4833 00003B27 3C00                <2> 	cmp al, 0
  4834 00003B29 7434                <2> 	je nomorecharmap
  4835 00003B2B E836E7FFFF          <2> 	call prcharq
  4836 00003B30 B020                <2> 	mov al, " "
  4837 00003B32 E82FE7FFFF          <2> 	call prcharq
  4838 00003B37 6658                <2> 	pop ax
  4839                              <2> charmapcopycheck:
  4840 00003B39 FEC4                <2> 	inc ah
  4841 00003B3B 80FC10              <2> 	cmp ah, 16
  4842 00003B3E 72CF                <2> 	jb charmapcopy
  4843 00003B40 6650                <2> 	push ax
  4844 00003B42 BE[088B0000]        <2> 	mov esi, line
  4845 00003B47 E8C1E1FFFF          <2> 	call printquiet
  4846 00003B4C 6658                <2> 	pop ax
  4847 00003B4E 3CFF                <2> 	cmp al, 255
  4848 00003B50 740D                <2> 	je nomorecharmap
  4849 00003B52 88C1                <2> 	mov cl, al
  4850 00003B54 FEC1                <2> 	inc cl
  4851 00003B56 E844F3FFFF          <2> 	call showhexsmall
  4852 00003B5B 30E4                <2> 	xor ah, ah
  4853 00003B5D EBB0                <2> 	jmp charmapcopy
  4854                              <2> nomorecharmap:
  4855 00003B5F E975EEFFFF          <2> 	jmp nwcmd
  4856                              <2> charmapnocopy:
  4857 00003B64 6650                <2> 	push ax
  4858 00003B66 B020                <2> 	mov al, " "
  4859 00003B68 E8F9E6FFFF          <2> 	call prcharq
  4860 00003B6D E8F4E6FFFF          <2> 	call prcharq
  4861 00003B72 6658                <2> 	pop ax
  4862 00003B74 EBC3                <2> 	jmp charmapcopycheck
  4863                              <1> %include 'source/programs/clear.asm'
  4864 00003B76 FF2C636C65617200    <2> db 255,44,"clear",0
  4865 00003B7E E802E2FFFF          <2> 		call clear
  4866 00003B83 C3                  <2> 		ret 
  4867                              <1> %include 'source/programs/cpuid.asm'
  4868 00003B84 FF2C637075696400    <2> db 255,44,"cpuid",0
  4869 00003B8C 31C0                <2> 	xor eax, eax
  4870 00003B8E 0FA2                <2> 	cpuid
  4871 00003B90 891D[E13B0000]      <2> 	mov [cpuidbuf], ebx
  4872 00003B96 8915[E53B0000]      <2> 	mov [cpuidbuf + 4], edx
  4873 00003B9C 890D[E93B0000]      <2> 	mov [cpuidbuf + 8], ecx
  4874 00003BA2 BE[E13B0000]        <2> 	mov esi, cpuidbuf
  4875 00003BA7 E873E1FFFF          <2> 	call print
  4876 00003BAC BE[088B0000]        <2> 	mov esi, line
  4877 00003BB1 E869E1FFFF          <2> 	call print
  4878 00003BB6 B801000000          <2> 	mov eax, 1
  4879 00003BBB 0FA2                <2> 	cpuid
  4880 00003BBD 89C1                <2> 	mov ecx, eax
  4881 00003BBF C605[9E2E0000]02    <2> 	mov byte [firsthexshown], 2
  4882 00003BC6 E8E8F2FFFF          <2> 	call showhex
  4883 00003BCB B808000080          <2> 	mov eax, 0x80000008
  4884 00003BD0 0FA2                <2> 	cpuid
  4885 00003BD2 89C1                <2> 	mov ecx, eax
  4886 00003BD4 C605[9E2E0000]02    <2> 	mov byte [firsthexshown], 2
  4887 00003BDB E8D3F2FFFF          <2> 	call showhex
  4888 00003BE0 C3                  <2> 	ret
  4889                              <2> 	
  4890 00003BE1 00<rept>            <2> cpuidbuf times 13 db 0
  4891                              <2> cpuidvendorend:
  4892                              <1> %ifdef network.included
  4893                              <1> 	%include 'source/programs/dhcp.asm'
  4894 00003BEE FF2C6468637000      <2> db 255,44,"dhcp",0
  4895                              <2> dhcp:
  4896 00003BF5 BE[B53C0000]        <2> 	mov esi, .dhcp.mac
  4897 00003BFA BB[953D0000]        <2> 	mov ebx, .dhcp.option.mac
  4898 00003BFF BF[753C0000]        <2> 	mov edi, .mac
  4899 00003C04 31C9                <2> 	xor ecx, ecx
  4900 00003C06 66890D[873C0000]    <2> 	mov [.ip.checksum], cx
  4901 00003C0D 66890D[973C0000]    <2> 	mov [.udp.checksum], cx
  4902 00003C14 8B0D[C18A0000]      <2> 	mov ecx, [sysmac]
  4903 00003C1A 890B                <2> 	mov [ebx], ecx
  4904 00003C1C 890F                <2> 	mov [edi], ecx
  4905 00003C1E 890E                <2> 	mov [esi], ecx
  4906 00003C20 668B0D[C58A0000]    <2> 	mov cx, [sysmac + 4]
  4907 00003C27 66894B04            <2> 	mov [ebx + 4], cx
  4908 00003C2B 66894E04            <2> 	mov [esi + 4], cx
  4909 00003C2F 66894F04            <2> 	mov [edi + 4], cx
  4910 00003C33 BF[7D3C0000]        <2> 	mov edi, .ip.header
  4911 00003C38 BE[913C0000]        <2> 	mov esi, .ip.headerend
  4912 00003C3D E86A4D0000          <2> 	call getchecksum
  4913 00003C42 66890D[873C0000]    <2> 	mov [.ip.checksum], cx
  4914 00003C49 BF[913C0000]        <2> 	mov edi, .udp.header
  4915 00003C4E BE[AC3D0000]        <2> 	mov esi, .udp.end
  4916 00003C53 E8544D0000          <2> 	call getchecksum
  4917 00003C58 66890D[973C0000]    <2> 	mov [.udp.checksum], cx
  4918 00003C5F BF[6F3C0000]        <2> 	mov edi, .frame
  4919 00003C64 BE[AC3D0000]        <2> 	mov esi, .udp.end
  4920 00003C69 E8264D0000          <2> 	call sendpacket
  4921 00003C6E C3                  <2> 	ret
  4922                              <2> .frame:
  4923 00003C6F FFFFFFFFFFFF        <2> 	.destmac db 0xFF,0xFF,0xFF,0xFF,0xFF,0xFF
  4924 00003C75 000000000000        <2> 	.mac db 0,0,0,0,0,0
  4925 00003C7B 0800                <2> 	db 8,0
  4926                              <2> .ip.header:
  4927 00003C7D 45                  <2> 	db (0x40 | (.ip.headerend - .ip.header)/4)
  4928 00003C7E 00                  <2> 	db 0
  4929 00003C7F 012F                <2> 	db (.udp.end - .ip.header)/256, (.udp.end - .ip.header)
  4930 00003C81 0000                <2> 	dw 0
  4931 00003C83 0000                <2> 	dw 0
  4932 00003C85 80                  <2> 	db 0x80
  4933 00003C86 11                  <2> 	db 17
  4934 00003C87 0000                <2> .ip.checksum dw 0
  4935 00003C89 00000000            <2> 	db 0,0,0,0
  4936 00003C8D FFFFFFFF            <2> 	db 255,255,255,255	
  4937                              <2> .ip.headerend:
  4938                              <2> .udp.header:
  4939 00003C91 0044                <2> 	db 0,68	;source port
  4940 00003C93 0043                <2> 	db 0,67 ;destination port
  4941 00003C95 011B                <2> 	db (.udp.end - .udp.header)/256, (.udp.end - .udp.header)
  4942 00003C97 0000                <2> .udp.checksum dw 0
  4943                              <2> .udp.headerend:
  4944                              <2> .dhcp.data:
  4945 00003C99 01                  <2> 	db 1	;message type
  4946 00003C9A 01                  <2> 	db 1	;hardware type
  4947 00003C9B 06                  <2> 	db 6	;hardware address length
  4948 00003C9C 00                  <2> 	db 0	;hops
  4949 00003C9D EC2B2369            <2> 	db 0xEC,0x2B,0x23,0x69	;transaction ID
  4950 00003CA1 0000                <2> 	db 0,0	;seconds elapsed
  4951 00003CA3 0000                <2> 	db 0,0	;flags
  4952 00003CA5 00000000            <2> 	db 0,0,0,0	;client ip address
  4953 00003CA9 00000000            <2> 	db 0,0,0,0	;your ip address
  4954 00003CAD 00000000            <2> 	db 0,0,0,0	;server ip address
  4955 00003CB1 00000000            <2> 	db 0,0,0,0	;relay agent ip address
  4956 00003CB5 000000000000        <2> .dhcp.mac db 0,0,0,0,0,0	;client hardware address
  4957 00003CBB 00<rept>            <2> 	times 10 db 0	;padding
  4958 00003CC5 00<rept>            <2> 	times 64 db 0	;server host name
  4959 00003D05 00<rept>            <2> 	times 128 db 0	;boot file name
  4960 00003D85 63825363            <2> 	db 0x63,0x82,0x53,0x63	;magic cookie
  4961                              <2> .dhcp.option.type:
  4962 00003D89 350103              <2> 	db 53,1,3	;DHCP Request
  4963 00003D8C 3204C0A80002        <2> 	db 50,4,192,168,0,2	;requested IP
  4964 00003D92 3D07                <2> 	db 61,7 ;client id(mac)
  4965 00003D94 01                  <2> 	db 1	;Type=Ethernet
  4966 00003D95 000000000000        <2> .dhcp.option.mac:	db 0,0,0,0,0,0
  4967 00003D9B 0C08                <2> 	db 12,8 ;host name
  4968 00003D9D 536F6C6C65724F53    <2> .dhcp.option.name 	db "SollerOS"
  4969 00003DA5 370401030F06        <2> 	db 55,4,1,3,15,6	;request subnet, router, domain name, name server
  4970 00003DAB FF                  <2> 	db 0xFF	;end DHCP options
  4971                              <2> .dhcp.end:
  4972                              <2> .udp.end:
  4973                              <2> 	
  4974                              <1> %endif
  4975                              <1> %include 'source/programs/dos.asm'
  4976 00003DAC FF2C646F7300        <2> db 255,44,"dos",0
  4977                              <2> dosrunner:
  4978 00003DB2 8925[2AB30000]      <2> 	mov [previousstack], esp
  4979 00003DB8 8B3D[8C2C0000]      <2> 	mov edi, [currentcommandloc]
  4980 00003DBE 81C704000000        <2> 	add edi, 4
  4981 00003DC4 BE00014000          <2> 	mov esi,  0x100 + dosprogloc	;this should be the beginning of memory
  4982 00003DC9 E81D250000          <2> 	call loadfile
  4983 00003DCE 8B3D[8C2C0000]      <2> 	mov edi, [currentcommandloc]
  4984 00003DD4 81C704000000        <2> 	add edi, 4
  4985 00003DDA 81FA94010000        <2> 	cmp edx, 404
  4986 00003DE0 0F845E000000        <2> 	je near .noprogfound
  4987 00003DE6 BB81004000          <2> 	mov ebx, 0x81 + dosprogloc
  4988 00003DEB 31C9                <2> 	xor ecx, ecx
  4989                              <2> .findparams:
  4990 00003DED 47                  <2> 	inc edi
  4991 00003DEE 8A07                <2> 	mov al, [edi]
  4992 00003DF0 3C20                <2> 	cmp al, " "
  4993 00003DF2 75F9                <2> 	jne .findparams
  4994                              <2> .copyparams:
  4995 00003DF4 8A07                <2> 	mov al, [edi]
  4996 00003DF6 8803                <2> 	mov [ebx], al
  4997 00003DF8 43                  <2> 	inc ebx
  4998 00003DF9 47                  <2> 	inc edi
  4999 00003DFA 41                  <2> 	inc ecx
  5000 00003DFB 81FB00014000        <2> 	cmp ebx, 0x100 + dosprogloc
  5001 00003E01 7304                <2> 	jae .nomoreparams
  5002 00003E03 3C00                <2> 	cmp al, 0
  5003 00003E05 75ED                <2> 	jne .copyparams
  5004                              <2> .nomoreparams:
  5005 00003E07 880D80004000        <2> 	mov [0x80 + dosprogloc], cl
  5006 00003E0D 66B85000            <2> 	mov ax, DOS_DATA_SEL
  5007 00003E11 8ED8                <2> 	mov ds, ax
  5008 00003E13 8EC0                <2> 	mov es, ax
  5009 00003E15 8EE0                <2> 	mov fs, ax
  5010 00003E17 8EE8                <2> 	mov gs, ax
  5011 00003E19 31C0                <2> 	xor eax, eax
  5012 00003E1B 31DB                <2> 	xor ebx, ebx
  5013 00003E1D 31C9                <2> 	xor ecx, ecx
  5014 00003E1F 31D2                <2> 	xor edx, edx
  5015 00003E21 31FF                <2> 	xor edi, edi
  5016 00003E23 31F6                <2> 	xor esi, esi
  5017 00003E25 9A000100004800      <2> 	call DOS_CODE_SEL:0x100
  5018 00003E2C 66BB3000            <2> 	mov bx, NEW_DATA_SEL
  5019 00003E30 6689DA              <2> 	mov dx, bx
  5020 00003E33 8EC3                <2> 	mov es, bx
  5021 00003E35 8EE3                <2> 	mov fs, bx
  5022 00003E37 66BB2000            <2> 	mov bx, SYS_DATA_SEL
  5023 00003E3B 8EEB                <2> 	mov gs, bx
  5024 00003E3D 8B25[2AB30000]      <2> 	mov esp, [previousstack]
  5025 00003E43 C3                  <2> 	ret
  5026                              <2> .noprogfound:
  5027 00003E44 BE[CF8A0000]        <2> 	mov esi, notfound1
  5028 00003E49 E8D1DEFFFF          <2> 	call print
  5029 00003E4E 8B35[8C2C0000]      <2> 	mov esi, [currentcommandloc]
  5030 00003E54 81C604000000        <2> 	add esi, 4
  5031 00003E5A E8C0DEFFFF          <2> 	call print
  5032 00003E5F BE[D78A0000]        <2> 	mov esi, notfound2
  5033 00003E64 E8B6DEFFFF          <2> 	call print
  5034 00003E69 C3                  <2> 	ret
  5035                              <2> 	
  5036                              <1> %include 'source/programs/dump.asm'
  5037 00003E6A FF2C64756D7000      <2> db 255,44,"dump",0
  5038 00003E71 8B35[8C2C0000]      <2> 	mov esi, [currentcommandloc]
  5039 00003E77 81C605000000        <2> 	add esi, 5
  5040 00003E7D 31C9                <2> 	xor ecx, ecx
  5041 00003E7F 66B83078            <2> 	mov ax, "0x"
  5042 00003E83 663906              <2> 	cmp [esi], ax
  5043 00003E86 740A                <2> 	je dumphexin
  5044 00003E88 E8D2F1FFFF          <2> 	call cnvrttxt
  5045 00003E8D E910000000          <2> 	jmp dumphexnow
  5046                              <2> dumphexin:
  5047 00003E92 81C602000000        <2> 	add esi, 2
  5048 00003E98 E879F1FFFF          <2> 	call cnvrthextxt
  5049 00003E9D E900000000          <2> 	jmp dumphexnow
  5050                              <2> dumphexnow:
  5051 00003EA2 89CF                <2> 	mov edi, ecx
  5052 00003EA4 89FE                <2> 	mov esi, edi
  5053 00003EA6 81C680030000        <2> 	add esi, 896
  5054                              <2> dumphexloop:
  5055 00003EAC 8B0F                <2> 	mov ecx, [edi]
  5056 00003EAE C605[9E2E0000]05    <2> 	mov byte [firsthexshown],5
  5057 00003EB5 E8F9EFFFFF          <2> 	call showhex
  5058 00003EBA 81C704000000        <2> 	add edi, 4
  5059 00003EC0 39F7                <2> 	cmp edi, esi
  5060 00003EC2 72E8                <2> 	jb dumphexloop
  5061 00003EC4 E8F4E6FFFF          <2> 	call termcopy
  5062 00003EC9 C3                  <2> 	ret 
  5063                              <1> %include 'source/programs/echo.asm'
  5064                              <2> 
  5065 00003ECA FF2C6563686F00      <2> db 255,44,"echo",0
  5066                              <2> 	echoprog:
  5067 00003ED1 8B35[8C2C0000]      <2> 		mov esi, [currentcommandloc]
  5068 00003ED7 81C605000000        <2> 		add esi, 5
  5069 00003EDD 8A06                <2> 		mov al, [esi]
  5070 00003EDF E83BDEFFFF          <2> 		call print
  5071 00003EE4 BE[088B0000]        <2> 		mov esi, line
  5072 00003EE9 E831DEFFFF          <2> 		call print
  5073 00003EEE C3                  <2> 		ret
  5074 00003EEF BB[AAB50000]        <2> 	echovr:	mov ebx, variables
  5075 00003EF4 BF06000000          <2> 		mov edi, 6
  5076 00003EF9 E83C000000          <2> 		call nxtvrech
  5077 00003EFE E954000000          <2> 		jmp prntvr2
  5078 00003F03 B13D                <2> 	echvar:	mov cl, '='
  5079 00003F05 43                  <2> 		inc ebx
  5080 00003F06 8A03                <2> 		mov al, [ebx]
  5081 00003F08 3C00                <2> 		cmp al, 0
  5082 00003F0A 742E                <2> 		je nxtvrech
  5083 00003F0C 3C3D                <2> 		cmp al, '='
  5084 00003F0E 7422                <2> 		je nxtvrechb1
  5085 00003F10 8B35[8C2C0000]      <2> 		mov esi, [currentcommandloc]
  5086 00003F16 01FE                <2> 		add esi, edi
  5087 00003F18 E8AEEDFFFF          <2> 		call cndtest
  5088 00003F1D 3C02                <2> 		cmp al, 2
  5089 00003F1F 7432                <2> 		je prntvr
  5090 00003F21 3C01                <2> 		cmp al, 1
  5091 00003F23 742E                <2> 		je prntvr
  5092 00003F25 8B35[8C2C0000]      <2> 		mov esi, [currentcommandloc]
  5093 00003F2B 01FE                <2> 		add esi, edi
  5094 00003F2D E908000000          <2> 		jmp nxtvrech
  5095                              <2> 	nxtvrechb1:
  5096 00003F32 81EB02000000        <2> 		sub ebx, 2
  5097 00003F38 EBC9                <2> 		jmp echvar
  5098 00003F3A 8A03                <2> 	nxtvrech: mov al, [ebx]
  5099 00003F3C 3C05                <2> 		cmp al, 5
  5100 00003F3E 740A                <2> 		je nxtvrec2
  5101 00003F40 43                  <2> 		inc ebx
  5102 00003F41 81FB[AAC50000]      <2> 		cmp ebx, varend
  5103 00003F47 72F1                <2> 		jb nxtvrech
  5104 00003F49 C3                  <2> 		ret
  5105 00003F4A 43                  <2> 	nxtvrec2: inc ebx
  5106 00003F4B 8A03                <2> 		mov al, [ebx]
  5107 00003F4D 3C04                <2> 		cmp al, 4
  5108 00003F4F 74B2                <2> 		je echvar
  5109 00003F51 EBE7                <2> 		jmp nxtvrech
  5110 00003F53 43                  <2> 	prntvr: inc ebx
  5111 00003F54 89DE                <2> 		mov esi, ebx
  5112 00003F56 C3                  <2> 		ret
  5113 00003F57 E8C3DDFFFF          <2> 	prntvr2: call print
  5114 00003F5C BE[088B0000]        <2> 		mov esi, line
  5115 00003F61 E8B9DDFFFF          <2> 		call print
  5116 00003F66 C3                  <2> 		ret 
  5117                              <1> %include 'source/programs/else.asm'
  5118 00003F67 FF2C656C736500      <2> 	db 255,44,"else",0
  5119 00003F6E 31C0                <2> elsecmd:	xor eax, eax
  5120 00003F70 3805[A4B50000]      <2> 	cmp [BATCHISON], al
  5121 00003F76 0F840EF8FFFF        <2> 	je near notbatch
  5122 00003F7C A0[3BB50000]        <2> 	mov al, [IFON]
  5123 00003F81 BE[3CB50000]        <2> 	mov esi, IFTRUE
  5124 00003F86 01C6                <2> 	add esi, eax
  5125 00003F88 8A06                <2> 	mov al, [esi]
  5126 00003F8A 3401                <2> 	xor al, 1
  5127 00003F8C 8806                <2> 	mov [esi], al
  5128 00003F8E C3                  <2> 	ret 
  5129                              <1> %include 'source/programs/exit.asm'
  5130 00003F8F FF2C6578697400      <2> db 255,44,"exit",0
  5131 00003F96 803D[3AB50000]01    <2> 	cmp byte [ranboot], 1
  5132 00003F9D 0F84CAE9FFFF        <2> 	je near returnfromexp
  5133 00003FA3 E9B2E8FFFF          <2> 	jmp nobootfile
  5134                              <1> %include 'source/programs/fi.asm'
  5135 00003FA8 FF2C666900          <2> 	db 255,44,"fi",0
  5136 00003FAD 30C0                <2> 	xor al, al
  5137 00003FAF 3805[A4B50000]      <2> 	cmp [BATCHISON], al
  5138 00003FB5 0F84CFF7FFFF        <2> 	je near notbatch
  5139 00003FBB B001                <2> fi:	mov al, 1
  5140 00003FBD 2805[3BB50000]      <2> 	sub [IFON],al
  5141 00003FC3 C3                  <2> 	ret 
  5142                              <1> %ifdef gui.included
  5143                              <1> 	%include 'source/programs/gui.asm'
  5144 00003FC4 FF2C67756900        <2> db 255,44,"gui",0
  5145                              <2> guiswitcher:
  5146 00003FCA 8B35[8C2C0000]      <2> 	mov esi, [currentcommandloc]
  5147 00003FD0 81C604000000        <2> 	add esi, 4
  5148 00003FD6 31C9                <2> 	xor ecx, ecx
  5149 00003FD8 803E00              <2> 	cmp byte [esi], 0
  5150 00003FDB 740A                <2> 	je .nomodepref
  5151 00003FDD E834F0FFFF          <2> 	call cnvrthextxt ;switches arg on cline to vesa mode in ecx
  5152 00003FE2 E907000000          <2> 	jmp .modepref
  5153                              <2> .nomodepref:
  5154 00003FE7 51                  <2> 	push ecx
  5155 00003FE8 E898DDFFFF          <2> 	call clear
  5156 00003FED 59                  <2> 	pop ecx
  5157                              <2> .modepref:
  5158 00003FEE 66BB[B050]          <2> 	mov bx, guiswitch
  5159 00003FF2 66891D[EE0C0000]    <2> 	mov [realmodeptr], bx
  5160 00003FF9 BB[09400000]        <2> 	mov ebx, guiswitchret
  5161 00003FFE 891D[EA0C0000]      <2> 	mov [realmodereturn], ebx
  5162 00004004 E9CACBFFFF          <2> 	jmp realmode
  5163                              <2> guiswitchret:
  5164 00004009 65803D[E49C0000]01  <2> 	cmp byte [gs:guion], 1
  5165 00004011 7401                <2> 	je .cont
  5166 00004013 C3                  <2> 	ret
  5167                              <2> .cont:
  5168 00004014 BF[8E520000]        <2> 	mov edi, VBEMODEBLOCK
  5169                              <2> .loop:
  5170 00004019 658B07              <2> 	mov eax, [gs:edi]
  5171 0000401C 8907                <2> 	mov [edi], eax
  5172 0000401E 47                  <2> 	inc edi
  5173 0000401F 81FF[92550000]      <2> 	cmp edi, VBEEND
  5174 00004025 72F2                <2> 	jb .loop
  5175 00004027 A1[B6540000]        <2> 	mov eax, [physbaseptr]
  5176 0000402C 2D00001000          <2> 	sub eax, 0x100000
  5177 00004031 A3[B6540000]        <2> 	mov [physbaseptr], eax
  5178 00004036 C605[64220000]00    <2> 	mov byte [termguion], 0
  5179 0000403D BE[BFCD0000]        <2> 	mov esi, graphicstable
  5180 00004042 30C0                <2> 	xor al, al
  5181                              <2> .clear:
  5182 00004044 8806                <2> 	mov [esi], al
  5183 00004046 46                  <2> 	inc esi
  5184 00004047 81FE[BFCF0000]      <2> 	cmp esi, graphicstableend
  5185 0000404D 72F5                <2> 	jb .clear
  5186 0000404F E8682A0000          <2> 	call guisetup
  5187                              <2> 	;The next few lines center a window that is 3/4ths of the full screen
  5188 00004054 668B15[A0540000]    <2> 	mov dx, [resolutionx]
  5189 0000405B 668B0D[A2540000]    <2> 	mov cx, [resolutiony]
  5190 00004062 6689D3              <2> 	mov bx, dx
  5191 00004065 6689C8              <2> 	mov ax, cx
  5192 00004068 66D1EB              <2> 	shr bx, 1
  5193 0000406B 66D1E8              <2> 	shr ax, 1
  5194 0000406E 6689DA              <2> 	mov dx, bx
  5195 00004071 66D1EA              <2> 	shr dx, 1
  5196 00004074 6689C1              <2> 	mov cx, ax
  5197 00004077 66D1E9              <2> 	shr cx, 1
  5198 0000407A 6601D3              <2> 	add bx, dx
  5199 0000407D 6601C8              <2> 	add ax, cx
  5200 00004080 66D1E9              <2> 	shr cx, 1
  5201 00004083 66C1EB03            <2> 	shr bx, 3
  5202 00004087 66C1E303            <2> 	shl bx, 3
  5203 0000408B 66C1E804            <2> 	shr ax, 4
  5204 0000408F 66C1E004            <2> 	shl ax, 4
  5205 00004093 66891D[C16C0000]    <2> 	mov [termwindow], bx
  5206 0000409A 66A3[C36C0000]      <2> 	mov [termwindow + 2], ax	;the previous lines of code make a large terminal window that is 4 characters smaller than the screen
  5207 000040A0 BE[C16C0000]        <2> 	mov esi, termwindow
  5208 000040A5 31DB                <2> 	xor ebx, ebx
  5209 000040A7 6631C0              <2> 	xor ax, ax
  5210 000040AA E81B310000          <2> 	call showwindow
  5211 000040AF E8DF140000          <2> 	call cursorgui
  5212 000040B4 E8CCDCFFFF          <2> 	call clear
  5213 000040B9 C3                  <2> 	ret
  5214                              <2> 	
  5215                              <1> %endif
  5216                              <1> %include 'source/programs/help.asm'
  5217 000040BA FF2C68656C7000      <2> db 255,44,"help",0
  5218                              <2> lscmd:	
  5219 000040C1 B00D                <2> 		mov al, 13
  5220 000040C3 E89EE1FFFF          <2> 		call prcharq
  5221 000040C8 BE[E2300000]        <2> 		mov esi, progstart
  5222 000040CD BB[B0500000]        <2> 		mov ebx, progend
  5223 000040D2 BE[2AAF0000]        <2> dir:	mov esi, fileindex
  5224 000040D7 8A06                <2> 	dirnxt:	mov al, [esi]
  5225 000040D9 30E4                <2> 		xor ah, ah
  5226 000040DB 3CFF                <2> 		cmp al, 255
  5227 000040DD 7415                <2> 		je dirfnd
  5228 000040DF 46                  <2> 		inc esi
  5229 000040E0 81FE[2AB30000]      <2> 		cmp esi,  fileindexend
  5230 000040E6 7339                <2> 		jae dirdn
  5231 000040E8 EBED                <2> 		jmp dirnxt
  5232                              <2> 	dirfnd3:
  5233 000040EA 46                  <2> 		inc esi
  5234 000040EB 81FE[2AB30000]      <2> 		cmp esi, fileindexend
  5235 000040F1 76E4                <2> 		jbe dirnxt
  5236 000040F3 4E                  <2> 		dec esi
  5237 000040F4 46                  <2> 	dirfnd:	inc esi
  5238 000040F5 8A06                <2> 		mov al, [esi]
  5239 000040F7 30E4                <2> 		xor ah, ah
  5240 000040F9 3C2C                <2> 		cmp al, 44
  5241 000040FB 740B                <2> 		je dirfnd2
  5242 000040FD 46                  <2> 		inc esi
  5243 000040FE 81FE[2AB30000]      <2> 		cmp esi,  fileindexend
  5244 00004104 731B                <2> 		jae dirdn
  5245 00004106 EBCF                <2> 		jmp dirnxt
  5246 00004108 46                  <2> 	dirfnd2: inc esi
  5247 00004109 E8FFDBFFFF          <2> 		call printquiet
  5248 0000410E 56                  <2> 		push esi
  5249 0000410F B009                <2> 		mov al, 9
  5250 00004111 E850E1FFFF          <2> 		call prcharq
  5251 00004116 5E                  <2> 		pop esi
  5252 00004117 81FE[2AB30000]      <2> 		cmp esi,  fileindexend
  5253 0000411D 7302                <2> 		jae dirdn
  5254 0000411F EBB6                <2> 		jmp dirnxt
  5255 00004121 BE[088B0000]        <2> 	dirdn:	mov esi, line
  5256 00004126 E8F4DBFFFF          <2> 			call print
  5257 0000412B C3                  <2> 			ret
  5258 0000412C 00                  <2> currentdir db 0
  5259                              <1> %include 'source/programs/if.asm'
  5260 0000412D FF2C696600          <2> 	db 255,44,"if",0
  5261 00004132 30C0                <2> ifcmd:	xor al, al
  5262 00004134 3805[A4B50000]      <2> 	cmp [BATCHISON], al
  5263 0000413A 0F844AF6FFFF        <2> 	je near notbatch
  5264 00004140 8B1D[8C2C0000]      <2> 	mov ebx, [currentcommandloc]
  5265 00004146 81C303000000        <2> 	add ebx, 3
  5266 0000414C 89DE                <2> 	mov esi, ebx
  5267 0000414E 8A06                <2> chkeqsn: mov al, [esi]
  5268 00004150 3C00                <2> 	cmp al, 0
  5269 00004152 0F8432F6FFFF        <2> 	je near notbatch
  5270 00004158 3C3D                <2> 	cmp al, '='
  5271 0000415A 0F8403000000        <2> 	je near chkeqdn
  5272 00004160 46                  <2> 	inc esi
  5273 00004161 EBEB                <2> 	jmp chkeqsn
  5274 00004163 B000                <2> chkeqdn: mov al, 0 
  5275 00004165 8806                <2> 	mov [esi], al
  5276 00004167 46                  <2> 	inc esi
  5277 00004168 E823EBFFFF          <2> 	call tester
  5278 0000416D 3C01                <2> 	cmp al, 1
  5279 0000416F 0F8405000000        <2> 	je near trueif
  5280 00004175 E91C000000          <2> 	jmp falseif
  5281 0000417A 31C0                <2> trueif:	xor eax, eax
  5282 0000417C A0[3BB50000]        <2> 	mov al, [IFON]
  5283 00004181 FEC0                <2> 	inc al
  5284 00004183 A2[3BB50000]        <2> 	mov [IFON], al
  5285 00004188 30E4                <2> 	xor ah, ah
  5286 0000418A BE[3CB50000]        <2> 	mov esi, IFTRUE
  5287 0000418F 01C6                <2> 	add esi, eax
  5288 00004191 B401                <2> 	mov ah, 1
  5289 00004193 8826                <2> 	mov [esi], ah
  5290 00004195 C3                  <2> 	ret 
  5291 00004196 31C0                <2> falseif: xor eax, eax
  5292 00004198 A0[3BB50000]        <2> 	mov al, [IFON]
  5293 0000419D FEC0                <2> 	inc al
  5294 0000419F A2[3BB50000]        <2> 	mov [IFON], al
  5295 000041A4 30E4                <2> 	xor ah, ah
  5296 000041A6 BE[3CB50000]        <2> 	mov esi, IFTRUE
  5297 000041AB 01C6                <2> 	add esi, eax
  5298 000041AD 30E4                <2> 	xor ah, ah
  5299 000041AF 8826                <2> 	mov [esi], ah
  5300 000041B1 C3                  <2> 	ret 
  5301                              <1> %ifdef network.included
  5302                              <1> 	%include 'source/programs/ipconfig.asm'
  5303 000041B2 FF2C6970636F6E6669- <2> db 255,44,"ipconfig",0
  5304 000041BB 6700                <2>
  5305                              <2> ifconfig:
  5306 000041BD 8B35[8C2C0000]      <2> 	mov esi, [currentcommandloc]
  5307 000041C3 81C609000000        <2> 	add esi, 9
  5308 000041C9 803E00              <2> 	cmp byte [esi], 0
  5309 000041CC 740B                <2> 	je .noip
  5310 000041CE E801480000          <2> 	call strtoip
  5311 000041D3 890D[BD8A0000]      <2> 	mov [sysip], ecx
  5312                              <2> .noip:
  5313                              <2> %ifdef ne2000.included
  5314 000041D9 803D[1D880000]01    <2> 	cmp byte [ne2000.nicconfig], 1
  5315 000041E0 751E                <2> 	jne .none2000
  5316 000041E2 BE[1E880000]        <2> 	mov esi, ne2000.name
  5317 000041E7 E833DBFFFF          <2> 	call print
  5318 000041EC B9[40880000]        <2> 	mov ecx, ne2000.mac
  5319 000041F1 E860480000          <2> 	call showmac
  5320 000041F6 BE[088B0000]        <2> 	mov esi, line
  5321 000041FB E81FDBFFFF          <2> 	call print
  5322                              <2> .none2000:
  5323                              <2> %endif
  5324                              <2> %ifdef rtl8139.included
  5325 00004200 803D[28810000]01    <2> 	cmp byte [rtl8139.nicconfig], 1
  5326 00004207 751E                <2> 	jne .nortl8139
  5327 00004209 BE[2F810000]        <2> 	mov esi, rtl8139.name
  5328 0000420E E80CDBFFFF          <2> 	call print
  5329 00004213 B9[29810000]        <2> 	mov ecx, rtl8139.mac
  5330 00004218 E839480000          <2> 	call showmac
  5331 0000421D BE[088B0000]        <2> 	mov esi, line
  5332 00004222 E8F8DAFFFF          <2> 	call print
  5333                              <2> .nortl8139:
  5334                              <2> %endif
  5335                              <2> %ifdef rtl8169.included
  5336 00004227 803D[27830000]01    <2> 	cmp byte [rtl8169.nicconfig], 1
  5337 0000422E 751E                <2> 	jne .nortl8169
  5338 00004230 BE[2E830000]        <2> 	mov esi, rtl8169.name
  5339 00004235 E8E5DAFFFF          <2> 	call print
  5340 0000423A B9[28830000]        <2> 	mov ecx, rtl8169.mac
  5341 0000423F E812480000          <2> 	call showmac
  5342 00004244 BE[088B0000]        <2> 	mov esi, line
  5343 00004249 E8D1DAFFFF          <2> 	call print
  5344                              <2> .nortl8169:
  5345                              <2> %endif
  5346                              <2> %ifdef i8254x.included
  5347 0000424E 803D[77890000]01    <2> 	cmp byte [i8254x.nicconfig], 1
  5348 00004255 751E                <2> 	jne .noi8254x
  5349 00004257 BE[7E890000]        <2> 	mov esi, i8254x.name
  5350 0000425C E8BEDAFFFF          <2> 	call print
  5351 00004261 B9[78890000]        <2> 	mov ecx, i8254x.mac
  5352 00004266 E8EB470000          <2> 	call showmac
  5353 0000426B BE[088B0000]        <2> 	mov esi, line
  5354 00004270 E8AADAFFFF          <2> 	call print
  5355                              <2> .noi8254x:
  5356                              <2> %endif
  5357 00004275 8B0D[BD8A0000]      <2> 	mov ecx, [sysip]
  5358 0000427B E89A470000          <2> 	call showip
  5359 00004280 BE[088B0000]        <2> 	mov esi, line
  5360 00004285 E895DAFFFF          <2> 	call print
  5361 0000428A C3                  <2> 	ret
  5362                              <2> 	
  5363                              <1> %endif
  5364                              <1> %include 'source/programs/keycode.asm'
  5365 0000428B FF2C6B6579636F6465- <2> db 255,44,"keycode",0
  5366 00004294 00                  <2>
  5367                              <2> keycode:
  5368 00004295 C605[40220000]00    <2> 	mov byte [trans], 0
  5369 0000429C C605[8A640000]00    <2> 	mov byte [threadson], 0
  5370                              <2> %ifdef io.serial
  5371                              <2> .noserial:
  5372                              <2> 	hlt
  5373                              <2> 	mov dx, [serial.address]
  5374                              <2> 	in al, dx
  5375                              <2> 	cmp al, 0
  5376                              <2> 	je .noserial
  5377                              <2> 	mov cl, al
  5378                              <2> 	call showhexsmall
  5379                              <2> 	cmp al, 0x1B
  5380                              <2> 	jne .noserial
  5381                              <2> 	in al, dx
  5382                              <2> 	mov cl, al
  5383                              <2> 	call showhexsmall
  5384                              <2> 	cmp cl, 0x5B
  5385                              <2> 	je .noserial
  5386                              <2> 	ret
  5387                              <2> %else
  5388 000042A3 E8F9180000          <2> 	call getkey
  5389 000042A8 31C0                <2> 	xor eax, eax
  5390 000042AA 31C9                <2> 	xor ecx, ecx
  5391 000042AC 8A0D[815B0000]      <2> 	mov cl, [specialkey]
  5392 000042B2 80F900              <2> 	cmp cl, 0
  5393 000042B5 0F8405000000        <2> 	je near .nospecialkeycode
  5394 000042BB E8DFEBFFFF          <2> 	call showhexsmall
  5395                              <2> .nospecialkeycode:
  5396 000042C0 66A1[3E220000]      <2> 	mov ax, [lastkey]
  5397 000042C6 88E1                <2> 	mov cl, ah
  5398 000042C8 E8D2EBFFFF          <2> 	call showhexsmall
  5399 000042CD 80FC01              <2> 	cmp ah, 1
  5400 000042D0 75C3                <2> 	jne keycode
  5401 000042D2 C3                  <2> 	ret
  5402                              <2> %endif
  5403                              <1> %ifdef gui.included
  5404                              <1> 	%include 'source/programs/line.asm'
  5405 000042D3 FF2C6C696E6500      <2> db 255,44,"line",0
  5406                              <2> linetester:
  5407 000042DA 803D[E49C0000]00    <2> 	cmp byte [guion], 0
  5408 000042E1 0F841B000000        <2> 	je near .done
  5409 000042E7 668B35[63020000]    <2> 	mov si, [timenanoseconds + 2];essentially load a random value
  5410 000042EE BB38000000          <2> 	mov ebx, 28*2;the line test draws ~28/6 times more lines in a 4:3 display mode
  5411 000042F3 E868000000          <2> 	call .circletest
  5412 000042F8 BB0C000000          <2> 	mov ebx, 6*2 ;this makes them draw the same amount of lines
  5413 000042FD E801000000          <2> 	call .linetest
  5414                              <2> .done:
  5415 00004302 C3                  <2> 	ret
  5416                              <2> 
  5417                              <2> .linetest:
  5418 00004303 53                  <2> 	push ebx
  5419 00004304 E8D6000000          <2> 	call .stime
  5420 00004309 5B                  <2> 	pop ebx
  5421 0000430A 31FF                <2> 	xor edi, edi
  5422                              <2> .ltlp:
  5423 0000430C 53                  <2> 	push ebx
  5424 0000430D E81C010000          <2> 	call .st
  5425 00004312 66F7D6              <2> 	not si
  5426 00004315 E814010000          <2> 	call .st
  5427 0000431A 5B                  <2> 	pop ebx
  5428 0000431B 66F7D6              <2> 	not si
  5429 0000431E 660335[61020000]    <2> 	add si, [timenanoseconds]
  5430 00004325 4B                  <2> 	dec ebx
  5431 00004326 81FB00000000        <2> 	cmp ebx, 0
  5432 0000432C 77DE                <2> 	ja .ltlp
  5433 0000432E E8C4000000          <2> 	call .etime
  5434 00004333 53                  <2> 	push ebx	
  5435 00004334 57                  <2> 	push edi
  5436 00004335 E870260000          <2> 	call guiclear
  5437 0000433A E8AD260000          <2> 	call reloadallgraphics
  5438 0000433F 59                  <2> 	pop ecx
  5439 00004340 E838ECFFFF          <2> 	call showdec
  5440 00004345 BE[70440000]        <2> 	mov esi, .msg
  5441 0000434A E8D0D9FFFF          <2> 	call print
  5442 0000434F 59                  <2> 	pop ecx
  5443 00004350 E828ECFFFF          <2> 	call showdec
  5444 00004355 BE[9C440000]        <2> 	mov esi, .msgtime
  5445 0000435A E8C0D9FFFF          <2> 	call print
  5446 0000435F C3                  <2> 	ret
  5447                              <2> 	
  5448                              <2> .circletest:
  5449 00004360 53                  <2> 	push ebx
  5450 00004361 E879000000          <2> 	call .stime
  5451 00004366 5B                  <2> 	pop ebx
  5452 00004367 31FF                <2> 	xor edi, edi
  5453                              <2> .ctlp:
  5454 00004369 53                  <2> 	push ebx
  5455 0000436A 668B0D[A2540000]    <2> 	mov cx, [resolutiony]
  5456 00004371 66D1E9              <2> 	shr cx, 1
  5457 00004374 668B15[A0540000]    <2> 	mov dx, [resolutionx]
  5458 0000437B 66D1EA              <2> 	shr dx, 1
  5459 0000437E 6689C8              <2> 	mov ax, cx
  5460                              <2> .circle:
  5461 00004381 60                  <2> 	pusha
  5462 00004382 E8FA210000          <2> 	call drawcircle
  5463 00004387 61                  <2> 	popa
  5464 00004388 6648                <2> 	dec ax
  5465 0000438A 47                  <2> 	inc edi
  5466 0000438B 663D0100            <2> 	cmp ax, 1
  5467 0000438F 77F0                <2> 	ja .circle
  5468 00004391 66F7D6              <2> 	not si
  5469                              <2> .circle2:
  5470 00004394 60                  <2> 	pusha
  5471 00004395 E8E7210000          <2> 	call drawcircle
  5472 0000439A 61                  <2> 	popa
  5473 0000439B 47                  <2> 	inc edi
  5474 0000439C 6640                <2> 	inc ax
  5475 0000439E 6639C8              <2> 	cmp ax, cx
  5476 000043A1 76F1                <2> 	jbe .circle2
  5477 000043A3 5B                  <2> 	pop ebx
  5478 000043A4 66F7D6              <2> 	not si
  5479 000043A7 660335[61020000]    <2> 	add si, [timenanoseconds]
  5480 000043AE 4B                  <2> 	dec ebx
  5481 000043AF 81FB00000000        <2> 	cmp ebx, 0
  5482 000043B5 77B2                <2> 	ja .ctlp
  5483 000043B7 E83B000000          <2> 	call .etime
  5484 000043BC 53                  <2> 	push ebx
  5485 000043BD 57                  <2> 	push edi
  5486 000043BE 59                  <2> 	pop ecx
  5487 000043BF E8B9EBFFFF          <2> 	call showdec
  5488 000043C4 BE[85440000]        <2> 	mov esi, .msgcircle
  5489 000043C9 E851D9FFFF          <2> 	call print
  5490 000043CE 59                  <2> 	pop ecx
  5491 000043CF E8A9EBFFFF          <2> 	call showdec
  5492 000043D4 BE[9C440000]        <2> 	mov esi, .msgtime
  5493 000043D9 E841D9FFFF          <2> 	call print
  5494 000043DE C3                  <2> 	ret
  5495                              <2> 	
  5496                              <2> .stime:
  5497 000043DF F4                  <2> 	hlt
  5498 000043E0 A1[5D020000]        <2> 	mov eax, [timeseconds]
  5499 000043E5 8B1D[61020000]      <2> 	mov ebx, [timenanoseconds]
  5500 000043EB A3[AB440000]        <2> 	mov [.time], eax
  5501 000043F0 891D[AF440000]      <2> 	mov [.time + 4], ebx
  5502 000043F6 C3                  <2> 	ret
  5503                              <2> 	
  5504                              <2> .etime:
  5505 000043F7 A1[5D020000]        <2> 	mov eax, [timeseconds]
  5506 000043FC 8B1D[61020000]      <2> 	mov ebx, [timenanoseconds]
  5507 00004402 8B0D[AB440000]      <2> 	mov ecx, [.time]
  5508 00004408 8B15[AF440000]      <2> 	mov edx, [.time + 4]
  5509 0000440E C1EA0A              <2> 	shr edx, 10
  5510 00004411 C1EB0A              <2> 	shr ebx, 10
  5511 00004414 29C8                <2> 	sub eax, ecx
  5512 00004416 3D00000000          <2> 	cmp eax, 0
  5513 0000441B 740E                <2> 	je .notclp
  5514                              <2> .tclp:
  5515 0000441D 81C340420F00        <2> 	add ebx, 1000000
  5516 00004423 48                  <2> 	dec eax
  5517 00004424 3D00000000          <2> 	cmp eax, 0
  5518 00004429 75F2                <2> 	jne .tclp
  5519                              <2> .notclp:
  5520 0000442B 29D3                <2> 	sub ebx, edx
  5521 0000442D C3                  <2> 	ret
  5522                              <2> 	
  5523                              <2> .st:
  5524 0000442E 6631C0              <2> 	xor ax, ax
  5525 00004431 6631DB              <2> 	xor bx, bx
  5526 00004434 668B0D[A2540000]    <2> 	mov cx, [resolutiony]
  5527 0000443B 668B15[A0540000]    <2> 	mov dx, [resolutionx]
  5528                              <2> .lp:
  5529 00004442 60                  <2> 	pusha
  5530 00004443 E836240000          <2> 	call drawline
  5531 00004448 61                  <2> 	popa
  5532                              <2> .noswitch:
  5533 00004449 47                  <2> 	inc edi
  5534 0000444A 6643                <2> 	inc bx
  5535 0000444C 664A                <2> 	dec dx
  5536 0000444E 6681FB0000          <2> 	cmp bx, 0
  5537 00004453 74ED                <2> 	je .lp
  5538 00004455 6681FA0000          <2> 	cmp dx, 0
  5539 0000445A 75E6                <2> 	jne .lp
  5540                              <2> .lp2:
  5541 0000445C 60                  <2> 	pusha
  5542 0000445D E81C240000          <2> 	call drawline
  5543 00004462 61                  <2> 	popa
  5544 00004463 47                  <2> 	inc edi
  5545 00004464 6640                <2> 	inc ax
  5546 00004466 6649                <2> 	dec cx
  5547 00004468 6681F90000          <2> 	cmp cx, 0
  5548 0000446D 75ED                <2> 	jne .lp2
  5549 0000446F C3                  <2> 	ret
  5550                              <2> 	
  5551 00004470 6C696E657320776572- <2> .msg db "lines were drawn in ",0
  5552 00004479 6520647261776E2069- <2>
  5553 00004482 6E2000              <2>
  5554 00004485 636972636C65732077- <2> .msgcircle db "circles were drawn in ",0
  5555 0000448E 65726520647261776E- <2>
  5556 00004497 20696E2000          <2>
  5557 0000449C 6D6963726F7365636F- <2> .msgtime db "microseconds.",10,0
  5558 000044A5 6E64732E0A00        <2>
  5559 000044AB 0000000000000000    <2> .time dd 0,0	
  5560                              <1> %endif
  5561                              <1> %include 'source/programs/logout.asm'
  5562 000044B3 FF2C6C6F676F757400  <2> 	db 255,44,"logout",0
  5563 000044BC E955E3FFFF          <2> 	jmp os
  5564                              <1> %include 'source/programs/loop.asm'
  5565 000044C1 FF2C6C6F6F7000      <2> 	db 255,44,"loop",0
  5566 000044C8 803D[A5B50000]00    <2> 	cmp byte [LOOPON], 0
  5567 000044CF 0F8501000000        <2> 	jne near filoop
  5568 000044D5 C3                  <2> 	ret
  5569 000044D6 8B35[A6B50000]      <2> filoop: mov esi, [LOOPPOS]
  5570 000044DC FE0D[3BB50000]      <2> 	dec byte [IFON]
  5571 000044E2 C605[A5B50000]00    <2> 	mov byte [LOOPON], 0
  5572 000044E9 8935[A0B50000]      <2> 	mov [BATCHPOS], esi
  5573 000044EF 8935[B2360000]      <2> 	mov [batchedi], esi
  5574 000044F5 C3                  <2> 	ret 
  5575                              <1> %include 'source/programs/ls.asm'
  5576 000044F6 FF2C6C7300          <2> db 255,44,"ls",0
  5577 000044FB BE[2D9B0000]        <2> 		mov esi, diskfileindex
  5578                              <2> 	diskindexdir:
  5579 00004500 803E5F              <2> 		cmp byte [esi], '_'
  5580 00004503 7440                <2> 		je nextdiskindexdir
  5581 00004505 E803D8FFFF          <2> 		call printquiet
  5582 0000450A 56                  <2> 		push esi
  5583 0000450B BE[65450000]        <2> 		mov esi, disktab
  5584 00004510 E8F8D7FFFF          <2> 		call printquiet
  5585 00004515 5E                  <2> 		pop esi
  5586 00004516 8B4E05              <2> 		mov ecx, [esi + 5]
  5587 00004519 C605[9E2E0000]05    <2> 		mov byte [firsthexshown], 5
  5588 00004520 E858EAFFFF          <2> 		call showdec
  5589 00004525 56                  <2> 		push esi
  5590 00004526 BE[088B0000]        <2> 		mov esi, line
  5591 0000452B E8DDD7FFFF          <2> 		call printquiet
  5592 00004530 5E                  <2> 		pop esi
  5593 00004531 81C609000000        <2> 		add esi, 9
  5594 00004537 81FE[E29C0000]      <2> 		cmp esi, enddiskfileindex
  5595 0000453D 72C1                <2> 		jb diskindexdir
  5596 0000453F E879E0FFFF          <2> 		call termcopy
  5597 00004544 C3                  <2> 		ret
  5598                              <2> 	nextdiskindexdir:
  5599 00004545 46                  <2> 		inc esi
  5600 00004546 803E00              <2> 		cmp byte [esi], 0
  5601 00004549 75FA                <2> 		jne nextdiskindexdir
  5602 0000454B 81C609000000        <2> 		add esi, 9
  5603 00004551 81FE[E29C0000]      <2> 		cmp esi, enddiskfileindex
  5604 00004557 72A7                <2> 		jb diskindexdir
  5605 00004559 E85FE0FFFF          <2> 		call termcopy
  5606 0000455E C3                  <2> 		ret
  5607                              <2> 		
  5608 0000455F 4469736B2000        <2> 		diskmsg db "Disk ",0
  5609 00004565 0D09090900          <2> 		disktab db 13,9,9,9,0
  5610                              <1> %include 'source/programs/memory.asm'
  5611 0000456A FF2C6D656D6F727900  <2> db 255,44,"memory",0
  5612 00004573 BE[EA9C0000]        <2> 	mov esi, memlistbuf
  5613 00004578 31FF                <2> 	xor edi, edi
  5614 0000457A 668B3D[2A9F0000]    <2> 	mov di, [memlistend]
  5615 00004581 01F7                <2> 	add edi, esi
  5616                              <2> printmemmap:
  5617 00004583 8B0E                <2> 	mov ecx, [esi]
  5618 00004585 E829E9FFFF          <2> 	call showhex
  5619 0000458A 81C608000000        <2> 	add esi, 8
  5620 00004590 8B0E                <2> 	mov ecx, [esi]
  5621 00004592 E81CE9FFFF          <2> 	call showhex
  5622 00004597 81C608000000        <2> 	add esi, 8
  5623 0000459D 8B0E                <2> 	mov ecx, [esi]
  5624 0000459F E80FE9FFFF          <2> 	call showhex
  5625 000045A4 81C608000000        <2> 	add esi, 8
  5626 000045AA 57                  <2> 	push edi
  5627 000045AB 56                  <2> 	push esi
  5628 000045AC BE[088B0000]        <2> 	mov esi, line
  5629 000045B1 E869D7FFFF          <2> 	call print
  5630 000045B6 5E                  <2> 	pop esi
  5631 000045B7 5F                  <2> 	pop edi
  5632 000045B8 39FE                <2> 	cmp esi, edi
  5633 000045BA 72C7                <2> 	jb printmemmap
  5634 000045BC C3                  <2> 	ret
  5635                              <2> 	
  5636                              <1> %include 'source/programs/pci.asm'
  5637 000045BD FF2C70636900        <2> db 255,44,"pci",0
  5638 000045C3 E8F4190000          <2> 	call pcidump
  5639 000045C8 C3                  <2> 	ret 
  5640                              <1> %ifdef network.included
  5641                              <1> 	%include 'source/programs/ping.asm'
  5642 000045C9 FF2C70696E6700      <2> db 255,44,"ping",0
  5643                              <2> ping:
  5644 000045D0 8B35[8C2C0000]      <2> 	mov esi, [currentcommandloc]
  5645 000045D6 81C605000000        <2> 	add esi, 5
  5646 000045DC E8F3430000          <2> 	call strtoip
  5647 000045E1 890D[6C460000]      <2> 	mov [.destip], ecx
  5648 000045E7 E82E440000          <2> 	call showip
  5649 000045EC 8B0D[BD8A0000]      <2> 	mov ecx, [sysip]
  5650 000045F2 890D[68460000]      <2> 	mov [.sourceip]. ecx
  5651 000045F8 31C0                <2> 	xor eax, eax
  5652 000045FA 31DB                <2> 	xor ebx, ebx
  5653 000045FC 66A3[66460000]      <2> 	mov [.checksum], ax
  5654 00004602 66A3[72460000]      <2> 	mov [.icmpchecksum], ax
  5655 00004608 BF[5C460000]        <2> 	mov edi, .header
  5656 0000460D BE[70460000]        <2> 	mov esi, .headerend
  5657 00004612 E895430000          <2> 	call getchecksum
  5658 00004617 66890D[66460000]    <2> 	mov [.checksum], cx
  5659 0000461E BF[70460000]        <2> 	mov edi, .icmp
  5660 00004623 BE[98460000]        <2> 	mov esi, .packetend
  5661 00004628 E87F430000          <2> 	call getchecksum
  5662 0000462D 66890D[72460000]    <2> 	mov [.icmpchecksum], cx
  5663 00004634 BF[4E460000]        <2> 	mov edi, .packet
  5664 00004639 BE[98460000]        <2> 	mov esi, .packetend
  5665 0000463E E851430000          <2> 	call sendpacket
  5666 00004643 BE[088B0000]        <2> 	mov esi, line
  5667 00004648 E8D2D6FFFF          <2> 	call print
  5668 0000464D C3                  <2> 	ret
  5669                              <2> 	
  5670                              <2> 	
  5671                              <2> 	
  5672                              <2> .packet:
  5673 0000464E FFFFFFFFFFFF        <2> .destinationmac db 0xFF,0xFF,0xFF,0xFF,0xFF,0xFF
  5674 00004654 000000000000        <2> .sourcemac	db 0,0,0,0,0,0
  5675 0000465A 0800                <2> .ethertype	db 8,0	;ip is 0x800
  5676                              <2> .header:
  5677 0000465C 45                  <2> .version	db 0x45
  5678 0000465D 00                  <2> .services	db 0
  5679 0000465E 003C                <2> .length	db 0,0x3C
  5680 00004660 0000                <2> .id		dw 0
  5681 00004662 00                  <2> .flags	db 0
  5682 00004663 00                  <2> .fragment db 0
  5683 00004664 80                  <2> .ttl	db 128
  5684 00004665 01                  <2> .protocol db 1 ;ICMP
  5685 00004666 0000                <2> .checksum dw 0
  5686 00004668 00000000            <2> .sourceip dd 0
  5687 0000466C 00000000            <2> .destip dd 0
  5688                              <2> .headerend:
  5689                              <2> .icmp:
  5690 00004670 08                  <2> .icmptype db 8 ;Ping request
  5691 00004671 00                  <2> .icmpcode db 0
  5692 00004672 0000                <2> .icmpchecksum dw 0
  5693 00004674 0001                <2> .icmpid db 0,1
  5694 00004676 0000                <2> .sequence dw 0
  5695 00004678 616263646566676869- <2> db "abcdefghijklmnopqrstuvwabcdefghi" ;this is what microsoft includes
  5696 00004681 6A6B6C6D6E6F707172- <2>
  5697 0000468A 737475767761626364- <2>
  5698 00004693 6566676869          <2>
  5699                              <2> .packetend:
  5700                              <1> %endif
  5701                              <1> %include 'source/programs/play.asm'
  5702 00004698 FF2C706C61796100    <2> db 255,44,"playa",0
  5703 000046A0 8B3D[8C2C0000]      <2> 	mov edi, [currentcommandloc]
  5704 000046A6 81C706000000        <2> 	add edi, 6
  5705 000046AC E833000000          <2> 	call playasync
  5706 000046B1 C3                  <2> 	ret
  5707 000046B2 FF2C706C617900      <2> db 255,44,"play",0
  5708                              <2> play:
  5709 000046B9 8B3D[8C2C0000]      <2> 	mov edi, [currentcommandloc]
  5710 000046BF 81C705000000        <2> 	add edi, 5
  5711 000046C5 E81A000000          <2> 	call playasync
  5712                              <2> .waitforsound:
  5713                              <2> %ifdef sound.included
  5714 000046CA A1[6A5B0000]        <2> 	mov eax, [Length0]
  5715 000046CF 660B05[6E5B0000]    <2> 	or ax, [Length1]
  5716                              <2> %endif
  5717 000046D6 0A05[65020000]      <2> 	or al, [soundon]
  5718 000046DC 3D00000000          <2> 	cmp eax, 0
  5719 000046E1 75E7                <2> 	jne .waitforsound
  5720 000046E3 C3                  <2> 	ret
  5721                              <2> playasync:
  5722 000046E4 BE0000C000          <2> 	mov esi, 0xC00000
  5723 000046E9 E8FD1B0000          <2> 	call loadfile
  5724 000046EE 81FA94010000        <2> 	cmp edx, 404
  5725 000046F4 743F                <2> 	je nosoundfound
  5726 000046F6 BB0000C000          <2> 	mov ebx, 0xC00000
  5727 000046FB 817B0857415645      <2> 	cmp dword [ebx + 8], "WAVE"
  5728 00004702 0F843F010000        <2> 	je near wave_player
  5729 00004708 66813B534E          <2> 	cmp word [ebx], "SN"
  5730 0000470D 7526                <2> 	jne nosoundfound
  5731 0000470F 81C306000000        <2> 	add ebx, 6
  5732 00004715 891D[68020000]      <2> 	mov [soundpos], ebx
  5733 0000471B 035BFC              <2> 	add ebx, [ebx - 4]
  5734 0000471E 891D[6C020000]      <2> 	mov [soundendpos], ebx
  5735 00004724 66C705[66020000]00- <2> 	mov word [soundrepititions], 0
  5736 0000472C 00                  <2>
  5737 0000472D C605[65020000]01    <2> 	mov byte [soundon], 1
  5738 00004734 C3                  <2> 	ret
  5739                              <2> nosoundfound:
  5740 00004735 BE[5B470000]        <2> 	mov esi, notfoundsound
  5741 0000473A E8E0D5FFFF          <2> 	call print
  5742 0000473F 8B35[8C2C0000]      <2> 	mov esi, [currentcommandloc]
  5743 00004745 81C605000000        <2> 	add esi, 5
  5744 0000474B E8CFD5FFFF          <2> 	call print
  5745 00004750 BE[D78A0000]        <2> 	mov esi, notfound2
  5746 00004755 E8C5D5FFFF          <2> 	call print
  5747 0000475A C3                  <2> 	ret
  5748 0000475B 706C61793A2000      <2> notfoundsound db "play: ",0
  5749                              <2> 
  5750                              <2> %ifdef sound.included
  5751                              <2> sbplay:
  5752 00004762 BE0000C000          <2> 		mov esi, 0xC00000
  5753 00004767 89F3                <2> 		mov ebx, esi
  5754 00004769 81C640000000        <2> 		add esi, WAVSTART
  5755 0000476F 29F7                <2> 		sub edi, esi
  5756 00004771 66893D[6E5B0000]    <2> 		mov [Length1], di
  5757 00004778 C1EF0F              <2> 		shr edi, 15
  5758 0000477B 893D[6A5B0000]      <2> 		mov [Length0], edi
  5759 00004781 8B4B18              <2> 		mov ecx, [ebx + 24]
  5760 00004784 890D[7B5B0000]      <2> 		mov [Freq], ecx
  5761 0000478A 31C0                <2> 		xor eax, eax
  5762 0000478C BA0000C000          <2> 		mov	edx, 0xC00000 ;physical location of sound
  5763 00004791 81C240000000        <2> 		add edx, WAVSTART
  5764 00004797 01D0                <2> 		add	eax, edx
  5765 00004799 89C6                <2> 		mov esi, eax
  5766 0000479B 31C9                <2> 		xor ecx, ecx
  5767 0000479D 31DB                <2> 		xor ebx, ebx
  5768 0000479F 66891D[785B0000]    <2> 		mov [SegLoc], bx
  5769 000047A6 81C300000800        <2> 		add ebx, 0x80000
  5770 000047AC 66B9FFFF            <2> 		mov cx, 0xFFFF
  5771 000047B0 6681FF0000          <2> 		cmp di, 0
  5772 000047B5 7520                <2> 		jne .autoinit
  5773 000047B7 668B0D[6E5B0000]    <2> 		mov cx, [Length1]
  5774 000047BE C605[695B0000]01    <2> 		mov byte [OddLength], 1
  5775 000047C5 6681F90080          <2> 		cmp cx, 32768
  5776 000047CA 730B                <2> 		jae .autoinit
  5777 000047CC C605[695B0000]00    <2> 		mov byte [OddLength], 0
  5778 000047D3 66D1E1              <2> 		shl cx, 1
  5779 000047D6 47                  <2> 		inc edi
  5780                              <2> .autoinit:
  5781 000047D7 4F                  <2> 		dec edi
  5782 000047D8 893D[6A5B0000]      <2> 		mov [Length0], edi
  5783 000047DE 66890D[6E5B0000]    <2> 		mov [Length1], cx
  5784 000047E5 66D1E9              <2> 		shr cx, 1
  5785 000047E8 6641                <2> 		inc cx
  5786 000047EA 01C8                <2> 		add eax, ecx
  5787 000047EC A3[705B0000]        <2> 		mov [NextMemLoc], eax
  5788 000047F1 8935[745B0000]      <2> 		mov	[MemLoc], esi
  5789 000047F7 E825120000          <2> 		call DMACopy
  5790 000047FC 31DB                <2> 		xor ebx, ebx
  5791 000047FE 668B1D[785B0000]    <2> 		mov bx, [SegLoc]
  5792 00004805 31C9                <2> 		xor ecx, ecx
  5793 00004807 668B0D[6E5B0000]    <2> 		mov cx, [Length1]
  5794 0000480E 66D1E9              <2> 		shr cx, 1
  5795 00004811 6641                <2> 		inc cx
  5796 00004813 01CB                <2> 		add ebx, ecx
  5797 00004815 66891D[785B0000]    <2> 		mov [SegLoc], bx
  5798 0000481C 81C300000800        <2> 		add ebx, 0x80000
  5799 00004822 8B35[705B0000]      <2> 		mov esi, [NextMemLoc]
  5800 00004828 89F0                <2> 		mov eax, esi
  5801 0000482A 01C8                <2> 		add eax, ecx
  5802 0000482C A3[705B0000]        <2> 		mov [NextMemLoc], eax
  5803 00004831 8935[745B0000]      <2> 		mov	[MemLoc], esi
  5804 00004837 E8E5110000          <2> 		call DMACopy
  5805 0000483C E803120000          <2> 		call DMAPlay
  5806 00004841 E88D120000          <2> 		call PlayDSP
  5807 00004846 C3                  <2> 		ret
  5808                              <2> WAVSTART equ 64;44
  5809                              <2> wave_player:
  5810 00004847 803D[805B0000]01    <2> 	cmp byte [SoundBlaster], 1
  5811 0000484E 0F840EFFFFFF        <2> 	je near sbplay
  5812 00004854 BE[5F480000]        <2> 	mov esi, nosoundblaster
  5813 00004859 E8C1D4FFFF          <2> 	call print
  5814 0000485E C3                  <2> 	ret
  5815                              <2> %else
  5816                              <2> 	wave_player:
  5817                              <2> 		mov esi, nosoundblaster
  5818                              <2> 		call print
  5819                              <2> 		ret
  5820                              <2> %endif
  5821 0000485F 4E6F20536F756E6420- <2> nosoundblaster db "No Sound Blaster detected.",10,0
  5822 00004868 426C61737465722064- <2>
  5823 00004871 657465637465642E0A- <2>
  5824 0000487A 00                  <2>
  5825                              <1> %include 'source/programs/pwd.asm'
  5826 0000487B FF2C70776400        <2> db 255,44,"pwd",0
  5827 00004881 BE[36B30000]        <2> 	mov esi, currentfolder
  5828 00004886 E882D4FFFF          <2> 	call printquiet
  5829 0000488B BE[088B0000]        <2> 	mov esi, line
  5830 00004890 E88AD4FFFF          <2> 	call print
  5831 00004895 C3                  <2> 	ret
  5832                              <2> 	
  5833                              <1> %include 'source/programs/reboot.asm'
  5834 00004896 FF2C7265626F6F7400  <2> 	db 255,44,"reboot",0
  5835 0000489F 0F011D[A9480000]    <2> 		lidt [idtreboot]
  5836 000048A6 CD00                <2> 		int 0
  5837 000048A8 F4                  <2> 		hlt
  5838                              <2> 	
  5839 000048A9 0000                <2> 	idtreboot dw 0
  5840 000048AB 00000000            <2> 			  dd 0
  5841                              <2> 
  5842                              <2> 	coldboot:
  5843 000048AF 66B84000            <2> 		MOV AX, 0040h
  5844 000048B3 8EC0                <2> 		MOV ES, AX
  5845 000048B5 2666C7057200000000- <2> 		MOV WORD [ES:00072h], 0h
  5846 000048BE 00                  <2>
  5847 000048BF EA00000000FFFF      <2> 		JMP 0FFFFh:0000h
  5848 000048C6 CF                  <2> 		IRET
  5849                              <2> 
  5850                              <2> 	warmboot:
  5851 000048C7 66B84000            <2> 		MOV AX, 0040h
  5852 000048CB 8EC0                <2> 		MOV ES, AX
  5853 000048CD 2666C7057200000034- <2> 		MOV WORD [ES:00072h], 01234h
  5854 000048D6 12                  <2>
  5855 000048D7 EA00000000FFFF      <2> 		JMP 0FFFFh:0000h
  5856 000048DE CF                  <2> 		IRET
  5857                              <2> 		
  5858                              <1> %include 'source/programs/reg.asm'
  5859 000048DF FF2C72656700        <2> db 255,44,"reg",0
  5860 000048E5 CD03                <2> 	int 3
  5861 000048E7 C3                  <2> 	ret 
  5862                              <1> %include 'source/programs/show.asm'
  5863 000048E8 FF2C73686F7700      <2> db 255,44,"show",0
  5864 000048EF 8B3D[8C2C0000]      <2> 		mov edi, [currentcommandloc]
  5865 000048F5 81C705000000        <2> 		add edi, 5
  5866 000048FB BE00008000          <2> 		mov esi, 0x800000
  5867 00004900 E8E6190000          <2> 		call loadfile
  5868 00004905 81FA94010000        <2> 		cmp edx, 404
  5869 0000490B 0F8483000000        <2> 		je near filenotfound
  5870 00004911 BE00008000          <2> 		mov esi, 0x800000
  5871                              <2> %ifdef gui.included
  5872 00004916 66813E424D          <2> 		cmp word [esi], "BM"
  5873 0000491B 7410                <2> 		je bmpfound
  5874                              <2> %endif
  5875 0000491D E8FDD3FFFF          <2> 		call print
  5876 00004922 BE[088B0000]        <2> 		mov esi, line
  5877 00004927 E8F3D3FFFF          <2> 		call print
  5878 0000492C C3                  <2> 		ret
  5879                              <2> %ifdef gui.included
  5880                              <2> bmpfound:
  5881 0000492D 803D[E49C0000]00    <2> 		cmp byte [guion], 0
  5882 00004934 0F8428000000        <2> 		je near noguibmp
  5883 0000493A BE00008000          <2> 		mov esi, 0x800000
  5884 0000493F 31C9                <2> 		xor ecx, ecx
  5885 00004941 31D2                <2> 		xor edx, edx
  5886 00004943 31C0                <2> 		xor eax, eax
  5887 00004945 31DB                <2> 		xor ebx, ebx
  5888 00004947 E8631B0000          <2> 		call showbmp
  5889 0000494C 30C0                <2> 		xor al, al
  5890 0000494E B405                <2> 		mov ah, 5
  5891 00004950 CD30                <2> 		int 30h
  5892 00004952 E853200000          <2> 		call guiclear
  5893 00004957 E8321D0000          <2> 		call clearmousecursor
  5894 0000495C E88B200000          <2> 		call reloadallgraphics
  5895 00004961 C3                  <2> 		ret
  5896                              <2> noguibmp:
  5897 00004962 BE[6D490000]        <2> 		mov esi, warnguimsg
  5898 00004967 E8B3D3FFFF          <2> 		call print
  5899 0000496C C3                  <2> 		ret
  5900 0000496D 546869732063616E20- <2> warnguimsg db "This can not be done without the GUI.",10,0
  5901 00004976 6E6F7420626520646F- <2>
  5902 0000497F 6E6520776974686F75- <2>
  5903 00004988 742074686520475549- <2>
  5904 00004991 2E0A00              <2>
  5905                              <2> %endif
  5906                              <2> 
  5907                              <2> filenotfound:
  5908 00004994 BE[C7490000]        <2> 		mov esi, filenf
  5909 00004999 E881D3FFFF          <2> 		call print
  5910 0000499E 8B35[8C2C0000]      <2> 		mov esi, [currentcommandloc]
  5911                              <2> findfilenotfoundzero:
  5912 000049A4 8A06                <2> 		mov al, [esi]
  5913 000049A6 46                  <2> 		inc esi
  5914 000049A7 3C00                <2> 		cmp al, 0
  5915 000049A9 7411                <2> 		je nofilenamenotfound
  5916 000049AB 81FE[AACD0000]      <2> 		cmp esi, buftxtend
  5917 000049B1 7309                <2> 		jae nofilenamenotfound
  5918 000049B3 3C20                <2> 		cmp al, " "
  5919 000049B5 75ED                <2> 		jne findfilenotfoundzero
  5920 000049B7 E863D3FFFF          <2> 		call print
  5921                              <2> nofilenamenotfound:
  5922 000049BC BE[D2490000]        <2> 		mov esi, filenf2
  5923 000049C1 E859D3FFFF          <2> 		call print
  5924 000049C6 C3                  <2> 		ret
  5925 000049C7 5468652066696C6520- <2> filenf db "The file ",34,0
  5926 000049D0 2200                <2>
  5927 000049D2 2220636F756C64206E- <2> filenf2 db 34," could not be found.",10,0
  5928 000049DB 6F7420626520666F75- <2>
  5929 000049E4 6E642E0A00          <2>
  5930                              <1> %include 'source/programs/shush.asm'
  5931 000049E9 FF2C736875736800    <2> db 255,44,"shush",0	;if you add 2 values it will switch size using the first as X in chars and the second as Y in chars
  5932                              <2> shushprog:
  5933                              <2> %ifdef gui.included
  5934 000049F1 803D[E49C0000]00    <2> 	cmp byte [guion], 0
  5935 000049F8 0F84B4000000        <2> 	je near .noswitchsize
  5936 000049FE 8B35[8C2C0000]      <2> 	mov esi, [currentcommandloc]
  5937 00004A04 81C606000000        <2> 	add esi, 6
  5938 00004A0A 56                  <2> 	push esi
  5939 00004A0B 4E                  <2> 	dec esi
  5940                              <2> .findspace:
  5941 00004A0C 46                  <2> 	inc esi
  5942 00004A0D 8A06                <2> 	mov al, [esi]
  5943 00004A0F 3C00                <2> 	cmp al, 0
  5944 00004A11 0F849B000000        <2> 	je near .noswitchsize
  5945 00004A17 3C58                <2> 	cmp al, "X"
  5946 00004A19 7408                <2> 	je .donefind
  5947 00004A1B 3C78                <2> 	cmp al, "x"
  5948 00004A1D 7404                <2> 	je .donefind
  5949 00004A1F 3C20                <2> 	cmp al, " "
  5950 00004A21 75E9                <2> 	jne .findspace
  5951                              <2> .donefind:
  5952 00004A23 30C0                <2> 	xor al, al
  5953 00004A25 8806                <2> 	mov [esi], al
  5954 00004A27 46                  <2> 	inc esi
  5955 00004A28 89F7                <2> 	mov edi, esi
  5956 00004A2A E830E6FFFF          <2> 	call cnvrttxt
  5957 00004A2F 89C8                <2> 	mov eax, ecx
  5958 00004A31 5E                  <2> 	pop esi
  5959 00004A32 50                  <2> 	push eax
  5960 00004A33 89F7                <2> 	mov edi, esi
  5961 00004A35 E825E6FFFF          <2> 	call cnvrttxt
  5962 00004A3A 89CB                <2> 	mov ebx, ecx
  5963 00004A3C 58                  <2> 	pop eax	
  5964 00004A3D 6681FB0000          <2> 	cmp bx, 0
  5965 00004A42 0F846A000000        <2> 	je near .noswitchsize
  5966 00004A48 663D0000            <2> 	cmp ax, 0
  5967 00004A4C 0F8460000000        <2> 	je near .noswitchsize
  5968 00004A52 66C1E303            <2> 	shl bx, 3
  5969 00004A56 66C1E004            <2> 	shl ax, 4
  5970 00004A5A 663B1D[A0540000]    <2> 	cmp bx, [resolutionx]
  5971 00004A61 7607                <2> 	jbe .nofixx
  5972 00004A63 668B1D[A0540000]    <2> 	mov bx, [resolutionx]
  5973                              <2> .nofixx:
  5974 00004A6A 66051000            <2> 	add ax, 16
  5975 00004A6E 663B05[A2540000]    <2> 	cmp ax, [resolutiony]
  5976 00004A75 7606                <2> 	jbe .nofixy
  5977 00004A77 66A1[A2540000]      <2> 	mov ax, [resolutiony]
  5978                              <2> .nofixy:
  5979 00004A7D 662D1000            <2> 	sub ax, 16
  5980 00004A81 6631C9              <2> 	xor cx, cx
  5981 00004A84 6631D2              <2> 	xor dx, dx
  5982 00004A87 66891D[C16C0000]    <2> 	mov [termwindow], bx
  5983 00004A8E 66A3[C36C0000]      <2> 	mov [termwindow + 2], ax	;the previous lines of code make a large terminal window that is 4 characters smaller than the screen
  5984 00004A94 BE[C16C0000]        <2> 	mov esi, termwindow
  5985 00004A99 31DB                <2> 	xor ebx, ebx
  5986 00004A9B 6631C0              <2> 	xor ax, ax
  5987 00004A9E E827270000          <2> 	call showwindow
  5988 00004AA3 E8021F0000          <2> 	call guiclear
  5989 00004AA8 E8D8D2FFFF          <2> 	call clear
  5990 00004AAD E83A1F0000          <2> 	call reloadallgraphics
  5991                              <2> .noswitchsize:
  5992                              <2> %endif
  5993 00004AB2 BE[BD4A0000]        <2> 	mov esi, shushmsg
  5994 00004AB7 E863D2FFFF          <2> 	call print
  5995 00004ABC C3                  <2> 	ret
  5996 00004ABD 57656C636F6D652074- <2> 	shushmsg db "Welcome to the SollerOS Hardly Unix-Compatible Shell!",10,0
  5997 00004AC6 6F2074686520536F6C- <2>
  5998 00004ACF 6C65724F5320486172- <2>
  5999 00004AD8 646C7920556E69782D- <2>
  6000 00004AE1 436F6D70617469626C- <2>
  6001 00004AEA 65205368656C6C210A- <2>
  6002 00004AF3 00                  <2>
  6003                              <1> %include 'source/programs/system.asm'
  6004 00004AF4 FF2C73797374656D00  <2> 	db 255,44,"system",0
  6005 00004AFD BE[0D4C0000]        <2> 	mov esi, kernelinfomsg
  6006 00004B02 E806D2FFFF          <2> 	call printquiet
  6007 00004B07 B9[2D9B0000]        <2> 	mov ecx, osend
  6008 00004B0C E86CE4FFFF          <2> 	call showdec
  6009 00004B11 BE[224C0000]        <2> 	mov esi, diskbytemsg
  6010 00004B16 E8F2D1FFFF          <2> 	call printquiet
  6011 00004B1B B9[2D9B0000]        <2> 	mov ecx, osend
  6012 00004B20 81C1[18B60100]      <2> 	add ecx, commandbufend
  6013 00004B26 81E9[E49C0000]      <2> 	sub ecx, bssstart	;add the extra buffer space
  6014 00004B2C E84CE4FFFF          <2> 	call showdec
  6015 00004B31 BE[394C0000]        <2> 	mov esi, membytemsg
  6016 00004B36 E8D2D1FFFF          <2> 	call printquiet
  6017 00004B3B BE[9C4C0000]        <2> 	mov esi, endofmemmsg
  6018 00004B40 E8C8D1FFFF          <2> 	call printquiet
  6019 00004B45 B9[2CEA1100]        <2> 	mov ecx, bssend
  6020 00004B4A E864E3FFFF          <2> 	call showhex
  6021 00004B4F BE[524C0000]        <2> 	mov esi, systeminfomsg
  6022 00004B54 E8B4D1FFFF          <2> 	call printquiet
  6023                              <2> getcpuspeed:
  6024 00004B59 B8FE000000          <2> 	mov eax, 0xFE
  6025 00004B5E E621                <2> 	out 0x21, al ;mask off all but timer interrupt
  6026 00004B60 B020                <2> 	mov al, 0x20
  6027 00004B62 E620                <2> 	out 0x20, al
  6028 00004B64 F4                  <2> 	hlt
  6029 00004B65 0F31                <2> 	rdtsc
  6030 00004B67 89D6                <2> 	mov esi, edx
  6031 00004B69 89C7                <2> 	mov edi, eax
  6032 00004B6B 31C0                <2> 	xor eax, eax
  6033 00004B6D C605[46020000]01    <2> 	mov byte [testingcpuspeed], 1
  6034                              <2> cpuspeedloop:	;wait until next timer interrupt, then inc eax until the next
  6035 00004B74 40                  <2> 	inc eax
  6036 00004B75 EBFD                <2> 	jmp cpuspeedloop
  6037                              <2> cpuspeedloopend:
  6038 00004B77 0F31                <2> 	rdtsc
  6039 00004B79 29F8                <2> 	sub eax, edi
  6040 00004B7B 29F2                <2> 	sub edx, esi
  6041 00004B7D 8915[4F020000]      <2> 	mov [cpuclocksperint + 4], edx
  6042 00004B83 A3[4B020000]        <2> 	mov [cpuclocksperint], eax
  6043 00004B88 31C0                <2> 	xor eax, eax
  6044 00004B8A E621                <2> 	out 0x21, al
  6045 00004B8C B020                <2> 	mov al, 0x20
  6046 00004B8E E620                <2> 	out 0x20, al
  6047 00004B90 31D2                <2> 	xor edx, edx
  6048 00004B92 31C0                <2> 	xor eax, eax
  6049 00004B94 A1[47020000]        <2> 	mov eax, [cpuspeedperint]
  6050 00004B99 D1E0                <2> 	shl eax, 1	;the cpu speed loop actually contains 2 commands so multiply the
  6051                              <2> 				;result by 2
  6052 00004B9B 8B1D[59020000]      <2> 	mov ebx, [timeinterval]
  6053 00004BA1 C1EB0A              <2> 	shr ebx, 10 ;divide the interval by 1024
  6054 00004BA4 F7F3                <2> 	div ebx	;quotient in eax, remainder in edx
  6055 00004BA6 89C1                <2> 	mov ecx, eax
  6056 00004BA8 E8D0E3FFFF          <2> 	call showdec
  6057 00004BAD BE[804C0000]        <2> 	mov esi, cpuspeedmsg
  6058 00004BB2 E856D1FFFF          <2> 	call printquiet
  6059 00004BB7 31D2                <2> 	xor edx, edx
  6060 00004BB9 A1[4B020000]        <2> 	mov eax, [cpuclocksperint]
  6061 00004BBE 8B15[4F020000]      <2> 	mov edx, [cpuclocksperint + 4]
  6062 00004BC4 8B1D[59020000]      <2> 	mov ebx, [timeinterval]
  6063 00004BCA C1EB0A              <2> 	shr ebx, 10
  6064 00004BCD F7F3                <2> 	div ebx
  6065 00004BCF 89C1                <2> 	mov ecx, eax
  6066 00004BD1 E8A7E3FFFF          <2> 	call showdec
  6067 00004BD6 BE[864C0000]        <2> 	mov esi, cpuclockmsg
  6068 00004BDB E82DD1FFFF          <2> 	call printquiet
  6069 00004BE0 8B0D[53020000]      <2> 	mov ecx, [memoryspace]
  6070 00004BE6 C1E914              <2> 	shr ecx, 20
  6071 00004BE9 41                  <2> 	inc ecx	;the reading is one MB behind
  6072 00004BEA E88EE3FFFF          <2> 	call showdec
  6073 00004BEF BE[8B4C0000]        <2> 	mov esi, memoryspacemsg
  6074 00004BF4 E826D1FFFF          <2> 	call print
  6075                              <2> %ifdef sound.included
  6076 00004BF9 803D[805B0000]00    <2> 	cmp byte [SoundBlaster], 0
  6077 00004C00 740A                <2> 	je .nosb
  6078 00004C02 BE[684C0000]        <2> 	mov esi, soundblastermsg
  6079 00004C07 E813D1FFFF          <2> 	call print
  6080                              <2> .nosb:
  6081                              <2> %endif
  6082 00004C0C C3                  <2> 	ret
  6083                              <2> 
  6084 00004C0D 4B65726E656C20496E- <2> kernelinfomsg db "Kernel Information:",10,0
  6085 00004C16 666F726D6174696F6E- <2>
  6086 00004C1F 3A0A00              <2>
  6087 00004C22 427974657320446973- <2> diskbytemsg db "Bytes Disk Space Used",10,0
  6088 00004C2B 6B2053706163652055- <2>
  6089 00004C34 7365640A00          <2>
  6090 00004C39 4279746573204D656D- <2> membytemsg db "Bytes Memory Space Used",10,0
  6091 00004C42 6F7279205370616365- <2>
  6092 00004C4B 20557365640A00      <2>
  6093 00004C52 0A53797374656D2049- <2> systeminfomsg db 10,"System Information:",10,0
  6094 00004C5B 6E666F726D6174696F- <2>
  6095 00004C64 6E3A0A00            <2>
  6096                              <2> %ifdef sound.included
  6097 00004C68 536F756E64626C6173- <2> 	soundblastermsg db "Soundblaster Detected.",10,0
  6098 00004C71 746572204465746563- <2>
  6099 00004C7A 7465642E0A00        <2>
  6100                              <2> %endif
  6101 00004C80 4D4950530A00        <2> cpuspeedmsg db "MIPS",10,0
  6102 00004C86 4D487A0A00          <2> cpuclockmsg db "MHz",10,0
  6103 00004C8B 4D42204D656D6F7279- <2> memoryspacemsg db "MB Memory Space",10,0
  6104 00004C94 2053706163650A00    <2>
  6105 00004C9C 456E64206F66204D65- <2> endofmemmsg: db "End of Memory Space: 0x",0
  6106 00004CA5 6D6F72792053706163- <2>
  6107 00004CAE 653A20307800        <2>
  6108                              <1> %include 'source/programs/time.asm'
  6109 00004CB4 082E30303030303030- <2> timenscache db 8,".000000000"
  6110 00004CBD 3030                <2>
  6111 00004CBF 200A00              <2> timenscacheend: db " ",10,0
  6112 00004CC2 00                  <2> istimeset db 0
  6113 00004CC3 456E74657220746865- <2> settimemsg db "Enter the current UNIX time:",10,0
  6114 00004CCC 2063757272656E7420- <2>
  6115 00004CD5 554E49582074696D65- <2>
  6116 00004CDE 3A0A00              <2>
  6117 00004CE1 00<rept>            <2> timeinputbuffer times 12 db 0
  6118 00004CED 00                  <2> timeinputbend: db 0
  6119                              <2> 
  6120 00004CEE FF2C74696D6500      <2> db 255,44,"time",0
  6121 00004CF5 803D[C24C0000]00    <2> 	cmp byte [istimeset], 0
  6122 00004CFC 753A                <2> 	jne timeisset
  6123 00004CFE BE[C34C0000]        <2> 	mov esi, settimemsg
  6124 00004D03 E817D0FFFF          <2> 	call print
  6125 00004D08 BE[E14C0000]        <2> 	mov esi, timeinputbuffer
  6126 00004D0D BF[ED4C0000]        <2> 	mov edi, timeinputbend
  6127 00004D12 E8ECD0FFFF          <2> 	call readline
  6128 00004D17 BE[E14C0000]        <2> 	mov esi, timeinputbuffer
  6129 00004D1C 31FF                <2> 	xor edi, edi
  6130 00004D1E E83CE3FFFF          <2> 	call cnvrttxt
  6131 00004D23 890D[5D020000]      <2> 	mov [timeseconds], ecx
  6132 00004D29 31C9                <2> 	xor ecx, ecx
  6133 00004D2B 890D[61020000]      <2> 	mov [timenanoseconds], ecx
  6134 00004D31 C605[C24C0000]01    <2> 	mov byte [istimeset], 1
  6135                              <2> timeisset:
  6136 00004D38 8B0D[5D020000]      <2> 	mov ecx, [timeseconds]
  6137 00004D3E E83AE2FFFF          <2> 	call showdec
  6138                              <2> 	
  6139 00004D43 8B0D[61020000]      <2> 	mov ecx, [timenanoseconds]
  6140 00004D49 BE[B44C0000]        <2> 	mov esi, timenscache
  6141 00004D4E C7460230303030      <2> 	mov dword [esi+ 2], "0000"
  6142 00004D55 C7460630303030      <2> 	mov dword [esi + 6], "0000"
  6143 00004D5C C6460A30            <2> 	mov byte [esi + 10], "0"
  6144 00004D60 BE[BF4C0000]        <2> 	mov esi, timenscacheend
  6145 00004D65 E8F6DFFFFF          <2> 	call convert
  6146 00004D6A BE[B44C0000]        <2> 	mov esi, timenscache
  6147 00004D6F E899CFFFFF          <2> 	call printquiet
  6148                              <2> 	
  6149 00004D74 E82D000000          <2> 	call time
  6150 00004D79 BE[724F0000]        <2> 	mov esi, timeshow
  6151 00004D7E E88ACFFFFF          <2> 	call printquiet
  6152 00004D83 BE[088B0000]        <2> 	mov esi, line
  6153 00004D88 E880CFFFFF          <2> 	call printquiet
  6154 00004D8D BE[7B4F0000]        <2> 	mov esi, dateshow
  6155 00004D92 E876CFFFFF          <2> 	call printquiet
  6156 00004D97 BE[088B0000]        <2> 	mov esi, line
  6157 00004D9C E86CCFFFFF          <2> 	call printquiet
  6158 00004DA1 E9BC000000          <2> 	jmp findday
  6159                              <2> time:
  6160 00004DA6 E84F010000          <2> 	call tstackput1
  6161 00004DAB B00A                <2> 	mov al,10			;Get RTC register A
  6162 00004DAD E879010000          <2> 	call tget1
  6163 00004DB2 A880                <2> 	test al,0x80			;Is update in progress?
  6164 00004DB4 75F0                <2> 	jne time				; yes, wait
  6165                              <2> 
  6166 00004DB6 B000                <2> 	mov al,0			;Get seconds (00 to 59)
  6167 00004DB8 E86E010000          <2> 	call tget1
  6168 00004DBD A2[694F0000]        <2> 	mov [RTCtimeSecond],al
  6169                              <2> 
  6170 00004DC2 B002                <2> 	mov al,0x02			;Get minutes (00 to 59)
  6171 00004DC4 E862010000          <2> 	call tget1
  6172 00004DC9 A2[6A4F0000]        <2> 	mov [RTCtimeMinute],al
  6173                              <2> 
  6174 00004DCE B004                <2> 	mov al,0x04			;Get hours (see notes)
  6175 00004DD0 E856010000          <2> 	call tget1
  6176 00004DD5 A2[6B4F0000]        <2> 	mov [RTCtimeHour],al
  6177                              <2> 
  6178 00004DDA B007                <2> 	mov al,0x07			;Get day of month (01 to 31)
  6179 00004DDC E84A010000          <2> 	call tget1
  6180 00004DE1 A2[6C4F0000]        <2> 	mov [RTCtimeDay],al
  6181                              <2> 
  6182 00004DE6 B008                <2> 	mov al,0x08			;Get month (01 to 12)
  6183 00004DE8 E83E010000          <2> 	call tget1
  6184 00004DED A2[6D4F0000]        <2> 	mov [RTCtimeMonth],al
  6185                              <2> 
  6186 00004DF2 B009                <2> 	mov al,0x09			;Get year (00 to 99)
  6187 00004DF4 E832010000          <2> 	call tget1
  6188 00004DF9 A2[6E4F0000]        <2> 	mov [RTCtimeYear],al
  6189                              <2> 	
  6190 00004DFE BE[724F0000]        <2> 	mov esi, timeshow
  6191 00004E03 8A2D[6B4F0000]      <2> 	mov ch, [RTCtimeHour]
  6192 00004E09 E828010000          <2> 	call tput1
  6193 00004E0E 8A2D[6A4F0000]      <2> 	mov ch, [RTCtimeMinute]
  6194 00004E14 E81D010000          <2> 	call tput1
  6195 00004E19 8A2D[694F0000]      <2> 	mov ch, [RTCtimeSecond]
  6196 00004E1F E812010000          <2> 	call tput1
  6197 00004E24 BE[7B4F0000]        <2> 	mov esi, dateshow
  6198 00004E29 8A2D[6D4F0000]      <2> 	mov ch, [RTCtimeMonth]
  6199 00004E2F E802010000          <2> 	call tput1
  6200 00004E34 8A2D[6C4F0000]      <2> 	mov ch, [RTCtimeDay]
  6201 00004E3A E8F7000000          <2> 	call tput1
  6202 00004E3F B520                <2> 	mov ch, 0x20
  6203 00004E41 E8F0000000          <2> 	call tput1
  6204 00004E46 4E                  <2> 	dec esi
  6205 00004E47 8A2D[6E4F0000]      <2> 	mov ch, [RTCtimeYear]
  6206 00004E4D E8E4000000          <2> 	call tput1
  6207 00004E52 E8BD000000          <2> 	call tstackget1
  6208 00004E57 C3                  <2> 	ret
  6209 00004E58 BE[724F0000]        <2> 	mov esi, timeshow
  6210 00004E5D E8BDCEFFFF          <2> 	call print
  6211                              <2> ;;get day of week
  6212                              <2> ;;add these:
  6213                              <2> ;;century value
  6214                              <2> ;;last 2 digits of year
  6215                              <2> ;;last 2 digits of year right shifted twice
  6216                              <2> ;;month table value
  6217                              <2> ;;day of the month
  6218                              <2> ;;divide these by 7
  6219                              <2> ;;the remainder is the day
  6220                              <2> findday:
  6221 00004E62 31C0                <2> 	xor eax, eax
  6222                              <2> ;;first convert the values from BCD to hex
  6223 00004E64 A0[6C4F0000]        <2> 	mov al, [RTCtimeDay]
  6224 00004E69 E873000000          <2> 	call converttohex
  6225 00004E6E 8825[6F4F0000]      <2> 	mov [dayhex], ah
  6226 00004E74 A0[6D4F0000]        <2> 	mov al, [RTCtimeMonth]
  6227 00004E79 E863000000          <2> 	call converttohex
  6228 00004E7E 8825[704F0000]      <2> 	mov [monthhex], ah
  6229 00004E84 A0[6E4F0000]        <2> 	mov al, [RTCtimeYear]
  6230 00004E89 E853000000          <2> 	call converttohex
  6231 00004E8E 8825[714F0000]      <2> 	mov [yearhex], ah
  6232 00004E94 31C0                <2> 	xor eax, eax
  6233 00004E96 A0[714F0000]        <2> 	mov al, [yearhex]
  6234 00004E9B C0E802              <2> 	shr al, 2
  6235 00004E9E 0205[714F0000]      <2> 	add al, [yearhex]
  6236 00004EA4 0506000000          <2> 	add eax, 6
  6237 00004EA9 31DB                <2> 	xor ebx, ebx
  6238 00004EAB 8A1D[704F0000]      <2> 	mov bl, [monthhex]
  6239 00004EB1 FECB                <2> 	dec bl
  6240 00004EB3 81C3[904F0000]      <2> 	add ebx, month
  6241 00004EB9 31C9                <2> 	xor ecx, ecx
  6242 00004EBB 8A0B                <2> 	mov cl, [ebx]
  6243 00004EBD 01C8                <2> 	add eax, ecx
  6244 00004EBF 8A0D[6F4F0000]      <2> 	mov cl, [dayhex]
  6245 00004EC5 01C8                <2> 	add eax, ecx
  6246 00004EC7 66BB0700            <2> 	mov bx, 7
  6247 00004ECB 31D2                <2> 	xor edx, edx
  6248 00004ECD 66F7F3              <2> 	div bx
  6249 00004ED0 C1E202              <2> 	shl edx, 2
  6250 00004ED3 81C2[9C4F0000]      <2> 	add edx, day
  6251 00004ED9 8B32                <2> 	mov esi, [edx]
  6252 00004EDB E83FCEFFFF          <2> 	call print
  6253 00004EE0 C3                  <2> 	ret
  6254                              <2> 	
  6255                              <2> converttohex:
  6256 00004EE1 88C4                <2> 	mov ah, al
  6257 00004EE3 C0E804              <2> 	shr al, 4
  6258 00004EE6 C0E404              <2> 	shl ah, 4
  6259 00004EE9 C0EC04              <2> 	shr ah, 4
  6260 00004EEC 3C00                <2> 	cmp al, 0
  6261 00004EEE 7409                <2> 	je noconverttohex
  6262                              <2> converttohexlp:
  6263 00004EF0 80C40A              <2> 	add ah, 10
  6264 00004EF3 FEC8                <2> 	dec al
  6265 00004EF5 3C00                <2> 	cmp al, 0
  6266 00004EF7 75F7                <2> 	jne converttohexlp
  6267                              <2> noconverttohex:
  6268 00004EF9 C3                  <2> 	ret
  6269                              <2> 	
  6270                              <2> tstackput1:
  6271 00004EFA 8935[654F0000]      <2> 	mov [tstack + 20], esi
  6272 00004F00 BE[514F0000]        <2> 	mov esi, tstack
  6273 00004F05 8906                <2> 	mov [esi], eax
  6274 00004F07 895E04              <2> 	mov [esi + 4], ebx
  6275 00004F0A 894E08              <2> 	mov [esi + 8], ecx
  6276 00004F0D 89560C              <2> 	mov [esi + 12], edx
  6277 00004F10 897E10              <2> 	mov [esi + 16], edi
  6278 00004F13 C3                  <2> 	ret
  6279                              <2> 	
  6280                              <2> tstackget1:
  6281 00004F14 BE[514F0000]        <2> 	mov esi, tstack
  6282 00004F19 8B06                <2> 	mov eax, [esi]
  6283 00004F1B 8B5E04              <2> 	mov ebx, [esi + 4]
  6284 00004F1E 8B4E08              <2> 	mov ecx, [esi + 8]
  6285 00004F21 8B560C              <2> 	mov edx, [esi + 12]
  6286 00004F24 8B7E10              <2> 	mov edi, [esi + 16]
  6287 00004F27 8B7614              <2> 	mov esi, [esi + 20]
  6288 00004F2A C3                  <2> 	ret
  6289                              <2> 	
  6290                              <2> tget1:
  6291 00004F2B 66BA7000            <2> 	mov dx, 0x70
  6292 00004F2F EE                  <2> 	out dx, al
  6293 00004F30 6642                <2> 	inc dx
  6294 00004F32 EC                  <2> 	in al, dx
  6295 00004F33 664A                <2> 	dec dx
  6296 00004F35 C3                  <2> 	ret
  6297                              <2> 	
  6298                              <2> tput1:
  6299 00004F36 66C1E904            <2> 	shr cx, 4
  6300 00004F3A B030                <2> 	mov al, 48
  6301 00004F3C 00E8                <2> 	add al, ch
  6302 00004F3E 8806                <2> 	mov [esi], al
  6303 00004F40 46                  <2> 	inc esi
  6304 00004F41 B030                <2> 	mov al, 48
  6305 00004F43 C0E904              <2> 	shr cl, 4
  6306 00004F46 00C8                <2> 	add al, cl
  6307 00004F48 8806                <2> 	mov [esi], al
  6308 00004F4A 81C602000000        <2> 	add esi, 2
  6309 00004F50 C3                  <2> 	ret
  6310                              <2> 		
  6311 00004F51 000000000000000000- <2> 	tstack dd 0,0,0,0,0,0
  6312 00004F5A 000000000000000000- <2>
  6313 00004F63 000000000000        <2>
  6314 00004F69 00                  <2> 	RTCtimeSecond db 0
  6315 00004F6A 00                  <2> 	RTCtimeMinute db 0
  6316 00004F6B 00                  <2> 	RTCtimeHour db 0
  6317 00004F6C 00                  <2> 	RTCtimeDay db 0
  6318 00004F6D 00                  <2> 	RTCtimeMonth db 0
  6319 00004F6E 00                  <2> 	RTCtimeYear db 0
  6320 00004F6F 00                  <2> 	dayhex db 0
  6321 00004F70 00                  <2> 	monthhex db 0
  6322 00004F71 00                  <2> 	yearhex db 0
  6323 00004F72 30303A30303A303000  <2> 	timeshow db "00:00:00",0
  6324 00004F7B 30302D30302D303030- <2> 	dateshow db "00-00-0000 ",0
  6325 00004F84 302000              <2>
  6326                              <2> 	oldcentury:	;;from 1700 to 1900
  6327 00004F87 040200              <2> 	db 4,2,0
  6328                              <2> 	century:	;;from 2000 to 2500
  6329 00004F8A 060402000604        <2> 	db 6,4,2,0,6,4
  6330                              <2> 	month:
  6331 00004F90 000303060104060205- <2> 	db 0,3,3,6,1,4,6,2,5,0,3,5
  6332 00004F99 000305              <2>
  6333                              <2> 	day:
  6334 00004F9C [B84F0000]          <2> 	dd sunday
  6335 00004FA0 [C04F0000]          <2> 	dd monday
  6336 00004FA4 [C84F0000]          <2> 	dd tuesday
  6337 00004FA8 [D14F0000]          <2> 	dd wednesday
  6338 00004FAC [DC4F0000]          <2> 	dd thursday
  6339 00004FB0 [E64F0000]          <2> 	dd friday
  6340 00004FB4 [EE4F0000]          <2> 	dd saturday
  6341                              <2> sunday:
  6342 00004FB8 53756E6461790A00    <2> 	db "Sunday",10,0
  6343                              <2> monday:
  6344 00004FC0 4D6F6E6461790A00    <2> 	db "Monday",10,0
  6345                              <2> tuesday:
  6346 00004FC8 547565736461790A00  <2> 	db "Tuesday",10,0
  6347                              <2> wednesday:
  6348 00004FD1 5765646E6573646179- <2> 	db "Wednesday",10,0
  6349 00004FDA 0A00                <2>
  6350                              <2> thursday:
  6351 00004FDC 54687572736461790A- <2> 	db "Thursday",10,0
  6352 00004FE5 00                  <2>
  6353                              <2> friday:
  6354 00004FE6 4672696461790A00    <2> 	db "Friday",10,0
  6355                              <2> saturday:
  6356 00004FEE 53617475726461790A- <2> 	db "Saturday",10,0
  6357 00004FF7 00                  <2>
  6358                              <1> %include 'source/programs/turnoff.asm'
  6359 00004FF8 FF2C7475726E6F6666- <2> 	db 255,44,"turnoff",0
  6360 00005001 00                  <2>
  6361                              <2> 	turnoff:
  6362 00005002 66BB[1D50]          <2> 			mov bx, shutdown
  6363 00005006 66891D[EE0C0000]    <2> 			mov [realmodeptr], bx
  6364 0000500D BB[47500000]        <2> 			mov ebx, halt
  6365 00005012 891D[EA0C0000]      <2> 			mov [realmodereturn], ebx
  6366 00005018 E9B6BBFFFF          <2> 			jmp realmode
  6367                              <2> 
  6368                              <2> [BITS 16]
  6369                              <2> 		shutdown:
  6370 0000501D B453                <2> 			mov ah, 0x53
  6371 0000501F B004                <2> 			mov al, 4
  6372 00005021 31DB                <2> 			xor bx, bx
  6373 00005023 CD15                <2> 			int 0x15
  6374                              <2> 			
  6375 00005025 B453                <2> 			mov ah, 0x53
  6376 00005027 B001                <2> 			mov al, 1
  6377 00005029 31DB                <2> 			xor bx, bx
  6378 0000502B CD15                <2> 			int 0x15
  6379                              <2> 			
  6380 0000502D B453                <2> 			mov ah, 0x53
  6381 0000502F B008                <2> 			mov al, 8
  6382 00005031 BB0100              <2> 			mov bx, 1
  6383 00005034 B90100              <2> 			mov cx, 1
  6384 00005037 CD15                <2> 			int 0x15
  6385                              <2> 			
  6386 00005039 B453                <2> 			mov ah, 0x53
  6387 0000503B B007                <2> 			mov al, 7
  6388 0000503D BB0100              <2> 			mov bx, 1
  6389 00005040 B90300              <2> 			mov cx, 3
  6390 00005043 CD15                <2> 			int 0x15
  6391 00005045 EBFE                <2> 			jmp $
  6392                              <2> 			[BITS 32]
  6393 00005047 EBFE                <2> halt: jmp $
  6394                              <1> %include 'source/programs/wait.asm'
  6395 00005049 FF2C7761697400      <2> db 255,44,"wait",0
  6396                              <2> waitkey:
  6397 00005050 E89BD1FFFF          <2> 		call getchar
  6398 00005055 C3                  <2> 		ret
  6399                              <1> %include 'source/programs/while.asm'
  6400 00005056 FF2C7768696C6500    <2> db 255,44,"while",0
  6401 0000505E 30C0                <2> whilecmd:  xor al, al
  6402 00005060 3805[A4B50000]      <2> 	cmp [BATCHISON], al
  6403 00005066 0F841EE7FFFF        <2> 	je near notbatch
  6404 0000506C 8B35[A0B50000]      <2> 	mov esi, [BATCHPOS]
  6405 00005072 81EE02000000        <2> 	sub esi, 2
  6406 00005078 4E                  <2> whilefnd: dec esi
  6407 00005079 8A06                <2> 	mov al, [esi]
  6408 0000507B 3C0A                <2> 	cmp al, 10
  6409 0000507D 0F840A000000        <2> 	je near whilefnd2
  6410 00005083 3C00                <2> 	cmp al, 0
  6411 00005085 0F8402000000        <2> 	je near whilefnd2
  6412 0000508B EBEB                <2> 	jmp whilefnd
  6413                              <2> whilefnd2:
  6414 0000508D 46                  <2> 	inc esi
  6415 0000508E 8935[A6B50000]      <2> 	mov [LOOPPOS], esi
  6416 00005094 C605[A5B50000]01    <2> 	mov BYTE [LOOPON], 1
  6417 0000509B BE[AAC90000]        <2> 	mov esi, buftxt
  6418 000050A0 BB[AAC90000]        <2> 	mov ebx, buftxt
  6419 000050A5 81C306000000        <2> 	add ebx, 6
  6420 000050AB E99EF0FFFF          <2> 	jmp chkeqsn
  6421                              <1> progend:		;programs end here	
  6422                              <1> batchprogend:
  6423                                  	%include "source/hardware.asm"
  6424                              <1> %ifdef gui.included
  6425                              <1> 	%include "source/drivers/video/vesa.asm"
  6426                              <2> [BITS 16]
  6427                              <2> guiswitch:
  6428 000050B0 81F90000            <2> 	cmp cx, 0
  6429 000050B4 750B                <2> 	jne guiswitchdefnum
  6430 000050B6 B81200              <2> 	mov ax, 12h
  6431 000050B9 31DB                <2> 	xor bx, bx
  6432 000050BB CD10                <2> 	int 10h
  6433 000050BD E85100              <2> 	call guiloadagain
  6434                              <2> guiswitchnocando:
  6435 000050C0 C3                  <2> 	ret	;return without switching as mode number is bad
  6436                              <2> guiswitchdefnum:	;switch to a defined mode number
  6437 000050C1 B8004F              <2> 	mov ax, 0x4F00
  6438 000050C4 BF[8E52]            <2> 	mov di, VBEMODEBLOCK
  6439 000050C7 CD10                <2> 	int 10h
  6440 000050C9 BE[B052]            <2> 	mov si, reserved
  6441 000050CC 81EE0200            <2> 	sub si, 2
  6442                              <2> .loop:
  6443 000050D0 81C60200            <2> 	add si, 2
  6444 000050D4 81FE[8E53]          <2> 	cmp si, oemdata
  6445 000050D8 74E6                <2> 	je guiswitchnocando
  6446 000050DA 813CFFFF            <2> 	cmp word [si], 0xFFFF
  6447 000050DE 74E0                <2> 	je guiswitchnocando
  6448 000050E0 390C                <2> 	cmp [si], cx
  6449 000050E2 75EC                <2> 	jne .loop
  6450 000050E4 8936[E851]          <2> 	mov [videomodecache], si
  6451 000050E8 81C90040            <2> 	or cx, 0x4000	;make sure linear frame buffer is selected
  6452 000050EC B8014F              <2> 	mov ax, 0x4F01
  6453 000050EF BF[8E54]            <2> 	mov di, VBEMODEINFOBLOCK
  6454 000050F2 890E[E651]          <2> 	mov [vesamode], cx
  6455 000050F6 CD10                <2> 	int 10h
  6456 000050F8 E9CB00              <2> 	jmp selectedvesa
  6457                              <2> guiload:
  6458 000050FB BE[6652]            <2> 	mov si, bootmsg
  6459 000050FE E876AF              <2> 	call printrm
  6460 00005101 31C0                <2> 	xor ax, ax
  6461 00005103 CD16                <2> 	int 16h
  6462 00005105 3C79                <2> 	cmp al, "y"
  6463 00005107 0F8526AF            <2> 	jne near vgaset
  6464 0000510B BE[078B]            <2> 	mov si, crlf
  6465 0000510E E866AF              <2> 	call printrm
  6466                              <2> guiloadagain:
  6467 00005111 B8004F              <2> 	mov ax, 04F00h
  6468 00005114 BF[8E52]            <2> 	mov di, VBEMODEBLOCK
  6469 00005117 CD10                <2> 	int 10h
  6470 00005119 BE[B052]            <2> 	mov si, reserved
  6471 0000511C 81EE0200            <2> 	sub si, 2
  6472                              <2> findvideomodes:
  6473 00005120 81C60200            <2> 	add si, 2
  6474 00005124 8B0C                <2> 	mov cx, [si]
  6475 00005126 81F9FFFF            <2> 	cmp cx, 0xFFFF
  6476 0000512A 0F840A00            <2> 	je near nextvmode
  6477 0000512E 81FE[8E53]          <2> 	cmp si, oemdata
  6478 00005132 0F83FBAE            <2> 	jae near vgaset	;;kill if no valid list is found
  6479 00005136 EBE8                <2> 	jmp findvideomodes 	
  6480                              <2> ;;debug,shows vmodes available
  6481                              <2> nextvmode:
  6482 00005138 81EE0200            <2> 	sub si, 2
  6483 0000513C 81FE[B052]          <2> 	cmp si, reserved
  6484 00005140 0F82CDFF            <2> 	jb near guiloadagain
  6485 00005144 8B0C                <2> 	mov cx, [si]
  6486 00005146 81F9FFFF            <2> 	cmp cx, 0xFFFF
  6487 0000514A 0F84EAFF            <2> 	je near nextvmode
  6488 0000514E 81C90040            <2> 	or cx, 0x4000 		;;Linear Frame Buffer
  6489 00005152 B8014F              <2> 	mov ax, 04F01h
  6490 00005155 BF[8E54]            <2> 	mov di, VBEMODEINFOBLOCK
  6491 00005158 890E[E651]          <2> 	mov [vesamode], cx
  6492 0000515C CD10                <2> 	int 10h
  6493 0000515E A0[A754]            <2> 	mov al, [bitsperpixel]
  6494 00005161 3C10                <2> 	cmp al, 16
  6495 00005163 75D3                <2> 	jne nextvmode
  6496 00005165 8936[E851]          <2> 	mov [videomodecache], si
  6497 00005169 84E4                <2> 	test ah, ah
  6498 0000516B 0F842200            <2> 	jz near setvesamode
  6499 0000516F EBC7                <2> 	jmp nextvmode
  6500 00005171 0A0D49732074686973- <2> isthisvideook db 10,13,"Is this video mode OK?(y/n)",13,10,0
  6501 0000517A 20766964656F206D6F- <2>
  6502 00005183 6465204F4B3F28792F- <2>
  6503 0000518C 6E290D0A00          <2>
  6504                              <2> setvesamode:
  6505 00005191 8B0E[A054]          <2> 	mov cx, [resolutionx]
  6506 00005195 E85900              <2> 	call decshow
  6507 00005198 B078                <2> 	mov al, "x"
  6508 0000519A E8C100              <2> 	call char
  6509 0000519D 8B0E[A254]          <2> 	mov cx, [resolutiony]
  6510 000051A1 E84D00              <2> 	call decshow
  6511 000051A4 B040                <2> 	mov al, "@"
  6512 000051A6 E8B500              <2> 	call char
  6513 000051A9 31C9                <2> 	xor cx, cx
  6514 000051AB 8A0E[A754]          <2> 	mov cl, [bitsperpixel]
  6515 000051AF E83F00              <2> 	call decshow
  6516 000051B2 BE[7151]            <2> 	mov si, isthisvideook
  6517 000051B5 E8BFAE              <2> 	call printrm
  6518 000051B8 31C0                <2> 	xor ax, ax
  6519 000051BA CD16                <2> 	int 16h
  6520 000051BC 8B36[E851]          <2> 	mov si, [videomodecache]
  6521 000051C0 3C79                <2> 	cmp al, "y"
  6522 000051C2 0F8572FF            <2> 	jne near nextvmode
  6523                              <2> selectedvesa:
  6524 000051C6 8B16[A054]          <2> 	mov dx, [resolutionx]
  6525 000051CA 01D2                <2> 	add dx, dx
  6526 000051CC 8916[8E55]          <2> 	mov [resolutionx2], dx
  6527 000051D0 31D2                <2> 	xor dx, dx
  6528 000051D2 31C9                <2> 	xor cx, cx
  6529 000051D4 B8024F              <2> 	mov ax, 04F02h
  6530 000051D7 8B1E[E651]          <2> 	mov bx, [vesamode]
  6531 000051DB CD10                <2> 	int 10h		;;enter VESA mode
  6532 000051DD C606[E49C]01        <2> 	mov byte [guion], 1
  6533 000051E2 E85CAE              <2> 	call getmemorysize;get the memory map after the video is initialized
  6534 000051E5 C3                  <2> 	ret
  6535                              <2> 	
  6536 000051E6 0000                <2> vesamode dw 0
  6537 000051E8 0000                <2> videomodecache dw 0
  6538                              <2> 
  6539 000051EA 0000000000          <2> dcnm db 0,0,0,0,0
  6540 000051EF 0000                <2> dcnmend db 0,0
  6541                              <2> 
  6542                              <2> 
  6543                              <2> decshow:
  6544 000051F1 BE[EA51]            <2> 	mov si, dcnm
  6545                              <2> decclear:
  6546 000051F4 B030                <2> 	mov al, "0"
  6547 000051F6 8804                <2> 	mov [si], al
  6548 000051F8 46                  <2> 	inc si
  6549 000051F9 81FE[EF51]          <2> 	cmp si, dcnmend
  6550 000051FD 76F5                <2> 	jbe decclear
  6551 000051FF 4E                  <2> 	dec si
  6552 00005200 E81500              <2> 	call convertrm
  6553 00005203 BE[EA51]            <2> 	mov si, dcnm
  6554                              <2> dectst:
  6555 00005206 8A04                <2> 	mov al, [si]
  6556 00005208 46                  <2> 	inc si
  6557 00005209 81FE[EF51]          <2> 	cmp si, dcnmend
  6558 0000520D 7704                <2> 	ja dectstend
  6559 0000520F 3C30                <2> 	cmp al, "0"
  6560 00005211 76F3                <2> 	jbe dectst
  6561                              <2> dectstend:
  6562 00005213 4E                  <2> 	dec si
  6563 00005214 E860AE              <2> 	call printrm
  6564 00005217 C3                  <2> 	ret
  6565                              <2> 	
  6566                              <2> 	
  6567                              <2> convertrm:
  6568 00005218 4E                  <2> 	dec si
  6569 00005219 89F3                <2> 	mov bx, si		;place to convert into must be in si, number to convert must be in cx
  6570                              <2> cnvrtrm:
  6571 0000521B 89DE                <2> 	mov si, bx
  6572 0000521D 81EE0300            <2> 	sub si, 3
  6573 00005221 46                  <2> ten3rm:	inc si
  6574 00005222 81F9E803            <2> 	cmp cx, 1000
  6575 00005226 7208                <2> 	jb ten2rm
  6576 00005228 81E9E803            <2> 	sub cx, 1000
  6577 0000522C FE04                <2> 	inc byte [si]
  6578 0000522E EBEB                <2> 	jmp cnvrtrm
  6579 00005230 46                  <2> ten2rm:	inc si
  6580 00005231 81F96400            <2> 	cmp cx, 100
  6581 00005235 7208                <2> 	jb ten1rm
  6582 00005237 81E96400            <2> 	sub cx, 100
  6583 0000523B FE04                <2> 	inc byte [si]
  6584 0000523D EBDC                <2> 	jmp cnvrtrm
  6585 0000523F 46                  <2> ten1rm:	inc si
  6586 00005240 81F90A00            <2> 	cmp cx, 10
  6587 00005244 7208                <2> 	jb ten0rm
  6588 00005246 81E90A00            <2> 	sub cx, 10
  6589 0000524A FE04                <2> 	inc byte [si]
  6590 0000524C EBCD                <2> 	jmp cnvrtrm
  6591 0000524E 46                  <2> ten0rm:	inc si
  6592 0000524F 81F90100            <2> 	cmp cx, 1
  6593 00005253 7208                <2> 	jb tendnrm
  6594 00005255 81E90100            <2> 	sub cx, 1
  6595 00005259 FE04                <2> 	inc byte [si]
  6596 0000525B EBBE                <2> 	jmp cnvrtrm
  6597                              <2> tendnrm:
  6598 0000525D C3                  <2> 	ret
  6599                              <2> 
  6600                              <2>     char: 		    ;char must be in al
  6601 0000525E BB0700              <2>        mov bx, 07
  6602 00005261 B40E                <2> 	   mov ah, 0Eh
  6603 00005263 CD10                <2> 	   int 10h
  6604 00005265 C3                  <2> 	   ret
  6605                              <2> 
  6606 00005266 426F6F7420696E746F- <2> bootmsg:	db "Boot into the GUI?(y/n)",0
  6607 0000526F 20746865204755493F- <2>
  6608 00005278 28792F6E2900        <2>
  6609                              <2> 
  6610                              <2> 
  6611                              <2> mcursor:
  6612 0000527E 01                  <2> 	db	00000001b
  6613 0000527F 81                  <2> 	db	10000001b
  6614 00005280 C1                  <2> 	db	11000001b
  6615 00005281 E1                  <2> 	db	11100001b
  6616 00005282 F1                  <2> 	db	11110001b
  6617 00005283 F9                  <2> 	db	11111001b
  6618 00005284 FD                  <2> 	db	11111101b
  6619 00005285 FF                  <2> 	db	11111111b
  6620 00005286 F9                  <2> 	db	11111001b
  6621 00005287 B9                  <2> 	db	10111001b
  6622 00005288 39                  <2> 	db	00111001b
  6623 00005289 1C                  <2> 	db	00011100b
  6624 0000528A 1C                  <2> 	db	00011100b
  6625 0000528B 0E                  <2> 	db	00001110b
  6626 0000528C 0E                  <2> 	db	00001110b
  6627 0000528D 0C                  <2> 	db	00001100b
  6628                              <2> mcursorend:
  6629                              <2> 
  6630                              <2> 
  6631                              <2> VBEMODEBLOCK:
  6632 0000528E 00<rept>            <2> vbesignature 		times  4 db 0 	;VBE Signature
  6633 00005292 00<rept>            <2> vbeversion  		times  2 db 0	;VBE Version
  6634 00005294 00<rept>            <2> oemstringptr  		times  4 db 0	;Pointer to OEM String
  6635 00005298 00<rept>            <2> capabilities 		times  4 db 0	;Capabilities of graphics cont.
  6636 0000529C 00<rept>            <2> videomodeptr 		times  4 db 0	;Pointer to Video Mode List
  6637 000052A0 00<rept>            <2> totalmemory   		times  2 db 0	;number of 64Kb memory blocks
  6638 000052A2 00<rept>            <2> oemsoftwarerev  	times  2 db 0	;VBE implementation Software revision
  6639 000052A4 00<rept>            <2> oemvendornameptr 	times  4 db 0	;Pointer to Vendor Name String
  6640 000052A8 00<rept>            <2> oemproductnameptr 	times  4 db 0	;Pointer to Product Name String
  6641 000052AC 00<rept>            <2> oemproductrevptr 	times  4 db 0	;Pointer to Product Revision String
  6642 000052B0 00<rept>            <2> reserved			times  222 db 0	;Reserved for VBE implementation scratch area
  6643 0000538E 00<rept>            <2> oemdata 			times  256 db 0	;Data Area for OEM Strings
  6644                              <2> 
  6645                              <2> VBEMODEINFOBLOCK:
  6646                              <2> ;Mandatory information for all VBE revision
  6647 0000548E 00<rept>            <2> modeattributes   	times  2 db 0	;Mode attributes
  6648 00005490 00                  <2> winaattributes   	times  1 db 0	;Window A attributes
  6649 00005491 00                  <2> winbattributes   	times  1 db 0	;Window B attributes
  6650 00005492 00<rept>            <2> wingranularity   	times  2 db 0	;Window granularity
  6651 00005494 00<rept>            <2> winsize          	times  2 db 0	;Window size
  6652 00005496 00<rept>            <2> winasegment      	times  2 db 0	;Window A start segment
  6653 00005498 00<rept>            <2> winbsegment      	times  2 db 0	;Window B start segment
  6654 0000549A 00<rept>            <2> winfuncptr       	times  4 db 0	;pointer to window function
  6655 0000549E 00<rept>            <2> bytesperscanline 	times  2 db 0	;Bytes per scan line
  6656                              <2> 
  6657                              <2> ;Mandatory information for VBE 1.2 and above
  6658 000054A0 00<rept>            <2> resolutionx     	times  2 db 0	;Horizontal resolution in pixel or chars
  6659 000054A2 00<rept>            <2> resolutiony	    	times  2 db 0	;Vertical resolution in pixel or chars
  6660 000054A4 00                  <2> xcharsize       	times  1 db 0	;Character cell width in pixel
  6661 000054A5 00                  <2> ycharsize       	times  1 db 0	;Character cell height in pixel
  6662 000054A6 00                  <2> numberofplanes  	times  1 db 0	;Number of memory planes
  6663 000054A7 00                  <2> bitsperpixel    	times  1 db 0	;Bits per pixel
  6664 000054A8 00                  <2> numberofbanks   	times  1 db 0	;Number of banks
  6665 000054A9 00                  <2> memorymodel     	times  1 db 0	;Memory model type
  6666 000054AA 00                  <2> banksize        	times  1 db 0	;Bank size in KB
  6667 000054AB 00                  <2> numberofimagepages	times  1 db 0	;Number of images
  6668 000054AC 00                  <2> reserved1       	times  1 db 0	;Reserved for page function
  6669                              <2> 
  6670                              <2> ;Direct Color fields (required for direct/6 and YUV/7 memory models)
  6671 000054AD 00                  <2> redmasksize			times  1 db 0	;Size of direct color red mask in bits
  6672 000054AE 00                  <2> redfieldposition	times  1 db 0	;Bit position of lsb of red bask
  6673 000054AF 00                  <2> greenmasksize   	times  1 db 0	;Size of direct color green mask in bits
  6674 000054B0 00                  <2> greenfieldposition	times  1 db 0	;Bit position of lsb of green bask
  6675 000054B1 00                  <2> bluemasksize		times  1 db 0	;Size of direct color blue mask in bits
  6676 000054B2 00                  <2> bluefieldposition	times  1 db 0	;Bit position of lsb of blue bask
  6677 000054B3 00                  <2> rsvdmasksize        times  1 db 0		;Size of direct color reserved mask in bits
  6678 000054B4 00                  <2> rsvdfieldposition	times  1 db 0		;Bit position of lsb of reserved bask
  6679 000054B5 00                  <2> directcolormodeinfo	times  1 db 0	;Direct color mode attributes
  6680                              <2> 
  6681                              <2> ;Mandatory information for VBE 2.0 and above
  6682 000054B6 00<rept>            <2> physbaseptr 		times  4 db 0	;Physical address for flat frame buffer
  6683 000054BA 00<rept>            <2> offscreenmemoffset 	times  4 db 0	;Pointer to start of off screen memory
  6684 000054BE 00<rept>            <2> offscreenmemsize 	times  2 db 0    ;Amount of off screen memory in 1Kb units
  6685 000054C0 00<rept>            <2> reserved2 			times  206 db 0  ;Remainder of ModeInfoBlock
  6686                              <2> 
  6687 0000558E 00000000            <2> resolutionx2 dd 0	;this is not part of the VBE but is necessary GUI info
  6688                              <2> VBEEND:
  6689                              <2> [BITS 32]
  6690                              <1> 	%include "source/drivers/input/mouse.asm"
  6691 00005592 00                  <2> mousedisabled db 0
  6692                              <2> 	
  6693                              <2> 	cursorgui:
  6694 00005593 803D[657F0000]01    <2> 		cmp byte [mouseon], 1
  6695 0000559A 0F8432000000        <2> 		je near mousedaemon
  6696 000055A0 803D[E49C0000]00    <2> 		cmp byte [guion], 0
  6697 000055A7 0F8415070000        <2> 		je near entdown
  6698                              <2> 	initmouse:
  6699 000055AD 803D[E49C0000]00    <2> 		cmp byte [guion], 0
  6700 000055B4 7405                <2> 		je noswmsposinit
  6701 000055B6 E88B110000          <2> 		call switchmousepos2
  6702                              <2> 	noswmsposinit:
  6703 000055BB E85D020000          <2> 	  	call PS2SET
  6704 000055C0 E886020000          <2> 		call ACTMOUS
  6705 000055C5 C605[657F0000]01    <2> 		mov byte [mouseon],1
  6706 000055CC E89F020000          <2> 		call GETB 	;;Get the responce byte of the mouse (like: Hey i am active)
  6707                              <2> 		;call GETB
  6708                              <2> 				;;If the bytes are mixed up,
  6709                              <2> 				;;remove this line or add another of this line.
  6710                              <2> 	nomouse:
  6711 000055D1 C3                  <2> 		ret
  6712                              <2> 		
  6713                              <2> 	mousedaemon:
  6714 000055D2 803D[657F0000]01    <2> 		cmp byte [mouseon], 1
  6715 000055D9 75D2                <2> 		jne initmouse
  6716 000055DB E464                <2> 		in al, 64h ; Status
  6717 000055DD A820                <2> 		test al, 20h ; PS2-Mouse?
  6718 000055DF 0F8502000000        <2> 		jnz near moused
  6719 000055E5 F4                  <2> 		hlt
  6720 000055E6 C3                  <2> 		ret
  6721                              <2> 	moused:
  6722 000055E7 803D[92550000]01    <2> 		cmp byte [mousedisabled], 1
  6723 000055EE 74E1                <2> 		je nomouse
  6724 000055F0 E87B020000          <2> 		  call GETB
  6725 000055F5 88C3                <2> 		  mov  bl, al
  6726 000055F7 80E301              <2> 		  and  bl, 1
  6727 000055FA 881D[95580000]      <2> 		  mov  BYTE [LBUTTON], bl
  6728 00005600 88C3                <2> 		  mov  bl, al
  6729 00005602 80E302              <2> 		  and  bl, 2
  6730 00005605 D0EB                <2> 		  shr  bl, 1
  6731 00005607 881D[96580000]      <2> 		  mov  BYTE [RBUTTON], bl
  6732 0000560D 88C3                <2> 		  mov  bl, al
  6733 0000560F 80E304              <2> 		  and  bl, 4
  6734 00005612 C0EB02              <2> 		  shr  bl, 2
  6735 00005615 881D[97580000]      <2> 		  mov  BYTE [MBUTTON], bl
  6736 0000561B E850020000          <2> 		  call GETB
  6737 00005620 A2[98580000]        <2> 		  mov  BYTE [XCOORD], al
  6738 00005625 E846020000          <2> 		  call GETB
  6739 0000562A A2[99580000]        <2> 		  mov  BYTE [YCOORD], al
  6740                              <2> 
  6741                              <2> 	showpixelcursor:
  6742 0000562F 668B15[84570000]    <2> 		mov dx, [mousecursorposition]
  6743 00005636 668B0D[86570000]    <2> 		mov cx, [mousecursorposition + 2]
  6744 0000563D 668915[80570000]    <2> 		mov [lastmouseposition], dx
  6745 00005644 66890D[82570000]    <2> 		mov [lastmouseposition + 2], cx
  6746 0000564B A0[98580000]        <2> 		mov al, [XCOORD]
  6747 00005650 3C80                <2> 		cmp al, 128
  6748 00005652 730C                <2> 		jae subxcoord
  6749 00005654 00C0                <2> 		add al, al
  6750 00005656 30E4                <2> 		xor ah, ah
  6751 00005658 6601C2              <2> 		add dx, ax
  6752 0000565B E90B000000          <2> 		jmp subxcoorddn
  6753                              <2> 	subxcoord:
  6754 00005660 00C0                <2> 		add al, al
  6755 00005662 30DB                <2> 		xor bl, bl
  6756 00005664 28C3                <2> 		sub bl, al
  6757 00005666 30FF                <2> 		xor bh, bh
  6758 00005668 6629DA              <2> 		sub dx, bx
  6759                              <2> 	subxcoorddn:
  6760 0000566B 8A1D[99580000]      <2> 		mov bl, [YCOORD]
  6761 00005671 30C0                <2> 		xor al, al
  6762 00005673 28D8                <2> 		sub al, bl
  6763 00005675 3C80                <2> 		cmp al, 128
  6764 00005677 730A                <2> 		jae subycoord
  6765 00005679 30E4                <2> 		xor ah, ah
  6766 0000567B 6601C1              <2> 		add cx, ax
  6767 0000567E E909000000          <2> 		jmp subycoorddn
  6768                              <2> 	subycoord:
  6769 00005683 30DB                <2> 		xor bl, bl
  6770 00005685 28C3                <2> 		sub bl, al
  6771 00005687 30FF                <2> 		xor bh, bh
  6772 00005689 6629D9              <2> 		sub cx, bx
  6773                              <2> 	subycoorddn:
  6774 0000568C 6681FA204E          <2> 		cmp dx, 20000
  6775 00005691 7603                <2> 		jbe nooriginx2
  6776 00005693 6631D2              <2> 		xor dx, dx
  6777                              <2> 	nooriginx2:
  6778 00005696 6681F9204E          <2> 		cmp cx, 20000
  6779 0000569B 7603                <2> 		jbe nooriginy2
  6780 0000569D 6631C9              <2> 		xor cx, cx
  6781                              <2> 	nooriginy2:
  6782 000056A0 6681FA0000          <2> 		cmp dx, 0
  6783 000056A5 7415                <2> 		je nofixxcolumn2
  6784 000056A7 663B15[8E550000]    <2> 		cmp dx, [resolutionx2]
  6785 000056AE 720C                <2> 		jb nofixxcolumn2
  6786 000056B0 668B15[8E550000]    <2> 		mov dx, [resolutionx2]
  6787 000056B7 6681EA0200          <2> 		sub dx, 2
  6788                              <2> 	nofixxcolumn2:
  6789 000056BC 6681F90000          <2> 		cmp cx, 0
  6790 000056C1 7415                <2> 		je nofixyrow2
  6791 000056C3 663B0D[A2540000]    <2> 		cmp cx, [resolutiony]
  6792 000056CA 720C                <2> 		jb nofixyrow2
  6793 000056CC 668B0D[A2540000]    <2> 		mov cx, [resolutiony]
  6794 000056D3 6681E90100          <2> 		sub cx, 1
  6795                              <2> 	nofixyrow2:
  6796 000056D8 668915[84570000]    <2> 		mov [mousecursorposition], dx
  6797 000056DF 66890D[86570000]    <2> 		mov [mousecursorposition + 2], cx
  6798 000056E6 803D[E49C0000]00    <2> 		cmp byte [guion], 0
  6799 000056ED 0F8495000000        <2> 		je near termmouse
  6800 000056F3 E8EE0F0000          <2> 		call switchmousepos ;;use dragging code to ensure proper icon drag
  6801 000056F8 803D[95580000]01    <2> 		cmp byte [LBUTTON], 1
  6802 000056FF 0F8428200000        <2> 		je near clickicon
  6803 00005705 803D[96580000]01    <2> 		cmp byte [RBUTTON], 1
  6804 0000570C 0F841B200000        <2> 		je near clickicon
  6805 00005712 A0[1A770000]        <2> 		mov al, [pbutton]
  6806 00005717 C705[1D770000]0000- <2> 		mov dword [dragging], 0
  6807 0000571F 0000                <2>
  6808 00005721 3C00                <2> 		cmp al, 0
  6809 00005723 740F                <2> 		je nopreviousbutton
  6810 00005725 E8640F0000          <2> 		call clearmousecursor
  6811 0000572A E8BD120000          <2> 		call reloadallgraphics
  6812                              <2> 	windowtermcopyend:
  6813 0000572F E812100000          <2> 		call switchmousepos2
  6814                              <2> 	nopreviousbutton:
  6815 00005734 30C0                <2> 		xor al, al
  6816 00005736 A2[1A770000]        <2> 		mov [pbutton], al
  6817 0000573B A2[777C0000]        <2> 		mov [windrag], al
  6818 00005740 A0[95580000]        <2> 		mov al, [LBUTTON]
  6819 00005745 A2[1B770000]        <2> 		mov [pLBUTTON], al
  6820 0000574A A0[96580000]        <2> 		mov al, [RBUTTON]
  6821 0000574F A2[1C770000]        <2> 		mov [pRBUTTON], al
  6822 00005754 31D2                <2> 		xor edx, edx
  6823 00005756 668B15[84570000]    <2> 		mov dx, [mousecursorposition]
  6824 0000575D 668B0D[86570000]    <2> 		mov cx, [mousecursorposition + 2]
  6825 00005764 66BB18C7            <2> 		mov bx, 1100011100011000b
  6826 00005768 30E4                <2> 		xor ah, ah
  6827 0000576A B0FE                <2> 		mov al, 254
  6828 0000576C C605[17770000]01    <2> 		mov byte [showcursorfonton], 1
  6829 00005773 E83B180000          <2> 		call showfontvesa
  6830 00005778 C605[17770000]00    <2> 		mov byte [showcursorfonton], 0
  6831 0000577F C3                  <2> 		ret
  6832                              <2> 
  6833 00005780 00000000            <2> lastmouseposition dw 0,0
  6834 00005784 00000000            <2> mousecursorposition dw 0,0	
  6835                              <2> 
  6836                              <2> termmouse:
  6837 00005788 BE[C0D00000]        <2> 		mov esi, videobuf
  6838 0000578D 31D2                <2> 		xor edx, edx
  6839 0000578F 668B15[80570000]    <2> 		mov dx, [lastmouseposition]
  6840 00005796 668B0D[82570000]    <2> 		mov cx, [lastmouseposition + 2]
  6841 0000579D 66A1[1B580000]      <2> 		mov ax, [cursorcache]
  6842 000057A3 663D0000            <2> 		cmp ax, 0
  6843 000057A7 7425                <2> 		je nocopycursorcache
  6844 000057A9 66C1E104            <2> 		shl cx, 4
  6845 000057AD 66C1E203            <2> 		shl dx, 3
  6846 000057B1 01D6                <2> 		add esi, edx
  6847 000057B3 6631D2              <2> 		xor dx, dx
  6848 000057B6 8A15[4C240000]      <2> 		mov dl, [charxy]
  6849 000057BC 6641                <2> 		inc cx
  6850                              <2> termmousecplp1:
  6851 000057BE 01D6                <2> 		add esi, edx
  6852 000057C0 6649                <2> 		dec cx
  6853 000057C2 6681F90000          <2> 		cmp cx, 0
  6854 000057C7 75F5                <2> 		jne termmousecplp1
  6855 000057C9 29D6                <2> 		sub esi, edx
  6856 000057CB 668906              <2> 		mov [esi], ax
  6857                              <2> nocopycursorcache:
  6858 000057CE BE[C0D00000]        <2> 		mov esi, videobuf
  6859 000057D3 31D2                <2> 		xor edx, edx
  6860 000057D5 668B15[84570000]    <2> 		mov dx, [mousecursorposition]
  6861 000057DC 668B0D[86570000]    <2> 		mov cx, [mousecursorposition + 2]
  6862 000057E3 66C1E104            <2> 		shl cx, 4
  6863 000057E7 66C1E203            <2> 		shl dx, 3
  6864 000057EB 01D6                <2> 		add esi, edx
  6865 000057ED 6631D2              <2> 		xor dx, dx
  6866 000057F0 8A15[4C240000]      <2> 		mov dl, [charxy]
  6867 000057F6 6641                <2> 		inc cx
  6868                              <2> termmousecplp2:
  6869 000057F8 01D6                <2> 		add esi, edx
  6870 000057FA 6649                <2> 		dec cx
  6871 000057FC 6681F90000          <2> 		cmp cx, 0
  6872 00005801 75F5                <2> 		jne termmousecplp2
  6873 00005803 29D6                <2> 		sub esi, edx
  6874 00005805 668B06              <2> 		mov ax, [esi]
  6875 00005808 66A3[1B580000]      <2> 		mov [cursorcache], ax
  6876 0000580E B080                <2> 		mov al, 128
  6877 00005810 B407                <2> 		mov ah, 7
  6878 00005812 668906              <2> 		mov [esi], ax
  6879 00005815 E8A3CDFFFF          <2> 		call termcopy
  6880 0000581A C3                  <2> 		ret
  6881 0000581B 0000                <2> cursorcache db 0,0
  6882                              <2> 
  6883                              <2> PS2SET:
  6884 0000581D B0A8                <2>   mov  al, 0xa8		; enable mouse port
  6885 0000581F E664                <2>   out  0x64, al		; write to keyboardcontroller
  6886 00005821 E801000000          <2>   call CHKPRT		; check if command is progressed (demand!)
  6887 00005826 C3                  <2> ret
  6888                              <2> 
  6889                              <2> CHKPRT:
  6890 00005827 66B96400            <2>   mov  cx, 100
  6891                              <2>  .again:
  6892 0000582B E464                <2>   in   al, 0x64		; read from keyboardcontroller
  6893 0000582D A802                <2>   test al, 2		; Check if input buffer is empty
  6894 0000582F 7402                <2>   je .go
  6895 00005831 E2F8                <2>   loop .again
  6896                              <2>  .go:
  6897 00005833 C3                  <2> ret
  6898                              <2> 
  6899                              <2> WMOUS:
  6900 00005834 B0D4                <2>   mov  al, 0xd4		; write to mouse device instead of to keyboard
  6901 00005836 E664                <2>   out  0x64, al		; write to keyboardcontroller
  6902 00005838 E8EAFFFFFF          <2>   call CHKPRT		; check if command is progressed (demand!)
  6903 0000583D C3                  <2> ret
  6904                              <2> 
  6905                              <2> MBUFFUL:
  6906 0000583E 66B96400            <2>   mov cx, 100
  6907                              <2>  .mn:
  6908 00005842 E464                <2>   in   al, 0x64		; read from keyboardcontroller
  6909 00005844 A820                <2>   test al, 0x20		; check if mouse output buffer is full
  6910 00005846 7402                <2>   jz  .mnn
  6911 00005848 E2F8                <2>   loop .mn
  6912                              <2>  .mnn:
  6913 0000584A C3                  <2> ret
  6914                              <2> 
  6915                              <2> 
  6916                              <2> ACTMOUS:
  6917 0000584B E8E4FFFFFF          <2>   call WMOUS
  6918 00005850 B0F4                <2>   mov  al, 0xf4 	; Command to activate mouse itselve (Stream mode)
  6919 00005852 E660                <2>   out  0x60, al		; write ps/2 controller output port (activate mouse)
  6920 00005854 E8CEFFFFFF          <2>   call CHKPRT		; check if command is progressed (demand!)
  6921 00005859 E801000000          <2>   call CHKMOUS		; check if a byte is available
  6922 0000585E C3                  <2> ret
  6923                              <2> 
  6924                              <2> CHKMOUS:
  6925 0000585F B300                <2>   mov  bl, 0
  6926 00005861 66B96400            <2>   mov cx, 100
  6927                              <2>  .vrd:
  6928 00005865 E464                <2>   in   al, 0x64		; read from keyboardcontroller
  6929 00005867 A801                <2>   test al, 1		; check if controller buffer (60h) has data
  6930 00005869 7504                <2>   jnz .yy
  6931 0000586B E2F8                <2>   loop .vrd
  6932 0000586D B301                <2>   mov  bl, 1
  6933                              <2>  .yy:
  6934 0000586F C3                  <2> ret
  6935                              <2> 
  6936                              <2> GETB:
  6937                              <2>  .cagain:
  6938 00005870 E8EAFFFFFF          <2>   call CHKMOUS		; check if a byte is available
  6939 00005875 08DB                <2>   or bl, bl
  6940 00005877 75F7                <2>   jnz .cagain
  6941 00005879 B0AD                <2>   mov  al, 0xad		; Disable Keyboard
  6942 0000587B E664                <2>   out  0x64, al		; write to keyboardcontroller
  6943 0000587D E8A5FFFFFF          <2>   call CHKPRT		; check if command is progressed (demand!)
  6944 00005882 6631C0              <2>   xor  ax, ax
  6945 00005885 E460                <2>   in   al, 0x60		; read ps/2 controller output port (mousebyte)
  6946 00005887 88C2                <2>   mov  dl, al
  6947 00005889 B0AE                <2>   mov  al, 0xae		; Enable Keyboard
  6948 0000588B E664                <2>   out  0x64, al		; write to keyboardcontroller
  6949 0000588D E895FFFFFF          <2>   call CHKPRT		; check if command is progressed (demand!)
  6950 00005892 88D0                <2>   mov  al, dl
  6951 00005894 C3                  <2> ret
  6952                              <2> 
  6953 00005895 00                  <2> LBUTTON db 0x00	;	Left   button status 1=PRESSED 0=RELEASED
  6954 00005896 00                  <2> RBUTTON db 0x00	;	Right  button status 1=PRESSED 0=RELEASED
  6955 00005897 00                  <2> MBUTTON db 0x00	;	Middle button status 1=PRESSED 0=RELEASED
  6956 00005898 00                  <2> XCOORD  db 0x00	;	the moved distance  (horizontal)
  6957 00005899 00                  <2> YCOORD  db 0x00	;	the moved distance  (vertical)
  6958                              <1> %endif
  6959                              <1> %include "source/drivers/sound/pcspkr.asm"
  6960                              <2> ;PC Speaker Drivers
  6961                              <2> PCSpeakerRAW:
  6962 0000589A 60                  <2> 	pusha
  6963                              <2> nosoundrep:
  6964 0000589B 8B35[68020000]      <2> 	mov esi, [soundpos]
  6965 000058A1 31C9                <2> 	xor ecx, ecx
  6966 000058A3 668B0D[66020000]    <2> 	mov cx, [soundrepititions]
  6967 000058AA 6681F90000          <2> 	cmp cx, 0
  6968 000058AF 0F8548000000        <2> 	jne near donesetpitch
  6969 000058B5 668B0E              <2> 	mov cx, [esi]
  6970 000058B8 668B5E02            <2> 	mov bx, [esi + 2]
  6971 000058BC 66890D[66020000]    <2> 	mov [soundrepititions], cx
  6972 000058C3 81C604000000        <2> 	add esi, 4
  6973 000058C9 8935[68020000]      <2> 	mov [soundpos], esi
  6974 000058CF 3B35[6C020000]      <2> 	cmp esi, [soundendpos]
  6975 000058D5 7735                <2> 	ja stopsound
  6976 000058D7 66813D[66020000]00- <2> 	cmp word [soundrepititions], 0
  6977 000058DF 00                  <2>
  6978 000058E0 74B9                <2> 	je nosoundrep
  6979 000058E2 6681FB0000          <2> 	cmp bx, 0
  6980 000058E7 740F                <2> 	je nosoundplay
  6981 000058E9 E840000000          <2> 	call setpitch
  6982 000058EE E849000000          <2> 	call startsound
  6983 000058F3 E905000000          <2> 	jmp donesetpitch
  6984                              <2> nosoundplay:
  6985 000058F8 E846000000          <2> 	call killsound
  6986                              <2> donesetpitch:
  6987 000058FD 6649                <2> 	dec cx
  6988 000058FF 66890D[66020000]    <2> 	mov [soundrepititions], cx
  6989 00005906 61                  <2> 	popa
  6990 00005907 E999A9FFFF          <2> 	jmp timerinterrupt
  6991                              <2> stopsound:
  6992 0000590C 31C0                <2> 	xor eax, eax
  6993 0000590E 66A3[66020000]      <2> 	mov [soundrepititions], ax
  6994 00005914 A2[65020000]        <2> 	mov [soundon], al
  6995 00005919 A3[68020000]        <2> 	mov [soundpos], eax
  6996 0000591E A3[6C020000]        <2> 	mov [soundendpos], eax
  6997 00005923 E81B000000          <2> 	call killsound
  6998 00005928 61                  <2> 	popa
  6999 00005929 E977A9FFFF          <2> 	jmp timerinterrupt
  7000                              <2> 
  7001                              <2> 
  7002                              <2> setpitch:
  7003 0000592E B0B6                <2> 	mov al, 0xB6
  7004 00005930 E643                <2> 	out 0x43, al
  7005 00005932 6689D8              <2> 	mov ax, bx
  7006 00005935 E642                <2> 	out 0x42, al
  7007 00005937 88E0                <2> 	mov al, ah
  7008 00005939 E642                <2> 	out 0x42, al
  7009 0000593B C3                  <2> 	ret
  7010                              <2> startsound:
  7011 0000593C E461                <2> 	in al, 0x61
  7012 0000593E 0C03                <2> 	or al, 3
  7013 00005940 E661                <2> 	out 0x61, al
  7014 00005942 C3                  <2> 	ret
  7015                              <2> killsound:
  7016 00005943 E461                <2> 	in al, 0x61
  7017 00005945 24FC                <2> 	and al, 0xFC
  7018 00005947 E661                <2> 	out 0x61, al
  7019 00005949 C3                  <2> 	ret
  7020                              <2> 	
  7021                              <1> %ifdef sound.included
  7022                              <1> 	%include "source/drivers/sound/sblaster.asm"
  7023                              <2> ;Sound Blaster Drivers
  7024                              <2> sblaster:
  7025                              <2> .init:
  7026 0000594A E8D7010000          <2> 		call ResetDSP			;If the system is Sound Blaster 16 compatible, reset the DSP
  7027 0000594F A2[805B0000]        <2> 		mov [SoundBlaster], al	;if the reset worked, show an available card
  7028 00005954 3C00                <2> 		cmp al, 0
  7029 00005956 7418                <2> 		je .noinit
  7030 00005958 B0D1                <2> 		mov	al,0D1h 		; turn speaker(s) on
  7031 0000595A E8FB010000          <2> 		call WriteDSP
  7032 0000595F B088                <2> 		mov	al,088h 		; Left = 8, Right = 8 (15-highest)
  7033 00005961 E8B1010000          <2> 		call MstrVol 		; L = Hi Nibble, R = Lo Nibble
  7034 00005966 BE[71590000]        <2> 		mov esi, .initmsg
  7035 0000596B E8AFC3FFFF          <2> 		call print
  7036                              <2> .noinit:
  7037 00005970 C3                  <2> 		ret
  7038 00005971 536F756E64626C6173- <2> .initmsg db "Soundblaster Initialized",10,0
  7039 0000597A 74657220496E697469- <2>
  7040 00005983 616C697A65640A00    <2>
  7041                              <2> sblaster.cont: ;this function goes to the next available portion of a sound, if necessary
  7042 0000598B 813D[6A5B0000]0000- <2> 	cmp dword [Length0], 0
  7043 00005993 0000                <2>
  7044 00005995 0F8462000000        <2> 	je near .done
  7045 0000599B FF0D[6A5B0000]      <2> 	dec dword [Length0]
  7046 000059A1 E908000000          <2> 	jmp .notodd
  7047                              <2> .oddlength:
  7048 000059A6 31C9                <2> 	xor ecx, ecx
  7049 000059A8 880D[695B0000]      <2> 	mov [OddLength], cl
  7050                              <2> .notodd:
  7051 000059AE 8B35[705B0000]      <2> 	mov esi, [NextMemLoc]
  7052 000059B4 31C9                <2> 	xor ecx, ecx
  7053 000059B6 668B0D[6E5B0000]    <2> 	mov cx, [Length1]
  7054 000059BD D1E9                <2> 	shr ecx, 1
  7055 000059BF 6641                <2> 	inc cx
  7056 000059C1 31DB                <2> 	xor ebx, ebx
  7057 000059C3 668B1D[785B0000]    <2> 	mov bx, [SegLoc]
  7058 000059CA 6601CB              <2> 	add bx, cx
  7059 000059CD 66891D[785B0000]    <2> 	mov [SegLoc], bx
  7060 000059D4 81C300000800        <2> 	add ebx, 0x80000 ;linear address of sb buffer
  7061 000059DA 8935[745B0000]      <2> 	mov [MemLoc], esi
  7062 000059E0 89C8                <2> 	mov eax, ecx
  7063 000059E2 01F0                <2> 	add eax, esi
  7064 000059E4 A3[705B0000]        <2> 	mov [NextMemLoc], eax
  7065 000059E9 E833000000          <2> 	call DMACopy
  7066                              <2> 	;call DMAPlay
  7067 000059EE E8E0000000          <2> 	call PlayDSP
  7068 000059F3 66BA2E02            <2> 	mov dx, (BasePort+0xE)
  7069 000059F7 EC                  <2> 	in al, dx ;acknowledge the interrupt 
  7070 000059F8 E960A9FFFF          <2> 	jmp handled2 ;it is part of an interrupt routine
  7071                              <2> .done:
  7072 000059FD 803D[695B0000]01    <2> 	cmp byte [OddLength], 1
  7073 00005A04 74A0                <2> 	je .oddlength
  7074 00005A06 31C0                <2> 	xor eax, eax
  7075 00005A08 66A3[6E5B0000]      <2> 	mov [Length1], ax
  7076 00005A0E 66B8D000            <2> 	mov ax, 0xD0
  7077 00005A12 E843010000          <2> 	call WriteDSP
  7078 00005A17 66BA2E02            <2> 	mov dx, (BasePort+0xE)
  7079 00005A1B EC                  <2> 	in al, dx ;acknowledge the interrupt 
  7080 00005A1C E93CA9FFFF          <2> 	jmp handled2
  7081                              <2> 	
  7082                              <2> DMACopy:
  7083 00005A21 66B80800            <2> 		mov ax, LINEAR_SEL
  7084 00005A25 8EE0                <2> 		mov fs, ax
  7085 00005A27 C1E902              <2> 		shr ecx, 2
  7086                              <2> .loop:
  7087 00005A2A 8B06                <2> 		mov eax, [esi]
  7088 00005A2C 648903              <2> 		mov [fs:ebx], eax
  7089 00005A2F 81C604000000        <2> 		add esi, 4
  7090 00005A35 81C304000000        <2> 		add ebx, 4
  7091 00005A3B E2ED                <2> 		loop .loop
  7092 00005A3D 66B83000            <2> 		mov ax, NEW_DATA_SEL
  7093 00005A41 8EE0                <2> 		mov fs, ax
  7094 00005A43 C3                  <2> 		ret
  7095                              <2> 		
  7096                              <2> 
  7097                              <2> DMAPlay:    ;uses eax ebx edx
  7098 00005A44 C605[7A5B0000]00    <2> 		mov	byte [Page1],00h
  7099                              <2> 
  7100 00005A4B B005                <2> 		mov	al,(Channel+4)
  7101 00005A4D 66BA0A00            <2> 		mov	dx,0Ah
  7102 00005A51 EE                  <2> 		out	dx,al
  7103 00005A52 30C0                <2> 		xor	al,al
  7104 00005A54 66BA0C00            <2> 		mov	dx,0Ch
  7105 00005A58 EE                  <2> 		out	dx,al
  7106 00005A59 B059                <2> 		mov	al,ModeReg
  7107 00005A5B 66BA0B00            <2> 		mov	dx,0Bh
  7108 00005A5F EE                  <2> 		out	dx,al
  7109 00005A60 B800000800          <2> 		mov	eax,0x80000
  7110 00005A65 66BA0200            <2> 		mov	dx,AddPort
  7111 00005A69 EE                  <2> 		out	dx,al
  7112 00005A6A 86C4                <2> 		xchg al,ah
  7113 00005A6C EE                  <2> 		out	dx,al
  7114 00005A6D B800000800          <2> 		mov	eax,0x80000
  7115 00005A72 89C2                <2> 		mov	edx,eax
  7116 00005A74 2500000100          <2> 		and	eax,65536
  7117 00005A79 7406                <2> 		jz	MemLocN1
  7118 00005A7B FE05[7A5B0000]      <2> 		inc	byte [Page1]
  7119                              <2> MemLocN1:
  7120 00005A81 89D0                <2> 		mov	eax,edx
  7121 00005A83 2500000200          <2> 		and	eax,131072
  7122 00005A88 7407                <2> 		jz	MemLocN2
  7123 00005A8A 8005[7A5B0000]02    <2> 		add	byte [Page1],02
  7124                              <2> MemLocN2:
  7125 00005A91 89D0                <2> 		mov	eax,edx
  7126 00005A93 2500000400          <2> 		and	eax,262144
  7127 00005A98 7407                <2> 		jz	MemLocN3
  7128 00005A9A 8005[7A5B0000]04    <2> 		add	byte [Page1],04
  7129                              <2> MemLocN3:
  7130 00005AA1 89D0                <2> 		mov	eax,edx
  7131 00005AA3 2500000800          <2> 		and	eax,524288
  7132 00005AA8 7407                <2> 		jz	MemLocN4
  7133 00005AAA 8005[7A5B0000]08    <2> 		add	byte [Page1],08
  7134                              <2> MemLocN4:
  7135 00005AB1 66BA8300            <2> 		mov	dx,PgPort
  7136 00005AB5 A0[7A5B0000]        <2> 		mov	al,[Page1]
  7137 00005ABA EE                  <2> 		out	dx,al
  7138 00005ABB 66BA0300            <2> 		mov	dx,LenPort
  7139 00005ABF 66A1[6E5B0000]      <2> 		mov	ax,[Length1]
  7140 00005AC5 6648                <2> 		dec ax
  7141 00005AC7 EE                  <2> 		out	dx,al
  7142 00005AC8 86C4                <2> 		xchg al,ah
  7143 00005ACA EE                  <2> 		out	dx,al
  7144 00005ACB 66BA0A00            <2> 		mov	dx,0Ah
  7145 00005ACF B001                <2> 		mov	al,Channel
  7146 00005AD1 EE                  <2> 		out	dx,al
  7147 00005AD2 C3                  <2> 		ret
  7148                              <2> 		
  7149                              <2> PlayDSP:
  7150 00005AD3 B040                <2> 		mov	al,40h
  7151 00005AD5 E880000000          <2> 		call WriteDSP
  7152 00005ADA 31D2                <2> 		xor	edx,edx
  7153 00005ADC B840420F00          <2> 		mov	eax,1000000
  7154 00005AE1 8B1D[7B5B0000]      <2> 		mov	ebx,[Freq]
  7155 00005AE7 F7F3                <2> 		div	ebx
  7156 00005AE9 89C3                <2> 		mov	ebx,eax
  7157 00005AEB B800010000          <2> 		mov	eax,256
  7158 00005AF0 29D8                <2> 		sub	eax,ebx
  7159 00005AF2 E863000000          <2> 		call WriteDSP
  7160 00005AF7 A0[7F5B0000]        <2> 		mov	al,[WAVEMode]	;write the mode
  7161 00005AFC E859000000          <2> 		call WriteDSP
  7162 00005B01 66A1[6E5B0000]      <2> 		mov	ax,[Length1]
  7163 00005B07 66D1E8              <2> 		shr ax, 1
  7164 00005B0A E84B000000          <2> 		call WriteDSP
  7165 00005B0F 86C4                <2> 		xchg al,ah
  7166 00005B11 E844000000          <2> 		call WriteDSP
  7167 00005B16 C3                  <2> 		ret
  7168                              <2> 
  7169                              <2> MstrVol:    ;uses ax dx
  7170 00005B17 6650                <2> 	   push ax
  7171 00005B19 66BA2402            <2> 	   mov	dx,(BasePort+4)
  7172 00005B1D B022                <2> 	   mov	al,22h
  7173 00005B1F EE                  <2> 	   out	dx,al
  7174 00005B20 6658                <2> 	   pop	ax
  7175 00005B22 6642                <2> 	   inc	dx
  7176 00005B24 EE                  <2> 	   out	dx,al
  7177 00005B25 C3                  <2> 	   ret
  7178                              <2> 	   
  7179                              <2> ResetDSP:   ; uses cx dx
  7180 00005B26 66BA2602            <2> 			mov	dx,(BasePort+6)
  7181 00005B2A B001                <2> 			mov	al,01
  7182 00005B2C EE                  <2> 			out	dx,al
  7183 00005B2D 66B93200            <2> 			mov	cx,50
  7184 00005B31 EC                  <2> WaitIt1:	in	al,dx
  7185 00005B32 E2FD                <2> 			loop WaitIt1
  7186 00005B34 30C0                <2> 			xor	al,al
  7187 00005B36 EE                  <2> 			out	dx,al
  7188 00005B37 66B93200            <2> 			mov	cx,50
  7189 00005B3B EC                  <2> WaitIt2:	in	al,dx
  7190 00005B3C E2FD                <2> 			loop WaitIt2
  7191 00005B3E B4FF                <2> 			mov	ah,0FFh 		; part of Return Code
  7192 00005B40 66BA2E02            <2> 			mov	dx,(BasePort+14)
  7193 00005B44 EC                  <2> 			in	al,dx
  7194 00005B45 2480                <2> 			and	al,80h
  7195 00005B47 3C80                <2> 			cmp	al,80h
  7196 00005B49 750C                <2> 			jne	ResetErr
  7197 00005B4B 66BA2A02            <2> 			mov	dx,(BasePort+10)
  7198 00005B4F EC                  <2> 			in	al,dx
  7199 00005B50 3CAA                <2> 			cmp	al,0AAh
  7200 00005B52 7503                <2> 			jne	ResetErr
  7201 00005B54 B001                <2> ResetOK:	mov al, 1		; return ax = 0 if reset ok
  7202 00005B56 C3                  <2> 			ret
  7203 00005B57 30C0                <2> ResetErr:	xor al, al
  7204 00005B59 C3                  <2> 			ret
  7205                              <2> 
  7206                              <2> WriteDSP:   ;uses ax dx
  7207 00005B5A 6650                <2> 		push ax
  7208 00005B5C 66BA2C02            <2> 		mov	dx,(BasePort+12)
  7209 00005B60 EC                  <2> WaitIt:	in	al,dx
  7210 00005B61 2480                <2> 		and	al,80h
  7211 00005B63 75FB                <2> 		jnz	WaitIt
  7212 00005B65 6658                <2> 		pop	ax
  7213 00005B67 EE                  <2> 		out	dx,al
  7214 00005B68 C3                  <2> 		ret
  7215                              <2> 
  7216 00005B69 00                  <2> OddLength db 0
  7217 00005B6A 00000000            <2> Length0 dd	0
  7218 00005B6E 0000                <2> Length1	dw  0
  7219 00005B70 00000000            <2> NextMemLoc dd 0
  7220 00005B74 00000000            <2> MemLoc	dd  0
  7221 00005B78 0000                <2> SegLoc  dw 0
  7222 00005B7A 00                  <2> Page1	db  0
  7223 00005B7B 00000000            <2> Freq	dd	0
  7224 00005B7F 14                  <2> WAVEMode db 14h
  7225                              <2> PgPort	equ 83h
  7226                              <2> AddPort	equ 02h
  7227                              <2> LenPort	equ 03h
  7228                              <2> ModeReg	equ 59h
  7229                              <2> Channel	equ 01h
  7230                              <2> BasePort	equ 220h
  7231 00005B80 00                  <2> SoundBlaster	db 0
  7232                              <1> %endif
  7233                              <1> %ifdef io.serial
  7234                              <1> 	%include "source/drivers/input/serial.asm"
  7235                              <1> %else
  7236                              <1> 	%include "source/drivers/input/keyboard.asm"
  7237 00005B81 00                  <2> specialkey db 0
  7238 00005B82 00                  <2> charregion db 0
  7239                              <2> waitforinput:		;;this is basically the idle process
  7240                              <2> 					;;this halts the cpu for a small amount of time and then sees if there was a keypress
  7241                              <2> 					;;this lets the cpu stay at close to 0% instead of 100%
  7242 00005B83 6631C0              <2> 	xor ax, ax
  7243 00005B86 A0[8A640000]        <2> 	mov al, [threadson]
  7244 00005B8B 8825[8A640000]      <2> 	mov [threadson], ah
  7245 00005B91 FB                  <2> 	sti
  7246 00005B92 F4                  <2> 	hlt
  7247 00005B93 A2[8A640000]        <2> 	mov [threadson], al
  7248 00005B98 3A25[40220000]      <2> 	cmp ah, [trans]
  7249 00005B9E 7401                <2> 	je getkey
  7250 00005BA0 C3                  <2> 	ret
  7251                              <2> getkey:
  7252 00005BA1 31C0                <2> 		xor eax, eax
  7253 00005BA3 A2[815B0000]        <2> 		mov [specialkey], al
  7254 00005BA8 66A3[3E220000]      <2> 		mov [lastkey], ax
  7255 00005BAE E464                <2> 		in al, 64h ; Status
  7256                              <2> 	%ifdef gui.included
  7257 00005BB0 A820                <2> 		test al, 20h ; PS2-Mouse?
  7258 00005BB2 0F852FFAFFFF        <2> 		jnz near moused
  7259                              <2> 	%endif
  7260 00005BB8 A801                <2> 		test al, 1 
  7261 00005BBA 74C7                <2> 		jz waitforinput ; if output buffer full or no keypress, jump to idle process
  7262                              <2> 	calckey:
  7263 00005BBC E460                <2> 		in al, 60h
  7264 00005BBE 88C4                <2> 		mov ah, al
  7265 00005BC0 30C0                <2> 		xor al, al
  7266 00005BC2 8825[3F220000]      <2> 		mov [lastkey + 1], ah
  7267 00005BC8 88E0                <2> 		mov al, ah
  7268 00005BCA BF[635D0000]        <2> 		mov edi, scancode
  7269                              <2> 	searchscan: 
  7270 00005BCF 3C3A                <2> 		cmp al, 3Ah
  7271 00005BD1 731A                <2> 		jae scanother
  7272 00005BD3 30E4                <2> 		xor ah, ah
  7273 00005BD5 C0E002              <2> 		shl al, 2
  7274 00005BD8 01C7                <2> 		add edi, eax
  7275 00005BDA D0E8                <2> 		shr al, 1
  7276 00005BDC 01C7                <2> 		add edi, eax
  7277 00005BDE D0E8                <2> 		shr al, 1
  7278 00005BE0 8A27                <2> 		mov ah, [edi]
  7279 00005BE2 80FC00              <2> 		cmp ah, 0
  7280 00005BE5 7406                <2> 		je scanother
  7281 00005BE7 E9D7000000          <2> 		jmp scanfound
  7282 00005BEC 00                  <2> uppercase db 0
  7283                              <2> scanother:
  7284 00005BED 88C4                <2> 		mov ah, al
  7285 00005BEF 30C0                <2> 		xor al, al
  7286 00005BF1 66A3[3E220000]      <2> 		mov [lastkey], ax
  7287 00005BF7 80FCE0              <2> 		cmp ah, 0E0h
  7288 00005BFA 0F847D000000        <2> 		je near getkeyspecial
  7289 00005C00 803D[815B0000]E0    <2> 		cmp byte [specialkey], 0xE0
  7290 00005C07 752B                <2> 		jne nospecialkey
  7291 00005C09 80FC38              <2> 		cmp ah, 38h
  7292 00005C0C 0F84A0000000        <2> 		je near alton
  7293 00005C12 80FCB8              <2> 		cmp ah, 0B8h
  7294 00005C15 0F849F000000        <2> 		je near altoff
  7295 00005C1B 80FC1D              <2> 		cmp ah, 1Dh
  7296 00005C1E 0F847E000000        <2> 		je near ctron
  7297 00005C24 80FC9D              <2> 		cmp ah, 9Dh
  7298 00005C27 0F847D000000        <2> 		je near ctroff
  7299 00005C2D 66A3[3E220000]      <2> 		mov [lastkey], ax
  7300 00005C33 C3                  <2> 		ret
  7301                              <2> nospecialkey:
  7302 00005C34 80FC2A              <2> 		cmp ah, 2Ah
  7303 00005C37 0F8455000000        <2> 		je near shifton
  7304 00005C3D 80FC36              <2> 		cmp ah, 36h
  7305 00005C40 0F844C000000        <2> 		je near shifton
  7306 00005C46 80FC1C              <2> 		cmp ah, 1Ch
  7307 00005C49 0F8473000000        <2> 		je near entdown
  7308 00005C4F 80FCAA              <2> 		cmp ah, 0AAh
  7309 00005C52 0F8442000000        <2> 		je near shiftoff
  7310 00005C58 80FCB6              <2> 		cmp ah, 0B6h
  7311 00005C5B 0F8439000000        <2> 		je near shiftoff
  7312 00005C61 80FC3A              <2> 		cmp ah, 3Ah
  7313 00005C64 0F84A5000000        <2> 		je near capslock
  7314 00005C6A 80FC45              <2> 		cmp ah, 0x45
  7315 00005C6D 0F84AD000000        <2> 		je near numlock
  7316 00005C73 80FC46              <2> 		cmp ah, 0x46
  7317 00005C76 0F84BC000000        <2> 		je near scrolllock
  7318 00005C7C C3                  <2> 		ret
  7319                              <2> 	getkeyspecial:
  7320 00005C7D C605[815B0000]E0    <2> 		mov byte [specialkey], 0xE0
  7321 00005C84 E933FFFFFF          <2> 		jmp calckey
  7322                              <2> 	shift:
  7323 00005C89 A0[EC5B0000]        <2> 		mov al, [uppercase]
  7324 00005C8E 3C01                <2> 		cmp al, 1
  7325 00005C90 7308                <2> 		jae shiftoff
  7326                              <2> 	shifton:
  7327 00005C92 C605[EC5B0000]01    <2> 		mov byte [uppercase], 1
  7328 00005C99 C3                  <2> 		ret
  7329                              <2> 	shiftoff:
  7330 00005C9A C605[EC5B0000]00    <2> 		mov byte [uppercase], 0
  7331 00005CA1 C3                  <2> 		ret
  7332                              <2> 	ctron:
  7333 00005CA2 C605[0E5D0000]01    <2> 		mov byte [ctrkey], 1
  7334 00005CA9 C3                  <2> 		ret
  7335                              <2> 	ctroff:
  7336 00005CAA C605[0E5D0000]00    <2> 		mov byte [ctrkey], 0
  7337 00005CB1 C3                  <2> 		ret
  7338                              <2> 	alton:
  7339 00005CB2 C605[0D5D0000]01    <2> 		mov byte [altkey], 1
  7340 00005CB9 C3                  <2> 		ret
  7341                              <2> 	altoff:
  7342 00005CBA C605[0D5D0000]00    <2> 		mov byte [altkey], 0
  7343 00005CC1 C3                  <2> 		ret
  7344                              <2> 	entdown:
  7345 00005CC2 C3                  <2> 		ret
  7346                              <2> 	scanfound:
  7347 00005CC3 81C704000000        <2> 		add edi, 4
  7348 00005CC9 803D[0E5D0000]01    <2> 		cmp byte [ctrkey], 1
  7349 00005CD0 731B                <2> 		jae altin
  7350 00005CD2 81EF04000000        <2> 		sub edi, 4
  7351 00005CD8 81C702000000        <2> 		add edi, 2
  7352 00005CDE 803D[0D5D0000]01    <2> 		cmp byte [altkey], 1
  7353 00005CE5 7306                <2> 		jae altin
  7354 00005CE7 81EF02000000        <2> 		sub edi, 2
  7355                              <2> altin:
  7356 00005CED 81C701000000        <2> 		add edi, 1
  7357 00005CF3 803D[EC5B0000]01    <2> 		cmp byte [uppercase], 1
  7358 00005CFA 7306                <2> 		jae uppercaseon
  7359 00005CFC 81EF01000000        <2> 		sub edi, 1
  7360                              <2> uppercaseon:
  7361 00005D02 8A07                <2> 		mov al,[edi]
  7362 00005D04 A2[3E220000]        <2> 		mov [lastkey], al
  7363 00005D09 C3                  <2> 		ret
  7364                              <2> 		
  7365 00005D0A 00                  <2> keyboardstatus db 0
  7366 00005D0B 00                  <2> numlockstatus db 0
  7367 00005D0C 00                  <2> scrolllockstatus db 0
  7368 00005D0D 00                  <2> altkey db 0
  7369 00005D0E 00                  <2> ctrkey db 0
  7370                              <2> 	capslock:
  7371 00005D0F 8035[0A5D0000]04    <2> 		xor byte [keyboardstatus], 00000100b
  7372 00005D16 E835000000          <2> 		call updatekblights
  7373 00005D1B E969FFFFFF          <2> 		jmp shift
  7374                              <2> 		
  7375                              <2> 	numlock:
  7376 00005D20 8035[0A5D0000]02    <2> 		xor byte [keyboardstatus], 00000010b
  7377 00005D27 8035[0B5D0000]01    <2> 		xor byte [numlockstatus], 1
  7378 00005D2E E81D000000          <2> 		call updatekblights
  7379 00005D33 E969FEFFFF          <2> 		jmp getkey
  7380                              <2> 	
  7381                              <2> 	scrolllock:
  7382 00005D38 8035[0A5D0000]01    <2> 		xor byte [keyboardstatus], 00000001b
  7383 00005D3F 8035[0C5D0000]01    <2> 		xor byte [scrolllockstatus], 1
  7384 00005D46 E805000000          <2> 		call updatekblights
  7385 00005D4B E951FEFFFF          <2> 		jmp getkey
  7386                              <2> 		
  7387                              <2> 	updatekblights:
  7388 00005D50 B0ED                <2> 		mov al, 0xED
  7389 00005D52 66BA6000            <2> 		mov dx, 0x60
  7390 00005D56 EE                  <2> 		out dx, al
  7391                              <2> 	chkkbdack:
  7392 00005D57 EC                  <2> 		in al, dx
  7393 00005D58 3CFA                <2> 		cmp al, 0xFA
  7394 00005D5A 75FB                <2> 		jne chkkbdack
  7395 00005D5C A0[0A5D0000]        <2> 		mov al, [keyboardstatus]
  7396 00005D61 EE                  <2> 		out dx, al
  7397 00005D62 C3                  <2> 		ret
  7398                              <2> 		
  7399                              <2> scancode:
  7400 00005D63 000000000000        <2> 	db 0,0,0,0,0,0				;0h
  7401 00005D69 000000000000        <2> 	db 0,0,0,0,0,0				;1h
  7402 00005D6F 3121AD000000        <2> 	db '1','!',0xAD,0,0,0		;2h
  7403 00005D75 3240FDFB0000        <2> 	db '2','@',0xFD,0xFB,0,0	;3h
  7404 00005D7B 332300000000        <2> 	db '3','#',0,0,0,0			;4h
  7405 00005D81 34249B9C0000        <2> 	db '4','$',0x9B,0x9C,0,0	;5h
  7406 00005D87 3525EE000000        <2> 	db '5','%',0xEE,0,0,0		;6h
  7407 00005D8D 365EAC000000        <2> 	db '6','^',0xAC,0,0,0		;7h
  7408 00005D93 3726AB000000        <2> 	db '7','&',0xAB,0,0,0		;8h
  7409 00005D99 382AEC000000        <2> 	db '8','*',0xEC,0,0,0		;9h
  7410 00005D9F 392800000000        <2> 	db '9','(',0,0,0,0			;0Ah
  7411 00005DA5 302900000000        <2> 	db '0',')',0,0,0,0			;0Bh
  7412 00005DAB 2D5F9DF10000        <2> 	db '-','_',0x9D,0xF1,0,0	;0Ch
  7413 00005DB1 3D2BF7F60000        <2> 	db '=','+',0xF7,0xF6,0,0	;0Dh
  7414 00005DB7 080800000000        <2> 	db 8,8,0,0,0,0				;0Eh
  7415 00005DBD 000000000000        <2> 	db 0,0,0,0,0,0				;0Fh
  7416 00005DC3 7151848E0000        <2> 	db 'q','Q',0x84,0x8E,0,0	;10h
  7417 00005DC9 7757868F0000        <2> 	db 'w','W',0x86,0x8F,0,0	;11h
  7418 00005DCF 65458290EE45        <2> 	db 'e','E',0x82,0x90,0xEE,'E'	;12h
  7419 00005DD5 7252898A7050        <2> 	db 'r','R',0x89,0x8A,'p','P'	;13h
  7420 00005DDB 7454819AE754        <2> 	db 't','T',0x81,0x9A,0xE7,'T'	;14h
  7421 00005DE1 795998007559        <2> 	db 'y','Y',0x98,0,'u','Y'	;15h
  7422 00005DE7 7555A3970000        <2> 	db 'u','U',0xA3,0x97,0,0		;16h
  7423 00005DED 6949A18D6949        <2> 	db 'i','I',0xA1,0x8D,'i','I'	;17h
  7424 00005DF3 6F4FA29577EA        <2> 	db 'o','O',0xA2,0x95,'w',0xEA	;18h
  7425 00005DF9 70509499E3EF        <2> 	db 'p','P',0x94,0x99,0xE3,0xEF	;19h
  7426 00005DFF 5B7BF4000000        <2> 	db '[','{',0xF4,0,0,0		;1Ah
  7427 00005E05 5D7DF5000000        <2> 	db ']','}',0xF5,0,0,0		;1Bh
  7428 00005E0B 000000000000        <2> 	db 0,0,0,0,0,0				;1Ch
  7429 00005E11 000000000000        <2> 	db 0,0,0,0,0,0				;1Dh
  7430 00005E17 6141A085E041        <2> 	db 'a','A',0xA0,133,224,'A'	;1Eh
  7431 00005E1D 73531500E5E4        <2> 	db 's','S',21,0,229,228		;1Fh
  7432 00005E23 6444F800EB7F        <2> 	db 'd','D',0xF8,0,235,127	;20h
  7433 00005E29 66469F00EDE8        <2> 	db 'f','F',159,0,237,232	;21h
  7434 00005E2F 6747000079E2        <2> 	db 'g','G',0,0,'y',226		;22h
  7435 00005E35 684800006E48        <2> 	db 'h','H',0,0,'n','H'		;23h
  7436 00005E3B 6A4A00000000        <2> 	db 'j','J',0,0,0,0			;24h
  7437 00005E41 6B4B00006B4B        <2> 	db 'k','K',0,0,'k','K'		;25h
  7438 00005E47 6C4C0000E9E9        <2> 	db 'l','L',0,0,233,233		;26h
  7439 00005E4D 3B3A14000000        <2> 	db ';',':',20,0,0,0			;27h
  7440 00005E53 272200000000        <2> 	db 27h,22h,0,0,0,0			;28h
  7441 00005E59 607E00000000        <2> 	db '`','~',0,0,0,0			;29h
  7442 00005E5F 000000000000        <2> 	db 0,0,0,0,0,0				;2Ah
  7443 00005E65 5C7CAAB30000        <2> 	db 92,'|',170,179,0,0		;2Bh
  7444 00005E6B 7A5A91927A5A        <2> 	db 'z','Z',145,146,'z','Z'	;2Ch
  7445 00005E71 7858000000F0        <2> 	db 'x','X',0,0,0,240		;2Dh
  7446 00005E77 634387800000        <2> 	db 'c','C',135,128,0,0		;2Eh
  7447 00005E7D 765600000000        <2> 	db 'v','V',0,0,0,0			;2Fh
  7448 00005E83 62420000E142        <2> 	db 'b','B',0,0,225,'B'		;30h
  7449 00005E89 6E4EA4A5764E        <2> 	db 'n','N',0xA4,0xA5,'v','N'	;31h
  7450 00005E8F 6D4D0000E64D        <2> 	db 'm','M',0,0,230,'M'		;32h
  7451 00005E95 2C3CF3AE0000        <2> 	db ',','<',0xF3,174,0,0		;33h
  7452 00005E9B 2E3EF2AF0000        <2> 	db '.','>',0xF2,175,0,0		;34h
  7453 00005EA1 2F3FA8000000        <2> 	db '/','?',0xA8,0,0,0		;35h
  7454 00005EA7 000000000000        <2> 	db 0,0,0,0,0,0				;36h
  7455 00005EAD 000000000000        <2> 	db 0,0,0,0,0,0				;37h
  7456 00005EB3 000000000000        <2> 	db 0,0,0,0,0,0				;38h
  7457 00005EB9 202000000000        <2> 	db ' ',' ',0,0,0,0			;39h
  7458                              <2> noscan:
  7459                              <2> 
  7460                              <1> %endif
  7461                              <1> ;drivers will soon be handled intelligently
  7462                              <1> ;every driver's source will be scanned for a .init function
  7463                              <1> ;that will be called and if it returns 0
  7464                              <1> ;the hardware was found and the driver initialized properly
  7465                              <1> initializelater: ;these have debugging messages and should be initialized after the screen
  7466                              <1> 	%ifdef sound.included
  7467 00005EBF E886FAFFFF          <1> 		call sblaster.init
  7468                              <1> 	%endif
  7469                              <1> 	%ifdef network.included
  7470 00005EC4 E8A4200000          <1> 		call network.init
  7471                              <1> 	%endif
  7472 00005EC9 C3                  <1> 	ret
  7473                              <1> initialize:
  7474                              <1> ;Now I will initialise the interrupt controllers and remap irq's
  7475 00005ECA E814000000          <1> 	call .pic
  7476                              <1> %ifdef terminal.vsync
  7477                              <1> 	call .rtc
  7478                              <1> %endif
  7479 00005ECF E871000000          <1> 	call .pit
  7480 00005ED4 E893000000          <1> 	call .fpu
  7481 00005ED9 E8A4000000          <1> 	call .sse
  7482 00005EDE 31C0                <1> 	xor eax, eax
  7483 00005EE0 31C9                <1> 	xor ecx, ecx
  7484                              <1> %ifdef io.serial
  7485                              <1> 	call serial.init
  7486                              <1> %endif
  7487 00005EE2 C3                  <1> 	ret
  7488                              <1> 	
  7489                              <1> .pic:
  7490 00005EE3 B011                <1> 	mov al, 0x11
  7491 00005EE5 E620                <1> 	out 0x20, al
  7492 00005EE7 E6A0                <1> 	out 0xA0, al
  7493 00005EE9 B040                <1> 	mov al, 0x40	;interrupt for master
  7494 00005EEB E621                <1> 	out 0x21, al
  7495 00005EED B048                <1> 	mov al, 0x48	;interrupt for slave
  7496 00005EEF E6A1                <1> 	out 0xA1, al
  7497 00005EF1 B004                <1> 	mov al, 4
  7498 00005EF3 E621                <1> 	out 0x21, al
  7499 00005EF5 B002                <1> 	mov al, 2
  7500 00005EF7 E6A1                <1> 	out 0xA1, al
  7501 00005EF9 B001                <1> 	mov al, 0x1
  7502 00005EFB E621                <1> 	out 0x21, al
  7503 00005EFD B001                <1> 	mov al, 0x1
  7504 00005EFF E6A1                <1> 	out 0xA1, al
  7505                              <1> 	;masks are set to zero so as not to mask
  7506 00005F01 30C0                <1> 	xor al, al
  7507 00005F03 E621                <1> 	out 0x21, al
  7508 00005F05 30C0                <1> 	xor al, al
  7509 00005F07 E6A1                <1> 	out 0xA1, al
  7510 00005F09 B020                <1> 	mov al, 0x20
  7511 00005F0B E6A0                <1> 	out 0xA0, al
  7512 00005F0D E620                <1> 	out 0x20, al
  7513 00005F0F C3                  <1> 	ret
  7514                              <1> .rtc:
  7515 00005F10 B008                <1> 	mov al, 0x8
  7516 00005F12 88C4                <1> 	mov ah, al
  7517 00005F14 66BA7000            <1> 	mov dx, 0x70
  7518 00005F18 EE                  <1> 	out dx, al
  7519 00005F19 6642                <1> 	inc dx
  7520 00005F1B EC                  <1> 	in al, dx
  7521 00005F1C 86C4                <1> 	xchg al, ah
  7522 00005F1E 664A                <1> 	dec dx
  7523 00005F20 EE                  <1> 	out dx, al
  7524 00005F21 6642                <1> 	inc dx
  7525 00005F23 86C4                <1> 	xchg al, ah
  7526 00005F25 0C40                <1> 	or al, 0x40
  7527 00005F27 EE                  <1> 	out dx, al
  7528                              <1> 	
  7529 00005F28 B00A                <1> 	mov al, 0xA
  7530 00005F2A 664A                <1> 	dec dx
  7531 00005F2C EE                  <1> 	out dx, al
  7532 00005F2D 86C4                <1> 	xchg al, ah
  7533 00005F2F 6642                <1> 	inc dx
  7534 00005F31 EC                  <1> 	in al, dx
  7535 00005F32 24F0                <1> 	and al, 0xF0
  7536 00005F34 0A05[01030000]      <1> 	or al, [rtcrate]
  7537 00005F3A 86C4                <1> 	xchg al, ah
  7538 00005F3C 664A                <1> 	dec dx
  7539 00005F3E EE                  <1> 	out dx, al
  7540 00005F3F 6642                <1> 	inc dx
  7541 00005F41 86C4                <1> 	xchg al, ah
  7542 00005F43 EE                  <1> 	out dx, al
  7543 00005F44 C3                  <1> 	ret
  7544                              <1> 	
  7545                              <1> .pit:
  7546                              <1> 	;initialize the PIT
  7547 00005F45 66A1[57020000]      <1> 	mov ax, [pitdiv] ;this is the divider for the PIT
  7548 00005F4B E640                <1> 	out 0x40, al
  7549 00005F4D 66C1C008            <1> 	rol ax, 8
  7550 00005F51 E640                <1> 	out 0x40, al
  7551                              <1> 	;enable rtc interrupt
  7552 00005F53 B00B                <1> 	mov al, 0xB
  7553 00005F55 E670                <1> 	out 0x70, al
  7554 00005F57 66C1C008            <1> 	rol ax, 8
  7555 00005F5B E471                <1> 	in al, 0x71
  7556 00005F5D 66C1C008            <1> 	rol ax, 8
  7557 00005F61 E670                <1> 	out 0x70, al
  7558 00005F63 66C1C008            <1> 	rol ax, 8
  7559 00005F67 0C40                <1> 	or al, 0x40
  7560 00005F69 E671                <1> 	out 0x71, al
  7561 00005F6B C3                  <1> 	ret
  7562                              <1> .fpu:
  7563                              <1> 	;And now to initialize the fpu
  7564 00005F6C 0F20E0              <1> 	mov eax, cr4
  7565 00005F6F 0D00020000          <1> 	or eax, 0x200
  7566 00005F74 0F22E0              <1> 	mov cr4, eax
  7567 00005F77 B87F0B0000          <1> 	mov eax, 0xB7F
  7568 00005F7C 50                  <1> 	push eax
  7569 00005F7D D92C24              <1> 	fldcw [esp]
  7570 00005F80 58                  <1> 	pop eax
  7571 00005F81 C3                  <1> 	ret
  7572                              <1> 	
  7573                              <1> .sse:
  7574 00005F82 0F20C0              <1> 	mov eax, cr0
  7575 00005F85 24FB                <1> 	and al, 11111011b
  7576 00005F87 0C02                <1> 	or al, 00000010b
  7577 00005F89 0F22C0              <1> 	mov cr0, eax
  7578 00005F8C 0F20E0              <1> 	mov eax, cr4
  7579 00005F8F 660D0006            <1> 	or ax, 0000011000000000b
  7580 00005F93 0F22E0              <1> 	mov cr4, eax
  7581 00005F96 C3                  <1> 	ret
  7582                                      %include "source/pci.asm"
  7583 00005F97 00                  <1> pcibus		db 0
  7584 00005F98 00                  <1> pcidevice	db 0
  7585 00005F99 00                  <1> pcifunction	db 0
  7586 00005F9A 00                  <1> pciregister	db 0
  7587 00005F9B 00                  <1> pcireqtype	db 0
  7588 00005F9C 00000000            <1> pcidevid	dd 0
  7589 00005FA0 FFFFFFFF            <1> pcidevidmask dd 0xFFFFFFFF
  7590                              <1> getpcimem:
  7591 00005FA4 B002                <1> 	mov al, 2
  7592 00005FA6 A2[9B5F0000]        <1> 	mov [pcireqtype], al
  7593 00005FAB E922000000          <1> 	jmp searchpci
  7594                              <1> getpciport:
  7595 00005FB0 B001                <1> 	mov al, 1
  7596 00005FB2 A2[9B5F0000]        <1> 	mov [pcireqtype], al
  7597 00005FB7 E916000000          <1> 	jmp searchpci
  7598                              <1> pcidump:
  7599 00005FBC 31C0                <1> 	xor eax, eax
  7600 00005FBE A2[995F0000]        <1> 	mov [pcifunction], al
  7601 00005FC3 A2[975F0000]        <1> 	mov [pcibus], al
  7602 00005FC8 A2[985F0000]        <1> 	mov [pcidevice], al
  7603 00005FCD A2[9B5F0000]        <1> 	mov [pcireqtype], al
  7604                              <1> searchpci:		;;return in ebx, start X in pciX
  7605 00005FD2 30C0                <1> 	xor al, al
  7606 00005FD4 A2[9A5F0000]        <1> 	mov [pciregister], al
  7607 00005FD9 E817020000          <1> 	call getpciaddr
  7608 00005FDE BAF80C0000          <1> 	mov edx, 0xCF8
  7609 00005FE3 EF                  <1> 	out dx, eax	;;request pci config
  7610 00005FE4 BAFC0C0000          <1> 	mov edx, 0xCFC
  7611 00005FE9 ED                  <1> 	in eax, dx 	;;read in pci config
  7612 00005FEA 3D0000FFFF          <1> 	cmp eax, 0xFFFF0000
  7613 00005FEF 0F8237000000        <1> 	jb near checkpcidevice
  7614                              <1> searchpciret:
  7615                              <1> nextpcidevice:
  7616 00005FF5 30C0                <1> 	xor al, al
  7617 00005FF7 A2[995F0000]        <1> 	mov [pcifunction], al
  7618 00005FFC A0[985F0000]        <1> 	mov al, [pcidevice]
  7619 00006001 3C1F                <1> 	cmp al, 11111b
  7620 00006003 0F8300010000        <1> 	jae near nextpcibus
  7621 00006009 FEC0                <1> 	inc al
  7622 0000600B A2[985F0000]        <1> 	mov [pcidevice], al
  7623 00006010 EBC0                <1> 	jmp searchpci
  7624 00006012 A0[995F0000]        <1> 	mov al, [pcifunction]
  7625 00006017 3C07                <1> 	cmp al, 111b
  7626 00006019 0F83D6FFFFFF        <1> 	jae near nextpcidevice
  7627 0000601F FEC0                <1> 	inc al
  7628 00006021 A2[995F0000]        <1> 	mov [pcifunction], al
  7629 00006026 EBAA                <1> 	jmp searchpci
  7630 00006028 00000000            <1> pcitype: db 0,0,0,0
  7631                              <1> checkpcidevice:
  7632 0000602C 31C0                <1> 	xor eax, eax
  7633 0000602E 3905[9C5F0000]      <1> 	cmp [pcidevid], eax
  7634 00006034 0F8430000000        <1> 	je near .good
  7635 0000603A A2[9A5F0000]        <1> 	mov [pciregister], al	;device id, vendor id
  7636 0000603F E8B1010000          <1> 	call getpciaddr
  7637 00006044 BAF80C0000          <1> 	mov edx, 0xCF8
  7638 00006049 EF                  <1> 	out dx, eax
  7639 0000604A BAFC0C0000          <1> 	mov edx, 0xCFC
  7640 0000604F ED                  <1> 	in eax, dx
  7641 00006050 2305[A05F0000]      <1> 	and eax, [pcidevidmask]
  7642 00006056 8B1D[9C5F0000]      <1> 	mov ebx, [pcidevid]
  7643 0000605C 231D[A05F0000]      <1> 	and ebx, [pcidevidmask]
  7644 00006062 39D8                <1> 	cmp eax, ebx
  7645 00006064 0F858BFFFFFF        <1> 	jne near searchpciret
  7646                              <1> .good:
  7647 0000606A 30C0                <1> 	xor al, al
  7648 0000606C 3805[9B5F0000]      <1> 	cmp [pcireqtype], al
  7649 00006072 0F842C000000        <1> 	je near dumppcidevice
  7650 00006078 B008                <1> 	mov al, 0x08
  7651 0000607A A2[9A5F0000]        <1> 	mov [pciregister], al	;;class code, subclass, revision id
  7652 0000607F E871010000          <1> 	call getpciaddr
  7653 00006084 BAF80C0000          <1> 	mov edx, 0xCF8
  7654 00006089 EF                  <1> 	out dx, eax
  7655 0000608A BAFC0C0000          <1> 	mov edx, 0xCFC
  7656 0000608F ED                  <1> 	in eax, dx
  7657 00006090 C1C008              <1> 	rol eax, 8
  7658 00006093 3A05[28600000]      <1> 	cmp al, [pcitype]
  7659 00006099 0F84A0000000        <1> 	je near foundpciaddr
  7660 0000609F E951FFFFFF          <1> 	jmp searchpciret
  7661                              <1> dumppcidevice:
  7662 000060A4 30C0                <1> 	xor al, al
  7663 000060A6 A2[9A5F0000]        <1> 	mov [pciregister], al
  7664 000060AB E845010000          <1> 	call getpciaddr
  7665 000060B0 89C1                <1> 	mov ecx, eax
  7666 000060B2 C605[9E2E0000]05    <1> 	mov byte [firsthexshown], 5
  7667 000060B9 E8F5CDFFFF          <1> 	call showhex
  7668                              <1> dumppcidevicelp:
  7669 000060BE A2[9A5F0000]        <1> 	mov [pciregister], al
  7670 000060C3 E82D010000          <1> 	call getpciaddr
  7671 000060C8 BAF80C0000          <1> 	mov edx, 0xCF8
  7672 000060CD EF                  <1> 	out dx, eax
  7673 000060CE BAFC0C0000          <1> 	mov edx, 0xCFC
  7674 000060D3 ED                  <1> 	in eax, dx
  7675 000060D4 89C1                <1> 	mov ecx, eax
  7676 000060D6 A0[9A5F0000]        <1> 	mov al, [pciregister]
  7677 000060DB 0404                <1> 	add al, 4
  7678 000060DD C605[9E2E0000]05    <1> 	mov byte [firsthexshown], 5
  7679 000060E4 E8CACDFFFF          <1> 	call showhex
  7680 000060E9 3C3C                <1> 	cmp al, 0x3C
  7681 000060EB 72D1                <1> 	jb dumppcidevicelp
  7682                              <1> dumppcidn:
  7683                              <1> %ifdef io.serial
  7684                              <1> 	mov esi, line
  7685                              <1> 	call print
  7686                              <1> %else
  7687 000060ED 803D[4A240000]00    <1> 	cmp byte [charpos], 0
  7688 000060F4 0F84FBFEFFFF        <1> 	je near searchpciret
  7689 000060FA BE[088B0000]        <1> 	mov esi, line
  7690 000060FF E81BBCFFFF          <1> 	call print
  7691                              <1> %endif
  7692 00006104 E9ECFEFFFF          <1> 	jmp searchpciret
  7693                              <1> nextpcibus:
  7694 00006109 30C0                <1> 	xor al, al
  7695 0000610B A2[985F0000]        <1> 	mov [pcidevice], al
  7696 00006110 A0[975F0000]        <1> 	mov al, [pcibus]
  7697 00006115 3C7F                <1> 	cmp al, 1111111b
  7698 00006117 730C                <1> 	jae donesearchpci
  7699 00006119 FEC0                <1> 	inc al
  7700 0000611B A2[975F0000]        <1> 	mov [pcibus], al
  7701 00006120 E9ADFEFFFF          <1> 	jmp searchpci
  7702                              <1> donesearchpci:
  7703 00006125 BBFFFFFFFF          <1> 	mov ebx, 0xFFFFFFFF
  7704 0000612A 31D2                <1> 	xor edx, edx
  7705 0000612C 8815[28600000]      <1> 	mov [pcitype], dl
  7706 00006132 8915[9C5F0000]      <1> 	mov [pcidevid], edx
  7707 00006138 891D[A05F0000]      <1> 	mov [pcidevidmask], ebx
  7708 0000613E C3                  <1> 	ret
  7709                              <1> foundpciaddr:
  7710 0000613F B010                <1> 	mov al, 0x10
  7711 00006141 A2[9A5F0000]        <1> 	mov [pciregister], al
  7712 00006146 803D[9B5F0000]02    <1> 	cmp byte [pcireqtype], 2
  7713 0000614D 7443                <1> 	je findpcimemaddr
  7714                              <1> findpciioaddr:
  7715 0000614F E8A1000000          <1> 	call getpciaddr
  7716 00006154 BAF80C0000          <1> 	mov edx, 0xCF8
  7717 00006159 EF                  <1> 	out dx, eax
  7718 0000615A BAFC0C0000          <1> 	mov edx, 0xCFC
  7719 0000615F ED                  <1> 	in eax, dx
  7720 00006160 89C3                <1> 	mov ebx, eax
  7721 00006162 81E301000000        <1> 	and ebx, 1
  7722 00006168 81FB00000000        <1> 	cmp ebx, 0
  7723 0000616E 0F8468000000        <1> 	je near notpciioaddr
  7724 00006174 2D01000000          <1> 	sub eax, 1
  7725 00006179 89C2                <1> 	mov edx, eax
  7726 0000617B 31DB                <1> 	xor ebx, ebx
  7727 0000617D 4B                  <1> 	dec ebx
  7728 0000617E 891D[A05F0000]      <1> 	mov [pcidevidmask], ebx
  7729 00006184 43                  <1> 	inc ebx
  7730 00006185 881D[28600000]      <1> 	mov [pcitype], bl
  7731 0000618B 891D[9C5F0000]      <1> 	mov [pcidevid], ebx
  7732 00006191 C3                  <1> 	ret
  7733                              <1> findpcimemaddr:
  7734 00006192 E85E000000          <1> 	call getpciaddr
  7735 00006197 BAF80C0000          <1> 	mov edx, 0xCF8
  7736 0000619C EF                  <1> 	out dx, eax
  7737 0000619D BAFC0C0000          <1> 	mov edx, 0xCFC
  7738 000061A2 ED                  <1> 	in eax, dx
  7739 000061A3 89C3                <1> 	mov ebx, eax
  7740 000061A5 81E301000000        <1> 	and ebx, 1
  7741 000061AB 81FB01000000        <1> 	cmp ebx, 1
  7742 000061B1 0F8425000000        <1> 	je near notpciioaddr
  7743 000061B7 89C2                <1> 	mov edx, eax
  7744 000061B9 50                  <1> 	push eax
  7745 000061BA A1[3E020000]        <1> 	mov eax, [basecache]
  7746 000061BF C1E004              <1> 	shl eax, 4
  7747 000061C2 29C2                <1> 	sub edx, eax
  7748 000061C4 58                  <1> 	pop eax
  7749 000061C5 31DB                <1> 	xor ebx, ebx
  7750 000061C7 4B                  <1> 	dec ebx
  7751 000061C8 891D[A05F0000]      <1> 	mov [pcidevidmask], ebx
  7752 000061CE 43                  <1> 	inc ebx
  7753 000061CF 881D[28600000]      <1> 	mov [pcitype], bl
  7754 000061D5 891D[9C5F0000]      <1> 	mov [pcidevid], ebx
  7755 000061DB C3                  <1> 	ret
  7756                              <1> notpciioaddr:
  7757 000061DC A0[9A5F0000]        <1> 	mov al, [pciregister]
  7758 000061E1 0404                <1> 	add al, 4
  7759 000061E3 3C28                <1> 	cmp al, 0x28
  7760 000061E5 0F870AFEFFFF        <1> 	ja near searchpciret
  7761 000061EB A2[9A5F0000]        <1> 	mov [pciregister], al
  7762 000061F0 E95AFFFFFF          <1> 	jmp findpciioaddr
  7763                              <1> getpciaddr:		;;puts it in eax and ebx
  7764 000061F5 31C0                <1> 			xor eax, eax
  7765 000061F7 BB00000080          <1> 			mov ebx, 0x80000000
  7766 000061FC A0[975F0000]        <1> 			mov al, [pcibus]
  7767 00006201 C1E010              <1> 			shl eax, 16
  7768 00006204 01C3                <1> 			add ebx, eax
  7769 00006206 31C0                <1> 			xor eax, eax
  7770 00006208 A0[985F0000]        <1> 			mov al, [pcidevice]
  7771 0000620D C1E00B              <1> 			shl eax, 11
  7772 00006210 01C3                <1> 			add ebx, eax
  7773 00006212 31C0                <1> 			xor eax, eax
  7774 00006214 A0[995F0000]        <1> 			mov al, [pcifunction]
  7775 00006219 C1E008              <1> 			shl eax, 8
  7776 0000621C 01C3                <1> 			add ebx, eax
  7777 0000621E 31C0                <1> 			xor eax, eax
  7778 00006220 A0[9A5F0000]        <1> 			mov al, [pciregister]
  7779 00006225 01C3                <1> 			add ebx, eax
  7780 00006227 89D8                <1> 			mov eax, ebx
  7781 00006229 C3                  <1> 			ret
  7782                                      %include "source/disk.asm"
  7783                              <1> ;This loads files using the methods in the loaded driver
  7784                              <1> %ifdef disk.real
  7785                              <1> %include "source/drivers/disk/realmode.asm"
  7786                              <2> diskr:
  7787                              <2> 			;read from disk using real mode-it does not work with large files
  7788                              <2> 			;sector count in cl
  7789                              <2> 			;disk number in ch
  7790                              <2> 			;48 bit address with last 32 bits in ebx
  7791                              <2> 			;buffer in esi
  7792                              <2> 			;puts end of buffer in edi and end lba address in edx
  7793 0000622A 880D[57620000]      <2> 	mov [sdlength], cl
  7794 00006230 891D[58620000]      <2> 	mov [sdaddress], ebx
  7795 00006236 8935[B6630000]      <2> 	mov [oldesireal], esi
  7796 0000623C 66BE[5C62]          <2> 	mov si, readdiskreal
  7797 00006240 668935[EE0C0000]    <2> 	mov [realmodeptr], si
  7798 00006247 BE[98620000]        <2> 	mov esi, backfromrealread
  7799 0000624C 8935[EA0C0000]      <2> 	mov [realmodereturn], esi
  7800 00006252 E97CA9FFFF          <2> 	jmp realmode
  7801 00006257 00                  <2> sdlength db 0
  7802 00006258 00000000            <2> sdaddress dd 0
  7803                              <2> 
  7804                              <2> [BITS 16]
  7805                              <2> readdiskreal:
  7806 0000625C C706[8862]1000      <2> 	mov word [dlen], 0x10
  7807 00006262 C706[8C62]0000      <2> 	mov word [daddress], 0
  7808 00006268 C706[8E62]0001      <2> 	mov word [dsegm], 0x100
  7809 0000626E 66891E[9062]        <2> 	mov [dlbaad], ebx
  7810 00006273 880E[8A62]          <2> 	mov [dreadlen], cl
  7811                              <2> ReadHardDisk:
  7812 00006277 BE[8862]            <2> 	mov si, diskaddresspacket
  7813 0000627A 31C0                <2> 	xor ax, ax
  7814 0000627C B442                <2> 	mov ah, 0x42
  7815 0000627E 8A16[8762]          <2> 	mov dl, [dnumber]
  7816 00006282 CD13                <2> 	int 0x13
  7817 00006284 72F1                <2> 	jc ReadHardDisk
  7818 00006286 C3                  <2> 	ret
  7819                              <2> 
  7820 00006287 80                  <2> dnumber db 0x80
  7821                              <2> diskaddresspacket:
  7822 00006288 10                  <2> dlen:	db 0x10 ;size of packet
  7823 00006289 00                  <2> 		db 0
  7824 0000628A 7F00                <2> dreadlen:	dw 0x7F	;blocks to read=maximum
  7825 0000628C 0000                <2> daddress:	dw 0x0	;address 0
  7826 0000628E 0001                <2> dsegm:		dw 0x100	;segment
  7827                              <2> 		;start with known value for hd
  7828                              <2> dlbaad:
  7829 00006290 00000000            <2> 	dd 0	;lba address
  7830 00006294 00000000            <2> 	dd 0
  7831                              <2> [BITS 32]
  7832                              <2> backfromrealread:
  7833 00006298 8B35[B6630000]      <2> 	mov esi, [oldesireal]
  7834 0000629E 8B1D[58620000]      <2> 	mov ebx, [sdaddress]
  7835 000062A4 31C9                <2> 	xor ecx, ecx
  7836 000062A6 8A0D[57620000]      <2> 	mov cl, [sdlength]
  7837 000062AC 01CB                <2> 	add ebx, ecx
  7838 000062AE 66B80800            <2> 	mov ax, LINEAR_SEL
  7839 000062B2 8EE0                <2> 	mov fs, ax
  7840 000062B4 BF00100000          <2> 	mov edi, 0x1000
  7841 000062B9 B200                <2> 	mov dl, 0
  7842 000062BB D0E1                <2> 	shl cl, 1
  7843                              <2> copyfromrmodedisk:
  7844 000062BD 648A07              <2> 	mov al, [fs:edi]
  7845 000062C0 8806                <2> 	mov [esi], al
  7846 000062C2 47                  <2> 	inc edi
  7847 000062C3 46                  <2> 	inc esi
  7848 000062C4 FECA                <2> 	dec dl
  7849 000062C6 80FA00              <2> 	cmp dl, 0
  7850 000062C9 75F2                <2> 	jne copyfromrmodedisk
  7851 000062CB FEC9                <2> 	dec cl
  7852 000062CD B200                <2> 	mov dl, 0
  7853 000062CF 80F900              <2> 	cmp cl, 0
  7854 000062D2 75E9                <2> 	jne copyfromrmodedisk
  7855 000062D4 66B83000            <2> 	mov ax, NEW_DATA_SEL
  7856 000062D8 8EE0                <2> 	mov fs, ax
  7857 000062DA 89F7                <2> 	mov edi, esi
  7858 000062DC 8B35[B6630000]      <2> 	mov esi, [oldesireal]
  7859 000062E2 89DA                <2> 	mov edx, ebx
  7860 000062E4 8B1D[58620000]      <2> 	mov ebx, [sdaddress]
  7861 000062EA C3                  <2> 	ret
  7862                              <2> 	
  7863                              <1> %else
  7864                              <1> 	%ifdef disk.protected
  7865                              <1> 	%include "source/drivers/disk/pata.asm"
  7866                              <1> 	%endif
  7867                              <1> %endif
  7868                              <1> loadfile:	;loads a file with the name buffer's location in edi into location in esi
  7869                              <1> 			;returns with err code in edx and file end in edi
  7870 000062EB 803F00              <1> 	cmp byte [edi], 0
  7871 000062EE 0F8448000000        <1> 	je near nofileload
  7872 000062F4 89FA                <1> 	mov edx, edi
  7873 000062F6 BB[2D9B0000]        <1> 	mov ebx, diskfileindex
  7874                              <1> nextnamechar:
  7875 000062FB 8A07                <1> 	mov al, [edi]
  7876 000062FD 3C26                <1> 	cmp al, '&'
  7877 000062FF 7440                <1> 	je nullfile
  7878 00006301 8A23                <1> 	mov ah, [ebx]
  7879 00006303 47                  <1> 	inc edi
  7880 00006304 43                  <1> 	inc ebx
  7881 00006305 88C1                <1> 	mov cl, al
  7882 00006307 08E1                <1> 	or cl, ah
  7883 00006309 80F900              <1> 	cmp cl, 0
  7884 0000630C 744E                <1> 	je equalfilenames
  7885 0000630E 80F920              <1> 	cmp cl, ' '
  7886 00006311 7449                <1> 	je equalfilenames
  7887 00006313 3C2A                <1> 	cmp al, '*'
  7888 00006315 742B                <1> 	je equalfilenames2
  7889 00006317 80FC00              <1> 	cmp ah, 0
  7890 0000631A 7410                <1> 	je nextfilename
  7891 0000631C 3C00                <1> 	cmp al, 0
  7892 0000631E 7404                <1> 	je getebxzero
  7893 00006320 38E0                <1> 	cmp al, ah
  7894 00006322 74D7                <1> 	je nextnamechar
  7895                              <1> getebxzero:
  7896 00006324 8A23                <1> 	mov ah, [ebx]
  7897 00006326 43                  <1> 	inc ebx
  7898 00006327 80FC00              <1> 	cmp ah, 0
  7899 0000632A 75F8                <1> 	jne getebxzero
  7900                              <1> nextfilename:
  7901 0000632C 81C308000000        <1> 	add ebx, 8		;next descriptor
  7902 00006332 89D7                <1> 	mov edi, edx
  7903 00006334 81FB[E29C0000]      <1> 	cmp ebx, enddiskfileindex
  7904 0000633A 72BF                <1> 	jb nextnamechar
  7905                              <1> nofileload:
  7906 0000633C BA94010000          <1> 	mov edx, 404	;indicate not found error
  7907                              <1> nullfile:
  7908 00006341 C3                  <1> 	ret
  7909                              <1> equalfilenames2:
  7910 00006342 81EB02000000        <1> 	sub ebx, 2
  7911                              <1> eqfilefind:
  7912 00006348 43                  <1> 	inc ebx
  7913 00006349 81FB[E29C0000]      <1> 	cmp ebx, enddiskfileindex
  7914 0000634F 0F83E7FFFFFF        <1> 	jae near nofileload
  7915 00006355 8A03                <1> 	mov al, [ebx]
  7916 00006357 3C00                <1> 	cmp al, 0
  7917 00006359 75ED                <1> 	jne eqfilefind
  7918 0000635B 43                  <1> 	inc ebx
  7919                              <1> equalfilenames:
  7920 0000635C 8B4304              <1> 	mov eax, [ebx + 4] 	;put file size in eax
  7921 0000635F 8B1B                <1> 	mov ebx, [ebx]		;put file beginning in ebx
  7922 00006361 031D[E69C0000]      <1> 	add ebx, [lbaad]	;add offset to solleros
  7923 00006367 31C9                <1> 	xor ecx, ecx
  7924 00006369 88C1                <1> 	mov cl, al			;get excess number of sectors
  7925 0000636B C0E102              <1> 	shl cl, 2
  7926 0000636E C0E902              <1> 	shr cl, 2			;cut off at 64
  7927 00006371 29C8                <1> 	sub eax, ecx		;get rid of excess sectors
  7928 00006373 B500                <1> 	mov ch, 0			;drive 0
  7929 00006375 C1E806              <1> 	shr eax, 6			;get number of 64 sector tracks
  7930                              <1> loaddiskfile:			;tracks in eax, excess sectors in cl, drive in ch, buffer in esi, address in ebx
  7931 00006378 A3[BA630000]        <1> 	mov [filetracks], eax
  7932 0000637D 89F7                <1> 	mov edi, esi		;just in case cl is 0
  7933 0000637F 89DA                <1> 	mov edx, ebx
  7934 00006381 80F900              <1> 	cmp cl, 0
  7935 00006384 7405                <1> 	je copytracksforfile
  7936 00006386 E89FFEFFFF          <1> 	call diskr	;take care of excess sectors
  7937                              <1> copytracksforfile:
  7938 0000638B A1[BA630000]        <1> 	mov eax, [filetracks]
  7939 00006390 3D00000000          <1> 	cmp eax, 0
  7940 00006395 7419                <1> 	je donecopyfile
  7941 00006397 48                  <1> 	dec eax
  7942 00006398 A3[BA630000]        <1> 	mov [filetracks], eax
  7943 0000639D 89D3                <1> 	mov ebx, edx	;get end lba
  7944 0000639F B140                <1> 	mov cl, 0x40 ;for compatability with BIOS it uses 64 instead of 128
  7945 000063A1 8A2D[E59C0000]      <1> 	mov ch, [DriveNumber]
  7946 000063A7 89FE                <1> 	mov esi, edi	;reset buffer
  7947 000063A9 E87CFEFFFF          <1> 	call diskr
  7948 000063AE EBDB                <1> 	jmp copytracksforfile
  7949                              <1> donecopyfile:
  7950 000063B0 BA00000000          <1> 	mov edx, 0	;no error
  7951 000063B5 C3                  <1> 	ret
  7952                              <1> 
  7953 000063B6 00000000            <1> oldesireal dd 0
  7954 000063BA 00000000            <1> filetracks dd 0
  7955 000063BE 00                  <1> lbad1 db 0
  7956 000063BF 00                  <1> lbad2 db 0
  7957 000063C0 00                  <1> lbad3 db 0
  7958 000063C1 00                  <1> lbad4 db 0
  7959 000063C2 00                  <1> lbad5 db 0
  7960 000063C3 00                  <1> lbad6 db 0
  7961 000063C4 6400                <1> segments dw 100
  7962                              <1> 
  7963                              <1> 
  7964                              <1> 	
  7965                                      %include "source/threads.asm"
  7966                              <1> %ifdef threads.included	
  7967                              <1> nwcmdst:
  7968 000063C6 31C0                <1> 	xor eax, eax
  7969 000063C8 BC[CAAE0000]        <1> 	mov esp, stackend
  7970 000063CD A2[8A640000]        <1> 	mov [threadson], al
  7971 000063D2 A3[8B640000]        <1> 	mov [currentthread], eax
  7972 000063D7 0504000000          <1> 	add eax, 4
  7973 000063DC A3[86640000]        <1> 	mov [lastthread], eax
  7974 000063E1 FB                  <1> 	sti
  7975 000063E2 E9F2C5FFFF          <1> 	jmp nwcmd
  7976                              <1> 
  7977                              <1> nomorethreadspace:
  7978 000063E7 BE[FD630000]        <1> 	mov esi, nmts
  7979 000063EC E82EB9FFFF          <1> 	call print
  7980 000063F1 C605[8A640000]00    <1> 	mov byte [threadson], 0
  7981 000063F8 E9DCC5FFFF          <1> 	jmp nwcmd
  7982 000063FD 546872656164204F76- <1> nmts	db "Thread Overflow",10,0
  7983 00006406 6572666C6F770A00    <1>
  7984                              <1> 
  7985                              <1> nomorestackspace:
  7986 0000640E BE[1A640000]        <1> 	mov esi, nmss
  7987 00006413 E807B9FFFF          <1> 	call print
  7988 00006418 EBAC                <1> 	jmp nwcmdst
  7989 0000641A 537461636B204F7665- <1> nmss	db "Stack Overflow",10,0
  7990 00006423 72666C6F770A00      <1>
  7991                              <1> 	
  7992                              <1> threadswitch:
  7993 0000642A FA                  <1> 	cli
  7994 0000642B 60                  <1> 	pushad
  7995 0000642C BF[2CD60100]        <1> 	mov edi, threadlist
  7996 00006431 A1[8B640000]        <1> 	mov eax, [currentthread]
  7997 00006436 40                  <1> 	inc eax
  7998 00006437 A3[8B640000]        <1> 	mov [currentthread], eax
  7999 0000643C 6648                <1> 	dec ax
  8000 0000643E C1E002              <1> 	shl eax, 2
  8001 00006441 01C7                <1> 	add edi, eax
  8002 00006443 8927                <1> 	mov [edi], esp
  8003 00006445 81C704000000        <1> 	add edi, 4
  8004 0000644B 81FF[2CE60100]      <1> 	cmp edi, threadlistend
  8005 00006451 0F830D000000        <1> 	jae near nookespthread
  8006 00006457 8B07                <1> 	mov eax, [edi]
  8007 00006459 3D00000000          <1> 	cmp eax, 0
  8008 0000645E 0F8519000000        <1> 	jne near okespthread
  8009                              <1> nookespthread:
  8010 00006464 BF[2CD60100]        <1> 	mov edi, threadlist
  8011 00006469 31C0                <1> 	xor eax, eax
  8012 0000646B A3[8B640000]        <1> 	mov [currentthread], eax
  8013 00006470 8B07                <1> 	mov eax, [edi]
  8014 00006472 3D00000000          <1> 	cmp eax, 0
  8015 00006477 0F8449FFFFFF        <1> 	je near nwcmdst
  8016                              <1> okespthread:
  8017 0000647D 89C4                <1> 	mov esp, eax
  8018 0000647F B020                <1> 	mov al, 0x20
  8019 00006481 E620                <1> 	out 0x20, al
  8020 00006483 61                  <1> 	popad
  8021 00006484 FB                  <1> 	sti
  8022 00006485 CF                  <1> 	iret
  8023                              <1> 
  8024                              <1> %endif
  8025 00006486 04000000            <1> 	lastthread dd 4
  8026 0000648A 00                  <1> 	threadson db 0
  8027 0000648B 00000000            <1> 	currentthread dd 0
  8028                                  %ifdef gui.included
  8029                                      %include "source/gui/gui.asm"
  8030                              <1> guiboot:	;Let's see what I can do, I am going to try to make this as freestanding as possible
  8031 0000648F 31C0                <1> 	xor eax, eax
  8032 00006491 31DB                <1> 	xor ebx, ebx
  8033 00006493 31C9                <1> 	xor ecx, ecx
  8034 00006495 31D2                <1> 	xor edx, edx
  8035 00006497 E820060000          <1> 	call guisetup
  8036                              <1> guiloop:
  8037 0000649C E8F2F0FFFF          <1> 	call cursorgui
  8038                              <1> guistart:
  8039 000064A1 E8FBF6FFFF          <1> 	call getkey
  8040 000064A6 C605[13770000]00    <1> 	mov byte [copygui], 0
  8041 000064AD EBF2                <1> 	jmp guistart
  8042                              <1> 
  8043                              <1> %include "source/gui/bmp.asm"
  8044                              <2> 
  8045                              <2> showbmp:
  8046 000064AF 668B06              <2> 	mov ax, [esi]
  8047 000064B2 663D424D            <2> 	cmp ax, "BM"
  8048 000064B6 0F85BB000000        <2> 	jne near endedbmp
  8049 000064BC 8B3D[B6540000]      <2> 	mov edi, [physbaseptr]
  8050 000064C2 6689D0              <2> 	mov ax, dx
  8051 000064C5 6689CB              <2> 	mov bx, cx
  8052 000064C8 31C9                <2> 	xor ecx, ecx
  8053 000064CA 31D2                <2> 	xor edx, edx
  8054 000064CC 6689D9              <2> 	mov cx, bx
  8055 000064CF 6689C2              <2> 	mov dx, ax
  8056 000064D2 01D7                <2> 	add edi, edx
  8057 000064D4 01D7                <2> 	add edi, edx
  8058 000064D6 31D2                <2> 	xor edx, edx
  8059 000064D8 668B15[8E550000]    <2> 	mov dx, [resolutionx2]
  8060 000064DF 034E16              <2> 	add ecx, [esi + 22]
  8061                              <2> bmplocloop:
  8062 000064E2 52                  <2> 	push edx
  8063 000064E3 31C0                <2> 	xor eax, eax
  8064 000064E5 6689D0              <2> 	mov ax, dx
  8065 000064E8 F7E1                <2> 	mul ecx
  8066 000064EA 5A                  <2> 	pop edx
  8067 000064EB 663B0D[A2540000]    <2> 	cmp cx, [resolutiony]
  8068 000064F2 7609                <2> 	jbe .nofixy
  8069 000064F4 31C9                <2> 	xor ecx, ecx
  8070 000064F6 668B0D[A2540000]    <2> 	mov cx, [resolutiony]
  8071                              <2> .nofixy:
  8072 000064FD 01C7                <2> 	add edi, eax
  8073 000064FF 8B5612              <2> 	mov edx, [esi + 18]
  8074 00006502 8B4E16              <2> 	mov ecx, [esi + 22]
  8075 00006505 8B460A              <2> 	mov eax, [esi + 10]
  8076 00006508 8B5E02              <2> 	mov ebx, [esi + 2]
  8077 0000650B 01F3                <2> 	add ebx, esi
  8078 0000650D 891D[7D650000]      <2> 	mov [bmpend], ebx
  8079 00006513 89D3                <2> 	mov ebx, edx
  8080 00006515 01C6                <2> 	add esi, eax
  8081                              <2> ldxbmp2:
  8082 00006517 31D2                <2> 	xor edx, edx
  8083 00006519 668B15[A0540000]    <2> 	mov dx, [resolutionx]
  8084 00006520 39D3                <2> 	cmp ebx, edx
  8085 00006522 7702                <2> 	ja ldxbmp
  8086 00006524 89DA                <2> 	mov edx, ebx
  8087                              <2> ldxbmp:
  8088 00006526 668B06              <2> 	mov ax, [esi]
  8089 00006529 668907              <2> 	mov [edi], ax
  8090 0000652C 81C702000000        <2> 	add edi, 2
  8091 00006532 81C602000000        <2> 	add esi, 2
  8092 00006538 3B35[7D650000]      <2> 	cmp esi, [bmpend]
  8093 0000653E 7737                <2> 	ja endedbmp
  8094 00006540 4A                  <2> 	dec edx
  8095 00006541 81FA00000000        <2> 	cmp edx, 0
  8096 00006547 77DD                <2> 	ja ldxbmp
  8097 00006549 31D2                <2> 	xor edx, edx
  8098 0000654B 668B15[A0540000]    <2> 	mov dx, [resolutionx]
  8099 00006552 39D3                <2> 	cmp ebx, edx
  8100 00006554 7610                <2> 	jbe .notover
  8101                              <2> .over:
  8102 00006556 01DE                <2> 	add esi, ebx
  8103 00006558 01DE                <2> 	add esi, ebx
  8104 0000655A 29D6                <2> 	sub esi, edx
  8105 0000655C 29D6                <2> 	sub esi, edx
  8106 0000655E 01DF                <2> 	add edi, ebx
  8107 00006560 01DF                <2> 	add edi, ebx
  8108 00006562 29D7                <2> 	sub edi, edx
  8109 00006564 29D7                <2> 	sub edi, edx
  8110                              <2> .notover:
  8111 00006566 29DF                <2> 	sub edi, ebx
  8112 00006568 29DF                <2> 	sub edi, ebx
  8113 0000656A 29D7                <2> 	sub edi, edx
  8114 0000656C 29D7                <2> 	sub edi, edx
  8115 0000656E 49                  <2> 	dec ecx
  8116 0000656F 81F900000000        <2> 	cmp ecx, 0
  8117 00006575 77A0                <2> 	ja ldxbmp2
  8118                              <2> endedbmp:
  8119 00006577 E8CA010000          <2> 	call switchmousepos2
  8120 0000657C C3                  <2> 	ret
  8121                              <2> 	
  8122 0000657D 00000000            <2> 	bmpend dd 0
  8123                              <1> %include "source/gui/circle.asm"
  8124                              <2> drawcircle:	;center in (dx,cx), color in si, radius in ax
  8125 00006581 663D0000            <2> 	cmp ax, 0
  8126 00006585 770A                <2> 	ja .nozerocircle
  8127 00006587 E877190000          <2> 	call putpixel	;the easiest circle ever
  8128 0000658C E9F4000000          <2> 	jmp .done
  8129                              <2> .nozerocircle:
  8130 00006591 55                  <2> 	push ebp
  8131 00006592 6689F5              <2> 	mov bp, si
  8132 00006595 6650                <2> 	push ax
  8133 00006597 E8A8190000          <2> 	call getpixelmem
  8134 0000659C 31C0                <2> 	xor eax, eax
  8135 0000659E 6658                <2> 	pop ax
  8136 000065A0 BE01000000          <2> 	mov esi, 1
  8137 000065A5 29C6                <2> 	sub esi, eax
  8138 000065A7 89C1                <2> 	mov ecx, eax
  8139 000065A9 31C0                <2> 	xor eax, eax
  8140 000065AB 66A1[8E550000]      <2> 	mov ax, [resolutionx2]
  8141 000065B1 F7E1                <2> 	mul ecx
  8142 000065B3 50                  <2> 	push eax
  8143 000065B4 31D2                <2> 	xor edx, edx
  8144 000065B6 01C7                <2> 	add edi, eax
  8145 000065B8 66892F              <2> 	mov [edi], bp
  8146 000065BB 29C7                <2> 	sub edi, eax
  8147 000065BD 29C7                <2> 	sub edi, eax
  8148 000065BF 66892F              <2> 	mov [edi], bp
  8149 000065C2 01C7                <2> 	add edi, eax
  8150 000065C4 D1E1                <2> 	shl ecx, 1
  8151 000065C6 01CF                <2> 	add edi, ecx
  8152 000065C8 66892F              <2> 	mov [edi], bp
  8153 000065CB D1E1                <2> 	shl ecx, 1
  8154 000065CD 29CF                <2> 	sub edi, ecx
  8155 000065CF 66892F              <2> 	mov [edi], bp
  8156 000065D2 D1E9                <2> 	shr ecx, 1
  8157 000065D4 01CF                <2> 	add edi, ecx
  8158 000065D6 D1E9                <2> 	shr ecx, 1
  8159 000065D8 B802000000          <2> 	mov eax, 2
  8160 000065DD F7E1                <2> 	mul ecx
  8161 000065DF 48                  <2> 	dec eax
  8162 000065E0 F7D0                <2> 	not eax ;make it negative
  8163 000065E2 A3[8A660000]        <2> 	mov [.ddF_y], eax
  8164 000065E7 58                  <2> 	pop eax
  8165 000065E8 BB01000000          <2> 	mov ebx, 1
  8166 000065ED 891D[86660000]      <2> 	mov [.ddF_x], ebx
  8167 000065F3 4B                  <2> 	dec ebx
  8168 000065F4 31D2                <2> 	xor edx, edx
  8169                              <2> .lp:	;it starts this with the center in edi
  8170                              <2> 		;color in bp
  8171                              <2> 		;ddF_x in memor
  8172                              <2> 		;x*resolutionx2 in ebx
  8173                              <2> 		;x in edx
  8174                              <2> 		;ddF_y in memory
  8175                              <2> 		;y*resolutionx2 in eax
  8176                              <2> 		;f in esi
  8177                              <2> 		;y in ecx
  8178 000065F6 81FE00000080        <2> 	cmp esi, 0x80000000 ;this means it is not negative
  8179 000065FC 7717                <2> 	ja	.noddF_y
  8180 000065FE 49                  <2> 	dec ecx
  8181 000065FF 2B05[8E550000]      <2> 	sub eax, [resolutionx2]
  8182 00006605 8105[8A660000]0200- <2> 	add dword [.ddF_y], 2
  8183 0000660D 0000                <2>
  8184 0000660F 0335[8A660000]      <2> 	add esi, [.ddF_y]
  8185                              <2> .noddF_y:
  8186 00006615 42                  <2> 	inc edx
  8187 00006616 031D[8E550000]      <2> 	add ebx, [resolutionx2]
  8188 0000661C 8105[86660000]0200- <2> 	add dword [.ddF_x], 2
  8189 00006624 0000                <2>
  8190 00006626 0335[86660000]      <2> 	add esi, [.ddF_x]
  8191                              <2> 
  8192 0000662C D1E2                <2> 	shl edx, 1
  8193 0000662E D1E1                <2> 	shl ecx, 1
  8194 00006630 01D7                <2> 	add edi, edx
  8195 00006632 01C7                <2> 	add edi, eax
  8196 00006634 66892F              <2> 	mov [edi], bp
  8197 00006637 D1E2                <2> 	shl edx, 1
  8198 00006639 29D7                <2> 	sub edi, edx
  8199 0000663B 66892F              <2> 	mov [edi], bp
  8200 0000663E 01D7                <2> 	add edi, edx
  8201 00006640 D1E0                <2> 	shl eax, 1
  8202 00006642 29C7                <2> 	sub edi, eax
  8203 00006644 66892F              <2> 	mov [edi], bp
  8204 00006647 29D7                <2> 	sub edi, edx
  8205 00006649 66892F              <2> 	mov [edi], bp
  8206 0000664C D1EA                <2> 	shr edx, 1
  8207 0000664E D1E8                <2> 	shr eax, 1
  8208 00006650 01C7                <2> 	add edi, eax
  8209 00006652 01D7                <2> 	add edi, edx
  8210                              <2> 	
  8211 00006654 01DF                <2> 	add edi, ebx
  8212 00006656 01CF                <2> 	add edi, ecx
  8213 00006658 66892F              <2> 	mov [edi], bp
  8214 0000665B D1E1                <2> 	shl ecx, 1
  8215 0000665D 29CF                <2> 	sub edi, ecx
  8216 0000665F 66892F              <2> 	mov [edi], bp
  8217 00006662 D1E3                <2> 	shl ebx, 1
  8218 00006664 29DF                <2> 	sub edi, ebx
  8219 00006666 01CF                <2> 	add edi, ecx
  8220 00006668 66892F              <2> 	mov [edi], bp
  8221 0000666B 29CF                <2> 	sub edi, ecx
  8222 0000666D 66892F              <2> 	mov [edi], bp
  8223 00006670 D1EB                <2> 	shr ebx, 1
  8224 00006672 D1E9                <2> 	shr ecx, 1
  8225 00006674 01DF                <2> 	add edi, ebx
  8226 00006676 01CF                <2> 	add edi, ecx
  8227 00006678 D1EA                <2> 	shr edx, 1
  8228 0000667A D1E9                <2> 	shr ecx, 1
  8229 0000667C 39CA                <2> 	cmp edx, ecx
  8230 0000667E 0F8272FFFFFF        <2> 	jb .lp
  8231 00006684 5D                  <2> 	pop ebp
  8232                              <2> .done:
  8233 00006685 C3                  <2> 	ret
  8234                              <2> 	
  8235 00006686 00000000            <2> .ddF_x dd 0
  8236 0000668A 00000000            <2> .ddF_y dd 0
  8237                              <1> %include "source/gui/cursor.asm"
  8238                              <2> clearmousecursor:
  8239 0000668E BE[E8690000]        <2> 		mov esi, background
  8240 00006693 8B3D[B6540000]      <2> 		mov edi, [physbaseptr]
  8241 00006699 31D2                <2> 		xor edx, edx
  8242 0000669B 31C9                <2> 		xor ecx, ecx
  8243 0000669D 668B15[80570000]    <2> 		mov dx, [lastmouseposition]
  8244 000066A4 668B0D[82570000]    <2> 		mov cx, [lastmouseposition + 2]
  8245 000066AB 01D7                <2> 		add edi, edx
  8246 000066AD 31D2                <2> 		xor edx, edx
  8247 000066AF 668B15[8E550000]    <2> 		mov dx, [resolutionx2]
  8248 000066B6 81F900000000        <2> 		cmp ecx, 0
  8249 000066BC 7408                <2> 		je .nomul
  8250 000066BE 52                  <2> 		push edx
  8251 000066BF 89D0                <2> 		mov eax, edx
  8252 000066C1 F7E1                <2> 		mul ecx
  8253 000066C3 01C7                <2> 		add edi, eax
  8254 000066C5 5A                  <2> 		pop edx
  8255                              <2> .nomul:
  8256                              <2> %ifdef 	gui.background
  8257                              <2> 		cmp dword [backgroundimage], 0
  8258                              <2> 		je .noyclr
  8259                              <2> 		mov esi, [backgroundimage]
  8260                              <2> 		sub edi, [physbaseptr]
  8261                              <2> 		add esi, edi
  8262                              <2> 		add edi, [physbaseptr]
  8263                              <2> .backlp:
  8264                              <2> 		xor ebx, ebx
  8265                              <2> .noyback:
  8266                              <2> 		mov eax, [esi + ebx]
  8267                              <2> 		mov [edi + ebx], eax
  8268                              <2> 		add ebx, 4
  8269                              <2> 		cmp ebx, 16
  8270                              <2> 		jne .noyback
  8271                              <2> 		add edi, edx
  8272                              <2> 		add esi, edx
  8273                              <2> 		inc cx
  8274                              <2> 		cmp cx, 16
  8275                              <2> 		jb .backlp
  8276                              <2> 		ret
  8277                              <2> %endif
  8278                              <2> .noyclr:
  8279 000066C6 668B06              <2> 		mov ax, [esi]
  8280 000066C9 C1C010              <2> 		rol eax, 16
  8281 000066CC 668B06              <2> 		mov ax, [esi]
  8282 000066CF 8907                <2> 		mov [edi], eax
  8283 000066D1 894704              <2> 		mov [edi + 4], eax
  8284 000066D4 894708              <2> 		mov [edi + 8], eax
  8285 000066D7 89470C              <2> 		mov [edi + 12], eax
  8286 000066DA 01D7                <2> 		add edi, edx
  8287 000066DC 6641                <2> 		inc cx
  8288 000066DE 6681F91000          <2> 		cmp cx, 16
  8289 000066E3 72E1                <2> 		jb .noyclr
  8290 000066E5 C3                  <2> 		ret
  8291                              <2> 
  8292                              <2> switchmousepos:		;;switch were the mouse is located
  8293 000066E6 BE[BFCF0000]        <2> 		mov esi, mousecolorbuf
  8294 000066EB 8B3D[B6540000]      <2> 		mov edi, [physbaseptr]
  8295 000066F1 31D2                <2> 		xor edx, edx
  8296 000066F3 31C9                <2> 		xor ecx, ecx
  8297 000066F5 668B15[80570000]    <2> 		mov dx, [lastmouseposition]
  8298 000066FC 668B0D[82570000]    <2> 		mov cx, [lastmouseposition + 2]
  8299 00006703 01D7                <2> 		add edi, edx
  8300 00006705 31D2                <2> 		xor edx, edx
  8301 00006707 668B15[8E550000]    <2> 		mov dx, [resolutionx2]
  8302 0000670E 6681F90000          <2> 		cmp cx, 0
  8303 00006713 740B                <2> 		je noswmsy
  8304 00006715 01D7                <2> swmsy:		add edi, edx
  8305 00006717 6649                <2> 		dec cx
  8306 00006719 6681F90000          <2> 		cmp cx, 0
  8307 0000671E 75F5                <2> 		jne swmsy
  8308 00006720 8B06                <2> noswmsy:	mov eax, [esi]
  8309 00006722 8B5E04              <2> 		mov ebx, [esi + 4]
  8310 00006725 8907                <2> 		mov [edi], eax
  8311 00006727 895F04              <2> 		mov [edi + 4], ebx
  8312 0000672A 8B4608              <2> 		mov eax, [esi + 8]
  8313 0000672D 8B5E0C              <2> 		mov ebx, [esi + 12]
  8314 00006730 894708              <2> 		mov [edi + 8], eax
  8315 00006733 895F0C              <2> 		mov [edi + 12], ebx
  8316 00006736 01D7                <2> 		add edi, edx
  8317 00006738 81C610000000        <2> 		add esi, 16
  8318 0000673E 81FE[BFD00000]      <2> 		cmp esi, mcolorend
  8319 00006744 72DA                <2> 		jb noswmsy
  8320                              <2> 		
  8321                              <2> switchmousepos2:
  8322 00006746 BE[BFCF0000]        <2> 		mov esi, mousecolorbuf
  8323 0000674B 8B3D[B6540000]      <2> 		mov edi, [physbaseptr]
  8324 00006751 31D2                <2> 		xor edx, edx
  8325 00006753 31C9                <2> 		xor ecx, ecx
  8326 00006755 668B15[84570000]    <2> 		mov dx, [mousecursorposition]
  8327 0000675C 668B0D[86570000]    <2> 		mov cx, [mousecursorposition + 2]
  8328 00006763 01D7                <2> 		add edi, edx
  8329 00006765 31D2                <2> 		xor edx, edx
  8330 00006767 668B15[8E550000]    <2> 		mov dx, [resolutionx2]
  8331 0000676E 6681F90000          <2> 		cmp cx, 0
  8332 00006773 740B                <2> 		je noswmsy2
  8333 00006775 01D7                <2> swmsy2:		add edi, edx
  8334 00006777 6649                <2> 		dec cx
  8335 00006779 6681F90000          <2> 		cmp cx, 0
  8336 0000677E 75F5                <2> 		jne swmsy2
  8337 00006780 8B07                <2> noswmsy2:	mov eax, [edi]
  8338 00006782 8B5F04              <2> 		mov ebx, [edi + 4]
  8339 00006785 8906                <2> 		mov [esi], eax
  8340 00006787 895E04              <2> 		mov [esi + 4], ebx
  8341 0000678A 8B4708              <2> 		mov eax, [edi + 8]
  8342 0000678D 8B5F0C              <2> 		mov ebx, [edi + 12]
  8343 00006790 894608              <2> 		mov [esi + 8], eax
  8344 00006793 895E0C              <2> 		mov [esi + 12], ebx
  8345 00006796 01D7                <2> 		add edi, edx
  8346 00006798 81C610000000        <2> 		add esi, 16
  8347 0000679E 81FE[BFD00000]      <2> 		cmp esi, mcolorend
  8348 000067A4 72DA                <2> 		jb noswmsy2
  8349 000067A6 C3                  <2> 		ret
  8350                              <2> 		
  8351                              <1> %include "source/gui/icon.asm"
  8352 000067A7 0000                <2> iconcolor dw 0
  8353                              <2> 	showicon:	;;icon in si, position in (dx,cx), selected in ax, code in bx
  8354 000067A9 A2[6C7F0000]        <2> 		mov [iconselected], al
  8355 000067AE 8025[6C7F0000]01    <2> 		and byte [iconselected], 1
  8356 000067B5 B401                <2> 		mov ah, 1
  8357 000067B7 E8D4140000          <2> 		call graphicsadd
  8358                              <2> 	showicon2:
  8359 000067BC 8B3D[B6540000]      <2> 		mov edi, [physbaseptr]
  8360 000067C2 6601D2              <2> 		add dx, dx
  8361 000067C5 663B15[8E550000]    <2> 		cmp dx, [resolutionx2]
  8362 000067CC 720C                <2> 		jb screenxgood
  8363 000067CE 668B15[8E550000]    <2> 		mov dx, [resolutionx2]
  8364 000067D5 6681EA4000          <2> 		sub dx, 64
  8365                              <2> 	screenxgood:
  8366 000067DA 6681F90000          <2> 		cmp cx, 0
  8367 000067DF 742B                <2> 		je noscreenygoodchk
  8368 000067E1 663B0D[A2540000]    <2> 		cmp cx, [resolutiony]
  8369 000067E8 720C                <2> 		jb screenygood
  8370 000067EA 668B0D[A2540000]    <2> 		mov cx, [resolutiony]
  8371 000067F1 6681E92000          <2> 		sub cx, 32
  8372                              <2> 	screenygood:
  8373 000067F6 50                  <2> 		push eax
  8374 000067F7 52                  <2> 		push edx
  8375 000067F8 31C0                <2> 		xor eax, eax
  8376 000067FA 31DB                <2> 		xor ebx, ebx
  8377 000067FC 668B1D[8E550000]    <2> 		mov bx, [resolutionx2]
  8378 00006803 6689C8              <2> 		mov ax, cx
  8379 00006806 F7E3                <2> 		mul ebx
  8380 00006808 01C7                <2> 		add edi, eax
  8381 0000680A 5A                  <2> 		pop edx
  8382 0000680B 58                  <2> 		pop eax
  8383                              <2> 	noscreenygoodchk:
  8384 0000680C 31DB                <2> 		xor ebx, ebx
  8385 0000680E 6689D3              <2> 		mov bx, dx
  8386 00006811 01DF                <2> 		add edi, ebx
  8387 00006813 6631C9              <2> 		xor cx, cx
  8388 00006816 668B06              <2> 		mov ax, [esi]
  8389 00006819 81C602000000        <2> 		add esi, 2
  8390 0000681F 66A3[A7670000]      <2> 		mov [iconcolor], ax
  8391                              <2> 	writeicon:
  8392 00006825 8B06                <2> 		mov eax, [esi]
  8393 00006827 D1C0                <2> 		rol eax, 1
  8394 00006829 30C9                <2> 		xor cl, cl
  8395                              <2> 	writeiconline:
  8396 0000682B B201                <2> 		mov dl, 1
  8397 0000682D 20C2                <2> 		and dl, al
  8398 0000682F 3215[6C7F0000]      <2> 		xor dl, [iconselected]
  8399 00006835 668B1D[E8690000]    <2> 		mov bx, [background]
  8400 0000683C 66891F              <2> 		mov [edi], bx
  8401 0000683F 80FA00              <2> 		cmp dl, 0
  8402 00006842 740A                <2> 		je noiconline
  8403 00006844 668B15[A7670000]    <2> 		mov dx, [iconcolor]
  8404 0000684B 668917              <2> 		mov [edi], dx
  8405                              <2> 	noiconline:
  8406 0000684E 81C702000000        <2> 		add edi, 2
  8407 00006854 D1C0                <2> 		rol eax, 1
  8408 00006856 FEC1                <2> 		inc cl
  8409 00006858 80F920              <2> 		cmp cl, 32
  8410 0000685B 72CE                <2> 		jb writeiconline
  8411 0000685D 81C604000000        <2> 		add esi, 4
  8412 00006863 FEC5                <2> 		inc ch
  8413 00006865 31D2                <2> 		xor edx, edx
  8414 00006867 668B15[8E550000]    <2> 		mov dx, [resolutionx2]
  8415 0000686E 01D7                <2> 		add edi, edx
  8416 00006870 81EF40000000        <2> 		sub edi, 64
  8417 00006876 80FD20              <2> 		cmp ch, 32
  8418 00006879 72AA                <2> 		jb writeicon
  8419 0000687B 31C0                <2> 		xor eax, eax
  8420 0000687D C3                  <2> 		ret
  8421                              <1> %include "source/gui/line.asm"
  8422                              <2> drawline:	;from (bx,ax) to (dx,cx), color in si
  8423 0000687E 668935[A0690000]    <2> 	mov [.color], si
  8424 00006885 C605[A2690000]00    <2> 	mov byte [.steep], 0
  8425 0000688C C605[A3690000]00    <2> 	mov byte [.yreversed], 0
  8426 00006893 E907000000          <2> 	jmp .notsteep
  8427                              <2> .steeploop:
  8428 00006898 C605[A2690000]01    <2> 	mov byte [.steep], 1
  8429                              <2> .notsteep:
  8430 0000689F 31FF                <2> 	xor edi, edi
  8431 000068A1 31F6                <2> 	xor esi, esi
  8432 000068A3 6639DA              <2> 	cmp dx, bx
  8433 000068A6 7705                <2> 	ja .noreversex
  8434 000068A8 6687D3              <2> 	xchg dx, bx
  8435 000068AB 6691                <2> 	xchg cx, ax
  8436                              <2> .noreversex:
  8437 000068AD 6689D7              <2> 	mov di, dx
  8438 000068B0 6629DF              <2> 	sub di, bx
  8439                              <2> 	
  8440 000068B3 6639C1              <2> 	cmp cx, ax
  8441 000068B6 720B                <2> 	jb .reversey
  8442 000068B8 6689CE              <2> 	mov si, cx
  8443 000068BB 6629C6              <2> 	sub si, ax
  8444 000068BE E90D000000          <2> 	jmp .normal
  8445                              <2> .reversey:
  8446 000068C3 C605[A3690000]02    <2> 	mov byte [.yreversed], 2
  8447 000068CA 6689C6              <2> 	mov si, ax
  8448 000068CD 6629CE              <2> 	sub si, cx	
  8449                              <2> .normal:
  8450 000068D0 6687CA              <2> 	xchg cx, dx
  8451 000068D3 6693                <2> 	xchg ax, bx
  8452 000068D5 6639FE              <2> 	cmp si, di
  8453 000068D8 77BE                <2> 	ja .steeploop
  8454 000068DA 6687CA              <2> 	xchg cx, dx
  8455 000068DD 6693                <2> 	xchg ax, bx
  8456                              <2> 	
  8457 000068DF 6691                <2> 	xchg ax, cx
  8458 000068E1 6687DA              <2> 	xchg bx, dx
  8459 000068E4 66893D[A6690000]    <2> 	mov [.xdelta], di
  8460 000068EB 668935[A8690000]    <2> 	mov [.ydelta], si
  8461 000068F2 668B35[A0690000]    <2> 	mov si, [.color]
  8462 000068F9 66891D[A4690000]    <2> 	mov [.endline], bx
  8463 00006900 6652                <2> 	push dx
  8464 00006902 6651                <2> 	push cx
  8465 00006904 6687CA              <2> 	xchg cx, dx
  8466 00006907 803D[A2690000]01    <2> 	cmp byte [.steep], 1
  8467 0000690E 7403                <2> 	je .xchg
  8468 00006910 6687D1              <2> 	xchg dx, cx
  8469                              <2> .xchg:
  8470 00006913 E82C160000          <2> 	call getpixelmem	;get pointer to pixel in edi from (dx,cx)
  8471 00006918 6659                <2> 	pop cx
  8472 0000691A 665A                <2> 	pop dx
  8473 0000691C 31C0                <2> 	xor eax, eax
  8474 0000691E 66A1[A6690000]      <2> 	mov ax, [.xdelta]
  8475 00006924 66D1E8              <2> 	shr ax, 1
  8476 00006927 8A0D[A2690000]      <2> 	mov cl, [.steep]
  8477 0000692D 0A0D[A3690000]      <2> 	or cl, [.yreversed]
  8478 00006933 55                  <2> 	push ebp
  8479 00006934 668B2D[A4690000]    <2> 	mov bp, [.endline]
  8480 0000693B 6629D5              <2> 	sub bp, dx
  8481 0000693E 668B15[A8690000]    <2> 	mov dx, [.ydelta]
  8482                              <2> .lp:
  8483 00006945 668937              <2> 	mov [edi], si
  8484 00006948 6639D0              <2> 	cmp ax, dx
  8485 0000694B 7332                <2> 	jae .noaddx
  8486 0000694D F6C102              <2> 	test cl, 2
  8487 00006950 7414                <2> 	jz .nodecy
  8488 00006952 F6C101              <2> 	test cl, 1
  8489 00006955 7509                <2> 	jnz .steepy
  8490 00006957 29DF                <2> 	sub edi, ebx
  8491 00006959 29DF                <2> 	sub edi, ebx
  8492 0000695B E906000000          <2> 	jmp .nodecy
  8493                              <2> .steepy:
  8494 00006960 81EF04000000        <2> 	sub edi, 4
  8495                              <2> .nodecy:
  8496 00006966 660305[A6690000]    <2> 	add ax, [.xdelta]
  8497 0000696D F6C101              <2> 	test cl, 1
  8498 00006970 7507                <2> 	jnz .steepx
  8499 00006972 01DF                <2> 	add edi, ebx
  8500 00006974 E906000000          <2> 	jmp .noaddx
  8501                              <2> .steepx:
  8502 00006979 81C702000000        <2> 	add edi, 2
  8503                              <2> .noaddx:
  8504 0000697F 6629D0              <2> 	sub ax, dx
  8505 00006982 664D                <2> 	dec bp
  8506 00006984 81C702000000        <2> 	add edi, 2
  8507 0000698A F6C101              <2> 	test cl, 1
  8508 0000698D 7408                <2> 	jz .nosteepx
  8509 0000698F 81EF02000000        <2> 	sub edi, 2
  8510 00006995 01DF                <2> 	add edi, ebx
  8511                              <2> .nosteepx:
  8512 00006997 6681FD0000          <2> 	cmp bp, 0
  8513 0000699C 75A7                <2> 	jne .lp
  8514                              <2> .done:
  8515 0000699E 5D                  <2> 	pop ebp
  8516 0000699F C3                  <2> 	ret
  8517                              <2> 	
  8518 000069A0 0000                <2> .color dw 0
  8519 000069A2 00                  <2> .steep db 0
  8520 000069A3 00                  <2> .yreversed db 0
  8521 000069A4 0000                <2> .endline dw 0
  8522 000069A6 0000                <2> .xdelta dw 0
  8523 000069A8 0000                <2> .ydelta dw 0
  8524                              <1> %include "source/gui/refresh.asm"
  8525                              <2> guiclear:
  8526 000069AA 8B3D[B6540000]      <2> 	mov edi, [physbaseptr]
  8527 000069B0 668B15[A0540000]    <2> 	mov dx, [resolutionx]
  8528 000069B7 668B0D[A2540000]    <2> 	mov cx, [resolutiony]
  8529                              <2> %ifdef gui.background
  8530                              <2> 	cmp dword [backgroundimage], 0
  8531                              <2> 	je guiclear.noback
  8532                              <2> 		mov esi, [backgroundimage]
  8533                              <2> 	.lp:
  8534                              <2> 		;movdqa xmm0, [esi]	;the next 4 lines are for SSE
  8535                              <2> 		;movdqa [edi], xmm0
  8536                              <2> 		;add esi, 16
  8537                              <2> 		;add edi, 16
  8538                              <2> 		;sub dx, 8
  8539                              <2> 		mov eax, [esi]
  8540                              <2> 		mov [edi], eax
  8541                              <2> 		add esi, 4
  8542                              <2> 		add edi, 4
  8543                              <2> 		sub dx, 2
  8544                              <2> 		cmp dx, 0
  8545                              <2> 		ja .lp
  8546                              <2> 		dec cx
  8547                              <2> 		mov dx, [resolutionx]
  8548                              <2> 		cmp cx, 0
  8549                              <2> 		ja .lp
  8550                              <2> 		ret
  8551                              <2> 	backgroundimage dd 0
  8552                              <2> %endif
  8553                              <2> guiclear.noback:
  8554 000069BE A1[E8690000]        <2> 	mov eax, [background]
  8555                              <2> guiclearloop:
  8556 000069C3 8907                <2> 	mov [edi], eax
  8557 000069C5 81C704000000        <2> 	add edi, 4
  8558 000069CB 6681EA0200          <2> 	sub dx, 2
  8559 000069D0 6681FA0000          <2> 	cmp dx, 0
  8560 000069D5 77EC                <2> 	ja guiclearloop
  8561 000069D7 6649                <2> 	dec cx
  8562 000069D9 668B15[A0540000]    <2> 	mov dx, [resolutionx]
  8563 000069E0 6681F90000          <2> 	cmp cx, 0
  8564 000069E5 77DC                <2> 	ja guiclearloop
  8565 000069E7 C3                  <2> 	ret
  8566                              <2> 
  8567 000069E8 CF7B<rept>          <2> background times 2 dw 0111101111001111b
  8568                              <2> 
  8569                              <2> reloadallgraphics:
  8570 000069EC BF[BFCD0000]        <2> 		mov edi, graphicstable
  8571                              <2> reloadgraphicsloop:
  8572 000069F1 8B7702              <2> 		mov esi, [edi + 2]
  8573 000069F4 668B5706            <2> 		mov dx, [edi + 6]
  8574 000069F8 668B4F08            <2> 		mov cx, [edi + 8]
  8575 000069FC 668B07              <2> 		mov ax, [edi]
  8576 000069FF 668B5F0A            <2> 		mov bx, [edi + 10]
  8577 00006A03 893D[7C7C0000]      <2> 		mov [grpctblpos], edi
  8578 00006A09 3B3D[1D770000]      <2> 		cmp edi, [dragging]
  8579 00006A0F 741E                <2> 		je loadedgraphic
  8580 00006A11 663D0100            <2> 		cmp ax, 1
  8581 00006A15 0F8436000000        <2> 		je near icongraphic
  8582 00006A1B 663D0200            <2> 		cmp ax, 2
  8583 00006A1F 0F843C000000        <2> 		je near stringgraphic
  8584 00006A25 663D0300            <2> 		cmp ax, 3
  8585 00006A29 0F8416000000        <2> 		je near windowgraphic
  8586 00006A2F 8B3D[7C7C0000]      <2> loadedgraphic:  mov edi, [grpctblpos]
  8587 00006A35 81C710000000        <2> 		add edi, 16
  8588 00006A3B 81FF[BFCF0000]      <2> 		cmp edi, graphicstableend
  8589 00006A41 732E                <2> 		jae donereloadgraphics
  8590 00006A43 EBAC                <2> 		jmp reloadgraphicsloop
  8591                              <2> windowgraphic:
  8592 00006A45 E83E080000          <2> 		call showwindow2
  8593 00006A4A E879B3FFFF          <2> 		call cleardouble
  8594 00006A4F EBDE                <2> 		jmp loadedgraphic
  8595 00006A51 80E301              <2> icongraphic:	and bl, 1
  8596 00006A54 881D[6C7F0000]      <2> 		mov [iconselected], bl
  8597 00006A5A E85DFDFFFF          <2> 		call showicon2
  8598 00006A5F EBCE                <2> 		jmp loadedgraphic
  8599 00006A61 80E301              <2> stringgraphic:  and bl, 1
  8600 00006A64 881D[19770000]      <2> 		mov [mouseselecton], bl
  8601 00006A6A E805050000          <2> 		call showstring2
  8602 00006A6F EBBE                <2> 		jmp loadedgraphic
  8603                              <2> donereloadgraphics:
  8604 00006A71 8B3D[1D770000]      <2> 		mov edi, [dragging]
  8605 00006A77 81FF[BFCD0000]      <2> 		cmp edi, graphicstable
  8606 00006A7D 7226                <2> 		jb notcorrectdrag
  8607 00006A7F 668B07              <2> 		mov ax, [edi]
  8608 00006A82 8B7702              <2> 		mov esi, [edi + 2]
  8609 00006A85 668B5706            <2> 		mov dx, [edi + 6]
  8610 00006A89 668B4F08            <2> 		mov cx, [edi + 8]
  8611 00006A8D 668B5F0A            <2> 		mov bx, [edi + 10]
  8612 00006A91 663D0100            <2> 		cmp ax, 1
  8613 00006A95 750F                <2> 		jne noticondragging
  8614 00006A97 80E301              <2> 		and bl, 1
  8615 00006A9A 881D[6C7F0000]      <2> 		mov [iconselected], bl
  8616 00006AA0 E817FDFFFF          <2> 		call showicon2
  8617                              <2> notcorrectdrag:
  8618 00006AA5 C3                  <2> 		ret
  8619                              <2> 
  8620                              <2> 	noticondragging:
  8621 00006AA6 663D0200            <2> 		cmp ax, 2
  8622 00006AAA 75F9                <2> 		jne notcorrectdrag
  8623 00006AAC 80E301              <2> 		and bl, 1
  8624 00006AAF 881D[19770000]      <2> 		mov [mouseselecton], bl
  8625 00006AB5 E8BA040000          <2> 		call showstring2
  8626 00006ABA EBE9                <2> 		jmp notcorrectdrag
  8627                              <1> %include "source/gui/startup.asm"
  8628                              <2> guisetup:
  8629                              <2> 	%ifdef gui.background
  8630                              <2> 	xor ebx, ebx
  8631                              <2> 	mov [backgroundimage], ebx
  8632                              <2> 	%endif
  8633 00006ABC E8E9FEFFFF          <2> 	call guiclear
  8634 00006AC1 C605[E49C0000]01    <2> 	mov byte [guion], 1
  8635 00006AC8 C605[19770000]00    <2> 	mov byte [mouseselecton], 0
  8636 00006ACF 31C0                <2> 	xor eax, eax
  8637 00006AD1 31DB                <2> 	xor ebx, ebx
  8638 00006AD3 31C9                <2> 	xor ecx, ecx
  8639 00006AD5 31D2                <2> 	xor edx, edx
  8640                              <2> 	
  8641 00006AD7 BE[996C0000]        <2> 	mov esi, pacmsg
  8642 00006ADC 30E4                <2> 	xor ah, ah
  8643 00006ADE B010                <2> 	mov al, 00010000b
  8644 00006AE0 31DB                <2> 	xor ebx, ebx
  8645 00006AE2 66B99000            <2> 	mov cx, 144
  8646 00006AE6 66BA0400            <2> 	mov dx, 4
  8647 00006AEA E872040000          <2> 	call showstring
  8648                              <2> 	
  8649 00006AEF BE[D76C0000]        <2> 	mov esi, interneticon
  8650 00006AF4 30E4                <2> 	xor ah, ah
  8651 00006AF6 B010                <2> 	mov al, 00010000b
  8652 00006AF8 BB[C26B0000]        <2> 	mov ebx, noie
  8653 00006AFD 66B91800            <2> 	mov cx, 24
  8654 00006B01 66BA0400            <2> 	mov dx, 4
  8655 00006B05 E89FFCFFFF          <2> 	call showicon
  8656                              <2> 	
  8657 00006B0A BE[596D0000]        <2> 	mov esi, wordicon
  8658 00006B0F 30E4                <2> 	xor ah, ah
  8659 00006B11 B010                <2> 	mov al, 00010000b
  8660 00006B13 31DB                <2> 	xor ebx, ebx
  8661 00006B15 66B91800            <2> 	mov cx, 24
  8662 00006B19 66BA3000            <2> 	mov dx, 48
  8663 00006B1D E887FCFFFF          <2> 	call showicon
  8664                              <2> 	
  8665 00006B22 BE[DB6D0000]        <2> 	mov esi, pacmanpellet
  8666 00006B27 30E4                <2> 	xor ah, ah
  8667 00006B29 B010                <2> 	mov al, 00010000b
  8668 00006B2B 31DB                <2> 	xor ebx, ebx
  8669 00006B2D 66B94000            <2> 	mov cx, 64
  8670 00006B31 66BA0400            <2> 	mov dx, 4
  8671 00006B35 E86FFCFFFF          <2> 	call showicon
  8672                              <2> 	
  8673 00006B3A BE[DF6E0000]        <2> 	mov esi, pacman
  8674 00006B3F 30E4                <2> 	xor ah, ah
  8675 00006B41 B010                <2> 	mov al, 00010000b
  8676 00006B43 BB[AB6B0000]        <2> 	mov ebx, pacmannomnom
  8677 00006B48 66B94000            <2> 	mov cx, 64
  8678 00006B4C 66BA3000            <2> 	mov dx, 48
  8679 00006B50 E854FCFFFF          <2> 	call showicon
  8680                              <2> 	
  8681 00006B55 BE[5D6E0000]        <2> 	mov esi, ghostie
  8682 00006B5A 30E4                <2> 	xor ah, ah
  8683 00006B5C B010                <2> 	mov al, 00010000b
  8684 00006B5E BB[946B0000]        <2> 	mov ebx, boo
  8685 00006B63 66B96C00            <2> 	mov cx, 108
  8686 00006B67 66BA0400            <2> 	mov dx, 4
  8687 00006B6B E839FCFFFF          <2> 	call showicon
  8688                              <2> 	
  8689 00006B70 BE[7B6C0000]        <2> 	mov esi, start
  8690 00006B75 668B0D[A2540000]    <2> 	mov cx, [resolutiony]
  8691 00006B7C 6681E91000          <2> 	sub cx, 16
  8692 00006B81 66BA0200            <2> 	mov dx, 2
  8693 00006B85 30E4                <2> 	xor ah, ah
  8694 00006B87 B010                <2> 	mov al, 00010000b
  8695 00006B89 BB[376C0000]        <2> 	mov ebx, winblows
  8696 00006B8E E8CE030000          <2> 	call showstring
  8697                              <2> %ifdef gui.time	
  8698                              <2> 	call guitime	;load time into timeshow/dateshow and show it
  8699                              <2> %endif
  8700 00006B93 C3                  <2> 	ret
  8701                              <2> 
  8702                              <2> 	boo:
  8703 00006B94 BE[946C0000]        <2> 		mov esi, boomsg
  8704 00006B99 66BA6400            <2> 		mov dx, 100
  8705 00006B9D 66B94001            <2> 		mov cx, 320
  8706 00006BA1 31DB                <2> 		xor ebx, ebx
  8707 00006BA3 6631C0              <2> 		xor ax, ax
  8708 00006BA6 E9B6030000          <2> 		jmp showstring
  8709                              <2> 
  8710                              <2> 	pacmannomnom:
  8711 00006BAB BE[B26C0000]        <2> 		mov esi, pacnom
  8712 00006BB0 66BA8200            <2> 		mov dx, 130
  8713 00006BB4 66B93C00            <2> 		mov cx, 60
  8714 00006BB8 31DB                <2> 		xor ebx, ebx
  8715 00006BBA 6631C0              <2> 		xor ax, ax
  8716 00006BBD E99F030000          <2> 		jmp showstring	
  8717                              <2> 	
  8718                              <2> 	noie:
  8719 00006BC2 66C705[C16C0000]80- <2> 		mov word [termwindow], 640
  8720 00006BCA 02                  <2>
  8721 00006BCB 66C705[C36C0000]E0- <2> 		mov word [termwindow + 2], 480	;the previous lines of code make a large terminal window that is 4 characters smaller than the screen
  8722 00006BD3 01                  <2>
  8723 00006BD4 BE[C16C0000]        <2> 		mov esi, termwindow
  8724 00006BD9 66BA1000            <2> 		mov dx, 16
  8725 00006BDD 66B91000            <2> 		mov cx, 16
  8726 00006BE1 31DB                <2> 		xor ebx, ebx
  8727 00006BE3 6631C0              <2> 		xor ax, ax
  8728 00006BE6 E8DF050000          <2> 		call showwindow
  8729 00006BEB E926BCFFFF          <2> 		jmp os
  8730                              <2> 
  8731                              <2> 	gotomenuboot:
  8732 00006BF0 31D2                <2> 		xor edx, edx
  8733 00006BF2 31C9                <2> 		xor ecx, ecx
  8734 00006BF4 668B15[A0540000]    <2> 		mov dx, [resolutionx]
  8735 00006BFB 668B0D[A2540000]    <2> 		mov cx, [resolutiony]
  8736 00006C02 66C1E904            <2> 		shr cx, 4
  8737 00006C06 6681E90100          <2> 		sub cx, 1
  8738 00006C0B 66C1E104            <2> 		shl cx, 4
  8739 00006C0F 668915[C16C0000]    <2> 		mov [termwindow], dx
  8740 00006C16 66890D[C36C0000]    <2> 		mov [termwindow + 2], cx	;the previous lines of code make a large terminal window that is fullscreen
  8741 00006C1D BE[C16C0000]        <2> 		mov esi, termwindow
  8742 00006C22 6631D2              <2> 		xor dx, dx
  8743 00006C25 6631C9              <2> 		xor cx, cx
  8744 00006C28 31DB                <2> 		xor ebx, ebx
  8745 00006C2A 6631C0              <2> 		xor ax, ax
  8746 00006C2D E898050000          <2> 		call showwindow
  8747 00006C32 E9DFBBFFFF          <2> 		jmp os
  8748                              <2> 
  8749                              <2> 	winblows:
  8750 00006C37 BE[8A6C0000]        <2> 		mov esi, turnoffmsg
  8751 00006C3C BB[02500000]        <2> 		mov ebx, turnoff
  8752 00006C41 668B0D[A2540000]    <2> 		mov cx, [resolutiony]
  8753 00006C48 6681E92000          <2> 		sub cx, 32
  8754 00006C4D 6631D2              <2> 		xor dx, dx
  8755 00006C50 30E4                <2> 		xor ah, ah
  8756 00006C52 B010                <2> 		mov al, 00010000b
  8757 00006C54 E808030000          <2> 		call showstring
  8758 00006C59 BE[816C0000]        <2> 		mov esi, gotomenu
  8759 00006C5E 668B0D[A2540000]    <2> 		mov cx, [resolutiony]
  8760 00006C65 6681E93000          <2> 		sub cx, 48
  8761 00006C6A 6631D2              <2> 		xor dx, dx
  8762 00006C6D 30E4                <2> 		xor ah, ah
  8763 00006C6F B010                <2> 		mov al, 00010000b
  8764 00006C71 BB[F06B0000]        <2> 		mov ebx, gotomenuboot
  8765 00006C76 E9E6020000          <2> 		jmp showstring
  8766                              <2> 		
  8767                              <2> 
  8768 00006C7B 737461727400        <2> 	start	db "start",0
  8769 00006C81 536F6C6C65724F5300  <2> 	gotomenu db "SollerOS",0
  8770 00006C8A 506F776572204F6666- <2> 	turnoffmsg db "Power Off",0
  8771 00006C93 00                  <2>
  8772 00006C94 426F6F2100          <2> 	boomsg db "Boo!",0
  8773 00006C99 5061636D616E207761- <2> 	pacmsg	db "Pacman was easy to draw.",0
  8774 00006CA2 73206561737920746F- <2>
  8775 00006CAB 20647261772E00      <2>
  8776 00006CB2 4F6D206E6F6D206E6F- <2> 	pacnom  db "Om nom nom nom",0
  8777 00006CBB 6D206E6F6D00        <2>
  8778                              <2> 
  8779 00006CC1 20035802            <2> 	termwindow:	dw 800,600	;window size
  8780 00006CC5 FFFF0000            <2> 				dw 0xFFFF,0	;colors(FG,BG)
  8781 00006CC9 [C0D00000]-         <2> 				dd videobuf,videobuf2 ;location of buffers
  8782 00006CCD [643B0100]          <2>
  8783 00006CD1 534855536800        <2> 	termmsg:	db "SHUSh",0	;;window title
  8784                              <2> 	
  8785 00006CD1 <incbin>            <2> interneticon: 	incbin 'source/gui/icons/internet'
  8786 00006CD1 <incbin>            <2> wordicon: 	incbin 'source/gui/icons/word'
  8787 00006CD1 <incbin>            <2> pacmanpellet: incbin 'source/gui/icons/pellet'
  8788 00006CD1 <incbin>            <2> ghostie	incbin 'source/gui/icons/ghostie'
  8789 00006CD1 <incbin>            <2> pacman	incbin 'source/gui/icons/pacman'
  8790                              <2> 
  8791                              <2> %ifdef gui.time
  8792                              <2> guitime:
  8793                              <2> 		call time	;get rtc in timeshow & dateshow
  8794                              <2> 		xor ebx, ebx
  8795                              <2> 		mov dx, [resolutionx2]
  8796                              <2> 		xor cx, cx
  8797                              <2> 		sub dx, 304
  8798                              <2> 		mov esi, dateshow
  8799                              <2> 		mov al, 00010001b
  8800                              <2> 		call showstring
  8801                              <2> 		mov esi, timeshow
  8802                              <2> 		xor ebx, ebx
  8803                              <2> 		mov al, 00010001b
  8804                              <2> 		call showstring
  8805                              <2> 		ret
  8806                              <2> %endif
  8807                              <1> %include "source/gui/text.asm"
  8808                              <2> 	showstring:
  8809 00006F61 A2[19770000]        <2> 		mov [mouseselecton], al
  8810 00006F66 8025[19770000]01    <2> 		and byte [mouseselecton], 1
  8811 00006F6D B402                <2> 		mov ah, 2
  8812 00006F6F E81C0D0000          <2> 		call graphicsadd
  8813                              <2> 	showstring2:
  8814 00006F74 30E4                <2> 		xor ah, ah
  8815 00006F76 8A06                <2> 		mov al, [esi]
  8816 00006F78 3C00                <2> 		cmp al, 0
  8817 00006F7A 741E                <2> 		je doneshowstring
  8818 00006F7C 46                  <2> 		inc esi
  8819 00006F7D 3CFF                <2> 		cmp al, 255
  8820 00006F7F 74F3                <2> 		je showstring2
  8821 00006F81 56                  <2> 		push esi
  8822 00006F82 668B1D[A26F0000]    <2> 		mov bx, [colorfont2]
  8823 00006F89 E825000000          <2> 		call showfontvesa
  8824 00006F8E 3C0A                <2> 		cmp al, 10
  8825 00006F90 7405                <2> 		je noproceedshst
  8826 00006F92 6681C20800          <2> 		add dx, 8
  8827                              <2> 	noproceedshst:
  8828 00006F97 5E                  <2> 		pop esi
  8829 00006F98 EBDA                <2> 		jmp showstring2
  8830                              <2> 	doneshowstring:
  8831 00006F9A C605[19770000]00    <2> 		mov byte [mouseselecton], 0
  8832 00006FA1 C3                  <2> 		ret
  8833                              <2> 
  8834 00006FA2 FFFF                <2> colorfont2 dw 0xFFFF
  8835 00006FA4 00                  <2> colorcache db 0
  8836                              <2> 
  8837 00006FA5 02                  <2> resolutionbytes db 2
  8838 00006FA6 0000                <2> posxvesa dw 0
  8839 00006FA8 0000                <2> posyvesa dw 0
  8840 00006FAA FFFF                <2> colorfont dw 0xFFFF
  8841                              <2> savefontvesa:		;;same rules as showfontvesa
  8842 00006FAC C605[18770000]01    <2> 	mov byte [savefonton], 1
  8843                              <2> showfontvesa:		;;position in (dx,cx), color in bx, char in al
  8844 00006FB3 3CFF                <2> 	cmp al, 255
  8845 00006FB5 7501                <2> 	jne nostopshowfont
  8846 00006FB7 C3                  <2> 	ret
  8847                              <2> nostopshowfont:
  8848 00006FB8 66890D[A86F0000]    <2> 	mov [posyvesa], cx
  8849 00006FBF 3C0A                <2> 	cmp al, 10
  8850 00006FC1 0F8424000000        <2> 	je near goodvesafontx
  8851 00006FC7 31C9                <2> 	xor ecx, ecx
  8852 00006FC9 668B0D[8E550000]    <2> 	mov cx, [resolutionx2]
  8853 00006FD0 6639CA              <2> 	cmp dx, cx
  8854 00006FD3 7616                <2> 	jbe goodvesafontx
  8855 00006FD5 6631D2              <2> 	xor dx, dx
  8856 00006FD8 668B0D[A86F0000]    <2> 	mov cx, [posyvesa]
  8857 00006FDF 6681C11000          <2> 	add cx, 16
  8858 00006FE4 66890D[A86F0000]    <2> 	mov [posyvesa], cx
  8859                              <2> goodvesafontx:
  8860 00006FEB 668B0D[A86F0000]    <2> 	mov cx, [posyvesa]
  8861 00006FF2 668915[A66F0000]    <2> 	mov [posxvesa], dx
  8862 00006FF9 8B3D[B6540000]      <2> 	mov edi, [physbaseptr]
  8863 00006FFF 66891D[AA6F0000]    <2> 	mov [colorfont], bx
  8864 00007006 31DB                <2> 	xor ebx, ebx
  8865 00007008 88C3                <2> 	mov bl, al
  8866 0000700A 31C0                <2> 	xor eax, eax
  8867 0000700C 88D8                <2> 	mov al, bl
  8868 0000700E 6689D3              <2> 	mov bx, dx
  8869 00007011 89DA                <2> 	mov edx, ebx
  8870 00007013 31DB                <2> 	xor ebx, ebx
  8871 00007015 6681F90000          <2> 	cmp cx, 0
  8872 0000701A 7414                <2> 	je vesaposloopdn
  8873 0000701C 668B1D[8E550000]    <2> 	mov bx, [resolutionx2]
  8874                              <2> vesaposloop:
  8875 00007023 52                  <2> 	push edx
  8876 00007024 50                  <2> 	push eax
  8877 00007025 31C0                <2> 	xor eax, eax
  8878 00007027 6689C8              <2> 	mov ax, cx
  8879 0000702A F7E3                <2> 	mul ebx
  8880 0000702C 01C7                <2> 	add edi, eax
  8881 0000702E 58                  <2> 	pop eax
  8882 0000702F 5A                  <2> 	pop edx
  8883                              <2> vesaposloopdn:
  8884 00007030 01D7                <2> 	add edi, edx
  8885 00007032 BE[2D8B0000]        <2> 	mov esi, fonts
  8886                              <2> findfontvesa:
  8887 00007037 30E4                <2> 	xor ah, ah
  8888 00007039 3C0A                <2> 	cmp al, 10
  8889 0000703B 0F84FE000000        <2> 	je near nwlinevesa
  8890 00007041 C1E004              <2> 	shl eax, 4
  8891 00007044 01C6                <2> 	add esi, eax
  8892 00007046 C1E804              <2> 	shr eax, 4
  8893 00007049 81FE[2D9B0000]      <2> 	cmp esi, fontend
  8894 0000704F 0F83B9000000        <2> 	jae near donefontvesa
  8895 00007055 4E                  <2> 	dec esi
  8896                              <2> foundfontvesa:
  8897 00007056 46                  <2> 	inc esi
  8898 00007057 803D[18770000]01    <2> 	cmp byte [savefonton], 1
  8899 0000705E 0F8401010000        <2> 	je near vesafontsaver
  8900 00007064 30C9                <2> 	xor cl, cl
  8901 00007066 8A06                <2> 	mov al, [esi]
  8902 00007068 668B15[8E550000]    <2> 	mov dx, [resolutionx2]
  8903 0000706F 662B15[A66F0000]    <2> 	sub dx, [posxvesa]
  8904 00007076 6681FA1000          <2> 	cmp dx, 16
  8905 0000707B 7708                <2> 	ja paintfontvesa
  8906 0000707D D0EA                <2> 	shr dl, 1
  8907 0000707F 8815[3E710000]      <2> 	mov [charwidth], dl
  8908                              <2> paintfontvesa:
  8909 00007085 B201                <2> 	mov dl, 1
  8910 00007087 20C2                <2> 	and dl, al
  8911 00007089 803D[17770000]01    <2> 	cmp byte [showcursorfonton], 1
  8912 00007090 0F8435000000        <2> 	je near nodelpaintedfont
  8913 00007096 803D[17770000]02    <2> 	cmp byte [showcursorfonton], 2
  8914 0000709D 0F8518000000        <2> 	jne near noswitchcursorfonton
  8915 000070A3 80FA00              <2> 	cmp dl, 0
  8916 000070A6 0F842E000000        <2> 	je near nopixelset
  8917 000070AC 668B1D[AA6F0000]    <2> 	mov bx, [colorfont]
  8918 000070B3 66891F              <2> 	mov [edi], bx
  8919 000070B6 E91F000000          <2> 	jmp nopixelset
  8920                              <2> noswitchcursorfonton:
  8921 000070BB 3215[19770000]      <2> 	xor dl, [mouseselecton]
  8922 000070C1 668B1D[E8690000]    <2> 	mov bx, [background]
  8923 000070C8 66891F              <2> 	mov [edi], bx
  8924                              <2> nodelpaintedfont:
  8925 000070CB 80FA00              <2> 	cmp dl, 0
  8926 000070CE 740A                <2> 	je nopixelset
  8927 000070D0 668B15[AA6F0000]    <2> 	mov dx, [colorfont]
  8928 000070D7 668917              <2> 	mov [edi], dx
  8929                              <2> nopixelset:
  8930 000070DA 81C702000000        <2> 	add edi, 2
  8931 000070E0 D0C0                <2> 	rol al, 1
  8932 000070E2 FEC1                <2> 	inc cl
  8933 000070E4 3A0D[3E710000]      <2> 	cmp cl, [charwidth]
  8934 000070EA 7299                <2> 	jb paintfontvesa
  8935 000070EC FEC5                <2> 	inc ch
  8936 000070EE 31D2                <2> 	xor edx, edx
  8937 000070F0 668B15[8E550000]    <2> 	mov dx, [resolutionx2]
  8938 000070F7 01D7                <2> 	add edi, edx
  8939 000070F9 31D2                <2> 	xor edx, edx
  8940 000070FB 8A15[3E710000]      <2> 	mov dl, [charwidth]
  8941 00007101 00D2                <2> 	add dl, dl
  8942 00007103 29D7                <2> 	sub edi, edx
  8943 00007105 80FD10              <2> 	cmp ch, 16
  8944 00007108 0F8248FFFFFF        <2> 	jb foundfontvesa
  8945                              <2> donefontvesa:
  8946 0000710E B208                <2> 	mov dl, 8
  8947 00007110 8815[3E710000]      <2> 	mov [charwidth], dl
  8948 00007116 668B15[A66F0000]    <2> 	mov dx, [posxvesa]
  8949 0000711D 8A1D[3E710000]      <2> 	mov bl, [charwidth]
  8950 00007123 30FF                <2> 	xor bh, bh
  8951 00007125 6601DA              <2> 	add dx, bx
  8952 00007128 668B1D[AA6F0000]    <2> 	mov bx, [colorfont]
  8953 0000712F 668B0D[A86F0000]    <2> 	mov cx, [posyvesa]
  8954 00007136 C605[18770000]00    <2> 	mov byte [savefonton], 0
  8955 0000713D C3                  <2> 	ret
  8956 0000713E 08                  <2> charwidth db 8
  8957                              <2> nwlinevesa:
  8958 0000713F 668B15[A66F0000]    <2> 	mov dx, [posxvesa]
  8959 00007146 6631D2              <2> 	xor dx, dx
  8960 00007149 668915[A66F0000]    <2> 	mov [posxvesa], dx
  8961 00007150 668B0D[A86F0000]    <2> 	mov cx, [posyvesa]
  8962 00007157 6681C11000          <2> 	add cx, 16
  8963 0000715C 66890D[A86F0000]    <2> 	mov [posyvesa], cx
  8964 00007163 EBA9                <2> 	jmp donefontvesa
  8965                              <2> vesafontsaver:
  8966 00007165 30C0                <2> 	xor al, al
  8967 00007167 30C9                <2> 	xor cl, cl
  8968                              <2> vesafontsaver2:
  8969 00007169 668B17              <2> 	mov dx, [edi]
  8970 0000716C 663B15[AA6F0000]    <2> 	cmp dx, [colorfont]
  8971 00007173 742F                <2> 	je colorfontmatch
  8972                              <2> donecolormatch:
  8973 00007175 81C702000000        <2> 	add edi, 2
  8974 0000717B D0C0                <2> 	rol al, 1
  8975 0000717D FEC1                <2> 	inc cl
  8976 0000717F 80F908              <2> 	cmp cl, 8
  8977 00007182 72E5                <2> 	jb vesafontsaver2
  8978 00007184 8806                <2> 	mov [esi], al
  8979 00007186 46                  <2> 	inc esi
  8980 00007187 FEC5                <2> 	inc ch
  8981 00007189 31D2                <2> 	xor edx, edx
  8982 0000718B 668B15[8E550000]    <2> 	mov dx, [resolutionx2]
  8983 00007192 01D7                <2> 	add edi, edx
  8984 00007194 81EF10000000        <2> 	sub edi, 16
  8985 0000719A 80FD10              <2> 	cmp ch, 16
  8986 0000719D 72C6                <2> 	jb vesafontsaver
  8987 0000719F E96AFFFFFF          <2> 	jmp donefontvesa
  8988                              <2> colorfontmatch:
  8989 000071A4 0401                <2> 	add al, 1
  8990 000071A6 EBCD                <2> 	jmp donecolormatch
  8991                              <1> %include "source/gui/window.asm"
  8992 000071A8 0000                <2> winvcopystx dw 0
  8993 000071AA 0000                <2> winvcopysty dw 0
  8994 000071AC 0000                <2> winvcopydx dw 0
  8995 000071AE 0000                <2> winvcopycx dw 0
  8996 000071B0 FFFF0000            <2> windowcolor dw 0xFFFF,0
  8997 000071B4 00000000            <2> windowbufloc: dd 0
  8998 000071B8 00000000            <2> windowvideobuf dd 0
  8999 000071BC 00000000            <2> windowvideobuf2 dd 0
  9000 000071C0 00000000            <2> windowinfobuf dd 0
  9001 000071C4 0000                <2> termcol dw 0
  9002 000071C6 00000000            <2> wincopyendpos dd 0
  9003                              <2> 
  9004                              <2> 	showwindow:	;windowstuff in esi, position in (dx, cx), nothing in ax, code in ebx
  9005 000071CA C605[64220000]01    <2> 		mov byte [termguion], 1
  9006 000071D1 6681C11000          <2> 		add cx, 16
  9007 000071D6 668915[A8710000]    <2> 		mov [winvcopystx], dx
  9008 000071DD 66890D[AA710000]    <2> 		mov [winvcopysty], cx
  9009 000071E4 8935[C0710000]      <2> 		mov [windowinfobuf], esi
  9010 000071EA 668B16              <2> 		mov dx, [esi]
  9011 000071ED 668B4E02            <2> 		mov cx, [esi + 2]
  9012 000071F1 31C0                <2> 		xor eax, eax
  9013 000071F3 31DB                <2> 		xor ebx, ebx
  9014 000071F5 6689D0              <2> 		mov ax, dx
  9015 000071F8 6689CB              <2> 		mov bx, cx
  9016 000071FB 66C1E803            <2> 		shr ax, 3
  9017 000071FF 66C1EB04            <2> 		shr bx, 4
  9018 00007203 66A3[C4710000]      <2> 		mov [termcol], ax
  9019 00007209 A2[4C240000]        <2> 		mov [charxy], al
  9020 0000720E 881D[4D240000]      <2> 		mov [charxy + 1], bl
  9021 00007214 8B7E04              <2> 		mov edi, [esi + 4]
  9022 00007217 893D[B0710000]      <2> 		mov [windowcolor], edi
  9023 0000721D 8B7E0C              <2> 		mov edi, [esi + 12]
  9024 00007220 893D[BC710000]      <2> 		mov [windowvideobuf2], edi
  9025 00007226 8B7E08              <2> 		mov edi, [esi + 8]
  9026 00007229 893D[B8710000]      <2> 		mov [windowvideobuf], edi
  9027 0000722F 81FB00000000        <2> 		cmp ebx, 0
  9028 00007235 0F84BB040000        <2> 		je near donewincopynow	;AAAAAAAAA!!!!!
  9029                              <2> 	findendposwin:
  9030 0000723B 01C7                <2> 		add edi, eax
  9031 0000723D 01C7                <2> 		add edi, eax
  9032 0000723F 4B                  <2> 		dec ebx
  9033 00007240 81FB00000000        <2> 		cmp ebx, 0
  9034 00007246 77F3                <2> 		ja findendposwin
  9035 00007248 893D[C6710000]      <2> 		mov [wincopyendpos], edi
  9036 0000724E 31FF                <2> 		xor edi, edi
  9037 00007250 6631C0              <2> 		xor ax, ax
  9038 00007253 6631DB              <2> 		xor bx, bx
  9039 00007256 6601D2              <2> 		add dx, dx
  9040 00007259 668915[AC710000]    <2> 		mov [winvcopydx], dx
  9041 00007260 66890D[AE710000]    <2> 		mov [winvcopycx], cx
  9042 00007267 668B0D[AA710000]    <2> 		mov cx, [winvcopysty]
  9043 0000726E 6681E91000          <2> 		sub cx, 16
  9044 00007273 668B15[A8710000]    <2> 		mov dx, [winvcopystx]
  9045 0000727A C605[65220000]00    <2> 		mov byte [termcopyon], 0
  9046 00007281 B403                <2> 		mov ah, 3
  9047 00007283 E8080A0000          <2> 		call graphicsadd
  9048                              <2> 	showwindow2:
  9049 00007288 6681C11000          <2> 		add cx, 16
  9050 0000728D 668915[A8710000]    <2> 		mov [winvcopystx], dx
  9051 00007294 66890D[AA710000]    <2> 		mov [winvcopysty], cx
  9052 0000729B 668B16              <2> 		mov dx, [esi]
  9053 0000729E 668B4E02            <2> 		mov cx, [esi + 2]
  9054 000072A2 6601D2              <2> 		add dx, dx
  9055 000072A5 668915[AC710000]    <2> 		mov [winvcopydx], dx
  9056 000072AC 66890D[AE710000]    <2> 		mov [winvcopycx], cx
  9057 000072B3 E818000000          <2> 		call reloadwindowtitle
  9058 000072B8 803D[777C0000]01    <2> 		cmp byte [windrag], 1
  9059 000072BF 0F8340040000        <2> 		jae near forgetresetstuff
  9060 000072C5 8B3D[B4710000]      <2> 		mov edi, [windowbufloc]
  9061 000072CB E968020000          <2> 		jmp windowvideocopyset
  9062                              <2> 		
  9063                              <2> 	reloadwindowtitle:
  9064 000072D0 8B3D[B4710000]      <2> 		mov edi, [windowbufloc]
  9065 000072D6 31D2                <2> 		xor edx, edx
  9066 000072D8 668B15[8E550000]    <2> 		mov dx, [resolutionx2]
  9067 000072DF C1E204              <2> 		shl edx, 4
  9068 000072E2 29D7                <2> 		sub edi, edx
  9069 000072E4 803D[65220000]00    <2> 		cmp byte [termcopyon], 0
  9070 000072EB 7532                <2> 		jne nocleartitlebarpos
  9071 000072ED 8B3D[B6540000]      <2> 		mov edi, [physbaseptr]
  9072 000072F3 31D2                <2> 		xor edx, edx
  9073 000072F5 668B15[A8710000]    <2> 		mov dx, [winvcopystx]
  9074 000072FC 01D7                <2> 		add edi, edx
  9075 000072FE 31C9                <2> 		xor ecx, ecx
  9076 00007300 668B0D[AA710000]    <2> 		mov cx, [winvcopysty]
  9077 00007307 6681E91000          <2> 		sub cx, 16
  9078 0000730C 6681F90000          <2> 		cmp cx, 0
  9079 00007311 740C                <2> 		je nocleartitlebarpos
  9080                              <2> 	cleartitlebarpos:
  9081 00007313 31C0                <2> 		xor eax, eax
  9082 00007315 66A1[8E550000]      <2> 		mov ax, [resolutionx2]
  9083 0000731B F7E1                <2> 		mul ecx
  9084 0000731D 01C7                <2> 		add edi, eax
  9085                              <2> 	nocleartitlebarpos:
  9086 0000731F 66B91000            <2> 		mov cx, 16
  9087 00007323 668B15[AC710000]    <2> 		mov dx, [winvcopydx]
  9088 0000732A 6681F90000          <2> 		cmp cx, 0
  9089 0000732F 0F8448000000        <2> 		je near canceltitlebarput
  9090 00007335 6681FA0000          <2> 		cmp dx, 0
  9091 0000733A 0F843D000000        <2> 		je near canceltitlebarput
  9092                              <2> 	titlebarput:
  9093 00007340 66A1[B0710000]      <2> 		mov ax, [windowcolor]
  9094 00007346 668907              <2> 		mov [edi], ax
  9095 00007349 6681EA0200          <2> 		sub dx, 2
  9096 0000734E 81C702000000        <2> 		add edi, 2
  9097 00007354 6681FA0000          <2> 		cmp dx, 0
  9098 00007359 75E5                <2> 		jne titlebarput
  9099 0000735B 31D2                <2> 		xor edx, edx
  9100 0000735D 668B15[8E550000]    <2> 		mov dx, [resolutionx2]
  9101 00007364 6649                <2> 		dec cx
  9102 00007366 662B15[AC710000]    <2> 		sub dx, [winvcopydx]
  9103 0000736D 01D7                <2> 		add edi, edx
  9104 0000736F 668B15[AC710000]    <2> 		mov dx, [winvcopydx]
  9105 00007376 6681F90000          <2> 		cmp cx, 0
  9106 0000737B 75C3                <2> 		jne titlebarput
  9107                              <2> 	canceltitlebarput:
  9108 0000737D 893D[B4710000]      <2> 		mov [windowbufloc], edi
  9109 00007383 803D[65220000]02    <2> 		cmp byte [termcopyon], 2
  9110 0000738A 0F8416010000        <2> 		je near winvcpst
  9111 00007390 668B1D[E8690000]    <2> 		mov bx, [background]
  9112 00007397 6653                <2> 		push bx
  9113                              <2> 		;mov bx, 1111111111111111b
  9114 00007399 6631DB              <2> 		xor bx, bx
  9115 0000739C 66891D[E8690000]    <2> 		mov [background], bx
  9116 000073A3 6631C0              <2> 		xor ax, ax
  9117 000073A6 81C610000000        <2> 		add esi, 16
  9118 000073AC 668B15[A8710000]    <2> 		mov dx, [winvcopystx]
  9119 000073B3 668B0D[AA710000]    <2> 		mov cx, [winvcopysty]
  9120 000073BA 6681E91000          <2> 		sub cx, 16
  9121 000073BF 668B1D[B0710000]    <2> 		mov bx, [windowcolor]
  9122 000073C6 C605[19770000]01    <2> 		mov byte [mouseselecton], 1
  9123 000073CD E8A2FBFFFF          <2> 		call showstring2	;Show window title
  9124 000073D2 8B35[B2290000]      <2> 		mov esi, [usercache]
  9125 000073D8 6681C21000          <2> 		add dx, 16
  9126 000073DD C605[19770000]01    <2> 		mov byte [mouseselecton], 1
  9127 000073E4 E88BFBFFFF          <2> 		call showstring2	;Show user name
  9128 000073E9 BE[F88A0000]        <2> 		mov esi, computer
  9129 000073EE C605[19770000]01    <2> 		mov byte [mouseselecton], 1
  9130 000073F5 E87AFBFFFF          <2> 		call showstring2	;Show computer name
  9131 000073FA B058                <2> 		mov al, "X"
  9132 000073FC 30E4                <2> 		xor ah, ah
  9133 000073FE 66BB00F8            <2> 		mov bx, 1111100000000000b
  9134 00007402 668B15[A8710000]    <2> 		mov dx, [winvcopystx]
  9135 00007409 668B0D[AA710000]    <2> 		mov cx, [winvcopysty]
  9136 00007410 6681E91000          <2> 		sub cx, 16
  9137 00007415 6681EA1000          <2> 		sub dx, 16
  9138 0000741A 660315[AC710000]    <2> 		add dx, [winvcopydx]
  9139 00007421 C605[19770000]01    <2> 		mov byte [mouseselecton], 1
  9140 00007428 663B15[8E550000]    <2> 		cmp dx, [resolutionx2]
  9141 0000742F 7305                <2> 		jae .nox
  9142 00007431 E87DFBFFFF          <2> 		call showfontvesa
  9143                              <2> .nox:
  9144 00007436 668B1D[E8690000]    <2> 		mov bx, [background]
  9145 0000743D 6681EA1800          <2> 		sub dx, 24
  9146 00007442 B02B                <2> 		mov al, "+"
  9147 00007444 66BBE007            <2> 		mov bx, 0000011111100000b
  9148 00007448 C605[19770000]01    <2> 		mov byte [mouseselecton], 1
  9149 0000744F 663B15[8E550000]    <2> 		cmp dx, [resolutionx2]
  9150 00007456 7305                <2> 		jae .noplus
  9151 00007458 E856FBFFFF          <2> 		call showfontvesa
  9152                              <2> .noplus:
  9153 0000745D 6681EA1800          <2> 		sub dx, 24
  9154 00007462 B02D                <2> 		mov al, "-"
  9155 00007464 66BBE0FF            <2> 		mov bx, 1111111111100000b
  9156 00007468 C605[19770000]01    <2> 		mov byte [mouseselecton], 1
  9157 0000746F 663B15[8E550000]    <2> 		cmp dx, [resolutionx2]
  9158 00007476 7305                <2> 		jae .nominus
  9159 00007478 E836FBFFFF          <2> 		call showfontvesa
  9160                              <2> .nominus:
  9161 0000747D 6681EA1800          <2> 		sub dx, 24
  9162 00007482 B03F                <2> 		mov al, "?"
  9163 00007484 66BB1F00            <2> 		mov bx, 0000000000011111b
  9164 00007488 C605[19770000]01    <2> 		mov byte [mouseselecton], 1
  9165 0000748F 663B15[8E550000]    <2> 		cmp dx, [resolutionx2]
  9166 00007496 7305                <2> 		jae .noquestion
  9167 00007498 E816FBFFFF          <2> 		call showfontvesa
  9168                              <2> .noquestion:
  9169 0000749D 665B                <2> 		pop bx
  9170 0000749F 66891D[E8690000]    <2> 		mov [background], bx
  9171                              <2> 	winvcpst:
  9172 000074A6 C3                  <2> 		ret
  9173                              <2> 
  9174                              <2> 	windowvideocopy:
  9175 000074A7 8B35[C0710000]      <2> 		mov esi, [windowinfobuf]
  9176 000074AD 668B16              <2> 		mov dx, [esi]
  9177 000074B0 668B4E02            <2> 		mov cx, [esi + 2]
  9178 000074B4 8B7E04              <2> 		mov edi, [esi + 4]
  9179 000074B7 893D[B0710000]      <2> 		mov [windowcolor], edi
  9180 000074BD 8B7E08              <2> 		mov edi, [esi + 8]
  9181 000074C0 8B5E0C              <2> 		mov ebx, [esi + 12]
  9182 000074C3 893D[B8710000]      <2> 		mov [windowvideobuf], edi
  9183 000074C9 891D[BC710000]      <2> 		mov [windowvideobuf2], ebx
  9184 000074CF 31C0                <2> 		xor eax, eax
  9185 000074D1 31DB                <2> 		xor ebx, ebx
  9186 000074D3 6689D0              <2> 		mov ax, dx
  9187 000074D6 6689CB              <2> 		mov bx, cx
  9188 000074D9 66C1E803            <2> 		shr ax, 3
  9189 000074DD 66C1EB04            <2> 		shr bx, 4
  9190 000074E1 66A3[C4710000]      <2> 		mov [termcol], ax
  9191 000074E7 A2[4C240000]        <2> 		mov [charxy], al
  9192 000074EC 881D[4D240000]      <2> 		mov [charxy + 1], bl
  9193 000074F2 8B3D[B4710000]      <2> 		mov edi, [windowbufloc]
  9194 000074F8 3B3D[B6540000]      <2> 		cmp edi, [physbaseptr]
  9195 000074FE 0F8334000000        <2> 		jae near windowvideocopyset
  9196 00007504 31C9                <2> 		xor ecx, ecx
  9197 00007506 31D2                <2> 		xor edx, edx
  9198 00007508 668B15[A8710000]    <2> 		mov dx, [winvcopystx]
  9199 0000750F 668B0D[AA710000]    <2> 		mov cx, [winvcopysty]
  9200 00007516 8B3D[B6540000]      <2> 		mov edi, [physbaseptr]
  9201 0000751C 01D7                <2> 		add edi, edx
  9202 0000751E 81F900000000        <2> 		cmp ecx, 0
  9203 00007524 7412                <2> 		je windowvideocopyset
  9204                              <2> 	yrescopylp:
  9205 00007526 31C0                <2> 		xor eax, eax
  9206 00007528 66A1[8E550000]      <2> 		mov ax, [resolutionx2]
  9207 0000752E F7E1                <2> 		mul ecx
  9208 00007530 01C7                <2> 		add edi, eax
  9209 00007532 893D[B4710000]      <2> 		mov [windowbufloc], edi
  9210                              <2> 	windowvideocopyset:
  9211 00007538 6631C9              <2> 		xor cx, cx
  9212 0000753B 6649                <2> 		dec cx
  9213 0000753D 66890D[0D770000]    <2> 		mov [charposline], cx
  9214 00007544 89FE                <2> 		mov esi, edi
  9215 00007546 81EE10000000        <2> 		sub esi, 16
  9216 0000754C 31D2                <2> 		xor edx, edx
  9217 0000754E 668B15[8E550000]    <2> 		mov dx, [resolutionx2]
  9218 00007555 C1E204              <2> 		shl edx, 4
  9219 00007558 01D6                <2> 		add esi, edx
  9220 0000755A 8B3D[B8710000]      <2> 		mov edi, [windowvideobuf]
  9221 00007560 81EF02000000        <2> 		sub edi, 2
  9222 00007566 893D[0F770000]      <2> 		mov [charposvbuf], edi
  9223 0000756C E97A000000          <2> 		jmp nextcharwin
  9224                              <2> 	win.write:	;adjusted this to use alpha
  9225                              <2> 				;5R, 6G, 5B
  9226                              <2> %ifdef gui.alphablending
  9227                              <2> 		push esi
  9228                              <2> 		push bx
  9229                              <2> 		push cx
  9230                              <2> 		push dx
  9231                              <2> %ifdef gui.background
  9232                              <2> 		mov esi, edi
  9233                              <2> 		sub esi, [physbaseptr]
  9234                              <2> 		add esi, [backgroundimage]
  9235                              <2> 		cmp dword [backgroundimage], 0
  9236                              <2> 		jne .red
  9237                              <2> %endif
  9238                              <2> 		mov esi, background
  9239                              <2> 	.red:
  9240                              <2> 		mov cx, [esi]
  9241                              <2> 		shr cx, 11
  9242                              <2> 		mov bx, ax
  9243                              <2> 		shr bx, 11
  9244                              <2> 		add cx, bx
  9245                              <2> 		add cx, bx
  9246                              <2> 		add cx, bx
  9247                              <2> 		shr cx, 2
  9248                              <2> 		shl cx, 11
  9249                              <2> 		mov dx, cx
  9250                              <2> 	.green:
  9251                              <2> 		mov cx, [esi]
  9252                              <2> 		shl cx, 5
  9253                              <2> 		shr cx, 10
  9254                              <2> 		mov bx, ax
  9255                              <2> 		shl bx, 5
  9256                              <2> 		shr bx, 10
  9257                              <2> 		add cx, bx
  9258                              <2> 		add cx, bx
  9259                              <2> 		add cx, bx
  9260                              <2> 		shr cx, 2
  9261                              <2> 		shl cx, 5
  9262                              <2> 		add dx, cx
  9263                              <2> 	.blue:
  9264                              <2> 		mov cx, [esi]
  9265                              <2> 		shl cx, 11
  9266                              <2> 		shr cx, 11
  9267                              <2> 		mov bx, ax
  9268                              <2> 		shl bx, 11
  9269                              <2> 		shr bx, 11
  9270                              <2> 		add cx, bx
  9271                              <2> 		add cx, bx
  9272                              <2> 		add cx, bx
  9273                              <2> 		shr cx, 2
  9274                              <2> 		add dx, cx
  9275                              <2> 		mov [edi], dx
  9276                              <2> 		pop dx
  9277                              <2> 		pop cx
  9278                              <2> 		pop bx
  9279                              <2> 		pop esi
  9280                              <2> %else
  9281 00007571 668907              <2> 		mov [edi], ax
  9282                              <2> %endif
  9283 00007574 C3                  <2> 		ret
  9284                              <2> 	copywindow:
  9285 00007575 B201                <2> 		mov dl, 1
  9286 00007577 D0C6                <2> 		rol dh, 1
  9287 00007579 20F2                <2> 		and dl, dh
  9288 0000757B 803D[A46F0000]10    <2> 		cmp byte [colorcache], 0x10
  9289 00007582 7320                <2> 		jae switchwincolors
  9290 00007584 66A1[B2710000]      <2> 		mov ax, [windowcolor + 2]
  9291 0000758A E8E2FFFFFF          <2> 		call win.write
  9292 0000758F 80FA00              <2> 		cmp dl, 0
  9293 00007592 742B                <2> 		je nowritewin
  9294 00007594 66A1[B0710000]      <2> 		mov ax, [windowcolor]
  9295 0000759A E8D2FFFFFF          <2> 		call win.write
  9296 0000759F E91B000000          <2> 		jmp nowritewin
  9297                              <2> 	switchwincolors:
  9298 000075A4 66A1[B0710000]      <2> 		mov ax, [windowcolor]
  9299 000075AA E8C2FFFFFF          <2> 		call win.write
  9300 000075AF 80FA00              <2> 		cmp dl, 0
  9301 000075B2 740B                <2> 		je nowritewin
  9302 000075B4 66A1[B2710000]      <2> 		mov ax, [windowcolor + 2]
  9303 000075BA E8B2FFFFFF          <2> 		call win.write
  9304                              <2> 	nowritewin:
  9305 000075BF 81C702000000        <2> 		add edi, 2
  9306 000075C5 FEC1                <2> 		inc cl
  9307 000075C7 80F908              <2> 		cmp cl, 8
  9308 000075CA 75A9                <2> 		jne copywindow
  9309 000075CC 6643                <2> 		inc bx
  9310 000075CE 30C9                <2> 		xor cl, cl
  9311 000075D0 31D2                <2> 		xor edx, edx
  9312 000075D2 668B15[8E550000]    <2> 		mov dx, [resolutionx2]
  9313 000075D9 01D6                <2> 		add esi, edx
  9314 000075DB 89F7                <2> 		mov edi, esi
  9315 000075DD 678AB7[2D8B]        <2> 		mov dh, [fonts + bx]
  9316 000075E2 D0CE                <2> 		ror dh, 1
  9317 000075E4 FEC5                <2> 		inc ch
  9318 000075E6 80FD10              <2> 		cmp ch, 16
  9319 000075E9 758A                <2> 		jne copywindow
  9320                              <2> 	nextcharwin:
  9321 000075EB 6631C9              <2> 		xor cx, cx
  9322 000075EE 8B3D[0F770000]      <2> 		mov edi, [charposvbuf]
  9323 000075F4 81C702000000        <2> 		add edi, 2
  9324 000075FA 3B3D[C6710000]      <2> 		cmp edi, [wincopyendpos]
  9325 00007600 0F83F0000000        <2> 		jae near donewincopynow
  9326 00007606 8A7F01              <2> 		mov bh, [edi + 1]
  9327 00007609 80FF00              <2> 		cmp bh, 0
  9328 0000760C 7505                <2> 		jne nofixcolorwin
  9329 0000760E B707                <2> 		mov bh, 7
  9330 00007610 887F01              <2> 		mov [edi + 1], bh
  9331                              <2> 	nofixcolorwin:
  9332 00007613 883D[A46F0000]      <2> 		mov [colorcache], bh
  9333 00007619 8A1F                <2> 		mov bl, [edi]
  9334 0000761B 893D[0F770000]      <2> 		mov [charposvbuf], edi
  9335 00007621 813D[BC710000]0000- <2> 		cmp dword [windowvideobuf2], 0
  9336 00007629 0000                <2>
  9337 0000762B 7459                <2> 		je noskipcharcopy
  9338 0000762D 2B3D[B8710000]      <2> 		sub edi, [windowvideobuf]
  9339 00007633 033D[BC710000]      <2> 		add edi, [windowvideobuf2]
  9340 00007639 8A6701              <2> 		mov ah, [edi + 1]
  9341 0000763C 8A07                <2> 		mov al, [edi]
  9342 0000763E 6639D8              <2> 		cmp ax, bx
  9343 00007641 7543                <2> 		jne noskipcharcopy
  9344                              <2> 	skipcharcopy:
  9345 00007643 81C610000000        <2> 		add esi, 16
  9346 00007649 668B0D[0D770000]    <2> 		mov cx, [charposline]
  9347 00007650 6641                <2> 		inc cx
  9348 00007652 66890D[0D770000]    <2> 		mov [charposline], cx
  9349 00007659 663B0D[C4710000]    <2> 		cmp cx, [termcol]
  9350 00007660 7289                <2> 		jb nextcharwin
  9351 00007662 6631C9              <2> 		xor cx, cx
  9352 00007665 66890D[0D770000]    <2> 		mov [charposline], cx
  9353 0000766C 31D2                <2> 		xor edx, edx
  9354 0000766E 668B15[8E550000]    <2> 		mov dx, [resolutionx2]
  9355 00007675 C1E204              <2> 		shl edx, 4
  9356 00007678 662B15[AC710000]    <2> 		sub dx, [winvcopydx]
  9357 0000767F 01D6                <2> 		add esi, edx
  9358 00007681 E965FFFFFF          <2> 		jmp nextcharwin
  9359                              <2> 	noskipcharcopy:
  9360 00007686 881F                <2> 		mov [edi], bl
  9361 00007688 887F01              <2> 		mov [edi + 1], bh
  9362 0000768B 8B3D[0F770000]      <2> 		mov edi, [charposvbuf]
  9363 00007691 30FF                <2> 		xor bh, bh
  9364 00007693 66C1E304            <2> 		shl bx, 4
  9365 00007697 31D2                <2> 		xor edx, edx
  9366 00007699 668B15[8E550000]    <2> 		mov dx, [resolutionx2]
  9367 000076A0 C1E204              <2> 		shl edx, 4
  9368 000076A3 29D6                <2> 		sub esi, edx
  9369 000076A5 81C610000000        <2> 		add esi, 16
  9370 000076AB 89F7                <2> 		mov edi, esi
  9371 000076AD 668B0D[0D770000]    <2> 		mov cx, [charposline]
  9372 000076B4 6641                <2> 		inc cx
  9373 000076B6 663B0D[C4710000]    <2> 		cmp cx, [termcol]
  9374 000076BD 7316                <2> 		jae fixwindowcopy
  9375 000076BF 66890D[0D770000]    <2> 		mov [charposline], cx
  9376 000076C6 6631C9              <2> 		xor cx, cx
  9377 000076C9 678AB7[2D8B]        <2> 		mov dh, [fonts + bx]
  9378 000076CE D0CE                <2> 		ror dh, 1
  9379 000076D0 E9A0FEFFFF          <2> 		jmp copywindow
  9380                              <2> fixwindowcopy:
  9381 000076D5 6631C9              <2> 		xor cx, cx
  9382 000076D8 66890D[0D770000]    <2> 		mov [charposline], cx
  9383 000076DF 662B15[AC710000]    <2> 		sub dx, [winvcopydx]
  9384 000076E6 01D6                <2> 		add esi, edx
  9385 000076E8 89F7                <2> 		mov edi, esi
  9386 000076EA 678AB7[2D8B]        <2> 		mov dh, [fonts + bx]
  9387 000076EF D0CE                <2> 		ror dh, 1
  9388 000076F1 E97FFEFFFF          <2> 		jmp copywindow
  9389                              <2> donewincopynow:
  9390 000076F6 803D[65220000]01    <2> 		cmp byte [termcopyon], 1
  9391 000076FD 7506                <2> 		jne forgetresetstuff
  9392 000076FF E8B3AFFFFF          <2> 		call switchtermcursor
  9393 00007704 61                  <2> 		popa
  9394                              <2> forgetresetstuff:
  9395 00007705 C605[65220000]00    <2> 		mov byte [termcopyon], 0
  9396 0000770C C3                  <2> 		ret
  9397                              <2> 		
  9398 0000770D 0000                <2> charposline dw 0
  9399 0000770F 00000000            <2> charposvbuf dw 0,0
  9400                              <1> 				
  9401 00007713 00                  <1> copygui db 0
  9402 00007714 00                  <1> graphicsset db 0
  9403 00007715 0000                <1> graphicspos db 0,0
  9404 00007717 00                  <1> showcursorfonton db 0
  9405 00007718 00                  <1> savefonton db 0
  9406 00007719 00                  <1> mouseselecton db 0
  9407                              <1> 
  9408 0000771A 00                  <1> pbutton db 0
  9409 0000771B 00                  <1> pLBUTTON db 0
  9410 0000771C 00                  <1> pRBUTTON db 0
  9411 0000771D 00000000            <1> dragging dw 0,0
  9412 00007721 0000000000000000    <1> lastpos dw 0,0,0,0
  9413 00007729 00000000            <1> colorbuf dw 0,0
  9414                              <1> 	
  9415                              <1> 	clickicon:
  9416 0000772D B001                <1> 		mov al, 1
  9417 0000772F A2[1A770000]        <1> 		mov [pbutton], al
  9418 00007734 A0[1B770000]        <1> 		mov al, [pLBUTTON]
  9419 00007739 2205[95580000]      <1> 		and al, [LBUTTON]
  9420 0000773F 8A25[1C770000]      <1> 		mov ah, [pRBUTTON]
  9421 00007745 2225[96580000]      <1> 		and ah, [RBUTTON]
  9422 0000774B 08E0                <1> 		or al, ah
  9423 0000774D 3C00                <1> 		cmp al, 0
  9424 0000774F 741B                <1> 		je nodragclick
  9425 00007751 813D[1D770000]0100- <1> 		cmp dword [dragging], 1
  9426 00007759 0000                <1>
  9427 0000775B 732D                <1> 		jae dragclick
  9428 0000775D C705[1D770000]0100- <1> 		mov dword [dragging], 1
  9429 00007765 0000                <1>
  9430 00007767 E91E000000          <1> 		jmp dragclick
  9431                              <1> 	nodragclick:
  9432 0000776C C705[1D770000]0000- <1> 		mov dword [dragging], 0
  9433 00007774 0000                <1>
  9434 00007776 A0[95580000]        <1> 		mov al, [LBUTTON]
  9435 0000777B A2[1B770000]        <1> 		mov [pLBUTTON], al
  9436 00007780 A0[96580000]        <1> 		mov al, [RBUTTON]
  9437 00007785 A2[1C770000]        <1> 		mov [pRBUTTON], al
  9438                              <1> 	dragclick:
  9439 0000778A 6631C0              <1> 		xor ax, ax
  9440 0000778D BE[BFCD0000]        <1> 		mov esi, graphicstable
  9441 00007792 C705[687F0000]0000- <1> 		mov dword [codepointer], 0
  9442 0000779A 0000                <1>
  9443                              <1> 	clicon2:
  9444 0000779C 31D2                <1> 		xor edx, edx
  9445 0000779E 31C9                <1> 		xor ecx, ecx
  9446 000077A0 66813E0100          <1> 		cmp word [esi], 1
  9447 000077A5 0F841B000000        <1> 		je near iconselect
  9448 000077AB 66813E0200          <1> 		cmp word [esi], 2
  9449 000077B0 0F8472010000        <1> 		je near textselected
  9450 000077B6 66813E0300          <1> 		cmp word [esi], 3
  9451 000077BB 0F84C7020000        <1> 		je near windowselect
  9452 000077C1 E90B040000          <1> 		jmp nexticonsel
  9453                              <1> 	iconselect:
  9454 000077C6 668B5606            <1> 		mov dx, [esi + 6]
  9455 000077CA 6689D0              <1> 		mov ax, dx
  9456 000077CD 668B4E08            <1> 		mov cx, [esi + 8]
  9457 000077D1 6689CB              <1> 		mov bx, cx
  9458 000077D4 6681C32000          <1> 		add bx, 32
  9459 000077D9 6601D0              <1> 		add ax, dx
  9460 000077DC 813D[1D770000]0100- <1> 		cmp dword [dragging], 1
  9461 000077E4 0000                <1>
  9462 000077E6 746F                <1> 		je dragicon
  9463 000077E8 813D[1D770000]0000- <1> 		cmp dword [dragging], 0
  9464 000077F0 0000                <1>
  9465 000077F2 7411                <1> 		je nodragiconcheck
  9466 000077F4 3935[1D770000]      <1> 		cmp dword [dragging], esi
  9467 000077FA 0F85D1030000        <1> 		jne near nexticonsel
  9468 00007800 E952000000          <1> 		jmp dragicon
  9469                              <1> 	nodragiconcheck:
  9470 00007805 663905[84570000]    <1> 		cmp [mousecursorposition], ax
  9471 0000780C 0F82BF030000        <1> 		jb near nexticonsel
  9472 00007812 66054000            <1> 		add ax, 64
  9473 00007816 663905[84570000]    <1> 		cmp [mousecursorposition], ax
  9474 0000781D 0F87AE030000        <1> 		ja near nexticonsel
  9475 00007823 6629D0              <1> 		sub ax, dx
  9476 00007826 66390D[86570000]    <1> 		cmp [mousecursorposition + 2], cx
  9477 0000782D 0F829E030000        <1> 		jb near nexticonsel
  9478 00007833 66391D[86570000]    <1> 		cmp [mousecursorposition + 2], bx
  9479 0000783A 0F8791030000        <1> 		ja near nexticonsel
  9480 00007840 668B460A            <1> 		mov ax, [esi + 10]
  9481 00007844 66250100            <1> 		and ax, 1
  9482 00007848 663D0100            <1> 		cmp ax, 1
  9483 0000784C 0F84B6000000        <1> 		je near unselecticon
  9484 00007852 E98D000000          <1> 		jmp nodragicon
  9485                              <1> 	dragicon:
  9486 00007857 663905[80570000]    <1> 		cmp [lastmouseposition], ax
  9487 0000785E 0F826D030000        <1> 		jb near nexticonsel
  9488 00007864 66054000            <1> 		add ax, 64
  9489 00007868 663905[80570000]    <1> 		cmp [lastmouseposition], ax
  9490 0000786F 0F875C030000        <1> 		ja near nexticonsel
  9491 00007875 6629D0              <1> 		sub ax, dx
  9492 00007878 66390D[82570000]    <1> 		cmp [lastmouseposition + 2], cx
  9493 0000787F 0F824C030000        <1> 		jb near nexticonsel
  9494 00007885 66391D[82570000]    <1> 		cmp [lastmouseposition + 2], bx
  9495 0000788C 0F873F030000        <1> 		ja near nexticonsel
  9496 00007892 668B460A            <1> 		mov ax, [esi + 10]
  9497 00007896 2410                <1> 		and al, 00010000b
  9498 00007898 3C10                <1> 		cmp al, 00010000b
  9499 0000789A 7448                <1> 		je nodragicon
  9500 0000789C 8935[1D770000]      <1> 		mov [dragging], esi
  9501 000078A2 66D1E2              <1> 		shl dx, 1
  9502 000078A5 662B15[80570000]    <1> 		sub dx, [lastmouseposition]
  9503 000078AC 660315[84570000]    <1> 		add dx, [mousecursorposition]
  9504 000078B3 66D1EA              <1> 		shr dx, 1
  9505 000078B6 66030D[86570000]    <1> 		add cx, [mousecursorposition + 2]
  9506 000078BD 662B0D[82570000]    <1> 		sub cx, [lastmouseposition + 2]
  9507 000078C4 663B15[8E550000]    <1> 		cmp dx, [resolutionx2]
  9508 000078CB 7607                <1> 		jbe chkyresdrgicn
  9509 000078CD 668B15[84570000]    <1> 		mov dx, [mousecursorposition]
  9510                              <1> 	chkyresdrgicn:
  9511 000078D4 663B0D[A2540000]    <1> 		cmp cx, [resolutiony]
  9512 000078DB 7607                <1> 		jbe nodragicon
  9513 000078DD 668B0D[86570000]    <1> 		mov cx, [mousecursorposition + 2]
  9514                              <1> 	nodragicon:
  9515 000078E4 66814E0A0100        <1> 		or word [esi + 10], 1
  9516 000078EA 8B5E0C              <1> 		mov ebx, [esi + 12]
  9517 000078ED 668B460A            <1> 		mov ax, [esi + 10]
  9518 000078F1 8B7602              <1> 		mov esi, [esi + 2]
  9519 000078F4 C705[687F0000]0000- <1> 		mov dword [codepointer], 0
  9520 000078FC 0000                <1>
  9521 000078FE E8A6EEFFFF          <1> 		call showicon
  9522 00007903 E9E2020000          <1> 		jmp doneiconsel
  9523                              <1> 	unselecticon:
  9524 00007908 6681660AFEFF        <1> 		and word [esi + 10], 0xFFFE
  9525 0000790E 8B5E0C              <1> 		mov ebx, [esi + 12]
  9526 00007911 668B460A            <1> 		mov ax, [esi + 10]
  9527 00007915 8B7602              <1> 		mov esi, [esi + 2]
  9528 00007918 891D[687F0000]      <1> 		mov [codepointer], ebx
  9529 0000791E E886EEFFFF          <1> 		call showicon
  9530 00007923 E9C2020000          <1> 		jmp doneiconsel
  9531                              <1> 	textselected:
  9532 00007928 8B5E02              <1> 		mov ebx, [esi + 2]
  9533 0000792B 668B5606            <1> 		mov dx, [esi + 6]
  9534 0000792F 6689D0              <1> 		mov ax, dx
  9535 00007932 668B4E08            <1> 		mov cx, [esi + 8]
  9536                              <1> 	lengthtesttext:
  9537 00007936 803B00              <1> 		cmp byte [ebx], 0
  9538 00007939 7407                <1> 		je donetesttextlength
  9539 0000793B 43                  <1> 		inc ebx
  9540 0000793C 66051000            <1> 		add ax, 16
  9541 00007940 EBF4                <1> 		jmp lengthtesttext
  9542                              <1> 	donetesttextlength:
  9543 00007942 6689CB              <1> 		mov bx, cx
  9544 00007945 6681C30F00          <1> 		add bx, 15
  9545 0000794A 813D[1D770000]0100- <1> 		cmp dword [dragging], 1
  9546 00007952 0000                <1>
  9547 00007954 7468                <1> 		je dragtext
  9548 00007956 813D[1D770000]0000- <1> 		cmp dword [dragging], 0
  9549 0000795E 0000                <1>
  9550 00007960 7411                <1> 		je nodragtextcheck
  9551 00007962 3935[1D770000]      <1> 		cmp dword [dragging], esi
  9552 00007968 0F8563020000        <1> 		jne near nexticonsel
  9553 0000796E E94B000000          <1> 		jmp dragtext
  9554                              <1> 	nodragtextcheck:
  9555 00007973 663915[84570000]    <1> 		cmp [mousecursorposition], dx
  9556 0000797A 0F8251020000        <1> 		jb near nexticonsel
  9557 00007980 663905[84570000]    <1> 		cmp [mousecursorposition], ax
  9558 00007987 0F8744020000        <1> 		ja near nexticonsel
  9559 0000798D 66390D[86570000]    <1> 		cmp [mousecursorposition + 2], cx
  9560 00007994 0F8237020000        <1> 		jb near nexticonsel
  9561 0000799A 66391D[86570000]    <1> 		cmp [mousecursorposition + 2], bx
  9562 000079A1 0F872A020000        <1> 		ja near nexticonsel
  9563 000079A7 668B460A            <1> 		mov ax, [esi + 10]
  9564 000079AB 66250100            <1> 		and ax, 1
  9565 000079AF 663D0100            <1> 		cmp ax, 1
  9566 000079B3 0F84AB000000        <1> 		je near unselecttext
  9567 000079B9 E986000000          <1> 		jmp nodragtext
  9568                              <1> 	dragtext:
  9569 000079BE 663915[80570000]    <1> 		cmp [lastmouseposition], dx
  9570 000079C5 0F8206020000        <1> 		jb near nexticonsel
  9571 000079CB 663905[80570000]    <1> 		cmp [lastmouseposition], ax
  9572 000079D2 0F87F9010000        <1> 		ja near nexticonsel
  9573 000079D8 66390D[82570000]    <1> 		cmp [lastmouseposition + 2], cx
  9574 000079DF 0F82EC010000        <1> 		jb near nexticonsel
  9575 000079E5 66391D[82570000]    <1> 		cmp [lastmouseposition + 2], bx
  9576 000079EC 0F87DF010000        <1> 		ja near nexticonsel
  9577 000079F2 668B460A            <1> 		mov ax, [esi + 10]
  9578 000079F6 2410                <1> 		and al, 00010000b
  9579 000079F8 663D1000            <1> 		cmp ax, 00010000b
  9580 000079FC 0F8442000000        <1> 		je near nodragtext
  9581 00007A02 8935[1D770000]      <1> 		mov [dragging], esi
  9582 00007A08 662B15[80570000]    <1> 		sub dx, [lastmouseposition]
  9583 00007A0F 660315[84570000]    <1> 		add dx, [mousecursorposition]
  9584 00007A16 66030D[86570000]    <1> 		add cx, [mousecursorposition + 2]
  9585 00007A1D 662B0D[82570000]    <1> 		sub cx, [lastmouseposition + 2]
  9586 00007A24 663B15[8E550000]    <1> 		cmp dx, [resolutionx2]
  9587 00007A2B 7607                <1> 		jbe chkyresdrgtxt
  9588 00007A2D 668B15[84570000]    <1> 		mov dx, [mousecursorposition]
  9589                              <1> 	chkyresdrgtxt:
  9590 00007A34 663B0D[A2540000]    <1> 		cmp cx, [resolutiony]
  9591 00007A3B 7607                <1> 		jbe nodragtext
  9592 00007A3D 668B0D[86570000]    <1> 		mov cx, [mousecursorposition + 2]
  9593                              <1> 	nodragtext:
  9594 00007A44 66814E0A0100        <1> 		or word [esi + 10], 1
  9595 00007A4A 8B5E0C              <1> 		mov ebx, [esi + 12]
  9596 00007A4D 891D[687F0000]      <1> 		mov [codepointer], ebx
  9597 00007A53 668B460A            <1> 		mov ax, [esi + 10]
  9598 00007A57 8B7602              <1> 		mov esi, [esi + 2]
  9599 00007A5A E802F5FFFF          <1> 		call showstring
  9600 00007A5F E986010000          <1> 		jmp doneiconsel
  9601                              <1> 	unselecttext:
  9602 00007A64 6681660AFEFF        <1> 		and word [esi + 10], 0xFFFE
  9603 00007A6A 8B5E0C              <1> 		mov ebx, [esi + 12]
  9604 00007A6D 668B460A            <1> 		mov ax, [esi + 10]
  9605 00007A71 8B7602              <1> 		mov esi, [esi + 2]
  9606 00007A74 C705[687F0000]0000- <1> 		mov dword [codepointer], 0
  9607 00007A7C 0000                <1>
  9608 00007A7E E8DEF4FFFF          <1> 		call showstring
  9609 00007A83 E962010000          <1> 		jmp doneiconsel
  9610                              <1> windowselect:
  9611 00007A88 8B7E02              <1> 		mov edi, [esi + 2]
  9612 00007A8B 668B5606            <1> 		mov dx, [esi + 6]
  9613 00007A8F 6689D0              <1> 		mov ax, dx
  9614 00007A92 668B4E08            <1> 		mov cx, [esi + 8]
  9615 00007A96 6689CB              <1> 		mov bx, cx
  9616 00007A99 6681C31000          <1> 		add bx, 16
  9617 00007A9E 813D[1D770000]0100- <1> 		cmp dword [dragging], 1
  9618 00007AA6 0000                <1>
  9619 00007AA8 746D                <1> 		je dragwin
  9620 00007AAA 813D[1D770000]0000- <1> 		cmp dword [dragging], 0
  9621 00007AB2 0000                <1>
  9622 00007AB4 7411                <1> 		je nodragwincheck
  9623 00007AB6 3935[1D770000]      <1> 		cmp dword [dragging], esi
  9624 00007ABC 0F850F010000        <1> 		jne near nexticonsel
  9625 00007AC2 E950000000          <1> 		jmp dragwin
  9626                              <1> 	nodragwincheck:
  9627 00007AC7 663905[84570000]    <1> 		cmp [mousecursorposition], ax
  9628 00007ACE 0F82FD000000        <1> 		jb near nexticonsel
  9629 00007AD4 660307              <1> 		add ax, [edi]
  9630 00007AD7 660307              <1> 		add ax, [edi]
  9631 00007ADA 663905[84570000]    <1> 		cmp [mousecursorposition], ax
  9632 00007AE1 0F87EA000000        <1> 		ja near nexticonsel
  9633 00007AE7 66390D[86570000]    <1> 		cmp [mousecursorposition + 2], cx
  9634 00007AEE 0F82DD000000        <1> 		jb near nexticonsel
  9635 00007AF4 66391D[86570000]    <1> 		cmp [mousecursorposition + 2], bx
  9636 00007AFB 0F87D0000000        <1> 		ja near nexticonsel
  9637 00007B01 662D1400            <1> 		sub ax, 20
  9638 00007B05 663905[84570000]    <1> 		cmp [mousecursorposition], ax
  9639 00007B0C 0F87A4000000        <1> 		ja near killwin
  9640 00007B12 E98B000000          <1> 		jmp nodragwin
  9641                              <1> 	dragwin:
  9642 00007B17 663905[80570000]    <1> 		cmp [lastmouseposition], ax
  9643 00007B1E 0F82AD000000        <1> 		jb near nexticonsel
  9644 00007B24 660307              <1> 		add ax, [edi]
  9645 00007B27 660307              <1> 		add ax, [edi]
  9646 00007B2A 663905[80570000]    <1> 		cmp [lastmouseposition], ax
  9647 00007B31 0F879A000000        <1> 		ja near nexticonsel
  9648 00007B37 66390D[82570000]    <1> 		cmp [lastmouseposition + 2], cx
  9649 00007B3E 0F828D000000        <1> 		jb near nexticonsel
  9650 00007B44 66391D[82570000]    <1> 		cmp [lastmouseposition + 2], bx
  9651 00007B4B 0F8780000000        <1> 		ja near nexticonsel
  9652 00007B51 8935[1D770000]      <1> 		mov [dragging], esi
  9653 00007B57 803D[777C0000]01    <1> 		cmp byte [windrag], 1
  9654 00007B5E 7706                <1> 		ja .nochangewindrag
  9655 00007B60 FE05[777C0000]      <1> 		inc byte [windrag]
  9656                              <1> 	.nochangewindrag:
  9657 00007B66 662B15[80570000]    <1> 		sub dx, [lastmouseposition]
  9658 00007B6D 660315[84570000]    <1> 		add dx, [mousecursorposition]
  9659 00007B74 66030D[86570000]    <1> 		add cx, [mousecursorposition + 2]
  9660 00007B7B 662B0D[82570000]    <1> 		sub cx, [lastmouseposition + 2]
  9661 00007B82 663B15[8E550000]    <1> 		cmp dx, [resolutionx2]
  9662 00007B89 7607                <1> 		jbe chkyresdrgwin
  9663 00007B8B 668B15[84570000]    <1> 		mov dx, [mousecursorposition]
  9664                              <1> 	chkyresdrgwin:
  9665 00007B92 663B0D[A2540000]    <1> 		cmp cx, [resolutiony]
  9666 00007B99 7607                <1> 		jbe nodragwin
  9667 00007B9B 668B0D[86570000]    <1> 		mov cx, [mousecursorposition + 2]
  9668                              <1> 	nodragwin:
  9669 00007BA2 8B5E0C              <1> 		mov ebx, [esi + 12]
  9670 00007BA5 668B460A            <1> 		mov ax, [esi + 10]
  9671 00007BA9 8B7602              <1> 		mov esi, [esi + 2]
  9672 00007BAC E819F6FFFF          <1> 		call showwindow
  9673 00007BB1 E934000000          <1> 		jmp doneiconsel
  9674                              <1> 	killwin:
  9675 00007BB6 66C7060000          <1> 		mov word [esi], 0
  9676 00007BBB C605[64220000]00    <1> 		mov byte [termguion], 0
  9677 00007BC2 E8E3EDFFFF          <1> 		call guiclear
  9678 00007BC7 E820EEFFFF          <1> 		call reloadallgraphics
  9679 00007BCC E9D0E8FFFF          <1> 		jmp guistart
  9680                              <1> ;		jmp doneiconsel2
  9681                              <1> 	nexticonsel:
  9682 00007BD1 6681660AFEFF        <1> 		and word [esi + 10], 0xFFFE
  9683 00007BD7 81C610000000        <1> 		add esi, 16
  9684 00007BDD 81FE[BFCF0000]      <1> 		cmp esi, graphicstableend
  9685 00007BE3 7305                <1> 		jae doneiconsel
  9686 00007BE5 E9B2FBFFFF          <1> 		jmp clicon2
  9687                              <1> 	doneiconsel:
  9688 00007BEA 813D[1D770000]0100- <1> 		cmp dword [dragging], 1
  9689 00007BF2 0000                <1>
  9690 00007BF4 731C                <1> 		jae doneiconsel2
  9691 00007BF6 30C0                <1> 		xor al, al
  9692 00007BF8 A2[777C0000]        <1> 		mov [windrag], al
  9693 00007BFD 813D[687F0000]0000- <1> 		cmp dword [codepointer], 0
  9694 00007C05 0000                <1>
  9695 00007C07 7409                <1> 		je doneiconsel2
  9696 00007C09 8B1D[687F0000]      <1> 		mov ebx, [codepointer]
  9697 00007C0F FFD3                <1> 		call ebx
  9698 00007C11 C3                  <1> 		ret
  9699                              <1> 	doneiconsel2:
  9700 00007C12 A0[95580000]        <1> 		mov al, [LBUTTON]
  9701 00007C17 A2[1B770000]        <1> 		mov [pLBUTTON], al
  9702 00007C1C A0[96580000]        <1> 		mov al, [RBUTTON]
  9703 00007C21 A2[1C770000]        <1> 		mov [pRBUTTON], al
  9704 00007C26 813D[1D770000]0100- <1> 		cmp dword [dragging], 1
  9705 00007C2E 0000                <1>
  9706 00007C30 0F8613000000        <1> 		jbe near noreloadgraphicsclick
  9707 00007C36 803D[777C0000]01    <1> 		cmp byte [windrag], 1
  9708 00007C3D 7305                <1> 		jae noclearcursorcl
  9709 00007C3F E84AEAFFFF          <1> 		call clearmousecursor
  9710                              <1> noclearcursorcl:
  9711 00007C44 E8A3EDFFFF          <1> 		call reloadallgraphics
  9712                              <1> noreloadgraphicsclick:
  9713 00007C49 30E4                <1> 		xor ah, ah
  9714 00007C4B 31C9                <1> 		xor ecx, ecx
  9715 00007C4D 31D2                <1> 		xor edx, edx
  9716 00007C4F B0FE                <1> 		mov al, 254
  9717 00007C51 668B15[84570000]    <1> 		mov dx, [mousecursorposition]
  9718 00007C58 668B0D[86570000]    <1> 		mov cx, [mousecursorposition + 2]
  9719 00007C5F 66BBE738            <1> 		mov bx, 0011100011100111b
  9720 00007C63 C605[17770000]01    <1> 		mov byte [showcursorfonton], 1
  9721 00007C6A E844F3FFFF          <1> 		call showfontvesa
  9722 00007C6F C605[17770000]00    <1> 		mov byte [showcursorfonton], 0
  9723 00007C76 C3                  <1> 		ret
  9724 00007C77 00                  <1> windrag db 0
  9725 00007C78 00000000            <1> lastdrag dw 0,0
  9726 00007C7C 00000000            <1> grpctblpos dw 0,0
  9727                              <1> 
  9728                              <1> 
  9729                              <1> 
  9730 00007C80 00<rept>            <1> grphbuf times 16 db 0
  9731                              <1> 	graphicsadd:
  9732 00007C90 BF[BFCD0000]        <1> 		mov edi, graphicstable
  9733                              <1> 	shwgrph1:
  9734 00007C95 397702              <1> 		cmp dword [edi + 2], esi
  9735 00007C98 7414                <1> 		je showgraphicsreplace2
  9736 00007C9A 81C710000000        <1> 		add edi, 16
  9737 00007CA0 81FF[BFCF0000]      <1> 		cmp edi, graphicstableend
  9738 00007CA6 0F833C020000        <1> 		jae near showgraphicsnew
  9739 00007CAC EBE7                <1> 		jmp shwgrph1
  9740                              <1> 	showgraphicsreplace2:
  9741 00007CAE 8935[827C0000]      <1> 		mov [grphbuf + 2], esi
  9742 00007CB4 668915[867C0000]    <1> 		mov [grphbuf + 6], dx
  9743 00007CBB 66890D[887C0000]    <1> 		mov [grphbuf + 8], cx
  9744 00007CC2 891D[8C7C0000]      <1> 		mov [grphbuf + 12], ebx
  9745 00007CC8 30FF                <1> 		xor bh, bh
  9746 00007CCA 88E3                <1> 		mov bl, ah
  9747 00007CCC 30E4                <1> 		xor ah, ah
  9748 00007CCE 66A3[8A7C0000]      <1> 		mov [grphbuf + 10], ax	
  9749 00007CD4 66891D[807C0000]    <1> 		mov [grphbuf], bx
  9750 00007CDB 66A1[807C0000]      <1> 		mov ax, [grphbuf]
  9751 00007CE1 663D0100            <1> 		cmp ax, 1
  9752 00007CE5 0F8419000000        <1> 		je near replaceicon
  9753 00007CEB 663D0200            <1> 		cmp ax, 2
  9754 00007CEF 0F8493000000        <1> 		je near replacestring
  9755 00007CF5 663D0300            <1> 		cmp ax, 3
  9756 00007CF9 0F840F010000        <1> 		je near replacewindow
  9757 00007CFF E9C1010000          <1> 		jmp showgraphicsreplace
  9758                              <1> 	replaceicon:
  9759 00007D04 893D[21770000]      <1> 		mov [lastpos], edi
  9760 00007D0A 8935[25770000]      <1> 		mov [lastpos + 4], esi
  9761 00007D10 8B7702              <1> 		mov esi, [edi + 2]
  9762 00007D13 668B5F0C            <1> 		mov bx, [edi + 12]
  9763 00007D17 668B5706            <1> 		mov dx, [edi + 6]
  9764 00007D1B 668B4F08            <1> 		mov cx, [edi + 8]
  9765 00007D1F 668B06              <1> 		mov ax, [esi]
  9766 00007D22 66A3[29770000]      <1> 		mov [colorbuf], ax
  9767 00007D28 66A1[E8690000]      <1> 		mov ax, [background]
  9768 00007D2E 668906              <1> 		mov [esi], ax
  9769 00007D31 8B5F0C              <1> 		mov ebx, [edi + 12]
  9770 00007D34 668B470A            <1> 		mov ax, [edi + 10]
  9771 00007D38 2401                <1> 		and al, 1
  9772 00007D3A A2[6C7F0000]        <1> 		mov [iconselected], al
  9773 00007D3F 668B470A            <1> 		mov ax, [edi + 10]
  9774 00007D43 E874EAFFFF          <1> 		call showicon2
  9775 00007D48 8B3D[21770000]      <1> 		mov edi, [lastpos]
  9776 00007D4E 8B7702              <1> 		mov esi, [edi + 2]
  9777 00007D51 66A1[29770000]      <1> 		mov ax, [colorbuf]
  9778 00007D57 668906              <1> 		mov [esi], ax
  9779 00007D5A 8B35[25770000]      <1> 		mov esi, [lastpos + 4]
  9780 00007D60 668B15[867C0000]    <1> 		mov dx, [grphbuf + 6]
  9781 00007D67 668B0D[887C0000]    <1> 		mov cx, [grphbuf + 8]
  9782 00007D6E 668B1D[807C0000]    <1> 		mov bx, [grphbuf]
  9783 00007D75 66A1[8A7C0000]      <1> 		mov ax, [grphbuf + 10]
  9784 00007D7B 88DC                <1> 		mov ah, bl
  9785 00007D7D 8B1D[8C7C0000]      <1> 		mov ebx, [grphbuf + 12]
  9786 00007D83 E93D010000          <1> 		jmp showgraphicsreplace
  9787                              <1> 	replacestring:
  9788 00007D88 893D[21770000]      <1> 		mov [lastpos], edi
  9789 00007D8E 8935[25770000]      <1> 		mov [lastpos + 4], esi
  9790 00007D94 8B5F0C              <1> 		mov ebx, [edi + 12]
  9791 00007D97 8B7702              <1> 		mov esi, [edi + 2]
  9792 00007D9A 668B5706            <1> 		mov dx, [edi + 6]
  9793 00007D9E 668B4F08            <1> 		mov cx, [edi + 8]
  9794 00007DA2 66A1[A26F0000]      <1> 		mov ax, [colorfont2]
  9795 00007DA8 66A3[29770000]      <1> 		mov [colorbuf], ax
  9796 00007DAE 66A1[E8690000]      <1> 		mov ax, [background]
  9797 00007DB4 66A3[A26F0000]      <1> 		mov [colorfont2], ax		
  9798 00007DBA 8B5F0C              <1> 		mov ebx, [edi + 12]
  9799 00007DBD 668B470A            <1> 		mov ax, [edi + 10]
  9800 00007DC1 2401                <1> 		and al, 1
  9801 00007DC3 A2[19770000]        <1> 		mov [mouseselecton], al
  9802 00007DC8 668B470A            <1> 		mov ax, [edi + 10]
  9803 00007DCC E8A3F1FFFF          <1> 		call showstring2
  9804 00007DD1 66A1[29770000]      <1> 		mov ax, [colorbuf]
  9805 00007DD7 66A3[A26F0000]      <1> 		mov [colorfont2], ax
  9806 00007DDD 8B3D[21770000]      <1> 		mov edi, [lastpos]
  9807 00007DE3 8B7702              <1> 		mov esi, [edi + 2]
  9808 00007DE6 668B15[867C0000]    <1> 		mov dx, [grphbuf + 6]
  9809 00007DED 668B0D[887C0000]    <1> 		mov cx, [grphbuf + 8]
  9810 00007DF4 668B1D[807C0000]    <1> 		mov bx, [grphbuf]
  9811 00007DFB 66A1[8A7C0000]      <1> 		mov ax, [grphbuf + 10]
  9812 00007E01 88DC                <1> 		mov ah, bl
  9813 00007E03 8B1D[8C7C0000]      <1> 		mov ebx, [grphbuf + 12]
  9814 00007E09 E9B7000000          <1> 		jmp showgraphicsreplace
  9815                              <1> 	replacewindow:
  9816 00007E0E 893D[21770000]      <1> 		mov [lastpos], edi
  9817 00007E14 8935[25770000]      <1> 		mov [lastpos + 4], esi
  9818 00007E1A 8B7702              <1> 		mov esi, [edi + 2]
  9819 00007E1D 8B3D[B4710000]      <1> 		mov edi, [windowbufloc]
  9820 00007E23 31D2                <1> 		xor edx, edx
  9821 00007E25 668B15[8E550000]    <1> 		mov dx, [resolutionx2]
  9822 00007E2C C1E204              <1> 		shl edx, 4
  9823 00007E2F 29D7                <1> 		sub edi, edx
  9824 00007E31 31D2                <1> 		xor edx, edx
  9825 00007E33 668B16              <1> 		mov dx, [esi]
  9826 00007E36 660316              <1> 		add dx, [esi]
  9827 00007E39 668B4E02            <1> 		mov cx, [esi + 2]
  9828 00007E3D 6681C11000          <1> 		add cx, 16
  9829 00007E42 66A1[E8690000]      <1> 		mov ax, [background]
  9830 00007E48 803D[777C0000]01    <1> 		cmp byte [windrag], 1
  9831 00007E4F 7609                <1> 		jbe clearwindow
  9832 00007E51 662B4E02            <1> 		sub cx, [esi + 2]	;only clear the title bar and 16 extra lines (for the cursor)
  9833 00007E55 6681C11000          <1> 		add cx, 16
  9834                              <1> 	clearwindow:
  9835                              <1> 		%ifdef gui.background
  9836                              <1> 			cmp dword [backgroundimage], 0
  9837                              <1> 			je .noback
  9838                              <1> 			push esi
  9839                              <1> 			mov esi, [backgroundimage]
  9840                              <1> 			sub edi, [physbaseptr]
  9841                              <1> 			add esi, edi
  9842                              <1> 			add edi, [physbaseptr]
  9843                              <1> 			mov ax, [esi]
  9844                              <1> 			pop esi
  9845                              <1> 		.noback:
  9846                              <1> 		%endif
  9847 00007E5A 668907              <1> 		mov [edi], ax
  9848 00007E5D 81C702000000        <1> 		add edi, 2
  9849 00007E63 81EA02000000        <1> 		sub edx, 2
  9850 00007E69 81FA00000000        <1> 		cmp edx, 0
  9851 00007E6F 75E9                <1> 		jne clearwindow
  9852 00007E71 6649                <1> 		dec cx
  9853 00007E73 668B15[8E550000]    <1> 		mov dx, [resolutionx2]
  9854 00007E7A 662B16              <1> 		sub dx, [esi]
  9855 00007E7D 662B16              <1> 		sub dx, [esi]
  9856 00007E80 01D7                <1> 		add edi, edx
  9857 00007E82 668B16              <1> 		mov dx, [esi]
  9858 00007E85 660316              <1> 		add dx, [esi]
  9859 00007E88 6681F90000          <1> 		cmp cx, 0
  9860 00007E8D 75CB                <1> 		jne clearwindow
  9861                              <1> 	endwindowclear:
  9862 00007E8F C605[65220000]00    <1> 		mov byte [termcopyon], 0
  9863 00007E96 8B3D[21770000]      <1> 		mov edi, [lastpos]
  9864 00007E9C 8B35[827C0000]      <1> 		mov esi, [grphbuf + 2]
  9865 00007EA2 668B15[867C0000]    <1> 		mov dx, [grphbuf + 6]
  9866 00007EA9 668B0D[887C0000]    <1> 		mov cx, [grphbuf + 8]
  9867 00007EB0 668B1D[807C0000]    <1> 		mov bx, [grphbuf]
  9868 00007EB7 66A1[8A7C0000]      <1> 		mov ax, [grphbuf + 10]
  9869 00007EBD 88DC                <1> 		mov ah, bl
  9870 00007EBF 8B1D[8C7C0000]      <1> 		mov ebx, [grphbuf + 12]
  9871                              <1> 	showgraphicsreplace:
  9872 00007EC5 897702              <1> 		mov [edi + 2], esi
  9873 00007EC8 66895706            <1> 		mov [edi + 6], dx
  9874 00007ECC 66894F08            <1> 		mov [edi + 8], cx
  9875 00007ED0 895F0C              <1> 		mov [edi + 12], ebx
  9876 00007ED3 30FF                <1> 		xor bh, bh
  9877 00007ED5 88E3                <1> 		mov bl, ah
  9878 00007ED7 30E4                <1> 		xor ah, ah
  9879 00007ED9 6689470A            <1> 		mov [edi + 10], ax
  9880 00007EDD 66891F              <1> 		mov [edi], bx
  9881 00007EE0 8B5F0C              <1> 		mov ebx, [edi + 12]
  9882 00007EE3 668B470A            <1> 		mov ax, [edi + 10]
  9883 00007EE7 C3                  <1> 		ret
  9884                              <1> 	showgraphicsnew:
  9885 00007EE8 BF[BFCD0000]        <1> 		mov edi, graphicstable
  9886                              <1> 	shwgrph2:
  9887 00007EED 66813F0000          <1> 		cmp word [edi], 0
  9888 00007EF2 74D1                <1> 		je showgraphicsreplace
  9889 00007EF4 81C710000000        <1> 		add edi, 16
  9890 00007EFA 81FF[BFCF0000]      <1> 		cmp edi, graphicstableend
  9891 00007F00 72EB                <1> 		jb shwgrph2
  9892                              <1> 	showgraphicsdone:
  9893 00007F02 C3                  <1> 		ret
  9894                              <1> 	
  9895                              <1> putpixel: ;color in si, point is (dx,cx)
  9896                              <1> 		;destroys edi, ebx, eax
  9897 00007F03 6650                <1> 	push ax
  9898 00007F05 6653                <1> 	push bx
  9899 00007F07 31C0                <1> 	xor eax, eax
  9900 00007F09 31DB                <1> 	xor ebx, ebx
  9901 00007F0B 31FF                <1> 	xor edi, edi
  9902 00007F0D 668B1D[A2540000]    <1> 	mov bx, [resolutiony]
  9903 00007F14 66A1[A0540000]      <1> 	mov ax, [resolutionx]
  9904 00007F1A 6639C2              <1> 	cmp dx, ax
  9905 00007F1D 7720                <1> 	ja .doneput
  9906 00007F1F 66D1E0              <1> 	shl ax, 1
  9907 00007F22 6639D9              <1> 	cmp cx, bx
  9908 00007F25 7718                <1> 	ja .doneput
  9909 00007F27 6689CB              <1> 	mov bx, cx
  9910 00007F2A 52                  <1> 	push edx
  9911 00007F2B F7E3                <1> 	mul ebx
  9912 00007F2D 5A                  <1> 	pop edx
  9913 00007F2E 6601D7              <1> 	add di, dx
  9914 00007F31 6601D7              <1> 	add di, dx
  9915 00007F34 01C7                <1> 	add edi, eax
  9916 00007F36 033D[B6540000]      <1> 	add edi, [physbaseptr]
  9917 00007F3C 668937              <1> 	mov [edi], si
  9918                              <1> .doneput:
  9919 00007F3F 665B                <1> 	pop bx
  9920 00007F41 6658                <1> 	pop ax
  9921 00007F43 C3                  <1> 	ret
  9922                              <1> 	
  9923                              <1> getpixelmem:	;pixel in (dx, cx), outputs memory location in edi
  9924 00007F44 31FF                <1> 	xor edi, edi
  9925 00007F46 31C0                <1> 	xor eax, eax
  9926 00007F48 31DB                <1> 	xor ebx, ebx
  9927 00007F4A 668B1D[8E550000]    <1> 	mov bx, [resolutionx2]
  9928 00007F51 6689D7              <1> 	mov di, dx
  9929 00007F54 6601D7              <1> 	add di, dx
  9930 00007F57 6689C8              <1> 	mov ax, cx
  9931 00007F5A F7E3                <1> 	mul ebx
  9932 00007F5C 01C7                <1> 	add edi, eax
  9933 00007F5E 033D[B6540000]      <1> 	add edi, [physbaseptr]
  9934 00007F64 C3                  <1> 	ret
  9935                              <1> 
  9936 00007F65 00                  <1> 	mouseon db 0
  9937 00007F66 0000                <1> 	icon dw 0	;pointer to icon
  9938 00007F68 00000000            <1> 	codepointer dd 0 ;pointer to code
  9939 00007F6C 00                  <1> 	iconselected db 0
  9940                                  %endif
  9941                                  %ifdef network.included
  9942                                  	%include "source/network.asm"
  9943                              <1> network.init:
  9944                              <1> %ifdef rtl8139.included
  9945                              <1> 	%include "source/drivers/network/rtl8139.asm"
  9946                              <2> ;RTL8139 NIC DRIVER
  9947                              <2> rtl8139:
  9948 00007F6D E805000000          <2> 	call .init
  9949 00007F72 E9CE010000          <2> 	jmp .end
  9950                              <2> 
  9951                              <2> .RBSTART equ 0x30
  9952                              <2> .IMR equ 0x3C
  9953                              <2> .ISR equ 0x3E
  9954                              <2> .CMD equ 0x37
  9955                              <2> .RCR equ 0x44
  9956                              <2> .CONFIG1 equ 0x52
  9957                              <2> .TSD0 equ 0x10
  9958                              <2> .TSAD0 equ 0x20
  9959                              <2> .init:	;should find card, get mac, and initialize card
  9960 00007F77 31C0                <2> 	xor eax, eax
  9961 00007F79 A2[995F0000]        <2> 	mov [pcifunction], al
  9962 00007F7E A2[975F0000]        <2> 	mov [pcibus], al
  9963 00007F83 A2[985F0000]        <2> 	mov [pcidevice], al
  9964 00007F88 B002                <2> 	mov al, 0x02 ;type code
  9965 00007F8A A2[28600000]        <2> 	mov [pcitype], al
  9966 00007F8F B8EC103981          <2> 	mov eax, 0x813910EC
  9967 00007F94 A3[9C5F0000]        <2> 	mov [pcidevid], eax
  9968 00007F99 E812E0FFFF          <2> 	call getpciport
  9969 00007F9E 81FBFFFFFFFF        <2> 	cmp ebx, 0xFFFFFFFF
  9970 00007FA4 7501                <2> 	jne .initnic
  9971 00007FA6 C3                  <2> 	ret
  9972                              <2> .initnic:
  9973 00007FA7 8915[24810000]      <2> 	mov [.basenicaddr], edx
  9974 00007FAD 89D1                <2> 	mov ecx, edx
  9975 00007FAF E8FFAEFFFF          <2> 	call showhex	;for debugging, please remove
  9976 00007FB4 BE[18B60100]        <2> 	mov esi, rbuffstart
  9977 00007FB9 B900200000          <2> 	mov ecx, 8192
  9978 00007FBE 31C0                <2> 	xor eax, eax
  9979                              <2> .clearrbuff:		;clear receive buffer which starts at rbuffstart
  9980 00007FC0 8806                <2> 	mov [esi], al
  9981 00007FC2 46                  <2> 	inc esi
  9982 00007FC3 6649                <2> 	dec cx
  9983 00007FC5 6681F90000          <2> 	cmp cx, 0
  9984 00007FCA 75F4                <2> 	jne .clearrbuff
  9985                              <2> .findmac:
  9986 00007FCC 8B15[24810000]      <2> 	mov edx, [.basenicaddr]
  9987 00007FD2 BF[29810000]        <2> 	mov edi, .mac
  9988 00007FD7 B906000000          <2> 	mov ecx, 6
  9989                              <2> .macputloop:
  9990 00007FDC EC                  <2> 	in al, dx
  9991 00007FDD 8807                <2> 	mov [edi], al
  9992 00007FDF 47                  <2> 	inc edi
  9993 00007FE0 42                  <2> 	inc edx
  9994 00007FE1 49                  <2> 	dec ecx
  9995 00007FE2 75F8                <2> 	jnz .macputloop
  9996 00007FE4 B9[29810000]        <2> 	mov ecx, .mac
  9997 00007FE9 E8680A0000          <2> 	call showmac
  9998 00007FEE E817000000          <2> 	call .resetnic
  9999 00007FF3 BE[2F810000]        <2> 	mov esi, .name
 10000 00007FF8 E8229DFFFF          <2> 	call print
 10001 00007FFD BE[38810000]        <2> 	mov esi, .initmsg
 10002 00008002 E8189DFFFF          <2> 	call print
 10003 00008007 31DB                <2> 	xor ebx, ebx
 10004 00008009 C3                  <2> 	ret
 10005                              <2> .resetnic:
 10006 0000800A 8B15[24810000]      <2> 	mov edx, [.basenicaddr]
 10007 00008010 81C252000000        <2> 	add edx, .CONFIG1
 10008 00008016 30C0                <2> 	xor al, al
 10009 00008018 EE                  <2> 	out dx, al	;WAKE UP!!!!
 10010 00008019 8B15[24810000]      <2> 	mov edx, [.basenicaddr]
 10011 0000801F 81C237000000        <2> 	add edx, .CMD
 10012 00008025 B010                <2> 	mov al, 0x10
 10013 00008027 EE                  <2> 	out dx, al	;Reset
 10014                              <2> .resetnicwait:
 10015 00008028 EC                  <2> 	in al, dx
 10016 00008029 A810                <2> 	test al, 0x10
 10017 0000802B 0F85F7FFFFFF        <2> 	jnz near .resetnicwait
 10018 00008031 8B15[24810000]      <2> 	mov edx, [.basenicaddr]
 10019 00008037 81C230000000        <2> 	add edx, .RBSTART
 10020 0000803D B8[18B60100]        <2> 	mov eax, rbuffstart
 10021 00008042 0500001000          <2> 	add eax, 0x100000 ;change virtual to physical address
 10022 00008047 EF                  <2> 	out dx, eax	;give nic receive buffer location
 10023 00008048 8B15[24810000]      <2> 	mov edx, [.basenicaddr]
 10024 0000804E 81C23C000000        <2> 	add edx, .IMR
 10025                              <2> 	;in ax, dx
 10026 00008054 66B80500            <2> 	mov ax, 5
 10027 00008058 66EF                <2> 	out dx, ax	;set both TOK and ROK interrupts
 10028 0000805A 8B15[24810000]      <2> 	mov edx, [.basenicaddr]
 10029 00008060 81C244000000        <2> 	add edx, .RCR
 10030 00008066 B802000000          <2> 	mov eax, 000010b ;receive only physical matches
 10031 0000806B 0580000000          <2> 	add eax, 128 ;enable wrap option
 10032 00008070 EF                  <2> 	out dx, eax	;recieve packets from all matches
 10033 00008071 8B15[24810000]      <2> 	mov edx, [.basenicaddr]
 10034 00008077 81C237000000        <2> 	add edx, .CMD
 10035 0000807D B00C                <2> 	mov al, 0x0C
 10036 0000807F EE                  <2> 	out dx, al	;use transmit and receive
 10037 00008080 C605[28810000]01    <2> 	mov byte [.nicconfig], 1
 10038 00008087 C3                  <2> 	ret
 10039                              <2> 	
 10040                              <2> .sendpacket:	;packet with beginning in edi and end in esi
 10041 00008088 56                  <2> 	push esi
 10042 00008089 57                  <2> 	push edi
 10043 0000808A 803D[28810000]01    <2> 	cmp byte [.nicconfig], 1
 10044 00008091 7410                <2> 	je .sendcachedata
 10045 00008093 E8DFFEFFFF          <2> 	call .init
 10046 00008098 5F                  <2> 	pop edi
 10047 00008099 5E                  <2> 	pop esi
 10048 0000809A 81FBFFFFFFFF        <2> 	cmp ebx, 0xFFFFFFFF
 10049 000080A0 75E6                <2> 	jne .sendpacket
 10050 000080A2 C3                  <2> 	ret
 10051                              <2> .sendcachedata:
 10052 000080A3 E862FFFFFF          <2> 	call .resetnic
 10053 000080A8 8B15[24810000]      <2> 	mov edx, [.basenicaddr]
 10054 000080AE 81C220000000        <2> 	add edx, .TSAD0
 10055 000080B4 5F                  <2> 	pop edi
 10056 000080B5 8B0D[29810000]      <2> 	mov ecx, [.mac]
 10057 000080BB 894F06              <2> 	mov [edi + 6], ecx
 10058 000080BE 668B0D[2D810000]    <2> 	mov cx, [.mac + 4]
 10059 000080C5 66894F0A            <2> 	mov [edi + 10], cx	;copy the correct mac
 10060 000080C9 A1[3E020000]        <2> 	mov eax, [basecache]
 10061 000080CE C1E004              <2> 	shl eax, 4
 10062 000080D1 01F8                <2> 	add eax, edi
 10063 000080D3 EF                  <2> 	out dx, eax	;here's Johnny!
 10064 000080D4 5E                  <2> 	pop esi
 10065 000080D5 29FE                <2> 	sub esi, edi
 10066 000080D7 8B15[24810000]      <2> 	mov edx, [.basenicaddr]
 10067 000080DD 81C210000000        <2> 	add edx, .TSD0
 10068 000080E3 ED                  <2> 	in eax, dx ;get tsd
 10069 000080E4 2500E0FFFF          <2> 	and eax, 0xFFFFE000 ;clear off thirteen bits
 10070 000080E9 01F0                <2> 	add eax, esi ;add length to tsd
 10071 000080EB 25FFDFFFFF          <2> 	and eax, 0xFFFFDFFF ;clear own bit
 10072 000080F0 EF                  <2> 	out dx, eax
 10073                              <2> .checknicownbit:
 10074 000080F1 8B15[24810000]      <2> 	mov edx, [.basenicaddr]
 10075 000080F7 81C210000000        <2> 	add edx, .TSD0
 10076 000080FD ED                  <2> 	in eax, dx
 10077 000080FE 2500200000          <2> 	and eax, 0x2000 ;check own bit
 10078 00008103 3D00200000          <2> 	cmp eax, 0x2000
 10079 00008108 75E7                <2> 	jne .checknicownbit
 10080                              <2> .checknictokbit:
 10081 0000810A 8B15[24810000]      <2> 	mov edx, [.basenicaddr]
 10082 00008110 81C210000000        <2> 	add edx, .TSD0
 10083 00008116 ED                  <2> 	in eax, dx
 10084 00008117 2500800000          <2> 	and eax, 0x8000	;check tok bit
 10085 0000811C 3D00800000          <2> 	cmp eax, 0x8000
 10086 00008121 75E7                <2> 	jne .checknictokbit
 10087 00008123 C3                  <2> 	ret
 10088 00008124 00000000            <2> .basenicaddr dd 0
 10089 00008128 00                  <2> .nicconfig db 0
 10090 00008129 000000000000        <2> .mac db 0,0,0,0,0,0
 10091 0000812F 52544C383133392000  <2> .name db "RTL8139 ",0
 10092 00008138 496E697469616C697A- <2> .initmsg db "Initialized",10,0
 10093 00008141 65640A00            <2>
 10094                              <2> 
 10095                              <2> .end:
 10096                              <1> %endif
 10097                              <1> %ifdef rtl8169.included
 10098                              <1> 	%include "source/drivers/network/rtl8169.asm"
 10099                              <2> ;RTL8169 NIC DRIVER
 10100                              <2> rtl8169:
 10101 00008145 E805000000          <2> 	call .init
 10102 0000814A E9C1030000          <2> 	jmp .end
 10103                              <2> 
 10104                              <2> ;REGISTERS
 10105                              <2> .CMD equ 0x37
 10106                              <2> .TXPOLL equ 0x38
 10107                              <2> .TCR equ 0x40
 10108                              <2> .RCR equ 0x44
 10109                              <2> .IMR equ 0x3C
 10110                              <2> .ISR equ 0x3E
 10111                              <2> .LOCK equ 0x50
 10112                              <2> .CONFIG1 equ 0x52
 10113                              <2> .TDSAR equ 0x20
 10114                              <2> .RDSAR equ 0xE4
 10115                              <2> .MAXRX equ 0xDA
 10116                              <2> .MAXTX equ 0xEC
 10117                              <2> ;IMPORTANT VALUES
 10118                              <2> .OWN equ 0x80000000
 10119                              <2> .EOR equ 0x40000000
 10120                              <2> .POLLING equ 0x40
 10121                              <2> ;CODE
 10122                              <2> .init:	;should find card, get mac, and initialize card
 10123 0000814F 31C0                <2> 	xor eax, eax
 10124 00008151 A2[995F0000]        <2> 	mov [pcifunction], al
 10125 00008156 A2[975F0000]        <2> 	mov [pcibus], al
 10126 0000815B A2[985F0000]        <2> 	mov [pcidevice], al
 10127 00008160 B002                <2> 	mov al, 0x02 ;type code
 10128 00008162 A2[28600000]        <2> 	mov [pcitype], al
 10129 00008167 B8EC106981          <2> 	mov eax, 0x816910EC
 10130 0000816C A3[9C5F0000]        <2> 	mov [pcidevid], eax
 10131 00008171 BBFFFFF0FF          <2> 	mov ebx, 0xFFF0FFFF
 10132 00008176 891D[A05F0000]      <2> 	mov [pcidevidmask], ebx
 10133 0000817C E82FDEFFFF          <2> 	call getpciport
 10134 00008181 81FBFFFFFFFF        <2> 	cmp ebx, 0xFFFFFFFF
 10135 00008187 7501                <2> 	jne .initnic
 10136 00008189 C3                  <2> 	ret
 10137                              <2> .initnic:
 10138 0000818A 8915[23830000]      <2> 	mov [.basenicaddr], edx
 10139 00008190 89D1                <2> 	mov ecx, edx
 10140 00008192 E81CADFFFF          <2> 	call showhex	;for debugging, please remove
 10141 00008197 BE[18B60100]        <2> 	mov esi, rbuffstart
 10142 0000819C B900200000          <2> 	mov ecx, 8192
 10143 000081A1 31C0                <2> 	xor eax, eax
 10144                              <2> .clearrbuff:		;clear receive buffer which starts at rbuffstart
 10145 000081A3 8806                <2> 	mov [esi], al
 10146 000081A5 46                  <2> 	inc esi
 10147 000081A6 6649                <2> 	dec cx
 10148 000081A8 6681F90000          <2> 	cmp cx, 0
 10149 000081AD 75F4                <2> 	jne .clearrbuff
 10150                              <2> .findmac:
 10151 000081AF 8B15[23830000]      <2> 	mov edx, [.basenicaddr]
 10152 000081B5 BF[28830000]        <2> 	mov edi, .mac
 10153 000081BA B906000000          <2> 	mov ecx, 6
 10154                              <2> .macputloop:
 10155 000081BF EC                  <2> 	in al, dx
 10156 000081C0 8807                <2> 	mov [edi], al
 10157 000081C2 47                  <2> 	inc edi
 10158 000081C3 42                  <2> 	inc edx
 10159 000081C4 49                  <2> 	dec ecx
 10160 000081C5 75F8                <2> 	jnz .macputloop
 10161 000081C7 B9[28830000]        <2> 	mov ecx, .mac
 10162 000081CC E885080000          <2> 	call showmac
 10163 000081D1 E817000000          <2> 	call .resetnic
 10164 000081D6 BE[2E830000]        <2> 	mov esi, .name
 10165 000081DB E83F9BFFFF          <2> 	call print
 10166 000081E0 BE[37830000]        <2> 	mov esi, .initmsg
 10167 000081E5 E8359BFFFF          <2> 	call print
 10168 000081EA 31DB                <2> 	xor ebx, ebx
 10169 000081EC C3                  <2> 	ret
 10170                              <2> .resetnic:
 10171 000081ED 8B15[23830000]      <2> 	mov edx, [.basenicaddr]
 10172 000081F3 81C237000000        <2> 	add edx, .CMD
 10173 000081F9 B010                <2> 	mov al, 0x10
 10174 000081FB EE                  <2> 	out dx, al	;Reset
 10175                              <2> .resetnicwait:
 10176 000081FC EC                  <2> 	in al, dx
 10177 000081FD A810                <2> 	test al, 0x10
 10178 000081FF 0F85F7FFFFFF        <2> 	jnz near .resetnicwait
 10179 00008205 8B15[23830000]      <2> 	mov edx, [.basenicaddr]
 10180 0000820B 81C250000000        <2> 	add edx, .LOCK
 10181 00008211 B0C0                <2> 	mov al, 0xC0
 10182 00008213 EE                  <2> 	out dx, al	;unlock config registers
 10183 00008214 8B15[23830000]      <2> 	mov edx, [.basenicaddr]
 10184 0000821A 81C244000000        <2> 	add edx, .RCR
 10185 00008220 B80FE70000          <2> 	mov eax, 0x0000E70F
 10186 00008225 EF                  <2> 	out dx, eax	;recieve packets from all matches
 10187 00008226 8B15[23830000]      <2> 	mov edx, [.basenicaddr]
 10188 0000822C 81C240000000        <2> 	add edx, .TCR
 10189 00008232 B800070003          <2> 	mov eax, 0x03000700
 10190 00008237 EF                  <2> 	out dx, eax	;set up tcr
 10191 00008238 8B15[23830000]      <2> 	mov edx, [.basenicaddr]
 10192 0000823E 81C2DA000000        <2> 	add edx, .MAXRX
 10193 00008244 66B8FF1F            <2> 	mov ax, 0x1FFF
 10194 00008248 66EF                <2> 	out dx, ax	;setup max rx size
 10195 0000824A 8B15[23830000]      <2> 	mov edx, [.basenicaddr]
 10196 00008250 81C2EC000000        <2> 	add edx, .MAXTX
 10197 00008256 B03B                <2> 	mov al, 0x3B
 10198 00008258 EE                  <2> 	out dx, al	;setup max tx size
 10199 00008259 8B15[23830000]      <2> 	mov edx, [.basenicaddr]
 10200 0000825F 81C220000000        <2> 	add edx, .TDSAR
 10201 00008265 A1[3E020000]        <2> 	mov eax, [basecache]
 10202 0000826A C1E004              <2> 	shl eax, 4
 10203 0000826D 05[00840000]        <2> 	add eax, .txdesc
 10204 00008272 EF                  <2> 	out dx, eax
 10205 00008273 8B15[23830000]      <2> 	mov edx, [.basenicaddr]
 10206 00008279 81C2E4000000        <2> 	add edx, .RDSAR
 10207 0000827F A1[3E020000]        <2> 	mov eax, [basecache]
 10208 00008284 C1E004              <2> 	shl eax, 4
 10209 00008287 05[00850000]        <2> 	add eax, .rxdesc
 10210 0000828C EF                  <2> 	out dx, eax
 10211 0000828D 8B15[23830000]      <2> 	mov edx, [.basenicaddr]
 10212 00008293 81C237000000        <2> 	add edx, .CMD
 10213 00008299 B00C                <2> 	mov al, 0x0C
 10214 0000829B EE                  <2> 	out dx, al	;use transmit and receive
 10215 0000829C 8B15[23830000]      <2> 	mov edx, [.basenicaddr]
 10216 000082A2 81C250000000        <2> 	add edx, .LOCK
 10217 000082A8 30C0                <2> 	xor al, al
 10218 000082AA EE                  <2> 	out dx, al
 10219 000082AB C605[27830000]01    <2> 	mov byte [.nicconfig], 1
 10220 000082B2 C3                  <2> 	ret
 10221                              <2> 	
 10222                              <2> .sendpacket:	;packet with beginning in edi and end in esi
 10223 000082B3 803D[27830000]01    <2> 	cmp byte [.nicconfig], 1
 10224 000082BA 7412                <2> 	je .sendcachedata
 10225 000082BC 56                  <2> 	push esi
 10226 000082BD 57                  <2> 	push edi
 10227 000082BE E88CFEFFFF          <2> 	call .init
 10228 000082C3 5F                  <2> 	pop edi
 10229 000082C4 5E                  <2> 	pop esi
 10230 000082C5 81FBFFFFFFFF        <2> 	cmp ebx, 0xFFFFFFFF
 10231 000082CB 75E6                <2> 	jne .sendpacket
 10232 000082CD C3                  <2> 	ret
 10233                              <2> .sendcachedata:
 10234 000082CE 8B0D[28830000]      <2> 	mov ecx, [.mac]
 10235 000082D4 894F06              <2> 	mov [edi + 6], ecx
 10236 000082D7 668B0D[2C830000]    <2> 	mov cx, [.mac + 4]
 10237 000082DE 66894F0A            <2> 	mov [edi + 10], cx	;copy the correct mac
 10238 000082E2 893D[08840000]      <2> 	mov [.txdesc + 8], edi	;put packet start in tx descriptor
 10239 000082E8 29FE                <2> 	sub esi, edi
 10240 000082EA 668935[00840000]    <2> 	mov [.txdesc], si	;put packet size in tx descriptor
 10241 000082F1 810D[00840000]0000- <2> 	or dword [.txdesc], .OWN	;set own bit
 10242 000082F9 0080                <2>
 10243 000082FB 8B15[23830000]      <2> 	mov edx, [.basenicaddr]
 10244 00008301 81C238000000        <2> 	add edx, .TXPOLL
 10245 00008307 B040                <2> 	mov al, .POLLING
 10246 00008309 EE                  <2> 	out dx, al	;set up TX Polling
 10247                              <2> .sendloop:
 10248 0000830A A1[00840000]        <2> 	mov eax, [.txdesc]
 10249 0000830F 89C1                <2> 	mov ecx, eax
 10250 00008311 E89DABFFFF          <2> 	call showhex
 10251 00008316 E8D59EFFFF          <2> 	call getchar
 10252 0000831B A900000080          <2> 	test eax, .OWN
 10253 00008320 75E8                <2> 	jnz .sendloop
 10254 00008322 C3                  <2> 	ret
 10255                              <2> 	
 10256 00008323 00000000            <2> .basenicaddr dd 0
 10257 00008327 00                  <2> .nicconfig db 0
 10258 00008328 000000000000        <2> .mac db 0,0,0,0,0,0
 10259 0000832E 52544C383136392000  <2> .name db "RTL8169 ",0
 10260 00008337 496E697469616C697A- <2> .initmsg db "Initialized",10,0
 10261 00008340 65640A00            <2>
 10262 00008344 90<rept>            <2> align 256, nop
 10263                              <2> .txdesc:
 10264 00008400 00000040            <2> 	dd .EOR	;command
 10265 00008404 00000000            <2> 	dd 0	;vlan
 10266 00008408 00000000            <2> 	dd 0	;low buf
 10267 0000840C 00000000            <2> 	dd 0	;high buf
 10268 00008410 90<rept>            <2> align 256, nop
 10269                              <2> .rxdesc:
 10270 00008500 142000C0            <2> 	dd .OWN | .EOR | (rbuffend - rbuffstart)	;command
 10271 00008504 00000000            <2> 	dd 0	;vlan
 10272 00008508 [18B60100]          <2> 	dd rbuffstart	;low buf
 10273 0000850C 00000000            <2> 	dd 0	;high buf
 10274                              <2> .end:
 10275                              <1> %endif
 10276                              <1> %ifdef ne2000.included
 10277                              <1> 	%include "source/drivers/network/ne2000.asm"
 10278                              <2> ne2000:
 10279 00008510 E805000000          <2> 	call .init
 10280 00008515 E93C030000          <2> 	jmp .end
 10281                              <2> 
 10282                              <2> ;	PAGE0			PAGE 1			PAGE 2
 10283                              <2> ;	READ	WRITE	READ	WRITE	READ	WRITE
 10284                              <2> ;0	CR		CR		CR		CR		CR		CR
 10285                              <2> ;1	CLDA0 	PSTART	PAR0	PAR0	PSTART	CLDA0
 10286                              <2> ;2	CLDA1	PSTOP	PAR1	PAR1	PSTOP	CLDA1
 10287                              <2> ;3	BNRY	BNRY	PAR2	PAR2	RNPP	RNPP
 10288                              <2> ;4	TSR		TPSR	PAR3	PAR3	TPSR	N/A
 10289                              <2> ;5	NCR		TBCR0	PAR4	PAR4	LNPP	LNPP
 10290                              <2> ;6	FIFO	TCBR1	PAR5	PAR5	ACU		ACU
 10291                              <2> ;7	ISR		ISR		CURR	CURR	ACL		ACL
 10292                              <2> ;8	CRDA0	RSAR0	MAR0	MAR0	N/A		N/A
 10293                              <2> ;9	CRDA1	RSAR1	MAR1	MAR1	N/A		N/A
 10294                              <2> ;A	N/A		RBCR0	MAR2	MAR2	N/A		N/A
 10295                              <2> ;B	N/A		RBCR1	MAR3	MAR3	N/A		N/A
 10296                              <2> ;C	RSR		RCR		MAR4	MAR4	RCR		N/A
 10297                              <2> ;D	CNTR0	TCR		MAR5	MAR5	TCR		N/A
 10298                              <2> ;E	CNTR1	DCR		MAR6	MAR6	DCR		N/A
 10299                              <2> ;F	CNTR2	IMR		MAR7	MAR7	IMR		N/A
 10300                              <2> .CR equ 0
 10301                              <2> 	.CR.STP	equ 1		;Stop
 10302                              <2> 	.CR.STA equ 2		;Start
 10303                              <2> 	.CR.TXP equ 4		;Transmit
 10304                              <2> 	.CR.RD0 equ 8		;Remote DMA 0
 10305                              <2> 	.CR.RD1 equ 0x10	;Remote DMA 1
 10306                              <2> 	.CR.RD2 equ 0x20	;Remote DMA 2
 10307                              <2> 	.CR.PS0 equ 0x40	;Page Select 0
 10308                              <2> 	.CR.PS1 equ 0x80	;Page Select 1
 10309                              <2> .PSTART equ 1
 10310                              <2> .PSTOP equ 2
 10311                              <2> .BNRY equ 3
 10312                              <2> .ISR equ 7
 10313                              <2> 	.ISR.PRX equ 1		;Packet Received
 10314                              <2> 	.ISR.PTX equ 2		;Packet Transmitted
 10315                              <2> 	.ISR.RXE equ 4		;Receive Error
 10316                              <2> 	.ISR.TXE equ 8		;Transmission Error
 10317                              <2> 	.ISR.OVW equ 0x10	;Overwrite
 10318                              <2> 	.ISR.CNT equ 0x20	;Counter Overflow
 10319                              <2> 	.ISR.RDC equ 0x40	;Remote Data Complete
 10320                              <2> 	.ISR.RST equ 0x80	;Reset status
 10321                              <2> .RSAR0 equ 8
 10322                              <2> .RSAR1 equ 9
 10323                              <2> .RBCR0 equ 0xA
 10324                              <2> .RBCR1 equ 0xB
 10325                              <2> .RCR equ 0xC
 10326                              <2> 	.RCR.SEP equ 1		;Save Errored Packets
 10327                              <2> 	.RCR.AR equ 2		;Accept Runt packet
 10328                              <2> 	.RCR.AB equ 4		;Accept Broadcast
 10329                              <2> 	.RCR.AM equ 8		;Accept Multicast
 10330                              <2> 	.RCR.PRO equ 0x10	;Promiscuous Physical
 10331                              <2> 	.RCR.MON equ 0x20	;Monitor Mode
 10332                              <2> .DCR equ 0xE
 10333                              <2> 	.DCR.WTS equ 1		;Word Transfer Select
 10334                              <2> 	.DCR.BOS equ 2		;Byte Order Select
 10335                              <2> 	.DCR.LAS equ 4		;Long Address Select
 10336                              <2> 	.DCR.LS equ 8		;Loopback Select
 10337                              <2> 	.DCR.AR equ 0x10	;Auto-initialize Remote
 10338                              <2> 	.DCR.FT0 equ 0x20	;FIFO Threshold Select 0
 10339                              <2> 	.DCR.FT1 equ 0x40	;FIFO Threshold Select 1
 10340                              <2> .ASIC equ 0x10
 10341                              <2> .RESET equ 0x1F
 10342                              <2> 
 10343                              <2> .init:
 10344 0000851A BBFFFFFFFF          <2> 	mov ebx, 0xFFFFFFFF
 10345 0000851F 31C0                <2> 	xor eax, eax
 10346 00008521 A2[995F0000]        <2> 	mov [pcifunction], al
 10347 00008526 A2[975F0000]        <2> 	mov [pcibus], al
 10348 0000852B A2[985F0000]        <2> 	mov [pcidevice], al
 10349 00008530 B002                <2> 	mov al, 2 ;type code
 10350 00008532 A2[28600000]        <2> 	mov [pcitype], al
 10351 00008537 B8EC102980          <2> 	mov eax, 0x802910EC
 10352 0000853C A3[9C5F0000]        <2> 	mov [pcidevid], eax
 10353 00008541 E86ADAFFFF          <2> 	call getpciport
 10354 00008546 81FBFFFFFFFF        <2> 	cmp ebx, 0xFFFFFFFF
 10355 0000854C 7501                <2> 	jne .good0
 10356 0000854E C3                  <2> 	ret
 10357                              <2> .good0:
 10358 0000854F 8915[19880000]      <2> 	mov [.basenicaddr], edx
 10359 00008555 89D1                <2> 	mov ecx, edx
 10360                              <2> .test:
 10361 00008557 E854000000          <2> 	call .reset
 10362 0000855C E87B000000          <2> 	call .stop
 10363 00008561 89CA                <2> 	mov edx, ecx
 10364 00008563 B9FF000000          <2> 	mov ecx, 0xFF
 10365 00008568 E2FE                <2> 	loop $ ;wait for ~100 us
 10366 0000856A 89D1                <2> 	mov ecx, edx
 10367 0000856C EC                  <2> 	in al, dx
 10368 0000856D 2427                <2> 	and al, (.CR.RD2 | .CR.TXP | .CR.STA | .CR.STP)
 10369 0000856F 3C21                <2> 	cmp al, (.CR.RD2 | .CR.STP)
 10370 00008571 7410                <2> 	je .good1
 10371 00008573 89CA                <2> 	mov edx, ecx
 10372 00008575 81C207000000        <2> 	add edx, .ISR
 10373 0000857B EC                  <2> 	in al, dx
 10374 0000857C 2480                <2> 	and al, .ISR.RST
 10375 0000857E 3C80                <2> 	cmp al, .ISR.RST
 10376 00008580 7401                <2> 	je .good1
 10377 00008582 C3                  <2> 	ret
 10378                              <2> .good1:
 10379 00008583 E82BA9FFFF          <2> call showhex	;for debugging, please remove
 10380 00008588 E85B000000          <2> 	call .setup
 10381 0000858D E8C4040000          <2> call showmac
 10382 00008592 BE[1E880000]        <2> mov esi, .name
 10383 00008597 E88397FFFF          <2> call print
 10384 0000859C BE[26880000]        <2> mov esi, .initmsg
 10385 000085A1 E87997FFFF          <2> call print
 10386 000085A6 C605[1D880000]01    <2> 	mov byte [.nicconfig], 1
 10387 000085AD 31DB                <2> 	xor ebx, ebx
 10388 000085AF C3                  <2> 	ret
 10389                              <2> .reset:
 10390 000085B0 8B15[19880000]      <2> 	mov edx, [.basenicaddr]
 10391 000085B6 81C21F000000        <2> 	add edx, .RESET
 10392 000085BC EC                  <2> 	in al, dx
 10393 000085BD EE                  <2> 	out dx, al ;write its contents to itself
 10394 000085BE C3                  <2> 	ret
 10395                              <2> .page:
 10396 000085BF 66C1E00E            <2> 	shl ax, 14
 10397 000085C3 8B15[19880000]      <2> 	mov edx, [.basenicaddr]
 10398 000085C9 EC                  <2> 	in al, dx
 10399 000085CA 243F                <2> 	and al, 00111111b
 10400 000085CC 08E0                <2> 	or al, ah
 10401 000085CE EE                  <2> 	out dx, al
 10402 000085CF C3                  <2> 	ret
 10403                              <2> .start:
 10404 000085D0 8B15[19880000]      <2> 	mov edx, [.basenicaddr]
 10405 000085D6 B020                <2> 	mov al, .CR.RD2
 10406 000085D8 B002                <2> 	mov al, .CR.STA
 10407 000085DA EE                  <2> 	out dx, al
 10408 000085DB C3                  <2> 	ret
 10409                              <2> .stop:
 10410 000085DC 8B15[19880000]      <2> 	mov edx, [.basenicaddr]
 10411 000085E2 B020                <2> 	mov al, .CR.RD2
 10412 000085E4 0C01                <2> 	or al, .CR.STP
 10413 000085E6 EE                  <2> 	out dx, al
 10414 000085E7 C3                  <2> 	ret
 10415                              <2> .setup:
 10416 000085E8 E8EFFFFFFF          <2> 	call .stop
 10417 000085ED 8B15[19880000]      <2> 	mov edx, [.basenicaddr]
 10418 000085F3 81C20E000000        <2> 	add edx, .DCR
 10419 000085F9 B040                <2> 	mov al, .DCR.FT1
 10420 000085FB 0C01                <2> 	or al, .DCR.WTS
 10421 000085FD 0C08                <2> 	or al, .DCR.LS
 10422 000085FF EE                  <2> 	out dx, al ;Set FIFO threshold, byte order, word-wide DMA
 10423 00008600 E8B9000000          <2> 	call .getmac
 10424 00008605 E8D2FFFFFF          <2> 	call .stop
 10425 0000860A 30C0                <2> 	xor al, al
 10426 0000860C 8B15[19880000]      <2> 	mov edx, [.basenicaddr]
 10427 00008612 81C20A000000        <2> 	add edx, .RBCR0
 10428 00008618 EE                  <2> 	out dx, al
 10429 00008619 6642                <2> 	inc dx
 10430 0000861B EE                  <2> 	out dx, al ;Clear byte count
 10431 0000861C B800400000          <2> 	mov eax, 16*1024
 10432 00008621 A3[38880000]        <2> 	mov [.ringstart], eax
 10433 00008626 C1E808              <2> 	shr eax, 8
 10434 00008629 66A3[34880000]      <2> 	mov [.pagestart], ax
 10435 0000862F 0534000000          <2> 	add eax, 64-2*6
 10436 00008634 A3[36880000]        <2> 	mov [.pageend], eax
 10437 00008639 C1E008              <2> 	shl eax, 8
 10438 0000863C 66A3[3C880000]      <2> 	mov [.ringend], ax ;set page and ring starts and ends
 10439 00008642 8B15[19880000]      <2> 	mov edx, [.basenicaddr]
 10440 00008648 81C201000000        <2> 	add edx, .PSTART
 10441 0000864E A0[34880000]        <2> 	mov al, [.pagestart]
 10442 00008653 EE                  <2> 	out dx, al
 10443 00008654 A0[36880000]        <2> 	mov al, [.pageend]
 10444 00008659 6642                <2> 	inc dx
 10445 0000865B EE                  <2> 	out dx, al
 10446 0000865C A0[34880000]        <2> 	mov al, [.pagestart]
 10447 00008661 6642                <2> 	inc dx
 10448 00008663 EE                  <2> 	out dx, al
 10449 00008664 E873FFFFFF          <2> 	call .stop
 10450                              <2> ;INSERT INTERRUPT ENABLE HERE
 10451 00008669 B001                <2> 	mov al, 1
 10452 0000866B E84FFFFFFF          <2> 	call .page
 10453 00008670 8B15[19880000]      <2> 	mov edx, [.basenicaddr]
 10454 00008676 BF[46880000]        <2> 	mov edi, .rom
 10455                              <2> .copymactocard:
 10456 0000867B 42                  <2> 	inc edx
 10457 0000867C 6E                  <2> 	outsb
 10458 0000867D 81C702000000        <2> 	add edi, 2
 10459 00008683 81FA06000000        <2> 	cmp edx, 6
 10460 00008689 76F0                <2> 	jbe .copymactocard
 10461 0000868B 8B15[19880000]      <2> 	mov edx, [.basenicaddr]
 10462 00008691 81C207000000        <2> 	add edx, 7
 10463 00008697 A0[34880000]        <2> 	mov al, [.pagestart]
 10464 0000869C FEC0                <2> 	inc al
 10465 0000869E EE                  <2> 	out dx, al ;set page in CURR register
 10466                              <2> ;INSERT MULTICAST INIT HERE
 10467 0000869F E838FFFFFF          <2> 	call .stop
 10468 000086A4 8B15[19880000]      <2> 	mov edx, [.basenicaddr]
 10469 000086AA 81C20C000000        <2> 	add edx, .RCR
 10470 000086B0 B004                <2> 	mov al, .RCR.AB
 10471 000086B2 EE                  <2> 	out dx, al ;accept broadcast
 10472 000086B3 6642                <2> 	inc dx
 10473 000086B5 30C0                <2> 	xor al, al
 10474 000086B7 EE                  <2> 	out dx, al ;stop loopback
 10475 000086B8 E813FFFFFF          <2> 	call .start
 10476 000086BD C3                  <2> 	ret
 10477                              <2> .getmac:
 10478 000086BE 8B15[19880000]      <2> 	mov edx, [.basenicaddr]
 10479 000086C4 B020                <2> 	mov al, 0x20
 10480 000086C6 0C02                <2> 	or al, 2
 10481 000086C8 EE                  <2> 	out dx, al	;set STA and RD2 bits
 10482 000086C9 6681C20A00          <2> 	add dx, .RBCR0
 10483 000086CE B010                <2> 	mov al, 16
 10484 000086D0 EE                  <2> 	out dx, al
 10485 000086D1 6642                <2> 	inc dx
 10486 000086D3 30C0                <2> 	xor al, al
 10487 000086D5 EE                  <2> 	out dx, al
 10488 000086D6 8B15[19880000]      <2> 	mov edx, [.basenicaddr]
 10489 000086DC 6681C20800          <2> 	add dx, .RSAR0
 10490 000086E1 EE                  <2> 	out dx, al
 10491 000086E2 6642                <2> 	inc dx
 10492 000086E4 EE                  <2> 	out dx, al
 10493 000086E5 668B15[19880000]    <2> 	mov dx, [.basenicaddr]
 10494 000086EC B008                <2> 	mov al, 8
 10495 000086EE 0C02                <2> 	or al, 2
 10496 000086F0 EE                  <2> 	out dx, al
 10497 000086F1 668B15[19880000]    <2> 	mov dx, [.basenicaddr]
 10498 000086F8 6681C21000          <2> 	add dx, .ASIC
 10499 000086FD B908000000          <2> 	mov ecx, 8
 10500 00008702 BF[46880000]        <2> 	mov edi, .rom
 10501 00008707 F3666D              <2> 	rep insw
 10502                              <2> .copymac:
 10503 0000870A BF[46880000]        <2> 	mov edi, .rom
 10504 0000870F BE[40880000]        <2> 	mov esi, .mac
 10505 00008714 B906000000          <2> 	mov ecx, 6
 10506                              <2> .lpmac:
 10507 00008719 8A07                <2> 	mov al, [edi]
 10508 0000871B 8806                <2> 	mov [esi], al
 10509 0000871D 81C702000000        <2> 	add edi, 2
 10510 00008723 46                  <2> 	inc esi
 10511 00008724 E2F3                <2> 	loop .lpmac
 10512 00008726 B9[40880000]        <2> 	mov ecx, .mac
 10513 0000872B C3                  <2> 	ret
 10514                              <2> .sendpacket:
 10515 0000872C 803D[1D880000]00    <2> 	cmp byte [.nicconfig], 0
 10516 00008733 7512                <2> 	jne .sendit
 10517 00008735 56                  <2> 	push esi
 10518 00008736 57                  <2> 	push edi
 10519 00008737 E8DEFDFFFF          <2> 	call .init
 10520 0000873C 5F                  <2> 	pop edi
 10521 0000873D 5E                  <2> 	pop esi
 10522 0000873E 81FB00000000        <2> 	cmp ebx, 0
 10523 00008744 7401                <2> 	je .sendit
 10524 00008746 C3                  <2> 	ret
 10525                              <2> .sendit: ;packet start in edi, end in esi
 10526 00008747 87F7                <2> 	xchg esi, edi ;this helps with the outsw
 10527                              <2> 	;now the packet start is in esi, end in edi
 10528 00008749 8B0D[40880000]      <2> 	mov ecx, [.mac]
 10529 0000874F 894E06              <2> 	mov [esi + 6], ecx
 10530 00008752 668B0D[44880000]    <2> 	mov cx, [.mac + 4]
 10531 00008759 66894E0A            <2> 	mov [esi + 10], cx	;copy the correct mac
 10532 0000875D 8B15[19880000]      <2> 	mov edx, [.basenicaddr]
 10533 00008763 B020                <2> 	mov al, .CR.RD2
 10534 00008765 0C02                <2> 	or al, .CR.STA
 10535 00008767 EE                  <2> 	out dx, al ;set RD2 and STA
 10536 00008768 81C207000000        <2> 	add edx, .ISR ; ISR
 10537 0000876E B040                <2> 	mov al, .ISR.RDC
 10538 00008770 EE                  <2> 	out dx, al ;set RDC flag
 10539 00008771 8B15[19880000]      <2> 	mov edx, [.basenicaddr]
 10540 00008777 6681C20A00          <2> 	add dx, .RBCR0
 10541 0000877C 89F8                <2> 	mov eax, edi
 10542 0000877E 29F0                <2> 	sub eax, esi
 10543 00008780 BB01000000          <2> 	mov ebx, 1
 10544 00008785 21C3                <2> 	and ebx, eax
 10545 00008787 81FB01000000        <2> 	cmp ebx, 1
 10546 0000878D 7501                <2> 	jne .nofixword
 10547 0000878F 40                  <2> 	inc eax
 10548                              <2> .nofixword:
 10549 00008790 89C1                <2> 	mov ecx, eax ;save length in ecx
 10550 00008792 EE                  <2> 	out dx, al
 10551 00008793 86C4                <2> 	xchg al, ah
 10552 00008795 6642                <2> 	inc dx
 10553 00008797 EE                  <2> 	out dx, al ;send size
 10554 00008798 8B15[19880000]      <2> 	mov edx, [.basenicaddr]
 10555 0000879E 6681C20800          <2> 	add dx, .RSAR0
 10556 000087A3 66A1[34880000]      <2> 	mov ax, [.pagestart]
 10557 000087A9 C1E008              <2> 	shl eax, 8
 10558 000087AC EE                  <2> 	out dx, al
 10559 000087AD 86C4                <2> 	xchg al, ah
 10560 000087AF 6642                <2> 	inc dx
 10561 000087B1 EE                  <2> 	out dx, al ;send address in NIC memory
 10562 000087B2 8B15[19880000]      <2> 	mov edx, [.basenicaddr]
 10563 000087B8 B010                <2> 	mov al, .CR.RD1
 10564 000087BA 0C02                <2> 	or al, .CR.STA
 10565 000087BC EE                  <2> 	out dx, al ;set RD and STA
 10566 000087BD 89CB                <2> 	mov ebx, ecx ;save length in ebx
 10567 000087BF D1E9                <2> 	shr ecx, 1
 10568 000087C1 8B15[19880000]      <2> 	mov edx, [.basenicaddr]
 10569 000087C7 6681C21000          <2> 	add dx, 0x10
 10570 000087CC F3666F              <2> 	rep outsw ;Send the packet data
 10571 000087CF 8B15[19880000]      <2> 	mov edx, [.basenicaddr]
 10572 000087D5 6681C20700          <2> 	add dx, .ISR
 10573                              <2> .chkcopylp:
 10574 000087DA B440                <2> 	mov ah, .ISR.RDC
 10575 000087DC EC                  <2> 	in al, dx
 10576 000087DD 20C4                <2> 	and ah, al
 10577 000087DF 80FC40              <2> 	cmp ah, 0x40
 10578 000087E2 75F6                <2> 	jne .chkcopylp	
 10579 000087E4 8B15[19880000]      <2> 	mov edx, [.basenicaddr]
 10580 000087EA 6681C20400          <2> 	add dx, 4
 10581 000087EF A0[34880000]        <2> 	mov al, [.pagestart]
 10582 000087F4 EE                  <2> 	out dx, al ;send start address in pages
 10583 000087F5 8B15[19880000]      <2> 	mov edx, [.basenicaddr]
 10584 000087FB 81C205000000        <2> 	add edx, 0x5
 10585 00008801 89D8                <2> 	mov eax, ebx
 10586 00008803 EE                  <2> 	out dx, al
 10587 00008804 86C4                <2> 	xchg al, ah
 10588 00008806 6642                <2> 	inc dx
 10589 00008808 EE                  <2> 	out dx, al ;send length
 10590 00008809 8B15[19880000]      <2> 	mov edx, [.basenicaddr]
 10591 0000880F B020                <2> 	mov al, 0x20
 10592 00008811 0C04                <2> 	or al, 4
 10593 00008813 0C02                <2> 	or al, 2
 10594 00008815 EE                  <2> 	out dx, al ;set RD2, TXP, and STA
 10595 00008816 31DB                <2> 	xor ebx, ebx
 10596 00008818 C3                  <2> 	ret
 10597 00008819 00000000            <2> .basenicaddr dd 0
 10598 0000881D 00                  <2> .nicconfig db 0
 10599 0000881E 4E45323030302000    <2> .name db "NE2000 ",0
 10600 00008826 496E697469616C697A- <2> .initmsg db "Initialized.",10,0
 10601 0000882F 65642E0A00          <2>
 10602                              <2> align 2, nop
 10603 00008834 0000                <2> .pagestart dw 0
 10604 00008836 0000                <2> .pageend dw 0
 10605 00008838 00000000            <2> .ringstart dd 0
 10606 0000883C 00000000            <2> .ringend dd 0
 10607 00008840 000000000000        <2> .mac db 0,0,0,0,0,0
 10608 00008846 00<rept>            <2> .rom times 16 db 0
 10609                              <2> 
 10610                              <2> .end:
 10611                              <1> %endif
 10612                              <1> %ifdef i8254x.included
 10613                              <1> 	%include "source/drivers/network/i8254x.asm"
 10614                              <2> ;Intel 8254x NIC DRIVER
 10615                              <2> i8254x:
 10616 00008856 E805000000          <2> 	call .init
 10617 0000885B E933010000          <2> 	jmp .end
 10618                              <2> 
 10619                              <2> ;REGISTERS
 10620                              <2> .EEC equ 0x10
 10621                              <2> .EERD equ 0x14
 10622                              <2> .RAL equ 0x5400
 10623                              <2> .RAH equ 0x5404
 10624                              <2> ;CODE
 10625                              <2> .init:	;should find card, get mac, and initialize card
 10626 00008860 31C0                <2> 	xor eax, eax
 10627 00008862 A2[995F0000]        <2> 	mov [pcifunction], al
 10628 00008867 A2[975F0000]        <2> 	mov [pcibus], al
 10629 0000886C A2[985F0000]        <2> 	mov [pcidevice], al
 10630 00008871 B002                <2> 	mov al, 0x02 ;type code
 10631 00008873 A2[28600000]        <2> 	mov [pcitype], al
 10632 00008878 B886800010          <2> 	mov eax, 0x10008086
 10633 0000887D A3[9C5F0000]        <2> 	mov [pcidevid], eax
 10634 00008882 BBFFFF00FE          <2> 	mov ebx, 0xFE00FFFF
 10635 00008887 891D[A05F0000]      <2> 	mov [pcidevidmask], ebx
 10636 0000888D E812D7FFFF          <2> 	call getpcimem
 10637 00008892 81FBFFFFFFFF        <2> 	cmp ebx, 0xFFFFFFFF
 10638 00008898 7501                <2> 	jne .initnic
 10639 0000889A C3                  <2> 	ret
 10640                              <2> .initnic:
 10641 0000889B 8915[73890000]      <2> 	mov [.basenicaddr], edx
 10642 000088A1 89D1                <2> 	mov ecx, edx
 10643 000088A3 E80BA6FFFF          <2> 	call showhex	;for debugging, please remove
 10644 000088A8 BE[18B60100]        <2> 	mov esi, rbuffstart
 10645 000088AD B900200000          <2> 	mov ecx, 8192
 10646 000088B2 31C0                <2> 	xor eax, eax
 10647                              <2> .clearrbuff:		;clear receive buffer which starts at rbuffstart
 10648 000088B4 8806                <2> 	mov [esi], al
 10649 000088B6 46                  <2> 	inc esi
 10650 000088B7 6649                <2> 	dec cx
 10651 000088B9 6681F90000          <2> 	cmp cx, 0
 10652 000088BE 75F4                <2> 	jne .clearrbuff
 10653                              <2> .findmac:
 10654 000088C0 BF[78890000]        <2> 	mov edi, .mac
 10655 000088C5 8B1D[73890000]      <2> 	mov ebx, [.basenicaddr]
 10656 000088CB 81C300540000        <2> 	add ebx, .RAL
 10657 000088D1 31D2                <2> 	xor edx, edx
 10658 000088D3 B903000000          <2> 	mov ecx, 3
 10659                              <2> .macloop:
 10660 000088D8 E84A000000          <2> 	call .eepromread
 10661 000088DD 668907              <2> 	mov [edi], ax
 10662 000088E0 668903              <2> 	mov [ebx], ax
 10663 000088E3 42                  <2> 	inc edx
 10664 000088E4 81C302000000        <2> 	add ebx, 2
 10665 000088EA 81C702000000        <2> 	add edi, 2
 10666 000088F0 E2E6                <2> 	loop .macloop
 10667 000088F2 66B80080            <2> 	mov ax, 0x8000
 10668 000088F6 668903              <2> 	mov [ebx], ax	;set address valid bit
 10669                              <2> 
 10670 000088F9 B9[78890000]        <2> 	mov ecx, .mac
 10671 000088FE E853010000          <2> 	call showmac
 10672 00008903 E817000000          <2> 	call .resetnic
 10673 00008908 BE[7E890000]        <2> 	mov esi, .name
 10674 0000890D E80D94FFFF          <2> 	call print
 10675 00008912 BE[86890000]        <2> 	mov esi, .initmsg
 10676 00008917 E80394FFFF          <2> 	call print
 10677 0000891C 31DB                <2> 	xor ebx, ebx
 10678 0000891E C3                  <2> 	ret
 10679                              <2> .resetnic:
 10680 0000891F C605[77890000]01    <2> 	mov byte [.nicconfig], 1
 10681 00008926 C3                  <2> 	ret
 10682                              <2> 
 10683                              <2> .eepromread:	;location in EEPROM in edx (actually just dl)
 10684 00008927 8B35[73890000]      <2> 	mov esi, [.basenicaddr]
 10685 0000892D 8B4610              <2> 	mov eax, [esi + .EEC]
 10686 00008930 0D40000000          <2> 	or eax, 1000000b
 10687 00008935 894610              <2> 	mov [esi + .EEC], eax	;turn software access on
 10688                              <2> .waiteeprom:
 10689 00008938 8B4610              <2> 	mov eax, [esi + .EEC]
 10690 0000893B 2580000000          <2> 	and eax, 10000000b
 10691 00008940 3D80000000          <2> 	cmp eax, 10000000b
 10692 00008945 75F1                <2> 	jne .waiteeprom
 10693 00008947 8B4614              <2> 	mov eax, [esi + .EERD]
 10694 0000894A 31C0                <2> 	xor eax, eax
 10695 0000894C 88D4                <2> 	mov ah, dl 	;eeprom address
 10696 0000894E 0C01                <2> 	or al, 1	;start read
 10697 00008950 894614              <2> 	mov [esi + .EERD], eax
 10698                              <2> .waiteepromread:
 10699 00008953 8B4614              <2> 	mov eax, [esi + .EERD]
 10700 00008956 2510000000          <2> 	and eax, 10000b
 10701 0000895B 3D10000000          <2> 	cmp eax, 10000b
 10702 00008960 75F1                <2> 	jne .waiteepromread
 10703 00008962 8B4614              <2> 	mov eax, [esi + .EERD]
 10704 00008965 668B4610            <2> 	mov ax, [esi + .EEC]
 10705 00008969 24BF                <2> 	and al, 10111111b
 10706 0000896B 66894610            <2> 	mov [esi + .EEC], ax	;turn software access off
 10707 0000896F C1E810              <2> 	shr eax, 16	;AX has the requested word
 10708 00008972 C3                  <2> 	ret
 10709                              <2> 	
 10710 00008973 00000000            <2> .basenicaddr dd 0
 10711 00008977 00                  <2> .nicconfig db 0
 10712 00008978 000000000000        <2> .mac db 0,0,0,0,0,0
 10713 0000897E 4938323534582000    <2> .name db "I8254X ",0
 10714 00008986 496E697469616C697A- <2> .initmsg db "Initialized",10,0
 10715 0000898F 65640A00            <2>
 10716                              <2> .end:
 10717                              <1> %endif
 10718 00008993 C3                  <1> 	ret
 10719                              <1> 
 10720                              <1> sendpacket: ;packet start in edi, end in esi
 10721                              <1> 	%ifdef rtl8139.included
 10722 00008994 57                  <1> 		push edi
 10723 00008995 56                  <1> 		push esi
 10724 00008996 E8EDF6FFFF          <1> 		call rtl8139.sendpacket
 10725 0000899B 5E                  <1> 		pop esi
 10726 0000899C 5F                  <1> 		pop edi
 10727                              <1> 	%endif
 10728                              <1> 	%ifdef rtl8169.included
 10729 0000899D 57                  <1> 		push edi
 10730 0000899E 56                  <1> 		push esi
 10731 0000899F E80FF9FFFF          <1> 		call rtl8169.sendpacket
 10732 000089A4 5E                  <1> 		pop esi
 10733 000089A5 5F                  <1> 		pop edi
 10734                              <1> 	%endif
 10735                              <1> 	%ifdef ne2000.included
 10736 000089A6 E881FDFFFF          <1> 		call ne2000.sendpacket
 10737                              <1> 	%endif
 10738 000089AB C3                  <1> 	ret
 10739                              <1> 
 10740                              <1> getchecksum: ;start in edi, end in esi, checksum put in ecx
 10741 000089AC 31C0                <1> 	xor eax, eax
 10742 000089AE 31DB                <1> 	xor ebx, ebx
 10743 000089B0 31C9                <1> 	xor ecx, ecx
 10744                              <1> .lp:
 10745 000089B2 8A07                <1> 	mov al, [edi]
 10746 000089B4 8A6701              <1> 	mov ah, [edi + 1]
 10747 000089B7 01C3                <1> 	add ebx, eax
 10748 000089B9 81C702000000        <1> 	add edi, 2
 10749 000089BF 39F7                <1> 	cmp edi, esi
 10750 000089C1 72EF                <1> 	jb .lp
 10751 000089C3 66B9FFFF            <1> 	mov cx, 0xFFFF
 10752 000089C7 6689D8              <1> 	mov ax, bx
 10753 000089CA C1EB10              <1> 	shr ebx, 16
 10754 000089CD 6601D8              <1> 	add ax, bx
 10755 000089D0 6629C1              <1> 	sub cx, ax
 10756 000089D3 C3                  <1> 	ret
 10757                              <1> 	
 10758                              <1> strtoip:	;string in esi with format X.X.X.X converted to number in ecx
 10759 000089D4 31DB                <1> 	xor ebx, ebx
 10760 000089D6 31C9                <1> 	xor ecx, ecx
 10761 000089D8 31D2                <1> 	xor edx, edx
 10762                              <1> .mlp:
 10763 000089DA 89F7                <1> 	mov edi, esi
 10764 000089DC 4F                  <1> 	dec edi
 10765                              <1> .lp:
 10766 000089DD 47                  <1> 	inc edi
 10767 000089DE 8A07                <1> 	mov al, [edi]
 10768 000089E0 3C20                <1> 	cmp al, " "
 10769 000089E2 7408                <1> 	je .dnlp
 10770 000089E4 3C00                <1> 	cmp al, 0
 10771 000089E6 7404                <1> 	je .dnlp
 10772 000089E8 3C2E                <1> 	cmp al, "."
 10773 000089EA 75F1                <1> 	jne .lp
 10774                              <1> .dnlp:
 10775 000089EC 30C0                <1> 	xor al, al
 10776 000089EE 8807                <1> 	mov [edi], al
 10777 000089F0 53                  <1> 	push ebx
 10778 000089F1 56                  <1> 	push esi
 10779 000089F2 57                  <1> 	push edi
 10780 000089F3 31FF                <1> 	xor edi, edi
 10781 000089F5 E865A6FFFF          <1> 	call cnvrttxt
 10782 000089FA 5E                  <1> 	pop esi
 10783 000089FB 5F                  <1> 	pop edi ;i intentionally switch them
 10784 000089FC 5B                  <1> 	pop ebx
 10785 000089FD 46                  <1> 	inc esi
 10786 000089FE BF[168A0000]        <1> 	mov edi, ipstr
 10787 00008A03 880C1F              <1> 	mov [edi + ebx], cl
 10788 00008A06 43                  <1> 	inc ebx
 10789 00008A07 81FB04000000        <1> 	cmp ebx, 4
 10790 00008A0D 72CB                <1> 	jb .mlp
 10791 00008A0F 8B0D[168A0000]      <1> 	mov ecx, [ipstr]
 10792 00008A15 C3                  <1> 	ret
 10793 00008A16 00000000            <1> ipstr dd 0
 10794                              <1> showip: 	;put the ip address in ecx
 10795 00008A1A 89C8                <1> 	mov eax, ecx
 10796 00008A1C 30DB                <1> 	xor bl, bl
 10797                              <1> .lp:
 10798 00008A1E 3C00                <1> 	cmp al, 0
 10799 00008A20 750B                <1> 	jne .nozeroprint
 10800 00008A22 B030                <1> 	mov al, "0"
 10801 00008A24 50                  <1> 	push eax
 10802 00008A25 E83C98FFFF          <1> 	call prcharq
 10803 00008A2A 58                  <1> 	pop eax
 10804 00008A2B 30C0                <1> 	xor al, al
 10805                              <1> .nozeroprint:
 10806 00008A2D 31C9                <1> 	xor ecx, ecx
 10807 00008A2F 88C1                <1> 	mov cl, al
 10808 00008A31 E847A5FFFF          <1> 	call showdec
 10809 00008A36 C1E808              <1> 	shr eax, 8
 10810 00008A39 FEC3                <1> 	inc bl
 10811 00008A3B 80FB04              <1> 	cmp bl, 4
 10812 00008A3E 7312                <1> 	jae .done
 10813 00008A40 50                  <1> 	push eax
 10814 00008A41 6653                <1> 	push bx
 10815 00008A43 BE[538A0000]        <1> 	mov esi, .dot
 10816 00008A48 E8D292FFFF          <1> 	call print
 10817 00008A4D 665B                <1> 	pop bx
 10818 00008A4F 58                  <1> 	pop eax
 10819 00008A50 EBCC                <1> 	jmp .lp
 10820                              <1> .done:
 10821 00008A52 C3                  <1> 	ret
 10822 00008A53 082E00              <1> .dot db 8,".",0
 10823                              <1> showmac:	;mac begins in [ecx]
 10824 00008A56 BE[A68A0000]        <1> 	mov esi, macprint
 10825 00008A5B 89CF                <1> 	mov edi, ecx
 10826 00008A5D 81C106000000        <1> 	add ecx, 6
 10827                              <1> showmacloop:
 10828 00008A63 8A07                <1> 	mov al, [edi]
 10829 00008A65 8A27                <1> 	mov ah, [edi]
 10830 00008A67 C0E804              <1> 	shr al, 4
 10831 00008A6A C0E404              <1> 	shl ah, 4
 10832 00008A6D C0EC04              <1> 	shr ah, 4
 10833 00008A70 0430                <1> 	add al, 48
 10834 00008A72 3C39                <1> 	cmp al, "9"
 10835 00008A74 7606                <1> 	jbe .goodal
 10836 00008A76 2C30                <1> 	sub al, 48
 10837 00008A78 2C0A                <1> 	sub al, 0xA
 10838 00008A7A 0441                <1> 	add al, "A"
 10839                              <1> .goodal:
 10840 00008A7C 80C430              <1> 	add ah, 48
 10841 00008A7F 80FC39              <1> 	cmp ah, "9"
 10842 00008A82 7609                <1> 	jbe .goodah
 10843 00008A84 80EC30              <1> 	sub ah, 48
 10844 00008A87 80EC0A              <1> 	sub ah, 0xA
 10845 00008A8A 80C441              <1> 	add ah, "A"
 10846                              <1> .goodah:
 10847 00008A8D 668906              <1> 	mov [esi], ax
 10848 00008A90 81C603000000        <1> 	add esi, 3
 10849 00008A96 47                  <1> 	inc edi
 10850 00008A97 39CF                <1> 	cmp edi, ecx
 10851 00008A99 72C8                <1> 	jb showmacloop
 10852 00008A9B BE[A68A0000]        <1> 	mov esi, macprint
 10853 00008AA0 E87A92FFFF          <1> 	call print
 10854 00008AA5 C3                  <1> 	ret
 10855                              <1> 	
 10856 00008AA6 30303A30303A30303A- <1> macprint db "00:00:00:00:00:00 ",0
 10857 00008AAF 30303A30303A303020- <1>
 10858 00008AB8 00                  <1>
 10859 00008AB9 00000000            <1> ethernetend dw 0,0
 10860 00008ABD C0A80002            <1> sysip db 192,168,0,2
 10861 00008AC1 000000000000        <1> sysmac	db 0,0,0,0,0,0		;my mac address
 10862                                  %endif
 10863                                      %include "source/data.asm"
 10864 00008AC7 626F6F742E736800    <1> 	bootfilename db "boot.sh",0
 10865 00008ACF 73687573683A2000    <1> 	notfound1 db "shush: ",0
 10866 00008AD7 3A206E6F7420666F75- <1> 	notfound2 db  ": not found",10,0
 10867 00008AE0 6E640A00            <1>
 10868 00008AE4 757365726E616D653A- <1> 	userask db "username:",0
 10869 00008AED 00                  <1>
 10870 00008AEE 70617373776F72643A- <1> 	pwdask	db	"password:",0
 10871 00008AF7 00                  <1>
 10872 00008AF8 40                  <1> 	computer db "@"
 10873                              <1> %ifdef io.serial
 10874                              <1> 	computername	db	"SollerOS.",io.serial," ",0
 10875                              <1> %else
 10876 00008AF9 536F6C6C65724F5320- <1> 	computername	db	"SollerOS ",0
 10877 00008B02 00                  <1>
 10878                              <1> %endif
 10879 00008B03 5D242000            <1> 	endprompt db "]$ ",0
 10880 00008B07 0D                  <1> 	crlf 	db  13
 10881 00008B08 0A00                <1> 	line	db	10,0
 10882                              <1> 	userlst:
 10883 00008B0A 726F6F7400          <1> 			db "root",0
 10884 00008B0F 617765736F6D65706F- <1> 			db "awesomepower",0
 10885 00008B18 77657200            <1>
 10886 00008B1C 7573657200          <1> 			db "user",0
 10887 00008B21 70617373776F726400  <1> 			db "password",0
 10888 00008B2A 6E00                <1> 			db "n",0	;;abuse for quick entry-a quick double n followed by a double enter will get you in
 10889 00008B2C 00                  <1> 			db 0
 10890                              <1> 	userlstend:
 10891                              <1> 	
 10892                              <1> %ifdef io.serial
 10893                              <1> %else
 10894 00008B2C <incbin>            <1> fonts:	incbin "source/precompiled/fonts.pak"
 10895                              <1> fontend:
 10896                              <1> %endif
 10897                              <1> osend:	;this is the end of the operating system's space on disk
 10898                                      %include "build/fileindex.asm"
 10899                              <1> diskfileindex:
 10900 00009B2D 617267746573742E65- <1> db "argtest.elf",0
 10901 00009B36 6C6600              <1>
 10902 00009B39 4F000000            <1> dd (f0-$$)/512
 10903 00009B3D 06010000            <1> dd (f1-f0)/512
 10904 00009B41 6261636B67726F756E- <1> db "background.bmp",0
 10905 00009B4A 642E626D7000        <1>
 10906 00009B50 55010000            <1> dd (f1-$$)/512
 10907 00009B54 01140000            <1> dd (f2-f1)/512
 10908 00009B58 626F6F742E736800    <1> db "boot.sh",0
 10909 00009B60 56150000            <1> dd (f2-$$)/512
 10910 00009B64 01000000            <1> dd (f3-f2)/512
 10911 00009B68 63686172746573742E- <1> db "chartest.elf",0
 10912 00009B71 656C6600            <1>
 10913 00009B75 57150000            <1> dd (f3-$$)/512
 10914 00009B79 26010000            <1> dd (f4-f3)/512
 10915 00009B7D 646F73746573742E63- <1> db "dostest.com",0
 10916 00009B86 6F6D00              <1>
 10917 00009B89 7D160000            <1> dd (f4-$$)/512
 10918 00009B8D 01000000            <1> dd (f5-f4)/512
 10919 00009B91 6578656300          <1> db "exec",0
 10920 00009B96 7E160000            <1> dd (f5-$$)/512
 10921 00009B9A 01000000            <1> dd (f6-f5)/512
 10922 00009B9E 66696E616C636F756E- <1> db "finalcount.sn",0
 10923 00009BA7 742E736E00          <1>
 10924 00009BAC 7F160000            <1> dd (f6-$$)/512
 10925 00009BB0 01000000            <1> dd (f7-f6)/512
 10926 00009BB4 666F726B00          <1> db "fork",0
 10927 00009BB9 80160000            <1> dd (f7-$$)/512
 10928 00009BBD 01000000            <1> dd (f8-f7)/512
 10929 00009BC1 68656C6C6F776F726C- <1> db "helloworld.elf",0
 10930 00009BCA 642E656C6600        <1>
 10931 00009BD0 81160000            <1> dd (f8-$$)/512
 10932 00009BD4 D6010000            <1> dd (f9-f8)/512
 10933 00009BD8 696E7400            <1> db "int",0
 10934 00009BDC 57180000            <1> dd (f9-$$)/512
 10935 00009BE0 01000000            <1> dd (f10-f9)/512
 10936 00009BE4 6C6F7374776F6F6473- <1> db "lostwoods.sn",0
 10937 00009BED 2E736E00            <1>
 10938 00009BF1 58180000            <1> dd (f10-$$)/512
 10939 00009BF5 01000000            <1> dd (f11-f10)/512
 10940 00009BF9 6D6172696F2E736E00  <1> db "mario.sn",0
 10941 00009C02 59180000            <1> dd (f11-$$)/512
 10942 00009C06 01000000            <1> dd (f12-f11)/512
 10943 00009C0A 70692E656C6600      <1> db "pi.elf",0
 10944 00009C11 5A180000            <1> dd (f12-$$)/512
 10945 00009C15 1F010000            <1> dd (f13-f12)/512
 10946 00009C19 736F6C6C65726F732E- <1> db "solleros.bmp",0
 10947 00009C22 626D7000            <1>
 10948 00009C26 79190000            <1> dd (f13-$$)/512
 10949 00009C2A B0020000            <1> dd (f14-f13)/512
 10950 00009C2E 736F6C6C65726F732E- <1> db "solleros.txt",0
 10951 00009C37 74787400            <1>
 10952 00009C3B 291C0000            <1> dd (f14-$$)/512
 10953 00009C3F 01000000            <1> dd (f15-f14)/512
 10954 00009C43 736F6E676F74696D65- <1> db "songotime.sn",0
 10955 00009C4C 2E736E00            <1>
 10956 00009C50 2A1C0000            <1> dd (f15-$$)/512
 10957 00009C54 01000000            <1> dd (f16-f15)/512
 10958 00009C58 73736500            <1> db "sse",0
 10959 00009C5C 2B1C0000            <1> dd (f16-$$)/512
 10960 00009C60 02000000            <1> dd (f17-f16)/512
 10961 00009C64 737464696F74657374- <1> db "stdiotest.elf",0
 10962 00009C6D 2E656C6600          <1>
 10963 00009C72 2D1C0000            <1> dd (f17-$$)/512
 10964 00009C76 27010000            <1> dd (f18-f17)/512
 10965 00009C7A 74656C7900          <1> db "tely",0
 10966 00009C7F 541D0000            <1> dd (f18-$$)/512
 10967 00009C83 01000000            <1> dd (f19-f18)/512
 10968 00009C87 74696D65746573742E- <1> db "timetest.elf",0
 10969 00009C90 656C6600            <1>
 10970 00009C94 551D0000            <1> dd (f19-$$)/512
 10971 00009C98 04010000            <1> dd (f20-f19)/512
 10972 00009C9C 7475746F7269616C2E- <1> db "tutorial.sh",0
 10973 00009CA5 736800              <1>
 10974 00009CA8 591E0000            <1> dd (f20-$$)/512
 10975 00009CAC 03000000            <1> dd (f21-f20)/512
 10976 00009CB0 756E667300          <1> db "unfs",0
 10977 00009CB5 5C1E0000            <1> dd (f21-$$)/512
 10978 00009CB9 02000000            <1> dd (f22-f21)/512
 10979 00009CBD 766963746F72792E77- <1> db "victory.wav",0
 10980 00009CC6 617600              <1>
 10981 00009CC9 5E1E0000            <1> dd (f22-$$)/512
 10982 00009CCD 16000000            <1> dd (f23-f22)/512
 10983 00009CD1 5F696D672E62696E00  <1> db "_img.bin",0
 10984 00009CDA 741E0000            <1> dd (f23-$$)/512
 10985 00009CDE D7020000            <1> dd (f24-f23)/512
 10986                              <1> enddiskfileindex:
 10987                              <1> 
 10988                                      %include "source/bss.asm"
 10989 00009CE2 90<rept>            <1> align 4, nop
 10990                              <1> bssstart: equ $
 10991                              <1> guion equ bssstart
 10992                              <1> DriveNumber equ guion + 1
 10993                              <1> lbaad equ DriveNumber + 1
 10994                              <1> memlistbuf equ lbaad + 4
 10995                              <1> memlistend equ memlistbuf + 576
 10996                              <1> bsscopy equ memlistend
 10997                              <1> initialstack equ bsscopy
 10998                              <1> stackend equ initialstack + 4000
 10999                              <1> fileindex: equ stackend + 96
 11000                              <1> fileindexend: equ fileindex + 1024
 11001                              <1> previousstack equ fileindexend
 11002                              <1> lastfolderloc equ previousstack + 4
 11003                              <1> currentfolderloc equ lastfolderloc + 4
 11004                              <1> currentfolder equ currentfolderloc + 4
 11005                              <1> currentfolderend equ currentfolder + 512
 11006                              <1> uid equ currentfolderend
 11007                              <1> ranboot equ uid + 4
 11008                              <1> IFON equ ranboot + 1
 11009                              <1> IFTRUE equ IFON + 1
 11010                              <1> BATCHPOS equ IFTRUE + 100
 11011                              <1> BATCHISON equ BATCHPOS + 4
 11012                              <1> LOOPON equ BATCHISON + 1
 11013                              <1> LOOPPOS	equ LOOPON + 1
 11014                              <1> variables: equ LOOPPOS + 4
 11015                              <1> varend: equ variables + 4096
 11016                              <1> buftxt2: equ varend
 11017                              <1> buftxt: equ buftxt2 + 1024
 11018                              <1> buftxtend: equ buftxt + 1024
 11019                              <1> buf2: equ buftxtend
 11020                              <1> numbuf: equ buf2 + 20
 11021                              <1> %ifdef io.serial
 11022                              <1> 	lastcommandpos equ numbuf + 1
 11023                              <1> %else
 11024                              <1> 	%ifdef gui.included
 11025                              <1> 		graphicstable equ numbuf + 1 ;w type, dw datalocation, w locationx, w locationy, w selected, dw code
 11026                              <1> 		graphicstableend equ graphicstable + 200h
 11027                              <1> 		%ifdef gui.background
 11028                              <1> 			backgroundbuffer equ graphicstableend
 11029                              <1> 			backgroundbufferend equ backgroundbuffer + 1280*1026*2
 11030                              <1> 			mousecolorbuf equ backgroundbufferend
 11031                              <1> 		%else
 11032                              <1> 			mousecolorbuf equ graphicstableend ;where the gui under the mouse is stored
 11033                              <1> 		%endif
 11034                              <1> 		mcolorend equ mousecolorbuf + 256
 11035                              <1> 		videobuf equ mcolorend + 1	;1680x1050 pixels in characters
 11036                              <1> 		videobufend	equ videobuf + 210*65*2
 11037                              <1> 		videobuf2 equ videobufend
 11038                              <1> 		videobuf2end equ videobuf2 + 210*65*2
 11039                              <1> 	%else
 11040                              <1> 		videobuf equ numbuf + 1
 11041                              <1> 		videobufend equ videobuf + 80*30*2
 11042                              <1> 		videobuf2 equ videobufend
 11043                              <1> 		videobuf2end equ videobuf2 + 160*64*2
 11044                              <1> 	%endif
 11045                              <1> 	lastcommandpos: equ videobuf2end
 11046                              <1> %endif
 11047                              <1> 	commandbufpos: equ lastcommandpos + 4
 11048                              <1> 	commandlistentries: equ commandbufpos + 4
 11049                              <1> 	commandsentered: equ commandlistentries + 4
 11050                              <1> 	commandbuf: equ commandsentered + 4
 11051                              <1> 	commandbufend: equ commandbuf + 4096 ;this is where kernel space only ends, the rest is for threading
 11052                              <1> %ifdef network.included
 11053                              <1> 	rbuffstart: equ commandbufend ;for use with networking
 11054                              <1> 	rbuffend equ rbuffstart + 8212
 11055                              <1> %else
 11056                              <1> 	rbuffstart equ commandbufend
 11057                              <1> 	rbuffend equ commandbufend
 11058                              <1> %endif
 11059                              <1> %ifdef threads.included
 11060                              <1> 	threadlist: equ rbuffend ;this buffer will hold the stack locations of all of the threads, up to 2048
 11061                              <1> 	threadlistend: equ threadlist + 1024*4
 11062                              <1> 	stacks:	equ threadlistend ;i use SS now for proper stack management. This makes sure stacks never screw with other memory
 11063                              <1> 	stack1: equ stacks + 1024  ;woah, thats a lot of space for stacks
 11064                              <1> 	bssend equ stack1 + 1024*1024
 11065                              <1> %else
 11066                              <1> 	bssend equ rbuffend
 11067                              <1> %endif
 11068                              <1> dosprogloc equ 0x400000 ;from here on, it is not kernel space so apps can be loaded here.
 11069                                      %include "build/files.asm"
 11070 00009CE4 00<rept>            <1> align 512,db 0
 11071                              <1> f0:
 11072 00009CE4 <incbin>            <1> incbin "included/argtest.elf"
 11073 0002A8F2 00<rept>            <1> align 512,db 0
 11074                              <1> f1:
 11075 0002A8F2 <incbin>            <1> incbin "included/background.bmp"
 11076 002AAA46 00<rept>            <1> align 512,db 0
 11077                              <1> f2:
 11078 002AAA46 <incbin>            <1> incbin "included/boot.sh"
 11079 002AAD05 00<rept>            <1> align 512,db 0
 11080                              <1> f3:
 11081 002AAD05 <incbin>            <1> incbin "included/chartest.elf"
 11082 002CF8DB 00<rept>            <1> align 512,db 0
 11083                              <1> f4:
 11084 002CF8DB <incbin>            <1> incbin "included/dostest.com"
 11085 002CFB31 00<rept>            <1> align 512,db 0
 11086                              <1> f5:
 11087 002CFB31 <incbin>            <1> incbin "included/exec"
 11088 002CFCE9 00<rept>            <1> align 512,db 0
 11089                              <1> f6:
 11090 002CFCE9 <incbin>            <1> incbin "included/finalcount.sn"
 11091 002CFF02 00<rept>            <1> align 512,db 0
 11092                              <1> f7:
 11093 002CFF02 <incbin>            <1> incbin "included/fork"
 11094 002D0162 00<rept>            <1> align 512,db 0
 11095                              <1> f8:
 11096 002D0162 <incbin>            <1> incbin "included/helloworld.elf"
 11097 0030ADE3 00<rept>            <1> align 512,db 0
 11098                              <1> f9:
 11099 0030ADE3 <incbin>            <1> incbin "included/int"
 11100 0030AFB5 00<rept>            <1> align 512,db 0
 11101                              <1> f10:
 11102 0030AFB5 <incbin>            <1> incbin "included/lostwoods.sn"
 11103 0030B056 00<rept>            <1> align 512,db 0
 11104                              <1> f11:
 11105 0030B056 <incbin>            <1> incbin "included/mario.sn"
 11106 0030B23A 00<rept>            <1> align 512,db 0
 11107                              <1> f12:
 11108 0030B23A <incbin>            <1> incbin "included/pi.elf"
 11109 0032F131 00<rept>            <1> align 512,db 0
 11110                              <1> f13:
 11111 0032F131 <incbin>            <1> incbin "included/solleros.bmp"
 11112 003851E6 00<rept>            <1> align 512,db 0
 11113                              <1> f14:
 11114 003851E6 <incbin>            <1> incbin "included/solleros.txt"
 11115 00385374 00<rept>            <1> align 512,db 0
 11116                              <1> f15:
 11117 00385374 <incbin>            <1> incbin "included/songotime.sn"
 11118 0038544A 00<rept>            <1> align 512,db 0
 11119                              <1> f16:
 11120 0038544A <incbin>            <1> incbin "included/sse"
 11121 003858A8 00<rept>            <1> align 512,db 0
 11122                              <1> f17:
 11123 003858A8 <incbin>            <1> incbin "included/stdiotest.elf"
 11124 003AA643 00<rept>            <1> align 512,db 0
 11125                              <1> f18:
 11126 003AA643 <incbin>            <1> incbin "included/tely"
 11127 003AA9C7 00<rept>            <1> align 512,db 0
 11128                              <1> f19:
 11129 003AA9C7 <incbin>            <1> incbin "included/timetest.elf"
 11130 003CB03D 00<rept>            <1> align 512,db 0
 11131                              <1> f20:
 11132 003CB03D <incbin>            <1> incbin "included/tutorial.sh"
 11133 003CB752 00<rept>            <1> align 512,db 0
 11134                              <1> f21:
 11135 003CB752 <incbin>            <1> incbin "included/unfs"
 11136                              <1> align 512,db 0
 11137                              <1> f22:
 11138 003CB752 <incbin>            <1> incbin "included/victory.wav"
 11139 003CE748 00<rept>            <1> align 512,db 0
 11140                              <1> f23:
 11141 003CE748 <incbin>            <1> incbin "included/_img.bin"
 11142                              <1> align 512,db 0
 11143                              <1> f24:
